
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//zfs.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes16>:
       0:	sub	sp, sp, #0x10
       4:	strh	w0, [sp, #14]
       8:	ldrh	w0, [sp, #14]
       c:	lsl	w0, w0, #8
      10:	sxth	w1, w0
      14:	ldrh	w0, [sp, #14]
      18:	lsr	w0, w0, #8
      1c:	and	w0, w0, #0xffff
      20:	sxth	w0, w0
      24:	orr	w0, w1, w0
      28:	sxth	w0, w0
      2c:	and	w0, w0, #0xffff
      30:	add	sp, sp, #0x10
      34:	ret

0000000000000038 <grub_swap_bytes32>:
      38:	sub	sp, sp, #0x10
      3c:	str	w0, [sp, #12]
      40:	ldr	w0, [sp, #12]
      44:	rev	w0, w0
      48:	add	sp, sp, #0x10
      4c:	ret

0000000000000050 <grub_swap_bytes64>:
      50:	sub	sp, sp, #0x10
      54:	str	x0, [sp, #8]
      58:	ldr	x0, [sp, #8]
      5c:	rev	x0, x0
      60:	add	sp, sp, #0x10
      64:	ret

0000000000000068 <grub_get_unaligned32>:
      68:	sub	sp, sp, #0x20
      6c:	str	x0, [sp, #8]
      70:	ldr	x0, [sp, #8]
      74:	str	x0, [sp, #24]
      78:	ldr	x0, [sp, #24]
      7c:	ldr	w0, [x0]
      80:	add	sp, sp, #0x20
      84:	ret

0000000000000088 <grub_get_unaligned64>:
      88:	sub	sp, sp, #0x20
      8c:	str	x0, [sp, #8]
      90:	ldr	x0, [sp, #8]
      94:	str	x0, [sp, #24]
      98:	ldr	x0, [sp, #24]
      9c:	ldr	x0, [x0]
      a0:	add	sp, sp, #0x20
      a4:	ret

00000000000000a8 <grub_fs_register>:
      a8:	stp	x29, x30, [sp, #-32]!
      ac:	mov	x29, sp
      b0:	str	x0, [sp, #24]
      b4:	ldr	x1, [sp, #24]
      b8:	adrp	x0, 0 <grub_swap_bytes16>
      bc:	add	x0, x0, #0x0
      c0:	ldr	x0, [x0]
      c4:	bl	0 <grub_list_push>
      c8:	nop
      cc:	ldp	x29, x30, [sp], #32
      d0:	ret
      d4:	nop
	...

00000000000000e0 <grub_fs_unregister>:
      e0:	stp	x29, x30, [sp, #-32]!
      e4:	mov	x29, sp
      e8:	str	x0, [sp, #24]
      ec:	ldr	x0, [sp, #24]
      f0:	bl	0 <grub_list_remove>
      f4:	nop
      f8:	ldp	x29, x30, [sp], #32
      fc:	ret

0000000000000100 <grub_memcpy>:
     100:	stp	x29, x30, [sp, #-48]!
     104:	mov	x29, sp
     108:	str	x0, [sp, #40]
     10c:	str	x1, [sp, #32]
     110:	str	x2, [sp, #24]
     114:	ldr	x2, [sp, #24]
     118:	ldr	x1, [sp, #32]
     11c:	ldr	x0, [sp, #40]
     120:	bl	0 <grub_memmove>
     124:	ldp	x29, x30, [sp], #48
     128:	ret

000000000000012c <grub_tolower>:
     12c:	sub	sp, sp, #0x10
     130:	str	w0, [sp, #12]
     134:	ldr	w0, [sp, #12]
     138:	cmp	w0, #0x40
     13c:	b.le	158 <grub_tolower+0x2c>
     140:	ldr	w0, [sp, #12]
     144:	cmp	w0, #0x5a
     148:	b.gt	158 <grub_tolower+0x2c>
     14c:	ldr	w0, [sp, #12]
     150:	add	w0, w0, #0x20
     154:	b	15c <grub_tolower+0x30>
     158:	ldr	w0, [sp, #12]
     15c:	add	sp, sp, #0x10
     160:	ret

0000000000000164 <grub_toupper>:
     164:	sub	sp, sp, #0x10
     168:	str	w0, [sp, #12]
     16c:	ldr	w0, [sp, #12]
     170:	cmp	w0, #0x60
     174:	b.le	190 <grub_toupper+0x2c>
     178:	ldr	w0, [sp, #12]
     17c:	cmp	w0, #0x7a
     180:	b.gt	190 <grub_toupper+0x2c>
     184:	ldr	w0, [sp, #12]
     188:	sub	w0, w0, #0x20
     18c:	b	194 <grub_toupper+0x30>
     190:	ldr	w0, [sp, #12]
     194:	add	sp, sp, #0x10
     198:	ret

000000000000019c <grub_strcasecmp>:
     19c:	stp	x29, x30, [sp, #-48]!
     1a0:	mov	x29, sp
     1a4:	str	x19, [sp, #16]
     1a8:	str	x0, [sp, #40]
     1ac:	str	x1, [sp, #32]
     1b0:	b	1f0 <grub_strcasecmp+0x54>
     1b4:	ldr	x0, [sp, #40]
     1b8:	ldrb	w0, [x0]
     1bc:	bl	12c <grub_tolower>
     1c0:	mov	w19, w0
     1c4:	ldr	x0, [sp, #32]
     1c8:	ldrb	w0, [x0]
     1cc:	bl	12c <grub_tolower>
     1d0:	cmp	w19, w0
     1d4:	b.ne	214 <grub_strcasecmp+0x78>  // b.any
     1d8:	ldr	x0, [sp, #40]
     1dc:	add	x0, x0, #0x1
     1e0:	str	x0, [sp, #40]
     1e4:	ldr	x0, [sp, #32]
     1e8:	add	x0, x0, #0x1
     1ec:	str	x0, [sp, #32]
     1f0:	ldr	x0, [sp, #40]
     1f4:	ldrb	w0, [x0]
     1f8:	cmp	w0, #0x0
     1fc:	b.eq	218 <grub_strcasecmp+0x7c>  // b.none
     200:	ldr	x0, [sp, #32]
     204:	ldrb	w0, [x0]
     208:	cmp	w0, #0x0
     20c:	b.ne	1b4 <grub_strcasecmp+0x18>  // b.any
     210:	b	218 <grub_strcasecmp+0x7c>
     214:	nop
     218:	ldr	x0, [sp, #40]
     21c:	ldrb	w0, [x0]
     220:	bl	12c <grub_tolower>
     224:	mov	w19, w0
     228:	ldr	x0, [sp, #32]
     22c:	ldrb	w0, [x0]
     230:	bl	12c <grub_tolower>
     234:	sub	w0, w19, w0
     238:	ldr	x19, [sp, #16]
     23c:	ldp	x29, x30, [sp], #48
     240:	ret

0000000000000244 <grub_crypto_cipher_close>:
     244:	stp	x29, x30, [sp, #-32]!
     248:	mov	x29, sp
     24c:	str	x0, [sp, #24]
     250:	ldr	x0, [sp, #24]
     254:	bl	0 <grub_free>
     258:	nop
     25c:	ldp	x29, x30, [sp], #32
     260:	ret

0000000000000264 <grub_crypto_xor>:
     264:	sub	sp, sp, #0x40
     268:	str	x0, [sp, #24]
     26c:	str	x1, [sp, #16]
     270:	str	x2, [sp, #8]
     274:	str	x3, [sp]
     278:	ldr	x0, [sp, #16]
     27c:	str	x0, [sp, #56]
     280:	ldr	x0, [sp, #8]
     284:	str	x0, [sp, #48]
     288:	ldr	x0, [sp, #24]
     28c:	str	x0, [sp, #40]
     290:	b	2e4 <grub_crypto_xor+0x80>
     294:	ldr	x0, [sp, #56]
     298:	ldrb	w1, [x0]
     29c:	ldr	x0, [sp, #48]
     2a0:	ldrb	w0, [x0]
     2a4:	eor	w0, w1, w0
     2a8:	and	w1, w0, #0xff
     2ac:	ldr	x0, [sp, #40]
     2b0:	strb	w1, [x0]
     2b4:	ldr	x0, [sp, #56]
     2b8:	add	x0, x0, #0x1
     2bc:	str	x0, [sp, #56]
     2c0:	ldr	x0, [sp, #48]
     2c4:	add	x0, x0, #0x1
     2c8:	str	x0, [sp, #48]
     2cc:	ldr	x0, [sp, #40]
     2d0:	add	x0, x0, #0x1
     2d4:	str	x0, [sp, #40]
     2d8:	ldr	x0, [sp]
     2dc:	sub	x0, x0, #0x1
     2e0:	str	x0, [sp]
     2e4:	ldr	x0, [sp]
     2e8:	cmp	x0, #0x0
     2ec:	b.eq	370 <grub_crypto_xor+0x10c>  // b.none
     2f0:	ldr	x0, [sp, #56]
     2f4:	and	x0, x0, #0x7
     2f8:	cmp	x0, #0x0
     2fc:	b.ne	294 <grub_crypto_xor+0x30>  // b.any
     300:	ldr	x0, [sp, #48]
     304:	and	x0, x0, #0x7
     308:	cmp	x0, #0x0
     30c:	b.ne	294 <grub_crypto_xor+0x30>  // b.any
     310:	ldr	x0, [sp, #40]
     314:	and	x0, x0, #0x7
     318:	cmp	x0, #0x0
     31c:	b.ne	294 <grub_crypto_xor+0x30>  // b.any
     320:	b	370 <grub_crypto_xor+0x10c>
     324:	ldr	x0, [sp, #56]
     328:	ldr	x1, [x0]
     32c:	ldr	x0, [sp, #48]
     330:	ldr	x0, [x0]
     334:	eor	x1, x1, x0
     338:	ldr	x0, [sp, #40]
     33c:	str	x1, [x0]
     340:	ldr	x0, [sp, #56]
     344:	add	x0, x0, #0x8
     348:	str	x0, [sp, #56]
     34c:	ldr	x0, [sp, #48]
     350:	add	x0, x0, #0x8
     354:	str	x0, [sp, #48]
     358:	ldr	x0, [sp, #40]
     35c:	add	x0, x0, #0x8
     360:	str	x0, [sp, #40]
     364:	ldr	x0, [sp]
     368:	sub	x0, x0, #0x8
     36c:	str	x0, [sp]
     370:	ldr	x0, [sp]
     374:	cmp	x0, #0x7
     378:	b.hi	324 <grub_crypto_xor+0xc0>  // b.pmore
     37c:	b	3d0 <grub_crypto_xor+0x16c>
     380:	ldr	x0, [sp, #56]
     384:	ldrb	w1, [x0]
     388:	ldr	x0, [sp, #48]
     38c:	ldrb	w0, [x0]
     390:	eor	w0, w1, w0
     394:	and	w1, w0, #0xff
     398:	ldr	x0, [sp, #40]
     39c:	strb	w1, [x0]
     3a0:	ldr	x0, [sp, #56]
     3a4:	add	x0, x0, #0x1
     3a8:	str	x0, [sp, #56]
     3ac:	ldr	x0, [sp, #48]
     3b0:	add	x0, x0, #0x1
     3b4:	str	x0, [sp, #48]
     3b8:	ldr	x0, [sp, #40]
     3bc:	add	x0, x0, #0x1
     3c0:	str	x0, [sp, #40]
     3c4:	ldr	x0, [sp]
     3c8:	sub	x0, x0, #0x1
     3cc:	str	x0, [sp]
     3d0:	ldr	x0, [sp]
     3d4:	cmp	x0, #0x0
     3d8:	b.ne	380 <grub_crypto_xor+0x11c>  // b.any
     3dc:	nop
     3e0:	nop
     3e4:	add	sp, sp, #0x40
     3e8:	ret

00000000000003ec <DVA_OFFSET_TO_PHYS_SECTOR>:
     3ec:	sub	sp, sp, #0x10
     3f0:	str	x0, [sp, #8]
     3f4:	ldr	x0, [sp, #8]
     3f8:	add	x0, x0, #0x400, lsl #12
     3fc:	lsr	x0, x0, #9
     400:	add	sp, sp, #0x10
     404:	ret

0000000000000408 <ZAP_HASH_IDX>:
     408:	sub	sp, sp, #0x10
     40c:	str	x0, [sp, #8]
     410:	str	x1, [sp]
     414:	ldr	x0, [sp]
     418:	cmp	x0, #0x0
     41c:	b.eq	43c <ZAP_HASH_IDX+0x34>  // b.none
     420:	ldr	x0, [sp]
     424:	mov	w1, w0
     428:	mov	w0, #0x40                  	// #64
     42c:	sub	w0, w0, w1
     430:	ldr	x1, [sp, #8]
     434:	lsr	x0, x1, x0
     438:	b	440 <ZAP_HASH_IDX+0x38>
     43c:	mov	x0, #0x0                   	// #0
     440:	add	sp, sp, #0x10
     444:	ret

0000000000000448 <ZAP_LEAF_HASH_SHIFT>:
     448:	sub	sp, sp, #0x10
     44c:	str	w0, [sp, #12]
     450:	ldr	w0, [sp, #12]
     454:	sub	w0, w0, #0x5
     458:	add	sp, sp, #0x10
     45c:	ret

0000000000000460 <ZAP_LEAF_HASH_NUMENTRIES>:
     460:	stp	x29, x30, [sp, #-32]!
     464:	mov	x29, sp
     468:	str	w0, [sp, #28]
     46c:	ldr	w0, [sp, #28]
     470:	bl	448 <ZAP_LEAF_HASH_SHIFT>
     474:	mov	w1, w0
     478:	mov	w0, #0x1                   	// #1
     47c:	lsl	w0, w0, w1
     480:	ldp	x29, x30, [sp], #32
     484:	ret

0000000000000488 <LEAF_HASH>:
     488:	stp	x29, x30, [sp, #-64]!
     48c:	mov	x29, sp
     490:	str	x19, [sp, #16]
     494:	str	w0, [sp, #60]
     498:	str	x1, [sp, #48]
     49c:	str	x2, [sp, #40]
     4a0:	ldr	w0, [sp, #60]
     4a4:	bl	460 <ZAP_LEAF_HASH_NUMENTRIES>
     4a8:	sub	w0, w0, #0x1
     4ac:	sxtw	x19, w0
     4b0:	ldr	w0, [sp, #60]
     4b4:	bl	448 <ZAP_LEAF_HASH_SHIFT>
     4b8:	mov	w1, w0
     4bc:	mov	w0, #0x40                  	// #64
     4c0:	sub	w0, w0, w1
     4c4:	ldr	x1, [sp, #40]
     4c8:	ldrh	w1, [x1, #32]
     4cc:	sub	w0, w0, w1
     4d0:	ldr	x1, [sp, #48]
     4d4:	lsr	x0, x1, x0
     4d8:	and	x0, x19, x0
     4dc:	ldr	x19, [sp, #16]
     4e0:	ldp	x29, x30, [sp], #64
     4e4:	ret

00000000000004e8 <ZAP_LEAF_NUMCHUNKS>:
     4e8:	stp	x29, x30, [sp, #-48]!
     4ec:	mov	x29, sp
     4f0:	str	x19, [sp, #16]
     4f4:	str	w0, [sp, #44]
     4f8:	ldr	w0, [sp, #44]
     4fc:	mov	w1, #0x1                   	// #1
     500:	lsl	w19, w1, w0
     504:	ldr	w0, [sp, #44]
     508:	bl	460 <ZAP_LEAF_HASH_NUMENTRIES>
     50c:	lsl	w0, w0, #1
     510:	sub	w1, w19, w0
     514:	mov	w0, #0xaaab                	// #43691
     518:	movk	w0, #0xaaaa, lsl #16
     51c:	umull	x0, w1, w0
     520:	lsr	x0, x0, #32
     524:	lsr	w0, w0, #4
     528:	sub	w0, w0, #0x2
     52c:	ldr	x19, [sp, #16]
     530:	ldp	x29, x30, [sp], #48
     534:	ret

0000000000000538 <ZAP_LEAF_CHUNK>:
     538:	stp	x29, x30, [sp, #-48]!
     53c:	mov	x29, sp
     540:	str	x19, [sp, #16]
     544:	str	x0, [sp, #40]
     548:	str	w1, [sp, #36]
     54c:	str	w2, [sp, #32]
     550:	ldr	x0, [sp, #40]
     554:	add	x19, x0, #0x30
     558:	ldr	w0, [sp, #36]
     55c:	bl	460 <ZAP_LEAF_HASH_NUMENTRIES>
     560:	lsl	w0, w0, #1
     564:	sxtw	x0, w0
     568:	and	x2, x0, #0xfffffffffffffff8
     56c:	ldrsw	x1, [sp, #32]
     570:	mov	x0, x1
     574:	lsl	x0, x0, #1
     578:	add	x0, x0, x1
     57c:	lsl	x0, x0, #3
     580:	add	x0, x2, x0
     584:	add	x0, x19, x0
     588:	ldr	x19, [sp, #16]
     58c:	ldp	x29, x30, [sp], #48
     590:	ret

0000000000000594 <ZAP_LEAF_ENTRY>:
     594:	stp	x29, x30, [sp, #-32]!
     598:	mov	x29, sp
     59c:	str	x0, [sp, #24]
     5a0:	str	w1, [sp, #20]
     5a4:	str	w2, [sp, #16]
     5a8:	ldr	w2, [sp, #16]
     5ac:	ldr	w1, [sp, #20]
     5b0:	ldr	x0, [sp, #24]
     5b4:	bl	538 <ZAP_LEAF_CHUNK>
     5b8:	ldp	x29, x30, [sp], #32
     5bc:	ret

00000000000005c0 <zlib_decompress>:
     5c0:	stp	x29, x30, [sp, #-48]!
     5c4:	mov	x29, sp
     5c8:	str	x0, [sp, #40]
     5cc:	str	x1, [sp, #32]
     5d0:	str	x2, [sp, #24]
     5d4:	str	x3, [sp, #16]
     5d8:	ldr	x4, [sp, #16]
     5dc:	ldr	x3, [sp, #32]
     5e0:	mov	x2, #0x0                   	// #0
     5e4:	ldr	x1, [sp, #24]
     5e8:	ldr	x0, [sp, #40]
     5ec:	bl	0 <grub_zlib_decompress>
     5f0:	mov	x1, x0
     5f4:	ldr	x0, [sp, #16]
     5f8:	cmp	x1, x0
     5fc:	b.ne	608 <zlib_decompress+0x48>  // b.any
     600:	mov	w0, #0x0                   	// #0
     604:	b	644 <zlib_decompress+0x84>
     608:	adrp	x0, 0 <grub_swap_bytes16>
     60c:	add	x0, x0, #0x0
     610:	ldr	x0, [x0]
     614:	ldr	w0, [x0]
     618:	cmp	w0, #0x0
     61c:	b.ne	634 <zlib_decompress+0x74>  // b.any
     620:	adrp	x0, 0 <grub_swap_bytes16>
     624:	add	x0, x0, #0x0
     628:	ldr	x1, [x0]
     62c:	mov	w0, #0x1a                  	// #26
     630:	bl	0 <grub_error>
     634:	adrp	x0, 0 <grub_swap_bytes16>
     638:	add	x0, x0, #0x0
     63c:	ldr	x0, [x0]
     640:	ldr	w0, [x0]
     644:	ldp	x29, x30, [sp], #48
     648:	ret
     64c:	nop
	...

0000000000000660 <zle_decompress>:
     660:	stp	x29, x30, [sp, #-80]!
     664:	mov	x29, sp
     668:	str	x0, [sp, #40]
     66c:	str	x1, [sp, #32]
     670:	str	x2, [sp, #24]
     674:	str	x3, [sp, #16]
     678:	ldr	x0, [sp, #40]
     67c:	str	x0, [sp, #72]
     680:	ldr	x0, [sp, #32]
     684:	str	x0, [sp, #64]
     688:	b	7dc <zle_decompress+0x17c>
     68c:	ldr	x0, [sp, #72]
     690:	ldrb	w0, [x0]
     694:	sxtb	w0, w0
     698:	cmp	w0, #0x0
     69c:	b.ge	6bc <zle_decompress+0x5c>  // b.tcont
     6a0:	ldr	x0, [sp, #72]
     6a4:	ldrb	w0, [x0]
     6a8:	and	w0, w0, #0x7f
     6ac:	add	w0, w0, #0x41
     6b0:	sxtw	x0, w0
     6b4:	str	x0, [sp, #56]
     6b8:	b	6d4 <zle_decompress+0x74>
     6bc:	ldr	x0, [sp, #72]
     6c0:	ldrb	w0, [x0]
     6c4:	and	w0, w0, #0x3f
     6c8:	add	w0, w0, #0x1
     6cc:	sxtw	x0, w0
     6d0:	str	x0, [sp, #56]
     6d4:	ldr	x1, [sp, #32]
     6d8:	ldr	x0, [sp, #16]
     6dc:	add	x1, x1, x0
     6e0:	ldr	x0, [sp, #64]
     6e4:	sub	x1, x1, x0
     6e8:	ldr	x0, [sp, #56]
     6ec:	cmp	x1, x0
     6f0:	b.ge	70c <zle_decompress+0xac>  // b.tcont
     6f4:	ldr	x1, [sp, #32]
     6f8:	ldr	x0, [sp, #16]
     6fc:	add	x1, x1, x0
     700:	ldr	x0, [sp, #64]
     704:	sub	x0, x1, x0
     708:	str	x0, [sp, #56]
     70c:	ldr	x0, [sp, #72]
     710:	ldrb	w0, [x0]
     714:	and	w0, w0, #0x40
     718:	cmp	w0, #0x0
     71c:	b.ne	734 <zle_decompress+0xd4>  // b.any
     720:	ldr	x0, [sp, #72]
     724:	ldrb	w0, [x0]
     728:	sxtb	w0, w0
     72c:	cmp	w0, #0x0
     730:	b.ge	764 <zle_decompress+0x104>  // b.tcont
     734:	ldr	x2, [sp, #56]
     738:	mov	w1, #0x0                   	// #0
     73c:	ldr	x0, [sp, #64]
     740:	bl	0 <grub_memset>
     744:	ldr	x0, [sp, #72]
     748:	add	x0, x0, #0x1
     74c:	str	x0, [sp, #72]
     750:	ldr	x1, [sp, #64]
     754:	ldr	x0, [sp, #56]
     758:	add	x0, x1, x0
     75c:	str	x0, [sp, #64]
     760:	b	7dc <zle_decompress+0x17c>
     764:	ldr	x1, [sp, #40]
     768:	ldr	x0, [sp, #24]
     76c:	add	x1, x1, x0
     770:	ldr	x0, [sp, #72]
     774:	sub	x1, x1, x0
     778:	ldr	x0, [sp, #56]
     77c:	cmp	x1, x0
     780:	b.gt	7a0 <zle_decompress+0x140>
     784:	ldr	x1, [sp, #40]
     788:	ldr	x0, [sp, #24]
     78c:	add	x1, x1, x0
     790:	ldr	x0, [sp, #72]
     794:	sub	x0, x1, x0
     798:	sub	x0, x0, #0x1
     79c:	str	x0, [sp, #56]
     7a0:	ldr	x0, [sp, #72]
     7a4:	add	x0, x0, #0x1
     7a8:	ldr	x2, [sp, #56]
     7ac:	mov	x1, x0
     7b0:	ldr	x0, [sp, #64]
     7b4:	bl	100 <grub_memcpy>
     7b8:	ldr	x1, [sp, #64]
     7bc:	ldr	x0, [sp, #56]
     7c0:	add	x0, x1, x0
     7c4:	str	x0, [sp, #64]
     7c8:	ldr	x0, [sp, #56]
     7cc:	add	x0, x0, #0x1
     7d0:	ldr	x1, [sp, #72]
     7d4:	add	x0, x1, x0
     7d8:	str	x0, [sp, #72]
     7dc:	ldr	x1, [sp, #40]
     7e0:	ldr	x0, [sp, #24]
     7e4:	add	x0, x1, x0
     7e8:	ldr	x1, [sp, #72]
     7ec:	cmp	x1, x0
     7f0:	b.cs	80c <zle_decompress+0x1ac>  // b.hs, b.nlast
     7f4:	ldr	x1, [sp, #32]
     7f8:	ldr	x0, [sp, #16]
     7fc:	add	x0, x1, x0
     800:	ldr	x1, [sp, #64]
     804:	cmp	x1, x0
     808:	b.cc	68c <zle_decompress+0x2c>  // b.lo, b.ul, b.last
     80c:	ldr	x1, [sp, #32]
     810:	ldr	x0, [sp, #16]
     814:	add	x0, x1, x0
     818:	ldr	x1, [sp, #64]
     81c:	cmp	x1, x0
     820:	b.cs	848 <zle_decompress+0x1e8>  // b.hs, b.nlast
     824:	ldr	x1, [sp, #32]
     828:	ldr	x0, [sp, #16]
     82c:	add	x1, x1, x0
     830:	ldr	x0, [sp, #64]
     834:	sub	x0, x1, x0
     838:	mov	x2, x0
     83c:	mov	w1, #0x0                   	// #0
     840:	ldr	x0, [sp, #64]
     844:	bl	0 <grub_memset>
     848:	mov	w0, #0x0                   	// #0
     84c:	ldp	x29, x30, [sp], #80
     850:	ret

0000000000000854 <zfs_log2>:
     854:	sub	sp, sp, #0x20
     858:	str	x0, [sp, #8]
     85c:	str	wzr, [sp, #28]
     860:	b	87c <zfs_log2+0x28>
     864:	ldr	w0, [sp, #28]
     868:	add	w0, w0, #0x1
     86c:	str	w0, [sp, #28]
     870:	ldr	x0, [sp, #8]
     874:	lsr	x0, x0, #1
     878:	str	x0, [sp, #8]
     87c:	ldr	x0, [sp, #8]
     880:	cmp	x0, #0x1
     884:	b.hi	864 <zfs_log2+0x10>  // b.pmore
     888:	ldr	w0, [sp, #28]
     88c:	add	sp, sp, #0x20
     890:	ret

0000000000000894 <zio_checksum_off>:
     894:	sub	sp, sp, #0x20
     898:	str	x0, [sp, #24]
     89c:	str	x1, [sp, #16]
     8a0:	str	w2, [sp, #12]
     8a4:	str	x3, [sp]
     8a8:	ldr	x0, [sp]
     8ac:	str	xzr, [x0]
     8b0:	ldr	x0, [sp]
     8b4:	str	xzr, [x0, #8]
     8b8:	ldr	x0, [sp]
     8bc:	str	xzr, [x0, #16]
     8c0:	ldr	x0, [sp]
     8c4:	str	xzr, [x0, #24]
     8c8:	nop
     8cc:	add	sp, sp, #0x20
     8d0:	ret

00000000000008d4 <zio_checksum_verify>:
     8d4:	stp	x29, x30, [sp, #-144]!
     8d8:	mov	x29, sp
     8dc:	str	x19, [sp, #16]
     8e0:	mov	x19, x0
     8e4:	str	w1, [sp, #60]
     8e8:	str	w2, [sp, #56]
     8ec:	str	x3, [sp, #48]
     8f0:	str	x4, [sp, #40]
     8f4:	ldr	x1, [sp, #48]
     8f8:	ldr	x0, [sp, #40]
     8fc:	add	x0, x1, x0
     900:	sub	x0, x0, #0x28
     904:	str	x0, [sp, #136]
     908:	ldr	w1, [sp, #60]
     90c:	mov	x0, x1
     910:	lsl	x0, x0, #1
     914:	add	x0, x0, x1
     918:	lsl	x0, x0, #3
     91c:	adrp	x1, 0 <grub_swap_bytes16>
     920:	add	x1, x1, #0x0
     924:	ldr	x1, [x1]
     928:	add	x0, x0, x1
     92c:	str	x0, [sp, #128]
     930:	ldr	w0, [sp, #60]
     934:	cmp	w0, #0xa
     938:	b.hi	94c <zio_checksum_verify+0x78>  // b.pmore
     93c:	ldr	x0, [sp, #128]
     940:	ldr	x0, [x0]
     944:	cmp	x0, #0x0
     948:	b.ne	998 <zio_checksum_verify+0xc4>  // b.any
     94c:	ldr	w4, [sp, #60]
     950:	adrp	x0, 0 <grub_swap_bytes16>
     954:	add	x0, x0, #0x0
     958:	ldr	x3, [x0]
     95c:	adrp	x0, 0 <grub_swap_bytes16>
     960:	add	x0, x0, #0x0
     964:	ldr	x2, [x0]
     968:	mov	w1, #0x1a7                 	// #423
     96c:	adrp	x0, 0 <grub_swap_bytes16>
     970:	add	x0, x0, #0x0
     974:	ldr	x0, [x0]
     978:	bl	0 <grub_real_dprintf>
     97c:	ldr	w2, [sp, #60]
     980:	adrp	x0, 0 <grub_swap_bytes16>
     984:	add	x0, x0, #0x0
     988:	ldr	x1, [x0]
     98c:	mov	w0, #0x18                  	// #24
     990:	bl	0 <grub_error>
     994:	b	b84 <zio_checksum_verify+0x2b0>
     998:	ldr	x0, [sp, #128]
     99c:	ldr	w0, [x0, #12]
     9a0:	cmp	w0, #0x0
     9a4:	b.eq	a44 <zio_checksum_verify+0x170>  // b.none
     9a8:	ldr	x0, [sp, #136]
     9ac:	add	x0, x0, #0x8
     9b0:	add	x2, sp, #0x40
     9b4:	mov	x3, x0
     9b8:	ldp	x0, x1, [x3]
     9bc:	stp	x0, x1, [x2]
     9c0:	ldp	x0, x1, [x3, #16]
     9c4:	stp	x0, x1, [x2, #16]
     9c8:	ldr	x0, [sp, #136]
     9cc:	add	x0, x0, #0x8
     9d0:	mov	x2, x0
     9d4:	mov	x3, x19
     9d8:	ldp	x0, x1, [x3]
     9dc:	stp	x0, x1, [x2]
     9e0:	ldp	x0, x1, [x3, #16]
     9e4:	stp	x0, x1, [x2, #16]
     9e8:	ldr	x0, [sp, #128]
     9ec:	ldr	x4, [x0]
     9f0:	add	x0, sp, #0x60
     9f4:	mov	x3, x0
     9f8:	ldr	w2, [sp, #56]
     9fc:	ldr	x1, [sp, #40]
     a00:	ldr	x0, [sp, #48]
     a04:	blr	x4
     a08:	ldr	x0, [sp, #136]
     a0c:	add	x0, x0, #0x8
     a10:	mov	x3, x0
     a14:	add	x2, sp, #0x40
     a18:	ldp	x0, x1, [x2]
     a1c:	stp	x0, x1, [x3]
     a20:	ldp	x0, x1, [x2, #16]
     a24:	stp	x0, x1, [x3, #16]
     a28:	mov	x3, x19
     a2c:	add	x2, sp, #0x40
     a30:	ldp	x0, x1, [x2]
     a34:	stp	x0, x1, [x3]
     a38:	ldp	x0, x1, [x2, #16]
     a3c:	stp	x0, x1, [x3, #16]
     a40:	b	a64 <zio_checksum_verify+0x190>
     a44:	ldr	x0, [sp, #128]
     a48:	ldr	x4, [x0]
     a4c:	add	x0, sp, #0x60
     a50:	mov	x3, x0
     a54:	ldr	w2, [sp, #56]
     a58:	ldr	x1, [sp, #40]
     a5c:	ldr	x0, [sp, #48]
     a60:	blr	x4
     a64:	ldr	w0, [sp, #60]
     a68:	cmp	w0, #0xa
     a6c:	b.eq	a78 <zio_checksum_verify+0x1a4>  // b.none
     a70:	mov	x0, #0x20                  	// #32
     a74:	b	a7c <zio_checksum_verify+0x1a8>
     a78:	mov	x0, #0x14                  	// #20
     a7c:	add	x3, sp, #0x60
     a80:	mov	x2, x0
     a84:	mov	x1, x19
     a88:	mov	x0, x3
     a8c:	bl	0 <grub_memcmp>
     a90:	cmp	w0, #0x0
     a94:	b.eq	b80 <zio_checksum_verify+0x2ac>  // b.none
     a98:	ldr	x0, [sp, #128]
     a9c:	ldr	x0, [x0, #16]
     aa0:	mov	x4, x0
     aa4:	adrp	x0, 0 <grub_swap_bytes16>
     aa8:	add	x0, x0, #0x0
     aac:	ldr	x3, [x0]
     ab0:	adrp	x0, 0 <grub_swap_bytes16>
     ab4:	add	x0, x0, #0x0
     ab8:	ldr	x2, [x0]
     abc:	mov	w1, #0x1ba                 	// #442
     ac0:	adrp	x0, 0 <grub_swap_bytes16>
     ac4:	add	x0, x0, #0x0
     ac8:	ldr	x0, [x0]
     acc:	bl	0 <grub_real_dprintf>
     ad0:	ldr	x0, [sp, #96]
     ad4:	ldr	x1, [sp, #104]
     ad8:	ldr	x2, [sp, #112]
     adc:	ldr	x3, [sp, #120]
     ae0:	mov	x7, x3
     ae4:	mov	x6, x2
     ae8:	mov	x5, x1
     aec:	mov	x4, x0
     af0:	adrp	x0, 0 <grub_swap_bytes16>
     af4:	add	x0, x0, #0x0
     af8:	ldr	x3, [x0]
     afc:	adrp	x0, 0 <grub_swap_bytes16>
     b00:	add	x0, x0, #0x0
     b04:	ldr	x2, [x0]
     b08:	mov	w1, #0x1bb                 	// #443
     b0c:	adrp	x0, 0 <grub_swap_bytes16>
     b10:	add	x0, x0, #0x0
     b14:	ldr	x0, [x0]
     b18:	bl	0 <grub_real_dprintf>
     b1c:	ldr	x0, [x19]
     b20:	ldr	x1, [x19, #8]
     b24:	ldr	x2, [x19, #16]
     b28:	ldr	x3, [x19, #24]
     b2c:	mov	x7, x3
     b30:	mov	x6, x2
     b34:	mov	x5, x1
     b38:	mov	x4, x0
     b3c:	adrp	x0, 0 <grub_swap_bytes16>
     b40:	add	x0, x0, #0x0
     b44:	ldr	x3, [x0]
     b48:	adrp	x0, 0 <grub_swap_bytes16>
     b4c:	add	x0, x0, #0x0
     b50:	ldr	x2, [x0]
     b54:	mov	w1, #0x1c0                 	// #448
     b58:	adrp	x0, 0 <grub_swap_bytes16>
     b5c:	add	x0, x0, #0x0
     b60:	ldr	x0, [x0]
     b64:	bl	0 <grub_real_dprintf>
     b68:	adrp	x0, 0 <grub_swap_bytes16>
     b6c:	add	x0, x0, #0x0
     b70:	ldr	x1, [x0]
     b74:	mov	w0, #0x9                   	// #9
     b78:	bl	0 <grub_error>
     b7c:	b	b84 <zio_checksum_verify+0x2b0>
     b80:	mov	w0, #0x0                   	// #0
     b84:	ldr	x19, [sp, #16]
     b88:	ldp	x29, x30, [sp], #144
     b8c:	ret
	...

0000000000000bd8 <vdev_uberblock_compare>:
     bd8:	stp	x29, x30, [sp, #-64]!
     bdc:	mov	x29, sp
     be0:	str	x19, [sp, #16]
     be4:	str	x0, [sp, #40]
     be8:	str	x1, [sp, #32]
     bec:	ldr	x0, [sp, #40]
     bf0:	ldr	x1, [x0]
     bf4:	mov	x0, #0xb10c                	// #45324
     bf8:	movk	x0, #0xba, lsl #16
     bfc:	cmp	x1, x0
     c00:	b.ne	c10 <vdev_uberblock_compare+0x38>  // b.any
     c04:	mov	w0, #0xffffffff            	// #-1
     c08:	str	w0, [sp, #60]
     c0c:	b	c14 <vdev_uberblock_compare+0x3c>
     c10:	str	wzr, [sp, #60]
     c14:	ldr	x0, [sp, #32]
     c18:	ldr	x1, [x0]
     c1c:	mov	x0, #0xb10c                	// #45324
     c20:	movk	x0, #0xba, lsl #16
     c24:	cmp	x1, x0
     c28:	b.ne	c38 <vdev_uberblock_compare+0x60>  // b.any
     c2c:	mov	w0, #0xffffffff            	// #-1
     c30:	str	w0, [sp, #56]
     c34:	b	c3c <vdev_uberblock_compare+0x64>
     c38:	str	wzr, [sp, #56]
     c3c:	ldr	w0, [sp, #60]
     c40:	cmp	w0, #0x0
     c44:	b.ne	c5c <vdev_uberblock_compare+0x84>  // b.any
     c48:	ldr	x0, [sp, #40]
     c4c:	ldr	x0, [x0, #16]
     c50:	bl	50 <grub_swap_bytes64>
     c54:	mov	x19, x0
     c58:	b	c64 <vdev_uberblock_compare+0x8c>
     c5c:	ldr	x0, [sp, #40]
     c60:	ldr	x19, [x0, #16]
     c64:	ldr	w0, [sp, #56]
     c68:	cmp	w0, #0x0
     c6c:	b.ne	c80 <vdev_uberblock_compare+0xa8>  // b.any
     c70:	ldr	x0, [sp, #32]
     c74:	ldr	x0, [x0, #16]
     c78:	bl	50 <grub_swap_bytes64>
     c7c:	b	c88 <vdev_uberblock_compare+0xb0>
     c80:	ldr	x0, [sp, #32]
     c84:	ldr	x0, [x0, #16]
     c88:	cmp	x19, x0
     c8c:	b.cs	c98 <vdev_uberblock_compare+0xc0>  // b.hs, b.nlast
     c90:	mov	w0, #0xffffffff            	// #-1
     c94:	b	db0 <vdev_uberblock_compare+0x1d8>
     c98:	ldr	w0, [sp, #60]
     c9c:	cmp	w0, #0x0
     ca0:	b.ne	cb8 <vdev_uberblock_compare+0xe0>  // b.any
     ca4:	ldr	x0, [sp, #40]
     ca8:	ldr	x0, [x0, #16]
     cac:	bl	50 <grub_swap_bytes64>
     cb0:	mov	x19, x0
     cb4:	b	cc0 <vdev_uberblock_compare+0xe8>
     cb8:	ldr	x0, [sp, #40]
     cbc:	ldr	x19, [x0, #16]
     cc0:	ldr	w0, [sp, #56]
     cc4:	cmp	w0, #0x0
     cc8:	b.ne	cdc <vdev_uberblock_compare+0x104>  // b.any
     ccc:	ldr	x0, [sp, #32]
     cd0:	ldr	x0, [x0, #16]
     cd4:	bl	50 <grub_swap_bytes64>
     cd8:	b	ce4 <vdev_uberblock_compare+0x10c>
     cdc:	ldr	x0, [sp, #32]
     ce0:	ldr	x0, [x0, #16]
     ce4:	cmp	x19, x0
     ce8:	b.ls	cf4 <vdev_uberblock_compare+0x11c>  // b.plast
     cec:	mov	w0, #0x1                   	// #1
     cf0:	b	db0 <vdev_uberblock_compare+0x1d8>
     cf4:	ldr	w0, [sp, #60]
     cf8:	cmp	w0, #0x0
     cfc:	b.ne	d14 <vdev_uberblock_compare+0x13c>  // b.any
     d00:	ldr	x0, [sp, #40]
     d04:	ldr	x0, [x0, #32]
     d08:	bl	50 <grub_swap_bytes64>
     d0c:	mov	x19, x0
     d10:	b	d1c <vdev_uberblock_compare+0x144>
     d14:	ldr	x0, [sp, #40]
     d18:	ldr	x19, [x0, #32]
     d1c:	ldr	w0, [sp, #56]
     d20:	cmp	w0, #0x0
     d24:	b.ne	d38 <vdev_uberblock_compare+0x160>  // b.any
     d28:	ldr	x0, [sp, #32]
     d2c:	ldr	x0, [x0, #32]
     d30:	bl	50 <grub_swap_bytes64>
     d34:	b	d40 <vdev_uberblock_compare+0x168>
     d38:	ldr	x0, [sp, #32]
     d3c:	ldr	x0, [x0, #32]
     d40:	cmp	x19, x0
     d44:	b.cs	d50 <vdev_uberblock_compare+0x178>  // b.hs, b.nlast
     d48:	mov	w0, #0xffffffff            	// #-1
     d4c:	b	db0 <vdev_uberblock_compare+0x1d8>
     d50:	ldr	w0, [sp, #60]
     d54:	cmp	w0, #0x0
     d58:	b.ne	d70 <vdev_uberblock_compare+0x198>  // b.any
     d5c:	ldr	x0, [sp, #40]
     d60:	ldr	x0, [x0, #32]
     d64:	bl	50 <grub_swap_bytes64>
     d68:	mov	x19, x0
     d6c:	b	d78 <vdev_uberblock_compare+0x1a0>
     d70:	ldr	x0, [sp, #40]
     d74:	ldr	x19, [x0, #32]
     d78:	ldr	w0, [sp, #56]
     d7c:	cmp	w0, #0x0
     d80:	b.ne	d94 <vdev_uberblock_compare+0x1bc>  // b.any
     d84:	ldr	x0, [sp, #32]
     d88:	ldr	x0, [x0, #32]
     d8c:	bl	50 <grub_swap_bytes64>
     d90:	b	d9c <vdev_uberblock_compare+0x1c4>
     d94:	ldr	x0, [sp, #32]
     d98:	ldr	x0, [x0, #32]
     d9c:	cmp	x19, x0
     da0:	b.ls	dac <vdev_uberblock_compare+0x1d4>  // b.plast
     da4:	mov	w0, #0x1                   	// #1
     da8:	b	db0 <vdev_uberblock_compare+0x1d8>
     dac:	mov	w0, #0x0                   	// #0
     db0:	ldr	x19, [sp, #16]
     db4:	ldp	x29, x30, [sp], #64
     db8:	ret

0000000000000dbc <uberblock_verify>:
     dbc:	stp	x29, x30, [sp, #-144]!
     dc0:	mov	x29, sp
     dc4:	str	x0, [sp, #72]
     dc8:	str	x1, [sp, #64]
     dcc:	str	x2, [sp, #56]
     dd0:	ldr	x0, [sp, #72]
     dd4:	str	x0, [sp, #128]
     dd8:	mov	w0, #0xfffffffe            	// #-2
     ddc:	str	w0, [sp, #140]
     de0:	ldr	x0, [sp, #128]
     de4:	ldr	x1, [x0]
     de8:	mov	x0, #0xb10c                	// #45324
     dec:	movk	x0, #0xba, lsl #16
     df0:	cmp	x1, x0
     df4:	b.ne	e34 <uberblock_verify+0x78>  // b.any
     df8:	ldr	x0, [sp, #128]
     dfc:	ldr	x0, [x0, #8]
     e00:	cmp	x0, #0x0
     e04:	b.eq	e18 <uberblock_verify+0x5c>  // b.none
     e08:	ldr	x0, [sp, #128]
     e0c:	ldr	x0, [x0, #8]
     e10:	cmp	x0, #0x21
     e14:	b.ls	e2c <uberblock_verify+0x70>  // b.plast
     e18:	ldr	x0, [sp, #128]
     e1c:	ldr	x1, [x0, #8]
     e20:	mov	x0, #0x1388                	// #5000
     e24:	cmp	x1, x0
     e28:	b.ne	e34 <uberblock_verify+0x78>  // b.any
     e2c:	mov	w0, #0xffffffff            	// #-1
     e30:	str	w0, [sp, #140]
     e34:	ldr	x0, [sp, #128]
     e38:	ldr	x0, [x0]
     e3c:	bl	50 <grub_swap_bytes64>
     e40:	mov	x1, x0
     e44:	mov	x0, #0xb10c                	// #45324
     e48:	movk	x0, #0xba, lsl #16
     e4c:	cmp	x1, x0
     e50:	b.ne	e9c <uberblock_verify+0xe0>  // b.any
     e54:	ldr	x0, [sp, #128]
     e58:	ldr	x0, [x0, #8]
     e5c:	bl	50 <grub_swap_bytes64>
     e60:	cmp	x0, #0x0
     e64:	b.eq	e7c <uberblock_verify+0xc0>  // b.none
     e68:	ldr	x0, [sp, #128]
     e6c:	ldr	x0, [x0, #8]
     e70:	bl	50 <grub_swap_bytes64>
     e74:	cmp	x0, #0x21
     e78:	b.ls	e98 <uberblock_verify+0xdc>  // b.plast
     e7c:	ldr	x0, [sp, #128]
     e80:	ldr	x0, [x0, #8]
     e84:	bl	50 <grub_swap_bytes64>
     e88:	mov	x1, x0
     e8c:	mov	x0, #0x1388                	// #5000
     e90:	cmp	x1, x0
     e94:	b.ne	e9c <uberblock_verify+0xe0>  // b.any
     e98:	str	wzr, [sp, #140]
     e9c:	ldr	w0, [sp, #140]
     ea0:	cmn	w0, #0x2
     ea4:	b.ne	ec0 <uberblock_verify+0x104>  // b.any
     ea8:	adrp	x0, 0 <grub_swap_bytes16>
     eac:	add	x0, x0, #0x0
     eb0:	ldr	x1, [x0]
     eb4:	mov	w0, #0x9                   	// #9
     eb8:	bl	0 <grub_error>
     ebc:	b	f28 <uberblock_verify+0x16c>
     ec0:	add	x0, sp, #0x58
     ec4:	mov	x2, #0x20                  	// #32
     ec8:	mov	w1, #0x0                   	// #0
     ecc:	bl	0 <grub_memset>
     ed0:	ldr	w0, [sp, #140]
     ed4:	cmp	w0, #0x0
     ed8:	b.ne	ee8 <uberblock_verify+0x12c>  // b.any
     edc:	ldr	x0, [sp, #64]
     ee0:	bl	50 <grub_swap_bytes64>
     ee4:	b	eec <uberblock_verify+0x130>
     ee8:	ldr	x0, [sp, #64]
     eec:	str	x0, [sp, #88]
     ef0:	add	x2, sp, #0x10
     ef4:	add	x3, sp, #0x58
     ef8:	ldp	x0, x1, [x3]
     efc:	stp	x0, x1, [x2]
     f00:	ldp	x0, x1, [x3, #16]
     f04:	stp	x0, x1, [x2, #16]
     f08:	add	x0, sp, #0x10
     f0c:	ldr	x4, [sp, #56]
     f10:	ldr	x3, [sp, #72]
     f14:	ldr	w2, [sp, #140]
     f18:	mov	w1, #0x3                   	// #3
     f1c:	bl	8d4 <zio_checksum_verify>
     f20:	str	w0, [sp, #124]
     f24:	ldr	w0, [sp, #124]
     f28:	ldp	x29, x30, [sp], #144
     f2c:	ret
	...

0000000000000f38 <find_bestub>:
     f38:	stp	x29, x30, [sp, #-80]!
     f3c:	mov	x29, sp
     f40:	str	x0, [sp, #24]
     f44:	str	x1, [sp, #16]
     f48:	str	xzr, [sp, #72]
     f4c:	str	wzr, [sp, #64]
     f50:	ldr	x0, [sp, #16]
     f54:	ldr	w0, [x0, #24]
     f58:	str	w0, [sp, #60]
     f5c:	ldr	w0, [sp, #60]
     f60:	cmp	w0, #0x9
     f64:	b.gt	f70 <find_bestub+0x38>
     f68:	mov	w0, #0xa                   	// #10
     f6c:	str	w0, [sp, #60]
     f70:	str	wzr, [sp, #68]
     f74:	b	1038 <find_bestub+0x100>
     f78:	ldr	x0, [sp, #16]
     f7c:	ldr	x0, [x0, #64]
     f80:	lsl	x1, x0, #9
     f84:	ldr	w0, [sp, #60]
     f88:	ldr	w2, [sp, #68]
     f8c:	lsl	w0, w2, w0
     f90:	sxtw	x0, w0
     f94:	add	x0, x1, x0
     f98:	add	x0, x0, #0x1c, lsl #12
     f9c:	str	x0, [sp, #48]
     fa0:	ldr	w0, [sp, #60]
     fa4:	ldr	w1, [sp, #68]
     fa8:	lsl	w0, w1, w0
     fac:	sxtw	x0, w0
     fb0:	and	x0, x0, #0xfffffffffffffff8
     fb4:	ldr	x1, [sp, #24]
     fb8:	add	x0, x1, x0
     fbc:	str	x0, [sp, #40]
     fc0:	ldr	w0, [sp, #60]
     fc4:	mov	w1, #0x1                   	// #1
     fc8:	lsl	w0, w1, w0
     fcc:	sxtw	x0, w0
     fd0:	mov	x2, x0
     fd4:	ldr	x1, [sp, #48]
     fd8:	ldr	x0, [sp, #40]
     fdc:	bl	dbc <uberblock_verify>
     fe0:	str	w0, [sp, #64]
     fe4:	ldr	w0, [sp, #64]
     fe8:	cmp	w0, #0x0
     fec:	b.eq	1004 <find_bestub+0xcc>  // b.none
     ff0:	adrp	x0, 0 <grub_swap_bytes16>
     ff4:	add	x0, x0, #0x0
     ff8:	ldr	x0, [x0]
     ffc:	str	wzr, [x0]
    1000:	b	102c <find_bestub+0xf4>
    1004:	ldr	x0, [sp, #72]
    1008:	cmp	x0, #0x0
    100c:	b.eq	1024 <find_bestub+0xec>  // b.none
    1010:	ldr	x0, [sp, #40]
    1014:	ldr	x1, [sp, #72]
    1018:	bl	bd8 <vdev_uberblock_compare>
    101c:	cmp	w0, #0x0
    1020:	b.le	102c <find_bestub+0xf4>
    1024:	ldr	x0, [sp, #40]
    1028:	str	x0, [sp, #72]
    102c:	ldr	w0, [sp, #68]
    1030:	add	w0, w0, #0x1
    1034:	str	w0, [sp, #68]
    1038:	ldr	w0, [sp, #60]
    103c:	mov	w1, #0x20000               	// #131072
    1040:	asr	w0, w1, w0
    1044:	ldr	w1, [sp, #68]
    1048:	cmp	w1, w0
    104c:	b.lt	f78 <find_bestub+0x40>  // b.tstop
    1050:	ldr	x0, [sp, #72]
    1054:	cmp	x0, #0x0
    1058:	b.ne	1070 <find_bestub+0x138>  // b.any
    105c:	adrp	x0, 0 <grub_swap_bytes16>
    1060:	add	x0, x0, #0x0
    1064:	ldr	x0, [x0]
    1068:	ldr	w1, [sp, #64]
    106c:	str	w1, [x0]
    1070:	ldr	x0, [sp, #72]
    1074:	ldp	x29, x30, [sp], #80
    1078:	ret
    107c:	nop
	...

0000000000001088 <get_psize>:
    1088:	stp	x29, x30, [sp, #-32]!
    108c:	mov	x29, sp
    1090:	str	x0, [sp, #24]
    1094:	str	w1, [sp, #20]
    1098:	ldr	w0, [sp, #20]
    109c:	cmp	w0, #0x0
    10a0:	b.ne	10c4 <get_psize+0x3c>  // b.any
    10a4:	ldr	x0, [sp, #24]
    10a8:	ldr	x0, [x0, #48]
    10ac:	bl	50 <grub_swap_bytes64>
    10b0:	lsr	x0, x0, #16
    10b4:	and	x0, x0, #0xffff
    10b8:	add	x0, x0, #0x1
    10bc:	lsl	x0, x0, #9
    10c0:	b	10dc <get_psize+0x54>
    10c4:	ldr	x0, [sp, #24]
    10c8:	ldr	x0, [x0, #48]
    10cc:	lsr	x0, x0, #16
    10d0:	and	x0, x0, #0xffff
    10d4:	add	x0, x0, #0x1
    10d8:	lsl	x0, x0, #9
    10dc:	ldp	x29, x30, [sp], #32
    10e0:	ret

00000000000010e4 <dva_get_offset>:
    10e4:	stp	x29, x30, [sp, #-32]!
    10e8:	mov	x29, sp
    10ec:	str	x0, [sp, #24]
    10f0:	str	w1, [sp, #20]
    10f4:	ldr	x0, [sp, #24]
    10f8:	ldr	x1, [x0]
    10fc:	ldr	x0, [sp, #24]
    1100:	ldr	x0, [x0, #8]
    1104:	mov	x5, x0
    1108:	mov	x4, x1
    110c:	adrp	x0, 0 <grub_swap_bytes16>
    1110:	add	x0, x0, #0x0
    1114:	ldr	x3, [x0]
    1118:	adrp	x0, 0 <grub_swap_bytes16>
    111c:	add	x0, x0, #0x0
    1120:	ldr	x2, [x0]
    1124:	mov	w1, #0x251                 	// #593
    1128:	adrp	x0, 0 <grub_swap_bytes16>
    112c:	add	x0, x0, #0x0
    1130:	ldr	x0, [x0]
    1134:	bl	0 <grub_real_dprintf>
    1138:	ldr	w0, [sp, #20]
    113c:	cmp	w0, #0x0
    1140:	b.ne	1158 <dva_get_offset+0x74>  // b.any
    1144:	ldr	x0, [sp, #24]
    1148:	ldr	x0, [x0, #8]
    114c:	bl	50 <grub_swap_bytes64>
    1150:	lsl	x0, x0, #9
    1154:	b	1164 <dva_get_offset+0x80>
    1158:	ldr	x0, [sp, #24]
    115c:	ldr	x0, [x0, #8]
    1160:	lsl	x0, x0, #9
    1164:	ldp	x29, x30, [sp], #32
    1168:	ret
    116c:	nop
	...

0000000000001188 <zfs_fetch_nvlist>:
    1188:	stp	x29, x30, [sp, #-48]!
    118c:	mov	x29, sp
    1190:	str	x0, [sp, #24]
    1194:	str	x1, [sp, #16]
    1198:	ldr	x0, [sp, #16]
    119c:	str	xzr, [x0]
    11a0:	ldr	x0, [sp, #24]
    11a4:	ldr	x0, [x0, #56]
    11a8:	cmp	x0, #0x0
    11ac:	b.ne	11c8 <zfs_fetch_nvlist+0x40>  // b.any
    11b0:	adrp	x0, 0 <grub_swap_bytes16>
    11b4:	add	x0, x0, #0x0
    11b8:	ldr	x1, [x0]
    11bc:	mov	w0, #0x26                  	// #38
    11c0:	bl	0 <grub_error>
    11c4:	b	123c <zfs_fetch_nvlist+0xb4>
    11c8:	mov	x0, #0x1c000               	// #114688
    11cc:	bl	0 <grub_malloc>
    11d0:	mov	x1, x0
    11d4:	ldr	x0, [sp, #16]
    11d8:	str	x1, [x0]
    11dc:	ldr	x0, [sp, #24]
    11e0:	ldr	x0, [x0, #56]
    11e4:	ldr	x5, [x0]
    11e8:	ldr	x0, [sp, #24]
    11ec:	ldr	x1, [x0, #64]
    11f0:	ldr	x0, [sp, #16]
    11f4:	ldr	x0, [x0]
    11f8:	mov	x4, x0
    11fc:	mov	x3, #0x1c000               	// #114688
    1200:	mov	x2, #0x0                   	// #0
    1204:	mov	x0, x5
    1208:	bl	0 <grub_disk_read>
    120c:	str	w0, [sp, #44]
    1210:	ldr	w0, [sp, #44]
    1214:	cmp	w0, #0x0
    1218:	b.eq	1238 <zfs_fetch_nvlist+0xb0>  // b.none
    121c:	ldr	x0, [sp, #16]
    1220:	ldr	x0, [x0]
    1224:	bl	0 <grub_free>
    1228:	ldr	x0, [sp, #16]
    122c:	str	xzr, [x0]
    1230:	ldr	w0, [sp, #44]
    1234:	b	123c <zfs_fetch_nvlist+0xb4>
    1238:	mov	w0, #0x0                   	// #0
    123c:	ldp	x29, x30, [sp], #48
    1240:	ret
    1244:	nop
	...

0000000000001250 <fill_vdev_info_real>:
    1250:	stp	x29, x30, [sp, #-128]!
    1254:	mov	x29, sp
    1258:	str	x0, [sp, #56]
    125c:	str	x1, [sp, #48]
    1260:	str	x2, [sp, #40]
    1264:	str	x3, [sp, #32]
    1268:	str	x4, [sp, #24]
    126c:	str	w5, [sp, #20]
    1270:	adrp	x0, 0 <grub_swap_bytes16>
    1274:	add	x0, x0, #0x0
    1278:	ldr	x1, [x0]
    127c:	ldr	x0, [sp, #48]
    1280:	bl	9808 <grub_zfs_nvlist_lookup_string>
    1284:	str	x0, [sp, #112]
    1288:	ldr	x0, [sp, #112]
    128c:	cmp	x0, #0x0
    1290:	b.ne	12a8 <fill_vdev_info_real+0x58>  // b.any
    1294:	adrp	x0, 0 <grub_swap_bytes16>
    1298:	add	x0, x0, #0x0
    129c:	ldr	x0, [x0]
    12a0:	ldr	w0, [x0]
    12a4:	b	175c <fill_vdev_info_real+0x50c>
    12a8:	ldr	x0, [sp, #40]
    12ac:	add	x0, x0, #0x8
    12b0:	mov	x2, x0
    12b4:	adrp	x0, 0 <grub_swap_bytes16>
    12b8:	add	x0, x0, #0x0
    12bc:	ldr	x1, [x0]
    12c0:	ldr	x0, [sp, #48]
    12c4:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    12c8:	cmp	w0, #0x0
    12cc:	b.ne	12f0 <fill_vdev_info_real+0xa0>  // b.any
    12d0:	ldr	x0, [sp, #112]
    12d4:	bl	0 <grub_free>
    12d8:	adrp	x0, 0 <grub_swap_bytes16>
    12dc:	add	x0, x0, #0x0
    12e0:	ldr	x1, [x0]
    12e4:	mov	w0, #0x9                   	// #9
    12e8:	bl	0 <grub_error>
    12ec:	b	175c <fill_vdev_info_real+0x50c>
    12f0:	ldr	x0, [sp, #40]
    12f4:	add	x0, x0, #0x10
    12f8:	mov	x2, x0
    12fc:	adrp	x0, 0 <grub_swap_bytes16>
    1300:	add	x0, x0, #0x0
    1304:	ldr	x1, [x0]
    1308:	ldr	x0, [sp, #48]
    130c:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    1310:	cmp	w0, #0x0
    1314:	b.ne	1338 <fill_vdev_info_real+0xe8>  // b.any
    1318:	ldr	x0, [sp, #112]
    131c:	bl	0 <grub_free>
    1320:	adrp	x0, 0 <grub_swap_bytes16>
    1324:	add	x0, x0, #0x0
    1328:	ldr	x1, [x0]
    132c:	mov	w0, #0x9                   	// #9
    1330:	bl	0 <grub_error>
    1334:	b	175c <fill_vdev_info_real+0x50c>
    1338:	add	x0, sp, #0x50
    133c:	mov	x2, x0
    1340:	adrp	x0, 0 <grub_swap_bytes16>
    1344:	add	x0, x0, #0x0
    1348:	ldr	x1, [x0]
    134c:	ldr	x0, [sp, #48]
    1350:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    1354:	cmp	w0, #0x0
    1358:	b.eq	1370 <fill_vdev_info_real+0x120>  // b.none
    135c:	ldr	x0, [sp, #80]
    1360:	mov	w1, w0
    1364:	ldr	x0, [sp, #40]
    1368:	str	w1, [x0, #24]
    136c:	b	13ac <fill_vdev_info_real+0x15c>
    1370:	ldr	w0, [sp, #20]
    1374:	cmn	w0, #0x1
    1378:	b.eq	138c <fill_vdev_info_real+0x13c>  // b.none
    137c:	ldr	x0, [sp, #40]
    1380:	ldr	w1, [sp, #20]
    1384:	str	w1, [x0, #24]
    1388:	b	13ac <fill_vdev_info_real+0x15c>
    138c:	ldr	x0, [sp, #112]
    1390:	bl	0 <grub_free>
    1394:	adrp	x0, 0 <grub_swap_bytes16>
    1398:	add	x0, x0, #0x0
    139c:	ldr	x1, [x0]
    13a0:	mov	w0, #0x9                   	// #9
    13a4:	bl	0 <grub_error>
    13a8:	b	175c <fill_vdev_info_real+0x50c>
    13ac:	ldr	x0, [sp, #40]
    13b0:	str	wzr, [x0, #28]
    13b4:	adrp	x0, 0 <grub_swap_bytes16>
    13b8:	add	x0, x0, #0x0
    13bc:	ldr	x1, [x0]
    13c0:	ldr	x0, [sp, #112]
    13c4:	bl	0 <grub_strcmp>
    13c8:	cmp	w0, #0x0
    13cc:	b.eq	13ec <fill_vdev_info_real+0x19c>  // b.none
    13d0:	adrp	x0, 0 <grub_swap_bytes16>
    13d4:	add	x0, x0, #0x0
    13d8:	ldr	x1, [x0]
    13dc:	ldr	x0, [sp, #112]
    13e0:	bl	0 <grub_strcmp>
    13e4:	cmp	w0, #0x0
    13e8:	b.ne	14bc <fill_vdev_info_real+0x26c>  // b.any
    13ec:	ldr	x0, [sp, #40]
    13f0:	str	wzr, [x0]
    13f4:	ldr	x0, [sp, #40]
    13f8:	ldr	x0, [x0, #56]
    13fc:	cmp	x0, #0x0
    1400:	b.ne	14ac <fill_vdev_info_real+0x25c>  // b.any
    1404:	ldr	x0, [sp, #40]
    1408:	ldr	x1, [x0, #16]
    140c:	ldr	x0, [sp, #32]
    1410:	ldr	x0, [x0, #16]
    1414:	cmp	x1, x0
    1418:	b.ne	14ac <fill_vdev_info_real+0x25c>  // b.any
    141c:	ldr	x0, [sp, #32]
    1420:	ldr	x1, [x0, #56]
    1424:	ldr	x0, [sp, #40]
    1428:	str	x1, [x0, #56]
    142c:	ldr	x0, [sp, #32]
    1430:	ldr	x1, [x0, #64]
    1434:	ldr	x0, [sp, #40]
    1438:	str	x1, [x0, #64]
    143c:	ldr	x0, [sp, #40]
    1440:	add	x1, x0, #0x48
    1444:	ldr	x0, [sp, #32]
    1448:	add	x0, x0, #0x48
    144c:	mov	x3, x1
    1450:	mov	x1, x0
    1454:	mov	x0, #0xa8                  	// #168
    1458:	mov	x2, x0
    145c:	mov	x0, x3
    1460:	bl	0 <memcpy>
    1464:	ldr	x0, [sp, #32]
    1468:	ldr	w1, [x0, #240]
    146c:	ldr	x0, [sp, #40]
    1470:	str	w1, [x0, #240]
    1474:	ldr	x0, [sp, #56]
    1478:	ldr	x0, [x0, #1672]
    147c:	cmp	x0, #0x0
    1480:	b.ne	1490 <fill_vdev_info_real+0x240>  // b.any
    1484:	ldr	x0, [sp, #56]
    1488:	ldr	x1, [sp, #40]
    148c:	str	x1, [x0, #1672]
    1490:	ldr	x0, [sp, #40]
    1494:	ldr	w1, [x0, #24]
    1498:	ldr	x0, [sp, #32]
    149c:	str	w1, [x0, #24]
    14a0:	ldr	x0, [sp, #24]
    14a4:	mov	w1, #0x1                   	// #1
    14a8:	str	w1, [x0]
    14ac:	ldr	x0, [sp, #112]
    14b0:	bl	0 <grub_free>
    14b4:	mov	w0, #0x0                   	// #0
    14b8:	b	175c <fill_vdev_info_real+0x50c>
    14bc:	adrp	x0, 0 <grub_swap_bytes16>
    14c0:	add	x0, x0, #0x0
    14c4:	ldr	x1, [x0]
    14c8:	ldr	x0, [sp, #112]
    14cc:	bl	0 <grub_strcmp>
    14d0:	cmp	w0, #0x0
    14d4:	b.eq	14f4 <fill_vdev_info_real+0x2a4>  // b.none
    14d8:	adrp	x0, 0 <grub_swap_bytes16>
    14dc:	add	x0, x0, #0x0
    14e0:	ldr	x1, [x0]
    14e4:	ldr	x0, [sp, #112]
    14e8:	bl	0 <grub_strcmp>
    14ec:	cmp	w0, #0x0
    14f0:	b.ne	172c <fill_vdev_info_real+0x4dc>  // b.any
    14f4:	adrp	x0, 0 <grub_swap_bytes16>
    14f8:	add	x0, x0, #0x0
    14fc:	ldr	x1, [x0]
    1500:	ldr	x0, [sp, #112]
    1504:	bl	0 <grub_strcmp>
    1508:	cmp	w0, #0x0
    150c:	b.ne	1520 <fill_vdev_info_real+0x2d0>  // b.any
    1510:	ldr	x0, [sp, #40]
    1514:	mov	w1, #0x1                   	// #1
    1518:	str	w1, [x0]
    151c:	b	1580 <fill_vdev_info_real+0x330>
    1520:	ldr	x0, [sp, #40]
    1524:	mov	w1, #0x2                   	// #2
    1528:	str	w1, [x0]
    152c:	add	x0, sp, #0x48
    1530:	mov	x2, x0
    1534:	adrp	x0, 0 <grub_swap_bytes16>
    1538:	add	x0, x0, #0x0
    153c:	ldr	x1, [x0]
    1540:	ldr	x0, [sp, #48]
    1544:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    1548:	cmp	w0, #0x0
    154c:	b.ne	1570 <fill_vdev_info_real+0x320>  // b.any
    1550:	ldr	x0, [sp, #112]
    1554:	bl	0 <grub_free>
    1558:	adrp	x0, 0 <grub_swap_bytes16>
    155c:	add	x0, x0, #0x0
    1560:	ldr	x1, [x0]
    1564:	mov	w0, #0x9                   	// #9
    1568:	bl	0 <grub_error>
    156c:	b	175c <fill_vdev_info_real+0x50c>
    1570:	ldr	x0, [sp, #72]
    1574:	mov	w1, w0
    1578:	ldr	x0, [sp, #40]
    157c:	str	w1, [x0, #48]
    1580:	adrp	x0, 0 <grub_swap_bytes16>
    1584:	add	x0, x0, #0x0
    1588:	ldr	x1, [x0]
    158c:	ldr	x0, [sp, #48]
    1590:	bl	99b0 <grub_zfs_nvlist_lookup_nvlist_array_get_nelm>
    1594:	str	w0, [sp, #108]
    1598:	ldr	w0, [sp, #108]
    159c:	cmp	w0, #0x0
    15a0:	b.gt	15c4 <fill_vdev_info_real+0x374>
    15a4:	ldr	x0, [sp, #112]
    15a8:	bl	0 <grub_free>
    15ac:	adrp	x0, 0 <grub_swap_bytes16>
    15b0:	add	x0, x0, #0x0
    15b4:	ldr	x1, [x0]
    15b8:	mov	w0, #0x9                   	// #9
    15bc:	bl	0 <grub_error>
    15c0:	b	175c <fill_vdev_info_real+0x50c>
    15c4:	ldr	x0, [sp, #40]
    15c8:	ldr	x0, [x0, #40]
    15cc:	cmp	x0, #0x0
    15d0:	b.ne	160c <fill_vdev_info_real+0x3bc>  // b.any
    15d4:	ldr	w1, [sp, #108]
    15d8:	ldr	x0, [sp, #40]
    15dc:	str	w1, [x0, #32]
    15e0:	ldr	x0, [sp, #40]
    15e4:	ldr	w0, [x0, #32]
    15e8:	mov	w1, w0
    15ec:	mov	x0, x1
    15f0:	lsl	x0, x0, #5
    15f4:	sub	x0, x0, x1
    15f8:	lsl	x0, x0, #3
    15fc:	bl	0 <grub_zalloc>
    1600:	mov	x1, x0
    1604:	ldr	x0, [sp, #40]
    1608:	str	x1, [x0, #40]
    160c:	str	wzr, [sp, #124]
    1610:	b	170c <fill_vdev_info_real+0x4bc>
    1614:	ldrsw	x0, [sp, #124]
    1618:	mov	x2, x0
    161c:	adrp	x0, 0 <grub_swap_bytes16>
    1620:	add	x0, x0, #0x0
    1624:	ldr	x1, [x0]
    1628:	ldr	x0, [sp, #48]
    162c:	bl	9aa0 <grub_zfs_nvlist_lookup_nvlist_array>
    1630:	str	x0, [sp, #96]
    1634:	ldr	x0, [sp, #40]
    1638:	ldr	x2, [x0, #40]
    163c:	ldrsw	x1, [sp, #124]
    1640:	mov	x0, x1
    1644:	lsl	x0, x0, #5
    1648:	sub	x0, x0, x1
    164c:	lsl	x0, x0, #3
    1650:	add	x1, x2, x0
    1654:	ldr	x0, [sp, #40]
    1658:	ldr	w0, [x0, #24]
    165c:	mov	w5, w0
    1660:	ldr	x4, [sp, #24]
    1664:	ldr	x3, [sp, #32]
    1668:	mov	x2, x1
    166c:	ldr	x1, [sp, #96]
    1670:	ldr	x0, [sp, #56]
    1674:	bl	1250 <fill_vdev_info_real>
    1678:	str	w0, [sp, #92]
    167c:	ldr	x0, [sp, #96]
    1680:	bl	0 <grub_free>
    1684:	ldr	w0, [sp, #92]
    1688:	cmp	w0, #0x0
    168c:	b.eq	16a0 <fill_vdev_info_real+0x450>  // b.none
    1690:	ldr	x0, [sp, #112]
    1694:	bl	0 <grub_free>
    1698:	ldr	w0, [sp, #92]
    169c:	b	175c <fill_vdev_info_real+0x50c>
    16a0:	ldr	x0, [sp, #40]
    16a4:	ldr	x2, [x0, #40]
    16a8:	ldrsw	x1, [sp, #124]
    16ac:	mov	x0, x1
    16b0:	lsl	x0, x0, #5
    16b4:	sub	x0, x0, x1
    16b8:	lsl	x0, x0, #3
    16bc:	add	x0, x2, x0
    16c0:	ldr	w1, [x0, #24]
    16c4:	ldr	x0, [sp, #40]
    16c8:	ldr	w0, [x0, #28]
    16cc:	cmp	w1, w0
    16d0:	b.ls	1700 <fill_vdev_info_real+0x4b0>  // b.plast
    16d4:	ldr	x0, [sp, #40]
    16d8:	ldr	x2, [x0, #40]
    16dc:	ldrsw	x1, [sp, #124]
    16e0:	mov	x0, x1
    16e4:	lsl	x0, x0, #5
    16e8:	sub	x0, x0, x1
    16ec:	lsl	x0, x0, #3
    16f0:	add	x0, x2, x0
    16f4:	ldr	w1, [x0, #24]
    16f8:	ldr	x0, [sp, #40]
    16fc:	str	w1, [x0, #28]
    1700:	ldr	w0, [sp, #124]
    1704:	add	w0, w0, #0x1
    1708:	str	w0, [sp, #124]
    170c:	ldr	w1, [sp, #124]
    1710:	ldr	w0, [sp, #108]
    1714:	cmp	w1, w0
    1718:	b.lt	1614 <fill_vdev_info_real+0x3c4>  // b.tstop
    171c:	ldr	x0, [sp, #112]
    1720:	bl	0 <grub_free>
    1724:	mov	w0, #0x0                   	// #0
    1728:	b	175c <fill_vdev_info_real+0x50c>
    172c:	ldr	x2, [sp, #112]
    1730:	adrp	x0, 0 <grub_swap_bytes16>
    1734:	add	x0, x0, #0x0
    1738:	ldr	x1, [x0]
    173c:	mov	w0, #0x18                  	// #24
    1740:	bl	0 <grub_error>
    1744:	ldr	x0, [sp, #112]
    1748:	bl	0 <grub_free>
    174c:	adrp	x0, 0 <grub_swap_bytes16>
    1750:	add	x0, x0, #0x0
    1754:	ldr	x0, [x0]
    1758:	ldr	w0, [x0]
    175c:	ldp	x29, x30, [sp], #128
    1760:	ret
    1764:	nop
	...

00000000000017e8 <fill_vdev_info>:
    17e8:	stp	x29, x30, [sp, #-80]!
    17ec:	mov	x29, sp
    17f0:	str	x0, [sp, #40]
    17f4:	str	x1, [sp, #32]
    17f8:	str	x2, [sp, #24]
    17fc:	str	x3, [sp, #16]
    1800:	ldr	x0, [sp, #16]
    1804:	str	wzr, [x0]
    1808:	add	x0, sp, #0x38
    180c:	mov	x2, x0
    1810:	adrp	x0, 0 <grub_swap_bytes16>
    1814:	add	x0, x0, #0x0
    1818:	ldr	x1, [x0]
    181c:	ldr	x0, [sp, #32]
    1820:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    1824:	cmp	w0, #0x0
    1828:	b.ne	1844 <fill_vdev_info+0x5c>  // b.any
    182c:	adrp	x0, 0 <grub_swap_bytes16>
    1830:	add	x0, x0, #0x0
    1834:	ldr	x1, [x0]
    1838:	mov	w0, #0x9                   	// #9
    183c:	bl	0 <grub_error>
    1840:	b	1a10 <fill_vdev_info+0x228>
    1844:	str	wzr, [sp, #76]
    1848:	b	18c8 <fill_vdev_info+0xe0>
    184c:	ldr	x0, [sp, #40]
    1850:	ldr	x2, [x0, #1656]
    1854:	ldr	w1, [sp, #76]
    1858:	mov	x0, x1
    185c:	lsl	x0, x0, #5
    1860:	sub	x0, x0, x1
    1864:	lsl	x0, x0, #3
    1868:	add	x0, x2, x0
    186c:	ldr	x1, [x0, #8]
    1870:	ldr	x0, [sp, #56]
    1874:	cmp	x1, x0
    1878:	b.ne	18bc <fill_vdev_info+0xd4>  // b.any
    187c:	ldr	x0, [sp, #40]
    1880:	ldr	x2, [x0, #1656]
    1884:	ldr	w1, [sp, #76]
    1888:	mov	x0, x1
    188c:	lsl	x0, x0, #5
    1890:	sub	x0, x0, x1
    1894:	lsl	x0, x0, #3
    1898:	add	x0, x2, x0
    189c:	mov	w5, #0xffffffff            	// #-1
    18a0:	ldr	x4, [sp, #16]
    18a4:	ldr	x3, [sp, #24]
    18a8:	mov	x2, x0
    18ac:	ldr	x1, [sp, #32]
    18b0:	ldr	x0, [sp, #40]
    18b4:	bl	1250 <fill_vdev_info_real>
    18b8:	b	1a10 <fill_vdev_info+0x228>
    18bc:	ldr	w0, [sp, #76]
    18c0:	add	w0, w0, #0x1
    18c4:	str	w0, [sp, #76]
    18c8:	ldr	x0, [sp, #40]
    18cc:	ldr	w0, [x0, #1664]
    18d0:	ldr	w1, [sp, #76]
    18d4:	cmp	w1, w0
    18d8:	b.cc	184c <fill_vdev_info+0x64>  // b.lo, b.ul, b.last
    18dc:	ldr	x0, [sp, #40]
    18e0:	ldr	w0, [x0, #1664]
    18e4:	add	w1, w0, #0x1
    18e8:	ldr	x0, [sp, #40]
    18ec:	str	w1, [x0, #1664]
    18f0:	ldr	x0, [sp, #40]
    18f4:	ldr	w1, [x0, #1664]
    18f8:	ldr	x0, [sp, #40]
    18fc:	ldr	w0, [x0, #1668]
    1900:	cmp	w1, w0
    1904:	b.ls	1990 <fill_vdev_info+0x1a8>  // b.plast
    1908:	ldr	x0, [sp, #40]
    190c:	ldr	w0, [x0, #1664]
    1910:	lsl	w0, w0, #1
    1914:	add	w1, w0, #0x1
    1918:	ldr	x0, [sp, #40]
    191c:	str	w1, [x0, #1668]
    1920:	ldr	x0, [sp, #40]
    1924:	ldr	x0, [x0, #1656]
    1928:	str	x0, [sp, #64]
    192c:	ldr	x0, [sp, #40]
    1930:	ldr	w0, [x0, #1668]
    1934:	mov	w1, w0
    1938:	mov	x0, x1
    193c:	lsl	x0, x0, #5
    1940:	sub	x0, x0, x1
    1944:	lsl	x0, x0, #3
    1948:	mov	x1, x0
    194c:	ldr	x0, [sp, #64]
    1950:	bl	0 <grub_realloc>
    1954:	mov	x1, x0
    1958:	ldr	x0, [sp, #40]
    195c:	str	x1, [x0, #1656]
    1960:	ldr	x0, [sp, #40]
    1964:	ldr	x0, [x0, #1656]
    1968:	cmp	x0, #0x0
    196c:	b.ne	1990 <fill_vdev_info+0x1a8>  // b.any
    1970:	ldr	x0, [sp, #40]
    1974:	ldr	x1, [sp, #64]
    1978:	str	x1, [x0, #1656]
    197c:	adrp	x0, 0 <grub_swap_bytes16>
    1980:	add	x0, x0, #0x0
    1984:	ldr	x0, [x0]
    1988:	ldr	w0, [x0]
    198c:	b	1a10 <fill_vdev_info+0x228>
    1990:	ldr	x0, [sp, #40]
    1994:	ldr	x2, [x0, #1656]
    1998:	ldr	x0, [sp, #40]
    199c:	ldr	w0, [x0, #1664]
    19a0:	sub	w0, w0, #0x1
    19a4:	mov	w1, w0
    19a8:	mov	x0, x1
    19ac:	lsl	x0, x0, #5
    19b0:	sub	x0, x0, x1
    19b4:	lsl	x0, x0, #3
    19b8:	add	x0, x2, x0
    19bc:	mov	x2, #0xf8                  	// #248
    19c0:	mov	w1, #0x0                   	// #0
    19c4:	bl	0 <grub_memset>
    19c8:	ldr	x0, [sp, #40]
    19cc:	ldr	x2, [x0, #1656]
    19d0:	ldr	x0, [sp, #40]
    19d4:	ldr	w0, [x0, #1664]
    19d8:	sub	w0, w0, #0x1
    19dc:	mov	w1, w0
    19e0:	mov	x0, x1
    19e4:	lsl	x0, x0, #5
    19e8:	sub	x0, x0, x1
    19ec:	lsl	x0, x0, #3
    19f0:	add	x0, x2, x0
    19f4:	mov	w5, #0xffffffff            	// #-1
    19f8:	ldr	x4, [sp, #16]
    19fc:	ldr	x3, [sp, #24]
    1a00:	mov	x2, x0
    1a04:	ldr	x1, [sp, #32]
    1a08:	ldr	x0, [sp, #40]
    1a0c:	bl	1250 <fill_vdev_info_real>
    1a10:	ldp	x29, x30, [sp], #80
    1a14:	ret
	...

0000000000001a30 <nvlist_next_nvpair>:
    1a30:	stp	x29, x30, [sp, #-64]!
    1a34:	mov	x29, sp
    1a38:	str	x0, [sp, #24]
    1a3c:	str	x1, [sp, #16]
    1a40:	ldr	x0, [sp, #24]
    1a44:	cmp	x0, #0x0
    1a48:	b.ne	1a54 <nvlist_next_nvpair+0x24>  // b.any
    1a4c:	mov	x0, #0x0                   	// #0
    1a50:	b	1c40 <nvlist_next_nvpair+0x210>
    1a54:	ldr	x0, [sp, #16]
    1a58:	cmp	x0, #0x0
    1a5c:	b.ne	1a70 <nvlist_next_nvpair+0x40>  // b.any
    1a60:	ldr	x0, [sp, #24]
    1a64:	add	x0, x0, #0xc
    1a68:	str	x0, [sp, #16]
    1a6c:	b	1ae4 <nvlist_next_nvpair+0xb4>
    1a70:	ldr	x0, [sp, #16]
    1a74:	bl	68 <grub_get_unaligned32>
    1a78:	bl	38 <grub_swap_bytes32>
    1a7c:	str	w0, [sp, #60]
    1a80:	ldrsw	x0, [sp, #60]
    1a84:	ldr	x1, [sp, #16]
    1a88:	add	x0, x1, x0
    1a8c:	str	x0, [sp, #16]
    1a90:	ldr	w0, [sp, #60]
    1a94:	cmp	w0, #0x0
    1a98:	b.gt	1ae4 <nvlist_next_nvpair+0xb4>
    1a9c:	adrp	x0, 0 <grub_swap_bytes16>
    1aa0:	add	x0, x0, #0x0
    1aa4:	ldr	x3, [x0]
    1aa8:	adrp	x0, 0 <grub_swap_bytes16>
    1aac:	add	x0, x0, #0x0
    1ab0:	ldr	x2, [x0]
    1ab4:	mov	w1, #0x350                 	// #848
    1ab8:	adrp	x0, 0 <grub_swap_bytes16>
    1abc:	add	x0, x0, #0x0
    1ac0:	ldr	x0, [x0]
    1ac4:	bl	0 <grub_real_dprintf>
    1ac8:	adrp	x0, 0 <grub_swap_bytes16>
    1acc:	add	x0, x0, #0x0
    1ad0:	ldr	x1, [x0]
    1ad4:	mov	w0, #0x9                   	// #9
    1ad8:	bl	0 <grub_error>
    1adc:	mov	x0, #0x0                   	// #0
    1ae0:	b	1c40 <nvlist_next_nvpair+0x210>
    1ae4:	ldr	x0, [sp, #16]
    1ae8:	bl	88 <grub_get_unaligned64>
    1aec:	cmp	x0, #0x0
    1af0:	b.ne	1afc <nvlist_next_nvpair+0xcc>  // b.any
    1af4:	mov	x0, #0x0                   	// #0
    1af8:	b	1c40 <nvlist_next_nvpair+0x210>
    1afc:	ldr	x0, [sp, #16]
    1b00:	add	x1, x0, #0xc
    1b04:	ldr	x0, [sp, #24]
    1b08:	add	x0, x0, #0x1c, lsl #12
    1b0c:	cmp	x1, x0
    1b10:	b.cc	1b5c <nvlist_next_nvpair+0x12c>  // b.lo, b.ul, b.last
    1b14:	adrp	x0, 0 <grub_swap_bytes16>
    1b18:	add	x0, x0, #0x0
    1b1c:	ldr	x3, [x0]
    1b20:	adrp	x0, 0 <grub_swap_bytes16>
    1b24:	add	x0, x0, #0x0
    1b28:	ldr	x2, [x0]
    1b2c:	mov	w1, #0x35b                 	// #859
    1b30:	adrp	x0, 0 <grub_swap_bytes16>
    1b34:	add	x0, x0, #0x0
    1b38:	ldr	x0, [x0]
    1b3c:	bl	0 <grub_real_dprintf>
    1b40:	adrp	x0, 0 <grub_swap_bytes16>
    1b44:	add	x0, x0, #0x0
    1b48:	ldr	x1, [x0]
    1b4c:	mov	w0, #0x9                   	// #9
    1b50:	bl	0 <grub_error>
    1b54:	mov	x0, #0x0                   	// #0
    1b58:	b	1c40 <nvlist_next_nvpair+0x210>
    1b5c:	ldr	x0, [sp, #16]
    1b60:	bl	68 <grub_get_unaligned32>
    1b64:	bl	38 <grub_swap_bytes32>
    1b68:	str	w0, [sp, #60]
    1b6c:	ldr	x0, [sp, #16]
    1b70:	add	x0, x0, #0x8
    1b74:	str	x0, [sp, #48]
    1b78:	ldr	x0, [sp, #48]
    1b7c:	bl	68 <grub_get_unaligned32>
    1b80:	bl	38 <grub_swap_bytes32>
    1b84:	str	w0, [sp, #44]
    1b88:	ldr	x0, [sp, #48]
    1b8c:	add	x0, x0, #0x4
    1b90:	str	x0, [sp, #48]
    1b94:	ldr	w0, [sp, #44]
    1b98:	add	w0, w0, #0x3
    1b9c:	and	w0, w0, #0xfffffffc
    1ba0:	sxtw	x0, w0
    1ba4:	ldr	x1, [sp, #48]
    1ba8:	add	x0, x1, x0
    1bac:	str	x0, [sp, #48]
    1bb0:	ldr	x0, [sp, #48]
    1bb4:	add	x1, x0, #0x4
    1bb8:	ldr	x0, [sp, #24]
    1bbc:	add	x0, x0, #0x1c, lsl #12
    1bc0:	cmp	x1, x0
    1bc4:	b.cs	1bf4 <nvlist_next_nvpair+0x1c4>  // b.hs, b.nlast
    1bc8:	ldr	w0, [sp, #60]
    1bcc:	cmp	w0, #0x0
    1bd0:	b.lt	1bf4 <nvlist_next_nvpair+0x1c4>  // b.tstop
    1bd4:	ldrsw	x0, [sp, #60]
    1bd8:	add	x0, x0, #0x4
    1bdc:	ldr	x1, [sp, #48]
    1be0:	add	x1, x1, x0
    1be4:	ldr	x0, [sp, #24]
    1be8:	add	x0, x0, #0x1c, lsl #12
    1bec:	cmp	x1, x0
    1bf0:	b.ls	1c3c <nvlist_next_nvpair+0x20c>  // b.plast
    1bf4:	adrp	x0, 0 <grub_swap_bytes16>
    1bf8:	add	x0, x0, #0x0
    1bfc:	ldr	x3, [x0]
    1c00:	adrp	x0, 0 <grub_swap_bytes16>
    1c04:	add	x0, x0, #0x0
    1c08:	ldr	x2, [x0]
    1c0c:	mov	w1, #0x36a                 	// #874
    1c10:	adrp	x0, 0 <grub_swap_bytes16>
    1c14:	add	x0, x0, #0x0
    1c18:	ldr	x0, [x0]
    1c1c:	bl	0 <grub_real_dprintf>
    1c20:	adrp	x0, 0 <grub_swap_bytes16>
    1c24:	add	x0, x0, #0x0
    1c28:	ldr	x1, [x0]
    1c2c:	mov	w0, #0x9                   	// #9
    1c30:	bl	0 <grub_error>
    1c34:	mov	x0, #0x0                   	// #0
    1c38:	b	1c40 <nvlist_next_nvpair+0x210>
    1c3c:	ldr	x0, [sp, #16]
    1c40:	ldp	x29, x30, [sp], #64
    1c44:	ret
	...

0000000000001c70 <nvpair_name>:
    1c70:	stp	x29, x30, [sp, #-48]!
    1c74:	mov	x29, sp
    1c78:	str	x0, [sp, #40]
    1c7c:	str	x1, [sp, #32]
    1c80:	str	x2, [sp, #24]
    1c84:	ldr	x0, [sp, #40]
    1c88:	add	x0, x0, #0x8
    1c8c:	str	x0, [sp, #40]
    1c90:	ldr	x0, [sp, #40]
    1c94:	add	x1, x0, #0x4
    1c98:	ldr	x0, [sp, #32]
    1c9c:	str	x1, [x0]
    1ca0:	ldr	x0, [sp, #40]
    1ca4:	bl	68 <grub_get_unaligned32>
    1ca8:	bl	38 <grub_swap_bytes32>
    1cac:	mov	w1, w0
    1cb0:	ldr	x0, [sp, #24]
    1cb4:	str	x1, [x0]
    1cb8:	mov	w0, #0x0                   	// #0
    1cbc:	ldp	x29, x30, [sp], #48
    1cc0:	ret

0000000000001cc4 <nvpair_type>:
    1cc4:	stp	x29, x30, [sp, #-48]!
    1cc8:	mov	x29, sp
    1ccc:	str	x0, [sp, #24]
    1cd0:	ldr	x0, [sp, #24]
    1cd4:	add	x0, x0, #0x8
    1cd8:	str	x0, [sp, #24]
    1cdc:	ldr	x0, [sp, #24]
    1ce0:	bl	68 <grub_get_unaligned32>
    1ce4:	bl	38 <grub_swap_bytes32>
    1ce8:	str	w0, [sp, #44]
    1cec:	ldr	x0, [sp, #24]
    1cf0:	add	x0, x0, #0x4
    1cf4:	str	x0, [sp, #24]
    1cf8:	ldr	w0, [sp, #44]
    1cfc:	add	w0, w0, #0x3
    1d00:	and	w0, w0, #0xfffffffc
    1d04:	sxtw	x0, w0
    1d08:	ldr	x1, [sp, #24]
    1d0c:	add	x0, x1, x0
    1d10:	str	x0, [sp, #24]
    1d14:	ldr	x0, [sp, #24]
    1d18:	bl	68 <grub_get_unaligned32>
    1d1c:	bl	38 <grub_swap_bytes32>
    1d20:	str	w0, [sp, #40]
    1d24:	ldr	w0, [sp, #40]
    1d28:	ldp	x29, x30, [sp], #48
    1d2c:	ret

0000000000001d30 <nvpair_value>:
    1d30:	stp	x29, x30, [sp, #-64]!
    1d34:	mov	x29, sp
    1d38:	str	x0, [sp, #40]
    1d3c:	str	x1, [sp, #32]
    1d40:	str	x2, [sp, #24]
    1d44:	str	x3, [sp, #16]
    1d48:	ldr	x0, [sp, #40]
    1d4c:	bl	68 <grub_get_unaligned32>
    1d50:	bl	38 <grub_swap_bytes32>
    1d54:	str	w0, [sp, #60]
    1d58:	ldr	x0, [sp, #40]
    1d5c:	add	x0, x0, #0x8
    1d60:	str	x0, [sp, #40]
    1d64:	ldr	x0, [sp, #40]
    1d68:	bl	68 <grub_get_unaligned32>
    1d6c:	bl	38 <grub_swap_bytes32>
    1d70:	str	w0, [sp, #56]
    1d74:	ldr	x0, [sp, #40]
    1d78:	add	x0, x0, #0x4
    1d7c:	str	x0, [sp, #40]
    1d80:	ldr	w0, [sp, #56]
    1d84:	add	w0, w0, #0x3
    1d88:	and	w0, w0, #0xfffffffc
    1d8c:	sxtw	x0, w0
    1d90:	ldr	x1, [sp, #40]
    1d94:	add	x0, x1, x0
    1d98:	str	x0, [sp, #40]
    1d9c:	ldr	x0, [sp, #40]
    1da0:	add	x0, x0, #0x4
    1da4:	str	x0, [sp, #40]
    1da8:	ldr	x0, [sp, #40]
    1dac:	bl	68 <grub_get_unaligned32>
    1db0:	bl	38 <grub_swap_bytes32>
    1db4:	str	w0, [sp, #52]
    1db8:	ldr	x0, [sp, #40]
    1dbc:	add	x0, x0, #0x4
    1dc0:	str	x0, [sp, #40]
    1dc4:	ldr	w0, [sp, #52]
    1dc8:	cmp	w0, #0x0
    1dcc:	b.gt	1dec <nvpair_value+0xbc>
    1dd0:	adrp	x0, 0 <grub_swap_bytes16>
    1dd4:	add	x0, x0, #0x0
    1dd8:	ldr	x1, [x0]
    1ddc:	mov	w0, #0x9                   	// #9
    1de0:	bl	0 <grub_error>
    1de4:	mov	w0, #0x0                   	// #0
    1de8:	b	1e20 <nvpair_value+0xf0>
    1dec:	ldr	x0, [sp, #32]
    1df0:	ldr	x1, [sp, #40]
    1df4:	str	x1, [x0]
    1df8:	ldrsw	x1, [sp, #60]
    1dfc:	ldr	x0, [sp, #24]
    1e00:	str	x1, [x0]
    1e04:	ldr	x0, [sp, #16]
    1e08:	cmp	x0, #0x0
    1e0c:	b.eq	1e1c <nvpair_value+0xec>  // b.none
    1e10:	ldrsw	x1, [sp, #52]
    1e14:	ldr	x0, [sp, #16]
    1e18:	str	x1, [x0]
    1e1c:	mov	w0, #0x1                   	// #1
    1e20:	ldp	x29, x30, [sp], #64
    1e24:	ret
	...

0000000000001e30 <check_pool_label>:
    1e30:	stp	x29, x30, [sp, #-288]!
    1e34:	mov	x29, sp
    1e38:	str	x0, [sp, #72]
    1e3c:	str	x1, [sp, #64]
    1e40:	str	x2, [sp, #56]
    1e44:	str	w3, [sp, #52]
    1e48:	str	xzr, [sp, #216]
    1e4c:	ldr	x0, [sp, #56]
    1e50:	str	wzr, [x0]
    1e54:	add	x0, sp, #0xd0
    1e58:	mov	x1, x0
    1e5c:	ldr	x0, [sp, #64]
    1e60:	bl	1188 <zfs_fetch_nvlist>
    1e64:	str	w0, [sp, #268]
    1e68:	ldr	w0, [sp, #268]
    1e6c:	cmp	w0, #0x0
    1e70:	b.eq	1e7c <check_pool_label+0x4c>  // b.none
    1e74:	ldr	w0, [sp, #268]
    1e78:	b	2648 <check_pool_label+0x818>
    1e7c:	ldr	x0, [sp, #208]
    1e80:	str	x0, [sp, #256]
    1e84:	ldr	x0, [sp, #256]
    1e88:	add	x0, x0, #0x18, lsl #12
    1e8c:	ldr	x1, [x0, #16344]
    1e90:	mov	x0, #0x7a11                	// #31249
    1e94:	movk	x0, #0xb10c, lsl #16
    1e98:	movk	x0, #0xda7a, lsl #32
    1e9c:	movk	x0, #0x210, lsl #48
    1ea0:	cmp	x1, x0
    1ea4:	b.ne	1eb4 <check_pool_label+0x84>  // b.any
    1ea8:	mov	w0, #0xffffffff            	// #-1
    1eac:	str	w0, [sp, #284]
    1eb0:	b	1f08 <check_pool_label+0xd8>
    1eb4:	ldr	x0, [sp, #256]
    1eb8:	add	x0, x0, #0x18, lsl #12
    1ebc:	ldr	x0, [x0, #16344]
    1ec0:	bl	50 <grub_swap_bytes64>
    1ec4:	mov	x1, x0
    1ec8:	mov	x0, #0x7a11                	// #31249
    1ecc:	movk	x0, #0xb10c, lsl #16
    1ed0:	movk	x0, #0xda7a, lsl #32
    1ed4:	movk	x0, #0x210, lsl #48
    1ed8:	cmp	x1, x0
    1edc:	b.ne	1ee8 <check_pool_label+0xb8>  // b.any
    1ee0:	str	wzr, [sp, #284]
    1ee4:	b	1f08 <check_pool_label+0xd8>
    1ee8:	ldr	x0, [sp, #208]
    1eec:	bl	0 <grub_free>
    1ef0:	adrp	x0, 0 <grub_swap_bytes16>
    1ef4:	add	x0, x0, #0x0
    1ef8:	ldr	x1, [x0]
    1efc:	mov	w0, #0x9                   	// #9
    1f00:	bl	0 <grub_error>
    1f04:	b	2648 <check_pool_label+0x818>
    1f08:	ldr	x0, [sp, #64]
    1f0c:	ldr	x0, [x0, #64]
    1f10:	lsl	x0, x0, #9
    1f14:	str	x0, [sp, #160]
    1f18:	str	xzr, [sp, #168]
    1f1c:	str	xzr, [sp, #176]
    1f20:	str	xzr, [sp, #184]
    1f24:	ldr	x5, [sp, #208]
    1f28:	add	x2, sp, #0x10
    1f2c:	add	x3, sp, #0xa0
    1f30:	ldp	x0, x1, [x3]
    1f34:	stp	x0, x1, [x2]
    1f38:	ldp	x0, x1, [x3, #16]
    1f3c:	stp	x0, x1, [x2, #16]
    1f40:	add	x0, sp, #0x10
    1f44:	mov	x4, #0x1c000               	// #114688
    1f48:	mov	x3, x5
    1f4c:	ldr	w2, [sp, #284]
    1f50:	mov	w1, #0x3                   	// #3
    1f54:	bl	8d4 <zio_checksum_verify>
    1f58:	str	w0, [sp, #268]
    1f5c:	ldr	w0, [sp, #268]
    1f60:	cmp	w0, #0x0
    1f64:	b.eq	1f70 <check_pool_label+0x140>  // b.none
    1f68:	ldr	w0, [sp, #268]
    1f6c:	b	2648 <check_pool_label+0x818>
    1f70:	adrp	x0, 0 <grub_swap_bytes16>
    1f74:	add	x0, x0, #0x0
    1f78:	ldr	x3, [x0]
    1f7c:	adrp	x0, 0 <grub_swap_bytes16>
    1f80:	add	x0, x0, #0x0
    1f84:	ldr	x2, [x0]
    1f88:	mov	w1, #0x3ef                 	// #1007
    1f8c:	adrp	x0, 0 <grub_swap_bytes16>
    1f90:	add	x0, x0, #0x0
    1f94:	ldr	x0, [x0]
    1f98:	bl	0 <grub_real_dprintf>
    1f9c:	ldr	x3, [sp, #208]
    1fa0:	add	x0, sp, #0xe0
    1fa4:	mov	x2, x0
    1fa8:	adrp	x0, 0 <grub_swap_bytes16>
    1fac:	add	x0, x0, #0x0
    1fb0:	ldr	x1, [x0]
    1fb4:	mov	x0, x3
    1fb8:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    1fbc:	str	w0, [sp, #252]
    1fc0:	ldr	w0, [sp, #252]
    1fc4:	cmp	w0, #0x0
    1fc8:	b.ne	2014 <check_pool_label+0x1e4>  // b.any
    1fcc:	ldr	x0, [sp, #208]
    1fd0:	bl	0 <grub_free>
    1fd4:	adrp	x0, 0 <grub_swap_bytes16>
    1fd8:	add	x0, x0, #0x0
    1fdc:	ldr	x0, [x0]
    1fe0:	ldr	w0, [x0]
    1fe4:	cmp	w0, #0x0
    1fe8:	b.ne	2000 <check_pool_label+0x1d0>  // b.any
    1fec:	adrp	x0, 0 <grub_swap_bytes16>
    1ff0:	add	x0, x0, #0x0
    1ff4:	ldr	x1, [x0]
    1ff8:	mov	w0, #0x9                   	// #9
    1ffc:	bl	0 <grub_error>
    2000:	adrp	x0, 0 <grub_swap_bytes16>
    2004:	add	x0, x0, #0x0
    2008:	ldr	x0, [x0]
    200c:	ldr	w0, [x0]
    2010:	b	2648 <check_pool_label+0x818>
    2014:	adrp	x0, 0 <grub_swap_bytes16>
    2018:	add	x0, x0, #0x0
    201c:	ldr	x3, [x0]
    2020:	adrp	x0, 0 <grub_swap_bytes16>
    2024:	add	x0, x0, #0x0
    2028:	ldr	x2, [x0]
    202c:	mov	w1, #0x3fa                 	// #1018
    2030:	adrp	x0, 0 <grub_swap_bytes16>
    2034:	add	x0, x0, #0x0
    2038:	ldr	x0, [x0]
    203c:	bl	0 <grub_real_dprintf>
    2040:	ldr	x0, [sp, #224]
    2044:	cmp	x0, #0x2
    2048:	b.ne	206c <check_pool_label+0x23c>  // b.any
    204c:	ldr	x0, [sp, #208]
    2050:	bl	0 <grub_free>
    2054:	adrp	x0, 0 <grub_swap_bytes16>
    2058:	add	x0, x0, #0x0
    205c:	ldr	x1, [x0]
    2060:	mov	w0, #0x9                   	// #9
    2064:	bl	0 <grub_error>
    2068:	b	2648 <check_pool_label+0x818>
    206c:	adrp	x0, 0 <grub_swap_bytes16>
    2070:	add	x0, x0, #0x0
    2074:	ldr	x3, [x0]
    2078:	adrp	x0, 0 <grub_swap_bytes16>
    207c:	add	x0, x0, #0x0
    2080:	ldr	x2, [x0]
    2084:	mov	w1, #0x401                 	// #1025
    2088:	adrp	x0, 0 <grub_swap_bytes16>
    208c:	add	x0, x0, #0x0
    2090:	ldr	x0, [x0]
    2094:	bl	0 <grub_real_dprintf>
    2098:	ldr	x3, [sp, #208]
    209c:	add	x0, sp, #0xd8
    20a0:	mov	x2, x0
    20a4:	adrp	x0, 0 <grub_swap_bytes16>
    20a8:	add	x0, x0, #0x0
    20ac:	ldr	x1, [x0]
    20b0:	mov	x0, x3
    20b4:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    20b8:	str	w0, [sp, #252]
    20bc:	ldr	w0, [sp, #252]
    20c0:	cmp	w0, #0x0
    20c4:	b.ne	2110 <check_pool_label+0x2e0>  // b.any
    20c8:	ldr	x0, [sp, #208]
    20cc:	bl	0 <grub_free>
    20d0:	adrp	x0, 0 <grub_swap_bytes16>
    20d4:	add	x0, x0, #0x0
    20d8:	ldr	x0, [x0]
    20dc:	ldr	w0, [x0]
    20e0:	cmp	w0, #0x0
    20e4:	b.ne	20fc <check_pool_label+0x2cc>  // b.any
    20e8:	adrp	x0, 0 <grub_swap_bytes16>
    20ec:	add	x0, x0, #0x0
    20f0:	ldr	x1, [x0]
    20f4:	mov	w0, #0x9                   	// #9
    20f8:	bl	0 <grub_error>
    20fc:	adrp	x0, 0 <grub_swap_bytes16>
    2100:	add	x0, x0, #0x0
    2104:	ldr	x0, [x0]
    2108:	ldr	w0, [x0]
    210c:	b	2648 <check_pool_label+0x818>
    2110:	adrp	x0, 0 <grub_swap_bytes16>
    2114:	add	x0, x0, #0x0
    2118:	ldr	x3, [x0]
    211c:	adrp	x0, 0 <grub_swap_bytes16>
    2120:	add	x0, x0, #0x0
    2124:	ldr	x2, [x0]
    2128:	mov	w1, #0x40b                 	// #1035
    212c:	adrp	x0, 0 <grub_swap_bytes16>
    2130:	add	x0, x0, #0x0
    2134:	ldr	x0, [x0]
    2138:	bl	0 <grub_real_dprintf>
    213c:	ldr	x0, [sp, #216]
    2140:	cmp	x0, #0x0
    2144:	b.ne	2168 <check_pool_label+0x338>  // b.any
    2148:	ldr	x0, [sp, #208]
    214c:	bl	0 <grub_free>
    2150:	adrp	x0, 0 <grub_swap_bytes16>
    2154:	add	x0, x0, #0x0
    2158:	ldr	x1, [x0]
    215c:	mov	w0, #0x9                   	// #9
    2160:	bl	0 <grub_error>
    2164:	b	2648 <check_pool_label+0x818>
    2168:	adrp	x0, 0 <grub_swap_bytes16>
    216c:	add	x0, x0, #0x0
    2170:	ldr	x3, [x0]
    2174:	adrp	x0, 0 <grub_swap_bytes16>
    2178:	add	x0, x0, #0x0
    217c:	ldr	x2, [x0]
    2180:	mov	w1, #0x413                 	// #1043
    2184:	adrp	x0, 0 <grub_swap_bytes16>
    2188:	add	x0, x0, #0x0
    218c:	ldr	x0, [x0]
    2190:	bl	0 <grub_real_dprintf>
    2194:	ldr	x3, [sp, #208]
    2198:	add	x0, sp, #0xc0
    219c:	mov	x2, x0
    21a0:	adrp	x0, 0 <grub_swap_bytes16>
    21a4:	add	x0, x0, #0x0
    21a8:	ldr	x1, [x0]
    21ac:	mov	x0, x3
    21b0:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    21b4:	str	w0, [sp, #252]
    21b8:	ldr	w0, [sp, #252]
    21bc:	cmp	w0, #0x0
    21c0:	b.ne	220c <check_pool_label+0x3dc>  // b.any
    21c4:	ldr	x0, [sp, #208]
    21c8:	bl	0 <grub_free>
    21cc:	adrp	x0, 0 <grub_swap_bytes16>
    21d0:	add	x0, x0, #0x0
    21d4:	ldr	x0, [x0]
    21d8:	ldr	w0, [x0]
    21dc:	cmp	w0, #0x0
    21e0:	b.ne	21f8 <check_pool_label+0x3c8>  // b.any
    21e4:	adrp	x0, 0 <grub_swap_bytes16>
    21e8:	add	x0, x0, #0x0
    21ec:	ldr	x1, [x0]
    21f0:	mov	w0, #0x9                   	// #9
    21f4:	bl	0 <grub_error>
    21f8:	adrp	x0, 0 <grub_swap_bytes16>
    21fc:	add	x0, x0, #0x0
    2200:	ldr	x0, [x0]
    2204:	ldr	w0, [x0]
    2208:	b	2648 <check_pool_label+0x818>
    220c:	adrp	x0, 0 <grub_swap_bytes16>
    2210:	add	x0, x0, #0x0
    2214:	ldr	x3, [x0]
    2218:	adrp	x0, 0 <grub_swap_bytes16>
    221c:	add	x0, x0, #0x0
    2220:	ldr	x2, [x0]
    2224:	mov	w1, #0x41e                 	// #1054
    2228:	adrp	x0, 0 <grub_swap_bytes16>
    222c:	add	x0, x0, #0x0
    2230:	ldr	x0, [x0]
    2234:	bl	0 <grub_real_dprintf>
    2238:	ldr	x0, [sp, #192]
    223c:	cmp	x0, #0x0
    2240:	b.eq	2250 <check_pool_label+0x420>  // b.none
    2244:	ldr	x0, [sp, #192]
    2248:	cmp	x0, #0x21
    224c:	b.ls	228c <check_pool_label+0x45c>  // b.plast
    2250:	ldr	x1, [sp, #192]
    2254:	mov	x0, #0x1388                	// #5000
    2258:	cmp	x1, x0
    225c:	b.eq	228c <check_pool_label+0x45c>  // b.none
    2260:	ldr	x0, [sp, #208]
    2264:	bl	0 <grub_free>
    2268:	ldr	x0, [sp, #192]
    226c:	mov	x3, #0x21                  	// #33
    2270:	mov	x2, x0
    2274:	adrp	x0, 0 <grub_swap_bytes16>
    2278:	add	x0, x0, #0x0
    227c:	ldr	x1, [x0]
    2280:	mov	w0, #0x18                  	// #24
    2284:	bl	0 <grub_error>
    2288:	b	2648 <check_pool_label+0x818>
    228c:	adrp	x0, 0 <grub_swap_bytes16>
    2290:	add	x0, x0, #0x0
    2294:	ldr	x3, [x0]
    2298:	adrp	x0, 0 <grub_swap_bytes16>
    229c:	add	x0, x0, #0x0
    22a0:	ldr	x2, [x0]
    22a4:	mov	w1, #0x428                 	// #1064
    22a8:	adrp	x0, 0 <grub_swap_bytes16>
    22ac:	add	x0, x0, #0x0
    22b0:	ldr	x0, [x0]
    22b4:	bl	0 <grub_real_dprintf>
    22b8:	ldr	x3, [sp, #208]
    22bc:	ldr	x0, [sp, #64]
    22c0:	add	x0, x0, #0x10
    22c4:	mov	x2, x0
    22c8:	adrp	x0, 0 <grub_swap_bytes16>
    22cc:	add	x0, x0, #0x0
    22d0:	ldr	x1, [x0]
    22d4:	mov	x0, x3
    22d8:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    22dc:	str	w0, [sp, #252]
    22e0:	ldr	w0, [sp, #252]
    22e4:	cmp	w0, #0x0
    22e8:	b.ne	2334 <check_pool_label+0x504>  // b.any
    22ec:	ldr	x0, [sp, #208]
    22f0:	bl	0 <grub_free>
    22f4:	adrp	x0, 0 <grub_swap_bytes16>
    22f8:	add	x0, x0, #0x0
    22fc:	ldr	x0, [x0]
    2300:	ldr	w0, [x0]
    2304:	cmp	w0, #0x0
    2308:	b.ne	2320 <check_pool_label+0x4f0>  // b.any
    230c:	adrp	x0, 0 <grub_swap_bytes16>
    2310:	add	x0, x0, #0x0
    2314:	ldr	x1, [x0]
    2318:	mov	w0, #0x9                   	// #9
    231c:	bl	0 <grub_error>
    2320:	adrp	x0, 0 <grub_swap_bytes16>
    2324:	add	x0, x0, #0x0
    2328:	ldr	x0, [x0]
    232c:	ldr	w0, [x0]
    2330:	b	2648 <check_pool_label+0x818>
    2334:	ldr	x3, [sp, #208]
    2338:	add	x0, sp, #0xc8
    233c:	mov	x2, x0
    2340:	adrp	x0, 0 <grub_swap_bytes16>
    2344:	add	x0, x0, #0x0
    2348:	ldr	x1, [x0]
    234c:	mov	x0, x3
    2350:	bl	9760 <grub_zfs_nvlist_lookup_uint64>
    2354:	str	w0, [sp, #252]
    2358:	ldr	w0, [sp, #252]
    235c:	cmp	w0, #0x0
    2360:	b.ne	23ac <check_pool_label+0x57c>  // b.any
    2364:	ldr	x0, [sp, #208]
    2368:	bl	0 <grub_free>
    236c:	adrp	x0, 0 <grub_swap_bytes16>
    2370:	add	x0, x0, #0x0
    2374:	ldr	x0, [x0]
    2378:	ldr	w0, [x0]
    237c:	cmp	w0, #0x0
    2380:	b.ne	2398 <check_pool_label+0x568>  // b.any
    2384:	adrp	x0, 0 <grub_swap_bytes16>
    2388:	add	x0, x0, #0x0
    238c:	ldr	x1, [x0]
    2390:	mov	w0, #0x9                   	// #9
    2394:	bl	0 <grub_error>
    2398:	adrp	x0, 0 <grub_swap_bytes16>
    239c:	add	x0, x0, #0x0
    23a0:	ldr	x0, [x0]
    23a4:	ldr	w0, [x0]
    23a8:	b	2648 <check_pool_label+0x818>
    23ac:	adrp	x0, 0 <grub_swap_bytes16>
    23b0:	add	x0, x0, #0x0
    23b4:	ldr	x3, [x0]
    23b8:	adrp	x0, 0 <grub_swap_bytes16>
    23bc:	add	x0, x0, #0x0
    23c0:	ldr	x2, [x0]
    23c4:	mov	w1, #0x43e                 	// #1086
    23c8:	adrp	x0, 0 <grub_swap_bytes16>
    23cc:	add	x0, x0, #0x0
    23d0:	ldr	x0, [x0]
    23d4:	bl	0 <grub_real_dprintf>
    23d8:	ldr	w0, [sp, #52]
    23dc:	cmp	w0, #0x0
    23e0:	b.eq	23f0 <check_pool_label+0x5c0>  // b.none
    23e4:	ldr	x1, [sp, #200]
    23e8:	ldr	x0, [sp, #72]
    23ec:	str	x1, [x0, #1848]
    23f0:	ldr	x0, [sp, #72]
    23f4:	ldr	x1, [x0, #1848]
    23f8:	ldr	x0, [sp, #200]
    23fc:	cmp	x1, x0
    2400:	b.eq	241c <check_pool_label+0x5ec>  // b.none
    2404:	adrp	x0, 0 <grub_swap_bytes16>
    2408:	add	x0, x0, #0x0
    240c:	ldr	x1, [x0]
    2410:	mov	w0, #0x9                   	// #9
    2414:	bl	0 <grub_error>
    2418:	b	2648 <check_pool_label+0x818>
    241c:	ldr	x2, [sp, #208]
    2420:	adrp	x0, 0 <grub_swap_bytes16>
    2424:	add	x0, x0, #0x0
    2428:	ldr	x1, [x0]
    242c:	mov	x0, x2
    2430:	bl	9910 <grub_zfs_nvlist_lookup_nvlist>
    2434:	str	x0, [sp, #240]
    2438:	ldr	x0, [sp, #240]
    243c:	cmp	x0, #0x0
    2440:	b.ne	2464 <check_pool_label+0x634>  // b.any
    2444:	ldr	x0, [sp, #208]
    2448:	bl	0 <grub_free>
    244c:	adrp	x0, 0 <grub_swap_bytes16>
    2450:	add	x0, x0, #0x0
    2454:	ldr	x1, [x0]
    2458:	mov	w0, #0x9                   	// #9
    245c:	bl	0 <grub_error>
    2460:	b	2648 <check_pool_label+0x818>
    2464:	ldr	x3, [sp, #56]
    2468:	ldr	x2, [sp, #64]
    246c:	ldr	x1, [sp, #240]
    2470:	ldr	x0, [sp, #72]
    2474:	bl	17e8 <fill_vdev_info>
    2478:	str	w0, [sp, #268]
    247c:	ldr	w0, [sp, #268]
    2480:	cmp	w0, #0x0
    2484:	b.eq	24a0 <check_pool_label+0x670>  // b.none
    2488:	ldr	x0, [sp, #240]
    248c:	bl	0 <grub_free>
    2490:	ldr	x0, [sp, #208]
    2494:	bl	0 <grub_free>
    2498:	ldr	w0, [sp, #268]
    249c:	b	2648 <check_pool_label+0x818>
    24a0:	ldr	x0, [sp, #240]
    24a4:	bl	0 <grub_free>
    24a8:	adrp	x0, 0 <grub_swap_bytes16>
    24ac:	add	x0, x0, #0x0
    24b0:	ldr	x3, [x0]
    24b4:	adrp	x0, 0 <grub_swap_bytes16>
    24b8:	add	x0, x0, #0x0
    24bc:	ldr	x2, [x0]
    24c0:	mov	w1, #0x458                 	// #1112
    24c4:	adrp	x0, 0 <grub_swap_bytes16>
    24c8:	add	x0, x0, #0x0
    24cc:	ldr	x0, [x0]
    24d0:	bl	0 <grub_real_dprintf>
    24d4:	ldr	x2, [sp, #208]
    24d8:	adrp	x0, 0 <grub_swap_bytes16>
    24dc:	add	x0, x0, #0x0
    24e0:	ldr	x1, [x0]
    24e4:	mov	x0, x2
    24e8:	bl	9910 <grub_zfs_nvlist_lookup_nvlist>
    24ec:	str	x0, [sp, #232]
    24f0:	ldr	x0, [sp, #232]
    24f4:	cmp	x0, #0x0
    24f8:	b.eq	2610 <check_pool_label+0x7e0>  // b.none
    24fc:	str	xzr, [sp, #272]
    2500:	b	25f4 <check_pool_label+0x7c4>
    2504:	add	x1, sp, #0x90
    2508:	add	x0, sp, #0x98
    250c:	mov	x2, x1
    2510:	mov	x1, x0
    2514:	ldr	x0, [sp, #272]
    2518:	bl	1c70 <nvpair_name>
    251c:	ldr	x0, [sp, #144]
    2520:	cmp	x0, #0x32
    2524:	b.ls	2530 <check_pool_label+0x700>  // b.plast
    2528:	mov	x0, #0x32                  	// #50
    252c:	str	x0, [sp, #144]
    2530:	ldr	x1, [sp, #152]
    2534:	ldr	x2, [sp, #144]
    2538:	add	x0, sp, #0x58
    253c:	bl	100 <grub_memcpy>
    2540:	ldr	x0, [sp, #144]
    2544:	add	x1, sp, #0x58
    2548:	strb	wzr, [x1, x0]
    254c:	add	x0, sp, #0x58
    2550:	mov	x4, x0
    2554:	adrp	x0, 0 <grub_swap_bytes16>
    2558:	add	x0, x0, #0x0
    255c:	ldr	x3, [x0]
    2560:	adrp	x0, 0 <grub_swap_bytes16>
    2564:	add	x0, x0, #0x0
    2568:	ldr	x2, [x0]
    256c:	mov	w1, #0x468                 	// #1128
    2570:	adrp	x0, 0 <grub_swap_bytes16>
    2574:	add	x0, x0, #0x0
    2578:	ldr	x0, [x0]
    257c:	bl	0 <grub_real_dprintf>
    2580:	add	x0, sp, #0x58
    2584:	mov	x2, #0x0                   	// #0
    2588:	mov	x1, #0x1                   	// #1
    258c:	bl	b750 <check_feature>
    2590:	cmp	w0, #0x0
    2594:	b.eq	25f4 <check_pool_label+0x7c4>  // b.none
    2598:	add	x0, sp, #0x58
    259c:	mov	x4, x0
    25a0:	adrp	x0, 0 <grub_swap_bytes16>
    25a4:	add	x0, x0, #0x0
    25a8:	ldr	x3, [x0]
    25ac:	adrp	x0, 0 <grub_swap_bytes16>
    25b0:	add	x0, x0, #0x0
    25b4:	ldr	x2, [x0]
    25b8:	mov	w1, #0x46b                 	// #1131
    25bc:	adrp	x0, 0 <grub_swap_bytes16>
    25c0:	add	x0, x0, #0x0
    25c4:	ldr	x0, [x0]
    25c8:	bl	0 <grub_real_dprintf>
    25cc:	add	x0, sp, #0x58
    25d0:	mov	x2, x0
    25d4:	adrp	x0, 0 <grub_swap_bytes16>
    25d8:	add	x0, x0, #0x0
    25dc:	ldr	x1, [x0]
    25e0:	mov	w0, #0x18                  	// #24
    25e4:	bl	0 <grub_error>
    25e8:	str	w0, [sp, #268]
    25ec:	ldr	w0, [sp, #268]
    25f0:	b	2648 <check_pool_label+0x818>
    25f4:	ldr	x1, [sp, #272]
    25f8:	ldr	x0, [sp, #232]
    25fc:	bl	1a30 <nvlist_next_nvpair>
    2600:	str	x0, [sp, #272]
    2604:	ldr	x0, [sp, #272]
    2608:	cmp	x0, #0x0
    260c:	b.ne	2504 <check_pool_label+0x6d4>  // b.any
    2610:	adrp	x0, 0 <grub_swap_bytes16>
    2614:	add	x0, x0, #0x0
    2618:	ldr	x3, [x0]
    261c:	adrp	x0, 0 <grub_swap_bytes16>
    2620:	add	x0, x0, #0x0
    2624:	ldr	x2, [x0]
    2628:	mov	w1, #0x471                 	// #1137
    262c:	adrp	x0, 0 <grub_swap_bytes16>
    2630:	add	x0, x0, #0x0
    2634:	ldr	x0, [x0]
    2638:	bl	0 <grub_real_dprintf>
    263c:	ldr	x0, [sp, #208]
    2640:	bl	0 <grub_free>
    2644:	mov	w0, #0x0                   	// #0
    2648:	ldp	x29, x30, [sp], #288
    264c:	ret
	...

0000000000002760 <scan_disk>:
    2760:	stp	x29, x30, [sp, #-368]!
    2764:	mov	x29, sp
    2768:	str	x19, [sp, #16]
    276c:	str	x0, [sp, #56]
    2770:	str	x1, [sp, #48]
    2774:	str	w2, [sp, #44]
    2778:	str	x3, [sp, #32]
    277c:	str	wzr, [sp, #364]
    2780:	str	xzr, [sp, #352]
    2784:	mov	x0, #0x20000               	// #131072
    2788:	bl	0 <grub_malloc>
    278c:	str	x0, [sp, #336]
    2790:	ldr	x0, [sp, #336]
    2794:	cmp	x0, #0x0
    2798:	b.ne	27b0 <scan_disk+0x50>  // b.any
    279c:	adrp	x0, 0 <grub_swap_bytes16>
    27a0:	add	x0, x0, #0x0
    27a4:	ldr	x0, [x0]
    27a8:	ldr	w0, [x0]
    27ac:	b	2a1c <scan_disk+0x2bc>
    27b0:	mov	x0, #0x2000                	// #8192
    27b4:	bl	0 <grub_malloc>
    27b8:	str	x0, [sp, #328]
    27bc:	ldr	x0, [sp, #328]
    27c0:	cmp	x0, #0x0
    27c4:	b.ne	27e4 <scan_disk+0x84>  // b.any
    27c8:	ldr	x0, [sp, #336]
    27cc:	bl	0 <grub_free>
    27d0:	adrp	x0, 0 <grub_swap_bytes16>
    27d4:	add	x0, x0, #0x0
    27d8:	ldr	x0, [x0]
    27dc:	ldr	w0, [x0]
    27e0:	b	2a1c <scan_disk+0x2bc>
    27e4:	mov	w0, #0x4                   	// #4
    27e8:	str	w0, [sp, #348]
    27ec:	ldr	x0, [sp, #56]
    27f0:	str	x0, [sp, #128]
    27f4:	ldr	w0, [sp, #44]
    27f8:	str	w0, [sp, #312]
    27fc:	ldr	x0, [sp, #56]
    2800:	ldr	x0, [x0]
    2804:	bl	0 <grub_disk_get_size>
    2808:	cmn	x0, #0x1
    280c:	b.ne	2818 <scan_disk+0xb8>  // b.any
    2810:	mov	w0, #0x2                   	// #2
    2814:	str	w0, [sp, #348]
    2818:	str	wzr, [sp, #364]
    281c:	b	29dc <scan_disk+0x27c>
    2820:	ldrsw	x0, [sp, #364]
    2824:	lsl	x19, x0, #9
    2828:	ldr	w0, [sp, #364]
    282c:	cmp	w0, #0x1
    2830:	b.le	284c <scan_disk+0xec>
    2834:	ldr	x0, [sp, #56]
    2838:	ldr	x0, [x0]
    283c:	bl	0 <grub_disk_get_size>
    2840:	and	x0, x0, #0xfffffffffffc0000
    2844:	sub	x0, x0, #0x800
    2848:	b	2850 <scan_disk+0xf0>
    284c:	mov	x0, #0x0                   	// #0
    2850:	add	x0, x0, x19
    2854:	add	x0, x0, #0x20
    2858:	str	x0, [sp, #136]
    285c:	ldr	x0, [sp, #56]
    2860:	ldr	x5, [x0]
    2864:	ldr	x0, [sp, #136]
    2868:	add	x0, x0, #0xe0
    286c:	ldr	x4, [sp, #336]
    2870:	mov	x3, #0x20000               	// #131072
    2874:	mov	x2, #0x0                   	// #0
    2878:	mov	x1, x0
    287c:	mov	x0, x5
    2880:	bl	0 <grub_disk_read>
    2884:	str	w0, [sp, #324]
    2888:	ldr	w0, [sp, #324]
    288c:	cmp	w0, #0x0
    2890:	b.eq	28a8 <scan_disk+0x148>  // b.none
    2894:	adrp	x0, 0 <grub_swap_bytes16>
    2898:	add	x0, x0, #0x0
    289c:	ldr	x0, [x0]
    28a0:	str	wzr, [x0]
    28a4:	b	29d0 <scan_disk+0x270>
    28a8:	ldr	w4, [sp, #364]
    28ac:	adrp	x0, 0 <grub_swap_bytes16>
    28b0:	add	x0, x0, #0x0
    28b4:	ldr	x3, [x0]
    28b8:	adrp	x0, 0 <grub_swap_bytes16>
    28bc:	add	x0, x0, #0x0
    28c0:	ldr	x2, [x0]
    28c4:	mov	w1, #0x4a8                 	// #1192
    28c8:	adrp	x0, 0 <grub_swap_bytes16>
    28cc:	add	x0, x0, #0x0
    28d0:	ldr	x0, [x0]
    28d4:	bl	0 <grub_real_dprintf>
    28d8:	add	x0, sp, #0x48
    28dc:	ldr	w3, [sp, #44]
    28e0:	ldr	x2, [sp, #32]
    28e4:	mov	x1, x0
    28e8:	ldr	x0, [sp, #48]
    28ec:	bl	1e30 <check_pool_label>
    28f0:	str	w0, [sp, #324]
    28f4:	ldr	w0, [sp, #324]
    28f8:	cmp	w0, #0x0
    28fc:	b.ne	2910 <scan_disk+0x1b0>  // b.any
    2900:	ldr	x0, [sp, #32]
    2904:	ldr	w0, [x0]
    2908:	cmp	w0, #0x0
    290c:	b.ne	2924 <scan_disk+0x1c4>  // b.any
    2910:	adrp	x0, 0 <grub_swap_bytes16>
    2914:	add	x0, x0, #0x0
    2918:	ldr	x0, [x0]
    291c:	str	wzr, [x0]
    2920:	b	29d0 <scan_disk+0x270>
    2924:	add	x0, sp, #0x48
    2928:	mov	x1, x0
    292c:	ldr	x0, [sp, #336]
    2930:	bl	f38 <find_bestub>
    2934:	str	x0, [sp, #352]
    2938:	ldr	x0, [sp, #352]
    293c:	cmp	x0, #0x0
    2940:	b.ne	2984 <scan_disk+0x224>  // b.any
    2944:	adrp	x0, 0 <grub_swap_bytes16>
    2948:	add	x0, x0, #0x0
    294c:	ldr	x3, [x0]
    2950:	adrp	x0, 0 <grub_swap_bytes16>
    2954:	add	x0, x0, #0x0
    2958:	ldr	x2, [x0]
    295c:	mov	w1, #0x4b4                 	// #1204
    2960:	adrp	x0, 0 <grub_swap_bytes16>
    2964:	add	x0, x0, #0x0
    2968:	ldr	x0, [x0]
    296c:	bl	0 <grub_real_dprintf>
    2970:	adrp	x0, 0 <grub_swap_bytes16>
    2974:	add	x0, x0, #0x0
    2978:	ldr	x0, [x0]
    297c:	str	wzr, [x0]
    2980:	b	29d0 <scan_disk+0x270>
    2984:	ldr	x1, [sp, #352]
    2988:	add	x0, sp, #0x48
    298c:	add	x0, x0, #0x48
    2990:	mov	x2, #0xa8                  	// #168
    2994:	bl	0 <grub_memmove>
    2998:	ldr	w0, [sp, #44]
    299c:	cmp	w0, #0x0
    29a0:	b.eq	29b8 <scan_disk+0x258>  // b.none
    29a4:	ldr	x0, [sp, #48]
    29a8:	add	x0, x0, #0x690
    29ac:	ldr	x1, [sp, #352]
    29b0:	mov	x2, #0xa8                  	// #168
    29b4:	bl	0 <grub_memmove>
    29b8:	ldr	x0, [sp, #336]
    29bc:	bl	0 <grub_free>
    29c0:	ldr	x0, [sp, #328]
    29c4:	bl	0 <grub_free>
    29c8:	mov	w0, #0x0                   	// #0
    29cc:	b	2a1c <scan_disk+0x2bc>
    29d0:	ldr	w0, [sp, #364]
    29d4:	add	w0, w0, #0x1
    29d8:	str	w0, [sp, #364]
    29dc:	ldr	x0, [sp, #352]
    29e0:	cmp	x0, #0x0
    29e4:	b.ne	29f8 <scan_disk+0x298>  // b.any
    29e8:	ldr	w1, [sp, #364]
    29ec:	ldr	w0, [sp, #348]
    29f0:	cmp	w1, w0
    29f4:	b.lt	2820 <scan_disk+0xc0>  // b.tstop
    29f8:	ldr	x0, [sp, #336]
    29fc:	bl	0 <grub_free>
    2a00:	ldr	x0, [sp, #328]
    2a04:	bl	0 <grub_free>
    2a08:	adrp	x0, 0 <grub_swap_bytes16>
    2a0c:	add	x0, x0, #0x0
    2a10:	ldr	x1, [x0]
    2a14:	mov	w0, #0x9                   	// #9
    2a18:	bl	0 <grub_error>
    2a1c:	ldr	x19, [sp, #16]
    2a20:	ldp	x29, x30, [sp], #368
    2a24:	ret
	...

0000000000002a58 <scan_devices_iter>:
    2a58:	stp	x29, x30, [sp, #-64]!
    2a5c:	mov	x29, sp
    2a60:	str	x0, [sp, #24]
    2a64:	str	x1, [sp, #16]
    2a68:	ldr	x0, [sp, #16]
    2a6c:	str	x0, [sp, #56]
    2a70:	ldr	x0, [sp, #24]
    2a74:	bl	0 <grub_device_open>
    2a78:	str	x0, [sp, #48]
    2a7c:	ldr	x0, [sp, #48]
    2a80:	cmp	x0, #0x0
    2a84:	b.ne	2a90 <scan_devices_iter+0x38>  // b.any
    2a88:	mov	w0, #0x0                   	// #0
    2a8c:	b	2b30 <scan_devices_iter+0xd8>
    2a90:	ldr	x0, [sp, #48]
    2a94:	ldr	x0, [x0]
    2a98:	cmp	x0, #0x0
    2a9c:	b.ne	2ab0 <scan_devices_iter+0x58>  // b.any
    2aa0:	ldr	x0, [sp, #48]
    2aa4:	bl	0 <grub_device_close>
    2aa8:	mov	w0, #0x0                   	// #0
    2aac:	b	2b30 <scan_devices_iter+0xd8>
    2ab0:	add	x0, sp, #0x28
    2ab4:	mov	x3, x0
    2ab8:	mov	w2, #0x0                   	// #0
    2abc:	ldr	x1, [sp, #56]
    2ac0:	ldr	x0, [sp, #48]
    2ac4:	bl	2760 <scan_disk>
    2ac8:	str	w0, [sp, #44]
    2acc:	ldr	w0, [sp, #44]
    2ad0:	cmp	w0, #0x9
    2ad4:	b.ne	2af8 <scan_devices_iter+0xa0>  // b.any
    2ad8:	ldr	x0, [sp, #48]
    2adc:	bl	0 <grub_device_close>
    2ae0:	adrp	x0, 0 <grub_swap_bytes16>
    2ae4:	add	x0, x0, #0x0
    2ae8:	ldr	x0, [x0]
    2aec:	str	wzr, [x0]
    2af0:	mov	w0, #0x0                   	// #0
    2af4:	b	2b30 <scan_devices_iter+0xd8>
    2af8:	ldr	w0, [sp, #44]
    2afc:	cmp	w0, #0x0
    2b00:	b.eq	2b18 <scan_devices_iter+0xc0>  // b.none
    2b04:	ldr	x0, [sp, #48]
    2b08:	bl	0 <grub_device_close>
    2b0c:	bl	0 <grub_print_error>
    2b10:	mov	w0, #0x0                   	// #0
    2b14:	b	2b30 <scan_devices_iter+0xd8>
    2b18:	ldr	w0, [sp, #40]
    2b1c:	cmp	w0, #0x0
    2b20:	b.ne	2b2c <scan_devices_iter+0xd4>  // b.any
    2b24:	ldr	x0, [sp, #48]
    2b28:	bl	0 <grub_device_close>
    2b2c:	mov	w0, #0x0                   	// #0
    2b30:	ldp	x29, x30, [sp], #64
    2b34:	ret
	...

0000000000002b40 <scan_devices>:
    2b40:	stp	x29, x30, [sp, #-32]!
    2b44:	mov	x29, sp
    2b48:	str	x0, [sp, #24]
    2b4c:	ldr	x1, [sp, #24]
    2b50:	adrp	x0, 0 <grub_swap_bytes16>
    2b54:	add	x0, x0, #0x0
    2b58:	ldr	x0, [x0]
    2b5c:	bl	0 <grub_device_iterate>
    2b60:	mov	w0, #0x0                   	// #0
    2b64:	ldp	x29, x30, [sp], #32
    2b68:	ret
    2b6c:	nop
	...

0000000000002b78 <xor_out>:
    2b78:	stp	x29, x30, [sp, #-64]!
    2b7c:	mov	x29, sp
    2b80:	str	x0, [sp, #40]
    2b84:	str	x1, [sp, #32]
    2b88:	str	x2, [sp, #24]
    2b8c:	str	w3, [sp, #20]
    2b90:	str	w4, [sp, #16]
    2b94:	ldr	w0, [sp, #20]
    2b98:	cmp	w0, #0x0
    2b9c:	b.eq	2bac <xor_out+0x34>  // b.none
    2ba0:	ldr	w0, [sp, #16]
    2ba4:	cmp	w0, #0x0
    2ba8:	b.ne	2bc4 <xor_out+0x4c>  // b.any
    2bac:	ldr	x3, [sp, #24]
    2bb0:	ldr	x2, [sp, #32]
    2bb4:	ldr	x1, [sp, #40]
    2bb8:	ldr	x0, [sp, #40]
    2bbc:	bl	264 <grub_crypto_xor>
    2bc0:	b	2c90 <xor_out+0x118>
    2bc4:	ldr	w1, [sp, #20]
    2bc8:	ldr	w0, [sp, #16]
    2bcc:	mul	w1, w1, w0
    2bd0:	mov	w0, #0x8081                	// #32897
    2bd4:	movk	w0, #0x8080, lsl #16
    2bd8:	umull	x0, w1, w0
    2bdc:	lsr	x0, x0, #32
    2be0:	lsr	w2, w0, #7
    2be4:	mov	w0, w2
    2be8:	lsl	w0, w0, #8
    2bec:	sub	w0, w0, w2
    2bf0:	sub	w0, w1, w0
    2bf4:	str	w0, [sp, #60]
    2bf8:	b	2c7c <xor_out+0x104>
    2bfc:	ldr	x0, [sp, #32]
    2c00:	ldrb	w0, [x0]
    2c04:	cmp	w0, #0x0
    2c08:	b.eq	2c64 <xor_out+0xec>  // b.none
    2c0c:	ldr	x0, [sp, #40]
    2c10:	ldrb	w1, [x0]
    2c14:	ldr	x0, [sp, #32]
    2c18:	ldrb	w0, [x0]
    2c1c:	mov	w2, w0
    2c20:	adrp	x0, 0 <grub_swap_bytes16>
    2c24:	add	x0, x0, #0x0
    2c28:	ldr	x0, [x0]
    2c2c:	sxtw	x2, w2
    2c30:	ldr	w0, [x0, x2, lsl #2]
    2c34:	mov	w2, w0
    2c38:	ldr	w0, [sp, #60]
    2c3c:	add	w3, w2, w0
    2c40:	adrp	x0, 0 <grub_swap_bytes16>
    2c44:	add	x0, x0, #0x0
    2c48:	ldr	x2, [x0]
    2c4c:	mov	w0, w3
    2c50:	ldrb	w0, [x2, x0]
    2c54:	eor	w0, w1, w0
    2c58:	and	w1, w0, #0xff
    2c5c:	ldr	x0, [sp, #40]
    2c60:	strb	w1, [x0]
    2c64:	ldr	x0, [sp, #32]
    2c68:	add	x0, x0, #0x1
    2c6c:	str	x0, [sp, #32]
    2c70:	ldr	x0, [sp, #40]
    2c74:	add	x0, x0, #0x1
    2c78:	str	x0, [sp, #40]
    2c7c:	ldr	x0, [sp, #24]
    2c80:	sub	x1, x0, #0x1
    2c84:	str	x1, [sp, #24]
    2c88:	cmp	x0, #0x0
    2c8c:	b.ne	2bfc <xor_out+0x84>  // b.any
    2c90:	ldp	x29, x30, [sp], #64
    2c94:	ret
	...

0000000000002ca8 <gf_mul>:
    2ca8:	sub	sp, sp, #0x10
    2cac:	strb	w0, [sp, #15]
    2cb0:	strb	w1, [sp, #14]
    2cb4:	ldrb	w0, [sp, #15]
    2cb8:	cmp	w0, #0x0
    2cbc:	b.eq	2ccc <gf_mul+0x24>  // b.none
    2cc0:	ldrb	w0, [sp, #14]
    2cc4:	cmp	w0, #0x0
    2cc8:	b.ne	2cd4 <gf_mul+0x2c>  // b.any
    2ccc:	mov	w0, #0x0                   	// #0
    2cd0:	b	2d1c <gf_mul+0x74>
    2cd4:	ldrb	w1, [sp, #15]
    2cd8:	adrp	x0, 0 <grub_swap_bytes16>
    2cdc:	add	x0, x0, #0x0
    2ce0:	ldr	x0, [x0]
    2ce4:	sxtw	x1, w1
    2ce8:	ldr	w1, [x0, x1, lsl #2]
    2cec:	ldrb	w2, [sp, #14]
    2cf0:	adrp	x0, 0 <grub_swap_bytes16>
    2cf4:	add	x0, x0, #0x0
    2cf8:	ldr	x0, [x0]
    2cfc:	sxtw	x2, w2
    2d00:	ldr	w0, [x0, x2, lsl #2]
    2d04:	add	w2, w1, w0
    2d08:	adrp	x0, 0 <grub_swap_bytes16>
    2d0c:	add	x0, x0, #0x0
    2d10:	ldr	x1, [x0]
    2d14:	sxtw	x0, w2
    2d18:	ldrb	w0, [x1, x0]
    2d1c:	add	sp, sp, #0x10
    2d20:	ret
    2d24:	nop
	...

0000000000002d38 <recovery>:
    2d38:	stp	x29, x30, [sp, #-176]!
    2d3c:	mov	x29, sp
    2d40:	str	x19, [sp, #16]
    2d44:	str	x0, [sp, #72]
    2d48:	str	x1, [sp, #64]
    2d4c:	str	w2, [sp, #60]
    2d50:	str	x3, [sp, #48]
    2d54:	str	x4, [sp, #40]
    2d58:	ldr	w4, [sp, #60]
    2d5c:	adrp	x0, 0 <grub_swap_bytes16>
    2d60:	add	x0, x0, #0x0
    2d64:	ldr	x3, [x0]
    2d68:	adrp	x0, 0 <grub_swap_bytes16>
    2d6c:	add	x0, x0, #0x0
    2d70:	ldr	x2, [x0]
    2d74:	mov	w1, #0x524                 	// #1316
    2d78:	adrp	x0, 0 <grub_swap_bytes16>
    2d7c:	add	x0, x0, #0x0
    2d80:	ldr	x0, [x0]
    2d84:	bl	0 <grub_real_dprintf>
    2d88:	ldr	w0, [sp, #60]
    2d8c:	cmp	w0, #0x3
    2d90:	b.eq	325c <recovery+0x524>  // b.none
    2d94:	ldr	w0, [sp, #60]
    2d98:	cmp	w0, #0x3
    2d9c:	b.gt	3b4c <recovery+0xe14>
    2da0:	ldr	w0, [sp, #60]
    2da4:	cmp	w0, #0x1
    2da8:	b.eq	2dbc <recovery+0x84>  // b.none
    2dac:	ldr	w0, [sp, #60]
    2db0:	cmp	w0, #0x2
    2db4:	b.eq	2eb4 <recovery+0x17c>  // b.none
    2db8:	b	3b4c <recovery+0xe14>
    2dbc:	ldr	x0, [sp, #48]
    2dc0:	ldr	w0, [x0]
    2dc4:	cmp	w0, #0x0
    2dc8:	b.eq	2ddc <recovery+0xa4>  // b.none
    2dcc:	ldr	x0, [sp, #40]
    2dd0:	ldr	w0, [x0]
    2dd4:	cmp	w0, #0x0
    2dd8:	b.ne	2de4 <recovery+0xac>  // b.any
    2ddc:	mov	w0, #0x0                   	// #0
    2de0:	b	3b60 <recovery+0xe28>
    2de4:	ldr	x0, [sp, #48]
    2de8:	ldr	w1, [x0]
    2dec:	ldr	x0, [sp, #40]
    2df0:	ldr	w0, [x0]
    2df4:	mul	w2, w1, w0
    2df8:	mov	w0, #0x8081                	// #32897
    2dfc:	movk	w0, #0x8080, lsl #16
    2e00:	umull	x0, w2, w0
    2e04:	lsr	x0, x0, #32
    2e08:	lsr	w1, w0, #7
    2e0c:	mov	w0, w1
    2e10:	lsl	w0, w0, #8
    2e14:	sub	w0, w0, w1
    2e18:	sub	w1, w2, w0
    2e1c:	mov	w0, #0xff                  	// #255
    2e20:	sub	w0, w0, w1
    2e24:	str	w0, [sp, #132]
    2e28:	ldr	x0, [sp, #72]
    2e2c:	ldr	x0, [x0]
    2e30:	str	x0, [sp, #168]
    2e34:	b	2e98 <recovery+0x160>
    2e38:	ldr	x0, [sp, #168]
    2e3c:	ldrb	w0, [x0]
    2e40:	cmp	w0, #0x0
    2e44:	b.eq	2e8c <recovery+0x154>  // b.none
    2e48:	ldr	x0, [sp, #168]
    2e4c:	ldrb	w0, [x0]
    2e50:	mov	w1, w0
    2e54:	adrp	x0, 0 <grub_swap_bytes16>
    2e58:	add	x0, x0, #0x0
    2e5c:	ldr	x0, [x0]
    2e60:	sxtw	x1, w1
    2e64:	ldr	w1, [x0, x1, lsl #2]
    2e68:	ldr	w0, [sp, #132]
    2e6c:	add	w2, w1, w0
    2e70:	adrp	x0, 0 <grub_swap_bytes16>
    2e74:	add	x0, x0, #0x0
    2e78:	ldr	x1, [x0]
    2e7c:	sxtw	x0, w2
    2e80:	ldrb	w1, [x1, x0]
    2e84:	ldr	x0, [sp, #168]
    2e88:	strb	w1, [x0]
    2e8c:	ldr	x0, [sp, #168]
    2e90:	add	x0, x0, #0x1
    2e94:	str	x0, [sp, #168]
    2e98:	ldr	x0, [sp, #64]
    2e9c:	sub	x1, x0, #0x1
    2ea0:	str	x1, [sp, #64]
    2ea4:	cmp	x0, #0x0
    2ea8:	b.ne	2e38 <recovery+0x100>  // b.any
    2eac:	mov	w0, #0x0                   	// #0
    2eb0:	b	3b60 <recovery+0xe28>
    2eb4:	ldr	x0, [sp, #48]
    2eb8:	ldr	w1, [x0]
    2ebc:	ldr	x0, [sp, #40]
    2ec0:	ldr	w0, [x0]
    2ec4:	mul	w1, w1, w0
    2ec8:	ldr	x0, [sp, #48]
    2ecc:	add	x0, x0, #0x4
    2ed0:	ldr	w2, [x0]
    2ed4:	ldr	x0, [sp, #40]
    2ed8:	add	x0, x0, #0x4
    2edc:	ldr	w0, [x0]
    2ee0:	mul	w0, w2, w0
    2ee4:	add	w2, w1, w0
    2ee8:	mov	w0, #0x8081                	// #32897
    2eec:	movk	w0, #0x8080, lsl #16
    2ef0:	umull	x0, w2, w0
    2ef4:	lsr	x0, x0, #32
    2ef8:	lsr	w1, w0, #7
    2efc:	mov	w0, w1
    2f00:	lsl	w0, w0, #8
    2f04:	sub	w0, w0, w1
    2f08:	sub	w1, w2, w0
    2f0c:	adrp	x0, 0 <grub_swap_bytes16>
    2f10:	add	x0, x0, #0x0
    2f14:	ldr	x2, [x0]
    2f18:	mov	w0, w1
    2f1c:	ldrb	w3, [x2, x0]
    2f20:	ldr	x0, [sp, #48]
    2f24:	ldr	w1, [x0]
    2f28:	ldr	x0, [sp, #40]
    2f2c:	add	x0, x0, #0x4
    2f30:	ldr	w0, [x0]
    2f34:	mul	w1, w1, w0
    2f38:	ldr	x0, [sp, #48]
    2f3c:	add	x0, x0, #0x4
    2f40:	ldr	w2, [x0]
    2f44:	ldr	x0, [sp, #40]
    2f48:	ldr	w0, [x0]
    2f4c:	mul	w0, w2, w0
    2f50:	add	w2, w1, w0
    2f54:	mov	w0, #0x8081                	// #32897
    2f58:	movk	w0, #0x8080, lsl #16
    2f5c:	umull	x0, w2, w0
    2f60:	lsr	x0, x0, #32
    2f64:	lsr	w1, w0, #7
    2f68:	mov	w0, w1
    2f6c:	lsl	w0, w0, #8
    2f70:	sub	w0, w0, w1
    2f74:	sub	w1, w2, w0
    2f78:	adrp	x0, 0 <grub_swap_bytes16>
    2f7c:	add	x0, x0, #0x0
    2f80:	ldr	x2, [x0]
    2f84:	mov	w0, w1
    2f88:	ldrb	w0, [x2, x0]
    2f8c:	eor	w0, w3, w0
    2f90:	strb	w0, [sp, #140]
    2f94:	ldrb	w0, [sp, #140]
    2f98:	cmp	w0, #0x0
    2f9c:	b.ne	2fb8 <recovery+0x280>  // b.any
    2fa0:	adrp	x0, 0 <grub_swap_bytes16>
    2fa4:	add	x0, x0, #0x0
    2fa8:	ldr	x1, [x0]
    2fac:	mov	w0, #0x9                   	// #9
    2fb0:	bl	0 <grub_error>
    2fb4:	b	3b60 <recovery+0xe28>
    2fb8:	ldrb	w1, [sp, #140]
    2fbc:	adrp	x0, 0 <grub_swap_bytes16>
    2fc0:	add	x0, x0, #0x0
    2fc4:	ldr	x0, [x0]
    2fc8:	sxtw	x1, w1
    2fcc:	ldr	w0, [x0, x1, lsl #2]
    2fd0:	mov	w1, #0xff                  	// #255
    2fd4:	sub	w2, w1, w0
    2fd8:	adrp	x0, 0 <grub_swap_bytes16>
    2fdc:	add	x0, x0, #0x0
    2fe0:	ldr	x1, [x0]
    2fe4:	sxtw	x0, w2
    2fe8:	ldrb	w0, [x1, x0]
    2fec:	strb	w0, [sp, #139]
    2ff0:	ldr	x0, [sp, #48]
    2ff4:	add	x0, x0, #0x4
    2ff8:	ldr	w1, [x0]
    2ffc:	ldr	x0, [sp, #40]
    3000:	add	x0, x0, #0x4
    3004:	ldr	w0, [x0]
    3008:	mul	w2, w1, w0
    300c:	mov	w0, #0x8081                	// #32897
    3010:	movk	w0, #0x8080, lsl #16
    3014:	umull	x0, w2, w0
    3018:	lsr	x0, x0, #32
    301c:	lsr	w1, w0, #7
    3020:	mov	w0, w1
    3024:	lsl	w0, w0, #8
    3028:	sub	w0, w0, w1
    302c:	sub	w1, w2, w0
    3030:	adrp	x0, 0 <grub_swap_bytes16>
    3034:	add	x0, x0, #0x0
    3038:	ldr	x2, [x0]
    303c:	mov	w0, w1
    3040:	ldrb	w0, [x2, x0]
    3044:	ldrb	w1, [sp, #139]
    3048:	bl	2ca8 <gf_mul>
    304c:	and	w0, w0, #0xff
    3050:	strb	w0, [sp, #128]
    3054:	ldr	x0, [sp, #48]
    3058:	ldr	w1, [x0]
    305c:	ldr	x0, [sp, #40]
    3060:	ldr	w0, [x0]
    3064:	mul	w2, w1, w0
    3068:	mov	w0, #0x8081                	// #32897
    306c:	movk	w0, #0x8080, lsl #16
    3070:	umull	x0, w2, w0
    3074:	lsr	x0, x0, #32
    3078:	lsr	w1, w0, #7
    307c:	mov	w0, w1
    3080:	lsl	w0, w0, #8
    3084:	sub	w0, w0, w1
    3088:	sub	w1, w2, w0
    308c:	adrp	x0, 0 <grub_swap_bytes16>
    3090:	add	x0, x0, #0x0
    3094:	ldr	x2, [x0]
    3098:	mov	w0, w1
    309c:	ldrb	w0, [x2, x0]
    30a0:	ldrb	w1, [sp, #139]
    30a4:	bl	2ca8 <gf_mul>
    30a8:	and	w0, w0, #0xff
    30ac:	strb	w0, [sp, #131]
    30b0:	ldr	x0, [sp, #48]
    30b4:	ldr	w1, [x0]
    30b8:	ldr	x0, [sp, #40]
    30bc:	add	x0, x0, #0x4
    30c0:	ldr	w0, [x0]
    30c4:	mul	w2, w1, w0
    30c8:	mov	w0, #0x8081                	// #32897
    30cc:	movk	w0, #0x8080, lsl #16
    30d0:	umull	x0, w2, w0
    30d4:	lsr	x0, x0, #32
    30d8:	lsr	w1, w0, #7
    30dc:	mov	w0, w1
    30e0:	lsl	w0, w0, #8
    30e4:	sub	w0, w0, w1
    30e8:	sub	w1, w2, w0
    30ec:	adrp	x0, 0 <grub_swap_bytes16>
    30f0:	add	x0, x0, #0x0
    30f4:	ldr	x2, [x0]
    30f8:	mov	w0, w1
    30fc:	ldrb	w0, [x2, x0]
    3100:	ldrb	w1, [sp, #139]
    3104:	bl	2ca8 <gf_mul>
    3108:	and	w0, w0, #0xff
    310c:	strb	w0, [sp, #129]
    3110:	ldr	x0, [sp, #48]
    3114:	add	x0, x0, #0x4
    3118:	ldr	w1, [x0]
    311c:	ldr	x0, [sp, #40]
    3120:	ldr	w0, [x0]
    3124:	mul	w2, w1, w0
    3128:	mov	w0, #0x8081                	// #32897
    312c:	movk	w0, #0x8080, lsl #16
    3130:	umull	x0, w2, w0
    3134:	lsr	x0, x0, #32
    3138:	lsr	w1, w0, #7
    313c:	mov	w0, w1
    3140:	lsl	w0, w0, #8
    3144:	sub	w0, w0, w1
    3148:	sub	w1, w2, w0
    314c:	adrp	x0, 0 <grub_swap_bytes16>
    3150:	add	x0, x0, #0x0
    3154:	ldr	x2, [x0]
    3158:	mov	w0, w1
    315c:	ldrb	w0, [x2, x0]
    3160:	ldrb	w1, [sp, #139]
    3164:	bl	2ca8 <gf_mul>
    3168:	and	w0, w0, #0xff
    316c:	strb	w0, [sp, #130]
    3170:	str	wzr, [sp, #164]
    3174:	b	3244 <recovery+0x50c>
    3178:	ldr	x0, [sp, #72]
    317c:	ldr	x1, [x0]
    3180:	ldr	w0, [sp, #164]
    3184:	add	x0, x1, x0
    3188:	ldrb	w0, [x0]
    318c:	strb	w0, [sp, #138]
    3190:	ldr	x0, [sp, #72]
    3194:	add	x0, x0, #0x8
    3198:	ldr	x1, [x0]
    319c:	ldr	w0, [sp, #164]
    31a0:	add	x0, x1, x0
    31a4:	ldrb	w0, [x0]
    31a8:	strb	w0, [sp, #137]
    31ac:	ldrb	w0, [sp, #128]
    31b0:	mov	w1, w0
    31b4:	ldrb	w0, [sp, #138]
    31b8:	bl	2ca8 <gf_mul>
    31bc:	and	w19, w0, #0xff
    31c0:	ldrb	w0, [sp, #129]
    31c4:	mov	w1, w0
    31c8:	ldrb	w0, [sp, #137]
    31cc:	bl	2ca8 <gf_mul>
    31d0:	and	w1, w0, #0xff
    31d4:	ldr	x0, [sp, #72]
    31d8:	ldr	x2, [x0]
    31dc:	ldr	w0, [sp, #164]
    31e0:	add	x0, x2, x0
    31e4:	eor	w1, w19, w1
    31e8:	and	w1, w1, #0xff
    31ec:	strb	w1, [x0]
    31f0:	ldrb	w0, [sp, #130]
    31f4:	mov	w1, w0
    31f8:	ldrb	w0, [sp, #138]
    31fc:	bl	2ca8 <gf_mul>
    3200:	and	w19, w0, #0xff
    3204:	ldrb	w0, [sp, #131]
    3208:	mov	w1, w0
    320c:	ldrb	w0, [sp, #137]
    3210:	bl	2ca8 <gf_mul>
    3214:	and	w1, w0, #0xff
    3218:	ldr	x0, [sp, #72]
    321c:	add	x0, x0, #0x8
    3220:	ldr	x2, [x0]
    3224:	ldr	w0, [sp, #164]
    3228:	add	x0, x2, x0
    322c:	eor	w1, w19, w1
    3230:	and	w1, w1, #0xff
    3234:	strb	w1, [x0]
    3238:	ldr	w0, [sp, #164]
    323c:	add	w0, w0, #0x1
    3240:	str	w0, [sp, #164]
    3244:	ldr	w0, [sp, #164]
    3248:	ldr	x1, [sp, #64]
    324c:	cmp	x1, x0
    3250:	b.hi	3178 <recovery+0x440>  // b.pmore
    3254:	mov	w0, #0x0                   	// #0
    3258:	b	3b60 <recovery+0xe28>
    325c:	str	wzr, [sp, #160]
    3260:	b	3318 <recovery+0x5e0>
    3264:	str	wzr, [sp, #156]
    3268:	b	32fc <recovery+0x5c4>
    326c:	ldrsw	x0, [sp, #160]
    3270:	lsl	x0, x0, #2
    3274:	ldr	x1, [sp, #48]
    3278:	add	x0, x1, x0
    327c:	ldr	w1, [x0]
    3280:	ldrsw	x0, [sp, #156]
    3284:	lsl	x0, x0, #2
    3288:	ldr	x2, [sp, #40]
    328c:	add	x0, x2, x0
    3290:	ldr	w0, [x0]
    3294:	mul	w2, w1, w0
    3298:	mov	w0, #0x8081                	// #32897
    329c:	movk	w0, #0x8080, lsl #16
    32a0:	umull	x0, w2, w0
    32a4:	lsr	x0, x0, #32
    32a8:	lsr	w1, w0, #7
    32ac:	mov	w0, w1
    32b0:	lsl	w0, w0, #8
    32b4:	sub	w0, w0, w1
    32b8:	sub	w1, w2, w0
    32bc:	adrp	x0, 0 <grub_swap_bytes16>
    32c0:	add	x0, x0, #0x0
    32c4:	ldr	x2, [x0]
    32c8:	mov	w0, w1
    32cc:	ldrb	w2, [x2, x0]
    32d0:	ldrsw	x0, [sp, #156]
    32d4:	ldrsw	x1, [sp, #160]
    32d8:	lsl	x1, x1, #2
    32dc:	add	x3, sp, #0xb0
    32e0:	add	x1, x3, x1
    32e4:	add	x0, x1, x0
    32e8:	mov	w1, w2
    32ec:	sturb	w1, [x0, #-64]
    32f0:	ldr	w0, [sp, #156]
    32f4:	add	w0, w0, #0x1
    32f8:	str	w0, [sp, #156]
    32fc:	ldr	w1, [sp, #156]
    3300:	ldr	w0, [sp, #60]
    3304:	cmp	w1, w0
    3308:	b.lt	326c <recovery+0x534>  // b.tstop
    330c:	ldr	w0, [sp, #160]
    3310:	add	w0, w0, #0x1
    3314:	str	w0, [sp, #160]
    3318:	ldr	w1, [sp, #160]
    331c:	ldr	w0, [sp, #60]
    3320:	cmp	w1, w0
    3324:	b.lt	3264 <recovery+0x52c>  // b.tstop
    3328:	str	wzr, [sp, #160]
    332c:	b	337c <recovery+0x644>
    3330:	str	wzr, [sp, #156]
    3334:	b	3360 <recovery+0x628>
    3338:	ldrsw	x0, [sp, #156]
    333c:	ldrsw	x1, [sp, #160]
    3340:	lsl	x1, x1, #2
    3344:	add	x2, sp, #0xb0
    3348:	add	x1, x2, x1
    334c:	add	x0, x1, x0
    3350:	sturb	wzr, [x0, #-80]
    3354:	ldr	w0, [sp, #156]
    3358:	add	w0, w0, #0x1
    335c:	str	w0, [sp, #156]
    3360:	ldr	w1, [sp, #156]
    3364:	ldr	w0, [sp, #60]
    3368:	cmp	w1, w0
    336c:	b.lt	3338 <recovery+0x600>  // b.tstop
    3370:	ldr	w0, [sp, #160]
    3374:	add	w0, w0, #0x1
    3378:	str	w0, [sp, #160]
    337c:	ldr	w1, [sp, #160]
    3380:	ldr	w0, [sp, #60]
    3384:	cmp	w1, w0
    3388:	b.lt	3330 <recovery+0x5f8>  // b.tstop
    338c:	str	wzr, [sp, #160]
    3390:	b	33bc <recovery+0x684>
    3394:	ldrsw	x1, [sp, #160]
    3398:	mov	x0, x1
    339c:	lsl	x0, x0, #2
    33a0:	add	x0, x0, x1
    33a4:	add	x1, sp, #0x60
    33a8:	mov	w2, #0x1                   	// #1
    33ac:	strb	w2, [x1, x0]
    33b0:	ldr	w0, [sp, #160]
    33b4:	add	w0, w0, #0x1
    33b8:	str	w0, [sp, #160]
    33bc:	ldr	w1, [sp, #160]
    33c0:	ldr	w0, [sp, #60]
    33c4:	cmp	w1, w0
    33c8:	b.lt	3394 <recovery+0x65c>  // b.tstop
    33cc:	str	wzr, [sp, #160]
    33d0:	b	3848 <recovery+0xb10>
    33d4:	ldr	w0, [sp, #160]
    33d8:	str	w0, [sp, #156]
    33dc:	b	3410 <recovery+0x6d8>
    33e0:	ldrsw	x0, [sp, #156]
    33e4:	ldrsw	x1, [sp, #160]
    33e8:	lsl	x1, x1, #2
    33ec:	add	x2, sp, #0xb0
    33f0:	add	x1, x2, x1
    33f4:	add	x0, x1, x0
    33f8:	ldurb	w0, [x0, #-64]
    33fc:	cmp	w0, #0x0
    3400:	b.ne	3424 <recovery+0x6ec>  // b.any
    3404:	ldr	w0, [sp, #156]
    3408:	add	w0, w0, #0x1
    340c:	str	w0, [sp, #156]
    3410:	ldr	w1, [sp, #156]
    3414:	ldr	w0, [sp, #60]
    3418:	cmp	w1, w0
    341c:	b.lt	33e0 <recovery+0x6a8>  // b.tstop
    3420:	b	3428 <recovery+0x6f0>
    3424:	nop
    3428:	ldr	w1, [sp, #156]
    342c:	ldr	w0, [sp, #60]
    3430:	cmp	w1, w0
    3434:	b.ne	3450 <recovery+0x718>  // b.any
    3438:	adrp	x0, 0 <grub_swap_bytes16>
    343c:	add	x0, x0, #0x0
    3440:	ldr	x1, [x0]
    3444:	mov	w0, #0x9                   	// #9
    3448:	bl	0 <grub_error>
    344c:	b	3b60 <recovery+0xe28>
    3450:	ldr	w1, [sp, #156]
    3454:	ldr	w0, [sp, #160]
    3458:	cmp	w1, w0
    345c:	b.eq	35a8 <recovery+0x870>  // b.none
    3460:	ldr	w0, [sp, #156]
    3464:	str	w0, [sp, #144]
    3468:	str	wzr, [sp, #156]
    346c:	b	34f8 <recovery+0x7c0>
    3470:	ldrsw	x0, [sp, #156]
    3474:	ldrsw	x1, [sp, #144]
    3478:	lsl	x1, x1, #2
    347c:	add	x2, sp, #0xb0
    3480:	add	x1, x2, x1
    3484:	add	x0, x1, x0
    3488:	ldurb	w0, [x0, #-64]
    348c:	strb	w0, [sp, #142]
    3490:	ldrsw	x0, [sp, #156]
    3494:	ldrsw	x1, [sp, #160]
    3498:	lsl	x1, x1, #2
    349c:	add	x2, sp, #0xb0
    34a0:	add	x1, x2, x1
    34a4:	add	x0, x1, x0
    34a8:	ldurb	w2, [x0, #-64]
    34ac:	ldrsw	x0, [sp, #156]
    34b0:	ldrsw	x1, [sp, #144]
    34b4:	lsl	x1, x1, #2
    34b8:	add	x3, sp, #0xb0
    34bc:	add	x1, x3, x1
    34c0:	add	x0, x1, x0
    34c4:	mov	w1, w2
    34c8:	sturb	w1, [x0, #-64]
    34cc:	ldrsw	x0, [sp, #156]
    34d0:	ldrsw	x1, [sp, #160]
    34d4:	lsl	x1, x1, #2
    34d8:	add	x2, sp, #0xb0
    34dc:	add	x1, x2, x1
    34e0:	add	x0, x1, x0
    34e4:	ldrb	w1, [sp, #142]
    34e8:	sturb	w1, [x0, #-64]
    34ec:	ldr	w0, [sp, #156]
    34f0:	add	w0, w0, #0x1
    34f4:	str	w0, [sp, #156]
    34f8:	ldr	w1, [sp, #156]
    34fc:	ldr	w0, [sp, #60]
    3500:	cmp	w1, w0
    3504:	b.lt	3470 <recovery+0x738>  // b.tstop
    3508:	str	wzr, [sp, #156]
    350c:	b	3598 <recovery+0x860>
    3510:	ldrsw	x0, [sp, #156]
    3514:	ldrsw	x1, [sp, #144]
    3518:	lsl	x1, x1, #2
    351c:	add	x2, sp, #0xb0
    3520:	add	x1, x2, x1
    3524:	add	x0, x1, x0
    3528:	ldurb	w0, [x0, #-80]
    352c:	strb	w0, [sp, #143]
    3530:	ldrsw	x0, [sp, #156]
    3534:	ldrsw	x1, [sp, #160]
    3538:	lsl	x1, x1, #2
    353c:	add	x2, sp, #0xb0
    3540:	add	x1, x2, x1
    3544:	add	x0, x1, x0
    3548:	ldurb	w2, [x0, #-80]
    354c:	ldrsw	x0, [sp, #156]
    3550:	ldrsw	x1, [sp, #144]
    3554:	lsl	x1, x1, #2
    3558:	add	x3, sp, #0xb0
    355c:	add	x1, x3, x1
    3560:	add	x0, x1, x0
    3564:	mov	w1, w2
    3568:	sturb	w1, [x0, #-80]
    356c:	ldrsw	x0, [sp, #156]
    3570:	ldrsw	x1, [sp, #160]
    3574:	lsl	x1, x1, #2
    3578:	add	x2, sp, #0xb0
    357c:	add	x1, x2, x1
    3580:	add	x0, x1, x0
    3584:	ldrb	w1, [sp, #143]
    3588:	sturb	w1, [x0, #-80]
    358c:	ldr	w0, [sp, #156]
    3590:	add	w0, w0, #0x1
    3594:	str	w0, [sp, #156]
    3598:	ldr	w1, [sp, #156]
    359c:	ldr	w0, [sp, #60]
    35a0:	cmp	w1, w0
    35a4:	b.lt	3510 <recovery+0x7d8>  // b.tstop
    35a8:	ldrsw	x1, [sp, #160]
    35ac:	mov	x0, x1
    35b0:	lsl	x0, x0, #2
    35b4:	add	x0, x0, x1
    35b8:	add	x1, sp, #0x70
    35bc:	ldrb	w0, [x1, x0]
    35c0:	mov	w1, w0
    35c4:	adrp	x0, 0 <grub_swap_bytes16>
    35c8:	add	x0, x0, #0x0
    35cc:	ldr	x0, [x0]
    35d0:	sxtw	x1, w1
    35d4:	ldr	w0, [x0, x1, lsl #2]
    35d8:	mov	w1, #0xff                  	// #255
    35dc:	sub	w2, w1, w0
    35e0:	adrp	x0, 0 <grub_swap_bytes16>
    35e4:	add	x0, x0, #0x0
    35e8:	ldr	x1, [x0]
    35ec:	sxtw	x0, w2
    35f0:	ldrb	w0, [x1, x0]
    35f4:	strb	w0, [sp, #141]
    35f8:	str	wzr, [sp, #156]
    35fc:	b	3654 <recovery+0x91c>
    3600:	ldrsw	x0, [sp, #156]
    3604:	ldrsw	x1, [sp, #160]
    3608:	lsl	x1, x1, #2
    360c:	add	x2, sp, #0xb0
    3610:	add	x1, x2, x1
    3614:	add	x0, x1, x0
    3618:	ldurb	w0, [x0, #-64]
    361c:	ldrb	w1, [sp, #141]
    3620:	bl	2ca8 <gf_mul>
    3624:	and	w2, w0, #0xff
    3628:	ldrsw	x0, [sp, #156]
    362c:	ldrsw	x1, [sp, #160]
    3630:	lsl	x1, x1, #2
    3634:	add	x3, sp, #0xb0
    3638:	add	x1, x3, x1
    363c:	add	x0, x1, x0
    3640:	mov	w1, w2
    3644:	sturb	w1, [x0, #-64]
    3648:	ldr	w0, [sp, #156]
    364c:	add	w0, w0, #0x1
    3650:	str	w0, [sp, #156]
    3654:	ldr	w1, [sp, #156]
    3658:	ldr	w0, [sp, #60]
    365c:	cmp	w1, w0
    3660:	b.lt	3600 <recovery+0x8c8>  // b.tstop
    3664:	str	wzr, [sp, #156]
    3668:	b	36c0 <recovery+0x988>
    366c:	ldrsw	x0, [sp, #156]
    3670:	ldrsw	x1, [sp, #160]
    3674:	lsl	x1, x1, #2
    3678:	add	x2, sp, #0xb0
    367c:	add	x1, x2, x1
    3680:	add	x0, x1, x0
    3684:	ldurb	w0, [x0, #-80]
    3688:	ldrb	w1, [sp, #141]
    368c:	bl	2ca8 <gf_mul>
    3690:	and	w2, w0, #0xff
    3694:	ldrsw	x0, [sp, #156]
    3698:	ldrsw	x1, [sp, #160]
    369c:	lsl	x1, x1, #2
    36a0:	add	x3, sp, #0xb0
    36a4:	add	x1, x3, x1
    36a8:	add	x0, x1, x0
    36ac:	mov	w1, w2
    36b0:	sturb	w1, [x0, #-80]
    36b4:	ldr	w0, [sp, #156]
    36b8:	add	w0, w0, #0x1
    36bc:	str	w0, [sp, #156]
    36c0:	ldr	w1, [sp, #156]
    36c4:	ldr	w0, [sp, #60]
    36c8:	cmp	w1, w0
    36cc:	b.lt	366c <recovery+0x934>  // b.tstop
    36d0:	ldr	w0, [sp, #160]
    36d4:	add	w0, w0, #0x1
    36d8:	str	w0, [sp, #156]
    36dc:	b	382c <recovery+0xaf4>
    36e0:	ldrsw	x0, [sp, #160]
    36e4:	ldrsw	x1, [sp, #156]
    36e8:	lsl	x1, x1, #2
    36ec:	add	x2, sp, #0xb0
    36f0:	add	x1, x2, x1
    36f4:	add	x0, x1, x0
    36f8:	ldurb	w0, [x0, #-64]
    36fc:	strb	w0, [sp, #141]
    3700:	str	wzr, [sp, #152]
    3704:	b	3780 <recovery+0xa48>
    3708:	ldrsw	x0, [sp, #152]
    370c:	ldrsw	x1, [sp, #160]
    3710:	lsl	x1, x1, #2
    3714:	add	x2, sp, #0xb0
    3718:	add	x1, x2, x1
    371c:	add	x0, x1, x0
    3720:	ldurb	w0, [x0, #-64]
    3724:	ldrb	w1, [sp, #141]
    3728:	bl	2ca8 <gf_mul>
    372c:	and	w1, w0, #0xff
    3730:	ldrsw	x0, [sp, #152]
    3734:	ldrsw	x2, [sp, #156]
    3738:	lsl	x2, x2, #2
    373c:	add	x3, sp, #0xb0
    3740:	add	x2, x3, x2
    3744:	add	x0, x2, x0
    3748:	ldurb	w0, [x0, #-64]
    374c:	eor	w0, w1, w0
    3750:	and	w2, w0, #0xff
    3754:	ldrsw	x0, [sp, #152]
    3758:	ldrsw	x1, [sp, #156]
    375c:	lsl	x1, x1, #2
    3760:	add	x3, sp, #0xb0
    3764:	add	x1, x3, x1
    3768:	add	x0, x1, x0
    376c:	mov	w1, w2
    3770:	sturb	w1, [x0, #-64]
    3774:	ldr	w0, [sp, #152]
    3778:	add	w0, w0, #0x1
    377c:	str	w0, [sp, #152]
    3780:	ldr	w1, [sp, #152]
    3784:	ldr	w0, [sp, #60]
    3788:	cmp	w1, w0
    378c:	b.lt	3708 <recovery+0x9d0>  // b.tstop
    3790:	str	wzr, [sp, #152]
    3794:	b	3810 <recovery+0xad8>
    3798:	ldrsw	x0, [sp, #152]
    379c:	ldrsw	x1, [sp, #160]
    37a0:	lsl	x1, x1, #2
    37a4:	add	x2, sp, #0xb0
    37a8:	add	x1, x2, x1
    37ac:	add	x0, x1, x0
    37b0:	ldurb	w0, [x0, #-80]
    37b4:	ldrb	w1, [sp, #141]
    37b8:	bl	2ca8 <gf_mul>
    37bc:	and	w1, w0, #0xff
    37c0:	ldrsw	x0, [sp, #152]
    37c4:	ldrsw	x2, [sp, #156]
    37c8:	lsl	x2, x2, #2
    37cc:	add	x3, sp, #0xb0
    37d0:	add	x2, x3, x2
    37d4:	add	x0, x2, x0
    37d8:	ldurb	w0, [x0, #-80]
    37dc:	eor	w0, w1, w0
    37e0:	and	w2, w0, #0xff
    37e4:	ldrsw	x0, [sp, #152]
    37e8:	ldrsw	x1, [sp, #156]
    37ec:	lsl	x1, x1, #2
    37f0:	add	x3, sp, #0xb0
    37f4:	add	x1, x3, x1
    37f8:	add	x0, x1, x0
    37fc:	mov	w1, w2
    3800:	sturb	w1, [x0, #-80]
    3804:	ldr	w0, [sp, #152]
    3808:	add	w0, w0, #0x1
    380c:	str	w0, [sp, #152]
    3810:	ldr	w1, [sp, #152]
    3814:	ldr	w0, [sp, #60]
    3818:	cmp	w1, w0
    381c:	b.lt	3798 <recovery+0xa60>  // b.tstop
    3820:	ldr	w0, [sp, #156]
    3824:	add	w0, w0, #0x1
    3828:	str	w0, [sp, #156]
    382c:	ldr	w1, [sp, #156]
    3830:	ldr	w0, [sp, #60]
    3834:	cmp	w1, w0
    3838:	b.lt	36e0 <recovery+0x9a8>  // b.tstop
    383c:	ldr	w0, [sp, #160]
    3840:	add	w0, w0, #0x1
    3844:	str	w0, [sp, #160]
    3848:	ldr	w1, [sp, #160]
    384c:	ldr	w0, [sp, #60]
    3850:	cmp	w1, w0
    3854:	b.lt	33d4 <recovery+0x69c>  // b.tstop
    3858:	ldr	w0, [sp, #60]
    385c:	sub	w0, w0, #0x1
    3860:	str	w0, [sp, #160]
    3864:	b	39d8 <recovery+0xca0>
    3868:	str	wzr, [sp, #156]
    386c:	b	39bc <recovery+0xc84>
    3870:	ldrsw	x0, [sp, #160]
    3874:	ldrsw	x1, [sp, #156]
    3878:	lsl	x1, x1, #2
    387c:	add	x2, sp, #0xb0
    3880:	add	x1, x2, x1
    3884:	add	x0, x1, x0
    3888:	ldurb	w0, [x0, #-64]
    388c:	strb	w0, [sp, #151]
    3890:	str	wzr, [sp, #152]
    3894:	b	3910 <recovery+0xbd8>
    3898:	ldrsw	x0, [sp, #152]
    389c:	ldrsw	x1, [sp, #160]
    38a0:	lsl	x1, x1, #2
    38a4:	add	x2, sp, #0xb0
    38a8:	add	x1, x2, x1
    38ac:	add	x0, x1, x0
    38b0:	ldurb	w0, [x0, #-64]
    38b4:	ldrb	w1, [sp, #151]
    38b8:	bl	2ca8 <gf_mul>
    38bc:	and	w1, w0, #0xff
    38c0:	ldrsw	x0, [sp, #152]
    38c4:	ldrsw	x2, [sp, #156]
    38c8:	lsl	x2, x2, #2
    38cc:	add	x3, sp, #0xb0
    38d0:	add	x2, x3, x2
    38d4:	add	x0, x2, x0
    38d8:	ldurb	w0, [x0, #-64]
    38dc:	eor	w0, w1, w0
    38e0:	and	w2, w0, #0xff
    38e4:	ldrsw	x0, [sp, #152]
    38e8:	ldrsw	x1, [sp, #156]
    38ec:	lsl	x1, x1, #2
    38f0:	add	x3, sp, #0xb0
    38f4:	add	x1, x3, x1
    38f8:	add	x0, x1, x0
    38fc:	mov	w1, w2
    3900:	sturb	w1, [x0, #-64]
    3904:	ldr	w0, [sp, #152]
    3908:	add	w0, w0, #0x1
    390c:	str	w0, [sp, #152]
    3910:	ldr	w1, [sp, #152]
    3914:	ldr	w0, [sp, #60]
    3918:	cmp	w1, w0
    391c:	b.lt	3898 <recovery+0xb60>  // b.tstop
    3920:	str	wzr, [sp, #152]
    3924:	b	39a0 <recovery+0xc68>
    3928:	ldrsw	x0, [sp, #152]
    392c:	ldrsw	x1, [sp, #160]
    3930:	lsl	x1, x1, #2
    3934:	add	x2, sp, #0xb0
    3938:	add	x1, x2, x1
    393c:	add	x0, x1, x0
    3940:	ldurb	w0, [x0, #-80]
    3944:	ldrb	w1, [sp, #151]
    3948:	bl	2ca8 <gf_mul>
    394c:	and	w1, w0, #0xff
    3950:	ldrsw	x0, [sp, #152]
    3954:	ldrsw	x2, [sp, #156]
    3958:	lsl	x2, x2, #2
    395c:	add	x3, sp, #0xb0
    3960:	add	x2, x3, x2
    3964:	add	x0, x2, x0
    3968:	ldurb	w0, [x0, #-80]
    396c:	eor	w0, w1, w0
    3970:	and	w2, w0, #0xff
    3974:	ldrsw	x0, [sp, #152]
    3978:	ldrsw	x1, [sp, #156]
    397c:	lsl	x1, x1, #2
    3980:	add	x3, sp, #0xb0
    3984:	add	x1, x3, x1
    3988:	add	x0, x1, x0
    398c:	mov	w1, w2
    3990:	sturb	w1, [x0, #-80]
    3994:	ldr	w0, [sp, #152]
    3998:	add	w0, w0, #0x1
    399c:	str	w0, [sp, #152]
    39a0:	ldr	w1, [sp, #152]
    39a4:	ldr	w0, [sp, #60]
    39a8:	cmp	w1, w0
    39ac:	b.lt	3928 <recovery+0xbf0>  // b.tstop
    39b0:	ldr	w0, [sp, #156]
    39b4:	add	w0, w0, #0x1
    39b8:	str	w0, [sp, #156]
    39bc:	ldr	w1, [sp, #156]
    39c0:	ldr	w0, [sp, #160]
    39c4:	cmp	w1, w0
    39c8:	b.lt	3870 <recovery+0xb38>  // b.tstop
    39cc:	ldr	w0, [sp, #160]
    39d0:	sub	w0, w0, #0x1
    39d4:	str	w0, [sp, #160]
    39d8:	ldr	w0, [sp, #160]
    39dc:	cmp	w0, #0x0
    39e0:	b.ge	3868 <recovery+0xb30>  // b.tcont
    39e4:	str	wzr, [sp, #160]
    39e8:	b	3b30 <recovery+0xdf8>
    39ec:	str	wzr, [sp, #156]
    39f0:	b	3a2c <recovery+0xcf4>
    39f4:	ldrsw	x0, [sp, #156]
    39f8:	lsl	x0, x0, #3
    39fc:	ldr	x1, [sp, #72]
    3a00:	add	x0, x1, x0
    3a04:	ldr	x1, [x0]
    3a08:	ldrsw	x0, [sp, #160]
    3a0c:	add	x0, x1, x0
    3a10:	ldrb	w2, [x0]
    3a14:	ldrsw	x0, [sp, #156]
    3a18:	add	x1, sp, #0x58
    3a1c:	strb	w2, [x1, x0]
    3a20:	ldr	w0, [sp, #156]
    3a24:	add	w0, w0, #0x1
    3a28:	str	w0, [sp, #156]
    3a2c:	ldr	w1, [sp, #156]
    3a30:	ldr	w0, [sp, #60]
    3a34:	cmp	w1, w0
    3a38:	b.lt	39f4 <recovery+0xcbc>  // b.tstop
    3a3c:	str	wzr, [sp, #156]
    3a40:	b	3b14 <recovery+0xddc>
    3a44:	ldrsw	x0, [sp, #156]
    3a48:	lsl	x0, x0, #3
    3a4c:	ldr	x1, [sp, #72]
    3a50:	add	x0, x1, x0
    3a54:	ldr	x1, [x0]
    3a58:	ldrsw	x0, [sp, #160]
    3a5c:	add	x0, x1, x0
    3a60:	strb	wzr, [x0]
    3a64:	str	wzr, [sp, #152]
    3a68:	b	3af8 <recovery+0xdc0>
    3a6c:	ldrsw	x0, [sp, #152]
    3a70:	ldrsw	x1, [sp, #156]
    3a74:	lsl	x1, x1, #2
    3a78:	add	x2, sp, #0xb0
    3a7c:	add	x1, x2, x1
    3a80:	add	x0, x1, x0
    3a84:	ldurb	w2, [x0, #-80]
    3a88:	ldrsw	x0, [sp, #152]
    3a8c:	add	x1, sp, #0x58
    3a90:	ldrb	w0, [x1, x0]
    3a94:	mov	w1, w0
    3a98:	mov	w0, w2
    3a9c:	bl	2ca8 <gf_mul>
    3aa0:	and	w2, w0, #0xff
    3aa4:	ldrsw	x0, [sp, #156]
    3aa8:	lsl	x0, x0, #3
    3aac:	ldr	x1, [sp, #72]
    3ab0:	add	x0, x1, x0
    3ab4:	ldr	x1, [x0]
    3ab8:	ldrsw	x0, [sp, #160]
    3abc:	add	x0, x1, x0
    3ac0:	ldrb	w1, [x0]
    3ac4:	ldrsw	x0, [sp, #156]
    3ac8:	lsl	x0, x0, #3
    3acc:	ldr	x3, [sp, #72]
    3ad0:	add	x0, x3, x0
    3ad4:	ldr	x3, [x0]
    3ad8:	ldrsw	x0, [sp, #160]
    3adc:	add	x0, x3, x0
    3ae0:	eor	w1, w2, w1
    3ae4:	and	w1, w1, #0xff
    3ae8:	strb	w1, [x0]
    3aec:	ldr	w0, [sp, #152]
    3af0:	add	w0, w0, #0x1
    3af4:	str	w0, [sp, #152]
    3af8:	ldr	w1, [sp, #152]
    3afc:	ldr	w0, [sp, #60]
    3b00:	cmp	w1, w0
    3b04:	b.lt	3a6c <recovery+0xd34>  // b.tstop
    3b08:	ldr	w0, [sp, #156]
    3b0c:	add	w0, w0, #0x1
    3b10:	str	w0, [sp, #156]
    3b14:	ldr	w1, [sp, #156]
    3b18:	ldr	w0, [sp, #60]
    3b1c:	cmp	w1, w0
    3b20:	b.lt	3a44 <recovery+0xd0c>  // b.tstop
    3b24:	ldr	w0, [sp, #160]
    3b28:	add	w0, w0, #0x1
    3b2c:	str	w0, [sp, #160]
    3b30:	ldr	x0, [sp, #64]
    3b34:	mov	w1, w0
    3b38:	ldr	w0, [sp, #160]
    3b3c:	cmp	w0, w1
    3b40:	b.lt	39ec <recovery+0xcb4>  // b.tstop
    3b44:	mov	w0, #0x0                   	// #0
    3b48:	b	3b60 <recovery+0xe28>
    3b4c:	adrp	x0, 0 <grub_swap_bytes16>
    3b50:	add	x0, x0, #0x0
    3b54:	ldr	x1, [x0]
    3b58:	mov	w0, #0x26                  	// #38
    3b5c:	bl	0 <grub_error>
    3b60:	ldr	x19, [sp, #16]
    3b64:	ldp	x29, x30, [sp], #176
    3b68:	ret
    3b6c:	nop
	...

0000000000003ba8 <read_device>:
    3ba8:	sub	sp, sp, #0x150
    3bac:	stp	x29, x30, [sp, #16]
    3bb0:	add	x29, sp, #0x10
    3bb4:	str	x0, [sp, #56]
    3bb8:	str	x1, [sp, #48]
    3bbc:	str	x2, [sp, #40]
    3bc0:	str	x3, [sp, #32]
    3bc4:	ldr	x0, [sp, #48]
    3bc8:	ldr	w0, [x0]
    3bcc:	cmp	w0, #0x2
    3bd0:	b.eq	3d14 <read_device+0x16c>  // b.none
    3bd4:	cmp	w0, #0x2
    3bd8:	b.hi	4700 <read_device+0xb58>  // b.pmore
    3bdc:	cmp	w0, #0x0
    3be0:	b.eq	3bf0 <read_device+0x48>  // b.none
    3be4:	cmp	w0, #0x1
    3be8:	b.eq	3c48 <read_device+0xa0>  // b.none
    3bec:	b	4700 <read_device+0xb58>
    3bf0:	ldr	x0, [sp, #56]
    3bf4:	bl	3ec <DVA_OFFSET_TO_PHYS_SECTOR>
    3bf8:	str	x0, [sp, #216]
    3bfc:	ldr	x0, [sp, #48]
    3c00:	ldr	x0, [x0, #56]
    3c04:	cmp	x0, #0x0
    3c08:	b.ne	3c24 <read_device+0x7c>  // b.any
    3c0c:	adrp	x0, 0 <grub_swap_bytes16>
    3c10:	add	x0, x0, #0x0
    3c14:	ldr	x1, [x0]
    3c18:	mov	w0, #0x9                   	// #9
    3c1c:	bl	0 <grub_error>
    3c20:	b	4714 <read_device+0xb6c>
    3c24:	ldr	x0, [sp, #48]
    3c28:	ldr	x0, [x0, #56]
    3c2c:	ldr	x0, [x0]
    3c30:	ldr	x4, [sp, #32]
    3c34:	ldr	x3, [sp, #40]
    3c38:	mov	x2, #0x0                   	// #0
    3c3c:	ldr	x1, [sp, #216]
    3c40:	bl	0 <grub_disk_read>
    3c44:	b	4714 <read_device+0xb6c>
    3c48:	str	wzr, [sp, #332]
    3c4c:	ldr	x0, [sp, #48]
    3c50:	ldr	w0, [x0, #32]
    3c54:	cmp	w0, #0x0
    3c58:	b.ne	3c74 <read_device+0xcc>  // b.any
    3c5c:	adrp	x0, 0 <grub_swap_bytes16>
    3c60:	add	x0, x0, #0x0
    3c64:	ldr	x1, [x0]
    3c68:	mov	w0, #0x9                   	// #9
    3c6c:	bl	0 <grub_error>
    3c70:	b	4714 <read_device+0xb6c>
    3c74:	str	wzr, [sp, #328]
    3c78:	b	3cdc <read_device+0x134>
    3c7c:	ldr	x0, [sp, #48]
    3c80:	ldr	x2, [x0, #40]
    3c84:	ldr	w1, [sp, #328]
    3c88:	mov	x0, x1
    3c8c:	lsl	x0, x0, #5
    3c90:	sub	x0, x0, x1
    3c94:	lsl	x0, x0, #3
    3c98:	add	x0, x2, x0
    3c9c:	ldr	x3, [sp, #32]
    3ca0:	ldr	x2, [sp, #40]
    3ca4:	mov	x1, x0
    3ca8:	ldr	x0, [sp, #56]
    3cac:	bl	3ba8 <read_device>
    3cb0:	str	w0, [sp, #332]
    3cb4:	ldr	w0, [sp, #332]
    3cb8:	cmp	w0, #0x0
    3cbc:	b.eq	3cf4 <read_device+0x14c>  // b.none
    3cc0:	adrp	x0, 0 <grub_swap_bytes16>
    3cc4:	add	x0, x0, #0x0
    3cc8:	ldr	x0, [x0]
    3ccc:	str	wzr, [x0]
    3cd0:	ldr	w0, [sp, #328]
    3cd4:	add	w0, w0, #0x1
    3cd8:	str	w0, [sp, #328]
    3cdc:	ldr	x0, [sp, #48]
    3ce0:	ldr	w0, [x0, #32]
    3ce4:	ldr	w1, [sp, #328]
    3ce8:	cmp	w1, w0
    3cec:	b.cc	3c7c <read_device+0xd4>  // b.lo, b.ul, b.last
    3cf0:	b	3cf8 <read_device+0x150>
    3cf4:	nop
    3cf8:	adrp	x0, 0 <grub_swap_bytes16>
    3cfc:	add	x0, x0, #0x0
    3d00:	ldr	x0, [x0]
    3d04:	ldr	w1, [sp, #332]
    3d08:	str	w1, [x0]
    3d0c:	ldr	w0, [sp, #332]
    3d10:	b	4714 <read_device+0xb6c>
    3d14:	str	wzr, [sp, #324]
    3d18:	ldr	x0, [sp, #32]
    3d1c:	str	x0, [sp, #264]
    3d20:	ldr	x0, [sp, #40]
    3d24:	str	x0, [sp, #256]
    3d28:	str	wzr, [sp, #316]
    3d2c:	ldr	x0, [sp, #48]
    3d30:	ldr	w0, [x0, #48]
    3d34:	cmp	w0, #0x0
    3d38:	b.eq	3d4c <read_device+0x1a4>  // b.none
    3d3c:	ldr	x0, [sp, #48]
    3d40:	ldr	w0, [x0, #48]
    3d44:	cmp	w0, #0x3
    3d48:	b.ls	3d70 <read_device+0x1c8>  // b.plast
    3d4c:	ldr	x0, [sp, #48]
    3d50:	ldr	w0, [x0, #48]
    3d54:	mov	w2, w0
    3d58:	adrp	x0, 0 <grub_swap_bytes16>
    3d5c:	add	x0, x0, #0x0
    3d60:	ldr	x1, [x0]
    3d64:	mov	w0, #0x18                  	// #24
    3d68:	bl	0 <grub_error>
    3d6c:	b	4714 <read_device+0xb6c>
    3d70:	ldr	x0, [sp, #48]
    3d74:	ldr	w1, [x0, #32]
    3d78:	ldr	x0, [sp, #48]
    3d7c:	ldr	w0, [x0, #48]
    3d80:	cmp	w1, w0
    3d84:	b.ls	3d98 <read_device+0x1f0>  // b.plast
    3d88:	ldr	x0, [sp, #48]
    3d8c:	ldr	w0, [x0, #32]
    3d90:	cmp	w0, #0x0
    3d94:	b.ne	3db0 <read_device+0x208>  // b.any
    3d98:	adrp	x0, 0 <grub_swap_bytes16>
    3d9c:	add	x0, x0, #0x0
    3da0:	ldr	x1, [x0]
    3da4:	mov	w0, #0x9                   	// #9
    3da8:	bl	0 <grub_error>
    3dac:	b	4714 <read_device+0xb6c>
    3db0:	ldr	x0, [sp, #48]
    3db4:	ldr	w0, [x0, #24]
    3db8:	mov	w1, #0x1                   	// #1
    3dbc:	lsl	w0, w1, w0
    3dc0:	sxtw	x1, w0
    3dc4:	ldr	x0, [sp, #40]
    3dc8:	add	x0, x1, x0
    3dcc:	sub	x1, x0, #0x1
    3dd0:	ldr	x0, [sp, #48]
    3dd4:	ldr	w0, [x0, #24]
    3dd8:	lsr	x0, x1, x0
    3ddc:	mov	w2, w0
    3de0:	ldr	x0, [sp, #48]
    3de4:	ldr	w1, [x0, #32]
    3de8:	ldr	x0, [sp, #48]
    3dec:	ldr	w0, [x0, #48]
    3df0:	sub	w0, w1, w0
    3df4:	add	w0, w2, w0
    3df8:	sub	w0, w0, #0x1
    3dfc:	str	w0, [sp, #252]
    3e00:	ldr	w0, [sp, #252]
    3e04:	str	w0, [sp, #320]
    3e08:	ldr	x0, [sp, #48]
    3e0c:	ldr	w0, [x0, #24]
    3e10:	ldr	x1, [sp, #56]
    3e14:	lsr	x3, x1, x0
    3e18:	ldr	x0, [sp, #48]
    3e1c:	ldr	w0, [x0, #32]
    3e20:	mov	w0, w0
    3e24:	add	x1, sp, #0xc8
    3e28:	mov	x2, x1
    3e2c:	mov	x1, x0
    3e30:	mov	x0, x3
    3e34:	bl	0 <grub_divmod64>
    3e38:	str	x0, [sp, #240]
    3e3c:	ldr	x0, [sp, #48]
    3e40:	ldr	w0, [x0, #48]
    3e44:	cmp	w0, #0x2
    3e48:	b.ne	3e54 <read_device+0x2ac>  // b.any
    3e4c:	mov	w0, #0x2                   	// #2
    3e50:	str	w0, [sp, #324]
    3e54:	ldr	x0, [sp, #48]
    3e58:	ldr	w0, [x0, #48]
    3e5c:	cmp	w0, #0x3
    3e60:	b.ne	3e6c <read_device+0x2c4>  // b.any
    3e64:	mov	w0, #0x3                   	// #3
    3e68:	str	w0, [sp, #324]
    3e6c:	ldr	x0, [sp, #48]
    3e70:	ldr	w0, [x0, #24]
    3e74:	mov	w1, #0x1                   	// #1
    3e78:	lsl	w0, w1, w0
    3e7c:	sxtw	x1, w0
    3e80:	ldr	x0, [sp, #40]
    3e84:	add	x0, x1, x0
    3e88:	sub	x1, x0, #0x1
    3e8c:	ldr	x0, [sp, #48]
    3e90:	ldr	w0, [x0, #24]
    3e94:	lsr	x1, x1, x0
    3e98:	ldr	x0, [sp, #48]
    3e9c:	ldr	w2, [x0, #32]
    3ea0:	ldr	x0, [sp, #48]
    3ea4:	ldr	w0, [x0, #48]
    3ea8:	sub	w0, w2, w0
    3eac:	mov	w0, w0
    3eb0:	cmp	x1, x0
    3eb4:	b.cc	3ed8 <read_device+0x330>  // b.lo, b.ul, b.last
    3eb8:	ldr	x0, [sp, #48]
    3ebc:	ldr	w1, [x0, #32]
    3ec0:	ldr	x0, [sp, #48]
    3ec4:	ldr	w0, [x0, #48]
    3ec8:	sub	w0, w1, w0
    3ecc:	sub	w0, w0, #0x1
    3ed0:	str	w0, [sp, #312]
    3ed4:	b	3f0c <read_device+0x364>
    3ed8:	ldr	x0, [sp, #48]
    3edc:	ldr	w0, [x0, #24]
    3ee0:	mov	w1, #0x1                   	// #1
    3ee4:	lsl	w0, w1, w0
    3ee8:	sxtw	x1, w0
    3eec:	ldr	x0, [sp, #40]
    3ef0:	add	x0, x1, x0
    3ef4:	sub	x1, x0, #0x1
    3ef8:	ldr	x0, [sp, #48]
    3efc:	ldr	w0, [x0, #24]
    3f00:	lsr	x0, x1, x0
    3f04:	sub	w0, w0, #0x1
    3f08:	str	w0, [sp, #312]
    3f0c:	ldr	w0, [sp, #312]
    3f10:	str	w0, [sp, #236]
    3f14:	b	4190 <read_device+0x5e8>
    3f18:	ldr	x0, [sp, #48]
    3f1c:	ldr	w1, [x0, #32]
    3f20:	ldr	x0, [sp, #48]
    3f24:	ldr	w0, [x0, #48]
    3f28:	sub	w0, w1, w0
    3f2c:	ldr	w1, [sp, #320]
    3f30:	udiv	w0, w1, w0
    3f34:	str	w0, [sp, #228]
    3f38:	ldr	x0, [sp, #48]
    3f3c:	ldr	w0, [x0, #48]
    3f40:	cmp	w0, #0x1
    3f44:	b.ne	3f84 <read_device+0x3dc>  // b.any
    3f48:	ldr	x0, [sp, #48]
    3f4c:	ldr	w1, [x0, #24]
    3f50:	ldr	x0, [sp, #48]
    3f54:	ldr	w0, [x0, #28]
    3f58:	sub	w0, w1, w0
    3f5c:	add	w0, w0, #0x14
    3f60:	ldr	x1, [sp, #56]
    3f64:	lsr	x0, x1, x0
    3f68:	and	x1, x0, #0x1
    3f6c:	ldr	w0, [sp, #324]
    3f70:	cmp	x1, x0
    3f74:	b.ne	3f84 <read_device+0x3dc>  // b.any
    3f78:	ldr	w0, [sp, #324]
    3f7c:	add	w0, w0, #0x1
    3f80:	str	w0, [sp, #324]
    3f84:	ldr	x0, [sp, #48]
    3f88:	ldr	w0, [x0, #24]
    3f8c:	ldr	x1, [sp, #56]
    3f90:	lsr	x1, x1, x0
    3f94:	ldr	w0, [sp, #324]
    3f98:	add	x3, x1, x0
    3f9c:	ldr	x0, [sp, #48]
    3fa0:	ldr	w0, [x0, #32]
    3fa4:	mov	w0, w0
    3fa8:	add	x1, sp, #0xd0
    3fac:	mov	x2, x1
    3fb0:	mov	x1, x0
    3fb4:	mov	x0, x3
    3fb8:	bl	0 <grub_divmod64>
    3fbc:	str	x0, [sp, #240]
    3fc0:	ldr	x0, [sp, #48]
    3fc4:	ldr	w0, [x0, #24]
    3fc8:	ldr	w1, [sp, #228]
    3fcc:	lsl	w0, w1, w0
    3fd0:	mov	w0, w0
    3fd4:	str	x0, [sp, #304]
    3fd8:	ldr	x1, [sp, #304]
    3fdc:	ldr	x0, [sp, #40]
    3fe0:	cmp	x1, x0
    3fe4:	b.ls	3ff0 <read_device+0x448>  // b.plast
    3fe8:	ldr	x0, [sp, #40]
    3fec:	str	x0, [sp, #304]
    3ff0:	ldr	x0, [sp, #48]
    3ff4:	ldr	w0, [x0, #24]
    3ff8:	ldr	x1, [sp, #56]
    3ffc:	lsr	x1, x1, x0
    4000:	ldr	x0, [sp, #208]
    4004:	str	x0, [sp, #8]
    4008:	ldr	x0, [sp, #240]
    400c:	str	x0, [sp]
    4010:	ldr	w7, [sp, #228]
    4014:	ldr	x6, [sp, #40]
    4018:	ldr	w5, [sp, #324]
    401c:	mov	x4, x1
    4020:	adrp	x0, 0 <grub_swap_bytes16>
    4024:	add	x0, x0, #0x0
    4028:	ldr	x3, [x0]
    402c:	adrp	x0, 0 <grub_swap_bytes16>
    4030:	add	x0, x0, #0x0
    4034:	ldr	x2, [x0]
    4038:	mov	w1, #0x60a                 	// #1546
    403c:	adrp	x0, 0 <grub_swap_bytes16>
    4040:	add	x0, x0, #0x0
    4044:	ldr	x0, [x0]
    4048:	bl	0 <grub_real_dprintf>
    404c:	ldr	x0, [sp, #48]
    4050:	ldr	w0, [x0, #24]
    4054:	ldr	x1, [sp, #240]
    4058:	lsl	x1, x1, x0
    405c:	ldr	x0, [sp, #48]
    4060:	ldr	w0, [x0, #24]
    4064:	mov	w2, #0x1                   	// #1
    4068:	lsl	w0, w2, w0
    406c:	sub	w0, w0, #0x1
    4070:	sxtw	x2, w0
    4074:	ldr	x0, [sp, #56]
    4078:	and	x0, x2, x0
    407c:	orr	x4, x1, x0
    4080:	ldr	x0, [sp, #48]
    4084:	ldr	x2, [x0, #40]
    4088:	ldr	x1, [sp, #208]
    408c:	mov	x0, x1
    4090:	lsl	x0, x0, #5
    4094:	sub	x0, x0, x1
    4098:	lsl	x0, x0, #3
    409c:	add	x0, x2, x0
    40a0:	ldr	x3, [sp, #32]
    40a4:	ldr	x2, [sp, #304]
    40a8:	mov	x1, x0
    40ac:	mov	x0, x4
    40b0:	bl	3ba8 <read_device>
    40b4:	str	w0, [sp, #300]
    40b8:	ldr	w0, [sp, #300]
    40bc:	cmp	w0, #0x0
    40c0:	b.eq	4138 <read_device+0x590>  // b.none
    40c4:	ldr	x0, [sp, #48]
    40c8:	ldr	w0, [x0, #48]
    40cc:	ldr	w1, [sp, #316]
    40d0:	cmp	w1, w0
    40d4:	b.cs	4138 <read_device+0x590>  // b.hs, b.nlast
    40d8:	ldr	w0, [sp, #316]
    40dc:	lsl	x0, x0, #3
    40e0:	add	x1, sp, #0x48
    40e4:	ldr	x2, [sp, #32]
    40e8:	str	x2, [x1, x0]
    40ec:	ldr	w0, [sp, #316]
    40f0:	lsl	x0, x0, #3
    40f4:	add	x1, sp, #0x68
    40f8:	ldr	x2, [sp, #304]
    40fc:	str	x2, [x1, x0]
    4100:	ldr	w2, [sp, #312]
    4104:	ldr	w0, [sp, #316]
    4108:	lsl	x0, x0, #2
    410c:	add	x1, sp, #0xb8
    4110:	str	w2, [x1, x0]
    4114:	ldr	w0, [sp, #316]
    4118:	add	w0, w0, #0x1
    411c:	str	w0, [sp, #316]
    4120:	str	wzr, [sp, #300]
    4124:	adrp	x0, 0 <grub_swap_bytes16>
    4128:	add	x0, x0, #0x0
    412c:	ldr	x0, [x0]
    4130:	ldr	w1, [sp, #300]
    4134:	str	w1, [x0]
    4138:	ldr	w0, [sp, #300]
    413c:	cmp	w0, #0x0
    4140:	b.eq	414c <read_device+0x5a4>  // b.none
    4144:	ldr	w0, [sp, #300]
    4148:	b	4714 <read_device+0xb6c>
    414c:	ldr	w0, [sp, #324]
    4150:	add	w0, w0, #0x1
    4154:	str	w0, [sp, #324]
    4158:	ldr	w0, [sp, #312]
    415c:	sub	w0, w0, #0x1
    4160:	str	w0, [sp, #312]
    4164:	ldr	w0, [sp, #320]
    4168:	sub	w0, w0, #0x1
    416c:	str	w0, [sp, #320]
    4170:	ldr	x1, [sp, #32]
    4174:	ldr	x0, [sp, #304]
    4178:	add	x0, x1, x0
    417c:	str	x0, [sp, #32]
    4180:	ldr	x1, [sp, #40]
    4184:	ldr	x0, [sp, #304]
    4188:	sub	x0, x1, x0
    418c:	str	x0, [sp, #40]
    4190:	ldr	x0, [sp, #40]
    4194:	cmp	x0, #0x0
    4198:	b.ne	3f18 <read_device+0x370>  // b.any
    419c:	ldr	w0, [sp, #316]
    41a0:	cmp	w0, #0x0
    41a4:	b.eq	46f8 <read_device+0xb50>  // b.none
    41a8:	str	wzr, [sp, #296]
    41ac:	str	wzr, [sp, #292]
    41b0:	adrp	x0, 0 <grub_swap_bytes16>
    41b4:	add	x0, x0, #0x0
    41b8:	ldr	x0, [x0]
    41bc:	ldrb	w0, [x0]
    41c0:	cmp	w0, #0x0
    41c4:	b.ne	4280 <read_device+0x6d8>  // b.any
    41c8:	mov	w0, #0x1                   	// #1
    41cc:	strb	w0, [sp, #283]
    41d0:	str	wzr, [sp, #288]
    41d4:	b	4274 <read_device+0x6cc>
    41d8:	adrp	x0, 0 <grub_swap_bytes16>
    41dc:	add	x0, x0, #0x0
    41e0:	ldr	x1, [x0]
    41e4:	ldr	w0, [sp, #288]
    41e8:	ldrb	w2, [sp, #283]
    41ec:	strb	w2, [x1, x0]
    41f0:	ldr	w0, [sp, #288]
    41f4:	add	w2, w0, #0xff
    41f8:	adrp	x0, 0 <grub_swap_bytes16>
    41fc:	add	x0, x0, #0x0
    4200:	ldr	x1, [x0]
    4204:	mov	w0, w2
    4208:	ldrb	w2, [sp, #283]
    420c:	strb	w2, [x1, x0]
    4210:	ldrb	w1, [sp, #283]
    4214:	ldr	w2, [sp, #288]
    4218:	adrp	x0, 0 <grub_swap_bytes16>
    421c:	add	x0, x0, #0x0
    4220:	ldr	x0, [x0]
    4224:	sxtw	x1, w1
    4228:	str	w2, [x0, x1, lsl #2]
    422c:	ldrsb	w0, [sp, #283]
    4230:	cmp	w0, #0x0
    4234:	b.ge	425c <read_device+0x6b4>  // b.tcont
    4238:	ldrb	w0, [sp, #283]
    423c:	lsl	w0, w0, #1
    4240:	sxtb	w1, w0
    4244:	mov	w0, #0x1d                  	// #29
    4248:	sxtb	w0, w0
    424c:	eor	w0, w1, w0
    4250:	sxtb	w0, w0
    4254:	strb	w0, [sp, #283]
    4258:	b	4268 <read_device+0x6c0>
    425c:	ldrb	w0, [sp, #283]
    4260:	ubfiz	w0, w0, #1, #7
    4264:	strb	w0, [sp, #283]
    4268:	ldr	w0, [sp, #288]
    426c:	add	w0, w0, #0x1
    4270:	str	w0, [sp, #288]
    4274:	ldr	w0, [sp, #288]
    4278:	cmp	w0, #0xfe
    427c:	b.ls	41d8 <read_device+0x630>  // b.plast
    4280:	str	wzr, [sp, #292]
    4284:	str	wzr, [sp, #296]
    4288:	b	4428 <read_device+0x880>
    428c:	ldr	x0, [sp, #48]
    4290:	ldr	w0, [x0, #24]
    4294:	ldr	x1, [sp, #56]
    4298:	lsr	x1, x1, x0
    429c:	ldr	w0, [sp, #296]
    42a0:	add	x1, x1, x0
    42a4:	ldr	x0, [sp, #48]
    42a8:	ldr	w0, [x0, #48]
    42ac:	cmp	w0, #0x1
    42b0:	b.ne	42e8 <read_device+0x740>  // b.any
    42b4:	ldr	x0, [sp, #48]
    42b8:	ldr	w2, [x0, #24]
    42bc:	ldr	x0, [sp, #48]
    42c0:	ldr	w0, [x0, #28]
    42c4:	sub	w0, w2, w0
    42c8:	add	w0, w0, #0x14
    42cc:	ldr	x2, [sp, #56]
    42d0:	lsr	x0, x2, x0
    42d4:	and	x0, x0, #0x1
    42d8:	cmp	x0, #0x0
    42dc:	b.eq	42e8 <read_device+0x740>  // b.none
    42e0:	mov	w0, #0x1                   	// #1
    42e4:	b	42ec <read_device+0x744>
    42e8:	mov	w0, #0x0                   	// #0
    42ec:	sxtw	x0, w0
    42f0:	add	x3, x1, x0
    42f4:	ldr	x0, [sp, #48]
    42f8:	ldr	w0, [x0, #32]
    42fc:	mov	w0, w0
    4300:	add	x1, sp, #0xd0
    4304:	mov	x2, x1
    4308:	mov	x1, x0
    430c:	mov	x0, x3
    4310:	bl	0 <grub_divmod64>
    4314:	str	x0, [sp, #240]
    4318:	ldr	x0, [sp, #48]
    431c:	ldr	w0, [x0, #24]
    4320:	ldr	x1, [sp, #240]
    4324:	lsl	x1, x1, x0
    4328:	ldr	x0, [sp, #48]
    432c:	ldr	w0, [x0, #24]
    4330:	mov	w2, #0x1                   	// #1
    4334:	lsl	w0, w2, w0
    4338:	sub	w0, w0, #0x1
    433c:	sxtw	x2, w0
    4340:	ldr	x0, [sp, #56]
    4344:	and	x0, x2, x0
    4348:	orr	x4, x1, x0
    434c:	ldr	x0, [sp, #48]
    4350:	ldr	x2, [x0, #40]
    4354:	ldr	x1, [sp, #208]
    4358:	mov	x0, x1
    435c:	lsl	x0, x0, #5
    4360:	sub	x0, x0, x1
    4364:	lsl	x0, x0, #3
    4368:	add	x5, x2, x0
    436c:	ldr	w0, [sp, #292]
    4370:	lsl	x0, x0, #3
    4374:	add	x1, sp, #0x68
    4378:	ldr	x2, [x1, x0]
    437c:	ldr	w0, [sp, #292]
    4380:	lsl	x0, x0, #3
    4384:	add	x1, sp, #0x48
    4388:	ldr	x0, [x1, x0]
    438c:	mov	x3, x0
    4390:	mov	x1, x5
    4394:	mov	x0, x4
    4398:	bl	3ba8 <read_device>
    439c:	str	w0, [sp, #232]
    43a0:	ldr	w0, [sp, #232]
    43a4:	cmp	w0, #0x0
    43a8:	b.eq	43e8 <read_device+0x840>  // b.none
    43ac:	ldr	x0, [sp, #48]
    43b0:	ldr	w1, [x0, #48]
    43b4:	ldr	w0, [sp, #292]
    43b8:	add	w1, w1, w0
    43bc:	ldr	w0, [sp, #296]
    43c0:	sub	w0, w1, w0
    43c4:	sub	w0, w0, #0x1
    43c8:	ldr	w1, [sp, #316]
    43cc:	cmp	w1, w0
    43d0:	b.hi	43e8 <read_device+0x840>  // b.pmore
    43d4:	adrp	x0, 0 <grub_swap_bytes16>
    43d8:	add	x0, x0, #0x0
    43dc:	ldr	x0, [x0]
    43e0:	str	wzr, [x0]
    43e4:	b	441c <read_device+0x874>
    43e8:	ldr	w0, [sp, #232]
    43ec:	cmp	w0, #0x0
    43f0:	b.eq	43fc <read_device+0x854>  // b.none
    43f4:	ldr	w0, [sp, #232]
    43f8:	b	4714 <read_device+0xb6c>
    43fc:	ldr	w0, [sp, #292]
    4400:	lsl	x0, x0, #2
    4404:	add	x1, sp, #0xa8
    4408:	ldr	w2, [sp, #296]
    440c:	str	w2, [x1, x0]
    4410:	ldr	w0, [sp, #292]
    4414:	add	w0, w0, #0x1
    4418:	str	w0, [sp, #292]
    441c:	ldr	w0, [sp, #296]
    4420:	add	w0, w0, #0x1
    4424:	str	w0, [sp, #296]
    4428:	ldr	w1, [sp, #292]
    442c:	ldr	w0, [sp, #316]
    4430:	cmp	w1, w0
    4434:	b.cc	428c <read_device+0x6e4>  // b.lo, b.ul, b.last
    4438:	ldr	x0, [sp, #264]
    443c:	str	x0, [sp, #32]
    4440:	ldr	x0, [sp, #256]
    4444:	str	x0, [sp, #40]
    4448:	ldr	w0, [sp, #252]
    444c:	str	w0, [sp, #320]
    4450:	ldr	w0, [sp, #236]
    4454:	str	w0, [sp, #312]
    4458:	b	45ac <read_device+0xa04>
    445c:	ldr	x0, [sp, #48]
    4460:	ldr	w1, [x0, #32]
    4464:	ldr	x0, [sp, #48]
    4468:	ldr	w0, [x0, #48]
    446c:	sub	w0, w1, w0
    4470:	ldr	w1, [sp, #320]
    4474:	udiv	w1, w1, w0
    4478:	ldr	x0, [sp, #48]
    447c:	ldr	w0, [x0, #24]
    4480:	lsl	w0, w1, w0
    4484:	mov	w0, w0
    4488:	str	x0, [sp, #272]
    448c:	ldr	x1, [sp, #272]
    4490:	ldr	x0, [sp, #40]
    4494:	cmp	x1, x0
    4498:	b.ls	44a4 <read_device+0x8fc>  // b.plast
    449c:	ldr	x0, [sp, #40]
    44a0:	str	x0, [sp, #272]
    44a4:	str	wzr, [sp, #284]
    44a8:	b	44d4 <read_device+0x92c>
    44ac:	ldr	w0, [sp, #284]
    44b0:	lsl	x0, x0, #3
    44b4:	add	x1, sp, #0x48
    44b8:	ldr	x0, [x1, x0]
    44bc:	ldr	x1, [sp, #32]
    44c0:	cmp	x1, x0
    44c4:	b.eq	44e8 <read_device+0x940>  // b.none
    44c8:	ldr	w0, [sp, #284]
    44cc:	add	w0, w0, #0x1
    44d0:	str	w0, [sp, #284]
    44d4:	ldr	w1, [sp, #284]
    44d8:	ldr	w0, [sp, #316]
    44dc:	cmp	w1, w0
    44e0:	b.cc	44ac <read_device+0x904>  // b.lo, b.ul, b.last
    44e4:	b	44ec <read_device+0x944>
    44e8:	nop
    44ec:	ldr	w1, [sp, #284]
    44f0:	ldr	w0, [sp, #316]
    44f4:	cmp	w1, w0
    44f8:	b.ne	4574 <read_device+0x9cc>  // b.any
    44fc:	str	wzr, [sp, #284]
    4500:	b	4564 <read_device+0x9bc>
    4504:	ldr	w0, [sp, #284]
    4508:	lsl	x0, x0, #3
    450c:	add	x1, sp, #0x48
    4510:	ldr	x5, [x1, x0]
    4514:	ldr	w0, [sp, #284]
    4518:	lsl	x0, x0, #3
    451c:	add	x1, sp, #0x68
    4520:	ldr	x0, [x1, x0]
    4524:	ldr	x2, [sp, #272]
    4528:	ldr	x1, [sp, #272]
    452c:	cmp	x2, x0
    4530:	csel	x2, x1, x0, ls  // ls = plast
    4534:	ldr	w3, [sp, #312]
    4538:	ldr	w0, [sp, #284]
    453c:	lsl	x0, x0, #2
    4540:	add	x1, sp, #0xa8
    4544:	ldr	w0, [x1, x0]
    4548:	mov	w4, w0
    454c:	ldr	x1, [sp, #32]
    4550:	mov	x0, x5
    4554:	bl	2b78 <xor_out>
    4558:	ldr	w0, [sp, #284]
    455c:	add	w0, w0, #0x1
    4560:	str	w0, [sp, #284]
    4564:	ldr	w1, [sp, #284]
    4568:	ldr	w0, [sp, #316]
    456c:	cmp	w1, w0
    4570:	b.cc	4504 <read_device+0x95c>  // b.lo, b.ul, b.last
    4574:	ldr	w0, [sp, #320]
    4578:	sub	w0, w0, #0x1
    457c:	str	w0, [sp, #320]
    4580:	ldr	x1, [sp, #32]
    4584:	ldr	x0, [sp, #272]
    4588:	add	x0, x1, x0
    458c:	str	x0, [sp, #32]
    4590:	ldr	x1, [sp, #40]
    4594:	ldr	x0, [sp, #272]
    4598:	sub	x0, x1, x0
    459c:	str	x0, [sp, #40]
    45a0:	ldr	w0, [sp, #312]
    45a4:	sub	w0, w0, #0x1
    45a8:	str	w0, [sp, #312]
    45ac:	ldr	x0, [sp, #40]
    45b0:	cmp	x0, #0x0
    45b4:	b.ne	445c <read_device+0x8b4>  // b.any
    45b8:	str	wzr, [sp, #288]
    45bc:	b	45cc <read_device+0xa24>
    45c0:	ldr	w0, [sp, #288]
    45c4:	add	w0, w0, #0x1
    45c8:	str	w0, [sp, #288]
    45cc:	ldr	w1, [sp, #288]
    45d0:	ldr	w0, [sp, #316]
    45d4:	cmp	w1, w0
    45d8:	b.cs	45f8 <read_device+0xa50>  // b.hs, b.nlast
    45dc:	ldr	w0, [sp, #288]
    45e0:	lsl	x0, x0, #3
    45e4:	add	x1, sp, #0x68
    45e8:	ldr	x1, [x1, x0]
    45ec:	ldr	x0, [sp, #104]
    45f0:	cmp	x1, x0
    45f4:	b.eq	45c0 <read_device+0xa18>  // b.none
    45f8:	ldr	w1, [sp, #288]
    45fc:	ldr	w0, [sp, #316]
    4600:	cmp	w1, w0
    4604:	b.eq	46b4 <read_device+0xb0c>  // b.none
    4608:	str	wzr, [sp, #284]
    460c:	b	4658 <read_device+0xab0>
    4610:	ldr	w0, [sp, #284]
    4614:	lsl	x0, x0, #3
    4618:	add	x1, sp, #0x48
    461c:	ldr	x1, [x1, x0]
    4620:	ldr	w0, [sp, #316]
    4624:	sub	w0, w0, #0x1
    4628:	mov	w0, w0
    462c:	lsl	x0, x0, #3
    4630:	add	x2, sp, #0x68
    4634:	ldr	x0, [x2, x0]
    4638:	add	x2, x1, x0
    463c:	ldr	w0, [sp, #284]
    4640:	lsl	x0, x0, #3
    4644:	add	x1, sp, #0x88
    4648:	str	x2, [x1, x0]
    464c:	ldr	w0, [sp, #284]
    4650:	add	w0, w0, #0x1
    4654:	str	w0, [sp, #284]
    4658:	ldr	w1, [sp, #284]
    465c:	ldr	w0, [sp, #288]
    4660:	cmp	w1, w0
    4664:	b.cc	4610 <read_device+0xa68>  // b.lo, b.ul, b.last
    4668:	ldr	x1, [sp, #104]
    466c:	ldr	w0, [sp, #316]
    4670:	sub	w0, w0, #0x1
    4674:	mov	w0, w0
    4678:	lsl	x0, x0, #3
    467c:	add	x2, sp, #0x68
    4680:	ldr	x0, [x2, x0]
    4684:	sub	x1, x1, x0
    4688:	ldr	w2, [sp, #288]
    468c:	add	x4, sp, #0xb8
    4690:	add	x3, sp, #0xa8
    4694:	add	x0, sp, #0x88
    4698:	bl	2d38 <recovery>
    469c:	str	w0, [sp, #232]
    46a0:	ldr	w0, [sp, #232]
    46a4:	cmp	w0, #0x0
    46a8:	b.eq	46b4 <read_device+0xb0c>  // b.none
    46ac:	ldr	w0, [sp, #232]
    46b0:	b	4714 <read_device+0xb6c>
    46b4:	ldr	w0, [sp, #316]
    46b8:	sub	w0, w0, #0x1
    46bc:	mov	w0, w0
    46c0:	lsl	x0, x0, #3
    46c4:	add	x1, sp, #0x68
    46c8:	ldr	x1, [x1, x0]
    46cc:	ldr	w2, [sp, #316]
    46d0:	add	x4, sp, #0xb8
    46d4:	add	x3, sp, #0xa8
    46d8:	add	x0, sp, #0x48
    46dc:	bl	2d38 <recovery>
    46e0:	str	w0, [sp, #232]
    46e4:	ldr	w0, [sp, #232]
    46e8:	cmp	w0, #0x0
    46ec:	b.eq	46f8 <read_device+0xb50>  // b.none
    46f0:	ldr	w0, [sp, #232]
    46f4:	b	4714 <read_device+0xb6c>
    46f8:	mov	w0, #0x0                   	// #0
    46fc:	b	4714 <read_device+0xb6c>
    4700:	adrp	x0, 0 <grub_swap_bytes16>
    4704:	add	x0, x0, #0x0
    4708:	ldr	x1, [x0]
    470c:	mov	w0, #0x9                   	// #9
    4710:	bl	0 <grub_error>
    4714:	ldp	x29, x30, [sp, #16]
    4718:	add	sp, sp, #0x150
    471c:	ret
	...

0000000000004778 <read_dva>:
    4778:	stp	x29, x30, [sp, #-96]!
    477c:	mov	x29, sp
    4780:	str	x0, [sp, #56]
    4784:	str	w1, [sp, #52]
    4788:	str	x2, [sp, #40]
    478c:	str	x3, [sp, #32]
    4790:	str	x4, [sp, #24]
    4794:	str	wzr, [sp, #88]
    4798:	str	wzr, [sp, #84]
    479c:	ldr	w1, [sp, #52]
    47a0:	ldr	x0, [sp, #56]
    47a4:	bl	10e4 <dva_get_offset>
    47a8:	str	x0, [sp, #72]
    47ac:	str	wzr, [sp, #84]
    47b0:	b	48a0 <read_dva+0x128>
    47b4:	str	wzr, [sp, #92]
    47b8:	b	484c <read_dva+0xd4>
    47bc:	ldr	x0, [sp, #40]
    47c0:	ldr	x2, [x0, #1656]
    47c4:	ldr	w1, [sp, #92]
    47c8:	mov	x0, x1
    47cc:	lsl	x0, x0, #5
    47d0:	sub	x0, x0, x1
    47d4:	lsl	x0, x0, #3
    47d8:	add	x0, x2, x0
    47dc:	ldr	x1, [x0, #8]
    47e0:	ldr	x0, [sp, #56]
    47e4:	ldr	x0, [x0]
    47e8:	lsr	x0, x0, #32
    47ec:	cmp	x1, x0
    47f0:	b.ne	4840 <read_dva+0xc8>  // b.any
    47f4:	ldr	x0, [sp, #40]
    47f8:	ldr	x2, [x0, #1656]
    47fc:	ldr	w1, [sp, #92]
    4800:	mov	x0, x1
    4804:	lsl	x0, x0, #5
    4808:	sub	x0, x0, x1
    480c:	lsl	x0, x0, #3
    4810:	add	x0, x2, x0
    4814:	ldr	x3, [sp, #32]
    4818:	ldr	x2, [sp, #24]
    481c:	mov	x1, x0
    4820:	ldr	x0, [sp, #72]
    4824:	bl	3ba8 <read_device>
    4828:	str	w0, [sp, #88]
    482c:	ldr	w0, [sp, #88]
    4830:	cmp	w0, #0x0
    4834:	b.ne	4864 <read_dva+0xec>  // b.any
    4838:	mov	w0, #0x0                   	// #0
    483c:	b	48ec <read_dva+0x174>
    4840:	ldr	w0, [sp, #92]
    4844:	add	w0, w0, #0x1
    4848:	str	w0, [sp, #92]
    484c:	ldr	x0, [sp, #40]
    4850:	ldr	w0, [x0, #1664]
    4854:	ldr	w1, [sp, #92]
    4858:	cmp	w1, w0
    485c:	b.cc	47bc <read_dva+0x44>  // b.lo, b.ul, b.last
    4860:	b	4868 <read_dva+0xf0>
    4864:	nop
    4868:	ldr	w0, [sp, #84]
    486c:	cmp	w0, #0x1
    4870:	b.eq	48b0 <read_dva+0x138>  // b.none
    4874:	ldr	x0, [sp, #40]
    4878:	bl	2b40 <scan_devices>
    487c:	str	w0, [sp, #88]
    4880:	ldr	w0, [sp, #88]
    4884:	cmp	w0, #0x0
    4888:	b.eq	4894 <read_dva+0x11c>  // b.none
    488c:	ldr	w0, [sp, #88]
    4890:	b	48ec <read_dva+0x174>
    4894:	ldr	w0, [sp, #84]
    4898:	add	w0, w0, #0x1
    489c:	str	w0, [sp, #84]
    48a0:	ldr	w0, [sp, #84]
    48a4:	cmp	w0, #0x1
    48a8:	b.le	47b4 <read_dva+0x3c>
    48ac:	b	48b4 <read_dva+0x13c>
    48b0:	nop
    48b4:	ldr	w0, [sp, #88]
    48b8:	cmp	w0, #0x0
    48bc:	b.ne	48e8 <read_dva+0x170>  // b.any
    48c0:	ldr	x0, [sp, #56]
    48c4:	ldr	x0, [x0]
    48c8:	lsr	x0, x0, #32
    48cc:	mov	w2, w0
    48d0:	adrp	x0, 0 <grub_swap_bytes16>
    48d4:	add	x0, x0, #0x0
    48d8:	ldr	x1, [x0]
    48dc:	mov	w0, #0x9                   	// #9
    48e0:	bl	0 <grub_error>
    48e4:	b	48ec <read_dva+0x174>
    48e8:	ldr	w0, [sp, #88]
    48ec:	ldp	x29, x30, [sp], #96
    48f0:	ret
    48f4:	nop
	...

0000000000004900 <zio_read_gang>:
    4900:	stp	x29, x30, [sp, #-160]!
    4904:	mov	x29, sp
    4908:	str	x0, [sp, #88]
    490c:	str	w1, [sp, #84]
    4910:	str	x2, [sp, #72]
    4914:	str	x3, [sp, #64]
    4918:	str	x4, [sp, #56]
    491c:	add	x0, sp, #0x68
    4920:	mov	x2, #0x20                  	// #32
    4924:	mov	w1, #0x0                   	// #0
    4928:	bl	0 <grub_memset>
    492c:	mov	x0, #0x200                 	// #512
    4930:	bl	0 <grub_malloc>
    4934:	str	x0, [sp, #144]
    4938:	ldr	x0, [sp, #144]
    493c:	cmp	x0, #0x0
    4940:	b.ne	4958 <zio_read_gang+0x58>  // b.any
    4944:	adrp	x0, 0 <grub_swap_bytes16>
    4948:	add	x0, x0, #0x0
    494c:	ldr	x0, [x0]
    4950:	ldr	w0, [x0]
    4954:	b	4b64 <zio_read_gang+0x264>
    4958:	ldr	w0, [sp, #84]
    495c:	cmn	w0, #0x1
    4960:	b.ne	4974 <zio_read_gang+0x74>  // b.any
    4964:	adrp	x0, 0 <grub_swap_bytes16>
    4968:	add	x0, x0, #0x0
    496c:	ldr	x0, [x0]
    4970:	b	4980 <zio_read_gang+0x80>
    4974:	adrp	x0, 0 <grub_swap_bytes16>
    4978:	add	x0, x0, #0x0
    497c:	ldr	x0, [x0]
    4980:	mov	x3, x0
    4984:	adrp	x0, 0 <grub_swap_bytes16>
    4988:	add	x0, x0, #0x0
    498c:	ldr	x2, [x0]
    4990:	mov	w1, #0x6c5                 	// #1733
    4994:	adrp	x0, 0 <grub_swap_bytes16>
    4998:	add	x0, x0, #0x0
    499c:	ldr	x0, [x0]
    49a0:	bl	0 <grub_real_dprintf>
    49a4:	mov	x4, #0x200                 	// #512
    49a8:	ldr	x3, [sp, #144]
    49ac:	ldr	x2, [sp, #56]
    49b0:	ldr	w1, [sp, #84]
    49b4:	ldr	x0, [sp, #72]
    49b8:	bl	4778 <read_dva>
    49bc:	str	w0, [sp, #140]
    49c0:	ldr	w0, [sp, #140]
    49c4:	cmp	w0, #0x0
    49c8:	b.eq	49dc <zio_read_gang+0xdc>  // b.none
    49cc:	ldr	x0, [sp, #144]
    49d0:	bl	0 <grub_free>
    49d4:	ldr	w0, [sp, #140]
    49d8:	b	4b64 <zio_read_gang+0x264>
    49dc:	ldr	x0, [sp, #72]
    49e0:	ldr	x0, [x0]
    49e4:	lsr	x0, x0, #32
    49e8:	str	x0, [sp, #104]
    49ec:	ldr	w1, [sp, #84]
    49f0:	ldr	x0, [sp, #72]
    49f4:	bl	10e4 <dva_get_offset>
    49f8:	str	x0, [sp, #112]
    49fc:	ldr	x0, [sp, #88]
    4a00:	ldr	x0, [x0, #80]
    4a04:	str	x0, [sp, #120]
    4a08:	str	xzr, [sp, #128]
    4a0c:	add	x2, sp, #0x10
    4a10:	add	x3, sp, #0x68
    4a14:	ldp	x0, x1, [x3]
    4a18:	stp	x0, x1, [x2]
    4a1c:	ldp	x0, x1, [x3, #16]
    4a20:	stp	x0, x1, [x2, #16]
    4a24:	add	x0, sp, #0x10
    4a28:	mov	x4, #0x200                 	// #512
    4a2c:	ldr	x3, [sp, #144]
    4a30:	ldr	w2, [sp, #84]
    4a34:	mov	w1, #0x4                   	// #4
    4a38:	bl	8d4 <zio_checksum_verify>
    4a3c:	str	w0, [sp, #140]
    4a40:	ldr	w0, [sp, #140]
    4a44:	cmp	w0, #0x0
    4a48:	b.eq	4a5c <zio_read_gang+0x15c>  // b.none
    4a4c:	ldr	x0, [sp, #144]
    4a50:	bl	0 <grub_free>
    4a54:	ldr	w0, [sp, #140]
    4a58:	b	4b64 <zio_read_gang+0x264>
    4a5c:	ldr	w0, [sp, #84]
    4a60:	cmp	w0, #0x0
    4a64:	b.ne	4a80 <zio_read_gang+0x180>  // b.any
    4a68:	ldr	x0, [sp, #88]
    4a6c:	ldr	x0, [x0, #48]
    4a70:	bl	50 <grub_swap_bytes64>
    4a74:	lsr	x0, x0, #63
    4a78:	and	w0, w0, #0x1
    4a7c:	b	4a8c <zio_read_gang+0x18c>
    4a80:	ldr	x0, [sp, #88]
    4a84:	ldr	x0, [x0, #48]
    4a88:	lsr	x0, x0, #63
    4a8c:	str	w0, [sp, #84]
    4a90:	str	wzr, [sp, #156]
    4a94:	b	4b4c <zio_read_gang+0x24c>
    4a98:	ldr	x1, [sp, #144]
    4a9c:	ldr	w0, [sp, #156]
    4aa0:	lsl	x0, x0, #7
    4aa4:	add	x0, x1, x0
    4aa8:	ldr	x0, [x0]
    4aac:	cmp	x0, #0x0
    4ab0:	b.ne	4ad0 <zio_read_gang+0x1d0>  // b.any
    4ab4:	ldr	x1, [sp, #144]
    4ab8:	ldr	w0, [sp, #156]
    4abc:	lsl	x0, x0, #7
    4ac0:	add	x0, x1, x0
    4ac4:	ldr	x0, [x0, #8]
    4ac8:	cmp	x0, #0x0
    4acc:	b.eq	4b3c <zio_read_gang+0x23c>  // b.none
    4ad0:	ldr	w0, [sp, #156]
    4ad4:	lsl	x0, x0, #7
    4ad8:	ldr	x1, [sp, #144]
    4adc:	add	x0, x1, x0
    4ae0:	ldr	x3, [sp, #56]
    4ae4:	ldr	x2, [sp, #64]
    4ae8:	ldr	w1, [sp, #84]
    4aec:	bl	4b98 <zio_read_data>
    4af0:	str	w0, [sp, #140]
    4af4:	ldr	w0, [sp, #140]
    4af8:	cmp	w0, #0x0
    4afc:	b.eq	4b10 <zio_read_gang+0x210>  // b.none
    4b00:	ldr	x0, [sp, #144]
    4b04:	bl	0 <grub_free>
    4b08:	ldr	w0, [sp, #140]
    4b0c:	b	4b64 <zio_read_gang+0x264>
    4b10:	ldr	w0, [sp, #156]
    4b14:	lsl	x0, x0, #7
    4b18:	ldr	x1, [sp, #144]
    4b1c:	add	x0, x1, x0
    4b20:	ldr	w1, [sp, #84]
    4b24:	bl	1088 <get_psize>
    4b28:	mov	x1, x0
    4b2c:	ldr	x0, [sp, #64]
    4b30:	add	x0, x0, x1
    4b34:	str	x0, [sp, #64]
    4b38:	b	4b40 <zio_read_gang+0x240>
    4b3c:	nop
    4b40:	ldr	w0, [sp, #156]
    4b44:	add	w0, w0, #0x1
    4b48:	str	w0, [sp, #156]
    4b4c:	ldr	w0, [sp, #156]
    4b50:	cmp	w0, #0x2
    4b54:	b.ls	4a98 <zio_read_gang+0x198>  // b.plast
    4b58:	ldr	x0, [sp, #144]
    4b5c:	bl	0 <grub_free>
    4b60:	mov	w0, #0x0                   	// #0
    4b64:	ldp	x29, x30, [sp], #160
    4b68:	ret
    4b6c:	nop
	...

0000000000004b98 <zio_read_data>:
    4b98:	stp	x29, x30, [sp, #-64]!
    4b9c:	mov	x29, sp
    4ba0:	str	x0, [sp, #40]
    4ba4:	str	w1, [sp, #36]
    4ba8:	str	x2, [sp, #24]
    4bac:	str	x3, [sp, #16]
    4bb0:	str	wzr, [sp, #56]
    4bb4:	ldr	w1, [sp, #36]
    4bb8:	ldr	x0, [sp, #40]
    4bbc:	bl	1088 <get_psize>
    4bc0:	str	w0, [sp, #52]
    4bc4:	str	wzr, [sp, #60]
    4bc8:	b	4cec <zio_read_data+0x154>
    4bcc:	ldr	x1, [sp, #40]
    4bd0:	ldrsw	x0, [sp, #60]
    4bd4:	lsl	x0, x0, #4
    4bd8:	add	x0, x1, x0
    4bdc:	ldr	x0, [x0]
    4be0:	cmp	x0, #0x0
    4be4:	b.ne	4c04 <zio_read_data+0x6c>  // b.any
    4be8:	ldr	x1, [sp, #40]
    4bec:	ldrsw	x0, [sp, #60]
    4bf0:	lsl	x0, x0, #4
    4bf4:	add	x0, x1, x0
    4bf8:	ldr	x0, [x0, #8]
    4bfc:	cmp	x0, #0x0
    4c00:	b.eq	4cdc <zio_read_data+0x144>  // b.none
    4c04:	ldr	w0, [sp, #36]
    4c08:	cmp	w0, #0x0
    4c0c:	b.ne	4c34 <zio_read_data+0x9c>  // b.any
    4c10:	ldr	x1, [sp, #40]
    4c14:	ldrsw	x0, [sp, #60]
    4c18:	lsl	x0, x0, #4
    4c1c:	add	x0, x1, x0
    4c20:	ldr	x0, [x0, #8]
    4c24:	bl	50 <grub_swap_bytes64>
    4c28:	lsr	x0, x0, #63
    4c2c:	and	w0, w0, #0xff
    4c30:	b	4c50 <zio_read_data+0xb8>
    4c34:	ldr	x1, [sp, #40]
    4c38:	ldrsw	x0, [sp, #60]
    4c3c:	lsl	x0, x0, #4
    4c40:	add	x0, x1, x0
    4c44:	ldr	x0, [x0, #8]
    4c48:	lsr	x0, x0, #63
    4c4c:	and	w0, w0, #0xff
    4c50:	cmp	w0, #0x0
    4c54:	b.eq	4c88 <zio_read_data+0xf0>  // b.none
    4c58:	ldrsw	x0, [sp, #60]
    4c5c:	lsl	x0, x0, #4
    4c60:	ldr	x1, [sp, #40]
    4c64:	add	x0, x1, x0
    4c68:	ldr	x4, [sp, #16]
    4c6c:	ldr	x3, [sp, #24]
    4c70:	mov	x2, x0
    4c74:	ldr	w1, [sp, #36]
    4c78:	ldr	x0, [sp, #40]
    4c7c:	bl	4900 <zio_read_gang>
    4c80:	str	w0, [sp, #56]
    4c84:	b	4cb4 <zio_read_data+0x11c>
    4c88:	ldrsw	x0, [sp, #60]
    4c8c:	lsl	x0, x0, #4
    4c90:	ldr	x1, [sp, #40]
    4c94:	add	x0, x1, x0
    4c98:	ldrsw	x1, [sp, #52]
    4c9c:	mov	x4, x1
    4ca0:	ldr	x3, [sp, #24]
    4ca4:	ldr	x2, [sp, #16]
    4ca8:	ldr	w1, [sp, #36]
    4cac:	bl	4778 <read_dva>
    4cb0:	str	w0, [sp, #56]
    4cb4:	ldr	w0, [sp, #56]
    4cb8:	cmp	w0, #0x0
    4cbc:	b.ne	4cc8 <zio_read_data+0x130>  // b.any
    4cc0:	mov	w0, #0x0                   	// #0
    4cc4:	b	4d34 <zio_read_data+0x19c>
    4cc8:	adrp	x0, 0 <grub_swap_bytes16>
    4ccc:	add	x0, x0, #0x0
    4cd0:	ldr	x0, [x0]
    4cd4:	str	wzr, [x0]
    4cd8:	b	4ce0 <zio_read_data+0x148>
    4cdc:	nop
    4ce0:	ldr	w0, [sp, #60]
    4ce4:	add	w0, w0, #0x1
    4ce8:	str	w0, [sp, #60]
    4cec:	ldr	w0, [sp, #60]
    4cf0:	cmp	w0, #0x2
    4cf4:	b.le	4bcc <zio_read_data+0x34>
    4cf8:	ldr	w0, [sp, #56]
    4cfc:	cmp	w0, #0x0
    4d00:	b.ne	4d1c <zio_read_data+0x184>  // b.any
    4d04:	adrp	x0, 0 <grub_swap_bytes16>
    4d08:	add	x0, x0, #0x0
    4d0c:	ldr	x1, [x0]
    4d10:	mov	w0, #0x9                   	// #9
    4d14:	bl	0 <grub_error>
    4d18:	str	w0, [sp, #56]
    4d1c:	adrp	x0, 0 <grub_swap_bytes16>
    4d20:	add	x0, x0, #0x0
    4d24:	ldr	x0, [x0]
    4d28:	ldr	w1, [sp, #56]
    4d2c:	str	w1, [x0]
    4d30:	ldr	w0, [sp, #56]
    4d34:	ldp	x29, x30, [sp], #64
    4d38:	ret
    4d3c:	nop
	...

0000000000004d50 <decode_embedded_bp_compressed>:
    4d50:	sub	sp, sp, #0x40
    4d54:	str	x0, [sp, #8]
    4d58:	str	x1, [sp]
    4d5c:	ldr	x0, [sp]
    4d60:	str	x0, [sp, #32]
    4d64:	str	xzr, [sp, #48]
    4d68:	ldr	x0, [sp, #8]
    4d6c:	str	x0, [sp, #40]
    4d70:	ldr	x0, [sp, #8]
    4d74:	ldr	x0, [x0, #48]
    4d78:	lsr	x0, x0, #25
    4d7c:	and	x0, x0, #0x7f
    4d80:	add	x0, x0, #0x1
    4d84:	str	x0, [sp, #24]
    4d88:	str	xzr, [sp, #56]
    4d8c:	b	4e20 <decode_embedded_bp_compressed+0xd0>
    4d90:	ldr	x0, [sp, #56]
    4d94:	and	x0, x0, #0x7
    4d98:	cmp	x0, #0x0
    4d9c:	b.ne	4dec <decode_embedded_bp_compressed+0x9c>  // b.any
    4da0:	ldr	x0, [sp, #40]
    4da4:	ldr	x0, [x0]
    4da8:	str	x0, [sp, #48]
    4dac:	ldr	x0, [sp, #40]
    4db0:	add	x0, x0, #0x8
    4db4:	str	x0, [sp, #40]
    4db8:	ldr	x0, [sp, #8]
    4dbc:	add	x0, x0, #0x30
    4dc0:	ldr	x1, [sp, #40]
    4dc4:	cmp	x1, x0
    4dc8:	b.eq	4de0 <decode_embedded_bp_compressed+0x90>  // b.none
    4dcc:	ldr	x0, [sp, #8]
    4dd0:	add	x0, x0, #0x50
    4dd4:	ldr	x1, [sp, #40]
    4dd8:	cmp	x1, x0
    4ddc:	b.ne	4dec <decode_embedded_bp_compressed+0x9c>  // b.any
    4de0:	ldr	x0, [sp, #40]
    4de4:	add	x0, x0, #0x8
    4de8:	str	x0, [sp, #40]
    4dec:	ldr	x0, [sp, #56]
    4df0:	and	w0, w0, #0x7
    4df4:	lsl	w0, w0, #3
    4df8:	ldr	x1, [sp, #48]
    4dfc:	lsr	x2, x1, x0
    4e00:	ldr	x1, [sp, #32]
    4e04:	ldr	x0, [sp, #56]
    4e08:	add	x0, x1, x0
    4e0c:	and	w1, w2, #0xff
    4e10:	strb	w1, [x0]
    4e14:	ldr	x0, [sp, #56]
    4e18:	add	x0, x0, #0x1
    4e1c:	str	x0, [sp, #56]
    4e20:	ldr	x1, [sp, #56]
    4e24:	ldr	x0, [sp, #24]
    4e28:	cmp	x1, x0
    4e2c:	b.cc	4d90 <decode_embedded_bp_compressed+0x40>  // b.lo, b.ul, b.last
    4e30:	mov	w0, #0x0                   	// #0
    4e34:	add	sp, sp, #0x40
    4e38:	ret

0000000000004e3c <zio_read>:
    4e3c:	stp	x29, x30, [sp, #-208]!
    4e40:	mov	x29, sp
    4e44:	stp	x19, x20, [sp, #16]
    4e48:	str	x0, [sp, #104]
    4e4c:	str	w1, [sp, #100]
    4e50:	str	x2, [sp, #88]
    4e54:	str	x3, [sp, #80]
    4e58:	str	x4, [sp, #72]
    4e5c:	str	xzr, [sp, #184]
    4e60:	ldr	x0, [sp, #104]
    4e64:	add	x0, x0, #0x60
    4e68:	add	x2, sp, #0x70
    4e6c:	mov	x3, x0
    4e70:	ldp	x0, x1, [x3]
    4e74:	stp	x0, x1, [x2]
    4e78:	ldp	x0, x1, [x3, #16]
    4e7c:	stp	x0, x1, [x2, #16]
    4e80:	ldr	x0, [sp, #88]
    4e84:	str	xzr, [x0]
    4e88:	ldr	w0, [sp, #100]
    4e8c:	cmp	w0, #0x0
    4e90:	b.ne	4eac <zio_read+0x70>  // b.any
    4e94:	ldr	x0, [sp, #104]
    4e98:	ldr	x0, [x0, #48]
    4e9c:	bl	50 <grub_swap_bytes64>
    4ea0:	lsr	x0, x0, #40
    4ea4:	and	w0, w0, #0xff
    4ea8:	b	4ebc <zio_read+0x80>
    4eac:	ldr	x0, [sp, #104]
    4eb0:	ldr	x0, [x0, #48]
    4eb4:	lsr	x0, x0, #40
    4eb8:	and	w0, w0, #0xff
    4ebc:	str	w0, [sp, #156]
    4ec0:	ldr	w0, [sp, #100]
    4ec4:	cmp	w0, #0x0
    4ec8:	b.ne	4ee4 <zio_read+0xa8>  // b.any
    4ecc:	ldr	x0, [sp, #104]
    4ed0:	ldr	x0, [x0, #48]
    4ed4:	bl	50 <grub_swap_bytes64>
    4ed8:	lsr	x0, x0, #32
    4edc:	and	w0, w0, #0x7f
    4ee0:	b	4ef4 <zio_read+0xb8>
    4ee4:	ldr	x0, [sp, #104]
    4ee8:	ldr	x0, [x0, #48]
    4eec:	lsr	x0, x0, #32
    4ef0:	and	w0, w0, #0x7f
    4ef4:	str	w0, [sp, #152]
    4ef8:	ldr	w0, [sp, #100]
    4efc:	cmp	w0, #0x0
    4f00:	b.ne	4f1c <zio_read+0xe0>  // b.any
    4f04:	ldr	x0, [sp, #104]
    4f08:	ldr	x0, [x0, #48]
    4f0c:	bl	50 <grub_swap_bytes64>
    4f10:	lsr	x0, x0, #60
    4f14:	and	w0, w0, #0x3
    4f18:	b	4f2c <zio_read+0xf0>
    4f1c:	ldr	x0, [sp, #104]
    4f20:	ldr	x0, [x0, #48]
    4f24:	lsr	x0, x0, #60
    4f28:	and	w0, w0, #0x3
    4f2c:	str	w0, [sp, #148]
    4f30:	ldr	x0, [sp, #104]
    4f34:	ldr	x0, [x0, #48]
    4f38:	lsr	x0, x0, #39
    4f3c:	and	x0, x0, #0x1
    4f40:	cmp	x0, #0x0
    4f44:	b.eq	4fe4 <zio_read+0x1a8>  // b.none
    4f48:	ldr	x0, [sp, #104]
    4f4c:	ldr	x0, [x0, #48]
    4f50:	lsr	x0, x0, #40
    4f54:	and	x0, x0, #0xff
    4f58:	cmp	x0, #0x0
    4f5c:	b.eq	4f8c <zio_read+0x150>  // b.none
    4f60:	ldr	x0, [sp, #104]
    4f64:	ldr	x0, [x0, #48]
    4f68:	lsr	x0, x0, #40
    4f6c:	and	x0, x0, #0xff
    4f70:	mov	x2, x0
    4f74:	adrp	x0, 0 <grub_swap_bytes16>
    4f78:	add	x0, x0, #0x0
    4f7c:	ldr	x1, [x0]
    4f80:	mov	w0, #0x18                  	// #24
    4f84:	bl	0 <grub_error>
    4f88:	b	56f0 <zio_read+0x8b4>
    4f8c:	ldr	x0, [sp, #104]
    4f90:	ldr	x0, [x0, #48]
    4f94:	and	x0, x0, #0x1ffffff
    4f98:	add	x0, x0, #0x1
    4f9c:	str	x0, [sp, #200]
    4fa0:	ldr	w0, [sp, #100]
    4fa4:	cmp	w0, #0x0
    4fa8:	b.ne	4fc8 <zio_read+0x18c>  // b.any
    4fac:	ldr	x0, [sp, #104]
    4fb0:	ldr	x0, [x0, #48]
    4fb4:	bl	50 <grub_swap_bytes64>
    4fb8:	lsr	x0, x0, #25
    4fbc:	and	x0, x0, #0x7f
    4fc0:	add	x0, x0, #0x1
    4fc4:	b	4fdc <zio_read+0x1a0>
    4fc8:	ldr	x0, [sp, #104]
    4fcc:	ldr	x0, [x0, #48]
    4fd0:	lsr	x0, x0, #25
    4fd4:	and	x0, x0, #0x7f
    4fd8:	add	x0, x0, #0x1
    4fdc:	str	x0, [sp, #192]
    4fe0:	b	505c <zio_read+0x220>
    4fe4:	ldr	x0, [sp, #104]
    4fe8:	ldr	x0, [x0]
    4fec:	cmp	x0, #0x0
    4ff0:	b.ne	5004 <zio_read+0x1c8>  // b.any
    4ff4:	ldr	x0, [sp, #104]
    4ff8:	ldr	x0, [x0, #8]
    4ffc:	cmp	x0, #0x0
    5000:	b.eq	5044 <zio_read+0x208>  // b.none
    5004:	ldr	w0, [sp, #100]
    5008:	cmp	w0, #0x0
    500c:	b.ne	502c <zio_read+0x1f0>  // b.any
    5010:	ldr	x0, [sp, #104]
    5014:	ldr	x0, [x0, #48]
    5018:	bl	50 <grub_swap_bytes64>
    501c:	and	x0, x0, #0xffff
    5020:	add	x0, x0, #0x1
    5024:	lsl	x0, x0, #9
    5028:	b	5048 <zio_read+0x20c>
    502c:	ldr	x0, [sp, #104]
    5030:	ldr	x0, [x0, #48]
    5034:	and	x0, x0, #0xffff
    5038:	add	x0, x0, #0x1
    503c:	lsl	x0, x0, #9
    5040:	b	5048 <zio_read+0x20c>
    5044:	mov	x0, #0x0                   	// #0
    5048:	str	x0, [sp, #200]
    504c:	ldr	w1, [sp, #100]
    5050:	ldr	x0, [sp, #104]
    5054:	bl	1088 <get_psize>
    5058:	str	x0, [sp, #192]
    505c:	ldr	x0, [sp, #104]
    5060:	ldr	x0, [x0, #48]
    5064:	lsr	x0, x0, #39
    5068:	and	w0, w0, #0x1
    506c:	ldr	x6, [sp, #192]
    5070:	ldr	x5, [sp, #200]
    5074:	mov	w4, w0
    5078:	adrp	x0, 0 <grub_swap_bytes16>
    507c:	add	x0, x0, #0x0
    5080:	ldr	x3, [x0]
    5084:	adrp	x0, 0 <grub_swap_bytes16>
    5088:	add	x0, x0, #0x0
    508c:	ldr	x2, [x0]
    5090:	mov	w1, #0x755                 	// #1877
    5094:	adrp	x0, 0 <grub_swap_bytes16>
    5098:	add	x0, x0, #0x0
    509c:	ldr	x0, [x0]
    50a0:	bl	0 <grub_real_dprintf>
    50a4:	ldr	x0, [sp, #80]
    50a8:	cmp	x0, #0x0
    50ac:	b.eq	50bc <zio_read+0x280>  // b.none
    50b0:	ldr	x0, [sp, #80]
    50b4:	ldr	x1, [sp, #200]
    50b8:	str	x1, [x0]
    50bc:	ldr	w0, [sp, #152]
    50c0:	cmp	w0, #0xf
    50c4:	b.ls	50e4 <zio_read+0x2a8>  // b.plast
    50c8:	ldr	w2, [sp, #152]
    50cc:	adrp	x0, 0 <grub_swap_bytes16>
    50d0:	add	x0, x0, #0x0
    50d4:	ldr	x1, [x0]
    50d8:	mov	w0, #0x18                  	// #24
    50dc:	bl	0 <grub_error>
    50e0:	b	56f0 <zio_read+0x8b4>
    50e4:	ldr	w0, [sp, #152]
    50e8:	cmp	w0, #0x2
    50ec:	b.eq	514c <zio_read+0x310>  // b.none
    50f0:	adrp	x0, 0 <grub_swap_bytes16>
    50f4:	add	x0, x0, #0x0
    50f8:	ldr	x1, [x0]
    50fc:	ldr	w0, [sp, #152]
    5100:	lsl	x0, x0, #4
    5104:	add	x0, x1, x0
    5108:	ldr	x0, [x0, #8]
    510c:	cmp	x0, #0x0
    5110:	b.ne	514c <zio_read+0x310>  // b.any
    5114:	adrp	x0, 0 <grub_swap_bytes16>
    5118:	add	x0, x0, #0x0
    511c:	ldr	x1, [x0]
    5120:	ldr	w0, [sp, #152]
    5124:	lsl	x0, x0, #4
    5128:	add	x0, x1, x0
    512c:	ldr	x0, [x0]
    5130:	mov	x2, x0
    5134:	adrp	x0, 0 <grub_swap_bytes16>
    5138:	add	x0, x0, #0x0
    513c:	ldr	x1, [x0]
    5140:	mov	w0, #0x18                  	// #24
    5144:	bl	0 <grub_error>
    5148:	b	56f0 <zio_read+0x8b4>
    514c:	ldr	w0, [sp, #152]
    5150:	cmp	w0, #0x2
    5154:	b.eq	5170 <zio_read+0x334>  // b.none
    5158:	ldr	x0, [sp, #192]
    515c:	add	x0, x0, #0xf
    5160:	and	x0, x0, #0xfffffffffffffff0
    5164:	bl	0 <grub_malloc>
    5168:	str	x0, [sp, #184]
    516c:	b	5190 <zio_read+0x354>
    5170:	ldr	x0, [sp, #200]
    5174:	bl	0 <grub_malloc>
    5178:	mov	x1, x0
    517c:	ldr	x0, [sp, #88]
    5180:	str	x1, [x0]
    5184:	ldr	x0, [sp, #88]
    5188:	ldr	x0, [x0]
    518c:	str	x0, [sp, #184]
    5190:	ldr	x0, [sp, #184]
    5194:	cmp	x0, #0x0
    5198:	b.ne	51b0 <zio_read+0x374>  // b.any
    519c:	adrp	x0, 0 <grub_swap_bytes16>
    51a0:	add	x0, x0, #0x0
    51a4:	ldr	x0, [x0]
    51a8:	ldr	w0, [x0]
    51ac:	b	56f0 <zio_read+0x8b4>
    51b0:	ldr	w4, [sp, #100]
    51b4:	adrp	x0, 0 <grub_swap_bytes16>
    51b8:	add	x0, x0, #0x0
    51bc:	ldr	x3, [x0]
    51c0:	adrp	x0, 0 <grub_swap_bytes16>
    51c4:	add	x0, x0, #0x0
    51c8:	ldr	x2, [x0]
    51cc:	mov	w1, #0x76b                 	// #1899
    51d0:	adrp	x0, 0 <grub_swap_bytes16>
    51d4:	add	x0, x0, #0x0
    51d8:	ldr	x0, [x0]
    51dc:	bl	0 <grub_real_dprintf>
    51e0:	ldr	x0, [sp, #104]
    51e4:	ldr	x0, [x0, #48]
    51e8:	lsr	x0, x0, #39
    51ec:	and	x0, x0, #0x1
    51f0:	cmp	x0, #0x0
    51f4:	b.eq	520c <zio_read+0x3d0>  // b.none
    51f8:	ldr	x1, [sp, #184]
    51fc:	ldr	x0, [sp, #104]
    5200:	bl	4d50 <decode_embedded_bp_compressed>
    5204:	str	w0, [sp, #180]
    5208:	b	5260 <zio_read+0x424>
    520c:	ldr	x3, [sp, #72]
    5210:	ldr	x2, [sp, #184]
    5214:	ldr	w1, [sp, #100]
    5218:	ldr	x0, [sp, #104]
    521c:	bl	4b98 <zio_read_data>
    5220:	str	w0, [sp, #180]
    5224:	ldr	w0, [sp, #152]
    5228:	cmp	w0, #0x2
    522c:	b.eq	5260 <zio_read+0x424>  // b.none
    5230:	ldr	x1, [sp, #184]
    5234:	ldr	x0, [sp, #192]
    5238:	add	x3, x1, x0
    523c:	ldr	x0, [sp, #192]
    5240:	add	x0, x0, #0xf
    5244:	and	x1, x0, #0xfffffffffffffff0
    5248:	ldr	x0, [sp, #192]
    524c:	sub	x0, x1, x0
    5250:	mov	x2, x0
    5254:	mov	w1, #0x0                   	// #0
    5258:	mov	x0, x3
    525c:	bl	0 <grub_memset>
    5260:	ldr	w0, [sp, #180]
    5264:	cmp	w0, #0x0
    5268:	b.eq	5284 <zio_read+0x448>  // b.none
    526c:	ldr	x0, [sp, #184]
    5270:	bl	0 <grub_free>
    5274:	ldr	x0, [sp, #88]
    5278:	str	xzr, [x0]
    527c:	ldr	w0, [sp, #180]
    5280:	b	56f0 <zio_read+0x8b4>
    5284:	ldr	x0, [sp, #104]
    5288:	ldr	x0, [x0, #48]
    528c:	lsr	x0, x0, #39
    5290:	and	x0, x0, #0x1
    5294:	cmp	x0, #0x0
    5298:	b.ne	5320 <zio_read+0x4e4>  // b.any
    529c:	add	x2, sp, #0x20
    52a0:	add	x3, sp, #0x70
    52a4:	ldp	x0, x1, [x3]
    52a8:	stp	x0, x1, [x2]
    52ac:	ldp	x0, x1, [x3, #16]
    52b0:	stp	x0, x1, [x2, #16]
    52b4:	add	x0, sp, #0x20
    52b8:	ldr	x4, [sp, #192]
    52bc:	ldr	x3, [sp, #184]
    52c0:	ldr	w2, [sp, #100]
    52c4:	ldr	w1, [sp, #156]
    52c8:	bl	8d4 <zio_checksum_verify>
    52cc:	str	w0, [sp, #180]
    52d0:	ldr	w0, [sp, #180]
    52d4:	cmp	w0, #0x0
    52d8:	b.eq	5320 <zio_read+0x4e4>  // b.none
    52dc:	adrp	x0, 0 <grub_swap_bytes16>
    52e0:	add	x0, x0, #0x0
    52e4:	ldr	x3, [x0]
    52e8:	adrp	x0, 0 <grub_swap_bytes16>
    52ec:	add	x0, x0, #0x0
    52f0:	ldr	x2, [x0]
    52f4:	mov	w1, #0x782                 	// #1922
    52f8:	adrp	x0, 0 <grub_swap_bytes16>
    52fc:	add	x0, x0, #0x0
    5300:	ldr	x0, [x0]
    5304:	bl	0 <grub_real_dprintf>
    5308:	ldr	x0, [sp, #184]
    530c:	bl	0 <grub_free>
    5310:	ldr	x0, [sp, #88]
    5314:	str	xzr, [x0]
    5318:	ldr	w0, [sp, #180]
    531c:	b	56f0 <zio_read+0x8b4>
    5320:	ldr	w0, [sp, #148]
    5324:	cmp	w0, #0x0
    5328:	b.eq	5634 <zio_read+0x7f8>  // b.none
    532c:	adrp	x0, 0 <grub_swap_bytes16>
    5330:	add	x0, x0, #0x0
    5334:	ldr	x0, [x0]
    5338:	ldr	x0, [x0]
    533c:	cmp	x0, #0x0
    5340:	b.ne	536c <zio_read+0x530>  // b.any
    5344:	adrp	x0, 0 <grub_swap_bytes16>
    5348:	add	x0, x0, #0x0
    534c:	ldr	x2, [x0]
    5350:	adrp	x0, 0 <grub_swap_bytes16>
    5354:	add	x0, x0, #0x0
    5358:	ldr	x1, [x0]
    535c:	mov	w0, #0x9                   	// #9
    5360:	bl	0 <grub_error>
    5364:	str	w0, [sp, #180]
    5368:	b	5610 <zio_read+0x7d4>
    536c:	str	wzr, [sp, #172]
    5370:	str	xzr, [sp, #160]
    5374:	str	wzr, [sp, #176]
    5378:	b	5438 <zio_read+0x5fc>
    537c:	ldr	x0, [sp, #72]
    5380:	ldr	x2, [x0, #1648]
    5384:	ldr	w1, [sp, #176]
    5388:	mov	x0, x1
    538c:	lsl	x0, x0, #1
    5390:	add	x0, x0, x1
    5394:	lsl	x0, x0, #3
    5398:	add	x0, x2, x0
    539c:	ldr	x19, [x0, #8]
    53a0:	ldr	w0, [sp, #100]
    53a4:	cmp	w0, #0x0
    53a8:	b.ne	53bc <zio_read+0x580>  // b.any
    53ac:	ldr	x0, [sp, #104]
    53b0:	ldr	x0, [x0, #80]
    53b4:	bl	50 <grub_swap_bytes64>
    53b8:	b	53c4 <zio_read+0x588>
    53bc:	ldr	x0, [sp, #104]
    53c0:	ldr	x0, [x0, #80]
    53c4:	cmp	x0, x19
    53c8:	b.cc	542c <zio_read+0x5f0>  // b.lo, b.ul, b.last
    53cc:	ldr	x0, [sp, #72]
    53d0:	ldr	x2, [x0, #1648]
    53d4:	ldr	w1, [sp, #176]
    53d8:	mov	x0, x1
    53dc:	lsl	x0, x0, #1
    53e0:	add	x0, x0, x1
    53e4:	lsl	x0, x0, #3
    53e8:	add	x0, x2, x0
    53ec:	ldr	x0, [x0, #8]
    53f0:	ldr	x1, [sp, #160]
    53f4:	cmp	x1, x0
    53f8:	b.cs	542c <zio_read+0x5f0>  // b.hs, b.nlast
    53fc:	ldr	w0, [sp, #176]
    5400:	str	w0, [sp, #172]
    5404:	ldr	x0, [sp, #72]
    5408:	ldr	x2, [x0, #1648]
    540c:	ldr	w1, [sp, #176]
    5410:	mov	x0, x1
    5414:	lsl	x0, x0, #1
    5418:	add	x0, x0, x1
    541c:	lsl	x0, x0, #3
    5420:	add	x0, x2, x0
    5424:	ldr	x0, [x0, #8]
    5428:	str	x0, [sp, #160]
    542c:	ldr	w0, [sp, #176]
    5430:	add	w0, w0, #0x1
    5434:	str	w0, [sp, #176]
    5438:	ldr	w1, [sp, #176]
    543c:	ldr	x0, [sp, #72]
    5440:	ldr	x0, [x0, #1640]
    5444:	cmp	x1, x0
    5448:	b.cc	537c <zio_read+0x540>  // b.lo, b.ul, b.last
    544c:	ldr	x0, [sp, #160]
    5450:	cmp	x0, #0x0
    5454:	b.ne	54d4 <zio_read+0x698>  // b.any
    5458:	ldr	x0, [sp, #184]
    545c:	bl	0 <grub_free>
    5460:	ldr	x0, [sp, #88]
    5464:	str	xzr, [x0]
    5468:	ldr	w0, [sp, #100]
    546c:	cmp	w0, #0x0
    5470:	b.ne	5484 <zio_read+0x648>  // b.any
    5474:	ldr	x0, [sp, #104]
    5478:	ldr	x0, [x0, #80]
    547c:	bl	50 <grub_swap_bytes64>
    5480:	b	548c <zio_read+0x650>
    5484:	ldr	x0, [sp, #104]
    5488:	ldr	x0, [x0, #80]
    548c:	mov	x4, x0
    5490:	adrp	x0, 0 <grub_swap_bytes16>
    5494:	add	x0, x0, #0x0
    5498:	ldr	x3, [x0]
    549c:	adrp	x0, 0 <grub_swap_bytes16>
    54a0:	add	x0, x0, #0x0
    54a4:	ldr	x2, [x0]
    54a8:	mov	w1, #0x79f                 	// #1951
    54ac:	adrp	x0, 0 <grub_swap_bytes16>
    54b0:	add	x0, x0, #0x0
    54b4:	ldr	x0, [x0]
    54b8:	bl	0 <grub_real_dprintf>
    54bc:	adrp	x0, 0 <grub_swap_bytes16>
    54c0:	add	x0, x0, #0x0
    54c4:	ldr	x1, [x0]
    54c8:	mov	w0, #0x9                   	// #9
    54cc:	bl	0 <grub_error>
    54d0:	b	56f0 <zio_read+0x8b4>
    54d4:	ldr	x0, [sp, #72]
    54d8:	ldr	x2, [x0, #1648]
    54dc:	ldr	w1, [sp, #172]
    54e0:	mov	x0, x1
    54e4:	lsl	x0, x0, #1
    54e8:	add	x0, x0, x1
    54ec:	lsl	x0, x0, #3
    54f0:	add	x0, x2, x0
    54f4:	ldr	x19, [x0, #8]
    54f8:	ldr	x0, [sp, #72]
    54fc:	ldr	x2, [x0, #1648]
    5500:	ldr	w1, [sp, #172]
    5504:	mov	x0, x1
    5508:	lsl	x0, x0, #1
    550c:	add	x0, x0, x1
    5510:	lsl	x0, x0, #3
    5514:	add	x0, x2, x0
    5518:	ldr	x20, [x0]
    551c:	ldr	w0, [sp, #100]
    5520:	cmp	w0, #0x0
    5524:	b.ne	5538 <zio_read+0x6fc>  // b.any
    5528:	ldr	x0, [sp, #104]
    552c:	ldr	x0, [x0, #80]
    5530:	bl	50 <grub_swap_bytes64>
    5534:	b	5540 <zio_read+0x704>
    5538:	ldr	x0, [sp, #104]
    553c:	ldr	x0, [x0, #80]
    5540:	mov	x7, x0
    5544:	mov	x6, x20
    5548:	mov	x5, x19
    554c:	ldr	w4, [sp, #172]
    5550:	adrp	x0, 0 <grub_swap_bytes16>
    5554:	add	x0, x0, #0x0
    5558:	ldr	x3, [x0]
    555c:	adrp	x0, 0 <grub_swap_bytes16>
    5560:	add	x0, x0, #0x0
    5564:	ldr	x2, [x0]
    5568:	mov	w1, #0x7a4                 	// #1956
    556c:	adrp	x0, 0 <grub_swap_bytes16>
    5570:	add	x0, x0, #0x0
    5574:	ldr	x0, [x0]
    5578:	bl	0 <grub_real_dprintf>
    557c:	adrp	x0, 0 <grub_swap_bytes16>
    5580:	add	x0, x0, #0x0
    5584:	ldr	x0, [x0]
    5588:	ldr	x7, [x0]
    558c:	ldr	x0, [sp, #72]
    5590:	ldr	x2, [x0, #1648]
    5594:	ldr	w1, [sp, #172]
    5598:	mov	x0, x1
    559c:	lsl	x0, x0, #1
    55a0:	add	x0, x0, x1
    55a4:	lsl	x0, x0, #3
    55a8:	add	x0, x2, x0
    55ac:	ldr	x8, [x0]
    55b0:	ldr	x0, [sp, #72]
    55b4:	ldr	x2, [x0, #1648]
    55b8:	ldr	w1, [sp, #172]
    55bc:	mov	x0, x1
    55c0:	lsl	x0, x0, #1
    55c4:	add	x0, x0, x1
    55c8:	lsl	x0, x0, #3
    55cc:	add	x0, x2, x0
    55d0:	ldr	x9, [x0, #16]
    55d4:	ldr	w0, [sp, #148]
    55d8:	lsl	x0, x0, #4
    55dc:	ldr	x1, [sp, #104]
    55e0:	add	x1, x1, x0
    55e4:	add	x0, sp, #0x70
    55e8:	add	x0, x0, #0x14
    55ec:	ldr	w6, [sp, #100]
    55f0:	mov	x5, x0
    55f4:	ldr	x4, [sp, #192]
    55f8:	ldr	x3, [sp, #184]
    55fc:	mov	x2, x1
    5600:	mov	x1, x9
    5604:	mov	x0, x8
    5608:	blr	x7
    560c:	str	w0, [sp, #180]
    5610:	ldr	w0, [sp, #180]
    5614:	cmp	w0, #0x0
    5618:	b.eq	5634 <zio_read+0x7f8>  // b.none
    561c:	ldr	x0, [sp, #184]
    5620:	bl	0 <grub_free>
    5624:	ldr	x0, [sp, #88]
    5628:	str	xzr, [x0]
    562c:	ldr	w0, [sp, #180]
    5630:	b	56f0 <zio_read+0x8b4>
    5634:	ldr	w0, [sp, #152]
    5638:	cmp	w0, #0x2
    563c:	b.eq	56ec <zio_read+0x8b0>  // b.none
    5640:	ldr	x0, [sp, #200]
    5644:	bl	0 <grub_malloc>
    5648:	mov	x1, x0
    564c:	ldr	x0, [sp, #88]
    5650:	str	x1, [x0]
    5654:	ldr	x0, [sp, #88]
    5658:	ldr	x0, [x0]
    565c:	cmp	x0, #0x0
    5660:	b.ne	5680 <zio_read+0x844>  // b.any
    5664:	ldr	x0, [sp, #184]
    5668:	bl	0 <grub_free>
    566c:	adrp	x0, 0 <grub_swap_bytes16>
    5670:	add	x0, x0, #0x0
    5674:	ldr	x0, [x0]
    5678:	ldr	w0, [x0]
    567c:	b	56f0 <zio_read+0x8b4>
    5680:	adrp	x0, 0 <grub_swap_bytes16>
    5684:	add	x0, x0, #0x0
    5688:	ldr	x1, [x0]
    568c:	ldr	w0, [sp, #152]
    5690:	lsl	x0, x0, #4
    5694:	add	x0, x1, x0
    5698:	ldr	x4, [x0, #8]
    569c:	ldr	x0, [sp, #88]
    56a0:	ldr	x0, [x0]
    56a4:	ldr	x3, [sp, #200]
    56a8:	ldr	x2, [sp, #192]
    56ac:	mov	x1, x0
    56b0:	ldr	x0, [sp, #184]
    56b4:	blr	x4
    56b8:	str	w0, [sp, #180]
    56bc:	ldr	x0, [sp, #184]
    56c0:	bl	0 <grub_free>
    56c4:	ldr	w0, [sp, #180]
    56c8:	cmp	w0, #0x0
    56cc:	b.eq	56ec <zio_read+0x8b0>  // b.none
    56d0:	ldr	x0, [sp, #88]
    56d4:	ldr	x0, [x0]
    56d8:	bl	0 <grub_free>
    56dc:	ldr	x0, [sp, #88]
    56e0:	str	xzr, [x0]
    56e4:	ldr	w0, [sp, #180]
    56e8:	b	56f0 <zio_read+0x8b4>
    56ec:	mov	w0, #0x0                   	// #0
    56f0:	ldp	x19, x20, [sp, #16]
    56f4:	ldp	x29, x30, [sp], #208
    56f8:	ret
    56fc:	nop
	...

0000000000005780 <dmu_read>:
    5780:	stp	x29, x30, [sp, #-128]!
    5784:	mov	x29, sp
    5788:	str	x0, [sp, #56]
    578c:	str	x1, [sp, #48]
    5790:	str	x2, [sp, #40]
    5794:	str	x3, [sp, #32]
    5798:	str	x4, [sp, #24]
    579c:	ldr	x0, [sp, #56]
    57a0:	add	x0, x0, #0x40
    57a4:	str	x0, [sp, #112]
    57a8:	ldr	x0, [sp, #56]
    57ac:	ldrb	w0, [x0, #1]
    57b0:	sub	w0, w0, #0x7
    57b4:	str	w0, [sp, #100]
    57b8:	str	xzr, [sp, #64]
    57bc:	str	wzr, [sp, #104]
    57c0:	mov	x0, #0x80                  	// #128
    57c4:	bl	0 <grub_malloc>
    57c8:	str	x0, [sp, #88]
    57cc:	ldr	x0, [sp, #88]
    57d0:	cmp	x0, #0x0
    57d4:	b.ne	57ec <dmu_read+0x6c>  // b.any
    57d8:	adrp	x0, 0 <grub_swap_bytes16>
    57dc:	add	x0, x0, #0x0
    57e0:	ldr	x0, [x0]
    57e4:	ldr	w0, [x0]
    57e8:	b	5b50 <dmu_read+0x3d0>
    57ec:	ldr	x0, [sp, #56]
    57f0:	ldr	w0, [x0, #512]
    57f4:	str	w0, [sp, #108]
    57f8:	ldr	x0, [sp, #56]
    57fc:	ldrb	w0, [x0, #2]
    5800:	sub	w0, w0, #0x1
    5804:	str	w0, [sp, #124]
    5808:	b	5afc <dmu_read+0x37c>
    580c:	ldr	w4, [sp, #108]
    5810:	adrp	x0, 0 <grub_swap_bytes16>
    5814:	add	x0, x0, #0x0
    5818:	ldr	x3, [x0]
    581c:	adrp	x0, 0 <grub_swap_bytes16>
    5820:	add	x0, x0, #0x0
    5824:	ldr	x2, [x0]
    5828:	mov	w1, #0x7e7                 	// #2023
    582c:	adrp	x0, 0 <grub_swap_bytes16>
    5830:	add	x0, x0, #0x0
    5834:	ldr	x0, [x0]
    5838:	bl	0 <grub_real_dprintf>
    583c:	ldr	w1, [sp, #100]
    5840:	ldr	w0, [sp, #124]
    5844:	mul	w0, w1, w0
    5848:	ldr	x1, [sp, #48]
    584c:	lsr	x1, x1, x0
    5850:	ldr	w0, [sp, #100]
    5854:	mov	w2, #0x1                   	// #1
    5858:	lsl	w0, w2, w0
    585c:	sub	w0, w0, #0x1
    5860:	sxtw	x0, w0
    5864:	and	x0, x1, x0
    5868:	str	x0, [sp, #80]
    586c:	ldr	x0, [sp, #80]
    5870:	lsl	x0, x0, #7
    5874:	ldr	x1, [sp, #112]
    5878:	add	x1, x1, x0
    587c:	ldr	x0, [sp, #88]
    5880:	ldp	x2, x3, [x1]
    5884:	stp	x2, x3, [x0]
    5888:	ldp	x2, x3, [x1, #16]
    588c:	stp	x2, x3, [x0, #16]
    5890:	ldp	x2, x3, [x1, #32]
    5894:	stp	x2, x3, [x0, #32]
    5898:	ldp	x2, x3, [x1, #48]
    589c:	stp	x2, x3, [x0, #48]
    58a0:	ldp	x2, x3, [x1, #64]
    58a4:	stp	x2, x3, [x0, #64]
    58a8:	ldp	x2, x3, [x1, #80]
    58ac:	stp	x2, x3, [x0, #80]
    58b0:	ldp	x2, x3, [x1, #96]
    58b4:	stp	x2, x3, [x0, #96]
    58b8:	ldp	x2, x3, [x1, #112]
    58bc:	stp	x2, x3, [x0, #112]
    58c0:	ldr	x0, [sp, #56]
    58c4:	add	x0, x0, #0x40
    58c8:	ldr	x1, [sp, #112]
    58cc:	cmp	x1, x0
    58d0:	b.eq	58e0 <dmu_read+0x160>  // b.none
    58d4:	ldr	x0, [sp, #112]
    58d8:	bl	0 <grub_free>
    58dc:	str	xzr, [sp, #112]
    58e0:	ldr	x0, [sp, #88]
    58e4:	ldr	x0, [x0]
    58e8:	cmp	x0, #0x0
    58ec:	b.ne	59c8 <dmu_read+0x248>  // b.any
    58f0:	ldr	x0, [sp, #88]
    58f4:	ldr	x0, [x0, #8]
    58f8:	cmp	x0, #0x0
    58fc:	b.ne	59c8 <dmu_read+0x248>  // b.any
    5900:	ldr	x0, [sp, #56]
    5904:	ldr	w0, [x0, #512]
    5908:	cmp	w0, #0x0
    590c:	b.ne	592c <dmu_read+0x1ac>  // b.any
    5910:	ldr	x0, [sp, #56]
    5914:	ldrh	w0, [x0, #8]
    5918:	bl	0 <grub_swap_bytes16>
    591c:	and	w0, w0, #0xffff
    5920:	lsl	w0, w0, #9
    5924:	sxtw	x0, w0
    5928:	b	593c <dmu_read+0x1bc>
    592c:	ldr	x0, [sp, #56]
    5930:	ldrh	w0, [x0, #8]
    5934:	lsl	w0, w0, #9
    5938:	sxtw	x0, w0
    593c:	str	x0, [sp, #72]
    5940:	ldr	x0, [sp, #72]
    5944:	bl	0 <grub_malloc>
    5948:	mov	x1, x0
    594c:	ldr	x0, [sp, #40]
    5950:	str	x1, [x0]
    5954:	ldr	x0, [sp, #40]
    5958:	ldr	x0, [x0]
    595c:	cmp	x0, #0x0
    5960:	b.ne	597c <dmu_read+0x1fc>  // b.any
    5964:	adrp	x0, 0 <grub_swap_bytes16>
    5968:	add	x0, x0, #0x0
    596c:	ldr	x0, [x0]
    5970:	ldr	w0, [x0]
    5974:	str	w0, [sp, #104]
    5978:	b	5b10 <dmu_read+0x390>
    597c:	ldr	x0, [sp, #40]
    5980:	ldr	x0, [x0]
    5984:	ldr	x2, [sp, #72]
    5988:	mov	w1, #0x0                   	// #0
    598c:	bl	0 <grub_memset>
    5990:	ldr	w0, [sp, #108]
    5994:	cmp	w0, #0x0
    5998:	b.ne	59b4 <dmu_read+0x234>  // b.any
    599c:	ldr	x0, [sp, #88]
    59a0:	ldr	x0, [x0, #48]
    59a4:	bl	50 <grub_swap_bytes64>
    59a8:	lsr	x0, x0, #63
    59ac:	and	w0, w0, #0x1
    59b0:	b	59c0 <dmu_read+0x240>
    59b4:	ldr	x0, [sp, #88]
    59b8:	ldr	x0, [x0, #48]
    59bc:	lsr	x0, x0, #63
    59c0:	str	w0, [sp, #108]
    59c4:	b	5b10 <dmu_read+0x390>
    59c8:	ldr	w0, [sp, #124]
    59cc:	cmp	w0, #0x0
    59d0:	b.ne	5a58 <dmu_read+0x2d8>  // b.any
    59d4:	ldr	w4, [sp, #108]
    59d8:	adrp	x0, 0 <grub_swap_bytes16>
    59dc:	add	x0, x0, #0x0
    59e0:	ldr	x3, [x0]
    59e4:	adrp	x0, 0 <grub_swap_bytes16>
    59e8:	add	x0, x0, #0x0
    59ec:	ldr	x2, [x0]
    59f0:	mov	w1, #0x801                 	// #2049
    59f4:	adrp	x0, 0 <grub_swap_bytes16>
    59f8:	add	x0, x0, #0x0
    59fc:	ldr	x0, [x0]
    5a00:	bl	0 <grub_real_dprintf>
    5a04:	ldr	x4, [sp, #24]
    5a08:	mov	x3, #0x0                   	// #0
    5a0c:	ldr	x2, [sp, #40]
    5a10:	ldr	w1, [sp, #108]
    5a14:	ldr	x0, [sp, #88]
    5a18:	bl	4e3c <zio_read>
    5a1c:	str	w0, [sp, #104]
    5a20:	ldr	w0, [sp, #108]
    5a24:	cmp	w0, #0x0
    5a28:	b.ne	5a44 <dmu_read+0x2c4>  // b.any
    5a2c:	ldr	x0, [sp, #88]
    5a30:	ldr	x0, [x0, #48]
    5a34:	bl	50 <grub_swap_bytes64>
    5a38:	lsr	x0, x0, #63
    5a3c:	and	w0, w0, #0x1
    5a40:	b	5a50 <dmu_read+0x2d0>
    5a44:	ldr	x0, [sp, #88]
    5a48:	ldr	x0, [x0, #48]
    5a4c:	lsr	x0, x0, #63
    5a50:	str	w0, [sp, #108]
    5a54:	b	5b10 <dmu_read+0x390>
    5a58:	ldr	w4, [sp, #108]
    5a5c:	adrp	x0, 0 <grub_swap_bytes16>
    5a60:	add	x0, x0, #0x0
    5a64:	ldr	x3, [x0]
    5a68:	adrp	x0, 0 <grub_swap_bytes16>
    5a6c:	add	x0, x0, #0x0
    5a70:	ldr	x2, [x0]
    5a74:	mov	w1, #0x806                 	// #2054
    5a78:	adrp	x0, 0 <grub_swap_bytes16>
    5a7c:	add	x0, x0, #0x0
    5a80:	ldr	x0, [x0]
    5a84:	bl	0 <grub_real_dprintf>
    5a88:	add	x0, sp, #0x40
    5a8c:	ldr	x4, [sp, #24]
    5a90:	mov	x3, #0x0                   	// #0
    5a94:	mov	x2, x0
    5a98:	ldr	w1, [sp, #108]
    5a9c:	ldr	x0, [sp, #88]
    5aa0:	bl	4e3c <zio_read>
    5aa4:	str	w0, [sp, #104]
    5aa8:	ldr	w0, [sp, #108]
    5aac:	cmp	w0, #0x0
    5ab0:	b.ne	5acc <dmu_read+0x34c>  // b.any
    5ab4:	ldr	x0, [sp, #88]
    5ab8:	ldr	x0, [x0, #48]
    5abc:	bl	50 <grub_swap_bytes64>
    5ac0:	lsr	x0, x0, #63
    5ac4:	and	w0, w0, #0x1
    5ac8:	b	5ad8 <dmu_read+0x358>
    5acc:	ldr	x0, [sp, #88]
    5ad0:	ldr	x0, [x0, #48]
    5ad4:	lsr	x0, x0, #63
    5ad8:	str	w0, [sp, #108]
    5adc:	ldr	w0, [sp, #104]
    5ae0:	cmp	w0, #0x0
    5ae4:	b.ne	5b0c <dmu_read+0x38c>  // b.any
    5ae8:	ldr	x0, [sp, #64]
    5aec:	str	x0, [sp, #112]
    5af0:	ldr	w0, [sp, #124]
    5af4:	sub	w0, w0, #0x1
    5af8:	str	w0, [sp, #124]
    5afc:	ldr	w0, [sp, #124]
    5b00:	cmp	w0, #0x0
    5b04:	b.ge	580c <dmu_read+0x8c>  // b.tcont
    5b08:	b	5b10 <dmu_read+0x390>
    5b0c:	nop
    5b10:	ldr	x0, [sp, #56]
    5b14:	add	x0, x0, #0x40
    5b18:	ldr	x1, [sp, #112]
    5b1c:	cmp	x1, x0
    5b20:	b.eq	5b2c <dmu_read+0x3ac>  // b.none
    5b24:	ldr	x0, [sp, #112]
    5b28:	bl	0 <grub_free>
    5b2c:	ldr	x0, [sp, #32]
    5b30:	cmp	x0, #0x0
    5b34:	b.eq	5b44 <dmu_read+0x3c4>  // b.none
    5b38:	ldr	x0, [sp, #32]
    5b3c:	ldr	w1, [sp, #108]
    5b40:	str	w1, [x0]
    5b44:	ldr	x0, [sp, #88]
    5b48:	bl	0 <grub_free>
    5b4c:	ldr	w0, [sp, #104]
    5b50:	ldp	x29, x30, [sp], #128
    5b54:	ret
	...

0000000000005b78 <mzap_lookup>:
    5b78:	stp	x29, x30, [sp, #-96]!
    5b7c:	mov	x29, sp
    5b80:	str	x0, [sp, #56]
    5b84:	str	w1, [sp, #52]
    5b88:	str	w2, [sp, #48]
    5b8c:	str	x3, [sp, #40]
    5b90:	str	x4, [sp, #32]
    5b94:	str	w5, [sp, #28]
    5b98:	ldr	x0, [sp, #56]
    5b9c:	add	x0, x0, #0x40
    5ba0:	str	x0, [sp, #80]
    5ba4:	ldr	w0, [sp, #48]
    5ba8:	cmp	w0, #0x3f
    5bac:	b.hi	5bcc <mzap_lookup+0x54>  // b.pmore
    5bb0:	ldr	x2, [sp, #40]
    5bb4:	adrp	x0, 0 <grub_swap_bytes16>
    5bb8:	add	x0, x0, #0x0
    5bbc:	ldr	x1, [x0]
    5bc0:	mov	w0, #0x5                   	// #5
    5bc4:	bl	0 <grub_error>
    5bc8:	b	5ccc <mzap_lookup+0x154>
    5bcc:	ldr	w0, [sp, #48]
    5bd0:	lsr	w0, w0, #6
    5bd4:	sub	w0, w0, #0x1
    5bd8:	str	w0, [sp, #76]
    5bdc:	str	wzr, [sp, #92]
    5be0:	b	5ca4 <mzap_lookup+0x12c>
    5be4:	ldr	w0, [sp, #28]
    5be8:	cmp	w0, #0x0
    5bec:	b.eq	5c1c <mzap_lookup+0xa4>  // b.none
    5bf0:	ldr	w0, [sp, #92]
    5bf4:	lsl	x0, x0, #6
    5bf8:	ldr	x1, [sp, #80]
    5bfc:	add	x0, x1, x0
    5c00:	add	x0, x0, #0xe
    5c04:	ldr	x1, [sp, #40]
    5c08:	bl	19c <grub_strcasecmp>
    5c0c:	cmp	w0, #0x0
    5c10:	cset	w0, eq  // eq = none
    5c14:	and	w0, w0, #0xff
    5c18:	b	5c44 <mzap_lookup+0xcc>
    5c1c:	ldr	w0, [sp, #92]
    5c20:	lsl	x0, x0, #6
    5c24:	ldr	x1, [sp, #80]
    5c28:	add	x0, x1, x0
    5c2c:	add	x0, x0, #0xe
    5c30:	ldr	x1, [sp, #40]
    5c34:	bl	0 <grub_strcmp>
    5c38:	cmp	w0, #0x0
    5c3c:	cset	w0, eq  // eq = none
    5c40:	and	w0, w0, #0xff
    5c44:	cmp	w0, #0x0
    5c48:	b.eq	5c98 <mzap_lookup+0x120>  // b.none
    5c4c:	ldr	w0, [sp, #52]
    5c50:	cmp	w0, #0x0
    5c54:	b.ne	5c74 <mzap_lookup+0xfc>  // b.any
    5c58:	ldr	w0, [sp, #92]
    5c5c:	lsl	x0, x0, #6
    5c60:	ldr	x1, [sp, #80]
    5c64:	add	x0, x1, x0
    5c68:	ldr	x0, [x0]
    5c6c:	bl	50 <grub_swap_bytes64>
    5c70:	b	5c88 <mzap_lookup+0x110>
    5c74:	ldr	w0, [sp, #92]
    5c78:	lsl	x0, x0, #6
    5c7c:	ldr	x1, [sp, #80]
    5c80:	add	x0, x1, x0
    5c84:	ldr	x0, [x0]
    5c88:	ldr	x1, [sp, #32]
    5c8c:	str	x0, [x1]
    5c90:	mov	w0, #0x0                   	// #0
    5c94:	b	5ccc <mzap_lookup+0x154>
    5c98:	ldr	w0, [sp, #92]
    5c9c:	add	w0, w0, #0x1
    5ca0:	str	w0, [sp, #92]
    5ca4:	ldr	w1, [sp, #92]
    5ca8:	ldr	w0, [sp, #76]
    5cac:	cmp	w1, w0
    5cb0:	b.cc	5be4 <mzap_lookup+0x6c>  // b.lo, b.ul, b.last
    5cb4:	ldr	x2, [sp, #40]
    5cb8:	adrp	x0, 0 <grub_swap_bytes16>
    5cbc:	add	x0, x0, #0x0
    5cc0:	ldr	x1, [x0]
    5cc4:	mov	w0, #0x5                   	// #5
    5cc8:	bl	0 <grub_error>
    5ccc:	ldp	x29, x30, [sp], #96
    5cd0:	ret
    5cd4:	nop
	...

0000000000005ce0 <mzap_iterate>:
    5ce0:	stp	x29, x30, [sp, #-96]!
    5ce4:	mov	x29, sp
    5ce8:	str	x19, [sp, #16]
    5cec:	str	x0, [sp, #56]
    5cf0:	str	w1, [sp, #52]
    5cf4:	str	w2, [sp, #48]
    5cf8:	str	x3, [sp, #40]
    5cfc:	str	x4, [sp, #32]
    5d00:	ldr	x0, [sp, #56]
    5d04:	add	x0, x0, #0x40
    5d08:	str	x0, [sp, #80]
    5d0c:	ldr	w0, [sp, #48]
    5d10:	add	w1, w0, #0x3f
    5d14:	cmp	w0, #0x0
    5d18:	csel	w0, w1, w0, lt  // lt = tstop
    5d1c:	asr	w0, w0, #6
    5d20:	sub	w0, w0, #0x1
    5d24:	str	w0, [sp, #76]
    5d28:	str	wzr, [sp, #92]
    5d2c:	b	5e28 <mzap_iterate+0x148>
    5d30:	ldrsw	x0, [sp, #92]
    5d34:	lsl	x0, x0, #6
    5d38:	ldr	x1, [sp, #80]
    5d3c:	add	x0, x1, x0
    5d40:	add	x2, x0, #0xe
    5d44:	ldrsw	x0, [sp, #92]
    5d48:	lsl	x0, x0, #6
    5d4c:	ldr	x1, [sp, #80]
    5d50:	add	x0, x1, x0
    5d54:	ldr	x0, [x0]
    5d58:	mov	x3, x0
    5d5c:	ldrsw	x0, [sp, #92]
    5d60:	lsl	x0, x0, #6
    5d64:	ldr	x1, [sp, #80]
    5d68:	add	x0, x1, x0
    5d6c:	ldr	w0, [x0, #8]
    5d70:	mov	w6, w0
    5d74:	mov	x5, x3
    5d78:	mov	x4, x2
    5d7c:	adrp	x0, 0 <grub_swap_bytes16>
    5d80:	add	x0, x0, #0x0
    5d84:	ldr	x3, [x0]
    5d88:	adrp	x0, 0 <grub_swap_bytes16>
    5d8c:	add	x0, x0, #0x0
    5d90:	ldr	x2, [x0]
    5d94:	mov	w1, #0x83e                 	// #2110
    5d98:	adrp	x0, 0 <grub_swap_bytes16>
    5d9c:	add	x0, x0, #0x0
    5da0:	ldr	x0, [x0]
    5da4:	bl	0 <grub_real_dprintf>
    5da8:	ldrsw	x0, [sp, #92]
    5dac:	lsl	x0, x0, #6
    5db0:	ldr	x1, [sp, #80]
    5db4:	add	x0, x1, x0
    5db8:	add	x19, x0, #0xe
    5dbc:	ldr	w0, [sp, #52]
    5dc0:	cmp	w0, #0x0
    5dc4:	b.ne	5de4 <mzap_iterate+0x104>  // b.any
    5dc8:	ldrsw	x0, [sp, #92]
    5dcc:	lsl	x0, x0, #6
    5dd0:	ldr	x1, [sp, #80]
    5dd4:	add	x0, x1, x0
    5dd8:	ldr	x0, [x0]
    5ddc:	bl	50 <grub_swap_bytes64>
    5de0:	b	5df8 <mzap_iterate+0x118>
    5de4:	ldrsw	x0, [sp, #92]
    5de8:	lsl	x0, x0, #6
    5dec:	ldr	x1, [sp, #80]
    5df0:	add	x0, x1, x0
    5df4:	ldr	x0, [x0]
    5df8:	ldr	x3, [sp, #40]
    5dfc:	ldr	x2, [sp, #32]
    5e00:	mov	x1, x0
    5e04:	mov	x0, x19
    5e08:	blr	x3
    5e0c:	cmp	w0, #0x0
    5e10:	b.eq	5e1c <mzap_iterate+0x13c>  // b.none
    5e14:	mov	w0, #0x1                   	// #1
    5e18:	b	5e3c <mzap_iterate+0x15c>
    5e1c:	ldr	w0, [sp, #92]
    5e20:	add	w0, w0, #0x1
    5e24:	str	w0, [sp, #92]
    5e28:	ldr	w1, [sp, #92]
    5e2c:	ldr	w0, [sp, #76]
    5e30:	cmp	w1, w0
    5e34:	b.lt	5d30 <mzap_iterate+0x50>  // b.tstop
    5e38:	mov	w0, #0x0                   	// #0
    5e3c:	ldr	x19, [sp, #16]
    5e40:	ldp	x29, x30, [sp], #96
    5e44:	ret
	...

0000000000005e60 <zap_hash>:
    5e60:	stp	x29, x30, [sp, #-112]!
    5e64:	mov	x29, sp
    5e68:	str	x19, [sp, #16]
    5e6c:	str	x0, [sp, #56]
    5e70:	str	x1, [sp, #48]
    5e74:	str	w2, [sp, #44]
    5e78:	ldr	x0, [sp, #56]
    5e7c:	str	x0, [sp, #96]
    5e80:	adrp	x0, 0 <grub_swap_bytes16>
    5e84:	add	x0, x0, #0x0
    5e88:	ldr	x0, [x0]
    5e8c:	ldr	x0, [x0, #1024]
    5e90:	cmp	x0, #0x0
    5e94:	b.ne	5f40 <zap_hash+0xe0>  // b.any
    5e98:	str	wzr, [sp, #92]
    5e9c:	b	5f34 <zap_hash+0xd4>
    5ea0:	ldrsw	x0, [sp, #92]
    5ea4:	lsl	x1, x0, #3
    5ea8:	adrp	x0, 0 <grub_swap_bytes16>
    5eac:	add	x0, x0, #0x0
    5eb0:	ldr	x0, [x0]
    5eb4:	add	x0, x1, x0
    5eb8:	str	x0, [sp, #80]
    5ebc:	ldrsw	x1, [sp, #92]
    5ec0:	ldr	x0, [sp, #80]
    5ec4:	str	x1, [x0]
    5ec8:	mov	w0, #0x8                   	// #8
    5ecc:	str	w0, [sp, #88]
    5ed0:	b	5f1c <zap_hash+0xbc>
    5ed4:	ldr	x0, [sp, #80]
    5ed8:	ldr	x0, [x0]
    5edc:	lsr	x1, x0, #1
    5ee0:	ldr	x0, [sp, #80]
    5ee4:	ldr	x0, [x0]
    5ee8:	and	x0, x0, #0x1
    5eec:	neg	x2, x0
    5ef0:	mov	x0, #0xf42                 	// #3906
    5ef4:	movk	x0, #0xd787, lsl #16
    5ef8:	movk	x0, #0x5795, lsl #32
    5efc:	movk	x0, #0xc96c, lsl #48
    5f00:	and	x0, x2, x0
    5f04:	eor	x1, x1, x0
    5f08:	ldr	x0, [sp, #80]
    5f0c:	str	x1, [x0]
    5f10:	ldr	w0, [sp, #88]
    5f14:	sub	w0, w0, #0x1
    5f18:	str	w0, [sp, #88]
    5f1c:	ldr	w0, [sp, #88]
    5f20:	cmp	w0, #0x0
    5f24:	b.gt	5ed4 <zap_hash+0x74>
    5f28:	ldr	w0, [sp, #92]
    5f2c:	add	w0, w0, #0x1
    5f30:	str	w0, [sp, #92]
    5f34:	ldr	w0, [sp, #92]
    5f38:	cmp	w0, #0xff
    5f3c:	b.le	5ea0 <zap_hash+0x40>
    5f40:	ldr	w0, [sp, #44]
    5f44:	cmp	w0, #0x0
    5f48:	b.eq	5fb8 <zap_hash+0x158>  // b.none
    5f4c:	ldr	x0, [sp, #48]
    5f50:	str	x0, [sp, #104]
    5f54:	b	5f9c <zap_hash+0x13c>
    5f58:	ldr	x0, [sp, #96]
    5f5c:	lsr	x19, x0, #8
    5f60:	ldrb	w0, [sp, #79]
    5f64:	bl	164 <grub_toupper>
    5f68:	sxtw	x1, w0
    5f6c:	ldr	x0, [sp, #96]
    5f70:	eor	x0, x1, x0
    5f74:	and	x1, x0, #0xff
    5f78:	adrp	x0, 0 <grub_swap_bytes16>
    5f7c:	add	x0, x0, #0x0
    5f80:	ldr	x0, [x0]
    5f84:	ldr	x0, [x0, x1, lsl #3]
    5f88:	eor	x0, x19, x0
    5f8c:	str	x0, [sp, #96]
    5f90:	ldr	x0, [sp, #104]
    5f94:	add	x0, x0, #0x1
    5f98:	str	x0, [sp, #104]
    5f9c:	ldr	x0, [sp, #104]
    5fa0:	ldrb	w0, [x0]
    5fa4:	strb	w0, [sp, #79]
    5fa8:	ldrb	w0, [sp, #79]
    5fac:	cmp	w0, #0x0
    5fb0:	b.ne	5f58 <zap_hash+0xf8>  // b.any
    5fb4:	b	6018 <zap_hash+0x1b8>
    5fb8:	ldr	x0, [sp, #48]
    5fbc:	str	x0, [sp, #104]
    5fc0:	b	6000 <zap_hash+0x1a0>
    5fc4:	ldr	x0, [sp, #96]
    5fc8:	lsr	x1, x0, #8
    5fcc:	ldrb	w2, [sp, #79]
    5fd0:	ldr	x0, [sp, #96]
    5fd4:	eor	x0, x2, x0
    5fd8:	and	x2, x0, #0xff
    5fdc:	adrp	x0, 0 <grub_swap_bytes16>
    5fe0:	add	x0, x0, #0x0
    5fe4:	ldr	x0, [x0]
    5fe8:	ldr	x0, [x0, x2, lsl #3]
    5fec:	eor	x0, x1, x0
    5ff0:	str	x0, [sp, #96]
    5ff4:	ldr	x0, [sp, #104]
    5ff8:	add	x0, x0, #0x1
    5ffc:	str	x0, [sp, #104]
    6000:	ldr	x0, [sp, #104]
    6004:	ldrb	w0, [x0]
    6008:	strb	w0, [sp, #79]
    600c:	ldrb	w0, [sp, #79]
    6010:	cmp	w0, #0x0
    6014:	b.ne	5fc4 <zap_hash+0x164>  // b.any
    6018:	ldr	x0, [sp, #96]
    601c:	and	x0, x0, #0xfffffff000000000
    6020:	str	x0, [sp, #96]
    6024:	ldr	x0, [sp, #96]
    6028:	ldr	x19, [sp, #16]
    602c:	ldp	x29, x30, [sp], #112
    6030:	ret
    6034:	nop
	...

0000000000006040 <name_cmp>:
    6040:	stp	x29, x30, [sp, #-80]!
    6044:	mov	x29, sp
    6048:	str	x19, [sp, #16]
    604c:	str	x0, [sp, #56]
    6050:	str	x1, [sp, #48]
    6054:	str	x2, [sp, #40]
    6058:	str	w3, [sp, #36]
    605c:	ldr	x0, [sp, #56]
    6060:	str	x0, [sp, #72]
    6064:	ldr	x0, [sp, #48]
    6068:	str	x0, [sp, #64]
    606c:	ldr	w0, [sp, #36]
    6070:	cmp	w0, #0x0
    6074:	b.ne	60ec <name_cmp+0xac>  // b.any
    6078:	ldr	x2, [sp, #40]
    607c:	ldr	x1, [sp, #64]
    6080:	ldr	x0, [sp, #72]
    6084:	bl	0 <grub_memcmp>
    6088:	b	6104 <name_cmp+0xc4>
    608c:	ldr	x0, [sp, #72]
    6090:	ldrb	w0, [x0]
    6094:	bl	164 <grub_toupper>
    6098:	mov	w19, w0
    609c:	ldr	x0, [sp, #64]
    60a0:	ldrb	w0, [x0]
    60a4:	bl	164 <grub_toupper>
    60a8:	cmp	w19, w0
    60ac:	b.eq	60d4 <name_cmp+0x94>  // b.none
    60b0:	ldr	x0, [sp, #72]
    60b4:	ldrb	w0, [x0]
    60b8:	bl	164 <grub_toupper>
    60bc:	mov	w19, w0
    60c0:	ldr	x0, [sp, #64]
    60c4:	ldrb	w0, [x0]
    60c8:	bl	164 <grub_toupper>
    60cc:	sub	w0, w19, w0
    60d0:	b	6104 <name_cmp+0xc4>
    60d4:	ldr	x0, [sp, #72]
    60d8:	add	x0, x0, #0x1
    60dc:	str	x0, [sp, #72]
    60e0:	ldr	x0, [sp, #64]
    60e4:	add	x0, x0, #0x1
    60e8:	str	x0, [sp, #64]
    60ec:	ldr	x0, [sp, #40]
    60f0:	sub	x1, x0, #0x1
    60f4:	str	x1, [sp, #40]
    60f8:	cmp	x0, #0x0
    60fc:	b.ne	608c <name_cmp+0x4c>  // b.any
    6100:	mov	w0, #0x0                   	// #0
    6104:	ldr	x19, [sp, #16]
    6108:	ldp	x29, x30, [sp], #80
    610c:	ret

0000000000006110 <zap_leaf_array_equal>:
    6110:	stp	x29, x30, [sp, #-96]!
    6114:	mov	x29, sp
    6118:	str	x0, [sp, #56]
    611c:	str	w1, [sp, #52]
    6120:	str	w2, [sp, #48]
    6124:	str	w3, [sp, #44]
    6128:	str	x4, [sp, #32]
    612c:	str	x5, [sp, #24]
    6130:	str	w6, [sp, #40]
    6134:	str	xzr, [sp, #88]
    6138:	b	6200 <zap_leaf_array_equal+0xf0>
    613c:	ldr	w2, [sp, #44]
    6140:	ldr	w1, [sp, #48]
    6144:	ldr	x0, [sp, #56]
    6148:	bl	538 <ZAP_LEAF_CHUNK>
    614c:	str	x0, [sp, #72]
    6150:	ldr	x1, [sp, #32]
    6154:	ldr	x0, [sp, #88]
    6158:	sub	x0, x1, x0
    615c:	str	x0, [sp, #80]
    6160:	ldr	x0, [sp, #80]
    6164:	cmp	x0, #0x15
    6168:	b.ls	6174 <zap_leaf_array_equal+0x64>  // b.plast
    616c:	mov	x0, #0x15                  	// #21
    6170:	str	x0, [sp, #80]
    6174:	ldr	w0, [sp, #48]
    6178:	bl	4e8 <ZAP_LEAF_NUMCHUNKS>
    617c:	mov	w1, w0
    6180:	ldr	w0, [sp, #44]
    6184:	cmp	w0, w1
    6188:	b.lt	6194 <zap_leaf_array_equal+0x84>  // b.tstop
    618c:	mov	w0, #0x0                   	// #0
    6190:	b	622c <zap_leaf_array_equal+0x11c>
    6194:	ldr	x0, [sp, #72]
    6198:	add	x4, x0, #0x1
    619c:	ldr	x1, [sp, #24]
    61a0:	ldr	x0, [sp, #88]
    61a4:	add	x0, x1, x0
    61a8:	ldr	w3, [sp, #40]
    61ac:	ldr	x2, [sp, #80]
    61b0:	mov	x1, x0
    61b4:	mov	x0, x4
    61b8:	bl	6040 <name_cmp>
    61bc:	cmp	w0, #0x0
    61c0:	b.ne	6214 <zap_leaf_array_equal+0x104>  // b.any
    61c4:	ldr	w0, [sp, #52]
    61c8:	cmp	w0, #0x0
    61cc:	b.ne	61e4 <zap_leaf_array_equal+0xd4>  // b.any
    61d0:	ldr	x0, [sp, #72]
    61d4:	ldrh	w0, [x0, #22]
    61d8:	bl	0 <grub_swap_bytes16>
    61dc:	and	w0, w0, #0xffff
    61e0:	b	61ec <zap_leaf_array_equal+0xdc>
    61e4:	ldr	x0, [sp, #72]
    61e8:	ldrh	w0, [x0, #22]
    61ec:	str	w0, [sp, #44]
    61f0:	ldr	x1, [sp, #88]
    61f4:	ldr	x0, [sp, #80]
    61f8:	add	x0, x1, x0
    61fc:	str	x0, [sp, #88]
    6200:	ldr	x1, [sp, #88]
    6204:	ldr	x0, [sp, #32]
    6208:	cmp	x1, x0
    620c:	b.cc	613c <zap_leaf_array_equal+0x2c>  // b.lo, b.ul, b.last
    6210:	b	6218 <zap_leaf_array_equal+0x108>
    6214:	nop
    6218:	ldr	x1, [sp, #88]
    621c:	ldr	x0, [sp, #32]
    6220:	cmp	x1, x0
    6224:	cset	w0, eq  // eq = none
    6228:	and	w0, w0, #0xff
    622c:	ldp	x29, x30, [sp], #96
    6230:	ret

0000000000006234 <zap_leaf_array_get>:
    6234:	stp	x29, x30, [sp, #-96]!
    6238:	mov	x29, sp
    623c:	str	x0, [sp, #56]
    6240:	str	w1, [sp, #52]
    6244:	str	w2, [sp, #48]
    6248:	str	w3, [sp, #44]
    624c:	str	x4, [sp, #32]
    6250:	str	x5, [sp, #24]
    6254:	str	xzr, [sp, #88]
    6258:	b	6314 <zap_leaf_array_get+0xe0>
    625c:	ldr	w2, [sp, #44]
    6260:	ldr	w1, [sp, #48]
    6264:	ldr	x0, [sp, #56]
    6268:	bl	538 <ZAP_LEAF_CHUNK>
    626c:	str	x0, [sp, #72]
    6270:	ldr	x1, [sp, #32]
    6274:	ldr	x0, [sp, #88]
    6278:	sub	x0, x1, x0
    627c:	str	x0, [sp, #80]
    6280:	ldr	x0, [sp, #80]
    6284:	cmp	x0, #0x15
    6288:	b.ls	6294 <zap_leaf_array_get+0x60>  // b.plast
    628c:	mov	x0, #0x15                  	// #21
    6290:	str	x0, [sp, #80]
    6294:	ldr	w0, [sp, #48]
    6298:	bl	4e8 <ZAP_LEAF_NUMCHUNKS>
    629c:	mov	w1, w0
    62a0:	ldr	w0, [sp, #44]
    62a4:	cmp	w0, w1
    62a8:	b.lt	62b4 <zap_leaf_array_get+0x80>  // b.tstop
    62ac:	mov	w0, #0x9                   	// #9
    62b0:	b	6328 <zap_leaf_array_get+0xf4>
    62b4:	ldr	x1, [sp, #24]
    62b8:	ldr	x0, [sp, #88]
    62bc:	add	x3, x1, x0
    62c0:	ldr	x0, [sp, #72]
    62c4:	add	x0, x0, #0x1
    62c8:	ldr	x2, [sp, #80]
    62cc:	mov	x1, x0
    62d0:	mov	x0, x3
    62d4:	bl	100 <grub_memcpy>
    62d8:	ldr	w0, [sp, #52]
    62dc:	cmp	w0, #0x0
    62e0:	b.ne	62f8 <zap_leaf_array_get+0xc4>  // b.any
    62e4:	ldr	x0, [sp, #72]
    62e8:	ldrh	w0, [x0, #22]
    62ec:	bl	0 <grub_swap_bytes16>
    62f0:	and	w0, w0, #0xffff
    62f4:	b	6300 <zap_leaf_array_get+0xcc>
    62f8:	ldr	x0, [sp, #72]
    62fc:	ldrh	w0, [x0, #22]
    6300:	str	w0, [sp, #44]
    6304:	ldr	x1, [sp, #88]
    6308:	ldr	x0, [sp, #80]
    630c:	add	x0, x1, x0
    6310:	str	x0, [sp, #88]
    6314:	ldr	x1, [sp, #88]
    6318:	ldr	x0, [sp, #32]
    631c:	cmp	x1, x0
    6320:	b.cc	625c <zap_leaf_array_get+0x28>  // b.lo, b.ul, b.last
    6324:	mov	w0, #0x0                   	// #0
    6328:	ldp	x29, x30, [sp], #96
    632c:	ret

0000000000006330 <zap_leaf_lookup>:
    6330:	stp	x29, x30, [sp, #-112]!
    6334:	mov	x29, sp
    6338:	str	x19, [sp, #16]
    633c:	str	x0, [sp, #72]
    6340:	str	w1, [sp, #68]
    6344:	str	w2, [sp, #64]
    6348:	str	x3, [sp, #56]
    634c:	str	x4, [sp, #48]
    6350:	str	x5, [sp, #40]
    6354:	str	w6, [sp, #36]
    6358:	ldr	w0, [sp, #68]
    635c:	cmp	w0, #0x0
    6360:	b.ne	6388 <zap_leaf_lookup+0x58>  // b.any
    6364:	ldr	x0, [sp, #72]
    6368:	ldr	x0, [x0]
    636c:	bl	50 <grub_swap_bytes64>
    6370:	mov	x1, x0
    6374:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    6378:	cmp	x1, x0
    637c:	cset	w0, ne  // ne = any
    6380:	and	w0, w0, #0xff
    6384:	b	63a0 <zap_leaf_lookup+0x70>
    6388:	ldr	x0, [sp, #72]
    638c:	ldr	x1, [x0]
    6390:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    6394:	cmp	x1, x0
    6398:	cset	w0, ne  // ne = any
    639c:	and	w0, w0, #0xff
    63a0:	cmp	w0, #0x0
    63a4:	b.eq	63c0 <zap_leaf_lookup+0x90>  // b.none
    63a8:	adrp	x0, 0 <grub_swap_bytes16>
    63ac:	add	x0, x0, #0x0
    63b0:	ldr	x1, [x0]
    63b4:	mov	w0, #0x9                   	// #9
    63b8:	bl	0 <grub_error>
    63bc:	b	66e0 <zap_leaf_lookup+0x3b0>
    63c0:	ldr	w0, [sp, #68]
    63c4:	cmp	w0, #0x0
    63c8:	b.ne	63f4 <zap_leaf_lookup+0xc4>  // b.any
    63cc:	ldr	x0, [sp, #72]
    63d0:	ldr	w0, [x0, #24]
    63d4:	bl	38 <grub_swap_bytes32>
    63d8:	mov	w1, w0
    63dc:	mov	w0, #0x1eaf                	// #7855
    63e0:	movk	w0, #0x2ab, lsl #16
    63e4:	cmp	w1, w0
    63e8:	cset	w0, ne  // ne = any
    63ec:	and	w0, w0, #0xff
    63f0:	b	6410 <zap_leaf_lookup+0xe0>
    63f4:	ldr	x0, [sp, #72]
    63f8:	ldr	w1, [x0, #24]
    63fc:	mov	w0, #0x1eaf                	// #7855
    6400:	movk	w0, #0x2ab, lsl #16
    6404:	cmp	w1, w0
    6408:	cset	w0, ne  // ne = any
    640c:	and	w0, w0, #0xff
    6410:	cmp	w0, #0x0
    6414:	b.eq	6430 <zap_leaf_lookup+0x100>  // b.none
    6418:	adrp	x0, 0 <grub_swap_bytes16>
    641c:	add	x0, x0, #0x0
    6420:	ldr	x1, [x0]
    6424:	mov	w0, #0x9                   	// #9
    6428:	bl	0 <grub_error>
    642c:	b	66e0 <zap_leaf_lookup+0x3b0>
    6430:	ldr	w0, [sp, #68]
    6434:	cmp	w0, #0x0
    6438:	b.ne	6468 <zap_leaf_lookup+0x138>  // b.any
    643c:	ldr	x2, [sp, #72]
    6440:	ldr	x1, [sp, #56]
    6444:	ldr	w0, [sp, #64]
    6448:	bl	488 <LEAF_HASH>
    644c:	mov	x1, x0
    6450:	ldr	x0, [sp, #72]
    6454:	add	x1, x1, #0x18
    6458:	ldrh	w0, [x0, x1, lsl #1]
    645c:	bl	0 <grub_swap_bytes16>
    6460:	and	w0, w0, #0xffff
    6464:	b	6488 <zap_leaf_lookup+0x158>
    6468:	ldr	x2, [sp, #72]
    646c:	ldr	x1, [sp, #56]
    6470:	ldr	w0, [sp, #64]
    6474:	bl	488 <LEAF_HASH>
    6478:	mov	x1, x0
    647c:	ldr	x0, [sp, #72]
    6480:	add	x1, x1, #0x18
    6484:	ldrh	w0, [x0, x1, lsl #1]
    6488:	strh	w0, [sp, #110]
    648c:	b	66b8 <zap_leaf_lookup+0x388>
    6490:	ldrh	w19, [sp, #110]
    6494:	ldr	w0, [sp, #64]
    6498:	bl	4e8 <ZAP_LEAF_NUMCHUNKS>
    649c:	cmp	w19, w0
    64a0:	b.lt	64bc <zap_leaf_lookup+0x18c>  // b.tstop
    64a4:	adrp	x0, 0 <grub_swap_bytes16>
    64a8:	add	x0, x0, #0x0
    64ac:	ldr	x1, [x0]
    64b0:	mov	w0, #0x9                   	// #9
    64b4:	bl	0 <grub_error>
    64b8:	b	66e0 <zap_leaf_lookup+0x3b0>
    64bc:	ldrh	w0, [sp, #110]
    64c0:	mov	w2, w0
    64c4:	ldr	w1, [sp, #64]
    64c8:	ldr	x0, [sp, #72]
    64cc:	bl	594 <ZAP_LEAF_ENTRY>
    64d0:	str	x0, [sp, #96]
    64d4:	ldr	x0, [sp, #96]
    64d8:	ldrb	w0, [x0]
    64dc:	cmp	w0, #0xfc
    64e0:	b.eq	64fc <zap_leaf_lookup+0x1cc>  // b.none
    64e4:	adrp	x0, 0 <grub_swap_bytes16>
    64e8:	add	x0, x0, #0x0
    64ec:	ldr	x1, [x0]
    64f0:	mov	w0, #0x9                   	// #9
    64f4:	bl	0 <grub_error>
    64f8:	b	66e0 <zap_leaf_lookup+0x3b0>
    64fc:	ldr	w0, [sp, #68]
    6500:	cmp	w0, #0x0
    6504:	b.ne	6518 <zap_leaf_lookup+0x1e8>  // b.any
    6508:	ldr	x0, [sp, #96]
    650c:	ldr	x0, [x0, #16]
    6510:	bl	50 <grub_swap_bytes64>
    6514:	b	6520 <zap_leaf_lookup+0x1f0>
    6518:	ldr	x0, [sp, #96]
    651c:	ldr	x0, [x0, #16]
    6520:	ldr	x1, [sp, #56]
    6524:	cmp	x0, x1
    6528:	b.ne	6688 <zap_leaf_lookup+0x358>  // b.any
    652c:	ldr	x0, [sp, #96]
    6530:	ldrh	w0, [x0, #6]
    6534:	mov	w4, w0
    6538:	adrp	x0, 0 <grub_swap_bytes16>
    653c:	add	x0, x0, #0x0
    6540:	ldr	x3, [x0]
    6544:	adrp	x0, 0 <grub_swap_bytes16>
    6548:	add	x0, x0, #0x0
    654c:	ldr	x2, [x0]
    6550:	mov	w1, #0x8e7                 	// #2279
    6554:	adrp	x0, 0 <grub_swap_bytes16>
    6558:	add	x0, x0, #0x0
    655c:	ldr	x0, [x0]
    6560:	bl	0 <grub_real_dprintf>
    6564:	ldr	w0, [sp, #68]
    6568:	cmp	w0, #0x0
    656c:	b.ne	6588 <zap_leaf_lookup+0x258>  // b.any
    6570:	ldr	x0, [sp, #96]
    6574:	ldrh	w0, [x0, #4]
    6578:	bl	0 <grub_swap_bytes16>
    657c:	and	w0, w0, #0xffff
    6580:	mov	w19, w0
    6584:	b	6594 <zap_leaf_lookup+0x264>
    6588:	ldr	x0, [sp, #96]
    658c:	ldrh	w0, [x0, #4]
    6590:	mov	w19, w0
    6594:	ldr	w0, [sp, #68]
    6598:	cmp	w0, #0x0
    659c:	b.ne	65b8 <zap_leaf_lookup+0x288>  // b.any
    65a0:	ldr	x0, [sp, #96]
    65a4:	ldrh	w0, [x0, #6]
    65a8:	bl	0 <grub_swap_bytes16>
    65ac:	and	w0, w0, #0xffff
    65b0:	and	x0, x0, #0xffff
    65b4:	b	65c4 <zap_leaf_lookup+0x294>
    65b8:	ldr	x0, [sp, #96]
    65bc:	ldrh	w0, [x0, #6]
    65c0:	and	x0, x0, #0xffff
    65c4:	ldr	w6, [sp, #36]
    65c8:	ldr	x5, [sp, #48]
    65cc:	mov	x4, x0
    65d0:	mov	w3, w19
    65d4:	ldr	w2, [sp, #64]
    65d8:	ldr	w1, [sp, #68]
    65dc:	ldr	x0, [sp, #72]
    65e0:	bl	6110 <zap_leaf_array_equal>
    65e4:	cmp	w0, #0x0
    65e8:	b.eq	668c <zap_leaf_lookup+0x35c>  // b.none
    65ec:	ldr	x0, [sp, #96]
    65f0:	ldrb	w0, [x0, #1]
    65f4:	cmp	w0, #0x8
    65f8:	b.ne	6634 <zap_leaf_lookup+0x304>  // b.any
    65fc:	ldr	w0, [sp, #68]
    6600:	cmp	w0, #0x0
    6604:	b.ne	6624 <zap_leaf_lookup+0x2f4>  // b.any
    6608:	ldr	x0, [sp, #96]
    660c:	ldrh	w0, [x0, #10]
    6610:	bl	0 <grub_swap_bytes16>
    6614:	and	w0, w0, #0xffff
    6618:	cmp	w0, #0x1
    661c:	b.ne	6634 <zap_leaf_lookup+0x304>  // b.any
    6620:	b	664c <zap_leaf_lookup+0x31c>
    6624:	ldr	x0, [sp, #96]
    6628:	ldrh	w0, [x0, #10]
    662c:	cmp	w0, #0x1
    6630:	b.eq	664c <zap_leaf_lookup+0x31c>  // b.none
    6634:	adrp	x0, 0 <grub_swap_bytes16>
    6638:	add	x0, x0, #0x0
    663c:	ldr	x1, [x0]
    6640:	mov	w0, #0x9                   	// #9
    6644:	bl	0 <grub_error>
    6648:	b	66e0 <zap_leaf_lookup+0x3b0>
    664c:	ldr	x0, [sp, #96]
    6650:	ldrh	w0, [x0, #8]
    6654:	mov	w2, w0
    6658:	ldr	w1, [sp, #64]
    665c:	ldr	x0, [sp, #72]
    6660:	bl	538 <ZAP_LEAF_CHUNK>
    6664:	str	x0, [sp, #88]
    6668:	ldr	x0, [sp, #88]
    666c:	ldur	x0, [x0, #1]
    6670:	bl	50 <grub_swap_bytes64>
    6674:	mov	x1, x0
    6678:	ldr	x0, [sp, #40]
    667c:	str	x1, [x0]
    6680:	mov	w0, #0x0                   	// #0
    6684:	b	66e0 <zap_leaf_lookup+0x3b0>
    6688:	nop
    668c:	ldr	w0, [sp, #68]
    6690:	cmp	w0, #0x0
    6694:	b.ne	66ac <zap_leaf_lookup+0x37c>  // b.any
    6698:	ldr	x0, [sp, #96]
    669c:	ldrh	w0, [x0, #2]
    66a0:	bl	0 <grub_swap_bytes16>
    66a4:	and	w0, w0, #0xffff
    66a8:	b	66b4 <zap_leaf_lookup+0x384>
    66ac:	ldr	x0, [sp, #96]
    66b0:	ldrh	w0, [x0, #2]
    66b4:	strh	w0, [sp, #110]
    66b8:	ldrh	w1, [sp, #110]
    66bc:	mov	w0, #0xffff                	// #65535
    66c0:	cmp	w1, w0
    66c4:	b.ne	6490 <zap_leaf_lookup+0x160>  // b.any
    66c8:	ldr	x2, [sp, #48]
    66cc:	adrp	x0, 0 <grub_swap_bytes16>
    66d0:	add	x0, x0, #0x0
    66d4:	ldr	x1, [x0]
    66d8:	mov	w0, #0x5                   	// #5
    66dc:	bl	0 <grub_error>
    66e0:	ldr	x19, [sp, #16]
    66e4:	ldp	x29, x30, [sp], #112
    66e8:	ret
    66ec:	nop
	...

0000000000006738 <zap_verify>:
    6738:	stp	x29, x30, [sp, #-32]!
    673c:	mov	x29, sp
    6740:	str	x0, [sp, #24]
    6744:	str	w1, [sp, #20]
    6748:	ldr	w0, [sp, #20]
    674c:	cmp	w0, #0x0
    6750:	b.ne	6780 <zap_verify+0x48>  // b.any
    6754:	ldr	x0, [sp, #24]
    6758:	ldr	x0, [x0, #8]
    675c:	bl	50 <grub_swap_bytes64>
    6760:	mov	x1, x0
    6764:	mov	x0, #0xb2ab                	// #45739
    6768:	movk	x0, #0xf52a, lsl #16
    676c:	movk	x0, #0x2, lsl #32
    6770:	cmp	x1, x0
    6774:	cset	w0, ne  // ne = any
    6778:	and	w0, w0, #0xff
    677c:	b	67a0 <zap_verify+0x68>
    6780:	ldr	x0, [sp, #24]
    6784:	ldr	x1, [x0, #8]
    6788:	mov	x0, #0xb2ab                	// #45739
    678c:	movk	x0, #0xf52a, lsl #16
    6790:	movk	x0, #0x2, lsl #32
    6794:	cmp	x1, x0
    6798:	cset	w0, ne  // ne = any
    679c:	and	w0, w0, #0xff
    67a0:	cmp	w0, #0x0
    67a4:	b.eq	67c0 <zap_verify+0x88>  // b.none
    67a8:	adrp	x0, 0 <grub_swap_bytes16>
    67ac:	add	x0, x0, #0x0
    67b0:	ldr	x1, [x0]
    67b4:	mov	w0, #0x9                   	// #9
    67b8:	bl	0 <grub_error>
    67bc:	b	67ec <zap_verify+0xb4>
    67c0:	ldr	x0, [sp, #24]
    67c4:	ldr	x0, [x0, #80]
    67c8:	cmp	x0, #0x0
    67cc:	b.ne	67e8 <zap_verify+0xb0>  // b.any
    67d0:	adrp	x0, 0 <grub_swap_bytes16>
    67d4:	add	x0, x0, #0x0
    67d8:	ldr	x1, [x0]
    67dc:	mov	w0, #0x9                   	// #9
    67e0:	bl	0 <grub_error>
    67e4:	b	67ec <zap_verify+0xb4>
    67e8:	mov	w0, #0x0                   	// #0
    67ec:	ldp	x29, x30, [sp], #32
    67f0:	ret
    67f4:	nop
	...

0000000000006808 <fzap_lookup>:
    6808:	stp	x29, x30, [sp, #-112]!
    680c:	mov	x29, sp
    6810:	str	x0, [sp, #56]
    6814:	str	x1, [sp, #48]
    6818:	str	x2, [sp, #40]
    681c:	str	x3, [sp, #32]
    6820:	str	x4, [sp, #24]
    6824:	str	w5, [sp, #20]
    6828:	ldr	x0, [sp, #56]
    682c:	ldr	w0, [x0, #512]
    6830:	cmp	w0, #0x0
    6834:	b.ne	6854 <fzap_lookup+0x4c>  // b.any
    6838:	ldr	x0, [sp, #56]
    683c:	ldrh	w0, [x0, #8]
    6840:	bl	0 <grub_swap_bytes16>
    6844:	and	w0, w0, #0xffff
    6848:	lsl	w0, w0, #9
    684c:	sxtw	x0, w0
    6850:	b	6864 <fzap_lookup+0x5c>
    6854:	ldr	x0, [sp, #56]
    6858:	ldrh	w0, [x0, #8]
    685c:	lsl	w0, w0, #9
    6860:	sxtw	x0, w0
    6864:	bl	854 <zfs_log2>
    6868:	str	w0, [sp, #108]
    686c:	ldr	x0, [sp, #56]
    6870:	ldr	w0, [x0, #512]
    6874:	mov	w1, w0
    6878:	ldr	x0, [sp, #48]
    687c:	bl	6738 <zap_verify>
    6880:	str	w0, [sp, #104]
    6884:	ldr	w0, [sp, #104]
    6888:	cmp	w0, #0x0
    688c:	b.eq	6898 <fzap_lookup+0x90>  // b.none
    6890:	ldr	w0, [sp, #104]
    6894:	b	69f8 <fzap_lookup+0x1f0>
    6898:	ldr	x0, [sp, #48]
    689c:	ldr	x0, [x0, #80]
    68a0:	ldr	w2, [sp, #20]
    68a4:	ldr	x1, [sp, #40]
    68a8:	bl	5e60 <zap_hash>
    68ac:	str	x0, [sp, #96]
    68b0:	ldr	x0, [sp, #48]
    68b4:	ldr	x0, [x0, #24]
    68b8:	cmp	x0, #0x0
    68bc:	b.eq	68d8 <fzap_lookup+0xd0>  // b.none
    68c0:	adrp	x0, 0 <grub_swap_bytes16>
    68c4:	add	x0, x0, #0x0
    68c8:	ldr	x1, [x0]
    68cc:	mov	w0, #0x18                  	// #24
    68d0:	bl	0 <grub_error>
    68d4:	b	69f8 <fzap_lookup+0x1f0>
    68d8:	ldr	x0, [sp, #48]
    68dc:	ldr	x0, [x0, #32]
    68e0:	mov	x1, x0
    68e4:	ldr	x0, [sp, #96]
    68e8:	bl	408 <ZAP_HASH_IDX>
    68ec:	str	x0, [sp, #88]
    68f0:	ldr	x0, [sp, #56]
    68f4:	ldr	w0, [x0, #512]
    68f8:	cmp	w0, #0x0
    68fc:	b.ne	6934 <fzap_lookup+0x12c>  // b.any
    6900:	ldr	w0, [sp, #108]
    6904:	sub	w0, w0, #0x4
    6908:	mov	w1, #0x1                   	// #1
    690c:	lsl	w0, w1, w0
    6910:	sxtw	x1, w0
    6914:	ldr	x0, [sp, #88]
    6918:	add	x0, x1, x0
    691c:	lsl	x0, x0, #3
    6920:	ldr	x1, [sp, #48]
    6924:	add	x0, x1, x0
    6928:	ldr	x0, [x0]
    692c:	bl	50 <grub_swap_bytes64>
    6930:	b	6960 <fzap_lookup+0x158>
    6934:	ldr	w0, [sp, #108]
    6938:	sub	w0, w0, #0x4
    693c:	mov	w1, #0x1                   	// #1
    6940:	lsl	w0, w1, w0
    6944:	sxtw	x1, w0
    6948:	ldr	x0, [sp, #88]
    694c:	add	x0, x1, x0
    6950:	lsl	x0, x0, #3
    6954:	ldr	x1, [sp, #48]
    6958:	add	x0, x1, x0
    695c:	ldr	x0, [x0]
    6960:	str	x0, [sp, #80]
    6964:	ldr	w0, [sp, #108]
    6968:	mov	w1, #0x1                   	// #1
    696c:	lsl	w0, w1, w0
    6970:	cmp	w0, #0x2f
    6974:	b.hi	6990 <fzap_lookup+0x188>  // b.pmore
    6978:	adrp	x0, 0 <grub_swap_bytes16>
    697c:	add	x0, x0, #0x0
    6980:	ldr	x1, [x0]
    6984:	mov	w0, #0x9                   	// #9
    6988:	bl	0 <grub_error>
    698c:	b	69f8 <fzap_lookup+0x1f0>
    6990:	add	x1, sp, #0x44
    6994:	add	x0, sp, #0x48
    6998:	ldr	x4, [sp, #24]
    699c:	mov	x3, x1
    69a0:	mov	x2, x0
    69a4:	ldr	x1, [sp, #80]
    69a8:	ldr	x0, [sp, #56]
    69ac:	bl	5780 <dmu_read>
    69b0:	str	w0, [sp, #104]
    69b4:	ldr	w0, [sp, #104]
    69b8:	cmp	w0, #0x0
    69bc:	b.eq	69c8 <fzap_lookup+0x1c0>  // b.none
    69c0:	ldr	w0, [sp, #104]
    69c4:	b	69f8 <fzap_lookup+0x1f0>
    69c8:	ldr	x0, [sp, #72]
    69cc:	ldr	w1, [sp, #68]
    69d0:	ldr	w6, [sp, #20]
    69d4:	ldr	x5, [sp, #32]
    69d8:	ldr	x4, [sp, #40]
    69dc:	ldr	x3, [sp, #96]
    69e0:	ldr	w2, [sp, #108]
    69e4:	bl	6330 <zap_leaf_lookup>
    69e8:	str	w0, [sp, #104]
    69ec:	ldr	x0, [sp, #72]
    69f0:	bl	0 <grub_free>
    69f4:	ldr	w0, [sp, #104]
    69f8:	ldp	x29, x30, [sp], #112
    69fc:	ret
	...

0000000000006a10 <fzap_iterate>:
    6a10:	stp	x29, x30, [sp, #-176]!
    6a14:	mov	x29, sp
    6a18:	stp	x19, x20, [sp, #16]
    6a1c:	str	x0, [sp, #72]
    6a20:	str	x1, [sp, #64]
    6a24:	str	x2, [sp, #56]
    6a28:	str	x3, [sp, #48]
    6a2c:	str	x4, [sp, #40]
    6a30:	str	x5, [sp, #32]
    6a34:	ldr	x0, [sp, #72]
    6a38:	ldr	w0, [x0, #512]
    6a3c:	cmp	w0, #0x0
    6a40:	b.ne	6a60 <fzap_iterate+0x50>  // b.any
    6a44:	ldr	x0, [sp, #72]
    6a48:	ldrh	w0, [x0, #8]
    6a4c:	bl	0 <grub_swap_bytes16>
    6a50:	and	w0, w0, #0xffff
    6a54:	lsl	w0, w0, #9
    6a58:	sxtw	x0, w0
    6a5c:	b	6a70 <fzap_iterate+0x60>
    6a60:	ldr	x0, [sp, #72]
    6a64:	ldrh	w0, [x0, #8]
    6a68:	lsl	w0, w0, #9
    6a6c:	sxtw	x0, w0
    6a70:	bl	854 <zfs_log2>
    6a74:	str	w0, [sp, #152]
    6a78:	ldr	x0, [sp, #72]
    6a7c:	ldr	w0, [x0, #512]
    6a80:	mov	w1, w0
    6a84:	ldr	x0, [sp, #64]
    6a88:	bl	6738 <zap_verify>
    6a8c:	cmp	w0, #0x0
    6a90:	b.eq	6a9c <fzap_iterate+0x8c>  // b.none
    6a94:	mov	w0, #0x0                   	// #0
    6a98:	b	6ff4 <fzap_iterate+0x5e4>
    6a9c:	ldr	x0, [sp, #64]
    6aa0:	ldr	x0, [x0, #24]
    6aa4:	cmp	x0, #0x0
    6aa8:	b.eq	6ac8 <fzap_iterate+0xb8>  // b.none
    6aac:	adrp	x0, 0 <grub_swap_bytes16>
    6ab0:	add	x0, x0, #0x0
    6ab4:	ldr	x1, [x0]
    6ab8:	mov	w0, #0x18                  	// #24
    6abc:	bl	0 <grub_error>
    6ac0:	mov	w0, #0x0                   	// #0
    6ac4:	b	6ff4 <fzap_iterate+0x5e4>
    6ac8:	ldr	w0, [sp, #152]
    6acc:	mov	w1, #0x1                   	// #1
    6ad0:	lsl	w0, w1, w0
    6ad4:	cmp	w0, #0x2f
    6ad8:	b.hi	6af8 <fzap_iterate+0xe8>  // b.pmore
    6adc:	adrp	x0, 0 <grub_swap_bytes16>
    6ae0:	add	x0, x0, #0x0
    6ae4:	ldr	x1, [x0]
    6ae8:	mov	w0, #0x9                   	// #9
    6aec:	bl	0 <grub_error>
    6af0:	mov	w0, #0x0                   	// #0
    6af4:	b	6ff4 <fzap_iterate+0x5e4>
    6af8:	str	xzr, [sp, #168]
    6afc:	b	6fd0 <fzap_iterate+0x5c0>
    6b00:	ldr	x0, [sp, #72]
    6b04:	ldr	w0, [x0, #512]
    6b08:	cmp	w0, #0x0
    6b0c:	b.ne	6b44 <fzap_iterate+0x134>  // b.any
    6b10:	ldr	w0, [sp, #152]
    6b14:	sub	w0, w0, #0x4
    6b18:	mov	w1, #0x1                   	// #1
    6b1c:	lsl	w0, w1, w0
    6b20:	sxtw	x1, w0
    6b24:	ldr	x0, [sp, #168]
    6b28:	add	x0, x1, x0
    6b2c:	lsl	x0, x0, #3
    6b30:	ldr	x1, [sp, #64]
    6b34:	add	x0, x1, x0
    6b38:	ldr	x0, [x0]
    6b3c:	bl	50 <grub_swap_bytes64>
    6b40:	b	6b70 <fzap_iterate+0x160>
    6b44:	ldr	w0, [sp, #152]
    6b48:	sub	w0, w0, #0x4
    6b4c:	mov	w1, #0x1                   	// #1
    6b50:	lsl	w0, w1, w0
    6b54:	sxtw	x1, w0
    6b58:	ldr	x0, [sp, #168]
    6b5c:	add	x0, x1, x0
    6b60:	lsl	x0, x0, #3
    6b64:	ldr	x1, [sp, #64]
    6b68:	add	x0, x1, x0
    6b6c:	ldr	x0, [x0]
    6b70:	str	x0, [sp, #144]
    6b74:	str	xzr, [sp, #160]
    6b78:	b	6c04 <fzap_iterate+0x1f4>
    6b7c:	ldr	x0, [sp, #72]
    6b80:	ldr	w0, [x0, #512]
    6b84:	cmp	w0, #0x0
    6b88:	b.ne	6bc0 <fzap_iterate+0x1b0>  // b.any
    6b8c:	ldr	w0, [sp, #152]
    6b90:	sub	w0, w0, #0x4
    6b94:	mov	w1, #0x1                   	// #1
    6b98:	lsl	w0, w1, w0
    6b9c:	sxtw	x1, w0
    6ba0:	ldr	x0, [sp, #160]
    6ba4:	add	x0, x1, x0
    6ba8:	lsl	x0, x0, #3
    6bac:	ldr	x1, [sp, #64]
    6bb0:	add	x0, x1, x0
    6bb4:	ldr	x0, [x0]
    6bb8:	bl	50 <grub_swap_bytes64>
    6bbc:	b	6bec <fzap_iterate+0x1dc>
    6bc0:	ldr	w0, [sp, #152]
    6bc4:	sub	w0, w0, #0x4
    6bc8:	mov	w1, #0x1                   	// #1
    6bcc:	lsl	w0, w1, w0
    6bd0:	sxtw	x1, w0
    6bd4:	ldr	x0, [sp, #160]
    6bd8:	add	x0, x1, x0
    6bdc:	lsl	x0, x0, #3
    6be0:	ldr	x1, [sp, #64]
    6be4:	add	x0, x1, x0
    6be8:	ldr	x0, [x0]
    6bec:	ldr	x1, [sp, #144]
    6bf0:	cmp	x0, x1
    6bf4:	b.eq	6c18 <fzap_iterate+0x208>  // b.none
    6bf8:	ldr	x0, [sp, #160]
    6bfc:	add	x0, x0, #0x1
    6c00:	str	x0, [sp, #160]
    6c04:	ldr	x1, [sp, #160]
    6c08:	ldr	x0, [sp, #168]
    6c0c:	cmp	x1, x0
    6c10:	b.cc	6b7c <fzap_iterate+0x16c>  // b.lo, b.ul, b.last
    6c14:	b	6c1c <fzap_iterate+0x20c>
    6c18:	nop
    6c1c:	ldr	x1, [sp, #160]
    6c20:	ldr	x0, [sp, #168]
    6c24:	cmp	x1, x0
    6c28:	b.ne	6fc0 <fzap_iterate+0x5b0>  // b.any
    6c2c:	add	x1, sp, #0x54
    6c30:	add	x0, sp, #0x58
    6c34:	ldr	x4, [sp, #32]
    6c38:	mov	x3, x1
    6c3c:	mov	x2, x0
    6c40:	ldr	x1, [sp, #144]
    6c44:	ldr	x0, [sp, #72]
    6c48:	bl	5780 <dmu_read>
    6c4c:	str	w0, [sp, #140]
    6c50:	ldr	x0, [sp, #88]
    6c54:	str	x0, [sp, #128]
    6c58:	ldr	w0, [sp, #140]
    6c5c:	cmp	w0, #0x0
    6c60:	b.eq	6c78 <fzap_iterate+0x268>  // b.none
    6c64:	adrp	x0, 0 <grub_swap_bytes16>
    6c68:	add	x0, x0, #0x0
    6c6c:	ldr	x0, [x0]
    6c70:	str	wzr, [x0]
    6c74:	b	6fc4 <fzap_iterate+0x5b4>
    6c78:	ldr	w0, [sp, #84]
    6c7c:	cmp	w0, #0x0
    6c80:	b.ne	6ca8 <fzap_iterate+0x298>  // b.any
    6c84:	ldr	x0, [sp, #128]
    6c88:	ldr	x0, [x0]
    6c8c:	bl	50 <grub_swap_bytes64>
    6c90:	mov	x1, x0
    6c94:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    6c98:	cmp	x1, x0
    6c9c:	cset	w0, ne  // ne = any
    6ca0:	and	w0, w0, #0xff
    6ca4:	b	6cc0 <fzap_iterate+0x2b0>
    6ca8:	ldr	x0, [sp, #128]
    6cac:	ldr	x1, [x0]
    6cb0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    6cb4:	cmp	x1, x0
    6cb8:	cset	w0, ne  // ne = any
    6cbc:	and	w0, w0, #0xff
    6cc0:	cmp	w0, #0x0
    6cc4:	b.eq	6cd4 <fzap_iterate+0x2c4>  // b.none
    6cc8:	ldr	x0, [sp, #128]
    6ccc:	bl	0 <grub_free>
    6cd0:	b	6fc4 <fzap_iterate+0x5b4>
    6cd4:	ldr	w0, [sp, #84]
    6cd8:	cmp	w0, #0x0
    6cdc:	b.ne	6d08 <fzap_iterate+0x2f8>  // b.any
    6ce0:	ldr	x0, [sp, #128]
    6ce4:	ldr	w0, [x0, #24]
    6ce8:	bl	38 <grub_swap_bytes32>
    6cec:	mov	w1, w0
    6cf0:	mov	w0, #0x1eaf                	// #7855
    6cf4:	movk	w0, #0x2ab, lsl #16
    6cf8:	cmp	w1, w0
    6cfc:	cset	w0, ne  // ne = any
    6d00:	and	w0, w0, #0xff
    6d04:	b	6d24 <fzap_iterate+0x314>
    6d08:	ldr	x0, [sp, #128]
    6d0c:	ldr	w1, [x0, #24]
    6d10:	mov	w0, #0x1eaf                	// #7855
    6d14:	movk	w0, #0x2ab, lsl #16
    6d18:	cmp	w1, w0
    6d1c:	cset	w0, ne  // ne = any
    6d20:	and	w0, w0, #0xff
    6d24:	cmp	w0, #0x0
    6d28:	b.eq	6d38 <fzap_iterate+0x328>  // b.none
    6d2c:	ldr	x0, [sp, #128]
    6d30:	bl	0 <grub_free>
    6d34:	b	6fc4 <fzap_iterate+0x5b4>
    6d38:	strh	wzr, [sp, #158]
    6d3c:	b	6fa0 <fzap_iterate+0x590>
    6d40:	ldrh	w0, [sp, #158]
    6d44:	mov	w2, w0
    6d48:	ldr	w1, [sp, #152]
    6d4c:	ldr	x0, [sp, #128]
    6d50:	bl	594 <ZAP_LEAF_ENTRY>
    6d54:	str	x0, [sp, #120]
    6d58:	ldr	x0, [sp, #120]
    6d5c:	ldrb	w0, [x0]
    6d60:	cmp	w0, #0xfc
    6d64:	b.ne	6f90 <fzap_iterate+0x580>  // b.any
    6d68:	ldr	w0, [sp, #84]
    6d6c:	cmp	w0, #0x0
    6d70:	b.ne	6d8c <fzap_iterate+0x37c>  // b.any
    6d74:	ldr	x0, [sp, #120]
    6d78:	ldrh	w0, [x0, #6]
    6d7c:	bl	0 <grub_swap_bytes16>
    6d80:	and	w0, w0, #0xffff
    6d84:	and	x0, x0, #0xffff
    6d88:	b	6d98 <fzap_iterate+0x388>
    6d8c:	ldr	x0, [sp, #120]
    6d90:	ldrh	w0, [x0, #6]
    6d94:	and	x0, x0, #0xffff
    6d98:	ldr	x1, [sp, #56]
    6d9c:	mul	x0, x0, x1
    6da0:	add	x0, x0, #0x1
    6da4:	bl	0 <grub_malloc>
    6da8:	str	x0, [sp, #112]
    6dac:	ldr	w19, [sp, #84]
    6db0:	ldr	w0, [sp, #84]
    6db4:	cmp	w0, #0x0
    6db8:	b.ne	6dd4 <fzap_iterate+0x3c4>  // b.any
    6dbc:	ldr	x0, [sp, #120]
    6dc0:	ldrh	w0, [x0, #4]
    6dc4:	bl	0 <grub_swap_bytes16>
    6dc8:	and	w0, w0, #0xffff
    6dcc:	mov	w20, w0
    6dd0:	b	6de0 <fzap_iterate+0x3d0>
    6dd4:	ldr	x0, [sp, #120]
    6dd8:	ldrh	w0, [x0, #4]
    6ddc:	mov	w20, w0
    6de0:	ldr	w0, [sp, #84]
    6de4:	cmp	w0, #0x0
    6de8:	b.ne	6e04 <fzap_iterate+0x3f4>  // b.any
    6dec:	ldr	x0, [sp, #120]
    6df0:	ldrh	w0, [x0, #6]
    6df4:	bl	0 <grub_swap_bytes16>
    6df8:	and	w0, w0, #0xffff
    6dfc:	and	x0, x0, #0xffff
    6e00:	b	6e10 <fzap_iterate+0x400>
    6e04:	ldr	x0, [sp, #120]
    6e08:	ldrh	w0, [x0, #6]
    6e0c:	and	x0, x0, #0xffff
    6e10:	ldr	x1, [sp, #56]
    6e14:	mul	x0, x0, x1
    6e18:	ldr	x5, [sp, #112]
    6e1c:	mov	x4, x0
    6e20:	mov	w3, w20
    6e24:	ldr	w2, [sp, #152]
    6e28:	mov	w1, w19
    6e2c:	ldr	x0, [sp, #128]
    6e30:	bl	6234 <zap_leaf_array_get>
    6e34:	cmp	w0, #0x0
    6e38:	b.eq	6e48 <fzap_iterate+0x438>  // b.none
    6e3c:	ldr	x0, [sp, #112]
    6e40:	bl	0 <grub_free>
    6e44:	b	6f94 <fzap_iterate+0x584>
    6e48:	ldr	x0, [sp, #120]
    6e4c:	ldrh	w0, [x0, #6]
    6e50:	and	x1, x0, #0xffff
    6e54:	ldr	x0, [sp, #56]
    6e58:	mul	x0, x1, x0
    6e5c:	ldr	x1, [sp, #112]
    6e60:	add	x0, x1, x0
    6e64:	strb	wzr, [x0]
    6e68:	ldr	x0, [sp, #120]
    6e6c:	ldrh	w0, [x0, #10]
    6e70:	mov	w1, w0
    6e74:	ldr	x0, [sp, #120]
    6e78:	ldrb	w0, [x0, #1]
    6e7c:	mul	w0, w1, w0
    6e80:	sxtw	x0, w0
    6e84:	str	x0, [sp, #104]
    6e88:	ldr	w0, [sp, #84]
    6e8c:	cmp	w0, #0x0
    6e90:	b.ne	6eac <fzap_iterate+0x49c>  // b.any
    6e94:	ldr	x0, [sp, #104]
    6e98:	and	w0, w0, #0xffff
    6e9c:	bl	0 <grub_swap_bytes16>
    6ea0:	and	w0, w0, #0xffff
    6ea4:	and	x0, x0, #0xffff
    6ea8:	b	6eb8 <fzap_iterate+0x4a8>
    6eac:	ldr	x0, [sp, #104]
    6eb0:	and	w0, w0, #0xffff
    6eb4:	and	x0, x0, #0xffff
    6eb8:	bl	0 <grub_malloc>
    6ebc:	str	x0, [sp, #96]
    6ec0:	ldr	w19, [sp, #84]
    6ec4:	ldr	w0, [sp, #84]
    6ec8:	cmp	w0, #0x0
    6ecc:	b.ne	6ee4 <fzap_iterate+0x4d4>  // b.any
    6ed0:	ldr	x0, [sp, #120]
    6ed4:	ldrh	w0, [x0, #8]
    6ed8:	bl	0 <grub_swap_bytes16>
    6edc:	and	w0, w0, #0xffff
    6ee0:	b	6eec <fzap_iterate+0x4dc>
    6ee4:	ldr	x0, [sp, #120]
    6ee8:	ldrh	w0, [x0, #8]
    6eec:	ldr	x5, [sp, #96]
    6ef0:	ldr	x4, [sp, #104]
    6ef4:	mov	w3, w0
    6ef8:	ldr	w2, [sp, #152]
    6efc:	mov	w1, w19
    6f00:	ldr	x0, [sp, #128]
    6f04:	bl	6234 <zap_leaf_array_get>
    6f08:	cmp	w0, #0x0
    6f0c:	b.eq	6f24 <fzap_iterate+0x514>  // b.none
    6f10:	ldr	x0, [sp, #112]
    6f14:	bl	0 <grub_free>
    6f18:	ldr	x0, [sp, #96]
    6f1c:	bl	0 <grub_free>
    6f20:	b	6f94 <fzap_iterate+0x584>
    6f24:	ldr	x0, [sp, #120]
    6f28:	ldrh	w0, [x0, #6]
    6f2c:	and	x1, x0, #0xffff
    6f30:	ldr	x0, [sp, #120]
    6f34:	ldrh	w0, [x0, #10]
    6f38:	and	x2, x0, #0xffff
    6f3c:	ldr	x0, [sp, #120]
    6f40:	ldrb	w0, [x0, #1]
    6f44:	and	x0, x0, #0xff
    6f48:	ldr	x6, [sp, #48]
    6f4c:	ldr	x5, [sp, #40]
    6f50:	mov	x4, x0
    6f54:	mov	x3, x2
    6f58:	ldr	x2, [sp, #96]
    6f5c:	ldr	x0, [sp, #112]
    6f60:	blr	x6
    6f64:	cmp	w0, #0x0
    6f68:	b.eq	6f7c <fzap_iterate+0x56c>  // b.none
    6f6c:	ldr	x0, [sp, #128]
    6f70:	bl	0 <grub_free>
    6f74:	mov	w0, #0x1                   	// #1
    6f78:	b	6ff4 <fzap_iterate+0x5e4>
    6f7c:	ldr	x0, [sp, #112]
    6f80:	bl	0 <grub_free>
    6f84:	ldr	x0, [sp, #96]
    6f88:	bl	0 <grub_free>
    6f8c:	b	6f94 <fzap_iterate+0x584>
    6f90:	nop
    6f94:	ldrh	w0, [sp, #158]
    6f98:	add	w0, w0, #0x1
    6f9c:	strh	w0, [sp, #158]
    6fa0:	ldrh	w19, [sp, #158]
    6fa4:	ldr	w0, [sp, #152]
    6fa8:	bl	4e8 <ZAP_LEAF_NUMCHUNKS>
    6fac:	cmp	w19, w0
    6fb0:	b.lt	6d40 <fzap_iterate+0x330>  // b.tstop
    6fb4:	ldr	x0, [sp, #128]
    6fb8:	bl	0 <grub_free>
    6fbc:	b	6fc4 <fzap_iterate+0x5b4>
    6fc0:	nop
    6fc4:	ldr	x0, [sp, #168]
    6fc8:	add	x0, x0, #0x1
    6fcc:	str	x0, [sp, #168]
    6fd0:	ldr	x0, [sp, #64]
    6fd4:	ldr	x0, [x0, #32]
    6fd8:	mov	w1, w0
    6fdc:	mov	x0, #0x1                   	// #1
    6fe0:	lsl	x0, x0, x1
    6fe4:	ldr	x1, [sp, #168]
    6fe8:	cmp	x1, x0
    6fec:	b.cc	6b00 <fzap_iterate+0xf0>  // b.lo, b.ul, b.last
    6ff0:	mov	w0, #0x0                   	// #0
    6ff4:	ldp	x19, x20, [sp, #16]
    6ff8:	ldp	x29, x30, [sp], #176
    6ffc:	ret
	...

0000000000007018 <zap_lookup>:
    7018:	stp	x29, x30, [sp, #-96]!
    701c:	mov	x29, sp
    7020:	str	x0, [sp, #56]
    7024:	str	x1, [sp, #48]
    7028:	str	x2, [sp, #40]
    702c:	str	x3, [sp, #32]
    7030:	str	w4, [sp, #28]
    7034:	ldr	x4, [sp, #48]
    7038:	adrp	x0, 0 <grub_swap_bytes16>
    703c:	add	x0, x0, #0x0
    7040:	ldr	x3, [x0]
    7044:	adrp	x0, 0 <grub_swap_bytes16>
    7048:	add	x0, x0, #0x0
    704c:	ldr	x2, [x0]
    7050:	mov	w1, #0x9c0                 	// #2496
    7054:	adrp	x0, 0 <grub_swap_bytes16>
    7058:	add	x0, x0, #0x0
    705c:	ldr	x0, [x0]
    7060:	bl	0 <grub_real_dprintf>
    7064:	ldr	x0, [sp, #56]
    7068:	ldr	w0, [x0, #512]
    706c:	cmp	w0, #0x0
    7070:	b.ne	708c <zap_lookup+0x74>  // b.any
    7074:	ldr	x0, [sp, #56]
    7078:	ldrh	w0, [x0, #8]
    707c:	bl	0 <grub_swap_bytes16>
    7080:	and	w0, w0, #0xffff
    7084:	lsl	w0, w0, #9
    7088:	b	7098 <zap_lookup+0x80>
    708c:	ldr	x0, [sp, #56]
    7090:	ldrh	w0, [x0, #8]
    7094:	lsl	w0, w0, #9
    7098:	str	w0, [sp, #92]
    709c:	add	x1, sp, #0x44
    70a0:	add	x0, sp, #0x48
    70a4:	ldr	x4, [sp, #32]
    70a8:	mov	x3, x1
    70ac:	mov	x2, x0
    70b0:	mov	x1, #0x0                   	// #0
    70b4:	ldr	x0, [sp, #56]
    70b8:	bl	5780 <dmu_read>
    70bc:	str	w0, [sp, #88]
    70c0:	ldr	w0, [sp, #88]
    70c4:	cmp	w0, #0x0
    70c8:	b.eq	70d4 <zap_lookup+0xbc>  // b.none
    70cc:	ldr	w0, [sp, #88]
    70d0:	b	7278 <zap_lookup+0x260>
    70d4:	ldr	w0, [sp, #68]
    70d8:	cmp	w0, #0x0
    70dc:	b.ne	70f0 <zap_lookup+0xd8>  // b.any
    70e0:	ldr	x0, [sp, #72]
    70e4:	ldr	x0, [x0]
    70e8:	bl	50 <grub_swap_bytes64>
    70ec:	b	70f8 <zap_lookup+0xe0>
    70f0:	ldr	x0, [sp, #72]
    70f4:	ldr	x0, [x0]
    70f8:	str	x0, [sp, #80]
    70fc:	adrp	x0, 0 <grub_swap_bytes16>
    7100:	add	x0, x0, #0x0
    7104:	ldr	x3, [x0]
    7108:	adrp	x0, 0 <grub_swap_bytes16>
    710c:	add	x0, x0, #0x0
    7110:	ldr	x2, [x0]
    7114:	mov	w1, #0x9ca                 	// #2506
    7118:	adrp	x0, 0 <grub_swap_bytes16>
    711c:	add	x0, x0, #0x0
    7120:	ldr	x0, [x0]
    7124:	bl	0 <grub_real_dprintf>
    7128:	ldr	x1, [sp, #80]
    712c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7130:	cmp	x1, x0
    7134:	b.ne	71c4 <zap_lookup+0x1ac>  // b.any
    7138:	adrp	x0, 0 <grub_swap_bytes16>
    713c:	add	x0, x0, #0x0
    7140:	ldr	x3, [x0]
    7144:	adrp	x0, 0 <grub_swap_bytes16>
    7148:	add	x0, x0, #0x0
    714c:	ldr	x2, [x0]
    7150:	mov	w1, #0x9ce                 	// #2510
    7154:	adrp	x0, 0 <grub_swap_bytes16>
    7158:	add	x0, x0, #0x0
    715c:	ldr	x0, [x0]
    7160:	bl	0 <grub_real_dprintf>
    7164:	ldr	x0, [sp, #72]
    7168:	ldr	w1, [sp, #68]
    716c:	ldr	w5, [sp, #28]
    7170:	ldr	x4, [sp, #40]
    7174:	ldr	x3, [sp, #48]
    7178:	ldr	w2, [sp, #92]
    717c:	bl	5b78 <mzap_lookup>
    7180:	str	w0, [sp, #88]
    7184:	ldr	w4, [sp, #88]
    7188:	adrp	x0, 0 <grub_swap_bytes16>
    718c:	add	x0, x0, #0x0
    7190:	ldr	x3, [x0]
    7194:	adrp	x0, 0 <grub_swap_bytes16>
    7198:	add	x0, x0, #0x0
    719c:	ldr	x2, [x0]
    71a0:	mov	w1, #0x9d1                 	// #2513
    71a4:	adrp	x0, 0 <grub_swap_bytes16>
    71a8:	add	x0, x0, #0x0
    71ac:	ldr	x0, [x0]
    71b0:	bl	0 <grub_real_dprintf>
    71b4:	ldr	x0, [sp, #72]
    71b8:	bl	0 <grub_free>
    71bc:	ldr	w0, [sp, #88]
    71c0:	b	7278 <zap_lookup+0x260>
    71c4:	ldr	x1, [sp, #80]
    71c8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    71cc:	cmp	x1, x0
    71d0:	b.ne	7264 <zap_lookup+0x24c>  // b.any
    71d4:	adrp	x0, 0 <grub_swap_bytes16>
    71d8:	add	x0, x0, #0x0
    71dc:	ldr	x3, [x0]
    71e0:	adrp	x0, 0 <grub_swap_bytes16>
    71e4:	add	x0, x0, #0x0
    71e8:	ldr	x2, [x0]
    71ec:	mov	w1, #0x9d7                 	// #2519
    71f0:	adrp	x0, 0 <grub_swap_bytes16>
    71f4:	add	x0, x0, #0x0
    71f8:	ldr	x0, [x0]
    71fc:	bl	0 <grub_real_dprintf>
    7200:	ldr	x0, [sp, #72]
    7204:	ldr	w5, [sp, #28]
    7208:	ldr	x4, [sp, #32]
    720c:	ldr	x3, [sp, #40]
    7210:	ldr	x2, [sp, #48]
    7214:	mov	x1, x0
    7218:	ldr	x0, [sp, #56]
    721c:	bl	6808 <fzap_lookup>
    7220:	str	w0, [sp, #88]
    7224:	ldr	w4, [sp, #88]
    7228:	adrp	x0, 0 <grub_swap_bytes16>
    722c:	add	x0, x0, #0x0
    7230:	ldr	x3, [x0]
    7234:	adrp	x0, 0 <grub_swap_bytes16>
    7238:	add	x0, x0, #0x0
    723c:	ldr	x2, [x0]
    7240:	mov	w1, #0x9db                 	// #2523
    7244:	adrp	x0, 0 <grub_swap_bytes16>
    7248:	add	x0, x0, #0x0
    724c:	ldr	x0, [x0]
    7250:	bl	0 <grub_real_dprintf>
    7254:	ldr	x0, [sp, #72]
    7258:	bl	0 <grub_free>
    725c:	ldr	w0, [sp, #88]
    7260:	b	7278 <zap_lookup+0x260>
    7264:	adrp	x0, 0 <grub_swap_bytes16>
    7268:	add	x0, x0, #0x0
    726c:	ldr	x1, [x0]
    7270:	mov	w0, #0x9                   	// #9
    7274:	bl	0 <grub_error>
    7278:	ldp	x29, x30, [sp], #96
    727c:	ret
	...

00000000000072c0 <zap_iterate_u64_transform>:
    72c0:	stp	x29, x30, [sp, #-96]!
    72c4:	mov	x29, sp
    72c8:	str	x19, [sp, #16]
    72cc:	str	x0, [sp, #72]
    72d0:	str	x1, [sp, #64]
    72d4:	str	x2, [sp, #56]
    72d8:	str	x3, [sp, #48]
    72dc:	str	x4, [sp, #40]
    72e0:	str	x5, [sp, #32]
    72e4:	ldr	x0, [sp, #32]
    72e8:	str	x0, [sp, #88]
    72ec:	ldr	x0, [sp, #40]
    72f0:	cmp	x0, #0x8
    72f4:	b.ne	7304 <zap_iterate_u64_transform+0x44>  // b.any
    72f8:	ldr	x0, [sp, #48]
    72fc:	cmp	x0, #0x1
    7300:	b.eq	730c <zap_iterate_u64_transform+0x4c>  // b.none
    7304:	mov	w0, #0x0                   	// #0
    7308:	b	7338 <zap_iterate_u64_transform+0x78>
    730c:	ldr	x0, [sp, #88]
    7310:	ldr	x19, [x0]
    7314:	ldr	x0, [sp, #56]
    7318:	ldr	x0, [x0]
    731c:	bl	50 <grub_swap_bytes64>
    7320:	mov	x1, x0
    7324:	ldr	x0, [sp, #88]
    7328:	ldr	x0, [x0, #8]
    732c:	mov	x2, x0
    7330:	ldr	x0, [sp, #72]
    7334:	blr	x19
    7338:	ldr	x19, [sp, #16]
    733c:	ldp	x29, x30, [sp], #96
    7340:	ret

0000000000007344 <zap_iterate_u64>:
    7344:	stp	x29, x30, [sp, #-112]!
    7348:	mov	x29, sp
    734c:	str	x0, [sp, #40]
    7350:	str	x1, [sp, #32]
    7354:	str	x2, [sp, #24]
    7358:	str	x3, [sp, #16]
    735c:	ldr	x0, [sp, #40]
    7360:	ldr	w0, [x0, #512]
    7364:	cmp	w0, #0x0
    7368:	b.ne	7384 <zap_iterate_u64+0x40>  // b.any
    736c:	ldr	x0, [sp, #40]
    7370:	ldrh	w0, [x0, #8]
    7374:	bl	0 <grub_swap_bytes16>
    7378:	and	w0, w0, #0xffff
    737c:	lsl	w0, w0, #9
    7380:	b	7390 <zap_iterate_u64+0x4c>
    7384:	ldr	x0, [sp, #40]
    7388:	ldrh	w0, [x0, #8]
    738c:	lsl	w0, w0, #9
    7390:	str	w0, [sp, #108]
    7394:	add	x1, sp, #0x4c
    7398:	add	x0, sp, #0x50
    739c:	ldr	x4, [sp, #24]
    73a0:	mov	x3, x1
    73a4:	mov	x2, x0
    73a8:	mov	x1, #0x0                   	// #0
    73ac:	ldr	x0, [sp, #40]
    73b0:	bl	5780 <dmu_read>
    73b4:	str	w0, [sp, #104]
    73b8:	ldr	w0, [sp, #104]
    73bc:	cmp	w0, #0x0
    73c0:	b.eq	73cc <zap_iterate_u64+0x88>  // b.none
    73c4:	mov	w0, #0x0                   	// #0
    73c8:	b	7528 <zap_iterate_u64+0x1e4>
    73cc:	ldr	w0, [sp, #76]
    73d0:	cmp	w0, #0x0
    73d4:	b.ne	73e8 <zap_iterate_u64+0xa4>  // b.any
    73d8:	ldr	x0, [sp, #80]
    73dc:	ldr	x0, [x0]
    73e0:	bl	50 <grub_swap_bytes64>
    73e4:	b	73f0 <zap_iterate_u64+0xac>
    73e8:	ldr	x0, [sp, #80]
    73ec:	ldr	x0, [x0]
    73f0:	str	x0, [sp, #96]
    73f4:	adrp	x0, 0 <grub_swap_bytes16>
    73f8:	add	x0, x0, #0x0
    73fc:	ldr	x3, [x0]
    7400:	adrp	x0, 0 <grub_swap_bytes16>
    7404:	add	x0, x0, #0x0
    7408:	ldr	x2, [x0]
    740c:	mov	w1, #0xa0f                 	// #2575
    7410:	adrp	x0, 0 <grub_swap_bytes16>
    7414:	add	x0, x0, #0x0
    7418:	ldr	x0, [x0]
    741c:	bl	0 <grub_real_dprintf>
    7420:	ldr	x1, [sp, #96]
    7424:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7428:	cmp	x1, x0
    742c:	b.ne	7488 <zap_iterate_u64+0x144>  // b.any
    7430:	adrp	x0, 0 <grub_swap_bytes16>
    7434:	add	x0, x0, #0x0
    7438:	ldr	x3, [x0]
    743c:	adrp	x0, 0 <grub_swap_bytes16>
    7440:	add	x0, x0, #0x0
    7444:	ldr	x2, [x0]
    7448:	mov	w1, #0xa13                 	// #2579
    744c:	adrp	x0, 0 <grub_swap_bytes16>
    7450:	add	x0, x0, #0x0
    7454:	ldr	x0, [x0]
    7458:	bl	0 <grub_real_dprintf>
    745c:	ldr	x0, [sp, #80]
    7460:	ldr	w1, [sp, #76]
    7464:	ldr	x4, [sp, #16]
    7468:	ldr	x3, [sp, #32]
    746c:	ldr	w2, [sp, #108]
    7470:	bl	5ce0 <mzap_iterate>
    7474:	str	w0, [sp, #92]
    7478:	ldr	x0, [sp, #80]
    747c:	bl	0 <grub_free>
    7480:	ldr	w0, [sp, #92]
    7484:	b	7528 <zap_iterate_u64+0x1e4>
    7488:	ldr	x1, [sp, #96]
    748c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7490:	cmp	x1, x0
    7494:	b.ne	7510 <zap_iterate_u64+0x1cc>  // b.any
    7498:	ldr	x0, [sp, #32]
    749c:	str	x0, [sp, #56]
    74a0:	ldr	x0, [sp, #16]
    74a4:	str	x0, [sp, #64]
    74a8:	adrp	x0, 0 <grub_swap_bytes16>
    74ac:	add	x0, x0, #0x0
    74b0:	ldr	x3, [x0]
    74b4:	adrp	x0, 0 <grub_swap_bytes16>
    74b8:	add	x0, x0, #0x0
    74bc:	ldr	x2, [x0]
    74c0:	mov	w1, #0xa1f                 	// #2591
    74c4:	adrp	x0, 0 <grub_swap_bytes16>
    74c8:	add	x0, x0, #0x0
    74cc:	ldr	x0, [x0]
    74d0:	bl	0 <grub_real_dprintf>
    74d4:	ldr	x1, [sp, #80]
    74d8:	add	x0, sp, #0x38
    74dc:	ldr	x5, [sp, #24]
    74e0:	mov	x4, x0
    74e4:	adrp	x0, 0 <grub_swap_bytes16>
    74e8:	add	x0, x0, #0x0
    74ec:	ldr	x3, [x0]
    74f0:	mov	x2, #0x1                   	// #1
    74f4:	ldr	x0, [sp, #40]
    74f8:	bl	6a10 <fzap_iterate>
    74fc:	str	w0, [sp, #92]
    7500:	ldr	x0, [sp, #80]
    7504:	bl	0 <grub_free>
    7508:	ldr	w0, [sp, #92]
    750c:	b	7528 <zap_iterate_u64+0x1e4>
    7510:	adrp	x0, 0 <grub_swap_bytes16>
    7514:	add	x0, x0, #0x0
    7518:	ldr	x1, [x0]
    751c:	mov	w0, #0x9                   	// #9
    7520:	bl	0 <grub_error>
    7524:	mov	w0, #0x0                   	// #0
    7528:	ldp	x29, x30, [sp], #112
    752c:	ret
	...

0000000000007568 <zap_iterate>:
    7568:	stp	x29, x30, [sp, #-112]!
    756c:	mov	x29, sp
    7570:	str	x0, [sp, #56]
    7574:	str	x1, [sp, #48]
    7578:	str	x2, [sp, #40]
    757c:	str	x3, [sp, #32]
    7580:	str	x4, [sp, #24]
    7584:	add	x1, sp, #0x4c
    7588:	add	x0, sp, #0x50
    758c:	ldr	x4, [sp, #24]
    7590:	mov	x3, x1
    7594:	mov	x2, x0
    7598:	mov	x1, #0x0                   	// #0
    759c:	ldr	x0, [sp, #56]
    75a0:	bl	5780 <dmu_read>
    75a4:	str	w0, [sp, #108]
    75a8:	ldr	w0, [sp, #108]
    75ac:	cmp	w0, #0x0
    75b0:	b.eq	75bc <zap_iterate+0x54>  // b.none
    75b4:	mov	w0, #0x0                   	// #0
    75b8:	b	76c4 <zap_iterate+0x15c>
    75bc:	ldr	w0, [sp, #76]
    75c0:	cmp	w0, #0x0
    75c4:	b.ne	75d8 <zap_iterate+0x70>  // b.any
    75c8:	ldr	x0, [sp, #80]
    75cc:	ldr	x0, [x0]
    75d0:	bl	50 <grub_swap_bytes64>
    75d4:	b	75e0 <zap_iterate+0x78>
    75d8:	ldr	x0, [sp, #80]
    75dc:	ldr	x0, [x0]
    75e0:	str	x0, [sp, #96]
    75e4:	adrp	x0, 0 <grub_swap_bytes16>
    75e8:	add	x0, x0, #0x0
    75ec:	ldr	x3, [x0]
    75f0:	adrp	x0, 0 <grub_swap_bytes16>
    75f4:	add	x0, x0, #0x0
    75f8:	ldr	x2, [x0]
    75fc:	mov	w1, #0xa3f                 	// #2623
    7600:	adrp	x0, 0 <grub_swap_bytes16>
    7604:	add	x0, x0, #0x0
    7608:	ldr	x0, [x0]
    760c:	bl	0 <grub_real_dprintf>
    7610:	ldr	x1, [sp, #96]
    7614:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7618:	cmp	x1, x0
    761c:	b.ne	763c <zap_iterate+0xd4>  // b.any
    7620:	adrp	x0, 0 <grub_swap_bytes16>
    7624:	add	x0, x0, #0x0
    7628:	ldr	x1, [x0]
    762c:	mov	w0, #0x9                   	// #9
    7630:	bl	0 <grub_error>
    7634:	mov	w0, #0x0                   	// #0
    7638:	b	76c4 <zap_iterate+0x15c>
    763c:	ldr	x1, [sp, #96]
    7640:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7644:	cmp	x1, x0
    7648:	b.ne	76ac <zap_iterate+0x144>  // b.any
    764c:	adrp	x0, 0 <grub_swap_bytes16>
    7650:	add	x0, x0, #0x0
    7654:	ldr	x3, [x0]
    7658:	adrp	x0, 0 <grub_swap_bytes16>
    765c:	add	x0, x0, #0x0
    7660:	ldr	x2, [x0]
    7664:	mov	w1, #0xa48                 	// #2632
    7668:	adrp	x0, 0 <grub_swap_bytes16>
    766c:	add	x0, x0, #0x0
    7670:	ldr	x0, [x0]
    7674:	bl	0 <grub_real_dprintf>
    7678:	ldr	x0, [sp, #80]
    767c:	ldr	x5, [sp, #24]
    7680:	ldr	x4, [sp, #32]
    7684:	ldr	x3, [sp, #40]
    7688:	ldr	x2, [sp, #48]
    768c:	mov	x1, x0
    7690:	ldr	x0, [sp, #56]
    7694:	bl	6a10 <fzap_iterate>
    7698:	str	w0, [sp, #92]
    769c:	ldr	x0, [sp, #80]
    76a0:	bl	0 <grub_free>
    76a4:	ldr	w0, [sp, #92]
    76a8:	b	76c4 <zap_iterate+0x15c>
    76ac:	adrp	x0, 0 <grub_swap_bytes16>
    76b0:	add	x0, x0, #0x0
    76b4:	ldr	x1, [x0]
    76b8:	mov	w0, #0x9                   	// #9
    76bc:	bl	0 <grub_error>
    76c0:	mov	w0, #0x0                   	// #0
    76c4:	ldp	x29, x30, [sp], #112
    76c8:	ret
    76cc:	nop
	...

0000000000007700 <dnode_get>:
    7700:	stp	x29, x30, [sp, #-112]!
    7704:	mov	x29, sp
    7708:	str	x0, [sp, #56]
    770c:	str	x1, [sp, #48]
    7710:	strb	w2, [sp, #47]
    7714:	str	x3, [sp, #32]
    7718:	str	x4, [sp, #24]
    771c:	ldr	x0, [sp, #56]
    7720:	ldr	w0, [x0, #512]
    7724:	cmp	w0, #0x0
    7728:	b.ne	7748 <dnode_get+0x48>  // b.any
    772c:	ldr	x0, [sp, #56]
    7730:	ldrh	w0, [x0, #8]
    7734:	bl	0 <grub_swap_bytes16>
    7738:	and	w0, w0, #0xffff
    773c:	lsl	w0, w0, #9
    7740:	sxtw	x0, w0
    7744:	b	7758 <dnode_get+0x58>
    7748:	ldr	x0, [sp, #56]
    774c:	ldrh	w0, [x0, #8]
    7750:	lsl	w0, w0, #9
    7754:	sxtw	x0, w0
    7758:	str	x0, [sp, #104]
    775c:	ldr	x0, [sp, #104]
    7760:	bl	854 <zfs_log2>
    7764:	sub	w0, w0, #0x9
    7768:	str	w0, [sp, #100]
    776c:	ldr	w0, [sp, #100]
    7770:	ldr	x1, [sp, #48]
    7774:	lsr	x0, x1, x0
    7778:	str	x0, [sp, #88]
    777c:	ldr	w0, [sp, #100]
    7780:	mov	w1, #0x1                   	// #1
    7784:	lsl	w0, w1, w0
    7788:	sub	w0, w0, #0x1
    778c:	mov	w1, w0
    7790:	ldr	x0, [sp, #48]
    7794:	and	w0, w1, w0
    7798:	str	w0, [sp, #84]
    779c:	ldr	x0, [sp, #24]
    77a0:	ldr	x0, [x0, #24]
    77a4:	cmp	x0, #0x0
    77a8:	b.eq	7868 <dnode_get+0x168>  // b.none
    77ac:	ldr	x0, [sp, #24]
    77b0:	ldr	x0, [x0, #32]
    77b4:	mov	x2, #0x208                 	// #520
    77b8:	ldr	x1, [sp, #56]
    77bc:	bl	0 <grub_memcmp>
    77c0:	cmp	w0, #0x0
    77c4:	b.ne	7868 <dnode_get+0x168>  // b.any
    77c8:	ldr	x0, [sp, #24]
    77cc:	ldr	x0, [x0, #40]
    77d0:	ldr	x1, [sp, #48]
    77d4:	cmp	x1, x0
    77d8:	b.cc	7868 <dnode_get+0x168>  // b.lo, b.ul, b.last
    77dc:	ldr	x0, [sp, #24]
    77e0:	ldr	x0, [x0, #48]
    77e4:	ldr	x1, [sp, #48]
    77e8:	cmp	x1, x0
    77ec:	b.cs	7868 <dnode_get+0x168>  // b.hs, b.nlast
    77f0:	ldr	x3, [sp, #32]
    77f4:	ldr	x0, [sp, #24]
    77f8:	ldr	x1, [x0, #24]
    77fc:	ldrsw	x0, [sp, #84]
    7800:	lsl	x0, x0, #9
    7804:	add	x0, x1, x0
    7808:	mov	x2, #0x200                 	// #512
    780c:	mov	x1, x0
    7810:	mov	x0, x3
    7814:	bl	0 <grub_memmove>
    7818:	ldr	x0, [sp, #24]
    781c:	ldr	w1, [x0, #56]
    7820:	ldr	x0, [sp, #32]
    7824:	str	w1, [x0, #512]
    7828:	ldrb	w0, [sp, #47]
    782c:	cmp	w0, #0x0
    7830:	b.eq	7860 <dnode_get+0x160>  // b.none
    7834:	ldr	x0, [sp, #32]
    7838:	ldrb	w0, [x0]
    783c:	ldrb	w1, [sp, #47]
    7840:	cmp	w1, w0
    7844:	b.eq	7860 <dnode_get+0x160>  // b.none
    7848:	adrp	x0, 0 <grub_swap_bytes16>
    784c:	add	x0, x0, #0x0
    7850:	ldr	x1, [x0]
    7854:	mov	w0, #0x9                   	// #9
    7858:	bl	0 <grub_error>
    785c:	b	7a24 <dnode_get+0x324>
    7860:	mov	w0, #0x0                   	// #0
    7864:	b	7a24 <dnode_get+0x324>
    7868:	ldr	x0, [sp, #56]
    786c:	ldr	w0, [x0, #512]
    7870:	ldr	x5, [sp, #88]
    7874:	mov	w4, w0
    7878:	adrp	x0, 0 <grub_swap_bytes16>
    787c:	add	x0, x0, #0x0
    7880:	ldr	x3, [x0]
    7884:	adrp	x0, 0 <grub_swap_bytes16>
    7888:	add	x0, x0, #0x0
    788c:	ldr	x2, [x0]
    7890:	mov	w1, #0xa78                 	// #2680
    7894:	adrp	x0, 0 <grub_swap_bytes16>
    7898:	add	x0, x0, #0x0
    789c:	ldr	x0, [x0]
    78a0:	bl	0 <grub_real_dprintf>
    78a4:	add	x1, sp, #0x44
    78a8:	add	x0, sp, #0x48
    78ac:	ldr	x4, [sp, #24]
    78b0:	mov	x3, x1
    78b4:	mov	x2, x0
    78b8:	ldr	x1, [sp, #88]
    78bc:	ldr	x0, [sp, #56]
    78c0:	bl	5780 <dmu_read>
    78c4:	str	w0, [sp, #80]
    78c8:	ldr	w0, [sp, #80]
    78cc:	cmp	w0, #0x0
    78d0:	b.eq	78dc <dnode_get+0x1dc>  // b.none
    78d4:	ldr	w0, [sp, #80]
    78d8:	b	7a24 <dnode_get+0x324>
    78dc:	adrp	x0, 0 <grub_swap_bytes16>
    78e0:	add	x0, x0, #0x0
    78e4:	ldr	x3, [x0]
    78e8:	adrp	x0, 0 <grub_swap_bytes16>
    78ec:	add	x0, x0, #0x0
    78f0:	ldr	x2, [x0]
    78f4:	mov	w1, #0xa7d                 	// #2685
    78f8:	adrp	x0, 0 <grub_swap_bytes16>
    78fc:	add	x0, x0, #0x0
    7900:	ldr	x0, [x0]
    7904:	bl	0 <grub_real_dprintf>
    7908:	ldr	x0, [sp, #24]
    790c:	ldr	x0, [x0, #24]
    7910:	bl	0 <grub_free>
    7914:	ldr	x0, [sp, #24]
    7918:	ldr	x0, [x0, #32]
    791c:	bl	0 <grub_free>
    7920:	mov	x0, #0x208                 	// #520
    7924:	bl	0 <grub_malloc>
    7928:	mov	x1, x0
    792c:	ldr	x0, [sp, #24]
    7930:	str	x1, [x0, #32]
    7934:	ldr	x0, [sp, #24]
    7938:	ldr	x0, [x0, #32]
    793c:	cmp	x0, #0x0
    7940:	b.ne	7960 <dnode_get+0x260>  // b.any
    7944:	adrp	x0, 0 <grub_swap_bytes16>
    7948:	add	x0, x0, #0x0
    794c:	ldr	x0, [x0]
    7950:	str	wzr, [x0]
    7954:	ldr	x0, [sp, #24]
    7958:	str	xzr, [x0, #24]
    795c:	b	79b8 <dnode_get+0x2b8>
    7960:	ldr	x0, [sp, #24]
    7964:	ldr	x0, [x0, #32]
    7968:	mov	x2, #0x208                 	// #520
    796c:	ldr	x1, [sp, #56]
    7970:	bl	100 <grub_memcpy>
    7974:	ldr	x1, [sp, #72]
    7978:	ldr	x0, [sp, #24]
    797c:	str	x1, [x0, #24]
    7980:	ldr	w0, [sp, #100]
    7984:	ldr	x1, [sp, #88]
    7988:	lsl	x1, x1, x0
    798c:	ldr	x0, [sp, #24]
    7990:	str	x1, [x0, #40]
    7994:	ldr	x0, [sp, #88]
    7998:	add	x1, x0, #0x1
    799c:	ldr	w0, [sp, #100]
    79a0:	lsl	x1, x1, x0
    79a4:	ldr	x0, [sp, #24]
    79a8:	str	x1, [x0, #48]
    79ac:	ldr	w1, [sp, #68]
    79b0:	ldr	x0, [sp, #24]
    79b4:	str	w1, [x0, #56]
    79b8:	ldr	x3, [sp, #32]
    79bc:	ldr	x1, [sp, #72]
    79c0:	ldrsw	x0, [sp, #84]
    79c4:	lsl	x0, x0, #9
    79c8:	add	x0, x1, x0
    79cc:	mov	x2, #0x200                 	// #512
    79d0:	mov	x1, x0
    79d4:	mov	x0, x3
    79d8:	bl	0 <grub_memmove>
    79dc:	ldr	w1, [sp, #68]
    79e0:	ldr	x0, [sp, #32]
    79e4:	str	w1, [x0, #512]
    79e8:	ldrb	w0, [sp, #47]
    79ec:	cmp	w0, #0x0
    79f0:	b.eq	7a20 <dnode_get+0x320>  // b.none
    79f4:	ldr	x0, [sp, #32]
    79f8:	ldrb	w0, [x0]
    79fc:	ldrb	w1, [sp, #47]
    7a00:	cmp	w1, w0
    7a04:	b.eq	7a20 <dnode_get+0x320>  // b.none
    7a08:	adrp	x0, 0 <grub_swap_bytes16>
    7a0c:	add	x0, x0, #0x0
    7a10:	ldr	x1, [x0]
    7a14:	mov	w0, #0x9                   	// #9
    7a18:	bl	0 <grub_error>
    7a1c:	b	7a24 <dnode_get+0x324>
    7a20:	mov	w0, #0x0                   	// #0
    7a24:	ldp	x29, x30, [sp], #112
    7a28:	ret
    7a2c:	nop
	...

0000000000007a60 <dnode_get_path>:
    7a60:	stp	x29, x30, [sp, #-272]!
    7a64:	mov	x29, sp
    7a68:	str	x19, [sp, #16]
    7a6c:	str	x0, [sp, #56]
    7a70:	str	x1, [sp, #48]
    7a74:	str	x2, [sp, #40]
    7a78:	str	x3, [sp, #32]
    7a7c:	str	wzr, [sp, #268]
    7a80:	str	xzr, [sp, #240]
    7a84:	mov	x0, #0x210                 	// #528
    7a88:	bl	0 <grub_malloc>
    7a8c:	str	x0, [sp, #232]
    7a90:	ldr	x0, [sp, #232]
    7a94:	cmp	x0, #0x0
    7a98:	b.ne	7ab0 <dnode_get_path+0x50>  // b.any
    7a9c:	adrp	x0, 0 <grub_swap_bytes16>
    7aa0:	add	x0, x0, #0x0
    7aa4:	ldr	x0, [x0]
    7aa8:	ldr	w0, [x0]
    7aac:	b	85d4 <dnode_get_path+0xb74>
    7ab0:	ldr	x0, [sp, #232]
    7ab4:	str	xzr, [x0]
    7ab8:	ldr	x0, [sp, #232]
    7abc:	str	x0, [sp, #192]
    7ac0:	ldr	x0, [sp, #192]
    7ac4:	str	x0, [sp, #240]
    7ac8:	ldr	x5, [sp, #56]
    7acc:	ldr	x0, [sp, #240]
    7ad0:	add	x0, x0, #0x8
    7ad4:	ldr	x4, [sp, #32]
    7ad8:	mov	x3, x0
    7adc:	mov	w2, #0x15                  	// #21
    7ae0:	mov	x1, #0x1                   	// #1
    7ae4:	mov	x0, x5
    7ae8:	bl	7700 <dnode_get>
    7aec:	str	w0, [sp, #268]
    7af0:	ldr	w0, [sp, #268]
    7af4:	cmp	w0, #0x0
    7af8:	b.eq	7b0c <dnode_get_path+0xac>  // b.none
    7afc:	ldr	x0, [sp, #232]
    7b00:	bl	0 <grub_free>
    7b04:	ldr	w0, [sp, #268]
    7b08:	b	85d4 <dnode_get_path+0xb74>
    7b0c:	ldr	x0, [sp, #240]
    7b10:	add	x5, x0, #0x8
    7b14:	add	x0, sp, #0x50
    7b18:	mov	w4, #0x0                   	// #0
    7b1c:	ldr	x3, [sp, #32]
    7b20:	mov	x2, x0
    7b24:	adrp	x0, 0 <grub_swap_bytes16>
    7b28:	add	x0, x0, #0x0
    7b2c:	ldr	x1, [x0]
    7b30:	mov	x0, x5
    7b34:	bl	7018 <zap_lookup>
    7b38:	str	w0, [sp, #268]
    7b3c:	ldr	w0, [sp, #268]
    7b40:	cmp	w0, #0x0
    7b44:	b.eq	7b58 <dnode_get_path+0xf8>  // b.none
    7b48:	ldr	x0, [sp, #232]
    7b4c:	bl	0 <grub_free>
    7b50:	ldr	w0, [sp, #268]
    7b54:	b	85d4 <dnode_get_path+0xb74>
    7b58:	ldr	x0, [sp, #80]
    7b5c:	cmp	x0, #0x5
    7b60:	b.ls	7b84 <dnode_get_path+0x124>  // b.plast
    7b64:	ldr	x0, [sp, #232]
    7b68:	bl	0 <grub_free>
    7b6c:	adrp	x0, 0 <grub_swap_bytes16>
    7b70:	add	x0, x0, #0x0
    7b74:	ldr	x1, [x0]
    7b78:	mov	w0, #0x18                  	// #24
    7b7c:	bl	0 <grub_error>
    7b80:	b	85d4 <dnode_get_path+0xb74>
    7b84:	ldr	x0, [sp, #240]
    7b88:	add	x5, x0, #0x8
    7b8c:	ldr	x0, [sp, #56]
    7b90:	add	x0, x0, #0x210
    7b94:	mov	w4, #0x0                   	// #0
    7b98:	ldr	x3, [sp, #32]
    7b9c:	mov	x2, x0
    7ba0:	adrp	x0, 0 <grub_swap_bytes16>
    7ba4:	add	x0, x0, #0x0
    7ba8:	ldr	x1, [x0]
    7bac:	mov	x0, x5
    7bb0:	bl	7018 <zap_lookup>
    7bb4:	str	w0, [sp, #268]
    7bb8:	ldr	w0, [sp, #268]
    7bbc:	cmp	w0, #0x5
    7bc0:	b.ne	7bdc <dnode_get_path+0x17c>  // b.any
    7bc4:	adrp	x0, 0 <grub_swap_bytes16>
    7bc8:	add	x0, x0, #0x0
    7bcc:	ldr	x0, [x0]
    7bd0:	str	wzr, [x0]
    7bd4:	ldr	x0, [sp, #56]
    7bd8:	str	xzr, [x0, #528]
    7bdc:	ldr	x0, [sp, #240]
    7be0:	add	x5, x0, #0x8
    7be4:	add	x0, sp, #0x58
    7be8:	mov	w4, #0x0                   	// #0
    7bec:	ldr	x3, [sp, #32]
    7bf0:	mov	x2, x0
    7bf4:	adrp	x0, 0 <grub_swap_bytes16>
    7bf8:	add	x0, x0, #0x0
    7bfc:	ldr	x1, [x0]
    7c00:	mov	x0, x5
    7c04:	bl	7018 <zap_lookup>
    7c08:	str	w0, [sp, #268]
    7c0c:	ldr	w0, [sp, #268]
    7c10:	cmp	w0, #0x0
    7c14:	b.eq	7c28 <dnode_get_path+0x1c8>  // b.none
    7c18:	ldr	x0, [sp, #232]
    7c1c:	bl	0 <grub_free>
    7c20:	ldr	w0, [sp, #268]
    7c24:	b	85d4 <dnode_get_path+0xb74>
    7c28:	ldr	x5, [sp, #56]
    7c2c:	ldr	x1, [sp, #88]
    7c30:	ldr	x0, [sp, #240]
    7c34:	add	x0, x0, #0x8
    7c38:	ldr	x4, [sp, #32]
    7c3c:	mov	x3, x0
    7c40:	mov	w2, #0x0                   	// #0
    7c44:	mov	x0, x5
    7c48:	bl	7700 <dnode_get>
    7c4c:	str	w0, [sp, #268]
    7c50:	ldr	w0, [sp, #268]
    7c54:	cmp	w0, #0x0
    7c58:	b.eq	7c6c <dnode_get_path+0x20c>  // b.none
    7c5c:	ldr	x0, [sp, #232]
    7c60:	bl	0 <grub_free>
    7c64:	ldr	w0, [sp, #268]
    7c68:	b	85d4 <dnode_get_path+0xb74>
    7c6c:	ldr	x0, [sp, #48]
    7c70:	bl	0 <grub_strdup>
    7c74:	str	x0, [sp, #248]
    7c78:	ldr	x0, [sp, #248]
    7c7c:	str	x0, [sp, #256]
    7c80:	ldr	x0, [sp, #248]
    7c84:	cmp	x0, #0x0
    7c88:	b.ne	7cb4 <dnode_get_path+0x254>  // b.any
    7c8c:	ldr	x0, [sp, #232]
    7c90:	bl	0 <grub_free>
    7c94:	adrp	x0, 0 <grub_swap_bytes16>
    7c98:	add	x0, x0, #0x0
    7c9c:	ldr	x0, [x0]
    7ca0:	ldr	w0, [x0]
    7ca4:	b	85d4 <dnode_get_path+0xb74>
    7ca8:	ldr	x0, [sp, #256]
    7cac:	add	x0, x0, #0x1
    7cb0:	str	x0, [sp, #256]
    7cb4:	ldr	x0, [sp, #256]
    7cb8:	ldrb	w0, [x0]
    7cbc:	cmp	w0, #0x2f
    7cc0:	b.eq	7ca8 <dnode_get_path+0x248>  // b.none
    7cc4:	ldr	x0, [sp, #256]
    7cc8:	ldrb	w0, [x0]
    7ccc:	cmp	w0, #0x0
    7cd0:	b.eq	8564 <dnode_get_path+0xb04>  // b.none
    7cd4:	ldr	x0, [sp, #256]
    7cd8:	str	x0, [sp, #184]
    7cdc:	b	7cec <dnode_get_path+0x28c>
    7ce0:	ldr	x0, [sp, #256]
    7ce4:	add	x0, x0, #0x1
    7ce8:	str	x0, [sp, #256]
    7cec:	ldr	x0, [sp, #256]
    7cf0:	ldrb	w0, [x0]
    7cf4:	cmp	w0, #0x0
    7cf8:	b.eq	7d0c <dnode_get_path+0x2ac>  // b.none
    7cfc:	ldr	x0, [sp, #256]
    7d00:	ldrb	w0, [x0]
    7d04:	cmp	w0, #0x2f
    7d08:	b.ne	7ce0 <dnode_get_path+0x280>  // b.any
    7d0c:	ldr	x0, [sp, #184]
    7d10:	add	x0, x0, #0x1
    7d14:	ldr	x1, [sp, #256]
    7d18:	cmp	x1, x0
    7d1c:	b.ne	7d30 <dnode_get_path+0x2d0>  // b.any
    7d20:	ldr	x0, [sp, #184]
    7d24:	ldrb	w0, [x0]
    7d28:	cmp	w0, #0x2e
    7d2c:	b.eq	855c <dnode_get_path+0xafc>  // b.none
    7d30:	ldr	x0, [sp, #184]
    7d34:	add	x0, x0, #0x2
    7d38:	ldr	x1, [sp, #256]
    7d3c:	cmp	x1, x0
    7d40:	b.ne	7db4 <dnode_get_path+0x354>  // b.any
    7d44:	ldr	x0, [sp, #184]
    7d48:	ldrb	w0, [x0]
    7d4c:	cmp	w0, #0x2e
    7d50:	b.ne	7db4 <dnode_get_path+0x354>  // b.any
    7d54:	ldr	x0, [sp, #184]
    7d58:	add	x0, x0, #0x1
    7d5c:	ldrb	w0, [x0]
    7d60:	cmp	w0, #0x2e
    7d64:	b.ne	7db4 <dnode_get_path+0x354>  // b.any
    7d68:	ldr	x0, [sp, #232]
    7d6c:	ldr	x0, [x0]
    7d70:	cmp	x0, #0x0
    7d74:	b.eq	7d98 <dnode_get_path+0x338>  // b.none
    7d78:	ldr	x0, [sp, #240]
    7d7c:	str	x0, [sp, #232]
    7d80:	ldr	x0, [sp, #232]
    7d84:	ldr	x0, [x0]
    7d88:	str	x0, [sp, #240]
    7d8c:	ldr	x0, [sp, #232]
    7d90:	bl	0 <grub_free>
    7d94:	b	8560 <dnode_get_path+0xb00>
    7d98:	adrp	x0, 0 <grub_swap_bytes16>
    7d9c:	add	x0, x0, #0x0
    7da0:	ldr	x1, [x0]
    7da4:	mov	w0, #0x5                   	// #5
    7da8:	bl	0 <grub_error>
    7dac:	str	w0, [sp, #268]
    7db0:	b	8578 <dnode_get_path+0xb18>
    7db4:	ldr	x0, [sp, #256]
    7db8:	ldrb	w0, [x0]
    7dbc:	strb	w0, [sp, #183]
    7dc0:	ldr	x0, [sp, #256]
    7dc4:	strb	wzr, [x0]
    7dc8:	ldr	x0, [sp, #240]
    7dcc:	ldrb	w0, [x0, #8]
    7dd0:	cmp	w0, #0x14
    7dd4:	b.eq	7df8 <dnode_get_path+0x398>  // b.none
    7dd8:	ldr	x0, [sp, #248]
    7ddc:	bl	0 <grub_free>
    7de0:	adrp	x0, 0 <grub_swap_bytes16>
    7de4:	add	x0, x0, #0x0
    7de8:	ldr	x1, [x0]
    7dec:	mov	w0, #0x4                   	// #4
    7df0:	bl	0 <grub_error>
    7df4:	b	85d4 <dnode_get_path+0xb74>
    7df8:	ldr	x0, [sp, #240]
    7dfc:	add	x5, x0, #0x8
    7e00:	ldr	x0, [sp, #56]
    7e04:	ldr	x0, [x0, #528]
    7e08:	mov	w1, w0
    7e0c:	add	x0, sp, #0x58
    7e10:	mov	w4, w1
    7e14:	ldr	x3, [sp, #32]
    7e18:	mov	x2, x0
    7e1c:	ldr	x1, [sp, #184]
    7e20:	mov	x0, x5
    7e24:	bl	7018 <zap_lookup>
    7e28:	str	w0, [sp, #268]
    7e2c:	ldr	w0, [sp, #268]
    7e30:	cmp	w0, #0x0
    7e34:	b.ne	856c <dnode_get_path+0xb0c>  // b.any
    7e38:	mov	x0, #0x210                 	// #528
    7e3c:	bl	0 <grub_malloc>
    7e40:	str	x0, [sp, #232]
    7e44:	ldr	x0, [sp, #232]
    7e48:	cmp	x0, #0x0
    7e4c:	b.ne	7e68 <dnode_get_path+0x408>  // b.any
    7e50:	adrp	x0, 0 <grub_swap_bytes16>
    7e54:	add	x0, x0, #0x0
    7e58:	ldr	x0, [x0]
    7e5c:	ldr	w0, [x0]
    7e60:	str	w0, [sp, #268]
    7e64:	b	8578 <dnode_get_path+0xb18>
    7e68:	ldr	x0, [sp, #232]
    7e6c:	ldr	x1, [sp, #240]
    7e70:	str	x1, [x0]
    7e74:	ldr	x0, [sp, #232]
    7e78:	str	x0, [sp, #240]
    7e7c:	ldr	x0, [sp, #88]
    7e80:	and	x0, x0, #0xffffffffffff
    7e84:	str	x0, [sp, #88]
    7e88:	ldr	x5, [sp, #56]
    7e8c:	ldr	x1, [sp, #88]
    7e90:	ldr	x0, [sp, #240]
    7e94:	add	x0, x0, #0x8
    7e98:	ldr	x4, [sp, #32]
    7e9c:	mov	x3, x0
    7ea0:	mov	w2, #0x0                   	// #0
    7ea4:	mov	x0, x5
    7ea8:	bl	7700 <dnode_get>
    7eac:	str	w0, [sp, #268]
    7eb0:	ldr	w0, [sp, #268]
    7eb4:	cmp	w0, #0x0
    7eb8:	b.ne	8574 <dnode_get_path+0xb14>  // b.any
    7ebc:	ldr	x0, [sp, #256]
    7ec0:	ldrb	w1, [sp, #183]
    7ec4:	strb	w1, [x0]
    7ec8:	ldr	x0, [sp, #240]
    7ecc:	ldrb	w0, [x0, #12]
    7ed0:	cmp	w0, #0x11
    7ed4:	b.ne	82b0 <dnode_get_path+0x850>  // b.any
    7ed8:	ldr	x0, [sp, #240]
    7edc:	ldr	w0, [x0, #520]
    7ee0:	cmp	w0, #0x0
    7ee4:	b.ne	7f28 <dnode_get_path+0x4c8>  // b.any
    7ee8:	ldr	x0, [sp, #240]
    7eec:	add	x1, x0, #0xc8
    7ef0:	ldr	x0, [sp, #240]
    7ef4:	ldrb	w0, [x0, #11]
    7ef8:	sub	w0, w0, #0x1
    7efc:	sxtw	x0, w0
    7f00:	lsl	x0, x0, #7
    7f04:	add	x0, x1, x0
    7f08:	ldr	x0, [x0, #72]
    7f0c:	bl	50 <grub_swap_bytes64>
    7f10:	lsr	x0, x0, #12
    7f14:	and	x0, x0, #0xf
    7f18:	cmp	x0, #0xa
    7f1c:	cset	w0, eq  // eq = none
    7f20:	and	w0, w0, #0xff
    7f24:	b	7f60 <dnode_get_path+0x500>
    7f28:	ldr	x0, [sp, #240]
    7f2c:	add	x1, x0, #0xc8
    7f30:	ldr	x0, [sp, #240]
    7f34:	ldrb	w0, [x0, #11]
    7f38:	sub	w0, w0, #0x1
    7f3c:	sxtw	x0, w0
    7f40:	lsl	x0, x0, #7
    7f44:	add	x0, x1, x0
    7f48:	ldr	x0, [x0, #72]
    7f4c:	lsr	x0, x0, #12
    7f50:	and	x0, x0, #0xf
    7f54:	cmp	x0, #0xa
    7f58:	cset	w0, eq  // eq = none
    7f5c:	and	w0, w0, #0xff
    7f60:	cmp	w0, #0x0
    7f64:	b.eq	82b0 <dnode_get_path+0x850>  // b.none
    7f68:	str	wzr, [sp, #220]
    7f6c:	ldr	x0, [sp, #256]
    7f70:	str	x0, [sp, #168]
    7f74:	ldr	x0, [sp, #248]
    7f78:	str	x0, [sp, #160]
    7f7c:	ldr	x0, [sp, #240]
    7f80:	add	x1, x0, #0xc8
    7f84:	ldr	x0, [sp, #240]
    7f88:	ldrb	w0, [x0, #11]
    7f8c:	sub	w0, w0, #0x1
    7f90:	sxtw	x0, w0
    7f94:	lsl	x0, x0, #7
    7f98:	add	x0, x0, #0x108
    7f9c:	add	x0, x1, x0
    7fa0:	str	x0, [sp, #224]
    7fa4:	ldr	x0, [sp, #240]
    7fa8:	ldr	w0, [x0, #520]
    7fac:	cmp	w0, #0x0
    7fb0:	b.ne	7fe0 <dnode_get_path+0x580>  // b.any
    7fb4:	ldr	x0, [sp, #240]
    7fb8:	add	x1, x0, #0xc8
    7fbc:	ldr	x0, [sp, #240]
    7fc0:	ldrb	w0, [x0, #11]
    7fc4:	sub	w0, w0, #0x1
    7fc8:	sxtw	x0, w0
    7fcc:	lsl	x0, x0, #7
    7fd0:	add	x0, x1, x0
    7fd4:	ldr	x0, [x0, #80]
    7fd8:	bl	50 <grub_swap_bytes64>
    7fdc:	b	8004 <dnode_get_path+0x5a4>
    7fe0:	ldr	x0, [sp, #240]
    7fe4:	add	x1, x0, #0xc8
    7fe8:	ldr	x0, [sp, #240]
    7fec:	ldrb	w0, [x0, #11]
    7ff0:	sub	w0, w0, #0x1
    7ff4:	sxtw	x0, w0
    7ff8:	lsl	x0, x0, #7
    7ffc:	add	x0, x1, x0
    8000:	ldr	x0, [x0, #80]
    8004:	str	x0, [sp, #152]
    8008:	ldr	x0, [sp, #240]
    800c:	ldrb	w0, [x0, #15]
    8010:	and	w0, w0, #0x1
    8014:	cmp	w0, #0x0
    8018:	b.eq	8184 <dnode_get_path+0x724>  // b.none
    801c:	ldr	x0, [sp, #240]
    8020:	ldr	w0, [x0, #520]
    8024:	cmp	w0, #0x0
    8028:	b.ne	8048 <dnode_get_path+0x5e8>  // b.any
    802c:	ldr	x0, [sp, #240]
    8030:	ldrh	w0, [x0, #16]
    8034:	bl	0 <grub_swap_bytes16>
    8038:	and	w0, w0, #0xffff
    803c:	lsl	w0, w0, #9
    8040:	sxtw	x0, w0
    8044:	b	8058 <dnode_get_path+0x5f8>
    8048:	ldr	x0, [sp, #240]
    804c:	ldrh	w0, [x0, #16]
    8050:	lsl	w0, w0, #9
    8054:	sxtw	x0, w0
    8058:	str	x0, [sp, #144]
    805c:	ldr	x0, [sp, #144]
    8060:	cmp	x0, #0x0
    8064:	b.ne	8080 <dnode_get_path+0x620>  // b.any
    8068:	adrp	x0, 0 <grub_swap_bytes16>
    806c:	add	x0, x0, #0x0
    8070:	ldr	x1, [x0]
    8074:	mov	w0, #0x9                   	// #9
    8078:	bl	0 <grub_error>
    807c:	b	85d4 <dnode_get_path+0xb74>
    8080:	ldr	x0, [sp, #152]
    8084:	bl	0 <grub_malloc>
    8088:	str	x0, [sp, #224]
    808c:	ldr	x0, [sp, #224]
    8090:	cmp	x0, #0x0
    8094:	b.ne	80ac <dnode_get_path+0x64c>  // b.any
    8098:	adrp	x0, 0 <grub_swap_bytes16>
    809c:	add	x0, x0, #0x0
    80a0:	ldr	x0, [x0]
    80a4:	ldr	w0, [x0]
    80a8:	b	85d4 <dnode_get_path+0xb74>
    80ac:	str	xzr, [sp, #208]
    80b0:	b	8158 <dnode_get_path+0x6f8>
    80b4:	ldr	x0, [sp, #240]
    80b8:	add	x0, x0, #0x8
    80bc:	add	x1, sp, #0x48
    80c0:	ldr	x4, [sp, #32]
    80c4:	mov	x3, #0x0                   	// #0
    80c8:	mov	x2, x1
    80cc:	ldr	x1, [sp, #208]
    80d0:	bl	5780 <dmu_read>
    80d4:	str	w0, [sp, #268]
    80d8:	ldr	w0, [sp, #268]
    80dc:	cmp	w0, #0x0
    80e0:	b.eq	80f4 <dnode_get_path+0x694>  // b.none
    80e4:	ldr	x0, [sp, #224]
    80e8:	bl	0 <grub_free>
    80ec:	ldr	w0, [sp, #268]
    80f0:	b	85d4 <dnode_get_path+0xb74>
    80f4:	ldr	x1, [sp, #208]
    80f8:	ldr	x0, [sp, #144]
    80fc:	mul	x0, x1, x0
    8100:	ldr	x1, [sp, #152]
    8104:	sub	x0, x1, x0
    8108:	str	x0, [sp, #200]
    810c:	ldr	x1, [sp, #200]
    8110:	ldr	x0, [sp, #144]
    8114:	cmp	x1, x0
    8118:	b.ls	8124 <dnode_get_path+0x6c4>  // b.plast
    811c:	ldr	x0, [sp, #144]
    8120:	str	x0, [sp, #200]
    8124:	ldr	x1, [sp, #208]
    8128:	ldr	x0, [sp, #144]
    812c:	mul	x0, x1, x0
    8130:	ldr	x1, [sp, #224]
    8134:	add	x0, x1, x0
    8138:	ldr	x1, [sp, #72]
    813c:	ldr	x2, [sp, #200]
    8140:	bl	100 <grub_memcpy>
    8144:	ldr	x0, [sp, #72]
    8148:	bl	0 <grub_free>
    814c:	ldr	x0, [sp, #208]
    8150:	add	x0, x0, #0x1
    8154:	str	x0, [sp, #208]
    8158:	ldr	x1, [sp, #152]
    815c:	ldr	x0, [sp, #144]
    8160:	add	x0, x1, x0
    8164:	sub	x1, x0, #0x1
    8168:	ldr	x0, [sp, #144]
    816c:	udiv	x0, x1, x0
    8170:	ldr	x1, [sp, #208]
    8174:	cmp	x1, x0
    8178:	b.cc	80b4 <dnode_get_path+0x654>  // b.lo, b.ul, b.last
    817c:	mov	w0, #0x1                   	// #1
    8180:	str	w0, [sp, #220]
    8184:	ldr	x0, [sp, #168]
    8188:	bl	0 <grub_strlen>
    818c:	mov	x1, x0
    8190:	ldr	x0, [sp, #152]
    8194:	add	x0, x1, x0
    8198:	add	x0, x0, #0x1
    819c:	bl	0 <grub_malloc>
    81a0:	str	x0, [sp, #248]
    81a4:	ldr	x0, [sp, #248]
    81a8:	str	x0, [sp, #256]
    81ac:	ldr	x0, [sp, #248]
    81b0:	cmp	x0, #0x0
    81b4:	b.ne	81e8 <dnode_get_path+0x788>  // b.any
    81b8:	ldr	x0, [sp, #160]
    81bc:	bl	0 <grub_free>
    81c0:	ldr	w0, [sp, #220]
    81c4:	cmp	w0, #0x0
    81c8:	b.eq	81d4 <dnode_get_path+0x774>  // b.none
    81cc:	ldr	x0, [sp, #224]
    81d0:	bl	0 <grub_free>
    81d4:	adrp	x0, 0 <grub_swap_bytes16>
    81d8:	add	x0, x0, #0x0
    81dc:	ldr	x0, [x0]
    81e0:	ldr	w0, [x0]
    81e4:	b	85d4 <dnode_get_path+0xb74>
    81e8:	ldr	x2, [sp, #152]
    81ec:	ldr	x1, [sp, #224]
    81f0:	ldr	x0, [sp, #256]
    81f4:	bl	100 <grub_memcpy>
    81f8:	ldr	w0, [sp, #220]
    81fc:	cmp	w0, #0x0
    8200:	b.eq	820c <dnode_get_path+0x7ac>  // b.none
    8204:	ldr	x0, [sp, #224]
    8208:	bl	0 <grub_free>
    820c:	ldr	x1, [sp, #256]
    8210:	ldr	x0, [sp, #152]
    8214:	add	x0, x1, x0
    8218:	strb	wzr, [x0]
    821c:	ldr	x0, [sp, #256]
    8220:	bl	0 <grub_strlen>
    8224:	mov	x1, x0
    8228:	ldr	x0, [sp, #256]
    822c:	add	x19, x0, x1
    8230:	ldr	x0, [sp, #168]
    8234:	bl	0 <grub_strlen>
    8238:	add	x0, x0, #0x1
    823c:	mov	x2, x0
    8240:	ldr	x1, [sp, #168]
    8244:	mov	x0, x19
    8248:	bl	100 <grub_memcpy>
    824c:	ldr	x0, [sp, #160]
    8250:	bl	0 <grub_free>
    8254:	ldr	x0, [sp, #256]
    8258:	ldrb	w0, [x0]
    825c:	cmp	w0, #0x2f
    8260:	b.eq	82a0 <dnode_get_path+0x840>  // b.none
    8264:	ldr	x0, [sp, #240]
    8268:	str	x0, [sp, #232]
    826c:	ldr	x0, [sp, #232]
    8270:	ldr	x0, [x0]
    8274:	str	x0, [sp, #240]
    8278:	ldr	x0, [sp, #232]
    827c:	bl	0 <grub_free>
    8280:	b	82b0 <dnode_get_path+0x850>
    8284:	ldr	x0, [sp, #240]
    8288:	str	x0, [sp, #232]
    828c:	ldr	x0, [sp, #232]
    8290:	ldr	x0, [x0]
    8294:	str	x0, [sp, #240]
    8298:	ldr	x0, [sp, #232]
    829c:	bl	0 <grub_free>
    82a0:	ldr	x1, [sp, #240]
    82a4:	ldr	x0, [sp, #192]
    82a8:	cmp	x1, x0
    82ac:	b.ne	8284 <dnode_get_path+0x824>  // b.any
    82b0:	ldr	x0, [sp, #240]
    82b4:	ldrb	w0, [x0, #12]
    82b8:	cmp	w0, #0x2c
    82bc:	b.ne	7cb4 <dnode_get_path+0x254>  // b.any
    82c0:	ldr	x0, [sp, #240]
    82c4:	ldrh	w0, [x0, #18]
    82c8:	cmp	w0, #0x0
    82cc:	b.eq	82f8 <dnode_get_path+0x898>  // b.none
    82d0:	ldr	x0, [sp, #240]
    82d4:	add	x1, x0, #0xc8
    82d8:	ldr	x0, [sp, #240]
    82dc:	ldrb	w0, [x0, #11]
    82e0:	sub	w0, w0, #0x1
    82e4:	sxtw	x0, w0
    82e8:	lsl	x0, x0, #7
    82ec:	add	x0, x1, x0
    82f0:	str	x0, [sp, #64]
    82f4:	b	836c <dnode_get_path+0x90c>
    82f8:	ldr	x0, [sp, #240]
    82fc:	ldrb	w0, [x0, #15]
    8300:	and	w0, w0, #0x4
    8304:	cmp	w0, #0x0
    8308:	b.eq	8354 <dnode_get_path+0x8f4>  // b.none
    830c:	ldr	x0, [sp, #240]
    8310:	add	x0, x0, #0x188
    8314:	str	x0, [sp, #136]
    8318:	ldr	x0, [sp, #240]
    831c:	ldr	w0, [x0, #520]
    8320:	add	x1, sp, #0x40
    8324:	ldr	x4, [sp, #32]
    8328:	mov	x3, #0x0                   	// #0
    832c:	mov	x2, x1
    8330:	mov	w1, w0
    8334:	ldr	x0, [sp, #136]
    8338:	bl	4e3c <zio_read>
    833c:	str	w0, [sp, #268]
    8340:	ldr	w0, [sp, #268]
    8344:	cmp	w0, #0x0
    8348:	b.eq	836c <dnode_get_path+0x90c>  // b.none
    834c:	ldr	w0, [sp, #268]
    8350:	b	85d4 <dnode_get_path+0xb74>
    8354:	adrp	x0, 0 <grub_swap_bytes16>
    8358:	add	x0, x0, #0x0
    835c:	ldr	x1, [x0]
    8360:	mov	w0, #0x9                   	// #9
    8364:	bl	0 <grub_error>
    8368:	b	85d4 <dnode_get_path+0xb74>
    836c:	ldr	x0, [sp, #64]
    8370:	ldrh	w0, [x0, #4]
    8374:	lsr	w0, w0, #10
    8378:	and	w0, w0, #0xffff
    837c:	lsl	w0, w0, #3
    8380:	str	w0, [sp, #132]
    8384:	ldr	x0, [sp, #240]
    8388:	ldr	w0, [x0, #520]
    838c:	cmp	w0, #0x0
    8390:	b.ne	83c0 <dnode_get_path+0x960>  // b.any
    8394:	ldr	x1, [sp, #64]
    8398:	ldrsw	x0, [sp, #132]
    839c:	add	x0, x1, x0
    83a0:	bl	88 <grub_get_unaligned64>
    83a4:	bl	50 <grub_swap_bytes64>
    83a8:	lsr	x0, x0, #12
    83ac:	and	x0, x0, #0xf
    83b0:	cmp	x0, #0xa
    83b4:	cset	w0, eq  // eq = none
    83b8:	and	w0, w0, #0xff
    83bc:	b	83e4 <dnode_get_path+0x984>
    83c0:	ldr	x1, [sp, #64]
    83c4:	ldrsw	x0, [sp, #132]
    83c8:	add	x0, x1, x0
    83cc:	bl	88 <grub_get_unaligned64>
    83d0:	lsr	x0, x0, #12
    83d4:	and	x0, x0, #0xf
    83d8:	cmp	x0, #0xa
    83dc:	cset	w0, eq  // eq = none
    83e0:	and	w0, w0, #0xff
    83e4:	cmp	w0, #0x0
    83e8:	b.eq	7cb4 <dnode_get_path+0x254>  // b.none
    83ec:	ldr	x1, [sp, #64]
    83f0:	ldrsw	x0, [sp, #132]
    83f4:	add	x0, x0, #0xa0
    83f8:	add	x0, x1, x0
    83fc:	str	x0, [sp, #120]
    8400:	ldr	x0, [sp, #240]
    8404:	ldr	w0, [x0, #520]
    8408:	cmp	w0, #0x0
    840c:	b.ne	842c <dnode_get_path+0x9cc>  // b.any
    8410:	ldr	x1, [sp, #64]
    8414:	ldrsw	x0, [sp, #132]
    8418:	add	x0, x0, #0x8
    841c:	add	x0, x1, x0
    8420:	bl	88 <grub_get_unaligned64>
    8424:	bl	50 <grub_swap_bytes64>
    8428:	b	8440 <dnode_get_path+0x9e0>
    842c:	ldr	x1, [sp, #64]
    8430:	ldrsw	x0, [sp, #132]
    8434:	add	x0, x0, #0x8
    8438:	add	x0, x1, x0
    843c:	bl	88 <grub_get_unaligned64>
    8440:	str	x0, [sp, #112]
    8444:	ldr	x0, [sp, #256]
    8448:	str	x0, [sp, #104]
    844c:	ldr	x0, [sp, #248]
    8450:	str	x0, [sp, #96]
    8454:	ldr	x0, [sp, #104]
    8458:	bl	0 <grub_strlen>
    845c:	mov	x1, x0
    8460:	ldr	x0, [sp, #112]
    8464:	add	x0, x1, x0
    8468:	add	x0, x0, #0x1
    846c:	bl	0 <grub_malloc>
    8470:	str	x0, [sp, #248]
    8474:	ldr	x0, [sp, #248]
    8478:	str	x0, [sp, #256]
    847c:	ldr	x0, [sp, #248]
    8480:	cmp	x0, #0x0
    8484:	b.ne	84a4 <dnode_get_path+0xa44>  // b.any
    8488:	ldr	x0, [sp, #96]
    848c:	bl	0 <grub_free>
    8490:	adrp	x0, 0 <grub_swap_bytes16>
    8494:	add	x0, x0, #0x0
    8498:	ldr	x0, [x0]
    849c:	ldr	w0, [x0]
    84a0:	b	85d4 <dnode_get_path+0xb74>
    84a4:	ldr	x2, [sp, #112]
    84a8:	ldr	x1, [sp, #120]
    84ac:	ldr	x0, [sp, #256]
    84b0:	bl	100 <grub_memcpy>
    84b4:	ldr	x1, [sp, #256]
    84b8:	ldr	x0, [sp, #112]
    84bc:	add	x0, x1, x0
    84c0:	strb	wzr, [x0]
    84c4:	ldr	x0, [sp, #256]
    84c8:	bl	0 <grub_strlen>
    84cc:	mov	x1, x0
    84d0:	ldr	x0, [sp, #256]
    84d4:	add	x19, x0, x1
    84d8:	ldr	x0, [sp, #104]
    84dc:	bl	0 <grub_strlen>
    84e0:	add	x0, x0, #0x1
    84e4:	mov	x2, x0
    84e8:	ldr	x1, [sp, #104]
    84ec:	mov	x0, x19
    84f0:	bl	100 <grub_memcpy>
    84f4:	ldr	x0, [sp, #96]
    84f8:	bl	0 <grub_free>
    84fc:	ldr	x0, [sp, #256]
    8500:	ldrb	w0, [x0]
    8504:	cmp	w0, #0x2f
    8508:	b.eq	8548 <dnode_get_path+0xae8>  // b.none
    850c:	ldr	x0, [sp, #240]
    8510:	str	x0, [sp, #232]
    8514:	ldr	x0, [sp, #232]
    8518:	ldr	x0, [x0]
    851c:	str	x0, [sp, #240]
    8520:	ldr	x0, [sp, #232]
    8524:	bl	0 <grub_free>
    8528:	b	7cb4 <dnode_get_path+0x254>
    852c:	ldr	x0, [sp, #240]
    8530:	str	x0, [sp, #232]
    8534:	ldr	x0, [sp, #232]
    8538:	ldr	x0, [x0]
    853c:	str	x0, [sp, #240]
    8540:	ldr	x0, [sp, #232]
    8544:	bl	0 <grub_free>
    8548:	ldr	x1, [sp, #240]
    854c:	ldr	x0, [sp, #192]
    8550:	cmp	x1, x0
    8554:	b.ne	852c <dnode_get_path+0xacc>  // b.any
    8558:	b	7cb4 <dnode_get_path+0x254>
    855c:	nop
    8560:	b	7cb4 <dnode_get_path+0x254>
    8564:	nop
    8568:	b	8578 <dnode_get_path+0xb18>
    856c:	nop
    8570:	b	8578 <dnode_get_path+0xb18>
    8574:	nop
    8578:	ldr	w0, [sp, #268]
    857c:	cmp	w0, #0x0
    8580:	b.ne	85bc <dnode_get_path+0xb5c>  // b.any
    8584:	ldr	x0, [sp, #240]
    8588:	add	x0, x0, #0x8
    858c:	mov	x2, #0x208                 	// #520
    8590:	mov	x1, x0
    8594:	ldr	x0, [sp, #40]
    8598:	bl	100 <grub_memcpy>
    859c:	b	85bc <dnode_get_path+0xb5c>
    85a0:	ldr	x0, [sp, #240]
    85a4:	ldr	x0, [x0]
    85a8:	str	x0, [sp, #232]
    85ac:	ldr	x0, [sp, #240]
    85b0:	bl	0 <grub_free>
    85b4:	ldr	x0, [sp, #232]
    85b8:	str	x0, [sp, #240]
    85bc:	ldr	x0, [sp, #240]
    85c0:	cmp	x0, #0x0
    85c4:	b.ne	85a0 <dnode_get_path+0xb40>  // b.any
    85c8:	ldr	x0, [sp, #248]
    85cc:	bl	0 <grub_free>
    85d0:	ldr	w0, [sp, #268]
    85d4:	ldr	x19, [sp, #16]
    85d8:	ldp	x29, x30, [sp], #272
    85dc:	ret
	...

0000000000008628 <get_filesystem_dnode>:
    8628:	stp	x29, x30, [sp, #-96]!
    862c:	mov	x29, sp
    8630:	str	x0, [sp, #40]
    8634:	str	x1, [sp, #32]
    8638:	str	x2, [sp, #24]
    863c:	str	x3, [sp, #16]
    8640:	ldr	x0, [sp, #40]
    8644:	ldr	w0, [x0, #512]
    8648:	mov	w4, w0
    864c:	adrp	x0, 0 <grub_swap_bytes16>
    8650:	add	x0, x0, #0x0
    8654:	ldr	x3, [x0]
    8658:	adrp	x0, 0 <grub_swap_bytes16>
    865c:	add	x0, x0, #0x0
    8660:	ldr	x2, [x0]
    8664:	mov	w1, #0xc01                 	// #3073
    8668:	adrp	x0, 0 <grub_swap_bytes16>
    866c:	add	x0, x0, #0x0
    8670:	ldr	x0, [x0]
    8674:	bl	0 <grub_real_dprintf>
    8678:	ldr	x4, [sp, #16]
    867c:	ldr	x3, [sp, #24]
    8680:	mov	w2, #0x1                   	// #1
    8684:	mov	x1, #0x1                   	// #1
    8688:	ldr	x0, [sp, #40]
    868c:	bl	7700 <dnode_get>
    8690:	str	w0, [sp, #92]
    8694:	ldr	w0, [sp, #92]
    8698:	cmp	w0, #0x0
    869c:	b.eq	86a8 <get_filesystem_dnode+0x80>  // b.none
    86a0:	ldr	w0, [sp, #92]
    86a4:	b	8944 <get_filesystem_dnode+0x31c>
    86a8:	adrp	x0, 0 <grub_swap_bytes16>
    86ac:	add	x0, x0, #0x0
    86b0:	ldr	x3, [x0]
    86b4:	adrp	x0, 0 <grub_swap_bytes16>
    86b8:	add	x0, x0, #0x0
    86bc:	ldr	x2, [x0]
    86c0:	mov	w1, #0xc08                 	// #3080
    86c4:	adrp	x0, 0 <grub_swap_bytes16>
    86c8:	add	x0, x0, #0x0
    86cc:	ldr	x0, [x0]
    86d0:	bl	0 <grub_real_dprintf>
    86d4:	add	x0, sp, #0x38
    86d8:	mov	w4, #0x0                   	// #0
    86dc:	ldr	x3, [sp, #16]
    86e0:	mov	x2, x0
    86e4:	adrp	x0, 0 <grub_swap_bytes16>
    86e8:	add	x0, x0, #0x0
    86ec:	ldr	x1, [x0]
    86f0:	ldr	x0, [sp, #24]
    86f4:	bl	7018 <zap_lookup>
    86f8:	str	w0, [sp, #92]
    86fc:	ldr	w0, [sp, #92]
    8700:	cmp	w0, #0x0
    8704:	b.eq	8710 <get_filesystem_dnode+0xe8>  // b.none
    8708:	ldr	w0, [sp, #92]
    870c:	b	8944 <get_filesystem_dnode+0x31c>
    8710:	adrp	x0, 0 <grub_swap_bytes16>
    8714:	add	x0, x0, #0x0
    8718:	ldr	x3, [x0]
    871c:	adrp	x0, 0 <grub_swap_bytes16>
    8720:	add	x0, x0, #0x0
    8724:	ldr	x2, [x0]
    8728:	mov	w1, #0xc0e                 	// #3086
    872c:	adrp	x0, 0 <grub_swap_bytes16>
    8730:	add	x0, x0, #0x0
    8734:	ldr	x0, [x0]
    8738:	bl	0 <grub_real_dprintf>
    873c:	ldr	x0, [sp, #56]
    8740:	ldr	x4, [sp, #16]
    8744:	ldr	x3, [sp, #24]
    8748:	mov	w2, #0x0                   	// #0
    874c:	mov	x1, x0
    8750:	ldr	x0, [sp, #40]
    8754:	bl	7700 <dnode_get>
    8758:	str	w0, [sp, #92]
    875c:	ldr	w0, [sp, #92]
    8760:	cmp	w0, #0x0
    8764:	b.eq	8770 <get_filesystem_dnode+0x148>  // b.none
    8768:	ldr	w0, [sp, #92]
    876c:	b	8944 <get_filesystem_dnode+0x31c>
    8770:	adrp	x0, 0 <grub_swap_bytes16>
    8774:	add	x0, x0, #0x0
    8778:	ldr	x3, [x0]
    877c:	adrp	x0, 0 <grub_swap_bytes16>
    8780:	add	x0, x0, #0x0
    8784:	ldr	x2, [x0]
    8788:	mov	w1, #0xc14                 	// #3092
    878c:	adrp	x0, 0 <grub_swap_bytes16>
    8790:	add	x0, x0, #0x0
    8794:	ldr	x0, [x0]
    8798:	bl	0 <grub_real_dprintf>
    879c:	b	8930 <get_filesystem_dnode+0x308>
    87a0:	ldr	x0, [sp, #32]
    87a4:	add	x0, x0, #0x1
    87a8:	str	x0, [sp, #32]
    87ac:	ldr	x0, [sp, #32]
    87b0:	ldrb	w0, [x0]
    87b4:	cmp	w0, #0x2f
    87b8:	b.eq	87a0 <get_filesystem_dnode+0x178>  // b.none
    87bc:	ldr	x0, [sp, #32]
    87c0:	ldrb	w0, [x0]
    87c4:	cmp	w0, #0x0
    87c8:	b.eq	8940 <get_filesystem_dnode+0x318>  // b.none
    87cc:	ldr	x0, [sp, #32]
    87d0:	ldrb	w0, [x0]
    87d4:	cmp	w0, #0x40
    87d8:	b.eq	8940 <get_filesystem_dnode+0x318>  // b.none
    87dc:	ldr	x0, [sp, #32]
    87e0:	str	x0, [sp, #80]
    87e4:	b	87f4 <get_filesystem_dnode+0x1cc>
    87e8:	ldr	x0, [sp, #32]
    87ec:	add	x0, x0, #0x1
    87f0:	str	x0, [sp, #32]
    87f4:	ldr	x0, [sp, #32]
    87f8:	ldrb	w0, [x0]
    87fc:	cmp	w0, #0x0
    8800:	b.eq	8814 <get_filesystem_dnode+0x1ec>  // b.none
    8804:	ldr	x0, [sp, #32]
    8808:	ldrb	w0, [x0]
    880c:	cmp	w0, #0x2f
    8810:	b.ne	87e8 <get_filesystem_dnode+0x1c0>  // b.any
    8814:	ldr	x0, [sp, #32]
    8818:	ldrb	w0, [x0]
    881c:	strb	w0, [sp, #79]
    8820:	ldr	x0, [sp, #32]
    8824:	strb	wzr, [x0]
    8828:	ldr	x0, [sp, #24]
    882c:	ldr	w0, [x0, #512]
    8830:	cmp	w0, #0x0
    8834:	b.ne	8864 <get_filesystem_dnode+0x23c>  // b.any
    8838:	ldr	x0, [sp, #24]
    883c:	add	x1, x0, #0xc0
    8840:	ldr	x0, [sp, #24]
    8844:	ldrb	w0, [x0, #3]
    8848:	sub	w0, w0, #0x1
    884c:	sxtw	x0, w0
    8850:	lsl	x0, x0, #7
    8854:	add	x0, x1, x0
    8858:	ldr	x0, [x0, #32]
    885c:	bl	50 <grub_swap_bytes64>
    8860:	b	8888 <get_filesystem_dnode+0x260>
    8864:	ldr	x0, [sp, #24]
    8868:	add	x1, x0, #0xc0
    886c:	ldr	x0, [sp, #24]
    8870:	ldrb	w0, [x0, #3]
    8874:	sub	w0, w0, #0x1
    8878:	sxtw	x0, w0
    887c:	lsl	x0, x0, #7
    8880:	add	x0, x1, x0
    8884:	ldr	x0, [x0, #32]
    8888:	str	x0, [sp, #64]
    888c:	ldr	x4, [sp, #16]
    8890:	ldr	x3, [sp, #24]
    8894:	mov	w2, #0xd                   	// #13
    8898:	ldr	x1, [sp, #64]
    889c:	ldr	x0, [sp, #40]
    88a0:	bl	7700 <dnode_get>
    88a4:	str	w0, [sp, #92]
    88a8:	ldr	w0, [sp, #92]
    88ac:	cmp	w0, #0x0
    88b0:	b.eq	88bc <get_filesystem_dnode+0x294>  // b.none
    88b4:	ldr	w0, [sp, #92]
    88b8:	b	8944 <get_filesystem_dnode+0x31c>
    88bc:	add	x0, sp, #0x38
    88c0:	mov	w4, #0x0                   	// #0
    88c4:	ldr	x3, [sp, #16]
    88c8:	mov	x2, x0
    88cc:	ldr	x1, [sp, #80]
    88d0:	ldr	x0, [sp, #24]
    88d4:	bl	7018 <zap_lookup>
    88d8:	str	w0, [sp, #92]
    88dc:	ldr	w0, [sp, #92]
    88e0:	cmp	w0, #0x0
    88e4:	b.eq	88f0 <get_filesystem_dnode+0x2c8>  // b.none
    88e8:	ldr	w0, [sp, #92]
    88ec:	b	8944 <get_filesystem_dnode+0x31c>
    88f0:	ldr	x0, [sp, #56]
    88f4:	ldr	x4, [sp, #16]
    88f8:	ldr	x3, [sp, #24]
    88fc:	mov	w2, #0x0                   	// #0
    8900:	mov	x1, x0
    8904:	ldr	x0, [sp, #40]
    8908:	bl	7700 <dnode_get>
    890c:	str	w0, [sp, #92]
    8910:	ldr	w0, [sp, #92]
    8914:	cmp	w0, #0x0
    8918:	b.eq	8924 <get_filesystem_dnode+0x2fc>  // b.none
    891c:	ldr	w0, [sp, #92]
    8920:	b	8944 <get_filesystem_dnode+0x31c>
    8924:	ldr	x0, [sp, #32]
    8928:	ldrb	w1, [sp, #79]
    892c:	strb	w1, [x0]
    8930:	ldr	x0, [sp, #32]
    8934:	ldrb	w0, [x0]
    8938:	cmp	w0, #0x0
    893c:	b.ne	87ac <get_filesystem_dnode+0x184>  // b.any
    8940:	mov	w0, #0x0                   	// #0
    8944:	ldp	x29, x30, [sp], #96
    8948:	ret
    894c:	nop
	...

0000000000008978 <make_mdn>:
    8978:	stp	x29, x30, [sp, #-64]!
    897c:	mov	x29, sp
    8980:	str	x0, [sp, #24]
    8984:	str	x1, [sp, #16]
    8988:	str	xzr, [sp, #32]
    898c:	ldr	x0, [sp, #24]
    8990:	ldr	w0, [x0, #512]
    8994:	mov	w4, w0
    8998:	adrp	x0, 0 <grub_swap_bytes16>
    899c:	add	x0, x0, #0x0
    89a0:	ldr	x3, [x0]
    89a4:	adrp	x0, 0 <grub_swap_bytes16>
    89a8:	add	x0, x0, #0x0
    89ac:	ldr	x2, [x0]
    89b0:	mov	w1, #0xc42                 	// #3138
    89b4:	adrp	x0, 0 <grub_swap_bytes16>
    89b8:	add	x0, x0, #0x0
    89bc:	ldr	x0, [x0]
    89c0:	bl	0 <grub_real_dprintf>
    89c4:	ldr	x0, [sp, #24]
    89c8:	add	x1, x0, #0xc0
    89cc:	ldr	x0, [sp, #24]
    89d0:	ldrb	w0, [x0, #3]
    89d4:	sub	w0, w0, #0x1
    89d8:	sxtw	x0, w0
    89dc:	lsl	x0, x0, #7
    89e0:	add	x0, x1, x0
    89e4:	add	x0, x0, #0x80
    89e8:	str	x0, [sp, #56]
    89ec:	ldr	x0, [sp, #24]
    89f0:	ldr	w0, [x0, #512]
    89f4:	add	x2, sp, #0x20
    89f8:	add	x1, sp, #0x28
    89fc:	ldr	x4, [sp, #16]
    8a00:	mov	x3, x2
    8a04:	mov	x2, x1
    8a08:	mov	w1, w0
    8a0c:	ldr	x0, [sp, #56]
    8a10:	bl	4e3c <zio_read>
    8a14:	str	w0, [sp, #52]
    8a18:	ldr	w0, [sp, #52]
    8a1c:	cmp	w0, #0x0
    8a20:	b.eq	8a2c <make_mdn+0xb4>  // b.none
    8a24:	ldr	w0, [sp, #52]
    8a28:	b	8ab0 <make_mdn+0x138>
    8a2c:	ldr	x0, [sp, #32]
    8a30:	cmp	x0, #0x3ff
    8a34:	b.hi	8a58 <make_mdn+0xe0>  // b.pmore
    8a38:	ldr	x0, [sp, #40]
    8a3c:	bl	0 <grub_free>
    8a40:	adrp	x0, 0 <grub_swap_bytes16>
    8a44:	add	x0, x0, #0x0
    8a48:	ldr	x1, [x0]
    8a4c:	mov	w0, #0x9                   	// #9
    8a50:	bl	0 <grub_error>
    8a54:	b	8ab0 <make_mdn+0x138>
    8a58:	ldr	x0, [sp, #24]
    8a5c:	ldr	w0, [x0, #512]
    8a60:	cmp	w0, #0x0
    8a64:	b.ne	8a80 <make_mdn+0x108>  // b.any
    8a68:	ldr	x0, [sp, #56]
    8a6c:	ldr	x0, [x0, #48]
    8a70:	bl	50 <grub_swap_bytes64>
    8a74:	lsr	x0, x0, #63
    8a78:	and	w0, w0, #0x1
    8a7c:	b	8a8c <make_mdn+0x114>
    8a80:	ldr	x0, [sp, #56]
    8a84:	ldr	x0, [x0, #48]
    8a88:	lsr	x0, x0, #63
    8a8c:	ldr	x1, [sp, #24]
    8a90:	str	w0, [x1, #512]
    8a94:	ldr	x0, [sp, #24]
    8a98:	ldr	x1, [sp, #40]
    8a9c:	mov	x2, #0x200                 	// #512
    8aa0:	bl	0 <grub_memmove>
    8aa4:	ldr	x0, [sp, #40]
    8aa8:	bl	0 <grub_free>
    8aac:	mov	w0, #0x0                   	// #0
    8ab0:	ldp	x29, x30, [sp], #64
    8ab4:	ret
	...

0000000000008ad8 <count_zap_keys>:
    8ad8:	sub	sp, sp, #0x40
    8adc:	str	x0, [sp, #40]
    8ae0:	str	x1, [sp, #32]
    8ae4:	str	x2, [sp, #24]
    8ae8:	str	x3, [sp, #16]
    8aec:	str	x4, [sp, #8]
    8af0:	str	x5, [sp]
    8af4:	ldr	x0, [sp]
    8af8:	str	x0, [sp, #56]
    8afc:	ldr	x0, [sp, #56]
    8b00:	ldr	x0, [x0]
    8b04:	ldr	x1, [x0, #536]
    8b08:	add	x1, x1, #0x1
    8b0c:	str	x1, [x0, #536]
    8b10:	mov	w0, #0x0                   	// #0
    8b14:	add	sp, sp, #0x40
    8b18:	ret

0000000000008b1c <load_zap_key>:
    8b1c:	stp	x29, x30, [sp, #-96]!
    8b20:	mov	x29, sp
    8b24:	str	x19, [sp, #16]
    8b28:	str	x0, [sp, #72]
    8b2c:	str	x1, [sp, #64]
    8b30:	str	x2, [sp, #56]
    8b34:	str	x3, [sp, #48]
    8b38:	str	x4, [sp, #40]
    8b3c:	str	x5, [sp, #32]
    8b40:	ldr	x0, [sp, #32]
    8b44:	str	x0, [sp, #88]
    8b48:	ldr	x0, [sp, #64]
    8b4c:	cmp	x0, #0x1
    8b50:	b.eq	8b8c <load_zap_key+0x70>  // b.none
    8b54:	ldr	x4, [sp, #64]
    8b58:	adrp	x0, 0 <grub_swap_bytes16>
    8b5c:	add	x0, x0, #0x0
    8b60:	ldr	x3, [x0]
    8b64:	adrp	x0, 0 <grub_swap_bytes16>
    8b68:	add	x0, x0, #0x0
    8b6c:	ldr	x2, [x0]
    8b70:	mov	w1, #0xc75                 	// #3189
    8b74:	adrp	x0, 0 <grub_swap_bytes16>
    8b78:	add	x0, x0, #0x0
    8b7c:	ldr	x0, [x0]
    8b80:	bl	0 <grub_real_dprintf>
    8b84:	mov	w0, #0x0                   	// #0
    8b88:	b	8ce8 <load_zap_key+0x1cc>
    8b8c:	ldr	x0, [sp, #40]
    8b90:	cmp	x0, #0x1
    8b94:	b.eq	8bd0 <load_zap_key+0xb4>  // b.none
    8b98:	ldr	x4, [sp, #40]
    8b9c:	adrp	x0, 0 <grub_swap_bytes16>
    8ba0:	add	x0, x0, #0x0
    8ba4:	ldr	x3, [x0]
    8ba8:	adrp	x0, 0 <grub_swap_bytes16>
    8bac:	add	x0, x0, #0x0
    8bb0:	ldr	x2, [x0]
    8bb4:	mov	w1, #0xc7c                 	// #3196
    8bb8:	adrp	x0, 0 <grub_swap_bytes16>
    8bbc:	add	x0, x0, #0x0
    8bc0:	ldr	x0, [x0]
    8bc4:	bl	0 <grub_real_dprintf>
    8bc8:	mov	w0, #0x0                   	// #0
    8bcc:	b	8ce8 <load_zap_key+0x1cc>
    8bd0:	ldr	x0, [sp, #72]
    8bd4:	ldr	x3, [x0]
    8bd8:	ldr	x0, [sp, #88]
    8bdc:	ldr	x0, [x0]
    8be0:	ldr	x2, [x0, #544]
    8be4:	ldr	x0, [sp, #88]
    8be8:	ldr	w0, [x0, #16]
    8bec:	sxtw	x1, w0
    8bf0:	mov	x0, x1
    8bf4:	lsl	x0, x0, #1
    8bf8:	add	x0, x0, x1
    8bfc:	lsl	x0, x0, #3
    8c00:	add	x19, x2, x0
    8c04:	mov	x0, x3
    8c08:	bl	50 <grub_swap_bytes64>
    8c0c:	str	x0, [x19, #8]
    8c10:	ldr	x0, [sp, #88]
    8c14:	ldr	x0, [x0]
    8c18:	ldr	x2, [x0, #544]
    8c1c:	ldr	x0, [sp, #88]
    8c20:	ldr	w0, [x0, #16]
    8c24:	sxtw	x1, w0
    8c28:	mov	x0, x1
    8c2c:	lsl	x0, x0, #1
    8c30:	add	x0, x0, x1
    8c34:	lsl	x0, x0, #3
    8c38:	add	x0, x2, x0
    8c3c:	ldr	x1, [sp, #56]
    8c40:	ldr	x1, [x1]
    8c44:	str	x1, [x0, #16]
    8c48:	adrp	x0, 0 <grub_swap_bytes16>
    8c4c:	add	x0, x0, #0x0
    8c50:	ldr	x0, [x0]
    8c54:	ldr	x4, [x0]
    8c58:	ldr	x0, [sp, #88]
    8c5c:	ldr	x5, [x0, #8]
    8c60:	ldr	x0, [sp, #88]
    8c64:	ldr	x0, [x0]
    8c68:	ldr	x2, [x0, #544]
    8c6c:	ldr	x0, [sp, #88]
    8c70:	ldr	w0, [x0, #16]
    8c74:	sxtw	x1, w0
    8c78:	mov	x0, x1
    8c7c:	lsl	x0, x0, #1
    8c80:	add	x0, x0, x1
    8c84:	lsl	x0, x0, #3
    8c88:	add	x0, x2, x0
    8c8c:	ldr	x3, [x0, #16]
    8c90:	ldr	x0, [sp, #88]
    8c94:	ldr	x0, [x0]
    8c98:	ldr	x2, [x0, #544]
    8c9c:	ldr	x0, [sp, #88]
    8ca0:	ldr	w0, [x0, #16]
    8ca4:	sxtw	x1, w0
    8ca8:	mov	x0, x1
    8cac:	lsl	x0, x0, #1
    8cb0:	add	x0, x0, x1
    8cb4:	lsl	x0, x0, #3
    8cb8:	add	x19, x2, x0
    8cbc:	mov	x2, x5
    8cc0:	ldr	x1, [sp, #48]
    8cc4:	ldr	x0, [sp, #56]
    8cc8:	blr	x4
    8ccc:	str	x0, [x19]
    8cd0:	ldr	x0, [sp, #88]
    8cd4:	ldr	w0, [x0, #16]
    8cd8:	add	w1, w0, #0x1
    8cdc:	ldr	x0, [sp, #88]
    8ce0:	str	w1, [x0, #16]
    8ce4:	mov	w0, #0x0                   	// #0
    8ce8:	ldr	x19, [sp, #16]
    8cec:	ldp	x29, x30, [sp], #96
    8cf0:	ret
    8cf4:	nop
	...

0000000000008d20 <dnode_get_fullpath>:
    8d20:	sub	sp, sp, #0x4c0
    8d24:	stp	x29, x30, [sp]
    8d28:	mov	x29, sp
    8d2c:	str	x0, [sp, #56]
    8d30:	str	x1, [sp, #48]
    8d34:	str	x2, [sp, #40]
    8d38:	str	x3, [sp, #32]
    8d3c:	str	x4, [sp, #24]
    8d40:	mov	w1, #0x40                  	// #64
    8d44:	ldr	x0, [sp, #56]
    8d48:	bl	0 <grub_strchr>
    8d4c:	str	x0, [sp, #1176]
    8d50:	ldr	x0, [sp, #1176]
    8d54:	cmp	x0, #0x0
    8d58:	b.ne	8d80 <dnode_get_fullpath+0x60>  // b.any
    8d5c:	ldr	x0, [sp, #32]
    8d60:	mov	w1, #0x1                   	// #1
    8d64:	str	w1, [x0]
    8d68:	str	xzr, [sp, #1192]
    8d6c:	str	xzr, [sp, #1200]
    8d70:	ldr	x0, [sp, #56]
    8d74:	bl	0 <grub_strdup>
    8d78:	str	x0, [sp, #1208]
    8d7c:	b	8f18 <dnode_get_fullpath+0x1f8>
    8d80:	mov	w1, #0x2f                  	// #47
    8d84:	ldr	x0, [sp, #1176]
    8d88:	bl	0 <grub_strchr>
    8d8c:	str	x0, [sp, #1168]
    8d90:	ldr	x0, [sp, #32]
    8d94:	str	wzr, [x0]
    8d98:	ldr	x1, [sp, #1176]
    8d9c:	ldr	x0, [sp, #56]
    8da0:	sub	x0, x1, x0
    8da4:	add	x0, x0, #0x1
    8da8:	bl	0 <grub_malloc>
    8dac:	str	x0, [sp, #1208]
    8db0:	ldr	x0, [sp, #1208]
    8db4:	cmp	x0, #0x0
    8db8:	b.ne	8dd0 <dnode_get_fullpath+0xb0>  // b.any
    8dbc:	adrp	x0, 0 <grub_swap_bytes16>
    8dc0:	add	x0, x0, #0x0
    8dc4:	ldr	x0, [x0]
    8dc8:	ldr	w0, [x0]
    8dcc:	b	9550 <dnode_get_fullpath+0x830>
    8dd0:	ldr	x1, [sp, #1176]
    8dd4:	ldr	x0, [sp, #56]
    8dd8:	sub	x0, x1, x0
    8ddc:	mov	x2, x0
    8de0:	ldr	x1, [sp, #56]
    8de4:	ldr	x0, [sp, #1208]
    8de8:	bl	100 <grub_memcpy>
    8dec:	ldr	x1, [sp, #1176]
    8df0:	ldr	x0, [sp, #56]
    8df4:	sub	x0, x1, x0
    8df8:	mov	x1, x0
    8dfc:	ldr	x0, [sp, #1208]
    8e00:	add	x0, x0, x1
    8e04:	strb	wzr, [x0]
    8e08:	ldr	x0, [sp, #1176]
    8e0c:	add	x0, x0, #0x1
    8e10:	ldrb	w0, [x0]
    8e14:	cmp	w0, #0x0
    8e18:	b.eq	8eb4 <dnode_get_fullpath+0x194>  // b.none
    8e1c:	ldr	x0, [sp, #1176]
    8e20:	add	x0, x0, #0x1
    8e24:	ldrb	w0, [x0]
    8e28:	cmp	w0, #0x2f
    8e2c:	b.eq	8eb4 <dnode_get_fullpath+0x194>  // b.none
    8e30:	ldr	x1, [sp, #1168]
    8e34:	ldr	x0, [sp, #1176]
    8e38:	sub	x0, x1, x0
    8e3c:	bl	0 <grub_malloc>
    8e40:	str	x0, [sp, #1200]
    8e44:	ldr	x0, [sp, #1200]
    8e48:	cmp	x0, #0x0
    8e4c:	b.ne	8e6c <dnode_get_fullpath+0x14c>  // b.any
    8e50:	ldr	x0, [sp, #1208]
    8e54:	bl	0 <grub_free>
    8e58:	adrp	x0, 0 <grub_swap_bytes16>
    8e5c:	add	x0, x0, #0x0
    8e60:	ldr	x0, [x0]
    8e64:	ldr	w0, [x0]
    8e68:	b	9550 <dnode_get_fullpath+0x830>
    8e6c:	ldr	x0, [sp, #1176]
    8e70:	add	x3, x0, #0x1
    8e74:	ldr	x1, [sp, #1168]
    8e78:	ldr	x0, [sp, #1176]
    8e7c:	sub	x0, x1, x0
    8e80:	sub	x0, x0, #0x1
    8e84:	mov	x2, x0
    8e88:	mov	x1, x3
    8e8c:	ldr	x0, [sp, #1200]
    8e90:	bl	100 <grub_memcpy>
    8e94:	ldr	x1, [sp, #1168]
    8e98:	ldr	x0, [sp, #1176]
    8e9c:	sub	x0, x1, x0
    8ea0:	sub	x0, x0, #0x1
    8ea4:	ldr	x1, [sp, #1200]
    8ea8:	add	x0, x1, x0
    8eac:	strb	wzr, [x0]
    8eb0:	b	8eb8 <dnode_get_fullpath+0x198>
    8eb4:	str	xzr, [sp, #1200]
    8eb8:	ldr	x0, [sp, #1168]
    8ebc:	cmp	x0, #0x0
    8ec0:	b.eq	8ed0 <dnode_get_fullpath+0x1b0>  // b.none
    8ec4:	ldr	x0, [sp, #1168]
    8ec8:	str	x0, [sp, #1192]
    8ecc:	b	8ee0 <dnode_get_fullpath+0x1c0>
    8ed0:	adrp	x0, 0 <grub_swap_bytes16>
    8ed4:	add	x0, x0, #0x0
    8ed8:	ldr	x0, [x0]
    8edc:	str	x0, [sp, #1192]
    8ee0:	ldr	x6, [sp, #1192]
    8ee4:	ldr	x5, [sp, #1200]
    8ee8:	ldr	x4, [sp, #1208]
    8eec:	adrp	x0, 0 <grub_swap_bytes16>
    8ef0:	add	x0, x0, #0x0
    8ef4:	ldr	x3, [x0]
    8ef8:	adrp	x0, 0 <grub_swap_bytes16>
    8efc:	add	x0, x0, #0x0
    8f00:	ldr	x2, [x0]
    8f04:	mov	w1, #0xcba                 	// #3258
    8f08:	adrp	x0, 0 <grub_swap_bytes16>
    8f0c:	add	x0, x0, #0x0
    8f10:	ldr	x0, [x0]
    8f14:	bl	0 <grub_real_dprintf>
    8f18:	adrp	x0, 0 <grub_swap_bytes16>
    8f1c:	add	x0, x0, #0x0
    8f20:	ldr	x3, [x0]
    8f24:	adrp	x0, 0 <grub_swap_bytes16>
    8f28:	add	x0, x0, #0x0
    8f2c:	ldr	x2, [x0]
    8f30:	mov	w1, #0xcbd                 	// #3261
    8f34:	adrp	x0, 0 <grub_swap_bytes16>
    8f38:	add	x0, x0, #0x0
    8f3c:	ldr	x0, [x0]
    8f40:	bl	0 <grub_real_dprintf>
    8f44:	ldr	x0, [sp, #24]
    8f48:	add	x0, x0, #0x40
    8f4c:	ldr	x3, [sp, #24]
    8f50:	ldr	x2, [sp, #40]
    8f54:	ldr	x1, [sp, #1208]
    8f58:	bl	8628 <get_filesystem_dnode>
    8f5c:	str	w0, [sp, #1188]
    8f60:	ldr	w0, [sp, #1188]
    8f64:	cmp	w0, #0x0
    8f68:	b.eq	8f84 <dnode_get_fullpath+0x264>  // b.none
    8f6c:	ldr	x0, [sp, #1208]
    8f70:	bl	0 <grub_free>
    8f74:	ldr	x0, [sp, #1200]
    8f78:	bl	0 <grub_free>
    8f7c:	ldr	w0, [sp, #1188]
    8f80:	b	9550 <dnode_get_fullpath+0x830>
    8f84:	adrp	x0, 0 <grub_swap_bytes16>
    8f88:	add	x0, x0, #0x0
    8f8c:	ldr	x3, [x0]
    8f90:	adrp	x0, 0 <grub_swap_bytes16>
    8f94:	add	x0, x0, #0x0
    8f98:	ldr	x2, [x0]
    8f9c:	mov	w1, #0xcc6                 	// #3270
    8fa0:	adrp	x0, 0 <grub_swap_bytes16>
    8fa4:	add	x0, x0, #0x0
    8fa8:	ldr	x0, [x0]
    8fac:	bl	0 <grub_real_dprintf>
    8fb0:	ldr	x0, [sp, #40]
    8fb4:	ldr	w0, [x0, #512]
    8fb8:	cmp	w0, #0x0
    8fbc:	b.ne	8fec <dnode_get_fullpath+0x2cc>  // b.any
    8fc0:	ldr	x0, [sp, #40]
    8fc4:	add	x1, x0, #0xc0
    8fc8:	ldr	x0, [sp, #40]
    8fcc:	ldrb	w0, [x0, #3]
    8fd0:	sub	w0, w0, #0x1
    8fd4:	sxtw	x0, w0
    8fd8:	lsl	x0, x0, #7
    8fdc:	add	x0, x1, x0
    8fe0:	ldr	x0, [x0, #8]
    8fe4:	bl	50 <grub_swap_bytes64>
    8fe8:	b	9010 <dnode_get_fullpath+0x2f0>
    8fec:	ldr	x0, [sp, #40]
    8ff0:	add	x1, x0, #0xc0
    8ff4:	ldr	x0, [sp, #40]
    8ff8:	ldrb	w0, [x0, #3]
    8ffc:	sub	w0, w0, #0x1
    9000:	sxtw	x0, w0
    9004:	lsl	x0, x0, #7
    9008:	add	x0, x1, x0
    900c:	ldr	x0, [x0, #8]
    9010:	str	x0, [sp, #1136]
    9014:	ldr	x0, [sp, #48]
    9018:	ldr	w0, [x0, #512]
    901c:	mov	w4, w0
    9020:	adrp	x0, 0 <grub_swap_bytes16>
    9024:	add	x0, x0, #0x0
    9028:	ldr	x3, [x0]
    902c:	adrp	x0, 0 <grub_swap_bytes16>
    9030:	add	x0, x0, #0x0
    9034:	ldr	x2, [x0]
    9038:	mov	w1, #0xcca                 	// #3274
    903c:	adrp	x0, 0 <grub_swap_bytes16>
    9040:	add	x0, x0, #0x0
    9044:	ldr	x0, [x0]
    9048:	bl	0 <grub_real_dprintf>
    904c:	ldr	x0, [sp, #24]
    9050:	add	x0, x0, #0x40
    9054:	ldr	x1, [sp, #1136]
    9058:	ldr	x2, [sp, #48]
    905c:	ldr	x4, [sp, #24]
    9060:	mov	x3, x2
    9064:	mov	w2, #0x0                   	// #0
    9068:	bl	7700 <dnode_get>
    906c:	str	w0, [sp, #1188]
    9070:	ldr	w0, [sp, #1188]
    9074:	cmp	w0, #0x0
    9078:	b.eq	9094 <dnode_get_fullpath+0x374>  // b.none
    907c:	ldr	x0, [sp, #1208]
    9080:	bl	0 <grub_free>
    9084:	ldr	x0, [sp, #1200]
    9088:	bl	0 <grub_free>
    908c:	ldr	w0, [sp, #1188]
    9090:	b	9550 <dnode_get_fullpath+0x830>
    9094:	ldr	x0, [sp, #48]
    9098:	ldr	w0, [x0, #512]
    909c:	mov	w4, w0
    90a0:	adrp	x0, 0 <grub_swap_bytes16>
    90a4:	add	x0, x0, #0x0
    90a8:	ldr	x3, [x0]
    90ac:	adrp	x0, 0 <grub_swap_bytes16>
    90b0:	add	x0, x0, #0x0
    90b4:	ldr	x2, [x0]
    90b8:	mov	w1, #0xcd3                 	// #3283
    90bc:	adrp	x0, 0 <grub_swap_bytes16>
    90c0:	add	x0, x0, #0x0
    90c4:	ldr	x0, [x0]
    90c8:	bl	0 <grub_real_dprintf>
    90cc:	ldr	x0, [sp, #40]
    90d0:	ldr	w0, [x0, #512]
    90d4:	cmp	w0, #0x0
    90d8:	b.ne	9108 <dnode_get_fullpath+0x3e8>  // b.any
    90dc:	ldr	x0, [sp, #40]
    90e0:	add	x1, x0, #0xc0
    90e4:	ldr	x0, [sp, #40]
    90e8:	ldrb	w0, [x0, #3]
    90ec:	sub	w0, w0, #0x1
    90f0:	sxtw	x0, w0
    90f4:	lsl	x0, x0, #7
    90f8:	add	x0, x1, x0
    90fc:	ldr	x0, [x0, #152]
    9100:	bl	50 <grub_swap_bytes64>
    9104:	b	912c <dnode_get_fullpath+0x40c>
    9108:	ldr	x0, [sp, #40]
    910c:	add	x1, x0, #0xc0
    9110:	ldr	x0, [sp, #40]
    9114:	ldrb	w0, [x0, #3]
    9118:	sub	w0, w0, #0x1
    911c:	sxtw	x0, w0
    9120:	lsl	x0, x0, #7
    9124:	add	x0, x1, x0
    9128:	ldr	x0, [x0, #152]
    912c:	str	x0, [sp, #1160]
    9130:	adrp	x0, 0 <grub_swap_bytes16>
    9134:	add	x0, x0, #0x0
    9138:	ldr	x0, [x0]
    913c:	ldr	x0, [x0]
    9140:	cmp	x0, #0x0
    9144:	b.eq	9398 <dnode_get_fullpath+0x678>  // b.none
    9148:	ldr	x0, [sp, #1160]
    914c:	cmp	x0, #0x0
    9150:	b.eq	9398 <dnode_get_fullpath+0x678>  // b.none
    9154:	add	x0, sp, #0x400
    9158:	stp	xzr, xzr, [x0, #88]
    915c:	str	xzr, [sp, #1128]
    9160:	ldr	x0, [sp, #48]
    9164:	str	x0, [sp, #1112]
    9168:	ldr	x0, [sp, #40]
    916c:	ldr	w0, [x0, #512]
    9170:	cmp	w0, #0x0
    9174:	b.ne	91a4 <dnode_get_fullpath+0x484>  // b.any
    9178:	ldr	x0, [sp, #40]
    917c:	add	x1, x0, #0xc0
    9180:	ldr	x0, [sp, #40]
    9184:	ldrb	w0, [x0, #3]
    9188:	sub	w0, w0, #0x1
    918c:	sxtw	x0, w0
    9190:	lsl	x0, x0, #7
    9194:	add	x0, x1, x0
    9198:	ldr	x0, [x0, #80]
    919c:	bl	50 <grub_swap_bytes64>
    91a0:	b	91c8 <dnode_get_fullpath+0x4a8>
    91a4:	ldr	x0, [sp, #40]
    91a8:	add	x1, x0, #0xc0
    91ac:	ldr	x0, [sp, #40]
    91b0:	ldrb	w0, [x0, #3]
    91b4:	sub	w0, w0, #0x1
    91b8:	sxtw	x0, w0
    91bc:	lsl	x0, x0, #7
    91c0:	add	x0, x1, x0
    91c4:	ldr	x0, [x0, #80]
    91c8:	str	x0, [sp, #1152]
    91cc:	ldr	x0, [sp, #24]
    91d0:	add	x0, x0, #0x40
    91d4:	add	x1, sp, #0x250
    91d8:	ldr	x4, [sp, #24]
    91dc:	mov	x3, x1
    91e0:	mov	w2, #0xf                   	// #15
    91e4:	ldr	x1, [sp, #1152]
    91e8:	bl	7700 <dnode_get>
    91ec:	str	w0, [sp, #1188]
    91f0:	ldr	w0, [sp, #1188]
    91f4:	cmp	w0, #0x0
    91f8:	b.eq	9214 <dnode_get_fullpath+0x4f4>  // b.none
    91fc:	ldr	x0, [sp, #1208]
    9200:	bl	0 <grub_free>
    9204:	ldr	x0, [sp, #1200]
    9208:	bl	0 <grub_free>
    920c:	ldr	w0, [sp, #1188]
    9210:	b	9550 <dnode_get_fullpath+0x830>
    9214:	add	x0, sp, #0x458
    9218:	add	x0, x0, #0x8
    921c:	add	x5, sp, #0x250
    9220:	mov	w4, #0x0                   	// #0
    9224:	ldr	x3, [sp, #24]
    9228:	mov	x2, x0
    922c:	adrp	x0, 0 <grub_swap_bytes16>
    9230:	add	x0, x0, #0x0
    9234:	ldr	x1, [x0]
    9238:	mov	x0, x5
    923c:	bl	7018 <zap_lookup>
    9240:	str	w0, [sp, #1188]
    9244:	ldr	w0, [sp, #1188]
    9248:	cmp	w0, #0x5
    924c:	b.ne	9268 <dnode_get_fullpath+0x548>  // b.any
    9250:	str	wzr, [sp, #1188]
    9254:	adrp	x0, 0 <grub_swap_bytes16>
    9258:	add	x0, x0, #0x0
    925c:	ldr	x0, [x0]
    9260:	str	wzr, [x0]
    9264:	str	xzr, [sp, #1120]
    9268:	ldr	w0, [sp, #1188]
    926c:	cmp	w0, #0x0
    9270:	b.eq	92a8 <dnode_get_fullpath+0x588>  // b.none
    9274:	adrp	x0, 0 <grub_swap_bytes16>
    9278:	add	x0, x0, #0x0
    927c:	ldr	x3, [x0]
    9280:	adrp	x0, 0 <grub_swap_bytes16>
    9284:	add	x0, x0, #0x0
    9288:	ldr	x2, [x0]
    928c:	mov	w1, #0xcf2                 	// #3314
    9290:	adrp	x0, 0 <grub_swap_bytes16>
    9294:	add	x0, x0, #0x0
    9298:	ldr	x0, [x0]
    929c:	bl	0 <grub_real_dprintf>
    92a0:	ldr	w0, [sp, #1188]
    92a4:	b	9550 <dnode_get_fullpath+0x830>
    92a8:	ldr	x0, [sp, #24]
    92ac:	add	x0, x0, #0x40
    92b0:	add	x1, sp, #0x48
    92b4:	ldr	x4, [sp, #24]
    92b8:	mov	x3, x1
    92bc:	mov	w2, #0x36                  	// #54
    92c0:	ldr	x1, [sp, #1160]
    92c4:	bl	7700 <dnode_get>
    92c8:	str	w0, [sp, #1188]
    92cc:	ldr	w0, [sp, #1188]
    92d0:	cmp	w0, #0x0
    92d4:	b.eq	92f0 <dnode_get_fullpath+0x5d0>  // b.none
    92d8:	ldr	x0, [sp, #1208]
    92dc:	bl	0 <grub_free>
    92e0:	ldr	x0, [sp, #1200]
    92e4:	bl	0 <grub_free>
    92e8:	ldr	w0, [sp, #1188]
    92ec:	b	9550 <dnode_get_fullpath+0x830>
    92f0:	ldr	x0, [sp, #48]
    92f4:	str	xzr, [x0, #536]
    92f8:	add	x0, sp, #0x458
    92fc:	add	x5, sp, #0x48
    9300:	ldr	x4, [sp, #24]
    9304:	mov	x3, x0
    9308:	adrp	x0, 0 <grub_swap_bytes16>
    930c:	add	x0, x0, #0x0
    9310:	ldr	x2, [x0]
    9314:	mov	x1, #0x8                   	// #8
    9318:	mov	x0, x5
    931c:	bl	7568 <zap_iterate>
    9320:	ldr	x0, [sp, #48]
    9324:	ldr	x1, [x0, #536]
    9328:	mov	x0, x1
    932c:	lsl	x0, x0, #1
    9330:	add	x0, x0, x1
    9334:	lsl	x0, x0, #3
    9338:	bl	0 <grub_zalloc>
    933c:	mov	x1, x0
    9340:	ldr	x0, [sp, #48]
    9344:	str	x1, [x0, #544]
    9348:	ldr	x0, [sp, #48]
    934c:	ldr	x0, [x0, #544]
    9350:	cmp	x0, #0x0
    9354:	b.ne	9370 <dnode_get_fullpath+0x650>  // b.any
    9358:	ldr	x0, [sp, #1208]
    935c:	bl	0 <grub_free>
    9360:	ldr	x0, [sp, #1200]
    9364:	bl	0 <grub_free>
    9368:	ldr	w0, [sp, #1188]
    936c:	b	9550 <dnode_get_fullpath+0x830>
    9370:	add	x0, sp, #0x458
    9374:	add	x5, sp, #0x48
    9378:	ldr	x4, [sp, #24]
    937c:	mov	x3, x0
    9380:	adrp	x0, 0 <grub_swap_bytes16>
    9384:	add	x0, x0, #0x0
    9388:	ldr	x2, [x0]
    938c:	mov	x1, #0x8                   	// #8
    9390:	mov	x0, x5
    9394:	bl	7568 <zap_iterate>
    9398:	ldr	x0, [sp, #1200]
    939c:	cmp	x0, #0x0
    93a0:	b.eq	94ac <dnode_get_fullpath+0x78c>  // b.none
    93a4:	ldr	x0, [sp, #48]
    93a8:	ldr	w0, [x0, #512]
    93ac:	cmp	w0, #0x0
    93b0:	b.ne	93e0 <dnode_get_fullpath+0x6c0>  // b.any
    93b4:	ldr	x0, [sp, #48]
    93b8:	add	x1, x0, #0xc0
    93bc:	ldr	x0, [sp, #48]
    93c0:	ldrb	w0, [x0, #3]
    93c4:	sub	w0, w0, #0x1
    93c8:	sxtw	x0, w0
    93cc:	lsl	x0, x0, #7
    93d0:	add	x0, x1, x0
    93d4:	ldr	x0, [x0, #32]
    93d8:	bl	50 <grub_swap_bytes64>
    93dc:	b	9404 <dnode_get_fullpath+0x6e4>
    93e0:	ldr	x0, [sp, #48]
    93e4:	add	x1, x0, #0xc0
    93e8:	ldr	x0, [sp, #48]
    93ec:	ldrb	w0, [x0, #3]
    93f0:	sub	w0, w0, #0x1
    93f4:	sxtw	x0, w0
    93f8:	lsl	x0, x0, #7
    93fc:	add	x0, x1, x0
    9400:	ldr	x0, [x0, #32]
    9404:	str	x0, [sp, #1144]
    9408:	ldr	x0, [sp, #24]
    940c:	add	x0, x0, #0x40
    9410:	ldr	x1, [sp, #48]
    9414:	ldr	x4, [sp, #24]
    9418:	mov	x3, x1
    941c:	mov	w2, #0xe                   	// #14
    9420:	ldr	x1, [sp, #1144]
    9424:	bl	7700 <dnode_get>
    9428:	str	w0, [sp, #1188]
    942c:	ldr	w0, [sp, #1188]
    9430:	cmp	w0, #0x0
    9434:	b.ne	9458 <dnode_get_fullpath+0x738>  // b.any
    9438:	ldr	x0, [sp, #48]
    943c:	add	x1, sp, #0x470
    9440:	mov	w4, #0x0                   	// #0
    9444:	ldr	x3, [sp, #24]
    9448:	mov	x2, x1
    944c:	ldr	x1, [sp, #1200]
    9450:	bl	7018 <zap_lookup>
    9454:	str	w0, [sp, #1188]
    9458:	ldr	w0, [sp, #1188]
    945c:	cmp	w0, #0x0
    9460:	b.ne	9488 <dnode_get_fullpath+0x768>  // b.any
    9464:	ldr	x0, [sp, #24]
    9468:	add	x0, x0, #0x40
    946c:	ldr	x1, [sp, #1136]
    9470:	ldr	x2, [sp, #48]
    9474:	ldr	x4, [sp, #24]
    9478:	mov	x3, x2
    947c:	mov	w2, #0x10                  	// #16
    9480:	bl	7700 <dnode_get>
    9484:	str	w0, [sp, #1188]
    9488:	ldr	w0, [sp, #1188]
    948c:	cmp	w0, #0x0
    9490:	b.eq	94ac <dnode_get_fullpath+0x78c>  // b.none
    9494:	ldr	x0, [sp, #1208]
    9498:	bl	0 <grub_free>
    949c:	ldr	x0, [sp, #1200]
    94a0:	bl	0 <grub_free>
    94a4:	ldr	w0, [sp, #1188]
    94a8:	b	9550 <dnode_get_fullpath+0x830>
    94ac:	ldr	x1, [sp, #1136]
    94b0:	ldr	x0, [sp, #48]
    94b4:	str	x1, [x0, #520]
    94b8:	ldr	x0, [sp, #48]
    94bc:	ldr	x1, [sp, #24]
    94c0:	bl	8978 <make_mdn>
    94c4:	ldr	x0, [sp, #48]
    94c8:	ldr	w0, [x0, #512]
    94cc:	mov	w4, w0
    94d0:	adrp	x0, 0 <grub_swap_bytes16>
    94d4:	add	x0, x0, #0x0
    94d8:	ldr	x3, [x0]
    94dc:	adrp	x0, 0 <grub_swap_bytes16>
    94e0:	add	x0, x0, #0x0
    94e4:	ldr	x2, [x0]
    94e8:	mov	w1, #0xd23                 	// #3363
    94ec:	adrp	x0, 0 <grub_swap_bytes16>
    94f0:	add	x0, x0, #0x0
    94f4:	ldr	x0, [x0]
    94f8:	bl	0 <grub_real_dprintf>
    94fc:	ldr	x0, [sp, #32]
    9500:	ldr	w0, [x0]
    9504:	cmp	w0, #0x0
    9508:	b.eq	9524 <dnode_get_fullpath+0x804>  // b.none
    950c:	ldr	x0, [sp, #1208]
    9510:	bl	0 <grub_free>
    9514:	ldr	x0, [sp, #1200]
    9518:	bl	0 <grub_free>
    951c:	mov	w0, #0x0                   	// #0
    9520:	b	9550 <dnode_get_fullpath+0x830>
    9524:	ldr	x3, [sp, #24]
    9528:	ldr	x2, [sp, #40]
    952c:	ldr	x1, [sp, #1192]
    9530:	ldr	x0, [sp, #48]
    9534:	bl	7a60 <dnode_get_path>
    9538:	str	w0, [sp, #1188]
    953c:	ldr	x0, [sp, #1208]
    9540:	bl	0 <grub_free>
    9544:	ldr	x0, [sp, #1200]
    9548:	bl	0 <grub_free>
    954c:	ldr	w0, [sp, #1188]
    9550:	ldp	x29, x30, [sp]
    9554:	add	sp, sp, #0x4c0
    9558:	ret
    955c:	nop
	...

00000000000095c0 <nvlist_find_value>:
    95c0:	stp	x29, x30, [sp, #-112]!
    95c4:	mov	x29, sp
    95c8:	str	x0, [sp, #56]
    95cc:	str	x1, [sp, #48]
    95d0:	str	w2, [sp, #44]
    95d4:	str	x3, [sp, #32]
    95d8:	str	x4, [sp, #24]
    95dc:	str	x5, [sp, #16]
    95e0:	ldr	x0, [sp, #48]
    95e4:	bl	0 <grub_strlen>
    95e8:	str	x0, [sp, #96]
    95ec:	str	xzr, [sp, #104]
    95f0:	ldr	x0, [sp, #56]
    95f4:	str	x0, [sp, #88]
    95f8:	ldr	x0, [sp, #88]
    95fc:	ldrb	w0, [x0]
    9600:	cmp	w0, #0x1
    9604:	b.ne	9630 <nvlist_find_value+0x70>  // b.any
    9608:	ldr	x0, [sp, #88]
    960c:	add	x0, x0, #0x1
    9610:	ldrb	w0, [x0]
    9614:	cmp	w0, #0x1
    9618:	b.eq	9714 <nvlist_find_value+0x154>  // b.none
    961c:	ldr	x0, [sp, #88]
    9620:	add	x0, x0, #0x1
    9624:	ldrb	w0, [x0]
    9628:	cmp	w0, #0x0
    962c:	b.eq	9714 <nvlist_find_value+0x154>  // b.none
    9630:	adrp	x0, 0 <grub_swap_bytes16>
    9634:	add	x0, x0, #0x0
    9638:	ldr	x3, [x0]
    963c:	adrp	x0, 0 <grub_swap_bytes16>
    9640:	add	x0, x0, #0x0
    9644:	ldr	x2, [x0]
    9648:	mov	w1, #0xd41                 	// #3393
    964c:	adrp	x0, 0 <grub_swap_bytes16>
    9650:	add	x0, x0, #0x0
    9654:	ldr	x0, [x0]
    9658:	bl	0 <grub_real_dprintf>
    965c:	adrp	x0, 0 <grub_swap_bytes16>
    9660:	add	x0, x0, #0x0
    9664:	ldr	x1, [x0]
    9668:	mov	w0, #0x9                   	// #9
    966c:	bl	0 <grub_error>
    9670:	mov	w0, #0x0                   	// #0
    9674:	b	9734 <nvlist_find_value+0x174>
    9678:	add	x1, sp, #0x48
    967c:	add	x0, sp, #0x40
    9680:	mov	x2, x1
    9684:	mov	x1, x0
    9688:	ldr	x0, [sp, #104]
    968c:	bl	1c70 <nvpair_name>
    9690:	ldr	x0, [sp, #104]
    9694:	bl	1cc4 <nvpair_type>
    9698:	str	w0, [sp, #84]
    969c:	ldr	w1, [sp, #84]
    96a0:	ldr	w0, [sp, #44]
    96a4:	cmp	w1, w0
    96a8:	b.ne	9714 <nvlist_find_value+0x154>  // b.any
    96ac:	ldr	x0, [sp, #72]
    96b0:	ldr	x1, [sp, #96]
    96b4:	cmp	x1, x0
    96b8:	b.eq	96e4 <nvlist_find_value+0x124>  // b.none
    96bc:	ldr	x0, [sp, #72]
    96c0:	ldr	x1, [sp, #96]
    96c4:	cmp	x1, x0
    96c8:	b.cs	9714 <nvlist_find_value+0x154>  // b.hs, b.nlast
    96cc:	ldr	x1, [sp, #64]
    96d0:	ldr	x0, [sp, #96]
    96d4:	add	x0, x1, x0
    96d8:	ldrb	w0, [x0]
    96dc:	cmp	w0, #0x0
    96e0:	b.ne	9714 <nvlist_find_value+0x154>  // b.any
    96e4:	ldr	x0, [sp, #64]
    96e8:	ldr	x2, [sp, #96]
    96ec:	ldr	x1, [sp, #48]
    96f0:	bl	0 <grub_memcmp>
    96f4:	cmp	w0, #0x0
    96f8:	b.ne	9714 <nvlist_find_value+0x154>  // b.any
    96fc:	ldr	x3, [sp, #16]
    9700:	ldr	x2, [sp, #24]
    9704:	ldr	x1, [sp, #32]
    9708:	ldr	x0, [sp, #104]
    970c:	bl	1d30 <nvpair_value>
    9710:	b	9734 <nvlist_find_value+0x174>
    9714:	ldr	x1, [sp, #104]
    9718:	ldr	x0, [sp, #88]
    971c:	bl	1a30 <nvlist_next_nvpair>
    9720:	str	x0, [sp, #104]
    9724:	ldr	x0, [sp, #104]
    9728:	cmp	x0, #0x0
    972c:	b.ne	9678 <nvlist_find_value+0xb8>  // b.any
    9730:	mov	w0, #0x0                   	// #0
    9734:	ldp	x29, x30, [sp], #112
    9738:	ret
    973c:	nop
	...

0000000000009760 <grub_zfs_nvlist_lookup_uint64>:
    9760:	stp	x29, x30, [sp, #-80]!
    9764:	mov	x29, sp
    9768:	str	x0, [sp, #40]
    976c:	str	x1, [sp, #32]
    9770:	str	x2, [sp, #24]
    9774:	add	x1, sp, #0x38
    9778:	add	x0, sp, #0x40
    977c:	mov	x5, #0x0                   	// #0
    9780:	mov	x4, x1
    9784:	mov	x3, x0
    9788:	mov	w2, #0x8                   	// #8
    978c:	ldr	x1, [sp, #32]
    9790:	ldr	x0, [sp, #40]
    9794:	bl	95c0 <nvlist_find_value>
    9798:	str	w0, [sp, #76]
    979c:	ldr	w0, [sp, #76]
    97a0:	cmp	w0, #0x0
    97a4:	b.ne	97b0 <grub_zfs_nvlist_lookup_uint64+0x50>  // b.any
    97a8:	mov	w0, #0x0                   	// #0
    97ac:	b	97f4 <grub_zfs_nvlist_lookup_uint64+0x94>
    97b0:	ldr	x0, [sp, #56]
    97b4:	cmp	x0, #0x7
    97b8:	b.hi	97d8 <grub_zfs_nvlist_lookup_uint64+0x78>  // b.pmore
    97bc:	adrp	x0, 0 <grub_swap_bytes16>
    97c0:	add	x0, x0, #0x0
    97c4:	ldr	x1, [x0]
    97c8:	mov	w0, #0x9                   	// #9
    97cc:	bl	0 <grub_error>
    97d0:	mov	w0, #0x0                   	// #0
    97d4:	b	97f4 <grub_zfs_nvlist_lookup_uint64+0x94>
    97d8:	ldr	x0, [sp, #64]
    97dc:	bl	88 <grub_get_unaligned64>
    97e0:	bl	50 <grub_swap_bytes64>
    97e4:	mov	x1, x0
    97e8:	ldr	x0, [sp, #24]
    97ec:	str	x1, [x0]
    97f0:	mov	w0, #0x1                   	// #1
    97f4:	ldp	x29, x30, [sp], #80
    97f8:	ret
    97fc:	nop
	...

0000000000009808 <grub_zfs_nvlist_lookup_string>:
    9808:	stp	x29, x30, [sp, #-80]!
    980c:	mov	x29, sp
    9810:	str	x0, [sp, #24]
    9814:	str	x1, [sp, #16]
    9818:	add	x1, sp, #0x28
    981c:	add	x0, sp, #0x30
    9820:	mov	x5, #0x0                   	// #0
    9824:	mov	x4, x1
    9828:	mov	x3, x0
    982c:	mov	w2, #0x9                   	// #9
    9830:	ldr	x1, [sp, #16]
    9834:	ldr	x0, [sp, #24]
    9838:	bl	95c0 <nvlist_find_value>
    983c:	str	w0, [sp, #68]
    9840:	ldr	w0, [sp, #68]
    9844:	cmp	w0, #0x0
    9848:	b.ne	9854 <grub_zfs_nvlist_lookup_string+0x4c>  // b.any
    984c:	mov	x0, #0x0                   	// #0
    9850:	b	9900 <grub_zfs_nvlist_lookup_string+0xf8>
    9854:	ldr	x0, [sp, #40]
    9858:	cmp	x0, #0x3
    985c:	b.hi	987c <grub_zfs_nvlist_lookup_string+0x74>  // b.pmore
    9860:	adrp	x0, 0 <grub_swap_bytes16>
    9864:	add	x0, x0, #0x0
    9868:	ldr	x1, [x0]
    986c:	mov	w0, #0x9                   	// #9
    9870:	bl	0 <grub_error>
    9874:	mov	x0, #0x0                   	// #0
    9878:	b	9900 <grub_zfs_nvlist_lookup_string+0xf8>
    987c:	ldr	x0, [sp, #48]
    9880:	bl	68 <grub_get_unaligned32>
    9884:	bl	38 <grub_swap_bytes32>
    9888:	mov	w0, w0
    988c:	str	x0, [sp, #72]
    9890:	ldr	x0, [sp, #40]
    9894:	sub	x0, x0, #0x4
    9898:	ldr	x1, [sp, #72]
    989c:	cmp	x1, x0
    98a0:	b.ls	98b0 <grub_zfs_nvlist_lookup_string+0xa8>  // b.plast
    98a4:	ldr	x0, [sp, #40]
    98a8:	sub	x0, x0, #0x4
    98ac:	str	x0, [sp, #72]
    98b0:	ldr	x0, [sp, #72]
    98b4:	add	x0, x0, #0x1
    98b8:	bl	0 <grub_malloc>
    98bc:	str	x0, [sp, #56]
    98c0:	ldr	x0, [sp, #56]
    98c4:	cmp	x0, #0x0
    98c8:	b.ne	98d4 <grub_zfs_nvlist_lookup_string+0xcc>  // b.any
    98cc:	mov	x0, #0x0                   	// #0
    98d0:	b	9900 <grub_zfs_nvlist_lookup_string+0xf8>
    98d4:	ldr	x0, [sp, #48]
    98d8:	add	x0, x0, #0x4
    98dc:	ldr	x2, [sp, #72]
    98e0:	mov	x1, x0
    98e4:	ldr	x0, [sp, #56]
    98e8:	bl	100 <grub_memcpy>
    98ec:	ldr	x1, [sp, #56]
    98f0:	ldr	x0, [sp, #72]
    98f4:	add	x0, x1, x0
    98f8:	strb	wzr, [x0]
    98fc:	ldr	x0, [sp, #56]
    9900:	ldp	x29, x30, [sp], #80
    9904:	ret
	...

0000000000009910 <grub_zfs_nvlist_lookup_nvlist>:
    9910:	stp	x29, x30, [sp, #-64]!
    9914:	mov	x29, sp
    9918:	str	x0, [sp, #24]
    991c:	str	x1, [sp, #16]
    9920:	add	x1, sp, #0x20
    9924:	add	x0, sp, #0x28
    9928:	mov	x5, #0x0                   	// #0
    992c:	mov	x4, x1
    9930:	mov	x3, x0
    9934:	mov	w2, #0x13                  	// #19
    9938:	ldr	x1, [sp, #16]
    993c:	ldr	x0, [sp, #24]
    9940:	bl	95c0 <nvlist_find_value>
    9944:	str	w0, [sp, #60]
    9948:	ldr	w0, [sp, #60]
    994c:	cmp	w0, #0x0
    9950:	b.ne	995c <grub_zfs_nvlist_lookup_nvlist+0x4c>  // b.any
    9954:	mov	x0, #0x0                   	// #0
    9958:	b	99a8 <grub_zfs_nvlist_lookup_nvlist+0x98>
    995c:	ldr	x0, [sp, #32]
    9960:	add	x0, x0, #0xc
    9964:	bl	0 <grub_zalloc>
    9968:	str	x0, [sp, #48]
    996c:	ldr	x0, [sp, #48]
    9970:	cmp	x0, #0x0
    9974:	b.ne	9980 <grub_zfs_nvlist_lookup_nvlist+0x70>  // b.any
    9978:	mov	x0, #0x0                   	// #0
    997c:	b	99a8 <grub_zfs_nvlist_lookup_nvlist+0x98>
    9980:	mov	x2, #0x4                   	// #4
    9984:	ldr	x1, [sp, #24]
    9988:	ldr	x0, [sp, #48]
    998c:	bl	100 <grub_memcpy>
    9990:	ldr	x0, [sp, #48]
    9994:	add	x0, x0, #0x4
    9998:	ldr	x1, [sp, #40]
    999c:	ldr	x2, [sp, #32]
    99a0:	bl	100 <grub_memcpy>
    99a4:	ldr	x0, [sp, #48]
    99a8:	ldp	x29, x30, [sp], #64
    99ac:	ret

00000000000099b0 <grub_zfs_nvlist_lookup_nvlist_array_get_nelm>:
    99b0:	stp	x29, x30, [sp, #-64]!
    99b4:	mov	x29, sp
    99b8:	str	x0, [sp, #24]
    99bc:	str	x1, [sp, #16]
    99c0:	add	x2, sp, #0x28
    99c4:	add	x1, sp, #0x20
    99c8:	add	x0, sp, #0x30
    99cc:	mov	x5, x2
    99d0:	mov	x4, x1
    99d4:	mov	x3, x0
    99d8:	mov	w2, #0x14                  	// #20
    99dc:	ldr	x1, [sp, #16]
    99e0:	ldr	x0, [sp, #24]
    99e4:	bl	95c0 <nvlist_find_value>
    99e8:	str	w0, [sp, #60]
    99ec:	ldr	w0, [sp, #60]
    99f0:	cmp	w0, #0x0
    99f4:	b.ne	9a00 <grub_zfs_nvlist_lookup_nvlist_array_get_nelm+0x50>  // b.any
    99f8:	mov	w0, #0xffffffff            	// #-1
    99fc:	b	9a04 <grub_zfs_nvlist_lookup_nvlist_array_get_nelm+0x54>
    9a00:	ldr	x0, [sp, #40]
    9a04:	ldp	x29, x30, [sp], #64
    9a08:	ret

0000000000009a0c <get_nvlist_size>:
    9a0c:	stp	x29, x30, [sp, #-48]!
    9a10:	mov	x29, sp
    9a14:	str	x0, [sp, #24]
    9a18:	str	x1, [sp, #16]
    9a1c:	ldr	x0, [sp, #24]
    9a20:	add	x0, x0, #0x8
    9a24:	str	x0, [sp, #40]
    9a28:	b	9a3c <get_nvlist_size+0x30>
    9a2c:	ldr	w0, [sp, #36]
    9a30:	ldr	x1, [sp, #40]
    9a34:	add	x0, x1, x0
    9a38:	str	x0, [sp, #40]
    9a3c:	ldr	x1, [sp, #40]
    9a40:	ldr	x0, [sp, #16]
    9a44:	cmp	x1, x0
    9a48:	b.cs	9a68 <get_nvlist_size+0x5c>  // b.hs, b.nlast
    9a4c:	ldr	x0, [sp, #40]
    9a50:	bl	68 <grub_get_unaligned32>
    9a54:	bl	38 <grub_swap_bytes32>
    9a58:	str	w0, [sp, #36]
    9a5c:	ldr	w0, [sp, #36]
    9a60:	cmp	w0, #0x0
    9a64:	b.ne	9a2c <get_nvlist_size+0x20>  // b.any
    9a68:	ldr	x0, [sp, #40]
    9a6c:	add	x0, x0, #0x8
    9a70:	str	x0, [sp, #40]
    9a74:	ldr	x1, [sp, #40]
    9a78:	ldr	x0, [sp, #16]
    9a7c:	cmp	x1, x0
    9a80:	b.hi	9a94 <get_nvlist_size+0x88>  // b.pmore
    9a84:	ldr	x1, [sp, #40]
    9a88:	ldr	x0, [sp, #24]
    9a8c:	sub	x0, x1, x0
    9a90:	b	9a98 <get_nvlist_size+0x8c>
    9a94:	mov	w0, #0xffffffff            	// #-1
    9a98:	ldp	x29, x30, [sp], #48
    9a9c:	ret

0000000000009aa0 <grub_zfs_nvlist_lookup_nvlist_array>:
    9aa0:	stp	x29, x30, [sp, #-112]!
    9aa4:	mov	x29, sp
    9aa8:	str	x0, [sp, #40]
    9aac:	str	x1, [sp, #32]
    9ab0:	str	x2, [sp, #24]
    9ab4:	str	wzr, [sp, #96]
    9ab8:	add	x2, sp, #0x30
    9abc:	add	x1, sp, #0x38
    9ac0:	add	x0, sp, #0x40
    9ac4:	mov	x5, x2
    9ac8:	mov	x4, x1
    9acc:	mov	x3, x0
    9ad0:	mov	w2, #0x14                  	// #20
    9ad4:	ldr	x1, [sp, #32]
    9ad8:	ldr	x0, [sp, #40]
    9adc:	bl	95c0 <nvlist_find_value>
    9ae0:	str	w0, [sp, #92]
    9ae4:	ldr	w0, [sp, #92]
    9ae8:	cmp	w0, #0x0
    9aec:	b.ne	9af8 <grub_zfs_nvlist_lookup_nvlist_array+0x58>  // b.any
    9af0:	mov	x0, #0x0                   	// #0
    9af4:	b	9c38 <grub_zfs_nvlist_lookup_nvlist_array+0x198>
    9af8:	ldr	x0, [sp, #48]
    9afc:	ldr	x1, [sp, #24]
    9b00:	cmp	x1, x0
    9b04:	b.cc	9b24 <grub_zfs_nvlist_lookup_nvlist_array+0x84>  // b.lo, b.ul, b.last
    9b08:	adrp	x0, 0 <grub_swap_bytes16>
    9b0c:	add	x0, x0, #0x0
    9b10:	ldr	x1, [x0]
    9b14:	mov	w0, #0xb                   	// #11
    9b18:	bl	0 <grub_error>
    9b1c:	mov	x0, #0x0                   	// #0
    9b20:	b	9c38 <grub_zfs_nvlist_lookup_nvlist_array+0x198>
    9b24:	ldr	x0, [sp, #64]
    9b28:	str	x0, [sp, #104]
    9b2c:	str	wzr, [sp, #100]
    9b30:	b	9b94 <grub_zfs_nvlist_lookup_nvlist_array+0xf4>
    9b34:	ldr	x1, [sp, #64]
    9b38:	ldr	x0, [sp, #56]
    9b3c:	add	x0, x1, x0
    9b40:	mov	x1, x0
    9b44:	ldr	x0, [sp, #104]
    9b48:	bl	9a0c <get_nvlist_size>
    9b4c:	str	w0, [sp, #76]
    9b50:	ldr	w0, [sp, #76]
    9b54:	cmp	w0, #0x0
    9b58:	b.ge	9b78 <grub_zfs_nvlist_lookup_nvlist_array+0xd8>  // b.tcont
    9b5c:	adrp	x0, 0 <grub_swap_bytes16>
    9b60:	add	x0, x0, #0x0
    9b64:	ldr	x1, [x0]
    9b68:	mov	w0, #0x9                   	// #9
    9b6c:	bl	0 <grub_error>
    9b70:	mov	x0, #0x0                   	// #0
    9b74:	b	9c38 <grub_zfs_nvlist_lookup_nvlist_array+0x198>
    9b78:	ldrsw	x0, [sp, #76]
    9b7c:	ldr	x1, [sp, #104]
    9b80:	add	x0, x1, x0
    9b84:	str	x0, [sp, #104]
    9b88:	ldr	w0, [sp, #100]
    9b8c:	add	w0, w0, #0x1
    9b90:	str	w0, [sp, #100]
    9b94:	ldr	w0, [sp, #100]
    9b98:	ldr	x1, [sp, #24]
    9b9c:	cmp	x1, x0
    9ba0:	b.hi	9b34 <grub_zfs_nvlist_lookup_nvlist_array+0x94>  // b.pmore
    9ba4:	ldr	x1, [sp, #64]
    9ba8:	ldr	x0, [sp, #56]
    9bac:	add	x0, x1, x0
    9bb0:	mov	x1, x0
    9bb4:	ldr	x0, [sp, #104]
    9bb8:	bl	9a0c <get_nvlist_size>
    9bbc:	str	w0, [sp, #96]
    9bc0:	ldr	w0, [sp, #96]
    9bc4:	cmp	w0, #0x0
    9bc8:	b.ge	9be8 <grub_zfs_nvlist_lookup_nvlist_array+0x148>  // b.tcont
    9bcc:	adrp	x0, 0 <grub_swap_bytes16>
    9bd0:	add	x0, x0, #0x0
    9bd4:	ldr	x1, [x0]
    9bd8:	mov	w0, #0x9                   	// #9
    9bdc:	bl	0 <grub_error>
    9be0:	mov	x0, #0x0                   	// #0
    9be4:	b	9c38 <grub_zfs_nvlist_lookup_nvlist_array+0x198>
    9be8:	ldrsw	x0, [sp, #96]
    9bec:	add	x0, x0, #0x4
    9bf0:	bl	0 <grub_zalloc>
    9bf4:	str	x0, [sp, #80]
    9bf8:	ldr	x0, [sp, #80]
    9bfc:	cmp	x0, #0x0
    9c00:	b.ne	9c0c <grub_zfs_nvlist_lookup_nvlist_array+0x16c>  // b.any
    9c04:	mov	x0, #0x0                   	// #0
    9c08:	b	9c38 <grub_zfs_nvlist_lookup_nvlist_array+0x198>
    9c0c:	mov	x2, #0x4                   	// #4
    9c10:	ldr	x1, [sp, #40]
    9c14:	ldr	x0, [sp, #80]
    9c18:	bl	100 <grub_memcpy>
    9c1c:	ldr	x0, [sp, #80]
    9c20:	add	x0, x0, #0x4
    9c24:	ldrsw	x1, [sp, #96]
    9c28:	mov	x2, x1
    9c2c:	ldr	x1, [sp, #104]
    9c30:	bl	100 <grub_memcpy>
    9c34:	ldr	x0, [sp, #80]
    9c38:	ldp	x29, x30, [sp], #112
    9c3c:	ret
	...

0000000000009c50 <unmount_device>:
    9c50:	stp	x29, x30, [sp, #-48]!
    9c54:	mov	x29, sp
    9c58:	str	x0, [sp, #24]
    9c5c:	ldr	x0, [sp, #24]
    9c60:	ldr	w0, [x0]
    9c64:	cmp	w0, #0x0
    9c68:	b.eq	9c7c <unmount_device+0x2c>  // b.none
    9c6c:	sub	w0, w0, #0x1
    9c70:	cmp	w0, #0x1
    9c74:	b.hi	9d0c <unmount_device+0xbc>  // b.pmore
    9c78:	b	9cac <unmount_device+0x5c>
    9c7c:	ldr	x0, [sp, #24]
    9c80:	ldr	w0, [x0, #240]
    9c84:	cmp	w0, #0x0
    9c88:	b.ne	9d08 <unmount_device+0xb8>  // b.any
    9c8c:	ldr	x0, [sp, #24]
    9c90:	ldr	x0, [x0, #56]
    9c94:	cmp	x0, #0x0
    9c98:	b.eq	9d08 <unmount_device+0xb8>  // b.none
    9c9c:	ldr	x0, [sp, #24]
    9ca0:	ldr	x0, [x0, #56]
    9ca4:	bl	0 <grub_device_close>
    9ca8:	b	9d08 <unmount_device+0xb8>
    9cac:	str	wzr, [sp, #44]
    9cb0:	b	9ce4 <unmount_device+0x94>
    9cb4:	ldr	x0, [sp, #24]
    9cb8:	ldr	x2, [x0, #40]
    9cbc:	ldr	w1, [sp, #44]
    9cc0:	mov	x0, x1
    9cc4:	lsl	x0, x0, #5
    9cc8:	sub	x0, x0, x1
    9ccc:	lsl	x0, x0, #3
    9cd0:	add	x0, x2, x0
    9cd4:	bl	9c50 <unmount_device>
    9cd8:	ldr	w0, [sp, #44]
    9cdc:	add	w0, w0, #0x1
    9ce0:	str	w0, [sp, #44]
    9ce4:	ldr	x0, [sp, #24]
    9ce8:	ldr	w0, [x0, #32]
    9cec:	ldr	w1, [sp, #44]
    9cf0:	cmp	w1, w0
    9cf4:	b.cc	9cb4 <unmount_device+0x64>  // b.lo, b.ul, b.last
    9cf8:	ldr	x0, [sp, #24]
    9cfc:	ldr	x0, [x0, #40]
    9d00:	bl	0 <grub_free>
    9d04:	b	9d0c <unmount_device+0xbc>
    9d08:	nop
    9d0c:	ldp	x29, x30, [sp], #48
    9d10:	ret

0000000000009d14 <zfs_unmount>:
    9d14:	stp	x29, x30, [sp, #-48]!
    9d18:	mov	x29, sp
    9d1c:	str	x0, [sp, #24]
    9d20:	str	wzr, [sp, #44]
    9d24:	b	9d58 <zfs_unmount+0x44>
    9d28:	ldr	x0, [sp, #24]
    9d2c:	ldr	x2, [x0, #1656]
    9d30:	ldr	w1, [sp, #44]
    9d34:	mov	x0, x1
    9d38:	lsl	x0, x0, #5
    9d3c:	sub	x0, x0, x1
    9d40:	lsl	x0, x0, #3
    9d44:	add	x0, x2, x0
    9d48:	bl	9c50 <unmount_device>
    9d4c:	ldr	w0, [sp, #44]
    9d50:	add	w0, w0, #0x1
    9d54:	str	w0, [sp, #44]
    9d58:	ldr	x0, [sp, #24]
    9d5c:	ldr	w0, [x0, #1664]
    9d60:	ldr	w1, [sp, #44]
    9d64:	cmp	w1, w0
    9d68:	b.cc	9d28 <zfs_unmount+0x14>  // b.lo, b.ul, b.last
    9d6c:	ldr	x0, [sp, #24]
    9d70:	ldr	x0, [x0, #1656]
    9d74:	bl	0 <grub_free>
    9d78:	ldr	x0, [sp, #24]
    9d7c:	ldr	x0, [x0, #24]
    9d80:	bl	0 <grub_free>
    9d84:	ldr	x0, [sp, #24]
    9d88:	ldr	x0, [x0, #32]
    9d8c:	bl	0 <grub_free>
    9d90:	ldr	x0, [sp, #24]
    9d94:	ldr	x0, [x0]
    9d98:	bl	0 <grub_free>
    9d9c:	str	wzr, [sp, #44]
    9da0:	b	9dd8 <zfs_unmount+0xc4>
    9da4:	ldr	x0, [sp, #24]
    9da8:	ldr	x2, [x0, #1648]
    9dac:	ldr	w1, [sp, #44]
    9db0:	mov	x0, x1
    9db4:	lsl	x0, x0, #1
    9db8:	add	x0, x0, x1
    9dbc:	lsl	x0, x0, #3
    9dc0:	add	x0, x2, x0
    9dc4:	ldr	x0, [x0]
    9dc8:	bl	244 <grub_crypto_cipher_close>
    9dcc:	ldr	w0, [sp, #44]
    9dd0:	add	w0, w0, #0x1
    9dd4:	str	w0, [sp, #44]
    9dd8:	ldr	w1, [sp, #44]
    9ddc:	ldr	x0, [sp, #24]
    9de0:	ldr	x0, [x0, #1640]
    9de4:	cmp	x1, x0
    9de8:	b.cc	9da4 <zfs_unmount+0x90>  // b.lo, b.ul, b.last
    9dec:	ldr	x0, [sp, #24]
    9df0:	ldr	x0, [x0, #1648]
    9df4:	bl	0 <grub_free>
    9df8:	ldr	x0, [sp, #24]
    9dfc:	bl	0 <grub_free>
    9e00:	nop
    9e04:	ldp	x29, x30, [sp], #48
    9e08:	ret

0000000000009e0c <zfs_mount>:
    9e0c:	stp	x29, x30, [sp, #-80]!
    9e10:	mov	x29, sp
    9e14:	str	x0, [sp, #24]
    9e18:	str	xzr, [sp, #72]
    9e1c:	str	xzr, [sp, #48]
    9e20:	mov	w0, #0xfffffffe            	// #-2
    9e24:	str	w0, [sp, #68]
    9e28:	ldr	x0, [sp, #24]
    9e2c:	ldr	x0, [x0]
    9e30:	cmp	x0, #0x0
    9e34:	b.ne	9e54 <zfs_mount+0x48>  // b.any
    9e38:	adrp	x0, 0 <grub_swap_bytes16>
    9e3c:	add	x0, x0, #0x0
    9e40:	ldr	x1, [x0]
    9e44:	mov	w0, #0xd                   	// #13
    9e48:	bl	0 <grub_error>
    9e4c:	mov	x0, #0x0                   	// #0
    9e50:	b	a04c <zfs_mount+0x240>
    9e54:	mov	x0, #0x740                 	// #1856
    9e58:	bl	0 <grub_zalloc>
    9e5c:	str	x0, [sp, #72]
    9e60:	ldr	x0, [sp, #72]
    9e64:	cmp	x0, #0x0
    9e68:	b.ne	9e74 <zfs_mount+0x68>  // b.any
    9e6c:	mov	x0, #0x0                   	// #0
    9e70:	b	a04c <zfs_mount+0x240>
    9e74:	ldr	x0, [sp, #72]
    9e78:	mov	w1, #0x10                  	// #16
    9e7c:	str	w1, [x0, #1668]
    9e80:	ldr	x0, [sp, #72]
    9e84:	ldr	w0, [x0, #1668]
    9e88:	mov	w1, w0
    9e8c:	mov	x0, x1
    9e90:	lsl	x0, x0, #5
    9e94:	sub	x0, x0, x1
    9e98:	lsl	x0, x0, #3
    9e9c:	bl	0 <grub_malloc>
    9ea0:	mov	x1, x0
    9ea4:	ldr	x0, [sp, #72]
    9ea8:	str	x1, [x0, #1656]
    9eac:	ldr	x0, [sp, #72]
    9eb0:	str	wzr, [x0, #1664]
    9eb4:	add	x0, sp, #0x24
    9eb8:	mov	x3, x0
    9ebc:	mov	w2, #0x1                   	// #1
    9ec0:	ldr	x1, [sp, #72]
    9ec4:	ldr	x0, [sp, #24]
    9ec8:	bl	2760 <scan_disk>
    9ecc:	str	w0, [sp, #64]
    9ed0:	ldr	w0, [sp, #64]
    9ed4:	cmp	w0, #0x0
    9ed8:	b.eq	9eec <zfs_mount+0xe0>  // b.none
    9edc:	ldr	x0, [sp, #72]
    9ee0:	bl	9d14 <zfs_unmount>
    9ee4:	mov	x0, #0x0                   	// #0
    9ee8:	b	a04c <zfs_mount+0x240>
    9eec:	ldr	x0, [sp, #72]
    9ef0:	add	x0, x0, #0x690
    9ef4:	str	x0, [sp, #56]
    9ef8:	ldr	x0, [sp, #56]
    9efc:	ldr	x1, [x0]
    9f00:	mov	x0, #0xb10c                	// #45324
    9f04:	movk	x0, #0xba, lsl #16
    9f08:	cmp	x1, x0
    9f0c:	b.ne	9f18 <zfs_mount+0x10c>  // b.any
    9f10:	mov	w0, #0xffffffff            	// #-1
    9f14:	b	9f1c <zfs_mount+0x110>
    9f18:	mov	w0, #0x0                   	// #0
    9f1c:	str	w0, [sp, #68]
    9f20:	ldr	x0, [sp, #56]
    9f24:	add	x0, x0, #0x28
    9f28:	add	x2, sp, #0x28
    9f2c:	add	x1, sp, #0x30
    9f30:	ldr	x4, [sp, #72]
    9f34:	mov	x3, x2
    9f38:	mov	x2, x1
    9f3c:	ldr	w1, [sp, #68]
    9f40:	bl	4e3c <zio_read>
    9f44:	str	w0, [sp, #64]
    9f48:	ldr	w0, [sp, #64]
    9f4c:	cmp	w0, #0x0
    9f50:	b.eq	9f64 <zfs_mount+0x158>  // b.none
    9f54:	ldr	x0, [sp, #72]
    9f58:	bl	9d14 <zfs_unmount>
    9f5c:	mov	x0, #0x0                   	// #0
    9f60:	b	a04c <zfs_mount+0x240>
    9f64:	ldr	x0, [sp, #40]
    9f68:	cmp	x0, #0x3ff
    9f6c:	b.hi	9f9c <zfs_mount+0x190>  // b.pmore
    9f70:	adrp	x0, 0 <grub_swap_bytes16>
    9f74:	add	x0, x0, #0x0
    9f78:	ldr	x1, [x0]
    9f7c:	mov	w0, #0x9                   	// #9
    9f80:	bl	0 <grub_error>
    9f84:	ldr	x0, [sp, #48]
    9f88:	bl	0 <grub_free>
    9f8c:	ldr	x0, [sp, #72]
    9f90:	bl	9d14 <zfs_unmount>
    9f94:	mov	x0, #0x0                   	// #0
    9f98:	b	a04c <zfs_mount+0x240>
    9f9c:	ldr	x0, [sp, #56]
    9fa0:	ldr	x1, [x0, #8]
    9fa4:	mov	x0, #0x1387                	// #4999
    9fa8:	cmp	x1, x0
    9fac:	b.ls	9ff4 <zfs_mount+0x1e8>  // b.plast
    9fb0:	ldr	x0, [sp, #48]
    9fb4:	ldr	x2, [sp, #72]
    9fb8:	ldr	w1, [sp, #68]
    9fbc:	bl	b808 <check_mos_features>
    9fc0:	cmp	w0, #0x0
    9fc4:	b.eq	9ff4 <zfs_mount+0x1e8>  // b.none
    9fc8:	adrp	x0, 0 <grub_swap_bytes16>
    9fcc:	add	x0, x0, #0x0
    9fd0:	ldr	x1, [x0]
    9fd4:	mov	w0, #0x9                   	// #9
    9fd8:	bl	0 <grub_error>
    9fdc:	ldr	x0, [sp, #48]
    9fe0:	bl	0 <grub_free>
    9fe4:	ldr	x0, [sp, #72]
    9fe8:	bl	9d14 <zfs_unmount>
    9fec:	mov	x0, #0x0                   	// #0
    9ff0:	b	a04c <zfs_mount+0x240>
    9ff4:	ldr	x0, [sp, #72]
    9ff8:	add	x0, x0, #0x40
    9ffc:	ldr	x1, [sp, #48]
    a000:	mov	x2, #0x200                 	// #512
    a004:	bl	0 <grub_memmove>
    a008:	ldr	w0, [sp, #68]
    a00c:	cmp	w0, #0x0
    a010:	b.ne	a02c <zfs_mount+0x220>  // b.any
    a014:	ldr	x0, [sp, #56]
    a018:	ldr	x0, [x0, #88]
    a01c:	bl	50 <grub_swap_bytes64>
    a020:	lsr	x0, x0, #63
    a024:	and	w0, w0, #0x1
    a028:	b	a038 <zfs_mount+0x22c>
    a02c:	ldr	x0, [sp, #56]
    a030:	ldr	x0, [x0, #88]
    a034:	lsr	x0, x0, #63
    a038:	ldr	x1, [sp, #72]
    a03c:	str	w0, [x1, #576]
    a040:	ldr	x0, [sp, #48]
    a044:	bl	0 <grub_free>
    a048:	ldr	x0, [sp, #72]
    a04c:	ldp	x29, x30, [sp], #80
    a050:	ret
    a054:	nop
	...

000000000000a070 <grub_zfs_fetch_nvlist>:
    a070:	stp	x29, x30, [sp, #-48]!
    a074:	mov	x29, sp
    a078:	str	x0, [sp, #24]
    a07c:	str	x1, [sp, #16]
    a080:	ldr	x0, [sp, #24]
    a084:	bl	9e0c <zfs_mount>
    a088:	str	x0, [sp, #40]
    a08c:	ldr	x0, [sp, #40]
    a090:	cmp	x0, #0x0
    a094:	b.ne	a0ac <grub_zfs_fetch_nvlist+0x3c>  // b.any
    a098:	adrp	x0, 0 <grub_swap_bytes16>
    a09c:	add	x0, x0, #0x0
    a0a0:	ldr	x0, [x0]
    a0a4:	ldr	w0, [x0]
    a0a8:	b	a0cc <grub_zfs_fetch_nvlist+0x5c>
    a0ac:	ldr	x0, [sp, #40]
    a0b0:	ldr	x0, [x0, #1672]
    a0b4:	ldr	x1, [sp, #16]
    a0b8:	bl	1188 <zfs_fetch_nvlist>
    a0bc:	str	w0, [sp, #36]
    a0c0:	ldr	x0, [sp, #40]
    a0c4:	bl	9d14 <zfs_unmount>
    a0c8:	ldr	w0, [sp, #36]
    a0cc:	ldp	x29, x30, [sp], #48
    a0d0:	ret
    a0d4:	nop
	...

000000000000a0e0 <zfs_label>:
    a0e0:	stp	x29, x30, [sp, #-64]!
    a0e4:	mov	x29, sp
    a0e8:	str	x0, [sp, #24]
    a0ec:	str	x1, [sp, #16]
    a0f0:	ldr	x0, [sp, #24]
    a0f4:	bl	9e0c <zfs_mount>
    a0f8:	str	x0, [sp, #56]
    a0fc:	ldr	x0, [sp, #56]
    a100:	cmp	x0, #0x0
    a104:	b.ne	a11c <zfs_label+0x3c>  // b.any
    a108:	adrp	x0, 0 <grub_swap_bytes16>
    a10c:	add	x0, x0, #0x0
    a110:	ldr	x0, [x0]
    a114:	ldr	w0, [x0]
    a118:	b	a190 <zfs_label+0xb0>
    a11c:	ldr	x0, [sp, #56]
    a120:	ldr	x0, [x0, #1672]
    a124:	add	x1, sp, #0x28
    a128:	bl	1188 <zfs_fetch_nvlist>
    a12c:	str	w0, [sp, #52]
    a130:	ldr	w0, [sp, #52]
    a134:	cmp	w0, #0x0
    a138:	b.eq	a14c <zfs_label+0x6c>  // b.none
    a13c:	ldr	x0, [sp, #56]
    a140:	bl	9d14 <zfs_unmount>
    a144:	ldr	w0, [sp, #52]
    a148:	b	a190 <zfs_label+0xb0>
    a14c:	ldr	x2, [sp, #40]
    a150:	adrp	x0, 0 <grub_swap_bytes16>
    a154:	add	x0, x0, #0x0
    a158:	ldr	x1, [x0]
    a15c:	mov	x0, x2
    a160:	bl	9808 <grub_zfs_nvlist_lookup_string>
    a164:	mov	x1, x0
    a168:	ldr	x0, [sp, #16]
    a16c:	str	x1, [x0]
    a170:	ldr	x0, [sp, #40]
    a174:	bl	0 <grub_free>
    a178:	ldr	x0, [sp, #56]
    a17c:	bl	9d14 <zfs_unmount>
    a180:	adrp	x0, 0 <grub_swap_bytes16>
    a184:	add	x0, x0, #0x0
    a188:	ldr	x0, [x0]
    a18c:	ldr	w0, [x0]
    a190:	ldp	x29, x30, [sp], #64
    a194:	ret
	...

000000000000a1a8 <zfs_uuid>:
    a1a8:	stp	x29, x30, [sp, #-48]!
    a1ac:	mov	x29, sp
    a1b0:	str	x0, [sp, #24]
    a1b4:	str	x1, [sp, #16]
    a1b8:	ldr	x0, [sp, #16]
    a1bc:	str	xzr, [x0]
    a1c0:	ldr	x0, [sp, #24]
    a1c4:	bl	9e0c <zfs_mount>
    a1c8:	str	x0, [sp, #40]
    a1cc:	ldr	x0, [sp, #40]
    a1d0:	cmp	x0, #0x0
    a1d4:	b.ne	a1ec <zfs_uuid+0x44>  // b.any
    a1d8:	adrp	x0, 0 <grub_swap_bytes16>
    a1dc:	add	x0, x0, #0x0
    a1e0:	ldr	x0, [x0]
    a1e4:	ldr	w0, [x0]
    a1e8:	b	a244 <zfs_uuid+0x9c>
    a1ec:	ldr	x0, [sp, #40]
    a1f0:	ldr	x0, [x0, #1848]
    a1f4:	mov	x1, x0
    a1f8:	adrp	x0, 0 <grub_swap_bytes16>
    a1fc:	add	x0, x0, #0x0
    a200:	ldr	x0, [x0]
    a204:	bl	0 <grub_xasprintf>
    a208:	mov	x1, x0
    a20c:	ldr	x0, [sp, #16]
    a210:	str	x1, [x0]
    a214:	ldr	x0, [sp, #40]
    a218:	bl	9d14 <zfs_unmount>
    a21c:	ldr	x0, [sp, #16]
    a220:	ldr	x0, [x0]
    a224:	cmp	x0, #0x0
    a228:	b.ne	a240 <zfs_uuid+0x98>  // b.any
    a22c:	adrp	x0, 0 <grub_swap_bytes16>
    a230:	add	x0, x0, #0x0
    a234:	ldr	x0, [x0]
    a238:	ldr	w0, [x0]
    a23c:	b	a244 <zfs_uuid+0x9c>
    a240:	mov	w0, #0x0                   	// #0
    a244:	ldp	x29, x30, [sp], #48
    a248:	ret
    a24c:	nop
	...

000000000000a260 <zfs_mtime>:
    a260:	stp	x29, x30, [sp, #-64]!
    a264:	mov	x29, sp
    a268:	str	x0, [sp, #24]
    a26c:	str	x1, [sp, #16]
    a270:	mov	w0, #0xfffffffe            	// #-2
    a274:	str	w0, [sp, #60]
    a278:	ldr	x0, [sp, #16]
    a27c:	str	wzr, [x0]
    a280:	ldr	x0, [sp, #24]
    a284:	bl	9e0c <zfs_mount>
    a288:	str	x0, [sp, #48]
    a28c:	ldr	x0, [sp, #48]
    a290:	cmp	x0, #0x0
    a294:	b.ne	a2ac <zfs_mtime+0x4c>  // b.any
    a298:	adrp	x0, 0 <grub_swap_bytes16>
    a29c:	add	x0, x0, #0x0
    a2a0:	ldr	x0, [x0]
    a2a4:	ldr	w0, [x0]
    a2a8:	b	a320 <zfs_mtime+0xc0>
    a2ac:	ldr	x0, [sp, #48]
    a2b0:	add	x0, x0, #0x690
    a2b4:	str	x0, [sp, #40]
    a2b8:	ldr	x0, [sp, #40]
    a2bc:	ldr	x1, [x0]
    a2c0:	mov	x0, #0xb10c                	// #45324
    a2c4:	movk	x0, #0xba, lsl #16
    a2c8:	cmp	x1, x0
    a2cc:	b.ne	a2d8 <zfs_mtime+0x78>  // b.any
    a2d0:	mov	w0, #0xffffffff            	// #-1
    a2d4:	b	a2dc <zfs_mtime+0x7c>
    a2d8:	mov	w0, #0x0                   	// #0
    a2dc:	str	w0, [sp, #60]
    a2e0:	ldr	w0, [sp, #60]
    a2e4:	cmp	w0, #0x0
    a2e8:	b.ne	a300 <zfs_mtime+0xa0>  // b.any
    a2ec:	ldr	x0, [sp, #40]
    a2f0:	ldr	x0, [x0, #32]
    a2f4:	bl	50 <grub_swap_bytes64>
    a2f8:	mov	w1, w0
    a2fc:	b	a30c <zfs_mtime+0xac>
    a300:	ldr	x0, [sp, #40]
    a304:	ldr	x0, [x0, #32]
    a308:	mov	w1, w0
    a30c:	ldr	x0, [sp, #16]
    a310:	str	w1, [x0]
    a314:	ldr	x0, [sp, #48]
    a318:	bl	9d14 <zfs_unmount>
    a31c:	mov	w0, #0x0                   	// #0
    a320:	ldp	x29, x30, [sp], #64
    a324:	ret
	...

000000000000a330 <grub_zfs_open>:
    a330:	stp	x29, x30, [sp, #-80]!
    a334:	mov	x29, sp
    a338:	str	x0, [sp, #24]
    a33c:	str	x1, [sp, #16]
    a340:	ldr	x0, [sp, #24]
    a344:	ldr	x0, [x0, #8]
    a348:	bl	9e0c <zfs_mount>
    a34c:	str	x0, [sp, #72]
    a350:	ldr	x0, [sp, #72]
    a354:	cmp	x0, #0x0
    a358:	b.ne	a370 <grub_zfs_open+0x40>  // b.any
    a35c:	adrp	x0, 0 <grub_swap_bytes16>
    a360:	add	x0, x0, #0x0
    a364:	ldr	x0, [x0]
    a368:	ldr	w0, [x0]
    a36c:	b	a5f8 <grub_zfs_open+0x2c8>
    a370:	ldr	x0, [sp, #72]
    a374:	add	x1, x0, #0x450
    a378:	ldr	x0, [sp, #72]
    a37c:	add	x0, x0, #0x248
    a380:	add	x2, sp, #0x30
    a384:	ldr	x4, [sp, #72]
    a388:	mov	x3, x2
    a38c:	mov	x2, x0
    a390:	ldr	x0, [sp, #16]
    a394:	bl	8d20 <dnode_get_fullpath>
    a398:	str	w0, [sp, #68]
    a39c:	ldr	w0, [sp, #68]
    a3a0:	cmp	w0, #0x0
    a3a4:	b.eq	a3b8 <grub_zfs_open+0x88>  // b.none
    a3a8:	ldr	x0, [sp, #72]
    a3ac:	bl	9d14 <zfs_unmount>
    a3b0:	ldr	w0, [sp, #68]
    a3b4:	b	a5f8 <grub_zfs_open+0x2c8>
    a3b8:	ldr	w0, [sp, #48]
    a3bc:	cmp	w0, #0x0
    a3c0:	b.eq	a3e8 <grub_zfs_open+0xb8>  // b.none
    a3c4:	ldr	x0, [sp, #72]
    a3c8:	bl	9d14 <zfs_unmount>
    a3cc:	mov	w2, #0x40                  	// #64
    a3d0:	adrp	x0, 0 <grub_swap_bytes16>
    a3d4:	add	x0, x0, #0x0
    a3d8:	ldr	x1, [x0]
    a3dc:	mov	w0, #0x4                   	// #4
    a3e0:	bl	0 <grub_error>
    a3e4:	b	a5f8 <grub_zfs_open+0x2c8>
    a3e8:	ldr	x0, [sp, #72]
    a3ec:	ldrb	w0, [x0, #584]
    a3f0:	cmp	w0, #0x13
    a3f4:	b.eq	a418 <grub_zfs_open+0xe8>  // b.none
    a3f8:	ldr	x0, [sp, #72]
    a3fc:	bl	9d14 <zfs_unmount>
    a400:	adrp	x0, 0 <grub_swap_bytes16>
    a404:	add	x0, x0, #0x0
    a408:	ldr	x1, [x0]
    a40c:	mov	w0, #0x4                   	// #4
    a410:	bl	0 <grub_error>
    a414:	b	a5f8 <grub_zfs_open+0x2c8>
    a418:	ldr	x0, [sp, #72]
    a41c:	ldrb	w0, [x0, #588]
    a420:	cmp	w0, #0x2c
    a424:	b.ne	a538 <grub_zfs_open+0x208>  // b.any
    a428:	ldr	x0, [sp, #72]
    a42c:	ldrh	w0, [x0, #594]
    a430:	cmp	w0, #0x0
    a434:	b.eq	a460 <grub_zfs_open+0x130>  // b.none
    a438:	ldr	x0, [sp, #72]
    a43c:	add	x1, x0, #0x308
    a440:	ldr	x0, [sp, #72]
    a444:	ldrb	w0, [x0, #587]
    a448:	sub	w0, w0, #0x1
    a44c:	sxtw	x0, w0
    a450:	lsl	x0, x0, #7
    a454:	add	x0, x1, x0
    a458:	str	x0, [sp, #40]
    a45c:	b	a4d4 <grub_zfs_open+0x1a4>
    a460:	ldr	x0, [sp, #72]
    a464:	ldrb	w0, [x0, #591]
    a468:	and	w0, w0, #0x4
    a46c:	cmp	w0, #0x0
    a470:	b.eq	a4bc <grub_zfs_open+0x18c>  // b.none
    a474:	ldr	x0, [sp, #72]
    a478:	add	x0, x0, #0x3c8
    a47c:	str	x0, [sp, #56]
    a480:	ldr	x0, [sp, #72]
    a484:	ldr	w0, [x0, #1096]
    a488:	add	x1, sp, #0x28
    a48c:	ldr	x4, [sp, #72]
    a490:	mov	x3, #0x0                   	// #0
    a494:	mov	x2, x1
    a498:	mov	w1, w0
    a49c:	ldr	x0, [sp, #56]
    a4a0:	bl	4e3c <zio_read>
    a4a4:	str	w0, [sp, #68]
    a4a8:	ldr	w0, [sp, #68]
    a4ac:	cmp	w0, #0x0
    a4b0:	b.eq	a4d4 <grub_zfs_open+0x1a4>  // b.none
    a4b4:	ldr	w0, [sp, #68]
    a4b8:	b	a5f8 <grub_zfs_open+0x2c8>
    a4bc:	adrp	x0, 0 <grub_swap_bytes16>
    a4c0:	add	x0, x0, #0x0
    a4c4:	ldr	x1, [x0]
    a4c8:	mov	w0, #0x9                   	// #9
    a4cc:	bl	0 <grub_error>
    a4d0:	b	a5f8 <grub_zfs_open+0x2c8>
    a4d4:	ldr	x0, [sp, #40]
    a4d8:	ldrh	w0, [x0, #4]
    a4dc:	lsr	w0, w0, #10
    a4e0:	and	w0, w0, #0xffff
    a4e4:	lsl	w0, w0, #3
    a4e8:	str	w0, [sp, #52]
    a4ec:	ldr	x0, [sp, #72]
    a4f0:	ldr	w0, [x0, #1096]
    a4f4:	cmp	w0, #0x0
    a4f8:	b.ne	a518 <grub_zfs_open+0x1e8>  // b.any
    a4fc:	ldr	x1, [sp, #40]
    a500:	ldrsw	x0, [sp, #52]
    a504:	add	x0, x0, #0x8
    a508:	add	x0, x1, x0
    a50c:	bl	88 <grub_get_unaligned64>
    a510:	bl	50 <grub_swap_bytes64>
    a514:	b	a52c <grub_zfs_open+0x1fc>
    a518:	ldr	x1, [sp, #40]
    a51c:	ldrsw	x0, [sp, #52]
    a520:	add	x0, x0, #0x8
    a524:	add	x0, x1, x0
    a528:	bl	88 <grub_get_unaligned64>
    a52c:	ldr	x1, [sp, #24]
    a530:	str	x0, [x1, #64]
    a534:	b	a5cc <grub_zfs_open+0x29c>
    a538:	ldr	x0, [sp, #72]
    a53c:	ldrb	w0, [x0, #588]
    a540:	cmp	w0, #0x11
    a544:	b.ne	a5b4 <grub_zfs_open+0x284>  // b.any
    a548:	ldr	x0, [sp, #72]
    a54c:	ldr	w0, [x0, #1096]
    a550:	cmp	w0, #0x0
    a554:	b.ne	a584 <grub_zfs_open+0x254>  // b.any
    a558:	ldr	x0, [sp, #72]
    a55c:	add	x1, x0, #0x308
    a560:	ldr	x0, [sp, #72]
    a564:	ldrb	w0, [x0, #587]
    a568:	sub	w0, w0, #0x1
    a56c:	sxtw	x0, w0
    a570:	lsl	x0, x0, #7
    a574:	add	x0, x1, x0
    a578:	ldr	x0, [x0, #80]
    a57c:	bl	50 <grub_swap_bytes64>
    a580:	b	a5a8 <grub_zfs_open+0x278>
    a584:	ldr	x0, [sp, #72]
    a588:	add	x1, x0, #0x308
    a58c:	ldr	x0, [sp, #72]
    a590:	ldrb	w0, [x0, #587]
    a594:	sub	w0, w0, #0x1
    a598:	sxtw	x0, w0
    a59c:	lsl	x0, x0, #7
    a5a0:	add	x0, x1, x0
    a5a4:	ldr	x0, [x0, #80]
    a5a8:	ldr	x1, [sp, #24]
    a5ac:	str	x0, [x1, #64]
    a5b0:	b	a5cc <grub_zfs_open+0x29c>
    a5b4:	adrp	x0, 0 <grub_swap_bytes16>
    a5b8:	add	x0, x0, #0x0
    a5bc:	ldr	x1, [x0]
    a5c0:	mov	w0, #0x9                   	// #9
    a5c4:	bl	0 <grub_error>
    a5c8:	b	a5f8 <grub_zfs_open+0x2c8>
    a5cc:	ldr	x0, [sp, #24]
    a5d0:	ldr	x1, [sp, #72]
    a5d4:	str	x1, [x0, #80]
    a5d8:	ldr	x0, [sp, #24]
    a5dc:	str	xzr, [x0, #24]
    a5e0:	adrp	x0, 0 <grub_swap_bytes16>
    a5e4:	add	x0, x0, #0x0
    a5e8:	ldr	x0, [x0]
    a5ec:	ldr	x0, [x0]
    a5f0:	bl	0 <grub_dl_ref>
    a5f4:	mov	w0, #0x0                   	// #0
    a5f8:	ldp	x29, x30, [sp], #80
    a5fc:	ret
	...

000000000000a630 <grub_zfs_read>:
    a630:	stp	x29, x30, [sp, #-112]!
    a634:	mov	x29, sp
    a638:	str	x0, [sp, #40]
    a63c:	str	x1, [sp, #32]
    a640:	str	x2, [sp, #24]
    a644:	ldr	x0, [sp, #40]
    a648:	ldr	x0, [x0, #80]
    a64c:	str	x0, [sp, #80]
    a650:	ldr	x0, [sp, #40]
    a654:	ldr	x1, [x0, #24]
    a658:	ldr	x0, [sp, #80]
    a65c:	ldr	x0, [x0, #8]
    a660:	cmp	x1, x0
    a664:	b.cc	a6c0 <grub_zfs_read+0x90>  // b.lo, b.ul, b.last
    a668:	ldr	x0, [sp, #40]
    a66c:	ldr	x1, [x0, #24]
    a670:	ldr	x0, [sp, #24]
    a674:	add	x1, x1, x0
    a678:	ldr	x0, [sp, #80]
    a67c:	ldr	x0, [x0, #16]
    a680:	cmp	x1, x0
    a684:	b.hi	a6c0 <grub_zfs_read+0x90>  // b.pmore
    a688:	ldr	x0, [sp, #80]
    a68c:	ldr	x1, [x0]
    a690:	ldr	x0, [sp, #40]
    a694:	ldr	x2, [x0, #24]
    a698:	ldr	x0, [sp, #80]
    a69c:	ldr	x0, [x0, #8]
    a6a0:	sub	x0, x2, x0
    a6a4:	add	x0, x1, x0
    a6a8:	ldr	x2, [sp, #24]
    a6ac:	mov	x1, x0
    a6b0:	ldr	x0, [sp, #32]
    a6b4:	bl	0 <grub_memmove>
    a6b8:	ldr	x0, [sp, #24]
    a6bc:	b	a8ac <grub_zfs_read+0x27c>
    a6c0:	ldr	x0, [sp, #80]
    a6c4:	ldr	w0, [x0, #1096]
    a6c8:	cmp	w0, #0x0
    a6cc:	b.ne	a6ec <grub_zfs_read+0xbc>  // b.any
    a6d0:	ldr	x0, [sp, #80]
    a6d4:	ldrh	w0, [x0, #592]
    a6d8:	bl	0 <grub_swap_bytes16>
    a6dc:	and	w0, w0, #0xffff
    a6e0:	lsl	w0, w0, #9
    a6e4:	sxtw	x0, w0
    a6e8:	b	a6fc <grub_zfs_read+0xcc>
    a6ec:	ldr	x0, [sp, #80]
    a6f0:	ldrh	w0, [x0, #592]
    a6f4:	lsl	w0, w0, #9
    a6f8:	sxtw	x0, w0
    a6fc:	str	x0, [sp, #72]
    a700:	ldr	x0, [sp, #72]
    a704:	cmp	x0, #0x0
    a708:	b.ne	a728 <grub_zfs_read+0xf8>  // b.any
    a70c:	adrp	x0, 0 <grub_swap_bytes16>
    a710:	add	x0, x0, #0x0
    a714:	ldr	x1, [x0]
    a718:	mov	w0, #0x9                   	// #9
    a71c:	bl	0 <grub_error>
    a720:	mov	x0, #0xffffffffffffffff    	// #-1
    a724:	b	a8ac <grub_zfs_read+0x27c>
    a728:	ldr	x0, [sp, #24]
    a72c:	str	x0, [sp, #96]
    a730:	str	xzr, [sp, #88]
    a734:	b	a89c <grub_zfs_read+0x26c>
    a738:	ldr	x0, [sp, #40]
    a73c:	ldr	x1, [x0, #24]
    a740:	ldr	x0, [sp, #88]
    a744:	add	x0, x1, x0
    a748:	mov	x2, #0x0                   	// #0
    a74c:	ldr	x1, [sp, #72]
    a750:	bl	0 <grub_divmod64>
    a754:	str	x0, [sp, #64]
    a758:	ldr	x0, [sp, #80]
    a75c:	ldr	x0, [x0]
    a760:	bl	0 <grub_free>
    a764:	ldr	x0, [sp, #80]
    a768:	str	xzr, [x0]
    a76c:	ldr	x0, [sp, #80]
    a770:	add	x0, x0, #0x248
    a774:	add	x1, sp, #0x30
    a778:	ldr	x4, [sp, #80]
    a77c:	mov	x3, #0x0                   	// #0
    a780:	mov	x2, x1
    a784:	ldr	x1, [sp, #64]
    a788:	bl	5780 <dmu_read>
    a78c:	str	w0, [sp, #60]
    a790:	ldr	x1, [sp, #48]
    a794:	ldr	x0, [sp, #80]
    a798:	str	x1, [x0]
    a79c:	ldr	w0, [sp, #60]
    a7a0:	cmp	w0, #0x0
    a7a4:	b.eq	a7d0 <grub_zfs_read+0x1a0>  // b.none
    a7a8:	ldr	x0, [sp, #80]
    a7ac:	str	xzr, [x0]
    a7b0:	ldr	x0, [sp, #80]
    a7b4:	str	xzr, [x0, #16]
    a7b8:	ldr	x0, [sp, #80]
    a7bc:	ldr	x1, [x0, #16]
    a7c0:	ldr	x0, [sp, #80]
    a7c4:	str	x1, [x0, #8]
    a7c8:	mov	x0, #0xffffffffffffffff    	// #-1
    a7cc:	b	a8ac <grub_zfs_read+0x27c>
    a7d0:	ldr	x1, [sp, #64]
    a7d4:	ldr	x0, [sp, #72]
    a7d8:	mul	x1, x1, x0
    a7dc:	ldr	x0, [sp, #80]
    a7e0:	str	x1, [x0, #8]
    a7e4:	ldr	x0, [sp, #80]
    a7e8:	ldr	x1, [x0, #8]
    a7ec:	ldr	x0, [sp, #72]
    a7f0:	add	x1, x1, x0
    a7f4:	ldr	x0, [sp, #80]
    a7f8:	str	x1, [x0, #16]
    a7fc:	ldr	x0, [sp, #80]
    a800:	ldr	x1, [x0, #16]
    a804:	ldr	x0, [sp, #40]
    a808:	ldr	x0, [x0, #24]
    a80c:	sub	x1, x1, x0
    a810:	ldr	x0, [sp, #88]
    a814:	sub	x0, x1, x0
    a818:	str	x0, [sp, #104]
    a81c:	ldr	x1, [sp, #104]
    a820:	ldr	x0, [sp, #96]
    a824:	cmp	x1, x0
    a828:	b.ls	a834 <grub_zfs_read+0x204>  // b.plast
    a82c:	ldr	x0, [sp, #96]
    a830:	str	x0, [sp, #104]
    a834:	ldr	x0, [sp, #80]
    a838:	ldr	x1, [x0]
    a83c:	ldr	x0, [sp, #40]
    a840:	ldr	x2, [x0, #24]
    a844:	ldr	x0, [sp, #88]
    a848:	add	x2, x2, x0
    a84c:	ldr	x0, [sp, #80]
    a850:	ldr	x0, [x0, #8]
    a854:	sub	x0, x2, x0
    a858:	add	x0, x1, x0
    a85c:	ldr	x2, [sp, #104]
    a860:	mov	x1, x0
    a864:	ldr	x0, [sp, #32]
    a868:	bl	0 <grub_memmove>
    a86c:	ldr	x1, [sp, #32]
    a870:	ldr	x0, [sp, #104]
    a874:	add	x0, x1, x0
    a878:	str	x0, [sp, #32]
    a87c:	ldr	x1, [sp, #96]
    a880:	ldr	x0, [sp, #104]
    a884:	sub	x0, x1, x0
    a888:	str	x0, [sp, #96]
    a88c:	ldr	x1, [sp, #88]
    a890:	ldr	x0, [sp, #104]
    a894:	add	x0, x1, x0
    a898:	str	x0, [sp, #88]
    a89c:	ldr	x0, [sp, #96]
    a8a0:	cmp	x0, #0x0
    a8a4:	b.ne	a738 <grub_zfs_read+0x108>  // b.any
    a8a8:	ldr	x0, [sp, #24]
    a8ac:	ldp	x29, x30, [sp], #112
    a8b0:	ret
    a8b4:	nop
	...

000000000000a8c0 <grub_zfs_close>:
    a8c0:	stp	x29, x30, [sp, #-32]!
    a8c4:	mov	x29, sp
    a8c8:	str	x0, [sp, #24]
    a8cc:	ldr	x0, [sp, #24]
    a8d0:	ldr	x0, [x0, #80]
    a8d4:	bl	9d14 <zfs_unmount>
    a8d8:	adrp	x0, 0 <grub_swap_bytes16>
    a8dc:	add	x0, x0, #0x0
    a8e0:	ldr	x0, [x0]
    a8e4:	ldr	x0, [x0]
    a8e8:	bl	0 <grub_dl_unref>
    a8ec:	mov	w0, #0x0                   	// #0
    a8f0:	ldp	x29, x30, [sp], #32
    a8f4:	ret
	...

000000000000a900 <grub_zfs_getmdnobj>:
    a900:	stp	x29, x30, [sp, #-64]!
    a904:	mov	x29, sp
    a908:	str	x0, [sp, #40]
    a90c:	str	x1, [sp, #32]
    a910:	str	x2, [sp, #24]
    a914:	ldr	x0, [sp, #40]
    a918:	bl	9e0c <zfs_mount>
    a91c:	str	x0, [sp, #56]
    a920:	ldr	x0, [sp, #56]
    a924:	cmp	x0, #0x0
    a928:	b.ne	a940 <grub_zfs_getmdnobj+0x40>  // b.any
    a92c:	adrp	x0, 0 <grub_swap_bytes16>
    a930:	add	x0, x0, #0x0
    a934:	ldr	x0, [x0]
    a938:	ldr	w0, [x0]
    a93c:	b	a988 <grub_zfs_getmdnobj+0x88>
    a940:	ldr	x0, [sp, #56]
    a944:	add	x1, x0, #0x450
    a948:	ldr	x0, [sp, #56]
    a94c:	add	x0, x0, #0x248
    a950:	add	x2, sp, #0x30
    a954:	ldr	x4, [sp, #56]
    a958:	mov	x3, x2
    a95c:	mov	x2, x0
    a960:	ldr	x0, [sp, #32]
    a964:	bl	8d20 <dnode_get_fullpath>
    a968:	str	w0, [sp, #52]
    a96c:	ldr	x0, [sp, #56]
    a970:	ldr	x1, [x0, #1624]
    a974:	ldr	x0, [sp, #24]
    a978:	str	x1, [x0]
    a97c:	ldr	x0, [sp, #56]
    a980:	bl	9d14 <zfs_unmount>
    a984:	ldr	w0, [sp, #52]
    a988:	ldp	x29, x30, [sp], #64
    a98c:	ret
	...

000000000000a998 <fill_fs_info>:
    a998:	sub	sp, sp, #0x270
    a99c:	stp	x29, x30, [sp]
    a9a0:	mov	x29, sp
    a9a4:	str	x19, [sp, #16]
    a9a8:	str	x0, [sp, #40]
    a9ac:	mov	x19, x1
    a9b0:	str	x2, [sp, #32]
    a9b4:	mov	x2, #0x10                  	// #16
    a9b8:	mov	w1, #0x0                   	// #0
    a9bc:	ldr	x0, [sp, #40]
    a9c0:	bl	0 <grub_memset>
    a9c4:	ldr	x0, [sp, #40]
    a9c8:	ldrb	w1, [x0]
    a9cc:	orr	w1, w1, #0x1
    a9d0:	strb	w1, [x0]
    a9d4:	ldrb	w0, [x19]
    a9d8:	cmp	w0, #0xc
    a9dc:	b.ne	aa90 <fill_fs_info+0xf8>  // b.any
    a9e0:	ldr	w0, [x19, #512]
    a9e4:	cmp	w0, #0x0
    a9e8:	b.ne	aa10 <fill_fs_info+0x78>  // b.any
    a9ec:	ldrb	w0, [x19, #3]
    a9f0:	sub	w0, w0, #0x1
    a9f4:	sxtw	x0, w0
    a9f8:	lsl	x0, x0, #7
    a9fc:	add	x1, x19, #0xc0
    aa00:	add	x0, x1, x0
    aa04:	ldr	x0, [x0, #8]
    aa08:	bl	50 <grub_swap_bytes64>
    aa0c:	b	aa2c <fill_fs_info+0x94>
    aa10:	ldrb	w0, [x19, #3]
    aa14:	sub	w0, w0, #0x1
    aa18:	sxtw	x0, w0
    aa1c:	lsl	x0, x0, #7
    aa20:	add	x1, x19, #0xc0
    aa24:	add	x0, x1, x0
    aa28:	ldr	x0, [x0, #8]
    aa2c:	str	x0, [sp, #616]
    aa30:	ldr	x0, [sp, #32]
    aa34:	add	x0, x0, #0x40
    aa38:	ldr	x4, [sp, #32]
    aa3c:	mov	x3, x19
    aa40:	mov	w2, #0x0                   	// #0
    aa44:	ldr	x1, [sp, #616]
    aa48:	bl	7700 <dnode_get>
    aa4c:	str	w0, [sp, #612]
    aa50:	ldr	w0, [sp, #612]
    aa54:	cmp	w0, #0x0
    aa58:	b.eq	aa90 <fill_fs_info+0xf8>  // b.none
    aa5c:	adrp	x0, 0 <grub_swap_bytes16>
    aa60:	add	x0, x0, #0x0
    aa64:	ldr	x3, [x0]
    aa68:	adrp	x0, 0 <grub_swap_bytes16>
    aa6c:	add	x0, x0, #0x0
    aa70:	ldr	x2, [x0]
    aa74:	mov	w1, #0xf8a                 	// #3978
    aa78:	adrp	x0, 0 <grub_swap_bytes16>
    aa7c:	add	x0, x0, #0x0
    aa80:	ldr	x0, [x0]
    aa84:	bl	0 <grub_real_dprintf>
    aa88:	ldr	w0, [sp, #612]
    aa8c:	b	ad94 <fill_fs_info+0x3fc>
    aa90:	ldr	x1, [sp, #32]
    aa94:	mov	x0, x19
    aa98:	bl	8978 <make_mdn>
    aa9c:	str	w0, [sp, #612]
    aaa0:	ldr	w0, [sp, #612]
    aaa4:	cmp	w0, #0x0
    aaa8:	b.eq	aab4 <fill_fs_info+0x11c>  // b.none
    aaac:	ldr	w0, [sp, #612]
    aab0:	b	ad94 <fill_fs_info+0x3fc>
    aab4:	add	x0, sp, #0x48
    aab8:	ldr	x4, [sp, #32]
    aabc:	mov	x3, x0
    aac0:	mov	w2, #0x15                  	// #21
    aac4:	mov	x1, #0x1                   	// #1
    aac8:	mov	x0, x19
    aacc:	bl	7700 <dnode_get>
    aad0:	str	w0, [sp, #612]
    aad4:	ldr	w0, [sp, #612]
    aad8:	cmp	w0, #0x0
    aadc:	b.eq	ab14 <fill_fs_info+0x17c>  // b.none
    aae0:	adrp	x0, 0 <grub_swap_bytes16>
    aae4:	add	x0, x0, #0x0
    aae8:	ldr	x3, [x0]
    aaec:	adrp	x0, 0 <grub_swap_bytes16>
    aaf0:	add	x0, x0, #0x0
    aaf4:	ldr	x2, [x0]
    aaf8:	mov	w1, #0xf95                 	// #3989
    aafc:	adrp	x0, 0 <grub_swap_bytes16>
    ab00:	add	x0, x0, #0x0
    ab04:	ldr	x0, [x0]
    ab08:	bl	0 <grub_real_dprintf>
    ab0c:	ldr	w0, [sp, #612]
    ab10:	b	ad94 <fill_fs_info+0x3fc>
    ab14:	add	x0, sp, #0x40
    ab18:	add	x5, sp, #0x48
    ab1c:	mov	w4, #0x0                   	// #0
    ab20:	ldr	x3, [sp, #32]
    ab24:	mov	x2, x0
    ab28:	adrp	x0, 0 <grub_swap_bytes16>
    ab2c:	add	x0, x0, #0x0
    ab30:	ldr	x1, [x0]
    ab34:	mov	x0, x5
    ab38:	bl	7018 <zap_lookup>
    ab3c:	str	w0, [sp, #612]
    ab40:	ldr	w0, [sp, #612]
    ab44:	cmp	w0, #0x0
    ab48:	b.eq	ab80 <fill_fs_info+0x1e8>  // b.none
    ab4c:	adrp	x0, 0 <grub_swap_bytes16>
    ab50:	add	x0, x0, #0x0
    ab54:	ldr	x3, [x0]
    ab58:	adrp	x0, 0 <grub_swap_bytes16>
    ab5c:	add	x0, x0, #0x0
    ab60:	ldr	x2, [x0]
    ab64:	mov	w1, #0xf9c                 	// #3996
    ab68:	adrp	x0, 0 <grub_swap_bytes16>
    ab6c:	add	x0, x0, #0x0
    ab70:	ldr	x0, [x0]
    ab74:	bl	0 <grub_real_dprintf>
    ab78:	ldr	w0, [sp, #612]
    ab7c:	b	ad94 <fill_fs_info+0x3fc>
    ab80:	ldr	x0, [sp, #64]
    ab84:	add	x1, sp, #0x48
    ab88:	ldr	x4, [sp, #32]
    ab8c:	mov	x3, x1
    ab90:	mov	w2, #0x0                   	// #0
    ab94:	mov	x1, x0
    ab98:	mov	x0, x19
    ab9c:	bl	7700 <dnode_get>
    aba0:	str	w0, [sp, #612]
    aba4:	ldr	w0, [sp, #612]
    aba8:	cmp	w0, #0x0
    abac:	b.eq	abe4 <fill_fs_info+0x24c>  // b.none
    abb0:	adrp	x0, 0 <grub_swap_bytes16>
    abb4:	add	x0, x0, #0x0
    abb8:	ldr	x3, [x0]
    abbc:	adrp	x0, 0 <grub_swap_bytes16>
    abc0:	add	x0, x0, #0x0
    abc4:	ldr	x2, [x0]
    abc8:	mov	w1, #0xfa3                 	// #4003
    abcc:	adrp	x0, 0 <grub_swap_bytes16>
    abd0:	add	x0, x0, #0x0
    abd4:	ldr	x0, [x0]
    abd8:	bl	0 <grub_real_dprintf>
    abdc:	ldr	w0, [sp, #612]
    abe0:	b	ad94 <fill_fs_info+0x3fc>
    abe4:	ldrb	w0, [sp, #76]
    abe8:	cmp	w0, #0x2c
    abec:	b.ne	ad10 <fill_fs_info+0x378>  // b.any
    abf0:	ldrh	w0, [sp, #82]
    abf4:	cmp	w0, #0x0
    abf8:	b.eq	ac20 <fill_fs_info+0x288>  // b.none
    abfc:	ldrb	w0, [sp, #75]
    ac00:	sub	w0, w0, #0x1
    ac04:	sxtw	x0, w0
    ac08:	lsl	x0, x0, #7
    ac0c:	add	x1, sp, #0x48
    ac10:	add	x1, x1, #0xc0
    ac14:	add	x0, x1, x0
    ac18:	str	x0, [sp, #56]
    ac1c:	b	ac9c <fill_fs_info+0x304>
    ac20:	ldrb	w0, [sp, #79]
    ac24:	and	w0, w0, #0x4
    ac28:	cmp	w0, #0x0
    ac2c:	b.eq	ac74 <fill_fs_info+0x2dc>  // b.none
    ac30:	add	x0, sp, #0x48
    ac34:	add	x0, x0, #0x180
    ac38:	str	x0, [sp, #600]
    ac3c:	ldr	w0, [sp, #584]
    ac40:	add	x1, sp, #0x38
    ac44:	ldr	x4, [sp, #32]
    ac48:	mov	x3, #0x0                   	// #0
    ac4c:	mov	x2, x1
    ac50:	mov	w1, w0
    ac54:	ldr	x0, [sp, #600]
    ac58:	bl	4e3c <zio_read>
    ac5c:	str	w0, [sp, #612]
    ac60:	ldr	w0, [sp, #612]
    ac64:	cmp	w0, #0x0
    ac68:	b.eq	ac9c <fill_fs_info+0x304>  // b.none
    ac6c:	ldr	w0, [sp, #612]
    ac70:	b	ad94 <fill_fs_info+0x3fc>
    ac74:	adrp	x0, 0 <grub_swap_bytes16>
    ac78:	add	x0, x0, #0x0
    ac7c:	ldr	x1, [x0]
    ac80:	mov	w0, #0x9                   	// #9
    ac84:	bl	0 <grub_error>
    ac88:	adrp	x0, 0 <grub_swap_bytes16>
    ac8c:	add	x0, x0, #0x0
    ac90:	ldr	x0, [x0]
    ac94:	ldr	w0, [x0]
    ac98:	b	ad94 <fill_fs_info+0x3fc>
    ac9c:	ldr	x0, [sp, #56]
    aca0:	ldrh	w0, [x0, #4]
    aca4:	lsr	w0, w0, #10
    aca8:	and	w0, w0, #0xffff
    acac:	lsl	w0, w0, #3
    acb0:	str	w0, [sp, #596]
    acb4:	ldr	x0, [sp, #40]
    acb8:	ldrb	w1, [x0]
    acbc:	orr	w1, w1, #0x2
    acc0:	strb	w1, [x0]
    acc4:	ldr	w0, [sp, #584]
    acc8:	cmp	w0, #0x0
    accc:	b.ne	acf0 <fill_fs_info+0x358>  // b.any
    acd0:	ldr	x1, [sp, #56]
    acd4:	ldrsw	x0, [sp, #596]
    acd8:	add	x0, x0, #0x38
    acdc:	add	x0, x1, x0
    ace0:	bl	88 <grub_get_unaligned64>
    ace4:	bl	50 <grub_swap_bytes64>
    ace8:	mov	w1, w0
    acec:	b	ad08 <fill_fs_info+0x370>
    acf0:	ldr	x1, [sp, #56]
    acf4:	ldrsw	x0, [sp, #596]
    acf8:	add	x0, x0, #0x38
    acfc:	add	x0, x1, x0
    ad00:	bl	88 <grub_get_unaligned64>
    ad04:	mov	w1, w0
    ad08:	ldr	x0, [sp, #40]
    ad0c:	str	w1, [x0, #4]
    ad10:	ldrb	w0, [sp, #76]
    ad14:	cmp	w0, #0x11
    ad18:	b.ne	ad90 <fill_fs_info+0x3f8>  // b.any
    ad1c:	ldr	x0, [sp, #40]
    ad20:	ldrb	w1, [x0]
    ad24:	orr	w1, w1, #0x2
    ad28:	strb	w1, [x0]
    ad2c:	ldr	w0, [sp, #584]
    ad30:	cmp	w0, #0x0
    ad34:	b.ne	ad64 <fill_fs_info+0x3cc>  // b.any
    ad38:	ldrb	w0, [sp, #75]
    ad3c:	sub	w0, w0, #0x1
    ad40:	sxtw	x0, w0
    ad44:	lsl	x0, x0, #7
    ad48:	add	x1, sp, #0x48
    ad4c:	add	x1, x1, #0xc0
    ad50:	add	x0, x1, x0
    ad54:	ldr	x0, [x0, #16]
    ad58:	bl	50 <grub_swap_bytes64>
    ad5c:	mov	w1, w0
    ad60:	b	ad88 <fill_fs_info+0x3f0>
    ad64:	ldrb	w0, [sp, #75]
    ad68:	sub	w0, w0, #0x1
    ad6c:	sxtw	x0, w0
    ad70:	lsl	x0, x0, #7
    ad74:	add	x1, sp, #0x48
    ad78:	add	x1, x1, #0xc0
    ad7c:	add	x0, x1, x0
    ad80:	ldr	x0, [x0, #16]
    ad84:	mov	w1, w0
    ad88:	ldr	x0, [sp, #40]
    ad8c:	str	w1, [x0, #4]
    ad90:	mov	w0, #0x0                   	// #0
    ad94:	ldr	x19, [sp, #16]
    ad98:	ldp	x29, x30, [sp]
    ad9c:	add	sp, sp, #0x270
    ada0:	ret
    ada4:	nop
	...

000000000000add8 <iterate_zap>:
    add8:	sub	sp, sp, #0x270
    addc:	stp	x29, x30, [sp]
    ade0:	mov	x29, sp
    ade4:	str	x0, [sp, #40]
    ade8:	str	x1, [sp, #32]
    adec:	str	x2, [sp, #24]
    adf0:	add	x0, sp, #0x248
    adf4:	mov	x2, #0x10                  	// #16
    adf8:	mov	w1, #0x0                   	// #0
    adfc:	bl	0 <grub_memset>
    ae00:	ldr	x0, [sp, #24]
    ae04:	ldr	x0, [x0, #16]
    ae08:	add	x5, x0, #0x450
    ae0c:	ldr	x0, [sp, #24]
    ae10:	ldr	x1, [x0, #16]
    ae14:	add	x0, sp, #0x40
    ae18:	mov	x4, x1
    ae1c:	mov	x3, x0
    ae20:	mov	w2, #0x0                   	// #0
    ae24:	ldr	x1, [sp, #32]
    ae28:	mov	x0, x5
    ae2c:	bl	7700 <dnode_get>
    ae30:	str	w0, [sp, #620]
    ae34:	ldr	w0, [sp, #620]
    ae38:	cmp	w0, #0x0
    ae3c:	b.eq	ae4c <iterate_zap+0x74>  // b.none
    ae40:	bl	0 <grub_print_error>
    ae44:	mov	w0, #0x0                   	// #0
    ae48:	b	b07c <iterate_zap+0x2a4>
    ae4c:	ldrb	w0, [sp, #68]
    ae50:	cmp	w0, #0x2c
    ae54:	b.ne	af94 <iterate_zap+0x1bc>  // b.any
    ae58:	ldrh	w0, [sp, #74]
    ae5c:	cmp	w0, #0x0
    ae60:	b.eq	ae94 <iterate_zap+0xbc>  // b.none
    ae64:	ldr	x0, [sp, #24]
    ae68:	ldr	x0, [x0, #16]
    ae6c:	add	x1, x0, #0x308
    ae70:	ldr	x0, [sp, #24]
    ae74:	ldr	x0, [x0, #16]
    ae78:	ldrb	w0, [x0, #587]
    ae7c:	sub	w0, w0, #0x1
    ae80:	sxtw	x0, w0
    ae84:	lsl	x0, x0, #7
    ae88:	add	x0, x1, x0
    ae8c:	str	x0, [sp, #56]
    ae90:	b	af10 <iterate_zap+0x138>
    ae94:	ldrb	w0, [sp, #71]
    ae98:	and	w0, w0, #0x4
    ae9c:	cmp	w0, #0x0
    aea0:	b.eq	aef0 <iterate_zap+0x118>  // b.none
    aea4:	add	x0, sp, #0x40
    aea8:	add	x0, x0, #0x180
    aeac:	str	x0, [sp, #608]
    aeb0:	ldr	w1, [sp, #576]
    aeb4:	ldr	x0, [sp, #24]
    aeb8:	ldr	x2, [x0, #16]
    aebc:	add	x0, sp, #0x38
    aec0:	mov	x4, x2
    aec4:	mov	x3, #0x0                   	// #0
    aec8:	mov	x2, x0
    aecc:	ldr	x0, [sp, #608]
    aed0:	bl	4e3c <zio_read>
    aed4:	str	w0, [sp, #620]
    aed8:	ldr	w0, [sp, #620]
    aedc:	cmp	w0, #0x0
    aee0:	b.eq	af10 <iterate_zap+0x138>  // b.none
    aee4:	bl	0 <grub_print_error>
    aee8:	mov	w0, #0x0                   	// #0
    aeec:	b	b07c <iterate_zap+0x2a4>
    aef0:	adrp	x0, 0 <grub_swap_bytes16>
    aef4:	add	x0, x0, #0x0
    aef8:	ldr	x1, [x0]
    aefc:	mov	w0, #0x9                   	// #9
    af00:	bl	0 <grub_error>
    af04:	bl	0 <grub_print_error>
    af08:	mov	w0, #0x0                   	// #0
    af0c:	b	b07c <iterate_zap+0x2a4>
    af10:	ldr	x0, [sp, #56]
    af14:	ldrh	w0, [x0, #4]
    af18:	lsr	w0, w0, #10
    af1c:	and	w0, w0, #0xffff
    af20:	lsl	w0, w0, #3
    af24:	str	w0, [sp, #604]
    af28:	ldrb	w0, [sp, #584]
    af2c:	orr	w0, w0, #0x2
    af30:	strb	w0, [sp, #584]
    af34:	ldr	w0, [sp, #576]
    af38:	cmp	w0, #0x0
    af3c:	b.ne	af5c <iterate_zap+0x184>  // b.any
    af40:	ldr	x1, [sp, #56]
    af44:	ldrsw	x0, [sp, #604]
    af48:	add	x0, x0, #0x38
    af4c:	add	x0, x1, x0
    af50:	bl	88 <grub_get_unaligned64>
    af54:	bl	50 <grub_swap_bytes64>
    af58:	b	af70 <iterate_zap+0x198>
    af5c:	ldr	x1, [sp, #56]
    af60:	ldrsw	x0, [sp, #604]
    af64:	add	x0, x0, #0x38
    af68:	add	x0, x1, x0
    af6c:	bl	88 <grub_get_unaligned64>
    af70:	str	w0, [sp, #588]
    af74:	ldr	x0, [sp, #24]
    af78:	ldr	x0, [x0, #16]
    af7c:	ldr	x0, [x0, #1632]
    af80:	and	w0, w0, #0x1
    af84:	and	w1, w0, #0xff
    af88:	ldrb	w0, [sp, #584]
    af8c:	bfi	w0, w1, #2, #1
    af90:	strb	w0, [sp, #584]
    af94:	ldrb	w0, [sp, #68]
    af98:	cmp	w0, #0x11
    af9c:	b.ne	b004 <iterate_zap+0x22c>  // b.any
    afa0:	ldrb	w0, [sp, #584]
    afa4:	orr	w0, w0, #0x2
    afa8:	strb	w0, [sp, #584]
    afac:	ldr	w0, [sp, #576]
    afb0:	cmp	w0, #0x0
    afb4:	b.ne	afe0 <iterate_zap+0x208>  // b.any
    afb8:	ldrb	w0, [sp, #67]
    afbc:	sub	w0, w0, #0x1
    afc0:	sxtw	x0, w0
    afc4:	lsl	x0, x0, #7
    afc8:	add	x1, sp, #0x40
    afcc:	add	x1, x1, #0xc0
    afd0:	add	x0, x1, x0
    afd4:	ldr	x0, [x0, #16]
    afd8:	bl	50 <grub_swap_bytes64>
    afdc:	b	b000 <iterate_zap+0x228>
    afe0:	ldrb	w0, [sp, #67]
    afe4:	sub	w0, w0, #0x1
    afe8:	sxtw	x0, w0
    afec:	lsl	x0, x0, #7
    aff0:	add	x1, sp, #0x40
    aff4:	add	x1, x1, #0xc0
    aff8:	add	x0, x1, x0
    affc:	ldr	x0, [x0, #16]
    b000:	str	w0, [sp, #588]
    b004:	ldrb	w0, [sp, #64]
    b008:	cmp	w0, #0x14
    b00c:	cset	w0, eq  // eq = none
    b010:	and	w1, w0, #0xff
    b014:	ldrb	w0, [sp, #584]
    b018:	bfxil	w0, w1, #0, #1
    b01c:	strb	w0, [sp, #584]
    b020:	ldrb	w0, [sp, #64]
    b024:	ldr	x5, [sp, #40]
    b028:	mov	w4, w0
    b02c:	adrp	x0, 0 <grub_swap_bytes16>
    b030:	add	x0, x0, #0x0
    b034:	ldr	x3, [x0]
    b038:	adrp	x0, 0 <grub_swap_bytes16>
    b03c:	add	x0, x0, #0x0
    b040:	ldr	x2, [x0]
    b044:	mov	w1, #0x1004                	// #4100
    b048:	adrp	x0, 0 <grub_swap_bytes16>
    b04c:	add	x0, x0, #0x0
    b050:	ldr	x0, [x0]
    b054:	bl	0 <grub_real_dprintf>
    b058:	ldr	x0, [sp, #24]
    b05c:	ldr	x3, [x0]
    b060:	ldr	x0, [sp, #24]
    b064:	ldr	x1, [x0, #8]
    b068:	add	x0, sp, #0x248
    b06c:	mov	x2, x1
    b070:	mov	x1, x0
    b074:	ldr	x0, [sp, #40]
    b078:	blr	x3
    b07c:	ldp	x29, x30, [sp]
    b080:	add	sp, sp, #0x270
    b084:	ret
	...

000000000000b0a8 <iterate_zap_fs>:
    b0a8:	sub	sp, sp, #0x470
    b0ac:	stp	x29, x30, [sp]
    b0b0:	mov	x29, sp
    b0b4:	str	x19, [sp, #16]
    b0b8:	str	x0, [sp, #584]
    b0bc:	str	x1, [sp, #576]
    b0c0:	str	x2, [sp, #568]
    b0c4:	ldr	x0, [sp, #568]
    b0c8:	ldr	x0, [x0, #16]
    b0cc:	add	x5, x0, #0x40
    b0d0:	ldr	x0, [sp, #568]
    b0d4:	ldr	x1, [x0, #16]
    b0d8:	add	x0, sp, #0x250
    b0dc:	mov	x4, x1
    b0e0:	mov	x3, x0
    b0e4:	mov	w2, #0x0                   	// #0
    b0e8:	ldr	x1, [sp, #576]
    b0ec:	mov	x0, x5
    b0f0:	bl	7700 <dnode_get>
    b0f4:	str	w0, [sp, #1132]
    b0f8:	ldr	w0, [sp, #1132]
    b0fc:	cmp	w0, #0x0
    b100:	b.eq	b11c <iterate_zap_fs+0x74>  // b.none
    b104:	adrp	x0, 0 <grub_swap_bytes16>
    b108:	add	x0, x0, #0x0
    b10c:	ldr	x0, [x0]
    b110:	str	wzr, [x0]
    b114:	mov	w0, #0x0                   	// #0
    b118:	b	b1a4 <iterate_zap_fs+0xfc>
    b11c:	ldrb	w0, [sp, #592]
    b120:	cmp	w0, #0xc
    b124:	b.eq	b130 <iterate_zap_fs+0x88>  // b.none
    b128:	mov	w0, #0x0                   	// #0
    b12c:	b	b1a4 <iterate_zap_fs+0xfc>
    b130:	ldr	x0, [sp, #568]
    b134:	ldr	x19, [x0, #16]
    b138:	add	x0, sp, #0x20
    b13c:	add	x1, sp, #0x250
    b140:	mov	x2, #0x208                 	// #520
    b144:	bl	0 <memcpy>
    b148:	add	x1, sp, #0x20
    b14c:	add	x0, sp, #0x458
    b150:	mov	x2, x19
    b154:	bl	a998 <fill_fs_info>
    b158:	str	w0, [sp, #1132]
    b15c:	ldr	w0, [sp, #1132]
    b160:	cmp	w0, #0x0
    b164:	b.eq	b180 <iterate_zap_fs+0xd8>  // b.none
    b168:	adrp	x0, 0 <grub_swap_bytes16>
    b16c:	add	x0, x0, #0x0
    b170:	ldr	x0, [x0]
    b174:	str	wzr, [x0]
    b178:	mov	w0, #0x0                   	// #0
    b17c:	b	b1a4 <iterate_zap_fs+0xfc>
    b180:	ldr	x0, [sp, #568]
    b184:	ldr	x3, [x0]
    b188:	ldr	x0, [sp, #568]
    b18c:	ldr	x1, [x0, #8]
    b190:	add	x0, sp, #0x458
    b194:	mov	x2, x1
    b198:	mov	x1, x0
    b19c:	ldr	x0, [sp, #584]
    b1a0:	blr	x3
    b1a4:	ldr	x19, [sp, #16]
    b1a8:	ldp	x29, x30, [sp]
    b1ac:	add	sp, sp, #0x470
    b1b0:	ret
    b1b4:	nop
	...

000000000000b1c0 <iterate_zap_snap>:
    b1c0:	sub	sp, sp, #0x480
    b1c4:	stp	x29, x30, [sp]
    b1c8:	mov	x29, sp
    b1cc:	str	x19, [sp, #16]
    b1d0:	str	x0, [sp, #584]
    b1d4:	str	x1, [sp, #576]
    b1d8:	str	x2, [sp, #568]
    b1dc:	ldr	x0, [sp, #568]
    b1e0:	ldr	x0, [x0, #16]
    b1e4:	add	x5, x0, #0x40
    b1e8:	ldr	x0, [sp, #568]
    b1ec:	ldr	x1, [x0, #16]
    b1f0:	add	x0, sp, #0x250
    b1f4:	mov	x4, x1
    b1f8:	mov	x3, x0
    b1fc:	mov	w2, #0x0                   	// #0
    b200:	ldr	x1, [sp, #576]
    b204:	mov	x0, x5
    b208:	bl	7700 <dnode_get>
    b20c:	str	w0, [sp, #1148]
    b210:	ldr	w0, [sp, #1148]
    b214:	cmp	w0, #0x0
    b218:	b.eq	b234 <iterate_zap_snap+0x74>  // b.none
    b21c:	adrp	x0, 0 <grub_swap_bytes16>
    b220:	add	x0, x0, #0x0
    b224:	ldr	x0, [x0]
    b228:	str	wzr, [x0]
    b22c:	mov	w0, #0x0                   	// #0
    b230:	b	b310 <iterate_zap_snap+0x150>
    b234:	ldrb	w0, [sp, #592]
    b238:	cmp	w0, #0x10
    b23c:	b.eq	b248 <iterate_zap_snap+0x88>  // b.none
    b240:	mov	w0, #0x0                   	// #0
    b244:	b	b310 <iterate_zap_snap+0x150>
    b248:	ldr	x0, [sp, #568]
    b24c:	ldr	x19, [x0, #16]
    b250:	add	x0, sp, #0x20
    b254:	add	x1, sp, #0x250
    b258:	mov	x2, #0x208                 	// #520
    b25c:	bl	0 <memcpy>
    b260:	add	x1, sp, #0x20
    b264:	add	x0, sp, #0x458
    b268:	mov	x2, x19
    b26c:	bl	a998 <fill_fs_info>
    b270:	str	w0, [sp, #1148]
    b274:	ldr	w0, [sp, #1148]
    b278:	cmp	w0, #0x0
    b27c:	b.eq	b298 <iterate_zap_snap+0xd8>  // b.none
    b280:	adrp	x0, 0 <grub_swap_bytes16>
    b284:	add	x0, x0, #0x0
    b288:	ldr	x0, [x0]
    b28c:	str	wzr, [x0]
    b290:	mov	w0, #0x0                   	// #0
    b294:	b	b310 <iterate_zap_snap+0x150>
    b298:	ldr	x0, [sp, #584]
    b29c:	bl	0 <grub_strlen>
    b2a0:	add	x0, x0, #0x2
    b2a4:	bl	0 <grub_malloc>
    b2a8:	str	x0, [sp, #1136]
    b2ac:	ldr	x0, [sp, #1136]
    b2b0:	mov	w1, #0x40                  	// #64
    b2b4:	strb	w1, [x0]
    b2b8:	ldr	x0, [sp, #1136]
    b2bc:	add	x19, x0, #0x1
    b2c0:	ldr	x0, [sp, #584]
    b2c4:	bl	0 <grub_strlen>
    b2c8:	add	x0, x0, #0x1
    b2cc:	mov	x2, x0
    b2d0:	ldr	x1, [sp, #584]
    b2d4:	mov	x0, x19
    b2d8:	bl	100 <grub_memcpy>
    b2dc:	ldr	x0, [sp, #568]
    b2e0:	ldr	x3, [x0]
    b2e4:	ldr	x0, [sp, #568]
    b2e8:	ldr	x1, [x0, #8]
    b2ec:	add	x0, sp, #0x458
    b2f0:	mov	x2, x1
    b2f4:	mov	x1, x0
    b2f8:	ldr	x0, [sp, #1136]
    b2fc:	blr	x3
    b300:	str	w0, [sp, #1132]
    b304:	ldr	x0, [sp, #1136]
    b308:	bl	0 <grub_free>
    b30c:	ldr	w0, [sp, #1132]
    b310:	ldr	x19, [sp, #16]
    b314:	ldp	x29, x30, [sp]
    b318:	add	sp, sp, #0x480
    b31c:	ret
	...

000000000000b328 <grub_zfs_dir>:
    b328:	sub	sp, sp, #0x4a0
    b32c:	stp	x29, x30, [sp]
    b330:	mov	x29, sp
    b334:	str	x0, [sp, #568]
    b338:	str	x1, [sp, #560]
    b33c:	str	x2, [sp, #552]
    b340:	str	x3, [sp, #544]
    b344:	add	x0, sp, #0x400
    b348:	stp	xzr, xzr, [x0, #96]
    b34c:	str	xzr, [sp, #1136]
    b350:	ldr	x0, [sp, #552]
    b354:	str	x0, [sp, #1120]
    b358:	ldr	x0, [sp, #544]
    b35c:	str	x0, [sp, #1128]
    b360:	ldr	x0, [sp, #568]
    b364:	bl	9e0c <zfs_mount>
    b368:	str	x0, [sp, #1176]
    b36c:	ldr	x0, [sp, #1176]
    b370:	cmp	x0, #0x0
    b374:	b.ne	b38c <grub_zfs_dir+0x64>  // b.any
    b378:	adrp	x0, 0 <grub_swap_bytes16>
    b37c:	add	x0, x0, #0x0
    b380:	ldr	x0, [x0]
    b384:	ldr	w0, [x0]
    b388:	b	b710 <grub_zfs_dir+0x3e8>
    b38c:	ldr	x0, [sp, #1176]
    b390:	add	x1, x0, #0x450
    b394:	ldr	x0, [sp, #1176]
    b398:	add	x0, x0, #0x248
    b39c:	add	x2, sp, #0x45c
    b3a0:	ldr	x4, [sp, #1176]
    b3a4:	mov	x3, x2
    b3a8:	mov	x2, x0
    b3ac:	ldr	x0, [sp, #560]
    b3b0:	bl	8d20 <dnode_get_fullpath>
    b3b4:	str	w0, [sp, #1172]
    b3b8:	ldr	w0, [sp, #1172]
    b3bc:	cmp	w0, #0x0
    b3c0:	b.eq	b3d4 <grub_zfs_dir+0xac>  // b.none
    b3c4:	ldr	x0, [sp, #1176]
    b3c8:	bl	9d14 <zfs_unmount>
    b3cc:	ldr	w0, [sp, #1172]
    b3d0:	b	b710 <grub_zfs_dir+0x3e8>
    b3d4:	ldr	x0, [sp, #1176]
    b3d8:	str	x0, [sp, #1136]
    b3dc:	ldr	w0, [sp, #1116]
    b3e0:	cmp	w0, #0x0
    b3e4:	b.eq	b6a0 <grub_zfs_dir+0x378>  // b.none
    b3e8:	ldr	x0, [sp, #1176]
    b3ec:	add	x0, x0, #0x400
    b3f0:	sub	x1, x0, #0x1b8
    b3f4:	add	x0, sp, #0x10
    b3f8:	mov	x3, x1
    b3fc:	mov	x1, #0x208                 	// #520
    b400:	mov	x2, x1
    b404:	mov	x1, x3
    b408:	bl	0 <memcpy>
    b40c:	add	x1, sp, #0x10
    b410:	add	x0, sp, #0x448
    b414:	ldr	x2, [sp, #1176]
    b418:	bl	a998 <fill_fs_info>
    b41c:	str	w0, [sp, #1172]
    b420:	ldr	w0, [sp, #1172]
    b424:	cmp	w0, #0x0
    b428:	b.eq	b43c <grub_zfs_dir+0x114>  // b.none
    b42c:	ldr	x0, [sp, #1176]
    b430:	bl	9d14 <zfs_unmount>
    b434:	ldr	w0, [sp, #1172]
    b438:	b	b710 <grub_zfs_dir+0x3e8>
    b43c:	add	x0, sp, #0x448
    b440:	ldr	x3, [sp, #552]
    b444:	ldr	x2, [sp, #544]
    b448:	mov	x1, x0
    b44c:	adrp	x0, 0 <grub_swap_bytes16>
    b450:	add	x0, x0, #0x0
    b454:	ldr	x0, [x0]
    b458:	blr	x3
    b45c:	cmp	w0, #0x0
    b460:	b.eq	b474 <grub_zfs_dir+0x14c>  // b.none
    b464:	ldr	x0, [sp, #1176]
    b468:	bl	9d14 <zfs_unmount>
    b46c:	mov	w0, #0x0                   	// #0
    b470:	b	b710 <grub_zfs_dir+0x3e8>
    b474:	ldr	x0, [sp, #1176]
    b478:	ldr	w0, [x0, #1096]
    b47c:	cmp	w0, #0x0
    b480:	b.ne	b4b0 <grub_zfs_dir+0x188>  // b.any
    b484:	ldr	x0, [sp, #1176]
    b488:	add	x1, x0, #0x308
    b48c:	ldr	x0, [sp, #1176]
    b490:	ldrb	w0, [x0, #587]
    b494:	sub	w0, w0, #0x1
    b498:	sxtw	x0, w0
    b49c:	lsl	x0, x0, #7
    b4a0:	add	x0, x1, x0
    b4a4:	ldr	x0, [x0, #32]
    b4a8:	bl	50 <grub_swap_bytes64>
    b4ac:	b	b4d4 <grub_zfs_dir+0x1ac>
    b4b0:	ldr	x0, [sp, #1176]
    b4b4:	add	x1, x0, #0x308
    b4b8:	ldr	x0, [sp, #1176]
    b4bc:	ldrb	w0, [x0, #587]
    b4c0:	sub	w0, w0, #0x1
    b4c4:	sxtw	x0, w0
    b4c8:	lsl	x0, x0, #7
    b4cc:	add	x0, x1, x0
    b4d0:	ldr	x0, [x0, #32]
    b4d4:	str	x0, [sp, #1160]
    b4d8:	ldr	x0, [sp, #1176]
    b4dc:	ldr	w0, [x0, #1096]
    b4e0:	cmp	w0, #0x0
    b4e4:	b.ne	b514 <grub_zfs_dir+0x1ec>  // b.any
    b4e8:	ldr	x0, [sp, #1176]
    b4ec:	add	x1, x0, #0x308
    b4f0:	ldr	x0, [sp, #1176]
    b4f4:	ldrb	w0, [x0, #587]
    b4f8:	sub	w0, w0, #0x1
    b4fc:	sxtw	x0, w0
    b500:	lsl	x0, x0, #7
    b504:	add	x0, x1, x0
    b508:	ldr	x0, [x0, #8]
    b50c:	bl	50 <grub_swap_bytes64>
    b510:	b	b538 <grub_zfs_dir+0x210>
    b514:	ldr	x0, [sp, #1176]
    b518:	add	x1, x0, #0x308
    b51c:	ldr	x0, [sp, #1176]
    b520:	ldrb	w0, [x0, #587]
    b524:	sub	w0, w0, #0x1
    b528:	sxtw	x0, w0
    b52c:	lsl	x0, x0, #7
    b530:	add	x0, x1, x0
    b534:	ldr	x0, [x0, #8]
    b538:	str	x0, [sp, #1152]
    b53c:	ldr	x0, [sp, #1176]
    b540:	add	x0, x0, #0x40
    b544:	add	x1, sp, #0x240
    b548:	ldr	x4, [sp, #1176]
    b54c:	mov	x3, x1
    b550:	mov	w2, #0xd                   	// #13
    b554:	ldr	x1, [sp, #1160]
    b558:	bl	7700 <dnode_get>
    b55c:	str	w0, [sp, #1172]
    b560:	ldr	w0, [sp, #1172]
    b564:	cmp	w0, #0x0
    b568:	b.eq	b57c <grub_zfs_dir+0x254>  // b.none
    b56c:	ldr	x0, [sp, #1176]
    b570:	bl	9d14 <zfs_unmount>
    b574:	ldr	w0, [sp, #1172]
    b578:	b	b710 <grub_zfs_dir+0x3e8>
    b57c:	add	x0, sp, #0x460
    b580:	add	x4, sp, #0x240
    b584:	mov	x3, x0
    b588:	ldr	x2, [sp, #1176]
    b58c:	adrp	x0, 0 <grub_swap_bytes16>
    b590:	add	x0, x0, #0x0
    b594:	ldr	x1, [x0]
    b598:	mov	x0, x4
    b59c:	bl	7344 <zap_iterate_u64>
    b5a0:	ldr	x0, [sp, #1176]
    b5a4:	add	x0, x0, #0x40
    b5a8:	add	x1, sp, #0x240
    b5ac:	ldr	x4, [sp, #1176]
    b5b0:	mov	x3, x1
    b5b4:	mov	w2, #0x10                  	// #16
    b5b8:	ldr	x1, [sp, #1152]
    b5bc:	bl	7700 <dnode_get>
    b5c0:	str	w0, [sp, #1172]
    b5c4:	ldr	w0, [sp, #1172]
    b5c8:	cmp	w0, #0x0
    b5cc:	b.eq	b5e0 <grub_zfs_dir+0x2b8>  // b.none
    b5d0:	ldr	x0, [sp, #1176]
    b5d4:	bl	9d14 <zfs_unmount>
    b5d8:	ldr	w0, [sp, #1172]
    b5dc:	b	b710 <grub_zfs_dir+0x3e8>
    b5e0:	ldr	w0, [sp, #1088]
    b5e4:	cmp	w0, #0x0
    b5e8:	b.ne	b614 <grub_zfs_dir+0x2ec>  // b.any
    b5ec:	ldrb	w0, [sp, #579]
    b5f0:	sub	w0, w0, #0x1
    b5f4:	sxtw	x0, w0
    b5f8:	lsl	x0, x0, #7
    b5fc:	add	x1, sp, #0x240
    b600:	add	x1, x1, #0xc0
    b604:	add	x0, x1, x0
    b608:	ldr	x0, [x0, #32]
    b60c:	bl	50 <grub_swap_bytes64>
    b610:	b	b634 <grub_zfs_dir+0x30c>
    b614:	ldrb	w0, [sp, #579]
    b618:	sub	w0, w0, #0x1
    b61c:	sxtw	x0, w0
    b620:	lsl	x0, x0, #7
    b624:	add	x1, sp, #0x240
    b628:	add	x1, x1, #0xc0
    b62c:	add	x0, x1, x0
    b630:	ldr	x0, [x0, #32]
    b634:	str	x0, [sp, #1144]
    b638:	ldr	x0, [sp, #1176]
    b63c:	add	x0, x0, #0x40
    b640:	add	x1, sp, #0x240
    b644:	ldr	x4, [sp, #1176]
    b648:	mov	x3, x1
    b64c:	mov	w2, #0xe                   	// #14
    b650:	ldr	x1, [sp, #1144]
    b654:	bl	7700 <dnode_get>
    b658:	str	w0, [sp, #1172]
    b65c:	ldr	w0, [sp, #1172]
    b660:	cmp	w0, #0x0
    b664:	b.eq	b678 <grub_zfs_dir+0x350>  // b.none
    b668:	ldr	x0, [sp, #1176]
    b66c:	bl	9d14 <zfs_unmount>
    b670:	ldr	w0, [sp, #1172]
    b674:	b	b710 <grub_zfs_dir+0x3e8>
    b678:	add	x0, sp, #0x460
    b67c:	add	x4, sp, #0x240
    b680:	mov	x3, x0
    b684:	ldr	x2, [sp, #1176]
    b688:	adrp	x0, 0 <grub_swap_bytes16>
    b68c:	add	x0, x0, #0x0
    b690:	ldr	x1, [x0]
    b694:	mov	x0, x4
    b698:	bl	7344 <zap_iterate_u64>
    b69c:	b	b6f8 <grub_zfs_dir+0x3d0>
    b6a0:	ldr	x0, [sp, #1176]
    b6a4:	ldrb	w0, [x0, #584]
    b6a8:	cmp	w0, #0x14
    b6ac:	b.eq	b6d0 <grub_zfs_dir+0x3a8>  // b.none
    b6b0:	ldr	x0, [sp, #1176]
    b6b4:	bl	9d14 <zfs_unmount>
    b6b8:	adrp	x0, 0 <grub_swap_bytes16>
    b6bc:	add	x0, x0, #0x0
    b6c0:	ldr	x1, [x0]
    b6c4:	mov	w0, #0x4                   	// #4
    b6c8:	bl	0 <grub_error>
    b6cc:	b	b710 <grub_zfs_dir+0x3e8>
    b6d0:	ldr	x0, [sp, #1176]
    b6d4:	add	x4, x0, #0x248
    b6d8:	add	x0, sp, #0x460
    b6dc:	mov	x3, x0
    b6e0:	ldr	x2, [sp, #1176]
    b6e4:	adrp	x0, 0 <grub_swap_bytes16>
    b6e8:	add	x0, x0, #0x0
    b6ec:	ldr	x1, [x0]
    b6f0:	mov	x0, x4
    b6f4:	bl	7344 <zap_iterate_u64>
    b6f8:	ldr	x0, [sp, #1176]
    b6fc:	bl	9d14 <zfs_unmount>
    b700:	adrp	x0, 0 <grub_swap_bytes16>
    b704:	add	x0, x0, #0x0
    b708:	ldr	x0, [x0]
    b70c:	ldr	w0, [x0]
    b710:	ldp	x29, x30, [sp]
    b714:	add	sp, sp, #0x4a0
    b718:	ret
    b71c:	nop
	...

000000000000b750 <check_feature>:
    b750:	stp	x29, x30, [sp, #-64]!
    b754:	mov	x29, sp
    b758:	str	x0, [sp, #40]
    b75c:	str	x1, [sp, #32]
    b760:	str	x2, [sp, #24]
    b764:	ldr	x0, [sp, #32]
    b768:	cmp	x0, #0x0
    b76c:	b.ne	b778 <check_feature+0x28>  // b.any
    b770:	mov	w0, #0x0                   	// #0
    b774:	b	b7f4 <check_feature+0xa4>
    b778:	ldr	x0, [sp, #40]
    b77c:	ldrb	w0, [x0]
    b780:	cmp	w0, #0x0
    b784:	b.ne	b790 <check_feature+0x40>  // b.any
    b788:	mov	w0, #0x0                   	// #0
    b78c:	b	b7f4 <check_feature+0xa4>
    b790:	str	wzr, [sp, #60]
    b794:	b	b7d4 <check_feature+0x84>
    b798:	adrp	x0, 0 <grub_swap_bytes16>
    b79c:	add	x0, x0, #0x0
    b7a0:	ldr	x0, [x0]
    b7a4:	ldrsw	x1, [sp, #60]
    b7a8:	ldr	x0, [x0, x1, lsl #3]
    b7ac:	mov	x1, x0
    b7b0:	ldr	x0, [sp, #40]
    b7b4:	bl	0 <grub_strcmp>
    b7b8:	cmp	w0, #0x0
    b7bc:	b.ne	b7c8 <check_feature+0x78>  // b.any
    b7c0:	mov	w0, #0x0                   	// #0
    b7c4:	b	b7f4 <check_feature+0xa4>
    b7c8:	ldr	w0, [sp, #60]
    b7cc:	add	w0, w0, #0x1
    b7d0:	str	w0, [sp, #60]
    b7d4:	adrp	x0, 0 <grub_swap_bytes16>
    b7d8:	add	x0, x0, #0x0
    b7dc:	ldr	x0, [x0]
    b7e0:	ldrsw	x1, [sp, #60]
    b7e4:	ldr	x0, [x0, x1, lsl #3]
    b7e8:	cmp	x0, #0x0
    b7ec:	b.ne	b798 <check_feature+0x48>  // b.any
    b7f0:	mov	w0, #0x1                   	// #1
    b7f4:	ldp	x29, x30, [sp], #64
    b7f8:	ret
    b7fc:	nop
	...

000000000000b808 <check_mos_features>:
    b808:	sub	sp, sp, #0x460
    b80c:	stp	x29, x30, [sp]
    b810:	mov	x29, sp
    b814:	str	x0, [sp, #40]
    b818:	str	w1, [sp, #36]
    b81c:	str	x2, [sp, #24]
    b820:	str	wzr, [sp, #1116]
    b824:	add	x0, sp, #0x40
    b828:	mov	x2, #0x200                 	// #512
    b82c:	ldr	x1, [sp, #40]
    b830:	bl	0 <grub_memmove>
    b834:	ldr	w0, [sp, #36]
    b838:	str	w0, [sp, #576]
    b83c:	add	x1, sp, #0x248
    b840:	add	x0, sp, #0x40
    b844:	ldr	x4, [sp, #24]
    b848:	mov	x3, x1
    b84c:	mov	w2, #0x1                   	// #1
    b850:	mov	x1, #0x1                   	// #1
    b854:	bl	7700 <dnode_get>
    b858:	str	w0, [sp, #1116]
    b85c:	ldr	w0, [sp, #1116]
    b860:	cmp	w0, #0x0
    b864:	b.eq	b870 <check_mos_features+0x68>  // b.none
    b868:	ldr	w0, [sp, #1116]
    b86c:	b	b96c <check_mos_features+0x164>
    b870:	add	x0, sp, #0x450
    b874:	add	x5, sp, #0x248
    b878:	mov	w4, #0x0                   	// #0
    b87c:	ldr	x3, [sp, #24]
    b880:	mov	x2, x0
    b884:	adrp	x0, 0 <grub_swap_bytes16>
    b888:	add	x0, x0, #0x0
    b88c:	ldr	x1, [x0]
    b890:	mov	x0, x5
    b894:	bl	7018 <zap_lookup>
    b898:	str	w0, [sp, #1116]
    b89c:	ldr	w0, [sp, #1116]
    b8a0:	cmp	w0, #0x0
    b8a4:	b.eq	b8b0 <check_mos_features+0xa8>  // b.none
    b8a8:	ldr	w0, [sp, #1116]
    b8ac:	b	b96c <check_mos_features+0x164>
    b8b0:	ldr	x1, [sp, #1104]
    b8b4:	add	x2, sp, #0x248
    b8b8:	add	x0, sp, #0x40
    b8bc:	ldr	x4, [sp, #24]
    b8c0:	mov	x3, x2
    b8c4:	mov	w2, #0xffffffc4            	// #-60
    b8c8:	bl	7700 <dnode_get>
    b8cc:	str	w0, [sp, #1116]
    b8d0:	ldr	w0, [sp, #1116]
    b8d4:	cmp	w0, #0x0
    b8d8:	b.eq	b8e4 <check_mos_features+0xdc>  // b.none
    b8dc:	ldr	w0, [sp, #1116]
    b8e0:	b	b96c <check_mos_features+0x164>
    b8e4:	add	x2, sp, #0x34
    b8e8:	add	x1, sp, #0x38
    b8ec:	add	x0, sp, #0x248
    b8f0:	ldr	x4, [sp, #24]
    b8f4:	mov	x3, x2
    b8f8:	mov	x2, x1
    b8fc:	mov	x1, #0x0                   	// #0
    b900:	bl	5780 <dmu_read>
    b904:	str	w0, [sp, #1116]
    b908:	ldr	w0, [sp, #1116]
    b90c:	cmp	w0, #0x0
    b910:	b.eq	b91c <check_mos_features+0x114>  // b.none
    b914:	ldr	w0, [sp, #1116]
    b918:	b	b96c <check_mos_features+0x164>
    b91c:	ldr	w0, [sp, #1096]
    b920:	cmp	w0, #0x0
    b924:	b.ne	b93c <check_mos_features+0x134>  // b.any
    b928:	ldrh	w0, [sp, #592]
    b92c:	bl	0 <grub_swap_bytes16>
    b930:	and	w0, w0, #0xffff
    b934:	lsl	w0, w0, #9
    b938:	b	b944 <check_mos_features+0x13c>
    b93c:	ldrh	w0, [sp, #592]
    b940:	lsl	w0, w0, #9
    b944:	str	w0, [sp, #1112]
    b948:	ldr	x5, [sp, #56]
    b94c:	ldr	w1, [sp, #52]
    b950:	mov	x4, #0x0                   	// #0
    b954:	adrp	x0, 0 <grub_swap_bytes16>
    b958:	add	x0, x0, #0x0
    b95c:	ldr	x3, [x0]
    b960:	ldr	w2, [sp, #1112]
    b964:	mov	x0, x5
    b968:	bl	5ce0 <mzap_iterate>
    b96c:	ldp	x29, x30, [sp]
    b970:	add	sp, sp, #0x460
    b974:	ret
	...

000000000000b988 <grub_mod_init>:
    b988:	stp	x29, x30, [sp, #-32]!
    b98c:	mov	x29, sp
    b990:	str	x0, [sp, #24]
    b994:	adrp	x0, 0 <grub_swap_bytes16>
    b998:	add	x0, x0, #0x0
    b99c:	ldr	x0, [x0]
    b9a0:	bl	a8 <grub_fs_register>
    b9a4:	adrp	x0, 0 <grub_swap_bytes16>
    b9a8:	add	x0, x0, #0x0
    b9ac:	ldr	x0, [x0]
    b9b0:	ldr	x1, [sp, #24]
    b9b4:	str	x1, [x0]
    b9b8:	nop
    b9bc:	ldp	x29, x30, [sp], #32
    b9c0:	ret
    b9c4:	nop
	...

000000000000b9d8 <grub_mod_fini>:
    b9d8:	stp	x29, x30, [sp, #-16]!
    b9dc:	mov	x29, sp
    b9e0:	adrp	x0, 0 <grub_swap_bytes16>
    b9e4:	add	x0, x0, #0x0
    b9e8:	ldr	x0, [x0]
    b9ec:	bl	e0 <grub_fs_unregister>
    b9f0:	nop
    b9f4:	ldp	x29, x30, [sp], #16
    b9f8:	ret
    b9fc:	nop
	...

000000000000ba08 <lzjb_decompress>:
    ba08:	stp	x29, x30, [sp, #-112]!
    ba0c:	mov	x29, sp
    ba10:	str	x0, [sp, #40]
    ba14:	str	x1, [sp, #32]
    ba18:	str	x2, [sp, #24]
    ba1c:	str	x3, [sp, #16]
    ba20:	ldr	x0, [sp, #40]
    ba24:	str	x0, [sp, #104]
    ba28:	ldr	x0, [sp, #32]
    ba2c:	str	x0, [sp, #96]
    ba30:	ldr	x1, [sp, #32]
    ba34:	ldr	x0, [sp, #16]
    ba38:	add	x0, x1, x0
    ba3c:	str	x0, [sp, #64]
    ba40:	ldr	x1, [sp, #40]
    ba44:	ldr	x0, [sp, #24]
    ba48:	add	x0, x1, x0
    ba4c:	str	x0, [sp, #56]
    ba50:	strb	wzr, [sp, #87]
    ba54:	mov	w0, #0x80                  	// #128
    ba58:	str	w0, [sp, #80]
    ba5c:	b	bbd0 <lzjb_decompress+0x1c8>
    ba60:	ldr	w0, [sp, #80]
    ba64:	lsl	w0, w0, #1
    ba68:	str	w0, [sp, #80]
    ba6c:	ldr	w0, [sp, #80]
    ba70:	cmp	w0, #0x100
    ba74:	b.ne	ba94 <lzjb_decompress+0x8c>  // b.any
    ba78:	mov	w0, #0x1                   	// #1
    ba7c:	str	w0, [sp, #80]
    ba80:	ldr	x0, [sp, #104]
    ba84:	add	x1, x0, #0x1
    ba88:	str	x1, [sp, #104]
    ba8c:	ldrb	w0, [x0]
    ba90:	strb	w0, [sp, #87]
    ba94:	ldr	x1, [sp, #104]
    ba98:	ldr	x0, [sp, #56]
    ba9c:	cmp	x1, x0
    baa0:	b.cc	babc <lzjb_decompress+0xb4>  // b.lo, b.ul, b.last
    baa4:	adrp	x0, 0 <grub_swap_bytes16>
    baa8:	add	x0, x0, #0x0
    baac:	ldr	x1, [x0]
    bab0:	mov	w0, #0x9                   	// #9
    bab4:	bl	0 <grub_error>
    bab8:	b	bc1c <lzjb_decompress+0x214>
    babc:	ldrb	w1, [sp, #87]
    bac0:	ldr	w0, [sp, #80]
    bac4:	and	w0, w1, w0
    bac8:	cmp	w0, #0x0
    bacc:	b.eq	bbb0 <lzjb_decompress+0x1a8>  // b.none
    bad0:	ldr	x0, [sp, #104]
    bad4:	ldrb	w0, [x0]
    bad8:	lsr	w0, w0, #2
    badc:	and	w0, w0, #0xff
    bae0:	add	w0, w0, #0x3
    bae4:	str	w0, [sp, #76]
    bae8:	ldr	x0, [sp, #104]
    baec:	ldrb	w0, [x0]
    baf0:	lsl	w0, w0, #8
    baf4:	ldr	x1, [sp, #104]
    baf8:	add	x1, x1, #0x1
    bafc:	ldrb	w1, [x1]
    bb00:	orr	w0, w0, w1
    bb04:	and	w0, w0, #0x3ff
    bb08:	str	w0, [sp, #52]
    bb0c:	ldr	x0, [sp, #104]
    bb10:	add	x0, x0, #0x2
    bb14:	str	x0, [sp, #104]
    bb18:	ldrsw	x0, [sp, #52]
    bb1c:	neg	x0, x0
    bb20:	ldr	x1, [sp, #96]
    bb24:	add	x0, x1, x0
    bb28:	str	x0, [sp, #88]
    bb2c:	ldr	x1, [sp, #104]
    bb30:	ldr	x0, [sp, #56]
    bb34:	cmp	x1, x0
    bb38:	b.hi	bb4c <lzjb_decompress+0x144>  // b.pmore
    bb3c:	ldr	x1, [sp, #88]
    bb40:	ldr	x0, [sp, #32]
    bb44:	cmp	x1, x0
    bb48:	b.cs	bb84 <lzjb_decompress+0x17c>  // b.hs, b.nlast
    bb4c:	adrp	x0, 0 <grub_swap_bytes16>
    bb50:	add	x0, x0, #0x0
    bb54:	ldr	x1, [x0]
    bb58:	mov	w0, #0x9                   	// #9
    bb5c:	bl	0 <grub_error>
    bb60:	b	bc1c <lzjb_decompress+0x214>
    bb64:	ldr	x1, [sp, #88]
    bb68:	add	x0, x1, #0x1
    bb6c:	str	x0, [sp, #88]
    bb70:	ldr	x0, [sp, #96]
    bb74:	add	x2, x0, #0x1
    bb78:	str	x2, [sp, #96]
    bb7c:	ldrb	w1, [x1]
    bb80:	strb	w1, [x0]
    bb84:	ldr	w0, [sp, #76]
    bb88:	sub	w0, w0, #0x1
    bb8c:	str	w0, [sp, #76]
    bb90:	ldr	w0, [sp, #76]
    bb94:	cmp	w0, #0x0
    bb98:	b.lt	bbd0 <lzjb_decompress+0x1c8>  // b.tstop
    bb9c:	ldr	x1, [sp, #96]
    bba0:	ldr	x0, [sp, #64]
    bba4:	cmp	x1, x0
    bba8:	b.cc	bb64 <lzjb_decompress+0x15c>  // b.lo, b.ul, b.last
    bbac:	b	bbd0 <lzjb_decompress+0x1c8>
    bbb0:	ldr	x1, [sp, #104]
    bbb4:	add	x0, x1, #0x1
    bbb8:	str	x0, [sp, #104]
    bbbc:	ldr	x0, [sp, #96]
    bbc0:	add	x2, x0, #0x1
    bbc4:	str	x2, [sp, #96]
    bbc8:	ldrb	w1, [x1]
    bbcc:	strb	w1, [x0]
    bbd0:	ldr	x1, [sp, #96]
    bbd4:	ldr	x0, [sp, #64]
    bbd8:	cmp	x1, x0
    bbdc:	b.cs	bbf0 <lzjb_decompress+0x1e8>  // b.hs, b.nlast
    bbe0:	ldr	x1, [sp, #104]
    bbe4:	ldr	x0, [sp, #56]
    bbe8:	cmp	x1, x0
    bbec:	b.cc	ba60 <lzjb_decompress+0x58>  // b.lo, b.ul, b.last
    bbf0:	ldr	x1, [sp, #96]
    bbf4:	ldr	x0, [sp, #64]
    bbf8:	cmp	x1, x0
    bbfc:	b.cs	bc18 <lzjb_decompress+0x210>  // b.hs, b.nlast
    bc00:	adrp	x0, 0 <grub_swap_bytes16>
    bc04:	add	x0, x0, #0x0
    bc08:	ldr	x1, [x0]
    bc0c:	mov	w0, #0x9                   	// #9
    bc10:	bl	0 <grub_error>
    bc14:	b	bc1c <lzjb_decompress+0x214>
    bc18:	mov	w0, #0x0                   	// #0
    bc1c:	ldp	x29, x30, [sp], #112
    bc20:	ret
    bc24:	nop
	...

000000000000bc30 <grub_memcpy>:
    bc30:	stp	x29, x30, [sp, #-48]!
    bc34:	mov	x29, sp
    bc38:	str	x0, [sp, #40]
    bc3c:	str	x1, [sp, #32]
    bc40:	str	x2, [sp, #24]
    bc44:	ldr	x2, [sp, #24]
    bc48:	ldr	x1, [sp, #32]
    bc4c:	ldr	x0, [sp, #40]
    bc50:	bl	0 <grub_memmove>
    bc54:	ldp	x29, x30, [sp], #48
    bc58:	ret

000000000000bc5c <lz4_decompress>:
    bc5c:	stp	x29, x30, [sp, #-64]!
    bc60:	mov	x29, sp
    bc64:	str	x0, [sp, #40]
    bc68:	str	x1, [sp, #32]
    bc6c:	str	x2, [sp, #24]
    bc70:	str	x3, [sp, #16]
    bc74:	ldr	x0, [sp, #40]
    bc78:	str	x0, [sp, #56]
    bc7c:	ldr	x0, [sp, #56]
    bc80:	ldrb	w0, [x0]
    bc84:	lsl	w1, w0, #24
    bc88:	ldr	x0, [sp, #56]
    bc8c:	add	x0, x0, #0x1
    bc90:	ldrb	w0, [x0]
    bc94:	lsl	w0, w0, #16
    bc98:	orr	w1, w1, w0
    bc9c:	ldr	x0, [sp, #56]
    bca0:	add	x0, x0, #0x2
    bca4:	ldrb	w0, [x0]
    bca8:	lsl	w0, w0, #8
    bcac:	orr	w0, w1, w0
    bcb0:	ldr	x1, [sp, #56]
    bcb4:	add	x1, x1, #0x3
    bcb8:	ldrb	w1, [x1]
    bcbc:	orr	w0, w0, w1
    bcc0:	str	w0, [sp, #52]
    bcc4:	ldr	w0, [sp, #52]
    bcc8:	add	w0, w0, #0x4
    bccc:	mov	w0, w0
    bcd0:	ldr	x1, [sp, #24]
    bcd4:	cmp	x1, x0
    bcd8:	b.cs	bcf4 <lz4_decompress+0x98>  // b.hs, b.nlast
    bcdc:	adrp	x0, 0 <grub_swap_bytes16>
    bce0:	add	x0, x0, #0x0
    bce4:	ldr	x1, [x0]
    bce8:	mov	w0, #0x9                   	// #9
    bcec:	bl	0 <grub_error>
    bcf0:	b	bd38 <lz4_decompress+0xdc>
    bcf4:	ldr	x0, [sp, #40]
    bcf8:	add	x0, x0, #0x4
    bcfc:	ldr	w1, [sp, #52]
    bd00:	ldr	x2, [sp, #16]
    bd04:	mov	w3, w2
    bd08:	mov	w2, w1
    bd0c:	ldr	x1, [sp, #32]
    bd10:	bl	bd48 <LZ4_uncompress_unknownOutputSize>
    bd14:	cmp	w0, #0x0
    bd18:	b.ge	bd34 <lz4_decompress+0xd8>  // b.tcont
    bd1c:	adrp	x0, 0 <grub_swap_bytes16>
    bd20:	add	x0, x0, #0x0
    bd24:	ldr	x1, [x0]
    bd28:	mov	w0, #0x9                   	// #9
    bd2c:	bl	0 <grub_error>
    bd30:	b	bd38 <lz4_decompress+0xdc>
    bd34:	mov	w0, #0x0                   	// #0
    bd38:	ldp	x29, x30, [sp], #64
    bd3c:	ret
	...

000000000000bd48 <LZ4_uncompress_unknownOutputSize>:
    bd48:	stp	x29, x30, [sp, #-256]!
    bd4c:	mov	x29, sp
    bd50:	str	x0, [sp, #40]
    bd54:	str	x1, [sp, #32]
    bd58:	str	w2, [sp, #28]
    bd5c:	str	w3, [sp, #24]
    bd60:	ldr	x0, [sp, #40]
    bd64:	str	x0, [sp, #248]
    bd68:	ldrsw	x0, [sp, #28]
    bd6c:	ldr	x1, [sp, #248]
    bd70:	add	x0, x1, x0
    bd74:	str	x0, [sp, #216]
    bd78:	ldr	x0, [sp, #32]
    bd7c:	str	x0, [sp, #232]
    bd80:	ldrsw	x0, [sp, #24]
    bd84:	ldr	x1, [sp, #232]
    bd88:	add	x0, x1, x0
    bd8c:	str	x0, [sp, #208]
    bd90:	adrp	x0, 0 <grub_swap_bytes16>
    bd94:	add	x0, x0, #0x0
    bd98:	ldr	x1, [x0]
    bd9c:	add	x0, sp, #0x70
    bda0:	ldp	x2, x3, [x1]
    bda4:	stp	x2, x3, [x0]
    bda8:	ldp	x2, x3, [x1, #16]
    bdac:	stp	x2, x3, [x0, #16]
    bdb0:	ldp	x2, x3, [x1, #32]
    bdb4:	stp	x2, x3, [x0, #32]
    bdb8:	ldp	x2, x3, [x1, #48]
    bdbc:	stp	x2, x3, [x0, #48]
    bdc0:	b	c29c <LZ4_uncompress_unknownOutputSize+0x554>
    bdc4:	ldr	x0, [sp, #248]
    bdc8:	add	x1, x0, #0x1
    bdcc:	str	x1, [sp, #248]
    bdd0:	ldrb	w0, [x0]
    bdd4:	strb	w0, [sp, #207]
    bdd8:	ldrb	w0, [sp, #207]
    bddc:	lsr	w0, w0, #4
    bde0:	and	w0, w0, #0xff
    bde4:	str	w0, [sp, #228]
    bde8:	ldr	w0, [sp, #228]
    bdec:	cmp	w0, #0xf
    bdf0:	b.ne	be40 <LZ4_uncompress_unknownOutputSize+0xf8>  // b.any
    bdf4:	mov	w0, #0xff                  	// #255
    bdf8:	str	w0, [sp, #224]
    bdfc:	b	be24 <LZ4_uncompress_unknownOutputSize+0xdc>
    be00:	ldr	x0, [sp, #248]
    be04:	add	x1, x0, #0x1
    be08:	str	x1, [sp, #248]
    be0c:	ldrb	w0, [x0]
    be10:	str	w0, [sp, #224]
    be14:	ldr	w1, [sp, #228]
    be18:	ldr	w0, [sp, #224]
    be1c:	add	w0, w1, w0
    be20:	str	w0, [sp, #228]
    be24:	ldr	x1, [sp, #248]
    be28:	ldr	x0, [sp, #216]
    be2c:	cmp	x1, x0
    be30:	b.cs	be40 <LZ4_uncompress_unknownOutputSize+0xf8>  // b.hs, b.nlast
    be34:	ldr	w0, [sp, #224]
    be38:	cmp	w0, #0xff
    be3c:	b.eq	be00 <LZ4_uncompress_unknownOutputSize+0xb8>  // b.none
    be40:	ldrsw	x1, [sp, #228]
    be44:	ldr	x0, [sp, #232]
    be48:	mvn	x0, x0
    be4c:	cmp	x1, x0
    be50:	b.hi	c2cc <LZ4_uncompress_unknownOutputSize+0x584>  // b.pmore
    be54:	ldrsw	x0, [sp, #228]
    be58:	ldr	x1, [sp, #232]
    be5c:	add	x0, x1, x0
    be60:	str	x0, [sp, #192]
    be64:	ldr	x0, [sp, #208]
    be68:	sub	x0, x0, #0x8
    be6c:	ldr	x1, [sp, #192]
    be70:	cmp	x1, x0
    be74:	b.hi	be94 <LZ4_uncompress_unknownOutputSize+0x14c>  // b.pmore
    be78:	ldrsw	x0, [sp, #228]
    be7c:	ldr	x1, [sp, #248]
    be80:	add	x1, x1, x0
    be84:	ldr	x0, [sp, #216]
    be88:	sub	x0, x0, #0x8
    be8c:	cmp	x1, x0
    be90:	b.ls	bf04 <LZ4_uncompress_unknownOutputSize+0x1bc>  // b.plast
    be94:	ldr	x1, [sp, #192]
    be98:	ldr	x0, [sp, #208]
    be9c:	cmp	x1, x0
    bea0:	b.hi	c2d4 <LZ4_uncompress_unknownOutputSize+0x58c>  // b.pmore
    bea4:	ldrsw	x0, [sp, #228]
    bea8:	ldr	x1, [sp, #248]
    beac:	add	x0, x1, x0
    beb0:	ldr	x1, [sp, #216]
    beb4:	cmp	x1, x0
    beb8:	b.cc	c2dc <LZ4_uncompress_unknownOutputSize+0x594>  // b.lo, b.ul, b.last
    bebc:	ldrsw	x0, [sp, #228]
    bec0:	mov	x2, x0
    bec4:	ldr	x1, [sp, #248]
    bec8:	ldr	x0, [sp, #232]
    becc:	bl	bc30 <grub_memcpy>
    bed0:	ldrsw	x0, [sp, #228]
    bed4:	ldr	x1, [sp, #232]
    bed8:	add	x0, x1, x0
    bedc:	str	x0, [sp, #232]
    bee0:	ldrsw	x0, [sp, #228]
    bee4:	ldr	x1, [sp, #248]
    bee8:	add	x0, x1, x0
    beec:	str	x0, [sp, #248]
    bef0:	ldr	x1, [sp, #248]
    bef4:	ldr	x0, [sp, #216]
    bef8:	cmp	x1, x0
    befc:	b.cs	c2b0 <LZ4_uncompress_unknownOutputSize+0x568>  // b.hs, b.nlast
    bf00:	b	c2f0 <LZ4_uncompress_unknownOutputSize+0x5a8>
    bf04:	ldr	x0, [sp, #248]
    bf08:	ldr	x1, [x0]
    bf0c:	ldr	x0, [sp, #232]
    bf10:	str	x1, [x0]
    bf14:	ldr	x0, [sp, #232]
    bf18:	add	x0, x0, #0x8
    bf1c:	str	x0, [sp, #232]
    bf20:	ldr	x0, [sp, #248]
    bf24:	add	x0, x0, #0x8
    bf28:	str	x0, [sp, #248]
    bf2c:	ldr	x1, [sp, #232]
    bf30:	ldr	x0, [sp, #192]
    bf34:	cmp	x1, x0
    bf38:	b.cc	bf04 <LZ4_uncompress_unknownOutputSize+0x1bc>  // b.lo, b.ul, b.last
    bf3c:	ldr	x1, [sp, #232]
    bf40:	ldr	x0, [sp, #192]
    bf44:	sub	x0, x1, x0
    bf48:	neg	x0, x0
    bf4c:	ldr	x1, [sp, #248]
    bf50:	add	x0, x1, x0
    bf54:	str	x0, [sp, #248]
    bf58:	ldr	x0, [sp, #192]
    bf5c:	str	x0, [sp, #232]
    bf60:	ldr	x0, [sp, #248]
    bf64:	ldrh	w0, [x0]
    bf68:	and	x0, x0, #0xffff
    bf6c:	neg	x0, x0
    bf70:	ldr	x1, [sp, #192]
    bf74:	add	x0, x1, x0
    bf78:	str	x0, [sp, #240]
    bf7c:	ldr	x0, [sp, #248]
    bf80:	add	x0, x0, #0x2
    bf84:	str	x0, [sp, #248]
    bf88:	ldr	x1, [sp, #240]
    bf8c:	ldr	x0, [sp, #32]
    bf90:	cmp	x1, x0
    bf94:	b.cc	c2e4 <LZ4_uncompress_unknownOutputSize+0x59c>  // b.lo, b.ul, b.last
    bf98:	ldrb	w0, [sp, #207]
    bf9c:	and	w0, w0, #0xf
    bfa0:	str	w0, [sp, #228]
    bfa4:	ldr	w0, [sp, #228]
    bfa8:	cmp	w0, #0xf
    bfac:	b.ne	c000 <LZ4_uncompress_unknownOutputSize+0x2b8>  // b.any
    bfb0:	b	bfe8 <LZ4_uncompress_unknownOutputSize+0x2a0>
    bfb4:	ldr	x0, [sp, #248]
    bfb8:	add	x1, x0, #0x1
    bfbc:	str	x1, [sp, #248]
    bfc0:	ldrb	w0, [x0]
    bfc4:	str	w0, [sp, #188]
    bfc8:	ldr	w1, [sp, #228]
    bfcc:	ldr	w0, [sp, #188]
    bfd0:	add	w0, w1, w0
    bfd4:	str	w0, [sp, #228]
    bfd8:	ldr	w0, [sp, #188]
    bfdc:	cmp	w0, #0xff
    bfe0:	b.ne	bffc <LZ4_uncompress_unknownOutputSize+0x2b4>  // b.any
    bfe4:	nop
    bfe8:	ldr	x1, [sp, #248]
    bfec:	ldr	x0, [sp, #216]
    bff0:	cmp	x1, x0
    bff4:	b.cc	bfb4 <LZ4_uncompress_unknownOutputSize+0x26c>  // b.lo, b.ul, b.last
    bff8:	b	c000 <LZ4_uncompress_unknownOutputSize+0x2b8>
    bffc:	nop
    c000:	ldr	x1, [sp, #232]
    c004:	ldr	x0, [sp, #240]
    c008:	sub	x0, x1, x0
    c00c:	cmp	x0, #0x7
    c010:	cset	w0, le
    c014:	and	w0, w0, #0xff
    c018:	and	x0, x0, #0xff
    c01c:	cmp	x0, #0x0
    c020:	b.eq	c14c <LZ4_uncompress_unknownOutputSize+0x404>  // b.none
    c024:	adrp	x0, 0 <grub_swap_bytes16>
    c028:	add	x0, x0, #0x0
    c02c:	ldr	x1, [x0]
    c030:	add	x0, sp, #0x30
    c034:	ldp	x2, x3, [x1]
    c038:	stp	x2, x3, [x0]
    c03c:	ldp	x2, x3, [x1, #16]
    c040:	stp	x2, x3, [x0, #16]
    c044:	ldp	x2, x3, [x1, #32]
    c048:	stp	x2, x3, [x0, #32]
    c04c:	ldp	x2, x3, [x1, #48]
    c050:	stp	x2, x3, [x0, #48]
    c054:	ldr	x1, [sp, #232]
    c058:	ldr	x0, [sp, #240]
    c05c:	sub	x0, x1, x0
    c060:	lsl	x0, x0, #3
    c064:	add	x1, sp, #0x30
    c068:	ldr	x0, [x1, x0]
    c06c:	str	x0, [sp, #176]
    c070:	ldr	x1, [sp, #240]
    c074:	add	x0, x1, #0x1
    c078:	str	x0, [sp, #240]
    c07c:	ldr	x0, [sp, #232]
    c080:	add	x2, x0, #0x1
    c084:	str	x2, [sp, #232]
    c088:	ldrb	w1, [x1]
    c08c:	strb	w1, [x0]
    c090:	ldr	x1, [sp, #240]
    c094:	add	x0, x1, #0x1
    c098:	str	x0, [sp, #240]
    c09c:	ldr	x0, [sp, #232]
    c0a0:	add	x2, x0, #0x1
    c0a4:	str	x2, [sp, #232]
    c0a8:	ldrb	w1, [x1]
    c0ac:	strb	w1, [x0]
    c0b0:	ldr	x1, [sp, #240]
    c0b4:	add	x0, x1, #0x1
    c0b8:	str	x0, [sp, #240]
    c0bc:	ldr	x0, [sp, #232]
    c0c0:	add	x2, x0, #0x1
    c0c4:	str	x2, [sp, #232]
    c0c8:	ldrb	w1, [x1]
    c0cc:	strb	w1, [x0]
    c0d0:	ldr	x1, [sp, #240]
    c0d4:	add	x0, x1, #0x1
    c0d8:	str	x0, [sp, #240]
    c0dc:	ldr	x0, [sp, #232]
    c0e0:	add	x2, x0, #0x1
    c0e4:	str	x2, [sp, #232]
    c0e8:	ldrb	w1, [x1]
    c0ec:	strb	w1, [x0]
    c0f0:	ldr	x1, [sp, #232]
    c0f4:	ldr	x0, [sp, #240]
    c0f8:	sub	x0, x1, x0
    c0fc:	lsl	x0, x0, #3
    c100:	add	x1, sp, #0x70
    c104:	ldr	x0, [x1, x0]
    c108:	neg	x0, x0
    c10c:	ldr	x1, [sp, #240]
    c110:	add	x0, x1, x0
    c114:	str	x0, [sp, #240]
    c118:	ldr	x0, [sp, #240]
    c11c:	ldr	w1, [x0]
    c120:	ldr	x0, [sp, #232]
    c124:	str	w1, [x0]
    c128:	ldr	x0, [sp, #232]
    c12c:	add	x0, x0, #0x4
    c130:	str	x0, [sp, #232]
    c134:	ldr	x0, [sp, #176]
    c138:	neg	x0, x0
    c13c:	ldr	x1, [sp, #240]
    c140:	add	x0, x1, x0
    c144:	str	x0, [sp, #240]
    c148:	b	c174 <LZ4_uncompress_unknownOutputSize+0x42c>
    c14c:	ldr	x0, [sp, #240]
    c150:	ldr	x1, [x0]
    c154:	ldr	x0, [sp, #232]
    c158:	str	x1, [x0]
    c15c:	ldr	x0, [sp, #232]
    c160:	add	x0, x0, #0x8
    c164:	str	x0, [sp, #232]
    c168:	ldr	x0, [sp, #240]
    c16c:	add	x0, x0, #0x8
    c170:	str	x0, [sp, #240]
    c174:	ldrsw	x0, [sp, #228]
    c178:	sub	x0, x0, #0x4
    c17c:	ldr	x1, [sp, #232]
    c180:	add	x0, x1, x0
    c184:	str	x0, [sp, #192]
    c188:	ldr	x0, [sp, #208]
    c18c:	sub	x0, x0, #0x8
    c190:	ldr	x1, [sp, #192]
    c194:	cmp	x1, x0
    c198:	b.ls	c24c <LZ4_uncompress_unknownOutputSize+0x504>  // b.plast
    c19c:	ldr	x1, [sp, #192]
    c1a0:	ldr	x0, [sp, #208]
    c1a4:	cmp	x1, x0
    c1a8:	b.hi	c2ec <LZ4_uncompress_unknownOutputSize+0x5a4>  // b.pmore
    c1ac:	ldr	x0, [sp, #208]
    c1b0:	sub	x0, x0, #0x8
    c1b4:	ldr	x1, [sp, #232]
    c1b8:	cmp	x1, x0
    c1bc:	b.cs	c220 <LZ4_uncompress_unknownOutputSize+0x4d8>  // b.hs, b.nlast
    c1c0:	ldr	x0, [sp, #240]
    c1c4:	ldr	x1, [x0]
    c1c8:	ldr	x0, [sp, #232]
    c1cc:	str	x1, [x0]
    c1d0:	ldr	x0, [sp, #232]
    c1d4:	add	x0, x0, #0x8
    c1d8:	str	x0, [sp, #232]
    c1dc:	ldr	x0, [sp, #240]
    c1e0:	add	x0, x0, #0x8
    c1e4:	str	x0, [sp, #240]
    c1e8:	ldr	x0, [sp, #208]
    c1ec:	sub	x0, x0, #0x8
    c1f0:	ldr	x1, [sp, #232]
    c1f4:	cmp	x1, x0
    c1f8:	b.cc	c1c0 <LZ4_uncompress_unknownOutputSize+0x478>  // b.lo, b.ul, b.last
    c1fc:	b	c220 <LZ4_uncompress_unknownOutputSize+0x4d8>
    c200:	ldr	x1, [sp, #240]
    c204:	add	x0, x1, #0x1
    c208:	str	x0, [sp, #240]
    c20c:	ldr	x0, [sp, #232]
    c210:	add	x2, x0, #0x1
    c214:	str	x2, [sp, #232]
    c218:	ldrb	w1, [x1]
    c21c:	strb	w1, [x0]
    c220:	ldr	x1, [sp, #232]
    c224:	ldr	x0, [sp, #192]
    c228:	cmp	x1, x0
    c22c:	b.cc	c200 <LZ4_uncompress_unknownOutputSize+0x4b8>  // b.lo, b.ul, b.last
    c230:	ldr	x0, [sp, #192]
    c234:	str	x0, [sp, #232]
    c238:	ldr	x1, [sp, #232]
    c23c:	ldr	x0, [sp, #208]
    c240:	cmp	x1, x0
    c244:	b.eq	c2b8 <LZ4_uncompress_unknownOutputSize+0x570>  // b.none
    c248:	b	c29c <LZ4_uncompress_unknownOutputSize+0x554>
    c24c:	ldr	x1, [sp, #232]
    c250:	ldr	x0, [sp, #192]
    c254:	cmp	x1, x0
    c258:	b.cs	c294 <LZ4_uncompress_unknownOutputSize+0x54c>  // b.hs, b.nlast
    c25c:	ldr	x0, [sp, #240]
    c260:	ldr	x1, [x0]
    c264:	ldr	x0, [sp, #232]
    c268:	str	x1, [x0]
    c26c:	ldr	x0, [sp, #232]
    c270:	add	x0, x0, #0x8
    c274:	str	x0, [sp, #232]
    c278:	ldr	x0, [sp, #240]
    c27c:	add	x0, x0, #0x8
    c280:	str	x0, [sp, #240]
    c284:	ldr	x1, [sp, #232]
    c288:	ldr	x0, [sp, #192]
    c28c:	cmp	x1, x0
    c290:	b.cc	c25c <LZ4_uncompress_unknownOutputSize+0x514>  // b.lo, b.ul, b.last
    c294:	ldr	x0, [sp, #192]
    c298:	str	x0, [sp, #232]
    c29c:	ldr	x1, [sp, #248]
    c2a0:	ldr	x0, [sp, #216]
    c2a4:	cmp	x1, x0
    c2a8:	b.cc	bdc4 <LZ4_uncompress_unknownOutputSize+0x7c>  // b.lo, b.ul, b.last
    c2ac:	b	c2bc <LZ4_uncompress_unknownOutputSize+0x574>
    c2b0:	nop
    c2b4:	b	c2bc <LZ4_uncompress_unknownOutputSize+0x574>
    c2b8:	nop
    c2bc:	ldr	x1, [sp, #232]
    c2c0:	ldr	x0, [sp, #32]
    c2c4:	sub	x0, x1, x0
    c2c8:	b	c300 <LZ4_uncompress_unknownOutputSize+0x5b8>
    c2cc:	nop
    c2d0:	b	c2f0 <LZ4_uncompress_unknownOutputSize+0x5a8>
    c2d4:	nop
    c2d8:	b	c2f0 <LZ4_uncompress_unknownOutputSize+0x5a8>
    c2dc:	nop
    c2e0:	b	c2f0 <LZ4_uncompress_unknownOutputSize+0x5a8>
    c2e4:	nop
    c2e8:	b	c2f0 <LZ4_uncompress_unknownOutputSize+0x5a8>
    c2ec:	nop
    c2f0:	ldr	x1, [sp, #248]
    c2f4:	ldr	x0, [sp, #40]
    c2f8:	sub	x0, x1, x0
    c2fc:	neg	w0, w0
    c300:	ldp	x29, x30, [sp], #256
    c304:	ret
	...

000000000000c318 <grub_swap_bytes64>:
    c318:	sub	sp, sp, #0x10
    c31c:	str	x0, [sp, #8]
    c320:	ldr	x0, [sp, #8]
    c324:	rev	x0, x0
    c328:	add	sp, sp, #0x10
    c32c:	ret

000000000000c330 <SHA256Transform>:
    c330:	sub	sp, sp, #0x140
    c334:	str	x0, [sp, #8]
    c338:	str	x1, [sp]
    c33c:	str	wzr, [sp, #284]
    c340:	b	c3b4 <SHA256Transform+0x84>
    c344:	ldr	x0, [sp]
    c348:	ldrb	w0, [x0]
    c34c:	lsl	w1, w0, #24
    c350:	ldr	x0, [sp]
    c354:	add	x0, x0, #0x1
    c358:	ldrb	w0, [x0]
    c35c:	lsl	w0, w0, #16
    c360:	orr	w1, w1, w0
    c364:	ldr	x0, [sp]
    c368:	add	x0, x0, #0x2
    c36c:	ldrb	w0, [x0]
    c370:	lsl	w0, w0, #8
    c374:	orr	w0, w1, w0
    c378:	ldr	x1, [sp]
    c37c:	add	x1, x1, #0x3
    c380:	ldrb	w1, [x1]
    c384:	orr	w0, w0, w1
    c388:	mov	w2, w0
    c38c:	ldr	w0, [sp, #284]
    c390:	lsl	x0, x0, #2
    c394:	add	x1, sp, #0x10
    c398:	str	w2, [x1, x0]
    c39c:	ldr	w0, [sp, #284]
    c3a0:	add	w0, w0, #0x1
    c3a4:	str	w0, [sp, #284]
    c3a8:	ldr	x0, [sp]
    c3ac:	add	x0, x0, #0x4
    c3b0:	str	x0, [sp]
    c3b4:	ldr	w0, [sp, #284]
    c3b8:	cmp	w0, #0xf
    c3bc:	b.ls	c344 <SHA256Transform+0x14>  // b.plast
    c3c0:	mov	w0, #0x10                  	// #16
    c3c4:	str	w0, [sp, #284]
    c3c8:	b	c4dc <SHA256Transform+0x1ac>
    c3cc:	ldr	w0, [sp, #284]
    c3d0:	sub	w0, w0, #0x2
    c3d4:	mov	w0, w0
    c3d8:	lsl	x0, x0, #2
    c3dc:	add	x1, sp, #0x10
    c3e0:	ldr	w0, [x1, x0]
    c3e4:	ror	w1, w0, #17
    c3e8:	ldr	w0, [sp, #284]
    c3ec:	sub	w0, w0, #0x2
    c3f0:	mov	w0, w0
    c3f4:	lsl	x0, x0, #2
    c3f8:	add	x2, sp, #0x10
    c3fc:	ldr	w0, [x2, x0]
    c400:	ror	w0, w0, #19
    c404:	eor	w1, w1, w0
    c408:	ldr	w0, [sp, #284]
    c40c:	sub	w0, w0, #0x2
    c410:	mov	w0, w0
    c414:	lsl	x0, x0, #2
    c418:	add	x2, sp, #0x10
    c41c:	ldr	w0, [x2, x0]
    c420:	lsr	w0, w0, #10
    c424:	eor	w1, w1, w0
    c428:	ldr	w0, [sp, #284]
    c42c:	sub	w0, w0, #0x7
    c430:	mov	w0, w0
    c434:	lsl	x0, x0, #2
    c438:	add	x2, sp, #0x10
    c43c:	ldr	w0, [x2, x0]
    c440:	add	w1, w1, w0
    c444:	ldr	w0, [sp, #284]
    c448:	sub	w0, w0, #0xf
    c44c:	mov	w0, w0
    c450:	lsl	x0, x0, #2
    c454:	add	x2, sp, #0x10
    c458:	ldr	w0, [x2, x0]
    c45c:	ror	w2, w0, #7
    c460:	ldr	w0, [sp, #284]
    c464:	sub	w0, w0, #0xf
    c468:	mov	w0, w0
    c46c:	lsl	x0, x0, #2
    c470:	add	x3, sp, #0x10
    c474:	ldr	w0, [x3, x0]
    c478:	ror	w0, w0, #18
    c47c:	eor	w2, w2, w0
    c480:	ldr	w0, [sp, #284]
    c484:	sub	w0, w0, #0xf
    c488:	mov	w0, w0
    c48c:	lsl	x0, x0, #2
    c490:	add	x3, sp, #0x10
    c494:	ldr	w0, [x3, x0]
    c498:	lsr	w0, w0, #3
    c49c:	eor	w0, w2, w0
    c4a0:	add	w1, w1, w0
    c4a4:	ldr	w0, [sp, #284]
    c4a8:	sub	w0, w0, #0x10
    c4ac:	mov	w0, w0
    c4b0:	lsl	x0, x0, #2
    c4b4:	add	x2, sp, #0x10
    c4b8:	ldr	w0, [x2, x0]
    c4bc:	add	w2, w1, w0
    c4c0:	ldr	w0, [sp, #284]
    c4c4:	lsl	x0, x0, #2
    c4c8:	add	x1, sp, #0x10
    c4cc:	str	w2, [x1, x0]
    c4d0:	ldr	w0, [sp, #284]
    c4d4:	add	w0, w0, #0x1
    c4d8:	str	w0, [sp, #284]
    c4dc:	ldr	w0, [sp, #284]
    c4e0:	cmp	w0, #0x3f
    c4e4:	b.ls	c3cc <SHA256Transform+0x9c>  // b.plast
    c4e8:	ldr	x0, [sp, #8]
    c4ec:	ldr	w0, [x0]
    c4f0:	str	w0, [sp, #316]
    c4f4:	ldr	x0, [sp, #8]
    c4f8:	ldr	w0, [x0, #4]
    c4fc:	str	w0, [sp, #312]
    c500:	ldr	x0, [sp, #8]
    c504:	ldr	w0, [x0, #8]
    c508:	str	w0, [sp, #308]
    c50c:	ldr	x0, [sp, #8]
    c510:	ldr	w0, [x0, #12]
    c514:	str	w0, [sp, #304]
    c518:	ldr	x0, [sp, #8]
    c51c:	ldr	w0, [x0, #16]
    c520:	str	w0, [sp, #300]
    c524:	ldr	x0, [sp, #8]
    c528:	ldr	w0, [x0, #20]
    c52c:	str	w0, [sp, #296]
    c530:	ldr	x0, [sp, #8]
    c534:	ldr	w0, [x0, #24]
    c538:	str	w0, [sp, #292]
    c53c:	ldr	x0, [sp, #8]
    c540:	ldr	w0, [x0, #28]
    c544:	str	w0, [sp, #288]
    c548:	str	wzr, [sp, #284]
    c54c:	b	c670 <SHA256Transform+0x340>
    c550:	ldr	w0, [sp, #300]
    c554:	ror	w1, w0, #6
    c558:	ldr	w0, [sp, #300]
    c55c:	ror	w0, w0, #11
    c560:	eor	w1, w1, w0
    c564:	ldr	w0, [sp, #300]
    c568:	ror	w0, w0, #25
    c56c:	eor	w1, w1, w0
    c570:	ldr	w0, [sp, #288]
    c574:	add	w1, w1, w0
    c578:	ldr	w2, [sp, #296]
    c57c:	ldr	w0, [sp, #292]
    c580:	eor	w2, w2, w0
    c584:	ldr	w0, [sp, #300]
    c588:	and	w2, w2, w0
    c58c:	ldr	w0, [sp, #292]
    c590:	eor	w0, w2, w0
    c594:	add	w1, w1, w0
    c598:	adrp	x0, 0 <grub_swap_bytes16>
    c59c:	add	x0, x0, #0x0
    c5a0:	ldr	x0, [x0]
    c5a4:	ldr	w2, [sp, #284]
    c5a8:	ldr	w0, [x0, x2, lsl #2]
    c5ac:	add	w1, w1, w0
    c5b0:	ldr	w0, [sp, #284]
    c5b4:	lsl	x0, x0, #2
    c5b8:	add	x2, sp, #0x10
    c5bc:	ldr	w0, [x2, x0]
    c5c0:	add	w0, w1, w0
    c5c4:	str	w0, [sp, #280]
    c5c8:	ldr	w0, [sp, #316]
    c5cc:	ror	w1, w0, #2
    c5d0:	ldr	w0, [sp, #316]
    c5d4:	ror	w0, w0, #13
    c5d8:	eor	w1, w1, w0
    c5dc:	ldr	w0, [sp, #316]
    c5e0:	ror	w0, w0, #22
    c5e4:	eor	w1, w1, w0
    c5e8:	ldr	w2, [sp, #316]
    c5ec:	ldr	w0, [sp, #312]
    c5f0:	and	w2, w2, w0
    c5f4:	ldr	w3, [sp, #316]
    c5f8:	ldr	w0, [sp, #312]
    c5fc:	eor	w3, w3, w0
    c600:	ldr	w0, [sp, #308]
    c604:	and	w0, w3, w0
    c608:	eor	w0, w2, w0
    c60c:	add	w0, w1, w0
    c610:	str	w0, [sp, #276]
    c614:	ldr	w0, [sp, #292]
    c618:	str	w0, [sp, #288]
    c61c:	ldr	w0, [sp, #296]
    c620:	str	w0, [sp, #292]
    c624:	ldr	w0, [sp, #300]
    c628:	str	w0, [sp, #296]
    c62c:	ldr	w1, [sp, #304]
    c630:	ldr	w0, [sp, #280]
    c634:	add	w0, w1, w0
    c638:	str	w0, [sp, #300]
    c63c:	ldr	w0, [sp, #308]
    c640:	str	w0, [sp, #304]
    c644:	ldr	w0, [sp, #312]
    c648:	str	w0, [sp, #308]
    c64c:	ldr	w0, [sp, #316]
    c650:	str	w0, [sp, #312]
    c654:	ldr	w1, [sp, #280]
    c658:	ldr	w0, [sp, #276]
    c65c:	add	w0, w1, w0
    c660:	str	w0, [sp, #316]
    c664:	ldr	w0, [sp, #284]
    c668:	add	w0, w0, #0x1
    c66c:	str	w0, [sp, #284]
    c670:	ldr	w0, [sp, #284]
    c674:	cmp	w0, #0x3f
    c678:	b.ls	c550 <SHA256Transform+0x220>  // b.plast
    c67c:	ldr	x0, [sp, #8]
    c680:	ldr	w1, [x0]
    c684:	ldr	w0, [sp, #316]
    c688:	add	w1, w1, w0
    c68c:	ldr	x0, [sp, #8]
    c690:	str	w1, [x0]
    c694:	ldr	x0, [sp, #8]
    c698:	add	x0, x0, #0x4
    c69c:	ldr	w2, [x0]
    c6a0:	ldr	x0, [sp, #8]
    c6a4:	add	x0, x0, #0x4
    c6a8:	ldr	w1, [sp, #312]
    c6ac:	add	w1, w2, w1
    c6b0:	str	w1, [x0]
    c6b4:	ldr	x0, [sp, #8]
    c6b8:	add	x0, x0, #0x8
    c6bc:	ldr	w2, [x0]
    c6c0:	ldr	x0, [sp, #8]
    c6c4:	add	x0, x0, #0x8
    c6c8:	ldr	w1, [sp, #308]
    c6cc:	add	w1, w2, w1
    c6d0:	str	w1, [x0]
    c6d4:	ldr	x0, [sp, #8]
    c6d8:	add	x0, x0, #0xc
    c6dc:	ldr	w2, [x0]
    c6e0:	ldr	x0, [sp, #8]
    c6e4:	add	x0, x0, #0xc
    c6e8:	ldr	w1, [sp, #304]
    c6ec:	add	w1, w2, w1
    c6f0:	str	w1, [x0]
    c6f4:	ldr	x0, [sp, #8]
    c6f8:	add	x0, x0, #0x10
    c6fc:	ldr	w2, [x0]
    c700:	ldr	x0, [sp, #8]
    c704:	add	x0, x0, #0x10
    c708:	ldr	w1, [sp, #300]
    c70c:	add	w1, w2, w1
    c710:	str	w1, [x0]
    c714:	ldr	x0, [sp, #8]
    c718:	add	x0, x0, #0x14
    c71c:	ldr	w2, [x0]
    c720:	ldr	x0, [sp, #8]
    c724:	add	x0, x0, #0x14
    c728:	ldr	w1, [sp, #296]
    c72c:	add	w1, w2, w1
    c730:	str	w1, [x0]
    c734:	ldr	x0, [sp, #8]
    c738:	add	x0, x0, #0x18
    c73c:	ldr	w2, [x0]
    c740:	ldr	x0, [sp, #8]
    c744:	add	x0, x0, #0x18
    c748:	ldr	w1, [sp, #292]
    c74c:	add	w1, w2, w1
    c750:	str	w1, [x0]
    c754:	ldr	x0, [sp, #8]
    c758:	add	x0, x0, #0x1c
    c75c:	ldr	w2, [x0]
    c760:	ldr	x0, [sp, #8]
    c764:	add	x0, x0, #0x1c
    c768:	ldr	w1, [sp, #288]
    c76c:	add	w1, w2, w1
    c770:	str	w1, [x0]
    c774:	nop
    c778:	add	sp, sp, #0x140
    c77c:	ret
	...

000000000000c788 <zio_checksum_SHA256>:
    c788:	stp	x29, x30, [sp, #-224]!
    c78c:	mov	x29, sp
    c790:	str	x0, [sp, #40]
    c794:	str	x1, [sp, #32]
    c798:	str	w2, [sp, #28]
    c79c:	str	x3, [sp, #16]
    c7a0:	adrp	x0, 0 <grub_swap_bytes16>
    c7a4:	add	x0, x0, #0x0
    c7a8:	ldr	x0, [x0]
    c7ac:	add	x2, sp, #0xb8
    c7b0:	mov	x3, x0
    c7b4:	ldp	x0, x1, [x3]
    c7b8:	stp	x0, x1, [x2]
    c7bc:	ldp	x0, x1, [x3, #16]
    c7c0:	stp	x0, x1, [x2, #16]
    c7c4:	ldr	x0, [sp, #32]
    c7c8:	and	w0, w0, #0x3f
    c7cc:	str	w0, [sp, #220]
    c7d0:	str	wzr, [sp, #216]
    c7d4:	b	c7f8 <zio_checksum_SHA256+0x70>
    c7d8:	ldr	w0, [sp, #216]
    c7dc:	ldr	x1, [sp, #40]
    c7e0:	add	x1, x1, x0
    c7e4:	add	x0, sp, #0xb8
    c7e8:	bl	c330 <SHA256Transform>
    c7ec:	ldr	w0, [sp, #216]
    c7f0:	add	w0, w0, #0x40
    c7f4:	str	w0, [sp, #216]
    c7f8:	ldr	w1, [sp, #216]
    c7fc:	ldr	w0, [sp, #220]
    c800:	ldr	x2, [sp, #32]
    c804:	sub	x0, x2, x0
    c808:	cmp	x1, x0
    c80c:	b.cc	c7d8 <zio_checksum_SHA256+0x50>  // b.lo, b.ul, b.last
    c810:	str	wzr, [sp, #216]
    c814:	b	c840 <zio_checksum_SHA256+0xb8>
    c818:	ldr	w0, [sp, #216]
    c81c:	ldr	x1, [sp, #40]
    c820:	add	x0, x1, x0
    c824:	ldrb	w2, [x0]
    c828:	ldr	w0, [sp, #216]
    c82c:	add	x1, sp, #0x38
    c830:	strb	w2, [x1, x0]
    c834:	ldr	w0, [sp, #216]
    c838:	add	w0, w0, #0x1
    c83c:	str	w0, [sp, #216]
    c840:	ldr	w1, [sp, #216]
    c844:	ldr	w0, [sp, #220]
    c848:	cmp	w1, w0
    c84c:	b.cc	c818 <zio_checksum_SHA256+0x90>  // b.lo, b.ul, b.last
    c850:	ldr	w0, [sp, #220]
    c854:	add	w1, w0, #0x1
    c858:	str	w1, [sp, #220]
    c85c:	mov	w0, w0
    c860:	add	x1, sp, #0x38
    c864:	mov	w2, #0xffffff80            	// #-128
    c868:	strb	w2, [x1, x0]
    c86c:	b	c888 <zio_checksum_SHA256+0x100>
    c870:	ldr	w0, [sp, #220]
    c874:	add	x1, sp, #0x38
    c878:	strb	wzr, [x1, x0]
    c87c:	ldr	w0, [sp, #220]
    c880:	add	w0, w0, #0x1
    c884:	str	w0, [sp, #220]
    c888:	ldr	w0, [sp, #220]
    c88c:	and	w0, w0, #0x3f
    c890:	cmp	w0, #0x38
    c894:	b.ne	c870 <zio_checksum_SHA256+0xe8>  // b.any
    c898:	str	wzr, [sp, #216]
    c89c:	b	c8e4 <zio_checksum_SHA256+0x15c>
    c8a0:	ldr	x0, [sp, #32]
    c8a4:	lsl	x1, x0, #3
    c8a8:	mov	w2, #0x7                   	// #7
    c8ac:	ldr	w0, [sp, #216]
    c8b0:	sub	w0, w2, w0
    c8b4:	lsl	w0, w0, #3
    c8b8:	lsr	x2, x1, x0
    c8bc:	ldr	w0, [sp, #220]
    c8c0:	add	w1, w0, #0x1
    c8c4:	str	w1, [sp, #220]
    c8c8:	and	w2, w2, #0xff
    c8cc:	mov	w0, w0
    c8d0:	add	x1, sp, #0x38
    c8d4:	strb	w2, [x1, x0]
    c8d8:	ldr	w0, [sp, #216]
    c8dc:	add	w0, w0, #0x1
    c8e0:	str	w0, [sp, #216]
    c8e4:	ldr	w0, [sp, #216]
    c8e8:	cmp	w0, #0x7
    c8ec:	b.ls	c8a0 <zio_checksum_SHA256+0x118>  // b.plast
    c8f0:	str	wzr, [sp, #216]
    c8f4:	b	c918 <zio_checksum_SHA256+0x190>
    c8f8:	ldr	w0, [sp, #216]
    c8fc:	add	x1, sp, #0x38
    c900:	add	x1, x1, x0
    c904:	add	x0, sp, #0xb8
    c908:	bl	c330 <SHA256Transform>
    c90c:	ldr	w0, [sp, #216]
    c910:	add	w0, w0, #0x40
    c914:	str	w0, [sp, #216]
    c918:	ldr	w1, [sp, #216]
    c91c:	ldr	w0, [sp, #220]
    c920:	cmp	w1, w0
    c924:	b.cs	c934 <zio_checksum_SHA256+0x1ac>  // b.hs, b.nlast
    c928:	ldr	w0, [sp, #216]
    c92c:	cmp	w0, #0x40
    c930:	b.ls	c8f8 <zio_checksum_SHA256+0x170>  // b.plast
    c934:	ldr	w0, [sp, #28]
    c938:	cmp	w0, #0x0
    c93c:	b.ne	c960 <zio_checksum_SHA256+0x1d8>  // b.any
    c940:	ldr	w0, [sp, #184]
    c944:	mov	w0, w0
    c948:	lsl	x1, x0, #32
    c94c:	ldr	w0, [sp, #188]
    c950:	mov	w0, w0
    c954:	orr	x0, x1, x0
    c958:	bl	c318 <grub_swap_bytes64>
    c95c:	b	c978 <zio_checksum_SHA256+0x1f0>
    c960:	ldr	w0, [sp, #184]
    c964:	mov	w0, w0
    c968:	lsl	x1, x0, #32
    c96c:	ldr	w0, [sp, #188]
    c970:	mov	w0, w0
    c974:	orr	x0, x1, x0
    c978:	ldr	x1, [sp, #16]
    c97c:	str	x0, [x1]
    c980:	ldr	w0, [sp, #28]
    c984:	cmp	w0, #0x0
    c988:	b.ne	c9ac <zio_checksum_SHA256+0x224>  // b.any
    c98c:	ldr	w0, [sp, #192]
    c990:	mov	w0, w0
    c994:	lsl	x1, x0, #32
    c998:	ldr	w0, [sp, #196]
    c99c:	mov	w0, w0
    c9a0:	orr	x0, x1, x0
    c9a4:	bl	c318 <grub_swap_bytes64>
    c9a8:	b	c9c4 <zio_checksum_SHA256+0x23c>
    c9ac:	ldr	w0, [sp, #192]
    c9b0:	mov	w0, w0
    c9b4:	lsl	x1, x0, #32
    c9b8:	ldr	w0, [sp, #196]
    c9bc:	mov	w0, w0
    c9c0:	orr	x0, x1, x0
    c9c4:	ldr	x1, [sp, #16]
    c9c8:	str	x0, [x1, #8]
    c9cc:	ldr	w0, [sp, #28]
    c9d0:	cmp	w0, #0x0
    c9d4:	b.ne	c9f8 <zio_checksum_SHA256+0x270>  // b.any
    c9d8:	ldr	w0, [sp, #200]
    c9dc:	mov	w0, w0
    c9e0:	lsl	x1, x0, #32
    c9e4:	ldr	w0, [sp, #204]
    c9e8:	mov	w0, w0
    c9ec:	orr	x0, x1, x0
    c9f0:	bl	c318 <grub_swap_bytes64>
    c9f4:	b	ca10 <zio_checksum_SHA256+0x288>
    c9f8:	ldr	w0, [sp, #200]
    c9fc:	mov	w0, w0
    ca00:	lsl	x1, x0, #32
    ca04:	ldr	w0, [sp, #204]
    ca08:	mov	w0, w0
    ca0c:	orr	x0, x1, x0
    ca10:	ldr	x1, [sp, #16]
    ca14:	str	x0, [x1, #16]
    ca18:	ldr	w0, [sp, #28]
    ca1c:	cmp	w0, #0x0
    ca20:	b.ne	ca44 <zio_checksum_SHA256+0x2bc>  // b.any
    ca24:	ldr	w0, [sp, #208]
    ca28:	mov	w0, w0
    ca2c:	lsl	x1, x0, #32
    ca30:	ldr	w0, [sp, #212]
    ca34:	mov	w0, w0
    ca38:	orr	x0, x1, x0
    ca3c:	bl	c318 <grub_swap_bytes64>
    ca40:	b	ca5c <zio_checksum_SHA256+0x2d4>
    ca44:	ldr	w0, [sp, #208]
    ca48:	mov	w0, w0
    ca4c:	lsl	x1, x0, #32
    ca50:	ldr	w0, [sp, #212]
    ca54:	mov	w0, w0
    ca58:	orr	x0, x1, x0
    ca5c:	ldr	x1, [sp, #16]
    ca60:	str	x0, [x1, #24]
    ca64:	nop
    ca68:	ldp	x29, x30, [sp], #224
    ca6c:	ret
	...

000000000000ca78 <grub_swap_bytes32>:
    ca78:	sub	sp, sp, #0x10
    ca7c:	str	w0, [sp, #12]
    ca80:	ldr	w0, [sp, #12]
    ca84:	rev	w0, w0
    ca88:	add	sp, sp, #0x10
    ca8c:	ret

000000000000ca90 <grub_swap_bytes64>:
    ca90:	sub	sp, sp, #0x10
    ca94:	str	x0, [sp, #8]
    ca98:	ldr	x0, [sp, #8]
    ca9c:	rev	x0, x0
    caa0:	add	sp, sp, #0x10
    caa4:	ret

000000000000caa8 <fletcher_2>:
    caa8:	stp	x29, x30, [sp, #-96]!
    caac:	mov	x29, sp
    cab0:	str	x0, [sp, #40]
    cab4:	str	x1, [sp, #32]
    cab8:	str	w2, [sp, #28]
    cabc:	str	x3, [sp, #16]
    cac0:	ldr	x0, [sp, #40]
    cac4:	str	x0, [sp, #88]
    cac8:	ldr	x0, [sp, #32]
    cacc:	and	x0, x0, #0xfffffffffffffff8
    cad0:	ldr	x1, [sp, #88]
    cad4:	add	x0, x1, x0
    cad8:	str	x0, [sp, #48]
    cadc:	str	xzr, [sp, #56]
    cae0:	ldr	x0, [sp, #56]
    cae4:	str	x0, [sp, #64]
    cae8:	ldr	x0, [sp, #64]
    caec:	str	x0, [sp, #72]
    caf0:	ldr	x0, [sp, #72]
    caf4:	str	x0, [sp, #80]
    caf8:	b	cb90 <fletcher_2+0xe8>
    cafc:	ldr	w0, [sp, #28]
    cb00:	cmp	w0, #0x0
    cb04:	b.ne	cb18 <fletcher_2+0x70>  // b.any
    cb08:	ldr	x0, [sp, #88]
    cb0c:	ldr	x0, [x0]
    cb10:	bl	ca90 <grub_swap_bytes64>
    cb14:	b	cb20 <fletcher_2+0x78>
    cb18:	ldr	x0, [sp, #88]
    cb1c:	ldr	x0, [x0]
    cb20:	ldr	x1, [sp, #80]
    cb24:	add	x0, x1, x0
    cb28:	str	x0, [sp, #80]
    cb2c:	ldr	w0, [sp, #28]
    cb30:	cmp	w0, #0x0
    cb34:	b.ne	cb4c <fletcher_2+0xa4>  // b.any
    cb38:	ldr	x0, [sp, #88]
    cb3c:	add	x0, x0, #0x8
    cb40:	ldr	x0, [x0]
    cb44:	bl	ca90 <grub_swap_bytes64>
    cb48:	b	cb58 <fletcher_2+0xb0>
    cb4c:	ldr	x0, [sp, #88]
    cb50:	add	x0, x0, #0x8
    cb54:	ldr	x0, [x0]
    cb58:	ldr	x1, [sp, #64]
    cb5c:	add	x0, x1, x0
    cb60:	str	x0, [sp, #64]
    cb64:	ldr	x1, [sp, #72]
    cb68:	ldr	x0, [sp, #80]
    cb6c:	add	x0, x1, x0
    cb70:	str	x0, [sp, #72]
    cb74:	ldr	x1, [sp, #56]
    cb78:	ldr	x0, [sp, #64]
    cb7c:	add	x0, x1, x0
    cb80:	str	x0, [sp, #56]
    cb84:	ldr	x0, [sp, #88]
    cb88:	add	x0, x0, #0x10
    cb8c:	str	x0, [sp, #88]
    cb90:	ldr	x1, [sp, #88]
    cb94:	ldr	x0, [sp, #48]
    cb98:	cmp	x1, x0
    cb9c:	b.cc	cafc <fletcher_2+0x54>  // b.lo, b.ul, b.last
    cba0:	ldr	w0, [sp, #28]
    cba4:	cmp	w0, #0x0
    cba8:	b.ne	cbb8 <fletcher_2+0x110>  // b.any
    cbac:	ldr	x0, [sp, #80]
    cbb0:	bl	ca90 <grub_swap_bytes64>
    cbb4:	b	cbbc <fletcher_2+0x114>
    cbb8:	ldr	x0, [sp, #80]
    cbbc:	ldr	x1, [sp, #16]
    cbc0:	str	x0, [x1]
    cbc4:	ldr	w0, [sp, #28]
    cbc8:	cmp	w0, #0x0
    cbcc:	b.ne	cbdc <fletcher_2+0x134>  // b.any
    cbd0:	ldr	x0, [sp, #64]
    cbd4:	bl	ca90 <grub_swap_bytes64>
    cbd8:	b	cbe0 <fletcher_2+0x138>
    cbdc:	ldr	x0, [sp, #64]
    cbe0:	ldr	x1, [sp, #16]
    cbe4:	str	x0, [x1, #8]
    cbe8:	ldr	w0, [sp, #28]
    cbec:	cmp	w0, #0x0
    cbf0:	b.ne	cc00 <fletcher_2+0x158>  // b.any
    cbf4:	ldr	x0, [sp, #72]
    cbf8:	bl	ca90 <grub_swap_bytes64>
    cbfc:	b	cc04 <fletcher_2+0x15c>
    cc00:	ldr	x0, [sp, #72]
    cc04:	ldr	x1, [sp, #16]
    cc08:	str	x0, [x1, #16]
    cc0c:	ldr	w0, [sp, #28]
    cc10:	cmp	w0, #0x0
    cc14:	b.ne	cc24 <fletcher_2+0x17c>  // b.any
    cc18:	ldr	x0, [sp, #56]
    cc1c:	bl	ca90 <grub_swap_bytes64>
    cc20:	b	cc28 <fletcher_2+0x180>
    cc24:	ldr	x0, [sp, #56]
    cc28:	ldr	x1, [sp, #16]
    cc2c:	str	x0, [x1, #24]
    cc30:	nop
    cc34:	ldp	x29, x30, [sp], #96
    cc38:	ret

000000000000cc3c <fletcher_4>:
    cc3c:	stp	x29, x30, [sp, #-96]!
    cc40:	mov	x29, sp
    cc44:	str	x0, [sp, #40]
    cc48:	str	x1, [sp, #32]
    cc4c:	str	w2, [sp, #28]
    cc50:	str	x3, [sp, #16]
    cc54:	ldr	x0, [sp, #40]
    cc58:	str	x0, [sp, #88]
    cc5c:	ldr	x0, [sp, #32]
    cc60:	and	x0, x0, #0xfffffffffffffffc
    cc64:	ldr	x1, [sp, #88]
    cc68:	add	x0, x1, x0
    cc6c:	str	x0, [sp, #48]
    cc70:	str	xzr, [sp, #56]
    cc74:	ldr	x0, [sp, #56]
    cc78:	str	x0, [sp, #64]
    cc7c:	ldr	x0, [sp, #64]
    cc80:	str	x0, [sp, #72]
    cc84:	ldr	x0, [sp, #72]
    cc88:	str	x0, [sp, #80]
    cc8c:	b	cd00 <fletcher_4+0xc4>
    cc90:	ldr	w0, [sp, #28]
    cc94:	cmp	w0, #0x0
    cc98:	b.ne	ccac <fletcher_4+0x70>  // b.any
    cc9c:	ldr	x0, [sp, #88]
    cca0:	ldr	w0, [x0]
    cca4:	bl	ca78 <grub_swap_bytes32>
    cca8:	b	ccb4 <fletcher_4+0x78>
    ccac:	ldr	x0, [sp, #88]
    ccb0:	ldr	w0, [x0]
    ccb4:	mov	w0, w0
    ccb8:	ldr	x1, [sp, #80]
    ccbc:	add	x0, x1, x0
    ccc0:	str	x0, [sp, #80]
    ccc4:	ldr	x1, [sp, #72]
    ccc8:	ldr	x0, [sp, #80]
    cccc:	add	x0, x1, x0
    ccd0:	str	x0, [sp, #72]
    ccd4:	ldr	x1, [sp, #64]
    ccd8:	ldr	x0, [sp, #72]
    ccdc:	add	x0, x1, x0
    cce0:	str	x0, [sp, #64]
    cce4:	ldr	x1, [sp, #56]
    cce8:	ldr	x0, [sp, #64]
    ccec:	add	x0, x1, x0
    ccf0:	str	x0, [sp, #56]
    ccf4:	ldr	x0, [sp, #88]
    ccf8:	add	x0, x0, #0x4
    ccfc:	str	x0, [sp, #88]
    cd00:	ldr	x1, [sp, #88]
    cd04:	ldr	x0, [sp, #48]
    cd08:	cmp	x1, x0
    cd0c:	b.cc	cc90 <fletcher_4+0x54>  // b.lo, b.ul, b.last
    cd10:	ldr	w0, [sp, #28]
    cd14:	cmp	w0, #0x0
    cd18:	b.ne	cd28 <fletcher_4+0xec>  // b.any
    cd1c:	ldr	x0, [sp, #80]
    cd20:	bl	ca90 <grub_swap_bytes64>
    cd24:	b	cd2c <fletcher_4+0xf0>
    cd28:	ldr	x0, [sp, #80]
    cd2c:	ldr	x1, [sp, #16]
    cd30:	str	x0, [x1]
    cd34:	ldr	w0, [sp, #28]
    cd38:	cmp	w0, #0x0
    cd3c:	b.ne	cd4c <fletcher_4+0x110>  // b.any
    cd40:	ldr	x0, [sp, #72]
    cd44:	bl	ca90 <grub_swap_bytes64>
    cd48:	b	cd50 <fletcher_4+0x114>
    cd4c:	ldr	x0, [sp, #72]
    cd50:	ldr	x1, [sp, #16]
    cd54:	str	x0, [x1, #8]
    cd58:	ldr	w0, [sp, #28]
    cd5c:	cmp	w0, #0x0
    cd60:	b.ne	cd70 <fletcher_4+0x134>  // b.any
    cd64:	ldr	x0, [sp, #64]
    cd68:	bl	ca90 <grub_swap_bytes64>
    cd6c:	b	cd74 <fletcher_4+0x138>
    cd70:	ldr	x0, [sp, #64]
    cd74:	ldr	x1, [sp, #16]
    cd78:	str	x0, [x1, #16]
    cd7c:	ldr	w0, [sp, #28]
    cd80:	cmp	w0, #0x0
    cd84:	b.ne	cd94 <fletcher_4+0x158>  // b.any
    cd88:	ldr	x0, [sp, #56]
    cd8c:	bl	ca90 <grub_swap_bytes64>
    cd90:	b	cd98 <fletcher_4+0x15c>
    cd94:	ldr	x0, [sp, #56]
    cd98:	ldr	x1, [sp, #16]
    cd9c:	str	x0, [x1, #24]
    cda0:	nop
    cda4:	ldp	x29, x30, [sp], #96
    cda8:	ret
