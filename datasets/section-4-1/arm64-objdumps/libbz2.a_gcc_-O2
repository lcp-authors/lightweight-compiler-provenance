In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_gcc_-O2:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fallbackSort>:
       0:	sub	sp, sp, #0xba0
       4:	cmp	w4, #0x3
       8:	stp	x29, x30, [sp]
       c:	mov	x29, sp
      10:	stp	x19, x20, [sp, #16]
      14:	mov	x20, x0
      18:	mov	x19, x1
      1c:	stp	x21, x22, [sp, #32]
      20:	mov	x22, x2
      24:	mov	w21, w3
      28:	stp	x23, x24, [sp, #48]
      2c:	stp	x25, x26, [sp, #64]
      30:	stp	x27, x28, [sp, #80]
      34:	str	w4, [sp, #108]
      38:	b.gt	904 <fallbackSort+0x904>
      3c:	add	x2, sp, #0x798
      40:	mov	x3, x2
      44:	add	x4, x2, #0x404
      48:	mov	x0, x2
      4c:	nop
      50:	str	wzr, [x0], #4
      54:	cmp	x4, x0
      58:	b.ne	50 <fallbackSort+0x50>  // b.any
      5c:	cmp	w21, #0x0
      60:	b.le	90 <fallbackSort+0x90>
      64:	sub	w6, w21, #0x1
      68:	mov	x1, x19
      6c:	add	x6, x6, #0x1
      70:	add	x6, x6, x19
      74:	nop
      78:	ldrb	w5, [x1], #1
      7c:	cmp	x6, x1
      80:	ldr	w0, [x2, x5, lsl #2]
      84:	add	w0, w0, #0x1
      88:	str	w0, [x2, x5, lsl #2]
      8c:	b.ne	78 <fallbackSort+0x78>  // b.any
      90:	add	x10, sp, #0x398
      94:	mov	x1, #0x1                   	// #1
      98:	lsl	x0, x1, #2
      9c:	add	x1, x1, #0x1
      a0:	add	x5, x2, x0
      a4:	add	x0, x10, x0
      a8:	cmp	x1, #0x101
      ac:	ldur	w5, [x5, #-4]
      b0:	stur	w5, [x0, #-4]
      b4:	b.ne	98 <fallbackSort+0x98>  // b.any
      b8:	add	x0, x2, #0x4
      bc:	nop
      c0:	ldp	w5, w1, [x0, #-4]
      c4:	add	w1, w1, w5
      c8:	str	w1, [x0], #4
      cc:	cmp	x4, x0
      d0:	b.ne	c0 <fallbackSort+0xc0>  // b.any
      d4:	cmp	w21, #0x0
      d8:	add	w5, w21, #0x1f
      dc:	csel	w5, w5, w21, lt  // lt = tstop
      e0:	asr	w5, w5, #5
      e4:	add	w5, w5, #0x2
      e8:	b.le	974 <fallbackSort+0x974>
      ec:	mov	x0, #0x0                   	// #0
      f0:	ldrb	w4, [x19, x0]
      f4:	ldr	w1, [x2, x4, lsl #2]
      f8:	sub	w1, w1, #0x1
      fc:	str	w1, [x2, x4, lsl #2]
     100:	str	w0, [x20, w1, sxtw #2]
     104:	add	x0, x0, #0x1
     108:	cmp	w21, w0
     10c:	b.gt	f0 <fallbackSort+0xf0>
     110:	mov	x0, #0x0                   	// #0
     114:	nop
     118:	str	wzr, [x22, x0, lsl #2]
     11c:	add	x0, x0, #0x1
     120:	cmp	w5, w0
     124:	b.gt	118 <fallbackSort+0x118>
     128:	add	x5, x2, #0x400
     12c:	mov	w4, #0x1                   	// #1
     130:	ldr	w1, [x3], #4
     134:	cmp	x5, x3
     138:	asr	w0, w1, #5
     13c:	lsl	w1, w4, w1
     140:	sxtw	x0, w0
     144:	ldr	w2, [x22, x0, lsl #2]
     148:	orr	w1, w2, w1
     14c:	str	w1, [x22, x0, lsl #2]
     150:	b.ne	130 <fallbackSort+0x130>  // b.any
     154:	mov	w1, w21
     158:	add	w7, w21, #0x40
     15c:	mov	w5, #0x1                   	// #1
     160:	asr	w3, w1, #5
     164:	add	w0, w1, #0x1
     168:	lsl	w6, w5, w1
     16c:	add	w1, w1, #0x2
     170:	sxtw	x3, w3
     174:	asr	w2, w0, #5
     178:	lsl	w0, w5, w0
     17c:	cmp	w7, w1
     180:	sxtw	x2, w2
     184:	ldr	w4, [x22, x3, lsl #2]
     188:	orr	w4, w4, w6
     18c:	str	w4, [x22, x3, lsl #2]
     190:	ldr	w3, [x22, x2, lsl #2]
     194:	bic	w0, w3, w0
     198:	str	w0, [x22, x2, lsl #2]
     19c:	b.ne	160 <fallbackSort+0x160>  // b.any
     1a0:	mov	w11, #0x1                   	// #1
     1a4:	add	x13, sp, #0x78
     1a8:	add	x12, sp, #0x208
     1ac:	mov	w23, w11
     1b0:	mov	w9, w21
     1b4:	nop
     1b8:	ldr	w0, [sp, #108]
     1bc:	cmp	w0, #0x3
     1c0:	b.gt	8d4 <fallbackSort+0x8d4>
     1c4:	cmp	w9, #0x0
     1c8:	mov	x1, #0x0                   	// #0
     1cc:	mov	w2, #0x0                   	// #0
     1d0:	mov	w6, #0x1                   	// #1
     1d4:	b.le	210 <fallbackSort+0x210>
     1d8:	asr	w3, w1, #5
     1dc:	ldr	w0, [x20, x1, lsl #2]
     1e0:	lsl	w5, w6, w1
     1e4:	sub	w0, w0, w23
     1e8:	ldr	w4, [x22, w3, sxtw #2]
     1ec:	add	w3, w0, w9
     1f0:	tst	w5, w4
     1f4:	csel	w2, w2, w1, eq  // eq = none
     1f8:	cmp	w0, #0x0
     1fc:	csel	w0, w3, w0, lt  // lt = tstop
     200:	add	x1, x1, #0x1
     204:	cmp	w9, w1
     208:	str	w2, [x19, w0, sxtw #2]
     20c:	b.gt	1d8 <fallbackSort+0x1d8>
     210:	mov	w15, #0xaaab                	// #43691
     214:	mov	w25, w9
     218:	mov	w26, #0xffffffff            	// #-1
     21c:	movk	w15, #0xaaaa, lsl #16
     220:	str	wzr, [sp, #104]
     224:	nop
     228:	add	w0, w26, #0x1
     22c:	mov	w5, #0x1                   	// #1
     230:	and	w2, w0, #0x1f
     234:	asr	w3, w0, #5
     238:	lsl	w4, w5, w2
     23c:	ldr	w1, [x22, w3, sxtw #2]
     240:	tst	w4, w1
     244:	b.eq	500 <fallbackSort+0x500>  // b.none
     248:	cbz	w2, 7f4 <fallbackSort+0x7f4>
     24c:	mov	w24, w0
     250:	add	w0, w0, #0x1
     254:	and	w2, w0, #0x1f
     258:	asr	w3, w0, #5
     25c:	lsl	w4, w5, w2
     260:	ldr	w1, [x22, w3, sxtw #2]
     264:	tst	w4, w1
     268:	b.ne	248 <fallbackSort+0x248>  // b.any
     26c:	cmp	w25, w24
     270:	b.le	428 <fallbackSort+0x428>
     274:	mov	w1, w0
     278:	mov	w5, #0x1                   	// #1
     27c:	cbnz	w2, 288 <fallbackSort+0x288>
     280:	b	3c8 <fallbackSort+0x3c8>
     284:	cbz	w2, 3d0 <fallbackSort+0x3d0>
     288:	mov	w26, w1
     28c:	add	w1, w1, #0x1
     290:	and	w2, w1, #0x1f
     294:	asr	w3, w1, #5
     298:	lsl	w4, w5, w2
     29c:	ldr	w3, [x22, w3, sxtw #2]
     2a0:	tst	w4, w3
     2a4:	b.eq	284 <fallbackSort+0x284>  // b.none
     2a8:	cmp	w25, w26
     2ac:	b.le	428 <fallbackSort+0x428>
     2b0:	cmp	w1, w0
     2b4:	b.le	228 <fallbackSort+0x228>
     2b8:	sub	w0, w1, w0
     2bc:	ldr	w1, [sp, #104]
     2c0:	add	w0, w0, #0x1
     2c4:	mov	w28, #0x0                   	// #0
     2c8:	add	w0, w1, w0
     2cc:	mov	w3, #0x1                   	// #1
     2d0:	str	w0, [sp, #104]
     2d4:	mov	w0, w25
     2d8:	mov	w21, w26
     2dc:	mov	x25, x22
     2e0:	mov	w27, w24
     2e4:	mov	w22, w28
     2e8:	sxtw	x28, w3
     2ec:	mov	w3, w0
     2f0:	mov	x4, #0xfffffffffffffff0    	// #-16
     2f4:	str	w24, [sp, #120]
     2f8:	str	w26, [sp, #520]
     2fc:	nop
     300:	sub	w0, w21, w27
     304:	sub	w7, w28, #0x1
     308:	cmp	w0, #0x9
     30c:	b.le	588 <fallbackSort+0x588>
     310:	mov	w0, #0x1dc5                	// #7621
     314:	mul	w22, w22, w0
     318:	add	w22, w22, #0x1
     31c:	and	w22, w22, #0x7fff
     320:	umull	x0, w22, w15
     324:	lsr	x0, x0, #33
     328:	add	w0, w0, w0, lsl #1
     32c:	subs	w0, w22, w0
     330:	b.ne	894 <fallbackSort+0x894>  // b.any
     334:	ldr	w0, [x20, w27, sxtw #2]
     338:	ldr	w16, [x19, x0, lsl #2]
     33c:	cmp	w27, w21
     340:	b.gt	530 <fallbackSort+0x530>
     344:	add	x14, x20, w27, sxtw #2
     348:	sxtw	x18, w27
     34c:	mov	x9, x14
     350:	mov	w0, w27
     354:	mov	w6, w21
     358:	mov	w17, w27
     35c:	mov	w5, w21
     360:	ldr	w2, [x9]
     364:	mov	w11, w0
     368:	ldr	w1, [x19, w2, uxtw #2]
     36c:	sub	w1, w1, w16
     370:	cmp	w1, #0x0
     374:	cbz	w1, 7c8 <fallbackSort+0x7c8>
     378:	b.le	7e8 <fallbackSort+0x7e8>
     37c:	cmp	w0, w5
     380:	b.gt	528 <fallbackSort+0x528>
     384:	add	x2, x20, w5, sxtw #2
     388:	b	39c <fallbackSort+0x39c>
     38c:	b.mi	508 <fallbackSort+0x508>  // b.first
     390:	sub	x2, x2, #0x4
     394:	cmp	w0, w5
     398:	b.gt	528 <fallbackSort+0x528>
     39c:	ldr	w8, [x2]
     3a0:	sub	w5, w5, #0x1
     3a4:	ldr	w1, [x19, w8, uxtw #2]
     3a8:	subs	w1, w1, w16
     3ac:	cbnz	w1, 38c <fallbackSort+0x38c>
     3b0:	sxtw	x1, w6
     3b4:	sub	w6, w6, #0x1
     3b8:	ldr	w30, [x20, x1, lsl #2]
     3bc:	str	w30, [x2]
     3c0:	str	w8, [x20, x1, lsl #2]
     3c4:	b	390 <fallbackSort+0x390>
     3c8:	ldr	w3, [x22, w3, sxtw #2]
     3cc:	nop
     3d0:	cbnz	w3, 3e8 <fallbackSort+0x3e8>
     3d4:	nop
     3d8:	add	w1, w1, #0x20
     3dc:	asr	w2, w1, #5
     3e0:	ldr	w3, [x22, w2, sxtw #2]
     3e4:	cbz	w3, 3d8 <fallbackSort+0x3d8>
     3e8:	mov	w2, #0x1                   	// #1
     3ec:	sub	w26, w1, #0x1
     3f0:	mov	w4, w2
     3f4:	lsl	w2, w2, w1
     3f8:	tst	w2, w3
     3fc:	b.ne	2a8 <fallbackSort+0x2a8>  // b.any
     400:	mov	w26, w1
     404:	add	w1, w1, #0x1
     408:	asr	w2, w1, #5
     40c:	lsl	w3, w4, w1
     410:	ldr	w2, [x22, w2, sxtw #2]
     414:	tst	w3, w2
     418:	b.eq	400 <fallbackSort+0x400>  // b.none
     41c:	cmp	w25, w26
     420:	b.gt	2b0 <fallbackSort+0x2b0>
     424:	nop
     428:	ldr	w0, [sp, #108]
     42c:	mov	w9, w25
     430:	cmp	w0, #0x3
     434:	b.le	464 <fallbackSort+0x464>
     438:	adrp	x0, 0 <stderr>
     43c:	ldr	w2, [sp, #104]
     440:	adrp	x1, 0 <fallbackSort>
     444:	add	x1, x1, #0x0
     448:	ldr	x0, [x0]
     44c:	str	w25, [sp, #100]
     450:	bl	0 <fprintf>
     454:	ldr	w9, [sp, #100]
     458:	add	x12, sp, #0x208
     45c:	add	x13, sp, #0x78
     460:	add	x10, sp, #0x398
     464:	ldr	w0, [sp, #104]
     468:	lsl	w23, w23, #1
     46c:	cmp	w0, #0x0
     470:	ccmp	w9, w23, #0x1, ne  // ne = any
     474:	b.ge	1b8 <fallbackSort+0x1b8>  // b.tcont
     478:	ldr	w0, [sp, #108]
     47c:	mov	w21, w9
     480:	cmp	w0, #0x3
     484:	b.gt	948 <fallbackSort+0x948>
     488:	cmp	w9, #0x0
     48c:	b.le	4e0 <fallbackSort+0x4e0>
     490:	ldr	w1, [sp, #920]
     494:	mov	x3, #0x0                   	// #0
     498:	mov	w2, #0x0                   	// #0
     49c:	mov	x4, #0x0                   	// #0
     4a0:	mov	x0, x4
     4a4:	cbnz	w1, 4bc <fallbackSort+0x4bc>
     4a8:	add	w2, w0, #0x1
     4ac:	add	x0, x0, #0x1
     4b0:	ldr	w1, [x10, x0, lsl #2]
     4b4:	cbz	w1, 4a8 <fallbackSort+0x4a8>
     4b8:	sxtw	x4, w2
     4bc:	ldr	w0, [x20, x3, lsl #2]
     4c0:	sub	w1, w1, #0x1
     4c4:	str	w1, [x10, x4, lsl #2]
     4c8:	add	x3, x3, #0x1
     4cc:	cmp	w21, w3
     4d0:	strb	w2, [x19, x0]
     4d4:	b.gt	4a0 <fallbackSort+0x4a0>
     4d8:	cmp	w2, #0xff
     4dc:	b.gt	924 <fallbackSort+0x924>
     4e0:	ldp	x29, x30, [sp]
     4e4:	ldp	x19, x20, [sp, #16]
     4e8:	ldp	x21, x22, [sp, #32]
     4ec:	ldp	x23, x24, [sp, #48]
     4f0:	ldp	x25, x26, [sp, #64]
     4f4:	ldp	x27, x28, [sp, #80]
     4f8:	add	sp, sp, #0xba0
     4fc:	ret
     500:	mov	w24, w26
     504:	b	26c <fallbackSort+0x26c>
     508:	add	w11, w0, #0x1
     50c:	ldr	w1, [x9]
     510:	mov	w0, w11
     514:	str	w8, [x9]
     518:	str	w1, [x2]
     51c:	add	x9, x9, #0x4
     520:	cmp	w0, w5
     524:	b.le	360 <fallbackSort+0x360>
     528:	cmp	w17, w6
     52c:	b.le	6dc <fallbackSort+0x6dc>
     530:	cbz	w7, 68c <fallbackSort+0x68c>
     534:	sub	w0, w28, #0x2
     538:	sxtw	x28, w7
     53c:	sxtw	x0, w0
     540:	ldr	w27, [x13, x0, lsl #2]
     544:	ldr	w21, [x12, x0, lsl #2]
     548:	cmp	w28, #0x62
     54c:	b.le	300 <fallbackSort+0x300>
     550:	mov	w0, #0x3ec                 	// #1004
     554:	str	w3, [sp, #100]
     558:	bl	0 <BZ2_bz__AssertH__fail>
     55c:	sub	w0, w21, w27
     560:	mov	w15, #0xaaab                	// #43691
     564:	ldr	w3, [sp, #100]
     568:	add	x12, sp, #0x208
     56c:	add	x13, sp, #0x78
     570:	add	x10, sp, #0x398
     574:	sub	w7, w28, #0x1
     578:	cmp	w0, #0x9
     57c:	movk	w15, #0xaaaa, lsl #16
     580:	mov	x4, #0xfffffffffffffff0    	// #-16
     584:	b.gt	310 <fallbackSort+0x310>
     588:	cmp	w27, w21
     58c:	b.eq	530 <fallbackSort+0x530>  // b.none
     590:	cmp	w0, #0x3
     594:	b.le	610 <fallbackSort+0x610>
     598:	sub	w11, w21, #0x4
     59c:	cmp	w11, w27
     5a0:	b.lt	610 <fallbackSort+0x610>  // b.tstop
     5a4:	sxtw	x11, w11
     5a8:	mov	w9, w21
     5ac:	nop
     5b0:	ldr	w14, [x20, x11, lsl #2]
     5b4:	add	x0, x4, w9, sxtw #2
     5b8:	add	x5, x20, x11, lsl #2
     5bc:	cmp	w9, w21
     5c0:	add	x0, x20, x0
     5c4:	mov	w1, w9
     5c8:	ldr	w8, [x19, w14, sxtw #2]
     5cc:	b.le	5e4 <fallbackSort+0x5e4>
     5d0:	b	5fc <fallbackSort+0x5fc>
     5d4:	str	w2, [x0]
     5d8:	cmp	w1, w21
     5dc:	add	x0, x5, #0x10
     5e0:	b.gt	874 <fallbackSort+0x874>
     5e4:	ldr	w2, [x0, #16]
     5e8:	add	w1, w1, #0x4
     5ec:	mov	x5, x0
     5f0:	ldr	w6, [x19, w2, uxtw #2]
     5f4:	cmp	w8, w6
     5f8:	b.hi	5d4 <fallbackSort+0x5d4>  // b.pmore
     5fc:	str	w14, [x5]
     600:	sub	x11, x11, #0x1
     604:	cmp	w27, w11
     608:	sub	w9, w9, #0x1
     60c:	b.le	5b0 <fallbackSort+0x5b0>
     610:	sub	w9, w21, #0x1
     614:	mov	w8, w21
     618:	cmp	w9, w27
     61c:	mov	x14, #0xfffffffffffffffc    	// #-4
     620:	sxtw	x9, w9
     624:	b.lt	530 <fallbackSort+0x530>  // b.tstop
     628:	ldr	w16, [x20, x9, lsl #2]
     62c:	add	x0, x14, w8, sxtw #2
     630:	add	x5, x20, x9, lsl #2
     634:	cmp	w8, w21
     638:	add	x0, x20, x0
     63c:	mov	w1, w8
     640:	ldr	w11, [x19, w16, sxtw #2]
     644:	b.le	65c <fallbackSort+0x65c>
     648:	b	674 <fallbackSort+0x674>
     64c:	str	w2, [x0]
     650:	cmp	w1, w21
     654:	add	x0, x5, #0x4
     658:	b.gt	854 <fallbackSort+0x854>
     65c:	ldr	w2, [x0, #4]
     660:	add	w1, w1, #0x1
     664:	mov	x5, x0
     668:	ldr	w6, [x19, w2, uxtw #2]
     66c:	cmp	w11, w6
     670:	b.hi	64c <fallbackSort+0x64c>  // b.pmore
     674:	str	w16, [x5]
     678:	sub	x9, x9, #0x1
     67c:	cmp	w27, w9
     680:	sub	w8, w8, #0x1
     684:	b.le	628 <fallbackSort+0x628>
     688:	cbnz	w7, 534 <fallbackSort+0x534>
     68c:	mov	x22, x25
     690:	sxtw	x24, w24
     694:	mov	w25, w3
     698:	mov	w1, #0xffffffff            	// #-1
     69c:	mov	w6, #0x1                   	// #1
     6a0:	ldr	w4, [x20, x24, lsl #2]
     6a4:	asr	w0, w24, #5
     6a8:	mov	w3, w1
     6ac:	lsl	w5, w6, w24
     6b0:	sxtw	x0, w0
     6b4:	add	x24, x24, #0x1
     6b8:	ldr	w1, [x19, x4, lsl #2]
     6bc:	cmp	w1, w3
     6c0:	b.eq	6d0 <fallbackSort+0x6d0>  // b.none
     6c4:	ldr	w2, [x22, x0, lsl #2]
     6c8:	orr	w2, w2, w5
     6cc:	str	w2, [x22, x0, lsl #2]
     6d0:	cmp	w26, w24
     6d4:	b.ge	6a0 <fallbackSort+0x6a0>  // b.tcont
     6d8:	b	228 <fallbackSort+0x228>
     6dc:	sub	w1, w17, w27
     6e0:	sub	w0, w11, w17
     6e4:	cmp	w0, w1
     6e8:	csel	w0, w0, w1, le
     6ec:	cmp	w0, #0x0
     6f0:	sub	w1, w11, w0
     6f4:	b.le	72c <fallbackSort+0x72c>
     6f8:	sub	w0, w0, #0x1
     6fc:	sxtw	x2, w1
     700:	add	x1, x0, x18
     704:	add	x0, x20, #0x4
     708:	sub	x18, x2, x18
     70c:	add	x0, x0, x1, lsl #2
     710:	ldr	w2, [x14, x18, lsl #2]
     714:	ldr	w1, [x14]
     718:	str	w2, [x14]
     71c:	str	w1, [x14, x18, lsl #2]
     720:	add	x14, x14, #0x4
     724:	cmp	x0, x14
     728:	b.ne	710 <fallbackSort+0x710>  // b.any
     72c:	sub	w5, w6, w5
     730:	sub	w1, w21, w6
     734:	cmp	w1, w5
     738:	csel	w1, w1, w5, le
     73c:	cmp	w1, #0x0
     740:	sub	w0, w21, w1
     744:	b.le	788 <fallbackSort+0x788>
     748:	sxtw	x2, w11
     74c:	sub	w1, w1, #0x1
     750:	add	x1, x1, x2
     754:	sxtw	x0, w0
     758:	add	x6, x20, #0x4
     75c:	sub	x2, x0, x2
     760:	add	x6, x6, x1, lsl #2
     764:	add	x1, x20, w11, sxtw #2
     768:	mov	x0, x1
     76c:	ldr	w8, [x0], #4
     770:	cmp	x6, x0
     774:	ldr	w9, [x0, x2, lsl #2]
     778:	str	w9, [x1]
     77c:	mov	x1, x0
     780:	str	w8, [x0, x2, lsl #2]
     784:	b.ne	768 <fallbackSort+0x768>  // b.any
     788:	add	w0, w11, w27
     78c:	sub	w5, w21, w5
     790:	sub	w0, w0, w17
     794:	add	w1, w5, #0x1
     798:	sub	w0, w0, #0x1
     79c:	sub	w5, w21, w1
     7a0:	sub	w6, w0, w27
     7a4:	add	w2, w28, #0x1
     7a8:	cmp	w6, w5
     7ac:	b.le	8a8 <fallbackSort+0x8a8>
     7b0:	str	w0, [x12, w7, sxtw #2]
     7b4:	mov	w27, w1
     7b8:	str	w1, [x13, x28, lsl #2]
     7bc:	str	w21, [x12, x28, lsl #2]
     7c0:	sxtw	x28, w2
     7c4:	b	548 <fallbackSort+0x548>
     7c8:	sxtw	x1, w17
     7cc:	add	w0, w0, #0x1
     7d0:	add	w17, w17, #0x1
     7d4:	mov	w11, w0
     7d8:	ldr	w8, [x20, x1, lsl #2]
     7dc:	str	w8, [x9]
     7e0:	str	w2, [x20, x1, lsl #2]
     7e4:	b	51c <fallbackSort+0x51c>
     7e8:	add	w0, w0, #0x1
     7ec:	mov	w11, w0
     7f0:	b	51c <fallbackSort+0x51c>
     7f4:	cmn	w1, #0x1
     7f8:	b.ne	818 <fallbackSort+0x818>  // b.any
     7fc:	nop
     800:	add	w0, w0, #0x20
     804:	asr	w3, w0, #5
     808:	ldr	w1, [x22, w3, sxtw #2]
     80c:	cmn	w1, #0x1
     810:	b.eq	800 <fallbackSort+0x800>  // b.none
     814:	and	w2, w0, #0x1f
     818:	mov	w4, #0x1                   	// #1
     81c:	sub	w24, w0, #0x1
     820:	mov	w5, w4
     824:	lsl	w4, w4, w2
     828:	tst	w4, w1
     82c:	b.eq	26c <fallbackSort+0x26c>  // b.none
     830:	mov	w24, w0
     834:	add	w0, w0, #0x1
     838:	and	w2, w0, #0x1f
     83c:	asr	w3, w0, #5
     840:	lsl	w4, w5, w2
     844:	ldr	w1, [x22, w3, sxtw #2]
     848:	tst	w4, w1
     84c:	b.ne	830 <fallbackSort+0x830>  // b.any
     850:	b	26c <fallbackSort+0x26c>
     854:	add	x1, x14, w1, sxtw #2
     858:	sub	x9, x9, #0x1
     85c:	add	x5, x20, x1
     860:	cmp	w27, w9
     864:	sub	w8, w8, #0x1
     868:	str	w16, [x5]
     86c:	b.le	628 <fallbackSort+0x628>
     870:	b	688 <fallbackSort+0x688>
     874:	add	x1, x4, w1, sxtw #2
     878:	sub	x11, x11, #0x1
     87c:	add	x5, x20, x1
     880:	cmp	w27, w11
     884:	sub	w9, w9, #0x1
     888:	str	w14, [x5]
     88c:	b.le	5b0 <fallbackSort+0x5b0>
     890:	b	610 <fallbackSort+0x610>
     894:	cmp	w0, #0x1
     898:	b.eq	8c0 <fallbackSort+0x8c0>  // b.none
     89c:	ldr	w0, [x20, w21, sxtw #2]
     8a0:	ldr	w16, [x19, x0, lsl #2]
     8a4:	b	33c <fallbackSort+0x33c>
     8a8:	str	w1, [x13, w7, sxtw #2]
     8ac:	mov	w21, w0
     8b0:	str	w0, [x12, x28, lsl #2]
     8b4:	str	w27, [x13, x28, lsl #2]
     8b8:	sxtw	x28, w2
     8bc:	b	548 <fallbackSort+0x548>
     8c0:	add	w0, w27, w21
     8c4:	asr	w0, w0, #1
     8c8:	ldr	w0, [x20, w0, sxtw #2]
     8cc:	ldr	w16, [x19, x0, lsl #2]
     8d0:	b	33c <fallbackSort+0x33c>
     8d4:	adrp	x0, 0 <stderr>
     8d8:	mov	w2, w23
     8dc:	adrp	x1, 0 <fallbackSort>
     8e0:	add	x1, x1, #0x0
     8e4:	ldr	x0, [x0]
     8e8:	str	w9, [sp, #100]
     8ec:	bl	0 <fprintf>
     8f0:	ldr	w9, [sp, #100]
     8f4:	add	x12, sp, #0x208
     8f8:	add	x13, sp, #0x78
     8fc:	add	x10, sp, #0x398
     900:	b	1c4 <fallbackSort+0x1c4>
     904:	adrp	x1, 0 <stderr>
     908:	adrp	x0, 0 <fallbackSort>
     90c:	mov	x2, #0x1b                  	// #27
     910:	add	x0, x0, #0x0
     914:	ldr	x3, [x1]
     918:	mov	x1, #0x1                   	// #1
     91c:	bl	0 <fwrite>
     920:	b	3c <fallbackSort+0x3c>
     924:	ldp	x29, x30, [sp]
     928:	mov	w0, #0x3ed                 	// #1005
     92c:	ldp	x19, x20, [sp, #16]
     930:	ldp	x21, x22, [sp, #32]
     934:	ldp	x23, x24, [sp, #48]
     938:	ldp	x25, x26, [sp, #64]
     93c:	ldp	x27, x28, [sp, #80]
     940:	add	sp, sp, #0xba0
     944:	b	0 <BZ2_bz__AssertH__fail>
     948:	adrp	x1, 0 <stderr>
     94c:	adrp	x0, 0 <fallbackSort>
     950:	mov	x2, #0x21                  	// #33
     954:	add	x0, x0, #0x0
     958:	ldr	x3, [x1]
     95c:	mov	x1, #0x1                   	// #1
     960:	bl	0 <fwrite>
     964:	cmp	w21, #0x0
     968:	add	x10, sp, #0x398
     96c:	b.gt	490 <fallbackSort+0x490>
     970:	b	4e0 <fallbackSort+0x4e0>
     974:	cmp	w5, #0x0
     978:	b.le	128 <fallbackSort+0x128>
     97c:	b	110 <fallbackSort+0x110>

0000000000000980 <mainSort>:
     980:	mov	x12, #0x12e0                	// #4832
     984:	sub	sp, sp, x12
     988:	cmp	w5, #0x3
     98c:	stp	x29, x30, [sp]
     990:	mov	x29, sp
     994:	stp	x19, x20, [sp, #16]
     998:	stp	x21, x22, [sp, #32]
     99c:	stp	x23, x24, [sp, #48]
     9a0:	stp	x25, x26, [sp, #64]
     9a4:	mov	x25, x1
     9a8:	stp	x27, x28, [sp, #80]
     9ac:	str	x3, [sp, #160]
     9b0:	stp	x0, x6, [sp, #192]
     9b4:	stp	w5, w4, [sp, #228]
     9b8:	str	x2, [sp, #256]
     9bc:	b.gt	20d0 <mainSort+0x1750>
     9c0:	ldr	x2, [sp, #160]
     9c4:	add	x0, x2, #0x40, lsl #12
     9c8:	str	x0, [sp, #296]
     9cc:	nop
     9d0:	str	wzr, [x0]
     9d4:	cmp	x2, x0
     9d8:	sub	x0, x0, #0x4
     9dc:	b.ne	9d0 <mainSort+0x50>  // b.any
     9e0:	ldr	w1, [sp, #232]
     9e4:	ldrb	w0, [x25]
     9e8:	sub	w3, w1, #0x1
     9ec:	str	w3, [sp, #272]
     9f0:	cmp	w3, #0x2
     9f4:	lsl	w0, w0, #8
     9f8:	b.le	2130 <mainSort+0x17b0>
     9fc:	sub	w5, w1, #0x4
     a00:	sbfiz	x2, x3, #1, #32
     a04:	ldr	x6, [sp, #256]
     a08:	lsr	w5, w5, #2
     a0c:	add	x4, x2, #0x2
     a10:	add	x3, x25, w3, sxtw
     a14:	sub	x1, x6, #0xa
     a18:	sub	x4, x4, w5, uxtw #3
     a1c:	add	x4, x4, x1
     a20:	add	x2, x6, x2
     a24:	ldr	x1, [sp, #160]
     a28:	strh	wzr, [x2]
     a2c:	sub	x2, x2, #0x8
     a30:	sub	x3, x3, #0x4
     a34:	ldrb	w6, [x3, #4]
     a38:	lsl	w6, w6, #8
     a3c:	orr	w0, w6, w0, asr #8
     a40:	sxtw	x7, w0
     a44:	ldr	w6, [x1, x7, lsl #2]
     a48:	add	w6, w6, #0x1
     a4c:	str	w6, [x1, x7, lsl #2]
     a50:	strh	wzr, [x2, #6]
     a54:	ldrb	w6, [x3, #3]
     a58:	lsl	w6, w6, #8
     a5c:	orr	w0, w6, w0, asr #8
     a60:	sxtw	x7, w0
     a64:	ldr	w6, [x1, x7, lsl #2]
     a68:	add	w6, w6, #0x1
     a6c:	str	w6, [x1, x7, lsl #2]
     a70:	strh	wzr, [x2, #4]
     a74:	ldrb	w6, [x3, #2]
     a78:	lsl	w6, w6, #8
     a7c:	orr	w0, w6, w0, asr #8
     a80:	sxtw	x7, w0
     a84:	ldr	w6, [x1, x7, lsl #2]
     a88:	add	w6, w6, #0x1
     a8c:	str	w6, [x1, x7, lsl #2]
     a90:	strh	wzr, [x2, #2]
     a94:	cmp	x4, x2
     a98:	ldrb	w6, [x3, #1]
     a9c:	lsl	w6, w6, #8
     aa0:	orr	w0, w6, w0, asr #8
     aa4:	sxtw	x7, w0
     aa8:	ldr	w6, [x1, x7, lsl #2]
     aac:	add	w6, w6, #0x1
     ab0:	str	w6, [x1, x7, lsl #2]
     ab4:	b.ne	a28 <mainSort+0xa8>  // b.any
     ab8:	ldr	w1, [sp, #232]
     abc:	sub	w1, w1, #0x5
     ac0:	sub	w5, w1, w5, lsl #2
     ac4:	sxtw	x1, w5
     ac8:	tbnz	w5, #31, afc <mainSort+0x17c>
     acc:	ldr	x4, [sp, #160]
     ad0:	ldr	x5, [sp, #256]
     ad4:	strh	wzr, [x5, x1, lsl #1]
     ad8:	ldrb	w2, [x25, x1]
     adc:	sub	x1, x1, #0x1
     ae0:	lsl	w2, w2, #8
     ae4:	orr	w0, w2, w0, asr #8
     ae8:	sxtw	x3, w0
     aec:	ldr	w2, [x4, x3, lsl #2]
     af0:	add	w2, w2, #0x1
     af4:	str	w2, [x4, x3, lsl #2]
     af8:	tbz	w1, #31, ad4 <mainSort+0x154>
     afc:	ldr	w1, [sp, #232]
     b00:	ldr	x0, [sp, #256]
     b04:	add	x2, x25, w1, sxtw
     b08:	add	x3, x0, w1, sxtw #1
     b0c:	mov	x0, #0x0                   	// #0
     b10:	ldrb	w1, [x25, x0]
     b14:	strb	w1, [x2, x0]
     b18:	strh	wzr, [x3, x0, lsl #1]
     b1c:	add	x0, x0, #0x1
     b20:	cmp	x0, #0x22
     b24:	b.ne	b10 <mainSort+0x190>  // b.any
     b28:	ldr	w0, [sp, #228]
     b2c:	cmp	w0, #0x3
     b30:	b.gt	20f0 <mainSort+0x1770>
     b34:	ldr	x1, [sp, #160]
     b38:	add	x3, x1, #0x40, lsl #12
     b3c:	add	x0, x1, #0x4
     b40:	add	x3, x3, #0x4
     b44:	nop
     b48:	ldp	w2, w1, [x0, #-4]
     b4c:	add	w1, w1, w2
     b50:	str	w1, [x0], #4
     b54:	cmp	x3, x0
     b58:	b.ne	b48 <mainSort+0x1c8>  // b.any
     b5c:	ldrb	w0, [x25]
     b60:	ldr	w1, [sp, #272]
     b64:	ubfiz	w0, w0, #8, #8
     b68:	cmp	w1, #0x2
     b6c:	b.le	2128 <mainSort+0x17a8>
     b70:	ldr	x2, [sp, #160]
     b74:	add	x3, x25, w1, sxtw
     b78:	ldr	x5, [sp, #192]
     b7c:	nop
     b80:	lsr	w0, w0, #8
     b84:	ldrb	w4, [x3]
     b88:	sub	w9, w1, #0x1
     b8c:	sub	w8, w1, #0x2
     b90:	sub	w7, w1, #0x3
     b94:	sub	x3, x3, #0x4
     b98:	orr	w6, w0, w4, lsl #8
     b9c:	lsr	w4, w6, #8
     ba0:	ldr	w0, [x2, x6, lsl #2]
     ba4:	sub	w0, w0, #0x1
     ba8:	str	w0, [x2, x6, lsl #2]
     bac:	str	w1, [x5, w0, sxtw #2]
     bb0:	sub	w1, w1, #0x4
     bb4:	cmp	w1, #0x2
     bb8:	ldrb	w0, [x3, #3]
     bbc:	orr	w6, w4, w0, lsl #8
     bc0:	lsr	w4, w6, #8
     bc4:	ldr	w0, [x2, x6, lsl #2]
     bc8:	sub	w0, w0, #0x1
     bcc:	str	w0, [x2, x6, lsl #2]
     bd0:	str	w9, [x5, w0, sxtw #2]
     bd4:	ldrb	w0, [x3, #2]
     bd8:	orr	w6, w4, w0, lsl #8
     bdc:	lsr	w4, w6, #8
     be0:	ldr	w0, [x2, x6, lsl #2]
     be4:	sub	w0, w0, #0x1
     be8:	str	w0, [x2, x6, lsl #2]
     bec:	str	w8, [x5, w0, sxtw #2]
     bf0:	ldrb	w0, [x3, #1]
     bf4:	orr	w6, w4, w0, lsl #8
     bf8:	mov	x0, x6
     bfc:	ldr	w4, [x2, x6, lsl #2]
     c00:	sub	w4, w4, #0x1
     c04:	str	w4, [x2, x6, lsl #2]
     c08:	str	w7, [x5, w4, sxtw #2]
     c0c:	b.gt	b80 <mainSort+0x200>
     c10:	ldr	w1, [sp, #232]
     c14:	sub	w2, w1, #0x4
     c18:	sub	w1, w1, #0x5
     c1c:	neg	w2, w2, lsr #2
     c20:	add	w2, w1, w2, lsl #2
     c24:	sxtw	x1, w2
     c28:	tbnz	w2, #31, c5c <mainSort+0x2dc>
     c2c:	ldr	x4, [sp, #160]
     c30:	ldr	x5, [sp, #192]
     c34:	lsr	w0, w0, #8
     c38:	ldrb	w2, [x25, x1]
     c3c:	orr	w3, w0, w2, lsl #8
     c40:	mov	x0, x3
     c44:	ldr	w2, [x4, x3, lsl #2]
     c48:	sub	w2, w2, #0x1
     c4c:	str	w2, [x4, x3, lsl #2]
     c50:	str	w1, [x5, w2, sxtw #2]
     c54:	sub	x1, x1, #0x1
     c58:	tbz	w1, #31, c34 <mainSort+0x2b4>
     c5c:	add	x15, sp, #0x6e0
     c60:	mov	x0, #0x1                   	// #1
     c64:	nop
     c68:	add	x1, sp, #0x130
     c6c:	add	x2, x15, x0, lsl #2
     c70:	add	x1, x1, x0
     c74:	sub	w3, w0, #0x1
     c78:	add	x0, x0, #0x1
     c7c:	stur	w3, [x2, #-4]
     c80:	cmp	x0, #0x101
     c84:	sturb	wzr, [x1, #-1]
     c88:	b.ne	c68 <mainSort+0x2e8>  // b.any
     c8c:	mov	w0, #0x5                   	// #5
     c90:	mov	w6, #0x1                   	// #1
     c94:	add	w6, w6, w6, lsl #1
     c98:	subs	w0, w0, #0x1
     c9c:	add	w6, w6, #0x1
     ca0:	b.ne	c94 <mainSort+0x314>  // b.any
     ca4:	ldr	x5, [sp, #160]
     ca8:	mov	w17, #0x5556                	// #21846
     cac:	movk	w17, #0x5555, lsl #16
     cb0:	smull	x0, w6, w17
     cb4:	cmp	w6, #0x2ff
     cb8:	lsr	x0, x0, #32
     cbc:	sub	w6, w0, w6, asr #31
     cc0:	b.gt	d58 <mainSort+0x3d8>
     cc4:	sxtw	x18, w6
     cc8:	mov	x13, x15
     ccc:	mov	x12, x18
     cd0:	neg	w11, w6
     cd4:	mov	x16, #0x0                   	// #0
     cd8:	ldr	w14, [x13, x18, lsl #2]
     cdc:	mov	w4, w12
     ce0:	mov	x3, x13
     ce4:	sub	x10, x12, x16
     ce8:	add	w0, w14, #0x1
     cec:	lsl	w1, w14, #8
     cf0:	lsl	w0, w0, #8
     cf4:	ldr	w1, [x5, w1, sxtw #2]
     cf8:	ldr	w9, [x5, w0, sxtw #2]
     cfc:	sub	w9, w9, w1
     d00:	b	d14 <mainSort+0x394>
     d04:	str	w2, [x3, x10, lsl #2]
     d08:	cmp	w4, w6
     d0c:	add	x3, x3, w11, sxtw #2
     d10:	b.lt	1d04 <mainSort+0x1384>  // b.tstop
     d14:	ldr	w2, [x3]
     d18:	mov	w7, w4
     d1c:	sub	w4, w4, w6
     d20:	add	w1, w2, #0x1
     d24:	lsl	w0, w2, #8
     d28:	lsl	w1, w1, #8
     d2c:	ldr	w8, [x5, w0, sxtw #2]
     d30:	ldr	w0, [x5, w1, sxtw #2]
     d34:	sub	w0, w0, w8
     d38:	cmp	w0, w9
     d3c:	b.hi	d04 <mainSort+0x384>  // b.pmore
     d40:	str	w14, [x15, w7, sxtw #2]
     d44:	add	x12, x12, #0x1
     d48:	cmp	w12, #0xff
     d4c:	add	x16, x16, #0x1
     d50:	add	x13, x13, #0x4
     d54:	b.le	cd8 <mainSort+0x358>
     d58:	cmp	w6, #0x1
     d5c:	b.ne	cb0 <mainSort+0x330>  // b.any
     d60:	mov	x26, x25
     d64:	add	x1, x15, #0x400
     d68:	add	x0, x15, #0x3fc
     d6c:	str	wzr, [sp, #220]
     d70:	str	x15, [sp, #264]
     d74:	str	x0, [sp, #280]
     d78:	str	x1, [sp, #288]
     d7c:	ldr	x0, [sp, #264]
     d80:	mov	x24, x26
     d84:	str	wzr, [sp, #148]
     d88:	ldr	w0, [x0]
     d8c:	str	w0, [sp, #208]
     d90:	lsl	w0, w0, #8
     d94:	str	w0, [sp, #216]
     d98:	ldr	w0, [sp, #148]
     d9c:	ldr	w1, [sp, #208]
     da0:	cmp	w1, w0
     da4:	b.eq	1a40 <mainSort+0x10c0>  // b.none
     da8:	ldr	w1, [sp, #216]
     dac:	ldr	x3, [sp, #160]
     db0:	add	w0, w0, w1
     db4:	sxtw	x2, w0
     db8:	str	x2, [sp, #168]
     dbc:	add	x1, x3, w0, sxtw #2
     dc0:	ldr	w0, [x3, x2, lsl #2]
     dc4:	tbnz	w0, #21, 1a34 <mainSort+0x10b4>
     dc8:	ldr	w1, [x1, #4]
     dcc:	and	w2, w0, #0xffdfffff
     dd0:	str	w2, [sp, #184]
     dd4:	and	w1, w1, #0xffdfffff
     dd8:	sub	w28, w1, #0x1
     ddc:	cmp	w2, w28
     de0:	b.ge	1a34 <mainSort+0x10b4>  // b.tcont
     de4:	ldr	w0, [sp, #228]
     de8:	sub	w20, w28, w2
     dec:	str	w20, [sp, #224]
     df0:	cmp	w0, #0x3
     df4:	b.gt	1ec8 <mainSort+0x1548>
     df8:	adrp	x1, 0 <fallbackSort>
     dfc:	add	x1, x1, #0x0
     e00:	mov	w0, #0x2                   	// #2
     e04:	mov	x25, x24
     e08:	mov	w26, w0
     e0c:	mov	w24, w28
     e10:	str	x1, [sp, #136]
     e14:	mov	w19, #0x1                   	// #1
     e18:	ldr	w1, [sp, #184]
     e1c:	str	wzr, [sp, #212]
     e20:	str	w1, [sp, #560]
     e24:	str	w28, [sp, #960]
     e28:	str	w0, [sp, #1360]
     e2c:	cmp	w26, #0xe
     e30:	ccmp	w20, #0x13, #0x4, le
     e34:	b.gt	1d24 <mainSort+0x13a4>
     e38:	add	w2, w20, #0x1
     e3c:	mov	x0, #0x0                   	// #0
     e40:	cmp	w2, #0x1
     e44:	mov	w1, #0x4                   	// #4
     e48:	b.gt	e5c <mainSort+0x4dc>
     e4c:	b	1a00 <mainSort+0x1080>
     e50:	ldr	x1, [sp, #136]
     e54:	add	x1, x1, x0, lsl #2
     e58:	ldr	w1, [x1, #4]
     e5c:	cmp	w2, w1
     e60:	mov	w1, w0
     e64:	add	x0, x0, #0x1
     e68:	b.gt	e50 <mainSort+0x4d0>
     e6c:	ldrsw	x10, [sp, #184]
     e70:	sxtw	x0, w1
     e74:	str	x0, [sp, #152]
     e78:	add	x10, x10, #0x2
     e7c:	str	w24, [sp, #188]
     e80:	lsl	x0, x10, #2
     e84:	str	x0, [sp, #176]
     e88:	ldr	x0, [sp, #136]
     e8c:	ldr	x1, [sp, #152]
     e90:	ldr	w21, [sp, #188]
     e94:	ldr	x22, [sp, #200]
     e98:	ldr	w30, [x0, x1, lsl #2]
     e9c:	ldr	x0, [sp, #176]
     ea0:	ldr	x1, [sp, #192]
     ea4:	add	x5, x1, x0
     ea8:	ldr	w0, [sp, #184]
     eac:	add	w20, w30, w0
     eb0:	neg	w0, w30
     eb4:	add	w19, w20, #0x2
     eb8:	add	w24, w20, #0x1
     ebc:	add	x2, x1, w20, sxtw #2
     ec0:	mov	w28, w20
     ec4:	add	x2, x2, #0x8
     ec8:	sbfiz	x27, x0, #2, #32
     ecc:	sxtw	x0, w30
     ed0:	str	x0, [sp, #96]
     ed4:	nop
     ed8:	cmp	w28, w21
     edc:	b.gt	19ec <mainSort+0x106c>
     ee0:	ldur	w6, [x2, #-8]
     ee4:	sub	x3, x5, #0x8
     ee8:	mov	w4, w28
     eec:	add	w0, w6, w26
     ef0:	add	w7, w6, w26
     ef4:	add	w1, w0, #0x9
     ef8:	add	w11, w0, #0x1
     efc:	add	w10, w0, #0x2
     f00:	add	w9, w0, #0x3
     f04:	add	w12, w0, #0x4
     f08:	add	w14, w0, #0x5
     f0c:	add	w15, w0, #0x6
     f10:	add	w16, w0, #0x7
     f14:	add	w23, w0, #0x8
     f18:	add	x7, x25, x7
     f1c:	str	x1, [sp, #104]
     f20:	add	w1, w0, #0xa
     f24:	str	x1, [sp, #112]
     f28:	add	w1, w0, #0xb
     f2c:	str	x1, [sp, #120]
     f30:	ldr	w1, [x3]
     f34:	mov	w18, w4
     f38:	ldrb	w8, [x7]
     f3c:	sub	w4, w4, w30
     f40:	add	w1, w26, w1
     f44:	mov	x13, x3
     f48:	ldrb	w17, [x25, w1, uxtw]
     f4c:	cmp	w17, w8
     f50:	b.ne	1240 <mainSort+0x8c0>  // b.any
     f54:	add	w8, w1, #0x1
     f58:	ldrb	w17, [x25, x11]
     f5c:	ldrb	w8, [x25, w8, uxtw]
     f60:	cmp	w8, w17
     f64:	b.ne	1240 <mainSort+0x8c0>  // b.any
     f68:	add	w8, w1, #0x2
     f6c:	ldrb	w17, [x25, x10]
     f70:	ldrb	w8, [x25, w8, uxtw]
     f74:	cmp	w8, w17
     f78:	b.ne	1240 <mainSort+0x8c0>  // b.any
     f7c:	add	w8, w1, #0x3
     f80:	ldrb	w17, [x25, x9]
     f84:	ldrb	w8, [x25, w8, uxtw]
     f88:	cmp	w8, w17
     f8c:	b.ne	1240 <mainSort+0x8c0>  // b.any
     f90:	add	w8, w1, #0x4
     f94:	ldrb	w17, [x25, x12]
     f98:	ldrb	w8, [x25, w8, uxtw]
     f9c:	cmp	w8, w17
     fa0:	b.ne	1240 <mainSort+0x8c0>  // b.any
     fa4:	add	w8, w1, #0x5
     fa8:	ldrb	w17, [x25, x14]
     fac:	ldrb	w8, [x25, w8, uxtw]
     fb0:	cmp	w8, w17
     fb4:	b.ne	1240 <mainSort+0x8c0>  // b.any
     fb8:	add	w8, w1, #0x6
     fbc:	ldrb	w17, [x25, x15]
     fc0:	ldrb	w8, [x25, w8, uxtw]
     fc4:	cmp	w8, w17
     fc8:	b.ne	1240 <mainSort+0x8c0>  // b.any
     fcc:	add	w8, w1, #0x7
     fd0:	ldrb	w17, [x25, x16]
     fd4:	ldrb	w8, [x25, w8, uxtw]
     fd8:	cmp	w8, w17
     fdc:	b.ne	1240 <mainSort+0x8c0>  // b.any
     fe0:	add	w8, w1, #0x8
     fe4:	ldrb	w17, [x25, x23]
     fe8:	ldrb	w8, [x25, w8, uxtw]
     fec:	cmp	w8, w17
     ff0:	b.ne	1240 <mainSort+0x8c0>  // b.any
     ff4:	ldr	x17, [sp, #104]
     ff8:	add	w8, w1, #0x9
     ffc:	ldrb	w17, [x25, x17]
    1000:	ldrb	w8, [x25, w8, uxtw]
    1004:	cmp	w8, w17
    1008:	b.ne	1240 <mainSort+0x8c0>  // b.any
    100c:	ldr	x17, [sp, #112]
    1010:	add	w8, w1, #0xa
    1014:	ldrb	w17, [x25, x17]
    1018:	ldrb	w8, [x25, w8, uxtw]
    101c:	cmp	w8, w17
    1020:	b.ne	1240 <mainSort+0x8c0>  // b.any
    1024:	ldr	x17, [sp, #120]
    1028:	add	w8, w1, #0xb
    102c:	ldrb	w17, [x25, x17]
    1030:	ldrb	w8, [x25, w8, uxtw]
    1034:	cmp	w8, w17
    1038:	b.ne	1240 <mainSort+0x8c0>  // b.any
    103c:	ldr	w8, [sp, #232]
    1040:	add	w17, w0, #0xc
    1044:	stp	w6, w0, [sp, #244]
    1048:	add	w1, w1, #0xc
    104c:	add	w8, w8, #0x8
    1050:	str	w18, [sp, #252]
    1054:	ldr	w18, [sp, #232]
    1058:	mov	w0, w8
    105c:	ldr	x6, [sp, #256]
    1060:	str	w30, [sp, #128]
    1064:	stp	w20, w28, [sp, #236]
    1068:	ldrb	w30, [x25, w1, uxtw]
    106c:	mov	w20, w1
    1070:	ldrb	w28, [x25, w17, uxtw]
    1074:	mov	w8, w17
    1078:	cmp	w30, w28
    107c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1080:	ldrh	w20, [x6, x20, lsl #1]
    1084:	ldrh	w8, [x6, x8, lsl #1]
    1088:	cmp	w20, w8
    108c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1090:	add	w20, w1, #0x1
    1094:	add	w8, w17, #0x1
    1098:	add	w30, w1, #0x1
    109c:	add	w28, w17, #0x1
    10a0:	ldrb	w20, [x25, w20, uxtw]
    10a4:	ldrb	w8, [x25, w8, uxtw]
    10a8:	cmp	w20, w8
    10ac:	b.ne	1230 <mainSort+0x8b0>  // b.any
    10b0:	ldrh	w8, [x6, x30, lsl #1]
    10b4:	ldrh	w20, [x6, x28, lsl #1]
    10b8:	cmp	w8, w20
    10bc:	b.ne	1230 <mainSort+0x8b0>  // b.any
    10c0:	add	w30, w1, #0x2
    10c4:	add	w8, w17, #0x2
    10c8:	add	w28, w1, #0x2
    10cc:	add	w20, w17, #0x2
    10d0:	ldrb	w30, [x25, w30, uxtw]
    10d4:	ldrb	w8, [x25, w8, uxtw]
    10d8:	cmp	w30, w8
    10dc:	b.ne	1230 <mainSort+0x8b0>  // b.any
    10e0:	ldrh	w8, [x6, x28, lsl #1]
    10e4:	ldrh	w20, [x6, x20, lsl #1]
    10e8:	cmp	w8, w20
    10ec:	b.ne	1230 <mainSort+0x8b0>  // b.any
    10f0:	add	w30, w1, #0x3
    10f4:	add	w8, w17, #0x3
    10f8:	add	w28, w1, #0x3
    10fc:	add	w20, w17, #0x3
    1100:	ldrb	w30, [x25, w30, uxtw]
    1104:	ldrb	w8, [x25, w8, uxtw]
    1108:	cmp	w30, w8
    110c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1110:	ldrh	w8, [x6, x28, lsl #1]
    1114:	ldrh	w20, [x6, x20, lsl #1]
    1118:	cmp	w8, w20
    111c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1120:	add	w20, w1, #0x4
    1124:	add	w8, w17, #0x4
    1128:	add	w30, w1, #0x4
    112c:	add	w28, w17, #0x4
    1130:	ldrb	w20, [x25, w20, uxtw]
    1134:	ldrb	w8, [x25, w8, uxtw]
    1138:	cmp	w20, w8
    113c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1140:	ldrh	w8, [x6, x30, lsl #1]
    1144:	ldrh	w20, [x6, x28, lsl #1]
    1148:	cmp	w8, w20
    114c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1150:	add	w30, w1, #0x5
    1154:	add	w8, w17, #0x5
    1158:	add	w28, w1, #0x5
    115c:	add	w20, w17, #0x5
    1160:	ldrb	w30, [x25, w30, uxtw]
    1164:	ldrb	w8, [x25, w8, uxtw]
    1168:	cmp	w30, w8
    116c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1170:	ldrh	w8, [x6, x28, lsl #1]
    1174:	ldrh	w20, [x6, x20, lsl #1]
    1178:	cmp	w8, w20
    117c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    1180:	add	w30, w1, #0x6
    1184:	add	w8, w17, #0x6
    1188:	add	w28, w1, #0x6
    118c:	add	w20, w17, #0x6
    1190:	ldrb	w30, [x25, w30, uxtw]
    1194:	ldrb	w8, [x25, w8, uxtw]
    1198:	cmp	w30, w8
    119c:	b.ne	1230 <mainSort+0x8b0>  // b.any
    11a0:	ldrh	w8, [x6, x28, lsl #1]
    11a4:	ldrh	w20, [x6, x20, lsl #1]
    11a8:	cmp	w8, w20
    11ac:	b.ne	1230 <mainSort+0x8b0>  // b.any
    11b0:	add	w30, w1, #0x7
    11b4:	add	w8, w17, #0x7
    11b8:	add	w28, w1, #0x7
    11bc:	add	w20, w17, #0x7
    11c0:	ldrb	w30, [x25, w30, uxtw]
    11c4:	ldrb	w8, [x25, w8, uxtw]
    11c8:	cmp	w30, w8
    11cc:	b.ne	1230 <mainSort+0x8b0>  // b.any
    11d0:	ldrh	w8, [x6, x28, lsl #1]
    11d4:	ldrh	w20, [x6, x20, lsl #1]
    11d8:	cmp	w8, w20
    11dc:	b.ne	1230 <mainSort+0x8b0>  // b.any
    11e0:	ldr	w8, [x22]
    11e4:	add	w1, w1, #0x8
    11e8:	add	w17, w17, #0x8
    11ec:	cmp	w1, w18
    11f0:	sub	w8, w8, #0x1
    11f4:	sub	w20, w1, w18
    11f8:	str	w8, [x22]
    11fc:	csel	w1, w20, w1, cs  // cs = hs, nlast
    1200:	sub	w8, w17, w18
    1204:	cmp	w17, w18
    1208:	csel	w17, w8, w17, cs  // cs = hs, nlast
    120c:	subs	w0, w0, #0x8
    1210:	b.pl	1068 <mainSort+0x6e8>  // b.nfrst
    1214:	ldr	x0, [sp, #192]
    1218:	ldr	w8, [sp, #252]
    121c:	ldr	w30, [sp, #128]
    1220:	ldp	w20, w28, [sp, #236]
    1224:	add	x8, x0, w8, sxtw #2
    1228:	ldr	w6, [sp, #244]
    122c:	b	1268 <mainSort+0x8e8>
    1230:	ldr	w30, [sp, #128]
    1234:	ldp	w20, w28, [sp, #236]
    1238:	ldp	w6, w0, [sp, #244]
    123c:	nop
    1240:	cset	w1, hi  // hi = pmore
    1244:	add	x8, x3, w30, sxtw #2
    1248:	cbz	w1, 1268 <mainSort+0x8e8>
    124c:	ldr	x8, [sp, #96]
    1250:	cmp	w20, w4
    1254:	ldr	w1, [x3]
    1258:	str	w1, [x3, x8, lsl #2]
    125c:	add	x3, x3, x27
    1260:	b.le	f30 <mainSort+0x5b0>
    1264:	mov	x8, x13
    1268:	str	w6, [x8]
    126c:	cmp	w24, w21
    1270:	mov	w6, w24
    1274:	b.gt	19ec <mainSort+0x106c>
    1278:	mov	x3, x2
    127c:	sub	x4, x5, #0x4
    1280:	ldr	w8, [x3, #-4]!
    1284:	add	w0, w8, w26
    1288:	add	w9, w8, w26
    128c:	add	w1, w0, #0x8
    1290:	str	x1, [sp, #104]
    1294:	add	w1, w0, #0x9
    1298:	add	w12, w0, #0x1
    129c:	add	w11, w0, #0x2
    12a0:	add	w10, w0, #0x3
    12a4:	add	w13, w0, #0x4
    12a8:	add	w15, w0, #0x5
    12ac:	add	w16, w0, #0x6
    12b0:	add	w23, w0, #0x7
    12b4:	add	x9, x25, x9
    12b8:	str	x1, [sp, #112]
    12bc:	add	w1, w0, #0xa
    12c0:	str	x1, [sp, #120]
    12c4:	add	w1, w0, #0xb
    12c8:	str	x1, [sp, #128]
    12cc:	nop
    12d0:	ldr	w1, [x4]
    12d4:	mov	w18, w6
    12d8:	ldrb	w7, [x9]
    12dc:	sub	w6, w6, w30
    12e0:	add	w1, w26, w1
    12e4:	mov	x14, x4
    12e8:	ldrb	w17, [x25, w1, uxtw]
    12ec:	cmp	w17, w7
    12f0:	b.ne	15e0 <mainSort+0xc60>  // b.any
    12f4:	add	w7, w1, #0x1
    12f8:	ldrb	w17, [x25, x12]
    12fc:	ldrb	w7, [x25, w7, uxtw]
    1300:	cmp	w7, w17
    1304:	b.ne	15e0 <mainSort+0xc60>  // b.any
    1308:	add	w7, w1, #0x2
    130c:	ldrb	w17, [x25, x11]
    1310:	ldrb	w7, [x25, w7, uxtw]
    1314:	cmp	w7, w17
    1318:	b.ne	15e0 <mainSort+0xc60>  // b.any
    131c:	add	w7, w1, #0x3
    1320:	ldrb	w17, [x25, x10]
    1324:	ldrb	w7, [x25, w7, uxtw]
    1328:	cmp	w7, w17
    132c:	b.ne	15e0 <mainSort+0xc60>  // b.any
    1330:	add	w7, w1, #0x4
    1334:	ldrb	w17, [x25, x13]
    1338:	ldrb	w7, [x25, w7, uxtw]
    133c:	cmp	w7, w17
    1340:	b.ne	15e0 <mainSort+0xc60>  // b.any
    1344:	add	w7, w1, #0x5
    1348:	ldrb	w17, [x25, x15]
    134c:	ldrb	w7, [x25, w7, uxtw]
    1350:	cmp	w7, w17
    1354:	b.ne	15e0 <mainSort+0xc60>  // b.any
    1358:	add	w7, w1, #0x6
    135c:	ldrb	w17, [x25, x16]
    1360:	ldrb	w7, [x25, w7, uxtw]
    1364:	cmp	w7, w17
    1368:	b.ne	15e0 <mainSort+0xc60>  // b.any
    136c:	add	w7, w1, #0x7
    1370:	ldrb	w17, [x25, x23]
    1374:	ldrb	w7, [x25, w7, uxtw]
    1378:	cmp	w7, w17
    137c:	b.ne	15e0 <mainSort+0xc60>  // b.any
    1380:	ldr	x17, [sp, #104]
    1384:	add	w7, w1, #0x8
    1388:	ldrb	w17, [x25, x17]
    138c:	ldrb	w7, [x25, w7, uxtw]
    1390:	cmp	w7, w17
    1394:	b.ne	15e0 <mainSort+0xc60>  // b.any
    1398:	ldr	x17, [sp, #112]
    139c:	add	w7, w1, #0x9
    13a0:	ldrb	w17, [x25, x17]
    13a4:	ldrb	w7, [x25, w7, uxtw]
    13a8:	cmp	w7, w17
    13ac:	b.ne	15e0 <mainSort+0xc60>  // b.any
    13b0:	ldr	x17, [sp, #120]
    13b4:	add	w7, w1, #0xa
    13b8:	ldrb	w17, [x25, x17]
    13bc:	ldrb	w7, [x25, w7, uxtw]
    13c0:	cmp	w7, w17
    13c4:	b.ne	15e0 <mainSort+0xc60>  // b.any
    13c8:	ldr	x17, [sp, #128]
    13cc:	add	w7, w1, #0xb
    13d0:	ldrb	w17, [x25, x17]
    13d4:	ldrb	w7, [x25, w7, uxtw]
    13d8:	cmp	w7, w17
    13dc:	b.ne	15e0 <mainSort+0xc60>  // b.any
    13e0:	ldr	w7, [sp, #232]
    13e4:	add	w17, w0, #0xc
    13e8:	str	w0, [sp, #252]
    13ec:	add	w1, w1, #0xc
    13f0:	add	w7, w7, #0x8
    13f4:	str	w18, [sp, #276]
    13f8:	mov	w0, w7
    13fc:	ldr	w18, [sp, #232]
    1400:	ldr	x7, [sp, #256]
    1404:	stp	w30, w20, [sp, #236]
    1408:	stp	w28, w8, [sp, #244]
    140c:	ldrb	w30, [x25, w1, uxtw]
    1410:	mov	w20, w1
    1414:	ldrb	w28, [x25, w17, uxtw]
    1418:	mov	w8, w17
    141c:	cmp	w30, w28
    1420:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1424:	ldrh	w20, [x7, x20, lsl #1]
    1428:	ldrh	w8, [x7, x8, lsl #1]
    142c:	cmp	w20, w8
    1430:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1434:	add	w30, w1, #0x1
    1438:	add	w8, w17, #0x1
    143c:	add	w28, w1, #0x1
    1440:	add	w20, w17, #0x1
    1444:	ldrb	w30, [x25, w30, uxtw]
    1448:	ldrb	w8, [x25, w8, uxtw]
    144c:	cmp	w30, w8
    1450:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1454:	ldrh	w8, [x7, x28, lsl #1]
    1458:	ldrh	w20, [x7, x20, lsl #1]
    145c:	cmp	w8, w20
    1460:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1464:	add	w30, w1, #0x2
    1468:	add	w8, w17, #0x2
    146c:	add	w28, w1, #0x2
    1470:	add	w20, w17, #0x2
    1474:	ldrb	w30, [x25, w30, uxtw]
    1478:	ldrb	w8, [x25, w8, uxtw]
    147c:	cmp	w30, w8
    1480:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1484:	ldrh	w8, [x7, x28, lsl #1]
    1488:	ldrh	w20, [x7, x20, lsl #1]
    148c:	cmp	w8, w20
    1490:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1494:	add	w30, w1, #0x3
    1498:	add	w8, w17, #0x3
    149c:	add	w28, w1, #0x3
    14a0:	add	w20, w17, #0x3
    14a4:	ldrb	w30, [x25, w30, uxtw]
    14a8:	ldrb	w8, [x25, w8, uxtw]
    14ac:	cmp	w30, w8
    14b0:	b.ne	15d0 <mainSort+0xc50>  // b.any
    14b4:	ldrh	w8, [x7, x28, lsl #1]
    14b8:	ldrh	w20, [x7, x20, lsl #1]
    14bc:	cmp	w8, w20
    14c0:	b.ne	15d0 <mainSort+0xc50>  // b.any
    14c4:	add	w30, w1, #0x4
    14c8:	add	w8, w17, #0x4
    14cc:	add	w28, w1, #0x4
    14d0:	add	w20, w17, #0x4
    14d4:	ldrb	w30, [x25, w30, uxtw]
    14d8:	ldrb	w8, [x25, w8, uxtw]
    14dc:	cmp	w30, w8
    14e0:	b.ne	15d0 <mainSort+0xc50>  // b.any
    14e4:	ldrh	w8, [x7, x28, lsl #1]
    14e8:	ldrh	w20, [x7, x20, lsl #1]
    14ec:	cmp	w8, w20
    14f0:	b.ne	15d0 <mainSort+0xc50>  // b.any
    14f4:	add	w30, w1, #0x5
    14f8:	add	w8, w17, #0x5
    14fc:	add	w28, w1, #0x5
    1500:	add	w20, w17, #0x5
    1504:	ldrb	w30, [x25, w30, uxtw]
    1508:	ldrb	w8, [x25, w8, uxtw]
    150c:	cmp	w30, w8
    1510:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1514:	ldrh	w8, [x7, x28, lsl #1]
    1518:	ldrh	w20, [x7, x20, lsl #1]
    151c:	cmp	w8, w20
    1520:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1524:	add	w30, w1, #0x6
    1528:	add	w8, w17, #0x6
    152c:	add	w28, w1, #0x6
    1530:	add	w20, w17, #0x6
    1534:	ldrb	w30, [x25, w30, uxtw]
    1538:	ldrb	w8, [x25, w8, uxtw]
    153c:	cmp	w30, w8
    1540:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1544:	ldrh	w8, [x7, x28, lsl #1]
    1548:	ldrh	w20, [x7, x20, lsl #1]
    154c:	cmp	w8, w20
    1550:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1554:	add	w30, w1, #0x7
    1558:	add	w8, w17, #0x7
    155c:	add	w28, w1, #0x7
    1560:	add	w20, w17, #0x7
    1564:	ldrb	w30, [x25, w30, uxtw]
    1568:	ldrb	w8, [x25, w8, uxtw]
    156c:	cmp	w30, w8
    1570:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1574:	ldrh	w8, [x7, x28, lsl #1]
    1578:	ldrh	w20, [x7, x20, lsl #1]
    157c:	cmp	w8, w20
    1580:	b.ne	15d0 <mainSort+0xc50>  // b.any
    1584:	ldr	w8, [x22]
    1588:	add	w1, w1, #0x8
    158c:	add	w17, w17, #0x8
    1590:	cmp	w1, w18
    1594:	sub	w8, w8, #0x1
    1598:	sub	w20, w1, w18
    159c:	str	w8, [x22]
    15a0:	csel	w1, w20, w1, cs  // cs = hs, nlast
    15a4:	sub	w8, w17, w18
    15a8:	cmp	w17, w18
    15ac:	csel	w17, w8, w17, cs  // cs = hs, nlast
    15b0:	subs	w0, w0, #0x8
    15b4:	b.pl	140c <mainSort+0xa8c>  // b.nfrst
    15b8:	ldr	x0, [sp, #192]
    15bc:	ldr	w7, [sp, #276]
    15c0:	ldp	w30, w20, [sp, #236]
    15c4:	ldp	w28, w8, [sp, #244]
    15c8:	add	x7, x0, w7, sxtw #2
    15cc:	b	1608 <mainSort+0xc88>
    15d0:	ldp	w30, w20, [sp, #236]
    15d4:	ldp	w28, w8, [sp, #244]
    15d8:	ldr	w0, [sp, #252]
    15dc:	nop
    15e0:	cset	w1, hi  // hi = pmore
    15e4:	mov	x7, x3
    15e8:	cbz	w1, 1608 <mainSort+0xc88>
    15ec:	ldr	w1, [x4]
    15f0:	cmp	w20, w6
    15f4:	str	w1, [x3]
    15f8:	add	x4, x4, x27
    15fc:	add	x3, x7, x27
    1600:	b.le	12d0 <mainSort+0x950>
    1604:	mov	x7, x14
    1608:	str	w8, [x7]
    160c:	cmp	w19, w21
    1610:	mov	w4, w19
    1614:	b.gt	19ec <mainSort+0x106c>
    1618:	ldr	w7, [x2]
    161c:	mov	x9, x2
    1620:	mov	x3, x5
    1624:	add	w0, w7, w26
    1628:	add	w8, w7, w26
    162c:	add	w1, w0, #0x8
    1630:	str	x1, [sp, #104]
    1634:	add	w1, w0, #0x9
    1638:	add	w12, w0, #0x1
    163c:	add	w11, w0, #0x2
    1640:	add	w10, w0, #0x3
    1644:	add	w13, w0, #0x4
    1648:	add	w15, w0, #0x5
    164c:	add	w16, w0, #0x6
    1650:	add	w23, w0, #0x7
    1654:	add	x8, x25, x8
    1658:	str	x1, [sp, #112]
    165c:	add	w1, w0, #0xa
    1660:	str	x1, [sp, #120]
    1664:	add	w1, w0, #0xb
    1668:	str	x1, [sp, #128]
    166c:	nop
    1670:	ldr	w1, [x3]
    1674:	mov	w18, w4
    1678:	ldrb	w6, [x8]
    167c:	sub	w4, w4, w30
    1680:	add	w1, w26, w1
    1684:	mov	x14, x3
    1688:	ldrb	w17, [x25, w1, uxtw]
    168c:	cmp	w17, w6
    1690:	b.ne	1980 <mainSort+0x1000>  // b.any
    1694:	add	w6, w1, #0x1
    1698:	ldrb	w17, [x25, x12]
    169c:	ldrb	w6, [x25, w6, uxtw]
    16a0:	cmp	w6, w17
    16a4:	b.ne	1980 <mainSort+0x1000>  // b.any
    16a8:	add	w6, w1, #0x2
    16ac:	ldrb	w17, [x25, x11]
    16b0:	ldrb	w6, [x25, w6, uxtw]
    16b4:	cmp	w6, w17
    16b8:	b.ne	1980 <mainSort+0x1000>  // b.any
    16bc:	add	w6, w1, #0x3
    16c0:	ldrb	w17, [x25, x10]
    16c4:	ldrb	w6, [x25, w6, uxtw]
    16c8:	cmp	w6, w17
    16cc:	b.ne	1980 <mainSort+0x1000>  // b.any
    16d0:	add	w6, w1, #0x4
    16d4:	ldrb	w17, [x25, x13]
    16d8:	ldrb	w6, [x25, w6, uxtw]
    16dc:	cmp	w6, w17
    16e0:	b.ne	1980 <mainSort+0x1000>  // b.any
    16e4:	add	w6, w1, #0x5
    16e8:	ldrb	w17, [x25, x15]
    16ec:	ldrb	w6, [x25, w6, uxtw]
    16f0:	cmp	w6, w17
    16f4:	b.ne	1980 <mainSort+0x1000>  // b.any
    16f8:	add	w6, w1, #0x6
    16fc:	ldrb	w17, [x25, x16]
    1700:	ldrb	w6, [x25, w6, uxtw]
    1704:	cmp	w6, w17
    1708:	b.ne	1980 <mainSort+0x1000>  // b.any
    170c:	add	w6, w1, #0x7
    1710:	ldrb	w17, [x25, x23]
    1714:	ldrb	w6, [x25, w6, uxtw]
    1718:	cmp	w6, w17
    171c:	b.ne	1980 <mainSort+0x1000>  // b.any
    1720:	ldr	x17, [sp, #104]
    1724:	add	w6, w1, #0x8
    1728:	ldrb	w17, [x25, x17]
    172c:	ldrb	w6, [x25, w6, uxtw]
    1730:	cmp	w6, w17
    1734:	b.ne	1980 <mainSort+0x1000>  // b.any
    1738:	ldr	x17, [sp, #112]
    173c:	add	w6, w1, #0x9
    1740:	ldrb	w17, [x25, x17]
    1744:	ldrb	w6, [x25, w6, uxtw]
    1748:	cmp	w6, w17
    174c:	b.ne	1980 <mainSort+0x1000>  // b.any
    1750:	ldr	x17, [sp, #120]
    1754:	add	w6, w1, #0xa
    1758:	ldrb	w17, [x25, x17]
    175c:	ldrb	w6, [x25, w6, uxtw]
    1760:	cmp	w6, w17
    1764:	b.ne	1980 <mainSort+0x1000>  // b.any
    1768:	ldr	x17, [sp, #128]
    176c:	add	w6, w1, #0xb
    1770:	ldrb	w17, [x25, x17]
    1774:	ldrb	w6, [x25, w6, uxtw]
    1778:	cmp	w6, w17
    177c:	b.ne	1980 <mainSort+0x1000>  // b.any
    1780:	ldr	w6, [sp, #232]
    1784:	add	w17, w0, #0xc
    1788:	str	w0, [sp, #252]
    178c:	add	w1, w1, #0xc
    1790:	add	w6, w6, #0x8
    1794:	str	w18, [sp, #276]
    1798:	mov	w0, w6
    179c:	ldr	w18, [sp, #232]
    17a0:	ldr	x6, [sp, #256]
    17a4:	stp	w30, w20, [sp, #236]
    17a8:	stp	w28, w7, [sp, #244]
    17ac:	ldrb	w30, [x25, w1, uxtw]
    17b0:	mov	w20, w1
    17b4:	ldrb	w28, [x25, w17, uxtw]
    17b8:	mov	w7, w17
    17bc:	cmp	w30, w28
    17c0:	b.ne	1970 <mainSort+0xff0>  // b.any
    17c4:	ldrh	w20, [x6, x20, lsl #1]
    17c8:	ldrh	w7, [x6, x7, lsl #1]
    17cc:	cmp	w20, w7
    17d0:	b.ne	1970 <mainSort+0xff0>  // b.any
    17d4:	add	w30, w1, #0x1
    17d8:	add	w7, w17, #0x1
    17dc:	add	w28, w1, #0x1
    17e0:	add	w20, w17, #0x1
    17e4:	ldrb	w30, [x25, w30, uxtw]
    17e8:	ldrb	w7, [x25, w7, uxtw]
    17ec:	cmp	w30, w7
    17f0:	b.ne	1970 <mainSort+0xff0>  // b.any
    17f4:	ldrh	w7, [x6, x28, lsl #1]
    17f8:	ldrh	w20, [x6, x20, lsl #1]
    17fc:	cmp	w7, w20
    1800:	b.ne	1970 <mainSort+0xff0>  // b.any
    1804:	add	w30, w1, #0x2
    1808:	add	w7, w17, #0x2
    180c:	add	w28, w1, #0x2
    1810:	add	w20, w17, #0x2
    1814:	ldrb	w30, [x25, w30, uxtw]
    1818:	ldrb	w7, [x25, w7, uxtw]
    181c:	cmp	w30, w7
    1820:	b.ne	1970 <mainSort+0xff0>  // b.any
    1824:	ldrh	w7, [x6, x28, lsl #1]
    1828:	ldrh	w20, [x6, x20, lsl #1]
    182c:	cmp	w7, w20
    1830:	b.ne	1970 <mainSort+0xff0>  // b.any
    1834:	add	w30, w1, #0x3
    1838:	add	w7, w17, #0x3
    183c:	add	w28, w1, #0x3
    1840:	add	w20, w17, #0x3
    1844:	ldrb	w30, [x25, w30, uxtw]
    1848:	ldrb	w7, [x25, w7, uxtw]
    184c:	cmp	w30, w7
    1850:	b.ne	1970 <mainSort+0xff0>  // b.any
    1854:	ldrh	w7, [x6, x28, lsl #1]
    1858:	ldrh	w20, [x6, x20, lsl #1]
    185c:	cmp	w7, w20
    1860:	b.ne	1970 <mainSort+0xff0>  // b.any
    1864:	add	w30, w1, #0x4
    1868:	add	w7, w17, #0x4
    186c:	add	w28, w1, #0x4
    1870:	add	w20, w17, #0x4
    1874:	ldrb	w30, [x25, w30, uxtw]
    1878:	ldrb	w7, [x25, w7, uxtw]
    187c:	cmp	w30, w7
    1880:	b.ne	1970 <mainSort+0xff0>  // b.any
    1884:	ldrh	w7, [x6, x28, lsl #1]
    1888:	ldrh	w20, [x6, x20, lsl #1]
    188c:	cmp	w7, w20
    1890:	b.ne	1970 <mainSort+0xff0>  // b.any
    1894:	add	w30, w1, #0x5
    1898:	add	w7, w17, #0x5
    189c:	add	w28, w1, #0x5
    18a0:	add	w20, w17, #0x5
    18a4:	ldrb	w30, [x25, w30, uxtw]
    18a8:	ldrb	w7, [x25, w7, uxtw]
    18ac:	cmp	w30, w7
    18b0:	b.ne	1970 <mainSort+0xff0>  // b.any
    18b4:	ldrh	w7, [x6, x28, lsl #1]
    18b8:	ldrh	w20, [x6, x20, lsl #1]
    18bc:	cmp	w7, w20
    18c0:	b.ne	1970 <mainSort+0xff0>  // b.any
    18c4:	add	w20, w1, #0x6
    18c8:	add	w7, w17, #0x6
    18cc:	add	w30, w1, #0x6
    18d0:	add	w28, w17, #0x6
    18d4:	ldrb	w20, [x25, w20, uxtw]
    18d8:	ldrb	w7, [x25, w7, uxtw]
    18dc:	cmp	w20, w7
    18e0:	b.ne	1970 <mainSort+0xff0>  // b.any
    18e4:	ldrh	w7, [x6, x30, lsl #1]
    18e8:	ldrh	w20, [x6, x28, lsl #1]
    18ec:	cmp	w7, w20
    18f0:	b.ne	1970 <mainSort+0xff0>  // b.any
    18f4:	add	w30, w1, #0x7
    18f8:	add	w7, w17, #0x7
    18fc:	add	w28, w1, #0x7
    1900:	add	w20, w17, #0x7
    1904:	ldrb	w30, [x25, w30, uxtw]
    1908:	ldrb	w7, [x25, w7, uxtw]
    190c:	cmp	w30, w7
    1910:	b.ne	1970 <mainSort+0xff0>  // b.any
    1914:	ldrh	w7, [x6, x28, lsl #1]
    1918:	ldrh	w20, [x6, x20, lsl #1]
    191c:	cmp	w7, w20
    1920:	b.ne	1970 <mainSort+0xff0>  // b.any
    1924:	ldr	w7, [x22]
    1928:	add	w1, w1, #0x8
    192c:	add	w17, w17, #0x8
    1930:	cmp	w1, w18
    1934:	sub	w7, w7, #0x1
    1938:	sub	w20, w1, w18
    193c:	str	w7, [x22]
    1940:	csel	w1, w20, w1, cs  // cs = hs, nlast
    1944:	sub	w7, w17, w18
    1948:	cmp	w17, w18
    194c:	csel	w17, w7, w17, cs  // cs = hs, nlast
    1950:	subs	w0, w0, #0x8
    1954:	b.pl	17ac <mainSort+0xe2c>  // b.nfrst
    1958:	ldr	x0, [sp, #192]
    195c:	ldr	w6, [sp, #276]
    1960:	ldp	w30, w20, [sp, #236]
    1964:	ldp	w28, w7, [sp, #244]
    1968:	add	x6, x0, w6, sxtw #2
    196c:	b	19a8 <mainSort+0x1028>
    1970:	ldp	w30, w20, [sp, #236]
    1974:	ldp	w28, w7, [sp, #244]
    1978:	ldr	w0, [sp, #252]
    197c:	nop
    1980:	cset	w1, hi  // hi = pmore
    1984:	mov	x6, x9
    1988:	cbz	w1, 19a8 <mainSort+0x1028>
    198c:	ldr	w1, [x3]
    1990:	cmp	w20, w4
    1994:	str	w1, [x9]
    1998:	add	x3, x3, x27
    199c:	add	x9, x6, x27
    19a0:	b.le	1670 <mainSort+0xcf0>
    19a4:	mov	x6, x14
    19a8:	str	w7, [x6]
    19ac:	add	w28, w28, #0x3
    19b0:	add	w19, w19, #0x3
    19b4:	add	x5, x5, #0xc
    19b8:	ldr	w0, [x22]
    19bc:	add	x2, x2, #0xc
    19c0:	add	w24, w24, #0x3
    19c4:	tbz	w0, #31, ed8 <mainSort+0x558>
    19c8:	mov	x12, #0x12e0                	// #4832
    19cc:	ldp	x29, x30, [sp]
    19d0:	ldp	x19, x20, [sp, #16]
    19d4:	ldp	x21, x22, [sp, #32]
    19d8:	ldp	x23, x24, [sp, #48]
    19dc:	ldp	x25, x26, [sp, #64]
    19e0:	ldp	x27, x28, [sp, #80]
    19e4:	add	sp, sp, x12
    19e8:	ret
    19ec:	ldr	x0, [sp, #152]
    19f0:	sub	x0, x0, #0x1
    19f4:	str	x0, [sp, #152]
    19f8:	cmn	w0, #0x1
    19fc:	b.ne	e88 <mainSort+0x508>  // b.any
    1a00:	ldr	x0, [sp, #200]
    1a04:	ldr	w0, [x0]
    1a08:	tbnz	w0, #31, 19c8 <mainSort+0x1048>
    1a0c:	ldr	w0, [sp, #212]
    1a10:	cbnz	w0, 2138 <mainSort+0x17b8>
    1a14:	ldr	w0, [sp, #224]
    1a18:	mov	x24, x25
    1a1c:	add	w1, w0, #0x1
    1a20:	ldp	x0, x2, [sp, #160]
    1a24:	ldr	w0, [x0, x2, lsl #2]
    1a28:	ldr	w2, [sp, #220]
    1a2c:	add	w1, w2, w1
    1a30:	str	w1, [sp, #220]
    1a34:	ldp	x1, x2, [sp, #160]
    1a38:	orr	w0, w0, #0x200000
    1a3c:	str	w0, [x1, x2, lsl #2]
    1a40:	ldr	w0, [sp, #148]
    1a44:	add	w0, w0, #0x1
    1a48:	str	w0, [sp, #148]
    1a4c:	cmp	w0, #0x100
    1a50:	b.ne	d98 <mainSort+0x418>  // b.any
    1a54:	ldr	w1, [sp, #208]
    1a58:	add	x0, sp, #0x130
    1a5c:	mov	x26, x24
    1a60:	sxtw	x21, w1
    1a64:	ldrb	w0, [x0, w1, sxtw]
    1a68:	cbnz	w0, 2110 <mainSort+0x1790>
    1a6c:	ldr	x0, [sp, #160]
    1a70:	lsl	x20, x21, #2
    1a74:	add	x7, sp, #0xae0
    1a78:	add	x6, sp, #0xee0
    1a7c:	add	x19, x0, x20
    1a80:	mov	x2, #0x1                   	// #1
    1a84:	mov	x3, x19
    1a88:	ldp	w4, w0, [x3]
    1a8c:	lsl	x1, x2, #2
    1a90:	add	x5, x6, x1
    1a94:	add	x1, x7, x1
    1a98:	and	w0, w0, #0xffdfffff
    1a9c:	and	w4, w4, #0xffdfffff
    1aa0:	sub	w0, w0, #0x1
    1aa4:	add	x2, x2, #0x1
    1aa8:	stur	w4, [x1, #-4]
    1aac:	cmp	x2, #0x101
    1ab0:	stur	w0, [x5, #-4]
    1ab4:	add	x3, x3, #0x400
    1ab8:	b.ne	1a88 <mainSort+0x1108>  // b.any
    1abc:	ldrsw	x22, [sp, #216]
    1ac0:	lsl	x4, x21, #2
    1ac4:	ldr	x0, [sp, #160]
    1ac8:	ldr	w3, [x7, x21, lsl #2]
    1acc:	ldr	w1, [x0, x22, lsl #2]
    1ad0:	and	w1, w1, #0xffdfffff
    1ad4:	cmp	w1, w3
    1ad8:	b.ge	1b28 <mainSort+0x11a8>  // b.tcont
    1adc:	ldr	w8, [sp, #232]
    1ae0:	sxtw	x1, w1
    1ae4:	ldr	x5, [sp, #192]
    1ae8:	add	x9, sp, #0x130
    1aec:	ldr	w0, [x5, x1, lsl #2]
    1af0:	add	x1, x1, #0x1
    1af4:	subs	w0, w0, #0x1
    1af8:	add	w2, w0, w8
    1afc:	csel	w0, w2, w0, mi  // mi = first
    1b00:	ldrb	w3, [x26, w0, sxtw]
    1b04:	ldrb	w2, [x9, w3, sxtw]
    1b08:	cbnz	w2, 1b1c <mainSort+0x119c>
    1b0c:	ldr	w2, [x7, x3, lsl #2]
    1b10:	add	w9, w2, #0x1
    1b14:	str	w9, [x7, x3, lsl #2]
    1b18:	str	w0, [x5, w2, sxtw #2]
    1b1c:	ldr	w3, [x7, x4]
    1b20:	cmp	w3, w1
    1b24:	b.gt	1ae8 <mainSort+0x1168>
    1b28:	ldr	w0, [sp, #208]
    1b2c:	lsl	x5, x21, #2
    1b30:	ldr	x1, [sp, #160]
    1b34:	add	w23, w0, #0x1
    1b38:	ldr	w0, [x6, x21, lsl #2]
    1b3c:	lsl	w23, w23, #8
    1b40:	sxtw	x23, w23
    1b44:	ldr	w1, [x1, x23, lsl #2]
    1b48:	and	w1, w1, #0xffdfffff
    1b4c:	sub	w1, w1, #0x1
    1b50:	cmp	w1, w0
    1b54:	b.le	1ba8 <mainSort+0x1228>
    1b58:	ldr	w8, [sp, #232]
    1b5c:	sxtw	x1, w1
    1b60:	ldr	x7, [sp, #192]
    1b64:	nop
    1b68:	add	x9, sp, #0x130
    1b6c:	ldr	w0, [x7, x1, lsl #2]
    1b70:	sub	x1, x1, #0x1
    1b74:	subs	w0, w0, #0x1
    1b78:	add	w2, w0, w8
    1b7c:	csel	w0, w2, w0, mi  // mi = first
    1b80:	ldrb	w4, [x26, w0, sxtw]
    1b84:	ldrb	w2, [x9, w4, sxtw]
    1b88:	cbnz	w2, 1b9c <mainSort+0x121c>
    1b8c:	ldr	w2, [x6, x4, lsl #2]
    1b90:	sub	w9, w2, #0x1
    1b94:	str	w9, [x6, x4, lsl #2]
    1b98:	str	w0, [x7, w2, sxtw #2]
    1b9c:	ldr	w0, [x6, x5]
    1ba0:	cmp	w0, w1
    1ba4:	b.lt	1b68 <mainSort+0x11e8>  // b.tstop
    1ba8:	sub	w1, w3, #0x1
    1bac:	cmp	w1, w0
    1bb0:	b.eq	1bcc <mainSort+0x124c>  // b.none
    1bb4:	ldr	w1, [sp, #272]
    1bb8:	cmp	w3, #0x0
    1bbc:	ccmp	w1, w0, #0x0, eq  // eq = none
    1bc0:	b.eq	1bcc <mainSort+0x124c>  // b.none
    1bc4:	mov	w0, #0x3ef                 	// #1007
    1bc8:	bl	0 <BZ2_bz__AssertH__fail>
    1bcc:	ldr	x0, [sp, #296]
    1bd0:	add	x1, x0, x20
    1bd4:	nop
    1bd8:	ldr	w0, [x19]
    1bdc:	orr	w0, w0, #0x200000
    1be0:	str	w0, [x19]
    1be4:	add	x19, x19, #0x400
    1be8:	cmp	x1, x19
    1bec:	b.ne	1bd8 <mainSort+0x1258>  // b.any
    1bf0:	ldr	w1, [sp, #208]
    1bf4:	add	x2, sp, #0x130
    1bf8:	mov	w0, #0x1                   	// #1
    1bfc:	strb	w0, [x2, w1, sxtw]
    1c00:	ldr	x1, [sp, #264]
    1c04:	ldr	x0, [sp, #280]
    1c08:	cmp	x0, x1
    1c0c:	b.eq	1cb8 <mainSort+0x1338>  // b.none
    1c10:	ldr	x0, [sp, #160]
    1c14:	mov	w3, #0xfffe                	// #65534
    1c18:	ldr	w4, [x0, x22, lsl #2]
    1c1c:	ldr	w0, [x0, x23, lsl #2]
    1c20:	and	w4, w4, #0xffdfffff
    1c24:	and	w0, w0, #0xffdfffff
    1c28:	sub	w0, w0, w4
    1c2c:	sub	w6, w0, #0x1
    1c30:	cmp	w0, w3
    1c34:	b.le	211c <mainSort+0x179c>
    1c38:	mov	w1, #0x0                   	// #0
    1c3c:	add	w1, w1, #0x1
    1c40:	asr	w2, w0, w1
    1c44:	cmp	w2, w3
    1c48:	b.gt	1c3c <mainSort+0x12bc>
    1c4c:	ldr	x0, [sp, #192]
    1c50:	ldr	w8, [sp, #232]
    1c54:	ldr	x5, [sp, #256]
    1c58:	add	x4, x0, w4, sxtw #2
    1c5c:	sxtw	x0, w6
    1c60:	ldr	w3, [x4, x0, lsl #2]
    1c64:	asr	w2, w0, w1
    1c68:	and	w2, w2, #0xffff
    1c6c:	sub	x0, x0, #0x1
    1c70:	add	w7, w8, w3
    1c74:	cmp	w3, #0x21
    1c78:	strh	w2, [x5, w3, sxtw #1]
    1c7c:	b.gt	1c84 <mainSort+0x1304>
    1c80:	strh	w2, [x5, w7, sxtw #1]
    1c84:	tbz	w0, #31, 1c60 <mainSort+0x12e0>
    1c88:	asr	w1, w6, w1
    1c8c:	mov	w0, #0xffff                	// #65535
    1c90:	cmp	w1, w0
    1c94:	b.le	1ca0 <mainSort+0x1320>
    1c98:	mov	w0, #0x3ea                 	// #1002
    1c9c:	bl	0 <BZ2_bz__AssertH__fail>
    1ca0:	ldr	x0, [sp, #264]
    1ca4:	ldr	x1, [sp, #288]
    1ca8:	add	x0, x0, #0x4
    1cac:	str	x0, [sp, #264]
    1cb0:	cmp	x1, x0
    1cb4:	b.ne	d7c <mainSort+0x3fc>  // b.any
    1cb8:	ldr	w0, [sp, #228]
    1cbc:	cmp	w0, #0x3
    1cc0:	b.le	19c8 <mainSort+0x1048>
    1cc4:	adrp	x0, 0 <stderr>
    1cc8:	ldr	w3, [sp, #220]
    1ccc:	ldp	x29, x30, [sp]
    1cd0:	mov	x12, #0x12e0                	// #4832
    1cd4:	ldp	x19, x20, [sp, #16]
    1cd8:	adrp	x1, 0 <fallbackSort>
    1cdc:	ldp	x21, x22, [sp, #32]
    1ce0:	add	x1, x1, #0x0
    1ce4:	ldp	x23, x24, [sp, #48]
    1ce8:	ldp	x25, x26, [sp, #64]
    1cec:	ldp	x27, x28, [sp, #80]
    1cf0:	ldr	w2, [sp, #232]
    1cf4:	ldr	x0, [x0]
    1cf8:	sub	w4, w2, w3
    1cfc:	add	sp, sp, x12
    1d00:	b	0 <fprintf>
    1d04:	mov	w7, w4
    1d08:	add	x12, x12, #0x1
    1d0c:	cmp	w12, #0xff
    1d10:	add	x16, x16, #0x1
    1d14:	add	x13, x13, #0x4
    1d18:	str	w14, [x15, w7, sxtw #2]
    1d1c:	b.le	cd8 <mainSort+0x358>
    1d20:	b	d58 <mainSort+0x3d8>
    1d24:	ldr	w2, [sp, #184]
    1d28:	ldr	x1, [sp, #192]
    1d2c:	add	w0, w2, w24
    1d30:	sxtw	x10, w2
    1d34:	asr	w0, w0, #1
    1d38:	add	x12, x1, w2, sxtw #2
    1d3c:	mov	x2, x1
    1d40:	ldr	w3, [x1, w24, sxtw #2]
    1d44:	ldr	w1, [x1, x10, lsl #2]
    1d48:	ldr	w2, [x2, w0, sxtw #2]
    1d4c:	add	w3, w26, w3
    1d50:	add	w4, w1, w26
    1d54:	add	w2, w26, w2
    1d58:	ldrb	w6, [x25, w3, uxtw]
    1d5c:	ldrb	w0, [x25, w4, uxtw]
    1d60:	ldrb	w2, [x25, w2, uxtw]
    1d64:	cmp	w0, w6
    1d68:	csel	w3, w0, w6, ls  // ls = plast
    1d6c:	csel	w6, w6, w0, ls  // ls = plast
    1d70:	cmp	w2, w6
    1d74:	b.cs	1d84 <mainSort+0x1404>  // b.hs, b.nlast
    1d78:	cmp	w3, w2
    1d7c:	csel	w2, w3, w2, hi  // hi = pmore
    1d80:	and	w6, w2, #0xff
    1d84:	ldr	w2, [sp, #184]
    1d88:	cmp	w2, w24
    1d8c:	b.gt	1e34 <mainSort+0x14b4>
    1d90:	mov	w4, w2
    1d94:	sub	w0, w0, w6
    1d98:	mov	w11, w2
    1d9c:	mov	x8, x12
    1da0:	mov	w5, w24
    1da4:	mov	w2, w24
    1da8:	mov	w9, w4
    1dac:	cmp	w0, #0x0
    1db0:	ldr	x7, [sp, #192]
    1db4:	cbz	w0, 1e9c <mainSort+0x151c>
    1db8:	b.le	1ebc <mainSort+0x153c>
    1dbc:	cmp	w4, w2
    1dc0:	b.gt	1e2c <mainSort+0x14ac>
    1dc4:	add	x1, x7, w2, sxtw #2
    1dc8:	b	1ddc <mainSort+0x145c>
    1dcc:	b.mi	1e0c <mainSort+0x148c>  // b.first
    1dd0:	sub	x1, x1, #0x4
    1dd4:	cmp	w4, w2
    1dd8:	b.gt	1e2c <mainSort+0x14ac>
    1ddc:	ldr	w3, [x1]
    1de0:	sub	w2, w2, #0x1
    1de4:	add	w0, w26, w3
    1de8:	ldrb	w0, [x25, w0, uxtw]
    1dec:	subs	w0, w0, w6
    1df0:	cbnz	w0, 1dcc <mainSort+0x144c>
    1df4:	sxtw	x0, w5
    1df8:	sub	w5, w5, #0x1
    1dfc:	ldr	w13, [x7, x0, lsl #2]
    1e00:	str	w13, [x1]
    1e04:	str	w3, [x7, x0, lsl #2]
    1e08:	b	1dd0 <mainSort+0x1450>
    1e0c:	add	w9, w4, #0x1
    1e10:	ldr	w0, [x8]
    1e14:	mov	w4, w9
    1e18:	str	w3, [x8]
    1e1c:	str	w0, [x1]
    1e20:	add	x8, x8, #0x4
    1e24:	cmp	w4, w2
    1e28:	b.le	1e80 <mainSort+0x1500>
    1e2c:	cmp	w11, w5
    1e30:	b.le	1ef0 <mainSort+0x1570>
    1e34:	ldr	w1, [sp, #212]
    1e38:	add	x2, sp, #0x550
    1e3c:	add	w0, w26, #0x1
    1e40:	str	w0, [x2, w1, sxtw #2]
    1e44:	ldrsw	x0, [sp, #212]
    1e48:	add	x1, sp, #0x230
    1e4c:	ldr	w1, [x1, x0, lsl #2]
    1e50:	str	w1, [sp, #184]
    1e54:	add	x1, sp, #0x3c0
    1e58:	ldr	w24, [x1, x0, lsl #2]
    1e5c:	add	x1, sp, #0x550
    1e60:	ldr	w26, [x1, x0, lsl #2]
    1e64:	cmp	w19, #0x61
    1e68:	b.le	1e74 <mainSort+0x14f4>
    1e6c:	mov	w0, #0x3e9                 	// #1001
    1e70:	bl	0 <BZ2_bz__AssertH__fail>
    1e74:	ldr	w0, [sp, #184]
    1e78:	sub	w20, w24, w0
    1e7c:	b	e2c <mainSort+0x4ac>
    1e80:	ldr	w1, [x7, w4, sxtw #2]
    1e84:	mov	w9, w4
    1e88:	add	w0, w26, w1
    1e8c:	ldrb	w0, [x25, w0, uxtw]
    1e90:	sub	w0, w0, w6
    1e94:	cmp	w0, #0x0
    1e98:	cbnz	w0, 1db8 <mainSort+0x1438>
    1e9c:	sxtw	x0, w11
    1ea0:	add	w4, w4, #0x1
    1ea4:	add	w11, w11, #0x1
    1ea8:	mov	w9, w4
    1eac:	ldr	w3, [x7, x0, lsl #2]
    1eb0:	str	w3, [x8]
    1eb4:	str	w1, [x7, x0, lsl #2]
    1eb8:	b	1e20 <mainSort+0x14a0>
    1ebc:	add	w4, w4, #0x1
    1ec0:	mov	w9, w4
    1ec4:	b	1e20 <mainSort+0x14a0>
    1ec8:	adrp	x0, 0 <stderr>
    1ecc:	ldr	w3, [sp, #148]
    1ed0:	ldr	w2, [sp, #208]
    1ed4:	add	w5, w20, #0x1
    1ed8:	ldr	w4, [sp, #220]
    1edc:	adrp	x1, 0 <fallbackSort>
    1ee0:	ldr	x0, [x0]
    1ee4:	add	x1, x1, #0x0
    1ee8:	bl	0 <fprintf>
    1eec:	b	df8 <mainSort+0x478>
    1ef0:	ldr	w1, [sp, #184]
    1ef4:	sub	w0, w9, w11
    1ef8:	sub	w1, w11, w1
    1efc:	cmp	w0, w1
    1f00:	csel	w0, w0, w1, le
    1f04:	cmp	w0, #0x0
    1f08:	sub	w1, w9, w0
    1f0c:	b.le	1f4c <mainSort+0x15cc>
    1f10:	ldr	x3, [sp, #192]
    1f14:	sub	w0, w0, #0x1
    1f18:	add	x0, x0, x10
    1f1c:	sxtw	x1, w1
    1f20:	add	x3, x3, #0x4
    1f24:	sub	x10, x1, x10
    1f28:	add	x0, x3, x0, lsl #2
    1f2c:	nop
    1f30:	ldr	w3, [x12, x10, lsl #2]
    1f34:	ldr	w1, [x12]
    1f38:	str	w3, [x12]
    1f3c:	str	w1, [x12, x10, lsl #2]
    1f40:	add	x12, x12, #0x4
    1f44:	cmp	x0, x12
    1f48:	b.ne	1f30 <mainSort+0x15b0>  // b.any
    1f4c:	sub	w0, w5, w2
    1f50:	sub	w2, w24, w5
    1f54:	cmp	w2, w0
    1f58:	csel	w2, w2, w0, le
    1f5c:	cmp	w2, #0x0
    1f60:	sub	w1, w24, w2
    1f64:	b.le	1fb0 <mainSort+0x1630>
    1f68:	ldr	x5, [sp, #192]
    1f6c:	sxtw	x3, w9
    1f70:	sub	w2, w2, #0x1
    1f74:	sxtw	x1, w1
    1f78:	add	x2, x2, x3
    1f7c:	add	x4, x5, #0x4
    1f80:	sub	x3, x1, x3
    1f84:	add	x4, x4, x2, lsl #2
    1f88:	add	x2, x5, w9, sxtw #2
    1f8c:	nop
    1f90:	mov	x1, x2
    1f94:	ldr	w5, [x1], #4
    1f98:	cmp	x4, x1
    1f9c:	ldr	w6, [x1, x3, lsl #2]
    1fa0:	str	w6, [x2]
    1fa4:	mov	x2, x1
    1fa8:	str	w5, [x1, x3, lsl #2]
    1fac:	b.ne	1f90 <mainSort+0x1610>  // b.any
    1fb0:	ldr	w1, [sp, #184]
    1fb4:	sub	w0, w24, w0
    1fb8:	add	w2, w0, #0x1
    1fbc:	add	w5, w26, #0x1
    1fc0:	add	w9, w9, w1
    1fc4:	sub	w3, w24, w2
    1fc8:	sub	w11, w9, w11
    1fcc:	mov	w9, w1
    1fd0:	sub	w4, w11, #0x1
    1fd4:	mov	w7, w24
    1fd8:	sub	w1, w4, w1
    1fdc:	cmp	w1, w3
    1fe0:	b.lt	2004 <mainSort+0x1684>  // b.tstop
    1fe4:	mov	w8, w1
    1fe8:	mov	w6, w2
    1fec:	mov	w1, w3
    1ff0:	mov	w7, w4
    1ff4:	mov	w3, w8
    1ff8:	mov	w2, w9
    1ffc:	mov	w4, w24
    2000:	str	w6, [sp, #184]
    2004:	sub	w6, w0, w11
    2008:	cmp	w6, w1
    200c:	b.gt	20c4 <mainSort+0x1744>
    2010:	mov	w8, w5
    2014:	mov	w24, w0
    2018:	mov	w6, w1
    201c:	mov	w0, w4
    2020:	mov	w5, w26
    2024:	mov	w9, w11
    2028:	ldr	w11, [sp, #184]
    202c:	str	w9, [sp, #184]
    2030:	cmp	w3, w6
    2034:	b.ge	205c <mainSort+0x16dc>  // b.tcont
    2038:	mov	w4, w26
    203c:	mov	w3, w7
    2040:	mov	w1, w2
    2044:	mov	w26, w5
    2048:	mov	w7, w0
    204c:	mov	w2, w11
    2050:	mov	w5, w4
    2054:	mov	w0, w3
    2058:	mov	w11, w1
    205c:	ldrsw	x4, [sp, #212]
    2060:	add	x6, sp, #0x230
    2064:	sxtw	x3, w19
    2068:	add	w1, w19, #0x1
    206c:	add	w19, w19, #0x2
    2070:	sxtw	x1, w1
    2074:	str	w2, [x6, x4, lsl #2]
    2078:	add	x2, sp, #0x3c0
    207c:	str	w11, [x6, x3, lsl #2]
    2080:	str	w7, [x2, x4, lsl #2]
    2084:	sub	w2, w19, #0x1
    2088:	str	w2, [sp, #212]
    208c:	add	x2, sp, #0x550
    2090:	str	w26, [x2, x4, lsl #2]
    2094:	add	x2, sp, #0x3c0
    2098:	mov	w26, w8
    209c:	str	w0, [x2, x3, lsl #2]
    20a0:	add	x0, sp, #0x550
    20a4:	ldr	w2, [sp, #184]
    20a8:	str	w2, [x6, x1, lsl #2]
    20ac:	str	w5, [x0, x3, lsl #2]
    20b0:	add	x0, sp, #0x3c0
    20b4:	str	w24, [x0, x1, lsl #2]
    20b8:	add	x0, sp, #0x550
    20bc:	str	w8, [x0, x1, lsl #2]
    20c0:	b	1e64 <mainSort+0x14e4>
    20c4:	mov	w24, w4
    20c8:	mov	w8, w26
    20cc:	b	2030 <mainSort+0x16b0>
    20d0:	adrp	x1, 0 <stderr>
    20d4:	adrp	x0, 0 <fallbackSort>
    20d8:	mov	x2, #0x21                  	// #33
    20dc:	add	x0, x0, #0x0
    20e0:	ldr	x3, [x1]
    20e4:	mov	x1, #0x1                   	// #1
    20e8:	bl	0 <fwrite>
    20ec:	b	9c0 <mainSort+0x40>
    20f0:	adrp	x1, 0 <stderr>
    20f4:	adrp	x0, 0 <fallbackSort>
    20f8:	mov	x2, #0x1b                  	// #27
    20fc:	add	x0, x0, #0x0
    2100:	ldr	x3, [x1]
    2104:	mov	x1, #0x1                   	// #1
    2108:	bl	0 <fwrite>
    210c:	b	b34 <mainSort+0x1b4>
    2110:	mov	w0, #0x3ee                 	// #1006
    2114:	bl	0 <BZ2_bz__AssertH__fail>
    2118:	b	1a6c <mainSort+0x10ec>
    211c:	tbnz	w6, #31, 1ca0 <mainSort+0x1320>
    2120:	mov	w1, #0x0                   	// #0
    2124:	b	1c4c <mainSort+0x12cc>
    2128:	ldr	w2, [sp, #272]
    212c:	b	c24 <mainSort+0x2a4>
    2130:	ldr	w5, [sp, #272]
    2134:	b	ac4 <mainSort+0x144>
    2138:	mov	w19, w0
    213c:	sub	w0, w0, #0x1
    2140:	str	w0, [sp, #212]
    2144:	b	1e44 <mainSort+0x14c4>

0000000000002148 <BZ2_blockSort>:
    2148:	stp	x29, x30, [sp, #-96]!
    214c:	mov	w1, #0x270f                	// #9999
    2150:	mov	x29, sp
    2154:	stp	x19, x20, [sp, #16]
    2158:	mov	x20, x0
    215c:	stp	x21, x22, [sp, #32]
    2160:	ldr	w22, [x0, #108]
    2164:	stp	x23, x24, [sp, #48]
    2168:	cmp	w22, w1
    216c:	ldr	w23, [x0, #656]
    2170:	ldr	x24, [x0, #40]
    2174:	ldr	x21, [x0, #56]
    2178:	b.le	21f4 <BZ2_blockSort+0xac>
    217c:	ldr	w1, [x20, #88]
    2180:	mov	w3, #0x64                  	// #100
    2184:	mov	w0, #0xaaab                	// #43691
    2188:	and	w2, w22, #0x1
    218c:	cmp	w1, w3
    2190:	movk	w0, #0xaaaa, lsl #16
    2194:	csel	w1, w1, w3, le
    2198:	add	w2, w2, w22
    219c:	cmp	w1, #0x0
    21a0:	add	w2, w2, #0x22
    21a4:	csinc	w19, w1, wzr, gt
    21a8:	add	x6, sp, #0x5c
    21ac:	sub	w19, w19, #0x1
    21b0:	mov	w5, w23
    21b4:	ldr	x1, [x20, #64]
    21b8:	mov	w4, w22
    21bc:	umull	x19, w19, w0
    21c0:	mov	x3, x24
    21c4:	mov	x0, x21
    21c8:	add	x2, x1, w2, sxtw
    21cc:	lsr	x19, x19, #33
    21d0:	mul	w19, w19, w22
    21d4:	str	w19, [sp, #92]
    21d8:	bl	980 <mainSort>
    21dc:	cmp	w23, #0x2
    21e0:	b.gt	2250 <BZ2_blockSort+0x108>
    21e4:	ldr	w0, [sp, #92]
    21e8:	tbz	w0, #31, 2208 <BZ2_blockSort+0xc0>
    21ec:	cmp	w23, #0x2
    21f0:	b.eq	22b0 <BZ2_blockSort+0x168>  // b.none
    21f4:	ldp	x0, x1, [x20, #24]
    21f8:	mov	w4, w23
    21fc:	mov	w3, w22
    2200:	mov	x2, x24
    2204:	bl	0 <fallbackSort>
    2208:	mov	w0, #0xffffffff            	// #-1
    220c:	str	w0, [x20, #48]
    2210:	ldr	w0, [x20, #108]
    2214:	cmp	w0, #0x0
    2218:	b.le	2294 <BZ2_blockSort+0x14c>
    221c:	mov	x1, #0x0                   	// #0
    2220:	b	2230 <BZ2_blockSort+0xe8>
    2224:	add	x1, x1, #0x1
    2228:	cmp	w0, w1
    222c:	b.le	2294 <BZ2_blockSort+0x14c>
    2230:	ldr	w2, [x21, x1, lsl #2]
    2234:	cbnz	w2, 2224 <BZ2_blockSort+0xdc>
    2238:	str	w1, [x20, #48]
    223c:	ldp	x19, x20, [sp, #16]
    2240:	ldp	x21, x22, [sp, #32]
    2244:	ldp	x23, x24, [sp, #48]
    2248:	ldp	x29, x30, [sp], #96
    224c:	ret
    2250:	ldr	w2, [sp, #92]
    2254:	scvtf	s1, w22
    2258:	str	x25, [sp, #64]
    225c:	adrp	x25, 0 <stderr>
    2260:	sub	w2, w19, w2
    2264:	mov	w3, w22
    2268:	ldr	x0, [x25]
    226c:	scvtf	s0, w2
    2270:	adrp	x1, 0 <fallbackSort>
    2274:	add	x1, x1, #0x0
    2278:	fdiv	s0, s0, s1
    227c:	fcvt	d0, s0
    2280:	bl	0 <fprintf>
    2284:	ldr	w0, [sp, #92]
    2288:	tbnz	w0, #31, 22b8 <BZ2_blockSort+0x170>
    228c:	ldr	x25, [sp, #64]
    2290:	b	2208 <BZ2_blockSort+0xc0>
    2294:	mov	w0, #0x3eb                 	// #1003
    2298:	bl	0 <BZ2_bz__AssertH__fail>
    229c:	ldp	x19, x20, [sp, #16]
    22a0:	ldp	x21, x22, [sp, #32]
    22a4:	ldp	x23, x24, [sp, #48]
    22a8:	ldp	x29, x30, [sp], #96
    22ac:	ret
    22b0:	str	x25, [sp, #64]
    22b4:	adrp	x25, 0 <stderr>
    22b8:	ldr	x3, [x25]
    22bc:	adrp	x0, 0 <fallbackSort>
    22c0:	mov	x2, #0x35                  	// #53
    22c4:	add	x0, x0, #0x0
    22c8:	mov	x1, #0x1                   	// #1
    22cc:	bl	0 <fwrite>
    22d0:	ldr	x25, [sp, #64]
    22d4:	b	21f4 <BZ2_blockSort+0xac>

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	mov	x12, #0x14a0                	// #5280
   4:	sub	sp, sp, x12
   8:	cmp	w2, #0x0
   c:	stp	x29, x30, [sp]
  10:	mov	x29, sp
  14:	stp	x19, x20, [sp, #16]
  18:	add	x20, sp, #0x480
  1c:	stp	x21, x22, [sp, #32]
  20:	mov	w22, w2
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x23, x0
  2c:	mov	w24, w3
  30:	stp	x25, x26, [sp, #64]
  34:	stp	x27, x28, [sp, #80]
  38:	b.le	6c <BZ2_hbMakeCodeLengths+0x6c>
  3c:	mov	x4, x1
  40:	mov	w3, #0x100                 	// #256
  44:	mov	x1, #0x0                   	// #0
  48:	ldr	w0, [x4, x1, lsl #2]
  4c:	add	x2, x20, x1, lsl #2
  50:	add	x1, x1, #0x1
  54:	cmp	w0, #0x0
  58:	lsl	w0, w0, #8
  5c:	csel	w0, w0, w3, ne  // ne = any
  60:	str	w0, [x2, #4]
  64:	cmp	w22, w1
  68:	b.gt	48 <BZ2_hbMakeCodeLengths+0x48>
  6c:	sub	w26, w22, #0x1
  70:	add	x0, x20, #0x4
  74:	add	x19, sp, #0x70
  78:	str	wzr, [sp, #112]
  7c:	add	x26, x0, w26, uxtw #2
  80:	mov	w0, #0xfffffffe            	// #-2
  84:	str	wzr, [sp, #1152]
  88:	add	x28, x19, w22, sxtw #2
  8c:	str	w0, [sp, #3216]
  90:	lsl	w27, w22, #1
  94:	sub	x28, x28, #0x4
  98:	sub	w27, w27, #0x1
  9c:	sxtw	x4, w22
  a0:	add	x21, sp, #0xc90
  a4:	cmp	w22, #0x0
  a8:	mov	w25, #0x1                   	// #1
  ac:	b.le	3ac <BZ2_hbMakeCodeLengths+0x3ac>
  b0:	add	w10, w22, #0x1
  b4:	mov	x8, #0x0                   	// #0
  b8:	mov	w7, #0x1                   	// #1
  bc:	mov	w9, #0xffffffff            	// #-1
  c0:	add	x3, x19, x8
  c4:	add	x1, x21, x8
  c8:	asr	w0, w7, #1
  cc:	add	x2, x20, x8
  d0:	str	w7, [x3, #4]
  d4:	str	w9, [x1, #4]
  d8:	ldr	w1, [x19, w0, sxtw #2]
  dc:	ldr	w6, [x2, #4]
  e0:	ldr	w2, [x20, w1, sxtw #2]
  e4:	cmp	w6, w2
  e8:	b.ge	3f8 <BZ2_hbMakeCodeLengths+0x3f8>  // b.tcont
  ec:	mov	w3, w7
  f0:	b	f8 <BZ2_hbMakeCodeLengths+0xf8>
  f4:	mov	w0, w2
  f8:	asr	w2, w0, #1
  fc:	str	w1, [x19, w3, sxtw #2]
 100:	mov	w3, w0
 104:	ldr	w1, [x19, w2, sxtw #2]
 108:	ldr	w5, [x20, w1, sxtw #2]
 10c:	cmp	w5, w6
 110:	b.gt	f4 <BZ2_hbMakeCodeLengths+0xf4>
 114:	str	w7, [x19, w0, sxtw #2]
 118:	add	w7, w7, #0x1
 11c:	cmp	w7, w10
 120:	add	x8, x8, #0x4
 124:	b.ne	c0 <BZ2_hbMakeCodeLengths+0xc0>  // b.any
 128:	cmp	w22, #0x1
 12c:	b.eq	320 <BZ2_hbMakeCodeLengths+0x320>  // b.none
 130:	sub	w6, w22, #0x2
 134:	mov	x8, x28
 138:	mov	x9, x4
 13c:	mov	w5, w22
 140:	mov	w10, #0xffffffff            	// #-1
 144:	nop
 148:	ldr	w15, [x8, #4]
 14c:	sub	w5, w5, #0x1
 150:	ldr	w13, [sp, #116]
 154:	cmp	w5, #0x1
 158:	str	w15, [sp, #116]
 15c:	b.eq	414 <BZ2_hbMakeCodeLengths+0x414>  // b.none
 160:	ldr	w14, [x20, w15, sxtw #2]
 164:	mov	w1, #0x2                   	// #2
 168:	mov	w7, #0x1                   	// #1
 16c:	b	190 <BZ2_hbMakeCodeLengths+0x190>
 170:	mov	w0, w1
 174:	lsl	w1, w0, #1
 178:	cmp	w14, w3
 17c:	b.lt	1d0 <BZ2_hbMakeCodeLengths+0x1d0>  // b.tstop
 180:	str	w2, [x19, w7, sxtw #2]
 184:	cmp	w5, w0, lsl #1
 188:	mov	w7, w0
 18c:	b.lt	1d0 <BZ2_hbMakeCodeLengths+0x1d0>  // b.tstop
 190:	ldr	w2, [x19, w1, sxtw #2]
 194:	mov	w0, w1
 198:	cmp	w5, w1
 19c:	ldr	w3, [x20, w2, sxtw #2]
 1a0:	b.le	174 <BZ2_hbMakeCodeLengths+0x174>
 1a4:	add	w0, w1, #0x1
 1a8:	ldr	w11, [x19, w0, sxtw #2]
 1ac:	ldr	w12, [x20, w11, sxtw #2]
 1b0:	cmp	w12, w3
 1b4:	b.ge	170 <BZ2_hbMakeCodeLengths+0x170>  // b.tcont
 1b8:	mov	w3, w12
 1bc:	mov	w2, w11
 1c0:	lsl	w1, w0, #1
 1c4:	cmp	w14, w3
 1c8:	b.ge	180 <BZ2_hbMakeCodeLengths+0x180>  // b.tcont
 1cc:	nop
 1d0:	str	w15, [x19, w7, sxtw #2]
 1d4:	cmp	w6, #0x1
 1d8:	ldr	w15, [x8]
 1dc:	ldr	w16, [sp, #116]
 1e0:	str	w15, [sp, #116]
 1e4:	b.le	430 <BZ2_hbMakeCodeLengths+0x430>
 1e8:	ldr	w14, [x20, w15, sxtw #2]
 1ec:	mov	w1, #0x2                   	// #2
 1f0:	mov	w7, #0x1                   	// #1
 1f4:	b	218 <BZ2_hbMakeCodeLengths+0x218>
 1f8:	mov	w0, w1
 1fc:	lsl	w1, w0, #1
 200:	cmp	w14, w3
 204:	b.lt	258 <BZ2_hbMakeCodeLengths+0x258>  // b.tstop
 208:	str	w2, [x19, w7, sxtw #2]
 20c:	cmp	w6, w0, lsl #1
 210:	mov	w7, w0
 214:	b.lt	258 <BZ2_hbMakeCodeLengths+0x258>  // b.tstop
 218:	ldr	w2, [x19, w1, sxtw #2]
 21c:	mov	w0, w1
 220:	cmp	w6, w1
 224:	ldr	w3, [x20, w2, sxtw #2]
 228:	b.le	1fc <BZ2_hbMakeCodeLengths+0x1fc>
 22c:	add	w0, w1, #0x1
 230:	ldr	w11, [x19, w0, sxtw #2]
 234:	ldr	w12, [x20, w11, sxtw #2]
 238:	cmp	w12, w3
 23c:	b.ge	1f8 <BZ2_hbMakeCodeLengths+0x1f8>  // b.tcont
 240:	mov	w3, w12
 244:	mov	w2, w11
 248:	lsl	w1, w0, #1
 24c:	cmp	w14, w3
 250:	b.ge	208 <BZ2_hbMakeCodeLengths+0x208>  // b.tcont
 254:	nop
 258:	sxtw	x11, w16
 25c:	sxtw	x13, w13
 260:	str	w15, [x19, w7, sxtw #2]
 264:	asr	w0, w5, #1
 268:	add	w12, w9, #0x1
 26c:	lsl	x2, x9, #2
 270:	ldr	w1, [x20, x13, lsl #2]
 274:	add	x14, x20, x2
 278:	ldr	w15, [x20, x11, lsl #2]
 27c:	add	x2, x21, x2
 280:	and	w16, w1, #0xff
 284:	str	w12, [x8]
 288:	and	w3, w15, #0xff
 28c:	and	w7, w1, #0xffffff00
 290:	cmp	w16, w15, uxtb
 294:	ldr	w1, [x19, w0, sxtw #2]
 298:	csel	w3, w3, w16, le
 29c:	and	w15, w15, #0xffffff00
 2a0:	add	w3, w3, #0x1
 2a4:	add	w7, w7, w15
 2a8:	orr	w3, w3, w7
 2ac:	str	w12, [x21, x11, lsl #2]
 2b0:	str	w3, [x14, #4]
 2b4:	str	w12, [x21, x13, lsl #2]
 2b8:	str	w10, [x2, #4]
 2bc:	ldr	w2, [x20, w1, sxtw #2]
 2c0:	cmp	w3, w2
 2c4:	b.ge	3d8 <BZ2_hbMakeCodeLengths+0x3d8>  // b.tcont
 2c8:	mov	w7, w5
 2cc:	b	2d4 <BZ2_hbMakeCodeLengths+0x2d4>
 2d0:	mov	w0, w2
 2d4:	asr	w2, w0, #1
 2d8:	str	w1, [x19, w7, sxtw #2]
 2dc:	mov	w7, w0
 2e0:	ldr	w1, [x19, w2, sxtw #2]
 2e4:	ldr	w11, [x20, w1, sxtw #2]
 2e8:	cmp	w3, w11
 2ec:	b.lt	2d0 <BZ2_hbMakeCodeLengths+0x2d0>  // b.tstop
 2f0:	str	w12, [x19, w0, sxtw #2]
 2f4:	add	x9, x9, #0x1
 2f8:	sub	w6, w6, #0x1
 2fc:	sub	x8, x8, #0x4
 300:	cmp	w5, #0x1
 304:	b.ne	148 <BZ2_hbMakeCodeLengths+0x148>  // b.any
 308:	cmp	w27, #0x203
 30c:	b.le	320 <BZ2_hbMakeCodeLengths+0x320>
 310:	mov	w0, #0x7d2                 	// #2002
 314:	str	x4, [sp, #104]
 318:	bl	0 <BZ2_bz__AssertH__fail>
 31c:	ldr	x4, [sp, #104]
 320:	mov	x2, #0x0                   	// #0
 324:	mov	w3, #0x0                   	// #0
 328:	add	x0, x21, x2, lsl #2
 32c:	mov	w1, #0x0                   	// #0
 330:	ldr	w0, [x0, #4]
 334:	tbnz	w0, #31, 3d0 <BZ2_hbMakeCodeLengths+0x3d0>
 338:	ldr	w0, [x21, w0, sxtw #2]
 33c:	add	w1, w1, #0x1
 340:	tbz	w0, #31, 338 <BZ2_hbMakeCodeLengths+0x338>
 344:	and	w0, w1, #0xff
 348:	strb	w0, [x23, x2]
 34c:	add	x2, x2, #0x1
 350:	cmp	w24, w1
 354:	add	w0, w2, #0x1
 358:	csel	w3, w3, w25, ge  // ge = tcont
 35c:	cmp	w0, w22
 360:	b.le	328 <BZ2_hbMakeCodeLengths+0x328>
 364:	cbz	w3, 3ac <BZ2_hbMakeCodeLengths+0x3ac>
 368:	mov	x1, x20
 36c:	nop
 370:	ldr	w0, [x1, #4]
 374:	lsr	w2, w0, #31
 378:	add	w0, w2, w0, asr #8
 37c:	asr	w0, w0, #1
 380:	add	w0, w0, #0x1
 384:	lsl	w0, w0, #8
 388:	str	w0, [x1, #4]!
 38c:	cmp	x26, x1
 390:	b.ne	370 <BZ2_hbMakeCodeLengths+0x370>  // b.any
 394:	mov	w0, #0xfffffffe            	// #-2
 398:	str	wzr, [sp, #112]
 39c:	str	wzr, [sp, #1152]
 3a0:	cmp	w22, #0x0
 3a4:	str	w0, [sp, #3216]
 3a8:	b.gt	b0 <BZ2_hbMakeCodeLengths+0xb0>
 3ac:	mov	x12, #0x14a0                	// #5280
 3b0:	ldp	x29, x30, [sp]
 3b4:	ldp	x19, x20, [sp, #16]
 3b8:	ldp	x21, x22, [sp, #32]
 3bc:	ldp	x23, x24, [sp, #48]
 3c0:	ldp	x25, x26, [sp, #64]
 3c4:	ldp	x27, x28, [sp, #80]
 3c8:	add	sp, sp, x12
 3cc:	ret
 3d0:	mov	w0, #0x0                   	// #0
 3d4:	b	348 <BZ2_hbMakeCodeLengths+0x348>
 3d8:	mov	w0, w5
 3dc:	add	x9, x9, #0x1
 3e0:	sub	w6, w6, #0x1
 3e4:	sub	x8, x8, #0x4
 3e8:	cmp	w5, #0x1
 3ec:	str	w12, [x19, w0, sxtw #2]
 3f0:	b.ne	148 <BZ2_hbMakeCodeLengths+0x148>  // b.any
 3f4:	b	308 <BZ2_hbMakeCodeLengths+0x308>
 3f8:	mov	w0, w7
 3fc:	add	x8, x8, #0x4
 400:	str	w7, [x19, w0, sxtw #2]
 404:	add	w7, w7, #0x1
 408:	cmp	w7, w10
 40c:	b.ne	c0 <BZ2_hbMakeCodeLengths+0xc0>  // b.any
 410:	b	128 <BZ2_hbMakeCodeLengths+0x128>
 414:	mov	w7, w5
 418:	cmp	w6, #0x1
 41c:	str	w15, [x19, w7, sxtw #2]
 420:	ldr	w15, [x8]
 424:	ldr	w16, [sp, #116]
 428:	str	w15, [sp, #116]
 42c:	b.gt	1e8 <BZ2_hbMakeCodeLengths+0x1e8>
 430:	mov	w7, #0x1                   	// #1
 434:	b	258 <BZ2_hbMakeCodeLengths+0x258>

0000000000000438 <BZ2_hbAssignCodes>:
 438:	cmp	w2, w3
 43c:	b.gt	488 <BZ2_hbAssignCodes+0x50>
 440:	add	w7, w3, #0x1
 444:	mov	w6, #0x0                   	// #0
 448:	cmp	w4, #0x0
 44c:	mov	x3, #0x0                   	// #0
 450:	b.le	478 <BZ2_hbAssignCodes+0x40>
 454:	nop
 458:	ldrb	w5, [x1, x3]
 45c:	cmp	w5, w2
 460:	b.ne	46c <BZ2_hbAssignCodes+0x34>  // b.any
 464:	str	w6, [x0, x3, lsl #2]
 468:	add	w6, w6, #0x1
 46c:	add	x3, x3, #0x1
 470:	cmp	w4, w3
 474:	b.gt	458 <BZ2_hbAssignCodes+0x20>
 478:	add	w2, w2, #0x1
 47c:	lsl	w6, w6, #1
 480:	cmp	w7, w2
 484:	b.ne	448 <BZ2_hbAssignCodes+0x10>  // b.any
 488:	ret
 48c:	nop

0000000000000490 <BZ2_hbCreateDecodeTables>:
 490:	cmp	w4, w5
 494:	b.gt	4e4 <BZ2_hbCreateDecodeTables+0x54>
 498:	add	w11, w5, #0x1
 49c:	mov	w9, w4
 4a0:	mov	w10, #0x0                   	// #0
 4a4:	nop
 4a8:	cmp	w6, #0x0
 4ac:	mov	x7, #0x0                   	// #0
 4b0:	b.le	4d8 <BZ2_hbCreateDecodeTables+0x48>
 4b4:	nop
 4b8:	ldrb	w8, [x3, x7]
 4bc:	cmp	w8, w9
 4c0:	b.ne	4cc <BZ2_hbCreateDecodeTables+0x3c>  // b.any
 4c4:	str	w7, [x2, w10, sxtw #2]
 4c8:	add	w10, w10, #0x1
 4cc:	add	x7, x7, #0x1
 4d0:	cmp	w6, w7
 4d4:	b.gt	4b8 <BZ2_hbCreateDecodeTables+0x28>
 4d8:	add	w9, w9, #0x1
 4dc:	cmp	w9, w11
 4e0:	b.ne	4a8 <BZ2_hbCreateDecodeTables+0x18>  // b.any
 4e4:	mov	x2, x1
 4e8:	add	x7, x1, #0x5c
 4ec:	nop
 4f0:	str	wzr, [x2], #4
 4f4:	cmp	x7, x2
 4f8:	b.ne	4f0 <BZ2_hbCreateDecodeTables+0x60>  // b.any
 4fc:	cmp	w6, #0x0
 500:	b.le	52c <BZ2_hbCreateDecodeTables+0x9c>
 504:	sub	w6, w6, #0x1
 508:	add	x8, x3, #0x1
 50c:	add	x8, x8, x6
 510:	ldrb	w2, [x3], #1
 514:	add	x2, x2, #0x1
 518:	cmp	x8, x3
 51c:	ldr	w6, [x1, x2, lsl #2]
 520:	add	w6, w6, #0x1
 524:	str	w6, [x1, x2, lsl #2]
 528:	b.ne	510 <BZ2_hbCreateDecodeTables+0x80>  // b.any
 52c:	add	x8, x1, #0x4
 530:	mov	x2, x8
 534:	nop
 538:	ldp	w6, w3, [x2, #-4]
 53c:	add	w3, w3, w6
 540:	str	w3, [x2], #4
 544:	cmp	x7, x2
 548:	b.ne	538 <BZ2_hbCreateDecodeTables+0xa8>  // b.any
 54c:	mov	x2, x0
 550:	add	x3, x0, #0x5c
 554:	nop
 558:	str	wzr, [x2], #4
 55c:	cmp	x3, x2
 560:	b.ne	558 <BZ2_hbCreateDecodeTables+0xc8>  // b.any
 564:	cmp	w4, w5
 568:	b.gt	5a0 <BZ2_hbCreateDecodeTables+0x110>
 56c:	sxtw	x2, w4
 570:	mov	w3, #0x0                   	// #0
 574:	nop
 578:	ldr	w6, [x8, x2, lsl #2]
 57c:	ldr	w7, [x1, x2, lsl #2]
 580:	sub	w6, w6, w7
 584:	add	w3, w6, w3
 588:	sub	w6, w3, #0x1
 58c:	str	w6, [x0, x2, lsl #2]
 590:	add	x2, x2, #0x1
 594:	lsl	w3, w3, #1
 598:	cmp	w5, w2
 59c:	b.ge	578 <BZ2_hbCreateDecodeTables+0xe8>  // b.tcont
 5a0:	add	w2, w4, #0x1
 5a4:	cmp	w5, w2
 5a8:	b.lt	5dc <BZ2_hbCreateDecodeTables+0x14c>  // b.tstop
 5ac:	sxtw	x2, w2
 5b0:	sub	x3, x0, #0x4
 5b4:	nop
 5b8:	ldr	w0, [x3, x2, lsl #2]
 5bc:	ldr	w4, [x1, x2, lsl #2]
 5c0:	add	w0, w0, #0x1
 5c4:	lsl	w0, w0, #1
 5c8:	sub	w0, w0, w4
 5cc:	str	w0, [x1, x2, lsl #2]
 5d0:	add	x2, x2, #0x1
 5d4:	cmp	w5, w2
 5d8:	b.ge	5b8 <BZ2_hbCreateDecodeTables+0x128>  // b.tcont
 5dc:	ret

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <bsPutUInt32>:
       0:	ldr	w3, [x0, #644]
       4:	lsr	w4, w1, #24
       8:	ldr	w2, [x0, #640]
       c:	cmp	w3, #0x7
      10:	b.le	18c <bsPutUInt32+0x18c>
      14:	ldr	w5, [x0, #116]
      18:	ldr	x6, [x0, #80]
      1c:	lsr	w3, w2, #24
      20:	strb	w3, [x6, w5, sxtw]
      24:	ldr	w3, [x0, #640]
      28:	ldr	w5, [x0, #116]
      2c:	ldr	w6, [x0, #644]
      30:	lsl	w2, w3, #8
      34:	add	w5, w5, #0x1
      38:	sub	w3, w6, #0x8
      3c:	str	w5, [x0, #116]
      40:	str	w2, [x0, #640]
      44:	cmp	w3, #0x7
      48:	str	w3, [x0, #644]
      4c:	b.gt	18 <bsPutUInt32+0x18>
      50:	mov	w5, #0x18                  	// #24
      54:	sub	w3, w5, w3
      58:	str	w6, [x0, #644]
      5c:	cmp	w6, #0x7
      60:	lsl	w3, w4, w3
      64:	orr	w3, w3, w2
      68:	str	w3, [x0, #640]
      6c:	ubfx	x4, x1, #16, #8
      70:	b.le	194 <bsPutUInt32+0x194>
      74:	ldr	w2, [x0, #116]
      78:	ldr	x5, [x0, #80]
      7c:	lsr	w3, w3, #24
      80:	strb	w3, [x5, w2, sxtw]
      84:	ldr	w3, [x0, #640]
      88:	ldr	w2, [x0, #116]
      8c:	ldr	w5, [x0, #644]
      90:	lsl	w3, w3, #8
      94:	add	w2, w2, #0x1
      98:	sub	w6, w5, #0x8
      9c:	str	w2, [x0, #116]
      a0:	str	w3, [x0, #640]
      a4:	cmp	w6, #0x7
      a8:	str	w6, [x0, #644]
      ac:	b.gt	78 <bsPutUInt32+0x78>
      b0:	mov	w2, #0x18                  	// #24
      b4:	sub	w2, w2, w6
      b8:	str	w5, [x0, #644]
      bc:	cmp	w5, #0x7
      c0:	lsl	w2, w4, w2
      c4:	orr	w3, w2, w3
      c8:	str	w3, [x0, #640]
      cc:	ubfx	x2, x1, #8, #8
      d0:	b.le	19c <bsPutUInt32+0x19c>
      d4:	ldr	w6, [x0, #116]
      d8:	ldr	x4, [x0, #80]
      dc:	lsr	w3, w3, #24
      e0:	strb	w3, [x4, w6, sxtw]
      e4:	ldr	w3, [x0, #640]
      e8:	ldr	w6, [x0, #116]
      ec:	ldr	w4, [x0, #644]
      f0:	lsl	w3, w3, #8
      f4:	add	w6, w6, #0x1
      f8:	sub	w5, w4, #0x8
      fc:	str	w6, [x0, #116]
     100:	str	w3, [x0, #640]
     104:	cmp	w5, #0x7
     108:	str	w5, [x0, #644]
     10c:	b.gt	d8 <bsPutUInt32+0xd8>
     110:	mov	w6, #0x18                  	// #24
     114:	sub	w5, w6, w5
     118:	str	w4, [x0, #644]
     11c:	and	w1, w1, #0xff
     120:	lsl	w2, w2, w5
     124:	orr	w2, w2, w3
     128:	str	w2, [x0, #640]
     12c:	cmp	w4, #0x7
     130:	b.le	1a4 <bsPutUInt32+0x1a4>
     134:	ldr	w3, [x0, #116]
     138:	ldr	x4, [x0, #80]
     13c:	lsr	w2, w2, #24
     140:	strb	w2, [x4, w3, sxtw]
     144:	ldr	w2, [x0, #640]
     148:	ldr	w3, [x0, #116]
     14c:	ldr	w5, [x0, #644]
     150:	lsl	w2, w2, #8
     154:	add	w3, w3, #0x1
     158:	sub	w4, w5, #0x8
     15c:	str	w3, [x0, #116]
     160:	str	w2, [x0, #640]
     164:	cmp	w4, #0x7
     168:	str	w4, [x0, #644]
     16c:	b.gt	138 <bsPutUInt32+0x138>
     170:	mov	w3, #0x18                  	// #24
     174:	sub	w4, w3, w4
     178:	str	w5, [x0, #644]
     17c:	lsl	w1, w1, w4
     180:	orr	w2, w1, w2
     184:	str	w2, [x0, #640]
     188:	ret
     18c:	add	w6, w3, #0x8
     190:	b	50 <bsPutUInt32+0x50>
     194:	add	w5, w6, #0x8
     198:	b	b0 <bsPutUInt32+0xb0>
     19c:	add	w4, w5, #0x8
     1a0:	b	110 <bsPutUInt32+0x110>
     1a4:	add	w5, w4, #0x8
     1a8:	mov	w3, #0x18                  	// #24
     1ac:	sub	w4, w3, w4
     1b0:	str	w5, [x0, #644]
     1b4:	lsl	w1, w1, w4
     1b8:	orr	w2, w1, w2
     1bc:	str	w2, [x0, #640]
     1c0:	ret
     1c4:	nop

00000000000001c8 <BZ2_bsInitWrite>:
     1c8:	str	xzr, [x0, #640]
     1cc:	ret

00000000000001d0 <BZ2_compressBlock>:
     1d0:	sub	sp, sp, #0x3b0
     1d4:	and	w1, w1, #0xff
     1d8:	stp	x29, x30, [sp]
     1dc:	mov	x29, sp
     1e0:	ldr	w5, [x0, #108]
     1e4:	stp	x27, x28, [sp, #80]
     1e8:	mov	x27, x0
     1ec:	ldr	w2, [x0, #660]
     1f0:	str	w1, [sp, #612]
     1f4:	cmp	w5, #0x0
     1f8:	b.le	878 <BZ2_compressBlock+0x6a8>
     1fc:	ldr	w3, [x0, #648]
     200:	cmp	w2, #0x1
     204:	ldr	w4, [x0, #652]
     208:	mvn	w3, w3
     20c:	str	w3, [x0, #648]
     210:	eor	w4, w3, w4, ror #31
     214:	str	w4, [x0, #652]
     218:	b.le	220 <BZ2_compressBlock+0x50>
     21c:	str	wzr, [x0, #116]
     220:	ldr	w0, [x27, #656]
     224:	cmp	w0, #0x1
     228:	b.gt	860 <BZ2_compressBlock+0x690>
     22c:	mov	x0, x27
     230:	bl	0 <BZ2_blockSort>
     234:	ldr	x5, [x27, #32]
     238:	ldr	w0, [x27, #108]
     23c:	ldr	w1, [x27, #660]
     240:	add	x5, x5, w0, sxtw
     244:	str	x5, [x27, #80]
     248:	cmp	w1, #0x1
     24c:	b.eq	88c <BZ2_compressBlock+0x6bc>  // b.none
     250:	cmp	w0, #0x0
     254:	b.le	848 <BZ2_compressBlock+0x678>
     258:	ldr	w0, [x27, #644]
     25c:	stp	x19, x20, [sp, #16]
     260:	ldr	w1, [x27, #640]
     264:	stp	x21, x22, [sp, #32]
     268:	cmp	w0, #0x7
     26c:	stp	x23, x24, [sp, #48]
     270:	stp	x25, x26, [sp, #64]
     274:	str	d8, [sp, #96]
     278:	b.le	4398 <BZ2_compressBlock+0x41c8>
     27c:	ldr	w3, [x27, #116]
     280:	ldr	x0, [x27, #80]
     284:	lsr	w1, w1, #24
     288:	strb	w1, [x0, w3, sxtw]
     28c:	ldr	w1, [x27, #640]
     290:	ldr	w3, [x27, #116]
     294:	ldr	w2, [x27, #644]
     298:	lsl	w1, w1, #8
     29c:	add	w3, w3, #0x1
     2a0:	sub	w0, w2, #0x8
     2a4:	str	w3, [x27, #116]
     2a8:	str	w1, [x27, #640]
     2ac:	cmp	w0, #0x7
     2b0:	str	w0, [x27, #644]
     2b4:	b.gt	280 <BZ2_compressBlock+0xb0>
     2b8:	mov	w3, #0x18                  	// #24
     2bc:	sub	w3, w3, w0
     2c0:	mov	w0, #0x31                  	// #49
     2c4:	str	w2, [x27, #644]
     2c8:	lsl	w0, w0, w3
     2cc:	orr	w0, w0, w1
     2d0:	str	w0, [x27, #640]
     2d4:	cmp	w2, #0x7
     2d8:	b.le	43b8 <BZ2_compressBlock+0x41e8>
     2dc:	ldr	w1, [x27, #116]
     2e0:	ldr	x2, [x27, #80]
     2e4:	lsr	w0, w0, #24
     2e8:	strb	w0, [x2, w1, sxtw]
     2ec:	ldr	w0, [x27, #640]
     2f0:	ldr	w1, [x27, #116]
     2f4:	ldr	w3, [x27, #644]
     2f8:	lsl	w0, w0, #8
     2fc:	add	w1, w1, #0x1
     300:	sub	w2, w3, #0x8
     304:	str	w1, [x27, #116]
     308:	str	w0, [x27, #640]
     30c:	cmp	w2, #0x7
     310:	str	w2, [x27, #644]
     314:	b.gt	2e0 <BZ2_compressBlock+0x110>
     318:	mov	w1, #0x18                  	// #24
     31c:	sub	w2, w1, w2
     320:	mov	w1, #0x41                  	// #65
     324:	str	w3, [x27, #644]
     328:	lsl	w1, w1, w2
     32c:	orr	w0, w1, w0
     330:	str	w0, [x27, #640]
     334:	cmp	w3, #0x7
     338:	b.le	4390 <BZ2_compressBlock+0x41c0>
     33c:	ldr	w4, [x27, #116]
     340:	ldr	x1, [x27, #80]
     344:	lsr	w0, w0, #24
     348:	strb	w0, [x1, w4, sxtw]
     34c:	ldr	w0, [x27, #640]
     350:	ldr	w4, [x27, #116]
     354:	ldr	w2, [x27, #644]
     358:	lsl	w0, w0, #8
     35c:	add	w4, w4, #0x1
     360:	sub	w3, w2, #0x8
     364:	str	w4, [x27, #116]
     368:	str	w0, [x27, #640]
     36c:	cmp	w3, #0x7
     370:	str	w3, [x27, #644]
     374:	b.gt	340 <BZ2_compressBlock+0x170>
     378:	mov	w1, #0x18                  	// #24
     37c:	sub	w3, w1, w3
     380:	mov	w1, #0x59                  	// #89
     384:	str	w2, [x27, #644]
     388:	lsl	w1, w1, w3
     38c:	orr	w1, w1, w0
     390:	str	w1, [x27, #640]
     394:	cmp	w2, #0x7
     398:	b.le	43d8 <BZ2_compressBlock+0x4208>
     39c:	ldr	w0, [x27, #116]
     3a0:	ldr	x2, [x27, #80]
     3a4:	lsr	w1, w1, #24
     3a8:	strb	w1, [x2, w0, sxtw]
     3ac:	ldr	w1, [x27, #640]
     3b0:	ldr	w0, [x27, #116]
     3b4:	ldr	w3, [x27, #644]
     3b8:	lsl	w1, w1, #8
     3bc:	add	w0, w0, #0x1
     3c0:	sub	w2, w3, #0x8
     3c4:	str	w0, [x27, #116]
     3c8:	str	w1, [x27, #640]
     3cc:	cmp	w2, #0x7
     3d0:	str	w2, [x27, #644]
     3d4:	b.gt	3a0 <BZ2_compressBlock+0x1d0>
     3d8:	mov	w0, #0x18                  	// #24
     3dc:	sub	w2, w0, w2
     3e0:	mov	w0, #0x26                  	// #38
     3e4:	str	w3, [x27, #644]
     3e8:	lsl	w0, w0, w2
     3ec:	orr	w1, w0, w1
     3f0:	str	w1, [x27, #640]
     3f4:	cmp	w3, #0x7
     3f8:	b.le	43a0 <BZ2_compressBlock+0x41d0>
     3fc:	ldr	w4, [x27, #116]
     400:	ldr	x0, [x27, #80]
     404:	lsr	w1, w1, #24
     408:	strb	w1, [x0, w4, sxtw]
     40c:	ldr	w1, [x27, #640]
     410:	ldr	w4, [x27, #116]
     414:	ldr	w2, [x27, #644]
     418:	lsl	w1, w1, #8
     41c:	add	w4, w4, #0x1
     420:	sub	w3, w2, #0x8
     424:	str	w4, [x27, #116]
     428:	str	w1, [x27, #640]
     42c:	cmp	w3, #0x7
     430:	str	w3, [x27, #644]
     434:	b.gt	400 <BZ2_compressBlock+0x230>
     438:	mov	w0, #0x18                  	// #24
     43c:	sub	w3, w0, w3
     440:	mov	w0, #0x53                  	// #83
     444:	str	w2, [x27, #644]
     448:	lsl	w0, w0, w3
     44c:	orr	w0, w0, w1
     450:	str	w0, [x27, #640]
     454:	cmp	w2, #0x7
     458:	b.le	43a8 <BZ2_compressBlock+0x41d8>
     45c:	ldr	w1, [x27, #116]
     460:	ldr	x2, [x27, #80]
     464:	lsr	w0, w0, #24
     468:	strb	w0, [x2, w1, sxtw]
     46c:	ldr	w0, [x27, #640]
     470:	ldr	w1, [x27, #116]
     474:	ldr	w3, [x27, #644]
     478:	lsl	w0, w0, #8
     47c:	add	w1, w1, #0x1
     480:	sub	w2, w3, #0x8
     484:	str	w1, [x27, #116]
     488:	str	w0, [x27, #640]
     48c:	cmp	w2, #0x7
     490:	str	w2, [x27, #644]
     494:	b.gt	460 <BZ2_compressBlock+0x290>
     498:	ldr	w1, [x27, #648]
     49c:	mov	w4, #0x18                  	// #24
     4a0:	sub	w4, w4, w2
     4a4:	mov	w2, #0x59                  	// #89
     4a8:	str	w3, [x27, #644]
     4ac:	lsl	w2, w2, w4
     4b0:	orr	w0, w2, w0
     4b4:	str	w0, [x27, #640]
     4b8:	mov	x0, x27
     4bc:	bl	0 <bsPutUInt32>
     4c0:	ldr	w1, [x27, #644]
     4c4:	cmp	w1, #0x7
     4c8:	b.le	43b0 <BZ2_compressBlock+0x41e0>
     4cc:	ldr	w2, [x27, #116]
     4d0:	ldr	w0, [x27, #640]
     4d4:	nop
     4d8:	ldr	x1, [x27, #80]
     4dc:	lsr	w0, w0, #24
     4e0:	strb	w0, [x1, w2, sxtw]
     4e4:	ldr	w0, [x27, #640]
     4e8:	ldr	w2, [x27, #116]
     4ec:	ldr	w1, [x27, #644]
     4f0:	lsl	w0, w0, #8
     4f4:	add	w2, w2, #0x1
     4f8:	sub	w1, w1, #0x8
     4fc:	str	w2, [x27, #116]
     500:	str	w0, [x27, #640]
     504:	cmp	w1, #0x7
     508:	str	w1, [x27, #644]
     50c:	b.gt	4d8 <BZ2_compressBlock+0x308>
     510:	add	w1, w1, #0x1
     514:	str	w1, [x27, #644]
     518:	ldr	w4, [x27, #48]
     51c:	cmp	w1, #0x8
     520:	b.ne	560 <BZ2_compressBlock+0x390>  // b.any
     524:	ldr	w2, [x27, #116]
     528:	ldr	x1, [x27, #80]
     52c:	lsr	w0, w0, #24
     530:	strb	w0, [x1, w2, sxtw]
     534:	ldr	w0, [x27, #640]
     538:	ldr	w2, [x27, #116]
     53c:	ldr	w1, [x27, #644]
     540:	lsl	w0, w0, #8
     544:	add	w2, w2, #0x1
     548:	sub	w1, w1, #0x8
     54c:	str	w2, [x27, #116]
     550:	str	w0, [x27, #640]
     554:	cmp	w1, #0x7
     558:	str	w1, [x27, #644]
     55c:	b.gt	528 <BZ2_compressBlock+0x358>
     560:	mov	w7, #0x8                   	// #8
     564:	sub	w7, w7, w1
     568:	ldp	x5, x6, [x27, #56]
     56c:	lsl	w4, w4, w7
     570:	orr	w0, w4, w0
     574:	add	x3, x27, #0x180
     578:	mov	w4, #0x0                   	// #0
     57c:	str	w0, [x27, #640]
     580:	mov	w0, w4
     584:	add	x2, x27, #0x80
     588:	ldr	x7, [x27, #72]
     58c:	add	w1, w1, #0x18
     590:	str	x7, [sp, #120]
     594:	str	wzr, [x27, #124]
     598:	str	x2, [sp, #624]
     59c:	str	w1, [x27, #644]
     5a0:	ldrb	w7, [x2]
     5a4:	add	w1, w0, #0x2
     5a8:	add	w4, w0, #0x1
     5ac:	cbz	w7, 5c0 <BZ2_compressBlock+0x3f0>
     5b0:	strb	w0, [x2, #256]
     5b4:	mov	w0, w4
     5b8:	str	w4, [x27, #124]
     5bc:	mov	w4, w1
     5c0:	add	x2, x2, #0x1
     5c4:	cmp	x3, x2
     5c8:	b.ne	5a0 <BZ2_compressBlock+0x3d0>  // b.any
     5cc:	add	x19, x27, #0x2a0
     5d0:	mov	w2, w0
     5d4:	mov	x0, #0x0                   	// #0
     5d8:	str	w2, [sp, #548]
     5dc:	nop
     5e0:	str	wzr, [x19, x0, lsl #2]
     5e4:	add	x0, x0, #0x1
     5e8:	sub	w1, w0, #0x1
     5ec:	cmp	w1, w2
     5f0:	b.le	5e0 <BZ2_compressBlock+0x410>
     5f4:	ldr	w0, [sp, #548]
     5f8:	cbz	w0, 43c0 <BZ2_compressBlock+0x41f0>
     5fc:	ldr	w2, [sp, #548]
     600:	add	x0, sp, #0x2b0
     604:	mov	x1, x0
     608:	mov	w0, #0x0                   	// #0
     60c:	str	x1, [sp, #400]
     610:	strb	w0, [x1], #1
     614:	add	w0, w0, #0x1
     618:	cmp	w0, w2
     61c:	b.ne	610 <BZ2_compressBlock+0x440>  // b.any
     620:	ldr	w2, [x27, #108]
     624:	mov	x7, #0x0                   	// #0
     628:	mov	w20, #0x0                   	// #0
     62c:	mov	w0, #0x0                   	// #0
     630:	cmp	w2, #0x0
     634:	mov	w9, #0x1                   	// #1
     638:	b.le	43cc <BZ2_compressBlock+0x41fc>
     63c:	ldr	x11, [sp, #120]
     640:	ldr	x12, [sp, #400]
     644:	b	658 <BZ2_compressBlock+0x488>
     648:	add	x7, x7, #0x1
     64c:	add	w0, w0, #0x1
     650:	cmp	w2, w7
     654:	b.le	6e4 <BZ2_compressBlock+0x514>
     658:	ldr	w1, [x5, x7, lsl #2]
     65c:	ldrb	w10, [sp, #688]
     660:	subs	w1, w1, #0x1
     664:	add	w3, w1, w2
     668:	csel	w1, w3, w1, mi  // mi = first
     66c:	ldrb	w1, [x6, w1, sxtw]
     670:	add	x1, x27, x1
     674:	ldrb	w8, [x1, #384]
     678:	cmp	w8, w10
     67c:	b.eq	648 <BZ2_compressBlock+0x478>  // b.none
     680:	cbnz	w0, 9c8 <BZ2_compressBlock+0x7f8>
     684:	ldrb	w3, [sp, #689]
     688:	strb	w10, [sp, #689]
     68c:	cmp	w8, w3
     690:	b.eq	a34 <BZ2_compressBlock+0x864>  // b.none
     694:	add	x0, x12, #0x1
     698:	mov	w1, w3
     69c:	ldrb	w3, [x0, #1]!
     6a0:	strb	w1, [x0]
     6a4:	cmp	w8, w3
     6a8:	b.ne	698 <BZ2_compressBlock+0x4c8>  // b.any
     6ac:	sub	x1, x0, x12
     6b0:	add	w1, w1, #0x1
     6b4:	and	w0, w1, #0xffff
     6b8:	add	x1, x27, w1, sxtw #2
     6bc:	strb	w3, [sp, #688]
     6c0:	strh	w0, [x11, w20, sxtw #1]
     6c4:	add	x7, x7, #0x1
     6c8:	add	w20, w20, #0x1
     6cc:	cmp	w2, w7
     6d0:	ldr	w3, [x1, #672]
     6d4:	mov	w0, #0x0                   	// #0
     6d8:	add	w3, w3, #0x1
     6dc:	str	w3, [x1, #672]
     6e0:	b.gt	658 <BZ2_compressBlock+0x488>
     6e4:	cbz	w0, 4340 <BZ2_compressBlock+0x4170>
     6e8:	sub	w0, w0, #0x1
     6ec:	sxtw	x1, w20
     6f0:	mov	w6, #0x1                   	// #1
     6f4:	ldr	x7, [sp, #120]
     6f8:	b	720 <BZ2_compressBlock+0x550>
     6fc:	ldr	w3, [x27, #676]
     700:	cmp	w0, #0x1
     704:	strh	w6, [x7, x1, lsl #1]
     708:	add	x1, x1, #0x1
     70c:	add	w3, w3, #0x1
     710:	str	w3, [x27, #676]
     714:	sub	w3, w0, #0x2
     718:	b.le	74c <BZ2_compressBlock+0x57c>
     71c:	asr	w0, w3, #1
     720:	mov	w20, w1
     724:	add	w5, w1, #0x1
     728:	tbnz	w0, #0, 6fc <BZ2_compressBlock+0x52c>
     72c:	ldr	w3, [x27, #672]
     730:	cmp	w0, #0x1
     734:	strh	wzr, [x7, x1, lsl #1]
     738:	add	x1, x1, #0x1
     73c:	add	w3, w3, #0x1
     740:	str	w3, [x27, #672]
     744:	sub	w3, w0, #0x2
     748:	b.gt	71c <BZ2_compressBlock+0x54c>
     74c:	ldr	x0, [sp, #120]
     750:	add	w20, w20, #0x2
     754:	add	x5, x0, w5, sxtw #1
     758:	add	x1, x27, w4, sxtw #2
     75c:	strh	w4, [x5]
     760:	ldr	w0, [x1, #672]
     764:	add	w0, w0, #0x1
     768:	str	w0, [x1, #672]
     76c:	str	w20, [x27, #668]
     770:	ldr	w0, [x27, #656]
     774:	cmp	w0, #0x2
     778:	b.gt	42f4 <BZ2_compressBlock+0x4124>
     77c:	ldr	w0, [sp, #548]
     780:	mov	x13, #0x934c                	// #37708
     784:	mov	x14, #0x9958                	// #39256
     788:	add	x1, x27, x13
     78c:	add	x4, x27, x14
     790:	add	w3, w0, #0x2
     794:	mov	w2, #0xf                   	// #15
     798:	str	w3, [sp, #544]
     79c:	str	x1, [sp, #592]
     7a0:	str	x4, [sp, #632]
     7a4:	nop
     7a8:	cmp	w3, #0x0
     7ac:	mov	x0, #0x0                   	// #0
     7b0:	b.le	7c8 <BZ2_compressBlock+0x5f8>
     7b4:	nop
     7b8:	strb	w2, [x1, x0]
     7bc:	add	x0, x0, #0x1
     7c0:	cmp	w3, w0
     7c4:	b.gt	7b8 <BZ2_compressBlock+0x5e8>
     7c8:	add	x1, x1, #0x102
     7cc:	cmp	x4, x1
     7d0:	b.ne	7a8 <BZ2_compressBlock+0x5d8>  // b.any
     7d4:	cmp	w20, #0x0
     7d8:	b.le	4350 <BZ2_compressBlock+0x4180>
     7dc:	cmp	w20, #0xc7
     7e0:	b.le	d00 <BZ2_compressBlock+0xb30>
     7e4:	cmp	w20, #0x257
     7e8:	b.le	4284 <BZ2_compressBlock+0x40b4>
     7ec:	cmp	w20, #0x4af
     7f0:	b.le	4360 <BZ2_compressBlock+0x4190>
     7f4:	cmp	w20, #0x95f
     7f8:	b.gt	4370 <BZ2_compressBlock+0x41a0>
     7fc:	mov	w0, #0x5                   	// #5
     800:	str	w0, [sp, #132]
     804:	str	w0, [sp, #644]
     808:	b	d0c <BZ2_compressBlock+0xb3c>
     80c:	mov	w26, w19
     810:	ldr	w22, [sp, #120]
     814:	ldr	w19, [sp, #128]
     818:	cmp	w19, w26
     81c:	b.eq	828 <BZ2_compressBlock+0x658>  // b.none
     820:	mov	w0, #0xbbf                 	// #3007
     824:	bl	0 <BZ2_bz__AssertH__fail>
     828:	ldr	w0, [x27, #656]
     82c:	cmp	w0, #0x2
     830:	b.gt	4320 <BZ2_compressBlock+0x4150>
     834:	ldp	x19, x20, [sp, #16]
     838:	ldp	x21, x22, [sp, #32]
     83c:	ldp	x23, x24, [sp, #48]
     840:	ldp	x25, x26, [sp, #64]
     844:	ldr	d8, [sp, #96]
     848:	ldr	w0, [sp, #612]
     84c:	cbnz	w0, a40 <BZ2_compressBlock+0x870>
     850:	ldp	x29, x30, [sp]
     854:	ldp	x27, x28, [sp, #80]
     858:	add	sp, sp, #0x3b0
     85c:	ret
     860:	adrp	x0, 0 <stderr>
     864:	adrp	x1, 0 <bsPutUInt32>
     868:	add	x1, x1, #0x0
     86c:	ldr	x0, [x0]
     870:	bl	0 <fprintf>
     874:	b	22c <BZ2_compressBlock+0x5c>
     878:	ldr	x0, [x0, #32]
     87c:	cmp	w2, #0x1
     880:	add	x5, x0, w5, sxtw
     884:	str	x5, [x27, #80]
     888:	b.ne	848 <BZ2_compressBlock+0x678>  // b.any
     88c:	mov	x1, #0x42000000            	// #1107296256
     890:	ldr	w0, [x27, #116]
     894:	movk	x1, #0x8, lsl #32
     898:	mov	w2, #0x42000000            	// #1107296256
     89c:	str	x1, [x27, #640]
     8a0:	b	8a8 <BZ2_compressBlock+0x6d8>
     8a4:	ldr	x5, [x27, #80]
     8a8:	lsr	w2, w2, #24
     8ac:	strb	w2, [x5, w0, sxtw]
     8b0:	ldr	w2, [x27, #640]
     8b4:	ldr	w0, [x27, #116]
     8b8:	ldr	w4, [x27, #644]
     8bc:	lsl	w2, w2, #8
     8c0:	add	w0, w0, #0x1
     8c4:	sub	w1, w4, #0x8
     8c8:	str	w0, [x27, #116]
     8cc:	str	w2, [x27, #640]
     8d0:	cmp	w1, #0x7
     8d4:	str	w1, [x27, #644]
     8d8:	b.gt	8a4 <BZ2_compressBlock+0x6d4>
     8dc:	mov	w3, #0x18                  	// #24
     8e0:	sub	w3, w3, w1
     8e4:	mov	w1, #0x5a                  	// #90
     8e8:	str	w4, [x27, #644]
     8ec:	lsl	w1, w1, w3
     8f0:	orr	w2, w1, w2
     8f4:	str	w2, [x27, #640]
     8f8:	cmp	w4, #0x7
     8fc:	b.le	4380 <BZ2_compressBlock+0x41b0>
     900:	ldr	x1, [x27, #80]
     904:	lsr	w2, w2, #24
     908:	strb	w2, [x1, w0, sxtw]
     90c:	ldr	w2, [x27, #640]
     910:	ldr	w0, [x27, #116]
     914:	ldr	w3, [x27, #644]
     918:	lsl	w2, w2, #8
     91c:	add	w0, w0, #0x1
     920:	sub	w4, w3, #0x8
     924:	str	w0, [x27, #116]
     928:	str	w2, [x27, #640]
     92c:	cmp	w4, #0x7
     930:	str	w4, [x27, #644]
     934:	b.gt	900 <BZ2_compressBlock+0x730>
     938:	mov	w1, #0x18                  	// #24
     93c:	sub	w5, w1, w4
     940:	ldr	w4, [x27, #664]
     944:	mov	w1, #0x68                  	// #104
     948:	lsl	w1, w1, w5
     94c:	orr	w1, w1, w2
     950:	str	w1, [x27, #640]
     954:	add	w4, w4, #0x30
     958:	str	w3, [x27, #644]
     95c:	cmp	w3, #0x7
     960:	and	w4, w4, #0xff
     964:	b.le	4388 <BZ2_compressBlock+0x41b8>
     968:	ldr	x2, [x27, #80]
     96c:	lsr	w1, w1, #24
     970:	strb	w1, [x2, w0, sxtw]
     974:	ldr	w1, [x27, #640]
     978:	ldr	w0, [x27, #116]
     97c:	ldr	w2, [x27, #644]
     980:	lsl	w1, w1, #8
     984:	add	w0, w0, #0x1
     988:	sub	w3, w2, #0x8
     98c:	str	w0, [x27, #116]
     990:	str	w1, [x27, #640]
     994:	cmp	w3, #0x7
     998:	str	w3, [x27, #644]
     99c:	b.gt	968 <BZ2_compressBlock+0x798>
     9a0:	mov	w0, #0x18                  	// #24
     9a4:	sub	w3, w0, w3
     9a8:	ldr	w0, [x27, #108]
     9ac:	lsl	w3, w4, w3
     9b0:	orr	w1, w3, w1
     9b4:	str	w1, [x27, #640]
     9b8:	cmp	w0, #0x0
     9bc:	str	w2, [x27, #644]
     9c0:	b.gt	258 <BZ2_compressBlock+0x88>
     9c4:	b	848 <BZ2_compressBlock+0x678>
     9c8:	sub	w0, w0, #0x1
     9cc:	sxtw	x1, w20
     9d0:	b	9f8 <BZ2_compressBlock+0x828>
     9d4:	ldr	w3, [x27, #676]
     9d8:	cmp	w0, #0x1
     9dc:	strh	w9, [x11, x1, lsl #1]
     9e0:	add	x1, x1, #0x1
     9e4:	add	w3, w3, #0x1
     9e8:	str	w3, [x27, #676]
     9ec:	sub	w3, w0, #0x2
     9f0:	b.le	a20 <BZ2_compressBlock+0x850>
     9f4:	asr	w0, w3, #1
     9f8:	add	w20, w1, #0x1
     9fc:	tbnz	w0, #0, 9d4 <BZ2_compressBlock+0x804>
     a00:	ldr	w3, [x27, #672]
     a04:	cmp	w0, #0x1
     a08:	strh	wzr, [x11, x1, lsl #1]
     a0c:	add	x1, x1, #0x1
     a10:	add	w3, w3, #0x1
     a14:	str	w3, [x27, #672]
     a18:	sub	w3, w0, #0x2
     a1c:	b.gt	9f4 <BZ2_compressBlock+0x824>
     a20:	ldrb	w10, [sp, #688]
     a24:	ldrb	w3, [sp, #689]
     a28:	strb	w10, [sp, #689]
     a2c:	cmp	w8, w3
     a30:	b.ne	694 <BZ2_compressBlock+0x4c4>  // b.any
     a34:	mov	w1, #0x2                   	// #2
     a38:	mov	w0, w1
     a3c:	b	6b8 <BZ2_compressBlock+0x4e8>
     a40:	ldr	w0, [x27, #644]
     a44:	ldr	w1, [x27, #640]
     a48:	cmp	w0, #0x7
     a4c:	b.le	4408 <BZ2_compressBlock+0x4238>
     a50:	ldr	w3, [x27, #116]
     a54:	nop
     a58:	ldr	x0, [x27, #80]
     a5c:	lsr	w1, w1, #24
     a60:	strb	w1, [x0, w3, sxtw]
     a64:	ldr	w1, [x27, #640]
     a68:	ldr	w3, [x27, #116]
     a6c:	ldr	w2, [x27, #644]
     a70:	lsl	w1, w1, #8
     a74:	add	w3, w3, #0x1
     a78:	sub	w0, w2, #0x8
     a7c:	str	w3, [x27, #116]
     a80:	str	w1, [x27, #640]
     a84:	cmp	w0, #0x7
     a88:	str	w0, [x27, #644]
     a8c:	b.gt	a58 <BZ2_compressBlock+0x888>
     a90:	mov	w3, #0x18                  	// #24
     a94:	sub	w3, w3, w0
     a98:	mov	w0, #0x17                  	// #23
     a9c:	str	w2, [x27, #644]
     aa0:	lsl	w0, w0, w3
     aa4:	orr	w0, w0, w1
     aa8:	str	w0, [x27, #640]
     aac:	cmp	w2, #0x7
     ab0:	b.le	43e8 <BZ2_compressBlock+0x4218>
     ab4:	ldr	w1, [x27, #116]
     ab8:	ldr	x2, [x27, #80]
     abc:	lsr	w0, w0, #24
     ac0:	strb	w0, [x2, w1, sxtw]
     ac4:	ldr	w0, [x27, #640]
     ac8:	ldr	w1, [x27, #116]
     acc:	ldr	w3, [x27, #644]
     ad0:	lsl	w0, w0, #8
     ad4:	add	w1, w1, #0x1
     ad8:	sub	w2, w3, #0x8
     adc:	str	w1, [x27, #116]
     ae0:	str	w0, [x27, #640]
     ae4:	cmp	w2, #0x7
     ae8:	str	w2, [x27, #644]
     aec:	b.gt	ab8 <BZ2_compressBlock+0x8e8>
     af0:	mov	w1, #0x18                  	// #24
     af4:	sub	w2, w1, w2
     af8:	mov	w1, #0x72                  	// #114
     afc:	str	w3, [x27, #644]
     b00:	lsl	w1, w1, w2
     b04:	orr	w0, w1, w0
     b08:	str	w0, [x27, #640]
     b0c:	cmp	w3, #0x7
     b10:	b.le	43e0 <BZ2_compressBlock+0x4210>
     b14:	ldr	w4, [x27, #116]
     b18:	ldr	x1, [x27, #80]
     b1c:	lsr	w0, w0, #24
     b20:	strb	w0, [x1, w4, sxtw]
     b24:	ldr	w0, [x27, #640]
     b28:	ldr	w4, [x27, #116]
     b2c:	ldr	w2, [x27, #644]
     b30:	lsl	w0, w0, #8
     b34:	add	w4, w4, #0x1
     b38:	sub	w3, w2, #0x8
     b3c:	str	w4, [x27, #116]
     b40:	str	w0, [x27, #640]
     b44:	cmp	w3, #0x7
     b48:	str	w3, [x27, #644]
     b4c:	b.gt	b18 <BZ2_compressBlock+0x948>
     b50:	mov	w1, #0x18                  	// #24
     b54:	sub	w3, w1, w3
     b58:	mov	w1, #0x45                  	// #69
     b5c:	str	w2, [x27, #644]
     b60:	lsl	w1, w1, w3
     b64:	orr	w1, w1, w0
     b68:	str	w1, [x27, #640]
     b6c:	cmp	w2, #0x7
     b70:	b.le	43f0 <BZ2_compressBlock+0x4220>
     b74:	ldr	w0, [x27, #116]
     b78:	ldr	x2, [x27, #80]
     b7c:	lsr	w1, w1, #24
     b80:	strb	w1, [x2, w0, sxtw]
     b84:	ldr	w1, [x27, #640]
     b88:	ldr	w0, [x27, #116]
     b8c:	ldr	w3, [x27, #644]
     b90:	lsl	w1, w1, #8
     b94:	add	w0, w0, #0x1
     b98:	sub	w2, w3, #0x8
     b9c:	str	w0, [x27, #116]
     ba0:	str	w1, [x27, #640]
     ba4:	cmp	w2, #0x7
     ba8:	str	w2, [x27, #644]
     bac:	b.gt	b78 <BZ2_compressBlock+0x9a8>
     bb0:	mov	w0, #0x18                  	// #24
     bb4:	sub	w2, w0, w2
     bb8:	mov	w0, #0x38                  	// #56
     bbc:	str	w3, [x27, #644]
     bc0:	lsl	w0, w0, w2
     bc4:	orr	w1, w0, w1
     bc8:	str	w1, [x27, #640]
     bcc:	cmp	w3, #0x7
     bd0:	b.le	43f8 <BZ2_compressBlock+0x4228>
     bd4:	ldr	w4, [x27, #116]
     bd8:	ldr	x0, [x27, #80]
     bdc:	lsr	w1, w1, #24
     be0:	strb	w1, [x0, w4, sxtw]
     be4:	ldr	w1, [x27, #640]
     be8:	ldr	w4, [x27, #116]
     bec:	ldr	w2, [x27, #644]
     bf0:	lsl	w1, w1, #8
     bf4:	add	w4, w4, #0x1
     bf8:	sub	w3, w2, #0x8
     bfc:	str	w4, [x27, #116]
     c00:	str	w1, [x27, #640]
     c04:	cmp	w3, #0x7
     c08:	str	w3, [x27, #644]
     c0c:	b.gt	bd8 <BZ2_compressBlock+0xa08>
     c10:	mov	w0, #0x18                  	// #24
     c14:	sub	w3, w0, w3
     c18:	mov	w0, #0x50                  	// #80
     c1c:	str	w2, [x27, #644]
     c20:	lsl	w0, w0, w3
     c24:	orr	w0, w0, w1
     c28:	str	w0, [x27, #640]
     c2c:	cmp	w2, #0x7
     c30:	b.le	4400 <BZ2_compressBlock+0x4230>
     c34:	ldr	w1, [x27, #116]
     c38:	ldr	x2, [x27, #80]
     c3c:	lsr	w0, w0, #24
     c40:	strb	w0, [x2, w1, sxtw]
     c44:	ldr	w0, [x27, #640]
     c48:	ldr	w1, [x27, #116]
     c4c:	ldr	w3, [x27, #644]
     c50:	lsl	w0, w0, #8
     c54:	add	w1, w1, #0x1
     c58:	sub	w2, w3, #0x8
     c5c:	str	w1, [x27, #116]
     c60:	str	w0, [x27, #640]
     c64:	cmp	w2, #0x7
     c68:	str	w2, [x27, #644]
     c6c:	b.gt	c38 <BZ2_compressBlock+0xa68>
     c70:	ldr	w1, [x27, #652]
     c74:	mov	w4, #0x18                  	// #24
     c78:	sub	w4, w4, w2
     c7c:	mov	w2, #0x90                  	// #144
     c80:	str	w3, [x27, #644]
     c84:	lsl	w2, w2, w4
     c88:	orr	w0, w2, w0
     c8c:	str	w0, [x27, #640]
     c90:	mov	x0, x27
     c94:	bl	0 <bsPutUInt32>
     c98:	ldr	w0, [x27, #656]
     c9c:	cmp	w0, #0x1
     ca0:	b.gt	4268 <BZ2_compressBlock+0x4098>
     ca4:	ldr	w0, [x27, #644]
     ca8:	cmp	w0, #0x0
     cac:	b.le	850 <BZ2_compressBlock+0x680>
     cb0:	ldr	w1, [x27, #116]
     cb4:	ldr	w0, [x27, #640]
     cb8:	ldr	x2, [x27, #80]
     cbc:	lsr	w0, w0, #24
     cc0:	strb	w0, [x2, w1, sxtw]
     cc4:	ldr	w0, [x27, #640]
     cc8:	ldr	w1, [x27, #116]
     ccc:	ldr	w2, [x27, #644]
     cd0:	lsl	w0, w0, #8
     cd4:	add	w1, w1, #0x1
     cd8:	sub	w2, w2, #0x8
     cdc:	str	w1, [x27, #116]
     ce0:	str	w0, [x27, #640]
     ce4:	cmp	w2, #0x0
     ce8:	str	w2, [x27, #644]
     cec:	b.gt	cb8 <BZ2_compressBlock+0xae8>
     cf0:	ldp	x29, x30, [sp]
     cf4:	ldp	x27, x28, [sp, #80]
     cf8:	add	sp, sp, #0x3b0
     cfc:	ret
     d00:	mov	w0, #0x2                   	// #2
     d04:	str	w0, [sp, #132]
     d08:	str	w0, [sp, #644]
     d0c:	ldr	w25, [sp, #132]
     d10:	mov	w24, #0x102                 	// #258
     d14:	mov	x8, x19
     d18:	mov	x0, #0x4059000000000000    	// #4636737291354636288
     d1c:	mov	w26, w25
     d20:	adrp	x1, 0 <bsPutUInt32>
     d24:	cmp	w25, w26
     d28:	mov	w23, #0x0                   	// #0
     d2c:	smaddl	x24, w25, w24, x27
     d30:	cset	w5, ne  // ne = any
     d34:	sdiv	w2, w20, w26
     d38:	cmp	w26, #0x1
     d3c:	cset	w4, ne  // ne = any
     d40:	mov	x12, #0x924a                	// #37450
     d44:	ldr	w19, [sp, #544]
     d48:	add	x6, x1, #0x0
     d4c:	add	x24, x24, x12
     d50:	sub	w21, w23, #0x1
     d54:	cmp	w2, #0x0
     d58:	fmov	d8, x0
     d5c:	mov	w28, #0xf                   	// #15
     d60:	b.le	e4c <BZ2_compressBlock+0xc7c>
     d64:	nop
     d68:	ldr	w0, [sp, #548]
     d6c:	add	w1, w0, #0x1
     d70:	cmp	w21, w1
     d74:	b.ge	e4c <BZ2_compressBlock+0xc7c>  // b.tcont
     d78:	sxtw	x0, w23
     d7c:	sub	w1, w1, w23
     d80:	add	x3, x0, #0x1
     d84:	mov	w22, #0x0                   	// #0
     d88:	add	x1, x1, x3
     d8c:	b	d98 <BZ2_compressBlock+0xbc8>
     d90:	cmp	x1, x0
     d94:	b.eq	db0 <BZ2_compressBlock+0xbe0>  // b.none
     d98:	ldr	w3, [x8, x0, lsl #2]
     d9c:	mov	w21, w0
     da0:	add	x0, x0, #0x1
     da4:	add	w22, w22, w3
     da8:	cmp	w2, w22
     dac:	b.gt	d90 <BZ2_compressBlock+0xbc0>
     db0:	cmp	w5, #0x0
     db4:	ccmp	w4, #0x0, #0x4, ne  // ne = any
     db8:	cset	w0, ne  // ne = any
     dbc:	cmp	w21, w23
     dc0:	cset	w1, gt
     dc4:	and	w0, w0, w1
     dc8:	cbnz	w0, e54 <BZ2_compressBlock+0xc84>
     dcc:	ldr	w0, [x27, #656]
     dd0:	add	w9, w21, #0x1
     dd4:	cmp	w0, #0x2
     dd8:	b.gt	e80 <BZ2_compressBlock+0xcb0>
     ddc:	sub	w26, w26, #0x1
     de0:	cmp	w19, #0x0
     de4:	mov	x0, #0x0                   	// #0
     de8:	b.gt	e00 <BZ2_compressBlock+0xc30>
     dec:	b	e1c <BZ2_compressBlock+0xc4c>
     df0:	strb	wzr, [x24, x0]
     df4:	add	x0, x0, #0x1
     df8:	cmp	w19, w0
     dfc:	b.le	e1c <BZ2_compressBlock+0xc4c>
     e00:	cmp	w23, w0
     e04:	ccmp	w21, w0, #0x1, le
     e08:	b.ge	df0 <BZ2_compressBlock+0xc20>  // b.tcont
     e0c:	strb	w28, [x24, x0]
     e10:	add	x0, x0, #0x1
     e14:	cmp	w19, w0
     e18:	b.gt	e00 <BZ2_compressBlock+0xc30>
     e1c:	sub	w20, w20, w22
     e20:	sub	x24, x24, #0x102
     e24:	cbz	w26, ed8 <BZ2_compressBlock+0xd08>
     e28:	sdiv	w2, w20, w26
     e2c:	cmp	w25, w26
     e30:	mov	w23, w9
     e34:	cset	w5, ne  // ne = any
     e38:	cmp	w26, #0x1
     e3c:	sub	w21, w23, #0x1
     e40:	cset	w4, ne  // ne = any
     e44:	cmp	w2, #0x0
     e48:	b.gt	d68 <BZ2_compressBlock+0xb98>
     e4c:	mov	w22, #0x0                   	// #0
     e50:	b	dcc <BZ2_compressBlock+0xbfc>
     e54:	sub	w0, w25, w26
     e58:	tbz	w0, #0, dcc <BZ2_compressBlock+0xbfc>
     e5c:	add	x0, x27, w21, sxtw #2
     e60:	mov	w9, w21
     e64:	sub	w21, w21, #0x1
     e68:	ldr	w0, [x0, #672]
     e6c:	sub	w22, w22, w0
     e70:	ldr	w0, [x27, #656]
     e74:	cmp	w0, #0x2
     e78:	b.le	ddc <BZ2_compressBlock+0xc0c>
     e7c:	nop
     e80:	scvtf	s1, w22
     e84:	ldr	s0, [x27, #668]
     e88:	adrp	x0, 0 <stderr>
     e8c:	mov	x1, x6
     e90:	mov	w5, w22
     e94:	mov	w4, w21
     e98:	scvtf	s0, s0
     e9c:	mov	w3, w23
     ea0:	fcvt	d1, s1
     ea4:	mov	w2, w26
     ea8:	ldr	x0, [x0]
     eac:	str	w9, [sp, #128]
     eb0:	fcvt	d0, s0
     eb4:	str	x8, [sp, #136]
     eb8:	fmul	d1, d1, d8
     ebc:	fdiv	d0, d1, d0
     ec0:	bl	0 <fprintf>
     ec4:	adrp	x0, 0 <bsPutUInt32>
     ec8:	ldr	w9, [sp, #128]
     ecc:	add	x6, x0, #0x0
     ed0:	ldr	x8, [sp, #136]
     ed4:	b	ddc <BZ2_compressBlock+0xc0c>
     ed8:	ldr	w0, [sp, #132]
     edc:	mov	x8, #0xb590                	// #46480
     ee0:	ldr	x1, [sp, #400]
     ee4:	sub	w0, w0, #0x1
     ee8:	add	x5, x27, x8
     eec:	mov	x9, #0x944e                	// #37966
     ef0:	add	x8, x27, x9
     ef4:	add	x3, x1, #0x4
     ef8:	mov	w6, #0x408                 	// #1032
     efc:	ldr	w1, [sp, #548]
     f00:	mov	w4, #0x102                 	// #258
     f04:	add	x7, sp, #0x292
     f08:	umaddl	x5, w0, w6, x5
     f0c:	add	x7, x7, w0, uxtw #1
     f10:	add	x3, x3, w0, uxtw #2
     f14:	add	w1, w1, #0x1
     f18:	umaddl	x0, w0, w4, x8
     f1c:	mov	x10, #0x934d                	// #37709
     f20:	add	x2, x27, x10
     f24:	mov	x21, x27
     f28:	str	x0, [sp, #576]
     f2c:	add	x0, x2, x1
     f30:	mov	x11, #0xb188                	// #45448
     f34:	str	x7, [sp, #392]
     f38:	str	wzr, [sp, #540]
     f3c:	str	x3, [sp, #560]
     f40:	str	x5, [sp, #568]
     f44:	str	x8, [sp, #616]
     f48:	str	w26, [sp, #640]
     f4c:	str	x0, [sp, #648]
     f50:	add	x0, x27, x11
     f54:	str	x0, [sp, #600]
     f58:	ldr	x0, [sp, #400]
     f5c:	nop
     f60:	str	wzr, [x0], #4
     f64:	ldr	x1, [sp, #560]
     f68:	cmp	x1, x0
     f6c:	b.ne	f60 <BZ2_compressBlock+0xd90>  // b.any
     f70:	ldr	w2, [sp, #544]
     f74:	ldr	x1, [sp, #600]
     f78:	str	x1, [sp, #584]
     f7c:	nop
     f80:	cmp	w2, #0x0
     f84:	mov	x0, #0x0                   	// #0
     f88:	b.le	fa0 <BZ2_compressBlock+0xdd0>
     f8c:	nop
     f90:	str	wzr, [x1, x0, lsl #2]
     f94:	add	x0, x0, #0x1
     f98:	cmp	w2, w0
     f9c:	b.gt	f90 <BZ2_compressBlock+0xdc0>
     fa0:	ldr	x0, [sp, #568]
     fa4:	add	x1, x1, #0x408
     fa8:	cmp	x0, x1
     fac:	b.ne	f80 <BZ2_compressBlock+0xdb0>  // b.any
     fb0:	ldr	w0, [sp, #132]
     fb4:	cmp	w0, #0x6
     fb8:	b.eq	4178 <BZ2_compressBlock+0x3fa8>  // b.none
     fbc:	ldr	w0, [x21, #668]
     fc0:	str	w0, [sp, #384]
     fc4:	cmp	w0, #0x0
     fc8:	b.le	41e8 <BZ2_compressBlock+0x4018>
     fcc:	sub	w0, w0, #0x1
     fd0:	mov	w1, #0x0                   	// #0
     fd4:	mov	x2, #0x1                   	// #1
     fd8:	mov	w28, w1
     fdc:	ldr	w1, [sp, #384]
     fe0:	str	x2, [sp, #144]
     fe4:	add	x2, x21, #0x6a7
     fe8:	str	wzr, [sp, #388]
     fec:	str	x2, [sp, #552]
     ff0:	str	w0, [sp, #608]
     ff4:	add	w0, w28, #0x31
     ff8:	str	w0, [sp, #128]
     ffc:	cmp	w0, w1
    1000:	b.ge	21a8 <BZ2_compressBlock+0x1fd8>  // b.tcont
    1004:	nop
    1008:	add	w0, w28, #0x32
    100c:	str	w0, [sp, #136]
    1010:	add	x0, sp, #0x290
    1014:	nop
    1018:	ldr	x1, [sp, #392]
    101c:	strh	wzr, [x0], #2
    1020:	cmp	x1, x0
    1024:	b.ne	1018 <BZ2_compressBlock+0xe48>  // b.any
    1028:	ldr	w0, [sp, #132]
    102c:	cmp	w0, #0x6
    1030:	b.ne	21bc <BZ2_compressBlock+0x1fec>  // b.any
    1034:	ldr	w0, [sp, #128]
    1038:	sub	w0, w0, w28
    103c:	cmp	w0, #0x31
    1040:	b.ne	21bc <BZ2_compressBlock+0x1fec>  // b.any
    1044:	ldr	x2, [sp, #120]
    1048:	sbfiz	x0, x28, #1, #32
    104c:	str	x0, [sp, #408]
    1050:	add	x0, x2, x0
    1054:	ldrh	w2, [x0, #6]
    1058:	ldrh	w1, [x0, #8]
    105c:	ldrh	w30, [x0, #2]
    1060:	add	x18, x2, #0xc9b
    1064:	ldrh	w3, [x0, #4]
    1068:	add	x17, x1, #0xc9b
    106c:	ldrh	w5, [x0, #26]
    1070:	add	x16, x30, #0xc9b
    1074:	ldrh	w6, [x0, #30]
    1078:	add	x15, x3, #0xc9b
    107c:	ldrh	w4, [x0, #28]
    1080:	add	x18, x21, x18, lsl #4
    1084:	stp	x3, x5, [sp, #160]
    1088:	mov	x3, x6
    108c:	add	x6, x5, #0xc9b
    1090:	ldrh	w5, [x0, #32]
    1094:	add	x17, x21, x17, lsl #4
    1098:	add	x16, x21, x16, lsl #4
    109c:	str	x5, [sp, #152]
    10a0:	ldrh	w27, [x0, #10]
    10a4:	add	x5, x4, #0xc9b
    10a8:	ldrh	w26, [x0, #12]
    10ac:	add	x15, x21, x15, lsl #4
    10b0:	ldrh	w25, [x0, #14]
    10b4:	add	x6, x21, x6, lsl #4
    10b8:	ldrh	w19, [x0, #24]
    10bc:	add	x14, x27, #0xc9b
    10c0:	ldrh	w24, [x0, #16]
    10c4:	add	x13, x26, #0xc9b
    10c8:	ldrh	w23, [x0, #18]
    10cc:	add	x12, x25, #0xc9b
    10d0:	ldrh	w22, [x0, #20]
    10d4:	add	x5, x21, x5, lsl #4
    10d8:	ldrh	w20, [x0, #22]
    10dc:	add	x11, x24, #0xc9b
    10e0:	str	x4, [sp, #176]
    10e4:	add	x4, x3, #0xc9b
    10e8:	str	x3, [sp, #184]
    10ec:	add	x10, x23, #0xc9b
    10f0:	ldr	x3, [sp, #152]
    10f4:	add	x9, x22, #0xc9b
    10f8:	ldr	w16, [x16, #8]
    10fc:	add	x8, x20, #0xc9b
    1100:	ldr	w17, [x17, #8]
    1104:	add	x7, x19, #0xc9b
    1108:	ldr	w18, [x18, #8]
    110c:	add	x30, x21, x30, lsl #4
    1110:	ldr	w15, [x15, #8]
    1114:	add	x14, x21, x14, lsl #4
    1118:	str	x30, [sp, #200]
    111c:	add	x13, x21, x13, lsl #4
    1120:	str	w18, [sp, #320]
    1124:	add	x12, x21, x12, lsl #4
    1128:	str	w17, [sp, #328]
    112c:	add	x3, x3, #0xc9b
    1130:	str	w16, [sp, #336]
    1134:	add	x11, x21, x11, lsl #4
    1138:	str	w15, [sp, #344]
    113c:	add	x9, x21, x9, lsl #4
    1140:	ldr	w6, [x6, #8]
    1144:	add	x8, x21, x8, lsl #4
    1148:	ldr	w16, [x5, #8]
    114c:	add	x10, x21, x10, lsl #4
    1150:	add	x7, x21, x7, lsl #4
    1154:	str	w6, [sp, #432]
    1158:	ldr	x15, [sp, #160]
    115c:	add	x3, x21, x3, lsl #4
    1160:	ldr	x6, [sp, #168]
    1164:	add	x4, x21, x4, lsl #4
    1168:	ldr	x5, [sp, #176]
    116c:	add	x22, x21, x22, lsl #4
    1170:	ldr	w12, [x12, #8]
    1174:	add	x27, x21, x27, lsl #4
    1178:	ldr	w13, [x13, #8]
    117c:	add	x26, x21, x26, lsl #4
    1180:	ldr	w14, [x14, #8]
    1184:	add	x17, x21, x5, lsl #4
    1188:	ldr	w7, [x7, #8]
    118c:	add	x24, x21, x24, lsl #4
    1190:	ldr	w10, [x10, #8]
    1194:	add	x23, x21, x23, lsl #4
    1198:	str	w14, [sp, #352]
    119c:	add	x15, x21, x15, lsl #4
    11a0:	ldr	w14, [x8, #8]
    11a4:	add	x6, x21, x6, lsl #4
    11a8:	str	w13, [sp, #360]
    11ac:	add	x2, x21, x2, lsl #4
    11b0:	ldr	w13, [x9, #8]
    11b4:	add	x1, x21, x1, lsl #4
    11b8:	str	w12, [sp, #368]
    11bc:	add	x25, x21, x25, lsl #4
    11c0:	ldr	w12, [x11, #8]
    11c4:	add	x25, x25, #0xc, lsl #12
    11c8:	str	x15, [sp, #160]
    11cc:	add	x15, x2, #0xc, lsl #12
    11d0:	str	x27, [sp, #208]
    11d4:	add	x20, x21, x20, lsl #4
    11d8:	stp	x26, x24, [sp, #216]
    11dc:	add	x20, x20, #0xc, lsl #12
    11e0:	stp	x23, x22, [sp, #232]
    11e4:	str	x17, [sp, #264]
    11e8:	add	x17, x1, #0xc, lsl #12
    11ec:	str	w12, [sp, #376]
    11f0:	str	w10, [sp, #416]
    11f4:	str	w13, [sp, #420]
    11f8:	str	w14, [sp, #424]
    11fc:	str	w7, [sp, #428]
    1200:	add	x7, x21, x19, lsl #4
    1204:	stp	x7, x6, [sp, #248]
    1208:	str	w16, [sp, #436]
    120c:	ldr	w4, [x4, #8]
    1210:	ldr	w22, [x3, #8]
    1214:	ldr	x3, [sp, #152]
    1218:	stp	x15, x17, [sp, #464]
    121c:	ldrh	w14, [x0, #38]
    1220:	ldr	x5, [sp, #184]
    1224:	add	x2, x14, #0xc9b
    1228:	ldrh	w16, [x0, #34]
    122c:	add	x3, x21, x3, lsl #4
    1230:	ldrh	w13, [x0, #40]
    1234:	add	x2, x21, x2, lsl #4
    1238:	ldrh	w8, [x0, #50]
    123c:	add	x1, x16, #0xc9b
    1240:	ldrh	w15, [x0, #36]
    1244:	add	x18, x21, x5, lsl #4
    1248:	ldrh	w7, [x0, #52]
    124c:	add	x27, x13, #0xc9b
    1250:	add	x19, x8, #0xc9b
    1254:	add	x30, x15, #0xc9b
    1258:	stp	x18, x3, [sp, #272]
    125c:	add	x1, x21, x1, lsl #4
    1260:	ldrh	w3, [x0, #60]
    1264:	str	x3, [sp, #192]
    1268:	mov	x3, x2
    126c:	add	x19, x21, x19, lsl #4
    1270:	add	x18, x7, #0xc9b
    1274:	add	x27, x21, x27, lsl #4
    1278:	add	x30, x21, x30, lsl #4
    127c:	ldr	w1, [x1, #8]
    1280:	add	x18, x21, x18, lsl #4
    1284:	ldr	w3, [x3, #8]
    1288:	add	x7, x21, x7, lsl #4
    128c:	ldrh	w12, [x0, #42]
    1290:	add	x7, x7, #0xc, lsl #12
    1294:	ldrh	w11, [x0, #44]
    1298:	add	x14, x21, x14, lsl #4
    129c:	ldrh	w10, [x0, #46]
    12a0:	add	x26, x12, #0xc9b
    12a4:	ldrh	w9, [x0, #48]
    12a8:	add	x24, x11, #0xc9b
    12ac:	ldrh	w6, [x0, #54]
    12b0:	add	x23, x10, #0xc9b
    12b4:	ldrh	w5, [x0, #56]
    12b8:	add	x26, x21, x26, lsl #4
    12bc:	ldrh	w2, [x0, #62]
    12c0:	add	x17, x6, #0xc9b
    12c4:	ldr	w30, [x30, #8]
    12c8:	add	x24, x21, x24, lsl #4
    12cc:	str	w4, [sp, #440]
    12d0:	add	x17, x21, x17, lsl #4
    12d4:	ldrh	w4, [x0, #58]
    12d8:	add	x23, x21, x23, lsl #4
    12dc:	str	w22, [sp, #444]
    12e0:	add	x22, x9, #0xc9b
    12e4:	str	w1, [sp, #448]
    12e8:	add	x6, x21, x6, lsl #4
    12ec:	ldrh	w1, [x0, #64]
    12f0:	add	x22, x21, x22, lsl #4
    12f4:	str	w3, [sp, #452]
    12f8:	add	x14, x14, #0xc, lsl #12
    12fc:	ldr	w27, [x27, #8]
    1300:	add	x13, x21, x13, lsl #4
    1304:	ldr	w3, [x19, #8]
    1308:	add	x13, x13, #0xc, lsl #12
    130c:	ldr	x19, [sp, #200]
    1310:	str	x25, [sp, #512]
    1314:	ldr	w18, [x18, #8]
    1318:	add	x8, x21, x8, lsl #4
    131c:	str	w18, [sp, #460]
    1320:	add	x18, x19, #0xc, lsl #12
    1324:	ldr	x19, [sp, #160]
    1328:	str	w3, [sp, #456]
    132c:	ldr	x25, [sp, #224]
    1330:	add	x19, x19, #0xc, lsl #12
    1334:	stp	x18, x19, [sp, #480]
    1338:	add	x9, x21, x9, lsl #4
    133c:	ldr	w3, [x17, #8]
    1340:	ldr	x19, [sp, #208]
    1344:	add	x17, x5, #0xc9b
    1348:	add	x25, x25, #0xc, lsl #12
    134c:	str	x25, [sp, #520]
    1350:	add	x18, x19, #0xc, lsl #12
    1354:	add	x17, x21, x17, lsl #4
    1358:	ldr	x19, [sp, #216]
    135c:	str	x20, [sp, #168]
    1360:	ldr	x25, [sp, #232]
    1364:	add	x19, x19, #0xc, lsl #12
    1368:	stp	x18, x19, [sp, #496]
    136c:	add	x5, x21, x5, lsl #4
    1370:	ldr	w18, [x17, #8]
    1374:	add	x25, x25, #0xc, lsl #12
    1378:	add	x17, x4, #0xc9b
    137c:	str	x25, [sp, #152]
    1380:	add	x5, x5, #0xc, lsl #12
    1384:	ldr	x19, [sp, #240]
    1388:	add	x17, x21, x17, lsl #4
    138c:	ldr	x20, [sp, #248]
    1390:	add	x19, x19, #0xc, lsl #12
    1394:	ldr	x25, [sp, #256]
    1398:	add	x20, x20, #0xc, lsl #12
    139c:	ldr	w22, [x22, #8]
    13a0:	add	x4, x21, x4, lsl #4
    13a4:	add	x25, x25, #0xc, lsl #12
    13a8:	ldr	w26, [x26, #8]
    13ac:	ldr	w23, [x23, #8]
    13b0:	add	x8, x8, #0xc, lsl #12
    13b4:	ldr	w24, [x24, #8]
    13b8:	add	x9, x9, #0xc, lsl #12
    13bc:	str	x19, [sp, #160]
    13c0:	add	x16, x21, x16, lsl #4
    13c4:	str	x20, [sp, #176]
    13c8:	add	x10, x21, x10, lsl #4
    13cc:	str	x25, [sp, #184]
    13d0:	add	x16, x16, #0xc, lsl #12
    13d4:	str	w3, [sp, #536]
    13d8:	add	x10, x10, #0xc, lsl #12
    13dc:	ldr	w19, [x17, #8]
    13e0:	add	x15, x21, x15, lsl #4
    13e4:	ldp	x20, x25, [sp, #264]
    13e8:	str	x7, [sp, #288]
    13ec:	ldr	x3, [sp, #192]
    13f0:	add	x7, x6, #0xc, lsl #12
    13f4:	stp	x14, x13, [sp, #232]
    13f8:	add	x14, x2, #0xc9b
    13fc:	add	x17, x3, #0xc9b
    1400:	add	x20, x20, #0xc, lsl #12
    1404:	str	x7, [sp, #296]
    1408:	add	x7, x1, #0xc9b
    140c:	add	x25, x25, #0xc, lsl #12
    1410:	stp	x20, x25, [sp, #192]
    1414:	add	x17, x21, x17, lsl #4
    1418:	add	x14, x21, x14, lsl #4
    141c:	ldr	x20, [sp, #280]
    1420:	str	x5, [sp, #304]
    1424:	add	x5, x4, #0xc, lsl #12
    1428:	add	x4, x21, x7, lsl #4
    142c:	add	x12, x21, x12, lsl #4
    1430:	add	x11, x21, x11, lsl #4
    1434:	add	x3, x21, x3, lsl #4
    1438:	add	x2, x21, x2, lsl #4
    143c:	stp	x10, x9, [sp, #264]
    1440:	add	x12, x12, #0xc, lsl #12
    1444:	ldr	w9, [sp, #328]
    1448:	str	x8, [sp, #280]
    144c:	add	x11, x11, #0xc, lsl #12
    1450:	ldr	w8, [sp, #320]
    1454:	add	x3, x3, #0xc, lsl #12
    1458:	add	x2, x2, #0xc, lsl #12
    145c:	add	x20, x20, #0xc, lsl #12
    1460:	str	x20, [sp, #208]
    1464:	add	w7, w8, w9
    1468:	str	x16, [sp, #216]
    146c:	add	x16, x15, #0xc, lsl #12
    1470:	str	x16, [sp, #224]
    1474:	add	w24, w26, w24
    1478:	stp	x12, x11, [sp, #248]
    147c:	add	w23, w23, w22
    1480:	ldr	w13, [x17, #8]
    1484:	str	x5, [sp, #312]
    1488:	add	x5, x21, x1, lsl #4
    148c:	str	x2, [sp, #320]
    1490:	add	w19, w19, w13
    1494:	str	x3, [sp, #528]
    1498:	add	x3, x5, #0xc, lsl #12
    149c:	ldrh	w2, [x0, #68]
    14a0:	ldr	w6, [x14, #8]
    14a4:	ldr	w8, [sp, #336]
    14a8:	ldr	w14, [x4, #8]
    14ac:	ldr	w9, [sp, #344]
    14b0:	ldrh	w4, [x0, #66]
    14b4:	add	w6, w6, w14
    14b8:	str	x3, [sp, #328]
    14bc:	add	w1, w8, w9
    14c0:	ldr	w10, [sp, #352]
    14c4:	add	x3, x4, #0xc9b
    14c8:	ldr	w11, [sp, #360]
    14cc:	add	w1, w7, w1
    14d0:	ldr	w12, [sp, #376]
    14d4:	add	x4, x21, x4, lsl #4
    14d8:	add	w5, w10, w11
    14dc:	ldr	w11, [sp, #368]
    14e0:	add	x10, x4, #0xc, lsl #12
    14e4:	add	x3, x21, x3, lsl #4
    14e8:	add	w4, w11, w12
    14ec:	add	w1, w1, w5
    14f0:	ldr	w11, [sp, #416]
    14f4:	add	w1, w1, w4
    14f8:	ldr	w5, [sp, #420]
    14fc:	str	x10, [sp, #336]
    1500:	add	w5, w11, w5
    1504:	ldr	w10, [sp, #428]
    1508:	ldr	w11, [sp, #424]
    150c:	add	w1, w1, w5
    1510:	ldr	w12, [x3, #8]
    1514:	add	x3, x2, #0xc9b
    1518:	add	x2, x21, x2, lsl #4
    151c:	ldrh	w9, [x0, #70]
    1520:	add	w4, w11, w10
    1524:	add	x11, x2, #0xc, lsl #12
    1528:	ldr	w10, [sp, #440]
    152c:	add	w1, w1, w4
    1530:	str	x11, [sp, #344]
    1534:	add	x3, x21, x3, lsl #4
    1538:	ldr	w11, [sp, #444]
    153c:	ldrh	w8, [x0, #72]
    1540:	add	w11, w10, w11
    1544:	add	x10, x9, #0xc9b
    1548:	add	x9, x21, x9, lsl #4
    154c:	ldr	w16, [sp, #436]
    1550:	add	x9, x9, #0xc, lsl #12
    1554:	str	x9, [sp, #352]
    1558:	ldr	w9, [sp, #448]
    155c:	add	x10, x21, x10, lsl #4
    1560:	ldr	w2, [sp, #432]
    1564:	add	w30, w9, w30
    1568:	add	x9, x8, #0xc9b
    156c:	add	x8, x21, x8, lsl #4
    1570:	ldrh	w7, [x0, #74]
    1574:	add	w2, w2, w16
    1578:	add	x8, x8, #0xc, lsl #12
    157c:	ldrh	w5, [x0, #76]
    1580:	add	w1, w1, w2
    1584:	str	x8, [sp, #360]
    1588:	add	w1, w1, w11
    158c:	ldr	w8, [sp, #452]
    1590:	add	x16, x21, x9, lsl #4
    1594:	add	w30, w1, w30
    1598:	ldrh	w2, [x0, #80]
    159c:	add	w27, w8, w27
    15a0:	add	x8, x7, #0xc9b
    15a4:	add	x7, x21, x7, lsl #4
    15a8:	add	w30, w30, w27
    15ac:	add	x27, x7, #0xc, lsl #12
    15b0:	add	x7, x5, #0xc9b
    15b4:	add	x5, x21, x5, lsl #4
    15b8:	ldrh	w9, [x0, #84]
    15bc:	ldr	w17, [x16, #8]
    15c0:	add	x20, x21, x8, lsl #4
    15c4:	ldrh	w16, [x0, #86]
    15c8:	add	w30, w30, w24
    15cc:	ldrh	w8, [x0, #88]
    15d0:	add	w30, w30, w23
    15d4:	ldr	w4, [x3, #8]
    15d8:	add	x1, x21, x7, lsl #4
    15dc:	ldrh	w3, [x0, #78]
    15e0:	ldr	w15, [x10, #8]
    15e4:	add	w4, w12, w4
    15e8:	ldrh	w10, [x0, #82]
    15ec:	str	x27, [sp, #368]
    15f0:	add	x27, x5, #0xc, lsl #12
    15f4:	ldr	w24, [sp, #456]
    15f8:	add	x26, x10, #0xc9b
    15fc:	ldr	w5, [sp, #460]
    1600:	add	w15, w15, w17
    1604:	ldrh	w25, [x0, #94]
    1608:	add	x26, x21, x26, lsl #4
    160c:	add	w23, w24, w5
    1610:	ldr	w24, [sp, #536]
    1614:	add	w30, w30, w23
    1618:	ldr	w1, [x1, #8]
    161c:	add	w18, w24, w18
    1620:	add	x5, x3, #0xc9b
    1624:	add	w30, w30, w18
    1628:	ldr	w20, [x20, #8]
    162c:	add	w30, w30, w19
    1630:	ldrh	w11, [x0, #90]
    1634:	add	w30, w30, w6
    1638:	add	w20, w20, w1
    163c:	add	w30, w30, w4
    1640:	add	x4, x16, #0xc9b
    1644:	add	x1, x25, #0xc9b
    1648:	add	x22, x21, x5, lsl #4
    164c:	add	x4, x21, x4, lsl #4
    1650:	ldrh	w5, [x0, #96]
    1654:	ldr	w23, [x26, #8]
    1658:	add	x26, x9, #0xc9b
    165c:	add	x14, x21, x1, lsl #4
    1660:	add	x1, x5, #0xc9b
    1664:	ldr	w18, [x4, #8]
    1668:	add	x4, x11, #0xc9b
    166c:	add	x26, x21, x26, lsl #4
    1670:	ldrh	w7, [x0, #92]
    1674:	ldr	w24, [x22, #8]
    1678:	add	x1, x21, x1, lsl #4
    167c:	add	x4, x21, x4, lsl #4
    1680:	add	x22, x2, #0xc9b
    1684:	ldr	w13, [x26, #8]
    1688:	add	x26, x8, #0xc9b
    168c:	add	x22, x21, x22, lsl #4
    1690:	str	x27, [sp, #376]
    1694:	add	x27, x7, #0xc9b
    1698:	ldr	w12, [x1, #8]
    169c:	ldr	w6, [x4, #8]
    16a0:	add	x26, x21, x26, lsl #4
    16a4:	ldr	x4, [sp, #120]
    16a8:	add	x27, x21, x27, lsl #4
    16ac:	ldr	x1, [sp, #408]
    16b0:	add	w30, w30, w15
    16b4:	ldr	w22, [x22, #8]
    16b8:	add	w30, w30, w20
    16bc:	ldrh	w0, [x0, #98]
    16c0:	add	w23, w23, w13
    16c4:	ldr	w26, [x26, #8]
    16c8:	add	w24, w24, w22
    16cc:	ldr	w19, [x27, #8]
    16d0:	add	w30, w30, w24
    16d4:	ldrh	w27, [x4, x1]
    16d8:	add	w18, w18, w26
    16dc:	ldp	x15, x17, [sp, #464]
    16e0:	add	w30, w30, w23
    16e4:	add	x1, x27, #0xc9b
    16e8:	add	x4, x0, #0xc9b
    16ec:	add	w30, w30, w18
    16f0:	ldr	w14, [x14, #8]
    16f4:	ldr	x18, [sp, #480]
    16f8:	add	x1, x21, x1, lsl #4
    16fc:	add	x4, x21, x4, lsl #4
    1700:	add	w6, w6, w19
    1704:	add	w14, w14, w12
    1708:	add	w30, w30, w6
    170c:	ldr	w12, [x17, #2492]
    1710:	add	w30, w30, w14
    1714:	ldr	w13, [x18, #2492]
    1718:	add	x3, x21, x3, lsl #4
    171c:	ldr	w6, [x15, #2492]
    1720:	add	x2, x21, x2, lsl #4
    1724:	ldr	w4, [x4, #8]
    1728:	add	x3, x3, #0xc, lsl #12
    172c:	ldr	w1, [x1, #8]
    1730:	add	x2, x2, #0xc, lsl #12
    1734:	ldp	x19, x20, [sp, #488]
    1738:	add	w1, w1, w4
    173c:	ldp	x22, x24, [sp, #504]
    1740:	add	w30, w30, w1
    1744:	add	w4, w6, w12
    1748:	add	x10, x21, x10, lsl #4
    174c:	ldr	x26, [sp, #520]
    1750:	add	x9, x21, x9, lsl #4
    1754:	ldr	w1, [x19, #2492]
    1758:	add	x10, x10, #0xc, lsl #12
    175c:	ldr	w6, [x20, #2492]
    1760:	add	x9, x9, #0xc, lsl #12
    1764:	ldr	w12, [x22, #2492]
    1768:	add	w1, w13, w1
    176c:	add	w1, w4, w1
    1770:	ldr	w13, [x24, #2492]
    1774:	add	w4, w6, w12
    1778:	ldr	w14, [x26, #2492]
    177c:	add	w1, w1, w4
    1780:	add	x8, x21, x8, lsl #4
    1784:	ldp	x6, x4, [sp, #152]
    1788:	add	x16, x21, x16, lsl #4
    178c:	ldr	x23, [sp, #184]
    1790:	add	x8, x8, #0xc, lsl #12
    1794:	add	x16, x16, #0xc, lsl #12
    1798:	add	x11, x21, x11, lsl #4
    179c:	add	x7, x21, x7, lsl #4
    17a0:	add	x11, x11, #0xc, lsl #12
    17a4:	ldr	w12, [x4, #2492]
    17a8:	add	w4, w13, w14
    17ac:	add	w4, w1, w4
    17b0:	ldr	w6, [x6, #2492]
    17b4:	ldp	x13, x1, [sp, #168]
    17b8:	add	x7, x7, #0xc, lsl #12
    17bc:	add	x25, x21, x25, lsl #4
    17c0:	add	x5, x21, x5, lsl #4
    17c4:	add	x27, x21, x27, lsl #4
    17c8:	add	x0, x21, x0, lsl #4
    17cc:	add	x5, x5, #0xc, lsl #12
    17d0:	add	x0, x0, #0xc, lsl #12
    17d4:	add	x25, x25, #0xc, lsl #12
    17d8:	add	x27, x27, #0xc, lsl #12
    17dc:	ldr	w14, [x1, #2492]
    17e0:	add	w1, w6, w12
    17e4:	add	w4, w4, w1
    17e8:	ldr	w13, [x13, #2492]
    17ec:	ldr	x1, [sp, #192]
    17f0:	ldr	w6, [x23, #2492]
    17f4:	ldr	w12, [x1, #2492]
    17f8:	add	w1, w13, w14
    17fc:	add	w1, w4, w1
    1800:	ldp	x14, x4, [sp, #200]
    1804:	ldr	w13, [x14, #2492]
    1808:	ldr	w14, [x4, #2492]
    180c:	add	w4, w6, w12
    1810:	add	w1, w1, w4
    1814:	ldp	x6, x4, [sp, #216]
    1818:	ldr	w12, [x4, #2492]
    181c:	add	w4, w13, w14
    1820:	ldr	x14, [sp, #232]
    1824:	add	w4, w1, w4
    1828:	ldr	w6, [x6, #2492]
    182c:	ldr	w13, [x14, #2492]
    1830:	ldr	x1, [sp, #240]
    1834:	ldr	x23, [sp, #256]
    1838:	ldr	w14, [x1, #2492]
    183c:	add	w1, w6, w12
    1840:	add	w4, w4, w1
    1844:	add	w1, w13, w14
    1848:	add	w1, w4, w1
    184c:	ldp	x14, x4, [sp, #264]
    1850:	ldr	x12, [sp, #248]
    1854:	ldr	w6, [x12, #2492]
    1858:	ldr	w12, [x23, #2492]
    185c:	ldr	w13, [x14, #2492]
    1860:	ldr	w14, [x4, #2492]
    1864:	add	w4, w6, w12
    1868:	ldp	x6, x12, [sp, #280]
    186c:	add	w1, w1, w4
    1870:	add	w4, w13, w14
    1874:	add	w4, w1, w4
    1878:	ldp	x23, x1, [sp, #296]
    187c:	ldr	w6, [x6, #2492]
    1880:	ldr	w12, [x12, #2492]
    1884:	ldr	w14, [x1, #2492]
    1888:	add	w1, w6, w12
    188c:	ldr	x6, [sp, #312]
    1890:	add	w4, w4, w1
    1894:	ldr	w12, [x15, #2496]
    1898:	ldr	w13, [x23, #2492]
    189c:	ldr	w23, [x6, #2492]
    18a0:	ldr	w6, [x17, #2496]
    18a4:	add	w1, w13, w14
    18a8:	ldr	w15, [x20, #2496]
    18ac:	add	w4, w4, w1
    18b0:	add	w6, w12, w6
    18b4:	ldr	w14, [x19, #2496]
    18b8:	ldr	x12, [sp, #152]
    18bc:	and	w1, w30, #0xffff
    18c0:	ldr	w13, [x18, #2496]
    18c4:	ldr	w17, [x22, #2496]
    18c8:	ldr	w20, [x12, #2496]
    18cc:	add	w13, w13, w14
    18d0:	ldr	x12, [sp, #160]
    18d4:	add	w15, w15, w17
    18d8:	ldr	w18, [x24, #2496]
    18dc:	add	w6, w6, w13
    18e0:	ldr	w19, [x26, #2496]
    18e4:	add	w6, w6, w15
    18e8:	ldr	w22, [x12, #2496]
    18ec:	add	w18, w18, w19
    18f0:	add	w20, w20, w22
    18f4:	add	w6, w6, w18
    18f8:	ldr	x26, [sp, #528]
    18fc:	add	w6, w6, w20
    1900:	ldp	x18, x19, [sp, #328]
    1904:	ldp	x22, x24, [sp, #344]
    1908:	ldr	x17, [sp, #320]
    190c:	ldr	w12, [x26, #2492]
    1910:	ldr	w14, [x18, #2492]
    1914:	ldr	w13, [x17, #2492]
    1918:	add	w12, w23, w12
    191c:	ldr	w15, [x19, #2492]
    1920:	add	w4, w4, w12
    1924:	ldr	w17, [x22, #2492]
    1928:	add	w12, w13, w14
    192c:	ldp	x19, x22, [sp, #360]
    1930:	add	w12, w4, w12
    1934:	add	w4, w15, w17
    1938:	ldr	w18, [x24, #2492]
    193c:	ldr	x15, [sp, #376]
    1940:	add	w12, w12, w4
    1944:	ldr	w17, [x3, #2492]
    1948:	ldr	w13, [x19, #2492]
    194c:	ldr	w14, [x22, #2492]
    1950:	ldr	w15, [x15, #2492]
    1954:	add	w4, w18, w13
    1958:	ldr	w13, [x2, #2492]
    195c:	add	w4, w12, w4
    1960:	ldr	w18, [x10, #2492]
    1964:	add	w12, w14, w15
    1968:	ldr	w14, [x9, #2492]
    196c:	add	w4, w4, w12
    1970:	ldr	w15, [x16, #2492]
    1974:	add	w12, w17, w13
    1978:	ldr	w13, [x8, #2492]
    197c:	add	w12, w4, w12
    1980:	add	w4, w18, w14
    1984:	ldr	w17, [x11, #2492]
    1988:	add	w12, w12, w4
    198c:	add	w4, w15, w13
    1990:	ldr	x13, [sp, #168]
    1994:	add	w4, w12, w4
    1998:	ldr	w14, [x7, #2492]
    199c:	ldr	w19, [x0, #2492]
    19a0:	ldr	w15, [x5, #2492]
    19a4:	add	w12, w17, w14
    19a8:	ldr	w18, [x25, #2492]
    19ac:	add	w4, w4, w12
    19b0:	ldr	w17, [x27, #2492]
    19b4:	ldr	w13, [x13, #2496]
    19b8:	add	w12, w18, w15
    19bc:	ldp	x20, x23, [sp, #176]
    19c0:	add	w4, w4, w12
    19c4:	add	w12, w17, w19
    19c8:	ldr	x15, [sp, #200]
    19cc:	add	w4, w4, w12
    19d0:	ldr	w18, [x20, #2496]
    19d4:	ldr	x20, [sp, #192]
    19d8:	add	w13, w13, w18
    19dc:	add	w6, w6, w13
    19e0:	ldr	w14, [x23, #2496]
    19e4:	ldr	x13, [sp, #216]
    19e8:	ldr	w17, [x20, #2496]
    19ec:	ldr	x20, [sp, #208]
    19f0:	add	w14, w14, w17
    19f4:	ldr	w19, [x13, #2496]
    19f8:	add	w6, w6, w14
    19fc:	ldp	x13, x14, [sp, #224]
    1a00:	ldr	w23, [x15, #2496]
    1a04:	ldr	w15, [x20, #2496]
    1a08:	add	w23, w23, w15
    1a0c:	ldr	w20, [x13, #2496]
    1a10:	add	w6, w6, w23
    1a14:	ldr	x13, [sp, #240]
    1a18:	add	w19, w19, w20
    1a1c:	ldr	w22, [x14, #2496]
    1a20:	add	w6, w6, w19
    1a24:	ldp	x23, x14, [sp, #256]
    1a28:	ldr	w18, [x13, #2496]
    1a2c:	ldr	x13, [sp, #248]
    1a30:	add	w22, w22, w18
    1a34:	add	w6, w6, w22
    1a38:	ldr	w17, [x14, #2496]
    1a3c:	ldr	w24, [x13, #2496]
    1a40:	ldr	w13, [x23, #2496]
    1a44:	ldr	x14, [sp, #272]
    1a48:	add	w24, w24, w13
    1a4c:	ldr	x13, [sp, #280]
    1a50:	add	w6, w6, w24
    1a54:	ldr	x23, [sp, #296]
    1a58:	ldr	w15, [x13, #2496]
    1a5c:	ldr	x13, [sp, #288]
    1a60:	ldr	w14, [x14, #2496]
    1a64:	ldr	w23, [x23, #2496]
    1a68:	ldr	w20, [x13, #2496]
    1a6c:	add	w17, w17, w14
    1a70:	ldr	x13, [sp, #304]
    1a74:	add	w6, w6, w17
    1a78:	ldr	x17, [sp, #320]
    1a7c:	add	w15, w15, w20
    1a80:	ldr	w18, [x13, #2496]
    1a84:	add	w6, w6, w15
    1a88:	ldr	x13, [sp, #312]
    1a8c:	add	w23, w23, w18
    1a90:	ldr	x18, [sp, #328]
    1a94:	add	w6, w6, w23
    1a98:	ldr	w19, [x13, #2496]
    1a9c:	ldr	w13, [x26, #2496]
    1aa0:	ldr	w14, [x18, #2496]
    1aa4:	add	w19, w19, w13
    1aa8:	ldr	w22, [x17, #2496]
    1aac:	ldr	x13, [sp, #336]
    1ab0:	add	w22, w22, w14
    1ab4:	add	w6, w6, w19
    1ab8:	ldr	w2, [x2, #2496]
    1abc:	add	w6, w6, w22
    1ac0:	ldr	w3, [x3, #2496]
    1ac4:	ldr	w24, [x13, #2496]
    1ac8:	ldr	x13, [sp, #344]
    1acc:	add	w3, w3, w2
    1ad0:	ldp	x19, x22, [sp, #360]
    1ad4:	ldr	w17, [x13, #2496]
    1ad8:	ldr	x13, [sp, #352]
    1adc:	add	w24, w24, w17
    1ae0:	add	w6, w6, w24
    1ae4:	ldr	w9, [x9, #2496]
    1ae8:	ldr	w15, [x19, #2496]
    1aec:	ldr	w20, [x13, #2496]
    1af0:	ldr	x13, [sp, #376]
    1af4:	add	w20, w20, w15
    1af8:	ldr	w18, [x22, #2496]
    1afc:	add	w6, w6, w20
    1b00:	ldr	w10, [x10, #2496]
    1b04:	ldr	w13, [x13, #2496]
    1b08:	ldr	w14, [x16, #2496]
    1b0c:	add	w10, w10, w9
    1b10:	add	w18, w18, w13
    1b14:	ldr	w13, [x8, #2496]
    1b18:	add	w6, w6, w18
    1b1c:	ldr	w2, [x7, #2496]
    1b20:	add	w6, w6, w3
    1b24:	ldr	w8, [x11, #2496]
    1b28:	ldr	w7, [x5, #2496]
    1b2c:	add	w10, w6, w10
    1b30:	ldr	w3, [x25, #2496]
    1b34:	add	w14, w14, w13
    1b38:	ldr	w6, [x0, #2496]
    1b3c:	add	w5, w8, w2
    1b40:	add	w10, w10, w14
    1b44:	ldr	w2, [x27, #2496]
    1b48:	add	w0, w10, w5
    1b4c:	add	w3, w3, w7
    1b50:	add	w0, w0, w3
    1b54:	add	w2, w2, w6
    1b58:	add	w0, w0, w2
    1b5c:	str	w30, [sp, #656]
    1b60:	str	w4, [sp, #660]
    1b64:	str	w0, [sp, #664]
    1b68:	add	x4, sp, #0x290
    1b6c:	mov	w2, #0x0                   	// #0
    1b70:	mov	w0, #0x0                   	// #0
    1b74:	b	1b8c <BZ2_compressBlock+0x19bc>
    1b78:	ldrh	w3, [x4, #2]!
    1b7c:	cmp	w3, w1
    1b80:	csel	w5, w1, w3, ge  // ge = tcont
    1b84:	csel	w0, w0, w2, ge  // ge = tcont
    1b88:	mov	w1, w5
    1b8c:	ldr	w3, [sp, #132]
    1b90:	add	w2, w2, #0x1
    1b94:	cmp	w3, w2
    1b98:	b.ne	1b78 <BZ2_compressBlock+0x19a8>  // b.any
    1b9c:	ldr	x3, [sp, #144]
    1ba0:	sxtw	x2, w0
    1ba4:	ldr	x4, [sp, #552]
    1ba8:	mov	w19, w3
    1bac:	strb	w0, [x4, x3]
    1bb0:	ldr	w4, [sp, #388]
    1bb4:	ldr	x3, [sp, #400]
    1bb8:	add	w1, w4, w1
    1bbc:	str	w1, [sp, #388]
    1bc0:	ldr	w1, [sp, #132]
    1bc4:	cmp	w1, #0x6
    1bc8:	ldr	w1, [x3, x2, lsl #2]
    1bcc:	add	w1, w1, #0x1
    1bd0:	str	w1, [x3, x2, lsl #2]
    1bd4:	b.ne	2224 <BZ2_compressBlock+0x2054>  // b.any
    1bd8:	ldr	w1, [sp, #128]
    1bdc:	sub	w1, w1, w28
    1be0:	cmp	w1, #0x31
    1be4:	b.ne	2224 <BZ2_compressBlock+0x2054>  // b.any
    1be8:	ldr	x3, [sp, #120]
    1bec:	sbfiz	x2, x28, #1, #32
    1bf0:	mov	w1, #0x102                 	// #258
    1bf4:	smull	x0, w0, w1
    1bf8:	add	x1, x3, x2
    1bfc:	ldrh	w3, [x3, x2]
    1c00:	add	x3, x3, x0
    1c04:	ldrh	w2, [x1, #2]
    1c08:	ldrh	w4, [x1, #4]
    1c0c:	add	x3, x21, x3, lsl #2
    1c10:	add	x2, x2, x0
    1c14:	add	x3, x3, #0x8, lsl #12
    1c18:	add	x4, x4, x0
    1c1c:	add	x2, x21, x2, lsl #2
    1c20:	add	x2, x2, #0x8, lsl #12
    1c24:	add	x4, x21, x4, lsl #2
    1c28:	ldr	w5, [x3, #12680]
    1c2c:	add	x4, x4, #0x8, lsl #12
    1c30:	add	w5, w5, #0x1
    1c34:	str	w5, [x3, #12680]
    1c38:	ldrh	w3, [x1, #6]
    1c3c:	ldr	w5, [x2, #12680]
    1c40:	add	x3, x3, x0
    1c44:	add	w5, w5, #0x1
    1c48:	str	w5, [x2, #12680]
    1c4c:	add	x3, x21, x3, lsl #2
    1c50:	ldrh	w2, [x1, #8]
    1c54:	ldr	w5, [x4, #12680]
    1c58:	add	x3, x3, #0x8, lsl #12
    1c5c:	add	x2, x2, x0
    1c60:	add	w5, w5, #0x1
    1c64:	str	w5, [x4, #12680]
    1c68:	add	x2, x21, x2, lsl #2
    1c6c:	ldrh	w4, [x1, #10]
    1c70:	ldr	w5, [x3, #12680]
    1c74:	add	x2, x2, #0x8, lsl #12
    1c78:	add	x4, x4, x0
    1c7c:	add	w5, w5, #0x1
    1c80:	str	w5, [x3, #12680]
    1c84:	add	x4, x21, x4, lsl #2
    1c88:	ldrh	w3, [x1, #12]
    1c8c:	ldr	w5, [x2, #12680]
    1c90:	add	x4, x4, #0x8, lsl #12
    1c94:	add	x3, x3, x0
    1c98:	add	w5, w5, #0x1
    1c9c:	str	w5, [x2, #12680]
    1ca0:	add	x3, x21, x3, lsl #2
    1ca4:	ldrh	w2, [x1, #14]
    1ca8:	ldr	w5, [x4, #12680]
    1cac:	add	x3, x3, #0x8, lsl #12
    1cb0:	add	x2, x2, x0
    1cb4:	add	w5, w5, #0x1
    1cb8:	str	w5, [x4, #12680]
    1cbc:	add	x2, x21, x2, lsl #2
    1cc0:	ldrh	w4, [x1, #16]
    1cc4:	ldr	w5, [x3, #12680]
    1cc8:	add	x2, x2, #0x8, lsl #12
    1ccc:	add	x4, x4, x0
    1cd0:	add	w5, w5, #0x1
    1cd4:	str	w5, [x3, #12680]
    1cd8:	add	x4, x21, x4, lsl #2
    1cdc:	ldrh	w3, [x1, #18]
    1ce0:	ldr	w5, [x2, #12680]
    1ce4:	add	x4, x4, #0x8, lsl #12
    1ce8:	add	x3, x3, x0
    1cec:	add	w5, w5, #0x1
    1cf0:	str	w5, [x2, #12680]
    1cf4:	add	x3, x21, x3, lsl #2
    1cf8:	ldrh	w2, [x1, #20]
    1cfc:	ldr	w5, [x4, #12680]
    1d00:	add	x3, x3, #0x8, lsl #12
    1d04:	add	x2, x2, x0
    1d08:	add	w5, w5, #0x1
    1d0c:	str	w5, [x4, #12680]
    1d10:	add	x2, x21, x2, lsl #2
    1d14:	ldr	w4, [x3, #12680]
    1d18:	add	x2, x2, #0x8, lsl #12
    1d1c:	add	w4, w4, #0x1
    1d20:	str	w4, [x3, #12680]
    1d24:	ldr	w3, [x2, #12680]
    1d28:	ldrh	w4, [x1, #26]
    1d2c:	add	w3, w3, #0x1
    1d30:	str	w3, [x2, #12680]
    1d34:	ldrh	w3, [x1, #22]
    1d38:	add	x4, x4, x0
    1d3c:	ldrh	w2, [x1, #24]
    1d40:	add	x3, x3, x0
    1d44:	add	x4, x21, x4, lsl #2
    1d48:	add	x2, x2, x0
    1d4c:	add	x4, x4, #0x8, lsl #12
    1d50:	add	x3, x21, x3, lsl #2
    1d54:	add	x3, x3, #0x8, lsl #12
    1d58:	add	x2, x21, x2, lsl #2
    1d5c:	add	x2, x2, #0x8, lsl #12
    1d60:	ldr	w5, [x3, #12680]
    1d64:	add	w5, w5, #0x1
    1d68:	str	w5, [x3, #12680]
    1d6c:	ldrh	w3, [x1, #28]
    1d70:	ldr	w5, [x2, #12680]
    1d74:	add	x3, x3, x0
    1d78:	add	w5, w5, #0x1
    1d7c:	str	w5, [x2, #12680]
    1d80:	add	x3, x21, x3, lsl #2
    1d84:	ldrh	w2, [x1, #30]
    1d88:	ldr	w5, [x4, #12680]
    1d8c:	add	x3, x3, #0x8, lsl #12
    1d90:	add	x2, x2, x0
    1d94:	add	w5, w5, #0x1
    1d98:	str	w5, [x4, #12680]
    1d9c:	add	x2, x21, x2, lsl #2
    1da0:	ldrh	w4, [x1, #32]
    1da4:	ldr	w5, [x3, #12680]
    1da8:	add	x2, x2, #0x8, lsl #12
    1dac:	add	x4, x4, x0
    1db0:	add	w5, w5, #0x1
    1db4:	str	w5, [x3, #12680]
    1db8:	add	x4, x21, x4, lsl #2
    1dbc:	ldrh	w3, [x1, #34]
    1dc0:	ldr	w5, [x2, #12680]
    1dc4:	add	x4, x4, #0x8, lsl #12
    1dc8:	add	x3, x3, x0
    1dcc:	add	w5, w5, #0x1
    1dd0:	str	w5, [x2, #12680]
    1dd4:	add	x3, x21, x3, lsl #2
    1dd8:	ldrh	w2, [x1, #36]
    1ddc:	ldr	w5, [x4, #12680]
    1de0:	add	x3, x3, #0x8, lsl #12
    1de4:	add	x2, x2, x0
    1de8:	add	w5, w5, #0x1
    1dec:	str	w5, [x4, #12680]
    1df0:	add	x2, x21, x2, lsl #2
    1df4:	ldrh	w4, [x1, #38]
    1df8:	ldr	w5, [x3, #12680]
    1dfc:	add	x2, x2, #0x8, lsl #12
    1e00:	add	x4, x4, x0
    1e04:	add	w5, w5, #0x1
    1e08:	str	w5, [x3, #12680]
    1e0c:	add	x4, x21, x4, lsl #2
    1e10:	ldrh	w3, [x1, #40]
    1e14:	ldr	w5, [x2, #12680]
    1e18:	add	x4, x4, #0x8, lsl #12
    1e1c:	add	x3, x3, x0
    1e20:	add	w5, w5, #0x1
    1e24:	str	w5, [x2, #12680]
    1e28:	ldrh	w2, [x1, #42]
    1e2c:	add	x3, x21, x3, lsl #2
    1e30:	ldr	w5, [x4, #12680]
    1e34:	add	x3, x3, #0x8, lsl #12
    1e38:	add	x2, x2, x0
    1e3c:	add	w5, w5, #0x1
    1e40:	str	w5, [x4, #12680]
    1e44:	add	x2, x21, x2, lsl #2
    1e48:	add	x2, x2, #0x8, lsl #12
    1e4c:	ldr	w4, [x3, #12680]
    1e50:	add	w4, w4, #0x1
    1e54:	str	w4, [x3, #12680]
    1e58:	ldr	w3, [x2, #12680]
    1e5c:	ldrh	w4, [x1, #48]
    1e60:	add	w3, w3, #0x1
    1e64:	str	w3, [x2, #12680]
    1e68:	ldrh	w3, [x1, #44]
    1e6c:	add	x4, x4, x0
    1e70:	ldrh	w2, [x1, #46]
    1e74:	add	x3, x3, x0
    1e78:	add	x4, x21, x4, lsl #2
    1e7c:	add	x2, x2, x0
    1e80:	add	x4, x4, #0x8, lsl #12
    1e84:	add	x3, x21, x3, lsl #2
    1e88:	add	x3, x3, #0x8, lsl #12
    1e8c:	add	x2, x21, x2, lsl #2
    1e90:	add	x2, x2, #0x8, lsl #12
    1e94:	ldr	w5, [x3, #12680]
    1e98:	add	w5, w5, #0x1
    1e9c:	str	w5, [x3, #12680]
    1ea0:	ldrh	w3, [x1, #50]
    1ea4:	ldr	w5, [x2, #12680]
    1ea8:	add	x3, x3, x0
    1eac:	add	w5, w5, #0x1
    1eb0:	str	w5, [x2, #12680]
    1eb4:	add	x3, x21, x3, lsl #2
    1eb8:	ldrh	w2, [x1, #52]
    1ebc:	ldr	w5, [x4, #12680]
    1ec0:	add	x3, x3, #0x8, lsl #12
    1ec4:	add	x2, x2, x0
    1ec8:	add	w5, w5, #0x1
    1ecc:	str	w5, [x4, #12680]
    1ed0:	add	x2, x21, x2, lsl #2
    1ed4:	ldrh	w4, [x1, #54]
    1ed8:	ldr	w5, [x3, #12680]
    1edc:	add	x2, x2, #0x8, lsl #12
    1ee0:	add	x4, x4, x0
    1ee4:	add	w5, w5, #0x1
    1ee8:	str	w5, [x3, #12680]
    1eec:	add	x4, x21, x4, lsl #2
    1ef0:	ldrh	w3, [x1, #56]
    1ef4:	ldr	w5, [x2, #12680]
    1ef8:	add	x4, x4, #0x8, lsl #12
    1efc:	add	x3, x3, x0
    1f00:	add	w5, w5, #0x1
    1f04:	str	w5, [x2, #12680]
    1f08:	add	x3, x21, x3, lsl #2
    1f0c:	ldrh	w2, [x1, #58]
    1f10:	ldr	w5, [x4, #12680]
    1f14:	add	x3, x3, #0x8, lsl #12
    1f18:	add	x2, x2, x0
    1f1c:	add	w5, w5, #0x1
    1f20:	str	w5, [x4, #12680]
    1f24:	add	x2, x21, x2, lsl #2
    1f28:	ldrh	w4, [x1, #60]
    1f2c:	ldr	w5, [x3, #12680]
    1f30:	add	x2, x2, #0x8, lsl #12
    1f34:	add	x4, x4, x0
    1f38:	add	w5, w5, #0x1
    1f3c:	str	w5, [x3, #12680]
    1f40:	add	x4, x21, x4, lsl #2
    1f44:	ldrh	w3, [x1, #62]
    1f48:	ldr	w5, [x2, #12680]
    1f4c:	add	x4, x4, #0x8, lsl #12
    1f50:	add	x3, x3, x0
    1f54:	add	w5, w5, #0x1
    1f58:	str	w5, [x2, #12680]
    1f5c:	ldrh	w2, [x1, #64]
    1f60:	add	x3, x21, x3, lsl #2
    1f64:	ldr	w5, [x4, #12680]
    1f68:	add	x3, x3, #0x8, lsl #12
    1f6c:	add	x2, x2, x0
    1f70:	add	w5, w5, #0x1
    1f74:	str	w5, [x4, #12680]
    1f78:	add	x2, x21, x2, lsl #2
    1f7c:	add	x2, x2, #0x8, lsl #12
    1f80:	ldr	w4, [x3, #12680]
    1f84:	add	w4, w4, #0x1
    1f88:	str	w4, [x3, #12680]
    1f8c:	ldr	w3, [x2, #12680]
    1f90:	ldrh	w4, [x1, #70]
    1f94:	add	w3, w3, #0x1
    1f98:	str	w3, [x2, #12680]
    1f9c:	ldrh	w3, [x1, #66]
    1fa0:	add	x4, x4, x0
    1fa4:	ldrh	w2, [x1, #68]
    1fa8:	add	x3, x3, x0
    1fac:	add	x4, x21, x4, lsl #2
    1fb0:	add	x2, x2, x0
    1fb4:	add	x4, x4, #0x8, lsl #12
    1fb8:	add	x3, x21, x3, lsl #2
    1fbc:	add	x3, x3, #0x8, lsl #12
    1fc0:	add	x2, x21, x2, lsl #2
    1fc4:	add	x2, x2, #0x8, lsl #12
    1fc8:	ldr	w5, [x3, #12680]
    1fcc:	add	w5, w5, #0x1
    1fd0:	str	w5, [x3, #12680]
    1fd4:	ldrh	w3, [x1, #72]
    1fd8:	ldr	w5, [x2, #12680]
    1fdc:	add	x3, x3, x0
    1fe0:	add	w5, w5, #0x1
    1fe4:	str	w5, [x2, #12680]
    1fe8:	add	x3, x21, x3, lsl #2
    1fec:	ldrh	w2, [x1, #74]
    1ff0:	ldr	w5, [x4, #12680]
    1ff4:	add	x3, x3, #0x8, lsl #12
    1ff8:	add	x2, x2, x0
    1ffc:	add	w5, w5, #0x1
    2000:	str	w5, [x4, #12680]
    2004:	add	x2, x21, x2, lsl #2
    2008:	ldrh	w4, [x1, #76]
    200c:	ldr	w5, [x3, #12680]
    2010:	add	x2, x2, #0x8, lsl #12
    2014:	add	x4, x4, x0
    2018:	add	w5, w5, #0x1
    201c:	str	w5, [x3, #12680]
    2020:	add	x4, x21, x4, lsl #2
    2024:	ldrh	w3, [x1, #78]
    2028:	ldr	w5, [x2, #12680]
    202c:	add	x4, x4, #0x8, lsl #12
    2030:	add	x3, x3, x0
    2034:	add	w5, w5, #0x1
    2038:	str	w5, [x2, #12680]
    203c:	add	x3, x21, x3, lsl #2
    2040:	ldrh	w2, [x1, #80]
    2044:	ldr	w5, [x4, #12680]
    2048:	add	x3, x3, #0x8, lsl #12
    204c:	add	x2, x2, x0
    2050:	add	w5, w5, #0x1
    2054:	str	w5, [x4, #12680]
    2058:	add	x2, x21, x2, lsl #2
    205c:	ldrh	w4, [x1, #82]
    2060:	ldr	w5, [x3, #12680]
    2064:	add	x2, x2, #0x8, lsl #12
    2068:	add	x4, x4, x0
    206c:	add	w5, w5, #0x1
    2070:	str	w5, [x3, #12680]
    2074:	add	x4, x21, x4, lsl #2
    2078:	ldrh	w3, [x1, #84]
    207c:	ldr	w5, [x2, #12680]
    2080:	add	x4, x4, #0x8, lsl #12
    2084:	add	x3, x3, x0
    2088:	add	w5, w5, #0x1
    208c:	str	w5, [x2, #12680]
    2090:	ldrh	w2, [x1, #86]
    2094:	add	x3, x21, x3, lsl #2
    2098:	ldr	w5, [x4, #12680]
    209c:	add	x3, x3, #0x8, lsl #12
    20a0:	add	x2, x2, x0
    20a4:	add	w5, w5, #0x1
    20a8:	str	w5, [x4, #12680]
    20ac:	add	x2, x21, x2, lsl #2
    20b0:	add	x2, x2, #0x8, lsl #12
    20b4:	ldr	w4, [x3, #12680]
    20b8:	add	w4, w4, #0x1
    20bc:	str	w4, [x3, #12680]
    20c0:	ldr	w3, [x2, #12680]
    20c4:	ldrh	w4, [x1, #92]
    20c8:	add	w3, w3, #0x1
    20cc:	str	w3, [x2, #12680]
    20d0:	ldrh	w3, [x1, #88]
    20d4:	add	x4, x4, x0
    20d8:	ldrh	w2, [x1, #90]
    20dc:	add	x3, x3, x0
    20e0:	add	x4, x21, x4, lsl #2
    20e4:	add	x2, x2, x0
    20e8:	add	x4, x4, #0x8, lsl #12
    20ec:	add	x3, x21, x3, lsl #2
    20f0:	add	x3, x3, #0x8, lsl #12
    20f4:	add	x2, x21, x2, lsl #2
    20f8:	add	x2, x2, #0x8, lsl #12
    20fc:	ldr	w5, [x3, #12680]
    2100:	add	w5, w5, #0x1
    2104:	str	w5, [x3, #12680]
    2108:	ldrh	w3, [x1, #94]
    210c:	ldr	w5, [x2, #12680]
    2110:	add	x3, x3, x0
    2114:	add	w5, w5, #0x1
    2118:	str	w5, [x2, #12680]
    211c:	add	x3, x21, x3, lsl #2
    2120:	ldrh	w2, [x1, #96]
    2124:	ldr	w5, [x4, #12680]
    2128:	add	x3, x3, #0x8, lsl #12
    212c:	ldrh	w1, [x1, #98]
    2130:	add	x2, x2, x0
    2134:	add	w5, w5, #0x1
    2138:	str	w5, [x4, #12680]
    213c:	add	x2, x21, x2, lsl #2
    2140:	add	x0, x1, x0
    2144:	ldr	w4, [x3, #12680]
    2148:	add	x1, x2, #0x8, lsl #12
    214c:	add	x0, x21, x0, lsl #2
    2150:	add	w2, w4, #0x1
    2154:	str	w2, [x3, #12680]
    2158:	add	x0, x0, #0x8, lsl #12
    215c:	ldr	w2, [x1, #12680]
    2160:	add	w2, w2, #0x1
    2164:	str	w2, [x1, #12680]
    2168:	ldr	w1, [x0, #12680]
    216c:	add	w1, w1, #0x1
    2170:	str	w1, [x0, #12680]
    2174:	ldr	x0, [sp, #144]
    2178:	ldr	w1, [sp, #136]
    217c:	add	x0, x0, #0x1
    2180:	str	x0, [sp, #144]
    2184:	ldr	w0, [sp, #384]
    2188:	cmp	w0, w1
    218c:	b.le	2288 <BZ2_compressBlock+0x20b8>
    2190:	ldr	w28, [sp, #136]
    2194:	ldr	w1, [sp, #384]
    2198:	add	w0, w28, #0x31
    219c:	str	w0, [sp, #128]
    21a0:	cmp	w0, w1
    21a4:	b.lt	1008 <BZ2_compressBlock+0xe38>  // b.tstop
    21a8:	ldr	w0, [sp, #608]
    21ac:	str	w0, [sp, #128]
    21b0:	ldr	w0, [sp, #384]
    21b4:	str	w0, [sp, #136]
    21b8:	b	1010 <BZ2_compressBlock+0xe40>
    21bc:	ldr	w0, [sp, #128]
    21c0:	sxtw	x2, w28
    21c4:	ldrh	w1, [sp, #656]
    21c8:	cmp	w0, w28
    21cc:	b.lt	1b68 <BZ2_compressBlock+0x1998>  // b.tstop
    21d0:	ldr	x0, [sp, #120]
    21d4:	mov	x6, #0x934c                	// #37708
    21d8:	add	x4, sp, #0x290
    21dc:	ldrh	w0, [x0, x2, lsl #1]
    21e0:	add	x0, x0, x6
    21e4:	add	x0, x21, x0
    21e8:	b	21f0 <BZ2_compressBlock+0x2020>
    21ec:	ldrh	w1, [x4]
    21f0:	ldrb	w3, [x0]
    21f4:	add	x0, x0, #0x102
    21f8:	add	w1, w1, w3
    21fc:	strh	w1, [x4], #2
    2200:	ldr	x1, [sp, #392]
    2204:	cmp	x1, x4
    2208:	b.ne	21ec <BZ2_compressBlock+0x201c>  // b.any
    220c:	ldr	w0, [sp, #128]
    2210:	add	x2, x2, #0x1
    2214:	ldrh	w1, [sp, #656]
    2218:	cmp	w0, w2
    221c:	b.ge	21d0 <BZ2_compressBlock+0x2000>  // b.tcont
    2220:	b	1b68 <BZ2_compressBlock+0x1998>
    2224:	ldr	w1, [sp, #128]
    2228:	sxtw	x2, w28
    222c:	cmp	w1, w28
    2230:	b.lt	2174 <BZ2_compressBlock+0x1fa4>  // b.tstop
    2234:	nop
    2238:	ldr	x1, [sp, #120]
    223c:	ldr	w3, [sp, #128]
    2240:	ldrh	w1, [x1, x2, lsl #1]
    2244:	add	x2, x2, #0x1
    2248:	cmp	w3, w2
    224c:	mov	w3, #0x102                 	// #258
    2250:	smaddl	x1, w0, w3, x1
    2254:	add	x1, x21, x1, lsl #2
    2258:	add	x1, x1, #0x8, lsl #12
    225c:	ldr	w3, [x1, #12680]
    2260:	add	w3, w3, #0x1
    2264:	str	w3, [x1, #12680]
    2268:	b.ge	2238 <BZ2_compressBlock+0x2068>  // b.tcont
    226c:	ldr	x0, [sp, #144]
    2270:	ldr	w1, [sp, #136]
    2274:	add	x0, x0, #0x1
    2278:	str	x0, [sp, #144]
    227c:	ldr	w0, [sp, #384]
    2280:	cmp	w0, w1
    2284:	b.gt	2190 <BZ2_compressBlock+0x1fc0>
    2288:	ldr	w1, [sp, #540]
    228c:	ldr	w0, [x21, #656]
    2290:	add	w1, w1, #0x1
    2294:	str	w1, [sp, #540]
    2298:	cmp	w0, #0x2
    229c:	b.gt	4208 <BZ2_compressBlock+0x4038>
    22a0:	ldr	w23, [sp, #544]
    22a4:	ldr	x22, [sp, #584]
    22a8:	ldr	x20, [sp, #592]
    22ac:	nop
    22b0:	mov	x0, x20
    22b4:	mov	x1, x22
    22b8:	mov	w2, w23
    22bc:	mov	w3, #0x11                  	// #17
    22c0:	bl	0 <BZ2_hbMakeCodeLengths>
    22c4:	ldr	x0, [sp, #576]
    22c8:	add	x20, x20, #0x102
    22cc:	add	x22, x22, #0x408
    22d0:	cmp	x0, x20
    22d4:	b.ne	22b0 <BZ2_compressBlock+0x20e0>  // b.any
    22d8:	ldr	w0, [sp, #540]
    22dc:	cmp	w0, #0x4
    22e0:	b.ne	f58 <BZ2_compressBlock+0xd88>  // b.any
    22e4:	ldr	w1, [sp, #132]
    22e8:	add	x0, sp, #0x2a0
    22ec:	ldr	w26, [sp, #640]
    22f0:	mov	x27, x21
    22f4:	mov	w21, #0x0                   	// #0
    22f8:	strb	w21, [x0], #1
    22fc:	mov	w20, w21
    2300:	add	w21, w21, #0x1
    2304:	cmp	w1, w21
    2308:	b.ne	22f8 <BZ2_compressBlock+0x2128>  // b.any
    230c:	cbz	w19, 236c <BZ2_compressBlock+0x219c>
    2310:	ldrb	w2, [sp, #672]
    2314:	mov	x5, #0x4cfa                	// #19706
    2318:	add	x7, x27, #0x6a8
    231c:	add	x6, x27, x5
    2320:	mov	x1, #0x0                   	// #0
    2324:	nop
    2328:	ldrb	w4, [x7, x1]
    232c:	cmp	w2, w4
    2330:	b.eq	2630 <BZ2_compressBlock+0x2460>  // b.none
    2334:	add	x3, sp, #0x2a0
    2338:	mov	w0, #0x0                   	// #0
    233c:	nop
    2340:	mov	w5, w2
    2344:	ldrb	w2, [x3, #1]
    2348:	strb	w5, [x3, #1]!
    234c:	add	w0, w0, #0x1
    2350:	cmp	w4, w2
    2354:	b.ne	2340 <BZ2_compressBlock+0x2170>  // b.any
    2358:	and	w0, w0, #0xff
    235c:	strb	w0, [x6, x1]
    2360:	add	x1, x1, #0x1
    2364:	cmp	w19, w1
    2368:	b.gt	2328 <BZ2_compressBlock+0x2158>
    236c:	ldr	x1, [sp, #616]
    2370:	mov	w0, #0x102                 	// #258
    2374:	ldr	w28, [sp, #544]
    2378:	ldr	x24, [sp, #592]
    237c:	umaddl	x20, w20, w0, x1
    2380:	ldr	x25, [sp, #632]
    2384:	nop
    2388:	cmp	w28, #0x0
    238c:	mov	w22, #0x0                   	// #0
    2390:	mov	x1, #0x0                   	// #0
    2394:	mov	w23, #0x20                  	// #32
    2398:	b.le	23cc <BZ2_compressBlock+0x21fc>
    239c:	nop
    23a0:	ldrb	w0, [x24, x1]
    23a4:	add	x1, x1, #0x1
    23a8:	cmp	w22, w0
    23ac:	csel	w22, w22, w0, ge  // ge = tcont
    23b0:	cmp	w23, w0
    23b4:	csel	w23, w23, w0, le
    23b8:	cmp	w28, w1
    23bc:	b.gt	23a0 <BZ2_compressBlock+0x21d0>
    23c0:	cmp	w22, #0x11
    23c4:	b.gt	25c0 <BZ2_compressBlock+0x23f0>
    23c8:	cbz	w23, 25cc <BZ2_compressBlock+0x23fc>
    23cc:	mov	x1, x24
    23d0:	mov	x0, x25
    23d4:	mov	w3, w22
    23d8:	mov	w2, w23
    23dc:	mov	w4, w28
    23e0:	add	x24, x24, #0x102
    23e4:	bl	0 <BZ2_hbAssignCodes>
    23e8:	add	x25, x25, #0x408
    23ec:	cmp	x20, x24
    23f0:	b.ne	2388 <BZ2_compressBlock+0x21b8>  // b.any
    23f4:	add	x5, sp, #0x2a0
    23f8:	add	x3, x27, #0x90
    23fc:	ldr	x9, [sp, #624]
    2400:	mov	x2, x5
    2404:	mov	x0, #0x0                   	// #0
    2408:	mov	w8, #0x1                   	// #1
    240c:	nop
    2410:	add	x1, x9, x0
    2414:	add	x6, x3, x0
    2418:	strb	wzr, [x2]
    241c:	nop
    2420:	ldrb	w7, [x1]
    2424:	add	x1, x1, #0x1
    2428:	mov	x4, x3
    242c:	cmp	x6, x1
    2430:	cbz	w7, 2438 <BZ2_compressBlock+0x2268>
    2434:	strb	w8, [x2]
    2438:	b.ne	2420 <BZ2_compressBlock+0x2250>  // b.any
    243c:	add	x0, x0, #0x10
    2440:	add	x2, x2, #0x1
    2444:	cmp	x0, #0x100
    2448:	b.ne	2410 <BZ2_compressBlock+0x2240>  // b.any
    244c:	ldr	w7, [x27, #116]
    2450:	add	x0, sp, #0x2a0
    2454:	add	x6, sp, #0x2b0
    2458:	mov	x8, x0
    245c:	mov	w3, w7
    2460:	mov	w9, #0x80000000            	// #-2147483648
    2464:	nop
    2468:	ldrb	w1, [x8]
    246c:	ldr	w0, [x27, #644]
    2470:	cmp	w0, #0x7
    2474:	cbnz	w1, 25d8 <BZ2_compressBlock+0x2408>
    2478:	b.le	24b8 <BZ2_compressBlock+0x22e8>
    247c:	ldr	w1, [x27, #640]
    2480:	ldr	x0, [x27, #80]
    2484:	lsr	w1, w1, #24
    2488:	strb	w1, [x0, w3, sxtw]
    248c:	ldr	w1, [x27, #640]
    2490:	ldr	w3, [x27, #116]
    2494:	ldr	w0, [x27, #644]
    2498:	lsl	w1, w1, #8
    249c:	add	w3, w3, #0x1
    24a0:	sub	w0, w0, #0x8
    24a4:	str	w3, [x27, #116]
    24a8:	str	w1, [x27, #640]
    24ac:	cmp	w0, #0x7
    24b0:	str	w0, [x27, #644]
    24b4:	b.gt	2480 <BZ2_compressBlock+0x22b0>
    24b8:	add	w0, w0, #0x1
    24bc:	str	w0, [x27, #644]
    24c0:	add	x8, x8, #0x1
    24c4:	cmp	x6, x8
    24c8:	b.ne	2468 <BZ2_compressBlock+0x2298>  // b.any
    24cc:	mov	w9, #0x80000000            	// #-2147483648
    24d0:	b	24e4 <BZ2_compressBlock+0x2314>
    24d4:	add	x5, x5, #0x1
    24d8:	add	x4, x4, #0x10
    24dc:	cmp	x6, x5
    24e0:	b.eq	2638 <BZ2_compressBlock+0x2468>  // b.none
    24e4:	ldrb	w0, [x5]
    24e8:	cbz	w0, 24d4 <BZ2_compressBlock+0x2304>
    24ec:	ldurb	w1, [x4, #-16]
    24f0:	sub	x2, x4, #0x10
    24f4:	ldr	w0, [x27, #644]
    24f8:	cmp	w0, #0x7
    24fc:	cbnz	w1, 2564 <BZ2_compressBlock+0x2394>
    2500:	b.le	2540 <BZ2_compressBlock+0x2370>
    2504:	ldr	w1, [x27, #640]
    2508:	ldr	x0, [x27, #80]
    250c:	lsr	w1, w1, #24
    2510:	strb	w1, [x0, w3, sxtw]
    2514:	ldr	w1, [x27, #640]
    2518:	ldr	w3, [x27, #116]
    251c:	ldr	w0, [x27, #644]
    2520:	lsl	w1, w1, #8
    2524:	add	w3, w3, #0x1
    2528:	sub	w0, w0, #0x8
    252c:	str	w3, [x27, #116]
    2530:	str	w1, [x27, #640]
    2534:	cmp	w0, #0x7
    2538:	str	w0, [x27, #644]
    253c:	b.gt	2508 <BZ2_compressBlock+0x2338>
    2540:	add	w0, w0, #0x1
    2544:	str	w0, [x27, #644]
    2548:	add	x2, x2, #0x1
    254c:	cmp	x4, x2
    2550:	b.eq	24d4 <BZ2_compressBlock+0x2304>  // b.none
    2554:	ldrb	w1, [x2]
    2558:	ldr	w0, [x27, #644]
    255c:	cmp	w0, #0x7
    2560:	cbz	w1, 2500 <BZ2_compressBlock+0x2330>
    2564:	ldr	w1, [x27, #640]
    2568:	b.le	25a8 <BZ2_compressBlock+0x23d8>
    256c:	nop
    2570:	ldr	x0, [x27, #80]
    2574:	lsr	w1, w1, #24
    2578:	strb	w1, [x0, w3, sxtw]
    257c:	ldr	w1, [x27, #640]
    2580:	ldr	w3, [x27, #116]
    2584:	ldr	w0, [x27, #644]
    2588:	lsl	w1, w1, #8
    258c:	add	w3, w3, #0x1
    2590:	sub	w0, w0, #0x8
    2594:	str	w3, [x27, #116]
    2598:	str	w1, [x27, #640]
    259c:	cmp	w0, #0x7
    25a0:	str	w0, [x27, #644]
    25a4:	b.gt	2570 <BZ2_compressBlock+0x23a0>
    25a8:	lsr	w8, w9, w0
    25ac:	add	w0, w0, #0x1
    25b0:	orr	w1, w8, w1
    25b4:	str	w1, [x27, #640]
    25b8:	str	w0, [x27, #644]
    25bc:	b	2548 <BZ2_compressBlock+0x2378>
    25c0:	mov	w0, #0xbbc                 	// #3004
    25c4:	bl	0 <BZ2_bz__AssertH__fail>
    25c8:	cbnz	w23, 23cc <BZ2_compressBlock+0x21fc>
    25cc:	mov	w0, #0xbbd                 	// #3005
    25d0:	bl	0 <BZ2_bz__AssertH__fail>
    25d4:	b	23cc <BZ2_compressBlock+0x21fc>
    25d8:	ldr	w1, [x27, #640]
    25dc:	b.le	2618 <BZ2_compressBlock+0x2448>
    25e0:	ldr	x0, [x27, #80]
    25e4:	lsr	w1, w1, #24
    25e8:	strb	w1, [x0, w3, sxtw]
    25ec:	ldr	w1, [x27, #640]
    25f0:	ldr	w3, [x27, #116]
    25f4:	ldr	w0, [x27, #644]
    25f8:	lsl	w1, w1, #8
    25fc:	add	w3, w3, #0x1
    2600:	sub	w0, w0, #0x8
    2604:	str	w3, [x27, #116]
    2608:	str	w1, [x27, #640]
    260c:	cmp	w0, #0x7
    2610:	str	w0, [x27, #644]
    2614:	b.gt	25e0 <BZ2_compressBlock+0x2410>
    2618:	lsr	w2, w9, w0
    261c:	add	w0, w0, #0x1
    2620:	orr	w1, w2, w1
    2624:	str	w1, [x27, #640]
    2628:	str	w0, [x27, #644]
    262c:	b	24c0 <BZ2_compressBlock+0x22f0>
    2630:	mov	w0, #0x0                   	// #0
    2634:	b	235c <BZ2_compressBlock+0x218c>
    2638:	ldr	w0, [x27, #656]
    263c:	cmp	w0, #0x2
    2640:	b.gt	4294 <BZ2_compressBlock+0x40c4>
    2644:	ldr	w0, [x27, #644]
    2648:	mov	w1, w3
    264c:	ldr	w5, [x27, #640]
    2650:	cmp	w0, #0x7
    2654:	b.le	2690 <BZ2_compressBlock+0x24c0>
    2658:	ldr	x0, [x27, #80]
    265c:	lsr	w5, w5, #24
    2660:	strb	w5, [x0, w1, sxtw]
    2664:	ldr	w5, [x27, #640]
    2668:	ldr	w1, [x27, #116]
    266c:	ldr	w0, [x27, #644]
    2670:	lsl	w5, w5, #8
    2674:	add	w1, w1, #0x1
    2678:	sub	w0, w0, #0x8
    267c:	str	w1, [x27, #116]
    2680:	str	w5, [x27, #640]
    2684:	cmp	w0, #0x7
    2688:	str	w0, [x27, #644]
    268c:	b.gt	2658 <BZ2_compressBlock+0x2488>
    2690:	ldr	w2, [sp, #644]
    2694:	mov	w4, #0x1d                  	// #29
    2698:	sub	w4, w4, w0
    269c:	add	w0, w0, #0x3
    26a0:	str	w0, [x27, #644]
    26a4:	cmp	w0, #0x7
    26a8:	lsl	w4, w2, w4
    26ac:	orr	w4, w4, w5
    26b0:	str	w4, [x27, #640]
    26b4:	b.le	26f0 <BZ2_compressBlock+0x2520>
    26b8:	ldr	x0, [x27, #80]
    26bc:	lsr	w4, w4, #24
    26c0:	strb	w4, [x0, w1, sxtw]
    26c4:	ldr	w4, [x27, #640]
    26c8:	ldr	w1, [x27, #116]
    26cc:	ldr	w0, [x27, #644]
    26d0:	lsl	w4, w4, #8
    26d4:	add	w1, w1, #0x1
    26d8:	sub	w0, w0, #0x8
    26dc:	str	w1, [x27, #116]
    26e0:	str	w4, [x27, #640]
    26e4:	cmp	w0, #0x7
    26e8:	str	w0, [x27, #644]
    26ec:	b.gt	26b8 <BZ2_compressBlock+0x24e8>
    26f0:	mov	w2, #0x11                  	// #17
    26f4:	sub	w2, w2, w0
    26f8:	add	w0, w0, #0xf
    26fc:	str	w0, [x27, #644]
    2700:	lsl	w2, w19, w2
    2704:	orr	w4, w2, w4
    2708:	str	w4, [x27, #640]
    270c:	cbz	w19, 27fc <BZ2_compressBlock+0x262c>
    2710:	sub	w7, w19, #0x1
    2714:	mov	x2, #0x4cfb                	// #19707
    2718:	add	x2, x27, x2
    271c:	mov	x4, #0x4cfa                	// #19706
    2720:	add	x7, x7, x2
    2724:	add	x6, x27, x4
    2728:	mov	w8, #0x80000000            	// #-2147483648
    272c:	nop
    2730:	ldrb	w2, [x6]
    2734:	cbz	w2, 27a4 <BZ2_compressBlock+0x25d4>
    2738:	ldr	w2, [x27, #640]
    273c:	mov	w4, #0x0                   	// #0
    2740:	cmp	w0, #0x7
    2744:	b.le	2780 <BZ2_compressBlock+0x25b0>
    2748:	ldr	x0, [x27, #80]
    274c:	lsr	w2, w2, #24
    2750:	strb	w2, [x0, w1, sxtw]
    2754:	ldr	w2, [x27, #640]
    2758:	ldr	w1, [x27, #116]
    275c:	ldr	w0, [x27, #644]
    2760:	lsl	w2, w2, #8
    2764:	add	w1, w1, #0x1
    2768:	sub	w0, w0, #0x8
    276c:	str	w1, [x27, #116]
    2770:	str	w2, [x27, #640]
    2774:	cmp	w0, #0x7
    2778:	str	w0, [x27, #644]
    277c:	b.gt	2748 <BZ2_compressBlock+0x2578>
    2780:	lsr	w5, w8, w0
    2784:	add	w0, w0, #0x1
    2788:	orr	w2, w2, w5
    278c:	str	w2, [x27, #640]
    2790:	str	w0, [x27, #644]
    2794:	add	w4, w4, #0x1
    2798:	ldrb	w5, [x6]
    279c:	cmp	w4, w5
    27a0:	b.lt	2740 <BZ2_compressBlock+0x2570>  // b.tstop
    27a4:	cmp	w0, #0x7
    27a8:	b.le	27e8 <BZ2_compressBlock+0x2618>
    27ac:	ldr	w2, [x27, #640]
    27b0:	ldr	x0, [x27, #80]
    27b4:	lsr	w2, w2, #24
    27b8:	strb	w2, [x0, w1, sxtw]
    27bc:	ldr	w2, [x27, #640]
    27c0:	ldr	w1, [x27, #116]
    27c4:	ldr	w0, [x27, #644]
    27c8:	lsl	w2, w2, #8
    27cc:	add	w1, w1, #0x1
    27d0:	sub	w0, w0, #0x8
    27d4:	str	w1, [x27, #116]
    27d8:	str	w2, [x27, #640]
    27dc:	cmp	w0, #0x7
    27e0:	str	w0, [x27, #644]
    27e4:	b.gt	27b0 <BZ2_compressBlock+0x25e0>
    27e8:	add	w0, w0, #0x1
    27ec:	str	w0, [x27, #644]
    27f0:	add	x6, x6, #0x1
    27f4:	cmp	x7, x6
    27f8:	b.ne	2730 <BZ2_compressBlock+0x2560>  // b.any
    27fc:	ldr	w0, [x27, #656]
    2800:	cmp	w0, #0x2
    2804:	b.gt	42d4 <BZ2_compressBlock+0x4104>
    2808:	ldr	w0, [sp, #548]
    280c:	mov	w22, w1
    2810:	ldr	w10, [sp, #544]
    2814:	mov	w9, #0x1b                  	// #27
    2818:	add	w5, w0, #0x1
    281c:	mov	w6, #0x1e                  	// #30
    2820:	ldr	x4, [sp, #592]
    2824:	add	x5, x5, #0x1
    2828:	mov	w8, #0x2                   	// #2
    282c:	mov	w7, #0x3                   	// #3
    2830:	ldr	w0, [x27, #644]
    2834:	ldrb	w3, [x4]
    2838:	ldr	w2, [x27, #640]
    283c:	cmp	w0, #0x7
    2840:	b.le	2880 <BZ2_compressBlock+0x26b0>
    2844:	nop
    2848:	ldr	x0, [x27, #80]
    284c:	lsr	w2, w2, #24
    2850:	strb	w2, [x0, w22, sxtw]
    2854:	ldr	w2, [x27, #640]
    2858:	ldr	w22, [x27, #116]
    285c:	ldr	w0, [x27, #644]
    2860:	lsl	w2, w2, #8
    2864:	add	w22, w22, #0x1
    2868:	sub	w0, w0, #0x8
    286c:	str	w22, [x27, #116]
    2870:	str	w2, [x27, #640]
    2874:	cmp	w0, #0x7
    2878:	str	w0, [x27, #644]
    287c:	b.gt	2848 <BZ2_compressBlock+0x2678>
    2880:	sub	w11, w9, w0
    2884:	add	w0, w0, #0x5
    2888:	str	w0, [x27, #644]
    288c:	cmp	w10, #0x0
    2890:	lsl	w11, w3, w11
    2894:	orr	w2, w11, w2
    2898:	str	w2, [x27, #640]
    289c:	b.le	29f4 <BZ2_compressBlock+0x2824>
    28a0:	mov	x11, x4
    28a4:	add	x13, x5, x4
    28a8:	ldrb	w12, [x11]
    28ac:	cmp	w12, w3
    28b0:	b.le	2920 <BZ2_compressBlock+0x2750>
    28b4:	ldr	w2, [x27, #640]
    28b8:	cmp	w0, #0x7
    28bc:	b.le	28f8 <BZ2_compressBlock+0x2728>
    28c0:	ldr	x0, [x27, #80]
    28c4:	lsr	w2, w2, #24
    28c8:	strb	w2, [x0, w22, sxtw]
    28cc:	ldr	w2, [x27, #640]
    28d0:	ldr	w22, [x27, #116]
    28d4:	ldr	w0, [x27, #644]
    28d8:	lsl	w2, w2, #8
    28dc:	add	w22, w22, #0x1
    28e0:	sub	w0, w0, #0x8
    28e4:	str	w22, [x27, #116]
    28e8:	str	w2, [x27, #640]
    28ec:	cmp	w0, #0x7
    28f0:	str	w0, [x27, #644]
    28f4:	b.gt	28c0 <BZ2_compressBlock+0x26f0>
    28f8:	sub	w12, w6, w0
    28fc:	add	w0, w0, #0x2
    2900:	str	w0, [x27, #644]
    2904:	add	w3, w3, #0x1
    2908:	lsl	w12, w8, w12
    290c:	orr	w2, w2, w12
    2910:	str	w2, [x27, #640]
    2914:	ldrb	w12, [x11]
    2918:	cmp	w3, w12
    291c:	b.lt	28b8 <BZ2_compressBlock+0x26e8>  // b.tstop
    2920:	cmp	w3, w12
    2924:	b.le	2998 <BZ2_compressBlock+0x27c8>
    2928:	ldr	w2, [x27, #640]
    292c:	nop
    2930:	cmp	w0, #0x7
    2934:	b.le	2970 <BZ2_compressBlock+0x27a0>
    2938:	ldr	x0, [x27, #80]
    293c:	lsr	w2, w2, #24
    2940:	strb	w2, [x0, w22, sxtw]
    2944:	ldr	w2, [x27, #640]
    2948:	ldr	w22, [x27, #116]
    294c:	ldr	w0, [x27, #644]
    2950:	lsl	w2, w2, #8
    2954:	add	w22, w22, #0x1
    2958:	sub	w0, w0, #0x8
    295c:	str	w22, [x27, #116]
    2960:	str	w2, [x27, #640]
    2964:	cmp	w0, #0x7
    2968:	str	w0, [x27, #644]
    296c:	b.gt	2938 <BZ2_compressBlock+0x2768>
    2970:	sub	w12, w6, w0
    2974:	add	w0, w0, #0x2
    2978:	str	w0, [x27, #644]
    297c:	sub	w3, w3, #0x1
    2980:	lsl	w12, w7, w12
    2984:	orr	w2, w2, w12
    2988:	str	w2, [x27, #640]
    298c:	ldrb	w12, [x11]
    2990:	cmp	w3, w12
    2994:	b.gt	2930 <BZ2_compressBlock+0x2760>
    2998:	cmp	w0, #0x7
    299c:	b.le	29e0 <BZ2_compressBlock+0x2810>
    29a0:	ldr	w2, [x27, #640]
    29a4:	nop
    29a8:	ldr	x0, [x27, #80]
    29ac:	lsr	w2, w2, #24
    29b0:	strb	w2, [x0, w22, sxtw]
    29b4:	ldr	w2, [x27, #640]
    29b8:	ldr	w22, [x27, #116]
    29bc:	ldr	w0, [x27, #644]
    29c0:	lsl	w2, w2, #8
    29c4:	add	w22, w22, #0x1
    29c8:	sub	w0, w0, #0x8
    29cc:	str	w22, [x27, #116]
    29d0:	str	w2, [x27, #640]
    29d4:	cmp	w0, #0x7
    29d8:	str	w0, [x27, #644]
    29dc:	b.gt	29a8 <BZ2_compressBlock+0x27d8>
    29e0:	add	w0, w0, #0x1
    29e4:	str	w0, [x27, #644]
    29e8:	add	x11, x11, #0x1
    29ec:	cmp	x13, x11
    29f0:	b.ne	28a8 <BZ2_compressBlock+0x26d8>  // b.any
    29f4:	add	x4, x4, #0x102
    29f8:	cmp	x20, x4
    29fc:	b.ne	2830 <BZ2_compressBlock+0x2660>  // b.any
    2a00:	ldr	w0, [x27, #656]
    2a04:	cmp	w0, #0x2
    2a08:	b.gt	42b4 <BZ2_compressBlock+0x40e4>
    2a0c:	ldr	w0, [x27, #668]
    2a10:	cmp	w0, #0x0
    2a14:	b.le	818 <BZ2_compressBlock+0x648>
    2a18:	add	x20, x27, #0x6a7
    2a1c:	mov	x25, #0x1                   	// #1
    2a20:	mov	x28, #0x2654                	// #9812
    2a24:	mov	w24, #0x20                  	// #32
    2a28:	str	w19, [sp, #128]
    2a2c:	mov	w19, w26
    2a30:	ldr	x26, [sp, #120]
    2a34:	str	w22, [sp, #120]
    2a38:	add	w22, w19, #0x31
    2a3c:	add	w23, w19, #0x32
    2a40:	cmp	w22, w0
    2a44:	b.lt	2a50 <BZ2_compressBlock+0x2880>  // b.tstop
    2a48:	sub	w22, w0, #0x1
    2a4c:	mov	w23, w0
    2a50:	ldrb	w0, [x20, x25]
    2a54:	cmp	w21, w0
    2a58:	b.le	2b44 <BZ2_compressBlock+0x2974>
    2a5c:	cmp	w21, #0x6
    2a60:	b.ne	2a70 <BZ2_compressBlock+0x28a0>  // b.any
    2a64:	sub	w0, w22, w19
    2a68:	cmp	w0, #0x31
    2a6c:	b.eq	2b50 <BZ2_compressBlock+0x2980>  // b.none
    2a70:	cmp	w22, w19
    2a74:	b.lt	2b28 <BZ2_compressBlock+0x2958>  // b.tstop
    2a78:	ldr	w3, [x27, #640]
    2a7c:	sxtw	x0, w19
    2a80:	ldr	w2, [x27, #644]
    2a84:	nop
    2a88:	ldrb	w1, [x20, x25]
    2a8c:	cmp	w2, #0x7
    2a90:	ldrh	w6, [x26, x0, lsl #1]
    2a94:	add	x1, x1, x1, lsl #7
    2a98:	lsl	x1, x1, #1
    2a9c:	add	x4, x1, x6
    2aa0:	add	x1, x27, x1
    2aa4:	add	x4, x4, x28
    2aa8:	add	x1, x1, x6
    2aac:	add	x1, x1, #0x9, lsl #12
    2ab0:	add	x4, x27, x4, lsl #2
    2ab4:	ldrb	w6, [x1, #844]
    2ab8:	ldr	w4, [x4, #8]
    2abc:	b.le	2b00 <BZ2_compressBlock+0x2930>
    2ac0:	ldr	w1, [x27, #116]
    2ac4:	nop
    2ac8:	ldr	x2, [x27, #80]
    2acc:	lsr	w3, w3, #24
    2ad0:	strb	w3, [x2, w1, sxtw]
    2ad4:	ldr	w3, [x27, #640]
    2ad8:	ldr	w1, [x27, #116]
    2adc:	ldr	w2, [x27, #644]
    2ae0:	lsl	w3, w3, #8
    2ae4:	add	w1, w1, #0x1
    2ae8:	sub	w2, w2, #0x8
    2aec:	str	w1, [x27, #116]
    2af0:	str	w3, [x27, #640]
    2af4:	cmp	w2, #0x7
    2af8:	str	w2, [x27, #644]
    2afc:	b.gt	2ac8 <BZ2_compressBlock+0x28f8>
    2b00:	sub	w1, w24, w2
    2b04:	add	w2, w2, w6
    2b08:	sub	w1, w1, w6
    2b0c:	str	w2, [x27, #644]
    2b10:	add	x0, x0, #0x1
    2b14:	lsl	w1, w4, w1
    2b18:	orr	w3, w3, w1
    2b1c:	str	w3, [x27, #640]
    2b20:	cmp	w22, w0
    2b24:	b.ge	2a88 <BZ2_compressBlock+0x28b8>  // b.tcont
    2b28:	ldr	w0, [x27, #668]
    2b2c:	mov	w19, w25
    2b30:	add	x25, x25, #0x1
    2b34:	cmp	w0, w23
    2b38:	b.le	80c <BZ2_compressBlock+0x63c>
    2b3c:	mov	w19, w23
    2b40:	b	2a38 <BZ2_compressBlock+0x2868>
    2b44:	mov	w0, #0xbbe                 	// #3006
    2b48:	bl	0 <BZ2_bz__AssertH__fail>
    2b4c:	b	2a5c <BZ2_compressBlock+0x288c>
    2b50:	ldrb	w3, [x20, x25]
    2b54:	sbfiz	x0, x19, #1, #32
    2b58:	mov	x6, #0x9958                	// #39256
    2b5c:	mov	x4, #0x934c                	// #37708
    2b60:	ldr	w1, [x27, #644]
    2b64:	add	x3, x3, x3, lsl #7
    2b68:	ldrh	w2, [x26, x0]
    2b6c:	ldr	w5, [x27, #640]
    2b70:	cmp	w1, #0x7
    2b74:	add	x4, x4, x3, lsl #1
    2b78:	add	x3, x6, x3, lsl #3
    2b7c:	add	x4, x27, x4
    2b80:	add	x3, x27, x3
    2b84:	and	x6, x2, #0xffff
    2b88:	ldr	w8, [x3, x2, lsl #2]
    2b8c:	ldrb	w9, [x4, x6]
    2b90:	b.le	2bd0 <BZ2_compressBlock+0x2a00>
    2b94:	ldr	w2, [x27, #116]
    2b98:	ldr	x6, [x27, #80]
    2b9c:	lsr	w5, w5, #24
    2ba0:	strb	w5, [x6, w2, sxtw]
    2ba4:	ldr	w5, [x27, #640]
    2ba8:	ldr	w2, [x27, #116]
    2bac:	ldr	w1, [x27, #644]
    2bb0:	lsl	w5, w5, #8
    2bb4:	add	w2, w2, #0x1
    2bb8:	sub	w1, w1, #0x8
    2bbc:	str	w2, [x27, #116]
    2bc0:	str	w5, [x27, #640]
    2bc4:	cmp	w1, #0x7
    2bc8:	str	w1, [x27, #644]
    2bcc:	b.gt	2b98 <BZ2_compressBlock+0x29c8>
    2bd0:	add	x0, x26, x0
    2bd4:	sub	w7, w24, w1
    2bd8:	sub	w7, w7, w9
    2bdc:	add	w1, w1, w9
    2be0:	cmp	w1, #0x7
    2be4:	ldrh	w2, [x0, #2]
    2be8:	lsl	w6, w8, w7
    2bec:	orr	w7, w6, w5
    2bf0:	str	w7, [x27, #640]
    2bf4:	and	x6, x2, #0xffff
    2bf8:	mov	w5, w2
    2bfc:	str	w1, [x27, #644]
    2c00:	ldrb	w2, [x4, x6]
    2c04:	ldr	w6, [x3, x5, lsl #2]
    2c08:	b.le	2c48 <BZ2_compressBlock+0x2a78>
    2c0c:	ldr	w8, [x27, #116]
    2c10:	ldr	x1, [x27, #80]
    2c14:	lsr	w5, w7, #24
    2c18:	strb	w5, [x1, w8, sxtw]
    2c1c:	ldr	w5, [x27, #640]
    2c20:	ldr	w8, [x27, #116]
    2c24:	ldr	w1, [x27, #644]
    2c28:	lsl	w7, w5, #8
    2c2c:	add	w8, w8, #0x1
    2c30:	sub	w1, w1, #0x8
    2c34:	str	w8, [x27, #116]
    2c38:	str	w7, [x27, #640]
    2c3c:	cmp	w1, #0x7
    2c40:	str	w1, [x27, #644]
    2c44:	b.gt	2c10 <BZ2_compressBlock+0x2a40>
    2c48:	ldrh	w8, [x0, #4]
    2c4c:	sub	w5, w24, w1
    2c50:	sub	w5, w5, w2
    2c54:	add	w1, w2, w1
    2c58:	and	x2, x8, #0xffff
    2c5c:	str	w1, [x27, #644]
    2c60:	lsl	w5, w6, w5
    2c64:	orr	w5, w5, w7
    2c68:	str	w5, [x27, #640]
    2c6c:	cmp	w1, #0x7
    2c70:	ldrb	w9, [x4, x2]
    2c74:	ldr	w2, [x3, x8, lsl #2]
    2c78:	b.le	2cb8 <BZ2_compressBlock+0x2ae8>
    2c7c:	ldr	w6, [x27, #116]
    2c80:	ldr	x7, [x27, #80]
    2c84:	lsr	w5, w5, #24
    2c88:	strb	w5, [x7, w6, sxtw]
    2c8c:	ldr	w5, [x27, #640]
    2c90:	ldr	w6, [x27, #116]
    2c94:	ldr	w1, [x27, #644]
    2c98:	lsl	w5, w5, #8
    2c9c:	add	w6, w6, #0x1
    2ca0:	sub	w1, w1, #0x8
    2ca4:	str	w6, [x27, #116]
    2ca8:	str	w5, [x27, #640]
    2cac:	cmp	w1, #0x7
    2cb0:	str	w1, [x27, #644]
    2cb4:	b.gt	2c80 <BZ2_compressBlock+0x2ab0>
    2cb8:	ldrh	w8, [x0, #6]
    2cbc:	sub	w7, w24, w1
    2cc0:	sub	w7, w7, w9
    2cc4:	add	w1, w1, w9
    2cc8:	and	x9, x8, #0xffff
    2ccc:	str	w1, [x27, #644]
    2cd0:	lsl	w7, w2, w7
    2cd4:	orr	w5, w7, w5
    2cd8:	str	w5, [x27, #640]
    2cdc:	cmp	w1, #0x7
    2ce0:	ldrb	w6, [x4, x9]
    2ce4:	ldr	w2, [x3, x8, lsl #2]
    2ce8:	b.le	2d28 <BZ2_compressBlock+0x2b58>
    2cec:	ldr	w8, [x27, #116]
    2cf0:	ldr	x1, [x27, #80]
    2cf4:	lsr	w7, w5, #24
    2cf8:	strb	w7, [x1, w8, sxtw]
    2cfc:	ldr	w7, [x27, #640]
    2d00:	ldr	w8, [x27, #116]
    2d04:	ldr	w1, [x27, #644]
    2d08:	lsl	w5, w7, #8
    2d0c:	add	w8, w8, #0x1
    2d10:	sub	w1, w1, #0x8
    2d14:	str	w8, [x27, #116]
    2d18:	str	w5, [x27, #640]
    2d1c:	cmp	w1, #0x7
    2d20:	str	w1, [x27, #644]
    2d24:	b.gt	2cf0 <BZ2_compressBlock+0x2b20>
    2d28:	ldrh	w8, [x0, #8]
    2d2c:	sub	w7, w24, w1
    2d30:	sub	w7, w7, w6
    2d34:	add	w1, w6, w1
    2d38:	and	x6, x8, #0xffff
    2d3c:	str	w1, [x27, #644]
    2d40:	lsl	w7, w2, w7
    2d44:	orr	w7, w7, w5
    2d48:	str	w7, [x27, #640]
    2d4c:	cmp	w1, #0x7
    2d50:	ldrb	w2, [x4, x6]
    2d54:	ldr	w6, [x3, x8, lsl #2]
    2d58:	b.le	2d98 <BZ2_compressBlock+0x2bc8>
    2d5c:	ldr	w5, [x27, #116]
    2d60:	ldr	x1, [x27, #80]
    2d64:	lsr	w7, w7, #24
    2d68:	strb	w7, [x1, w5, sxtw]
    2d6c:	ldr	w7, [x27, #640]
    2d70:	ldr	w5, [x27, #116]
    2d74:	ldr	w1, [x27, #644]
    2d78:	lsl	w7, w7, #8
    2d7c:	add	w5, w5, #0x1
    2d80:	sub	w1, w1, #0x8
    2d84:	str	w5, [x27, #116]
    2d88:	str	w7, [x27, #640]
    2d8c:	cmp	w1, #0x7
    2d90:	str	w1, [x27, #644]
    2d94:	b.gt	2d60 <BZ2_compressBlock+0x2b90>
    2d98:	ldrh	w8, [x0, #10]
    2d9c:	sub	w5, w24, w1
    2da0:	sub	w5, w5, w2
    2da4:	add	w1, w2, w1
    2da8:	and	x2, x8, #0xffff
    2dac:	str	w1, [x27, #644]
    2db0:	lsl	w5, w6, w5
    2db4:	orr	w7, w5, w7
    2db8:	str	w7, [x27, #640]
    2dbc:	cmp	w1, #0x7
    2dc0:	ldrb	w9, [x4, x2]
    2dc4:	ldr	w2, [x3, x8, lsl #2]
    2dc8:	b.le	2e08 <BZ2_compressBlock+0x2c38>
    2dcc:	ldr	w6, [x27, #116]
    2dd0:	ldr	x8, [x27, #80]
    2dd4:	lsr	w5, w7, #24
    2dd8:	strb	w5, [x8, w6, sxtw]
    2ddc:	ldr	w5, [x27, #640]
    2de0:	ldr	w6, [x27, #116]
    2de4:	ldr	w1, [x27, #644]
    2de8:	lsl	w7, w5, #8
    2dec:	add	w6, w6, #0x1
    2df0:	sub	w1, w1, #0x8
    2df4:	str	w6, [x27, #116]
    2df8:	str	w7, [x27, #640]
    2dfc:	cmp	w1, #0x7
    2e00:	str	w1, [x27, #644]
    2e04:	b.gt	2dd0 <BZ2_compressBlock+0x2c00>
    2e08:	ldrh	w6, [x0, #12]
    2e0c:	sub	w5, w24, w1
    2e10:	sub	w5, w5, w9
    2e14:	add	w1, w1, w9
    2e18:	and	x8, x6, #0xffff
    2e1c:	str	w1, [x27, #644]
    2e20:	lsl	w5, w2, w5
    2e24:	orr	w5, w5, w7
    2e28:	str	w5, [x27, #640]
    2e2c:	cmp	w1, #0x7
    2e30:	ldrb	w8, [x4, x8]
    2e34:	ldr	w2, [x3, x6, lsl #2]
    2e38:	b.le	2e78 <BZ2_compressBlock+0x2ca8>
    2e3c:	ldr	w6, [x27, #116]
    2e40:	ldr	x7, [x27, #80]
    2e44:	lsr	w5, w5, #24
    2e48:	strb	w5, [x7, w6, sxtw]
    2e4c:	ldr	w5, [x27, #640]
    2e50:	ldr	w6, [x27, #116]
    2e54:	ldr	w1, [x27, #644]
    2e58:	lsl	w5, w5, #8
    2e5c:	add	w6, w6, #0x1
    2e60:	sub	w1, w1, #0x8
    2e64:	str	w6, [x27, #116]
    2e68:	str	w5, [x27, #640]
    2e6c:	cmp	w1, #0x7
    2e70:	str	w1, [x27, #644]
    2e74:	b.gt	2e40 <BZ2_compressBlock+0x2c70>
    2e78:	ldrh	w6, [x0, #14]
    2e7c:	sub	w7, w24, w1
    2e80:	sub	w7, w7, w8
    2e84:	add	w1, w1, w8
    2e88:	and	x9, x6, #0xffff
    2e8c:	mov	w8, w6
    2e90:	lsl	w7, w2, w7
    2e94:	orr	w5, w7, w5
    2e98:	str	w5, [x27, #640]
    2e9c:	cmp	w1, #0x7
    2ea0:	str	w1, [x27, #644]
    2ea4:	ldrb	w6, [x4, x9]
    2ea8:	ldr	w2, [x3, x8, lsl #2]
    2eac:	b.le	2ef0 <BZ2_compressBlock+0x2d20>
    2eb0:	ldr	w8, [x27, #116]
    2eb4:	nop
    2eb8:	ldr	x1, [x27, #80]
    2ebc:	lsr	w7, w5, #24
    2ec0:	strb	w7, [x1, w8, sxtw]
    2ec4:	ldr	w7, [x27, #640]
    2ec8:	ldr	w8, [x27, #116]
    2ecc:	ldr	w1, [x27, #644]
    2ed0:	lsl	w5, w7, #8
    2ed4:	add	w8, w8, #0x1
    2ed8:	sub	w1, w1, #0x8
    2edc:	str	w8, [x27, #116]
    2ee0:	str	w5, [x27, #640]
    2ee4:	cmp	w1, #0x7
    2ee8:	str	w1, [x27, #644]
    2eec:	b.gt	2eb8 <BZ2_compressBlock+0x2ce8>
    2ef0:	ldrh	w8, [x0, #16]
    2ef4:	sub	w7, w24, w1
    2ef8:	sub	w7, w7, w6
    2efc:	add	w1, w6, w1
    2f00:	and	x6, x8, #0xffff
    2f04:	str	w1, [x27, #644]
    2f08:	lsl	w7, w2, w7
    2f0c:	orr	w7, w7, w5
    2f10:	str	w7, [x27, #640]
    2f14:	cmp	w1, #0x7
    2f18:	ldrb	w6, [x4, x6]
    2f1c:	ldr	w2, [x3, x8, lsl #2]
    2f20:	b.le	2f60 <BZ2_compressBlock+0x2d90>
    2f24:	ldr	w5, [x27, #116]
    2f28:	ldr	x1, [x27, #80]
    2f2c:	lsr	w7, w7, #24
    2f30:	strb	w7, [x1, w5, sxtw]
    2f34:	ldr	w7, [x27, #640]
    2f38:	ldr	w5, [x27, #116]
    2f3c:	ldr	w1, [x27, #644]
    2f40:	lsl	w7, w7, #8
    2f44:	add	w5, w5, #0x1
    2f48:	sub	w1, w1, #0x8
    2f4c:	str	w5, [x27, #116]
    2f50:	str	w7, [x27, #640]
    2f54:	cmp	w1, #0x7
    2f58:	str	w1, [x27, #644]
    2f5c:	b.gt	2f28 <BZ2_compressBlock+0x2d58>
    2f60:	ldrh	w8, [x0, #18]
    2f64:	sub	w5, w24, w1
    2f68:	sub	w5, w5, w6
    2f6c:	add	w1, w6, w1
    2f70:	and	x6, x8, #0xffff
    2f74:	str	w1, [x27, #644]
    2f78:	lsl	w5, w2, w5
    2f7c:	orr	w7, w5, w7
    2f80:	str	w7, [x27, #640]
    2f84:	cmp	w1, #0x7
    2f88:	ldrb	w6, [x4, x6]
    2f8c:	ldr	w2, [x3, x8, lsl #2]
    2f90:	b.le	2fd0 <BZ2_compressBlock+0x2e00>
    2f94:	ldr	w8, [x27, #116]
    2f98:	ldr	x1, [x27, #80]
    2f9c:	lsr	w5, w7, #24
    2fa0:	strb	w5, [x1, w8, sxtw]
    2fa4:	ldr	w5, [x27, #640]
    2fa8:	ldr	w8, [x27, #116]
    2fac:	ldr	w1, [x27, #644]
    2fb0:	lsl	w7, w5, #8
    2fb4:	add	w8, w8, #0x1
    2fb8:	sub	w1, w1, #0x8
    2fbc:	str	w8, [x27, #116]
    2fc0:	str	w7, [x27, #640]
    2fc4:	cmp	w1, #0x7
    2fc8:	str	w1, [x27, #644]
    2fcc:	b.gt	2f98 <BZ2_compressBlock+0x2dc8>
    2fd0:	ldrh	w8, [x0, #20]
    2fd4:	sub	w5, w24, w1
    2fd8:	sub	w5, w5, w6
    2fdc:	add	w1, w6, w1
    2fe0:	and	x6, x8, #0xffff
    2fe4:	str	w1, [x27, #644]
    2fe8:	lsl	w5, w2, w5
    2fec:	orr	w5, w5, w7
    2ff0:	str	w5, [x27, #640]
    2ff4:	cmp	w1, #0x7
    2ff8:	ldrb	w6, [x4, x6]
    2ffc:	ldr	w2, [x3, x8, lsl #2]
    3000:	b.le	3040 <BZ2_compressBlock+0x2e70>
    3004:	ldr	w7, [x27, #116]
    3008:	ldr	x1, [x27, #80]
    300c:	lsr	w5, w5, #24
    3010:	strb	w5, [x1, w7, sxtw]
    3014:	ldr	w5, [x27, #640]
    3018:	ldr	w7, [x27, #116]
    301c:	ldr	w1, [x27, #644]
    3020:	lsl	w5, w5, #8
    3024:	add	w7, w7, #0x1
    3028:	sub	w1, w1, #0x8
    302c:	str	w7, [x27, #116]
    3030:	str	w5, [x27, #640]
    3034:	cmp	w1, #0x7
    3038:	str	w1, [x27, #644]
    303c:	b.gt	3008 <BZ2_compressBlock+0x2e38>
    3040:	ldrh	w8, [x0, #22]
    3044:	sub	w7, w24, w1
    3048:	sub	w7, w7, w6
    304c:	add	w1, w6, w1
    3050:	and	x6, x8, #0xffff
    3054:	str	w1, [x27, #644]
    3058:	lsl	w7, w2, w7
    305c:	orr	w5, w7, w5
    3060:	str	w5, [x27, #640]
    3064:	cmp	w1, #0x7
    3068:	ldrb	w2, [x4, x6]
    306c:	ldr	w6, [x3, x8, lsl #2]
    3070:	b.le	30b0 <BZ2_compressBlock+0x2ee0>
    3074:	ldr	w8, [x27, #116]
    3078:	ldr	x1, [x27, #80]
    307c:	lsr	w7, w5, #24
    3080:	strb	w7, [x1, w8, sxtw]
    3084:	ldr	w7, [x27, #640]
    3088:	ldr	w8, [x27, #116]
    308c:	ldr	w1, [x27, #644]
    3090:	lsl	w5, w7, #8
    3094:	add	w8, w8, #0x1
    3098:	sub	w1, w1, #0x8
    309c:	str	w8, [x27, #116]
    30a0:	str	w5, [x27, #640]
    30a4:	cmp	w1, #0x7
    30a8:	str	w1, [x27, #644]
    30ac:	b.gt	3078 <BZ2_compressBlock+0x2ea8>
    30b0:	ldrh	w8, [x0, #24]
    30b4:	sub	w7, w24, w1
    30b8:	sub	w7, w7, w2
    30bc:	add	w1, w2, w1
    30c0:	and	x2, x8, #0xffff
    30c4:	str	w1, [x27, #644]
    30c8:	lsl	w7, w6, w7
    30cc:	orr	w7, w7, w5
    30d0:	str	w7, [x27, #640]
    30d4:	cmp	w1, #0x7
    30d8:	ldrb	w9, [x4, x2]
    30dc:	ldr	w2, [x3, x8, lsl #2]
    30e0:	b.le	3120 <BZ2_compressBlock+0x2f50>
    30e4:	ldr	w5, [x27, #116]
    30e8:	ldr	x6, [x27, #80]
    30ec:	lsr	w7, w7, #24
    30f0:	strb	w7, [x6, w5, sxtw]
    30f4:	ldr	w7, [x27, #640]
    30f8:	ldr	w5, [x27, #116]
    30fc:	ldr	w1, [x27, #644]
    3100:	lsl	w7, w7, #8
    3104:	add	w5, w5, #0x1
    3108:	sub	w1, w1, #0x8
    310c:	str	w5, [x27, #116]
    3110:	str	w7, [x27, #640]
    3114:	cmp	w1, #0x7
    3118:	str	w1, [x27, #644]
    311c:	b.gt	30e8 <BZ2_compressBlock+0x2f18>
    3120:	ldrh	w8, [x0, #26]
    3124:	sub	w5, w24, w1
    3128:	sub	w5, w5, w9
    312c:	add	w1, w1, w9
    3130:	and	x9, x8, #0xffff
    3134:	str	w1, [x27, #644]
    3138:	lsl	w5, w2, w5
    313c:	orr	w7, w5, w7
    3140:	str	w7, [x27, #640]
    3144:	cmp	w1, #0x7
    3148:	ldrb	w6, [x4, x9]
    314c:	ldr	w2, [x3, x8, lsl #2]
    3150:	b.le	3190 <BZ2_compressBlock+0x2fc0>
    3154:	ldr	w8, [x27, #116]
    3158:	ldr	x1, [x27, #80]
    315c:	lsr	w5, w7, #24
    3160:	strb	w5, [x1, w8, sxtw]
    3164:	ldr	w5, [x27, #640]
    3168:	ldr	w8, [x27, #116]
    316c:	ldr	w1, [x27, #644]
    3170:	lsl	w7, w5, #8
    3174:	add	w8, w8, #0x1
    3178:	sub	w1, w1, #0x8
    317c:	str	w8, [x27, #116]
    3180:	str	w7, [x27, #640]
    3184:	cmp	w1, #0x7
    3188:	str	w1, [x27, #644]
    318c:	b.gt	3158 <BZ2_compressBlock+0x2f88>
    3190:	ldrh	w8, [x0, #28]
    3194:	sub	w5, w24, w1
    3198:	sub	w5, w5, w6
    319c:	add	w1, w6, w1
    31a0:	and	x6, x8, #0xffff
    31a4:	str	w1, [x27, #644]
    31a8:	lsl	w5, w2, w5
    31ac:	orr	w5, w5, w7
    31b0:	str	w5, [x27, #640]
    31b4:	cmp	w1, #0x7
    31b8:	ldrb	w6, [x4, x6]
    31bc:	ldr	w2, [x3, x8, lsl #2]
    31c0:	b.le	3200 <BZ2_compressBlock+0x3030>
    31c4:	ldr	w7, [x27, #116]
    31c8:	ldr	x1, [x27, #80]
    31cc:	lsr	w5, w5, #24
    31d0:	strb	w5, [x1, w7, sxtw]
    31d4:	ldr	w5, [x27, #640]
    31d8:	ldr	w7, [x27, #116]
    31dc:	ldr	w1, [x27, #644]
    31e0:	lsl	w5, w5, #8
    31e4:	add	w7, w7, #0x1
    31e8:	sub	w1, w1, #0x8
    31ec:	str	w7, [x27, #116]
    31f0:	str	w5, [x27, #640]
    31f4:	cmp	w1, #0x7
    31f8:	str	w1, [x27, #644]
    31fc:	b.gt	31c8 <BZ2_compressBlock+0x2ff8>
    3200:	ldrh	w8, [x0, #30]
    3204:	sub	w7, w24, w1
    3208:	sub	w7, w7, w6
    320c:	add	w1, w6, w1
    3210:	and	x6, x8, #0xffff
    3214:	str	w1, [x27, #644]
    3218:	lsl	w7, w2, w7
    321c:	orr	w5, w7, w5
    3220:	str	w5, [x27, #640]
    3224:	cmp	w1, #0x7
    3228:	ldrb	w2, [x4, x6]
    322c:	ldr	w6, [x3, x8, lsl #2]
    3230:	b.le	3270 <BZ2_compressBlock+0x30a0>
    3234:	ldr	w8, [x27, #116]
    3238:	ldr	x1, [x27, #80]
    323c:	lsr	w7, w5, #24
    3240:	strb	w7, [x1, w8, sxtw]
    3244:	ldr	w7, [x27, #640]
    3248:	ldr	w8, [x27, #116]
    324c:	ldr	w1, [x27, #644]
    3250:	lsl	w5, w7, #8
    3254:	add	w8, w8, #0x1
    3258:	sub	w1, w1, #0x8
    325c:	str	w8, [x27, #116]
    3260:	str	w5, [x27, #640]
    3264:	cmp	w1, #0x7
    3268:	str	w1, [x27, #644]
    326c:	b.gt	3238 <BZ2_compressBlock+0x3068>
    3270:	ldrh	w8, [x0, #32]
    3274:	sub	w7, w24, w1
    3278:	sub	w7, w7, w2
    327c:	add	w1, w2, w1
    3280:	and	x2, x8, #0xffff
    3284:	str	w1, [x27, #644]
    3288:	lsl	w7, w6, w7
    328c:	orr	w7, w7, w5
    3290:	str	w7, [x27, #640]
    3294:	cmp	w1, #0x7
    3298:	ldrb	w9, [x4, x2]
    329c:	ldr	w2, [x3, x8, lsl #2]
    32a0:	b.le	32e0 <BZ2_compressBlock+0x3110>
    32a4:	ldr	w5, [x27, #116]
    32a8:	ldr	x6, [x27, #80]
    32ac:	lsr	w7, w7, #24
    32b0:	strb	w7, [x6, w5, sxtw]
    32b4:	ldr	w7, [x27, #640]
    32b8:	ldr	w5, [x27, #116]
    32bc:	ldr	w1, [x27, #644]
    32c0:	lsl	w7, w7, #8
    32c4:	add	w5, w5, #0x1
    32c8:	sub	w1, w1, #0x8
    32cc:	str	w5, [x27, #116]
    32d0:	str	w7, [x27, #640]
    32d4:	cmp	w1, #0x7
    32d8:	str	w1, [x27, #644]
    32dc:	b.gt	32a8 <BZ2_compressBlock+0x30d8>
    32e0:	ldrh	w6, [x0, #34]
    32e4:	sub	w5, w24, w1
    32e8:	sub	w5, w5, w9
    32ec:	add	w1, w1, w9
    32f0:	and	x8, x6, #0xffff
    32f4:	str	w1, [x27, #644]
    32f8:	lsl	w5, w2, w5
    32fc:	orr	w7, w5, w7
    3300:	str	w7, [x27, #640]
    3304:	cmp	w1, #0x7
    3308:	ldrb	w2, [x4, x8]
    330c:	ldr	w6, [x3, x6, lsl #2]
    3310:	b.le	3350 <BZ2_compressBlock+0x3180>
    3314:	ldr	w8, [x27, #116]
    3318:	ldr	x1, [x27, #80]
    331c:	lsr	w5, w7, #24
    3320:	strb	w5, [x1, w8, sxtw]
    3324:	ldr	w5, [x27, #640]
    3328:	ldr	w8, [x27, #116]
    332c:	ldr	w1, [x27, #644]
    3330:	lsl	w7, w5, #8
    3334:	add	w8, w8, #0x1
    3338:	sub	w1, w1, #0x8
    333c:	str	w8, [x27, #116]
    3340:	str	w7, [x27, #640]
    3344:	cmp	w1, #0x7
    3348:	str	w1, [x27, #644]
    334c:	b.gt	3318 <BZ2_compressBlock+0x3148>
    3350:	ldrh	w8, [x0, #36]
    3354:	sub	w5, w24, w1
    3358:	sub	w5, w5, w2
    335c:	add	w1, w2, w1
    3360:	and	x2, x8, #0xffff
    3364:	str	w1, [x27, #644]
    3368:	lsl	w5, w6, w5
    336c:	orr	w5, w5, w7
    3370:	str	w5, [x27, #640]
    3374:	cmp	w1, #0x7
    3378:	ldrb	w9, [x4, x2]
    337c:	ldr	w2, [x3, x8, lsl #2]
    3380:	b.le	33c0 <BZ2_compressBlock+0x31f0>
    3384:	ldr	w6, [x27, #116]
    3388:	ldr	x7, [x27, #80]
    338c:	lsr	w5, w5, #24
    3390:	strb	w5, [x7, w6, sxtw]
    3394:	ldr	w5, [x27, #640]
    3398:	ldr	w6, [x27, #116]
    339c:	ldr	w1, [x27, #644]
    33a0:	lsl	w5, w5, #8
    33a4:	add	w6, w6, #0x1
    33a8:	sub	w1, w1, #0x8
    33ac:	str	w6, [x27, #116]
    33b0:	str	w5, [x27, #640]
    33b4:	cmp	w1, #0x7
    33b8:	str	w1, [x27, #644]
    33bc:	b.gt	3388 <BZ2_compressBlock+0x31b8>
    33c0:	ldrh	w6, [x0, #38]
    33c4:	sub	w7, w24, w1
    33c8:	sub	w7, w7, w9
    33cc:	add	w1, w1, w9
    33d0:	and	x8, x6, #0xffff
    33d4:	str	w1, [x27, #644]
    33d8:	lsl	w7, w2, w7
    33dc:	orr	w5, w7, w5
    33e0:	str	w5, [x27, #640]
    33e4:	cmp	w1, #0x7
    33e8:	ldrb	w2, [x4, x8]
    33ec:	ldr	w6, [x3, x6, lsl #2]
    33f0:	b.le	3430 <BZ2_compressBlock+0x3260>
    33f4:	ldr	w8, [x27, #116]
    33f8:	ldr	x1, [x27, #80]
    33fc:	lsr	w7, w5, #24
    3400:	strb	w7, [x1, w8, sxtw]
    3404:	ldr	w7, [x27, #640]
    3408:	ldr	w8, [x27, #116]
    340c:	ldr	w1, [x27, #644]
    3410:	lsl	w5, w7, #8
    3414:	add	w8, w8, #0x1
    3418:	sub	w1, w1, #0x8
    341c:	str	w8, [x27, #116]
    3420:	str	w5, [x27, #640]
    3424:	cmp	w1, #0x7
    3428:	str	w1, [x27, #644]
    342c:	b.gt	33f8 <BZ2_compressBlock+0x3228>
    3430:	ldrh	w8, [x0, #40]
    3434:	sub	w7, w24, w1
    3438:	sub	w7, w7, w2
    343c:	add	w1, w2, w1
    3440:	and	x2, x8, #0xffff
    3444:	str	w1, [x27, #644]
    3448:	lsl	w7, w6, w7
    344c:	orr	w7, w7, w5
    3450:	str	w7, [x27, #640]
    3454:	cmp	w1, #0x7
    3458:	ldrb	w9, [x4, x2]
    345c:	ldr	w6, [x3, x8, lsl #2]
    3460:	b.le	34a0 <BZ2_compressBlock+0x32d0>
    3464:	ldr	w2, [x27, #116]
    3468:	ldr	x5, [x27, #80]
    346c:	lsr	w7, w7, #24
    3470:	strb	w7, [x5, w2, sxtw]
    3474:	ldr	w7, [x27, #640]
    3478:	ldr	w2, [x27, #116]
    347c:	ldr	w1, [x27, #644]
    3480:	lsl	w7, w7, #8
    3484:	add	w2, w2, #0x1
    3488:	sub	w1, w1, #0x8
    348c:	str	w2, [x27, #116]
    3490:	str	w7, [x27, #640]
    3494:	cmp	w1, #0x7
    3498:	str	w1, [x27, #644]
    349c:	b.gt	3468 <BZ2_compressBlock+0x3298>
    34a0:	ldrh	w8, [x0, #42]
    34a4:	sub	w5, w24, w1
    34a8:	sub	w5, w5, w9
    34ac:	add	w1, w1, w9
    34b0:	and	x9, x8, #0xffff
    34b4:	str	w1, [x27, #644]
    34b8:	lsl	w5, w6, w5
    34bc:	orr	w7, w5, w7
    34c0:	str	w7, [x27, #640]
    34c4:	cmp	w1, #0x7
    34c8:	ldrb	w2, [x4, x9]
    34cc:	ldr	w6, [x3, x8, lsl #2]
    34d0:	b.le	3510 <BZ2_compressBlock+0x3340>
    34d4:	ldr	w8, [x27, #116]
    34d8:	ldr	x1, [x27, #80]
    34dc:	lsr	w5, w7, #24
    34e0:	strb	w5, [x1, w8, sxtw]
    34e4:	ldr	w5, [x27, #640]
    34e8:	ldr	w8, [x27, #116]
    34ec:	ldr	w1, [x27, #644]
    34f0:	lsl	w7, w5, #8
    34f4:	add	w8, w8, #0x1
    34f8:	sub	w1, w1, #0x8
    34fc:	str	w8, [x27, #116]
    3500:	str	w7, [x27, #640]
    3504:	cmp	w1, #0x7
    3508:	str	w1, [x27, #644]
    350c:	b.gt	34d8 <BZ2_compressBlock+0x3308>
    3510:	ldrh	w8, [x0, #44]
    3514:	sub	w5, w24, w1
    3518:	sub	w5, w5, w2
    351c:	add	w1, w2, w1
    3520:	and	x2, x8, #0xffff
    3524:	str	w1, [x27, #644]
    3528:	lsl	w5, w6, w5
    352c:	orr	w5, w5, w7
    3530:	str	w5, [x27, #640]
    3534:	cmp	w1, #0x7
    3538:	ldrb	w9, [x4, x2]
    353c:	ldr	w6, [x3, x8, lsl #2]
    3540:	b.le	3580 <BZ2_compressBlock+0x33b0>
    3544:	ldr	w2, [x27, #116]
    3548:	ldr	x7, [x27, #80]
    354c:	lsr	w5, w5, #24
    3550:	strb	w5, [x7, w2, sxtw]
    3554:	ldr	w5, [x27, #640]
    3558:	ldr	w2, [x27, #116]
    355c:	ldr	w1, [x27, #644]
    3560:	lsl	w5, w5, #8
    3564:	add	w2, w2, #0x1
    3568:	sub	w1, w1, #0x8
    356c:	str	w2, [x27, #116]
    3570:	str	w5, [x27, #640]
    3574:	cmp	w1, #0x7
    3578:	str	w1, [x27, #644]
    357c:	b.gt	3548 <BZ2_compressBlock+0x3378>
    3580:	ldrh	w8, [x0, #46]
    3584:	sub	w2, w24, w1
    3588:	sub	w2, w2, w9
    358c:	add	w1, w1, w9
    3590:	and	x9, x8, #0xffff
    3594:	str	w1, [x27, #644]
    3598:	lsl	w2, w6, w2
    359c:	orr	w5, w2, w5
    35a0:	str	w5, [x27, #640]
    35a4:	cmp	w1, #0x7
    35a8:	ldrb	w7, [x4, x9]
    35ac:	ldr	w6, [x3, x8, lsl #2]
    35b0:	b.le	35f0 <BZ2_compressBlock+0x3420>
    35b4:	ldr	w8, [x27, #116]
    35b8:	ldr	x1, [x27, #80]
    35bc:	lsr	w2, w5, #24
    35c0:	strb	w2, [x1, w8, sxtw]
    35c4:	ldr	w2, [x27, #640]
    35c8:	ldr	w8, [x27, #116]
    35cc:	ldr	w1, [x27, #644]
    35d0:	lsl	w5, w2, #8
    35d4:	add	w8, w8, #0x1
    35d8:	sub	w1, w1, #0x8
    35dc:	str	w8, [x27, #116]
    35e0:	str	w5, [x27, #640]
    35e4:	cmp	w1, #0x7
    35e8:	str	w1, [x27, #644]
    35ec:	b.gt	35b8 <BZ2_compressBlock+0x33e8>
    35f0:	ldrh	w8, [x0, #48]
    35f4:	sub	w2, w24, w1
    35f8:	sub	w2, w2, w7
    35fc:	add	w7, w7, w1
    3600:	and	x9, x8, #0xffff
    3604:	mov	w1, w8
    3608:	lsl	w2, w6, w2
    360c:	orr	w2, w2, w5
    3610:	str	w2, [x27, #640]
    3614:	cmp	w7, #0x7
    3618:	str	w7, [x27, #644]
    361c:	ldrb	w8, [x4, x9]
    3620:	ldr	w6, [x3, x1, lsl #2]
    3624:	b.le	3668 <BZ2_compressBlock+0x3498>
    3628:	ldr	w1, [x27, #116]
    362c:	nop
    3630:	ldr	x5, [x27, #80]
    3634:	lsr	w2, w2, #24
    3638:	strb	w2, [x5, w1, sxtw]
    363c:	ldr	w2, [x27, #640]
    3640:	ldr	w1, [x27, #116]
    3644:	ldr	w7, [x27, #644]
    3648:	lsl	w2, w2, #8
    364c:	add	w1, w1, #0x1
    3650:	sub	w7, w7, #0x8
    3654:	str	w1, [x27, #116]
    3658:	str	w2, [x27, #640]
    365c:	cmp	w7, #0x7
    3660:	str	w7, [x27, #644]
    3664:	b.gt	3630 <BZ2_compressBlock+0x3460>
    3668:	ldrh	w1, [x0, #50]
    366c:	sub	w5, w24, w7
    3670:	sub	w5, w5, w8
    3674:	add	w7, w8, w7
    3678:	and	x8, x1, #0xffff
    367c:	str	w7, [x27, #644]
    3680:	lsl	w5, w6, w5
    3684:	orr	w2, w5, w2
    3688:	str	w2, [x27, #640]
    368c:	cmp	w7, #0x7
    3690:	ldrb	w8, [x4, x8]
    3694:	ldr	w6, [x3, x1, lsl #2]
    3698:	b.le	36d8 <BZ2_compressBlock+0x3508>
    369c:	ldr	w1, [x27, #116]
    36a0:	ldr	x7, [x27, #80]
    36a4:	lsr	w5, w2, #24
    36a8:	strb	w5, [x7, w1, sxtw]
    36ac:	ldr	w5, [x27, #640]
    36b0:	ldr	w1, [x27, #116]
    36b4:	ldr	w7, [x27, #644]
    36b8:	lsl	w2, w5, #8
    36bc:	add	w1, w1, #0x1
    36c0:	sub	w7, w7, #0x8
    36c4:	str	w1, [x27, #116]
    36c8:	str	w2, [x27, #640]
    36cc:	cmp	w7, #0x7
    36d0:	str	w7, [x27, #644]
    36d4:	b.gt	36a0 <BZ2_compressBlock+0x34d0>
    36d8:	ldrh	w1, [x0, #52]
    36dc:	sub	w5, w24, w7
    36e0:	sub	w5, w5, w8
    36e4:	add	w7, w8, w7
    36e8:	and	x8, x1, #0xffff
    36ec:	str	w7, [x27, #644]
    36f0:	lsl	w5, w6, w5
    36f4:	orr	w5, w5, w2
    36f8:	str	w5, [x27, #640]
    36fc:	cmp	w7, #0x7
    3700:	ldrb	w8, [x4, x8]
    3704:	ldr	w6, [x3, x1, lsl #2]
    3708:	b.le	3748 <BZ2_compressBlock+0x3578>
    370c:	ldr	w1, [x27, #116]
    3710:	ldr	x2, [x27, #80]
    3714:	lsr	w5, w5, #24
    3718:	strb	w5, [x2, w1, sxtw]
    371c:	ldr	w5, [x27, #640]
    3720:	ldr	w1, [x27, #116]
    3724:	ldr	w7, [x27, #644]
    3728:	lsl	w5, w5, #8
    372c:	add	w1, w1, #0x1
    3730:	sub	w7, w7, #0x8
    3734:	str	w1, [x27, #116]
    3738:	str	w5, [x27, #640]
    373c:	cmp	w7, #0x7
    3740:	str	w7, [x27, #644]
    3744:	b.gt	3710 <BZ2_compressBlock+0x3540>
    3748:	ldrh	w1, [x0, #54]
    374c:	sub	w2, w24, w7
    3750:	sub	w2, w2, w8
    3754:	add	w7, w8, w7
    3758:	and	x8, x1, #0xffff
    375c:	str	w7, [x27, #644]
    3760:	lsl	w2, w6, w2
    3764:	orr	w5, w2, w5
    3768:	str	w5, [x27, #640]
    376c:	cmp	w7, #0x7
    3770:	ldrb	w6, [x4, x8]
    3774:	ldr	w1, [x3, x1, lsl #2]
    3778:	b.le	37b8 <BZ2_compressBlock+0x35e8>
    377c:	ldr	w8, [x27, #116]
    3780:	ldr	x7, [x27, #80]
    3784:	lsr	w2, w5, #24
    3788:	strb	w2, [x7, w8, sxtw]
    378c:	ldr	w2, [x27, #640]
    3790:	ldr	w8, [x27, #116]
    3794:	ldr	w7, [x27, #644]
    3798:	lsl	w5, w2, #8
    379c:	add	w8, w8, #0x1
    37a0:	sub	w7, w7, #0x8
    37a4:	str	w8, [x27, #116]
    37a8:	str	w5, [x27, #640]
    37ac:	cmp	w7, #0x7
    37b0:	str	w7, [x27, #644]
    37b4:	b.gt	3780 <BZ2_compressBlock+0x35b0>
    37b8:	ldrh	w8, [x0, #56]
    37bc:	sub	w2, w24, w7
    37c0:	sub	w2, w2, w6
    37c4:	add	w7, w6, w7
    37c8:	and	x6, x8, #0xffff
    37cc:	str	w7, [x27, #644]
    37d0:	lsl	w2, w1, w2
    37d4:	orr	w2, w2, w5
    37d8:	str	w2, [x27, #640]
    37dc:	cmp	w7, #0x7
    37e0:	ldrb	w6, [x4, x6]
    37e4:	ldr	w1, [x3, x8, lsl #2]
    37e8:	b.le	3828 <BZ2_compressBlock+0x3658>
    37ec:	ldr	w5, [x27, #116]
    37f0:	ldr	x7, [x27, #80]
    37f4:	lsr	w2, w2, #24
    37f8:	strb	w2, [x7, w5, sxtw]
    37fc:	ldr	w2, [x27, #640]
    3800:	ldr	w5, [x27, #116]
    3804:	ldr	w7, [x27, #644]
    3808:	lsl	w2, w2, #8
    380c:	add	w5, w5, #0x1
    3810:	sub	w7, w7, #0x8
    3814:	str	w5, [x27, #116]
    3818:	str	w2, [x27, #640]
    381c:	cmp	w7, #0x7
    3820:	str	w7, [x27, #644]
    3824:	b.gt	37f0 <BZ2_compressBlock+0x3620>
    3828:	ldrh	w8, [x0, #58]
    382c:	sub	w5, w24, w7
    3830:	sub	w5, w5, w6
    3834:	add	w7, w6, w7
    3838:	and	x6, x8, #0xffff
    383c:	str	w7, [x27, #644]
    3840:	lsl	w5, w1, w5
    3844:	orr	w2, w5, w2
    3848:	str	w2, [x27, #640]
    384c:	cmp	w7, #0x7
    3850:	ldrb	w6, [x4, x6]
    3854:	ldr	w1, [x3, x8, lsl #2]
    3858:	b.le	3898 <BZ2_compressBlock+0x36c8>
    385c:	ldr	w8, [x27, #116]
    3860:	ldr	x7, [x27, #80]
    3864:	lsr	w5, w2, #24
    3868:	strb	w5, [x7, w8, sxtw]
    386c:	ldr	w5, [x27, #640]
    3870:	ldr	w8, [x27, #116]
    3874:	ldr	w7, [x27, #644]
    3878:	lsl	w2, w5, #8
    387c:	add	w8, w8, #0x1
    3880:	sub	w7, w7, #0x8
    3884:	str	w8, [x27, #116]
    3888:	str	w2, [x27, #640]
    388c:	cmp	w7, #0x7
    3890:	str	w7, [x27, #644]
    3894:	b.gt	3860 <BZ2_compressBlock+0x3690>
    3898:	ldrh	w8, [x0, #60]
    389c:	sub	w5, w24, w7
    38a0:	sub	w5, w5, w6
    38a4:	add	w7, w6, w7
    38a8:	and	x6, x8, #0xffff
    38ac:	str	w7, [x27, #644]
    38b0:	lsl	w5, w1, w5
    38b4:	orr	w5, w5, w2
    38b8:	str	w5, [x27, #640]
    38bc:	cmp	w7, #0x7
    38c0:	ldrb	w6, [x4, x6]
    38c4:	ldr	w1, [x3, x8, lsl #2]
    38c8:	b.le	3908 <BZ2_compressBlock+0x3738>
    38cc:	ldr	w2, [x27, #116]
    38d0:	ldr	x7, [x27, #80]
    38d4:	lsr	w5, w5, #24
    38d8:	strb	w5, [x7, w2, sxtw]
    38dc:	ldr	w5, [x27, #640]
    38e0:	ldr	w2, [x27, #116]
    38e4:	ldr	w7, [x27, #644]
    38e8:	lsl	w5, w5, #8
    38ec:	add	w2, w2, #0x1
    38f0:	sub	w7, w7, #0x8
    38f4:	str	w2, [x27, #116]
    38f8:	str	w5, [x27, #640]
    38fc:	cmp	w7, #0x7
    3900:	str	w7, [x27, #644]
    3904:	b.gt	38d0 <BZ2_compressBlock+0x3700>
    3908:	ldrh	w8, [x0, #62]
    390c:	sub	w2, w24, w7
    3910:	sub	w2, w2, w6
    3914:	add	w7, w6, w7
    3918:	and	x6, x8, #0xffff
    391c:	str	w7, [x27, #644]
    3920:	lsl	w2, w1, w2
    3924:	orr	w5, w2, w5
    3928:	str	w5, [x27, #640]
    392c:	cmp	w7, #0x7
    3930:	ldrb	w6, [x4, x6]
    3934:	ldr	w1, [x3, x8, lsl #2]
    3938:	b.le	3978 <BZ2_compressBlock+0x37a8>
    393c:	ldr	w8, [x27, #116]
    3940:	ldr	x7, [x27, #80]
    3944:	lsr	w2, w5, #24
    3948:	strb	w2, [x7, w8, sxtw]
    394c:	ldr	w2, [x27, #640]
    3950:	ldr	w8, [x27, #116]
    3954:	ldr	w7, [x27, #644]
    3958:	lsl	w5, w2, #8
    395c:	add	w8, w8, #0x1
    3960:	sub	w7, w7, #0x8
    3964:	str	w8, [x27, #116]
    3968:	str	w5, [x27, #640]
    396c:	cmp	w7, #0x7
    3970:	str	w7, [x27, #644]
    3974:	b.gt	3940 <BZ2_compressBlock+0x3770>
    3978:	ldrh	w8, [x0, #64]
    397c:	sub	w2, w24, w7
    3980:	sub	w2, w2, w6
    3984:	add	w7, w6, w7
    3988:	and	x6, x8, #0xffff
    398c:	str	w7, [x27, #644]
    3990:	lsl	w2, w1, w2
    3994:	orr	w2, w2, w5
    3998:	str	w2, [x27, #640]
    399c:	cmp	w7, #0x7
    39a0:	ldrb	w6, [x4, x6]
    39a4:	ldr	w1, [x3, x8, lsl #2]
    39a8:	b.le	39e8 <BZ2_compressBlock+0x3818>
    39ac:	ldr	w5, [x27, #116]
    39b0:	ldr	x7, [x27, #80]
    39b4:	lsr	w2, w2, #24
    39b8:	strb	w2, [x7, w5, sxtw]
    39bc:	ldr	w2, [x27, #640]
    39c0:	ldr	w5, [x27, #116]
    39c4:	ldr	w7, [x27, #644]
    39c8:	lsl	w2, w2, #8
    39cc:	add	w5, w5, #0x1
    39d0:	sub	w7, w7, #0x8
    39d4:	str	w5, [x27, #116]
    39d8:	str	w2, [x27, #640]
    39dc:	cmp	w7, #0x7
    39e0:	str	w7, [x27, #644]
    39e4:	b.gt	39b0 <BZ2_compressBlock+0x37e0>
    39e8:	ldrh	w8, [x0, #66]
    39ec:	sub	w5, w24, w7
    39f0:	sub	w5, w5, w6
    39f4:	add	w7, w6, w7
    39f8:	and	x6, x8, #0xffff
    39fc:	str	w7, [x27, #644]
    3a00:	lsl	w5, w1, w5
    3a04:	orr	w2, w5, w2
    3a08:	str	w2, [x27, #640]
    3a0c:	cmp	w7, #0x7
    3a10:	ldrb	w6, [x4, x6]
    3a14:	ldr	w1, [x3, x8, lsl #2]
    3a18:	b.le	3a58 <BZ2_compressBlock+0x3888>
    3a1c:	ldr	w8, [x27, #116]
    3a20:	ldr	x7, [x27, #80]
    3a24:	lsr	w5, w2, #24
    3a28:	strb	w5, [x7, w8, sxtw]
    3a2c:	ldr	w5, [x27, #640]
    3a30:	ldr	w8, [x27, #116]
    3a34:	ldr	w7, [x27, #644]
    3a38:	lsl	w2, w5, #8
    3a3c:	add	w8, w8, #0x1
    3a40:	sub	w7, w7, #0x8
    3a44:	str	w8, [x27, #116]
    3a48:	str	w2, [x27, #640]
    3a4c:	cmp	w7, #0x7
    3a50:	str	w7, [x27, #644]
    3a54:	b.gt	3a20 <BZ2_compressBlock+0x3850>
    3a58:	ldrh	w8, [x0, #68]
    3a5c:	sub	w5, w24, w7
    3a60:	sub	w5, w5, w6
    3a64:	add	w7, w6, w7
    3a68:	and	x6, x8, #0xffff
    3a6c:	str	w7, [x27, #644]
    3a70:	lsl	w5, w1, w5
    3a74:	orr	w5, w5, w2
    3a78:	str	w5, [x27, #640]
    3a7c:	cmp	w7, #0x7
    3a80:	ldrb	w6, [x4, x6]
    3a84:	ldr	w1, [x3, x8, lsl #2]
    3a88:	b.le	3ac8 <BZ2_compressBlock+0x38f8>
    3a8c:	ldr	w2, [x27, #116]
    3a90:	ldr	x7, [x27, #80]
    3a94:	lsr	w5, w5, #24
    3a98:	strb	w5, [x7, w2, sxtw]
    3a9c:	ldr	w5, [x27, #640]
    3aa0:	ldr	w2, [x27, #116]
    3aa4:	ldr	w7, [x27, #644]
    3aa8:	lsl	w5, w5, #8
    3aac:	add	w2, w2, #0x1
    3ab0:	sub	w7, w7, #0x8
    3ab4:	str	w2, [x27, #116]
    3ab8:	str	w5, [x27, #640]
    3abc:	cmp	w7, #0x7
    3ac0:	str	w7, [x27, #644]
    3ac4:	b.gt	3a90 <BZ2_compressBlock+0x38c0>
    3ac8:	ldrh	w8, [x0, #70]
    3acc:	sub	w2, w24, w7
    3ad0:	sub	w2, w2, w6
    3ad4:	add	w7, w6, w7
    3ad8:	and	x6, x8, #0xffff
    3adc:	str	w7, [x27, #644]
    3ae0:	lsl	w2, w1, w2
    3ae4:	orr	w5, w2, w5
    3ae8:	str	w5, [x27, #640]
    3aec:	cmp	w7, #0x7
    3af0:	ldrb	w6, [x4, x6]
    3af4:	ldr	w1, [x3, x8, lsl #2]
    3af8:	b.le	3b38 <BZ2_compressBlock+0x3968>
    3afc:	ldr	w8, [x27, #116]
    3b00:	ldr	x7, [x27, #80]
    3b04:	lsr	w2, w5, #24
    3b08:	strb	w2, [x7, w8, sxtw]
    3b0c:	ldr	w2, [x27, #640]
    3b10:	ldr	w8, [x27, #116]
    3b14:	ldr	w7, [x27, #644]
    3b18:	lsl	w5, w2, #8
    3b1c:	add	w8, w8, #0x1
    3b20:	sub	w7, w7, #0x8
    3b24:	str	w8, [x27, #116]
    3b28:	str	w5, [x27, #640]
    3b2c:	cmp	w7, #0x7
    3b30:	str	w7, [x27, #644]
    3b34:	b.gt	3b00 <BZ2_compressBlock+0x3930>
    3b38:	ldrh	w8, [x0, #72]
    3b3c:	sub	w2, w24, w7
    3b40:	sub	w2, w2, w6
    3b44:	add	w7, w6, w7
    3b48:	and	x6, x8, #0xffff
    3b4c:	str	w7, [x27, #644]
    3b50:	lsl	w2, w1, w2
    3b54:	orr	w2, w2, w5
    3b58:	str	w2, [x27, #640]
    3b5c:	cmp	w7, #0x7
    3b60:	ldrb	w6, [x4, x6]
    3b64:	ldr	w1, [x3, x8, lsl #2]
    3b68:	b.le	3ba8 <BZ2_compressBlock+0x39d8>
    3b6c:	ldr	w5, [x27, #116]
    3b70:	ldr	x7, [x27, #80]
    3b74:	lsr	w2, w2, #24
    3b78:	strb	w2, [x7, w5, sxtw]
    3b7c:	ldr	w2, [x27, #640]
    3b80:	ldr	w5, [x27, #116]
    3b84:	ldr	w7, [x27, #644]
    3b88:	lsl	w2, w2, #8
    3b8c:	add	w5, w5, #0x1
    3b90:	sub	w7, w7, #0x8
    3b94:	str	w5, [x27, #116]
    3b98:	str	w2, [x27, #640]
    3b9c:	cmp	w7, #0x7
    3ba0:	str	w7, [x27, #644]
    3ba4:	b.gt	3b70 <BZ2_compressBlock+0x39a0>
    3ba8:	ldrh	w8, [x0, #74]
    3bac:	sub	w5, w24, w7
    3bb0:	sub	w5, w5, w6
    3bb4:	add	w7, w6, w7
    3bb8:	and	x6, x8, #0xffff
    3bbc:	str	w7, [x27, #644]
    3bc0:	lsl	w5, w1, w5
    3bc4:	orr	w2, w5, w2
    3bc8:	str	w2, [x27, #640]
    3bcc:	cmp	w7, #0x7
    3bd0:	ldrb	w6, [x4, x6]
    3bd4:	ldr	w1, [x3, x8, lsl #2]
    3bd8:	b.le	3c18 <BZ2_compressBlock+0x3a48>
    3bdc:	ldr	w8, [x27, #116]
    3be0:	ldr	x7, [x27, #80]
    3be4:	lsr	w5, w2, #24
    3be8:	strb	w5, [x7, w8, sxtw]
    3bec:	ldr	w5, [x27, #640]
    3bf0:	ldr	w8, [x27, #116]
    3bf4:	ldr	w7, [x27, #644]
    3bf8:	lsl	w2, w5, #8
    3bfc:	add	w8, w8, #0x1
    3c00:	sub	w7, w7, #0x8
    3c04:	str	w8, [x27, #116]
    3c08:	str	w2, [x27, #640]
    3c0c:	cmp	w7, #0x7
    3c10:	str	w7, [x27, #644]
    3c14:	b.gt	3be0 <BZ2_compressBlock+0x3a10>
    3c18:	ldrh	w8, [x0, #76]
    3c1c:	sub	w5, w24, w7
    3c20:	sub	w5, w5, w6
    3c24:	add	w7, w6, w7
    3c28:	and	x6, x8, #0xffff
    3c2c:	str	w7, [x27, #644]
    3c30:	lsl	w5, w1, w5
    3c34:	orr	w5, w5, w2
    3c38:	str	w5, [x27, #640]
    3c3c:	cmp	w7, #0x7
    3c40:	ldrb	w6, [x4, x6]
    3c44:	ldr	w1, [x3, x8, lsl #2]
    3c48:	b.le	3c88 <BZ2_compressBlock+0x3ab8>
    3c4c:	ldr	w2, [x27, #116]
    3c50:	ldr	x7, [x27, #80]
    3c54:	lsr	w5, w5, #24
    3c58:	strb	w5, [x7, w2, sxtw]
    3c5c:	ldr	w5, [x27, #640]
    3c60:	ldr	w2, [x27, #116]
    3c64:	ldr	w7, [x27, #644]
    3c68:	lsl	w5, w5, #8
    3c6c:	add	w2, w2, #0x1
    3c70:	sub	w7, w7, #0x8
    3c74:	str	w2, [x27, #116]
    3c78:	str	w5, [x27, #640]
    3c7c:	cmp	w7, #0x7
    3c80:	str	w7, [x27, #644]
    3c84:	b.gt	3c50 <BZ2_compressBlock+0x3a80>
    3c88:	ldrh	w8, [x0, #78]
    3c8c:	sub	w2, w24, w7
    3c90:	sub	w2, w2, w6
    3c94:	add	w7, w6, w7
    3c98:	and	x6, x8, #0xffff
    3c9c:	str	w7, [x27, #644]
    3ca0:	lsl	w2, w1, w2
    3ca4:	orr	w5, w2, w5
    3ca8:	str	w5, [x27, #640]
    3cac:	cmp	w7, #0x7
    3cb0:	ldrb	w6, [x4, x6]
    3cb4:	ldr	w1, [x3, x8, lsl #2]
    3cb8:	b.le	3cf8 <BZ2_compressBlock+0x3b28>
    3cbc:	ldr	w8, [x27, #116]
    3cc0:	ldr	x7, [x27, #80]
    3cc4:	lsr	w2, w5, #24
    3cc8:	strb	w2, [x7, w8, sxtw]
    3ccc:	ldr	w2, [x27, #640]
    3cd0:	ldr	w8, [x27, #116]
    3cd4:	ldr	w7, [x27, #644]
    3cd8:	lsl	w5, w2, #8
    3cdc:	add	w8, w8, #0x1
    3ce0:	sub	w7, w7, #0x8
    3ce4:	str	w8, [x27, #116]
    3ce8:	str	w5, [x27, #640]
    3cec:	cmp	w7, #0x7
    3cf0:	str	w7, [x27, #644]
    3cf4:	b.gt	3cc0 <BZ2_compressBlock+0x3af0>
    3cf8:	ldrh	w8, [x0, #80]
    3cfc:	sub	w2, w24, w7
    3d00:	sub	w2, w2, w6
    3d04:	add	w7, w6, w7
    3d08:	and	x6, x8, #0xffff
    3d0c:	str	w7, [x27, #644]
    3d10:	lsl	w2, w1, w2
    3d14:	orr	w2, w2, w5
    3d18:	str	w2, [x27, #640]
    3d1c:	cmp	w7, #0x7
    3d20:	ldrb	w6, [x4, x6]
    3d24:	ldr	w1, [x3, x8, lsl #2]
    3d28:	b.le	3d68 <BZ2_compressBlock+0x3b98>
    3d2c:	ldr	w5, [x27, #116]
    3d30:	ldr	x7, [x27, #80]
    3d34:	lsr	w2, w2, #24
    3d38:	strb	w2, [x7, w5, sxtw]
    3d3c:	ldr	w2, [x27, #640]
    3d40:	ldr	w5, [x27, #116]
    3d44:	ldr	w7, [x27, #644]
    3d48:	lsl	w2, w2, #8
    3d4c:	add	w5, w5, #0x1
    3d50:	sub	w7, w7, #0x8
    3d54:	str	w5, [x27, #116]
    3d58:	str	w2, [x27, #640]
    3d5c:	cmp	w7, #0x7
    3d60:	str	w7, [x27, #644]
    3d64:	b.gt	3d30 <BZ2_compressBlock+0x3b60>
    3d68:	ldrh	w8, [x0, #82]
    3d6c:	sub	w5, w24, w7
    3d70:	sub	w5, w5, w6
    3d74:	add	w7, w6, w7
    3d78:	and	x6, x8, #0xffff
    3d7c:	str	w7, [x27, #644]
    3d80:	lsl	w5, w1, w5
    3d84:	orr	w2, w5, w2
    3d88:	str	w2, [x27, #640]
    3d8c:	cmp	w7, #0x7
    3d90:	ldrb	w6, [x4, x6]
    3d94:	ldr	w1, [x3, x8, lsl #2]
    3d98:	b.le	3dd8 <BZ2_compressBlock+0x3c08>
    3d9c:	ldr	w8, [x27, #116]
    3da0:	ldr	x7, [x27, #80]
    3da4:	lsr	w5, w2, #24
    3da8:	strb	w5, [x7, w8, sxtw]
    3dac:	ldr	w5, [x27, #640]
    3db0:	ldr	w8, [x27, #116]
    3db4:	ldr	w7, [x27, #644]
    3db8:	lsl	w2, w5, #8
    3dbc:	add	w8, w8, #0x1
    3dc0:	sub	w7, w7, #0x8
    3dc4:	str	w8, [x27, #116]
    3dc8:	str	w2, [x27, #640]
    3dcc:	cmp	w7, #0x7
    3dd0:	str	w7, [x27, #644]
    3dd4:	b.gt	3da0 <BZ2_compressBlock+0x3bd0>
    3dd8:	ldrh	w8, [x0, #84]
    3ddc:	sub	w5, w24, w7
    3de0:	sub	w5, w5, w6
    3de4:	add	w7, w6, w7
    3de8:	and	x6, x8, #0xffff
    3dec:	str	w7, [x27, #644]
    3df0:	lsl	w5, w1, w5
    3df4:	orr	w5, w5, w2
    3df8:	str	w5, [x27, #640]
    3dfc:	cmp	w7, #0x7
    3e00:	ldrb	w6, [x4, x6]
    3e04:	ldr	w1, [x3, x8, lsl #2]
    3e08:	b.le	3e48 <BZ2_compressBlock+0x3c78>
    3e0c:	ldr	w2, [x27, #116]
    3e10:	ldr	x7, [x27, #80]
    3e14:	lsr	w5, w5, #24
    3e18:	strb	w5, [x7, w2, sxtw]
    3e1c:	ldr	w5, [x27, #640]
    3e20:	ldr	w2, [x27, #116]
    3e24:	ldr	w7, [x27, #644]
    3e28:	lsl	w5, w5, #8
    3e2c:	add	w2, w2, #0x1
    3e30:	sub	w7, w7, #0x8
    3e34:	str	w2, [x27, #116]
    3e38:	str	w5, [x27, #640]
    3e3c:	cmp	w7, #0x7
    3e40:	str	w7, [x27, #644]
    3e44:	b.gt	3e10 <BZ2_compressBlock+0x3c40>
    3e48:	ldrh	w8, [x0, #86]
    3e4c:	sub	w2, w24, w7
    3e50:	sub	w2, w2, w6
    3e54:	add	w7, w6, w7
    3e58:	and	x6, x8, #0xffff
    3e5c:	str	w7, [x27, #644]
    3e60:	lsl	w2, w1, w2
    3e64:	orr	w5, w2, w5
    3e68:	str	w5, [x27, #640]
    3e6c:	cmp	w7, #0x7
    3e70:	ldrb	w6, [x4, x6]
    3e74:	ldr	w1, [x3, x8, lsl #2]
    3e78:	b.le	3eb8 <BZ2_compressBlock+0x3ce8>
    3e7c:	ldr	w8, [x27, #116]
    3e80:	ldr	x7, [x27, #80]
    3e84:	lsr	w2, w5, #24
    3e88:	strb	w2, [x7, w8, sxtw]
    3e8c:	ldr	w2, [x27, #640]
    3e90:	ldr	w8, [x27, #116]
    3e94:	ldr	w7, [x27, #644]
    3e98:	lsl	w5, w2, #8
    3e9c:	add	w8, w8, #0x1
    3ea0:	sub	w7, w7, #0x8
    3ea4:	str	w8, [x27, #116]
    3ea8:	str	w5, [x27, #640]
    3eac:	cmp	w7, #0x7
    3eb0:	str	w7, [x27, #644]
    3eb4:	b.gt	3e80 <BZ2_compressBlock+0x3cb0>
    3eb8:	ldrh	w8, [x0, #88]
    3ebc:	sub	w2, w24, w7
    3ec0:	sub	w2, w2, w6
    3ec4:	add	w7, w6, w7
    3ec8:	and	x6, x8, #0xffff
    3ecc:	str	w7, [x27, #644]
    3ed0:	lsl	w2, w1, w2
    3ed4:	orr	w2, w2, w5
    3ed8:	str	w2, [x27, #640]
    3edc:	cmp	w7, #0x7
    3ee0:	ldrb	w6, [x4, x6]
    3ee4:	ldr	w1, [x3, x8, lsl #2]
    3ee8:	b.le	3f28 <BZ2_compressBlock+0x3d58>
    3eec:	ldr	w5, [x27, #116]
    3ef0:	ldr	x7, [x27, #80]
    3ef4:	lsr	w2, w2, #24
    3ef8:	strb	w2, [x7, w5, sxtw]
    3efc:	ldr	w2, [x27, #640]
    3f00:	ldr	w5, [x27, #116]
    3f04:	ldr	w7, [x27, #644]
    3f08:	lsl	w2, w2, #8
    3f0c:	add	w5, w5, #0x1
    3f10:	sub	w7, w7, #0x8
    3f14:	str	w5, [x27, #116]
    3f18:	str	w2, [x27, #640]
    3f1c:	cmp	w7, #0x7
    3f20:	str	w7, [x27, #644]
    3f24:	b.gt	3ef0 <BZ2_compressBlock+0x3d20>
    3f28:	ldrh	w8, [x0, #90]
    3f2c:	sub	w5, w24, w7
    3f30:	sub	w5, w5, w6
    3f34:	add	w7, w6, w7
    3f38:	and	x6, x8, #0xffff
    3f3c:	str	w7, [x27, #644]
    3f40:	lsl	w5, w1, w5
    3f44:	orr	w2, w5, w2
    3f48:	str	w2, [x27, #640]
    3f4c:	cmp	w7, #0x7
    3f50:	ldrb	w6, [x4, x6]
    3f54:	ldr	w1, [x3, x8, lsl #2]
    3f58:	b.le	3f98 <BZ2_compressBlock+0x3dc8>
    3f5c:	ldr	w8, [x27, #116]
    3f60:	ldr	x7, [x27, #80]
    3f64:	lsr	w5, w2, #24
    3f68:	strb	w5, [x7, w8, sxtw]
    3f6c:	ldr	w5, [x27, #640]
    3f70:	ldr	w8, [x27, #116]
    3f74:	ldr	w7, [x27, #644]
    3f78:	lsl	w2, w5, #8
    3f7c:	add	w8, w8, #0x1
    3f80:	sub	w7, w7, #0x8
    3f84:	str	w8, [x27, #116]
    3f88:	str	w2, [x27, #640]
    3f8c:	cmp	w7, #0x7
    3f90:	str	w7, [x27, #644]
    3f94:	b.gt	3f60 <BZ2_compressBlock+0x3d90>
    3f98:	ldrh	w8, [x0, #92]
    3f9c:	sub	w5, w24, w7
    3fa0:	sub	w5, w5, w6
    3fa4:	add	w7, w6, w7
    3fa8:	and	x6, x8, #0xffff
    3fac:	str	w7, [x27, #644]
    3fb0:	lsl	w5, w1, w5
    3fb4:	orr	w5, w5, w2
    3fb8:	str	w5, [x27, #640]
    3fbc:	cmp	w7, #0x7
    3fc0:	ldrb	w6, [x4, x6]
    3fc4:	ldr	w1, [x3, x8, lsl #2]
    3fc8:	b.le	4008 <BZ2_compressBlock+0x3e38>
    3fcc:	ldr	w2, [x27, #116]
    3fd0:	ldr	x7, [x27, #80]
    3fd4:	lsr	w5, w5, #24
    3fd8:	strb	w5, [x7, w2, sxtw]
    3fdc:	ldr	w5, [x27, #640]
    3fe0:	ldr	w2, [x27, #116]
    3fe4:	ldr	w7, [x27, #644]
    3fe8:	lsl	w5, w5, #8
    3fec:	add	w2, w2, #0x1
    3ff0:	sub	w7, w7, #0x8
    3ff4:	str	w2, [x27, #116]
    3ff8:	str	w5, [x27, #640]
    3ffc:	cmp	w7, #0x7
    4000:	str	w7, [x27, #644]
    4004:	b.gt	3fd0 <BZ2_compressBlock+0x3e00>
    4008:	ldrh	w8, [x0, #94]
    400c:	sub	w2, w24, w7
    4010:	sub	w2, w2, w6
    4014:	add	w7, w6, w7
    4018:	and	x6, x8, #0xffff
    401c:	str	w7, [x27, #644]
    4020:	lsl	w2, w1, w2
    4024:	orr	w5, w2, w5
    4028:	str	w5, [x27, #640]
    402c:	cmp	w7, #0x7
    4030:	ldrb	w6, [x4, x6]
    4034:	ldr	w1, [x3, x8, lsl #2]
    4038:	b.le	4078 <BZ2_compressBlock+0x3ea8>
    403c:	ldr	w8, [x27, #116]
    4040:	ldr	x7, [x27, #80]
    4044:	lsr	w2, w5, #24
    4048:	strb	w2, [x7, w8, sxtw]
    404c:	ldr	w2, [x27, #640]
    4050:	ldr	w8, [x27, #116]
    4054:	ldr	w7, [x27, #644]
    4058:	lsl	w5, w2, #8
    405c:	add	w8, w8, #0x1
    4060:	sub	w7, w7, #0x8
    4064:	str	w8, [x27, #116]
    4068:	str	w5, [x27, #640]
    406c:	cmp	w7, #0x7
    4070:	str	w7, [x27, #644]
    4074:	b.gt	4040 <BZ2_compressBlock+0x3e70>
    4078:	ldrh	w8, [x0, #96]
    407c:	sub	w2, w24, w7
    4080:	sub	w2, w2, w6
    4084:	add	w7, w6, w7
    4088:	and	x6, x8, #0xffff
    408c:	str	w7, [x27, #644]
    4090:	lsl	w2, w1, w2
    4094:	orr	w2, w2, w5
    4098:	str	w2, [x27, #640]
    409c:	cmp	w7, #0x7
    40a0:	ldrb	w6, [x4, x6]
    40a4:	ldr	w1, [x3, x8, lsl #2]
    40a8:	b.le	40e8 <BZ2_compressBlock+0x3f18>
    40ac:	ldr	w8, [x27, #116]
    40b0:	ldr	x5, [x27, #80]
    40b4:	lsr	w2, w2, #24
    40b8:	strb	w2, [x5, w8, sxtw]
    40bc:	ldr	w2, [x27, #640]
    40c0:	ldr	w8, [x27, #116]
    40c4:	ldr	w5, [x27, #644]
    40c8:	lsl	w2, w2, #8
    40cc:	add	w8, w8, #0x1
    40d0:	sub	w7, w5, #0x8
    40d4:	str	w8, [x27, #116]
    40d8:	str	w2, [x27, #640]
    40dc:	cmp	w7, #0x7
    40e0:	str	w7, [x27, #644]
    40e4:	b.gt	40b0 <BZ2_compressBlock+0x3ee0>
    40e8:	ldrh	w8, [x0, #98]
    40ec:	sub	w0, w24, w7
    40f0:	sub	w0, w0, w6
    40f4:	add	w5, w6, w7
    40f8:	and	x6, x8, #0xffff
    40fc:	str	w5, [x27, #644]
    4100:	lsl	w0, w1, w0
    4104:	orr	w0, w0, w2
    4108:	str	w0, [x27, #640]
    410c:	cmp	w5, #0x7
    4110:	ldrb	w4, [x4, x6]
    4114:	ldr	w3, [x3, x8, lsl #2]
    4118:	b.le	4158 <BZ2_compressBlock+0x3f88>
    411c:	ldr	w1, [x27, #116]
    4120:	ldr	x2, [x27, #80]
    4124:	lsr	w0, w0, #24
    4128:	strb	w0, [x2, w1, sxtw]
    412c:	ldr	w0, [x27, #640]
    4130:	ldr	w1, [x27, #116]
    4134:	ldr	w5, [x27, #644]
    4138:	lsl	w0, w0, #8
    413c:	add	w1, w1, #0x1
    4140:	sub	w5, w5, #0x8
    4144:	str	w1, [x27, #116]
    4148:	str	w0, [x27, #640]
    414c:	cmp	w5, #0x7
    4150:	str	w5, [x27, #644]
    4154:	b.gt	4120 <BZ2_compressBlock+0x3f50>
    4158:	sub	w1, w24, w5
    415c:	add	w5, w4, w5
    4160:	sub	w1, w1, w4
    4164:	str	w5, [x27, #644]
    4168:	lsl	w1, w3, w1
    416c:	orr	w0, w1, w0
    4170:	str	w0, [x27, #640]
    4174:	b	2b28 <BZ2_compressBlock+0x2958>
    4178:	ldr	w0, [sp, #544]
    417c:	cmp	w0, #0x0
    4180:	b.le	fbc <BZ2_compressBlock+0xdec>
    4184:	ldr	x0, [sp, #592]
    4188:	mov	x7, #0xc9b8                	// #51640
    418c:	ldr	x4, [sp, #648]
    4190:	add	x1, x21, x7
    4194:	nop
    4198:	ldrb	w3, [x0]
    419c:	add	x0, x0, #0x1
    41a0:	ldrb	w2, [x0, #257]
    41a4:	add	x1, x1, #0x10
    41a8:	orr	w2, w3, w2, lsl #16
    41ac:	stur	w2, [x1, #-16]
    41b0:	ldrb	w3, [x0, #515]
    41b4:	ldrb	w2, [x0, #773]
    41b8:	orr	w2, w3, w2, lsl #16
    41bc:	stur	w2, [x1, #-12]
    41c0:	ldrb	w2, [x0, #1289]
    41c4:	ldrb	w3, [x0, #1031]
    41c8:	cmp	x4, x0
    41cc:	orr	w2, w3, w2, lsl #16
    41d0:	stur	w2, [x1, #-8]
    41d4:	b.ne	4198 <BZ2_compressBlock+0x3fc8>  // b.any
    41d8:	ldr	w0, [x21, #668]
    41dc:	str	w0, [sp, #384]
    41e0:	cmp	w0, #0x0
    41e4:	b.gt	fcc <BZ2_compressBlock+0xdfc>
    41e8:	ldr	w1, [sp, #540]
    41ec:	mov	w19, #0x0                   	// #0
    41f0:	ldr	w0, [x21, #656]
    41f4:	add	w1, w1, #0x1
    41f8:	str	wzr, [sp, #388]
    41fc:	str	w1, [sp, #540]
    4200:	cmp	w0, #0x2
    4204:	b.le	22a0 <BZ2_compressBlock+0x20d0>
    4208:	ldr	w0, [sp, #388]
    420c:	adrp	x20, 0 <stderr>
    4210:	ldr	w2, [sp, #540]
    4214:	adrp	x1, 0 <bsPutUInt32>
    4218:	add	x1, x1, #0x0
    421c:	adrp	x23, 0 <bsPutUInt32>
    4220:	asr	w3, w0, #3
    4224:	add	x24, x20, #0x0
    4228:	ldr	x0, [x20]
    422c:	add	x23, x23, #0x0
    4230:	ldr	x22, [sp, #400]
    4234:	bl	0 <fprintf>
    4238:	ldr	x25, [sp, #560]
    423c:	nop
    4240:	mov	x1, x23
    4244:	ldr	w2, [x22], #4
    4248:	ldr	x0, [x24]
    424c:	bl	0 <fprintf>
    4250:	cmp	x25, x22
    4254:	b.ne	4240 <BZ2_compressBlock+0x4070>  // b.any
    4258:	ldr	x1, [x20]
    425c:	mov	w0, #0xa                   	// #10
    4260:	bl	0 <fputc>
    4264:	b	22a0 <BZ2_compressBlock+0x20d0>
    4268:	adrp	x0, 0 <stderr>
    426c:	ldr	w2, [x27, #652]
    4270:	adrp	x1, 0 <bsPutUInt32>
    4274:	add	x1, x1, #0x0
    4278:	ldr	x0, [x0]
    427c:	bl	0 <fprintf>
    4280:	b	ca4 <BZ2_compressBlock+0xad4>
    4284:	mov	w0, #0x3                   	// #3
    4288:	str	w0, [sp, #132]
    428c:	str	w0, [sp, #644]
    4290:	b	d0c <BZ2_compressBlock+0xb3c>
    4294:	adrp	x0, 0 <stderr>
    4298:	sub	w2, w3, w7
    429c:	adrp	x1, 0 <bsPutUInt32>
    42a0:	add	x1, x1, #0x0
    42a4:	ldr	x0, [x0]
    42a8:	bl	0 <fprintf>
    42ac:	ldr	w3, [x27, #116]
    42b0:	b	2644 <BZ2_compressBlock+0x2474>
    42b4:	adrp	x0, 0 <stderr>
    42b8:	sub	w2, w22, w1
    42bc:	adrp	x1, 0 <bsPutUInt32>
    42c0:	add	x1, x1, #0x0
    42c4:	ldr	x0, [x0]
    42c8:	bl	0 <fprintf>
    42cc:	ldr	w22, [x27, #116]
    42d0:	b	2a0c <BZ2_compressBlock+0x283c>
    42d4:	adrp	x0, 0 <stderr>
    42d8:	sub	w2, w1, w3
    42dc:	adrp	x1, 0 <bsPutUInt32>
    42e0:	add	x1, x1, #0x0
    42e4:	ldr	x0, [x0]
    42e8:	bl	0 <fprintf>
    42ec:	ldr	w1, [x27, #116]
    42f0:	b	2808 <BZ2_compressBlock+0x2638>
    42f4:	adrp	x0, 0 <stderr>
    42f8:	ldr	w4, [sp, #548]
    42fc:	mov	w3, w20
    4300:	adrp	x1, 0 <bsPutUInt32>
    4304:	ldr	x0, [x0]
    4308:	add	x1, x1, #0x0
    430c:	bl	0 <fprintf>
    4310:	ldr	w20, [x27, #668]
    4314:	ldr	w0, [x27, #124]
    4318:	str	w0, [sp, #548]
    431c:	b	77c <BZ2_compressBlock+0x5ac>
    4320:	adrp	x0, 0 <stderr>
    4324:	ldr	w2, [x27, #116]
    4328:	adrp	x1, 0 <bsPutUInt32>
    432c:	add	x1, x1, #0x0
    4330:	ldr	x0, [x0]
    4334:	sub	w2, w2, w22
    4338:	bl	0 <fprintf>
    433c:	b	834 <BZ2_compressBlock+0x664>
    4340:	ldr	x0, [sp, #120]
    4344:	add	x5, x0, w20, sxtw #1
    4348:	add	w20, w20, #0x1
    434c:	b	758 <BZ2_compressBlock+0x588>
    4350:	mov	w0, #0xbb9                 	// #3001
    4354:	bl	0 <BZ2_bz__AssertH__fail>
    4358:	ldr	w20, [x27, #668]
    435c:	b	7dc <BZ2_compressBlock+0x60c>
    4360:	mov	w0, #0x4                   	// #4
    4364:	str	w0, [sp, #132]
    4368:	str	w0, [sp, #644]
    436c:	b	d0c <BZ2_compressBlock+0xb3c>
    4370:	mov	w0, #0x6                   	// #6
    4374:	str	w0, [sp, #132]
    4378:	str	w0, [sp, #644]
    437c:	b	d0c <BZ2_compressBlock+0xb3c>
    4380:	add	w3, w4, #0x8
    4384:	b	938 <BZ2_compressBlock+0x768>
    4388:	add	w2, w3, #0x8
    438c:	b	9a0 <BZ2_compressBlock+0x7d0>
    4390:	add	w2, w3, #0x8
    4394:	b	378 <BZ2_compressBlock+0x1a8>
    4398:	add	w2, w0, #0x8
    439c:	b	2b8 <BZ2_compressBlock+0xe8>
    43a0:	add	w2, w3, #0x8
    43a4:	b	438 <BZ2_compressBlock+0x268>
    43a8:	add	w3, w2, #0x8
    43ac:	b	498 <BZ2_compressBlock+0x2c8>
    43b0:	ldr	w0, [x27, #640]
    43b4:	b	510 <BZ2_compressBlock+0x340>
    43b8:	add	w3, w2, #0x8
    43bc:	b	318 <BZ2_compressBlock+0x148>
    43c0:	add	x0, sp, #0x2b0
    43c4:	str	x0, [sp, #400]
    43c8:	b	620 <BZ2_compressBlock+0x450>
    43cc:	mov	w20, #0x1                   	// #1
    43d0:	ldr	x5, [sp, #120]
    43d4:	b	758 <BZ2_compressBlock+0x588>
    43d8:	add	w3, w2, #0x8
    43dc:	b	3d8 <BZ2_compressBlock+0x208>
    43e0:	add	w2, w3, #0x8
    43e4:	b	b50 <BZ2_compressBlock+0x980>
    43e8:	add	w3, w2, #0x8
    43ec:	b	af0 <BZ2_compressBlock+0x920>
    43f0:	add	w3, w2, #0x8
    43f4:	b	bb0 <BZ2_compressBlock+0x9e0>
    43f8:	add	w2, w3, #0x8
    43fc:	b	c10 <BZ2_compressBlock+0xa40>
    4400:	add	w3, w2, #0x8
    4404:	b	c70 <BZ2_compressBlock+0xaa0>
    4408:	add	w2, w0, #0x8
    440c:	b	a90 <BZ2_compressBlock+0x8c0>

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	stp	x29, x30, [sp, #-240]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x19, x0
      10:	add	x20, x0, #0xc, lsl #12
      14:	stp	x21, x22, [sp, #32]
      18:	add	x21, x0, #0x8, lsl #12
      1c:	ldr	w0, [x0, #8]
      20:	stp	x23, x24, [sp, #48]
      24:	cmp	w0, #0xa
      28:	stp	x25, x26, [sp, #64]
      2c:	stp	x27, x28, [sp, #80]
      30:	ldr	x5, [x19]
      34:	b.eq	1b8 <BZ2_decompress+0x1b8>  // b.none
      38:	ldr	w1, [x20, #14936]
      3c:	sub	w0, w0, #0xb
      40:	str	w1, [sp, #120]
      44:	cmp	w0, #0x27
      48:	ldr	w1, [x20, #14944]
      4c:	str	w1, [sp, #136]
      50:	ldr	w1, [x20, #14960]
      54:	str	w1, [sp, #124]
      58:	ldr	w1, [x20, #14964]
      5c:	str	w1, [sp, #116]
      60:	ldr	x1, [x21, #31368]
      64:	str	x1, [sp, #104]
      68:	ldr	w3, [x20, #14884]
      6c:	ldr	w25, [x20, #14888]
      70:	ldr	w27, [x20, #14892]
      74:	ldr	w6, [x20, #14896]
      78:	ldr	w7, [x20, #14900]
      7c:	ldr	w8, [x20, #14904]
      80:	ldr	w18, [x20, #14908]
      84:	ldr	w4, [x20, #14912]
      88:	ldr	w28, [x20, #14916]
      8c:	ldr	w13, [x20, #14920]
      90:	ldr	w14, [x20, #14924]
      94:	ldr	w26, [x20, #14928]
      98:	ldr	w12, [x20, #14932]
      9c:	ldr	w9, [x20, #14940]
      a0:	ldr	w22, [x20, #14948]
      a4:	ldr	w23, [x20, #14952]
      a8:	ldr	w24, [x20, #14956]
      ac:	ldr	x11, [x21, #31352]
      b0:	ldr	x10, [x21, #31360]
      b4:	b.ls	1a0 <BZ2_decompress+0x1a0>  // b.plast
      b8:	mov	w0, #0xfa1                 	// #4001
      bc:	str	w3, [sp, #128]
      c0:	stp	w6, w7, [sp, #140]
      c4:	stp	w8, w18, [sp, #148]
      c8:	stp	w4, w13, [sp, #156]
      cc:	str	w14, [sp, #168]
      d0:	str	w12, [sp, #176]
      d4:	str	w9, [sp, #184]
      d8:	stp	x11, x10, [sp, #192]
      dc:	bl	0 <BZ2_bz__AssertH__fail>
      e0:	mov	w0, #0xfa2                 	// #4002
      e4:	bl	0 <BZ2_bz__AssertH__fail>
      e8:	mov	w0, #0x0                   	// #0
      ec:	ldp	x11, x10, [sp, #192]
      f0:	ldr	w3, [sp, #128]
      f4:	ldp	w6, w7, [sp, #140]
      f8:	ldp	w8, w18, [sp, #148]
      fc:	ldp	w4, w13, [sp, #156]
     100:	ldr	w14, [sp, #168]
     104:	ldr	w12, [sp, #176]
     108:	ldr	w9, [sp, #184]
     10c:	nop
     110:	ldr	w1, [sp, #120]
     114:	str	w1, [x20, #14936]
     118:	ldr	w1, [sp, #136]
     11c:	str	w1, [x20, #14944]
     120:	ldr	w1, [sp, #124]
     124:	str	w1, [x20, #14960]
     128:	ldr	w1, [sp, #116]
     12c:	str	w3, [x20, #14884]
     130:	str	w25, [x20, #14888]
     134:	str	w27, [x20, #14892]
     138:	str	w6, [x20, #14896]
     13c:	str	w7, [x20, #14900]
     140:	str	w8, [x20, #14904]
     144:	str	w18, [x20, #14908]
     148:	str	w4, [x20, #14912]
     14c:	str	w28, [x20, #14916]
     150:	str	w13, [x20, #14920]
     154:	str	w14, [x20, #14924]
     158:	str	w26, [x20, #14928]
     15c:	str	w12, [x20, #14932]
     160:	str	w9, [x20, #14940]
     164:	str	w22, [x20, #14948]
     168:	str	w23, [x20, #14952]
     16c:	str	w24, [x20, #14956]
     170:	str	w1, [x20, #14964]
     174:	ldr	x1, [sp, #104]
     178:	str	x11, [x21, #31352]
     17c:	str	x10, [x21, #31360]
     180:	str	x1, [x21, #31368]
     184:	ldp	x19, x20, [sp, #16]
     188:	ldp	x21, x22, [sp, #32]
     18c:	ldp	x23, x24, [sp, #48]
     190:	ldp	x25, x26, [sp, #64]
     194:	ldp	x27, x28, [sp, #80]
     198:	ldp	x29, x30, [sp], #240
     19c:	ret
     1a0:	adrp	x1, 0 <BZ2_decompress>
     1a4:	add	x1, x1, #0x0
     1a8:	ldrh	w0, [x1, w0, uxtw #1]
     1ac:	adr	x1, 1b8 <BZ2_decompress+0x1b8>
     1b0:	add	x0, x1, w0, sxth #2
     1b4:	br	x0
     1b8:	str	wzr, [x20, #14884]
     1bc:	str	xzr, [x21, #31272]
     1c0:	str	xzr, [x21, #31280]
     1c4:	str	xzr, [x21, #31288]
     1c8:	str	xzr, [x21, #31296]
     1cc:	str	xzr, [x21, #31304]
     1d0:	str	xzr, [x21, #31312]
     1d4:	str	xzr, [x21, #31320]
     1d8:	str	xzr, [x21, #31328]
     1dc:	str	xzr, [x21, #31336]
     1e0:	str	xzr, [x21, #31344]
     1e4:	str	xzr, [x21, #31352]
     1e8:	str	xzr, [x21, #31360]
     1ec:	str	xzr, [x21, #31368]
     1f0:	str	w0, [x19, #8]
     1f4:	ldr	w0, [x19, #36]
     1f8:	b	234 <BZ2_decompress+0x234>
     1fc:	ldr	w1, [x5, #8]
     200:	cbz	w1, 1e8c <BZ2_decompress+0x1e8c>
     204:	ldr	x3, [x5]
     208:	add	w0, w0, #0x8
     20c:	ldr	w4, [x19, #32]
     210:	sub	w1, w1, #0x1
     214:	ldr	w2, [x5, #12]
     218:	ldrb	w6, [x3], #1
     21c:	add	w2, w2, #0x1
     220:	orr	w4, w6, w4, lsl #8
     224:	stp	w4, w0, [x19, #32]
     228:	str	x3, [x5]
     22c:	stp	w1, w2, [x5, #8]
     230:	cbz	w2, 1f20 <BZ2_decompress+0x1f20>
     234:	cmp	w0, #0x7
     238:	b.le	1fc <BZ2_decompress+0x1fc>
     23c:	ldr	w1, [x19, #32]
     240:	sub	w0, w0, #0x8
     244:	str	w0, [x19, #36]
     248:	lsr	w1, w1, w0
     24c:	and	w1, w1, #0xff
     250:	cmp	w1, #0x42
     254:	b.ne	1f30 <BZ2_decompress+0x1f30>  // b.any
     258:	mov	x10, #0x0                   	// #0
     25c:	mov	x11, #0x0                   	// #0
     260:	mov	w24, #0x0                   	// #0
     264:	mov	w23, #0x0                   	// #0
     268:	mov	w22, #0x0                   	// #0
     26c:	mov	w9, #0x0                   	// #0
     270:	mov	w12, #0x0                   	// #0
     274:	mov	w26, #0x0                   	// #0
     278:	mov	w14, #0x0                   	// #0
     27c:	mov	w13, #0x0                   	// #0
     280:	mov	w28, #0x0                   	// #0
     284:	mov	w4, #0x0                   	// #0
     288:	mov	w18, #0x0                   	// #0
     28c:	mov	w8, #0x0                   	// #0
     290:	mov	w7, #0x0                   	// #0
     294:	mov	w6, #0x0                   	// #0
     298:	mov	w27, #0x0                   	// #0
     29c:	mov	w25, #0x0                   	// #0
     2a0:	mov	w3, #0x0                   	// #0
     2a4:	str	xzr, [sp, #104]
     2a8:	stp	wzr, wzr, [sp, #116]
     2ac:	str	wzr, [sp, #124]
     2b0:	str	wzr, [sp, #136]
     2b4:	b	1abc <BZ2_decompress+0x1abc>
     2b8:	lsl	w1, w1, #2
     2bc:	mov	w2, #0x1                   	// #1
     2c0:	str	w3, [sp, #128]
     2c4:	stp	w6, w7, [sp, #140]
     2c8:	stp	w8, w18, [sp, #148]
     2cc:	stp	w4, w13, [sp, #156]
     2d0:	str	w14, [sp, #168]
     2d4:	str	w12, [sp, #176]
     2d8:	str	w9, [sp, #184]
     2dc:	stp	x11, x10, [sp, #192]
     2e0:	blr	x15
     2e4:	ldr	w3, [sp, #128]
     2e8:	str	x0, [x19, #3152]
     2ec:	ldp	w6, w7, [sp, #140]
     2f0:	ldp	w8, w18, [sp, #148]
     2f4:	ldp	w4, w13, [sp, #156]
     2f8:	ldr	w14, [sp, #168]
     2fc:	ldr	w12, [sp, #176]
     300:	ldr	w9, [sp, #184]
     304:	ldp	x11, x10, [sp, #192]
     308:	cbz	x0, 1a2c <BZ2_decompress+0x1a2c>
     30c:	mov	w1, #0xe                   	// #14
     310:	ldr	w0, [x19, #36]
     314:	str	w1, [x19, #8]
     318:	b	358 <BZ2_decompress+0x358>
     31c:	ldr	x1, [x19]
     320:	ldr	w2, [x1, #8]
     324:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     328:	ldr	x16, [x1]
     32c:	sub	w15, w2, #0x1
     330:	ldr	w5, [x19, #32]
     334:	add	w0, w0, #0x8
     338:	ldr	w2, [x1, #12]
     33c:	ldrb	w17, [x16], #1
     340:	add	w2, w2, #0x1
     344:	orr	w5, w17, w5, lsl #8
     348:	stp	w5, w0, [x19, #32]
     34c:	str	x16, [x1]
     350:	stp	w15, w2, [x1, #8]
     354:	cbz	w2, 1d8c <BZ2_decompress+0x1d8c>
     358:	cmp	w0, #0x7
     35c:	b.le	31c <BZ2_decompress+0x31c>
     360:	ldr	w1, [x19, #32]
     364:	sub	w0, w0, #0x8
     368:	str	w0, [x19, #36]
     36c:	lsr	w1, w1, w0
     370:	and	w1, w1, #0xff
     374:	cmp	w1, #0x17
     378:	b.eq	1714 <BZ2_decompress+0x1714>  // b.none
     37c:	cmp	w1, #0x31
     380:	b.ne	1378 <BZ2_decompress+0x1378>  // b.any
     384:	mov	w1, #0xf                   	// #15
     388:	str	w1, [x19, #8]
     38c:	b	3cc <BZ2_decompress+0x3cc>
     390:	ldr	x1, [x19]
     394:	ldr	w2, [x1, #8]
     398:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     39c:	ldr	x16, [x1]
     3a0:	sub	w15, w2, #0x1
     3a4:	ldr	w5, [x19, #32]
     3a8:	add	w0, w0, #0x8
     3ac:	ldr	w2, [x1, #12]
     3b0:	ldrb	w17, [x16], #1
     3b4:	add	w2, w2, #0x1
     3b8:	orr	w5, w17, w5, lsl #8
     3bc:	stp	w5, w0, [x19, #32]
     3c0:	str	x16, [x1]
     3c4:	stp	w15, w2, [x1, #8]
     3c8:	cbz	w2, 1dfc <BZ2_decompress+0x1dfc>
     3cc:	cmp	w0, #0x7
     3d0:	b.le	390 <BZ2_decompress+0x390>
     3d4:	ldr	w1, [x19, #32]
     3d8:	sub	w0, w0, #0x8
     3dc:	str	w0, [x19, #36]
     3e0:	lsr	w1, w1, w0
     3e4:	and	w1, w1, #0xff
     3e8:	cmp	w1, #0x41
     3ec:	b.ne	1378 <BZ2_decompress+0x1378>  // b.any
     3f0:	mov	w1, #0x10                  	// #16
     3f4:	str	w1, [x19, #8]
     3f8:	b	438 <BZ2_decompress+0x438>
     3fc:	ldr	x1, [x19]
     400:	ldr	w2, [x1, #8]
     404:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     408:	ldr	x16, [x1]
     40c:	sub	w15, w2, #0x1
     410:	ldr	w5, [x19, #32]
     414:	add	w0, w0, #0x8
     418:	ldr	w2, [x1, #12]
     41c:	ldrb	w17, [x16], #1
     420:	add	w2, w2, #0x1
     424:	orr	w5, w17, w5, lsl #8
     428:	stp	w5, w0, [x19, #32]
     42c:	str	x16, [x1]
     430:	stp	w15, w2, [x1, #8]
     434:	cbz	w2, 1dac <BZ2_decompress+0x1dac>
     438:	cmp	w0, #0x7
     43c:	b.le	3fc <BZ2_decompress+0x3fc>
     440:	ldr	w1, [x19, #32]
     444:	sub	w0, w0, #0x8
     448:	str	w0, [x19, #36]
     44c:	lsr	w1, w1, w0
     450:	and	w1, w1, #0xff
     454:	cmp	w1, #0x59
     458:	b.ne	1378 <BZ2_decompress+0x1378>  // b.any
     45c:	mov	w1, #0x11                  	// #17
     460:	str	w1, [x19, #8]
     464:	b	4a4 <BZ2_decompress+0x4a4>
     468:	ldr	x1, [x19]
     46c:	ldr	w2, [x1, #8]
     470:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     474:	ldr	x16, [x1]
     478:	sub	w15, w2, #0x1
     47c:	ldr	w5, [x19, #32]
     480:	add	w0, w0, #0x8
     484:	ldr	w2, [x1, #12]
     488:	ldrb	w17, [x16], #1
     48c:	add	w2, w2, #0x1
     490:	orr	w5, w17, w5, lsl #8
     494:	stp	w5, w0, [x19, #32]
     498:	str	x16, [x1]
     49c:	stp	w15, w2, [x1, #8]
     4a0:	cbz	w2, 1d9c <BZ2_decompress+0x1d9c>
     4a4:	cmp	w0, #0x7
     4a8:	b.le	468 <BZ2_decompress+0x468>
     4ac:	ldr	w1, [x19, #32]
     4b0:	sub	w0, w0, #0x8
     4b4:	str	w0, [x19, #36]
     4b8:	lsr	w1, w1, w0
     4bc:	and	w1, w1, #0xff
     4c0:	cmp	w1, #0x26
     4c4:	b.ne	1378 <BZ2_decompress+0x1378>  // b.any
     4c8:	mov	w1, #0x12                  	// #18
     4cc:	str	w1, [x19, #8]
     4d0:	b	510 <BZ2_decompress+0x510>
     4d4:	ldr	x1, [x19]
     4d8:	ldr	w2, [x1, #8]
     4dc:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     4e0:	ldr	x16, [x1]
     4e4:	sub	w15, w2, #0x1
     4e8:	ldr	w5, [x19, #32]
     4ec:	add	w0, w0, #0x8
     4f0:	ldr	w2, [x1, #12]
     4f4:	ldrb	w17, [x16], #1
     4f8:	add	w2, w2, #0x1
     4fc:	orr	w5, w17, w5, lsl #8
     500:	stp	w5, w0, [x19, #32]
     504:	str	x16, [x1]
     508:	stp	w15, w2, [x1, #8]
     50c:	cbz	w2, 1d4c <BZ2_decompress+0x1d4c>
     510:	cmp	w0, #0x7
     514:	b.le	4d4 <BZ2_decompress+0x4d4>
     518:	ldr	w1, [x19, #32]
     51c:	sub	w0, w0, #0x8
     520:	str	w0, [x19, #36]
     524:	lsr	w1, w1, w0
     528:	and	w1, w1, #0xff
     52c:	cmp	w1, #0x53
     530:	b.ne	1378 <BZ2_decompress+0x1378>  // b.any
     534:	mov	w1, #0x13                  	// #19
     538:	str	w1, [x19, #8]
     53c:	b	57c <BZ2_decompress+0x57c>
     540:	ldr	x1, [x19]
     544:	ldr	w2, [x1, #8]
     548:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     54c:	ldr	x16, [x1]
     550:	sub	w15, w2, #0x1
     554:	ldr	w5, [x19, #32]
     558:	add	w0, w0, #0x8
     55c:	ldr	w2, [x1, #12]
     560:	ldrb	w17, [x16], #1
     564:	add	w2, w2, #0x1
     568:	orr	w5, w17, w5, lsl #8
     56c:	stp	w5, w0, [x19, #32]
     570:	str	x16, [x1]
     574:	stp	w15, w2, [x1, #8]
     578:	cbz	w2, 1d5c <BZ2_decompress+0x1d5c>
     57c:	cmp	w0, #0x7
     580:	b.le	540 <BZ2_decompress+0x540>
     584:	ldr	w1, [x19, #32]
     588:	sub	w0, w0, #0x8
     58c:	str	w0, [x19, #36]
     590:	lsr	w1, w1, w0
     594:	and	w1, w1, #0xff
     598:	cmp	w1, #0x59
     59c:	b.ne	1378 <BZ2_decompress+0x1378>  // b.any
     5a0:	ldp	w2, w1, [x19, #48]
     5a4:	add	w2, w2, #0x1
     5a8:	str	w2, [x19, #48]
     5ac:	cmp	w1, #0x1
     5b0:	b.gt	1bc8 <BZ2_decompress+0x1bc8>
     5b4:	str	wzr, [x19, #3176]
     5b8:	b	1a48 <BZ2_decompress+0x1a48>
     5bc:	ldr	w0, [x19, #36]
     5c0:	mov	w1, #0x23                  	// #35
     5c4:	str	w1, [x19, #8]
     5c8:	b	608 <BZ2_decompress+0x608>
     5cc:	ldr	x1, [x19]
     5d0:	ldr	w2, [x1, #8]
     5d4:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     5d8:	ldr	x16, [x1]
     5dc:	sub	w15, w2, #0x1
     5e0:	ldr	w5, [x19, #32]
     5e4:	add	w0, w0, #0x8
     5e8:	ldr	w2, [x1, #12]
     5ec:	ldrb	w17, [x16], #1
     5f0:	add	w2, w2, #0x1
     5f4:	orr	w5, w17, w5, lsl #8
     5f8:	stp	w5, w0, [x19, #32]
     5fc:	str	x16, [x1]
     600:	stp	w15, w2, [x1, #8]
     604:	cbz	w2, 1ddc <BZ2_decompress+0x1ddc>
     608:	cmp	w0, #0x0
     60c:	b.le	5cc <BZ2_decompress+0x5cc>
     610:	ldr	w1, [x19, #32]
     614:	sub	w0, w0, #0x1
     618:	str	w0, [x19, #36]
     61c:	sub	w2, w9, #0x1
     620:	lsr	w0, w1, w0
     624:	tst	x0, #0x1
     628:	csinc	w9, w2, w9, ne  // ne = any
     62c:	sub	w0, w9, #0x1
     630:	cmp	w0, #0x13
     634:	b.hi	1378 <BZ2_decompress+0x1378>  // b.pmore
     638:	mov	w1, #0x22                  	// #34
     63c:	ldr	w0, [x19, #36]
     640:	str	w1, [x19, #8]
     644:	b	684 <BZ2_decompress+0x684>
     648:	ldr	x1, [x19]
     64c:	ldr	w2, [x1, #8]
     650:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     654:	ldr	x16, [x1]
     658:	sub	w15, w2, #0x1
     65c:	ldr	w5, [x19, #32]
     660:	add	w0, w0, #0x8
     664:	ldr	w2, [x1, #12]
     668:	ldrb	w17, [x16], #1
     66c:	add	w2, w2, #0x1
     670:	orr	w5, w17, w5, lsl #8
     674:	stp	w5, w0, [x19, #32]
     678:	str	x16, [x1]
     67c:	stp	w15, w2, [x1, #8]
     680:	cbz	w2, 1e1c <BZ2_decompress+0x1e1c>
     684:	cmp	w0, #0x0
     688:	b.le	648 <BZ2_decompress+0x648>
     68c:	ldr	w1, [x19, #32]
     690:	sub	w0, w0, #0x1
     694:	str	w0, [x19, #36]
     698:	lsr	w1, w1, w0
     69c:	tbnz	w1, #0, 5c0 <BZ2_decompress+0x5c0>
     6a0:	sbfiz	x0, x27, #7, #32
     6a4:	add	x0, x0, w27, sxtw
     6a8:	add	x0, x19, x0, lsl #1
     6ac:	add	x0, x0, w3, sxtw
     6b0:	add	w3, w3, #0x1
     6b4:	add	x0, x0, #0xa, lsl #12
     6b8:	strb	w9, [x0, #2928]
     6bc:	cmp	w3, w6
     6c0:	b.lt	62c <BZ2_decompress+0x62c>  // b.tstop
     6c4:	add	w27, w27, #0x1
     6c8:	cmp	w27, w7
     6cc:	b.lt	adc <BZ2_decompress+0xadc>  // b.tstop
     6d0:	cmp	w7, #0x0
     6d4:	b.le	21ec <BZ2_decompress+0x21ec>
     6d8:	mov	x0, #0xb17c                	// #45436
     6dc:	mov	x26, #0x0                   	// #0
     6e0:	add	x28, x19, x0
     6e4:	mov	x1, #0xab70                	// #43888
     6e8:	mov	x2, #0xfa0c                	// #64012
     6ec:	add	x27, x19, x1
     6f0:	add	x0, x19, x2
     6f4:	stp	w9, w22, [sp, #148]
     6f8:	mov	x22, x26
     6fc:	mov	w26, w7
     700:	stp	x11, x19, [sp, #160]
     704:	mov	w19, w6
     708:	stp	x21, x20, [sp, #176]
     70c:	mov	x21, x28
     710:	mov	x20, x27
     714:	mov	x28, x10
     718:	mov	x27, x0
     71c:	str	w8, [sp, #128]
     720:	stp	w13, w12, [sp, #140]
     724:	str	w23, [sp, #156]
     728:	cmp	w19, #0x0
     72c:	mov	x2, #0x0                   	// #0
     730:	mov	w5, #0x0                   	// #0
     734:	mov	w23, #0x20                  	// #32
     738:	b.le	760 <BZ2_decompress+0x760>
     73c:	nop
     740:	ldrb	w0, [x20, x2]
     744:	add	x2, x2, #0x1
     748:	cmp	w5, w0
     74c:	csel	w5, w5, w0, ge  // ge = tcont
     750:	cmp	w23, w0
     754:	csel	w23, w23, w0, le
     758:	cmp	w19, w2
     75c:	b.gt	740 <BZ2_decompress+0x740>
     760:	mov	x18, #0x3060                	// #12384
     764:	mov	x30, #0x1830                	// #6192
     768:	mov	x3, x20
     76c:	add	x2, x21, x18
     770:	add	x1, x21, x30
     774:	mov	x0, x21
     778:	mov	w6, w19
     77c:	mov	w4, w23
     780:	bl	0 <BZ2_hbCreateDecodeTables>
     784:	str	w23, [x27, x22, lsl #2]
     788:	add	x22, x22, #0x1
     78c:	add	x20, x20, #0x102
     790:	cmp	w26, w22
     794:	add	x21, x21, #0x408
     798:	b.gt	728 <BZ2_decompress+0x728>
     79c:	mov	w6, w19
     7a0:	ldr	w8, [sp, #128]
     7a4:	ldp	x11, x19, [sp, #160]
     7a8:	mov	w7, w26
     7ac:	ldp	x21, x20, [sp, #176]
     7b0:	mov	x10, x28
     7b4:	ldp	w13, w12, [sp, #140]
     7b8:	mov	w27, w26
     7bc:	ldp	w9, w22, [sp, #148]
     7c0:	ldr	w23, [sp, #156]
     7c4:	ldr	w3, [x19, #40]
     7c8:	mov	w2, #0x86a0                	// #34464
     7cc:	movk	w2, #0x1, lsl #16
     7d0:	ldr	w4, [x19, #3192]
     7d4:	add	x0, x19, #0x44
     7d8:	add	x1, x19, #0x444
     7dc:	add	w18, w4, #0x1
     7e0:	mul	w14, w3, w2
     7e4:	nop
     7e8:	str	wzr, [x0], #4
     7ec:	cmp	x1, x0
     7f0:	b.ne	7e8 <BZ2_decompress+0x7e8>  // b.any
     7f4:	mov	x15, #0x1ec8                	// #7880
     7f8:	mov	x16, #0x1e8b                	// #7819
     7fc:	mov	x17, #0x1e7b                	// #7803
     800:	add	x15, x19, x15
     804:	add	x3, x19, x16
     808:	add	x4, x19, x17
     80c:	mov	w5, #0xff0                 	// #4080
     810:	add	w2, w5, #0xf
     814:	mov	x0, x3
     818:	and	w2, w2, #0xff
     81c:	nop
     820:	sub	w1, w0, w3
     824:	add	w1, w2, w1
     828:	strb	w1, [x0], #-1
     82c:	cmp	x4, x0
     830:	b.ne	820 <BZ2_decompress+0x820>  // b.any
     834:	str	w5, [x15], #-4
     838:	sub	w5, w5, #0x10
     83c:	cmp	w5, #0xef0
     840:	sub	x3, x3, #0x10
     844:	sub	x4, x4, #0x10
     848:	b.ne	810 <BZ2_decompress+0x810>  // b.any
     84c:	cmp	w8, #0x0
     850:	b.le	21d4 <BZ2_decompress+0x21d4>
     854:	add	x0, x19, #0x1, lsl #12
     858:	mov	x22, #0xfa00                	// #64000
     85c:	mov	x30, #0xb17c                	// #45436
     860:	mov	x5, #0xc9ac                	// #51628
     864:	mov	w26, #0x0                   	// #0
     868:	mov	w28, #0x31                  	// #49
     86c:	ldrb	w2, [x0, #3788]
     870:	mov	w4, #0x0                   	// #0
     874:	mov	w3, #0x100                 	// #256
     878:	str	w2, [sp, #124]
     87c:	mov	x0, x2
     880:	add	x1, x19, w2, sxtw #2
     884:	ubfiz	x0, x0, #7, #8
     888:	add	x1, x1, x22
     88c:	add	x0, x0, w2, uxtb
     890:	lsl	x0, x0, #3
     894:	ldr	w22, [x1, #12]
     898:	add	x11, x0, x30
     89c:	mov	x1, #0xe1dc                	// #57820
     8a0:	add	x1, x0, x1
     8a4:	add	x0, x0, x5
     8a8:	add	x11, x19, x11
     8ac:	add	x10, x19, x0
     8b0:	add	x1, x19, x1
     8b4:	str	x1, [sp, #104]
     8b8:	str	w22, [sp, #116]
     8bc:	nop
     8c0:	mov	w0, #0x24                  	// #36
     8c4:	ldr	w5, [x19, #36]
     8c8:	str	w0, [x19, #8]
     8cc:	b	90c <BZ2_decompress+0x90c>
     8d0:	ldr	x0, [x19]
     8d4:	ldr	w1, [x0, #8]
     8d8:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
     8dc:	ldr	x16, [x0]
     8e0:	sub	w15, w1, #0x1
     8e4:	ldr	w2, [x19, #32]
     8e8:	add	w5, w5, #0x8
     8ec:	ldr	w1, [x0, #12]
     8f0:	ldrb	w17, [x16], #1
     8f4:	add	w1, w1, #0x1
     8f8:	orr	w2, w17, w2, lsl #8
     8fc:	stp	w2, w5, [x19, #32]
     900:	str	x16, [x0]
     904:	stp	w15, w1, [x0, #8]
     908:	cbz	w1, 1e7c <BZ2_decompress+0x1e7c>
     90c:	cmp	w22, w5
     910:	b.gt	8d0 <BZ2_decompress+0x8d0>
     914:	ldr	w23, [x19, #32]
     918:	sub	w5, w5, w22
     91c:	mov	w0, #0x1                   	// #1
     920:	str	w5, [x19, #36]
     924:	lsl	w0, w0, w22
     928:	sub	w0, w0, #0x1
     92c:	lsr	w5, w23, w5
     930:	and	w23, w5, w0
     934:	b	950 <BZ2_decompress+0x950>
     938:	ldr	w24, [x19, #32]
     93c:	sub	w5, w5, #0x1
     940:	str	w5, [x19, #36]
     944:	lsr	w5, w24, w5
     948:	and	w24, w5, #0x1
     94c:	orr	w23, w24, w23, lsl #1
     950:	cmp	w22, #0x14
     954:	b.gt	1378 <BZ2_decompress+0x1378>
     958:	sxtw	x0, w22
     95c:	ldr	w1, [x11, x0, lsl #2]
     960:	cmp	w1, w23
     964:	b.ge	b4c <BZ2_decompress+0xb4c>  // b.tcont
     968:	add	w22, w22, #0x1
     96c:	mov	w0, #0x25                  	// #37
     970:	ldr	w5, [x19, #36]
     974:	str	w0, [x19, #8]
     978:	b	9b8 <BZ2_decompress+0x9b8>
     97c:	ldr	x0, [x19]
     980:	ldr	w1, [x0, #8]
     984:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
     988:	ldr	x16, [x0]
     98c:	sub	w15, w1, #0x1
     990:	ldr	w2, [x19, #32]
     994:	add	w5, w5, #0x8
     998:	ldr	w1, [x0, #12]
     99c:	ldrb	w17, [x16], #1
     9a0:	add	w1, w1, #0x1
     9a4:	orr	w2, w17, w2, lsl #8
     9a8:	stp	w2, w5, [x19, #32]
     9ac:	str	x16, [x0]
     9b0:	stp	w15, w1, [x0, #8]
     9b4:	cbz	w1, 1e2c <BZ2_decompress+0x1e2c>
     9b8:	cmp	w5, #0x0
     9bc:	b.le	97c <BZ2_decompress+0x97c>
     9c0:	b	938 <BZ2_decompress+0x938>
     9c4:	ldr	w24, [x19, #32]
     9c8:	sub	w5, w5, #0x1
     9cc:	str	w5, [x19, #36]
     9d0:	lsr	w5, w24, w5
     9d4:	and	w24, w5, #0x1
     9d8:	orr	w23, w24, w23, lsl #1
     9dc:	cmp	w22, #0x14
     9e0:	b.gt	1378 <BZ2_decompress+0x1378>
     9e4:	sxtw	x0, w22
     9e8:	ldr	w1, [x11, x0, lsl #2]
     9ec:	cmp	w1, w23
     9f0:	b.ge	1fcc <BZ2_decompress+0x1fcc>  // b.tcont
     9f4:	add	w22, w22, #0x1
     9f8:	mov	w0, #0x27                  	// #39
     9fc:	ldr	w5, [x19, #36]
     a00:	str	w0, [x19, #8]
     a04:	b	a44 <BZ2_decompress+0xa44>
     a08:	ldr	x0, [x19]
     a0c:	ldr	w1, [x0, #8]
     a10:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
     a14:	ldr	x16, [x0]
     a18:	sub	w15, w1, #0x1
     a1c:	ldr	w2, [x19, #32]
     a20:	add	w5, w5, #0x8
     a24:	ldr	w1, [x0, #12]
     a28:	ldrb	w17, [x16], #1
     a2c:	add	w1, w1, #0x1
     a30:	orr	w2, w17, w2, lsl #8
     a34:	stp	w2, w5, [x19, #32]
     a38:	str	x16, [x0]
     a3c:	stp	w15, w1, [x0, #8]
     a40:	cbz	w1, 1e3c <BZ2_decompress+0x1e3c>
     a44:	cmp	w5, #0x0
     a48:	b.le	a08 <BZ2_decompress+0xa08>
     a4c:	b	9c4 <BZ2_decompress+0x9c4>
     a50:	ldr	w24, [x19, #32]
     a54:	sub	w5, w5, #0x1
     a58:	str	w5, [x19, #36]
     a5c:	lsr	w5, w24, w5
     a60:	and	w24, w5, #0x1
     a64:	orr	w23, w24, w23, lsl #1
     a68:	cmp	w22, #0x14
     a6c:	b.gt	1378 <BZ2_decompress+0x1378>
     a70:	sxtw	x0, w22
     a74:	ldr	w1, [x11, x0, lsl #2]
     a78:	cmp	w1, w23
     a7c:	b.ge	1fac <BZ2_decompress+0x1fac>  // b.tcont
     a80:	add	w22, w22, #0x1
     a84:	mov	w0, #0x29                  	// #41
     a88:	ldr	w5, [x19, #36]
     a8c:	str	w0, [x19, #8]
     a90:	b	ad0 <BZ2_decompress+0xad0>
     a94:	ldr	x0, [x19]
     a98:	ldr	w1, [x0, #8]
     a9c:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
     aa0:	ldr	x16, [x0]
     aa4:	sub	w15, w1, #0x1
     aa8:	ldr	w2, [x19, #32]
     aac:	add	w5, w5, #0x8
     ab0:	ldr	w1, [x0, #12]
     ab4:	ldrb	w17, [x16], #1
     ab8:	add	w1, w1, #0x1
     abc:	orr	w2, w17, w2, lsl #8
     ac0:	stp	w2, w5, [x19, #32]
     ac4:	str	x16, [x0]
     ac8:	stp	w15, w1, [x0, #8]
     acc:	cbz	w1, 1e4c <BZ2_decompress+0x1e4c>
     ad0:	cmp	w5, #0x0
     ad4:	b.le	a94 <BZ2_decompress+0xa94>
     ad8:	b	a50 <BZ2_decompress+0xa50>
     adc:	mov	w0, #0x21                  	// #33
     ae0:	ldr	w5, [x19, #36]
     ae4:	str	w0, [x19, #8]
     ae8:	b	b28 <BZ2_decompress+0xb28>
     aec:	ldr	x0, [x19]
     af0:	ldr	w1, [x0, #8]
     af4:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
     af8:	ldr	x16, [x0]
     afc:	sub	w15, w1, #0x1
     b00:	ldr	w2, [x19, #32]
     b04:	add	w5, w5, #0x8
     b08:	ldr	w1, [x0, #12]
     b0c:	ldrb	w17, [x16], #1
     b10:	add	w1, w1, #0x1
     b14:	orr	w2, w17, w2, lsl #8
     b18:	stp	w2, w5, [x19, #32]
     b1c:	str	x16, [x0]
     b20:	stp	w15, w1, [x0, #8]
     b24:	cbz	w1, 1e6c <BZ2_decompress+0x1e6c>
     b28:	cmp	w5, #0x4
     b2c:	b.le	aec <BZ2_decompress+0xaec>
     b30:	ldr	w9, [x19, #32]
     b34:	sub	w5, w5, #0x5
     b38:	mov	w3, #0x0                   	// #0
     b3c:	str	w5, [x19, #36]
     b40:	lsr	w5, w9, w5
     b44:	and	w9, w5, #0x1f
     b48:	b	6bc <BZ2_decompress+0x6bc>
     b4c:	ldr	w0, [x10, x0, lsl #2]
     b50:	sub	w0, w23, w0
     b54:	cmp	w0, #0x101
     b58:	b.hi	1378 <BZ2_decompress+0x1378>  // b.pmore
     b5c:	ldr	x1, [sp, #104]
     b60:	ldr	w13, [x1, w0, sxtw #2]
     b64:	cmp	w18, w13
     b68:	b.eq	213c <BZ2_decompress+0x213c>  // b.none
     b6c:	cmp	w13, #0x1
     b70:	b.ls	1380 <BZ2_decompress+0x1380>  // b.plast
     b74:	cmp	w14, w26
     b78:	b.le	1378 <BZ2_decompress+0x1378>
     b7c:	sub	w2, w13, #0x1
     b80:	cmp	w2, #0xf
     b84:	mov	w0, w2
     b88:	b.hi	2208 <BZ2_decompress+0x2208>  // b.pmore
     b8c:	ldr	w1, [x19, #7820]
     b90:	cmp	w2, #0x3
     b94:	add	w2, w1, w2
     b98:	add	x2, x19, x2
     b9c:	ldrb	w30, [x2, #3724]
     ba0:	b.ls	c1c <BZ2_decompress+0xc1c>  // b.plast
     ba4:	sub	w0, w1, #0x2
     ba8:	mov	w17, #0x1                   	// #1
     bac:	add	w0, w0, w13
     bb0:	sub	w17, w17, w1
     bb4:	add	w2, w0, #0x1
     bb8:	add	x15, x19, w0, sxtw
     bbc:	sub	w5, w0, #0x1
     bc0:	add	x2, x19, w2, sxtw
     bc4:	ldrb	w16, [x15, #3724]
     bc8:	add	x5, x19, w5, sxtw
     bcc:	strb	w16, [x2, #3724]
     bd0:	sub	w2, w0, #0x2
     bd4:	ldrb	w16, [x5, #3724]
     bd8:	add	x2, x19, w2, sxtw
     bdc:	strb	w16, [x15, #3724]
     be0:	sub	w15, w0, #0x3
     be4:	sub	w0, w0, #0x4
     be8:	ldrb	w16, [x2, #3724]
     bec:	add	x15, x19, w15, sxtw
     bf0:	strb	w16, [x5, #3724]
     bf4:	add	w5, w17, w0
     bf8:	cmp	w5, #0x3
     bfc:	ldrb	w5, [x15, #3724]
     c00:	strb	w5, [x2, #3724]
     c04:	b.hi	bb4 <BZ2_decompress+0xbb4>  // b.pmore
     c08:	sub	w0, w13, #0x5
     c0c:	mov	w5, #0xfffffffc            	// #-4
     c10:	mov	w2, w0
     c14:	lsr	w0, w0, #2
     c18:	madd	w0, w0, w5, w2
     c1c:	cbz	w0, c44 <BZ2_decompress+0xc44>
     c20:	add	w0, w1, w0
     c24:	sub	w2, w0, #0x1
     c28:	add	x5, x19, w0, uxtw
     c2c:	mov	w0, w2
     c30:	add	x2, x19, w2, uxtw
     c34:	cmp	w1, w0
     c38:	ldrb	w2, [x2, #3724]
     c3c:	strb	w2, [x5, #3724]
     c40:	b.ne	c24 <BZ2_decompress+0xc24>  // b.any
     c44:	add	x1, x19, w1, sxtw
     c48:	strb	w30, [x1, #3724]
     c4c:	add	x1, x19, w30, sxtw
     c50:	ldrb	w0, [x1, #3468]
     c54:	ldrb	w2, [x1, #3468]
     c58:	add	x0, x19, x0, lsl #2
     c5c:	ldr	w1, [x0, #68]
     c60:	add	w1, w1, #0x1
     c64:	str	w1, [x0, #68]
     c68:	ldrb	w0, [x19, #44]
     c6c:	cbz	w0, 21fc <BZ2_decompress+0x21fc>
     c70:	ldr	x0, [x19, #3160]
     c74:	strh	w2, [x0, w26, sxtw #1]
     c78:	add	w26, w26, #0x1
     c7c:	cbnz	w28, cec <BZ2_decompress+0xcec>
     c80:	add	w4, w4, #0x1
     c84:	cmp	w8, w4
     c88:	b.le	1378 <BZ2_decompress+0x1378>
     c8c:	add	x1, x19, w4, sxtw
     c90:	mov	x10, #0x3e80                	// #16000
     c94:	add	x1, x1, #0x1, lsl #12
     c98:	mov	x5, #0x408                 	// #1032
     c9c:	mov	x11, #0xb17c                	// #45436
     ca0:	mov	x15, #0xe1dc                	// #57820
     ca4:	mov	x16, #0xc9ac                	// #51628
     ca8:	mov	w28, #0x32                  	// #50
     cac:	ldrb	w2, [x1, #3788]
     cb0:	ldrb	w1, [x1, #3788]
     cb4:	mov	x0, x2
     cb8:	add	x2, x2, x10
     cbc:	str	w1, [sp, #124]
     cc0:	add	x1, x19, x2, lsl #2
     cc4:	mul	x0, x0, x5
     cc8:	add	x11, x0, x11
     ccc:	add	x2, x0, x15
     cd0:	add	x0, x0, x16
     cd4:	ldr	w1, [x1, #12]
     cd8:	add	x11, x19, x11
     cdc:	add	x10, x19, x0
     ce0:	str	w1, [sp, #116]
     ce4:	add	x1, x19, x2
     ce8:	str	x1, [sp, #104]
     cec:	ldr	w22, [sp, #116]
     cf0:	sub	w28, w28, #0x1
     cf4:	nop
     cf8:	mov	w0, #0x28                  	// #40
     cfc:	ldr	w5, [x19, #36]
     d00:	str	w0, [x19, #8]
     d04:	b	d44 <BZ2_decompress+0xd44>
     d08:	ldr	x0, [x19]
     d0c:	ldr	w1, [x0, #8]
     d10:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
     d14:	ldr	x16, [x0]
     d18:	sub	w15, w1, #0x1
     d1c:	ldr	w2, [x19, #32]
     d20:	add	w5, w5, #0x8
     d24:	ldr	w1, [x0, #12]
     d28:	ldrb	w17, [x16], #1
     d2c:	add	w1, w1, #0x1
     d30:	orr	w2, w17, w2, lsl #8
     d34:	stp	w2, w5, [x19, #32]
     d38:	str	x16, [x0]
     d3c:	stp	w15, w1, [x0, #8]
     d40:	cbz	w1, 1f00 <BZ2_decompress+0x1f00>
     d44:	cmp	w22, w5
     d48:	b.gt	d08 <BZ2_decompress+0xd08>
     d4c:	ldr	w23, [x19, #32]
     d50:	sub	w5, w5, w22
     d54:	mov	w0, #0x1                   	// #1
     d58:	str	w5, [x19, #36]
     d5c:	lsl	w0, w0, w22
     d60:	sub	w0, w0, #0x1
     d64:	lsr	w5, w23, w5
     d68:	and	w23, w5, w0
     d6c:	b	a68 <BZ2_decompress+0xa68>
     d70:	ldr	w0, [x19, #36]
     d74:	mov	w1, #0x15                  	// #21
     d78:	str	w1, [x19, #8]
     d7c:	b	dbc <BZ2_decompress+0xdbc>
     d80:	ldr	x1, [x19]
     d84:	ldr	w2, [x1, #8]
     d88:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     d8c:	ldr	x16, [x1]
     d90:	sub	w15, w2, #0x1
     d94:	ldr	w5, [x19, #32]
     d98:	add	w0, w0, #0x8
     d9c:	ldr	w2, [x1, #12]
     da0:	ldrb	w17, [x16], #1
     da4:	add	w2, w2, #0x1
     da8:	orr	w5, w17, w5, lsl #8
     dac:	stp	w5, w0, [x19, #32]
     db0:	str	x16, [x1]
     db4:	stp	w15, w2, [x1, #8]
     db8:	cbz	w2, 1cec <BZ2_decompress+0x1cec>
     dbc:	cmp	w0, #0x7
     dc0:	b.le	d80 <BZ2_decompress+0xd80>
     dc4:	ldr	w1, [x19, #32]
     dc8:	sub	w0, w0, #0x8
     dcc:	ldr	w2, [x19, #3176]
     dd0:	str	w0, [x19, #36]
     dd4:	lsr	w1, w1, w0
     dd8:	bfi	w1, w2, #8, #24
     ddc:	str	w1, [x19, #3176]
     de0:	mov	w1, #0x16                  	// #22
     de4:	str	w1, [x19, #8]
     de8:	b	e28 <BZ2_decompress+0xe28>
     dec:	ldr	x1, [x19]
     df0:	ldr	w2, [x1, #8]
     df4:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     df8:	ldr	x16, [x1]
     dfc:	sub	w15, w2, #0x1
     e00:	ldr	w5, [x19, #32]
     e04:	add	w0, w0, #0x8
     e08:	ldr	w2, [x1, #12]
     e0c:	ldrb	w17, [x16], #1
     e10:	add	w2, w2, #0x1
     e14:	orr	w5, w17, w5, lsl #8
     e18:	stp	w5, w0, [x19, #32]
     e1c:	str	x16, [x1]
     e20:	stp	w15, w2, [x1, #8]
     e24:	cbz	w2, 1cdc <BZ2_decompress+0x1cdc>
     e28:	cmp	w0, #0x7
     e2c:	b.le	dec <BZ2_decompress+0xdec>
     e30:	ldr	w1, [x19, #32]
     e34:	sub	w0, w0, #0x8
     e38:	ldr	w2, [x19, #3176]
     e3c:	str	w0, [x19, #36]
     e40:	lsr	w1, w1, w0
     e44:	bfi	w1, w2, #8, #24
     e48:	str	w1, [x19, #3176]
     e4c:	mov	w1, #0x17                  	// #23
     e50:	str	w1, [x19, #8]
     e54:	b	e94 <BZ2_decompress+0xe94>
     e58:	ldr	x1, [x19]
     e5c:	ldr	w2, [x1, #8]
     e60:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     e64:	ldr	x16, [x1]
     e68:	sub	w15, w2, #0x1
     e6c:	ldr	w5, [x19, #32]
     e70:	add	w0, w0, #0x8
     e74:	ldr	w2, [x1, #12]
     e78:	ldrb	w17, [x16], #1
     e7c:	add	w2, w2, #0x1
     e80:	orr	w5, w17, w5, lsl #8
     e84:	stp	w5, w0, [x19, #32]
     e88:	str	x16, [x1]
     e8c:	stp	w15, w2, [x1, #8]
     e90:	cbz	w2, 1cac <BZ2_decompress+0x1cac>
     e94:	cmp	w0, #0x7
     e98:	b.le	e58 <BZ2_decompress+0xe58>
     e9c:	ldr	w1, [x19, #32]
     ea0:	sub	w0, w0, #0x8
     ea4:	ldr	w2, [x19, #3176]
     ea8:	str	w0, [x19, #36]
     eac:	lsr	w1, w1, w0
     eb0:	bfi	w1, w2, #8, #24
     eb4:	str	w1, [x19, #3176]
     eb8:	mov	w1, #0x18                  	// #24
     ebc:	str	w1, [x19, #8]
     ec0:	b	f00 <BZ2_decompress+0xf00>
     ec4:	ldr	x1, [x19]
     ec8:	ldr	w2, [x1, #8]
     ecc:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     ed0:	ldr	x16, [x1]
     ed4:	sub	w15, w2, #0x1
     ed8:	ldr	w5, [x19, #32]
     edc:	add	w0, w0, #0x8
     ee0:	ldr	w2, [x1, #12]
     ee4:	ldrb	w17, [x16], #1
     ee8:	add	w2, w2, #0x1
     eec:	orr	w5, w17, w5, lsl #8
     ef0:	stp	w5, w0, [x19, #32]
     ef4:	str	x16, [x1]
     ef8:	stp	w15, w2, [x1, #8]
     efc:	cbz	w2, 1c8c <BZ2_decompress+0x1c8c>
     f00:	cmp	w0, #0x0
     f04:	b.le	ec4 <BZ2_decompress+0xec4>
     f08:	ldr	w1, [x19, #32]
     f0c:	sub	w0, w0, #0x1
     f10:	str	w0, [x19, #36]
     f14:	str	wzr, [x19, #56]
     f18:	lsr	w1, w1, w0
     f1c:	and	w1, w1, #0x1
     f20:	strb	w1, [x19, #20]
     f24:	mov	w1, #0x19                  	// #25
     f28:	str	w1, [x19, #8]
     f2c:	b	f6c <BZ2_decompress+0xf6c>
     f30:	ldr	x1, [x19]
     f34:	ldr	w2, [x1, #8]
     f38:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     f3c:	ldr	x16, [x1]
     f40:	sub	w15, w2, #0x1
     f44:	ldr	w5, [x19, #32]
     f48:	add	w0, w0, #0x8
     f4c:	ldr	w2, [x1, #12]
     f50:	ldrb	w17, [x16], #1
     f54:	add	w2, w2, #0x1
     f58:	orr	w5, w17, w5, lsl #8
     f5c:	stp	w5, w0, [x19, #32]
     f60:	str	x16, [x1]
     f64:	stp	w15, w2, [x1, #8]
     f68:	cbz	w2, 1c7c <BZ2_decompress+0x1c7c>
     f6c:	cmp	w0, #0x7
     f70:	b.le	f30 <BZ2_decompress+0xf30>
     f74:	ldr	w1, [x19, #32]
     f78:	sub	w0, w0, #0x8
     f7c:	ldr	w2, [x19, #56]
     f80:	str	w0, [x19, #36]
     f84:	lsr	w1, w1, w0
     f88:	bfi	w1, w2, #8, #24
     f8c:	str	w1, [x19, #56]
     f90:	mov	w1, #0x1a                  	// #26
     f94:	str	w1, [x19, #8]
     f98:	b	fd8 <BZ2_decompress+0xfd8>
     f9c:	ldr	x1, [x19]
     fa0:	ldr	w2, [x1, #8]
     fa4:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
     fa8:	ldr	x16, [x1]
     fac:	sub	w15, w2, #0x1
     fb0:	ldr	w5, [x19, #32]
     fb4:	add	w0, w0, #0x8
     fb8:	ldr	w2, [x1, #12]
     fbc:	ldrb	w17, [x16], #1
     fc0:	add	w2, w2, #0x1
     fc4:	orr	w5, w17, w5, lsl #8
     fc8:	stp	w5, w0, [x19, #32]
     fcc:	str	x16, [x1]
     fd0:	stp	w15, w2, [x1, #8]
     fd4:	cbz	w2, 1c6c <BZ2_decompress+0x1c6c>
     fd8:	cmp	w0, #0x7
     fdc:	b.le	f9c <BZ2_decompress+0xf9c>
     fe0:	ldr	w1, [x19, #32]
     fe4:	sub	w0, w0, #0x8
     fe8:	ldr	w2, [x19, #56]
     fec:	str	w0, [x19, #36]
     ff0:	lsr	w1, w1, w0
     ff4:	bfi	w1, w2, #8, #24
     ff8:	str	w1, [x19, #56]
     ffc:	mov	w1, #0x1b                  	// #27
    1000:	str	w1, [x19, #8]
    1004:	b	1044 <BZ2_decompress+0x1044>
    1008:	ldr	x1, [x19]
    100c:	ldr	w2, [x1, #8]
    1010:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    1014:	ldr	x16, [x1]
    1018:	sub	w15, w2, #0x1
    101c:	ldr	w5, [x19, #32]
    1020:	add	w0, w0, #0x8
    1024:	ldr	w2, [x1, #12]
    1028:	ldrb	w17, [x16], #1
    102c:	add	w2, w2, #0x1
    1030:	orr	w5, w17, w5, lsl #8
    1034:	stp	w5, w0, [x19, #32]
    1038:	str	x16, [x1]
    103c:	stp	w15, w2, [x1, #8]
    1040:	cbz	w2, 1c5c <BZ2_decompress+0x1c5c>
    1044:	cmp	w0, #0x7
    1048:	b.le	1008 <BZ2_decompress+0x1008>
    104c:	ldr	w1, [x19, #32]
    1050:	sub	w0, w0, #0x8
    1054:	ldr	w2, [x19, #56]
    1058:	str	w0, [x19, #36]
    105c:	lsr	w1, w1, w0
    1060:	bfi	w1, w2, #8, #24
    1064:	str	w1, [x19, #56]
    1068:	tbnz	w1, #31, 1378 <BZ2_decompress+0x1378>
    106c:	ldr	w2, [x19, #40]
    1070:	mov	w5, #0x86a0                	// #34464
    1074:	movk	w5, #0x1, lsl #16
    1078:	mul	w2, w2, w5
    107c:	add	w2, w2, #0xa
    1080:	cmp	w1, w2
    1084:	b.gt	1378 <BZ2_decompress+0x1378>
    1088:	mov	w3, #0x0                   	// #0
    108c:	sxtw	x30, w3
    1090:	add	x17, x19, #0xd7c
    1094:	mov	w1, #0x1c                  	// #28
    1098:	str	w1, [x19, #8]
    109c:	str	w30, [sp, #128]
    10a0:	b	10e0 <BZ2_decompress+0x10e0>
    10a4:	ldr	x1, [x19]
    10a8:	ldr	w2, [x1, #8]
    10ac:	cbz	w2, 1c30 <BZ2_decompress+0x1c30>
    10b0:	ldr	x15, [x1]
    10b4:	add	w0, w0, #0x8
    10b8:	ldr	w3, [x19, #32]
    10bc:	sub	w2, w2, #0x1
    10c0:	ldr	w5, [x1, #12]
    10c4:	ldrb	w16, [x15], #1
    10c8:	add	w5, w5, #0x1
    10cc:	orr	w16, w16, w3, lsl #8
    10d0:	stp	w16, w0, [x19, #32]
    10d4:	str	x15, [x1]
    10d8:	stp	w2, w5, [x1, #8]
    10dc:	cbz	w5, 1c3c <BZ2_decompress+0x1c3c>
    10e0:	cmp	w0, #0x0
    10e4:	b.le	10a4 <BZ2_decompress+0x10a4>
    10e8:	ldr	w1, [x19, #32]
    10ec:	sub	w0, w0, #0x1
    10f0:	str	w0, [x19, #36]
    10f4:	lsr	w1, w1, w0
    10f8:	and	w1, w1, #0x1
    10fc:	strb	w1, [x17, x30]
    1100:	add	x30, x30, #0x1
    1104:	cmp	w30, #0xf
    1108:	b.le	1094 <BZ2_decompress+0x1094>
    110c:	add	x0, x19, #0xc7c
    1110:	strb	wzr, [x0], #1
    1114:	cmp	x17, x0
    1118:	b.ne	1110 <BZ2_decompress+0x1110>  // b.any
    111c:	mov	w3, #0x0                   	// #0
    1120:	add	x0, x19, w3, sxtw
    1124:	ldrb	w0, [x0, #3452]
    1128:	cbz	w0, 11c0 <BZ2_decompress+0x11c0>
    112c:	mov	w25, #0x0                   	// #0
    1130:	ldr	w5, [x19, #36]
    1134:	lsl	w0, w3, #4
    1138:	mov	w17, #0x1d                  	// #29
    113c:	str	w0, [sp, #128]
    1140:	str	w17, [x19, #8]
    1144:	b	1184 <BZ2_decompress+0x1184>
    1148:	ldr	x0, [x19]
    114c:	ldr	w1, [x0, #8]
    1150:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
    1154:	ldr	x15, [x0]
    1158:	add	w5, w5, #0x8
    115c:	ldr	w30, [x19, #32]
    1160:	sub	w1, w1, #0x1
    1164:	ldr	w2, [x0, #12]
    1168:	ldrb	w16, [x15], #1
    116c:	add	w2, w2, #0x1
    1170:	orr	w16, w16, w30, lsl #8
    1174:	stp	w16, w5, [x19, #32]
    1178:	str	x15, [x0]
    117c:	stp	w1, w2, [x0, #8]
    1180:	cbz	w2, 1c9c <BZ2_decompress+0x1c9c>
    1184:	cmp	w5, #0x0
    1188:	b.le	1148 <BZ2_decompress+0x1148>
    118c:	ldr	w0, [x19, #32]
    1190:	sub	w5, w5, #0x1
    1194:	str	w5, [x19, #36]
    1198:	lsr	w0, w0, w5
    119c:	tbz	w0, #0, 11b4 <BZ2_decompress+0x11b4>
    11a0:	ldr	w0, [sp, #128]
    11a4:	mov	w1, #0x1                   	// #1
    11a8:	add	w0, w25, w0
    11ac:	add	x0, x19, w0, sxtw
    11b0:	strb	w1, [x0, #3196]
    11b4:	add	w25, w25, #0x1
    11b8:	cmp	w25, #0xf
    11bc:	b.le	1140 <BZ2_decompress+0x1140>
    11c0:	add	w3, w3, #0x1
    11c4:	cmp	w3, #0xf
    11c8:	b.le	1120 <BZ2_decompress+0x1120>
    11cc:	add	x5, x19, #0xc7c
    11d0:	mov	x0, #0x0                   	// #0
    11d4:	mov	w1, #0x0                   	// #0
    11d8:	str	wzr, [x19, #3192]
    11dc:	nop
    11e0:	ldrb	w2, [x5, x0]
    11e4:	cbz	w2, 11f8 <BZ2_decompress+0x11f8>
    11e8:	add	x2, x19, w1, sxtw
    11ec:	add	w1, w1, #0x1
    11f0:	strb	w0, [x2, #3468]
    11f4:	str	w1, [x19, #3192]
    11f8:	add	x0, x0, #0x1
    11fc:	cmp	x0, #0x100
    1200:	b.ne	11e0 <BZ2_decompress+0x11e0>  // b.any
    1204:	cbz	w1, 1378 <BZ2_decompress+0x1378>
    1208:	add	w6, w1, #0x2
    120c:	nop
    1210:	mov	w1, #0x1e                  	// #30
    1214:	ldr	w0, [x19, #36]
    1218:	str	w1, [x19, #8]
    121c:	b	125c <BZ2_decompress+0x125c>
    1220:	ldr	x1, [x19]
    1224:	ldr	w2, [x1, #8]
    1228:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    122c:	ldr	x16, [x1]
    1230:	sub	w15, w2, #0x1
    1234:	ldr	w5, [x19, #32]
    1238:	add	w0, w0, #0x8
    123c:	ldr	w2, [x1, #12]
    1240:	ldrb	w17, [x16], #1
    1244:	add	w2, w2, #0x1
    1248:	orr	w5, w17, w5, lsl #8
    124c:	stp	w5, w0, [x19, #32]
    1250:	str	x16, [x1]
    1254:	stp	w15, w2, [x1, #8]
    1258:	cbz	w2, 1ef0 <BZ2_decompress+0x1ef0>
    125c:	cmp	w0, #0x2
    1260:	b.le	1220 <BZ2_decompress+0x1220>
    1264:	ldr	w7, [x19, #32]
    1268:	sub	w0, w0, #0x3
    126c:	str	w0, [x19, #36]
    1270:	lsr	w7, w7, w0
    1274:	and	w7, w7, #0x7
    1278:	sub	w1, w7, #0x2
    127c:	cmp	w1, #0x4
    1280:	b.hi	1378 <BZ2_decompress+0x1378>  // b.pmore
    1284:	mov	w1, #0x1f                  	// #31
    1288:	str	w1, [x19, #8]
    128c:	b	12cc <BZ2_decompress+0x12cc>
    1290:	ldr	x1, [x19]
    1294:	ldr	w2, [x1, #8]
    1298:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    129c:	ldr	x16, [x1]
    12a0:	sub	w15, w2, #0x1
    12a4:	ldr	w5, [x19, #32]
    12a8:	add	w0, w0, #0x8
    12ac:	ldr	w2, [x1, #12]
    12b0:	ldrb	w17, [x16], #1
    12b4:	add	w2, w2, #0x1
    12b8:	orr	w5, w17, w5, lsl #8
    12bc:	stp	w5, w0, [x19, #32]
    12c0:	str	x16, [x1]
    12c4:	stp	w15, w2, [x1, #8]
    12c8:	cbz	w2, 1d2c <BZ2_decompress+0x1d2c>
    12cc:	cmp	w0, #0xe
    12d0:	b.le	1290 <BZ2_decompress+0x1290>
    12d4:	ldr	w1, [x19, #32]
    12d8:	sub	w0, w0, #0xf
    12dc:	str	w0, [x19, #36]
    12e0:	lsr	w1, w1, w0
    12e4:	ands	w8, w1, #0x7fff
    12e8:	b.eq	1f94 <BZ2_decompress+0x1f94>  // b.none
    12ec:	mov	w25, #0x0                   	// #0
    12f0:	mov	w3, #0x0                   	// #0
    12f4:	sxtw	x30, w3
    12f8:	mov	x15, #0x651e                	// #25886
    12fc:	add	x1, x19, x15
    1300:	str	x1, [sp, #128]
    1304:	mov	w3, w30
    1308:	mov	w1, #0x20                  	// #32
    130c:	str	w1, [x19, #8]
    1310:	b	1350 <BZ2_decompress+0x1350>
    1314:	ldr	x1, [x19]
    1318:	ldr	w2, [x1, #8]
    131c:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    1320:	ldr	x15, [x1]
    1324:	add	w0, w0, #0x8
    1328:	ldr	w17, [x19, #32]
    132c:	sub	w2, w2, #0x1
    1330:	ldr	w5, [x1, #12]
    1334:	ldrb	w16, [x15], #1
    1338:	add	w5, w5, #0x1
    133c:	orr	w16, w16, w17, lsl #8
    1340:	stp	w16, w0, [x19, #32]
    1344:	str	x15, [x1]
    1348:	stp	w2, w5, [x1, #8]
    134c:	cbz	w5, 1c4c <BZ2_decompress+0x1c4c>
    1350:	cmp	w0, #0x0
    1354:	b.le	1314 <BZ2_decompress+0x1314>
    1358:	ldr	w1, [x19, #32]
    135c:	sub	w0, w0, #0x1
    1360:	str	w0, [x19, #36]
    1364:	lsr	w1, w1, w0
    1368:	tbz	w1, #0, 2070 <BZ2_decompress+0x2070>
    136c:	add	w25, w25, #0x1
    1370:	cmp	w25, w7
    1374:	b.lt	1308 <BZ2_decompress+0x1308>  // b.tstop
    1378:	mov	w0, #0xfffffffc            	// #-4
    137c:	b	110 <BZ2_decompress+0x110>
    1380:	mov	w0, #0x1                   	// #1
    1384:	mov	w12, #0xffffffff            	// #-1
    1388:	str	w0, [sp, #120]
    138c:	ldr	w1, [sp, #120]
    1390:	cmp	w13, #0x0
    1394:	add	w0, w12, w1
    1398:	add	w12, w12, w1, lsl #1
    139c:	lsl	w2, w1, #1
    13a0:	csel	w12, w12, w0, ne  // ne = any
    13a4:	cbnz	w28, 1414 <BZ2_decompress+0x1414>
    13a8:	add	w4, w4, #0x1
    13ac:	cmp	w4, w8
    13b0:	b.ge	238c <BZ2_decompress+0x238c>  // b.tcont
    13b4:	add	x1, x19, w4, sxtw
    13b8:	mov	x10, #0x408                 	// #1032
    13bc:	add	x1, x1, #0x1, lsl #12
    13c0:	mov	x11, #0x3e80                	// #16000
    13c4:	mov	x15, #0xb17c                	// #45436
    13c8:	mov	x16, #0xe1dc                	// #57820
    13cc:	mov	x17, #0xc9ac                	// #51628
    13d0:	mov	w28, #0x32                  	// #50
    13d4:	ldrb	w5, [x1, #3788]
    13d8:	ldrb	w1, [x1, #3788]
    13dc:	mov	x0, x5
    13e0:	add	x5, x5, x11
    13e4:	str	w1, [sp, #124]
    13e8:	add	x1, x19, x5, lsl #2
    13ec:	mul	x0, x0, x10
    13f0:	add	x11, x0, x15
    13f4:	add	x5, x0, x16
    13f8:	add	x0, x0, x17
    13fc:	ldr	w1, [x1, #12]
    1400:	add	x11, x19, x11
    1404:	add	x10, x19, x0
    1408:	str	w1, [sp, #116]
    140c:	add	x1, x19, x5
    1410:	str	x1, [sp, #104]
    1414:	ldr	w22, [sp, #116]
    1418:	sub	w28, w28, #0x1
    141c:	str	w2, [sp, #120]
    1420:	mov	w0, #0x26                  	// #38
    1424:	ldr	w5, [x19, #36]
    1428:	str	w0, [x19, #8]
    142c:	b	146c <BZ2_decompress+0x146c>
    1430:	ldr	x0, [x19]
    1434:	ldr	w1, [x0, #8]
    1438:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
    143c:	ldr	x16, [x0]
    1440:	sub	w15, w1, #0x1
    1444:	ldr	w2, [x19, #32]
    1448:	add	w5, w5, #0x8
    144c:	ldr	w1, [x0, #12]
    1450:	ldrb	w17, [x16], #1
    1454:	add	w1, w1, #0x1
    1458:	orr	w2, w17, w2, lsl #8
    145c:	stp	w2, w5, [x19, #32]
    1460:	str	x16, [x0]
    1464:	stp	w15, w1, [x0, #8]
    1468:	cbz	w1, 1f10 <BZ2_decompress+0x1f10>
    146c:	cmp	w22, w5
    1470:	b.gt	1430 <BZ2_decompress+0x1430>
    1474:	ldr	w23, [x19, #32]
    1478:	sub	w5, w5, w22
    147c:	mov	w0, #0x1                   	// #1
    1480:	str	w5, [x19, #36]
    1484:	lsl	w0, w0, w22
    1488:	sub	w0, w0, #0x1
    148c:	lsr	w5, w23, w5
    1490:	and	w23, w5, w0
    1494:	b	9dc <BZ2_decompress+0x9dc>
    1498:	ldr	w1, [x19, #36]
    149c:	mov	w0, #0x31                  	// #49
    14a0:	str	w0, [x19, #8]
    14a4:	b	14e4 <BZ2_decompress+0x14e4>
    14a8:	ldr	x0, [x19]
    14ac:	ldr	w2, [x0, #8]
    14b0:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    14b4:	ldr	x16, [x0]
    14b8:	sub	w15, w2, #0x1
    14bc:	ldr	w5, [x19, #32]
    14c0:	add	w1, w1, #0x8
    14c4:	ldr	w2, [x0, #12]
    14c8:	ldrb	w17, [x16], #1
    14cc:	add	w2, w2, #0x1
    14d0:	orr	w5, w17, w5, lsl #8
    14d4:	stp	w5, w1, [x19, #32]
    14d8:	str	x16, [x0]
    14dc:	stp	w15, w2, [x0, #8]
    14e0:	cbz	w2, 1ccc <BZ2_decompress+0x1ccc>
    14e4:	cmp	w1, #0x7
    14e8:	b.le	14a8 <BZ2_decompress+0x14a8>
    14ec:	ldr	w0, [x19, #32]
    14f0:	sub	w1, w1, #0x8
    14f4:	ldr	w2, [x19, #3180]
    14f8:	str	w1, [x19, #36]
    14fc:	lsr	w0, w0, w1
    1500:	bfi	w0, w2, #8, #24
    1504:	str	w0, [x19, #3180]
    1508:	mov	w0, #0x32                  	// #50
    150c:	str	w0, [x19, #8]
    1510:	b	1550 <BZ2_decompress+0x1550>
    1514:	ldr	x0, [x19]
    1518:	ldr	w2, [x0, #8]
    151c:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    1520:	ldr	x16, [x0]
    1524:	sub	w15, w2, #0x1
    1528:	ldr	w5, [x19, #32]
    152c:	add	w1, w1, #0x8
    1530:	ldr	w2, [x0, #12]
    1534:	ldrb	w17, [x16], #1
    1538:	add	w2, w2, #0x1
    153c:	orr	w5, w17, w5, lsl #8
    1540:	stp	w5, w1, [x19, #32]
    1544:	str	x16, [x0]
    1548:	stp	w15, w2, [x0, #8]
    154c:	cbz	w2, 1cbc <BZ2_decompress+0x1cbc>
    1550:	cmp	w1, #0x7
    1554:	b.le	1514 <BZ2_decompress+0x1514>
    1558:	ldr	w0, [x19, #32]
    155c:	sub	w1, w1, #0x8
    1560:	ldr	w2, [x19, #3180]
    1564:	str	w1, [x19, #36]
    1568:	lsr	w1, w0, w1
    156c:	mov	w0, #0x1                   	// #1
    1570:	bfi	w1, w2, #8, #24
    1574:	str	w0, [x19, #8]
    1578:	mov	w0, #0x4                   	// #4
    157c:	str	w1, [x19, #3180]
    1580:	b	110 <BZ2_decompress+0x110>
    1584:	ldr	w1, [x19, #36]
    1588:	b	1508 <BZ2_decompress+0x1508>
    158c:	ldr	w0, [x19, #36]
    1590:	b	3f0 <BZ2_decompress+0x3f0>
    1594:	ldr	w0, [x19, #36]
    1598:	b	45c <BZ2_decompress+0x45c>
    159c:	ldr	w0, [x19, #36]
    15a0:	b	384 <BZ2_decompress+0x384>
    15a4:	ldr	w1, [x19, #36]
    15a8:	mov	w0, #0x30                  	// #48
    15ac:	str	w0, [x19, #8]
    15b0:	b	15f0 <BZ2_decompress+0x15f0>
    15b4:	ldr	x0, [x19]
    15b8:	ldr	w2, [x0, #8]
    15bc:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    15c0:	ldr	x16, [x0]
    15c4:	sub	w15, w2, #0x1
    15c8:	ldr	w5, [x19, #32]
    15cc:	add	w1, w1, #0x8
    15d0:	ldr	w2, [x0, #12]
    15d4:	ldrb	w17, [x16], #1
    15d8:	add	w2, w2, #0x1
    15dc:	orr	w5, w17, w5, lsl #8
    15e0:	stp	w5, w1, [x19, #32]
    15e4:	str	x16, [x0]
    15e8:	stp	w15, w2, [x0, #8]
    15ec:	cbz	w2, 1cfc <BZ2_decompress+0x1cfc>
    15f0:	cmp	w1, #0x7
    15f4:	b.le	15b4 <BZ2_decompress+0x15b4>
    15f8:	ldr	w0, [x19, #32]
    15fc:	sub	w1, w1, #0x8
    1600:	ldr	w2, [x19, #3180]
    1604:	str	w1, [x19, #36]
    1608:	lsr	w0, w0, w1
    160c:	bfi	w0, w2, #8, #24
    1610:	str	w0, [x19, #3180]
    1614:	b	149c <BZ2_decompress+0x149c>
    1618:	ldr	w1, [x19, #36]
    161c:	mov	w0, #0x2f                  	// #47
    1620:	str	w0, [x19, #8]
    1624:	b	1664 <BZ2_decompress+0x1664>
    1628:	ldr	x0, [x19]
    162c:	ldr	w2, [x0, #8]
    1630:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    1634:	ldr	x16, [x0]
    1638:	sub	w15, w2, #0x1
    163c:	ldr	w5, [x19, #32]
    1640:	add	w1, w1, #0x8
    1644:	ldr	w2, [x0, #12]
    1648:	ldrb	w17, [x16], #1
    164c:	add	w2, w2, #0x1
    1650:	orr	w5, w17, w5, lsl #8
    1654:	stp	w5, w1, [x19, #32]
    1658:	str	x16, [x0]
    165c:	stp	w15, w2, [x0, #8]
    1660:	cbz	w2, 1d3c <BZ2_decompress+0x1d3c>
    1664:	cmp	w1, #0x7
    1668:	b.le	1628 <BZ2_decompress+0x1628>
    166c:	ldr	w0, [x19, #32]
    1670:	sub	w1, w1, #0x8
    1674:	ldr	w2, [x19, #3180]
    1678:	str	w1, [x19, #36]
    167c:	lsr	w0, w0, w1
    1680:	bfi	w0, w2, #8, #24
    1684:	str	w0, [x19, #3180]
    1688:	b	15a8 <BZ2_decompress+0x15a8>
    168c:	ldr	w1, [x19, #36]
    1690:	mov	w0, #0x2e                  	// #46
    1694:	str	w0, [x19, #8]
    1698:	b	16d8 <BZ2_decompress+0x16d8>
    169c:	ldr	x0, [x19]
    16a0:	ldr	w2, [x0, #8]
    16a4:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    16a8:	ldr	x16, [x0]
    16ac:	sub	w15, w2, #0x1
    16b0:	ldr	w5, [x19, #32]
    16b4:	add	w1, w1, #0x8
    16b8:	ldr	w2, [x0, #12]
    16bc:	ldrb	w17, [x16], #1
    16c0:	add	w2, w2, #0x1
    16c4:	orr	w5, w17, w5, lsl #8
    16c8:	stp	w5, w1, [x19, #32]
    16cc:	str	x16, [x0]
    16d0:	stp	w15, w2, [x0, #8]
    16d4:	cbz	w2, 1d0c <BZ2_decompress+0x1d0c>
    16d8:	cmp	w1, #0x7
    16dc:	b.le	169c <BZ2_decompress+0x169c>
    16e0:	ldr	w2, [x19, #32]
    16e4:	sub	w1, w1, #0x8
    16e8:	str	w1, [x19, #36]
    16ec:	mov	w0, #0xfffffffc            	// #-4
    16f0:	lsr	w2, w2, w1
    16f4:	and	w2, w2, #0xff
    16f8:	cmp	w2, #0x90
    16fc:	b.ne	110 <BZ2_decompress+0x110>  // b.any
    1700:	str	wzr, [x19, #3180]
    1704:	b	161c <BZ2_decompress+0x161c>
    1708:	ldr	w0, [x19, #36]
    170c:	b	12f4 <BZ2_decompress+0x12f4>
    1710:	ldr	w0, [x19, #36]
    1714:	mov	w1, #0x2a                  	// #42
    1718:	str	w1, [x19, #8]
    171c:	b	175c <BZ2_decompress+0x175c>
    1720:	ldr	x1, [x19]
    1724:	ldr	w2, [x1, #8]
    1728:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    172c:	ldr	x16, [x1]
    1730:	sub	w15, w2, #0x1
    1734:	ldr	w5, [x19, #32]
    1738:	add	w0, w0, #0x8
    173c:	ldr	w2, [x1, #12]
    1740:	ldrb	w17, [x16], #1
    1744:	add	w2, w2, #0x1
    1748:	orr	w5, w17, w5, lsl #8
    174c:	stp	w5, w0, [x19, #32]
    1750:	str	x16, [x1]
    1754:	stp	w15, w2, [x1, #8]
    1758:	cbz	w2, 1e5c <BZ2_decompress+0x1e5c>
    175c:	cmp	w0, #0x7
    1760:	b.le	1720 <BZ2_decompress+0x1720>
    1764:	ldr	w2, [x19, #32]
    1768:	sub	w1, w0, #0x8
    176c:	str	w1, [x19, #36]
    1770:	mov	w0, #0xfffffffc            	// #-4
    1774:	lsr	w2, w2, w1
    1778:	and	w2, w2, #0xff
    177c:	cmp	w2, #0x72
    1780:	b.ne	110 <BZ2_decompress+0x110>  // b.any
    1784:	mov	w0, #0x2b                  	// #43
    1788:	str	w0, [x19, #8]
    178c:	b	17cc <BZ2_decompress+0x17cc>
    1790:	ldr	x0, [x19]
    1794:	ldr	w2, [x0, #8]
    1798:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    179c:	ldr	x16, [x0]
    17a0:	sub	w15, w2, #0x1
    17a4:	ldr	w5, [x19, #32]
    17a8:	add	w1, w1, #0x8
    17ac:	ldr	w2, [x0, #12]
    17b0:	ldrb	w17, [x16], #1
    17b4:	add	w2, w2, #0x1
    17b8:	orr	w5, w17, w5, lsl #8
    17bc:	stp	w5, w1, [x19, #32]
    17c0:	str	x16, [x0]
    17c4:	stp	w15, w2, [x0, #8]
    17c8:	cbz	w2, 1dec <BZ2_decompress+0x1dec>
    17cc:	cmp	w1, #0x7
    17d0:	b.le	1790 <BZ2_decompress+0x1790>
    17d4:	ldr	w2, [x19, #32]
    17d8:	sub	w1, w1, #0x8
    17dc:	str	w1, [x19, #36]
    17e0:	mov	w0, #0xfffffffc            	// #-4
    17e4:	lsr	w2, w2, w1
    17e8:	and	w2, w2, #0xff
    17ec:	cmp	w2, #0x45
    17f0:	b.ne	110 <BZ2_decompress+0x110>  // b.any
    17f4:	mov	w0, #0x2c                  	// #44
    17f8:	str	w0, [x19, #8]
    17fc:	b	183c <BZ2_decompress+0x183c>
    1800:	ldr	x0, [x19]
    1804:	ldr	w2, [x0, #8]
    1808:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    180c:	ldr	x16, [x0]
    1810:	sub	w15, w2, #0x1
    1814:	ldr	w5, [x19, #32]
    1818:	add	w1, w1, #0x8
    181c:	ldr	w2, [x0, #12]
    1820:	ldrb	w17, [x16], #1
    1824:	add	w2, w2, #0x1
    1828:	orr	w5, w17, w5, lsl #8
    182c:	stp	w5, w1, [x19, #32]
    1830:	str	x16, [x0]
    1834:	stp	w15, w2, [x0, #8]
    1838:	cbz	w2, 1dbc <BZ2_decompress+0x1dbc>
    183c:	cmp	w1, #0x7
    1840:	b.le	1800 <BZ2_decompress+0x1800>
    1844:	ldr	w2, [x19, #32]
    1848:	sub	w1, w1, #0x8
    184c:	str	w1, [x19, #36]
    1850:	mov	w0, #0xfffffffc            	// #-4
    1854:	lsr	w2, w2, w1
    1858:	and	w2, w2, #0xff
    185c:	cmp	w2, #0x38
    1860:	b.ne	110 <BZ2_decompress+0x110>  // b.any
    1864:	mov	w0, #0x2d                  	// #45
    1868:	str	w0, [x19, #8]
    186c:	b	18ac <BZ2_decompress+0x18ac>
    1870:	ldr	x0, [x19]
    1874:	ldr	w2, [x0, #8]
    1878:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    187c:	ldr	x16, [x0]
    1880:	sub	w15, w2, #0x1
    1884:	ldr	w5, [x19, #32]
    1888:	add	w1, w1, #0x8
    188c:	ldr	w2, [x0, #12]
    1890:	ldrb	w17, [x16], #1
    1894:	add	w2, w2, #0x1
    1898:	orr	w5, w17, w5, lsl #8
    189c:	stp	w5, w1, [x19, #32]
    18a0:	str	x16, [x0]
    18a4:	stp	w15, w2, [x0, #8]
    18a8:	cbz	w2, 1d1c <BZ2_decompress+0x1d1c>
    18ac:	cmp	w1, #0x7
    18b0:	b.le	1870 <BZ2_decompress+0x1870>
    18b4:	ldr	w2, [x19, #32]
    18b8:	sub	w1, w1, #0x8
    18bc:	str	w1, [x19, #36]
    18c0:	mov	w0, #0xfffffffc            	// #-4
    18c4:	lsr	w2, w2, w1
    18c8:	and	w2, w2, #0xff
    18cc:	cmp	w2, #0x50
    18d0:	b.ne	110 <BZ2_decompress+0x110>  // b.any
    18d4:	b	1690 <BZ2_decompress+0x1690>
    18d8:	ldr	w1, [x19, #36]
    18dc:	b	1784 <BZ2_decompress+0x1784>
    18e0:	ldr	w1, [x19, #36]
    18e4:	b	17f4 <BZ2_decompress+0x17f4>
    18e8:	ldr	w1, [x19, #36]
    18ec:	b	1864 <BZ2_decompress+0x1864>
    18f0:	ldr	w0, [x19, #36]
    18f4:	b	de0 <BZ2_decompress+0xde0>
    18f8:	ldr	w0, [x19, #36]
    18fc:	b	e4c <BZ2_decompress+0xe4c>
    1900:	ldr	w0, [x19, #36]
    1904:	b	eb8 <BZ2_decompress+0xeb8>
    1908:	ldr	w0, [x19, #36]
    190c:	mov	w1, #0xd                   	// #13
    1910:	str	w1, [x19, #8]
    1914:	b	1950 <BZ2_decompress+0x1950>
    1918:	ldr	w1, [x5, #8]
    191c:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
    1920:	ldr	x16, [x5]
    1924:	sub	w15, w1, #0x1
    1928:	ldr	w2, [x19, #32]
    192c:	add	w0, w0, #0x8
    1930:	ldr	w1, [x5, #12]
    1934:	ldrb	w17, [x16], #1
    1938:	add	w1, w1, #0x1
    193c:	orr	w2, w17, w2, lsl #8
    1940:	stp	w2, w0, [x19, #32]
    1944:	str	x16, [x5]
    1948:	stp	w15, w1, [x5, #8]
    194c:	cbz	w1, 1d7c <BZ2_decompress+0x1d7c>
    1950:	cmp	w0, #0x7
    1954:	b.le	1918 <BZ2_decompress+0x1918>
    1958:	ldr	w1, [x19, #32]
    195c:	sub	w0, w0, #0x8
    1960:	str	w0, [x19, #36]
    1964:	lsr	w0, w1, w0
    1968:	and	w0, w0, #0xff
    196c:	sub	w1, w0, #0x31
    1970:	cmp	w1, #0x8
    1974:	b.hi	1fa0 <BZ2_decompress+0x1fa0>  // b.pmore
    1978:	ldrb	w2, [x19, #44]
    197c:	sub	w0, w0, #0x30
    1980:	mov	w1, #0x86a0                	// #34464
    1984:	str	x5, [sp, #128]
    1988:	movk	w1, #0x1, lsl #16
    198c:	ldr	x15, [x5, #56]
    1990:	str	w0, [x19, #40]
    1994:	mul	w1, w0, w1
    1998:	ldr	x0, [x5, #72]
    199c:	cbz	w2, 2b8 <BZ2_decompress+0x2b8>
    19a0:	lsl	w1, w1, #1
    19a4:	mov	w2, #0x1                   	// #1
    19a8:	stp	w3, w6, [sp, #140]
    19ac:	stp	w7, w8, [sp, #148]
    19b0:	stp	w18, w4, [sp, #156]
    19b4:	str	w13, [sp, #168]
    19b8:	str	w14, [sp, #176]
    19bc:	str	w12, [sp, #184]
    19c0:	str	w9, [sp, #192]
    19c4:	stp	x11, x10, [sp, #200]
    19c8:	blr	x15
    19cc:	ldr	w1, [x19, #40]
    19d0:	ldr	x5, [sp, #128]
    19d4:	mov	w2, #0x86a0                	// #34464
    19d8:	movk	w2, #0x1, lsl #16
    19dc:	ldr	x15, [x5, #56]
    19e0:	str	x0, [x19, #3160]
    19e4:	ldr	x0, [x5, #72]
    19e8:	mul	w1, w1, w2
    19ec:	mov	w2, #0x1                   	// #1
    19f0:	asr	w1, w1, #1
    19f4:	blr	x15
    19f8:	ldr	x1, [x19, #3160]
    19fc:	str	x0, [x19, #3168]
    1a00:	ldp	w3, w6, [sp, #140]
    1a04:	cmp	x1, #0x0
    1a08:	ldp	w7, w8, [sp, #148]
    1a0c:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    1a10:	ldp	w18, w4, [sp, #156]
    1a14:	ldr	w13, [sp, #168]
    1a18:	ldr	w14, [sp, #176]
    1a1c:	ldr	w12, [sp, #184]
    1a20:	ldr	w9, [sp, #192]
    1a24:	ldp	x11, x10, [sp, #200]
    1a28:	b.ne	30c <BZ2_decompress+0x30c>  // b.any
    1a2c:	mov	w0, #0xfffffffd            	// #-3
    1a30:	b	110 <BZ2_decompress+0x110>
    1a34:	ldr	w0, [x19, #36]
    1a38:	b	534 <BZ2_decompress+0x534>
    1a3c:	ldr	w0, [x19, #36]
    1a40:	b	4c8 <BZ2_decompress+0x4c8>
    1a44:	ldr	w0, [x19, #36]
    1a48:	mov	w1, #0x14                  	// #20
    1a4c:	str	w1, [x19, #8]
    1a50:	b	1a90 <BZ2_decompress+0x1a90>
    1a54:	ldr	x1, [x19]
    1a58:	ldr	w2, [x1, #8]
    1a5c:	cbz	w2, 1c28 <BZ2_decompress+0x1c28>
    1a60:	ldr	x16, [x1]
    1a64:	sub	w15, w2, #0x1
    1a68:	ldr	w5, [x19, #32]
    1a6c:	add	w0, w0, #0x8
    1a70:	ldr	w2, [x1, #12]
    1a74:	ldrb	w17, [x16], #1
    1a78:	add	w2, w2, #0x1
    1a7c:	orr	w5, w17, w5, lsl #8
    1a80:	stp	w5, w0, [x19, #32]
    1a84:	str	x16, [x1]
    1a88:	stp	w15, w2, [x1, #8]
    1a8c:	cbz	w2, 1d6c <BZ2_decompress+0x1d6c>
    1a90:	cmp	w0, #0x7
    1a94:	b.le	1a54 <BZ2_decompress+0x1a54>
    1a98:	ldr	w1, [x19, #32]
    1a9c:	sub	w0, w0, #0x8
    1aa0:	ldr	w2, [x19, #3176]
    1aa4:	str	w0, [x19, #36]
    1aa8:	lsr	w1, w1, w0
    1aac:	bfi	w1, w2, #8, #24
    1ab0:	str	w1, [x19, #3176]
    1ab4:	b	d74 <BZ2_decompress+0xd74>
    1ab8:	ldr	w0, [x19, #36]
    1abc:	mov	w1, #0xb                   	// #11
    1ac0:	str	w1, [x19, #8]
    1ac4:	b	1b00 <BZ2_decompress+0x1b00>
    1ac8:	ldr	w1, [x5, #8]
    1acc:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
    1ad0:	ldr	x16, [x5]
    1ad4:	sub	w15, w1, #0x1
    1ad8:	ldr	w2, [x19, #32]
    1adc:	add	w0, w0, #0x8
    1ae0:	ldr	w1, [x5, #12]
    1ae4:	ldrb	w17, [x16], #1
    1ae8:	add	w1, w1, #0x1
    1aec:	orr	w2, w17, w2, lsl #8
    1af0:	stp	w2, w0, [x19, #32]
    1af4:	str	x16, [x5]
    1af8:	stp	w15, w1, [x5, #8]
    1afc:	cbz	w1, 1e0c <BZ2_decompress+0x1e0c>
    1b00:	cmp	w0, #0x7
    1b04:	b.le	1ac8 <BZ2_decompress+0x1ac8>
    1b08:	ldr	w1, [x19, #32]
    1b0c:	sub	w0, w0, #0x8
    1b10:	str	w0, [x19, #36]
    1b14:	lsr	w1, w1, w0
    1b18:	and	w1, w1, #0xff
    1b1c:	cmp	w1, #0x5a
    1b20:	b.eq	1b30 <BZ2_decompress+0x1b30>  // b.none
    1b24:	mov	w0, #0xfffffffb            	// #-5
    1b28:	b	110 <BZ2_decompress+0x110>
    1b2c:	ldr	w0, [x19, #36]
    1b30:	mov	w1, #0xc                   	// #12
    1b34:	str	w1, [x19, #8]
    1b38:	b	1b74 <BZ2_decompress+0x1b74>
    1b3c:	ldr	w1, [x5, #8]
    1b40:	cbz	w1, 1c28 <BZ2_decompress+0x1c28>
    1b44:	ldr	x16, [x5]
    1b48:	sub	w15, w1, #0x1
    1b4c:	ldr	w2, [x19, #32]
    1b50:	add	w0, w0, #0x8
    1b54:	ldr	w1, [x5, #12]
    1b58:	ldrb	w17, [x16], #1
    1b5c:	add	w1, w1, #0x1
    1b60:	orr	w2, w17, w2, lsl #8
    1b64:	stp	w2, w0, [x19, #32]
    1b68:	str	x16, [x5]
    1b6c:	stp	w15, w1, [x5, #8]
    1b70:	cbz	w1, 1dcc <BZ2_decompress+0x1dcc>
    1b74:	cmp	w0, #0x7
    1b78:	b.le	1b3c <BZ2_decompress+0x1b3c>
    1b7c:	ldr	w1, [x19, #32]
    1b80:	sub	w0, w0, #0x8
    1b84:	str	w0, [x19, #36]
    1b88:	lsr	w1, w1, w0
    1b8c:	and	w1, w1, #0xff
    1b90:	cmp	w1, #0x68
    1b94:	b.eq	190c <BZ2_decompress+0x190c>  // b.none
    1b98:	mov	w0, #0xfffffffb            	// #-5
    1b9c:	b	110 <BZ2_decompress+0x110>
    1ba0:	ldr	w0, [x19, #36]
    1ba4:	b	f24 <BZ2_decompress+0xf24>
    1ba8:	ldr	w0, [x19, #36]
    1bac:	b	f90 <BZ2_decompress+0xf90>
    1bb0:	ldr	w0, [x19, #36]
    1bb4:	b	ffc <BZ2_decompress+0xffc>
    1bb8:	ldr	w0, [x19, #36]
    1bbc:	b	1284 <BZ2_decompress+0x1284>
    1bc0:	ldr	w0, [x19, #36]
    1bc4:	b	108c <BZ2_decompress+0x108c>
    1bc8:	adrp	x0, 0 <stderr>
    1bcc:	adrp	x1, 0 <BZ2_decompress>
    1bd0:	add	x1, x1, #0x0
    1bd4:	str	w3, [sp, #128]
    1bd8:	ldr	x0, [x0]
    1bdc:	stp	w6, w7, [sp, #140]
    1be0:	stp	w8, w18, [sp, #148]
    1be4:	stp	w4, w13, [sp, #156]
    1be8:	str	w14, [sp, #168]
    1bec:	str	w12, [sp, #176]
    1bf0:	str	w9, [sp, #184]
    1bf4:	stp	x11, x10, [sp, #192]
    1bf8:	bl	0 <fprintf>
    1bfc:	ldr	w0, [x19, #36]
    1c00:	ldr	w3, [sp, #128]
    1c04:	ldp	w6, w7, [sp, #140]
    1c08:	str	wzr, [x19, #3176]
    1c0c:	ldp	w8, w18, [sp, #148]
    1c10:	ldp	w4, w13, [sp, #156]
    1c14:	ldr	w14, [sp, #168]
    1c18:	ldr	w12, [sp, #176]
    1c1c:	ldr	w9, [sp, #184]
    1c20:	ldp	x11, x10, [sp, #192]
    1c24:	b	1a48 <BZ2_decompress+0x1a48>
    1c28:	mov	w0, #0x0                   	// #0
    1c2c:	b	110 <BZ2_decompress+0x110>
    1c30:	ldr	w3, [sp, #128]
    1c34:	mov	w0, #0x0                   	// #0
    1c38:	b	110 <BZ2_decompress+0x110>
    1c3c:	ldr	w2, [x1, #16]
    1c40:	add	w2, w2, #0x1
    1c44:	str	w2, [x1, #16]
    1c48:	b	10e0 <BZ2_decompress+0x10e0>
    1c4c:	ldr	w2, [x1, #16]
    1c50:	add	w2, w2, #0x1
    1c54:	str	w2, [x1, #16]
    1c58:	b	1350 <BZ2_decompress+0x1350>
    1c5c:	ldr	w2, [x1, #16]
    1c60:	add	w2, w2, #0x1
    1c64:	str	w2, [x1, #16]
    1c68:	b	1044 <BZ2_decompress+0x1044>
    1c6c:	ldr	w2, [x1, #16]
    1c70:	add	w2, w2, #0x1
    1c74:	str	w2, [x1, #16]
    1c78:	b	fd8 <BZ2_decompress+0xfd8>
    1c7c:	ldr	w2, [x1, #16]
    1c80:	add	w2, w2, #0x1
    1c84:	str	w2, [x1, #16]
    1c88:	b	f6c <BZ2_decompress+0xf6c>
    1c8c:	ldr	w2, [x1, #16]
    1c90:	add	w2, w2, #0x1
    1c94:	str	w2, [x1, #16]
    1c98:	b	f00 <BZ2_decompress+0xf00>
    1c9c:	ldr	w1, [x0, #16]
    1ca0:	add	w1, w1, #0x1
    1ca4:	str	w1, [x0, #16]
    1ca8:	b	1184 <BZ2_decompress+0x1184>
    1cac:	ldr	w2, [x1, #16]
    1cb0:	add	w2, w2, #0x1
    1cb4:	str	w2, [x1, #16]
    1cb8:	b	e94 <BZ2_decompress+0xe94>
    1cbc:	ldr	w2, [x0, #16]
    1cc0:	add	w2, w2, #0x1
    1cc4:	str	w2, [x0, #16]
    1cc8:	b	1550 <BZ2_decompress+0x1550>
    1ccc:	ldr	w2, [x0, #16]
    1cd0:	add	w2, w2, #0x1
    1cd4:	str	w2, [x0, #16]
    1cd8:	b	14e4 <BZ2_decompress+0x14e4>
    1cdc:	ldr	w2, [x1, #16]
    1ce0:	add	w2, w2, #0x1
    1ce4:	str	w2, [x1, #16]
    1ce8:	b	e28 <BZ2_decompress+0xe28>
    1cec:	ldr	w2, [x1, #16]
    1cf0:	add	w2, w2, #0x1
    1cf4:	str	w2, [x1, #16]
    1cf8:	b	dbc <BZ2_decompress+0xdbc>
    1cfc:	ldr	w2, [x0, #16]
    1d00:	add	w2, w2, #0x1
    1d04:	str	w2, [x0, #16]
    1d08:	b	15f0 <BZ2_decompress+0x15f0>
    1d0c:	ldr	w2, [x0, #16]
    1d10:	add	w2, w2, #0x1
    1d14:	str	w2, [x0, #16]
    1d18:	b	16d8 <BZ2_decompress+0x16d8>
    1d1c:	ldr	w2, [x0, #16]
    1d20:	add	w2, w2, #0x1
    1d24:	str	w2, [x0, #16]
    1d28:	b	18ac <BZ2_decompress+0x18ac>
    1d2c:	ldr	w2, [x1, #16]
    1d30:	add	w2, w2, #0x1
    1d34:	str	w2, [x1, #16]
    1d38:	b	12cc <BZ2_decompress+0x12cc>
    1d3c:	ldr	w2, [x0, #16]
    1d40:	add	w2, w2, #0x1
    1d44:	str	w2, [x0, #16]
    1d48:	b	1664 <BZ2_decompress+0x1664>
    1d4c:	ldr	w2, [x1, #16]
    1d50:	add	w2, w2, #0x1
    1d54:	str	w2, [x1, #16]
    1d58:	b	510 <BZ2_decompress+0x510>
    1d5c:	ldr	w2, [x1, #16]
    1d60:	add	w2, w2, #0x1
    1d64:	str	w2, [x1, #16]
    1d68:	b	57c <BZ2_decompress+0x57c>
    1d6c:	ldr	w2, [x1, #16]
    1d70:	add	w2, w2, #0x1
    1d74:	str	w2, [x1, #16]
    1d78:	b	1a90 <BZ2_decompress+0x1a90>
    1d7c:	ldr	w1, [x5, #16]
    1d80:	add	w1, w1, #0x1
    1d84:	str	w1, [x5, #16]
    1d88:	b	1950 <BZ2_decompress+0x1950>
    1d8c:	ldr	w2, [x1, #16]
    1d90:	add	w2, w2, #0x1
    1d94:	str	w2, [x1, #16]
    1d98:	b	358 <BZ2_decompress+0x358>
    1d9c:	ldr	w2, [x1, #16]
    1da0:	add	w2, w2, #0x1
    1da4:	str	w2, [x1, #16]
    1da8:	b	4a4 <BZ2_decompress+0x4a4>
    1dac:	ldr	w2, [x1, #16]
    1db0:	add	w2, w2, #0x1
    1db4:	str	w2, [x1, #16]
    1db8:	b	438 <BZ2_decompress+0x438>
    1dbc:	ldr	w2, [x0, #16]
    1dc0:	add	w2, w2, #0x1
    1dc4:	str	w2, [x0, #16]
    1dc8:	b	183c <BZ2_decompress+0x183c>
    1dcc:	ldr	w1, [x5, #16]
    1dd0:	add	w1, w1, #0x1
    1dd4:	str	w1, [x5, #16]
    1dd8:	b	1b74 <BZ2_decompress+0x1b74>
    1ddc:	ldr	w2, [x1, #16]
    1de0:	add	w2, w2, #0x1
    1de4:	str	w2, [x1, #16]
    1de8:	b	608 <BZ2_decompress+0x608>
    1dec:	ldr	w2, [x0, #16]
    1df0:	add	w2, w2, #0x1
    1df4:	str	w2, [x0, #16]
    1df8:	b	17cc <BZ2_decompress+0x17cc>
    1dfc:	ldr	w2, [x1, #16]
    1e00:	add	w2, w2, #0x1
    1e04:	str	w2, [x1, #16]
    1e08:	b	3cc <BZ2_decompress+0x3cc>
    1e0c:	ldr	w1, [x5, #16]
    1e10:	add	w1, w1, #0x1
    1e14:	str	w1, [x5, #16]
    1e18:	b	1b00 <BZ2_decompress+0x1b00>
    1e1c:	ldr	w2, [x1, #16]
    1e20:	add	w2, w2, #0x1
    1e24:	str	w2, [x1, #16]
    1e28:	b	684 <BZ2_decompress+0x684>
    1e2c:	ldr	w1, [x0, #16]
    1e30:	add	w1, w1, #0x1
    1e34:	str	w1, [x0, #16]
    1e38:	b	9b8 <BZ2_decompress+0x9b8>
    1e3c:	ldr	w1, [x0, #16]
    1e40:	add	w1, w1, #0x1
    1e44:	str	w1, [x0, #16]
    1e48:	b	a44 <BZ2_decompress+0xa44>
    1e4c:	ldr	w1, [x0, #16]
    1e50:	add	w1, w1, #0x1
    1e54:	str	w1, [x0, #16]
    1e58:	b	ad0 <BZ2_decompress+0xad0>
    1e5c:	ldr	w2, [x1, #16]
    1e60:	add	w2, w2, #0x1
    1e64:	str	w2, [x1, #16]
    1e68:	b	175c <BZ2_decompress+0x175c>
    1e6c:	ldr	w1, [x0, #16]
    1e70:	add	w1, w1, #0x1
    1e74:	str	w1, [x0, #16]
    1e78:	b	b28 <BZ2_decompress+0xb28>
    1e7c:	ldr	w1, [x0, #16]
    1e80:	add	w1, w1, #0x1
    1e84:	str	w1, [x0, #16]
    1e88:	b	90c <BZ2_decompress+0x90c>
    1e8c:	mov	x10, #0x0                   	// #0
    1e90:	mov	x11, #0x0                   	// #0
    1e94:	mov	w24, #0x0                   	// #0
    1e98:	mov	w23, #0x0                   	// #0
    1e9c:	mov	w22, #0x0                   	// #0
    1ea0:	mov	w9, #0x0                   	// #0
    1ea4:	mov	w12, #0x0                   	// #0
    1ea8:	mov	w26, #0x0                   	// #0
    1eac:	mov	w14, #0x0                   	// #0
    1eb0:	mov	w13, #0x0                   	// #0
    1eb4:	mov	w28, #0x0                   	// #0
    1eb8:	mov	w4, #0x0                   	// #0
    1ebc:	mov	w18, #0x0                   	// #0
    1ec0:	mov	w8, #0x0                   	// #0
    1ec4:	mov	w7, #0x0                   	// #0
    1ec8:	mov	w6, #0x0                   	// #0
    1ecc:	mov	w27, #0x0                   	// #0
    1ed0:	mov	w25, #0x0                   	// #0
    1ed4:	mov	w3, #0x0                   	// #0
    1ed8:	mov	w0, #0x0                   	// #0
    1edc:	str	xzr, [sp, #104]
    1ee0:	stp	wzr, wzr, [sp, #116]
    1ee4:	str	wzr, [sp, #124]
    1ee8:	str	wzr, [sp, #136]
    1eec:	b	110 <BZ2_decompress+0x110>
    1ef0:	ldr	w2, [x1, #16]
    1ef4:	add	w2, w2, #0x1
    1ef8:	str	w2, [x1, #16]
    1efc:	b	125c <BZ2_decompress+0x125c>
    1f00:	ldr	w1, [x0, #16]
    1f04:	add	w1, w1, #0x1
    1f08:	str	w1, [x0, #16]
    1f0c:	b	d44 <BZ2_decompress+0xd44>
    1f10:	ldr	w1, [x0, #16]
    1f14:	add	w1, w1, #0x1
    1f18:	str	w1, [x0, #16]
    1f1c:	b	146c <BZ2_decompress+0x146c>
    1f20:	ldr	w1, [x5, #16]
    1f24:	add	w1, w1, #0x1
    1f28:	str	w1, [x5, #16]
    1f2c:	b	234 <BZ2_decompress+0x234>
    1f30:	mov	x10, #0x0                   	// #0
    1f34:	mov	x11, #0x0                   	// #0
    1f38:	mov	w24, #0x0                   	// #0
    1f3c:	mov	w23, #0x0                   	// #0
    1f40:	mov	w22, #0x0                   	// #0
    1f44:	mov	w9, #0x0                   	// #0
    1f48:	mov	w12, #0x0                   	// #0
    1f4c:	mov	w26, #0x0                   	// #0
    1f50:	mov	w14, #0x0                   	// #0
    1f54:	mov	w13, #0x0                   	// #0
    1f58:	mov	w28, #0x0                   	// #0
    1f5c:	mov	w4, #0x0                   	// #0
    1f60:	mov	w18, #0x0                   	// #0
    1f64:	mov	w8, #0x0                   	// #0
    1f68:	mov	w7, #0x0                   	// #0
    1f6c:	mov	w6, #0x0                   	// #0
    1f70:	mov	w27, #0x0                   	// #0
    1f74:	mov	w25, #0x0                   	// #0
    1f78:	mov	w3, #0x0                   	// #0
    1f7c:	mov	w0, #0xfffffffb            	// #-5
    1f80:	str	xzr, [sp, #104]
    1f84:	stp	wzr, wzr, [sp, #116]
    1f88:	str	wzr, [sp, #124]
    1f8c:	str	wzr, [sp, #136]
    1f90:	b	110 <BZ2_decompress+0x110>
    1f94:	mov	w8, #0x0                   	// #0
    1f98:	mov	w0, #0xfffffffc            	// #-4
    1f9c:	b	110 <BZ2_decompress+0x110>
    1fa0:	str	w0, [x19, #40]
    1fa4:	mov	w0, #0xfffffffb            	// #-5
    1fa8:	b	110 <BZ2_decompress+0x110>
    1fac:	ldr	w1, [x10, x0, lsl #2]
    1fb0:	mov	w0, #0xfffffffc            	// #-4
    1fb4:	sub	w1, w23, w1
    1fb8:	cmp	w1, #0x101
    1fbc:	b.hi	110 <BZ2_decompress+0x110>  // b.pmore
    1fc0:	ldr	x0, [sp, #104]
    1fc4:	ldr	w13, [x0, w1, sxtw #2]
    1fc8:	b	b64 <BZ2_decompress+0xb64>
    1fcc:	ldr	w0, [x10, x0, lsl #2]
    1fd0:	sub	w0, w23, w0
    1fd4:	cmp	w0, #0x101
    1fd8:	b.hi	1378 <BZ2_decompress+0x1378>  // b.pmore
    1fdc:	ldr	x1, [sp, #104]
    1fe0:	ldr	w13, [x1, w0, sxtw #2]
    1fe4:	cmp	w13, #0x1
    1fe8:	b.ls	2304 <BZ2_decompress+0x2304>  // b.plast
    1fec:	ldrsw	x0, [x19, #7820]
    1ff0:	add	w1, w12, #0x1
    1ff4:	cmp	w1, #0x0
    1ff8:	add	x0, x19, x0
    1ffc:	ldrb	w0, [x0, #3724]
    2000:	add	x0, x19, x0
    2004:	ldrb	w2, [x0, #3468]
    2008:	add	x5, x19, w2, uxtb #2
    200c:	ldr	w0, [x5, #68]
    2010:	add	w0, w0, w1
    2014:	str	w0, [x5, #68]
    2018:	ldrb	w0, [x19, #44]
    201c:	cbnz	w0, 2180 <BZ2_decompress+0x2180>
    2020:	b.le	21f4 <BZ2_decompress+0x21f4>
    2024:	cmp	w14, w26
    2028:	b.le	2398 <BZ2_decompress+0x2398>
    202c:	ldr	x15, [x19, #3152]
    2030:	add	w5, w26, w12
    2034:	add	w0, w26, #0x1
    2038:	sub	w5, w5, w14
    203c:	mov	w12, w1
    2040:	add	w5, w5, #0x1
    2044:	sxtw	x0, w0
    2048:	sub	x1, x15, #0x4
    204c:	str	w2, [x1, x0, lsl #2]
    2050:	subs	w12, w12, #0x1
    2054:	mov	w26, w0
    2058:	b.eq	b64 <BZ2_decompress+0xb64>  // b.none
    205c:	add	x0, x0, #0x1
    2060:	cmp	w12, w5
    2064:	b.ne	204c <BZ2_decompress+0x204c>  // b.any
    2068:	mov	w0, #0xfffffffc            	// #-4
    206c:	b	110 <BZ2_decompress+0x110>
    2070:	mov	w1, #0x4651                	// #18001
    2074:	cmp	w30, w1
    2078:	b.gt	2084 <BZ2_decompress+0x2084>
    207c:	ldr	x1, [sp, #128]
    2080:	strb	w25, [x1, x30]
    2084:	add	x30, x30, #0x1
    2088:	cmp	w8, w30
    208c:	b.gt	23d8 <BZ2_decompress+0x23d8>
    2090:	mov	w15, #0x4652                	// #18002
    2094:	cmp	w8, w15
    2098:	csel	w15, w8, w15, le
    209c:	add	x3, sp, #0xe8
    20a0:	cmp	w7, #0x0
    20a4:	mov	w0, #0x0                   	// #0
    20a8:	mov	w1, #0x0                   	// #0
    20ac:	b.le	20c8 <BZ2_decompress+0x20c8>
    20b0:	strb	w0, [x3, w1, sxtw]
    20b4:	add	w0, w0, #0x1
    20b8:	and	w0, w0, #0xff
    20bc:	cmp	w0, w7
    20c0:	mov	w1, w0
    20c4:	b.lt	20b0 <BZ2_decompress+0x20b0>  // b.tstop
    20c8:	cmp	w8, #0x0
    20cc:	mov	w3, #0x0                   	// #0
    20d0:	b.le	2130 <BZ2_decompress+0x2130>
    20d4:	mov	x3, #0x651e                	// #25886
    20d8:	mov	x5, #0x1ecc                	// #7884
    20dc:	add	x16, x19, x3
    20e0:	add	x8, x19, x5
    20e4:	add	x3, sp, #0xe8
    20e8:	mov	x2, #0x0                   	// #0
    20ec:	nop
    20f0:	ldrb	w0, [x16, x2]
    20f4:	add	x1, x3, w0, uxtb
    20f8:	ldrb	w17, [x3, w0, sxtw]
    20fc:	cbz	w0, 2114 <BZ2_decompress+0x2114>
    2100:	ldurb	w5, [x1, #-1]
    2104:	sub	w0, w0, #0x1
    2108:	strb	w5, [x1], #-1
    210c:	ands	w0, w0, #0xff
    2110:	b.ne	2100 <BZ2_decompress+0x2100>  // b.any
    2114:	strb	w17, [x8, x2]
    2118:	add	x2, x2, #0x1
    211c:	strb	w17, [sp, #232]
    2120:	cmp	w15, w2
    2124:	b.gt	20f0 <BZ2_decompress+0x20f0>
    2128:	cmp	w15, #0x0
    212c:	csinc	w3, w15, wzr, gt
    2130:	mov	w8, w15
    2134:	mov	w27, #0x0                   	// #0
    2138:	b	6c8 <BZ2_decompress+0x6c8>
    213c:	ldr	w0, [x19, #56]
    2140:	cmp	w0, #0x0
    2144:	ccmp	w0, w26, #0x0, ge  // ge = tcont
    2148:	b.ge	1378 <BZ2_decompress+0x1378>  // b.tcont
    214c:	add	x0, x19, #0x44
    2150:	mov	x1, #0x0                   	// #0
    2154:	b	2164 <BZ2_decompress+0x2164>
    2158:	add	x1, x1, #0x1
    215c:	cmp	x1, #0x100
    2160:	b.eq	231c <BZ2_decompress+0x231c>  // b.none
    2164:	ldr	w2, [x0, x1, lsl #2]
    2168:	mov	w3, w1
    216c:	cmp	w2, #0x0
    2170:	ccmp	w2, w26, #0x0, ge  // ge = tcont
    2174:	b.le	2158 <BZ2_decompress+0x2158>
    2178:	mov	w0, #0xfffffffc            	// #-4
    217c:	b	110 <BZ2_decompress+0x110>
    2180:	b.le	21f4 <BZ2_decompress+0x21f4>
    2184:	cmp	w14, w26
    2188:	b.le	2398 <BZ2_decompress+0x2398>
    218c:	ldr	x15, [x19, #3160]
    2190:	add	w5, w26, w12
    2194:	add	w0, w26, #0x1
    2198:	sub	w5, w5, w14
    219c:	add	w5, w5, #0x1
    21a0:	and	w2, w2, #0xffff
    21a4:	sxtw	x0, w0
    21a8:	mov	w12, w1
    21ac:	sub	x15, x15, #0x2
    21b0:	strh	w2, [x15, x0, lsl #1]
    21b4:	subs	w12, w12, #0x1
    21b8:	mov	w26, w0
    21bc:	b.eq	b64 <BZ2_decompress+0xb64>  // b.none
    21c0:	add	x0, x0, #0x1
    21c4:	cmp	w12, w5
    21c8:	b.ne	21b0 <BZ2_decompress+0x21b0>  // b.any
    21cc:	mov	w0, #0xfffffffc            	// #-4
    21d0:	b	110 <BZ2_decompress+0x110>
    21d4:	mov	w26, #0x0                   	// #0
    21d8:	mov	w28, #0x0                   	// #0
    21dc:	mov	w4, #0x0                   	// #0
    21e0:	mov	w3, #0x100                 	// #256
    21e4:	mov	w0, #0xfffffffc            	// #-4
    21e8:	b	110 <BZ2_decompress+0x110>
    21ec:	mov	w27, #0x0                   	// #0
    21f0:	b	7c4 <BZ2_decompress+0x7c4>
    21f4:	mov	w12, w1
    21f8:	b	b64 <BZ2_decompress+0xb64>
    21fc:	ldr	x0, [x19, #3152]
    2200:	str	w2, [x0, w26, sxtw #2]
    2204:	b	c78 <BZ2_decompress+0xc78>
    2208:	lsr	w0, w2, #4
    220c:	and	w2, w2, #0xf
    2210:	add	x16, x19, x0, lsl #2
    2214:	ldr	w1, [x16, #7820]
    2218:	add	w17, w1, w2
    221c:	cmp	w1, w17
    2220:	add	x5, x19, w17, sxtw
    2224:	sxtw	x17, w17
    2228:	ldrb	w30, [x5, #3724]
    222c:	b.ge	2254 <BZ2_decompress+0x2254>  // b.tcont
    2230:	sub	w2, w2, #0x1
    2234:	sub	x15, x19, #0x1
    2238:	sub	x2, x17, x2
    223c:	add	x15, x2, x15
    2240:	ldrb	w2, [x5, #3723]
    2244:	sub	x5, x5, #0x1
    2248:	strb	w2, [x5, #3725]
    224c:	cmp	x15, x5
    2250:	b.ne	2240 <BZ2_decompress+0x2240>  // b.any
    2254:	add	w1, w1, #0x1
    2258:	mov	x2, #0x1e8c                	// #7820
    225c:	mov	x5, #0x1e88                	// #7816
    2260:	add	x15, x19, x2
    2264:	str	w1, [x16, #7820]
    2268:	add	x16, x19, x5
    226c:	sub	w2, w1, #0x1
    2270:	str	w2, [x15, x0, lsl #2]
    2274:	ldr	w1, [x16, x0, lsl #2]
    2278:	add	x5, x19, w2, sxtw
    227c:	sub	x0, x0, #0x1
    2280:	add	w2, w1, #0xf
    2284:	add	x2, x19, w2, sxtw
    2288:	ldrb	w2, [x2, #3724]
    228c:	strb	w2, [x5, #3724]
    2290:	cbnz	w0, 226c <BZ2_decompress+0x226c>
    2294:	ldr	w0, [x19, #7820]
    2298:	sub	w0, w0, #0x1
    229c:	str	w0, [x19, #7820]
    22a0:	add	x1, x19, w0, sxtw
    22a4:	strb	w30, [x1, #3724]
    22a8:	cbnz	w0, c4c <BZ2_decompress+0xc4c>
    22ac:	mov	x17, #0x1ec8                	// #7880
    22b0:	add	x17, x19, x17
    22b4:	add	x0, x19, #0xe8b
    22b8:	mov	x5, #0xff0                 	// #4080
    22bc:	str	x0, [sp, #128]
    22c0:	ldrsw	x15, [x17]
    22c4:	ldr	x1, [sp, #128]
    22c8:	add	x0, x15, #0xe9b
    22cc:	add	x0, x19, x0
    22d0:	add	x16, x1, x15
    22d4:	nop
    22d8:	sub	x1, x0, x15
    22dc:	ldrb	w2, [x0]
    22e0:	sub	x0, x0, #0x1
    22e4:	cmp	x16, x0
    22e8:	strb	w2, [x1, x5]
    22ec:	b.ne	22d8 <BZ2_decompress+0x22d8>  // b.any
    22f0:	str	w5, [x17], #-4
    22f4:	sub	x5, x5, #0x10
    22f8:	cmp	x5, #0xef0
    22fc:	b.ne	22c0 <BZ2_decompress+0x22c0>  // b.any
    2300:	b	c4c <BZ2_decompress+0xc4c>
    2304:	ldr	w1, [sp, #120]
    2308:	mov	w0, #0x1fffff              	// #2097151
    230c:	cmp	w1, w0
    2310:	mov	w0, #0xfffffffc            	// #-4
    2314:	b.gt	110 <BZ2_decompress+0x110>
    2318:	b	138c <BZ2_decompress+0x138c>
    231c:	add	x2, x19, #0x444
    2320:	str	wzr, [x19, #1096]
    2324:	ldr	w1, [x0]
    2328:	add	x0, x0, #0x4
    232c:	str	w1, [x0, #1028]
    2330:	cmp	x2, x0
    2334:	b.ne	2324 <BZ2_decompress+0x2324>  // b.any
    2338:	add	x0, x19, #0x44c
    233c:	add	x3, x19, #0x84c
    2340:	str	x3, [sp, #128]
    2344:	ldp	w2, w1, [x0, #-4]
    2348:	add	w1, w1, w2
    234c:	str	w1, [x0], #4
    2350:	cmp	x3, x0
    2354:	b.ne	2344 <BZ2_decompress+0x2344>  // b.any
    2358:	add	x5, x19, #0x448
    235c:	mov	x0, #0x0                   	// #0
    2360:	b	2370 <BZ2_decompress+0x2370>
    2364:	add	x0, x0, #0x1
    2368:	cmp	x0, #0x101
    236c:	b.eq	23a4 <BZ2_decompress+0x23a4>  // b.none
    2370:	ldr	w1, [x5, x0, lsl #2]
    2374:	mov	w3, w0
    2378:	cmp	w1, #0x0
    237c:	ccmp	w1, w26, #0x0, ge  // ge = tcont
    2380:	b.le	2364 <BZ2_decompress+0x2364>
    2384:	mov	w0, #0xfffffffc            	// #-4
    2388:	b	110 <BZ2_decompress+0x110>
    238c:	mov	w0, #0xfffffffc            	// #-4
    2390:	str	w2, [sp, #120]
    2394:	b	110 <BZ2_decompress+0x110>
    2398:	mov	w12, w1
    239c:	mov	w0, #0xfffffffc            	// #-4
    23a0:	b	110 <BZ2_decompress+0x110>
    23a4:	mov	x15, x5
    23a8:	mov	x0, x5
    23ac:	mov	w3, #0x1                   	// #1
    23b0:	b	23c4 <BZ2_decompress+0x23c4>
    23b4:	add	w3, w3, #0x1
    23b8:	add	x0, x0, #0x4
    23bc:	cmp	w3, #0x101
    23c0:	b.eq	23e0 <BZ2_decompress+0x23e0>  // b.none
    23c4:	ldp	w2, w1, [x0]
    23c8:	cmp	w2, w1
    23cc:	b.le	23b4 <BZ2_decompress+0x23b4>
    23d0:	mov	w0, #0xfffffffc            	// #-4
    23d4:	b	110 <BZ2_decompress+0x110>
    23d8:	mov	w25, #0x0                   	// #0
    23dc:	b	1304 <BZ2_decompress+0x1304>
    23e0:	mov	w0, #0xffffffff            	// #-1
    23e4:	mov	w1, #0x2                   	// #2
    23e8:	str	w1, [x19, #8]
    23ec:	strb	wzr, [x19, #12]
    23f0:	str	wzr, [x19, #16]
    23f4:	str	w0, [x19, #3184]
    23f8:	ldr	w0, [x19, #52]
    23fc:	cmp	w0, #0x1
    2400:	b.le	2460 <BZ2_decompress+0x2460>
    2404:	adrp	x1, 0 <stderr>
    2408:	adrp	x0, 0 <BZ2_decompress>
    240c:	mov	x2, #0x6                   	// #6
    2410:	add	x0, x0, #0x0
    2414:	ldr	x3, [x1]
    2418:	mov	x1, #0x1                   	// #1
    241c:	stp	w6, w7, [sp, #140]
    2420:	stp	w8, w18, [sp, #148]
    2424:	stp	w4, w13, [sp, #156]
    2428:	str	w14, [sp, #168]
    242c:	str	w12, [sp, #176]
    2430:	str	w9, [sp, #184]
    2434:	stp	x11, x10, [sp, #192]
    2438:	stp	x15, x5, [sp, #208]
    243c:	bl	0 <fwrite>
    2440:	ldr	w14, [sp, #168]
    2444:	ldp	x11, x10, [sp, #192]
    2448:	ldp	x15, x5, [sp, #208]
    244c:	ldp	w6, w7, [sp, #140]
    2450:	ldp	w8, w18, [sp, #148]
    2454:	ldp	w4, w13, [sp, #156]
    2458:	ldr	w12, [sp, #176]
    245c:	ldr	w9, [sp, #184]
    2460:	ldrb	w0, [x19, #44]
    2464:	cbnz	w0, 2528 <BZ2_decompress+0x2528>
    2468:	ldr	x2, [x19, #3152]
    246c:	mov	x0, #0x0                   	// #0
    2470:	ldr	w1, [x2, x0, lsl #2]
    2474:	add	x1, x19, w1, uxtb #2
    2478:	ldrsw	x3, [x1, #1096]
    247c:	lsl	x3, x3, #2
    2480:	ldr	w5, [x2, x3]
    2484:	orr	w5, w5, w0, lsl #8
    2488:	str	w5, [x2, x3]
    248c:	add	x0, x0, #0x1
    2490:	ldr	w3, [x1, #1096]
    2494:	cmp	w26, w0
    2498:	add	w3, w3, #0x1
    249c:	str	w3, [x1, #1096]
    24a0:	b.gt	2470 <BZ2_decompress+0x2470>
    24a4:	ldrsw	x0, [x19, #56]
    24a8:	mov	w16, #0x86a0                	// #34464
    24ac:	ldr	w1, [x19, #40]
    24b0:	movk	w16, #0x1, lsl #16
    24b4:	ldrb	w15, [x19, #20]
    24b8:	cmp	w26, #0x0
    24bc:	mov	w5, #0x1                   	// #1
    24c0:	csel	w3, w26, w5, gt
    24c4:	ldr	w0, [x2, x0, lsl #2]
    24c8:	str	wzr, [x19, #1092]
    24cc:	mul	w1, w1, w16
    24d0:	lsr	w0, w0, #8
    24d4:	str	w0, [x19, #60]
    24d8:	cbz	w15, 25b8 <BZ2_decompress+0x25b8>
    24dc:	str	xzr, [x19, #24]
    24e0:	cmp	w0, w1
    24e4:	b.cs	25b0 <BZ2_decompress+0x25b0>  // b.hs, b.nlast
    24e8:	ubfiz	x0, x0, #2, #24
    24ec:	adrp	x1, 0 <BZ2_rNums>
    24f0:	ldr	w15, [x1]
    24f4:	ldr	w1, [x2, x0]
    24f8:	mov	w0, #0x0                   	// #0
    24fc:	sub	w2, w15, #0x1
    2500:	stp	w2, w5, [x19, #24]
    2504:	cmp	w2, w5
    2508:	and	w2, w1, #0xff
    250c:	lsr	w1, w1, #8
    2510:	str	w1, [x19, #60]
    2514:	cset	w1, eq  // eq = none
    2518:	str	w5, [x19, #1092]
    251c:	eor	w1, w2, w1
    2520:	str	w1, [x19, #64]
    2524:	b	110 <BZ2_decompress+0x110>
    2528:	ldr	w0, [x15]
    252c:	add	x15, x15, #0x4
    2530:	str	w0, [x15, #1024]
    2534:	ldr	x0, [sp, #128]
    2538:	cmp	x0, x15
    253c:	b.ne	2528 <BZ2_decompress+0x2528>  // b.any
    2540:	mov	x2, #0x0                   	// #0
    2544:	b	2570 <BZ2_decompress+0x2570>
    2548:	ldrb	w15, [x16, x0]
    254c:	and	w15, w15, #0xfffffff0
    2550:	orr	w1, w15, w1, asr #16
    2554:	strb	w1, [x16, x0]
    2558:	ldr	w0, [x3, #2124]
    255c:	add	x2, x2, #0x1
    2560:	cmp	w26, w2
    2564:	add	w0, w0, #0x1
    2568:	str	w0, [x3, #2124]
    256c:	b.le	25e0 <BZ2_decompress+0x25e0>
    2570:	ldr	x16, [x19, #3160]
    2574:	lsl	x15, x2, #1
    2578:	asr	w0, w2, #1
    257c:	ldrb	w3, [x16, x15]
    2580:	sxtw	x0, w0
    2584:	add	x3, x19, x3, lsl #2
    2588:	ldr	w1, [x3, #2124]
    258c:	strh	w1, [x16, x15]
    2590:	ldr	x16, [x19, #3168]
    2594:	tbz	w2, #0, 2548 <BZ2_decompress+0x2548>
    2598:	ldrb	w15, [x16, x0]
    259c:	asr	w1, w1, #16
    25a0:	and	w15, w15, #0xf
    25a4:	orr	w1, w15, w1, lsl #4
    25a8:	strb	w1, [x16, x0]
    25ac:	b	2558 <BZ2_decompress+0x2558>
    25b0:	mov	w0, #0x1                   	// #1
    25b4:	b	184 <BZ2_decompress+0x184>
    25b8:	cmp	w0, w1
    25bc:	b.cs	25b0 <BZ2_decompress+0x25b0>  // b.hs, b.nlast
    25c0:	ubfiz	x1, x0, #2, #24
    25c4:	mov	w0, #0x0                   	// #0
    25c8:	ldr	w1, [x2, x1]
    25cc:	str	w5, [x19, #1092]
    25d0:	and	w2, w1, #0xff
    25d4:	lsr	w1, w1, #8
    25d8:	stp	w1, w2, [x19, #60]
    25dc:	b	110 <BZ2_decompress+0x110>
    25e0:	ldr	w0, [x19, #56]
    25e4:	ldr	x15, [x19, #3168]
    25e8:	asr	w1, w0, #1
    25ec:	ubfiz	w2, w0, #2, #1
    25f0:	ldr	x30, [x19, #3160]
    25f4:	ldrb	w25, [x15, w1, sxtw]
    25f8:	ldrh	w1, [x30, w0, sxtw #1]
    25fc:	lsr	w25, w25, w2
    2600:	ubfiz	w25, w25, #16, #4
    2604:	orr	w25, w25, w1
    2608:	b	2634 <BZ2_decompress+0x2634>
    260c:	and	w2, w2, #0xfffffff0
    2610:	orr	w0, w2, w0
    2614:	and	w0, w0, #0xff
    2618:	strb	w0, [x1]
    261c:	mov	w0, w3
    2620:	ldr	w1, [x19, #56]
    2624:	cmp	w1, w3
    2628:	b.eq	2680 <BZ2_decompress+0x2680>  // b.none
    262c:	ldr	x30, [x19, #3160]
    2630:	ldr	x15, [x19, #3168]
    2634:	asr	w1, w25, #1
    2638:	sbfiz	x17, x25, #1, #32
    263c:	ldrh	w2, [x30, w25, sxtw #1]
    2640:	ubfiz	w16, w25, #2, #1
    2644:	mov	w3, w25
    2648:	ldrb	w25, [x15, w1, sxtw]
    264c:	strh	w0, [x30, x17]
    2650:	sxtw	x17, w1
    2654:	asr	w0, w0, #16
    2658:	add	x1, x15, w1, sxtw
    265c:	lsr	w25, w25, w16
    2660:	ubfiz	w25, w25, #16, #4
    2664:	orr	w25, w25, w2
    2668:	ldrb	w2, [x15, x17]
    266c:	tbz	w3, #0, 260c <BZ2_decompress+0x260c>
    2670:	and	w2, w2, #0xf
    2674:	orr	w0, w2, w0, lsl #4
    2678:	and	w0, w0, #0xff
    267c:	b	2618 <BZ2_decompress+0x2618>
    2680:	ldr	w0, [x19, #40]
    2684:	mov	w2, #0x86a0                	// #34464
    2688:	ldrb	w1, [x19, #20]
    268c:	movk	w2, #0x1, lsl #16
    2690:	str	w3, [x19, #60]
    2694:	str	wzr, [x19, #1092]
    2698:	mul	w0, w0, w2
    269c:	cbz	w1, 2784 <BZ2_decompress+0x2784>
    26a0:	str	xzr, [x19, #24]
    26a4:	cmp	w3, w0
    26a8:	b.cs	25b0 <BZ2_decompress+0x25b0>  // b.hs, b.nlast
    26ac:	mov	x1, x5
    26b0:	mov	w0, w3
    26b4:	str	w3, [sp, #128]
    26b8:	stp	w6, w7, [sp, #140]
    26bc:	stp	w8, w18, [sp, #148]
    26c0:	stp	w4, w13, [sp, #156]
    26c4:	str	w14, [sp, #168]
    26c8:	str	w12, [sp, #176]
    26cc:	str	w9, [sp, #184]
    26d0:	stp	x11, x10, [sp, #192]
    26d4:	bl	0 <BZ2_indexIntoF>
    26d8:	ldr	w5, [x19, #60]
    26dc:	ldr	x15, [x19, #3160]
    26e0:	mov	w2, w0
    26e4:	ldr	x16, [x19, #3168]
    26e8:	lsr	w1, w5, #1
    26ec:	ldrh	w15, [x15, w5, uxtw #1]
    26f0:	ubfiz	w0, w5, #2, #1
    26f4:	str	w2, [x19, #64]
    26f8:	ldr	w5, [x19, #1092]
    26fc:	ldrb	w1, [x16, x1]
    2700:	add	w5, w5, #0x1
    2704:	str	w5, [x19, #1092]
    2708:	ldr	w3, [sp, #128]
    270c:	lsr	w1, w1, w0
    2710:	ldr	w0, [x19, #24]
    2714:	ubfiz	w1, w1, #16, #4
    2718:	ldr	w14, [sp, #168]
    271c:	orr	w1, w1, w15
    2720:	str	w1, [x19, #60]
    2724:	ldp	w6, w7, [sp, #140]
    2728:	ldp	w8, w18, [sp, #148]
    272c:	ldp	w4, w13, [sp, #156]
    2730:	ldr	w12, [sp, #176]
    2734:	ldr	w9, [sp, #184]
    2738:	ldp	x11, x10, [sp, #192]
    273c:	cbnz	w0, 2764 <BZ2_decompress+0x2764>
    2740:	ldr	w1, [x19, #28]
    2744:	adrp	x0, 0 <BZ2_rNums>
    2748:	add	x0, x0, #0x0
    274c:	cmp	w1, #0x1ff
    2750:	add	w5, w1, #0x1
    2754:	ldr	w0, [x0, w1, sxtw #2]
    2758:	str	w0, [x19, #24]
    275c:	b.eq	2800 <BZ2_decompress+0x2800>  // b.none
    2760:	str	w5, [x19, #28]
    2764:	sub	w0, w0, #0x1
    2768:	str	w0, [x19, #24]
    276c:	cmp	w0, #0x1
    2770:	mov	w0, #0x0                   	// #0
    2774:	cset	w1, eq  // eq = none
    2778:	eor	w2, w1, w2
    277c:	str	w2, [x19, #64]
    2780:	b	110 <BZ2_decompress+0x110>
    2784:	cmp	w3, w0
    2788:	b.cs	25b0 <BZ2_decompress+0x25b0>  // b.hs, b.nlast
    278c:	mov	x1, x5
    2790:	mov	w0, w3
    2794:	str	w3, [sp, #128]
    2798:	stp	w6, w7, [sp, #140]
    279c:	stp	w8, w18, [sp, #148]
    27a0:	stp	w4, w13, [sp, #156]
    27a4:	str	w14, [sp, #168]
    27a8:	str	w12, [sp, #176]
    27ac:	str	w9, [sp, #184]
    27b0:	stp	x11, x10, [sp, #192]
    27b4:	bl	0 <BZ2_indexIntoF>
    27b8:	ldr	w2, [x19, #60]
    27bc:	ldr	x5, [x19, #3160]
    27c0:	mov	w1, w0
    27c4:	ldr	x16, [x19, #3168]
    27c8:	ubfiz	w15, w2, #2, #1
    27cc:	ldrh	w5, [x5, w2, uxtw #1]
    27d0:	mov	w0, #0x0                   	// #0
    27d4:	str	w1, [x19, #64]
    27d8:	lsr	w1, w2, #1
    27dc:	ldr	w2, [x19, #1092]
    27e0:	ldrb	w1, [x16, x1]
    27e4:	add	w2, w2, #0x1
    27e8:	str	w2, [x19, #1092]
    27ec:	lsr	w1, w1, w15
    27f0:	ubfiz	w1, w1, #16, #4
    27f4:	orr	w1, w1, w5
    27f8:	str	w1, [x19, #60]
    27fc:	b	ec <BZ2_decompress+0xec>
    2800:	str	wzr, [x19, #28]
    2804:	b	2764 <BZ2_decompress+0x2764>

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <add_pair_to_block>:
       0:	ldp	w7, w4, [x0, #92]
       4:	and	w8, w7, #0xff
       8:	cmp	w4, #0x0
       c:	b.le	148 <add_pair_to_block+0x148>
      10:	ldr	w3, [x0, #648]
      14:	adrp	x5, 0 <BZ2_crc32Table>
      18:	and	w6, w7, #0xff
      1c:	add	x5, x5, #0x0
      20:	mov	w2, #0x0                   	// #0
      24:	nop
      28:	eor	w1, w6, w3, lsr #24
      2c:	add	w2, w2, #0x1
      30:	cmp	w2, w4
      34:	ldr	w1, [x5, x1, lsl #2]
      38:	eor	w3, w1, w3, lsl #8
      3c:	b.ne	28 <add_pair_to_block+0x28>  // b.any
      40:	add	x7, x0, w7, uxtw
      44:	str	w3, [x0, #648]
      48:	mov	w1, #0x1                   	// #1
      4c:	cmp	w2, #0x2
      50:	strb	w1, [x7, #128]
      54:	ldr	x2, [x0, #64]
      58:	ldrsw	x1, [x0, #108]
      5c:	add	x3, x2, x1
      60:	b.eq	f0 <add_pair_to_block+0xf0>  // b.none
      64:	cmp	w4, #0x3
      68:	b.eq	12c <add_pair_to_block+0x12c>  // b.none
      6c:	cmp	w4, #0x1
      70:	b.eq	118 <add_pair_to_block+0x118>  // b.none
      74:	sub	w1, w4, #0x4
      78:	mov	w2, #0x1                   	// #1
      7c:	add	x1, x0, w1, sxtw
      80:	strb	w2, [x1, #128]
      84:	strb	w8, [x3]
      88:	ldr	w1, [x0, #108]
      8c:	ldr	x2, [x0, #64]
      90:	add	w1, w1, #0x1
      94:	str	w1, [x0, #108]
      98:	strb	w8, [x2, w1, sxtw]
      9c:	ldr	w1, [x0, #108]
      a0:	ldr	x2, [x0, #64]
      a4:	add	w1, w1, #0x1
      a8:	str	w1, [x0, #108]
      ac:	strb	w8, [x2, w1, sxtw]
      b0:	ldr	w1, [x0, #108]
      b4:	ldr	x2, [x0, #64]
      b8:	add	w1, w1, #0x1
      bc:	str	w1, [x0, #108]
      c0:	strb	w8, [x2, w1, sxtw]
      c4:	ldr	w1, [x0, #108]
      c8:	ldr	x3, [x0, #64]
      cc:	add	w1, w1, #0x1
      d0:	ldr	w2, [x0, #96]
      d4:	str	w1, [x0, #108]
      d8:	sub	w2, w2, #0x4
      dc:	strb	w2, [x3, w1, sxtw]
      e0:	ldr	w1, [x0, #108]
      e4:	add	w1, w1, #0x1
      e8:	str	w1, [x0, #108]
      ec:	ret
      f0:	strb	w8, [x2, x1]
      f4:	ldr	w1, [x0, #108]
      f8:	ldr	x2, [x0, #64]
      fc:	add	w1, w1, #0x1
     100:	str	w1, [x0, #108]
     104:	strb	w8, [x2, w1, sxtw]
     108:	ldr	w1, [x0, #108]
     10c:	add	w1, w1, #0x1
     110:	str	w1, [x0, #108]
     114:	ret
     118:	strb	w8, [x3]
     11c:	ldr	w1, [x0, #108]
     120:	add	w1, w1, #0x1
     124:	str	w1, [x0, #108]
     128:	ret
     12c:	strb	w8, [x3]
     130:	ldr	w1, [x0, #108]
     134:	ldr	x2, [x0, #64]
     138:	add	w1, w1, #0x1
     13c:	str	w1, [x0, #108]
     140:	strb	w8, [x2, w1, sxtw]
     144:	b	f4 <add_pair_to_block+0xf4>
     148:	add	x7, x0, w7, uxtw
     14c:	mov	w1, #0x1                   	// #1
     150:	strb	w1, [x7, #128]
     154:	ldr	x3, [x0, #64]
     158:	ldrsw	x1, [x0, #108]
     15c:	add	x3, x3, x1
     160:	b	64 <add_pair_to_block+0x64>
     164:	nop

0000000000000168 <default_bzfree>:
     168:	mov	x0, x1
     16c:	cbz	x1, 174 <default_bzfree+0xc>
     170:	b	0 <free>
     174:	ret

0000000000000178 <default_bzalloc>:
     178:	mul	w0, w1, w2
     17c:	sxtw	x0, w0
     180:	b	0 <malloc>
     184:	nop

0000000000000188 <handle_compress.isra.0>:
     188:	stp	x29, x30, [sp, #-64]!
     18c:	mov	x29, sp
     190:	stp	x19, x20, [sp, #16]
     194:	mov	x19, x0
     198:	mov	w20, #0x0                   	// #0
     19c:	stp	x21, x22, [sp, #32]
     1a0:	adrp	x21, 0 <BZ2_crc32Table>
     1a4:	add	x21, x21, #0x0
     1a8:	mov	w22, #0x0                   	// #0
     1ac:	str	x23, [sp, #48]
     1b0:	mov	w23, #0x1                   	// #1
     1b4:	ldr	w0, [x19, #12]
     1b8:	b	1c4 <handle_compress.isra.0+0x3c>
     1bc:	cmp	w0, #0x2
     1c0:	b.eq	59c <handle_compress.isra.0+0x414>  // b.none
     1c4:	cmp	w0, #0x1
     1c8:	b.ne	1bc <handle_compress.isra.0+0x34>  // b.any
     1cc:	ldr	x0, [x19]
     1d0:	mov	w5, #0x0                   	// #0
     1d4:	ldr	w1, [x19, #120]
     1d8:	ldr	w2, [x0, #32]
     1dc:	b	22c <handle_compress.isra.0+0xa4>
     1e0:	cmp	w1, w3
     1e4:	b.ge	428 <handle_compress.isra.0+0x2a0>  // b.tcont
     1e8:	ldr	x2, [x19, #80]
     1ec:	mov	w5, #0x1                   	// #1
     1f0:	ldr	x0, [x0, #24]
     1f4:	ldrb	w1, [x2, w1, sxtw]
     1f8:	strb	w1, [x0]
     1fc:	ldr	x0, [x19]
     200:	ldr	w1, [x19, #120]
     204:	ldp	w2, w3, [x0, #32]
     208:	add	w1, w1, w5
     20c:	ldr	x4, [x0, #24]
     210:	str	w1, [x19, #120]
     214:	sub	w2, w2, #0x1
     218:	add	w3, w3, w5
     21c:	add	x4, x4, #0x1
     220:	str	x4, [x0, #24]
     224:	stp	w2, w3, [x0, #32]
     228:	cbz	w3, 430 <handle_compress.isra.0+0x2a8>
     22c:	ldr	w3, [x19, #116]
     230:	cbnz	w2, 1e0 <handle_compress.isra.0+0x58>
     234:	orr	w20, w5, w20
     238:	cmp	w1, w3
     23c:	b.lt	384 <handle_compress.isra.0+0x1fc>  // b.tstop
     240:	ldr	w2, [x19, #8]
     244:	cmp	w2, #0x4
     248:	b.ne	270 <handle_compress.isra.0+0xe8>  // b.any
     24c:	ldr	w0, [x19, #16]
     250:	cbnz	w0, 270 <handle_compress.isra.0+0xe8>
     254:	ldr	w0, [x19, #92]
     258:	cmp	w0, #0xff
     25c:	b.hi	384 <handle_compress.isra.0+0x1fc>  // b.pmore
     260:	ldr	w0, [x19, #96]
     264:	cmp	w0, #0x0
     268:	b.le	384 <handle_compress.isra.0+0x1fc>
     26c:	nop
     270:	add	x1, x19, #0x80
     274:	add	x0, x19, #0x180
     278:	mov	w3, #0xffffffff            	// #-1
     27c:	str	wzr, [x19, #108]
     280:	stur	xzr, [x19, #116]
     284:	str	w3, [x19, #648]
     288:	strb	wzr, [x1], #1
     28c:	cmp	x0, x1
     290:	b.ne	288 <handle_compress.isra.0+0x100>  // b.any
     294:	ldr	w0, [x19, #660]
     298:	mov	w1, #0x2                   	// #2
     29c:	str	w1, [x19, #12]
     2a0:	cmp	w2, #0x3
     2a4:	add	w0, w0, #0x1
     2a8:	str	w0, [x19, #660]
     2ac:	mov	w3, #0x0                   	// #0
     2b0:	b.eq	570 <handle_compress.isra.0+0x3e8>  // b.none
     2b4:	ldr	w6, [x19, #112]
     2b8:	cmp	w2, #0x2
     2bc:	b.eq	440 <handle_compress.isra.0+0x2b8>  // b.none
     2c0:	cmp	w6, w3
     2c4:	b.le	364 <handle_compress.isra.0+0x1dc>
     2c8:	ldr	x0, [x19]
     2cc:	mov	w2, #0x0                   	// #0
     2d0:	ldr	w5, [x0, #8]
     2d4:	nop
     2d8:	cbz	w5, 5bc <handle_compress.isra.0+0x434>
     2dc:	ldr	w1, [x19, #16]
     2e0:	cbz	w1, 530 <handle_compress.isra.0+0x3a8>
     2e4:	ldr	x2, [x0]
     2e8:	ldp	w4, w7, [x19, #92]
     2ec:	ldrb	w9, [x2]
     2f0:	cmp	w9, w4
     2f4:	b.eq	3a4 <handle_compress.isra.0+0x21c>  // b.none
     2f8:	cmp	w7, #0x1
     2fc:	b.eq	3bc <handle_compress.isra.0+0x234>  // b.none
     300:	cmp	w4, #0xff
     304:	b.ls	408 <handle_compress.isra.0+0x280>  // b.plast
     308:	ldr	w3, [x19, #108]
     30c:	stp	w9, w23, [x19, #92]
     310:	ldr	w4, [x0, #12]
     314:	add	x2, x2, #0x1
     318:	sub	w5, w5, #0x1
     31c:	str	x2, [x0]
     320:	add	w2, w4, #0x1
     324:	str	w5, [x0, #8]
     328:	str	w2, [x0, #12]
     32c:	cbnz	w2, 33c <handle_compress.isra.0+0x1b4>
     330:	ldr	w2, [x0, #16]
     334:	add	w2, w2, #0x1
     338:	str	w2, [x0, #16]
     33c:	sub	w1, w1, #0x1
     340:	str	w1, [x19, #16]
     344:	cmp	w6, w3
     348:	mov	w2, #0x1                   	// #1
     34c:	b.gt	2d8 <handle_compress.isra.0+0x150>
     350:	mov	w4, w2
     354:	ldr	w0, [x19, #8]
     358:	orr	w22, w4, w22
     35c:	cmp	w0, #0x2
     360:	b.eq	5a8 <handle_compress.isra.0+0x420>  // b.none
     364:	ldr	w0, [x19, #16]
     368:	cbz	w0, 540 <handle_compress.isra.0+0x3b8>
     36c:	ldr	w0, [x19, #108]
     370:	cmp	w0, w6
     374:	b.ge	5a8 <handle_compress.isra.0+0x420>  // b.tcont
     378:	ldr	x0, [x19]
     37c:	ldr	w0, [x0, #8]
     380:	cbnz	w0, 1b4 <handle_compress.isra.0+0x2c>
     384:	orr	w20, w22, w20
     388:	cmp	w20, #0x0
     38c:	cset	w0, ne  // ne = any
     390:	ldp	x19, x20, [sp, #16]
     394:	ldp	x21, x22, [sp, #32]
     398:	ldr	x23, [sp, #48]
     39c:	ldp	x29, x30, [sp], #64
     3a0:	ret
     3a4:	cmp	w7, #0xff
     3a8:	b.eq	408 <handle_compress.isra.0+0x280>  // b.none
     3ac:	add	w7, w7, #0x1
     3b0:	ldr	w3, [x19, #108]
     3b4:	str	w7, [x19, #96]
     3b8:	b	310 <handle_compress.isra.0+0x188>
     3bc:	ldr	w1, [x19, #648]
     3c0:	and	w0, w4, #0xff
     3c4:	add	x2, x19, w4, uxtw
     3c8:	eor	w0, w0, w1, lsr #24
     3cc:	ldr	w0, [x21, x0, lsl #2]
     3d0:	eor	w1, w0, w1, lsl #8
     3d4:	str	w1, [x19, #648]
     3d8:	strb	w7, [x2, #128]
     3dc:	ldr	x0, [x19, #64]
     3e0:	strb	w4, [x0, w3, sxtw]
     3e4:	ldr	x0, [x19]
     3e8:	ldp	w3, w6, [x19, #108]
     3ec:	ldr	w5, [x0, #8]
     3f0:	add	w3, w3, #0x1
     3f4:	ldr	w1, [x19, #16]
     3f8:	ldr	x2, [x0]
     3fc:	str	w9, [x19, #92]
     400:	str	w3, [x19, #108]
     404:	b	310 <handle_compress.isra.0+0x188>
     408:	mov	x0, x19
     40c:	bl	0 <add_pair_to_block>
     410:	ldr	x0, [x19]
     414:	ldr	w1, [x19, #16]
     418:	ldr	w6, [x19, #112]
     41c:	ldr	w5, [x0, #8]
     420:	ldr	x2, [x0]
     424:	b	308 <handle_compress.isra.0+0x180>
     428:	orr	w20, w5, w20
     42c:	b	240 <handle_compress.isra.0+0xb8>
     430:	ldr	w3, [x0, #40]
     434:	add	w3, w3, w5
     438:	str	w3, [x0, #40]
     43c:	b	22c <handle_compress.isra.0+0xa4>
     440:	mov	w4, #0x0                   	// #0
     444:	nop
     448:	cmp	w3, w6
     44c:	b.ge	354 <handle_compress.isra.0+0x1cc>  // b.tcont
     450:	ldr	x0, [x19]
     454:	ldr	w1, [x0, #8]
     458:	cbz	w1, 5d0 <handle_compress.isra.0+0x448>
     45c:	ldr	x2, [x0]
     460:	ldp	w4, w5, [x19, #92]
     464:	ldrb	w9, [x2]
     468:	cmp	w9, w4
     46c:	b.eq	4d4 <handle_compress.isra.0+0x34c>  // b.none
     470:	cmp	w5, #0x1
     474:	b.eq	4e8 <handle_compress.isra.0+0x360>  // b.none
     478:	cmp	w4, #0xff
     47c:	b.ls	4b8 <handle_compress.isra.0+0x330>  // b.plast
     480:	stp	w9, w23, [x19, #92]
     484:	ldr	w4, [x0, #12]
     488:	add	x2, x2, #0x1
     48c:	sub	w1, w1, #0x1
     490:	str	x2, [x0]
     494:	add	w2, w4, #0x1
     498:	str	w1, [x0, #8]
     49c:	str	w2, [x0, #12]
     4a0:	mov	w4, #0x1                   	// #1
     4a4:	cbnz	w2, 448 <handle_compress.isra.0+0x2c0>
     4a8:	ldr	w1, [x0, #16]
     4ac:	add	w1, w1, w4
     4b0:	str	w1, [x0, #16]
     4b4:	b	448 <handle_compress.isra.0+0x2c0>
     4b8:	mov	x0, x19
     4bc:	bl	0 <add_pair_to_block>
     4c0:	ldr	x0, [x19]
     4c4:	ldp	w3, w6, [x19, #108]
     4c8:	ldr	w1, [x0, #8]
     4cc:	ldr	x2, [x0]
     4d0:	b	480 <handle_compress.isra.0+0x2f8>
     4d4:	cmp	w5, #0xff
     4d8:	b.eq	4b8 <handle_compress.isra.0+0x330>  // b.none
     4dc:	add	w5, w5, #0x1
     4e0:	str	w5, [x19, #96]
     4e4:	b	484 <handle_compress.isra.0+0x2fc>
     4e8:	ldr	w1, [x19, #648]
     4ec:	and	w0, w4, #0xff
     4f0:	add	x2, x19, w4, uxtw
     4f4:	eor	w0, w0, w1, lsr #24
     4f8:	ldr	w0, [x21, x0, lsl #2]
     4fc:	eor	w1, w0, w1, lsl #8
     500:	str	w1, [x19, #648]
     504:	strb	w5, [x2, #128]
     508:	ldr	x0, [x19, #64]
     50c:	strb	w4, [x0, w3, sxtw]
     510:	ldr	x0, [x19]
     514:	ldp	w3, w6, [x19, #108]
     518:	ldr	w1, [x0, #8]
     51c:	add	w3, w3, #0x1
     520:	ldr	x2, [x0]
     524:	str	w9, [x19, #92]
     528:	str	w3, [x19, #108]
     52c:	b	484 <handle_compress.isra.0+0x2fc>
     530:	ldr	w0, [x19, #8]
     534:	orr	w22, w22, w2
     538:	cmp	w0, #0x2
     53c:	b.eq	36c <handle_compress.isra.0+0x1e4>  // b.none
     540:	ldr	w0, [x19, #92]
     544:	cmp	w0, #0xff
     548:	b.ls	600 <handle_compress.isra.0+0x478>  // b.plast
     54c:	ldr	w1, [x19, #8]
     550:	mov	x0, #0x100                 	// #256
     554:	stur	x0, [x19, #92]
     558:	mov	x0, x19
     55c:	cmp	w1, #0x4
     560:	cset	w1, eq  // eq = none
     564:	bl	0 <BZ2_compressBlock>
     568:	str	w23, [x19, #12]
     56c:	b	1cc <handle_compress.isra.0+0x44>
     570:	ldr	w0, [x19, #16]
     574:	cbnz	w0, 590 <handle_compress.isra.0+0x408>
     578:	ldr	w0, [x19, #92]
     57c:	cmp	w0, #0xff
     580:	b.hi	384 <handle_compress.isra.0+0x1fc>  // b.pmore
     584:	ldr	w0, [x19, #96]
     588:	cmp	w0, #0x0
     58c:	b.le	384 <handle_compress.isra.0+0x1fc>
     590:	ldr	w6, [x19, #112]
     594:	mov	w3, #0x0                   	// #0
     598:	b	2c0 <handle_compress.isra.0+0x138>
     59c:	ldr	w2, [x19, #8]
     5a0:	ldr	w3, [x19, #108]
     5a4:	b	2b4 <handle_compress.isra.0+0x12c>
     5a8:	mov	x0, x19
     5ac:	mov	w1, #0x0                   	// #0
     5b0:	bl	0 <BZ2_compressBlock>
     5b4:	str	w23, [x19, #12]
     5b8:	b	1cc <handle_compress.isra.0+0x44>
     5bc:	ldr	w0, [x19, #8]
     5c0:	orr	w22, w22, w2
     5c4:	cmp	w0, #0x2
     5c8:	b.ne	364 <handle_compress.isra.0+0x1dc>  // b.any
     5cc:	b	36c <handle_compress.isra.0+0x1e4>
     5d0:	ldr	w0, [x19, #8]
     5d4:	orr	w22, w4, w22
     5d8:	cmp	w0, #0x2
     5dc:	b.ne	364 <handle_compress.isra.0+0x1dc>  // b.any
     5e0:	orr	w20, w22, w20
     5e4:	cmp	w20, #0x0
     5e8:	cset	w0, ne  // ne = any
     5ec:	ldp	x19, x20, [sp, #16]
     5f0:	ldp	x21, x22, [sp, #32]
     5f4:	ldr	x23, [sp, #48]
     5f8:	ldp	x29, x30, [sp], #64
     5fc:	ret
     600:	mov	x0, x19
     604:	bl	0 <add_pair_to_block>
     608:	b	54c <handle_compress.isra.0+0x3c4>
     60c:	nop

0000000000000610 <BZ2_bz__AssertH__fail>:
     610:	stp	x29, x30, [sp, #-32]!
     614:	adrp	x3, 0 <add_pair_to_block>
     618:	adrp	x1, 0 <add_pair_to_block>
     61c:	mov	x29, sp
     620:	stp	x19, x20, [sp, #16]
     624:	adrp	x20, 0 <stderr>
     628:	mov	w19, w0
     62c:	ldr	x0, [x20]
     630:	mov	w2, w19
     634:	add	x3, x3, #0x0
     638:	add	x1, x1, #0x0
     63c:	bl	0 <fprintf>
     640:	cmp	w19, #0x3ef
     644:	b.eq	650 <BZ2_bz__AssertH__fail+0x40>  // b.none
     648:	mov	w0, #0x3                   	// #3
     64c:	bl	0 <exit>
     650:	ldr	x3, [x20]
     654:	adrp	x0, 0 <add_pair_to_block>
     658:	mov	x2, #0x420                 	// #1056
     65c:	mov	x1, #0x1                   	// #1
     660:	add	x0, x0, #0x0
     664:	bl	0 <fwrite>
     668:	b	648 <BZ2_bz__AssertH__fail+0x38>
     66c:	nop

0000000000000670 <BZ2_bzCompressInit>:
     670:	stp	x29, x30, [sp, #-64]!
     674:	cmp	x0, #0x0
     678:	mov	x29, sp
     67c:	stp	x19, x20, [sp, #16]
     680:	mov	x20, x0
     684:	sub	w0, w1, #0x1
     688:	ccmp	w0, #0x8, #0x2, ne  // ne = any
     68c:	b.hi	810 <BZ2_bzCompressInit+0x1a0>  // b.pmore
     690:	stp	x21, x22, [sp, #32]
     694:	cmp	w3, #0xfa
     698:	b.hi	804 <BZ2_bzCompressInit+0x194>  // b.pmore
     69c:	cmp	w3, #0x0
     6a0:	mov	w0, #0x1e                  	// #30
     6a4:	csel	w22, w3, w0, ne  // ne = any
     6a8:	stp	x23, x24, [sp, #48]
     6ac:	mov	w23, w1
     6b0:	ldr	x3, [x20, #56]
     6b4:	mov	w24, w2
     6b8:	cbz	x3, 7dc <BZ2_bzCompressInit+0x16c>
     6bc:	ldr	x0, [x20, #64]
     6c0:	cbz	x0, 7f4 <BZ2_bzCompressInit+0x184>
     6c4:	ldr	x0, [x20, #72]
     6c8:	mov	w2, #0x1                   	// #1
     6cc:	mov	w1, #0xd9d8                	// #55768
     6d0:	blr	x3
     6d4:	mov	x19, x0
     6d8:	cbz	x0, 85c <BZ2_bzCompressInit+0x1ec>
     6dc:	mov	w21, #0x86a0                	// #34464
     6e0:	mov	w2, #0x1                   	// #1
     6e4:	movk	w21, #0x1, lsl #16
     6e8:	ldr	x3, [x20, #56]
     6ec:	mul	w21, w23, w21
     6f0:	ldr	x0, [x20, #72]
     6f4:	str	x20, [x19]
     6f8:	stp	xzr, xzr, [x19, #24]
     6fc:	lsl	w1, w21, #2
     700:	str	xzr, [x19, #40]
     704:	blr	x3
     708:	mov	x2, x0
     70c:	ldr	x3, [x20, #56]
     710:	add	w1, w21, #0x22
     714:	ldr	x0, [x20, #72]
     718:	str	x2, [x19, #24]
     71c:	lsl	w1, w1, #2
     720:	mov	w2, #0x1                   	// #1
     724:	blr	x3
     728:	ldr	x3, [x20, #56]
     72c:	str	x0, [x19, #32]
     730:	ldr	x0, [x20, #72]
     734:	mov	w1, #0x40004               	// #262148
     738:	mov	w2, #0x1                   	// #1
     73c:	blr	x3
     740:	str	x0, [x19, #40]
     744:	ldr	x1, [x19, #24]
     748:	cbz	x1, 820 <BZ2_bzCompressInit+0x1b0>
     74c:	ldr	x2, [x19, #32]
     750:	cmp	x2, #0x0
     754:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     758:	b.eq	818 <BZ2_bzCompressInit+0x1a8>  // b.none
     75c:	mov	x0, #0x200000002           	// #8589934594
     760:	sub	w21, w21, #0x13
     764:	str	x0, [x19, #8]
     768:	add	x4, x19, #0x80
     76c:	stp	x1, x2, [x19, #56]
     770:	add	x5, x19, #0x180
     774:	mov	x2, #0x100                 	// #256
     778:	stp	x1, xzr, [x19, #72]
     77c:	mov	w0, #0xffffffff            	// #-1
     780:	str	w22, [x19, #88]
     784:	str	w21, [x19, #112]
     788:	str	wzr, [x19, #652]
     78c:	str	w24, [x19, #656]
     790:	str	w23, [x19, #664]
     794:	stur	xzr, [x20, #12]
     798:	stur	xzr, [x20, #36]
     79c:	str	x19, [x20, #48]
     7a0:	stur	x2, [x19, #92]
     7a4:	str	wzr, [x19, #108]
     7a8:	stur	xzr, [x19, #116]
     7ac:	str	w0, [x19, #648]
     7b0:	strb	wzr, [x4], #1
     7b4:	cmp	x4, x5
     7b8:	b.ne	7b0 <BZ2_bzCompressInit+0x140>  // b.any
     7bc:	mov	w1, #0x1                   	// #1
     7c0:	mov	w0, #0x0                   	// #0
     7c4:	ldp	x21, x22, [sp, #32]
     7c8:	ldp	x23, x24, [sp, #48]
     7cc:	str	w1, [x19, #660]
     7d0:	ldp	x19, x20, [sp, #16]
     7d4:	ldp	x29, x30, [sp], #64
     7d8:	ret
     7dc:	adrp	x0, 0 <add_pair_to_block>
     7e0:	add	x0, x0, #0x0
     7e4:	mov	x3, x0
     7e8:	str	x0, [x20, #56]
     7ec:	ldr	x0, [x20, #64]
     7f0:	cbnz	x0, 6c4 <BZ2_bzCompressInit+0x54>
     7f4:	adrp	x0, 0 <add_pair_to_block>
     7f8:	add	x0, x0, #0x0
     7fc:	str	x0, [x20, #64]
     800:	b	6c4 <BZ2_bzCompressInit+0x54>
     804:	mov	w0, #0xfffffffe            	// #-2
     808:	ldp	x21, x22, [sp, #32]
     80c:	b	7d0 <BZ2_bzCompressInit+0x160>
     810:	mov	w0, #0xfffffffe            	// #-2
     814:	b	7d0 <BZ2_bzCompressInit+0x160>
     818:	ldp	x2, x0, [x20, #64]
     81c:	blr	x2
     820:	ldr	x1, [x19, #32]
     824:	ldp	x2, x0, [x20, #64]
     828:	cbz	x1, 834 <BZ2_bzCompressInit+0x1c4>
     82c:	blr	x2
     830:	ldp	x2, x0, [x20, #64]
     834:	ldr	x1, [x19, #40]
     838:	cbz	x1, 844 <BZ2_bzCompressInit+0x1d4>
     83c:	blr	x2
     840:	ldp	x2, x0, [x20, #64]
     844:	mov	x1, x19
     848:	blr	x2
     84c:	mov	w0, #0xfffffffd            	// #-3
     850:	ldp	x21, x22, [sp, #32]
     854:	ldp	x23, x24, [sp, #48]
     858:	b	7d0 <BZ2_bzCompressInit+0x160>
     85c:	mov	w0, #0xfffffffd            	// #-3
     860:	ldp	x21, x22, [sp, #32]
     864:	ldp	x23, x24, [sp, #48]
     868:	b	7d0 <BZ2_bzCompressInit+0x160>
     86c:	nop

0000000000000870 <BZ2_bzCompress>:
     870:	stp	x29, x30, [sp, #-32]!
     874:	mov	x29, sp
     878:	stp	x19, x20, [sp, #16]
     87c:	cbz	x0, a28 <BZ2_bzCompress+0x1b8>
     880:	ldr	x20, [x0, #48]
     884:	cbz	x20, a28 <BZ2_bzCompress+0x1b8>
     888:	ldr	x2, [x20]
     88c:	cmp	x2, x0
     890:	b.ne	a28 <BZ2_bzCompress+0x1b8>  // b.any
     894:	ldr	w19, [x20, #8]
     898:	cmp	w1, #0x1
     89c:	mov	w2, #0x3                   	// #3
     8a0:	mov	w3, #0x4                   	// #4
     8a4:	mov	w4, w2
     8a8:	csel	w2, w2, w3, eq  // eq = none
     8ac:	cmp	w19, #0x3
     8b0:	b.eq	8f8 <BZ2_bzCompress+0x88>  // b.none
     8b4:	b.gt	958 <BZ2_bzCompress+0xe8>
     8b8:	cmp	w19, #0x1
     8bc:	b.eq	9bc <BZ2_bzCompress+0x14c>  // b.none
     8c0:	cmp	w19, #0x2
     8c4:	b.ne	9d0 <BZ2_bzCompress+0x160>  // b.any
     8c8:	cbz	w1, a10 <BZ2_bzCompress+0x1a0>
     8cc:	cmp	w1, #0x1
     8d0:	b.eq	9fc <BZ2_bzCompress+0x18c>  // b.none
     8d4:	cmp	w1, #0x2
     8d8:	b.ne	a28 <BZ2_bzCompress+0x1b8>  // b.any
     8dc:	ldr	w5, [x0, #8]
     8e0:	mov	w19, w2
     8e4:	str	w3, [x20, #8]
     8e8:	str	w5, [x20, #16]
     8ec:	cmp	w19, #0x3
     8f0:	b.ne	8b4 <BZ2_bzCompress+0x44>  // b.any
     8f4:	nop
     8f8:	cmp	w1, #0x1
     8fc:	b.ne	9bc <BZ2_bzCompress+0x14c>  // b.any
     900:	ldr	w0, [x0, #8]
     904:	ldr	w1, [x20, #16]
     908:	cmp	w1, w0
     90c:	b.ne	9bc <BZ2_bzCompress+0x14c>  // b.any
     910:	mov	x0, x20
     914:	bl	188 <handle_compress.isra.0>
     918:	ldr	w0, [x20, #16]
     91c:	mov	w19, #0x2                   	// #2
     920:	cbnz	w0, 9c0 <BZ2_bzCompress+0x150>
     924:	ldr	w0, [x20, #92]
     928:	cmp	w0, #0xff
     92c:	b.hi	93c <BZ2_bzCompress+0xcc>  // b.pmore
     930:	ldr	w0, [x20, #96]
     934:	cmp	w0, #0x0
     938:	b.gt	9c0 <BZ2_bzCompress+0x150>
     93c:	ldp	w0, w1, [x20, #116]
     940:	mov	w19, #0x2                   	// #2
     944:	cmp	w1, w0
     948:	b.lt	9c0 <BZ2_bzCompress+0x150>  // b.tstop
     94c:	str	w19, [x20, #8]
     950:	mov	w19, #0x1                   	// #1
     954:	b	9c0 <BZ2_bzCompress+0x150>
     958:	cmp	w19, #0x4
     95c:	b.ne	9d0 <BZ2_bzCompress+0x160>  // b.any
     960:	cmp	w1, #0x2
     964:	b.ne	9bc <BZ2_bzCompress+0x14c>  // b.any
     968:	ldr	w0, [x0, #8]
     96c:	ldr	w1, [x20, #16]
     970:	cmp	w1, w0
     974:	b.ne	9bc <BZ2_bzCompress+0x14c>  // b.any
     978:	mov	x0, x20
     97c:	bl	188 <handle_compress.isra.0>
     980:	tst	w0, #0xff
     984:	b.eq	9bc <BZ2_bzCompress+0x14c>  // b.none
     988:	ldr	w0, [x20, #16]
     98c:	cbnz	w0, 9a8 <BZ2_bzCompress+0x138>
     990:	ldr	w0, [x20, #92]
     994:	cmp	w0, #0xff
     998:	b.hi	9e4 <BZ2_bzCompress+0x174>  // b.pmore
     99c:	ldr	w0, [x20, #96]
     9a0:	cmp	w0, #0x0
     9a4:	b.le	9e4 <BZ2_bzCompress+0x174>
     9a8:	mov	w19, #0x3                   	// #3
     9ac:	mov	w0, w19
     9b0:	ldp	x19, x20, [sp, #16]
     9b4:	ldp	x29, x30, [sp], #32
     9b8:	ret
     9bc:	mov	w19, #0xffffffff            	// #-1
     9c0:	mov	w0, w19
     9c4:	ldp	x19, x20, [sp, #16]
     9c8:	ldp	x29, x30, [sp], #32
     9cc:	ret
     9d0:	mov	w19, #0x0                   	// #0
     9d4:	mov	w0, w19
     9d8:	ldp	x19, x20, [sp, #16]
     9dc:	ldp	x29, x30, [sp], #32
     9e0:	ret
     9e4:	ldp	w0, w1, [x20, #116]
     9e8:	cmp	w1, w0
     9ec:	b.lt	9a8 <BZ2_bzCompress+0x138>  // b.tstop
     9f0:	mov	w0, #0x1                   	// #1
     9f4:	str	w0, [x20, #8]
     9f8:	b	9c0 <BZ2_bzCompress+0x150>
     9fc:	ldr	w5, [x0, #8]
     a00:	mov	w19, w2
     a04:	str	w4, [x20, #8]
     a08:	str	w5, [x20, #16]
     a0c:	b	8ec <BZ2_bzCompress+0x7c>
     a10:	mov	x0, x20
     a14:	mov	w19, #0x1                   	// #1
     a18:	bl	188 <handle_compress.isra.0>
     a1c:	tst	w0, #0xff
     a20:	b.ne	9c0 <BZ2_bzCompress+0x150>  // b.any
     a24:	nop
     a28:	mov	w19, #0xfffffffe            	// #-2
     a2c:	b	9c0 <BZ2_bzCompress+0x150>

0000000000000a30 <BZ2_bzCompressEnd>:
     a30:	cbz	x0, ab0 <BZ2_bzCompressEnd+0x80>
     a34:	stp	x29, x30, [sp, #-32]!
     a38:	mov	x29, sp
     a3c:	stp	x19, x20, [sp, #16]
     a40:	mov	x19, x0
     a44:	ldr	x20, [x0, #48]
     a48:	cbz	x20, aa8 <BZ2_bzCompressEnd+0x78>
     a4c:	ldr	x0, [x20]
     a50:	cmp	x0, x19
     a54:	b.ne	aa8 <BZ2_bzCompressEnd+0x78>  // b.any
     a58:	ldr	x1, [x20, #24]
     a5c:	ldp	x2, x0, [x19, #64]
     a60:	cbz	x1, a6c <BZ2_bzCompressEnd+0x3c>
     a64:	blr	x2
     a68:	ldp	x2, x0, [x19, #64]
     a6c:	ldr	x1, [x20, #32]
     a70:	cbz	x1, a7c <BZ2_bzCompressEnd+0x4c>
     a74:	blr	x2
     a78:	ldp	x2, x0, [x19, #64]
     a7c:	ldr	x1, [x20, #40]
     a80:	cbz	x1, a8c <BZ2_bzCompressEnd+0x5c>
     a84:	blr	x2
     a88:	ldp	x2, x0, [x19, #64]
     a8c:	ldr	x1, [x19, #48]
     a90:	blr	x2
     a94:	str	xzr, [x19, #48]
     a98:	mov	w0, #0x0                   	// #0
     a9c:	ldp	x19, x20, [sp, #16]
     aa0:	ldp	x29, x30, [sp], #32
     aa4:	ret
     aa8:	mov	w0, #0xfffffffe            	// #-2
     aac:	b	a9c <BZ2_bzCompressEnd+0x6c>
     ab0:	mov	w0, #0xfffffffe            	// #-2
     ab4:	ret

0000000000000ab8 <BZ2_bzDecompressInit>:
     ab8:	cbz	x0, b94 <BZ2_bzDecompressInit+0xdc>
     abc:	stp	x29, x30, [sp, #-48]!
     ac0:	cmp	w2, #0x1
     ac4:	mov	x29, sp
     ac8:	stp	x19, x20, [sp, #16]
     acc:	mov	w20, w2
     ad0:	b.hi	b80 <BZ2_bzDecompressInit+0xc8>  // b.pmore
     ad4:	str	x21, [sp, #32]
     ad8:	cmp	w1, #0x4
     adc:	mov	w21, w1
     ae0:	b.hi	b88 <BZ2_bzDecompressInit+0xd0>  // b.pmore
     ae4:	ldr	x3, [x0, #56]
     ae8:	mov	x19, x0
     aec:	cbz	x3, b58 <BZ2_bzDecompressInit+0xa0>
     af0:	ldr	x0, [x19, #64]
     af4:	cbz	x0, b70 <BZ2_bzDecompressInit+0xb8>
     af8:	ldr	x0, [x19, #72]
     afc:	mov	w2, #0x1                   	// #1
     b00:	mov	w1, #0xfa90                	// #64144
     b04:	blr	x3
     b08:	mov	x3, x0
     b0c:	cbz	x0, b9c <BZ2_bzDecompressInit+0xe4>
     b10:	str	x19, [x3]
     b14:	mov	w1, #0xa                   	// #10
     b18:	str	x3, [x19, #48]
     b1c:	mov	w0, #0x0                   	// #0
     b20:	str	w1, [x3, #8]
     b24:	str	xzr, [x3, #32]
     b28:	str	wzr, [x3, #3188]
     b2c:	stur	xzr, [x19, #12]
     b30:	stur	xzr, [x19, #36]
     b34:	strb	w20, [x3, #44]
     b38:	stp	wzr, w21, [x3, #48]
     b3c:	ldr	x21, [sp, #32]
     b40:	str	xzr, [x3, #3152]
     b44:	str	xzr, [x3, #3160]
     b48:	str	xzr, [x3, #3168]
     b4c:	ldp	x19, x20, [sp, #16]
     b50:	ldp	x29, x30, [sp], #48
     b54:	ret
     b58:	adrp	x0, 0 <add_pair_to_block>
     b5c:	add	x0, x0, #0x0
     b60:	mov	x3, x0
     b64:	str	x0, [x19, #56]
     b68:	ldr	x0, [x19, #64]
     b6c:	cbnz	x0, af8 <BZ2_bzDecompressInit+0x40>
     b70:	adrp	x0, 0 <add_pair_to_block>
     b74:	add	x0, x0, #0x0
     b78:	str	x0, [x19, #64]
     b7c:	b	af8 <BZ2_bzDecompressInit+0x40>
     b80:	mov	w0, #0xfffffffe            	// #-2
     b84:	b	b4c <BZ2_bzDecompressInit+0x94>
     b88:	mov	w0, #0xfffffffe            	// #-2
     b8c:	ldr	x21, [sp, #32]
     b90:	b	b4c <BZ2_bzDecompressInit+0x94>
     b94:	mov	w0, #0xfffffffe            	// #-2
     b98:	ret
     b9c:	mov	w0, #0xfffffffd            	// #-3
     ba0:	ldr	x21, [sp, #32]
     ba4:	b	b4c <BZ2_bzDecompressInit+0x94>

0000000000000ba8 <BZ2_indexIntoF>:
     ba8:	mov	w5, w0
     bac:	mov	w3, #0x100                 	// #256
     bb0:	mov	w0, #0x0                   	// #0
     bb4:	nop
     bb8:	add	w2, w0, w3
     bbc:	asr	w2, w2, #1
     bc0:	ldr	w4, [x1, w2, sxtw #2]
     bc4:	cmp	w4, w5
     bc8:	csel	w3, w3, w2, le
     bcc:	csel	w0, w2, w0, le
     bd0:	sub	w2, w3, w0
     bd4:	cmp	w2, #0x1
     bd8:	b.ne	bb8 <BZ2_indexIntoF+0x10>  // b.any
     bdc:	ret

0000000000000be0 <BZ2_bzDecompress>:
     be0:	stp	x29, x30, [sp, #-48]!
     be4:	mov	x29, sp
     be8:	stp	x21, x22, [sp, #32]
     bec:	cbz	x0, 1964 <BZ2_bzDecompress+0xd84>
     bf0:	stp	x19, x20, [sp, #16]
     bf4:	ldr	x19, [x0, #48]
     bf8:	cbz	x19, 1944 <BZ2_bzDecompress+0xd64>
     bfc:	ldr	x1, [x19]
     c00:	cmp	x1, x0
     c04:	b.ne	1944 <BZ2_bzDecompress+0xd64>  // b.any
     c08:	mov	w21, #0x86a0                	// #34464
     c0c:	adrp	x20, 0 <BZ2_crc32Table>
     c10:	ldr	w1, [x19, #8]
     c14:	add	x20, x20, #0x0
     c18:	movk	w21, #0x1, lsl #16
     c1c:	b	c28 <BZ2_bzDecompress+0x48>
     c20:	cmp	w1, #0x9
     c24:	b.gt	d40 <BZ2_bzDecompress+0x160>
     c28:	cmp	w1, #0x1
     c2c:	b.eq	18e8 <BZ2_bzDecompress+0xd08>  // b.none
     c30:	cmp	w1, #0x2
     c34:	b.ne	c20 <BZ2_bzDecompress+0x40>  // b.any
     c38:	ldrb	w2, [x19, #44]
     c3c:	add	x4, x19, #0xc, lsl #12
     c40:	ldr	x0, [x19]
     c44:	ldrb	w3, [x19, #20]
     c48:	ldr	w10, [x0, #32]
     c4c:	cbz	w2, e20 <BZ2_bzDecompress+0x240>
     c50:	cbnz	w3, 1364 <BZ2_bzDecompress+0x784>
     c54:	cbz	w10, cd0 <BZ2_bzDecompress+0xf0>
     c58:	add	x6, x19, #0x448
     c5c:	mov	w7, #0x1                   	// #1
     c60:	mov	w8, #0x2                   	// #2
     c64:	mov	w9, #0x3                   	// #3
     c68:	ldr	w11, [x19, #16]
     c6c:	cbz	w11, d68 <BZ2_bzDecompress+0x188>
     c70:	ldr	x0, [x0, #24]
     c74:	ldrb	w1, [x19, #12]
     c78:	strb	w1, [x0]
     c7c:	ldr	w3, [x19, #3184]
     c80:	ldr	x0, [x19]
     c84:	eor	w1, w1, w3, lsr #24
     c88:	ldr	w10, [x19, #16]
     c8c:	ldr	x5, [x0, #24]
     c90:	sub	w10, w10, #0x1
     c94:	ldr	w11, [x20, x1, lsl #2]
     c98:	ldp	w1, w2, [x0, #32]
     c9c:	str	w10, [x19, #16]
     ca0:	eor	w3, w11, w3, lsl #8
     ca4:	str	w3, [x19, #3184]
     ca8:	sub	w1, w1, #0x1
     cac:	add	w2, w2, #0x1
     cb0:	add	x5, x5, #0x1
     cb4:	str	x5, [x0, #24]
     cb8:	stp	w1, w2, [x0, #32]
     cbc:	cbnz	w2, ccc <BZ2_bzDecompress+0xec>
     cc0:	ldr	w2, [x0, #40]
     cc4:	add	w2, w2, #0x1
     cc8:	str	w2, [x0, #40]
     ccc:	cbnz	w1, c68 <BZ2_bzDecompress+0x88>
     cd0:	ldr	w12, [x19, #1092]
     cd4:	ldr	w0, [x4, #14928]
     cd8:	add	w0, w0, #0x1
     cdc:	cmp	w0, w12
     ce0:	b.ne	10d0 <BZ2_bzDecompress+0x4f0>  // b.any
     ce4:	ldr	w0, [x19, #16]
     ce8:	cbnz	w0, 10d0 <BZ2_bzDecompress+0x4f0>
     cec:	ldr	w3, [x19, #3184]
     cf0:	ldr	w0, [x19, #52]
     cf4:	mvn	w3, w3
     cf8:	str	w3, [x19, #3184]
     cfc:	cmp	w0, #0x2
     d00:	b.gt	11a8 <BZ2_bzDecompress+0x5c8>
     d04:	cmp	w0, #0x1
     d08:	b.le	d1c <BZ2_bzDecompress+0x13c>
     d0c:	adrp	x1, 0 <stderr>
     d10:	mov	w0, #0x5d                  	// #93
     d14:	ldr	x1, [x1]
     d18:	bl	0 <fputc>
     d1c:	ldr	w0, [x19, #3176]
     d20:	ldr	w1, [x19, #3184]
     d24:	cmp	w1, w0
     d28:	b.ne	1190 <BZ2_bzDecompress+0x5b0>  // b.any
     d2c:	ldr	w0, [x19, #3188]
     d30:	mov	w2, #0xe                   	// #14
     d34:	str	w2, [x19, #8]
     d38:	eor	w0, w1, w0, ror #31
     d3c:	str	w0, [x19, #3188]
     d40:	mov	x0, x19
     d44:	bl	0 <BZ2_decompress>
     d48:	mov	w22, w0
     d4c:	cmp	w0, #0x4
     d50:	b.eq	1174 <BZ2_bzDecompress+0x594>  // b.none
     d54:	ldr	w1, [x19, #8]
     d58:	cmp	w1, #0x2
     d5c:	b.eq	c38 <BZ2_bzDecompress+0x58>  // b.none
     d60:	ldp	x19, x20, [sp, #16]
     d64:	b	1198 <BZ2_bzDecompress+0x5b8>
     d68:	ldr	w17, [x4, #14928]
     d6c:	ldr	w12, [x19, #1092]
     d70:	add	w15, w17, #0x1
     d74:	cmp	w12, w15
     d78:	b.eq	cec <BZ2_bzDecompress+0x10c>  // b.none
     d7c:	b.gt	1190 <BZ2_bzDecompress+0x5b0>
     d80:	ldr	w13, [x19, #40]
     d84:	ldp	w5, w14, [x19, #60]
     d88:	strb	w14, [x19, #12]
     d8c:	str	w7, [x19, #16]
     d90:	mul	w13, w13, w21
     d94:	cmp	w5, w13
     d98:	b.cs	1190 <BZ2_bzDecompress+0x5b0>  // b.hs, b.nlast
     d9c:	mov	w2, #0x0                   	// #0
     da0:	mov	w3, #0x100                 	// #256
     da4:	nop
     da8:	add	w1, w2, w3
     dac:	asr	w1, w1, #1
     db0:	ldr	w10, [x6, w1, sxtw #2]
     db4:	cmp	w5, w10
     db8:	csel	w3, w3, w1, ge  // ge = tcont
     dbc:	csel	w2, w1, w2, ge  // ge = tcont
     dc0:	sub	w1, w3, w2
     dc4:	cmp	w1, #0x1
     dc8:	b.ne	da8 <BZ2_bzDecompress+0x1c8>  // b.any
     dcc:	ldr	x16, [x19, #3168]
     dd0:	lsr	w1, w5, #1
     dd4:	ldr	x10, [x19, #3160]
     dd8:	ubfiz	w18, w5, #2, #1
     ddc:	ldrb	w1, [x16, w1, uxtw]
     de0:	add	w3, w12, #0x1
     de4:	cmp	w12, w17
     de8:	ldrh	w5, [x10, w5, uxtw #1]
     dec:	lsr	w1, w1, w18
     df0:	str	w3, [x19, #1092]
     df4:	ubfiz	w1, w1, #16, #4
     df8:	orr	w1, w1, w5
     dfc:	str	w1, [x19, #60]
     e00:	b.eq	e14 <BZ2_bzDecompress+0x234>  // b.none
     e04:	cmp	w14, w2, uxtb
     e08:	and	w2, w2, #0xff
     e0c:	b.eq	10e8 <BZ2_bzDecompress+0x508>  // b.none
     e10:	str	w2, [x19, #64]
     e14:	ldr	w1, [x0, #32]
     e18:	cbnz	w1, c68 <BZ2_bzDecompress+0x88>
     e1c:	b	cd0 <BZ2_bzDecompress+0xf0>
     e20:	cbz	w3, 11c8 <BZ2_bzDecompress+0x5e8>
     e24:	cbz	w10, cd0 <BZ2_bzDecompress+0xf0>
     e28:	adrp	x7, 0 <BZ2_rNums>
     e2c:	add	x7, x7, #0x0
     e30:	mov	w8, #0x1                   	// #1
     e34:	mov	w9, #0x2                   	// #2
     e38:	mov	w10, #0x3                   	// #3
     e3c:	ldr	w1, [x19, #16]
     e40:	cbz	w1, eb4 <BZ2_bzDecompress+0x2d4>
     e44:	nop
     e48:	ldr	x0, [x0, #24]
     e4c:	ldrb	w1, [x19, #12]
     e50:	strb	w1, [x0]
     e54:	ldr	w3, [x19, #3184]
     e58:	ldrb	w1, [x19, #12]
     e5c:	ldr	x0, [x19]
     e60:	eor	w1, w1, w3, lsr #24
     e64:	ldr	w6, [x19, #16]
     e68:	ldr	x5, [x0, #24]
     e6c:	sub	w6, w6, #0x1
     e70:	ldr	w11, [x20, x1, lsl #2]
     e74:	ldp	w1, w2, [x0, #32]
     e78:	str	w6, [x19, #16]
     e7c:	eor	w3, w11, w3, lsl #8
     e80:	str	w3, [x19, #3184]
     e84:	sub	w1, w1, #0x1
     e88:	add	w2, w2, #0x1
     e8c:	add	x5, x5, #0x1
     e90:	str	x5, [x0, #24]
     e94:	stp	w1, w2, [x0, #32]
     e98:	cbnz	w2, ea8 <BZ2_bzDecompress+0x2c8>
     e9c:	ldr	w2, [x0, #40]
     ea0:	add	w2, w2, #0x1
     ea4:	str	w2, [x0, #40]
     ea8:	cbz	w1, cd0 <BZ2_bzDecompress+0xf0>
     eac:	ldr	w1, [x19, #16]
     eb0:	cbnz	w1, e48 <BZ2_bzDecompress+0x268>
     eb4:	ldr	w11, [x4, #14928]
     eb8:	ldr	w5, [x19, #1092]
     ebc:	add	w15, w11, #0x1
     ec0:	cmp	w5, w15
     ec4:	b.eq	cec <BZ2_bzDecompress+0x10c>  // b.none
     ec8:	b.gt	1190 <BZ2_bzDecompress+0x5b0>
     ecc:	ldr	w6, [x19, #40]
     ed0:	ldp	w2, w13, [x19, #60]
     ed4:	strb	w13, [x19, #12]
     ed8:	str	w8, [x19, #16]
     edc:	mul	w6, w6, w21
     ee0:	cmp	w2, w6
     ee4:	b.cs	1190 <BZ2_bzDecompress+0x5b0>  // b.hs, b.nlast
     ee8:	ldr	x14, [x19, #3152]
     eec:	ldr	w1, [x19, #24]
     ef0:	ldr	w12, [x14, w2, uxtw #2]
     ef4:	lsr	w3, w12, #8
     ef8:	str	w3, [x19, #60]
     efc:	cbnz	w1, f14 <BZ2_bzDecompress+0x334>
     f00:	ldr	w1, [x19, #28]
     f04:	cmp	w1, #0x1ff
     f08:	csinc	w2, wzr, w1, eq  // eq = none
     f0c:	ldr	w1, [x7, w1, sxtw #2]
     f10:	stp	w1, w2, [x19, #24]
     f14:	sub	w1, w1, #0x1
     f18:	add	w16, w5, #0x1
     f1c:	cmp	w1, #0x1
     f20:	str	w1, [x19, #24]
     f24:	cset	w2, eq  // eq = none
     f28:	str	w16, [x19, #1092]
     f2c:	eor	w2, w2, w12
     f30:	cmp	w5, w11
     f34:	and	w2, w2, #0xff
     f38:	b.eq	10b8 <BZ2_bzDecompress+0x4d8>  // b.none
     f3c:	cmp	w13, w2
     f40:	b.eq	f54 <BZ2_bzDecompress+0x374>  // b.none
     f44:	str	w2, [x19, #64]
     f48:	ldr	w1, [x0, #32]
     f4c:	cbnz	w1, eac <BZ2_bzDecompress+0x2cc>
     f50:	b	cd0 <BZ2_bzDecompress+0xf0>
     f54:	str	w9, [x19, #16]
     f58:	cmp	w6, w3
     f5c:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
     f60:	ldr	w13, [x14, x3, lsl #2]
     f64:	lsr	w12, w13, #8
     f68:	str	w12, [x19, #60]
     f6c:	cbnz	w1, f84 <BZ2_bzDecompress+0x3a4>
     f70:	ldr	w1, [x19, #28]
     f74:	cmp	w1, #0x1ff
     f78:	csinc	w3, wzr, w1, eq  // eq = none
     f7c:	ldr	w1, [x7, w1, sxtw #2]
     f80:	stp	w1, w3, [x19, #24]
     f84:	sub	w1, w1, #0x1
     f88:	add	w11, w5, #0x2
     f8c:	cmp	w1, #0x1
     f90:	str	w1, [x19, #24]
     f94:	cset	w3, eq  // eq = none
     f98:	str	w11, [x19, #1092]
     f9c:	eor	w3, w3, w13
     fa0:	cmp	w15, w11
     fa4:	and	w3, w3, #0xff
     fa8:	b.eq	10b8 <BZ2_bzDecompress+0x4d8>  // b.none
     fac:	cmp	w2, w3
     fb0:	b.ne	10c4 <BZ2_bzDecompress+0x4e4>  // b.any
     fb4:	str	w10, [x19, #16]
     fb8:	cmp	w6, w12
     fbc:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
     fc0:	ldr	w13, [x14, x12, lsl #2]
     fc4:	lsr	w12, w13, #8
     fc8:	str	w12, [x19, #60]
     fcc:	cbnz	w1, fe4 <BZ2_bzDecompress+0x404>
     fd0:	ldr	w1, [x19, #28]
     fd4:	cmp	w1, #0x1ff
     fd8:	csinc	w3, wzr, w1, eq  // eq = none
     fdc:	ldr	w1, [x7, w1, sxtw #2]
     fe0:	stp	w1, w3, [x19, #24]
     fe4:	sub	w1, w1, #0x1
     fe8:	add	w11, w5, #0x3
     fec:	cmp	w1, #0x1
     ff0:	str	w1, [x19, #24]
     ff4:	cset	w3, eq  // eq = none
     ff8:	str	w11, [x19, #1092]
     ffc:	eor	w3, w3, w13
    1000:	cmp	w15, w11
    1004:	and	w3, w3, #0xff
    1008:	b.eq	10b8 <BZ2_bzDecompress+0x4d8>  // b.none
    100c:	cmp	w2, w3
    1010:	b.ne	10c4 <BZ2_bzDecompress+0x4e4>  // b.any
    1014:	cmp	w6, w12
    1018:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    101c:	ldr	w11, [x14, x12, lsl #2]
    1020:	lsr	w3, w11, #8
    1024:	str	w3, [x19, #60]
    1028:	cbnz	w1, 1040 <BZ2_bzDecompress+0x460>
    102c:	ldr	w1, [x19, #28]
    1030:	cmp	w1, #0x1ff
    1034:	csinc	w2, wzr, w1, eq  // eq = none
    1038:	ldr	w1, [x7, w1, sxtw #2]
    103c:	stp	w1, w2, [x19, #24]
    1040:	sub	w1, w1, #0x1
    1044:	add	w12, w5, #0x4
    1048:	cmp	w1, #0x1
    104c:	str	w1, [x19, #24]
    1050:	cset	w2, eq  // eq = none
    1054:	str	w12, [x19, #1092]
    1058:	eor	w2, w2, w11
    105c:	cmp	w6, w3
    1060:	and	w2, w2, #0xff
    1064:	add	w2, w2, #0x4
    1068:	str	w2, [x19, #16]
    106c:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1070:	ldr	w2, [x14, x3, lsl #2]
    1074:	and	w3, w2, #0xff
    1078:	lsr	w2, w2, #8
    107c:	stp	w2, w3, [x19, #60]
    1080:	cbnz	w1, 1098 <BZ2_bzDecompress+0x4b8>
    1084:	ldr	w1, [x19, #28]
    1088:	cmp	w1, #0x1ff
    108c:	csinc	w2, wzr, w1, eq  // eq = none
    1090:	ldr	w1, [x7, w1, sxtw #2]
    1094:	stp	w1, w2, [x19, #24]
    1098:	sub	w1, w1, #0x1
    109c:	str	w1, [x19, #24]
    10a0:	cmp	w1, #0x1
    10a4:	add	w2, w5, #0x5
    10a8:	cset	w1, eq  // eq = none
    10ac:	str	w2, [x19, #1092]
    10b0:	eor	w1, w1, w3
    10b4:	str	w1, [x19, #64]
    10b8:	ldr	w1, [x0, #32]
    10bc:	cbnz	w1, eac <BZ2_bzDecompress+0x2cc>
    10c0:	b	cd0 <BZ2_bzDecompress+0xf0>
    10c4:	ldr	w1, [x0, #32]
    10c8:	str	w3, [x19, #64]
    10cc:	cbnz	w1, e3c <BZ2_bzDecompress+0x25c>
    10d0:	mov	w22, #0x0                   	// #0
    10d4:	mov	w0, w22
    10d8:	ldp	x19, x20, [sp, #16]
    10dc:	ldp	x21, x22, [sp, #32]
    10e0:	ldp	x29, x30, [sp], #48
    10e4:	ret
    10e8:	str	w8, [x19, #16]
    10ec:	cmp	w13, w1
    10f0:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    10f4:	mov	w3, #0x0                   	// #0
    10f8:	mov	w5, #0x100                 	// #256
    10fc:	nop
    1100:	add	w2, w3, w5
    1104:	asr	w2, w2, #1
    1108:	ldr	w17, [x6, w2, sxtw #2]
    110c:	cmp	w1, w17
    1110:	csel	w5, w5, w2, ge  // ge = tcont
    1114:	csel	w3, w2, w3, ge  // ge = tcont
    1118:	sub	w2, w5, w3
    111c:	cmp	w2, #0x1
    1120:	b.ne	1100 <BZ2_bzDecompress+0x520>  // b.any
    1124:	lsr	w2, w1, #1
    1128:	ubfiz	x17, x1, #1, #20
    112c:	ubfiz	w1, w1, #2, #1
    1130:	add	w5, w12, #0x2
    1134:	cmp	w15, w5
    1138:	ldrb	w2, [x16, w2, uxtw]
    113c:	ldrh	w17, [x10, x17]
    1140:	str	w5, [x19, #1092]
    1144:	lsr	w1, w2, w1
    1148:	ubfiz	w1, w1, #16, #4
    114c:	orr	w1, w1, w17
    1150:	str	w1, [x19, #60]
    1154:	b.eq	e14 <BZ2_bzDecompress+0x234>  // b.none
    1158:	cmp	w14, w3, uxtb
    115c:	and	w3, w3, #0xff
    1160:	b.eq	1770 <BZ2_bzDecompress+0xb90>  // b.none
    1164:	str	w3, [x19, #64]
    1168:	ldr	w1, [x0, #32]
    116c:	cbnz	w1, c68 <BZ2_bzDecompress+0x88>
    1170:	b	10d0 <BZ2_bzDecompress+0x4f0>
    1174:	ldr	w0, [x19, #52]
    1178:	ldr	w2, [x19, #3180]
    117c:	ldr	w3, [x19, #3188]
    1180:	cmp	w0, #0x2
    1184:	b.gt	196c <BZ2_bzDecompress+0xd8c>
    1188:	cmp	w3, w2
    118c:	b.eq	d60 <BZ2_bzDecompress+0x180>  // b.none
    1190:	ldp	x19, x20, [sp, #16]
    1194:	mov	w22, #0xfffffffc            	// #-4
    1198:	mov	w0, w22
    119c:	ldp	x21, x22, [sp, #32]
    11a0:	ldp	x29, x30, [sp], #48
    11a4:	ret
    11a8:	adrp	x0, 0 <stderr>
    11ac:	ldr	w2, [x19, #3176]
    11b0:	adrp	x1, 0 <add_pair_to_block>
    11b4:	add	x1, x1, #0x0
    11b8:	ldr	x0, [x0]
    11bc:	bl	0 <fprintf>
    11c0:	ldr	w0, [x19, #52]
    11c4:	b	d04 <BZ2_bzDecompress+0x124>
    11c8:	ldr	w13, [x19, #40]
    11cc:	mov	w5, w10
    11d0:	ldr	w16, [x4, #14928]
    11d4:	ldr	w11, [x19, #16]
    11d8:	ldrb	w8, [x19, #12]
    11dc:	add	w14, w16, #0x1
    11e0:	ldp	w7, w15, [x19, #60]
    11e4:	mul	w13, w13, w21
    11e8:	ldr	w12, [x19, #1092]
    11ec:	cmp	w11, #0x0
    11f0:	ldr	w6, [x19, #3184]
    11f4:	ldr	x9, [x0, #24]
    11f8:	ldr	x17, [x19, #3152]
    11fc:	b.gt	12d0 <BZ2_bzDecompress+0x6f0>
    1200:	cmp	w14, w12
    1204:	b.lt	1190 <BZ2_bzDecompress+0x5b0>  // b.tstop
    1208:	b.eq	1958 <BZ2_bzDecompress+0xd78>  // b.none
    120c:	cmp	w13, w7
    1210:	and	w8, w15, #0xff
    1214:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1218:	ldr	w2, [x17, w7, uxtw #2]
    121c:	and	w1, w2, #0xff
    1220:	cmp	w15, w2, uxtb
    1224:	lsr	w7, w2, #8
    1228:	b.ne	1920 <BZ2_bzDecompress+0xd40>  // b.any
    122c:	cmp	w16, w12
    1230:	b.eq	191c <BZ2_bzDecompress+0xd3c>  // b.none
    1234:	cmp	w13, w7
    1238:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    123c:	mov	w2, w7
    1240:	add	w1, w12, #0x2
    1244:	cmp	w14, w1
    1248:	ldr	w0, [x17, x2, lsl #2]
    124c:	lsr	w7, w0, #8
    1250:	b.eq	17f8 <BZ2_bzDecompress+0xc18>  // b.none
    1254:	cmp	w15, w0, uxtb
    1258:	and	w0, w0, #0xff
    125c:	b.ne	17f4 <BZ2_bzDecompress+0xc14>  // b.any
    1260:	cmp	w13, w7
    1264:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1268:	mov	w2, w7
    126c:	add	w1, w12, #0x3
    1270:	cmp	w14, w1
    1274:	ldr	w0, [x17, x2, lsl #2]
    1278:	lsr	w7, w0, #8
    127c:	b.eq	1938 <BZ2_bzDecompress+0xd58>  // b.none
    1280:	cmp	w15, w0, uxtb
    1284:	and	w15, w0, #0xff
    1288:	b.ne	1938 <BZ2_bzDecompress+0xd58>  // b.any
    128c:	cmp	w13, w7
    1290:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1294:	mov	w2, w7
    1298:	ldr	w0, [x17, x2, lsl #2]
    129c:	and	w11, w0, #0xff
    12a0:	cmp	w13, w0, lsr #8
    12a4:	add	w11, w11, #0x4
    12a8:	lsr	w0, w0, #8
    12ac:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    12b0:	ldr	w2, [x17, x0, lsl #2]
    12b4:	add	w1, w12, #0x5
    12b8:	mov	w12, w1
    12bc:	and	w15, w2, #0xff
    12c0:	lsr	w7, w2, #8
    12c4:	nop
    12c8:	cmp	w11, #0x0
    12cc:	b.le	1200 <BZ2_bzDecompress+0x620>
    12d0:	cbz	w5, 1950 <BZ2_bzDecompress+0xd70>
    12d4:	cmp	w11, #0x1
    12d8:	mov	w18, w8
    12dc:	b.eq	1900 <BZ2_bzDecompress+0xd20>  // b.none
    12e0:	add	w3, w5, #0x1
    12e4:	mov	w0, w5
    12e8:	sub	w3, w3, w11
    12ec:	sub	w5, w11, w5
    12f0:	b	12f8 <BZ2_bzDecompress+0x718>
    12f4:	b.eq	1904 <BZ2_bzDecompress+0xd24>  // b.none
    12f8:	eor	w1, w8, w6, lsr #24
    12fc:	strb	w8, [x9], #1
    1300:	sub	w0, w0, #0x1
    1304:	add	w11, w5, w0
    1308:	cmp	w0, w3
    130c:	ldr	w2, [x20, x1, lsl #2]
    1310:	eor	w6, w2, w6, lsl #8
    1314:	cbnz	w0, 12f4 <BZ2_bzDecompress+0x714>
    1318:	ldr	x2, [x19]
    131c:	ldr	w3, [x2, #36]
    1320:	add	w1, w3, w10
    1324:	sub	w1, w1, w0
    1328:	str	w1, [x2, #36]
    132c:	cmp	w3, w1
    1330:	b.ls	1340 <BZ2_bzDecompress+0x760>  // b.plast
    1334:	ldr	w1, [x2, #40]
    1338:	add	w1, w1, #0x1
    133c:	str	w1, [x2, #40]
    1340:	strb	w8, [x19, #12]
    1344:	str	w11, [x19, #16]
    1348:	stp	w7, w15, [x19, #60]
    134c:	str	w12, [x19, #1092]
    1350:	str	x17, [x19, #3152]
    1354:	str	w6, [x19, #3184]
    1358:	str	x9, [x2, #24]
    135c:	str	w0, [x2, #32]
    1360:	b	cd4 <BZ2_bzDecompress+0xf4>
    1364:	cbz	w10, cd0 <BZ2_bzDecompress+0xf0>
    1368:	adrp	x9, 0 <BZ2_rNums>
    136c:	add	x7, x19, #0x448
    1370:	add	x9, x9, #0x0
    1374:	mov	w8, #0x1                   	// #1
    1378:	mov	w10, #0x2                   	// #2
    137c:	mov	w11, #0x3                   	// #3
    1380:	ldr	w12, [x19, #16]
    1384:	cbz	w12, 13f0 <BZ2_bzDecompress+0x810>
    1388:	ldr	x0, [x0, #24]
    138c:	ldrb	w1, [x19, #12]
    1390:	strb	w1, [x0]
    1394:	ldr	w3, [x19, #3184]
    1398:	ldr	x0, [x19]
    139c:	eor	w1, w1, w3, lsr #24
    13a0:	ldr	w6, [x19, #16]
    13a4:	ldr	x5, [x0, #24]
    13a8:	sub	w6, w6, #0x1
    13ac:	ldr	w12, [x20, x1, lsl #2]
    13b0:	ldp	w1, w2, [x0, #32]
    13b4:	str	w6, [x19, #16]
    13b8:	eor	w3, w12, w3, lsl #8
    13bc:	str	w3, [x19, #3184]
    13c0:	sub	w1, w1, #0x1
    13c4:	add	w2, w2, #0x1
    13c8:	add	x5, x5, #0x1
    13cc:	str	x5, [x0, #24]
    13d0:	stp	w1, w2, [x0, #32]
    13d4:	cbnz	w2, 13e4 <BZ2_bzDecompress+0x804>
    13d8:	ldr	w2, [x0, #40]
    13dc:	add	w2, w2, #0x1
    13e0:	str	w2, [x0, #40]
    13e4:	cbz	w1, cd0 <BZ2_bzDecompress+0xf0>
    13e8:	ldr	w12, [x19, #16]
    13ec:	cbnz	w12, 1388 <BZ2_bzDecompress+0x7a8>
    13f0:	ldr	w30, [x4, #14928]
    13f4:	ldr	w13, [x19, #1092]
    13f8:	add	w15, w30, #0x1
    13fc:	cmp	w13, w15
    1400:	b.eq	cec <BZ2_bzDecompress+0x10c>  // b.none
    1404:	b.gt	1190 <BZ2_bzDecompress+0x5b0>
    1408:	ldr	w14, [x19, #40]
    140c:	ldp	w5, w16, [x19, #60]
    1410:	strb	w16, [x19, #12]
    1414:	str	w8, [x19, #16]
    1418:	mul	w14, w14, w21
    141c:	cmp	w5, w14
    1420:	b.cs	1190 <BZ2_bzDecompress+0x5b0>  // b.hs, b.nlast
    1424:	mov	w2, #0x0                   	// #0
    1428:	mov	w3, #0x100                 	// #256
    142c:	nop
    1430:	add	w1, w3, w2
    1434:	asr	w1, w1, #1
    1438:	ldr	w6, [x7, w1, sxtw #2]
    143c:	cmp	w5, w6
    1440:	csel	w3, w3, w1, ge  // ge = tcont
    1444:	csel	w2, w1, w2, ge  // ge = tcont
    1448:	sub	w1, w3, w2
    144c:	cmp	w1, #0x1
    1450:	b.ne	1430 <BZ2_bzDecompress+0x850>  // b.any
    1454:	ldr	x18, [x19, #3168]
    1458:	lsr	w1, w5, #1
    145c:	ldr	x17, [x19, #3160]
    1460:	ubfiz	w6, w5, #2, #1
    1464:	ldrb	w1, [x18, w1, uxtw]
    1468:	ldr	w3, [x19, #24]
    146c:	ldrh	w5, [x17, w5, uxtw #1]
    1470:	lsr	w1, w1, w6
    1474:	ubfiz	w1, w1, #16, #4
    1478:	orr	w1, w1, w5
    147c:	str	w1, [x19, #60]
    1480:	cbnz	w3, 1498 <BZ2_bzDecompress+0x8b8>
    1484:	ldr	w3, [x19, #28]
    1488:	cmp	w3, #0x1ff
    148c:	csinc	w5, wzr, w3, eq  // eq = none
    1490:	ldr	w3, [x9, w3, sxtw #2]
    1494:	stp	w3, w5, [x19, #24]
    1498:	sub	w22, w3, #0x1
    149c:	add	w5, w13, #0x1
    14a0:	cmp	w22, #0x1
    14a4:	str	w22, [x19, #24]
    14a8:	cset	w3, eq  // eq = none
    14ac:	str	w5, [x19, #1092]
    14b0:	eor	w2, w3, w2
    14b4:	cmp	w13, w30
    14b8:	and	w2, w2, #0xff
    14bc:	b.eq	16b0 <BZ2_bzDecompress+0xad0>  // b.none
    14c0:	cmp	w16, w2
    14c4:	b.eq	16bc <BZ2_bzDecompress+0xadc>  // b.none
    14c8:	str	w2, [x19, #64]
    14cc:	ldr	w1, [x0, #32]
    14d0:	cbnz	w1, 13e8 <BZ2_bzDecompress+0x808>
    14d4:	b	cd0 <BZ2_bzDecompress+0xf0>
    14d8:	str	w11, [x19, #16]
    14dc:	cmp	w14, w1
    14e0:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    14e4:	mov	w30, #0x0                   	// #0
    14e8:	mov	w6, #0x100                 	// #256
    14ec:	nop
    14f0:	add	w5, w30, w6
    14f4:	asr	w5, w5, #1
    14f8:	ldr	w16, [x7, w5, sxtw #2]
    14fc:	cmp	w1, w16
    1500:	csel	w6, w6, w5, ge  // ge = tcont
    1504:	csel	w30, w5, w30, ge  // ge = tcont
    1508:	sub	w5, w6, w30
    150c:	cmp	w5, #0x1
    1510:	b.ne	14f0 <BZ2_bzDecompress+0x910>  // b.any
    1514:	lsr	w5, w1, #1
    1518:	ubfiz	x6, x1, #1, #20
    151c:	ubfiz	w1, w1, #2, #1
    1520:	ldrb	w5, [x18, w5, uxtw]
    1524:	ldrh	w6, [x17, x6]
    1528:	lsr	w1, w5, w1
    152c:	ubfiz	w1, w1, #16, #4
    1530:	orr	w6, w1, w6
    1534:	str	w6, [x19, #60]
    1538:	cbnz	w3, 1550 <BZ2_bzDecompress+0x970>
    153c:	ldr	w1, [x19, #28]
    1540:	cmp	w1, #0x1ff
    1544:	csinc	w5, wzr, w1, eq  // eq = none
    1548:	ldr	w3, [x9, w1, sxtw #2]
    154c:	stp	w3, w5, [x19, #24]
    1550:	sub	w3, w3, #0x1
    1554:	add	w5, w13, #0x3
    1558:	cmp	w3, #0x1
    155c:	str	w3, [x19, #24]
    1560:	cset	w1, eq  // eq = none
    1564:	str	w5, [x19, #1092]
    1568:	eor	w1, w1, w30
    156c:	cmp	w15, w5
    1570:	and	w1, w1, #0xff
    1574:	b.eq	16b0 <BZ2_bzDecompress+0xad0>  // b.none
    1578:	cmp	w2, w1
    157c:	b.ne	1804 <BZ2_bzDecompress+0xc24>  // b.any
    1580:	cmp	w14, w6
    1584:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1588:	mov	w2, #0x0                   	// #0
    158c:	mov	w5, #0x100                 	// #256
    1590:	add	w1, w2, w5
    1594:	asr	w1, w1, #1
    1598:	ldr	w15, [x7, w1, sxtw #2]
    159c:	cmp	w6, w15
    15a0:	csel	w5, w5, w1, ge  // ge = tcont
    15a4:	csel	w2, w1, w2, ge  // ge = tcont
    15a8:	sub	w1, w5, w2
    15ac:	cmp	w1, #0x1
    15b0:	b.ne	1590 <BZ2_bzDecompress+0x9b0>  // b.any
    15b4:	lsr	w5, w6, #1
    15b8:	ubfiz	x15, x6, #1, #20
    15bc:	ubfiz	w1, w6, #2, #1
    15c0:	ldrb	w5, [x18, w5, uxtw]
    15c4:	ldrh	w6, [x17, x15]
    15c8:	lsr	w5, w5, w1
    15cc:	ubfiz	w5, w5, #16, #4
    15d0:	orr	w5, w5, w6
    15d4:	str	w5, [x19, #60]
    15d8:	cbnz	w3, 15f0 <BZ2_bzDecompress+0xa10>
    15dc:	ldr	w1, [x19, #28]
    15e0:	cmp	w1, #0x1ff
    15e4:	csinc	w6, wzr, w1, eq  // eq = none
    15e8:	ldr	w3, [x9, w1, sxtw #2]
    15ec:	stp	w3, w6, [x19, #24]
    15f0:	sub	w6, w3, #0x1
    15f4:	add	w3, w13, #0x4
    15f8:	cmp	w6, #0x1
    15fc:	str	w6, [x19, #24]
    1600:	cset	w1, eq  // eq = none
    1604:	str	w3, [x19, #1092]
    1608:	eor	w1, w1, w2
    160c:	cmp	w14, w5
    1610:	and	w1, w1, #0xff
    1614:	add	w1, w1, #0x4
    1618:	str	w1, [x19, #16]
    161c:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1620:	mov	w2, #0x100                 	// #256
    1624:	nop
    1628:	add	w1, w12, w2
    162c:	asr	w1, w1, #1
    1630:	ldr	w3, [x7, w1, sxtw #2]
    1634:	cmp	w5, w3
    1638:	csel	w2, w2, w1, ge  // ge = tcont
    163c:	csel	w12, w1, w12, ge  // ge = tcont
    1640:	sub	w1, w2, w12
    1644:	cmp	w1, #0x1
    1648:	b.ne	1628 <BZ2_bzDecompress+0xa48>  // b.any
    164c:	ubfiz	x2, x5, #1, #20
    1650:	lsr	w1, w5, #1
    1654:	ubfiz	w5, w5, #2, #1
    1658:	ldrh	w2, [x17, x2]
    165c:	str	w12, [x19, #64]
    1660:	ldrb	w1, [x18, w1, uxtw]
    1664:	lsr	w1, w1, w5
    1668:	ubfiz	w1, w1, #16, #4
    166c:	orr	w1, w1, w2
    1670:	str	w1, [x19, #60]
    1674:	cbnz	w6, 168c <BZ2_bzDecompress+0xaac>
    1678:	ldr	w1, [x19, #28]
    167c:	cmp	w1, #0x1ff
    1680:	csinc	w2, wzr, w1, eq  // eq = none
    1684:	ldr	w6, [x9, w1, sxtw #2]
    1688:	stp	w6, w2, [x19, #24]
    168c:	sub	w3, w6, #0x1
    1690:	add	w13, w13, #0x5
    1694:	cmp	w3, #0x1
    1698:	str	w3, [x19, #24]
    169c:	cset	w1, eq  // eq = none
    16a0:	str	w13, [x19, #1092]
    16a4:	eor	w12, w1, w12
    16a8:	str	w12, [x19, #64]
    16ac:	nop
    16b0:	ldr	w1, [x0, #32]
    16b4:	cbnz	w1, 13e8 <BZ2_bzDecompress+0x808>
    16b8:	b	cd0 <BZ2_bzDecompress+0xf0>
    16bc:	str	w10, [x19, #16]
    16c0:	cmp	w14, w1
    16c4:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    16c8:	mov	w5, #0x0                   	// #0
    16cc:	mov	w6, #0x100                 	// #256
    16d0:	add	w3, w5, w6
    16d4:	asr	w3, w3, #1
    16d8:	ldr	w16, [x7, w3, sxtw #2]
    16dc:	cmp	w1, w16
    16e0:	csel	w6, w6, w3, ge  // ge = tcont
    16e4:	csel	w5, w3, w5, ge  // ge = tcont
    16e8:	sub	w3, w6, w5
    16ec:	cmp	w3, #0x1
    16f0:	b.ne	16d0 <BZ2_bzDecompress+0xaf0>  // b.any
    16f4:	lsr	w3, w1, #1
    16f8:	ubfiz	x6, x1, #1, #20
    16fc:	ubfiz	w1, w1, #2, #1
    1700:	ldrb	w3, [x18, w3, uxtw]
    1704:	ldrh	w6, [x17, x6]
    1708:	lsr	w1, w3, w1
    170c:	ubfiz	w1, w1, #16, #4
    1710:	orr	w1, w1, w6
    1714:	str	w1, [x19, #60]
    1718:	cbnz	w22, 1730 <BZ2_bzDecompress+0xb50>
    171c:	ldr	w3, [x19, #28]
    1720:	cmp	w3, #0x1ff
    1724:	csinc	w6, wzr, w3, eq  // eq = none
    1728:	ldr	w22, [x9, w3, sxtw #2]
    172c:	stp	w22, w6, [x19, #24]
    1730:	sub	w3, w22, #0x1
    1734:	add	w16, w13, #0x2
    1738:	cmp	w3, #0x1
    173c:	str	w3, [x19, #24]
    1740:	cset	w6, eq  // eq = none
    1744:	str	w16, [x19, #1092]
    1748:	eor	w5, w6, w5
    174c:	cmp	w15, w16
    1750:	and	w5, w5, #0xff
    1754:	b.eq	16b0 <BZ2_bzDecompress+0xad0>  // b.none
    1758:	cmp	w2, w5
    175c:	b.eq	14d8 <BZ2_bzDecompress+0x8f8>  // b.none
    1760:	str	w5, [x19, #64]
    1764:	ldr	w1, [x0, #32]
    1768:	cbnz	w1, 1380 <BZ2_bzDecompress+0x7a0>
    176c:	b	10d0 <BZ2_bzDecompress+0x4f0>
    1770:	str	w9, [x19, #16]
    1774:	cmp	w13, w1
    1778:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    177c:	mov	w17, #0x0                   	// #0
    1780:	mov	w3, #0x100                 	// #256
    1784:	nop
    1788:	add	w2, w17, w3
    178c:	asr	w2, w2, #1
    1790:	ldr	w5, [x6, w2, sxtw #2]
    1794:	cmp	w1, w5
    1798:	csel	w3, w3, w2, ge  // ge = tcont
    179c:	csel	w17, w2, w17, ge  // ge = tcont
    17a0:	sub	w2, w3, w17
    17a4:	cmp	w2, #0x1
    17a8:	b.ne	1788 <BZ2_bzDecompress+0xba8>  // b.any
    17ac:	lsr	w2, w1, #1
    17b0:	ubfiz	x5, x1, #1, #20
    17b4:	ubfiz	w1, w1, #2, #1
    17b8:	add	w3, w12, #0x3
    17bc:	cmp	w15, w3
    17c0:	ldrb	w2, [x16, w2, uxtw]
    17c4:	ldrh	w5, [x10, x5]
    17c8:	str	w3, [x19, #1092]
    17cc:	lsr	w2, w2, w1
    17d0:	ubfiz	w2, w2, #16, #4
    17d4:	orr	w2, w2, w5
    17d8:	str	w2, [x19, #60]
    17dc:	b.eq	e14 <BZ2_bzDecompress+0x234>  // b.none
    17e0:	cmp	w14, w17, uxtb
    17e4:	and	w1, w17, #0xff
    17e8:	b.eq	180c <BZ2_bzDecompress+0xc2c>  // b.none
    17ec:	str	w1, [x19, #64]
    17f0:	b	1168 <BZ2_bzDecompress+0x588>
    17f4:	mov	w15, w0
    17f8:	mov	w12, w1
    17fc:	mov	w11, #0x2                   	// #2
    1800:	b	12c8 <BZ2_bzDecompress+0x6e8>
    1804:	str	w1, [x19, #64]
    1808:	b	1764 <BZ2_bzDecompress+0xb84>
    180c:	cmp	w13, w2
    1810:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1814:	mov	w3, #0x0                   	// #0
    1818:	mov	w5, #0x100                 	// #256
    181c:	nop
    1820:	add	w1, w3, w5
    1824:	asr	w1, w1, #1
    1828:	ldr	w14, [x6, w1, sxtw #2]
    182c:	cmp	w2, w14
    1830:	csel	w5, w5, w1, ge  // ge = tcont
    1834:	csel	w3, w1, w3, ge  // ge = tcont
    1838:	sub	w1, w5, w3
    183c:	cmp	w1, #0x1
    1840:	b.ne	1820 <BZ2_bzDecompress+0xc40>  // b.any
    1844:	lsr	w15, w2, #1
    1848:	ubfiz	x14, x2, #1, #20
    184c:	and	w1, w3, #0xff
    1850:	ubfiz	w2, w2, #2, #1
    1854:	add	w1, w1, #0x4
    1858:	add	w5, w12, #0x4
    185c:	ldrb	w3, [x16, w15, uxtw]
    1860:	ldrh	w14, [x10, x14]
    1864:	str	w1, [x19, #16]
    1868:	lsr	w2, w3, w2
    186c:	str	w5, [x19, #1092]
    1870:	ubfiz	w3, w2, #16, #4
    1874:	orr	w3, w3, w14
    1878:	str	w3, [x19, #60]
    187c:	cmp	w13, w3
    1880:	b.ls	1190 <BZ2_bzDecompress+0x5b0>  // b.plast
    1884:	mov	w2, #0x100                 	// #256
    1888:	add	w1, w11, w2
    188c:	asr	w1, w1, #1
    1890:	ldr	w5, [x6, w1, sxtw #2]
    1894:	cmp	w3, w5
    1898:	csel	w2, w2, w1, ge  // ge = tcont
    189c:	csel	w11, w1, w11, ge  // ge = tcont
    18a0:	sub	w1, w2, w11
    18a4:	cmp	w1, #0x1
    18a8:	b.ne	1888 <BZ2_bzDecompress+0xca8>  // b.any
    18ac:	ubfiz	x5, x3, #1, #20
    18b0:	lsr	w2, w3, #1
    18b4:	ldr	w1, [x0, #32]
    18b8:	ubfiz	w3, w3, #2, #1
    18bc:	add	w12, w12, #0x5
    18c0:	ldrh	w5, [x10, x5]
    18c4:	str	w11, [x19, #64]
    18c8:	ldrb	w2, [x16, w2, uxtw]
    18cc:	str	w12, [x19, #1092]
    18d0:	lsr	w2, w2, w3
    18d4:	ubfiz	w2, w2, #16, #4
    18d8:	orr	w2, w2, w5
    18dc:	str	w2, [x19, #60]
    18e0:	cbnz	w1, c68 <BZ2_bzDecompress+0x88>
    18e4:	b	cd0 <BZ2_bzDecompress+0xf0>
    18e8:	mov	w22, #0xffffffff            	// #-1
    18ec:	mov	w0, w22
    18f0:	ldp	x19, x20, [sp, #16]
    18f4:	ldp	x21, x22, [sp, #32]
    18f8:	ldp	x29, x30, [sp], #48
    18fc:	ret
    1900:	mov	w0, w5
    1904:	eor	w18, w18, w6, lsr #24
    1908:	strb	w8, [x9], #1
    190c:	sub	w5, w0, #0x1
    1910:	ldr	w0, [x20, x18, lsl #2]
    1914:	eor	w6, w0, w6, lsl #8
    1918:	b	1200 <BZ2_bzDecompress+0x620>
    191c:	mov	w1, w15
    1920:	add	w12, w12, #0x1
    1924:	cbnz	w5, 198c <BZ2_bzDecompress+0xdac>
    1928:	mov	w15, w1
    192c:	mov	w0, #0x0                   	// #0
    1930:	mov	w11, #0x1                   	// #1
    1934:	b	1318 <BZ2_bzDecompress+0x738>
    1938:	mov	w12, w1
    193c:	mov	w11, #0x3                   	// #3
    1940:	b	12c8 <BZ2_bzDecompress+0x6e8>
    1944:	mov	w22, #0xfffffffe            	// #-2
    1948:	ldp	x19, x20, [sp, #16]
    194c:	b	1198 <BZ2_bzDecompress+0x5b8>
    1950:	mov	w0, #0x0                   	// #0
    1954:	b	1318 <BZ2_bzDecompress+0x738>
    1958:	mov	w0, w5
    195c:	mov	w11, #0x0                   	// #0
    1960:	b	1318 <BZ2_bzDecompress+0x738>
    1964:	mov	w22, #0xfffffffe            	// #-2
    1968:	b	1198 <BZ2_bzDecompress+0x5b8>
    196c:	adrp	x0, 0 <stderr>
    1970:	adrp	x1, 0 <add_pair_to_block>
    1974:	add	x1, x1, #0x0
    1978:	ldr	x0, [x0]
    197c:	bl	0 <fprintf>
    1980:	ldr	w2, [x19, #3180]
    1984:	ldr	w3, [x19, #3188]
    1988:	b	1188 <BZ2_bzDecompress+0x5a8>
    198c:	and	w18, w15, #0xff
    1990:	mov	w0, w5
    1994:	mov	w15, w1
    1998:	b	1904 <BZ2_bzDecompress+0xd24>
    199c:	nop

00000000000019a0 <BZ2_bzDecompressEnd>:
    19a0:	cbz	x0, 1a20 <BZ2_bzDecompressEnd+0x80>
    19a4:	stp	x29, x30, [sp, #-32]!
    19a8:	mov	x29, sp
    19ac:	stp	x19, x20, [sp, #16]
    19b0:	mov	x19, x0
    19b4:	ldr	x20, [x0, #48]
    19b8:	cbz	x20, 1a18 <BZ2_bzDecompressEnd+0x78>
    19bc:	ldr	x0, [x20]
    19c0:	cmp	x0, x19
    19c4:	b.ne	1a18 <BZ2_bzDecompressEnd+0x78>  // b.any
    19c8:	ldr	x1, [x20, #3152]
    19cc:	ldp	x2, x0, [x19, #64]
    19d0:	cbz	x1, 19dc <BZ2_bzDecompressEnd+0x3c>
    19d4:	blr	x2
    19d8:	ldp	x2, x0, [x19, #64]
    19dc:	ldr	x1, [x20, #3160]
    19e0:	cbz	x1, 19ec <BZ2_bzDecompressEnd+0x4c>
    19e4:	blr	x2
    19e8:	ldp	x2, x0, [x19, #64]
    19ec:	ldr	x1, [x20, #3168]
    19f0:	cbz	x1, 19fc <BZ2_bzDecompressEnd+0x5c>
    19f4:	blr	x2
    19f8:	ldp	x2, x0, [x19, #64]
    19fc:	ldr	x1, [x19, #48]
    1a00:	blr	x2
    1a04:	str	xzr, [x19, #48]
    1a08:	mov	w0, #0x0                   	// #0
    1a0c:	ldp	x19, x20, [sp, #16]
    1a10:	ldp	x29, x30, [sp], #32
    1a14:	ret
    1a18:	mov	w0, #0xfffffffe            	// #-2
    1a1c:	b	1a0c <BZ2_bzDecompressEnd+0x6c>
    1a20:	mov	w0, #0xfffffffe            	// #-2
    1a24:	ret

0000000000001a28 <BZ2_bzWriteOpen>:
    1a28:	stp	x29, x30, [sp, #-80]!
    1a2c:	mov	x29, sp
    1a30:	stp	x19, x20, [sp, #16]
    1a34:	mov	x20, x0
    1a38:	stp	x21, x22, [sp, #32]
    1a3c:	mov	x21, x1
    1a40:	mov	w22, w4
    1a44:	stp	x23, x24, [sp, #48]
    1a48:	mov	w23, w2
    1a4c:	mov	w24, w3
    1a50:	cbz	x0, 1b30 <BZ2_bzWriteOpen+0x108>
    1a54:	str	wzr, [x0]
    1a58:	cbz	x1, 1b0c <BZ2_bzWriteOpen+0xe4>
    1a5c:	sub	w0, w2, #0x1
    1a60:	cmp	w0, #0x8
    1a64:	b.hi	1b0c <BZ2_bzWriteOpen+0xe4>  // b.pmore
    1a68:	cmp	w4, #0xfa
    1a6c:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    1a70:	b.hi	1b0c <BZ2_bzWriteOpen+0xe4>  // b.pmore
    1a74:	mov	x0, x1
    1a78:	bl	0 <ferror>
    1a7c:	cbnz	w0, 1b74 <BZ2_bzWriteOpen+0x14c>
    1a80:	mov	x0, #0x13f0                	// #5104
    1a84:	bl	0 <malloc>
    1a88:	mov	x19, x0
    1a8c:	cbz	x0, 1bb4 <BZ2_bzWriteOpen+0x18c>
    1a90:	stp	x25, x26, [sp, #64]
    1a94:	cbz	x20, 1a9c <BZ2_bzWriteOpen+0x74>
    1a98:	str	wzr, [x20]
    1a9c:	add	x25, x19, #0x1, lsl #12
    1aa0:	str	wzr, [x19, #5096]
    1aa4:	cmp	w22, #0x0
    1aa8:	mov	w26, #0x1                   	// #1
    1aac:	mov	w3, #0x1e                  	// #30
    1ab0:	mov	x0, #0x1398                	// #5016
    1ab4:	strb	wzr, [x25, #1004]
    1ab8:	mov	w2, w24
    1abc:	str	x21, [x19]
    1ac0:	mov	w1, w23
    1ac4:	str	wzr, [x19, #5008]
    1ac8:	csel	w3, w22, w3, ne  // ne = any
    1acc:	strb	w26, [x25, #916]
    1ad0:	add	x0, x19, x0
    1ad4:	str	xzr, [x19, #5072]
    1ad8:	str	xzr, [x19, #5080]
    1adc:	str	xzr, [x19, #5088]
    1ae0:	bl	670 <BZ2_bzCompressInit>
    1ae4:	cbnz	w0, 1b98 <BZ2_bzWriteOpen+0x170>
    1ae8:	str	wzr, [x19, #5024]
    1aec:	strb	w26, [x25, #1004]
    1af0:	ldp	x25, x26, [sp, #64]
    1af4:	mov	x0, x19
    1af8:	ldp	x19, x20, [sp, #16]
    1afc:	ldp	x21, x22, [sp, #32]
    1b00:	ldp	x23, x24, [sp, #48]
    1b04:	ldp	x29, x30, [sp], #80
    1b08:	ret
    1b0c:	mov	w0, #0xfffffffe            	// #-2
    1b10:	str	w0, [x20]
    1b14:	mov	x19, #0x0                   	// #0
    1b18:	mov	x0, x19
    1b1c:	ldp	x19, x20, [sp, #16]
    1b20:	ldp	x21, x22, [sp, #32]
    1b24:	ldp	x23, x24, [sp, #48]
    1b28:	ldp	x29, x30, [sp], #80
    1b2c:	ret
    1b30:	cbz	x1, 1b58 <BZ2_bzWriteOpen+0x130>
    1b34:	sub	w0, w2, #0x1
    1b38:	cmp	w0, #0x8
    1b3c:	b.hi	1b58 <BZ2_bzWriteOpen+0x130>  // b.pmore
    1b40:	cmp	w4, #0xfa
    1b44:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    1b48:	b.hi	1b58 <BZ2_bzWriteOpen+0x130>  // b.pmore
    1b4c:	mov	x0, x1
    1b50:	bl	0 <ferror>
    1b54:	cbz	w0, 1a80 <BZ2_bzWriteOpen+0x58>
    1b58:	mov	x19, #0x0                   	// #0
    1b5c:	mov	x0, x19
    1b60:	ldp	x19, x20, [sp, #16]
    1b64:	ldp	x21, x22, [sp, #32]
    1b68:	ldp	x23, x24, [sp, #48]
    1b6c:	ldp	x29, x30, [sp], #80
    1b70:	ret
    1b74:	mov	w0, #0xfffffffa            	// #-6
    1b78:	str	w0, [x20]
    1b7c:	mov	x19, #0x0                   	// #0
    1b80:	mov	x0, x19
    1b84:	ldp	x19, x20, [sp, #16]
    1b88:	ldp	x21, x22, [sp, #32]
    1b8c:	ldp	x23, x24, [sp, #48]
    1b90:	ldp	x29, x30, [sp], #80
    1b94:	ret
    1b98:	cbz	x20, 1ba0 <BZ2_bzWriteOpen+0x178>
    1b9c:	str	w0, [x20]
    1ba0:	mov	x0, x19
    1ba4:	mov	x19, #0x0                   	// #0
    1ba8:	bl	0 <free>
    1bac:	ldp	x25, x26, [sp, #64]
    1bb0:	b	1af4 <BZ2_bzWriteOpen+0xcc>
    1bb4:	cbz	x20, 1b58 <BZ2_bzWriteOpen+0x130>
    1bb8:	mov	w0, #0xfffffffd            	// #-3
    1bbc:	str	w0, [x20]
    1bc0:	b	1af4 <BZ2_bzWriteOpen+0xcc>
    1bc4:	nop

0000000000001bc8 <BZ2_bzWrite>:
    1bc8:	stp	x29, x30, [sp, #-80]!
    1bcc:	mov	x29, sp
    1bd0:	stp	x19, x20, [sp, #16]
    1bd4:	mov	x20, x0
    1bd8:	mov	x19, x1
    1bdc:	stp	x21, x22, [sp, #32]
    1be0:	mov	x22, x2
    1be4:	mov	w21, w3
    1be8:	cbz	x0, 1c30 <BZ2_bzWrite+0x68>
    1bec:	str	wzr, [x0]
    1bf0:	cbz	x1, 1cfc <BZ2_bzWrite+0x134>
    1bf4:	str	wzr, [x1, #5096]
    1bf8:	cbz	x2, 1d30 <BZ2_bzWrite+0x168>
    1bfc:	tbnz	w21, #31, 1d2c <BZ2_bzWrite+0x164>
    1c00:	add	x0, x19, #0x1, lsl #12
    1c04:	ldrb	w0, [x0, #916]
    1c08:	cbnz	w0, 1c58 <BZ2_bzWrite+0x90>
    1c0c:	cbz	x20, 1c18 <BZ2_bzWrite+0x50>
    1c10:	mov	w0, #0xffffffff            	// #-1
    1c14:	str	w0, [x20]
    1c18:	mov	w0, #0xffffffff            	// #-1
    1c1c:	str	w0, [x19, #5096]
    1c20:	ldp	x19, x20, [sp, #16]
    1c24:	ldp	x21, x22, [sp, #32]
    1c28:	ldp	x29, x30, [sp], #80
    1c2c:	ret
    1c30:	cbz	x1, 1c20 <BZ2_bzWrite+0x58>
    1c34:	str	wzr, [x1, #5096]
    1c38:	cbnz	x2, 1bfc <BZ2_bzWrite+0x34>
    1c3c:	nop
    1c40:	mov	w0, #0xfffffffe            	// #-2
    1c44:	str	w0, [x19, #5096]
    1c48:	ldp	x19, x20, [sp, #16]
    1c4c:	ldp	x21, x22, [sp, #32]
    1c50:	ldp	x29, x30, [sp], #80
    1c54:	ret
    1c58:	ldr	x0, [x19]
    1c5c:	bl	0 <ferror>
    1c60:	cbnz	w0, 1d08 <BZ2_bzWrite+0x140>
    1c64:	cbz	w21, 1d44 <BZ2_bzWrite+0x17c>
    1c68:	stp	x23, x24, [sp, #48]
    1c6c:	mov	x0, #0x1398                	// #5016
    1c70:	add	x24, x19, #0x8
    1c74:	stp	x25, x26, [sp, #64]
    1c78:	mov	w23, #0x1388                	// #5000
    1c7c:	add	x25, x19, x0
    1c80:	mov	w26, #0x1387                	// #4999
    1c84:	str	x22, [x19, #5016]
    1c88:	str	w21, [x19, #5024]
    1c8c:	b	1c98 <BZ2_bzWrite+0xd0>
    1c90:	ldr	w0, [x19, #5024]
    1c94:	cbz	w0, 1d6c <BZ2_bzWrite+0x1a4>
    1c98:	str	x24, [x19, #5040]
    1c9c:	mov	x0, x25
    1ca0:	str	w23, [x19, #5048]
    1ca4:	mov	w1, #0x0                   	// #0
    1ca8:	bl	870 <BZ2_bzCompress>
    1cac:	cmp	w0, #0x1
    1cb0:	b.ne	1d54 <BZ2_bzWrite+0x18c>  // b.any
    1cb4:	ldr	w2, [x19, #5048]
    1cb8:	cmp	w2, w26
    1cbc:	b.hi	1c90 <BZ2_bzWrite+0xc8>  // b.pmore
    1cc0:	ldr	x3, [x19]
    1cc4:	sub	w21, w23, w2
    1cc8:	mov	x0, x24
    1ccc:	sub	w2, w23, w2
    1cd0:	mov	x1, #0x1                   	// #1
    1cd4:	bl	0 <fwrite>
    1cd8:	cmp	w21, w0
    1cdc:	b.ne	1cec <BZ2_bzWrite+0x124>  // b.any
    1ce0:	ldr	x0, [x19]
    1ce4:	bl	0 <ferror>
    1ce8:	cbz	w0, 1c90 <BZ2_bzWrite+0xc8>
    1cec:	ldp	x23, x24, [sp, #48]
    1cf0:	ldp	x25, x26, [sp, #64]
    1cf4:	cbnz	x20, 1d0c <BZ2_bzWrite+0x144>
    1cf8:	b	1d14 <BZ2_bzWrite+0x14c>
    1cfc:	mov	w0, #0xfffffffe            	// #-2
    1d00:	str	w0, [x20]
    1d04:	b	1c20 <BZ2_bzWrite+0x58>
    1d08:	cbz	x20, 1d14 <BZ2_bzWrite+0x14c>
    1d0c:	mov	w0, #0xfffffffa            	// #-6
    1d10:	str	w0, [x20]
    1d14:	mov	w0, #0xfffffffa            	// #-6
    1d18:	str	w0, [x19, #5096]
    1d1c:	ldp	x19, x20, [sp, #16]
    1d20:	ldp	x21, x22, [sp, #32]
    1d24:	ldp	x29, x30, [sp], #80
    1d28:	ret
    1d2c:	cbz	x20, 1c40 <BZ2_bzWrite+0x78>
    1d30:	mov	w0, #0xfffffffe            	// #-2
    1d34:	str	w0, [x20]
    1d38:	mov	w0, #0xfffffffe            	// #-2
    1d3c:	str	w0, [x19, #5096]
    1d40:	b	1c48 <BZ2_bzWrite+0x80>
    1d44:	cbz	x20, 1d4c <BZ2_bzWrite+0x184>
    1d48:	str	wzr, [x20]
    1d4c:	str	wzr, [x19, #5096]
    1d50:	b	1c20 <BZ2_bzWrite+0x58>
    1d54:	cbz	x20, 1d5c <BZ2_bzWrite+0x194>
    1d58:	str	w0, [x20]
    1d5c:	ldp	x23, x24, [sp, #48]
    1d60:	ldp	x25, x26, [sp, #64]
    1d64:	str	w0, [x19, #5096]
    1d68:	b	1c20 <BZ2_bzWrite+0x58>
    1d6c:	ldp	x23, x24, [sp, #48]
    1d70:	ldp	x25, x26, [sp, #64]
    1d74:	cbz	x20, 1d4c <BZ2_bzWrite+0x184>
    1d78:	str	wzr, [x20]
    1d7c:	b	1d4c <BZ2_bzWrite+0x184>

0000000000001d80 <BZ2_bzWriteClose64>:
    1d80:	stp	x29, x30, [sp, #-112]!
    1d84:	mov	x29, sp
    1d88:	stp	x19, x20, [sp, #16]
    1d8c:	mov	x20, x0
    1d90:	cbz	x1, 1f24 <BZ2_bzWriteClose64+0x1a4>
    1d94:	add	x0, x1, #0x1, lsl #12
    1d98:	mov	x19, x1
    1d9c:	ldrb	w0, [x0, #916]
    1da0:	cbnz	w0, 1dc4 <BZ2_bzWriteClose64+0x44>
    1da4:	cbz	x20, 1db0 <BZ2_bzWriteClose64+0x30>
    1da8:	mov	w0, #0xffffffff            	// #-1
    1dac:	str	w0, [x20]
    1db0:	mov	w0, #0xffffffff            	// #-1
    1db4:	str	w0, [x19, #5096]
    1db8:	ldp	x19, x20, [sp, #16]
    1dbc:	ldp	x29, x30, [sp], #112
    1dc0:	ret
    1dc4:	ldr	x0, [x1]
    1dc8:	stp	x21, x22, [sp, #32]
    1dcc:	mov	x21, x3
    1dd0:	mov	x22, x4
    1dd4:	stp	x23, x24, [sp, #48]
    1dd8:	mov	x23, x5
    1ddc:	mov	x24, x6
    1de0:	stp	x25, x26, [sp, #64]
    1de4:	mov	w25, w2
    1de8:	bl	0 <ferror>
    1dec:	cbnz	w0, 1f50 <BZ2_bzWriteClose64+0x1d0>
    1df0:	cbz	x21, 1df8 <BZ2_bzWriteClose64+0x78>
    1df4:	str	wzr, [x21]
    1df8:	cbz	x22, 1e00 <BZ2_bzWriteClose64+0x80>
    1dfc:	str	wzr, [x22]
    1e00:	cbz	x23, 1e08 <BZ2_bzWriteClose64+0x88>
    1e04:	str	wzr, [x23]
    1e08:	cbz	x24, 1e10 <BZ2_bzWriteClose64+0x90>
    1e0c:	str	wzr, [x24]
    1e10:	cbnz	w25, 1ec0 <BZ2_bzWriteClose64+0x140>
    1e14:	ldr	w0, [x19, #5096]
    1e18:	cbnz	w0, 1eb4 <BZ2_bzWriteClose64+0x134>
    1e1c:	mov	x1, #0x1398                	// #5016
    1e20:	add	x26, x19, #0x8
    1e24:	mov	w25, #0x1388                	// #5000
    1e28:	stp	x27, x28, [sp, #80]
    1e2c:	add	x27, x19, x1
    1e30:	b	1e3c <BZ2_bzWriteClose64+0xbc>
    1e34:	cmp	w28, #0x4
    1e38:	b.eq	1eb0 <BZ2_bzWriteClose64+0x130>  // b.none
    1e3c:	str	x26, [x19, #5040]
    1e40:	mov	x0, x27
    1e44:	str	w25, [x19, #5048]
    1e48:	mov	w1, #0x2                   	// #2
    1e4c:	bl	870 <BZ2_bzCompress>
    1e50:	mov	w28, w0
    1e54:	sub	w0, w0, #0x3
    1e58:	cmp	w0, #0x1
    1e5c:	b.hi	1f7c <BZ2_bzWriteClose64+0x1fc>  // b.pmore
    1e60:	ldr	w2, [x19, #5048]
    1e64:	mov	w0, #0x1387                	// #4999
    1e68:	cmp	w2, w0
    1e6c:	b.hi	1e34 <BZ2_bzWriteClose64+0xb4>  // b.pmore
    1e70:	ldr	x3, [x19]
    1e74:	sub	w5, w25, w2
    1e78:	mov	x0, x26
    1e7c:	sub	w2, w25, w2
    1e80:	mov	x1, #0x1                   	// #1
    1e84:	str	w5, [sp, #108]
    1e88:	bl	0 <fwrite>
    1e8c:	ldr	w5, [sp, #108]
    1e90:	cmp	w5, w0
    1e94:	b.ne	1ea4 <BZ2_bzWriteClose64+0x124>  // b.any
    1e98:	ldr	x0, [x19]
    1e9c:	bl	0 <ferror>
    1ea0:	cbz	w0, 1e34 <BZ2_bzWriteClose64+0xb4>
    1ea4:	ldp	x27, x28, [sp, #80]
    1ea8:	cbnz	x20, 1f54 <BZ2_bzWriteClose64+0x1d4>
    1eac:	b	1f5c <BZ2_bzWriteClose64+0x1dc>
    1eb0:	ldp	x27, x28, [sp, #80]
    1eb4:	ldr	x0, [x19]
    1eb8:	bl	0 <ferror>
    1ebc:	cbz	w0, 1f38 <BZ2_bzWriteClose64+0x1b8>
    1ec0:	cbz	x21, 1ecc <BZ2_bzWriteClose64+0x14c>
    1ec4:	ldr	w0, [x19, #5028]
    1ec8:	str	w0, [x21]
    1ecc:	cbz	x22, 1ed8 <BZ2_bzWriteClose64+0x158>
    1ed0:	ldr	w0, [x19, #5032]
    1ed4:	str	w0, [x22]
    1ed8:	cbz	x23, 1ee4 <BZ2_bzWriteClose64+0x164>
    1edc:	ldr	w0, [x19, #5052]
    1ee0:	str	w0, [x23]
    1ee4:	cbz	x24, 1ef0 <BZ2_bzWriteClose64+0x170>
    1ee8:	ldr	w0, [x19, #5056]
    1eec:	str	w0, [x24]
    1ef0:	cbz	x20, 1ef8 <BZ2_bzWriteClose64+0x178>
    1ef4:	str	wzr, [x20]
    1ef8:	str	wzr, [x19, #5096]
    1efc:	mov	x0, #0x1398                	// #5016
    1f00:	add	x0, x19, x0
    1f04:	bl	a30 <BZ2_bzCompressEnd>
    1f08:	mov	x0, x19
    1f0c:	ldp	x19, x20, [sp, #16]
    1f10:	ldp	x21, x22, [sp, #32]
    1f14:	ldp	x23, x24, [sp, #48]
    1f18:	ldp	x25, x26, [sp, #64]
    1f1c:	ldp	x29, x30, [sp], #112
    1f20:	b	0 <free>
    1f24:	cbz	x0, 1db8 <BZ2_bzWriteClose64+0x38>
    1f28:	str	wzr, [x0]
    1f2c:	ldp	x19, x20, [sp, #16]
    1f30:	ldp	x29, x30, [sp], #112
    1f34:	ret
    1f38:	ldr	x0, [x19]
    1f3c:	bl	0 <fflush>
    1f40:	ldr	x0, [x19]
    1f44:	bl	0 <ferror>
    1f48:	cbz	w0, 1ec0 <BZ2_bzWriteClose64+0x140>
    1f4c:	nop
    1f50:	cbz	x20, 1f5c <BZ2_bzWriteClose64+0x1dc>
    1f54:	mov	w0, #0xfffffffa            	// #-6
    1f58:	str	w0, [x20]
    1f5c:	mov	w0, #0xfffffffa            	// #-6
    1f60:	ldp	x21, x22, [sp, #32]
    1f64:	ldp	x23, x24, [sp, #48]
    1f68:	ldp	x25, x26, [sp, #64]
    1f6c:	str	w0, [x19, #5096]
    1f70:	ldp	x19, x20, [sp, #16]
    1f74:	ldp	x29, x30, [sp], #112
    1f78:	ret
    1f7c:	cbz	x20, 1f84 <BZ2_bzWriteClose64+0x204>
    1f80:	str	w28, [x20]
    1f84:	ldp	x21, x22, [sp, #32]
    1f88:	ldp	x23, x24, [sp, #48]
    1f8c:	ldp	x25, x26, [sp, #64]
    1f90:	str	w28, [x19, #5096]
    1f94:	ldp	x27, x28, [sp, #80]
    1f98:	b	1db8 <BZ2_bzWriteClose64+0x38>
    1f9c:	nop

0000000000001fa0 <BZ2_bzWriteClose>:
    1fa0:	mov	x5, x4
    1fa4:	mov	x6, #0x0                   	// #0
    1fa8:	mov	x4, #0x0                   	// #0
    1fac:	b	1d80 <BZ2_bzWriteClose64>

0000000000001fb0 <BZ2_bzReadOpen>:
    1fb0:	stp	x29, x30, [sp, #-80]!
    1fb4:	cmp	w3, #0x1
    1fb8:	mov	x29, sp
    1fbc:	stp	x19, x20, [sp, #16]
    1fc0:	mov	x20, x4
    1fc4:	stp	x21, x22, [sp, #32]
    1fc8:	mov	x21, x0
    1fcc:	mov	w22, w5
    1fd0:	stp	x23, x24, [sp, #48]
    1fd4:	mov	x23, x1
    1fd8:	cset	w1, hi  // hi = pmore
    1fdc:	stp	x25, x26, [sp, #64]
    1fe0:	cmp	x23, #0x0
    1fe4:	mov	w25, w3
    1fe8:	mov	w24, w2
    1fec:	csinc	w1, w1, wzr, ne  // ne = any
    1ff0:	cbz	x0, 210c <BZ2_bzReadOpen+0x15c>
    1ff4:	str	wzr, [x0]
    1ff8:	cbnz	w1, 20e4 <BZ2_bzReadOpen+0x134>
    1ffc:	cmp	w2, #0x4
    2000:	b.hi	20e4 <BZ2_bzReadOpen+0x134>  // b.pmore
    2004:	cmp	x4, #0x0
    2008:	ccmp	w5, #0x0, #0x4, eq  // eq = none
    200c:	b.ne	20e4 <BZ2_bzReadOpen+0x134>  // b.any
    2010:	cmp	x4, #0x0
    2014:	mov	w0, #0x1388                	// #5000
    2018:	ccmp	w5, w0, #0x0, ne  // ne = any
    201c:	b.hi	20e4 <BZ2_bzReadOpen+0x134>  // b.pmore
    2020:	mov	x0, x23
    2024:	bl	0 <ferror>
    2028:	cbnz	w0, 2154 <BZ2_bzReadOpen+0x1a4>
    202c:	mov	x0, #0x13f0                	// #5104
    2030:	bl	0 <malloc>
    2034:	mov	x19, x0
    2038:	cbz	x0, 2180 <BZ2_bzReadOpen+0x1d0>
    203c:	cbz	x21, 2044 <BZ2_bzReadOpen+0x94>
    2040:	str	wzr, [x21]
    2044:	add	x26, x19, #0x1, lsl #12
    2048:	str	wzr, [x19, #5096]
    204c:	cmp	w22, #0x0
    2050:	strb	wzr, [x26, #1004]
    2054:	str	x23, [x19]
    2058:	str	wzr, [x19, #5008]
    205c:	strb	wzr, [x26, #916]
    2060:	str	xzr, [x19, #5072]
    2064:	str	xzr, [x19, #5080]
    2068:	str	xzr, [x19, #5088]
    206c:	b.le	2098 <BZ2_bzReadOpen+0xe8>
    2070:	sub	w2, w22, #0x1
    2074:	add	x1, x19, #0x8
    2078:	mov	x6, #0x0                   	// #0
    207c:	nop
    2080:	ldrb	w4, [x20, x6]
    2084:	cmp	x6, x2
    2088:	strb	w4, [x1, x6]
    208c:	add	x6, x6, #0x1
    2090:	b.ne	2080 <BZ2_bzReadOpen+0xd0>  // b.any
    2094:	str	w22, [x19, #5008]
    2098:	mov	x0, #0x1398                	// #5016
    209c:	mov	w2, w25
    20a0:	mov	w1, w24
    20a4:	add	x0, x19, x0
    20a8:	bl	ab8 <BZ2_bzDecompressInit>
    20ac:	cbnz	w0, 2168 <BZ2_bzReadOpen+0x1b8>
    20b0:	ldr	w1, [x19, #5008]
    20b4:	add	x0, x19, #0x8
    20b8:	str	x0, [x19, #5016]
    20bc:	mov	w0, #0x1                   	// #1
    20c0:	str	w1, [x19, #5024]
    20c4:	strb	w0, [x26, #1004]
    20c8:	mov	x0, x19
    20cc:	ldp	x19, x20, [sp, #16]
    20d0:	ldp	x21, x22, [sp, #32]
    20d4:	ldp	x23, x24, [sp, #48]
    20d8:	ldp	x25, x26, [sp, #64]
    20dc:	ldp	x29, x30, [sp], #80
    20e0:	ret
    20e4:	mov	w0, #0xfffffffe            	// #-2
    20e8:	mov	x19, #0x0                   	// #0
    20ec:	str	w0, [x21]
    20f0:	mov	x0, x19
    20f4:	ldp	x19, x20, [sp, #16]
    20f8:	ldp	x21, x22, [sp, #32]
    20fc:	ldp	x23, x24, [sp, #48]
    2100:	ldp	x25, x26, [sp, #64]
    2104:	ldp	x29, x30, [sp], #80
    2108:	ret
    210c:	cbnz	w1, 2134 <BZ2_bzReadOpen+0x184>
    2110:	cmp	w2, #0x4
    2114:	b.hi	2134 <BZ2_bzReadOpen+0x184>  // b.pmore
    2118:	cmp	x4, #0x0
    211c:	ccmp	w5, #0x0, #0x4, eq  // eq = none
    2120:	b.ne	2134 <BZ2_bzReadOpen+0x184>  // b.any
    2124:	cmp	x4, #0x0
    2128:	mov	w0, #0x1388                	// #5000
    212c:	ccmp	w5, w0, #0x0, ne  // ne = any
    2130:	b.ls	2020 <BZ2_bzReadOpen+0x70>  // b.plast
    2134:	mov	x19, #0x0                   	// #0
    2138:	mov	x0, x19
    213c:	ldp	x19, x20, [sp, #16]
    2140:	ldp	x21, x22, [sp, #32]
    2144:	ldp	x23, x24, [sp, #48]
    2148:	ldp	x25, x26, [sp, #64]
    214c:	ldp	x29, x30, [sp], #80
    2150:	ret
    2154:	cbz	x21, 2134 <BZ2_bzReadOpen+0x184>
    2158:	mov	w0, #0xfffffffa            	// #-6
    215c:	mov	x19, #0x0                   	// #0
    2160:	str	w0, [x21]
    2164:	b	20f0 <BZ2_bzReadOpen+0x140>
    2168:	cbz	x21, 2170 <BZ2_bzReadOpen+0x1c0>
    216c:	str	w0, [x21]
    2170:	mov	x0, x19
    2174:	mov	x19, #0x0                   	// #0
    2178:	bl	0 <free>
    217c:	b	20f0 <BZ2_bzReadOpen+0x140>
    2180:	cbz	x21, 2134 <BZ2_bzReadOpen+0x184>
    2184:	mov	w0, #0xfffffffd            	// #-3
    2188:	str	w0, [x21]
    218c:	b	20f0 <BZ2_bzReadOpen+0x140>

0000000000002190 <bzopen_or_bzdopen>:
    2190:	mov	x12, #0x13f0                	// #5104
    2194:	sub	sp, sp, x12
    2198:	adrp	x4, 0 <add_pair_to_block>
    219c:	stp	x29, x30, [sp]
    21a0:	mov	x29, sp
    21a4:	ldrb	w4, [x4]
    21a8:	stp	x19, x20, [sp, #16]
    21ac:	strb	w4, [sp, #88]
    21b0:	stur	xzr, [sp, #89]
    21b4:	strb	wzr, [sp, #97]
    21b8:	cbz	x2, 235c <bzopen_or_bzdopen+0x1cc>
    21bc:	stp	x21, x22, [sp, #32]
    21c0:	mov	x20, x2
    21c4:	stp	x23, x24, [sp, #48]
    21c8:	mov	x23, x0
    21cc:	mov	w24, w3
    21d0:	stp	x25, x26, [sp, #64]
    21d4:	mov	w25, w1
    21d8:	ldrb	w19, [x2]
    21dc:	cbz	w19, 22dc <bzopen_or_bzdopen+0x14c>
    21e0:	mov	w26, #0x0                   	// #0
    21e4:	mov	w21, #0x0                   	// #0
    21e8:	mov	w22, #0x9                   	// #9
    21ec:	b	221c <bzopen_or_bzdopen+0x8c>
    21f0:	cmp	w19, #0x72
    21f4:	b.eq	22cc <bzopen_or_bzdopen+0x13c>  // b.none
    21f8:	bl	0 <__ctype_b_loc>
    21fc:	ldr	x0, [x0]
    2200:	ubfiz	x1, x19, #1, #8
    2204:	sub	w19, w19, #0x30
    2208:	ldrh	w0, [x0, x1]
    220c:	tst	x0, #0x800
    2210:	csel	w22, w19, w22, ne  // ne = any
    2214:	ldrb	w19, [x20, #1]!
    2218:	cbz	w19, 2238 <bzopen_or_bzdopen+0xa8>
    221c:	cmp	w19, #0x73
    2220:	b.eq	22d4 <bzopen_or_bzdopen+0x144>  // b.none
    2224:	cmp	w19, #0x77
    2228:	b.ne	21f0 <bzopen_or_bzdopen+0x60>  // b.any
    222c:	ldrb	w19, [x20, #1]!
    2230:	mov	w21, #0x1                   	// #1
    2234:	cbnz	w19, 221c <bzopen_or_bzdopen+0x8c>
    2238:	mov	w0, #0x77                  	// #119
    223c:	cbz	w21, 22e4 <bzopen_or_bzdopen+0x154>
    2240:	add	x19, sp, #0x58
    2244:	strh	w0, [sp, #88]
    2248:	mov	x0, x19
    224c:	bl	0 <strlen>
    2250:	mov	w1, #0x62                  	// #98
    2254:	strh	w1, [x19, x0]
    2258:	cbnz	w24, 2308 <bzopen_or_bzdopen+0x178>
    225c:	cbz	x23, 2268 <bzopen_or_bzdopen+0xd8>
    2260:	ldrb	w0, [x23]
    2264:	cbnz	w0, 2378 <bzopen_or_bzdopen+0x1e8>
    2268:	cbz	w21, 2344 <bzopen_or_bzdopen+0x1b4>
    226c:	adrp	x0, 0 <stdout>
    2270:	ldr	x20, [x0]
    2274:	cbz	x20, 2350 <bzopen_or_bzdopen+0x1c0>
    2278:	cmp	w22, #0x9
    227c:	mov	w2, #0x9                   	// #9
    2280:	csel	w2, w22, w2, le
    2284:	mov	x1, x20
    2288:	cmp	w2, #0x0
    228c:	add	x0, sp, #0x54
    2290:	csinc	w2, w2, wzr, gt
    2294:	mov	w4, #0x1e                  	// #30
    2298:	mov	w3, #0x0                   	// #0
    229c:	bl	1a28 <BZ2_bzWriteOpen>
    22a0:	mov	x19, x0
    22a4:	cbz	x19, 238c <bzopen_or_bzdopen+0x1fc>
    22a8:	ldp	x21, x22, [sp, #32]
    22ac:	ldp	x23, x24, [sp, #48]
    22b0:	ldp	x25, x26, [sp, #64]
    22b4:	mov	x0, x19
    22b8:	mov	x12, #0x13f0                	// #5104
    22bc:	ldp	x29, x30, [sp]
    22c0:	ldp	x19, x20, [sp, #16]
    22c4:	add	sp, sp, x12
    22c8:	ret
    22cc:	mov	w21, #0x0                   	// #0
    22d0:	b	2214 <bzopen_or_bzdopen+0x84>
    22d4:	mov	w26, #0x1                   	// #1
    22d8:	b	2214 <bzopen_or_bzdopen+0x84>
    22dc:	mov	w22, #0x9                   	// #9
    22e0:	mov	w26, #0x0                   	// #0
    22e4:	add	x19, sp, #0x58
    22e8:	mov	w0, #0x72                  	// #114
    22ec:	strh	w0, [sp, #88]
    22f0:	mov	x0, x19
    22f4:	bl	0 <strlen>
    22f8:	mov	w21, #0x0                   	// #0
    22fc:	mov	w1, #0x62                  	// #98
    2300:	strh	w1, [x19, x0]
    2304:	cbz	w24, 225c <bzopen_or_bzdopen+0xcc>
    2308:	mov	x1, x19
    230c:	mov	w0, w25
    2310:	bl	0 <fdopen>
    2314:	mov	x20, x0
    2318:	cbz	x20, 2350 <bzopen_or_bzdopen+0x1c0>
    231c:	cbnz	w21, 2278 <bzopen_or_bzdopen+0xe8>
    2320:	mov	w3, w26
    2324:	add	x4, sp, #0x68
    2328:	mov	x1, x20
    232c:	add	x0, sp, #0x54
    2330:	mov	w5, #0x0                   	// #0
    2334:	mov	w2, #0x0                   	// #0
    2338:	bl	1fb0 <BZ2_bzReadOpen>
    233c:	mov	x19, x0
    2340:	b	22a4 <bzopen_or_bzdopen+0x114>
    2344:	adrp	x0, 0 <stdin>
    2348:	ldr	x20, [x0]
    234c:	cbnz	x20, 2320 <bzopen_or_bzdopen+0x190>
    2350:	ldp	x21, x22, [sp, #32]
    2354:	ldp	x23, x24, [sp, #48]
    2358:	ldp	x25, x26, [sp, #64]
    235c:	mov	x19, #0x0                   	// #0
    2360:	mov	x12, #0x13f0                	// #5104
    2364:	mov	x0, x19
    2368:	ldp	x29, x30, [sp]
    236c:	ldp	x19, x20, [sp, #16]
    2370:	add	sp, sp, x12
    2374:	ret
    2378:	mov	x1, x19
    237c:	mov	x0, x23
    2380:	bl	0 <fopen64>
    2384:	mov	x20, x0
    2388:	b	2318 <bzopen_or_bzdopen+0x188>
    238c:	adrp	x0, 0 <stdin>
    2390:	ldr	x0, [x0]
    2394:	cmp	x0, x20
    2398:	b.eq	2350 <bzopen_or_bzdopen+0x1c0>  // b.none
    239c:	adrp	x0, 0 <stdout>
    23a0:	ldr	x0, [x0]
    23a4:	cmp	x0, x20
    23a8:	b.eq	2350 <bzopen_or_bzdopen+0x1c0>  // b.none
    23ac:	mov	x0, x20
    23b0:	bl	0 <fclose>
    23b4:	ldp	x21, x22, [sp, #32]
    23b8:	ldp	x23, x24, [sp, #48]
    23bc:	ldp	x25, x26, [sp, #64]
    23c0:	b	22b4 <bzopen_or_bzdopen+0x124>
    23c4:	nop

00000000000023c8 <BZ2_bzReadClose>:
    23c8:	stp	x29, x30, [sp, #-32]!
    23cc:	mov	x29, sp
    23d0:	str	x19, [sp, #16]
    23d4:	mov	x19, x1
    23d8:	cbz	x0, 2428 <BZ2_bzReadClose+0x60>
    23dc:	str	wzr, [x0]
    23e0:	cbz	x1, 241c <BZ2_bzReadClose+0x54>
    23e4:	add	x1, x1, #0x1, lsl #12
    23e8:	str	wzr, [x19, #5096]
    23ec:	ldrb	w2, [x1, #916]
    23f0:	cbnz	w2, 240c <BZ2_bzReadClose+0x44>
    23f4:	ldrb	w0, [x1, #1004]
    23f8:	cbnz	w0, 2444 <BZ2_bzReadClose+0x7c>
    23fc:	mov	x0, x19
    2400:	ldr	x19, [sp, #16]
    2404:	ldp	x29, x30, [sp], #32
    2408:	b	0 <free>
    240c:	mov	w1, #0xffffffff            	// #-1
    2410:	str	w1, [x0]
    2414:	mov	w0, #0xffffffff            	// #-1
    2418:	str	w0, [x19, #5096]
    241c:	ldr	x19, [sp, #16]
    2420:	ldp	x29, x30, [sp], #32
    2424:	ret
    2428:	cbz	x1, 241c <BZ2_bzReadClose+0x54>
    242c:	add	x1, x1, #0x1, lsl #12
    2430:	str	wzr, [x19, #5096]
    2434:	ldrb	w0, [x1, #916]
    2438:	cbnz	w0, 2414 <BZ2_bzReadClose+0x4c>
    243c:	ldrb	w0, [x1, #1004]
    2440:	cbz	w0, 23fc <BZ2_bzReadClose+0x34>
    2444:	mov	x0, #0x1398                	// #5016
    2448:	add	x0, x19, x0
    244c:	bl	19a0 <BZ2_bzDecompressEnd>
    2450:	mov	x0, x19
    2454:	ldr	x19, [sp, #16]
    2458:	ldp	x29, x30, [sp], #32
    245c:	b	0 <free>

0000000000002460 <BZ2_bzRead>:
    2460:	stp	x29, x30, [sp, #-80]!
    2464:	mov	x29, sp
    2468:	stp	x19, x20, [sp, #16]
    246c:	mov	x19, x1
    2470:	stp	x21, x22, [sp, #32]
    2474:	mov	x21, x0
    2478:	mov	w22, w3
    247c:	cbz	x0, 2598 <BZ2_bzRead+0x138>
    2480:	str	wzr, [x0]
    2484:	cbz	x1, 25c8 <BZ2_bzRead+0x168>
    2488:	str	wzr, [x1, #5096]
    248c:	cbz	x2, 25ec <BZ2_bzRead+0x18c>
    2490:	tbnz	w22, #31, 25e8 <BZ2_bzRead+0x188>
    2494:	add	x0, x19, #0x1, lsl #12
    2498:	ldrb	w0, [x0, #916]
    249c:	cbnz	w0, 25f8 <BZ2_bzRead+0x198>
    24a0:	cbz	w22, 2624 <BZ2_bzRead+0x1c4>
    24a4:	stp	x23, x24, [sp, #48]
    24a8:	mov	x0, #0x1398                	// #5016
    24ac:	add	x24, x19, #0x8
    24b0:	str	x25, [sp, #64]
    24b4:	add	x23, x19, x0
    24b8:	str	x2, [x19, #5040]
    24bc:	str	w22, [x19, #5048]
    24c0:	b	24d4 <BZ2_bzRead+0x74>
    24c4:	cmp	w0, #0x4
    24c8:	b.eq	269c <BZ2_bzRead+0x23c>  // b.none
    24cc:	ldr	w0, [x19, #5048]
    24d0:	cbz	w0, 257c <BZ2_bzRead+0x11c>
    24d4:	ldr	x0, [x19]
    24d8:	bl	0 <ferror>
    24dc:	mov	w20, w0
    24e0:	cbnz	w0, 2648 <BZ2_bzRead+0x1e8>
    24e4:	ldr	w0, [x19, #5024]
    24e8:	cbnz	w0, 2538 <BZ2_bzRead+0xd8>
    24ec:	ldr	x25, [x19]
    24f0:	mov	x0, x25
    24f4:	bl	0 <fgetc>
    24f8:	cmn	w0, #0x1
    24fc:	b.eq	2538 <BZ2_bzRead+0xd8>  // b.none
    2500:	mov	x1, x25
    2504:	bl	0 <ungetc>
    2508:	ldr	x3, [x19]
    250c:	mov	x0, x24
    2510:	mov	x2, #0x1388                	// #5000
    2514:	mov	x1, #0x1                   	// #1
    2518:	bl	0 <fread>
    251c:	mov	x25, x0
    2520:	ldr	x0, [x19]
    2524:	bl	0 <ferror>
    2528:	cbnz	w0, 2648 <BZ2_bzRead+0x1e8>
    252c:	str	w25, [x19, #5008]
    2530:	str	x24, [x19, #5016]
    2534:	str	w25, [x19, #5024]
    2538:	mov	x0, x23
    253c:	bl	be0 <BZ2_bzDecompress>
    2540:	tst	w0, #0xfffffffb
    2544:	b.ne	266c <BZ2_bzRead+0x20c>  // b.any
    2548:	cbnz	w0, 24c4 <BZ2_bzRead+0x64>
    254c:	ldr	x20, [x19]
    2550:	mov	x0, x20
    2554:	bl	0 <fgetc>
    2558:	cmn	w0, #0x1
    255c:	b.eq	256c <BZ2_bzRead+0x10c>  // b.none
    2560:	mov	x1, x20
    2564:	bl	0 <ungetc>
    2568:	b	24cc <BZ2_bzRead+0x6c>
    256c:	ldr	w0, [x19, #5024]
    2570:	cbnz	w0, 24cc <BZ2_bzRead+0x6c>
    2574:	ldr	w0, [x19, #5048]
    2578:	cbnz	w0, 2684 <BZ2_bzRead+0x224>
    257c:	cbz	x21, 2584 <BZ2_bzRead+0x124>
    2580:	str	wzr, [x21]
    2584:	mov	w20, w22
    2588:	ldp	x23, x24, [sp, #48]
    258c:	ldr	x25, [sp, #64]
    2590:	str	wzr, [x19, #5096]
    2594:	b	25b4 <BZ2_bzRead+0x154>
    2598:	cbz	x1, 25d0 <BZ2_bzRead+0x170>
    259c:	str	wzr, [x1, #5096]
    25a0:	cbnz	x2, 2490 <BZ2_bzRead+0x30>
    25a4:	nop
    25a8:	mov	w0, #0xfffffffe            	// #-2
    25ac:	mov	w20, #0x0                   	// #0
    25b0:	str	w0, [x19, #5096]
    25b4:	mov	w0, w20
    25b8:	ldp	x19, x20, [sp, #16]
    25bc:	ldp	x21, x22, [sp, #32]
    25c0:	ldp	x29, x30, [sp], #80
    25c4:	ret
    25c8:	mov	w0, #0xfffffffe            	// #-2
    25cc:	str	w0, [x21]
    25d0:	mov	w20, #0x0                   	// #0
    25d4:	mov	w0, w20
    25d8:	ldp	x19, x20, [sp, #16]
    25dc:	ldp	x21, x22, [sp, #32]
    25e0:	ldp	x29, x30, [sp], #80
    25e4:	ret
    25e8:	cbz	x21, 25a8 <BZ2_bzRead+0x148>
    25ec:	mov	w0, #0xfffffffe            	// #-2
    25f0:	str	w0, [x21]
    25f4:	b	25a8 <BZ2_bzRead+0x148>
    25f8:	cbz	x21, 2604 <BZ2_bzRead+0x1a4>
    25fc:	mov	w0, #0xffffffff            	// #-1
    2600:	str	w0, [x21]
    2604:	mov	w0, #0xffffffff            	// #-1
    2608:	str	w0, [x19, #5096]
    260c:	mov	w20, #0x0                   	// #0
    2610:	mov	w0, w20
    2614:	ldp	x19, x20, [sp, #16]
    2618:	ldp	x21, x22, [sp, #32]
    261c:	ldp	x29, x30, [sp], #80
    2620:	ret
    2624:	cbz	x21, 262c <BZ2_bzRead+0x1cc>
    2628:	str	wzr, [x21]
    262c:	str	wzr, [x19, #5096]
    2630:	mov	w20, #0x0                   	// #0
    2634:	mov	w0, w20
    2638:	ldp	x19, x20, [sp, #16]
    263c:	ldp	x21, x22, [sp, #32]
    2640:	ldp	x29, x30, [sp], #80
    2644:	ret
    2648:	cbz	x21, 2654 <BZ2_bzRead+0x1f4>
    264c:	mov	w0, #0xfffffffa            	// #-6
    2650:	str	w0, [x21]
    2654:	mov	w0, #0xfffffffa            	// #-6
    2658:	mov	w20, #0x0                   	// #0
    265c:	ldp	x23, x24, [sp, #48]
    2660:	ldr	x25, [sp, #64]
    2664:	str	w0, [x19, #5096]
    2668:	b	25b4 <BZ2_bzRead+0x154>
    266c:	cbz	x21, 2674 <BZ2_bzRead+0x214>
    2670:	str	w0, [x21]
    2674:	ldp	x23, x24, [sp, #48]
    2678:	ldr	x25, [sp, #64]
    267c:	str	w0, [x19, #5096]
    2680:	b	25b4 <BZ2_bzRead+0x154>
    2684:	cbz	x21, 2690 <BZ2_bzRead+0x230>
    2688:	mov	w0, #0xfffffff9            	// #-7
    268c:	str	w0, [x21]
    2690:	mov	w0, #0xfffffff9            	// #-7
    2694:	mov	w20, #0x0                   	// #0
    2698:	b	2674 <BZ2_bzRead+0x214>
    269c:	cbz	x21, 26a4 <BZ2_bzRead+0x244>
    26a0:	str	w0, [x21]
    26a4:	ldr	w20, [x19, #5048]
    26a8:	mov	w0, #0x4                   	// #4
    26ac:	ldp	x23, x24, [sp, #48]
    26b0:	sub	w20, w22, w20
    26b4:	ldr	x25, [sp, #64]
    26b8:	str	w0, [x19, #5096]
    26bc:	b	25b4 <BZ2_bzRead+0x154>

00000000000026c0 <BZ2_bzReadGetUnused>:
    26c0:	cbz	x1, 2714 <BZ2_bzReadGetUnused+0x54>
    26c4:	ldr	w4, [x1, #5096]
    26c8:	cmp	w4, #0x4
    26cc:	b.eq	26e8 <BZ2_bzReadGetUnused+0x28>  // b.none
    26d0:	cbz	x0, 26dc <BZ2_bzReadGetUnused+0x1c>
    26d4:	mov	w2, #0xffffffff            	// #-1
    26d8:	str	w2, [x0]
    26dc:	mov	w0, #0xffffffff            	// #-1
    26e0:	str	w0, [x1, #5096]
    26e4:	ret
    26e8:	cmp	x2, #0x0
    26ec:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    26f0:	b.eq	2724 <BZ2_bzReadGetUnused+0x64>  // b.none
    26f4:	cbz	x0, 26fc <BZ2_bzReadGetUnused+0x3c>
    26f8:	str	wzr, [x0]
    26fc:	ldr	w0, [x1, #5024]
    2700:	str	wzr, [x1, #5096]
    2704:	str	w0, [x3]
    2708:	ldr	x0, [x1, #5016]
    270c:	str	x0, [x2]
    2710:	ret
    2714:	cbz	x0, 26e4 <BZ2_bzReadGetUnused+0x24>
    2718:	mov	w1, #0xfffffffe            	// #-2
    271c:	str	w1, [x0]
    2720:	ret
    2724:	cbz	x0, 2730 <BZ2_bzReadGetUnused+0x70>
    2728:	mov	w2, #0xfffffffe            	// #-2
    272c:	str	w2, [x0]
    2730:	mov	w0, #0xfffffffe            	// #-2
    2734:	str	w0, [x1, #5096]
    2738:	ret
    273c:	nop

0000000000002740 <BZ2_bzBuffToBuffCompress>:
    2740:	stp	x29, x30, [sp, #-144]!
    2744:	cmp	x0, #0x0
    2748:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    274c:	mov	x29, sp
    2750:	stp	x19, x20, [sp, #16]
    2754:	b.eq	2868 <BZ2_bzBuffToBuffCompress+0x128>  // b.none
    2758:	stp	x21, x22, [sp, #32]
    275c:	cmp	x2, #0x0
    2760:	mov	x22, x0
    2764:	str	x23, [sp, #48]
    2768:	sub	w0, w4, #0x1
    276c:	mov	x20, x1
    2770:	mov	x23, x2
    2774:	mov	w1, w4
    2778:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    277c:	b.hi	2858 <BZ2_bzBuffToBuffCompress+0x118>  // b.pmore
    2780:	cmp	w6, #0xfa
    2784:	mov	w2, w5
    2788:	ccmp	w5, #0x4, #0x2, ls  // ls = plast
    278c:	b.hi	2858 <BZ2_bzBuffToBuffCompress+0x118>  // b.pmore
    2790:	cmp	w6, #0x0
    2794:	mov	w21, w3
    2798:	add	x0, sp, #0x40
    279c:	mov	w3, #0x1e                  	// #30
    27a0:	csel	w3, w6, w3, ne  // ne = any
    27a4:	stp	xzr, xzr, [sp, #120]
    27a8:	str	xzr, [sp, #136]
    27ac:	bl	670 <BZ2_bzCompressInit>
    27b0:	mov	w19, w0
    27b4:	cbz	w0, 27d0 <BZ2_bzBuffToBuffCompress+0x90>
    27b8:	ldp	x21, x22, [sp, #32]
    27bc:	ldr	x23, [sp, #48]
    27c0:	mov	w0, w19
    27c4:	ldp	x19, x20, [sp, #16]
    27c8:	ldp	x29, x30, [sp], #144
    27cc:	ret
    27d0:	ldr	w2, [x20]
    27d4:	mov	w1, #0x2                   	// #2
    27d8:	add	x0, sp, #0x40
    27dc:	str	x23, [sp, #64]
    27e0:	str	w21, [sp, #72]
    27e4:	str	x22, [sp, #88]
    27e8:	str	w2, [sp, #96]
    27ec:	bl	870 <BZ2_bzCompress>
    27f0:	mov	w1, w0
    27f4:	cmp	w0, #0x3
    27f8:	b.eq	2870 <BZ2_bzBuffToBuffCompress+0x130>  // b.none
    27fc:	cmp	w0, #0x4
    2800:	b.eq	2828 <BZ2_bzBuffToBuffCompress+0xe8>  // b.none
    2804:	mov	w19, w1
    2808:	add	x0, sp, #0x40
    280c:	bl	a30 <BZ2_bzCompressEnd>
    2810:	mov	w0, w19
    2814:	ldp	x19, x20, [sp, #16]
    2818:	ldp	x21, x22, [sp, #32]
    281c:	ldr	x23, [sp, #48]
    2820:	ldp	x29, x30, [sp], #144
    2824:	ret
    2828:	ldr	w1, [x20]
    282c:	add	x0, sp, #0x40
    2830:	ldr	w2, [sp, #96]
    2834:	sub	w1, w1, w2
    2838:	str	w1, [x20]
    283c:	bl	a30 <BZ2_bzCompressEnd>
    2840:	mov	w0, w19
    2844:	ldp	x19, x20, [sp, #16]
    2848:	ldp	x21, x22, [sp, #32]
    284c:	ldr	x23, [sp, #48]
    2850:	ldp	x29, x30, [sp], #144
    2854:	ret
    2858:	mov	w19, #0xfffffffe            	// #-2
    285c:	ldp	x21, x22, [sp, #32]
    2860:	ldr	x23, [sp, #48]
    2864:	b	27c0 <BZ2_bzBuffToBuffCompress+0x80>
    2868:	mov	w19, #0xfffffffe            	// #-2
    286c:	b	27c0 <BZ2_bzBuffToBuffCompress+0x80>
    2870:	add	x0, sp, #0x40
    2874:	mov	w19, #0xfffffff8            	// #-8
    2878:	bl	a30 <BZ2_bzCompressEnd>
    287c:	ldp	x21, x22, [sp, #32]
    2880:	ldr	x23, [sp, #48]
    2884:	b	27c0 <BZ2_bzBuffToBuffCompress+0x80>

0000000000002888 <BZ2_bzBuffToBuffDecompress>:
    2888:	stp	x29, x30, [sp, #-144]!
    288c:	cmp	x0, #0x0
    2890:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    2894:	mov	x29, sp
    2898:	stp	x19, x20, [sp, #16]
    289c:	b.eq	29c8 <BZ2_bzBuffToBuffDecompress+0x140>  // b.none
    28a0:	stp	x21, x22, [sp, #32]
    28a4:	mov	x22, x2
    28a8:	cmp	x22, #0x0
    28ac:	mov	w2, w4
    28b0:	ccmp	w4, #0x1, #0x2, ne  // ne = any
    28b4:	b.hi	29bc <BZ2_bzBuffToBuffDecompress+0x134>  // b.pmore
    28b8:	mov	x20, x1
    28bc:	cmp	w5, #0x4
    28c0:	mov	w1, w5
    28c4:	b.hi	29bc <BZ2_bzBuffToBuffDecompress+0x134>  // b.pmore
    28c8:	mov	x21, x0
    28cc:	add	x0, sp, #0x40
    28d0:	str	x23, [sp, #48]
    28d4:	mov	w23, w3
    28d8:	stp	xzr, xzr, [sp, #120]
    28dc:	str	xzr, [sp, #136]
    28e0:	bl	ab8 <BZ2_bzDecompressInit>
    28e4:	mov	w19, w0
    28e8:	cbz	w0, 2904 <BZ2_bzBuffToBuffDecompress+0x7c>
    28ec:	ldp	x21, x22, [sp, #32]
    28f0:	ldr	x23, [sp, #48]
    28f4:	mov	w0, w19
    28f8:	ldp	x19, x20, [sp, #16]
    28fc:	ldp	x29, x30, [sp], #144
    2900:	ret
    2904:	ldr	w1, [x20]
    2908:	add	x0, sp, #0x40
    290c:	str	x22, [sp, #64]
    2910:	str	w23, [sp, #72]
    2914:	str	x21, [sp, #88]
    2918:	str	w1, [sp, #96]
    291c:	bl	be0 <BZ2_bzDecompress>
    2920:	mov	w1, w0
    2924:	cbz	w0, 2984 <BZ2_bzBuffToBuffDecompress+0xfc>
    2928:	cmp	w0, #0x4
    292c:	b.eq	2954 <BZ2_bzBuffToBuffDecompress+0xcc>  // b.none
    2930:	mov	w19, w1
    2934:	add	x0, sp, #0x40
    2938:	bl	19a0 <BZ2_bzDecompressEnd>
    293c:	mov	w0, w19
    2940:	ldp	x19, x20, [sp, #16]
    2944:	ldp	x21, x22, [sp, #32]
    2948:	ldr	x23, [sp, #48]
    294c:	ldp	x29, x30, [sp], #144
    2950:	ret
    2954:	ldr	w1, [x20]
    2958:	add	x0, sp, #0x40
    295c:	ldr	w2, [sp, #96]
    2960:	sub	w1, w1, w2
    2964:	str	w1, [x20]
    2968:	bl	19a0 <BZ2_bzDecompressEnd>
    296c:	mov	w0, w19
    2970:	ldp	x19, x20, [sp, #16]
    2974:	ldp	x21, x22, [sp, #32]
    2978:	ldr	x23, [sp, #48]
    297c:	ldp	x29, x30, [sp], #144
    2980:	ret
    2984:	ldr	w0, [sp, #96]
    2988:	cbz	w0, 29a4 <BZ2_bzBuffToBuffDecompress+0x11c>
    298c:	add	x0, sp, #0x40
    2990:	mov	w19, #0xfffffff9            	// #-7
    2994:	bl	19a0 <BZ2_bzDecompressEnd>
    2998:	ldp	x21, x22, [sp, #32]
    299c:	ldr	x23, [sp, #48]
    29a0:	b	28f4 <BZ2_bzBuffToBuffDecompress+0x6c>
    29a4:	add	x0, sp, #0x40
    29a8:	mov	w19, #0xfffffff8            	// #-8
    29ac:	bl	19a0 <BZ2_bzDecompressEnd>
    29b0:	ldp	x21, x22, [sp, #32]
    29b4:	ldr	x23, [sp, #48]
    29b8:	b	28f4 <BZ2_bzBuffToBuffDecompress+0x6c>
    29bc:	mov	w19, #0xfffffffe            	// #-2
    29c0:	ldp	x21, x22, [sp, #32]
    29c4:	b	28f4 <BZ2_bzBuffToBuffDecompress+0x6c>
    29c8:	mov	w19, #0xfffffffe            	// #-2
    29cc:	b	28f4 <BZ2_bzBuffToBuffDecompress+0x6c>

00000000000029d0 <BZ2_bzlibVersion>:
    29d0:	adrp	x0, 0 <add_pair_to_block>
    29d4:	add	x0, x0, #0x0
    29d8:	ret
    29dc:	nop

00000000000029e0 <BZ2_bzopen>:
    29e0:	mov	x2, x1
    29e4:	mov	w3, #0x0                   	// #0
    29e8:	mov	w1, #0xffffffff            	// #-1
    29ec:	b	2190 <bzopen_or_bzdopen>

00000000000029f0 <BZ2_bzdopen>:
    29f0:	mov	x2, x1
    29f4:	mov	w3, #0x1                   	// #1
    29f8:	mov	w1, w0
    29fc:	mov	x0, #0x0                   	// #0
    2a00:	b	2190 <bzopen_or_bzdopen>
    2a04:	nop

0000000000002a08 <BZ2_bzread>:
    2a08:	mov	w3, w2
    2a0c:	ldr	w2, [x0, #5096]
    2a10:	cmp	w2, #0x4
    2a14:	b.eq	2a44 <BZ2_bzread+0x3c>  // b.none
    2a18:	stp	x29, x30, [sp, #-32]!
    2a1c:	mov	x2, x1
    2a20:	mov	x1, x0
    2a24:	mov	x29, sp
    2a28:	add	x0, sp, #0x1c
    2a2c:	bl	2460 <BZ2_bzRead>
    2a30:	ldr	w1, [sp, #28]
    2a34:	ldp	x29, x30, [sp], #32
    2a38:	tst	w1, #0xfffffffb
    2a3c:	csinv	w0, w0, wzr, eq  // eq = none
    2a40:	ret
    2a44:	mov	w0, #0x0                   	// #0
    2a48:	ret
    2a4c:	nop

0000000000002a50 <BZ2_bzwrite>:
    2a50:	stp	x29, x30, [sp, #-48]!
    2a54:	mov	x29, sp
    2a58:	str	x19, [sp, #16]
    2a5c:	mov	w19, w2
    2a60:	mov	w3, w19
    2a64:	mov	x2, x1
    2a68:	mov	x1, x0
    2a6c:	add	x0, sp, #0x2c
    2a70:	bl	1bc8 <BZ2_bzWrite>
    2a74:	ldr	w0, [sp, #44]
    2a78:	cmp	w0, #0x0
    2a7c:	csinv	w0, w19, wzr, eq  // eq = none
    2a80:	ldr	x19, [sp, #16]
    2a84:	ldp	x29, x30, [sp], #48
    2a88:	ret
    2a8c:	nop

0000000000002a90 <BZ2_bzflush>:
    2a90:	mov	w0, #0x0                   	// #0
    2a94:	ret

0000000000002a98 <BZ2_bzclose>:
    2a98:	cbz	x0, 2b48 <BZ2_bzclose+0xb0>
    2a9c:	stp	x29, x30, [sp, #-48]!
    2aa0:	mov	x29, sp
    2aa4:	stp	x19, x20, [sp, #16]
    2aa8:	mov	x19, x0
    2aac:	add	x0, x0, #0x1, lsl #12
    2ab0:	ldr	x20, [x19]
    2ab4:	ldrb	w0, [x0, #916]
    2ab8:	cbnz	w0, 2afc <BZ2_bzclose+0x64>
    2abc:	mov	x1, x19
    2ac0:	add	x0, sp, #0x2c
    2ac4:	bl	23c8 <BZ2_bzReadClose>
    2ac8:	adrp	x0, 0 <stdin>
    2acc:	ldr	x0, [x0]
    2ad0:	cmp	x0, x20
    2ad4:	b.eq	2af0 <BZ2_bzclose+0x58>  // b.none
    2ad8:	adrp	x0, 0 <stdout>
    2adc:	ldr	x0, [x0]
    2ae0:	cmp	x0, x20
    2ae4:	b.eq	2af0 <BZ2_bzclose+0x58>  // b.none
    2ae8:	mov	x0, x20
    2aec:	bl	0 <fclose>
    2af0:	ldp	x19, x20, [sp, #16]
    2af4:	ldp	x29, x30, [sp], #48
    2af8:	ret
    2afc:	add	x0, sp, #0x2c
    2b00:	mov	x1, x19
    2b04:	mov	x6, #0x0                   	// #0
    2b08:	mov	x5, #0x0                   	// #0
    2b0c:	mov	x4, #0x0                   	// #0
    2b10:	mov	x3, #0x0                   	// #0
    2b14:	mov	w2, #0x0                   	// #0
    2b18:	bl	1d80 <BZ2_bzWriteClose64>
    2b1c:	ldr	w0, [sp, #44]
    2b20:	cbz	w0, 2ac8 <BZ2_bzclose+0x30>
    2b24:	mov	x1, x19
    2b28:	mov	x6, #0x0                   	// #0
    2b2c:	mov	x5, #0x0                   	// #0
    2b30:	mov	x4, #0x0                   	// #0
    2b34:	mov	x3, #0x0                   	// #0
    2b38:	mov	w2, #0x1                   	// #1
    2b3c:	mov	x0, #0x0                   	// #0
    2b40:	bl	1d80 <BZ2_bzWriteClose64>
    2b44:	b	2ac8 <BZ2_bzclose+0x30>
    2b48:	ret
    2b4c:	nop

0000000000002b50 <BZ2_bzerror>:
    2b50:	ldr	w0, [x0, #5096]
    2b54:	adrp	x2, 0 <add_pair_to_block>
    2b58:	add	x2, x2, #0x0
    2b5c:	cmp	w0, #0x0
    2b60:	add	x2, x2, #0x10
    2b64:	csel	w0, w0, wzr, le
    2b68:	str	w0, [x1]
    2b6c:	neg	w0, w0
    2b70:	ldr	x0, [x2, w0, sxtw #3]
    2b74:	ret
