In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_clang_-O3:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	mov	w0, #0x10                  	// #16
  10:	mov	x29, sp
  14:	bl	0 <emalloc>
  18:	adrp	x8, 0 <suite_create>
  1c:	add	x8, x8, #0x0
  20:	cmp	x19, #0x0
  24:	csel	x8, x8, x19, eq  // eq = none
  28:	mov	x20, x0
  2c:	str	x8, [x0]
  30:	bl	0 <check_list_create>
  34:	str	x0, [x20, #8]
  38:	mov	x0, x20
  3c:	ldp	x20, x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <suite_tcase>:
  48:	stp	x29, x30, [sp, #-32]!
  4c:	stp	x20, x19, [sp, #16]
  50:	mov	x29, sp
  54:	cbz	x0, a4 <suite_tcase+0x5c>
  58:	ldr	x20, [x0, #8]
  5c:	mov	x19, x1
  60:	mov	x0, x20
  64:	bl	0 <check_list_front>
  68:	mov	x0, x20
  6c:	bl	0 <check_list_at_end>
  70:	cbnz	w0, a0 <suite_tcase+0x58>
  74:	mov	x0, x20
  78:	bl	0 <check_list_val>
  7c:	ldr	x1, [x0]
  80:	mov	x0, x19
  84:	bl	0 <strcmp>
  88:	cbz	w0, b0 <suite_tcase+0x68>
  8c:	mov	x0, x20
  90:	bl	0 <check_list_advance>
  94:	mov	x0, x20
  98:	bl	0 <check_list_at_end>
  9c:	cbz	w0, 74 <suite_tcase+0x2c>
  a0:	mov	w0, wzr
  a4:	ldp	x20, x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret
  b0:	mov	w0, #0x1                   	// #1
  b4:	ldp	x20, x19, [sp, #16]
  b8:	ldp	x29, x30, [sp], #32
  bc:	ret

00000000000000c0 <tcase_create>:
  c0:	str	d8, [sp, #-48]!
  c4:	stp	x20, x19, [sp, #32]
  c8:	mov	x20, x0
  cc:	mov	w0, #0x48                  	// #72
  d0:	stp	x29, x30, [sp, #16]
  d4:	mov	x29, sp
  d8:	bl	0 <emalloc>
  dc:	adrp	x8, 0 <suite_create>
  e0:	add	x8, x8, #0x0
  e4:	cmp	x20, #0x0
  e8:	csel	x8, x8, x20, eq  // eq = none
  ec:	mov	x19, x0
  f0:	str	x8, [x0]
  f4:	adrp	x0, 0 <suite_create>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <getenv>
 100:	cbz	x0, 140 <tcase_create+0x80>
 104:	add	x1, x29, #0x8
 108:	mov	x20, x0
 10c:	str	xzr, [x29, #8]
 110:	bl	0 <strtod>
 114:	fcmp	d0, #0.0
 118:	fmov	d8, #4.000000000000000000e+00
 11c:	b.lt	144 <tcase_create+0x84>  // b.tstop
 120:	ldr	x8, [x29, #8]
 124:	cmp	x8, x20
 128:	b.eq	144 <tcase_create+0x84>  // b.none
 12c:	ldrb	w8, [x8]
 130:	fmov	d1, #4.000000000000000000e+00
 134:	cmp	w8, #0x0
 138:	fcsel	d8, d0, d1, eq  // eq = none
 13c:	b	144 <tcase_create+0x84>
 140:	fmov	d8, #4.000000000000000000e+00
 144:	adrp	x0, 0 <suite_create>
 148:	add	x0, x0, #0x0
 14c:	bl	0 <getenv>
 150:	cbz	x0, 188 <tcase_create+0xc8>
 154:	add	x1, x29, #0x8
 158:	mov	x20, x0
 15c:	str	xzr, [x29, #8]
 160:	bl	0 <strtod>
 164:	fcmp	d0, #0.0
 168:	b.lt	188 <tcase_create+0xc8>  // b.tstop
 16c:	ldr	x8, [x29, #8]
 170:	cmp	x8, x20
 174:	b.eq	188 <tcase_create+0xc8>  // b.none
 178:	ldrb	w8, [x8]
 17c:	fmul	d0, d8, d0
 180:	cmp	w8, #0x0
 184:	fcsel	d8, d0, d8, eq  // eq = none
 188:	mov	x9, #0xcd6500000000        	// #225833675390976
 18c:	frintm	d0, d8
 190:	movk	x9, #0x41cd, lsl #48
 194:	fsub	d0, d8, d0
 198:	fmov	d1, x9
 19c:	fmul	d0, d0, d1
 1a0:	fcvtms	x8, d8
 1a4:	fcvtzs	x9, d0
 1a8:	stp	x8, x9, [x19, #8]
 1ac:	bl	0 <check_list_create>
 1b0:	str	x0, [x19, #24]
 1b4:	bl	0 <check_list_create>
 1b8:	str	x0, [x19, #32]
 1bc:	bl	0 <check_list_create>
 1c0:	str	x0, [x19, #48]
 1c4:	bl	0 <check_list_create>
 1c8:	str	x0, [x19, #40]
 1cc:	bl	0 <check_list_create>
 1d0:	str	x0, [x19, #56]
 1d4:	bl	0 <check_list_create>
 1d8:	str	x0, [x19, #64]
 1dc:	mov	x0, x19
 1e0:	ldp	x20, x19, [sp, #32]
 1e4:	ldp	x29, x30, [sp, #16]
 1e8:	ldr	d8, [sp], #48
 1ec:	ret

00000000000001f0 <tag_string_to_list>:
 1f0:	stp	x29, x30, [sp, #-48]!
 1f4:	str	x21, [sp, #16]
 1f8:	stp	x20, x19, [sp, #32]
 1fc:	mov	x29, sp
 200:	mov	x20, x0
 204:	bl	0 <check_list_create>
 208:	mov	x19, x0
 20c:	cbz	x20, 25c <tag_string_to_list+0x6c>
 210:	mov	x0, x20
 214:	bl	0 <strdup>
 218:	adrp	x1, 0 <suite_create>
 21c:	add	x1, x1, #0x0
 220:	mov	x20, x0
 224:	bl	0 <strtok>
 228:	cbz	x0, 254 <tag_string_to_list+0x64>
 22c:	adrp	x21, 0 <suite_create>
 230:	add	x21, x21, #0x0
 234:	bl	0 <strdup>
 238:	mov	x1, x0
 23c:	mov	x0, x19
 240:	bl	0 <check_list_add_end>
 244:	mov	x0, xzr
 248:	mov	x1, x21
 24c:	bl	0 <strtok>
 250:	cbnz	x0, 234 <tag_string_to_list+0x44>
 254:	mov	x0, x20
 258:	bl	0 <free>
 25c:	mov	x0, x19
 260:	ldp	x20, x19, [sp, #32]
 264:	ldr	x21, [sp, #16]
 268:	ldp	x29, x30, [sp], #48
 26c:	ret

0000000000000270 <tcase_set_tags>:
 270:	stp	x29, x30, [sp, #-32]!
 274:	stp	x20, x19, [sp, #16]
 278:	mov	x19, x0
 27c:	ldr	x0, [x0, #64]
 280:	mov	x20, x1
 284:	mov	x29, sp
 288:	cbz	x0, 2a0 <tcase_set_tags+0x30>
 28c:	adrp	x1, 0 <free>
 290:	add	x1, x1, #0x0
 294:	bl	0 <check_list_apply>
 298:	ldr	x0, [x19, #64]
 29c:	bl	0 <check_list_free>
 2a0:	mov	x0, x20
 2a4:	bl	1f0 <tag_string_to_list>
 2a8:	str	x0, [x19, #64]
 2ac:	ldp	x20, x19, [sp, #16]
 2b0:	ldp	x29, x30, [sp], #32
 2b4:	ret

00000000000002b8 <tcase_matching_tag>:
 2b8:	stp	x29, x30, [sp, #-48]!
 2bc:	str	x21, [sp, #16]
 2c0:	stp	x20, x19, [sp, #32]
 2c4:	mov	x29, sp
 2c8:	cbz	x1, 344 <tcase_matching_tag+0x8c>
 2cc:	mov	x20, x0
 2d0:	mov	x0, x1
 2d4:	mov	x19, x1
 2d8:	bl	0 <check_list_front>
 2dc:	b	2e8 <tcase_matching_tag+0x30>
 2e0:	mov	x0, x19
 2e4:	bl	0 <check_list_advance>
 2e8:	mov	x0, x19
 2ec:	bl	0 <check_list_at_end>
 2f0:	cbnz	w0, 344 <tcase_matching_tag+0x8c>
 2f4:	ldr	x0, [x20, #64]
 2f8:	bl	0 <check_list_front>
 2fc:	ldr	x0, [x20, #64]
 300:	bl	0 <check_list_at_end>
 304:	cbnz	w0, 2e0 <tcase_matching_tag+0x28>
 308:	ldr	x0, [x20, #64]
 30c:	bl	0 <check_list_val>
 310:	mov	x21, x0
 314:	mov	x0, x19
 318:	bl	0 <check_list_val>
 31c:	mov	x1, x0
 320:	mov	x0, x21
 324:	bl	0 <strcmp>
 328:	cbz	w0, 358 <tcase_matching_tag+0xa0>
 32c:	ldr	x0, [x20, #64]
 330:	bl	0 <check_list_advance>
 334:	ldr	x0, [x20, #64]
 338:	bl	0 <check_list_at_end>
 33c:	cbz	w0, 308 <tcase_matching_tag+0x50>
 340:	b	2e0 <tcase_matching_tag+0x28>
 344:	mov	w0, wzr
 348:	ldp	x20, x19, [sp, #32]
 34c:	ldr	x21, [sp, #16]
 350:	ldp	x29, x30, [sp], #48
 354:	ret
 358:	mov	w0, #0x1                   	// #1
 35c:	ldp	x20, x19, [sp, #32]
 360:	ldr	x21, [sp, #16]
 364:	ldp	x29, x30, [sp], #48
 368:	ret

000000000000036c <suite_add_tcase>:
 36c:	stp	x29, x30, [sp, #-32]!
 370:	stp	x20, x19, [sp, #16]
 374:	mov	x29, sp
 378:	cbz	x0, 398 <suite_add_tcase+0x2c>
 37c:	mov	x19, x1
 380:	cbz	x1, 398 <suite_add_tcase+0x2c>
 384:	mov	x20, x0
 388:	ldr	x0, [x0, #8]
 38c:	mov	x1, x19
 390:	bl	0 <check_list_contains>
 394:	cbz	w0, 3a4 <suite_add_tcase+0x38>
 398:	ldp	x20, x19, [sp, #16]
 39c:	ldp	x29, x30, [sp], #32
 3a0:	ret
 3a4:	ldr	x0, [x20, #8]
 3a8:	mov	x1, x19
 3ac:	ldp	x20, x19, [sp, #16]
 3b0:	ldp	x29, x30, [sp], #32
 3b4:	b	0 <check_list_add_end>

00000000000003b8 <_tcase_add_test>:
 3b8:	stp	x29, x30, [sp, #-64]!
 3bc:	stp	x24, x23, [sp, #16]
 3c0:	stp	x22, x21, [sp, #32]
 3c4:	stp	x20, x19, [sp, #48]
 3c8:	mov	x29, sp
 3cc:	cbz	x0, 420 <_tcase_add_test+0x68>
 3d0:	mov	x24, x1
 3d4:	cbz	x1, 420 <_tcase_add_test+0x68>
 3d8:	mov	x21, x0
 3dc:	mov	w0, #0x18                  	// #24
 3e0:	mov	w20, w5
 3e4:	mov	w23, w4
 3e8:	mov	w19, w3
 3ec:	mov	w22, w2
 3f0:	bl	0 <emalloc>
 3f4:	str	x24, [x0]
 3f8:	stp	w23, w20, [x0, #8]
 3fc:	str	w22, [x0, #16]
 400:	strb	w19, [x0, #20]
 404:	mov	x1, x0
 408:	ldr	x0, [x21, #24]
 40c:	ldp	x20, x19, [sp, #48]
 410:	ldp	x22, x21, [sp, #32]
 414:	ldp	x24, x23, [sp, #16]
 418:	ldp	x29, x30, [sp], #64
 41c:	b	0 <check_list_add_end>
 420:	ldp	x20, x19, [sp, #48]
 424:	ldp	x22, x21, [sp, #32]
 428:	ldp	x24, x23, [sp, #16]
 42c:	ldp	x29, x30, [sp], #64
 430:	ret

0000000000000434 <tcase_add_unchecked_fixture>:
 434:	stp	x29, x30, [sp, #-48]!
 438:	stp	x20, x19, [sp, #32]
 43c:	mov	x19, x2
 440:	mov	x20, x0
 444:	stp	x22, x21, [sp, #16]
 448:	mov	x29, sp
 44c:	cbz	x1, 474 <tcase_add_unchecked_fixture+0x40>
 450:	ldr	x22, [x20, #32]
 454:	mov	w0, #0x10                  	// #16
 458:	mov	x21, x1
 45c:	bl	0 <emalloc>
 460:	mov	x1, x0
 464:	str	x21, [x0, #8]
 468:	str	wzr, [x0]
 46c:	mov	x0, x22
 470:	bl	0 <check_list_add_end>
 474:	cbz	x19, 4a4 <tcase_add_unchecked_fixture+0x70>
 478:	ldr	x20, [x20, #40]
 47c:	mov	w0, #0x10                  	// #16
 480:	bl	0 <emalloc>
 484:	str	x19, [x0, #8]
 488:	str	wzr, [x0]
 48c:	mov	x1, x0
 490:	mov	x0, x20
 494:	ldp	x20, x19, [sp, #32]
 498:	ldp	x22, x21, [sp, #16]
 49c:	ldp	x29, x30, [sp], #48
 4a0:	b	0 <check_list_add_front>
 4a4:	ldp	x20, x19, [sp, #32]
 4a8:	ldp	x22, x21, [sp, #16]
 4ac:	ldp	x29, x30, [sp], #48
 4b0:	ret

00000000000004b4 <tcase_add_checked_fixture>:
 4b4:	stp	x29, x30, [sp, #-48]!
 4b8:	stp	x20, x19, [sp, #32]
 4bc:	mov	x19, x2
 4c0:	mov	x20, x0
 4c4:	stp	x22, x21, [sp, #16]
 4c8:	mov	x29, sp
 4cc:	cbz	x1, 4f8 <tcase_add_checked_fixture+0x44>
 4d0:	ldr	x22, [x20, #48]
 4d4:	mov	w0, #0x10                  	// #16
 4d8:	mov	x21, x1
 4dc:	bl	0 <emalloc>
 4e0:	mov	w8, #0x1                   	// #1
 4e4:	mov	x1, x0
 4e8:	str	x21, [x0, #8]
 4ec:	str	w8, [x0]
 4f0:	mov	x0, x22
 4f4:	bl	0 <check_list_add_end>
 4f8:	cbz	x19, 52c <tcase_add_checked_fixture+0x78>
 4fc:	ldr	x20, [x20, #56]
 500:	mov	w0, #0x10                  	// #16
 504:	bl	0 <emalloc>
 508:	mov	w8, #0x1                   	// #1
 50c:	str	x19, [x0, #8]
 510:	str	w8, [x0]
 514:	mov	x1, x0
 518:	mov	x0, x20
 51c:	ldp	x20, x19, [sp, #32]
 520:	ldp	x22, x21, [sp, #16]
 524:	ldp	x29, x30, [sp], #48
 528:	b	0 <check_list_add_front>
 52c:	ldp	x20, x19, [sp, #32]
 530:	ldp	x22, x21, [sp, #16]
 534:	ldp	x29, x30, [sp], #48
 538:	ret

000000000000053c <tcase_set_timeout>:
 53c:	fcmp	d0, #0.0
 540:	b.lt	5d0 <tcase_set_timeout+0x94>  // b.tstop
 544:	str	d8, [sp, #-48]!
 548:	stp	x20, x19, [sp, #32]
 54c:	mov	x19, x0
 550:	adrp	x0, 0 <suite_create>
 554:	add	x0, x0, #0x0
 558:	stp	x29, x30, [sp, #16]
 55c:	mov	x29, sp
 560:	mov	v8.16b, v0.16b
 564:	bl	0 <getenv>
 568:	cbz	x0, 5a0 <tcase_set_timeout+0x64>
 56c:	add	x1, x29, #0x8
 570:	mov	x20, x0
 574:	str	xzr, [x29, #8]
 578:	bl	0 <strtod>
 57c:	fcmp	d0, #0.0
 580:	b.lt	5a0 <tcase_set_timeout+0x64>  // b.tstop
 584:	ldr	x8, [x29, #8]
 588:	cmp	x8, x20
 58c:	b.eq	5a0 <tcase_set_timeout+0x64>  // b.none
 590:	ldrb	w8, [x8]
 594:	fmul	d0, d0, d8
 598:	cmp	w8, #0x0
 59c:	fcsel	d8, d0, d8, eq  // eq = none
 5a0:	mov	x9, #0xcd6500000000        	// #225833675390976
 5a4:	frintm	d0, d8
 5a8:	movk	x9, #0x41cd, lsl #48
 5ac:	fsub	d0, d8, d0
 5b0:	fmov	d1, x9
 5b4:	fmul	d0, d0, d1
 5b8:	fcvtms	x8, d8
 5bc:	fcvtzs	x9, d0
 5c0:	stp	x8, x9, [x19, #8]
 5c4:	ldp	x20, x19, [sp, #32]
 5c8:	ldp	x29, x30, [sp, #16]
 5cc:	ldr	d8, [sp], #48
 5d0:	ret

00000000000005d4 <tcase_fn_start>:
 5d4:	stp	x29, x30, [sp, #-48]!
 5d8:	str	x21, [sp, #16]
 5dc:	mov	x21, x0
 5e0:	mov	w0, #0x2                   	// #2
 5e4:	stp	x20, x19, [sp, #32]
 5e8:	mov	x29, sp
 5ec:	mov	w19, w2
 5f0:	mov	x20, x1
 5f4:	bl	0 <send_ctx_info>
 5f8:	mov	x0, x20
 5fc:	mov	w1, w19
 600:	bl	0 <send_loc_info>
 604:	adrp	x8, 8 <suite_create+0x8>
 608:	str	x21, [x8]
 60c:	ldp	x20, x19, [sp, #32]
 610:	ldr	x21, [sp, #16]
 614:	ldp	x29, x30, [sp], #48
 618:	ret

000000000000061c <tcase_name>:
 61c:	adrp	x8, 8 <suite_create+0x8>
 620:	ldr	x0, [x8]
 624:	ret

0000000000000628 <_mark_point>:
 628:	b	0 <send_loc_info>

000000000000062c <_ck_assert_failed>:
 62c:	stp	x29, x30, [sp, #-32]!
 630:	stp	x28, x19, [sp, #16]
 634:	mov	x29, sp
 638:	sub	sp, sp, #0x2, lsl #12
 63c:	sub	sp, sp, #0xf0
 640:	mov	x19, x2
 644:	stp	x3, x4, [sp, #136]
 648:	stp	x5, x6, [sp, #152]
 64c:	str	x7, [sp, #168]
 650:	stp	q1, q2, [sp, #16]
 654:	stp	q3, q4, [sp, #48]
 658:	str	q0, [sp]
 65c:	stp	q5, q6, [sp, #80]
 660:	str	q7, [sp, #112]
 664:	bl	0 <send_loc_info>
 668:	mov	x9, #0xffffffffffffffd8    	// #-40
 66c:	mov	x10, sp
 670:	add	x11, sp, #0x88
 674:	movk	x9, #0xff80, lsl #32
 678:	add	x12, x29, #0x20
 67c:	mov	x8, #0xffffffffffffffd8    	// #-40
 680:	add	x10, x10, #0x80
 684:	add	x11, x11, #0x28
 688:	stp	x10, x9, [x29, #-16]
 68c:	stp	x12, x11, [x29, #-32]
 690:	tbz	w8, #31, 6b8 <_ck_assert_failed+0x8c>
 694:	add	w9, w8, #0x8
 698:	cmn	w8, #0x8
 69c:	stur	w9, [x29, #-8]
 6a0:	b.gt	6b8 <_ck_assert_failed+0x8c>
 6a4:	ldur	x9, [x29, #-24]
 6a8:	add	x8, x9, x8
 6ac:	ldr	x2, [x8]
 6b0:	cbnz	x2, 6cc <_ck_assert_failed+0xa0>
 6b4:	b	6e8 <_ck_assert_failed+0xbc>
 6b8:	ldur	x8, [x29, #-32]
 6bc:	add	x9, x8, #0x8
 6c0:	stur	x9, [x29, #-32]
 6c4:	ldr	x2, [x8]
 6c8:	cbz	x2, 6e8 <_ck_assert_failed+0xbc>
 6cc:	ldp	q0, q1, [x29, #-32]
 6d0:	add	x0, sp, #0xd0
 6d4:	add	x3, sp, #0xb0
 6d8:	mov	w1, #0x2000                	// #8192
 6dc:	add	x19, sp, #0xd0
 6e0:	stp	q0, q1, [sp, #176]
 6e4:	bl	0 <vsnprintf>
 6e8:	mov	x0, x19
 6ec:	bl	0 <send_failure_info>
 6f0:	adrp	x8, 0 <suite_create>
 6f4:	ldr	w8, [x8]
 6f8:	cmp	w8, #0x1
 6fc:	b.ne	708 <_ck_assert_failed+0xdc>  // b.any
 700:	mov	w0, #0x1                   	// #1
 704:	bl	0 <_exit>
 708:	adrp	x0, 0 <error_jmp_buffer>
 70c:	add	x0, x0, #0x0
 710:	mov	w1, #0x1                   	// #1
 714:	bl	0 <longjmp>

0000000000000718 <cur_fork_status>:
 718:	adrp	x8, 0 <suite_create>
 71c:	ldr	w0, [x8]
 720:	ret

0000000000000724 <srunner_create>:
 724:	stp	x29, x30, [sp, #-32]!
 728:	stp	x20, x19, [sp, #16]
 72c:	mov	x20, x0
 730:	mov	w0, #0x40                  	// #64
 734:	mov	x29, sp
 738:	bl	0 <emalloc>
 73c:	mov	x19, x0
 740:	bl	0 <check_list_create>
 744:	str	x0, [x19]
 748:	cbz	x20, 754 <srunner_create+0x30>
 74c:	mov	x1, x20
 750:	bl	0 <check_list_add_end>
 754:	mov	w0, #0xc                   	// #12
 758:	bl	0 <emalloc>
 75c:	str	x0, [x19, #8]
 760:	str	wzr, [x0, #8]
 764:	str	xzr, [x0]
 768:	bl	0 <check_list_create>
 76c:	movi	v0.2d, #0x0
 770:	str	x0, [x19, #16]
 774:	stur	q0, [x19, #24]
 778:	stur	q0, [x19, #40]
 77c:	str	wzr, [x19, #56]
 780:	mov	x0, x19
 784:	ldp	x20, x19, [sp, #16]
 788:	ldp	x29, x30, [sp], #32
 78c:	ret

0000000000000790 <srunner_add_suite>:
 790:	cbz	x1, 79c <srunner_add_suite+0xc>
 794:	ldr	x0, [x0]
 798:	b	0 <check_list_add_end>
 79c:	ret

00000000000007a0 <srunner_free>:
 7a0:	cbz	x0, 854 <srunner_free+0xb4>
 7a4:	stp	x29, x30, [sp, #-64]!
 7a8:	stp	x24, x23, [sp, #16]
 7ac:	stp	x22, x21, [sp, #32]
 7b0:	stp	x20, x19, [sp, #48]
 7b4:	mov	x19, x0
 7b8:	ldr	x0, [x0, #8]
 7bc:	mov	x29, sp
 7c0:	bl	0 <free>
 7c4:	ldr	x20, [x19]
 7c8:	mov	x0, x20
 7cc:	bl	0 <check_list_front>
 7d0:	mov	x0, x20
 7d4:	bl	0 <check_list_at_end>
 7d8:	cbz	w0, 858 <srunner_free+0xb8>
 7dc:	ldr	x0, [x19]
 7e0:	bl	0 <check_list_free>
 7e4:	ldr	x20, [x19, #16]
 7e8:	mov	x0, x20
 7ec:	bl	0 <check_list_front>
 7f0:	mov	x0, x20
 7f4:	bl	0 <check_list_at_end>
 7f8:	cbnz	w0, 834 <srunner_free+0x94>
 7fc:	mov	x0, x20
 800:	bl	0 <check_list_val>
 804:	mov	x21, x0
 808:	ldr	x0, [x0, #8]
 80c:	bl	0 <free>
 810:	ldr	x0, [x21, #48]
 814:	bl	0 <free>
 818:	mov	x0, x21
 81c:	bl	0 <free>
 820:	mov	x0, x20
 824:	bl	0 <check_list_advance>
 828:	mov	x0, x20
 82c:	bl	0 <check_list_at_end>
 830:	cbz	w0, 7fc <srunner_free+0x5c>
 834:	ldr	x0, [x19, #16]
 838:	bl	0 <check_list_free>
 83c:	mov	x0, x19
 840:	ldp	x20, x19, [sp, #48]
 844:	ldp	x22, x21, [sp, #32]
 848:	ldp	x24, x23, [sp, #16]
 84c:	ldp	x29, x30, [sp], #64
 850:	b	0 <free>
 854:	ret
 858:	adrp	x21, 0 <free>
 85c:	add	x21, x21, #0x0
 860:	b	888 <srunner_free+0xe8>
 864:	ldr	x0, [x22, #8]
 868:	bl	0 <check_list_free>
 86c:	mov	x0, x22
 870:	bl	0 <free>
 874:	mov	x0, x20
 878:	bl	0 <check_list_advance>
 87c:	mov	x0, x20
 880:	bl	0 <check_list_at_end>
 884:	cbnz	w0, 7dc <srunner_free+0x3c>
 888:	mov	x0, x20
 88c:	bl	0 <check_list_val>
 890:	cbz	x0, 874 <srunner_free+0xd4>
 894:	ldr	x23, [x0, #8]
 898:	mov	x22, x0
 89c:	mov	x0, x23
 8a0:	bl	0 <check_list_front>
 8a4:	mov	x0, x23
 8a8:	bl	0 <check_list_at_end>
 8ac:	cbnz	w0, 864 <srunner_free+0xc4>
 8b0:	mov	x0, x23
 8b4:	bl	0 <check_list_val>
 8b8:	mov	x24, x0
 8bc:	ldr	x0, [x0, #24]
 8c0:	mov	x1, x21
 8c4:	bl	0 <check_list_apply>
 8c8:	ldr	x0, [x24, #32]
 8cc:	mov	x1, x21
 8d0:	bl	0 <check_list_apply>
 8d4:	ldr	x0, [x24, #48]
 8d8:	mov	x1, x21
 8dc:	bl	0 <check_list_apply>
 8e0:	ldr	x0, [x24, #40]
 8e4:	mov	x1, x21
 8e8:	bl	0 <check_list_apply>
 8ec:	ldr	x0, [x24, #56]
 8f0:	mov	x1, x21
 8f4:	bl	0 <check_list_apply>
 8f8:	ldr	x0, [x24, #64]
 8fc:	mov	x1, x21
 900:	bl	0 <check_list_apply>
 904:	ldr	x0, [x24, #24]
 908:	bl	0 <check_list_free>
 90c:	ldr	x0, [x24, #32]
 910:	bl	0 <check_list_free>
 914:	ldr	x0, [x24, #48]
 918:	bl	0 <check_list_free>
 91c:	ldr	x0, [x24, #40]
 920:	bl	0 <check_list_free>
 924:	ldr	x0, [x24, #56]
 928:	bl	0 <check_list_free>
 92c:	ldr	x0, [x24, #64]
 930:	bl	0 <check_list_free>
 934:	mov	x0, x24
 938:	bl	0 <free>
 93c:	mov	x0, x23
 940:	bl	0 <check_list_advance>
 944:	mov	x0, x23
 948:	bl	0 <check_list_at_end>
 94c:	cbz	w0, 8b0 <srunner_free+0x110>
 950:	b	864 <srunner_free+0xc4>

0000000000000954 <tr_free>:
 954:	stp	x29, x30, [sp, #-32]!
 958:	str	x19, [sp, #16]
 95c:	mov	x19, x0
 960:	ldr	x0, [x0, #8]
 964:	mov	x29, sp
 968:	bl	0 <free>
 96c:	ldr	x0, [x19, #48]
 970:	bl	0 <free>
 974:	mov	x0, x19
 978:	ldr	x19, [sp, #16]
 97c:	ldp	x29, x30, [sp], #32
 980:	b	0 <free>

0000000000000984 <srunner_ntests_failed>:
 984:	ldr	x8, [x0, #8]
 988:	ldp	w9, w8, [x8, #4]
 98c:	add	w0, w8, w9
 990:	ret

0000000000000994 <srunner_ntests_run>:
 994:	ldr	x8, [x0, #8]
 998:	ldr	w0, [x8]
 99c:	ret

00000000000009a0 <srunner_failures>:
 9a0:	stp	x29, x30, [sp, #-48]!
 9a4:	stp	x20, x19, [sp, #32]
 9a8:	ldr	x8, [x0, #8]
 9ac:	str	x21, [sp, #16]
 9b0:	mov	x19, x0
 9b4:	mov	x29, sp
 9b8:	ldp	w9, w8, [x8, #4]
 9bc:	add	w8, w8, w9
 9c0:	sbfiz	x0, x8, #3, #32
 9c4:	bl	0 <emalloc>
 9c8:	ldr	x20, [x19, #16]
 9cc:	mov	x19, x0
 9d0:	mov	x0, x20
 9d4:	bl	0 <check_list_front>
 9d8:	mov	x0, x20
 9dc:	bl	0 <check_list_at_end>
 9e0:	cbz	w0, 9f8 <srunner_failures+0x58>
 9e4:	mov	x0, x19
 9e8:	ldp	x20, x19, [sp, #32]
 9ec:	ldr	x21, [sp, #16]
 9f0:	ldp	x29, x30, [sp], #48
 9f4:	ret
 9f8:	mov	w21, wzr
 9fc:	b	a14 <srunner_failures+0x74>
 a00:	mov	x0, x20
 a04:	bl	0 <check_list_advance>
 a08:	mov	x0, x20
 a0c:	bl	0 <check_list_at_end>
 a10:	cbnz	w0, 9e4 <srunner_failures+0x44>
 a14:	mov	x0, x20
 a18:	bl	0 <check_list_val>
 a1c:	ldr	w8, [x0]
 a20:	cmp	w8, #0x1
 a24:	b.eq	a00 <srunner_failures+0x60>  // b.none
 a28:	add	w8, w21, #0x1
 a2c:	str	x0, [x19, w21, sxtw #3]
 a30:	mov	w21, w8
 a34:	b	a00 <srunner_failures+0x60>

0000000000000a38 <srunner_results>:
 a38:	stp	x29, x30, [sp, #-48]!
 a3c:	stp	x20, x19, [sp, #32]
 a40:	ldr	x8, [x0, #8]
 a44:	mov	x19, x0
 a48:	str	x21, [sp, #16]
 a4c:	mov	x29, sp
 a50:	ldrsw	x8, [x8]
 a54:	lsl	x0, x8, #3
 a58:	bl	0 <emalloc>
 a5c:	ldr	x20, [x19, #16]
 a60:	mov	x19, x0
 a64:	mov	x0, x20
 a68:	bl	0 <check_list_front>
 a6c:	mov	x0, x20
 a70:	bl	0 <check_list_at_end>
 a74:	cbnz	w0, a9c <srunner_results+0x64>
 a78:	mov	x21, x19
 a7c:	mov	x0, x20
 a80:	bl	0 <check_list_val>
 a84:	str	x0, [x21], #8
 a88:	mov	x0, x20
 a8c:	bl	0 <check_list_advance>
 a90:	mov	x0, x20
 a94:	bl	0 <check_list_at_end>
 a98:	cbz	w0, a7c <srunner_results+0x44>
 a9c:	mov	x0, x19
 aa0:	ldp	x20, x19, [sp, #32]
 aa4:	ldr	x21, [sp, #16]
 aa8:	ldp	x29, x30, [sp], #48
 aac:	ret

0000000000000ab0 <tr_create>:
 ab0:	stp	x29, x30, [sp, #-16]!
 ab4:	mov	w0, #0x38                  	// #56
 ab8:	mov	x29, sp
 abc:	bl	0 <emalloc>
 ac0:	mov	w8, #0xffffffff            	// #-1
 ac4:	stp	xzr, xzr, [x0]
 ac8:	stp	xzr, xzr, [x0, #40]
 acc:	str	xzr, [x0, #32]
 ad0:	str	w8, [x0, #16]
 ad4:	str	w8, [x0, #24]
 ad8:	ldp	x29, x30, [sp], #16
 adc:	ret

0000000000000ae0 <tr_msg>:
 ae0:	ldr	x0, [x0, #48]
 ae4:	ret

0000000000000ae8 <tr_lno>:
 ae8:	ldr	w0, [x0, #16]
 aec:	ret

0000000000000af0 <tr_lfile>:
 af0:	ldr	x0, [x0, #8]
 af4:	ret

0000000000000af8 <tr_rtype>:
 af8:	ldr	w0, [x0]
 afc:	ret

0000000000000b00 <tr_ctx>:
 b00:	ldr	w0, [x0, #4]
 b04:	ret

0000000000000b08 <tr_tcname>:
 b08:	ldr	x0, [x0, #32]
 b0c:	ret

0000000000000b10 <set_fork_status>:
 b10:	stp	x29, x30, [sp, #-16]!
 b14:	cmp	w0, #0x2
 b18:	mov	x29, sp
 b1c:	b.hi	b30 <set_fork_status+0x20>  // b.pmore
 b20:	adrp	x8, 0 <suite_create>
 b24:	str	w0, [x8]
 b28:	ldp	x29, x30, [sp], #16
 b2c:	ret
 b30:	adrp	x0, 0 <suite_create>
 b34:	adrp	x1, 0 <suite_create>
 b38:	add	x0, x0, #0x0
 b3c:	add	x1, x1, #0x0
 b40:	mov	w2, #0x24a                 	// #586
 b44:	bl	0 <eprintf>

0000000000000b48 <check_get_clockid>:
 b48:	sub	sp, sp, #0x20
 b4c:	add	x2, sp, #0x8
 b50:	mov	w0, #0x1                   	// #1
 b54:	mov	x1, xzr
 b58:	stp	x29, x30, [sp, #16]
 b5c:	add	x29, sp, #0x10
 b60:	bl	0 <timer_create>
 b64:	cbz	w0, b78 <check_get_clockid+0x30>
 b68:	mov	w0, wzr
 b6c:	ldp	x29, x30, [sp, #16]
 b70:	add	sp, sp, #0x20
 b74:	ret
 b78:	ldr	x0, [sp, #8]
 b7c:	bl	0 <timer_delete>
 b80:	mov	w0, #0x1                   	// #1
 b84:	ldp	x29, x30, [sp, #16]
 b88:	add	sp, sp, #0x20
 b8c:	ret

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	sub	sp, sp, #0x130
   4:	stp	x22, x21, [sp, #272]
   8:	adrp	x22, 0 <stderr>
   c:	stp	x20, x19, [sp, #288]
  10:	mov	x19, x0
  14:	ldr	x0, [x22]
  18:	stp	x29, x30, [sp, #240]
  1c:	add	x29, sp, #0xf0
  20:	str	x28, [sp, #256]
  24:	mov	w20, w2
  28:	mov	x21, x1
  2c:	stp	x3, x4, [x29, #-104]
  30:	stp	x5, x6, [x29, #-88]
  34:	stur	x7, [x29, #-72]
  38:	stp	q1, q2, [sp, #16]
  3c:	stp	q3, q4, [sp, #48]
  40:	str	q0, [sp]
  44:	stp	q5, q6, [sp, #80]
  48:	str	q7, [sp, #112]
  4c:	bl	0 <fflush>
  50:	ldr	x0, [x22]
  54:	adrp	x1, 0 <eprintf>
  58:	add	x1, x1, #0x0
  5c:	mov	x2, x21
  60:	mov	w3, w20
  64:	bl	0 <fprintf>
  68:	sub	x9, x29, #0x68
  6c:	mov	x10, sp
  70:	mov	x11, #0xffffffffffffffd8    	// #-40
  74:	add	x8, x29, #0x40
  78:	movk	x11, #0xff80, lsl #32
  7c:	add	x9, x9, #0x28
  80:	add	x10, x10, #0x80
  84:	stp	x8, x9, [x29, #-32]
  88:	stp	x10, x11, [x29, #-16]
  8c:	ldp	q0, q1, [x29, #-32]
  90:	ldr	x0, [x22]
  94:	sub	x2, x29, #0x40
  98:	mov	x1, x19
  9c:	stp	q0, q1, [x29, #-64]
  a0:	bl	0 <vfprintf>
  a4:	ldrb	w8, [x19]
  a8:	cbz	w8, e8 <eprintf+0xe8>
  ac:	mov	x0, x19
  b0:	bl	0 <strlen>
  b4:	add	x8, x0, x19
  b8:	ldurb	w8, [x8, #-1]
  bc:	cmp	w8, #0x3a
  c0:	b.ne	e8 <eprintf+0xe8>  // b.any
  c4:	ldr	x19, [x22]
  c8:	bl	0 <__errno_location>
  cc:	ldr	w0, [x0]
  d0:	bl	0 <strerror>
  d4:	adrp	x1, 0 <eprintf>
  d8:	mov	x2, x0
  dc:	add	x1, x1, #0x0
  e0:	mov	x0, x19
  e4:	bl	0 <fprintf>
  e8:	ldr	x1, [x22]
  ec:	mov	w0, #0xa                   	// #10
  f0:	bl	0 <fputc>
  f4:	mov	w0, #0x2                   	// #2
  f8:	bl	0 <exit>

00000000000000fc <emalloc>:
  fc:	stp	x29, x30, [sp, #-32]!
 100:	str	x19, [sp, #16]
 104:	mov	x29, sp
 108:	mov	x19, x0
 10c:	bl	0 <malloc>
 110:	cbz	x0, 120 <emalloc+0x24>
 114:	ldr	x19, [sp, #16]
 118:	ldp	x29, x30, [sp], #32
 11c:	ret
 120:	adrp	x0, 0 <eprintf>
 124:	adrp	x1, 0 <eprintf>
 128:	add	x0, x0, #0x0
 12c:	add	x1, x1, #0x0
 130:	mov	w2, #0x3e                  	// #62
 134:	mov	x3, x19
 138:	bl	0 <eprintf>

000000000000013c <erealloc>:
 13c:	stp	x29, x30, [sp, #-32]!
 140:	str	x19, [sp, #16]
 144:	mov	x29, sp
 148:	mov	x19, x1
 14c:	bl	0 <realloc>
 150:	cbz	x0, 160 <erealloc+0x24>
 154:	ldr	x19, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
 160:	adrp	x0, 0 <eprintf>
 164:	adrp	x1, 0 <eprintf>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	mov	w2, #0x48                  	// #72
 174:	mov	x3, x19
 178:	bl	0 <eprintf>

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_list_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w0, #0x18                  	// #24
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	bl	0 <emalloc>
  14:	adrp	x8, 0 <check_list_create>
  18:	ldr	d0, [x8]
  1c:	mov	x19, x0
  20:	str	d0, [x0]
  24:	mov	w0, #0x8                   	// #8
  28:	bl	0 <emalloc>
  2c:	movi	v0.2d, #0xffffffffffffffff
  30:	str	x0, [x19, #16]
  34:	str	d0, [x19, #8]
  38:	mov	x0, x19
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <check_list_add_front>:
  48:	cbz	x0, cc <check_list_add_front+0x84>
  4c:	stp	x29, x30, [sp, #-32]!
  50:	stp	x20, x19, [sp, #16]
  54:	ldp	w8, w9, [x0]
  58:	mov	x19, x1
  5c:	mov	x20, x0
  60:	mov	x29, sp
  64:	cmp	w8, w9
  68:	b.cs	74 <check_list_add_front+0x2c>  // b.hs, b.nlast
  6c:	ldr	x1, [x20, #16]
  70:	b	94 <check_list_add_front+0x4c>
  74:	ldr	x0, [x20, #16]
  78:	lsl	w8, w9, #1
  7c:	lsl	x1, x8, #3
  80:	str	w8, [x20, #4]
  84:	bl	0 <erealloc>
  88:	ldr	w8, [x20]
  8c:	mov	x1, x0
  90:	str	x0, [x20, #16]
  94:	mov	w8, w8
  98:	add	x0, x1, #0x8
  9c:	lsl	x2, x8, #3
  a0:	bl	0 <memmove>
  a4:	ldr	w8, [x20, #12]
  a8:	ldr	w9, [x20]
  ac:	ldr	x10, [x20, #16]
  b0:	add	w8, w8, #0x1
  b4:	add	w9, w9, #0x1
  b8:	stp	wzr, w8, [x20, #8]
  bc:	str	w9, [x20]
  c0:	str	x19, [x10]
  c4:	ldp	x20, x19, [sp, #16]
  c8:	ldp	x29, x30, [sp], #32
  cc:	ret

00000000000000d0 <check_list_add_end>:
  d0:	cbz	x0, 138 <check_list_add_end+0x68>
  d4:	stp	x29, x30, [sp, #-32]!
  d8:	stp	x20, x19, [sp, #16]
  dc:	ldp	w8, w9, [x0]
  e0:	mov	x19, x1
  e4:	mov	x20, x0
  e8:	mov	x29, sp
  ec:	cmp	w8, w9
  f0:	b.cs	fc <check_list_add_end+0x2c>  // b.hs, b.nlast
  f4:	ldr	x0, [x20, #16]
  f8:	b	118 <check_list_add_end+0x48>
  fc:	ldr	x0, [x20, #16]
 100:	lsl	w8, w9, #1
 104:	lsl	x1, x8, #3
 108:	str	w8, [x20, #4]
 10c:	bl	0 <erealloc>
 110:	ldr	w8, [x20]
 114:	str	x0, [x20, #16]
 118:	ldrsw	x9, [x20, #12]
 11c:	add	w8, w8, #0x1
 120:	str	w8, [x20]
 124:	add	x8, x9, #0x1
 128:	stp	w8, w8, [x20, #8]
 12c:	str	x19, [x0, x8, lsl #3]
 130:	ldp	x20, x19, [sp, #16]
 134:	ldp	x29, x30, [sp], #32
 138:	ret

000000000000013c <check_list_at_end>:
 13c:	ldr	w8, [x0, #8]
 140:	cmn	w8, #0x1
 144:	b.eq	158 <check_list_at_end+0x1c>  // b.none
 148:	ldr	w9, [x0, #12]
 14c:	cmp	w8, w9
 150:	cset	w0, gt
 154:	ret
 158:	mov	w0, #0x1                   	// #1
 15c:	ret

0000000000000160 <check_list_front>:
 160:	ldr	w8, [x0, #8]
 164:	cmn	w8, #0x1
 168:	b.eq	170 <check_list_front+0x10>  // b.none
 16c:	str	wzr, [x0, #8]
 170:	ret

0000000000000174 <check_list_free>:
 174:	cbz	x0, 1a0 <check_list_free+0x2c>
 178:	stp	x29, x30, [sp, #-32]!
 17c:	str	x19, [sp, #16]
 180:	mov	x19, x0
 184:	ldr	x0, [x0, #16]
 188:	mov	x29, sp
 18c:	bl	0 <free>
 190:	mov	x0, x19
 194:	ldr	x19, [sp, #16]
 198:	ldp	x29, x30, [sp], #32
 19c:	b	0 <free>
 1a0:	ret

00000000000001a4 <check_list_val>:
 1a4:	cbz	x0, 1d0 <check_list_val+0x2c>
 1a8:	ldrsw	x8, [x0, #8]
 1ac:	cmn	w8, #0x1
 1b0:	b.eq	1c0 <check_list_val+0x1c>  // b.none
 1b4:	ldr	w9, [x0, #12]
 1b8:	cmp	w8, w9
 1bc:	b.le	1c8 <check_list_val+0x24>
 1c0:	mov	x0, xzr
 1c4:	ret
 1c8:	ldr	x9, [x0, #16]
 1cc:	ldr	x0, [x9, x8, lsl #3]
 1d0:	ret

00000000000001d4 <check_list_advance>:
 1d4:	cbz	x0, 1f8 <check_list_advance+0x24>
 1d8:	ldr	w8, [x0, #8]
 1dc:	cmn	w8, #0x1
 1e0:	b.eq	1f8 <check_list_advance+0x24>  // b.none
 1e4:	ldr	w9, [x0, #12]
 1e8:	cmp	w8, w9
 1ec:	b.gt	1f8 <check_list_advance+0x24>
 1f0:	add	w8, w8, #0x1
 1f4:	str	w8, [x0, #8]
 1f8:	ret

00000000000001fc <check_list_apply>:
 1fc:	stp	x29, x30, [sp, #-32]!
 200:	stp	x20, x19, [sp, #16]
 204:	mov	x29, sp
 208:	cbz	x0, 274 <check_list_apply+0x78>
 20c:	mov	x19, x1
 210:	cbz	x1, 274 <check_list_apply+0x78>
 214:	ldr	w8, [x0, #8]
 218:	mov	x20, x0
 21c:	cmn	w8, #0x1
 220:	b.eq	274 <check_list_apply+0x78>  // b.none
 224:	mov	w8, wzr
 228:	str	wzr, [x20, #8]
 22c:	b	238 <check_list_apply+0x3c>
 230:	cmn	w8, #0x1
 234:	b.eq	274 <check_list_apply+0x78>  // b.none
 238:	ldr	w9, [x20, #12]
 23c:	cmp	w8, w9
 240:	b.gt	274 <check_list_apply+0x78>
 244:	ldr	x9, [x20, #16]
 248:	ldr	x0, [x9, w8, sxtw #3]
 24c:	blr	x19
 250:	ldr	w8, [x20, #8]
 254:	cmn	w8, #0x1
 258:	b.eq	274 <check_list_apply+0x78>  // b.none
 25c:	ldr	w9, [x20, #12]
 260:	cmp	w8, w9
 264:	b.gt	230 <check_list_apply+0x34>
 268:	add	w8, w8, #0x1
 26c:	str	w8, [x20, #8]
 270:	b	230 <check_list_apply+0x34>
 274:	ldp	x20, x19, [sp, #16]
 278:	ldp	x29, x30, [sp], #32
 27c:	ret

0000000000000280 <check_list_contains>:
 280:	ldr	w8, [x0, #8]
 284:	cmn	w8, #0x1
 288:	b.eq	2c4 <check_list_contains+0x44>  // b.none
 28c:	ldr	w8, [x0, #12]
 290:	str	wzr, [x0, #8]
 294:	tbnz	w8, #31, 2c4 <check_list_contains+0x44>
 298:	ldr	x9, [x0, #16]
 29c:	mov	w10, #0xffffffff            	// #-1
 2a0:	ldr	x11, [x9]
 2a4:	cmp	x11, x1
 2a8:	b.eq	2cc <check_list_contains+0x4c>  // b.none
 2ac:	add	w11, w10, #0x2
 2b0:	add	w10, w10, #0x1
 2b4:	cmp	w10, w8
 2b8:	add	x9, x9, #0x8
 2bc:	str	w11, [x0, #8]
 2c0:	b.lt	2a0 <check_list_contains+0x20>  // b.tstop
 2c4:	mov	w0, wzr
 2c8:	ret
 2cc:	mov	w0, #0x1                   	// #1
 2d0:	ret

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_set_log>:
   0:	ldr	x8, [x0, #24]
   4:	cbz	x8, c <srunner_set_log+0xc>
   8:	ret
   c:	str	x1, [x0, #24]
  10:	ret

0000000000000014 <srunner_has_log>:
  14:	stp	x29, x30, [sp, #-16]!
  18:	ldr	x0, [x0, #24]
  1c:	mov	x29, sp
  20:	cbz	x0, 34 <srunner_has_log+0x20>
  24:	cmp	x0, #0x0
  28:	cset	w0, ne  // ne = any
  2c:	ldp	x29, x30, [sp], #16
  30:	ret
  34:	adrp	x0, 0 <srunner_set_log>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <getenv>
  40:	cmp	x0, #0x0
  44:	cset	w0, ne  // ne = any
  48:	ldp	x29, x30, [sp], #16
  4c:	ret

0000000000000050 <srunner_log_fname>:
  50:	ldr	x0, [x0, #24]
  54:	cbz	x0, 5c <srunner_log_fname+0xc>
  58:	ret
  5c:	adrp	x0, 0 <srunner_set_log>
  60:	add	x0, x0, #0x0
  64:	b	0 <getenv>

0000000000000068 <srunner_set_xml>:
  68:	ldr	x8, [x0, #32]
  6c:	cbz	x8, 74 <srunner_set_xml+0xc>
  70:	ret
  74:	str	x1, [x0, #32]
  78:	ret

000000000000007c <srunner_has_xml>:
  7c:	stp	x29, x30, [sp, #-16]!
  80:	ldr	x0, [x0, #32]
  84:	mov	x29, sp
  88:	cbz	x0, 9c <srunner_has_xml+0x20>
  8c:	cmp	x0, #0x0
  90:	cset	w0, ne  // ne = any
  94:	ldp	x29, x30, [sp], #16
  98:	ret
  9c:	adrp	x0, 0 <srunner_set_log>
  a0:	add	x0, x0, #0x0
  a4:	bl	0 <getenv>
  a8:	cmp	x0, #0x0
  ac:	cset	w0, ne  // ne = any
  b0:	ldp	x29, x30, [sp], #16
  b4:	ret

00000000000000b8 <srunner_xml_fname>:
  b8:	ldr	x0, [x0, #32]
  bc:	cbz	x0, c4 <srunner_xml_fname+0xc>
  c0:	ret
  c4:	adrp	x0, 0 <srunner_set_log>
  c8:	add	x0, x0, #0x0
  cc:	b	0 <getenv>

00000000000000d0 <srunner_set_tap>:
  d0:	ldr	x8, [x0, #40]
  d4:	cbz	x8, dc <srunner_set_tap+0xc>
  d8:	ret
  dc:	str	x1, [x0, #40]
  e0:	ret

00000000000000e4 <srunner_has_tap>:
  e4:	stp	x29, x30, [sp, #-16]!
  e8:	ldr	x0, [x0, #40]
  ec:	mov	x29, sp
  f0:	cbz	x0, 104 <srunner_has_tap+0x20>
  f4:	cmp	x0, #0x0
  f8:	cset	w0, ne  // ne = any
  fc:	ldp	x29, x30, [sp], #16
 100:	ret
 104:	adrp	x0, 0 <srunner_set_log>
 108:	add	x0, x0, #0x0
 10c:	bl	0 <getenv>
 110:	cmp	x0, #0x0
 114:	cset	w0, ne  // ne = any
 118:	ldp	x29, x30, [sp], #16
 11c:	ret

0000000000000120 <srunner_tap_fname>:
 120:	ldr	x0, [x0, #40]
 124:	cbz	x0, 12c <srunner_tap_fname+0xc>
 128:	ret
 12c:	adrp	x0, 0 <srunner_set_log>
 130:	add	x0, x0, #0x0
 134:	b	0 <getenv>

0000000000000138 <srunner_register_lfun>:
 138:	stp	x29, x30, [sp, #-64]!
 13c:	stp	x20, x19, [sp, #48]
 140:	mov	x19, x0
 144:	mov	w0, #0x18                  	// #24
 148:	stp	x24, x23, [sp, #16]
 14c:	stp	x22, x21, [sp, #32]
 150:	mov	x29, sp
 154:	mov	w22, w4
 158:	mov	x21, x3
 15c:	mov	w20, w2
 160:	mov	x23, x1
 164:	bl	0 <emalloc>
 168:	cmp	w22, #0x4
 16c:	mov	x24, x0
 170:	b.ne	17c <srunner_register_lfun+0x44>  // b.any
 174:	bl	0 <get_env_printmode>
 178:	mov	w22, w0
 17c:	stp	x23, x21, [x24]
 180:	stp	w20, w22, [x24, #16]
 184:	ldr	x0, [x19, #48]
 188:	mov	x1, x24
 18c:	ldp	x20, x19, [sp, #48]
 190:	ldp	x22, x21, [sp, #32]
 194:	ldp	x24, x23, [sp, #16]
 198:	ldp	x29, x30, [sp], #64
 19c:	b	0 <check_list_add_end>

00000000000001a0 <log_srunner_start>:
 1a0:	mov	w2, #0x2                   	// #2
 1a4:	mov	x1, xzr
 1a8:	b	1ac <srunner_send_evt>

00000000000001ac <srunner_send_evt>:
 1ac:	stp	x29, x30, [sp, #-64]!
 1b0:	stp	x22, x21, [sp, #32]
 1b4:	stp	x20, x19, [sp, #48]
 1b8:	ldr	x21, [x0, #48]
 1bc:	mov	x20, x0
 1c0:	str	x23, [sp, #16]
 1c4:	mov	x29, sp
 1c8:	mov	x0, x21
 1cc:	mov	w19, w2
 1d0:	mov	x22, x1
 1d4:	bl	0 <check_list_front>
 1d8:	mov	x0, x21
 1dc:	bl	0 <check_list_at_end>
 1e0:	cbnz	w0, 22c <srunner_send_evt+0x80>
 1e4:	mov	x0, x21
 1e8:	bl	0 <check_list_val>
 1ec:	mov	x23, x0
 1f0:	ldr	x0, [x0]
 1f4:	bl	0 <fflush>
 1f8:	ldp	x1, x8, [x23]
 1fc:	ldr	w2, [x23, #20]
 200:	mov	x0, x20
 204:	mov	x3, x22
 208:	mov	w4, w19
 20c:	blr	x8
 210:	ldr	x0, [x23]
 214:	bl	0 <fflush>
 218:	mov	x0, x21
 21c:	bl	0 <check_list_advance>
 220:	mov	x0, x21
 224:	bl	0 <check_list_at_end>
 228:	cbz	w0, 1e4 <srunner_send_evt+0x38>
 22c:	ldp	x20, x19, [sp, #48]
 230:	ldp	x22, x21, [sp, #32]
 234:	ldr	x23, [sp, #16]
 238:	ldp	x29, x30, [sp], #64
 23c:	ret

0000000000000240 <log_srunner_end>:
 240:	mov	w2, #0x4                   	// #4
 244:	mov	x1, xzr
 248:	b	1ac <srunner_send_evt>

000000000000024c <log_suite_start>:
 24c:	mov	w2, #0x3                   	// #3
 250:	b	1ac <srunner_send_evt>

0000000000000254 <log_suite_end>:
 254:	mov	w2, #0x5                   	// #5
 258:	b	1ac <srunner_send_evt>

000000000000025c <log_test_start>:
 25c:	sub	sp, sp, #0x90
 260:	stp	x29, x30, [sp, #112]
 264:	ldr	x8, [x2]
 268:	ldr	x3, [x1]
 26c:	adrp	x2, 0 <srunner_set_log>
 270:	str	x19, [sp, #128]
 274:	ldr	x4, [x8]
 278:	mov	x19, x0
 27c:	add	x2, x2, #0x0
 280:	add	x0, sp, #0xc
 284:	mov	w1, #0x63                  	// #99
 288:	add	x29, sp, #0x70
 28c:	bl	0 <snprintf>
 290:	add	x1, sp, #0xc
 294:	mov	w2, #0x6                   	// #6
 298:	mov	x0, x19
 29c:	bl	1ac <srunner_send_evt>
 2a0:	ldr	x19, [sp, #128]
 2a4:	ldp	x29, x30, [sp, #112]
 2a8:	add	sp, sp, #0x90
 2ac:	ret

00000000000002b0 <log_test_end>:
 2b0:	mov	w2, #0x7                   	// #7
 2b4:	b	1ac <srunner_send_evt>

00000000000002b8 <stdout_lfun>:
 2b8:	stp	x29, x30, [sp, #-16]!
 2bc:	cmp	w4, #0x7
 2c0:	mov	x29, sp
 2c4:	b.hi	340 <stdout_lfun+0x88>  // b.pmore
 2c8:	adrp	x10, 0 <srunner_set_log>
 2cc:	mov	w9, w4
 2d0:	add	x10, x10, #0x0
 2d4:	adr	x11, 2e8 <stdout_lfun+0x30>
 2d8:	ldrb	w12, [x10, x9]
 2dc:	add	x11, x11, x12, lsl #2
 2e0:	mov	x8, x1
 2e4:	br	x11
 2e8:	ldp	x29, x30, [sp], #16
 2ec:	ret
 2f0:	cbz	w2, 2e8 <stdout_lfun+0x30>
 2f4:	mov	x1, x0
 2f8:	mov	x0, x8
 2fc:	ldp	x29, x30, [sp], #16
 300:	b	0 <srunner_fprint>
 304:	cbz	w2, 2e8 <stdout_lfun+0x30>
 308:	adrp	x0, 0 <srunner_set_log>
 30c:	add	x0, x0, #0x0
 310:	mov	w1, #0x11                  	// #17
 314:	mov	w2, #0x1                   	// #1
 318:	mov	x3, x8
 31c:	ldp	x29, x30, [sp], #16
 320:	b	0 <fwrite>
 324:	cbz	w2, 2e8 <stdout_lfun+0x30>
 328:	ldr	x2, [x3]
 32c:	adrp	x1, 0 <srunner_set_log>
 330:	add	x1, x1, #0x0
 334:	mov	x0, x8
 338:	ldp	x29, x30, [sp], #16
 33c:	b	0 <fprintf>
 340:	adrp	x0, 0 <srunner_set_log>
 344:	adrp	x1, 0 <srunner_set_log>
 348:	add	x0, x0, #0x0
 34c:	add	x1, x1, #0x0
 350:	mov	w2, #0xdc                  	// #220
 354:	bl	0 <eprintf>

0000000000000358 <lfile_lfun>:
 358:	stp	x29, x30, [sp, #-32]!
 35c:	cmp	w4, #0x7
 360:	stp	x20, x19, [sp, #16]
 364:	mov	x29, sp
 368:	b.hi	400 <lfile_lfun+0xa8>  // b.pmore
 36c:	adrp	x9, 0 <srunner_set_log>
 370:	mov	w8, w4
 374:	add	x9, x9, #0x0
 378:	adr	x10, 38c <lfile_lfun+0x34>
 37c:	ldrb	w11, [x9, x8]
 380:	add	x10, x10, x11, lsl #2
 384:	mov	x19, x1
 388:	br	x10
 38c:	ldp	x20, x19, [sp, #16]
 390:	ldp	x29, x30, [sp], #32
 394:	ret
 398:	mov	x0, x19
 39c:	ldp	x20, x19, [sp, #16]
 3a0:	mov	w2, #0x3                   	// #3
 3a4:	mov	x1, x3
 3a8:	ldp	x29, x30, [sp], #32
 3ac:	b	0 <tr_fprint>
 3b0:	ldr	x2, [x3]
 3b4:	mov	x0, x19
 3b8:	ldp	x20, x19, [sp, #16]
 3bc:	adrp	x1, 0 <srunner_set_log>
 3c0:	add	x1, x1, #0x0
 3c4:	ldp	x29, x30, [sp], #32
 3c8:	b	0 <fprintf>
 3cc:	mov	x20, x0
 3d0:	adrp	x0, 0 <srunner_set_log>
 3d4:	add	x0, x0, #0x0
 3d8:	mov	w1, #0x1c                  	// #28
 3dc:	mov	w2, #0x1                   	// #1
 3e0:	mov	x3, x19
 3e4:	bl	0 <fwrite>
 3e8:	mov	x0, x19
 3ec:	mov	x1, x20
 3f0:	ldp	x20, x19, [sp, #16]
 3f4:	mov	w2, #0x1                   	// #1
 3f8:	ldp	x29, x30, [sp], #32
 3fc:	b	0 <srunner_fprint>
 400:	adrp	x0, 0 <srunner_set_log>
 404:	adrp	x1, 0 <srunner_set_log>
 408:	add	x0, x0, #0x0
 40c:	add	x1, x1, #0x0
 410:	mov	w2, #0x103                 	// #259
 414:	bl	0 <eprintf>

0000000000000418 <xml_lfun>:
 418:	sub	sp, sp, #0x80
 41c:	adrp	x8, 0 <srunner_set_log>
 420:	ldrb	w8, [x8]
 424:	str	x21, [sp, #96]
 428:	stp	x20, x19, [sp, #112]
 42c:	mov	w21, w4
 430:	mov	x20, x3
 434:	mov	x19, x1
 438:	stp	x29, x30, [sp, #80]
 43c:	add	x29, sp, #0x50
 440:	cbnz	w8, 48c <xml_lfun+0x74>
 444:	sub	x0, x29, #0x10
 448:	mov	x1, xzr
 44c:	bl	0 <gettimeofday>
 450:	bl	0 <check_get_clockid>
 454:	adrp	x1, 0 <srunner_set_log>
 458:	add	x1, x1, #0x0
 45c:	bl	0 <clock_gettime>
 460:	sub	x0, x29, #0x10
 464:	add	x1, sp, #0x8
 468:	bl	0 <localtime_r>
 46c:	cbz	x0, 48c <xml_lfun+0x74>
 470:	adrp	x0, 0 <srunner_set_log>
 474:	adrp	x2, 0 <srunner_set_log>
 478:	add	x0, x0, #0x0
 47c:	add	x2, x2, #0x0
 480:	add	x3, sp, #0x8
 484:	mov	w1, #0x14                  	// #20
 488:	bl	0 <strftime>
 48c:	cmp	w21, #0x7
 490:	b.hi	5dc <xml_lfun+0x1c4>  // b.pmore
 494:	adrp	x9, 0 <srunner_set_log>
 498:	mov	w8, w21
 49c:	add	x9, x9, #0x0
 4a0:	adr	x10, 4b0 <xml_lfun+0x98>
 4a4:	ldrb	w11, [x9, x8]
 4a8:	add	x10, x10, x11, lsl #2
 4ac:	br	x10
 4b0:	adrp	x1, 0 <srunner_set_log>
 4b4:	adrp	x2, 0 <srunner_set_log>
 4b8:	add	x1, x1, #0x0
 4bc:	add	x2, x2, #0x0
 4c0:	mov	x0, x19
 4c4:	bl	0 <fprintf>
 4c8:	b	5c8 <xml_lfun+0x1b0>
 4cc:	stp	xzr, xzr, [sp, #8]
 4d0:	bl	0 <check_get_clockid>
 4d4:	add	x1, sp, #0x8
 4d8:	bl	0 <clock_gettime>
 4dc:	adrp	x8, 0 <srunner_set_log>
 4e0:	add	x8, x8, #0x0
 4e4:	ldp	x9, x10, [sp, #8]
 4e8:	ldp	x12, x8, [x8]
 4ec:	mov	x11, #0xf7cf                	// #63439
 4f0:	movk	x11, #0xe353, lsl #16
 4f4:	movk	x11, #0x9ba5, lsl #32
 4f8:	sub	x9, x9, x12
 4fc:	mov	x12, #0x831                 	// #2097
 500:	movk	x12, #0x1cac, lsl #16
 504:	movk	x11, #0x20c4, lsl #48
 508:	movk	x12, #0x645a, lsl #32
 50c:	smulh	x10, x10, x11
 510:	movk	x12, #0xdf3b, lsl #48
 514:	mov	w11, #0x4240                	// #16960
 518:	smulh	x8, x8, x12
 51c:	asr	x12, x10, #7
 520:	movk	w11, #0xf, lsl #16
 524:	add	x10, x12, x10, lsr #63
 528:	asr	x12, x8, #7
 52c:	madd	x9, x9, x11, x10
 530:	add	x8, x12, x8, lsr #63
 534:	add	x8, x9, x8
 538:	mov	x9, #0x34db                	// #13531
 53c:	movk	x9, #0xd7b6, lsl #16
 540:	movk	x9, #0xde82, lsl #32
 544:	movk	x9, #0x431b, lsl #48
 548:	umulh	x9, x8, x9
 54c:	lsr	x2, x9, #18
 550:	adrp	x1, 0 <srunner_set_log>
 554:	msub	x3, x2, x11, x8
 558:	add	x1, x1, #0x0
 55c:	mov	x0, x19
 560:	bl	0 <fprintf>
 564:	b	5c8 <xml_lfun+0x1b0>
 568:	mov	w2, #0x3                   	// #3
 56c:	mov	x0, x19
 570:	mov	x1, x20
 574:	bl	0 <tr_xmlprint>
 578:	b	5c8 <xml_lfun+0x1b0>
 57c:	adrp	x0, 0 <srunner_set_log>
 580:	add	x0, x0, #0x0
 584:	mov	w1, #0x15                  	// #21
 588:	mov	w2, #0x1                   	// #1
 58c:	mov	x3, x19
 590:	bl	0 <fwrite>
 594:	ldr	x1, [x20]
 598:	mov	x0, x19
 59c:	bl	0 <fprint_xml_esc>
 5a0:	adrp	x0, 0 <srunner_set_log>
 5a4:	add	x0, x0, #0x0
 5a8:	mov	w1, #0x9                   	// #9
 5ac:	b	5bc <xml_lfun+0x1a4>
 5b0:	adrp	x0, 0 <srunner_set_log>
 5b4:	add	x0, x0, #0x0
 5b8:	mov	w1, #0xb                   	// #11
 5bc:	mov	w2, #0x1                   	// #1
 5c0:	mov	x3, x19
 5c4:	bl	0 <fwrite>
 5c8:	ldp	x20, x19, [sp, #112]
 5cc:	ldr	x21, [sp, #96]
 5d0:	ldp	x29, x30, [sp, #80]
 5d4:	add	sp, sp, #0x80
 5d8:	ret
 5dc:	adrp	x0, 0 <srunner_set_log>
 5e0:	adrp	x1, 0 <srunner_set_log>
 5e4:	add	x0, x0, #0x0
 5e8:	add	x1, x1, #0x0
 5ec:	mov	w2, #0x14f                 	// #335
 5f0:	bl	0 <eprintf>

00000000000005f4 <tap_lfun>:
 5f4:	stp	x29, x30, [sp, #-32]!
 5f8:	cmp	w4, #0x7
 5fc:	str	x19, [sp, #16]
 600:	mov	x29, sp
 604:	b.hi	6cc <tap_lfun+0xd8>  // b.pmore
 608:	adrp	x9, 0 <srunner_set_log>
 60c:	mov	w8, w4
 610:	add	x9, x9, #0x0
 614:	adr	x10, 628 <tap_lfun+0x34>
 618:	ldrb	w11, [x9, x8]
 61c:	add	x10, x10, x11, lsl #2
 620:	mov	x19, x1
 624:	br	x10
 628:	ldr	x19, [sp, #16]
 62c:	ldp	x29, x30, [sp], #32
 630:	ret
 634:	adrp	x9, 0 <srunner_set_log>
 638:	ldr	w8, [x9]
 63c:	adrp	x10, 0 <srunner_set_log>
 640:	adrp	x11, 0 <srunner_set_log>
 644:	add	x10, x10, #0x0
 648:	add	w8, w8, #0x1
 64c:	str	w8, [x9]
 650:	ldr	w9, [x3]
 654:	ldr	x4, [x3, #8]
 658:	ldp	x5, x6, [x3, #32]
 65c:	ldr	x7, [x3, #48]
 660:	add	x11, x11, #0x0
 664:	cmp	w9, #0x1
 668:	adrp	x1, 0 <srunner_set_log>
 66c:	csel	x2, x11, x10, eq  // eq = none
 670:	add	x1, x1, #0x0
 674:	mov	x0, x19
 678:	mov	w3, w8
 67c:	bl	0 <fprintf>
 680:	mov	x0, x19
 684:	ldr	x19, [sp, #16]
 688:	ldp	x29, x30, [sp], #32
 68c:	b	0 <fflush>
 690:	adrp	x8, 0 <srunner_set_log>
 694:	str	wzr, [x8]
 698:	ldr	x19, [sp, #16]
 69c:	ldp	x29, x30, [sp], #32
 6a0:	ret
 6a4:	adrp	x8, 0 <srunner_set_log>
 6a8:	ldr	w2, [x8]
 6ac:	adrp	x1, 0 <srunner_set_log>
 6b0:	add	x1, x1, #0x0
 6b4:	mov	x0, x19
 6b8:	bl	0 <fprintf>
 6bc:	mov	x0, x19
 6c0:	ldr	x19, [sp, #16]
 6c4:	ldp	x29, x30, [sp], #32
 6c8:	b	0 <fflush>
 6cc:	adrp	x0, 0 <srunner_set_log>
 6d0:	adrp	x1, 0 <srunner_set_log>
 6d4:	add	x0, x0, #0x0
 6d8:	add	x1, x1, #0x0
 6dc:	mov	w2, #0x17c                 	// #380
 6e0:	bl	0 <eprintf>

00000000000006e4 <srunner_open_lfile>:
 6e4:	stp	x29, x30, [sp, #-32]!
 6e8:	str	x19, [sp, #16]
 6ec:	ldr	x19, [x0, #24]
 6f0:	mov	x29, sp
 6f4:	cbnz	x19, 70c <srunner_open_lfile+0x28>
 6f8:	adrp	x0, 0 <srunner_set_log>
 6fc:	add	x0, x0, #0x0
 700:	bl	0 <getenv>
 704:	mov	x19, x0
 708:	cbz	x0, 734 <srunner_open_lfile+0x50>
 70c:	adrp	x1, 0 <srunner_set_log>
 710:	add	x1, x1, #0x0
 714:	mov	x0, x19
 718:	bl	0 <strcmp>
 71c:	cbz	w0, 740 <srunner_open_lfile+0x5c>
 720:	adrp	x1, 0 <srunner_set_log>
 724:	add	x1, x1, #0x0
 728:	mov	x0, x19
 72c:	bl	0 <fopen>
 730:	cbz	x0, 754 <srunner_open_lfile+0x70>
 734:	ldr	x19, [sp, #16]
 738:	ldp	x29, x30, [sp], #32
 73c:	ret
 740:	adrp	x8, 0 <stdout>
 744:	ldr	x0, [x8]
 748:	ldr	x19, [sp, #16]
 74c:	ldp	x29, x30, [sp], #32
 750:	ret
 754:	adrp	x0, 0 <srunner_set_log>
 758:	adrp	x1, 0 <srunner_set_log>
 75c:	add	x0, x0, #0x0
 760:	add	x1, x1, #0x0
 764:	mov	w2, #0x1cd                 	// #461
 768:	mov	x3, x19
 76c:	bl	0 <eprintf>

0000000000000770 <srunner_open_xmlfile>:
 770:	stp	x29, x30, [sp, #-32]!
 774:	str	x19, [sp, #16]
 778:	ldr	x19, [x0, #32]
 77c:	mov	x29, sp
 780:	cbnz	x19, 798 <srunner_open_xmlfile+0x28>
 784:	adrp	x0, 0 <srunner_set_log>
 788:	add	x0, x0, #0x0
 78c:	bl	0 <getenv>
 790:	mov	x19, x0
 794:	cbz	x0, 7c0 <srunner_open_xmlfile+0x50>
 798:	adrp	x1, 0 <srunner_set_log>
 79c:	add	x1, x1, #0x0
 7a0:	mov	x0, x19
 7a4:	bl	0 <strcmp>
 7a8:	cbz	w0, 7cc <srunner_open_xmlfile+0x5c>
 7ac:	adrp	x1, 0 <srunner_set_log>
 7b0:	add	x1, x1, #0x0
 7b4:	mov	x0, x19
 7b8:	bl	0 <fopen>
 7bc:	cbz	x0, 7e0 <srunner_open_xmlfile+0x70>
 7c0:	ldr	x19, [sp, #16]
 7c4:	ldp	x29, x30, [sp], #32
 7c8:	ret
 7cc:	adrp	x8, 0 <stdout>
 7d0:	ldr	x0, [x8]
 7d4:	ldr	x19, [sp, #16]
 7d8:	ldp	x29, x30, [sp], #32
 7dc:	ret
 7e0:	adrp	x0, 0 <srunner_set_log>
 7e4:	adrp	x1, 0 <srunner_set_log>
 7e8:	add	x0, x0, #0x0
 7ec:	add	x1, x1, #0x0
 7f0:	mov	w2, #0x1cd                 	// #461
 7f4:	mov	x3, x19
 7f8:	bl	0 <eprintf>

00000000000007fc <srunner_open_tapfile>:
 7fc:	stp	x29, x30, [sp, #-32]!
 800:	str	x19, [sp, #16]
 804:	ldr	x19, [x0, #40]
 808:	mov	x29, sp
 80c:	cbnz	x19, 824 <srunner_open_tapfile+0x28>
 810:	adrp	x0, 0 <srunner_set_log>
 814:	add	x0, x0, #0x0
 818:	bl	0 <getenv>
 81c:	mov	x19, x0
 820:	cbz	x0, 84c <srunner_open_tapfile+0x50>
 824:	adrp	x1, 0 <srunner_set_log>
 828:	add	x1, x1, #0x0
 82c:	mov	x0, x19
 830:	bl	0 <strcmp>
 834:	cbz	w0, 858 <srunner_open_tapfile+0x5c>
 838:	adrp	x1, 0 <srunner_set_log>
 83c:	add	x1, x1, #0x0
 840:	mov	x0, x19
 844:	bl	0 <fopen>
 848:	cbz	x0, 86c <srunner_open_tapfile+0x70>
 84c:	ldr	x19, [sp, #16]
 850:	ldp	x29, x30, [sp], #32
 854:	ret
 858:	adrp	x8, 0 <stdout>
 85c:	ldr	x0, [x8]
 860:	ldr	x19, [sp, #16]
 864:	ldp	x29, x30, [sp], #32
 868:	ret
 86c:	adrp	x0, 0 <srunner_set_log>
 870:	adrp	x1, 0 <srunner_set_log>
 874:	add	x0, x0, #0x0
 878:	add	x1, x1, #0x0
 87c:	mov	w2, #0x1cd                 	// #461
 880:	mov	x3, x19
 884:	bl	0 <eprintf>

0000000000000888 <srunner_init_logging>:
 888:	stp	x29, x30, [sp, #-64]!
 88c:	stp	x24, x23, [sp, #16]
 890:	stp	x22, x21, [sp, #32]
 894:	stp	x20, x19, [sp, #48]
 898:	mov	x29, sp
 89c:	mov	w20, w1
 8a0:	mov	x19, x0
 8a4:	bl	0 <check_list_create>
 8a8:	str	x0, [x19, #48]
 8ac:	adrp	x23, 0 <stdout>
 8b0:	ldr	x22, [x23]
 8b4:	mov	w0, #0x18                  	// #24
 8b8:	bl	0 <emalloc>
 8bc:	mov	x21, x0
 8c0:	cmp	w20, #0x4
 8c4:	mov	w0, w20
 8c8:	b.ne	8d0 <srunner_init_logging+0x48>  // b.any
 8cc:	bl	0 <get_env_printmode>
 8d0:	adrp	x8, 2b8 <stdout_lfun>
 8d4:	add	x8, x8, #0x0
 8d8:	stp	x22, x8, [x21]
 8dc:	stp	wzr, w0, [x21, #16]
 8e0:	ldr	x0, [x19, #48]
 8e4:	mov	x1, x21
 8e8:	bl	0 <check_list_add_end>
 8ec:	ldr	x22, [x19, #24]
 8f0:	cbnz	x22, 908 <srunner_init_logging+0x80>
 8f4:	adrp	x0, 0 <srunner_set_log>
 8f8:	add	x0, x0, #0x0
 8fc:	bl	0 <getenv>
 900:	mov	x22, x0
 904:	cbz	x0, 988 <srunner_init_logging+0x100>
 908:	adrp	x1, 0 <srunner_set_log>
 90c:	add	x1, x1, #0x0
 910:	mov	x0, x22
 914:	bl	0 <strcmp>
 918:	cbz	w0, 93c <srunner_init_logging+0xb4>
 91c:	adrp	x1, 0 <srunner_set_log>
 920:	add	x1, x1, #0x0
 924:	mov	x0, x22
 928:	bl	0 <fopen>
 92c:	cbz	x0, ae0 <srunner_init_logging+0x258>
 930:	ldr	x8, [x23]
 934:	mov	x21, x0
 938:	b	948 <srunner_init_logging+0xc0>
 93c:	ldr	x8, [x23]
 940:	mov	x21, x8
 944:	cbz	x8, 988 <srunner_init_logging+0x100>
 948:	cmp	x21, x8
 94c:	mov	w0, #0x18                  	// #24
 950:	cset	w24, ne  // ne = any
 954:	bl	0 <emalloc>
 958:	mov	x22, x0
 95c:	cmp	w20, #0x4
 960:	mov	w0, w20
 964:	b.ne	96c <srunner_init_logging+0xe4>  // b.any
 968:	bl	0 <get_env_printmode>
 96c:	adrp	x8, 358 <lfile_lfun>
 970:	add	x8, x8, #0x0
 974:	stp	x21, x8, [x22]
 978:	stp	w24, w0, [x22, #16]
 97c:	ldr	x0, [x19, #48]
 980:	mov	x1, x22
 984:	bl	0 <check_list_add_end>
 988:	ldr	x22, [x19, #32]
 98c:	cbnz	x22, 9a4 <srunner_init_logging+0x11c>
 990:	adrp	x0, 0 <srunner_set_log>
 994:	add	x0, x0, #0x0
 998:	bl	0 <getenv>
 99c:	mov	x22, x0
 9a0:	cbz	x0, a24 <srunner_init_logging+0x19c>
 9a4:	adrp	x1, 0 <srunner_set_log>
 9a8:	add	x1, x1, #0x0
 9ac:	mov	x0, x22
 9b0:	bl	0 <strcmp>
 9b4:	cbz	w0, 9d8 <srunner_init_logging+0x150>
 9b8:	adrp	x1, 0 <srunner_set_log>
 9bc:	add	x1, x1, #0x0
 9c0:	mov	x0, x22
 9c4:	bl	0 <fopen>
 9c8:	cbz	x0, ae0 <srunner_init_logging+0x258>
 9cc:	ldr	x8, [x23]
 9d0:	mov	x21, x0
 9d4:	b	9e4 <srunner_init_logging+0x15c>
 9d8:	ldr	x8, [x23]
 9dc:	mov	x21, x8
 9e0:	cbz	x8, a24 <srunner_init_logging+0x19c>
 9e4:	cmp	x21, x8
 9e8:	mov	w0, #0x18                  	// #24
 9ec:	cset	w24, ne  // ne = any
 9f0:	bl	0 <emalloc>
 9f4:	mov	x22, x0
 9f8:	cmp	w20, #0x4
 9fc:	mov	w0, w20
 a00:	b.ne	a08 <srunner_init_logging+0x180>  // b.any
 a04:	bl	0 <get_env_printmode>
 a08:	adrp	x8, 418 <xml_lfun>
 a0c:	add	x8, x8, #0x0
 a10:	stp	x21, x8, [x22]
 a14:	stp	w24, w0, [x22, #16]
 a18:	ldr	x0, [x19, #48]
 a1c:	mov	x1, x22
 a20:	bl	0 <check_list_add_end>
 a24:	ldr	x22, [x19, #40]
 a28:	cbnz	x22, a40 <srunner_init_logging+0x1b8>
 a2c:	adrp	x0, 0 <srunner_set_log>
 a30:	add	x0, x0, #0x0
 a34:	bl	0 <getenv>
 a38:	mov	x22, x0
 a3c:	cbz	x0, ac0 <srunner_init_logging+0x238>
 a40:	adrp	x1, 0 <srunner_set_log>
 a44:	add	x1, x1, #0x0
 a48:	mov	x0, x22
 a4c:	bl	0 <strcmp>
 a50:	cbz	w0, a74 <srunner_init_logging+0x1ec>
 a54:	adrp	x1, 0 <srunner_set_log>
 a58:	add	x1, x1, #0x0
 a5c:	mov	x0, x22
 a60:	bl	0 <fopen>
 a64:	cbz	x0, ae0 <srunner_init_logging+0x258>
 a68:	ldr	x8, [x23]
 a6c:	mov	x21, x0
 a70:	b	a80 <srunner_init_logging+0x1f8>
 a74:	ldr	x8, [x23]
 a78:	mov	x21, x8
 a7c:	cbz	x8, ac0 <srunner_init_logging+0x238>
 a80:	cmp	x21, x8
 a84:	mov	w0, #0x18                  	// #24
 a88:	cset	w23, ne  // ne = any
 a8c:	bl	0 <emalloc>
 a90:	cmp	w20, #0x4
 a94:	mov	x22, x0
 a98:	b.ne	aa4 <srunner_init_logging+0x21c>  // b.any
 a9c:	bl	0 <get_env_printmode>
 aa0:	mov	w20, w0
 aa4:	adrp	x8, 5f4 <tap_lfun>
 aa8:	add	x8, x8, #0x0
 aac:	stp	x21, x8, [x22]
 ab0:	stp	w23, w20, [x22, #16]
 ab4:	ldr	x0, [x19, #48]
 ab8:	mov	x1, x22
 abc:	bl	0 <check_list_add_end>
 ac0:	mov	x0, x19
 ac4:	ldp	x20, x19, [sp, #48]
 ac8:	ldp	x22, x21, [sp, #32]
 acc:	ldp	x24, x23, [sp, #16]
 ad0:	mov	x1, xzr
 ad4:	mov	w2, wzr
 ad8:	ldp	x29, x30, [sp], #64
 adc:	b	1ac <srunner_send_evt>
 ae0:	adrp	x0, 0 <srunner_set_log>
 ae4:	adrp	x1, 0 <srunner_set_log>
 ae8:	add	x0, x0, #0x0
 aec:	add	x1, x1, #0x0
 af0:	mov	w2, #0x1cd                 	// #461
 af4:	mov	x3, x22
 af8:	bl	0 <eprintf>

0000000000000afc <srunner_end_logging>:
 afc:	stp	x29, x30, [sp, #-48]!
 b00:	mov	w2, #0x1                   	// #1
 b04:	mov	x1, xzr
 b08:	str	x21, [sp, #16]
 b0c:	stp	x20, x19, [sp, #32]
 b10:	mov	x29, sp
 b14:	mov	x19, x0
 b18:	bl	1ac <srunner_send_evt>
 b1c:	ldr	x20, [x19, #48]
 b20:	mov	x0, x20
 b24:	bl	0 <check_list_front>
 b28:	b	b3c <srunner_end_logging+0x40>
 b2c:	mov	x0, x21
 b30:	bl	0 <free>
 b34:	mov	x0, x20
 b38:	bl	0 <check_list_advance>
 b3c:	mov	x0, x20
 b40:	bl	0 <check_list_at_end>
 b44:	cbnz	w0, b80 <srunner_end_logging+0x84>
 b48:	mov	x0, x20
 b4c:	bl	0 <check_list_val>
 b50:	ldr	w8, [x0, #16]
 b54:	mov	x21, x0
 b58:	cbz	w8, b2c <srunner_end_logging+0x30>
 b5c:	ldr	x0, [x21]
 b60:	bl	0 <fclose>
 b64:	cbz	w0, b2c <srunner_end_logging+0x30>
 b68:	adrp	x0, 0 <srunner_set_log>
 b6c:	adrp	x1, 0 <srunner_set_log>
 b70:	add	x0, x0, #0x0
 b74:	add	x1, x1, #0x0
 b78:	mov	w2, #0x224                 	// #548
 b7c:	bl	0 <eprintf>
 b80:	mov	x0, x20
 b84:	bl	0 <check_list_free>
 b88:	str	xzr, [x19, #48]
 b8c:	ldp	x20, x19, [sp, #32]
 b90:	ldr	x21, [sp, #16]
 b94:	ldp	x29, x30, [sp], #48
 b98:	ret

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <send_failure_info>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	bl	0 <strdup>
  10:	adrp	x8, 0 <send_failure_info>
  14:	ldr	x8, [x8]
  18:	str	x0, [sp, #8]
  1c:	cbnz	x8, 2c <send_failure_info+0x2c>
  20:	adrp	x8, 0 <send_failure_info>
  24:	ldr	x8, [x8]
  28:	cbz	x8, 50 <send_failure_info+0x50>
  2c:	add	x2, sp, #0x8
  30:	mov	w1, #0x1                   	// #1
  34:	mov	x0, x8
  38:	bl	0 <ppack>
  3c:	ldr	x0, [sp, #8]
  40:	bl	0 <free>
  44:	ldp	x29, x30, [sp, #16]
  48:	add	sp, sp, #0x20
  4c:	ret
  50:	adrp	x0, 0 <send_failure_info>
  54:	adrp	x1, 0 <send_failure_info>
  58:	add	x0, x0, #0x0
  5c:	add	x1, x1, #0x0
  60:	mov	w2, #0x50                  	// #80
  64:	bl	0 <eprintf>

0000000000000068 <send_duration_info>:
  68:	sub	sp, sp, #0x20
  6c:	adrp	x8, 0 <send_failure_info>
  70:	ldr	x8, [x8]
  74:	stp	x29, x30, [sp, #16]
  78:	add	x29, sp, #0x10
  7c:	str	w0, [sp, #8]
  80:	cbnz	x8, 90 <send_duration_info+0x28>
  84:	adrp	x8, 0 <send_failure_info>
  88:	ldr	x8, [x8]
  8c:	cbz	x8, ac <send_duration_info+0x44>
  90:	add	x2, sp, #0x8
  94:	mov	w1, #0x3                   	// #3
  98:	mov	x0, x8
  9c:	bl	0 <ppack>
  a0:	ldp	x29, x30, [sp, #16]
  a4:	add	sp, sp, #0x20
  a8:	ret
  ac:	adrp	x0, 0 <send_failure_info>
  b0:	adrp	x1, 0 <send_failure_info>
  b4:	add	x0, x0, #0x0
  b8:	add	x1, x1, #0x0
  bc:	mov	w2, #0x50                  	// #80
  c0:	bl	0 <eprintf>

00000000000000c4 <send_loc_info>:
  c4:	sub	sp, sp, #0x30
  c8:	stp	x29, x30, [sp, #16]
  cc:	str	x19, [sp, #32]
  d0:	add	x29, sp, #0x10
  d4:	mov	w19, w1
  d8:	bl	0 <strdup>
  dc:	adrp	x9, 0 <send_failure_info>
  e0:	mov	x8, x0
  e4:	ldr	x0, [x9]
  e8:	str	x8, [sp, #8]
  ec:	str	w19, [sp]
  f0:	cbnz	x0, 100 <send_loc_info+0x3c>
  f4:	adrp	x8, 0 <send_failure_info>
  f8:	ldr	x0, [x8]
  fc:	cbz	x0, 124 <send_loc_info+0x60>
 100:	mov	x2, sp
 104:	mov	w1, #0x2                   	// #2
 108:	bl	0 <ppack>
 10c:	ldr	x0, [sp, #8]
 110:	bl	0 <free>
 114:	ldr	x19, [sp, #32]
 118:	ldp	x29, x30, [sp, #16]
 11c:	add	sp, sp, #0x30
 120:	ret
 124:	adrp	x0, 0 <send_failure_info>
 128:	adrp	x1, 0 <send_failure_info>
 12c:	add	x0, x0, #0x0
 130:	add	x1, x1, #0x0
 134:	mov	w2, #0x50                  	// #80
 138:	bl	0 <eprintf>

000000000000013c <send_ctx_info>:
 13c:	sub	sp, sp, #0x20
 140:	adrp	x8, 0 <send_failure_info>
 144:	ldr	x8, [x8]
 148:	stp	x29, x30, [sp, #16]
 14c:	add	x29, sp, #0x10
 150:	str	w0, [sp, #8]
 154:	cbnz	x8, 164 <send_ctx_info+0x28>
 158:	adrp	x8, 0 <send_failure_info>
 15c:	ldr	x8, [x8]
 160:	cbz	x8, 180 <send_ctx_info+0x44>
 164:	add	x2, sp, #0x8
 168:	mov	x0, x8
 16c:	mov	w1, wzr
 170:	bl	0 <ppack>
 174:	ldp	x29, x30, [sp, #16]
 178:	add	sp, sp, #0x20
 17c:	ret
 180:	adrp	x0, 0 <send_failure_info>
 184:	adrp	x1, 0 <send_failure_info>
 188:	add	x0, x0, #0x0
 18c:	add	x1, x1, #0x0
 190:	mov	w2, #0x50                  	// #80
 194:	bl	0 <eprintf>

0000000000000198 <receive_test_result>:
 198:	stp	x29, x30, [sp, #-48]!
 19c:	stp	x20, x19, [sp, #32]
 1a0:	adrp	x20, 0 <send_failure_info>
 1a4:	ldr	x19, [x20]
 1a8:	stp	x22, x21, [sp, #16]
 1ac:	mov	w21, w0
 1b0:	adrp	x22, 0 <send_failure_info>
 1b4:	mov	x29, sp
 1b8:	cbnz	x19, 1c4 <receive_test_result+0x2c>
 1bc:	ldr	x19, [x22]
 1c0:	cbz	x19, 324 <receive_test_result+0x18c>
 1c4:	mov	x0, x19
 1c8:	bl	0 <rewind>
 1cc:	mov	x0, x19
 1d0:	bl	0 <punpack>
 1d4:	cbz	x0, 2f4 <receive_test_result+0x15c>
 1d8:	mov	x19, x0
 1dc:	bl	354 <teardown_pipe>
 1e0:	ldr	x8, [x22]
 1e4:	cbz	x8, 220 <receive_test_result+0x88>
 1e8:	ldr	x8, [x20]
 1ec:	cbnz	x8, 30c <receive_test_result+0x174>
 1f0:	adrp	x20, 0 <send_failure_info>
 1f4:	add	x20, x20, #0x0
 1f8:	add	x0, x20, #0x18
 1fc:	bl	4ac <open_tmp_file>
 200:	str	x0, [x20]
 204:	cbnz	x0, 238 <receive_test_result+0xa0>
 208:	adrp	x0, 0 <send_failure_info>
 20c:	adrp	x1, 0 <send_failure_info>
 210:	add	x0, x0, #0x0
 214:	add	x1, x1, #0x0
 218:	mov	w2, #0x146                 	// #326
 21c:	bl	0 <eprintf>
 220:	adrp	x20, 0 <send_failure_info>
 224:	add	x20, x20, #0x0
 228:	add	x0, x20, #0x8
 22c:	bl	4ac <open_tmp_file>
 230:	str	x0, [x20]
 234:	cbz	x0, 33c <receive_test_result+0x1a4>
 238:	bl	0 <tr_create>
 23c:	mov	x20, x0
 240:	cbnz	w21, 270 <receive_test_result+0xd8>
 244:	ldr	x8, [x19, #40]
 248:	cbnz	x8, 270 <receive_test_result+0xd8>
 24c:	ldr	w8, [x19]
 250:	cmp	w8, #0x1
 254:	b.ne	2a0 <receive_test_result+0x108>  // b.any
 258:	mov	w9, #0x1                   	// #1
 25c:	str	xzr, [x20, #48]
 260:	mov	x8, x19
 264:	str	w9, [x20, #4]
 268:	ldr	x9, [x8, #8]!
 26c:	b	2bc <receive_test_result+0x124>
 270:	ldr	w8, [x19, #4]
 274:	cbnz	w8, 27c <receive_test_result+0xe4>
 278:	ldr	w8, [x19]
 27c:	str	w8, [x20, #4]
 280:	ldr	x9, [x19, #40]
 284:	cmp	w8, #0x2
 288:	mov	x8, x19
 28c:	str	x9, [x20, #48]
 290:	str	xzr, [x19, #40]
 294:	b.eq	2b8 <receive_test_result+0x120>  // b.none
 298:	ldr	x9, [x8, #8]!
 29c:	b	2bc <receive_test_result+0x124>
 2a0:	mov	w8, #0x2                   	// #2
 2a4:	str	xzr, [x20, #48]
 2a8:	str	w8, [x20, #4]
 2ac:	ldr	w9, [x19, #48]
 2b0:	mov	x8, x19
 2b4:	str	w9, [x20, #24]
 2b8:	ldr	x9, [x8, #24]!
 2bc:	str	x9, [x20, #8]
 2c0:	add	x9, x8, #0x8
 2c4:	ldr	w10, [x9]
 2c8:	str	xzr, [x8]
 2cc:	mov	w8, #0xffffffff            	// #-1
 2d0:	mov	x0, x19
 2d4:	str	w8, [x9]
 2d8:	str	w10, [x20, #16]
 2dc:	bl	0 <rcvmsg_free>
 2e0:	mov	x0, x20
 2e4:	ldp	x20, x19, [sp, #32]
 2e8:	ldp	x22, x21, [sp, #16]
 2ec:	ldp	x29, x30, [sp], #48
 2f0:	ret
 2f4:	adrp	x0, 0 <send_failure_info>
 2f8:	adrp	x1, 0 <send_failure_info>
 2fc:	add	x0, x0, #0x0
 300:	add	x1, x1, #0x0
 304:	mov	w2, #0x85                  	// #133
 308:	bl	0 <eprintf>
 30c:	adrp	x0, 0 <send_failure_info>
 310:	adrp	x1, 0 <send_failure_info>
 314:	add	x0, x0, #0x0
 318:	add	x1, x1, #0x0
 31c:	mov	w2, #0x14d                 	// #333
 320:	bl	0 <eprintf>
 324:	adrp	x0, 0 <send_failure_info>
 328:	adrp	x1, 0 <send_failure_info>
 32c:	add	x0, x0, #0x0
 330:	add	x1, x1, #0x0
 334:	mov	w2, #0x50                  	// #80
 338:	bl	0 <eprintf>
 33c:	adrp	x0, 0 <send_failure_info>
 340:	adrp	x1, 0 <send_failure_info>
 344:	add	x0, x0, #0x0
 348:	add	x1, x1, #0x0
 34c:	mov	w2, #0x13d                 	// #317
 350:	bl	0 <eprintf>

0000000000000354 <teardown_pipe>:
 354:	stp	x29, x30, [sp, #-32]!
 358:	adrp	x8, 0 <send_failure_info>
 35c:	ldr	x0, [x8]
 360:	str	x19, [sp, #16]
 364:	mov	x29, sp
 368:	cbz	x0, 3a4 <teardown_pipe+0x50>
 36c:	bl	0 <fclose>
 370:	adrp	x8, 0 <send_failure_info>
 374:	add	x8, x8, #0x0
 378:	ldr	x0, [x8, #24]
 37c:	str	xzr, [x8]
 380:	cbz	x0, 398 <teardown_pipe+0x44>
 384:	bl	0 <unlink>
 388:	adrp	x19, 0 <send_failure_info>
 38c:	ldr	x0, [x19]
 390:	bl	0 <free>
 394:	str	xzr, [x19]
 398:	ldr	x19, [sp, #16]
 39c:	ldp	x29, x30, [sp], #32
 3a0:	ret
 3a4:	adrp	x8, 0 <send_failure_info>
 3a8:	ldr	x0, [x8]
 3ac:	cbz	x0, 3e8 <teardown_pipe+0x94>
 3b0:	bl	0 <fclose>
 3b4:	adrp	x8, 0 <send_failure_info>
 3b8:	add	x8, x8, #0x0
 3bc:	ldr	x0, [x8, #8]
 3c0:	str	xzr, [x8]
 3c4:	cbz	x0, 398 <teardown_pipe+0x44>
 3c8:	bl	0 <unlink>
 3cc:	adrp	x19, 0 <send_failure_info>
 3d0:	ldr	x0, [x19]
 3d4:	bl	0 <free>
 3d8:	str	xzr, [x19]
 3dc:	ldr	x19, [sp, #16]
 3e0:	ldp	x29, x30, [sp], #32
 3e4:	ret
 3e8:	adrp	x0, 0 <send_failure_info>
 3ec:	adrp	x1, 0 <send_failure_info>
 3f0:	add	x0, x0, #0x0
 3f4:	add	x1, x1, #0x0
 3f8:	mov	w2, #0x16a                 	// #362
 3fc:	bl	0 <eprintf>

0000000000000400 <setup_messaging>:
 400:	stp	x29, x30, [sp, #-32]!
 404:	adrp	x8, 0 <send_failure_info>
 408:	ldr	x8, [x8]
 40c:	str	x19, [sp, #16]
 410:	mov	x29, sp
 414:	cbz	x8, 454 <setup_messaging+0x54>
 418:	adrp	x8, 0 <send_failure_info>
 41c:	ldr	x8, [x8]
 420:	cbnz	x8, 478 <setup_messaging+0x78>
 424:	adrp	x19, 0 <send_failure_info>
 428:	add	x19, x19, #0x0
 42c:	add	x0, x19, #0x18
 430:	bl	4ac <open_tmp_file>
 434:	str	x0, [x19]
 438:	cbnz	x0, 46c <setup_messaging+0x6c>
 43c:	adrp	x0, 0 <send_failure_info>
 440:	adrp	x1, 0 <send_failure_info>
 444:	add	x0, x0, #0x0
 448:	add	x1, x1, #0x0
 44c:	mov	w2, #0x146                 	// #326
 450:	bl	0 <eprintf>
 454:	adrp	x19, 0 <send_failure_info>
 458:	add	x19, x19, #0x0
 45c:	add	x0, x19, #0x8
 460:	bl	4ac <open_tmp_file>
 464:	str	x0, [x19]
 468:	cbz	x0, 490 <setup_messaging+0x90>
 46c:	ldr	x19, [sp, #16]
 470:	ldp	x29, x30, [sp], #32
 474:	ret
 478:	adrp	x0, 0 <send_failure_info>
 47c:	adrp	x1, 0 <send_failure_info>
 480:	add	x0, x0, #0x0
 484:	add	x1, x1, #0x0
 488:	mov	w2, #0x14d                 	// #333
 48c:	bl	0 <eprintf>
 490:	adrp	x0, 0 <send_failure_info>
 494:	adrp	x1, 0 <send_failure_info>
 498:	add	x0, x0, #0x0
 49c:	add	x1, x1, #0x0
 4a0:	mov	w2, #0x13d                 	// #317
 4a4:	bl	0 <eprintf>

00000000000004a8 <teardown_messaging>:
 4a8:	b	354 <teardown_pipe>

00000000000004ac <open_tmp_file>:
 4ac:	stp	x29, x30, [sp, #-32]!
 4b0:	stp	x20, x19, [sp, #16]
 4b4:	mov	x19, x0
 4b8:	str	xzr, [x0]
 4bc:	adrp	x0, 0 <send_failure_info>
 4c0:	add	x0, x0, #0x0
 4c4:	mov	x29, sp
 4c8:	bl	0 <getenv>
 4cc:	adrp	x8, 0 <send_failure_info>
 4d0:	add	x8, x8, #0x0
 4d4:	cmp	x0, #0x0
 4d8:	csel	x1, x8, x0, eq  // eq = none
 4dc:	adrp	x0, 0 <send_failure_info>
 4e0:	add	x0, x0, #0x0
 4e4:	bl	0 <ck_strdup_printf>
 4e8:	str	x0, [x19]
 4ec:	bl	0 <mkstemp>
 4f0:	tbnz	w0, #31, 528 <open_tmp_file+0x7c>
 4f4:	adrp	x1, 0 <send_failure_info>
 4f8:	add	x1, x1, #0x0
 4fc:	bl	0 <fdopen>
 500:	ldr	x8, [x19]
 504:	mov	x20, x0
 508:	mov	x0, x8
 50c:	bl	0 <unlink>
 510:	cbz	x20, 53c <open_tmp_file+0x90>
 514:	cbz	w0, 53c <open_tmp_file+0x90>
 518:	mov	x0, x20
 51c:	ldp	x20, x19, [sp, #16]
 520:	ldp	x29, x30, [sp], #32
 524:	ret
 528:	mov	x20, xzr
 52c:	mov	x0, x20
 530:	ldp	x20, x19, [sp, #16]
 534:	ldp	x29, x30, [sp], #32
 538:	ret
 53c:	ldr	x0, [x19]
 540:	bl	0 <free>
 544:	str	xzr, [x19]
 548:	mov	x0, x20
 54c:	ldp	x20, x19, [sp, #16]
 550:	ldp	x29, x30, [sp], #32
 554:	ret

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_set_max_msg_size>:
   0:	adrp	x8, 0 <check_set_max_msg_size>
   4:	str	x0, [x8]
   8:	ret

000000000000000c <pack>:
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	cbz	x1, 44 <pack+0x38>
  18:	cbz	x2, 50 <pack+0x44>
  1c:	mov	w3, w0
  20:	cmp	w0, #0x4
  24:	b.cs	5c <pack+0x50>  // b.hs, b.nlast
  28:	adrp	x8, 0 <check_set_max_msg_size>
  2c:	add	x8, x8, #0x0
  30:	ldr	x3, [x8, w3, uxtw #3]
  34:	mov	x0, x1
  38:	mov	x1, x2
  3c:	ldp	x29, x30, [sp], #16
  40:	br	x3
  44:	mov	w0, #0xffffffff            	// #-1
  48:	ldp	x29, x30, [sp], #16
  4c:	ret
  50:	mov	w0, wzr
  54:	ldp	x29, x30, [sp], #16
  58:	ret
  5c:	adrp	x0, 0 <check_set_max_msg_size>
  60:	adrp	x1, 0 <check_set_max_msg_size>
  64:	add	x0, x0, #0x0
  68:	add	x1, x1, #0x0
  6c:	mov	w2, #0x7e                  	// #126
  70:	bl	0 <eprintf>

0000000000000074 <upack>:
  74:	stp	x29, x30, [sp, #-32]!
  78:	mov	x29, sp
  7c:	str	x19, [sp, #16]
  80:	str	x0, [x29, #24]
  84:	cbz	x0, d4 <upack+0x60>
  88:	mov	x8, x0
  8c:	ldr	w9, [x8], #4
  90:	mov	x19, x0
  94:	lsl	x9, x9, #32
  98:	rev	x3, x9
  9c:	cmp	w3, #0x4
  a0:	str	x8, [x29, #24]
  a4:	str	w3, [x2]
  a8:	b.cs	e4 <upack+0x70>  // b.hs, b.nlast
  ac:	adrp	x8, 0 <check_set_max_msg_size>
  b0:	add	x8, x8, #0x0
  b4:	ldr	x8, [x8, x3, lsl #3]
  b8:	add	x0, x29, #0x18
  bc:	blr	x8
  c0:	ldr	w8, [x29, #24]
  c4:	sub	w0, w8, w19
  c8:	ldr	x19, [sp, #16]
  cc:	ldp	x29, x30, [sp], #32
  d0:	ret
  d4:	mov	w0, #0xffffffff            	// #-1
  d8:	ldr	x19, [sp, #16]
  dc:	ldp	x29, x30, [sp], #32
  e0:	ret
  e4:	adrp	x0, 0 <check_set_max_msg_size>
  e8:	adrp	x1, 0 <check_set_max_msg_size>
  ec:	add	x0, x0, #0x0
  f0:	add	x1, x1, #0x0
  f4:	mov	w2, #0x8e                  	// #142
  f8:	bl	0 <eprintf>

00000000000000fc <ppack>:
  fc:	sub	sp, sp, #0x120
 100:	stp	x29, x30, [sp, #224]
 104:	stp	x20, x19, [sp, #272]
 108:	add	x29, sp, #0xe0
 10c:	mov	x19, x0
 110:	str	x28, [sp, #240]
 114:	stp	x22, x21, [sp, #256]
 118:	str	xzr, [x29, #24]
 11c:	cbz	x2, 15c <ppack+0x60>
 120:	mov	w3, w1
 124:	cmp	w1, #0x4
 128:	b.cs	258 <ppack+0x15c>  // b.hs, b.nlast
 12c:	adrp	x8, 0 <check_set_max_msg_size>
 130:	add	x8, x8, #0x0
 134:	ldr	x8, [x8, w3, uxtw #3]
 138:	add	x0, x29, #0x18
 13c:	mov	x1, x2
 140:	blr	x8
 144:	sxtw	x20, w0
 148:	adrp	x0, 0 <check_set_max_msg_size>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <getenv>
 154:	cbnz	x0, 170 <ppack+0x74>
 158:	b	180 <ppack+0x84>
 15c:	mov	x20, xzr
 160:	adrp	x0, 0 <check_set_max_msg_size>
 164:	add	x0, x0, #0x0
 168:	bl	0 <getenv>
 16c:	cbz	x0, 180 <ppack+0x84>
 170:	mov	w2, #0xa                   	// #10
 174:	mov	x1, xzr
 178:	bl	0 <strtoul>
 17c:	cbnz	x0, 188 <ppack+0x8c>
 180:	adrp	x8, 0 <check_set_max_msg_size>
 184:	ldr	x0, [x8]
 188:	cmp	x0, #0x0
 18c:	mov	w8, #0x1000                	// #4096
 190:	csel	x8, x8, x0, eq  // eq = none
 194:	cmp	x8, x20
 198:	b.cc	21c <ppack+0x120>  // b.lo, b.ul, b.last
 19c:	mov	x0, sp
 1a0:	mov	w1, wzr
 1a4:	bl	0 <__sigsetjmp>
 1a8:	cbnz	w0, 234 <ppack+0x138>
 1ac:	mov	x0, sp
 1b0:	bl	0 <__pthread_register_cancel>
 1b4:	adrp	x21, 0 <check_set_max_msg_size>
 1b8:	add	x21, x21, #0x0
 1bc:	mov	x0, x21
 1c0:	bl	0 <pthread_mutex_lock>
 1c4:	ldr	x0, [x29, #24]
 1c8:	mov	w1, #0x1                   	// #1
 1cc:	mov	x2, x20
 1d0:	mov	x3, x19
 1d4:	bl	0 <fwrite>
 1d8:	mov	x22, x0
 1dc:	mov	x0, x19
 1e0:	bl	0 <fflush>
 1e4:	mov	x0, x21
 1e8:	bl	0 <pthread_mutex_unlock>
 1ec:	mov	x0, sp
 1f0:	bl	0 <__pthread_unregister_cancel>
 1f4:	cmp	x22, x20
 1f8:	b.ne	240 <ppack+0x144>  // b.any
 1fc:	ldr	x0, [x29, #24]
 200:	bl	0 <free>
 204:	ldp	x20, x19, [sp, #272]
 208:	ldp	x22, x21, [sp, #256]
 20c:	ldr	x28, [sp, #240]
 210:	ldp	x29, x30, [sp, #224]
 214:	add	sp, sp, #0x120
 218:	ret
 21c:	adrp	x0, 0 <check_set_max_msg_size>
 220:	adrp	x1, 0 <check_set_max_msg_size>
 224:	add	x0, x0, #0x0
 228:	add	x1, x1, #0x0
 22c:	mov	w2, #0x146                 	// #326
 230:	bl	0 <eprintf>
 234:	bl	270 <ppack_cleanup>
 238:	mov	x0, sp
 23c:	bl	0 <__pthread_unwind_next>
 240:	adrp	x0, 0 <check_set_max_msg_size>
 244:	adrp	x1, 0 <check_set_max_msg_size>
 248:	add	x0, x0, #0x0
 24c:	add	x1, x1, #0x0
 250:	mov	w2, #0x14f                 	// #335
 254:	bl	0 <eprintf>
 258:	adrp	x0, 0 <check_set_max_msg_size>
 25c:	adrp	x1, 0 <check_set_max_msg_size>
 260:	add	x0, x0, #0x0
 264:	add	x1, x1, #0x0
 268:	mov	w2, #0x7e                  	// #126
 26c:	bl	0 <eprintf>

0000000000000270 <ppack_cleanup>:
 270:	adrp	x0, 0 <check_set_max_msg_size>
 274:	add	x0, x0, #0x0
 278:	b	0 <pthread_mutex_unlock>

000000000000027c <rcvmsg_free>:
 27c:	stp	x29, x30, [sp, #-32]!
 280:	str	x19, [sp, #16]
 284:	mov	x19, x0
 288:	ldr	x0, [x0, #8]
 28c:	mov	x29, sp
 290:	bl	0 <free>
 294:	ldr	x0, [x19, #24]
 298:	bl	0 <free>
 29c:	ldr	x0, [x19, #40]
 2a0:	bl	0 <free>
 2a4:	mov	x0, x19
 2a8:	ldr	x19, [sp, #16]
 2ac:	ldp	x29, x30, [sp], #32
 2b0:	b	0 <free>

00000000000002b4 <punpack>:
 2b4:	sub	sp, sp, #0x90
 2b8:	stp	x20, x19, [sp, #128]
 2bc:	mov	x20, x0
 2c0:	mov	w0, #0x38                  	// #56
 2c4:	stp	x29, x30, [sp, #48]
 2c8:	stp	x28, x27, [sp, #64]
 2cc:	stp	x26, x25, [sp, #80]
 2d0:	stp	x24, x23, [sp, #96]
 2d4:	stp	x22, x21, [sp, #112]
 2d8:	add	x29, sp, #0x30
 2dc:	bl	0 <emalloc>
 2e0:	mov	w8, #0xffffffff            	// #-1
 2e4:	mov	x19, x0
 2e8:	stp	xzr, xzr, [x0]
 2ec:	str	xzr, [x0, #40]
 2f0:	str	xzr, [x0, #24]
 2f4:	str	w8, [x0, #48]
 2f8:	str	w8, [x0, #32]
 2fc:	str	w8, [x0, #16]
 300:	adrp	x0, 0 <check_set_max_msg_size>
 304:	add	x0, x0, #0x0
 308:	bl	0 <getenv>
 30c:	adrp	x22, 0 <check_set_max_msg_size>
 310:	cbz	x0, 324 <punpack+0x70>
 314:	mov	w2, #0xa                   	// #10
 318:	mov	x1, xzr
 31c:	bl	0 <strtoul>
 320:	cbnz	x0, 328 <punpack+0x74>
 324:	ldr	x0, [x22]
 328:	lsl	x8, x0, #1
 32c:	cmp	x0, #0x0
 330:	mov	w9, #0x2000                	// #8192
 334:	csel	x0, x9, x8, eq  // eq = none
 338:	bl	0 <emalloc>
 33c:	mov	x21, x0
 340:	adrp	x0, 0 <check_set_max_msg_size>
 344:	add	x0, x0, #0x0
 348:	bl	0 <getenv>
 34c:	cbz	x0, 360 <punpack+0xac>
 350:	mov	w2, #0xa                   	// #10
 354:	mov	x1, xzr
 358:	bl	0 <strtoul>
 35c:	cbnz	x0, 364 <punpack+0xb0>
 360:	ldr	x0, [x22]
 364:	cmp	x0, #0x0
 368:	mov	w8, #0x1000                	// #4096
 36c:	csel	w8, w8, w0, eq  // eq = none
 370:	lsl	w8, w8, #1
 374:	sxtw	x2, w8
 378:	mov	w1, #0x1                   	// #1
 37c:	mov	x0, x21
 380:	mov	x3, x20
 384:	bl	0 <fread>
 388:	mov	x22, x0
 38c:	mov	x0, x20
 390:	bl	0 <ferror>
 394:	cbnz	w0, 5bc <punpack+0x308>
 398:	cmp	w22, #0x1
 39c:	b.lt	530 <punpack+0x27c>  // b.tstop
 3a0:	adrp	x26, 0 <check_set_max_msg_size>
 3a4:	adrp	x27, 0 <check_set_max_msg_size>
 3a8:	add	x25, x21, #0x4
 3ac:	add	x26, x26, #0x0
 3b0:	add	x27, x27, #0x0
 3b4:	mov	w28, w22
 3b8:	b	3c4 <punpack+0x110>
 3bc:	cmp	w28, #0x0
 3c0:	b.le	530 <punpack+0x27c>
 3c4:	stur	x21, [x29, #-8]
 3c8:	cbz	x21, 570 <punpack+0x2bc>
 3cc:	ldr	w8, [x21]
 3d0:	stur	x25, [x29, #-8]
 3d4:	lsl	x8, x8, #32
 3d8:	rev	x23, x8
 3dc:	cmp	w23, #0x4
 3e0:	b.cs	588 <punpack+0x2d4>  // b.hs, b.nlast
 3e4:	ldr	x8, [x26, x23, lsl #3]
 3e8:	sub	x0, x29, #0x8
 3ec:	add	x1, sp, #0x18
 3f0:	blr	x8
 3f4:	ldur	x8, [x29, #-8]
 3f8:	sub	x24, x8, x21
 3fc:	cmn	w24, #0x1
 400:	b.eq	570 <punpack+0x2bc>  // b.none
 404:	cmp	w23, #0x3
 408:	b.hi	4dc <punpack+0x228>  // b.pmore
 40c:	mov	w8, w23
 410:	adr	x9, 420 <punpack+0x16c>
 414:	ldrb	w10, [x27, x8]
 418:	add	x9, x9, x10, lsl #2
 41c:	br	x9
 420:	ldr	w8, [x19]
 424:	ldr	w23, [sp, #24]
 428:	cbz	w8, 440 <punpack+0x18c>
 42c:	ldr	x0, [x19, #8]
 430:	bl	0 <free>
 434:	mov	w8, #0xffffffff            	// #-1
 438:	str	w8, [x19, #16]
 43c:	str	xzr, [x19, #8]
 440:	str	w23, [x19]
 444:	b	4dc <punpack+0x228>
 448:	ldr	w8, [x19, #4]
 44c:	cbnz	w8, 4a4 <punpack+0x1f0>
 450:	ldr	x9, [sp, #32]
 454:	ldr	w8, [x19]
 458:	str	x9, [sp, #16]
 45c:	ldr	w9, [sp, #24]
 460:	cmp	w8, #0x2
 464:	mov	w8, #0x8                   	// #8
 468:	str	w9, [sp, #12]
 46c:	mov	w9, #0x18                  	// #24
 470:	csel	x26, x9, x8, eq  // eq = none
 474:	ldr	x0, [x19, x26]
 478:	mov	w8, #0x10                  	// #16
 47c:	mov	w9, #0x20                  	// #32
 480:	csel	x23, x9, x8, eq  // eq = none
 484:	bl	0 <free>
 488:	ldr	w8, [sp, #12]
 48c:	ldr	x0, [sp, #16]
 490:	str	w8, [x19, x23]
 494:	bl	0 <strdup>
 498:	str	x0, [x19, x26]
 49c:	adrp	x26, 0 <check_set_max_msg_size>
 4a0:	add	x26, x26, #0x0
 4a4:	ldr	x0, [sp, #32]
 4a8:	b	4d8 <punpack+0x224>
 4ac:	ldr	w8, [sp, #24]
 4b0:	str	w8, [x19, #48]
 4b4:	b	4dc <punpack+0x228>
 4b8:	ldr	x8, [x19, #40]
 4bc:	cbnz	x8, 4d4 <punpack+0x220>
 4c0:	ldr	x0, [sp, #24]
 4c4:	bl	0 <strdup>
 4c8:	ldr	w8, [x19]
 4cc:	str	x0, [x19, #40]
 4d0:	str	w8, [x19, #4]
 4d4:	ldr	x0, [sp, #24]
 4d8:	bl	0 <free>
 4dc:	subs	w28, w28, w24
 4e0:	b.mi	5a4 <punpack+0x2f0>  // b.first
 4e4:	sxtw	x23, w24
 4e8:	mov	w24, w28
 4ec:	add	x1, x21, x23
 4f0:	mov	x0, x21
 4f4:	mov	x2, x24
 4f8:	bl	0 <memmove>
 4fc:	cmp	w22, #0x1
 500:	b.lt	3bc <punpack+0x108>  // b.tstop
 504:	add	x0, x21, x24
 508:	mov	w1, #0x1                   	// #1
 50c:	mov	x2, x23
 510:	mov	x3, x20
 514:	bl	0 <fread>
 518:	mov	x22, x0
 51c:	mov	x0, x20
 520:	bl	0 <ferror>
 524:	cbnz	w0, 5bc <punpack+0x308>
 528:	add	w28, w28, w22
 52c:	b	3bc <punpack+0x108>
 530:	mov	x0, x21
 534:	bl	0 <free>
 538:	ldr	w8, [x19]
 53c:	cbnz	w8, 54c <punpack+0x298>
 540:	mov	x0, x19
 544:	bl	0 <free>
 548:	mov	x19, xzr
 54c:	mov	x0, x19
 550:	ldp	x20, x19, [sp, #128]
 554:	ldp	x22, x21, [sp, #112]
 558:	ldp	x24, x23, [sp, #96]
 55c:	ldp	x26, x25, [sp, #80]
 560:	ldp	x28, x27, [sp, #64]
 564:	ldp	x29, x30, [sp, #48]
 568:	add	sp, sp, #0x90
 56c:	ret
 570:	adrp	x0, 0 <check_set_max_msg_size>
 574:	adrp	x1, 0 <check_set_max_msg_size>
 578:	add	x0, x0, #0x0
 57c:	add	x1, x1, #0x0
 580:	mov	w2, #0x16a                 	// #362
 584:	bl	0 <eprintf>
 588:	adrp	x0, 0 <check_set_max_msg_size>
 58c:	adrp	x1, 0 <check_set_max_msg_size>
 590:	add	x0, x0, #0x0
 594:	add	x1, x1, #0x0
 598:	mov	w2, #0x8e                  	// #142
 59c:	mov	w3, w23
 5a0:	bl	0 <eprintf>
 5a4:	adrp	x0, 0 <check_set_max_msg_size>
 5a8:	adrp	x1, 0 <check_set_max_msg_size>
 5ac:	add	x0, x0, #0x0
 5b0:	add	x1, x1, #0x0
 5b4:	mov	w2, #0x1e6                 	// #486
 5b8:	bl	0 <eprintf>
 5bc:	adrp	x0, 0 <check_set_max_msg_size>
 5c0:	adrp	x1, 0 <check_set_max_msg_size>
 5c4:	add	x0, x0, #0x0
 5c8:	add	x1, x1, #0x0
 5cc:	mov	w2, #0x15a                 	// #346
 5d0:	bl	0 <eprintf>

00000000000005d4 <pack_ctx>:
 5d4:	stp	x29, x30, [sp, #-32]!
 5d8:	stp	x20, x19, [sp, #16]
 5dc:	mov	x20, x0
 5e0:	mov	w0, #0x8                   	// #8
 5e4:	mov	x29, sp
 5e8:	mov	x19, x1
 5ec:	bl	0 <emalloc>
 5f0:	str	x0, [x20]
 5f4:	str	wzr, [x0]
 5f8:	ldr	w9, [x19]
 5fc:	mov	x8, x0
 600:	mov	w0, #0x8                   	// #8
 604:	rev	w9, w9
 608:	str	w9, [x8, #4]
 60c:	ldp	x20, x19, [sp, #16]
 610:	ldp	x29, x30, [sp], #32
 614:	ret

0000000000000618 <pack_fail>:
 618:	stp	x29, x30, [sp, #-48]!
 61c:	stp	x22, x21, [sp, #16]
 620:	stp	x20, x19, [sp, #32]
 624:	ldr	x8, [x1]
 628:	mov	x20, x1
 62c:	mov	x22, x0
 630:	mov	x29, sp
 634:	cbz	x8, 648 <pack_fail+0x30>
 638:	mov	x0, x8
 63c:	bl	0 <strlen>
 640:	add	w19, w0, #0x8
 644:	b	64c <pack_fail+0x34>
 648:	mov	w19, #0x8                   	// #8
 64c:	sxtw	x0, w19
 650:	bl	0 <emalloc>
 654:	mov	w8, #0x1000000             	// #16777216
 658:	str	x0, [x22]
 65c:	str	w8, [x0]
 660:	ldr	x20, [x20]
 664:	mov	x21, x0
 668:	cbz	x20, 6ac <pack_fail+0x94>
 66c:	mov	x0, x20
 670:	bl	0 <strlen>
 674:	rev	w8, w0
 678:	cmp	w0, #0x1
 67c:	str	w8, [x21, #4]
 680:	b.lt	698 <pack_fail+0x80>  // b.tstop
 684:	add	x8, x21, #0x8
 688:	mov	w2, w0
 68c:	mov	x0, x8
 690:	mov	x1, x20
 694:	bl	0 <memcpy>
 698:	mov	w0, w19
 69c:	ldp	x20, x19, [sp, #32]
 6a0:	ldp	x22, x21, [sp, #16]
 6a4:	ldp	x29, x30, [sp], #48
 6a8:	ret
 6ac:	mov	w0, wzr
 6b0:	rev	w8, w0
 6b4:	cmp	w0, #0x1
 6b8:	str	w8, [x21, #4]
 6bc:	b.ge	684 <pack_fail+0x6c>  // b.tcont
 6c0:	b	698 <pack_fail+0x80>

00000000000006c4 <pack_loc>:
 6c4:	stp	x29, x30, [sp, #-64]!
 6c8:	stp	x22, x21, [sp, #32]
 6cc:	stp	x20, x19, [sp, #48]
 6d0:	ldr	x8, [x1, #8]
 6d4:	mov	x19, x1
 6d8:	mov	x21, x0
 6dc:	str	x23, [sp, #16]
 6e0:	mov	x29, sp
 6e4:	cbz	x8, 6f8 <pack_loc+0x34>
 6e8:	mov	x0, x8
 6ec:	bl	0 <strlen>
 6f0:	add	w20, w0, #0xc
 6f4:	b	6fc <pack_loc+0x38>
 6f8:	mov	w20, #0xc                   	// #12
 6fc:	sxtw	x0, w20
 700:	bl	0 <emalloc>
 704:	mov	w8, #0x2000000             	// #33554432
 708:	str	x0, [x21]
 70c:	str	w8, [x0]
 710:	ldr	x21, [x19, #8]
 714:	mov	x22, x0
 718:	cbz	x21, 728 <pack_loc+0x64>
 71c:	mov	x0, x21
 720:	bl	0 <strlen>
 724:	b	72c <pack_loc+0x68>
 728:	mov	w0, wzr
 72c:	rev	w8, w0
 730:	cmp	w0, #0x1
 734:	str	w8, [x22, #4]
 738:	add	x22, x22, #0x8
 73c:	b.lt	758 <pack_loc+0x94>  // b.tstop
 740:	mov	w23, w0
 744:	mov	x0, x22
 748:	mov	x1, x21
 74c:	mov	x2, x23
 750:	bl	0 <memcpy>
 754:	add	x22, x22, x23
 758:	ldr	w8, [x19]
 75c:	mov	w0, w20
 760:	ldr	x23, [sp, #16]
 764:	rev	w8, w8
 768:	str	w8, [x22]
 76c:	ldp	x20, x19, [sp, #48]
 770:	ldp	x22, x21, [sp, #32]
 774:	ldp	x29, x30, [sp], #64
 778:	ret

000000000000077c <pack_duration>:
 77c:	stp	x29, x30, [sp, #-32]!
 780:	stp	x20, x19, [sp, #16]
 784:	mov	x20, x0
 788:	mov	w0, #0x8                   	// #8
 78c:	mov	x29, sp
 790:	mov	x19, x1
 794:	bl	0 <emalloc>
 798:	mov	w9, #0x3000000             	// #50331648
 79c:	str	x0, [x20]
 7a0:	str	w9, [x0]
 7a4:	ldr	w9, [x19]
 7a8:	mov	x8, x0
 7ac:	mov	w0, #0x8                   	// #8
 7b0:	rev	w9, w9
 7b4:	str	w9, [x8, #4]
 7b8:	ldp	x20, x19, [sp, #16]
 7bc:	ldp	x29, x30, [sp], #32
 7c0:	ret

00000000000007c4 <upack_ctx>:
 7c4:	ldr	x8, [x0]
 7c8:	ldr	w9, [x8], #4
 7cc:	rev	w9, w9
 7d0:	str	x8, [x0]
 7d4:	str	w9, [x1]
 7d8:	ret

00000000000007dc <upack_fail>:
 7dc:	stp	x29, x30, [sp, #-48]!
 7e0:	stp	x22, x21, [sp, #16]
 7e4:	stp	x20, x19, [sp, #32]
 7e8:	ldr	x8, [x0]
 7ec:	mov	x19, x1
 7f0:	mov	x29, sp
 7f4:	ldrb	w9, [x8]
 7f8:	ldrb	w10, [x8, #1]
 7fc:	ldrb	w11, [x8, #2]
 800:	ldrb	w12, [x8, #3]
 804:	lsl	w9, w9, #24
 808:	sxtw	x9, w9
 80c:	bfi	x9, x10, #16, #8
 810:	bfi	x9, x11, #8, #8
 814:	orr	x22, x9, x12
 818:	add	x8, x8, #0x4
 81c:	cmp	w22, #0x1
 820:	str	x8, [x0]
 824:	b.lt	85c <upack_fail+0x80>  // b.tstop
 828:	mov	x20, x0
 82c:	add	x0, x22, #0x1
 830:	bl	0 <emalloc>
 834:	ldr	x1, [x20]
 838:	mov	w22, w22
 83c:	mov	x2, x22
 840:	mov	x21, x0
 844:	bl	0 <memcpy>
 848:	strb	wzr, [x21, x22]
 84c:	ldr	x8, [x20]
 850:	add	x8, x8, x22
 854:	str	x8, [x20]
 858:	b	86c <upack_fail+0x90>
 85c:	mov	w0, #0x1                   	// #1
 860:	bl	0 <emalloc>
 864:	mov	x21, x0
 868:	strb	wzr, [x0]
 86c:	str	x21, [x19]
 870:	ldp	x20, x19, [sp, #32]
 874:	ldp	x22, x21, [sp, #16]
 878:	ldp	x29, x30, [sp], #48
 87c:	ret

0000000000000880 <upack_loc>:
 880:	stp	x29, x30, [sp, #-48]!
 884:	stp	x22, x21, [sp, #16]
 888:	stp	x20, x19, [sp, #32]
 88c:	ldr	x8, [x0]
 890:	mov	x19, x1
 894:	mov	x20, x0
 898:	mov	x29, sp
 89c:	ldrb	w9, [x8]
 8a0:	ldrb	w10, [x8, #1]
 8a4:	ldrb	w11, [x8, #2]
 8a8:	ldrb	w12, [x8, #3]
 8ac:	lsl	w9, w9, #24
 8b0:	sxtw	x9, w9
 8b4:	bfi	x9, x10, #16, #8
 8b8:	bfi	x9, x11, #8, #8
 8bc:	orr	x22, x9, x12
 8c0:	add	x8, x8, #0x4
 8c4:	cmp	w22, #0x1
 8c8:	str	x8, [x0]
 8cc:	b.lt	900 <upack_loc+0x80>  // b.tstop
 8d0:	add	x0, x22, #0x1
 8d4:	bl	0 <emalloc>
 8d8:	ldr	x1, [x20]
 8dc:	mov	w22, w22
 8e0:	mov	x2, x22
 8e4:	mov	x21, x0
 8e8:	bl	0 <memcpy>
 8ec:	strb	wzr, [x21, x22]
 8f0:	ldr	x8, [x20]
 8f4:	add	x8, x8, x22
 8f8:	str	x8, [x20]
 8fc:	b	910 <upack_loc+0x90>
 900:	mov	w0, #0x1                   	// #1
 904:	bl	0 <emalloc>
 908:	mov	x21, x0
 90c:	strb	wzr, [x0]
 910:	str	x21, [x19, #8]
 914:	ldr	x8, [x20]
 918:	ldr	w9, [x8], #4
 91c:	rev	w9, w9
 920:	str	x8, [x20]
 924:	str	w9, [x19]
 928:	ldp	x20, x19, [sp, #32]
 92c:	ldp	x22, x21, [sp, #16]
 930:	ldp	x29, x30, [sp], #48
 934:	ret

0000000000000938 <upack_duration>:
 938:	ldr	x8, [x0]
 93c:	ldr	w9, [x8], #4
 940:	rev	w9, w9
 944:	str	x8, [x0]
 948:	str	w9, [x1]
 94c:	ret

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_print>:
   0:	adrp	x8, 0 <stdout>
   4:	ldr	x8, [x8]
   8:	mov	w2, w1
   c:	mov	x1, x0
  10:	mov	x0, x8
  14:	b	18 <srunner_fprint>

0000000000000018 <srunner_fprint>:
  18:	stp	x29, x30, [sp, #-48]!
  1c:	stp	x22, x21, [sp, #16]
  20:	stp	x20, x19, [sp, #32]
  24:	mov	w21, w2
  28:	mov	x20, x1
  2c:	mov	x19, x0
  30:	mov	x29, sp
  34:	cbz	w2, d4 <srunner_fprint+0xbc>
  38:	cmp	w21, #0x4
  3c:	b.ne	ac <srunner_fprint+0x94>  // b.any
  40:	adrp	x0, 0 <srunner_print>
  44:	add	x0, x0, #0x0
  48:	bl	0 <getenv>
  4c:	cbz	x0, 98 <srunner_fprint+0x80>
  50:	adrp	x1, 0 <srunner_print>
  54:	add	x1, x1, #0x0
  58:	mov	x21, x0
  5c:	bl	0 <strcmp>
  60:	cbz	w0, a0 <srunner_fprint+0x88>
  64:	adrp	x1, 0 <srunner_print>
  68:	add	x1, x1, #0x0
  6c:	mov	x0, x21
  70:	bl	0 <strcmp>
  74:	cbz	w0, a8 <srunner_fprint+0x90>
  78:	adrp	x1, 0 <srunner_print>
  7c:	add	x1, x1, #0x0
  80:	mov	x0, x21
  84:	bl	0 <strcmp>
  88:	cmp	w0, #0x0
  8c:	mov	w8, #0x2                   	// #2
  90:	cinc	w21, w8, eq  // eq = none
  94:	b	ac <srunner_fprint+0x94>
  98:	mov	w21, #0x2                   	// #2
  9c:	b	ac <srunner_fprint+0x94>
  a0:	mov	w21, wzr
  a4:	b	d4 <srunner_fprint+0xbc>
  a8:	mov	w21, #0x1                   	// #1
  ac:	mov	x0, x20
  b0:	bl	0 <sr_stat_str>
  b4:	mov	x22, x0
  b8:	adrp	x1, 0 <srunner_print>
  bc:	add	x1, x1, #0x0
  c0:	mov	x0, x19
  c4:	mov	x2, x22
  c8:	bl	0 <fprintf>
  cc:	mov	x0, x22
  d0:	bl	0 <free>
  d4:	ldr	x20, [x20, #16]
  d8:	mov	x0, x20
  dc:	bl	0 <check_list_front>
  e0:	mov	x0, x20
  e4:	bl	0 <check_list_at_end>
  e8:	cbnz	w0, 118 <srunner_fprint+0x100>
  ec:	mov	x0, x20
  f0:	bl	0 <check_list_val>
  f4:	mov	x1, x0
  f8:	mov	x0, x19
  fc:	mov	w2, w21
 100:	bl	308 <tr_fprint>
 104:	mov	x0, x20
 108:	bl	0 <check_list_advance>
 10c:	mov	x0, x20
 110:	bl	0 <check_list_at_end>
 114:	cbz	w0, ec <srunner_fprint+0xd4>
 118:	ldp	x20, x19, [sp, #32]
 11c:	ldp	x22, x21, [sp, #16]
 120:	ldp	x29, x30, [sp], #48
 124:	ret

0000000000000128 <get_env_printmode>:
 128:	stp	x29, x30, [sp, #-32]!
 12c:	adrp	x0, 0 <srunner_print>
 130:	add	x0, x0, #0x0
 134:	str	x19, [sp, #16]
 138:	mov	x29, sp
 13c:	bl	0 <getenv>
 140:	cbz	x0, 194 <get_env_printmode+0x6c>
 144:	adrp	x1, 0 <srunner_print>
 148:	add	x1, x1, #0x0
 14c:	mov	x19, x0
 150:	bl	0 <strcmp>
 154:	cbz	w0, 188 <get_env_printmode+0x60>
 158:	adrp	x1, 0 <srunner_print>
 15c:	add	x1, x1, #0x0
 160:	mov	x0, x19
 164:	bl	0 <strcmp>
 168:	cbz	w0, 1a4 <get_env_printmode+0x7c>
 16c:	adrp	x1, 0 <srunner_print>
 170:	add	x1, x1, #0x0
 174:	mov	x0, x19
 178:	bl	0 <strcmp>
 17c:	cmp	w0, #0x0
 180:	mov	w8, #0x2                   	// #2
 184:	cinc	w0, w8, eq  // eq = none
 188:	ldr	x19, [sp, #16]
 18c:	ldp	x29, x30, [sp], #32
 190:	ret
 194:	mov	w0, #0x2                   	// #2
 198:	ldr	x19, [sp, #16]
 19c:	ldp	x29, x30, [sp], #32
 1a0:	ret
 1a4:	mov	w0, #0x1                   	// #1
 1a8:	ldr	x19, [sp, #16]
 1ac:	ldp	x29, x30, [sp], #32
 1b0:	ret

00000000000001b4 <fprint_xml_esc>:
 1b4:	stp	x29, x30, [sp, #-96]!
 1b8:	stp	x28, x27, [sp, #16]
 1bc:	stp	x26, x25, [sp, #32]
 1c0:	stp	x24, x23, [sp, #48]
 1c4:	stp	x22, x21, [sp, #64]
 1c8:	adrp	x21, 0 <srunner_print>
 1cc:	adrp	x27, 0 <srunner_print>
 1d0:	adrp	x22, 0 <srunner_print>
 1d4:	adrp	x23, 0 <srunner_print>
 1d8:	adrp	x24, 0 <srunner_print>
 1dc:	adrp	x25, 0 <srunner_print>
 1e0:	adrp	x26, 0 <srunner_print>
 1e4:	stp	x20, x19, [sp, #80]
 1e8:	mov	x19, x1
 1ec:	mov	x20, x0
 1f0:	add	x21, x21, #0x0
 1f4:	mov	w28, #0x2600                	// #9728
 1f8:	add	x27, x27, #0x0
 1fc:	add	x22, x22, #0x0
 200:	add	x23, x23, #0x0
 204:	add	x24, x24, #0x0
 208:	add	x25, x25, #0x0
 20c:	add	x26, x26, #0x0
 210:	mov	x29, sp
 214:	b	230 <fprint_xml_esc+0x7c>
 218:	mov	w1, #0x6                   	// #6
 21c:	mov	w2, #0x1                   	// #1
 220:	mov	x0, x22
 224:	mov	x3, x20
 228:	bl	0 <fwrite>
 22c:	add	x19, x19, #0x1
 230:	ldrb	w2, [x19]
 234:	sub	w8, w2, #0x22
 238:	cmp	w8, #0x1c
 23c:	b.hi	290 <fprint_xml_esc+0xdc>  // b.pmore
 240:	adr	x9, 218 <fprint_xml_esc+0x64>
 244:	ldrb	w10, [x27, x8]
 248:	add	x9, x9, x10, lsl #2
 24c:	br	x9
 250:	mov	w1, #0x5                   	// #5
 254:	mov	w2, #0x1                   	// #1
 258:	mov	x0, x23
 25c:	b	224 <fprint_xml_esc+0x70>
 260:	mov	w1, #0x6                   	// #6
 264:	mov	w2, #0x1                   	// #1
 268:	mov	x0, x24
 26c:	b	224 <fprint_xml_esc+0x70>
 270:	mov	w1, #0x4                   	// #4
 274:	mov	w2, #0x1                   	// #1
 278:	mov	x0, x25
 27c:	b	224 <fprint_xml_esc+0x70>
 280:	mov	w1, #0x4                   	// #4
 284:	mov	w2, #0x1                   	// #1
 288:	mov	x0, x26
 28c:	b	224 <fprint_xml_esc+0x70>
 290:	cbz	w2, 2ec <fprint_xml_esc+0x138>
 294:	sub	w8, w2, #0x20
 298:	cmp	w8, #0x5e
 29c:	b.hi	2b4 <fprint_xml_esc+0x100>  // b.pmore
 2a0:	mov	w0, w2
 2a4:	mov	x1, x20
 2a8:	bl	0 <fputc>
 2ac:	add	x19, x19, #0x1
 2b0:	b	230 <fprint_xml_esc+0x7c>
 2b4:	cmp	w2, #0xd
 2b8:	b.hi	2e0 <fprint_xml_esc+0x12c>  // b.pmore
 2bc:	mov	w8, #0x1                   	// #1
 2c0:	lsl	w8, w8, w2
 2c4:	tst	w8, w28
 2c8:	b.eq	2e0 <fprint_xml_esc+0x12c>  // b.none
 2cc:	mov	x0, x20
 2d0:	mov	x1, x21
 2d4:	bl	0 <fprintf>
 2d8:	add	x19, x19, #0x1
 2dc:	b	230 <fprint_xml_esc+0x7c>
 2e0:	cmp	w2, #0x20
 2e4:	b.cs	2cc <fprint_xml_esc+0x118>  // b.hs, b.nlast
 2e8:	b	2d8 <fprint_xml_esc+0x124>
 2ec:	ldp	x20, x19, [sp, #80]
 2f0:	ldp	x22, x21, [sp, #64]
 2f4:	ldp	x24, x23, [sp, #48]
 2f8:	ldp	x26, x25, [sp, #32]
 2fc:	ldp	x28, x27, [sp, #16]
 300:	ldp	x29, x30, [sp], #96
 304:	ret

0000000000000308 <tr_fprint>:
 308:	stp	x29, x30, [sp, #-48]!
 30c:	stp	x20, x19, [sp, #32]
 310:	mov	x20, x1
 314:	cmp	w2, #0x4
 318:	mov	x19, x0
 31c:	str	x21, [sp, #16]
 320:	mov	x29, sp
 324:	b.ne	384 <tr_fprint+0x7c>  // b.any
 328:	adrp	x0, 0 <srunner_print>
 32c:	add	x0, x0, #0x0
 330:	bl	0 <getenv>
 334:	cbz	x0, 374 <tr_fprint+0x6c>
 338:	adrp	x1, 0 <srunner_print>
 33c:	add	x1, x1, #0x0
 340:	mov	x21, x0
 344:	bl	0 <strcmp>
 348:	cbz	w0, 3e0 <tr_fprint+0xd8>
 34c:	adrp	x1, 0 <srunner_print>
 350:	add	x1, x1, #0x0
 354:	mov	x0, x21
 358:	bl	0 <strcmp>
 35c:	cbz	w0, 3e0 <tr_fprint+0xd8>
 360:	adrp	x1, 0 <srunner_print>
 364:	add	x1, x1, #0x0
 368:	mov	x0, x21
 36c:	bl	0 <strcmp>
 370:	cbz	w0, 3f0 <tr_fprint+0xe8>
 374:	mov	w2, #0x2                   	// #2
 378:	cmp	w2, #0x2
 37c:	b.cs	3a0 <tr_fprint+0x98>  // b.hs, b.nlast
 380:	b	3e0 <tr_fprint+0xd8>
 384:	cmp	w2, #0x3
 388:	b.cc	398 <tr_fprint+0x90>  // b.lo, b.ul, b.last
 38c:	ldr	w8, [x20]
 390:	cmp	w8, #0x1
 394:	b.eq	3ac <tr_fprint+0xa4>  // b.none
 398:	cmp	w2, #0x2
 39c:	b.cc	3e0 <tr_fprint+0xd8>  // b.lo, b.ul, b.last
 3a0:	ldr	w8, [x20]
 3a4:	cmp	w8, #0x1
 3a8:	b.eq	3e0 <tr_fprint+0xd8>  // b.none
 3ac:	mov	x0, x20
 3b0:	bl	0 <tr_str>
 3b4:	mov	x20, x0
 3b8:	adrp	x1, 0 <srunner_print>
 3bc:	add	x1, x1, #0x0
 3c0:	mov	x0, x19
 3c4:	mov	x2, x20
 3c8:	bl	0 <fprintf>
 3cc:	mov	x0, x20
 3d0:	ldp	x20, x19, [sp, #32]
 3d4:	ldr	x21, [sp, #16]
 3d8:	ldp	x29, x30, [sp], #48
 3dc:	b	0 <free>
 3e0:	ldp	x20, x19, [sp, #32]
 3e4:	ldr	x21, [sp, #16]
 3e8:	ldp	x29, x30, [sp], #48
 3ec:	ret
 3f0:	mov	w2, #0x3                   	// #3
 3f4:	ldr	w8, [x20]
 3f8:	cmp	w8, #0x1
 3fc:	b.ne	398 <tr_fprint+0x90>  // b.any
 400:	b	3ac <tr_fprint+0xa4>

0000000000000404 <tr_xmlprint>:
 404:	sub	sp, sp, #0x50
 408:	stp	x29, x30, [sp, #16]
 40c:	stp	x22, x21, [sp, #48]
 410:	stp	x20, x19, [sp, #64]
 414:	ldr	w8, [x1]
 418:	mov	x20, x1
 41c:	mov	x19, x0
 420:	str	x23, [sp, #32]
 424:	cmp	w8, #0x3
 428:	add	x29, sp, #0x10
 42c:	b.eq	4c4 <tr_xmlprint+0xc0>  // b.none
 430:	cmp	w8, #0x2
 434:	b.eq	460 <tr_xmlprint+0x5c>  // b.none
 438:	cmp	w8, #0x1
 43c:	b.ne	668 <tr_xmlprint+0x264>  // b.any
 440:	mov	x8, #0x7573                	// #30067
 444:	movk	x8, #0x6363, lsl #16
 448:	movk	x8, #0x7365, lsl #32
 44c:	movk	x8, #0x73, lsl #48
 450:	str	x8, [sp]
 454:	ldr	x21, [x20, #8]
 458:	cbnz	x21, 47c <tr_xmlprint+0x78>
 45c:	b	4e0 <tr_xmlprint+0xdc>
 460:	mov	x8, #0x6166                	// #24934
 464:	movk	x8, #0x6c69, lsl #16
 468:	movk	x8, #0x7275, lsl #32
 46c:	movk	x8, #0x65, lsl #48
 470:	str	x8, [sp]
 474:	ldr	x21, [x20, #8]
 478:	cbz	x21, 4e0 <tr_xmlprint+0xdc>
 47c:	mov	w1, #0x2f                  	// #47
 480:	mov	x0, x21
 484:	bl	0 <strrchr>
 488:	mov	x22, x0
 48c:	cbnz	x0, 4a4 <tr_xmlprint+0xa0>
 490:	mov	w1, #0x5c                  	// #92
 494:	mov	x0, x21
 498:	bl	0 <strrchr>
 49c:	mov	x22, x0
 4a0:	cbz	x0, 650 <tr_xmlprint+0x24c>
 4a4:	mov	x0, x21
 4a8:	bl	0 <strdup>
 4ac:	ldr	x8, [x20, #8]
 4b0:	mov	x21, x0
 4b4:	sub	x8, x22, x8
 4b8:	add	x22, x22, #0x1
 4bc:	strb	wzr, [x0, x8]
 4c0:	b	4e4 <tr_xmlprint+0xe0>
 4c4:	mov	w9, #0x7265                	// #29285
 4c8:	mov	w8, #0x72                  	// #114
 4cc:	movk	w9, #0x6f72, lsl #16
 4d0:	strh	w8, [sp, #4]
 4d4:	str	w9, [sp]
 4d8:	ldr	x21, [x20, #8]
 4dc:	cbnz	x21, 47c <tr_xmlprint+0x78>
 4e0:	mov	x22, xzr
 4e4:	adrp	x1, 0 <srunner_print>
 4e8:	add	x1, x1, #0x0
 4ec:	mov	x2, sp
 4f0:	mov	x0, x19
 4f4:	bl	0 <fprintf>
 4f8:	adrp	x23, 0 <srunner_print>
 4fc:	add	x23, x23, #0x0
 500:	cmp	x21, #0x0
 504:	adrp	x1, 0 <srunner_print>
 508:	csel	x2, x23, x21, eq  // eq = none
 50c:	add	x1, x1, #0x0
 510:	mov	x0, x19
 514:	bl	0 <fprintf>
 518:	ldr	w3, [x20, #16]
 51c:	cmp	x22, #0x0
 520:	adrp	x1, 0 <srunner_print>
 524:	csel	x2, x23, x22, eq  // eq = none
 528:	add	x1, x1, #0x0
 52c:	mov	x0, x19
 530:	bl	0 <fprintf>
 534:	ldr	x2, [x20, #40]
 538:	adrp	x1, 0 <srunner_print>
 53c:	add	x1, x1, #0x0
 540:	mov	x0, x19
 544:	bl	0 <fprintf>
 548:	ldr	w2, [x20, #20]
 54c:	adrp	x1, 0 <srunner_print>
 550:	add	x1, x1, #0x0
 554:	mov	x0, x19
 558:	bl	0 <fprintf>
 55c:	ldrsw	x8, [x20, #24]
 560:	mov	w9, #0xde83                	// #56963
 564:	movk	w9, #0x431b, lsl #16
 568:	mov	w10, #0x4240                	// #16960
 56c:	mul	x9, x8, x9
 570:	lsr	x11, x9, #32
 574:	lsr	x9, x9, #63
 578:	movk	w10, #0xf, lsl #16
 57c:	add	w9, w9, w11, asr #18
 580:	cmp	w8, #0x0
 584:	msub	w8, w9, w10, w8
 588:	adrp	x1, 0 <srunner_print>
 58c:	csinv	w2, w9, wzr, ge  // ge = tcont
 590:	csel	w3, wzr, w8, lt  // lt = tstop
 594:	add	x1, x1, #0x0
 598:	mov	x0, x19
 59c:	bl	0 <fprintf>
 5a0:	adrp	x0, 0 <srunner_print>
 5a4:	add	x0, x0, #0x0
 5a8:	mov	w1, #0x13                  	// #19
 5ac:	mov	w2, #0x1                   	// #1
 5b0:	mov	x3, x19
 5b4:	bl	0 <fwrite>
 5b8:	ldr	x1, [x20, #32]
 5bc:	mov	x0, x19
 5c0:	bl	1b4 <fprint_xml_esc>
 5c4:	adrp	x0, 0 <srunner_print>
 5c8:	add	x0, x0, #0x0
 5cc:	mov	w1, #0xf                   	// #15
 5d0:	mov	w2, #0x1                   	// #1
 5d4:	mov	x3, x19
 5d8:	bl	0 <fwrite>
 5dc:	adrp	x0, 0 <srunner_print>
 5e0:	add	x0, x0, #0x0
 5e4:	mov	w1, #0xf                   	// #15
 5e8:	mov	w2, #0x1                   	// #1
 5ec:	mov	x3, x19
 5f0:	bl	0 <fwrite>
 5f4:	ldr	x1, [x20, #48]
 5f8:	mov	x0, x19
 5fc:	bl	1b4 <fprint_xml_esc>
 600:	adrp	x0, 0 <srunner_print>
 604:	add	x0, x0, #0x0
 608:	mov	w1, #0xb                   	// #11
 60c:	mov	w2, #0x1                   	// #1
 610:	mov	x3, x19
 614:	bl	0 <fwrite>
 618:	adrp	x0, 0 <srunner_print>
 61c:	add	x0, x0, #0x0
 620:	mov	w1, #0xc                   	// #12
 624:	mov	w2, #0x1                   	// #1
 628:	mov	x3, x19
 62c:	bl	0 <fwrite>
 630:	mov	x0, x21
 634:	bl	0 <free>
 638:	ldp	x20, x19, [sp, #64]
 63c:	ldp	x22, x21, [sp, #48]
 640:	ldr	x23, [sp, #32]
 644:	ldp	x29, x30, [sp, #16]
 648:	add	sp, sp, #0x50
 64c:	ret
 650:	adrp	x0, 0 <srunner_print>
 654:	add	x0, x0, #0x0
 658:	bl	0 <strdup>
 65c:	ldr	x22, [x20, #8]
 660:	mov	x21, x0
 664:	b	4e4 <tr_xmlprint+0xe0>
 668:	bl	0 <abort>

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_fork_status>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	str	x19, [sp, #16]
       8:	ldr	w19, [x0, #56]
       c:	mov	x29, sp
      10:	cbz	w19, 24 <srunner_fork_status+0x24>
      14:	mov	w0, w19
      18:	ldr	x19, [sp, #16]
      1c:	ldp	x29, x30, [sp], #32
      20:	ret
      24:	adrp	x0, 0 <srunner_fork_status>
      28:	add	x0, x0, #0x0
      2c:	bl	0 <getenv>
      30:	mov	w19, #0x1                   	// #1
      34:	cbz	x0, 14 <srunner_fork_status+0x14>
      38:	adrp	x1, 0 <srunner_fork_status>
      3c:	add	x1, x1, #0x0
      40:	bl	0 <strcmp>
      44:	cmp	w0, #0x0
      48:	cinc	w19, w19, eq  // eq = none
      4c:	mov	w0, w19
      50:	ldr	x19, [sp, #16]
      54:	ldp	x29, x30, [sp], #32
      58:	ret

000000000000005c <srunner_set_fork_status>:
      5c:	str	w1, [x0, #56]
      60:	ret

0000000000000064 <srunner_run_all>:
      64:	mov	w5, w1
      68:	mov	x1, xzr
      6c:	mov	x2, xzr
      70:	mov	x3, xzr
      74:	mov	x4, xzr
      78:	b	8c <srunner_run_tagged>

000000000000007c <srunner_run>:
      7c:	mov	w5, w3
      80:	mov	x3, xzr
      84:	mov	x4, xzr
      88:	b	8c <srunner_run_tagged>

000000000000008c <srunner_run_tagged>:
      8c:	sub	sp, sp, #0x130
      90:	stp	x26, x25, [sp, #240]
      94:	stp	x24, x23, [sp, #256]
      98:	stp	x22, x21, [sp, #272]
      9c:	stp	x20, x19, [sp, #288]
      a0:	mov	w20, w5
      a4:	mov	x23, x4
      a8:	mov	x24, x3
      ac:	mov	x25, x2
      b0:	mov	x26, x1
      b4:	mov	x22, x0
      b8:	stp	x29, x30, [sp, #208]
      bc:	stp	x28, x27, [sp, #224]
      c0:	add	x29, sp, #0xd0
      c4:	cbz	x2, dc <srunner_run_tagged+0x50>
      c8:	cbz	x26, f0 <srunner_run_tagged+0x64>
      cc:	cbz	x24, 104 <srunner_run_tagged+0x78>
      d0:	cbz	x23, 118 <srunner_run_tagged+0x8c>
      d4:	cbnz	x22, 12c <srunner_run_tagged+0xa0>
      d8:	b	308 <srunner_run_tagged+0x27c>
      dc:	adrp	x0, 0 <srunner_fork_status>
      e0:	add	x0, x0, #0x0
      e4:	bl	0 <getenv>
      e8:	mov	x25, x0
      ec:	cbnz	x26, cc <srunner_run_tagged+0x40>
      f0:	adrp	x0, 0 <srunner_fork_status>
      f4:	add	x0, x0, #0x0
      f8:	bl	0 <getenv>
      fc:	mov	x26, x0
     100:	cbnz	x24, d0 <srunner_run_tagged+0x44>
     104:	adrp	x0, 0 <srunner_fork_status>
     108:	add	x0, x0, #0x0
     10c:	bl	0 <getenv>
     110:	mov	x24, x0
     114:	cbnz	x23, d4 <srunner_run_tagged+0x48>
     118:	adrp	x0, 0 <srunner_fork_status>
     11c:	add	x0, x0, #0x0
     120:	bl	0 <getenv>
     124:	mov	x23, x0
     128:	cbz	x22, 308 <srunner_run_tagged+0x27c>
     12c:	cmp	w20, #0x5
     130:	b.cs	a8c <srunner_run_tagged+0xa00>  // b.hs, b.nlast
     134:	adrp	x21, 0 <srunner_fork_status>
     138:	add	x21, x21, #0x0
     13c:	adrp	x19, 0 <srunner_fork_status>
     140:	movi	v0.2d, #0x0
     144:	add	x19, x19, #0x0
     148:	mov	x1, x21
     14c:	stp	q0, q0, [x21, #272]
     150:	stp	q0, q0, [x21, #240]
     154:	stp	q0, q0, [x21, #208]
     158:	stp	q0, q0, [x21, #176]
     15c:	str	q0, [x21, #160]
     160:	str	x19, [x1, #152]!
     164:	mov	w0, #0xe                   	// #14
     168:	mov	x2, x21
     16c:	bl	0 <sigaction>
     170:	add	x8, x21, #0x138
     174:	movi	v0.2d, #0x0
     178:	str	q0, [x8]
     17c:	add	x8, x21, #0x148
     180:	str	q0, [x8]
     184:	add	x8, x21, #0x158
     188:	str	q0, [x8]
     18c:	add	x8, x21, #0x168
     190:	str	q0, [x8]
     194:	add	x8, x21, #0x178
     198:	str	q0, [x8]
     19c:	add	x8, x21, #0x188
     1a0:	str	q0, [x8]
     1a4:	add	x8, x21, #0x198
     1a8:	str	q0, [x8]
     1ac:	add	x8, x21, #0x1a8
     1b0:	str	q0, [x8]
     1b4:	movi	v0.2d, #0x0
     1b8:	add	x8, x21, #0x1b8
     1bc:	add	x1, x21, #0x130
     1c0:	add	x2, x21, #0x260
     1c4:	mov	w0, #0x2                   	// #2
     1c8:	str	q0, [x8]
     1cc:	str	x19, [x21, #304]
     1d0:	bl	0 <sigaction>
     1d4:	movi	v0.2d, #0x0
     1d8:	add	x1, x21, #0x1c8
     1dc:	add	x2, x21, #0x2f8
     1e0:	mov	w0, #0xf                   	// #15
     1e4:	stp	q0, q0, [x21, #464]
     1e8:	stp	q0, q0, [x21, #496]
     1ec:	stp	q0, q0, [x21, #528]
     1f0:	stp	q0, q0, [x21, #560]
     1f4:	str	q0, [x21, #592]
     1f8:	str	x19, [x21, #456]
     1fc:	bl	0 <sigaction>
     200:	ldr	w21, [x22, #56]
     204:	cbnz	w21, 230 <srunner_run_tagged+0x1a4>
     208:	adrp	x0, 0 <srunner_fork_status>
     20c:	add	x0, x0, #0x0
     210:	bl	0 <getenv>
     214:	mov	w21, #0x1                   	// #1
     218:	cbz	x0, 230 <srunner_run_tagged+0x1a4>
     21c:	adrp	x1, 0 <srunner_fork_status>
     220:	add	x1, x1, #0x0
     224:	bl	0 <strcmp>
     228:	cmp	w0, #0x0
     22c:	cinc	w21, w21, eq  // eq = none
     230:	mov	w0, w21
     234:	bl	0 <set_fork_status>
     238:	bl	0 <setup_messaging>
     23c:	mov	x0, x22
     240:	mov	w1, w20
     244:	bl	0 <srunner_init_logging>
     248:	mov	x0, x22
     24c:	bl	0 <log_srunner_start>
     250:	ldr	x21, [x22]
     254:	mov	x0, x24
     258:	bl	0 <tag_string_to_list>
     25c:	mov	x19, x0
     260:	mov	x0, x23
     264:	bl	0 <tag_string_to_list>
     268:	str	x0, [sp, #72]
     26c:	mov	x0, x21
     270:	bl	0 <check_list_front>
     274:	mov	x0, x21
     278:	bl	0 <check_list_at_end>
     27c:	cbz	w0, 328 <srunner_run_tagged+0x29c>
     280:	adrp	x20, 0 <free>
     284:	add	x20, x20, #0x0
     288:	mov	x0, x19
     28c:	mov	x1, x20
     290:	bl	0 <check_list_apply>
     294:	ldr	x21, [sp, #72]
     298:	mov	x1, x20
     29c:	mov	x0, x21
     2a0:	bl	0 <check_list_apply>
     2a4:	mov	x0, x19
     2a8:	bl	0 <check_list_free>
     2ac:	mov	x0, x21
     2b0:	bl	0 <check_list_free>
     2b4:	mov	x0, x22
     2b8:	bl	0 <log_srunner_end>
     2bc:	mov	x0, x22
     2c0:	bl	0 <srunner_end_logging>
     2c4:	bl	0 <teardown_messaging>
     2c8:	mov	w0, #0x1                   	// #1
     2cc:	bl	0 <set_fork_status>
     2d0:	adrp	x19, 0 <srunner_fork_status>
     2d4:	add	x19, x19, #0x0
     2d8:	mov	w0, #0xe                   	// #14
     2dc:	mov	x1, x19
     2e0:	mov	x2, xzr
     2e4:	bl	0 <sigaction>
     2e8:	add	x1, x19, #0x260
     2ec:	mov	w0, #0x2                   	// #2
     2f0:	mov	x2, xzr
     2f4:	bl	0 <sigaction>
     2f8:	add	x1, x19, #0x2f8
     2fc:	mov	w0, #0xf                   	// #15
     300:	mov	x2, xzr
     304:	bl	0 <sigaction>
     308:	ldp	x20, x19, [sp, #288]
     30c:	ldp	x22, x21, [sp, #272]
     310:	ldp	x24, x23, [sp, #256]
     314:	ldp	x26, x25, [sp, #240]
     318:	ldp	x28, x27, [sp, #224]
     31c:	ldp	x29, x30, [sp, #208]
     320:	add	sp, sp, #0x130
     324:	ret
     328:	sub	x8, x29, #0x58
     32c:	add	x8, x8, #0x10
     330:	stp	x22, x8, [sp, #88]
     334:	stp	x24, x23, [sp, #40]
     338:	stp	x26, x25, [sp, #24]
     33c:	stp	x21, x19, [sp, #8]
     340:	b	364 <srunner_run_tagged+0x2d8>
     344:	mov	x0, x22
     348:	mov	x1, x27
     34c:	bl	0 <log_suite_end>
     350:	mov	x0, x21
     354:	bl	0 <check_list_advance>
     358:	mov	x0, x21
     35c:	bl	0 <check_list_at_end>
     360:	cbnz	w0, 280 <srunner_run_tagged+0x1f4>
     364:	mov	x0, x21
     368:	bl	0 <check_list_val>
     36c:	mov	x27, x0
     370:	cbz	x26, 384 <srunner_run_tagged+0x2f8>
     374:	ldr	x1, [x27]
     378:	mov	x0, x26
     37c:	bl	0 <strcmp>
     380:	cbnz	w0, 350 <srunner_run_tagged+0x2c4>
     384:	cbz	x25, 398 <srunner_run_tagged+0x30c>
     388:	mov	x0, x27
     38c:	mov	x1, x25
     390:	bl	0 <suite_tcase>
     394:	cbz	w0, 350 <srunner_run_tagged+0x2c4>
     398:	mov	x0, x22
     39c:	mov	x1, x27
     3a0:	bl	0 <log_suite_start>
     3a4:	ldr	x20, [x27, #8]
     3a8:	mov	x0, x20
     3ac:	bl	0 <check_list_front>
     3b0:	mov	x0, x20
     3b4:	bl	0 <check_list_at_end>
     3b8:	cbnz	w0, 344 <srunner_run_tagged+0x2b8>
     3bc:	stp	x27, x20, [sp, #56]
     3c0:	b	3fc <srunner_run_tagged+0x370>
     3c4:	adrp	x1, 0 <srunner_fork_status>
     3c8:	add	x1, x1, #0x0
     3cc:	bl	0 <strcmp>
     3d0:	cmp	w0, #0x0
     3d4:	mov	w8, #0x1                   	// #1
     3d8:	cinc	w1, w8, eq  // eq = none
     3dc:	mov	x0, x20
     3e0:	bl	fc0 <srunner_run_teardown>
     3e4:	ldr	x20, [sp, #64]
     3e8:	mov	x0, x20
     3ec:	bl	0 <check_list_advance>
     3f0:	mov	x0, x20
     3f4:	bl	0 <check_list_at_end>
     3f8:	cbnz	w0, 344 <srunner_run_tagged+0x2b8>
     3fc:	mov	x0, x20
     400:	bl	0 <check_list_val>
     404:	mov	x28, x0
     408:	cbz	x25, 41c <srunner_run_tagged+0x390>
     40c:	ldr	x1, [x28]
     410:	mov	x0, x25
     414:	bl	0 <strcmp>
     418:	cbnz	w0, 3e8 <srunner_run_tagged+0x35c>
     41c:	cbz	x24, 430 <srunner_run_tagged+0x3a4>
     420:	mov	x0, x28
     424:	mov	x1, x19
     428:	bl	0 <tcase_matching_tag>
     42c:	cbz	w0, 3e8 <srunner_run_tagged+0x35c>
     430:	cbz	x23, 444 <srunner_run_tagged+0x3b8>
     434:	ldr	x1, [sp, #72]
     438:	mov	x0, x28
     43c:	bl	0 <tcase_matching_tag>
     440:	cbnz	w0, 3e8 <srunner_run_tagged+0x35c>
     444:	mov	w0, #0x2                   	// #2
     448:	bl	0 <set_fork_status>
     44c:	ldr	x0, [x28, #32]
     450:	ldr	x2, [x28]
     454:	adrp	x3, 0 <srunner_fork_status>
     458:	mov	w1, #0x2                   	// #2
     45c:	add	x3, x3, #0x0
     460:	bl	c1c <srunner_run_setup>
     464:	ldr	w8, [x22, #56]
     468:	mov	x20, x0
     46c:	cbz	w8, 4cc <srunner_run_tagged+0x440>
     470:	mov	w0, w8
     474:	bl	0 <set_fork_status>
     478:	cbz	x20, 514 <srunner_run_tagged+0x488>
     47c:	ldr	w8, [x20]
     480:	cmp	w8, #0x1
     484:	b.eq	514 <srunner_run_tagged+0x488>  // b.none
     488:	ldr	x0, [x22, #16]
     48c:	mov	x1, x20
     490:	bl	0 <check_list_add_end>
     494:	ldr	x8, [x22, #8]
     498:	ldr	w9, [x8]
     49c:	add	w9, w9, #0x1
     4a0:	str	w9, [x8]
     4a4:	ldr	w9, [x20]
     4a8:	cmp	w9, #0x3
     4ac:	b.eq	92c <srunner_run_tagged+0x8a0>  // b.none
     4b0:	ldr	x20, [sp, #64]
     4b4:	cmp	w9, #0x2
     4b8:	b.ne	3e8 <srunner_run_tagged+0x35c>  // b.any
     4bc:	ldr	w9, [x8, #4]
     4c0:	add	w9, w9, #0x1
     4c4:	str	w9, [x8, #4]
     4c8:	b	3e8 <srunner_run_tagged+0x35c>
     4cc:	adrp	x0, 0 <srunner_fork_status>
     4d0:	add	x0, x0, #0x0
     4d4:	bl	0 <getenv>
     4d8:	cbz	x0, 504 <srunner_run_tagged+0x478>
     4dc:	adrp	x1, 0 <srunner_fork_status>
     4e0:	add	x1, x1, #0x0
     4e4:	bl	0 <strcmp>
     4e8:	cmp	w0, #0x0
     4ec:	mov	w8, #0x1                   	// #1
     4f0:	cinc	w8, w8, eq  // eq = none
     4f4:	mov	w0, w8
     4f8:	bl	0 <set_fork_status>
     4fc:	cbnz	x20, 47c <srunner_run_tagged+0x3f0>
     500:	b	514 <srunner_run_tagged+0x488>
     504:	mov	w8, #0x1                   	// #1
     508:	mov	w0, w8
     50c:	bl	0 <set_fork_status>
     510:	cbnz	x20, 47c <srunner_run_tagged+0x3f0>
     514:	ldr	x19, [x28, #24]
     518:	mov	x0, x19
     51c:	bl	0 <check_list_front>
     520:	mov	x0, x19
     524:	bl	0 <check_list_at_end>
     528:	cbz	w0, 560 <srunner_run_tagged+0x4d4>
     52c:	ldr	w1, [x22, #56]
     530:	ldr	x20, [x28, #40]
     534:	ldp	x24, x23, [sp, #40]
     538:	ldp	x26, x25, [sp, #24]
     53c:	ldp	x21, x19, [sp, #8]
     540:	ldr	x27, [sp, #56]
     544:	cbnz	w1, 3dc <srunner_run_tagged+0x350>
     548:	adrp	x0, 0 <srunner_fork_status>
     54c:	add	x0, x0, #0x0
     550:	bl	0 <getenv>
     554:	cbnz	x0, 3c4 <srunner_run_tagged+0x338>
     558:	mov	w1, #0x1                   	// #1
     55c:	b	3dc <srunner_run_tagged+0x350>
     560:	add	x8, x28, #0x8
     564:	str	x8, [sp, #104]
     568:	str	x19, [sp, #80]
     56c:	b	588 <srunner_run_tagged+0x4fc>
     570:	ldr	x19, [sp, #80]
     574:	mov	x0, x19
     578:	bl	0 <check_list_advance>
     57c:	mov	x0, x19
     580:	bl	0 <check_list_at_end>
     584:	cbnz	w0, 52c <srunner_run_tagged+0x4a0>
     588:	mov	x0, x19
     58c:	bl	0 <check_list_val>
     590:	ldp	w27, w8, [x0, #8]
     594:	cmp	w27, w8
     598:	b.ge	570 <srunner_run_tagged+0x4e4>  // b.tcont
     59c:	mov	x19, x0
     5a0:	stur	x0, [x29, #-96]
     5a4:	b	5d4 <srunner_run_tagged+0x548>
     5a8:	add	x8, x8, #0x8
     5ac:	ldr	w9, [x8]
     5b0:	add	w9, w9, #0x1
     5b4:	str	w9, [x8]
     5b8:	mov	x0, x22
     5bc:	mov	x1, x25
     5c0:	bl	0 <log_test_end>
     5c4:	ldr	w8, [x19, #12]
     5c8:	add	w27, w27, #0x1
     5cc:	cmp	w27, w8
     5d0:	b.ge	570 <srunner_run_tagged+0x4e4>  // b.tcont
     5d4:	mov	x0, x22
     5d8:	mov	x1, x28
     5dc:	mov	x2, x19
     5e0:	bl	0 <log_test_start>
     5e4:	ldr	w23, [x22, #56]
     5e8:	cmp	w23, #0x2
     5ec:	b.eq	76c <srunner_run_tagged+0x6e0>  // b.none
     5f0:	cmp	w23, #0x1
     5f4:	b.eq	61c <srunner_run_tagged+0x590>  // b.none
     5f8:	cbnz	w23, 93c <srunner_run_tagged+0x8b0>
     5fc:	adrp	x0, 0 <srunner_fork_status>
     600:	add	x0, x0, #0x0
     604:	bl	0 <getenv>
     608:	cbz	x0, 61c <srunner_run_tagged+0x590>
     60c:	adrp	x1, 0 <srunner_fork_status>
     610:	add	x1, x1, #0x0
     614:	bl	0 <strcmp>
     618:	cbz	w0, 76c <srunner_run_tagged+0x6e0>
     61c:	stur	wzr, [x29, #-12]
     620:	stp	xzr, xzr, [x29, #-32]
     624:	stp	xzr, xzr, [x29, #-48]
     628:	bl	0 <fork>
     62c:	cbz	w0, 954 <srunner_run_tagged+0x8c8>
     630:	mov	w23, w0
     634:	cmn	w0, #0x1
     638:	b.eq	a2c <srunner_run_tagged+0x9a0>  // b.none
     63c:	adrp	x8, 0 <srunner_fork_status>
     640:	add	x8, x8, #0x0
     644:	str	w23, [x8, #4]
     648:	strb	wzr, [x8]
     64c:	bl	0 <check_get_clockid>
     650:	sub	x2, x29, #0x38
     654:	mov	x1, xzr
     658:	bl	0 <timer_create>
     65c:	cbnz	w0, a44 <srunner_run_tagged+0x9b8>
     660:	ldr	x8, [sp, #104]
     664:	ldur	x0, [x29, #-56]
     668:	sub	x2, x29, #0x58
     66c:	mov	w1, wzr
     670:	ldr	q0, [x8]
     674:	ldr	x8, [sp, #96]
     678:	mov	x3, xzr
     67c:	str	q0, [x8]
     680:	stp	xzr, xzr, [x29, #-88]
     684:	bl	0 <timer_settime>
     688:	cbnz	w0, a5c <srunner_run_tagged+0x9d0>
     68c:	sub	x1, x29, #0xc
     690:	mov	w0, w23
     694:	mov	w2, wzr
     698:	bl	0 <waitpid>
     69c:	cmn	w0, #0x1
     6a0:	b.eq	68c <srunner_run_tagged+0x600>  // b.none
     6a4:	ldur	x0, [x29, #-56]
     6a8:	bl	0 <timer_delete>
     6ac:	mov	w1, #0x9                   	// #9
     6b0:	mov	w0, w23
     6b4:	bl	0 <killpg>
     6b8:	mov	x20, x28
     6bc:	ldr	x22, [x28]
     6c0:	ldr	x8, [x19]
     6c4:	ldur	w28, [x29, #-12]
     6c8:	ldr	w26, [x19, #16]
     6cc:	ldrsb	w24, [x19, #20]
     6d0:	ldr	x19, [x8]
     6d4:	and	w23, w28, #0x7f
     6d8:	mov	w8, #0x1000000             	// #16777216
     6dc:	add	w21, w8, w23, lsl #24
     6e0:	mov	w8, #0x1ffffff             	// #33554431
     6e4:	cmp	w21, w8
     6e8:	cset	w8, gt
     6ec:	tst	w28, #0x7f
     6f0:	cset	w9, eq  // eq = none
     6f4:	cmp	w23, w26
     6f8:	cset	w10, ne  // ne = any
     6fc:	tst	w28, #0xff00
     700:	cset	w11, ne  // ne = any
     704:	and	w9, w9, w11
     708:	and	w8, w10, w8
     70c:	orr	w0, w9, w8
     710:	bl	0 <receive_test_result>
     714:	cbz	x0, a74 <srunner_run_tagged+0x9e8>
     718:	mov	w8, #0x2000000             	// #33554432
     71c:	mov	x25, x0
     720:	cmp	w21, w8
     724:	stp	x22, x19, [x0, #32]
     728:	str	w27, [x0, #20]
     72c:	b.lt	78c <srunner_run_tagged+0x700>  // b.tstop
     730:	cmp	w23, w26
     734:	b.ne	7e0 <srunner_run_tagged+0x754>  // b.any
     738:	adrp	x8, 0 <srunner_fork_status>
     73c:	ldrb	w8, [x8]
     740:	ldr	x22, [sp, #88]
     744:	mov	x28, x20
     748:	cmp	w8, #0x1
     74c:	b.ne	82c <srunner_run_tagged+0x7a0>  // b.any
     750:	ldr	x0, [x25, #48]
     754:	mov	w8, #0x3                   	// #3
     758:	str	w8, [x25]
     75c:	cbz	x0, 764 <srunner_run_tagged+0x6d8>
     760:	bl	0 <free>
     764:	mov	w0, w26
     768:	b	804 <srunner_run_tagged+0x778>
     76c:	mov	w0, w23
     770:	mov	x1, x28
     774:	mov	x2, x19
     778:	mov	w3, w27
     77c:	bl	d8c <tcase_run_tfun_nofork>
     780:	mov	x25, x0
     784:	cbnz	x0, 8f4 <srunner_run_tagged+0x868>
     788:	b	5c4 <srunner_run_tagged+0x538>
     78c:	lsr	w19, w28, #8
     790:	cbz	w26, 814 <srunner_run_tagged+0x788>
     794:	ldr	x22, [sp, #88]
     798:	mov	x28, x20
     79c:	cbnz	w23, 8f0 <srunner_run_tagged+0x864>
     7a0:	ldr	x0, [x25, #48]
     7a4:	cbz	x0, 7ac <srunner_run_tagged+0x720>
     7a8:	bl	0 <free>
     7ac:	mov	w0, #0x64                  	// #100
     7b0:	sxtb	w23, w19
     7b4:	bl	0 <emalloc>
     7b8:	adrp	x2, 0 <srunner_fork_status>
     7bc:	mov	w1, #0x64                  	// #100
     7c0:	add	x2, x2, #0x0
     7c4:	mov	w3, w23
     7c8:	mov	x26, x0
     7cc:	bl	0 <snprintf>
     7d0:	str	x26, [x25, #48]
     7d4:	mov	w8, #0x2                   	// #2
     7d8:	str	w8, [x25]
     7dc:	b	8f0 <srunner_run_tagged+0x864>
     7e0:	ldr	x0, [x25, #48]
     7e4:	ldr	x22, [sp, #88]
     7e8:	mov	w8, #0x3                   	// #3
     7ec:	mov	x28, x20
     7f0:	str	w8, [x25]
     7f4:	cbz	w26, 854 <srunner_run_tagged+0x7c8>
     7f8:	cbz	x0, 800 <srunner_run_tagged+0x774>
     7fc:	bl	0 <free>
     800:	mov	w0, w23
     804:	mov	w1, w26
     808:	bl	1078 <signal_error_msg>
     80c:	str	x0, [x25, #48]
     810:	b	8f0 <srunner_run_tagged+0x864>
     814:	ldr	x22, [sp, #88]
     818:	mov	x28, x20
     81c:	cbnz	w23, 8f0 <srunner_run_tagged+0x864>
     820:	sxtb	w23, w19
     824:	cmp	w23, w24
     828:	b.ne	8bc <srunner_run_tagged+0x830>  // b.any
     82c:	ldr	x0, [x25, #48]
     830:	mov	w8, #0x1                   	// #1
     834:	str	w8, [x25]
     838:	cbz	x0, 840 <srunner_run_tagged+0x7b4>
     83c:	bl	0 <free>
     840:	adrp	x0, 0 <srunner_fork_status>
     844:	add	x0, x0, #0x0
     848:	bl	0 <strdup>
     84c:	str	x0, [x25, #48]
     850:	b	8f0 <srunner_run_tagged+0x864>
     854:	cbz	x0, 85c <srunner_run_tagged+0x7d0>
     858:	bl	0 <free>
     85c:	mov	w0, #0x64                  	// #100
     860:	bl	0 <emalloc>
     864:	adrp	x8, 0 <srunner_fork_status>
     868:	ldrb	w8, [x8]
     86c:	mov	x26, x0
     870:	cmp	w8, #0x1
     874:	b.ne	894 <srunner_run_tagged+0x808>  // b.any
     878:	adrp	x9, 0 <srunner_fork_status>
     87c:	add	x9, x9, #0x0
     880:	ldur	x8, [x9, #13]
     884:	ldr	q0, [x9]
     888:	stur	x8, [x26, #13]
     88c:	str	q0, [x26]
     890:	b	8ec <srunner_run_tagged+0x860>
     894:	mov	w0, w23
     898:	bl	0 <strsignal>
     89c:	adrp	x2, 0 <srunner_fork_status>
     8a0:	mov	x4, x0
     8a4:	mov	w1, #0x64                  	// #100
     8a8:	mov	x0, x26
     8ac:	add	x2, x2, #0x0
     8b0:	mov	w3, w23
     8b4:	bl	0 <snprintf>
     8b8:	b	8ec <srunner_run_tagged+0x860>
     8bc:	ldr	x8, [x25, #48]
     8c0:	cbnz	x8, 7d4 <srunner_run_tagged+0x748>
     8c4:	mov	w8, #0x3                   	// #3
     8c8:	mov	w0, #0x64                  	// #100
     8cc:	str	w8, [x25]
     8d0:	bl	0 <emalloc>
     8d4:	adrp	x2, 0 <srunner_fork_status>
     8d8:	mov	w1, #0x64                  	// #100
     8dc:	add	x2, x2, #0x0
     8e0:	mov	w3, w23
     8e4:	mov	x26, x0
     8e8:	bl	0 <snprintf>
     8ec:	str	x26, [x25, #48]
     8f0:	ldur	x19, [x29, #-96]
     8f4:	ldr	x0, [x22, #16]
     8f8:	mov	x1, x25
     8fc:	bl	0 <check_list_add_end>
     900:	ldr	x8, [x22, #8]
     904:	ldr	w9, [x8]
     908:	add	w9, w9, #0x1
     90c:	str	w9, [x8]
     910:	ldr	w9, [x25]
     914:	cmp	w9, #0x3
     918:	b.eq	5a8 <srunner_run_tagged+0x51c>  // b.none
     91c:	cmp	w9, #0x2
     920:	b.ne	5b8 <srunner_run_tagged+0x52c>  // b.any
     924:	add	x8, x8, #0x4
     928:	b	5ac <srunner_run_tagged+0x520>
     92c:	ldr	w9, [x8, #8]
     930:	add	w9, w9, #0x1
     934:	str	w9, [x8, #8]
     938:	b	3e4 <srunner_run_tagged+0x358>
     93c:	adrp	x0, 0 <srunner_fork_status>
     940:	adrp	x1, 0 <srunner_fork_status>
     944:	add	x0, x0, #0x0
     948:	add	x1, x1, #0x0
     94c:	mov	w2, #0x10b                 	// #267
     950:	bl	0 <eprintf>
     954:	mov	w1, wzr
     958:	bl	0 <setpgid>
     95c:	bl	0 <getpgrp>
     960:	adrp	x8, 0 <srunner_fork_status>
     964:	str	w0, [x8]
     968:	ldr	w0, [x22, #56]
     96c:	mov	x1, x28
     970:	bl	f4c <tcase_run_checked_setup>
     974:	bl	0 <free>
     978:	bl	0 <check_get_clockid>
     97c:	sub	x1, x29, #0x20
     980:	bl	0 <clock_gettime>
     984:	ldr	x8, [x19]
     988:	ldr	x0, [x8]
     98c:	ldr	x1, [x8, #16]
     990:	ldr	w2, [x8, #24]
     994:	bl	0 <tcase_fn_start>
     998:	ldr	x8, [x19]
     99c:	mov	w0, w27
     9a0:	ldr	x8, [x8, #8]
     9a4:	blr	x8
     9a8:	bl	0 <check_get_clockid>
     9ac:	sub	x1, x29, #0x30
     9b0:	bl	0 <clock_gettime>
     9b4:	ldr	x0, [x28, #56]
     9b8:	bl	fb8 <tcase_run_checked_teardown>
     9bc:	ldur	w8, [x29, #-48]
     9c0:	ldur	w9, [x29, #-32]
     9c4:	ldur	x10, [x29, #-40]
     9c8:	ldur	x11, [x29, #-24]
     9cc:	sub	w8, w8, w9
     9d0:	mov	x9, #0xf7cf                	// #63439
     9d4:	movk	x9, #0xe353, lsl #16
     9d8:	movk	x9, #0x9ba5, lsl #32
     9dc:	movk	x9, #0x20c4, lsl #48
     9e0:	smulh	x9, x10, x9
     9e4:	mov	x10, #0x831                 	// #2097
     9e8:	movk	x10, #0x1cac, lsl #16
     9ec:	movk	x10, #0x645a, lsl #32
     9f0:	movk	x10, #0xdf3b, lsl #48
     9f4:	smulh	x10, x11, x10
     9f8:	lsr	x11, x9, #63
     9fc:	lsr	x9, x9, #7
     a00:	add	w9, w9, w11
     a04:	mov	w11, #0x4240                	// #16960
     a08:	movk	w11, #0xf, lsl #16
     a0c:	madd	w8, w8, w11, w9
     a10:	lsr	x9, x10, #63
     a14:	lsr	x10, x10, #7
     a18:	add	w9, w10, w9
     a1c:	add	w0, w8, w9
     a20:	bl	0 <send_duration_info>
     a24:	mov	w0, wzr
     a28:	bl	0 <exit>
     a2c:	adrp	x0, 0 <srunner_fork_status>
     a30:	adrp	x1, 0 <srunner_fork_status>
     a34:	add	x0, x0, #0x0
     a38:	add	x1, x1, #0x0
     a3c:	mov	w2, #0x1e5                 	// #485
     a40:	bl	0 <eprintf>
     a44:	adrp	x0, 0 <srunner_fork_status>
     a48:	adrp	x1, 0 <srunner_fork_status>
     a4c:	add	x0, x0, #0x0
     a50:	add	x1, x1, #0x0
     a54:	mov	w2, #0x218                 	// #536
     a58:	bl	0 <eprintf>
     a5c:	adrp	x0, 0 <srunner_fork_status>
     a60:	adrp	x1, 0 <srunner_fork_status>
     a64:	add	x0, x0, #0x0
     a68:	add	x1, x1, #0x0
     a6c:	mov	w2, #0x210                 	// #528
     a70:	bl	0 <eprintf>
     a74:	adrp	x0, 0 <srunner_fork_status>
     a78:	adrp	x1, 0 <srunner_fork_status>
     a7c:	add	x0, x0, #0x0
     a80:	add	x1, x1, #0x0
     a84:	mov	w2, #0x22c                 	// #556
     a88:	bl	0 <eprintf>
     a8c:	adrp	x0, 0 <srunner_fork_status>
     a90:	adrp	x1, 0 <srunner_fork_status>
     a94:	add	x0, x0, #0x0
     a98:	add	x1, x1, #0x0
     a9c:	mov	w2, #0x31e                 	// #798
     aa0:	mov	w3, w20
     aa4:	bl	0 <eprintf>

0000000000000aa8 <sig_handler>:
     aa8:	stp	x29, x30, [sp, #-32]!
     aac:	stp	x20, x19, [sp, #16]
     ab0:	mov	w19, w0
     ab4:	cmp	w0, #0x2
     ab8:	mov	x29, sp
     abc:	b.eq	b10 <sig_handler+0x68>  // b.none
     ac0:	cmp	w19, #0xf
     ac4:	b.eq	af4 <sig_handler+0x4c>  // b.none
     ac8:	cmp	w19, #0xe
     acc:	b.ne	b48 <sig_handler+0xa0>  // b.any
     ad0:	adrp	x8, 0 <srunner_fork_status>
     ad4:	add	x8, x8, #0x0
     ad8:	ldr	w0, [x8, #4]
     adc:	mov	w9, #0x1                   	// #1
     ae0:	mov	w1, #0x9                   	// #9
     ae4:	strb	w9, [x8]
     ae8:	ldp	x20, x19, [sp, #16]
     aec:	ldp	x29, x30, [sp], #32
     af0:	b	0 <killpg>
     af4:	adrp	x1, 0 <srunner_fork_status>
     af8:	add	x1, x1, #0x0
     afc:	mov	w0, #0xf                   	// #15
     b00:	mov	x2, xzr
     b04:	mov	w20, #0xf                   	// #15
     b08:	bl	0 <sigaction>
     b0c:	b	b24 <sig_handler+0x7c>
     b10:	adrp	x1, 0 <srunner_fork_status>
     b14:	add	x1, x1, #0x0
     b18:	mov	x2, xzr
     b1c:	bl	0 <sigaction>
     b20:	mov	w20, #0x9                   	// #9
     b24:	adrp	x8, 0 <srunner_fork_status>
     b28:	ldr	w0, [x8]
     b2c:	mov	w1, w20
     b30:	bl	0 <killpg>
     b34:	bl	0 <getpgrp>
     b38:	mov	w1, w19
     b3c:	ldp	x20, x19, [sp, #16]
     b40:	ldp	x29, x30, [sp], #32
     b44:	b	0 <killpg>
     b48:	adrp	x0, 0 <srunner_fork_status>
     b4c:	adrp	x1, 0 <srunner_fork_status>
     b50:	add	x0, x0, #0x0
     b54:	add	x1, x1, #0x0
     b58:	mov	w2, #0x8e                  	// #142
     b5c:	mov	w3, w19
     b60:	bl	0 <eprintf>

0000000000000b64 <check_fork>:
     b64:	stp	x29, x30, [sp, #-32]!
     b68:	str	x19, [sp, #16]
     b6c:	mov	x29, sp
     b70:	bl	0 <fork>
     b74:	mov	w19, w0
     b78:	tbnz	w0, #31, b8c <check_fork+0x28>
     b7c:	adrp	x8, 0 <srunner_fork_status>
     b80:	ldr	w1, [x8]
     b84:	mov	w0, w19
     b88:	bl	0 <setpgid>
     b8c:	mov	w0, w19
     b90:	ldr	x19, [sp, #16]
     b94:	ldp	x29, x30, [sp], #32
     b98:	ret

0000000000000b9c <check_waitpid_and_exit>:
     b9c:	stp	x29, x30, [sp, #-32]!
     ba0:	cmp	w0, #0x1
     ba4:	str	x19, [sp, #16]
     ba8:	mov	x29, sp
     bac:	b.lt	c0c <check_waitpid_and_exit+0x70>  // b.tstop
     bb0:	mov	w19, w0
     bb4:	add	x1, x29, #0x1c
     bb8:	mov	w0, w19
     bbc:	mov	w2, wzr
     bc0:	bl	0 <waitpid>
     bc4:	cmn	w0, #0x1
     bc8:	b.eq	bb4 <check_waitpid_and_exit+0x18>  // b.none
     bcc:	ldr	w10, [x29, #28]
     bd0:	mov	w8, #0x1000000             	// #16777216
     bd4:	mov	w9, #0x1ffffff             	// #33554431
     bd8:	and	w11, w10, #0x7f
     bdc:	add	w8, w8, w11, lsl #24
     be0:	cmp	w8, w9
     be4:	cset	w8, gt
     be8:	tst	w10, #0x7f
     bec:	cset	w11, eq  // eq = none
     bf0:	cset	w9, ne  // ne = any
     bf4:	tst	w10, #0xff00
     bf8:	cset	w10, ne  // ne = any
     bfc:	and	w10, w11, w10
     c00:	tbnz	w10, #0, c14 <check_waitpid_and_exit+0x78>
     c04:	and	w8, w9, w8
     c08:	cbnz	w8, c14 <check_waitpid_and_exit+0x78>
     c0c:	mov	w0, wzr
     c10:	bl	0 <exit>
     c14:	mov	w0, #0x1                   	// #1
     c18:	bl	0 <exit>

0000000000000c1c <srunner_run_setup>:
     c1c:	str	d8, [sp, #-80]!
     c20:	stp	x22, x21, [sp, #48]
     c24:	stp	x20, x19, [sp, #64]
     c28:	mov	x20, x3
     c2c:	mov	x21, x2
     c30:	mov	w22, w1
     c34:	cmp	w1, #0x1
     c38:	mov	x19, x0
     c3c:	stp	x29, x30, [sp, #8]
     c40:	str	x25, [sp, #24]
     c44:	stp	x24, x23, [sp, #32]
     c48:	mov	x29, sp
     c4c:	b.ne	c58 <srunner_run_setup+0x3c>  // b.any
     c50:	mov	w0, #0x1                   	// #1
     c54:	bl	0 <send_ctx_info>
     c58:	mov	x0, x19
     c5c:	bl	0 <check_list_front>
     c60:	mov	x0, x19
     c64:	bl	0 <check_list_at_end>
     c68:	cbnz	w0, d44 <srunner_run_setup+0x128>
     c6c:	cmp	w22, #0x2
     c70:	b.ne	d20 <srunner_run_setup+0x104>  // b.any
     c74:	adrp	x22, 0 <error_jmp_buffer>
     c78:	adrp	x23, 0 <srunner_fork_status>
     c7c:	mov	w25, #0x1                   	// #1
     c80:	add	x22, x22, #0x0
     c84:	movi	d8, #0xffffffff00000000
     c88:	add	x23, x23, #0x0
     c8c:	mov	x0, x19
     c90:	bl	0 <check_list_val>
     c94:	mov	x24, x0
     c98:	mov	w0, #0x1                   	// #1
     c9c:	bl	0 <send_ctx_info>
     ca0:	mov	x0, x22
     ca4:	bl	0 <_setjmp>
     ca8:	cbnz	w0, cb4 <srunner_run_setup+0x98>
     cac:	ldr	x8, [x24, #8]
     cb0:	blr	x8
     cb4:	mov	w0, wzr
     cb8:	bl	0 <receive_test_result>
     cbc:	cbz	x0, d74 <srunner_run_setup+0x158>
     cc0:	ldr	x8, [x0, #48]
     cc4:	mov	x24, x0
     cc8:	stp	x21, x20, [x0, #32]
     ccc:	stur	d8, [x0, #20]
     cd0:	cbnz	x8, d68 <srunner_run_setup+0x14c>
     cd4:	mov	x0, x23
     cd8:	str	w25, [x24]
     cdc:	bl	0 <strdup>
     ce0:	ldr	w8, [x24]
     ce4:	str	x0, [x24, #48]
     ce8:	cmp	w8, #0x1
     cec:	b.ne	d48 <srunner_run_setup+0x12c>  // b.any
     cf0:	ldr	x0, [x24, #8]
     cf4:	bl	0 <free>
     cf8:	ldr	x0, [x24, #48]
     cfc:	bl	0 <free>
     d00:	mov	x0, x24
     d04:	bl	0 <free>
     d08:	mov	x0, x19
     d0c:	bl	0 <check_list_advance>
     d10:	mov	x0, x19
     d14:	bl	0 <check_list_at_end>
     d18:	cbz	w0, c8c <srunner_run_setup+0x70>
     d1c:	b	d44 <srunner_run_setup+0x128>
     d20:	mov	x0, x19
     d24:	bl	0 <check_list_val>
     d28:	ldr	x8, [x0, #8]
     d2c:	blr	x8
     d30:	mov	x0, x19
     d34:	bl	0 <check_list_advance>
     d38:	mov	x0, x19
     d3c:	bl	0 <check_list_at_end>
     d40:	cbz	w0, d20 <srunner_run_setup+0x104>
     d44:	mov	x24, xzr
     d48:	mov	x0, x24
     d4c:	ldp	x20, x19, [sp, #64]
     d50:	ldp	x22, x21, [sp, #48]
     d54:	ldp	x24, x23, [sp, #32]
     d58:	ldr	x25, [sp, #24]
     d5c:	ldp	x29, x30, [sp, #8]
     d60:	ldr	d8, [sp], #80
     d64:	ret
     d68:	mov	w8, #0x2                   	// #2
     d6c:	str	w8, [x24]
     d70:	b	d48 <srunner_run_setup+0x12c>
     d74:	adrp	x0, 0 <srunner_fork_status>
     d78:	adrp	x1, 0 <srunner_fork_status>
     d7c:	add	x0, x0, #0x0
     d80:	add	x1, x1, #0x0
     d84:	mov	w2, #0x1b8                 	// #440
     d88:	bl	0 <eprintf>

0000000000000d8c <tcase_run_tfun_nofork>:
     d8c:	sub	sp, sp, #0x70
     d90:	stp	x29, x30, [sp, #32]
     d94:	stp	x26, x25, [sp, #48]
     d98:	stp	x24, x23, [sp, #64]
     d9c:	stp	x22, x21, [sp, #80]
     da0:	stp	x20, x19, [sp, #96]
     da4:	stp	xzr, xzr, [sp, #16]
     da8:	stp	xzr, xzr, [sp]
     dac:	ldr	x22, [x1, #48]
     db0:	mov	w19, w3
     db4:	mov	x20, x2
     db8:	mov	x21, x1
     dbc:	mov	w23, w0
     dc0:	add	x29, sp, #0x20
     dc4:	cbnz	w0, df0 <tcase_run_tfun_nofork+0x64>
     dc8:	adrp	x0, 0 <srunner_fork_status>
     dcc:	add	x0, x0, #0x0
     dd0:	bl	0 <getenv>
     dd4:	mov	w23, #0x1                   	// #1
     dd8:	cbz	x0, df0 <tcase_run_tfun_nofork+0x64>
     ddc:	adrp	x1, 0 <srunner_fork_status>
     de0:	add	x1, x1, #0x0
     de4:	bl	0 <strcmp>
     de8:	cmp	w0, #0x0
     dec:	cinc	w23, w23, eq  // eq = none
     df0:	ldr	x2, [x21]
     df4:	adrp	x3, 0 <srunner_fork_status>
     df8:	add	x3, x3, #0x0
     dfc:	mov	x0, x22
     e00:	mov	w1, w23
     e04:	bl	c1c <srunner_run_setup>
     e08:	mov	x22, x0
     e0c:	cbnz	x0, f14 <tcase_run_tfun_nofork+0x188>
     e10:	bl	0 <check_get_clockid>
     e14:	add	x1, sp, #0x10
     e18:	bl	0 <clock_gettime>
     e1c:	adrp	x0, 0 <error_jmp_buffer>
     e20:	add	x0, x0, #0x0
     e24:	bl	0 <_setjmp>
     e28:	cbnz	w0, e50 <tcase_run_tfun_nofork+0xc4>
     e2c:	ldr	x8, [x20]
     e30:	ldr	x0, [x8]
     e34:	ldr	x1, [x8, #16]
     e38:	ldr	w2, [x8, #24]
     e3c:	bl	0 <tcase_fn_start>
     e40:	ldr	x8, [x20]
     e44:	mov	w0, w19
     e48:	ldr	x8, [x8, #8]
     e4c:	blr	x8
     e50:	bl	0 <check_get_clockid>
     e54:	mov	x1, sp
     e58:	bl	0 <clock_gettime>
     e5c:	ldr	x0, [x21, #56]
     e60:	mov	w1, #0x2                   	// #2
     e64:	bl	fc0 <srunner_run_teardown>
     e68:	ldr	x8, [x20]
     e6c:	ldr	x23, [x21]
     e70:	ldp	x25, x20, [sp]
     e74:	ldp	x26, x21, [sp, #16]
     e78:	ldr	x24, [x8]
     e7c:	mov	w0, wzr
     e80:	bl	0 <receive_test_result>
     e84:	cbz	x0, f34 <tcase_run_tfun_nofork+0x1a8>
     e88:	mov	x10, #0xf7cf                	// #63439
     e8c:	movk	x10, #0xe353, lsl #16
     e90:	mov	x11, #0x831                 	// #2097
     e94:	movk	x10, #0x9ba5, lsl #32
     e98:	movk	x11, #0x1cac, lsl #16
     e9c:	movk	x10, #0x20c4, lsl #48
     ea0:	movk	x11, #0x645a, lsl #32
     ea4:	movk	x11, #0xdf3b, lsl #48
     ea8:	smulh	x10, x20, x10
     eac:	mov	w9, #0x4240                	// #16960
     eb0:	ldr	x12, [x0, #48]
     eb4:	smulh	x11, x21, x11
     eb8:	lsr	x13, x10, #63
     ebc:	lsr	x10, x10, #7
     ec0:	sub	w8, w25, w26
     ec4:	movk	w9, #0xf, lsl #16
     ec8:	lsr	x14, x11, #63
     ecc:	lsr	x11, x11, #7
     ed0:	add	w10, w10, w13
     ed4:	add	w11, w11, w14
     ed8:	madd	w8, w8, w9, w10
     edc:	mov	x22, x0
     ee0:	add	w8, w8, w11
     ee4:	stp	x23, x24, [x0, #32]
     ee8:	stp	w19, w8, [x0, #20]
     eec:	cbz	x12, efc <tcase_run_tfun_nofork+0x170>
     ef0:	mov	w8, #0x2                   	// #2
     ef4:	str	w8, [x22]
     ef8:	b	f14 <tcase_run_tfun_nofork+0x188>
     efc:	adrp	x0, 0 <srunner_fork_status>
     f00:	mov	w8, #0x1                   	// #1
     f04:	add	x0, x0, #0x0
     f08:	str	w8, [x22]
     f0c:	bl	0 <strdup>
     f10:	str	x0, [x22, #48]
     f14:	mov	x0, x22
     f18:	ldp	x20, x19, [sp, #96]
     f1c:	ldp	x22, x21, [sp, #80]
     f20:	ldp	x24, x23, [sp, #64]
     f24:	ldp	x26, x25, [sp, #48]
     f28:	ldp	x29, x30, [sp, #32]
     f2c:	add	sp, sp, #0x70
     f30:	ret
     f34:	adrp	x0, 0 <srunner_fork_status>
     f38:	adrp	x1, 0 <srunner_fork_status>
     f3c:	add	x0, x0, #0x0
     f40:	add	x1, x1, #0x0
     f44:	mov	w2, #0x1b8                 	// #440
     f48:	bl	0 <eprintf>

0000000000000f4c <tcase_run_checked_setup>:
     f4c:	stp	x29, x30, [sp, #-48]!
     f50:	stp	x20, x19, [sp, #32]
     f54:	ldr	x19, [x1, #48]
     f58:	str	x21, [sp, #16]
     f5c:	mov	x20, x1
     f60:	mov	w21, w0
     f64:	mov	x29, sp
     f68:	cbnz	w0, f94 <tcase_run_checked_setup+0x48>
     f6c:	adrp	x0, 0 <srunner_fork_status>
     f70:	add	x0, x0, #0x0
     f74:	bl	0 <getenv>
     f78:	mov	w21, #0x1                   	// #1
     f7c:	cbz	x0, f94 <tcase_run_checked_setup+0x48>
     f80:	adrp	x1, 0 <srunner_fork_status>
     f84:	add	x1, x1, #0x0
     f88:	bl	0 <strcmp>
     f8c:	cmp	w0, #0x0
     f90:	cinc	w21, w21, eq  // eq = none
     f94:	ldr	x2, [x20]
     f98:	mov	x0, x19
     f9c:	mov	w1, w21
     fa0:	ldp	x20, x19, [sp, #32]
     fa4:	ldr	x21, [sp, #16]
     fa8:	adrp	x3, 0 <srunner_fork_status>
     fac:	add	x3, x3, #0x0
     fb0:	ldp	x29, x30, [sp], #48
     fb4:	b	c1c <srunner_run_setup>

0000000000000fb8 <tcase_run_checked_teardown>:
     fb8:	mov	w1, #0x2                   	// #2
     fbc:	b	fc0 <srunner_run_teardown>

0000000000000fc0 <srunner_run_teardown>:
     fc0:	stp	x29, x30, [sp, #-48]!
     fc4:	str	x21, [sp, #16]
     fc8:	stp	x20, x19, [sp, #32]
     fcc:	mov	x29, sp
     fd0:	mov	w20, w1
     fd4:	mov	x19, x0
     fd8:	bl	0 <check_list_front>
     fdc:	mov	x0, x19
     fe0:	bl	0 <check_list_at_end>
     fe4:	cbnz	w0, 1068 <srunner_run_teardown+0xa8>
     fe8:	cmp	w20, #0x2
     fec:	b.ne	1038 <srunner_run_teardown+0x78>  // b.any
     ff0:	adrp	x20, 0 <error_jmp_buffer>
     ff4:	add	x20, x20, #0x0
     ff8:	mov	x0, x19
     ffc:	bl	0 <check_list_val>
    1000:	mov	x21, x0
    1004:	mov	w0, #0x3                   	// #3
    1008:	bl	0 <send_ctx_info>
    100c:	mov	x0, x20
    1010:	bl	0 <_setjmp>
    1014:	cbnz	w0, 1068 <srunner_run_teardown+0xa8>
    1018:	ldr	x8, [x21, #8]
    101c:	blr	x8
    1020:	mov	x0, x19
    1024:	bl	0 <check_list_advance>
    1028:	mov	x0, x19
    102c:	bl	0 <check_list_at_end>
    1030:	cbz	w0, ff8 <srunner_run_teardown+0x38>
    1034:	b	1068 <srunner_run_teardown+0xa8>
    1038:	mov	x0, x19
    103c:	bl	0 <check_list_val>
    1040:	mov	x20, x0
    1044:	mov	w0, #0x3                   	// #3
    1048:	bl	0 <send_ctx_info>
    104c:	ldr	x8, [x20, #8]
    1050:	blr	x8
    1054:	mov	x0, x19
    1058:	bl	0 <check_list_advance>
    105c:	mov	x0, x19
    1060:	bl	0 <check_list_at_end>
    1064:	cbz	w0, 1038 <srunner_run_teardown+0x78>
    1068:	ldp	x20, x19, [sp, #32]
    106c:	ldr	x21, [sp, #16]
    1070:	ldp	x29, x30, [sp], #48
    1074:	ret

0000000000001078 <signal_error_msg>:
    1078:	stp	x29, x30, [sp, #-64]!
    107c:	stp	x22, x21, [sp, #32]
    1080:	mov	w22, w0
    1084:	mov	w0, #0x64                  	// #100
    1088:	str	x23, [sp, #16]
    108c:	stp	x20, x19, [sp, #48]
    1090:	mov	x29, sp
    1094:	mov	w20, w1
    1098:	bl	0 <emalloc>
    109c:	mov	x19, x0
    10a0:	mov	w0, w22
    10a4:	bl	0 <strsignal>
    10a8:	bl	0 <strdup>
    10ac:	mov	x21, x0
    10b0:	mov	w0, w20
    10b4:	bl	0 <strsignal>
    10b8:	bl	0 <strdup>
    10bc:	adrp	x8, 0 <srunner_fork_status>
    10c0:	ldrb	w8, [x8]
    10c4:	mov	x23, x0
    10c8:	cmp	w8, #0x1
    10cc:	b.ne	10f0 <signal_error_msg+0x78>  // b.any
    10d0:	adrp	x2, 0 <srunner_fork_status>
    10d4:	add	x2, x2, #0x0
    10d8:	mov	w1, #0x64                  	// #100
    10dc:	mov	x0, x19
    10e0:	mov	w3, w20
    10e4:	mov	x4, x23
    10e8:	bl	0 <snprintf>
    10ec:	b	1114 <signal_error_msg+0x9c>
    10f0:	adrp	x2, 0 <srunner_fork_status>
    10f4:	add	x2, x2, #0x0
    10f8:	mov	w1, #0x64                  	// #100
    10fc:	mov	x0, x19
    1100:	mov	w3, w22
    1104:	mov	x4, x21
    1108:	mov	w5, w20
    110c:	mov	x6, x23
    1110:	bl	0 <snprintf>
    1114:	mov	x0, x21
    1118:	bl	0 <free>
    111c:	mov	x0, x23
    1120:	bl	0 <free>
    1124:	mov	x0, x19
    1128:	ldp	x20, x19, [sp, #48]
    112c:	ldp	x22, x21, [sp, #32]
    1130:	ldr	x23, [sp, #16]
    1134:	ldp	x29, x30, [sp], #64
    1138:	ret

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <tr_str>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	ldp	w8, w11, [x0]
   c:	ldr	x1, [x0, #8]
  10:	ldr	w2, [x0, #16]
  14:	adrp	x9, 0 <tr_str>
  18:	adrp	x10, 0 <tr_str>
  1c:	add	x9, x9, #0x0
  20:	add	x10, x10, #0x0
  24:	cmp	w8, #0x3
  28:	csel	x7, x10, x9, eq  // eq = none
  2c:	cmp	w11, #0x2
  30:	add	x29, sp, #0x10
  34:	b.ne	54 <tr_str+0x54>  // b.any
  38:	sub	w8, w8, #0x1
  3c:	cmp	w8, #0x2
  40:	b.hi	60 <tr_str+0x60>  // b.pmore
  44:	adrp	x9, 0 <tr_str>
  48:	add	x9, x9, #0x0
  4c:	ldr	x3, [x9, w8, sxtw #3]
  50:	b	64 <tr_str+0x64>
  54:	adrp	x3, 0 <tr_str>
  58:	add	x3, x3, #0x0
  5c:	b	64 <tr_str+0x64>
  60:	mov	x3, xzr
  64:	ldp	x4, x5, [x0, #32]
  68:	ldr	w6, [x0, #20]
  6c:	ldr	x8, [x0, #48]
  70:	adrp	x0, 0 <tr_str>
  74:	add	x0, x0, #0x0
  78:	str	x8, [sp]
  7c:	bl	8c <ck_strdup_printf>
  80:	ldp	x29, x30, [sp, #16]
  84:	add	sp, sp, #0x20
  88:	ret

000000000000008c <ck_strdup_printf>:
  8c:	sub	sp, sp, #0x150
  90:	stp	x29, x30, [sp, #256]
  94:	stp	x20, x19, [sp, #320]
  98:	add	x29, sp, #0x100
  9c:	mov	x19, x0
  a0:	mov	w0, #0x64                  	// #100
  a4:	stp	x28, x25, [sp, #272]
  a8:	stp	x24, x23, [sp, #288]
  ac:	stp	x22, x21, [sp, #304]
  b0:	stp	x1, x2, [x29, #-120]
  b4:	stp	x3, x4, [x29, #-104]
  b8:	stp	x5, x6, [x29, #-88]
  bc:	stur	x7, [x29, #-72]
  c0:	stp	q0, q1, [sp]
  c4:	stp	q2, q3, [sp, #32]
  c8:	stp	q4, q5, [sp, #64]
  cc:	stp	q6, q7, [sp, #96]
  d0:	bl	0 <emalloc>
  d4:	sub	x8, x29, #0x78
  d8:	mov	x9, sp
  dc:	mov	x23, #0xffffffffffffffc8    	// #-56
  e0:	add	x22, x29, #0x50
  e4:	movk	x23, #0xff80, lsl #32
  e8:	add	x24, x8, #0x38
  ec:	add	x25, x9, #0x80
  f0:	stp	x22, x24, [x29, #-32]
  f4:	stp	x25, x23, [x29, #-16]
  f8:	ldp	q0, q1, [x29, #-32]
  fc:	sub	x3, x29, #0x40
 100:	mov	w1, #0x64                  	// #100
 104:	mov	x2, x19
 108:	mov	x20, x0
 10c:	stp	q0, q1, [x29, #-64]
 110:	bl	0 <vsnprintf>
 114:	cmp	w0, #0x64
 118:	b.cc	17c <ck_strdup_printf+0xf0>  // b.lo, b.ul, b.last
 11c:	mvn	w8, w0
 120:	lsr	w8, w8, #31
 124:	mov	w21, #0x64                  	// #100
 128:	sxtw	x9, w0
 12c:	lsl	x10, x21, #1
 130:	tst	w8, #0x1
 134:	csinc	x21, x10, x9, eq  // eq = none
 138:	mov	x0, x20
 13c:	mov	x1, x21
 140:	bl	0 <erealloc>
 144:	stp	x22, x24, [x29, #-32]
 148:	stp	x25, x23, [x29, #-16]
 14c:	ldp	q0, q1, [x29, #-32]
 150:	sub	x3, x29, #0x40
 154:	mov	x1, x21
 158:	mov	x2, x19
 15c:	mov	x20, x0
 160:	stp	q0, q1, [x29, #-64]
 164:	bl	0 <vsnprintf>
 168:	mvn	w8, w0
 16c:	lsr	w8, w8, #31
 170:	tbnz	w0, #31, 128 <ck_strdup_printf+0x9c>
 174:	cmp	w0, w21
 178:	b.ge	128 <ck_strdup_printf+0x9c>  // b.tcont
 17c:	mov	x0, x20
 180:	ldp	x20, x19, [sp, #320]
 184:	ldp	x22, x21, [sp, #304]
 188:	ldp	x24, x23, [sp, #288]
 18c:	ldp	x28, x25, [sp, #272]
 190:	ldp	x29, x30, [sp, #256]
 194:	add	sp, sp, #0x150
 198:	ret

000000000000019c <tr_short_str>:
 19c:	ldr	w8, [x0]
 1a0:	ldr	x1, [x0, #8]
 1a4:	ldr	w2, [x0, #16]
 1a8:	ldr	x4, [x0, #48]
 1ac:	adrp	x9, 0 <tr_str>
 1b0:	adrp	x10, 0 <tr_str>
 1b4:	add	x9, x9, #0x0
 1b8:	add	x10, x10, #0x0
 1bc:	cmp	w8, #0x3
 1c0:	adrp	x0, 0 <tr_str>
 1c4:	csel	x3, x10, x9, eq  // eq = none
 1c8:	add	x0, x0, #0x0
 1cc:	b	8c <ck_strdup_printf>

00000000000001d0 <sr_stat_str>:
 1d0:	ldr	x8, [x0, #8]
 1d4:	ldr	w3, [x8, #4]
 1d8:	cbnz	w3, 1e4 <sr_stat_str+0x14>
 1dc:	ldr	w9, [x8, #8]
 1e0:	cbz	w9, 230 <sr_stat_str+0x60>
 1e4:	ldr	w2, [x8]
 1e8:	ldr	w4, [x8, #8]
 1ec:	cbz	w2, 220 <sr_stat_str+0x50>
 1f0:	sub	w8, w2, w3
 1f4:	sub	w8, w8, w4
 1f8:	scvtf	s0, w2
 1fc:	scvtf	s1, w8
 200:	mov	w8, #0x42c80000            	// #1120403456
 204:	fdiv	s0, s1, s0
 208:	fmov	s1, w8
 20c:	fmul	s0, s0, s1
 210:	adrp	x0, 0 <tr_str>
 214:	fcvtzs	w1, s0
 218:	add	x0, x0, #0x0
 21c:	b	8c <ck_strdup_printf>
 220:	adrp	x0, 0 <tr_str>
 224:	mov	w1, wzr
 228:	add	x0, x0, #0x0
 22c:	b	8c <ck_strdup_printf>
 230:	ldr	w2, [x8]
 234:	adrp	x0, 0 <tr_str>
 238:	mov	w4, wzr
 23c:	mov	w1, #0x64                  	// #100
 240:	add	x0, x0, #0x0
 244:	b	8c <ck_strdup_printf>

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <ck_do_nothing>
   8:	adrp	x1, 0 <ck_do_nothing>
   c:	adrp	x3, 0 <ck_do_nothing>
  10:	add	x0, x0, #0x0
  14:	add	x1, x1, #0x0
  18:	add	x3, x3, #0x0
  1c:	mov	w2, #0x1a                  	// #26
  20:	mov	x29, sp
  24:	bl	0 <__assert_fail>
