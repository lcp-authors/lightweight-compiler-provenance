In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_clang_-O2:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	mov	w0, #0x10                  	// #16
  10:	mov	x29, sp
  14:	bl	0 <emalloc>
  18:	adrp	x8, 0 <suite_create>
  1c:	add	x8, x8, #0x0
  20:	cmp	x19, #0x0
  24:	csel	x8, x8, x19, eq  // eq = none
  28:	mov	x20, x0
  2c:	str	x8, [x0]
  30:	bl	0 <check_list_create>
  34:	str	x0, [x20, #8]
  38:	mov	x0, x20
  3c:	ldp	x20, x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <suite_tcase>:
  48:	stp	x29, x30, [sp, #-32]!
  4c:	stp	x20, x19, [sp, #16]
  50:	mov	x29, sp
  54:	cbz	x0, a4 <suite_tcase+0x5c>
  58:	ldr	x20, [x0, #8]
  5c:	mov	x19, x1
  60:	mov	x0, x20
  64:	bl	0 <check_list_front>
  68:	mov	x0, x20
  6c:	bl	0 <check_list_at_end>
  70:	cbnz	w0, 98 <suite_tcase+0x50>
  74:	mov	x0, x20
  78:	bl	0 <check_list_val>
  7c:	ldr	x1, [x0]
  80:	mov	x0, x19
  84:	bl	0 <strcmp>
  88:	cbz	w0, a0 <suite_tcase+0x58>
  8c:	mov	x0, x20
  90:	bl	0 <check_list_advance>
  94:	b	68 <suite_tcase+0x20>
  98:	mov	w0, wzr
  9c:	b	a4 <suite_tcase+0x5c>
  a0:	mov	w0, #0x1                   	// #1
  a4:	ldp	x20, x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret

00000000000000b0 <tcase_create>:
  b0:	str	d8, [sp, #-48]!
  b4:	stp	x20, x19, [sp, #32]
  b8:	mov	x20, x0
  bc:	mov	w0, #0x48                  	// #72
  c0:	stp	x29, x30, [sp, #16]
  c4:	mov	x29, sp
  c8:	bl	0 <emalloc>
  cc:	adrp	x8, 0 <suite_create>
  d0:	add	x8, x8, #0x0
  d4:	cmp	x20, #0x0
  d8:	csel	x8, x8, x20, eq  // eq = none
  dc:	mov	x19, x0
  e0:	str	x8, [x0]
  e4:	adrp	x0, 0 <suite_create>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <getenv>
  f0:	cbz	x0, 130 <tcase_create+0x80>
  f4:	add	x1, x29, #0x8
  f8:	mov	x20, x0
  fc:	str	xzr, [x29, #8]
 100:	bl	0 <strtod>
 104:	fcmp	d0, #0.0
 108:	fmov	d8, #4.000000000000000000e+00
 10c:	b.lt	134 <tcase_create+0x84>  // b.tstop
 110:	ldr	x8, [x29, #8]
 114:	cmp	x8, x20
 118:	b.eq	134 <tcase_create+0x84>  // b.none
 11c:	ldrb	w8, [x8]
 120:	fmov	d1, #4.000000000000000000e+00
 124:	cmp	w8, #0x0
 128:	fcsel	d8, d0, d1, eq  // eq = none
 12c:	b	134 <tcase_create+0x84>
 130:	fmov	d8, #4.000000000000000000e+00
 134:	adrp	x0, 0 <suite_create>
 138:	add	x0, x0, #0x0
 13c:	bl	0 <getenv>
 140:	cbz	x0, 178 <tcase_create+0xc8>
 144:	add	x1, x29, #0x8
 148:	mov	x20, x0
 14c:	str	xzr, [x29, #8]
 150:	bl	0 <strtod>
 154:	fcmp	d0, #0.0
 158:	b.lt	178 <tcase_create+0xc8>  // b.tstop
 15c:	ldr	x8, [x29, #8]
 160:	cmp	x8, x20
 164:	b.eq	178 <tcase_create+0xc8>  // b.none
 168:	ldrb	w8, [x8]
 16c:	fmul	d0, d8, d0
 170:	cmp	w8, #0x0
 174:	fcsel	d8, d0, d8, eq  // eq = none
 178:	mov	x9, #0xcd6500000000        	// #225833675390976
 17c:	frintm	d0, d8
 180:	movk	x9, #0x41cd, lsl #48
 184:	fsub	d0, d8, d0
 188:	fmov	d1, x9
 18c:	fmul	d0, d0, d1
 190:	fcvtms	x8, d8
 194:	fcvtzs	x9, d0
 198:	stp	x8, x9, [x19, #8]
 19c:	bl	0 <check_list_create>
 1a0:	str	x0, [x19, #24]
 1a4:	bl	0 <check_list_create>
 1a8:	str	x0, [x19, #32]
 1ac:	bl	0 <check_list_create>
 1b0:	str	x0, [x19, #48]
 1b4:	bl	0 <check_list_create>
 1b8:	str	x0, [x19, #40]
 1bc:	bl	0 <check_list_create>
 1c0:	str	x0, [x19, #56]
 1c4:	bl	0 <check_list_create>
 1c8:	str	x0, [x19, #64]
 1cc:	mov	x0, x19
 1d0:	ldp	x20, x19, [sp, #32]
 1d4:	ldp	x29, x30, [sp, #16]
 1d8:	ldr	d8, [sp], #48
 1dc:	ret

00000000000001e0 <tag_string_to_list>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	str	x21, [sp, #16]
 1e8:	stp	x20, x19, [sp, #32]
 1ec:	mov	x29, sp
 1f0:	mov	x20, x0
 1f4:	bl	0 <check_list_create>
 1f8:	mov	x19, x0
 1fc:	cbz	x20, 24c <tag_string_to_list+0x6c>
 200:	mov	x0, x20
 204:	bl	0 <strdup>
 208:	adrp	x1, 0 <suite_create>
 20c:	add	x1, x1, #0x0
 210:	mov	x20, x0
 214:	bl	0 <strtok>
 218:	cbz	x0, 244 <tag_string_to_list+0x64>
 21c:	adrp	x21, 0 <suite_create>
 220:	add	x21, x21, #0x0
 224:	bl	0 <strdup>
 228:	mov	x1, x0
 22c:	mov	x0, x19
 230:	bl	0 <check_list_add_end>
 234:	mov	x0, xzr
 238:	mov	x1, x21
 23c:	bl	0 <strtok>
 240:	cbnz	x0, 224 <tag_string_to_list+0x44>
 244:	mov	x0, x20
 248:	bl	0 <free>
 24c:	mov	x0, x19
 250:	ldp	x20, x19, [sp, #32]
 254:	ldr	x21, [sp, #16]
 258:	ldp	x29, x30, [sp], #48
 25c:	ret

0000000000000260 <tcase_set_tags>:
 260:	stp	x29, x30, [sp, #-32]!
 264:	stp	x20, x19, [sp, #16]
 268:	mov	x19, x0
 26c:	ldr	x0, [x0, #64]
 270:	mov	x20, x1
 274:	mov	x29, sp
 278:	cbz	x0, 290 <tcase_set_tags+0x30>
 27c:	adrp	x1, 0 <free>
 280:	add	x1, x1, #0x0
 284:	bl	0 <check_list_apply>
 288:	ldr	x0, [x19, #64]
 28c:	bl	0 <check_list_free>
 290:	mov	x0, x20
 294:	bl	1e0 <tag_string_to_list>
 298:	str	x0, [x19, #64]
 29c:	ldp	x20, x19, [sp, #16]
 2a0:	ldp	x29, x30, [sp], #32
 2a4:	ret

00000000000002a8 <tcase_matching_tag>:
 2a8:	stp	x29, x30, [sp, #-48]!
 2ac:	str	x21, [sp, #16]
 2b0:	stp	x20, x19, [sp, #32]
 2b4:	mov	x29, sp
 2b8:	cbz	x1, 328 <tcase_matching_tag+0x80>
 2bc:	mov	x20, x0
 2c0:	mov	x0, x1
 2c4:	mov	x19, x1
 2c8:	bl	0 <check_list_front>
 2cc:	b	2d8 <tcase_matching_tag+0x30>
 2d0:	mov	x0, x19
 2d4:	bl	0 <check_list_advance>
 2d8:	mov	x0, x19
 2dc:	bl	0 <check_list_at_end>
 2e0:	cbnz	w0, 328 <tcase_matching_tag+0x80>
 2e4:	ldr	x0, [x20, #64]
 2e8:	bl	0 <check_list_front>
 2ec:	ldr	x0, [x20, #64]
 2f0:	bl	0 <check_list_at_end>
 2f4:	cbnz	w0, 2d0 <tcase_matching_tag+0x28>
 2f8:	ldr	x0, [x20, #64]
 2fc:	bl	0 <check_list_val>
 300:	mov	x21, x0
 304:	mov	x0, x19
 308:	bl	0 <check_list_val>
 30c:	mov	x1, x0
 310:	mov	x0, x21
 314:	bl	0 <strcmp>
 318:	cbz	w0, 330 <tcase_matching_tag+0x88>
 31c:	ldr	x0, [x20, #64]
 320:	bl	0 <check_list_advance>
 324:	b	2ec <tcase_matching_tag+0x44>
 328:	mov	w0, wzr
 32c:	b	334 <tcase_matching_tag+0x8c>
 330:	mov	w0, #0x1                   	// #1
 334:	ldp	x20, x19, [sp, #32]
 338:	ldr	x21, [sp, #16]
 33c:	ldp	x29, x30, [sp], #48
 340:	ret

0000000000000344 <suite_add_tcase>:
 344:	stp	x29, x30, [sp, #-32]!
 348:	stp	x20, x19, [sp, #16]
 34c:	mov	x29, sp
 350:	cbz	x0, 370 <suite_add_tcase+0x2c>
 354:	mov	x19, x1
 358:	cbz	x1, 370 <suite_add_tcase+0x2c>
 35c:	mov	x20, x0
 360:	ldr	x0, [x0, #8]
 364:	mov	x1, x19
 368:	bl	0 <check_list_contains>
 36c:	cbz	w0, 37c <suite_add_tcase+0x38>
 370:	ldp	x20, x19, [sp, #16]
 374:	ldp	x29, x30, [sp], #32
 378:	ret
 37c:	ldr	x0, [x20, #8]
 380:	mov	x1, x19
 384:	ldp	x20, x19, [sp, #16]
 388:	ldp	x29, x30, [sp], #32
 38c:	b	0 <check_list_add_end>

0000000000000390 <_tcase_add_test>:
 390:	stp	x29, x30, [sp, #-64]!
 394:	stp	x24, x23, [sp, #16]
 398:	stp	x22, x21, [sp, #32]
 39c:	stp	x20, x19, [sp, #48]
 3a0:	mov	x29, sp
 3a4:	cbz	x0, 3f8 <_tcase_add_test+0x68>
 3a8:	mov	x24, x1
 3ac:	cbz	x1, 3f8 <_tcase_add_test+0x68>
 3b0:	mov	x21, x0
 3b4:	mov	w0, #0x18                  	// #24
 3b8:	mov	w20, w5
 3bc:	mov	w23, w4
 3c0:	mov	w19, w3
 3c4:	mov	w22, w2
 3c8:	bl	0 <emalloc>
 3cc:	str	x24, [x0]
 3d0:	stp	w23, w20, [x0, #8]
 3d4:	str	w22, [x0, #16]
 3d8:	strb	w19, [x0, #20]
 3dc:	mov	x1, x0
 3e0:	ldr	x0, [x21, #24]
 3e4:	ldp	x20, x19, [sp, #48]
 3e8:	ldp	x22, x21, [sp, #32]
 3ec:	ldp	x24, x23, [sp, #16]
 3f0:	ldp	x29, x30, [sp], #64
 3f4:	b	0 <check_list_add_end>
 3f8:	ldp	x20, x19, [sp, #48]
 3fc:	ldp	x22, x21, [sp, #32]
 400:	ldp	x24, x23, [sp, #16]
 404:	ldp	x29, x30, [sp], #64
 408:	ret

000000000000040c <tcase_add_unchecked_fixture>:
 40c:	stp	x29, x30, [sp, #-48]!
 410:	stp	x20, x19, [sp, #32]
 414:	mov	x19, x2
 418:	mov	x20, x0
 41c:	stp	x22, x21, [sp, #16]
 420:	mov	x29, sp
 424:	cbz	x1, 44c <tcase_add_unchecked_fixture+0x40>
 428:	ldr	x22, [x20, #32]
 42c:	mov	w0, #0x10                  	// #16
 430:	mov	x21, x1
 434:	bl	0 <emalloc>
 438:	mov	x1, x0
 43c:	str	x21, [x0, #8]
 440:	str	wzr, [x0]
 444:	mov	x0, x22
 448:	bl	0 <check_list_add_end>
 44c:	cbz	x19, 47c <tcase_add_unchecked_fixture+0x70>
 450:	ldr	x20, [x20, #40]
 454:	mov	w0, #0x10                  	// #16
 458:	bl	0 <emalloc>
 45c:	str	x19, [x0, #8]
 460:	str	wzr, [x0]
 464:	mov	x1, x0
 468:	mov	x0, x20
 46c:	ldp	x20, x19, [sp, #32]
 470:	ldp	x22, x21, [sp, #16]
 474:	ldp	x29, x30, [sp], #48
 478:	b	0 <check_list_add_front>
 47c:	ldp	x20, x19, [sp, #32]
 480:	ldp	x22, x21, [sp, #16]
 484:	ldp	x29, x30, [sp], #48
 488:	ret

000000000000048c <tcase_add_checked_fixture>:
 48c:	stp	x29, x30, [sp, #-48]!
 490:	stp	x20, x19, [sp, #32]
 494:	mov	x19, x2
 498:	mov	x20, x0
 49c:	stp	x22, x21, [sp, #16]
 4a0:	mov	x29, sp
 4a4:	cbz	x1, 4d0 <tcase_add_checked_fixture+0x44>
 4a8:	ldr	x22, [x20, #48]
 4ac:	mov	w0, #0x10                  	// #16
 4b0:	mov	x21, x1
 4b4:	bl	0 <emalloc>
 4b8:	mov	w8, #0x1                   	// #1
 4bc:	mov	x1, x0
 4c0:	str	x21, [x0, #8]
 4c4:	str	w8, [x0]
 4c8:	mov	x0, x22
 4cc:	bl	0 <check_list_add_end>
 4d0:	cbz	x19, 504 <tcase_add_checked_fixture+0x78>
 4d4:	ldr	x20, [x20, #56]
 4d8:	mov	w0, #0x10                  	// #16
 4dc:	bl	0 <emalloc>
 4e0:	mov	w8, #0x1                   	// #1
 4e4:	str	x19, [x0, #8]
 4e8:	str	w8, [x0]
 4ec:	mov	x1, x0
 4f0:	mov	x0, x20
 4f4:	ldp	x20, x19, [sp, #32]
 4f8:	ldp	x22, x21, [sp, #16]
 4fc:	ldp	x29, x30, [sp], #48
 500:	b	0 <check_list_add_front>
 504:	ldp	x20, x19, [sp, #32]
 508:	ldp	x22, x21, [sp, #16]
 50c:	ldp	x29, x30, [sp], #48
 510:	ret

0000000000000514 <tcase_set_timeout>:
 514:	fcmp	d0, #0.0
 518:	b.lt	5a8 <tcase_set_timeout+0x94>  // b.tstop
 51c:	str	d8, [sp, #-48]!
 520:	stp	x20, x19, [sp, #32]
 524:	mov	x19, x0
 528:	adrp	x0, 0 <suite_create>
 52c:	add	x0, x0, #0x0
 530:	stp	x29, x30, [sp, #16]
 534:	mov	x29, sp
 538:	mov	v8.16b, v0.16b
 53c:	bl	0 <getenv>
 540:	cbz	x0, 578 <tcase_set_timeout+0x64>
 544:	add	x1, x29, #0x8
 548:	mov	x20, x0
 54c:	str	xzr, [x29, #8]
 550:	bl	0 <strtod>
 554:	fcmp	d0, #0.0
 558:	b.lt	578 <tcase_set_timeout+0x64>  // b.tstop
 55c:	ldr	x8, [x29, #8]
 560:	cmp	x8, x20
 564:	b.eq	578 <tcase_set_timeout+0x64>  // b.none
 568:	ldrb	w8, [x8]
 56c:	fmul	d0, d0, d8
 570:	cmp	w8, #0x0
 574:	fcsel	d8, d0, d8, eq  // eq = none
 578:	mov	x9, #0xcd6500000000        	// #225833675390976
 57c:	frintm	d0, d8
 580:	movk	x9, #0x41cd, lsl #48
 584:	fsub	d0, d8, d0
 588:	fmov	d1, x9
 58c:	fmul	d0, d0, d1
 590:	fcvtms	x8, d8
 594:	fcvtzs	x9, d0
 598:	stp	x8, x9, [x19, #8]
 59c:	ldp	x20, x19, [sp, #32]
 5a0:	ldp	x29, x30, [sp, #16]
 5a4:	ldr	d8, [sp], #48
 5a8:	ret

00000000000005ac <tcase_fn_start>:
 5ac:	stp	x29, x30, [sp, #-48]!
 5b0:	str	x21, [sp, #16]
 5b4:	mov	x21, x0
 5b8:	mov	w0, #0x2                   	// #2
 5bc:	stp	x20, x19, [sp, #32]
 5c0:	mov	x29, sp
 5c4:	mov	w19, w2
 5c8:	mov	x20, x1
 5cc:	bl	0 <send_ctx_info>
 5d0:	mov	x0, x20
 5d4:	mov	w1, w19
 5d8:	bl	0 <send_loc_info>
 5dc:	adrp	x8, 8 <suite_create+0x8>
 5e0:	str	x21, [x8]
 5e4:	ldp	x20, x19, [sp, #32]
 5e8:	ldr	x21, [sp, #16]
 5ec:	ldp	x29, x30, [sp], #48
 5f0:	ret

00000000000005f4 <tcase_name>:
 5f4:	adrp	x8, 8 <suite_create+0x8>
 5f8:	ldr	x0, [x8]
 5fc:	ret

0000000000000600 <_mark_point>:
 600:	b	0 <send_loc_info>

0000000000000604 <_ck_assert_failed>:
 604:	stp	x29, x30, [sp, #-32]!
 608:	stp	x28, x19, [sp, #16]
 60c:	mov	x29, sp
 610:	sub	sp, sp, #0x2, lsl #12
 614:	sub	sp, sp, #0xf0
 618:	mov	x19, x2
 61c:	stp	x3, x4, [sp, #136]
 620:	stp	x5, x6, [sp, #152]
 624:	str	x7, [sp, #168]
 628:	stp	q1, q2, [sp, #16]
 62c:	stp	q3, q4, [sp, #48]
 630:	str	q0, [sp]
 634:	stp	q5, q6, [sp, #80]
 638:	str	q7, [sp, #112]
 63c:	bl	0 <send_loc_info>
 640:	mov	x9, #0xffffffffffffffd8    	// #-40
 644:	mov	x10, sp
 648:	add	x11, sp, #0x88
 64c:	movk	x9, #0xff80, lsl #32
 650:	add	x12, x29, #0x20
 654:	mov	x8, #0xffffffffffffffd8    	// #-40
 658:	add	x10, x10, #0x80
 65c:	add	x11, x11, #0x28
 660:	stp	x10, x9, [x29, #-16]
 664:	stp	x12, x11, [x29, #-32]
 668:	tbz	w8, #31, 690 <_ck_assert_failed+0x8c>
 66c:	add	w9, w8, #0x8
 670:	cmn	w8, #0x8
 674:	stur	w9, [x29, #-8]
 678:	b.gt	690 <_ck_assert_failed+0x8c>
 67c:	ldur	x9, [x29, #-24]
 680:	add	x8, x9, x8
 684:	ldr	x2, [x8]
 688:	cbnz	x2, 6a4 <_ck_assert_failed+0xa0>
 68c:	b	6c0 <_ck_assert_failed+0xbc>
 690:	ldur	x8, [x29, #-32]
 694:	add	x9, x8, #0x8
 698:	stur	x9, [x29, #-32]
 69c:	ldr	x2, [x8]
 6a0:	cbz	x2, 6c0 <_ck_assert_failed+0xbc>
 6a4:	ldp	q0, q1, [x29, #-32]
 6a8:	add	x0, sp, #0xd0
 6ac:	add	x3, sp, #0xb0
 6b0:	mov	w1, #0x2000                	// #8192
 6b4:	add	x19, sp, #0xd0
 6b8:	stp	q0, q1, [sp, #176]
 6bc:	bl	0 <vsnprintf>
 6c0:	mov	x0, x19
 6c4:	bl	0 <send_failure_info>
 6c8:	adrp	x8, 0 <suite_create>
 6cc:	ldr	w8, [x8]
 6d0:	cmp	w8, #0x1
 6d4:	b.ne	6e0 <_ck_assert_failed+0xdc>  // b.any
 6d8:	mov	w0, #0x1                   	// #1
 6dc:	bl	0 <_exit>
 6e0:	adrp	x0, 0 <error_jmp_buffer>
 6e4:	add	x0, x0, #0x0
 6e8:	mov	w1, #0x1                   	// #1
 6ec:	bl	0 <longjmp>

00000000000006f0 <cur_fork_status>:
 6f0:	adrp	x8, 0 <suite_create>
 6f4:	ldr	w0, [x8]
 6f8:	ret

00000000000006fc <srunner_create>:
 6fc:	stp	x29, x30, [sp, #-32]!
 700:	stp	x20, x19, [sp, #16]
 704:	mov	x20, x0
 708:	mov	w0, #0x40                  	// #64
 70c:	mov	x29, sp
 710:	bl	0 <emalloc>
 714:	mov	x19, x0
 718:	bl	0 <check_list_create>
 71c:	str	x0, [x19]
 720:	cbz	x20, 72c <srunner_create+0x30>
 724:	mov	x1, x20
 728:	bl	0 <check_list_add_end>
 72c:	mov	w0, #0xc                   	// #12
 730:	bl	0 <emalloc>
 734:	str	x0, [x19, #8]
 738:	str	wzr, [x0, #8]
 73c:	str	xzr, [x0]
 740:	bl	0 <check_list_create>
 744:	movi	v0.2d, #0x0
 748:	str	x0, [x19, #16]
 74c:	stur	q0, [x19, #24]
 750:	stur	q0, [x19, #40]
 754:	str	wzr, [x19, #56]
 758:	mov	x0, x19
 75c:	ldp	x20, x19, [sp, #16]
 760:	ldp	x29, x30, [sp], #32
 764:	ret

0000000000000768 <srunner_add_suite>:
 768:	cbz	x1, 774 <srunner_add_suite+0xc>
 76c:	ldr	x0, [x0]
 770:	b	0 <check_list_add_end>
 774:	ret

0000000000000778 <srunner_free>:
 778:	cbz	x0, 824 <srunner_free+0xac>
 77c:	stp	x29, x30, [sp, #-64]!
 780:	stp	x24, x23, [sp, #16]
 784:	stp	x22, x21, [sp, #32]
 788:	stp	x20, x19, [sp, #48]
 78c:	mov	x19, x0
 790:	ldr	x0, [x0, #8]
 794:	mov	x29, sp
 798:	bl	0 <free>
 79c:	ldr	x20, [x19]
 7a0:	mov	x0, x20
 7a4:	bl	0 <check_list_front>
 7a8:	mov	x0, x20
 7ac:	bl	0 <check_list_at_end>
 7b0:	cbz	w0, 828 <srunner_free+0xb0>
 7b4:	ldr	x0, [x19]
 7b8:	bl	0 <check_list_free>
 7bc:	ldr	x20, [x19, #16]
 7c0:	mov	x0, x20
 7c4:	bl	0 <check_list_front>
 7c8:	mov	x0, x20
 7cc:	bl	0 <check_list_at_end>
 7d0:	cbnz	w0, 804 <srunner_free+0x8c>
 7d4:	mov	x0, x20
 7d8:	bl	0 <check_list_val>
 7dc:	mov	x21, x0
 7e0:	ldr	x0, [x0, #8]
 7e4:	bl	0 <free>
 7e8:	ldr	x0, [x21, #48]
 7ec:	bl	0 <free>
 7f0:	mov	x0, x21
 7f4:	bl	0 <free>
 7f8:	mov	x0, x20
 7fc:	bl	0 <check_list_advance>
 800:	b	7c8 <srunner_free+0x50>
 804:	ldr	x0, [x19, #16]
 808:	bl	0 <check_list_free>
 80c:	mov	x0, x19
 810:	ldp	x20, x19, [sp, #48]
 814:	ldp	x22, x21, [sp, #32]
 818:	ldp	x24, x23, [sp, #16]
 81c:	ldp	x29, x30, [sp], #64
 820:	b	0 <free>
 824:	ret
 828:	adrp	x21, 0 <free>
 82c:	add	x21, x21, #0x0
 830:	b	858 <srunner_free+0xe0>
 834:	ldr	x0, [x22, #8]
 838:	bl	0 <check_list_free>
 83c:	mov	x0, x22
 840:	bl	0 <free>
 844:	mov	x0, x20
 848:	bl	0 <check_list_advance>
 84c:	mov	x0, x20
 850:	bl	0 <check_list_at_end>
 854:	cbnz	w0, 7b4 <srunner_free+0x3c>
 858:	mov	x0, x20
 85c:	bl	0 <check_list_val>
 860:	cbz	x0, 844 <srunner_free+0xcc>
 864:	ldr	x23, [x0, #8]
 868:	mov	x22, x0
 86c:	mov	x0, x23
 870:	bl	0 <check_list_front>
 874:	mov	x0, x23
 878:	bl	0 <check_list_at_end>
 87c:	cbnz	w0, 834 <srunner_free+0xbc>
 880:	mov	x0, x23
 884:	bl	0 <check_list_val>
 888:	mov	x24, x0
 88c:	ldr	x0, [x0, #24]
 890:	mov	x1, x21
 894:	bl	0 <check_list_apply>
 898:	ldr	x0, [x24, #32]
 89c:	mov	x1, x21
 8a0:	bl	0 <check_list_apply>
 8a4:	ldr	x0, [x24, #48]
 8a8:	mov	x1, x21
 8ac:	bl	0 <check_list_apply>
 8b0:	ldr	x0, [x24, #40]
 8b4:	mov	x1, x21
 8b8:	bl	0 <check_list_apply>
 8bc:	ldr	x0, [x24, #56]
 8c0:	mov	x1, x21
 8c4:	bl	0 <check_list_apply>
 8c8:	ldr	x0, [x24, #64]
 8cc:	mov	x1, x21
 8d0:	bl	0 <check_list_apply>
 8d4:	ldr	x0, [x24, #24]
 8d8:	bl	0 <check_list_free>
 8dc:	ldr	x0, [x24, #32]
 8e0:	bl	0 <check_list_free>
 8e4:	ldr	x0, [x24, #48]
 8e8:	bl	0 <check_list_free>
 8ec:	ldr	x0, [x24, #40]
 8f0:	bl	0 <check_list_free>
 8f4:	ldr	x0, [x24, #56]
 8f8:	bl	0 <check_list_free>
 8fc:	ldr	x0, [x24, #64]
 900:	bl	0 <check_list_free>
 904:	mov	x0, x24
 908:	bl	0 <free>
 90c:	mov	x0, x23
 910:	bl	0 <check_list_advance>
 914:	b	874 <srunner_free+0xfc>

0000000000000918 <tr_free>:
 918:	stp	x29, x30, [sp, #-32]!
 91c:	str	x19, [sp, #16]
 920:	mov	x19, x0
 924:	ldr	x0, [x0, #8]
 928:	mov	x29, sp
 92c:	bl	0 <free>
 930:	ldr	x0, [x19, #48]
 934:	bl	0 <free>
 938:	mov	x0, x19
 93c:	ldr	x19, [sp, #16]
 940:	ldp	x29, x30, [sp], #32
 944:	b	0 <free>

0000000000000948 <srunner_ntests_failed>:
 948:	ldr	x8, [x0, #8]
 94c:	ldp	w9, w8, [x8, #4]
 950:	add	w0, w8, w9
 954:	ret

0000000000000958 <srunner_ntests_run>:
 958:	ldr	x8, [x0, #8]
 95c:	ldr	w0, [x8]
 960:	ret

0000000000000964 <srunner_failures>:
 964:	stp	x29, x30, [sp, #-48]!
 968:	stp	x20, x19, [sp, #32]
 96c:	ldr	x8, [x0, #8]
 970:	str	x21, [sp, #16]
 974:	mov	x19, x0
 978:	mov	x29, sp
 97c:	ldp	w9, w8, [x8, #4]
 980:	add	w8, w8, w9
 984:	sbfiz	x0, x8, #3, #32
 988:	bl	0 <emalloc>
 98c:	ldr	x20, [x19, #16]
 990:	mov	x19, x0
 994:	mov	x0, x20
 998:	bl	0 <check_list_front>
 99c:	mov	x0, x20
 9a0:	bl	0 <check_list_at_end>
 9a4:	cbz	w0, 9bc <srunner_failures+0x58>
 9a8:	mov	x0, x19
 9ac:	ldp	x20, x19, [sp, #32]
 9b0:	ldr	x21, [sp, #16]
 9b4:	ldp	x29, x30, [sp], #48
 9b8:	ret
 9bc:	mov	w21, wzr
 9c0:	b	9d8 <srunner_failures+0x74>
 9c4:	mov	x0, x20
 9c8:	bl	0 <check_list_advance>
 9cc:	mov	x0, x20
 9d0:	bl	0 <check_list_at_end>
 9d4:	cbnz	w0, 9a8 <srunner_failures+0x44>
 9d8:	mov	x0, x20
 9dc:	bl	0 <check_list_val>
 9e0:	ldr	w8, [x0]
 9e4:	cmp	w8, #0x1
 9e8:	b.eq	9c4 <srunner_failures+0x60>  // b.none
 9ec:	add	w8, w21, #0x1
 9f0:	str	x0, [x19, w21, sxtw #3]
 9f4:	mov	w21, w8
 9f8:	b	9c4 <srunner_failures+0x60>

00000000000009fc <srunner_results>:
 9fc:	stp	x29, x30, [sp, #-48]!
 a00:	stp	x20, x19, [sp, #32]
 a04:	ldr	x8, [x0, #8]
 a08:	mov	x19, x0
 a0c:	str	x21, [sp, #16]
 a10:	mov	x29, sp
 a14:	ldrsw	x8, [x8]
 a18:	lsl	x0, x8, #3
 a1c:	bl	0 <emalloc>
 a20:	ldr	x20, [x19, #16]
 a24:	mov	x19, x0
 a28:	mov	x0, x20
 a2c:	bl	0 <check_list_front>
 a30:	mov	x0, x20
 a34:	bl	0 <check_list_at_end>
 a38:	cbnz	w0, a60 <srunner_results+0x64>
 a3c:	mov	x21, x19
 a40:	mov	x0, x20
 a44:	bl	0 <check_list_val>
 a48:	str	x0, [x21], #8
 a4c:	mov	x0, x20
 a50:	bl	0 <check_list_advance>
 a54:	mov	x0, x20
 a58:	bl	0 <check_list_at_end>
 a5c:	cbz	w0, a40 <srunner_results+0x44>
 a60:	mov	x0, x19
 a64:	ldp	x20, x19, [sp, #32]
 a68:	ldr	x21, [sp, #16]
 a6c:	ldp	x29, x30, [sp], #48
 a70:	ret

0000000000000a74 <tr_create>:
 a74:	stp	x29, x30, [sp, #-16]!
 a78:	mov	w0, #0x38                  	// #56
 a7c:	mov	x29, sp
 a80:	bl	0 <emalloc>
 a84:	mov	w8, #0xffffffff            	// #-1
 a88:	stp	xzr, xzr, [x0]
 a8c:	stp	xzr, xzr, [x0, #40]
 a90:	str	xzr, [x0, #32]
 a94:	str	w8, [x0, #16]
 a98:	str	w8, [x0, #24]
 a9c:	ldp	x29, x30, [sp], #16
 aa0:	ret

0000000000000aa4 <tr_msg>:
 aa4:	ldr	x0, [x0, #48]
 aa8:	ret

0000000000000aac <tr_lno>:
 aac:	ldr	w0, [x0, #16]
 ab0:	ret

0000000000000ab4 <tr_lfile>:
 ab4:	ldr	x0, [x0, #8]
 ab8:	ret

0000000000000abc <tr_rtype>:
 abc:	ldr	w0, [x0]
 ac0:	ret

0000000000000ac4 <tr_ctx>:
 ac4:	ldr	w0, [x0, #4]
 ac8:	ret

0000000000000acc <tr_tcname>:
 acc:	ldr	x0, [x0, #32]
 ad0:	ret

0000000000000ad4 <set_fork_status>:
 ad4:	stp	x29, x30, [sp, #-16]!
 ad8:	cmp	w0, #0x2
 adc:	mov	x29, sp
 ae0:	b.hi	af4 <set_fork_status+0x20>  // b.pmore
 ae4:	adrp	x8, 0 <suite_create>
 ae8:	str	w0, [x8]
 aec:	ldp	x29, x30, [sp], #16
 af0:	ret
 af4:	adrp	x0, 0 <suite_create>
 af8:	adrp	x1, 0 <suite_create>
 afc:	add	x0, x0, #0x0
 b00:	add	x1, x1, #0x0
 b04:	mov	w2, #0x24a                 	// #586
 b08:	bl	0 <eprintf>

0000000000000b0c <check_get_clockid>:
 b0c:	sub	sp, sp, #0x20
 b10:	add	x2, sp, #0x8
 b14:	mov	w0, #0x1                   	// #1
 b18:	mov	x1, xzr
 b1c:	stp	x29, x30, [sp, #16]
 b20:	add	x29, sp, #0x10
 b24:	bl	0 <timer_create>
 b28:	cbz	w0, b34 <check_get_clockid+0x28>
 b2c:	mov	w0, wzr
 b30:	b	b40 <check_get_clockid+0x34>
 b34:	ldr	x0, [sp, #8]
 b38:	bl	0 <timer_delete>
 b3c:	mov	w0, #0x1                   	// #1
 b40:	ldp	x29, x30, [sp, #16]
 b44:	add	sp, sp, #0x20
 b48:	ret

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	sub	sp, sp, #0x130
   4:	stp	x22, x21, [sp, #272]
   8:	adrp	x22, 0 <stderr>
   c:	stp	x20, x19, [sp, #288]
  10:	mov	x19, x0
  14:	ldr	x0, [x22]
  18:	stp	x29, x30, [sp, #240]
  1c:	add	x29, sp, #0xf0
  20:	str	x28, [sp, #256]
  24:	mov	w20, w2
  28:	mov	x21, x1
  2c:	stp	x3, x4, [x29, #-104]
  30:	stp	x5, x6, [x29, #-88]
  34:	stur	x7, [x29, #-72]
  38:	stp	q1, q2, [sp, #16]
  3c:	stp	q3, q4, [sp, #48]
  40:	str	q0, [sp]
  44:	stp	q5, q6, [sp, #80]
  48:	str	q7, [sp, #112]
  4c:	bl	0 <fflush>
  50:	ldr	x0, [x22]
  54:	adrp	x1, 0 <eprintf>
  58:	add	x1, x1, #0x0
  5c:	mov	x2, x21
  60:	mov	w3, w20
  64:	bl	0 <fprintf>
  68:	sub	x9, x29, #0x68
  6c:	mov	x10, sp
  70:	mov	x11, #0xffffffffffffffd8    	// #-40
  74:	add	x8, x29, #0x40
  78:	movk	x11, #0xff80, lsl #32
  7c:	add	x9, x9, #0x28
  80:	add	x10, x10, #0x80
  84:	stp	x8, x9, [x29, #-32]
  88:	stp	x10, x11, [x29, #-16]
  8c:	ldp	q0, q1, [x29, #-32]
  90:	ldr	x0, [x22]
  94:	sub	x2, x29, #0x40
  98:	mov	x1, x19
  9c:	stp	q0, q1, [x29, #-64]
  a0:	bl	0 <vfprintf>
  a4:	ldrb	w8, [x19]
  a8:	cbz	w8, e8 <eprintf+0xe8>
  ac:	mov	x0, x19
  b0:	bl	0 <strlen>
  b4:	add	x8, x0, x19
  b8:	ldurb	w8, [x8, #-1]
  bc:	cmp	w8, #0x3a
  c0:	b.ne	e8 <eprintf+0xe8>  // b.any
  c4:	ldr	x19, [x22]
  c8:	bl	0 <__errno_location>
  cc:	ldr	w0, [x0]
  d0:	bl	0 <strerror>
  d4:	adrp	x1, 0 <eprintf>
  d8:	mov	x2, x0
  dc:	add	x1, x1, #0x0
  e0:	mov	x0, x19
  e4:	bl	0 <fprintf>
  e8:	ldr	x1, [x22]
  ec:	mov	w0, #0xa                   	// #10
  f0:	bl	0 <fputc>
  f4:	mov	w0, #0x2                   	// #2
  f8:	bl	0 <exit>

00000000000000fc <emalloc>:
  fc:	stp	x29, x30, [sp, #-32]!
 100:	str	x19, [sp, #16]
 104:	mov	x29, sp
 108:	mov	x19, x0
 10c:	bl	0 <malloc>
 110:	cbz	x0, 120 <emalloc+0x24>
 114:	ldr	x19, [sp, #16]
 118:	ldp	x29, x30, [sp], #32
 11c:	ret
 120:	adrp	x0, 0 <eprintf>
 124:	adrp	x1, 0 <eprintf>
 128:	add	x0, x0, #0x0
 12c:	add	x1, x1, #0x0
 130:	mov	w2, #0x3e                  	// #62
 134:	mov	x3, x19
 138:	bl	0 <eprintf>

000000000000013c <erealloc>:
 13c:	stp	x29, x30, [sp, #-32]!
 140:	str	x19, [sp, #16]
 144:	mov	x29, sp
 148:	mov	x19, x1
 14c:	bl	0 <realloc>
 150:	cbz	x0, 160 <erealloc+0x24>
 154:	ldr	x19, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
 160:	adrp	x0, 0 <eprintf>
 164:	adrp	x1, 0 <eprintf>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	mov	w2, #0x48                  	// #72
 174:	mov	x3, x19
 178:	bl	0 <eprintf>

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_list_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w0, #0x18                  	// #24
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	bl	0 <emalloc>
  14:	adrp	x8, 0 <check_list_create>
  18:	ldr	d0, [x8]
  1c:	mov	x19, x0
  20:	str	d0, [x0]
  24:	mov	w0, #0x8                   	// #8
  28:	bl	0 <emalloc>
  2c:	movi	v0.2d, #0xffffffffffffffff
  30:	str	x0, [x19, #16]
  34:	str	d0, [x19, #8]
  38:	mov	x0, x19
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <check_list_add_front>:
  48:	cbz	x0, cc <check_list_add_front+0x84>
  4c:	stp	x29, x30, [sp, #-32]!
  50:	stp	x20, x19, [sp, #16]
  54:	ldp	w8, w9, [x0]
  58:	mov	x19, x1
  5c:	mov	x20, x0
  60:	mov	x29, sp
  64:	cmp	w8, w9
  68:	b.cs	74 <check_list_add_front+0x2c>  // b.hs, b.nlast
  6c:	ldr	x1, [x20, #16]
  70:	b	94 <check_list_add_front+0x4c>
  74:	ldr	x0, [x20, #16]
  78:	lsl	w8, w9, #1
  7c:	lsl	x1, x8, #3
  80:	str	w8, [x20, #4]
  84:	bl	0 <erealloc>
  88:	ldr	w8, [x20]
  8c:	mov	x1, x0
  90:	str	x0, [x20, #16]
  94:	mov	w8, w8
  98:	add	x0, x1, #0x8
  9c:	lsl	x2, x8, #3
  a0:	bl	0 <memmove>
  a4:	ldr	w8, [x20, #12]
  a8:	ldr	w9, [x20]
  ac:	ldr	x10, [x20, #16]
  b0:	add	w8, w8, #0x1
  b4:	add	w9, w9, #0x1
  b8:	stp	wzr, w8, [x20, #8]
  bc:	str	w9, [x20]
  c0:	str	x19, [x10]
  c4:	ldp	x20, x19, [sp, #16]
  c8:	ldp	x29, x30, [sp], #32
  cc:	ret

00000000000000d0 <check_list_add_end>:
  d0:	cbz	x0, 138 <check_list_add_end+0x68>
  d4:	stp	x29, x30, [sp, #-32]!
  d8:	stp	x20, x19, [sp, #16]
  dc:	ldp	w8, w9, [x0]
  e0:	mov	x19, x1
  e4:	mov	x20, x0
  e8:	mov	x29, sp
  ec:	cmp	w8, w9
  f0:	b.cs	fc <check_list_add_end+0x2c>  // b.hs, b.nlast
  f4:	ldr	x0, [x20, #16]
  f8:	b	118 <check_list_add_end+0x48>
  fc:	ldr	x0, [x20, #16]
 100:	lsl	w8, w9, #1
 104:	lsl	x1, x8, #3
 108:	str	w8, [x20, #4]
 10c:	bl	0 <erealloc>
 110:	ldr	w8, [x20]
 114:	str	x0, [x20, #16]
 118:	ldrsw	x9, [x20, #12]
 11c:	add	w8, w8, #0x1
 120:	str	w8, [x20]
 124:	add	x8, x9, #0x1
 128:	stp	w8, w8, [x20, #8]
 12c:	str	x19, [x0, x8, lsl #3]
 130:	ldp	x20, x19, [sp, #16]
 134:	ldp	x29, x30, [sp], #32
 138:	ret

000000000000013c <check_list_at_end>:
 13c:	ldr	w8, [x0, #8]
 140:	cmn	w8, #0x1
 144:	b.eq	158 <check_list_at_end+0x1c>  // b.none
 148:	ldr	w9, [x0, #12]
 14c:	cmp	w8, w9
 150:	cset	w0, gt
 154:	ret
 158:	mov	w0, #0x1                   	// #1
 15c:	ret

0000000000000160 <check_list_front>:
 160:	ldr	w8, [x0, #8]
 164:	cmn	w8, #0x1
 168:	b.eq	170 <check_list_front+0x10>  // b.none
 16c:	str	wzr, [x0, #8]
 170:	ret

0000000000000174 <check_list_free>:
 174:	cbz	x0, 1a0 <check_list_free+0x2c>
 178:	stp	x29, x30, [sp, #-32]!
 17c:	str	x19, [sp, #16]
 180:	mov	x19, x0
 184:	ldr	x0, [x0, #16]
 188:	mov	x29, sp
 18c:	bl	0 <free>
 190:	mov	x0, x19
 194:	ldr	x19, [sp, #16]
 198:	ldp	x29, x30, [sp], #32
 19c:	b	0 <free>
 1a0:	ret

00000000000001a4 <check_list_val>:
 1a4:	cbz	x0, 1d0 <check_list_val+0x2c>
 1a8:	ldrsw	x8, [x0, #8]
 1ac:	cmn	w8, #0x1
 1b0:	b.eq	1c0 <check_list_val+0x1c>  // b.none
 1b4:	ldr	w9, [x0, #12]
 1b8:	cmp	w8, w9
 1bc:	b.le	1c8 <check_list_val+0x24>
 1c0:	mov	x0, xzr
 1c4:	ret
 1c8:	ldr	x9, [x0, #16]
 1cc:	ldr	x0, [x9, x8, lsl #3]
 1d0:	ret

00000000000001d4 <check_list_advance>:
 1d4:	cbz	x0, 1f8 <check_list_advance+0x24>
 1d8:	ldr	w8, [x0, #8]
 1dc:	cmn	w8, #0x1
 1e0:	b.eq	1f8 <check_list_advance+0x24>  // b.none
 1e4:	ldr	w9, [x0, #12]
 1e8:	cmp	w8, w9
 1ec:	b.gt	1f8 <check_list_advance+0x24>
 1f0:	add	w8, w8, #0x1
 1f4:	str	w8, [x0, #8]
 1f8:	ret

00000000000001fc <check_list_apply>:
 1fc:	stp	x29, x30, [sp, #-32]!
 200:	stp	x20, x19, [sp, #16]
 204:	mov	x29, sp
 208:	cbz	x0, 274 <check_list_apply+0x78>
 20c:	mov	x19, x1
 210:	cbz	x1, 274 <check_list_apply+0x78>
 214:	ldr	w8, [x0, #8]
 218:	mov	x20, x0
 21c:	cmn	w8, #0x1
 220:	b.eq	274 <check_list_apply+0x78>  // b.none
 224:	mov	w8, wzr
 228:	str	wzr, [x20, #8]
 22c:	b	238 <check_list_apply+0x3c>
 230:	cmn	w8, #0x1
 234:	b.eq	274 <check_list_apply+0x78>  // b.none
 238:	ldr	w9, [x20, #12]
 23c:	cmp	w8, w9
 240:	b.gt	274 <check_list_apply+0x78>
 244:	ldr	x9, [x20, #16]
 248:	ldr	x0, [x9, w8, sxtw #3]
 24c:	blr	x19
 250:	ldr	w8, [x20, #8]
 254:	cmn	w8, #0x1
 258:	b.eq	274 <check_list_apply+0x78>  // b.none
 25c:	ldr	w9, [x20, #12]
 260:	cmp	w8, w9
 264:	b.gt	230 <check_list_apply+0x34>
 268:	add	w8, w8, #0x1
 26c:	str	w8, [x20, #8]
 270:	b	230 <check_list_apply+0x34>
 274:	ldp	x20, x19, [sp, #16]
 278:	ldp	x29, x30, [sp], #32
 27c:	ret

0000000000000280 <check_list_contains>:
 280:	ldr	w8, [x0, #8]
 284:	cmn	w8, #0x1
 288:	b.eq	2c4 <check_list_contains+0x44>  // b.none
 28c:	ldr	w8, [x0, #12]
 290:	str	wzr, [x0, #8]
 294:	tbnz	w8, #31, 2c4 <check_list_contains+0x44>
 298:	ldr	x9, [x0, #16]
 29c:	mov	w10, #0xffffffff            	// #-1
 2a0:	ldr	x11, [x9]
 2a4:	cmp	x11, x1
 2a8:	b.eq	2cc <check_list_contains+0x4c>  // b.none
 2ac:	add	w11, w10, #0x2
 2b0:	add	w10, w10, #0x1
 2b4:	cmp	w10, w8
 2b8:	add	x9, x9, #0x8
 2bc:	str	w11, [x0, #8]
 2c0:	b.lt	2a0 <check_list_contains+0x20>  // b.tstop
 2c4:	mov	w0, wzr
 2c8:	ret
 2cc:	mov	w0, #0x1                   	// #1
 2d0:	ret

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_set_log>:
   0:	ldr	x8, [x0, #24]
   4:	cbz	x8, c <srunner_set_log+0xc>
   8:	ret
   c:	str	x1, [x0, #24]
  10:	ret

0000000000000014 <srunner_has_log>:
  14:	stp	x29, x30, [sp, #-16]!
  18:	ldr	x0, [x0, #24]
  1c:	mov	x29, sp
  20:	cbnz	x0, 30 <srunner_has_log+0x1c>
  24:	adrp	x0, 0 <srunner_set_log>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <getenv>
  30:	cmp	x0, #0x0
  34:	cset	w0, ne  // ne = any
  38:	ldp	x29, x30, [sp], #16
  3c:	ret

0000000000000040 <srunner_log_fname>:
  40:	ldr	x0, [x0, #24]
  44:	cbz	x0, 4c <srunner_log_fname+0xc>
  48:	ret
  4c:	adrp	x0, 0 <srunner_set_log>
  50:	add	x0, x0, #0x0
  54:	b	0 <getenv>

0000000000000058 <srunner_set_xml>:
  58:	ldr	x8, [x0, #32]
  5c:	cbz	x8, 64 <srunner_set_xml+0xc>
  60:	ret
  64:	str	x1, [x0, #32]
  68:	ret

000000000000006c <srunner_has_xml>:
  6c:	stp	x29, x30, [sp, #-16]!
  70:	ldr	x0, [x0, #32]
  74:	mov	x29, sp
  78:	cbnz	x0, 88 <srunner_has_xml+0x1c>
  7c:	adrp	x0, 0 <srunner_set_log>
  80:	add	x0, x0, #0x0
  84:	bl	0 <getenv>
  88:	cmp	x0, #0x0
  8c:	cset	w0, ne  // ne = any
  90:	ldp	x29, x30, [sp], #16
  94:	ret

0000000000000098 <srunner_xml_fname>:
  98:	ldr	x0, [x0, #32]
  9c:	cbz	x0, a4 <srunner_xml_fname+0xc>
  a0:	ret
  a4:	adrp	x0, 0 <srunner_set_log>
  a8:	add	x0, x0, #0x0
  ac:	b	0 <getenv>

00000000000000b0 <srunner_set_tap>:
  b0:	ldr	x8, [x0, #40]
  b4:	cbz	x8, bc <srunner_set_tap+0xc>
  b8:	ret
  bc:	str	x1, [x0, #40]
  c0:	ret

00000000000000c4 <srunner_has_tap>:
  c4:	stp	x29, x30, [sp, #-16]!
  c8:	ldr	x0, [x0, #40]
  cc:	mov	x29, sp
  d0:	cbnz	x0, e0 <srunner_has_tap+0x1c>
  d4:	adrp	x0, 0 <srunner_set_log>
  d8:	add	x0, x0, #0x0
  dc:	bl	0 <getenv>
  e0:	cmp	x0, #0x0
  e4:	cset	w0, ne  // ne = any
  e8:	ldp	x29, x30, [sp], #16
  ec:	ret

00000000000000f0 <srunner_tap_fname>:
  f0:	ldr	x0, [x0, #40]
  f4:	cbz	x0, fc <srunner_tap_fname+0xc>
  f8:	ret
  fc:	adrp	x0, 0 <srunner_set_log>
 100:	add	x0, x0, #0x0
 104:	b	0 <getenv>

0000000000000108 <srunner_register_lfun>:
 108:	stp	x29, x30, [sp, #-64]!
 10c:	stp	x20, x19, [sp, #48]
 110:	mov	x19, x0
 114:	mov	w0, #0x18                  	// #24
 118:	stp	x24, x23, [sp, #16]
 11c:	stp	x22, x21, [sp, #32]
 120:	mov	x29, sp
 124:	mov	w22, w4
 128:	mov	x21, x3
 12c:	mov	w20, w2
 130:	mov	x23, x1
 134:	bl	0 <emalloc>
 138:	cmp	w22, #0x4
 13c:	mov	x24, x0
 140:	b.ne	14c <srunner_register_lfun+0x44>  // b.any
 144:	bl	0 <get_env_printmode>
 148:	mov	w22, w0
 14c:	stp	x23, x21, [x24]
 150:	stp	w20, w22, [x24, #16]
 154:	ldr	x0, [x19, #48]
 158:	mov	x1, x24
 15c:	ldp	x20, x19, [sp, #48]
 160:	ldp	x22, x21, [sp, #32]
 164:	ldp	x24, x23, [sp, #16]
 168:	ldp	x29, x30, [sp], #64
 16c:	b	0 <check_list_add_end>

0000000000000170 <log_srunner_start>:
 170:	mov	w2, #0x2                   	// #2
 174:	mov	x1, xzr
 178:	b	17c <srunner_send_evt>

000000000000017c <srunner_send_evt>:
 17c:	stp	x29, x30, [sp, #-64]!
 180:	stp	x22, x21, [sp, #32]
 184:	stp	x20, x19, [sp, #48]
 188:	ldr	x21, [x0, #48]
 18c:	mov	x20, x0
 190:	str	x23, [sp, #16]
 194:	mov	x29, sp
 198:	mov	x0, x21
 19c:	mov	w19, w2
 1a0:	mov	x22, x1
 1a4:	bl	0 <check_list_front>
 1a8:	mov	x0, x21
 1ac:	bl	0 <check_list_at_end>
 1b0:	cbnz	w0, 1f4 <srunner_send_evt+0x78>
 1b4:	mov	x0, x21
 1b8:	bl	0 <check_list_val>
 1bc:	mov	x23, x0
 1c0:	ldr	x0, [x0]
 1c4:	bl	0 <fflush>
 1c8:	ldp	x1, x8, [x23]
 1cc:	ldr	w2, [x23, #20]
 1d0:	mov	x0, x20
 1d4:	mov	x3, x22
 1d8:	mov	w4, w19
 1dc:	blr	x8
 1e0:	ldr	x0, [x23]
 1e4:	bl	0 <fflush>
 1e8:	mov	x0, x21
 1ec:	bl	0 <check_list_advance>
 1f0:	b	1a8 <srunner_send_evt+0x2c>
 1f4:	ldp	x20, x19, [sp, #48]
 1f8:	ldp	x22, x21, [sp, #32]
 1fc:	ldr	x23, [sp, #16]
 200:	ldp	x29, x30, [sp], #64
 204:	ret

0000000000000208 <log_srunner_end>:
 208:	mov	w2, #0x4                   	// #4
 20c:	mov	x1, xzr
 210:	b	17c <srunner_send_evt>

0000000000000214 <log_suite_start>:
 214:	mov	w2, #0x3                   	// #3
 218:	b	17c <srunner_send_evt>

000000000000021c <log_suite_end>:
 21c:	mov	w2, #0x5                   	// #5
 220:	b	17c <srunner_send_evt>

0000000000000224 <log_test_start>:
 224:	sub	sp, sp, #0x90
 228:	stp	x29, x30, [sp, #112]
 22c:	ldr	x8, [x2]
 230:	ldr	x3, [x1]
 234:	adrp	x2, 0 <srunner_set_log>
 238:	str	x19, [sp, #128]
 23c:	ldr	x4, [x8]
 240:	mov	x19, x0
 244:	add	x2, x2, #0x0
 248:	add	x0, sp, #0xc
 24c:	mov	w1, #0x63                  	// #99
 250:	add	x29, sp, #0x70
 254:	bl	0 <snprintf>
 258:	add	x1, sp, #0xc
 25c:	mov	w2, #0x6                   	// #6
 260:	mov	x0, x19
 264:	bl	17c <srunner_send_evt>
 268:	ldr	x19, [sp, #128]
 26c:	ldp	x29, x30, [sp, #112]
 270:	add	sp, sp, #0x90
 274:	ret

0000000000000278 <log_test_end>:
 278:	mov	w2, #0x7                   	// #7
 27c:	b	17c <srunner_send_evt>

0000000000000280 <stdout_lfun>:
 280:	stp	x29, x30, [sp, #-16]!
 284:	cmp	w4, #0x7
 288:	mov	x29, sp
 28c:	b.hi	308 <stdout_lfun+0x88>  // b.pmore
 290:	adrp	x10, 0 <srunner_set_log>
 294:	mov	w9, w4
 298:	add	x10, x10, #0x0
 29c:	adr	x11, 2b0 <stdout_lfun+0x30>
 2a0:	ldrb	w12, [x10, x9]
 2a4:	add	x11, x11, x12, lsl #2
 2a8:	mov	x8, x1
 2ac:	br	x11
 2b0:	ldp	x29, x30, [sp], #16
 2b4:	ret
 2b8:	cbz	w2, 2b0 <stdout_lfun+0x30>
 2bc:	mov	x1, x0
 2c0:	mov	x0, x8
 2c4:	ldp	x29, x30, [sp], #16
 2c8:	b	0 <srunner_fprint>
 2cc:	cbz	w2, 2b0 <stdout_lfun+0x30>
 2d0:	adrp	x0, 0 <srunner_set_log>
 2d4:	add	x0, x0, #0x0
 2d8:	mov	w1, #0x11                  	// #17
 2dc:	mov	w2, #0x1                   	// #1
 2e0:	mov	x3, x8
 2e4:	ldp	x29, x30, [sp], #16
 2e8:	b	0 <fwrite>
 2ec:	cbz	w2, 2b0 <stdout_lfun+0x30>
 2f0:	ldr	x2, [x3]
 2f4:	adrp	x1, 0 <srunner_set_log>
 2f8:	add	x1, x1, #0x0
 2fc:	mov	x0, x8
 300:	ldp	x29, x30, [sp], #16
 304:	b	0 <fprintf>
 308:	adrp	x0, 0 <srunner_set_log>
 30c:	adrp	x1, 0 <srunner_set_log>
 310:	add	x0, x0, #0x0
 314:	add	x1, x1, #0x0
 318:	mov	w2, #0xdc                  	// #220
 31c:	bl	0 <eprintf>

0000000000000320 <lfile_lfun>:
 320:	stp	x29, x30, [sp, #-32]!
 324:	cmp	w4, #0x7
 328:	stp	x20, x19, [sp, #16]
 32c:	mov	x29, sp
 330:	b.hi	3c8 <lfile_lfun+0xa8>  // b.pmore
 334:	adrp	x9, 0 <srunner_set_log>
 338:	mov	w8, w4
 33c:	add	x9, x9, #0x0
 340:	adr	x10, 354 <lfile_lfun+0x34>
 344:	ldrb	w11, [x9, x8]
 348:	add	x10, x10, x11, lsl #2
 34c:	mov	x19, x1
 350:	br	x10
 354:	ldp	x20, x19, [sp, #16]
 358:	ldp	x29, x30, [sp], #32
 35c:	ret
 360:	mov	x0, x19
 364:	ldp	x20, x19, [sp, #16]
 368:	mov	w2, #0x3                   	// #3
 36c:	mov	x1, x3
 370:	ldp	x29, x30, [sp], #32
 374:	b	0 <tr_fprint>
 378:	ldr	x2, [x3]
 37c:	mov	x0, x19
 380:	ldp	x20, x19, [sp, #16]
 384:	adrp	x1, 0 <srunner_set_log>
 388:	add	x1, x1, #0x0
 38c:	ldp	x29, x30, [sp], #32
 390:	b	0 <fprintf>
 394:	mov	x20, x0
 398:	adrp	x0, 0 <srunner_set_log>
 39c:	add	x0, x0, #0x0
 3a0:	mov	w1, #0x1c                  	// #28
 3a4:	mov	w2, #0x1                   	// #1
 3a8:	mov	x3, x19
 3ac:	bl	0 <fwrite>
 3b0:	mov	x0, x19
 3b4:	mov	x1, x20
 3b8:	ldp	x20, x19, [sp, #16]
 3bc:	mov	w2, #0x1                   	// #1
 3c0:	ldp	x29, x30, [sp], #32
 3c4:	b	0 <srunner_fprint>
 3c8:	adrp	x0, 0 <srunner_set_log>
 3cc:	adrp	x1, 0 <srunner_set_log>
 3d0:	add	x0, x0, #0x0
 3d4:	add	x1, x1, #0x0
 3d8:	mov	w2, #0x103                 	// #259
 3dc:	bl	0 <eprintf>

00000000000003e0 <xml_lfun>:
 3e0:	sub	sp, sp, #0x80
 3e4:	adrp	x8, 0 <srunner_set_log>
 3e8:	ldrb	w8, [x8]
 3ec:	str	x21, [sp, #96]
 3f0:	stp	x20, x19, [sp, #112]
 3f4:	mov	w21, w4
 3f8:	mov	x20, x3
 3fc:	mov	x19, x1
 400:	stp	x29, x30, [sp, #80]
 404:	add	x29, sp, #0x50
 408:	cbnz	w8, 454 <xml_lfun+0x74>
 40c:	sub	x0, x29, #0x10
 410:	mov	x1, xzr
 414:	bl	0 <gettimeofday>
 418:	bl	0 <check_get_clockid>
 41c:	adrp	x1, 0 <srunner_set_log>
 420:	add	x1, x1, #0x0
 424:	bl	0 <clock_gettime>
 428:	sub	x0, x29, #0x10
 42c:	add	x1, sp, #0x8
 430:	bl	0 <localtime_r>
 434:	cbz	x0, 454 <xml_lfun+0x74>
 438:	adrp	x0, 0 <srunner_set_log>
 43c:	adrp	x2, 0 <srunner_set_log>
 440:	add	x0, x0, #0x0
 444:	add	x2, x2, #0x0
 448:	add	x3, sp, #0x8
 44c:	mov	w1, #0x14                  	// #20
 450:	bl	0 <strftime>
 454:	cmp	w21, #0x7
 458:	b.hi	5a4 <xml_lfun+0x1c4>  // b.pmore
 45c:	adrp	x9, 0 <srunner_set_log>
 460:	mov	w8, w21
 464:	add	x9, x9, #0x0
 468:	adr	x10, 478 <xml_lfun+0x98>
 46c:	ldrb	w11, [x9, x8]
 470:	add	x10, x10, x11, lsl #2
 474:	br	x10
 478:	adrp	x1, 0 <srunner_set_log>
 47c:	adrp	x2, 0 <srunner_set_log>
 480:	add	x1, x1, #0x0
 484:	add	x2, x2, #0x0
 488:	mov	x0, x19
 48c:	bl	0 <fprintf>
 490:	b	590 <xml_lfun+0x1b0>
 494:	stp	xzr, xzr, [sp, #8]
 498:	bl	0 <check_get_clockid>
 49c:	add	x1, sp, #0x8
 4a0:	bl	0 <clock_gettime>
 4a4:	adrp	x8, 0 <srunner_set_log>
 4a8:	add	x8, x8, #0x0
 4ac:	ldp	x9, x10, [sp, #8]
 4b0:	ldp	x12, x8, [x8]
 4b4:	mov	x11, #0xf7cf                	// #63439
 4b8:	movk	x11, #0xe353, lsl #16
 4bc:	movk	x11, #0x9ba5, lsl #32
 4c0:	sub	x9, x9, x12
 4c4:	mov	x12, #0x831                 	// #2097
 4c8:	movk	x12, #0x1cac, lsl #16
 4cc:	movk	x11, #0x20c4, lsl #48
 4d0:	movk	x12, #0x645a, lsl #32
 4d4:	smulh	x10, x10, x11
 4d8:	movk	x12, #0xdf3b, lsl #48
 4dc:	mov	w11, #0x4240                	// #16960
 4e0:	smulh	x8, x8, x12
 4e4:	asr	x12, x10, #7
 4e8:	movk	w11, #0xf, lsl #16
 4ec:	add	x10, x12, x10, lsr #63
 4f0:	asr	x12, x8, #7
 4f4:	madd	x9, x9, x11, x10
 4f8:	add	x8, x12, x8, lsr #63
 4fc:	add	x8, x9, x8
 500:	mov	x9, #0x34db                	// #13531
 504:	movk	x9, #0xd7b6, lsl #16
 508:	movk	x9, #0xde82, lsl #32
 50c:	movk	x9, #0x431b, lsl #48
 510:	umulh	x9, x8, x9
 514:	lsr	x2, x9, #18
 518:	adrp	x1, 0 <srunner_set_log>
 51c:	msub	x3, x2, x11, x8
 520:	add	x1, x1, #0x0
 524:	mov	x0, x19
 528:	bl	0 <fprintf>
 52c:	b	590 <xml_lfun+0x1b0>
 530:	mov	w2, #0x3                   	// #3
 534:	mov	x0, x19
 538:	mov	x1, x20
 53c:	bl	0 <tr_xmlprint>
 540:	b	590 <xml_lfun+0x1b0>
 544:	adrp	x0, 0 <srunner_set_log>
 548:	add	x0, x0, #0x0
 54c:	mov	w1, #0x15                  	// #21
 550:	mov	w2, #0x1                   	// #1
 554:	mov	x3, x19
 558:	bl	0 <fwrite>
 55c:	ldr	x1, [x20]
 560:	mov	x0, x19
 564:	bl	0 <fprint_xml_esc>
 568:	adrp	x0, 0 <srunner_set_log>
 56c:	add	x0, x0, #0x0
 570:	mov	w1, #0x9                   	// #9
 574:	b	584 <xml_lfun+0x1a4>
 578:	adrp	x0, 0 <srunner_set_log>
 57c:	add	x0, x0, #0x0
 580:	mov	w1, #0xb                   	// #11
 584:	mov	w2, #0x1                   	// #1
 588:	mov	x3, x19
 58c:	bl	0 <fwrite>
 590:	ldp	x20, x19, [sp, #112]
 594:	ldr	x21, [sp, #96]
 598:	ldp	x29, x30, [sp, #80]
 59c:	add	sp, sp, #0x80
 5a0:	ret
 5a4:	adrp	x0, 0 <srunner_set_log>
 5a8:	adrp	x1, 0 <srunner_set_log>
 5ac:	add	x0, x0, #0x0
 5b0:	add	x1, x1, #0x0
 5b4:	mov	w2, #0x14f                 	// #335
 5b8:	bl	0 <eprintf>

00000000000005bc <tap_lfun>:
 5bc:	stp	x29, x30, [sp, #-32]!
 5c0:	cmp	w4, #0x7
 5c4:	str	x19, [sp, #16]
 5c8:	mov	x29, sp
 5cc:	b.hi	680 <tap_lfun+0xc4>  // b.pmore
 5d0:	adrp	x9, 0 <srunner_set_log>
 5d4:	mov	w8, w4
 5d8:	add	x9, x9, #0x0
 5dc:	adr	x10, 5f0 <tap_lfun+0x34>
 5e0:	ldrb	w11, [x9, x8]
 5e4:	add	x10, x10, x11, lsl #2
 5e8:	mov	x19, x1
 5ec:	br	x10
 5f0:	ldr	x19, [sp, #16]
 5f4:	ldp	x29, x30, [sp], #32
 5f8:	ret
 5fc:	adrp	x9, 0 <srunner_set_log>
 600:	ldr	w8, [x9]
 604:	adrp	x10, 0 <srunner_set_log>
 608:	adrp	x11, 0 <srunner_set_log>
 60c:	add	x10, x10, #0x0
 610:	add	w8, w8, #0x1
 614:	str	w8, [x9]
 618:	ldr	w9, [x3]
 61c:	ldr	x4, [x3, #8]
 620:	ldp	x5, x6, [x3, #32]
 624:	ldr	x7, [x3, #48]
 628:	add	x11, x11, #0x0
 62c:	cmp	w9, #0x1
 630:	adrp	x1, 0 <srunner_set_log>
 634:	csel	x2, x11, x10, eq  // eq = none
 638:	add	x1, x1, #0x0
 63c:	mov	x0, x19
 640:	mov	w3, w8
 644:	bl	0 <fprintf>
 648:	b	670 <tap_lfun+0xb4>
 64c:	adrp	x8, 0 <srunner_set_log>
 650:	str	wzr, [x8]
 654:	b	5f0 <tap_lfun+0x34>
 658:	adrp	x8, 0 <srunner_set_log>
 65c:	ldr	w2, [x8]
 660:	adrp	x1, 0 <srunner_set_log>
 664:	add	x1, x1, #0x0
 668:	mov	x0, x19
 66c:	bl	0 <fprintf>
 670:	mov	x0, x19
 674:	ldr	x19, [sp, #16]
 678:	ldp	x29, x30, [sp], #32
 67c:	b	0 <fflush>
 680:	adrp	x0, 0 <srunner_set_log>
 684:	adrp	x1, 0 <srunner_set_log>
 688:	add	x0, x0, #0x0
 68c:	add	x1, x1, #0x0
 690:	mov	w2, #0x17c                 	// #380
 694:	bl	0 <eprintf>

0000000000000698 <srunner_open_lfile>:
 698:	stp	x29, x30, [sp, #-32]!
 69c:	str	x19, [sp, #16]
 6a0:	ldr	x19, [x0, #24]
 6a4:	mov	x29, sp
 6a8:	cbnz	x19, 6c0 <srunner_open_lfile+0x28>
 6ac:	adrp	x0, 0 <srunner_set_log>
 6b0:	add	x0, x0, #0x0
 6b4:	bl	0 <getenv>
 6b8:	mov	x19, x0
 6bc:	cbz	x0, 70c <srunner_open_lfile+0x74>
 6c0:	adrp	x1, 0 <srunner_set_log>
 6c4:	add	x1, x1, #0x0
 6c8:	mov	x0, x19
 6cc:	bl	0 <strcmp>
 6d0:	cbz	w0, 704 <srunner_open_lfile+0x6c>
 6d4:	adrp	x1, 0 <srunner_set_log>
 6d8:	add	x1, x1, #0x0
 6dc:	mov	x0, x19
 6e0:	bl	0 <fopen>
 6e4:	cbnz	x0, 70c <srunner_open_lfile+0x74>
 6e8:	adrp	x0, 0 <srunner_set_log>
 6ec:	adrp	x1, 0 <srunner_set_log>
 6f0:	add	x0, x0, #0x0
 6f4:	add	x1, x1, #0x0
 6f8:	mov	w2, #0x1cd                 	// #461
 6fc:	mov	x3, x19
 700:	bl	0 <eprintf>
 704:	adrp	x8, 0 <stdout>
 708:	ldr	x0, [x8]
 70c:	ldr	x19, [sp, #16]
 710:	ldp	x29, x30, [sp], #32
 714:	ret

0000000000000718 <srunner_open_xmlfile>:
 718:	stp	x29, x30, [sp, #-32]!
 71c:	str	x19, [sp, #16]
 720:	ldr	x19, [x0, #32]
 724:	mov	x29, sp
 728:	cbnz	x19, 740 <srunner_open_xmlfile+0x28>
 72c:	adrp	x0, 0 <srunner_set_log>
 730:	add	x0, x0, #0x0
 734:	bl	0 <getenv>
 738:	mov	x19, x0
 73c:	cbz	x0, 78c <srunner_open_xmlfile+0x74>
 740:	adrp	x1, 0 <srunner_set_log>
 744:	add	x1, x1, #0x0
 748:	mov	x0, x19
 74c:	bl	0 <strcmp>
 750:	cbz	w0, 784 <srunner_open_xmlfile+0x6c>
 754:	adrp	x1, 0 <srunner_set_log>
 758:	add	x1, x1, #0x0
 75c:	mov	x0, x19
 760:	bl	0 <fopen>
 764:	cbnz	x0, 78c <srunner_open_xmlfile+0x74>
 768:	adrp	x0, 0 <srunner_set_log>
 76c:	adrp	x1, 0 <srunner_set_log>
 770:	add	x0, x0, #0x0
 774:	add	x1, x1, #0x0
 778:	mov	w2, #0x1cd                 	// #461
 77c:	mov	x3, x19
 780:	bl	0 <eprintf>
 784:	adrp	x8, 0 <stdout>
 788:	ldr	x0, [x8]
 78c:	ldr	x19, [sp, #16]
 790:	ldp	x29, x30, [sp], #32
 794:	ret

0000000000000798 <srunner_open_tapfile>:
 798:	stp	x29, x30, [sp, #-32]!
 79c:	str	x19, [sp, #16]
 7a0:	ldr	x19, [x0, #40]
 7a4:	mov	x29, sp
 7a8:	cbnz	x19, 7c0 <srunner_open_tapfile+0x28>
 7ac:	adrp	x0, 0 <srunner_set_log>
 7b0:	add	x0, x0, #0x0
 7b4:	bl	0 <getenv>
 7b8:	mov	x19, x0
 7bc:	cbz	x0, 80c <srunner_open_tapfile+0x74>
 7c0:	adrp	x1, 0 <srunner_set_log>
 7c4:	add	x1, x1, #0x0
 7c8:	mov	x0, x19
 7cc:	bl	0 <strcmp>
 7d0:	cbz	w0, 804 <srunner_open_tapfile+0x6c>
 7d4:	adrp	x1, 0 <srunner_set_log>
 7d8:	add	x1, x1, #0x0
 7dc:	mov	x0, x19
 7e0:	bl	0 <fopen>
 7e4:	cbnz	x0, 80c <srunner_open_tapfile+0x74>
 7e8:	adrp	x0, 0 <srunner_set_log>
 7ec:	adrp	x1, 0 <srunner_set_log>
 7f0:	add	x0, x0, #0x0
 7f4:	add	x1, x1, #0x0
 7f8:	mov	w2, #0x1cd                 	// #461
 7fc:	mov	x3, x19
 800:	bl	0 <eprintf>
 804:	adrp	x8, 0 <stdout>
 808:	ldr	x0, [x8]
 80c:	ldr	x19, [sp, #16]
 810:	ldp	x29, x30, [sp], #32
 814:	ret

0000000000000818 <srunner_init_logging>:
 818:	stp	x29, x30, [sp, #-64]!
 81c:	stp	x24, x23, [sp, #16]
 820:	stp	x22, x21, [sp, #32]
 824:	stp	x20, x19, [sp, #48]
 828:	mov	x29, sp
 82c:	mov	w20, w1
 830:	mov	x19, x0
 834:	bl	0 <check_list_create>
 838:	str	x0, [x19, #48]
 83c:	adrp	x23, 0 <stdout>
 840:	ldr	x22, [x23]
 844:	mov	w0, #0x18                  	// #24
 848:	bl	0 <emalloc>
 84c:	mov	x21, x0
 850:	cmp	w20, #0x4
 854:	mov	w0, w20
 858:	b.ne	860 <srunner_init_logging+0x48>  // b.any
 85c:	bl	0 <get_env_printmode>
 860:	adrp	x8, 280 <stdout_lfun>
 864:	add	x8, x8, #0x0
 868:	stp	x22, x8, [x21]
 86c:	stp	wzr, w0, [x21, #16]
 870:	ldr	x0, [x19, #48]
 874:	mov	x1, x21
 878:	bl	0 <check_list_add_end>
 87c:	ldr	x22, [x19, #24]
 880:	cbnz	x22, 898 <srunner_init_logging+0x80>
 884:	adrp	x0, 0 <srunner_set_log>
 888:	add	x0, x0, #0x0
 88c:	bl	0 <getenv>
 890:	mov	x22, x0
 894:	cbz	x0, 918 <srunner_init_logging+0x100>
 898:	adrp	x1, 0 <srunner_set_log>
 89c:	add	x1, x1, #0x0
 8a0:	mov	x0, x22
 8a4:	bl	0 <strcmp>
 8a8:	cbz	w0, 8cc <srunner_init_logging+0xb4>
 8ac:	adrp	x1, 0 <srunner_set_log>
 8b0:	add	x1, x1, #0x0
 8b4:	mov	x0, x22
 8b8:	bl	0 <fopen>
 8bc:	cbz	x0, a70 <srunner_init_logging+0x258>
 8c0:	ldr	x8, [x23]
 8c4:	mov	x21, x0
 8c8:	b	8d8 <srunner_init_logging+0xc0>
 8cc:	ldr	x8, [x23]
 8d0:	mov	x21, x8
 8d4:	cbz	x8, 918 <srunner_init_logging+0x100>
 8d8:	cmp	x21, x8
 8dc:	mov	w0, #0x18                  	// #24
 8e0:	cset	w24, ne  // ne = any
 8e4:	bl	0 <emalloc>
 8e8:	mov	x22, x0
 8ec:	cmp	w20, #0x4
 8f0:	mov	w0, w20
 8f4:	b.ne	8fc <srunner_init_logging+0xe4>  // b.any
 8f8:	bl	0 <get_env_printmode>
 8fc:	adrp	x8, 320 <lfile_lfun>
 900:	add	x8, x8, #0x0
 904:	stp	x21, x8, [x22]
 908:	stp	w24, w0, [x22, #16]
 90c:	ldr	x0, [x19, #48]
 910:	mov	x1, x22
 914:	bl	0 <check_list_add_end>
 918:	ldr	x22, [x19, #32]
 91c:	cbnz	x22, 934 <srunner_init_logging+0x11c>
 920:	adrp	x0, 0 <srunner_set_log>
 924:	add	x0, x0, #0x0
 928:	bl	0 <getenv>
 92c:	mov	x22, x0
 930:	cbz	x0, 9b4 <srunner_init_logging+0x19c>
 934:	adrp	x1, 0 <srunner_set_log>
 938:	add	x1, x1, #0x0
 93c:	mov	x0, x22
 940:	bl	0 <strcmp>
 944:	cbz	w0, 968 <srunner_init_logging+0x150>
 948:	adrp	x1, 0 <srunner_set_log>
 94c:	add	x1, x1, #0x0
 950:	mov	x0, x22
 954:	bl	0 <fopen>
 958:	cbz	x0, a70 <srunner_init_logging+0x258>
 95c:	ldr	x8, [x23]
 960:	mov	x21, x0
 964:	b	974 <srunner_init_logging+0x15c>
 968:	ldr	x8, [x23]
 96c:	mov	x21, x8
 970:	cbz	x8, 9b4 <srunner_init_logging+0x19c>
 974:	cmp	x21, x8
 978:	mov	w0, #0x18                  	// #24
 97c:	cset	w24, ne  // ne = any
 980:	bl	0 <emalloc>
 984:	mov	x22, x0
 988:	cmp	w20, #0x4
 98c:	mov	w0, w20
 990:	b.ne	998 <srunner_init_logging+0x180>  // b.any
 994:	bl	0 <get_env_printmode>
 998:	adrp	x8, 3e0 <xml_lfun>
 99c:	add	x8, x8, #0x0
 9a0:	stp	x21, x8, [x22]
 9a4:	stp	w24, w0, [x22, #16]
 9a8:	ldr	x0, [x19, #48]
 9ac:	mov	x1, x22
 9b0:	bl	0 <check_list_add_end>
 9b4:	ldr	x22, [x19, #40]
 9b8:	cbnz	x22, 9d0 <srunner_init_logging+0x1b8>
 9bc:	adrp	x0, 0 <srunner_set_log>
 9c0:	add	x0, x0, #0x0
 9c4:	bl	0 <getenv>
 9c8:	mov	x22, x0
 9cc:	cbz	x0, a50 <srunner_init_logging+0x238>
 9d0:	adrp	x1, 0 <srunner_set_log>
 9d4:	add	x1, x1, #0x0
 9d8:	mov	x0, x22
 9dc:	bl	0 <strcmp>
 9e0:	cbz	w0, a04 <srunner_init_logging+0x1ec>
 9e4:	adrp	x1, 0 <srunner_set_log>
 9e8:	add	x1, x1, #0x0
 9ec:	mov	x0, x22
 9f0:	bl	0 <fopen>
 9f4:	cbz	x0, a70 <srunner_init_logging+0x258>
 9f8:	ldr	x8, [x23]
 9fc:	mov	x21, x0
 a00:	b	a10 <srunner_init_logging+0x1f8>
 a04:	ldr	x8, [x23]
 a08:	mov	x21, x8
 a0c:	cbz	x8, a50 <srunner_init_logging+0x238>
 a10:	cmp	x21, x8
 a14:	mov	w0, #0x18                  	// #24
 a18:	cset	w23, ne  // ne = any
 a1c:	bl	0 <emalloc>
 a20:	cmp	w20, #0x4
 a24:	mov	x22, x0
 a28:	b.ne	a34 <srunner_init_logging+0x21c>  // b.any
 a2c:	bl	0 <get_env_printmode>
 a30:	mov	w20, w0
 a34:	adrp	x8, 5bc <tap_lfun>
 a38:	add	x8, x8, #0x0
 a3c:	stp	x21, x8, [x22]
 a40:	stp	w23, w20, [x22, #16]
 a44:	ldr	x0, [x19, #48]
 a48:	mov	x1, x22
 a4c:	bl	0 <check_list_add_end>
 a50:	mov	x0, x19
 a54:	ldp	x20, x19, [sp, #48]
 a58:	ldp	x22, x21, [sp, #32]
 a5c:	ldp	x24, x23, [sp, #16]
 a60:	mov	x1, xzr
 a64:	mov	w2, wzr
 a68:	ldp	x29, x30, [sp], #64
 a6c:	b	17c <srunner_send_evt>
 a70:	adrp	x0, 0 <srunner_set_log>
 a74:	adrp	x1, 0 <srunner_set_log>
 a78:	add	x0, x0, #0x0
 a7c:	add	x1, x1, #0x0
 a80:	mov	w2, #0x1cd                 	// #461
 a84:	mov	x3, x22
 a88:	bl	0 <eprintf>

0000000000000a8c <srunner_end_logging>:
 a8c:	stp	x29, x30, [sp, #-48]!
 a90:	mov	w2, #0x1                   	// #1
 a94:	mov	x1, xzr
 a98:	str	x21, [sp, #16]
 a9c:	stp	x20, x19, [sp, #32]
 aa0:	mov	x29, sp
 aa4:	mov	x19, x0
 aa8:	bl	17c <srunner_send_evt>
 aac:	ldr	x20, [x19, #48]
 ab0:	mov	x0, x20
 ab4:	bl	0 <check_list_front>
 ab8:	b	acc <srunner_end_logging+0x40>
 abc:	mov	x0, x21
 ac0:	bl	0 <free>
 ac4:	mov	x0, x20
 ac8:	bl	0 <check_list_advance>
 acc:	mov	x0, x20
 ad0:	bl	0 <check_list_at_end>
 ad4:	cbnz	w0, b10 <srunner_end_logging+0x84>
 ad8:	mov	x0, x20
 adc:	bl	0 <check_list_val>
 ae0:	ldr	w8, [x0, #16]
 ae4:	mov	x21, x0
 ae8:	cbz	w8, abc <srunner_end_logging+0x30>
 aec:	ldr	x0, [x21]
 af0:	bl	0 <fclose>
 af4:	cbz	w0, abc <srunner_end_logging+0x30>
 af8:	adrp	x0, 0 <srunner_set_log>
 afc:	adrp	x1, 0 <srunner_set_log>
 b00:	add	x0, x0, #0x0
 b04:	add	x1, x1, #0x0
 b08:	mov	w2, #0x224                 	// #548
 b0c:	bl	0 <eprintf>
 b10:	mov	x0, x20
 b14:	bl	0 <check_list_free>
 b18:	str	xzr, [x19, #48]
 b1c:	ldp	x20, x19, [sp, #32]
 b20:	ldr	x21, [sp, #16]
 b24:	ldp	x29, x30, [sp], #48
 b28:	ret

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <send_failure_info>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	bl	0 <strdup>
  10:	adrp	x8, 0 <send_failure_info>
  14:	ldr	x8, [x8]
  18:	str	x0, [sp, #8]
  1c:	cbnz	x8, 2c <send_failure_info+0x2c>
  20:	adrp	x8, 0 <send_failure_info>
  24:	ldr	x8, [x8]
  28:	cbz	x8, 50 <send_failure_info+0x50>
  2c:	add	x2, sp, #0x8
  30:	mov	w1, #0x1                   	// #1
  34:	mov	x0, x8
  38:	bl	0 <ppack>
  3c:	ldr	x0, [sp, #8]
  40:	bl	0 <free>
  44:	ldp	x29, x30, [sp, #16]
  48:	add	sp, sp, #0x20
  4c:	ret
  50:	adrp	x0, 0 <send_failure_info>
  54:	adrp	x1, 0 <send_failure_info>
  58:	add	x0, x0, #0x0
  5c:	add	x1, x1, #0x0
  60:	mov	w2, #0x50                  	// #80
  64:	bl	0 <eprintf>

0000000000000068 <send_duration_info>:
  68:	sub	sp, sp, #0x20
  6c:	adrp	x8, 0 <send_failure_info>
  70:	ldr	x8, [x8]
  74:	stp	x29, x30, [sp, #16]
  78:	add	x29, sp, #0x10
  7c:	str	w0, [sp, #8]
  80:	cbnz	x8, 90 <send_duration_info+0x28>
  84:	adrp	x8, 0 <send_failure_info>
  88:	ldr	x8, [x8]
  8c:	cbz	x8, ac <send_duration_info+0x44>
  90:	add	x2, sp, #0x8
  94:	mov	w1, #0x3                   	// #3
  98:	mov	x0, x8
  9c:	bl	0 <ppack>
  a0:	ldp	x29, x30, [sp, #16]
  a4:	add	sp, sp, #0x20
  a8:	ret
  ac:	adrp	x0, 0 <send_failure_info>
  b0:	adrp	x1, 0 <send_failure_info>
  b4:	add	x0, x0, #0x0
  b8:	add	x1, x1, #0x0
  bc:	mov	w2, #0x50                  	// #80
  c0:	bl	0 <eprintf>

00000000000000c4 <send_loc_info>:
  c4:	sub	sp, sp, #0x30
  c8:	stp	x29, x30, [sp, #16]
  cc:	str	x19, [sp, #32]
  d0:	add	x29, sp, #0x10
  d4:	mov	w19, w1
  d8:	bl	0 <strdup>
  dc:	adrp	x9, 0 <send_failure_info>
  e0:	mov	x8, x0
  e4:	ldr	x0, [x9]
  e8:	str	x8, [sp, #8]
  ec:	str	w19, [sp]
  f0:	cbnz	x0, 100 <send_loc_info+0x3c>
  f4:	adrp	x8, 0 <send_failure_info>
  f8:	ldr	x0, [x8]
  fc:	cbz	x0, 124 <send_loc_info+0x60>
 100:	mov	x2, sp
 104:	mov	w1, #0x2                   	// #2
 108:	bl	0 <ppack>
 10c:	ldr	x0, [sp, #8]
 110:	bl	0 <free>
 114:	ldr	x19, [sp, #32]
 118:	ldp	x29, x30, [sp, #16]
 11c:	add	sp, sp, #0x30
 120:	ret
 124:	adrp	x0, 0 <send_failure_info>
 128:	adrp	x1, 0 <send_failure_info>
 12c:	add	x0, x0, #0x0
 130:	add	x1, x1, #0x0
 134:	mov	w2, #0x50                  	// #80
 138:	bl	0 <eprintf>

000000000000013c <send_ctx_info>:
 13c:	sub	sp, sp, #0x20
 140:	adrp	x8, 0 <send_failure_info>
 144:	ldr	x8, [x8]
 148:	stp	x29, x30, [sp, #16]
 14c:	add	x29, sp, #0x10
 150:	str	w0, [sp, #8]
 154:	cbnz	x8, 164 <send_ctx_info+0x28>
 158:	adrp	x8, 0 <send_failure_info>
 15c:	ldr	x8, [x8]
 160:	cbz	x8, 180 <send_ctx_info+0x44>
 164:	add	x2, sp, #0x8
 168:	mov	x0, x8
 16c:	mov	w1, wzr
 170:	bl	0 <ppack>
 174:	ldp	x29, x30, [sp, #16]
 178:	add	sp, sp, #0x20
 17c:	ret
 180:	adrp	x0, 0 <send_failure_info>
 184:	adrp	x1, 0 <send_failure_info>
 188:	add	x0, x0, #0x0
 18c:	add	x1, x1, #0x0
 190:	mov	w2, #0x50                  	// #80
 194:	bl	0 <eprintf>

0000000000000198 <receive_test_result>:
 198:	stp	x29, x30, [sp, #-48]!
 19c:	adrp	x8, 0 <send_failure_info>
 1a0:	stp	x20, x19, [sp, #32]
 1a4:	ldr	x19, [x8]
 1a8:	str	x21, [sp, #16]
 1ac:	mov	w21, w0
 1b0:	mov	x29, sp
 1b4:	cbnz	x19, 1c4 <receive_test_result+0x2c>
 1b8:	adrp	x8, 0 <send_failure_info>
 1bc:	ldr	x19, [x8]
 1c0:	cbz	x19, 2b8 <receive_test_result+0x120>
 1c4:	mov	x0, x19
 1c8:	bl	0 <rewind>
 1cc:	mov	x0, x19
 1d0:	bl	0 <punpack>
 1d4:	cbz	x0, 2a0 <receive_test_result+0x108>
 1d8:	mov	x19, x0
 1dc:	bl	2d0 <teardown_pipe>
 1e0:	bl	364 <setup_pipe>
 1e4:	bl	0 <tr_create>
 1e8:	mov	x20, x0
 1ec:	cbnz	w21, 21c <receive_test_result+0x84>
 1f0:	ldr	x8, [x19, #40]
 1f4:	cbnz	x8, 21c <receive_test_result+0x84>
 1f8:	ldr	w8, [x19]
 1fc:	cmp	w8, #0x1
 200:	b.ne	24c <receive_test_result+0xb4>  // b.any
 204:	mov	w9, #0x1                   	// #1
 208:	str	xzr, [x20, #48]
 20c:	mov	x8, x19
 210:	str	w9, [x20, #4]
 214:	ldr	x9, [x8, #8]!
 218:	b	268 <receive_test_result+0xd0>
 21c:	ldr	w8, [x19, #4]
 220:	cbnz	w8, 228 <receive_test_result+0x90>
 224:	ldr	w8, [x19]
 228:	str	w8, [x20, #4]
 22c:	ldr	x9, [x19, #40]
 230:	cmp	w8, #0x2
 234:	mov	x8, x19
 238:	str	x9, [x20, #48]
 23c:	str	xzr, [x19, #40]
 240:	b.eq	264 <receive_test_result+0xcc>  // b.none
 244:	ldr	x9, [x8, #8]!
 248:	b	268 <receive_test_result+0xd0>
 24c:	mov	w8, #0x2                   	// #2
 250:	str	xzr, [x20, #48]
 254:	str	w8, [x20, #4]
 258:	ldr	w9, [x19, #48]
 25c:	mov	x8, x19
 260:	str	w9, [x20, #24]
 264:	ldr	x9, [x8, #24]!
 268:	str	x9, [x20, #8]
 26c:	add	x9, x8, #0x8
 270:	ldr	w10, [x9]
 274:	str	xzr, [x8]
 278:	mov	w8, #0xffffffff            	// #-1
 27c:	mov	x0, x19
 280:	str	w8, [x9]
 284:	str	w10, [x20, #16]
 288:	bl	0 <rcvmsg_free>
 28c:	mov	x0, x20
 290:	ldp	x20, x19, [sp, #32]
 294:	ldr	x21, [sp, #16]
 298:	ldp	x29, x30, [sp], #48
 29c:	ret
 2a0:	adrp	x0, 0 <send_failure_info>
 2a4:	adrp	x1, 0 <send_failure_info>
 2a8:	add	x0, x0, #0x0
 2ac:	add	x1, x1, #0x0
 2b0:	mov	w2, #0x85                  	// #133
 2b4:	bl	0 <eprintf>
 2b8:	adrp	x0, 0 <send_failure_info>
 2bc:	adrp	x1, 0 <send_failure_info>
 2c0:	add	x0, x0, #0x0
 2c4:	add	x1, x1, #0x0
 2c8:	mov	w2, #0x50                  	// #80
 2cc:	bl	0 <eprintf>

00000000000002d0 <teardown_pipe>:
 2d0:	stp	x29, x30, [sp, #-32]!
 2d4:	stp	x20, x19, [sp, #16]
 2d8:	adrp	x20, 0 <send_failure_info>
 2dc:	ldr	x0, [x20]
 2e0:	mov	x29, sp
 2e4:	cbz	x0, 310 <teardown_pipe+0x40>
 2e8:	bl	0 <fclose>
 2ec:	adrp	x19, 0 <send_failure_info>
 2f0:	ldr	x0, [x19]
 2f4:	str	xzr, [x20]
 2f8:	cbz	x0, 340 <teardown_pipe+0x70>
 2fc:	bl	0 <unlink>
 300:	ldr	x0, [x19]
 304:	bl	0 <free>
 308:	str	xzr, [x19]
 30c:	b	340 <teardown_pipe+0x70>
 310:	adrp	x20, 0 <send_failure_info>
 314:	ldr	x0, [x20]
 318:	cbz	x0, 34c <teardown_pipe+0x7c>
 31c:	bl	0 <fclose>
 320:	adrp	x19, 0 <send_failure_info>
 324:	ldr	x0, [x19]
 328:	str	xzr, [x20]
 32c:	cbz	x0, 340 <teardown_pipe+0x70>
 330:	bl	0 <unlink>
 334:	ldr	x0, [x19]
 338:	bl	0 <free>
 33c:	str	xzr, [x19]
 340:	ldp	x20, x19, [sp, #16]
 344:	ldp	x29, x30, [sp], #32
 348:	ret
 34c:	adrp	x0, 0 <send_failure_info>
 350:	adrp	x1, 0 <send_failure_info>
 354:	add	x0, x0, #0x0
 358:	add	x1, x1, #0x0
 35c:	mov	w2, #0x16a                 	// #362
 360:	bl	0 <eprintf>

0000000000000364 <setup_pipe>:
 364:	stp	x29, x30, [sp, #-32]!
 368:	str	x19, [sp, #16]
 36c:	adrp	x19, 0 <send_failure_info>
 370:	ldr	x8, [x19]
 374:	mov	x29, sp
 378:	cbz	x8, 3b4 <setup_pipe+0x50>
 37c:	adrp	x19, 0 <send_failure_info>
 380:	ldr	x8, [x19]
 384:	cbnz	x8, 3d4 <setup_pipe+0x70>
 388:	adrp	x0, 0 <send_failure_info>
 38c:	add	x0, x0, #0x0
 390:	bl	40c <open_tmp_file>
 394:	str	x0, [x19]
 398:	cbnz	x0, 3c8 <setup_pipe+0x64>
 39c:	adrp	x0, 0 <send_failure_info>
 3a0:	adrp	x1, 0 <send_failure_info>
 3a4:	add	x0, x0, #0x0
 3a8:	add	x1, x1, #0x0
 3ac:	mov	w2, #0x146                 	// #326
 3b0:	bl	0 <eprintf>
 3b4:	adrp	x0, 0 <send_failure_info>
 3b8:	add	x0, x0, #0x0
 3bc:	bl	40c <open_tmp_file>
 3c0:	str	x0, [x19]
 3c4:	cbz	x0, 3ec <setup_pipe+0x88>
 3c8:	ldr	x19, [sp, #16]
 3cc:	ldp	x29, x30, [sp], #32
 3d0:	ret
 3d4:	adrp	x0, 0 <send_failure_info>
 3d8:	adrp	x1, 0 <send_failure_info>
 3dc:	add	x0, x0, #0x0
 3e0:	add	x1, x1, #0x0
 3e4:	mov	w2, #0x14d                 	// #333
 3e8:	bl	0 <eprintf>
 3ec:	adrp	x0, 0 <send_failure_info>
 3f0:	adrp	x1, 0 <send_failure_info>
 3f4:	add	x0, x0, #0x0
 3f8:	add	x1, x1, #0x0
 3fc:	mov	w2, #0x13d                 	// #317
 400:	bl	0 <eprintf>

0000000000000404 <setup_messaging>:
 404:	b	364 <setup_pipe>

0000000000000408 <teardown_messaging>:
 408:	b	2d0 <teardown_pipe>

000000000000040c <open_tmp_file>:
 40c:	stp	x29, x30, [sp, #-32]!
 410:	stp	x20, x19, [sp, #16]
 414:	mov	x19, x0
 418:	str	xzr, [x0]
 41c:	adrp	x0, 0 <send_failure_info>
 420:	add	x0, x0, #0x0
 424:	mov	x29, sp
 428:	bl	0 <getenv>
 42c:	adrp	x8, 0 <send_failure_info>
 430:	add	x8, x8, #0x0
 434:	cmp	x0, #0x0
 438:	csel	x1, x8, x0, eq  // eq = none
 43c:	adrp	x0, 0 <send_failure_info>
 440:	add	x0, x0, #0x0
 444:	bl	0 <ck_strdup_printf>
 448:	str	x0, [x19]
 44c:	bl	0 <mkstemp>
 450:	tbnz	w0, #31, 488 <open_tmp_file+0x7c>
 454:	adrp	x1, 0 <send_failure_info>
 458:	add	x1, x1, #0x0
 45c:	bl	0 <fdopen>
 460:	ldr	x8, [x19]
 464:	mov	x20, x0
 468:	mov	x0, x8
 46c:	bl	0 <unlink>
 470:	cbz	x20, 478 <open_tmp_file+0x6c>
 474:	cbnz	w0, 48c <open_tmp_file+0x80>
 478:	ldr	x0, [x19]
 47c:	bl	0 <free>
 480:	str	xzr, [x19]
 484:	b	48c <open_tmp_file+0x80>
 488:	mov	x20, xzr
 48c:	mov	x0, x20
 490:	ldp	x20, x19, [sp, #16]
 494:	ldp	x29, x30, [sp], #32
 498:	ret

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <check_set_max_msg_size>:
   0:	adrp	x8, 0 <check_set_max_msg_size>
   4:	str	x0, [x8]
   8:	ret

000000000000000c <pack>:
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	cbz	x1, 44 <pack+0x38>
  18:	cbz	x2, 50 <pack+0x44>
  1c:	mov	w3, w0
  20:	cmp	w0, #0x4
  24:	b.cs	5c <pack+0x50>  // b.hs, b.nlast
  28:	adrp	x8, 0 <check_set_max_msg_size>
  2c:	add	x8, x8, #0x0
  30:	ldr	x3, [x8, w3, uxtw #3]
  34:	mov	x0, x1
  38:	mov	x1, x2
  3c:	ldp	x29, x30, [sp], #16
  40:	br	x3
  44:	mov	w0, #0xffffffff            	// #-1
  48:	ldp	x29, x30, [sp], #16
  4c:	ret
  50:	mov	w0, wzr
  54:	ldp	x29, x30, [sp], #16
  58:	ret
  5c:	adrp	x0, 0 <check_set_max_msg_size>
  60:	adrp	x1, 0 <check_set_max_msg_size>
  64:	add	x0, x0, #0x0
  68:	add	x1, x1, #0x0
  6c:	mov	w2, #0x7e                  	// #126
  70:	bl	0 <eprintf>

0000000000000074 <upack>:
  74:	stp	x29, x30, [sp, #-32]!
  78:	mov	x29, sp
  7c:	str	x19, [sp, #16]
  80:	str	x0, [x29, #24]
  84:	cbz	x0, cc <upack+0x58>
  88:	mov	x8, x0
  8c:	ldr	w9, [x8], #4
  90:	mov	x19, x0
  94:	lsl	x9, x9, #32
  98:	rev	x3, x9
  9c:	cmp	w3, #0x4
  a0:	str	x8, [x29, #24]
  a4:	str	w3, [x2]
  a8:	b.cs	dc <upack+0x68>  // b.hs, b.nlast
  ac:	adrp	x8, 0 <check_set_max_msg_size>
  b0:	add	x8, x8, #0x0
  b4:	ldr	x8, [x8, x3, lsl #3]
  b8:	add	x0, x29, #0x18
  bc:	blr	x8
  c0:	ldr	w8, [x29, #24]
  c4:	sub	w0, w8, w19
  c8:	b	d0 <upack+0x5c>
  cc:	mov	w0, #0xffffffff            	// #-1
  d0:	ldr	x19, [sp, #16]
  d4:	ldp	x29, x30, [sp], #32
  d8:	ret
  dc:	adrp	x0, 0 <check_set_max_msg_size>
  e0:	adrp	x1, 0 <check_set_max_msg_size>
  e4:	add	x0, x0, #0x0
  e8:	add	x1, x1, #0x0
  ec:	mov	w2, #0x8e                  	// #142
  f0:	bl	0 <eprintf>

00000000000000f4 <ppack>:
  f4:	sub	sp, sp, #0x120
  f8:	stp	x29, x30, [sp, #224]
  fc:	stp	x20, x19, [sp, #272]
 100:	add	x29, sp, #0xe0
 104:	mov	x19, x0
 108:	str	x28, [sp, #240]
 10c:	stp	x22, x21, [sp, #256]
 110:	str	xzr, [x29, #24]
 114:	cbz	x2, 144 <ppack+0x50>
 118:	mov	w3, w1
 11c:	cmp	w1, #0x4
 120:	b.cs	240 <ppack+0x14c>  // b.hs, b.nlast
 124:	adrp	x8, 0 <check_set_max_msg_size>
 128:	add	x8, x8, #0x0
 12c:	ldr	x8, [x8, w3, uxtw #3]
 130:	add	x0, x29, #0x18
 134:	mov	x1, x2
 138:	blr	x8
 13c:	sxtw	x20, w0
 140:	b	148 <ppack+0x54>
 144:	mov	x20, xzr
 148:	adrp	x0, 0 <check_set_max_msg_size>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <getenv>
 154:	cbz	x0, 168 <ppack+0x74>
 158:	mov	w2, #0xa                   	// #10
 15c:	mov	x1, xzr
 160:	bl	0 <strtoul>
 164:	cbnz	x0, 170 <ppack+0x7c>
 168:	adrp	x8, 0 <check_set_max_msg_size>
 16c:	ldr	x0, [x8]
 170:	cmp	x0, #0x0
 174:	mov	w8, #0x1000                	// #4096
 178:	csel	x8, x8, x0, eq  // eq = none
 17c:	cmp	x8, x20
 180:	b.cc	204 <ppack+0x110>  // b.lo, b.ul, b.last
 184:	mov	x0, sp
 188:	mov	w1, wzr
 18c:	bl	0 <__sigsetjmp>
 190:	cbnz	w0, 21c <ppack+0x128>
 194:	mov	x0, sp
 198:	bl	0 <__pthread_register_cancel>
 19c:	adrp	x21, 0 <check_set_max_msg_size>
 1a0:	add	x21, x21, #0x0
 1a4:	mov	x0, x21
 1a8:	bl	0 <pthread_mutex_lock>
 1ac:	ldr	x0, [x29, #24]
 1b0:	mov	w1, #0x1                   	// #1
 1b4:	mov	x2, x20
 1b8:	mov	x3, x19
 1bc:	bl	0 <fwrite>
 1c0:	mov	x22, x0
 1c4:	mov	x0, x19
 1c8:	bl	0 <fflush>
 1cc:	mov	x0, x21
 1d0:	bl	0 <pthread_mutex_unlock>
 1d4:	mov	x0, sp
 1d8:	bl	0 <__pthread_unregister_cancel>
 1dc:	cmp	x22, x20
 1e0:	b.ne	228 <ppack+0x134>  // b.any
 1e4:	ldr	x0, [x29, #24]
 1e8:	bl	0 <free>
 1ec:	ldp	x20, x19, [sp, #272]
 1f0:	ldp	x22, x21, [sp, #256]
 1f4:	ldr	x28, [sp, #240]
 1f8:	ldp	x29, x30, [sp, #224]
 1fc:	add	sp, sp, #0x120
 200:	ret
 204:	adrp	x0, 0 <check_set_max_msg_size>
 208:	adrp	x1, 0 <check_set_max_msg_size>
 20c:	add	x0, x0, #0x0
 210:	add	x1, x1, #0x0
 214:	mov	w2, #0x146                 	// #326
 218:	bl	0 <eprintf>
 21c:	bl	258 <ppack_cleanup>
 220:	mov	x0, sp
 224:	bl	0 <__pthread_unwind_next>
 228:	adrp	x0, 0 <check_set_max_msg_size>
 22c:	adrp	x1, 0 <check_set_max_msg_size>
 230:	add	x0, x0, #0x0
 234:	add	x1, x1, #0x0
 238:	mov	w2, #0x14f                 	// #335
 23c:	bl	0 <eprintf>
 240:	adrp	x0, 0 <check_set_max_msg_size>
 244:	adrp	x1, 0 <check_set_max_msg_size>
 248:	add	x0, x0, #0x0
 24c:	add	x1, x1, #0x0
 250:	mov	w2, #0x7e                  	// #126
 254:	bl	0 <eprintf>

0000000000000258 <ppack_cleanup>:
 258:	adrp	x0, 0 <check_set_max_msg_size>
 25c:	add	x0, x0, #0x0
 260:	b	0 <pthread_mutex_unlock>

0000000000000264 <rcvmsg_free>:
 264:	stp	x29, x30, [sp, #-32]!
 268:	str	x19, [sp, #16]
 26c:	mov	x19, x0
 270:	ldr	x0, [x0, #8]
 274:	mov	x29, sp
 278:	bl	0 <free>
 27c:	ldr	x0, [x19, #24]
 280:	bl	0 <free>
 284:	ldr	x0, [x19, #40]
 288:	bl	0 <free>
 28c:	mov	x0, x19
 290:	ldr	x19, [sp, #16]
 294:	ldp	x29, x30, [sp], #32
 298:	b	0 <free>

000000000000029c <punpack>:
 29c:	sub	sp, sp, #0x90
 2a0:	stp	x20, x19, [sp, #128]
 2a4:	mov	x20, x0
 2a8:	mov	w0, #0x38                  	// #56
 2ac:	stp	x29, x30, [sp, #48]
 2b0:	stp	x28, x27, [sp, #64]
 2b4:	stp	x26, x25, [sp, #80]
 2b8:	stp	x24, x23, [sp, #96]
 2bc:	stp	x22, x21, [sp, #112]
 2c0:	add	x29, sp, #0x30
 2c4:	bl	0 <emalloc>
 2c8:	mov	w8, #0xffffffff            	// #-1
 2cc:	mov	x19, x0
 2d0:	stp	xzr, xzr, [x0]
 2d4:	str	xzr, [x0, #40]
 2d8:	str	xzr, [x0, #24]
 2dc:	str	w8, [x0, #48]
 2e0:	str	w8, [x0, #32]
 2e4:	str	w8, [x0, #16]
 2e8:	adrp	x0, 0 <check_set_max_msg_size>
 2ec:	add	x0, x0, #0x0
 2f0:	bl	0 <getenv>
 2f4:	adrp	x22, 0 <check_set_max_msg_size>
 2f8:	cbz	x0, 30c <punpack+0x70>
 2fc:	mov	w2, #0xa                   	// #10
 300:	mov	x1, xzr
 304:	bl	0 <strtoul>
 308:	cbnz	x0, 310 <punpack+0x74>
 30c:	ldr	x0, [x22]
 310:	lsl	x8, x0, #1
 314:	cmp	x0, #0x0
 318:	mov	w9, #0x2000                	// #8192
 31c:	csel	x0, x9, x8, eq  // eq = none
 320:	bl	0 <emalloc>
 324:	mov	x21, x0
 328:	adrp	x0, 0 <check_set_max_msg_size>
 32c:	add	x0, x0, #0x0
 330:	bl	0 <getenv>
 334:	cbz	x0, 348 <punpack+0xac>
 338:	mov	w2, #0xa                   	// #10
 33c:	mov	x1, xzr
 340:	bl	0 <strtoul>
 344:	cbnz	x0, 34c <punpack+0xb0>
 348:	ldr	x0, [x22]
 34c:	cmp	x0, #0x0
 350:	mov	w8, #0x1000                	// #4096
 354:	csel	w8, w8, w0, eq  // eq = none
 358:	lsl	w8, w8, #1
 35c:	sxtw	x2, w8
 360:	mov	w1, #0x1                   	// #1
 364:	mov	x0, x21
 368:	mov	x3, x20
 36c:	bl	0 <fread>
 370:	mov	x22, x0
 374:	mov	x0, x20
 378:	bl	0 <ferror>
 37c:	cbnz	w0, 5a4 <punpack+0x308>
 380:	cmp	w22, #0x1
 384:	b.lt	518 <punpack+0x27c>  // b.tstop
 388:	adrp	x26, 0 <check_set_max_msg_size>
 38c:	adrp	x27, 0 <check_set_max_msg_size>
 390:	add	x25, x21, #0x4
 394:	add	x26, x26, #0x0
 398:	add	x27, x27, #0x0
 39c:	mov	w28, w22
 3a0:	b	3ac <punpack+0x110>
 3a4:	cmp	w28, #0x0
 3a8:	b.le	518 <punpack+0x27c>
 3ac:	stur	x21, [x29, #-8]
 3b0:	cbz	x21, 558 <punpack+0x2bc>
 3b4:	ldr	w8, [x21]
 3b8:	stur	x25, [x29, #-8]
 3bc:	lsl	x8, x8, #32
 3c0:	rev	x23, x8
 3c4:	cmp	w23, #0x4
 3c8:	b.cs	570 <punpack+0x2d4>  // b.hs, b.nlast
 3cc:	ldr	x8, [x26, x23, lsl #3]
 3d0:	sub	x0, x29, #0x8
 3d4:	add	x1, sp, #0x18
 3d8:	blr	x8
 3dc:	ldur	x8, [x29, #-8]
 3e0:	sub	x24, x8, x21
 3e4:	cmn	w24, #0x1
 3e8:	b.eq	558 <punpack+0x2bc>  // b.none
 3ec:	cmp	w23, #0x3
 3f0:	b.hi	4c4 <punpack+0x228>  // b.pmore
 3f4:	mov	w8, w23
 3f8:	adr	x9, 408 <punpack+0x16c>
 3fc:	ldrb	w10, [x27, x8]
 400:	add	x9, x9, x10, lsl #2
 404:	br	x9
 408:	ldr	w8, [x19]
 40c:	ldr	w23, [sp, #24]
 410:	cbz	w8, 428 <punpack+0x18c>
 414:	ldr	x0, [x19, #8]
 418:	bl	0 <free>
 41c:	mov	w8, #0xffffffff            	// #-1
 420:	str	w8, [x19, #16]
 424:	str	xzr, [x19, #8]
 428:	str	w23, [x19]
 42c:	b	4c4 <punpack+0x228>
 430:	ldr	w8, [x19, #4]
 434:	cbnz	w8, 48c <punpack+0x1f0>
 438:	ldr	x9, [sp, #32]
 43c:	ldr	w8, [x19]
 440:	str	x9, [sp, #16]
 444:	ldr	w9, [sp, #24]
 448:	cmp	w8, #0x2
 44c:	mov	w8, #0x8                   	// #8
 450:	str	w9, [sp, #12]
 454:	mov	w9, #0x18                  	// #24
 458:	csel	x26, x9, x8, eq  // eq = none
 45c:	ldr	x0, [x19, x26]
 460:	mov	w8, #0x10                  	// #16
 464:	mov	w9, #0x20                  	// #32
 468:	csel	x23, x9, x8, eq  // eq = none
 46c:	bl	0 <free>
 470:	ldr	w8, [sp, #12]
 474:	ldr	x0, [sp, #16]
 478:	str	w8, [x19, x23]
 47c:	bl	0 <strdup>
 480:	str	x0, [x19, x26]
 484:	adrp	x26, 0 <check_set_max_msg_size>
 488:	add	x26, x26, #0x0
 48c:	ldr	x0, [sp, #32]
 490:	b	4c0 <punpack+0x224>
 494:	ldr	w8, [sp, #24]
 498:	str	w8, [x19, #48]
 49c:	b	4c4 <punpack+0x228>
 4a0:	ldr	x8, [x19, #40]
 4a4:	cbnz	x8, 4bc <punpack+0x220>
 4a8:	ldr	x0, [sp, #24]
 4ac:	bl	0 <strdup>
 4b0:	ldr	w8, [x19]
 4b4:	str	x0, [x19, #40]
 4b8:	str	w8, [x19, #4]
 4bc:	ldr	x0, [sp, #24]
 4c0:	bl	0 <free>
 4c4:	subs	w28, w28, w24
 4c8:	b.mi	58c <punpack+0x2f0>  // b.first
 4cc:	sxtw	x23, w24
 4d0:	mov	w24, w28
 4d4:	add	x1, x21, x23
 4d8:	mov	x0, x21
 4dc:	mov	x2, x24
 4e0:	bl	0 <memmove>
 4e4:	cmp	w22, #0x1
 4e8:	b.lt	3a4 <punpack+0x108>  // b.tstop
 4ec:	add	x0, x21, x24
 4f0:	mov	w1, #0x1                   	// #1
 4f4:	mov	x2, x23
 4f8:	mov	x3, x20
 4fc:	bl	0 <fread>
 500:	mov	x22, x0
 504:	mov	x0, x20
 508:	bl	0 <ferror>
 50c:	cbnz	w0, 5a4 <punpack+0x308>
 510:	add	w28, w28, w22
 514:	b	3a4 <punpack+0x108>
 518:	mov	x0, x21
 51c:	bl	0 <free>
 520:	ldr	w8, [x19]
 524:	cbnz	w8, 534 <punpack+0x298>
 528:	mov	x0, x19
 52c:	bl	0 <free>
 530:	mov	x19, xzr
 534:	mov	x0, x19
 538:	ldp	x20, x19, [sp, #128]
 53c:	ldp	x22, x21, [sp, #112]
 540:	ldp	x24, x23, [sp, #96]
 544:	ldp	x26, x25, [sp, #80]
 548:	ldp	x28, x27, [sp, #64]
 54c:	ldp	x29, x30, [sp, #48]
 550:	add	sp, sp, #0x90
 554:	ret
 558:	adrp	x0, 0 <check_set_max_msg_size>
 55c:	adrp	x1, 0 <check_set_max_msg_size>
 560:	add	x0, x0, #0x0
 564:	add	x1, x1, #0x0
 568:	mov	w2, #0x16a                 	// #362
 56c:	bl	0 <eprintf>
 570:	adrp	x0, 0 <check_set_max_msg_size>
 574:	adrp	x1, 0 <check_set_max_msg_size>
 578:	add	x0, x0, #0x0
 57c:	add	x1, x1, #0x0
 580:	mov	w2, #0x8e                  	// #142
 584:	mov	w3, w23
 588:	bl	0 <eprintf>
 58c:	adrp	x0, 0 <check_set_max_msg_size>
 590:	adrp	x1, 0 <check_set_max_msg_size>
 594:	add	x0, x0, #0x0
 598:	add	x1, x1, #0x0
 59c:	mov	w2, #0x1e6                 	// #486
 5a0:	bl	0 <eprintf>
 5a4:	adrp	x0, 0 <check_set_max_msg_size>
 5a8:	adrp	x1, 0 <check_set_max_msg_size>
 5ac:	add	x0, x0, #0x0
 5b0:	add	x1, x1, #0x0
 5b4:	mov	w2, #0x15a                 	// #346
 5b8:	bl	0 <eprintf>

00000000000005bc <pack_ctx>:
 5bc:	stp	x29, x30, [sp, #-32]!
 5c0:	stp	x20, x19, [sp, #16]
 5c4:	mov	x20, x0
 5c8:	mov	w0, #0x8                   	// #8
 5cc:	mov	x29, sp
 5d0:	mov	x19, x1
 5d4:	bl	0 <emalloc>
 5d8:	str	x0, [x20]
 5dc:	str	wzr, [x0]
 5e0:	ldr	w9, [x19]
 5e4:	mov	x8, x0
 5e8:	mov	w0, #0x8                   	// #8
 5ec:	rev	w9, w9
 5f0:	str	w9, [x8, #4]
 5f4:	ldp	x20, x19, [sp, #16]
 5f8:	ldp	x29, x30, [sp], #32
 5fc:	ret

0000000000000600 <pack_fail>:
 600:	stp	x29, x30, [sp, #-48]!
 604:	stp	x22, x21, [sp, #16]
 608:	stp	x20, x19, [sp, #32]
 60c:	ldr	x8, [x1]
 610:	mov	x20, x1
 614:	mov	x22, x0
 618:	mov	x29, sp
 61c:	cbz	x8, 630 <pack_fail+0x30>
 620:	mov	x0, x8
 624:	bl	0 <strlen>
 628:	add	w19, w0, #0x8
 62c:	b	634 <pack_fail+0x34>
 630:	mov	w19, #0x8                   	// #8
 634:	sxtw	x0, w19
 638:	bl	0 <emalloc>
 63c:	mov	w8, #0x1000000             	// #16777216
 640:	str	x0, [x22]
 644:	str	w8, [x0]
 648:	ldr	x20, [x20]
 64c:	mov	x21, x0
 650:	cbz	x20, 660 <pack_fail+0x60>
 654:	mov	x0, x20
 658:	bl	0 <strlen>
 65c:	b	664 <pack_fail+0x64>
 660:	mov	w0, wzr
 664:	rev	w8, w0
 668:	cmp	w0, #0x1
 66c:	str	w8, [x21, #4]
 670:	b.lt	688 <pack_fail+0x88>  // b.tstop
 674:	add	x8, x21, #0x8
 678:	mov	w2, w0
 67c:	mov	x0, x8
 680:	mov	x1, x20
 684:	bl	0 <memcpy>
 688:	mov	w0, w19
 68c:	ldp	x20, x19, [sp, #32]
 690:	ldp	x22, x21, [sp, #16]
 694:	ldp	x29, x30, [sp], #48
 698:	ret

000000000000069c <pack_loc>:
 69c:	stp	x29, x30, [sp, #-64]!
 6a0:	stp	x22, x21, [sp, #32]
 6a4:	stp	x20, x19, [sp, #48]
 6a8:	ldr	x8, [x1, #8]
 6ac:	mov	x19, x1
 6b0:	mov	x21, x0
 6b4:	str	x23, [sp, #16]
 6b8:	mov	x29, sp
 6bc:	cbz	x8, 6d0 <pack_loc+0x34>
 6c0:	mov	x0, x8
 6c4:	bl	0 <strlen>
 6c8:	add	w20, w0, #0xc
 6cc:	b	6d4 <pack_loc+0x38>
 6d0:	mov	w20, #0xc                   	// #12
 6d4:	sxtw	x0, w20
 6d8:	bl	0 <emalloc>
 6dc:	mov	w8, #0x2000000             	// #33554432
 6e0:	str	x0, [x21]
 6e4:	str	w8, [x0]
 6e8:	ldr	x21, [x19, #8]
 6ec:	mov	x22, x0
 6f0:	cbz	x21, 700 <pack_loc+0x64>
 6f4:	mov	x0, x21
 6f8:	bl	0 <strlen>
 6fc:	b	704 <pack_loc+0x68>
 700:	mov	w0, wzr
 704:	rev	w8, w0
 708:	cmp	w0, #0x1
 70c:	str	w8, [x22, #4]
 710:	add	x22, x22, #0x8
 714:	b.lt	730 <pack_loc+0x94>  // b.tstop
 718:	mov	w23, w0
 71c:	mov	x0, x22
 720:	mov	x1, x21
 724:	mov	x2, x23
 728:	bl	0 <memcpy>
 72c:	add	x22, x22, x23
 730:	ldr	w8, [x19]
 734:	mov	w0, w20
 738:	ldr	x23, [sp, #16]
 73c:	rev	w8, w8
 740:	str	w8, [x22]
 744:	ldp	x20, x19, [sp, #48]
 748:	ldp	x22, x21, [sp, #32]
 74c:	ldp	x29, x30, [sp], #64
 750:	ret

0000000000000754 <pack_duration>:
 754:	stp	x29, x30, [sp, #-32]!
 758:	stp	x20, x19, [sp, #16]
 75c:	mov	x20, x0
 760:	mov	w0, #0x8                   	// #8
 764:	mov	x29, sp
 768:	mov	x19, x1
 76c:	bl	0 <emalloc>
 770:	mov	w9, #0x3000000             	// #50331648
 774:	str	x0, [x20]
 778:	str	w9, [x0]
 77c:	ldr	w9, [x19]
 780:	mov	x8, x0
 784:	mov	w0, #0x8                   	// #8
 788:	rev	w9, w9
 78c:	str	w9, [x8, #4]
 790:	ldp	x20, x19, [sp, #16]
 794:	ldp	x29, x30, [sp], #32
 798:	ret

000000000000079c <upack_ctx>:
 79c:	ldr	x8, [x0]
 7a0:	ldr	w9, [x8], #4
 7a4:	rev	w9, w9
 7a8:	str	x8, [x0]
 7ac:	str	w9, [x1]
 7b0:	ret

00000000000007b4 <upack_fail>:
 7b4:	stp	x29, x30, [sp, #-48]!
 7b8:	stp	x22, x21, [sp, #16]
 7bc:	stp	x20, x19, [sp, #32]
 7c0:	ldr	x8, [x0]
 7c4:	mov	x19, x1
 7c8:	mov	x29, sp
 7cc:	ldrb	w9, [x8]
 7d0:	ldrb	w10, [x8, #1]
 7d4:	ldrb	w11, [x8, #2]
 7d8:	ldrb	w12, [x8, #3]
 7dc:	lsl	w9, w9, #24
 7e0:	sxtw	x9, w9
 7e4:	bfi	x9, x10, #16, #8
 7e8:	bfi	x9, x11, #8, #8
 7ec:	orr	x22, x9, x12
 7f0:	add	x8, x8, #0x4
 7f4:	cmp	w22, #0x1
 7f8:	str	x8, [x0]
 7fc:	b.lt	834 <upack_fail+0x80>  // b.tstop
 800:	mov	x20, x0
 804:	add	x0, x22, #0x1
 808:	bl	0 <emalloc>
 80c:	ldr	x1, [x20]
 810:	mov	w22, w22
 814:	mov	x2, x22
 818:	mov	x21, x0
 81c:	bl	0 <memcpy>
 820:	strb	wzr, [x21, x22]
 824:	ldr	x8, [x20]
 828:	add	x8, x8, x22
 82c:	str	x8, [x20]
 830:	b	844 <upack_fail+0x90>
 834:	mov	w0, #0x1                   	// #1
 838:	bl	0 <emalloc>
 83c:	mov	x21, x0
 840:	strb	wzr, [x0]
 844:	str	x21, [x19]
 848:	ldp	x20, x19, [sp, #32]
 84c:	ldp	x22, x21, [sp, #16]
 850:	ldp	x29, x30, [sp], #48
 854:	ret

0000000000000858 <upack_loc>:
 858:	stp	x29, x30, [sp, #-48]!
 85c:	stp	x22, x21, [sp, #16]
 860:	stp	x20, x19, [sp, #32]
 864:	ldr	x8, [x0]
 868:	mov	x19, x1
 86c:	mov	x20, x0
 870:	mov	x29, sp
 874:	ldrb	w9, [x8]
 878:	ldrb	w10, [x8, #1]
 87c:	ldrb	w11, [x8, #2]
 880:	ldrb	w12, [x8, #3]
 884:	lsl	w9, w9, #24
 888:	sxtw	x9, w9
 88c:	bfi	x9, x10, #16, #8
 890:	bfi	x9, x11, #8, #8
 894:	orr	x22, x9, x12
 898:	add	x8, x8, #0x4
 89c:	cmp	w22, #0x1
 8a0:	str	x8, [x0]
 8a4:	b.lt	8d8 <upack_loc+0x80>  // b.tstop
 8a8:	add	x0, x22, #0x1
 8ac:	bl	0 <emalloc>
 8b0:	ldr	x1, [x20]
 8b4:	mov	w22, w22
 8b8:	mov	x2, x22
 8bc:	mov	x21, x0
 8c0:	bl	0 <memcpy>
 8c4:	strb	wzr, [x21, x22]
 8c8:	ldr	x8, [x20]
 8cc:	add	x8, x8, x22
 8d0:	str	x8, [x20]
 8d4:	b	8e8 <upack_loc+0x90>
 8d8:	mov	w0, #0x1                   	// #1
 8dc:	bl	0 <emalloc>
 8e0:	mov	x21, x0
 8e4:	strb	wzr, [x0]
 8e8:	str	x21, [x19, #8]
 8ec:	ldr	x8, [x20]
 8f0:	ldr	w9, [x8], #4
 8f4:	rev	w9, w9
 8f8:	str	x8, [x20]
 8fc:	str	w9, [x19]
 900:	ldp	x20, x19, [sp, #32]
 904:	ldp	x22, x21, [sp, #16]
 908:	ldp	x29, x30, [sp], #48
 90c:	ret

0000000000000910 <upack_duration>:
 910:	ldr	x8, [x0]
 914:	ldr	w9, [x8], #4
 918:	rev	w9, w9
 91c:	str	x8, [x0]
 920:	str	w9, [x1]
 924:	ret

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_print>:
   0:	adrp	x8, 0 <stdout>
   4:	ldr	x8, [x8]
   8:	mov	w2, w1
   c:	mov	x1, x0
  10:	mov	x0, x8
  14:	b	18 <srunner_fprint>

0000000000000018 <srunner_fprint>:
  18:	stp	x29, x30, [sp, #-48]!
  1c:	stp	x22, x21, [sp, #16]
  20:	stp	x20, x19, [sp, #32]
  24:	mov	w21, w2
  28:	mov	x20, x1
  2c:	mov	x19, x0
  30:	mov	x29, sp
  34:	cbz	w2, d4 <srunner_fprint+0xbc>
  38:	cmp	w21, #0x4
  3c:	b.ne	ac <srunner_fprint+0x94>  // b.any
  40:	adrp	x0, 0 <srunner_print>
  44:	add	x0, x0, #0x0
  48:	bl	0 <getenv>
  4c:	cbz	x0, 98 <srunner_fprint+0x80>
  50:	adrp	x1, 0 <srunner_print>
  54:	add	x1, x1, #0x0
  58:	mov	x21, x0
  5c:	bl	0 <strcmp>
  60:	cbz	w0, a0 <srunner_fprint+0x88>
  64:	adrp	x1, 0 <srunner_print>
  68:	add	x1, x1, #0x0
  6c:	mov	x0, x21
  70:	bl	0 <strcmp>
  74:	cbz	w0, a8 <srunner_fprint+0x90>
  78:	adrp	x1, 0 <srunner_print>
  7c:	add	x1, x1, #0x0
  80:	mov	x0, x21
  84:	bl	0 <strcmp>
  88:	cmp	w0, #0x0
  8c:	mov	w8, #0x2                   	// #2
  90:	cinc	w21, w8, eq  // eq = none
  94:	b	ac <srunner_fprint+0x94>
  98:	mov	w21, #0x2                   	// #2
  9c:	b	ac <srunner_fprint+0x94>
  a0:	mov	w21, wzr
  a4:	b	d4 <srunner_fprint+0xbc>
  a8:	mov	w21, #0x1                   	// #1
  ac:	mov	x0, x20
  b0:	bl	0 <sr_stat_str>
  b4:	mov	x22, x0
  b8:	adrp	x1, 0 <srunner_print>
  bc:	add	x1, x1, #0x0
  c0:	mov	x0, x19
  c4:	mov	x2, x22
  c8:	bl	0 <fprintf>
  cc:	mov	x0, x22
  d0:	bl	0 <free>
  d4:	ldr	x20, [x20, #16]
  d8:	mov	x0, x20
  dc:	bl	0 <check_list_front>
  e0:	mov	x0, x20
  e4:	bl	0 <check_list_at_end>
  e8:	cbnz	w0, 110 <srunner_fprint+0xf8>
  ec:	mov	x0, x20
  f0:	bl	0 <check_list_val>
  f4:	mov	x1, x0
  f8:	mov	x0, x19
  fc:	mov	w2, w21
 100:	bl	2f0 <tr_fprint>
 104:	mov	x0, x20
 108:	bl	0 <check_list_advance>
 10c:	b	e0 <srunner_fprint+0xc8>
 110:	ldp	x20, x19, [sp, #32]
 114:	ldp	x22, x21, [sp, #16]
 118:	ldp	x29, x30, [sp], #48
 11c:	ret

0000000000000120 <get_env_printmode>:
 120:	stp	x29, x30, [sp, #-32]!
 124:	adrp	x0, 0 <srunner_print>
 128:	add	x0, x0, #0x0
 12c:	str	x19, [sp, #16]
 130:	mov	x29, sp
 134:	bl	0 <getenv>
 138:	cbz	x0, 184 <get_env_printmode+0x64>
 13c:	adrp	x1, 0 <srunner_print>
 140:	add	x1, x1, #0x0
 144:	mov	x19, x0
 148:	bl	0 <strcmp>
 14c:	cbz	w0, 190 <get_env_printmode+0x70>
 150:	adrp	x1, 0 <srunner_print>
 154:	add	x1, x1, #0x0
 158:	mov	x0, x19
 15c:	bl	0 <strcmp>
 160:	cbz	w0, 18c <get_env_printmode+0x6c>
 164:	adrp	x1, 0 <srunner_print>
 168:	add	x1, x1, #0x0
 16c:	mov	x0, x19
 170:	bl	0 <strcmp>
 174:	cmp	w0, #0x0
 178:	mov	w8, #0x2                   	// #2
 17c:	cinc	w0, w8, eq  // eq = none
 180:	b	190 <get_env_printmode+0x70>
 184:	mov	w0, #0x2                   	// #2
 188:	b	190 <get_env_printmode+0x70>
 18c:	mov	w0, #0x1                   	// #1
 190:	ldr	x19, [sp, #16]
 194:	ldp	x29, x30, [sp], #32
 198:	ret

000000000000019c <fprint_xml_esc>:
 19c:	stp	x29, x30, [sp, #-96]!
 1a0:	stp	x28, x27, [sp, #16]
 1a4:	stp	x26, x25, [sp, #32]
 1a8:	stp	x24, x23, [sp, #48]
 1ac:	stp	x22, x21, [sp, #64]
 1b0:	adrp	x21, 0 <srunner_print>
 1b4:	adrp	x27, 0 <srunner_print>
 1b8:	adrp	x22, 0 <srunner_print>
 1bc:	adrp	x23, 0 <srunner_print>
 1c0:	adrp	x24, 0 <srunner_print>
 1c4:	adrp	x25, 0 <srunner_print>
 1c8:	adrp	x26, 0 <srunner_print>
 1cc:	stp	x20, x19, [sp, #80]
 1d0:	mov	x19, x1
 1d4:	mov	x20, x0
 1d8:	add	x21, x21, #0x0
 1dc:	mov	w28, #0x2600                	// #9728
 1e0:	add	x27, x27, #0x0
 1e4:	add	x22, x22, #0x0
 1e8:	add	x23, x23, #0x0
 1ec:	add	x24, x24, #0x0
 1f0:	add	x25, x25, #0x0
 1f4:	add	x26, x26, #0x0
 1f8:	mov	x29, sp
 1fc:	b	218 <fprint_xml_esc+0x7c>
 200:	mov	w1, #0x6                   	// #6
 204:	mov	w2, #0x1                   	// #1
 208:	mov	x0, x22
 20c:	mov	x3, x20
 210:	bl	0 <fwrite>
 214:	add	x19, x19, #0x1
 218:	ldrb	w2, [x19]
 21c:	sub	w8, w2, #0x22
 220:	cmp	w8, #0x1c
 224:	b.hi	278 <fprint_xml_esc+0xdc>  // b.pmore
 228:	adr	x9, 200 <fprint_xml_esc+0x64>
 22c:	ldrb	w10, [x27, x8]
 230:	add	x9, x9, x10, lsl #2
 234:	br	x9
 238:	mov	w1, #0x5                   	// #5
 23c:	mov	w2, #0x1                   	// #1
 240:	mov	x0, x23
 244:	b	20c <fprint_xml_esc+0x70>
 248:	mov	w1, #0x6                   	// #6
 24c:	mov	w2, #0x1                   	// #1
 250:	mov	x0, x24
 254:	b	20c <fprint_xml_esc+0x70>
 258:	mov	w1, #0x4                   	// #4
 25c:	mov	w2, #0x1                   	// #1
 260:	mov	x0, x25
 264:	b	20c <fprint_xml_esc+0x70>
 268:	mov	w1, #0x4                   	// #4
 26c:	mov	w2, #0x1                   	// #1
 270:	mov	x0, x26
 274:	b	20c <fprint_xml_esc+0x70>
 278:	cbz	w2, 2d4 <fprint_xml_esc+0x138>
 27c:	sub	w8, w2, #0x20
 280:	cmp	w8, #0x5e
 284:	b.hi	29c <fprint_xml_esc+0x100>  // b.pmore
 288:	mov	w0, w2
 28c:	mov	x1, x20
 290:	bl	0 <fputc>
 294:	add	x19, x19, #0x1
 298:	b	218 <fprint_xml_esc+0x7c>
 29c:	cmp	w2, #0xd
 2a0:	b.hi	2c8 <fprint_xml_esc+0x12c>  // b.pmore
 2a4:	mov	w8, #0x1                   	// #1
 2a8:	lsl	w8, w8, w2
 2ac:	tst	w8, w28
 2b0:	b.eq	2c8 <fprint_xml_esc+0x12c>  // b.none
 2b4:	mov	x0, x20
 2b8:	mov	x1, x21
 2bc:	bl	0 <fprintf>
 2c0:	add	x19, x19, #0x1
 2c4:	b	218 <fprint_xml_esc+0x7c>
 2c8:	cmp	w2, #0x20
 2cc:	b.cs	2b4 <fprint_xml_esc+0x118>  // b.hs, b.nlast
 2d0:	b	2c0 <fprint_xml_esc+0x124>
 2d4:	ldp	x20, x19, [sp, #80]
 2d8:	ldp	x22, x21, [sp, #64]
 2dc:	ldp	x24, x23, [sp, #48]
 2e0:	ldp	x26, x25, [sp, #32]
 2e4:	ldp	x28, x27, [sp, #16]
 2e8:	ldp	x29, x30, [sp], #96
 2ec:	ret

00000000000002f0 <tr_fprint>:
 2f0:	stp	x29, x30, [sp, #-48]!
 2f4:	stp	x20, x19, [sp, #32]
 2f8:	mov	x20, x1
 2fc:	cmp	w2, #0x4
 300:	mov	x19, x0
 304:	str	x21, [sp, #16]
 308:	mov	x29, sp
 30c:	b.ne	36c <tr_fprint+0x7c>  // b.any
 310:	adrp	x0, 0 <srunner_print>
 314:	add	x0, x0, #0x0
 318:	bl	0 <getenv>
 31c:	cbz	x0, 35c <tr_fprint+0x6c>
 320:	adrp	x1, 0 <srunner_print>
 324:	add	x1, x1, #0x0
 328:	mov	x21, x0
 32c:	bl	0 <strcmp>
 330:	cbz	w0, 3c8 <tr_fprint+0xd8>
 334:	adrp	x1, 0 <srunner_print>
 338:	add	x1, x1, #0x0
 33c:	mov	x0, x21
 340:	bl	0 <strcmp>
 344:	cbz	w0, 3c8 <tr_fprint+0xd8>
 348:	adrp	x1, 0 <srunner_print>
 34c:	add	x1, x1, #0x0
 350:	mov	x0, x21
 354:	bl	0 <strcmp>
 358:	cbz	w0, 3d8 <tr_fprint+0xe8>
 35c:	mov	w2, #0x2                   	// #2
 360:	cmp	w2, #0x2
 364:	b.cs	388 <tr_fprint+0x98>  // b.hs, b.nlast
 368:	b	3c8 <tr_fprint+0xd8>
 36c:	cmp	w2, #0x3
 370:	b.cc	380 <tr_fprint+0x90>  // b.lo, b.ul, b.last
 374:	ldr	w8, [x20]
 378:	cmp	w8, #0x1
 37c:	b.eq	394 <tr_fprint+0xa4>  // b.none
 380:	cmp	w2, #0x2
 384:	b.cc	3c8 <tr_fprint+0xd8>  // b.lo, b.ul, b.last
 388:	ldr	w8, [x20]
 38c:	cmp	w8, #0x1
 390:	b.eq	3c8 <tr_fprint+0xd8>  // b.none
 394:	mov	x0, x20
 398:	bl	0 <tr_str>
 39c:	mov	x20, x0
 3a0:	adrp	x1, 0 <srunner_print>
 3a4:	add	x1, x1, #0x0
 3a8:	mov	x0, x19
 3ac:	mov	x2, x20
 3b0:	bl	0 <fprintf>
 3b4:	mov	x0, x20
 3b8:	ldp	x20, x19, [sp, #32]
 3bc:	ldr	x21, [sp, #16]
 3c0:	ldp	x29, x30, [sp], #48
 3c4:	b	0 <free>
 3c8:	ldp	x20, x19, [sp, #32]
 3cc:	ldr	x21, [sp, #16]
 3d0:	ldp	x29, x30, [sp], #48
 3d4:	ret
 3d8:	mov	w2, #0x3                   	// #3
 3dc:	b	374 <tr_fprint+0x84>

00000000000003e0 <tr_xmlprint>:
 3e0:	sub	sp, sp, #0x50
 3e4:	stp	x29, x30, [sp, #16]
 3e8:	stp	x22, x21, [sp, #48]
 3ec:	stp	x20, x19, [sp, #64]
 3f0:	ldr	w8, [x1]
 3f4:	mov	x20, x1
 3f8:	mov	x19, x0
 3fc:	str	x23, [sp, #32]
 400:	cmp	w8, #0x3
 404:	add	x29, sp, #0x10
 408:	b.eq	494 <tr_xmlprint+0xb4>  // b.none
 40c:	cmp	w8, #0x2
 410:	b.eq	430 <tr_xmlprint+0x50>  // b.none
 414:	cmp	w8, #0x1
 418:	b.ne	638 <tr_xmlprint+0x258>  // b.any
 41c:	mov	x8, #0x7573                	// #30067
 420:	movk	x8, #0x6363, lsl #16
 424:	movk	x8, #0x7365, lsl #32
 428:	movk	x8, #0x73, lsl #48
 42c:	b	440 <tr_xmlprint+0x60>
 430:	mov	x8, #0x6166                	// #24934
 434:	movk	x8, #0x6c69, lsl #16
 438:	movk	x8, #0x7275, lsl #32
 43c:	movk	x8, #0x65, lsl #48
 440:	str	x8, [sp]
 444:	ldr	x21, [x20, #8]
 448:	cbz	x21, 4b0 <tr_xmlprint+0xd0>
 44c:	mov	w1, #0x2f                  	// #47
 450:	mov	x0, x21
 454:	bl	0 <strrchr>
 458:	mov	x22, x0
 45c:	cbnz	x0, 474 <tr_xmlprint+0x94>
 460:	mov	w1, #0x5c                  	// #92
 464:	mov	x0, x21
 468:	bl	0 <strrchr>
 46c:	mov	x22, x0
 470:	cbz	x0, 620 <tr_xmlprint+0x240>
 474:	mov	x0, x21
 478:	bl	0 <strdup>
 47c:	ldr	x8, [x20, #8]
 480:	mov	x21, x0
 484:	sub	x8, x22, x8
 488:	add	x22, x22, #0x1
 48c:	strb	wzr, [x0, x8]
 490:	b	4b4 <tr_xmlprint+0xd4>
 494:	mov	w9, #0x7265                	// #29285
 498:	mov	w8, #0x72                  	// #114
 49c:	movk	w9, #0x6f72, lsl #16
 4a0:	strh	w8, [sp, #4]
 4a4:	str	w9, [sp]
 4a8:	ldr	x21, [x20, #8]
 4ac:	cbnz	x21, 44c <tr_xmlprint+0x6c>
 4b0:	mov	x22, xzr
 4b4:	adrp	x1, 0 <srunner_print>
 4b8:	add	x1, x1, #0x0
 4bc:	mov	x2, sp
 4c0:	mov	x0, x19
 4c4:	bl	0 <fprintf>
 4c8:	adrp	x23, 0 <srunner_print>
 4cc:	add	x23, x23, #0x0
 4d0:	cmp	x21, #0x0
 4d4:	adrp	x1, 0 <srunner_print>
 4d8:	csel	x2, x23, x21, eq  // eq = none
 4dc:	add	x1, x1, #0x0
 4e0:	mov	x0, x19
 4e4:	bl	0 <fprintf>
 4e8:	ldr	w3, [x20, #16]
 4ec:	cmp	x22, #0x0
 4f0:	adrp	x1, 0 <srunner_print>
 4f4:	csel	x2, x23, x22, eq  // eq = none
 4f8:	add	x1, x1, #0x0
 4fc:	mov	x0, x19
 500:	bl	0 <fprintf>
 504:	ldr	x2, [x20, #40]
 508:	adrp	x1, 0 <srunner_print>
 50c:	add	x1, x1, #0x0
 510:	mov	x0, x19
 514:	bl	0 <fprintf>
 518:	ldr	w2, [x20, #20]
 51c:	adrp	x1, 0 <srunner_print>
 520:	add	x1, x1, #0x0
 524:	mov	x0, x19
 528:	bl	0 <fprintf>
 52c:	ldrsw	x8, [x20, #24]
 530:	mov	w9, #0xde83                	// #56963
 534:	movk	w9, #0x431b, lsl #16
 538:	mov	w10, #0x4240                	// #16960
 53c:	mul	x9, x8, x9
 540:	lsr	x11, x9, #32
 544:	lsr	x9, x9, #63
 548:	movk	w10, #0xf, lsl #16
 54c:	add	w9, w9, w11, asr #18
 550:	cmp	w8, #0x0
 554:	msub	w8, w9, w10, w8
 558:	adrp	x1, 0 <srunner_print>
 55c:	csinv	w2, w9, wzr, ge  // ge = tcont
 560:	csel	w3, wzr, w8, lt  // lt = tstop
 564:	add	x1, x1, #0x0
 568:	mov	x0, x19
 56c:	bl	0 <fprintf>
 570:	adrp	x0, 0 <srunner_print>
 574:	add	x0, x0, #0x0
 578:	mov	w1, #0x13                  	// #19
 57c:	mov	w2, #0x1                   	// #1
 580:	mov	x3, x19
 584:	bl	0 <fwrite>
 588:	ldr	x1, [x20, #32]
 58c:	mov	x0, x19
 590:	bl	19c <fprint_xml_esc>
 594:	adrp	x0, 0 <srunner_print>
 598:	add	x0, x0, #0x0
 59c:	mov	w1, #0xf                   	// #15
 5a0:	mov	w2, #0x1                   	// #1
 5a4:	mov	x3, x19
 5a8:	bl	0 <fwrite>
 5ac:	adrp	x0, 0 <srunner_print>
 5b0:	add	x0, x0, #0x0
 5b4:	mov	w1, #0xf                   	// #15
 5b8:	mov	w2, #0x1                   	// #1
 5bc:	mov	x3, x19
 5c0:	bl	0 <fwrite>
 5c4:	ldr	x1, [x20, #48]
 5c8:	mov	x0, x19
 5cc:	bl	19c <fprint_xml_esc>
 5d0:	adrp	x0, 0 <srunner_print>
 5d4:	add	x0, x0, #0x0
 5d8:	mov	w1, #0xb                   	// #11
 5dc:	mov	w2, #0x1                   	// #1
 5e0:	mov	x3, x19
 5e4:	bl	0 <fwrite>
 5e8:	adrp	x0, 0 <srunner_print>
 5ec:	add	x0, x0, #0x0
 5f0:	mov	w1, #0xc                   	// #12
 5f4:	mov	w2, #0x1                   	// #1
 5f8:	mov	x3, x19
 5fc:	bl	0 <fwrite>
 600:	mov	x0, x21
 604:	bl	0 <free>
 608:	ldp	x20, x19, [sp, #64]
 60c:	ldp	x22, x21, [sp, #48]
 610:	ldr	x23, [sp, #32]
 614:	ldp	x29, x30, [sp, #16]
 618:	add	sp, sp, #0x50
 61c:	ret
 620:	adrp	x0, 0 <srunner_print>
 624:	add	x0, x0, #0x0
 628:	bl	0 <strdup>
 62c:	ldr	x22, [x20, #8]
 630:	mov	x21, x0
 634:	b	4b4 <tr_xmlprint+0xd4>
 638:	bl	0 <abort>

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_fork_status>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	str	x19, [sp, #16]
       8:	ldr	w19, [x0, #56]
       c:	mov	x29, sp
      10:	cbnz	w19, 3c <srunner_fork_status+0x3c>
      14:	adrp	x0, 0 <srunner_fork_status>
      18:	add	x0, x0, #0x0
      1c:	bl	0 <getenv>
      20:	mov	w19, #0x1                   	// #1
      24:	cbz	x0, 3c <srunner_fork_status+0x3c>
      28:	adrp	x1, 0 <srunner_fork_status>
      2c:	add	x1, x1, #0x0
      30:	bl	0 <strcmp>
      34:	cmp	w0, #0x0
      38:	cinc	w19, w19, eq  // eq = none
      3c:	mov	w0, w19
      40:	ldr	x19, [sp, #16]
      44:	ldp	x29, x30, [sp], #32
      48:	ret

000000000000004c <srunner_set_fork_status>:
      4c:	str	w1, [x0, #56]
      50:	ret

0000000000000054 <srunner_run_all>:
      54:	mov	w5, w1
      58:	mov	x1, xzr
      5c:	mov	x2, xzr
      60:	mov	x3, xzr
      64:	mov	x4, xzr
      68:	b	7c <srunner_run_tagged>

000000000000006c <srunner_run>:
      6c:	mov	w5, w3
      70:	mov	x3, xzr
      74:	mov	x4, xzr
      78:	b	7c <srunner_run_tagged>

000000000000007c <srunner_run_tagged>:
      7c:	sub	sp, sp, #0x130
      80:	stp	x26, x25, [sp, #240]
      84:	stp	x24, x23, [sp, #256]
      88:	stp	x22, x21, [sp, #272]
      8c:	stp	x20, x19, [sp, #288]
      90:	mov	w20, w5
      94:	mov	x23, x4
      98:	mov	x24, x3
      9c:	mov	x25, x2
      a0:	mov	x26, x1
      a4:	mov	x22, x0
      a8:	stp	x29, x30, [sp, #208]
      ac:	stp	x28, x27, [sp, #224]
      b0:	add	x29, sp, #0xd0
      b4:	cbz	x2, cc <srunner_run_tagged+0x50>
      b8:	cbz	x26, e0 <srunner_run_tagged+0x64>
      bc:	cbz	x24, f4 <srunner_run_tagged+0x78>
      c0:	cbz	x23, 108 <srunner_run_tagged+0x8c>
      c4:	cbnz	x22, 11c <srunner_run_tagged+0xa0>
      c8:	b	308 <srunner_run_tagged+0x28c>
      cc:	adrp	x0, 0 <srunner_fork_status>
      d0:	add	x0, x0, #0x0
      d4:	bl	0 <getenv>
      d8:	mov	x25, x0
      dc:	cbnz	x26, bc <srunner_run_tagged+0x40>
      e0:	adrp	x0, 0 <srunner_fork_status>
      e4:	add	x0, x0, #0x0
      e8:	bl	0 <getenv>
      ec:	mov	x26, x0
      f0:	cbnz	x24, c0 <srunner_run_tagged+0x44>
      f4:	adrp	x0, 0 <srunner_fork_status>
      f8:	add	x0, x0, #0x0
      fc:	bl	0 <getenv>
     100:	mov	x24, x0
     104:	cbnz	x23, c4 <srunner_run_tagged+0x48>
     108:	adrp	x0, 0 <srunner_fork_status>
     10c:	add	x0, x0, #0x0
     110:	bl	0 <getenv>
     114:	mov	x23, x0
     118:	cbz	x22, 308 <srunner_run_tagged+0x28c>
     11c:	cmp	w20, #0x5
     120:	b.cs	a7c <srunner_run_tagged+0xa00>  // b.hs, b.nlast
     124:	adrp	x1, 0 <srunner_fork_status>
     128:	adrp	x19, 0 <srunner_fork_status>
     12c:	adrp	x2, 0 <srunner_fork_status>
     130:	add	x1, x1, #0x0
     134:	movi	v0.2d, #0x0
     138:	add	x19, x19, #0x0
     13c:	add	x2, x2, #0x0
     140:	mov	w0, #0xe                   	// #14
     144:	stur	q0, [x1, #136]
     148:	stur	q0, [x1, #120]
     14c:	stur	q0, [x1, #104]
     150:	stur	q0, [x1, #88]
     154:	stur	q0, [x1, #72]
     158:	stur	q0, [x1, #56]
     15c:	stur	q0, [x1, #40]
     160:	stur	q0, [x1, #24]
     164:	stur	q0, [x1, #8]
     168:	str	x19, [x1]
     16c:	bl	0 <sigaction>
     170:	adrp	x1, 0 <srunner_fork_status>
     174:	adrp	x2, 0 <srunner_fork_status>
     178:	add	x1, x1, #0x0
     17c:	movi	v0.2d, #0x0
     180:	add	x2, x2, #0x0
     184:	mov	w0, #0x2                   	// #2
     188:	stur	q0, [x1, #8]
     18c:	stur	q0, [x1, #24]
     190:	stur	q0, [x1, #40]
     194:	stur	q0, [x1, #56]
     198:	stur	q0, [x1, #72]
     19c:	stur	q0, [x1, #88]
     1a0:	stur	q0, [x1, #104]
     1a4:	stur	q0, [x1, #120]
     1a8:	stur	q0, [x1, #136]
     1ac:	str	x19, [x1]
     1b0:	bl	0 <sigaction>
     1b4:	adrp	x1, 0 <srunner_fork_status>
     1b8:	adrp	x2, 0 <srunner_fork_status>
     1bc:	add	x1, x1, #0x0
     1c0:	movi	v0.2d, #0x0
     1c4:	add	x2, x2, #0x0
     1c8:	mov	w0, #0xf                   	// #15
     1cc:	stur	q0, [x1, #8]
     1d0:	stur	q0, [x1, #24]
     1d4:	stur	q0, [x1, #40]
     1d8:	stur	q0, [x1, #56]
     1dc:	stur	q0, [x1, #72]
     1e0:	stur	q0, [x1, #88]
     1e4:	stur	q0, [x1, #104]
     1e8:	stur	q0, [x1, #120]
     1ec:	stur	q0, [x1, #136]
     1f0:	str	x19, [x1]
     1f4:	bl	0 <sigaction>
     1f8:	ldr	w21, [x22, #56]
     1fc:	cbnz	w21, 228 <srunner_run_tagged+0x1ac>
     200:	adrp	x0, 0 <srunner_fork_status>
     204:	add	x0, x0, #0x0
     208:	bl	0 <getenv>
     20c:	mov	w21, #0x1                   	// #1
     210:	cbz	x0, 228 <srunner_run_tagged+0x1ac>
     214:	adrp	x1, 0 <srunner_fork_status>
     218:	add	x1, x1, #0x0
     21c:	bl	0 <strcmp>
     220:	cmp	w0, #0x0
     224:	cinc	w21, w21, eq  // eq = none
     228:	mov	w0, w21
     22c:	bl	0 <set_fork_status>
     230:	bl	0 <setup_messaging>
     234:	mov	x0, x22
     238:	mov	w1, w20
     23c:	bl	0 <srunner_init_logging>
     240:	mov	x0, x22
     244:	bl	0 <log_srunner_start>
     248:	ldr	x19, [x22]
     24c:	mov	x0, x24
     250:	bl	0 <tag_string_to_list>
     254:	str	x0, [sp, #64]
     258:	mov	x0, x23
     25c:	bl	0 <tag_string_to_list>
     260:	str	x0, [sp, #56]
     264:	mov	x0, x19
     268:	bl	0 <check_list_front>
     26c:	mov	x0, x19
     270:	bl	0 <check_list_at_end>
     274:	cbz	w0, 328 <srunner_run_tagged+0x2ac>
     278:	ldr	x19, [sp, #64]
     27c:	adrp	x20, 0 <free>
     280:	add	x20, x20, #0x0
     284:	mov	x1, x20
     288:	mov	x0, x19
     28c:	bl	0 <check_list_apply>
     290:	ldr	x21, [sp, #56]
     294:	mov	x1, x20
     298:	mov	x0, x21
     29c:	bl	0 <check_list_apply>
     2a0:	mov	x0, x19
     2a4:	bl	0 <check_list_free>
     2a8:	mov	x0, x21
     2ac:	bl	0 <check_list_free>
     2b0:	mov	x0, x22
     2b4:	bl	0 <log_srunner_end>
     2b8:	mov	x0, x22
     2bc:	bl	0 <srunner_end_logging>
     2c0:	bl	0 <teardown_messaging>
     2c4:	mov	w0, #0x1                   	// #1
     2c8:	bl	0 <set_fork_status>
     2cc:	adrp	x1, 0 <srunner_fork_status>
     2d0:	add	x1, x1, #0x0
     2d4:	mov	w0, #0xe                   	// #14
     2d8:	mov	x2, xzr
     2dc:	bl	0 <sigaction>
     2e0:	adrp	x1, 0 <srunner_fork_status>
     2e4:	add	x1, x1, #0x0
     2e8:	mov	w0, #0x2                   	// #2
     2ec:	mov	x2, xzr
     2f0:	bl	0 <sigaction>
     2f4:	adrp	x1, 0 <srunner_fork_status>
     2f8:	add	x1, x1, #0x0
     2fc:	mov	w0, #0xf                   	// #15
     300:	mov	x2, xzr
     304:	bl	0 <sigaction>
     308:	ldp	x20, x19, [sp, #288]
     30c:	ldp	x22, x21, [sp, #272]
     310:	ldp	x24, x23, [sp, #256]
     314:	ldp	x26, x25, [sp, #240]
     318:	ldp	x28, x27, [sp, #224]
     31c:	ldp	x29, x30, [sp, #208]
     320:	add	sp, sp, #0x130
     324:	ret
     328:	sub	x8, x29, #0x58
     32c:	add	x8, x8, #0x10
     330:	stp	x22, x8, [sp, #80]
     334:	stp	x24, x23, [sp, #24]
     338:	stp	x26, x25, [sp, #8]
     33c:	str	x19, [sp, #40]
     340:	b	364 <srunner_run_tagged+0x2e8>
     344:	mov	x0, x22
     348:	mov	x1, x20
     34c:	bl	0 <log_suite_end>
     350:	mov	x0, x19
     354:	bl	0 <check_list_advance>
     358:	mov	x0, x19
     35c:	bl	0 <check_list_at_end>
     360:	cbnz	w0, 278 <srunner_run_tagged+0x1fc>
     364:	mov	x0, x19
     368:	bl	0 <check_list_val>
     36c:	mov	x20, x0
     370:	cbz	x26, 384 <srunner_run_tagged+0x308>
     374:	ldr	x1, [x20]
     378:	mov	x0, x26
     37c:	bl	0 <strcmp>
     380:	cbnz	w0, 350 <srunner_run_tagged+0x2d4>
     384:	cbz	x25, 398 <srunner_run_tagged+0x31c>
     388:	mov	x0, x20
     38c:	mov	x1, x25
     390:	bl	0 <suite_tcase>
     394:	cbz	w0, 350 <srunner_run_tagged+0x2d4>
     398:	mov	x0, x22
     39c:	mov	x1, x20
     3a0:	bl	0 <log_suite_start>
     3a4:	ldr	x21, [x20, #8]
     3a8:	mov	x0, x21
     3ac:	bl	0 <check_list_front>
     3b0:	mov	x0, x21
     3b4:	bl	0 <check_list_at_end>
     3b8:	cbnz	w0, 344 <srunner_run_tagged+0x2c8>
     3bc:	str	x20, [sp, #48]
     3c0:	str	x21, [sp, #96]
     3c4:	b	400 <srunner_run_tagged+0x384>
     3c8:	adrp	x1, 0 <srunner_fork_status>
     3cc:	add	x1, x1, #0x0
     3d0:	bl	0 <strcmp>
     3d4:	cmp	w0, #0x0
     3d8:	mov	w8, #0x1                   	// #1
     3dc:	cinc	w1, w8, eq  // eq = none
     3e0:	mov	x0, x20
     3e4:	bl	f94 <srunner_run_teardown>
     3e8:	ldp	x19, x20, [sp, #40]
     3ec:	mov	x0, x21
     3f0:	bl	0 <check_list_advance>
     3f4:	mov	x0, x21
     3f8:	bl	0 <check_list_at_end>
     3fc:	cbnz	w0, 344 <srunner_run_tagged+0x2c8>
     400:	mov	x0, x21
     404:	bl	0 <check_list_val>
     408:	mov	x27, x0
     40c:	cbz	x25, 420 <srunner_run_tagged+0x3a4>
     410:	ldr	x1, [x27]
     414:	mov	x0, x25
     418:	bl	0 <strcmp>
     41c:	cbnz	w0, 3ec <srunner_run_tagged+0x370>
     420:	cbz	x24, 434 <srunner_run_tagged+0x3b8>
     424:	ldr	x1, [sp, #64]
     428:	mov	x0, x27
     42c:	bl	0 <tcase_matching_tag>
     430:	cbz	w0, 3ec <srunner_run_tagged+0x370>
     434:	cbz	x23, 448 <srunner_run_tagged+0x3cc>
     438:	ldr	x1, [sp, #56]
     43c:	mov	x0, x27
     440:	bl	0 <tcase_matching_tag>
     444:	cbnz	w0, 3ec <srunner_run_tagged+0x370>
     448:	mov	w0, #0x2                   	// #2
     44c:	bl	0 <set_fork_status>
     450:	ldr	x0, [x27, #32]
     454:	ldr	x2, [x27]
     458:	adrp	x3, 0 <srunner_fork_status>
     45c:	mov	w1, #0x2                   	// #2
     460:	add	x3, x3, #0x0
     464:	bl	c04 <srunner_run_setup>
     468:	ldr	w8, [x22, #56]
     46c:	mov	x20, x0
     470:	cbnz	w8, 4a4 <srunner_run_tagged+0x428>
     474:	adrp	x0, 0 <srunner_fork_status>
     478:	add	x0, x0, #0x0
     47c:	bl	0 <getenv>
     480:	cbz	x0, 4a0 <srunner_run_tagged+0x424>
     484:	adrp	x1, 0 <srunner_fork_status>
     488:	add	x1, x1, #0x0
     48c:	bl	0 <strcmp>
     490:	cmp	w0, #0x0
     494:	mov	w8, #0x1                   	// #1
     498:	cinc	w8, w8, eq  // eq = none
     49c:	b	4a4 <srunner_run_tagged+0x428>
     4a0:	mov	w8, #0x1                   	// #1
     4a4:	mov	w0, w8
     4a8:	bl	0 <set_fork_status>
     4ac:	cbz	x20, 4bc <srunner_run_tagged+0x440>
     4b0:	ldr	w8, [x20]
     4b4:	cmp	w8, #0x1
     4b8:	b.ne	500 <srunner_run_tagged+0x484>  // b.any
     4bc:	ldr	x19, [x27, #24]
     4c0:	mov	x0, x19
     4c4:	bl	0 <check_list_front>
     4c8:	mov	x0, x19
     4cc:	bl	0 <check_list_at_end>
     4d0:	cbz	w0, 544 <srunner_run_tagged+0x4c8>
     4d4:	ldr	w1, [x22, #56]
     4d8:	ldr	x20, [x27, #40]
     4dc:	ldp	x24, x23, [sp, #24]
     4e0:	ldp	x26, x25, [sp, #8]
     4e4:	cbnz	w1, 3e0 <srunner_run_tagged+0x364>
     4e8:	adrp	x0, 0 <srunner_fork_status>
     4ec:	add	x0, x0, #0x0
     4f0:	bl	0 <getenv>
     4f4:	cbnz	x0, 3c8 <srunner_run_tagged+0x34c>
     4f8:	mov	w1, #0x1                   	// #1
     4fc:	b	3e0 <srunner_run_tagged+0x364>
     500:	ldr	x0, [x22, #16]
     504:	mov	x1, x20
     508:	bl	0 <check_list_add_end>
     50c:	ldr	x8, [x22, #8]
     510:	ldr	w9, [x8]
     514:	add	w9, w9, #0x1
     518:	str	w9, [x8]
     51c:	ldr	w9, [x20]
     520:	cmp	w9, #0x3
     524:	b.eq	91c <srunner_run_tagged+0x8a0>  // b.none
     528:	ldp	x19, x20, [sp, #40]
     52c:	cmp	w9, #0x2
     530:	b.ne	3ec <srunner_run_tagged+0x370>  // b.any
     534:	ldr	w9, [x8, #4]
     538:	add	w9, w9, #0x1
     53c:	str	w9, [x8, #4]
     540:	b	3ec <srunner_run_tagged+0x370>
     544:	add	x8, x27, #0x8
     548:	str	x8, [sp, #104]
     54c:	str	x19, [sp, #72]
     550:	b	56c <srunner_run_tagged+0x4f0>
     554:	ldr	x19, [sp, #72]
     558:	mov	x0, x19
     55c:	bl	0 <check_list_advance>
     560:	mov	x0, x19
     564:	bl	0 <check_list_at_end>
     568:	cbnz	w0, 4d4 <srunner_run_tagged+0x458>
     56c:	mov	x0, x19
     570:	bl	0 <check_list_val>
     574:	ldp	w26, w8, [x0, #8]
     578:	cmp	w26, w8
     57c:	b.ge	554 <srunner_run_tagged+0x4d8>  // b.tcont
     580:	mov	x19, x0
     584:	stur	x0, [x29, #-96]
     588:	b	5b8 <srunner_run_tagged+0x53c>
     58c:	add	x8, x8, #0x8
     590:	ldr	w9, [x8]
     594:	add	w9, w9, #0x1
     598:	str	w9, [x8]
     59c:	mov	x0, x22
     5a0:	mov	x1, x24
     5a4:	bl	0 <log_test_end>
     5a8:	ldr	w8, [x19, #12]
     5ac:	add	w26, w26, #0x1
     5b0:	cmp	w26, w8
     5b4:	b.ge	554 <srunner_run_tagged+0x4d8>  // b.tcont
     5b8:	mov	x0, x22
     5bc:	mov	x1, x27
     5c0:	mov	x2, x19
     5c4:	bl	0 <log_test_start>
     5c8:	ldr	w8, [x22, #56]
     5cc:	cmp	w8, #0x2
     5d0:	b.eq	754 <srunner_run_tagged+0x6d8>  // b.none
     5d4:	cmp	w8, #0x1
     5d8:	b.eq	600 <srunner_run_tagged+0x584>  // b.none
     5dc:	cbnz	w8, 92c <srunner_run_tagged+0x8b0>
     5e0:	adrp	x0, 0 <srunner_fork_status>
     5e4:	add	x0, x0, #0x0
     5e8:	bl	0 <getenv>
     5ec:	cbz	x0, 600 <srunner_run_tagged+0x584>
     5f0:	adrp	x1, 0 <srunner_fork_status>
     5f4:	add	x1, x1, #0x0
     5f8:	bl	0 <strcmp>
     5fc:	cbz	w0, 754 <srunner_run_tagged+0x6d8>
     600:	stur	wzr, [x29, #-12]
     604:	stp	xzr, xzr, [x29, #-32]
     608:	stp	xzr, xzr, [x29, #-48]
     60c:	bl	0 <fork>
     610:	cbz	w0, 944 <srunner_run_tagged+0x8c8>
     614:	mov	w23, w0
     618:	cmn	w0, #0x1
     61c:	b.eq	a1c <srunner_run_tagged+0x9a0>  // b.none
     620:	adrp	x8, 0 <srunner_fork_status>
     624:	str	w23, [x8]
     628:	adrp	x8, 0 <srunner_fork_status>
     62c:	strb	wzr, [x8]
     630:	bl	0 <check_get_clockid>
     634:	sub	x2, x29, #0x38
     638:	mov	x1, xzr
     63c:	bl	0 <timer_create>
     640:	cbnz	w0, a34 <srunner_run_tagged+0x9b8>
     644:	ldr	x8, [sp, #104]
     648:	ldur	x0, [x29, #-56]
     64c:	sub	x2, x29, #0x58
     650:	mov	w1, wzr
     654:	ldr	q0, [x8]
     658:	ldr	x8, [sp, #88]
     65c:	mov	x3, xzr
     660:	str	q0, [x8]
     664:	stp	xzr, xzr, [x29, #-88]
     668:	bl	0 <timer_settime>
     66c:	cbnz	w0, a4c <srunner_run_tagged+0x9d0>
     670:	sub	x1, x29, #0xc
     674:	mov	w0, w23
     678:	mov	w2, wzr
     67c:	bl	0 <waitpid>
     680:	cmn	w0, #0x1
     684:	b.eq	670 <srunner_run_tagged+0x5f4>  // b.none
     688:	ldur	x0, [x29, #-56]
     68c:	bl	0 <timer_delete>
     690:	mov	w1, #0x9                   	// #9
     694:	mov	w0, w23
     698:	bl	0 <killpg>
     69c:	mov	x20, x27
     6a0:	ldr	x22, [x27]
     6a4:	ldr	x8, [x19]
     6a8:	ldur	w27, [x29, #-12]
     6ac:	ldr	w25, [x19, #16]
     6b0:	ldrsb	w28, [x19, #20]
     6b4:	ldr	x19, [x8]
     6b8:	and	w23, w27, #0x7f
     6bc:	mov	w8, #0x1000000             	// #16777216
     6c0:	add	w21, w8, w23, lsl #24
     6c4:	mov	w8, #0x1ffffff             	// #33554431
     6c8:	cmp	w21, w8
     6cc:	cset	w8, gt
     6d0:	tst	w27, #0x7f
     6d4:	cset	w9, eq  // eq = none
     6d8:	cmp	w23, w25
     6dc:	cset	w10, ne  // ne = any
     6e0:	tst	w27, #0xff00
     6e4:	cset	w11, ne  // ne = any
     6e8:	and	w9, w9, w11
     6ec:	and	w8, w10, w8
     6f0:	orr	w0, w9, w8
     6f4:	bl	0 <receive_test_result>
     6f8:	cbz	x0, a64 <srunner_run_tagged+0x9e8>
     6fc:	mov	w8, #0x2000000             	// #33554432
     700:	mov	x24, x0
     704:	cmp	w21, w8
     708:	stp	x22, x19, [x0, #32]
     70c:	str	w26, [x0, #20]
     710:	b.lt	774 <srunner_run_tagged+0x6f8>  // b.tstop
     714:	cmp	w23, w25
     718:	b.ne	7cc <srunner_run_tagged+0x750>  // b.any
     71c:	adrp	x8, 0 <srunner_fork_status>
     720:	ldrb	w8, [x8]
     724:	ldr	x22, [sp, #80]
     728:	ldr	x21, [sp, #96]
     72c:	mov	x27, x20
     730:	cmp	w8, #0x1
     734:	b.ne	81c <srunner_run_tagged+0x7a0>  // b.any
     738:	ldr	x0, [x24, #48]
     73c:	mov	w8, #0x3                   	// #3
     740:	str	w8, [x24]
     744:	cbz	x0, 74c <srunner_run_tagged+0x6d0>
     748:	bl	0 <free>
     74c:	mov	w0, w25
     750:	b	7f4 <srunner_run_tagged+0x778>
     754:	mov	x0, x22
     758:	mov	x1, x27
     75c:	mov	x2, x19
     760:	mov	w3, w26
     764:	bl	d5c <tcase_run_tfun_nofork>
     768:	mov	x24, x0
     76c:	cbnz	x0, 844 <srunner_run_tagged+0x7c8>
     770:	b	5a8 <srunner_run_tagged+0x52c>
     774:	lsr	w19, w27, #8
     778:	cbz	w25, 800 <srunner_run_tagged+0x784>
     77c:	ldr	x22, [sp, #80]
     780:	ldr	x21, [sp, #96]
     784:	mov	x27, x20
     788:	cbnz	w23, 840 <srunner_run_tagged+0x7c4>
     78c:	ldr	x0, [x24, #48]
     790:	cbz	x0, 798 <srunner_run_tagged+0x71c>
     794:	bl	0 <free>
     798:	mov	w0, #0x64                  	// #100
     79c:	sxtb	w23, w19
     7a0:	bl	0 <emalloc>
     7a4:	adrp	x2, 0 <srunner_fork_status>
     7a8:	mov	w1, #0x64                  	// #100
     7ac:	add	x2, x2, #0x0
     7b0:	mov	w3, w23
     7b4:	mov	x25, x0
     7b8:	bl	0 <snprintf>
     7bc:	str	x25, [x24, #48]
     7c0:	mov	w8, #0x2                   	// #2
     7c4:	str	w8, [x24]
     7c8:	b	840 <srunner_run_tagged+0x7c4>
     7cc:	ldr	x0, [x24, #48]
     7d0:	ldr	x22, [sp, #80]
     7d4:	ldr	x21, [sp, #96]
     7d8:	mov	w8, #0x3                   	// #3
     7dc:	mov	x27, x20
     7e0:	str	w8, [x24]
     7e4:	cbz	w25, 87c <srunner_run_tagged+0x800>
     7e8:	cbz	x0, 7f0 <srunner_run_tagged+0x774>
     7ec:	bl	0 <free>
     7f0:	mov	w0, w23
     7f4:	mov	w1, w25
     7f8:	bl	1020 <signal_error_msg>
     7fc:	b	83c <srunner_run_tagged+0x7c0>
     800:	ldr	x22, [sp, #80]
     804:	ldr	x21, [sp, #96]
     808:	mov	x27, x20
     80c:	cbnz	w23, 840 <srunner_run_tagged+0x7c4>
     810:	sxtb	w23, w19
     814:	cmp	w23, w28
     818:	b.ne	8e4 <srunner_run_tagged+0x868>  // b.any
     81c:	ldr	x0, [x24, #48]
     820:	mov	w8, #0x1                   	// #1
     824:	str	w8, [x24]
     828:	cbz	x0, 830 <srunner_run_tagged+0x7b4>
     82c:	bl	0 <free>
     830:	adrp	x0, 0 <srunner_fork_status>
     834:	add	x0, x0, #0x0
     838:	bl	0 <strdup>
     83c:	str	x0, [x24, #48]
     840:	ldur	x19, [x29, #-96]
     844:	ldr	x0, [x22, #16]
     848:	mov	x1, x24
     84c:	bl	0 <check_list_add_end>
     850:	ldr	x8, [x22, #8]
     854:	ldr	w9, [x8]
     858:	add	w9, w9, #0x1
     85c:	str	w9, [x8]
     860:	ldr	w9, [x24]
     864:	cmp	w9, #0x3
     868:	b.eq	58c <srunner_run_tagged+0x510>  // b.none
     86c:	cmp	w9, #0x2
     870:	b.ne	59c <srunner_run_tagged+0x520>  // b.any
     874:	add	x8, x8, #0x4
     878:	b	590 <srunner_run_tagged+0x514>
     87c:	cbz	x0, 884 <srunner_run_tagged+0x808>
     880:	bl	0 <free>
     884:	mov	w0, #0x64                  	// #100
     888:	bl	0 <emalloc>
     88c:	adrp	x8, 0 <srunner_fork_status>
     890:	ldrb	w8, [x8]
     894:	mov	x25, x0
     898:	cmp	w8, #0x1
     89c:	b.ne	8bc <srunner_run_tagged+0x840>  // b.any
     8a0:	adrp	x9, 0 <srunner_fork_status>
     8a4:	add	x9, x9, #0x0
     8a8:	ldur	x8, [x9, #13]
     8ac:	ldr	q0, [x9]
     8b0:	stur	x8, [x25, #13]
     8b4:	str	q0, [x25]
     8b8:	b	914 <srunner_run_tagged+0x898>
     8bc:	mov	w0, w23
     8c0:	bl	0 <strsignal>
     8c4:	adrp	x2, 0 <srunner_fork_status>
     8c8:	mov	x4, x0
     8cc:	mov	w1, #0x64                  	// #100
     8d0:	mov	x0, x25
     8d4:	add	x2, x2, #0x0
     8d8:	mov	w3, w23
     8dc:	bl	0 <snprintf>
     8e0:	b	914 <srunner_run_tagged+0x898>
     8e4:	ldr	x8, [x24, #48]
     8e8:	cbnz	x8, 7c0 <srunner_run_tagged+0x744>
     8ec:	mov	w8, #0x3                   	// #3
     8f0:	mov	w0, #0x64                  	// #100
     8f4:	str	w8, [x24]
     8f8:	bl	0 <emalloc>
     8fc:	adrp	x2, 0 <srunner_fork_status>
     900:	mov	w1, #0x64                  	// #100
     904:	add	x2, x2, #0x0
     908:	mov	w3, w23
     90c:	mov	x25, x0
     910:	bl	0 <snprintf>
     914:	str	x25, [x24, #48]
     918:	b	840 <srunner_run_tagged+0x7c4>
     91c:	ldr	w9, [x8, #8]
     920:	add	w9, w9, #0x1
     924:	str	w9, [x8, #8]
     928:	b	3e8 <srunner_run_tagged+0x36c>
     92c:	adrp	x0, 0 <srunner_fork_status>
     930:	adrp	x1, 0 <srunner_fork_status>
     934:	add	x0, x0, #0x0
     938:	add	x1, x1, #0x0
     93c:	mov	w2, #0x10b                 	// #267
     940:	bl	0 <eprintf>
     944:	mov	w1, wzr
     948:	bl	0 <setpgid>
     94c:	bl	0 <getpgrp>
     950:	adrp	x8, 0 <srunner_fork_status>
     954:	str	w0, [x8]
     958:	mov	x0, x22
     95c:	mov	x1, x27
     960:	bl	f1c <tcase_run_checked_setup>
     964:	bl	0 <free>
     968:	bl	0 <check_get_clockid>
     96c:	sub	x1, x29, #0x20
     970:	bl	0 <clock_gettime>
     974:	ldr	x8, [x19]
     978:	ldr	x0, [x8]
     97c:	ldr	x1, [x8, #16]
     980:	ldr	w2, [x8, #24]
     984:	bl	0 <tcase_fn_start>
     988:	ldr	x8, [x19]
     98c:	mov	w0, w26
     990:	ldr	x8, [x8, #8]
     994:	blr	x8
     998:	bl	0 <check_get_clockid>
     99c:	sub	x1, x29, #0x30
     9a0:	bl	0 <clock_gettime>
     9a4:	mov	x0, x27
     9a8:	bl	f88 <tcase_run_checked_teardown>
     9ac:	ldur	w8, [x29, #-48]
     9b0:	ldur	w9, [x29, #-32]
     9b4:	ldur	x10, [x29, #-40]
     9b8:	ldur	x11, [x29, #-24]
     9bc:	sub	w8, w8, w9
     9c0:	mov	x9, #0xf7cf                	// #63439
     9c4:	movk	x9, #0xe353, lsl #16
     9c8:	movk	x9, #0x9ba5, lsl #32
     9cc:	movk	x9, #0x20c4, lsl #48
     9d0:	smulh	x9, x10, x9
     9d4:	mov	x10, #0x831                 	// #2097
     9d8:	movk	x10, #0x1cac, lsl #16
     9dc:	movk	x10, #0x645a, lsl #32
     9e0:	movk	x10, #0xdf3b, lsl #48
     9e4:	smulh	x10, x11, x10
     9e8:	lsr	x11, x9, #63
     9ec:	lsr	x9, x9, #7
     9f0:	add	w9, w9, w11
     9f4:	mov	w11, #0x4240                	// #16960
     9f8:	movk	w11, #0xf, lsl #16
     9fc:	madd	w8, w8, w11, w9
     a00:	lsr	x9, x10, #63
     a04:	lsr	x10, x10, #7
     a08:	add	w9, w10, w9
     a0c:	add	w0, w8, w9
     a10:	bl	0 <send_duration_info>
     a14:	mov	w0, wzr
     a18:	bl	0 <exit>
     a1c:	adrp	x0, 0 <srunner_fork_status>
     a20:	adrp	x1, 0 <srunner_fork_status>
     a24:	add	x0, x0, #0x0
     a28:	add	x1, x1, #0x0
     a2c:	mov	w2, #0x1e5                 	// #485
     a30:	bl	0 <eprintf>
     a34:	adrp	x0, 0 <srunner_fork_status>
     a38:	adrp	x1, 0 <srunner_fork_status>
     a3c:	add	x0, x0, #0x0
     a40:	add	x1, x1, #0x0
     a44:	mov	w2, #0x218                 	// #536
     a48:	bl	0 <eprintf>
     a4c:	adrp	x0, 0 <srunner_fork_status>
     a50:	adrp	x1, 0 <srunner_fork_status>
     a54:	add	x0, x0, #0x0
     a58:	add	x1, x1, #0x0
     a5c:	mov	w2, #0x210                 	// #528
     a60:	bl	0 <eprintf>
     a64:	adrp	x0, 0 <srunner_fork_status>
     a68:	adrp	x1, 0 <srunner_fork_status>
     a6c:	add	x0, x0, #0x0
     a70:	add	x1, x1, #0x0
     a74:	mov	w2, #0x22c                 	// #556
     a78:	bl	0 <eprintf>
     a7c:	adrp	x0, 0 <srunner_fork_status>
     a80:	adrp	x1, 0 <srunner_fork_status>
     a84:	add	x0, x0, #0x0
     a88:	add	x1, x1, #0x0
     a8c:	mov	w2, #0x31e                 	// #798
     a90:	mov	w3, w20
     a94:	bl	0 <eprintf>

0000000000000a98 <sig_handler>:
     a98:	stp	x29, x30, [sp, #-32]!
     a9c:	stp	x20, x19, [sp, #16]
     aa0:	mov	w19, w0
     aa4:	cmp	w0, #0x2
     aa8:	mov	x29, sp
     aac:	b.eq	af8 <sig_handler+0x60>  // b.none
     ab0:	cmp	w19, #0xf
     ab4:	b.eq	adc <sig_handler+0x44>  // b.none
     ab8:	cmp	w19, #0xe
     abc:	b.ne	b30 <sig_handler+0x98>  // b.any
     ac0:	adrp	x8, 0 <srunner_fork_status>
     ac4:	ldr	w0, [x8]
     ac8:	adrp	x8, 0 <srunner_fork_status>
     acc:	mov	w9, #0x1                   	// #1
     ad0:	mov	w1, #0x9                   	// #9
     ad4:	strb	w9, [x8]
     ad8:	b	b24 <sig_handler+0x8c>
     adc:	adrp	x1, 0 <srunner_fork_status>
     ae0:	add	x1, x1, #0x0
     ae4:	mov	w0, #0xf                   	// #15
     ae8:	mov	x2, xzr
     aec:	mov	w20, #0xf                   	// #15
     af0:	bl	0 <sigaction>
     af4:	b	b0c <sig_handler+0x74>
     af8:	adrp	x1, 0 <srunner_fork_status>
     afc:	add	x1, x1, #0x0
     b00:	mov	x2, xzr
     b04:	bl	0 <sigaction>
     b08:	mov	w20, #0x9                   	// #9
     b0c:	adrp	x8, 0 <srunner_fork_status>
     b10:	ldr	w0, [x8]
     b14:	mov	w1, w20
     b18:	bl	0 <killpg>
     b1c:	bl	0 <getpgrp>
     b20:	mov	w1, w19
     b24:	ldp	x20, x19, [sp, #16]
     b28:	ldp	x29, x30, [sp], #32
     b2c:	b	0 <killpg>
     b30:	adrp	x0, 0 <srunner_fork_status>
     b34:	adrp	x1, 0 <srunner_fork_status>
     b38:	add	x0, x0, #0x0
     b3c:	add	x1, x1, #0x0
     b40:	mov	w2, #0x8e                  	// #142
     b44:	mov	w3, w19
     b48:	bl	0 <eprintf>

0000000000000b4c <check_fork>:
     b4c:	stp	x29, x30, [sp, #-32]!
     b50:	str	x19, [sp, #16]
     b54:	mov	x29, sp
     b58:	bl	0 <fork>
     b5c:	mov	w19, w0
     b60:	tbnz	w0, #31, b74 <check_fork+0x28>
     b64:	adrp	x8, 0 <srunner_fork_status>
     b68:	ldr	w1, [x8]
     b6c:	mov	w0, w19
     b70:	bl	0 <setpgid>
     b74:	mov	w0, w19
     b78:	ldr	x19, [sp, #16]
     b7c:	ldp	x29, x30, [sp], #32
     b80:	ret

0000000000000b84 <check_waitpid_and_exit>:
     b84:	stp	x29, x30, [sp, #-32]!
     b88:	cmp	w0, #0x1
     b8c:	str	x19, [sp, #16]
     b90:	mov	x29, sp
     b94:	b.lt	bf4 <check_waitpid_and_exit+0x70>  // b.tstop
     b98:	mov	w19, w0
     b9c:	add	x1, x29, #0x1c
     ba0:	mov	w0, w19
     ba4:	mov	w2, wzr
     ba8:	bl	0 <waitpid>
     bac:	cmn	w0, #0x1
     bb0:	b.eq	b9c <check_waitpid_and_exit+0x18>  // b.none
     bb4:	ldr	w10, [x29, #28]
     bb8:	mov	w8, #0x1000000             	// #16777216
     bbc:	mov	w9, #0x1ffffff             	// #33554431
     bc0:	and	w11, w10, #0x7f
     bc4:	add	w8, w8, w11, lsl #24
     bc8:	cmp	w8, w9
     bcc:	cset	w8, gt
     bd0:	tst	w10, #0x7f
     bd4:	cset	w11, eq  // eq = none
     bd8:	cset	w9, ne  // ne = any
     bdc:	tst	w10, #0xff00
     be0:	cset	w10, ne  // ne = any
     be4:	and	w10, w11, w10
     be8:	tbnz	w10, #0, bfc <check_waitpid_and_exit+0x78>
     bec:	and	w8, w9, w8
     bf0:	cbnz	w8, bfc <check_waitpid_and_exit+0x78>
     bf4:	mov	w0, wzr
     bf8:	bl	0 <exit>
     bfc:	mov	w0, #0x1                   	// #1
     c00:	bl	0 <exit>

0000000000000c04 <srunner_run_setup>:
     c04:	str	d8, [sp, #-96]!
     c08:	stp	x22, x21, [sp, #64]
     c0c:	stp	x20, x19, [sp, #80]
     c10:	mov	x19, x3
     c14:	mov	x20, x2
     c18:	mov	w21, w1
     c1c:	cmp	w1, #0x1
     c20:	mov	x22, x0
     c24:	stp	x29, x30, [sp, #16]
     c28:	stp	x26, x25, [sp, #32]
     c2c:	stp	x24, x23, [sp, #48]
     c30:	mov	x29, sp
     c34:	b.ne	c40 <srunner_run_setup+0x3c>  // b.any
     c38:	mov	w0, #0x1                   	// #1
     c3c:	bl	0 <send_ctx_info>
     c40:	mov	x0, x22
     c44:	bl	0 <check_list_front>
     c48:	mov	x0, x22
     c4c:	bl	0 <check_list_at_end>
     c50:	cbz	w0, c78 <srunner_run_setup+0x74>
     c54:	mov	x25, xzr
     c58:	mov	x0, x25
     c5c:	ldp	x20, x19, [sp, #80]
     c60:	ldp	x22, x21, [sp, #64]
     c64:	ldp	x24, x23, [sp, #48]
     c68:	ldp	x26, x25, [sp, #32]
     c6c:	ldp	x29, x30, [sp, #16]
     c70:	ldr	d8, [sp], #96
     c74:	ret
     c78:	adrp	x23, 0 <error_jmp_buffer>
     c7c:	adrp	x24, 0 <srunner_fork_status>
     c80:	mov	w26, #0x1                   	// #1
     c84:	add	x23, x23, #0x0
     c88:	movi	d8, #0xffffffff00000000
     c8c:	add	x24, x24, #0x0
     c90:	b	cb0 <srunner_run_setup+0xac>
     c94:	ldr	x8, [x25, #8]
     c98:	blr	x8
     c9c:	mov	x0, x22
     ca0:	bl	0 <check_list_advance>
     ca4:	mov	x0, x22
     ca8:	bl	0 <check_list_at_end>
     cac:	cbnz	w0, c54 <srunner_run_setup+0x50>
     cb0:	mov	x0, x22
     cb4:	bl	0 <check_list_val>
     cb8:	cmp	w21, #0x2
     cbc:	mov	x25, x0
     cc0:	b.ne	c94 <srunner_run_setup+0x90>  // b.any
     cc4:	mov	w0, #0x1                   	// #1
     cc8:	bl	0 <send_ctx_info>
     ccc:	mov	x0, x23
     cd0:	bl	0 <_setjmp>
     cd4:	cbnz	w0, ce0 <srunner_run_setup+0xdc>
     cd8:	ldr	x8, [x25, #8]
     cdc:	blr	x8
     ce0:	mov	w0, wzr
     ce4:	bl	0 <receive_test_result>
     ce8:	cbz	x0, d44 <srunner_run_setup+0x140>
     cec:	ldr	x8, [x0, #48]
     cf0:	mov	x25, x0
     cf4:	stp	x20, x19, [x0, #32]
     cf8:	stur	d8, [x0, #20]
     cfc:	cbnz	x8, d38 <srunner_run_setup+0x134>
     d00:	mov	x0, x24
     d04:	str	w26, [x25]
     d08:	bl	0 <strdup>
     d0c:	ldr	w8, [x25]
     d10:	str	x0, [x25, #48]
     d14:	cmp	w8, #0x1
     d18:	b.ne	c58 <srunner_run_setup+0x54>  // b.any
     d1c:	ldr	x0, [x25, #8]
     d20:	bl	0 <free>
     d24:	ldr	x0, [x25, #48]
     d28:	bl	0 <free>
     d2c:	mov	x0, x25
     d30:	bl	0 <free>
     d34:	b	c9c <srunner_run_setup+0x98>
     d38:	mov	w8, #0x2                   	// #2
     d3c:	str	w8, [x25]
     d40:	b	c58 <srunner_run_setup+0x54>
     d44:	adrp	x0, 0 <srunner_fork_status>
     d48:	adrp	x1, 0 <srunner_fork_status>
     d4c:	add	x0, x0, #0x0
     d50:	add	x1, x1, #0x0
     d54:	mov	w2, #0x1b8                 	// #440
     d58:	bl	0 <eprintf>

0000000000000d5c <tcase_run_tfun_nofork>:
     d5c:	sub	sp, sp, #0x70
     d60:	stp	x29, x30, [sp, #32]
     d64:	stp	x26, x25, [sp, #48]
     d68:	stp	x24, x23, [sp, #64]
     d6c:	stp	x22, x21, [sp, #80]
     d70:	stp	x20, x19, [sp, #96]
     d74:	stp	xzr, xzr, [sp, #16]
     d78:	stp	xzr, xzr, [sp]
     d7c:	ldr	w23, [x0, #56]
     d80:	ldr	x22, [x1, #48]
     d84:	mov	w19, w3
     d88:	mov	x20, x1
     d8c:	mov	x21, x2
     d90:	add	x29, sp, #0x20
     d94:	cbnz	w23, dc0 <tcase_run_tfun_nofork+0x64>
     d98:	adrp	x0, 0 <srunner_fork_status>
     d9c:	add	x0, x0, #0x0
     da0:	bl	0 <getenv>
     da4:	mov	w23, #0x1                   	// #1
     da8:	cbz	x0, dc0 <tcase_run_tfun_nofork+0x64>
     dac:	adrp	x1, 0 <srunner_fork_status>
     db0:	add	x1, x1, #0x0
     db4:	bl	0 <strcmp>
     db8:	cmp	w0, #0x0
     dbc:	cinc	w23, w23, eq  // eq = none
     dc0:	ldr	x2, [x20]
     dc4:	adrp	x3, 0 <srunner_fork_status>
     dc8:	add	x3, x3, #0x0
     dcc:	mov	x0, x22
     dd0:	mov	w1, w23
     dd4:	bl	c04 <srunner_run_setup>
     dd8:	mov	x22, x0
     ddc:	cbnz	x0, ee4 <tcase_run_tfun_nofork+0x188>
     de0:	bl	0 <check_get_clockid>
     de4:	add	x1, sp, #0x10
     de8:	bl	0 <clock_gettime>
     dec:	adrp	x0, 0 <error_jmp_buffer>
     df0:	add	x0, x0, #0x0
     df4:	bl	0 <_setjmp>
     df8:	cbnz	w0, e20 <tcase_run_tfun_nofork+0xc4>
     dfc:	ldr	x8, [x21]
     e00:	ldr	x0, [x8]
     e04:	ldr	x1, [x8, #16]
     e08:	ldr	w2, [x8, #24]
     e0c:	bl	0 <tcase_fn_start>
     e10:	ldr	x8, [x21]
     e14:	mov	w0, w19
     e18:	ldr	x8, [x8, #8]
     e1c:	blr	x8
     e20:	bl	0 <check_get_clockid>
     e24:	mov	x1, sp
     e28:	bl	0 <clock_gettime>
     e2c:	ldr	x0, [x20, #56]
     e30:	mov	w1, #0x2                   	// #2
     e34:	bl	f94 <srunner_run_teardown>
     e38:	ldr	x8, [x21]
     e3c:	ldr	x23, [x20]
     e40:	ldp	x25, x20, [sp]
     e44:	ldp	x26, x21, [sp, #16]
     e48:	ldr	x24, [x8]
     e4c:	mov	w0, wzr
     e50:	bl	0 <receive_test_result>
     e54:	cbz	x0, f04 <tcase_run_tfun_nofork+0x1a8>
     e58:	mov	x10, #0xf7cf                	// #63439
     e5c:	movk	x10, #0xe353, lsl #16
     e60:	mov	x11, #0x831                 	// #2097
     e64:	movk	x10, #0x9ba5, lsl #32
     e68:	movk	x11, #0x1cac, lsl #16
     e6c:	movk	x10, #0x20c4, lsl #48
     e70:	movk	x11, #0x645a, lsl #32
     e74:	movk	x11, #0xdf3b, lsl #48
     e78:	smulh	x10, x20, x10
     e7c:	mov	w9, #0x4240                	// #16960
     e80:	ldr	x12, [x0, #48]
     e84:	smulh	x11, x21, x11
     e88:	lsr	x13, x10, #63
     e8c:	lsr	x10, x10, #7
     e90:	sub	w8, w25, w26
     e94:	movk	w9, #0xf, lsl #16
     e98:	lsr	x14, x11, #63
     e9c:	lsr	x11, x11, #7
     ea0:	add	w10, w10, w13
     ea4:	add	w11, w11, w14
     ea8:	madd	w8, w8, w9, w10
     eac:	mov	x22, x0
     eb0:	add	w8, w8, w11
     eb4:	stp	x23, x24, [x0, #32]
     eb8:	stp	w19, w8, [x0, #20]
     ebc:	cbz	x12, ecc <tcase_run_tfun_nofork+0x170>
     ec0:	mov	w8, #0x2                   	// #2
     ec4:	str	w8, [x22]
     ec8:	b	ee4 <tcase_run_tfun_nofork+0x188>
     ecc:	adrp	x0, 0 <srunner_fork_status>
     ed0:	mov	w8, #0x1                   	// #1
     ed4:	add	x0, x0, #0x0
     ed8:	str	w8, [x22]
     edc:	bl	0 <strdup>
     ee0:	str	x0, [x22, #48]
     ee4:	mov	x0, x22
     ee8:	ldp	x20, x19, [sp, #96]
     eec:	ldp	x22, x21, [sp, #80]
     ef0:	ldp	x24, x23, [sp, #64]
     ef4:	ldp	x26, x25, [sp, #48]
     ef8:	ldp	x29, x30, [sp, #32]
     efc:	add	sp, sp, #0x70
     f00:	ret
     f04:	adrp	x0, 0 <srunner_fork_status>
     f08:	adrp	x1, 0 <srunner_fork_status>
     f0c:	add	x0, x0, #0x0
     f10:	add	x1, x1, #0x0
     f14:	mov	w2, #0x1b8                 	// #440
     f18:	bl	0 <eprintf>

0000000000000f1c <tcase_run_checked_setup>:
     f1c:	stp	x29, x30, [sp, #-48]!
     f20:	stp	x20, x19, [sp, #32]
     f24:	str	x21, [sp, #16]
     f28:	ldr	w21, [x0, #56]
     f2c:	ldr	x20, [x1, #48]
     f30:	mov	x19, x1
     f34:	mov	x29, sp
     f38:	cbnz	w21, f64 <tcase_run_checked_setup+0x48>
     f3c:	adrp	x0, 0 <srunner_fork_status>
     f40:	add	x0, x0, #0x0
     f44:	bl	0 <getenv>
     f48:	mov	w21, #0x1                   	// #1
     f4c:	cbz	x0, f64 <tcase_run_checked_setup+0x48>
     f50:	adrp	x1, 0 <srunner_fork_status>
     f54:	add	x1, x1, #0x0
     f58:	bl	0 <strcmp>
     f5c:	cmp	w0, #0x0
     f60:	cinc	w21, w21, eq  // eq = none
     f64:	ldr	x2, [x19]
     f68:	mov	x0, x20
     f6c:	mov	w1, w21
     f70:	ldp	x20, x19, [sp, #32]
     f74:	ldr	x21, [sp, #16]
     f78:	adrp	x3, 0 <srunner_fork_status>
     f7c:	add	x3, x3, #0x0
     f80:	ldp	x29, x30, [sp], #48
     f84:	b	c04 <srunner_run_setup>

0000000000000f88 <tcase_run_checked_teardown>:
     f88:	ldr	x0, [x0, #56]
     f8c:	mov	w1, #0x2                   	// #2
     f90:	b	f94 <srunner_run_teardown>

0000000000000f94 <srunner_run_teardown>:
     f94:	stp	x29, x30, [sp, #-48]!
     f98:	stp	x22, x21, [sp, #16]
     f9c:	stp	x20, x19, [sp, #32]
     fa0:	mov	x29, sp
     fa4:	mov	w19, w1
     fa8:	mov	x20, x0
     fac:	bl	0 <check_list_front>
     fb0:	mov	x0, x20
     fb4:	bl	0 <check_list_at_end>
     fb8:	cbz	w0, fcc <srunner_run_teardown+0x38>
     fbc:	ldp	x20, x19, [sp, #32]
     fc0:	ldp	x22, x21, [sp, #16]
     fc4:	ldp	x29, x30, [sp], #48
     fc8:	ret
     fcc:	adrp	x21, 0 <error_jmp_buffer>
     fd0:	add	x21, x21, #0x0
     fd4:	b	ff4 <srunner_run_teardown+0x60>
     fd8:	ldr	x8, [x22, #8]
     fdc:	blr	x8
     fe0:	mov	x0, x20
     fe4:	bl	0 <check_list_advance>
     fe8:	mov	x0, x20
     fec:	bl	0 <check_list_at_end>
     ff0:	cbnz	w0, fbc <srunner_run_teardown+0x28>
     ff4:	mov	x0, x20
     ff8:	bl	0 <check_list_val>
     ffc:	mov	x22, x0
    1000:	mov	w0, #0x3                   	// #3
    1004:	bl	0 <send_ctx_info>
    1008:	cmp	w19, #0x2
    100c:	b.ne	fd8 <srunner_run_teardown+0x44>  // b.any
    1010:	mov	x0, x21
    1014:	bl	0 <_setjmp>
    1018:	cbz	w0, fd8 <srunner_run_teardown+0x44>
    101c:	b	fbc <srunner_run_teardown+0x28>

0000000000001020 <signal_error_msg>:
    1020:	stp	x29, x30, [sp, #-64]!
    1024:	stp	x22, x21, [sp, #32]
    1028:	mov	w22, w0
    102c:	mov	w0, #0x64                  	// #100
    1030:	str	x23, [sp, #16]
    1034:	stp	x20, x19, [sp, #48]
    1038:	mov	x29, sp
    103c:	mov	w20, w1
    1040:	bl	0 <emalloc>
    1044:	mov	x19, x0
    1048:	mov	w0, w22
    104c:	bl	0 <strsignal>
    1050:	bl	0 <strdup>
    1054:	mov	x21, x0
    1058:	mov	w0, w20
    105c:	bl	0 <strsignal>
    1060:	bl	0 <strdup>
    1064:	adrp	x8, 0 <srunner_fork_status>
    1068:	ldrb	w8, [x8]
    106c:	mov	x23, x0
    1070:	cmp	w8, #0x1
    1074:	b.ne	1098 <signal_error_msg+0x78>  // b.any
    1078:	adrp	x2, 0 <srunner_fork_status>
    107c:	add	x2, x2, #0x0
    1080:	mov	w1, #0x64                  	// #100
    1084:	mov	x0, x19
    1088:	mov	w3, w20
    108c:	mov	x4, x23
    1090:	bl	0 <snprintf>
    1094:	b	10bc <signal_error_msg+0x9c>
    1098:	adrp	x2, 0 <srunner_fork_status>
    109c:	add	x2, x2, #0x0
    10a0:	mov	w1, #0x64                  	// #100
    10a4:	mov	x0, x19
    10a8:	mov	w3, w22
    10ac:	mov	x4, x21
    10b0:	mov	w5, w20
    10b4:	mov	x6, x23
    10b8:	bl	0 <snprintf>
    10bc:	mov	x0, x21
    10c0:	bl	0 <free>
    10c4:	mov	x0, x23
    10c8:	bl	0 <free>
    10cc:	mov	x0, x19
    10d0:	ldp	x20, x19, [sp, #48]
    10d4:	ldp	x22, x21, [sp, #32]
    10d8:	ldr	x23, [sp, #16]
    10dc:	ldp	x29, x30, [sp], #64
    10e0:	ret

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <tr_str>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	ldp	w8, w11, [x0]
   c:	ldr	x1, [x0, #8]
  10:	ldr	w2, [x0, #16]
  14:	adrp	x9, 0 <tr_str>
  18:	adrp	x10, 0 <tr_str>
  1c:	add	x9, x9, #0x0
  20:	add	x10, x10, #0x0
  24:	cmp	w8, #0x3
  28:	csel	x7, x10, x9, eq  // eq = none
  2c:	cmp	w11, #0x2
  30:	add	x29, sp, #0x10
  34:	b.ne	54 <tr_str+0x54>  // b.any
  38:	sub	w8, w8, #0x1
  3c:	cmp	w8, #0x2
  40:	b.hi	60 <tr_str+0x60>  // b.pmore
  44:	adrp	x9, 0 <tr_str>
  48:	add	x9, x9, #0x0
  4c:	ldr	x3, [x9, w8, sxtw #3]
  50:	b	64 <tr_str+0x64>
  54:	adrp	x3, 0 <tr_str>
  58:	add	x3, x3, #0x0
  5c:	b	64 <tr_str+0x64>
  60:	mov	x3, xzr
  64:	ldp	x4, x5, [x0, #32]
  68:	ldr	w6, [x0, #20]
  6c:	ldr	x8, [x0, #48]
  70:	adrp	x0, 0 <tr_str>
  74:	add	x0, x0, #0x0
  78:	str	x8, [sp]
  7c:	bl	8c <ck_strdup_printf>
  80:	ldp	x29, x30, [sp, #16]
  84:	add	sp, sp, #0x20
  88:	ret

000000000000008c <ck_strdup_printf>:
  8c:	sub	sp, sp, #0x150
  90:	stp	x29, x30, [sp, #256]
  94:	stp	x20, x19, [sp, #320]
  98:	add	x29, sp, #0x100
  9c:	mov	x19, x0
  a0:	mov	w0, #0x64                  	// #100
  a4:	stp	x28, x25, [sp, #272]
  a8:	stp	x24, x23, [sp, #288]
  ac:	stp	x22, x21, [sp, #304]
  b0:	stp	x1, x2, [x29, #-120]
  b4:	stp	x3, x4, [x29, #-104]
  b8:	stp	x5, x6, [x29, #-88]
  bc:	stur	x7, [x29, #-72]
  c0:	stp	q0, q1, [sp]
  c4:	stp	q2, q3, [sp, #32]
  c8:	stp	q4, q5, [sp, #64]
  cc:	stp	q6, q7, [sp, #96]
  d0:	bl	0 <emalloc>
  d4:	sub	x8, x29, #0x78
  d8:	mov	x9, sp
  dc:	mov	x23, #0xffffffffffffffc8    	// #-56
  e0:	add	x22, x29, #0x50
  e4:	movk	x23, #0xff80, lsl #32
  e8:	add	x24, x8, #0x38
  ec:	add	x25, x9, #0x80
  f0:	stp	x22, x24, [x29, #-32]
  f4:	stp	x25, x23, [x29, #-16]
  f8:	ldp	q0, q1, [x29, #-32]
  fc:	sub	x3, x29, #0x40
 100:	mov	w1, #0x64                  	// #100
 104:	mov	x2, x19
 108:	mov	x20, x0
 10c:	stp	q0, q1, [x29, #-64]
 110:	bl	0 <vsnprintf>
 114:	cmp	w0, #0x64
 118:	b.cc	17c <ck_strdup_printf+0xf0>  // b.lo, b.ul, b.last
 11c:	mvn	w8, w0
 120:	lsr	w8, w8, #31
 124:	mov	w21, #0x64                  	// #100
 128:	sxtw	x9, w0
 12c:	lsl	x10, x21, #1
 130:	tst	w8, #0x1
 134:	csinc	x21, x10, x9, eq  // eq = none
 138:	mov	x0, x20
 13c:	mov	x1, x21
 140:	bl	0 <erealloc>
 144:	stp	x22, x24, [x29, #-32]
 148:	stp	x25, x23, [x29, #-16]
 14c:	ldp	q0, q1, [x29, #-32]
 150:	sub	x3, x29, #0x40
 154:	mov	x1, x21
 158:	mov	x2, x19
 15c:	mov	x20, x0
 160:	stp	q0, q1, [x29, #-64]
 164:	bl	0 <vsnprintf>
 168:	mvn	w8, w0
 16c:	lsr	w8, w8, #31
 170:	tbnz	w0, #31, 128 <ck_strdup_printf+0x9c>
 174:	cmp	w0, w21
 178:	b.ge	128 <ck_strdup_printf+0x9c>  // b.tcont
 17c:	mov	x0, x20
 180:	ldp	x20, x19, [sp, #320]
 184:	ldp	x22, x21, [sp, #304]
 188:	ldp	x24, x23, [sp, #288]
 18c:	ldp	x28, x25, [sp, #272]
 190:	ldp	x29, x30, [sp, #256]
 194:	add	sp, sp, #0x150
 198:	ret

000000000000019c <tr_short_str>:
 19c:	ldr	w8, [x0]
 1a0:	ldr	x1, [x0, #8]
 1a4:	ldr	w2, [x0, #16]
 1a8:	ldr	x4, [x0, #48]
 1ac:	adrp	x9, 0 <tr_str>
 1b0:	adrp	x10, 0 <tr_str>
 1b4:	add	x9, x9, #0x0
 1b8:	add	x10, x10, #0x0
 1bc:	cmp	w8, #0x3
 1c0:	adrp	x0, 0 <tr_str>
 1c4:	csel	x3, x10, x9, eq  // eq = none
 1c8:	add	x0, x0, #0x0
 1cc:	b	8c <ck_strdup_printf>

00000000000001d0 <sr_stat_str>:
 1d0:	ldr	x8, [x0, #8]
 1d4:	ldr	w3, [x8, #4]
 1d8:	cbnz	w3, 1e4 <sr_stat_str+0x14>
 1dc:	ldr	w9, [x8, #8]
 1e0:	cbz	w9, 230 <sr_stat_str+0x60>
 1e4:	ldr	w2, [x8]
 1e8:	ldr	w4, [x8, #8]
 1ec:	cbz	w2, 220 <sr_stat_str+0x50>
 1f0:	sub	w8, w2, w3
 1f4:	sub	w8, w8, w4
 1f8:	scvtf	s0, w2
 1fc:	scvtf	s1, w8
 200:	mov	w8, #0x42c80000            	// #1120403456
 204:	fdiv	s0, s1, s0
 208:	fmov	s1, w8
 20c:	fmul	s0, s0, s1
 210:	adrp	x0, 0 <tr_str>
 214:	fcvtzs	w1, s0
 218:	add	x0, x0, #0x0
 21c:	b	8c <ck_strdup_printf>
 220:	adrp	x0, 0 <tr_str>
 224:	mov	w1, wzr
 228:	add	x0, x0, #0x0
 22c:	b	8c <ck_strdup_printf>
 230:	ldr	w2, [x8]
 234:	adrp	x0, 0 <tr_str>
 238:	mov	w4, wzr
 23c:	mov	w1, #0x64                  	// #100
 240:	add	x0, x0, #0x0
 244:	b	8c <ck_strdup_printf>

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <ck_do_nothing>
   8:	adrp	x1, 0 <ck_do_nothing>
   c:	adrp	x3, 0 <ck_do_nothing>
  10:	add	x0, x0, #0x0
  14:	add	x1, x1, #0x0
  18:	add	x3, x3, #0x0
  1c:	mov	w2, #0x1a                  	// #26
  20:	mov	x29, sp
  24:	bl	0 <__assert_fail>
