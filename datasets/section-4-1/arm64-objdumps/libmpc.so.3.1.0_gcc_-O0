
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libmpc.so.3.1.0_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000004a20 <.init>:
    4a20:	stp	x29, x30, [sp, #-16]!
    4a24:	mov	x29, sp
    4a28:	bl	56d0 <mpfr_get_emin_min@plt+0x10>
    4a2c:	ldp	x29, x30, [sp], #16
    4a30:	ret

Disassembly of section .plt:

0000000000004a40 <mpfr_set_underflow@plt-0x20>:
    4a40:	stp	x16, x30, [sp, #-16]!
    4a44:	adrp	x16, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    4a48:	ldr	x17, [x16, #4088]
    4a4c:	add	x16, x16, #0xff8
    4a50:	br	x17
    4a54:	nop
    4a58:	nop
    4a5c:	nop

0000000000004a60 <mpfr_set_underflow@plt>:
    4a60:	adrp	x16, 2d000 <mpfr_set_underflow>
    4a64:	ldr	x17, [x16]
    4a68:	add	x16, x16, #0x0
    4a6c:	br	x17

0000000000004a70 <__gmpz_get_si@plt>:
    4a70:	adrp	x16, 2d000 <mpfr_set_underflow>
    4a74:	ldr	x17, [x16, #8]
    4a78:	add	x16, x16, #0x8
    4a7c:	br	x17

0000000000004a80 <mpfr_set_ld@plt>:
    4a80:	adrp	x16, 2d000 <mpfr_set_underflow>
    4a84:	ldr	x17, [x16, #16]
    4a88:	add	x16, x16, #0x10
    4a8c:	br	x17

0000000000004a90 <mpfr_mul_ui@plt>:
    4a90:	adrp	x16, 2d000 <mpfr_set_underflow>
    4a94:	ldr	x17, [x16, #24]
    4a98:	add	x16, x16, #0x18
    4a9c:	br	x17

0000000000004aa0 <mpfr_mul_q@plt>:
    4aa0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4aa4:	ldr	x17, [x16, #32]
    4aa8:	add	x16, x16, #0x20
    4aac:	br	x17

0000000000004ab0 <mpfr_set_si_2exp@plt>:
    4ab0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ab4:	ldr	x17, [x16, #40]
    4ab8:	add	x16, x16, #0x28
    4abc:	br	x17

0000000000004ac0 <__gmpz_scan1@plt>:
    4ac0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ac4:	ldr	x17, [x16, #48]
    4ac8:	add	x16, x16, #0x30
    4acc:	br	x17

0000000000004ad0 <strlen@plt>:
    4ad0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ad4:	ldr	x17, [x16, #56]
    4ad8:	add	x16, x16, #0x38
    4adc:	br	x17

0000000000004ae0 <mpc_clear@plt>:
    4ae0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ae4:	ldr	x17, [x16, #64]
    4ae8:	add	x16, x16, #0x40
    4aec:	br	x17

0000000000004af0 <mpfr_cosh@plt>:
    4af0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4af4:	ldr	x17, [x16, #72]
    4af8:	add	x16, x16, #0x48
    4afc:	br	x17

0000000000004b00 <mpfr_tanh@plt>:
    4b00:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b04:	ldr	x17, [x16, #80]
    4b08:	add	x16, x16, #0x50
    4b0c:	br	x17

0000000000004b10 <mpfr_set_nan@plt>:
    4b10:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b14:	ldr	x17, [x16, #88]
    4b18:	add	x16, x16, #0x58
    4b1c:	br	x17

0000000000004b20 <mpfr_clear_overflow@plt>:
    4b20:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b24:	ldr	x17, [x16, #96]
    4b28:	add	x16, x16, #0x60
    4b2c:	br	x17

0000000000004b30 <mpfr_sub@plt>:
    4b30:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b34:	ldr	x17, [x16, #104]
    4b38:	add	x16, x16, #0x68
    4b3c:	br	x17

0000000000004b40 <mpfr_mul_2si@plt>:
    4b40:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b44:	ldr	x17, [x16, #112]
    4b48:	add	x16, x16, #0x70
    4b4c:	br	x17

0000000000004b50 <mpfr_const_pi@plt>:
    4b50:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b54:	ldr	x17, [x16, #120]
    4b58:	add	x16, x16, #0x78
    4b5c:	br	x17

0000000000004b60 <mpfr_fmms@plt>:
    4b60:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b64:	ldr	x17, [x16, #128]
    4b68:	add	x16, x16, #0x80
    4b6c:	br	x17

0000000000004b70 <mpfr_init@plt>:
    4b70:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b74:	ldr	x17, [x16, #136]
    4b78:	add	x16, x16, #0x88
    4b7c:	br	x17

0000000000004b80 <mpfr_tan@plt>:
    4b80:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b84:	ldr	x17, [x16, #144]
    4b88:	add	x16, x16, #0x90
    4b8c:	br	x17

0000000000004b90 <mpfr_strtofr@plt>:
    4b90:	adrp	x16, 2d000 <mpfr_set_underflow>
    4b94:	ldr	x17, [x16, #152]
    4b98:	add	x16, x16, #0x98
    4b9c:	br	x17

0000000000004ba0 <__gmpz_sub_ui@plt>:
    4ba0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ba4:	ldr	x17, [x16, #160]
    4ba8:	add	x16, x16, #0xa0
    4bac:	br	x17

0000000000004bb0 <__gmp_get_memory_functions@plt>:
    4bb0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4bb4:	ldr	x17, [x16, #168]
    4bb8:	add	x16, x16, #0xa8
    4bbc:	br	x17

0000000000004bc0 <__gmpz_sqrt@plt>:
    4bc0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4bc4:	ldr	x17, [x16, #176]
    4bc8:	add	x16, x16, #0xb0
    4bcc:	br	x17

0000000000004bd0 <mpfr_set_erangeflag@plt>:
    4bd0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4bd4:	ldr	x17, [x16, #184]
    4bd8:	add	x16, x16, #0xb8
    4bdc:	br	x17

0000000000004be0 <__gmpz_set_ui@plt>:
    4be0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4be4:	ldr	x17, [x16, #192]
    4be8:	add	x16, x16, #0xc0
    4bec:	br	x17

0000000000004bf0 <__cxa_finalize@plt>:
    4bf0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4bf4:	ldr	x17, [x16, #200]
    4bf8:	add	x16, x16, #0xc8
    4bfc:	br	x17

0000000000004c00 <sprintf@plt>:
    4c00:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c04:	ldr	x17, [x16, #208]
    4c08:	add	x16, x16, #0xd0
    4c0c:	br	x17

0000000000004c10 <mpc_sqrt@plt>:
    4c10:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c14:	ldr	x17, [x16, #216]
    4c18:	add	x16, x16, #0xd8
    4c1c:	br	x17

0000000000004c20 <mpfr_get_d@plt>:
    4c20:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c24:	ldr	x17, [x16, #224]
    4c28:	add	x16, x16, #0xe0
    4c2c:	br	x17

0000000000004c30 <mpfr_set_f@plt>:
    4c30:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c34:	ldr	x17, [x16, #232]
    4c38:	add	x16, x16, #0xe8
    4c3c:	br	x17

0000000000004c40 <mpfr_mul@plt>:
    4c40:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c44:	ldr	x17, [x16, #240]
    4c48:	add	x16, x16, #0xf0
    4c4c:	br	x17

0000000000004c50 <mpfr_neg@plt>:
    4c50:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c54:	ldr	x17, [x16, #248]
    4c58:	add	x16, x16, #0xf8
    4c5c:	br	x17

0000000000004c60 <mpfr_pow@plt>:
    4c60:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c64:	ldr	x17, [x16, #256]
    4c68:	add	x16, x16, #0x100
    4c6c:	br	x17

0000000000004c70 <fputc@plt>:
    4c70:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c74:	ldr	x17, [x16, #264]
    4c78:	add	x16, x16, #0x108
    4c7c:	br	x17

0000000000004c80 <mpfr_nextbelow@plt>:
    4c80:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c84:	ldr	x17, [x16, #272]
    4c88:	add	x16, x16, #0x110
    4c8c:	br	x17

0000000000004c90 <__gmpz_sub@plt>:
    4c90:	adrp	x16, 2d000 <mpfr_set_underflow>
    4c94:	ldr	x17, [x16, #280]
    4c98:	add	x16, x16, #0x118
    4c9c:	br	x17

0000000000004ca0 <mpfr_get_z@plt>:
    4ca0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ca4:	ldr	x17, [x16, #288]
    4ca8:	add	x16, x16, #0x120
    4cac:	br	x17

0000000000004cb0 <mpfr_sinh_cosh@plt>:
    4cb0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4cb4:	ldr	x17, [x16, #296]
    4cb8:	add	x16, x16, #0x128
    4cbc:	br	x17

0000000000004cc0 <mpc_alloc_str@plt>:
    4cc0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4cc4:	ldr	x17, [x16, #304]
    4cc8:	add	x16, x16, #0x130
    4ccc:	br	x17

0000000000004cd0 <mpc_set_prec@plt>:
    4cd0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4cd4:	ldr	x17, [x16, #312]
    4cd8:	add	x16, x16, #0x138
    4cdc:	br	x17

0000000000004ce0 <mpfr_set_exp@plt>:
    4ce0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ce4:	ldr	x17, [x16, #320]
    4ce8:	add	x16, x16, #0x140
    4cec:	br	x17

0000000000004cf0 <mpc_tan@plt>:
    4cf0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4cf4:	ldr	x17, [x16, #328]
    4cf8:	add	x16, x16, #0x148
    4cfc:	br	x17

0000000000004d00 <mpfr_set_d@plt>:
    4d00:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d04:	ldr	x17, [x16, #336]
    4d08:	add	x16, x16, #0x150
    4d0c:	br	x17

0000000000004d10 <__gmpz_divisible_2exp_p@plt>:
    4d10:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d14:	ldr	x17, [x16, #344]
    4d18:	add	x16, x16, #0x158
    4d1c:	br	x17

0000000000004d20 <__gmpz_fits_slong_p@plt>:
    4d20:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d24:	ldr	x17, [x16, #352]
    4d28:	add	x16, x16, #0x160
    4d2c:	br	x17

0000000000004d30 <localeconv@plt>:
    4d30:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d34:	ldr	x17, [x16, #360]
    4d38:	add	x16, x16, #0x168
    4d3c:	br	x17

0000000000004d40 <mpfr_set_prec@plt>:
    4d40:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d44:	ldr	x17, [x16, #368]
    4d48:	add	x16, x16, #0x170
    4d4c:	br	x17

0000000000004d50 <mpfr_fmma@plt>:
    4d50:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d54:	ldr	x17, [x16, #376]
    4d58:	add	x16, x16, #0x178
    4d5c:	br	x17

0000000000004d60 <mpfr_atan2@plt>:
    4d60:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d64:	ldr	x17, [x16, #384]
    4d68:	add	x16, x16, #0x180
    4d6c:	br	x17

0000000000004d70 <mpfr_cmp_ui_2exp@plt>:
    4d70:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d74:	ldr	x17, [x16, #392]
    4d78:	add	x16, x16, #0x188
    4d7c:	br	x17

0000000000004d80 <__gmpz_divexact@plt>:
    4d80:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d84:	ldr	x17, [x16, #400]
    4d88:	add	x16, x16, #0x190
    4d8c:	br	x17

0000000000004d90 <mpc_add@plt>:
    4d90:	adrp	x16, 2d000 <mpfr_set_underflow>
    4d94:	ldr	x17, [x16, #408]
    4d98:	add	x16, x16, #0x198
    4d9c:	br	x17

0000000000004da0 <mpc_set_ui@plt>:
    4da0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4da4:	ldr	x17, [x16, #416]
    4da8:	add	x16, x16, #0x1a0
    4dac:	br	x17

0000000000004db0 <mpc_init2@plt>:
    4db0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4db4:	ldr	x17, [x16, #424]
    4db8:	add	x16, x16, #0x1a8
    4dbc:	br	x17

0000000000004dc0 <__gmpz_set@plt>:
    4dc0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4dc4:	ldr	x17, [x16, #432]
    4dc8:	add	x16, x16, #0x1b0
    4dcc:	br	x17

0000000000004dd0 <mpfr_set_zero@plt>:
    4dd0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4dd4:	ldr	x17, [x16, #440]
    4dd8:	add	x16, x16, #0x1b8
    4ddc:	br	x17

0000000000004de0 <mpc_ceil_log2@plt>:
    4de0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4de4:	ldr	x17, [x16, #448]
    4de8:	add	x16, x16, #0x1c0
    4dec:	br	x17

0000000000004df0 <__gmpz_tstbit@plt>:
    4df0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4df4:	ldr	x17, [x16, #456]
    4df8:	add	x16, x16, #0x1c8
    4dfc:	br	x17

0000000000004e00 <__gmpz_mul@plt>:
    4e00:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e04:	ldr	x17, [x16, #464]
    4e08:	add	x16, x16, #0x1d0
    4e0c:	br	x17

0000000000004e10 <mpc_set_ld_ld@plt>:
    4e10:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e14:	ldr	x17, [x16, #472]
    4e18:	add	x16, x16, #0x1d8
    4e1c:	br	x17

0000000000004e20 <__gmpz_neg@plt>:
    4e20:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e24:	ldr	x17, [x16, #480]
    4e28:	add	x16, x16, #0x1e0
    4e2c:	br	x17

0000000000004e30 <mpfr_clear@plt>:
    4e30:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e34:	ldr	x17, [x16, #488]
    4e38:	add	x16, x16, #0x1e8
    4e3c:	br	x17

0000000000004e40 <__gmpz_perfect_square_p@plt>:
    4e40:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e44:	ldr	x17, [x16, #496]
    4e48:	add	x16, x16, #0x1f0
    4e4c:	br	x17

0000000000004e50 <__gmpfr_set_sj@plt>:
    4e50:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e54:	ldr	x17, [x16, #504]
    4e58:	add	x16, x16, #0x1f8
    4e5c:	br	x17

0000000000004e60 <mpfr_log@plt>:
    4e60:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e64:	ldr	x17, [x16, #512]
    4e68:	add	x16, x16, #0x200
    4e6c:	br	x17

0000000000004e70 <mpfr_atanh@plt>:
    4e70:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e74:	ldr	x17, [x16, #520]
    4e78:	add	x16, x16, #0x208
    4e7c:	br	x17

0000000000004e80 <__gmpz_swap@plt>:
    4e80:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e84:	ldr	x17, [x16, #528]
    4e88:	add	x16, x16, #0x210
    4e8c:	br	x17

0000000000004e90 <mpc_log@plt>:
    4e90:	adrp	x16, 2d000 <mpfr_set_underflow>
    4e94:	ldr	x17, [x16, #536]
    4e98:	add	x16, x16, #0x218
    4e9c:	br	x17

0000000000004ea0 <mpfr_asinh@plt>:
    4ea0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ea4:	ldr	x17, [x16, #544]
    4ea8:	add	x16, x16, #0x220
    4eac:	br	x17

0000000000004eb0 <mpc_fix_inf@plt>:
    4eb0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4eb4:	ldr	x17, [x16, #552]
    4eb8:	add	x16, x16, #0x228
    4ebc:	br	x17

0000000000004ec0 <strcat@plt>:
    4ec0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ec4:	ldr	x17, [x16, #560]
    4ec8:	add	x16, x16, #0x230
    4ecc:	br	x17

0000000000004ed0 <mpc_pow_usi@plt>:
    4ed0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ed4:	ldr	x17, [x16, #568]
    4ed8:	add	x16, x16, #0x238
    4edc:	br	x17

0000000000004ee0 <mpfr_nextabove@plt>:
    4ee0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ee4:	ldr	x17, [x16, #576]
    4ee8:	add	x16, x16, #0x240
    4eec:	br	x17

0000000000004ef0 <__gmpz_fdiv_q_2exp@plt>:
    4ef0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ef4:	ldr	x17, [x16, #584]
    4ef8:	add	x16, x16, #0x248
    4efc:	br	x17

0000000000004f00 <mpfr_clear_underflow@plt>:
    4f00:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f04:	ldr	x17, [x16, #592]
    4f08:	add	x16, x16, #0x250
    4f0c:	br	x17

0000000000004f10 <mpfr_integer_p@plt>:
    4f10:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f14:	ldr	x17, [x16, #600]
    4f18:	add	x16, x16, #0x258
    4f1c:	br	x17

0000000000004f20 <__gmpz_fits_ulong_p@plt>:
    4f20:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f24:	ldr	x17, [x16, #608]
    4f28:	add	x16, x16, #0x260
    4f2c:	br	x17

0000000000004f30 <mpfr_asin@plt>:
    4f30:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f34:	ldr	x17, [x16, #616]
    4f38:	add	x16, x16, #0x268
    4f3c:	br	x17

0000000000004f40 <mpc_set_ld@plt>:
    4f40:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f44:	ldr	x17, [x16, #624]
    4f48:	add	x16, x16, #0x270
    4f4c:	br	x17

0000000000004f50 <mpfr_add@plt>:
    4f50:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f54:	ldr	x17, [x16, #632]
    4f58:	add	x16, x16, #0x278
    4f5c:	br	x17

0000000000004f60 <mpfr_clears@plt>:
    4f60:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f64:	ldr	x17, [x16, #640]
    4f68:	add	x16, x16, #0x280
    4f6c:	br	x17

0000000000004f70 <mpfr_set@plt>:
    4f70:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f74:	ldr	x17, [x16, #648]
    4f78:	add	x16, x16, #0x288
    4f7c:	br	x17

0000000000004f80 <__gmpz_mul_2exp@plt>:
    4f80:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f84:	ldr	x17, [x16, #656]
    4f88:	add	x16, x16, #0x290
    4f8c:	br	x17

0000000000004f90 <mpc_norm@plt>:
    4f90:	adrp	x16, 2d000 <mpfr_set_underflow>
    4f94:	ldr	x17, [x16, #664]
    4f98:	add	x16, x16, #0x298
    4f9c:	br	x17

0000000000004fa0 <mpc_mul_naive@plt>:
    4fa0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4fa4:	ldr	x17, [x16, #672]
    4fa8:	add	x16, x16, #0x2a0
    4fac:	br	x17

0000000000004fb0 <mpfr_set_z@plt>:
    4fb0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4fb4:	ldr	x17, [x16, #680]
    4fb8:	add	x16, x16, #0x2a8
    4fbc:	br	x17

0000000000004fc0 <__gmpz_get_ui@plt>:
    4fc0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4fc4:	ldr	x17, [x16, #688]
    4fc8:	add	x16, x16, #0x2b0
    4fcc:	br	x17

0000000000004fd0 <mpc_mul@plt>:
    4fd0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4fd4:	ldr	x17, [x16, #696]
    4fd8:	add	x16, x16, #0x2b8
    4fdc:	br	x17

0000000000004fe0 <mpfr_add_ui@plt>:
    4fe0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4fe4:	ldr	x17, [x16, #704]
    4fe8:	add	x16, x16, #0x2c0
    4fec:	br	x17

0000000000004ff0 <mpc_set_nan@plt>:
    4ff0:	adrp	x16, 2d000 <mpfr_set_underflow>
    4ff4:	ldr	x17, [x16, #712]
    4ff8:	add	x16, x16, #0x2c8
    4ffc:	br	x17

0000000000005000 <mpc_strtoc@plt>:
    5000:	adrp	x16, 2d000 <mpfr_set_underflow>
    5004:	ldr	x17, [x16, #720]
    5008:	add	x16, x16, #0x2d0
    500c:	br	x17

0000000000005010 <__gmpz_addmul@plt>:
    5010:	adrp	x16, 2d000 <mpfr_set_underflow>
    5014:	ldr	x17, [x16, #728]
    5018:	add	x16, x16, #0x2d8
    501c:	br	x17

0000000000005020 <getc@plt>:
    5020:	adrp	x16, 2d000 <mpfr_set_underflow>
    5024:	ldr	x17, [x16, #736]
    5028:	add	x16, x16, #0x2e0
    502c:	br	x17

0000000000005030 <mpc_sqr@plt>:
    5030:	adrp	x16, 2d000 <mpfr_set_underflow>
    5034:	ldr	x17, [x16, #744]
    5038:	add	x16, x16, #0x2e8
    503c:	br	x17

0000000000005040 <mpfr_mul_2ui@plt>:
    5040:	adrp	x16, 2d000 <mpfr_set_underflow>
    5044:	ldr	x17, [x16, #752]
    5048:	add	x16, x16, #0x2f0
    504c:	br	x17

0000000000005050 <mpc_sin@plt>:
    5050:	adrp	x16, 2d000 <mpfr_set_underflow>
    5054:	ldr	x17, [x16, #760]
    5058:	add	x16, x16, #0x2f8
    505c:	br	x17

0000000000005060 <mpc_conj@plt>:
    5060:	adrp	x16, 2d000 <mpfr_set_underflow>
    5064:	ldr	x17, [x16, #768]
    5068:	add	x16, x16, #0x300
    506c:	br	x17

0000000000005070 <mpfr_ui_div@plt>:
    5070:	adrp	x16, 2d000 <mpfr_set_underflow>
    5074:	ldr	x17, [x16, #776]
    5078:	add	x16, x16, #0x308
    507c:	br	x17

0000000000005080 <mpfr_sinh@plt>:
    5080:	adrp	x16, 2d000 <mpfr_set_underflow>
    5084:	ldr	x17, [x16, #784]
    5088:	add	x16, x16, #0x310
    508c:	br	x17

0000000000005090 <mpc_set_d_d@plt>:
    5090:	adrp	x16, 2d000 <mpfr_set_underflow>
    5094:	ldr	x17, [x16, #792]
    5098:	add	x16, x16, #0x318
    509c:	br	x17

00000000000050a0 <__gmpz_add_ui@plt>:
    50a0:	adrp	x16, 2d000 <mpfr_set_underflow>
    50a4:	ldr	x17, [x16, #800]
    50a8:	add	x16, x16, #0x320
    50ac:	br	x17

00000000000050b0 <__gmpq_clear@plt>:
    50b0:	adrp	x16, 2d000 <mpfr_set_underflow>
    50b4:	ldr	x17, [x16, #808]
    50b8:	add	x16, x16, #0x328
    50bc:	br	x17

00000000000050c0 <__gmon_start__@plt>:
    50c0:	adrp	x16, 2d000 <mpfr_set_underflow>
    50c4:	ldr	x17, [x16, #816]
    50c8:	add	x16, x16, #0x330
    50cc:	br	x17

00000000000050d0 <mpfr_acos@plt>:
    50d0:	adrp	x16, 2d000 <mpfr_set_underflow>
    50d4:	ldr	x17, [x16, #824]
    50d8:	add	x16, x16, #0x338
    50dc:	br	x17

00000000000050e0 <mpfr_cmp_si_2exp@plt>:
    50e0:	adrp	x16, 2d000 <mpfr_set_underflow>
    50e4:	ldr	x17, [x16, #832]
    50e8:	add	x16, x16, #0x340
    50ec:	br	x17

00000000000050f0 <mpc_free_str@plt>:
    50f0:	adrp	x16, 2d000 <mpfr_set_underflow>
    50f4:	ldr	x17, [x16, #840]
    50f8:	add	x16, x16, #0x348
    50fc:	br	x17

0000000000005100 <abort@plt>:
    5100:	adrp	x16, 2d000 <mpfr_set_underflow>
    5104:	ldr	x17, [x16, #848]
    5108:	add	x16, x16, #0x350
    510c:	br	x17

0000000000005110 <mpfr_sqr@plt>:
    5110:	adrp	x16, 2d000 <mpfr_set_underflow>
    5114:	ldr	x17, [x16, #856]
    5118:	add	x16, x16, #0x358
    511c:	br	x17

0000000000005120 <mpc_set_si@plt>:
    5120:	adrp	x16, 2d000 <mpfr_set_underflow>
    5124:	ldr	x17, [x16, #864]
    5128:	add	x16, x16, #0x360
    512c:	br	x17

0000000000005130 <mpfr_div_2si@plt>:
    5130:	adrp	x16, 2d000 <mpfr_set_underflow>
    5134:	ldr	x17, [x16, #872]
    5138:	add	x16, x16, #0x368
    513c:	br	x17

0000000000005140 <mpc_set_ui_ui@plt>:
    5140:	adrp	x16, 2d000 <mpfr_set_underflow>
    5144:	ldr	x17, [x16, #880]
    5148:	add	x16, x16, #0x370
    514c:	br	x17

0000000000005150 <mpfr_cos@plt>:
    5150:	adrp	x16, 2d000 <mpfr_set_underflow>
    5154:	ldr	x17, [x16, #888]
    5158:	add	x16, x16, #0x378
    515c:	br	x17

0000000000005160 <mpfr_get_emin@plt>:
    5160:	adrp	x16, 2d000 <mpfr_set_underflow>
    5164:	ldr	x17, [x16, #896]
    5168:	add	x16, x16, #0x380
    516c:	br	x17

0000000000005170 <mpc_acos@plt>:
    5170:	adrp	x16, 2d000 <mpfr_set_underflow>
    5174:	ldr	x17, [x16, #904]
    5178:	add	x16, x16, #0x388
    517c:	br	x17

0000000000005180 <mpfr_sin@plt>:
    5180:	adrp	x16, 2d000 <mpfr_set_underflow>
    5184:	ldr	x17, [x16, #912]
    5188:	add	x16, x16, #0x390
    518c:	br	x17

0000000000005190 <mpfr_swap@plt>:
    5190:	adrp	x16, 2d000 <mpfr_set_underflow>
    5194:	ldr	x17, [x16, #920]
    5198:	add	x16, x16, #0x398
    519c:	br	x17

00000000000051a0 <mpc_set_z@plt>:
    51a0:	adrp	x16, 2d000 <mpfr_set_underflow>
    51a4:	ldr	x17, [x16, #928]
    51a8:	add	x16, x16, #0x3a0
    51ac:	br	x17

00000000000051b0 <__gmpz_ui_pow_ui@plt>:
    51b0:	adrp	x16, 2d000 <mpfr_set_underflow>
    51b4:	ldr	x17, [x16, #936]
    51b8:	add	x16, x16, #0x3a8
    51bc:	br	x17

00000000000051c0 <mpfr_get_str@plt>:
    51c0:	adrp	x16, 2d000 <mpfr_set_underflow>
    51c4:	ldr	x17, [x16, #944]
    51c8:	add	x16, x16, #0x3b0
    51cc:	br	x17

00000000000051d0 <mpc_fix_zero@plt>:
    51d0:	adrp	x16, 2d000 <mpfr_set_underflow>
    51d4:	ldr	x17, [x16, #952]
    51d8:	add	x16, x16, #0x3b8
    51dc:	br	x17

00000000000051e0 <mpfr_acosh@plt>:
    51e0:	adrp	x16, 2d000 <mpfr_set_underflow>
    51e4:	ldr	x17, [x16, #960]
    51e8:	add	x16, x16, #0x3c0
    51ec:	br	x17

00000000000051f0 <mpfr_sub_ui@plt>:
    51f0:	adrp	x16, 2d000 <mpfr_set_underflow>
    51f4:	ldr	x17, [x16, #968]
    51f8:	add	x16, x16, #0x3c8
    51fc:	br	x17

0000000000005200 <__gmpq_set_ui@plt>:
    5200:	adrp	x16, 2d000 <mpfr_set_underflow>
    5204:	ldr	x17, [x16, #976]
    5208:	add	x16, x16, #0x3d0
    520c:	br	x17

0000000000005210 <mpfr_get_ld@plt>:
    5210:	adrp	x16, 2d000 <mpfr_set_underflow>
    5214:	ldr	x17, [x16, #984]
    5218:	add	x16, x16, #0x3d8
    521c:	br	x17

0000000000005220 <mpfr_set_inf@plt>:
    5220:	adrp	x16, 2d000 <mpfr_set_underflow>
    5224:	ldr	x17, [x16, #992]
    5228:	add	x16, x16, #0x3e0
    522c:	br	x17

0000000000005230 <mpfr_set_ui_2exp@plt>:
    5230:	adrp	x16, 2d000 <mpfr_set_underflow>
    5234:	ldr	x17, [x16, #1000]
    5238:	add	x16, x16, #0x3e8
    523c:	br	x17

0000000000005240 <mpc_sin_cos@plt>:
    5240:	adrp	x16, 2d000 <mpfr_set_underflow>
    5244:	ldr	x17, [x16, #1008]
    5248:	add	x16, x16, #0x3f0
    524c:	br	x17

0000000000005250 <mpfr_div@plt>:
    5250:	adrp	x16, 2d000 <mpfr_set_underflow>
    5254:	ldr	x17, [x16, #1016]
    5258:	add	x16, x16, #0x3f8
    525c:	br	x17

0000000000005260 <mpc_mul_fr@plt>:
    5260:	adrp	x16, 2d000 <mpfr_set_underflow>
    5264:	ldr	x17, [x16, #1024]
    5268:	add	x16, x16, #0x400
    526c:	br	x17

0000000000005270 <__ctype_b_loc@plt>:
    5270:	adrp	x16, 2d000 <mpfr_set_underflow>
    5274:	ldr	x17, [x16, #1032]
    5278:	add	x16, x16, #0x408
    527c:	br	x17

0000000000005280 <__gmpz_clear@plt>:
    5280:	adrp	x16, 2d000 <mpfr_set_underflow>
    5284:	ldr	x17, [x16, #1040]
    5288:	add	x16, x16, #0x410
    528c:	br	x17

0000000000005290 <__gmpfr_out_str@plt>:
    5290:	adrp	x16, 2d000 <mpfr_set_underflow>
    5294:	ldr	x17, [x16, #1048]
    5298:	add	x16, x16, #0x418
    529c:	br	x17

00000000000052a0 <mpc_abs@plt>:
    52a0:	adrp	x16, 2d000 <mpfr_set_underflow>
    52a4:	ldr	x17, [x16, #1056]
    52a8:	add	x16, x16, #0x420
    52ac:	br	x17

00000000000052b0 <mpfr_atan@plt>:
    52b0:	adrp	x16, 2d000 <mpfr_set_underflow>
    52b4:	ldr	x17, [x16, #1064]
    52b8:	add	x16, x16, #0x428
    52bc:	br	x17

00000000000052c0 <mpfr_nexttoward@plt>:
    52c0:	adrp	x16, 2d000 <mpfr_set_underflow>
    52c4:	ldr	x17, [x16, #1072]
    52c8:	add	x16, x16, #0x430
    52cc:	br	x17

00000000000052d0 <mpfr_set4@plt>:
    52d0:	adrp	x16, 2d000 <mpfr_set_underflow>
    52d4:	ldr	x17, [x16, #1080]
    52d8:	add	x16, x16, #0x438
    52dc:	br	x17

00000000000052e0 <mpfr_log1p@plt>:
    52e0:	adrp	x16, 2d000 <mpfr_set_underflow>
    52e4:	ldr	x17, [x16, #1088]
    52e8:	add	x16, x16, #0x440
    52ec:	br	x17

00000000000052f0 <mpfr_sgn@plt>:
    52f0:	adrp	x16, 2d000 <mpfr_set_underflow>
    52f4:	ldr	x17, [x16, #1096]
    52f8:	add	x16, x16, #0x448
    52fc:	br	x17

0000000000005300 <mpfr_get_emax@plt>:
    5300:	adrp	x16, 2d000 <mpfr_set_underflow>
    5304:	ldr	x17, [x16, #1104]
    5308:	add	x16, x16, #0x450
    530c:	br	x17

0000000000005310 <ungetc@plt>:
    5310:	adrp	x16, 2d000 <mpfr_set_underflow>
    5314:	ldr	x17, [x16, #1112]
    5318:	add	x16, x16, #0x458
    531c:	br	x17

0000000000005320 <__gmpz_tdiv_q_2exp@plt>:
    5320:	adrp	x16, 2d000 <mpfr_set_underflow>
    5324:	ldr	x17, [x16, #1120]
    5328:	add	x16, x16, #0x460
    532c:	br	x17

0000000000005330 <mpfr_exp@plt>:
    5330:	adrp	x16, 2d000 <mpfr_set_underflow>
    5334:	ldr	x17, [x16, #1128]
    5338:	add	x16, x16, #0x468
    533c:	br	x17

0000000000005340 <mpc_pow@plt>:
    5340:	adrp	x16, 2d000 <mpfr_set_underflow>
    5344:	ldr	x17, [x16, #1136]
    5348:	add	x16, x16, #0x470
    534c:	br	x17

0000000000005350 <mpc_div@plt>:
    5350:	adrp	x16, 2d000 <mpfr_set_underflow>
    5354:	ldr	x17, [x16, #1144]
    5358:	add	x16, x16, #0x478
    535c:	br	x17

0000000000005360 <mpfr_add_si@plt>:
    5360:	adrp	x16, 2d000 <mpfr_set_underflow>
    5364:	ldr	x17, [x16, #1152]
    5368:	add	x16, x16, #0x480
    536c:	br	x17

0000000000005370 <mpfr_set_si@plt>:
    5370:	adrp	x16, 2d000 <mpfr_set_underflow>
    5374:	ldr	x17, [x16, #1160]
    5378:	add	x16, x16, #0x488
    537c:	br	x17

0000000000005380 <mpfr_sqrt_ui@plt>:
    5380:	adrp	x16, 2d000 <mpfr_set_underflow>
    5384:	ldr	x17, [x16, #1168]
    5388:	add	x16, x16, #0x490
    538c:	br	x17

0000000000005390 <mpfr_set_q@plt>:
    5390:	adrp	x16, 2d000 <mpfr_set_underflow>
    5394:	ldr	x17, [x16, #1176]
    5398:	add	x16, x16, #0x498
    539c:	br	x17

00000000000053a0 <mpc_exp@plt>:
    53a0:	adrp	x16, 2d000 <mpfr_set_underflow>
    53a4:	ldr	x17, [x16, #1184]
    53a8:	add	x16, x16, #0x4a0
    53ac:	br	x17

00000000000053b0 <__gmpq_init@plt>:
    53b0:	adrp	x16, 2d000 <mpfr_set_underflow>
    53b4:	ldr	x17, [x16, #1192]
    53b8:	add	x16, x16, #0x4a8
    53bc:	br	x17

00000000000053c0 <mpc_set_si_si@plt>:
    53c0:	adrp	x16, 2d000 <mpfr_set_underflow>
    53c4:	ldr	x17, [x16, #1200]
    53c8:	add	x16, x16, #0x4b0
    53cc:	br	x17

00000000000053d0 <__gmpz_submul@plt>:
    53d0:	adrp	x16, 2d000 <mpfr_set_underflow>
    53d4:	ldr	x17, [x16, #1208]
    53d8:	add	x16, x16, #0x4b8
    53dc:	br	x17

00000000000053e0 <mpfr_free_str@plt>:
    53e0:	adrp	x16, 2d000 <mpfr_set_underflow>
    53e4:	ldr	x17, [x16, #1216]
    53e8:	add	x16, x16, #0x4c0
    53ec:	br	x17

00000000000053f0 <mpfr_underflow_p@plt>:
    53f0:	adrp	x16, 2d000 <mpfr_set_underflow>
    53f4:	ldr	x17, [x16, #1224]
    53f8:	add	x16, x16, #0x4c8
    53fc:	br	x17

0000000000005400 <__gmpz_cmp@plt>:
    5400:	adrp	x16, 2d000 <mpfr_set_underflow>
    5404:	ldr	x17, [x16, #1232]
    5408:	add	x16, x16, #0x4d0
    540c:	br	x17

0000000000005410 <mpc_cmp_si_si@plt>:
    5410:	adrp	x16, 2d000 <mpfr_set_underflow>
    5414:	ldr	x17, [x16, #1240]
    5418:	add	x16, x16, #0x4d8
    541c:	br	x17

0000000000005420 <mpfr_div_2ui@plt>:
    5420:	adrp	x16, 2d000 <mpfr_set_underflow>
    5424:	ldr	x17, [x16, #1248]
    5428:	add	x16, x16, #0x4e0
    542c:	br	x17

0000000000005430 <mpc_realloc_str@plt>:
    5430:	adrp	x16, 2d000 <mpfr_set_underflow>
    5434:	ldr	x17, [x16, #1256]
    5438:	add	x16, x16, #0x4e8
    543c:	br	x17

0000000000005440 <strcpy@plt>:
    5440:	adrp	x16, 2d000 <mpfr_set_underflow>
    5444:	ldr	x17, [x16, #1264]
    5448:	add	x16, x16, #0x4f0
    544c:	br	x17

0000000000005450 <mpfr_sqrt@plt>:
    5450:	adrp	x16, 2d000 <mpfr_set_underflow>
    5454:	ldr	x17, [x16, #1272]
    5458:	add	x16, x16, #0x4f8
    545c:	br	x17

0000000000005460 <mpfr_mul_si@plt>:
    5460:	adrp	x16, 2d000 <mpfr_set_underflow>
    5464:	ldr	x17, [x16, #1280]
    5468:	add	x16, x16, #0x500
    546c:	br	x17

0000000000005470 <mpfr_prec_round@plt>:
    5470:	adrp	x16, 2d000 <mpfr_set_underflow>
    5474:	ldr	x17, [x16, #1288]
    5478:	add	x16, x16, #0x508
    547c:	br	x17

0000000000005480 <mpc_set_str@plt>:
    5480:	adrp	x16, 2d000 <mpfr_set_underflow>
    5484:	ldr	x17, [x16, #1296]
    5488:	add	x16, x16, #0x510
    548c:	br	x17

0000000000005490 <mpfr_min_prec@plt>:
    5490:	adrp	x16, 2d000 <mpfr_set_underflow>
    5494:	ldr	x17, [x16, #1304]
    5498:	add	x16, x16, #0x518
    549c:	br	x17

00000000000054a0 <mpfr_cmp3@plt>:
    54a0:	adrp	x16, 2d000 <mpfr_set_underflow>
    54a4:	ldr	x17, [x16, #1312]
    54a8:	add	x16, x16, #0x520
    54ac:	br	x17

00000000000054b0 <mpfr_cmpabs@plt>:
    54b0:	adrp	x16, 2d000 <mpfr_set_underflow>
    54b4:	ldr	x17, [x16, #1320]
    54b8:	add	x16, x16, #0x528
    54bc:	br	x17

00000000000054c0 <mpc_init3@plt>:
    54c0:	adrp	x16, 2d000 <mpfr_set_underflow>
    54c4:	ldr	x17, [x16, #1328]
    54c8:	add	x16, x16, #0x530
    54cc:	br	x17

00000000000054d0 <__gmpz_add@plt>:
    54d0:	adrp	x16, 2d000 <mpfr_set_underflow>
    54d4:	ldr	x17, [x16, #1336]
    54d8:	add	x16, x16, #0x538
    54dc:	br	x17

00000000000054e0 <mpc_cos@plt>:
    54e0:	adrp	x16, 2d000 <mpfr_set_underflow>
    54e4:	ldr	x17, [x16, #1344]
    54e8:	add	x16, x16, #0x540
    54ec:	br	x17

00000000000054f0 <set_pi_over_2@plt>:
    54f0:	adrp	x16, 2d000 <mpfr_set_underflow>
    54f4:	ldr	x17, [x16, #1352]
    54f8:	add	x16, x16, #0x548
    54fc:	br	x17

0000000000005500 <__gmpfr_set_uj@plt>:
    5500:	adrp	x16, 2d000 <mpfr_set_underflow>
    5504:	ldr	x17, [x16, #1360]
    5508:	add	x16, x16, #0x550
    550c:	br	x17

0000000000005510 <mpc_atan@plt>:
    5510:	adrp	x16, 2d000 <mpfr_set_underflow>
    5514:	ldr	x17, [x16, #1368]
    5518:	add	x16, x16, #0x558
    551c:	br	x17

0000000000005520 <mpfr_ui_sub@plt>:
    5520:	adrp	x16, 2d000 <mpfr_set_underflow>
    5524:	ldr	x17, [x16, #1376]
    5528:	add	x16, x16, #0x560
    552c:	br	x17

0000000000005530 <mpfr_init2@plt>:
    5530:	adrp	x16, 2d000 <mpfr_set_underflow>
    5534:	ldr	x17, [x16, #1384]
    5538:	add	x16, x16, #0x568
    553c:	br	x17

0000000000005540 <mpfr_can_round@plt>:
    5540:	adrp	x16, 2d000 <mpfr_set_underflow>
    5544:	ldr	x17, [x16, #1392]
    5548:	add	x16, x16, #0x570
    554c:	br	x17

0000000000005550 <mpc_set_d@plt>:
    5550:	adrp	x16, 2d000 <mpfr_set_underflow>
    5554:	ldr	x17, [x16, #1400]
    5558:	add	x16, x16, #0x578
    555c:	br	x17

0000000000005560 <mpfr_get_z_2exp@plt>:
    5560:	adrp	x16, 2d000 <mpfr_set_underflow>
    5564:	ldr	x17, [x16, #1408]
    5568:	add	x16, x16, #0x580
    556c:	br	x17

0000000000005570 <mpc_asin@plt>:
    5570:	adrp	x16, 2d000 <mpfr_set_underflow>
    5574:	ldr	x17, [x16, #1416]
    5578:	add	x16, x16, #0x588
    557c:	br	x17

0000000000005580 <mpfr_set_overflow@plt>:
    5580:	adrp	x16, 2d000 <mpfr_set_underflow>
    5584:	ldr	x17, [x16, #1424]
    5588:	add	x16, x16, #0x590
    558c:	br	x17

0000000000005590 <__gmpz_init@plt>:
    5590:	adrp	x16, 2d000 <mpfr_set_underflow>
    5594:	ldr	x17, [x16, #1432]
    5598:	add	x16, x16, #0x598
    559c:	br	x17

00000000000055a0 <__gmpz_sizeinbase@plt>:
    55a0:	adrp	x16, 2d000 <mpfr_set_underflow>
    55a4:	ldr	x17, [x16, #1440]
    55a8:	add	x16, x16, #0x5a0
    55ac:	br	x17

00000000000055b0 <__gmpz_set_si@plt>:
    55b0:	adrp	x16, 2d000 <mpfr_set_underflow>
    55b4:	ldr	x17, [x16, #1448]
    55b8:	add	x16, x16, #0x5a8
    55bc:	br	x17

00000000000055c0 <mpfr_number_p@plt>:
    55c0:	adrp	x16, 2d000 <mpfr_set_underflow>
    55c4:	ldr	x17, [x16, #1456]
    55c8:	add	x16, x16, #0x5b0
    55cc:	br	x17

00000000000055d0 <mpfr_overflow_p@plt>:
    55d0:	adrp	x16, 2d000 <mpfr_set_underflow>
    55d4:	ldr	x17, [x16, #1464]
    55d8:	add	x16, x16, #0x5b8
    55dc:	br	x17

00000000000055e0 <mpc_set_fr_fr@plt>:
    55e0:	adrp	x16, 2d000 <mpfr_set_underflow>
    55e4:	ldr	x17, [x16, #1472]
    55e8:	add	x16, x16, #0x5c0
    55ec:	br	x17

00000000000055f0 <tolower@plt>:
    55f0:	adrp	x16, 2d000 <mpfr_set_underflow>
    55f4:	ldr	x17, [x16, #1480]
    55f8:	add	x16, x16, #0x5c8
    55fc:	br	x17

0000000000005600 <mpfr_urandomb@plt>:
    5600:	adrp	x16, 2d000 <mpfr_set_underflow>
    5604:	ldr	x17, [x16, #1488]
    5608:	add	x16, x16, #0x5d0
    560c:	br	x17

0000000000005610 <mpfr_set_ui@plt>:
    5610:	adrp	x16, 2d000 <mpfr_set_underflow>
    5614:	ldr	x17, [x16, #1496]
    5618:	add	x16, x16, #0x5d8
    561c:	br	x17

0000000000005620 <mpfr_sin_cos@plt>:
    5620:	adrp	x16, 2d000 <mpfr_set_underflow>
    5624:	ldr	x17, [x16, #1504]
    5628:	add	x16, x16, #0x5e0
    562c:	br	x17

0000000000005630 <mpc_div_2ui@plt>:
    5630:	adrp	x16, 2d000 <mpfr_set_underflow>
    5634:	ldr	x17, [x16, #1512]
    5638:	add	x16, x16, #0x5e8
    563c:	br	x17

0000000000005640 <mpfr_inits2@plt>:
    5640:	adrp	x16, 2d000 <mpfr_set_underflow>
    5644:	ldr	x17, [x16, #1520]
    5648:	add	x16, x16, #0x5f0
    564c:	br	x17

0000000000005650 <mpfr_div_ui@plt>:
    5650:	adrp	x16, 2d000 <mpfr_set_underflow>
    5654:	ldr	x17, [x16, #1528]
    5658:	add	x16, x16, #0x5f8
    565c:	br	x17

0000000000005660 <mpc_fma_naive@plt>:
    5660:	adrp	x16, 2d000 <mpfr_set_underflow>
    5664:	ldr	x17, [x16, #1536]
    5668:	add	x16, x16, #0x600
    566c:	br	x17

0000000000005670 <__gmpq_mul_2exp@plt>:
    5670:	adrp	x16, 2d000 <mpfr_set_underflow>
    5674:	ldr	x17, [x16, #1544]
    5678:	add	x16, x16, #0x608
    567c:	br	x17

0000000000005680 <mpc_set@plt>:
    5680:	adrp	x16, 2d000 <mpfr_set_underflow>
    5684:	ldr	x17, [x16, #1552]
    5688:	add	x16, x16, #0x610
    568c:	br	x17

0000000000005690 <mpfr_hypot@plt>:
    5690:	adrp	x16, 2d000 <mpfr_set_underflow>
    5694:	ldr	x17, [x16, #1560]
    5698:	add	x16, x16, #0x618
    569c:	br	x17

00000000000056a0 <fprintf@plt>:
    56a0:	adrp	x16, 2d000 <mpfr_set_underflow>
    56a4:	ldr	x17, [x16, #1568]
    56a8:	add	x16, x16, #0x620
    56ac:	br	x17

00000000000056b0 <mpc_ui_div@plt>:
    56b0:	adrp	x16, 2d000 <mpfr_set_underflow>
    56b4:	ldr	x17, [x16, #1576]
    56b8:	add	x16, x16, #0x628
    56bc:	br	x17

00000000000056c0 <mpfr_get_emin_min@plt>:
    56c0:	adrp	x16, 2d000 <mpfr_set_underflow>
    56c4:	ldr	x17, [x16, #1584]
    56c8:	add	x16, x16, #0x630
    56cc:	br	x17

Disassembly of section .text:

00000000000056d0 <mpc_abs@@Base-0xd4>:
    56d0:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    56d4:	ldr	x0, [x0, #4048]
    56d8:	cbz	x0, 56e0 <mpfr_get_emin_min@plt+0x20>
    56dc:	b	50c0 <__gmon_start__@plt>
    56e0:	ret
    56e4:	nop
    56e8:	adrp	x0, 2d000 <mpc_ui_ui_sub@@Base+0x135c4>
    56ec:	add	x0, x0, #0x640
    56f0:	adrp	x1, 2d000 <mpc_ui_ui_sub@@Base+0x135c4>
    56f4:	add	x1, x1, #0x640
    56f8:	cmp	x1, x0
    56fc:	b.eq	5714 <mpfr_get_emin_min@plt+0x54>  // b.none
    5700:	adrp	x1, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    5704:	ldr	x1, [x1, #3992]
    5708:	cbz	x1, 5714 <mpfr_get_emin_min@plt+0x54>
    570c:	mov	x16, x1
    5710:	br	x16
    5714:	ret
    5718:	adrp	x0, 2d000 <mpc_ui_ui_sub@@Base+0x135c4>
    571c:	add	x0, x0, #0x640
    5720:	adrp	x1, 2d000 <mpc_ui_ui_sub@@Base+0x135c4>
    5724:	add	x1, x1, #0x640
    5728:	sub	x1, x1, x0
    572c:	lsr	x2, x1, #63
    5730:	add	x1, x2, x1, asr #3
    5734:	cmp	xzr, x1, asr #1
    5738:	asr	x1, x1, #1
    573c:	b.eq	5754 <mpfr_get_emin_min@plt+0x94>  // b.none
    5740:	adrp	x2, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    5744:	ldr	x2, [x2, #4064]
    5748:	cbz	x2, 5754 <mpfr_get_emin_min@plt+0x94>
    574c:	mov	x16, x2
    5750:	br	x16
    5754:	ret
    5758:	stp	x29, x30, [sp, #-32]!
    575c:	mov	x29, sp
    5760:	str	x19, [sp, #16]
    5764:	adrp	x19, 2d000 <mpc_ui_ui_sub@@Base+0x135c4>
    5768:	ldrb	w0, [x19, #1600]
    576c:	cbnz	w0, 5794 <mpfr_get_emin_min@plt+0xd4>
    5770:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    5774:	ldr	x0, [x0, #4000]
    5778:	cbz	x0, 5788 <mpfr_get_emin_min@plt+0xc8>
    577c:	adrp	x0, 2d000 <mpc_ui_ui_sub@@Base+0x135c4>
    5780:	ldr	x0, [x0, #1592]
    5784:	bl	4bf0 <__cxa_finalize@plt>
    5788:	bl	56e8 <mpfr_get_emin_min@plt+0x28>
    578c:	mov	w0, #0x1                   	// #1
    5790:	strb	w0, [x19, #1600]
    5794:	ldr	x19, [sp, #16]
    5798:	ldp	x29, x30, [sp], #32
    579c:	ret
    57a0:	b	5718 <mpfr_get_emin_min@plt+0x58>

00000000000057a4 <mpc_abs@@Base>:
    57a4:	stp	x29, x30, [sp, #-48]!
    57a8:	mov	x29, sp
    57ac:	str	x0, [sp, #40]
    57b0:	str	x1, [sp, #32]
    57b4:	str	w2, [sp, #28]
    57b8:	ldr	x1, [sp, #32]
    57bc:	ldr	x0, [sp, #32]
    57c0:	add	x0, x0, #0x20
    57c4:	ldr	w3, [sp, #28]
    57c8:	mov	x2, x0
    57cc:	ldr	x0, [sp, #40]
    57d0:	bl	5690 <mpfr_hypot@plt>
    57d4:	ldp	x29, x30, [sp], #48
    57d8:	ret

00000000000057dc <mpc_acos@@Base>:
    57dc:	stp	x29, x30, [sp, #-320]!
    57e0:	mov	x29, sp
    57e4:	str	x19, [sp, #16]
    57e8:	str	x0, [sp, #56]
    57ec:	str	x1, [sp, #48]
    57f0:	str	w2, [sp, #44]
    57f4:	str	wzr, [sp, #308]
    57f8:	str	wzr, [sp, #316]
    57fc:	str	wzr, [sp, #312]
    5800:	ldr	x0, [sp, #48]
    5804:	ldr	x1, [x0, #16]
    5808:	mov	x0, #0x2                   	// #2
    580c:	movk	x0, #0x8000, lsl #48
    5810:	cmp	x1, x0
    5814:	b.eq	5830 <mpc_acos@@Base+0x54>  // b.none
    5818:	ldr	x0, [sp, #48]
    581c:	ldr	x1, [x0, #48]
    5820:	mov	x0, #0x2                   	// #2
    5824:	movk	x0, #0x8000, lsl #48
    5828:	cmp	x1, x0
    582c:	b.ne	5914 <mpc_acos@@Base+0x138>  // b.any
    5830:	ldr	x0, [sp, #48]
    5834:	ldr	x1, [x0, #16]
    5838:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    583c:	cmp	x1, x0
    5840:	b.eq	5858 <mpc_acos@@Base+0x7c>  // b.none
    5844:	ldr	x0, [sp, #48]
    5848:	ldr	x1, [x0, #48]
    584c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    5850:	cmp	x1, x0
    5854:	b.ne	5894 <mpc_acos@@Base+0xb8>  // b.any
    5858:	ldr	x0, [sp, #56]
    585c:	add	x2, x0, #0x20
    5860:	ldr	x0, [sp, #48]
    5864:	ldr	w0, [x0, #40]
    5868:	cmp	w0, #0x0
    586c:	b.ge	5878 <mpc_acos@@Base+0x9c>  // b.tcont
    5870:	mov	w0, #0x1                   	// #1
    5874:	b	587c <mpc_acos@@Base+0xa0>
    5878:	mov	w0, #0xffffffff            	// #-1
    587c:	mov	w1, w0
    5880:	mov	x0, x2
    5884:	bl	5220 <mpfr_set_inf@plt>
    5888:	ldr	x0, [sp, #56]
    588c:	bl	4b10 <mpfr_set_nan@plt>
    5890:	b	58ec <mpc_acos@@Base+0x110>
    5894:	ldr	x0, [sp, #48]
    5898:	ldr	x1, [x0, #16]
    589c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    58a0:	cmp	x1, x0
    58a4:	b.ne	58d8 <mpc_acos@@Base+0xfc>  // b.any
    58a8:	ldr	x3, [sp, #56]
    58ac:	ldr	w0, [sp, #44]
    58b0:	and	w0, w0, #0xf
    58b4:	mov	w2, w0
    58b8:	mov	w1, #0x1                   	// #1
    58bc:	mov	x0, x3
    58c0:	bl	54f0 <set_pi_over_2@plt>
    58c4:	str	w0, [sp, #316]
    58c8:	ldr	x0, [sp, #56]
    58cc:	add	x0, x0, #0x20
    58d0:	bl	4b10 <mpfr_set_nan@plt>
    58d4:	b	58ec <mpc_acos@@Base+0x110>
    58d8:	ldr	x0, [sp, #56]
    58dc:	bl	4b10 <mpfr_set_nan@plt>
    58e0:	ldr	x0, [sp, #56]
    58e4:	add	x0, x0, #0x20
    58e8:	bl	4b10 <mpfr_set_nan@plt>
    58ec:	ldr	w0, [sp, #316]
    58f0:	cmp	w0, #0x0
    58f4:	b.lt	590c <mpc_acos@@Base+0x130>  // b.tstop
    58f8:	ldr	w0, [sp, #316]
    58fc:	cmp	w0, #0x0
    5900:	cset	w0, ne  // ne = any
    5904:	and	w0, w0, #0xff
    5908:	b	6390 <mpc_acos@@Base+0xbb4>
    590c:	mov	w0, #0x2                   	// #2
    5910:	b	6390 <mpc_acos@@Base+0xbb4>
    5914:	ldr	x0, [sp, #48]
    5918:	ldr	x1, [x0, #16]
    591c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    5920:	cmp	x1, x0
    5924:	b.eq	593c <mpc_acos@@Base+0x160>  // b.none
    5928:	ldr	x0, [sp, #48]
    592c:	ldr	x1, [x0, #48]
    5930:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    5934:	cmp	x1, x0
    5938:	b.ne	5bec <mpc_acos@@Base+0x410>  // b.any
    593c:	ldr	x0, [sp, #48]
    5940:	ldr	x1, [x0, #16]
    5944:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    5948:	cmp	x1, x0
    594c:	b.ne	5b74 <mpc_acos@@Base+0x398>  // b.any
    5950:	ldr	x0, [sp, #48]
    5954:	ldr	x1, [x0, #48]
    5958:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    595c:	cmp	x1, x0
    5960:	b.ne	5adc <mpc_acos@@Base+0x300>  // b.any
    5964:	ldr	x0, [sp, #48]
    5968:	ldr	x1, [x0, #16]
    596c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    5970:	cmp	x1, x0
    5974:	b.ge	599c <mpc_acos@@Base+0x1c0>  // b.tcont
    5978:	ldr	x0, [sp, #48]
    597c:	ldr	x1, [x0, #16]
    5980:	mov	x0, #0x2                   	// #2
    5984:	movk	x0, #0x8000, lsl #48
    5988:	cmp	x1, x0
    598c:	b.ne	5994 <mpc_acos@@Base+0x1b8>  // b.any
    5990:	bl	4bd0 <mpfr_set_erangeflag@plt>
    5994:	mov	w0, #0x0                   	// #0
    5998:	b	59b0 <mpc_acos@@Base+0x1d4>
    599c:	ldr	x0, [sp, #48]
    59a0:	ldr	w0, [x0, #8]
    59a4:	cmp	w0, #0x0
    59a8:	cset	w0, gt
    59ac:	and	w0, w0, #0xff
    59b0:	cmp	w0, #0x0
    59b4:	b.eq	59f0 <mpc_acos@@Base+0x214>  // b.none
    59b8:	ldr	x3, [sp, #56]
    59bc:	ldr	w0, [sp, #44]
    59c0:	and	w0, w0, #0xf
    59c4:	mov	w2, w0
    59c8:	mov	w1, #0x1                   	// #1
    59cc:	mov	x0, x3
    59d0:	bl	54f0 <set_pi_over_2@plt>
    59d4:	str	w0, [sp, #316]
    59d8:	ldr	x0, [sp, #56]
    59dc:	ldr	x1, [sp, #56]
    59e0:	mov	w3, #0x0                   	// #0
    59e4:	mov	x2, #0x1                   	// #1
    59e8:	bl	5420 <mpfr_div_2ui@plt>
    59ec:	b	5b94 <mpc_acos@@Base+0x3b8>
    59f0:	add	x0, sp, #0x40
    59f4:	bl	4b70 <mpfr_init@plt>
    59f8:	ldr	x0, [sp, #56]
    59fc:	ldr	x0, [x0]
    5a00:	str	x0, [sp, #200]
    5a04:	ldr	x0, [sp, #200]
    5a08:	str	x0, [sp, #296]
    5a0c:	ldr	x0, [sp, #296]
    5a10:	bl	4de0 <mpc_ceil_log2@plt>
    5a14:	mov	x1, x0
    5a18:	ldr	x0, [sp, #296]
    5a1c:	add	x0, x0, x1
    5a20:	str	x0, [sp, #296]
    5a24:	add	x0, sp, #0x40
    5a28:	ldr	x1, [sp, #296]
    5a2c:	bl	4d40 <mpfr_set_prec@plt>
    5a30:	add	x0, sp, #0x40
    5a34:	mov	w1, #0x3                   	// #3
    5a38:	bl	4b50 <mpfr_const_pi@plt>
    5a3c:	add	x1, sp, #0x40
    5a40:	add	x0, sp, #0x40
    5a44:	mov	w3, #0x3                   	// #3
    5a48:	mov	x2, #0x3                   	// #3
    5a4c:	bl	4a90 <mpfr_mul_ui@plt>
    5a50:	ldr	x0, [sp, #296]
    5a54:	sub	x5, x0, #0x1
    5a58:	ldr	w0, [sp, #44]
    5a5c:	and	w2, w0, #0xf
    5a60:	ldr	w0, [sp, #44]
    5a64:	and	w0, w0, #0xf
    5a68:	cmp	w0, #0x0
    5a6c:	cset	w0, eq  // eq = none
    5a70:	and	w0, w0, #0xff
    5a74:	and	x1, x0, #0xff
    5a78:	ldr	x0, [sp, #200]
    5a7c:	add	x1, x1, x0
    5a80:	add	x0, sp, #0x40
    5a84:	mov	x4, x1
    5a88:	mov	w3, w2
    5a8c:	mov	w2, #0x3                   	// #3
    5a90:	mov	x1, x5
    5a94:	bl	5540 <mpfr_can_round@plt>
    5a98:	str	w0, [sp, #196]
    5a9c:	ldr	w0, [sp, #196]
    5aa0:	cmp	w0, #0x0
    5aa4:	b.eq	5a0c <mpc_acos@@Base+0x230>  // b.none
    5aa8:	ldr	x4, [sp, #56]
    5aac:	ldr	w0, [sp, #44]
    5ab0:	and	w1, w0, #0xf
    5ab4:	add	x0, sp, #0x40
    5ab8:	mov	w3, w1
    5abc:	mov	x2, #0x2                   	// #2
    5ac0:	mov	x1, x0
    5ac4:	mov	x0, x4
    5ac8:	bl	5420 <mpfr_div_2ui@plt>
    5acc:	str	w0, [sp, #316]
    5ad0:	add	x0, sp, #0x40
    5ad4:	bl	4e30 <mpfr_clear@plt>
    5ad8:	b	5b94 <mpc_acos@@Base+0x3b8>
    5adc:	ldr	x0, [sp, #48]
    5ae0:	ldr	x1, [x0, #16]
    5ae4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    5ae8:	cmp	x1, x0
    5aec:	b.ge	5b14 <mpc_acos@@Base+0x338>  // b.tcont
    5af0:	ldr	x0, [sp, #48]
    5af4:	ldr	x1, [x0, #16]
    5af8:	mov	x0, #0x2                   	// #2
    5afc:	movk	x0, #0x8000, lsl #48
    5b00:	cmp	x1, x0
    5b04:	b.ne	5b0c <mpc_acos@@Base+0x330>  // b.any
    5b08:	bl	4bd0 <mpfr_set_erangeflag@plt>
    5b0c:	mov	w0, #0x0                   	// #0
    5b10:	b	5b28 <mpc_acos@@Base+0x34c>
    5b14:	ldr	x0, [sp, #48]
    5b18:	ldr	w0, [x0, #8]
    5b1c:	cmp	w0, #0x0
    5b20:	cset	w0, gt
    5b24:	and	w0, w0, #0xff
    5b28:	cmp	w0, #0x0
    5b2c:	b.eq	5b54 <mpc_acos@@Base+0x378>  // b.none
    5b30:	ldr	x0, [sp, #56]
    5b34:	str	x0, [sp, #208]
    5b38:	ldr	x0, [sp, #208]
    5b3c:	mov	w1, #0x1                   	// #1
    5b40:	str	w1, [x0, #8]
    5b44:	ldr	x0, [sp, #208]
    5b48:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    5b4c:	str	x1, [x0, #16]
    5b50:	b	5b94 <mpc_acos@@Base+0x3b8>
    5b54:	ldr	x2, [sp, #56]
    5b58:	ldr	w0, [sp, #44]
    5b5c:	and	w0, w0, #0xf
    5b60:	mov	w1, w0
    5b64:	mov	x0, x2
    5b68:	bl	4b50 <mpfr_const_pi@plt>
    5b6c:	str	w0, [sp, #316]
    5b70:	b	5b94 <mpc_acos@@Base+0x3b8>
    5b74:	ldr	x3, [sp, #56]
    5b78:	ldr	w0, [sp, #44]
    5b7c:	and	w0, w0, #0xf
    5b80:	mov	w2, w0
    5b84:	mov	w1, #0x1                   	// #1
    5b88:	mov	x0, x3
    5b8c:	bl	54f0 <set_pi_over_2@plt>
    5b90:	str	w0, [sp, #316]
    5b94:	ldr	x0, [sp, #56]
    5b98:	add	x2, x0, #0x20
    5b9c:	ldr	x0, [sp, #48]
    5ba0:	ldr	w0, [x0, #40]
    5ba4:	cmp	w0, #0x0
    5ba8:	b.ge	5bb4 <mpc_acos@@Base+0x3d8>  // b.tcont
    5bac:	mov	w0, #0x1                   	// #1
    5bb0:	b	5bb8 <mpc_acos@@Base+0x3dc>
    5bb4:	mov	w0, #0xffffffff            	// #-1
    5bb8:	mov	w1, w0
    5bbc:	mov	x0, x2
    5bc0:	bl	5220 <mpfr_set_inf@plt>
    5bc4:	ldr	w0, [sp, #316]
    5bc8:	cmp	w0, #0x0
    5bcc:	b.lt	5be4 <mpc_acos@@Base+0x408>  // b.tstop
    5bd0:	ldr	w0, [sp, #316]
    5bd4:	cmp	w0, #0x0
    5bd8:	cset	w0, ne  // ne = any
    5bdc:	and	w0, w0, #0xff
    5be0:	b	6390 <mpc_acos@@Base+0xbb4>
    5be4:	mov	w0, #0x2                   	// #2
    5be8:	b	6390 <mpc_acos@@Base+0xbb4>
    5bec:	ldr	x0, [sp, #48]
    5bf0:	ldr	x1, [x0, #48]
    5bf4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    5bf8:	cmp	x1, x0
    5bfc:	b.ne	5e8c <mpc_acos@@Base+0x6b0>  // b.any
    5c00:	ldr	x0, [sp, #48]
    5c04:	ldr	w0, [x0, #40]
    5c08:	lsr	w0, w0, #31
    5c0c:	and	w0, w0, #0xff
    5c10:	str	w0, [sp, #236]
    5c14:	ldr	x0, [sp, #48]
    5c18:	mov	x2, #0x0                   	// #0
    5c1c:	mov	x1, #0x1                   	// #1
    5c20:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
    5c24:	cmp	w0, #0x0
    5c28:	b.le	5cdc <mpc_acos@@Base+0x500>
    5c2c:	ldr	w0, [sp, #236]
    5c30:	cmp	w0, #0x0
    5c34:	b.eq	5c60 <mpc_acos@@Base+0x484>  // b.none
    5c38:	ldr	x0, [sp, #56]
    5c3c:	add	x3, x0, #0x20
    5c40:	ldr	x1, [sp, #48]
    5c44:	ldr	w0, [sp, #44]
    5c48:	asr	w0, w0, #4
    5c4c:	mov	w2, w0
    5c50:	mov	x0, x3
    5c54:	bl	51e0 <mpfr_acosh@plt>
    5c58:	str	w0, [sp, #312]
    5c5c:	b	5cb8 <mpc_acos@@Base+0x4dc>
    5c60:	ldr	x0, [sp, #56]
    5c64:	add	x3, x0, #0x20
    5c68:	ldr	x1, [sp, #48]
    5c6c:	ldr	w0, [sp, #44]
    5c70:	asr	w0, w0, #4
    5c74:	cmp	w0, #0x2
    5c78:	b.eq	5ca0 <mpc_acos@@Base+0x4c4>  // b.none
    5c7c:	ldr	w0, [sp, #44]
    5c80:	asr	w0, w0, #4
    5c84:	cmp	w0, #0x3
    5c88:	b.eq	5c98 <mpc_acos@@Base+0x4bc>  // b.none
    5c8c:	ldr	w0, [sp, #44]
    5c90:	asr	w0, w0, #4
    5c94:	b	5ca4 <mpc_acos@@Base+0x4c8>
    5c98:	mov	w0, #0x2                   	// #2
    5c9c:	b	5ca4 <mpc_acos@@Base+0x4c8>
    5ca0:	mov	w0, #0x3                   	// #3
    5ca4:	mov	w2, w0
    5ca8:	mov	x0, x3
    5cac:	bl	51e0 <mpfr_acosh@plt>
    5cb0:	neg	w0, w0
    5cb4:	str	w0, [sp, #312]
    5cb8:	ldr	x0, [sp, #56]
    5cbc:	str	x0, [sp, #216]
    5cc0:	ldr	x0, [sp, #216]
    5cc4:	mov	w1, #0x1                   	// #1
    5cc8:	str	w1, [x0, #8]
    5ccc:	ldr	x0, [sp, #216]
    5cd0:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    5cd4:	str	x1, [x0, #16]
    5cd8:	b	5e14 <mpc_acos@@Base+0x638>
    5cdc:	ldr	x0, [sp, #48]
    5ce0:	mov	x2, #0x0                   	// #0
    5ce4:	mov	x1, #0xffffffffffffffff    	// #-1
    5ce8:	bl	50e0 <mpfr_cmp_si_2exp@plt>
    5cec:	cmp	w0, #0x0
    5cf0:	b.ge	5dd0 <mpc_acos@@Base+0x5f4>  // b.tcont
    5cf4:	ldr	x0, [sp, #48]
    5cf8:	add	x2, sp, #0x40
    5cfc:	mov	x3, x0
    5d00:	ldp	x0, x1, [x3]
    5d04:	stp	x0, x1, [x2]
    5d08:	ldp	x0, x1, [x3, #16]
    5d0c:	stp	x0, x1, [x2, #16]
    5d10:	add	x1, sp, #0x40
    5d14:	add	x0, sp, #0x40
    5d18:	mov	w2, #0x0                   	// #0
    5d1c:	bl	4c50 <mpfr_neg@plt>
    5d20:	ldr	w0, [sp, #236]
    5d24:	cmp	w0, #0x0
    5d28:	b.eq	5d58 <mpc_acos@@Base+0x57c>  // b.none
    5d2c:	ldr	x0, [sp, #56]
    5d30:	add	x3, x0, #0x20
    5d34:	ldr	w0, [sp, #44]
    5d38:	asr	w1, w0, #4
    5d3c:	add	x0, sp, #0x40
    5d40:	mov	w2, w1
    5d44:	mov	x1, x0
    5d48:	mov	x0, x3
    5d4c:	bl	51e0 <mpfr_acosh@plt>
    5d50:	str	w0, [sp, #312]
    5d54:	b	5db0 <mpc_acos@@Base+0x5d4>
    5d58:	ldr	x0, [sp, #56]
    5d5c:	add	x3, x0, #0x20
    5d60:	ldr	w0, [sp, #44]
    5d64:	asr	w0, w0, #4
    5d68:	cmp	w0, #0x2
    5d6c:	b.eq	5d94 <mpc_acos@@Base+0x5b8>  // b.none
    5d70:	ldr	w0, [sp, #44]
    5d74:	asr	w0, w0, #4
    5d78:	cmp	w0, #0x3
    5d7c:	b.eq	5d8c <mpc_acos@@Base+0x5b0>  // b.none
    5d80:	ldr	w0, [sp, #44]
    5d84:	asr	w0, w0, #4
    5d88:	b	5d98 <mpc_acos@@Base+0x5bc>
    5d8c:	mov	w0, #0x2                   	// #2
    5d90:	b	5d98 <mpc_acos@@Base+0x5bc>
    5d94:	mov	w0, #0x3                   	// #3
    5d98:	add	x1, sp, #0x40
    5d9c:	mov	w2, w0
    5da0:	mov	x0, x3
    5da4:	bl	51e0 <mpfr_acosh@plt>
    5da8:	neg	w0, w0
    5dac:	str	w0, [sp, #312]
    5db0:	ldr	x2, [sp, #56]
    5db4:	ldr	w0, [sp, #44]
    5db8:	and	w0, w0, #0xf
    5dbc:	mov	w1, w0
    5dc0:	mov	x0, x2
    5dc4:	bl	4b50 <mpfr_const_pi@plt>
    5dc8:	str	w0, [sp, #316]
    5dcc:	b	5e14 <mpc_acos@@Base+0x638>
    5dd0:	ldr	x3, [sp, #56]
    5dd4:	ldr	x1, [sp, #48]
    5dd8:	ldr	w0, [sp, #44]
    5ddc:	and	w0, w0, #0xf
    5de0:	mov	w2, w0
    5de4:	mov	x0, x3
    5de8:	bl	50d0 <mpfr_acos@plt>
    5dec:	str	w0, [sp, #316]
    5df0:	ldr	x0, [sp, #56]
    5df4:	add	x0, x0, #0x20
    5df8:	str	x0, [sp, #224]
    5dfc:	ldr	x0, [sp, #224]
    5e00:	mov	w1, #0x1                   	// #1
    5e04:	str	w1, [x0, #8]
    5e08:	ldr	x0, [sp, #224]
    5e0c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    5e10:	str	x1, [x0, #16]
    5e14:	ldr	w0, [sp, #236]
    5e18:	cmp	w0, #0x0
    5e1c:	b.ne	5e30 <mpc_acos@@Base+0x654>  // b.any
    5e20:	mov	w2, #0x0                   	// #0
    5e24:	ldr	x1, [sp, #56]
    5e28:	ldr	x0, [sp, #56]
    5e2c:	bl	5060 <mpc_conj@plt>
    5e30:	ldr	w0, [sp, #316]
    5e34:	cmp	w0, #0x0
    5e38:	b.lt	5e54 <mpc_acos@@Base+0x678>  // b.tstop
    5e3c:	ldr	w0, [sp, #316]
    5e40:	cmp	w0, #0x0
    5e44:	cset	w0, ne  // ne = any
    5e48:	and	w0, w0, #0xff
    5e4c:	mov	w1, w0
    5e50:	b	5e58 <mpc_acos@@Base+0x67c>
    5e54:	mov	w1, #0x2                   	// #2
    5e58:	ldr	w0, [sp, #312]
    5e5c:	cmp	w0, #0x0
    5e60:	b.lt	5e80 <mpc_acos@@Base+0x6a4>  // b.tstop
    5e64:	ldr	w0, [sp, #312]
    5e68:	cmp	w0, #0x0
    5e6c:	b.eq	5e78 <mpc_acos@@Base+0x69c>  // b.none
    5e70:	mov	w0, #0x4                   	// #4
    5e74:	b	5e84 <mpc_acos@@Base+0x6a8>
    5e78:	mov	w0, #0x0                   	// #0
    5e7c:	b	5e84 <mpc_acos@@Base+0x6a8>
    5e80:	mov	w0, #0x8                   	// #8
    5e84:	orr	w0, w1, w0
    5e88:	b	6390 <mpc_acos@@Base+0xbb4>
    5e8c:	ldr	x0, [sp, #48]
    5e90:	ldr	x1, [x0, #16]
    5e94:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    5e98:	cmp	x1, x0
    5e9c:	b.ne	5f88 <mpc_acos@@Base+0x7ac>  // b.any
    5ea0:	ldr	x3, [sp, #56]
    5ea4:	ldr	w0, [sp, #44]
    5ea8:	and	w0, w0, #0xf
    5eac:	mov	w2, w0
    5eb0:	mov	w1, #0x1                   	// #1
    5eb4:	mov	x0, x3
    5eb8:	bl	54f0 <set_pi_over_2@plt>
    5ebc:	str	w0, [sp, #316]
    5ec0:	ldr	x0, [sp, #56]
    5ec4:	add	x3, x0, #0x20
    5ec8:	ldr	x0, [sp, #48]
    5ecc:	add	x1, x0, #0x20
    5ed0:	ldr	w0, [sp, #44]
    5ed4:	asr	w0, w0, #4
    5ed8:	cmp	w0, #0x2
    5edc:	b.eq	5f04 <mpc_acos@@Base+0x728>  // b.none
    5ee0:	ldr	w0, [sp, #44]
    5ee4:	asr	w0, w0, #4
    5ee8:	cmp	w0, #0x3
    5eec:	b.eq	5efc <mpc_acos@@Base+0x720>  // b.none
    5ef0:	ldr	w0, [sp, #44]
    5ef4:	asr	w0, w0, #4
    5ef8:	b	5f08 <mpc_acos@@Base+0x72c>
    5efc:	mov	w0, #0x2                   	// #2
    5f00:	b	5f08 <mpc_acos@@Base+0x72c>
    5f04:	mov	w0, #0x3                   	// #3
    5f08:	mov	w2, w0
    5f0c:	mov	x0, x3
    5f10:	bl	4ea0 <mpfr_asinh@plt>
    5f14:	neg	w0, w0
    5f18:	str	w0, [sp, #312]
    5f1c:	mov	w2, #0x0                   	// #0
    5f20:	ldr	x1, [sp, #56]
    5f24:	ldr	x0, [sp, #56]
    5f28:	bl	5060 <mpc_conj@plt>
    5f2c:	ldr	w0, [sp, #316]
    5f30:	cmp	w0, #0x0
    5f34:	b.lt	5f50 <mpc_acos@@Base+0x774>  // b.tstop
    5f38:	ldr	w0, [sp, #316]
    5f3c:	cmp	w0, #0x0
    5f40:	cset	w0, ne  // ne = any
    5f44:	and	w0, w0, #0xff
    5f48:	mov	w1, w0
    5f4c:	b	5f54 <mpc_acos@@Base+0x778>
    5f50:	mov	w1, #0x2                   	// #2
    5f54:	ldr	w0, [sp, #312]
    5f58:	cmp	w0, #0x0
    5f5c:	b.lt	5f7c <mpc_acos@@Base+0x7a0>  // b.tstop
    5f60:	ldr	w0, [sp, #312]
    5f64:	cmp	w0, #0x0
    5f68:	b.eq	5f74 <mpc_acos@@Base+0x798>  // b.none
    5f6c:	mov	w0, #0x4                   	// #4
    5f70:	b	5f80 <mpc_acos@@Base+0x7a4>
    5f74:	mov	w0, #0x0                   	// #0
    5f78:	b	5f80 <mpc_acos@@Base+0x7a4>
    5f7c:	mov	w0, #0x8                   	// #8
    5f80:	orr	w0, w1, w0
    5f84:	b	6390 <mpc_acos@@Base+0xbb4>
    5f88:	ldr	x0, [sp, #56]
    5f8c:	ldr	x0, [x0]
    5f90:	str	x0, [sp, #280]
    5f94:	ldr	x0, [sp, #56]
    5f98:	ldr	x0, [x0, #32]
    5f9c:	str	x0, [sp, #272]
    5fa0:	ldr	x0, [sp, #280]
    5fa4:	str	x0, [sp, #296]
    5fa8:	add	x0, sp, #0x80
    5fac:	ldr	x2, [sp, #272]
    5fb0:	ldr	x1, [sp, #296]
    5fb4:	bl	54c0 <mpc_init3@plt>
    5fb8:	ldr	w0, [sp, #44]
    5fbc:	asr	w0, w0, #4
    5fc0:	str	w0, [sp, #292]
    5fc4:	ldr	w0, [sp, #292]
    5fc8:	cmp	w0, #0x1
    5fcc:	b.ne	6038 <mpc_acos@@Base+0x85c>  // b.any
    5fd0:	ldr	x0, [sp, #48]
    5fd4:	ldr	x1, [x0, #48]
    5fd8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    5fdc:	cmp	x1, x0
    5fe0:	b.ge	6008 <mpc_acos@@Base+0x82c>  // b.tcont
    5fe4:	ldr	x0, [sp, #48]
    5fe8:	ldr	x1, [x0, #48]
    5fec:	mov	x0, #0x2                   	// #2
    5ff0:	movk	x0, #0x8000, lsl #48
    5ff4:	cmp	x1, x0
    5ff8:	b.ne	6000 <mpc_acos@@Base+0x824>  // b.any
    5ffc:	bl	4bd0 <mpfr_set_erangeflag@plt>
    6000:	mov	w0, #0x0                   	// #0
    6004:	b	601c <mpc_acos@@Base+0x840>
    6008:	ldr	x0, [sp, #48]
    600c:	ldr	w0, [x0, #40]
    6010:	cmp	w0, #0x0
    6014:	cset	w0, gt
    6018:	and	w0, w0, #0xff
    601c:	cmp	w0, #0x0
    6020:	b.eq	602c <mpc_acos@@Base+0x850>  // b.none
    6024:	mov	w0, #0x3                   	// #3
    6028:	b	6030 <mpc_acos@@Base+0x854>
    602c:	mov	w0, #0x2                   	// #2
    6030:	str	w0, [sp, #292]
    6034:	b	6068 <mpc_acos@@Base+0x88c>
    6038:	ldr	w0, [sp, #292]
    603c:	cmp	w0, #0x2
    6040:	b.eq	6060 <mpc_acos@@Base+0x884>  // b.none
    6044:	ldr	w0, [sp, #292]
    6048:	cmp	w0, #0x3
    604c:	b.eq	6058 <mpc_acos@@Base+0x87c>  // b.none
    6050:	ldr	w0, [sp, #292]
    6054:	b	6064 <mpc_acos@@Base+0x888>
    6058:	mov	w0, #0x2                   	// #2
    605c:	b	6064 <mpc_acos@@Base+0x888>
    6060:	mov	w0, #0x3                   	// #3
    6064:	str	w0, [sp, #292]
    6068:	ldr	w0, [sp, #292]
    606c:	lsl	w0, w0, #4
    6070:	str	w0, [sp, #268]
    6074:	add	x0, sp, #0x60
    6078:	ldr	x1, [sp, #296]
    607c:	bl	5530 <mpfr_init2@plt>
    6080:	ldr	w0, [sp, #308]
    6084:	add	w0, w0, #0x1
    6088:	str	w0, [sp, #308]
    608c:	ldr	w0, [sp, #308]
    6090:	cmp	w0, #0x2
    6094:	b.gt	60a8 <mpc_acos@@Base+0x8cc>
    6098:	ldr	x0, [sp, #296]
    609c:	bl	4de0 <mpc_ceil_log2@plt>
    60a0:	add	x0, x0, #0x3
    60a4:	b	60b8 <mpc_acos@@Base+0x8dc>
    60a8:	ldr	x0, [sp, #296]
    60ac:	lsr	x1, x0, #63
    60b0:	add	x0, x1, x0
    60b4:	asr	x0, x0, #1
    60b8:	ldr	x1, [sp, #296]
    60bc:	add	x0, x1, x0
    60c0:	str	x0, [sp, #296]
    60c4:	add	x0, sp, #0x80
    60c8:	ldr	x1, [sp, #296]
    60cc:	bl	4d40 <mpfr_set_prec@plt>
    60d0:	add	x0, sp, #0x60
    60d4:	ldr	x1, [sp, #296]
    60d8:	bl	4d40 <mpfr_set_prec@plt>
    60dc:	add	x0, sp, #0x60
    60e0:	mov	w2, #0x0                   	// #0
    60e4:	mov	w1, #0x1                   	// #1
    60e8:	bl	54f0 <set_pi_over_2@plt>
    60ec:	mov	x0, #0x1                   	// #1
    60f0:	str	x0, [sp, #256]
    60f4:	add	x0, sp, #0x80
    60f8:	ldr	w2, [sp, #268]
    60fc:	ldr	x1, [sp, #48]
    6100:	bl	5570 <mpc_asin@plt>
    6104:	str	w0, [sp, #252]
    6108:	ldr	x1, [sp, #176]
    610c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6110:	cmp	x1, x0
    6114:	b.ge	6138 <mpc_acos@@Base+0x95c>  // b.tcont
    6118:	ldr	x1, [sp, #176]
    611c:	mov	x0, #0x2                   	// #2
    6120:	movk	x0, #0x8000, lsl #48
    6124:	cmp	x1, x0
    6128:	b.ne	6130 <mpc_acos@@Base+0x954>  // b.any
    612c:	bl	4bd0 <mpfr_set_erangeflag@plt>
    6130:	mov	w19, #0x0                   	// #0
    6134:	b	613c <mpc_acos@@Base+0x960>
    6138:	ldr	w19, [sp, #168]
    613c:	ldr	x0, [sp, #48]
    6140:	ldr	x1, [x0, #48]
    6144:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6148:	cmp	x1, x0
    614c:	b.ge	6174 <mpc_acos@@Base+0x998>  // b.tcont
    6150:	ldr	x0, [sp, #48]
    6154:	ldr	x1, [x0, #48]
    6158:	mov	x0, #0x2                   	// #2
    615c:	movk	x0, #0x8000, lsl #48
    6160:	cmp	x1, x0
    6164:	b.ne	616c <mpc_acos@@Base+0x990>  // b.any
    6168:	bl	4bd0 <mpfr_set_erangeflag@plt>
    616c:	mov	w0, #0x0                   	// #0
    6170:	b	617c <mpc_acos@@Base+0x9a0>
    6174:	ldr	x0, [sp, #48]
    6178:	ldr	w0, [x0, #40]
    617c:	mul	w0, w19, w0
    6180:	cmp	w0, #0x0
    6184:	b.gt	61bc <mpc_acos@@Base+0x9e0>
    6188:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    618c:	ldr	x0, [x0, #4008]
    6190:	ldr	x5, [x0]
    6194:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    6198:	add	x4, x0, #0xea0
    619c:	mov	w3, #0xca                  	// #202
    61a0:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    61a4:	add	x2, x0, #0xee0
    61a8:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    61ac:	add	x1, x0, #0xee8
    61b0:	mov	x0, x5
    61b4:	bl	56a0 <fprintf@plt>
    61b8:	bl	5100 <abort@plt>
    61bc:	ldr	w0, [sp, #252]
    61c0:	asr	w0, w0, #2
    61c4:	cmp	w0, #0x2
    61c8:	b.eq	61e4 <mpc_acos@@Base+0xa08>  // b.none
    61cc:	ldr	w0, [sp, #252]
    61d0:	asr	w0, w0, #2
    61d4:	cmp	w0, #0x0
    61d8:	cset	w0, ne  // ne = any
    61dc:	and	w0, w0, #0xff
    61e0:	b	61e8 <mpc_acos@@Base+0xa0c>
    61e4:	mov	w0, #0xffffffff            	// #-1
    61e8:	str	w0, [sp, #312]
    61ec:	ldr	x0, [sp, #144]
    61f0:	str	x0, [sp, #240]
    61f4:	add	x2, sp, #0x80
    61f8:	add	x1, sp, #0x60
    61fc:	add	x0, sp, #0x80
    6200:	mov	w3, #0x0                   	// #0
    6204:	bl	4b30 <mpfr_sub@plt>
    6208:	ldr	x1, [sp, #144]
    620c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    6210:	cmp	x1, x0
    6214:	b.eq	6080 <mpc_acos@@Base+0x8a4>  // b.none
    6218:	ldr	x1, [sp, #256]
    621c:	ldr	x0, [sp, #240]
    6220:	cmp	x1, x0
    6224:	b.lt	6234 <mpc_acos@@Base+0xa58>  // b.tstop
    6228:	ldr	x0, [sp, #256]
    622c:	add	x0, x0, #0x1
    6230:	b	623c <mpc_acos@@Base+0xa60>
    6234:	ldr	x0, [sp, #240]
    6238:	add	x0, x0, #0x1
    623c:	str	x0, [sp, #256]
    6240:	ldr	x0, [sp, #144]
    6244:	ldr	x1, [sp, #256]
    6248:	sub	x0, x1, x0
    624c:	str	x0, [sp, #256]
    6250:	ldr	x1, [sp, #256]
    6254:	ldr	x0, [sp, #256]
    6258:	mov	x2, #0x0                   	// #0
    625c:	cmp	x1, #0x0
    6260:	csel	x0, x0, x2, ge  // ge = tcont
    6264:	str	x0, [sp, #256]
    6268:	add	x0, sp, #0x80
    626c:	add	x1, x0, #0x20
    6270:	add	x0, sp, #0x80
    6274:	add	x0, x0, #0x20
    6278:	mov	w2, #0x0                   	// #0
    627c:	bl	4c50 <mpfr_neg@plt>
    6280:	ldr	w0, [sp, #312]
    6284:	neg	w0, w0
    6288:	str	w0, [sp, #312]
    628c:	ldr	x1, [sp, #296]
    6290:	ldr	x0, [sp, #256]
    6294:	sub	x5, x1, x0
    6298:	ldr	w0, [sp, #44]
    629c:	and	w0, w0, #0xf
    62a0:	cmp	w0, #0x0
    62a4:	cset	w0, eq  // eq = none
    62a8:	and	w0, w0, #0xff
    62ac:	and	x1, x0, #0xff
    62b0:	ldr	x0, [sp, #280]
    62b4:	add	x1, x1, x0
    62b8:	add	x0, sp, #0x80
    62bc:	mov	x4, x1
    62c0:	mov	w3, #0x1                   	// #1
    62c4:	mov	w2, #0x0                   	// #0
    62c8:	mov	x1, x5
    62cc:	bl	5540 <mpfr_can_round@plt>
    62d0:	cmp	w0, #0x0
    62d4:	b.ne	62dc <mpc_acos@@Base+0xb00>  // b.any
    62d8:	b	6080 <mpc_acos@@Base+0x8a4>
    62dc:	nop
    62e0:	add	x0, sp, #0x80
    62e4:	ldr	w2, [sp, #44]
    62e8:	mov	x1, x0
    62ec:	ldr	x0, [sp, #56]
    62f0:	bl	5680 <mpc_set@plt>
    62f4:	str	w0, [sp, #252]
    62f8:	ldr	w0, [sp, #252]
    62fc:	and	w0, w0, #0x3
    6300:	cmp	w0, #0x2
    6304:	b.eq	6320 <mpc_acos@@Base+0xb44>  // b.none
    6308:	ldr	w0, [sp, #252]
    630c:	and	w0, w0, #0x3
    6310:	cmp	w0, #0x0
    6314:	cset	w0, ne  // ne = any
    6318:	and	w0, w0, #0xff
    631c:	b	6324 <mpc_acos@@Base+0xb48>
    6320:	mov	w0, #0xffffffff            	// #-1
    6324:	str	w0, [sp, #316]
    6328:	add	x0, sp, #0x80
    632c:	bl	4ae0 <mpc_clear@plt>
    6330:	add	x0, sp, #0x60
    6334:	bl	4e30 <mpfr_clear@plt>
    6338:	ldr	w0, [sp, #316]
    633c:	cmp	w0, #0x0
    6340:	b.lt	635c <mpc_acos@@Base+0xb80>  // b.tstop
    6344:	ldr	w0, [sp, #316]
    6348:	cmp	w0, #0x0
    634c:	cset	w0, ne  // ne = any
    6350:	and	w0, w0, #0xff
    6354:	mov	w1, w0
    6358:	b	6360 <mpc_acos@@Base+0xb84>
    635c:	mov	w1, #0x2                   	// #2
    6360:	ldr	w0, [sp, #312]
    6364:	cmp	w0, #0x0
    6368:	b.lt	6388 <mpc_acos@@Base+0xbac>  // b.tstop
    636c:	ldr	w0, [sp, #312]
    6370:	cmp	w0, #0x0
    6374:	b.eq	6380 <mpc_acos@@Base+0xba4>  // b.none
    6378:	mov	w0, #0x4                   	// #4
    637c:	b	638c <mpc_acos@@Base+0xbb0>
    6380:	mov	w0, #0x0                   	// #0
    6384:	b	638c <mpc_acos@@Base+0xbb0>
    6388:	mov	w0, #0x8                   	// #8
    638c:	orr	w0, w1, w0
    6390:	ldr	x19, [sp, #16]
    6394:	ldp	x29, x30, [sp], #320
    6398:	ret

000000000000639c <mpc_acosh@@Base>:
    639c:	stp	x29, x30, [sp, #-160]!
    63a0:	mov	x29, sp
    63a4:	str	x0, [sp, #40]
    63a8:	str	x1, [sp, #32]
    63ac:	str	w2, [sp, #28]
    63b0:	ldr	x0, [sp, #32]
    63b4:	ldr	x1, [x0, #16]
    63b8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    63bc:	cmp	x1, x0
    63c0:	b.ne	63f8 <mpc_acosh@@Base+0x5c>  // b.any
    63c4:	ldr	x0, [sp, #32]
    63c8:	ldr	x1, [x0, #48]
    63cc:	mov	x0, #0x2                   	// #2
    63d0:	movk	x0, #0x8000, lsl #48
    63d4:	cmp	x1, x0
    63d8:	b.ne	63f8 <mpc_acosh@@Base+0x5c>  // b.any
    63dc:	ldr	x0, [sp, #40]
    63e0:	bl	4b10 <mpfr_set_nan@plt>
    63e4:	ldr	x0, [sp, #40]
    63e8:	add	x0, x0, #0x20
    63ec:	bl	4b10 <mpfr_set_nan@plt>
    63f0:	mov	w0, #0x0                   	// #0
    63f4:	b	66fc <mpc_acosh@@Base+0x360>
    63f8:	ldr	x0, [sp, #40]
    63fc:	ldr	x1, [x0, #32]
    6400:	ldr	x0, [sp, #40]
    6404:	ldr	x2, [x0]
    6408:	add	x0, sp, #0x58
    640c:	bl	54c0 <mpc_init3@plt>
    6410:	ldr	x0, [sp, #32]
    6414:	ldr	w0, [x0, #40]
    6418:	cmp	w0, #0x0
    641c:	b.ge	6584 <mpc_acosh@@Base+0x1e8>  // b.tcont
    6420:	ldr	w0, [sp, #28]
    6424:	asr	w0, w0, #4
    6428:	cmp	w0, #0x2
    642c:	b.eq	6454 <mpc_acosh@@Base+0xb8>  // b.none
    6430:	ldr	w0, [sp, #28]
    6434:	asr	w0, w0, #4
    6438:	cmp	w0, #0x3
    643c:	b.eq	644c <mpc_acosh@@Base+0xb0>  // b.none
    6440:	ldr	w0, [sp, #28]
    6444:	asr	w0, w0, #4
    6448:	b	6458 <mpc_acosh@@Base+0xbc>
    644c:	mov	w0, #0x2                   	// #2
    6450:	b	6458 <mpc_acosh@@Base+0xbc>
    6454:	mov	w0, #0x3                   	// #3
    6458:	ldr	w1, [sp, #28]
    645c:	lsl	w1, w1, #4
    6460:	and	w1, w1, #0xff
    6464:	add	w1, w0, w1
    6468:	add	x0, sp, #0x58
    646c:	mov	w2, w1
    6470:	ldr	x1, [sp, #32]
    6474:	bl	5170 <mpc_acos@plt>
    6478:	str	w0, [sp, #156]
    647c:	add	x2, sp, #0x38
    6480:	add	x3, sp, #0x58
    6484:	ldp	x0, x1, [x3]
    6488:	stp	x0, x1, [x2]
    648c:	ldp	x0, x1, [x3, #16]
    6490:	stp	x0, x1, [x2, #16]
    6494:	add	x2, sp, #0x58
    6498:	add	x3, sp, #0x78
    649c:	ldp	x0, x1, [x3]
    64a0:	stp	x0, x1, [x2]
    64a4:	ldp	x0, x1, [x3, #16]
    64a8:	stp	x0, x1, [x2, #16]
    64ac:	add	x2, sp, #0x78
    64b0:	add	x3, sp, #0x38
    64b4:	ldp	x0, x1, [x3]
    64b8:	stp	x0, x1, [x2]
    64bc:	ldp	x0, x1, [x3, #16]
    64c0:	stp	x0, x1, [x2, #16]
    64c4:	add	x0, sp, #0x58
    64c8:	add	x1, x0, #0x20
    64cc:	add	x0, sp, #0x58
    64d0:	add	x0, x0, #0x20
    64d4:	mov	w2, #0x0                   	// #0
    64d8:	bl	4c50 <mpfr_neg@plt>
    64dc:	ldr	w0, [sp, #156]
    64e0:	asr	w0, w0, #2
    64e4:	cmp	w0, #0x2
    64e8:	b.eq	651c <mpc_acosh@@Base+0x180>  // b.none
    64ec:	ldr	w0, [sp, #156]
    64f0:	asr	w0, w0, #2
    64f4:	cmp	w0, #0x2
    64f8:	b.eq	650c <mpc_acosh@@Base+0x170>  // b.none
    64fc:	ldr	w0, [sp, #156]
    6500:	asr	w0, w0, #2
    6504:	cmp	w0, #0x0
    6508:	b.eq	6514 <mpc_acosh@@Base+0x178>  // b.none
    650c:	mov	w0, #0x1                   	// #1
    6510:	b	6520 <mpc_acosh@@Base+0x184>
    6514:	mov	w0, #0x0                   	// #0
    6518:	b	6520 <mpc_acosh@@Base+0x184>
    651c:	mov	w0, #0x2                   	// #2
    6520:	ldr	w1, [sp, #156]
    6524:	and	w1, w1, #0x3
    6528:	cmp	w1, #0x2
    652c:	b.eq	6540 <mpc_acosh@@Base+0x1a4>  // b.none
    6530:	ldr	w1, [sp, #156]
    6534:	and	w1, w1, #0x3
    6538:	cmp	w1, #0x0
    653c:	b.ne	6574 <mpc_acosh@@Base+0x1d8>  // b.any
    6540:	ldr	w1, [sp, #156]
    6544:	and	w1, w1, #0x3
    6548:	cmp	w1, #0x2
    654c:	b.eq	6560 <mpc_acosh@@Base+0x1c4>  // b.none
    6550:	ldr	w1, [sp, #156]
    6554:	and	w1, w1, #0x3
    6558:	cmp	w1, #0x0
    655c:	b.eq	6568 <mpc_acosh@@Base+0x1cc>  // b.none
    6560:	mov	w1, #0x1                   	// #1
    6564:	b	656c <mpc_acosh@@Base+0x1d0>
    6568:	mov	w1, #0x0                   	// #0
    656c:	lsl	w1, w1, #2
    6570:	b	6578 <mpc_acosh@@Base+0x1dc>
    6574:	mov	w1, #0x8                   	// #8
    6578:	orr	w0, w0, w1
    657c:	str	w0, [sp, #156]
    6580:	b	66dc <mpc_acosh@@Base+0x340>
    6584:	ldr	w0, [sp, #28]
    6588:	asr	w1, w0, #4
    658c:	ldr	w0, [sp, #28]
    6590:	and	w0, w0, #0xf
    6594:	cmp	w0, #0x2
    6598:	b.eq	65c4 <mpc_acosh@@Base+0x228>  // b.none
    659c:	ldr	w0, [sp, #28]
    65a0:	and	w0, w0, #0xf
    65a4:	cmp	w0, #0x3
    65a8:	b.eq	65bc <mpc_acosh@@Base+0x220>  // b.none
    65ac:	ldr	w0, [sp, #28]
    65b0:	lsl	w0, w0, #4
    65b4:	and	w0, w0, #0xff
    65b8:	b	65c8 <mpc_acosh@@Base+0x22c>
    65bc:	mov	w0, #0x20                  	// #32
    65c0:	b	65c8 <mpc_acosh@@Base+0x22c>
    65c4:	mov	w0, #0x30                  	// #48
    65c8:	add	w1, w0, w1
    65cc:	add	x0, sp, #0x58
    65d0:	mov	w2, w1
    65d4:	ldr	x1, [sp, #32]
    65d8:	bl	5170 <mpc_acos@plt>
    65dc:	str	w0, [sp, #156]
    65e0:	add	x2, sp, #0x38
    65e4:	add	x3, sp, #0x58
    65e8:	ldp	x0, x1, [x3]
    65ec:	stp	x0, x1, [x2]
    65f0:	ldp	x0, x1, [x3, #16]
    65f4:	stp	x0, x1, [x2, #16]
    65f8:	add	x2, sp, #0x58
    65fc:	add	x3, sp, #0x78
    6600:	ldp	x0, x1, [x3]
    6604:	stp	x0, x1, [x2]
    6608:	ldp	x0, x1, [x3, #16]
    660c:	stp	x0, x1, [x2, #16]
    6610:	add	x2, sp, #0x78
    6614:	add	x3, sp, #0x38
    6618:	ldp	x0, x1, [x3]
    661c:	stp	x0, x1, [x2]
    6620:	ldp	x0, x1, [x3, #16]
    6624:	stp	x0, x1, [x2, #16]
    6628:	add	x1, sp, #0x58
    662c:	add	x0, sp, #0x58
    6630:	mov	w2, #0x0                   	// #0
    6634:	bl	4c50 <mpfr_neg@plt>
    6638:	ldr	w0, [sp, #156]
    663c:	asr	w0, w0, #2
    6640:	cmp	w0, #0x2
    6644:	b.eq	6658 <mpc_acosh@@Base+0x2bc>  // b.none
    6648:	ldr	w0, [sp, #156]
    664c:	asr	w0, w0, #2
    6650:	cmp	w0, #0x0
    6654:	b.ne	6688 <mpc_acosh@@Base+0x2ec>  // b.any
    6658:	ldr	w0, [sp, #156]
    665c:	asr	w0, w0, #2
    6660:	cmp	w0, #0x2
    6664:	b.eq	6678 <mpc_acosh@@Base+0x2dc>  // b.none
    6668:	ldr	w0, [sp, #156]
    666c:	asr	w0, w0, #2
    6670:	cmp	w0, #0x0
    6674:	b.eq	6680 <mpc_acosh@@Base+0x2e4>  // b.none
    6678:	mov	w0, #0x1                   	// #1
    667c:	b	668c <mpc_acosh@@Base+0x2f0>
    6680:	mov	w0, #0x0                   	// #0
    6684:	b	668c <mpc_acosh@@Base+0x2f0>
    6688:	mov	w0, #0x2                   	// #2
    668c:	ldr	w1, [sp, #156]
    6690:	and	w1, w1, #0x3
    6694:	cmp	w1, #0x2
    6698:	b.eq	66d0 <mpc_acosh@@Base+0x334>  // b.none
    669c:	ldr	w1, [sp, #156]
    66a0:	and	w1, w1, #0x3
    66a4:	cmp	w1, #0x2
    66a8:	b.eq	66bc <mpc_acosh@@Base+0x320>  // b.none
    66ac:	ldr	w1, [sp, #156]
    66b0:	and	w1, w1, #0x3
    66b4:	cmp	w1, #0x0
    66b8:	b.eq	66c4 <mpc_acosh@@Base+0x328>  // b.none
    66bc:	mov	w1, #0x1                   	// #1
    66c0:	b	66c8 <mpc_acosh@@Base+0x32c>
    66c4:	mov	w1, #0x0                   	// #0
    66c8:	lsl	w1, w1, #2
    66cc:	b	66d4 <mpc_acosh@@Base+0x338>
    66d0:	mov	w1, #0x8                   	// #8
    66d4:	orr	w0, w0, w1
    66d8:	str	w0, [sp, #156]
    66dc:	add	x0, sp, #0x58
    66e0:	ldr	w2, [sp, #28]
    66e4:	mov	x1, x0
    66e8:	ldr	x0, [sp, #40]
    66ec:	bl	5680 <mpc_set@plt>
    66f0:	add	x0, sp, #0x58
    66f4:	bl	4ae0 <mpc_clear@plt>
    66f8:	ldr	w0, [sp, #156]
    66fc:	ldp	x29, x30, [sp], #160
    6700:	ret

0000000000006704 <mpc_add@@Base>:
    6704:	stp	x29, x30, [sp, #-64]!
    6708:	mov	x29, sp
    670c:	str	x0, [sp, #40]
    6710:	str	x1, [sp, #32]
    6714:	str	x2, [sp, #24]
    6718:	str	w3, [sp, #20]
    671c:	ldr	x4, [sp, #40]
    6720:	ldr	x1, [sp, #32]
    6724:	ldr	x2, [sp, #24]
    6728:	ldr	w0, [sp, #20]
    672c:	and	w0, w0, #0xf
    6730:	mov	w3, w0
    6734:	mov	x0, x4
    6738:	bl	4f50 <mpfr_add@plt>
    673c:	str	w0, [sp, #60]
    6740:	ldr	x0, [sp, #40]
    6744:	add	x4, x0, #0x20
    6748:	ldr	x0, [sp, #32]
    674c:	add	x1, x0, #0x20
    6750:	ldr	x0, [sp, #24]
    6754:	add	x2, x0, #0x20
    6758:	ldr	w0, [sp, #20]
    675c:	asr	w0, w0, #4
    6760:	mov	w3, w0
    6764:	mov	x0, x4
    6768:	bl	4f50 <mpfr_add@plt>
    676c:	str	w0, [sp, #56]
    6770:	ldr	w0, [sp, #60]
    6774:	cmp	w0, #0x0
    6778:	b.lt	6794 <mpc_add@@Base+0x90>  // b.tstop
    677c:	ldr	w0, [sp, #60]
    6780:	cmp	w0, #0x0
    6784:	cset	w0, ne  // ne = any
    6788:	and	w0, w0, #0xff
    678c:	mov	w1, w0
    6790:	b	6798 <mpc_add@@Base+0x94>
    6794:	mov	w1, #0x2                   	// #2
    6798:	ldr	w0, [sp, #56]
    679c:	cmp	w0, #0x0
    67a0:	b.lt	67c0 <mpc_add@@Base+0xbc>  // b.tstop
    67a4:	ldr	w0, [sp, #56]
    67a8:	cmp	w0, #0x0
    67ac:	b.eq	67b8 <mpc_add@@Base+0xb4>  // b.none
    67b0:	mov	w0, #0x4                   	// #4
    67b4:	b	67c4 <mpc_add@@Base+0xc0>
    67b8:	mov	w0, #0x0                   	// #0
    67bc:	b	67c4 <mpc_add@@Base+0xc0>
    67c0:	mov	w0, #0x8                   	// #8
    67c4:	orr	w0, w1, w0
    67c8:	ldp	x29, x30, [sp], #64
    67cc:	ret

00000000000067d0 <mpc_add_fr@@Base>:
    67d0:	stp	x29, x30, [sp, #-64]!
    67d4:	mov	x29, sp
    67d8:	str	x0, [sp, #40]
    67dc:	str	x1, [sp, #32]
    67e0:	str	x2, [sp, #24]
    67e4:	str	w3, [sp, #20]
    67e8:	ldr	x4, [sp, #40]
    67ec:	ldr	x1, [sp, #32]
    67f0:	ldr	w0, [sp, #20]
    67f4:	and	w0, w0, #0xf
    67f8:	mov	w3, w0
    67fc:	ldr	x2, [sp, #24]
    6800:	mov	x0, x4
    6804:	bl	4f50 <mpfr_add@plt>
    6808:	str	w0, [sp, #60]
    680c:	ldr	x0, [sp, #40]
    6810:	add	x4, x0, #0x20
    6814:	ldr	x0, [sp, #32]
    6818:	add	x1, x0, #0x20
    681c:	ldr	w0, [sp, #20]
    6820:	asr	w2, w0, #4
    6824:	ldr	x0, [sp, #32]
    6828:	ldr	w0, [x0, #40]
    682c:	mov	w3, w0
    6830:	mov	x0, x4
    6834:	bl	52d0 <mpfr_set4@plt>
    6838:	str	w0, [sp, #56]
    683c:	ldr	w0, [sp, #60]
    6840:	cmp	w0, #0x0
    6844:	b.lt	6860 <mpc_add_fr@@Base+0x90>  // b.tstop
    6848:	ldr	w0, [sp, #60]
    684c:	cmp	w0, #0x0
    6850:	cset	w0, ne  // ne = any
    6854:	and	w0, w0, #0xff
    6858:	mov	w1, w0
    685c:	b	6864 <mpc_add_fr@@Base+0x94>
    6860:	mov	w1, #0x2                   	// #2
    6864:	ldr	w0, [sp, #56]
    6868:	cmp	w0, #0x0
    686c:	b.lt	688c <mpc_add_fr@@Base+0xbc>  // b.tstop
    6870:	ldr	w0, [sp, #56]
    6874:	cmp	w0, #0x0
    6878:	b.eq	6884 <mpc_add_fr@@Base+0xb4>  // b.none
    687c:	mov	w0, #0x4                   	// #4
    6880:	b	6890 <mpc_add_fr@@Base+0xc0>
    6884:	mov	w0, #0x0                   	// #0
    6888:	b	6890 <mpc_add_fr@@Base+0xc0>
    688c:	mov	w0, #0x8                   	// #8
    6890:	orr	w0, w1, w0
    6894:	ldp	x29, x30, [sp], #64
    6898:	ret

000000000000689c <mpc_add_si@@Base>:
    689c:	stp	x29, x30, [sp, #-64]!
    68a0:	mov	x29, sp
    68a4:	str	x0, [sp, #40]
    68a8:	str	x1, [sp, #32]
    68ac:	str	x2, [sp, #24]
    68b0:	str	w3, [sp, #20]
    68b4:	ldr	x4, [sp, #40]
    68b8:	ldr	x1, [sp, #32]
    68bc:	ldr	w0, [sp, #20]
    68c0:	and	w0, w0, #0xf
    68c4:	mov	w3, w0
    68c8:	ldr	x2, [sp, #24]
    68cc:	mov	x0, x4
    68d0:	bl	5360 <mpfr_add_si@plt>
    68d4:	str	w0, [sp, #60]
    68d8:	ldr	x0, [sp, #40]
    68dc:	add	x4, x0, #0x20
    68e0:	ldr	x0, [sp, #32]
    68e4:	add	x1, x0, #0x20
    68e8:	ldr	w0, [sp, #20]
    68ec:	asr	w2, w0, #4
    68f0:	ldr	x0, [sp, #32]
    68f4:	ldr	w0, [x0, #40]
    68f8:	mov	w3, w0
    68fc:	mov	x0, x4
    6900:	bl	52d0 <mpfr_set4@plt>
    6904:	str	w0, [sp, #56]
    6908:	ldr	w0, [sp, #60]
    690c:	cmp	w0, #0x0
    6910:	b.lt	692c <mpc_add_si@@Base+0x90>  // b.tstop
    6914:	ldr	w0, [sp, #60]
    6918:	cmp	w0, #0x0
    691c:	cset	w0, ne  // ne = any
    6920:	and	w0, w0, #0xff
    6924:	mov	w1, w0
    6928:	b	6930 <mpc_add_si@@Base+0x94>
    692c:	mov	w1, #0x2                   	// #2
    6930:	ldr	w0, [sp, #56]
    6934:	cmp	w0, #0x0
    6938:	b.lt	6958 <mpc_add_si@@Base+0xbc>  // b.tstop
    693c:	ldr	w0, [sp, #56]
    6940:	cmp	w0, #0x0
    6944:	b.eq	6950 <mpc_add_si@@Base+0xb4>  // b.none
    6948:	mov	w0, #0x4                   	// #4
    694c:	b	695c <mpc_add_si@@Base+0xc0>
    6950:	mov	w0, #0x0                   	// #0
    6954:	b	695c <mpc_add_si@@Base+0xc0>
    6958:	mov	w0, #0x8                   	// #8
    695c:	orr	w0, w1, w0
    6960:	ldp	x29, x30, [sp], #64
    6964:	ret

0000000000006968 <mpc_add_ui@@Base>:
    6968:	stp	x29, x30, [sp, #-64]!
    696c:	mov	x29, sp
    6970:	str	x0, [sp, #40]
    6974:	str	x1, [sp, #32]
    6978:	str	x2, [sp, #24]
    697c:	str	w3, [sp, #20]
    6980:	ldr	x4, [sp, #40]
    6984:	ldr	x1, [sp, #32]
    6988:	ldr	w0, [sp, #20]
    698c:	and	w0, w0, #0xf
    6990:	mov	w3, w0
    6994:	ldr	x2, [sp, #24]
    6998:	mov	x0, x4
    699c:	bl	4fe0 <mpfr_add_ui@plt>
    69a0:	str	w0, [sp, #60]
    69a4:	ldr	x0, [sp, #40]
    69a8:	add	x4, x0, #0x20
    69ac:	ldr	x0, [sp, #32]
    69b0:	add	x1, x0, #0x20
    69b4:	ldr	w0, [sp, #20]
    69b8:	asr	w2, w0, #4
    69bc:	ldr	x0, [sp, #32]
    69c0:	ldr	w0, [x0, #40]
    69c4:	mov	w3, w0
    69c8:	mov	x0, x4
    69cc:	bl	52d0 <mpfr_set4@plt>
    69d0:	str	w0, [sp, #56]
    69d4:	ldr	w0, [sp, #60]
    69d8:	cmp	w0, #0x0
    69dc:	b.lt	69f8 <mpc_add_ui@@Base+0x90>  // b.tstop
    69e0:	ldr	w0, [sp, #60]
    69e4:	cmp	w0, #0x0
    69e8:	cset	w0, ne  // ne = any
    69ec:	and	w0, w0, #0xff
    69f0:	mov	w1, w0
    69f4:	b	69fc <mpc_add_ui@@Base+0x94>
    69f8:	mov	w1, #0x2                   	// #2
    69fc:	ldr	w0, [sp, #56]
    6a00:	cmp	w0, #0x0
    6a04:	b.lt	6a24 <mpc_add_ui@@Base+0xbc>  // b.tstop
    6a08:	ldr	w0, [sp, #56]
    6a0c:	cmp	w0, #0x0
    6a10:	b.eq	6a1c <mpc_add_ui@@Base+0xb4>  // b.none
    6a14:	mov	w0, #0x4                   	// #4
    6a18:	b	6a28 <mpc_add_ui@@Base+0xc0>
    6a1c:	mov	w0, #0x0                   	// #0
    6a20:	b	6a28 <mpc_add_ui@@Base+0xc0>
    6a24:	mov	w0, #0x8                   	// #8
    6a28:	orr	w0, w1, w0
    6a2c:	ldp	x29, x30, [sp], #64
    6a30:	ret

0000000000006a34 <mpc_arg@@Base>:
    6a34:	stp	x29, x30, [sp, #-48]!
    6a38:	mov	x29, sp
    6a3c:	str	x0, [sp, #40]
    6a40:	str	x1, [sp, #32]
    6a44:	str	w2, [sp, #28]
    6a48:	ldr	x0, [sp, #32]
    6a4c:	add	x0, x0, #0x20
    6a50:	ldr	x1, [sp, #32]
    6a54:	ldr	w3, [sp, #28]
    6a58:	mov	x2, x1
    6a5c:	mov	x1, x0
    6a60:	ldr	x0, [sp, #40]
    6a64:	bl	4d60 <mpfr_atan2@plt>
    6a68:	ldp	x29, x30, [sp], #48
    6a6c:	ret
    6a70:	stp	x29, x30, [sp, #-112]!
    6a74:	mov	x29, sp
    6a78:	str	x0, [sp, #40]
    6a7c:	str	x1, [sp, #32]
    6a80:	str	w2, [sp, #28]
    6a84:	str	x3, [sp, #16]
    6a88:	ldr	x0, [sp, #32]
    6a8c:	ldr	x0, [x0, #48]
    6a90:	str	x0, [sp, #104]
    6a94:	ldr	x0, [sp, #104]
    6a98:	cmp	x0, #0x0
    6a9c:	b.ge	6ac8 <mpc_arg@@Base+0x94>  // b.tcont
    6aa0:	ldr	x0, [sp, #104]
    6aa4:	lsr	x1, x0, #63
    6aa8:	add	x0, x1, x0
    6aac:	asr	x0, x0, #1
    6ab0:	neg	x0, x0
    6ab4:	mov	x1, x0
    6ab8:	ldr	x0, [sp, #16]
    6abc:	ldr	x0, [x0]
    6ac0:	cmp	x1, x0
    6ac4:	b.ge	6ad0 <mpc_arg@@Base+0x9c>  // b.tcont
    6ac8:	mov	w0, #0x0                   	// #0
    6acc:	b	6c80 <mpc_arg@@Base+0x24c>
    6ad0:	ldr	x0, [sp, #16]
    6ad4:	mov	w1, #0x0                   	// #0
    6ad8:	bl	4b50 <mpfr_const_pi@plt>
    6adc:	ldr	x0, [sp, #16]
    6ae0:	ldr	x1, [sp, #16]
    6ae4:	mov	w3, #0x0                   	// #0
    6ae8:	mov	x2, #0x1                   	// #1
    6aec:	bl	5420 <mpfr_div_2ui@plt>
    6af0:	ldr	x0, [sp, #16]
    6af4:	ldr	x0, [x0]
    6af8:	str	x0, [sp, #96]
    6afc:	ldr	x5, [sp, #16]
    6b00:	ldr	x0, [sp, #40]
    6b04:	ldr	x1, [x0]
    6b08:	ldr	w0, [sp, #28]
    6b0c:	and	w0, w0, #0xf
    6b10:	cmp	w0, #0x0
    6b14:	cset	w0, eq  // eq = none
    6b18:	and	w0, w0, #0xff
    6b1c:	and	x0, x0, #0xff
    6b20:	add	x0, x1, x0
    6b24:	mov	x4, x0
    6b28:	mov	w3, #0x1                   	// #1
    6b2c:	mov	w2, #0x0                   	// #0
    6b30:	ldr	x1, [sp, #96]
    6b34:	mov	x0, x5
    6b38:	bl	5540 <mpfr_can_round@plt>
    6b3c:	cmp	w0, #0x0
    6b40:	b.ne	6b4c <mpc_arg@@Base+0x118>  // b.any
    6b44:	mov	w0, #0x0                   	// #0
    6b48:	b	6c80 <mpc_arg@@Base+0x24c>
    6b4c:	ldr	x0, [sp, #32]
    6b50:	add	x0, x0, #0x20
    6b54:	add	x2, sp, #0x38
    6b58:	mov	x3, x0
    6b5c:	ldp	x0, x1, [x3]
    6b60:	stp	x0, x1, [x2]
    6b64:	ldp	x0, x1, [x3, #16]
    6b68:	stp	x0, x1, [x2, #16]
    6b6c:	ldr	x0, [sp, #32]
    6b70:	ldr	w0, [x0, #40]
    6b74:	cmp	w0, #0x0
    6b78:	b.ge	6b8c <mpc_arg@@Base+0x158>  // b.tcont
    6b7c:	add	x1, sp, #0x38
    6b80:	add	x0, sp, #0x38
    6b84:	mov	w2, #0x0                   	// #0
    6b88:	bl	4c50 <mpfr_neg@plt>
    6b8c:	ldr	x0, [sp, #16]
    6b90:	add	x0, x0, #0x20
    6b94:	add	x1, sp, #0x38
    6b98:	mov	w2, #0x0                   	// #0
    6b9c:	bl	5450 <mpfr_sqrt@plt>
    6ba0:	str	w0, [sp, #92]
    6ba4:	ldr	x0, [sp, #32]
    6ba8:	ldr	w0, [x0, #40]
    6bac:	cmp	w0, #0x0
    6bb0:	b.ge	6bd4 <mpc_arg@@Base+0x1a0>  // b.tcont
    6bb4:	ldr	x0, [sp, #16]
    6bb8:	add	x3, x0, #0x20
    6bbc:	ldr	x0, [sp, #16]
    6bc0:	add	x0, x0, #0x20
    6bc4:	mov	w2, #0x0                   	// #0
    6bc8:	mov	x1, x0
    6bcc:	mov	x0, x3
    6bd0:	bl	4c50 <mpfr_neg@plt>
    6bd4:	ldr	w0, [sp, #92]
    6bd8:	cmp	w0, #0x0
    6bdc:	b.ne	6c14 <mpc_arg@@Base+0x1e0>  // b.any
    6be0:	ldr	x0, [sp, #32]
    6be4:	ldr	w0, [x0, #40]
    6be8:	cmp	w0, #0x0
    6bec:	b.ge	6c00 <mpc_arg@@Base+0x1cc>  // b.tcont
    6bf0:	ldr	x0, [sp, #16]
    6bf4:	add	x0, x0, #0x20
    6bf8:	bl	4c80 <mpfr_nextbelow@plt>
    6bfc:	b	6c0c <mpc_arg@@Base+0x1d8>
    6c00:	ldr	x0, [sp, #16]
    6c04:	add	x0, x0, #0x20
    6c08:	bl	4ee0 <mpfr_nextabove@plt>
    6c0c:	mov	w0, #0x1                   	// #1
    6c10:	b	6c80 <mpc_arg@@Base+0x24c>
    6c14:	ldr	x0, [sp, #16]
    6c18:	ldr	x0, [x0, #32]
    6c1c:	str	x0, [sp, #96]
    6c20:	ldr	x0, [sp, #16]
    6c24:	add	x5, x0, #0x20
    6c28:	ldr	x0, [sp, #96]
    6c2c:	sub	x6, x0, #0x1
    6c30:	ldr	x0, [sp, #40]
    6c34:	ldr	x1, [x0, #32]
    6c38:	ldr	w0, [sp, #28]
    6c3c:	asr	w0, w0, #4
    6c40:	cmp	w0, #0x0
    6c44:	cset	w0, eq  // eq = none
    6c48:	and	w0, w0, #0xff
    6c4c:	and	x0, x0, #0xff
    6c50:	add	x0, x1, x0
    6c54:	mov	x4, x0
    6c58:	mov	w3, #0x1                   	// #1
    6c5c:	mov	w2, #0x4                   	// #4
    6c60:	mov	x1, x6
    6c64:	mov	x0, x5
    6c68:	bl	5540 <mpfr_can_round@plt>
    6c6c:	cmp	w0, #0x0
    6c70:	b.ne	6c7c <mpc_arg@@Base+0x248>  // b.any
    6c74:	mov	w0, #0x0                   	// #0
    6c78:	b	6c80 <mpc_arg@@Base+0x24c>
    6c7c:	mov	w0, #0x1                   	// #1
    6c80:	ldp	x29, x30, [sp], #112
    6c84:	ret

0000000000006c88 <mpc_asin@@Base>:
    6c88:	stp	x29, x30, [sp, #-256]!
    6c8c:	mov	x29, sp
    6c90:	str	x0, [sp, #40]
    6c94:	str	x1, [sp, #32]
    6c98:	str	w2, [sp, #28]
    6c9c:	str	wzr, [sp, #244]
    6ca0:	ldr	x0, [sp, #32]
    6ca4:	ldr	x1, [x0, #16]
    6ca8:	mov	x0, #0x2                   	// #2
    6cac:	movk	x0, #0x8000, lsl #48
    6cb0:	cmp	x1, x0
    6cb4:	b.eq	6cd0 <mpc_asin@@Base+0x48>  // b.none
    6cb8:	ldr	x0, [sp, #32]
    6cbc:	ldr	x1, [x0, #48]
    6cc0:	mov	x0, #0x2                   	// #2
    6cc4:	movk	x0, #0x8000, lsl #48
    6cc8:	cmp	x1, x0
    6ccc:	b.ne	6d94 <mpc_asin@@Base+0x10c>  // b.any
    6cd0:	ldr	x0, [sp, #32]
    6cd4:	ldr	x1, [x0, #16]
    6cd8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6cdc:	cmp	x1, x0
    6ce0:	b.eq	6cf8 <mpc_asin@@Base+0x70>  // b.none
    6ce4:	ldr	x0, [sp, #32]
    6ce8:	ldr	x1, [x0, #48]
    6cec:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6cf0:	cmp	x1, x0
    6cf4:	b.ne	6d34 <mpc_asin@@Base+0xac>  // b.any
    6cf8:	ldr	x0, [sp, #40]
    6cfc:	bl	4b10 <mpfr_set_nan@plt>
    6d00:	ldr	x0, [sp, #40]
    6d04:	add	x2, x0, #0x20
    6d08:	ldr	x0, [sp, #32]
    6d0c:	ldr	w0, [x0, #40]
    6d10:	cmp	w0, #0x0
    6d14:	b.ge	6d20 <mpc_asin@@Base+0x98>  // b.tcont
    6d18:	mov	w0, #0xffffffff            	// #-1
    6d1c:	b	6d24 <mpc_asin@@Base+0x9c>
    6d20:	mov	w0, #0x1                   	// #1
    6d24:	mov	w1, w0
    6d28:	mov	x0, x2
    6d2c:	bl	5220 <mpfr_set_inf@plt>
    6d30:	b	6d8c <mpc_asin@@Base+0x104>
    6d34:	ldr	x0, [sp, #32]
    6d38:	ldr	x1, [x0, #16]
    6d3c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    6d40:	cmp	x1, x0
    6d44:	b.ne	6d78 <mpc_asin@@Base+0xf0>  // b.any
    6d48:	ldr	x4, [sp, #40]
    6d4c:	ldr	x1, [sp, #32]
    6d50:	ldr	x0, [sp, #32]
    6d54:	ldr	w0, [x0, #8]
    6d58:	mov	w3, w0
    6d5c:	mov	w2, #0x0                   	// #0
    6d60:	mov	x0, x4
    6d64:	bl	52d0 <mpfr_set4@plt>
    6d68:	ldr	x0, [sp, #40]
    6d6c:	add	x0, x0, #0x20
    6d70:	bl	4b10 <mpfr_set_nan@plt>
    6d74:	b	6d8c <mpc_asin@@Base+0x104>
    6d78:	ldr	x0, [sp, #40]
    6d7c:	bl	4b10 <mpfr_set_nan@plt>
    6d80:	ldr	x0, [sp, #40]
    6d84:	add	x0, x0, #0x20
    6d88:	bl	4b10 <mpfr_set_nan@plt>
    6d8c:	mov	w0, #0x0                   	// #0
    6d90:	b	7788 <mpc_asin@@Base+0xb00>
    6d94:	ldr	x0, [sp, #32]
    6d98:	ldr	x1, [x0, #16]
    6d9c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6da0:	cmp	x1, x0
    6da4:	b.eq	6dbc <mpc_asin@@Base+0x134>  // b.none
    6da8:	ldr	x0, [sp, #32]
    6dac:	ldr	x1, [x0, #48]
    6db0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6db4:	cmp	x1, x0
    6db8:	b.ne	6f04 <mpc_asin@@Base+0x27c>  // b.any
    6dbc:	ldr	x0, [sp, #32]
    6dc0:	ldr	x1, [x0, #16]
    6dc4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6dc8:	cmp	x1, x0
    6dcc:	b.ne	6e7c <mpc_asin@@Base+0x1f4>  // b.any
    6dd0:	ldr	x0, [sp, #32]
    6dd4:	ldr	x1, [x0, #48]
    6dd8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    6ddc:	cmp	x1, x0
    6de0:	cset	w0, eq  // eq = none
    6de4:	and	w0, w0, #0xff
    6de8:	str	w0, [sp, #148]
    6dec:	ldr	x3, [sp, #40]
    6df0:	ldr	x0, [sp, #32]
    6df4:	ldr	w0, [x0, #8]
    6df8:	cmp	w0, #0x0
    6dfc:	b.ge	6e08 <mpc_asin@@Base+0x180>  // b.tcont
    6e00:	mov	w0, #0xffffffff            	// #-1
    6e04:	b	6e0c <mpc_asin@@Base+0x184>
    6e08:	mov	w0, #0x1                   	// #1
    6e0c:	ldr	w1, [sp, #28]
    6e10:	and	w1, w1, #0xf
    6e14:	mov	w2, w1
    6e18:	mov	w1, w0
    6e1c:	mov	x0, x3
    6e20:	bl	54f0 <set_pi_over_2@plt>
    6e24:	str	w0, [sp, #240]
    6e28:	ldr	x0, [sp, #40]
    6e2c:	add	x2, x0, #0x20
    6e30:	ldr	x0, [sp, #32]
    6e34:	ldr	w0, [x0, #40]
    6e38:	cmp	w0, #0x0
    6e3c:	b.ge	6e48 <mpc_asin@@Base+0x1c0>  // b.tcont
    6e40:	mov	w0, #0xffffffff            	// #-1
    6e44:	b	6e4c <mpc_asin@@Base+0x1c4>
    6e48:	mov	w0, #0x1                   	// #1
    6e4c:	mov	w1, w0
    6e50:	mov	x0, x2
    6e54:	bl	5220 <mpfr_set_inf@plt>
    6e58:	ldr	w0, [sp, #148]
    6e5c:	cmp	w0, #0x0
    6e60:	b.eq	6edc <mpc_asin@@Base+0x254>  // b.none
    6e64:	ldr	x0, [sp, #40]
    6e68:	ldr	x1, [sp, #40]
    6e6c:	mov	w3, #0x0                   	// #0
    6e70:	mov	x2, #0x1                   	// #1
    6e74:	bl	5420 <mpfr_div_2ui@plt>
    6e78:	b	6edc <mpc_asin@@Base+0x254>
    6e7c:	ldr	x2, [sp, #40]
    6e80:	ldr	x0, [sp, #32]
    6e84:	ldr	w0, [x0, #8]
    6e88:	cmp	w0, #0x0
    6e8c:	b.ge	6e98 <mpc_asin@@Base+0x210>  // b.tcont
    6e90:	mov	w0, #0xffffffff            	// #-1
    6e94:	b	6e9c <mpc_asin@@Base+0x214>
    6e98:	mov	w0, #0x1                   	// #1
    6e9c:	mov	w1, w0
    6ea0:	mov	x0, x2
    6ea4:	bl	4dd0 <mpfr_set_zero@plt>
    6ea8:	str	wzr, [sp, #240]
    6eac:	ldr	x0, [sp, #40]
    6eb0:	add	x2, x0, #0x20
    6eb4:	ldr	x0, [sp, #32]
    6eb8:	ldr	w0, [x0, #40]
    6ebc:	cmp	w0, #0x0
    6ec0:	b.ge	6ecc <mpc_asin@@Base+0x244>  // b.tcont
    6ec4:	mov	w0, #0xffffffff            	// #-1
    6ec8:	b	6ed0 <mpc_asin@@Base+0x248>
    6ecc:	mov	w0, #0x1                   	// #1
    6ed0:	mov	w1, w0
    6ed4:	mov	x0, x2
    6ed8:	bl	5220 <mpfr_set_inf@plt>
    6edc:	ldr	w0, [sp, #240]
    6ee0:	cmp	w0, #0x0
    6ee4:	b.lt	6efc <mpc_asin@@Base+0x274>  // b.tstop
    6ee8:	ldr	w0, [sp, #240]
    6eec:	cmp	w0, #0x0
    6ef0:	cset	w0, ne  // ne = any
    6ef4:	and	w0, w0, #0xff
    6ef8:	b	7788 <mpc_asin@@Base+0xb00>
    6efc:	mov	w0, #0x2                   	// #2
    6f00:	b	7788 <mpc_asin@@Base+0xb00>
    6f04:	ldr	x0, [sp, #32]
    6f08:	ldr	x1, [x0, #48]
    6f0c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    6f10:	cmp	x1, x0
    6f14:	b.ne	7230 <mpc_asin@@Base+0x5a8>  // b.any
    6f18:	ldr	x0, [sp, #32]
    6f1c:	ldr	w0, [x0, #40]
    6f20:	lsr	w0, w0, #31
    6f24:	and	w0, w0, #0xff
    6f28:	str	w0, [sp, #160]
    6f2c:	ldr	x0, [sp, #32]
    6f30:	mov	x2, #0x0                   	// #0
    6f34:	mov	x1, #0x1                   	// #1
    6f38:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
    6f3c:	cmp	w0, #0x0
    6f40:	b.le	702c <mpc_asin@@Base+0x3a4>
    6f44:	ldr	w0, [sp, #160]
    6f48:	cmp	w0, #0x0
    6f4c:	b.eq	6fac <mpc_asin@@Base+0x324>  // b.none
    6f50:	ldr	x0, [sp, #40]
    6f54:	add	x3, x0, #0x20
    6f58:	ldr	x1, [sp, #32]
    6f5c:	ldr	w0, [sp, #28]
    6f60:	asr	w0, w0, #4
    6f64:	cmp	w0, #0x2
    6f68:	b.eq	6f90 <mpc_asin@@Base+0x308>  // b.none
    6f6c:	ldr	w0, [sp, #28]
    6f70:	asr	w0, w0, #4
    6f74:	cmp	w0, #0x3
    6f78:	b.eq	6f88 <mpc_asin@@Base+0x300>  // b.none
    6f7c:	ldr	w0, [sp, #28]
    6f80:	asr	w0, w0, #4
    6f84:	b	6f94 <mpc_asin@@Base+0x30c>
    6f88:	mov	w0, #0x2                   	// #2
    6f8c:	b	6f94 <mpc_asin@@Base+0x30c>
    6f90:	mov	w0, #0x3                   	// #3
    6f94:	mov	w2, w0
    6f98:	mov	x0, x3
    6f9c:	bl	51e0 <mpfr_acosh@plt>
    6fa0:	neg	w0, w0
    6fa4:	str	w0, [sp, #232]
    6fa8:	b	6fd0 <mpc_asin@@Base+0x348>
    6fac:	ldr	x0, [sp, #40]
    6fb0:	add	x3, x0, #0x20
    6fb4:	ldr	x1, [sp, #32]
    6fb8:	ldr	w0, [sp, #28]
    6fbc:	asr	w0, w0, #4
    6fc0:	mov	w2, w0
    6fc4:	mov	x0, x3
    6fc8:	bl	51e0 <mpfr_acosh@plt>
    6fcc:	str	w0, [sp, #232]
    6fd0:	ldr	x3, [sp, #40]
    6fd4:	ldr	x0, [sp, #32]
    6fd8:	ldr	w0, [x0, #8]
    6fdc:	cmp	w0, #0x0
    6fe0:	b.ge	6fec <mpc_asin@@Base+0x364>  // b.tcont
    6fe4:	mov	w0, #0xffffffff            	// #-1
    6fe8:	b	6ff0 <mpc_asin@@Base+0x368>
    6fec:	mov	w0, #0x1                   	// #1
    6ff0:	ldr	w1, [sp, #28]
    6ff4:	and	w1, w1, #0xf
    6ff8:	mov	w2, w1
    6ffc:	mov	w1, w0
    7000:	mov	x0, x3
    7004:	bl	54f0 <set_pi_over_2@plt>
    7008:	str	w0, [sp, #236]
    700c:	ldr	w0, [sp, #160]
    7010:	cmp	w0, #0x0
    7014:	b.eq	71d4 <mpc_asin@@Base+0x54c>  // b.none
    7018:	mov	w2, #0x0                   	// #0
    701c:	ldr	x1, [sp, #40]
    7020:	ldr	x0, [sp, #40]
    7024:	bl	5060 <mpc_conj@plt>
    7028:	b	71d4 <mpc_asin@@Base+0x54c>
    702c:	ldr	x0, [sp, #32]
    7030:	mov	x2, #0x0                   	// #0
    7034:	mov	x1, #0xffffffffffffffff    	// #-1
    7038:	bl	50e0 <mpfr_cmp_si_2exp@plt>
    703c:	cmp	w0, #0x0
    7040:	b.ge	715c <mpc_asin@@Base+0x4d4>  // b.tcont
    7044:	ldr	x0, [sp, #32]
    7048:	add	x2, sp, #0x30
    704c:	mov	x3, x0
    7050:	ldp	x0, x1, [x3]
    7054:	stp	x0, x1, [x2]
    7058:	ldp	x0, x1, [x3, #16]
    705c:	stp	x0, x1, [x2, #16]
    7060:	add	x1, sp, #0x30
    7064:	add	x0, sp, #0x30
    7068:	mov	w2, #0x0                   	// #0
    706c:	bl	4c50 <mpfr_neg@plt>
    7070:	ldr	w0, [sp, #160]
    7074:	cmp	w0, #0x0
    7078:	b.eq	70d8 <mpc_asin@@Base+0x450>  // b.none
    707c:	ldr	x0, [sp, #40]
    7080:	add	x3, x0, #0x20
    7084:	ldr	w0, [sp, #28]
    7088:	asr	w0, w0, #4
    708c:	cmp	w0, #0x2
    7090:	b.eq	70b8 <mpc_asin@@Base+0x430>  // b.none
    7094:	ldr	w0, [sp, #28]
    7098:	asr	w0, w0, #4
    709c:	cmp	w0, #0x3
    70a0:	b.eq	70b0 <mpc_asin@@Base+0x428>  // b.none
    70a4:	ldr	w0, [sp, #28]
    70a8:	asr	w0, w0, #4
    70ac:	b	70bc <mpc_asin@@Base+0x434>
    70b0:	mov	w0, #0x2                   	// #2
    70b4:	b	70bc <mpc_asin@@Base+0x434>
    70b8:	mov	w0, #0x3                   	// #3
    70bc:	add	x1, sp, #0x30
    70c0:	mov	w2, w0
    70c4:	mov	x0, x3
    70c8:	bl	51e0 <mpfr_acosh@plt>
    70cc:	neg	w0, w0
    70d0:	str	w0, [sp, #232]
    70d4:	b	7100 <mpc_asin@@Base+0x478>
    70d8:	ldr	x0, [sp, #40]
    70dc:	add	x3, x0, #0x20
    70e0:	ldr	w0, [sp, #28]
    70e4:	asr	w1, w0, #4
    70e8:	add	x0, sp, #0x30
    70ec:	mov	w2, w1
    70f0:	mov	x1, x0
    70f4:	mov	x0, x3
    70f8:	bl	51e0 <mpfr_acosh@plt>
    70fc:	str	w0, [sp, #232]
    7100:	ldr	x3, [sp, #40]
    7104:	ldr	x0, [sp, #32]
    7108:	ldr	w0, [x0, #8]
    710c:	cmp	w0, #0x0
    7110:	b.ge	711c <mpc_asin@@Base+0x494>  // b.tcont
    7114:	mov	w0, #0xffffffff            	// #-1
    7118:	b	7120 <mpc_asin@@Base+0x498>
    711c:	mov	w0, #0x1                   	// #1
    7120:	ldr	w1, [sp, #28]
    7124:	and	w1, w1, #0xf
    7128:	mov	w2, w1
    712c:	mov	w1, w0
    7130:	mov	x0, x3
    7134:	bl	54f0 <set_pi_over_2@plt>
    7138:	str	w0, [sp, #236]
    713c:	ldr	w0, [sp, #160]
    7140:	cmp	w0, #0x0
    7144:	b.eq	71d4 <mpc_asin@@Base+0x54c>  // b.none
    7148:	mov	w2, #0x0                   	// #0
    714c:	ldr	x1, [sp, #40]
    7150:	ldr	x0, [sp, #40]
    7154:	bl	5060 <mpc_conj@plt>
    7158:	b	71d4 <mpc_asin@@Base+0x54c>
    715c:	ldr	x0, [sp, #40]
    7160:	add	x0, x0, #0x20
    7164:	str	x0, [sp, #152]
    7168:	ldr	x0, [sp, #152]
    716c:	mov	w1, #0x1                   	// #1
    7170:	str	w1, [x0, #8]
    7174:	ldr	x0, [sp, #152]
    7178:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    717c:	str	x1, [x0, #16]
    7180:	mov	w0, #0x0                   	// #0
    7184:	str	w0, [sp, #232]
    7188:	ldr	w0, [sp, #160]
    718c:	cmp	w0, #0x0
    7190:	b.eq	71b4 <mpc_asin@@Base+0x52c>  // b.none
    7194:	ldr	x0, [sp, #40]
    7198:	add	x3, x0, #0x20
    719c:	ldr	x0, [sp, #40]
    71a0:	add	x0, x0, #0x20
    71a4:	mov	w2, #0x0                   	// #0
    71a8:	mov	x1, x0
    71ac:	mov	x0, x3
    71b0:	bl	4c50 <mpfr_neg@plt>
    71b4:	ldr	x3, [sp, #40]
    71b8:	ldr	x1, [sp, #32]
    71bc:	ldr	w0, [sp, #28]
    71c0:	and	w0, w0, #0xf
    71c4:	mov	w2, w0
    71c8:	mov	x0, x3
    71cc:	bl	4f30 <mpfr_asin@plt>
    71d0:	str	w0, [sp, #236]
    71d4:	ldr	w0, [sp, #236]
    71d8:	cmp	w0, #0x0
    71dc:	b.lt	71f8 <mpc_asin@@Base+0x570>  // b.tstop
    71e0:	ldr	w0, [sp, #236]
    71e4:	cmp	w0, #0x0
    71e8:	cset	w0, ne  // ne = any
    71ec:	and	w0, w0, #0xff
    71f0:	mov	w1, w0
    71f4:	b	71fc <mpc_asin@@Base+0x574>
    71f8:	mov	w1, #0x2                   	// #2
    71fc:	ldr	w0, [sp, #232]
    7200:	cmp	w0, #0x0
    7204:	b.lt	7224 <mpc_asin@@Base+0x59c>  // b.tstop
    7208:	ldr	w0, [sp, #232]
    720c:	cmp	w0, #0x0
    7210:	b.eq	721c <mpc_asin@@Base+0x594>  // b.none
    7214:	mov	w0, #0x4                   	// #4
    7218:	b	7228 <mpc_asin@@Base+0x5a0>
    721c:	mov	w0, #0x0                   	// #0
    7220:	b	7228 <mpc_asin@@Base+0x5a0>
    7224:	mov	w0, #0x8                   	// #8
    7228:	orr	w0, w1, w0
    722c:	b	7788 <mpc_asin@@Base+0xb00>
    7230:	ldr	x0, [sp, #32]
    7234:	ldr	x1, [x0, #16]
    7238:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    723c:	cmp	x1, x0
    7240:	b.ne	72ec <mpc_asin@@Base+0x664>  // b.any
    7244:	ldr	x0, [sp, #32]
    7248:	ldr	w0, [x0, #8]
    724c:	lsr	w0, w0, #31
    7250:	and	w0, w0, #0xff
    7254:	str	w0, [sp, #176]
    7258:	ldr	x0, [sp, #40]
    725c:	str	x0, [sp, #168]
    7260:	ldr	x0, [sp, #168]
    7264:	mov	w1, #0x1                   	// #1
    7268:	str	w1, [x0, #8]
    726c:	ldr	x0, [sp, #168]
    7270:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7274:	str	x1, [x0, #16]
    7278:	ldr	w0, [sp, #176]
    727c:	cmp	w0, #0x0
    7280:	b.eq	7294 <mpc_asin@@Base+0x60c>  // b.none
    7284:	ldr	x0, [sp, #40]
    7288:	ldr	x1, [sp, #40]
    728c:	mov	w2, #0x0                   	// #0
    7290:	bl	4c50 <mpfr_neg@plt>
    7294:	ldr	x0, [sp, #40]
    7298:	add	x3, x0, #0x20
    729c:	ldr	x0, [sp, #32]
    72a0:	add	x1, x0, #0x20
    72a4:	ldr	w0, [sp, #28]
    72a8:	asr	w0, w0, #4
    72ac:	mov	w2, w0
    72b0:	mov	x0, x3
    72b4:	bl	4ea0 <mpfr_asinh@plt>
    72b8:	str	w0, [sp, #164]
    72bc:	ldr	w0, [sp, #164]
    72c0:	cmp	w0, #0x0
    72c4:	b.lt	72e4 <mpc_asin@@Base+0x65c>  // b.tstop
    72c8:	ldr	w0, [sp, #164]
    72cc:	cmp	w0, #0x0
    72d0:	b.eq	72dc <mpc_asin@@Base+0x654>  // b.none
    72d4:	mov	w0, #0x4                   	// #4
    72d8:	b	7788 <mpc_asin@@Base+0xb00>
    72dc:	mov	w0, #0x0                   	// #0
    72e0:	b	7788 <mpc_asin@@Base+0xb00>
    72e4:	mov	w0, #0x8                   	// #8
    72e8:	b	7788 <mpc_asin@@Base+0xb00>
    72ec:	ldr	x0, [sp, #40]
    72f0:	ldr	x0, [x0]
    72f4:	str	x0, [sp, #224]
    72f8:	ldr	x0, [sp, #40]
    72fc:	ldr	x0, [x0, #32]
    7300:	str	x0, [sp, #216]
    7304:	ldr	w0, [sp, #28]
    7308:	and	w0, w0, #0xf
    730c:	str	w0, [sp, #212]
    7310:	ldr	w0, [sp, #28]
    7314:	asr	w0, w0, #4
    7318:	str	w0, [sp, #208]
    731c:	ldr	x0, [sp, #216]
    7320:	ldr	x2, [sp, #224]
    7324:	ldr	x1, [sp, #224]
    7328:	cmp	x2, x0
    732c:	csel	x0, x1, x0, ge  // ge = tcont
    7330:	str	x0, [sp, #248]
    7334:	add	x0, sp, #0x50
    7338:	ldr	x1, [sp, #248]
    733c:	bl	4db0 <mpc_init2@plt>
    7340:	ldr	w0, [sp, #244]
    7344:	add	w0, w0, #0x1
    7348:	str	w0, [sp, #244]
    734c:	ldr	w0, [sp, #244]
    7350:	cmp	w0, #0x2
    7354:	b.gt	7368 <mpc_asin@@Base+0x6e0>
    7358:	ldr	x0, [sp, #248]
    735c:	bl	4de0 <mpc_ceil_log2@plt>
    7360:	add	x0, x0, #0x3
    7364:	b	7378 <mpc_asin@@Base+0x6f0>
    7368:	ldr	x0, [sp, #248]
    736c:	lsr	x1, x0, #63
    7370:	add	x0, x1, x0
    7374:	asr	x0, x0, #1
    7378:	ldr	x1, [sp, #248]
    737c:	add	x0, x1, x0
    7380:	str	x0, [sp, #248]
    7384:	add	x0, sp, #0x50
    7388:	ldr	x1, [sp, #248]
    738c:	bl	4d40 <mpfr_set_prec@plt>
    7390:	add	x0, sp, #0x50
    7394:	add	x0, x0, #0x20
    7398:	ldr	x1, [sp, #248]
    739c:	bl	4d40 <mpfr_set_prec@plt>
    73a0:	ldr	w0, [sp, #244]
    73a4:	cmp	w0, #0x1
    73a8:	b.ne	73cc <mpc_asin@@Base+0x744>  // b.any
    73ac:	add	x0, sp, #0x50
    73b0:	mov	x3, x0
    73b4:	ldr	w2, [sp, #28]
    73b8:	ldr	x1, [sp, #32]
    73bc:	ldr	x0, [sp, #40]
    73c0:	bl	6a70 <mpc_arg@@Base+0x3c>
    73c4:	cmp	w0, #0x0
    73c8:	b.ne	7758 <mpc_asin@@Base+0xad0>  // b.any
    73cc:	add	x0, sp, #0x50
    73d0:	mov	w2, #0x0                   	// #0
    73d4:	ldr	x1, [sp, #32]
    73d8:	bl	5030 <mpc_sqr@plt>
    73dc:	ldr	x0, [sp, #96]
    73e0:	str	x0, [sp, #200]
    73e4:	add	x1, sp, #0x50
    73e8:	add	x0, sp, #0x50
    73ec:	mov	w3, #0x0                   	// #0
    73f0:	mov	x2, x1
    73f4:	mov	x1, #0x1                   	// #1
    73f8:	bl	5520 <mpfr_ui_sub@plt>
    73fc:	add	x0, sp, #0x50
    7400:	add	x1, x0, #0x20
    7404:	add	x0, sp, #0x50
    7408:	add	x0, x0, #0x20
    740c:	mov	w2, #0x0                   	// #0
    7410:	bl	4c50 <mpfr_neg@plt>
    7414:	ldr	x0, [sp, #96]
    7418:	ldr	x1, [sp, #200]
    741c:	sub	x0, x1, x0
    7420:	str	x0, [sp, #200]
    7424:	ldr	x1, [sp, #200]
    7428:	ldr	x0, [sp, #200]
    742c:	mov	x2, #0x0                   	// #0
    7430:	cmp	x1, #0x0
    7434:	csel	x0, x0, x2, ge  // ge = tcont
    7438:	str	x0, [sp, #200]
    743c:	ldr	x1, [sp, #96]
    7440:	ldr	x0, [sp, #200]
    7444:	add	x1, x1, x0
    7448:	ldr	x0, [sp, #248]
    744c:	sub	x0, x1, x0
    7450:	str	x0, [sp, #200]
    7454:	ldr	x1, [sp, #128]
    7458:	ldr	x0, [sp, #248]
    745c:	sub	x0, x1, x0
    7460:	sub	x0, x0, #0x1
    7464:	str	x0, [sp, #192]
    7468:	ldr	x0, [sp, #192]
    746c:	ldr	x2, [sp, #200]
    7470:	ldr	x1, [sp, #200]
    7474:	cmp	x2, x0
    7478:	csel	x0, x1, x0, ge  // ge = tcont
    747c:	str	x0, [sp, #200]
    7480:	ldr	x1, [sp, #96]
    7484:	ldr	x0, [sp, #128]
    7488:	cmp	x1, x0
    748c:	csel	x0, x1, x0, ge  // ge = tcont
    7490:	str	x0, [sp, #192]
    7494:	add	x1, sp, #0x50
    7498:	add	x0, sp, #0x50
    749c:	mov	w2, #0x0                   	// #0
    74a0:	bl	4c10 <mpc_sqrt@plt>
    74a4:	ldr	x0, [sp, #200]
    74a8:	lsl	x1, x0, #1
    74ac:	ldr	x0, [sp, #192]
    74b0:	sub	x0, x1, x0
    74b4:	str	x0, [sp, #200]
    74b8:	ldr	x0, [sp, #200]
    74bc:	add	x0, x0, #0x1
    74c0:	lsr	x1, x0, #63
    74c4:	add	x0, x1, x0
    74c8:	asr	x0, x0, #1
    74cc:	str	x0, [sp, #200]
    74d0:	ldr	x1, [sp, #96]
    74d4:	ldr	x0, [sp, #128]
    74d8:	cmp	x1, x0
    74dc:	csel	x0, x1, x0, le
    74e0:	str	x0, [sp, #192]
    74e4:	ldr	x1, [sp, #200]
    74e8:	ldr	x0, [sp, #192]
    74ec:	sub	x0, x1, x0
    74f0:	ldr	x1, [sp, #248]
    74f4:	add	x0, x1, x0
    74f8:	str	x0, [sp, #200]
    74fc:	ldr	x1, [sp, #200]
    7500:	ldr	x0, [sp, #200]
    7504:	mov	x2, #0x0                   	// #0
    7508:	cmp	x1, #0x0
    750c:	csel	x0, x0, x2, ge  // ge = tcont
    7510:	add	x0, x0, #0x1
    7514:	str	x0, [sp, #184]
    7518:	ldr	x0, [sp, #96]
    751c:	str	x0, [sp, #200]
    7520:	ldr	x0, [sp, #128]
    7524:	str	x0, [sp, #192]
    7528:	ldr	x0, [sp, #32]
    752c:	add	x2, x0, #0x20
    7530:	add	x1, sp, #0x50
    7534:	add	x0, sp, #0x50
    7538:	mov	w3, #0x0                   	// #0
    753c:	bl	4b30 <mpfr_sub@plt>
    7540:	ldr	x2, [sp, #32]
    7544:	add	x0, sp, #0x50
    7548:	add	x1, x0, #0x20
    754c:	add	x0, sp, #0x50
    7550:	add	x0, x0, #0x20
    7554:	mov	w3, #0x0                   	// #0
    7558:	bl	4f50 <mpfr_add@plt>
    755c:	add	x0, sp, #0x50
    7560:	bl	52f0 <mpfr_sgn@plt>
    7564:	cmp	w0, #0x0
    7568:	b.eq	7750 <mpc_asin@@Base+0xac8>  // b.none
    756c:	add	x0, sp, #0x50
    7570:	add	x0, x0, #0x20
    7574:	bl	52f0 <mpfr_sgn@plt>
    7578:	cmp	w0, #0x0
    757c:	b.eq	7750 <mpc_asin@@Base+0xac8>  // b.none
    7580:	ldr	x0, [sp, #96]
    7584:	ldr	x1, [sp, #200]
    7588:	sub	x0, x1, x0
    758c:	str	x0, [sp, #200]
    7590:	ldr	x0, [sp, #128]
    7594:	ldr	x1, [sp, #192]
    7598:	sub	x0, x1, x0
    759c:	str	x0, [sp, #192]
    75a0:	ldr	x0, [sp, #192]
    75a4:	ldr	x2, [sp, #200]
    75a8:	ldr	x1, [sp, #200]
    75ac:	cmp	x2, x0
    75b0:	csel	x0, x1, x0, ge  // ge = tcont
    75b4:	str	x0, [sp, #200]
    75b8:	ldr	x1, [sp, #184]
    75bc:	ldr	x0, [sp, #200]
    75c0:	add	x0, x1, x0
    75c4:	str	x0, [sp, #184]
    75c8:	ldr	x1, [sp, #184]
    75cc:	ldr	x0, [sp, #184]
    75d0:	mov	x2, #0x0                   	// #0
    75d4:	cmp	x1, #0x0
    75d8:	csel	x0, x0, x2, ge  // ge = tcont
    75dc:	add	x0, x0, #0x1
    75e0:	str	x0, [sp, #184]
    75e4:	ldr	x0, [sp, #96]
    75e8:	str	x0, [sp, #200]
    75ec:	ldr	x0, [sp, #128]
    75f0:	str	x0, [sp, #192]
    75f4:	ldr	x0, [sp, #192]
    75f8:	ldr	x2, [sp, #200]
    75fc:	ldr	x1, [sp, #200]
    7600:	cmp	x2, x0
    7604:	csel	x0, x1, x0, ge  // ge = tcont
    7608:	str	x0, [sp, #200]
    760c:	ldr	x1, [sp, #200]
    7610:	ldr	x0, [sp, #248]
    7614:	sub	x0, x1, x0
    7618:	ldr	x1, [sp, #184]
    761c:	add	x0, x1, x0
    7620:	str	x0, [sp, #184]
    7624:	add	x1, sp, #0x50
    7628:	add	x0, sp, #0x50
    762c:	mov	w2, #0x0                   	// #0
    7630:	bl	4e90 <mpc_log@plt>
    7634:	ldr	x0, [sp, #200]
    7638:	sub	x0, x0, #0x1
    763c:	ldr	x1, [sp, #184]
    7640:	sub	x0, x1, x0
    7644:	str	x0, [sp, #184]
    7648:	ldr	x1, [sp, #96]
    764c:	ldr	x0, [sp, #128]
    7650:	cmp	x1, x0
    7654:	csel	x0, x1, x0, le
    7658:	str	x0, [sp, #192]
    765c:	ldr	x1, [sp, #184]
    7660:	ldr	x0, [sp, #192]
    7664:	sub	x0, x1, x0
    7668:	ldr	x1, [sp, #248]
    766c:	add	x0, x1, x0
    7670:	str	x0, [sp, #184]
    7674:	ldr	x1, [sp, #184]
    7678:	ldr	x0, [sp, #184]
    767c:	mov	x2, #0x0                   	// #0
    7680:	cmp	x1, #0x0
    7684:	csel	x0, x0, x2, ge  // ge = tcont
    7688:	add	x0, x0, #0x1
    768c:	str	x0, [sp, #184]
    7690:	add	x0, sp, #0x50
    7694:	add	x1, x0, #0x20
    7698:	add	x0, sp, #0x50
    769c:	bl	5190 <mpfr_swap@plt>
    76a0:	add	x0, sp, #0x50
    76a4:	add	x1, x0, #0x20
    76a8:	add	x0, sp, #0x50
    76ac:	add	x0, x0, #0x20
    76b0:	mov	w2, #0x0                   	// #0
    76b4:	bl	4c50 <mpfr_neg@plt>
    76b8:	ldr	x1, [sp, #248]
    76bc:	ldr	x0, [sp, #184]
    76c0:	sub	x5, x1, x0
    76c4:	ldr	w0, [sp, #212]
    76c8:	cmp	w0, #0x0
    76cc:	cset	w0, eq  // eq = none
    76d0:	and	w0, w0, #0xff
    76d4:	and	x1, x0, #0xff
    76d8:	ldr	x0, [sp, #224]
    76dc:	add	x1, x1, x0
    76e0:	add	x0, sp, #0x50
    76e4:	mov	x4, x1
    76e8:	mov	w3, #0x1                   	// #1
    76ec:	mov	w2, #0x0                   	// #0
    76f0:	mov	x1, x5
    76f4:	bl	5540 <mpfr_can_round@plt>
    76f8:	cmp	w0, #0x0
    76fc:	b.eq	7340 <mpc_asin@@Base+0x6b8>  // b.none
    7700:	ldr	x1, [sp, #248]
    7704:	ldr	x0, [sp, #184]
    7708:	sub	x5, x1, x0
    770c:	ldr	w0, [sp, #208]
    7710:	cmp	w0, #0x0
    7714:	cset	w0, eq  // eq = none
    7718:	and	w0, w0, #0xff
    771c:	and	x1, x0, #0xff
    7720:	ldr	x0, [sp, #216]
    7724:	add	x1, x1, x0
    7728:	add	x0, sp, #0x50
    772c:	add	x0, x0, #0x20
    7730:	mov	x4, x1
    7734:	mov	w3, #0x1                   	// #1
    7738:	mov	w2, #0x0                   	// #0
    773c:	mov	x1, x5
    7740:	bl	5540 <mpfr_can_round@plt>
    7744:	cmp	w0, #0x0
    7748:	b.ne	7760 <mpc_asin@@Base+0xad8>  // b.any
    774c:	b	7340 <mpc_asin@@Base+0x6b8>
    7750:	nop
    7754:	b	7340 <mpc_asin@@Base+0x6b8>
    7758:	nop
    775c:	b	7764 <mpc_asin@@Base+0xadc>
    7760:	nop
    7764:	add	x0, sp, #0x50
    7768:	ldr	w2, [sp, #28]
    776c:	mov	x1, x0
    7770:	ldr	x0, [sp, #40]
    7774:	bl	5680 <mpc_set@plt>
    7778:	str	w0, [sp, #180]
    777c:	add	x0, sp, #0x50
    7780:	bl	4ae0 <mpc_clear@plt>
    7784:	ldr	w0, [sp, #180]
    7788:	ldp	x29, x30, [sp], #256
    778c:	ret

0000000000007790 <mpc_asinh@@Base>:
    7790:	stp	x29, x30, [sp, #-224]!
    7794:	mov	x29, sp
    7798:	str	x0, [sp, #40]
    779c:	str	x1, [sp, #32]
    77a0:	str	w2, [sp, #28]
    77a4:	ldr	x0, [sp, #32]
    77a8:	add	x0, x0, #0x20
    77ac:	add	x2, sp, #0x98
    77b0:	mov	x3, x0
    77b4:	ldp	x0, x1, [x3]
    77b8:	stp	x0, x1, [x2]
    77bc:	ldp	x0, x1, [x3, #16]
    77c0:	stp	x0, x1, [x2, #16]
    77c4:	ldr	x0, [sp, #32]
    77c8:	add	x2, sp, #0xb8
    77cc:	mov	x3, x0
    77d0:	ldp	x0, x1, [x3]
    77d4:	stp	x0, x1, [x2]
    77d8:	ldp	x0, x1, [x3, #16]
    77dc:	stp	x0, x1, [x2, #16]
    77e0:	add	x1, sp, #0x98
    77e4:	add	x0, sp, #0x98
    77e8:	mov	w2, #0x0                   	// #0
    77ec:	bl	4c50 <mpfr_neg@plt>
    77f0:	ldr	x0, [sp, #40]
    77f4:	ldr	x1, [x0, #32]
    77f8:	ldr	x0, [sp, #40]
    77fc:	ldr	x2, [x0]
    7800:	add	x0, sp, #0x58
    7804:	bl	54c0 <mpc_init3@plt>
    7808:	ldr	w0, [sp, #28]
    780c:	asr	w0, w0, #4
    7810:	cmp	w0, #0x2
    7814:	b.eq	783c <mpc_asinh@@Base+0xac>  // b.none
    7818:	ldr	w0, [sp, #28]
    781c:	asr	w0, w0, #4
    7820:	cmp	w0, #0x3
    7824:	b.eq	7834 <mpc_asinh@@Base+0xa4>  // b.none
    7828:	ldr	w0, [sp, #28]
    782c:	asr	w0, w0, #4
    7830:	b	7840 <mpc_asinh@@Base+0xb0>
    7834:	mov	w0, #0x2                   	// #2
    7838:	b	7840 <mpc_asinh@@Base+0xb0>
    783c:	mov	w0, #0x3                   	// #3
    7840:	ldr	w1, [sp, #28]
    7844:	lsl	w1, w1, #4
    7848:	and	w1, w1, #0xff
    784c:	add	w2, w0, w1
    7850:	add	x1, sp, #0x98
    7854:	add	x0, sp, #0x58
    7858:	bl	5570 <mpc_asin@plt>
    785c:	str	w0, [sp, #220]
    7860:	add	x2, sp, #0x38
    7864:	add	x3, sp, #0x58
    7868:	ldp	x0, x1, [x3]
    786c:	stp	x0, x1, [x2]
    7870:	ldp	x0, x1, [x3, #16]
    7874:	stp	x0, x1, [x2, #16]
    7878:	add	x2, sp, #0x58
    787c:	add	x3, sp, #0x78
    7880:	ldp	x0, x1, [x3]
    7884:	stp	x0, x1, [x2]
    7888:	ldp	x0, x1, [x3, #16]
    788c:	stp	x0, x1, [x2, #16]
    7890:	add	x2, sp, #0x78
    7894:	add	x3, sp, #0x38
    7898:	ldp	x0, x1, [x3]
    789c:	stp	x0, x1, [x2]
    78a0:	ldp	x0, x1, [x3, #16]
    78a4:	stp	x0, x1, [x2, #16]
    78a8:	add	x0, sp, #0x58
    78ac:	add	x1, x0, #0x20
    78b0:	add	x0, sp, #0x58
    78b4:	add	x0, x0, #0x20
    78b8:	mov	w2, #0x0                   	// #0
    78bc:	bl	4c50 <mpfr_neg@plt>
    78c0:	add	x0, sp, #0x58
    78c4:	mov	w2, #0x0                   	// #0
    78c8:	mov	x1, x0
    78cc:	ldr	x0, [sp, #40]
    78d0:	bl	5680 <mpc_set@plt>
    78d4:	add	x0, sp, #0x58
    78d8:	bl	4ae0 <mpc_clear@plt>
    78dc:	ldr	w0, [sp, #220]
    78e0:	asr	w0, w0, #2
    78e4:	cmp	w0, #0x2
    78e8:	b.eq	791c <mpc_asinh@@Base+0x18c>  // b.none
    78ec:	ldr	w0, [sp, #220]
    78f0:	asr	w0, w0, #2
    78f4:	cmp	w0, #0x2
    78f8:	b.eq	790c <mpc_asinh@@Base+0x17c>  // b.none
    78fc:	ldr	w0, [sp, #220]
    7900:	asr	w0, w0, #2
    7904:	cmp	w0, #0x0
    7908:	b.eq	7914 <mpc_asinh@@Base+0x184>  // b.none
    790c:	mov	w0, #0x1                   	// #1
    7910:	b	7920 <mpc_asinh@@Base+0x190>
    7914:	mov	w0, #0x0                   	// #0
    7918:	b	7920 <mpc_asinh@@Base+0x190>
    791c:	mov	w0, #0x2                   	// #2
    7920:	ldr	w1, [sp, #220]
    7924:	and	w1, w1, #0x3
    7928:	cmp	w1, #0x2
    792c:	b.eq	7940 <mpc_asinh@@Base+0x1b0>  // b.none
    7930:	ldr	w1, [sp, #220]
    7934:	and	w1, w1, #0x3
    7938:	cmp	w1, #0x0
    793c:	b.ne	7974 <mpc_asinh@@Base+0x1e4>  // b.any
    7940:	ldr	w1, [sp, #220]
    7944:	and	w1, w1, #0x3
    7948:	cmp	w1, #0x2
    794c:	b.eq	7960 <mpc_asinh@@Base+0x1d0>  // b.none
    7950:	ldr	w1, [sp, #220]
    7954:	and	w1, w1, #0x3
    7958:	cmp	w1, #0x0
    795c:	b.eq	7968 <mpc_asinh@@Base+0x1d8>  // b.none
    7960:	mov	w1, #0x1                   	// #1
    7964:	b	796c <mpc_asinh@@Base+0x1dc>
    7968:	mov	w1, #0x0                   	// #0
    796c:	lsl	w1, w1, #2
    7970:	b	7978 <mpc_asinh@@Base+0x1e8>
    7974:	mov	w1, #0x8                   	// #8
    7978:	orr	w0, w0, w1
    797c:	ldp	x29, x30, [sp], #224
    7980:	ret

0000000000007984 <set_pi_over_2@@Base>:
    7984:	stp	x29, x30, [sp, #-48]!
    7988:	mov	x29, sp
    798c:	str	x0, [sp, #24]
    7990:	str	w1, [sp, #20]
    7994:	str	w2, [sp, #16]
    7998:	ldr	w0, [sp, #20]
    799c:	cmp	w0, #0x0
    79a0:	b.ge	79d4 <set_pi_over_2@@Base+0x50>  // b.tcont
    79a4:	ldr	w0, [sp, #16]
    79a8:	cmp	w0, #0x2
    79ac:	b.eq	79cc <set_pi_over_2@@Base+0x48>  // b.none
    79b0:	ldr	w0, [sp, #16]
    79b4:	cmp	w0, #0x3
    79b8:	b.eq	79c4 <set_pi_over_2@@Base+0x40>  // b.none
    79bc:	ldr	w0, [sp, #16]
    79c0:	b	79d8 <set_pi_over_2@@Base+0x54>
    79c4:	mov	w0, #0x2                   	// #2
    79c8:	b	79d8 <set_pi_over_2@@Base+0x54>
    79cc:	mov	w0, #0x3                   	// #3
    79d0:	b	79d8 <set_pi_over_2@@Base+0x54>
    79d4:	ldr	w0, [sp, #16]
    79d8:	mov	w1, w0
    79dc:	ldr	x0, [sp, #24]
    79e0:	bl	4b50 <mpfr_const_pi@plt>
    79e4:	str	w0, [sp, #44]
    79e8:	mov	w3, #0x0                   	// #0
    79ec:	mov	x2, #0x1                   	// #1
    79f0:	ldr	x1, [sp, #24]
    79f4:	ldr	x0, [sp, #24]
    79f8:	bl	5420 <mpfr_div_2ui@plt>
    79fc:	ldr	w0, [sp, #20]
    7a00:	cmp	w0, #0x0
    7a04:	b.ge	7a24 <set_pi_over_2@@Base+0xa0>  // b.tcont
    7a08:	ldr	w0, [sp, #44]
    7a0c:	neg	w0, w0
    7a10:	str	w0, [sp, #44]
    7a14:	mov	w2, #0x0                   	// #0
    7a18:	ldr	x1, [sp, #24]
    7a1c:	ldr	x0, [sp, #24]
    7a20:	bl	4c50 <mpfr_neg@plt>
    7a24:	ldr	w0, [sp, #44]
    7a28:	ldp	x29, x30, [sp], #48
    7a2c:	ret

0000000000007a30 <mpc_atan@@Base>:
    7a30:	stp	x29, x30, [sp, #-400]!
    7a34:	mov	x29, sp
    7a38:	str	x0, [sp, #40]
    7a3c:	str	x1, [sp, #32]
    7a40:	str	w2, [sp, #28]
    7a44:	str	wzr, [sp, #396]
    7a48:	str	wzr, [sp, #392]
    7a4c:	ldr	x0, [sp, #32]
    7a50:	ldr	w0, [x0, #8]
    7a54:	lsr	w0, w0, #31
    7a58:	and	w0, w0, #0xff
    7a5c:	str	w0, [sp, #328]
    7a60:	ldr	x0, [sp, #32]
    7a64:	ldr	w0, [x0, #40]
    7a68:	lsr	w0, w0, #31
    7a6c:	and	w0, w0, #0xff
    7a70:	str	w0, [sp, #324]
    7a74:	ldr	x0, [sp, #32]
    7a78:	ldr	x1, [x0, #16]
    7a7c:	mov	x0, #0x2                   	// #2
    7a80:	movk	x0, #0x8000, lsl #48
    7a84:	cmp	x1, x0
    7a88:	b.eq	7aa4 <mpc_atan@@Base+0x74>  // b.none
    7a8c:	ldr	x0, [sp, #32]
    7a90:	ldr	x1, [x0, #48]
    7a94:	mov	x0, #0x2                   	// #2
    7a98:	movk	x0, #0x8000, lsl #48
    7a9c:	cmp	x1, x0
    7aa0:	b.ne	7bdc <mpc_atan@@Base+0x1ac>  // b.any
    7aa4:	ldr	x0, [sp, #32]
    7aa8:	ldr	x1, [x0, #16]
    7aac:	mov	x0, #0x2                   	// #2
    7ab0:	movk	x0, #0x8000, lsl #48
    7ab4:	cmp	x1, x0
    7ab8:	b.ne	7b40 <mpc_atan@@Base+0x110>  // b.any
    7abc:	ldr	x0, [sp, #40]
    7ac0:	bl	4b10 <mpfr_set_nan@plt>
    7ac4:	ldr	x0, [sp, #32]
    7ac8:	ldr	x1, [x0, #48]
    7acc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7ad0:	cmp	x1, x0
    7ad4:	b.eq	7aec <mpc_atan@@Base+0xbc>  // b.none
    7ad8:	ldr	x0, [sp, #32]
    7adc:	ldr	x1, [x0, #48]
    7ae0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7ae4:	cmp	x1, x0
    7ae8:	b.ne	7b30 <mpc_atan@@Base+0x100>  // b.any
    7aec:	ldr	x0, [sp, #40]
    7af0:	add	x0, x0, #0x20
    7af4:	str	x0, [sp, #216]
    7af8:	ldr	x0, [sp, #216]
    7afc:	mov	w1, #0x1                   	// #1
    7b00:	str	w1, [x0, #8]
    7b04:	ldr	x0, [sp, #216]
    7b08:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7b0c:	str	x1, [x0, #16]
    7b10:	ldr	w0, [sp, #324]
    7b14:	cmp	w0, #0x0
    7b18:	b.eq	7bb4 <mpc_atan@@Base+0x184>  // b.none
    7b1c:	mov	w2, #0x0                   	// #0
    7b20:	ldr	x1, [sp, #40]
    7b24:	ldr	x0, [sp, #40]
    7b28:	bl	5060 <mpc_conj@plt>
    7b2c:	b	7bb4 <mpc_atan@@Base+0x184>
    7b30:	ldr	x0, [sp, #40]
    7b34:	add	x0, x0, #0x20
    7b38:	bl	4b10 <mpfr_set_nan@plt>
    7b3c:	b	7bb4 <mpc_atan@@Base+0x184>
    7b40:	ldr	x0, [sp, #32]
    7b44:	ldr	x1, [x0, #16]
    7b48:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7b4c:	cmp	x1, x0
    7b50:	b.ne	7ba0 <mpc_atan@@Base+0x170>  // b.any
    7b54:	ldr	x3, [sp, #40]
    7b58:	ldr	w0, [sp, #328]
    7b5c:	neg	w1, w0
    7b60:	ldr	w0, [sp, #28]
    7b64:	and	w0, w0, #0xf
    7b68:	mov	w2, w0
    7b6c:	mov	x0, x3
    7b70:	bl	54f0 <set_pi_over_2@plt>
    7b74:	str	w0, [sp, #396]
    7b78:	ldr	x0, [sp, #40]
    7b7c:	add	x0, x0, #0x20
    7b80:	str	x0, [sp, #224]
    7b84:	ldr	x0, [sp, #224]
    7b88:	mov	w1, #0x1                   	// #1
    7b8c:	str	w1, [x0, #8]
    7b90:	ldr	x0, [sp, #224]
    7b94:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7b98:	str	x1, [x0, #16]
    7b9c:	b	7bb4 <mpc_atan@@Base+0x184>
    7ba0:	ldr	x0, [sp, #40]
    7ba4:	bl	4b10 <mpfr_set_nan@plt>
    7ba8:	ldr	x0, [sp, #40]
    7bac:	add	x0, x0, #0x20
    7bb0:	bl	4b10 <mpfr_set_nan@plt>
    7bb4:	ldr	w0, [sp, #396]
    7bb8:	cmp	w0, #0x0
    7bbc:	b.lt	7bd4 <mpc_atan@@Base+0x1a4>  // b.tstop
    7bc0:	ldr	w0, [sp, #396]
    7bc4:	cmp	w0, #0x0
    7bc8:	cset	w0, ne  // ne = any
    7bcc:	and	w0, w0, #0xff
    7bd0:	b	87fc <mpc_atan@@Base+0xdcc>
    7bd4:	mov	w0, #0x2                   	// #2
    7bd8:	b	87fc <mpc_atan@@Base+0xdcc>
    7bdc:	ldr	x0, [sp, #32]
    7be0:	ldr	x1, [x0, #16]
    7be4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7be8:	cmp	x1, x0
    7bec:	b.eq	7c04 <mpc_atan@@Base+0x1d4>  // b.none
    7bf0:	ldr	x0, [sp, #32]
    7bf4:	ldr	x1, [x0, #48]
    7bf8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    7bfc:	cmp	x1, x0
    7c00:	b.ne	7c90 <mpc_atan@@Base+0x260>  // b.any
    7c04:	ldr	x3, [sp, #40]
    7c08:	ldr	w0, [sp, #328]
    7c0c:	neg	w1, w0
    7c10:	ldr	w0, [sp, #28]
    7c14:	and	w0, w0, #0xf
    7c18:	mov	w2, w0
    7c1c:	mov	x0, x3
    7c20:	bl	54f0 <set_pi_over_2@plt>
    7c24:	str	w0, [sp, #396]
    7c28:	ldr	x0, [sp, #40]
    7c2c:	add	x0, x0, #0x20
    7c30:	str	x0, [sp, #232]
    7c34:	ldr	x0, [sp, #232]
    7c38:	mov	w1, #0x1                   	// #1
    7c3c:	str	w1, [x0, #8]
    7c40:	ldr	x0, [sp, #232]
    7c44:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7c48:	str	x1, [x0, #16]
    7c4c:	ldr	w0, [sp, #324]
    7c50:	cmp	w0, #0x0
    7c54:	b.eq	7c68 <mpc_atan@@Base+0x238>  // b.none
    7c58:	mov	w2, #0x0                   	// #0
    7c5c:	ldr	x1, [sp, #40]
    7c60:	ldr	x0, [sp, #40]
    7c64:	bl	5060 <mpc_conj@plt>
    7c68:	ldr	w0, [sp, #396]
    7c6c:	cmp	w0, #0x0
    7c70:	b.lt	7c88 <mpc_atan@@Base+0x258>  // b.tstop
    7c74:	ldr	w0, [sp, #396]
    7c78:	cmp	w0, #0x0
    7c7c:	cset	w0, ne  // ne = any
    7c80:	and	w0, w0, #0xff
    7c84:	b	87fc <mpc_atan@@Base+0xdcc>
    7c88:	mov	w0, #0x2                   	// #2
    7c8c:	b	87fc <mpc_atan@@Base+0xdcc>
    7c90:	ldr	x0, [sp, #32]
    7c94:	ldr	x1, [x0, #48]
    7c98:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7c9c:	cmp	x1, x0
    7ca0:	b.ne	7d2c <mpc_atan@@Base+0x2fc>  // b.any
    7ca4:	ldr	x3, [sp, #40]
    7ca8:	ldr	x1, [sp, #32]
    7cac:	ldr	w0, [sp, #28]
    7cb0:	and	w0, w0, #0xf
    7cb4:	mov	w2, w0
    7cb8:	mov	x0, x3
    7cbc:	bl	52b0 <mpfr_atan@plt>
    7cc0:	str	w0, [sp, #396]
    7cc4:	ldr	x0, [sp, #40]
    7cc8:	add	x0, x0, #0x20
    7ccc:	str	x0, [sp, #240]
    7cd0:	ldr	x0, [sp, #240]
    7cd4:	mov	w1, #0x1                   	// #1
    7cd8:	str	w1, [x0, #8]
    7cdc:	ldr	x0, [sp, #240]
    7ce0:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7ce4:	str	x1, [x0, #16]
    7ce8:	ldr	w0, [sp, #324]
    7cec:	cmp	w0, #0x0
    7cf0:	b.eq	7d04 <mpc_atan@@Base+0x2d4>  // b.none
    7cf4:	mov	w2, #0x0                   	// #0
    7cf8:	ldr	x1, [sp, #40]
    7cfc:	ldr	x0, [sp, #40]
    7d00:	bl	5060 <mpc_conj@plt>
    7d04:	ldr	w0, [sp, #396]
    7d08:	cmp	w0, #0x0
    7d0c:	b.lt	7d24 <mpc_atan@@Base+0x2f4>  // b.tstop
    7d10:	ldr	w0, [sp, #396]
    7d14:	cmp	w0, #0x0
    7d18:	cset	w0, ne  // ne = any
    7d1c:	and	w0, w0, #0xff
    7d20:	b	87fc <mpc_atan@@Base+0xdcc>
    7d24:	mov	w0, #0x2                   	// #2
    7d28:	b	87fc <mpc_atan@@Base+0xdcc>
    7d2c:	ldr	x0, [sp, #32]
    7d30:	ldr	x1, [x0, #16]
    7d34:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    7d38:	cmp	x1, x0
    7d3c:	b.ne	8114 <mpc_atan@@Base+0x6e4>  // b.any
    7d40:	ldr	w0, [sp, #324]
    7d44:	cmp	w0, #0x0
    7d48:	b.eq	7d6c <mpc_atan@@Base+0x33c>  // b.none
    7d4c:	ldr	x0, [sp, #32]
    7d50:	add	x0, x0, #0x20
    7d54:	mov	x2, #0x0                   	// #0
    7d58:	mov	x1, #0xffffffffffffffff    	// #-1
    7d5c:	bl	50e0 <mpfr_cmp_si_2exp@plt>
    7d60:	neg	w0, w0
    7d64:	str	w0, [sp, #388]
    7d68:	b	7d84 <mpc_atan@@Base+0x354>
    7d6c:	ldr	x0, [sp, #32]
    7d70:	add	x0, x0, #0x20
    7d74:	mov	x2, #0x0                   	// #0
    7d78:	mov	x1, #0x1                   	// #1
    7d7c:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
    7d80:	str	w0, [sp, #388]
    7d84:	ldr	w0, [sp, #388]
    7d88:	cmp	w0, #0x0
    7d8c:	b.ge	7df8 <mpc_atan@@Base+0x3c8>  // b.tcont
    7d90:	ldr	x0, [sp, #40]
    7d94:	str	x0, [sp, #248]
    7d98:	ldr	x0, [sp, #248]
    7d9c:	mov	w1, #0x1                   	// #1
    7da0:	str	w1, [x0, #8]
    7da4:	ldr	x0, [sp, #248]
    7da8:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    7dac:	str	x1, [x0, #16]
    7db0:	ldr	w0, [sp, #328]
    7db4:	cmp	w0, #0x0
    7db8:	b.eq	7dcc <mpc_atan@@Base+0x39c>  // b.none
    7dbc:	ldr	x0, [sp, #40]
    7dc0:	ldr	x1, [sp, #40]
    7dc4:	mov	w2, #0x0                   	// #0
    7dc8:	bl	4c50 <mpfr_neg@plt>
    7dcc:	ldr	x0, [sp, #40]
    7dd0:	add	x3, x0, #0x20
    7dd4:	ldr	x0, [sp, #32]
    7dd8:	add	x1, x0, #0x20
    7ddc:	ldr	w0, [sp, #28]
    7de0:	asr	w0, w0, #4
    7de4:	mov	w2, w0
    7de8:	mov	x0, x3
    7dec:	bl	4e70 <mpfr_atanh@plt>
    7df0:	str	w0, [sp, #392]
    7df4:	b	80b8 <mpc_atan@@Base+0x688>
    7df8:	ldr	w0, [sp, #388]
    7dfc:	cmp	w0, #0x0
    7e00:	b.ne	7e5c <mpc_atan@@Base+0x42c>  // b.any
    7e04:	ldr	x2, [sp, #40]
    7e08:	ldr	w0, [sp, #328]
    7e0c:	cmp	w0, #0x0
    7e10:	b.eq	7e1c <mpc_atan@@Base+0x3ec>  // b.none
    7e14:	mov	w0, #0xffffffff            	// #-1
    7e18:	b	7e20 <mpc_atan@@Base+0x3f0>
    7e1c:	mov	w0, #0x1                   	// #1
    7e20:	mov	w1, w0
    7e24:	mov	x0, x2
    7e28:	bl	4dd0 <mpfr_set_zero@plt>
    7e2c:	ldr	x0, [sp, #40]
    7e30:	add	x2, x0, #0x20
    7e34:	ldr	w0, [sp, #324]
    7e38:	cmp	w0, #0x0
    7e3c:	b.eq	7e48 <mpc_atan@@Base+0x418>  // b.none
    7e40:	mov	w0, #0xffffffff            	// #-1
    7e44:	b	7e4c <mpc_atan@@Base+0x41c>
    7e48:	mov	w0, #0x1                   	// #1
    7e4c:	mov	w1, w0
    7e50:	mov	x0, x2
    7e54:	bl	5220 <mpfr_set_inf@plt>
    7e58:	b	80b8 <mpc_atan@@Base+0x688>
    7e5c:	ldr	w0, [sp, #28]
    7e60:	asr	w0, w0, #4
    7e64:	str	w0, [sp, #280]
    7e68:	add	x0, sp, #0x98
    7e6c:	bl	4b70 <mpfr_init@plt>
    7e70:	add	x0, sp, #0xb8
    7e74:	bl	4b70 <mpfr_init@plt>
    7e78:	ldr	x0, [sp, #40]
    7e7c:	ldr	x0, [x0, #32]
    7e80:	str	x0, [sp, #272]
    7e84:	ldr	x0, [sp, #272]
    7e88:	str	x0, [sp, #376]
    7e8c:	ldr	x0, [sp, #376]
    7e90:	bl	4de0 <mpc_ceil_log2@plt>
    7e94:	add	x0, x0, #0x2
    7e98:	ldr	x1, [sp, #376]
    7e9c:	add	x0, x1, x0
    7ea0:	str	x0, [sp, #376]
    7ea4:	add	x0, sp, #0x98
    7ea8:	ldr	x1, [sp, #376]
    7eac:	bl	4d40 <mpfr_set_prec@plt>
    7eb0:	add	x0, sp, #0xb8
    7eb4:	ldr	x1, [sp, #376]
    7eb8:	bl	4d40 <mpfr_set_prec@plt>
    7ebc:	ldr	w0, [sp, #324]
    7ec0:	cmp	w0, #0x0
    7ec4:	b.ne	7ed0 <mpc_atan@@Base+0x4a0>  // b.any
    7ec8:	mov	w0, #0x2                   	// #2
    7ecc:	b	7ed4 <mpc_atan@@Base+0x4a4>
    7ed0:	mov	w0, #0x3                   	// #3
    7ed4:	str	w0, [sp, #268]
    7ed8:	ldr	x0, [sp, #32]
    7edc:	add	x1, x0, #0x20
    7ee0:	add	x0, sp, #0x98
    7ee4:	ldr	w3, [sp, #268]
    7ee8:	mov	x2, x1
    7eec:	mov	x1, #0x1                   	// #1
    7ef0:	bl	5070 <mpfr_ui_div@plt>
    7ef4:	str	w0, [sp, #392]
    7ef8:	ldr	x0, [sp, #168]
    7efc:	str	x0, [sp, #256]
    7f00:	add	x1, sp, #0x98
    7f04:	add	x0, sp, #0xb8
    7f08:	mov	w2, #0x2                   	// #2
    7f0c:	bl	5110 <mpfr_sqr@plt>
    7f10:	add	x0, sp, #0xb8
    7f14:	mov	x2, #0x0                   	// #0
    7f18:	mov	x1, #0x1                   	// #1
    7f1c:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
    7f20:	cmp	w0, #0x0
    7f24:	b.le	7f5c <mpc_atan@@Base+0x52c>
    7f28:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    7f2c:	ldr	x0, [x0, #4008]
    7f30:	ldr	x5, [x0]
    7f34:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    7f38:	add	x4, x0, #0xf10
    7f3c:	mov	w3, #0xba                  	// #186
    7f40:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    7f44:	add	x2, x0, #0xf28
    7f48:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    7f4c:	add	x1, x0, #0xf30
    7f50:	mov	x0, x5
    7f54:	bl	56a0 <fprintf@plt>
    7f58:	bl	5100 <abort@plt>
    7f5c:	add	x0, sp, #0xb8
    7f60:	mov	x2, #0x0                   	// #0
    7f64:	mov	x1, #0x1                   	// #1
    7f68:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
    7f6c:	cmp	w0, #0x0
    7f70:	b.eq	8054 <mpc_atan@@Base+0x624>  // b.none
    7f74:	add	x1, sp, #0xb8
    7f78:	add	x0, sp, #0xb8
    7f7c:	mov	w3, #0x1                   	// #1
    7f80:	mov	x2, x1
    7f84:	mov	x1, #0x1                   	// #1
    7f88:	bl	5520 <mpfr_ui_sub@plt>
    7f8c:	add	x1, sp, #0x98
    7f90:	add	x0, sp, #0x98
    7f94:	ldr	w2, [sp, #268]
    7f98:	bl	4e70 <mpfr_atanh@plt>
    7f9c:	mov	w1, w0
    7fa0:	ldr	w0, [sp, #392]
    7fa4:	orr	w0, w0, w1
    7fa8:	str	w0, [sp, #392]
    7fac:	ldr	x0, [sp, #168]
    7fb0:	ldr	x1, [sp, #256]
    7fb4:	sub	x0, x1, x0
    7fb8:	add	x1, x0, #0x1
    7fbc:	ldr	x0, [sp, #200]
    7fc0:	sub	x0, x1, x0
    7fc4:	str	x0, [sp, #360]
    7fc8:	ldr	x0, [sp, #360]
    7fcc:	cmp	x0, #0x0
    7fd0:	b.lt	7fe4 <mpc_atan@@Base+0x5b4>  // b.tstop
    7fd4:	ldr	x0, [sp, #360]
    7fd8:	add	x0, x0, #0x1
    7fdc:	str	x0, [sp, #360]
    7fe0:	b	7fec <mpc_atan@@Base+0x5bc>
    7fe4:	mov	x0, #0x1                   	// #1
    7fe8:	str	x0, [sp, #360]
    7fec:	ldr	w0, [sp, #392]
    7ff0:	cmp	w0, #0x0
    7ff4:	b.eq	8040 <mpc_atan@@Base+0x610>  // b.none
    7ff8:	ldr	x1, [sp, #376]
    7ffc:	ldr	x0, [sp, #360]
    8000:	sub	x5, x1, x0
    8004:	ldr	w0, [sp, #280]
    8008:	cmp	w0, #0x0
    800c:	cset	w0, eq  // eq = none
    8010:	and	w0, w0, #0xff
    8014:	and	x1, x0, #0xff
    8018:	ldr	x0, [sp, #272]
    801c:	add	x1, x1, x0
    8020:	add	x0, sp, #0x98
    8024:	mov	x4, x1
    8028:	mov	w3, #0x1                   	// #1
    802c:	ldr	w2, [sp, #268]
    8030:	mov	x1, x5
    8034:	bl	5540 <mpfr_can_round@plt>
    8038:	cmp	w0, #0x0
    803c:	b.eq	8048 <mpc_atan@@Base+0x618>  // b.none
    8040:	mov	w0, #0x1                   	// #1
    8044:	b	804c <mpc_atan@@Base+0x61c>
    8048:	mov	w0, #0x0                   	// #0
    804c:	str	w0, [sp, #372]
    8050:	b	8058 <mpc_atan@@Base+0x628>
    8054:	nop
    8058:	ldr	w0, [sp, #372]
    805c:	cmp	w0, #0x0
    8060:	b.eq	7e8c <mpc_atan@@Base+0x45c>  // b.none
    8064:	ldr	x3, [sp, #40]
    8068:	ldr	w0, [sp, #328]
    806c:	neg	w1, w0
    8070:	ldr	w0, [sp, #28]
    8074:	and	w0, w0, #0xf
    8078:	mov	w2, w0
    807c:	mov	x0, x3
    8080:	bl	54f0 <set_pi_over_2@plt>
    8084:	str	w0, [sp, #396]
    8088:	ldr	x0, [sp, #40]
    808c:	add	x0, x0, #0x20
    8090:	ldr	w2, [sp, #160]
    8094:	add	x1, sp, #0x98
    8098:	mov	w3, w2
    809c:	ldr	w2, [sp, #280]
    80a0:	bl	52d0 <mpfr_set4@plt>
    80a4:	str	w0, [sp, #392]
    80a8:	add	x0, sp, #0x98
    80ac:	bl	4e30 <mpfr_clear@plt>
    80b0:	add	x0, sp, #0xb8
    80b4:	bl	4e30 <mpfr_clear@plt>
    80b8:	ldr	w0, [sp, #396]
    80bc:	cmp	w0, #0x0
    80c0:	b.lt	80dc <mpc_atan@@Base+0x6ac>  // b.tstop
    80c4:	ldr	w0, [sp, #396]
    80c8:	cmp	w0, #0x0
    80cc:	cset	w0, ne  // ne = any
    80d0:	and	w0, w0, #0xff
    80d4:	mov	w1, w0
    80d8:	b	80e0 <mpc_atan@@Base+0x6b0>
    80dc:	mov	w1, #0x2                   	// #2
    80e0:	ldr	w0, [sp, #392]
    80e4:	cmp	w0, #0x0
    80e8:	b.lt	8108 <mpc_atan@@Base+0x6d8>  // b.tstop
    80ec:	ldr	w0, [sp, #392]
    80f0:	cmp	w0, #0x0
    80f4:	b.eq	8100 <mpc_atan@@Base+0x6d0>  // b.none
    80f8:	mov	w0, #0x4                   	// #4
    80fc:	b	810c <mpc_atan@@Base+0x6dc>
    8100:	mov	w0, #0x0                   	// #0
    8104:	b	810c <mpc_atan@@Base+0x6dc>
    8108:	mov	w0, #0x8                   	// #8
    810c:	orr	w0, w1, w0
    8110:	b	87fc <mpc_atan@@Base+0xdcc>
    8114:	str	wzr, [sp, #332]
    8118:	add	x3, sp, #0x98
    811c:	add	x2, sp, #0x78
    8120:	add	x1, sp, #0x58
    8124:	add	x0, sp, #0x38
    8128:	mov	x5, #0x0                   	// #0
    812c:	mov	x4, x3
    8130:	mov	x3, x2
    8134:	mov	x2, x1
    8138:	mov	x1, x0
    813c:	mov	x0, #0x1                   	// #1
    8140:	bl	5640 <mpfr_inits2@plt>
    8144:	ldr	x0, [sp, #32]
    8148:	add	x2, sp, #0xb8
    814c:	mov	x3, x0
    8150:	ldp	x0, x1, [x3]
    8154:	stp	x0, x1, [x2]
    8158:	ldp	x0, x1, [x3, #16]
    815c:	stp	x0, x1, [x2, #16]
    8160:	add	x1, sp, #0xb8
    8164:	add	x0, sp, #0xb8
    8168:	mov	w2, #0x0                   	// #0
    816c:	bl	4c50 <mpfr_neg@plt>
    8170:	ldr	x0, [sp, #32]
    8174:	ldr	x0, [x0, #16]
    8178:	str	x0, [sp, #312]
    817c:	ldr	x0, [sp, #32]
    8180:	ldr	x0, [x0, #48]
    8184:	str	x0, [sp, #304]
    8188:	ldr	x0, [sp, #40]
    818c:	ldr	x0, [x0]
    8190:	str	x0, [sp, #296]
    8194:	ldr	x0, [sp, #304]
    8198:	cmp	x0, #0x0
    819c:	b.gt	81c8 <mpc_atan@@Base+0x798>
    81a0:	ldr	x0, [sp, #304]
    81a4:	cmp	x0, #0x0
    81a8:	cneg	x0, x0, lt  // lt = tstop
    81ac:	ldr	x1, [sp, #296]
    81b0:	cmp	x1, x0
    81b4:	b.gt	81c8 <mpc_atan@@Base+0x798>
    81b8:	ldr	x1, [sp, #296]
    81bc:	ldr	x0, [sp, #304]
    81c0:	sub	x0, x1, x0
    81c4:	b	81cc <mpc_atan@@Base+0x79c>
    81c8:	ldr	x0, [sp, #296]
    81cc:	str	x0, [sp, #352]
    81d0:	ldr	x0, [sp, #32]
    81d4:	ldr	x1, [x0, #16]
    81d8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    81dc:	cmp	x1, x0
    81e0:	b.ge	8208 <mpc_atan@@Base+0x7d8>  // b.tcont
    81e4:	ldr	x0, [sp, #32]
    81e8:	ldr	x1, [x0, #16]
    81ec:	mov	x0, #0x2                   	// #2
    81f0:	movk	x0, #0x8000, lsl #48
    81f4:	cmp	x1, x0
    81f8:	b.ne	8200 <mpc_atan@@Base+0x7d0>  // b.any
    81fc:	bl	4bd0 <mpfr_set_erangeflag@plt>
    8200:	mov	w0, #0x0                   	// #0
    8204:	b	821c <mpc_atan@@Base+0x7ec>
    8208:	ldr	x0, [sp, #32]
    820c:	ldr	w0, [x0, #8]
    8210:	cmp	w0, #0x0
    8214:	cset	w0, gt
    8218:	and	w0, w0, #0xff
    821c:	cmp	w0, #0x0
    8220:	b.eq	822c <mpc_atan@@Base+0x7fc>  // b.none
    8224:	mov	w0, #0x3                   	// #3
    8228:	b	8230 <mpc_atan@@Base+0x800>
    822c:	mov	w0, #0x2                   	// #2
    8230:	str	w0, [sp, #292]
    8234:	ldr	x0, [sp, #32]
    8238:	ldr	x1, [x0, #16]
    823c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8240:	cmp	x1, x0
    8244:	b.ge	826c <mpc_atan@@Base+0x83c>  // b.tcont
    8248:	ldr	x0, [sp, #32]
    824c:	ldr	x1, [x0, #16]
    8250:	mov	x0, #0x2                   	// #2
    8254:	movk	x0, #0x8000, lsl #48
    8258:	cmp	x1, x0
    825c:	b.ne	8264 <mpc_atan@@Base+0x834>  // b.any
    8260:	bl	4bd0 <mpfr_set_erangeflag@plt>
    8264:	mov	w0, #0x0                   	// #0
    8268:	b	827c <mpc_atan@@Base+0x84c>
    826c:	ldr	x0, [sp, #32]
    8270:	ldr	w0, [x0, #8]
    8274:	lsr	w0, w0, #31
    8278:	and	w0, w0, #0xff
    827c:	cmp	w0, #0x0
    8280:	b.eq	828c <mpc_atan@@Base+0x85c>  // b.none
    8284:	mov	w0, #0x2                   	// #2
    8288:	b	8290 <mpc_atan@@Base+0x860>
    828c:	mov	w0, #0x3                   	// #3
    8290:	str	w0, [sp, #288]
    8294:	ldr	x0, [sp, #352]
    8298:	bl	4de0 <mpc_ceil_log2@plt>
    829c:	add	x0, x0, #0x2
    82a0:	ldr	x1, [sp, #352]
    82a4:	add	x0, x1, x0
    82a8:	str	x0, [sp, #352]
    82ac:	add	x0, sp, #0x38
    82b0:	ldr	x1, [sp, #352]
    82b4:	bl	4d40 <mpfr_set_prec@plt>
    82b8:	add	x0, sp, #0x58
    82bc:	ldr	x1, [sp, #352]
    82c0:	bl	4d40 <mpfr_set_prec@plt>
    82c4:	add	x0, sp, #0x78
    82c8:	ldr	x1, [sp, #352]
    82cc:	bl	4d40 <mpfr_set_prec@plt>
    82d0:	ldr	x0, [sp, #32]
    82d4:	add	x1, x0, #0x20
    82d8:	add	x0, sp, #0x38
    82dc:	ldr	w3, [sp, #292]
    82e0:	mov	x2, x1
    82e4:	mov	x1, #0x1                   	// #1
    82e8:	bl	5520 <mpfr_ui_sub@plt>
    82ec:	ldr	x1, [sp, #72]
    82f0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    82f4:	cmp	x1, x0
    82f8:	b.ge	831c <mpc_atan@@Base+0x8ec>  // b.tcont
    82fc:	ldr	x1, [sp, #72]
    8300:	mov	x0, #0x2                   	// #2
    8304:	movk	x0, #0x8000, lsl #48
    8308:	cmp	x1, x0
    830c:	b.ne	8314 <mpc_atan@@Base+0x8e4>  // b.any
    8310:	bl	4bd0 <mpfr_set_erangeflag@plt>
    8314:	mov	w0, #0x1                   	// #1
    8318:	b	832c <mpc_atan@@Base+0x8fc>
    831c:	ldr	w0, [sp, #64]
    8320:	cmp	w0, #0x0
    8324:	cset	w0, eq  // eq = none
    8328:	and	w0, w0, #0xff
    832c:	cmp	w0, #0x0
    8330:	b.eq	8390 <mpc_atan@@Base+0x960>  // b.none
    8334:	ldr	x0, [sp, #32]
    8338:	add	x0, x0, #0x20
    833c:	mov	x2, #0x0                   	// #0
    8340:	mov	x1, #0x1                   	// #1
    8344:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
    8348:	cmp	w0, #0x0
    834c:	b.eq	8384 <mpc_atan@@Base+0x954>  // b.none
    8350:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    8354:	ldr	x0, [x0, #4008]
    8358:	ldr	x5, [x0]
    835c:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    8360:	add	x4, x0, #0xf58
    8364:	mov	w3, #0x113                 	// #275
    8368:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    836c:	add	x2, x0, #0xf28
    8370:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    8374:	add	x1, x0, #0xf30
    8378:	mov	x0, x5
    837c:	bl	56a0 <fprintf@plt>
    8380:	bl	5100 <abort@plt>
    8384:	mov	x0, #0x2                   	// #2
    8388:	str	x0, [sp, #344]
    838c:	b	8398 <mpc_atan@@Base+0x968>
    8390:	ldr	x0, [sp, #72]
    8394:	str	x0, [sp, #344]
    8398:	ldr	x1, [sp, #32]
    839c:	add	x2, sp, #0x38
    83a0:	add	x0, sp, #0x78
    83a4:	mov	w3, #0x2                   	// #2
    83a8:	bl	4d60 <mpfr_atan2@plt>
    83ac:	ldr	x0, [sp, #32]
    83b0:	add	x1, x0, #0x20
    83b4:	add	x0, sp, #0x38
    83b8:	ldr	w3, [sp, #288]
    83bc:	mov	x2, #0x1                   	// #1
    83c0:	bl	4fe0 <mpfr_add_ui@plt>
    83c4:	ldr	x1, [sp, #72]
    83c8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    83cc:	cmp	x1, x0
    83d0:	b.ge	83f4 <mpc_atan@@Base+0x9c4>  // b.tcont
    83d4:	ldr	x1, [sp, #72]
    83d8:	mov	x0, #0x2                   	// #2
    83dc:	movk	x0, #0x8000, lsl #48
    83e0:	cmp	x1, x0
    83e4:	b.ne	83ec <mpc_atan@@Base+0x9bc>  // b.any
    83e8:	bl	4bd0 <mpfr_set_erangeflag@plt>
    83ec:	mov	w0, #0x1                   	// #1
    83f0:	b	8404 <mpc_atan@@Base+0x9d4>
    83f4:	ldr	w0, [sp, #64]
    83f8:	cmp	w0, #0x0
    83fc:	cset	w0, eq  // eq = none
    8400:	and	w0, w0, #0xff
    8404:	cmp	w0, #0x0
    8408:	b.eq	8468 <mpc_atan@@Base+0xa38>  // b.none
    840c:	ldr	x0, [sp, #32]
    8410:	add	x0, x0, #0x20
    8414:	mov	x2, #0x0                   	// #0
    8418:	mov	x1, #0xffffffffffffffff    	// #-1
    841c:	bl	50e0 <mpfr_cmp_si_2exp@plt>
    8420:	cmp	w0, #0x0
    8424:	b.eq	845c <mpc_atan@@Base+0xa2c>  // b.none
    8428:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    842c:	ldr	x0, [x0, #4008]
    8430:	ldr	x5, [x0]
    8434:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    8438:	add	x4, x0, #0xf80
    843c:	mov	w3, #0x122                 	// #290
    8440:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    8444:	add	x2, x0, #0xf28
    8448:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    844c:	add	x1, x0, #0xf30
    8450:	mov	x0, x5
    8454:	bl	56a0 <fprintf@plt>
    8458:	bl	5100 <abort@plt>
    845c:	ldr	x0, [sp, #344]
    8460:	str	x0, [sp, #336]
    8464:	b	8470 <mpc_atan@@Base+0xa40>
    8468:	ldr	x0, [sp, #72]
    846c:	str	x0, [sp, #336]
    8470:	add	x2, sp, #0x38
    8474:	add	x1, sp, #0xb8
    8478:	add	x0, sp, #0x58
    847c:	mov	w3, #0x3                   	// #3
    8480:	bl	4d60 <mpfr_atan2@plt>
    8484:	ldr	x0, [sp, #344]
    8488:	ldr	x2, [sp, #336]
    848c:	ldr	x1, [sp, #336]
    8490:	cmp	x2, x0
    8494:	csel	x0, x1, x0, le
    8498:	str	x0, [sp, #344]
    849c:	add	x2, sp, #0x58
    84a0:	add	x1, sp, #0x78
    84a4:	add	x0, sp, #0x78
    84a8:	mov	w3, #0x2                   	// #2
    84ac:	bl	4b30 <mpfr_sub@plt>
    84b0:	ldr	x0, [sp, #312]
    84b4:	add	x1, x0, #0x5
    84b8:	ldr	x0, [sp, #344]
    84bc:	sub	x1, x1, x0
    84c0:	ldr	x0, [sp, #136]
    84c4:	sub	x0, x1, x0
    84c8:	str	x0, [sp, #344]
    84cc:	ldr	x1, [sp, #344]
    84d0:	ldr	x0, [sp, #344]
    84d4:	mov	x2, #0x0                   	// #0
    84d8:	cmp	x1, #0x0
    84dc:	csel	x0, x0, x2, ge  // ge = tcont
    84e0:	add	x0, x0, #0x1
    84e4:	str	x0, [sp, #344]
    84e8:	add	x1, sp, #0x78
    84ec:	add	x0, sp, #0x78
    84f0:	mov	w3, #0x2                   	// #2
    84f4:	mov	x2, #0x1                   	// #1
    84f8:	bl	5420 <mpfr_div_2ui@plt>
    84fc:	ldr	x1, [sp, #352]
    8500:	ldr	x0, [sp, #344]
    8504:	sub	x5, x1, x0
    8508:	ldr	w0, [sp, #28]
    850c:	and	w0, w0, #0xf
    8510:	cmp	w0, #0x0
    8514:	cset	w0, eq  // eq = none
    8518:	and	w0, w0, #0xff
    851c:	and	x1, x0, #0xff
    8520:	ldr	x0, [sp, #296]
    8524:	add	x1, x1, x0
    8528:	add	x0, sp, #0x78
    852c:	mov	x4, x1
    8530:	mov	w3, #0x3                   	// #3
    8534:	mov	w2, #0x2                   	// #2
    8538:	mov	x1, x5
    853c:	bl	5540 <mpfr_can_round@plt>
    8540:	str	w0, [sp, #332]
    8544:	ldr	w0, [sp, #332]
    8548:	cmp	w0, #0x0
    854c:	b.eq	8294 <mpc_atan@@Base+0x864>  // b.none
    8550:	ldr	x0, [sp, #40]
    8554:	ldr	x0, [x0, #32]
    8558:	str	x0, [sp, #296]
    855c:	mov	x0, #0x2                   	// #2
    8560:	str	x0, [sp, #344]
    8564:	ldr	x0, [sp, #296]
    8568:	str	x0, [sp, #352]
    856c:	ldr	x0, [sp, #352]
    8570:	bl	4de0 <mpc_ceil_log2@plt>
    8574:	mov	x1, x0
    8578:	ldr	x0, [sp, #344]
    857c:	add	x0, x1, x0
    8580:	ldr	x1, [sp, #352]
    8584:	add	x0, x1, x0
    8588:	str	x0, [sp, #352]
    858c:	add	x0, sp, #0x38
    8590:	ldr	x1, [sp, #352]
    8594:	bl	4d40 <mpfr_set_prec@plt>
    8598:	add	x0, sp, #0x58
    859c:	ldr	x1, [sp, #352]
    85a0:	bl	4d40 <mpfr_set_prec@plt>
    85a4:	add	x0, sp, #0x98
    85a8:	ldr	x1, [sp, #352]
    85ac:	bl	4d40 <mpfr_set_prec@plt>
    85b0:	ldr	x0, [sp, #32]
    85b4:	add	x1, x0, #0x20
    85b8:	add	x0, sp, #0x38
    85bc:	mov	w3, #0x4                   	// #4
    85c0:	mov	x2, #0x1                   	// #1
    85c4:	bl	4fe0 <mpfr_add_ui@plt>
    85c8:	add	x1, sp, #0x38
    85cc:	add	x0, sp, #0x38
    85d0:	mov	w2, #0x2                   	// #2
    85d4:	bl	5110 <mpfr_sqr@plt>
    85d8:	ldr	x1, [sp, #32]
    85dc:	add	x0, sp, #0x98
    85e0:	mov	w2, #0x2                   	// #2
    85e4:	bl	5110 <mpfr_sqr@plt>
    85e8:	add	x2, sp, #0x98
    85ec:	add	x1, sp, #0x38
    85f0:	add	x0, sp, #0x38
    85f4:	mov	w3, #0x2                   	// #2
    85f8:	bl	4f50 <mpfr_add@plt>
    85fc:	add	x1, sp, #0x38
    8600:	add	x0, sp, #0x38
    8604:	mov	w2, #0x2                   	// #2
    8608:	bl	4e60 <mpfr_log@plt>
    860c:	ldr	x0, [sp, #32]
    8610:	add	x1, x0, #0x20
    8614:	add	x0, sp, #0x58
    8618:	mov	w3, #0x1                   	// #1
    861c:	mov	x2, x1
    8620:	mov	x1, #0x1                   	// #1
    8624:	bl	5520 <mpfr_ui_sub@plt>
    8628:	add	x1, sp, #0x58
    862c:	add	x0, sp, #0x58
    8630:	mov	w2, #0x1                   	// #1
    8634:	bl	5110 <mpfr_sqr@plt>
    8638:	add	x0, sp, #0x98
    863c:	bl	4c80 <mpfr_nextbelow@plt>
    8640:	add	x2, sp, #0x98
    8644:	add	x1, sp, #0x58
    8648:	add	x0, sp, #0x58
    864c:	mov	w3, #0x1                   	// #1
    8650:	bl	4f50 <mpfr_add@plt>
    8654:	add	x1, sp, #0x58
    8658:	add	x0, sp, #0x58
    865c:	mov	w2, #0x1                   	// #1
    8660:	bl	4e60 <mpfr_log@plt>
    8664:	add	x2, sp, #0x58
    8668:	add	x1, sp, #0x38
    866c:	add	x0, sp, #0x98
    8670:	mov	w3, #0x2                   	// #2
    8674:	bl	4b30 <mpfr_sub@plt>
    8678:	ldr	x1, [sp, #168]
    867c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    8680:	cmp	x1, x0
    8684:	b.ne	8690 <mpc_atan@@Base+0xc60>  // b.any
    8688:	str	wzr, [sp, #332]
    868c:	b	87b4 <mpc_atan@@Base+0xd84>
    8690:	ldr	x1, [sp, #104]
    8694:	ldr	x0, [sp, #72]
    8698:	cmp	x1, x0
    869c:	csel	x0, x1, x0, ge  // ge = tcont
    86a0:	str	x0, [sp, #336]
    86a4:	ldr	x0, [sp, #168]
    86a8:	ldr	x1, [sp, #336]
    86ac:	sub	x0, x1, x0
    86b0:	add	x0, x0, #0x1
    86b4:	str	x0, [sp, #336]
    86b8:	ldr	x0, [sp, #168]
    86bc:	mov	x1, #0x3                   	// #3
    86c0:	sub	x0, x1, x0
    86c4:	str	x0, [sp, #344]
    86c8:	ldr	x1, [sp, #336]
    86cc:	ldr	x0, [sp, #344]
    86d0:	cmp	x1, x0
    86d4:	b.gt	86f8 <mpc_atan@@Base+0xcc8>
    86d8:	ldr	x2, [sp, #344]
    86dc:	ldr	x1, [sp, #344]
    86e0:	mov	x0, #0xffffffffffffffff    	// #-1
    86e4:	cmp	x2, #0x0
    86e8:	csel	x0, x1, x0, ge  // ge = tcont
    86ec:	add	x0, x0, #0x2
    86f0:	str	x0, [sp, #344]
    86f4:	b	8714 <mpc_atan@@Base+0xce4>
    86f8:	ldr	x2, [sp, #336]
    86fc:	ldr	x1, [sp, #336]
    8700:	mov	x0, #0xffffffffffffffff    	// #-1
    8704:	cmp	x2, #0x0
    8708:	csel	x0, x1, x0, ge  // ge = tcont
    870c:	add	x0, x0, #0x2
    8710:	str	x0, [sp, #344]
    8714:	add	x1, sp, #0x98
    8718:	add	x0, sp, #0x98
    871c:	mov	w3, #0x0                   	// #0
    8720:	mov	x2, #0x2                   	// #2
    8724:	bl	5420 <mpfr_div_2ui@plt>
    8728:	ldr	x1, [sp, #168]
    872c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    8730:	cmp	x1, x0
    8734:	b.ne	876c <mpc_atan@@Base+0xd3c>  // b.any
    8738:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    873c:	ldr	x0, [x0, #4008]
    8740:	ldr	x5, [x0]
    8744:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    8748:	add	x4, x0, #0xfa8
    874c:	mov	w3, #0x17b                 	// #379
    8750:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    8754:	add	x2, x0, #0xf28
    8758:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    875c:	add	x1, x0, #0xf30
    8760:	mov	x0, x5
    8764:	bl	56a0 <fprintf@plt>
    8768:	bl	5100 <abort@plt>
    876c:	ldr	x1, [sp, #352]
    8770:	ldr	x0, [sp, #344]
    8774:	sub	x5, x1, x0
    8778:	ldr	w0, [sp, #28]
    877c:	asr	w0, w0, #4
    8780:	cmp	w0, #0x0
    8784:	cset	w0, eq  // eq = none
    8788:	and	w0, w0, #0xff
    878c:	and	x1, x0, #0xff
    8790:	ldr	x0, [sp, #296]
    8794:	add	x1, x1, x0
    8798:	add	x0, sp, #0x98
    879c:	mov	x4, x1
    87a0:	mov	w3, #0x3                   	// #3
    87a4:	mov	w2, #0x2                   	// #2
    87a8:	mov	x1, x5
    87ac:	bl	5540 <mpfr_can_round@plt>
    87b0:	str	w0, [sp, #332]
    87b4:	ldr	w0, [sp, #332]
    87b8:	cmp	w0, #0x0
    87bc:	b.eq	856c <mpc_atan@@Base+0xb3c>  // b.none
    87c0:	add	x1, sp, #0x98
    87c4:	add	x0, sp, #0x78
    87c8:	ldr	w3, [sp, #28]
    87cc:	mov	x2, x1
    87d0:	mov	x1, x0
    87d4:	ldr	x0, [sp, #40]
    87d8:	bl	55e0 <mpc_set_fr_fr@plt>
    87dc:	str	w0, [sp, #284]
    87e0:	add	x3, sp, #0x98
    87e4:	add	x2, sp, #0x78
    87e8:	add	x1, sp, #0x58
    87ec:	add	x0, sp, #0x38
    87f0:	mov	x4, #0x0                   	// #0
    87f4:	bl	4f60 <mpfr_clears@plt>
    87f8:	ldr	w0, [sp, #284]
    87fc:	ldp	x29, x30, [sp], #400
    8800:	ret

0000000000008804 <mpc_atanh@@Base>:
    8804:	stp	x29, x30, [sp, #-224]!
    8808:	mov	x29, sp
    880c:	str	x0, [sp, #40]
    8810:	str	x1, [sp, #32]
    8814:	str	w2, [sp, #28]
    8818:	ldr	x0, [sp, #32]
    881c:	add	x0, x0, #0x20
    8820:	add	x2, sp, #0x78
    8824:	mov	x3, x0
    8828:	ldp	x0, x1, [x3]
    882c:	stp	x0, x1, [x2]
    8830:	ldp	x0, x1, [x3, #16]
    8834:	stp	x0, x1, [x2, #16]
    8838:	ldr	x0, [sp, #32]
    883c:	add	x2, sp, #0x98
    8840:	mov	x3, x0
    8844:	ldp	x0, x1, [x3]
    8848:	stp	x0, x1, [x2]
    884c:	ldp	x0, x1, [x3, #16]
    8850:	stp	x0, x1, [x2, #16]
    8854:	add	x1, sp, #0x78
    8858:	add	x0, sp, #0x78
    885c:	mov	w2, #0x0                   	// #0
    8860:	bl	4c50 <mpfr_neg@plt>
    8864:	ldr	x0, [sp, #40]
    8868:	ldr	x1, [x0, #32]
    886c:	ldr	x0, [sp, #40]
    8870:	ldr	x2, [x0]
    8874:	add	x0, sp, #0x38
    8878:	bl	54c0 <mpc_init3@plt>
    887c:	ldr	w0, [sp, #28]
    8880:	asr	w0, w0, #4
    8884:	cmp	w0, #0x2
    8888:	b.eq	88b0 <mpc_atanh@@Base+0xac>  // b.none
    888c:	ldr	w0, [sp, #28]
    8890:	asr	w0, w0, #4
    8894:	cmp	w0, #0x3
    8898:	b.eq	88a8 <mpc_atanh@@Base+0xa4>  // b.none
    889c:	ldr	w0, [sp, #28]
    88a0:	asr	w0, w0, #4
    88a4:	b	88b4 <mpc_atanh@@Base+0xb0>
    88a8:	mov	w0, #0x2                   	// #2
    88ac:	b	88b4 <mpc_atanh@@Base+0xb0>
    88b0:	mov	w0, #0x3                   	// #3
    88b4:	ldr	w1, [sp, #28]
    88b8:	lsl	w1, w1, #4
    88bc:	and	w1, w1, #0xff
    88c0:	add	w2, w0, w1
    88c4:	add	x1, sp, #0x78
    88c8:	add	x0, sp, #0x38
    88cc:	bl	5510 <mpc_atan@plt>
    88d0:	str	w0, [sp, #220]
    88d4:	add	x2, sp, #0xb8
    88d8:	add	x3, sp, #0x38
    88dc:	ldp	x0, x1, [x3]
    88e0:	stp	x0, x1, [x2]
    88e4:	ldp	x0, x1, [x3, #16]
    88e8:	stp	x0, x1, [x2, #16]
    88ec:	add	x2, sp, #0x38
    88f0:	add	x3, sp, #0x58
    88f4:	ldp	x0, x1, [x3]
    88f8:	stp	x0, x1, [x2]
    88fc:	ldp	x0, x1, [x3, #16]
    8900:	stp	x0, x1, [x2, #16]
    8904:	add	x2, sp, #0x58
    8908:	add	x3, sp, #0xb8
    890c:	ldp	x0, x1, [x3]
    8910:	stp	x0, x1, [x2]
    8914:	ldp	x0, x1, [x3, #16]
    8918:	stp	x0, x1, [x2, #16]
    891c:	add	x0, sp, #0x38
    8920:	add	x1, x0, #0x20
    8924:	add	x0, sp, #0x38
    8928:	add	x0, x0, #0x20
    892c:	mov	w2, #0x0                   	// #0
    8930:	bl	4c50 <mpfr_neg@plt>
    8934:	add	x0, sp, #0x38
    8938:	ldr	w2, [sp, #28]
    893c:	mov	x1, x0
    8940:	ldr	x0, [sp, #40]
    8944:	bl	5680 <mpc_set@plt>
    8948:	add	x0, sp, #0x38
    894c:	bl	4ae0 <mpc_clear@plt>
    8950:	ldr	w0, [sp, #220]
    8954:	asr	w0, w0, #2
    8958:	cmp	w0, #0x2
    895c:	b.eq	8990 <mpc_atanh@@Base+0x18c>  // b.none
    8960:	ldr	w0, [sp, #220]
    8964:	asr	w0, w0, #2
    8968:	cmp	w0, #0x2
    896c:	b.eq	8980 <mpc_atanh@@Base+0x17c>  // b.none
    8970:	ldr	w0, [sp, #220]
    8974:	asr	w0, w0, #2
    8978:	cmp	w0, #0x0
    897c:	b.eq	8988 <mpc_atanh@@Base+0x184>  // b.none
    8980:	mov	w0, #0x1                   	// #1
    8984:	b	8994 <mpc_atanh@@Base+0x190>
    8988:	mov	w0, #0x0                   	// #0
    898c:	b	8994 <mpc_atanh@@Base+0x190>
    8990:	mov	w0, #0x2                   	// #2
    8994:	ldr	w1, [sp, #220]
    8998:	and	w1, w1, #0x3
    899c:	cmp	w1, #0x2
    89a0:	b.eq	89b4 <mpc_atanh@@Base+0x1b0>  // b.none
    89a4:	ldr	w1, [sp, #220]
    89a8:	and	w1, w1, #0x3
    89ac:	cmp	w1, #0x0
    89b0:	b.ne	89e8 <mpc_atanh@@Base+0x1e4>  // b.any
    89b4:	ldr	w1, [sp, #220]
    89b8:	and	w1, w1, #0x3
    89bc:	cmp	w1, #0x2
    89c0:	b.eq	89d4 <mpc_atanh@@Base+0x1d0>  // b.none
    89c4:	ldr	w1, [sp, #220]
    89c8:	and	w1, w1, #0x3
    89cc:	cmp	w1, #0x0
    89d0:	b.eq	89dc <mpc_atanh@@Base+0x1d8>  // b.none
    89d4:	mov	w1, #0x1                   	// #1
    89d8:	b	89e0 <mpc_atanh@@Base+0x1dc>
    89dc:	mov	w1, #0x0                   	// #0
    89e0:	lsl	w1, w1, #2
    89e4:	b	89ec <mpc_atanh@@Base+0x1e8>
    89e8:	mov	w1, #0x8                   	// #8
    89ec:	orr	w0, w0, w1
    89f0:	ldp	x29, x30, [sp], #224
    89f4:	ret

00000000000089f8 <mpc_clear@@Base>:
    89f8:	stp	x29, x30, [sp, #-32]!
    89fc:	mov	x29, sp
    8a00:	str	x0, [sp, #24]
    8a04:	ldr	x0, [sp, #24]
    8a08:	bl	4e30 <mpfr_clear@plt>
    8a0c:	ldr	x0, [sp, #24]
    8a10:	add	x0, x0, #0x20
    8a14:	bl	4e30 <mpfr_clear@plt>
    8a18:	nop
    8a1c:	ldp	x29, x30, [sp], #32
    8a20:	ret

0000000000008a24 <mpc_cmp@@Base>:
    8a24:	stp	x29, x30, [sp, #-48]!
    8a28:	mov	x29, sp
    8a2c:	str	x0, [sp, #24]
    8a30:	str	x1, [sp, #16]
    8a34:	ldr	x0, [sp, #24]
    8a38:	ldr	x1, [sp, #16]
    8a3c:	mov	w2, #0x1                   	// #1
    8a40:	bl	54a0 <mpfr_cmp3@plt>
    8a44:	str	w0, [sp, #44]
    8a48:	ldr	x0, [sp, #24]
    8a4c:	add	x3, x0, #0x20
    8a50:	ldr	x0, [sp, #16]
    8a54:	add	x0, x0, #0x20
    8a58:	mov	w2, #0x1                   	// #1
    8a5c:	mov	x1, x0
    8a60:	mov	x0, x3
    8a64:	bl	54a0 <mpfr_cmp3@plt>
    8a68:	str	w0, [sp, #40]
    8a6c:	ldr	w0, [sp, #44]
    8a70:	cmp	w0, #0x0
    8a74:	b.lt	8a90 <mpc_cmp@@Base+0x6c>  // b.tstop
    8a78:	ldr	w0, [sp, #44]
    8a7c:	cmp	w0, #0x0
    8a80:	cset	w0, ne  // ne = any
    8a84:	and	w0, w0, #0xff
    8a88:	mov	w1, w0
    8a8c:	b	8a94 <mpc_cmp@@Base+0x70>
    8a90:	mov	w1, #0x2                   	// #2
    8a94:	ldr	w0, [sp, #40]
    8a98:	cmp	w0, #0x0
    8a9c:	b.lt	8abc <mpc_cmp@@Base+0x98>  // b.tstop
    8aa0:	ldr	w0, [sp, #40]
    8aa4:	cmp	w0, #0x0
    8aa8:	b.eq	8ab4 <mpc_cmp@@Base+0x90>  // b.none
    8aac:	mov	w0, #0x4                   	// #4
    8ab0:	b	8ac0 <mpc_cmp@@Base+0x9c>
    8ab4:	mov	w0, #0x0                   	// #0
    8ab8:	b	8ac0 <mpc_cmp@@Base+0x9c>
    8abc:	mov	w0, #0x8                   	// #8
    8ac0:	orr	w0, w1, w0
    8ac4:	ldp	x29, x30, [sp], #48
    8ac8:	ret

0000000000008acc <mpc_cmp_abs@@Base>:
    8acc:	stp	x29, x30, [sp, #-288]!
    8ad0:	mov	x29, sp
    8ad4:	str	x0, [sp, #24]
    8ad8:	str	x1, [sp, #16]
    8adc:	ldr	x0, [sp, #24]
    8ae0:	ldr	x1, [x0, #16]
    8ae4:	mov	x0, #0x2                   	// #2
    8ae8:	movk	x0, #0x8000, lsl #48
    8aec:	cmp	x1, x0
    8af0:	b.eq	8b3c <mpc_cmp_abs@@Base+0x70>  // b.none
    8af4:	ldr	x0, [sp, #24]
    8af8:	ldr	x1, [x0, #48]
    8afc:	mov	x0, #0x2                   	// #2
    8b00:	movk	x0, #0x8000, lsl #48
    8b04:	cmp	x1, x0
    8b08:	b.eq	8b3c <mpc_cmp_abs@@Base+0x70>  // b.none
    8b0c:	ldr	x0, [sp, #16]
    8b10:	ldr	x1, [x0, #16]
    8b14:	mov	x0, #0x2                   	// #2
    8b18:	movk	x0, #0x8000, lsl #48
    8b1c:	cmp	x1, x0
    8b20:	b.eq	8b3c <mpc_cmp_abs@@Base+0x70>  // b.none
    8b24:	ldr	x0, [sp, #16]
    8b28:	ldr	x1, [x0, #48]
    8b2c:	mov	x0, #0x2                   	// #2
    8b30:	movk	x0, #0x8000, lsl #48
    8b34:	cmp	x1, x0
    8b38:	b.ne	8b70 <mpc_cmp_abs@@Base+0xa4>  // b.any
    8b3c:	add	x0, sp, #0x28
    8b40:	bl	4b70 <mpfr_init@plt>
    8b44:	add	x0, sp, #0x28
    8b48:	bl	4b10 <mpfr_set_nan@plt>
    8b4c:	add	x1, sp, #0x28
    8b50:	add	x0, sp, #0x28
    8b54:	mov	w2, #0x1                   	// #1
    8b58:	bl	54a0 <mpfr_cmp3@plt>
    8b5c:	str	w0, [sp, #276]
    8b60:	add	x0, sp, #0x28
    8b64:	bl	4e30 <mpfr_clear@plt>
    8b68:	ldr	w0, [sp, #276]
    8b6c:	b	8f08 <mpc_cmp_abs@@Base+0x43c>
    8b70:	ldr	x0, [sp, #24]
    8b74:	ldr	x1, [x0, #16]
    8b78:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8b7c:	cmp	x1, x0
    8b80:	b.eq	8b98 <mpc_cmp_abs@@Base+0xcc>  // b.none
    8b84:	ldr	x0, [sp, #24]
    8b88:	ldr	x1, [x0, #48]
    8b8c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8b90:	cmp	x1, x0
    8b94:	b.ne	8bd0 <mpc_cmp_abs@@Base+0x104>  // b.any
    8b98:	ldr	x0, [sp, #16]
    8b9c:	ldr	x1, [x0, #16]
    8ba0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8ba4:	cmp	x1, x0
    8ba8:	b.eq	8bc0 <mpc_cmp_abs@@Base+0xf4>  // b.none
    8bac:	ldr	x0, [sp, #16]
    8bb0:	ldr	x1, [x0, #48]
    8bb4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8bb8:	cmp	x1, x0
    8bbc:	b.ne	8bc8 <mpc_cmp_abs@@Base+0xfc>  // b.any
    8bc0:	mov	w0, #0x0                   	// #0
    8bc4:	b	8f08 <mpc_cmp_abs@@Base+0x43c>
    8bc8:	mov	w0, #0x1                   	// #1
    8bcc:	b	8f08 <mpc_cmp_abs@@Base+0x43c>
    8bd0:	ldr	x0, [sp, #16]
    8bd4:	ldr	x1, [x0, #16]
    8bd8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8bdc:	cmp	x1, x0
    8be0:	b.eq	8bf8 <mpc_cmp_abs@@Base+0x12c>  // b.none
    8be4:	ldr	x0, [sp, #16]
    8be8:	ldr	x1, [x0, #48]
    8bec:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    8bf0:	cmp	x1, x0
    8bf4:	b.ne	8c00 <mpc_cmp_abs@@Base+0x134>  // b.any
    8bf8:	mov	w0, #0xffffffff            	// #-1
    8bfc:	b	8f08 <mpc_cmp_abs@@Base+0x43c>
    8c00:	ldr	x1, [sp, #24]
    8c04:	add	x0, sp, #0xc8
    8c08:	ldp	x2, x3, [x1]
    8c0c:	stp	x2, x3, [x0]
    8c10:	ldp	x2, x3, [x1, #16]
    8c14:	stp	x2, x3, [x0, #16]
    8c18:	ldp	x2, x3, [x1, #32]
    8c1c:	stp	x2, x3, [x0, #32]
    8c20:	ldp	x2, x3, [x1, #48]
    8c24:	stp	x2, x3, [x0, #48]
    8c28:	ldr	x1, [sp, #16]
    8c2c:	add	x0, sp, #0x88
    8c30:	ldp	x2, x3, [x1]
    8c34:	stp	x2, x3, [x0]
    8c38:	ldp	x2, x3, [x1, #16]
    8c3c:	stp	x2, x3, [x0, #16]
    8c40:	ldp	x2, x3, [x1, #32]
    8c44:	stp	x2, x3, [x0, #32]
    8c48:	ldp	x2, x3, [x1, #48]
    8c4c:	stp	x2, x3, [x0, #48]
    8c50:	ldr	x0, [sp, #24]
    8c54:	ldr	w0, [x0, #8]
    8c58:	cmp	w0, #0x0
    8c5c:	b.ge	8c70 <mpc_cmp_abs@@Base+0x1a4>  // b.tcont
    8c60:	add	x1, sp, #0xc8
    8c64:	add	x0, sp, #0xc8
    8c68:	mov	w2, #0x0                   	// #0
    8c6c:	bl	4c50 <mpfr_neg@plt>
    8c70:	ldr	x0, [sp, #24]
    8c74:	ldr	w0, [x0, #40]
    8c78:	cmp	w0, #0x0
    8c7c:	b.ge	8c98 <mpc_cmp_abs@@Base+0x1cc>  // b.tcont
    8c80:	add	x0, sp, #0xc8
    8c84:	add	x1, x0, #0x20
    8c88:	add	x0, sp, #0xc8
    8c8c:	add	x0, x0, #0x20
    8c90:	mov	w2, #0x0                   	// #0
    8c94:	bl	4c50 <mpfr_neg@plt>
    8c98:	ldr	x0, [sp, #16]
    8c9c:	ldr	w0, [x0, #8]
    8ca0:	cmp	w0, #0x0
    8ca4:	b.ge	8cb8 <mpc_cmp_abs@@Base+0x1ec>  // b.tcont
    8ca8:	add	x1, sp, #0x88
    8cac:	add	x0, sp, #0x88
    8cb0:	mov	w2, #0x0                   	// #0
    8cb4:	bl	4c50 <mpfr_neg@plt>
    8cb8:	ldr	x0, [sp, #16]
    8cbc:	ldr	w0, [x0, #40]
    8cc0:	cmp	w0, #0x0
    8cc4:	b.ge	8ce0 <mpc_cmp_abs@@Base+0x214>  // b.tcont
    8cc8:	add	x0, sp, #0x88
    8ccc:	add	x1, x0, #0x20
    8cd0:	add	x0, sp, #0x88
    8cd4:	add	x0, x0, #0x20
    8cd8:	mov	w2, #0x0                   	// #0
    8cdc:	bl	4c50 <mpfr_neg@plt>
    8ce0:	add	x0, sp, #0xc8
    8ce4:	add	x1, x0, #0x20
    8ce8:	add	x0, sp, #0xc8
    8cec:	mov	w2, #0x1                   	// #1
    8cf0:	bl	54a0 <mpfr_cmp3@plt>
    8cf4:	cmp	w0, #0x0
    8cf8:	b.le	8d0c <mpc_cmp_abs@@Base+0x240>
    8cfc:	add	x0, sp, #0xc8
    8d00:	add	x1, x0, #0x20
    8d04:	add	x0, sp, #0xc8
    8d08:	bl	5190 <mpfr_swap@plt>
    8d0c:	add	x0, sp, #0x88
    8d10:	add	x1, x0, #0x20
    8d14:	add	x0, sp, #0x88
    8d18:	mov	w2, #0x1                   	// #1
    8d1c:	bl	54a0 <mpfr_cmp3@plt>
    8d20:	cmp	w0, #0x0
    8d24:	b.le	8d38 <mpc_cmp_abs@@Base+0x26c>
    8d28:	add	x0, sp, #0x88
    8d2c:	add	x1, x0, #0x20
    8d30:	add	x0, sp, #0x88
    8d34:	bl	5190 <mpfr_swap@plt>
    8d38:	add	x1, sp, #0x88
    8d3c:	add	x0, sp, #0xc8
    8d40:	mov	w2, #0x1                   	// #1
    8d44:	bl	54a0 <mpfr_cmp3@plt>
    8d48:	cmp	w0, #0x0
    8d4c:	b.ne	8d6c <mpc_cmp_abs@@Base+0x2a0>  // b.any
    8d50:	add	x0, sp, #0x88
    8d54:	add	x1, x0, #0x20
    8d58:	add	x0, sp, #0xc8
    8d5c:	add	x0, x0, #0x20
    8d60:	mov	w2, #0x1                   	// #1
    8d64:	bl	54a0 <mpfr_cmp3@plt>
    8d68:	b	8f08 <mpc_cmp_abs@@Base+0x43c>
    8d6c:	add	x0, sp, #0x88
    8d70:	add	x1, x0, #0x20
    8d74:	add	x0, sp, #0xc8
    8d78:	add	x0, x0, #0x20
    8d7c:	mov	w2, #0x1                   	// #1
    8d80:	bl	54a0 <mpfr_cmp3@plt>
    8d84:	cmp	w0, #0x0
    8d88:	b.ne	8da0 <mpc_cmp_abs@@Base+0x2d4>  // b.any
    8d8c:	add	x1, sp, #0x88
    8d90:	add	x0, sp, #0xc8
    8d94:	mov	w2, #0x1                   	// #1
    8d98:	bl	54a0 <mpfr_cmp3@plt>
    8d9c:	b	8f08 <mpc_cmp_abs@@Base+0x43c>
    8da0:	add	x0, sp, #0x68
    8da4:	bl	4b70 <mpfr_init@plt>
    8da8:	add	x0, sp, #0x48
    8dac:	bl	4b70 <mpfr_init@plt>
    8db0:	ldr	x1, [sp, #168]
    8db4:	ldr	x0, [sp, #136]
    8db8:	cmp	x1, x0
    8dbc:	csel	x1, x1, x0, ge  // ge = tcont
    8dc0:	ldr	x2, [sp, #232]
    8dc4:	ldr	x0, [sp, #200]
    8dc8:	cmp	x2, x0
    8dcc:	csel	x0, x2, x0, ge  // ge = tcont
    8dd0:	cmp	x1, x0
    8dd4:	csel	x1, x1, x0, ge  // ge = tcont
    8dd8:	mov	x0, #0x1387                	// #4999
    8ddc:	cmp	x1, x0
    8de0:	b.le	8e34 <mpc_cmp_abs@@Base+0x368>
    8de4:	ldr	x1, [sp, #168]
    8de8:	ldr	x0, [sp, #136]
    8dec:	cmp	x1, x0
    8df0:	csel	x1, x1, x0, ge  // ge = tcont
    8df4:	ldr	x2, [sp, #232]
    8df8:	ldr	x0, [sp, #200]
    8dfc:	cmp	x2, x0
    8e00:	csel	x0, x2, x0, ge  // ge = tcont
    8e04:	cmp	x1, x0
    8e08:	csel	x0, x1, x0, ge  // ge = tcont
    8e0c:	mov	x1, #0xd70b                	// #55051
    8e10:	movk	x1, #0x70a3, lsl #16
    8e14:	movk	x1, #0xa3d, lsl #32
    8e18:	movk	x1, #0xa3d7, lsl #48
    8e1c:	smulh	x1, x0, x1
    8e20:	add	x1, x1, x0
    8e24:	asr	x1, x1, #6
    8e28:	asr	x0, x0, #63
    8e2c:	sub	x0, x1, x0
    8e30:	b	8e38 <mpc_cmp_abs@@Base+0x36c>
    8e34:	mov	x0, #0x32                  	// #50
    8e38:	str	x0, [sp, #280]
    8e3c:	add	x0, sp, #0x68
    8e40:	ldr	x1, [sp, #280]
    8e44:	bl	4d40 <mpfr_set_prec@plt>
    8e48:	add	x0, sp, #0x48
    8e4c:	ldr	x1, [sp, #280]
    8e50:	bl	4d40 <mpfr_set_prec@plt>
    8e54:	add	x1, sp, #0xc8
    8e58:	add	x0, sp, #0x68
    8e5c:	mov	w2, #0x3                   	// #3
    8e60:	bl	4f90 <mpc_norm@plt>
    8e64:	str	w0, [sp, #272]
    8e68:	add	x1, sp, #0x88
    8e6c:	add	x0, sp, #0x48
    8e70:	mov	w2, #0x3                   	// #3
    8e74:	bl	4f90 <mpc_norm@plt>
    8e78:	str	w0, [sp, #268]
    8e7c:	add	x1, sp, #0x48
    8e80:	add	x0, sp, #0x68
    8e84:	mov	w2, #0x1                   	// #1
    8e88:	bl	54a0 <mpfr_cmp3@plt>
    8e8c:	str	w0, [sp, #276]
    8e90:	ldr	w0, [sp, #276]
    8e94:	cmp	w0, #0x0
    8e98:	b.ne	8ef0 <mpc_cmp_abs@@Base+0x424>  // b.any
    8e9c:	ldr	w0, [sp, #272]
    8ea0:	cmp	w0, #0x0
    8ea4:	b.ne	8ec8 <mpc_cmp_abs@@Base+0x3fc>  // b.any
    8ea8:	ldr	w0, [sp, #268]
    8eac:	cmp	w0, #0x0
    8eb0:	b.eq	8ec0 <mpc_cmp_abs@@Base+0x3f4>  // b.none
    8eb4:	mov	w0, #0xffffffff            	// #-1
    8eb8:	str	w0, [sp, #276]
    8ebc:	b	8ef4 <mpc_cmp_abs@@Base+0x428>
    8ec0:	str	wzr, [sp, #276]
    8ec4:	b	8ef4 <mpc_cmp_abs@@Base+0x428>
    8ec8:	ldr	w0, [sp, #268]
    8ecc:	cmp	w0, #0x0
    8ed0:	b.ne	8ee0 <mpc_cmp_abs@@Base+0x414>  // b.any
    8ed4:	mov	w0, #0x1                   	// #1
    8ed8:	str	w0, [sp, #276]
    8edc:	b	8ef4 <mpc_cmp_abs@@Base+0x428>
    8ee0:	ldr	x0, [sp, #280]
    8ee4:	lsl	x0, x0, #1
    8ee8:	str	x0, [sp, #280]
    8eec:	b	8e3c <mpc_cmp_abs@@Base+0x370>
    8ef0:	nop
    8ef4:	add	x0, sp, #0x68
    8ef8:	bl	4e30 <mpfr_clear@plt>
    8efc:	add	x0, sp, #0x48
    8f00:	bl	4e30 <mpfr_clear@plt>
    8f04:	ldr	w0, [sp, #276]
    8f08:	ldp	x29, x30, [sp], #288
    8f0c:	ret

0000000000008f10 <mpc_cmp_si_si@@Base>:
    8f10:	stp	x29, x30, [sp, #-64]!
    8f14:	mov	x29, sp
    8f18:	str	x0, [sp, #40]
    8f1c:	str	x1, [sp, #32]
    8f20:	str	x2, [sp, #24]
    8f24:	ldr	x0, [sp, #40]
    8f28:	mov	x2, #0x0                   	// #0
    8f2c:	ldr	x1, [sp, #32]
    8f30:	bl	50e0 <mpfr_cmp_si_2exp@plt>
    8f34:	str	w0, [sp, #60]
    8f38:	ldr	x0, [sp, #40]
    8f3c:	add	x0, x0, #0x20
    8f40:	mov	x2, #0x0                   	// #0
    8f44:	ldr	x1, [sp, #24]
    8f48:	bl	50e0 <mpfr_cmp_si_2exp@plt>
    8f4c:	str	w0, [sp, #56]
    8f50:	ldr	w0, [sp, #60]
    8f54:	cmp	w0, #0x0
    8f58:	b.lt	8f74 <mpc_cmp_si_si@@Base+0x64>  // b.tstop
    8f5c:	ldr	w0, [sp, #60]
    8f60:	cmp	w0, #0x0
    8f64:	cset	w0, ne  // ne = any
    8f68:	and	w0, w0, #0xff
    8f6c:	mov	w1, w0
    8f70:	b	8f78 <mpc_cmp_si_si@@Base+0x68>
    8f74:	mov	w1, #0x2                   	// #2
    8f78:	ldr	w0, [sp, #56]
    8f7c:	cmp	w0, #0x0
    8f80:	b.lt	8fa0 <mpc_cmp_si_si@@Base+0x90>  // b.tstop
    8f84:	ldr	w0, [sp, #56]
    8f88:	cmp	w0, #0x0
    8f8c:	b.eq	8f98 <mpc_cmp_si_si@@Base+0x88>  // b.none
    8f90:	mov	w0, #0x4                   	// #4
    8f94:	b	8fa4 <mpc_cmp_si_si@@Base+0x94>
    8f98:	mov	w0, #0x0                   	// #0
    8f9c:	b	8fa4 <mpc_cmp_si_si@@Base+0x94>
    8fa0:	mov	w0, #0x8                   	// #8
    8fa4:	orr	w0, w1, w0
    8fa8:	ldp	x29, x30, [sp], #64
    8fac:	ret

0000000000008fb0 <mpc_conj@@Base>:
    8fb0:	stp	x29, x30, [sp, #-64]!
    8fb4:	mov	x29, sp
    8fb8:	str	x0, [sp, #40]
    8fbc:	str	x1, [sp, #32]
    8fc0:	str	w2, [sp, #28]
    8fc4:	ldr	x4, [sp, #40]
    8fc8:	ldr	x1, [sp, #32]
    8fcc:	ldr	w0, [sp, #28]
    8fd0:	and	w2, w0, #0xf
    8fd4:	ldr	x0, [sp, #32]
    8fd8:	ldr	w0, [x0, #8]
    8fdc:	mov	w3, w0
    8fe0:	mov	x0, x4
    8fe4:	bl	52d0 <mpfr_set4@plt>
    8fe8:	str	w0, [sp, #60]
    8fec:	ldr	x0, [sp, #40]
    8ff0:	add	x3, x0, #0x20
    8ff4:	ldr	x0, [sp, #32]
    8ff8:	add	x1, x0, #0x20
    8ffc:	ldr	w0, [sp, #28]
    9000:	asr	w0, w0, #4
    9004:	mov	w2, w0
    9008:	mov	x0, x3
    900c:	bl	4c50 <mpfr_neg@plt>
    9010:	str	w0, [sp, #56]
    9014:	ldr	w0, [sp, #60]
    9018:	cmp	w0, #0x0
    901c:	b.lt	9038 <mpc_conj@@Base+0x88>  // b.tstop
    9020:	ldr	w0, [sp, #60]
    9024:	cmp	w0, #0x0
    9028:	cset	w0, ne  // ne = any
    902c:	and	w0, w0, #0xff
    9030:	mov	w1, w0
    9034:	b	903c <mpc_conj@@Base+0x8c>
    9038:	mov	w1, #0x2                   	// #2
    903c:	ldr	w0, [sp, #56]
    9040:	cmp	w0, #0x0
    9044:	b.lt	9064 <mpc_conj@@Base+0xb4>  // b.tstop
    9048:	ldr	w0, [sp, #56]
    904c:	cmp	w0, #0x0
    9050:	b.eq	905c <mpc_conj@@Base+0xac>  // b.none
    9054:	mov	w0, #0x4                   	// #4
    9058:	b	9068 <mpc_conj@@Base+0xb8>
    905c:	mov	w0, #0x0                   	// #0
    9060:	b	9068 <mpc_conj@@Base+0xb8>
    9064:	mov	w0, #0x8                   	// #8
    9068:	orr	w0, w1, w0
    906c:	ldp	x29, x30, [sp], #64
    9070:	ret

0000000000009074 <mpc_cos@@Base>:
    9074:	stp	x29, x30, [sp, #-48]!
    9078:	mov	x29, sp
    907c:	str	x0, [sp, #40]
    9080:	str	x1, [sp, #32]
    9084:	str	w2, [sp, #28]
    9088:	ldr	w4, [sp, #28]
    908c:	mov	w3, #0x0                   	// #0
    9090:	ldr	x2, [sp, #32]
    9094:	ldr	x1, [sp, #40]
    9098:	mov	x0, #0x0                   	// #0
    909c:	bl	5240 <mpc_sin_cos@plt>
    90a0:	asr	w0, w0, #4
    90a4:	ldp	x29, x30, [sp], #48
    90a8:	ret

00000000000090ac <mpc_cosh@@Base>:
    90ac:	stp	x29, x30, [sp, #-112]!
    90b0:	mov	x29, sp
    90b4:	str	x0, [sp, #40]
    90b8:	str	x1, [sp, #32]
    90bc:	str	w2, [sp, #28]
    90c0:	ldr	x0, [sp, #32]
    90c4:	add	x0, x0, #0x20
    90c8:	add	x2, sp, #0x30
    90cc:	mov	x3, x0
    90d0:	ldp	x0, x1, [x3]
    90d4:	stp	x0, x1, [x2]
    90d8:	ldp	x0, x1, [x3, #16]
    90dc:	stp	x0, x1, [x2, #16]
    90e0:	ldr	x0, [sp, #32]
    90e4:	add	x2, sp, #0x50
    90e8:	mov	x3, x0
    90ec:	ldp	x0, x1, [x3]
    90f0:	stp	x0, x1, [x2]
    90f4:	ldp	x0, x1, [x3, #16]
    90f8:	stp	x0, x1, [x2, #16]
    90fc:	add	x1, sp, #0x30
    9100:	add	x0, sp, #0x30
    9104:	mov	w2, #0x0                   	// #0
    9108:	bl	4c50 <mpfr_neg@plt>
    910c:	add	x0, sp, #0x30
    9110:	ldr	w2, [sp, #28]
    9114:	mov	x1, x0
    9118:	ldr	x0, [sp, #40]
    911c:	bl	54e0 <mpc_cos@plt>
    9120:	ldp	x29, x30, [sp], #112
    9124:	ret

0000000000009128 <mpc_div_2si@@Base>:
    9128:	stp	x29, x30, [sp, #-64]!
    912c:	mov	x29, sp
    9130:	str	x0, [sp, #40]
    9134:	str	x1, [sp, #32]
    9138:	str	x2, [sp, #24]
    913c:	str	w3, [sp, #20]
    9140:	ldr	x4, [sp, #40]
    9144:	ldr	x1, [sp, #32]
    9148:	ldr	w0, [sp, #20]
    914c:	and	w0, w0, #0xf
    9150:	mov	w3, w0
    9154:	ldr	x2, [sp, #24]
    9158:	mov	x0, x4
    915c:	bl	5130 <mpfr_div_2si@plt>
    9160:	str	w0, [sp, #60]
    9164:	ldr	x0, [sp, #40]
    9168:	add	x4, x0, #0x20
    916c:	ldr	x0, [sp, #32]
    9170:	add	x1, x0, #0x20
    9174:	ldr	w0, [sp, #20]
    9178:	asr	w0, w0, #4
    917c:	mov	w3, w0
    9180:	ldr	x2, [sp, #24]
    9184:	mov	x0, x4
    9188:	bl	5130 <mpfr_div_2si@plt>
    918c:	str	w0, [sp, #56]
    9190:	ldr	w0, [sp, #60]
    9194:	cmp	w0, #0x0
    9198:	b.lt	91b4 <mpc_div_2si@@Base+0x8c>  // b.tstop
    919c:	ldr	w0, [sp, #60]
    91a0:	cmp	w0, #0x0
    91a4:	cset	w0, ne  // ne = any
    91a8:	and	w0, w0, #0xff
    91ac:	mov	w1, w0
    91b0:	b	91b8 <mpc_div_2si@@Base+0x90>
    91b4:	mov	w1, #0x2                   	// #2
    91b8:	ldr	w0, [sp, #56]
    91bc:	cmp	w0, #0x0
    91c0:	b.lt	91e0 <mpc_div_2si@@Base+0xb8>  // b.tstop
    91c4:	ldr	w0, [sp, #56]
    91c8:	cmp	w0, #0x0
    91cc:	b.eq	91d8 <mpc_div_2si@@Base+0xb0>  // b.none
    91d0:	mov	w0, #0x4                   	// #4
    91d4:	b	91e4 <mpc_div_2si@@Base+0xbc>
    91d8:	mov	w0, #0x0                   	// #0
    91dc:	b	91e4 <mpc_div_2si@@Base+0xbc>
    91e0:	mov	w0, #0x8                   	// #8
    91e4:	orr	w0, w1, w0
    91e8:	ldp	x29, x30, [sp], #64
    91ec:	ret

00000000000091f0 <mpc_div_2ui@@Base>:
    91f0:	stp	x29, x30, [sp, #-64]!
    91f4:	mov	x29, sp
    91f8:	str	x0, [sp, #40]
    91fc:	str	x1, [sp, #32]
    9200:	str	x2, [sp, #24]
    9204:	str	w3, [sp, #20]
    9208:	ldr	x4, [sp, #40]
    920c:	ldr	x1, [sp, #32]
    9210:	ldr	w0, [sp, #20]
    9214:	and	w0, w0, #0xf
    9218:	mov	w3, w0
    921c:	ldr	x2, [sp, #24]
    9220:	mov	x0, x4
    9224:	bl	5420 <mpfr_div_2ui@plt>
    9228:	str	w0, [sp, #60]
    922c:	ldr	x0, [sp, #40]
    9230:	add	x4, x0, #0x20
    9234:	ldr	x0, [sp, #32]
    9238:	add	x1, x0, #0x20
    923c:	ldr	w0, [sp, #20]
    9240:	asr	w0, w0, #4
    9244:	mov	w3, w0
    9248:	ldr	x2, [sp, #24]
    924c:	mov	x0, x4
    9250:	bl	5420 <mpfr_div_2ui@plt>
    9254:	str	w0, [sp, #56]
    9258:	ldr	w0, [sp, #60]
    925c:	cmp	w0, #0x0
    9260:	b.lt	927c <mpc_div_2ui@@Base+0x8c>  // b.tstop
    9264:	ldr	w0, [sp, #60]
    9268:	cmp	w0, #0x0
    926c:	cset	w0, ne  // ne = any
    9270:	and	w0, w0, #0xff
    9274:	mov	w1, w0
    9278:	b	9280 <mpc_div_2ui@@Base+0x90>
    927c:	mov	w1, #0x2                   	// #2
    9280:	ldr	w0, [sp, #56]
    9284:	cmp	w0, #0x0
    9288:	b.lt	92a8 <mpc_div_2ui@@Base+0xb8>  // b.tstop
    928c:	ldr	w0, [sp, #56]
    9290:	cmp	w0, #0x0
    9294:	b.eq	92a0 <mpc_div_2ui@@Base+0xb0>  // b.none
    9298:	mov	w0, #0x4                   	// #4
    929c:	b	92ac <mpc_div_2ui@@Base+0xbc>
    92a0:	mov	w0, #0x0                   	// #0
    92a4:	b	92ac <mpc_div_2ui@@Base+0xbc>
    92a8:	mov	w0, #0x8                   	// #8
    92ac:	orr	w0, w1, w0
    92b0:	ldp	x29, x30, [sp], #64
    92b4:	ret
    92b8:	stp	x29, x30, [sp, #-96]!
    92bc:	mov	x29, sp
    92c0:	str	x0, [sp, #40]
    92c4:	str	x1, [sp, #32]
    92c8:	str	x2, [sp, #24]
    92cc:	str	w3, [sp, #20]
    92d0:	ldr	x0, [sp, #24]
    92d4:	ldr	w0, [x0, #8]
    92d8:	cmp	w0, #0x0
    92dc:	b.ge	92e8 <mpc_div_2ui@@Base+0xf8>  // b.tcont
    92e0:	mov	w0, #0xffffffff            	// #-1
    92e4:	b	92ec <mpc_div_2ui@@Base+0xfc>
    92e8:	mov	w0, #0x1                   	// #1
    92ec:	str	w0, [sp, #92]
    92f0:	add	x0, sp, #0x38
    92f4:	mov	x1, #0x1                   	// #1
    92f8:	bl	5530 <mpfr_init2@plt>
    92fc:	add	x0, sp, #0x38
    9300:	ldr	w1, [sp, #92]
    9304:	bl	5220 <mpfr_set_inf@plt>
    9308:	ldr	x4, [sp, #40]
    930c:	ldr	x1, [sp, #32]
    9310:	ldr	w0, [sp, #20]
    9314:	and	w2, w0, #0xf
    9318:	add	x0, sp, #0x38
    931c:	mov	w3, w2
    9320:	mov	x2, x1
    9324:	mov	x1, x0
    9328:	mov	x0, x4
    932c:	bl	4c40 <mpfr_mul@plt>
    9330:	ldr	x0, [sp, #40]
    9334:	add	x4, x0, #0x20
    9338:	ldr	x0, [sp, #32]
    933c:	add	x1, x0, #0x20
    9340:	ldr	w0, [sp, #20]
    9344:	asr	w2, w0, #4
    9348:	add	x0, sp, #0x38
    934c:	mov	w3, w2
    9350:	mov	x2, x1
    9354:	mov	x1, x0
    9358:	mov	x0, x4
    935c:	bl	4c40 <mpfr_mul@plt>
    9360:	add	x0, sp, #0x38
    9364:	bl	4e30 <mpfr_clear@plt>
    9368:	mov	w0, #0x0                   	// #0
    936c:	ldp	x29, x30, [sp], #96
    9370:	ret
    9374:	stp	x29, x30, [sp, #-96]!
    9378:	mov	x29, sp
    937c:	str	x0, [sp, #40]
    9380:	str	x1, [sp, #32]
    9384:	str	x2, [sp, #24]
    9388:	ldr	x0, [sp, #32]
    938c:	ldr	x1, [x0, #16]
    9390:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    9394:	cmp	x1, x0
    9398:	b.ne	93bc <mpc_div_2ui@@Base+0x1cc>  // b.any
    939c:	ldr	x0, [sp, #32]
    93a0:	ldr	w0, [x0, #8]
    93a4:	cmp	w0, #0x0
    93a8:	b.ge	93b4 <mpc_div_2ui@@Base+0x1c4>  // b.tcont
    93ac:	mov	w0, #0xffffffff            	// #-1
    93b0:	b	93c0 <mpc_div_2ui@@Base+0x1d0>
    93b4:	mov	w0, #0x1                   	// #1
    93b8:	b	93c0 <mpc_div_2ui@@Base+0x1d0>
    93bc:	mov	w0, #0x0                   	// #0
    93c0:	str	w0, [sp, #84]
    93c4:	ldr	x0, [sp, #32]
    93c8:	ldr	x1, [x0, #48]
    93cc:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    93d0:	cmp	x1, x0
    93d4:	b.ne	93f8 <mpc_div_2ui@@Base+0x208>  // b.any
    93d8:	ldr	x0, [sp, #32]
    93dc:	ldr	w0, [x0, #40]
    93e0:	cmp	w0, #0x0
    93e4:	b.ge	93f0 <mpc_div_2ui@@Base+0x200>  // b.tcont
    93e8:	mov	w0, #0xffffffff            	// #-1
    93ec:	b	93fc <mpc_div_2ui@@Base+0x20c>
    93f0:	mov	w0, #0x1                   	// #1
    93f4:	b	93fc <mpc_div_2ui@@Base+0x20c>
    93f8:	mov	w0, #0x0                   	// #0
    93fc:	str	w0, [sp, #80]
    9400:	ldr	w0, [sp, #84]
    9404:	cmp	w0, #0x0
    9408:	b.eq	9418 <mpc_div_2ui@@Base+0x228>  // b.none
    940c:	ldr	w0, [sp, #80]
    9410:	cmp	w0, #0x0
    9414:	b.ne	952c <mpc_div_2ui@@Base+0x33c>  // b.any
    9418:	ldr	x0, [sp, #24]
    941c:	ldr	x1, [x0, #16]
    9420:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9424:	cmp	x1, x0
    9428:	b.eq	944c <mpc_div_2ui@@Base+0x25c>  // b.none
    942c:	ldr	x0, [sp, #24]
    9430:	ldr	w0, [x0, #8]
    9434:	cmp	w0, #0x0
    9438:	b.ge	9444 <mpc_div_2ui@@Base+0x254>  // b.tcont
    943c:	mov	w0, #0xffffffff            	// #-1
    9440:	b	9450 <mpc_div_2ui@@Base+0x260>
    9444:	mov	w0, #0x1                   	// #1
    9448:	b	9450 <mpc_div_2ui@@Base+0x260>
    944c:	mov	w0, #0x0                   	// #0
    9450:	ldr	w1, [sp, #84]
    9454:	mul	w1, w0, w1
    9458:	ldr	x0, [sp, #24]
    945c:	ldr	x2, [x0, #48]
    9460:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9464:	cmp	x2, x0
    9468:	b.eq	948c <mpc_div_2ui@@Base+0x29c>  // b.none
    946c:	ldr	x0, [sp, #24]
    9470:	ldr	w0, [x0, #40]
    9474:	cmp	w0, #0x0
    9478:	b.ge	9484 <mpc_div_2ui@@Base+0x294>  // b.tcont
    947c:	mov	w0, #0xffffffff            	// #-1
    9480:	b	9490 <mpc_div_2ui@@Base+0x2a0>
    9484:	mov	w0, #0x1                   	// #1
    9488:	b	9490 <mpc_div_2ui@@Base+0x2a0>
    948c:	mov	w0, #0x0                   	// #0
    9490:	ldr	w2, [sp, #80]
    9494:	mul	w0, w0, w2
    9498:	add	w0, w1, w0
    949c:	str	w0, [sp, #92]
    94a0:	ldr	x0, [sp, #24]
    94a4:	ldr	x1, [x0, #16]
    94a8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    94ac:	cmp	x1, x0
    94b0:	b.eq	94d4 <mpc_div_2ui@@Base+0x2e4>  // b.none
    94b4:	ldr	x0, [sp, #24]
    94b8:	ldr	w0, [x0, #8]
    94bc:	cmp	w0, #0x0
    94c0:	b.ge	94cc <mpc_div_2ui@@Base+0x2dc>  // b.tcont
    94c4:	mov	w0, #0xffffffff            	// #-1
    94c8:	b	94d8 <mpc_div_2ui@@Base+0x2e8>
    94cc:	mov	w0, #0x1                   	// #1
    94d0:	b	94d8 <mpc_div_2ui@@Base+0x2e8>
    94d4:	mov	w0, #0x0                   	// #0
    94d8:	ldr	w1, [sp, #80]
    94dc:	mul	w1, w0, w1
    94e0:	ldr	x0, [sp, #24]
    94e4:	ldr	x2, [x0, #48]
    94e8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    94ec:	cmp	x2, x0
    94f0:	b.eq	9514 <mpc_div_2ui@@Base+0x324>  // b.none
    94f4:	ldr	x0, [sp, #24]
    94f8:	ldr	w0, [x0, #40]
    94fc:	cmp	w0, #0x0
    9500:	b.ge	950c <mpc_div_2ui@@Base+0x31c>  // b.tcont
    9504:	mov	w0, #0xffffffff            	// #-1
    9508:	b	9518 <mpc_div_2ui@@Base+0x328>
    950c:	mov	w0, #0x1                   	// #1
    9510:	b	9518 <mpc_div_2ui@@Base+0x328>
    9514:	mov	w0, #0x0                   	// #0
    9518:	ldr	w2, [sp, #84]
    951c:	mul	w0, w0, w2
    9520:	sub	w0, w1, w0
    9524:	str	w0, [sp, #88]
    9528:	b	97d0 <mpc_div_2ui@@Base+0x5e0>
    952c:	add	x0, sp, #0x30
    9530:	mov	x1, #0x2                   	// #2
    9534:	bl	5530 <mpfr_init2@plt>
    9538:	ldr	w0, [sp, #84]
    953c:	cmp	w0, #0x1
    9540:	b.ne	9688 <mpc_div_2ui@@Base+0x498>  // b.any
    9544:	ldr	w0, [sp, #80]
    9548:	cmp	w0, #0x1
    954c:	b.ne	95ec <mpc_div_2ui@@Base+0x3fc>  // b.any
    9550:	ldr	x1, [sp, #24]
    9554:	ldr	x0, [sp, #24]
    9558:	add	x2, x0, #0x20
    955c:	add	x0, sp, #0x30
    9560:	mov	w3, #0x0                   	// #0
    9564:	bl	4f50 <mpfr_add@plt>
    9568:	ldr	x1, [sp, #64]
    956c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9570:	cmp	x1, x0
    9574:	b.eq	9594 <mpc_div_2ui@@Base+0x3a4>  // b.none
    9578:	ldr	w0, [sp, #56]
    957c:	cmp	w0, #0x0
    9580:	b.ge	958c <mpc_div_2ui@@Base+0x39c>  // b.tcont
    9584:	mov	w0, #0xffffffff            	// #-1
    9588:	b	9598 <mpc_div_2ui@@Base+0x3a8>
    958c:	mov	w0, #0x1                   	// #1
    9590:	b	9598 <mpc_div_2ui@@Base+0x3a8>
    9594:	mov	w0, #0x0                   	// #0
    9598:	str	w0, [sp, #92]
    959c:	ldr	x1, [sp, #24]
    95a0:	ldr	x0, [sp, #24]
    95a4:	add	x2, x0, #0x20
    95a8:	add	x0, sp, #0x30
    95ac:	mov	w3, #0x0                   	// #0
    95b0:	bl	4b30 <mpfr_sub@plt>
    95b4:	ldr	x1, [sp, #64]
    95b8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    95bc:	cmp	x1, x0
    95c0:	b.eq	95e0 <mpc_div_2ui@@Base+0x3f0>  // b.none
    95c4:	ldr	w0, [sp, #56]
    95c8:	cmp	w0, #0x0
    95cc:	b.ge	95d8 <mpc_div_2ui@@Base+0x3e8>  // b.tcont
    95d0:	mov	w0, #0xffffffff            	// #-1
    95d4:	b	95e4 <mpc_div_2ui@@Base+0x3f4>
    95d8:	mov	w0, #0x1                   	// #1
    95dc:	b	95e4 <mpc_div_2ui@@Base+0x3f4>
    95e0:	mov	w0, #0x0                   	// #0
    95e4:	str	w0, [sp, #88]
    95e8:	b	97c8 <mpc_div_2ui@@Base+0x5d8>
    95ec:	ldr	x1, [sp, #24]
    95f0:	ldr	x0, [sp, #24]
    95f4:	add	x2, x0, #0x20
    95f8:	add	x0, sp, #0x30
    95fc:	mov	w3, #0x0                   	// #0
    9600:	bl	4b30 <mpfr_sub@plt>
    9604:	ldr	x1, [sp, #64]
    9608:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    960c:	cmp	x1, x0
    9610:	b.eq	9630 <mpc_div_2ui@@Base+0x440>  // b.none
    9614:	ldr	w0, [sp, #56]
    9618:	cmp	w0, #0x0
    961c:	b.ge	9628 <mpc_div_2ui@@Base+0x438>  // b.tcont
    9620:	mov	w0, #0xffffffff            	// #-1
    9624:	b	9634 <mpc_div_2ui@@Base+0x444>
    9628:	mov	w0, #0x1                   	// #1
    962c:	b	9634 <mpc_div_2ui@@Base+0x444>
    9630:	mov	w0, #0x0                   	// #0
    9634:	str	w0, [sp, #92]
    9638:	ldr	x1, [sp, #24]
    963c:	ldr	x0, [sp, #24]
    9640:	add	x2, x0, #0x20
    9644:	add	x0, sp, #0x30
    9648:	mov	w3, #0x0                   	// #0
    964c:	bl	4f50 <mpfr_add@plt>
    9650:	ldr	x1, [sp, #64]
    9654:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9658:	cmp	x1, x0
    965c:	b.eq	967c <mpc_div_2ui@@Base+0x48c>  // b.none
    9660:	ldr	w0, [sp, #56]
    9664:	cmp	w0, #0x0
    9668:	b.ge	9674 <mpc_div_2ui@@Base+0x484>  // b.tcont
    966c:	mov	w0, #0x1                   	// #1
    9670:	b	9680 <mpc_div_2ui@@Base+0x490>
    9674:	mov	w0, #0xffffffff            	// #-1
    9678:	b	9680 <mpc_div_2ui@@Base+0x490>
    967c:	mov	w0, #0x0                   	// #0
    9680:	str	w0, [sp, #88]
    9684:	b	97c8 <mpc_div_2ui@@Base+0x5d8>
    9688:	ldr	w0, [sp, #80]
    968c:	cmp	w0, #0x1
    9690:	b.ne	9730 <mpc_div_2ui@@Base+0x540>  // b.any
    9694:	ldr	x0, [sp, #24]
    9698:	add	x1, x0, #0x20
    969c:	ldr	x2, [sp, #24]
    96a0:	add	x0, sp, #0x30
    96a4:	mov	w3, #0x0                   	// #0
    96a8:	bl	4b30 <mpfr_sub@plt>
    96ac:	ldr	x1, [sp, #64]
    96b0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    96b4:	cmp	x1, x0
    96b8:	b.eq	96d8 <mpc_div_2ui@@Base+0x4e8>  // b.none
    96bc:	ldr	w0, [sp, #56]
    96c0:	cmp	w0, #0x0
    96c4:	b.ge	96d0 <mpc_div_2ui@@Base+0x4e0>  // b.tcont
    96c8:	mov	w0, #0xffffffff            	// #-1
    96cc:	b	96dc <mpc_div_2ui@@Base+0x4ec>
    96d0:	mov	w0, #0x1                   	// #1
    96d4:	b	96dc <mpc_div_2ui@@Base+0x4ec>
    96d8:	mov	w0, #0x0                   	// #0
    96dc:	str	w0, [sp, #92]
    96e0:	ldr	x1, [sp, #24]
    96e4:	ldr	x0, [sp, #24]
    96e8:	add	x2, x0, #0x20
    96ec:	add	x0, sp, #0x30
    96f0:	mov	w3, #0x0                   	// #0
    96f4:	bl	4f50 <mpfr_add@plt>
    96f8:	ldr	x1, [sp, #64]
    96fc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9700:	cmp	x1, x0
    9704:	b.eq	9724 <mpc_div_2ui@@Base+0x534>  // b.none
    9708:	ldr	w0, [sp, #56]
    970c:	cmp	w0, #0x0
    9710:	b.ge	971c <mpc_div_2ui@@Base+0x52c>  // b.tcont
    9714:	mov	w0, #0xffffffff            	// #-1
    9718:	b	9728 <mpc_div_2ui@@Base+0x538>
    971c:	mov	w0, #0x1                   	// #1
    9720:	b	9728 <mpc_div_2ui@@Base+0x538>
    9724:	mov	w0, #0x0                   	// #0
    9728:	str	w0, [sp, #88]
    972c:	b	97c8 <mpc_div_2ui@@Base+0x5d8>
    9730:	ldr	x1, [sp, #24]
    9734:	ldr	x0, [sp, #24]
    9738:	add	x2, x0, #0x20
    973c:	add	x0, sp, #0x30
    9740:	mov	w3, #0x0                   	// #0
    9744:	bl	4f50 <mpfr_add@plt>
    9748:	ldr	x1, [sp, #64]
    974c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9750:	cmp	x1, x0
    9754:	b.eq	9774 <mpc_div_2ui@@Base+0x584>  // b.none
    9758:	ldr	w0, [sp, #56]
    975c:	cmp	w0, #0x0
    9760:	b.ge	976c <mpc_div_2ui@@Base+0x57c>  // b.tcont
    9764:	mov	w0, #0x1                   	// #1
    9768:	b	9778 <mpc_div_2ui@@Base+0x588>
    976c:	mov	w0, #0xffffffff            	// #-1
    9770:	b	9778 <mpc_div_2ui@@Base+0x588>
    9774:	mov	w0, #0x0                   	// #0
    9778:	str	w0, [sp, #92]
    977c:	ldr	x0, [sp, #24]
    9780:	add	x1, x0, #0x20
    9784:	ldr	x2, [sp, #24]
    9788:	add	x0, sp, #0x30
    978c:	mov	w3, #0x0                   	// #0
    9790:	bl	4b30 <mpfr_sub@plt>
    9794:	ldr	x1, [sp, #64]
    9798:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    979c:	cmp	x1, x0
    97a0:	b.eq	97c0 <mpc_div_2ui@@Base+0x5d0>  // b.none
    97a4:	ldr	w0, [sp, #56]
    97a8:	cmp	w0, #0x0
    97ac:	b.ge	97b8 <mpc_div_2ui@@Base+0x5c8>  // b.tcont
    97b0:	mov	w0, #0xffffffff            	// #-1
    97b4:	b	97c4 <mpc_div_2ui@@Base+0x5d4>
    97b8:	mov	w0, #0x1                   	// #1
    97bc:	b	97c4 <mpc_div_2ui@@Base+0x5d4>
    97c0:	mov	w0, #0x0                   	// #0
    97c4:	str	w0, [sp, #88]
    97c8:	add	x0, sp, #0x30
    97cc:	bl	4e30 <mpfr_clear@plt>
    97d0:	ldr	w0, [sp, #92]
    97d4:	cmp	w0, #0x0
    97d8:	b.ne	97e8 <mpc_div_2ui@@Base+0x5f8>  // b.any
    97dc:	ldr	x0, [sp, #40]
    97e0:	bl	4b10 <mpfr_set_nan@plt>
    97e4:	b	97f4 <mpc_div_2ui@@Base+0x604>
    97e8:	ldr	x0, [sp, #40]
    97ec:	ldr	w1, [sp, #92]
    97f0:	bl	5220 <mpfr_set_inf@plt>
    97f4:	ldr	w0, [sp, #88]
    97f8:	cmp	w0, #0x0
    97fc:	b.ne	9810 <mpc_div_2ui@@Base+0x620>  // b.any
    9800:	ldr	x0, [sp, #40]
    9804:	add	x0, x0, #0x20
    9808:	bl	4b10 <mpfr_set_nan@plt>
    980c:	b	9820 <mpc_div_2ui@@Base+0x630>
    9810:	ldr	x0, [sp, #40]
    9814:	add	x0, x0, #0x20
    9818:	ldr	w1, [sp, #88]
    981c:	bl	5220 <mpfr_set_inf@plt>
    9820:	mov	w0, #0x0                   	// #0
    9824:	ldp	x29, x30, [sp], #96
    9828:	ret
    982c:	stp	x29, x30, [sp, #-288]!
    9830:	mov	x29, sp
    9834:	str	x0, [sp, #40]
    9838:	str	x1, [sp, #32]
    983c:	str	x2, [sp, #24]
    9840:	add	x0, sp, #0xf8
    9844:	mov	x1, #0x2                   	// #2
    9848:	bl	5530 <mpfr_init2@plt>
    984c:	add	x0, sp, #0xd8
    9850:	mov	x1, #0x2                   	// #2
    9854:	bl	5530 <mpfr_init2@plt>
    9858:	add	x0, sp, #0x78
    985c:	mov	x1, #0x2                   	// #2
    9860:	bl	5530 <mpfr_init2@plt>
    9864:	add	x0, sp, #0x58
    9868:	mov	x1, #0x2                   	// #2
    986c:	bl	5530 <mpfr_init2@plt>
    9870:	add	x0, sp, #0x38
    9874:	mov	x1, #0x2                   	// #2
    9878:	bl	5530 <mpfr_init2@plt>
    987c:	add	x0, sp, #0x38
    9880:	str	x0, [sp, #280]
    9884:	ldr	x0, [sp, #280]
    9888:	mov	w1, #0x1                   	// #1
    988c:	str	w1, [x0, #8]
    9890:	ldr	x0, [sp, #280]
    9894:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    9898:	str	x1, [x0, #16]
    989c:	ldr	x0, [sp, #32]
    98a0:	ldr	x1, [x0]
    98a4:	add	x0, sp, #0xb8
    98a8:	bl	5530 <mpfr_init2@plt>
    98ac:	ldr	x0, [sp, #32]
    98b0:	ldr	x1, [x0, #32]
    98b4:	add	x0, sp, #0x98
    98b8:	bl	5530 <mpfr_init2@plt>
    98bc:	ldr	x0, [sp, #24]
    98c0:	ldr	x1, [x0, #16]
    98c4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    98c8:	cmp	x1, x0
    98cc:	cset	w0, eq  // eq = none
    98d0:	and	w0, w0, #0xff
    98d4:	and	x1, x0, #0xff
    98d8:	add	x0, sp, #0xf8
    98dc:	mov	w3, #0x0                   	// #0
    98e0:	mov	x2, #0x0                   	// #0
    98e4:	bl	5230 <mpfr_set_ui_2exp@plt>
    98e8:	ldr	x0, [sp, #24]
    98ec:	ldr	x1, [x0, #16]
    98f0:	mov	x0, #0x2                   	// #2
    98f4:	movk	x0, #0x8000, lsl #48
    98f8:	cmp	x1, x0
    98fc:	b.ne	9918 <mpc_div_2ui@@Base+0x728>  // b.any
    9900:	add	x1, sp, #0xf8
    9904:	add	x0, sp, #0xf8
    9908:	mov	w3, #0x1                   	// #1
    990c:	mov	w2, #0x0                   	// #0
    9910:	bl	52d0 <mpfr_set4@plt>
    9914:	b	9934 <mpc_div_2ui@@Base+0x744>
    9918:	ldr	x0, [sp, #24]
    991c:	ldr	w2, [x0, #8]
    9920:	add	x1, sp, #0xf8
    9924:	add	x0, sp, #0xf8
    9928:	mov	w3, w2
    992c:	mov	w2, #0x0                   	// #0
    9930:	bl	52d0 <mpfr_set4@plt>
    9934:	ldr	x0, [sp, #24]
    9938:	ldr	x1, [x0, #48]
    993c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    9940:	cmp	x1, x0
    9944:	cset	w0, eq  // eq = none
    9948:	and	w0, w0, #0xff
    994c:	and	x1, x0, #0xff
    9950:	add	x0, sp, #0xd8
    9954:	mov	w3, #0x0                   	// #0
    9958:	mov	x2, #0x0                   	// #0
    995c:	bl	5230 <mpfr_set_ui_2exp@plt>
    9960:	ldr	x0, [sp, #24]
    9964:	ldr	x1, [x0, #48]
    9968:	mov	x0, #0x2                   	// #2
    996c:	movk	x0, #0x8000, lsl #48
    9970:	cmp	x1, x0
    9974:	b.ne	9990 <mpc_div_2ui@@Base+0x7a0>  // b.any
    9978:	add	x1, sp, #0xd8
    997c:	add	x0, sp, #0xd8
    9980:	mov	w3, #0x1                   	// #1
    9984:	mov	w2, #0x0                   	// #0
    9988:	bl	52d0 <mpfr_set4@plt>
    998c:	b	99ac <mpc_div_2ui@@Base+0x7bc>
    9990:	ldr	x0, [sp, #24]
    9994:	ldr	w2, [x0, #40]
    9998:	add	x1, sp, #0xd8
    999c:	add	x0, sp, #0xd8
    99a0:	mov	w3, w2
    99a4:	mov	w2, #0x0                   	// #0
    99a8:	bl	52d0 <mpfr_set4@plt>
    99ac:	ldr	x1, [sp, #32]
    99b0:	add	x2, sp, #0xf8
    99b4:	add	x0, sp, #0xb8
    99b8:	mov	w3, #0x0                   	// #0
    99bc:	bl	4c40 <mpfr_mul@plt>
    99c0:	ldr	x0, [sp, #32]
    99c4:	add	x1, x0, #0x20
    99c8:	add	x2, sp, #0xd8
    99cc:	add	x0, sp, #0x98
    99d0:	mov	w3, #0x0                   	// #0
    99d4:	bl	4c40 <mpfr_mul@plt>
    99d8:	add	x2, sp, #0x98
    99dc:	add	x1, sp, #0xb8
    99e0:	add	x0, sp, #0x78
    99e4:	mov	w3, #0x0                   	// #0
    99e8:	bl	4f50 <mpfr_add@plt>
    99ec:	ldr	x0, [sp, #32]
    99f0:	add	x1, x0, #0x20
    99f4:	add	x2, sp, #0xf8
    99f8:	add	x0, sp, #0x98
    99fc:	mov	w3, #0x0                   	// #0
    9a00:	bl	4c40 <mpfr_mul@plt>
    9a04:	ldr	x1, [sp, #32]
    9a08:	add	x2, sp, #0xd8
    9a0c:	add	x0, sp, #0xb8
    9a10:	mov	w3, #0x0                   	// #0
    9a14:	bl	4c40 <mpfr_mul@plt>
    9a18:	add	x2, sp, #0xb8
    9a1c:	add	x1, sp, #0x98
    9a20:	add	x0, sp, #0x58
    9a24:	mov	w3, #0x0                   	// #0
    9a28:	bl	4b30 <mpfr_sub@plt>
    9a2c:	ldr	x1, [sp, #136]
    9a30:	mov	x0, #0x2                   	// #2
    9a34:	movk	x0, #0x8000, lsl #48
    9a38:	cmp	x1, x0
    9a3c:	b.ne	9a58 <mpc_div_2ui@@Base+0x868>  // b.any
    9a40:	ldr	x0, [sp, #40]
    9a44:	add	x1, sp, #0x38
    9a48:	mov	w3, #0x1                   	// #1
    9a4c:	mov	w2, #0x0                   	// #0
    9a50:	bl	52d0 <mpfr_set4@plt>
    9a54:	b	9a70 <mpc_div_2ui@@Base+0x880>
    9a58:	ldr	x0, [sp, #40]
    9a5c:	ldr	w2, [sp, #128]
    9a60:	add	x1, sp, #0x38
    9a64:	mov	w3, w2
    9a68:	mov	w2, #0x0                   	// #0
    9a6c:	bl	52d0 <mpfr_set4@plt>
    9a70:	ldr	x1, [sp, #104]
    9a74:	mov	x0, #0x2                   	// #2
    9a78:	movk	x0, #0x8000, lsl #48
    9a7c:	cmp	x1, x0
    9a80:	b.ne	9aa0 <mpc_div_2ui@@Base+0x8b0>  // b.any
    9a84:	ldr	x0, [sp, #40]
    9a88:	add	x0, x0, #0x20
    9a8c:	add	x1, sp, #0x38
    9a90:	mov	w3, #0x1                   	// #1
    9a94:	mov	w2, #0x0                   	// #0
    9a98:	bl	52d0 <mpfr_set4@plt>
    9a9c:	b	9abc <mpc_div_2ui@@Base+0x8cc>
    9aa0:	ldr	x0, [sp, #40]
    9aa4:	add	x0, x0, #0x20
    9aa8:	ldr	w2, [sp, #96]
    9aac:	add	x1, sp, #0x38
    9ab0:	mov	w3, w2
    9ab4:	mov	w2, #0x0                   	// #0
    9ab8:	bl	52d0 <mpfr_set4@plt>
    9abc:	add	x0, sp, #0xf8
    9ac0:	bl	4e30 <mpfr_clear@plt>
    9ac4:	add	x0, sp, #0xd8
    9ac8:	bl	4e30 <mpfr_clear@plt>
    9acc:	add	x0, sp, #0x78
    9ad0:	bl	4e30 <mpfr_clear@plt>
    9ad4:	add	x0, sp, #0x58
    9ad8:	bl	4e30 <mpfr_clear@plt>
    9adc:	add	x0, sp, #0x38
    9ae0:	bl	4e30 <mpfr_clear@plt>
    9ae4:	add	x0, sp, #0xb8
    9ae8:	bl	4e30 <mpfr_clear@plt>
    9aec:	add	x0, sp, #0x98
    9af0:	bl	4e30 <mpfr_clear@plt>
    9af4:	mov	w0, #0x0                   	// #0
    9af8:	ldp	x29, x30, [sp], #288
    9afc:	ret
    9b00:	stp	x29, x30, [sp, #-80]!
    9b04:	mov	x29, sp
    9b08:	str	x0, [sp, #40]
    9b0c:	str	x1, [sp, #32]
    9b10:	str	x2, [sp, #24]
    9b14:	str	w3, [sp, #20]
    9b18:	ldr	x0, [sp, #32]
    9b1c:	ldr	w0, [x0, #8]
    9b20:	cmp	w0, #0x0
    9b24:	b.ge	9b30 <mpc_div_2ui@@Base+0x940>  // b.tcont
    9b28:	mov	w0, #0xffffffff            	// #-1
    9b2c:	b	9b34 <mpc_div_2ui@@Base+0x944>
    9b30:	mov	w0, #0x1                   	// #1
    9b34:	str	w0, [sp, #76]
    9b38:	ldr	x0, [sp, #32]
    9b3c:	ldr	w0, [x0, #40]
    9b40:	cmp	w0, #0x0
    9b44:	b.ge	9b50 <mpc_div_2ui@@Base+0x960>  // b.tcont
    9b48:	mov	w0, #0xffffffff            	// #-1
    9b4c:	b	9b54 <mpc_div_2ui@@Base+0x964>
    9b50:	mov	w0, #0x1                   	// #1
    9b54:	str	w0, [sp, #72]
    9b58:	ldr	x0, [sp, #24]
    9b5c:	ldr	w0, [x0, #8]
    9b60:	cmp	w0, #0x0
    9b64:	b.ge	9b70 <mpc_div_2ui@@Base+0x980>  // b.tcont
    9b68:	mov	w0, #0xffffffff            	// #-1
    9b6c:	b	9b74 <mpc_div_2ui@@Base+0x984>
    9b70:	mov	w0, #0x1                   	// #1
    9b74:	str	w0, [sp, #68]
    9b78:	ldr	x0, [sp, #24]
    9b7c:	ldr	w0, [x0, #40]
    9b80:	cmp	w0, #0x0
    9b84:	b.ge	9b90 <mpc_div_2ui@@Base+0x9a0>  // b.tcont
    9b88:	mov	w0, #0xffffffff            	// #-1
    9b8c:	b	9b94 <mpc_div_2ui@@Base+0x9a4>
    9b90:	mov	w0, #0x1                   	// #1
    9b94:	str	w0, [sp, #64]
    9b98:	ldr	x0, [sp, #40]
    9b9c:	add	x4, x0, #0x20
    9ba0:	ldr	x0, [sp, #32]
    9ba4:	add	x1, x0, #0x20
    9ba8:	ldr	x2, [sp, #24]
    9bac:	ldr	w0, [sp, #20]
    9bb0:	asr	w0, w0, #4
    9bb4:	mov	w3, w0
    9bb8:	mov	x0, x4
    9bbc:	bl	5250 <mpfr_div@plt>
    9bc0:	str	w0, [sp, #60]
    9bc4:	ldr	x4, [sp, #40]
    9bc8:	ldr	x1, [sp, #32]
    9bcc:	ldr	x2, [sp, #24]
    9bd0:	ldr	w0, [sp, #20]
    9bd4:	and	w0, w0, #0xf
    9bd8:	mov	w3, w0
    9bdc:	mov	x0, x4
    9be0:	bl	5250 <mpfr_div@plt>
    9be4:	str	w0, [sp, #56]
    9be8:	ldr	x0, [sp, #40]
    9bec:	ldr	x1, [x0, #16]
    9bf0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9bf4:	cmp	x1, x0
    9bf8:	b.ne	9c44 <mpc_div_2ui@@Base+0xa54>  // b.any
    9bfc:	ldr	x4, [sp, #40]
    9c00:	ldr	x5, [sp, #40]
    9c04:	ldr	w1, [sp, #76]
    9c08:	ldr	w0, [sp, #68]
    9c0c:	cmp	w1, w0
    9c10:	b.eq	9c2c <mpc_div_2ui@@Base+0xa3c>  // b.none
    9c14:	ldr	w1, [sp, #72]
    9c18:	ldr	w0, [sp, #64]
    9c1c:	cmp	w1, w0
    9c20:	b.eq	9c2c <mpc_div_2ui@@Base+0xa3c>  // b.none
    9c24:	mov	w0, #0xffffffff            	// #-1
    9c28:	b	9c30 <mpc_div_2ui@@Base+0xa40>
    9c2c:	mov	w0, #0x1                   	// #1
    9c30:	mov	w3, w0
    9c34:	mov	w2, #0x0                   	// #0
    9c38:	mov	x1, x5
    9c3c:	mov	x0, x4
    9c40:	bl	52d0 <mpfr_set4@plt>
    9c44:	ldr	x0, [sp, #40]
    9c48:	ldr	x1, [x0, #48]
    9c4c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9c50:	cmp	x1, x0
    9c54:	b.ne	9ca8 <mpc_div_2ui@@Base+0xab8>  // b.any
    9c58:	ldr	x0, [sp, #40]
    9c5c:	add	x4, x0, #0x20
    9c60:	ldr	x0, [sp, #40]
    9c64:	add	x5, x0, #0x20
    9c68:	ldr	w1, [sp, #72]
    9c6c:	ldr	w0, [sp, #68]
    9c70:	cmp	w1, w0
    9c74:	b.eq	9c90 <mpc_div_2ui@@Base+0xaa0>  // b.none
    9c78:	ldr	w1, [sp, #76]
    9c7c:	ldr	w0, [sp, #64]
    9c80:	cmp	w1, w0
    9c84:	b.ne	9c90 <mpc_div_2ui@@Base+0xaa0>  // b.any
    9c88:	mov	w0, #0xffffffff            	// #-1
    9c8c:	b	9c94 <mpc_div_2ui@@Base+0xaa4>
    9c90:	mov	w0, #0x1                   	// #1
    9c94:	mov	w3, w0
    9c98:	mov	w2, #0x0                   	// #0
    9c9c:	mov	x1, x5
    9ca0:	mov	x0, x4
    9ca4:	bl	52d0 <mpfr_set4@plt>
    9ca8:	ldr	w0, [sp, #56]
    9cac:	cmp	w0, #0x0
    9cb0:	b.lt	9ccc <mpc_div_2ui@@Base+0xadc>  // b.tstop
    9cb4:	ldr	w0, [sp, #56]
    9cb8:	cmp	w0, #0x0
    9cbc:	cset	w0, ne  // ne = any
    9cc0:	and	w0, w0, #0xff
    9cc4:	mov	w1, w0
    9cc8:	b	9cd0 <mpc_div_2ui@@Base+0xae0>
    9ccc:	mov	w1, #0x2                   	// #2
    9cd0:	ldr	w0, [sp, #60]
    9cd4:	cmp	w0, #0x0
    9cd8:	b.lt	9cf8 <mpc_div_2ui@@Base+0xb08>  // b.tstop
    9cdc:	ldr	w0, [sp, #60]
    9ce0:	cmp	w0, #0x0
    9ce4:	b.eq	9cf0 <mpc_div_2ui@@Base+0xb00>  // b.none
    9ce8:	mov	w0, #0x4                   	// #4
    9cec:	b	9cfc <mpc_div_2ui@@Base+0xb0c>
    9cf0:	mov	w0, #0x0                   	// #0
    9cf4:	b	9cfc <mpc_div_2ui@@Base+0xb0c>
    9cf8:	mov	w0, #0x8                   	// #8
    9cfc:	orr	w0, w1, w0
    9d00:	ldp	x29, x30, [sp], #80
    9d04:	ret
    9d08:	stp	x29, x30, [sp, #-192]!
    9d0c:	mov	x29, sp
    9d10:	str	x0, [sp, #40]
    9d14:	str	x1, [sp, #32]
    9d18:	str	x2, [sp, #24]
    9d1c:	str	w3, [sp, #20]
    9d20:	ldr	x1, [sp, #40]
    9d24:	ldr	x0, [sp, #32]
    9d28:	cmp	x1, x0
    9d2c:	b.eq	9d40 <mpc_div_2ui@@Base+0xb50>  // b.none
    9d30:	ldr	x1, [sp, #40]
    9d34:	ldr	x0, [sp, #24]
    9d38:	cmp	x1, x0
    9d3c:	b.ne	9d48 <mpc_div_2ui@@Base+0xb58>  // b.any
    9d40:	mov	w0, #0x1                   	// #1
    9d44:	b	9d4c <mpc_div_2ui@@Base+0xb5c>
    9d48:	mov	w0, #0x0                   	// #0
    9d4c:	str	w0, [sp, #188]
    9d50:	ldr	x0, [sp, #32]
    9d54:	ldr	x1, [x0, #16]
    9d58:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9d5c:	cmp	x1, x0
    9d60:	cset	w0, eq  // eq = none
    9d64:	and	w0, w0, #0xff
    9d68:	str	w0, [sp, #184]
    9d6c:	ldr	w0, [sp, #188]
    9d70:	cmp	w0, #0x0
    9d74:	b.eq	9d80 <mpc_div_2ui@@Base+0xb90>  // b.none
    9d78:	add	x0, sp, #0x38
    9d7c:	b	9d84 <mpc_div_2ui@@Base+0xb94>
    9d80:	ldr	x0, [sp, #40]
    9d84:	str	x0, [sp, #176]
    9d88:	ldr	x0, [sp, #32]
    9d8c:	ldr	w0, [x0, #8]
    9d90:	cmp	w0, #0x0
    9d94:	b.ge	9da0 <mpc_div_2ui@@Base+0xbb0>  // b.tcont
    9d98:	mov	w0, #0xffffffff            	// #-1
    9d9c:	b	9da4 <mpc_div_2ui@@Base+0xbb4>
    9da0:	mov	w0, #0x1                   	// #1
    9da4:	str	w0, [sp, #172]
    9da8:	ldr	x0, [sp, #32]
    9dac:	ldr	w0, [x0, #40]
    9db0:	cmp	w0, #0x0
    9db4:	b.ge	9dc0 <mpc_div_2ui@@Base+0xbd0>  // b.tcont
    9db8:	mov	w0, #0xffffffff            	// #-1
    9dbc:	b	9dc4 <mpc_div_2ui@@Base+0xbd4>
    9dc0:	mov	w0, #0x1                   	// #1
    9dc4:	str	w0, [sp, #168]
    9dc8:	ldr	x0, [sp, #24]
    9dcc:	ldr	w0, [x0, #8]
    9dd0:	cmp	w0, #0x0
    9dd4:	b.ge	9de0 <mpc_div_2ui@@Base+0xbf0>  // b.tcont
    9dd8:	mov	w0, #0xffffffff            	// #-1
    9ddc:	b	9de4 <mpc_div_2ui@@Base+0xbf4>
    9de0:	mov	w0, #0x1                   	// #1
    9de4:	str	w0, [sp, #164]
    9de8:	ldr	x0, [sp, #24]
    9dec:	ldr	w0, [x0, #40]
    9df0:	cmp	w0, #0x0
    9df4:	b.ge	9e00 <mpc_div_2ui@@Base+0xc10>  // b.tcont
    9df8:	mov	w0, #0xffffffff            	// #-1
    9dfc:	b	9e04 <mpc_div_2ui@@Base+0xc14>
    9e00:	mov	w0, #0x1                   	// #1
    9e04:	str	w0, [sp, #160]
    9e08:	ldr	w0, [sp, #188]
    9e0c:	cmp	w0, #0x0
    9e10:	b.eq	9e2c <mpc_div_2ui@@Base+0xc3c>  // b.none
    9e14:	ldr	x0, [sp, #40]
    9e18:	ldr	x1, [x0]
    9e1c:	ldr	x0, [sp, #40]
    9e20:	ldr	x2, [x0, #32]
    9e24:	add	x0, sp, #0x38
    9e28:	bl	54c0 <mpc_init3@plt>
    9e2c:	ldr	x0, [sp, #24]
    9e30:	add	x0, x0, #0x20
    9e34:	add	x2, sp, #0x78
    9e38:	mov	x3, x0
    9e3c:	ldp	x0, x1, [x3]
    9e40:	stp	x0, x1, [x2]
    9e44:	ldp	x0, x1, [x3, #16]
    9e48:	stp	x0, x1, [x2, #16]
    9e4c:	ldr	x4, [sp, #176]
    9e50:	ldr	x0, [sp, #32]
    9e54:	add	x1, x0, #0x20
    9e58:	ldr	w0, [sp, #20]
    9e5c:	and	w2, w0, #0xf
    9e60:	add	x0, sp, #0x78
    9e64:	mov	w3, w2
    9e68:	mov	x2, x0
    9e6c:	mov	x0, x4
    9e70:	bl	5250 <mpfr_div@plt>
    9e74:	str	w0, [sp, #156]
    9e78:	add	x1, sp, #0x78
    9e7c:	add	x0, sp, #0x78
    9e80:	mov	w2, #0x0                   	// #0
    9e84:	bl	4c50 <mpfr_neg@plt>
    9e88:	ldr	x0, [sp, #176]
    9e8c:	add	x4, x0, #0x20
    9e90:	ldr	x1, [sp, #32]
    9e94:	ldr	w0, [sp, #20]
    9e98:	asr	w2, w0, #4
    9e9c:	add	x0, sp, #0x78
    9ea0:	mov	w3, w2
    9ea4:	mov	x2, x0
    9ea8:	mov	x0, x4
    9eac:	bl	5250 <mpfr_div@plt>
    9eb0:	str	w0, [sp, #152]
    9eb4:	ldr	w0, [sp, #188]
    9eb8:	cmp	w0, #0x0
    9ebc:	b.eq	9edc <mpc_div_2ui@@Base+0xcec>  // b.none
    9ec0:	add	x0, sp, #0x38
    9ec4:	mov	w2, #0x0                   	// #0
    9ec8:	mov	x1, x0
    9ecc:	ldr	x0, [sp, #40]
    9ed0:	bl	5680 <mpc_set@plt>
    9ed4:	add	x0, sp, #0x38
    9ed8:	bl	4ae0 <mpc_clear@plt>
    9edc:	ldr	x0, [sp, #40]
    9ee0:	ldr	x1, [x0, #16]
    9ee4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    9ee8:	cmp	x1, x0
    9eec:	b.ne	9f38 <mpc_div_2ui@@Base+0xd48>  // b.any
    9ef0:	ldr	x4, [sp, #40]
    9ef4:	ldr	x5, [sp, #40]
    9ef8:	ldr	w1, [sp, #172]
    9efc:	ldr	w0, [sp, #164]
    9f00:	cmp	w1, w0
    9f04:	b.eq	9f20 <mpc_div_2ui@@Base+0xd30>  // b.none
    9f08:	ldr	w1, [sp, #168]
    9f0c:	ldr	w0, [sp, #160]
    9f10:	cmp	w1, w0
    9f14:	b.eq	9f20 <mpc_div_2ui@@Base+0xd30>  // b.none
    9f18:	mov	w0, #0xffffffff            	// #-1
    9f1c:	b	9f24 <mpc_div_2ui@@Base+0xd34>
    9f20:	mov	w0, #0x1                   	// #1
    9f24:	mov	w3, w0
    9f28:	mov	w2, #0x0                   	// #0
    9f2c:	mov	x1, x5
    9f30:	mov	x0, x4
    9f34:	bl	52d0 <mpfr_set4@plt>
    9f38:	ldr	w0, [sp, #184]
    9f3c:	cmp	w0, #0x0
    9f40:	b.eq	9f94 <mpc_div_2ui@@Base+0xda4>  // b.none
    9f44:	ldr	x0, [sp, #40]
    9f48:	add	x4, x0, #0x20
    9f4c:	ldr	x0, [sp, #40]
    9f50:	add	x5, x0, #0x20
    9f54:	ldr	w1, [sp, #168]
    9f58:	ldr	w0, [sp, #164]
    9f5c:	cmp	w1, w0
    9f60:	b.eq	9f7c <mpc_div_2ui@@Base+0xd8c>  // b.none
    9f64:	ldr	w1, [sp, #172]
    9f68:	ldr	w0, [sp, #160]
    9f6c:	cmp	w1, w0
    9f70:	b.ne	9f7c <mpc_div_2ui@@Base+0xd8c>  // b.any
    9f74:	mov	w0, #0xffffffff            	// #-1
    9f78:	b	9f80 <mpc_div_2ui@@Base+0xd90>
    9f7c:	mov	w0, #0x1                   	// #1
    9f80:	mov	w3, w0
    9f84:	mov	w2, #0x0                   	// #0
    9f88:	mov	x1, x5
    9f8c:	mov	x0, x4
    9f90:	bl	52d0 <mpfr_set4@plt>
    9f94:	ldr	w0, [sp, #156]
    9f98:	cmp	w0, #0x0
    9f9c:	b.lt	9fb8 <mpc_div_2ui@@Base+0xdc8>  // b.tstop
    9fa0:	ldr	w0, [sp, #156]
    9fa4:	cmp	w0, #0x0
    9fa8:	cset	w0, ne  // ne = any
    9fac:	and	w0, w0, #0xff
    9fb0:	mov	w1, w0
    9fb4:	b	9fbc <mpc_div_2ui@@Base+0xdcc>
    9fb8:	mov	w1, #0x2                   	// #2
    9fbc:	ldr	w0, [sp, #152]
    9fc0:	cmp	w0, #0x0
    9fc4:	b.lt	9fe4 <mpc_div_2ui@@Base+0xdf4>  // b.tstop
    9fc8:	ldr	w0, [sp, #152]
    9fcc:	cmp	w0, #0x0
    9fd0:	b.eq	9fdc <mpc_div_2ui@@Base+0xdec>  // b.none
    9fd4:	mov	w0, #0x4                   	// #4
    9fd8:	b	9fe8 <mpc_div_2ui@@Base+0xdf8>
    9fdc:	mov	w0, #0x0                   	// #0
    9fe0:	b	9fe8 <mpc_div_2ui@@Base+0xdf8>
    9fe4:	mov	w0, #0x8                   	// #8
    9fe8:	orr	w0, w1, w0
    9fec:	ldp	x29, x30, [sp], #192
    9ff0:	ret

0000000000009ff4 <mpc_div@@Base>:
    9ff4:	stp	x29, x30, [sp, #-336]!
    9ff8:	mov	x29, sp
    9ffc:	str	x19, [sp, #16]
    a000:	str	x0, [sp, #56]
    a004:	str	x1, [sp, #48]
    a008:	str	x2, [sp, #40]
    a00c:	str	w3, [sp, #36]
    a010:	str	wzr, [sp, #332]
    a014:	str	wzr, [sp, #328]
    a018:	str	wzr, [sp, #308]
    a01c:	str	wzr, [sp, #304]
    a020:	str	wzr, [sp, #300]
    a024:	str	wzr, [sp, #296]
    a028:	str	wzr, [sp, #292]
    a02c:	ldr	w0, [sp, #36]
    a030:	and	w0, w0, #0xf
    a034:	str	w0, [sp, #284]
    a038:	ldr	w0, [sp, #36]
    a03c:	asr	w0, w0, #4
    a040:	str	w0, [sp, #280]
    a044:	ldr	x0, [sp, #40]
    a048:	ldr	x1, [x0, #16]
    a04c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a050:	cmp	x1, x0
    a054:	b.ne	a084 <mpc_div@@Base+0x90>  // b.any
    a058:	ldr	x0, [sp, #40]
    a05c:	ldr	x1, [x0, #48]
    a060:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a064:	cmp	x1, x0
    a068:	b.ne	a084 <mpc_div@@Base+0x90>  // b.any
    a06c:	ldr	w3, [sp, #36]
    a070:	ldr	x2, [sp, #40]
    a074:	ldr	x1, [sp, #48]
    a078:	ldr	x0, [sp, #56]
    a07c:	bl	92b8 <mpc_div_2ui@@Base+0xc8>
    a080:	b	ac8c <mpc_div@@Base+0xc98>
    a084:	ldr	x0, [sp, #48]
    a088:	ldr	x1, [x0, #16]
    a08c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a090:	cmp	x1, x0
    a094:	b.eq	a0ac <mpc_div@@Base+0xb8>  // b.none
    a098:	ldr	x0, [sp, #48]
    a09c:	ldr	x1, [x0, #48]
    a0a0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a0a4:	cmp	x1, x0
    a0a8:	b.ne	a0e4 <mpc_div@@Base+0xf0>  // b.any
    a0ac:	ldr	x0, [sp, #40]
    a0b0:	bl	55c0 <mpfr_number_p@plt>
    a0b4:	cmp	w0, #0x0
    a0b8:	b.eq	a0e4 <mpc_div@@Base+0xf0>  // b.none
    a0bc:	ldr	x0, [sp, #40]
    a0c0:	add	x0, x0, #0x20
    a0c4:	bl	55c0 <mpfr_number_p@plt>
    a0c8:	cmp	w0, #0x0
    a0cc:	b.eq	a0e4 <mpc_div@@Base+0xf0>  // b.none
    a0d0:	ldr	x2, [sp, #40]
    a0d4:	ldr	x1, [sp, #48]
    a0d8:	ldr	x0, [sp, #56]
    a0dc:	bl	9374 <mpc_div_2ui@@Base+0x184>
    a0e0:	b	ac8c <mpc_div@@Base+0xc98>
    a0e4:	ldr	x0, [sp, #48]
    a0e8:	bl	55c0 <mpfr_number_p@plt>
    a0ec:	cmp	w0, #0x0
    a0f0:	b.eq	a144 <mpc_div@@Base+0x150>  // b.none
    a0f4:	ldr	x0, [sp, #48]
    a0f8:	add	x0, x0, #0x20
    a0fc:	bl	55c0 <mpfr_number_p@plt>
    a100:	cmp	w0, #0x0
    a104:	b.eq	a144 <mpc_div@@Base+0x150>  // b.none
    a108:	ldr	x0, [sp, #40]
    a10c:	ldr	x1, [x0, #16]
    a110:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a114:	cmp	x1, x0
    a118:	b.eq	a130 <mpc_div@@Base+0x13c>  // b.none
    a11c:	ldr	x0, [sp, #40]
    a120:	ldr	x1, [x0, #48]
    a124:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a128:	cmp	x1, x0
    a12c:	b.ne	a144 <mpc_div@@Base+0x150>  // b.any
    a130:	ldr	x2, [sp, #40]
    a134:	ldr	x1, [sp, #48]
    a138:	ldr	x0, [sp, #56]
    a13c:	bl	982c <mpc_div_2ui@@Base+0x63c>
    a140:	b	ac8c <mpc_div@@Base+0xc98>
    a144:	ldr	x0, [sp, #48]
    a148:	bl	55c0 <mpfr_number_p@plt>
    a14c:	cmp	w0, #0x0
    a150:	b.eq	a18c <mpc_div@@Base+0x198>  // b.none
    a154:	ldr	x0, [sp, #48]
    a158:	add	x0, x0, #0x20
    a15c:	bl	55c0 <mpfr_number_p@plt>
    a160:	cmp	w0, #0x0
    a164:	b.eq	a18c <mpc_div@@Base+0x198>  // b.none
    a168:	ldr	x0, [sp, #40]
    a16c:	bl	55c0 <mpfr_number_p@plt>
    a170:	cmp	w0, #0x0
    a174:	b.eq	a18c <mpc_div@@Base+0x198>  // b.none
    a178:	ldr	x0, [sp, #40]
    a17c:	add	x0, x0, #0x20
    a180:	bl	55c0 <mpfr_number_p@plt>
    a184:	cmp	w0, #0x0
    a188:	b.ne	a19c <mpc_div@@Base+0x1a8>  // b.any
    a18c:	ldr	x0, [sp, #56]
    a190:	bl	4ff0 <mpc_set_nan@plt>
    a194:	mov	w0, #0x0                   	// #0
    a198:	b	ac8c <mpc_div@@Base+0xc98>
    a19c:	ldr	x0, [sp, #40]
    a1a0:	ldr	x1, [x0, #48]
    a1a4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a1a8:	cmp	x1, x0
    a1ac:	b.ne	a1c8 <mpc_div@@Base+0x1d4>  // b.any
    a1b0:	ldr	w3, [sp, #36]
    a1b4:	ldr	x2, [sp, #40]
    a1b8:	ldr	x1, [sp, #48]
    a1bc:	ldr	x0, [sp, #56]
    a1c0:	bl	9b00 <mpc_div_2ui@@Base+0x910>
    a1c4:	b	ac8c <mpc_div@@Base+0xc98>
    a1c8:	ldr	x0, [sp, #40]
    a1cc:	ldr	x1, [x0, #16]
    a1d0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a1d4:	cmp	x1, x0
    a1d8:	b.ne	a1f4 <mpc_div@@Base+0x200>  // b.any
    a1dc:	ldr	w3, [sp, #36]
    a1e0:	ldr	x2, [sp, #40]
    a1e4:	ldr	x1, [sp, #48]
    a1e8:	ldr	x0, [sp, #56]
    a1ec:	bl	9d08 <mpc_div_2ui@@Base+0xb18>
    a1f0:	b	ac8c <mpc_div@@Base+0xc98>
    a1f4:	ldr	x0, [sp, #56]
    a1f8:	ldr	x1, [x0, #32]
    a1fc:	ldr	x0, [sp, #56]
    a200:	ldr	x0, [x0]
    a204:	cmp	x1, x0
    a208:	csel	x0, x1, x0, ge  // ge = tcont
    a20c:	str	x0, [sp, #320]
    a210:	add	x0, sp, #0xa0
    a214:	mov	x1, #0x2                   	// #2
    a218:	bl	4db0 <mpc_init2@plt>
    a21c:	add	x0, sp, #0x40
    a220:	bl	4b70 <mpfr_init@plt>
    a224:	ldr	x0, [sp, #40]
    a228:	add	x2, sp, #0x60
    a22c:	mov	x3, x0
    a230:	ldp	x0, x1, [x3]
    a234:	stp	x0, x1, [x2]
    a238:	ldp	x0, x1, [x3, #16]
    a23c:	stp	x0, x1, [x2, #16]
    a240:	ldr	x0, [sp, #40]
    a244:	add	x0, x0, #0x20
    a248:	add	x2, sp, #0x80
    a24c:	mov	x3, x0
    a250:	ldp	x0, x1, [x3]
    a254:	stp	x0, x1, [x2]
    a258:	ldp	x0, x1, [x3, #16]
    a25c:	stp	x0, x1, [x2, #16]
    a260:	add	x0, sp, #0x60
    a264:	add	x1, x0, #0x20
    a268:	add	x0, sp, #0x60
    a26c:	add	x0, x0, #0x20
    a270:	mov	w2, #0x0                   	// #0
    a274:	bl	4c50 <mpfr_neg@plt>
    a278:	bl	53f0 <mpfr_underflow_p@plt>
    a27c:	str	w0, [sp, #276]
    a280:	bl	55d0 <mpfr_overflow_p@plt>
    a284:	str	w0, [sp, #272]
    a288:	ldr	w0, [sp, #308]
    a28c:	add	w0, w0, #0x1
    a290:	str	w0, [sp, #308]
    a294:	ldr	w0, [sp, #308]
    a298:	cmp	w0, #0x2
    a29c:	b.gt	a2b0 <mpc_div@@Base+0x2bc>
    a2a0:	ldr	x0, [sp, #320]
    a2a4:	bl	4de0 <mpc_ceil_log2@plt>
    a2a8:	add	x0, x0, #0x5
    a2ac:	b	a2c0 <mpc_div@@Base+0x2cc>
    a2b0:	ldr	x0, [sp, #320]
    a2b4:	lsr	x1, x0, #63
    a2b8:	add	x0, x1, x0
    a2bc:	asr	x0, x0, #1
    a2c0:	ldr	x1, [sp, #320]
    a2c4:	add	x0, x1, x0
    a2c8:	str	x0, [sp, #320]
    a2cc:	add	x0, sp, #0xa0
    a2d0:	ldr	x1, [sp, #320]
    a2d4:	bl	4cd0 <mpc_set_prec@plt>
    a2d8:	add	x0, sp, #0x40
    a2dc:	ldr	x1, [sp, #320]
    a2e0:	bl	4d40 <mpfr_set_prec@plt>
    a2e4:	bl	4f00 <mpfr_clear_underflow@plt>
    a2e8:	bl	4b20 <mpfr_clear_overflow@plt>
    a2ec:	add	x0, sp, #0x40
    a2f0:	mov	w2, #0x2                   	// #2
    a2f4:	ldr	x1, [sp, #40]
    a2f8:	bl	4f90 <mpc_norm@plt>
    a2fc:	str	w0, [sp, #268]
    a300:	bl	53f0 <mpfr_underflow_p@plt>
    a304:	str	w0, [sp, #264]
    a308:	bl	55d0 <mpfr_overflow_p@plt>
    a30c:	str	w0, [sp, #260]
    a310:	ldr	w0, [sp, #264]
    a314:	cmp	w0, #0x0
    a318:	b.eq	a33c <mpc_div@@Base+0x348>  // b.none
    a31c:	add	x0, sp, #0x40
    a320:	str	x0, [sp, #248]
    a324:	ldr	x0, [sp, #248]
    a328:	mov	w1, #0x1                   	// #1
    a32c:	str	w1, [x0, #8]
    a330:	ldr	x0, [sp, #248]
    a334:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    a338:	str	x1, [x0, #16]
    a33c:	bl	4f00 <mpfr_clear_underflow@plt>
    a340:	bl	4b20 <mpfr_clear_overflow@plt>
    a344:	add	x1, sp, #0x60
    a348:	add	x0, sp, #0xa0
    a34c:	mov	w3, #0x11                  	// #17
    a350:	mov	x2, x1
    a354:	ldr	x1, [sp, #48]
    a358:	bl	4fd0 <mpc_mul@plt>
    a35c:	str	w0, [sp, #244]
    a360:	ldr	w0, [sp, #244]
    a364:	and	w0, w0, #0x3
    a368:	cmp	w0, #0x2
    a36c:	b.eq	a388 <mpc_div@@Base+0x394>  // b.none
    a370:	ldr	w0, [sp, #244]
    a374:	and	w0, w0, #0x3
    a378:	cmp	w0, #0x0
    a37c:	cset	w0, ne  // ne = any
    a380:	and	w0, w0, #0xff
    a384:	b	a38c <mpc_div@@Base+0x398>
    a388:	mov	w0, #0xffffffff            	// #-1
    a38c:	str	w0, [sp, #316]
    a390:	ldr	w0, [sp, #244]
    a394:	asr	w0, w0, #2
    a398:	cmp	w0, #0x2
    a39c:	b.eq	a3b8 <mpc_div@@Base+0x3c4>  // b.none
    a3a0:	ldr	w0, [sp, #244]
    a3a4:	asr	w0, w0, #2
    a3a8:	cmp	w0, #0x0
    a3ac:	cset	w0, ne  // ne = any
    a3b0:	and	w0, w0, #0xff
    a3b4:	b	a3bc <mpc_div@@Base+0x3c8>
    a3b8:	mov	w0, #0xffffffff            	// #-1
    a3bc:	str	w0, [sp, #312]
    a3c0:	bl	53f0 <mpfr_underflow_p@plt>
    a3c4:	str	w0, [sp, #240]
    a3c8:	bl	55d0 <mpfr_overflow_p@plt>
    a3cc:	str	w0, [sp, #236]
    a3d0:	ldr	w0, [sp, #236]
    a3d4:	cmp	w0, #0x0
    a3d8:	b.eq	a598 <mpc_div@@Base+0x5a4>  // b.none
    a3dc:	str	wzr, [sp, #288]
    a3e0:	ldr	x1, [sp, #176]
    a3e4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a3e8:	cmp	x1, x0
    a3ec:	b.ge	a410 <mpc_div@@Base+0x41c>  // b.tcont
    a3f0:	ldr	x1, [sp, #176]
    a3f4:	mov	x0, #0x2                   	// #2
    a3f8:	movk	x0, #0x8000, lsl #48
    a3fc:	cmp	x1, x0
    a400:	b.ne	a408 <mpc_div@@Base+0x414>  // b.any
    a404:	bl	4bd0 <mpfr_set_erangeflag@plt>
    a408:	mov	w0, #0x0                   	// #0
    a40c:	b	a414 <mpc_div@@Base+0x420>
    a410:	ldr	w0, [sp, #168]
    a414:	str	w0, [sp, #228]
    a418:	ldr	w0, [sp, #228]
    a41c:	cmp	w0, #0x0
    a420:	b.le	a450 <mpc_div@@Base+0x45c>
    a424:	add	x0, sp, #0xa0
    a428:	bl	4ee0 <mpfr_nextabove@plt>
    a42c:	ldr	x1, [sp, #176]
    a430:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a434:	cmp	x1, x0
    a438:	cset	w0, eq  // eq = none
    a43c:	and	w0, w0, #0xff
    a440:	str	w0, [sp, #288]
    a444:	add	x0, sp, #0xa0
    a448:	bl	4c80 <mpfr_nextbelow@plt>
    a44c:	b	a484 <mpc_div@@Base+0x490>
    a450:	ldr	w0, [sp, #228]
    a454:	cmp	w0, #0x0
    a458:	b.ge	a484 <mpc_div@@Base+0x490>  // b.tcont
    a45c:	add	x0, sp, #0xa0
    a460:	bl	4c80 <mpfr_nextbelow@plt>
    a464:	ldr	x1, [sp, #176]
    a468:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a46c:	cmp	x1, x0
    a470:	cset	w0, eq  // eq = none
    a474:	and	w0, w0, #0xff
    a478:	str	w0, [sp, #288]
    a47c:	add	x0, sp, #0xa0
    a480:	bl	4ee0 <mpfr_nextabove@plt>
    a484:	ldr	w0, [sp, #288]
    a488:	cmp	w0, #0x0
    a48c:	b.eq	a4a4 <mpc_div@@Base+0x4b0>  // b.none
    a490:	add	x0, sp, #0xa0
    a494:	ldr	w1, [sp, #228]
    a498:	bl	5220 <mpfr_set_inf@plt>
    a49c:	mov	w0, #0x1                   	// #1
    a4a0:	str	w0, [sp, #300]
    a4a4:	ldr	x1, [sp, #208]
    a4a8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a4ac:	cmp	x1, x0
    a4b0:	b.ge	a4d4 <mpc_div@@Base+0x4e0>  // b.tcont
    a4b4:	ldr	x1, [sp, #208]
    a4b8:	mov	x0, #0x2                   	// #2
    a4bc:	movk	x0, #0x8000, lsl #48
    a4c0:	cmp	x1, x0
    a4c4:	b.ne	a4cc <mpc_div@@Base+0x4d8>  // b.any
    a4c8:	bl	4bd0 <mpfr_set_erangeflag@plt>
    a4cc:	mov	w0, #0x0                   	// #0
    a4d0:	b	a4d8 <mpc_div@@Base+0x4e4>
    a4d4:	ldr	w0, [sp, #200]
    a4d8:	str	w0, [sp, #228]
    a4dc:	str	wzr, [sp, #288]
    a4e0:	ldr	w0, [sp, #228]
    a4e4:	cmp	w0, #0x0
    a4e8:	b.le	a520 <mpc_div@@Base+0x52c>
    a4ec:	add	x0, sp, #0xa0
    a4f0:	add	x0, x0, #0x20
    a4f4:	bl	4ee0 <mpfr_nextabove@plt>
    a4f8:	ldr	x1, [sp, #208]
    a4fc:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a500:	cmp	x1, x0
    a504:	cset	w0, eq  // eq = none
    a508:	and	w0, w0, #0xff
    a50c:	str	w0, [sp, #288]
    a510:	add	x0, sp, #0xa0
    a514:	add	x0, x0, #0x20
    a518:	bl	4c80 <mpfr_nextbelow@plt>
    a51c:	b	a55c <mpc_div@@Base+0x568>
    a520:	ldr	w0, [sp, #228]
    a524:	cmp	w0, #0x0
    a528:	b.ge	a55c <mpc_div@@Base+0x568>  // b.tcont
    a52c:	add	x0, sp, #0xa0
    a530:	add	x0, x0, #0x20
    a534:	bl	4c80 <mpfr_nextbelow@plt>
    a538:	ldr	x1, [sp, #208]
    a53c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    a540:	cmp	x1, x0
    a544:	cset	w0, eq  // eq = none
    a548:	and	w0, w0, #0xff
    a54c:	str	w0, [sp, #288]
    a550:	add	x0, sp, #0xa0
    a554:	add	x0, x0, #0x20
    a558:	bl	4ee0 <mpfr_nextabove@plt>
    a55c:	ldr	w0, [sp, #288]
    a560:	cmp	w0, #0x0
    a564:	b.eq	a580 <mpc_div@@Base+0x58c>  // b.none
    a568:	add	x0, sp, #0xa0
    a56c:	add	x0, x0, #0x20
    a570:	ldr	w1, [sp, #228]
    a574:	bl	5220 <mpfr_set_inf@plt>
    a578:	mov	w0, #0x1                   	// #1
    a57c:	str	w0, [sp, #292]
    a580:	add	x0, sp, #0xa0
    a584:	ldr	w2, [sp, #36]
    a588:	mov	x1, x0
    a58c:	ldr	x0, [sp, #56]
    a590:	bl	5680 <mpc_set@plt>
    a594:	b	aa04 <mpc_div@@Base+0xa10>
    a598:	ldr	w0, [sp, #268]
    a59c:	cmp	w0, #0x0
    a5a0:	b.ne	a748 <mpc_div@@Base+0x754>  // b.any
    a5a4:	ldr	w0, [sp, #316]
    a5a8:	cmp	w0, #0x0
    a5ac:	b.eq	a5bc <mpc_div@@Base+0x5c8>  // b.none
    a5b0:	ldr	w0, [sp, #312]
    a5b4:	cmp	w0, #0x0
    a5b8:	b.ne	a748 <mpc_div@@Base+0x754>  // b.any
    a5bc:	bl	4f00 <mpfr_clear_underflow@plt>
    a5c0:	bl	4b20 <mpfr_clear_overflow@plt>
    a5c4:	add	x2, sp, #0x40
    a5c8:	add	x1, sp, #0xa0
    a5cc:	add	x0, sp, #0xa0
    a5d0:	mov	w3, #0x1                   	// #1
    a5d4:	bl	5250 <mpfr_div@plt>
    a5d8:	mov	w1, w0
    a5dc:	ldr	w0, [sp, #316]
    a5e0:	orr	w0, w0, w1
    a5e4:	str	w0, [sp, #316]
    a5e8:	bl	53f0 <mpfr_underflow_p@plt>
    a5ec:	str	w0, [sp, #304]
    a5f0:	bl	55d0 <mpfr_overflow_p@plt>
    a5f4:	str	w0, [sp, #300]
    a5f8:	ldr	w0, [sp, #316]
    a5fc:	cmp	w0, #0x0
    a600:	b.eq	a664 <mpc_div@@Base+0x670>  // b.none
    a604:	ldr	w0, [sp, #304]
    a608:	cmp	w0, #0x0
    a60c:	b.ne	a664 <mpc_div@@Base+0x670>  // b.any
    a610:	ldr	w0, [sp, #300]
    a614:	cmp	w0, #0x0
    a618:	b.ne	a664 <mpc_div@@Base+0x670>  // b.any
    a61c:	ldr	x0, [sp, #320]
    a620:	sub	x5, x0, #0x4
    a624:	ldr	x0, [sp, #56]
    a628:	ldr	x1, [x0]
    a62c:	ldr	w0, [sp, #284]
    a630:	cmp	w0, #0x0
    a634:	cset	w0, eq  // eq = none
    a638:	and	w0, w0, #0xff
    a63c:	and	x0, x0, #0xff
    a640:	add	x1, x1, x0
    a644:	add	x0, sp, #0xa0
    a648:	mov	x4, x1
    a64c:	mov	w3, #0x1                   	// #1
    a650:	mov	w2, #0x0                   	// #0
    a654:	mov	x1, x5
    a658:	bl	5540 <mpfr_can_round@plt>
    a65c:	cmp	w0, #0x0
    a660:	b.eq	a66c <mpc_div@@Base+0x678>  // b.none
    a664:	mov	w0, #0x1                   	// #1
    a668:	b	a670 <mpc_div@@Base+0x67c>
    a66c:	mov	w0, #0x0                   	// #0
    a670:	str	w0, [sp, #332]
    a674:	ldr	w0, [sp, #332]
    a678:	cmp	w0, #0x0
    a67c:	b.eq	a944 <mpc_div@@Base+0x950>  // b.none
    a680:	bl	4f00 <mpfr_clear_underflow@plt>
    a684:	bl	4b20 <mpfr_clear_overflow@plt>
    a688:	add	x2, sp, #0x40
    a68c:	add	x0, sp, #0xa0
    a690:	add	x1, x0, #0x20
    a694:	add	x0, sp, #0xa0
    a698:	add	x0, x0, #0x20
    a69c:	mov	w3, #0x1                   	// #1
    a6a0:	bl	5250 <mpfr_div@plt>
    a6a4:	mov	w1, w0
    a6a8:	ldr	w0, [sp, #312]
    a6ac:	orr	w0, w0, w1
    a6b0:	str	w0, [sp, #312]
    a6b4:	bl	53f0 <mpfr_underflow_p@plt>
    a6b8:	str	w0, [sp, #296]
    a6bc:	bl	55d0 <mpfr_overflow_p@plt>
    a6c0:	str	w0, [sp, #292]
    a6c4:	ldr	w0, [sp, #312]
    a6c8:	cmp	w0, #0x0
    a6cc:	b.eq	a734 <mpc_div@@Base+0x740>  // b.none
    a6d0:	ldr	w0, [sp, #296]
    a6d4:	cmp	w0, #0x0
    a6d8:	b.ne	a734 <mpc_div@@Base+0x740>  // b.any
    a6dc:	ldr	w0, [sp, #292]
    a6e0:	cmp	w0, #0x0
    a6e4:	b.ne	a734 <mpc_div@@Base+0x740>  // b.any
    a6e8:	ldr	x0, [sp, #320]
    a6ec:	sub	x5, x0, #0x4
    a6f0:	ldr	x0, [sp, #56]
    a6f4:	ldr	x1, [x0, #32]
    a6f8:	ldr	w0, [sp, #280]
    a6fc:	cmp	w0, #0x0
    a700:	cset	w0, eq  // eq = none
    a704:	and	w0, w0, #0xff
    a708:	and	x0, x0, #0xff
    a70c:	add	x1, x1, x0
    a710:	add	x0, sp, #0xa0
    a714:	add	x0, x0, #0x20
    a718:	mov	x4, x1
    a71c:	mov	w3, #0x1                   	// #1
    a720:	mov	w2, #0x0                   	// #0
    a724:	mov	x1, x5
    a728:	bl	5540 <mpfr_can_round@plt>
    a72c:	cmp	w0, #0x0
    a730:	b.eq	a73c <mpc_div@@Base+0x748>  // b.none
    a734:	mov	w0, #0x1                   	// #1
    a738:	b	a740 <mpc_div@@Base+0x74c>
    a73c:	mov	w0, #0x0                   	// #0
    a740:	str	w0, [sp, #328]
    a744:	b	a944 <mpc_div@@Base+0x950>
    a748:	add	x1, sp, #0x40
    a74c:	add	x0, sp, #0x40
    a750:	mov	w3, #0x1                   	// #1
    a754:	mov	x2, x1
    a758:	mov	x1, #0x1                   	// #1
    a75c:	bl	5070 <mpfr_ui_div@plt>
    a760:	cmp	w0, #0x0
    a764:	b.ne	a774 <mpc_div@@Base+0x780>  // b.any
    a768:	ldr	w0, [sp, #268]
    a76c:	cmp	w0, #0x0
    a770:	b.eq	a7bc <mpc_div@@Base+0x7c8>  // b.none
    a774:	ldr	x1, [sp, #176]
    a778:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a77c:	cmp	x1, x0
    a780:	cset	w0, ne  // ne = any
    a784:	and	w0, w0, #0xff
    a788:	mov	w1, w0
    a78c:	ldr	w0, [sp, #316]
    a790:	orr	w0, w0, w1
    a794:	str	w0, [sp, #316]
    a798:	ldr	x1, [sp, #208]
    a79c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    a7a0:	cmp	x1, x0
    a7a4:	cset	w0, ne  // ne = any
    a7a8:	and	w0, w0, #0xff
    a7ac:	mov	w1, w0
    a7b0:	ldr	w0, [sp, #312]
    a7b4:	orr	w0, w0, w1
    a7b8:	str	w0, [sp, #312]
    a7bc:	bl	4f00 <mpfr_clear_underflow@plt>
    a7c0:	bl	4b20 <mpfr_clear_overflow@plt>
    a7c4:	add	x2, sp, #0x40
    a7c8:	add	x1, sp, #0xa0
    a7cc:	add	x0, sp, #0xa0
    a7d0:	mov	w3, #0x1                   	// #1
    a7d4:	bl	4c40 <mpfr_mul@plt>
    a7d8:	mov	w1, w0
    a7dc:	ldr	w0, [sp, #316]
    a7e0:	orr	w0, w0, w1
    a7e4:	str	w0, [sp, #316]
    a7e8:	bl	53f0 <mpfr_underflow_p@plt>
    a7ec:	str	w0, [sp, #304]
    a7f0:	bl	55d0 <mpfr_overflow_p@plt>
    a7f4:	str	w0, [sp, #300]
    a7f8:	ldr	w0, [sp, #316]
    a7fc:	cmp	w0, #0x0
    a800:	b.eq	a864 <mpc_div@@Base+0x870>  // b.none
    a804:	ldr	w0, [sp, #304]
    a808:	cmp	w0, #0x0
    a80c:	b.ne	a864 <mpc_div@@Base+0x870>  // b.any
    a810:	ldr	w0, [sp, #300]
    a814:	cmp	w0, #0x0
    a818:	b.ne	a864 <mpc_div@@Base+0x870>  // b.any
    a81c:	ldr	x0, [sp, #320]
    a820:	sub	x5, x0, #0x4
    a824:	ldr	x0, [sp, #56]
    a828:	ldr	x1, [x0]
    a82c:	ldr	w0, [sp, #284]
    a830:	cmp	w0, #0x0
    a834:	cset	w0, eq  // eq = none
    a838:	and	w0, w0, #0xff
    a83c:	and	x0, x0, #0xff
    a840:	add	x1, x1, x0
    a844:	add	x0, sp, #0xa0
    a848:	mov	x4, x1
    a84c:	mov	w3, #0x1                   	// #1
    a850:	mov	w2, #0x0                   	// #0
    a854:	mov	x1, x5
    a858:	bl	5540 <mpfr_can_round@plt>
    a85c:	cmp	w0, #0x0
    a860:	b.eq	a86c <mpc_div@@Base+0x878>  // b.none
    a864:	mov	w0, #0x1                   	// #1
    a868:	b	a870 <mpc_div@@Base+0x87c>
    a86c:	mov	w0, #0x0                   	// #0
    a870:	str	w0, [sp, #332]
    a874:	ldr	w0, [sp, #332]
    a878:	cmp	w0, #0x0
    a87c:	b.eq	a944 <mpc_div@@Base+0x950>  // b.none
    a880:	bl	4f00 <mpfr_clear_underflow@plt>
    a884:	bl	4b20 <mpfr_clear_overflow@plt>
    a888:	add	x2, sp, #0x40
    a88c:	add	x0, sp, #0xa0
    a890:	add	x1, x0, #0x20
    a894:	add	x0, sp, #0xa0
    a898:	add	x0, x0, #0x20
    a89c:	mov	w3, #0x1                   	// #1
    a8a0:	bl	4c40 <mpfr_mul@plt>
    a8a4:	mov	w1, w0
    a8a8:	ldr	w0, [sp, #312]
    a8ac:	orr	w0, w0, w1
    a8b0:	str	w0, [sp, #312]
    a8b4:	bl	53f0 <mpfr_underflow_p@plt>
    a8b8:	str	w0, [sp, #296]
    a8bc:	bl	55d0 <mpfr_overflow_p@plt>
    a8c0:	str	w0, [sp, #292]
    a8c4:	ldr	w0, [sp, #312]
    a8c8:	cmp	w0, #0x0
    a8cc:	b.eq	a934 <mpc_div@@Base+0x940>  // b.none
    a8d0:	ldr	w0, [sp, #296]
    a8d4:	cmp	w0, #0x0
    a8d8:	b.ne	a934 <mpc_div@@Base+0x940>  // b.any
    a8dc:	ldr	w0, [sp, #292]
    a8e0:	cmp	w0, #0x0
    a8e4:	b.ne	a934 <mpc_div@@Base+0x940>  // b.any
    a8e8:	ldr	x0, [sp, #320]
    a8ec:	sub	x5, x0, #0x4
    a8f0:	ldr	x0, [sp, #56]
    a8f4:	ldr	x1, [x0, #32]
    a8f8:	ldr	w0, [sp, #280]
    a8fc:	cmp	w0, #0x0
    a900:	cset	w0, eq  // eq = none
    a904:	and	w0, w0, #0xff
    a908:	and	x0, x0, #0xff
    a90c:	add	x1, x1, x0
    a910:	add	x0, sp, #0xa0
    a914:	add	x0, x0, #0x20
    a918:	mov	x4, x1
    a91c:	mov	w3, #0x1                   	// #1
    a920:	mov	w2, #0x0                   	// #0
    a924:	mov	x1, x5
    a928:	bl	5540 <mpfr_can_round@plt>
    a92c:	cmp	w0, #0x0
    a930:	b.eq	a93c <mpc_div@@Base+0x948>  // b.none
    a934:	mov	w0, #0x1                   	// #1
    a938:	b	a940 <mpc_div@@Base+0x94c>
    a93c:	mov	w0, #0x0                   	// #0
    a940:	str	w0, [sp, #328]
    a944:	ldr	w0, [sp, #332]
    a948:	cmp	w0, #0x0
    a94c:	b.eq	a95c <mpc_div@@Base+0x968>  // b.none
    a950:	ldr	w0, [sp, #328]
    a954:	cmp	w0, #0x0
    a958:	b.ne	a98c <mpc_div@@Base+0x998>  // b.any
    a95c:	ldr	w0, [sp, #264]
    a960:	cmp	w0, #0x0
    a964:	b.ne	a98c <mpc_div@@Base+0x998>  // b.any
    a968:	ldr	w0, [sp, #260]
    a96c:	cmp	w0, #0x0
    a970:	b.ne	a98c <mpc_div@@Base+0x998>  // b.any
    a974:	ldr	w0, [sp, #240]
    a978:	cmp	w0, #0x0
    a97c:	b.ne	a98c <mpc_div@@Base+0x998>  // b.any
    a980:	ldr	w0, [sp, #236]
    a984:	cmp	w0, #0x0
    a988:	b.eq	a288 <mpc_div@@Base+0x294>  // b.none
    a98c:	add	x0, sp, #0xa0
    a990:	ldr	w2, [sp, #36]
    a994:	mov	x1, x0
    a998:	ldr	x0, [sp, #56]
    a99c:	bl	5680 <mpc_set@plt>
    a9a0:	str	w0, [sp, #232]
    a9a4:	ldr	w0, [sp, #232]
    a9a8:	and	w0, w0, #0x3
    a9ac:	cmp	w0, #0x2
    a9b0:	b.eq	a9cc <mpc_div@@Base+0x9d8>  // b.none
    a9b4:	ldr	w0, [sp, #232]
    a9b8:	and	w0, w0, #0x3
    a9bc:	cmp	w0, #0x0
    a9c0:	cset	w0, ne  // ne = any
    a9c4:	and	w0, w0, #0xff
    a9c8:	b	a9d0 <mpc_div@@Base+0x9dc>
    a9cc:	mov	w0, #0xffffffff            	// #-1
    a9d0:	str	w0, [sp, #316]
    a9d4:	ldr	w0, [sp, #232]
    a9d8:	asr	w0, w0, #2
    a9dc:	cmp	w0, #0x2
    a9e0:	b.eq	a9fc <mpc_div@@Base+0xa08>  // b.none
    a9e4:	ldr	w0, [sp, #232]
    a9e8:	asr	w0, w0, #2
    a9ec:	cmp	w0, #0x0
    a9f0:	cset	w0, ne  // ne = any
    a9f4:	and	w0, w0, #0xff
    a9f8:	b	aa00 <mpc_div@@Base+0xa0c>
    a9fc:	mov	w0, #0xffffffff            	// #-1
    aa00:	str	w0, [sp, #312]
    aa04:	ldr	w0, [sp, #300]
    aa08:	cmp	w0, #0x0
    aa0c:	b.ne	aa28 <mpc_div@@Base+0xa34>  // b.any
    aa10:	ldr	w0, [sp, #264]
    aa14:	cmp	w0, #0x0
    aa18:	b.eq	aaa8 <mpc_div@@Base+0xab4>  // b.none
    aa1c:	ldr	w0, [sp, #240]
    aa20:	cmp	w0, #0x0
    aa24:	b.ne	aaa8 <mpc_div@@Base+0xab4>  // b.any
    aa28:	ldr	x19, [sp, #56]
    aa2c:	ldr	x1, [sp, #176]
    aa30:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    aa34:	cmp	x1, x0
    aa38:	b.ge	aa5c <mpc_div@@Base+0xa68>  // b.tcont
    aa3c:	ldr	x1, [sp, #176]
    aa40:	mov	x0, #0x2                   	// #2
    aa44:	movk	x0, #0x8000, lsl #48
    aa48:	cmp	x1, x0
    aa4c:	b.ne	aa54 <mpc_div@@Base+0xa60>  // b.any
    aa50:	bl	4bd0 <mpfr_set_erangeflag@plt>
    aa54:	mov	w0, #0x0                   	// #0
    aa58:	b	aa60 <mpc_div@@Base+0xa6c>
    aa5c:	ldr	w0, [sp, #168]
    aa60:	mov	w1, w0
    aa64:	mov	x0, x19
    aa68:	bl	5220 <mpfr_set_inf@plt>
    aa6c:	ldr	x1, [sp, #176]
    aa70:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    aa74:	cmp	x1, x0
    aa78:	b.ge	aa9c <mpc_div@@Base+0xaa8>  // b.tcont
    aa7c:	ldr	x1, [sp, #176]
    aa80:	mov	x0, #0x2                   	// #2
    aa84:	movk	x0, #0x8000, lsl #48
    aa88:	cmp	x1, x0
    aa8c:	b.ne	aa94 <mpc_div@@Base+0xaa0>  // b.any
    aa90:	bl	4bd0 <mpfr_set_erangeflag@plt>
    aa94:	mov	w0, #0x0                   	// #0
    aa98:	b	aaa0 <mpc_div@@Base+0xaac>
    aa9c:	ldr	w0, [sp, #168]
    aaa0:	str	w0, [sp, #316]
    aaa4:	b	ab00 <mpc_div@@Base+0xb0c>
    aaa8:	ldr	w0, [sp, #304]
    aaac:	cmp	w0, #0x0
    aab0:	b.ne	aacc <mpc_div@@Base+0xad8>  // b.any
    aab4:	ldr	w0, [sp, #260]
    aab8:	cmp	w0, #0x0
    aabc:	b.eq	ab00 <mpc_div@@Base+0xb0c>  // b.none
    aac0:	ldr	w0, [sp, #236]
    aac4:	cmp	w0, #0x0
    aac8:	b.ne	ab00 <mpc_div@@Base+0xb0c>  // b.any
    aacc:	ldr	w0, [sp, #168]
    aad0:	cmp	w0, #0x0
    aad4:	b.ge	aae0 <mpc_div@@Base+0xaec>  // b.tcont
    aad8:	mov	w0, #0x1                   	// #1
    aadc:	b	aae4 <mpc_div@@Base+0xaf0>
    aae0:	mov	w0, #0xffffffff            	// #-1
    aae4:	str	w0, [sp, #316]
    aae8:	ldr	x2, [sp, #56]
    aaec:	ldr	w0, [sp, #316]
    aaf0:	neg	w0, w0
    aaf4:	mov	w1, w0
    aaf8:	mov	x0, x2
    aafc:	bl	4dd0 <mpfr_set_zero@plt>
    ab00:	ldr	w0, [sp, #292]
    ab04:	cmp	w0, #0x0
    ab08:	b.ne	ab24 <mpc_div@@Base+0xb30>  // b.any
    ab0c:	ldr	w0, [sp, #264]
    ab10:	cmp	w0, #0x0
    ab14:	b.eq	aba8 <mpc_div@@Base+0xbb4>  // b.none
    ab18:	ldr	w0, [sp, #240]
    ab1c:	cmp	w0, #0x0
    ab20:	b.ne	aba8 <mpc_div@@Base+0xbb4>  // b.any
    ab24:	ldr	x0, [sp, #56]
    ab28:	add	x19, x0, #0x20
    ab2c:	ldr	x1, [sp, #208]
    ab30:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    ab34:	cmp	x1, x0
    ab38:	b.ge	ab5c <mpc_div@@Base+0xb68>  // b.tcont
    ab3c:	ldr	x1, [sp, #208]
    ab40:	mov	x0, #0x2                   	// #2
    ab44:	movk	x0, #0x8000, lsl #48
    ab48:	cmp	x1, x0
    ab4c:	b.ne	ab54 <mpc_div@@Base+0xb60>  // b.any
    ab50:	bl	4bd0 <mpfr_set_erangeflag@plt>
    ab54:	mov	w0, #0x0                   	// #0
    ab58:	b	ab60 <mpc_div@@Base+0xb6c>
    ab5c:	ldr	w0, [sp, #200]
    ab60:	mov	w1, w0
    ab64:	mov	x0, x19
    ab68:	bl	5220 <mpfr_set_inf@plt>
    ab6c:	ldr	x1, [sp, #208]
    ab70:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    ab74:	cmp	x1, x0
    ab78:	b.ge	ab9c <mpc_div@@Base+0xba8>  // b.tcont
    ab7c:	ldr	x1, [sp, #208]
    ab80:	mov	x0, #0x2                   	// #2
    ab84:	movk	x0, #0x8000, lsl #48
    ab88:	cmp	x1, x0
    ab8c:	b.ne	ab94 <mpc_div@@Base+0xba0>  // b.any
    ab90:	bl	4bd0 <mpfr_set_erangeflag@plt>
    ab94:	mov	w0, #0x0                   	// #0
    ab98:	b	aba0 <mpc_div@@Base+0xbac>
    ab9c:	ldr	w0, [sp, #200]
    aba0:	str	w0, [sp, #312]
    aba4:	b	ac04 <mpc_div@@Base+0xc10>
    aba8:	ldr	w0, [sp, #296]
    abac:	cmp	w0, #0x0
    abb0:	b.ne	abcc <mpc_div@@Base+0xbd8>  // b.any
    abb4:	ldr	w0, [sp, #260]
    abb8:	cmp	w0, #0x0
    abbc:	b.eq	ac04 <mpc_div@@Base+0xc10>  // b.none
    abc0:	ldr	w0, [sp, #236]
    abc4:	cmp	w0, #0x0
    abc8:	b.ne	ac04 <mpc_div@@Base+0xc10>  // b.any
    abcc:	ldr	w0, [sp, #200]
    abd0:	cmp	w0, #0x0
    abd4:	b.ge	abe0 <mpc_div@@Base+0xbec>  // b.tcont
    abd8:	mov	w0, #0x1                   	// #1
    abdc:	b	abe4 <mpc_div@@Base+0xbf0>
    abe0:	mov	w0, #0xffffffff            	// #-1
    abe4:	str	w0, [sp, #312]
    abe8:	ldr	x0, [sp, #56]
    abec:	add	x2, x0, #0x20
    abf0:	ldr	w0, [sp, #312]
    abf4:	neg	w0, w0
    abf8:	mov	w1, w0
    abfc:	mov	x0, x2
    ac00:	bl	4dd0 <mpfr_set_zero@plt>
    ac04:	add	x0, sp, #0xa0
    ac08:	bl	4ae0 <mpc_clear@plt>
    ac0c:	add	x0, sp, #0x40
    ac10:	bl	4e30 <mpfr_clear@plt>
    ac14:	ldr	w0, [sp, #276]
    ac18:	cmp	w0, #0x0
    ac1c:	b.eq	ac24 <mpc_div@@Base+0xc30>  // b.none
    ac20:	bl	4a60 <mpfr_set_underflow@plt>
    ac24:	ldr	w0, [sp, #272]
    ac28:	cmp	w0, #0x0
    ac2c:	b.eq	ac34 <mpc_div@@Base+0xc40>  // b.none
    ac30:	bl	5580 <mpfr_set_overflow@plt>
    ac34:	ldr	w0, [sp, #316]
    ac38:	cmp	w0, #0x0
    ac3c:	b.lt	ac58 <mpc_div@@Base+0xc64>  // b.tstop
    ac40:	ldr	w0, [sp, #316]
    ac44:	cmp	w0, #0x0
    ac48:	cset	w0, ne  // ne = any
    ac4c:	and	w0, w0, #0xff
    ac50:	mov	w1, w0
    ac54:	b	ac5c <mpc_div@@Base+0xc68>
    ac58:	mov	w1, #0x2                   	// #2
    ac5c:	ldr	w0, [sp, #312]
    ac60:	cmp	w0, #0x0
    ac64:	b.lt	ac84 <mpc_div@@Base+0xc90>  // b.tstop
    ac68:	ldr	w0, [sp, #312]
    ac6c:	cmp	w0, #0x0
    ac70:	b.eq	ac7c <mpc_div@@Base+0xc88>  // b.none
    ac74:	mov	w0, #0x4                   	// #4
    ac78:	b	ac88 <mpc_div@@Base+0xc94>
    ac7c:	mov	w0, #0x0                   	// #0
    ac80:	b	ac88 <mpc_div@@Base+0xc94>
    ac84:	mov	w0, #0x8                   	// #8
    ac88:	orr	w0, w1, w0
    ac8c:	ldr	x19, [sp, #16]
    ac90:	ldp	x29, x30, [sp], #336
    ac94:	ret

000000000000ac98 <mpc_div_fr@@Base>:
    ac98:	stp	x29, x30, [sp, #-96]!
    ac9c:	mov	x29, sp
    aca0:	str	x0, [sp, #40]
    aca4:	str	x1, [sp, #32]
    aca8:	str	x2, [sp, #24]
    acac:	str	w3, [sp, #20]
    acb0:	ldr	x0, [sp, #40]
    acb4:	ldr	x1, [x0]
    acb8:	add	x0, sp, #0x38
    acbc:	bl	5530 <mpfr_init2@plt>
    acc0:	ldr	x1, [sp, #32]
    acc4:	ldr	w0, [sp, #20]
    acc8:	and	w2, w0, #0xf
    accc:	add	x0, sp, #0x38
    acd0:	mov	w3, w2
    acd4:	ldr	x2, [sp, #24]
    acd8:	bl	5250 <mpfr_div@plt>
    acdc:	str	w0, [sp, #92]
    ace0:	ldr	x0, [sp, #40]
    ace4:	add	x4, x0, #0x20
    ace8:	ldr	x0, [sp, #32]
    acec:	add	x1, x0, #0x20
    acf0:	ldr	w0, [sp, #20]
    acf4:	asr	w0, w0, #4
    acf8:	mov	w3, w0
    acfc:	ldr	x2, [sp, #24]
    ad00:	mov	x0, x4
    ad04:	bl	5250 <mpfr_div@plt>
    ad08:	str	w0, [sp, #88]
    ad0c:	ldr	x0, [sp, #40]
    ad10:	ldr	w2, [sp, #64]
    ad14:	add	x1, sp, #0x38
    ad18:	mov	w3, w2
    ad1c:	mov	w2, #0x0                   	// #0
    ad20:	bl	52d0 <mpfr_set4@plt>
    ad24:	add	x0, sp, #0x38
    ad28:	bl	4e30 <mpfr_clear@plt>
    ad2c:	ldr	w0, [sp, #92]
    ad30:	cmp	w0, #0x0
    ad34:	b.lt	ad50 <mpc_div_fr@@Base+0xb8>  // b.tstop
    ad38:	ldr	w0, [sp, #92]
    ad3c:	cmp	w0, #0x0
    ad40:	cset	w0, ne  // ne = any
    ad44:	and	w0, w0, #0xff
    ad48:	mov	w1, w0
    ad4c:	b	ad54 <mpc_div_fr@@Base+0xbc>
    ad50:	mov	w1, #0x2                   	// #2
    ad54:	ldr	w0, [sp, #88]
    ad58:	cmp	w0, #0x0
    ad5c:	b.lt	ad7c <mpc_div_fr@@Base+0xe4>  // b.tstop
    ad60:	ldr	w0, [sp, #88]
    ad64:	cmp	w0, #0x0
    ad68:	b.eq	ad74 <mpc_div_fr@@Base+0xdc>  // b.none
    ad6c:	mov	w0, #0x4                   	// #4
    ad70:	b	ad80 <mpc_div_fr@@Base+0xe8>
    ad74:	mov	w0, #0x0                   	// #0
    ad78:	b	ad80 <mpc_div_fr@@Base+0xe8>
    ad7c:	mov	w0, #0x8                   	// #8
    ad80:	orr	w0, w1, w0
    ad84:	ldp	x29, x30, [sp], #96
    ad88:	ret

000000000000ad8c <mpc_div_ui@@Base>:
    ad8c:	stp	x29, x30, [sp, #-64]!
    ad90:	mov	x29, sp
    ad94:	str	x0, [sp, #40]
    ad98:	str	x1, [sp, #32]
    ad9c:	str	x2, [sp, #24]
    ada0:	str	w3, [sp, #20]
    ada4:	ldr	x4, [sp, #40]
    ada8:	ldr	x1, [sp, #32]
    adac:	ldr	w0, [sp, #20]
    adb0:	and	w0, w0, #0xf
    adb4:	mov	w3, w0
    adb8:	ldr	x2, [sp, #24]
    adbc:	mov	x0, x4
    adc0:	bl	5650 <mpfr_div_ui@plt>
    adc4:	str	w0, [sp, #60]
    adc8:	ldr	x0, [sp, #40]
    adcc:	add	x4, x0, #0x20
    add0:	ldr	x0, [sp, #32]
    add4:	add	x1, x0, #0x20
    add8:	ldr	w0, [sp, #20]
    addc:	asr	w0, w0, #4
    ade0:	mov	w3, w0
    ade4:	ldr	x2, [sp, #24]
    ade8:	mov	x0, x4
    adec:	bl	5650 <mpfr_div_ui@plt>
    adf0:	str	w0, [sp, #56]
    adf4:	ldr	w0, [sp, #60]
    adf8:	cmp	w0, #0x0
    adfc:	b.lt	ae18 <mpc_div_ui@@Base+0x8c>  // b.tstop
    ae00:	ldr	w0, [sp, #60]
    ae04:	cmp	w0, #0x0
    ae08:	cset	w0, ne  // ne = any
    ae0c:	and	w0, w0, #0xff
    ae10:	mov	w1, w0
    ae14:	b	ae1c <mpc_div_ui@@Base+0x90>
    ae18:	mov	w1, #0x2                   	// #2
    ae1c:	ldr	w0, [sp, #56]
    ae20:	cmp	w0, #0x0
    ae24:	b.lt	ae44 <mpc_div_ui@@Base+0xb8>  // b.tstop
    ae28:	ldr	w0, [sp, #56]
    ae2c:	cmp	w0, #0x0
    ae30:	b.eq	ae3c <mpc_div_ui@@Base+0xb0>  // b.none
    ae34:	mov	w0, #0x4                   	// #4
    ae38:	b	ae48 <mpc_div_ui@@Base+0xbc>
    ae3c:	mov	w0, #0x0                   	// #0
    ae40:	b	ae48 <mpc_div_ui@@Base+0xbc>
    ae44:	mov	w0, #0x8                   	// #8
    ae48:	orr	w0, w1, w0
    ae4c:	ldp	x29, x30, [sp], #64
    ae50:	ret

000000000000ae54 <mpc_exp@@Base>:
    ae54:	stp	x29, x30, [sp, #-288]!
    ae58:	mov	x29, sp
    ae5c:	str	x0, [sp, #40]
    ae60:	str	x1, [sp, #32]
    ae64:	str	w2, [sp, #28]
    ae68:	str	wzr, [sp, #276]
    ae6c:	ldr	x0, [sp, #32]
    ae70:	ldr	x1, [x0, #16]
    ae74:	mov	x0, #0x2                   	// #2
    ae78:	movk	x0, #0x8000, lsl #48
    ae7c:	cmp	x1, x0
    ae80:	b.eq	ae9c <mpc_exp@@Base+0x48>  // b.none
    ae84:	ldr	x0, [sp, #32]
    ae88:	ldr	x1, [x0, #48]
    ae8c:	mov	x0, #0x2                   	// #2
    ae90:	movk	x0, #0x8000, lsl #48
    ae94:	cmp	x1, x0
    ae98:	b.ne	af3c <mpc_exp@@Base+0xe8>  // b.any
    ae9c:	ldr	x0, [sp, #32]
    aea0:	ldr	x1, [x0, #48]
    aea4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    aea8:	cmp	x1, x0
    aeac:	b.ne	aec4 <mpc_exp@@Base+0x70>  // b.any
    aeb0:	mov	w2, #0x0                   	// #0
    aeb4:	ldr	x1, [sp, #32]
    aeb8:	ldr	x0, [sp, #40]
    aebc:	bl	5680 <mpc_set@plt>
    aec0:	b	b658 <mpc_exp@@Base+0x804>
    aec4:	ldr	x0, [sp, #32]
    aec8:	ldr	x1, [x0, #16]
    aecc:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    aed0:	cmp	x1, x0
    aed4:	b.ne	af20 <mpc_exp@@Base+0xcc>  // b.any
    aed8:	ldr	x0, [sp, #32]
    aedc:	ldr	w0, [x0, #8]
    aee0:	cmp	w0, #0x0
    aee4:	b.ge	af00 <mpc_exp@@Base+0xac>  // b.tcont
    aee8:	mov	w3, #0x0                   	// #0
    aeec:	mov	x2, #0x0                   	// #0
    aef0:	mov	x1, #0x0                   	// #0
    aef4:	ldr	x0, [sp, #40]
    aef8:	bl	5140 <mpc_set_ui_ui@plt>
    aefc:	b	b658 <mpc_exp@@Base+0x804>
    af00:	ldr	x0, [sp, #40]
    af04:	mov	w1, #0x1                   	// #1
    af08:	bl	5220 <mpfr_set_inf@plt>
    af0c:	ldr	x0, [sp, #40]
    af10:	add	x0, x0, #0x20
    af14:	bl	4b10 <mpfr_set_nan@plt>
    af18:	mov	w0, #0x0                   	// #0
    af1c:	b	b658 <mpc_exp@@Base+0x804>
    af20:	ldr	x0, [sp, #40]
    af24:	bl	4b10 <mpfr_set_nan@plt>
    af28:	ldr	x0, [sp, #40]
    af2c:	add	x0, x0, #0x20
    af30:	bl	4b10 <mpfr_set_nan@plt>
    af34:	mov	w0, #0x0                   	// #0
    af38:	b	b658 <mpc_exp@@Base+0x804>
    af3c:	ldr	x0, [sp, #32]
    af40:	ldr	x1, [x0, #48]
    af44:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    af48:	cmp	x1, x0
    af4c:	b.ne	affc <mpc_exp@@Base+0x1a8>  // b.any
    af50:	ldr	x3, [sp, #40]
    af54:	ldr	x1, [sp, #32]
    af58:	ldr	w0, [sp, #28]
    af5c:	and	w0, w0, #0xf
    af60:	mov	w2, w0
    af64:	mov	x0, x3
    af68:	bl	5330 <mpfr_exp@plt>
    af6c:	str	w0, [sp, #272]
    af70:	ldr	x0, [sp, #40]
    af74:	add	x4, x0, #0x20
    af78:	ldr	x0, [sp, #32]
    af7c:	add	x1, x0, #0x20
    af80:	ldr	w0, [sp, #28]
    af84:	asr	w2, w0, #4
    af88:	ldr	x0, [sp, #32]
    af8c:	ldr	w0, [x0, #40]
    af90:	mov	w3, w0
    af94:	mov	x0, x4
    af98:	bl	52d0 <mpfr_set4@plt>
    af9c:	str	w0, [sp, #268]
    afa0:	ldr	w0, [sp, #272]
    afa4:	cmp	w0, #0x0
    afa8:	b.lt	afc4 <mpc_exp@@Base+0x170>  // b.tstop
    afac:	ldr	w0, [sp, #272]
    afb0:	cmp	w0, #0x0
    afb4:	cset	w0, ne  // ne = any
    afb8:	and	w0, w0, #0xff
    afbc:	mov	w1, w0
    afc0:	b	afc8 <mpc_exp@@Base+0x174>
    afc4:	mov	w1, #0x2                   	// #2
    afc8:	ldr	w0, [sp, #268]
    afcc:	cmp	w0, #0x0
    afd0:	b.lt	aff0 <mpc_exp@@Base+0x19c>  // b.tstop
    afd4:	ldr	w0, [sp, #268]
    afd8:	cmp	w0, #0x0
    afdc:	b.eq	afe8 <mpc_exp@@Base+0x194>  // b.none
    afe0:	mov	w0, #0x4                   	// #4
    afe4:	b	aff4 <mpc_exp@@Base+0x1a0>
    afe8:	mov	w0, #0x0                   	// #0
    afec:	b	aff4 <mpc_exp@@Base+0x1a0>
    aff0:	mov	w0, #0x8                   	// #8
    aff4:	orr	w0, w1, w0
    aff8:	b	b658 <mpc_exp@@Base+0x804>
    affc:	ldr	x0, [sp, #32]
    b000:	ldr	x1, [x0, #16]
    b004:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    b008:	cmp	x1, x0
    b00c:	b.ne	b0b8 <mpc_exp@@Base+0x264>  // b.any
    b010:	ldr	x3, [sp, #40]
    b014:	ldr	x0, [sp, #32]
    b018:	add	x1, x0, #0x20
    b01c:	ldr	w0, [sp, #28]
    b020:	and	w0, w0, #0xf
    b024:	mov	w2, w0
    b028:	mov	x0, x3
    b02c:	bl	5150 <mpfr_cos@plt>
    b030:	str	w0, [sp, #272]
    b034:	ldr	x0, [sp, #40]
    b038:	add	x3, x0, #0x20
    b03c:	ldr	x0, [sp, #32]
    b040:	add	x1, x0, #0x20
    b044:	ldr	w0, [sp, #28]
    b048:	asr	w0, w0, #4
    b04c:	mov	w2, w0
    b050:	mov	x0, x3
    b054:	bl	5180 <mpfr_sin@plt>
    b058:	str	w0, [sp, #268]
    b05c:	ldr	w0, [sp, #272]
    b060:	cmp	w0, #0x0
    b064:	b.lt	b080 <mpc_exp@@Base+0x22c>  // b.tstop
    b068:	ldr	w0, [sp, #272]
    b06c:	cmp	w0, #0x0
    b070:	cset	w0, ne  // ne = any
    b074:	and	w0, w0, #0xff
    b078:	mov	w1, w0
    b07c:	b	b084 <mpc_exp@@Base+0x230>
    b080:	mov	w1, #0x2                   	// #2
    b084:	ldr	w0, [sp, #268]
    b088:	cmp	w0, #0x0
    b08c:	b.lt	b0ac <mpc_exp@@Base+0x258>  // b.tstop
    b090:	ldr	w0, [sp, #268]
    b094:	cmp	w0, #0x0
    b098:	b.eq	b0a4 <mpc_exp@@Base+0x250>  // b.none
    b09c:	mov	w0, #0x4                   	// #4
    b0a0:	b	b0b0 <mpc_exp@@Base+0x25c>
    b0a4:	mov	w0, #0x0                   	// #0
    b0a8:	b	b0b0 <mpc_exp@@Base+0x25c>
    b0ac:	mov	w0, #0x8                   	// #8
    b0b0:	orr	w0, w1, w0
    b0b4:	b	b658 <mpc_exp@@Base+0x804>
    b0b8:	ldr	x0, [sp, #32]
    b0bc:	ldr	x1, [x0, #16]
    b0c0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    b0c4:	cmp	x1, x0
    b0c8:	b.ne	b280 <mpc_exp@@Base+0x42c>  // b.any
    b0cc:	add	x0, sp, #0x30
    b0d0:	mov	x1, #0x2                   	// #2
    b0d4:	bl	5530 <mpfr_init2@plt>
    b0d8:	ldr	x0, [sp, #32]
    b0dc:	ldr	w0, [x0, #8]
    b0e0:	cmp	w0, #0x0
    b0e4:	b.ge	b10c <mpc_exp@@Base+0x2b8>  // b.tcont
    b0e8:	add	x0, sp, #0x30
    b0ec:	str	x0, [sp, #248]
    b0f0:	ldr	x0, [sp, #248]
    b0f4:	mov	w1, #0x1                   	// #1
    b0f8:	str	w1, [x0, #8]
    b0fc:	ldr	x0, [sp, #248]
    b100:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    b104:	str	x1, [x0, #16]
    b108:	b	b118 <mpc_exp@@Base+0x2c4>
    b10c:	add	x0, sp, #0x30
    b110:	mov	w1, #0x1                   	// #1
    b114:	bl	5220 <mpfr_set_inf@plt>
    b118:	ldr	x0, [sp, #32]
    b11c:	ldr	x1, [x0, #48]
    b120:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    b124:	cmp	x1, x0
    b128:	b.ne	b1a0 <mpc_exp@@Base+0x34c>  // b.any
    b12c:	ldr	x0, [sp, #32]
    b130:	ldr	w0, [x0, #8]
    b134:	lsr	w0, w0, #31
    b138:	and	w0, w0, #0xff
    b13c:	str	w0, [sp, #244]
    b140:	ldr	x0, [sp, #40]
    b144:	ldr	w2, [sp, #56]
    b148:	add	x1, sp, #0x30
    b14c:	mov	w3, w2
    b150:	mov	w2, #0x0                   	// #0
    b154:	bl	52d0 <mpfr_set4@plt>
    b158:	str	w0, [sp, #272]
    b15c:	ldr	w0, [sp, #244]
    b160:	cmp	w0, #0x0
    b164:	b.eq	b18c <mpc_exp@@Base+0x338>  // b.none
    b168:	ldr	x0, [sp, #40]
    b16c:	add	x0, x0, #0x20
    b170:	ldr	w2, [sp, #56]
    b174:	add	x1, sp, #0x30
    b178:	mov	w3, w2
    b17c:	mov	w2, #0x0                   	// #0
    b180:	bl	52d0 <mpfr_set4@plt>
    b184:	str	w0, [sp, #268]
    b188:	b	b21c <mpc_exp@@Base+0x3c8>
    b18c:	ldr	x0, [sp, #40]
    b190:	add	x0, x0, #0x20
    b194:	bl	4b10 <mpfr_set_nan@plt>
    b198:	str	wzr, [sp, #268]
    b19c:	b	b21c <mpc_exp@@Base+0x3c8>
    b1a0:	add	x0, sp, #0x50
    b1a4:	mov	x1, #0x2                   	// #2
    b1a8:	bl	5530 <mpfr_init2@plt>
    b1ac:	add	x0, sp, #0x70
    b1b0:	mov	x1, #0x2                   	// #2
    b1b4:	bl	5530 <mpfr_init2@plt>
    b1b8:	ldr	x0, [sp, #32]
    b1bc:	add	x2, x0, #0x20
    b1c0:	add	x1, sp, #0x50
    b1c4:	add	x0, sp, #0x70
    b1c8:	mov	w3, #0x0                   	// #0
    b1cc:	bl	5620 <mpfr_sin_cos@plt>
    b1d0:	ldr	x0, [sp, #40]
    b1d4:	ldr	w2, [sp, #88]
    b1d8:	add	x1, sp, #0x30
    b1dc:	mov	w3, w2
    b1e0:	mov	w2, #0x0                   	// #0
    b1e4:	bl	52d0 <mpfr_set4@plt>
    b1e8:	str	w0, [sp, #272]
    b1ec:	ldr	x0, [sp, #40]
    b1f0:	add	x0, x0, #0x20
    b1f4:	ldr	w2, [sp, #120]
    b1f8:	add	x1, sp, #0x30
    b1fc:	mov	w3, w2
    b200:	mov	w2, #0x0                   	// #0
    b204:	bl	52d0 <mpfr_set4@plt>
    b208:	str	w0, [sp, #268]
    b20c:	add	x0, sp, #0x70
    b210:	bl	4e30 <mpfr_clear@plt>
    b214:	add	x0, sp, #0x50
    b218:	bl	4e30 <mpfr_clear@plt>
    b21c:	add	x0, sp, #0x30
    b220:	bl	4e30 <mpfr_clear@plt>
    b224:	ldr	w0, [sp, #272]
    b228:	cmp	w0, #0x0
    b22c:	b.lt	b248 <mpc_exp@@Base+0x3f4>  // b.tstop
    b230:	ldr	w0, [sp, #272]
    b234:	cmp	w0, #0x0
    b238:	cset	w0, ne  // ne = any
    b23c:	and	w0, w0, #0xff
    b240:	mov	w1, w0
    b244:	b	b24c <mpc_exp@@Base+0x3f8>
    b248:	mov	w1, #0x2                   	// #2
    b24c:	ldr	w0, [sp, #268]
    b250:	cmp	w0, #0x0
    b254:	b.lt	b274 <mpc_exp@@Base+0x420>  // b.tstop
    b258:	ldr	w0, [sp, #268]
    b25c:	cmp	w0, #0x0
    b260:	b.eq	b26c <mpc_exp@@Base+0x418>  // b.none
    b264:	mov	w0, #0x4                   	// #4
    b268:	b	b278 <mpc_exp@@Base+0x424>
    b26c:	mov	w0, #0x0                   	// #0
    b270:	b	b278 <mpc_exp@@Base+0x424>
    b274:	mov	w0, #0x8                   	// #8
    b278:	orr	w0, w1, w0
    b27c:	b	b658 <mpc_exp@@Base+0x804>
    b280:	ldr	x0, [sp, #32]
    b284:	ldr	x1, [x0, #48]
    b288:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    b28c:	cmp	x1, x0
    b290:	b.ne	b2b0 <mpc_exp@@Base+0x45c>  // b.any
    b294:	ldr	x0, [sp, #40]
    b298:	bl	4b10 <mpfr_set_nan@plt>
    b29c:	ldr	x0, [sp, #40]
    b2a0:	add	x0, x0, #0x20
    b2a4:	bl	4b10 <mpfr_set_nan@plt>
    b2a8:	mov	w0, #0x0                   	// #0
    b2ac:	b	b658 <mpc_exp@@Base+0x804>
    b2b0:	ldr	x0, [sp, #40]
    b2b4:	ldr	x1, [x0, #32]
    b2b8:	ldr	x0, [sp, #40]
    b2bc:	ldr	x0, [x0]
    b2c0:	cmp	x1, x0
    b2c4:	csel	x2, x1, x0, ge  // ge = tcont
    b2c8:	ldr	x0, [sp, #32]
    b2cc:	ldr	x0, [x0, #48]
    b2d0:	neg	x1, x0
    b2d4:	ldr	x0, [sp, #32]
    b2d8:	ldr	x0, [x0, #16]
    b2dc:	cmp	x0, #0x0
    b2e0:	b.ge	b2f4 <mpc_exp@@Base+0x4a0>  // b.tcont
    b2e4:	ldr	x0, [sp, #32]
    b2e8:	ldr	x0, [x0, #16]
    b2ec:	neg	x0, x0
    b2f0:	b	b2f8 <mpc_exp@@Base+0x4a4>
    b2f4:	mov	x0, #0x0                   	// #0
    b2f8:	cmp	x0, x1
    b2fc:	csel	x0, x0, x1, ge  // ge = tcont
    b300:	add	x0, x2, x0
    b304:	str	x0, [sp, #280]
    b308:	add	x0, sp, #0xd0
    b30c:	mov	x1, #0x2                   	// #2
    b310:	bl	5530 <mpfr_init2@plt>
    b314:	add	x0, sp, #0xb0
    b318:	mov	x1, #0x2                   	// #2
    b31c:	bl	5530 <mpfr_init2@plt>
    b320:	add	x0, sp, #0x90
    b324:	mov	x1, #0x2                   	// #2
    b328:	bl	5530 <mpfr_init2@plt>
    b32c:	bl	53f0 <mpfr_underflow_p@plt>
    b330:	str	w0, [sp, #264]
    b334:	bl	55d0 <mpfr_overflow_p@plt>
    b338:	str	w0, [sp, #260]
    b33c:	ldr	x0, [sp, #280]
    b340:	bl	4de0 <mpc_ceil_log2@plt>
    b344:	add	x0, x0, #0x5
    b348:	ldr	x1, [sp, #280]
    b34c:	add	x0, x1, x0
    b350:	str	x0, [sp, #280]
    b354:	add	x0, sp, #0xd0
    b358:	ldr	x1, [sp, #280]
    b35c:	bl	4d40 <mpfr_set_prec@plt>
    b360:	add	x0, sp, #0xb0
    b364:	ldr	x1, [sp, #280]
    b368:	bl	4d40 <mpfr_set_prec@plt>
    b36c:	add	x0, sp, #0x90
    b370:	ldr	x1, [sp, #280]
    b374:	bl	4d40 <mpfr_set_prec@plt>
    b378:	bl	4b20 <mpfr_clear_overflow@plt>
    b37c:	bl	4f00 <mpfr_clear_underflow@plt>
    b380:	ldr	x1, [sp, #32]
    b384:	add	x0, sp, #0xd0
    b388:	mov	w2, #0x0                   	// #0
    b38c:	bl	5330 <mpfr_exp@plt>
    b390:	ldr	x0, [sp, #32]
    b394:	add	x2, x0, #0x20
    b398:	add	x1, sp, #0xb0
    b39c:	add	x0, sp, #0x90
    b3a0:	mov	w3, #0x0                   	// #0
    b3a4:	bl	5620 <mpfr_sin_cos@plt>
    b3a8:	add	x2, sp, #0xd0
    b3ac:	add	x1, sp, #0xb0
    b3b0:	add	x0, sp, #0xb0
    b3b4:	mov	w3, #0x0                   	// #0
    b3b8:	bl	4c40 <mpfr_mul@plt>
    b3bc:	bl	55d0 <mpfr_overflow_p@plt>
    b3c0:	cmp	w0, #0x0
    b3c4:	b.ne	b424 <mpc_exp@@Base+0x5d0>  // b.any
    b3c8:	ldr	x1, [sp, #224]
    b3cc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    b3d0:	cmp	x1, x0
    b3d4:	b.eq	b424 <mpc_exp@@Base+0x5d0>  // b.none
    b3d8:	ldr	x0, [sp, #280]
    b3dc:	sub	x5, x0, #0x2
    b3e0:	ldr	x0, [sp, #40]
    b3e4:	ldr	x1, [x0]
    b3e8:	ldr	w0, [sp, #28]
    b3ec:	and	w0, w0, #0xf
    b3f0:	cmp	w0, #0x0
    b3f4:	cset	w0, eq  // eq = none
    b3f8:	and	w0, w0, #0xff
    b3fc:	and	x0, x0, #0xff
    b400:	add	x1, x1, x0
    b404:	add	x0, sp, #0xb0
    b408:	mov	x4, x1
    b40c:	mov	w3, #0x1                   	// #1
    b410:	mov	w2, #0x0                   	// #0
    b414:	mov	x1, x5
    b418:	bl	5540 <mpfr_can_round@plt>
    b41c:	cmp	w0, #0x0
    b420:	b.eq	b42c <mpc_exp@@Base+0x5d8>  // b.none
    b424:	mov	w0, #0x1                   	// #1
    b428:	b	b430 <mpc_exp@@Base+0x5dc>
    b42c:	mov	w0, #0x0                   	// #0
    b430:	str	w0, [sp, #276]
    b434:	ldr	w0, [sp, #276]
    b438:	cmp	w0, #0x0
    b43c:	b.eq	b4cc <mpc_exp@@Base+0x678>  // b.none
    b440:	add	x2, sp, #0xd0
    b444:	add	x1, sp, #0x90
    b448:	add	x0, sp, #0x90
    b44c:	mov	w3, #0x0                   	// #0
    b450:	bl	4c40 <mpfr_mul@plt>
    b454:	bl	55d0 <mpfr_overflow_p@plt>
    b458:	cmp	w0, #0x0
    b45c:	b.ne	b4bc <mpc_exp@@Base+0x668>  // b.any
    b460:	ldr	x1, [sp, #224]
    b464:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    b468:	cmp	x1, x0
    b46c:	b.eq	b4bc <mpc_exp@@Base+0x668>  // b.none
    b470:	ldr	x0, [sp, #280]
    b474:	sub	x5, x0, #0x2
    b478:	ldr	x0, [sp, #40]
    b47c:	ldr	x1, [x0, #32]
    b480:	ldr	w0, [sp, #28]
    b484:	asr	w0, w0, #4
    b488:	cmp	w0, #0x0
    b48c:	cset	w0, eq  // eq = none
    b490:	and	w0, w0, #0xff
    b494:	and	x0, x0, #0xff
    b498:	add	x1, x1, x0
    b49c:	add	x0, sp, #0x90
    b4a0:	mov	x4, x1
    b4a4:	mov	w3, #0x1                   	// #1
    b4a8:	mov	w2, #0x0                   	// #0
    b4ac:	mov	x1, x5
    b4b0:	bl	5540 <mpfr_can_round@plt>
    b4b4:	cmp	w0, #0x0
    b4b8:	b.eq	b4c4 <mpc_exp@@Base+0x670>  // b.none
    b4bc:	mov	w0, #0x1                   	// #1
    b4c0:	b	b4c8 <mpc_exp@@Base+0x674>
    b4c4:	mov	w0, #0x0                   	// #0
    b4c8:	str	w0, [sp, #276]
    b4cc:	ldr	w0, [sp, #276]
    b4d0:	cmp	w0, #0x0
    b4d4:	b.eq	b33c <mpc_exp@@Base+0x4e8>  // b.none
    b4d8:	ldr	x4, [sp, #40]
    b4dc:	ldr	w0, [sp, #28]
    b4e0:	and	w1, w0, #0xf
    b4e4:	ldr	w2, [sp, #184]
    b4e8:	add	x0, sp, #0xb0
    b4ec:	mov	w3, w2
    b4f0:	mov	w2, w1
    b4f4:	mov	x1, x0
    b4f8:	mov	x0, x4
    b4fc:	bl	52d0 <mpfr_set4@plt>
    b500:	str	w0, [sp, #272]
    b504:	ldr	x0, [sp, #40]
    b508:	add	x4, x0, #0x20
    b50c:	ldr	w0, [sp, #28]
    b510:	asr	w1, w0, #4
    b514:	ldr	w2, [sp, #152]
    b518:	add	x0, sp, #0x90
    b51c:	mov	w3, w2
    b520:	mov	w2, w1
    b524:	mov	x1, x0
    b528:	mov	x0, x4
    b52c:	bl	52d0 <mpfr_set4@plt>
    b530:	str	w0, [sp, #268]
    b534:	bl	55d0 <mpfr_overflow_p@plt>
    b538:	cmp	w0, #0x0
    b53c:	b.eq	b580 <mpc_exp@@Base+0x72c>  // b.none
    b540:	ldr	x2, [sp, #40]
    b544:	ldr	w0, [sp, #28]
    b548:	and	w0, w0, #0xf
    b54c:	mov	w1, w0
    b550:	mov	x0, x2
    b554:	bl	4eb0 <mpc_fix_inf@plt>
    b558:	str	w0, [sp, #272]
    b55c:	ldr	x0, [sp, #40]
    b560:	add	x2, x0, #0x20
    b564:	ldr	w0, [sp, #28]
    b568:	asr	w0, w0, #4
    b56c:	mov	w1, w0
    b570:	mov	x0, x2
    b574:	bl	4eb0 <mpc_fix_inf@plt>
    b578:	str	w0, [sp, #268]
    b57c:	b	b5c8 <mpc_exp@@Base+0x774>
    b580:	bl	53f0 <mpfr_underflow_p@plt>
    b584:	cmp	w0, #0x0
    b588:	b.eq	b5c8 <mpc_exp@@Base+0x774>  // b.none
    b58c:	ldr	x2, [sp, #40]
    b590:	ldr	w0, [sp, #28]
    b594:	and	w0, w0, #0xf
    b598:	mov	w1, w0
    b59c:	mov	x0, x2
    b5a0:	bl	51d0 <mpc_fix_zero@plt>
    b5a4:	str	w0, [sp, #272]
    b5a8:	ldr	x0, [sp, #40]
    b5ac:	add	x2, x0, #0x20
    b5b0:	ldr	w0, [sp, #28]
    b5b4:	asr	w0, w0, #4
    b5b8:	mov	w1, w0
    b5bc:	mov	x0, x2
    b5c0:	bl	51d0 <mpc_fix_zero@plt>
    b5c4:	str	w0, [sp, #268]
    b5c8:	add	x0, sp, #0xd0
    b5cc:	bl	4e30 <mpfr_clear@plt>
    b5d0:	add	x0, sp, #0xb0
    b5d4:	bl	4e30 <mpfr_clear@plt>
    b5d8:	add	x0, sp, #0x90
    b5dc:	bl	4e30 <mpfr_clear@plt>
    b5e0:	ldr	w0, [sp, #264]
    b5e4:	cmp	w0, #0x0
    b5e8:	b.eq	b5f0 <mpc_exp@@Base+0x79c>  // b.none
    b5ec:	bl	4a60 <mpfr_set_underflow@plt>
    b5f0:	ldr	w0, [sp, #260]
    b5f4:	cmp	w0, #0x0
    b5f8:	b.eq	b600 <mpc_exp@@Base+0x7ac>  // b.none
    b5fc:	bl	5580 <mpfr_set_overflow@plt>
    b600:	ldr	w0, [sp, #272]
    b604:	cmp	w0, #0x0
    b608:	b.lt	b624 <mpc_exp@@Base+0x7d0>  // b.tstop
    b60c:	ldr	w0, [sp, #272]
    b610:	cmp	w0, #0x0
    b614:	cset	w0, ne  // ne = any
    b618:	and	w0, w0, #0xff
    b61c:	mov	w1, w0
    b620:	b	b628 <mpc_exp@@Base+0x7d4>
    b624:	mov	w1, #0x2                   	// #2
    b628:	ldr	w0, [sp, #268]
    b62c:	cmp	w0, #0x0
    b630:	b.lt	b650 <mpc_exp@@Base+0x7fc>  // b.tstop
    b634:	ldr	w0, [sp, #268]
    b638:	cmp	w0, #0x0
    b63c:	b.eq	b648 <mpc_exp@@Base+0x7f4>  // b.none
    b640:	mov	w0, #0x4                   	// #4
    b644:	b	b654 <mpc_exp@@Base+0x800>
    b648:	mov	w0, #0x0                   	// #0
    b64c:	b	b654 <mpc_exp@@Base+0x800>
    b650:	mov	w0, #0x8                   	// #8
    b654:	orr	w0, w1, w0
    b658:	ldp	x29, x30, [sp], #288
    b65c:	ret
    b660:	sub	sp, sp, #0x30
    b664:	str	x0, [sp, #8]
    b668:	str	x1, [sp]
    b66c:	ldr	x0, [sp, #8]
    b670:	ldr	x1, [x0, #16]
    b674:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    b678:	cmp	x1, x0
    b67c:	b.gt	b68c <mpc_exp@@Base+0x838>
    b680:	ldr	x0, [sp]
    b684:	ldr	x0, [x0]
    b688:	b	b71c <mpc_exp@@Base+0x8c8>
    b68c:	ldr	x0, [sp]
    b690:	ldr	x1, [x0, #16]
    b694:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    b698:	cmp	x1, x0
    b69c:	b.gt	b6ac <mpc_exp@@Base+0x858>
    b6a0:	ldr	x0, [sp, #8]
    b6a4:	ldr	x0, [x0]
    b6a8:	b	b71c <mpc_exp@@Base+0x8c8>
    b6ac:	ldr	x0, [sp, #8]
    b6b0:	ldr	x0, [x0, #16]
    b6b4:	str	x0, [sp, #40]
    b6b8:	ldr	x0, [sp]
    b6bc:	ldr	x0, [x0, #16]
    b6c0:	str	x0, [sp, #32]
    b6c4:	ldr	x0, [sp, #8]
    b6c8:	ldr	x0, [x0]
    b6cc:	ldr	x1, [sp, #40]
    b6d0:	sub	x0, x1, x0
    b6d4:	str	x0, [sp, #24]
    b6d8:	ldr	x0, [sp]
    b6dc:	ldr	x0, [x0]
    b6e0:	ldr	x1, [sp, #32]
    b6e4:	sub	x0, x1, x0
    b6e8:	str	x0, [sp, #16]
    b6ec:	ldr	x0, [sp, #32]
    b6f0:	ldr	x2, [sp, #40]
    b6f4:	ldr	x1, [sp, #40]
    b6f8:	cmp	x2, x0
    b6fc:	csel	x0, x1, x0, ge  // ge = tcont
    b700:	add	x1, x0, #0x1
    b704:	ldr	x0, [sp, #16]
    b708:	ldr	x3, [sp, #24]
    b70c:	ldr	x2, [sp, #24]
    b710:	cmp	x3, x0
    b714:	csel	x0, x2, x0, le
    b718:	sub	x0, x1, x0
    b71c:	add	sp, sp, #0x30
    b720:	ret

000000000000b724 <mpc_fma_naive@@Base>:
    b724:	stp	x29, x30, [sp, #-288]!
    b728:	mov	x29, sp
    b72c:	str	x0, [sp, #56]
    b730:	str	x1, [sp, #48]
    b734:	str	x2, [sp, #40]
    b738:	str	x3, [sp, #32]
    b73c:	str	w4, [sp, #28]
    b740:	ldr	x0, [sp, #48]
    b744:	ldr	x1, [x0]
    b748:	ldr	x0, [sp, #40]
    b74c:	ldr	x0, [x0]
    b750:	add	x1, x1, x0
    b754:	add	x0, sp, #0xc8
    b758:	bl	5530 <mpfr_init2@plt>
    b75c:	ldr	x0, [sp, #48]
    b760:	ldr	x1, [x0]
    b764:	ldr	x0, [sp, #40]
    b768:	ldr	x0, [x0, #32]
    b76c:	add	x1, x1, x0
    b770:	add	x0, sp, #0xa8
    b774:	bl	5530 <mpfr_init2@plt>
    b778:	ldr	x0, [sp, #48]
    b77c:	ldr	x1, [x0, #32]
    b780:	ldr	x0, [sp, #40]
    b784:	ldr	x0, [x0]
    b788:	add	x1, x1, x0
    b78c:	add	x0, sp, #0x88
    b790:	bl	5530 <mpfr_init2@plt>
    b794:	ldr	x0, [sp, #48]
    b798:	ldr	x1, [x0, #32]
    b79c:	ldr	x0, [sp, #40]
    b7a0:	ldr	x0, [x0, #32]
    b7a4:	add	x1, x1, x0
    b7a8:	add	x0, sp, #0x68
    b7ac:	bl	5530 <mpfr_init2@plt>
    b7b0:	ldr	x1, [sp, #48]
    b7b4:	ldr	x2, [sp, #40]
    b7b8:	add	x0, sp, #0xc8
    b7bc:	mov	w3, #0x1                   	// #1
    b7c0:	bl	4c40 <mpfr_mul@plt>
    b7c4:	ldr	x1, [sp, #48]
    b7c8:	ldr	x0, [sp, #40]
    b7cc:	add	x2, x0, #0x20
    b7d0:	add	x0, sp, #0xa8
    b7d4:	mov	w3, #0x1                   	// #1
    b7d8:	bl	4c40 <mpfr_mul@plt>
    b7dc:	ldr	x0, [sp, #48]
    b7e0:	add	x1, x0, #0x20
    b7e4:	ldr	x2, [sp, #40]
    b7e8:	add	x0, sp, #0x88
    b7ec:	mov	w3, #0x1                   	// #1
    b7f0:	bl	4c40 <mpfr_mul@plt>
    b7f4:	ldr	x0, [sp, #48]
    b7f8:	add	x1, x0, #0x20
    b7fc:	ldr	x0, [sp, #40]
    b800:	add	x2, x0, #0x20
    b804:	add	x0, sp, #0x68
    b808:	mov	w3, #0x1                   	// #1
    b80c:	bl	4c40 <mpfr_mul@plt>
    b810:	add	x1, sp, #0x68
    b814:	add	x0, sp, #0xc8
    b818:	bl	b660 <mpc_exp@@Base+0x80c>
    b81c:	str	x0, [sp, #272]
    b820:	ldr	x1, [sp, #32]
    b824:	add	x0, sp, #0xc8
    b828:	bl	b660 <mpc_exp@@Base+0x80c>
    b82c:	str	x0, [sp, #264]
    b830:	ldr	x1, [sp, #32]
    b834:	add	x0, sp, #0x68
    b838:	bl	b660 <mpc_exp@@Base+0x80c>
    b83c:	str	x0, [sp, #256]
    b840:	ldr	x1, [sp, #272]
    b844:	ldr	x0, [sp, #264]
    b848:	cmp	x1, x0
    b84c:	b.gt	b8b0 <mpc_fma_naive@@Base+0x18c>
    b850:	ldr	x1, [sp, #272]
    b854:	ldr	x0, [sp, #256]
    b858:	cmp	x1, x0
    b85c:	b.gt	b8b0 <mpc_fma_naive@@Base+0x18c>
    b860:	add	x0, sp, #0x48
    b864:	ldr	x1, [sp, #272]
    b868:	bl	5530 <mpfr_init2@plt>
    b86c:	add	x2, sp, #0x68
    b870:	add	x1, sp, #0xc8
    b874:	add	x0, sp, #0x48
    b878:	mov	w3, #0x1                   	// #1
    b87c:	bl	4b30 <mpfr_sub@plt>
    b880:	ldr	x4, [sp, #56]
    b884:	ldr	x1, [sp, #32]
    b888:	ldr	w0, [sp, #28]
    b88c:	and	w2, w0, #0xf
    b890:	add	x0, sp, #0x48
    b894:	mov	w3, w2
    b898:	mov	x2, x1
    b89c:	mov	x1, x0
    b8a0:	mov	x0, x4
    b8a4:	bl	4f50 <mpfr_add@plt>
    b8a8:	str	w0, [sp, #284]
    b8ac:	b	b95c <mpc_fma_naive@@Base+0x238>
    b8b0:	ldr	x1, [sp, #264]
    b8b4:	ldr	x0, [sp, #256]
    b8b8:	cmp	x1, x0
    b8bc:	b.gt	b910 <mpc_fma_naive@@Base+0x1ec>
    b8c0:	add	x0, sp, #0x48
    b8c4:	ldr	x1, [sp, #264]
    b8c8:	bl	5530 <mpfr_init2@plt>
    b8cc:	ldr	x2, [sp, #32]
    b8d0:	add	x1, sp, #0xc8
    b8d4:	add	x0, sp, #0x48
    b8d8:	mov	w3, #0x1                   	// #1
    b8dc:	bl	4f50 <mpfr_add@plt>
    b8e0:	ldr	x4, [sp, #56]
    b8e4:	ldr	w0, [sp, #28]
    b8e8:	and	w2, w0, #0xf
    b8ec:	add	x1, sp, #0x68
    b8f0:	add	x0, sp, #0x48
    b8f4:	mov	w3, w2
    b8f8:	mov	x2, x1
    b8fc:	mov	x1, x0
    b900:	mov	x0, x4
    b904:	bl	4b30 <mpfr_sub@plt>
    b908:	str	w0, [sp, #284]
    b90c:	b	b95c <mpc_fma_naive@@Base+0x238>
    b910:	add	x0, sp, #0x48
    b914:	ldr	x1, [sp, #256]
    b918:	bl	5530 <mpfr_init2@plt>
    b91c:	ldr	x1, [sp, #32]
    b920:	add	x2, sp, #0x68
    b924:	add	x0, sp, #0x48
    b928:	mov	w3, #0x1                   	// #1
    b92c:	bl	4b30 <mpfr_sub@plt>
    b930:	ldr	x4, [sp, #56]
    b934:	ldr	w0, [sp, #28]
    b938:	and	w2, w0, #0xf
    b93c:	add	x1, sp, #0xc8
    b940:	add	x0, sp, #0x48
    b944:	mov	w3, w2
    b948:	mov	x2, x1
    b94c:	mov	x1, x0
    b950:	mov	x0, x4
    b954:	bl	4f50 <mpfr_add@plt>
    b958:	str	w0, [sp, #284]
    b95c:	add	x1, sp, #0x88
    b960:	add	x0, sp, #0xa8
    b964:	bl	b660 <mpc_exp@@Base+0x80c>
    b968:	str	x0, [sp, #248]
    b96c:	ldr	x0, [sp, #32]
    b970:	add	x1, x0, #0x20
    b974:	add	x0, sp, #0xa8
    b978:	bl	b660 <mpc_exp@@Base+0x80c>
    b97c:	str	x0, [sp, #240]
    b980:	ldr	x0, [sp, #32]
    b984:	add	x1, x0, #0x20
    b988:	add	x0, sp, #0x88
    b98c:	bl	b660 <mpc_exp@@Base+0x80c>
    b990:	str	x0, [sp, #232]
    b994:	ldr	x1, [sp, #248]
    b998:	ldr	x0, [sp, #240]
    b99c:	cmp	x1, x0
    b9a0:	b.gt	ba0c <mpc_fma_naive@@Base+0x2e8>
    b9a4:	ldr	x1, [sp, #248]
    b9a8:	ldr	x0, [sp, #232]
    b9ac:	cmp	x1, x0
    b9b0:	b.gt	ba0c <mpc_fma_naive@@Base+0x2e8>
    b9b4:	add	x0, sp, #0x48
    b9b8:	ldr	x1, [sp, #248]
    b9bc:	bl	4d40 <mpfr_set_prec@plt>
    b9c0:	add	x2, sp, #0x88
    b9c4:	add	x1, sp, #0xa8
    b9c8:	add	x0, sp, #0x48
    b9cc:	mov	w3, #0x1                   	// #1
    b9d0:	bl	4f50 <mpfr_add@plt>
    b9d4:	ldr	x0, [sp, #56]
    b9d8:	add	x4, x0, #0x20
    b9dc:	ldr	x0, [sp, #32]
    b9e0:	add	x1, x0, #0x20
    b9e4:	ldr	w0, [sp, #28]
    b9e8:	asr	w2, w0, #4
    b9ec:	add	x0, sp, #0x48
    b9f0:	mov	w3, w2
    b9f4:	mov	x2, x1
    b9f8:	mov	x1, x0
    b9fc:	mov	x0, x4
    ba00:	bl	4f50 <mpfr_add@plt>
    ba04:	str	w0, [sp, #280]
    ba08:	b	bac8 <mpc_fma_naive@@Base+0x3a4>
    ba0c:	ldr	x1, [sp, #240]
    ba10:	ldr	x0, [sp, #232]
    ba14:	cmp	x1, x0
    ba18:	b.gt	ba74 <mpc_fma_naive@@Base+0x350>
    ba1c:	add	x0, sp, #0x48
    ba20:	ldr	x1, [sp, #240]
    ba24:	bl	4d40 <mpfr_set_prec@plt>
    ba28:	ldr	x0, [sp, #32]
    ba2c:	add	x2, x0, #0x20
    ba30:	add	x1, sp, #0xa8
    ba34:	add	x0, sp, #0x48
    ba38:	mov	w3, #0x1                   	// #1
    ba3c:	bl	4f50 <mpfr_add@plt>
    ba40:	ldr	x0, [sp, #56]
    ba44:	add	x4, x0, #0x20
    ba48:	ldr	w0, [sp, #28]
    ba4c:	asr	w2, w0, #4
    ba50:	add	x1, sp, #0x88
    ba54:	add	x0, sp, #0x48
    ba58:	mov	w3, w2
    ba5c:	mov	x2, x1
    ba60:	mov	x1, x0
    ba64:	mov	x0, x4
    ba68:	bl	4f50 <mpfr_add@plt>
    ba6c:	str	w0, [sp, #280]
    ba70:	b	bac8 <mpc_fma_naive@@Base+0x3a4>
    ba74:	add	x0, sp, #0x48
    ba78:	ldr	x1, [sp, #256]
    ba7c:	bl	4d40 <mpfr_set_prec@plt>
    ba80:	ldr	x0, [sp, #32]
    ba84:	add	x1, x0, #0x20
    ba88:	add	x2, sp, #0x88
    ba8c:	add	x0, sp, #0x48
    ba90:	mov	w3, #0x1                   	// #1
    ba94:	bl	4f50 <mpfr_add@plt>
    ba98:	ldr	x0, [sp, #56]
    ba9c:	add	x4, x0, #0x20
    baa0:	ldr	w0, [sp, #28]
    baa4:	asr	w2, w0, #4
    baa8:	add	x1, sp, #0xa8
    baac:	add	x0, sp, #0x48
    bab0:	mov	w3, w2
    bab4:	mov	x2, x1
    bab8:	mov	x1, x0
    babc:	mov	x0, x4
    bac0:	bl	4f50 <mpfr_add@plt>
    bac4:	str	w0, [sp, #280]
    bac8:	add	x0, sp, #0xc8
    bacc:	bl	4e30 <mpfr_clear@plt>
    bad0:	add	x0, sp, #0xa8
    bad4:	bl	4e30 <mpfr_clear@plt>
    bad8:	add	x0, sp, #0x88
    badc:	bl	4e30 <mpfr_clear@plt>
    bae0:	add	x0, sp, #0x68
    bae4:	bl	4e30 <mpfr_clear@plt>
    bae8:	add	x0, sp, #0x48
    baec:	bl	4e30 <mpfr_clear@plt>
    baf0:	ldr	w0, [sp, #284]
    baf4:	cmp	w0, #0x0
    baf8:	b.lt	bb14 <mpc_fma_naive@@Base+0x3f0>  // b.tstop
    bafc:	ldr	w0, [sp, #284]
    bb00:	cmp	w0, #0x0
    bb04:	cset	w0, ne  // ne = any
    bb08:	and	w0, w0, #0xff
    bb0c:	mov	w1, w0
    bb10:	b	bb18 <mpc_fma_naive@@Base+0x3f4>
    bb14:	mov	w1, #0x2                   	// #2
    bb18:	ldr	w0, [sp, #280]
    bb1c:	cmp	w0, #0x0
    bb20:	b.lt	bb40 <mpc_fma_naive@@Base+0x41c>  // b.tstop
    bb24:	ldr	w0, [sp, #280]
    bb28:	cmp	w0, #0x0
    bb2c:	b.eq	bb38 <mpc_fma_naive@@Base+0x414>  // b.none
    bb30:	mov	w0, #0x4                   	// #4
    bb34:	b	bb44 <mpc_fma_naive@@Base+0x420>
    bb38:	mov	w0, #0x0                   	// #0
    bb3c:	b	bb44 <mpc_fma_naive@@Base+0x420>
    bb40:	mov	w0, #0x8                   	// #8
    bb44:	orr	w0, w1, w0
    bb48:	ldp	x29, x30, [sp], #288
    bb4c:	ret

000000000000bb50 <mpc_fma@@Base>:
    bb50:	stp	x29, x30, [sp, #-192]!
    bb54:	mov	x29, sp
    bb58:	str	x0, [sp, #56]
    bb5c:	str	x1, [sp, #48]
    bb60:	str	x2, [sp, #40]
    bb64:	str	x3, [sp, #32]
    bb68:	str	w4, [sp, #28]
    bb6c:	str	wzr, [sp, #168]
    bb70:	str	wzr, [sp, #164]
    bb74:	str	wzr, [sp, #160]
    bb78:	ldr	x0, [sp, #48]
    bb7c:	bl	55c0 <mpfr_number_p@plt>
    bb80:	cmp	w0, #0x0
    bb84:	b.eq	bba4 <mpc_fma@@Base+0x54>  // b.none
    bb88:	ldr	x0, [sp, #48]
    bb8c:	add	x0, x0, #0x20
    bb90:	bl	55c0 <mpfr_number_p@plt>
    bb94:	cmp	w0, #0x0
    bb98:	b.eq	bba4 <mpc_fma@@Base+0x54>  // b.none
    bb9c:	mov	w0, #0x1                   	// #1
    bba0:	b	bba8 <mpc_fma@@Base+0x58>
    bba4:	mov	w0, #0x0                   	// #0
    bba8:	cmp	w0, #0x0
    bbac:	b.eq	bc20 <mpc_fma@@Base+0xd0>  // b.none
    bbb0:	ldr	x0, [sp, #40]
    bbb4:	bl	55c0 <mpfr_number_p@plt>
    bbb8:	cmp	w0, #0x0
    bbbc:	b.eq	bbdc <mpc_fma@@Base+0x8c>  // b.none
    bbc0:	ldr	x0, [sp, #40]
    bbc4:	add	x0, x0, #0x20
    bbc8:	bl	55c0 <mpfr_number_p@plt>
    bbcc:	cmp	w0, #0x0
    bbd0:	b.eq	bbdc <mpc_fma@@Base+0x8c>  // b.none
    bbd4:	mov	w0, #0x1                   	// #1
    bbd8:	b	bbe0 <mpc_fma@@Base+0x90>
    bbdc:	mov	w0, #0x0                   	// #0
    bbe0:	cmp	w0, #0x0
    bbe4:	b.eq	bc20 <mpc_fma@@Base+0xd0>  // b.none
    bbe8:	ldr	x0, [sp, #32]
    bbec:	bl	55c0 <mpfr_number_p@plt>
    bbf0:	cmp	w0, #0x0
    bbf4:	b.eq	bc14 <mpc_fma@@Base+0xc4>  // b.none
    bbf8:	ldr	x0, [sp, #32]
    bbfc:	add	x0, x0, #0x20
    bc00:	bl	55c0 <mpfr_number_p@plt>
    bc04:	cmp	w0, #0x0
    bc08:	b.eq	bc14 <mpc_fma@@Base+0xc4>  // b.none
    bc0c:	mov	w0, #0x1                   	// #1
    bc10:	b	bc18 <mpc_fma@@Base+0xc8>
    bc14:	mov	w0, #0x0                   	// #0
    bc18:	cmp	w0, #0x0
    bc1c:	b.ne	bc3c <mpc_fma@@Base+0xec>  // b.any
    bc20:	ldr	w4, [sp, #28]
    bc24:	ldr	x3, [sp, #32]
    bc28:	ldr	x2, [sp, #40]
    bc2c:	ldr	x1, [sp, #48]
    bc30:	ldr	x0, [sp, #56]
    bc34:	bl	5660 <mpc_fma_naive@plt>
    bc38:	b	bf44 <mpc_fma@@Base+0x3f4>
    bc3c:	ldr	x0, [sp, #56]
    bc40:	ldr	x0, [x0]
    bc44:	str	x0, [sp, #152]
    bc48:	ldr	x0, [sp, #56]
    bc4c:	ldr	x0, [x0, #32]
    bc50:	str	x0, [sp, #144]
    bc54:	ldr	x0, [sp, #152]
    bc58:	bl	4de0 <mpc_ceil_log2@plt>
    bc5c:	mov	x1, x0
    bc60:	ldr	x0, [sp, #152]
    bc64:	add	x0, x1, x0
    bc68:	add	x0, x0, #0xa
    bc6c:	str	x0, [sp, #184]
    bc70:	ldr	x0, [sp, #144]
    bc74:	bl	4de0 <mpc_ceil_log2@plt>
    bc78:	mov	x1, x0
    bc7c:	ldr	x0, [sp, #144]
    bc80:	add	x0, x1, x0
    bc84:	add	x0, x0, #0xa
    bc88:	str	x0, [sp, #176]
    bc8c:	add	x0, sp, #0x40
    bc90:	ldr	x2, [sp, #176]
    bc94:	ldr	x1, [sp, #184]
    bc98:	bl	54c0 <mpc_init3@plt>
    bc9c:	str	wzr, [sp, #172]
    bca0:	b	bef0 <mpc_fma@@Base+0x3a0>
    bca4:	add	x0, sp, #0x40
    bca8:	mov	w3, #0x11                  	// #17
    bcac:	ldr	x2, [sp, #40]
    bcb0:	ldr	x1, [sp, #48]
    bcb4:	bl	4fd0 <mpc_mul@plt>
    bcb8:	ldr	x1, [sp, #80]
    bcbc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    bcc0:	cmp	x1, x0
    bcc4:	b.eq	bf04 <mpc_fma@@Base+0x3b4>  // b.none
    bcc8:	ldr	x1, [sp, #112]
    bccc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    bcd0:	cmp	x1, x0
    bcd4:	b.eq	bf04 <mpc_fma@@Base+0x3b4>  // b.none
    bcd8:	ldr	x0, [sp, #80]
    bcdc:	str	x0, [sp, #136]
    bce0:	ldr	x0, [sp, #112]
    bce4:	str	x0, [sp, #128]
    bce8:	add	x1, sp, #0x40
    bcec:	add	x0, sp, #0x40
    bcf0:	mov	w3, #0x11                  	// #17
    bcf4:	ldr	x2, [sp, #32]
    bcf8:	bl	4d90 <mpc_add@plt>
    bcfc:	ldr	x1, [sp, #80]
    bd00:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    bd04:	cmp	x1, x0
    bd08:	b.eq	bf04 <mpc_fma@@Base+0x3b4>  // b.none
    bd0c:	ldr	x1, [sp, #112]
    bd10:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    bd14:	cmp	x1, x0
    bd18:	b.eq	bf04 <mpc_fma@@Base+0x3b4>  // b.none
    bd1c:	ldr	x0, [sp, #80]
    bd20:	ldr	x1, [sp, #136]
    bd24:	sub	x0, x1, x0
    bd28:	str	x0, [sp, #136]
    bd2c:	ldr	x0, [sp, #112]
    bd30:	ldr	x1, [sp, #128]
    bd34:	sub	x0, x1, x0
    bd38:	str	x0, [sp, #128]
    bd3c:	ldr	x1, [sp, #136]
    bd40:	ldr	x0, [sp, #136]
    bd44:	mov	x2, #0x0                   	// #0
    bd48:	cmp	x1, #0x0
    bd4c:	csel	x0, x0, x2, ge  // ge = tcont
    bd50:	add	x0, x0, #0x1
    bd54:	str	x0, [sp, #136]
    bd58:	ldr	x1, [sp, #128]
    bd5c:	ldr	x0, [sp, #128]
    bd60:	mov	x2, #0x0                   	// #0
    bd64:	cmp	x1, #0x0
    bd68:	csel	x0, x0, x2, ge  // ge = tcont
    bd6c:	add	x0, x0, #0x1
    bd70:	str	x0, [sp, #128]
    bd74:	ldr	x1, [sp, #136]
    bd78:	ldr	x0, [sp, #184]
    bd7c:	cmp	x1, x0
    bd80:	b.gt	bdcc <mpc_fma@@Base+0x27c>
    bd84:	ldr	x1, [sp, #184]
    bd88:	ldr	x0, [sp, #136]
    bd8c:	sub	x5, x1, x0
    bd90:	ldr	w0, [sp, #28]
    bd94:	and	w0, w0, #0xf
    bd98:	cmp	w0, #0x0
    bd9c:	cset	w0, eq  // eq = none
    bda0:	and	w0, w0, #0xff
    bda4:	and	x1, x0, #0xff
    bda8:	ldr	x0, [sp, #152]
    bdac:	add	x1, x1, x0
    bdb0:	add	x0, sp, #0x40
    bdb4:	mov	x4, x1
    bdb8:	mov	w3, #0x1                   	// #1
    bdbc:	mov	w2, #0x0                   	// #0
    bdc0:	mov	x1, x5
    bdc4:	bl	5540 <mpfr_can_round@plt>
    bdc8:	b	bdd0 <mpc_fma@@Base+0x280>
    bdcc:	mov	w0, #0x0                   	// #0
    bdd0:	str	w0, [sp, #164]
    bdd4:	ldr	x1, [sp, #128]
    bdd8:	ldr	x0, [sp, #176]
    bddc:	cmp	x1, x0
    bde0:	b.gt	be30 <mpc_fma@@Base+0x2e0>
    bde4:	ldr	x1, [sp, #176]
    bde8:	ldr	x0, [sp, #128]
    bdec:	sub	x5, x1, x0
    bdf0:	ldr	w0, [sp, #28]
    bdf4:	asr	w0, w0, #4
    bdf8:	cmp	w0, #0x0
    bdfc:	cset	w0, eq  // eq = none
    be00:	and	w0, w0, #0xff
    be04:	and	x1, x0, #0xff
    be08:	ldr	x0, [sp, #144]
    be0c:	add	x1, x1, x0
    be10:	add	x0, sp, #0x40
    be14:	add	x0, x0, #0x20
    be18:	mov	x4, x1
    be1c:	mov	w3, #0x1                   	// #1
    be20:	mov	w2, #0x0                   	// #0
    be24:	mov	x1, x5
    be28:	bl	5540 <mpfr_can_round@plt>
    be2c:	b	be34 <mpc_fma@@Base+0x2e4>
    be30:	mov	w0, #0x0                   	// #0
    be34:	str	w0, [sp, #160]
    be38:	ldr	w0, [sp, #164]
    be3c:	cmp	w0, #0x0
    be40:	b.eq	be6c <mpc_fma@@Base+0x31c>  // b.none
    be44:	ldr	w0, [sp, #160]
    be48:	cmp	w0, #0x0
    be4c:	b.eq	be6c <mpc_fma@@Base+0x31c>  // b.none
    be50:	add	x0, sp, #0x40
    be54:	ldr	w2, [sp, #28]
    be58:	mov	x1, x0
    be5c:	ldr	x0, [sp, #56]
    be60:	bl	5680 <mpc_set@plt>
    be64:	str	w0, [sp, #168]
    be68:	b	bf04 <mpc_fma@@Base+0x3b4>
    be6c:	ldr	w0, [sp, #172]
    be70:	cmp	w0, #0x1
    be74:	b.eq	bf00 <mpc_fma@@Base+0x3b0>  // b.none
    be78:	ldr	w0, [sp, #164]
    be7c:	cmp	w0, #0x0
    be80:	b.ne	bea0 <mpc_fma@@Base+0x350>  // b.any
    be84:	ldr	x0, [sp, #136]
    be88:	cmp	x0, #0x1
    be8c:	b.le	bea0 <mpc_fma@@Base+0x350>
    be90:	ldr	x1, [sp, #184]
    be94:	ldr	x0, [sp, #136]
    be98:	add	x0, x1, x0
    be9c:	str	x0, [sp, #184]
    bea0:	ldr	w0, [sp, #160]
    bea4:	cmp	w0, #0x0
    bea8:	b.ne	bec8 <mpc_fma@@Base+0x378>  // b.any
    beac:	ldr	x0, [sp, #128]
    beb0:	cmp	x0, #0x1
    beb4:	b.le	bec8 <mpc_fma@@Base+0x378>
    beb8:	ldr	x1, [sp, #176]
    bebc:	ldr	x0, [sp, #128]
    bec0:	add	x0, x1, x0
    bec4:	str	x0, [sp, #176]
    bec8:	add	x0, sp, #0x40
    becc:	ldr	x1, [sp, #184]
    bed0:	bl	4d40 <mpfr_set_prec@plt>
    bed4:	add	x0, sp, #0x40
    bed8:	add	x0, x0, #0x20
    bedc:	ldr	x1, [sp, #176]
    bee0:	bl	4d40 <mpfr_set_prec@plt>
    bee4:	ldr	w0, [sp, #172]
    bee8:	add	w0, w0, #0x1
    beec:	str	w0, [sp, #172]
    bef0:	ldr	w0, [sp, #172]
    bef4:	cmp	w0, #0x1
    bef8:	b.le	bca4 <mpc_fma@@Base+0x154>
    befc:	b	bf04 <mpc_fma@@Base+0x3b4>
    bf00:	nop
    bf04:	add	x0, sp, #0x40
    bf08:	bl	4ae0 <mpc_clear@plt>
    bf0c:	ldr	w0, [sp, #164]
    bf10:	cmp	w0, #0x0
    bf14:	b.eq	bf24 <mpc_fma@@Base+0x3d4>  // b.none
    bf18:	ldr	w0, [sp, #160]
    bf1c:	cmp	w0, #0x0
    bf20:	b.ne	bf40 <mpc_fma@@Base+0x3f0>  // b.any
    bf24:	ldr	w4, [sp, #28]
    bf28:	ldr	x3, [sp, #32]
    bf2c:	ldr	x2, [sp, #40]
    bf30:	ldr	x1, [sp, #48]
    bf34:	ldr	x0, [sp, #56]
    bf38:	bl	5660 <mpc_fma_naive@plt>
    bf3c:	b	bf44 <mpc_fma@@Base+0x3f4>
    bf40:	ldr	w0, [sp, #168]
    bf44:	ldp	x29, x30, [sp], #192
    bf48:	ret

000000000000bf4c <mpc_fr_div@@Base>:
    bf4c:	stp	x29, x30, [sp, #-128]!
    bf50:	mov	x29, sp
    bf54:	str	x0, [sp, #40]
    bf58:	str	x1, [sp, #32]
    bf5c:	str	x2, [sp, #24]
    bf60:	str	w3, [sp, #20]
    bf64:	ldr	x0, [sp, #32]
    bf68:	add	x2, sp, #0x30
    bf6c:	mov	x3, x0
    bf70:	ldp	x0, x1, [x3]
    bf74:	stp	x0, x1, [x2]
    bf78:	ldp	x0, x1, [x3, #16]
    bf7c:	stp	x0, x1, [x2, #16]
    bf80:	add	x0, sp, #0x30
    bf84:	add	x0, x0, #0x20
    bf88:	bl	4b70 <mpfr_init@plt>
    bf8c:	add	x0, sp, #0x30
    bf90:	add	x0, x0, #0x20
    bf94:	str	x0, [sp, #120]
    bf98:	ldr	x0, [sp, #120]
    bf9c:	mov	w1, #0x1                   	// #1
    bfa0:	str	w1, [x0, #8]
    bfa4:	ldr	x0, [sp, #120]
    bfa8:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
    bfac:	str	x1, [x0, #16]
    bfb0:	add	x0, sp, #0x30
    bfb4:	ldr	w3, [sp, #20]
    bfb8:	ldr	x2, [sp, #24]
    bfbc:	mov	x1, x0
    bfc0:	ldr	x0, [sp, #40]
    bfc4:	bl	5350 <mpc_div@plt>
    bfc8:	str	w0, [sp, #116]
    bfcc:	add	x0, sp, #0x30
    bfd0:	add	x0, x0, #0x20
    bfd4:	bl	4e30 <mpfr_clear@plt>
    bfd8:	ldr	w0, [sp, #116]
    bfdc:	ldp	x29, x30, [sp], #128
    bfe0:	ret

000000000000bfe4 <mpc_fr_sub@@Base>:
    bfe4:	stp	x29, x30, [sp, #-64]!
    bfe8:	mov	x29, sp
    bfec:	str	x0, [sp, #40]
    bff0:	str	x1, [sp, #32]
    bff4:	str	x2, [sp, #24]
    bff8:	str	w3, [sp, #20]
    bffc:	ldr	x4, [sp, #40]
    c000:	ldr	x1, [sp, #24]
    c004:	ldr	w0, [sp, #20]
    c008:	and	w0, w0, #0xf
    c00c:	mov	w3, w0
    c010:	mov	x2, x1
    c014:	ldr	x1, [sp, #32]
    c018:	mov	x0, x4
    c01c:	bl	4b30 <mpfr_sub@plt>
    c020:	str	w0, [sp, #60]
    c024:	ldr	x0, [sp, #40]
    c028:	add	x3, x0, #0x20
    c02c:	ldr	x0, [sp, #24]
    c030:	add	x1, x0, #0x20
    c034:	ldr	w0, [sp, #20]
    c038:	asr	w0, w0, #4
    c03c:	mov	w2, w0
    c040:	mov	x0, x3
    c044:	bl	4c50 <mpfr_neg@plt>
    c048:	str	w0, [sp, #56]
    c04c:	ldr	w0, [sp, #60]
    c050:	cmp	w0, #0x0
    c054:	b.lt	c070 <mpc_fr_sub@@Base+0x8c>  // b.tstop
    c058:	ldr	w0, [sp, #60]
    c05c:	cmp	w0, #0x0
    c060:	cset	w0, ne  // ne = any
    c064:	and	w0, w0, #0xff
    c068:	mov	w1, w0
    c06c:	b	c074 <mpc_fr_sub@@Base+0x90>
    c070:	mov	w1, #0x2                   	// #2
    c074:	ldr	w0, [sp, #56]
    c078:	cmp	w0, #0x0
    c07c:	b.lt	c09c <mpc_fr_sub@@Base+0xb8>  // b.tstop
    c080:	ldr	w0, [sp, #56]
    c084:	cmp	w0, #0x0
    c088:	b.eq	c094 <mpc_fr_sub@@Base+0xb0>  // b.none
    c08c:	mov	w0, #0x4                   	// #4
    c090:	b	c0a0 <mpc_fr_sub@@Base+0xbc>
    c094:	mov	w0, #0x0                   	// #0
    c098:	b	c0a0 <mpc_fr_sub@@Base+0xbc>
    c09c:	mov	w0, #0x8                   	// #8
    c0a0:	orr	w0, w1, w0
    c0a4:	ldp	x29, x30, [sp], #64
    c0a8:	ret

000000000000c0ac <mpc_get_prec2@@Base>:
    c0ac:	sub	sp, sp, #0x20
    c0b0:	str	x0, [sp, #24]
    c0b4:	str	x1, [sp, #16]
    c0b8:	str	x2, [sp, #8]
    c0bc:	ldr	x0, [sp, #8]
    c0c0:	ldr	x1, [x0]
    c0c4:	ldr	x0, [sp, #24]
    c0c8:	str	x1, [x0]
    c0cc:	ldr	x0, [sp, #8]
    c0d0:	ldr	x1, [x0, #32]
    c0d4:	ldr	x0, [sp, #16]
    c0d8:	str	x1, [x0]
    c0dc:	nop
    c0e0:	add	sp, sp, #0x20
    c0e4:	ret

000000000000c0e8 <mpc_get_prec@@Base>:
    c0e8:	sub	sp, sp, #0x20
    c0ec:	str	x0, [sp, #8]
    c0f0:	ldr	x0, [sp, #8]
    c0f4:	ldr	x0, [x0]
    c0f8:	str	x0, [sp, #24]
    c0fc:	ldr	x0, [sp, #8]
    c100:	ldr	x0, [x0, #32]
    c104:	ldr	x1, [sp, #24]
    c108:	cmp	x1, x0
    c10c:	b.ne	c118 <mpc_get_prec@@Base+0x30>  // b.any
    c110:	ldr	x0, [sp, #24]
    c114:	b	c11c <mpc_get_prec@@Base+0x34>
    c118:	mov	x0, #0x0                   	// #0
    c11c:	add	sp, sp, #0x20
    c120:	ret

000000000000c124 <mpc_get_version@@Base>:
    c124:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    c128:	add	x0, x0, #0xfc0
    c12c:	ret

000000000000c130 <mpc_get_dc@@Base>:
    c130:	stp	x29, x30, [sp, #-48]!
    c134:	mov	x29, sp
    c138:	stp	d8, d9, [sp, #16]
    c13c:	str	x0, [sp, #40]
    c140:	str	w1, [sp, #36]
    c144:	ldr	x0, [sp, #40]
    c148:	add	x2, x0, #0x20
    c14c:	ldr	w0, [sp, #36]
    c150:	asr	w0, w0, #4
    c154:	mov	w1, w0
    c158:	mov	x0, x2
    c15c:	bl	4c20 <mpfr_get_d@plt>
    c160:	fmov	d9, d0
    c164:	movi	d0, #0x0
    c168:	fmul	d8, d9, d0
    c16c:	ldr	x2, [sp, #40]
    c170:	ldr	w0, [sp, #36]
    c174:	and	w0, w0, #0xf
    c178:	mov	w1, w0
    c17c:	mov	x0, x2
    c180:	bl	4c20 <mpfr_get_d@plt>
    c184:	fadd	d0, d8, d0
    c188:	fmov	d1, d9
    c18c:	ldp	d8, d9, [sp, #16]
    c190:	ldp	x29, x30, [sp], #48
    c194:	ret

000000000000c198 <mpc_get_ldc@@Base>:
    c198:	stp	x29, x30, [sp, #-64]!
    c19c:	mov	x29, sp
    c1a0:	str	x0, [sp, #56]
    c1a4:	str	w1, [sp, #52]
    c1a8:	ldr	x0, [sp, #56]
    c1ac:	add	x2, x0, #0x20
    c1b0:	ldr	w0, [sp, #52]
    c1b4:	asr	w0, w0, #4
    c1b8:	mov	w1, w0
    c1bc:	mov	x0, x2
    c1c0:	bl	5210 <mpfr_get_ld@plt>
    c1c4:	movi	v1.2d, #0x0
    c1c8:	str	q0, [sp, #32]
    c1cc:	bl	1a638 <mpc_ui_ui_sub@@Base+0xbfc>
    c1d0:	str	q0, [sp, #16]
    c1d4:	ldr	x2, [sp, #56]
    c1d8:	ldr	w0, [sp, #52]
    c1dc:	and	w0, w0, #0xf
    c1e0:	mov	w1, w0
    c1e4:	mov	x0, x2
    c1e8:	bl	5210 <mpfr_get_ld@plt>
    c1ec:	mov	v1.16b, v0.16b
    c1f0:	ldr	q0, [sp, #16]
    c1f4:	bl	19b10 <mpc_ui_ui_sub@@Base+0xd4>
    c1f8:	ldr	q2, [sp, #32]
    c1fc:	mov	v1.16b, v2.16b
    c200:	ldp	x29, x30, [sp], #64
    c204:	ret
    c208:	stp	x29, x30, [sp, #-48]!
    c20c:	mov	x29, sp
    c210:	str	x0, [sp, #24]
    c214:	mov	x0, #0x3                   	// #3
    c218:	bl	4cc0 <mpc_alloc_str@plt>
    c21c:	str	x0, [sp, #40]
    c220:	ldr	x0, [sp, #24]
    c224:	ldr	w0, [x0, #8]
    c228:	cmp	w0, #0x0
    c22c:	b.ge	c238 <mpc_get_ldc@@Base+0xa0>  // b.tcont
    c230:	mov	w0, #0x2d                  	// #45
    c234:	b	c23c <mpc_get_ldc@@Base+0xa4>
    c238:	mov	w0, #0x2b                  	// #43
    c23c:	ldr	x1, [sp, #40]
    c240:	strb	w0, [x1]
    c244:	ldr	x0, [sp, #40]
    c248:	add	x0, x0, #0x1
    c24c:	mov	w1, #0x30                  	// #48
    c250:	strb	w1, [x0]
    c254:	ldr	x0, [sp, #40]
    c258:	add	x0, x0, #0x2
    c25c:	strb	wzr, [x0]
    c260:	ldr	x0, [sp, #40]
    c264:	ldp	x29, x30, [sp], #48
    c268:	ret
    c26c:	stp	x29, x30, [sp, #-112]!
    c270:	mov	x29, sp
    c274:	str	x0, [sp, #40]
    c278:	str	x1, [sp, #32]
    c27c:	str	w2, [sp, #28]
    c280:	str	w3, [sp, #24]
    c284:	ldr	x0, [sp, #40]
    c288:	bl	4ad0 <strlen@plt>
    c28c:	add	x0, x0, #0x1
    c290:	str	x0, [sp, #104]
    c294:	ldr	w0, [sp, #24]
    c298:	cmp	w0, #0x0
    c29c:	b.eq	c2c0 <mpc_get_ldc@@Base+0x128>  // b.none
    c2a0:	ldr	x0, [sp, #104]
    c2a4:	bl	4cc0 <mpc_alloc_str@plt>
    c2a8:	str	x0, [sp, #56]
    c2ac:	ldr	x1, [sp, #40]
    c2b0:	ldr	x0, [sp, #56]
    c2b4:	bl	5440 <strcpy@plt>
    c2b8:	ldr	x0, [sp, #56]
    c2bc:	b	c52c <mpc_get_ldc@@Base+0x394>
    c2c0:	ldr	x0, [sp, #40]
    c2c4:	ldrb	w0, [x0]
    c2c8:	cmp	w0, #0x2d
    c2cc:	b.eq	c2e0 <mpc_get_ldc@@Base+0x148>  // b.none
    c2d0:	ldr	x0, [sp, #40]
    c2d4:	ldrb	w0, [x0]
    c2d8:	cmp	w0, #0x2b
    c2dc:	b.ne	c2e8 <mpc_get_ldc@@Base+0x150>  // b.any
    c2e0:	mov	w0, #0x1                   	// #1
    c2e4:	b	c2ec <mpc_get_ldc@@Base+0x154>
    c2e8:	mov	w0, #0x0                   	// #0
    c2ec:	str	w0, [sp, #68]
    c2f0:	ldr	x0, [sp, #32]
    c2f4:	sub	x0, x0, #0x1
    c2f8:	str	x0, [sp, #80]
    c2fc:	ldr	w0, [sp, #28]
    c300:	cmp	w0, #0x10
    c304:	b.ne	c314 <mpc_get_ldc@@Base+0x17c>  // b.any
    c308:	ldr	x0, [sp, #80]
    c30c:	lsl	x0, x0, #2
    c310:	str	x0, [sp, #80]
    c314:	ldr	x0, [sp, #104]
    c318:	add	x0, x0, #0x1
    c31c:	str	x0, [sp, #104]
    c320:	ldr	x0, [sp, #80]
    c324:	cmp	x0, #0x0
    c328:	b.eq	c3d4 <mpc_get_ldc@@Base+0x23c>  // b.none
    c32c:	ldr	x0, [sp, #104]
    c330:	add	x0, x0, #0x3
    c334:	str	x0, [sp, #104]
    c338:	ldr	x0, [sp, #80]
    c33c:	cmp	x0, #0x0
    c340:	b.ge	c390 <mpc_get_ldc@@Base+0x1f8>  // b.tcont
    c344:	ldr	x0, [sp, #80]
    c348:	cmn	x0, #0xa
    c34c:	b.ge	c380 <mpc_get_ldc@@Base+0x1e8>  // b.tcont
    c350:	ldr	x0, [sp, #80]
    c354:	mov	x1, #0x6666666666666666    	// #7378697629483820646
    c358:	movk	x1, #0x6667
    c35c:	smulh	x1, x0, x1
    c360:	asr	x1, x1, #2
    c364:	asr	x0, x0, #63
    c368:	sub	x0, x0, x1
    c36c:	str	x0, [sp, #72]
    c370:	ldr	x0, [sp, #104]
    c374:	add	x0, x0, #0x1
    c378:	str	x0, [sp, #104]
    c37c:	b	c3c8 <mpc_get_ldc@@Base+0x230>
    c380:	ldr	x0, [sp, #80]
    c384:	neg	x0, x0
    c388:	str	x0, [sp, #72]
    c38c:	b	c3c8 <mpc_get_ldc@@Base+0x230>
    c390:	ldr	x0, [sp, #80]
    c394:	str	x0, [sp, #72]
    c398:	b	c3c8 <mpc_get_ldc@@Base+0x230>
    c39c:	ldr	x0, [sp, #104]
    c3a0:	add	x0, x0, #0x1
    c3a4:	str	x0, [sp, #104]
    c3a8:	ldr	x0, [sp, #72]
    c3ac:	mov	x1, #0x6666666666666666    	// #7378697629483820646
    c3b0:	movk	x1, #0x6667
    c3b4:	smulh	x1, x0, x1
    c3b8:	asr	x1, x1, #2
    c3bc:	asr	x0, x0, #63
    c3c0:	sub	x0, x1, x0
    c3c4:	str	x0, [sp, #72]
    c3c8:	ldr	x0, [sp, #72]
    c3cc:	cmp	x0, #0x9
    c3d0:	b.gt	c39c <mpc_get_ldc@@Base+0x204>
    c3d4:	ldr	x0, [sp, #104]
    c3d8:	bl	4cc0 <mpc_alloc_str@plt>
    c3dc:	str	x0, [sp, #56]
    c3e0:	ldr	x0, [sp, #56]
    c3e4:	str	x0, [sp, #96]
    c3e8:	ldr	x0, [sp, #40]
    c3ec:	str	x0, [sp, #88]
    c3f0:	ldr	x1, [sp, #88]
    c3f4:	add	x0, x1, #0x1
    c3f8:	str	x0, [sp, #88]
    c3fc:	ldr	x0, [sp, #96]
    c400:	add	x2, x0, #0x1
    c404:	str	x2, [sp, #96]
    c408:	ldrb	w1, [x1]
    c40c:	strb	w1, [x0]
    c410:	ldr	w0, [sp, #68]
    c414:	cmp	w0, #0x0
    c418:	b.eq	c43c <mpc_get_ldc@@Base+0x2a4>  // b.none
    c41c:	ldr	x1, [sp, #88]
    c420:	add	x0, x1, #0x1
    c424:	str	x0, [sp, #88]
    c428:	ldr	x0, [sp, #96]
    c42c:	add	x2, x0, #0x1
    c430:	str	x2, [sp, #96]
    c434:	ldrb	w1, [x1]
    c438:	strb	w1, [x0]
    c43c:	bl	4d30 <localeconv@plt>
    c440:	ldr	x1, [x0]
    c444:	ldr	x0, [sp, #96]
    c448:	add	x2, x0, #0x1
    c44c:	str	x2, [sp, #96]
    c450:	ldrb	w1, [x1]
    c454:	strb	w1, [x0]
    c458:	ldr	x0, [sp, #96]
    c45c:	strb	wzr, [x0]
    c460:	ldr	x1, [sp, #88]
    c464:	ldr	x0, [sp, #56]
    c468:	bl	4ec0 <strcat@plt>
    c46c:	ldr	x0, [sp, #80]
    c470:	cmp	x0, #0x0
    c474:	b.ne	c480 <mpc_get_ldc@@Base+0x2e8>  // b.any
    c478:	ldr	x0, [sp, #56]
    c47c:	b	c52c <mpc_get_ldc@@Base+0x394>
    c480:	ldr	x0, [sp, #40]
    c484:	bl	4ad0 <strlen@plt>
    c488:	add	x0, x0, #0x1
    c48c:	ldr	x1, [sp, #56]
    c490:	add	x0, x1, x0
    c494:	str	x0, [sp, #96]
    c498:	ldr	w0, [sp, #28]
    c49c:	cmp	w0, #0x10
    c4a0:	b.eq	c4e0 <mpc_get_ldc@@Base+0x348>  // b.none
    c4a4:	ldr	w0, [sp, #28]
    c4a8:	cmp	w0, #0x10
    c4ac:	b.gt	c4f8 <mpc_get_ldc@@Base+0x360>
    c4b0:	ldr	w0, [sp, #28]
    c4b4:	cmp	w0, #0x2
    c4b8:	b.eq	c4e0 <mpc_get_ldc@@Base+0x348>  // b.none
    c4bc:	ldr	w0, [sp, #28]
    c4c0:	cmp	w0, #0xa
    c4c4:	b.ne	c4f8 <mpc_get_ldc@@Base+0x360>  // b.any
    c4c8:	ldr	x0, [sp, #96]
    c4cc:	add	x1, x0, #0x1
    c4d0:	str	x1, [sp, #96]
    c4d4:	mov	w1, #0x65                  	// #101
    c4d8:	strb	w1, [x0]
    c4dc:	b	c50c <mpc_get_ldc@@Base+0x374>
    c4e0:	ldr	x0, [sp, #96]
    c4e4:	add	x1, x0, #0x1
    c4e8:	str	x1, [sp, #96]
    c4ec:	mov	w1, #0x70                  	// #112
    c4f0:	strb	w1, [x0]
    c4f4:	b	c50c <mpc_get_ldc@@Base+0x374>
    c4f8:	ldr	x0, [sp, #96]
    c4fc:	add	x1, x0, #0x1
    c500:	str	x1, [sp, #96]
    c504:	mov	w1, #0x40                  	// #64
    c508:	strb	w1, [x0]
    c50c:	ldr	x0, [sp, #96]
    c510:	strb	wzr, [x0]
    c514:	ldr	x2, [sp, #80]
    c518:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    c51c:	add	x1, x0, #0xfc8
    c520:	ldr	x0, [sp, #96]
    c524:	bl	4c00 <sprintf@plt>
    c528:	ldr	x0, [sp, #56]
    c52c:	ldp	x29, x30, [sp], #112
    c530:	ret
    c534:	stp	x29, x30, [sp, #-96]!
    c538:	mov	x29, sp
    c53c:	str	x19, [sp, #16]
    c540:	str	w0, [sp, #60]
    c544:	str	x1, [sp, #48]
    c548:	str	x2, [sp, #40]
    c54c:	str	w3, [sp, #56]
    c550:	ldr	x0, [sp, #40]
    c554:	ldr	x1, [x0, #16]
    c558:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    c55c:	cmp	x1, x0
    c560:	b.ne	c570 <mpc_get_ldc@@Base+0x3d8>  // b.any
    c564:	ldr	x0, [sp, #40]
    c568:	bl	c208 <mpc_get_ldc@@Base+0x70>
    c56c:	b	c610 <mpc_get_ldc@@Base+0x478>
    c570:	add	x0, sp, #0x48
    c574:	ldr	w5, [sp, #56]
    c578:	ldr	x4, [sp, #40]
    c57c:	ldr	x3, [sp, #48]
    c580:	ldr	w2, [sp, #60]
    c584:	mov	x1, x0
    c588:	mov	x0, #0x0                   	// #0
    c58c:	bl	51c0 <mpfr_get_str@plt>
    c590:	str	x0, [sp, #88]
    c594:	ldr	x0, [sp, #88]
    c598:	cmp	x0, #0x0
    c59c:	b.ne	c5d4 <mpc_get_ldc@@Base+0x43c>  // b.any
    c5a0:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    c5a4:	ldr	x0, [x0, #4008]
    c5a8:	ldr	x5, [x0]
    c5ac:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    c5b0:	add	x4, x0, #0xfd0
    c5b4:	mov	w3, #0xc8                  	// #200
    c5b8:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    c5bc:	add	x2, x0, #0xfe0
    c5c0:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    c5c4:	add	x1, x0, #0xfe8
    c5c8:	mov	x0, x5
    c5cc:	bl	56a0 <fprintf@plt>
    c5d0:	bl	5100 <abort@plt>
    c5d4:	ldr	x19, [sp, #72]
    c5d8:	ldr	x0, [sp, #40]
    c5dc:	bl	55c0 <mpfr_number_p@plt>
    c5e0:	cmp	w0, #0x0
    c5e4:	cset	w0, eq  // eq = none
    c5e8:	and	w0, w0, #0xff
    c5ec:	mov	w3, w0
    c5f0:	ldr	w2, [sp, #60]
    c5f4:	mov	x1, x19
    c5f8:	ldr	x0, [sp, #88]
    c5fc:	bl	c26c <mpc_get_ldc@@Base+0xd4>
    c600:	str	x0, [sp, #80]
    c604:	ldr	x0, [sp, #88]
    c608:	bl	53e0 <mpfr_free_str@plt>
    c60c:	ldr	x0, [sp, #80]
    c610:	ldr	x19, [sp, #16]
    c614:	ldp	x29, x30, [sp], #96
    c618:	ret

000000000000c61c <mpc_get_str@@Base>:
    c61c:	stp	x29, x30, [sp, #-96]!
    c620:	mov	x29, sp
    c624:	str	x19, [sp, #16]
    c628:	str	w0, [sp, #60]
    c62c:	str	x1, [sp, #48]
    c630:	str	x2, [sp, #40]
    c634:	str	w3, [sp, #56]
    c638:	str	xzr, [sp, #88]
    c63c:	ldr	w0, [sp, #60]
    c640:	cmp	w0, #0x1
    c644:	b.le	c654 <mpc_get_str@@Base+0x38>
    c648:	ldr	w0, [sp, #60]
    c64c:	cmp	w0, #0x24
    c650:	b.le	c65c <mpc_get_str@@Base+0x40>
    c654:	mov	x0, #0x0                   	// #0
    c658:	b	c784 <mpc_get_str@@Base+0x168>
    c65c:	ldr	x1, [sp, #40]
    c660:	ldr	w0, [sp, #56]
    c664:	and	w0, w0, #0xf
    c668:	mov	w3, w0
    c66c:	mov	x2, x1
    c670:	ldr	x1, [sp, #48]
    c674:	ldr	w0, [sp, #60]
    c678:	bl	c534 <mpc_get_ldc@@Base+0x39c>
    c67c:	str	x0, [sp, #80]
    c680:	ldr	x0, [sp, #40]
    c684:	add	x1, x0, #0x20
    c688:	ldr	w0, [sp, #56]
    c68c:	asr	w0, w0, #4
    c690:	mov	w3, w0
    c694:	mov	x2, x1
    c698:	ldr	x1, [sp, #48]
    c69c:	ldr	w0, [sp, #60]
    c6a0:	bl	c534 <mpc_get_ldc@@Base+0x39c>
    c6a4:	str	x0, [sp, #72]
    c6a8:	ldr	x0, [sp, #80]
    c6ac:	bl	4ad0 <strlen@plt>
    c6b0:	mov	x19, x0
    c6b4:	ldr	x0, [sp, #72]
    c6b8:	bl	4ad0 <strlen@plt>
    c6bc:	add	x0, x19, x0
    c6c0:	add	x0, x0, #0x4
    c6c4:	str	x0, [sp, #64]
    c6c8:	ldr	x0, [sp, #64]
    c6cc:	bl	4cc0 <mpc_alloc_str@plt>
    c6d0:	str	x0, [sp, #88]
    c6d4:	ldr	x0, [sp, #88]
    c6d8:	cmp	x0, #0x0
    c6dc:	b.ne	c714 <mpc_get_str@@Base+0xf8>  // b.any
    c6e0:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    c6e4:	ldr	x0, [x0, #4008]
    c6e8:	ldr	x5, [x0]
    c6ec:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    c6f0:	add	x4, x0, #0x10
    c6f4:	mov	w3, #0xe0                  	// #224
    c6f8:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    c6fc:	add	x2, x0, #0xfe0
    c700:	adrp	x0, 1a000 <mpc_ui_ui_sub@@Base+0x5c4>
    c704:	add	x1, x0, #0xfe8
    c708:	mov	x0, x5
    c70c:	bl	56a0 <fprintf@plt>
    c710:	bl	5100 <abort@plt>
    c714:	ldr	x0, [sp, #88]
    c718:	mov	w1, #0x28                  	// #40
    c71c:	strh	w1, [x0]
    c720:	ldr	x1, [sp, #80]
    c724:	ldr	x0, [sp, #88]
    c728:	bl	4ec0 <strcat@plt>
    c72c:	ldr	x0, [sp, #88]
    c730:	bl	4ad0 <strlen@plt>
    c734:	mov	x1, x0
    c738:	ldr	x0, [sp, #88]
    c73c:	add	x0, x0, x1
    c740:	mov	w1, #0x20                  	// #32
    c744:	strh	w1, [x0]
    c748:	ldr	x1, [sp, #72]
    c74c:	ldr	x0, [sp, #88]
    c750:	bl	4ec0 <strcat@plt>
    c754:	ldr	x0, [sp, #88]
    c758:	bl	4ad0 <strlen@plt>
    c75c:	mov	x1, x0
    c760:	ldr	x0, [sp, #88]
    c764:	add	x0, x0, x1
    c768:	mov	w1, #0x29                  	// #41
    c76c:	strh	w1, [x0]
    c770:	ldr	x0, [sp, #80]
    c774:	bl	50f0 <mpc_free_str@plt>
    c778:	ldr	x0, [sp, #72]
    c77c:	bl	50f0 <mpc_free_str@plt>
    c780:	ldr	x0, [sp, #88]
    c784:	ldr	x19, [sp, #16]
    c788:	ldp	x29, x30, [sp], #96
    c78c:	ret

000000000000c790 <mpc_imag@@Base>:
    c790:	stp	x29, x30, [sp, #-48]!
    c794:	mov	x29, sp
    c798:	str	x0, [sp, #40]
    c79c:	str	x1, [sp, #32]
    c7a0:	str	w2, [sp, #28]
    c7a4:	ldr	x0, [sp, #32]
    c7a8:	add	x1, x0, #0x20
    c7ac:	ldr	x0, [sp, #32]
    c7b0:	ldr	w0, [x0, #40]
    c7b4:	mov	w3, w0
    c7b8:	ldr	w2, [sp, #28]
    c7bc:	ldr	x0, [sp, #40]
    c7c0:	bl	52d0 <mpfr_set4@plt>
    c7c4:	ldp	x29, x30, [sp], #48
    c7c8:	ret

000000000000c7cc <mpc_init2@@Base>:
    c7cc:	stp	x29, x30, [sp, #-32]!
    c7d0:	mov	x29, sp
    c7d4:	str	x0, [sp, #24]
    c7d8:	str	x1, [sp, #16]
    c7dc:	ldr	x0, [sp, #24]
    c7e0:	ldr	x1, [sp, #16]
    c7e4:	bl	5530 <mpfr_init2@plt>
    c7e8:	ldr	x0, [sp, #24]
    c7ec:	add	x0, x0, #0x20
    c7f0:	ldr	x1, [sp, #16]
    c7f4:	bl	5530 <mpfr_init2@plt>
    c7f8:	nop
    c7fc:	ldp	x29, x30, [sp], #32
    c800:	ret

000000000000c804 <mpc_init3@@Base>:
    c804:	stp	x29, x30, [sp, #-48]!
    c808:	mov	x29, sp
    c80c:	str	x0, [sp, #40]
    c810:	str	x1, [sp, #32]
    c814:	str	x2, [sp, #24]
    c818:	ldr	x0, [sp, #40]
    c81c:	ldr	x1, [sp, #32]
    c820:	bl	5530 <mpfr_init2@plt>
    c824:	ldr	x0, [sp, #40]
    c828:	add	x0, x0, #0x20
    c82c:	ldr	x1, [sp, #24]
    c830:	bl	5530 <mpfr_init2@plt>
    c834:	nop
    c838:	ldp	x29, x30, [sp], #48
    c83c:	ret
    c840:	stp	x29, x30, [sp, #-48]!
    c844:	mov	x29, sp
    c848:	str	x0, [sp, #24]
    c84c:	ldr	x0, [sp, #24]
    c850:	bl	5020 <getc@plt>
    c854:	str	w0, [sp, #44]
    c858:	str	xzr, [sp, #32]
    c85c:	b	c878 <mpc_init3@@Base+0x74>
    c860:	ldr	x0, [sp, #24]
    c864:	bl	5020 <getc@plt>
    c868:	str	w0, [sp, #44]
    c86c:	ldr	x0, [sp, #32]
    c870:	add	x0, x0, #0x1
    c874:	str	x0, [sp, #32]
    c878:	ldr	w0, [sp, #44]
    c87c:	cmn	w0, #0x1
    c880:	b.eq	c8b0 <mpc_init3@@Base+0xac>  // b.none
    c884:	bl	5270 <__ctype_b_loc@plt>
    c888:	ldr	x1, [x0]
    c88c:	ldr	w0, [sp, #44]
    c890:	and	w0, w0, #0xff
    c894:	and	x0, x0, #0xff
    c898:	lsl	x0, x0, #1
    c89c:	add	x0, x1, x0
    c8a0:	ldrh	w0, [x0]
    c8a4:	and	w0, w0, #0x2000
    c8a8:	cmp	w0, #0x0
    c8ac:	b.ne	c860 <mpc_init3@@Base+0x5c>  // b.any
    c8b0:	ldr	w0, [sp, #44]
    c8b4:	cmn	w0, #0x1
    c8b8:	b.eq	c8c8 <mpc_init3@@Base+0xc4>  // b.none
    c8bc:	ldr	x1, [sp, #24]
    c8c0:	ldr	w0, [sp, #44]
    c8c4:	bl	5310 <ungetc@plt>
    c8c8:	ldr	x0, [sp, #32]
    c8cc:	ldp	x29, x30, [sp], #48
    c8d0:	ret
    c8d4:	stp	x29, x30, [sp, #-64]!
    c8d8:	mov	x29, sp
    c8dc:	str	x0, [sp, #24]
    c8e0:	str	xzr, [sp, #48]
    c8e4:	mov	x0, #0x64                  	// #100
    c8e8:	str	x0, [sp, #40]
    c8ec:	ldr	x0, [sp, #40]
    c8f0:	bl	4cc0 <mpc_alloc_str@plt>
    c8f4:	str	x0, [sp, #32]
    c8f8:	ldr	x0, [sp, #24]
    c8fc:	bl	5020 <getc@plt>
    c900:	str	w0, [sp, #60]
    c904:	b	c970 <mpc_init3@@Base+0x16c>
    c908:	ldr	x1, [sp, #32]
    c90c:	ldr	x0, [sp, #48]
    c910:	add	x0, x1, x0
    c914:	ldr	w1, [sp, #60]
    c918:	and	w1, w1, #0xff
    c91c:	strb	w1, [x0]
    c920:	ldr	x0, [sp, #48]
    c924:	add	x0, x0, #0x1
    c928:	str	x0, [sp, #48]
    c92c:	ldr	x1, [sp, #48]
    c930:	ldr	x0, [sp, #40]
    c934:	cmp	x1, x0
    c938:	b.ne	c964 <mpc_init3@@Base+0x160>  // b.any
    c93c:	ldr	x0, [sp, #40]
    c940:	lsl	x0, x0, #1
    c944:	mov	x2, x0
    c948:	ldr	x1, [sp, #40]
    c94c:	ldr	x0, [sp, #32]
    c950:	bl	5430 <mpc_realloc_str@plt>
    c954:	str	x0, [sp, #32]
    c958:	ldr	x0, [sp, #40]
    c95c:	lsl	x0, x0, #1
    c960:	str	x0, [sp, #40]
    c964:	ldr	x0, [sp, #24]
    c968:	bl	5020 <getc@plt>
    c96c:	str	w0, [sp, #60]
    c970:	bl	5270 <__ctype_b_loc@plt>
    c974:	ldr	x1, [x0]
    c978:	ldr	w0, [sp, #60]
    c97c:	and	w0, w0, #0xff
    c980:	and	x0, x0, #0xff
    c984:	lsl	x0, x0, #1
    c988:	add	x0, x1, x0
    c98c:	ldrh	w0, [x0]
    c990:	and	w0, w0, #0x8
    c994:	cmp	w0, #0x0
    c998:	b.ne	c908 <mpc_init3@@Base+0x104>  // b.any
    c99c:	ldr	w0, [sp, #60]
    c9a0:	cmp	w0, #0x5f
    c9a4:	b.eq	c908 <mpc_init3@@Base+0x104>  // b.none
    c9a8:	ldr	x0, [sp, #48]
    c9ac:	add	x0, x0, #0x1
    c9b0:	mov	x2, x0
    c9b4:	ldr	x1, [sp, #40]
    c9b8:	ldr	x0, [sp, #32]
    c9bc:	bl	5430 <mpc_realloc_str@plt>
    c9c0:	str	x0, [sp, #32]
    c9c4:	ldr	x0, [sp, #48]
    c9c8:	add	x0, x0, #0x1
    c9cc:	str	x0, [sp, #40]
    c9d0:	ldr	x1, [sp, #32]
    c9d4:	ldr	x0, [sp, #48]
    c9d8:	add	x0, x1, x0
    c9dc:	strb	wzr, [x0]
    c9e0:	ldr	w0, [sp, #60]
    c9e4:	cmn	w0, #0x1
    c9e8:	b.eq	c9f8 <mpc_init3@@Base+0x1f4>  // b.none
    c9ec:	ldr	x1, [sp, #24]
    c9f0:	ldr	w0, [sp, #60]
    c9f4:	bl	5310 <ungetc@plt>
    c9f8:	ldr	x0, [sp, #32]
    c9fc:	ldp	x29, x30, [sp], #64
    ca00:	ret
    ca04:	stp	x29, x30, [sp, #-96]!
    ca08:	mov	x29, sp
    ca0c:	str	x0, [sp, #24]
    ca10:	str	xzr, [sp, #80]
    ca14:	mov	x0, #0x64                  	// #100
    ca18:	str	x0, [sp, #72]
    ca1c:	ldr	x0, [sp, #72]
    ca20:	bl	4cc0 <mpc_alloc_str@plt>
    ca24:	str	x0, [sp, #64]
    ca28:	ldr	x0, [sp, #24]
    ca2c:	bl	5020 <getc@plt>
    ca30:	str	w0, [sp, #92]
    ca34:	b	caa0 <mpc_init3@@Base+0x29c>
    ca38:	ldr	x1, [sp, #64]
    ca3c:	ldr	x0, [sp, #80]
    ca40:	add	x0, x1, x0
    ca44:	ldr	w1, [sp, #92]
    ca48:	and	w1, w1, #0xff
    ca4c:	strb	w1, [x0]
    ca50:	ldr	x0, [sp, #80]
    ca54:	add	x0, x0, #0x1
    ca58:	str	x0, [sp, #80]
    ca5c:	ldr	x1, [sp, #80]
    ca60:	ldr	x0, [sp, #72]
    ca64:	cmp	x1, x0
    ca68:	b.ne	ca94 <mpc_init3@@Base+0x290>  // b.any
    ca6c:	ldr	x0, [sp, #72]
    ca70:	lsl	x0, x0, #1
    ca74:	mov	x2, x0
    ca78:	ldr	x1, [sp, #72]
    ca7c:	ldr	x0, [sp, #64]
    ca80:	bl	5430 <mpc_realloc_str@plt>
    ca84:	str	x0, [sp, #64]
    ca88:	ldr	x0, [sp, #72]
    ca8c:	lsl	x0, x0, #1
    ca90:	str	x0, [sp, #72]
    ca94:	ldr	x0, [sp, #24]
    ca98:	bl	5020 <getc@plt>
    ca9c:	str	w0, [sp, #92]
    caa0:	ldr	w0, [sp, #92]
    caa4:	cmn	w0, #0x1
    caa8:	b.eq	cafc <mpc_init3@@Base+0x2f8>  // b.none
    caac:	ldr	w0, [sp, #92]
    cab0:	cmp	w0, #0xa
    cab4:	b.eq	cafc <mpc_init3@@Base+0x2f8>  // b.none
    cab8:	bl	5270 <__ctype_b_loc@plt>
    cabc:	ldr	x1, [x0]
    cac0:	ldr	w0, [sp, #92]
    cac4:	and	w0, w0, #0xff
    cac8:	and	x0, x0, #0xff
    cacc:	lsl	x0, x0, #1
    cad0:	add	x0, x1, x0
    cad4:	ldrh	w0, [x0]
    cad8:	and	w0, w0, #0x2000
    cadc:	cmp	w0, #0x0
    cae0:	b.ne	cafc <mpc_init3@@Base+0x2f8>  // b.any
    cae4:	ldr	w0, [sp, #92]
    cae8:	cmp	w0, #0x28
    caec:	b.eq	cafc <mpc_init3@@Base+0x2f8>  // b.none
    caf0:	ldr	w0, [sp, #92]
    caf4:	cmp	w0, #0x29
    caf8:	b.ne	ca38 <mpc_init3@@Base+0x234>  // b.any
    cafc:	ldr	x0, [sp, #80]
    cb00:	add	x0, x0, #0x1
    cb04:	mov	x2, x0
    cb08:	ldr	x1, [sp, #72]
    cb0c:	ldr	x0, [sp, #64]
    cb10:	bl	5430 <mpc_realloc_str@plt>
    cb14:	str	x0, [sp, #64]
    cb18:	ldr	x0, [sp, #80]
    cb1c:	add	x0, x0, #0x1
    cb20:	str	x0, [sp, #72]
    cb24:	ldr	x1, [sp, #64]
    cb28:	ldr	x0, [sp, #80]
    cb2c:	add	x0, x1, x0
    cb30:	strb	wzr, [x0]
    cb34:	ldr	x0, [sp, #80]
    cb38:	cmp	x0, #0x0
    cb3c:	b.ne	cb48 <mpc_init3@@Base+0x344>  // b.any
    cb40:	ldr	x0, [sp, #64]
    cb44:	b	ce0c <mpc_init3@@Base+0x608>
    cb48:	ldr	x0, [sp, #80]
    cb4c:	str	x0, [sp, #56]
    cb50:	ldr	w0, [sp, #92]
    cb54:	cmp	w0, #0x28
    cb58:	b.ne	cdf0 <mpc_init3@@Base+0x5ec>  // b.any
    cb5c:	ldr	x0, [sp, #80]
    cb60:	cmp	x0, #0x3
    cb64:	b.ne	cbac <mpc_init3@@Base+0x3a8>  // b.any
    cb68:	ldr	x0, [sp, #64]
    cb6c:	ldrb	w0, [x0]
    cb70:	bl	55f0 <tolower@plt>
    cb74:	cmp	w0, #0x6e
    cb78:	b.ne	cbac <mpc_init3@@Base+0x3a8>  // b.any
    cb7c:	ldr	x0, [sp, #64]
    cb80:	add	x0, x0, #0x1
    cb84:	ldrb	w0, [x0]
    cb88:	bl	55f0 <tolower@plt>
    cb8c:	cmp	w0, #0x61
    cb90:	b.ne	cbac <mpc_init3@@Base+0x3a8>  // b.any
    cb94:	ldr	x0, [sp, #64]
    cb98:	add	x0, x0, #0x2
    cb9c:	ldrb	w0, [x0]
    cba0:	bl	55f0 <tolower@plt>
    cba4:	cmp	w0, #0x6e
    cba8:	b.eq	cc38 <mpc_init3@@Base+0x434>  // b.none
    cbac:	ldr	x0, [sp, #80]
    cbb0:	cmp	x0, #0x5
    cbb4:	b.ne	cc24 <mpc_init3@@Base+0x420>  // b.any
    cbb8:	ldr	x0, [sp, #64]
    cbbc:	ldrb	w0, [x0]
    cbc0:	cmp	w0, #0x40
    cbc4:	b.ne	cc24 <mpc_init3@@Base+0x420>  // b.any
    cbc8:	ldr	x0, [sp, #64]
    cbcc:	add	x0, x0, #0x1
    cbd0:	ldrb	w0, [x0]
    cbd4:	bl	55f0 <tolower@plt>
    cbd8:	cmp	w0, #0x6e
    cbdc:	b.ne	cc24 <mpc_init3@@Base+0x420>  // b.any
    cbe0:	ldr	x0, [sp, #64]
    cbe4:	add	x0, x0, #0x2
    cbe8:	ldrb	w0, [x0]
    cbec:	bl	55f0 <tolower@plt>
    cbf0:	cmp	w0, #0x61
    cbf4:	b.ne	cc24 <mpc_init3@@Base+0x420>  // b.any
    cbf8:	ldr	x0, [sp, #64]
    cbfc:	add	x0, x0, #0x3
    cc00:	ldrb	w0, [x0]
    cc04:	bl	55f0 <tolower@plt>
    cc08:	cmp	w0, #0x6e
    cc0c:	b.ne	cc24 <mpc_init3@@Base+0x420>  // b.any
    cc10:	ldr	x0, [sp, #64]
    cc14:	add	x0, x0, #0x4
    cc18:	ldrb	w0, [x0]
    cc1c:	cmp	w0, #0x40
    cc20:	b.eq	cc38 <mpc_init3@@Base+0x434>  // b.none
    cc24:	ldr	x1, [sp, #24]
    cc28:	ldr	w0, [sp, #92]
    cc2c:	bl	5310 <ungetc@plt>
    cc30:	ldr	x0, [sp, #64]
    cc34:	b	ce0c <mpc_init3@@Base+0x608>
    cc38:	ldr	x0, [sp, #24]
    cc3c:	bl	c8d4 <mpc_init3@@Base+0xd0>
    cc40:	str	x0, [sp, #48]
    cc44:	ldr	x0, [sp, #48]
    cc48:	bl	4ad0 <strlen@plt>
    cc4c:	mov	x1, x0
    cc50:	ldr	x0, [sp, #80]
    cc54:	add	x0, x1, x0
    cc58:	add	x0, x0, #0x1
    cc5c:	str	x0, [sp, #80]
    cc60:	ldr	x1, [sp, #80]
    cc64:	ldr	x0, [sp, #72]
    cc68:	cmp	x1, x0
    cc6c:	b.cc	cc98 <mpc_init3@@Base+0x494>  // b.lo, b.ul, b.last
    cc70:	ldr	x0, [sp, #80]
    cc74:	add	x0, x0, #0x1
    cc78:	mov	x2, x0
    cc7c:	ldr	x1, [sp, #72]
    cc80:	ldr	x0, [sp, #64]
    cc84:	bl	5430 <mpc_realloc_str@plt>
    cc88:	str	x0, [sp, #64]
    cc8c:	ldr	x0, [sp, #80]
    cc90:	add	x0, x0, #0x1
    cc94:	str	x0, [sp, #72]
    cc98:	ldr	x1, [sp, #64]
    cc9c:	ldr	x0, [sp, #56]
    cca0:	add	x3, x1, x0
    cca4:	ldr	x2, [sp, #48]
    cca8:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    ccac:	add	x1, x0, #0x28
    ccb0:	mov	x0, x3
    ccb4:	bl	4c00 <sprintf@plt>
    ccb8:	str	w0, [sp, #44]
    ccbc:	ldr	w0, [sp, #44]
    ccc0:	cmp	w0, #0x0
    ccc4:	b.ge	ccfc <mpc_init3@@Base+0x4f8>  // b.tcont
    ccc8:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    cccc:	ldr	x0, [x0, #4008]
    ccd0:	ldr	x5, [x0]
    ccd4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    ccd8:	add	x4, x0, #0x30
    ccdc:	mov	w3, #0x88                  	// #136
    cce0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cce4:	add	x2, x0, #0x40
    cce8:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    ccec:	add	x1, x0, #0x50
    ccf0:	mov	x0, x5
    ccf4:	bl	56a0 <fprintf@plt>
    ccf8:	bl	5100 <abort@plt>
    ccfc:	ldrsw	x0, [sp, #44]
    cd00:	ldr	x1, [sp, #56]
    cd04:	add	x0, x1, x0
    cd08:	str	x0, [sp, #32]
    cd0c:	ldr	x1, [sp, #32]
    cd10:	ldr	x0, [sp, #80]
    cd14:	cmp	x1, x0
    cd18:	b.eq	cd50 <mpc_init3@@Base+0x54c>  // b.none
    cd1c:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    cd20:	ldr	x0, [x0, #4008]
    cd24:	ldr	x5, [x0]
    cd28:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cd2c:	add	x4, x0, #0x78
    cd30:	mov	w3, #0x8a                  	// #138
    cd34:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cd38:	add	x2, x0, #0x40
    cd3c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cd40:	add	x1, x0, #0x50
    cd44:	mov	x0, x5
    cd48:	bl	56a0 <fprintf@plt>
    cd4c:	bl	5100 <abort@plt>
    cd50:	ldr	x0, [sp, #24]
    cd54:	bl	5020 <getc@plt>
    cd58:	str	w0, [sp, #92]
    cd5c:	ldr	w0, [sp, #92]
    cd60:	cmp	w0, #0x29
    cd64:	b.ne	cdcc <mpc_init3@@Base+0x5c8>  // b.any
    cd68:	ldr	x0, [sp, #80]
    cd6c:	add	x0, x0, #0x2
    cd70:	mov	x2, x0
    cd74:	ldr	x1, [sp, #72]
    cd78:	ldr	x0, [sp, #64]
    cd7c:	bl	5430 <mpc_realloc_str@plt>
    cd80:	str	x0, [sp, #64]
    cd84:	ldr	x0, [sp, #80]
    cd88:	add	x0, x0, #0x2
    cd8c:	str	x0, [sp, #72]
    cd90:	ldr	x1, [sp, #64]
    cd94:	ldr	x0, [sp, #80]
    cd98:	add	x0, x1, x0
    cd9c:	ldr	w1, [sp, #92]
    cda0:	and	w1, w1, #0xff
    cda4:	strb	w1, [x0]
    cda8:	ldr	x0, [sp, #80]
    cdac:	add	x0, x0, #0x1
    cdb0:	ldr	x1, [sp, #64]
    cdb4:	add	x0, x1, x0
    cdb8:	strb	wzr, [x0]
    cdbc:	ldr	x0, [sp, #80]
    cdc0:	add	x0, x0, #0x1
    cdc4:	str	x0, [sp, #80]
    cdc8:	b	cde4 <mpc_init3@@Base+0x5e0>
    cdcc:	ldr	w0, [sp, #92]
    cdd0:	cmn	w0, #0x1
    cdd4:	b.eq	cde4 <mpc_init3@@Base+0x5e0>  // b.none
    cdd8:	ldr	x1, [sp, #24]
    cddc:	ldr	w0, [sp, #92]
    cde0:	bl	5310 <ungetc@plt>
    cde4:	ldr	x0, [sp, #48]
    cde8:	bl	50f0 <mpc_free_str@plt>
    cdec:	b	ce08 <mpc_init3@@Base+0x604>
    cdf0:	ldr	w0, [sp, #92]
    cdf4:	cmn	w0, #0x1
    cdf8:	b.eq	ce08 <mpc_init3@@Base+0x604>  // b.none
    cdfc:	ldr	x1, [sp, #24]
    ce00:	ldr	w0, [sp, #92]
    ce04:	bl	5310 <ungetc@plt>
    ce08:	ldr	x0, [sp, #64]
    ce0c:	ldp	x29, x30, [sp], #96
    ce10:	ret

000000000000ce14 <mpc_inp_str@@Base>:
    ce14:	stp	x29, x30, [sp, #-128]!
    ce18:	mov	x29, sp
    ce1c:	str	x0, [sp, #40]
    ce20:	str	x1, [sp, #32]
    ce24:	str	x2, [sp, #24]
    ce28:	str	w3, [sp, #20]
    ce2c:	str	w4, [sp, #16]
    ce30:	str	xzr, [sp, #112]
    ce34:	mov	w0, #0xffffffff            	// #-1
    ce38:	str	w0, [sp, #108]
    ce3c:	ldr	x0, [sp, #32]
    ce40:	cmp	x0, #0x0
    ce44:	b.ne	ce58 <mpc_inp_str@@Base+0x44>  // b.any
    ce48:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    ce4c:	ldr	x0, [x0, #4040]
    ce50:	ldr	x0, [x0]
    ce54:	str	x0, [sp, #32]
    ce58:	ldr	x0, [sp, #32]
    ce5c:	bl	c840 <mpc_init3@@Base+0x3c>
    ce60:	str	x0, [sp, #120]
    ce64:	ldr	x0, [sp, #32]
    ce68:	bl	5020 <getc@plt>
    ce6c:	str	w0, [sp, #92]
    ce70:	ldr	w0, [sp, #92]
    ce74:	cmn	w0, #0x1
    ce78:	b.eq	d138 <mpc_inp_str@@Base+0x324>  // b.none
    ce7c:	ldr	w0, [sp, #92]
    ce80:	cmp	w0, #0x28
    ce84:	b.ne	d0d8 <mpc_inp_str@@Base+0x2c4>  // b.any
    ce88:	ldr	x0, [sp, #112]
    ce8c:	add	x0, x0, #0x1
    ce90:	str	x0, [sp, #112]
    ce94:	ldr	x0, [sp, #32]
    ce98:	bl	c840 <mpc_init3@@Base+0x3c>
    ce9c:	str	x0, [sp, #120]
    cea0:	ldr	x0, [sp, #32]
    cea4:	bl	ca04 <mpc_init3@@Base+0x200>
    cea8:	str	x0, [sp, #80]
    ceac:	ldr	x0, [sp, #80]
    ceb0:	bl	4ad0 <strlen@plt>
    ceb4:	mov	x1, x0
    ceb8:	ldr	x0, [sp, #112]
    cebc:	add	x0, x0, x1
    cec0:	str	x0, [sp, #112]
    cec4:	ldr	x0, [sp, #32]
    cec8:	bl	5020 <getc@plt>
    cecc:	str	w0, [sp, #92]
    ced0:	bl	5270 <__ctype_b_loc@plt>
    ced4:	ldr	x1, [x0]
    ced8:	ldrsw	x0, [sp, #92]
    cedc:	lsl	x0, x0, #1
    cee0:	add	x0, x1, x0
    cee4:	ldrh	w0, [x0]
    cee8:	and	w0, w0, #0x2000
    ceec:	cmp	w0, #0x0
    cef0:	b.ne	cf18 <mpc_inp_str@@Base+0x104>  // b.any
    cef4:	ldr	w0, [sp, #92]
    cef8:	cmn	w0, #0x1
    cefc:	b.eq	cf0c <mpc_inp_str@@Base+0xf8>  // b.none
    cf00:	ldr	x1, [sp, #32]
    cf04:	ldr	w0, [sp, #92]
    cf08:	bl	5310 <ungetc@plt>
    cf0c:	ldr	x0, [sp, #80]
    cf10:	bl	50f0 <mpc_free_str@plt>
    cf14:	b	d13c <mpc_inp_str@@Base+0x328>
    cf18:	ldr	x1, [sp, #32]
    cf1c:	ldr	w0, [sp, #92]
    cf20:	bl	5310 <ungetc@plt>
    cf24:	ldr	x0, [sp, #32]
    cf28:	bl	c840 <mpc_init3@@Base+0x3c>
    cf2c:	mov	x1, x0
    cf30:	ldr	x0, [sp, #120]
    cf34:	add	x0, x0, x1
    cf38:	str	x0, [sp, #120]
    cf3c:	ldr	x0, [sp, #32]
    cf40:	bl	ca04 <mpc_init3@@Base+0x200>
    cf44:	str	x0, [sp, #72]
    cf48:	ldr	x0, [sp, #72]
    cf4c:	bl	4ad0 <strlen@plt>
    cf50:	mov	x1, x0
    cf54:	ldr	x0, [sp, #112]
    cf58:	add	x0, x0, x1
    cf5c:	str	x0, [sp, #112]
    cf60:	ldr	x0, [sp, #112]
    cf64:	add	x0, x0, #0x2
    cf68:	bl	4cc0 <mpc_alloc_str@plt>
    cf6c:	str	x0, [sp, #96]
    cf70:	ldr	x3, [sp, #72]
    cf74:	ldr	x2, [sp, #80]
    cf78:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cf7c:	add	x1, x0, #0x88
    cf80:	ldr	x0, [sp, #96]
    cf84:	bl	4c00 <sprintf@plt>
    cf88:	str	w0, [sp, #68]
    cf8c:	ldr	w0, [sp, #68]
    cf90:	cmp	w0, #0x0
    cf94:	b.ge	cfcc <mpc_inp_str@@Base+0x1b8>  // b.tcont
    cf98:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    cf9c:	ldr	x0, [x0, #4008]
    cfa0:	ldr	x5, [x0]
    cfa4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cfa8:	add	x4, x0, #0x30
    cfac:	mov	w3, #0xca                  	// #202
    cfb0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cfb4:	add	x2, x0, #0x40
    cfb8:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cfbc:	add	x1, x0, #0x50
    cfc0:	mov	x0, x5
    cfc4:	bl	56a0 <fprintf@plt>
    cfc8:	bl	5100 <abort@plt>
    cfcc:	ldrsw	x0, [sp, #68]
    cfd0:	str	x0, [sp, #56]
    cfd4:	ldr	x0, [sp, #112]
    cfd8:	add	x0, x0, #0x1
    cfdc:	ldr	x1, [sp, #56]
    cfe0:	cmp	x1, x0
    cfe4:	b.eq	d01c <mpc_inp_str@@Base+0x208>  // b.none
    cfe8:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    cfec:	ldr	x0, [x0, #4008]
    cff0:	ldr	x5, [x0]
    cff4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    cff8:	add	x4, x0, #0x90
    cffc:	mov	w3, #0xcc                  	// #204
    d000:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    d004:	add	x2, x0, #0x40
    d008:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    d00c:	add	x1, x0, #0x50
    d010:	mov	x0, x5
    d014:	bl	56a0 <fprintf@plt>
    d018:	bl	5100 <abort@plt>
    d01c:	ldr	x0, [sp, #80]
    d020:	bl	50f0 <mpc_free_str@plt>
    d024:	ldr	x0, [sp, #72]
    d028:	bl	50f0 <mpc_free_str@plt>
    d02c:	ldr	x0, [sp, #32]
    d030:	bl	c840 <mpc_init3@@Base+0x3c>
    d034:	mov	x1, x0
    d038:	ldr	x0, [sp, #120]
    d03c:	add	x0, x0, x1
    d040:	str	x0, [sp, #120]
    d044:	ldr	x0, [sp, #32]
    d048:	bl	5020 <getc@plt>
    d04c:	str	w0, [sp, #92]
    d050:	ldr	w0, [sp, #92]
    d054:	cmp	w0, #0x29
    d058:	b.ne	d0bc <mpc_inp_str@@Base+0x2a8>  // b.any
    d05c:	ldr	x0, [sp, #112]
    d060:	add	x1, x0, #0x2
    d064:	ldr	x0, [sp, #112]
    d068:	add	x0, x0, #0x3
    d06c:	mov	x2, x0
    d070:	ldr	x0, [sp, #96]
    d074:	bl	5430 <mpc_realloc_str@plt>
    d078:	str	x0, [sp, #96]
    d07c:	ldr	x0, [sp, #112]
    d080:	add	x0, x0, #0x1
    d084:	ldr	x1, [sp, #96]
    d088:	add	x0, x1, x0
    d08c:	ldr	w1, [sp, #92]
    d090:	and	w1, w1, #0xff
    d094:	strb	w1, [x0]
    d098:	ldr	x0, [sp, #112]
    d09c:	add	x0, x0, #0x2
    d0a0:	ldr	x1, [sp, #96]
    d0a4:	add	x0, x1, x0
    d0a8:	strb	wzr, [x0]
    d0ac:	ldr	x0, [sp, #112]
    d0b0:	add	x0, x0, #0x1
    d0b4:	str	x0, [sp, #112]
    d0b8:	b	d114 <mpc_inp_str@@Base+0x300>
    d0bc:	ldr	w0, [sp, #92]
    d0c0:	cmn	w0, #0x1
    d0c4:	b.eq	d114 <mpc_inp_str@@Base+0x300>  // b.none
    d0c8:	ldr	x1, [sp, #32]
    d0cc:	ldr	w0, [sp, #92]
    d0d0:	bl	5310 <ungetc@plt>
    d0d4:	b	d114 <mpc_inp_str@@Base+0x300>
    d0d8:	ldr	w0, [sp, #92]
    d0dc:	cmn	w0, #0x1
    d0e0:	b.eq	d0f0 <mpc_inp_str@@Base+0x2dc>  // b.none
    d0e4:	ldr	x1, [sp, #32]
    d0e8:	ldr	w0, [sp, #92]
    d0ec:	bl	5310 <ungetc@plt>
    d0f0:	ldr	x0, [sp, #32]
    d0f4:	bl	ca04 <mpc_init3@@Base+0x200>
    d0f8:	str	x0, [sp, #96]
    d0fc:	ldr	x0, [sp, #96]
    d100:	bl	4ad0 <strlen@plt>
    d104:	mov	x1, x0
    d108:	ldr	x0, [sp, #112]
    d10c:	add	x0, x0, x1
    d110:	str	x0, [sp, #112]
    d114:	ldr	w3, [sp, #16]
    d118:	ldr	w2, [sp, #20]
    d11c:	ldr	x1, [sp, #96]
    d120:	ldr	x0, [sp, #40]
    d124:	bl	5480 <mpc_set_str@plt>
    d128:	str	w0, [sp, #108]
    d12c:	ldr	x0, [sp, #96]
    d130:	bl	50f0 <mpc_free_str@plt>
    d134:	b	d13c <mpc_inp_str@@Base+0x328>
    d138:	nop
    d13c:	ldr	w0, [sp, #108]
    d140:	cmn	w0, #0x1
    d144:	b.ne	d15c <mpc_inp_str@@Base+0x348>  // b.any
    d148:	ldr	x0, [sp, #40]
    d14c:	bl	4b10 <mpfr_set_nan@plt>
    d150:	ldr	x0, [sp, #40]
    d154:	add	x0, x0, #0x20
    d158:	bl	4b10 <mpfr_set_nan@plt>
    d15c:	ldr	x0, [sp, #24]
    d160:	cmp	x0, #0x0
    d164:	b.eq	d17c <mpc_inp_str@@Base+0x368>  // b.none
    d168:	ldr	x1, [sp, #120]
    d16c:	ldr	x0, [sp, #112]
    d170:	add	x1, x1, x0
    d174:	ldr	x0, [sp, #24]
    d178:	str	x1, [x0]
    d17c:	ldr	w0, [sp, #108]
    d180:	ldp	x29, x30, [sp], #128
    d184:	ret

000000000000d188 <mpc_log@@Base>:
    d188:	stp	x29, x30, [sp, #-208]!
    d18c:	mov	x29, sp
    d190:	str	x19, [sp, #16]
    d194:	str	x0, [sp, #56]
    d198:	str	x1, [sp, #48]
    d19c:	str	w2, [sp, #44]
    d1a0:	str	wzr, [sp, #200]
    d1a4:	ldr	x0, [sp, #48]
    d1a8:	bl	55c0 <mpfr_number_p@plt>
    d1ac:	cmp	w0, #0x0
    d1b0:	b.eq	d1c8 <mpc_log@@Base+0x40>  // b.none
    d1b4:	ldr	x0, [sp, #48]
    d1b8:	add	x0, x0, #0x20
    d1bc:	bl	55c0 <mpfr_number_p@plt>
    d1c0:	cmp	w0, #0x0
    d1c4:	b.ne	d2e0 <mpc_log@@Base+0x158>  // b.any
    d1c8:	ldr	x0, [sp, #48]
    d1cc:	ldr	x1, [x0, #16]
    d1d0:	mov	x0, #0x2                   	// #2
    d1d4:	movk	x0, #0x8000, lsl #48
    d1d8:	cmp	x1, x0
    d1dc:	b.ne	d220 <mpc_log@@Base+0x98>  // b.any
    d1e0:	ldr	x0, [sp, #48]
    d1e4:	ldr	x1, [x0, #48]
    d1e8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    d1ec:	cmp	x1, x0
    d1f0:	b.ne	d204 <mpc_log@@Base+0x7c>  // b.any
    d1f4:	ldr	x0, [sp, #56]
    d1f8:	mov	w1, #0x1                   	// #1
    d1fc:	bl	5220 <mpfr_set_inf@plt>
    d200:	b	d20c <mpc_log@@Base+0x84>
    d204:	ldr	x0, [sp, #56]
    d208:	bl	4b10 <mpfr_set_nan@plt>
    d20c:	ldr	x0, [sp, #56]
    d210:	add	x0, x0, #0x20
    d214:	bl	4b10 <mpfr_set_nan@plt>
    d218:	str	wzr, [sp, #164]
    d21c:	b	d2b0 <mpc_log@@Base+0x128>
    d220:	ldr	x0, [sp, #48]
    d224:	ldr	x1, [x0, #48]
    d228:	mov	x0, #0x2                   	// #2
    d22c:	movk	x0, #0x8000, lsl #48
    d230:	cmp	x1, x0
    d234:	b.ne	d278 <mpc_log@@Base+0xf0>  // b.any
    d238:	ldr	x0, [sp, #48]
    d23c:	ldr	x1, [x0, #16]
    d240:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    d244:	cmp	x1, x0
    d248:	b.ne	d25c <mpc_log@@Base+0xd4>  // b.any
    d24c:	ldr	x0, [sp, #56]
    d250:	mov	w1, #0x1                   	// #1
    d254:	bl	5220 <mpfr_set_inf@plt>
    d258:	b	d264 <mpc_log@@Base+0xdc>
    d25c:	ldr	x0, [sp, #56]
    d260:	bl	4b10 <mpfr_set_nan@plt>
    d264:	ldr	x0, [sp, #56]
    d268:	add	x0, x0, #0x20
    d26c:	bl	4b10 <mpfr_set_nan@plt>
    d270:	str	wzr, [sp, #164]
    d274:	b	d2b0 <mpc_log@@Base+0x128>
    d278:	ldr	x0, [sp, #56]
    d27c:	add	x4, x0, #0x20
    d280:	ldr	x0, [sp, #48]
    d284:	add	x1, x0, #0x20
    d288:	ldr	x2, [sp, #48]
    d28c:	ldr	w0, [sp, #44]
    d290:	asr	w0, w0, #4
    d294:	mov	w3, w0
    d298:	mov	x0, x4
    d29c:	bl	4d60 <mpfr_atan2@plt>
    d2a0:	str	w0, [sp, #164]
    d2a4:	ldr	x0, [sp, #56]
    d2a8:	mov	w1, #0x1                   	// #1
    d2ac:	bl	5220 <mpfr_set_inf@plt>
    d2b0:	ldr	w0, [sp, #164]
    d2b4:	cmp	w0, #0x0
    d2b8:	b.lt	d2d8 <mpc_log@@Base+0x150>  // b.tstop
    d2bc:	ldr	w0, [sp, #164]
    d2c0:	cmp	w0, #0x0
    d2c4:	b.eq	d2d0 <mpc_log@@Base+0x148>  // b.none
    d2c8:	mov	w0, #0x4                   	// #4
    d2cc:	b	db44 <mpc_log@@Base+0x9bc>
    d2d0:	mov	w0, #0x0                   	// #0
    d2d4:	b	db44 <mpc_log@@Base+0x9bc>
    d2d8:	mov	w0, #0x8                   	// #8
    d2dc:	b	db44 <mpc_log@@Base+0x9bc>
    d2e0:	ldr	x0, [sp, #48]
    d2e4:	bl	52f0 <mpfr_sgn@plt>
    d2e8:	str	w0, [sp, #152]
    d2ec:	ldr	x0, [sp, #48]
    d2f0:	add	x0, x0, #0x20
    d2f4:	bl	52f0 <mpfr_sgn@plt>
    d2f8:	str	w0, [sp, #148]
    d2fc:	ldr	w0, [sp, #148]
    d300:	cmp	w0, #0x0
    d304:	b.ne	d508 <mpc_log@@Base+0x380>  // b.any
    d308:	ldr	w0, [sp, #152]
    d30c:	cmp	w0, #0x0
    d310:	b.ne	d354 <mpc_log@@Base+0x1cc>  // b.any
    d314:	ldr	x0, [sp, #56]
    d318:	add	x4, x0, #0x20
    d31c:	ldr	x0, [sp, #48]
    d320:	add	x1, x0, #0x20
    d324:	ldr	x2, [sp, #48]
    d328:	ldr	w0, [sp, #44]
    d32c:	asr	w0, w0, #4
    d330:	mov	w3, w0
    d334:	mov	x0, x4
    d338:	bl	4d60 <mpfr_atan2@plt>
    d33c:	str	w0, [sp, #164]
    d340:	ldr	x0, [sp, #56]
    d344:	mov	w1, #0xffffffff            	// #-1
    d348:	bl	5220 <mpfr_set_inf@plt>
    d34c:	str	wzr, [sp, #168]
    d350:	b	d4ac <mpc_log@@Base+0x324>
    d354:	ldr	w0, [sp, #152]
    d358:	cmp	w0, #0x0
    d35c:	b.le	d3b4 <mpc_log@@Base+0x22c>
    d360:	ldr	x3, [sp, #56]
    d364:	ldr	x1, [sp, #48]
    d368:	ldr	w0, [sp, #44]
    d36c:	and	w0, w0, #0xf
    d370:	mov	w2, w0
    d374:	mov	x0, x3
    d378:	bl	4e60 <mpfr_log@plt>
    d37c:	str	w0, [sp, #168]
    d380:	ldr	x0, [sp, #56]
    d384:	add	x4, x0, #0x20
    d388:	ldr	x0, [sp, #48]
    d38c:	add	x1, x0, #0x20
    d390:	ldr	w0, [sp, #44]
    d394:	asr	w2, w0, #4
    d398:	ldr	x0, [sp, #48]
    d39c:	ldr	w0, [x0, #40]
    d3a0:	mov	w3, w0
    d3a4:	mov	x0, x4
    d3a8:	bl	52d0 <mpfr_set4@plt>
    d3ac:	str	w0, [sp, #164]
    d3b0:	b	d4ac <mpc_log@@Base+0x324>
    d3b4:	ldr	x0, [sp, #48]
    d3b8:	ldr	w0, [x0, #40]
    d3bc:	lsr	w0, w0, #31
    d3c0:	and	w0, w0, #0xff
    d3c4:	str	w0, [sp, #128]
    d3c8:	ldr	w0, [sp, #128]
    d3cc:	cmp	w0, #0x0
    d3d0:	b.eq	d414 <mpc_log@@Base+0x28c>  // b.none
    d3d4:	ldr	w0, [sp, #44]
    d3d8:	asr	w0, w0, #4
    d3dc:	cmp	w0, #0x2
    d3e0:	b.eq	d408 <mpc_log@@Base+0x280>  // b.none
    d3e4:	ldr	w0, [sp, #44]
    d3e8:	asr	w0, w0, #4
    d3ec:	cmp	w0, #0x3
    d3f0:	b.eq	d400 <mpc_log@@Base+0x278>  // b.none
    d3f4:	ldr	w0, [sp, #44]
    d3f8:	asr	w0, w0, #4
    d3fc:	b	d40c <mpc_log@@Base+0x284>
    d400:	mov	w0, #0x2                   	// #2
    d404:	b	d40c <mpc_log@@Base+0x284>
    d408:	mov	w0, #0x3                   	// #3
    d40c:	str	w0, [sp, #156]
    d410:	b	d420 <mpc_log@@Base+0x298>
    d414:	ldr	w0, [sp, #44]
    d418:	asr	w0, w0, #4
    d41c:	str	w0, [sp, #156]
    d420:	ldr	x0, [sp, #48]
    d424:	add	x2, sp, #0x40
    d428:	mov	x3, x0
    d42c:	ldp	x0, x1, [x3]
    d430:	stp	x0, x1, [x2]
    d434:	ldp	x0, x1, [x3, #16]
    d438:	stp	x0, x1, [x2, #16]
    d43c:	add	x1, sp, #0x40
    d440:	add	x0, sp, #0x40
    d444:	mov	w2, #0x0                   	// #0
    d448:	bl	4c50 <mpfr_neg@plt>
    d44c:	ldr	x3, [sp, #56]
    d450:	ldr	w0, [sp, #44]
    d454:	and	w1, w0, #0xf
    d458:	add	x0, sp, #0x40
    d45c:	mov	w2, w1
    d460:	mov	x1, x0
    d464:	mov	x0, x3
    d468:	bl	4e60 <mpfr_log@plt>
    d46c:	str	w0, [sp, #168]
    d470:	ldr	x0, [sp, #56]
    d474:	add	x0, x0, #0x20
    d478:	ldr	w1, [sp, #156]
    d47c:	bl	4b50 <mpfr_const_pi@plt>
    d480:	str	w0, [sp, #164]
    d484:	ldr	w0, [sp, #128]
    d488:	cmp	w0, #0x0
    d48c:	b.eq	d4ac <mpc_log@@Base+0x324>  // b.none
    d490:	mov	w2, #0x0                   	// #0
    d494:	ldr	x1, [sp, #56]
    d498:	ldr	x0, [sp, #56]
    d49c:	bl	5060 <mpc_conj@plt>
    d4a0:	ldr	w0, [sp, #164]
    d4a4:	neg	w0, w0
    d4a8:	str	w0, [sp, #164]
    d4ac:	ldr	w0, [sp, #168]
    d4b0:	cmp	w0, #0x0
    d4b4:	b.lt	d4d0 <mpc_log@@Base+0x348>  // b.tstop
    d4b8:	ldr	w0, [sp, #168]
    d4bc:	cmp	w0, #0x0
    d4c0:	cset	w0, ne  // ne = any
    d4c4:	and	w0, w0, #0xff
    d4c8:	mov	w1, w0
    d4cc:	b	d4d4 <mpc_log@@Base+0x34c>
    d4d0:	mov	w1, #0x2                   	// #2
    d4d4:	ldr	w0, [sp, #164]
    d4d8:	cmp	w0, #0x0
    d4dc:	b.lt	d4fc <mpc_log@@Base+0x374>  // b.tstop
    d4e0:	ldr	w0, [sp, #164]
    d4e4:	cmp	w0, #0x0
    d4e8:	b.eq	d4f4 <mpc_log@@Base+0x36c>  // b.none
    d4ec:	mov	w0, #0x4                   	// #4
    d4f0:	b	d500 <mpc_log@@Base+0x378>
    d4f4:	mov	w0, #0x0                   	// #0
    d4f8:	b	d500 <mpc_log@@Base+0x378>
    d4fc:	mov	w0, #0x8                   	// #8
    d500:	orr	w0, w1, w0
    d504:	b	db44 <mpc_log@@Base+0x9bc>
    d508:	ldr	w0, [sp, #152]
    d50c:	cmp	w0, #0x0
    d510:	b.ne	d6dc <mpc_log@@Base+0x554>  // b.any
    d514:	ldr	w0, [sp, #148]
    d518:	cmp	w0, #0x0
    d51c:	b.le	d58c <mpc_log@@Base+0x404>
    d520:	ldr	x3, [sp, #56]
    d524:	ldr	x0, [sp, #48]
    d528:	add	x1, x0, #0x20
    d52c:	ldr	w0, [sp, #44]
    d530:	and	w0, w0, #0xf
    d534:	mov	w2, w0
    d538:	mov	x0, x3
    d53c:	bl	4e60 <mpfr_log@plt>
    d540:	str	w0, [sp, #168]
    d544:	ldr	x0, [sp, #56]
    d548:	add	x2, x0, #0x20
    d54c:	ldr	w0, [sp, #44]
    d550:	asr	w0, w0, #4
    d554:	mov	w1, w0
    d558:	mov	x0, x2
    d55c:	bl	4b50 <mpfr_const_pi@plt>
    d560:	str	w0, [sp, #164]
    d564:	ldr	x0, [sp, #56]
    d568:	add	x4, x0, #0x20
    d56c:	ldr	x0, [sp, #56]
    d570:	add	x0, x0, #0x20
    d574:	mov	w3, #0x0                   	// #0
    d578:	mov	x2, #0x1                   	// #1
    d57c:	mov	x1, x0
    d580:	mov	x0, x4
    d584:	bl	5420 <mpfr_div_2ui@plt>
    d588:	b	d680 <mpc_log@@Base+0x4f8>
    d58c:	ldr	x0, [sp, #48]
    d590:	add	x0, x0, #0x20
    d594:	add	x2, sp, #0x40
    d598:	mov	x3, x0
    d59c:	ldp	x0, x1, [x3]
    d5a0:	stp	x0, x1, [x2]
    d5a4:	ldp	x0, x1, [x3, #16]
    d5a8:	stp	x0, x1, [x2, #16]
    d5ac:	add	x1, sp, #0x40
    d5b0:	add	x0, sp, #0x40
    d5b4:	mov	w2, #0x0                   	// #0
    d5b8:	bl	4c50 <mpfr_neg@plt>
    d5bc:	ldr	x3, [sp, #56]
    d5c0:	ldr	w0, [sp, #44]
    d5c4:	and	w1, w0, #0xf
    d5c8:	add	x0, sp, #0x40
    d5cc:	mov	w2, w1
    d5d0:	mov	x1, x0
    d5d4:	mov	x0, x3
    d5d8:	bl	4e60 <mpfr_log@plt>
    d5dc:	str	w0, [sp, #168]
    d5e0:	ldr	x0, [sp, #56]
    d5e4:	add	x2, x0, #0x20
    d5e8:	ldr	w0, [sp, #44]
    d5ec:	asr	w0, w0, #4
    d5f0:	cmp	w0, #0x2
    d5f4:	b.eq	d61c <mpc_log@@Base+0x494>  // b.none
    d5f8:	ldr	w0, [sp, #44]
    d5fc:	asr	w0, w0, #4
    d600:	cmp	w0, #0x3
    d604:	b.eq	d614 <mpc_log@@Base+0x48c>  // b.none
    d608:	ldr	w0, [sp, #44]
    d60c:	asr	w0, w0, #4
    d610:	b	d620 <mpc_log@@Base+0x498>
    d614:	mov	w0, #0x2                   	// #2
    d618:	b	d620 <mpc_log@@Base+0x498>
    d61c:	mov	w0, #0x3                   	// #3
    d620:	mov	w1, w0
    d624:	mov	x0, x2
    d628:	bl	4b50 <mpfr_const_pi@plt>
    d62c:	str	w0, [sp, #164]
    d630:	ldr	x0, [sp, #56]
    d634:	add	x4, x0, #0x20
    d638:	ldr	x0, [sp, #56]
    d63c:	add	x0, x0, #0x20
    d640:	mov	w3, #0x0                   	// #0
    d644:	mov	x2, #0x1                   	// #1
    d648:	mov	x1, x0
    d64c:	mov	x0, x4
    d650:	bl	5420 <mpfr_div_2ui@plt>
    d654:	ldr	x0, [sp, #56]
    d658:	add	x3, x0, #0x20
    d65c:	ldr	x0, [sp, #56]
    d660:	add	x0, x0, #0x20
    d664:	mov	w2, #0x0                   	// #0
    d668:	mov	x1, x0
    d66c:	mov	x0, x3
    d670:	bl	4c50 <mpfr_neg@plt>
    d674:	ldr	w0, [sp, #164]
    d678:	neg	w0, w0
    d67c:	str	w0, [sp, #164]
    d680:	ldr	w0, [sp, #168]
    d684:	cmp	w0, #0x0
    d688:	b.lt	d6a4 <mpc_log@@Base+0x51c>  // b.tstop
    d68c:	ldr	w0, [sp, #168]
    d690:	cmp	w0, #0x0
    d694:	cset	w0, ne  // ne = any
    d698:	and	w0, w0, #0xff
    d69c:	mov	w1, w0
    d6a0:	b	d6a8 <mpc_log@@Base+0x520>
    d6a4:	mov	w1, #0x2                   	// #2
    d6a8:	ldr	w0, [sp, #164]
    d6ac:	cmp	w0, #0x0
    d6b0:	b.lt	d6d0 <mpc_log@@Base+0x548>  // b.tstop
    d6b4:	ldr	w0, [sp, #164]
    d6b8:	cmp	w0, #0x0
    d6bc:	b.eq	d6c8 <mpc_log@@Base+0x540>  // b.none
    d6c0:	mov	w0, #0x4                   	// #4
    d6c4:	b	d6d4 <mpc_log@@Base+0x54c>
    d6c8:	mov	w0, #0x0                   	// #0
    d6cc:	b	d6d4 <mpc_log@@Base+0x54c>
    d6d0:	mov	w0, #0x8                   	// #8
    d6d4:	orr	w0, w1, w0
    d6d8:	b	db44 <mpc_log@@Base+0x9bc>
    d6dc:	ldr	x0, [sp, #56]
    d6e0:	ldr	x0, [x0]
    d6e4:	str	x0, [sp, #176]
    d6e8:	add	x0, sp, #0x40
    d6ec:	mov	x1, #0x2                   	// #2
    d6f0:	bl	5530 <mpfr_init2@plt>
    d6f4:	str	wzr, [sp, #204]
    d6f8:	mov	w0, #0x1                   	// #1
    d6fc:	str	w0, [sp, #172]
    d700:	b	d7e8 <mpc_log@@Base+0x660>
    d704:	ldr	x0, [sp, #176]
    d708:	bl	4de0 <mpc_ceil_log2@plt>
    d70c:	add	x0, x0, #0x4
    d710:	ldr	x1, [sp, #176]
    d714:	add	x0, x1, x0
    d718:	str	x0, [sp, #176]
    d71c:	add	x0, sp, #0x40
    d720:	ldr	x1, [sp, #176]
    d724:	bl	4d40 <mpfr_set_prec@plt>
    d728:	add	x0, sp, #0x40
    d72c:	mov	w2, #0x0                   	// #0
    d730:	ldr	x1, [sp, #48]
    d734:	bl	52a0 <mpc_abs@plt>
    d738:	ldr	x1, [sp, #80]
    d73c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    d740:	cmp	x1, x0
    d744:	b.eq	d804 <mpc_log@@Base+0x67c>  // b.none
    d748:	add	x1, sp, #0x40
    d74c:	add	x0, sp, #0x40
    d750:	mov	w2, #0x0                   	// #0
    d754:	bl	4e60 <mpfr_log@plt>
    d758:	ldr	x1, [sp, #80]
    d75c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    d760:	cmp	x1, x0
    d764:	b.eq	d80c <mpc_log@@Base+0x684>  // b.none
    d768:	ldr	x0, [sp, #80]
    d76c:	cmp	x0, #0x0
    d770:	b.ge	d788 <mpc_log@@Base+0x600>  // b.tcont
    d774:	ldr	x0, [sp, #80]
    d778:	mov	w1, w0
    d77c:	mov	w0, #0x1                   	// #1
    d780:	sub	w0, w0, w1
    d784:	b	d78c <mpc_log@@Base+0x604>
    d788:	mov	w0, #0x1                   	// #1
    d78c:	str	w0, [sp, #160]
    d790:	ldrsw	x0, [sp, #160]
    d794:	ldr	x1, [sp, #176]
    d798:	sub	x5, x1, x0
    d79c:	ldr	x0, [sp, #56]
    d7a0:	ldr	x1, [x0]
    d7a4:	ldr	w0, [sp, #44]
    d7a8:	and	w0, w0, #0xf
    d7ac:	cmp	w0, #0x0
    d7b0:	cset	w0, eq  // eq = none
    d7b4:	and	w0, w0, #0xff
    d7b8:	and	x0, x0, #0xff
    d7bc:	add	x1, x1, x0
    d7c0:	add	x0, sp, #0x40
    d7c4:	mov	x4, x1
    d7c8:	mov	w3, #0x1                   	// #1
    d7cc:	mov	w2, #0x0                   	// #0
    d7d0:	mov	x1, x5
    d7d4:	bl	5540 <mpfr_can_round@plt>
    d7d8:	str	w0, [sp, #204]
    d7dc:	ldr	w0, [sp, #172]
    d7e0:	add	w0, w0, #0x1
    d7e4:	str	w0, [sp, #172]
    d7e8:	ldr	w0, [sp, #204]
    d7ec:	cmp	w0, #0x0
    d7f0:	b.ne	d810 <mpc_log@@Base+0x688>  // b.any
    d7f4:	ldr	w0, [sp, #172]
    d7f8:	cmp	w0, #0x2
    d7fc:	b.le	d704 <mpc_log@@Base+0x57c>
    d800:	b	d810 <mpc_log@@Base+0x688>
    d804:	nop
    d808:	b	d810 <mpc_log@@Base+0x688>
    d80c:	nop
    d810:	ldr	w0, [sp, #204]
    d814:	cmp	w0, #0x0
    d818:	b.ne	da50 <mpc_log@@Base+0x8c8>  // b.any
    d81c:	ldr	x0, [sp, #56]
    d820:	ldr	x0, [x0]
    d824:	str	x0, [sp, #176]
    d828:	add	x0, sp, #0x60
    d82c:	mov	x1, #0x2                   	// #2
    d830:	bl	5530 <mpfr_init2@plt>
    d834:	ldr	x2, [sp, #48]
    d838:	ldr	x0, [sp, #48]
    d83c:	add	x0, x0, #0x20
    d840:	mov	x1, x0
    d844:	mov	x0, x2
    d848:	bl	54b0 <mpfr_cmpabs@plt>
    d84c:	cmp	w0, #0x0
    d850:	b.lt	d86c <mpc_log@@Base+0x6e4>  // b.tstop
    d854:	ldr	x0, [sp, #48]
    d858:	str	x0, [sp, #192]
    d85c:	ldr	x0, [sp, #48]
    d860:	add	x0, x0, #0x20
    d864:	str	x0, [sp, #184]
    d868:	b	d880 <mpc_log@@Base+0x6f8>
    d86c:	ldr	x0, [sp, #48]
    d870:	add	x0, x0, #0x20
    d874:	str	x0, [sp, #192]
    d878:	ldr	x0, [sp, #48]
    d87c:	str	x0, [sp, #184]
    d880:	ldr	x0, [sp, #176]
    d884:	bl	4de0 <mpc_ceil_log2@plt>
    d888:	add	x0, x0, #0x4
    d88c:	ldr	x1, [sp, #176]
    d890:	add	x0, x1, x0
    d894:	str	x0, [sp, #176]
    d898:	add	x0, sp, #0x60
    d89c:	ldr	x1, [sp, #176]
    d8a0:	bl	4d40 <mpfr_set_prec@plt>
    d8a4:	add	x0, sp, #0x40
    d8a8:	ldr	x1, [sp, #176]
    d8ac:	bl	4d40 <mpfr_set_prec@plt>
    d8b0:	add	x0, sp, #0x60
    d8b4:	mov	w3, #0x3                   	// #3
    d8b8:	ldr	x2, [sp, #192]
    d8bc:	ldr	x1, [sp, #184]
    d8c0:	bl	5250 <mpfr_div@plt>
    d8c4:	add	x1, sp, #0x60
    d8c8:	add	x0, sp, #0x60
    d8cc:	mov	w2, #0x3                   	// #3
    d8d0:	bl	5110 <mpfr_sqr@plt>
    d8d4:	add	x1, sp, #0x60
    d8d8:	add	x0, sp, #0x60
    d8dc:	mov	w2, #0x3                   	// #3
    d8e0:	bl	52e0 <mpfr_log1p@plt>
    d8e4:	add	x1, sp, #0x60
    d8e8:	add	x0, sp, #0x60
    d8ec:	mov	w3, #0x3                   	// #3
    d8f0:	mov	x2, #0x1                   	// #1
    d8f4:	bl	5420 <mpfr_div_2ui@plt>
    d8f8:	add	x0, sp, #0x40
    d8fc:	mov	w3, #0x1                   	// #1
    d900:	mov	w2, #0x0                   	// #0
    d904:	ldr	x1, [sp, #192]
    d908:	bl	52d0 <mpfr_set4@plt>
    d90c:	add	x1, sp, #0x40
    d910:	add	x0, sp, #0x40
    d914:	mov	w2, #0x0                   	// #0
    d918:	bl	4e60 <mpfr_log@plt>
    d91c:	ldr	x0, [sp, #80]
    d920:	str	x0, [sp, #136]
    d924:	ldr	w0, [sp, #72]
    d928:	lsr	w0, w0, #31
    d92c:	and	w0, w0, #0xff
    d930:	str	w0, [sp, #132]
    d934:	add	x2, sp, #0x60
    d938:	add	x1, sp, #0x40
    d93c:	add	x0, sp, #0x40
    d940:	mov	w3, #0x0                   	// #0
    d944:	bl	4f50 <mpfr_add@plt>
    d948:	ldr	w0, [sp, #132]
    d94c:	cmp	w0, #0x0
    d950:	b.ne	d960 <mpc_log@@Base+0x7d8>  // b.any
    d954:	mov	w0, #0x5                   	// #5
    d958:	str	w0, [sp, #160]
    d95c:	b	d9a4 <mpc_log@@Base+0x81c>
    d960:	ldr	x0, [sp, #112]
    d964:	add	x1, x0, #0x4
    d968:	ldr	x0, [sp, #136]
    d96c:	sub	x2, x0, #0x1
    d970:	ldr	x0, [sp, #80]
    d974:	sub	x0, x2, x0
    d978:	cmp	x1, x0
    d97c:	b.lt	d98c <mpc_log@@Base+0x804>  // b.tstop
    d980:	ldr	x0, [sp, #112]
    d984:	add	w0, w0, #0x7
    d988:	b	d9a0 <mpc_log@@Base+0x818>
    d98c:	ldr	x0, [sp, #136]
    d990:	mov	w1, w0
    d994:	ldr	x0, [sp, #80]
    d998:	sub	w0, w1, w0
    d99c:	add	w0, w0, #0x1
    d9a0:	str	w0, [sp, #160]
    d9a4:	mov	x2, #0x0                   	// #0
    d9a8:	mov	x1, #0xffffffffffffffff    	// #-1
    d9ac:	ldr	x0, [sp, #192]
    d9b0:	bl	50e0 <mpfr_cmp_si_2exp@plt>
    d9b4:	cmp	w0, #0x0
    d9b8:	b.eq	d9d4 <mpc_log@@Base+0x84c>  // b.none
    d9bc:	mov	x2, #0x0                   	// #0
    d9c0:	mov	x1, #0x1                   	// #1
    d9c4:	ldr	x0, [sp, #192]
    d9c8:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
    d9cc:	cmp	w0, #0x0
    d9d0:	b.ne	d9ec <mpc_log@@Base+0x864>  // b.any
    d9d4:	ldr	x1, [sp, #80]
    d9d8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    d9dc:	cmp	x1, x0
    d9e0:	b.ne	d9ec <mpc_log@@Base+0x864>  // b.any
    d9e4:	mov	w0, #0x1                   	// #1
    d9e8:	str	w0, [sp, #200]
    d9ec:	ldr	w0, [sp, #200]
    d9f0:	cmp	w0, #0x0
    d9f4:	b.ne	da48 <mpc_log@@Base+0x8c0>  // b.any
    d9f8:	ldrsw	x0, [sp, #160]
    d9fc:	ldr	x1, [sp, #176]
    da00:	sub	x5, x1, x0
    da04:	ldr	x0, [sp, #56]
    da08:	ldr	x1, [x0]
    da0c:	ldr	w0, [sp, #44]
    da10:	and	w0, w0, #0xf
    da14:	cmp	w0, #0x0
    da18:	cset	w0, eq  // eq = none
    da1c:	and	w0, w0, #0xff
    da20:	and	x0, x0, #0xff
    da24:	add	x1, x1, x0
    da28:	add	x0, sp, #0x40
    da2c:	mov	x4, x1
    da30:	mov	w3, #0x1                   	// #1
    da34:	mov	w2, #0x0                   	// #0
    da38:	mov	x1, x5
    da3c:	bl	5540 <mpfr_can_round@plt>
    da40:	cmp	w0, #0x0
    da44:	b.eq	d880 <mpc_log@@Base+0x6f8>  // b.none
    da48:	add	x0, sp, #0x60
    da4c:	bl	4e30 <mpfr_clear@plt>
    da50:	ldr	x0, [sp, #56]
    da54:	add	x4, x0, #0x20
    da58:	ldr	x0, [sp, #48]
    da5c:	add	x1, x0, #0x20
    da60:	ldr	x2, [sp, #48]
    da64:	ldr	w0, [sp, #44]
    da68:	asr	w0, w0, #4
    da6c:	mov	w3, w0
    da70:	mov	x0, x4
    da74:	bl	4d60 <mpfr_atan2@plt>
    da78:	str	w0, [sp, #164]
    da7c:	ldr	w0, [sp, #200]
    da80:	cmp	w0, #0x0
    da84:	b.eq	dab8 <mpc_log@@Base+0x930>  // b.none
    da88:	ldr	x19, [sp, #56]
    da8c:	bl	56c0 <mpfr_get_emin_min@plt>
    da90:	sub	x1, x0, #0x2
    da94:	ldr	w0, [sp, #44]
    da98:	and	w0, w0, #0xf
    da9c:	mov	w3, w0
    daa0:	mov	x2, x1
    daa4:	mov	x1, #0x1                   	// #1
    daa8:	mov	x0, x19
    daac:	bl	5230 <mpfr_set_ui_2exp@plt>
    dab0:	str	w0, [sp, #168]
    dab4:	b	dae4 <mpc_log@@Base+0x95c>
    dab8:	ldr	x4, [sp, #56]
    dabc:	ldr	w0, [sp, #44]
    dac0:	and	w1, w0, #0xf
    dac4:	ldr	w2, [sp, #72]
    dac8:	add	x0, sp, #0x40
    dacc:	mov	w3, w2
    dad0:	mov	w2, w1
    dad4:	mov	x1, x0
    dad8:	mov	x0, x4
    dadc:	bl	52d0 <mpfr_set4@plt>
    dae0:	str	w0, [sp, #168]
    dae4:	add	x0, sp, #0x40
    dae8:	bl	4e30 <mpfr_clear@plt>
    daec:	ldr	w0, [sp, #168]
    daf0:	cmp	w0, #0x0
    daf4:	b.lt	db10 <mpc_log@@Base+0x988>  // b.tstop
    daf8:	ldr	w0, [sp, #168]
    dafc:	cmp	w0, #0x0
    db00:	cset	w0, ne  // ne = any
    db04:	and	w0, w0, #0xff
    db08:	mov	w1, w0
    db0c:	b	db14 <mpc_log@@Base+0x98c>
    db10:	mov	w1, #0x2                   	// #2
    db14:	ldr	w0, [sp, #164]
    db18:	cmp	w0, #0x0
    db1c:	b.lt	db3c <mpc_log@@Base+0x9b4>  // b.tstop
    db20:	ldr	w0, [sp, #164]
    db24:	cmp	w0, #0x0
    db28:	b.eq	db34 <mpc_log@@Base+0x9ac>  // b.none
    db2c:	mov	w0, #0x4                   	// #4
    db30:	b	db40 <mpc_log@@Base+0x9b8>
    db34:	mov	w0, #0x0                   	// #0
    db38:	b	db40 <mpc_log@@Base+0x9b8>
    db3c:	mov	w0, #0x8                   	// #8
    db40:	orr	w0, w1, w0
    db44:	ldr	x19, [sp, #16]
    db48:	ldp	x29, x30, [sp], #208
    db4c:	ret
    db50:	stp	x29, x30, [sp, #-32]!
    db54:	mov	x29, sp
    db58:	str	x0, [sp, #24]
    db5c:	mov	w3, #0x0                   	// #0
    db60:	mov	x2, #0x0                   	// #0
    db64:	mov	x1, #0xa                   	// #10
    db68:	ldr	x0, [sp, #24]
    db6c:	bl	5230 <mpfr_set_ui_2exp@plt>
    db70:	mov	w2, #0x0                   	// #0
    db74:	ldr	x1, [sp, #24]
    db78:	ldr	x0, [sp, #24]
    db7c:	bl	4e60 <mpfr_log@plt>
    db80:	nop
    db84:	ldp	x29, x30, [sp], #32
    db88:	ret

000000000000db8c <mpc_log10@@Base>:
    db8c:	stp	x29, x30, [sp, #-240]!
    db90:	mov	x29, sp
    db94:	str	x0, [sp, #40]
    db98:	str	x1, [sp, #32]
    db9c:	str	w2, [sp, #28]
    dba0:	str	wzr, [sp, #236]
    dba4:	str	wzr, [sp, #232]
    dba8:	str	wzr, [sp, #228]
    dbac:	add	x0, sp, #0x98
    dbb0:	mov	x1, #0x2                   	// #2
    dbb4:	bl	5530 <mpfr_init2@plt>
    dbb8:	add	x0, sp, #0x58
    dbbc:	mov	x1, #0x2                   	// #2
    dbc0:	bl	4db0 <mpc_init2@plt>
    dbc4:	ldr	x0, [sp, #40]
    dbc8:	ldr	x1, [x0, #32]
    dbcc:	ldr	x0, [sp, #40]
    dbd0:	ldr	x0, [x0]
    dbd4:	cmp	x1, x0
    dbd8:	csel	x0, x1, x0, ge  // ge = tcont
    dbdc:	str	x0, [sp, #200]
    dbe0:	b	df08 <mpc_log10@@Base+0x37c>
    dbe4:	ldr	w0, [sp, #232]
    dbe8:	add	w0, w0, #0x1
    dbec:	str	w0, [sp, #232]
    dbf0:	ldr	w0, [sp, #232]
    dbf4:	cmp	w0, #0x2
    dbf8:	b.gt	dc0c <mpc_log10@@Base+0x80>
    dbfc:	ldr	x0, [sp, #200]
    dc00:	bl	4de0 <mpc_ceil_log2@plt>
    dc04:	add	x0, x0, #0x4
    dc08:	b	dc1c <mpc_log10@@Base+0x90>
    dc0c:	ldr	x0, [sp, #200]
    dc10:	lsr	x1, x0, #63
    dc14:	add	x0, x1, x0
    dc18:	asr	x0, x0, #1
    dc1c:	ldr	x1, [sp, #200]
    dc20:	add	x0, x1, x0
    dc24:	str	x0, [sp, #200]
    dc28:	add	x0, sp, #0x98
    dc2c:	ldr	x1, [sp, #200]
    dc30:	bl	4d40 <mpfr_set_prec@plt>
    dc34:	add	x0, sp, #0x58
    dc38:	ldr	x1, [sp, #200]
    dc3c:	bl	4cd0 <mpc_set_prec@plt>
    dc40:	add	x0, sp, #0x58
    dc44:	ldr	w2, [sp, #28]
    dc48:	ldr	x1, [sp, #32]
    dc4c:	bl	4e90 <mpc_log@plt>
    dc50:	str	w0, [sp, #216]
    dc54:	add	x0, sp, #0x58
    dc58:	add	x0, x0, #0x20
    dc5c:	bl	55c0 <mpfr_number_p@plt>
    dc60:	cmp	w0, #0x0
    dc64:	b.eq	dc78 <mpc_log10@@Base+0xec>  // b.none
    dc68:	ldr	x1, [sp, #136]
    dc6c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    dc70:	cmp	x1, x0
    dc74:	b.ne	dc8c <mpc_log10@@Base+0x100>  // b.any
    dc78:	mov	w0, #0x1                   	// #1
    dc7c:	str	w0, [sp, #220]
    dc80:	mov	w0, #0x1                   	// #1
    dc84:	str	w0, [sp, #236]
    dc88:	b	dd00 <mpc_log10@@Base+0x174>
    dc8c:	str	wzr, [sp, #220]
    dc90:	add	x0, sp, #0x98
    dc94:	bl	db50 <mpc_log@@Base+0x9c8>
    dc98:	add	x2, sp, #0x98
    dc9c:	add	x0, sp, #0x58
    dca0:	add	x1, x0, #0x20
    dca4:	add	x0, sp, #0x58
    dca8:	add	x0, x0, #0x20
    dcac:	mov	w3, #0x0                   	// #0
    dcb0:	bl	5250 <mpfr_div@plt>
    dcb4:	ldr	x0, [sp, #200]
    dcb8:	sub	x5, x0, #0x2
    dcbc:	ldr	x0, [sp, #40]
    dcc0:	ldr	x1, [x0, #32]
    dcc4:	ldr	w0, [sp, #28]
    dcc8:	asr	w0, w0, #4
    dccc:	cmp	w0, #0x0
    dcd0:	cset	w0, eq  // eq = none
    dcd4:	and	w0, w0, #0xff
    dcd8:	and	x0, x0, #0xff
    dcdc:	add	x1, x1, x0
    dce0:	add	x0, sp, #0x58
    dce4:	add	x0, x0, #0x20
    dce8:	mov	x4, x1
    dcec:	mov	w3, #0x1                   	// #1
    dcf0:	mov	w2, #0x0                   	// #0
    dcf4:	mov	x1, x5
    dcf8:	bl	5540 <mpfr_can_round@plt>
    dcfc:	str	w0, [sp, #236]
    dd00:	ldr	w0, [sp, #236]
    dd04:	cmp	w0, #0x0
    dd08:	b.eq	df08 <mpc_log10@@Base+0x37c>  // b.none
    dd0c:	add	x0, sp, #0x58
    dd10:	bl	55c0 <mpfr_number_p@plt>
    dd14:	cmp	w0, #0x0
    dd18:	b.eq	dd2c <mpc_log10@@Base+0x1a0>  // b.none
    dd1c:	ldr	x1, [sp, #104]
    dd20:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    dd24:	cmp	x1, x0
    dd28:	b.ne	dd38 <mpc_log10@@Base+0x1ac>  // b.any
    dd2c:	mov	w0, #0x1                   	// #1
    dd30:	str	w0, [sp, #224]
    dd34:	b	ddac <mpc_log10@@Base+0x220>
    dd38:	str	wzr, [sp, #224]
    dd3c:	ldr	w0, [sp, #220]
    dd40:	cmp	w0, #0x0
    dd44:	b.eq	dd50 <mpc_log10@@Base+0x1c4>  // b.none
    dd48:	add	x0, sp, #0x98
    dd4c:	bl	db50 <mpc_log@@Base+0x9c8>
    dd50:	add	x2, sp, #0x98
    dd54:	add	x1, sp, #0x58
    dd58:	add	x0, sp, #0x58
    dd5c:	mov	w3, #0x0                   	// #0
    dd60:	bl	5250 <mpfr_div@plt>
    dd64:	ldr	x0, [sp, #200]
    dd68:	sub	x5, x0, #0x2
    dd6c:	ldr	x0, [sp, #40]
    dd70:	ldr	x1, [x0]
    dd74:	ldr	w0, [sp, #28]
    dd78:	and	w0, w0, #0xf
    dd7c:	cmp	w0, #0x0
    dd80:	cset	w0, eq  // eq = none
    dd84:	and	w0, w0, #0xff
    dd88:	and	x0, x0, #0xff
    dd8c:	add	x1, x1, x0
    dd90:	add	x0, sp, #0x58
    dd94:	mov	x4, x1
    dd98:	mov	w3, #0x1                   	// #1
    dd9c:	mov	w2, #0x0                   	// #0
    dda0:	mov	x1, x5
    dda4:	bl	5540 <mpfr_can_round@plt>
    dda8:	str	w0, [sp, #236]
    ddac:	ldr	w0, [sp, #236]
    ddb0:	cmp	w0, #0x0
    ddb4:	b.ne	df08 <mpc_log10@@Base+0x37c>  // b.any
    ddb8:	ldr	w0, [sp, #228]
    ddbc:	cmp	w0, #0x0
    ddc0:	b.ne	df08 <mpc_log10@@Base+0x37c>  // b.any
    ddc4:	ldr	x0, [sp, #32]
    ddc8:	bl	4f10 <mpfr_integer_p@plt>
    ddcc:	cmp	w0, #0x0
    ddd0:	b.eq	df08 <mpc_log10@@Base+0x37c>  // b.none
    ddd4:	ldr	x0, [sp, #32]
    ddd8:	add	x0, x0, #0x20
    dddc:	bl	4f10 <mpfr_integer_p@plt>
    dde0:	cmp	w0, #0x0
    dde4:	b.eq	df08 <mpc_log10@@Base+0x37c>  // b.none
    dde8:	mov	w0, #0x1                   	// #1
    ddec:	str	w0, [sp, #228]
    ddf0:	add	x0, sp, #0x48
    ddf4:	bl	5590 <__gmpz_init@plt>
    ddf8:	add	x0, sp, #0x38
    ddfc:	bl	5590 <__gmpz_init@plt>
    de00:	ldr	x1, [sp, #32]
    de04:	add	x0, sp, #0x48
    de08:	mov	w2, #0x0                   	// #0
    de0c:	bl	4ca0 <mpfr_get_z@plt>
    de10:	ldr	x0, [sp, #32]
    de14:	add	x1, x0, #0x20
    de18:	add	x0, sp, #0x38
    de1c:	mov	w2, #0x0                   	// #0
    de20:	bl	4ca0 <mpfr_get_z@plt>
    de24:	add	x2, sp, #0x48
    de28:	add	x1, sp, #0x48
    de2c:	add	x0, sp, #0x48
    de30:	bl	4e00 <__gmpz_mul@plt>
    de34:	add	x2, sp, #0x38
    de38:	add	x1, sp, #0x38
    de3c:	add	x0, sp, #0x38
    de40:	bl	4e00 <__gmpz_mul@plt>
    de44:	add	x2, sp, #0x38
    de48:	add	x1, sp, #0x48
    de4c:	add	x0, sp, #0x48
    de50:	bl	54d0 <__gmpz_add@plt>
    de54:	add	x0, sp, #0x48
    de58:	mov	x1, #0x0                   	// #0
    de5c:	bl	4ac0 <__gmpz_scan1@plt>
    de60:	str	x0, [sp, #192]
    de64:	add	x0, sp, #0x48
    de68:	mov	w1, #0xa                   	// #10
    de6c:	bl	55a0 <__gmpz_sizeinbase@plt>
    de70:	str	x0, [sp, #184]
    de74:	ldr	x0, [sp, #192]
    de78:	add	x0, x0, #0x1
    de7c:	ldr	x1, [sp, #184]
    de80:	cmp	x1, x0
    de84:	b.eq	de9c <mpc_log10@@Base+0x310>  // b.none
    de88:	ldr	x0, [sp, #192]
    de8c:	add	x0, x0, #0x2
    de90:	ldr	x1, [sp, #184]
    de94:	cmp	x1, x0
    de98:	b.ne	def8 <mpc_log10@@Base+0x36c>  // b.any
    de9c:	add	x1, sp, #0x48
    dea0:	add	x0, sp, #0x48
    dea4:	ldr	x2, [sp, #192]
    dea8:	bl	4ef0 <__gmpz_fdiv_q_2exp@plt>
    deac:	add	x0, sp, #0x38
    deb0:	ldr	x2, [sp, #192]
    deb4:	mov	x1, #0x5                   	// #5
    deb8:	bl	51b0 <__gmpz_ui_pow_ui@plt>
    debc:	add	x1, sp, #0x48
    dec0:	add	x0, sp, #0x38
    dec4:	bl	5400 <__gmpz_cmp@plt>
    dec8:	cmp	w0, #0x0
    decc:	b.ne	def8 <mpc_log10@@Base+0x36c>  // b.any
    ded0:	add	x0, sp, #0x58
    ded4:	mov	x1, #0x40                  	// #64
    ded8:	bl	4d40 <mpfr_set_prec@plt>
    dedc:	add	x0, sp, #0x58
    dee0:	mov	w3, #0x0                   	// #0
    dee4:	mov	x2, #0xffffffffffffffff    	// #-1
    dee8:	ldr	x1, [sp, #192]
    deec:	bl	5230 <mpfr_set_ui_2exp@plt>
    def0:	mov	w0, #0x1                   	// #1
    def4:	str	w0, [sp, #236]
    def8:	add	x0, sp, #0x48
    defc:	bl	5280 <__gmpz_clear@plt>
    df00:	add	x0, sp, #0x38
    df04:	bl	5280 <__gmpz_clear@plt>
    df08:	ldr	w0, [sp, #236]
    df0c:	cmp	w0, #0x0
    df10:	b.eq	dbe4 <mpc_log10@@Base+0x58>  // b.none
    df14:	ldr	x4, [sp, #40]
    df18:	ldr	w0, [sp, #28]
    df1c:	and	w1, w0, #0xf
    df20:	ldr	w2, [sp, #96]
    df24:	add	x0, sp, #0x58
    df28:	mov	w3, w2
    df2c:	mov	w2, w1
    df30:	mov	x1, x0
    df34:	mov	x0, x4
    df38:	bl	52d0 <mpfr_set4@plt>
    df3c:	str	w0, [sp, #212]
    df40:	ldr	w0, [sp, #224]
    df44:	cmp	w0, #0x0
    df48:	b.eq	df7c <mpc_log10@@Base+0x3f0>  // b.none
    df4c:	ldr	w0, [sp, #216]
    df50:	and	w0, w0, #0x3
    df54:	cmp	w0, #0x2
    df58:	b.eq	df74 <mpc_log10@@Base+0x3e8>  // b.none
    df5c:	ldr	w0, [sp, #216]
    df60:	and	w0, w0, #0x3
    df64:	cmp	w0, #0x0
    df68:	cset	w0, ne  // ne = any
    df6c:	and	w0, w0, #0xff
    df70:	b	df78 <mpc_log10@@Base+0x3ec>
    df74:	mov	w0, #0xffffffff            	// #-1
    df78:	str	w0, [sp, #212]
    df7c:	ldr	x0, [sp, #40]
    df80:	add	x4, x0, #0x20
    df84:	ldr	w0, [sp, #28]
    df88:	asr	w1, w0, #4
    df8c:	ldr	w2, [sp, #128]
    df90:	add	x0, sp, #0x58
    df94:	add	x0, x0, #0x20
    df98:	mov	w3, w2
    df9c:	mov	w2, w1
    dfa0:	mov	x1, x0
    dfa4:	mov	x0, x4
    dfa8:	bl	52d0 <mpfr_set4@plt>
    dfac:	str	w0, [sp, #208]
    dfb0:	ldr	w0, [sp, #220]
    dfb4:	cmp	w0, #0x0
    dfb8:	b.eq	dfec <mpc_log10@@Base+0x460>  // b.none
    dfbc:	ldr	w0, [sp, #216]
    dfc0:	asr	w0, w0, #2
    dfc4:	cmp	w0, #0x2
    dfc8:	b.eq	dfe4 <mpc_log10@@Base+0x458>  // b.none
    dfcc:	ldr	w0, [sp, #216]
    dfd0:	asr	w0, w0, #2
    dfd4:	cmp	w0, #0x0
    dfd8:	cset	w0, ne  // ne = any
    dfdc:	and	w0, w0, #0xff
    dfe0:	b	dfe8 <mpc_log10@@Base+0x45c>
    dfe4:	mov	w0, #0xffffffff            	// #-1
    dfe8:	str	w0, [sp, #208]
    dfec:	add	x0, sp, #0x98
    dff0:	bl	4e30 <mpfr_clear@plt>
    dff4:	add	x0, sp, #0x58
    dff8:	bl	4ae0 <mpc_clear@plt>
    dffc:	ldr	w0, [sp, #212]
    e000:	cmp	w0, #0x0
    e004:	b.lt	e020 <mpc_log10@@Base+0x494>  // b.tstop
    e008:	ldr	w0, [sp, #212]
    e00c:	cmp	w0, #0x0
    e010:	cset	w0, ne  // ne = any
    e014:	and	w0, w0, #0xff
    e018:	mov	w1, w0
    e01c:	b	e024 <mpc_log10@@Base+0x498>
    e020:	mov	w1, #0x2                   	// #2
    e024:	ldr	w0, [sp, #208]
    e028:	cmp	w0, #0x0
    e02c:	b.lt	e04c <mpc_log10@@Base+0x4c0>  // b.tstop
    e030:	ldr	w0, [sp, #208]
    e034:	cmp	w0, #0x0
    e038:	b.eq	e044 <mpc_log10@@Base+0x4b8>  // b.none
    e03c:	mov	w0, #0x4                   	// #4
    e040:	b	e050 <mpc_log10@@Base+0x4c4>
    e044:	mov	w0, #0x0                   	// #0
    e048:	b	e050 <mpc_log10@@Base+0x4c4>
    e04c:	mov	w0, #0x8                   	// #8
    e050:	orr	w0, w1, w0
    e054:	ldp	x29, x30, [sp], #240
    e058:	ret

000000000000e05c <mpc_alloc_str@@Base>:
    e05c:	stp	x29, x30, [sp, #-48]!
    e060:	mov	x29, sp
    e064:	str	x0, [sp, #24]
    e068:	add	x0, sp, #0x28
    e06c:	mov	x2, #0x0                   	// #0
    e070:	mov	x1, #0x0                   	// #0
    e074:	bl	4bb0 <__gmp_get_memory_functions@plt>
    e078:	ldr	x1, [sp, #40]
    e07c:	ldr	x0, [sp, #24]
    e080:	blr	x1
    e084:	ldp	x29, x30, [sp], #48
    e088:	ret

000000000000e08c <mpc_realloc_str@@Base>:
    e08c:	stp	x29, x30, [sp, #-64]!
    e090:	mov	x29, sp
    e094:	str	x0, [sp, #40]
    e098:	str	x1, [sp, #32]
    e09c:	str	x2, [sp, #24]
    e0a0:	add	x0, sp, #0x38
    e0a4:	mov	x2, #0x0                   	// #0
    e0a8:	mov	x1, x0
    e0ac:	mov	x0, #0x0                   	// #0
    e0b0:	bl	4bb0 <__gmp_get_memory_functions@plt>
    e0b4:	ldr	x3, [sp, #56]
    e0b8:	ldr	x2, [sp, #24]
    e0bc:	ldr	x1, [sp, #32]
    e0c0:	ldr	x0, [sp, #40]
    e0c4:	blr	x3
    e0c8:	ldp	x29, x30, [sp], #64
    e0cc:	ret

000000000000e0d0 <mpc_free_str@@Base>:
    e0d0:	stp	x29, x30, [sp, #-64]!
    e0d4:	mov	x29, sp
    e0d8:	str	x19, [sp, #16]
    e0dc:	str	x0, [sp, #40]
    e0e0:	add	x0, sp, #0x38
    e0e4:	mov	x2, x0
    e0e8:	mov	x1, #0x0                   	// #0
    e0ec:	mov	x0, #0x0                   	// #0
    e0f0:	bl	4bb0 <__gmp_get_memory_functions@plt>
    e0f4:	ldr	x19, [sp, #56]
    e0f8:	ldr	x0, [sp, #40]
    e0fc:	bl	4ad0 <strlen@plt>
    e100:	add	x0, x0, #0x1
    e104:	mov	x1, x0
    e108:	ldr	x0, [sp, #40]
    e10c:	blr	x19
    e110:	nop
    e114:	ldr	x19, [sp, #16]
    e118:	ldp	x29, x30, [sp], #64
    e11c:	ret

000000000000e120 <mpc_mul_2si@@Base>:
    e120:	stp	x29, x30, [sp, #-64]!
    e124:	mov	x29, sp
    e128:	str	x0, [sp, #40]
    e12c:	str	x1, [sp, #32]
    e130:	str	x2, [sp, #24]
    e134:	str	w3, [sp, #20]
    e138:	ldr	x4, [sp, #40]
    e13c:	ldr	x1, [sp, #32]
    e140:	ldr	w0, [sp, #20]
    e144:	and	w0, w0, #0xf
    e148:	mov	w3, w0
    e14c:	ldr	x2, [sp, #24]
    e150:	mov	x0, x4
    e154:	bl	4b40 <mpfr_mul_2si@plt>
    e158:	str	w0, [sp, #60]
    e15c:	ldr	x0, [sp, #40]
    e160:	add	x4, x0, #0x20
    e164:	ldr	x0, [sp, #32]
    e168:	add	x1, x0, #0x20
    e16c:	ldr	w0, [sp, #20]
    e170:	asr	w0, w0, #4
    e174:	mov	w3, w0
    e178:	ldr	x2, [sp, #24]
    e17c:	mov	x0, x4
    e180:	bl	4b40 <mpfr_mul_2si@plt>
    e184:	str	w0, [sp, #56]
    e188:	ldr	w0, [sp, #60]
    e18c:	cmp	w0, #0x0
    e190:	b.lt	e1ac <mpc_mul_2si@@Base+0x8c>  // b.tstop
    e194:	ldr	w0, [sp, #60]
    e198:	cmp	w0, #0x0
    e19c:	cset	w0, ne  // ne = any
    e1a0:	and	w0, w0, #0xff
    e1a4:	mov	w1, w0
    e1a8:	b	e1b0 <mpc_mul_2si@@Base+0x90>
    e1ac:	mov	w1, #0x2                   	// #2
    e1b0:	ldr	w0, [sp, #56]
    e1b4:	cmp	w0, #0x0
    e1b8:	b.lt	e1d8 <mpc_mul_2si@@Base+0xb8>  // b.tstop
    e1bc:	ldr	w0, [sp, #56]
    e1c0:	cmp	w0, #0x0
    e1c4:	b.eq	e1d0 <mpc_mul_2si@@Base+0xb0>  // b.none
    e1c8:	mov	w0, #0x4                   	// #4
    e1cc:	b	e1dc <mpc_mul_2si@@Base+0xbc>
    e1d0:	mov	w0, #0x0                   	// #0
    e1d4:	b	e1dc <mpc_mul_2si@@Base+0xbc>
    e1d8:	mov	w0, #0x8                   	// #8
    e1dc:	orr	w0, w1, w0
    e1e0:	ldp	x29, x30, [sp], #64
    e1e4:	ret

000000000000e1e8 <mpc_mul_2ui@@Base>:
    e1e8:	stp	x29, x30, [sp, #-64]!
    e1ec:	mov	x29, sp
    e1f0:	str	x0, [sp, #40]
    e1f4:	str	x1, [sp, #32]
    e1f8:	str	x2, [sp, #24]
    e1fc:	str	w3, [sp, #20]
    e200:	ldr	x4, [sp, #40]
    e204:	ldr	x1, [sp, #32]
    e208:	ldr	w0, [sp, #20]
    e20c:	and	w0, w0, #0xf
    e210:	mov	w3, w0
    e214:	ldr	x2, [sp, #24]
    e218:	mov	x0, x4
    e21c:	bl	5040 <mpfr_mul_2ui@plt>
    e220:	str	w0, [sp, #60]
    e224:	ldr	x0, [sp, #40]
    e228:	add	x4, x0, #0x20
    e22c:	ldr	x0, [sp, #32]
    e230:	add	x1, x0, #0x20
    e234:	ldr	w0, [sp, #20]
    e238:	asr	w0, w0, #4
    e23c:	mov	w3, w0
    e240:	ldr	x2, [sp, #24]
    e244:	mov	x0, x4
    e248:	bl	5040 <mpfr_mul_2ui@plt>
    e24c:	str	w0, [sp, #56]
    e250:	ldr	w0, [sp, #60]
    e254:	cmp	w0, #0x0
    e258:	b.lt	e274 <mpc_mul_2ui@@Base+0x8c>  // b.tstop
    e25c:	ldr	w0, [sp, #60]
    e260:	cmp	w0, #0x0
    e264:	cset	w0, ne  // ne = any
    e268:	and	w0, w0, #0xff
    e26c:	mov	w1, w0
    e270:	b	e278 <mpc_mul_2ui@@Base+0x90>
    e274:	mov	w1, #0x2                   	// #2
    e278:	ldr	w0, [sp, #56]
    e27c:	cmp	w0, #0x0
    e280:	b.lt	e2a0 <mpc_mul_2ui@@Base+0xb8>  // b.tstop
    e284:	ldr	w0, [sp, #56]
    e288:	cmp	w0, #0x0
    e28c:	b.eq	e298 <mpc_mul_2ui@@Base+0xb0>  // b.none
    e290:	mov	w0, #0x4                   	// #4
    e294:	b	e2a4 <mpc_mul_2ui@@Base+0xbc>
    e298:	mov	w0, #0x0                   	// #0
    e29c:	b	e2a4 <mpc_mul_2ui@@Base+0xbc>
    e2a0:	mov	w0, #0x8                   	// #8
    e2a4:	orr	w0, w1, w0
    e2a8:	ldp	x29, x30, [sp], #64
    e2ac:	ret
    e2b0:	stp	x29, x30, [sp, #-96]!
    e2b4:	mov	x29, sp
    e2b8:	str	x0, [sp, #40]
    e2bc:	str	x1, [sp, #32]
    e2c0:	str	x2, [sp, #24]
    e2c4:	ldr	x0, [sp, #32]
    e2c8:	ldr	w0, [x0, #8]
    e2cc:	cmp	w0, #0x0
    e2d0:	b.ge	e2dc <mpc_mul_2ui@@Base+0xf4>  // b.tcont
    e2d4:	mov	w0, #0xffffffff            	// #-1
    e2d8:	b	e2e0 <mpc_mul_2ui@@Base+0xf8>
    e2dc:	mov	w0, #0x1                   	// #1
    e2e0:	str	w0, [sp, #76]
    e2e4:	ldr	x0, [sp, #32]
    e2e8:	ldr	w0, [x0, #40]
    e2ec:	cmp	w0, #0x0
    e2f0:	b.ge	e2fc <mpc_mul_2ui@@Base+0x114>  // b.tcont
    e2f4:	mov	w0, #0xffffffff            	// #-1
    e2f8:	b	e300 <mpc_mul_2ui@@Base+0x118>
    e2fc:	mov	w0, #0x1                   	// #1
    e300:	str	w0, [sp, #72]
    e304:	ldr	x0, [sp, #24]
    e308:	ldr	w0, [x0, #8]
    e30c:	cmp	w0, #0x0
    e310:	b.ge	e31c <mpc_mul_2ui@@Base+0x134>  // b.tcont
    e314:	mov	w0, #0xffffffff            	// #-1
    e318:	b	e320 <mpc_mul_2ui@@Base+0x138>
    e31c:	mov	w0, #0x1                   	// #1
    e320:	str	w0, [sp, #68]
    e324:	ldr	x0, [sp, #24]
    e328:	ldr	w0, [x0, #40]
    e32c:	cmp	w0, #0x0
    e330:	b.ge	e33c <mpc_mul_2ui@@Base+0x154>  // b.tcont
    e334:	mov	w0, #0xffffffff            	// #-1
    e338:	b	e340 <mpc_mul_2ui@@Base+0x158>
    e33c:	mov	w0, #0x1                   	// #1
    e340:	str	w0, [sp, #64]
    e344:	ldr	x0, [sp, #32]
    e348:	ldr	x1, [x0, #16]
    e34c:	mov	x0, #0x2                   	// #2
    e350:	movk	x0, #0x8000, lsl #48
    e354:	cmp	x1, x0
    e358:	b.eq	e3a4 <mpc_mul_2ui@@Base+0x1bc>  // b.none
    e35c:	ldr	x0, [sp, #32]
    e360:	ldr	x1, [x0, #48]
    e364:	mov	x0, #0x2                   	// #2
    e368:	movk	x0, #0x8000, lsl #48
    e36c:	cmp	x1, x0
    e370:	b.eq	e3a4 <mpc_mul_2ui@@Base+0x1bc>  // b.none
    e374:	ldr	x0, [sp, #24]
    e378:	ldr	x1, [x0, #16]
    e37c:	mov	x0, #0x2                   	// #2
    e380:	movk	x0, #0x8000, lsl #48
    e384:	cmp	x1, x0
    e388:	b.eq	e3a4 <mpc_mul_2ui@@Base+0x1bc>  // b.none
    e38c:	ldr	x0, [sp, #24]
    e390:	ldr	x1, [x0, #48]
    e394:	mov	x0, #0x2                   	// #2
    e398:	movk	x0, #0x8000, lsl #48
    e39c:	cmp	x1, x0
    e3a0:	b.ne	e3b0 <mpc_mul_2ui@@Base+0x1c8>  // b.any
    e3a4:	str	wzr, [sp, #92]
    e3a8:	str	wzr, [sp, #88]
    e3ac:	b	e664 <mpc_mul_2ui@@Base+0x47c>
    e3b0:	ldr	x0, [sp, #32]
    e3b4:	ldr	x1, [x0, #16]
    e3b8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e3bc:	cmp	x1, x0
    e3c0:	b.ne	e550 <mpc_mul_2ui@@Base+0x368>  // b.any
    e3c4:	ldr	x0, [sp, #24]
    e3c8:	ldr	x1, [x0, #16]
    e3cc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e3d0:	cmp	x1, x0
    e3d4:	b.eq	e480 <mpc_mul_2ui@@Base+0x298>  // b.none
    e3d8:	ldr	x0, [sp, #32]
    e3dc:	ldr	x1, [x0, #48]
    e3e0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e3e4:	cmp	x1, x0
    e3e8:	b.ne	e400 <mpc_mul_2ui@@Base+0x218>  // b.any
    e3ec:	ldr	x0, [sp, #24]
    e3f0:	ldr	x1, [x0, #48]
    e3f4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e3f8:	cmp	x1, x0
    e3fc:	b.eq	e480 <mpc_mul_2ui@@Base+0x298>  // b.none
    e400:	ldr	x0, [sp, #32]
    e404:	ldr	x1, [x0, #48]
    e408:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e40c:	cmp	x1, x0
    e410:	b.ne	e428 <mpc_mul_2ui@@Base+0x240>  // b.any
    e414:	ldr	x0, [sp, #24]
    e418:	ldr	x1, [x0, #48]
    e41c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e420:	cmp	x1, x0
    e424:	b.eq	e480 <mpc_mul_2ui@@Base+0x298>  // b.none
    e428:	ldr	x0, [sp, #32]
    e42c:	ldr	x1, [x0, #48]
    e430:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e434:	cmp	x1, x0
    e438:	b.eq	e450 <mpc_mul_2ui@@Base+0x268>  // b.none
    e43c:	ldr	x0, [sp, #24]
    e440:	ldr	x1, [x0, #48]
    e444:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e448:	cmp	x1, x0
    e44c:	b.ne	e470 <mpc_mul_2ui@@Base+0x288>  // b.any
    e450:	ldr	w1, [sp, #76]
    e454:	ldr	w0, [sp, #68]
    e458:	mul	w1, w1, w0
    e45c:	ldr	w2, [sp, #72]
    e460:	ldr	w0, [sp, #64]
    e464:	mul	w0, w2, w0
    e468:	cmp	w1, w0
    e46c:	b.eq	e480 <mpc_mul_2ui@@Base+0x298>  // b.none
    e470:	ldr	w1, [sp, #76]
    e474:	ldr	w0, [sp, #68]
    e478:	mul	w0, w1, w0
    e47c:	b	e484 <mpc_mul_2ui@@Base+0x29c>
    e480:	mov	w0, #0x0                   	// #0
    e484:	str	w0, [sp, #92]
    e488:	ldr	x0, [sp, #24]
    e48c:	ldr	x1, [x0, #48]
    e490:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e494:	cmp	x1, x0
    e498:	b.eq	e544 <mpc_mul_2ui@@Base+0x35c>  // b.none
    e49c:	ldr	x0, [sp, #32]
    e4a0:	ldr	x1, [x0, #48]
    e4a4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e4a8:	cmp	x1, x0
    e4ac:	b.ne	e4c4 <mpc_mul_2ui@@Base+0x2dc>  // b.any
    e4b0:	ldr	x0, [sp, #24]
    e4b4:	ldr	x1, [x0, #16]
    e4b8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e4bc:	cmp	x1, x0
    e4c0:	b.eq	e544 <mpc_mul_2ui@@Base+0x35c>  // b.none
    e4c4:	ldr	x0, [sp, #32]
    e4c8:	ldr	x1, [x0, #48]
    e4cc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e4d0:	cmp	x1, x0
    e4d4:	b.ne	e4ec <mpc_mul_2ui@@Base+0x304>  // b.any
    e4d8:	ldr	x0, [sp, #24]
    e4dc:	ldr	x1, [x0, #16]
    e4e0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e4e4:	cmp	x1, x0
    e4e8:	b.eq	e544 <mpc_mul_2ui@@Base+0x35c>  // b.none
    e4ec:	ldr	x0, [sp, #32]
    e4f0:	ldr	x1, [x0, #48]
    e4f4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e4f8:	cmp	x1, x0
    e4fc:	b.eq	e514 <mpc_mul_2ui@@Base+0x32c>  // b.none
    e500:	ldr	x0, [sp, #32]
    e504:	ldr	x1, [x0, #48]
    e508:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e50c:	cmp	x1, x0
    e510:	b.ne	e534 <mpc_mul_2ui@@Base+0x34c>  // b.any
    e514:	ldr	w1, [sp, #76]
    e518:	ldr	w0, [sp, #64]
    e51c:	mul	w1, w1, w0
    e520:	ldr	w2, [sp, #72]
    e524:	ldr	w0, [sp, #68]
    e528:	mul	w0, w2, w0
    e52c:	cmp	w1, w0
    e530:	b.ne	e544 <mpc_mul_2ui@@Base+0x35c>  // b.any
    e534:	ldr	w1, [sp, #76]
    e538:	ldr	w0, [sp, #64]
    e53c:	mul	w0, w1, w0
    e540:	b	e548 <mpc_mul_2ui@@Base+0x360>
    e544:	mov	w0, #0x0                   	// #0
    e548:	str	w0, [sp, #88]
    e54c:	b	e664 <mpc_mul_2ui@@Base+0x47c>
    e550:	ldr	x0, [sp, #24]
    e554:	ldr	x1, [x0, #48]
    e558:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e55c:	cmp	x1, x0
    e560:	b.eq	e5d4 <mpc_mul_2ui@@Base+0x3ec>  // b.none
    e564:	ldr	x0, [sp, #32]
    e568:	ldr	x1, [x0, #16]
    e56c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e570:	cmp	x1, x0
    e574:	b.ne	e58c <mpc_mul_2ui@@Base+0x3a4>  // b.any
    e578:	ldr	x0, [sp, #24]
    e57c:	ldr	x1, [x0, #16]
    e580:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e584:	cmp	x1, x0
    e588:	b.eq	e5d4 <mpc_mul_2ui@@Base+0x3ec>  // b.none
    e58c:	ldr	x0, [sp, #24]
    e590:	ldr	x1, [x0, #16]
    e594:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e598:	cmp	x1, x0
    e59c:	b.ne	e5c0 <mpc_mul_2ui@@Base+0x3d8>  // b.any
    e5a0:	ldr	w1, [sp, #76]
    e5a4:	ldr	w0, [sp, #68]
    e5a8:	mul	w1, w1, w0
    e5ac:	ldr	w2, [sp, #72]
    e5b0:	ldr	w0, [sp, #64]
    e5b4:	mul	w0, w2, w0
    e5b8:	cmp	w1, w0
    e5bc:	b.eq	e5d4 <mpc_mul_2ui@@Base+0x3ec>  // b.none
    e5c0:	ldr	w0, [sp, #72]
    e5c4:	neg	w1, w0
    e5c8:	ldr	w0, [sp, #64]
    e5cc:	mul	w0, w1, w0
    e5d0:	b	e5d8 <mpc_mul_2ui@@Base+0x3f0>
    e5d4:	mov	w0, #0x0                   	// #0
    e5d8:	str	w0, [sp, #92]
    e5dc:	ldr	x0, [sp, #24]
    e5e0:	ldr	x1, [x0, #16]
    e5e4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e5e8:	cmp	x1, x0
    e5ec:	b.eq	e65c <mpc_mul_2ui@@Base+0x474>  // b.none
    e5f0:	ldr	x0, [sp, #32]
    e5f4:	ldr	x1, [x0, #16]
    e5f8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e5fc:	cmp	x1, x0
    e600:	b.ne	e618 <mpc_mul_2ui@@Base+0x430>  // b.any
    e604:	ldr	x0, [sp, #24]
    e608:	ldr	x1, [x0, #48]
    e60c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e610:	cmp	x1, x0
    e614:	b.eq	e65c <mpc_mul_2ui@@Base+0x474>  // b.none
    e618:	ldr	x0, [sp, #24]
    e61c:	ldr	x1, [x0, #48]
    e620:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e624:	cmp	x1, x0
    e628:	b.ne	e64c <mpc_mul_2ui@@Base+0x464>  // b.any
    e62c:	ldr	w1, [sp, #76]
    e630:	ldr	w0, [sp, #64]
    e634:	mul	w1, w1, w0
    e638:	ldr	w2, [sp, #72]
    e63c:	ldr	w0, [sp, #68]
    e640:	mul	w0, w2, w0
    e644:	cmp	w1, w0
    e648:	b.ne	e65c <mpc_mul_2ui@@Base+0x474>  // b.any
    e64c:	ldr	w1, [sp, #72]
    e650:	ldr	w0, [sp, #68]
    e654:	mul	w0, w1, w0
    e658:	b	e660 <mpc_mul_2ui@@Base+0x478>
    e65c:	mov	w0, #0x0                   	// #0
    e660:	str	w0, [sp, #88]
    e664:	ldr	w0, [sp, #92]
    e668:	cmp	w0, #0x0
    e66c:	b.ne	e874 <mpc_mul_2ui@@Base+0x68c>  // b.any
    e670:	ldr	w0, [sp, #88]
    e674:	cmp	w0, #0x0
    e678:	b.ne	e874 <mpc_mul_2ui@@Base+0x68c>  // b.any
    e67c:	ldr	x0, [sp, #32]
    e680:	ldr	x1, [x0, #16]
    e684:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e688:	cmp	x1, x0
    e68c:	b.eq	e6c4 <mpc_mul_2ui@@Base+0x4dc>  // b.none
    e690:	ldr	x0, [sp, #32]
    e694:	ldr	x1, [x0, #16]
    e698:	mov	x0, #0x2                   	// #2
    e69c:	movk	x0, #0x8000, lsl #48
    e6a0:	cmp	x1, x0
    e6a4:	b.eq	e6c4 <mpc_mul_2ui@@Base+0x4dc>  // b.none
    e6a8:	ldr	x0, [sp, #32]
    e6ac:	ldr	x1, [x0, #16]
    e6b0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e6b4:	cmp	x1, x0
    e6b8:	b.ne	e6c4 <mpc_mul_2ui@@Base+0x4dc>  // b.any
    e6bc:	mov	w0, #0x1                   	// #1
    e6c0:	b	e6c8 <mpc_mul_2ui@@Base+0x4e0>
    e6c4:	mov	w0, #0x0                   	// #0
    e6c8:	str	w0, [sp, #60]
    e6cc:	ldr	x0, [sp, #32]
    e6d0:	ldr	x1, [x0, #48]
    e6d4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e6d8:	cmp	x1, x0
    e6dc:	b.eq	e714 <mpc_mul_2ui@@Base+0x52c>  // b.none
    e6e0:	ldr	x0, [sp, #32]
    e6e4:	ldr	x1, [x0, #48]
    e6e8:	mov	x0, #0x2                   	// #2
    e6ec:	movk	x0, #0x8000, lsl #48
    e6f0:	cmp	x1, x0
    e6f4:	b.eq	e714 <mpc_mul_2ui@@Base+0x52c>  // b.none
    e6f8:	ldr	x0, [sp, #32]
    e6fc:	ldr	x1, [x0, #48]
    e700:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e704:	cmp	x1, x0
    e708:	b.ne	e714 <mpc_mul_2ui@@Base+0x52c>  // b.any
    e70c:	mov	w0, #0x1                   	// #1
    e710:	b	e718 <mpc_mul_2ui@@Base+0x530>
    e714:	mov	w0, #0x0                   	// #0
    e718:	str	w0, [sp, #56]
    e71c:	ldr	x0, [sp, #24]
    e720:	ldr	x1, [x0, #16]
    e724:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e728:	cmp	x1, x0
    e72c:	b.eq	e750 <mpc_mul_2ui@@Base+0x568>  // b.none
    e730:	ldr	x0, [sp, #24]
    e734:	ldr	x1, [x0, #16]
    e738:	mov	x0, #0x2                   	// #2
    e73c:	movk	x0, #0x8000, lsl #48
    e740:	cmp	x1, x0
    e744:	b.eq	e750 <mpc_mul_2ui@@Base+0x568>  // b.none
    e748:	mov	w0, #0x1                   	// #1
    e74c:	b	e754 <mpc_mul_2ui@@Base+0x56c>
    e750:	mov	w0, #0x0                   	// #0
    e754:	str	w0, [sp, #84]
    e758:	ldr	x0, [sp, #24]
    e75c:	ldr	x1, [x0, #48]
    e760:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e764:	cmp	x1, x0
    e768:	b.eq	e78c <mpc_mul_2ui@@Base+0x5a4>  // b.none
    e76c:	ldr	x0, [sp, #24]
    e770:	ldr	x1, [x0, #48]
    e774:	mov	x0, #0x2                   	// #2
    e778:	movk	x0, #0x8000, lsl #48
    e77c:	cmp	x1, x0
    e780:	b.eq	e78c <mpc_mul_2ui@@Base+0x5a4>  // b.none
    e784:	mov	w0, #0x1                   	// #1
    e788:	b	e790 <mpc_mul_2ui@@Base+0x5a8>
    e78c:	mov	w0, #0x0                   	// #0
    e790:	str	w0, [sp, #80]
    e794:	ldr	x0, [sp, #24]
    e798:	ldr	x1, [x0, #16]
    e79c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e7a0:	cmp	x1, x0
    e7a4:	b.eq	e7bc <mpc_mul_2ui@@Base+0x5d4>  // b.none
    e7a8:	ldr	x0, [sp, #24]
    e7ac:	ldr	x1, [x0, #48]
    e7b0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e7b4:	cmp	x1, x0
    e7b8:	b.ne	e7f4 <mpc_mul_2ui@@Base+0x60c>  // b.any
    e7bc:	ldr	x0, [sp, #24]
    e7c0:	ldr	x1, [x0, #16]
    e7c4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e7c8:	cmp	x1, x0
    e7cc:	cset	w0, eq  // eq = none
    e7d0:	and	w0, w0, #0xff
    e7d4:	str	w0, [sp, #84]
    e7d8:	ldr	x0, [sp, #24]
    e7dc:	ldr	x1, [x0, #48]
    e7e0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    e7e4:	cmp	x1, x0
    e7e8:	cset	w0, eq  // eq = none
    e7ec:	and	w0, w0, #0xff
    e7f0:	str	w0, [sp, #80]
    e7f4:	ldr	w1, [sp, #76]
    e7f8:	ldr	w0, [sp, #60]
    e7fc:	mul	w1, w1, w0
    e800:	ldr	w0, [sp, #68]
    e804:	mul	w1, w1, w0
    e808:	ldr	w0, [sp, #84]
    e80c:	mul	w1, w1, w0
    e810:	ldr	w2, [sp, #72]
    e814:	ldr	w0, [sp, #56]
    e818:	mul	w2, w2, w0
    e81c:	ldr	w0, [sp, #64]
    e820:	mul	w2, w2, w0
    e824:	ldr	w0, [sp, #80]
    e828:	mul	w0, w2, w0
    e82c:	sub	w0, w1, w0
    e830:	str	w0, [sp, #92]
    e834:	ldr	w1, [sp, #76]
    e838:	ldr	w0, [sp, #60]
    e83c:	mul	w1, w1, w0
    e840:	ldr	w0, [sp, #64]
    e844:	mul	w1, w1, w0
    e848:	ldr	w0, [sp, #80]
    e84c:	mul	w1, w1, w0
    e850:	ldr	w2, [sp, #72]
    e854:	ldr	w0, [sp, #56]
    e858:	mul	w2, w2, w0
    e85c:	ldr	w0, [sp, #68]
    e860:	mul	w2, w2, w0
    e864:	ldr	w0, [sp, #84]
    e868:	mul	w0, w2, w0
    e86c:	add	w0, w1, w0
    e870:	str	w0, [sp, #88]
    e874:	ldr	w0, [sp, #92]
    e878:	cmp	w0, #0x0
    e87c:	b.ne	e88c <mpc_mul_2ui@@Base+0x6a4>  // b.any
    e880:	ldr	x0, [sp, #40]
    e884:	bl	4b10 <mpfr_set_nan@plt>
    e888:	b	e898 <mpc_mul_2ui@@Base+0x6b0>
    e88c:	ldr	x0, [sp, #40]
    e890:	ldr	w1, [sp, #92]
    e894:	bl	5220 <mpfr_set_inf@plt>
    e898:	ldr	w0, [sp, #88]
    e89c:	cmp	w0, #0x0
    e8a0:	b.ne	e8b4 <mpc_mul_2ui@@Base+0x6cc>  // b.any
    e8a4:	ldr	x0, [sp, #40]
    e8a8:	add	x0, x0, #0x20
    e8ac:	bl	4b10 <mpfr_set_nan@plt>
    e8b0:	b	e8c4 <mpc_mul_2ui@@Base+0x6dc>
    e8b4:	ldr	x0, [sp, #40]
    e8b8:	add	x0, x0, #0x20
    e8bc:	ldr	w1, [sp, #88]
    e8c0:	bl	5220 <mpfr_set_inf@plt>
    e8c4:	mov	w0, #0x0                   	// #0
    e8c8:	ldp	x29, x30, [sp], #96
    e8cc:	ret
    e8d0:	stp	x29, x30, [sp, #-80]!
    e8d4:	mov	x29, sp
    e8d8:	str	x0, [sp, #40]
    e8dc:	str	x1, [sp, #32]
    e8e0:	str	x2, [sp, #24]
    e8e4:	str	w3, [sp, #20]
    e8e8:	ldr	x0, [sp, #32]
    e8ec:	ldr	w0, [x0, #8]
    e8f0:	cmp	w0, #0x0
    e8f4:	b.ge	e900 <mpc_mul_2ui@@Base+0x718>  // b.tcont
    e8f8:	mov	w0, #0xffffffff            	// #-1
    e8fc:	b	e904 <mpc_mul_2ui@@Base+0x71c>
    e900:	mov	w0, #0x1                   	// #1
    e904:	str	w0, [sp, #76]
    e908:	ldr	x0, [sp, #32]
    e90c:	ldr	w0, [x0, #40]
    e910:	cmp	w0, #0x0
    e914:	b.ge	e920 <mpc_mul_2ui@@Base+0x738>  // b.tcont
    e918:	mov	w0, #0xffffffff            	// #-1
    e91c:	b	e924 <mpc_mul_2ui@@Base+0x73c>
    e920:	mov	w0, #0x1                   	// #1
    e924:	str	w0, [sp, #72]
    e928:	ldr	x0, [sp, #24]
    e92c:	ldr	w0, [x0, #8]
    e930:	cmp	w0, #0x0
    e934:	b.ge	e940 <mpc_mul_2ui@@Base+0x758>  // b.tcont
    e938:	mov	w0, #0xffffffff            	// #-1
    e93c:	b	e944 <mpc_mul_2ui@@Base+0x75c>
    e940:	mov	w0, #0x1                   	// #1
    e944:	str	w0, [sp, #68]
    e948:	ldr	x0, [sp, #24]
    e94c:	ldr	w0, [x0, #40]
    e950:	cmp	w0, #0x0
    e954:	b.ge	e960 <mpc_mul_2ui@@Base+0x778>  // b.tcont
    e958:	mov	w0, #0xffffffff            	// #-1
    e95c:	b	e964 <mpc_mul_2ui@@Base+0x77c>
    e960:	mov	w0, #0x1                   	// #1
    e964:	str	w0, [sp, #64]
    e968:	ldr	x0, [sp, #24]
    e96c:	ldr	w3, [sp, #20]
    e970:	mov	x2, x0
    e974:	ldr	x1, [sp, #32]
    e978:	ldr	x0, [sp, #40]
    e97c:	bl	5260 <mpc_mul_fr@plt>
    e980:	str	w0, [sp, #60]
    e984:	ldr	x0, [sp, #40]
    e988:	ldr	x1, [x0, #16]
    e98c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e990:	cmp	x1, x0
    e994:	b.ne	e9f0 <mpc_mul_2ui@@Base+0x808>  // b.any
    e998:	ldr	x4, [sp, #40]
    e99c:	ldr	x5, [sp, #40]
    e9a0:	ldr	w0, [sp, #20]
    e9a4:	and	w0, w0, #0xf
    e9a8:	cmp	w0, #0x3
    e9ac:	b.eq	e9d0 <mpc_mul_2ui@@Base+0x7e8>  // b.none
    e9b0:	ldr	w1, [sp, #76]
    e9b4:	ldr	w0, [sp, #68]
    e9b8:	cmp	w1, w0
    e9bc:	b.eq	e9d8 <mpc_mul_2ui@@Base+0x7f0>  // b.none
    e9c0:	ldr	w1, [sp, #72]
    e9c4:	ldr	w0, [sp, #64]
    e9c8:	cmp	w1, w0
    e9cc:	b.ne	e9d8 <mpc_mul_2ui@@Base+0x7f0>  // b.any
    e9d0:	mov	w0, #0xffffffff            	// #-1
    e9d4:	b	e9dc <mpc_mul_2ui@@Base+0x7f4>
    e9d8:	mov	w0, #0x1                   	// #1
    e9dc:	mov	w3, w0
    e9e0:	mov	w2, #0x0                   	// #0
    e9e4:	mov	x1, x5
    e9e8:	mov	x0, x4
    e9ec:	bl	52d0 <mpfr_set4@plt>
    e9f0:	ldr	x0, [sp, #40]
    e9f4:	ldr	x1, [x0, #48]
    e9f8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    e9fc:	cmp	x1, x0
    ea00:	b.ne	ea64 <mpc_mul_2ui@@Base+0x87c>  // b.any
    ea04:	ldr	x0, [sp, #40]
    ea08:	add	x4, x0, #0x20
    ea0c:	ldr	x0, [sp, #40]
    ea10:	add	x5, x0, #0x20
    ea14:	ldr	w0, [sp, #20]
    ea18:	asr	w0, w0, #4
    ea1c:	cmp	w0, #0x3
    ea20:	b.eq	ea44 <mpc_mul_2ui@@Base+0x85c>  // b.none
    ea24:	ldr	w1, [sp, #76]
    ea28:	ldr	w0, [sp, #64]
    ea2c:	cmp	w1, w0
    ea30:	b.eq	ea4c <mpc_mul_2ui@@Base+0x864>  // b.none
    ea34:	ldr	w1, [sp, #72]
    ea38:	ldr	w0, [sp, #68]
    ea3c:	cmp	w1, w0
    ea40:	b.eq	ea4c <mpc_mul_2ui@@Base+0x864>  // b.none
    ea44:	mov	w0, #0xffffffff            	// #-1
    ea48:	b	ea50 <mpc_mul_2ui@@Base+0x868>
    ea4c:	mov	w0, #0x1                   	// #1
    ea50:	mov	w3, w0
    ea54:	mov	w2, #0x0                   	// #0
    ea58:	mov	x1, x5
    ea5c:	mov	x0, x4
    ea60:	bl	52d0 <mpfr_set4@plt>
    ea64:	ldr	w0, [sp, #60]
    ea68:	ldp	x29, x30, [sp], #80
    ea6c:	ret
    ea70:	stp	x29, x30, [sp, #-128]!
    ea74:	mov	x29, sp
    ea78:	str	x0, [sp, #40]
    ea7c:	str	x1, [sp, #32]
    ea80:	str	x2, [sp, #24]
    ea84:	str	w3, [sp, #20]
    ea88:	ldr	x1, [sp, #40]
    ea8c:	ldr	x0, [sp, #32]
    ea90:	cmp	x1, x0
    ea94:	b.eq	eaa8 <mpc_mul_2ui@@Base+0x8c0>  // b.none
    ea98:	ldr	x1, [sp, #40]
    ea9c:	ldr	x0, [sp, #24]
    eaa0:	cmp	x1, x0
    eaa4:	b.ne	eab0 <mpc_mul_2ui@@Base+0x8c8>  // b.any
    eaa8:	mov	w0, #0x1                   	// #1
    eaac:	b	eab4 <mpc_mul_2ui@@Base+0x8cc>
    eab0:	mov	w0, #0x0                   	// #0
    eab4:	str	w0, [sp, #124]
    eab8:	ldr	w0, [sp, #124]
    eabc:	cmp	w0, #0x0
    eac0:	b.eq	eae0 <mpc_mul_2ui@@Base+0x8f8>  // b.none
    eac4:	ldr	x0, [sp, #40]
    eac8:	ldr	x1, [x0]
    eacc:	ldr	x0, [sp, #40]
    ead0:	ldr	x2, [x0, #32]
    ead4:	add	x0, sp, #0x30
    ead8:	bl	54c0 <mpc_init3@plt>
    eadc:	b	eb08 <mpc_mul_2ui@@Base+0x920>
    eae0:	ldr	x1, [sp, #40]
    eae4:	add	x0, sp, #0x30
    eae8:	ldp	x2, x3, [x1]
    eaec:	stp	x2, x3, [x0]
    eaf0:	ldp	x2, x3, [x1, #16]
    eaf4:	stp	x2, x3, [x0, #16]
    eaf8:	ldp	x2, x3, [x1, #32]
    eafc:	stp	x2, x3, [x0, #32]
    eb00:	ldp	x2, x3, [x1, #48]
    eb04:	stp	x2, x3, [x0, #48]
    eb08:	ldr	x0, [sp, #24]
    eb0c:	ldr	w0, [x0, #8]
    eb10:	cmp	w0, #0x0
    eb14:	b.ge	eb20 <mpc_mul_2ui@@Base+0x938>  // b.tcont
    eb18:	mov	w1, #0xffffffff            	// #-1
    eb1c:	b	eb24 <mpc_mul_2ui@@Base+0x93c>
    eb20:	mov	w1, #0x1                   	// #1
    eb24:	ldr	x0, [sp, #32]
    eb28:	ldr	w0, [x0, #40]
    eb2c:	cmp	w0, #0x0
    eb30:	b.ge	eb3c <mpc_mul_2ui@@Base+0x954>  // b.tcont
    eb34:	mov	w0, #0xffffffff            	// #-1
    eb38:	b	eb40 <mpc_mul_2ui@@Base+0x958>
    eb3c:	mov	w0, #0x1                   	// #1
    eb40:	cmp	w1, w0
    eb44:	b.eq	eb90 <mpc_mul_2ui@@Base+0x9a8>  // b.none
    eb48:	ldr	x0, [sp, #24]
    eb4c:	ldr	w0, [x0, #40]
    eb50:	cmp	w0, #0x0
    eb54:	b.ge	eb60 <mpc_mul_2ui@@Base+0x978>  // b.tcont
    eb58:	mov	w1, #0xffffffff            	// #-1
    eb5c:	b	eb64 <mpc_mul_2ui@@Base+0x97c>
    eb60:	mov	w1, #0x1                   	// #1
    eb64:	ldr	x0, [sp, #32]
    eb68:	ldr	w0, [x0, #8]
    eb6c:	cmp	w0, #0x0
    eb70:	b.ge	eb7c <mpc_mul_2ui@@Base+0x994>  // b.tcont
    eb74:	mov	w0, #0xffffffff            	// #-1
    eb78:	b	eb80 <mpc_mul_2ui@@Base+0x998>
    eb7c:	mov	w0, #0x1                   	// #1
    eb80:	cmp	w1, w0
    eb84:	b.eq	eb90 <mpc_mul_2ui@@Base+0x9a8>  // b.none
    eb88:	mov	w0, #0x1                   	// #1
    eb8c:	b	eb94 <mpc_mul_2ui@@Base+0x9ac>
    eb90:	mov	w0, #0x0                   	// #0
    eb94:	str	w0, [sp, #120]
    eb98:	ldr	x0, [sp, #32]
    eb9c:	add	x1, x0, #0x20
    eba0:	ldr	x0, [sp, #24]
    eba4:	add	x2, x0, #0x20
    eba8:	ldr	w0, [sp, #20]
    ebac:	and	w0, w0, #0xf
    ebb0:	cmp	w0, #0x2
    ebb4:	b.eq	ebdc <mpc_mul_2ui@@Base+0x9f4>  // b.none
    ebb8:	ldr	w0, [sp, #20]
    ebbc:	and	w0, w0, #0xf
    ebc0:	cmp	w0, #0x3
    ebc4:	b.eq	ebd4 <mpc_mul_2ui@@Base+0x9ec>  // b.none
    ebc8:	ldr	w0, [sp, #20]
    ebcc:	and	w0, w0, #0xf
    ebd0:	b	ebe0 <mpc_mul_2ui@@Base+0x9f8>
    ebd4:	mov	w0, #0x2                   	// #2
    ebd8:	b	ebe0 <mpc_mul_2ui@@Base+0x9f8>
    ebdc:	mov	w0, #0x3                   	// #3
    ebe0:	add	x4, sp, #0x30
    ebe4:	mov	w3, w0
    ebe8:	mov	x0, x4
    ebec:	bl	4c40 <mpfr_mul@plt>
    ebf0:	neg	w0, w0
    ebf4:	str	w0, [sp, #116]
    ebf8:	add	x1, sp, #0x30
    ebfc:	add	x0, sp, #0x30
    ec00:	mov	w2, #0x0                   	// #0
    ec04:	bl	4c50 <mpfr_neg@plt>
    ec08:	ldr	x1, [sp, #32]
    ec0c:	ldr	x0, [sp, #24]
    ec10:	add	x2, x0, #0x20
    ec14:	ldr	w0, [sp, #20]
    ec18:	asr	w3, w0, #4
    ec1c:	add	x0, sp, #0x30
    ec20:	add	x0, x0, #0x20
    ec24:	bl	4c40 <mpfr_mul@plt>
    ec28:	str	w0, [sp, #112]
    ec2c:	add	x0, sp, #0x30
    ec30:	mov	w2, #0x0                   	// #0
    ec34:	mov	x1, x0
    ec38:	ldr	x0, [sp, #40]
    ec3c:	bl	5680 <mpc_set@plt>
    ec40:	ldr	x0, [sp, #40]
    ec44:	ldr	x1, [x0, #48]
    ec48:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    ec4c:	cmp	x1, x0
    ec50:	b.ne	ec9c <mpc_mul_2ui@@Base+0xab4>  // b.any
    ec54:	ldr	x0, [sp, #40]
    ec58:	add	x4, x0, #0x20
    ec5c:	ldr	x0, [sp, #40]
    ec60:	add	x1, x0, #0x20
    ec64:	ldr	w0, [sp, #20]
    ec68:	asr	w0, w0, #4
    ec6c:	cmp	w0, #0x3
    ec70:	b.eq	ec80 <mpc_mul_2ui@@Base+0xa98>  // b.none
    ec74:	ldr	w0, [sp, #120]
    ec78:	cmp	w0, #0x0
    ec7c:	b.eq	ec88 <mpc_mul_2ui@@Base+0xaa0>  // b.none
    ec80:	mov	w0, #0xffffffff            	// #-1
    ec84:	b	ec8c <mpc_mul_2ui@@Base+0xaa4>
    ec88:	mov	w0, #0x1                   	// #1
    ec8c:	mov	w3, w0
    ec90:	mov	w2, #0x0                   	// #0
    ec94:	mov	x0, x4
    ec98:	bl	52d0 <mpfr_set4@plt>
    ec9c:	ldr	w0, [sp, #124]
    eca0:	cmp	w0, #0x0
    eca4:	b.eq	ecb0 <mpc_mul_2ui@@Base+0xac8>  // b.none
    eca8:	add	x0, sp, #0x30
    ecac:	bl	4ae0 <mpc_clear@plt>
    ecb0:	ldr	w0, [sp, #116]
    ecb4:	cmp	w0, #0x0
    ecb8:	b.lt	ecd4 <mpc_mul_2ui@@Base+0xaec>  // b.tstop
    ecbc:	ldr	w0, [sp, #116]
    ecc0:	cmp	w0, #0x0
    ecc4:	cset	w0, ne  // ne = any
    ecc8:	and	w0, w0, #0xff
    eccc:	mov	w1, w0
    ecd0:	b	ecd8 <mpc_mul_2ui@@Base+0xaf0>
    ecd4:	mov	w1, #0x2                   	// #2
    ecd8:	ldr	w0, [sp, #112]
    ecdc:	cmp	w0, #0x0
    ece0:	b.lt	ed00 <mpc_mul_2ui@@Base+0xb18>  // b.tstop
    ece4:	ldr	w0, [sp, #112]
    ece8:	cmp	w0, #0x0
    ecec:	b.eq	ecf8 <mpc_mul_2ui@@Base+0xb10>  // b.none
    ecf0:	mov	w0, #0x4                   	// #4
    ecf4:	b	ed04 <mpc_mul_2ui@@Base+0xb1c>
    ecf8:	mov	w0, #0x0                   	// #0
    ecfc:	b	ed04 <mpc_mul_2ui@@Base+0xb1c>
    ed00:	mov	w0, #0x8                   	// #8
    ed04:	orr	w0, w1, w0
    ed08:	ldp	x29, x30, [sp], #128
    ed0c:	ret

000000000000ed10 <mpc_mul_naive@@Base>:
    ed10:	stp	x29, x30, [sp, #-144]!
    ed14:	mov	x29, sp
    ed18:	str	x19, [sp, #16]
    ed1c:	str	x0, [sp, #56]
    ed20:	str	x1, [sp, #48]
    ed24:	str	x2, [sp, #40]
    ed28:	str	w3, [sp, #36]
    ed2c:	ldr	x0, [sp, #48]
    ed30:	ldr	x1, [x0, #16]
    ed34:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    ed38:	cmp	x1, x0
    ed3c:	b.le	ed7c <mpc_mul_naive@@Base+0x6c>
    ed40:	ldr	x0, [sp, #48]
    ed44:	ldr	x1, [x0, #48]
    ed48:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    ed4c:	cmp	x1, x0
    ed50:	b.le	ed7c <mpc_mul_naive@@Base+0x6c>
    ed54:	ldr	x0, [sp, #40]
    ed58:	ldr	x1, [x0, #16]
    ed5c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    ed60:	cmp	x1, x0
    ed64:	b.le	ed7c <mpc_mul_naive@@Base+0x6c>
    ed68:	ldr	x0, [sp, #40]
    ed6c:	ldr	x1, [x0, #48]
    ed70:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    ed74:	cmp	x1, x0
    ed78:	b.gt	edb0 <mpc_mul_naive@@Base+0xa0>
    ed7c:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    ed80:	ldr	x0, [x0, #4008]
    ed84:	ldr	x5, [x0]
    ed88:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    ed8c:	add	x4, x0, #0xa0
    ed90:	mov	w3, #0x174                 	// #372
    ed94:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    ed98:	add	x2, x0, #0x130
    ed9c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
    eda0:	add	x1, x0, #0x138
    eda4:	mov	x0, x5
    eda8:	bl	56a0 <fprintf@plt>
    edac:	bl	5100 <abort@plt>
    edb0:	ldr	x1, [sp, #56]
    edb4:	ldr	x0, [sp, #48]
    edb8:	cmp	x1, x0
    edbc:	b.eq	edd0 <mpc_mul_naive@@Base+0xc0>  // b.none
    edc0:	ldr	x1, [sp, #56]
    edc4:	ldr	x0, [sp, #40]
    edc8:	cmp	x1, x0
    edcc:	b.ne	edd8 <mpc_mul_naive@@Base+0xc8>  // b.any
    edd0:	mov	w0, #0x1                   	// #1
    edd4:	b	eddc <mpc_mul_naive@@Base+0xcc>
    edd8:	mov	w0, #0x0                   	// #0
    eddc:	str	w0, [sp, #140]
    ede0:	ldr	w0, [sp, #140]
    ede4:	cmp	w0, #0x0
    ede8:	b.eq	ee08 <mpc_mul_naive@@Base+0xf8>  // b.none
    edec:	ldr	x0, [sp, #56]
    edf0:	ldr	x1, [x0]
    edf4:	ldr	x0, [sp, #56]
    edf8:	ldr	x2, [x0, #32]
    edfc:	add	x0, sp, #0x48
    ee00:	bl	54c0 <mpc_init3@plt>
    ee04:	b	ee30 <mpc_mul_naive@@Base+0x120>
    ee08:	ldr	x1, [sp, #56]
    ee0c:	add	x0, sp, #0x48
    ee10:	ldp	x2, x3, [x1]
    ee14:	stp	x2, x3, [x0]
    ee18:	ldp	x2, x3, [x1, #16]
    ee1c:	stp	x2, x3, [x0, #16]
    ee20:	ldp	x2, x3, [x1, #32]
    ee24:	stp	x2, x3, [x0, #32]
    ee28:	ldp	x2, x3, [x1, #48]
    ee2c:	stp	x2, x3, [x0, #48]
    ee30:	ldr	x1, [sp, #48]
    ee34:	ldr	x2, [sp, #40]
    ee38:	ldr	x0, [sp, #48]
    ee3c:	add	x3, x0, #0x20
    ee40:	ldr	x0, [sp, #40]
    ee44:	add	x4, x0, #0x20
    ee48:	ldr	w0, [sp, #36]
    ee4c:	and	w5, w0, #0xf
    ee50:	add	x0, sp, #0x48
    ee54:	bl	4b60 <mpfr_fmms@plt>
    ee58:	cmp	w0, #0x0
    ee5c:	b.lt	ee9c <mpc_mul_naive@@Base+0x18c>  // b.tstop
    ee60:	ldr	x1, [sp, #48]
    ee64:	ldr	x2, [sp, #40]
    ee68:	ldr	x0, [sp, #48]
    ee6c:	add	x3, x0, #0x20
    ee70:	ldr	x0, [sp, #40]
    ee74:	add	x4, x0, #0x20
    ee78:	ldr	w0, [sp, #36]
    ee7c:	and	w5, w0, #0xf
    ee80:	add	x0, sp, #0x48
    ee84:	bl	4b60 <mpfr_fmms@plt>
    ee88:	cmp	w0, #0x0
    ee8c:	cset	w0, ne  // ne = any
    ee90:	and	w0, w0, #0xff
    ee94:	mov	w19, w0
    ee98:	b	eea0 <mpc_mul_naive@@Base+0x190>
    ee9c:	mov	w19, #0x2                   	// #2
    eea0:	ldr	x1, [sp, #48]
    eea4:	ldr	x0, [sp, #40]
    eea8:	add	x2, x0, #0x20
    eeac:	ldr	x0, [sp, #48]
    eeb0:	add	x3, x0, #0x20
    eeb4:	ldr	x4, [sp, #40]
    eeb8:	ldr	w0, [sp, #36]
    eebc:	asr	w5, w0, #4
    eec0:	add	x0, sp, #0x48
    eec4:	add	x0, x0, #0x20
    eec8:	bl	4d50 <mpfr_fmma@plt>
    eecc:	cmp	w0, #0x0
    eed0:	b.lt	ef18 <mpc_mul_naive@@Base+0x208>  // b.tstop
    eed4:	ldr	x1, [sp, #48]
    eed8:	ldr	x0, [sp, #40]
    eedc:	add	x2, x0, #0x20
    eee0:	ldr	x0, [sp, #48]
    eee4:	add	x3, x0, #0x20
    eee8:	ldr	x4, [sp, #40]
    eeec:	ldr	w0, [sp, #36]
    eef0:	asr	w5, w0, #4
    eef4:	add	x0, sp, #0x48
    eef8:	add	x0, x0, #0x20
    eefc:	bl	4d50 <mpfr_fmma@plt>
    ef00:	cmp	w0, #0x0
    ef04:	b.eq	ef10 <mpc_mul_naive@@Base+0x200>  // b.none
    ef08:	mov	w0, #0x4                   	// #4
    ef0c:	b	ef1c <mpc_mul_naive@@Base+0x20c>
    ef10:	mov	w0, #0x0                   	// #0
    ef14:	b	ef1c <mpc_mul_naive@@Base+0x20c>
    ef18:	mov	w0, #0x8                   	// #8
    ef1c:	orr	w0, w19, w0
    ef20:	str	w0, [sp, #136]
    ef24:	add	x0, sp, #0x48
    ef28:	mov	w2, #0x0                   	// #0
    ef2c:	mov	x1, x0
    ef30:	ldr	x0, [sp, #56]
    ef34:	bl	5680 <mpc_set@plt>
    ef38:	ldr	w0, [sp, #140]
    ef3c:	cmp	w0, #0x0
    ef40:	b.eq	ef4c <mpc_mul_naive@@Base+0x23c>  // b.none
    ef44:	add	x0, sp, #0x48
    ef48:	bl	4ae0 <mpc_clear@plt>
    ef4c:	ldr	w0, [sp, #136]
    ef50:	ldr	x19, [sp, #16]
    ef54:	ldp	x29, x30, [sp], #144
    ef58:	ret

000000000000ef5c <mpc_mul_karatsuba@@Base>:
    ef5c:	stp	x29, x30, [sp, #-448]!
    ef60:	mov	x29, sp
    ef64:	str	x19, [sp, #16]
    ef68:	str	x0, [sp, #56]
    ef6c:	str	x1, [sp, #48]
    ef70:	str	x2, [sp, #40]
    ef74:	str	w3, [sp, #36]
    ef78:	str	wzr, [sp, #392]
    ef7c:	str	wzr, [sp, #388]
    ef80:	mov	w0, #0x1                   	// #1
    ef84:	str	w0, [sp, #332]
    ef88:	ldr	x1, [sp, #56]
    ef8c:	ldr	x0, [sp, #48]
    ef90:	cmp	x1, x0
    ef94:	b.eq	efa8 <mpc_mul_karatsuba@@Base+0x4c>  // b.none
    ef98:	ldr	x1, [sp, #56]
    ef9c:	ldr	x0, [sp, #40]
    efa0:	cmp	x1, x0
    efa4:	b.ne	efb0 <mpc_mul_karatsuba@@Base+0x54>  // b.any
    efa8:	mov	w0, #0x1                   	// #1
    efac:	b	efb4 <mpc_mul_karatsuba@@Base+0x58>
    efb0:	mov	w0, #0x0                   	// #0
    efb4:	str	w0, [sp, #328]
    efb8:	ldr	w0, [sp, #328]
    efbc:	cmp	w0, #0x0
    efc0:	b.eq	efe0 <mpc_mul_karatsuba@@Base+0x84>  // b.none
    efc4:	ldr	x0, [sp, #56]
    efc8:	ldr	x1, [x0]
    efcc:	ldr	x0, [sp, #56]
    efd0:	ldr	x2, [x0, #32]
    efd4:	add	x0, sp, #0x48
    efd8:	bl	54c0 <mpc_init3@plt>
    efdc:	b	f008 <mpc_mul_karatsuba@@Base+0xac>
    efe0:	ldr	x1, [sp, #56]
    efe4:	add	x0, sp, #0x48
    efe8:	ldp	x2, x3, [x1]
    efec:	stp	x2, x3, [x0]
    eff0:	ldp	x2, x3, [x1, #16]
    eff4:	stp	x2, x3, [x0, #16]
    eff8:	ldp	x2, x3, [x1, #32]
    effc:	stp	x2, x3, [x0, #32]
    f000:	ldp	x2, x3, [x1, #48]
    f004:	stp	x2, x3, [x0, #48]
    f008:	ldr	x0, [sp, #48]
    f00c:	str	x0, [sp, #440]
    f010:	ldr	x0, [sp, #48]
    f014:	add	x0, x0, #0x20
    f018:	str	x0, [sp, #432]
    f01c:	ldr	x0, [sp, #40]
    f020:	str	x0, [sp, #424]
    f024:	ldr	x0, [sp, #40]
    f028:	add	x0, x0, #0x20
    f02c:	str	x0, [sp, #416]
    f030:	str	wzr, [sp, #412]
    f034:	mov	w0, #0x1                   	// #1
    f038:	str	w0, [sp, #400]
    f03c:	mov	w0, #0x1                   	// #1
    f040:	str	w0, [sp, #396]
    f044:	ldr	x1, [sp, #432]
    f048:	ldr	x0, [sp, #440]
    f04c:	bl	54b0 <mpfr_cmpabs@plt>
    f050:	cmp	w0, #0x0
    f054:	b.ge	f084 <mpc_mul_karatsuba@@Base+0x128>  // b.tcont
    f058:	ldr	x0, [sp, #440]
    f05c:	str	x0, [sp, #320]
    f060:	ldr	x0, [sp, #432]
    f064:	str	x0, [sp, #440]
    f068:	ldr	x0, [sp, #320]
    f06c:	str	x0, [sp, #432]
    f070:	ldr	w0, [sp, #412]
    f074:	add	w0, w0, #0x1
    f078:	str	w0, [sp, #412]
    f07c:	mov	w0, #0xffffffff            	// #-1
    f080:	str	w0, [sp, #400]
    f084:	ldr	x1, [sp, #416]
    f088:	ldr	x0, [sp, #424]
    f08c:	bl	54b0 <mpfr_cmpabs@plt>
    f090:	cmp	w0, #0x0
    f094:	b.ge	f0c4 <mpc_mul_karatsuba@@Base+0x168>  // b.tcont
    f098:	ldr	x0, [sp, #424]
    f09c:	str	x0, [sp, #312]
    f0a0:	ldr	x0, [sp, #416]
    f0a4:	str	x0, [sp, #424]
    f0a8:	ldr	x0, [sp, #312]
    f0ac:	str	x0, [sp, #416]
    f0b0:	ldr	w0, [sp, #412]
    f0b4:	add	w0, w0, #0x1
    f0b8:	str	w0, [sp, #412]
    f0bc:	mov	w0, #0xffffffff            	// #-1
    f0c0:	str	w0, [sp, #396]
    f0c4:	ldr	w0, [sp, #412]
    f0c8:	and	w0, w0, #0x1
    f0cc:	cmp	w0, #0x0
    f0d0:	b.eq	f0f0 <mpc_mul_karatsuba@@Base+0x194>  // b.none
    f0d4:	ldr	x0, [sp, #56]
    f0d8:	ldr	x0, [x0, #32]
    f0dc:	str	x0, [sp, #368]
    f0e0:	ldr	w0, [sp, #36]
    f0e4:	asr	w0, w0, #4
    f0e8:	str	w0, [sp, #356]
    f0ec:	b	f108 <mpc_mul_karatsuba@@Base+0x1ac>
    f0f0:	ldr	x0, [sp, #56]
    f0f4:	ldr	x0, [x0]
    f0f8:	str	x0, [sp, #368]
    f0fc:	ldr	w0, [sp, #36]
    f100:	and	w0, w0, #0xf
    f104:	str	w0, [sp, #356]
    f108:	ldr	w0, [sp, #412]
    f10c:	cmp	w0, #0x0
    f110:	b.eq	f144 <mpc_mul_karatsuba@@Base+0x1e8>  // b.none
    f114:	ldr	w0, [sp, #356]
    f118:	cmp	w0, #0x2
    f11c:	b.eq	f13c <mpc_mul_karatsuba@@Base+0x1e0>  // b.none
    f120:	ldr	w0, [sp, #356]
    f124:	cmp	w0, #0x3
    f128:	b.eq	f134 <mpc_mul_karatsuba@@Base+0x1d8>  // b.none
    f12c:	ldr	w0, [sp, #356]
    f130:	b	f140 <mpc_mul_karatsuba@@Base+0x1e4>
    f134:	mov	w0, #0x2                   	// #2
    f138:	b	f140 <mpc_mul_karatsuba@@Base+0x1e4>
    f13c:	mov	w0, #0x3                   	// #3
    f140:	str	w0, [sp, #356]
    f144:	ldr	x0, [sp, #56]
    f148:	ldr	x1, [x0, #32]
    f14c:	ldr	x0, [sp, #56]
    f150:	ldr	x0, [x0]
    f154:	cmp	x1, x0
    f158:	csel	x0, x1, x0, ge  // ge = tcont
    f15c:	str	x0, [sp, #376]
    f160:	ldr	x0, [sp, #440]
    f164:	ldr	x1, [x0]
    f168:	ldr	x0, [sp, #416]
    f16c:	ldr	x0, [x0]
    f170:	add	x0, x1, x0
    f174:	str	x0, [sp, #304]
    f178:	add	x0, sp, #0xc8
    f17c:	ldr	x1, [sp, #304]
    f180:	bl	5530 <mpfr_init2@plt>
    f184:	ldr	x0, [sp, #432]
    f188:	ldr	x1, [x0]
    f18c:	ldr	x0, [sp, #424]
    f190:	ldr	x0, [x0]
    f194:	add	x0, x1, x0
    f198:	str	x0, [sp, #296]
    f19c:	add	x0, sp, #0xa8
    f1a0:	ldr	x1, [sp, #296]
    f1a4:	bl	5530 <mpfr_init2@plt>
    f1a8:	add	x0, sp, #0xe8
    f1ac:	mov	x1, #0x2                   	// #2
    f1b0:	bl	5530 <mpfr_init2@plt>
    f1b4:	add	x0, sp, #0x88
    f1b8:	mov	x1, #0x2                   	// #2
    f1bc:	bl	5530 <mpfr_init2@plt>
    f1c0:	add	x0, sp, #0xc8
    f1c4:	mov	w3, #0x0                   	// #0
    f1c8:	ldr	x2, [sp, #416]
    f1cc:	ldr	x1, [sp, #440]
    f1d0:	bl	4c40 <mpfr_mul@plt>
    f1d4:	str	w0, [sp, #404]
    f1d8:	ldr	w0, [sp, #404]
    f1dc:	cmp	w0, #0x0
    f1e0:	b.eq	f1ec <mpc_mul_karatsuba@@Base+0x290>  // b.none
    f1e4:	str	wzr, [sp, #408]
    f1e8:	b	faa8 <mpc_mul_karatsuba@@Base+0xb4c>
    f1ec:	ldr	w0, [sp, #400]
    f1f0:	cmn	w0, #0x1
    f1f4:	b.ne	f208 <mpc_mul_karatsuba@@Base+0x2ac>  // b.any
    f1f8:	add	x1, sp, #0xc8
    f1fc:	add	x0, sp, #0xc8
    f200:	mov	w2, #0x0                   	// #0
    f204:	bl	4c50 <mpfr_neg@plt>
    f208:	add	x0, sp, #0xa8
    f20c:	mov	w3, #0x0                   	// #0
    f210:	ldr	x2, [sp, #424]
    f214:	ldr	x1, [sp, #432]
    f218:	bl	4c40 <mpfr_mul@plt>
    f21c:	str	w0, [sp, #404]
    f220:	ldr	w0, [sp, #404]
    f224:	cmp	w0, #0x0
    f228:	b.eq	f234 <mpc_mul_karatsuba@@Base+0x2d8>  // b.none
    f22c:	str	wzr, [sp, #408]
    f230:	b	faa8 <mpc_mul_karatsuba@@Base+0xb4c>
    f234:	ldr	w0, [sp, #396]
    f238:	cmn	w0, #0x1
    f23c:	b.ne	f250 <mpc_mul_karatsuba@@Base+0x2f4>  // b.any
    f240:	add	x1, sp, #0xa8
    f244:	add	x0, sp, #0xa8
    f248:	mov	w2, #0x0                   	// #0
    f24c:	bl	4c50 <mpfr_neg@plt>
    f250:	add	x1, sp, #0xa8
    f254:	add	x0, sp, #0xc8
    f258:	bl	54b0 <mpfr_cmpabs@plt>
    f25c:	str	w0, [sp, #384]
    f260:	ldr	w0, [sp, #384]
    f264:	cmp	w0, #0x0
    f268:	b.le	f2e4 <mpc_mul_karatsuba@@Base+0x388>
    f26c:	ldr	x1, [sp, #216]
    f270:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f274:	cmp	x1, x0
    f278:	b.ge	f29c <mpc_mul_karatsuba@@Base+0x340>  // b.tcont
    f27c:	ldr	x1, [sp, #216]
    f280:	mov	x0, #0x2                   	// #2
    f284:	movk	x0, #0x8000, lsl #48
    f288:	cmp	x1, x0
    f28c:	b.ne	f294 <mpc_mul_karatsuba@@Base+0x338>  // b.any
    f290:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f294:	mov	w19, #0x0                   	// #0
    f298:	b	f2a4 <mpc_mul_karatsuba@@Base+0x348>
    f29c:	ldr	w0, [sp, #208]
    f2a0:	lsl	w19, w0, #1
    f2a4:	ldr	x1, [sp, #184]
    f2a8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f2ac:	cmp	x1, x0
    f2b0:	b.ge	f2d4 <mpc_mul_karatsuba@@Base+0x378>  // b.tcont
    f2b4:	ldr	x1, [sp, #184]
    f2b8:	mov	x0, #0x2                   	// #2
    f2bc:	movk	x0, #0x8000, lsl #48
    f2c0:	cmp	x1, x0
    f2c4:	b.ne	f2cc <mpc_mul_karatsuba@@Base+0x370>  // b.any
    f2c8:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f2cc:	mov	w0, #0x0                   	// #0
    f2d0:	b	f2d8 <mpc_mul_karatsuba@@Base+0x37c>
    f2d4:	ldr	w0, [sp, #176]
    f2d8:	sub	w0, w19, w0
    f2dc:	str	w0, [sp, #384]
    f2e0:	b	f3d8 <mpc_mul_karatsuba@@Base+0x47c>
    f2e4:	ldr	w0, [sp, #384]
    f2e8:	cmp	w0, #0x0
    f2ec:	b.ne	f364 <mpc_mul_karatsuba@@Base+0x408>  // b.any
    f2f0:	ldr	x1, [sp, #216]
    f2f4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f2f8:	cmp	x1, x0
    f2fc:	b.ge	f320 <mpc_mul_karatsuba@@Base+0x3c4>  // b.tcont
    f300:	ldr	x1, [sp, #216]
    f304:	mov	x0, #0x2                   	// #2
    f308:	movk	x0, #0x8000, lsl #48
    f30c:	cmp	x1, x0
    f310:	b.ne	f318 <mpc_mul_karatsuba@@Base+0x3bc>  // b.any
    f314:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f318:	mov	w19, #0x0                   	// #0
    f31c:	b	f324 <mpc_mul_karatsuba@@Base+0x3c8>
    f320:	ldr	w19, [sp, #208]
    f324:	ldr	x1, [sp, #184]
    f328:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f32c:	cmp	x1, x0
    f330:	b.ge	f354 <mpc_mul_karatsuba@@Base+0x3f8>  // b.tcont
    f334:	ldr	x1, [sp, #184]
    f338:	mov	x0, #0x2                   	// #2
    f33c:	movk	x0, #0x8000, lsl #48
    f340:	cmp	x1, x0
    f344:	b.ne	f34c <mpc_mul_karatsuba@@Base+0x3f0>  // b.any
    f348:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f34c:	mov	w0, #0x0                   	// #0
    f350:	b	f358 <mpc_mul_karatsuba@@Base+0x3fc>
    f354:	ldr	w0, [sp, #176]
    f358:	sub	w0, w19, w0
    f35c:	str	w0, [sp, #384]
    f360:	b	f3d8 <mpc_mul_karatsuba@@Base+0x47c>
    f364:	ldr	x1, [sp, #216]
    f368:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f36c:	cmp	x1, x0
    f370:	b.ge	f394 <mpc_mul_karatsuba@@Base+0x438>  // b.tcont
    f374:	ldr	x1, [sp, #216]
    f378:	mov	x0, #0x2                   	// #2
    f37c:	movk	x0, #0x8000, lsl #48
    f380:	cmp	x1, x0
    f384:	b.ne	f38c <mpc_mul_karatsuba@@Base+0x430>  // b.any
    f388:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f38c:	mov	w19, #0x0                   	// #0
    f390:	b	f398 <mpc_mul_karatsuba@@Base+0x43c>
    f394:	ldr	w19, [sp, #208]
    f398:	ldr	x1, [sp, #184]
    f39c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f3a0:	cmp	x1, x0
    f3a4:	b.ge	f3c8 <mpc_mul_karatsuba@@Base+0x46c>  // b.tcont
    f3a8:	ldr	x1, [sp, #184]
    f3ac:	mov	x0, #0x2                   	// #2
    f3b0:	movk	x0, #0x8000, lsl #48
    f3b4:	cmp	x1, x0
    f3b8:	b.ne	f3c0 <mpc_mul_karatsuba@@Base+0x464>  // b.any
    f3bc:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f3c0:	mov	w0, #0x0                   	// #0
    f3c4:	b	f3d0 <mpc_mul_karatsuba@@Base+0x474>
    f3c8:	ldr	w0, [sp, #176]
    f3cc:	lsl	w0, w0, #1
    f3d0:	sub	w0, w19, w0
    f3d4:	str	w0, [sp, #384]
    f3d8:	ldr	x0, [sp, #440]
    f3dc:	ldr	x1, [x0, #16]
    f3e0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f3e4:	cmp	x1, x0
    f3e8:	b.ge	f410 <mpc_mul_karatsuba@@Base+0x4b4>  // b.tcont
    f3ec:	ldr	x0, [sp, #440]
    f3f0:	ldr	x1, [x0, #16]
    f3f4:	mov	x0, #0x2                   	// #2
    f3f8:	movk	x0, #0x8000, lsl #48
    f3fc:	cmp	x1, x0
    f400:	b.ne	f408 <mpc_mul_karatsuba@@Base+0x4ac>  // b.any
    f404:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f408:	mov	w0, #0x0                   	// #0
    f40c:	b	f418 <mpc_mul_karatsuba@@Base+0x4bc>
    f410:	ldr	x0, [sp, #440]
    f414:	ldr	w0, [x0, #8]
    f418:	ldr	w1, [sp, #400]
    f41c:	mul	w1, w0, w1
    f420:	ldr	w0, [sp, #396]
    f424:	mul	w19, w1, w0
    f428:	ldr	x0, [sp, #424]
    f42c:	ldr	x1, [x0, #16]
    f430:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f434:	cmp	x1, x0
    f438:	b.ge	f460 <mpc_mul_karatsuba@@Base+0x504>  // b.tcont
    f43c:	ldr	x0, [sp, #424]
    f440:	ldr	x1, [x0, #16]
    f444:	mov	x0, #0x2                   	// #2
    f448:	movk	x0, #0x8000, lsl #48
    f44c:	cmp	x1, x0
    f450:	b.ne	f458 <mpc_mul_karatsuba@@Base+0x4fc>  // b.any
    f454:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f458:	mov	w0, #0x0                   	// #0
    f45c:	b	f468 <mpc_mul_karatsuba@@Base+0x50c>
    f460:	ldr	x0, [sp, #424]
    f464:	ldr	w0, [x0, #8]
    f468:	mul	w0, w0, w19
    f46c:	str	w0, [sp, #292]
    f470:	ldr	w1, [sp, #384]
    f474:	ldr	w0, [sp, #292]
    f478:	mul	w0, w1, w0
    f47c:	cmp	w0, #0x0
    f480:	b.ge	f4e4 <mpc_mul_karatsuba@@Base+0x588>  // b.tcont
    f484:	ldr	x0, [sp, #440]
    f488:	str	x0, [sp, #280]
    f48c:	ldr	x0, [sp, #424]
    f490:	str	x0, [sp, #440]
    f494:	ldr	x0, [sp, #280]
    f498:	str	x0, [sp, #424]
    f49c:	ldr	x0, [sp, #432]
    f4a0:	str	x0, [sp, #272]
    f4a4:	ldr	x0, [sp, #416]
    f4a8:	str	x0, [sp, #432]
    f4ac:	ldr	x0, [sp, #272]
    f4b0:	str	x0, [sp, #416]
    f4b4:	add	x1, sp, #0xa8
    f4b8:	add	x0, sp, #0xc8
    f4bc:	bl	5190 <mpfr_swap@plt>
    f4c0:	ldr	w0, [sp, #400]
    f4c4:	str	w0, [sp, #268]
    f4c8:	ldr	w0, [sp, #396]
    f4cc:	str	w0, [sp, #400]
    f4d0:	ldr	w0, [sp, #268]
    f4d4:	str	w0, [sp, #396]
    f4d8:	ldr	w0, [sp, #384]
    f4dc:	neg	w0, w0
    f4e0:	str	w0, [sp, #384]
    f4e4:	str	wzr, [sp, #348]
    f4e8:	ldr	w0, [sp, #348]
    f4ec:	add	w0, w0, #0x1
    f4f0:	str	w0, [sp, #348]
    f4f4:	ldr	x0, [sp, #376]
    f4f8:	bl	4de0 <mpc_ceil_log2@plt>
    f4fc:	add	x0, x0, #0x3
    f500:	ldr	x1, [sp, #376]
    f504:	add	x0, x1, x0
    f508:	str	x0, [sp, #376]
    f50c:	ldr	x0, [sp, #376]
    f510:	str	x0, [sp, #360]
    f514:	add	x0, sp, #0xe8
    f518:	ldr	x1, [sp, #360]
    f51c:	bl	4d40 <mpfr_set_prec@plt>
    f520:	add	x0, sp, #0x88
    f524:	ldr	x1, [sp, #376]
    f528:	bl	4d40 <mpfr_set_prec@plt>
    f52c:	ldr	w0, [sp, #400]
    f530:	cmn	w0, #0x1
    f534:	b.ne	f550 <mpc_mul_karatsuba@@Base+0x5f4>  // b.any
    f538:	add	x0, sp, #0xe8
    f53c:	mov	w3, #0x4                   	// #4
    f540:	ldr	x2, [sp, #440]
    f544:	ldr	x1, [sp, #432]
    f548:	bl	4b30 <mpfr_sub@plt>
    f54c:	b	f564 <mpc_mul_karatsuba@@Base+0x608>
    f550:	add	x0, sp, #0xe8
    f554:	mov	w3, #0x4                   	// #4
    f558:	ldr	x2, [sp, #440]
    f55c:	ldr	x1, [sp, #432]
    f560:	bl	4f50 <mpfr_add@plt>
    f564:	str	w0, [sp, #404]
    f568:	ldr	w0, [sp, #396]
    f56c:	cmn	w0, #0x1
    f570:	b.ne	f58c <mpc_mul_karatsuba@@Base+0x630>  // b.any
    f574:	add	x0, sp, #0x88
    f578:	mov	w3, #0x4                   	// #4
    f57c:	ldr	x2, [sp, #416]
    f580:	ldr	x1, [sp, #424]
    f584:	bl	4f50 <mpfr_add@plt>
    f588:	b	f5a0 <mpc_mul_karatsuba@@Base+0x644>
    f58c:	add	x0, sp, #0x88
    f590:	mov	w3, #0x4                   	// #4
    f594:	ldr	x2, [sp, #416]
    f598:	ldr	x1, [sp, #424]
    f59c:	bl	4b30 <mpfr_sub@plt>
    f5a0:	ldr	w1, [sp, #404]
    f5a4:	orr	w0, w1, w0
    f5a8:	str	w0, [sp, #404]
    f5ac:	ldr	w0, [sp, #396]
    f5b0:	cmn	w0, #0x1
    f5b4:	b.ne	f5c8 <mpc_mul_karatsuba@@Base+0x66c>  // b.any
    f5b8:	add	x1, sp, #0x88
    f5bc:	add	x0, sp, #0x88
    f5c0:	mov	w2, #0x0                   	// #0
    f5c4:	bl	4c50 <mpfr_neg@plt>
    f5c8:	ldr	w0, [sp, #404]
    f5cc:	cmp	w0, #0x0
    f5d0:	b.ne	f5f0 <mpc_mul_karatsuba@@Base+0x694>  // b.any
    f5d4:	ldr	x0, [sp, #376]
    f5d8:	lsl	x0, x0, #1
    f5dc:	str	x0, [sp, #360]
    f5e0:	add	x0, sp, #0xe8
    f5e4:	mov	w2, #0x0                   	// #0
    f5e8:	ldr	x1, [sp, #360]
    f5ec:	bl	5470 <mpfr_prec_round@plt>
    f5f0:	add	x2, sp, #0x88
    f5f4:	add	x1, sp, #0xe8
    f5f8:	add	x0, sp, #0xe8
    f5fc:	mov	w3, #0x4                   	// #4
    f600:	bl	4c40 <mpfr_mul@plt>
    f604:	mov	w1, w0
    f608:	ldr	w0, [sp, #404]
    f60c:	orr	w0, w0, w1
    f610:	str	w0, [sp, #404]
    f614:	ldr	w0, [sp, #404]
    f618:	cmp	w0, #0x0
    f61c:	b.ne	f68c <mpc_mul_karatsuba@@Base+0x730>  // b.any
    f620:	ldr	x1, [sp, #216]
    f624:	ldr	x0, [sp, #184]
    f628:	sub	x0, x1, x0
    f62c:	cmp	x0, #0x0
    f630:	cneg	x1, x0, lt  // lt = tstop
    f634:	ldr	x0, [sp, #304]
    f638:	ldr	x3, [sp, #296]
    f63c:	ldr	x2, [sp, #296]
    f640:	cmp	x3, x0
    f644:	csel	x0, x2, x0, ge  // ge = tcont
    f648:	add	x0, x1, x0
    f64c:	add	x0, x0, #0x1
    f650:	str	x0, [sp, #336]
    f654:	ldr	x1, [sp, #336]
    f658:	ldr	x0, [sp, #360]
    f65c:	cmp	x1, x0
    f660:	b.le	f66c <mpc_mul_karatsuba@@Base+0x710>
    f664:	ldr	x0, [sp, #360]
    f668:	str	x0, [sp, #336]
    f66c:	ldr	x1, [sp, #336]
    f670:	ldr	x0, [sp, #376]
    f674:	cmp	x1, x0
    f678:	b.le	f68c <mpc_mul_karatsuba@@Base+0x730>
    f67c:	add	x0, sp, #0x88
    f680:	mov	w2, #0x0                   	// #0
    f684:	ldr	x1, [sp, #336]
    f688:	bl	5470 <mpfr_prec_round@plt>
    f68c:	ldr	w0, [sp, #292]
    f690:	cmp	w0, #0x0
    f694:	b.le	f6a0 <mpc_mul_karatsuba@@Base+0x744>
    f698:	mov	w0, #0x2                   	// #2
    f69c:	b	f6a4 <mpc_mul_karatsuba@@Base+0x748>
    f6a0:	mov	w0, #0x3                   	// #3
    f6a4:	str	w0, [sp, #352]
    f6a8:	add	x2, sp, #0xa8
    f6ac:	add	x1, sp, #0xc8
    f6b0:	add	x0, sp, #0x88
    f6b4:	ldr	w3, [sp, #352]
    f6b8:	bl	4b30 <mpfr_sub@plt>
    f6bc:	mov	w1, w0
    f6c0:	ldr	w0, [sp, #404]
    f6c4:	orr	w0, w0, w1
    f6c8:	str	w0, [sp, #404]
    f6cc:	ldr	x1, [sp, #248]
    f6d0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f6d4:	cmp	x1, x0
    f6d8:	b.ge	f6fc <mpc_mul_karatsuba@@Base+0x7a0>  // b.tcont
    f6dc:	ldr	x1, [sp, #248]
    f6e0:	mov	x0, #0x2                   	// #2
    f6e4:	movk	x0, #0x8000, lsl #48
    f6e8:	cmp	x1, x0
    f6ec:	b.ne	f6f4 <mpc_mul_karatsuba@@Base+0x798>  // b.any
    f6f0:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f6f4:	mov	w0, #0x1                   	// #1
    f6f8:	b	f70c <mpc_mul_karatsuba@@Base+0x7b0>
    f6fc:	ldr	w0, [sp, #240]
    f700:	cmp	w0, #0x0
    f704:	cset	w0, eq  // eq = none
    f708:	and	w0, w0, #0xff
    f70c:	cmp	w0, #0x0
    f710:	b.eq	f76c <mpc_mul_karatsuba@@Base+0x810>  // b.none
    f714:	ldr	x1, [sp, #152]
    f718:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f71c:	cmp	x1, x0
    f720:	b.ge	f744 <mpc_mul_karatsuba@@Base+0x7e8>  // b.tcont
    f724:	ldr	x1, [sp, #152]
    f728:	mov	x0, #0x2                   	// #2
    f72c:	movk	x0, #0x8000, lsl #48
    f730:	cmp	x1, x0
    f734:	b.ne	f73c <mpc_mul_karatsuba@@Base+0x7e0>  // b.any
    f738:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f73c:	mov	w0, #0x0                   	// #0
    f740:	b	f754 <mpc_mul_karatsuba@@Base+0x7f8>
    f744:	ldr	w0, [sp, #144]
    f748:	cmp	w0, #0x0
    f74c:	cset	w0, gt
    f750:	and	w0, w0, #0xff
    f754:	cmp	w0, #0x0
    f758:	b.eq	f764 <mpc_mul_karatsuba@@Base+0x808>  // b.none
    f75c:	mov	w0, #0x2                   	// #2
    f760:	b	f768 <mpc_mul_karatsuba@@Base+0x80c>
    f764:	mov	w0, #0x3                   	// #3
    f768:	str	w0, [sp, #352]
    f76c:	add	x2, sp, #0x88
    f770:	add	x1, sp, #0xe8
    f774:	add	x0, sp, #0xe8
    f778:	ldr	w3, [sp, #352]
    f77c:	bl	4f50 <mpfr_add@plt>
    f780:	mov	w1, w0
    f784:	ldr	w0, [sp, #404]
    f788:	orr	w0, w0, w1
    f78c:	str	w0, [sp, #404]
    f790:	ldr	w0, [sp, #404]
    f794:	cmp	w0, #0x0
    f798:	b.eq	f7e0 <mpc_mul_karatsuba@@Base+0x884>  // b.none
    f79c:	ldr	x0, [sp, #360]
    f7a0:	sub	x5, x0, #0x3
    f7a4:	ldr	w0, [sp, #356]
    f7a8:	cmp	w0, #0x0
    f7ac:	cset	w0, eq  // eq = none
    f7b0:	and	w0, w0, #0xff
    f7b4:	and	x1, x0, #0xff
    f7b8:	ldr	x0, [sp, #368]
    f7bc:	add	x1, x1, x0
    f7c0:	add	x0, sp, #0xe8
    f7c4:	mov	x4, x1
    f7c8:	mov	w3, #0x1                   	// #1
    f7cc:	ldr	w2, [sp, #352]
    f7d0:	mov	x1, x5
    f7d4:	bl	5540 <mpfr_can_round@plt>
    f7d8:	cmp	w0, #0x0
    f7dc:	b.eq	f7e8 <mpc_mul_karatsuba@@Base+0x88c>  // b.none
    f7e0:	mov	w0, #0x1                   	// #1
    f7e4:	b	f7ec <mpc_mul_karatsuba@@Base+0x890>
    f7e8:	mov	w0, #0x0                   	// #0
    f7ec:	str	w0, [sp, #408]
    f7f0:	ldr	w0, [sp, #408]
    f7f4:	cmp	w0, #0x0
    f7f8:	b.ne	f80c <mpc_mul_karatsuba@@Base+0x8b0>  // b.any
    f7fc:	ldr	w1, [sp, #348]
    f800:	ldr	w0, [sp, #332]
    f804:	cmp	w1, w0
    f808:	b.le	f4e8 <mpc_mul_karatsuba@@Base+0x58c>
    f80c:	ldr	w0, [sp, #408]
    f810:	cmp	w0, #0x0
    f814:	b.eq	faa4 <mpc_mul_karatsuba@@Base+0xb48>  // b.none
    f818:	ldr	w0, [sp, #404]
    f81c:	cmp	w0, #0x0
    f820:	b.eq	f85c <mpc_mul_karatsuba@@Base+0x900>  // b.none
    f824:	ldr	x1, [sp, #248]
    f828:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    f82c:	cmp	x1, x0
    f830:	b.ge	f854 <mpc_mul_karatsuba@@Base+0x8f8>  // b.tcont
    f834:	ldr	x1, [sp, #248]
    f838:	mov	x0, #0x2                   	// #2
    f83c:	movk	x0, #0x8000, lsl #48
    f840:	cmp	x1, x0
    f844:	b.ne	f84c <mpc_mul_karatsuba@@Base+0x8f0>  // b.any
    f848:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f84c:	mov	w0, #0x0                   	// #0
    f850:	b	f858 <mpc_mul_karatsuba@@Base+0x8fc>
    f854:	ldr	w0, [sp, #240]
    f858:	str	w0, [sp, #404]
    f85c:	ldr	w0, [sp, #412]
    f860:	cmp	w0, #0x0
    f864:	b.ne	f8e0 <mpc_mul_karatsuba@@Base+0x984>  // b.any
    f868:	ldr	w0, [sp, #36]
    f86c:	and	w2, w0, #0xf
    f870:	ldr	w3, [sp, #240]
    f874:	add	x1, sp, #0xe8
    f878:	add	x0, sp, #0x48
    f87c:	bl	52d0 <mpfr_set4@plt>
    f880:	str	w0, [sp, #392]
    f884:	ldr	w0, [sp, #392]
    f888:	cmp	w0, #0x0
    f88c:	b.ne	f8bc <mpc_mul_karatsuba@@Base+0x960>  // b.any
    f890:	ldr	w0, [sp, #404]
    f894:	str	w0, [sp, #392]
    f898:	ldr	w0, [sp, #36]
    f89c:	asr	w3, w0, #4
    f8a0:	add	x2, sp, #0xa8
    f8a4:	add	x1, sp, #0xc8
    f8a8:	add	x0, sp, #0x48
    f8ac:	add	x0, x0, #0x20
    f8b0:	bl	4f50 <mpfr_add@plt>
    f8b4:	str	w0, [sp, #388]
    f8b8:	b	fa8c <mpc_mul_karatsuba@@Base+0xb30>
    f8bc:	ldr	w0, [sp, #36]
    f8c0:	asr	w3, w0, #4
    f8c4:	add	x2, sp, #0xa8
    f8c8:	add	x1, sp, #0xc8
    f8cc:	add	x0, sp, #0x48
    f8d0:	add	x0, x0, #0x20
    f8d4:	bl	4f50 <mpfr_add@plt>
    f8d8:	str	w0, [sp, #388]
    f8dc:	b	fa8c <mpc_mul_karatsuba@@Base+0xb30>
    f8e0:	ldr	w0, [sp, #412]
    f8e4:	cmp	w0, #0x1
    f8e8:	b.ne	f960 <mpc_mul_karatsuba@@Base+0xa04>  // b.any
    f8ec:	ldr	w0, [sp, #36]
    f8f0:	asr	w2, w0, #4
    f8f4:	add	x1, sp, #0xe8
    f8f8:	add	x0, sp, #0x48
    f8fc:	add	x0, x0, #0x20
    f900:	bl	4c50 <mpfr_neg@plt>
    f904:	str	w0, [sp, #388]
    f908:	ldr	w0, [sp, #388]
    f90c:	cmp	w0, #0x0
    f910:	b.ne	f940 <mpc_mul_karatsuba@@Base+0x9e4>  // b.any
    f914:	ldr	w0, [sp, #404]
    f918:	neg	w0, w0
    f91c:	str	w0, [sp, #388]
    f920:	ldr	w0, [sp, #36]
    f924:	and	w3, w0, #0xf
    f928:	add	x2, sp, #0xa8
    f92c:	add	x1, sp, #0xc8
    f930:	add	x0, sp, #0x48
    f934:	bl	4f50 <mpfr_add@plt>
    f938:	str	w0, [sp, #392]
    f93c:	b	fa8c <mpc_mul_karatsuba@@Base+0xb30>
    f940:	ldr	w0, [sp, #36]
    f944:	and	w3, w0, #0xf
    f948:	add	x2, sp, #0xa8
    f94c:	add	x1, sp, #0xc8
    f950:	add	x0, sp, #0x48
    f954:	bl	4f50 <mpfr_add@plt>
    f958:	str	w0, [sp, #392]
    f95c:	b	fa8c <mpc_mul_karatsuba@@Base+0xb30>
    f960:	ldr	w0, [sp, #36]
    f964:	and	w2, w0, #0xf
    f968:	add	x1, sp, #0xe8
    f96c:	add	x0, sp, #0x48
    f970:	bl	4c50 <mpfr_neg@plt>
    f974:	str	w0, [sp, #392]
    f978:	ldr	w0, [sp, #392]
    f97c:	cmp	w0, #0x0
    f980:	b.ne	fa10 <mpc_mul_karatsuba@@Base+0xab4>  // b.any
    f984:	ldr	w0, [sp, #404]
    f988:	neg	w0, w0
    f98c:	str	w0, [sp, #392]
    f990:	ldr	w0, [sp, #36]
    f994:	asr	w0, w0, #4
    f998:	cmp	w0, #0x2
    f99c:	b.eq	f9c4 <mpc_mul_karatsuba@@Base+0xa68>  // b.none
    f9a0:	ldr	w0, [sp, #36]
    f9a4:	asr	w0, w0, #4
    f9a8:	cmp	w0, #0x3
    f9ac:	b.eq	f9bc <mpc_mul_karatsuba@@Base+0xa60>  // b.none
    f9b0:	ldr	w0, [sp, #36]
    f9b4:	asr	w0, w0, #4
    f9b8:	b	f9c8 <mpc_mul_karatsuba@@Base+0xa6c>
    f9bc:	mov	w0, #0x2                   	// #2
    f9c0:	b	f9c8 <mpc_mul_karatsuba@@Base+0xa6c>
    f9c4:	mov	w0, #0x3                   	// #3
    f9c8:	add	x2, sp, #0xa8
    f9cc:	add	x5, sp, #0xc8
    f9d0:	add	x1, sp, #0x48
    f9d4:	add	x4, x1, #0x20
    f9d8:	mov	w3, w0
    f9dc:	mov	x1, x5
    f9e0:	mov	x0, x4
    f9e4:	bl	4f50 <mpfr_add@plt>
    f9e8:	neg	w0, w0
    f9ec:	str	w0, [sp, #388]
    f9f0:	ldr	w0, [sp, #36]
    f9f4:	asr	w2, w0, #4
    f9f8:	add	x0, sp, #0x48
    f9fc:	add	x1, x0, #0x20
    fa00:	add	x0, sp, #0x48
    fa04:	add	x0, x0, #0x20
    fa08:	bl	4c50 <mpfr_neg@plt>
    fa0c:	b	fa8c <mpc_mul_karatsuba@@Base+0xb30>
    fa10:	ldr	w0, [sp, #36]
    fa14:	asr	w0, w0, #4
    fa18:	cmp	w0, #0x2
    fa1c:	b.eq	fa44 <mpc_mul_karatsuba@@Base+0xae8>  // b.none
    fa20:	ldr	w0, [sp, #36]
    fa24:	asr	w0, w0, #4
    fa28:	cmp	w0, #0x3
    fa2c:	b.eq	fa3c <mpc_mul_karatsuba@@Base+0xae0>  // b.none
    fa30:	ldr	w0, [sp, #36]
    fa34:	asr	w0, w0, #4
    fa38:	b	fa48 <mpc_mul_karatsuba@@Base+0xaec>
    fa3c:	mov	w0, #0x2                   	// #2
    fa40:	b	fa48 <mpc_mul_karatsuba@@Base+0xaec>
    fa44:	mov	w0, #0x3                   	// #3
    fa48:	add	x2, sp, #0xa8
    fa4c:	add	x5, sp, #0xc8
    fa50:	add	x1, sp, #0x48
    fa54:	add	x4, x1, #0x20
    fa58:	mov	w3, w0
    fa5c:	mov	x1, x5
    fa60:	mov	x0, x4
    fa64:	bl	4f50 <mpfr_add@plt>
    fa68:	neg	w0, w0
    fa6c:	str	w0, [sp, #388]
    fa70:	ldr	w0, [sp, #36]
    fa74:	asr	w2, w0, #4
    fa78:	add	x0, sp, #0x48
    fa7c:	add	x1, x0, #0x20
    fa80:	add	x0, sp, #0x48
    fa84:	add	x0, x0, #0x20
    fa88:	bl	4c50 <mpfr_neg@plt>
    fa8c:	add	x0, sp, #0x48
    fa90:	mov	w2, #0x0                   	// #0
    fa94:	mov	x1, x0
    fa98:	ldr	x0, [sp, #56]
    fa9c:	bl	5680 <mpc_set@plt>
    faa0:	b	faa8 <mpc_mul_karatsuba@@Base+0xb4c>
    faa4:	nop
    faa8:	add	x0, sp, #0xe8
    faac:	bl	4e30 <mpfr_clear@plt>
    fab0:	add	x0, sp, #0xc8
    fab4:	bl	4e30 <mpfr_clear@plt>
    fab8:	add	x0, sp, #0xa8
    fabc:	bl	4e30 <mpfr_clear@plt>
    fac0:	add	x0, sp, #0x88
    fac4:	bl	4e30 <mpfr_clear@plt>
    fac8:	ldr	w0, [sp, #328]
    facc:	cmp	w0, #0x0
    fad0:	b.eq	fadc <mpc_mul_karatsuba@@Base+0xb80>  // b.none
    fad4:	add	x0, sp, #0x48
    fad8:	bl	4ae0 <mpc_clear@plt>
    fadc:	ldr	w0, [sp, #408]
    fae0:	cmp	w0, #0x0
    fae4:	b.eq	fb44 <mpc_mul_karatsuba@@Base+0xbe8>  // b.none
    fae8:	ldr	w0, [sp, #392]
    faec:	cmp	w0, #0x0
    faf0:	b.lt	fb0c <mpc_mul_karatsuba@@Base+0xbb0>  // b.tstop
    faf4:	ldr	w0, [sp, #392]
    faf8:	cmp	w0, #0x0
    fafc:	cset	w0, ne  // ne = any
    fb00:	and	w0, w0, #0xff
    fb04:	mov	w1, w0
    fb08:	b	fb10 <mpc_mul_karatsuba@@Base+0xbb4>
    fb0c:	mov	w1, #0x2                   	// #2
    fb10:	ldr	w0, [sp, #388]
    fb14:	cmp	w0, #0x0
    fb18:	b.lt	fb38 <mpc_mul_karatsuba@@Base+0xbdc>  // b.tstop
    fb1c:	ldr	w0, [sp, #388]
    fb20:	cmp	w0, #0x0
    fb24:	b.eq	fb30 <mpc_mul_karatsuba@@Base+0xbd4>  // b.none
    fb28:	mov	w0, #0x4                   	// #4
    fb2c:	b	fb3c <mpc_mul_karatsuba@@Base+0xbe0>
    fb30:	mov	w0, #0x0                   	// #0
    fb34:	b	fb3c <mpc_mul_karatsuba@@Base+0xbe0>
    fb38:	mov	w0, #0x8                   	// #8
    fb3c:	orr	w0, w1, w0
    fb40:	b	fb58 <mpc_mul_karatsuba@@Base+0xbfc>
    fb44:	ldr	w3, [sp, #36]
    fb48:	ldr	x2, [sp, #40]
    fb4c:	ldr	x1, [sp, #48]
    fb50:	ldr	x0, [sp, #56]
    fb54:	bl	4fa0 <mpc_mul_naive@plt>
    fb58:	ldr	x19, [sp, #16]
    fb5c:	ldp	x29, x30, [sp], #448
    fb60:	ret

000000000000fb64 <mpc_mul@@Base>:
    fb64:	stp	x29, x30, [sp, #-48]!
    fb68:	mov	x29, sp
    fb6c:	str	x0, [sp, #40]
    fb70:	str	x1, [sp, #32]
    fb74:	str	x2, [sp, #24]
    fb78:	str	w3, [sp, #20]
    fb7c:	ldr	x0, [sp, #32]
    fb80:	ldr	x1, [x0, #16]
    fb84:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    fb88:	cmp	x1, x0
    fb8c:	b.eq	fba4 <mpc_mul@@Base+0x40>  // b.none
    fb90:	ldr	x0, [sp, #32]
    fb94:	ldr	x1, [x0, #48]
    fb98:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    fb9c:	cmp	x1, x0
    fba0:	b.ne	fbb8 <mpc_mul@@Base+0x54>  // b.any
    fba4:	ldr	x2, [sp, #24]
    fba8:	ldr	x1, [sp, #32]
    fbac:	ldr	x0, [sp, #40]
    fbb0:	bl	e2b0 <mpc_mul_2ui@@Base+0xc8>
    fbb4:	b	fe34 <mpc_mul@@Base+0x2d0>
    fbb8:	ldr	x0, [sp, #24]
    fbbc:	ldr	x1, [x0, #16]
    fbc0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    fbc4:	cmp	x1, x0
    fbc8:	b.eq	fbe0 <mpc_mul@@Base+0x7c>  // b.none
    fbcc:	ldr	x0, [sp, #24]
    fbd0:	ldr	x1, [x0, #48]
    fbd4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
    fbd8:	cmp	x1, x0
    fbdc:	b.ne	fbf4 <mpc_mul@@Base+0x90>  // b.any
    fbe0:	ldr	x2, [sp, #32]
    fbe4:	ldr	x1, [sp, #24]
    fbe8:	ldr	x0, [sp, #40]
    fbec:	bl	e2b0 <mpc_mul_2ui@@Base+0xc8>
    fbf0:	b	fe34 <mpc_mul@@Base+0x2d0>
    fbf4:	ldr	x0, [sp, #32]
    fbf8:	ldr	x1, [x0, #16]
    fbfc:	mov	x0, #0x2                   	// #2
    fc00:	movk	x0, #0x8000, lsl #48
    fc04:	cmp	x1, x0
    fc08:	b.eq	fc54 <mpc_mul@@Base+0xf0>  // b.none
    fc0c:	ldr	x0, [sp, #32]
    fc10:	ldr	x1, [x0, #48]
    fc14:	mov	x0, #0x2                   	// #2
    fc18:	movk	x0, #0x8000, lsl #48
    fc1c:	cmp	x1, x0
    fc20:	b.eq	fc54 <mpc_mul@@Base+0xf0>  // b.none
    fc24:	ldr	x0, [sp, #24]
    fc28:	ldr	x1, [x0, #16]
    fc2c:	mov	x0, #0x2                   	// #2
    fc30:	movk	x0, #0x8000, lsl #48
    fc34:	cmp	x1, x0
    fc38:	b.eq	fc54 <mpc_mul@@Base+0xf0>  // b.none
    fc3c:	ldr	x0, [sp, #24]
    fc40:	ldr	x1, [x0, #48]
    fc44:	mov	x0, #0x2                   	// #2
    fc48:	movk	x0, #0x8000, lsl #48
    fc4c:	cmp	x1, x0
    fc50:	b.ne	fc70 <mpc_mul@@Base+0x10c>  // b.any
    fc54:	ldr	x0, [sp, #40]
    fc58:	bl	4b10 <mpfr_set_nan@plt>
    fc5c:	ldr	x0, [sp, #40]
    fc60:	add	x0, x0, #0x20
    fc64:	bl	4b10 <mpfr_set_nan@plt>
    fc68:	mov	w0, #0x0                   	// #0
    fc6c:	b	fe34 <mpc_mul@@Base+0x2d0>
    fc70:	ldr	x0, [sp, #32]
    fc74:	ldr	x1, [x0, #48]
    fc78:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    fc7c:	cmp	x1, x0
    fc80:	b.ne	fc9c <mpc_mul@@Base+0x138>  // b.any
    fc84:	ldr	w3, [sp, #20]
    fc88:	ldr	x2, [sp, #32]
    fc8c:	ldr	x1, [sp, #24]
    fc90:	ldr	x0, [sp, #40]
    fc94:	bl	e8d0 <mpc_mul_2ui@@Base+0x6e8>
    fc98:	b	fe34 <mpc_mul@@Base+0x2d0>
    fc9c:	ldr	x0, [sp, #24]
    fca0:	ldr	x1, [x0, #48]
    fca4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    fca8:	cmp	x1, x0
    fcac:	b.ne	fcc8 <mpc_mul@@Base+0x164>  // b.any
    fcb0:	ldr	w3, [sp, #20]
    fcb4:	ldr	x2, [sp, #24]
    fcb8:	ldr	x1, [sp, #32]
    fcbc:	ldr	x0, [sp, #40]
    fcc0:	bl	e8d0 <mpc_mul_2ui@@Base+0x6e8>
    fcc4:	b	fe34 <mpc_mul@@Base+0x2d0>
    fcc8:	ldr	x0, [sp, #32]
    fccc:	ldr	x1, [x0, #16]
    fcd0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    fcd4:	cmp	x1, x0
    fcd8:	b.ne	fcf4 <mpc_mul@@Base+0x190>  // b.any
    fcdc:	ldr	w3, [sp, #20]
    fce0:	ldr	x2, [sp, #32]
    fce4:	ldr	x1, [sp, #24]
    fce8:	ldr	x0, [sp, #40]
    fcec:	bl	ea70 <mpc_mul_2ui@@Base+0x888>
    fcf0:	b	fe34 <mpc_mul@@Base+0x2d0>
    fcf4:	ldr	x0, [sp, #24]
    fcf8:	ldr	x1, [x0, #16]
    fcfc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
    fd00:	cmp	x1, x0
    fd04:	b.ne	fd20 <mpc_mul@@Base+0x1bc>  // b.any
    fd08:	ldr	w3, [sp, #20]
    fd0c:	ldr	x2, [sp, #24]
    fd10:	ldr	x1, [sp, #32]
    fd14:	ldr	x0, [sp, #40]
    fd18:	bl	ea70 <mpc_mul_2ui@@Base+0x888>
    fd1c:	b	fe34 <mpc_mul@@Base+0x2d0>
    fd20:	ldr	x0, [sp, #32]
    fd24:	ldr	x1, [x0, #16]
    fd28:	ldr	x0, [sp, #32]
    fd2c:	ldr	x0, [x0, #48]
    fd30:	sub	x0, x1, x0
    fd34:	cmp	x0, #0x0
    fd38:	cneg	x2, x0, lt  // lt = tstop
    fd3c:	ldr	x0, [sp, #32]
    fd40:	ldr	x1, [x0, #32]
    fd44:	ldr	x0, [sp, #32]
    fd48:	ldr	x0, [x0]
    fd4c:	cmp	x1, x0
    fd50:	csel	x0, x1, x0, ge  // ge = tcont
    fd54:	lsr	x1, x0, #63
    fd58:	add	x0, x1, x0
    fd5c:	asr	x0, x0, #1
    fd60:	cmp	x2, x0
    fd64:	b.gt	fdb0 <mpc_mul@@Base+0x24c>
    fd68:	ldr	x0, [sp, #24]
    fd6c:	ldr	x1, [x0, #16]
    fd70:	ldr	x0, [sp, #24]
    fd74:	ldr	x0, [x0, #48]
    fd78:	sub	x0, x1, x0
    fd7c:	cmp	x0, #0x0
    fd80:	cneg	x2, x0, lt  // lt = tstop
    fd84:	ldr	x0, [sp, #24]
    fd88:	ldr	x1, [x0, #32]
    fd8c:	ldr	x0, [sp, #24]
    fd90:	ldr	x0, [x0]
    fd94:	cmp	x1, x0
    fd98:	csel	x0, x1, x0, ge  // ge = tcont
    fd9c:	lsr	x1, x0, #63
    fda0:	add	x0, x1, x0
    fda4:	asr	x0, x0, #1
    fda8:	cmp	x2, x0
    fdac:	b.le	fdc8 <mpc_mul@@Base+0x264>
    fdb0:	ldr	w3, [sp, #20]
    fdb4:	ldr	x2, [sp, #24]
    fdb8:	ldr	x1, [sp, #32]
    fdbc:	ldr	x0, [sp, #40]
    fdc0:	bl	4fa0 <mpc_mul_naive@plt>
    fdc4:	b	fe34 <mpc_mul@@Base+0x2d0>
    fdc8:	ldr	x0, [sp, #40]
    fdcc:	ldr	x1, [x0, #32]
    fdd0:	ldr	x0, [sp, #40]
    fdd4:	ldr	x0, [x0]
    fdd8:	cmp	x1, x0
    fddc:	csel	x2, x1, x0, ge  // ge = tcont
    fde0:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    fde4:	ldr	x0, [x0, #4056]
    fde8:	ldr	w0, [x0]
    fdec:	sxtw	x1, w0
    fdf0:	mov	x0, x1
    fdf4:	lsl	x0, x0, #1
    fdf8:	add	x0, x0, x1
    fdfc:	lsl	x0, x0, #3
    fe00:	sub	x0, x0, x1
    fe04:	cmp	x2, x0
    fe08:	b.gt	fe18 <mpc_mul@@Base+0x2b4>
    fe0c:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    fe10:	ldr	x4, [x0, #4032]
    fe14:	b	fe20 <mpc_mul@@Base+0x2bc>
    fe18:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
    fe1c:	ldr	x4, [x0, #4016]
    fe20:	ldr	w3, [sp, #20]
    fe24:	ldr	x2, [sp, #24]
    fe28:	ldr	x1, [sp, #32]
    fe2c:	ldr	x0, [sp, #40]
    fe30:	blr	x4
    fe34:	ldp	x29, x30, [sp], #48
    fe38:	ret

000000000000fe3c <mpc_mul_fr@@Base>:
    fe3c:	stp	x29, x30, [sp, #-96]!
    fe40:	mov	x29, sp
    fe44:	str	x0, [sp, #40]
    fe48:	str	x1, [sp, #32]
    fe4c:	str	x2, [sp, #24]
    fe50:	str	w3, [sp, #20]
    fe54:	ldr	x0, [sp, #40]
    fe58:	ldr	x1, [sp, #24]
    fe5c:	cmp	x1, x0
    fe60:	b.ne	fe78 <mpc_mul_fr@@Base+0x3c>  // b.any
    fe64:	ldr	x0, [sp, #40]
    fe68:	ldr	x1, [x0]
    fe6c:	add	x0, sp, #0x38
    fe70:	bl	5530 <mpfr_init2@plt>
    fe74:	b	fe94 <mpc_mul_fr@@Base+0x58>
    fe78:	ldr	x0, [sp, #40]
    fe7c:	add	x2, sp, #0x38
    fe80:	mov	x3, x0
    fe84:	ldp	x0, x1, [x3]
    fe88:	stp	x0, x1, [x2]
    fe8c:	ldp	x0, x1, [x3, #16]
    fe90:	stp	x0, x1, [x2, #16]
    fe94:	ldr	x1, [sp, #32]
    fe98:	ldr	w0, [sp, #20]
    fe9c:	and	w2, w0, #0xf
    fea0:	add	x0, sp, #0x38
    fea4:	mov	w3, w2
    fea8:	ldr	x2, [sp, #24]
    feac:	bl	4c40 <mpfr_mul@plt>
    feb0:	str	w0, [sp, #92]
    feb4:	ldr	x0, [sp, #40]
    feb8:	add	x4, x0, #0x20
    febc:	ldr	x0, [sp, #32]
    fec0:	add	x1, x0, #0x20
    fec4:	ldr	w0, [sp, #20]
    fec8:	asr	w0, w0, #4
    fecc:	mov	w3, w0
    fed0:	ldr	x2, [sp, #24]
    fed4:	mov	x0, x4
    fed8:	bl	4c40 <mpfr_mul@plt>
    fedc:	str	w0, [sp, #88]
    fee0:	ldr	x0, [sp, #40]
    fee4:	ldr	w2, [sp, #64]
    fee8:	add	x1, sp, #0x38
    feec:	mov	w3, w2
    fef0:	mov	w2, #0x0                   	// #0
    fef4:	bl	52d0 <mpfr_set4@plt>
    fef8:	ldr	x0, [sp, #40]
    fefc:	ldr	x1, [sp, #24]
    ff00:	cmp	x1, x0
    ff04:	b.ne	ff10 <mpc_mul_fr@@Base+0xd4>  // b.any
    ff08:	add	x0, sp, #0x38
    ff0c:	bl	4e30 <mpfr_clear@plt>
    ff10:	ldr	w0, [sp, #92]
    ff14:	cmp	w0, #0x0
    ff18:	b.lt	ff34 <mpc_mul_fr@@Base+0xf8>  // b.tstop
    ff1c:	ldr	w0, [sp, #92]
    ff20:	cmp	w0, #0x0
    ff24:	cset	w0, ne  // ne = any
    ff28:	and	w0, w0, #0xff
    ff2c:	mov	w1, w0
    ff30:	b	ff38 <mpc_mul_fr@@Base+0xfc>
    ff34:	mov	w1, #0x2                   	// #2
    ff38:	ldr	w0, [sp, #88]
    ff3c:	cmp	w0, #0x0
    ff40:	b.lt	ff60 <mpc_mul_fr@@Base+0x124>  // b.tstop
    ff44:	ldr	w0, [sp, #88]
    ff48:	cmp	w0, #0x0
    ff4c:	b.eq	ff58 <mpc_mul_fr@@Base+0x11c>  // b.none
    ff50:	mov	w0, #0x4                   	// #4
    ff54:	b	ff64 <mpc_mul_fr@@Base+0x128>
    ff58:	mov	w0, #0x0                   	// #0
    ff5c:	b	ff64 <mpc_mul_fr@@Base+0x128>
    ff60:	mov	w0, #0x8                   	// #8
    ff64:	orr	w0, w1, w0
    ff68:	ldp	x29, x30, [sp], #96
    ff6c:	ret

000000000000ff70 <mpc_mul_i@@Base>:
    ff70:	stp	x29, x30, [sp, #-96]!
    ff74:	mov	x29, sp
    ff78:	str	x0, [sp, #40]
    ff7c:	str	x1, [sp, #32]
    ff80:	str	w2, [sp, #28]
    ff84:	str	w3, [sp, #24]
    ff88:	ldr	x0, [sp, #32]
    ff8c:	ldr	x1, [x0]
    ff90:	ldr	x0, [sp, #40]
    ff94:	ldr	x0, [x0, #32]
    ff98:	cmp	x1, x0
    ff9c:	b.ne	10078 <mpc_mul_i@@Base+0x108>  // b.any
    ffa0:	ldr	x0, [sp, #32]
    ffa4:	ldr	x1, [x0, #32]
    ffa8:	ldr	x0, [sp, #40]
    ffac:	ldr	x0, [x0]
    ffb0:	cmp	x1, x0
    ffb4:	b.ne	10078 <mpc_mul_i@@Base+0x108>  // b.any
    ffb8:	ldr	x1, [sp, #40]
    ffbc:	ldr	x0, [sp, #32]
    ffc0:	cmp	x1, x0
    ffc4:	b.ne	ffe4 <mpc_mul_i@@Base+0x74>  // b.any
    ffc8:	ldr	x2, [sp, #40]
    ffcc:	ldr	x0, [sp, #40]
    ffd0:	add	x0, x0, #0x20
    ffd4:	mov	x1, x0
    ffd8:	mov	x0, x2
    ffdc:	bl	5190 <mpfr_swap@plt>
    ffe0:	b	1002c <mpc_mul_i@@Base+0xbc>
    ffe4:	ldr	x4, [sp, #40]
    ffe8:	ldr	x0, [sp, #32]
    ffec:	add	x1, x0, #0x20
    fff0:	ldr	x0, [sp, #32]
    fff4:	ldr	w0, [x0, #40]
    fff8:	mov	w3, w0
    fffc:	mov	w2, #0x0                   	// #0
   10000:	mov	x0, x4
   10004:	bl	52d0 <mpfr_set4@plt>
   10008:	ldr	x0, [sp, #40]
   1000c:	add	x4, x0, #0x20
   10010:	ldr	x1, [sp, #32]
   10014:	ldr	x0, [sp, #32]
   10018:	ldr	w0, [x0, #8]
   1001c:	mov	w3, w0
   10020:	mov	w2, #0x0                   	// #0
   10024:	mov	x0, x4
   10028:	bl	52d0 <mpfr_set4@plt>
   1002c:	ldr	w0, [sp, #28]
   10030:	cmp	w0, #0x0
   10034:	b.lt	1004c <mpc_mul_i@@Base+0xdc>  // b.tstop
   10038:	ldr	x0, [sp, #40]
   1003c:	ldr	x1, [sp, #40]
   10040:	mov	w2, #0x0                   	// #0
   10044:	bl	4c50 <mpfr_neg@plt>
   10048:	b	1006c <mpc_mul_i@@Base+0xfc>
   1004c:	ldr	x0, [sp, #40]
   10050:	add	x3, x0, #0x20
   10054:	ldr	x0, [sp, #40]
   10058:	add	x0, x0, #0x20
   1005c:	mov	w2, #0x0                   	// #0
   10060:	mov	x1, x0
   10064:	mov	x0, x3
   10068:	bl	4c50 <mpfr_neg@plt>
   1006c:	str	wzr, [sp, #92]
   10070:	str	wzr, [sp, #88]
   10074:	b	10210 <mpc_mul_i@@Base+0x2a0>
   10078:	ldr	x1, [sp, #40]
   1007c:	ldr	x0, [sp, #32]
   10080:	cmp	x1, x0
   10084:	b.ne	10160 <mpc_mul_i@@Base+0x1f0>  // b.any
   10088:	ldr	x0, [sp, #40]
   1008c:	ldr	x1, [x0]
   10090:	add	x0, sp, #0x38
   10094:	bl	5530 <mpfr_init2@plt>
   10098:	ldr	w0, [sp, #28]
   1009c:	cmp	w0, #0x0
   100a0:	b.lt	100f0 <mpc_mul_i@@Base+0x180>  // b.tstop
   100a4:	ldr	x0, [sp, #32]
   100a8:	add	x1, x0, #0x20
   100ac:	ldr	w0, [sp, #24]
   100b0:	and	w2, w0, #0xf
   100b4:	add	x0, sp, #0x38
   100b8:	bl	4c50 <mpfr_neg@plt>
   100bc:	str	w0, [sp, #92]
   100c0:	ldr	x0, [sp, #40]
   100c4:	add	x4, x0, #0x20
   100c8:	ldr	x1, [sp, #32]
   100cc:	ldr	w0, [sp, #24]
   100d0:	asr	w2, w0, #4
   100d4:	ldr	x0, [sp, #32]
   100d8:	ldr	w0, [x0, #8]
   100dc:	mov	w3, w0
   100e0:	mov	x0, x4
   100e4:	bl	52d0 <mpfr_set4@plt>
   100e8:	str	w0, [sp, #88]
   100ec:	b	10138 <mpc_mul_i@@Base+0x1c8>
   100f0:	ldr	x0, [sp, #32]
   100f4:	add	x1, x0, #0x20
   100f8:	ldr	w0, [sp, #24]
   100fc:	and	w2, w0, #0xf
   10100:	ldr	x0, [sp, #32]
   10104:	ldr	w3, [x0, #40]
   10108:	add	x0, sp, #0x38
   1010c:	bl	52d0 <mpfr_set4@plt>
   10110:	str	w0, [sp, #92]
   10114:	ldr	x0, [sp, #40]
   10118:	add	x3, x0, #0x20
   1011c:	ldr	x1, [sp, #32]
   10120:	ldr	w0, [sp, #24]
   10124:	asr	w0, w0, #4
   10128:	mov	w2, w0
   1012c:	mov	x0, x3
   10130:	bl	4c50 <mpfr_neg@plt>
   10134:	str	w0, [sp, #88]
   10138:	ldr	x0, [sp, #40]
   1013c:	bl	4e30 <mpfr_clear@plt>
   10140:	ldr	x0, [sp, #40]
   10144:	mov	x3, x0
   10148:	add	x2, sp, #0x38
   1014c:	ldp	x0, x1, [x2]
   10150:	stp	x0, x1, [x3]
   10154:	ldp	x0, x1, [x2, #16]
   10158:	stp	x0, x1, [x3, #16]
   1015c:	b	10210 <mpc_mul_i@@Base+0x2a0>
   10160:	ldr	w0, [sp, #28]
   10164:	cmp	w0, #0x0
   10168:	b.lt	101c0 <mpc_mul_i@@Base+0x250>  // b.tstop
   1016c:	ldr	x3, [sp, #40]
   10170:	ldr	x0, [sp, #32]
   10174:	add	x1, x0, #0x20
   10178:	ldr	w0, [sp, #24]
   1017c:	and	w0, w0, #0xf
   10180:	mov	w2, w0
   10184:	mov	x0, x3
   10188:	bl	4c50 <mpfr_neg@plt>
   1018c:	str	w0, [sp, #92]
   10190:	ldr	x0, [sp, #40]
   10194:	add	x4, x0, #0x20
   10198:	ldr	x1, [sp, #32]
   1019c:	ldr	w0, [sp, #24]
   101a0:	asr	w2, w0, #4
   101a4:	ldr	x0, [sp, #32]
   101a8:	ldr	w0, [x0, #8]
   101ac:	mov	w3, w0
   101b0:	mov	x0, x4
   101b4:	bl	52d0 <mpfr_set4@plt>
   101b8:	str	w0, [sp, #88]
   101bc:	b	10210 <mpc_mul_i@@Base+0x2a0>
   101c0:	ldr	x4, [sp, #40]
   101c4:	ldr	x0, [sp, #32]
   101c8:	add	x1, x0, #0x20
   101cc:	ldr	w0, [sp, #24]
   101d0:	and	w2, w0, #0xf
   101d4:	ldr	x0, [sp, #32]
   101d8:	ldr	w0, [x0, #40]
   101dc:	mov	w3, w0
   101e0:	mov	x0, x4
   101e4:	bl	52d0 <mpfr_set4@plt>
   101e8:	str	w0, [sp, #92]
   101ec:	ldr	x0, [sp, #40]
   101f0:	add	x3, x0, #0x20
   101f4:	ldr	x1, [sp, #32]
   101f8:	ldr	w0, [sp, #24]
   101fc:	asr	w0, w0, #4
   10200:	mov	w2, w0
   10204:	mov	x0, x3
   10208:	bl	4c50 <mpfr_neg@plt>
   1020c:	str	w0, [sp, #88]
   10210:	ldr	w0, [sp, #92]
   10214:	cmp	w0, #0x0
   10218:	b.lt	10234 <mpc_mul_i@@Base+0x2c4>  // b.tstop
   1021c:	ldr	w0, [sp, #92]
   10220:	cmp	w0, #0x0
   10224:	cset	w0, ne  // ne = any
   10228:	and	w0, w0, #0xff
   1022c:	mov	w1, w0
   10230:	b	10238 <mpc_mul_i@@Base+0x2c8>
   10234:	mov	w1, #0x2                   	// #2
   10238:	ldr	w0, [sp, #88]
   1023c:	cmp	w0, #0x0
   10240:	b.lt	10260 <mpc_mul_i@@Base+0x2f0>  // b.tstop
   10244:	ldr	w0, [sp, #88]
   10248:	cmp	w0, #0x0
   1024c:	b.eq	10258 <mpc_mul_i@@Base+0x2e8>  // b.none
   10250:	mov	w0, #0x4                   	// #4
   10254:	b	10264 <mpc_mul_i@@Base+0x2f4>
   10258:	mov	w0, #0x0                   	// #0
   1025c:	b	10264 <mpc_mul_i@@Base+0x2f4>
   10260:	mov	w0, #0x8                   	// #8
   10264:	orr	w0, w1, w0
   10268:	ldp	x29, x30, [sp], #96
   1026c:	ret

0000000000010270 <mpc_mul_si@@Base>:
   10270:	stp	x29, x30, [sp, #-64]!
   10274:	mov	x29, sp
   10278:	str	x0, [sp, #40]
   1027c:	str	x1, [sp, #32]
   10280:	str	x2, [sp, #24]
   10284:	str	w3, [sp, #20]
   10288:	ldr	x4, [sp, #40]
   1028c:	ldr	x1, [sp, #32]
   10290:	ldr	w0, [sp, #20]
   10294:	and	w0, w0, #0xf
   10298:	mov	w3, w0
   1029c:	ldr	x2, [sp, #24]
   102a0:	mov	x0, x4
   102a4:	bl	5460 <mpfr_mul_si@plt>
   102a8:	str	w0, [sp, #60]
   102ac:	ldr	x0, [sp, #40]
   102b0:	add	x4, x0, #0x20
   102b4:	ldr	x0, [sp, #32]
   102b8:	add	x1, x0, #0x20
   102bc:	ldr	w0, [sp, #20]
   102c0:	asr	w0, w0, #4
   102c4:	mov	w3, w0
   102c8:	ldr	x2, [sp, #24]
   102cc:	mov	x0, x4
   102d0:	bl	5460 <mpfr_mul_si@plt>
   102d4:	str	w0, [sp, #56]
   102d8:	ldr	w0, [sp, #60]
   102dc:	cmp	w0, #0x0
   102e0:	b.lt	102fc <mpc_mul_si@@Base+0x8c>  // b.tstop
   102e4:	ldr	w0, [sp, #60]
   102e8:	cmp	w0, #0x0
   102ec:	cset	w0, ne  // ne = any
   102f0:	and	w0, w0, #0xff
   102f4:	mov	w1, w0
   102f8:	b	10300 <mpc_mul_si@@Base+0x90>
   102fc:	mov	w1, #0x2                   	// #2
   10300:	ldr	w0, [sp, #56]
   10304:	cmp	w0, #0x0
   10308:	b.lt	10328 <mpc_mul_si@@Base+0xb8>  // b.tstop
   1030c:	ldr	w0, [sp, #56]
   10310:	cmp	w0, #0x0
   10314:	b.eq	10320 <mpc_mul_si@@Base+0xb0>  // b.none
   10318:	mov	w0, #0x4                   	// #4
   1031c:	b	1032c <mpc_mul_si@@Base+0xbc>
   10320:	mov	w0, #0x0                   	// #0
   10324:	b	1032c <mpc_mul_si@@Base+0xbc>
   10328:	mov	w0, #0x8                   	// #8
   1032c:	orr	w0, w1, w0
   10330:	ldp	x29, x30, [sp], #64
   10334:	ret

0000000000010338 <mpc_mul_ui@@Base>:
   10338:	stp	x29, x30, [sp, #-64]!
   1033c:	mov	x29, sp
   10340:	str	x0, [sp, #40]
   10344:	str	x1, [sp, #32]
   10348:	str	x2, [sp, #24]
   1034c:	str	w3, [sp, #20]
   10350:	ldr	x4, [sp, #40]
   10354:	ldr	x1, [sp, #32]
   10358:	ldr	w0, [sp, #20]
   1035c:	and	w0, w0, #0xf
   10360:	mov	w3, w0
   10364:	ldr	x2, [sp, #24]
   10368:	mov	x0, x4
   1036c:	bl	4a90 <mpfr_mul_ui@plt>
   10370:	str	w0, [sp, #60]
   10374:	ldr	x0, [sp, #40]
   10378:	add	x4, x0, #0x20
   1037c:	ldr	x0, [sp, #32]
   10380:	add	x1, x0, #0x20
   10384:	ldr	w0, [sp, #20]
   10388:	asr	w0, w0, #4
   1038c:	mov	w3, w0
   10390:	ldr	x2, [sp, #24]
   10394:	mov	x0, x4
   10398:	bl	4a90 <mpfr_mul_ui@plt>
   1039c:	str	w0, [sp, #56]
   103a0:	ldr	w0, [sp, #60]
   103a4:	cmp	w0, #0x0
   103a8:	b.lt	103c4 <mpc_mul_ui@@Base+0x8c>  // b.tstop
   103ac:	ldr	w0, [sp, #60]
   103b0:	cmp	w0, #0x0
   103b4:	cset	w0, ne  // ne = any
   103b8:	and	w0, w0, #0xff
   103bc:	mov	w1, w0
   103c0:	b	103c8 <mpc_mul_ui@@Base+0x90>
   103c4:	mov	w1, #0x2                   	// #2
   103c8:	ldr	w0, [sp, #56]
   103cc:	cmp	w0, #0x0
   103d0:	b.lt	103f0 <mpc_mul_ui@@Base+0xb8>  // b.tstop
   103d4:	ldr	w0, [sp, #56]
   103d8:	cmp	w0, #0x0
   103dc:	b.eq	103e8 <mpc_mul_ui@@Base+0xb0>  // b.none
   103e0:	mov	w0, #0x4                   	// #4
   103e4:	b	103f4 <mpc_mul_ui@@Base+0xbc>
   103e8:	mov	w0, #0x0                   	// #0
   103ec:	b	103f4 <mpc_mul_ui@@Base+0xbc>
   103f0:	mov	w0, #0x8                   	// #8
   103f4:	orr	w0, w1, w0
   103f8:	ldp	x29, x30, [sp], #64
   103fc:	ret

0000000000010400 <mpc_neg@@Base>:
   10400:	stp	x29, x30, [sp, #-64]!
   10404:	mov	x29, sp
   10408:	str	x0, [sp, #40]
   1040c:	str	x1, [sp, #32]
   10410:	str	w2, [sp, #28]
   10414:	ldr	x3, [sp, #40]
   10418:	ldr	x1, [sp, #32]
   1041c:	ldr	w0, [sp, #28]
   10420:	and	w0, w0, #0xf
   10424:	mov	w2, w0
   10428:	mov	x0, x3
   1042c:	bl	4c50 <mpfr_neg@plt>
   10430:	str	w0, [sp, #60]
   10434:	ldr	x0, [sp, #40]
   10438:	add	x3, x0, #0x20
   1043c:	ldr	x0, [sp, #32]
   10440:	add	x1, x0, #0x20
   10444:	ldr	w0, [sp, #28]
   10448:	asr	w0, w0, #4
   1044c:	mov	w2, w0
   10450:	mov	x0, x3
   10454:	bl	4c50 <mpfr_neg@plt>
   10458:	str	w0, [sp, #56]
   1045c:	ldr	w0, [sp, #60]
   10460:	cmp	w0, #0x0
   10464:	b.lt	10480 <mpc_neg@@Base+0x80>  // b.tstop
   10468:	ldr	w0, [sp, #60]
   1046c:	cmp	w0, #0x0
   10470:	cset	w0, ne  // ne = any
   10474:	and	w0, w0, #0xff
   10478:	mov	w1, w0
   1047c:	b	10484 <mpc_neg@@Base+0x84>
   10480:	mov	w1, #0x2                   	// #2
   10484:	ldr	w0, [sp, #56]
   10488:	cmp	w0, #0x0
   1048c:	b.lt	104ac <mpc_neg@@Base+0xac>  // b.tstop
   10490:	ldr	w0, [sp, #56]
   10494:	cmp	w0, #0x0
   10498:	b.eq	104a4 <mpc_neg@@Base+0xa4>  // b.none
   1049c:	mov	w0, #0x4                   	// #4
   104a0:	b	104b0 <mpc_neg@@Base+0xb0>
   104a4:	mov	w0, #0x0                   	// #0
   104a8:	b	104b0 <mpc_neg@@Base+0xb0>
   104ac:	mov	w0, #0x8                   	// #8
   104b0:	orr	w0, w1, w0
   104b4:	ldp	x29, x30, [sp], #64
   104b8:	ret

00000000000104bc <mpc_norm@@Base>:
   104bc:	stp	x29, x30, [sp, #-240]!
   104c0:	mov	x29, sp
   104c4:	str	x0, [sp, #40]
   104c8:	str	x1, [sp, #32]
   104cc:	str	w2, [sp, #28]
   104d0:	ldr	x0, [sp, #32]
   104d4:	bl	55c0 <mpfr_number_p@plt>
   104d8:	cmp	w0, #0x0
   104dc:	b.eq	104f4 <mpc_norm@@Base+0x38>  // b.none
   104e0:	ldr	x0, [sp, #32]
   104e4:	add	x0, x0, #0x20
   104e8:	bl	55c0 <mpfr_number_p@plt>
   104ec:	cmp	w0, #0x0
   104f0:	b.ne	10508 <mpc_norm@@Base+0x4c>  // b.any
   104f4:	ldr	w2, [sp, #28]
   104f8:	ldr	x1, [sp, #32]
   104fc:	ldr	x0, [sp, #40]
   10500:	bl	52a0 <mpc_abs@plt>
   10504:	b	10a9c <mpc_norm@@Base+0x5e0>
   10508:	ldr	x0, [sp, #32]
   1050c:	ldr	x1, [x0, #16]
   10510:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10514:	cmp	x1, x0
   10518:	b.ne	10574 <mpc_norm@@Base+0xb8>  // b.any
   1051c:	ldr	x0, [sp, #32]
   10520:	ldr	x1, [x0, #48]
   10524:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10528:	cmp	x1, x0
   1052c:	b.ne	10558 <mpc_norm@@Base+0x9c>  // b.any
   10530:	ldr	x0, [sp, #40]
   10534:	str	x0, [sp, #144]
   10538:	ldr	x0, [sp, #144]
   1053c:	mov	w1, #0x1                   	// #1
   10540:	str	w1, [x0, #8]
   10544:	ldr	x0, [sp, #144]
   10548:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   1054c:	str	x1, [x0, #16]
   10550:	mov	w0, #0x0                   	// #0
   10554:	b	10a9c <mpc_norm@@Base+0x5e0>
   10558:	ldr	x0, [sp, #32]
   1055c:	add	x0, x0, #0x20
   10560:	ldr	w2, [sp, #28]
   10564:	mov	x1, x0
   10568:	ldr	x0, [sp, #40]
   1056c:	bl	5110 <mpfr_sqr@plt>
   10570:	b	10a9c <mpc_norm@@Base+0x5e0>
   10574:	ldr	x0, [sp, #32]
   10578:	ldr	x1, [x0, #48]
   1057c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10580:	cmp	x1, x0
   10584:	b.ne	105a0 <mpc_norm@@Base+0xe4>  // b.any
   10588:	ldr	x0, [sp, #32]
   1058c:	ldr	w2, [sp, #28]
   10590:	mov	x1, x0
   10594:	ldr	x0, [sp, #40]
   10598:	bl	5110 <mpfr_sqr@plt>
   1059c:	b	10a9c <mpc_norm@@Base+0x5e0>
   105a0:	mov	w0, #0x2                   	// #2
   105a4:	str	w0, [sp, #200]
   105a8:	ldr	x0, [sp, #40]
   105ac:	ldr	x0, [x0]
   105b0:	str	x0, [sp, #224]
   105b4:	add	x0, sp, #0x30
   105b8:	bl	4b70 <mpfr_init@plt>
   105bc:	add	x0, sp, #0x50
   105c0:	bl	4b70 <mpfr_init@plt>
   105c4:	add	x0, sp, #0x70
   105c8:	bl	4b70 <mpfr_init@plt>
   105cc:	bl	53f0 <mpfr_underflow_p@plt>
   105d0:	str	w0, [sp, #196]
   105d4:	bl	55d0 <mpfr_overflow_p@plt>
   105d8:	str	w0, [sp, #192]
   105dc:	str	wzr, [sp, #204]
   105e0:	bl	4f00 <mpfr_clear_underflow@plt>
   105e4:	bl	4b20 <mpfr_clear_overflow@plt>
   105e8:	ldr	w0, [sp, #204]
   105ec:	add	w0, w0, #0x1
   105f0:	str	w0, [sp, #204]
   105f4:	ldr	x0, [sp, #224]
   105f8:	bl	4de0 <mpc_ceil_log2@plt>
   105fc:	add	x0, x0, #0x3
   10600:	ldr	x1, [sp, #224]
   10604:	add	x0, x1, x0
   10608:	str	x0, [sp, #224]
   1060c:	ldr	w1, [sp, #204]
   10610:	ldr	w0, [sp, #200]
   10614:	cmp	w1, w0
   10618:	b.lt	10640 <mpc_norm@@Base+0x184>  // b.tstop
   1061c:	ldr	x0, [sp, #32]
   10620:	ldr	x0, [x0]
   10624:	lsl	x0, x0, #1
   10628:	str	x0, [sp, #216]
   1062c:	ldr	x0, [sp, #32]
   10630:	ldr	x0, [x0, #32]
   10634:	lsl	x0, x0, #1
   10638:	str	x0, [sp, #208]
   1063c:	b	10680 <mpc_norm@@Base+0x1c4>
   10640:	ldr	x0, [sp, #32]
   10644:	ldr	x0, [x0]
   10648:	lsl	x0, x0, #1
   1064c:	ldr	x2, [sp, #224]
   10650:	ldr	x1, [sp, #224]
   10654:	cmp	x2, x0
   10658:	csel	x0, x1, x0, le
   1065c:	str	x0, [sp, #216]
   10660:	ldr	x0, [sp, #32]
   10664:	ldr	x0, [x0, #32]
   10668:	lsl	x0, x0, #1
   1066c:	ldr	x2, [sp, #224]
   10670:	ldr	x1, [sp, #224]
   10674:	cmp	x2, x0
   10678:	csel	x0, x1, x0, le
   1067c:	str	x0, [sp, #208]
   10680:	add	x0, sp, #0x30
   10684:	ldr	x1, [sp, #216]
   10688:	bl	4d40 <mpfr_set_prec@plt>
   1068c:	add	x0, sp, #0x50
   10690:	ldr	x1, [sp, #208]
   10694:	bl	4d40 <mpfr_set_prec@plt>
   10698:	ldr	x1, [sp, #32]
   1069c:	add	x0, sp, #0x30
   106a0:	mov	w2, #0x3                   	// #3
   106a4:	bl	5110 <mpfr_sqr@plt>
   106a8:	str	w0, [sp, #236]
   106ac:	ldr	x0, [sp, #32]
   106b0:	add	x1, x0, #0x20
   106b4:	add	x0, sp, #0x50
   106b8:	mov	w2, #0x3                   	// #3
   106bc:	bl	5110 <mpfr_sqr@plt>
   106c0:	mov	w1, w0
   106c4:	ldr	w0, [sp, #236]
   106c8:	orr	w0, w0, w1
   106cc:	str	w0, [sp, #236]
   106d0:	ldr	w0, [sp, #236]
   106d4:	cmp	w0, #0x0
   106d8:	b.eq	106fc <mpc_norm@@Base+0x240>  // b.none
   106dc:	add	x0, sp, #0x70
   106e0:	ldr	x1, [sp, #224]
   106e4:	bl	4d40 <mpfr_set_prec@plt>
   106e8:	add	x2, sp, #0x50
   106ec:	add	x1, sp, #0x30
   106f0:	add	x0, sp, #0x70
   106f4:	mov	w3, #0x3                   	// #3
   106f8:	bl	4f50 <mpfr_add@plt>
   106fc:	ldr	w1, [sp, #204]
   10700:	ldr	w0, [sp, #200]
   10704:	cmp	w1, w0
   10708:	b.ge	10760 <mpc_norm@@Base+0x2a4>  // b.tcont
   1070c:	ldr	w0, [sp, #236]
   10710:	cmp	w0, #0x0
   10714:	b.eq	10760 <mpc_norm@@Base+0x2a4>  // b.none
   10718:	ldr	x0, [sp, #224]
   1071c:	sub	x5, x0, #0x2
   10720:	ldr	x0, [sp, #40]
   10724:	ldr	x1, [x0]
   10728:	ldr	w0, [sp, #28]
   1072c:	cmp	w0, #0x0
   10730:	cset	w0, eq  // eq = none
   10734:	and	w0, w0, #0xff
   10738:	and	x0, x0, #0xff
   1073c:	add	x1, x1, x0
   10740:	add	x0, sp, #0x70
   10744:	mov	x4, x1
   10748:	mov	w3, #0x2                   	// #2
   1074c:	mov	w2, #0x3                   	// #3
   10750:	mov	x1, x5
   10754:	bl	5540 <mpfr_can_round@plt>
   10758:	cmp	w0, #0x0
   1075c:	b.eq	105e8 <mpc_norm@@Base+0x12c>  // b.none
   10760:	ldr	w0, [sp, #236]
   10764:	cmp	w0, #0x0
   10768:	b.ne	10790 <mpc_norm@@Base+0x2d4>  // b.any
   1076c:	add	x1, sp, #0x50
   10770:	add	x0, sp, #0x30
   10774:	ldr	w3, [sp, #28]
   10778:	mov	x2, x1
   1077c:	mov	x1, x0
   10780:	ldr	x0, [sp, #40]
   10784:	bl	4f50 <mpfr_add@plt>
   10788:	str	w0, [sp, #236]
   1078c:	b	10a60 <mpc_norm@@Base+0x5a4>
   10790:	bl	55d0 <mpfr_overflow_p@plt>
   10794:	cmp	w0, #0x0
   10798:	b.eq	107d0 <mpc_norm@@Base+0x314>  // b.none
   1079c:	mov	w3, #0x0                   	// #0
   107a0:	mov	x2, #0x0                   	// #0
   107a4:	mov	x1, #0x1                   	// #1
   107a8:	ldr	x0, [sp, #40]
   107ac:	bl	5230 <mpfr_set_ui_2exp@plt>
   107b0:	bl	5300 <mpfr_get_emax@plt>
   107b4:	ldr	w3, [sp, #28]
   107b8:	mov	x2, x0
   107bc:	ldr	x1, [sp, #40]
   107c0:	ldr	x0, [sp, #40]
   107c4:	bl	5040 <mpfr_mul_2ui@plt>
   107c8:	str	w0, [sp, #236]
   107cc:	b	10a60 <mpc_norm@@Base+0x5a4>
   107d0:	bl	53f0 <mpfr_underflow_p@plt>
   107d4:	cmp	w0, #0x0
   107d8:	b.eq	10a40 <mpc_norm@@Base+0x584>  // b.none
   107dc:	bl	5160 <mpfr_get_emin@plt>
   107e0:	str	x0, [sp, #184]
   107e4:	ldr	x1, [sp, #64]
   107e8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   107ec:	cmp	x1, x0
   107f0:	b.eq	10868 <mpc_norm@@Base+0x3ac>  // b.none
   107f4:	ldr	x1, [sp, #64]
   107f8:	ldr	x0, [sp, #216]
   107fc:	lsl	x0, x0, #1
   10800:	sub	x0, x1, x0
   10804:	ldr	x1, [sp, #184]
   10808:	cmp	x1, x0
   1080c:	b.ge	10868 <mpc_norm@@Base+0x3ac>  // b.tcont
   10810:	ldr	x0, [sp, #64]
   10814:	cmn	x0, #0x9
   10818:	b.lt	10868 <mpc_norm@@Base+0x3ac>  // b.tstop
   1081c:	add	x0, sp, #0x50
   10820:	mov	x1, #0x1                   	// #1
   10824:	bl	4d40 <mpfr_set_prec@plt>
   10828:	ldr	x0, [sp, #184]
   1082c:	sub	x1, x0, #0x1
   10830:	add	x0, sp, #0x50
   10834:	mov	w3, #0x1                   	// #1
   10838:	mov	x2, x1
   1083c:	mov	x1, #0x1                   	// #1
   10840:	bl	5230 <mpfr_set_ui_2exp@plt>
   10844:	add	x1, sp, #0x50
   10848:	add	x0, sp, #0x30
   1084c:	ldr	w3, [sp, #28]
   10850:	mov	x2, x1
   10854:	mov	x1, x0
   10858:	ldr	x0, [sp, #40]
   1085c:	bl	4f50 <mpfr_add@plt>
   10860:	str	w0, [sp, #236]
   10864:	b	10a60 <mpc_norm@@Base+0x5a4>
   10868:	ldr	x1, [sp, #96]
   1086c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10870:	cmp	x1, x0
   10874:	b.eq	108ec <mpc_norm@@Base+0x430>  // b.none
   10878:	ldr	x1, [sp, #96]
   1087c:	ldr	x0, [sp, #208]
   10880:	lsl	x0, x0, #1
   10884:	sub	x0, x1, x0
   10888:	ldr	x1, [sp, #184]
   1088c:	cmp	x1, x0
   10890:	b.ge	108ec <mpc_norm@@Base+0x430>  // b.tcont
   10894:	ldr	x0, [sp, #96]
   10898:	cmn	x0, #0x9
   1089c:	b.lt	108ec <mpc_norm@@Base+0x430>  // b.tstop
   108a0:	add	x0, sp, #0x30
   108a4:	mov	x1, #0x1                   	// #1
   108a8:	bl	4d40 <mpfr_set_prec@plt>
   108ac:	ldr	x0, [sp, #184]
   108b0:	sub	x1, x0, #0x1
   108b4:	add	x0, sp, #0x30
   108b8:	mov	w3, #0x1                   	// #1
   108bc:	mov	x2, x1
   108c0:	mov	x1, #0x1                   	// #1
   108c4:	bl	5230 <mpfr_set_ui_2exp@plt>
   108c8:	add	x1, sp, #0x50
   108cc:	add	x0, sp, #0x30
   108d0:	ldr	w3, [sp, #28]
   108d4:	mov	x2, x1
   108d8:	mov	x1, x0
   108dc:	ldr	x0, [sp, #40]
   108e0:	bl	4f50 <mpfr_add@plt>
   108e4:	str	w0, [sp, #236]
   108e8:	b	10a60 <mpc_norm@@Base+0x5a4>
   108ec:	ldr	x0, [sp, #32]
   108f0:	ldr	x0, [x0, #16]
   108f4:	neg	x0, x0
   108f8:	str	x0, [sp, #176]
   108fc:	ldr	x0, [sp, #32]
   10900:	ldr	x0, [x0, #48]
   10904:	neg	x0, x0
   10908:	str	x0, [sp, #168]
   1090c:	ldr	x0, [sp, #176]
   10910:	lsr	x1, x0, #1
   10914:	ldr	x0, [sp, #168]
   10918:	lsr	x0, x0, #1
   1091c:	add	x1, x1, x0
   10920:	ldr	x0, [sp, #176]
   10924:	and	x2, x0, #0x1
   10928:	ldr	x0, [sp, #168]
   1092c:	and	x0, x0, #0x1
   10930:	add	x0, x2, x0
   10934:	lsr	x0, x0, #1
   10938:	add	x0, x1, x0
   1093c:	str	x0, [sp, #160]
   10940:	ldr	x1, [sp, #64]
   10944:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10948:	cmp	x1, x0
   1094c:	b.ne	10978 <mpc_norm@@Base+0x4bc>  // b.any
   10950:	ldr	x1, [sp, #32]
   10954:	add	x0, sp, #0x30
   10958:	mov	w3, #0x0                   	// #0
   1095c:	ldr	x2, [sp, #160]
   10960:	bl	5040 <mpfr_mul_2ui@plt>
   10964:	add	x1, sp, #0x30
   10968:	add	x0, sp, #0x30
   1096c:	mov	w2, #0x0                   	// #0
   10970:	bl	5110 <mpfr_sqr@plt>
   10974:	b	10990 <mpc_norm@@Base+0x4d4>
   10978:	ldr	x0, [sp, #160]
   1097c:	lsl	x2, x0, #1
   10980:	add	x1, sp, #0x30
   10984:	add	x0, sp, #0x30
   10988:	mov	w3, #0x0                   	// #0
   1098c:	bl	5040 <mpfr_mul_2ui@plt>
   10990:	ldr	x1, [sp, #96]
   10994:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10998:	cmp	x1, x0
   1099c:	b.ne	109cc <mpc_norm@@Base+0x510>  // b.any
   109a0:	ldr	x0, [sp, #32]
   109a4:	add	x1, x0, #0x20
   109a8:	add	x0, sp, #0x50
   109ac:	mov	w3, #0x0                   	// #0
   109b0:	ldr	x2, [sp, #160]
   109b4:	bl	5040 <mpfr_mul_2ui@plt>
   109b8:	add	x1, sp, #0x50
   109bc:	add	x0, sp, #0x50
   109c0:	mov	w2, #0x0                   	// #0
   109c4:	bl	5110 <mpfr_sqr@plt>
   109c8:	b	109e4 <mpc_norm@@Base+0x528>
   109cc:	ldr	x0, [sp, #160]
   109d0:	lsl	x2, x0, #1
   109d4:	add	x1, sp, #0x50
   109d8:	add	x0, sp, #0x50
   109dc:	mov	w3, #0x0                   	// #0
   109e0:	bl	5040 <mpfr_mul_2ui@plt>
   109e4:	add	x1, sp, #0x50
   109e8:	add	x0, sp, #0x30
   109ec:	ldr	w3, [sp, #28]
   109f0:	mov	x2, x1
   109f4:	mov	x1, x0
   109f8:	ldr	x0, [sp, #40]
   109fc:	bl	4f50 <mpfr_add@plt>
   10a00:	str	w0, [sp, #236]
   10a04:	bl	4f00 <mpfr_clear_underflow@plt>
   10a08:	ldr	x0, [sp, #160]
   10a0c:	lsl	x0, x0, #1
   10a10:	ldr	w3, [sp, #28]
   10a14:	mov	x2, x0
   10a18:	ldr	x1, [sp, #40]
   10a1c:	ldr	x0, [sp, #40]
   10a20:	bl	5420 <mpfr_div_2ui@plt>
   10a24:	str	w0, [sp, #156]
   10a28:	bl	53f0 <mpfr_underflow_p@plt>
   10a2c:	cmp	w0, #0x0
   10a30:	b.eq	10a60 <mpc_norm@@Base+0x5a4>  // b.none
   10a34:	ldr	w0, [sp, #156]
   10a38:	str	w0, [sp, #236]
   10a3c:	b	10a60 <mpc_norm@@Base+0x5a4>
   10a40:	ldr	w1, [sp, #120]
   10a44:	add	x0, sp, #0x70
   10a48:	mov	w3, w1
   10a4c:	ldr	w2, [sp, #28]
   10a50:	mov	x1, x0
   10a54:	ldr	x0, [sp, #40]
   10a58:	bl	52d0 <mpfr_set4@plt>
   10a5c:	str	w0, [sp, #236]
   10a60:	ldr	w0, [sp, #196]
   10a64:	cmp	w0, #0x0
   10a68:	b.eq	10a70 <mpc_norm@@Base+0x5b4>  // b.none
   10a6c:	bl	4a60 <mpfr_set_underflow@plt>
   10a70:	ldr	w0, [sp, #192]
   10a74:	cmp	w0, #0x0
   10a78:	b.eq	10a80 <mpc_norm@@Base+0x5c4>  // b.none
   10a7c:	bl	5580 <mpfr_set_overflow@plt>
   10a80:	add	x0, sp, #0x30
   10a84:	bl	4e30 <mpfr_clear@plt>
   10a88:	add	x0, sp, #0x50
   10a8c:	bl	4e30 <mpfr_clear@plt>
   10a90:	add	x0, sp, #0x70
   10a94:	bl	4e30 <mpfr_clear@plt>
   10a98:	ldr	w0, [sp, #236]
   10a9c:	ldp	x29, x30, [sp], #240
   10aa0:	ret

0000000000010aa4 <mpc_out_str@@Base>:
   10aa4:	stp	x29, x30, [sp, #-64]!
   10aa8:	mov	x29, sp
   10aac:	str	x0, [sp, #40]
   10ab0:	str	w1, [sp, #36]
   10ab4:	str	x2, [sp, #24]
   10ab8:	str	x3, [sp, #16]
   10abc:	str	w4, [sp, #32]
   10ac0:	mov	x0, #0x3                   	// #3
   10ac4:	str	x0, [sp, #56]
   10ac8:	ldr	x0, [sp, #40]
   10acc:	cmp	x0, #0x0
   10ad0:	b.ne	10ae4 <mpc_out_str@@Base+0x40>  // b.any
   10ad4:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   10ad8:	ldr	x0, [x0, #4024]
   10adc:	ldr	x0, [x0]
   10ae0:	str	x0, [sp, #40]
   10ae4:	ldr	x1, [sp, #40]
   10ae8:	mov	w0, #0x28                  	// #40
   10aec:	bl	4c70 <fputc@plt>
   10af0:	ldr	x1, [sp, #16]
   10af4:	ldr	w0, [sp, #32]
   10af8:	and	w0, w0, #0xf
   10afc:	mov	w4, w0
   10b00:	mov	x3, x1
   10b04:	ldr	x2, [sp, #24]
   10b08:	ldr	w1, [sp, #36]
   10b0c:	ldr	x0, [sp, #40]
   10b10:	bl	5290 <__gmpfr_out_str@plt>
   10b14:	mov	x1, x0
   10b18:	ldr	x0, [sp, #56]
   10b1c:	add	x0, x0, x1
   10b20:	str	x0, [sp, #56]
   10b24:	ldr	x1, [sp, #40]
   10b28:	mov	w0, #0x20                  	// #32
   10b2c:	bl	4c70 <fputc@plt>
   10b30:	ldr	x0, [sp, #16]
   10b34:	add	x1, x0, #0x20
   10b38:	ldr	w0, [sp, #32]
   10b3c:	and	w0, w0, #0xf
   10b40:	mov	w4, w0
   10b44:	mov	x3, x1
   10b48:	ldr	x2, [sp, #24]
   10b4c:	ldr	w1, [sp, #36]
   10b50:	ldr	x0, [sp, #40]
   10b54:	bl	5290 <__gmpfr_out_str@plt>
   10b58:	mov	x1, x0
   10b5c:	ldr	x0, [sp, #56]
   10b60:	add	x0, x0, x1
   10b64:	str	x0, [sp, #56]
   10b68:	ldr	x1, [sp, #40]
   10b6c:	mov	w0, #0x29                  	// #41
   10b70:	bl	4c70 <fputc@plt>
   10b74:	ldr	x0, [sp, #56]
   10b78:	ldp	x29, x30, [sp], #64
   10b7c:	ret
   10b80:	stp	x29, x30, [sp, #-48]!
   10b84:	mov	x29, sp
   10b88:	str	x0, [sp, #40]
   10b8c:	str	x1, [sp, #32]
   10b90:	str	x2, [sp, #24]
   10b94:	str	x3, [sp, #16]
   10b98:	ldr	x0, [sp, #16]
   10b9c:	ldr	w0, [x0, #4]
   10ba0:	cmp	w0, #0x0
   10ba4:	b.lt	10c38 <mpc_out_str@@Base+0x194>  // b.tstop
   10ba8:	ldr	x0, [sp, #16]
   10bac:	ldr	w0, [x0, #4]
   10bb0:	cmp	w0, #0x0
   10bb4:	b.gt	10c38 <mpc_out_str@@Base+0x194>
   10bb8:	ldr	x0, [sp, #24]
   10bbc:	ldr	w0, [x0, #4]
   10bc0:	cmp	w0, #0x0
   10bc4:	b.lt	10bfc <mpc_out_str@@Base+0x158>  // b.tstop
   10bc8:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   10bcc:	ldr	x0, [x0, #4008]
   10bd0:	ldr	x5, [x0]
   10bd4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10bd8:	add	x4, x0, #0x160
   10bdc:	mov	w3, #0x3c                  	// #60
   10be0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10be4:	add	x2, x0, #0x178
   10be8:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10bec:	add	x1, x0, #0x180
   10bf0:	mov	x0, x5
   10bf4:	bl	56a0 <fprintf@plt>
   10bf8:	bl	5100 <abort@plt>
   10bfc:	ldr	x1, [sp, #24]
   10c00:	ldr	x0, [sp, #32]
   10c04:	bl	4e20 <__gmpz_neg@plt>
   10c08:	ldr	x0, [sp, #32]
   10c0c:	bl	4e40 <__gmpz_perfect_square_p@plt>
   10c10:	cmp	w0, #0x0
   10c14:	b.eq	10d08 <mpc_out_str@@Base+0x264>  // b.none
   10c18:	ldr	x1, [sp, #32]
   10c1c:	ldr	x0, [sp, #32]
   10c20:	bl	4bc0 <__gmpz_sqrt@plt>
   10c24:	mov	x1, #0x0                   	// #0
   10c28:	ldr	x0, [sp, #40]
   10c2c:	bl	4be0 <__gmpz_set_ui@plt>
   10c30:	mov	w0, #0x1                   	// #1
   10c34:	b	10d0c <mpc_out_str@@Base+0x268>
   10c38:	mov	x1, #0x1                   	// #1
   10c3c:	ldr	x0, [sp, #16]
   10c40:	bl	4d10 <__gmpz_divisible_2exp_p@plt>
   10c44:	cmp	w0, #0x0
   10c48:	b.ne	10c54 <mpc_out_str@@Base+0x1b0>  // b.any
   10c4c:	mov	w0, #0x0                   	// #0
   10c50:	b	10d0c <mpc_out_str@@Base+0x268>
   10c54:	ldr	x2, [sp, #24]
   10c58:	ldr	x1, [sp, #24]
   10c5c:	ldr	x0, [sp, #40]
   10c60:	bl	4e00 <__gmpz_mul@plt>
   10c64:	ldr	x2, [sp, #16]
   10c68:	ldr	x1, [sp, #16]
   10c6c:	ldr	x0, [sp, #40]
   10c70:	bl	5010 <__gmpz_addmul@plt>
   10c74:	ldr	x0, [sp, #40]
   10c78:	bl	4e40 <__gmpz_perfect_square_p@plt>
   10c7c:	cmp	w0, #0x0
   10c80:	b.eq	10d08 <mpc_out_str@@Base+0x264>  // b.none
   10c84:	ldr	x1, [sp, #40]
   10c88:	ldr	x0, [sp, #40]
   10c8c:	bl	4bc0 <__gmpz_sqrt@plt>
   10c90:	ldr	x2, [sp, #40]
   10c94:	ldr	x1, [sp, #24]
   10c98:	ldr	x0, [sp, #40]
   10c9c:	bl	54d0 <__gmpz_add@plt>
   10ca0:	mov	x1, #0x1                   	// #1
   10ca4:	ldr	x0, [sp, #40]
   10ca8:	bl	4d10 <__gmpz_divisible_2exp_p@plt>
   10cac:	cmp	w0, #0x0
   10cb0:	b.eq	10d08 <mpc_out_str@@Base+0x264>  // b.none
   10cb4:	mov	x2, #0x1                   	// #1
   10cb8:	ldr	x1, [sp, #40]
   10cbc:	ldr	x0, [sp, #40]
   10cc0:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   10cc4:	ldr	x0, [sp, #40]
   10cc8:	bl	4e40 <__gmpz_perfect_square_p@plt>
   10ccc:	cmp	w0, #0x0
   10cd0:	b.eq	10d08 <mpc_out_str@@Base+0x264>  // b.none
   10cd4:	ldr	x1, [sp, #40]
   10cd8:	ldr	x0, [sp, #40]
   10cdc:	bl	4bc0 <__gmpz_sqrt@plt>
   10ce0:	mov	x2, #0x1                   	// #1
   10ce4:	ldr	x1, [sp, #16]
   10ce8:	ldr	x0, [sp, #32]
   10cec:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   10cf0:	ldr	x2, [sp, #40]
   10cf4:	ldr	x1, [sp, #32]
   10cf8:	ldr	x0, [sp, #32]
   10cfc:	bl	4d80 <__gmpz_divexact@plt>
   10d00:	mov	w0, #0x1                   	// #1
   10d04:	b	10d0c <mpc_out_str@@Base+0x268>
   10d08:	mov	w0, #0x0                   	// #0
   10d0c:	ldp	x29, x30, [sp], #48
   10d10:	ret
   10d14:	stp	x29, x30, [sp, #-112]!
   10d18:	mov	x29, sp
   10d1c:	str	x19, [sp, #16]
   10d20:	str	x0, [sp, #56]
   10d24:	str	w1, [sp, #52]
   10d28:	str	w2, [sp, #48]
   10d2c:	str	x3, [sp, #40]
   10d30:	mov	w0, #0xffffffff            	// #-1
   10d34:	str	w0, [sp, #108]
   10d38:	add	x0, sp, #0x48
   10d3c:	bl	5590 <__gmpz_init@plt>
   10d40:	add	x0, sp, #0x48
   10d44:	ldr	x1, [sp, #40]
   10d48:	bl	5560 <mpfr_get_z_2exp@plt>
   10d4c:	str	x0, [sp, #96]
   10d50:	add	x0, sp, #0x48
   10d54:	mov	x1, #0x0                   	// #0
   10d58:	bl	4ac0 <__gmpz_scan1@plt>
   10d5c:	str	x0, [sp, #88]
   10d60:	ldr	x0, [sp, #88]
   10d64:	ldr	x1, [sp, #96]
   10d68:	add	x0, x1, x0
   10d6c:	str	x0, [sp, #96]
   10d70:	add	x1, sp, #0x48
   10d74:	add	x0, sp, #0x48
   10d78:	ldr	x2, [sp, #88]
   10d7c:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   10d80:	ldr	x0, [sp, #96]
   10d84:	cmp	x0, #0x1
   10d88:	b.le	10d94 <mpc_out_str@@Base+0x2f0>
   10d8c:	str	wzr, [sp, #108]
   10d90:	b	10e04 <mpc_out_str@@Base+0x360>
   10d94:	ldr	x0, [sp, #96]
   10d98:	cmp	x0, #0x1
   10d9c:	b.ne	10db8 <mpc_out_str@@Base+0x314>  // b.any
   10da0:	add	x0, sp, #0x48
   10da4:	mov	x1, #0x0                   	// #0
   10da8:	bl	4df0 <__gmpz_tstbit@plt>
   10dac:	lsl	w0, w0, #1
   10db0:	str	w0, [sp, #108]
   10db4:	b	10e04 <mpc_out_str@@Base+0x360>
   10db8:	ldr	x0, [sp, #96]
   10dbc:	cmp	x0, #0x0
   10dc0:	b.ne	10f64 <mpc_out_str@@Base+0x4c0>  // b.any
   10dc4:	add	x0, sp, #0x48
   10dc8:	mov	x1, #0x1                   	// #1
   10dcc:	bl	4df0 <__gmpz_tstbit@plt>
   10dd0:	lsl	w19, w0, #1
   10dd4:	add	x0, sp, #0x48
   10dd8:	mov	x1, #0x0                   	// #0
   10ddc:	bl	4df0 <__gmpz_tstbit@plt>
   10de0:	add	w0, w19, w0
   10de4:	str	w0, [sp, #108]
   10de8:	ldr	w0, [sp, #76]
   10dec:	cmp	w0, #0x0
   10df0:	b.ge	10e04 <mpc_out_str@@Base+0x360>  // b.tcont
   10df4:	mov	w1, #0x4                   	// #4
   10df8:	ldr	w0, [sp, #108]
   10dfc:	sub	w0, w1, w0
   10e00:	str	w0, [sp, #108]
   10e04:	ldr	x0, [sp, #56]
   10e08:	ldr	x1, [x0, #16]
   10e0c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10e10:	cmp	x1, x0
   10e14:	b.ne	10ea8 <mpc_out_str@@Base+0x404>  // b.any
   10e18:	ldr	w0, [sp, #108]
   10e1c:	cmp	w0, #0x1
   10e20:	b.eq	10e64 <mpc_out_str@@Base+0x3c0>  // b.none
   10e24:	ldr	w0, [sp, #108]
   10e28:	cmp	w0, #0x3
   10e2c:	b.eq	10e64 <mpc_out_str@@Base+0x3c0>  // b.none
   10e30:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   10e34:	ldr	x0, [x0, #4008]
   10e38:	ldr	x5, [x0]
   10e3c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10e40:	add	x4, x0, #0x1a8
   10e44:	mov	w3, #0x89                  	// #137
   10e48:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10e4c:	add	x2, x0, #0x178
   10e50:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10e54:	add	x1, x0, #0x180
   10e58:	mov	x0, x5
   10e5c:	bl	56a0 <fprintf@plt>
   10e60:	bl	5100 <abort@plt>
   10e64:	ldr	w0, [sp, #108]
   10e68:	cmp	w0, #0x3
   10e6c:	b.ne	10e7c <mpc_out_str@@Base+0x3d8>  // b.any
   10e70:	ldr	w0, [sp, #52]
   10e74:	cmp	w0, #0x0
   10e78:	b.eq	10e94 <mpc_out_str@@Base+0x3f0>  // b.none
   10e7c:	ldr	w0, [sp, #108]
   10e80:	cmp	w0, #0x1
   10e84:	b.ne	10f70 <mpc_out_str@@Base+0x4cc>  // b.any
   10e88:	ldr	w0, [sp, #52]
   10e8c:	cmp	w0, #0x1
   10e90:	b.ne	10f70 <mpc_out_str@@Base+0x4cc>  // b.any
   10e94:	ldr	x0, [sp, #56]
   10e98:	ldr	x1, [sp, #56]
   10e9c:	mov	w2, #0x1                   	// #1
   10ea0:	bl	4c50 <mpfr_neg@plt>
   10ea4:	b	10f70 <mpc_out_str@@Base+0x4cc>
   10ea8:	ldr	x0, [sp, #56]
   10eac:	ldr	x1, [x0, #48]
   10eb0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10eb4:	cmp	x1, x0
   10eb8:	b.ne	10f6c <mpc_out_str@@Base+0x4c8>  // b.any
   10ebc:	ldr	w0, [sp, #108]
   10ec0:	cmp	w0, #0x0
   10ec4:	b.eq	10f08 <mpc_out_str@@Base+0x464>  // b.none
   10ec8:	ldr	w0, [sp, #108]
   10ecc:	cmp	w0, #0x2
   10ed0:	b.eq	10f08 <mpc_out_str@@Base+0x464>  // b.none
   10ed4:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   10ed8:	ldr	x0, [x0, #4008]
   10edc:	ldr	x5, [x0]
   10ee0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10ee4:	add	x4, x0, #0x1c8
   10ee8:	mov	w3, #0x93                  	// #147
   10eec:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10ef0:	add	x2, x0, #0x178
   10ef4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   10ef8:	add	x1, x0, #0x180
   10efc:	mov	x0, x5
   10f00:	bl	56a0 <fprintf@plt>
   10f04:	bl	5100 <abort@plt>
   10f08:	ldr	w0, [sp, #108]
   10f0c:	cmp	w0, #0x0
   10f10:	b.ne	10f24 <mpc_out_str@@Base+0x480>  // b.any
   10f14:	ldr	w1, [sp, #48]
   10f18:	ldr	w0, [sp, #52]
   10f1c:	cmp	w1, w0
   10f20:	b.eq	10f40 <mpc_out_str@@Base+0x49c>  // b.none
   10f24:	ldr	w0, [sp, #108]
   10f28:	cmp	w0, #0x2
   10f2c:	b.ne	10f6c <mpc_out_str@@Base+0x4c8>  // b.any
   10f30:	ldr	w1, [sp, #48]
   10f34:	ldr	w0, [sp, #52]
   10f38:	cmp	w1, w0
   10f3c:	b.eq	10f6c <mpc_out_str@@Base+0x4c8>  // b.none
   10f40:	ldr	x0, [sp, #56]
   10f44:	add	x3, x0, #0x20
   10f48:	ldr	x0, [sp, #56]
   10f4c:	add	x0, x0, #0x20
   10f50:	mov	w2, #0x1                   	// #1
   10f54:	mov	x1, x0
   10f58:	mov	x0, x3
   10f5c:	bl	4c50 <mpfr_neg@plt>
   10f60:	b	10f70 <mpc_out_str@@Base+0x4cc>
   10f64:	nop
   10f68:	b	10f70 <mpc_out_str@@Base+0x4cc>
   10f6c:	nop
   10f70:	add	x0, sp, #0x48
   10f74:	bl	5280 <__gmpz_clear@plt>
   10f78:	nop
   10f7c:	ldr	x19, [sp, #16]
   10f80:	ldp	x29, x30, [sp], #112
   10f84:	ret
   10f88:	stp	x29, x30, [sp, #-304]!
   10f8c:	mov	x29, sp
   10f90:	str	x19, [sp, #16]
   10f94:	str	x0, [sp, #72]
   10f98:	str	x1, [sp, #64]
   10f9c:	str	x2, [sp, #56]
   10fa0:	str	w3, [sp, #52]
   10fa4:	str	x4, [sp, #40]
   10fa8:	mov	w0, #0xfffffffe            	// #-2
   10fac:	str	w0, [sp, #268]
   10fb0:	ldr	x0, [sp, #64]
   10fb4:	ldr	w0, [x0, #8]
   10fb8:	lsr	w0, w0, #31
   10fbc:	and	w0, w0, #0xff
   10fc0:	str	w0, [sp, #252]
   10fc4:	ldr	x0, [sp, #64]
   10fc8:	ldr	w0, [x0, #40]
   10fcc:	lsr	w0, w0, #31
   10fd0:	and	w0, w0, #0xff
   10fd4:	str	w0, [sp, #248]
   10fd8:	ldr	x0, [sp, #64]
   10fdc:	ldr	x1, [x0, #16]
   10fe0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   10fe4:	cmp	x1, x0
   10fe8:	cset	w0, eq  // eq = none
   10fec:	and	w0, w0, #0xff
   10ff0:	str	w0, [sp, #244]
   10ff4:	str	wzr, [sp, #264]
   10ff8:	ldr	x0, [sp, #72]
   10ffc:	ldr	x1, [sp, #56]
   11000:	cmp	x1, x0
   11004:	b.eq	1101c <mpc_out_str@@Base+0x578>  // b.none
   11008:	ldr	x0, [sp, #72]
   1100c:	add	x0, x0, #0x20
   11010:	ldr	x1, [sp, #56]
   11014:	cmp	x1, x0
   11018:	b.ne	11050 <mpc_out_str@@Base+0x5ac>  // b.any
   1101c:	mov	w0, #0x1                   	// #1
   11020:	str	w0, [sp, #264]
   11024:	ldr	x0, [sp, #56]
   11028:	ldr	x1, [x0]
   1102c:	add	x0, sp, #0x50
   11030:	bl	5530 <mpfr_init2@plt>
   11034:	ldr	x0, [sp, #56]
   11038:	ldr	w1, [x0, #8]
   1103c:	add	x0, sp, #0x50
   11040:	mov	w3, w1
   11044:	mov	w2, #0x0                   	// #0
   11048:	ldr	x1, [sp, #56]
   1104c:	bl	52d0 <mpfr_set4@plt>
   11050:	add	x0, sp, #0xc0
   11054:	bl	5590 <__gmpz_init@plt>
   11058:	add	x0, sp, #0xb0
   1105c:	bl	5590 <__gmpz_init@plt>
   11060:	add	x0, sp, #0xa0
   11064:	bl	5590 <__gmpz_init@plt>
   11068:	add	x0, sp, #0x90
   1106c:	bl	5590 <__gmpz_init@plt>
   11070:	add	x0, sp, #0x80
   11074:	bl	5590 <__gmpz_init@plt>
   11078:	add	x0, sp, #0x70
   1107c:	bl	5590 <__gmpz_init@plt>
   11080:	add	x0, sp, #0xc0
   11084:	ldr	x1, [sp, #56]
   11088:	bl	5560 <mpfr_get_z_2exp@plt>
   1108c:	str	x0, [sp, #280]
   11090:	add	x0, sp, #0xc0
   11094:	mov	x1, #0x0                   	// #0
   11098:	bl	4ac0 <__gmpz_scan1@plt>
   1109c:	str	x0, [sp, #272]
   110a0:	ldr	x0, [sp, #272]
   110a4:	ldr	x1, [sp, #280]
   110a8:	add	x0, x1, x0
   110ac:	str	x0, [sp, #280]
   110b0:	add	x1, sp, #0xc0
   110b4:	add	x0, sp, #0xc0
   110b8:	ldr	x2, [sp, #272]
   110bc:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   110c0:	ldr	w0, [sp, #244]
   110c4:	cmp	w0, #0x0
   110c8:	b.eq	110e0 <mpc_out_str@@Base+0x63c>  // b.none
   110cc:	add	x0, sp, #0x90
   110d0:	mov	x1, #0x0                   	// #0
   110d4:	bl	4be0 <__gmpz_set_ui@plt>
   110d8:	str	xzr, [sp, #296]
   110dc:	b	110f0 <mpc_out_str@@Base+0x64c>
   110e0:	ldr	x1, [sp, #64]
   110e4:	add	x0, sp, #0x90
   110e8:	bl	5560 <mpfr_get_z_2exp@plt>
   110ec:	str	x0, [sp, #296]
   110f0:	ldr	x0, [sp, #64]
   110f4:	ldr	x1, [x0, #48]
   110f8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   110fc:	cmp	x1, x0
   11100:	b.ne	1111c <mpc_out_str@@Base+0x678>  // b.any
   11104:	add	x0, sp, #0x80
   11108:	mov	x1, #0x0                   	// #0
   1110c:	bl	4be0 <__gmpz_set_ui@plt>
   11110:	ldr	x0, [sp, #296]
   11114:	str	x0, [sp, #288]
   11118:	b	11144 <mpc_out_str@@Base+0x6a0>
   1111c:	ldr	x0, [sp, #64]
   11120:	add	x1, x0, #0x20
   11124:	add	x0, sp, #0x80
   11128:	bl	5560 <mpfr_get_z_2exp@plt>
   1112c:	str	x0, [sp, #288]
   11130:	ldr	w0, [sp, #244]
   11134:	cmp	w0, #0x0
   11138:	b.eq	11144 <mpc_out_str@@Base+0x6a0>  // b.none
   1113c:	ldr	x0, [sp, #288]
   11140:	str	x0, [sp, #296]
   11144:	ldr	x1, [sp, #296]
   11148:	ldr	x0, [sp, #288]
   1114c:	cmp	x1, x0
   11150:	b.ge	11190 <mpc_out_str@@Base+0x6ec>  // b.tcont
   11154:	ldr	x1, [sp, #288]
   11158:	ldr	x0, [sp, #296]
   1115c:	sub	x0, x1, x0
   11160:	mov	x2, x0
   11164:	add	x1, sp, #0x80
   11168:	add	x0, sp, #0x80
   1116c:	bl	4f80 <__gmpz_mul_2exp@plt>
   11170:	add	x0, sp, #0x80
   11174:	mov	w1, #0x2                   	// #2
   11178:	bl	55a0 <__gmpz_sizeinbase@plt>
   1117c:	mov	x1, x0
   11180:	ldr	x0, [sp, #40]
   11184:	cmp	x0, x1
   11188:	b.ge	111e0 <mpc_out_str@@Base+0x73c>  // b.tcont
   1118c:	b	11898 <mpc_out_str@@Base+0xdf4>
   11190:	ldr	x1, [sp, #288]
   11194:	ldr	x0, [sp, #296]
   11198:	cmp	x1, x0
   1119c:	b.ge	111e0 <mpc_out_str@@Base+0x73c>  // b.tcont
   111a0:	ldr	x1, [sp, #296]
   111a4:	ldr	x0, [sp, #288]
   111a8:	sub	x0, x1, x0
   111ac:	mov	x2, x0
   111b0:	add	x1, sp, #0x90
   111b4:	add	x0, sp, #0x90
   111b8:	bl	4f80 <__gmpz_mul_2exp@plt>
   111bc:	add	x0, sp, #0x90
   111c0:	mov	w1, #0x2                   	// #2
   111c4:	bl	55a0 <__gmpz_sizeinbase@plt>
   111c8:	mov	x1, x0
   111cc:	ldr	x0, [sp, #40]
   111d0:	cmp	x0, x1
   111d4:	b.lt	11884 <mpc_out_str@@Base+0xde0>  // b.tstop
   111d8:	ldr	x0, [sp, #288]
   111dc:	str	x0, [sp, #296]
   111e0:	ldr	w0, [sp, #148]
   111e4:	cmp	w0, #0x0
   111e8:	b.lt	1122c <mpc_out_str@@Base+0x788>  // b.tstop
   111ec:	ldr	w0, [sp, #148]
   111f0:	cmp	w0, #0x0
   111f4:	b.gt	1122c <mpc_out_str@@Base+0x788>
   111f8:	add	x0, sp, #0x80
   111fc:	mov	x1, #0x0                   	// #0
   11200:	bl	4ac0 <__gmpz_scan1@plt>
   11204:	str	x0, [sp, #272]
   11208:	add	x1, sp, #0x80
   1120c:	add	x0, sp, #0x80
   11210:	ldr	x2, [sp, #272]
   11214:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   11218:	ldr	x0, [sp, #272]
   1121c:	ldr	x1, [sp, #296]
   11220:	add	x0, x1, x0
   11224:	str	x0, [sp, #296]
   11228:	b	112e0 <mpc_out_str@@Base+0x83c>
   1122c:	ldr	w0, [sp, #132]
   11230:	cmp	w0, #0x0
   11234:	b.lt	11278 <mpc_out_str@@Base+0x7d4>  // b.tstop
   11238:	ldr	w0, [sp, #132]
   1123c:	cmp	w0, #0x0
   11240:	b.gt	11278 <mpc_out_str@@Base+0x7d4>
   11244:	add	x0, sp, #0x90
   11248:	mov	x1, #0x0                   	// #0
   1124c:	bl	4ac0 <__gmpz_scan1@plt>
   11250:	str	x0, [sp, #272]
   11254:	add	x1, sp, #0x90
   11258:	add	x0, sp, #0x90
   1125c:	ldr	x2, [sp, #272]
   11260:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   11264:	ldr	x0, [sp, #272]
   11268:	ldr	x1, [sp, #296]
   1126c:	add	x0, x1, x0
   11270:	str	x0, [sp, #296]
   11274:	b	112e0 <mpc_out_str@@Base+0x83c>
   11278:	add	x0, sp, #0x90
   1127c:	mov	x1, #0x0                   	// #0
   11280:	bl	4ac0 <__gmpz_scan1@plt>
   11284:	str	x0, [sp, #272]
   11288:	add	x0, sp, #0x80
   1128c:	mov	x1, #0x0                   	// #0
   11290:	bl	4ac0 <__gmpz_scan1@plt>
   11294:	str	x0, [sp, #232]
   11298:	ldr	x1, [sp, #232]
   1129c:	ldr	x0, [sp, #272]
   112a0:	cmp	x1, x0
   112a4:	b.cs	112b0 <mpc_out_str@@Base+0x80c>  // b.hs, b.nlast
   112a8:	ldr	x0, [sp, #232]
   112ac:	str	x0, [sp, #272]
   112b0:	add	x1, sp, #0x90
   112b4:	add	x0, sp, #0x90
   112b8:	ldr	x2, [sp, #272]
   112bc:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   112c0:	add	x1, sp, #0x80
   112c4:	add	x0, sp, #0x80
   112c8:	ldr	x2, [sp, #272]
   112cc:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   112d0:	ldr	x0, [sp, #272]
   112d4:	ldr	x1, [sp, #296]
   112d8:	add	x0, x1, x0
   112dc:	str	x0, [sp, #296]
   112e0:	b	11374 <mpc_out_str@@Base+0x8d0>
   112e4:	ldr	x0, [sp, #296]
   112e8:	and	x0, x0, #0x1
   112ec:	cmp	x0, #0x0
   112f0:	b.eq	11320 <mpc_out_str@@Base+0x87c>  // b.none
   112f4:	add	x1, sp, #0x90
   112f8:	add	x0, sp, #0x90
   112fc:	mov	x2, #0x1                   	// #1
   11300:	bl	4f80 <__gmpz_mul_2exp@plt>
   11304:	add	x1, sp, #0x80
   11308:	add	x0, sp, #0x80
   1130c:	mov	x2, #0x1                   	// #1
   11310:	bl	4f80 <__gmpz_mul_2exp@plt>
   11314:	ldr	x0, [sp, #296]
   11318:	sub	x0, x0, #0x1
   1131c:	str	x0, [sp, #296]
   11320:	add	x3, sp, #0x80
   11324:	add	x2, sp, #0x90
   11328:	add	x1, sp, #0xa0
   1132c:	add	x0, sp, #0xb0
   11330:	bl	10b80 <mpc_out_str@@Base+0xdc>
   11334:	cmp	w0, #0x0
   11338:	b.eq	11384 <mpc_out_str@@Base+0x8e0>  // b.none
   1133c:	add	x1, sp, #0x90
   11340:	add	x0, sp, #0xb0
   11344:	bl	4e80 <__gmpz_swap@plt>
   11348:	add	x1, sp, #0x80
   1134c:	add	x0, sp, #0xa0
   11350:	bl	4e80 <__gmpz_swap@plt>
   11354:	ldr	x0, [sp, #296]
   11358:	lsr	x1, x0, #63
   1135c:	add	x0, x1, x0
   11360:	asr	x0, x0, #1
   11364:	str	x0, [sp, #296]
   11368:	ldr	x0, [sp, #280]
   1136c:	add	x0, x0, #0x1
   11370:	str	x0, [sp, #280]
   11374:	ldr	x0, [sp, #280]
   11378:	cmp	x0, #0x0
   1137c:	b.lt	112e4 <mpc_out_str@@Base+0x840>  // b.tstop
   11380:	b	11388 <mpc_out_str@@Base+0x8e4>
   11384:	nop
   11388:	ldr	x0, [sp, #280]
   1138c:	cmp	x0, #0x0
   11390:	b.ge	113a0 <mpc_out_str@@Base+0x8fc>  // b.tcont
   11394:	mov	w0, #0xffffffff            	// #-1
   11398:	str	w0, [sp, #268]
   1139c:	b	11898 <mpc_out_str@@Base+0xdf4>
   113a0:	ldr	w0, [sp, #196]
   113a4:	cmp	w0, #0x0
   113a8:	b.ge	11434 <mpc_out_str@@Base+0x990>  // b.tcont
   113ac:	add	x2, sp, #0x90
   113b0:	add	x1, sp, #0x90
   113b4:	add	x0, sp, #0xb0
   113b8:	bl	4e00 <__gmpz_mul@plt>
   113bc:	add	x2, sp, #0x80
   113c0:	add	x1, sp, #0x80
   113c4:	add	x0, sp, #0xb0
   113c8:	bl	5010 <__gmpz_addmul@plt>
   113cc:	add	x0, sp, #0xb0
   113d0:	mov	x1, #0x0                   	// #0
   113d4:	bl	4ac0 <__gmpz_scan1@plt>
   113d8:	str	x0, [sp, #272]
   113dc:	add	x0, sp, #0xb0
   113e0:	mov	w1, #0x2                   	// #2
   113e4:	bl	55a0 <__gmpz_sizeinbase@plt>
   113e8:	mov	x1, x0
   113ec:	ldr	x0, [sp, #272]
   113f0:	add	x0, x0, #0x1
   113f4:	cmp	x1, x0
   113f8:	b.eq	11408 <mpc_out_str@@Base+0x964>  // b.none
   113fc:	mov	w0, #0xffffffff            	// #-1
   11400:	str	w0, [sp, #268]
   11404:	b	11898 <mpc_out_str@@Base+0xdf4>
   11408:	add	x1, sp, #0x80
   1140c:	add	x0, sp, #0x80
   11410:	bl	4e20 <__gmpz_neg@plt>
   11414:	ldr	x0, [sp, #296]
   11418:	neg	x1, x0
   1141c:	ldr	x0, [sp, #272]
   11420:	sub	x0, x1, x0
   11424:	str	x0, [sp, #296]
   11428:	add	x1, sp, #0xc0
   1142c:	add	x0, sp, #0xc0
   11430:	bl	4e20 <__gmpz_neg@plt>
   11434:	add	x0, sp, #0xc0
   11438:	mov	w1, #0x2                   	// #2
   1143c:	bl	55a0 <__gmpz_sizeinbase@plt>
   11440:	sub	x0, x0, #0x1
   11444:	str	x0, [sp, #272]
   11448:	add	x1, sp, #0x90
   1144c:	add	x0, sp, #0xb0
   11450:	bl	4dc0 <__gmpz_set@plt>
   11454:	add	x1, sp, #0x80
   11458:	add	x0, sp, #0xa0
   1145c:	bl	4dc0 <__gmpz_set@plt>
   11460:	ldr	x0, [sp, #296]
   11464:	str	x0, [sp, #288]
   11468:	b	11660 <mpc_out_str@@Base+0xbbc>
   1146c:	add	x2, sp, #0xa0
   11470:	add	x1, sp, #0xb0
   11474:	add	x0, sp, #0x70
   11478:	bl	4e00 <__gmpz_mul@plt>
   1147c:	add	x2, sp, #0xb0
   11480:	add	x1, sp, #0xb0
   11484:	add	x0, sp, #0xb0
   11488:	bl	4e00 <__gmpz_mul@plt>
   1148c:	add	x2, sp, #0xa0
   11490:	add	x1, sp, #0xa0
   11494:	add	x0, sp, #0xb0
   11498:	bl	53d0 <__gmpz_submul@plt>
   1149c:	add	x1, sp, #0x70
   114a0:	add	x0, sp, #0xa0
   114a4:	mov	x2, #0x1                   	// #1
   114a8:	bl	4f80 <__gmpz_mul_2exp@plt>
   114ac:	ldr	x0, [sp, #288]
   114b0:	lsl	x0, x0, #1
   114b4:	str	x0, [sp, #288]
   114b8:	add	x0, sp, #0xc0
   114bc:	ldr	x1, [sp, #272]
   114c0:	bl	4df0 <__gmpz_tstbit@plt>
   114c4:	cmp	w0, #0x0
   114c8:	b.eq	11528 <mpc_out_str@@Base+0xa84>  // b.none
   114cc:	add	x2, sp, #0x90
   114d0:	add	x1, sp, #0xb0
   114d4:	add	x0, sp, #0x70
   114d8:	bl	4e00 <__gmpz_mul@plt>
   114dc:	add	x2, sp, #0x80
   114e0:	add	x1, sp, #0xa0
   114e4:	add	x0, sp, #0x70
   114e8:	bl	53d0 <__gmpz_submul@plt>
   114ec:	add	x2, sp, #0x90
   114f0:	add	x1, sp, #0xa0
   114f4:	add	x0, sp, #0xa0
   114f8:	bl	4e00 <__gmpz_mul@plt>
   114fc:	add	x2, sp, #0x80
   11500:	add	x1, sp, #0xb0
   11504:	add	x0, sp, #0xa0
   11508:	bl	5010 <__gmpz_addmul@plt>
   1150c:	add	x1, sp, #0x70
   11510:	add	x0, sp, #0xb0
   11514:	bl	4e80 <__gmpz_swap@plt>
   11518:	ldr	x1, [sp, #288]
   1151c:	ldr	x0, [sp, #296]
   11520:	add	x0, x1, x0
   11524:	str	x0, [sp, #288]
   11528:	ldr	w0, [sp, #180]
   1152c:	cmp	w0, #0x0
   11530:	b.lt	11574 <mpc_out_str@@Base+0xad0>  // b.tstop
   11534:	ldr	w0, [sp, #180]
   11538:	cmp	w0, #0x0
   1153c:	b.gt	11574 <mpc_out_str@@Base+0xad0>
   11540:	add	x0, sp, #0xa0
   11544:	mov	x1, #0x0                   	// #0
   11548:	bl	4ac0 <__gmpz_scan1@plt>
   1154c:	str	x0, [sp, #256]
   11550:	add	x1, sp, #0xa0
   11554:	add	x0, sp, #0xa0
   11558:	ldr	x2, [sp, #256]
   1155c:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   11560:	ldr	x0, [sp, #256]
   11564:	ldr	x1, [sp, #288]
   11568:	add	x0, x1, x0
   1156c:	str	x0, [sp, #288]
   11570:	b	11628 <mpc_out_str@@Base+0xb84>
   11574:	ldr	w0, [sp, #164]
   11578:	cmp	w0, #0x0
   1157c:	b.lt	115c0 <mpc_out_str@@Base+0xb1c>  // b.tstop
   11580:	ldr	w0, [sp, #164]
   11584:	cmp	w0, #0x0
   11588:	b.gt	115c0 <mpc_out_str@@Base+0xb1c>
   1158c:	add	x0, sp, #0xb0
   11590:	mov	x1, #0x0                   	// #0
   11594:	bl	4ac0 <__gmpz_scan1@plt>
   11598:	str	x0, [sp, #256]
   1159c:	add	x1, sp, #0xb0
   115a0:	add	x0, sp, #0xb0
   115a4:	ldr	x2, [sp, #256]
   115a8:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   115ac:	ldr	x0, [sp, #256]
   115b0:	ldr	x1, [sp, #288]
   115b4:	add	x0, x1, x0
   115b8:	str	x0, [sp, #288]
   115bc:	b	11628 <mpc_out_str@@Base+0xb84>
   115c0:	add	x0, sp, #0xb0
   115c4:	mov	x1, #0x0                   	// #0
   115c8:	bl	4ac0 <__gmpz_scan1@plt>
   115cc:	str	x0, [sp, #256]
   115d0:	add	x0, sp, #0xa0
   115d4:	mov	x1, #0x0                   	// #0
   115d8:	bl	4ac0 <__gmpz_scan1@plt>
   115dc:	str	x0, [sp, #208]
   115e0:	ldr	x1, [sp, #208]
   115e4:	ldr	x0, [sp, #256]
   115e8:	cmp	x1, x0
   115ec:	b.cs	115f8 <mpc_out_str@@Base+0xb54>  // b.hs, b.nlast
   115f0:	ldr	x0, [sp, #208]
   115f4:	str	x0, [sp, #256]
   115f8:	add	x1, sp, #0xb0
   115fc:	add	x0, sp, #0xb0
   11600:	ldr	x2, [sp, #256]
   11604:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   11608:	add	x1, sp, #0xa0
   1160c:	add	x0, sp, #0xa0
   11610:	ldr	x2, [sp, #256]
   11614:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   11618:	ldr	x0, [sp, #256]
   1161c:	ldr	x1, [sp, #288]
   11620:	add	x0, x1, x0
   11624:	str	x0, [sp, #288]
   11628:	add	x0, sp, #0xb0
   1162c:	mov	w1, #0x2                   	// #2
   11630:	bl	55a0 <__gmpz_sizeinbase@plt>
   11634:	mov	x1, x0
   11638:	ldr	x0, [sp, #40]
   1163c:	cmp	x0, x1
   11640:	b.lt	1188c <mpc_out_str@@Base+0xde8>  // b.tstop
   11644:	add	x0, sp, #0xa0
   11648:	mov	w1, #0x2                   	// #2
   1164c:	bl	55a0 <__gmpz_sizeinbase@plt>
   11650:	mov	x1, x0
   11654:	ldr	x0, [sp, #40]
   11658:	cmp	x0, x1
   1165c:	b.lt	1188c <mpc_out_str@@Base+0xde8>  // b.tstop
   11660:	ldr	x0, [sp, #272]
   11664:	sub	x1, x0, #0x1
   11668:	str	x1, [sp, #272]
   1166c:	cmp	x0, #0x0
   11670:	b.ne	1146c <mpc_out_str@@Base+0x9c8>  // b.any
   11674:	b	11764 <mpc_out_str@@Base+0xcc0>
   11678:	add	x2, sp, #0xa0
   1167c:	add	x1, sp, #0xb0
   11680:	add	x0, sp, #0x70
   11684:	bl	4e00 <__gmpz_mul@plt>
   11688:	add	x2, sp, #0xb0
   1168c:	add	x1, sp, #0xb0
   11690:	add	x0, sp, #0xb0
   11694:	bl	4e00 <__gmpz_mul@plt>
   11698:	add	x2, sp, #0xa0
   1169c:	add	x1, sp, #0xa0
   116a0:	add	x0, sp, #0xb0
   116a4:	bl	53d0 <__gmpz_submul@plt>
   116a8:	add	x1, sp, #0x70
   116ac:	add	x0, sp, #0xa0
   116b0:	mov	x2, #0x1                   	// #1
   116b4:	bl	4f80 <__gmpz_mul_2exp@plt>
   116b8:	ldr	x0, [sp, #288]
   116bc:	lsl	x0, x0, #1
   116c0:	str	x0, [sp, #288]
   116c4:	add	x0, sp, #0xb0
   116c8:	mov	x1, #0x0                   	// #0
   116cc:	bl	4ac0 <__gmpz_scan1@plt>
   116d0:	str	x0, [sp, #224]
   116d4:	add	x0, sp, #0xa0
   116d8:	mov	x1, #0x0                   	// #0
   116dc:	bl	4ac0 <__gmpz_scan1@plt>
   116e0:	str	x0, [sp, #216]
   116e4:	ldr	x0, [sp, #216]
   116e8:	ldr	x2, [sp, #224]
   116ec:	ldr	x1, [sp, #224]
   116f0:	cmp	x2, x0
   116f4:	csel	x0, x1, x0, ls  // ls = plast
   116f8:	str	x0, [sp, #224]
   116fc:	add	x1, sp, #0xb0
   11700:	add	x0, sp, #0xb0
   11704:	ldr	x2, [sp, #224]
   11708:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   1170c:	add	x1, sp, #0xa0
   11710:	add	x0, sp, #0xa0
   11714:	ldr	x2, [sp, #224]
   11718:	bl	5320 <__gmpz_tdiv_q_2exp@plt>
   1171c:	ldr	x0, [sp, #224]
   11720:	ldr	x1, [sp, #288]
   11724:	add	x0, x1, x0
   11728:	str	x0, [sp, #288]
   1172c:	add	x0, sp, #0xb0
   11730:	mov	w1, #0x2                   	// #2
   11734:	bl	55a0 <__gmpz_sizeinbase@plt>
   11738:	mov	x1, x0
   1173c:	ldr	x0, [sp, #40]
   11740:	cmp	x0, x1
   11744:	b.lt	11894 <mpc_out_str@@Base+0xdf0>  // b.tstop
   11748:	add	x0, sp, #0xa0
   1174c:	mov	w1, #0x2                   	// #2
   11750:	bl	55a0 <__gmpz_sizeinbase@plt>
   11754:	mov	x1, x0
   11758:	ldr	x0, [sp, #40]
   1175c:	cmp	x0, x1
   11760:	b.lt	11894 <mpc_out_str@@Base+0xdf0>  // b.tstop
   11764:	ldr	x0, [sp, #280]
   11768:	sub	x1, x0, #0x1
   1176c:	str	x1, [sp, #280]
   11770:	cmp	x0, #0x0
   11774:	b.gt	11678 <mpc_out_str@@Base+0xbd4>
   11778:	ldr	x3, [sp, #72]
   1177c:	ldr	w0, [sp, #52]
   11780:	and	w1, w0, #0xf
   11784:	add	x0, sp, #0xb0
   11788:	mov	w2, w1
   1178c:	mov	x1, x0
   11790:	mov	x0, x3
   11794:	bl	4fb0 <mpfr_set_z@plt>
   11798:	str	w0, [sp, #268]
   1179c:	ldr	w0, [sp, #268]
   117a0:	cmp	w0, #0x0
   117a4:	b.lt	117c0 <mpc_out_str@@Base+0xd1c>  // b.tstop
   117a8:	ldr	w0, [sp, #268]
   117ac:	cmp	w0, #0x0
   117b0:	cset	w0, ne  // ne = any
   117b4:	and	w0, w0, #0xff
   117b8:	mov	w19, w0
   117bc:	b	117c4 <mpc_out_str@@Base+0xd20>
   117c0:	mov	w19, #0x2                   	// #2
   117c4:	ldr	x0, [sp, #72]
   117c8:	add	x3, x0, #0x20
   117cc:	ldr	w0, [sp, #52]
   117d0:	asr	w1, w0, #4
   117d4:	add	x0, sp, #0xa0
   117d8:	mov	w2, w1
   117dc:	mov	x1, x0
   117e0:	mov	x0, x3
   117e4:	bl	4fb0 <mpfr_set_z@plt>
   117e8:	cmp	w0, #0x0
   117ec:	b.lt	1182c <mpc_out_str@@Base+0xd88>  // b.tstop
   117f0:	ldr	x0, [sp, #72]
   117f4:	add	x3, x0, #0x20
   117f8:	ldr	w0, [sp, #52]
   117fc:	asr	w1, w0, #4
   11800:	add	x0, sp, #0xa0
   11804:	mov	w2, w1
   11808:	mov	x1, x0
   1180c:	mov	x0, x3
   11810:	bl	4fb0 <mpfr_set_z@plt>
   11814:	cmp	w0, #0x0
   11818:	b.eq	11824 <mpc_out_str@@Base+0xd80>  // b.none
   1181c:	mov	w0, #0x4                   	// #4
   11820:	b	11830 <mpc_out_str@@Base+0xd8c>
   11824:	mov	w0, #0x0                   	// #0
   11828:	b	11830 <mpc_out_str@@Base+0xd8c>
   1182c:	mov	w0, #0x8                   	// #8
   11830:	orr	w0, w19, w0
   11834:	str	w0, [sp, #268]
   11838:	ldr	x4, [sp, #72]
   1183c:	ldr	x1, [sp, #72]
   11840:	ldr	w0, [sp, #52]
   11844:	and	w0, w0, #0xf
   11848:	mov	w3, w0
   1184c:	ldr	x2, [sp, #288]
   11850:	mov	x0, x4
   11854:	bl	4b40 <mpfr_mul_2si@plt>
   11858:	ldr	x0, [sp, #72]
   1185c:	add	x4, x0, #0x20
   11860:	ldr	x0, [sp, #72]
   11864:	add	x1, x0, #0x20
   11868:	ldr	w0, [sp, #52]
   1186c:	asr	w0, w0, #4
   11870:	mov	w3, w0
   11874:	ldr	x2, [sp, #288]
   11878:	mov	x0, x4
   1187c:	bl	4b40 <mpfr_mul_2si@plt>
   11880:	b	11898 <mpc_out_str@@Base+0xdf4>
   11884:	nop
   11888:	b	11898 <mpc_out_str@@Base+0xdf4>
   1188c:	nop
   11890:	b	11898 <mpc_out_str@@Base+0xdf4>
   11894:	nop
   11898:	add	x0, sp, #0xc0
   1189c:	bl	5280 <__gmpz_clear@plt>
   118a0:	add	x0, sp, #0xb0
   118a4:	bl	5280 <__gmpz_clear@plt>
   118a8:	add	x0, sp, #0xa0
   118ac:	bl	5280 <__gmpz_clear@plt>
   118b0:	add	x0, sp, #0x90
   118b4:	bl	5280 <__gmpz_clear@plt>
   118b8:	add	x0, sp, #0x80
   118bc:	bl	5280 <__gmpz_clear@plt>
   118c0:	add	x0, sp, #0x70
   118c4:	bl	5280 <__gmpz_clear@plt>
   118c8:	ldr	w0, [sp, #268]
   118cc:	cmp	w0, #0x0
   118d0:	b.lt	1190c <mpc_out_str@@Base+0xe68>  // b.tstop
   118d4:	ldr	w0, [sp, #244]
   118d8:	cmp	w0, #0x0
   118dc:	b.eq	1190c <mpc_out_str@@Base+0xe68>  // b.none
   118e0:	ldr	w0, [sp, #264]
   118e4:	cmp	w0, #0x0
   118e8:	b.eq	118f4 <mpc_out_str@@Base+0xe50>  // b.none
   118ec:	add	x0, sp, #0x50
   118f0:	b	118f8 <mpc_out_str@@Base+0xe54>
   118f4:	ldr	x0, [sp, #56]
   118f8:	mov	x3, x0
   118fc:	ldr	w2, [sp, #248]
   11900:	ldr	w1, [sp, #252]
   11904:	ldr	x0, [sp, #72]
   11908:	bl	10d14 <mpc_out_str@@Base+0x270>
   1190c:	ldr	w0, [sp, #264]
   11910:	cmp	w0, #0x0
   11914:	b.eq	11920 <mpc_out_str@@Base+0xe7c>  // b.none
   11918:	add	x0, sp, #0x50
   1191c:	bl	4e30 <mpfr_clear@plt>
   11920:	ldr	w0, [sp, #268]
   11924:	ldr	x19, [sp, #16]
   11928:	ldp	x29, x30, [sp], #304
   1192c:	ret
   11930:	sub	sp, sp, #0x30
   11934:	str	x0, [sp, #8]
   11938:	str	x1, [sp]
   1193c:	ldr	x0, [sp, #8]
   11940:	ldr	x0, [x0, #16]
   11944:	ldr	x1, [sp]
   11948:	add	x0, x1, x0
   1194c:	str	x0, [sp, #32]
   11950:	ldr	x0, [sp, #32]
   11954:	cmp	x0, #0x0
   11958:	b.gt	11964 <mpc_out_str@@Base+0xec0>
   1195c:	mov	w0, #0x0                   	// #0
   11960:	b	11af0 <mpc_out_str@@Base+0x104c>
   11964:	ldr	x0, [sp, #8]
   11968:	ldr	x0, [x0]
   1196c:	str	x0, [sp, #24]
   11970:	ldr	x1, [sp, #32]
   11974:	ldr	x0, [sp, #24]
   11978:	cmp	x1, x0
   1197c:	b.le	11988 <mpc_out_str@@Base+0xee4>
   11980:	mov	w0, #0x0                   	// #0
   11984:	b	11af0 <mpc_out_str@@Base+0x104c>
   11988:	ldr	x0, [sp, #24]
   1198c:	sub	x1, x0, #0x1
   11990:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   11994:	ldr	x0, [x0, #4056]
   11998:	ldr	w0, [x0]
   1199c:	sxtw	x0, w0
   119a0:	sdiv	x0, x1, x0
   119a4:	add	x1, x0, #0x1
   119a8:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   119ac:	ldr	x0, [x0, #4056]
   119b0:	ldr	w0, [x0]
   119b4:	sxtw	x0, w0
   119b8:	mul	x1, x1, x0
   119bc:	ldr	x0, [sp, #32]
   119c0:	sub	x0, x1, x0
   119c4:	str	x0, [sp, #24]
   119c8:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   119cc:	ldr	x0, [x0, #4056]
   119d0:	ldr	w0, [x0]
   119d4:	sxtw	x0, w0
   119d8:	ldr	x1, [sp, #24]
   119dc:	sdiv	x0, x1, x0
   119e0:	str	x0, [sp, #40]
   119e4:	ldr	x0, [sp, #8]
   119e8:	ldr	x0, [x0, #24]
   119ec:	str	x0, [sp, #16]
   119f0:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   119f4:	ldr	x0, [x0, #4056]
   119f8:	ldr	w0, [x0]
   119fc:	sxtw	x1, w0
   11a00:	ldr	x0, [sp, #32]
   11a04:	sdiv	x2, x0, x1
   11a08:	mul	x1, x2, x1
   11a0c:	sub	x0, x0, x1
   11a10:	cmp	x0, #0x0
   11a14:	b.ne	11a40 <mpc_out_str@@Base+0xf9c>  // b.any
   11a18:	ldr	x0, [sp, #40]
   11a1c:	lsl	x0, x0, #3
   11a20:	ldr	x1, [sp, #16]
   11a24:	add	x0, x1, x0
   11a28:	ldr	x0, [x0]
   11a2c:	and	x0, x0, #0x1
   11a30:	cmp	x0, #0x0
   11a34:	cset	w0, eq  // eq = none
   11a38:	and	w0, w0, #0xff
   11a3c:	b	11aa0 <mpc_out_str@@Base+0xffc>
   11a40:	ldr	x0, [sp, #40]
   11a44:	lsl	x0, x0, #3
   11a48:	ldr	x1, [sp, #16]
   11a4c:	add	x0, x1, x0
   11a50:	ldr	x2, [x0]
   11a54:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   11a58:	ldr	x0, [x0, #4056]
   11a5c:	ldr	w0, [x0]
   11a60:	sxtw	x1, w0
   11a64:	ldr	x0, [sp, #32]
   11a68:	sdiv	x3, x0, x1
   11a6c:	mul	x1, x3, x1
   11a70:	sub	x0, x0, x1
   11a74:	sub	w0, w0, #0x1
   11a78:	lsl	x1, x2, x0
   11a7c:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   11a80:	ldr	x0, [x0, #4056]
   11a84:	ldr	w0, [x0]
   11a88:	sub	w0, w0, #0x1
   11a8c:	mov	x2, #0x1                   	// #1
   11a90:	lsl	x0, x2, x0
   11a94:	cmp	x1, x0
   11a98:	cset	w0, ne  // ne = any
   11a9c:	and	w0, w0, #0xff
   11aa0:	cmp	w0, #0x0
   11aa4:	b.eq	11ad4 <mpc_out_str@@Base+0x1030>  // b.none
   11aa8:	mov	w0, #0x0                   	// #0
   11aac:	b	11af0 <mpc_out_str@@Base+0x104c>
   11ab0:	ldr	x0, [sp, #40]
   11ab4:	lsl	x0, x0, #3
   11ab8:	ldr	x1, [sp, #16]
   11abc:	add	x0, x1, x0
   11ac0:	ldr	x0, [x0]
   11ac4:	cmp	x0, #0x0
   11ac8:	b.eq	11ad4 <mpc_out_str@@Base+0x1030>  // b.none
   11acc:	mov	w0, #0x0                   	// #0
   11ad0:	b	11af0 <mpc_out_str@@Base+0x104c>
   11ad4:	ldr	x0, [sp, #40]
   11ad8:	sub	x0, x0, #0x1
   11adc:	str	x0, [sp, #40]
   11ae0:	ldr	x0, [sp, #40]
   11ae4:	cmp	x0, #0x0
   11ae8:	b.ge	11ab0 <mpc_out_str@@Base+0x100c>  // b.tcont
   11aec:	mov	w0, #0x1                   	// #1
   11af0:	add	sp, sp, #0x30
   11af4:	ret

0000000000011af8 <mpc_pow@@Base>:
   11af8:	stp	x29, x30, [sp, #-448]!
   11afc:	mov	x29, sp
   11b00:	str	x0, [sp, #40]
   11b04:	str	x1, [sp, #32]
   11b08:	str	x2, [sp, #24]
   11b0c:	str	w3, [sp, #20]
   11b10:	mov	w0, #0xfffffffe            	// #-2
   11b14:	str	w0, [sp, #444]
   11b18:	str	wzr, [sp, #436]
   11b1c:	str	wzr, [sp, #432]
   11b20:	bl	53f0 <mpfr_underflow_p@plt>
   11b24:	str	w0, [sp, #368]
   11b28:	bl	55d0 <mpfr_overflow_p@plt>
   11b2c:	str	w0, [sp, #364]
   11b30:	ldr	x0, [sp, #32]
   11b34:	ldr	x1, [x0, #48]
   11b38:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11b3c:	cmp	x1, x0
   11b40:	cset	w0, eq  // eq = none
   11b44:	and	w0, w0, #0xff
   11b48:	str	w0, [sp, #360]
   11b4c:	ldr	x0, [sp, #24]
   11b50:	ldr	x1, [x0, #48]
   11b54:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11b58:	cmp	x1, x0
   11b5c:	cset	w0, eq  // eq = none
   11b60:	and	w0, w0, #0xff
   11b64:	str	w0, [sp, #356]
   11b68:	ldr	w0, [sp, #356]
   11b6c:	cmp	w0, #0x0
   11b70:	b.eq	11cf0 <mpc_pow@@Base+0x1f8>  // b.none
   11b74:	ldr	x0, [sp, #24]
   11b78:	ldr	x1, [x0, #16]
   11b7c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11b80:	cmp	x1, x0
   11b84:	b.ne	11cf0 <mpc_pow@@Base+0x1f8>  // b.any
   11b88:	ldr	w0, [sp, #360]
   11b8c:	cmp	w0, #0x0
   11b90:	b.eq	11bc4 <mpc_pow@@Base+0xcc>  // b.none
   11b94:	ldr	x0, [sp, #32]
   11b98:	ldr	x1, [x0, #16]
   11b9c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11ba0:	cmp	x1, x0
   11ba4:	b.ne	11bc4 <mpc_pow@@Base+0xcc>  // b.any
   11ba8:	mov	w3, #0x0                   	// #0
   11bac:	mov	x2, #0x0                   	// #0
   11bb0:	mov	x1, #0x1                   	// #1
   11bb4:	ldr	x0, [sp, #40]
   11bb8:	bl	5140 <mpc_set_ui_ui@plt>
   11bbc:	mov	w0, #0x0                   	// #0
   11bc0:	b	12b44 <mpc_pow@@Base+0x104c>
   11bc4:	add	x0, sp, #0x38
   11bc8:	bl	4b70 <mpfr_init@plt>
   11bcc:	add	x0, sp, #0x38
   11bd0:	mov	w2, #0x0                   	// #0
   11bd4:	ldr	x1, [sp, #32]
   11bd8:	bl	4f90 <mpc_norm@plt>
   11bdc:	str	w0, [sp, #352]
   11be0:	add	x0, sp, #0x38
   11be4:	mov	x2, #0x0                   	// #0
   11be8:	mov	x1, #0x1                   	// #1
   11bec:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
   11bf0:	str	w0, [sp, #412]
   11bf4:	ldr	w0, [sp, #412]
   11bf8:	cmp	w0, #0x0
   11bfc:	b.ne	11c18 <mpc_pow@@Base+0x120>  // b.any
   11c00:	ldr	w0, [sp, #352]
   11c04:	cmp	w0, #0x0
   11c08:	b.eq	11c18 <mpc_pow@@Base+0x120>  // b.none
   11c0c:	ldr	w0, [sp, #352]
   11c10:	neg	w0, w0
   11c14:	str	w0, [sp, #412]
   11c18:	ldr	w0, [sp, #412]
   11c1c:	cmp	w0, #0x0
   11c20:	b.ge	11c34 <mpc_pow@@Base+0x13c>  // b.tcont
   11c24:	ldr	x0, [sp, #24]
   11c28:	ldr	w0, [x0, #40]
   11c2c:	cmp	w0, #0x0
   11c30:	b.ge	11c8c <mpc_pow@@Base+0x194>  // b.tcont
   11c34:	ldr	w0, [sp, #412]
   11c38:	cmp	w0, #0x0
   11c3c:	b.ne	11c70 <mpc_pow@@Base+0x178>  // b.any
   11c40:	ldr	x0, [sp, #32]
   11c44:	ldr	w0, [x0, #40]
   11c48:	lsr	w0, w0, #31
   11c4c:	and	w1, w0, #0xff
   11c50:	ldr	x0, [sp, #24]
   11c54:	ldr	w0, [x0, #8]
   11c58:	lsr	w0, w0, #31
   11c5c:	and	w0, w0, #0xff
   11c60:	eor	w0, w1, w0
   11c64:	and	w0, w0, #0xff
   11c68:	cmp	w0, #0x0
   11c6c:	b.ne	11c8c <mpc_pow@@Base+0x194>  // b.any
   11c70:	ldr	w0, [sp, #412]
   11c74:	cmp	w0, #0x0
   11c78:	b.le	11c94 <mpc_pow@@Base+0x19c>
   11c7c:	ldr	x0, [sp, #24]
   11c80:	ldr	w0, [x0, #40]
   11c84:	cmp	w0, #0x0
   11c88:	b.ge	11c94 <mpc_pow@@Base+0x19c>  // b.tcont
   11c8c:	mov	w0, #0x1                   	// #1
   11c90:	b	11c98 <mpc_pow@@Base+0x1a0>
   11c94:	mov	w0, #0x0                   	// #0
   11c98:	str	w0, [sp, #348]
   11c9c:	ldr	w3, [sp, #20]
   11ca0:	mov	x2, #0x0                   	// #0
   11ca4:	mov	x1, #0x1                   	// #1
   11ca8:	ldr	x0, [sp, #40]
   11cac:	bl	5140 <mpc_set_ui_ui@plt>
   11cb0:	str	w0, [sp, #444]
   11cb4:	ldr	w0, [sp, #20]
   11cb8:	asr	w0, w0, #4
   11cbc:	cmp	w0, #0x3
   11cc0:	b.eq	11cd0 <mpc_pow@@Base+0x1d8>  // b.none
   11cc4:	ldr	w0, [sp, #348]
   11cc8:	cmp	w0, #0x0
   11ccc:	b.eq	11ce0 <mpc_pow@@Base+0x1e8>  // b.none
   11cd0:	mov	w2, #0x0                   	// #0
   11cd4:	ldr	x1, [sp, #40]
   11cd8:	ldr	x0, [sp, #40]
   11cdc:	bl	5060 <mpc_conj@plt>
   11ce0:	add	x0, sp, #0x38
   11ce4:	bl	4e30 <mpfr_clear@plt>
   11ce8:	ldr	w0, [sp, #444]
   11cec:	b	12b44 <mpc_pow@@Base+0x104c>
   11cf0:	ldr	x0, [sp, #32]
   11cf4:	bl	55c0 <mpfr_number_p@plt>
   11cf8:	cmp	w0, #0x0
   11cfc:	b.eq	11d38 <mpc_pow@@Base+0x240>  // b.none
   11d00:	ldr	x0, [sp, #32]
   11d04:	add	x0, x0, #0x20
   11d08:	bl	55c0 <mpfr_number_p@plt>
   11d0c:	cmp	w0, #0x0
   11d10:	b.eq	11d38 <mpc_pow@@Base+0x240>  // b.none
   11d14:	ldr	x0, [sp, #24]
   11d18:	bl	55c0 <mpfr_number_p@plt>
   11d1c:	cmp	w0, #0x0
   11d20:	b.eq	11d38 <mpc_pow@@Base+0x240>  // b.none
   11d24:	ldr	x0, [sp, #24]
   11d28:	add	x0, x0, #0x20
   11d2c:	bl	55c0 <mpfr_number_p@plt>
   11d30:	cmp	w0, #0x0
   11d34:	b.ne	11d8c <mpc_pow@@Base+0x294>  // b.any
   11d38:	add	x0, sp, #0x58
   11d3c:	mov	x1, #0x2                   	// #2
   11d40:	bl	4db0 <mpc_init2@plt>
   11d44:	add	x0, sp, #0x58
   11d48:	mov	w2, #0x0                   	// #0
   11d4c:	ldr	x1, [sp, #32]
   11d50:	bl	4e90 <mpc_log@plt>
   11d54:	add	x1, sp, #0x58
   11d58:	add	x0, sp, #0x58
   11d5c:	mov	w3, #0x0                   	// #0
   11d60:	ldr	x2, [sp, #24]
   11d64:	bl	4fd0 <mpc_mul@plt>
   11d68:	add	x0, sp, #0x58
   11d6c:	ldr	w2, [sp, #20]
   11d70:	mov	x1, x0
   11d74:	ldr	x0, [sp, #40]
   11d78:	bl	53a0 <mpc_exp@plt>
   11d7c:	str	w0, [sp, #444]
   11d80:	add	x0, sp, #0x58
   11d84:	bl	4ae0 <mpc_clear@plt>
   11d88:	b	12b40 <mpc_pow@@Base+0x1048>
   11d8c:	ldr	w0, [sp, #360]
   11d90:	cmp	w0, #0x0
   11d94:	b.eq	1205c <mpc_pow@@Base+0x564>  // b.none
   11d98:	ldr	x0, [sp, #32]
   11d9c:	ldr	x1, [x0, #16]
   11da0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   11da4:	cmp	x1, x0
   11da8:	b.ne	11e00 <mpc_pow@@Base+0x308>  // b.any
   11dac:	add	x0, sp, #0x58
   11db0:	mov	x1, #0x2                   	// #2
   11db4:	bl	4db0 <mpc_init2@plt>
   11db8:	add	x0, sp, #0x58
   11dbc:	mov	w2, #0x0                   	// #0
   11dc0:	ldr	x1, [sp, #32]
   11dc4:	bl	4e90 <mpc_log@plt>
   11dc8:	add	x1, sp, #0x58
   11dcc:	add	x0, sp, #0x58
   11dd0:	mov	w3, #0x0                   	// #0
   11dd4:	ldr	x2, [sp, #24]
   11dd8:	bl	4fd0 <mpc_mul@plt>
   11ddc:	add	x0, sp, #0x58
   11de0:	ldr	w2, [sp, #20]
   11de4:	mov	x1, x0
   11de8:	ldr	x0, [sp, #40]
   11dec:	bl	53a0 <mpc_exp@plt>
   11df0:	str	w0, [sp, #444]
   11df4:	add	x0, sp, #0x58
   11df8:	bl	4ae0 <mpc_clear@plt>
   11dfc:	b	12b40 <mpc_pow@@Base+0x1048>
   11e00:	ldr	x0, [sp, #32]
   11e04:	mov	x2, #0x0                   	// #0
   11e08:	mov	x1, #0x1                   	// #1
   11e0c:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
   11e10:	cmp	w0, #0x0
   11e14:	b.ne	11e88 <mpc_pow@@Base+0x390>  // b.any
   11e18:	ldr	x0, [sp, #24]
   11e1c:	ldr	w0, [x0, #8]
   11e20:	lsr	w0, w0, #31
   11e24:	and	w0, w0, #0xff
   11e28:	str	w0, [sp, #316]
   11e2c:	ldr	x0, [sp, #32]
   11e30:	ldr	w0, [x0, #40]
   11e34:	lsr	w0, w0, #31
   11e38:	and	w0, w0, #0xff
   11e3c:	str	w0, [sp, #312]
   11e40:	ldr	w2, [sp, #20]
   11e44:	mov	x1, #0x1                   	// #1
   11e48:	ldr	x0, [sp, #40]
   11e4c:	bl	4da0 <mpc_set_ui@plt>
   11e50:	str	w0, [sp, #444]
   11e54:	ldr	w0, [sp, #20]
   11e58:	asr	w0, w0, #4
   11e5c:	cmp	w0, #0x3
   11e60:	b.eq	11e74 <mpc_pow@@Base+0x37c>  // b.none
   11e64:	ldr	w1, [sp, #316]
   11e68:	ldr	w0, [sp, #312]
   11e6c:	cmp	w1, w0
   11e70:	b.eq	12b2c <mpc_pow@@Base+0x1034>  // b.none
   11e74:	mov	w2, #0x0                   	// #0
   11e78:	ldr	x1, [sp, #40]
   11e7c:	ldr	x0, [sp, #40]
   11e80:	bl	5060 <mpc_conj@plt>
   11e84:	b	12b2c <mpc_pow@@Base+0x1034>
   11e88:	ldr	w0, [sp, #356]
   11e8c:	cmp	w0, #0x0
   11e90:	b.eq	11fd8 <mpc_pow@@Base+0x4e0>  // b.none
   11e94:	ldr	x0, [sp, #24]
   11e98:	bl	4f10 <mpfr_integer_p@plt>
   11e9c:	cmp	w0, #0x0
   11ea0:	b.ne	11eb4 <mpc_pow@@Base+0x3bc>  // b.any
   11ea4:	ldr	x0, [sp, #32]
   11ea8:	bl	52f0 <mpfr_sgn@plt>
   11eac:	cmp	w0, #0x0
   11eb0:	b.lt	11fd8 <mpc_pow@@Base+0x4e0>  // b.tstop
   11eb4:	ldr	x0, [sp, #24]
   11eb8:	ldr	w0, [x0, #8]
   11ebc:	lsr	w0, w0, #31
   11ec0:	and	w0, w0, #0xff
   11ec4:	str	w0, [sp, #344]
   11ec8:	ldr	x0, [sp, #32]
   11ecc:	ldr	w0, [x0, #40]
   11ed0:	lsr	w0, w0, #31
   11ed4:	and	w0, w0, #0xff
   11ed8:	str	w0, [sp, #340]
   11edc:	ldr	x4, [sp, #40]
   11ee0:	ldr	x1, [sp, #32]
   11ee4:	ldr	x2, [sp, #24]
   11ee8:	ldr	w0, [sp, #20]
   11eec:	and	w0, w0, #0xf
   11ef0:	mov	w3, w0
   11ef4:	mov	x0, x4
   11ef8:	bl	4c60 <mpfr_pow@plt>
   11efc:	str	w0, [sp, #444]
   11f00:	ldr	w0, [sp, #444]
   11f04:	cmp	w0, #0x0
   11f08:	b.lt	11f24 <mpc_pow@@Base+0x42c>  // b.tstop
   11f0c:	ldr	w0, [sp, #444]
   11f10:	cmp	w0, #0x0
   11f14:	cset	w0, ne  // ne = any
   11f18:	and	w0, w0, #0xff
   11f1c:	mov	w1, w0
   11f20:	b	11f28 <mpc_pow@@Base+0x430>
   11f24:	mov	w1, #0x2                   	// #2
   11f28:	ldr	x0, [sp, #40]
   11f2c:	add	x0, x0, #0x20
   11f30:	str	x0, [sp, #328]
   11f34:	ldr	x0, [sp, #328]
   11f38:	mov	w2, #0x1                   	// #1
   11f3c:	str	w2, [x0, #8]
   11f40:	ldr	x0, [sp, #328]
   11f44:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
   11f48:	str	x2, [x0, #16]
   11f4c:	ldr	x0, [sp, #40]
   11f50:	add	x0, x0, #0x20
   11f54:	str	x0, [sp, #320]
   11f58:	ldr	x0, [sp, #320]
   11f5c:	mov	w2, #0x1                   	// #1
   11f60:	str	w2, [x0, #8]
   11f64:	ldr	x0, [sp, #320]
   11f68:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
   11f6c:	str	x2, [x0, #16]
   11f70:	mov	w0, #0x0                   	// #0
   11f74:	cmp	w0, #0x0
   11f78:	b.eq	11f84 <mpc_pow@@Base+0x48c>  // b.none
   11f7c:	mov	w0, #0x4                   	// #4
   11f80:	b	11f88 <mpc_pow@@Base+0x490>
   11f84:	mov	w0, #0x0                   	// #0
   11f88:	orr	w0, w1, w0
   11f8c:	str	w0, [sp, #444]
   11f90:	ldr	w0, [sp, #20]
   11f94:	asr	w0, w0, #4
   11f98:	cmp	w0, #0x3
   11f9c:	b.eq	11fb0 <mpc_pow@@Base+0x4b8>  // b.none
   11fa0:	ldr	w1, [sp, #344]
   11fa4:	ldr	w0, [sp, #340]
   11fa8:	cmp	w1, w0
   11fac:	b.eq	12b34 <mpc_pow@@Base+0x103c>  // b.none
   11fb0:	ldr	x0, [sp, #40]
   11fb4:	add	x3, x0, #0x20
   11fb8:	ldr	x0, [sp, #40]
   11fbc:	add	x1, x0, #0x20
   11fc0:	ldr	w0, [sp, #20]
   11fc4:	asr	w0, w0, #4
   11fc8:	mov	w2, w0
   11fcc:	mov	x0, x3
   11fd0:	bl	4c50 <mpfr_neg@plt>
   11fd4:	b	12b34 <mpc_pow@@Base+0x103c>
   11fd8:	ldr	x0, [sp, #32]
   11fdc:	mov	x2, #0x0                   	// #0
   11fe0:	mov	x1, #0xffffffffffffffff    	// #-1
   11fe4:	bl	50e0 <mpfr_cmp_si_2exp@plt>
   11fe8:	cmp	w0, #0x0
   11fec:	b.ne	12008 <mpc_pow@@Base+0x510>  // b.any
   11ff0:	ldr	x0, [sp, #24]
   11ff4:	bl	4f10 <mpfr_integer_p@plt>
   11ff8:	cmp	w0, #0x0
   11ffc:	b.eq	12008 <mpc_pow@@Base+0x510>  // b.none
   12000:	mov	w0, #0x1                   	// #1
   12004:	str	w0, [sp, #436]
   12008:	ldr	x0, [sp, #32]
   1200c:	bl	52f0 <mpfr_sgn@plt>
   12010:	cmp	w0, #0x0
   12014:	b.ge	1215c <mpc_pow@@Base+0x664>  // b.tcont
   12018:	ldr	x0, [sp, #24]
   1201c:	mov	x1, #0x1                   	// #1
   12020:	bl	11930 <mpc_out_str@@Base+0xe8c>
   12024:	cmp	w0, #0x0
   12028:	b.eq	1215c <mpc_pow@@Base+0x664>  // b.none
   1202c:	ldr	w0, [sp, #356]
   12030:	cmp	w0, #0x0
   12034:	b.ne	12050 <mpc_pow@@Base+0x558>  // b.any
   12038:	ldr	x0, [sp, #32]
   1203c:	mov	x2, #0x0                   	// #0
   12040:	mov	x1, #0xffffffffffffffff    	// #-1
   12044:	bl	50e0 <mpfr_cmp_si_2exp@plt>
   12048:	cmp	w0, #0x0
   1204c:	b.ne	1215c <mpc_pow@@Base+0x664>  // b.any
   12050:	mov	w0, #0x1                   	// #1
   12054:	str	w0, [sp, #432]
   12058:	b	1215c <mpc_pow@@Base+0x664>
   1205c:	mov	x2, #0x1                   	// #1
   12060:	mov	x1, #0x0                   	// #0
   12064:	ldr	x0, [sp, #32]
   12068:	bl	5410 <mpc_cmp_si_si@plt>
   1206c:	cmp	w0, #0x0
   12070:	b.eq	120a8 <mpc_pow@@Base+0x5b0>  // b.none
   12074:	mov	x2, #0xffffffffffffffff    	// #-1
   12078:	mov	x1, #0x0                   	// #0
   1207c:	ldr	x0, [sp, #32]
   12080:	bl	5410 <mpc_cmp_si_si@plt>
   12084:	cmp	w0, #0x0
   12088:	b.eq	120a8 <mpc_pow@@Base+0x5b0>  // b.none
   1208c:	ldr	x0, [sp, #32]
   12090:	bl	52f0 <mpfr_sgn@plt>
   12094:	cmp	w0, #0x0
   12098:	b.ne	120e4 <mpc_pow@@Base+0x5ec>  // b.any
   1209c:	ldr	w0, [sp, #356]
   120a0:	cmp	w0, #0x0
   120a4:	b.eq	120e4 <mpc_pow@@Base+0x5ec>  // b.none
   120a8:	ldr	x0, [sp, #24]
   120ac:	bl	4f10 <mpfr_integer_p@plt>
   120b0:	cmp	w0, #0x0
   120b4:	b.eq	120e4 <mpc_pow@@Base+0x5ec>  // b.none
   120b8:	ldr	x0, [sp, #24]
   120bc:	mov	x1, #0x0                   	// #0
   120c0:	bl	11930 <mpc_out_str@@Base+0xe8c>
   120c4:	cmp	w0, #0x0
   120c8:	b.eq	120d8 <mpc_pow@@Base+0x5e0>  // b.none
   120cc:	mov	w0, #0x1                   	// #1
   120d0:	str	w0, [sp, #432]
   120d4:	b	1215c <mpc_pow@@Base+0x664>
   120d8:	mov	w0, #0x1                   	// #1
   120dc:	str	w0, [sp, #436]
   120e0:	b	1215c <mpc_pow@@Base+0x664>
   120e4:	ldr	x2, [sp, #32]
   120e8:	ldr	x0, [sp, #32]
   120ec:	add	x0, x0, #0x20
   120f0:	mov	x1, x0
   120f4:	mov	x0, x2
   120f8:	bl	54b0 <mpfr_cmpabs@plt>
   120fc:	cmp	w0, #0x0
   12100:	b.ne	1215c <mpc_pow@@Base+0x664>  // b.any
   12104:	ldr	w0, [sp, #356]
   12108:	cmp	w0, #0x0
   1210c:	b.eq	1215c <mpc_pow@@Base+0x664>  // b.none
   12110:	ldr	x0, [sp, #24]
   12114:	bl	4f10 <mpfr_integer_p@plt>
   12118:	cmp	w0, #0x0
   1211c:	b.eq	1215c <mpc_pow@@Base+0x664>  // b.none
   12120:	ldr	x0, [sp, #24]
   12124:	mov	x1, #0x0                   	// #0
   12128:	bl	11930 <mpc_out_str@@Base+0xe8c>
   1212c:	cmp	w0, #0x0
   12130:	b.ne	1215c <mpc_pow@@Base+0x664>  // b.any
   12134:	ldr	x0, [sp, #24]
   12138:	mov	x1, #0xffffffffffffffff    	// #-1
   1213c:	bl	11930 <mpc_out_str@@Base+0xe8c>
   12140:	cmp	w0, #0x0
   12144:	b.eq	12154 <mpc_pow@@Base+0x65c>  // b.none
   12148:	mov	w0, #0x1                   	// #1
   1214c:	str	w0, [sp, #432]
   12150:	b	1215c <mpc_pow@@Base+0x664>
   12154:	mov	w0, #0x1                   	// #1
   12158:	str	w0, [sp, #436]
   1215c:	ldr	x0, [sp, #40]
   12160:	ldr	x0, [x0]
   12164:	str	x0, [sp, #304]
   12168:	ldr	x0, [sp, #40]
   1216c:	ldr	x0, [x0, #32]
   12170:	str	x0, [sp, #296]
   12174:	ldr	x0, [sp, #304]
   12178:	ldr	x2, [sp, #296]
   1217c:	ldr	x1, [sp, #296]
   12180:	cmp	x2, x0
   12184:	csel	x0, x1, x0, ge  // ge = tcont
   12188:	str	x0, [sp, #424]
   1218c:	ldr	x0, [sp, #424]
   12190:	add	x0, x0, #0xc
   12194:	str	x0, [sp, #424]
   12198:	ldr	x0, [sp, #424]
   1219c:	cmp	x0, #0x3f
   121a0:	b.gt	121ac <mpc_pow@@Base+0x6b4>
   121a4:	mov	x0, #0x40                  	// #64
   121a8:	str	x0, [sp, #424]
   121ac:	add	x0, sp, #0x58
   121b0:	ldr	x1, [sp, #424]
   121b4:	bl	4db0 <mpc_init2@plt>
   121b8:	add	x0, sp, #0x98
   121bc:	ldr	x1, [sp, #424]
   121c0:	bl	4db0 <mpc_init2@plt>
   121c4:	ldr	w0, [sp, #20]
   121c8:	and	w0, w0, #0xf
   121cc:	cmp	w0, #0x0
   121d0:	cset	w0, eq  // eq = none
   121d4:	and	w0, w0, #0xff
   121d8:	and	x0, x0, #0xff
   121dc:	ldr	x1, [sp, #304]
   121e0:	add	x0, x1, x0
   121e4:	str	x0, [sp, #304]
   121e8:	ldr	w0, [sp, #20]
   121ec:	asr	w0, w0, #4
   121f0:	cmp	w0, #0x0
   121f4:	cset	w0, eq  // eq = none
   121f8:	and	w0, w0, #0xff
   121fc:	and	x0, x0, #0xff
   12200:	ldr	x1, [sp, #296]
   12204:	add	x0, x1, x0
   12208:	str	x0, [sp, #296]
   1220c:	ldr	x0, [sp, #40]
   12210:	ldr	x1, [x0, #32]
   12214:	ldr	x0, [sp, #40]
   12218:	ldr	x0, [x0]
   1221c:	cmp	x1, x0
   12220:	csel	x0, x1, x0, ge  // ge = tcont
   12224:	str	x0, [sp, #416]
   12228:	ldr	x0, [sp, #32]
   1222c:	ldr	x1, [x0, #16]
   12230:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   12234:	cmp	x1, x0
   12238:	cset	w0, eq  // eq = none
   1223c:	and	w0, w0, #0xff
   12240:	str	w0, [sp, #292]
   12244:	str	wzr, [sp, #440]
   12248:	add	x0, sp, #0x98
   1224c:	mov	w2, #0x0                   	// #0
   12250:	ldr	x1, [sp, #32]
   12254:	bl	4e90 <mpc_log@plt>
   12258:	add	x1, sp, #0x98
   1225c:	add	x0, sp, #0x98
   12260:	mov	w3, #0x0                   	// #0
   12264:	ldr	x2, [sp, #24]
   12268:	bl	4fd0 <mpc_mul@plt>
   1226c:	ldr	x0, [sp, #168]
   12270:	mov	x1, #0x0                   	// #0
   12274:	cmp	x0, #0x0
   12278:	csel	x0, x0, x1, ge  // ge = tcont
   1227c:	str	x0, [sp, #384]
   12280:	ldr	x0, [sp, #200]
   12284:	ldr	x1, [sp, #384]
   12288:	cmp	x1, x0
   1228c:	b.ge	12298 <mpc_pow@@Base+0x7a0>  // b.tcont
   12290:	ldr	x0, [sp, #200]
   12294:	str	x0, [sp, #384]
   12298:	ldr	x1, [sp, #384]
   1229c:	ldr	x0, [sp, #424]
   122a0:	cmp	x1, x0
   122a4:	b.lt	122b8 <mpc_pow@@Base+0x7c0>  // b.tstop
   122a8:	ldr	x0, [sp, #424]
   122ac:	add	x0, x0, #0x40
   122b0:	str	x0, [sp, #424]
   122b4:	b	126a4 <mpc_pow@@Base+0xbac>
   122b8:	bl	4b20 <mpfr_clear_overflow@plt>
   122bc:	bl	4f00 <mpfr_clear_underflow@plt>
   122c0:	add	x1, sp, #0x98
   122c4:	add	x0, sp, #0x58
   122c8:	mov	w2, #0x0                   	// #0
   122cc:	bl	53a0 <mpc_exp@plt>
   122d0:	str	w0, [sp, #288]
   122d4:	bl	53f0 <mpfr_underflow_p@plt>
   122d8:	cmp	w0, #0x0
   122dc:	b.ne	122ec <mpc_pow@@Base+0x7f4>  // b.any
   122e0:	bl	55d0 <mpfr_overflow_p@plt>
   122e4:	cmp	w0, #0x0
   122e8:	b.eq	1242c <mpc_pow@@Base+0x934>  // b.none
   122ec:	add	x0, sp, #0x58
   122f0:	mov	w2, #0x0                   	// #0
   122f4:	mov	x1, x0
   122f8:	ldr	x0, [sp, #40]
   122fc:	bl	5680 <mpc_set@plt>
   12300:	ldr	w0, [sp, #288]
   12304:	str	w0, [sp, #444]
   12308:	ldr	w0, [sp, #288]
   1230c:	and	w0, w0, #0x3
   12310:	cmp	w0, #0x2
   12314:	b.eq	12330 <mpc_pow@@Base+0x838>  // b.none
   12318:	ldr	w0, [sp, #288]
   1231c:	and	w0, w0, #0x3
   12320:	cmp	w0, #0x0
   12324:	cset	w0, ne  // ne = any
   12328:	and	w0, w0, #0xff
   1232c:	b	12334 <mpc_pow@@Base+0x83c>
   12330:	mov	w0, #0xffffffff            	// #-1
   12334:	str	w0, [sp, #380]
   12338:	ldr	w0, [sp, #288]
   1233c:	asr	w0, w0, #2
   12340:	cmp	w0, #0x2
   12344:	b.eq	12360 <mpc_pow@@Base+0x868>  // b.none
   12348:	ldr	w0, [sp, #288]
   1234c:	asr	w0, w0, #2
   12350:	cmp	w0, #0x0
   12354:	cset	w0, ne  // ne = any
   12358:	and	w0, w0, #0xff
   1235c:	b	12364 <mpc_pow@@Base+0x86c>
   12360:	mov	w0, #0xffffffff            	// #-1
   12364:	str	w0, [sp, #376]
   12368:	ldr	x0, [sp, #40]
   1236c:	ldr	x1, [x0, #16]
   12370:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   12374:	cmp	x1, x0
   12378:	b.ne	12398 <mpc_pow@@Base+0x8a0>  // b.any
   1237c:	ldr	x2, [sp, #40]
   12380:	ldr	w0, [sp, #20]
   12384:	and	w0, w0, #0xf
   12388:	mov	w1, w0
   1238c:	mov	x0, x2
   12390:	bl	4eb0 <mpc_fix_inf@plt>
   12394:	str	w0, [sp, #380]
   12398:	ldr	x0, [sp, #40]
   1239c:	ldr	x1, [x0, #48]
   123a0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   123a4:	cmp	x1, x0
   123a8:	b.ne	123cc <mpc_pow@@Base+0x8d4>  // b.any
   123ac:	ldr	x0, [sp, #40]
   123b0:	add	x2, x0, #0x20
   123b4:	ldr	w0, [sp, #20]
   123b8:	asr	w0, w0, #4
   123bc:	mov	w1, w0
   123c0:	mov	x0, x2
   123c4:	bl	4eb0 <mpc_fix_inf@plt>
   123c8:	str	w0, [sp, #376]
   123cc:	ldr	w0, [sp, #380]
   123d0:	cmp	w0, #0x0
   123d4:	b.lt	123f0 <mpc_pow@@Base+0x8f8>  // b.tstop
   123d8:	ldr	w0, [sp, #380]
   123dc:	cmp	w0, #0x0
   123e0:	cset	w0, ne  // ne = any
   123e4:	and	w0, w0, #0xff
   123e8:	mov	w1, w0
   123ec:	b	123f4 <mpc_pow@@Base+0x8fc>
   123f0:	mov	w1, #0x2                   	// #2
   123f4:	ldr	w0, [sp, #376]
   123f8:	cmp	w0, #0x0
   123fc:	b.lt	1241c <mpc_pow@@Base+0x924>  // b.tstop
   12400:	ldr	w0, [sp, #376]
   12404:	cmp	w0, #0x0
   12408:	b.eq	12414 <mpc_pow@@Base+0x91c>  // b.none
   1240c:	mov	w0, #0x4                   	// #4
   12410:	b	12420 <mpc_pow@@Base+0x928>
   12414:	mov	w0, #0x0                   	// #0
   12418:	b	12420 <mpc_pow@@Base+0x928>
   1241c:	mov	w0, #0x8                   	// #8
   12420:	orr	w0, w1, w0
   12424:	str	w0, [sp, #444]
   12428:	b	12af8 <mpc_pow@@Base+0x1000>
   1242c:	ldr	x1, [sp, #104]
   12430:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   12434:	cmp	x1, x0
   12438:	b.ne	12444 <mpc_pow@@Base+0x94c>  // b.any
   1243c:	ldr	x0, [sp, #136]
   12440:	b	12448 <mpc_pow@@Base+0x950>
   12444:	ldr	x0, [sp, #104]
   12448:	str	x0, [sp, #400]
   1244c:	ldr	x1, [sp, #136]
   12450:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   12454:	cmp	x1, x0
   12458:	b.eq	12464 <mpc_pow@@Base+0x96c>  // b.none
   1245c:	ldr	x0, [sp, #136]
   12460:	b	12468 <mpc_pow@@Base+0x970>
   12464:	ldr	x0, [sp, #400]
   12468:	str	x0, [sp, #392]
   1246c:	ldr	x1, [sp, #400]
   12470:	ldr	x0, [sp, #392]
   12474:	cmp	x1, x0
   12478:	b.le	12494 <mpc_pow@@Base+0x99c>
   1247c:	ldr	x1, [sp, #400]
   12480:	ldr	x0, [sp, #392]
   12484:	sub	x0, x1, x0
   12488:	str	x0, [sp, #392]
   1248c:	str	xzr, [sp, #400]
   12490:	b	124a8 <mpc_pow@@Base+0x9b0>
   12494:	ldr	x1, [sp, #392]
   12498:	ldr	x0, [sp, #400]
   1249c:	sub	x0, x1, x0
   124a0:	str	x0, [sp, #400]
   124a4:	str	xzr, [sp, #392]
   124a8:	ldr	w0, [sp, #432]
   124ac:	cmp	w0, #0x0
   124b0:	b.ne	12504 <mpc_pow@@Base+0xa0c>  // b.any
   124b4:	ldr	x0, [sp, #384]
   124b8:	add	x1, x0, #0x3
   124bc:	ldr	x0, [sp, #400]
   124c0:	add	x0, x1, x0
   124c4:	ldr	x1, [sp, #424]
   124c8:	cmp	x1, x0
   124cc:	b.le	12564 <mpc_pow@@Base+0xa6c>
   124d0:	ldr	x1, [sp, #424]
   124d4:	ldr	x0, [sp, #384]
   124d8:	sub	x0, x1, x0
   124dc:	sub	x1, x0, #0x3
   124e0:	ldr	x0, [sp, #400]
   124e4:	sub	x1, x1, x0
   124e8:	add	x0, sp, #0x58
   124ec:	ldr	x4, [sp, #304]
   124f0:	mov	w3, #0x1                   	// #1
   124f4:	mov	w2, #0x0                   	// #0
   124f8:	bl	5540 <mpfr_can_round@plt>
   124fc:	cmp	w0, #0x0
   12500:	b.eq	12564 <mpc_pow@@Base+0xa6c>  // b.none
   12504:	ldr	w0, [sp, #436]
   12508:	cmp	w0, #0x0
   1250c:	b.ne	126cc <mpc_pow@@Base+0xbd4>  // b.any
   12510:	ldr	x0, [sp, #384]
   12514:	add	x1, x0, #0x3
   12518:	ldr	x0, [sp, #392]
   1251c:	add	x0, x1, x0
   12520:	ldr	x1, [sp, #424]
   12524:	cmp	x1, x0
   12528:	b.le	12564 <mpc_pow@@Base+0xa6c>
   1252c:	ldr	x1, [sp, #424]
   12530:	ldr	x0, [sp, #384]
   12534:	sub	x0, x1, x0
   12538:	sub	x1, x0, #0x3
   1253c:	ldr	x0, [sp, #392]
   12540:	sub	x1, x1, x0
   12544:	add	x0, sp, #0x58
   12548:	add	x0, x0, #0x20
   1254c:	ldr	x4, [sp, #296]
   12550:	mov	w3, #0x1                   	// #1
   12554:	mov	w2, #0x0                   	// #0
   12558:	bl	5540 <mpfr_can_round@plt>
   1255c:	cmp	w0, #0x0
   12560:	b.ne	126cc <mpc_pow@@Base+0xbd4>  // b.any
   12564:	ldr	w0, [sp, #432]
   12568:	cmp	w0, #0x0
   1256c:	b.ne	125b4 <mpc_pow@@Base+0xabc>  // b.any
   12570:	add	x0, sp, #0x58
   12574:	bl	55c0 <mpfr_number_p@plt>
   12578:	cmp	w0, #0x0
   1257c:	b.ne	125b4 <mpc_pow@@Base+0xabc>  // b.any
   12580:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   12584:	ldr	x0, [x0, #4008]
   12588:	ldr	x5, [x0]
   1258c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   12590:	add	x4, x0, #0x1e8
   12594:	mov	w3, #0x2d6                 	// #726
   12598:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   1259c:	add	x2, x0, #0x178
   125a0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   125a4:	add	x1, x0, #0x180
   125a8:	mov	x0, x5
   125ac:	bl	56a0 <fprintf@plt>
   125b0:	bl	5100 <abort@plt>
   125b4:	ldr	w0, [sp, #436]
   125b8:	cmp	w0, #0x0
   125bc:	b.ne	12608 <mpc_pow@@Base+0xb10>  // b.any
   125c0:	add	x0, sp, #0x58
   125c4:	add	x0, x0, #0x20
   125c8:	bl	55c0 <mpfr_number_p@plt>
   125cc:	cmp	w0, #0x0
   125d0:	b.ne	12608 <mpc_pow@@Base+0xb10>  // b.any
   125d4:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   125d8:	ldr	x0, [x0, #4008]
   125dc:	ldr	x5, [x0]
   125e0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   125e4:	add	x4, x0, #0x218
   125e8:	mov	w3, #0x2d8                 	// #728
   125ec:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   125f0:	add	x2, x0, #0x178
   125f4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   125f8:	add	x1, x0, #0x180
   125fc:	mov	x0, x5
   12600:	bl	56a0 <fprintf@plt>
   12604:	bl	5100 <abort@plt>
   12608:	ldr	w0, [sp, #444]
   1260c:	cmn	w0, #0x2
   12610:	b.ne	12684 <mpc_pow@@Base+0xb8c>  // b.any
   12614:	ldr	w0, [sp, #356]
   12618:	cmp	w0, #0x0
   1261c:	b.eq	12664 <mpc_pow@@Base+0xb6c>  // b.none
   12620:	ldr	x0, [sp, #416]
   12624:	lsl	x0, x0, #1
   12628:	str	x0, [sp, #416]
   1262c:	ldr	x0, [sp, #24]
   12630:	ldr	x4, [sp, #416]
   12634:	ldr	w3, [sp, #20]
   12638:	mov	x2, x0
   1263c:	ldr	x1, [sp, #32]
   12640:	ldr	x0, [sp, #40]
   12644:	bl	10f88 <mpc_out_str@@Base+0x4e4>
   12648:	str	w0, [sp, #444]
   1264c:	ldr	w0, [sp, #444]
   12650:	cmn	w0, #0x1
   12654:	b.eq	12664 <mpc_pow@@Base+0xb6c>  // b.none
   12658:	ldr	w0, [sp, #444]
   1265c:	cmn	w0, #0x2
   12660:	b.ne	12af4 <mpc_pow@@Base+0xffc>  // b.any
   12664:	ldr	x1, [sp, #400]
   12668:	ldr	x0, [sp, #392]
   1266c:	add	x0, x1, x0
   12670:	add	x0, x0, #0x40
   12674:	ldr	x1, [sp, #424]
   12678:	add	x0, x1, x0
   1267c:	str	x0, [sp, #424]
   12680:	b	126a4 <mpc_pow@@Base+0xbac>
   12684:	ldr	x0, [sp, #424]
   12688:	lsr	x1, x0, #63
   1268c:	add	x0, x1, x0
   12690:	asr	x0, x0, #1
   12694:	mov	x1, x0
   12698:	ldr	x0, [sp, #424]
   1269c:	add	x0, x0, x1
   126a0:	str	x0, [sp, #424]
   126a4:	add	x0, sp, #0x98
   126a8:	ldr	x1, [sp, #424]
   126ac:	bl	4cd0 <mpc_set_prec@plt>
   126b0:	add	x0, sp, #0x58
   126b4:	ldr	x1, [sp, #424]
   126b8:	bl	4cd0 <mpc_set_prec@plt>
   126bc:	ldr	w0, [sp, #440]
   126c0:	add	w0, w0, #0x1
   126c4:	str	w0, [sp, #440]
   126c8:	b	12248 <mpc_pow@@Base+0x750>
   126cc:	ldr	w0, [sp, #436]
   126d0:	cmp	w0, #0x0
   126d4:	b.eq	12974 <mpc_pow@@Base+0xe7c>  // b.none
   126d8:	ldr	x0, [sp, #32]
   126dc:	ldr	w0, [x0, #8]
   126e0:	lsr	w0, w0, #31
   126e4:	and	w0, w0, #0xff
   126e8:	str	w0, [sp, #252]
   126ec:	ldr	x0, [sp, #32]
   126f0:	ldr	w0, [x0, #40]
   126f4:	lsr	w0, w0, #31
   126f8:	and	w0, w0, #0xff
   126fc:	str	w0, [sp, #248]
   12700:	add	x0, sp, #0x38
   12704:	bl	4b70 <mpfr_init@plt>
   12708:	add	x0, sp, #0x38
   1270c:	mov	w2, #0x0                   	// #0
   12710:	ldr	x1, [sp, #32]
   12714:	bl	4f90 <mpc_norm@plt>
   12718:	str	w0, [sp, #244]
   1271c:	add	x0, sp, #0x38
   12720:	mov	x2, #0x0                   	// #0
   12724:	mov	x1, #0x1                   	// #1
   12728:	bl	4d70 <mpfr_cmp_ui_2exp@plt>
   1272c:	str	w0, [sp, #372]
   12730:	ldr	w0, [sp, #372]
   12734:	cmp	w0, #0x0
   12738:	b.ne	12754 <mpc_pow@@Base+0xc5c>  // b.any
   1273c:	ldr	w0, [sp, #244]
   12740:	cmp	w0, #0x0
   12744:	b.eq	12754 <mpc_pow@@Base+0xc5c>  // b.none
   12748:	ldr	w0, [sp, #244]
   1274c:	neg	w0, w0
   12750:	str	w0, [sp, #372]
   12754:	ldr	w0, [sp, #372]
   12758:	cmp	w0, #0x0
   1275c:	b.ge	12770 <mpc_pow@@Base+0xc78>  // b.tcont
   12760:	ldr	x0, [sp, #24]
   12764:	ldr	w0, [x0, #40]
   12768:	cmp	w0, #0x0
   1276c:	b.ge	127b8 <mpc_pow@@Base+0xcc0>  // b.tcont
   12770:	ldr	w0, [sp, #372]
   12774:	cmp	w0, #0x0
   12778:	b.ne	1279c <mpc_pow@@Base+0xca4>  // b.any
   1277c:	ldr	x0, [sp, #24]
   12780:	ldr	w0, [x0, #8]
   12784:	lsr	w0, w0, #31
   12788:	and	w0, w0, #0xff
   1278c:	mov	w1, w0
   12790:	ldr	w0, [sp, #248]
   12794:	cmp	w0, w1
   12798:	b.ne	127b8 <mpc_pow@@Base+0xcc0>  // b.any
   1279c:	ldr	w0, [sp, #372]
   127a0:	cmp	w0, #0x0
   127a4:	b.le	127c0 <mpc_pow@@Base+0xcc8>
   127a8:	ldr	x0, [sp, #24]
   127ac:	ldr	w0, [x0, #40]
   127b0:	cmp	w0, #0x0
   127b4:	b.ge	127c0 <mpc_pow@@Base+0xcc8>  // b.tcont
   127b8:	mov	w0, #0x1                   	// #1
   127bc:	b	127c4 <mpc_pow@@Base+0xccc>
   127c0:	mov	w0, #0x0                   	// #0
   127c4:	str	w0, [sp, #240]
   127c8:	ldr	x0, [sp, #24]
   127cc:	ldr	x1, [x0]
   127d0:	add	x0, sp, #0x38
   127d4:	bl	4d40 <mpfr_set_prec@plt>
   127d8:	ldr	x1, [sp, #24]
   127dc:	ldr	x0, [sp, #24]
   127e0:	ldr	w2, [x0, #8]
   127e4:	add	x0, sp, #0x38
   127e8:	mov	w3, w2
   127ec:	mov	w2, #0x0                   	// #0
   127f0:	bl	52d0 <mpfr_set4@plt>
   127f4:	ldr	x4, [sp, #40]
   127f8:	ldr	w0, [sp, #20]
   127fc:	and	w1, w0, #0xf
   12800:	ldr	w2, [sp, #96]
   12804:	add	x0, sp, #0x58
   12808:	mov	w3, w2
   1280c:	mov	w2, w1
   12810:	mov	x1, x0
   12814:	mov	x0, x4
   12818:	bl	52d0 <mpfr_set4@plt>
   1281c:	str	w0, [sp, #444]
   12820:	ldr	w0, [sp, #356]
   12824:	cmp	w0, #0x0
   12828:	b.eq	128ac <mpc_pow@@Base+0xdb4>  // b.none
   1282c:	ldr	w0, [sp, #360]
   12830:	cmp	w0, #0x0
   12834:	b.ne	12844 <mpc_pow@@Base+0xd4c>  // b.any
   12838:	ldr	w0, [sp, #292]
   1283c:	cmp	w0, #0x0
   12840:	b.eq	128ac <mpc_pow@@Base+0xdb4>  // b.none
   12844:	ldr	x0, [sp, #40]
   12848:	add	x0, x0, #0x20
   1284c:	str	x0, [sp, #232]
   12850:	ldr	x0, [sp, #232]
   12854:	mov	w1, #0x1                   	// #1
   12858:	str	w1, [x0, #8]
   1285c:	ldr	x0, [sp, #232]
   12860:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   12864:	str	x1, [x0, #16]
   12868:	add	x0, sp, #0x38
   1286c:	mov	x3, x0
   12870:	ldr	w2, [sp, #248]
   12874:	ldr	w1, [sp, #252]
   12878:	ldr	x0, [sp, #40]
   1287c:	bl	10d14 <mpc_out_str@@Base+0x270>
   12880:	ldr	w0, [sp, #444]
   12884:	cmp	w0, #0x0
   12888:	b.lt	128a0 <mpc_pow@@Base+0xda8>  // b.tstop
   1288c:	ldr	w0, [sp, #444]
   12890:	cmp	w0, #0x0
   12894:	cset	w0, ne  // ne = any
   12898:	and	w0, w0, #0xff
   1289c:	b	128a4 <mpc_pow@@Base+0xdac>
   128a0:	mov	w0, #0x2                   	// #2
   128a4:	str	w0, [sp, #444]
   128a8:	b	12968 <mpc_pow@@Base+0xe70>
   128ac:	ldr	w0, [sp, #444]
   128b0:	cmp	w0, #0x0
   128b4:	b.lt	128d0 <mpc_pow@@Base+0xdd8>  // b.tstop
   128b8:	ldr	w0, [sp, #444]
   128bc:	cmp	w0, #0x0
   128c0:	cset	w0, ne  // ne = any
   128c4:	and	w0, w0, #0xff
   128c8:	mov	w1, w0
   128cc:	b	128d4 <mpc_pow@@Base+0xddc>
   128d0:	mov	w1, #0x2                   	// #2
   128d4:	ldr	x0, [sp, #40]
   128d8:	add	x0, x0, #0x20
   128dc:	str	x0, [sp, #224]
   128e0:	ldr	x0, [sp, #224]
   128e4:	mov	w2, #0x1                   	// #1
   128e8:	str	w2, [x0, #8]
   128ec:	ldr	x0, [sp, #224]
   128f0:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
   128f4:	str	x2, [x0, #16]
   128f8:	ldr	x0, [sp, #40]
   128fc:	add	x0, x0, #0x20
   12900:	str	x0, [sp, #216]
   12904:	ldr	x0, [sp, #216]
   12908:	mov	w2, #0x1                   	// #1
   1290c:	str	w2, [x0, #8]
   12910:	ldr	x0, [sp, #216]
   12914:	mov	x2, #0x8000000000000001    	// #-9223372036854775807
   12918:	str	x2, [x0, #16]
   1291c:	mov	w0, #0x0                   	// #0
   12920:	cmp	w0, #0x0
   12924:	b.eq	12930 <mpc_pow@@Base+0xe38>  // b.none
   12928:	mov	w0, #0x4                   	// #4
   1292c:	b	12934 <mpc_pow@@Base+0xe3c>
   12930:	mov	w0, #0x0                   	// #0
   12934:	orr	w0, w1, w0
   12938:	str	w0, [sp, #444]
   1293c:	ldr	w0, [sp, #20]
   12940:	asr	w0, w0, #4
   12944:	cmp	w0, #0x3
   12948:	b.eq	12958 <mpc_pow@@Base+0xe60>  // b.none
   1294c:	ldr	w0, [sp, #240]
   12950:	cmp	w0, #0x0
   12954:	b.eq	12968 <mpc_pow@@Base+0xe70>  // b.none
   12958:	mov	w2, #0x0                   	// #0
   1295c:	ldr	x1, [sp, #40]
   12960:	ldr	x0, [sp, #40]
   12964:	bl	5060 <mpc_conj@plt>
   12968:	add	x0, sp, #0x38
   1296c:	bl	4e30 <mpfr_clear@plt>
   12970:	b	12af8 <mpc_pow@@Base+0x1000>
   12974:	ldr	w0, [sp, #432]
   12978:	cmp	w0, #0x0
   1297c:	b.eq	12ad8 <mpc_pow@@Base+0xfe0>  // b.none
   12980:	ldr	x0, [sp, #40]
   12984:	add	x4, x0, #0x20
   12988:	ldr	w0, [sp, #20]
   1298c:	asr	w1, w0, #4
   12990:	ldr	w2, [sp, #128]
   12994:	add	x0, sp, #0x58
   12998:	add	x0, x0, #0x20
   1299c:	mov	w3, w2
   129a0:	mov	w2, w1
   129a4:	mov	x1, x0
   129a8:	mov	x0, x4
   129ac:	bl	52d0 <mpfr_set4@plt>
   129b0:	str	w0, [sp, #444]
   129b4:	ldr	w0, [sp, #356]
   129b8:	cmp	w0, #0x0
   129bc:	b.eq	12a4c <mpc_pow@@Base+0xf54>  // b.none
   129c0:	ldr	w0, [sp, #292]
   129c4:	cmp	w0, #0x0
   129c8:	b.eq	12a4c <mpc_pow@@Base+0xf54>  // b.none
   129cc:	ldr	x0, [sp, #32]
   129d0:	ldr	w0, [x0, #8]
   129d4:	lsr	w0, w0, #31
   129d8:	and	w0, w0, #0xff
   129dc:	str	w0, [sp, #284]
   129e0:	ldr	x0, [sp, #40]
   129e4:	str	x0, [sp, #272]
   129e8:	ldr	x0, [sp, #272]
   129ec:	mov	w1, #0x1                   	// #1
   129f0:	str	w1, [x0, #8]
   129f4:	ldr	x0, [sp, #272]
   129f8:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   129fc:	str	x1, [x0, #16]
   12a00:	ldr	x0, [sp, #24]
   12a04:	mov	x3, x0
   12a08:	mov	w2, #0x0                   	// #0
   12a0c:	ldr	w1, [sp, #284]
   12a10:	ldr	x0, [sp, #40]
   12a14:	bl	10d14 <mpc_out_str@@Base+0x270>
   12a18:	ldr	w0, [sp, #444]
   12a1c:	cmp	w0, #0x0
   12a20:	b.lt	12a40 <mpc_pow@@Base+0xf48>  // b.tstop
   12a24:	ldr	w0, [sp, #444]
   12a28:	cmp	w0, #0x0
   12a2c:	b.eq	12a38 <mpc_pow@@Base+0xf40>  // b.none
   12a30:	mov	w0, #0x4                   	// #4
   12a34:	b	12a44 <mpc_pow@@Base+0xf4c>
   12a38:	mov	w0, #0x0                   	// #0
   12a3c:	b	12a44 <mpc_pow@@Base+0xf4c>
   12a40:	mov	w0, #0x8                   	// #8
   12a44:	str	w0, [sp, #444]
   12a48:	b	12af8 <mpc_pow@@Base+0x1000>
   12a4c:	ldr	x0, [sp, #40]
   12a50:	str	x0, [sp, #264]
   12a54:	ldr	x0, [sp, #264]
   12a58:	mov	w1, #0x1                   	// #1
   12a5c:	str	w1, [x0, #8]
   12a60:	ldr	x0, [sp, #264]
   12a64:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   12a68:	str	x1, [x0, #16]
   12a6c:	ldr	x0, [sp, #40]
   12a70:	str	x0, [sp, #256]
   12a74:	ldr	x0, [sp, #256]
   12a78:	mov	w1, #0x1                   	// #1
   12a7c:	str	w1, [x0, #8]
   12a80:	ldr	x0, [sp, #256]
   12a84:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   12a88:	str	x1, [x0, #16]
   12a8c:	mov	w0, #0x0                   	// #0
   12a90:	cmp	w0, #0x0
   12a94:	cset	w0, ne  // ne = any
   12a98:	and	w0, w0, #0xff
   12a9c:	mov	w1, w0
   12aa0:	ldr	w0, [sp, #444]
   12aa4:	cmp	w0, #0x0
   12aa8:	b.lt	12ac8 <mpc_pow@@Base+0xfd0>  // b.tstop
   12aac:	ldr	w0, [sp, #444]
   12ab0:	cmp	w0, #0x0
   12ab4:	b.eq	12ac0 <mpc_pow@@Base+0xfc8>  // b.none
   12ab8:	mov	w0, #0x4                   	// #4
   12abc:	b	12acc <mpc_pow@@Base+0xfd4>
   12ac0:	mov	w0, #0x0                   	// #0
   12ac4:	b	12acc <mpc_pow@@Base+0xfd4>
   12ac8:	mov	w0, #0x8                   	// #8
   12acc:	orr	w0, w1, w0
   12ad0:	str	w0, [sp, #444]
   12ad4:	b	12af8 <mpc_pow@@Base+0x1000>
   12ad8:	add	x0, sp, #0x58
   12adc:	ldr	w2, [sp, #20]
   12ae0:	mov	x1, x0
   12ae4:	ldr	x0, [sp, #40]
   12ae8:	bl	5680 <mpc_set@plt>
   12aec:	str	w0, [sp, #444]
   12af0:	b	12af8 <mpc_pow@@Base+0x1000>
   12af4:	nop
   12af8:	add	x0, sp, #0x98
   12afc:	bl	4ae0 <mpc_clear@plt>
   12b00:	add	x0, sp, #0x58
   12b04:	bl	4ae0 <mpc_clear@plt>
   12b08:	ldr	w0, [sp, #368]
   12b0c:	cmp	w0, #0x0
   12b10:	b.eq	12b18 <mpc_pow@@Base+0x1020>  // b.none
   12b14:	bl	4a60 <mpfr_set_underflow@plt>
   12b18:	ldr	w0, [sp, #364]
   12b1c:	cmp	w0, #0x0
   12b20:	b.eq	12b3c <mpc_pow@@Base+0x1044>  // b.none
   12b24:	bl	5580 <mpfr_set_overflow@plt>
   12b28:	b	12b40 <mpc_pow@@Base+0x1048>
   12b2c:	nop
   12b30:	b	12b40 <mpc_pow@@Base+0x1048>
   12b34:	nop
   12b38:	b	12b40 <mpc_pow@@Base+0x1048>
   12b3c:	nop
   12b40:	ldr	w0, [sp, #444]
   12b44:	ldp	x29, x30, [sp], #448
   12b48:	ret

0000000000012b4c <mpc_pow_fr@@Base>:
   12b4c:	stp	x29, x30, [sp, #-128]!
   12b50:	mov	x29, sp
   12b54:	str	x0, [sp, #40]
   12b58:	str	x1, [sp, #32]
   12b5c:	str	x2, [sp, #24]
   12b60:	str	w3, [sp, #20]
   12b64:	ldr	x0, [sp, #24]
   12b68:	add	x2, sp, #0x30
   12b6c:	mov	x3, x0
   12b70:	ldp	x0, x1, [x3]
   12b74:	stp	x0, x1, [x2]
   12b78:	ldp	x0, x1, [x3, #16]
   12b7c:	stp	x0, x1, [x2, #16]
   12b80:	add	x0, sp, #0x30
   12b84:	add	x0, x0, #0x20
   12b88:	mov	x1, #0x1                   	// #1
   12b8c:	bl	5530 <mpfr_init2@plt>
   12b90:	add	x0, sp, #0x30
   12b94:	add	x0, x0, #0x20
   12b98:	str	x0, [sp, #120]
   12b9c:	ldr	x0, [sp, #120]
   12ba0:	mov	w1, #0x1                   	// #1
   12ba4:	str	w1, [x0, #8]
   12ba8:	ldr	x0, [sp, #120]
   12bac:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   12bb0:	str	x1, [x0, #16]
   12bb4:	add	x0, sp, #0x30
   12bb8:	ldr	w3, [sp, #20]
   12bbc:	mov	x2, x0
   12bc0:	ldr	x1, [sp, #32]
   12bc4:	ldr	x0, [sp, #40]
   12bc8:	bl	5340 <mpc_pow@plt>
   12bcc:	str	w0, [sp, #116]
   12bd0:	add	x0, sp, #0x30
   12bd4:	add	x0, x0, #0x20
   12bd8:	bl	4e30 <mpfr_clear@plt>
   12bdc:	ldr	w0, [sp, #116]
   12be0:	ldp	x29, x30, [sp], #128
   12be4:	ret

0000000000012be8 <mpc_pow_ld@@Base>:
   12be8:	stp	x29, x30, [sp, #-144]!
   12bec:	mov	x29, sp
   12bf0:	str	x0, [sp, #56]
   12bf4:	str	x1, [sp, #48]
   12bf8:	str	q0, [sp, #32]
   12bfc:	str	w2, [sp, #28]
   12c00:	add	x0, sp, #0x48
   12c04:	mov	x2, #0x1                   	// #1
   12c08:	mov	x1, #0x71                  	// #113
   12c0c:	bl	54c0 <mpc_init3@plt>
   12c10:	add	x0, sp, #0x48
   12c14:	mov	w1, #0x0                   	// #0
   12c18:	ldr	q0, [sp, #32]
   12c1c:	bl	4f40 <mpc_set_ld@plt>
   12c20:	add	x0, sp, #0x48
   12c24:	ldr	w3, [sp, #28]
   12c28:	mov	x2, x0
   12c2c:	ldr	x1, [sp, #48]
   12c30:	ldr	x0, [sp, #56]
   12c34:	bl	5340 <mpc_pow@plt>
   12c38:	str	w0, [sp, #140]
   12c3c:	add	x0, sp, #0x48
   12c40:	bl	4ae0 <mpc_clear@plt>
   12c44:	ldr	w0, [sp, #140]
   12c48:	ldp	x29, x30, [sp], #144
   12c4c:	ret

0000000000012c50 <mpc_pow_d@@Base>:
   12c50:	stp	x29, x30, [sp, #-128]!
   12c54:	mov	x29, sp
   12c58:	str	x0, [sp, #40]
   12c5c:	str	x1, [sp, #32]
   12c60:	str	d0, [sp, #24]
   12c64:	str	w2, [sp, #20]
   12c68:	add	x0, sp, #0x38
   12c6c:	mov	x2, #0x1                   	// #1
   12c70:	mov	x1, #0x35                  	// #53
   12c74:	bl	54c0 <mpc_init3@plt>
   12c78:	add	x0, sp, #0x38
   12c7c:	mov	w1, #0x0                   	// #0
   12c80:	ldr	d0, [sp, #24]
   12c84:	bl	5550 <mpc_set_d@plt>
   12c88:	add	x0, sp, #0x38
   12c8c:	ldr	w3, [sp, #20]
   12c90:	mov	x2, x0
   12c94:	ldr	x1, [sp, #32]
   12c98:	ldr	x0, [sp, #40]
   12c9c:	bl	5340 <mpc_pow@plt>
   12ca0:	str	w0, [sp, #124]
   12ca4:	add	x0, sp, #0x38
   12ca8:	bl	4ae0 <mpc_clear@plt>
   12cac:	ldr	w0, [sp, #124]
   12cb0:	ldp	x29, x30, [sp], #128
   12cb4:	ret

0000000000012cb8 <mpc_pow_si@@Base>:
   12cb8:	stp	x29, x30, [sp, #-48]!
   12cbc:	mov	x29, sp
   12cc0:	str	x0, [sp, #40]
   12cc4:	str	x1, [sp, #32]
   12cc8:	str	x2, [sp, #24]
   12ccc:	str	w3, [sp, #20]
   12cd0:	ldr	x0, [sp, #24]
   12cd4:	cmp	x0, #0x0
   12cd8:	b.lt	12cfc <mpc_pow_si@@Base+0x44>  // b.tstop
   12cdc:	ldr	x0, [sp, #24]
   12ce0:	ldr	w4, [sp, #20]
   12ce4:	mov	w3, #0x1                   	// #1
   12ce8:	mov	x2, x0
   12cec:	ldr	x1, [sp, #32]
   12cf0:	ldr	x0, [sp, #40]
   12cf4:	bl	4ed0 <mpc_pow_usi@plt>
   12cf8:	b	12d1c <mpc_pow_si@@Base+0x64>
   12cfc:	ldr	x0, [sp, #24]
   12d00:	neg	x0, x0
   12d04:	ldr	w4, [sp, #20]
   12d08:	mov	w3, #0xffffffff            	// #-1
   12d0c:	mov	x2, x0
   12d10:	ldr	x1, [sp, #32]
   12d14:	ldr	x0, [sp, #40]
   12d18:	bl	4ed0 <mpc_pow_usi@plt>
   12d1c:	ldp	x29, x30, [sp], #48
   12d20:	ret
   12d24:	stp	x29, x30, [sp, #-128]!
   12d28:	mov	x29, sp
   12d2c:	str	x0, [sp, #40]
   12d30:	str	x1, [sp, #32]
   12d34:	str	x2, [sp, #24]
   12d38:	str	w3, [sp, #20]
   12d3c:	str	w4, [sp, #16]
   12d40:	add	x0, sp, #0x38
   12d44:	mov	x2, #0x1                   	// #1
   12d48:	mov	x1, #0x40                  	// #64
   12d4c:	bl	54c0 <mpc_init3@plt>
   12d50:	ldr	w0, [sp, #20]
   12d54:	cmp	w0, #0x0
   12d58:	b.le	12d70 <mpc_pow_si@@Base+0xb8>
   12d5c:	add	x0, sp, #0x38
   12d60:	mov	w2, #0x0                   	// #0
   12d64:	ldr	x1, [sp, #24]
   12d68:	bl	4da0 <mpc_set_ui@plt>
   12d6c:	b	12d84 <mpc_pow_si@@Base+0xcc>
   12d70:	ldr	x0, [sp, #24]
   12d74:	neg	x1, x0
   12d78:	add	x0, sp, #0x38
   12d7c:	mov	w2, #0x0                   	// #0
   12d80:	bl	5120 <mpc_set_si@plt>
   12d84:	add	x0, sp, #0x38
   12d88:	ldr	w3, [sp, #16]
   12d8c:	mov	x2, x0
   12d90:	ldr	x1, [sp, #32]
   12d94:	ldr	x0, [sp, #40]
   12d98:	bl	5340 <mpc_pow@plt>
   12d9c:	str	w0, [sp, #124]
   12da0:	add	x0, sp, #0x38
   12da4:	bl	4ae0 <mpc_clear@plt>
   12da8:	ldr	w0, [sp, #124]
   12dac:	ldp	x29, x30, [sp], #128
   12db0:	ret

0000000000012db4 <mpc_pow_usi@@Base>:
   12db4:	stp	x29, x30, [sp, #-288]!
   12db8:	mov	x29, sp
   12dbc:	str	x19, [sp, #16]
   12dc0:	str	x0, [sp, #56]
   12dc4:	str	x1, [sp, #48]
   12dc8:	str	x2, [sp, #40]
   12dcc:	str	w3, [sp, #36]
   12dd0:	str	w4, [sp, #32]
   12dd4:	ldr	x0, [sp, #48]
   12dd8:	bl	55c0 <mpfr_number_p@plt>
   12ddc:	cmp	w0, #0x0
   12de0:	b.eq	12e2c <mpc_pow_usi@@Base+0x78>  // b.none
   12de4:	ldr	x0, [sp, #48]
   12de8:	add	x0, x0, #0x20
   12dec:	bl	55c0 <mpfr_number_p@plt>
   12df0:	cmp	w0, #0x0
   12df4:	b.eq	12e2c <mpc_pow_usi@@Base+0x78>  // b.none
   12df8:	ldr	x0, [sp, #48]
   12dfc:	ldr	x1, [x0, #16]
   12e00:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   12e04:	cmp	x1, x0
   12e08:	b.eq	12e2c <mpc_pow_usi@@Base+0x78>  // b.none
   12e0c:	ldr	x0, [sp, #48]
   12e10:	ldr	x1, [x0, #48]
   12e14:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   12e18:	cmp	x1, x0
   12e1c:	b.eq	12e2c <mpc_pow_usi@@Base+0x78>  // b.none
   12e20:	ldr	x0, [sp, #40]
   12e24:	cmp	x0, #0x0
   12e28:	b.ne	12e48 <mpc_pow_usi@@Base+0x94>  // b.any
   12e2c:	ldr	w4, [sp, #32]
   12e30:	ldr	w3, [sp, #36]
   12e34:	ldr	x2, [sp, #40]
   12e38:	ldr	x1, [sp, #48]
   12e3c:	ldr	x0, [sp, #56]
   12e40:	bl	12d24 <mpc_pow_si@@Base+0x6c>
   12e44:	b	133a4 <mpc_pow_usi@@Base+0x5f0>
   12e48:	ldr	x0, [sp, #40]
   12e4c:	cmp	x0, #0x1
   12e50:	b.ne	12e8c <mpc_pow_usi@@Base+0xd8>  // b.any
   12e54:	ldr	w0, [sp, #36]
   12e58:	cmp	w0, #0x0
   12e5c:	b.le	12e74 <mpc_pow_usi@@Base+0xc0>
   12e60:	ldr	w2, [sp, #32]
   12e64:	ldr	x1, [sp, #48]
   12e68:	ldr	x0, [sp, #56]
   12e6c:	bl	5680 <mpc_set@plt>
   12e70:	b	133a4 <mpc_pow_usi@@Base+0x5f0>
   12e74:	ldr	w3, [sp, #32]
   12e78:	ldr	x2, [sp, #48]
   12e7c:	mov	x1, #0x1                   	// #1
   12e80:	ldr	x0, [sp, #56]
   12e84:	bl	56b0 <mpc_ui_div@plt>
   12e88:	b	133a4 <mpc_pow_usi@@Base+0x5f0>
   12e8c:	ldr	x0, [sp, #40]
   12e90:	cmp	x0, #0x2
   12e94:	b.ne	12eb8 <mpc_pow_usi@@Base+0x104>  // b.any
   12e98:	ldr	w0, [sp, #36]
   12e9c:	cmp	w0, #0x0
   12ea0:	b.le	12eb8 <mpc_pow_usi@@Base+0x104>
   12ea4:	ldr	w2, [sp, #32]
   12ea8:	ldr	x1, [sp, #48]
   12eac:	ldr	x0, [sp, #56]
   12eb0:	bl	5030 <mpc_sqr@plt>
   12eb4:	b	133a4 <mpc_pow_usi@@Base+0x5f0>
   12eb8:	ldr	x0, [sp, #48]
   12ebc:	ldr	x0, [x0, #16]
   12ec0:	str	x0, [sp, #240]
   12ec4:	ldr	x0, [sp, #48]
   12ec8:	ldr	x0, [x0, #48]
   12ecc:	str	x0, [sp, #232]
   12ed0:	ldr	x0, [sp, #240]
   12ed4:	ldr	x2, [sp, #232]
   12ed8:	ldr	x1, [sp, #232]
   12edc:	cmp	x2, x0
   12ee0:	csel	x19, x1, x0, ge  // ge = tcont
   12ee4:	bl	5300 <mpfr_get_emax@plt>
   12ee8:	mov	x1, x0
   12eec:	ldr	x0, [sp, #40]
   12ef0:	sdiv	x0, x1, x0
   12ef4:	cmp	x19, x0
   12ef8:	b.gt	12f38 <mpc_pow_usi@@Base+0x184>
   12efc:	ldr	x1, [sp, #240]
   12f00:	ldr	x0, [sp, #232]
   12f04:	cmp	x1, x0
   12f08:	b.ge	12f18 <mpc_pow_usi@@Base+0x164>  // b.tcont
   12f0c:	ldr	x0, [sp, #240]
   12f10:	neg	x19, x0
   12f14:	b	12f20 <mpc_pow_usi@@Base+0x16c>
   12f18:	ldr	x0, [sp, #232]
   12f1c:	neg	x19, x0
   12f20:	bl	5160 <mpfr_get_emin@plt>
   12f24:	neg	x1, x0
   12f28:	ldr	x0, [sp, #40]
   12f2c:	sdiv	x0, x1, x0
   12f30:	cmp	x19, x0
   12f34:	b.le	12f54 <mpc_pow_usi@@Base+0x1a0>
   12f38:	ldr	w4, [sp, #32]
   12f3c:	ldr	w3, [sp, #36]
   12f40:	ldr	x2, [sp, #40]
   12f44:	ldr	x1, [sp, #48]
   12f48:	ldr	x0, [sp, #56]
   12f4c:	bl	12d24 <mpc_pow_si@@Base+0x6c>
   12f50:	b	133a4 <mpc_pow_usi@@Base+0x5f0>
   12f54:	ldr	x0, [sp, #40]
   12f58:	lsr	x1, x0, #1
   12f5c:	ldr	x0, [sp, #40]
   12f60:	and	x0, x1, x0
   12f64:	cmp	x0, #0x0
   12f68:	cset	w0, ne  // ne = any
   12f6c:	and	w0, w0, #0xff
   12f70:	str	w0, [sp, #228]
   12f74:	str	xzr, [sp, #264]
   12f78:	ldr	x0, [sp, #40]
   12f7c:	str	x0, [sp, #256]
   12f80:	b	12f9c <mpc_pow_usi@@Base+0x1e8>
   12f84:	ldr	x0, [sp, #264]
   12f88:	add	x0, x0, #0x1
   12f8c:	str	x0, [sp, #264]
   12f90:	ldr	x0, [sp, #256]
   12f94:	lsr	x0, x0, #1
   12f98:	str	x0, [sp, #256]
   12f9c:	ldr	x0, [sp, #256]
   12fa0:	cmp	x0, #0x3
   12fa4:	b.hi	12f84 <mpc_pow_usi@@Base+0x1d0>  // b.pmore
   12fa8:	ldr	x0, [sp, #264]
   12fac:	add	x0, x0, #0x2
   12fb0:	str	x0, [sp, #216]
   12fb4:	ldr	x0, [sp, #56]
   12fb8:	ldr	x1, [x0, #32]
   12fbc:	ldr	x0, [sp, #56]
   12fc0:	ldr	x0, [x0]
   12fc4:	cmp	x1, x0
   12fc8:	csel	x1, x1, x0, ge  // ge = tcont
   12fcc:	ldr	x0, [sp, #216]
   12fd0:	add	x0, x1, x0
   12fd4:	add	x0, x0, #0x20
   12fd8:	str	x0, [sp, #272]
   12fdc:	add	x0, sp, #0x80
   12fe0:	ldr	x1, [sp, #272]
   12fe4:	bl	4db0 <mpc_init2@plt>
   12fe8:	ldr	w0, [sp, #228]
   12fec:	cmp	w0, #0x0
   12ff0:	b.eq	13000 <mpc_pow_usi@@Base+0x24c>  // b.none
   12ff4:	add	x0, sp, #0x40
   12ff8:	ldr	x1, [sp, #272]
   12ffc:	bl	4db0 <mpc_init2@plt>
   13000:	str	wzr, [sp, #252]
   13004:	str	wzr, [sp, #248]
   13008:	b	13378 <mpc_pow_usi@@Base+0x5c4>
   1300c:	ldr	w0, [sp, #252]
   13010:	add	w0, w0, #0x1
   13014:	str	w0, [sp, #252]
   13018:	add	x0, sp, #0x80
   1301c:	mov	w2, #0x0                   	// #0
   13020:	ldr	x1, [sp, #48]
   13024:	bl	5030 <mpc_sqr@plt>
   13028:	ldr	w0, [sp, #228]
   1302c:	cmp	w0, #0x0
   13030:	b.eq	13114 <mpc_pow_usi@@Base+0x360>  // b.none
   13034:	add	x1, sp, #0x80
   13038:	add	x0, sp, #0x40
   1303c:	mov	w3, #0x0                   	// #0
   13040:	ldr	x2, [sp, #48]
   13044:	bl	4fd0 <mpc_mul@plt>
   13048:	ldr	x0, [sp, #264]
   1304c:	mov	w1, w0
   13050:	ldr	x0, [sp, #40]
   13054:	lsr	x0, x0, x1
   13058:	and	x0, x0, #0x1
   1305c:	cmp	x0, #0x0
   13060:	b.eq	13114 <mpc_pow_usi@@Base+0x360>  // b.none
   13064:	add	x1, sp, #0x40
   13068:	add	x0, sp, #0x80
   1306c:	mov	w2, #0x0                   	// #0
   13070:	bl	5680 <mpc_set@plt>
   13074:	b	13114 <mpc_pow_usi@@Base+0x360>
   13078:	add	x1, sp, #0x80
   1307c:	add	x0, sp, #0x80
   13080:	mov	w2, #0x0                   	// #0
   13084:	bl	5030 <mpc_sqr@plt>
   13088:	ldr	x0, [sp, #264]
   1308c:	mov	w1, w0
   13090:	ldr	x0, [sp, #40]
   13094:	lsr	x0, x0, x1
   13098:	and	x0, x0, #0x1
   1309c:	cmp	x0, #0x0
   130a0:	b.eq	13114 <mpc_pow_usi@@Base+0x360>  // b.none
   130a4:	ldr	x0, [sp, #264]
   130a8:	cmp	x0, #0x0
   130ac:	b.le	13100 <mpc_pow_usi@@Base+0x34c>
   130b0:	ldr	x0, [sp, #264]
   130b4:	sub	w0, w0, #0x1
   130b8:	ldr	x1, [sp, #40]
   130bc:	lsr	x0, x1, x0
   130c0:	and	x0, x0, #0x1
   130c4:	cmp	x0, #0x0
   130c8:	b.eq	13100 <mpc_pow_usi@@Base+0x34c>  // b.none
   130cc:	ldr	x0, [sp, #264]
   130d0:	sub	x0, x0, #0x1
   130d4:	str	x0, [sp, #264]
   130d8:	add	x1, sp, #0x80
   130dc:	add	x0, sp, #0x80
   130e0:	mov	w2, #0x0                   	// #0
   130e4:	bl	5030 <mpc_sqr@plt>
   130e8:	add	x2, sp, #0x40
   130ec:	add	x1, sp, #0x80
   130f0:	add	x0, sp, #0x80
   130f4:	mov	w3, #0x0                   	// #0
   130f8:	bl	4fd0 <mpc_mul@plt>
   130fc:	b	13114 <mpc_pow_usi@@Base+0x360>
   13100:	add	x1, sp, #0x80
   13104:	add	x0, sp, #0x80
   13108:	mov	w3, #0x0                   	// #0
   1310c:	ldr	x2, [sp, #48]
   13110:	bl	4fd0 <mpc_mul@plt>
   13114:	ldr	x0, [sp, #264]
   13118:	sub	x1, x0, #0x1
   1311c:	str	x1, [sp, #264]
   13120:	cmp	x0, #0x0
   13124:	b.gt	13078 <mpc_pow_usi@@Base+0x2c4>
   13128:	ldr	w0, [sp, #36]
   1312c:	cmp	w0, #0x0
   13130:	b.ge	1314c <mpc_pow_usi@@Base+0x398>  // b.tcont
   13134:	add	x1, sp, #0x80
   13138:	add	x0, sp, #0x80
   1313c:	mov	w3, #0x0                   	// #0
   13140:	mov	x2, x1
   13144:	mov	x1, #0x1                   	// #1
   13148:	bl	56b0 <mpc_ui_div@plt>
   1314c:	ldr	x1, [sp, #144]
   13150:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   13154:	cmp	x1, x0
   13158:	b.eq	1316c <mpc_pow_usi@@Base+0x3b8>  // b.none
   1315c:	ldr	x1, [sp, #176]
   13160:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   13164:	cmp	x1, x0
   13168:	b.ne	13194 <mpc_pow_usi@@Base+0x3e0>  // b.any
   1316c:	ldr	w4, [sp, #32]
   13170:	ldr	w3, [sp, #36]
   13174:	ldr	x2, [sp, #40]
   13178:	ldr	x1, [sp, #48]
   1317c:	ldr	x0, [sp, #56]
   13180:	bl	12d24 <mpc_pow_si@@Base+0x6c>
   13184:	str	w0, [sp, #284]
   13188:	mov	w0, #0x1                   	// #1
   1318c:	str	w0, [sp, #248]
   13190:	b	13378 <mpc_pow_usi@@Base+0x5c4>
   13194:	ldr	x1, [sp, #144]
   13198:	ldr	x0, [sp, #176]
   1319c:	sub	x0, x1, x0
   131a0:	str	x0, [sp, #208]
   131a4:	ldr	x0, [sp, #208]
   131a8:	cmp	x0, #0x0
   131ac:	b.le	131bc <mpc_pow_usi@@Base+0x408>
   131b0:	ldr	x0, [sp, #216]
   131b4:	add	x0, x0, #0x3
   131b8:	b	131cc <mpc_pow_usi@@Base+0x418>
   131bc:	ldr	x1, [sp, #216]
   131c0:	ldr	x0, [sp, #208]
   131c4:	sub	x0, x1, x0
   131c8:	add	x0, x0, #0x3
   131cc:	str	x0, [sp, #200]
   131d0:	ldr	x0, [sp, #208]
   131d4:	cmp	x0, #0x0
   131d8:	b.ge	131e8 <mpc_pow_usi@@Base+0x434>  // b.tcont
   131dc:	ldr	x0, [sp, #216]
   131e0:	add	x0, x0, #0x3
   131e4:	b	131f8 <mpc_pow_usi@@Base+0x444>
   131e8:	ldr	x1, [sp, #216]
   131ec:	ldr	x0, [sp, #208]
   131f0:	add	x0, x1, x0
   131f4:	add	x0, x0, #0x3
   131f8:	str	x0, [sp, #192]
   131fc:	ldr	x1, [sp, #272]
   13200:	ldr	x0, [sp, #200]
   13204:	sub	x5, x1, x0
   13208:	ldr	x0, [sp, #56]
   1320c:	ldr	x1, [x0]
   13210:	ldr	w0, [sp, #32]
   13214:	and	w0, w0, #0xf
   13218:	cmp	w0, #0x0
   1321c:	cset	w0, eq  // eq = none
   13220:	and	w0, w0, #0xff
   13224:	and	x0, x0, #0xff
   13228:	add	x1, x1, x0
   1322c:	add	x0, sp, #0x80
   13230:	mov	x4, x1
   13234:	mov	w3, #0x1                   	// #1
   13238:	mov	w2, #0x0                   	// #0
   1323c:	mov	x1, x5
   13240:	bl	5540 <mpfr_can_round@plt>
   13244:	cmp	w0, #0x0
   13248:	b.eq	132c4 <mpc_pow_usi@@Base+0x510>  // b.none
   1324c:	ldr	x1, [sp, #272]
   13250:	ldr	x0, [sp, #192]
   13254:	sub	x5, x1, x0
   13258:	ldr	x0, [sp, #56]
   1325c:	ldr	x1, [x0, #32]
   13260:	ldr	w0, [sp, #32]
   13264:	asr	w0, w0, #4
   13268:	cmp	w0, #0x0
   1326c:	cset	w0, eq  // eq = none
   13270:	and	w0, w0, #0xff
   13274:	and	x0, x0, #0xff
   13278:	add	x1, x1, x0
   1327c:	add	x0, sp, #0x80
   13280:	add	x0, x0, #0x20
   13284:	mov	x4, x1
   13288:	mov	w3, #0x1                   	// #1
   1328c:	mov	w2, #0x0                   	// #0
   13290:	mov	x1, x5
   13294:	bl	5540 <mpfr_can_round@plt>
   13298:	cmp	w0, #0x0
   1329c:	b.eq	132c4 <mpc_pow_usi@@Base+0x510>  // b.none
   132a0:	add	x0, sp, #0x80
   132a4:	ldr	w2, [sp, #32]
   132a8:	mov	x1, x0
   132ac:	ldr	x0, [sp, #56]
   132b0:	bl	5680 <mpc_set@plt>
   132b4:	str	w0, [sp, #284]
   132b8:	mov	w0, #0x1                   	// #1
   132bc:	str	w0, [sp, #248]
   132c0:	b	13378 <mpc_pow_usi@@Base+0x5c4>
   132c4:	ldr	w0, [sp, #252]
   132c8:	cmp	w0, #0x1
   132cc:	b.ne	13354 <mpc_pow_usi@@Base+0x5a0>  // b.any
   132d0:	ldr	x0, [sp, #208]
   132d4:	cmp	x0, #0x0
   132d8:	cneg	x2, x0, lt  // lt = tstop
   132dc:	ldr	x0, [sp, #56]
   132e0:	ldr	x1, [x0, #32]
   132e4:	ldr	x0, [sp, #56]
   132e8:	ldr	x0, [x0]
   132ec:	cmp	x1, x0
   132f0:	csel	x0, x1, x0, ge  // ge = tcont
   132f4:	cmp	x2, x0
   132f8:	b.ge	13354 <mpc_pow_usi@@Base+0x5a0>  // b.tcont
   132fc:	ldr	x0, [sp, #48]
   13300:	ldr	x1, [x0, #32]
   13304:	ldr	x0, [sp, #48]
   13308:	ldr	x0, [x0]
   1330c:	cmp	x1, x0
   13310:	csel	x0, x1, x0, ge  // ge = tcont
   13314:	ldr	x1, [sp, #272]
   13318:	add	x0, x1, x0
   1331c:	str	x0, [sp, #272]
   13320:	add	x0, sp, #0x80
   13324:	ldr	x1, [sp, #272]
   13328:	bl	4cd0 <mpc_set_prec@plt>
   1332c:	ldr	w0, [sp, #228]
   13330:	cmp	w0, #0x0
   13334:	b.eq	13344 <mpc_pow_usi@@Base+0x590>  // b.none
   13338:	add	x0, sp, #0x40
   1333c:	ldr	x1, [sp, #272]
   13340:	bl	4cd0 <mpc_set_prec@plt>
   13344:	ldr	x0, [sp, #216]
   13348:	sub	x0, x0, #0x2
   1334c:	str	x0, [sp, #264]
   13350:	b	13378 <mpc_pow_usi@@Base+0x5c4>
   13354:	ldr	w4, [sp, #32]
   13358:	ldr	w3, [sp, #36]
   1335c:	ldr	x2, [sp, #40]
   13360:	ldr	x1, [sp, #48]
   13364:	ldr	x0, [sp, #56]
   13368:	bl	12d24 <mpc_pow_si@@Base+0x6c>
   1336c:	str	w0, [sp, #284]
   13370:	mov	w0, #0x1                   	// #1
   13374:	str	w0, [sp, #248]
   13378:	ldr	w0, [sp, #248]
   1337c:	cmp	w0, #0x0
   13380:	b.eq	1300c <mpc_pow_usi@@Base+0x258>  // b.none
   13384:	add	x0, sp, #0x80
   13388:	bl	4ae0 <mpc_clear@plt>
   1338c:	ldr	w0, [sp, #228]
   13390:	cmp	w0, #0x0
   13394:	b.eq	133a0 <mpc_pow_usi@@Base+0x5ec>  // b.none
   13398:	add	x0, sp, #0x40
   1339c:	bl	4ae0 <mpc_clear@plt>
   133a0:	ldr	w0, [sp, #284]
   133a4:	ldr	x19, [sp, #16]
   133a8:	ldp	x29, x30, [sp], #288
   133ac:	ret

00000000000133b0 <mpc_pow_ui@@Base>:
   133b0:	stp	x29, x30, [sp, #-48]!
   133b4:	mov	x29, sp
   133b8:	str	x0, [sp, #40]
   133bc:	str	x1, [sp, #32]
   133c0:	str	x2, [sp, #24]
   133c4:	str	w3, [sp, #20]
   133c8:	ldr	w4, [sp, #20]
   133cc:	mov	w3, #0x1                   	// #1
   133d0:	ldr	x2, [sp, #24]
   133d4:	ldr	x1, [sp, #32]
   133d8:	ldr	x0, [sp, #40]
   133dc:	bl	4ed0 <mpc_pow_usi@plt>
   133e0:	ldp	x29, x30, [sp], #48
   133e4:	ret

00000000000133e8 <mpc_pow_z@@Base>:
   133e8:	stp	x29, x30, [sp, #-128]!
   133ec:	mov	x29, sp
   133f0:	str	x0, [sp, #40]
   133f4:	str	x1, [sp, #32]
   133f8:	str	x2, [sp, #24]
   133fc:	str	w3, [sp, #20]
   13400:	mov	w1, #0x2                   	// #2
   13404:	ldr	x0, [sp, #24]
   13408:	bl	55a0 <__gmpz_sizeinbase@plt>
   1340c:	str	x0, [sp, #120]
   13410:	ldr	x0, [sp, #24]
   13414:	ldr	w0, [x0, #4]
   13418:	cmp	w0, #0x0
   1341c:	b.lt	13454 <mpc_pow_z@@Base+0x6c>  // b.tstop
   13420:	ldr	x0, [sp, #24]
   13424:	bl	4f20 <__gmpz_fits_ulong_p@plt>
   13428:	cmp	w0, #0x0
   1342c:	b.eq	1348c <mpc_pow_z@@Base+0xa4>  // b.none
   13430:	ldr	x0, [sp, #24]
   13434:	bl	4fc0 <__gmpz_get_ui@plt>
   13438:	ldr	w4, [sp, #20]
   1343c:	mov	w3, #0x1                   	// #1
   13440:	mov	x2, x0
   13444:	ldr	x1, [sp, #32]
   13448:	ldr	x0, [sp, #40]
   1344c:	bl	4ed0 <mpc_pow_usi@plt>
   13450:	b	134e4 <mpc_pow_z@@Base+0xfc>
   13454:	ldr	x0, [sp, #24]
   13458:	bl	4d20 <__gmpz_fits_slong_p@plt>
   1345c:	cmp	w0, #0x0
   13460:	b.eq	1348c <mpc_pow_z@@Base+0xa4>  // b.none
   13464:	ldr	x0, [sp, #24]
   13468:	bl	4a70 <__gmpz_get_si@plt>
   1346c:	neg	x0, x0
   13470:	ldr	w4, [sp, #20]
   13474:	mov	w3, #0xffffffff            	// #-1
   13478:	mov	x2, x0
   1347c:	ldr	x1, [sp, #32]
   13480:	ldr	x0, [sp, #40]
   13484:	bl	4ed0 <mpc_pow_usi@plt>
   13488:	b	134e4 <mpc_pow_z@@Base+0xfc>
   1348c:	ldr	x2, [sp, #120]
   13490:	ldr	x1, [sp, #120]
   13494:	mov	x0, #0x1                   	// #1
   13498:	cmp	x2, #0x0
   1349c:	csel	x1, x1, x0, gt
   134a0:	add	x0, sp, #0x30
   134a4:	mov	x2, #0x1                   	// #1
   134a8:	bl	54c0 <mpc_init3@plt>
   134ac:	add	x0, sp, #0x30
   134b0:	mov	w2, #0x0                   	// #0
   134b4:	ldr	x1, [sp, #24]
   134b8:	bl	51a0 <mpc_set_z@plt>
   134bc:	add	x0, sp, #0x30
   134c0:	ldr	w3, [sp, #20]
   134c4:	mov	x2, x0
   134c8:	ldr	x1, [sp, #32]
   134cc:	ldr	x0, [sp, #40]
   134d0:	bl	5340 <mpc_pow@plt>
   134d4:	str	w0, [sp, #116]
   134d8:	add	x0, sp, #0x30
   134dc:	bl	4ae0 <mpc_clear@plt>
   134e0:	ldr	w0, [sp, #116]
   134e4:	ldp	x29, x30, [sp], #128
   134e8:	ret

00000000000134ec <mpc_proj@@Base>:
   134ec:	stp	x29, x30, [sp, #-48]!
   134f0:	mov	x29, sp
   134f4:	str	x0, [sp, #40]
   134f8:	str	x1, [sp, #32]
   134fc:	str	w2, [sp, #28]
   13500:	ldr	x0, [sp, #32]
   13504:	ldr	x1, [x0, #16]
   13508:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1350c:	cmp	x1, x0
   13510:	b.eq	13528 <mpc_proj@@Base+0x3c>  // b.none
   13514:	ldr	x0, [sp, #32]
   13518:	ldr	x1, [x0, #48]
   1351c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   13520:	cmp	x1, x0
   13524:	b.ne	1356c <mpc_proj@@Base+0x80>  // b.any
   13528:	ldr	x0, [sp, #40]
   1352c:	mov	w1, #0x1                   	// #1
   13530:	bl	5220 <mpfr_set_inf@plt>
   13534:	ldr	x0, [sp, #40]
   13538:	add	x2, x0, #0x20
   1353c:	ldr	x0, [sp, #32]
   13540:	ldr	w0, [x0, #40]
   13544:	cmp	w0, #0x0
   13548:	b.ge	13554 <mpc_proj@@Base+0x68>  // b.tcont
   1354c:	mov	w0, #0xffffffff            	// #-1
   13550:	b	13558 <mpc_proj@@Base+0x6c>
   13554:	mov	w0, #0x1                   	// #1
   13558:	mov	w1, w0
   1355c:	mov	x0, x2
   13560:	bl	4dd0 <mpfr_set_zero@plt>
   13564:	mov	w0, #0x0                   	// #0
   13568:	b	1357c <mpc_proj@@Base+0x90>
   1356c:	ldr	w2, [sp, #28]
   13570:	ldr	x1, [sp, #32]
   13574:	ldr	x0, [sp, #40]
   13578:	bl	5680 <mpc_set@plt>
   1357c:	ldp	x29, x30, [sp], #48
   13580:	ret

0000000000013584 <mpc_real@@Base>:
   13584:	stp	x29, x30, [sp, #-48]!
   13588:	mov	x29, sp
   1358c:	str	x0, [sp, #40]
   13590:	str	x1, [sp, #32]
   13594:	str	w2, [sp, #28]
   13598:	ldr	x1, [sp, #32]
   1359c:	ldr	x0, [sp, #32]
   135a0:	ldr	w0, [x0, #8]
   135a4:	mov	w3, w0
   135a8:	ldr	w2, [sp, #28]
   135ac:	ldr	x0, [sp, #40]
   135b0:	bl	52d0 <mpfr_set4@plt>
   135b4:	ldp	x29, x30, [sp], #48
   135b8:	ret
   135bc:	stp	x29, x30, [sp, #-32]!
   135c0:	mov	x29, sp
   135c4:	str	x0, [sp, #24]
   135c8:	str	x1, [sp, #16]
   135cc:	ldr	x0, [sp, #16]
   135d0:	cmp	x0, #0x0
   135d4:	b.ne	135e0 <mpc_real@@Base+0x5c>  // b.any
   135d8:	ldr	x0, [sp, #24]
   135dc:	b	13604 <mpc_real@@Base+0x80>
   135e0:	ldr	x0, [sp, #24]
   135e4:	ldr	x1, [sp, #16]
   135e8:	udiv	x2, x0, x1
   135ec:	ldr	x1, [sp, #16]
   135f0:	mul	x1, x2, x1
   135f4:	sub	x0, x0, x1
   135f8:	mov	x1, x0
   135fc:	ldr	x0, [sp, #16]
   13600:	bl	135bc <mpc_real@@Base+0x38>
   13604:	ldp	x29, x30, [sp], #32
   13608:	ret

000000000001360c <mpc_rootofunity@@Base>:
   1360c:	stp	x29, x30, [sp, #-208]!
   13610:	mov	x29, sp
   13614:	str	x0, [sp, #40]
   13618:	str	x1, [sp, #32]
   1361c:	str	x2, [sp, #24]
   13620:	str	w3, [sp, #20]
   13624:	ldr	x0, [sp, #32]
   13628:	cmp	x0, #0x0
   1362c:	b.ne	1364c <mpc_rootofunity@@Base+0x40>  // b.any
   13630:	ldr	x0, [sp, #40]
   13634:	bl	4b10 <mpfr_set_nan@plt>
   13638:	ldr	x0, [sp, #40]
   1363c:	add	x0, x0, #0x20
   13640:	bl	4b10 <mpfr_set_nan@plt>
   13644:	mov	w0, #0x0                   	// #0
   13648:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   1364c:	ldr	x0, [sp, #24]
   13650:	ldr	x1, [sp, #32]
   13654:	udiv	x2, x0, x1
   13658:	ldr	x1, [sp, #32]
   1365c:	mul	x1, x2, x1
   13660:	sub	x0, x0, x1
   13664:	str	x0, [sp, #24]
   13668:	ldr	x1, [sp, #32]
   1366c:	ldr	x0, [sp, #24]
   13670:	bl	135bc <mpc_real@@Base+0x38>
   13674:	str	x0, [sp, #176]
   13678:	ldr	x1, [sp, #24]
   1367c:	ldr	x0, [sp, #176]
   13680:	udiv	x0, x1, x0
   13684:	str	x0, [sp, #24]
   13688:	ldr	x1, [sp, #32]
   1368c:	ldr	x0, [sp, #176]
   13690:	udiv	x0, x1, x0
   13694:	str	x0, [sp, #32]
   13698:	ldr	x0, [sp, #32]
   1369c:	cmp	x0, #0x1
   136a0:	b.ne	136fc <mpc_rootofunity@@Base+0xf0>  // b.any
   136a4:	ldr	x0, [sp, #24]
   136a8:	cmp	x0, #0x0
   136ac:	b.eq	136e4 <mpc_rootofunity@@Base+0xd8>  // b.none
   136b0:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   136b4:	ldr	x0, [x0, #4008]
   136b8:	ldr	x5, [x0]
   136bc:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   136c0:	add	x4, x0, #0x248
   136c4:	mov	w3, #0x40                  	// #64
   136c8:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   136cc:	add	x2, x0, #0x250
   136d0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   136d4:	add	x1, x0, #0x260
   136d8:	mov	x0, x5
   136dc:	bl	56a0 <fprintf@plt>
   136e0:	bl	5100 <abort@plt>
   136e4:	ldr	w3, [sp, #20]
   136e8:	mov	x2, #0x0                   	// #0
   136ec:	mov	x1, #0x1                   	// #1
   136f0:	ldr	x0, [sp, #40]
   136f4:	bl	5140 <mpc_set_ui_ui@plt>
   136f8:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   136fc:	ldr	x0, [sp, #32]
   13700:	cmp	x0, #0x2
   13704:	b.ne	13760 <mpc_rootofunity@@Base+0x154>  // b.any
   13708:	ldr	x0, [sp, #24]
   1370c:	cmp	x0, #0x1
   13710:	b.eq	13748 <mpc_rootofunity@@Base+0x13c>  // b.none
   13714:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   13718:	ldr	x0, [x0, #4008]
   1371c:	ldr	x5, [x0]
   13720:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13724:	add	x4, x0, #0x288
   13728:	mov	w3, #0x46                  	// #70
   1372c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13730:	add	x2, x0, #0x250
   13734:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13738:	add	x1, x0, #0x260
   1373c:	mov	x0, x5
   13740:	bl	56a0 <fprintf@plt>
   13744:	bl	5100 <abort@plt>
   13748:	ldr	w3, [sp, #20]
   1374c:	mov	x2, #0x0                   	// #0
   13750:	mov	x1, #0xffffffffffffffff    	// #-1
   13754:	ldr	x0, [sp, #40]
   13758:	bl	53c0 <mpc_set_si_si@plt>
   1375c:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   13760:	ldr	x0, [sp, #32]
   13764:	cmp	x0, #0x4
   13768:	b.ne	137f4 <mpc_rootofunity@@Base+0x1e8>  // b.any
   1376c:	ldr	x0, [sp, #24]
   13770:	cmp	x0, #0x1
   13774:	b.eq	137b8 <mpc_rootofunity@@Base+0x1ac>  // b.none
   13778:	ldr	x0, [sp, #24]
   1377c:	cmp	x0, #0x3
   13780:	b.eq	137b8 <mpc_rootofunity@@Base+0x1ac>  // b.none
   13784:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   13788:	ldr	x0, [x0, #4008]
   1378c:	ldr	x5, [x0]
   13790:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13794:	add	x4, x0, #0x290
   13798:	mov	w3, #0x4d                  	// #77
   1379c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   137a0:	add	x2, x0, #0x250
   137a4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   137a8:	add	x1, x0, #0x260
   137ac:	mov	x0, x5
   137b0:	bl	56a0 <fprintf@plt>
   137b4:	bl	5100 <abort@plt>
   137b8:	ldr	x0, [sp, #24]
   137bc:	cmp	x0, #0x1
   137c0:	b.ne	137dc <mpc_rootofunity@@Base+0x1d0>  // b.any
   137c4:	ldr	w3, [sp, #20]
   137c8:	mov	x2, #0x1                   	// #1
   137cc:	mov	x1, #0x0                   	// #0
   137d0:	ldr	x0, [sp, #40]
   137d4:	bl	5140 <mpc_set_ui_ui@plt>
   137d8:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   137dc:	ldr	w3, [sp, #20]
   137e0:	mov	x2, #0xffffffffffffffff    	// #-1
   137e4:	mov	x1, #0x0                   	// #0
   137e8:	ldr	x0, [sp, #40]
   137ec:	bl	53c0 <mpc_set_si_si@plt>
   137f0:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   137f4:	ldr	x0, [sp, #32]
   137f8:	cmp	x0, #0x3
   137fc:	b.eq	1380c <mpc_rootofunity@@Base+0x200>  // b.none
   13800:	ldr	x0, [sp, #32]
   13804:	cmp	x0, #0x6
   13808:	b.ne	139cc <mpc_rootofunity@@Base+0x3c0>  // b.any
   1380c:	ldr	x0, [sp, #32]
   13810:	cmp	x0, #0x3
   13814:	b.ne	13830 <mpc_rootofunity@@Base+0x224>  // b.any
   13818:	ldr	x0, [sp, #24]
   1381c:	cmp	x0, #0x1
   13820:	b.eq	13888 <mpc_rootofunity@@Base+0x27c>  // b.none
   13824:	ldr	x0, [sp, #24]
   13828:	cmp	x0, #0x2
   1382c:	b.eq	13888 <mpc_rootofunity@@Base+0x27c>  // b.none
   13830:	ldr	x0, [sp, #32]
   13834:	cmp	x0, #0x6
   13838:	b.ne	13854 <mpc_rootofunity@@Base+0x248>  // b.any
   1383c:	ldr	x0, [sp, #24]
   13840:	cmp	x0, #0x1
   13844:	b.eq	13888 <mpc_rootofunity@@Base+0x27c>  // b.none
   13848:	ldr	x0, [sp, #24]
   1384c:	cmp	x0, #0x5
   13850:	b.eq	13888 <mpc_rootofunity@@Base+0x27c>  // b.none
   13854:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   13858:	ldr	x0, [x0, #4008]
   1385c:	ldr	x5, [x0]
   13860:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13864:	add	x4, x0, #0x2a8
   13868:	mov	w3, #0x55                  	// #85
   1386c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13870:	add	x2, x0, #0x250
   13874:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13878:	add	x1, x0, #0x260
   1387c:	mov	x0, x5
   13880:	bl	56a0 <fprintf@plt>
   13884:	bl	5100 <abort@plt>
   13888:	ldr	x4, [sp, #40]
   1388c:	ldr	x0, [sp, #32]
   13890:	cmp	x0, #0x3
   13894:	b.ne	138a0 <mpc_rootofunity@@Base+0x294>  // b.any
   13898:	mov	x0, #0xffffffffffffffff    	// #-1
   1389c:	b	138a4 <mpc_rootofunity@@Base+0x298>
   138a0:	mov	x0, #0x1                   	// #1
   138a4:	ldr	w1, [sp, #20]
   138a8:	and	w1, w1, #0xf
   138ac:	mov	w3, w1
   138b0:	mov	x2, #0x0                   	// #0
   138b4:	mov	x1, x0
   138b8:	mov	x0, x4
   138bc:	bl	4ab0 <mpfr_set_si_2exp@plt>
   138c0:	str	w0, [sp, #196]
   138c4:	ldr	w0, [sp, #20]
   138c8:	asr	w0, w0, #4
   138cc:	str	w0, [sp, #184]
   138d0:	ldr	x0, [sp, #24]
   138d4:	cmp	x0, #0x1
   138d8:	b.eq	1390c <mpc_rootofunity@@Base+0x300>  // b.none
   138dc:	ldr	w0, [sp, #184]
   138e0:	cmp	w0, #0x2
   138e4:	b.eq	13904 <mpc_rootofunity@@Base+0x2f8>  // b.none
   138e8:	ldr	w0, [sp, #184]
   138ec:	cmp	w0, #0x3
   138f0:	b.eq	138fc <mpc_rootofunity@@Base+0x2f0>  // b.none
   138f4:	ldr	w0, [sp, #184]
   138f8:	b	13908 <mpc_rootofunity@@Base+0x2fc>
   138fc:	mov	w0, #0x2                   	// #2
   13900:	b	13908 <mpc_rootofunity@@Base+0x2fc>
   13904:	mov	w0, #0x3                   	// #3
   13908:	str	w0, [sp, #184]
   1390c:	ldr	x0, [sp, #40]
   13910:	add	x0, x0, #0x20
   13914:	ldr	w2, [sp, #184]
   13918:	mov	x1, #0x3                   	// #3
   1391c:	bl	5380 <mpfr_sqrt_ui@plt>
   13920:	str	w0, [sp, #192]
   13924:	mov	w3, #0x0                   	// #0
   13928:	mov	x2, #0x1                   	// #1
   1392c:	ldr	x1, [sp, #40]
   13930:	ldr	x0, [sp, #40]
   13934:	bl	5630 <mpc_div_2ui@plt>
   13938:	ldr	x0, [sp, #24]
   1393c:	cmp	x0, #0x1
   13940:	b.eq	13970 <mpc_rootofunity@@Base+0x364>  // b.none
   13944:	ldr	x0, [sp, #40]
   13948:	add	x3, x0, #0x20
   1394c:	ldr	x0, [sp, #40]
   13950:	add	x0, x0, #0x20
   13954:	mov	w2, #0x0                   	// #0
   13958:	mov	x1, x0
   1395c:	mov	x0, x3
   13960:	bl	4c50 <mpfr_neg@plt>
   13964:	ldr	w0, [sp, #192]
   13968:	neg	w0, w0
   1396c:	str	w0, [sp, #192]
   13970:	ldr	w0, [sp, #196]
   13974:	cmp	w0, #0x0
   13978:	b.lt	13994 <mpc_rootofunity@@Base+0x388>  // b.tstop
   1397c:	ldr	w0, [sp, #196]
   13980:	cmp	w0, #0x0
   13984:	cset	w0, ne  // ne = any
   13988:	and	w0, w0, #0xff
   1398c:	mov	w1, w0
   13990:	b	13998 <mpc_rootofunity@@Base+0x38c>
   13994:	mov	w1, #0x2                   	// #2
   13998:	ldr	w0, [sp, #192]
   1399c:	cmp	w0, #0x0
   139a0:	b.lt	139c0 <mpc_rootofunity@@Base+0x3b4>  // b.tstop
   139a4:	ldr	w0, [sp, #192]
   139a8:	cmp	w0, #0x0
   139ac:	b.eq	139b8 <mpc_rootofunity@@Base+0x3ac>  // b.none
   139b0:	mov	w0, #0x4                   	// #4
   139b4:	b	139c4 <mpc_rootofunity@@Base+0x3b8>
   139b8:	mov	w0, #0x0                   	// #0
   139bc:	b	139c4 <mpc_rootofunity@@Base+0x3b8>
   139c0:	mov	w0, #0x8                   	// #8
   139c4:	orr	w0, w1, w0
   139c8:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   139cc:	ldr	x0, [sp, #32]
   139d0:	cmp	x0, #0xc
   139d4:	b.ne	13b88 <mpc_rootofunity@@Base+0x57c>  // b.any
   139d8:	ldr	x0, [sp, #24]
   139dc:	cmp	x0, #0x1
   139e0:	b.eq	13a3c <mpc_rootofunity@@Base+0x430>  // b.none
   139e4:	ldr	x0, [sp, #24]
   139e8:	cmp	x0, #0x5
   139ec:	b.eq	13a3c <mpc_rootofunity@@Base+0x430>  // b.none
   139f0:	ldr	x0, [sp, #24]
   139f4:	cmp	x0, #0x7
   139f8:	b.eq	13a3c <mpc_rootofunity@@Base+0x430>  // b.none
   139fc:	ldr	x0, [sp, #24]
   13a00:	cmp	x0, #0xb
   13a04:	b.eq	13a3c <mpc_rootofunity@@Base+0x430>  // b.none
   13a08:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   13a0c:	ldr	x0, [x0, #4008]
   13a10:	ldr	x5, [x0]
   13a14:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13a18:	add	x4, x0, #0x2f0
   13a1c:	mov	w3, #0x6f                  	// #111
   13a20:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13a24:	add	x2, x0, #0x250
   13a28:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13a2c:	add	x1, x0, #0x260
   13a30:	mov	x0, x5
   13a34:	bl	56a0 <fprintf@plt>
   13a38:	bl	5100 <abort@plt>
   13a3c:	ldr	w0, [sp, #20]
   13a40:	and	w0, w0, #0xf
   13a44:	str	w0, [sp, #188]
   13a48:	ldr	x0, [sp, #24]
   13a4c:	cmp	x0, #0x5
   13a50:	b.eq	13a60 <mpc_rootofunity@@Base+0x454>  // b.none
   13a54:	ldr	x0, [sp, #24]
   13a58:	cmp	x0, #0x7
   13a5c:	b.ne	13a90 <mpc_rootofunity@@Base+0x484>  // b.any
   13a60:	ldr	w0, [sp, #188]
   13a64:	cmp	w0, #0x2
   13a68:	b.eq	13a88 <mpc_rootofunity@@Base+0x47c>  // b.none
   13a6c:	ldr	w0, [sp, #188]
   13a70:	cmp	w0, #0x3
   13a74:	b.eq	13a80 <mpc_rootofunity@@Base+0x474>  // b.none
   13a78:	ldr	w0, [sp, #188]
   13a7c:	b	13a8c <mpc_rootofunity@@Base+0x480>
   13a80:	mov	w0, #0x2                   	// #2
   13a84:	b	13a8c <mpc_rootofunity@@Base+0x480>
   13a88:	mov	w0, #0x3                   	// #3
   13a8c:	str	w0, [sp, #188]
   13a90:	ldr	x0, [sp, #40]
   13a94:	ldr	w2, [sp, #188]
   13a98:	mov	x1, #0x3                   	// #3
   13a9c:	bl	5380 <mpfr_sqrt_ui@plt>
   13aa0:	str	w0, [sp, #196]
   13aa4:	ldr	x0, [sp, #40]
   13aa8:	add	x4, x0, #0x20
   13aac:	ldr	x0, [sp, #24]
   13ab0:	cmp	x0, #0x5
   13ab4:	b.hi	13ac0 <mpc_rootofunity@@Base+0x4b4>  // b.pmore
   13ab8:	mov	x0, #0x1                   	// #1
   13abc:	b	13ac4 <mpc_rootofunity@@Base+0x4b8>
   13ac0:	mov	x0, #0xffffffffffffffff    	// #-1
   13ac4:	ldr	w1, [sp, #20]
   13ac8:	asr	w1, w1, #4
   13acc:	mov	w3, w1
   13ad0:	mov	x2, #0x0                   	// #0
   13ad4:	mov	x1, x0
   13ad8:	mov	x0, x4
   13adc:	bl	4ab0 <mpfr_set_si_2exp@plt>
   13ae0:	str	w0, [sp, #192]
   13ae4:	mov	w3, #0x0                   	// #0
   13ae8:	mov	x2, #0x1                   	// #1
   13aec:	ldr	x1, [sp, #40]
   13af0:	ldr	x0, [sp, #40]
   13af4:	bl	5630 <mpc_div_2ui@plt>
   13af8:	ldr	x0, [sp, #24]
   13afc:	cmp	x0, #0x5
   13b00:	b.eq	13b10 <mpc_rootofunity@@Base+0x504>  // b.none
   13b04:	ldr	x0, [sp, #24]
   13b08:	cmp	x0, #0x7
   13b0c:	b.ne	13b2c <mpc_rootofunity@@Base+0x520>  // b.any
   13b10:	ldr	x0, [sp, #40]
   13b14:	ldr	x1, [sp, #40]
   13b18:	mov	w2, #0x0                   	// #0
   13b1c:	bl	4c50 <mpfr_neg@plt>
   13b20:	ldr	w0, [sp, #196]
   13b24:	neg	w0, w0
   13b28:	str	w0, [sp, #196]
   13b2c:	ldr	w0, [sp, #196]
   13b30:	cmp	w0, #0x0
   13b34:	b.lt	13b50 <mpc_rootofunity@@Base+0x544>  // b.tstop
   13b38:	ldr	w0, [sp, #196]
   13b3c:	cmp	w0, #0x0
   13b40:	cset	w0, ne  // ne = any
   13b44:	and	w0, w0, #0xff
   13b48:	mov	w1, w0
   13b4c:	b	13b54 <mpc_rootofunity@@Base+0x548>
   13b50:	mov	w1, #0x2                   	// #2
   13b54:	ldr	w0, [sp, #192]
   13b58:	cmp	w0, #0x0
   13b5c:	b.lt	13b7c <mpc_rootofunity@@Base+0x570>  // b.tstop
   13b60:	ldr	w0, [sp, #192]
   13b64:	cmp	w0, #0x0
   13b68:	b.eq	13b74 <mpc_rootofunity@@Base+0x568>  // b.none
   13b6c:	mov	w0, #0x4                   	// #4
   13b70:	b	13b80 <mpc_rootofunity@@Base+0x574>
   13b74:	mov	w0, #0x0                   	// #0
   13b78:	b	13b80 <mpc_rootofunity@@Base+0x574>
   13b7c:	mov	w0, #0x8                   	// #8
   13b80:	orr	w0, w1, w0
   13b84:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   13b88:	ldr	x0, [sp, #32]
   13b8c:	cmp	x0, #0x8
   13b90:	b.ne	13d9c <mpc_rootofunity@@Base+0x790>  // b.any
   13b94:	ldr	x0, [sp, #24]
   13b98:	cmp	x0, #0x1
   13b9c:	b.eq	13bf8 <mpc_rootofunity@@Base+0x5ec>  // b.none
   13ba0:	ldr	x0, [sp, #24]
   13ba4:	cmp	x0, #0x3
   13ba8:	b.eq	13bf8 <mpc_rootofunity@@Base+0x5ec>  // b.none
   13bac:	ldr	x0, [sp, #24]
   13bb0:	cmp	x0, #0x5
   13bb4:	b.eq	13bf8 <mpc_rootofunity@@Base+0x5ec>  // b.none
   13bb8:	ldr	x0, [sp, #24]
   13bbc:	cmp	x0, #0x7
   13bc0:	b.eq	13bf8 <mpc_rootofunity@@Base+0x5ec>  // b.none
   13bc4:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   13bc8:	ldr	x0, [x0, #4008]
   13bcc:	ldr	x5, [x0]
   13bd0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13bd4:	add	x4, x0, #0x318
   13bd8:	mov	w3, #0x86                  	// #134
   13bdc:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13be0:	add	x2, x0, #0x250
   13be4:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   13be8:	add	x1, x0, #0x260
   13bec:	mov	x0, x5
   13bf0:	bl	56a0 <fprintf@plt>
   13bf4:	bl	5100 <abort@plt>
   13bf8:	ldr	w0, [sp, #20]
   13bfc:	and	w0, w0, #0xf
   13c00:	str	w0, [sp, #188]
   13c04:	ldr	x0, [sp, #24]
   13c08:	cmp	x0, #0x3
   13c0c:	b.eq	13c1c <mpc_rootofunity@@Base+0x610>  // b.none
   13c10:	ldr	x0, [sp, #24]
   13c14:	cmp	x0, #0x5
   13c18:	b.ne	13c4c <mpc_rootofunity@@Base+0x640>  // b.any
   13c1c:	ldr	w0, [sp, #188]
   13c20:	cmp	w0, #0x2
   13c24:	b.eq	13c44 <mpc_rootofunity@@Base+0x638>  // b.none
   13c28:	ldr	w0, [sp, #188]
   13c2c:	cmp	w0, #0x3
   13c30:	b.eq	13c3c <mpc_rootofunity@@Base+0x630>  // b.none
   13c34:	ldr	w0, [sp, #188]
   13c38:	b	13c48 <mpc_rootofunity@@Base+0x63c>
   13c3c:	mov	w0, #0x2                   	// #2
   13c40:	b	13c48 <mpc_rootofunity@@Base+0x63c>
   13c44:	mov	w0, #0x3                   	// #3
   13c48:	str	w0, [sp, #188]
   13c4c:	ldr	w0, [sp, #20]
   13c50:	asr	w0, w0, #4
   13c54:	str	w0, [sp, #184]
   13c58:	ldr	x0, [sp, #24]
   13c5c:	cmp	x0, #0x4
   13c60:	b.ls	13c94 <mpc_rootofunity@@Base+0x688>  // b.plast
   13c64:	ldr	w0, [sp, #184]
   13c68:	cmp	w0, #0x2
   13c6c:	b.eq	13c8c <mpc_rootofunity@@Base+0x680>  // b.none
   13c70:	ldr	w0, [sp, #184]
   13c74:	cmp	w0, #0x3
   13c78:	b.eq	13c84 <mpc_rootofunity@@Base+0x678>  // b.none
   13c7c:	ldr	w0, [sp, #184]
   13c80:	b	13c90 <mpc_rootofunity@@Base+0x684>
   13c84:	mov	w0, #0x2                   	// #2
   13c88:	b	13c90 <mpc_rootofunity@@Base+0x684>
   13c8c:	mov	w0, #0x3                   	// #3
   13c90:	str	w0, [sp, #184]
   13c94:	ldr	x0, [sp, #40]
   13c98:	ldr	w2, [sp, #188]
   13c9c:	mov	x1, #0x2                   	// #2
   13ca0:	bl	5380 <mpfr_sqrt_ui@plt>
   13ca4:	str	w0, [sp, #196]
   13ca8:	ldr	x0, [sp, #40]
   13cac:	add	x0, x0, #0x20
   13cb0:	ldr	w2, [sp, #184]
   13cb4:	mov	x1, #0x2                   	// #2
   13cb8:	bl	5380 <mpfr_sqrt_ui@plt>
   13cbc:	str	w0, [sp, #192]
   13cc0:	mov	w3, #0x0                   	// #0
   13cc4:	mov	x2, #0x1                   	// #1
   13cc8:	ldr	x1, [sp, #40]
   13ccc:	ldr	x0, [sp, #40]
   13cd0:	bl	5630 <mpc_div_2ui@plt>
   13cd4:	ldr	x0, [sp, #24]
   13cd8:	cmp	x0, #0x3
   13cdc:	b.eq	13cec <mpc_rootofunity@@Base+0x6e0>  // b.none
   13ce0:	ldr	x0, [sp, #24]
   13ce4:	cmp	x0, #0x5
   13ce8:	b.ne	13d08 <mpc_rootofunity@@Base+0x6fc>  // b.any
   13cec:	ldr	x0, [sp, #40]
   13cf0:	ldr	x1, [sp, #40]
   13cf4:	mov	w2, #0x0                   	// #0
   13cf8:	bl	4c50 <mpfr_neg@plt>
   13cfc:	ldr	w0, [sp, #196]
   13d00:	neg	w0, w0
   13d04:	str	w0, [sp, #196]
   13d08:	ldr	x0, [sp, #24]
   13d0c:	cmp	x0, #0x4
   13d10:	b.ls	13d40 <mpc_rootofunity@@Base+0x734>  // b.plast
   13d14:	ldr	x0, [sp, #40]
   13d18:	add	x3, x0, #0x20
   13d1c:	ldr	x0, [sp, #40]
   13d20:	add	x0, x0, #0x20
   13d24:	mov	w2, #0x0                   	// #0
   13d28:	mov	x1, x0
   13d2c:	mov	x0, x3
   13d30:	bl	4c50 <mpfr_neg@plt>
   13d34:	ldr	w0, [sp, #192]
   13d38:	neg	w0, w0
   13d3c:	str	w0, [sp, #192]
   13d40:	ldr	w0, [sp, #196]
   13d44:	cmp	w0, #0x0
   13d48:	b.lt	13d64 <mpc_rootofunity@@Base+0x758>  // b.tstop
   13d4c:	ldr	w0, [sp, #196]
   13d50:	cmp	w0, #0x0
   13d54:	cset	w0, ne  // ne = any
   13d58:	and	w0, w0, #0xff
   13d5c:	mov	w1, w0
   13d60:	b	13d68 <mpc_rootofunity@@Base+0x75c>
   13d64:	mov	w1, #0x2                   	// #2
   13d68:	ldr	w0, [sp, #192]
   13d6c:	cmp	w0, #0x0
   13d70:	b.lt	13d90 <mpc_rootofunity@@Base+0x784>  // b.tstop
   13d74:	ldr	w0, [sp, #192]
   13d78:	cmp	w0, #0x0
   13d7c:	b.eq	13d88 <mpc_rootofunity@@Base+0x77c>  // b.none
   13d80:	mov	w0, #0x4                   	// #4
   13d84:	b	13d94 <mpc_rootofunity@@Base+0x788>
   13d88:	mov	w0, #0x0                   	// #0
   13d8c:	b	13d94 <mpc_rootofunity@@Base+0x788>
   13d90:	mov	w0, #0x8                   	// #8
   13d94:	orr	w0, w1, w0
   13d98:	b	13ff8 <mpc_rootofunity@@Base+0x9ec>
   13d9c:	ldr	x0, [sp, #40]
   13da0:	ldr	x1, [x0, #32]
   13da4:	ldr	x0, [sp, #40]
   13da8:	ldr	x0, [x0]
   13dac:	cmp	x1, x0
   13db0:	csel	x0, x1, x0, ge  // ge = tcont
   13db4:	str	x0, [sp, #200]
   13db8:	add	x0, sp, #0x70
   13dbc:	mov	x1, #0x43                  	// #67
   13dc0:	bl	5530 <mpfr_init2@plt>
   13dc4:	add	x0, sp, #0x50
   13dc8:	mov	x1, #0x43                  	// #67
   13dcc:	bl	5530 <mpfr_init2@plt>
   13dd0:	add	x0, sp, #0x30
   13dd4:	mov	x1, #0x43                  	// #67
   13dd8:	bl	5530 <mpfr_init2@plt>
   13ddc:	add	x0, sp, #0x90
   13de0:	bl	53b0 <__gmpq_init@plt>
   13de4:	add	x0, sp, #0x90
   13de8:	ldr	x2, [sp, #32]
   13dec:	ldr	x1, [sp, #24]
   13df0:	bl	5200 <__gmpq_set_ui@plt>
   13df4:	add	x1, sp, #0x90
   13df8:	add	x0, sp, #0x90
   13dfc:	mov	x2, #0x1                   	// #1
   13e00:	bl	5670 <__gmpq_mul_2exp@plt>
   13e04:	ldr	x0, [sp, #200]
   13e08:	bl	4de0 <mpc_ceil_log2@plt>
   13e0c:	add	x0, x0, #0x5
   13e10:	ldr	x1, [sp, #200]
   13e14:	add	x0, x1, x0
   13e18:	str	x0, [sp, #200]
   13e1c:	add	x0, sp, #0x70
   13e20:	ldr	x1, [sp, #200]
   13e24:	bl	4d40 <mpfr_set_prec@plt>
   13e28:	add	x0, sp, #0x50
   13e2c:	ldr	x1, [sp, #200]
   13e30:	bl	4d40 <mpfr_set_prec@plt>
   13e34:	add	x0, sp, #0x30
   13e38:	ldr	x1, [sp, #200]
   13e3c:	bl	4d40 <mpfr_set_prec@plt>
   13e40:	add	x0, sp, #0x70
   13e44:	mov	w1, #0x0                   	// #0
   13e48:	bl	4b50 <mpfr_const_pi@plt>
   13e4c:	add	x2, sp, #0x90
   13e50:	add	x1, sp, #0x70
   13e54:	add	x0, sp, #0x70
   13e58:	mov	w3, #0x0                   	// #0
   13e5c:	bl	4aa0 <mpfr_mul_q@plt>
   13e60:	add	x2, sp, #0x70
   13e64:	add	x1, sp, #0x30
   13e68:	add	x0, sp, #0x50
   13e6c:	mov	w3, #0x0                   	// #0
   13e70:	bl	5620 <mpfr_sin_cos@plt>
   13e74:	ldr	x0, [sp, #64]
   13e78:	mov	x1, #0x4                   	// #4
   13e7c:	sub	x0, x1, x0
   13e80:	ldr	x1, [sp, #200]
   13e84:	sub	x5, x1, x0
   13e88:	ldr	x0, [sp, #40]
   13e8c:	ldr	x1, [x0]
   13e90:	ldr	w0, [sp, #20]
   13e94:	and	w0, w0, #0xf
   13e98:	cmp	w0, #0x0
   13e9c:	cset	w0, eq  // eq = none
   13ea0:	and	w0, w0, #0xff
   13ea4:	and	x0, x0, #0xff
   13ea8:	add	x1, x1, x0
   13eac:	add	x0, sp, #0x30
   13eb0:	mov	x4, x1
   13eb4:	mov	w3, #0x1                   	// #1
   13eb8:	mov	w2, #0x0                   	// #0
   13ebc:	mov	x1, x5
   13ec0:	bl	5540 <mpfr_can_round@plt>
   13ec4:	cmp	w0, #0x0
   13ec8:	b.eq	13e04 <mpc_rootofunity@@Base+0x7f8>  // b.none
   13ecc:	ldr	x0, [sp, #96]
   13ed0:	mov	x1, #0x4                   	// #4
   13ed4:	sub	x0, x1, x0
   13ed8:	ldr	x1, [sp, #200]
   13edc:	sub	x5, x1, x0
   13ee0:	ldr	x0, [sp, #40]
   13ee4:	ldr	x1, [x0, #32]
   13ee8:	ldr	w0, [sp, #20]
   13eec:	asr	w0, w0, #4
   13ef0:	cmp	w0, #0x0
   13ef4:	cset	w0, eq  // eq = none
   13ef8:	and	w0, w0, #0xff
   13efc:	and	x0, x0, #0xff
   13f00:	add	x1, x1, x0
   13f04:	add	x0, sp, #0x50
   13f08:	mov	x4, x1
   13f0c:	mov	w3, #0x1                   	// #1
   13f10:	mov	w2, #0x0                   	// #0
   13f14:	mov	x1, x5
   13f18:	bl	5540 <mpfr_can_round@plt>
   13f1c:	cmp	w0, #0x0
   13f20:	b.eq	13e04 <mpc_rootofunity@@Base+0x7f8>  // b.none
   13f24:	ldr	x4, [sp, #40]
   13f28:	ldr	w0, [sp, #20]
   13f2c:	and	w1, w0, #0xf
   13f30:	ldr	w2, [sp, #56]
   13f34:	add	x0, sp, #0x30
   13f38:	mov	w3, w2
   13f3c:	mov	w2, w1
   13f40:	mov	x1, x0
   13f44:	mov	x0, x4
   13f48:	bl	52d0 <mpfr_set4@plt>
   13f4c:	str	w0, [sp, #196]
   13f50:	ldr	x0, [sp, #40]
   13f54:	add	x4, x0, #0x20
   13f58:	ldr	w0, [sp, #20]
   13f5c:	asr	w1, w0, #4
   13f60:	ldr	w2, [sp, #88]
   13f64:	add	x0, sp, #0x50
   13f68:	mov	w3, w2
   13f6c:	mov	w2, w1
   13f70:	mov	x1, x0
   13f74:	mov	x0, x4
   13f78:	bl	52d0 <mpfr_set4@plt>
   13f7c:	str	w0, [sp, #192]
   13f80:	add	x0, sp, #0x70
   13f84:	bl	4e30 <mpfr_clear@plt>
   13f88:	add	x0, sp, #0x50
   13f8c:	bl	4e30 <mpfr_clear@plt>
   13f90:	add	x0, sp, #0x30
   13f94:	bl	4e30 <mpfr_clear@plt>
   13f98:	add	x0, sp, #0x90
   13f9c:	bl	50b0 <__gmpq_clear@plt>
   13fa0:	ldr	w0, [sp, #196]
   13fa4:	cmp	w0, #0x0
   13fa8:	b.lt	13fc4 <mpc_rootofunity@@Base+0x9b8>  // b.tstop
   13fac:	ldr	w0, [sp, #196]
   13fb0:	cmp	w0, #0x0
   13fb4:	cset	w0, ne  // ne = any
   13fb8:	and	w0, w0, #0xff
   13fbc:	mov	w1, w0
   13fc0:	b	13fc8 <mpc_rootofunity@@Base+0x9bc>
   13fc4:	mov	w1, #0x2                   	// #2
   13fc8:	ldr	w0, [sp, #192]
   13fcc:	cmp	w0, #0x0
   13fd0:	b.lt	13ff0 <mpc_rootofunity@@Base+0x9e4>  // b.tstop
   13fd4:	ldr	w0, [sp, #192]
   13fd8:	cmp	w0, #0x0
   13fdc:	b.eq	13fe8 <mpc_rootofunity@@Base+0x9dc>  // b.none
   13fe0:	mov	w0, #0x4                   	// #4
   13fe4:	b	13ff4 <mpc_rootofunity@@Base+0x9e8>
   13fe8:	mov	w0, #0x0                   	// #0
   13fec:	b	13ff4 <mpc_rootofunity@@Base+0x9e8>
   13ff0:	mov	w0, #0x8                   	// #8
   13ff4:	orr	w0, w1, w0
   13ff8:	ldp	x29, x30, [sp], #208
   13ffc:	ret

0000000000014000 <mpc_urandom@@Base>:
   14000:	stp	x29, x30, [sp, #-48]!
   14004:	mov	x29, sp
   14008:	str	x0, [sp, #24]
   1400c:	str	x1, [sp, #16]
   14010:	ldr	x0, [sp, #24]
   14014:	ldr	x1, [sp, #16]
   14018:	bl	5600 <mpfr_urandomb@plt>
   1401c:	str	w0, [sp, #44]
   14020:	ldr	x0, [sp, #24]
   14024:	add	x0, x0, #0x20
   14028:	ldr	x1, [sp, #16]
   1402c:	bl	5600 <mpfr_urandomb@plt>
   14030:	str	w0, [sp, #40]
   14034:	ldr	w0, [sp, #44]
   14038:	cmp	w0, #0x0
   1403c:	b.eq	14054 <mpc_urandom@@Base+0x54>  // b.none
   14040:	ldr	w0, [sp, #40]
   14044:	cmp	w0, #0x0
   14048:	b.eq	14054 <mpc_urandom@@Base+0x54>  // b.none
   1404c:	mov	w0, #0x1                   	// #1
   14050:	b	14058 <mpc_urandom@@Base+0x58>
   14054:	mov	w0, #0x0                   	// #0
   14058:	ldp	x29, x30, [sp], #48
   1405c:	ret

0000000000014060 <mpc_set@@Base>:
   14060:	stp	x29, x30, [sp, #-64]!
   14064:	mov	x29, sp
   14068:	str	x0, [sp, #40]
   1406c:	str	x1, [sp, #32]
   14070:	str	w2, [sp, #28]
   14074:	ldr	x4, [sp, #40]
   14078:	ldr	x1, [sp, #32]
   1407c:	ldr	w0, [sp, #28]
   14080:	and	w2, w0, #0xf
   14084:	ldr	x0, [sp, #32]
   14088:	ldr	w0, [x0, #8]
   1408c:	mov	w3, w0
   14090:	mov	x0, x4
   14094:	bl	52d0 <mpfr_set4@plt>
   14098:	str	w0, [sp, #60]
   1409c:	ldr	x0, [sp, #40]
   140a0:	add	x4, x0, #0x20
   140a4:	ldr	x0, [sp, #32]
   140a8:	add	x1, x0, #0x20
   140ac:	ldr	w0, [sp, #28]
   140b0:	asr	w2, w0, #4
   140b4:	ldr	x0, [sp, #32]
   140b8:	ldr	w0, [x0, #40]
   140bc:	mov	w3, w0
   140c0:	mov	x0, x4
   140c4:	bl	52d0 <mpfr_set4@plt>
   140c8:	str	w0, [sp, #56]
   140cc:	ldr	w0, [sp, #60]
   140d0:	cmp	w0, #0x0
   140d4:	b.lt	140f0 <mpc_set@@Base+0x90>  // b.tstop
   140d8:	ldr	w0, [sp, #60]
   140dc:	cmp	w0, #0x0
   140e0:	cset	w0, ne  // ne = any
   140e4:	and	w0, w0, #0xff
   140e8:	mov	w1, w0
   140ec:	b	140f4 <mpc_set@@Base+0x94>
   140f0:	mov	w1, #0x2                   	// #2
   140f4:	ldr	w0, [sp, #56]
   140f8:	cmp	w0, #0x0
   140fc:	b.lt	1411c <mpc_set@@Base+0xbc>  // b.tstop
   14100:	ldr	w0, [sp, #56]
   14104:	cmp	w0, #0x0
   14108:	b.eq	14114 <mpc_set@@Base+0xb4>  // b.none
   1410c:	mov	w0, #0x4                   	// #4
   14110:	b	14120 <mpc_set@@Base+0xc0>
   14114:	mov	w0, #0x0                   	// #0
   14118:	b	14120 <mpc_set@@Base+0xc0>
   1411c:	mov	w0, #0x8                   	// #8
   14120:	orr	w0, w1, w0
   14124:	ldp	x29, x30, [sp], #64
   14128:	ret

000000000001412c <mpc_set_prec@@Base>:
   1412c:	stp	x29, x30, [sp, #-32]!
   14130:	mov	x29, sp
   14134:	str	x0, [sp, #24]
   14138:	str	x1, [sp, #16]
   1413c:	ldr	x0, [sp, #24]
   14140:	ldr	x1, [sp, #16]
   14144:	bl	4d40 <mpfr_set_prec@plt>
   14148:	ldr	x0, [sp, #24]
   1414c:	add	x0, x0, #0x20
   14150:	ldr	x1, [sp, #16]
   14154:	bl	4d40 <mpfr_set_prec@plt>
   14158:	nop
   1415c:	ldp	x29, x30, [sp], #32
   14160:	ret

0000000000014164 <mpc_set_str@@Base>:
   14164:	stp	x29, x30, [sp, #-64]!
   14168:	mov	x29, sp
   1416c:	str	x0, [sp, #40]
   14170:	str	x1, [sp, #32]
   14174:	str	w2, [sp, #28]
   14178:	str	w3, [sp, #24]
   1417c:	add	x0, sp, #0x30
   14180:	ldr	w4, [sp, #24]
   14184:	ldr	w3, [sp, #28]
   14188:	mov	x2, x0
   1418c:	ldr	x1, [sp, #32]
   14190:	ldr	x0, [sp, #40]
   14194:	bl	5000 <mpc_strtoc@plt>
   14198:	str	w0, [sp, #60]
   1419c:	ldr	w0, [sp, #60]
   141a0:	cmn	w0, #0x1
   141a4:	b.eq	141fc <mpc_set_str@@Base+0x98>  // b.none
   141a8:	b	141b8 <mpc_set_str@@Base+0x54>
   141ac:	ldr	x0, [sp, #48]
   141b0:	add	x0, x0, #0x1
   141b4:	str	x0, [sp, #48]
   141b8:	bl	5270 <__ctype_b_loc@plt>
   141bc:	ldr	x1, [x0]
   141c0:	ldr	x0, [sp, #48]
   141c4:	ldrb	w0, [x0]
   141c8:	and	x0, x0, #0xff
   141cc:	lsl	x0, x0, #1
   141d0:	add	x0, x1, x0
   141d4:	ldrh	w0, [x0]
   141d8:	and	w0, w0, #0x2000
   141dc:	cmp	w0, #0x0
   141e0:	b.ne	141ac <mpc_set_str@@Base+0x48>  // b.any
   141e4:	ldr	x0, [sp, #48]
   141e8:	ldrb	w0, [x0]
   141ec:	cmp	w0, #0x0
   141f0:	b.ne	141fc <mpc_set_str@@Base+0x98>  // b.any
   141f4:	ldr	w0, [sp, #60]
   141f8:	b	14214 <mpc_set_str@@Base+0xb0>
   141fc:	ldr	x0, [sp, #40]
   14200:	bl	4b10 <mpfr_set_nan@plt>
   14204:	ldr	x0, [sp, #40]
   14208:	add	x0, x0, #0x20
   1420c:	bl	4b10 <mpfr_set_nan@plt>
   14210:	mov	w0, #0xffffffff            	// #-1
   14214:	ldp	x29, x30, [sp], #64
   14218:	ret

000000000001421c <mpc_set_fr@@Base>:
   1421c:	stp	x29, x30, [sp, #-80]!
   14220:	mov	x29, sp
   14224:	str	x0, [sp, #40]
   14228:	str	x1, [sp, #32]
   1422c:	str	w2, [sp, #28]
   14230:	ldr	x3, [sp, #40]
   14234:	ldr	w0, [sp, #28]
   14238:	and	w0, w0, #0xf
   1423c:	mov	w2, w0
   14240:	ldr	x1, [sp, #32]
   14244:	mov	x0, x3
   14248:	bl	4f70 <mpfr_set@plt>
   1424c:	str	w0, [sp, #76]
   14250:	ldr	x0, [sp, #40]
   14254:	add	x0, x0, #0x20
   14258:	str	x0, [sp, #64]
   1425c:	ldr	x0, [sp, #64]
   14260:	mov	w1, #0x1                   	// #1
   14264:	str	w1, [x0, #8]
   14268:	ldr	x0, [sp, #64]
   1426c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   14270:	str	x1, [x0, #16]
   14274:	mov	w0, #0x0                   	// #0
   14278:	str	w0, [sp, #60]
   1427c:	ldr	w0, [sp, #76]
   14280:	cmp	w0, #0x0
   14284:	b.lt	142a0 <mpc_set_fr@@Base+0x84>  // b.tstop
   14288:	ldr	w0, [sp, #76]
   1428c:	cmp	w0, #0x0
   14290:	cset	w0, ne  // ne = any
   14294:	and	w0, w0, #0xff
   14298:	mov	w1, w0
   1429c:	b	142a4 <mpc_set_fr@@Base+0x88>
   142a0:	mov	w1, #0x2                   	// #2
   142a4:	ldr	w0, [sp, #60]
   142a8:	cmp	w0, #0x0
   142ac:	b.lt	142cc <mpc_set_fr@@Base+0xb0>  // b.tstop
   142b0:	ldr	w0, [sp, #60]
   142b4:	cmp	w0, #0x0
   142b8:	b.eq	142c4 <mpc_set_fr@@Base+0xa8>  // b.none
   142bc:	mov	w0, #0x4                   	// #4
   142c0:	b	142d0 <mpc_set_fr@@Base+0xb4>
   142c4:	mov	w0, #0x0                   	// #0
   142c8:	b	142d0 <mpc_set_fr@@Base+0xb4>
   142cc:	mov	w0, #0x8                   	// #8
   142d0:	orr	w0, w1, w0
   142d4:	ldp	x29, x30, [sp], #80
   142d8:	ret

00000000000142dc <mpc_set_d@@Base>:
   142dc:	stp	x29, x30, [sp, #-80]!
   142e0:	mov	x29, sp
   142e4:	str	x0, [sp, #40]
   142e8:	str	d0, [sp, #32]
   142ec:	str	w1, [sp, #28]
   142f0:	ldr	x2, [sp, #40]
   142f4:	ldr	w0, [sp, #28]
   142f8:	and	w0, w0, #0xf
   142fc:	mov	w1, w0
   14300:	ldr	d0, [sp, #32]
   14304:	mov	x0, x2
   14308:	bl	4d00 <mpfr_set_d@plt>
   1430c:	str	w0, [sp, #76]
   14310:	ldr	x0, [sp, #40]
   14314:	add	x0, x0, #0x20
   14318:	str	x0, [sp, #64]
   1431c:	ldr	x0, [sp, #64]
   14320:	mov	w1, #0x1                   	// #1
   14324:	str	w1, [x0, #8]
   14328:	ldr	x0, [sp, #64]
   1432c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   14330:	str	x1, [x0, #16]
   14334:	mov	w0, #0x0                   	// #0
   14338:	str	w0, [sp, #60]
   1433c:	ldr	w0, [sp, #76]
   14340:	cmp	w0, #0x0
   14344:	b.lt	14360 <mpc_set_d@@Base+0x84>  // b.tstop
   14348:	ldr	w0, [sp, #76]
   1434c:	cmp	w0, #0x0
   14350:	cset	w0, ne  // ne = any
   14354:	and	w0, w0, #0xff
   14358:	mov	w1, w0
   1435c:	b	14364 <mpc_set_d@@Base+0x88>
   14360:	mov	w1, #0x2                   	// #2
   14364:	ldr	w0, [sp, #60]
   14368:	cmp	w0, #0x0
   1436c:	b.lt	1438c <mpc_set_d@@Base+0xb0>  // b.tstop
   14370:	ldr	w0, [sp, #60]
   14374:	cmp	w0, #0x0
   14378:	b.eq	14384 <mpc_set_d@@Base+0xa8>  // b.none
   1437c:	mov	w0, #0x4                   	// #4
   14380:	b	14390 <mpc_set_d@@Base+0xb4>
   14384:	mov	w0, #0x0                   	// #0
   14388:	b	14390 <mpc_set_d@@Base+0xb4>
   1438c:	mov	w0, #0x8                   	// #8
   14390:	orr	w0, w1, w0
   14394:	ldp	x29, x30, [sp], #80
   14398:	ret

000000000001439c <mpc_set_ld@@Base>:
   1439c:	stp	x29, x30, [sp, #-80]!
   143a0:	mov	x29, sp
   143a4:	str	x0, [sp, #40]
   143a8:	str	q0, [sp, #16]
   143ac:	str	w1, [sp, #36]
   143b0:	ldr	x2, [sp, #40]
   143b4:	ldr	w0, [sp, #36]
   143b8:	and	w0, w0, #0xf
   143bc:	mov	w1, w0
   143c0:	ldr	q0, [sp, #16]
   143c4:	mov	x0, x2
   143c8:	bl	4a80 <mpfr_set_ld@plt>
   143cc:	str	w0, [sp, #76]
   143d0:	ldr	x0, [sp, #40]
   143d4:	add	x0, x0, #0x20
   143d8:	str	x0, [sp, #64]
   143dc:	ldr	x0, [sp, #64]
   143e0:	mov	w1, #0x1                   	// #1
   143e4:	str	w1, [x0, #8]
   143e8:	ldr	x0, [sp, #64]
   143ec:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   143f0:	str	x1, [x0, #16]
   143f4:	mov	w0, #0x0                   	// #0
   143f8:	str	w0, [sp, #60]
   143fc:	ldr	w0, [sp, #76]
   14400:	cmp	w0, #0x0
   14404:	b.lt	14420 <mpc_set_ld@@Base+0x84>  // b.tstop
   14408:	ldr	w0, [sp, #76]
   1440c:	cmp	w0, #0x0
   14410:	cset	w0, ne  // ne = any
   14414:	and	w0, w0, #0xff
   14418:	mov	w1, w0
   1441c:	b	14424 <mpc_set_ld@@Base+0x88>
   14420:	mov	w1, #0x2                   	// #2
   14424:	ldr	w0, [sp, #60]
   14428:	cmp	w0, #0x0
   1442c:	b.lt	1444c <mpc_set_ld@@Base+0xb0>  // b.tstop
   14430:	ldr	w0, [sp, #60]
   14434:	cmp	w0, #0x0
   14438:	b.eq	14444 <mpc_set_ld@@Base+0xa8>  // b.none
   1443c:	mov	w0, #0x4                   	// #4
   14440:	b	14450 <mpc_set_ld@@Base+0xb4>
   14444:	mov	w0, #0x0                   	// #0
   14448:	b	14450 <mpc_set_ld@@Base+0xb4>
   1444c:	mov	w0, #0x8                   	// #8
   14450:	orr	w0, w1, w0
   14454:	ldp	x29, x30, [sp], #80
   14458:	ret

000000000001445c <mpc_set_ui@@Base>:
   1445c:	stp	x29, x30, [sp, #-80]!
   14460:	mov	x29, sp
   14464:	str	x0, [sp, #40]
   14468:	str	x1, [sp, #32]
   1446c:	str	w2, [sp, #28]
   14470:	ldr	x3, [sp, #40]
   14474:	ldr	w0, [sp, #28]
   14478:	and	w0, w0, #0xf
   1447c:	mov	w2, w0
   14480:	ldr	x1, [sp, #32]
   14484:	mov	x0, x3
   14488:	bl	5610 <mpfr_set_ui@plt>
   1448c:	str	w0, [sp, #76]
   14490:	ldr	x0, [sp, #40]
   14494:	add	x0, x0, #0x20
   14498:	str	x0, [sp, #64]
   1449c:	ldr	x0, [sp, #64]
   144a0:	mov	w1, #0x1                   	// #1
   144a4:	str	w1, [x0, #8]
   144a8:	ldr	x0, [sp, #64]
   144ac:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   144b0:	str	x1, [x0, #16]
   144b4:	mov	w0, #0x0                   	// #0
   144b8:	str	w0, [sp, #60]
   144bc:	ldr	w0, [sp, #76]
   144c0:	cmp	w0, #0x0
   144c4:	b.lt	144e0 <mpc_set_ui@@Base+0x84>  // b.tstop
   144c8:	ldr	w0, [sp, #76]
   144cc:	cmp	w0, #0x0
   144d0:	cset	w0, ne  // ne = any
   144d4:	and	w0, w0, #0xff
   144d8:	mov	w1, w0
   144dc:	b	144e4 <mpc_set_ui@@Base+0x88>
   144e0:	mov	w1, #0x2                   	// #2
   144e4:	ldr	w0, [sp, #60]
   144e8:	cmp	w0, #0x0
   144ec:	b.lt	1450c <mpc_set_ui@@Base+0xb0>  // b.tstop
   144f0:	ldr	w0, [sp, #60]
   144f4:	cmp	w0, #0x0
   144f8:	b.eq	14504 <mpc_set_ui@@Base+0xa8>  // b.none
   144fc:	mov	w0, #0x4                   	// #4
   14500:	b	14510 <mpc_set_ui@@Base+0xb4>
   14504:	mov	w0, #0x0                   	// #0
   14508:	b	14510 <mpc_set_ui@@Base+0xb4>
   1450c:	mov	w0, #0x8                   	// #8
   14510:	orr	w0, w1, w0
   14514:	ldp	x29, x30, [sp], #80
   14518:	ret

000000000001451c <mpc_set_si@@Base>:
   1451c:	stp	x29, x30, [sp, #-80]!
   14520:	mov	x29, sp
   14524:	str	x0, [sp, #40]
   14528:	str	x1, [sp, #32]
   1452c:	str	w2, [sp, #28]
   14530:	ldr	x3, [sp, #40]
   14534:	ldr	w0, [sp, #28]
   14538:	and	w0, w0, #0xf
   1453c:	mov	w2, w0
   14540:	ldr	x1, [sp, #32]
   14544:	mov	x0, x3
   14548:	bl	5370 <mpfr_set_si@plt>
   1454c:	str	w0, [sp, #76]
   14550:	ldr	x0, [sp, #40]
   14554:	add	x0, x0, #0x20
   14558:	str	x0, [sp, #64]
   1455c:	ldr	x0, [sp, #64]
   14560:	mov	w1, #0x1                   	// #1
   14564:	str	w1, [x0, #8]
   14568:	ldr	x0, [sp, #64]
   1456c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   14570:	str	x1, [x0, #16]
   14574:	mov	w0, #0x0                   	// #0
   14578:	str	w0, [sp, #60]
   1457c:	ldr	w0, [sp, #76]
   14580:	cmp	w0, #0x0
   14584:	b.lt	145a0 <mpc_set_si@@Base+0x84>  // b.tstop
   14588:	ldr	w0, [sp, #76]
   1458c:	cmp	w0, #0x0
   14590:	cset	w0, ne  // ne = any
   14594:	and	w0, w0, #0xff
   14598:	mov	w1, w0
   1459c:	b	145a4 <mpc_set_si@@Base+0x88>
   145a0:	mov	w1, #0x2                   	// #2
   145a4:	ldr	w0, [sp, #60]
   145a8:	cmp	w0, #0x0
   145ac:	b.lt	145cc <mpc_set_si@@Base+0xb0>  // b.tstop
   145b0:	ldr	w0, [sp, #60]
   145b4:	cmp	w0, #0x0
   145b8:	b.eq	145c4 <mpc_set_si@@Base+0xa8>  // b.none
   145bc:	mov	w0, #0x4                   	// #4
   145c0:	b	145d0 <mpc_set_si@@Base+0xb4>
   145c4:	mov	w0, #0x0                   	// #0
   145c8:	b	145d0 <mpc_set_si@@Base+0xb4>
   145cc:	mov	w0, #0x8                   	// #8
   145d0:	orr	w0, w1, w0
   145d4:	ldp	x29, x30, [sp], #80
   145d8:	ret

00000000000145dc <mpc_set_z@@Base>:
   145dc:	stp	x29, x30, [sp, #-80]!
   145e0:	mov	x29, sp
   145e4:	str	x0, [sp, #40]
   145e8:	str	x1, [sp, #32]
   145ec:	str	w2, [sp, #28]
   145f0:	ldr	x3, [sp, #40]
   145f4:	ldr	w0, [sp, #28]
   145f8:	and	w0, w0, #0xf
   145fc:	mov	w2, w0
   14600:	ldr	x1, [sp, #32]
   14604:	mov	x0, x3
   14608:	bl	4fb0 <mpfr_set_z@plt>
   1460c:	str	w0, [sp, #76]
   14610:	ldr	x0, [sp, #40]
   14614:	add	x0, x0, #0x20
   14618:	str	x0, [sp, #64]
   1461c:	ldr	x0, [sp, #64]
   14620:	mov	w1, #0x1                   	// #1
   14624:	str	w1, [x0, #8]
   14628:	ldr	x0, [sp, #64]
   1462c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   14630:	str	x1, [x0, #16]
   14634:	mov	w0, #0x0                   	// #0
   14638:	str	w0, [sp, #60]
   1463c:	ldr	w0, [sp, #76]
   14640:	cmp	w0, #0x0
   14644:	b.lt	14660 <mpc_set_z@@Base+0x84>  // b.tstop
   14648:	ldr	w0, [sp, #76]
   1464c:	cmp	w0, #0x0
   14650:	cset	w0, ne  // ne = any
   14654:	and	w0, w0, #0xff
   14658:	mov	w1, w0
   1465c:	b	14664 <mpc_set_z@@Base+0x88>
   14660:	mov	w1, #0x2                   	// #2
   14664:	ldr	w0, [sp, #60]
   14668:	cmp	w0, #0x0
   1466c:	b.lt	1468c <mpc_set_z@@Base+0xb0>  // b.tstop
   14670:	ldr	w0, [sp, #60]
   14674:	cmp	w0, #0x0
   14678:	b.eq	14684 <mpc_set_z@@Base+0xa8>  // b.none
   1467c:	mov	w0, #0x4                   	// #4
   14680:	b	14690 <mpc_set_z@@Base+0xb4>
   14684:	mov	w0, #0x0                   	// #0
   14688:	b	14690 <mpc_set_z@@Base+0xb4>
   1468c:	mov	w0, #0x8                   	// #8
   14690:	orr	w0, w1, w0
   14694:	ldp	x29, x30, [sp], #80
   14698:	ret

000000000001469c <mpc_set_q@@Base>:
   1469c:	stp	x29, x30, [sp, #-80]!
   146a0:	mov	x29, sp
   146a4:	str	x0, [sp, #40]
   146a8:	str	x1, [sp, #32]
   146ac:	str	w2, [sp, #28]
   146b0:	ldr	x3, [sp, #40]
   146b4:	ldr	w0, [sp, #28]
   146b8:	and	w0, w0, #0xf
   146bc:	mov	w2, w0
   146c0:	ldr	x1, [sp, #32]
   146c4:	mov	x0, x3
   146c8:	bl	5390 <mpfr_set_q@plt>
   146cc:	str	w0, [sp, #76]
   146d0:	ldr	x0, [sp, #40]
   146d4:	add	x0, x0, #0x20
   146d8:	str	x0, [sp, #64]
   146dc:	ldr	x0, [sp, #64]
   146e0:	mov	w1, #0x1                   	// #1
   146e4:	str	w1, [x0, #8]
   146e8:	ldr	x0, [sp, #64]
   146ec:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   146f0:	str	x1, [x0, #16]
   146f4:	mov	w0, #0x0                   	// #0
   146f8:	str	w0, [sp, #60]
   146fc:	ldr	w0, [sp, #76]
   14700:	cmp	w0, #0x0
   14704:	b.lt	14720 <mpc_set_q@@Base+0x84>  // b.tstop
   14708:	ldr	w0, [sp, #76]
   1470c:	cmp	w0, #0x0
   14710:	cset	w0, ne  // ne = any
   14714:	and	w0, w0, #0xff
   14718:	mov	w1, w0
   1471c:	b	14724 <mpc_set_q@@Base+0x88>
   14720:	mov	w1, #0x2                   	// #2
   14724:	ldr	w0, [sp, #60]
   14728:	cmp	w0, #0x0
   1472c:	b.lt	1474c <mpc_set_q@@Base+0xb0>  // b.tstop
   14730:	ldr	w0, [sp, #60]
   14734:	cmp	w0, #0x0
   14738:	b.eq	14744 <mpc_set_q@@Base+0xa8>  // b.none
   1473c:	mov	w0, #0x4                   	// #4
   14740:	b	14750 <mpc_set_q@@Base+0xb4>
   14744:	mov	w0, #0x0                   	// #0
   14748:	b	14750 <mpc_set_q@@Base+0xb4>
   1474c:	mov	w0, #0x8                   	// #8
   14750:	orr	w0, w1, w0
   14754:	ldp	x29, x30, [sp], #80
   14758:	ret

000000000001475c <mpc_set_f@@Base>:
   1475c:	stp	x29, x30, [sp, #-80]!
   14760:	mov	x29, sp
   14764:	str	x0, [sp, #40]
   14768:	str	x1, [sp, #32]
   1476c:	str	w2, [sp, #28]
   14770:	ldr	x3, [sp, #40]
   14774:	ldr	w0, [sp, #28]
   14778:	and	w0, w0, #0xf
   1477c:	mov	w2, w0
   14780:	ldr	x1, [sp, #32]
   14784:	mov	x0, x3
   14788:	bl	4c30 <mpfr_set_f@plt>
   1478c:	str	w0, [sp, #76]
   14790:	ldr	x0, [sp, #40]
   14794:	add	x0, x0, #0x20
   14798:	str	x0, [sp, #64]
   1479c:	ldr	x0, [sp, #64]
   147a0:	mov	w1, #0x1                   	// #1
   147a4:	str	w1, [x0, #8]
   147a8:	ldr	x0, [sp, #64]
   147ac:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   147b0:	str	x1, [x0, #16]
   147b4:	mov	w0, #0x0                   	// #0
   147b8:	str	w0, [sp, #60]
   147bc:	ldr	w0, [sp, #76]
   147c0:	cmp	w0, #0x0
   147c4:	b.lt	147e0 <mpc_set_f@@Base+0x84>  // b.tstop
   147c8:	ldr	w0, [sp, #76]
   147cc:	cmp	w0, #0x0
   147d0:	cset	w0, ne  // ne = any
   147d4:	and	w0, w0, #0xff
   147d8:	mov	w1, w0
   147dc:	b	147e4 <mpc_set_f@@Base+0x88>
   147e0:	mov	w1, #0x2                   	// #2
   147e4:	ldr	w0, [sp, #60]
   147e8:	cmp	w0, #0x0
   147ec:	b.lt	1480c <mpc_set_f@@Base+0xb0>  // b.tstop
   147f0:	ldr	w0, [sp, #60]
   147f4:	cmp	w0, #0x0
   147f8:	b.eq	14804 <mpc_set_f@@Base+0xa8>  // b.none
   147fc:	mov	w0, #0x4                   	// #4
   14800:	b	14810 <mpc_set_f@@Base+0xb4>
   14804:	mov	w0, #0x0                   	// #0
   14808:	b	14810 <mpc_set_f@@Base+0xb4>
   1480c:	mov	w0, #0x8                   	// #8
   14810:	orr	w0, w1, w0
   14814:	ldp	x29, x30, [sp], #80
   14818:	ret

000000000001481c <mpc_set_uj@@Base>:
   1481c:	stp	x29, x30, [sp, #-80]!
   14820:	mov	x29, sp
   14824:	str	x0, [sp, #40]
   14828:	str	x1, [sp, #32]
   1482c:	str	w2, [sp, #28]
   14830:	ldr	x3, [sp, #40]
   14834:	ldr	w0, [sp, #28]
   14838:	and	w0, w0, #0xf
   1483c:	mov	w2, w0
   14840:	ldr	x1, [sp, #32]
   14844:	mov	x0, x3
   14848:	bl	5500 <__gmpfr_set_uj@plt>
   1484c:	str	w0, [sp, #76]
   14850:	ldr	x0, [sp, #40]
   14854:	add	x0, x0, #0x20
   14858:	str	x0, [sp, #64]
   1485c:	ldr	x0, [sp, #64]
   14860:	mov	w1, #0x1                   	// #1
   14864:	str	w1, [x0, #8]
   14868:	ldr	x0, [sp, #64]
   1486c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   14870:	str	x1, [x0, #16]
   14874:	mov	w0, #0x0                   	// #0
   14878:	str	w0, [sp, #60]
   1487c:	ldr	w0, [sp, #76]
   14880:	cmp	w0, #0x0
   14884:	b.lt	148a0 <mpc_set_uj@@Base+0x84>  // b.tstop
   14888:	ldr	w0, [sp, #76]
   1488c:	cmp	w0, #0x0
   14890:	cset	w0, ne  // ne = any
   14894:	and	w0, w0, #0xff
   14898:	mov	w1, w0
   1489c:	b	148a4 <mpc_set_uj@@Base+0x88>
   148a0:	mov	w1, #0x2                   	// #2
   148a4:	ldr	w0, [sp, #60]
   148a8:	cmp	w0, #0x0
   148ac:	b.lt	148cc <mpc_set_uj@@Base+0xb0>  // b.tstop
   148b0:	ldr	w0, [sp, #60]
   148b4:	cmp	w0, #0x0
   148b8:	b.eq	148c4 <mpc_set_uj@@Base+0xa8>  // b.none
   148bc:	mov	w0, #0x4                   	// #4
   148c0:	b	148d0 <mpc_set_uj@@Base+0xb4>
   148c4:	mov	w0, #0x0                   	// #0
   148c8:	b	148d0 <mpc_set_uj@@Base+0xb4>
   148cc:	mov	w0, #0x8                   	// #8
   148d0:	orr	w0, w1, w0
   148d4:	ldp	x29, x30, [sp], #80
   148d8:	ret

00000000000148dc <mpc_set_sj@@Base>:
   148dc:	stp	x29, x30, [sp, #-80]!
   148e0:	mov	x29, sp
   148e4:	str	x0, [sp, #40]
   148e8:	str	x1, [sp, #32]
   148ec:	str	w2, [sp, #28]
   148f0:	ldr	x3, [sp, #40]
   148f4:	ldr	w0, [sp, #28]
   148f8:	and	w0, w0, #0xf
   148fc:	mov	w2, w0
   14900:	ldr	x1, [sp, #32]
   14904:	mov	x0, x3
   14908:	bl	4e50 <__gmpfr_set_sj@plt>
   1490c:	str	w0, [sp, #76]
   14910:	ldr	x0, [sp, #40]
   14914:	add	x0, x0, #0x20
   14918:	str	x0, [sp, #64]
   1491c:	ldr	x0, [sp, #64]
   14920:	mov	w1, #0x1                   	// #1
   14924:	str	w1, [x0, #8]
   14928:	ldr	x0, [sp, #64]
   1492c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   14930:	str	x1, [x0, #16]
   14934:	mov	w0, #0x0                   	// #0
   14938:	str	w0, [sp, #60]
   1493c:	ldr	w0, [sp, #76]
   14940:	cmp	w0, #0x0
   14944:	b.lt	14960 <mpc_set_sj@@Base+0x84>  // b.tstop
   14948:	ldr	w0, [sp, #76]
   1494c:	cmp	w0, #0x0
   14950:	cset	w0, ne  // ne = any
   14954:	and	w0, w0, #0xff
   14958:	mov	w1, w0
   1495c:	b	14964 <mpc_set_sj@@Base+0x88>
   14960:	mov	w1, #0x2                   	// #2
   14964:	ldr	w0, [sp, #60]
   14968:	cmp	w0, #0x0
   1496c:	b.lt	1498c <mpc_set_sj@@Base+0xb0>  // b.tstop
   14970:	ldr	w0, [sp, #60]
   14974:	cmp	w0, #0x0
   14978:	b.eq	14984 <mpc_set_sj@@Base+0xa8>  // b.none
   1497c:	mov	w0, #0x4                   	// #4
   14980:	b	14990 <mpc_set_sj@@Base+0xb4>
   14984:	mov	w0, #0x0                   	// #0
   14988:	b	14990 <mpc_set_sj@@Base+0xb4>
   1498c:	mov	w0, #0x8                   	// #8
   14990:	orr	w0, w1, w0
   14994:	ldp	x29, x30, [sp], #80
   14998:	ret

000000000001499c <mpc_set_dc@@Base>:
   1499c:	stp	x29, x30, [sp, #-48]!
   149a0:	mov	x29, sp
   149a4:	str	x0, [sp, #40]
   149a8:	fmov	d2, d0
   149ac:	fmov	d0, d1
   149b0:	fmov	d1, d2
   149b4:	str	d1, [sp, #24]
   149b8:	str	d0, [sp, #32]
   149bc:	str	w1, [sp, #20]
   149c0:	ldr	d0, [sp, #24]
   149c4:	ldr	d1, [sp, #32]
   149c8:	ldr	w1, [sp, #20]
   149cc:	ldr	x0, [sp, #40]
   149d0:	bl	5090 <mpc_set_d_d@plt>
   149d4:	ldp	x29, x30, [sp], #48
   149d8:	ret

00000000000149dc <mpc_set_ldc@@Base>:
   149dc:	stp	x29, x30, [sp, #-64]!
   149e0:	mov	x29, sp
   149e4:	str	x0, [sp, #56]
   149e8:	mov	v2.16b, v0.16b
   149ec:	mov	v0.16b, v1.16b
   149f0:	str	q2, [sp, #16]
   149f4:	str	q0, [sp, #32]
   149f8:	str	w1, [sp, #52]
   149fc:	ldr	q0, [sp, #16]
   14a00:	ldr	q2, [sp, #32]
   14a04:	ldr	w1, [sp, #52]
   14a08:	mov	v1.16b, v2.16b
   14a0c:	ldr	x0, [sp, #56]
   14a10:	bl	4e10 <mpc_set_ld_ld@plt>
   14a14:	ldp	x29, x30, [sp], #64
   14a18:	ret

0000000000014a1c <mpc_set_nan@@Base>:
   14a1c:	stp	x29, x30, [sp, #-32]!
   14a20:	mov	x29, sp
   14a24:	str	x0, [sp, #24]
   14a28:	ldr	x0, [sp, #24]
   14a2c:	bl	4b10 <mpfr_set_nan@plt>
   14a30:	ldr	x0, [sp, #24]
   14a34:	add	x0, x0, #0x20
   14a38:	bl	4b10 <mpfr_set_nan@plt>
   14a3c:	nop
   14a40:	ldp	x29, x30, [sp], #32
   14a44:	ret

0000000000014a48 <mpc_set_d_d@@Base>:
   14a48:	stp	x29, x30, [sp, #-64]!
   14a4c:	mov	x29, sp
   14a50:	str	x0, [sp, #40]
   14a54:	str	d0, [sp, #32]
   14a58:	str	d1, [sp, #24]
   14a5c:	str	w1, [sp, #20]
   14a60:	ldr	x2, [sp, #40]
   14a64:	ldr	w0, [sp, #20]
   14a68:	and	w0, w0, #0xf
   14a6c:	mov	w1, w0
   14a70:	ldr	d0, [sp, #32]
   14a74:	mov	x0, x2
   14a78:	bl	4d00 <mpfr_set_d@plt>
   14a7c:	str	w0, [sp, #60]
   14a80:	ldr	x0, [sp, #40]
   14a84:	add	x2, x0, #0x20
   14a88:	ldr	w0, [sp, #20]
   14a8c:	asr	w0, w0, #4
   14a90:	mov	w1, w0
   14a94:	ldr	d0, [sp, #24]
   14a98:	mov	x0, x2
   14a9c:	bl	4d00 <mpfr_set_d@plt>
   14aa0:	str	w0, [sp, #56]
   14aa4:	ldr	w0, [sp, #60]
   14aa8:	cmp	w0, #0x0
   14aac:	b.lt	14ac8 <mpc_set_d_d@@Base+0x80>  // b.tstop
   14ab0:	ldr	w0, [sp, #60]
   14ab4:	cmp	w0, #0x0
   14ab8:	cset	w0, ne  // ne = any
   14abc:	and	w0, w0, #0xff
   14ac0:	mov	w1, w0
   14ac4:	b	14acc <mpc_set_d_d@@Base+0x84>
   14ac8:	mov	w1, #0x2                   	// #2
   14acc:	ldr	w0, [sp, #56]
   14ad0:	cmp	w0, #0x0
   14ad4:	b.lt	14af4 <mpc_set_d_d@@Base+0xac>  // b.tstop
   14ad8:	ldr	w0, [sp, #56]
   14adc:	cmp	w0, #0x0
   14ae0:	b.eq	14aec <mpc_set_d_d@@Base+0xa4>  // b.none
   14ae4:	mov	w0, #0x4                   	// #4
   14ae8:	b	14af8 <mpc_set_d_d@@Base+0xb0>
   14aec:	mov	w0, #0x0                   	// #0
   14af0:	b	14af8 <mpc_set_d_d@@Base+0xb0>
   14af4:	mov	w0, #0x8                   	// #8
   14af8:	orr	w0, w1, w0
   14afc:	ldp	x29, x30, [sp], #64
   14b00:	ret

0000000000014b04 <mpc_set_f_f@@Base>:
   14b04:	stp	x29, x30, [sp, #-64]!
   14b08:	mov	x29, sp
   14b0c:	str	x0, [sp, #40]
   14b10:	str	x1, [sp, #32]
   14b14:	str	x2, [sp, #24]
   14b18:	str	w3, [sp, #20]
   14b1c:	ldr	x3, [sp, #40]
   14b20:	ldr	w0, [sp, #20]
   14b24:	and	w0, w0, #0xf
   14b28:	mov	w2, w0
   14b2c:	ldr	x1, [sp, #32]
   14b30:	mov	x0, x3
   14b34:	bl	4c30 <mpfr_set_f@plt>
   14b38:	str	w0, [sp, #60]
   14b3c:	ldr	x0, [sp, #40]
   14b40:	add	x3, x0, #0x20
   14b44:	ldr	w0, [sp, #20]
   14b48:	asr	w0, w0, #4
   14b4c:	mov	w2, w0
   14b50:	ldr	x1, [sp, #24]
   14b54:	mov	x0, x3
   14b58:	bl	4c30 <mpfr_set_f@plt>
   14b5c:	str	w0, [sp, #56]
   14b60:	ldr	w0, [sp, #60]
   14b64:	cmp	w0, #0x0
   14b68:	b.lt	14b84 <mpc_set_f_f@@Base+0x80>  // b.tstop
   14b6c:	ldr	w0, [sp, #60]
   14b70:	cmp	w0, #0x0
   14b74:	cset	w0, ne  // ne = any
   14b78:	and	w0, w0, #0xff
   14b7c:	mov	w1, w0
   14b80:	b	14b88 <mpc_set_f_f@@Base+0x84>
   14b84:	mov	w1, #0x2                   	// #2
   14b88:	ldr	w0, [sp, #56]
   14b8c:	cmp	w0, #0x0
   14b90:	b.lt	14bb0 <mpc_set_f_f@@Base+0xac>  // b.tstop
   14b94:	ldr	w0, [sp, #56]
   14b98:	cmp	w0, #0x0
   14b9c:	b.eq	14ba8 <mpc_set_f_f@@Base+0xa4>  // b.none
   14ba0:	mov	w0, #0x4                   	// #4
   14ba4:	b	14bb4 <mpc_set_f_f@@Base+0xb0>
   14ba8:	mov	w0, #0x0                   	// #0
   14bac:	b	14bb4 <mpc_set_f_f@@Base+0xb0>
   14bb0:	mov	w0, #0x8                   	// #8
   14bb4:	orr	w0, w1, w0
   14bb8:	ldp	x29, x30, [sp], #64
   14bbc:	ret

0000000000014bc0 <mpc_set_fr_fr@@Base>:
   14bc0:	stp	x29, x30, [sp, #-64]!
   14bc4:	mov	x29, sp
   14bc8:	str	x0, [sp, #40]
   14bcc:	str	x1, [sp, #32]
   14bd0:	str	x2, [sp, #24]
   14bd4:	str	w3, [sp, #20]
   14bd8:	ldr	x3, [sp, #40]
   14bdc:	ldr	w0, [sp, #20]
   14be0:	and	w0, w0, #0xf
   14be4:	mov	w2, w0
   14be8:	ldr	x1, [sp, #32]
   14bec:	mov	x0, x3
   14bf0:	bl	4f70 <mpfr_set@plt>
   14bf4:	str	w0, [sp, #60]
   14bf8:	ldr	x0, [sp, #40]
   14bfc:	add	x3, x0, #0x20
   14c00:	ldr	w0, [sp, #20]
   14c04:	asr	w0, w0, #4
   14c08:	mov	w2, w0
   14c0c:	ldr	x1, [sp, #24]
   14c10:	mov	x0, x3
   14c14:	bl	4f70 <mpfr_set@plt>
   14c18:	str	w0, [sp, #56]
   14c1c:	ldr	w0, [sp, #60]
   14c20:	cmp	w0, #0x0
   14c24:	b.lt	14c40 <mpc_set_fr_fr@@Base+0x80>  // b.tstop
   14c28:	ldr	w0, [sp, #60]
   14c2c:	cmp	w0, #0x0
   14c30:	cset	w0, ne  // ne = any
   14c34:	and	w0, w0, #0xff
   14c38:	mov	w1, w0
   14c3c:	b	14c44 <mpc_set_fr_fr@@Base+0x84>
   14c40:	mov	w1, #0x2                   	// #2
   14c44:	ldr	w0, [sp, #56]
   14c48:	cmp	w0, #0x0
   14c4c:	b.lt	14c6c <mpc_set_fr_fr@@Base+0xac>  // b.tstop
   14c50:	ldr	w0, [sp, #56]
   14c54:	cmp	w0, #0x0
   14c58:	b.eq	14c64 <mpc_set_fr_fr@@Base+0xa4>  // b.none
   14c5c:	mov	w0, #0x4                   	// #4
   14c60:	b	14c70 <mpc_set_fr_fr@@Base+0xb0>
   14c64:	mov	w0, #0x0                   	// #0
   14c68:	b	14c70 <mpc_set_fr_fr@@Base+0xb0>
   14c6c:	mov	w0, #0x8                   	// #8
   14c70:	orr	w0, w1, w0
   14c74:	ldp	x29, x30, [sp], #64
   14c78:	ret

0000000000014c7c <mpc_set_ld_ld@@Base>:
   14c7c:	stp	x29, x30, [sp, #-80]!
   14c80:	mov	x29, sp
   14c84:	str	x0, [sp, #56]
   14c88:	str	q0, [sp, #32]
   14c8c:	str	q1, [sp, #16]
   14c90:	str	w1, [sp, #52]
   14c94:	ldr	x2, [sp, #56]
   14c98:	ldr	w0, [sp, #52]
   14c9c:	and	w0, w0, #0xf
   14ca0:	mov	w1, w0
   14ca4:	ldr	q0, [sp, #32]
   14ca8:	mov	x0, x2
   14cac:	bl	4a80 <mpfr_set_ld@plt>
   14cb0:	str	w0, [sp, #76]
   14cb4:	ldr	x0, [sp, #56]
   14cb8:	add	x2, x0, #0x20
   14cbc:	ldr	w0, [sp, #52]
   14cc0:	asr	w0, w0, #4
   14cc4:	mov	w1, w0
   14cc8:	ldr	q0, [sp, #16]
   14ccc:	mov	x0, x2
   14cd0:	bl	4a80 <mpfr_set_ld@plt>
   14cd4:	str	w0, [sp, #72]
   14cd8:	ldr	w0, [sp, #76]
   14cdc:	cmp	w0, #0x0
   14ce0:	b.lt	14cfc <mpc_set_ld_ld@@Base+0x80>  // b.tstop
   14ce4:	ldr	w0, [sp, #76]
   14ce8:	cmp	w0, #0x0
   14cec:	cset	w0, ne  // ne = any
   14cf0:	and	w0, w0, #0xff
   14cf4:	mov	w1, w0
   14cf8:	b	14d00 <mpc_set_ld_ld@@Base+0x84>
   14cfc:	mov	w1, #0x2                   	// #2
   14d00:	ldr	w0, [sp, #72]
   14d04:	cmp	w0, #0x0
   14d08:	b.lt	14d28 <mpc_set_ld_ld@@Base+0xac>  // b.tstop
   14d0c:	ldr	w0, [sp, #72]
   14d10:	cmp	w0, #0x0
   14d14:	b.eq	14d20 <mpc_set_ld_ld@@Base+0xa4>  // b.none
   14d18:	mov	w0, #0x4                   	// #4
   14d1c:	b	14d2c <mpc_set_ld_ld@@Base+0xb0>
   14d20:	mov	w0, #0x0                   	// #0
   14d24:	b	14d2c <mpc_set_ld_ld@@Base+0xb0>
   14d28:	mov	w0, #0x8                   	// #8
   14d2c:	orr	w0, w1, w0
   14d30:	ldp	x29, x30, [sp], #80
   14d34:	ret

0000000000014d38 <mpc_set_q_q@@Base>:
   14d38:	stp	x29, x30, [sp, #-64]!
   14d3c:	mov	x29, sp
   14d40:	str	x0, [sp, #40]
   14d44:	str	x1, [sp, #32]
   14d48:	str	x2, [sp, #24]
   14d4c:	str	w3, [sp, #20]
   14d50:	ldr	x3, [sp, #40]
   14d54:	ldr	w0, [sp, #20]
   14d58:	and	w0, w0, #0xf
   14d5c:	mov	w2, w0
   14d60:	ldr	x1, [sp, #32]
   14d64:	mov	x0, x3
   14d68:	bl	5390 <mpfr_set_q@plt>
   14d6c:	str	w0, [sp, #60]
   14d70:	ldr	x0, [sp, #40]
   14d74:	add	x3, x0, #0x20
   14d78:	ldr	w0, [sp, #20]
   14d7c:	asr	w0, w0, #4
   14d80:	mov	w2, w0
   14d84:	ldr	x1, [sp, #24]
   14d88:	mov	x0, x3
   14d8c:	bl	5390 <mpfr_set_q@plt>
   14d90:	str	w0, [sp, #56]
   14d94:	ldr	w0, [sp, #60]
   14d98:	cmp	w0, #0x0
   14d9c:	b.lt	14db8 <mpc_set_q_q@@Base+0x80>  // b.tstop
   14da0:	ldr	w0, [sp, #60]
   14da4:	cmp	w0, #0x0
   14da8:	cset	w0, ne  // ne = any
   14dac:	and	w0, w0, #0xff
   14db0:	mov	w1, w0
   14db4:	b	14dbc <mpc_set_q_q@@Base+0x84>
   14db8:	mov	w1, #0x2                   	// #2
   14dbc:	ldr	w0, [sp, #56]
   14dc0:	cmp	w0, #0x0
   14dc4:	b.lt	14de4 <mpc_set_q_q@@Base+0xac>  // b.tstop
   14dc8:	ldr	w0, [sp, #56]
   14dcc:	cmp	w0, #0x0
   14dd0:	b.eq	14ddc <mpc_set_q_q@@Base+0xa4>  // b.none
   14dd4:	mov	w0, #0x4                   	// #4
   14dd8:	b	14de8 <mpc_set_q_q@@Base+0xb0>
   14ddc:	mov	w0, #0x0                   	// #0
   14de0:	b	14de8 <mpc_set_q_q@@Base+0xb0>
   14de4:	mov	w0, #0x8                   	// #8
   14de8:	orr	w0, w1, w0
   14dec:	ldp	x29, x30, [sp], #64
   14df0:	ret

0000000000014df4 <mpc_set_si_si@@Base>:
   14df4:	stp	x29, x30, [sp, #-64]!
   14df8:	mov	x29, sp
   14dfc:	str	x0, [sp, #40]
   14e00:	str	x1, [sp, #32]
   14e04:	str	x2, [sp, #24]
   14e08:	str	w3, [sp, #20]
   14e0c:	ldr	x3, [sp, #40]
   14e10:	ldr	w0, [sp, #20]
   14e14:	and	w0, w0, #0xf
   14e18:	mov	w2, w0
   14e1c:	ldr	x1, [sp, #32]
   14e20:	mov	x0, x3
   14e24:	bl	5370 <mpfr_set_si@plt>
   14e28:	str	w0, [sp, #60]
   14e2c:	ldr	x0, [sp, #40]
   14e30:	add	x3, x0, #0x20
   14e34:	ldr	w0, [sp, #20]
   14e38:	asr	w0, w0, #4
   14e3c:	mov	w2, w0
   14e40:	ldr	x1, [sp, #24]
   14e44:	mov	x0, x3
   14e48:	bl	5370 <mpfr_set_si@plt>
   14e4c:	str	w0, [sp, #56]
   14e50:	ldr	w0, [sp, #60]
   14e54:	cmp	w0, #0x0
   14e58:	b.lt	14e74 <mpc_set_si_si@@Base+0x80>  // b.tstop
   14e5c:	ldr	w0, [sp, #60]
   14e60:	cmp	w0, #0x0
   14e64:	cset	w0, ne  // ne = any
   14e68:	and	w0, w0, #0xff
   14e6c:	mov	w1, w0
   14e70:	b	14e78 <mpc_set_si_si@@Base+0x84>
   14e74:	mov	w1, #0x2                   	// #2
   14e78:	ldr	w0, [sp, #56]
   14e7c:	cmp	w0, #0x0
   14e80:	b.lt	14ea0 <mpc_set_si_si@@Base+0xac>  // b.tstop
   14e84:	ldr	w0, [sp, #56]
   14e88:	cmp	w0, #0x0
   14e8c:	b.eq	14e98 <mpc_set_si_si@@Base+0xa4>  // b.none
   14e90:	mov	w0, #0x4                   	// #4
   14e94:	b	14ea4 <mpc_set_si_si@@Base+0xb0>
   14e98:	mov	w0, #0x0                   	// #0
   14e9c:	b	14ea4 <mpc_set_si_si@@Base+0xb0>
   14ea0:	mov	w0, #0x8                   	// #8
   14ea4:	orr	w0, w1, w0
   14ea8:	ldp	x29, x30, [sp], #64
   14eac:	ret

0000000000014eb0 <mpc_set_ui_ui@@Base>:
   14eb0:	stp	x29, x30, [sp, #-64]!
   14eb4:	mov	x29, sp
   14eb8:	str	x0, [sp, #40]
   14ebc:	str	x1, [sp, #32]
   14ec0:	str	x2, [sp, #24]
   14ec4:	str	w3, [sp, #20]
   14ec8:	ldr	x3, [sp, #40]
   14ecc:	ldr	w0, [sp, #20]
   14ed0:	and	w0, w0, #0xf
   14ed4:	mov	w2, w0
   14ed8:	ldr	x1, [sp, #32]
   14edc:	mov	x0, x3
   14ee0:	bl	5610 <mpfr_set_ui@plt>
   14ee4:	str	w0, [sp, #60]
   14ee8:	ldr	x0, [sp, #40]
   14eec:	add	x3, x0, #0x20
   14ef0:	ldr	w0, [sp, #20]
   14ef4:	asr	w0, w0, #4
   14ef8:	mov	w2, w0
   14efc:	ldr	x1, [sp, #24]
   14f00:	mov	x0, x3
   14f04:	bl	5610 <mpfr_set_ui@plt>
   14f08:	str	w0, [sp, #56]
   14f0c:	ldr	w0, [sp, #60]
   14f10:	cmp	w0, #0x0
   14f14:	b.lt	14f30 <mpc_set_ui_ui@@Base+0x80>  // b.tstop
   14f18:	ldr	w0, [sp, #60]
   14f1c:	cmp	w0, #0x0
   14f20:	cset	w0, ne  // ne = any
   14f24:	and	w0, w0, #0xff
   14f28:	mov	w1, w0
   14f2c:	b	14f34 <mpc_set_ui_ui@@Base+0x84>
   14f30:	mov	w1, #0x2                   	// #2
   14f34:	ldr	w0, [sp, #56]
   14f38:	cmp	w0, #0x0
   14f3c:	b.lt	14f5c <mpc_set_ui_ui@@Base+0xac>  // b.tstop
   14f40:	ldr	w0, [sp, #56]
   14f44:	cmp	w0, #0x0
   14f48:	b.eq	14f54 <mpc_set_ui_ui@@Base+0xa4>  // b.none
   14f4c:	mov	w0, #0x4                   	// #4
   14f50:	b	14f60 <mpc_set_ui_ui@@Base+0xb0>
   14f54:	mov	w0, #0x0                   	// #0
   14f58:	b	14f60 <mpc_set_ui_ui@@Base+0xb0>
   14f5c:	mov	w0, #0x8                   	// #8
   14f60:	orr	w0, w1, w0
   14f64:	ldp	x29, x30, [sp], #64
   14f68:	ret

0000000000014f6c <mpc_set_z_z@@Base>:
   14f6c:	stp	x29, x30, [sp, #-64]!
   14f70:	mov	x29, sp
   14f74:	str	x0, [sp, #40]
   14f78:	str	x1, [sp, #32]
   14f7c:	str	x2, [sp, #24]
   14f80:	str	w3, [sp, #20]
   14f84:	ldr	x3, [sp, #40]
   14f88:	ldr	w0, [sp, #20]
   14f8c:	and	w0, w0, #0xf
   14f90:	mov	w2, w0
   14f94:	ldr	x1, [sp, #32]
   14f98:	mov	x0, x3
   14f9c:	bl	4fb0 <mpfr_set_z@plt>
   14fa0:	str	w0, [sp, #60]
   14fa4:	ldr	x0, [sp, #40]
   14fa8:	add	x3, x0, #0x20
   14fac:	ldr	w0, [sp, #20]
   14fb0:	asr	w0, w0, #4
   14fb4:	mov	w2, w0
   14fb8:	ldr	x1, [sp, #24]
   14fbc:	mov	x0, x3
   14fc0:	bl	4fb0 <mpfr_set_z@plt>
   14fc4:	str	w0, [sp, #56]
   14fc8:	ldr	w0, [sp, #60]
   14fcc:	cmp	w0, #0x0
   14fd0:	b.lt	14fec <mpc_set_z_z@@Base+0x80>  // b.tstop
   14fd4:	ldr	w0, [sp, #60]
   14fd8:	cmp	w0, #0x0
   14fdc:	cset	w0, ne  // ne = any
   14fe0:	and	w0, w0, #0xff
   14fe4:	mov	w1, w0
   14fe8:	b	14ff0 <mpc_set_z_z@@Base+0x84>
   14fec:	mov	w1, #0x2                   	// #2
   14ff0:	ldr	w0, [sp, #56]
   14ff4:	cmp	w0, #0x0
   14ff8:	b.lt	15018 <mpc_set_z_z@@Base+0xac>  // b.tstop
   14ffc:	ldr	w0, [sp, #56]
   15000:	cmp	w0, #0x0
   15004:	b.eq	15010 <mpc_set_z_z@@Base+0xa4>  // b.none
   15008:	mov	w0, #0x4                   	// #4
   1500c:	b	1501c <mpc_set_z_z@@Base+0xb0>
   15010:	mov	w0, #0x0                   	// #0
   15014:	b	1501c <mpc_set_z_z@@Base+0xb0>
   15018:	mov	w0, #0x8                   	// #8
   1501c:	orr	w0, w1, w0
   15020:	ldp	x29, x30, [sp], #64
   15024:	ret

0000000000015028 <mpc_set_uj_uj@@Base>:
   15028:	stp	x29, x30, [sp, #-64]!
   1502c:	mov	x29, sp
   15030:	str	x0, [sp, #40]
   15034:	str	x1, [sp, #32]
   15038:	str	x2, [sp, #24]
   1503c:	str	w3, [sp, #20]
   15040:	ldr	x3, [sp, #40]
   15044:	ldr	w0, [sp, #20]
   15048:	and	w0, w0, #0xf
   1504c:	mov	w2, w0
   15050:	ldr	x1, [sp, #32]
   15054:	mov	x0, x3
   15058:	bl	5500 <__gmpfr_set_uj@plt>
   1505c:	str	w0, [sp, #60]
   15060:	ldr	x0, [sp, #40]
   15064:	add	x3, x0, #0x20
   15068:	ldr	w0, [sp, #20]
   1506c:	asr	w0, w0, #4
   15070:	mov	w2, w0
   15074:	ldr	x1, [sp, #24]
   15078:	mov	x0, x3
   1507c:	bl	5500 <__gmpfr_set_uj@plt>
   15080:	str	w0, [sp, #56]
   15084:	ldr	w0, [sp, #60]
   15088:	cmp	w0, #0x0
   1508c:	b.lt	150a8 <mpc_set_uj_uj@@Base+0x80>  // b.tstop
   15090:	ldr	w0, [sp, #60]
   15094:	cmp	w0, #0x0
   15098:	cset	w0, ne  // ne = any
   1509c:	and	w0, w0, #0xff
   150a0:	mov	w1, w0
   150a4:	b	150ac <mpc_set_uj_uj@@Base+0x84>
   150a8:	mov	w1, #0x2                   	// #2
   150ac:	ldr	w0, [sp, #56]
   150b0:	cmp	w0, #0x0
   150b4:	b.lt	150d4 <mpc_set_uj_uj@@Base+0xac>  // b.tstop
   150b8:	ldr	w0, [sp, #56]
   150bc:	cmp	w0, #0x0
   150c0:	b.eq	150cc <mpc_set_uj_uj@@Base+0xa4>  // b.none
   150c4:	mov	w0, #0x4                   	// #4
   150c8:	b	150d8 <mpc_set_uj_uj@@Base+0xb0>
   150cc:	mov	w0, #0x0                   	// #0
   150d0:	b	150d8 <mpc_set_uj_uj@@Base+0xb0>
   150d4:	mov	w0, #0x8                   	// #8
   150d8:	orr	w0, w1, w0
   150dc:	ldp	x29, x30, [sp], #64
   150e0:	ret

00000000000150e4 <mpc_set_sj_sj@@Base>:
   150e4:	stp	x29, x30, [sp, #-64]!
   150e8:	mov	x29, sp
   150ec:	str	x0, [sp, #40]
   150f0:	str	x1, [sp, #32]
   150f4:	str	x2, [sp, #24]
   150f8:	str	w3, [sp, #20]
   150fc:	ldr	x3, [sp, #40]
   15100:	ldr	w0, [sp, #20]
   15104:	and	w0, w0, #0xf
   15108:	mov	w2, w0
   1510c:	ldr	x1, [sp, #32]
   15110:	mov	x0, x3
   15114:	bl	4e50 <__gmpfr_set_sj@plt>
   15118:	str	w0, [sp, #60]
   1511c:	ldr	x0, [sp, #40]
   15120:	add	x3, x0, #0x20
   15124:	ldr	w0, [sp, #20]
   15128:	asr	w0, w0, #4
   1512c:	mov	w2, w0
   15130:	ldr	x1, [sp, #24]
   15134:	mov	x0, x3
   15138:	bl	4e50 <__gmpfr_set_sj@plt>
   1513c:	str	w0, [sp, #56]
   15140:	ldr	w0, [sp, #60]
   15144:	cmp	w0, #0x0
   15148:	b.lt	15164 <mpc_set_sj_sj@@Base+0x80>  // b.tstop
   1514c:	ldr	w0, [sp, #60]
   15150:	cmp	w0, #0x0
   15154:	cset	w0, ne  // ne = any
   15158:	and	w0, w0, #0xff
   1515c:	mov	w1, w0
   15160:	b	15168 <mpc_set_sj_sj@@Base+0x84>
   15164:	mov	w1, #0x2                   	// #2
   15168:	ldr	w0, [sp, #56]
   1516c:	cmp	w0, #0x0
   15170:	b.lt	15190 <mpc_set_sj_sj@@Base+0xac>  // b.tstop
   15174:	ldr	w0, [sp, #56]
   15178:	cmp	w0, #0x0
   1517c:	b.eq	15188 <mpc_set_sj_sj@@Base+0xa4>  // b.none
   15180:	mov	w0, #0x4                   	// #4
   15184:	b	15194 <mpc_set_sj_sj@@Base+0xb0>
   15188:	mov	w0, #0x0                   	// #0
   1518c:	b	15194 <mpc_set_sj_sj@@Base+0xb0>
   15190:	mov	w0, #0x8                   	// #8
   15194:	orr	w0, w1, w0
   15198:	ldp	x29, x30, [sp], #64
   1519c:	ret

00000000000151a0 <mpc_sin@@Base>:
   151a0:	stp	x29, x30, [sp, #-48]!
   151a4:	mov	x29, sp
   151a8:	str	x0, [sp, #40]
   151ac:	str	x1, [sp, #32]
   151b0:	str	w2, [sp, #28]
   151b4:	mov	w4, #0x0                   	// #0
   151b8:	ldr	w3, [sp, #28]
   151bc:	ldr	x2, [sp, #32]
   151c0:	mov	x1, #0x0                   	// #0
   151c4:	ldr	x0, [sp, #40]
   151c8:	bl	5240 <mpc_sin_cos@plt>
   151cc:	and	w0, w0, #0xf
   151d0:	ldp	x29, x30, [sp], #48
   151d4:	ret
   151d8:	stp	x29, x30, [sp, #-208]!
   151dc:	mov	x29, sp
   151e0:	stp	x19, x20, [sp, #16]
   151e4:	str	x0, [sp, #56]
   151e8:	str	x1, [sp, #48]
   151ec:	str	x2, [sp, #40]
   151f0:	str	w3, [sp, #36]
   151f4:	str	w4, [sp, #32]
   151f8:	ldr	x1, [sp, #56]
   151fc:	ldr	x0, [sp, #40]
   15200:	cmp	x1, x0
   15204:	b.eq	15218 <mpc_sin@@Base+0x78>  // b.none
   15208:	ldr	x1, [sp, #48]
   1520c:	ldr	x0, [sp, #40]
   15210:	cmp	x1, x0
   15214:	b.ne	15220 <mpc_sin@@Base+0x80>  // b.any
   15218:	mov	w0, #0x1                   	// #1
   1521c:	b	15224 <mpc_sin@@Base+0x84>
   15220:	mov	w0, #0x0                   	// #0
   15224:	str	w0, [sp, #204]
   15228:	ldr	w0, [sp, #204]
   1522c:	cmp	w0, #0x0
   15230:	b.eq	15260 <mpc_sin@@Base+0xc0>  // b.none
   15234:	ldr	x0, [sp, #40]
   15238:	ldr	x1, [x0]
   1523c:	ldr	x0, [sp, #40]
   15240:	ldr	x2, [x0, #32]
   15244:	add	x0, sp, #0x80
   15248:	bl	54c0 <mpc_init3@plt>
   1524c:	add	x0, sp, #0x80
   15250:	mov	w2, #0x0                   	// #0
   15254:	ldr	x1, [sp, #40]
   15258:	bl	5680 <mpc_set@plt>
   1525c:	b	15288 <mpc_sin@@Base+0xe8>
   15260:	ldr	x1, [sp, #40]
   15264:	add	x0, sp, #0x80
   15268:	ldp	x2, x3, [x1]
   1526c:	stp	x2, x3, [x0]
   15270:	ldp	x2, x3, [x1, #16]
   15274:	stp	x2, x3, [x0, #16]
   15278:	ldp	x2, x3, [x1, #32]
   1527c:	stp	x2, x3, [x0, #32]
   15280:	ldp	x2, x3, [x1, #48]
   15284:	stp	x2, x3, [x0, #48]
   15288:	ldr	x0, [sp, #56]
   1528c:	cmp	x0, #0x0
   15290:	b.eq	15444 <mpc_sin@@Base+0x2a4>  // b.none
   15294:	ldr	x1, [sp, #144]
   15298:	mov	x0, #0x2                   	// #2
   1529c:	movk	x0, #0x8000, lsl #48
   152a0:	cmp	x1, x0
   152a4:	b.eq	152bc <mpc_sin@@Base+0x11c>  // b.none
   152a8:	ldr	x1, [sp, #176]
   152ac:	mov	x0, #0x2                   	// #2
   152b0:	movk	x0, #0x8000, lsl #48
   152b4:	cmp	x1, x0
   152b8:	b.ne	15330 <mpc_sin@@Base+0x190>  // b.any
   152bc:	add	x0, sp, #0x80
   152c0:	ldr	w2, [sp, #36]
   152c4:	mov	x1, x0
   152c8:	ldr	x0, [sp, #56]
   152cc:	bl	5680 <mpc_set@plt>
   152d0:	ldr	x1, [sp, #176]
   152d4:	mov	x0, #0x2                   	// #2
   152d8:	movk	x0, #0x8000, lsl #48
   152dc:	cmp	x1, x0
   152e0:	b.ne	15300 <mpc_sin@@Base+0x160>  // b.any
   152e4:	ldr	x1, [sp, #144]
   152e8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   152ec:	cmp	x1, x0
   152f0:	b.eq	15440 <mpc_sin@@Base+0x2a0>  // b.none
   152f4:	ldr	x0, [sp, #56]
   152f8:	bl	4b10 <mpfr_set_nan@plt>
   152fc:	b	15440 <mpc_sin@@Base+0x2a0>
   15300:	ldr	x1, [sp, #176]
   15304:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15308:	cmp	x1, x0
   1530c:	b.eq	15440 <mpc_sin@@Base+0x2a0>  // b.none
   15310:	ldr	x1, [sp, #176]
   15314:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   15318:	cmp	x1, x0
   1531c:	b.eq	15440 <mpc_sin@@Base+0x2a0>  // b.none
   15320:	ldr	x0, [sp, #56]
   15324:	add	x0, x0, #0x20
   15328:	bl	4b10 <mpfr_set_nan@plt>
   1532c:	b	15440 <mpc_sin@@Base+0x2a0>
   15330:	ldr	x1, [sp, #144]
   15334:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15338:	cmp	x1, x0
   1533c:	b.ne	153ac <mpc_sin@@Base+0x20c>  // b.any
   15340:	ldr	x0, [sp, #56]
   15344:	bl	4b10 <mpfr_set_nan@plt>
   15348:	ldr	x1, [sp, #176]
   1534c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15350:	cmp	x1, x0
   15354:	b.eq	15378 <mpc_sin@@Base+0x1d8>  // b.none
   15358:	ldr	x1, [sp, #176]
   1535c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   15360:	cmp	x1, x0
   15364:	b.eq	15378 <mpc_sin@@Base+0x1d8>  // b.none
   15368:	ldr	x0, [sp, #56]
   1536c:	add	x0, x0, #0x20
   15370:	bl	4b10 <mpfr_set_nan@plt>
   15374:	b	15444 <mpc_sin@@Base+0x2a4>
   15378:	ldr	x0, [sp, #56]
   1537c:	add	x4, x0, #0x20
   15380:	ldr	w0, [sp, #36]
   15384:	asr	w1, w0, #4
   15388:	ldr	w2, [sp, #168]
   1538c:	add	x0, sp, #0x80
   15390:	add	x0, x0, #0x20
   15394:	mov	w3, w2
   15398:	mov	w2, w1
   1539c:	mov	x1, x0
   153a0:	mov	x0, x4
   153a4:	bl	52d0 <mpfr_set4@plt>
   153a8:	b	15444 <mpc_sin@@Base+0x2a4>
   153ac:	ldr	x1, [sp, #144]
   153b0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   153b4:	cmp	x1, x0
   153b8:	b.ne	153d4 <mpc_sin@@Base+0x234>  // b.any
   153bc:	add	x0, sp, #0x80
   153c0:	ldr	w2, [sp, #36]
   153c4:	mov	x1, x0
   153c8:	ldr	x0, [sp, #56]
   153cc:	bl	5680 <mpc_set@plt>
   153d0:	b	15444 <mpc_sin@@Base+0x2a4>
   153d4:	add	x0, sp, #0x40
   153d8:	mov	x1, #0x2                   	// #2
   153dc:	bl	5530 <mpfr_init2@plt>
   153e0:	add	x0, sp, #0x60
   153e4:	mov	x1, #0x2                   	// #2
   153e8:	bl	5530 <mpfr_init2@plt>
   153ec:	add	x2, sp, #0x80
   153f0:	add	x1, sp, #0x60
   153f4:	add	x0, sp, #0x40
   153f8:	mov	w3, #0x1                   	// #1
   153fc:	bl	5620 <mpfr_sin_cos@plt>
   15400:	ldr	x0, [sp, #56]
   15404:	ldr	w1, [sp, #72]
   15408:	bl	5220 <mpfr_set_inf@plt>
   1540c:	ldr	x0, [sp, #56]
   15410:	add	x2, x0, #0x20
   15414:	ldr	w1, [sp, #104]
   15418:	ldr	w0, [sp, #168]
   1541c:	mul	w0, w1, w0
   15420:	mov	w1, w0
   15424:	mov	x0, x2
   15428:	bl	5220 <mpfr_set_inf@plt>
   1542c:	add	x0, sp, #0x40
   15430:	bl	4e30 <mpfr_clear@plt>
   15434:	add	x0, sp, #0x60
   15438:	bl	4e30 <mpfr_clear@plt>
   1543c:	b	15444 <mpc_sin@@Base+0x2a4>
   15440:	nop
   15444:	ldr	x0, [sp, #48]
   15448:	cmp	x0, #0x0
   1544c:	b.eq	157b8 <mpc_sin@@Base+0x618>  // b.none
   15450:	ldr	x1, [sp, #144]
   15454:	mov	x0, #0x2                   	// #2
   15458:	movk	x0, #0x8000, lsl #48
   1545c:	cmp	x1, x0
   15460:	b.ne	154e0 <mpc_sin@@Base+0x340>  // b.any
   15464:	ldr	x1, [sp, #176]
   15468:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1546c:	cmp	x1, x0
   15470:	b.ne	15484 <mpc_sin@@Base+0x2e4>  // b.any
   15474:	ldr	x0, [sp, #48]
   15478:	mov	w1, #0x1                   	// #1
   1547c:	bl	5220 <mpfr_set_inf@plt>
   15480:	b	1548c <mpc_sin@@Base+0x2ec>
   15484:	ldr	x0, [sp, #48]
   15488:	bl	4b10 <mpfr_set_nan@plt>
   1548c:	ldr	x1, [sp, #176]
   15490:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   15494:	cmp	x1, x0
   15498:	b.ne	154d0 <mpc_sin@@Base+0x330>  // b.any
   1549c:	ldr	x0, [sp, #48]
   154a0:	add	x4, x0, #0x20
   154a4:	ldr	w0, [sp, #32]
   154a8:	asr	w1, w0, #4
   154ac:	ldr	w2, [sp, #168]
   154b0:	add	x0, sp, #0x80
   154b4:	add	x0, x0, #0x20
   154b8:	mov	w3, w2
   154bc:	mov	w2, w1
   154c0:	mov	x1, x0
   154c4:	mov	x0, x4
   154c8:	bl	52d0 <mpfr_set4@plt>
   154cc:	b	157b8 <mpc_sin@@Base+0x618>
   154d0:	ldr	x0, [sp, #48]
   154d4:	add	x0, x0, #0x20
   154d8:	bl	4b10 <mpfr_set_nan@plt>
   154dc:	b	157b8 <mpc_sin@@Base+0x618>
   154e0:	ldr	x1, [sp, #176]
   154e4:	mov	x0, #0x2                   	// #2
   154e8:	movk	x0, #0x8000, lsl #48
   154ec:	cmp	x1, x0
   154f0:	b.ne	1554c <mpc_sin@@Base+0x3ac>  // b.any
   154f4:	ldr	x1, [sp, #144]
   154f8:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   154fc:	cmp	x1, x0
   15500:	b.ne	15534 <mpc_sin@@Base+0x394>  // b.any
   15504:	ldr	x0, [sp, #48]
   15508:	add	x4, x0, #0x20
   1550c:	ldr	w0, [sp, #32]
   15510:	asr	w1, w0, #4
   15514:	ldr	w2, [sp, #136]
   15518:	add	x0, sp, #0x80
   1551c:	mov	w3, w2
   15520:	mov	w2, w1
   15524:	mov	x1, x0
   15528:	mov	x0, x4
   1552c:	bl	52d0 <mpfr_set4@plt>
   15530:	b	15540 <mpc_sin@@Base+0x3a0>
   15534:	ldr	x0, [sp, #48]
   15538:	add	x0, x0, #0x20
   1553c:	bl	4b10 <mpfr_set_nan@plt>
   15540:	ldr	x0, [sp, #48]
   15544:	bl	4b10 <mpfr_set_nan@plt>
   15548:	b	157b8 <mpc_sin@@Base+0x618>
   1554c:	ldr	x1, [sp, #144]
   15550:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15554:	cmp	x1, x0
   15558:	b.ne	15628 <mpc_sin@@Base+0x488>  // b.any
   1555c:	ldr	w0, [sp, #136]
   15560:	mvn	w0, w0
   15564:	lsr	w0, w0, #31
   15568:	and	w1, w0, #0xff
   1556c:	ldr	w0, [sp, #168]
   15570:	lsr	w0, w0, #31
   15574:	and	w0, w0, #0xff
   15578:	eor	w0, w1, w0
   1557c:	and	w0, w0, #0xff
   15580:	str	w0, [sp, #196]
   15584:	ldr	x1, [sp, #176]
   15588:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1558c:	cmp	x1, x0
   15590:	b.ne	155c0 <mpc_sin@@Base+0x420>  // b.any
   15594:	ldr	x2, [sp, #48]
   15598:	ldr	w0, [sp, #196]
   1559c:	cmp	w0, #0x0
   155a0:	b.eq	155ac <mpc_sin@@Base+0x40c>  // b.none
   155a4:	mov	w0, #0xffffffff            	// #-1
   155a8:	b	155b0 <mpc_sin@@Base+0x410>
   155ac:	mov	w0, #0x1                   	// #1
   155b0:	mov	w1, w0
   155b4:	mov	x0, x2
   155b8:	bl	5220 <mpfr_set_inf@plt>
   155bc:	b	155c8 <mpc_sin@@Base+0x428>
   155c0:	ldr	x0, [sp, #48]
   155c4:	bl	4b10 <mpfr_set_nan@plt>
   155c8:	ldr	x1, [sp, #176]
   155cc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   155d0:	cmp	x1, x0
   155d4:	b.ne	15618 <mpc_sin@@Base+0x478>  // b.any
   155d8:	ldr	x0, [sp, #48]
   155dc:	add	x4, x0, #0x20
   155e0:	ldr	w0, [sp, #32]
   155e4:	asr	w2, w0, #4
   155e8:	ldr	w0, [sp, #196]
   155ec:	cmp	w0, #0x0
   155f0:	b.eq	155fc <mpc_sin@@Base+0x45c>  // b.none
   155f4:	mov	w0, #0xffffffff            	// #-1
   155f8:	b	15600 <mpc_sin@@Base+0x460>
   155fc:	mov	w0, #0x1                   	// #1
   15600:	add	x1, sp, #0x80
   15604:	add	x1, x1, #0x20
   15608:	mov	w3, w0
   1560c:	mov	x0, x4
   15610:	bl	52d0 <mpfr_set4@plt>
   15614:	b	157b8 <mpc_sin@@Base+0x618>
   15618:	ldr	x0, [sp, #48]
   1561c:	add	x0, x0, #0x20
   15620:	bl	4b10 <mpfr_set_nan@plt>
   15624:	b	157b8 <mpc_sin@@Base+0x618>
   15628:	ldr	x1, [sp, #144]
   1562c:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   15630:	cmp	x1, x0
   15634:	b.ne	156a8 <mpc_sin@@Base+0x508>  // b.any
   15638:	ldr	w0, [sp, #136]
   1563c:	mvn	w0, w0
   15640:	lsr	w0, w0, #31
   15644:	and	w1, w0, #0xff
   15648:	ldr	w0, [sp, #168]
   1564c:	lsr	w0, w0, #31
   15650:	and	w0, w0, #0xff
   15654:	eor	w0, w1, w0
   15658:	and	w0, w0, #0xff
   1565c:	str	w0, [sp, #200]
   15660:	ldr	x0, [sp, #48]
   15664:	add	x4, x0, #0x20
   15668:	ldr	w0, [sp, #32]
   1566c:	asr	w2, w0, #4
   15670:	ldr	w0, [sp, #200]
   15674:	cmp	w0, #0x0
   15678:	b.eq	15684 <mpc_sin@@Base+0x4e4>  // b.none
   1567c:	mov	w0, #0xffffffff            	// #-1
   15680:	b	15688 <mpc_sin@@Base+0x4e8>
   15684:	mov	w0, #0x1                   	// #1
   15688:	add	x1, sp, #0x80
   1568c:	mov	w3, w0
   15690:	mov	x0, x4
   15694:	bl	52d0 <mpfr_set4@plt>
   15698:	ldr	x0, [sp, #48]
   1569c:	mov	w1, #0x1                   	// #1
   156a0:	bl	5220 <mpfr_set_inf@plt>
   156a4:	b	157b8 <mpc_sin@@Base+0x618>
   156a8:	add	x0, sp, #0x60
   156ac:	mov	x1, #0x2                   	// #2
   156b0:	bl	5530 <mpfr_init2@plt>
   156b4:	add	x0, sp, #0x40
   156b8:	mov	x1, #0x2                   	// #2
   156bc:	bl	5530 <mpfr_init2@plt>
   156c0:	add	x2, sp, #0x80
   156c4:	add	x1, sp, #0x60
   156c8:	add	x0, sp, #0x40
   156cc:	mov	w3, #0x0                   	// #0
   156d0:	bl	5620 <mpfr_sin_cos@plt>
   156d4:	ldr	x19, [sp, #48]
   156d8:	ldr	x1, [sp, #112]
   156dc:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   156e0:	cmp	x1, x0
   156e4:	b.ge	15708 <mpc_sin@@Base+0x568>  // b.tcont
   156e8:	ldr	x1, [sp, #112]
   156ec:	mov	x0, #0x2                   	// #2
   156f0:	movk	x0, #0x8000, lsl #48
   156f4:	cmp	x1, x0
   156f8:	b.ne	15700 <mpc_sin@@Base+0x560>  // b.any
   156fc:	bl	4bd0 <mpfr_set_erangeflag@plt>
   15700:	mov	w0, #0x0                   	// #0
   15704:	b	1570c <mpc_sin@@Base+0x56c>
   15708:	ldr	w0, [sp, #104]
   1570c:	mov	w1, w0
   15710:	mov	x0, x19
   15714:	bl	5220 <mpfr_set_inf@plt>
   15718:	ldr	x0, [sp, #48]
   1571c:	add	x20, x0, #0x20
   15720:	ldr	x1, [sp, #176]
   15724:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15728:	cmp	x1, x0
   1572c:	b.ge	15750 <mpc_sin@@Base+0x5b0>  // b.tcont
   15730:	ldr	x1, [sp, #176]
   15734:	mov	x0, #0x2                   	// #2
   15738:	movk	x0, #0x8000, lsl #48
   1573c:	cmp	x1, x0
   15740:	b.ne	15748 <mpc_sin@@Base+0x5a8>  // b.any
   15744:	bl	4bd0 <mpfr_set_erangeflag@plt>
   15748:	mov	w19, #0x0                   	// #0
   1574c:	b	15754 <mpc_sin@@Base+0x5b4>
   15750:	ldr	w19, [sp, #168]
   15754:	ldr	x1, [sp, #80]
   15758:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1575c:	cmp	x1, x0
   15760:	b.ge	15784 <mpc_sin@@Base+0x5e4>  // b.tcont
   15764:	ldr	x1, [sp, #80]
   15768:	mov	x0, #0x2                   	// #2
   1576c:	movk	x0, #0x8000, lsl #48
   15770:	cmp	x1, x0
   15774:	b.ne	1577c <mpc_sin@@Base+0x5dc>  // b.any
   15778:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1577c:	mov	w0, #0x0                   	// #0
   15780:	b	15788 <mpc_sin@@Base+0x5e8>
   15784:	ldr	w0, [sp, #72]
   15788:	cmp	w19, w0
   1578c:	b.ne	15798 <mpc_sin@@Base+0x5f8>  // b.any
   15790:	mov	w0, #0xffffffff            	// #-1
   15794:	b	1579c <mpc_sin@@Base+0x5fc>
   15798:	mov	w0, #0x1                   	// #1
   1579c:	mov	w1, w0
   157a0:	mov	x0, x20
   157a4:	bl	5220 <mpfr_set_inf@plt>
   157a8:	add	x0, sp, #0x40
   157ac:	bl	4e30 <mpfr_clear@plt>
   157b0:	add	x0, sp, #0x60
   157b4:	bl	4e30 <mpfr_clear@plt>
   157b8:	ldr	w0, [sp, #204]
   157bc:	cmp	w0, #0x0
   157c0:	b.eq	157cc <mpc_sin@@Base+0x62c>  // b.none
   157c4:	add	x0, sp, #0x80
   157c8:	bl	4ae0 <mpc_clear@plt>
   157cc:	mov	w0, #0x0                   	// #0
   157d0:	ldp	x19, x20, [sp, #16]
   157d4:	ldp	x29, x30, [sp], #208
   157d8:	ret
   157dc:	stp	x29, x30, [sp, #-144]!
   157e0:	mov	x29, sp
   157e4:	str	x0, [sp, #40]
   157e8:	str	x1, [sp, #32]
   157ec:	str	x2, [sp, #24]
   157f0:	str	w3, [sp, #20]
   157f4:	str	w4, [sp, #16]
   157f8:	str	wzr, [sp, #140]
   157fc:	str	wzr, [sp, #136]
   15800:	ldr	x0, [sp, #24]
   15804:	ldr	w0, [x0, #40]
   15808:	lsr	w0, w0, #31
   1580c:	and	w0, w0, #0xff
   15810:	str	w0, [sp, #132]
   15814:	ldr	x0, [sp, #40]
   15818:	cmp	x0, #0x0
   1581c:	b.eq	15834 <mpc_sin@@Base+0x694>  // b.none
   15820:	ldr	x0, [sp, #40]
   15824:	ldr	x1, [x0]
   15828:	add	x0, sp, #0x58
   1582c:	bl	5530 <mpfr_init2@plt>
   15830:	b	15840 <mpc_sin@@Base+0x6a0>
   15834:	add	x0, sp, #0x58
   15838:	mov	x1, #0x2                   	// #2
   1583c:	bl	5530 <mpfr_init2@plt>
   15840:	ldr	x0, [sp, #32]
   15844:	cmp	x0, #0x0
   15848:	b.eq	15860 <mpc_sin@@Base+0x6c0>  // b.none
   1584c:	ldr	x0, [sp, #32]
   15850:	ldr	x1, [x0]
   15854:	add	x0, sp, #0x38
   15858:	bl	5530 <mpfr_init2@plt>
   1585c:	b	1586c <mpc_sin@@Base+0x6cc>
   15860:	add	x0, sp, #0x38
   15864:	mov	x1, #0x2                   	// #2
   15868:	bl	5530 <mpfr_init2@plt>
   1586c:	ldr	x1, [sp, #24]
   15870:	ldr	w0, [sp, #20]
   15874:	and	w2, w0, #0xf
   15878:	add	x0, sp, #0x58
   1587c:	bl	5180 <mpfr_sin@plt>
   15880:	str	w0, [sp, #128]
   15884:	ldr	x1, [sp, #24]
   15888:	ldr	w0, [sp, #16]
   1588c:	and	w2, w0, #0xf
   15890:	add	x0, sp, #0x38
   15894:	bl	5150 <mpfr_cos@plt>
   15898:	str	w0, [sp, #124]
   1589c:	ldr	x0, [sp, #40]
   158a0:	cmp	x0, #0x0
   158a4:	b.eq	15918 <mpc_sin@@Base+0x778>  // b.none
   158a8:	ldr	x0, [sp, #40]
   158ac:	ldr	w2, [sp, #96]
   158b0:	add	x1, sp, #0x58
   158b4:	mov	w3, w2
   158b8:	mov	w2, #0x0                   	// #0
   158bc:	bl	52d0 <mpfr_set4@plt>
   158c0:	ldr	w0, [sp, #128]
   158c4:	str	w0, [sp, #140]
   158c8:	ldr	x0, [sp, #40]
   158cc:	add	x2, x0, #0x20
   158d0:	ldr	w0, [sp, #132]
   158d4:	cmp	w0, #0x0
   158d8:	b.eq	158e8 <mpc_sin@@Base+0x748>  // b.none
   158dc:	ldr	w0, [sp, #64]
   158e0:	cmp	w0, #0x0
   158e4:	b.ge	15900 <mpc_sin@@Base+0x760>  // b.tcont
   158e8:	ldr	w0, [sp, #132]
   158ec:	cmp	w0, #0x0
   158f0:	b.ne	15908 <mpc_sin@@Base+0x768>  // b.any
   158f4:	ldr	w0, [sp, #64]
   158f8:	cmp	w0, #0x0
   158fc:	b.ge	15908 <mpc_sin@@Base+0x768>  // b.tcont
   15900:	mov	w0, #0xffffffff            	// #-1
   15904:	b	1590c <mpc_sin@@Base+0x76c>
   15908:	mov	w0, #0x1                   	// #1
   1590c:	mov	w1, w0
   15910:	mov	x0, x2
   15914:	bl	4dd0 <mpfr_set_zero@plt>
   15918:	ldr	x0, [sp, #32]
   1591c:	cmp	x0, #0x0
   15920:	b.eq	15994 <mpc_sin@@Base+0x7f4>  // b.none
   15924:	ldr	x0, [sp, #32]
   15928:	ldr	w2, [sp, #64]
   1592c:	add	x1, sp, #0x38
   15930:	mov	w3, w2
   15934:	mov	w2, #0x0                   	// #0
   15938:	bl	52d0 <mpfr_set4@plt>
   1593c:	ldr	w0, [sp, #124]
   15940:	str	w0, [sp, #136]
   15944:	ldr	x0, [sp, #32]
   15948:	add	x2, x0, #0x20
   1594c:	ldr	w0, [sp, #132]
   15950:	cmp	w0, #0x0
   15954:	b.eq	15964 <mpc_sin@@Base+0x7c4>  // b.none
   15958:	ldr	w0, [sp, #96]
   1595c:	cmp	w0, #0x0
   15960:	b.lt	1597c <mpc_sin@@Base+0x7dc>  // b.tstop
   15964:	ldr	w0, [sp, #132]
   15968:	cmp	w0, #0x0
   1596c:	b.ne	15984 <mpc_sin@@Base+0x7e4>  // b.any
   15970:	ldr	w0, [sp, #96]
   15974:	cmp	w0, #0x0
   15978:	b.lt	15984 <mpc_sin@@Base+0x7e4>  // b.tstop
   1597c:	mov	w0, #0xffffffff            	// #-1
   15980:	b	15988 <mpc_sin@@Base+0x7e8>
   15984:	mov	w0, #0x1                   	// #1
   15988:	mov	w1, w0
   1598c:	mov	x0, x2
   15990:	bl	4dd0 <mpfr_set_zero@plt>
   15994:	add	x0, sp, #0x58
   15998:	bl	4e30 <mpfr_clear@plt>
   1599c:	add	x0, sp, #0x38
   159a0:	bl	4e30 <mpfr_clear@plt>
   159a4:	ldr	w0, [sp, #140]
   159a8:	cmp	w0, #0x0
   159ac:	b.lt	159c8 <mpc_sin@@Base+0x828>  // b.tstop
   159b0:	ldr	w0, [sp, #140]
   159b4:	cmp	w0, #0x0
   159b8:	cset	w0, ne  // ne = any
   159bc:	and	w0, w0, #0xff
   159c0:	mov	w1, w0
   159c4:	b	159cc <mpc_sin@@Base+0x82c>
   159c8:	mov	w1, #0x2                   	// #2
   159cc:	ldr	w0, [sp, #136]
   159d0:	cmp	w0, #0x0
   159d4:	b.lt	159f4 <mpc_sin@@Base+0x854>  // b.tstop
   159d8:	ldr	w0, [sp, #136]
   159dc:	cmp	w0, #0x0
   159e0:	b.eq	159ec <mpc_sin@@Base+0x84c>  // b.none
   159e4:	mov	w0, #0x10                  	// #16
   159e8:	b	159f8 <mpc_sin@@Base+0x858>
   159ec:	mov	w0, #0x0                   	// #0
   159f0:	b	159f8 <mpc_sin@@Base+0x858>
   159f4:	mov	w0, #0x20                  	// #32
   159f8:	orr	w0, w1, w0
   159fc:	ldp	x29, x30, [sp], #144
   15a00:	ret
   15a04:	stp	x29, x30, [sp, #-144]!
   15a08:	mov	x29, sp
   15a0c:	str	x0, [sp, #40]
   15a10:	str	x1, [sp, #32]
   15a14:	str	x2, [sp, #24]
   15a18:	str	w3, [sp, #20]
   15a1c:	str	w4, [sp, #16]
   15a20:	str	wzr, [sp, #140]
   15a24:	str	wzr, [sp, #136]
   15a28:	ldr	x1, [sp, #40]
   15a2c:	ldr	x0, [sp, #24]
   15a30:	cmp	x1, x0
   15a34:	b.eq	15a48 <mpc_sin@@Base+0x8a8>  // b.none
   15a38:	ldr	x1, [sp, #32]
   15a3c:	ldr	x0, [sp, #24]
   15a40:	cmp	x1, x0
   15a44:	b.ne	15a50 <mpc_sin@@Base+0x8b0>  // b.any
   15a48:	mov	w0, #0x1                   	// #1
   15a4c:	b	15a54 <mpc_sin@@Base+0x8b4>
   15a50:	mov	w0, #0x0                   	// #0
   15a54:	str	w0, [sp, #132]
   15a58:	ldr	w0, [sp, #132]
   15a5c:	cmp	w0, #0x0
   15a60:	b.eq	15a90 <mpc_sin@@Base+0x8f0>  // b.none
   15a64:	ldr	x0, [sp, #24]
   15a68:	ldr	x1, [x0]
   15a6c:	ldr	x0, [sp, #24]
   15a70:	ldr	x2, [x0, #32]
   15a74:	add	x0, sp, #0x38
   15a78:	bl	54c0 <mpc_init3@plt>
   15a7c:	add	x0, sp, #0x38
   15a80:	mov	w2, #0x0                   	// #0
   15a84:	ldr	x1, [sp, #24]
   15a88:	bl	5680 <mpc_set@plt>
   15a8c:	b	15ab8 <mpc_sin@@Base+0x918>
   15a90:	ldr	x1, [sp, #24]
   15a94:	add	x0, sp, #0x38
   15a98:	ldp	x2, x3, [x1]
   15a9c:	stp	x2, x3, [x0]
   15aa0:	ldp	x2, x3, [x1, #16]
   15aa4:	stp	x2, x3, [x0, #16]
   15aa8:	ldp	x2, x3, [x1, #32]
   15aac:	stp	x2, x3, [x0, #32]
   15ab0:	ldp	x2, x3, [x1, #48]
   15ab4:	stp	x2, x3, [x0, #48]
   15ab8:	ldr	x0, [sp, #40]
   15abc:	cmp	x0, #0x0
   15ac0:	b.eq	15b08 <mpc_sin@@Base+0x968>  // b.none
   15ac4:	ldr	x0, [sp, #40]
   15ac8:	ldr	w2, [sp, #64]
   15acc:	add	x1, sp, #0x38
   15ad0:	mov	w3, w2
   15ad4:	mov	w2, #0x0                   	// #0
   15ad8:	bl	52d0 <mpfr_set4@plt>
   15adc:	ldr	x0, [sp, #40]
   15ae0:	add	x3, x0, #0x20
   15ae4:	ldr	w0, [sp, #20]
   15ae8:	asr	w1, w0, #4
   15aec:	add	x0, sp, #0x38
   15af0:	add	x0, x0, #0x20
   15af4:	mov	w2, w1
   15af8:	mov	x1, x0
   15afc:	mov	x0, x3
   15b00:	bl	5080 <mpfr_sinh@plt>
   15b04:	str	w0, [sp, #140]
   15b08:	ldr	x0, [sp, #32]
   15b0c:	cmp	x0, #0x0
   15b10:	b.eq	15bac <mpc_sin@@Base+0xa0c>  // b.none
   15b14:	ldr	x3, [sp, #32]
   15b18:	ldr	w0, [sp, #16]
   15b1c:	and	w1, w0, #0xf
   15b20:	add	x0, sp, #0x38
   15b24:	add	x0, x0, #0x20
   15b28:	mov	w2, w1
   15b2c:	mov	x1, x0
   15b30:	mov	x0, x3
   15b34:	bl	4af0 <mpfr_cosh@plt>
   15b38:	str	w0, [sp, #136]
   15b3c:	ldr	x0, [sp, #32]
   15b40:	add	x0, x0, #0x20
   15b44:	str	x0, [sp, #120]
   15b48:	ldr	x0, [sp, #120]
   15b4c:	mov	w1, #0x1                   	// #1
   15b50:	str	w1, [x0, #8]
   15b54:	ldr	x0, [sp, #120]
   15b58:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   15b5c:	str	x1, [x0, #16]
   15b60:	ldr	w0, [sp, #64]
   15b64:	mvn	w0, w0
   15b68:	lsr	w0, w0, #31
   15b6c:	and	w1, w0, #0xff
   15b70:	ldr	w0, [sp, #96]
   15b74:	lsr	w0, w0, #31
   15b78:	and	w0, w0, #0xff
   15b7c:	eor	w0, w1, w0
   15b80:	and	w0, w0, #0xff
   15b84:	cmp	w0, #0x0
   15b88:	b.eq	15bac <mpc_sin@@Base+0xa0c>  // b.none
   15b8c:	ldr	x0, [sp, #32]
   15b90:	add	x3, x0, #0x20
   15b94:	ldr	x0, [sp, #32]
   15b98:	add	x0, x0, #0x20
   15b9c:	mov	w2, #0x0                   	// #0
   15ba0:	mov	x1, x0
   15ba4:	mov	x0, x3
   15ba8:	bl	4c50 <mpfr_neg@plt>
   15bac:	ldr	w0, [sp, #132]
   15bb0:	cmp	w0, #0x0
   15bb4:	b.eq	15bc0 <mpc_sin@@Base+0xa20>  // b.none
   15bb8:	add	x0, sp, #0x38
   15bbc:	bl	4ae0 <mpc_clear@plt>
   15bc0:	ldr	w0, [sp, #140]
   15bc4:	cmp	w0, #0x0
   15bc8:	b.lt	15be8 <mpc_sin@@Base+0xa48>  // b.tstop
   15bcc:	ldr	w0, [sp, #140]
   15bd0:	cmp	w0, #0x0
   15bd4:	b.eq	15be0 <mpc_sin@@Base+0xa40>  // b.none
   15bd8:	mov	w1, #0x4                   	// #4
   15bdc:	b	15bec <mpc_sin@@Base+0xa4c>
   15be0:	mov	w1, #0x0                   	// #0
   15be4:	b	15bec <mpc_sin@@Base+0xa4c>
   15be8:	mov	w1, #0x8                   	// #8
   15bec:	ldr	w0, [sp, #136]
   15bf0:	cmp	w0, #0x0
   15bf4:	b.lt	15c14 <mpc_sin@@Base+0xa74>  // b.tstop
   15bf8:	ldr	w0, [sp, #136]
   15bfc:	cmp	w0, #0x0
   15c00:	b.eq	15c0c <mpc_sin@@Base+0xa6c>  // b.none
   15c04:	mov	w0, #0x10                  	// #16
   15c08:	b	15c18 <mpc_sin@@Base+0xa78>
   15c0c:	mov	w0, #0x0                   	// #0
   15c10:	b	15c18 <mpc_sin@@Base+0xa78>
   15c14:	mov	w0, #0x20                  	// #32
   15c18:	orr	w0, w1, w0
   15c1c:	ldp	x29, x30, [sp], #144
   15c20:	ret

0000000000015c24 <mpc_fix_inf@@Base>:
   15c24:	stp	x29, x30, [sp, #-32]!
   15c28:	mov	x29, sp
   15c2c:	str	x0, [sp, #24]
   15c30:	str	w1, [sp, #20]
   15c34:	ldr	x0, [sp, #24]
   15c38:	ldr	x1, [x0, #16]
   15c3c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15c40:	cmp	x1, x0
   15c44:	b.eq	15c7c <mpc_fix_inf@@Base+0x58>  // b.none
   15c48:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   15c4c:	ldr	x0, [x0, #4008]
   15c50:	ldr	x5, [x0]
   15c54:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   15c58:	add	x4, x0, #0x340
   15c5c:	mov	w3, #0x115                 	// #277
   15c60:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   15c64:	add	x2, x0, #0x350
   15c68:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   15c6c:	add	x1, x0, #0x360
   15c70:	mov	x0, x5
   15c74:	bl	56a0 <fprintf@plt>
   15c78:	bl	5100 <abort@plt>
   15c7c:	ldr	w0, [sp, #20]
   15c80:	cmp	w0, #0x1
   15c84:	b.eq	15d10 <mpc_fix_inf@@Base+0xec>  // b.none
   15c88:	ldr	x0, [sp, #24]
   15c8c:	ldr	w0, [x0, #8]
   15c90:	cmp	w0, #0x0
   15c94:	b.ge	15ca4 <mpc_fix_inf@@Base+0x80>  // b.tcont
   15c98:	ldr	w0, [sp, #20]
   15c9c:	cmp	w0, #0x2
   15ca0:	b.eq	15d10 <mpc_fix_inf@@Base+0xec>  // b.none
   15ca4:	ldr	x0, [sp, #24]
   15ca8:	ldr	w0, [x0, #8]
   15cac:	lsr	w0, w0, #31
   15cb0:	and	w0, w0, #0x1
   15cb4:	and	w0, w0, #0xff
   15cb8:	cmp	w0, #0x0
   15cbc:	b.ne	15ccc <mpc_fix_inf@@Base+0xa8>  // b.any
   15cc0:	ldr	w0, [sp, #20]
   15cc4:	cmp	w0, #0x3
   15cc8:	b.eq	15d10 <mpc_fix_inf@@Base+0xec>  // b.none
   15ccc:	ldr	x0, [sp, #24]
   15cd0:	ldr	x1, [x0, #16]
   15cd4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15cd8:	cmp	x1, x0
   15cdc:	b.ge	15d04 <mpc_fix_inf@@Base+0xe0>  // b.tcont
   15ce0:	ldr	x0, [sp, #24]
   15ce4:	ldr	x1, [x0, #16]
   15ce8:	mov	x0, #0x2                   	// #2
   15cec:	movk	x0, #0x8000, lsl #48
   15cf0:	cmp	x1, x0
   15cf4:	b.ne	15cfc <mpc_fix_inf@@Base+0xd8>  // b.any
   15cf8:	bl	4bd0 <mpfr_set_erangeflag@plt>
   15cfc:	mov	w0, #0x0                   	// #0
   15d00:	b	15db8 <mpc_fix_inf@@Base+0x194>
   15d04:	ldr	x0, [sp, #24]
   15d08:	ldr	w0, [x0, #8]
   15d0c:	b	15db8 <mpc_fix_inf@@Base+0x194>
   15d10:	ldr	x0, [sp, #24]
   15d14:	ldr	x1, [x0, #16]
   15d18:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15d1c:	cmp	x1, x0
   15d20:	b.ge	15d48 <mpc_fix_inf@@Base+0x124>  // b.tcont
   15d24:	ldr	x0, [sp, #24]
   15d28:	ldr	x1, [x0, #16]
   15d2c:	mov	x0, #0x2                   	// #2
   15d30:	movk	x0, #0x8000, lsl #48
   15d34:	cmp	x1, x0
   15d38:	b.ne	15d40 <mpc_fix_inf@@Base+0x11c>  // b.any
   15d3c:	bl	4bd0 <mpfr_set_erangeflag@plt>
   15d40:	mov	w0, #0x0                   	// #0
   15d44:	b	15d58 <mpc_fix_inf@@Base+0x134>
   15d48:	ldr	x0, [sp, #24]
   15d4c:	ldr	w0, [x0, #8]
   15d50:	lsr	w0, w0, #31
   15d54:	and	w0, w0, #0xff
   15d58:	cmp	w0, #0x0
   15d5c:	b.eq	15d6c <mpc_fix_inf@@Base+0x148>  // b.none
   15d60:	ldr	x0, [sp, #24]
   15d64:	bl	4ee0 <mpfr_nextabove@plt>
   15d68:	b	15d74 <mpc_fix_inf@@Base+0x150>
   15d6c:	ldr	x0, [sp, #24]
   15d70:	bl	4c80 <mpfr_nextbelow@plt>
   15d74:	ldr	x0, [sp, #24]
   15d78:	ldr	x1, [x0, #16]
   15d7c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   15d80:	cmp	x1, x0
   15d84:	b.ge	15dac <mpc_fix_inf@@Base+0x188>  // b.tcont
   15d88:	ldr	x0, [sp, #24]
   15d8c:	ldr	x1, [x0, #16]
   15d90:	mov	x0, #0x2                   	// #2
   15d94:	movk	x0, #0x8000, lsl #48
   15d98:	cmp	x1, x0
   15d9c:	b.ne	15da4 <mpc_fix_inf@@Base+0x180>  // b.any
   15da0:	bl	4bd0 <mpfr_set_erangeflag@plt>
   15da4:	mov	w0, #0x0                   	// #0
   15da8:	b	15db8 <mpc_fix_inf@@Base+0x194>
   15dac:	ldr	x0, [sp, #24]
   15db0:	ldr	w0, [x0, #8]
   15db4:	neg	w0, w0
   15db8:	ldp	x29, x30, [sp], #32
   15dbc:	ret

0000000000015dc0 <mpc_fix_zero@@Base>:
   15dc0:	stp	x29, x30, [sp, #-32]!
   15dc4:	mov	x29, sp
   15dc8:	str	x0, [sp, #24]
   15dcc:	str	w1, [sp, #20]
   15dd0:	ldr	x0, [sp, #24]
   15dd4:	ldr	w0, [x0, #8]
   15dd8:	cmp	w0, #0x0
   15ddc:	b.ge	15dec <mpc_fix_zero@@Base+0x2c>  // b.tcont
   15de0:	ldr	w0, [sp, #20]
   15de4:	cmp	w0, #0x3
   15de8:	b.eq	15e34 <mpc_fix_zero@@Base+0x74>  // b.none
   15dec:	ldr	x0, [sp, #24]
   15df0:	ldr	w0, [x0, #8]
   15df4:	lsr	w0, w0, #31
   15df8:	and	w0, w0, #0x1
   15dfc:	and	w0, w0, #0xff
   15e00:	cmp	w0, #0x0
   15e04:	b.ne	15e14 <mpc_fix_zero@@Base+0x54>  // b.any
   15e08:	ldr	w0, [sp, #20]
   15e0c:	cmp	w0, #0x2
   15e10:	b.eq	15e34 <mpc_fix_zero@@Base+0x74>  // b.none
   15e14:	ldr	x0, [sp, #24]
   15e18:	ldr	w0, [x0, #8]
   15e1c:	cmp	w0, #0x0
   15e20:	b.lt	15e2c <mpc_fix_zero@@Base+0x6c>  // b.tstop
   15e24:	mov	w0, #0xffffffff            	// #-1
   15e28:	b	15e60 <mpc_fix_zero@@Base+0xa0>
   15e2c:	mov	w0, #0x1                   	// #1
   15e30:	b	15e60 <mpc_fix_zero@@Base+0xa0>
   15e34:	ldr	x0, [sp, #24]
   15e38:	ldr	w0, [x0, #8]
   15e3c:	cmp	w0, #0x0
   15e40:	b.lt	15e54 <mpc_fix_zero@@Base+0x94>  // b.tstop
   15e44:	ldr	x0, [sp, #24]
   15e48:	bl	4ee0 <mpfr_nextabove@plt>
   15e4c:	mov	w0, #0x1                   	// #1
   15e50:	b	15e60 <mpc_fix_zero@@Base+0xa0>
   15e54:	ldr	x0, [sp, #24]
   15e58:	bl	4c80 <mpfr_nextbelow@plt>
   15e5c:	mov	w0, #0xffffffff            	// #-1
   15e60:	ldp	x29, x30, [sp], #32
   15e64:	ret

0000000000015e68 <mpc_sin_cos@@Base>:
   15e68:	stp	x29, x30, [sp, #-288]!
   15e6c:	mov	x29, sp
   15e70:	str	x0, [sp, #40]
   15e74:	str	x1, [sp, #32]
   15e78:	str	x2, [sp, #24]
   15e7c:	str	w3, [sp, #20]
   15e80:	str	w4, [sp, #16]
   15e84:	ldr	x0, [sp, #24]
   15e88:	bl	55c0 <mpfr_number_p@plt>
   15e8c:	cmp	w0, #0x0
   15e90:	b.eq	15ea8 <mpc_sin_cos@@Base+0x40>  // b.none
   15e94:	ldr	x0, [sp, #24]
   15e98:	add	x0, x0, #0x20
   15e9c:	bl	55c0 <mpfr_number_p@plt>
   15ea0:	cmp	w0, #0x0
   15ea4:	b.ne	15ec4 <mpc_sin_cos@@Base+0x5c>  // b.any
   15ea8:	ldr	w4, [sp, #16]
   15eac:	ldr	w3, [sp, #20]
   15eb0:	ldr	x2, [sp, #24]
   15eb4:	ldr	x1, [sp, #32]
   15eb8:	ldr	x0, [sp, #40]
   15ebc:	bl	151d8 <mpc_sin@@Base+0x38>
   15ec0:	b	16628 <mpc_sin_cos@@Base+0x7c0>
   15ec4:	ldr	x0, [sp, #24]
   15ec8:	ldr	x1, [x0, #48]
   15ecc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   15ed0:	cmp	x1, x0
   15ed4:	b.ne	15ef4 <mpc_sin_cos@@Base+0x8c>  // b.any
   15ed8:	ldr	w4, [sp, #16]
   15edc:	ldr	w3, [sp, #20]
   15ee0:	ldr	x2, [sp, #24]
   15ee4:	ldr	x1, [sp, #32]
   15ee8:	ldr	x0, [sp, #40]
   15eec:	bl	157dc <mpc_sin@@Base+0x63c>
   15ef0:	b	16628 <mpc_sin_cos@@Base+0x7c0>
   15ef4:	ldr	x0, [sp, #24]
   15ef8:	ldr	x1, [x0, #16]
   15efc:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   15f00:	cmp	x1, x0
   15f04:	b.ne	15f24 <mpc_sin_cos@@Base+0xbc>  // b.any
   15f08:	ldr	w4, [sp, #16]
   15f0c:	ldr	w3, [sp, #20]
   15f10:	ldr	x2, [sp, #24]
   15f14:	ldr	x1, [sp, #32]
   15f18:	ldr	x0, [sp, #40]
   15f1c:	bl	15a04 <mpc_sin@@Base+0x864>
   15f20:	b	16628 <mpc_sin_cos@@Base+0x7c0>
   15f24:	str	wzr, [sp, #256]
   15f28:	mov	x0, #0x2                   	// #2
   15f2c:	str	x0, [sp, #280]
   15f30:	ldr	x0, [sp, #40]
   15f34:	cmp	x0, #0x0
   15f38:	b.eq	16000 <mpc_sin_cos@@Base+0x198>  // b.none
   15f3c:	ldr	x0, [sp, #40]
   15f40:	ldr	x1, [x0, #32]
   15f44:	ldr	x0, [sp, #40]
   15f48:	ldr	x0, [x0]
   15f4c:	cmp	x1, x0
   15f50:	csel	x0, x1, x0, ge  // ge = tcont
   15f54:	ldr	x2, [sp, #280]
   15f58:	ldr	x1, [sp, #280]
   15f5c:	cmp	x2, x0
   15f60:	csel	x0, x1, x0, ge  // ge = tcont
   15f64:	str	x0, [sp, #280]
   15f68:	ldr	x0, [sp, #24]
   15f6c:	ldr	x1, [x0, #32]
   15f70:	ldr	x0, [sp, #24]
   15f74:	ldr	x0, [x0]
   15f78:	cmp	x1, x0
   15f7c:	csel	x0, x1, x0, ge  // ge = tcont
   15f80:	ldr	x1, [sp, #280]
   15f84:	cmp	x1, x0
   15f88:	b.lt	16000 <mpc_sin_cos@@Base+0x198>  // b.tstop
   15f8c:	ldr	x0, [sp, #24]
   15f90:	ldr	x0, [x0, #16]
   15f94:	str	x0, [sp, #248]
   15f98:	ldr	x0, [sp, #24]
   15f9c:	ldr	x0, [x0, #48]
   15fa0:	str	x0, [sp, #240]
   15fa4:	ldr	x0, [sp, #240]
   15fa8:	ldr	x2, [sp, #248]
   15fac:	ldr	x1, [sp, #248]
   15fb0:	cmp	x2, x0
   15fb4:	csel	x0, x1, x0, ge  // ge = tcont
   15fb8:	str	x0, [sp, #248]
   15fbc:	ldr	x0, [sp, #248]
   15fc0:	cmp	x0, #0x0
   15fc4:	b.ge	16000 <mpc_sin_cos@@Base+0x198>  // b.tcont
   15fc8:	ldr	x1, [sp, #248]
   15fcc:	mov	x0, #0x0                   	// #0
   15fd0:	sub	x0, x0, x1
   15fd4:	lsl	x0, x0, #1
   15fd8:	add	x0, x0, #0x2
   15fdc:	ldr	x1, [sp, #280]
   15fe0:	cmp	x1, x0
   15fe4:	b.gt	16000 <mpc_sin_cos@@Base+0x198>
   15fe8:	ldr	x1, [sp, #248]
   15fec:	mov	x0, #0x0                   	// #0
   15ff0:	sub	x0, x0, x1
   15ff4:	lsl	x0, x0, #1
   15ff8:	add	x0, x0, #0x3
   15ffc:	str	x0, [sp, #280]
   16000:	ldr	x0, [sp, #32]
   16004:	cmp	x0, #0x0
   16008:	b.eq	16038 <mpc_sin_cos@@Base+0x1d0>  // b.none
   1600c:	ldr	x0, [sp, #32]
   16010:	ldr	x1, [x0, #32]
   16014:	ldr	x0, [sp, #32]
   16018:	ldr	x0, [x0]
   1601c:	cmp	x1, x0
   16020:	csel	x0, x1, x0, ge  // ge = tcont
   16024:	ldr	x2, [sp, #280]
   16028:	ldr	x1, [sp, #280]
   1602c:	cmp	x2, x0
   16030:	csel	x0, x1, x0, ge  // ge = tcont
   16034:	str	x0, [sp, #280]
   16038:	add	x0, sp, #0x30
   1603c:	mov	x1, #0x2                   	// #2
   16040:	bl	5530 <mpfr_init2@plt>
   16044:	add	x0, sp, #0x50
   16048:	mov	x1, #0x2                   	// #2
   1604c:	bl	5530 <mpfr_init2@plt>
   16050:	add	x0, sp, #0x70
   16054:	mov	x1, #0x2                   	// #2
   16058:	bl	5530 <mpfr_init2@plt>
   1605c:	add	x0, sp, #0x90
   16060:	mov	x1, #0x2                   	// #2
   16064:	bl	5530 <mpfr_init2@plt>
   16068:	add	x0, sp, #0xb0
   1606c:	mov	x1, #0x2                   	// #2
   16070:	bl	5530 <mpfr_init2@plt>
   16074:	add	x0, sp, #0xd0
   16078:	mov	x1, #0x2                   	// #2
   1607c:	bl	5530 <mpfr_init2@plt>
   16080:	ldr	w0, [sp, #256]
   16084:	add	w0, w0, #0x1
   16088:	str	w0, [sp, #256]
   1608c:	mov	w0, #0x1                   	// #1
   16090:	str	w0, [sp, #276]
   16094:	ldr	w0, [sp, #256]
   16098:	cmp	w0, #0x2
   1609c:	b.gt	160b0 <mpc_sin_cos@@Base+0x248>
   160a0:	ldr	x0, [sp, #280]
   160a4:	bl	4de0 <mpc_ceil_log2@plt>
   160a8:	add	x0, x0, #0x5
   160ac:	b	160c0 <mpc_sin_cos@@Base+0x258>
   160b0:	ldr	x0, [sp, #280]
   160b4:	lsr	x1, x0, #63
   160b8:	add	x0, x1, x0
   160bc:	asr	x0, x0, #1
   160c0:	ldr	x1, [sp, #280]
   160c4:	add	x0, x1, x0
   160c8:	str	x0, [sp, #280]
   160cc:	add	x0, sp, #0x30
   160d0:	ldr	x1, [sp, #280]
   160d4:	bl	4d40 <mpfr_set_prec@plt>
   160d8:	add	x0, sp, #0x50
   160dc:	ldr	x1, [sp, #280]
   160e0:	bl	4d40 <mpfr_set_prec@plt>
   160e4:	add	x0, sp, #0x70
   160e8:	ldr	x1, [sp, #280]
   160ec:	bl	4d40 <mpfr_set_prec@plt>
   160f0:	add	x0, sp, #0x90
   160f4:	ldr	x1, [sp, #280]
   160f8:	bl	4d40 <mpfr_set_prec@plt>
   160fc:	add	x0, sp, #0xb0
   16100:	ldr	x1, [sp, #280]
   16104:	bl	4d40 <mpfr_set_prec@plt>
   16108:	add	x0, sp, #0xd0
   1610c:	ldr	x1, [sp, #280]
   16110:	bl	4d40 <mpfr_set_prec@plt>
   16114:	ldr	x2, [sp, #24]
   16118:	add	x1, sp, #0x50
   1611c:	add	x0, sp, #0x30
   16120:	mov	w3, #0x0                   	// #0
   16124:	bl	5620 <mpfr_sin_cos@plt>
   16128:	ldr	x0, [sp, #24]
   1612c:	add	x2, x0, #0x20
   16130:	add	x1, sp, #0x90
   16134:	add	x0, sp, #0x70
   16138:	mov	w3, #0x0                   	// #0
   1613c:	bl	4cb0 <mpfr_sinh_cosh@plt>
   16140:	ldr	x0, [sp, #40]
   16144:	cmp	x0, #0x0
   16148:	b.eq	16258 <mpc_sin_cos@@Base+0x3f0>  // b.none
   1614c:	add	x2, sp, #0x90
   16150:	add	x1, sp, #0x30
   16154:	add	x0, sp, #0xb0
   16158:	mov	w3, #0x0                   	// #0
   1615c:	bl	4c40 <mpfr_mul@plt>
   16160:	add	x0, sp, #0xb0
   16164:	bl	55c0 <mpfr_number_p@plt>
   16168:	cmp	w0, #0x0
   1616c:	b.eq	161bc <mpc_sin_cos@@Base+0x354>  // b.none
   16170:	ldr	x0, [sp, #280]
   16174:	sub	x5, x0, #0x2
   16178:	ldr	x0, [sp, #40]
   1617c:	ldr	x1, [x0]
   16180:	ldr	w0, [sp, #20]
   16184:	and	w0, w0, #0xf
   16188:	cmp	w0, #0x0
   1618c:	cset	w0, eq  // eq = none
   16190:	and	w0, w0, #0xff
   16194:	and	x0, x0, #0xff
   16198:	add	x1, x1, x0
   1619c:	add	x0, sp, #0xb0
   161a0:	mov	x4, x1
   161a4:	mov	w3, #0x1                   	// #1
   161a8:	mov	w2, #0x0                   	// #0
   161ac:	mov	x1, x5
   161b0:	bl	5540 <mpfr_can_round@plt>
   161b4:	cmp	w0, #0x0
   161b8:	b.eq	161c4 <mpc_sin_cos@@Base+0x35c>  // b.none
   161bc:	mov	w0, #0x1                   	// #1
   161c0:	b	161c8 <mpc_sin_cos@@Base+0x360>
   161c4:	mov	w0, #0x0                   	// #0
   161c8:	str	w0, [sp, #276]
   161cc:	ldr	w0, [sp, #276]
   161d0:	cmp	w0, #0x0
   161d4:	b.eq	16258 <mpc_sin_cos@@Base+0x3f0>  // b.none
   161d8:	add	x2, sp, #0x70
   161dc:	add	x1, sp, #0x50
   161e0:	add	x0, sp, #0xd0
   161e4:	mov	w3, #0x0                   	// #0
   161e8:	bl	4c40 <mpfr_mul@plt>
   161ec:	add	x0, sp, #0xd0
   161f0:	bl	55c0 <mpfr_number_p@plt>
   161f4:	cmp	w0, #0x0
   161f8:	b.eq	16248 <mpc_sin_cos@@Base+0x3e0>  // b.none
   161fc:	ldr	x0, [sp, #280]
   16200:	sub	x5, x0, #0x2
   16204:	ldr	x0, [sp, #40]
   16208:	ldr	x1, [x0, #32]
   1620c:	ldr	w0, [sp, #20]
   16210:	asr	w0, w0, #4
   16214:	cmp	w0, #0x0
   16218:	cset	w0, eq  // eq = none
   1621c:	and	w0, w0, #0xff
   16220:	and	x0, x0, #0xff
   16224:	add	x1, x1, x0
   16228:	add	x0, sp, #0xd0
   1622c:	mov	x4, x1
   16230:	mov	w3, #0x1                   	// #1
   16234:	mov	w2, #0x0                   	// #0
   16238:	mov	x1, x5
   1623c:	bl	5540 <mpfr_can_round@plt>
   16240:	cmp	w0, #0x0
   16244:	b.eq	16250 <mpc_sin_cos@@Base+0x3e8>  // b.none
   16248:	mov	w0, #0x1                   	// #1
   1624c:	b	16254 <mpc_sin_cos@@Base+0x3ec>
   16250:	mov	w0, #0x0                   	// #0
   16254:	str	w0, [sp, #276]
   16258:	ldr	x0, [sp, #32]
   1625c:	cmp	x0, #0x0
   16260:	b.eq	1638c <mpc_sin_cos@@Base+0x524>  // b.none
   16264:	ldr	w0, [sp, #276]
   16268:	cmp	w0, #0x0
   1626c:	b.eq	1638c <mpc_sin_cos@@Base+0x524>  // b.none
   16270:	add	x2, sp, #0x90
   16274:	add	x1, sp, #0x50
   16278:	add	x0, sp, #0x50
   1627c:	mov	w3, #0x0                   	// #0
   16280:	bl	4c40 <mpfr_mul@plt>
   16284:	add	x0, sp, #0x50
   16288:	bl	55c0 <mpfr_number_p@plt>
   1628c:	cmp	w0, #0x0
   16290:	b.eq	162e0 <mpc_sin_cos@@Base+0x478>  // b.none
   16294:	ldr	x0, [sp, #280]
   16298:	sub	x5, x0, #0x2
   1629c:	ldr	x0, [sp, #32]
   162a0:	ldr	x1, [x0]
   162a4:	ldr	w0, [sp, #16]
   162a8:	and	w0, w0, #0xf
   162ac:	cmp	w0, #0x0
   162b0:	cset	w0, eq  // eq = none
   162b4:	and	w0, w0, #0xff
   162b8:	and	x0, x0, #0xff
   162bc:	add	x1, x1, x0
   162c0:	add	x0, sp, #0x50
   162c4:	mov	x4, x1
   162c8:	mov	w3, #0x1                   	// #1
   162cc:	mov	w2, #0x0                   	// #0
   162d0:	mov	x1, x5
   162d4:	bl	5540 <mpfr_can_round@plt>
   162d8:	cmp	w0, #0x0
   162dc:	b.eq	162e8 <mpc_sin_cos@@Base+0x480>  // b.none
   162e0:	mov	w0, #0x1                   	// #1
   162e4:	b	162ec <mpc_sin_cos@@Base+0x484>
   162e8:	mov	w0, #0x0                   	// #0
   162ec:	str	w0, [sp, #276]
   162f0:	ldr	w0, [sp, #276]
   162f4:	cmp	w0, #0x0
   162f8:	b.eq	1638c <mpc_sin_cos@@Base+0x524>  // b.none
   162fc:	add	x2, sp, #0x70
   16300:	add	x1, sp, #0x30
   16304:	add	x0, sp, #0x30
   16308:	mov	w3, #0x0                   	// #0
   1630c:	bl	4c40 <mpfr_mul@plt>
   16310:	add	x1, sp, #0x30
   16314:	add	x0, sp, #0x30
   16318:	mov	w2, #0x0                   	// #0
   1631c:	bl	4c50 <mpfr_neg@plt>
   16320:	add	x0, sp, #0x30
   16324:	bl	55c0 <mpfr_number_p@plt>
   16328:	cmp	w0, #0x0
   1632c:	b.eq	1637c <mpc_sin_cos@@Base+0x514>  // b.none
   16330:	ldr	x0, [sp, #280]
   16334:	sub	x5, x0, #0x2
   16338:	ldr	x0, [sp, #32]
   1633c:	ldr	x1, [x0, #32]
   16340:	ldr	w0, [sp, #16]
   16344:	asr	w0, w0, #4
   16348:	cmp	w0, #0x0
   1634c:	cset	w0, eq  // eq = none
   16350:	and	w0, w0, #0xff
   16354:	and	x0, x0, #0xff
   16358:	add	x1, x1, x0
   1635c:	add	x0, sp, #0x30
   16360:	mov	x4, x1
   16364:	mov	w3, #0x1                   	// #1
   16368:	mov	w2, #0x0                   	// #0
   1636c:	mov	x1, x5
   16370:	bl	5540 <mpfr_can_round@plt>
   16374:	cmp	w0, #0x0
   16378:	b.eq	16384 <mpc_sin_cos@@Base+0x51c>  // b.none
   1637c:	mov	w0, #0x1                   	// #1
   16380:	b	16388 <mpc_sin_cos@@Base+0x520>
   16384:	mov	w0, #0x0                   	// #0
   16388:	str	w0, [sp, #276]
   1638c:	ldr	w0, [sp, #276]
   16390:	cmp	w0, #0x0
   16394:	b.eq	16080 <mpc_sin_cos@@Base+0x218>  // b.none
   16398:	ldr	x0, [sp, #40]
   1639c:	cmp	x0, #0x0
   163a0:	b.eq	164bc <mpc_sin_cos@@Base+0x654>  // b.none
   163a4:	ldr	x4, [sp, #40]
   163a8:	ldr	w0, [sp, #20]
   163ac:	and	w1, w0, #0xf
   163b0:	ldr	w2, [sp, #184]
   163b4:	add	x0, sp, #0xb0
   163b8:	mov	w3, w2
   163bc:	mov	w2, w1
   163c0:	mov	x1, x0
   163c4:	mov	x0, x4
   163c8:	bl	52d0 <mpfr_set4@plt>
   163cc:	str	w0, [sp, #272]
   163d0:	ldr	x1, [sp, #192]
   163d4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   163d8:	cmp	x1, x0
   163dc:	b.ne	163fc <mpc_sin_cos@@Base+0x594>  // b.any
   163e0:	ldr	x2, [sp, #40]
   163e4:	ldr	w0, [sp, #20]
   163e8:	and	w0, w0, #0xf
   163ec:	mov	w1, w0
   163f0:	mov	x0, x2
   163f4:	bl	4eb0 <mpc_fix_inf@plt>
   163f8:	str	w0, [sp, #272]
   163fc:	ldr	x0, [sp, #40]
   16400:	add	x4, x0, #0x20
   16404:	ldr	w0, [sp, #20]
   16408:	asr	w1, w0, #4
   1640c:	ldr	w2, [sp, #216]
   16410:	add	x0, sp, #0xd0
   16414:	mov	w3, w2
   16418:	mov	w2, w1
   1641c:	mov	x1, x0
   16420:	mov	x0, x4
   16424:	bl	52d0 <mpfr_set4@plt>
   16428:	str	w0, [sp, #268]
   1642c:	ldr	x1, [sp, #224]
   16430:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   16434:	cmp	x1, x0
   16438:	b.ne	1645c <mpc_sin_cos@@Base+0x5f4>  // b.any
   1643c:	ldr	x0, [sp, #40]
   16440:	add	x2, x0, #0x20
   16444:	ldr	w0, [sp, #20]
   16448:	asr	w0, w0, #4
   1644c:	mov	w1, w0
   16450:	mov	x0, x2
   16454:	bl	4eb0 <mpc_fix_inf@plt>
   16458:	str	w0, [sp, #268]
   1645c:	ldr	w0, [sp, #272]
   16460:	cmp	w0, #0x0
   16464:	b.lt	16480 <mpc_sin_cos@@Base+0x618>  // b.tstop
   16468:	ldr	w0, [sp, #272]
   1646c:	cmp	w0, #0x0
   16470:	cset	w0, ne  // ne = any
   16474:	and	w0, w0, #0xff
   16478:	mov	w1, w0
   1647c:	b	16484 <mpc_sin_cos@@Base+0x61c>
   16480:	mov	w1, #0x2                   	// #2
   16484:	ldr	w0, [sp, #268]
   16488:	cmp	w0, #0x0
   1648c:	b.lt	164ac <mpc_sin_cos@@Base+0x644>  // b.tstop
   16490:	ldr	w0, [sp, #268]
   16494:	cmp	w0, #0x0
   16498:	b.eq	164a4 <mpc_sin_cos@@Base+0x63c>  // b.none
   1649c:	mov	w0, #0x4                   	// #4
   164a0:	b	164b0 <mpc_sin_cos@@Base+0x648>
   164a4:	mov	w0, #0x0                   	// #0
   164a8:	b	164b0 <mpc_sin_cos@@Base+0x648>
   164ac:	mov	w0, #0x8                   	// #8
   164b0:	orr	w0, w1, w0
   164b4:	str	w0, [sp, #264]
   164b8:	b	164c0 <mpc_sin_cos@@Base+0x658>
   164bc:	str	wzr, [sp, #264]
   164c0:	ldr	x0, [sp, #32]
   164c4:	cmp	x0, #0x0
   164c8:	b.eq	165e4 <mpc_sin_cos@@Base+0x77c>  // b.none
   164cc:	ldr	x4, [sp, #32]
   164d0:	ldr	w0, [sp, #16]
   164d4:	and	w1, w0, #0xf
   164d8:	ldr	w2, [sp, #88]
   164dc:	add	x0, sp, #0x50
   164e0:	mov	w3, w2
   164e4:	mov	w2, w1
   164e8:	mov	x1, x0
   164ec:	mov	x0, x4
   164f0:	bl	52d0 <mpfr_set4@plt>
   164f4:	str	w0, [sp, #272]
   164f8:	ldr	x1, [sp, #96]
   164fc:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   16500:	cmp	x1, x0
   16504:	b.ne	16524 <mpc_sin_cos@@Base+0x6bc>  // b.any
   16508:	ldr	x2, [sp, #32]
   1650c:	ldr	w0, [sp, #16]
   16510:	and	w0, w0, #0xf
   16514:	mov	w1, w0
   16518:	mov	x0, x2
   1651c:	bl	4eb0 <mpc_fix_inf@plt>
   16520:	str	w0, [sp, #272]
   16524:	ldr	x0, [sp, #32]
   16528:	add	x4, x0, #0x20
   1652c:	ldr	w0, [sp, #16]
   16530:	asr	w1, w0, #4
   16534:	ldr	w2, [sp, #56]
   16538:	add	x0, sp, #0x30
   1653c:	mov	w3, w2
   16540:	mov	w2, w1
   16544:	mov	x1, x0
   16548:	mov	x0, x4
   1654c:	bl	52d0 <mpfr_set4@plt>
   16550:	str	w0, [sp, #268]
   16554:	ldr	x1, [sp, #64]
   16558:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1655c:	cmp	x1, x0
   16560:	b.ne	16584 <mpc_sin_cos@@Base+0x71c>  // b.any
   16564:	ldr	x0, [sp, #32]
   16568:	add	x2, x0, #0x20
   1656c:	ldr	w0, [sp, #16]
   16570:	asr	w0, w0, #4
   16574:	mov	w1, w0
   16578:	mov	x0, x2
   1657c:	bl	4eb0 <mpc_fix_inf@plt>
   16580:	str	w0, [sp, #268]
   16584:	ldr	w0, [sp, #272]
   16588:	cmp	w0, #0x0
   1658c:	b.lt	165a8 <mpc_sin_cos@@Base+0x740>  // b.tstop
   16590:	ldr	w0, [sp, #272]
   16594:	cmp	w0, #0x0
   16598:	cset	w0, ne  // ne = any
   1659c:	and	w0, w0, #0xff
   165a0:	mov	w1, w0
   165a4:	b	165ac <mpc_sin_cos@@Base+0x744>
   165a8:	mov	w1, #0x2                   	// #2
   165ac:	ldr	w0, [sp, #268]
   165b0:	cmp	w0, #0x0
   165b4:	b.lt	165d4 <mpc_sin_cos@@Base+0x76c>  // b.tstop
   165b8:	ldr	w0, [sp, #268]
   165bc:	cmp	w0, #0x0
   165c0:	b.eq	165cc <mpc_sin_cos@@Base+0x764>  // b.none
   165c4:	mov	w0, #0x4                   	// #4
   165c8:	b	165d8 <mpc_sin_cos@@Base+0x770>
   165cc:	mov	w0, #0x0                   	// #0
   165d0:	b	165d8 <mpc_sin_cos@@Base+0x770>
   165d4:	mov	w0, #0x8                   	// #8
   165d8:	orr	w0, w1, w0
   165dc:	str	w0, [sp, #260]
   165e0:	b	165e8 <mpc_sin_cos@@Base+0x780>
   165e4:	str	wzr, [sp, #260]
   165e8:	add	x0, sp, #0x30
   165ec:	bl	4e30 <mpfr_clear@plt>
   165f0:	add	x0, sp, #0x50
   165f4:	bl	4e30 <mpfr_clear@plt>
   165f8:	add	x0, sp, #0x70
   165fc:	bl	4e30 <mpfr_clear@plt>
   16600:	add	x0, sp, #0x90
   16604:	bl	4e30 <mpfr_clear@plt>
   16608:	add	x0, sp, #0xb0
   1660c:	bl	4e30 <mpfr_clear@plt>
   16610:	add	x0, sp, #0xd0
   16614:	bl	4e30 <mpfr_clear@plt>
   16618:	ldr	w0, [sp, #260]
   1661c:	lsl	w1, w0, #4
   16620:	ldr	w0, [sp, #264]
   16624:	orr	w0, w1, w0
   16628:	ldp	x29, x30, [sp], #288
   1662c:	ret

0000000000016630 <mpc_sinh@@Base>:
   16630:	stp	x29, x30, [sp, #-192]!
   16634:	mov	x29, sp
   16638:	str	x0, [sp, #40]
   1663c:	str	x1, [sp, #32]
   16640:	str	w2, [sp, #28]
   16644:	ldr	x0, [sp, #32]
   16648:	add	x0, x0, #0x20
   1664c:	add	x2, sp, #0x78
   16650:	mov	x3, x0
   16654:	ldp	x0, x1, [x3]
   16658:	stp	x0, x1, [x2]
   1665c:	ldp	x0, x1, [x3, #16]
   16660:	stp	x0, x1, [x2, #16]
   16664:	ldr	x0, [sp, #32]
   16668:	add	x2, sp, #0x98
   1666c:	mov	x3, x0
   16670:	ldp	x0, x1, [x3]
   16674:	stp	x0, x1, [x2]
   16678:	ldp	x0, x1, [x3, #16]
   1667c:	stp	x0, x1, [x2, #16]
   16680:	ldr	x0, [sp, #40]
   16684:	add	x0, x0, #0x20
   16688:	add	x2, sp, #0x38
   1668c:	mov	x3, x0
   16690:	ldp	x0, x1, [x3]
   16694:	stp	x0, x1, [x2]
   16698:	ldp	x0, x1, [x3, #16]
   1669c:	stp	x0, x1, [x2, #16]
   166a0:	ldr	x0, [sp, #40]
   166a4:	add	x2, sp, #0x58
   166a8:	mov	x3, x0
   166ac:	ldp	x0, x1, [x3]
   166b0:	stp	x0, x1, [x2]
   166b4:	ldp	x0, x1, [x3, #16]
   166b8:	stp	x0, x1, [x2, #16]
   166bc:	ldr	w0, [sp, #28]
   166c0:	asr	w1, w0, #4
   166c4:	ldr	w0, [sp, #28]
   166c8:	lsl	w0, w0, #4
   166cc:	and	w0, w0, #0xff
   166d0:	add	w2, w1, w0
   166d4:	add	x1, sp, #0x78
   166d8:	add	x0, sp, #0x38
   166dc:	bl	5050 <mpc_sin@plt>
   166e0:	str	w0, [sp, #188]
   166e4:	ldr	x0, [sp, #40]
   166e8:	mov	x3, x0
   166ec:	add	x2, sp, #0x58
   166f0:	ldp	x0, x1, [x2]
   166f4:	stp	x0, x1, [x3]
   166f8:	ldp	x0, x1, [x2, #16]
   166fc:	stp	x0, x1, [x3, #16]
   16700:	ldr	x0, [sp, #40]
   16704:	add	x0, x0, #0x20
   16708:	mov	x3, x0
   1670c:	add	x2, sp, #0x38
   16710:	ldp	x0, x1, [x2]
   16714:	stp	x0, x1, [x3]
   16718:	ldp	x0, x1, [x2, #16]
   1671c:	stp	x0, x1, [x3, #16]
   16720:	ldr	w0, [sp, #188]
   16724:	asr	w0, w0, #2
   16728:	cmp	w0, #0x2
   1672c:	b.eq	16760 <mpc_sinh@@Base+0x130>  // b.none
   16730:	ldr	w0, [sp, #188]
   16734:	asr	w0, w0, #2
   16738:	cmp	w0, #0x2
   1673c:	b.eq	16750 <mpc_sinh@@Base+0x120>  // b.none
   16740:	ldr	w0, [sp, #188]
   16744:	asr	w0, w0, #2
   16748:	cmp	w0, #0x0
   1674c:	b.eq	16758 <mpc_sinh@@Base+0x128>  // b.none
   16750:	mov	w0, #0x1                   	// #1
   16754:	b	16764 <mpc_sinh@@Base+0x134>
   16758:	mov	w0, #0x0                   	// #0
   1675c:	b	16764 <mpc_sinh@@Base+0x134>
   16760:	mov	w0, #0x2                   	// #2
   16764:	ldr	w1, [sp, #188]
   16768:	and	w1, w1, #0x3
   1676c:	cmp	w1, #0x2
   16770:	b.eq	167a8 <mpc_sinh@@Base+0x178>  // b.none
   16774:	ldr	w1, [sp, #188]
   16778:	and	w1, w1, #0x3
   1677c:	cmp	w1, #0x2
   16780:	b.eq	16794 <mpc_sinh@@Base+0x164>  // b.none
   16784:	ldr	w1, [sp, #188]
   16788:	and	w1, w1, #0x3
   1678c:	cmp	w1, #0x0
   16790:	b.eq	1679c <mpc_sinh@@Base+0x16c>  // b.none
   16794:	mov	w1, #0x1                   	// #1
   16798:	b	167a0 <mpc_sinh@@Base+0x170>
   1679c:	mov	w1, #0x0                   	// #0
   167a0:	lsl	w1, w1, #2
   167a4:	b	167ac <mpc_sinh@@Base+0x17c>
   167a8:	mov	w1, #0x8                   	// #8
   167ac:	orr	w0, w0, w1
   167b0:	ldp	x29, x30, [sp], #192
   167b4:	ret
   167b8:	stp	x29, x30, [sp, #-208]!
   167bc:	mov	x29, sp
   167c0:	str	x0, [sp, #40]
   167c4:	str	x1, [sp, #32]
   167c8:	str	x2, [sp, #24]
   167cc:	str	w3, [sp, #20]
   167d0:	ldr	x0, [sp, #32]
   167d4:	ldr	x0, [x0]
   167d8:	lsl	x1, x0, #1
   167dc:	add	x0, sp, #0x78
   167e0:	bl	5530 <mpfr_init2@plt>
   167e4:	ldr	x0, [sp, #24]
   167e8:	ldr	x0, [x0]
   167ec:	lsl	x1, x0, #1
   167f0:	add	x0, sp, #0x58
   167f4:	bl	5530 <mpfr_init2@plt>
   167f8:	add	x0, sp, #0x78
   167fc:	mov	w2, #0x0                   	// #0
   16800:	ldr	x1, [sp, #32]
   16804:	bl	5110 <mpfr_sqr@plt>
   16808:	add	x0, sp, #0x58
   1680c:	mov	w2, #0x0                   	// #0
   16810:	ldr	x1, [sp, #24]
   16814:	bl	5110 <mpfr_sqr@plt>
   16818:	add	x1, sp, #0x58
   1681c:	add	x0, sp, #0x78
   16820:	ldr	w3, [sp, #20]
   16824:	mov	x2, x1
   16828:	mov	x1, x0
   1682c:	ldr	x0, [sp, #40]
   16830:	bl	4b30 <mpfr_sub@plt>
   16834:	str	w0, [sp, #204]
   16838:	ldr	x0, [sp, #40]
   1683c:	ldr	x1, [x0, #16]
   16840:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   16844:	cmp	x1, x0
   16848:	b.ne	1689c <mpc_sinh@@Base+0x26c>  // b.any
   1684c:	ldr	x0, [sp, #40]
   16850:	ldr	w0, [x0, #8]
   16854:	cmp	w0, #0x0
   16858:	b.ge	16864 <mpc_sinh@@Base+0x234>  // b.tcont
   1685c:	mov	x0, #0xffffffffffffffff    	// #-1
   16860:	b	16868 <mpc_sinh@@Base+0x238>
   16864:	mov	x0, #0x1                   	// #1
   16868:	mov	w3, #0x0                   	// #0
   1686c:	mov	x2, #0x0                   	// #0
   16870:	mov	x1, x0
   16874:	ldr	x0, [sp, #40]
   16878:	bl	4ab0 <mpfr_set_si_2exp@plt>
   1687c:	bl	5300 <mpfr_get_emax@plt>
   16880:	ldr	w3, [sp, #20]
   16884:	mov	x2, x0
   16888:	ldr	x1, [sp, #40]
   1688c:	ldr	x0, [sp, #40]
   16890:	bl	5040 <mpfr_mul_2ui@plt>
   16894:	str	w0, [sp, #204]
   16898:	b	16c94 <mpc_sinh@@Base+0x664>
   1689c:	ldr	x1, [sp, #136]
   168a0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   168a4:	cmp	x1, x0
   168a8:	b.ne	168dc <mpc_sinh@@Base+0x2ac>  // b.any
   168ac:	ldr	x1, [sp, #104]
   168b0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   168b4:	cmp	x1, x0
   168b8:	b.eq	168dc <mpc_sinh@@Base+0x2ac>  // b.none
   168bc:	ldr	w0, [sp, #128]
   168c0:	cmp	w0, #0x0
   168c4:	b.ge	168d0 <mpc_sinh@@Base+0x2a0>  // b.tcont
   168c8:	mov	w0, #0x1                   	// #1
   168cc:	b	168d4 <mpc_sinh@@Base+0x2a4>
   168d0:	mov	w0, #0xffffffff            	// #-1
   168d4:	str	w0, [sp, #204]
   168d8:	b	16c94 <mpc_sinh@@Base+0x664>
   168dc:	ldr	x1, [sp, #104]
   168e0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   168e4:	cmp	x1, x0
   168e8:	b.ne	1691c <mpc_sinh@@Base+0x2ec>  // b.any
   168ec:	ldr	x1, [sp, #136]
   168f0:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   168f4:	cmp	x1, x0
   168f8:	b.eq	1691c <mpc_sinh@@Base+0x2ec>  // b.none
   168fc:	ldr	w0, [sp, #96]
   16900:	cmp	w0, #0x0
   16904:	b.ge	16910 <mpc_sinh@@Base+0x2e0>  // b.tcont
   16908:	mov	w0, #0xffffffff            	// #-1
   1690c:	b	16914 <mpc_sinh@@Base+0x2e4>
   16910:	mov	w0, #0x1                   	// #1
   16914:	str	w0, [sp, #204]
   16918:	b	16c94 <mpc_sinh@@Base+0x664>
   1691c:	ldr	x0, [sp, #40]
   16920:	ldr	x1, [x0, #16]
   16924:	mov	x0, #0x2                   	// #2
   16928:	movk	x0, #0x8000, lsl #48
   1692c:	cmp	x1, x0
   16930:	b.eq	16954 <mpc_sinh@@Base+0x324>  // b.none
   16934:	ldr	x1, [sp, #136]
   16938:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   1693c:	cmp	x1, x0
   16940:	b.ne	16c94 <mpc_sinh@@Base+0x664>  // b.any
   16944:	ldr	x1, [sp, #104]
   16948:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   1694c:	cmp	x1, x0
   16950:	b.ne	16c94 <mpc_sinh@@Base+0x664>  // b.any
   16954:	ldr	x0, [sp, #32]
   16958:	ldr	x0, [x0, #16]
   1695c:	str	x0, [sp, #192]
   16960:	ldr	x0, [sp, #24]
   16964:	ldr	x0, [x0, #16]
   16968:	str	x0, [sp, #184]
   1696c:	mov	x1, #0x0                   	// #0
   16970:	ldr	x0, [sp, #32]
   16974:	bl	4ce0 <mpfr_set_exp@plt>
   16978:	mov	x1, #0x0                   	// #0
   1697c:	ldr	x0, [sp, #24]
   16980:	bl	4ce0 <mpfr_set_exp@plt>
   16984:	add	x0, sp, #0x48
   16988:	bl	5590 <__gmpz_init@plt>
   1698c:	add	x0, sp, #0x38
   16990:	bl	5590 <__gmpz_init@plt>
   16994:	add	x0, sp, #0x48
   16998:	ldr	x1, [sp, #192]
   1699c:	bl	55b0 <__gmpz_set_si@plt>
   169a0:	add	x1, sp, #0x48
   169a4:	add	x0, sp, #0x48
   169a8:	mov	x2, #0x1                   	// #1
   169ac:	bl	4f80 <__gmpz_mul_2exp@plt>
   169b0:	add	x0, sp, #0x38
   169b4:	ldr	x1, [sp, #184]
   169b8:	bl	55b0 <__gmpz_set_si@plt>
   169bc:	add	x1, sp, #0x38
   169c0:	add	x0, sp, #0x38
   169c4:	mov	x2, #0x1                   	// #1
   169c8:	bl	4f80 <__gmpz_mul_2exp@plt>
   169cc:	add	x0, sp, #0x78
   169d0:	mov	w2, #0x0                   	// #0
   169d4:	ldr	x1, [sp, #32]
   169d8:	bl	5110 <mpfr_sqr@plt>
   169dc:	ldr	x0, [sp, #136]
   169e0:	neg	x0, x0
   169e4:	mov	x2, x0
   169e8:	add	x1, sp, #0x48
   169ec:	add	x0, sp, #0x48
   169f0:	bl	4ba0 <__gmpz_sub_ui@plt>
   169f4:	add	x0, sp, #0x78
   169f8:	mov	x1, #0x0                   	// #0
   169fc:	bl	4ce0 <mpfr_set_exp@plt>
   16a00:	add	x0, sp, #0x58
   16a04:	mov	w2, #0x0                   	// #0
   16a08:	ldr	x1, [sp, #24]
   16a0c:	bl	5110 <mpfr_sqr@plt>
   16a10:	ldr	x0, [sp, #104]
   16a14:	neg	x0, x0
   16a18:	mov	x2, x0
   16a1c:	add	x1, sp, #0x38
   16a20:	add	x0, sp, #0x38
   16a24:	bl	4ba0 <__gmpz_sub_ui@plt>
   16a28:	add	x0, sp, #0x58
   16a2c:	mov	x1, #0x0                   	// #0
   16a30:	bl	4ce0 <mpfr_set_exp@plt>
   16a34:	ldr	x0, [sp, #40]
   16a38:	ldr	x1, [x0, #16]
   16a3c:	mov	x0, #0x2                   	// #2
   16a40:	movk	x0, #0x8000, lsl #48
   16a44:	cmp	x1, x0
   16a48:	b.ne	16b50 <mpc_sinh@@Base+0x520>  // b.any
   16a4c:	bl	5300 <mpfr_get_emax@plt>
   16a50:	str	x0, [sp, #160]
   16a54:	add	x1, sp, #0x38
   16a58:	add	x0, sp, #0x48
   16a5c:	bl	5400 <__gmpz_cmp@plt>
   16a60:	cmp	w0, #0x0
   16a64:	b.lt	16aac <mpc_sinh@@Base+0x47c>  // b.tstop
   16a68:	add	x0, sp, #0x78
   16a6c:	ldr	x1, [sp, #160]
   16a70:	bl	4ce0 <mpfr_set_exp@plt>
   16a74:	ldr	x2, [sp, #160]
   16a78:	add	x1, sp, #0x48
   16a7c:	add	x0, sp, #0x48
   16a80:	bl	4ba0 <__gmpz_sub_ui@plt>
   16a84:	add	x2, sp, #0x48
   16a88:	add	x1, sp, #0x38
   16a8c:	add	x0, sp, #0x38
   16a90:	bl	4c90 <__gmpz_sub@plt>
   16a94:	add	x0, sp, #0x38
   16a98:	bl	4fc0 <__gmpz_get_ui@plt>
   16a9c:	mov	x1, x0
   16aa0:	add	x0, sp, #0x58
   16aa4:	bl	4ce0 <mpfr_set_exp@plt>
   16aa8:	b	16af8 <mpc_sinh@@Base+0x4c8>
   16aac:	add	x0, sp, #0x58
   16ab0:	ldr	x1, [sp, #160]
   16ab4:	bl	4ce0 <mpfr_set_exp@plt>
   16ab8:	ldr	x2, [sp, #160]
   16abc:	add	x1, sp, #0x38
   16ac0:	add	x0, sp, #0x38
   16ac4:	bl	4ba0 <__gmpz_sub_ui@plt>
   16ac8:	add	x2, sp, #0x38
   16acc:	add	x1, sp, #0x48
   16ad0:	add	x0, sp, #0x48
   16ad4:	bl	4c90 <__gmpz_sub@plt>
   16ad8:	add	x0, sp, #0x48
   16adc:	bl	4fc0 <__gmpz_get_ui@plt>
   16ae0:	mov	x1, x0
   16ae4:	add	x0, sp, #0x78
   16ae8:	bl	4ce0 <mpfr_set_exp@plt>
   16aec:	add	x1, sp, #0x38
   16af0:	add	x0, sp, #0x48
   16af4:	bl	4dc0 <__gmpz_set@plt>
   16af8:	add	x1, sp, #0x58
   16afc:	add	x0, sp, #0x78
   16b00:	ldr	w3, [sp, #20]
   16b04:	mov	x2, x1
   16b08:	mov	x1, x0
   16b0c:	ldr	x0, [sp, #40]
   16b10:	bl	4b30 <mpfr_sub@plt>
   16b14:	str	w0, [sp, #204]
   16b18:	add	x0, sp, #0x48
   16b1c:	bl	4fc0 <__gmpz_get_ui@plt>
   16b20:	ldr	w3, [sp, #20]
   16b24:	mov	x2, x0
   16b28:	ldr	x1, [sp, #40]
   16b2c:	ldr	x0, [sp, #40]
   16b30:	bl	5040 <mpfr_mul_2ui@plt>
   16b34:	str	w0, [sp, #156]
   16b38:	ldr	w0, [sp, #156]
   16b3c:	cmp	w0, #0x0
   16b40:	b.eq	16c6c <mpc_sinh@@Base+0x63c>  // b.none
   16b44:	ldr	w0, [sp, #156]
   16b48:	str	w0, [sp, #204]
   16b4c:	b	16c6c <mpc_sinh@@Base+0x63c>
   16b50:	bl	5160 <mpfr_get_emin@plt>
   16b54:	str	x0, [sp, #176]
   16b58:	add	x1, sp, #0x38
   16b5c:	add	x0, sp, #0x48
   16b60:	bl	5400 <__gmpz_cmp@plt>
   16b64:	cmp	w0, #0x0
   16b68:	b.gt	16bb8 <mpc_sinh@@Base+0x588>
   16b6c:	add	x0, sp, #0x78
   16b70:	ldr	x1, [sp, #176]
   16b74:	bl	4ce0 <mpfr_set_exp@plt>
   16b78:	ldr	x0, [sp, #176]
   16b7c:	neg	x0, x0
   16b80:	mov	x2, x0
   16b84:	add	x1, sp, #0x48
   16b88:	add	x0, sp, #0x48
   16b8c:	bl	50a0 <__gmpz_add_ui@plt>
   16b90:	add	x2, sp, #0x48
   16b94:	add	x1, sp, #0x38
   16b98:	add	x0, sp, #0x38
   16b9c:	bl	4c90 <__gmpz_sub@plt>
   16ba0:	add	x0, sp, #0x38
   16ba4:	bl	4a70 <__gmpz_get_si@plt>
   16ba8:	mov	x1, x0
   16bac:	add	x0, sp, #0x58
   16bb0:	bl	4ce0 <mpfr_set_exp@plt>
   16bb4:	b	16c0c <mpc_sinh@@Base+0x5dc>
   16bb8:	add	x0, sp, #0x58
   16bbc:	ldr	x1, [sp, #176]
   16bc0:	bl	4ce0 <mpfr_set_exp@plt>
   16bc4:	ldr	x0, [sp, #176]
   16bc8:	neg	x0, x0
   16bcc:	mov	x2, x0
   16bd0:	add	x1, sp, #0x38
   16bd4:	add	x0, sp, #0x38
   16bd8:	bl	50a0 <__gmpz_add_ui@plt>
   16bdc:	add	x2, sp, #0x38
   16be0:	add	x1, sp, #0x48
   16be4:	add	x0, sp, #0x48
   16be8:	bl	4c90 <__gmpz_sub@plt>
   16bec:	add	x0, sp, #0x48
   16bf0:	bl	4a70 <__gmpz_get_si@plt>
   16bf4:	mov	x1, x0
   16bf8:	add	x0, sp, #0x78
   16bfc:	bl	4ce0 <mpfr_set_exp@plt>
   16c00:	add	x1, sp, #0x38
   16c04:	add	x0, sp, #0x48
   16c08:	bl	4dc0 <__gmpz_set@plt>
   16c0c:	add	x1, sp, #0x58
   16c10:	add	x0, sp, #0x78
   16c14:	ldr	w3, [sp, #20]
   16c18:	mov	x2, x1
   16c1c:	mov	x1, x0
   16c20:	ldr	x0, [sp, #40]
   16c24:	bl	4b30 <mpfr_sub@plt>
   16c28:	str	w0, [sp, #204]
   16c2c:	add	x1, sp, #0x48
   16c30:	add	x0, sp, #0x48
   16c34:	bl	4e20 <__gmpz_neg@plt>
   16c38:	add	x0, sp, #0x48
   16c3c:	bl	4fc0 <__gmpz_get_ui@plt>
   16c40:	ldr	w3, [sp, #20]
   16c44:	mov	x2, x0
   16c48:	ldr	x1, [sp, #40]
   16c4c:	ldr	x0, [sp, #40]
   16c50:	bl	5420 <mpfr_div_2ui@plt>
   16c54:	str	w0, [sp, #172]
   16c58:	ldr	w0, [sp, #172]
   16c5c:	cmp	w0, #0x0
   16c60:	b.eq	16c6c <mpc_sinh@@Base+0x63c>  // b.none
   16c64:	ldr	w0, [sp, #172]
   16c68:	str	w0, [sp, #204]
   16c6c:	add	x0, sp, #0x48
   16c70:	bl	5280 <__gmpz_clear@plt>
   16c74:	add	x0, sp, #0x38
   16c78:	bl	5280 <__gmpz_clear@plt>
   16c7c:	ldr	x1, [sp, #192]
   16c80:	ldr	x0, [sp, #32]
   16c84:	bl	4ce0 <mpfr_set_exp@plt>
   16c88:	ldr	x1, [sp, #184]
   16c8c:	ldr	x0, [sp, #24]
   16c90:	bl	4ce0 <mpfr_set_exp@plt>
   16c94:	add	x0, sp, #0x78
   16c98:	bl	4e30 <mpfr_clear@plt>
   16c9c:	add	x0, sp, #0x58
   16ca0:	bl	4e30 <mpfr_clear@plt>
   16ca4:	ldr	w0, [sp, #204]
   16ca8:	ldp	x29, x30, [sp], #208
   16cac:	ret

0000000000016cb0 <mpc_sqr@@Base>:
   16cb0:	stp	x29, x30, [sp, #-240]!
   16cb4:	mov	x29, sp
   16cb8:	str	x19, [sp, #16]
   16cbc:	str	x0, [sp, #56]
   16cc0:	str	x1, [sp, #48]
   16cc4:	str	w2, [sp, #44]
   16cc8:	ldr	x0, [sp, #48]
   16ccc:	bl	55c0 <mpfr_number_p@plt>
   16cd0:	cmp	w0, #0x0
   16cd4:	b.eq	16cec <mpc_sqr@@Base+0x3c>  // b.none
   16cd8:	ldr	x0, [sp, #48]
   16cdc:	add	x0, x0, #0x20
   16ce0:	bl	55c0 <mpfr_number_p@plt>
   16ce4:	cmp	w0, #0x0
   16ce8:	b.ne	16e4c <mpc_sqr@@Base+0x19c>  // b.any
   16cec:	ldr	x0, [sp, #48]
   16cf0:	ldr	x1, [x0, #16]
   16cf4:	mov	x0, #0x2                   	// #2
   16cf8:	movk	x0, #0x8000, lsl #48
   16cfc:	cmp	x1, x0
   16d00:	b.eq	16d1c <mpc_sqr@@Base+0x6c>  // b.none
   16d04:	ldr	x0, [sp, #48]
   16d08:	ldr	x1, [x0, #48]
   16d0c:	mov	x0, #0x2                   	// #2
   16d10:	movk	x0, #0x8000, lsl #48
   16d14:	cmp	x1, x0
   16d18:	b.ne	16d34 <mpc_sqr@@Base+0x84>  // b.any
   16d1c:	ldr	x0, [sp, #56]
   16d20:	bl	4b10 <mpfr_set_nan@plt>
   16d24:	ldr	x0, [sp, #56]
   16d28:	add	x0, x0, #0x20
   16d2c:	bl	4b10 <mpfr_set_nan@plt>
   16d30:	b	16e44 <mpc_sqr@@Base+0x194>
   16d34:	ldr	x0, [sp, #48]
   16d38:	ldr	x1, [x0, #16]
   16d3c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   16d40:	cmp	x1, x0
   16d44:	b.ne	16dec <mpc_sqr@@Base+0x13c>  // b.any
   16d48:	ldr	x0, [sp, #48]
   16d4c:	ldr	x1, [x0, #48]
   16d50:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   16d54:	cmp	x1, x0
   16d58:	b.ne	16d90 <mpc_sqr@@Base+0xe0>  // b.any
   16d5c:	ldr	x0, [sp, #56]
   16d60:	add	x2, x0, #0x20
   16d64:	ldr	x0, [sp, #48]
   16d68:	ldr	w1, [x0, #8]
   16d6c:	ldr	x0, [sp, #48]
   16d70:	ldr	w0, [x0, #40]
   16d74:	mul	w0, w1, w0
   16d78:	mov	w1, w0
   16d7c:	mov	x0, x2
   16d80:	bl	5220 <mpfr_set_inf@plt>
   16d84:	ldr	x0, [sp, #56]
   16d88:	bl	4b10 <mpfr_set_nan@plt>
   16d8c:	b	16e44 <mpc_sqr@@Base+0x194>
   16d90:	ldr	x0, [sp, #48]
   16d94:	ldr	x1, [x0, #48]
   16d98:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   16d9c:	cmp	x1, x0
   16da0:	b.ne	16db4 <mpc_sqr@@Base+0x104>  // b.any
   16da4:	ldr	x0, [sp, #56]
   16da8:	add	x0, x0, #0x20
   16dac:	bl	4b10 <mpfr_set_nan@plt>
   16db0:	b	16ddc <mpc_sqr@@Base+0x12c>
   16db4:	ldr	x0, [sp, #56]
   16db8:	add	x2, x0, #0x20
   16dbc:	ldr	x0, [sp, #48]
   16dc0:	ldr	w1, [x0, #8]
   16dc4:	ldr	x0, [sp, #48]
   16dc8:	ldr	w0, [x0, #40]
   16dcc:	mul	w0, w1, w0
   16dd0:	mov	w1, w0
   16dd4:	mov	x0, x2
   16dd8:	bl	5220 <mpfr_set_inf@plt>
   16ddc:	ldr	x0, [sp, #56]
   16de0:	mov	w1, #0x1                   	// #1
   16de4:	bl	5220 <mpfr_set_inf@plt>
   16de8:	b	16e44 <mpc_sqr@@Base+0x194>
   16dec:	ldr	x0, [sp, #48]
   16df0:	ldr	x1, [x0, #16]
   16df4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   16df8:	cmp	x1, x0
   16dfc:	b.ne	16e10 <mpc_sqr@@Base+0x160>  // b.any
   16e00:	ldr	x0, [sp, #56]
   16e04:	add	x0, x0, #0x20
   16e08:	bl	4b10 <mpfr_set_nan@plt>
   16e0c:	b	16e38 <mpc_sqr@@Base+0x188>
   16e10:	ldr	x0, [sp, #56]
   16e14:	add	x2, x0, #0x20
   16e18:	ldr	x0, [sp, #48]
   16e1c:	ldr	w1, [x0, #8]
   16e20:	ldr	x0, [sp, #48]
   16e24:	ldr	w0, [x0, #40]
   16e28:	mul	w0, w1, w0
   16e2c:	mov	w1, w0
   16e30:	mov	x0, x2
   16e34:	bl	5220 <mpfr_set_inf@plt>
   16e38:	ldr	x0, [sp, #56]
   16e3c:	mov	w1, #0xffffffff            	// #-1
   16e40:	bl	5220 <mpfr_set_inf@plt>
   16e44:	mov	w0, #0x0                   	// #0
   16e48:	b	17508 <mpc_sqr@@Base+0x858>
   16e4c:	ldr	x0, [sp, #56]
   16e50:	ldr	x1, [x0, #32]
   16e54:	ldr	x0, [sp, #56]
   16e58:	ldr	x0, [x0]
   16e5c:	cmp	x1, x0
   16e60:	csel	x0, x1, x0, ge  // ge = tcont
   16e64:	str	x0, [sp, #224]
   16e68:	ldr	x0, [sp, #48]
   16e6c:	ldr	x1, [x0, #48]
   16e70:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   16e74:	cmp	x1, x0
   16e78:	b.ne	16f70 <mpc_sqr@@Base+0x2c0>  // b.any
   16e7c:	ldr	x0, [sp, #48]
   16e80:	ldr	w0, [x0, #8]
   16e84:	mvn	w0, w0
   16e88:	lsr	w0, w0, #31
   16e8c:	and	w1, w0, #0xff
   16e90:	ldr	x0, [sp, #48]
   16e94:	ldr	w0, [x0, #40]
   16e98:	lsr	w0, w0, #31
   16e9c:	and	w0, w0, #0xff
   16ea0:	eor	w0, w1, w0
   16ea4:	and	w0, w0, #0xff
   16ea8:	str	w0, [sp, #172]
   16eac:	ldr	x3, [sp, #56]
   16eb0:	ldr	x1, [sp, #48]
   16eb4:	ldr	w0, [sp, #44]
   16eb8:	and	w0, w0, #0xf
   16ebc:	mov	w2, w0
   16ec0:	mov	x0, x3
   16ec4:	bl	5110 <mpfr_sqr@plt>
   16ec8:	str	w0, [sp, #220]
   16ecc:	ldr	x0, [sp, #56]
   16ed0:	add	x0, x0, #0x20
   16ed4:	str	x0, [sp, #160]
   16ed8:	ldr	x0, [sp, #160]
   16edc:	mov	w1, #0x1                   	// #1
   16ee0:	str	w1, [x0, #8]
   16ee4:	ldr	x0, [sp, #160]
   16ee8:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   16eec:	str	x1, [x0, #16]
   16ef0:	mov	w0, #0x0                   	// #0
   16ef4:	str	w0, [sp, #216]
   16ef8:	ldr	w0, [sp, #172]
   16efc:	cmp	w0, #0x0
   16f00:	b.ne	16f14 <mpc_sqr@@Base+0x264>  // b.any
   16f04:	mov	w2, #0x0                   	// #0
   16f08:	ldr	x1, [sp, #56]
   16f0c:	ldr	x0, [sp, #56]
   16f10:	bl	5060 <mpc_conj@plt>
   16f14:	ldr	w0, [sp, #220]
   16f18:	cmp	w0, #0x0
   16f1c:	b.lt	16f38 <mpc_sqr@@Base+0x288>  // b.tstop
   16f20:	ldr	w0, [sp, #220]
   16f24:	cmp	w0, #0x0
   16f28:	cset	w0, ne  // ne = any
   16f2c:	and	w0, w0, #0xff
   16f30:	mov	w1, w0
   16f34:	b	16f3c <mpc_sqr@@Base+0x28c>
   16f38:	mov	w1, #0x2                   	// #2
   16f3c:	ldr	w0, [sp, #216]
   16f40:	cmp	w0, #0x0
   16f44:	b.lt	16f64 <mpc_sqr@@Base+0x2b4>  // b.tstop
   16f48:	ldr	w0, [sp, #216]
   16f4c:	cmp	w0, #0x0
   16f50:	b.eq	16f5c <mpc_sqr@@Base+0x2ac>  // b.none
   16f54:	mov	w0, #0x4                   	// #4
   16f58:	b	16f68 <mpc_sqr@@Base+0x2b8>
   16f5c:	mov	w0, #0x0                   	// #0
   16f60:	b	16f68 <mpc_sqr@@Base+0x2b8>
   16f64:	mov	w0, #0x8                   	// #8
   16f68:	orr	w0, w1, w0
   16f6c:	b	17508 <mpc_sqr@@Base+0x858>
   16f70:	ldr	x0, [sp, #48]
   16f74:	ldr	x1, [x0, #16]
   16f78:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   16f7c:	cmp	x1, x0
   16f80:	b.ne	170c0 <mpc_sqr@@Base+0x410>  // b.any
   16f84:	ldr	x0, [sp, #48]
   16f88:	ldr	w0, [x0, #8]
   16f8c:	mvn	w0, w0
   16f90:	lsr	w0, w0, #31
   16f94:	and	w1, w0, #0xff
   16f98:	ldr	x0, [sp, #48]
   16f9c:	ldr	w0, [x0, #40]
   16fa0:	lsr	w0, w0, #31
   16fa4:	and	w0, w0, #0xff
   16fa8:	eor	w0, w1, w0
   16fac:	and	w0, w0, #0xff
   16fb0:	str	w0, [sp, #184]
   16fb4:	ldr	x3, [sp, #56]
   16fb8:	ldr	x0, [sp, #48]
   16fbc:	add	x1, x0, #0x20
   16fc0:	ldr	w0, [sp, #44]
   16fc4:	and	w0, w0, #0xf
   16fc8:	cmp	w0, #0x2
   16fcc:	b.eq	16ff4 <mpc_sqr@@Base+0x344>  // b.none
   16fd0:	ldr	w0, [sp, #44]
   16fd4:	and	w0, w0, #0xf
   16fd8:	cmp	w0, #0x3
   16fdc:	b.eq	16fec <mpc_sqr@@Base+0x33c>  // b.none
   16fe0:	ldr	w0, [sp, #44]
   16fe4:	and	w0, w0, #0xf
   16fe8:	b	16ff8 <mpc_sqr@@Base+0x348>
   16fec:	mov	w0, #0x2                   	// #2
   16ff0:	b	16ff8 <mpc_sqr@@Base+0x348>
   16ff4:	mov	w0, #0x3                   	// #3
   16ff8:	mov	w2, w0
   16ffc:	mov	x0, x3
   17000:	bl	5110 <mpfr_sqr@plt>
   17004:	neg	w0, w0
   17008:	str	w0, [sp, #220]
   1700c:	ldr	x0, [sp, #56]
   17010:	ldr	x1, [sp, #56]
   17014:	mov	w2, #0x0                   	// #0
   17018:	bl	4c50 <mpfr_neg@plt>
   1701c:	ldr	x0, [sp, #56]
   17020:	add	x0, x0, #0x20
   17024:	str	x0, [sp, #176]
   17028:	ldr	x0, [sp, #176]
   1702c:	mov	w1, #0x1                   	// #1
   17030:	str	w1, [x0, #8]
   17034:	ldr	x0, [sp, #176]
   17038:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   1703c:	str	x1, [x0, #16]
   17040:	mov	w0, #0x0                   	// #0
   17044:	str	w0, [sp, #216]
   17048:	ldr	w0, [sp, #184]
   1704c:	cmp	w0, #0x0
   17050:	b.ne	17064 <mpc_sqr@@Base+0x3b4>  // b.any
   17054:	mov	w2, #0x0                   	// #0
   17058:	ldr	x1, [sp, #56]
   1705c:	ldr	x0, [sp, #56]
   17060:	bl	5060 <mpc_conj@plt>
   17064:	ldr	w0, [sp, #220]
   17068:	cmp	w0, #0x0
   1706c:	b.lt	17088 <mpc_sqr@@Base+0x3d8>  // b.tstop
   17070:	ldr	w0, [sp, #220]
   17074:	cmp	w0, #0x0
   17078:	cset	w0, ne  // ne = any
   1707c:	and	w0, w0, #0xff
   17080:	mov	w1, w0
   17084:	b	1708c <mpc_sqr@@Base+0x3dc>
   17088:	mov	w1, #0x2                   	// #2
   1708c:	ldr	w0, [sp, #216]
   17090:	cmp	w0, #0x0
   17094:	b.lt	170b4 <mpc_sqr@@Base+0x404>  // b.tstop
   17098:	ldr	w0, [sp, #216]
   1709c:	cmp	w0, #0x0
   170a0:	b.eq	170ac <mpc_sqr@@Base+0x3fc>  // b.none
   170a4:	mov	w0, #0x4                   	// #4
   170a8:	b	170b8 <mpc_sqr@@Base+0x408>
   170ac:	mov	w0, #0x0                   	// #0
   170b0:	b	170b8 <mpc_sqr@@Base+0x408>
   170b4:	mov	w0, #0x8                   	// #8
   170b8:	orr	w0, w1, w0
   170bc:	b	17508 <mpc_sqr@@Base+0x858>
   170c0:	ldr	x1, [sp, #56]
   170c4:	ldr	x0, [sp, #48]
   170c8:	cmp	x1, x0
   170cc:	b.ne	17100 <mpc_sqr@@Base+0x450>  // b.any
   170d0:	ldr	x0, [sp, #48]
   170d4:	ldr	x1, [x0]
   170d8:	add	x0, sp, #0x40
   170dc:	bl	5530 <mpfr_init2@plt>
   170e0:	ldr	x1, [sp, #48]
   170e4:	ldr	x0, [sp, #48]
   170e8:	ldr	w2, [x0, #8]
   170ec:	add	x0, sp, #0x40
   170f0:	mov	w3, w2
   170f4:	mov	w2, #0x0                   	// #0
   170f8:	bl	52d0 <mpfr_set4@plt>
   170fc:	b	1711c <mpc_sqr@@Base+0x46c>
   17100:	ldr	x0, [sp, #48]
   17104:	add	x2, sp, #0x40
   17108:	mov	x3, x0
   1710c:	ldp	x0, x1, [x3]
   17110:	stp	x0, x1, [x2]
   17114:	ldp	x0, x1, [x3, #16]
   17118:	stp	x0, x1, [x2, #16]
   1711c:	ldr	x0, [sp, #48]
   17120:	ldr	x1, [x0, #16]
   17124:	ldr	x0, [sp, #48]
   17128:	ldr	x0, [x0, #48]
   1712c:	sub	x0, x1, x0
   17130:	cmp	x0, #0x0
   17134:	cneg	x2, x0, lt  // lt = tstop
   17138:	ldr	x0, [sp, #48]
   1713c:	ldr	x1, [x0, #32]
   17140:	ldr	x0, [sp, #48]
   17144:	ldr	x0, [x0]
   17148:	cmp	x1, x0
   1714c:	csel	x0, x1, x0, ge  // ge = tcont
   17150:	lsr	x1, x0, #63
   17154:	add	x0, x1, x0
   17158:	asr	x0, x0, #1
   1715c:	cmp	x2, x0
   17160:	b.le	17198 <mpc_sqr@@Base+0x4e8>
   17164:	ldr	x4, [sp, #56]
   17168:	ldr	x0, [sp, #48]
   1716c:	add	x1, x0, #0x20
   17170:	ldr	w0, [sp, #44]
   17174:	and	w2, w0, #0xf
   17178:	add	x0, sp, #0x40
   1717c:	mov	w3, w2
   17180:	mov	x2, x1
   17184:	mov	x1, x0
   17188:	mov	x0, x4
   1718c:	bl	167b8 <mpc_sinh@@Base+0x188>
   17190:	str	w0, [sp, #220]
   17194:	b	17404 <mpc_sqr@@Base+0x754>
   17198:	add	x0, sp, #0x80
   1719c:	bl	4b70 <mpfr_init@plt>
   171a0:	add	x0, sp, #0x60
   171a4:	bl	4b70 <mpfr_init@plt>
   171a8:	bl	5160 <mpfr_get_emin@plt>
   171ac:	str	x0, [sp, #208]
   171b0:	ldr	x0, [sp, #224]
   171b4:	bl	4de0 <mpc_ceil_log2@plt>
   171b8:	add	x0, x0, #0x5
   171bc:	ldr	x1, [sp, #224]
   171c0:	add	x0, x1, x0
   171c4:	str	x0, [sp, #224]
   171c8:	add	x0, sp, #0x80
   171cc:	ldr	x1, [sp, #224]
   171d0:	bl	4d40 <mpfr_set_prec@plt>
   171d4:	add	x0, sp, #0x60
   171d8:	ldr	x1, [sp, #224]
   171dc:	bl	4d40 <mpfr_set_prec@plt>
   171e0:	ldr	x0, [sp, #48]
   171e4:	add	x2, x0, #0x20
   171e8:	add	x1, sp, #0x40
   171ec:	add	x0, sp, #0x80
   171f0:	mov	w3, #0x4                   	// #4
   171f4:	bl	4f50 <mpfr_add@plt>
   171f8:	mov	w19, w0
   171fc:	ldr	x0, [sp, #48]
   17200:	add	x2, x0, #0x20
   17204:	add	x1, sp, #0x40
   17208:	add	x0, sp, #0x60
   1720c:	mov	w3, #0x4                   	// #4
   17210:	bl	4b30 <mpfr_sub@plt>
   17214:	orr	w0, w19, w0
   17218:	str	w0, [sp, #204]
   1721c:	ldr	x1, [sp, #144]
   17220:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   17224:	cmp	x1, x0
   17228:	b.ge	17248 <mpc_sqr@@Base+0x598>  // b.tcont
   1722c:	ldr	x1, [sp, #144]
   17230:	mov	x0, #0x2                   	// #2
   17234:	movk	x0, #0x8000, lsl #48
   17238:	cmp	x1, x0
   1723c:	b.ne	1728c <mpc_sqr@@Base+0x5dc>  // b.any
   17240:	bl	4bd0 <mpfr_set_erangeflag@plt>
   17244:	b	1728c <mpc_sqr@@Base+0x5dc>
   17248:	ldr	w0, [sp, #136]
   1724c:	cmp	w0, #0x0
   17250:	b.eq	1728c <mpc_sqr@@Base+0x5dc>  // b.none
   17254:	ldr	x1, [sp, #112]
   17258:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1725c:	cmp	x1, x0
   17260:	b.ge	17280 <mpc_sqr@@Base+0x5d0>  // b.tcont
   17264:	ldr	x1, [sp, #112]
   17268:	mov	x0, #0x2                   	// #2
   1726c:	movk	x0, #0x8000, lsl #48
   17270:	cmp	x1, x0
   17274:	b.ne	1728c <mpc_sqr@@Base+0x5dc>  // b.any
   17278:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1727c:	b	1728c <mpc_sqr@@Base+0x5dc>
   17280:	ldr	w0, [sp, #104]
   17284:	cmp	w0, #0x0
   17288:	b.ne	172bc <mpc_sqr@@Base+0x60c>  // b.any
   1728c:	ldr	x0, [sp, #56]
   17290:	str	x0, [sp, #192]
   17294:	ldr	x0, [sp, #192]
   17298:	mov	w1, #0x1                   	// #1
   1729c:	str	w1, [x0, #8]
   172a0:	ldr	x0, [sp, #192]
   172a4:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   172a8:	str	x1, [x0, #16]
   172ac:	str	wzr, [sp, #220]
   172b0:	mov	w0, #0x1                   	// #1
   172b4:	str	w0, [sp, #236]
   172b8:	b	173e8 <mpc_sqr@@Base+0x738>
   172bc:	add	x2, sp, #0x60
   172c0:	add	x1, sp, #0x80
   172c4:	add	x0, sp, #0x80
   172c8:	mov	w3, #0x4                   	// #4
   172cc:	bl	4c40 <mpfr_mul@plt>
   172d0:	mov	w1, w0
   172d4:	ldr	w0, [sp, #204]
   172d8:	orr	w0, w0, w1
   172dc:	str	w0, [sp, #204]
   172e0:	ldr	x0, [sp, #144]
   172e4:	ldr	x1, [sp, #208]
   172e8:	cmp	x1, x0
   172ec:	b.eq	17300 <mpc_sqr@@Base+0x650>  // b.none
   172f0:	ldr	x1, [sp, #144]
   172f4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   172f8:	cmp	x1, x0
   172fc:	b.ne	1733c <mpc_sqr@@Base+0x68c>  // b.any
   17300:	ldr	x4, [sp, #56]
   17304:	ldr	x0, [sp, #48]
   17308:	add	x1, x0, #0x20
   1730c:	ldr	w0, [sp, #44]
   17310:	and	w2, w0, #0xf
   17314:	add	x0, sp, #0x40
   17318:	mov	w3, w2
   1731c:	mov	x2, x1
   17320:	mov	x1, x0
   17324:	mov	x0, x4
   17328:	bl	167b8 <mpc_sinh@@Base+0x188>
   1732c:	str	w0, [sp, #220]
   17330:	mov	w0, #0x1                   	// #1
   17334:	str	w0, [sp, #236]
   17338:	b	173e8 <mpc_sqr@@Base+0x738>
   1733c:	ldr	w0, [sp, #204]
   17340:	cmp	w0, #0x0
   17344:	cset	w0, eq  // eq = none
   17348:	and	w0, w0, #0xff
   1734c:	mov	w19, w0
   17350:	ldr	x0, [sp, #224]
   17354:	sub	x5, x0, #0x3
   17358:	ldr	x0, [sp, #56]
   1735c:	ldr	x1, [x0]
   17360:	ldr	w0, [sp, #44]
   17364:	and	w0, w0, #0xf
   17368:	cmp	w0, #0x0
   1736c:	cset	w0, eq  // eq = none
   17370:	and	w0, w0, #0xff
   17374:	and	x0, x0, #0xff
   17378:	add	x1, x1, x0
   1737c:	add	x0, sp, #0x80
   17380:	mov	x4, x1
   17384:	mov	w3, #0x1                   	// #1
   17388:	mov	w2, #0x4                   	// #4
   1738c:	mov	x1, x5
   17390:	bl	5540 <mpfr_can_round@plt>
   17394:	orr	w0, w19, w0
   17398:	str	w0, [sp, #236]
   1739c:	ldr	w0, [sp, #236]
   173a0:	cmp	w0, #0x0
   173a4:	b.eq	173e8 <mpc_sqr@@Base+0x738>  // b.none
   173a8:	ldr	x4, [sp, #56]
   173ac:	ldr	w0, [sp, #44]
   173b0:	and	w1, w0, #0xf
   173b4:	ldr	w2, [sp, #136]
   173b8:	add	x0, sp, #0x80
   173bc:	mov	w3, w2
   173c0:	mov	w2, w1
   173c4:	mov	x1, x0
   173c8:	mov	x0, x4
   173cc:	bl	52d0 <mpfr_set4@plt>
   173d0:	str	w0, [sp, #220]
   173d4:	ldr	w0, [sp, #220]
   173d8:	cmp	w0, #0x0
   173dc:	b.ne	173e8 <mpc_sqr@@Base+0x738>  // b.any
   173e0:	ldr	w0, [sp, #204]
   173e4:	str	w0, [sp, #220]
   173e8:	ldr	w0, [sp, #236]
   173ec:	cmp	w0, #0x0
   173f0:	b.eq	171b0 <mpc_sqr@@Base+0x500>  // b.none
   173f4:	add	x0, sp, #0x80
   173f8:	bl	4e30 <mpfr_clear@plt>
   173fc:	add	x0, sp, #0x60
   17400:	bl	4e30 <mpfr_clear@plt>
   17404:	bl	53f0 <mpfr_underflow_p@plt>
   17408:	str	w0, [sp, #188]
   1740c:	bl	4f00 <mpfr_clear_underflow@plt>
   17410:	ldr	x0, [sp, #56]
   17414:	add	x4, x0, #0x20
   17418:	ldr	x0, [sp, #48]
   1741c:	add	x1, x0, #0x20
   17420:	ldr	w0, [sp, #44]
   17424:	asr	w2, w0, #4
   17428:	add	x0, sp, #0x40
   1742c:	mov	w3, w2
   17430:	mov	x2, x1
   17434:	mov	x1, x0
   17438:	mov	x0, x4
   1743c:	bl	4c40 <mpfr_mul@plt>
   17440:	str	w0, [sp, #216]
   17444:	bl	53f0 <mpfr_underflow_p@plt>
   17448:	cmp	w0, #0x0
   1744c:	b.ne	17488 <mpc_sqr@@Base+0x7d8>  // b.any
   17450:	ldr	x0, [sp, #56]
   17454:	add	x4, x0, #0x20
   17458:	ldr	x0, [sp, #56]
   1745c:	add	x1, x0, #0x20
   17460:	ldr	w0, [sp, #44]
   17464:	asr	w0, w0, #4
   17468:	mov	w3, w0
   1746c:	mov	x2, #0x1                   	// #1
   17470:	mov	x0, x4
   17474:	bl	5040 <mpfr_mul_2ui@plt>
   17478:	mov	w1, w0
   1747c:	ldr	w0, [sp, #216]
   17480:	orr	w0, w0, w1
   17484:	str	w0, [sp, #216]
   17488:	ldr	w0, [sp, #188]
   1748c:	cmp	w0, #0x0
   17490:	b.eq	17498 <mpc_sqr@@Base+0x7e8>  // b.none
   17494:	bl	4a60 <mpfr_set_underflow@plt>
   17498:	ldr	x1, [sp, #56]
   1749c:	ldr	x0, [sp, #48]
   174a0:	cmp	x1, x0
   174a4:	b.ne	174b0 <mpc_sqr@@Base+0x800>  // b.any
   174a8:	add	x0, sp, #0x40
   174ac:	bl	4e30 <mpfr_clear@plt>
   174b0:	ldr	w0, [sp, #220]
   174b4:	cmp	w0, #0x0
   174b8:	b.lt	174d4 <mpc_sqr@@Base+0x824>  // b.tstop
   174bc:	ldr	w0, [sp, #220]
   174c0:	cmp	w0, #0x0
   174c4:	cset	w0, ne  // ne = any
   174c8:	and	w0, w0, #0xff
   174cc:	mov	w1, w0
   174d0:	b	174d8 <mpc_sqr@@Base+0x828>
   174d4:	mov	w1, #0x2                   	// #2
   174d8:	ldr	w0, [sp, #216]
   174dc:	cmp	w0, #0x0
   174e0:	b.lt	17500 <mpc_sqr@@Base+0x850>  // b.tstop
   174e4:	ldr	w0, [sp, #216]
   174e8:	cmp	w0, #0x0
   174ec:	b.eq	174f8 <mpc_sqr@@Base+0x848>  // b.none
   174f0:	mov	w0, #0x4                   	// #4
   174f4:	b	17504 <mpc_sqr@@Base+0x854>
   174f8:	mov	w0, #0x0                   	// #0
   174fc:	b	17504 <mpc_sqr@@Base+0x854>
   17500:	mov	w0, #0x8                   	// #8
   17504:	orr	w0, w1, w0
   17508:	ldr	x19, [sp, #16]
   1750c:	ldp	x29, x30, [sp], #240
   17510:	ret

0000000000017514 <mpc_sqrt@@Base>:
   17514:	stp	x29, x30, [sp, #-272]!
   17518:	mov	x29, sp
   1751c:	str	x0, [sp, #40]
   17520:	str	x1, [sp, #32]
   17524:	str	w2, [sp, #28]
   17528:	str	wzr, [sp, #264]
   1752c:	mov	w0, #0x1                   	// #1
   17530:	str	w0, [sp, #224]
   17534:	str	wzr, [sp, #212]
   17538:	ldr	x0, [sp, #32]
   1753c:	bl	52f0 <mpfr_sgn@plt>
   17540:	str	w0, [sp, #204]
   17544:	ldr	x0, [sp, #32]
   17548:	add	x0, x0, #0x20
   1754c:	bl	52f0 <mpfr_sgn@plt>
   17550:	str	w0, [sp, #200]
   17554:	str	wzr, [sp, #208]
   17558:	ldr	x0, [sp, #32]
   1755c:	ldr	w0, [x0, #40]
   17560:	cmp	w0, #0x0
   17564:	b.lt	17570 <mpc_sqrt@@Base+0x5c>  // b.tstop
   17568:	mov	w0, #0x0                   	// #0
   1756c:	b	17574 <mpc_sqrt@@Base+0x60>
   17570:	mov	w0, #0xffffffff            	// #-1
   17574:	str	w0, [sp, #196]
   17578:	ldr	w0, [sp, #196]
   1757c:	cmp	w0, #0x0
   17580:	b.eq	1758c <mpc_sqrt@@Base+0x78>  // b.none
   17584:	mov	w0, #0x3                   	// #3
   17588:	b	17590 <mpc_sqrt@@Base+0x7c>
   1758c:	mov	w0, #0x2                   	// #2
   17590:	str	w0, [sp, #192]
   17594:	ldr	x0, [sp, #32]
   17598:	bl	55c0 <mpfr_number_p@plt>
   1759c:	cmp	w0, #0x0
   175a0:	b.eq	175b8 <mpc_sqrt@@Base+0xa4>  // b.none
   175a4:	ldr	x0, [sp, #32]
   175a8:	add	x0, x0, #0x20
   175ac:	bl	55c0 <mpfr_number_p@plt>
   175b0:	cmp	w0, #0x0
   175b4:	b.ne	17748 <mpc_sqrt@@Base+0x234>  // b.any
   175b8:	ldr	x0, [sp, #32]
   175bc:	ldr	x1, [x0, #48]
   175c0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   175c4:	cmp	x1, x0
   175c8:	b.ne	175f0 <mpc_sqrt@@Base+0xdc>  // b.any
   175cc:	ldr	x0, [sp, #40]
   175d0:	mov	w1, #0x1                   	// #1
   175d4:	bl	5220 <mpfr_set_inf@plt>
   175d8:	ldr	x0, [sp, #40]
   175dc:	add	x0, x0, #0x20
   175e0:	ldr	w1, [sp, #196]
   175e4:	bl	5220 <mpfr_set_inf@plt>
   175e8:	mov	w0, #0x0                   	// #0
   175ec:	b	185a8 <mpc_sqrt@@Base+0x1094>
   175f0:	ldr	x0, [sp, #32]
   175f4:	ldr	x1, [x0, #16]
   175f8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   175fc:	cmp	x1, x0
   17600:	b.ne	176fc <mpc_sqrt@@Base+0x1e8>  // b.any
   17604:	ldr	x0, [sp, #32]
   17608:	ldr	w0, [x0, #8]
   1760c:	cmp	w0, #0x0
   17610:	b.ge	17680 <mpc_sqrt@@Base+0x16c>  // b.tcont
   17614:	ldr	x0, [sp, #32]
   17618:	add	x0, x0, #0x20
   1761c:	bl	55c0 <mpfr_number_p@plt>
   17620:	cmp	w0, #0x0
   17624:	b.eq	17660 <mpc_sqrt@@Base+0x14c>  // b.none
   17628:	ldr	x0, [sp, #40]
   1762c:	str	x0, [sp, #176]
   17630:	ldr	x0, [sp, #176]
   17634:	mov	w1, #0x1                   	// #1
   17638:	str	w1, [x0, #8]
   1763c:	ldr	x0, [sp, #176]
   17640:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   17644:	str	x1, [x0, #16]
   17648:	ldr	x0, [sp, #40]
   1764c:	add	x0, x0, #0x20
   17650:	ldr	w1, [sp, #196]
   17654:	bl	5220 <mpfr_set_inf@plt>
   17658:	mov	w0, #0x0                   	// #0
   1765c:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17660:	ldr	x0, [sp, #40]
   17664:	bl	4b10 <mpfr_set_nan@plt>
   17668:	ldr	x0, [sp, #40]
   1766c:	add	x0, x0, #0x20
   17670:	ldr	w1, [sp, #196]
   17674:	bl	5220 <mpfr_set_inf@plt>
   17678:	mov	w0, #0x0                   	// #0
   1767c:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17680:	ldr	x0, [sp, #32]
   17684:	add	x0, x0, #0x20
   17688:	bl	55c0 <mpfr_number_p@plt>
   1768c:	cmp	w0, #0x0
   17690:	b.eq	176e8 <mpc_sqrt@@Base+0x1d4>  // b.none
   17694:	ldr	x0, [sp, #40]
   17698:	mov	w1, #0x1                   	// #1
   1769c:	bl	5220 <mpfr_set_inf@plt>
   176a0:	ldr	x0, [sp, #40]
   176a4:	add	x0, x0, #0x20
   176a8:	str	x0, [sp, #184]
   176ac:	ldr	x0, [sp, #184]
   176b0:	mov	w1, #0x1                   	// #1
   176b4:	str	w1, [x0, #8]
   176b8:	ldr	x0, [sp, #184]
   176bc:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   176c0:	str	x1, [x0, #16]
   176c4:	ldr	w0, [sp, #196]
   176c8:	cmp	w0, #0x0
   176cc:	b.eq	176e0 <mpc_sqrt@@Base+0x1cc>  // b.none
   176d0:	mov	w2, #0x0                   	// #0
   176d4:	ldr	x1, [sp, #40]
   176d8:	ldr	x0, [sp, #40]
   176dc:	bl	5060 <mpc_conj@plt>
   176e0:	mov	w0, #0x0                   	// #0
   176e4:	b	185a8 <mpc_sqrt@@Base+0x1094>
   176e8:	ldr	w2, [sp, #28]
   176ec:	ldr	x1, [sp, #32]
   176f0:	ldr	x0, [sp, #40]
   176f4:	bl	5680 <mpc_set@plt>
   176f8:	b	185a8 <mpc_sqrt@@Base+0x1094>
   176fc:	ldr	x0, [sp, #32]
   17700:	ldr	x1, [x0, #16]
   17704:	mov	x0, #0x2                   	// #2
   17708:	movk	x0, #0x8000, lsl #48
   1770c:	cmp	x1, x0
   17710:	b.eq	1772c <mpc_sqrt@@Base+0x218>  // b.none
   17714:	ldr	x0, [sp, #32]
   17718:	ldr	x1, [x0, #48]
   1771c:	mov	x0, #0x2                   	// #2
   17720:	movk	x0, #0x8000, lsl #48
   17724:	cmp	x1, x0
   17728:	b.ne	17748 <mpc_sqrt@@Base+0x234>  // b.any
   1772c:	ldr	x0, [sp, #40]
   17730:	bl	4b10 <mpfr_set_nan@plt>
   17734:	ldr	x0, [sp, #40]
   17738:	add	x0, x0, #0x20
   1773c:	bl	4b10 <mpfr_set_nan@plt>
   17740:	mov	w0, #0x0                   	// #0
   17744:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17748:	ldr	w0, [sp, #200]
   1774c:	cmp	w0, #0x0
   17750:	b.ne	17954 <mpc_sqrt@@Base+0x440>  // b.any
   17754:	ldr	w0, [sp, #204]
   17758:	cmp	w0, #0x0
   1775c:	b.ne	17798 <mpc_sqrt@@Base+0x284>  // b.any
   17760:	mov	w3, #0x0                   	// #0
   17764:	mov	x2, #0x0                   	// #0
   17768:	mov	x1, #0x0                   	// #0
   1776c:	ldr	x0, [sp, #40]
   17770:	bl	5140 <mpc_set_ui_ui@plt>
   17774:	ldr	w0, [sp, #196]
   17778:	cmp	w0, #0x0
   1777c:	b.eq	17790 <mpc_sqrt@@Base+0x27c>  // b.none
   17780:	mov	w2, #0x0                   	// #0
   17784:	ldr	x1, [sp, #40]
   17788:	ldr	x0, [sp, #40]
   1778c:	bl	5060 <mpc_conj@plt>
   17790:	mov	w0, #0x0                   	// #0
   17794:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17798:	ldr	w0, [sp, #204]
   1779c:	cmp	w0, #0x0
   177a0:	b.le	1782c <mpc_sqrt@@Base+0x318>
   177a4:	ldr	x3, [sp, #40]
   177a8:	ldr	x1, [sp, #32]
   177ac:	ldr	w0, [sp, #28]
   177b0:	and	w0, w0, #0xf
   177b4:	mov	w2, w0
   177b8:	mov	x0, x3
   177bc:	bl	5450 <mpfr_sqrt@plt>
   177c0:	str	w0, [sp, #228]
   177c4:	ldr	x0, [sp, #40]
   177c8:	add	x0, x0, #0x20
   177cc:	str	x0, [sp, #152]
   177d0:	ldr	x0, [sp, #152]
   177d4:	mov	w1, #0x1                   	// #1
   177d8:	str	w1, [x0, #8]
   177dc:	ldr	x0, [sp, #152]
   177e0:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   177e4:	str	x1, [x0, #16]
   177e8:	ldr	w0, [sp, #196]
   177ec:	cmp	w0, #0x0
   177f0:	b.eq	17804 <mpc_sqrt@@Base+0x2f0>  // b.none
   177f4:	mov	w2, #0x0                   	// #0
   177f8:	ldr	x1, [sp, #40]
   177fc:	ldr	x0, [sp, #40]
   17800:	bl	5060 <mpc_conj@plt>
   17804:	ldr	w0, [sp, #228]
   17808:	cmp	w0, #0x0
   1780c:	b.lt	17824 <mpc_sqrt@@Base+0x310>  // b.tstop
   17810:	ldr	w0, [sp, #228]
   17814:	cmp	w0, #0x0
   17818:	cset	w0, ne  // ne = any
   1781c:	and	w0, w0, #0xff
   17820:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17824:	mov	w0, #0x2                   	// #2
   17828:	b	185a8 <mpc_sqrt@@Base+0x1094>
   1782c:	ldr	x0, [sp, #32]
   17830:	ldr	x1, [x0]
   17834:	add	x0, sp, #0x78
   17838:	bl	5530 <mpfr_init2@plt>
   1783c:	ldr	x1, [sp, #32]
   17840:	add	x0, sp, #0x78
   17844:	mov	w2, #0x0                   	// #0
   17848:	bl	4c50 <mpfr_neg@plt>
   1784c:	ldr	w0, [sp, #196]
   17850:	cmp	w0, #0x0
   17854:	b.eq	178d4 <mpc_sqrt@@Base+0x3c0>  // b.none
   17858:	ldr	x0, [sp, #40]
   1785c:	add	x3, x0, #0x20
   17860:	ldr	w0, [sp, #28]
   17864:	asr	w0, w0, #4
   17868:	cmp	w0, #0x2
   1786c:	b.eq	17894 <mpc_sqrt@@Base+0x380>  // b.none
   17870:	ldr	w0, [sp, #28]
   17874:	asr	w0, w0, #4
   17878:	cmp	w0, #0x3
   1787c:	b.eq	1788c <mpc_sqrt@@Base+0x378>  // b.none
   17880:	ldr	w0, [sp, #28]
   17884:	asr	w0, w0, #4
   17888:	b	17898 <mpc_sqrt@@Base+0x384>
   1788c:	mov	w0, #0x2                   	// #2
   17890:	b	17898 <mpc_sqrt@@Base+0x384>
   17894:	mov	w0, #0x3                   	// #3
   17898:	add	x1, sp, #0x78
   1789c:	mov	w2, w0
   178a0:	mov	x0, x3
   178a4:	bl	5450 <mpfr_sqrt@plt>
   178a8:	neg	w0, w0
   178ac:	str	w0, [sp, #228]
   178b0:	ldr	x0, [sp, #40]
   178b4:	add	x3, x0, #0x20
   178b8:	ldr	x0, [sp, #40]
   178bc:	add	x0, x0, #0x20
   178c0:	mov	w2, #0x0                   	// #0
   178c4:	mov	x1, x0
   178c8:	mov	x0, x3
   178cc:	bl	4c50 <mpfr_neg@plt>
   178d0:	b	178fc <mpc_sqrt@@Base+0x3e8>
   178d4:	ldr	x0, [sp, #40]
   178d8:	add	x3, x0, #0x20
   178dc:	ldr	w0, [sp, #28]
   178e0:	asr	w1, w0, #4
   178e4:	add	x0, sp, #0x78
   178e8:	mov	w2, w1
   178ec:	mov	x1, x0
   178f0:	mov	x0, x3
   178f4:	bl	5450 <mpfr_sqrt@plt>
   178f8:	str	w0, [sp, #228]
   178fc:	ldr	x0, [sp, #40]
   17900:	str	x0, [sp, #160]
   17904:	ldr	x0, [sp, #160]
   17908:	mov	w1, #0x1                   	// #1
   1790c:	str	w1, [x0, #8]
   17910:	ldr	x0, [sp, #160]
   17914:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   17918:	str	x1, [x0, #16]
   1791c:	add	x0, sp, #0x78
   17920:	bl	4e30 <mpfr_clear@plt>
   17924:	ldr	w0, [sp, #228]
   17928:	cmp	w0, #0x0
   1792c:	b.lt	1794c <mpc_sqrt@@Base+0x438>  // b.tstop
   17930:	ldr	w0, [sp, #228]
   17934:	cmp	w0, #0x0
   17938:	b.eq	17944 <mpc_sqrt@@Base+0x430>  // b.none
   1793c:	mov	w0, #0x4                   	// #4
   17940:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17944:	mov	w0, #0x0                   	// #0
   17948:	b	185a8 <mpc_sqrt@@Base+0x1094>
   1794c:	mov	w0, #0x8                   	// #8
   17950:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17954:	ldr	w0, [sp, #204]
   17958:	cmp	w0, #0x0
   1795c:	b.ne	17af8 <mpc_sqrt@@Base+0x5e4>  // b.any
   17960:	ldr	x0, [sp, #32]
   17964:	add	x0, x0, #0x20
   17968:	add	x2, sp, #0x38
   1796c:	mov	x3, x0
   17970:	ldp	x0, x1, [x3]
   17974:	stp	x0, x1, [x2]
   17978:	ldp	x0, x1, [x3, #16]
   1797c:	stp	x0, x1, [x2, #16]
   17980:	add	x1, sp, #0x38
   17984:	add	x0, sp, #0x38
   17988:	mov	w3, #0x0                   	// #0
   1798c:	mov	x2, #0x1                   	// #1
   17990:	bl	5420 <mpfr_div_2ui@plt>
   17994:	ldr	w0, [sp, #200]
   17998:	cmp	w0, #0x0
   1799c:	b.le	179f0 <mpc_sqrt@@Base+0x4dc>
   179a0:	ldr	x3, [sp, #40]
   179a4:	ldr	w0, [sp, #28]
   179a8:	and	w1, w0, #0xf
   179ac:	add	x0, sp, #0x38
   179b0:	mov	w2, w1
   179b4:	mov	x1, x0
   179b8:	mov	x0, x3
   179bc:	bl	5450 <mpfr_sqrt@plt>
   179c0:	str	w0, [sp, #228]
   179c4:	ldr	x0, [sp, #40]
   179c8:	add	x3, x0, #0x20
   179cc:	ldr	w0, [sp, #28]
   179d0:	asr	w1, w0, #4
   179d4:	add	x0, sp, #0x38
   179d8:	mov	w2, w1
   179dc:	mov	x1, x0
   179e0:	mov	x0, x3
   179e4:	bl	5450 <mpfr_sqrt@plt>
   179e8:	str	w0, [sp, #224]
   179ec:	b	17a9c <mpc_sqrt@@Base+0x588>
   179f0:	add	x1, sp, #0x38
   179f4:	add	x0, sp, #0x38
   179f8:	mov	w2, #0x0                   	// #0
   179fc:	bl	4c50 <mpfr_neg@plt>
   17a00:	ldr	x3, [sp, #40]
   17a04:	ldr	w0, [sp, #28]
   17a08:	and	w1, w0, #0xf
   17a0c:	add	x0, sp, #0x38
   17a10:	mov	w2, w1
   17a14:	mov	x1, x0
   17a18:	mov	x0, x3
   17a1c:	bl	5450 <mpfr_sqrt@plt>
   17a20:	str	w0, [sp, #228]
   17a24:	ldr	x0, [sp, #40]
   17a28:	add	x3, x0, #0x20
   17a2c:	ldr	w0, [sp, #28]
   17a30:	asr	w0, w0, #4
   17a34:	cmp	w0, #0x2
   17a38:	b.eq	17a60 <mpc_sqrt@@Base+0x54c>  // b.none
   17a3c:	ldr	w0, [sp, #28]
   17a40:	asr	w0, w0, #4
   17a44:	cmp	w0, #0x3
   17a48:	b.eq	17a58 <mpc_sqrt@@Base+0x544>  // b.none
   17a4c:	ldr	w0, [sp, #28]
   17a50:	asr	w0, w0, #4
   17a54:	b	17a64 <mpc_sqrt@@Base+0x550>
   17a58:	mov	w0, #0x2                   	// #2
   17a5c:	b	17a64 <mpc_sqrt@@Base+0x550>
   17a60:	mov	w0, #0x3                   	// #3
   17a64:	add	x1, sp, #0x38
   17a68:	mov	w2, w0
   17a6c:	mov	x0, x3
   17a70:	bl	5450 <mpfr_sqrt@plt>
   17a74:	neg	w0, w0
   17a78:	str	w0, [sp, #224]
   17a7c:	ldr	x0, [sp, #40]
   17a80:	add	x3, x0, #0x20
   17a84:	ldr	x0, [sp, #40]
   17a88:	add	x0, x0, #0x20
   17a8c:	mov	w2, #0x0                   	// #0
   17a90:	mov	x1, x0
   17a94:	mov	x0, x3
   17a98:	bl	4c50 <mpfr_neg@plt>
   17a9c:	ldr	w0, [sp, #228]
   17aa0:	cmp	w0, #0x0
   17aa4:	b.lt	17ac0 <mpc_sqrt@@Base+0x5ac>  // b.tstop
   17aa8:	ldr	w0, [sp, #228]
   17aac:	cmp	w0, #0x0
   17ab0:	cset	w0, ne  // ne = any
   17ab4:	and	w0, w0, #0xff
   17ab8:	mov	w1, w0
   17abc:	b	17ac4 <mpc_sqrt@@Base+0x5b0>
   17ac0:	mov	w1, #0x2                   	// #2
   17ac4:	ldr	w0, [sp, #224]
   17ac8:	cmp	w0, #0x0
   17acc:	b.lt	17aec <mpc_sqrt@@Base+0x5d8>  // b.tstop
   17ad0:	ldr	w0, [sp, #224]
   17ad4:	cmp	w0, #0x0
   17ad8:	b.eq	17ae4 <mpc_sqrt@@Base+0x5d0>  // b.none
   17adc:	mov	w0, #0x4                   	// #4
   17ae0:	b	17af0 <mpc_sqrt@@Base+0x5dc>
   17ae4:	mov	w0, #0x0                   	// #0
   17ae8:	b	17af0 <mpc_sqrt@@Base+0x5dc>
   17aec:	mov	w0, #0x8                   	// #8
   17af0:	orr	w0, w1, w0
   17af4:	b	185a8 <mpc_sqrt@@Base+0x1094>
   17af8:	ldr	x0, [sp, #40]
   17afc:	ldr	x1, [x0, #32]
   17b00:	ldr	x0, [sp, #40]
   17b04:	ldr	x0, [x0]
   17b08:	cmp	x1, x0
   17b0c:	csel	x0, x1, x0, ge  // ge = tcont
   17b10:	str	x0, [sp, #232]
   17b14:	add	x0, sp, #0x78
   17b18:	bl	4b70 <mpfr_init@plt>
   17b1c:	add	x0, sp, #0x58
   17b20:	bl	4b70 <mpfr_init@plt>
   17b24:	ldr	w0, [sp, #204]
   17b28:	cmp	w0, #0x0
   17b2c:	b.le	17b8c <mpc_sqrt@@Base+0x678>
   17b30:	ldr	w0, [sp, #28]
   17b34:	and	w0, w0, #0xf
   17b38:	str	w0, [sp, #260]
   17b3c:	ldr	x0, [sp, #40]
   17b40:	ldr	x0, [x0]
   17b44:	str	x0, [sp, #248]
   17b48:	ldr	w0, [sp, #28]
   17b4c:	asr	w0, w0, #4
   17b50:	str	w0, [sp, #256]
   17b54:	ldr	w0, [sp, #256]
   17b58:	cmp	w0, #0x1
   17b5c:	b.ne	17b7c <mpc_sqrt@@Base+0x668>  // b.any
   17b60:	ldr	w0, [sp, #200]
   17b64:	cmp	w0, #0x0
   17b68:	b.le	17b74 <mpc_sqrt@@Base+0x660>
   17b6c:	mov	w0, #0x3                   	// #3
   17b70:	b	17b78 <mpc_sqrt@@Base+0x664>
   17b74:	mov	w0, #0x2                   	// #2
   17b78:	str	w0, [sp, #256]
   17b7c:	ldr	x0, [sp, #40]
   17b80:	ldr	x0, [x0, #32]
   17b84:	str	x0, [sp, #240]
   17b88:	b	17c6c <mpc_sqrt@@Base+0x758>
   17b8c:	ldr	x0, [sp, #40]
   17b90:	ldr	x0, [x0, #32]
   17b94:	str	x0, [sp, #248]
   17b98:	ldr	x0, [sp, #40]
   17b9c:	ldr	x0, [x0]
   17ba0:	str	x0, [sp, #240]
   17ba4:	ldr	w0, [sp, #200]
   17ba8:	cmp	w0, #0x0
   17bac:	b.le	17be0 <mpc_sqrt@@Base+0x6cc>
   17bb0:	ldr	w0, [sp, #28]
   17bb4:	asr	w0, w0, #4
   17bb8:	str	w0, [sp, #260]
   17bbc:	ldr	w0, [sp, #28]
   17bc0:	and	w0, w0, #0xf
   17bc4:	str	w0, [sp, #256]
   17bc8:	ldr	w0, [sp, #256]
   17bcc:	cmp	w0, #0x1
   17bd0:	b.ne	17c6c <mpc_sqrt@@Base+0x758>  // b.any
   17bd4:	mov	w0, #0x3                   	// #3
   17bd8:	str	w0, [sp, #256]
   17bdc:	b	17c6c <mpc_sqrt@@Base+0x758>
   17be0:	ldr	w0, [sp, #28]
   17be4:	asr	w0, w0, #4
   17be8:	cmp	w0, #0x2
   17bec:	b.eq	17c14 <mpc_sqrt@@Base+0x700>  // b.none
   17bf0:	ldr	w0, [sp, #28]
   17bf4:	asr	w0, w0, #4
   17bf8:	cmp	w0, #0x3
   17bfc:	b.eq	17c0c <mpc_sqrt@@Base+0x6f8>  // b.none
   17c00:	ldr	w0, [sp, #28]
   17c04:	asr	w0, w0, #4
   17c08:	b	17c18 <mpc_sqrt@@Base+0x704>
   17c0c:	mov	w0, #0x2                   	// #2
   17c10:	b	17c18 <mpc_sqrt@@Base+0x704>
   17c14:	mov	w0, #0x3                   	// #3
   17c18:	str	w0, [sp, #260]
   17c1c:	ldr	w0, [sp, #28]
   17c20:	and	w0, w0, #0xf
   17c24:	cmp	w0, #0x2
   17c28:	b.eq	17c50 <mpc_sqrt@@Base+0x73c>  // b.none
   17c2c:	ldr	w0, [sp, #28]
   17c30:	and	w0, w0, #0xf
   17c34:	cmp	w0, #0x3
   17c38:	b.eq	17c48 <mpc_sqrt@@Base+0x734>  // b.none
   17c3c:	ldr	w0, [sp, #28]
   17c40:	and	w0, w0, #0xf
   17c44:	b	17c54 <mpc_sqrt@@Base+0x740>
   17c48:	mov	w0, #0x2                   	// #2
   17c4c:	b	17c54 <mpc_sqrt@@Base+0x740>
   17c50:	mov	w0, #0x3                   	// #3
   17c54:	str	w0, [sp, #256]
   17c58:	ldr	w0, [sp, #256]
   17c5c:	cmp	w0, #0x1
   17c60:	b.ne	17c6c <mpc_sqrt@@Base+0x758>  // b.any
   17c64:	mov	w0, #0x2                   	// #2
   17c68:	str	w0, [sp, #256]
   17c6c:	ldr	w0, [sp, #212]
   17c70:	add	w0, w0, #0x1
   17c74:	str	w0, [sp, #212]
   17c78:	ldr	w0, [sp, #212]
   17c7c:	cmp	w0, #0x2
   17c80:	b.gt	17c94 <mpc_sqrt@@Base+0x780>
   17c84:	ldr	x0, [sp, #232]
   17c88:	bl	4de0 <mpc_ceil_log2@plt>
   17c8c:	add	x0, x0, #0x4
   17c90:	b	17ca4 <mpc_sqrt@@Base+0x790>
   17c94:	ldr	x0, [sp, #232]
   17c98:	lsr	x1, x0, #63
   17c9c:	add	x0, x1, x0
   17ca0:	asr	x0, x0, #1
   17ca4:	ldr	x1, [sp, #232]
   17ca8:	add	x0, x1, x0
   17cac:	str	x0, [sp, #232]
   17cb0:	add	x0, sp, #0x78
   17cb4:	ldr	x1, [sp, #232]
   17cb8:	bl	4d40 <mpfr_set_prec@plt>
   17cbc:	add	x0, sp, #0x58
   17cc0:	ldr	x1, [sp, #232]
   17cc4:	bl	4d40 <mpfr_set_prec@plt>
   17cc8:	add	x0, sp, #0x78
   17ccc:	mov	w2, #0x3                   	// #3
   17cd0:	ldr	x1, [sp, #32]
   17cd4:	bl	52a0 <mpc_abs@plt>
   17cd8:	str	w0, [sp, #228]
   17cdc:	ldr	w0, [sp, #204]
   17ce0:	cmp	w0, #0x0
   17ce4:	b.ge	17d10 <mpc_sqrt@@Base+0x7fc>  // b.tcont
   17ce8:	ldr	x2, [sp, #32]
   17cec:	add	x1, sp, #0x78
   17cf0:	add	x0, sp, #0x78
   17cf4:	mov	w3, #0x3                   	// #3
   17cf8:	bl	4b30 <mpfr_sub@plt>
   17cfc:	mov	w1, w0
   17d00:	ldr	w0, [sp, #228]
   17d04:	orr	w0, w0, w1
   17d08:	str	w0, [sp, #228]
   17d0c:	b	17d34 <mpc_sqrt@@Base+0x820>
   17d10:	ldr	x2, [sp, #32]
   17d14:	add	x1, sp, #0x78
   17d18:	add	x0, sp, #0x78
   17d1c:	mov	w3, #0x3                   	// #3
   17d20:	bl	4f50 <mpfr_add@plt>
   17d24:	mov	w1, w0
   17d28:	ldr	w0, [sp, #228]
   17d2c:	orr	w0, w0, w1
   17d30:	str	w0, [sp, #228]
   17d34:	add	x1, sp, #0x78
   17d38:	add	x0, sp, #0x78
   17d3c:	mov	w3, #0x3                   	// #3
   17d40:	mov	x2, #0x1                   	// #1
   17d44:	bl	5420 <mpfr_div_2ui@plt>
   17d48:	mov	w1, w0
   17d4c:	ldr	w0, [sp, #228]
   17d50:	orr	w0, w0, w1
   17d54:	str	w0, [sp, #228]
   17d58:	add	x1, sp, #0x78
   17d5c:	add	x0, sp, #0x78
   17d60:	mov	w2, #0x3                   	// #3
   17d64:	bl	5450 <mpfr_sqrt@plt>
   17d68:	mov	w1, w0
   17d6c:	ldr	w0, [sp, #228]
   17d70:	orr	w0, w0, w1
   17d74:	str	w0, [sp, #228]
   17d78:	add	x0, sp, #0x78
   17d7c:	bl	5490 <mpfr_min_prec@plt>
   17d80:	mov	x1, x0
   17d84:	ldr	x0, [sp, #248]
   17d88:	cmp	x0, x1
   17d8c:	cset	w0, ge  // ge = tcont
   17d90:	and	w0, w0, #0xff
   17d94:	str	w0, [sp, #172]
   17d98:	ldr	w0, [sp, #172]
   17d9c:	cmp	w0, #0x0
   17da0:	b.ne	17de8 <mpc_sqrt@@Base+0x8d4>  // b.any
   17da4:	ldr	x0, [sp, #232]
   17da8:	sub	x5, x0, #0x2
   17dac:	ldr	w0, [sp, #260]
   17db0:	cmp	w0, #0x0
   17db4:	cset	w0, eq  // eq = none
   17db8:	and	w0, w0, #0xff
   17dbc:	and	x1, x0, #0xff
   17dc0:	ldr	x0, [sp, #248]
   17dc4:	add	x1, x1, x0
   17dc8:	add	x0, sp, #0x78
   17dcc:	mov	x4, x1
   17dd0:	mov	w3, #0x2                   	// #2
   17dd4:	mov	w2, #0x3                   	// #3
   17dd8:	mov	x1, x5
   17ddc:	bl	5540 <mpfr_can_round@plt>
   17de0:	str	w0, [sp, #268]
   17de4:	b	17e38 <mpc_sqrt@@Base+0x924>
   17de8:	ldr	w0, [sp, #260]
   17dec:	cmp	w0, #0x0
   17df0:	b.ne	17e18 <mpc_sqrt@@Base+0x904>  // b.any
   17df4:	ldr	x0, [sp, #232]
   17df8:	sub	x1, x0, #0x2
   17dfc:	add	x0, sp, #0x78
   17e00:	ldr	x4, [sp, #248]
   17e04:	mov	w3, #0x0                   	// #0
   17e08:	mov	w2, #0x3                   	// #3
   17e0c:	bl	5540 <mpfr_can_round@plt>
   17e10:	str	w0, [sp, #268]
   17e14:	b	17e38 <mpc_sqrt@@Base+0x924>
   17e18:	ldr	x0, [sp, #232]
   17e1c:	sub	x1, x0, #0x2
   17e20:	add	x0, sp, #0x78
   17e24:	ldr	x4, [sp, #248]
   17e28:	mov	w3, #0x3                   	// #3
   17e2c:	mov	w2, #0x3                   	// #3
   17e30:	bl	5540 <mpfr_can_round@plt>
   17e34:	str	w0, [sp, #268]
   17e38:	ldr	w0, [sp, #228]
   17e3c:	cmp	w0, #0x0
   17e40:	b.eq	17e50 <mpc_sqrt@@Base+0x93c>  // b.none
   17e44:	ldr	w0, [sp, #268]
   17e48:	cmp	w0, #0x0
   17e4c:	b.eq	17f84 <mpc_sqrt@@Base+0xa70>  // b.none
   17e50:	ldr	x0, [sp, #32]
   17e54:	add	x1, x0, #0x20
   17e58:	add	x2, sp, #0x78
   17e5c:	add	x0, sp, #0x58
   17e60:	ldr	w3, [sp, #192]
   17e64:	bl	5250 <mpfr_div@plt>
   17e68:	str	w0, [sp, #224]
   17e6c:	ldr	w0, [sp, #224]
   17e70:	cmp	w0, #0x0
   17e74:	b.ne	17ea0 <mpc_sqrt@@Base+0x98c>  // b.any
   17e78:	ldr	w0, [sp, #228]
   17e7c:	cmp	w0, #0x0
   17e80:	b.eq	17ea0 <mpc_sqrt@@Base+0x98c>  // b.none
   17e84:	ldr	w0, [sp, #196]
   17e88:	cmp	w0, #0x0
   17e8c:	b.eq	17e98 <mpc_sqrt@@Base+0x984>  // b.none
   17e90:	mov	w0, #0xffffffff            	// #-1
   17e94:	b	17e9c <mpc_sqrt@@Base+0x988>
   17e98:	mov	w0, #0x1                   	// #1
   17e9c:	str	w0, [sp, #224]
   17ea0:	add	x1, sp, #0x58
   17ea4:	add	x0, sp, #0x58
   17ea8:	ldr	w3, [sp, #192]
   17eac:	mov	x2, #0x1                   	// #1
   17eb0:	bl	5420 <mpfr_div_2ui@plt>
   17eb4:	mov	w1, w0
   17eb8:	ldr	w0, [sp, #224]
   17ebc:	orr	w0, w0, w1
   17ec0:	str	w0, [sp, #224]
   17ec4:	add	x0, sp, #0x58
   17ec8:	bl	5490 <mpfr_min_prec@plt>
   17ecc:	mov	x1, x0
   17ed0:	ldr	x0, [sp, #240]
   17ed4:	cmp	x0, x1
   17ed8:	cset	w0, ge  // ge = tcont
   17edc:	and	w0, w0, #0xff
   17ee0:	str	w0, [sp, #208]
   17ee4:	ldr	w0, [sp, #208]
   17ee8:	cmp	w0, #0x0
   17eec:	b.ne	17f34 <mpc_sqrt@@Base+0xa20>  // b.any
   17ef0:	ldr	x0, [sp, #232]
   17ef4:	sub	x5, x0, #0x3
   17ef8:	ldr	w0, [sp, #256]
   17efc:	cmp	w0, #0x0
   17f00:	cset	w0, eq  // eq = none
   17f04:	and	w0, w0, #0xff
   17f08:	and	x1, x0, #0xff
   17f0c:	ldr	x0, [sp, #240]
   17f10:	add	x1, x1, x0
   17f14:	add	x0, sp, #0x58
   17f18:	mov	x4, x1
   17f1c:	mov	w3, #0x1                   	// #1
   17f20:	ldr	w2, [sp, #192]
   17f24:	mov	x1, x5
   17f28:	bl	5540 <mpfr_can_round@plt>
   17f2c:	str	w0, [sp, #264]
   17f30:	b	17f84 <mpc_sqrt@@Base+0xa70>
   17f34:	ldr	w0, [sp, #256]
   17f38:	cmp	w0, #0x0
   17f3c:	b.ne	17f64 <mpc_sqrt@@Base+0xa50>  // b.any
   17f40:	ldr	x0, [sp, #232]
   17f44:	sub	x1, x0, #0x3
   17f48:	add	x0, sp, #0x58
   17f4c:	ldr	x4, [sp, #240]
   17f50:	mov	w3, #0x0                   	// #0
   17f54:	ldr	w2, [sp, #192]
   17f58:	bl	5540 <mpfr_can_round@plt>
   17f5c:	str	w0, [sp, #264]
   17f60:	b	17f84 <mpc_sqrt@@Base+0xa70>
   17f64:	ldr	x0, [sp, #232]
   17f68:	sub	x1, x0, #0x3
   17f6c:	add	x0, sp, #0x58
   17f70:	ldr	x4, [sp, #240]
   17f74:	ldr	w3, [sp, #192]
   17f78:	ldr	w2, [sp, #192]
   17f7c:	bl	5540 <mpfr_can_round@plt>
   17f80:	str	w0, [sp, #264]
   17f84:	ldr	w0, [sp, #228]
   17f88:	cmp	w0, #0x0
   17f8c:	b.eq	17f9c <mpc_sqrt@@Base+0xa88>  // b.none
   17f90:	ldr	w0, [sp, #268]
   17f94:	cmp	w0, #0x0
   17f98:	b.eq	17c6c <mpc_sqrt@@Base+0x758>  // b.none
   17f9c:	ldr	w0, [sp, #224]
   17fa0:	cmp	w0, #0x0
   17fa4:	b.eq	17fb4 <mpc_sqrt@@Base+0xaa0>  // b.none
   17fa8:	ldr	w0, [sp, #264]
   17fac:	cmp	w0, #0x0
   17fb0:	b.eq	17c6c <mpc_sqrt@@Base+0x758>  // b.none
   17fb4:	ldr	w0, [sp, #204]
   17fb8:	cmp	w0, #0x0
   17fbc:	b.le	18020 <mpc_sqrt@@Base+0xb0c>
   17fc0:	ldr	x4, [sp, #40]
   17fc4:	ldr	w0, [sp, #28]
   17fc8:	and	w1, w0, #0xf
   17fcc:	ldr	w2, [sp, #128]
   17fd0:	add	x0, sp, #0x78
   17fd4:	mov	w3, w2
   17fd8:	mov	w2, w1
   17fdc:	mov	x1, x0
   17fe0:	mov	x0, x4
   17fe4:	bl	52d0 <mpfr_set4@plt>
   17fe8:	str	w0, [sp, #220]
   17fec:	ldr	x0, [sp, #40]
   17ff0:	add	x4, x0, #0x20
   17ff4:	ldr	w0, [sp, #28]
   17ff8:	asr	w1, w0, #4
   17ffc:	ldr	w2, [sp, #96]
   18000:	add	x0, sp, #0x58
   18004:	mov	w3, w2
   18008:	mov	w2, w1
   1800c:	mov	x1, x0
   18010:	mov	x0, x4
   18014:	bl	52d0 <mpfr_set4@plt>
   18018:	str	w0, [sp, #216]
   1801c:	b	180d8 <mpc_sqrt@@Base+0xbc4>
   18020:	ldr	w0, [sp, #200]
   18024:	cmp	w0, #0x0
   18028:	b.le	1808c <mpc_sqrt@@Base+0xb78>
   1802c:	ldr	x4, [sp, #40]
   18030:	ldr	w0, [sp, #28]
   18034:	and	w1, w0, #0xf
   18038:	ldr	w2, [sp, #96]
   1803c:	add	x0, sp, #0x58
   18040:	mov	w3, w2
   18044:	mov	w2, w1
   18048:	mov	x1, x0
   1804c:	mov	x0, x4
   18050:	bl	52d0 <mpfr_set4@plt>
   18054:	str	w0, [sp, #220]
   18058:	ldr	x0, [sp, #40]
   1805c:	add	x4, x0, #0x20
   18060:	ldr	w0, [sp, #28]
   18064:	asr	w1, w0, #4
   18068:	ldr	w2, [sp, #128]
   1806c:	add	x0, sp, #0x78
   18070:	mov	w3, w2
   18074:	mov	w2, w1
   18078:	mov	x1, x0
   1807c:	mov	x0, x4
   18080:	bl	52d0 <mpfr_set4@plt>
   18084:	str	w0, [sp, #216]
   18088:	b	180d8 <mpc_sqrt@@Base+0xbc4>
   1808c:	ldr	x3, [sp, #40]
   18090:	ldr	w0, [sp, #28]
   18094:	and	w1, w0, #0xf
   18098:	add	x0, sp, #0x58
   1809c:	mov	w2, w1
   180a0:	mov	x1, x0
   180a4:	mov	x0, x3
   180a8:	bl	4c50 <mpfr_neg@plt>
   180ac:	str	w0, [sp, #220]
   180b0:	ldr	x0, [sp, #40]
   180b4:	add	x3, x0, #0x20
   180b8:	ldr	w0, [sp, #28]
   180bc:	asr	w1, w0, #4
   180c0:	add	x0, sp, #0x78
   180c4:	mov	w2, w1
   180c8:	mov	x1, x0
   180cc:	mov	x0, x3
   180d0:	bl	4c50 <mpfr_neg@plt>
   180d4:	str	w0, [sp, #216]
   180d8:	ldr	w0, [sp, #172]
   180dc:	cmp	w0, #0x0
   180e0:	b.eq	18304 <mpc_sqrt@@Base+0xdf0>  // b.none
   180e4:	ldr	w0, [sp, #228]
   180e8:	cmp	w0, #0x0
   180ec:	b.eq	18304 <mpc_sqrt@@Base+0xdf0>  // b.none
   180f0:	ldr	w0, [sp, #260]
   180f4:	cmp	w0, #0x0
   180f8:	b.ne	1813c <mpc_sqrt@@Base+0xc28>  // b.any
   180fc:	ldr	w0, [sp, #204]
   18100:	cmp	w0, #0x0
   18104:	b.le	18114 <mpc_sqrt@@Base+0xc00>
   18108:	ldr	w0, [sp, #228]
   1810c:	str	w0, [sp, #220]
   18110:	b	18304 <mpc_sqrt@@Base+0xdf0>
   18114:	ldr	w0, [sp, #200]
   18118:	cmp	w0, #0x0
   1811c:	b.le	1812c <mpc_sqrt@@Base+0xc18>
   18120:	ldr	w0, [sp, #228]
   18124:	str	w0, [sp, #216]
   18128:	b	18304 <mpc_sqrt@@Base+0xdf0>
   1812c:	ldr	w0, [sp, #228]
   18130:	neg	w0, w0
   18134:	str	w0, [sp, #216]
   18138:	b	18304 <mpc_sqrt@@Base+0xdf0>
   1813c:	ldr	w0, [sp, #204]
   18140:	cmp	w0, #0x0
   18144:	b.le	181d4 <mpc_sqrt@@Base+0xcc0>
   18148:	ldr	w0, [sp, #260]
   1814c:	cmp	w0, #0x2
   18150:	b.ne	181c8 <mpc_sqrt@@Base+0xcb4>  // b.any
   18154:	ldr	x0, [sp, #40]
   18158:	ldr	x1, [x0, #16]
   1815c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   18160:	cmp	x1, x0
   18164:	b.ge	1818c <mpc_sqrt@@Base+0xc78>  // b.tcont
   18168:	ldr	x0, [sp, #40]
   1816c:	ldr	x1, [x0, #16]
   18170:	mov	x0, #0x2                   	// #2
   18174:	movk	x0, #0x8000, lsl #48
   18178:	cmp	x1, x0
   1817c:	b.ne	18184 <mpc_sqrt@@Base+0xc70>  // b.any
   18180:	bl	4bd0 <mpfr_set_erangeflag@plt>
   18184:	mov	w0, #0x0                   	// #0
   18188:	b	181a0 <mpc_sqrt@@Base+0xc8c>
   1818c:	ldr	x0, [sp, #40]
   18190:	ldr	w0, [x0, #8]
   18194:	cmp	w0, #0x0
   18198:	cset	w0, gt
   1819c:	and	w0, w0, #0xff
   181a0:	cmp	w0, #0x0
   181a4:	b.eq	181b4 <mpc_sqrt@@Base+0xca0>  // b.none
   181a8:	ldr	x0, [sp, #40]
   181ac:	bl	4ee0 <mpfr_nextabove@plt>
   181b0:	b	181bc <mpc_sqrt@@Base+0xca8>
   181b4:	ldr	x0, [sp, #40]
   181b8:	bl	4c80 <mpfr_nextbelow@plt>
   181bc:	mov	w0, #0x1                   	// #1
   181c0:	str	w0, [sp, #220]
   181c4:	b	18304 <mpc_sqrt@@Base+0xdf0>
   181c8:	mov	w0, #0xffffffff            	// #-1
   181cc:	str	w0, [sp, #220]
   181d0:	b	18304 <mpc_sqrt@@Base+0xdf0>
   181d4:	ldr	w0, [sp, #200]
   181d8:	cmp	w0, #0x0
   181dc:	b.le	18274 <mpc_sqrt@@Base+0xd60>
   181e0:	ldr	w0, [sp, #260]
   181e4:	cmp	w0, #0x2
   181e8:	b.ne	18268 <mpc_sqrt@@Base+0xd54>  // b.any
   181ec:	ldr	x0, [sp, #40]
   181f0:	ldr	x1, [x0, #48]
   181f4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   181f8:	cmp	x1, x0
   181fc:	b.ge	18224 <mpc_sqrt@@Base+0xd10>  // b.tcont
   18200:	ldr	x0, [sp, #40]
   18204:	ldr	x1, [x0, #48]
   18208:	mov	x0, #0x2                   	// #2
   1820c:	movk	x0, #0x8000, lsl #48
   18210:	cmp	x1, x0
   18214:	b.ne	1821c <mpc_sqrt@@Base+0xd08>  // b.any
   18218:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1821c:	mov	w0, #0x0                   	// #0
   18220:	b	18238 <mpc_sqrt@@Base+0xd24>
   18224:	ldr	x0, [sp, #40]
   18228:	ldr	w0, [x0, #40]
   1822c:	cmp	w0, #0x0
   18230:	cset	w0, gt
   18234:	and	w0, w0, #0xff
   18238:	cmp	w0, #0x0
   1823c:	b.eq	18250 <mpc_sqrt@@Base+0xd3c>  // b.none
   18240:	ldr	x0, [sp, #40]
   18244:	add	x0, x0, #0x20
   18248:	bl	4ee0 <mpfr_nextabove@plt>
   1824c:	b	1825c <mpc_sqrt@@Base+0xd48>
   18250:	ldr	x0, [sp, #40]
   18254:	add	x0, x0, #0x20
   18258:	bl	4c80 <mpfr_nextbelow@plt>
   1825c:	mov	w0, #0x1                   	// #1
   18260:	str	w0, [sp, #216]
   18264:	b	18304 <mpc_sqrt@@Base+0xdf0>
   18268:	mov	w0, #0xffffffff            	// #-1
   1826c:	str	w0, [sp, #216]
   18270:	b	18304 <mpc_sqrt@@Base+0xdf0>
   18274:	ldr	w0, [sp, #260]
   18278:	cmp	w0, #0x2
   1827c:	b.ne	182fc <mpc_sqrt@@Base+0xde8>  // b.any
   18280:	ldr	x0, [sp, #40]
   18284:	ldr	x1, [x0, #48]
   18288:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1828c:	cmp	x1, x0
   18290:	b.ge	182b8 <mpc_sqrt@@Base+0xda4>  // b.tcont
   18294:	ldr	x0, [sp, #40]
   18298:	ldr	x1, [x0, #48]
   1829c:	mov	x0, #0x2                   	// #2
   182a0:	movk	x0, #0x8000, lsl #48
   182a4:	cmp	x1, x0
   182a8:	b.ne	182b0 <mpc_sqrt@@Base+0xd9c>  // b.any
   182ac:	bl	4bd0 <mpfr_set_erangeflag@plt>
   182b0:	mov	w0, #0x0                   	// #0
   182b4:	b	182cc <mpc_sqrt@@Base+0xdb8>
   182b8:	ldr	x0, [sp, #40]
   182bc:	ldr	w0, [x0, #40]
   182c0:	cmp	w0, #0x0
   182c4:	cset	w0, gt
   182c8:	and	w0, w0, #0xff
   182cc:	cmp	w0, #0x0
   182d0:	b.eq	182e4 <mpc_sqrt@@Base+0xdd0>  // b.none
   182d4:	ldr	x0, [sp, #40]
   182d8:	add	x0, x0, #0x20
   182dc:	bl	4ee0 <mpfr_nextabove@plt>
   182e0:	b	182f0 <mpc_sqrt@@Base+0xddc>
   182e4:	ldr	x0, [sp, #40]
   182e8:	add	x0, x0, #0x20
   182ec:	bl	4c80 <mpfr_nextbelow@plt>
   182f0:	mov	w0, #0xffffffff            	// #-1
   182f4:	str	w0, [sp, #216]
   182f8:	b	18304 <mpc_sqrt@@Base+0xdf0>
   182fc:	mov	w0, #0x1                   	// #1
   18300:	str	w0, [sp, #216]
   18304:	ldr	w0, [sp, #208]
   18308:	cmp	w0, #0x0
   1830c:	b.eq	18540 <mpc_sqrt@@Base+0x102c>  // b.none
   18310:	ldr	w0, [sp, #224]
   18314:	cmp	w0, #0x0
   18318:	b.eq	18540 <mpc_sqrt@@Base+0x102c>  // b.none
   1831c:	ldr	w0, [sp, #256]
   18320:	cmp	w0, #0x0
   18324:	b.ne	18368 <mpc_sqrt@@Base+0xe54>  // b.any
   18328:	ldr	w0, [sp, #204]
   1832c:	cmp	w0, #0x0
   18330:	b.le	18340 <mpc_sqrt@@Base+0xe2c>
   18334:	ldr	w0, [sp, #224]
   18338:	str	w0, [sp, #216]
   1833c:	b	18540 <mpc_sqrt@@Base+0x102c>
   18340:	ldr	w0, [sp, #200]
   18344:	cmp	w0, #0x0
   18348:	b.le	18358 <mpc_sqrt@@Base+0xe44>
   1834c:	ldr	w0, [sp, #224]
   18350:	str	w0, [sp, #220]
   18354:	b	18540 <mpc_sqrt@@Base+0x102c>
   18358:	ldr	w0, [sp, #224]
   1835c:	neg	w0, w0
   18360:	str	w0, [sp, #220]
   18364:	b	18540 <mpc_sqrt@@Base+0x102c>
   18368:	ldr	w0, [sp, #204]
   1836c:	cmp	w0, #0x0
   18370:	b.le	18410 <mpc_sqrt@@Base+0xefc>
   18374:	ldr	w1, [sp, #256]
   18378:	ldr	w0, [sp, #192]
   1837c:	cmp	w1, w0
   18380:	b.ne	18390 <mpc_sqrt@@Base+0xe7c>  // b.any
   18384:	ldr	w0, [sp, #224]
   18388:	str	w0, [sp, #216]
   1838c:	b	18540 <mpc_sqrt@@Base+0x102c>
   18390:	ldr	w0, [sp, #224]
   18394:	neg	w0, w0
   18398:	str	w0, [sp, #216]
   1839c:	ldr	x0, [sp, #40]
   183a0:	ldr	x1, [x0, #48]
   183a4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   183a8:	cmp	x1, x0
   183ac:	b.ge	183d4 <mpc_sqrt@@Base+0xec0>  // b.tcont
   183b0:	ldr	x0, [sp, #40]
   183b4:	ldr	x1, [x0, #48]
   183b8:	mov	x0, #0x2                   	// #2
   183bc:	movk	x0, #0x8000, lsl #48
   183c0:	cmp	x1, x0
   183c4:	b.ne	183cc <mpc_sqrt@@Base+0xeb8>  // b.any
   183c8:	bl	4bd0 <mpfr_set_erangeflag@plt>
   183cc:	mov	w0, #0x0                   	// #0
   183d0:	b	183e8 <mpc_sqrt@@Base+0xed4>
   183d4:	ldr	x0, [sp, #40]
   183d8:	ldr	w0, [x0, #40]
   183dc:	cmp	w0, #0x0
   183e0:	cset	w0, gt
   183e4:	and	w0, w0, #0xff
   183e8:	cmp	w0, #0x0
   183ec:	b.eq	18400 <mpc_sqrt@@Base+0xeec>  // b.none
   183f0:	ldr	x0, [sp, #40]
   183f4:	add	x0, x0, #0x20
   183f8:	bl	4c80 <mpfr_nextbelow@plt>
   183fc:	b	18540 <mpc_sqrt@@Base+0x102c>
   18400:	ldr	x0, [sp, #40]
   18404:	add	x0, x0, #0x20
   18408:	bl	4ee0 <mpfr_nextabove@plt>
   1840c:	b	18540 <mpc_sqrt@@Base+0x102c>
   18410:	ldr	w0, [sp, #200]
   18414:	cmp	w0, #0x0
   18418:	b.le	184b0 <mpc_sqrt@@Base+0xf9c>
   1841c:	ldr	w1, [sp, #256]
   18420:	ldr	w0, [sp, #192]
   18424:	cmp	w1, w0
   18428:	b.ne	18438 <mpc_sqrt@@Base+0xf24>  // b.any
   1842c:	ldr	w0, [sp, #224]
   18430:	str	w0, [sp, #220]
   18434:	b	18540 <mpc_sqrt@@Base+0x102c>
   18438:	ldr	w0, [sp, #224]
   1843c:	neg	w0, w0
   18440:	str	w0, [sp, #220]
   18444:	ldr	x0, [sp, #40]
   18448:	ldr	x1, [x0, #16]
   1844c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   18450:	cmp	x1, x0
   18454:	b.ge	1847c <mpc_sqrt@@Base+0xf68>  // b.tcont
   18458:	ldr	x0, [sp, #40]
   1845c:	ldr	x1, [x0, #16]
   18460:	mov	x0, #0x2                   	// #2
   18464:	movk	x0, #0x8000, lsl #48
   18468:	cmp	x1, x0
   1846c:	b.ne	18474 <mpc_sqrt@@Base+0xf60>  // b.any
   18470:	bl	4bd0 <mpfr_set_erangeflag@plt>
   18474:	mov	w0, #0x0                   	// #0
   18478:	b	18490 <mpc_sqrt@@Base+0xf7c>
   1847c:	ldr	x0, [sp, #40]
   18480:	ldr	w0, [x0, #8]
   18484:	cmp	w0, #0x0
   18488:	cset	w0, gt
   1848c:	and	w0, w0, #0xff
   18490:	cmp	w0, #0x0
   18494:	b.eq	184a4 <mpc_sqrt@@Base+0xf90>  // b.none
   18498:	ldr	x0, [sp, #40]
   1849c:	bl	4c80 <mpfr_nextbelow@plt>
   184a0:	b	18540 <mpc_sqrt@@Base+0x102c>
   184a4:	ldr	x0, [sp, #40]
   184a8:	bl	4ee0 <mpfr_nextabove@plt>
   184ac:	b	18540 <mpc_sqrt@@Base+0x102c>
   184b0:	ldr	w1, [sp, #256]
   184b4:	ldr	w0, [sp, #192]
   184b8:	cmp	w1, w0
   184bc:	b.ne	184d0 <mpc_sqrt@@Base+0xfbc>  // b.any
   184c0:	ldr	w0, [sp, #224]
   184c4:	neg	w0, w0
   184c8:	str	w0, [sp, #220]
   184cc:	b	18540 <mpc_sqrt@@Base+0x102c>
   184d0:	ldr	w0, [sp, #224]
   184d4:	str	w0, [sp, #220]
   184d8:	ldr	x0, [sp, #40]
   184dc:	ldr	x1, [x0, #16]
   184e0:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   184e4:	cmp	x1, x0
   184e8:	b.ge	18510 <mpc_sqrt@@Base+0xffc>  // b.tcont
   184ec:	ldr	x0, [sp, #40]
   184f0:	ldr	x1, [x0, #16]
   184f4:	mov	x0, #0x2                   	// #2
   184f8:	movk	x0, #0x8000, lsl #48
   184fc:	cmp	x1, x0
   18500:	b.ne	18508 <mpc_sqrt@@Base+0xff4>  // b.any
   18504:	bl	4bd0 <mpfr_set_erangeflag@plt>
   18508:	mov	w0, #0x0                   	// #0
   1850c:	b	18524 <mpc_sqrt@@Base+0x1010>
   18510:	ldr	x0, [sp, #40]
   18514:	ldr	w0, [x0, #8]
   18518:	cmp	w0, #0x0
   1851c:	cset	w0, gt
   18520:	and	w0, w0, #0xff
   18524:	cmp	w0, #0x0
   18528:	b.eq	18538 <mpc_sqrt@@Base+0x1024>  // b.none
   1852c:	ldr	x0, [sp, #40]
   18530:	bl	4c80 <mpfr_nextbelow@plt>
   18534:	b	18540 <mpc_sqrt@@Base+0x102c>
   18538:	ldr	x0, [sp, #40]
   1853c:	bl	4ee0 <mpfr_nextabove@plt>
   18540:	add	x0, sp, #0x78
   18544:	bl	4e30 <mpfr_clear@plt>
   18548:	add	x0, sp, #0x58
   1854c:	bl	4e30 <mpfr_clear@plt>
   18550:	ldr	w0, [sp, #220]
   18554:	cmp	w0, #0x0
   18558:	b.lt	18574 <mpc_sqrt@@Base+0x1060>  // b.tstop
   1855c:	ldr	w0, [sp, #220]
   18560:	cmp	w0, #0x0
   18564:	cset	w0, ne  // ne = any
   18568:	and	w0, w0, #0xff
   1856c:	mov	w1, w0
   18570:	b	18578 <mpc_sqrt@@Base+0x1064>
   18574:	mov	w1, #0x2                   	// #2
   18578:	ldr	w0, [sp, #216]
   1857c:	cmp	w0, #0x0
   18580:	b.lt	185a0 <mpc_sqrt@@Base+0x108c>  // b.tstop
   18584:	ldr	w0, [sp, #216]
   18588:	cmp	w0, #0x0
   1858c:	b.eq	18598 <mpc_sqrt@@Base+0x1084>  // b.none
   18590:	mov	w0, #0x4                   	// #4
   18594:	b	185a4 <mpc_sqrt@@Base+0x1090>
   18598:	mov	w0, #0x0                   	// #0
   1859c:	b	185a4 <mpc_sqrt@@Base+0x1090>
   185a0:	mov	w0, #0x8                   	// #8
   185a4:	orr	w0, w1, w0
   185a8:	ldp	x29, x30, [sp], #272
   185ac:	ret
   185b0:	stp	x29, x30, [sp, #-32]!
   185b4:	mov	x29, sp
   185b8:	str	x0, [sp, #24]
   185bc:	b	185d4 <mpc_sqrt@@Base+0x10c0>
   185c0:	ldr	x0, [sp, #24]
   185c4:	ldr	x0, [x0]
   185c8:	add	x1, x0, #0x1
   185cc:	ldr	x0, [sp, #24]
   185d0:	str	x1, [x0]
   185d4:	bl	5270 <__ctype_b_loc@plt>
   185d8:	ldr	x1, [x0]
   185dc:	ldr	x0, [sp, #24]
   185e0:	ldr	x0, [x0]
   185e4:	ldrb	w0, [x0]
   185e8:	and	x0, x0, #0xff
   185ec:	lsl	x0, x0, #1
   185f0:	add	x0, x1, x0
   185f4:	ldrh	w0, [x0]
   185f8:	and	w0, w0, #0x2000
   185fc:	cmp	w0, #0x0
   18600:	b.ne	185c0 <mpc_sqrt@@Base+0x10ac>  // b.any
   18604:	nop
   18608:	nop
   1860c:	ldp	x29, x30, [sp], #32
   18610:	ret

0000000000018614 <mpc_strtoc@@Base>:
   18614:	stp	x29, x30, [sp, #-96]!
   18618:	mov	x29, sp
   1861c:	str	x0, [sp, #40]
   18620:	str	x1, [sp, #32]
   18624:	str	x2, [sp, #24]
   18628:	str	w3, [sp, #20]
   1862c:	str	w4, [sp, #16]
   18630:	str	wzr, [sp, #92]
   18634:	str	wzr, [sp, #84]
   18638:	str	wzr, [sp, #88]
   1863c:	ldr	x0, [sp, #32]
   18640:	cmp	x0, #0x0
   18644:	b.eq	18828 <mpc_strtoc@@Base+0x214>  // b.none
   18648:	ldr	w0, [sp, #20]
   1864c:	cmp	w0, #0x24
   18650:	b.gt	18828 <mpc_strtoc@@Base+0x214>
   18654:	ldr	w0, [sp, #20]
   18658:	cmp	w0, #0x1
   1865c:	b.eq	18828 <mpc_strtoc@@Base+0x214>  // b.none
   18660:	ldr	x0, [sp, #32]
   18664:	str	x0, [sp, #64]
   18668:	add	x0, sp, #0x40
   1866c:	bl	185b0 <mpc_sqrt@@Base+0x109c>
   18670:	ldr	x0, [sp, #64]
   18674:	ldrb	w0, [x0]
   18678:	cmp	w0, #0x28
   1867c:	b.ne	18694 <mpc_strtoc@@Base+0x80>  // b.any
   18680:	mov	w0, #0x1                   	// #1
   18684:	str	w0, [sp, #92]
   18688:	ldr	x0, [sp, #64]
   1868c:	add	x0, x0, #0x1
   18690:	str	x0, [sp, #64]
   18694:	ldr	x5, [sp, #40]
   18698:	ldr	x1, [sp, #64]
   1869c:	ldr	w0, [sp, #16]
   186a0:	and	w2, w0, #0xf
   186a4:	add	x0, sp, #0x38
   186a8:	mov	w4, w2
   186ac:	ldr	w3, [sp, #20]
   186b0:	mov	x2, x0
   186b4:	mov	x0, x5
   186b8:	bl	4b90 <mpfr_strtofr@plt>
   186bc:	str	w0, [sp, #84]
   186c0:	ldr	x1, [sp, #56]
   186c4:	ldr	x0, [sp, #64]
   186c8:	cmp	x1, x0
   186cc:	b.eq	18830 <mpc_strtoc@@Base+0x21c>  // b.none
   186d0:	ldr	x0, [sp, #56]
   186d4:	str	x0, [sp, #64]
   186d8:	ldr	w0, [sp, #92]
   186dc:	cmp	w0, #0x0
   186e0:	b.ne	18714 <mpc_strtoc@@Base+0x100>  // b.any
   186e4:	ldr	x0, [sp, #40]
   186e8:	add	x0, x0, #0x20
   186ec:	str	x0, [sp, #72]
   186f0:	ldr	x0, [sp, #72]
   186f4:	mov	w1, #0x1                   	// #1
   186f8:	str	w1, [x0, #8]
   186fc:	ldr	x0, [sp, #72]
   18700:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   18704:	str	x1, [x0, #16]
   18708:	mov	w0, #0x0                   	// #0
   1870c:	str	w0, [sp, #88]
   18710:	b	187b4 <mpc_strtoc@@Base+0x1a0>
   18714:	bl	5270 <__ctype_b_loc@plt>
   18718:	ldr	x1, [x0]
   1871c:	ldr	x0, [sp, #64]
   18720:	ldrb	w0, [x0]
   18724:	and	x0, x0, #0xff
   18728:	lsl	x0, x0, #1
   1872c:	add	x0, x1, x0
   18730:	ldrh	w0, [x0]
   18734:	and	w0, w0, #0x2000
   18738:	cmp	w0, #0x0
   1873c:	b.eq	18838 <mpc_strtoc@@Base+0x224>  // b.none
   18740:	add	x0, sp, #0x40
   18744:	bl	185b0 <mpc_sqrt@@Base+0x109c>
   18748:	ldr	x0, [sp, #40]
   1874c:	add	x5, x0, #0x20
   18750:	ldr	x1, [sp, #64]
   18754:	ldr	w0, [sp, #16]
   18758:	asr	w2, w0, #4
   1875c:	add	x0, sp, #0x38
   18760:	mov	w4, w2
   18764:	ldr	w3, [sp, #20]
   18768:	mov	x2, x0
   1876c:	mov	x0, x5
   18770:	bl	4b90 <mpfr_strtofr@plt>
   18774:	str	w0, [sp, #88]
   18778:	ldr	x1, [sp, #56]
   1877c:	ldr	x0, [sp, #64]
   18780:	cmp	x1, x0
   18784:	b.eq	18840 <mpc_strtoc@@Base+0x22c>  // b.none
   18788:	ldr	x0, [sp, #56]
   1878c:	str	x0, [sp, #64]
   18790:	add	x0, sp, #0x40
   18794:	bl	185b0 <mpc_sqrt@@Base+0x109c>
   18798:	ldr	x0, [sp, #64]
   1879c:	ldrb	w0, [x0]
   187a0:	cmp	w0, #0x29
   187a4:	b.ne	18848 <mpc_strtoc@@Base+0x234>  // b.any
   187a8:	ldr	x0, [sp, #64]
   187ac:	add	x0, x0, #0x1
   187b0:	str	x0, [sp, #64]
   187b4:	ldr	x0, [sp, #24]
   187b8:	cmp	x0, #0x0
   187bc:	b.eq	187cc <mpc_strtoc@@Base+0x1b8>  // b.none
   187c0:	ldr	x1, [sp, #64]
   187c4:	ldr	x0, [sp, #24]
   187c8:	str	x1, [x0]
   187cc:	ldr	w0, [sp, #84]
   187d0:	cmp	w0, #0x0
   187d4:	b.lt	187f0 <mpc_strtoc@@Base+0x1dc>  // b.tstop
   187d8:	ldr	w0, [sp, #84]
   187dc:	cmp	w0, #0x0
   187e0:	cset	w0, ne  // ne = any
   187e4:	and	w0, w0, #0xff
   187e8:	mov	w1, w0
   187ec:	b	187f4 <mpc_strtoc@@Base+0x1e0>
   187f0:	mov	w1, #0x2                   	// #2
   187f4:	ldr	w0, [sp, #88]
   187f8:	cmp	w0, #0x0
   187fc:	b.lt	1881c <mpc_strtoc@@Base+0x208>  // b.tstop
   18800:	ldr	w0, [sp, #88]
   18804:	cmp	w0, #0x0
   18808:	b.eq	18814 <mpc_strtoc@@Base+0x200>  // b.none
   1880c:	mov	w0, #0x4                   	// #4
   18810:	b	18820 <mpc_strtoc@@Base+0x20c>
   18814:	mov	w0, #0x0                   	// #0
   18818:	b	18820 <mpc_strtoc@@Base+0x20c>
   1881c:	mov	w0, #0x8                   	// #8
   18820:	orr	w0, w1, w0
   18824:	b	1887c <mpc_strtoc@@Base+0x268>
   18828:	nop
   1882c:	b	1884c <mpc_strtoc@@Base+0x238>
   18830:	nop
   18834:	b	1884c <mpc_strtoc@@Base+0x238>
   18838:	nop
   1883c:	b	1884c <mpc_strtoc@@Base+0x238>
   18840:	nop
   18844:	b	1884c <mpc_strtoc@@Base+0x238>
   18848:	nop
   1884c:	ldr	x0, [sp, #24]
   18850:	cmp	x0, #0x0
   18854:	b.eq	18864 <mpc_strtoc@@Base+0x250>  // b.none
   18858:	ldr	x0, [sp, #24]
   1885c:	ldr	x1, [sp, #32]
   18860:	str	x1, [x0]
   18864:	ldr	x0, [sp, #40]
   18868:	bl	4b10 <mpfr_set_nan@plt>
   1886c:	ldr	x0, [sp, #40]
   18870:	add	x0, x0, #0x20
   18874:	bl	4b10 <mpfr_set_nan@plt>
   18878:	mov	w0, #0xffffffff            	// #-1
   1887c:	ldp	x29, x30, [sp], #96
   18880:	ret

0000000000018884 <mpc_sub@@Base>:
   18884:	stp	x29, x30, [sp, #-64]!
   18888:	mov	x29, sp
   1888c:	str	x0, [sp, #40]
   18890:	str	x1, [sp, #32]
   18894:	str	x2, [sp, #24]
   18898:	str	w3, [sp, #20]
   1889c:	ldr	x4, [sp, #40]
   188a0:	ldr	x1, [sp, #32]
   188a4:	ldr	x2, [sp, #24]
   188a8:	ldr	w0, [sp, #20]
   188ac:	and	w0, w0, #0xf
   188b0:	mov	w3, w0
   188b4:	mov	x0, x4
   188b8:	bl	4b30 <mpfr_sub@plt>
   188bc:	str	w0, [sp, #60]
   188c0:	ldr	x0, [sp, #40]
   188c4:	add	x4, x0, #0x20
   188c8:	ldr	x0, [sp, #32]
   188cc:	add	x1, x0, #0x20
   188d0:	ldr	x0, [sp, #24]
   188d4:	add	x2, x0, #0x20
   188d8:	ldr	w0, [sp, #20]
   188dc:	asr	w0, w0, #4
   188e0:	mov	w3, w0
   188e4:	mov	x0, x4
   188e8:	bl	4b30 <mpfr_sub@plt>
   188ec:	str	w0, [sp, #56]
   188f0:	ldr	w0, [sp, #60]
   188f4:	cmp	w0, #0x0
   188f8:	b.lt	18914 <mpc_sub@@Base+0x90>  // b.tstop
   188fc:	ldr	w0, [sp, #60]
   18900:	cmp	w0, #0x0
   18904:	cset	w0, ne  // ne = any
   18908:	and	w0, w0, #0xff
   1890c:	mov	w1, w0
   18910:	b	18918 <mpc_sub@@Base+0x94>
   18914:	mov	w1, #0x2                   	// #2
   18918:	ldr	w0, [sp, #56]
   1891c:	cmp	w0, #0x0
   18920:	b.lt	18940 <mpc_sub@@Base+0xbc>  // b.tstop
   18924:	ldr	w0, [sp, #56]
   18928:	cmp	w0, #0x0
   1892c:	b.eq	18938 <mpc_sub@@Base+0xb4>  // b.none
   18930:	mov	w0, #0x4                   	// #4
   18934:	b	18944 <mpc_sub@@Base+0xc0>
   18938:	mov	w0, #0x0                   	// #0
   1893c:	b	18944 <mpc_sub@@Base+0xc0>
   18940:	mov	w0, #0x8                   	// #8
   18944:	orr	w0, w1, w0
   18948:	ldp	x29, x30, [sp], #64
   1894c:	ret

0000000000018950 <mpc_sub_fr@@Base>:
   18950:	stp	x29, x30, [sp, #-64]!
   18954:	mov	x29, sp
   18958:	str	x0, [sp, #40]
   1895c:	str	x1, [sp, #32]
   18960:	str	x2, [sp, #24]
   18964:	str	w3, [sp, #20]
   18968:	ldr	x4, [sp, #40]
   1896c:	ldr	x1, [sp, #32]
   18970:	ldr	w0, [sp, #20]
   18974:	and	w0, w0, #0xf
   18978:	mov	w3, w0
   1897c:	ldr	x2, [sp, #24]
   18980:	mov	x0, x4
   18984:	bl	4b30 <mpfr_sub@plt>
   18988:	str	w0, [sp, #60]
   1898c:	ldr	x0, [sp, #40]
   18990:	add	x4, x0, #0x20
   18994:	ldr	x0, [sp, #32]
   18998:	add	x1, x0, #0x20
   1899c:	ldr	w0, [sp, #20]
   189a0:	asr	w2, w0, #4
   189a4:	ldr	x0, [sp, #32]
   189a8:	ldr	w0, [x0, #40]
   189ac:	mov	w3, w0
   189b0:	mov	x0, x4
   189b4:	bl	52d0 <mpfr_set4@plt>
   189b8:	str	w0, [sp, #56]
   189bc:	ldr	w0, [sp, #60]
   189c0:	cmp	w0, #0x0
   189c4:	b.lt	189e0 <mpc_sub_fr@@Base+0x90>  // b.tstop
   189c8:	ldr	w0, [sp, #60]
   189cc:	cmp	w0, #0x0
   189d0:	cset	w0, ne  // ne = any
   189d4:	and	w0, w0, #0xff
   189d8:	mov	w1, w0
   189dc:	b	189e4 <mpc_sub_fr@@Base+0x94>
   189e0:	mov	w1, #0x2                   	// #2
   189e4:	ldr	w0, [sp, #56]
   189e8:	cmp	w0, #0x0
   189ec:	b.lt	18a0c <mpc_sub_fr@@Base+0xbc>  // b.tstop
   189f0:	ldr	w0, [sp, #56]
   189f4:	cmp	w0, #0x0
   189f8:	b.eq	18a04 <mpc_sub_fr@@Base+0xb4>  // b.none
   189fc:	mov	w0, #0x4                   	// #4
   18a00:	b	18a10 <mpc_sub_fr@@Base+0xc0>
   18a04:	mov	w0, #0x0                   	// #0
   18a08:	b	18a10 <mpc_sub_fr@@Base+0xc0>
   18a0c:	mov	w0, #0x8                   	// #8
   18a10:	orr	w0, w1, w0
   18a14:	ldp	x29, x30, [sp], #64
   18a18:	ret

0000000000018a1c <mpc_sub_ui@@Base>:
   18a1c:	stp	x29, x30, [sp, #-64]!
   18a20:	mov	x29, sp
   18a24:	str	x0, [sp, #40]
   18a28:	str	x1, [sp, #32]
   18a2c:	str	x2, [sp, #24]
   18a30:	str	w3, [sp, #20]
   18a34:	ldr	x4, [sp, #40]
   18a38:	ldr	x1, [sp, #32]
   18a3c:	ldr	w0, [sp, #20]
   18a40:	and	w0, w0, #0xf
   18a44:	mov	w3, w0
   18a48:	ldr	x2, [sp, #24]
   18a4c:	mov	x0, x4
   18a50:	bl	51f0 <mpfr_sub_ui@plt>
   18a54:	str	w0, [sp, #60]
   18a58:	ldr	x0, [sp, #40]
   18a5c:	add	x4, x0, #0x20
   18a60:	ldr	x0, [sp, #32]
   18a64:	add	x1, x0, #0x20
   18a68:	ldr	w0, [sp, #20]
   18a6c:	asr	w2, w0, #4
   18a70:	ldr	x0, [sp, #32]
   18a74:	ldr	w0, [x0, #40]
   18a78:	mov	w3, w0
   18a7c:	mov	x0, x4
   18a80:	bl	52d0 <mpfr_set4@plt>
   18a84:	str	w0, [sp, #56]
   18a88:	ldr	w0, [sp, #60]
   18a8c:	cmp	w0, #0x0
   18a90:	b.lt	18aac <mpc_sub_ui@@Base+0x90>  // b.tstop
   18a94:	ldr	w0, [sp, #60]
   18a98:	cmp	w0, #0x0
   18a9c:	cset	w0, ne  // ne = any
   18aa0:	and	w0, w0, #0xff
   18aa4:	mov	w1, w0
   18aa8:	b	18ab0 <mpc_sub_ui@@Base+0x94>
   18aac:	mov	w1, #0x2                   	// #2
   18ab0:	ldr	w0, [sp, #56]
   18ab4:	cmp	w0, #0x0
   18ab8:	b.lt	18ad8 <mpc_sub_ui@@Base+0xbc>  // b.tstop
   18abc:	ldr	w0, [sp, #56]
   18ac0:	cmp	w0, #0x0
   18ac4:	b.eq	18ad0 <mpc_sub_ui@@Base+0xb4>  // b.none
   18ac8:	mov	w0, #0x4                   	// #4
   18acc:	b	18adc <mpc_sub_ui@@Base+0xc0>
   18ad0:	mov	w0, #0x0                   	// #0
   18ad4:	b	18adc <mpc_sub_ui@@Base+0xc0>
   18ad8:	mov	w0, #0x8                   	// #8
   18adc:	orr	w0, w1, w0
   18ae0:	ldp	x29, x30, [sp], #64
   18ae4:	ret

0000000000018ae8 <mpc_swap@@Base>:
   18ae8:	stp	x29, x30, [sp, #-32]!
   18aec:	mov	x29, sp
   18af0:	str	x0, [sp, #24]
   18af4:	str	x1, [sp, #16]
   18af8:	ldr	x0, [sp, #24]
   18afc:	ldr	x1, [sp, #16]
   18b00:	bl	5190 <mpfr_swap@plt>
   18b04:	ldr	x0, [sp, #24]
   18b08:	add	x2, x0, #0x20
   18b0c:	ldr	x0, [sp, #16]
   18b10:	add	x0, x0, #0x20
   18b14:	mov	x1, x0
   18b18:	mov	x0, x2
   18b1c:	bl	5190 <mpfr_swap@plt>
   18b20:	nop
   18b24:	ldp	x29, x30, [sp], #32
   18b28:	ret

0000000000018b2c <mpc_tan@@Base>:
   18b2c:	stp	x29, x30, [sp, #-384]!
   18b30:	mov	x29, sp
   18b34:	str	x19, [sp, #16]
   18b38:	str	x0, [sp, #56]
   18b3c:	str	x1, [sp, #48]
   18b40:	str	w2, [sp, #44]
   18b44:	str	wzr, [sp, #364]
   18b48:	ldr	x0, [sp, #48]
   18b4c:	bl	55c0 <mpfr_number_p@plt>
   18b50:	cmp	w0, #0x0
   18b54:	b.eq	18b6c <mpc_tan@@Base+0x40>  // b.none
   18b58:	ldr	x0, [sp, #48]
   18b5c:	add	x0, x0, #0x20
   18b60:	bl	55c0 <mpfr_number_p@plt>
   18b64:	cmp	w0, #0x0
   18b68:	b.ne	18e88 <mpc_tan@@Base+0x35c>  // b.any
   18b6c:	ldr	x0, [sp, #48]
   18b70:	ldr	x1, [x0, #16]
   18b74:	mov	x0, #0x2                   	// #2
   18b78:	movk	x0, #0x8000, lsl #48
   18b7c:	cmp	x1, x0
   18b80:	b.ne	18bec <mpc_tan@@Base+0xc0>  // b.any
   18b84:	ldr	x0, [sp, #48]
   18b88:	ldr	x1, [x0, #48]
   18b8c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   18b90:	cmp	x1, x0
   18b94:	b.ne	18bd0 <mpc_tan@@Base+0xa4>  // b.any
   18b98:	ldr	x0, [sp, #48]
   18b9c:	ldr	w0, [x0, #40]
   18ba0:	cmp	w0, #0x0
   18ba4:	b.ge	18bb0 <mpc_tan@@Base+0x84>  // b.tcont
   18ba8:	mov	x0, #0xffffffffffffffff    	// #-1
   18bac:	b	18bb4 <mpc_tan@@Base+0x88>
   18bb0:	mov	x0, #0x1                   	// #1
   18bb4:	ldr	w3, [sp, #44]
   18bb8:	mov	x2, x0
   18bbc:	mov	x1, #0x0                   	// #0
   18bc0:	ldr	x0, [sp, #56]
   18bc4:	bl	53c0 <mpc_set_si_si@plt>
   18bc8:	str	w0, [sp, #360]
   18bcc:	b	18e80 <mpc_tan@@Base+0x354>
   18bd0:	ldr	x0, [sp, #56]
   18bd4:	bl	4b10 <mpfr_set_nan@plt>
   18bd8:	ldr	x0, [sp, #56]
   18bdc:	add	x0, x0, #0x20
   18be0:	bl	4b10 <mpfr_set_nan@plt>
   18be4:	str	wzr, [sp, #360]
   18be8:	b	18e80 <mpc_tan@@Base+0x354>
   18bec:	ldr	x0, [sp, #48]
   18bf0:	ldr	x1, [x0, #48]
   18bf4:	mov	x0, #0x2                   	// #2
   18bf8:	movk	x0, #0x8000, lsl #48
   18bfc:	cmp	x1, x0
   18c00:	b.ne	18c48 <mpc_tan@@Base+0x11c>  // b.any
   18c04:	ldr	x0, [sp, #48]
   18c08:	bl	52f0 <mpfr_sgn@plt>
   18c0c:	cmp	w0, #0x0
   18c10:	b.ne	18c2c <mpc_tan@@Base+0x100>  // b.any
   18c14:	ldr	w2, [sp, #44]
   18c18:	ldr	x1, [sp, #48]
   18c1c:	ldr	x0, [sp, #56]
   18c20:	bl	5680 <mpc_set@plt>
   18c24:	str	wzr, [sp, #360]
   18c28:	b	18e80 <mpc_tan@@Base+0x354>
   18c2c:	ldr	x0, [sp, #56]
   18c30:	bl	4b10 <mpfr_set_nan@plt>
   18c34:	ldr	x0, [sp, #56]
   18c38:	add	x0, x0, #0x20
   18c3c:	bl	4b10 <mpfr_set_nan@plt>
   18c40:	str	wzr, [sp, #360]
   18c44:	b	18e80 <mpc_tan@@Base+0x354>
   18c48:	ldr	x0, [sp, #48]
   18c4c:	ldr	x1, [x0, #16]
   18c50:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   18c54:	cmp	x1, x0
   18c58:	b.ne	18d68 <mpc_tan@@Base+0x23c>  // b.any
   18c5c:	ldr	x0, [sp, #48]
   18c60:	ldr	x1, [x0, #48]
   18c64:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   18c68:	cmp	x1, x0
   18c6c:	b.ne	18d4c <mpc_tan@@Base+0x220>  // b.any
   18c70:	ldr	x0, [sp, #48]
   18c74:	ldr	w0, [x0, #8]
   18c78:	lsr	w0, w0, #31
   18c7c:	and	w0, w0, #0xff
   18c80:	str	w0, [sp, #280]
   18c84:	ldr	x0, [sp, #56]
   18c88:	str	x0, [sp, #272]
   18c8c:	ldr	x0, [sp, #272]
   18c90:	mov	w1, #0x1                   	// #1
   18c94:	str	w1, [x0, #8]
   18c98:	ldr	x0, [sp, #272]
   18c9c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   18ca0:	str	x1, [x0, #16]
   18ca4:	ldr	x4, [sp, #56]
   18ca8:	ldr	x1, [sp, #56]
   18cac:	ldr	w0, [sp, #280]
   18cb0:	cmp	w0, #0x0
   18cb4:	b.eq	18cc0 <mpc_tan@@Base+0x194>  // b.none
   18cb8:	mov	w0, #0xffffffff            	// #-1
   18cbc:	b	18cc4 <mpc_tan@@Base+0x198>
   18cc0:	mov	w0, #0x1                   	// #1
   18cc4:	mov	w3, w0
   18cc8:	mov	w2, #0x0                   	// #0
   18ccc:	mov	x0, x4
   18cd0:	bl	52d0 <mpfr_set4@plt>
   18cd4:	ldr	x0, [sp, #56]
   18cd8:	add	x4, x0, #0x20
   18cdc:	ldr	x0, [sp, #48]
   18ce0:	ldr	w0, [x0, #40]
   18ce4:	cmp	w0, #0x0
   18ce8:	b.ge	18cf4 <mpc_tan@@Base+0x1c8>  // b.tcont
   18cec:	mov	x0, #0xffffffffffffffff    	// #-1
   18cf0:	b	18cf8 <mpc_tan@@Base+0x1cc>
   18cf4:	mov	x0, #0x1                   	// #1
   18cf8:	ldr	w1, [sp, #44]
   18cfc:	asr	w1, w1, #4
   18d00:	mov	w3, w1
   18d04:	mov	x2, #0x0                   	// #0
   18d08:	mov	x1, x0
   18d0c:	mov	x0, x4
   18d10:	bl	4ab0 <mpfr_set_si_2exp@plt>
   18d14:	str	w0, [sp, #268]
   18d18:	ldr	w0, [sp, #268]
   18d1c:	cmp	w0, #0x0
   18d20:	b.lt	18d40 <mpc_tan@@Base+0x214>  // b.tstop
   18d24:	ldr	w0, [sp, #268]
   18d28:	cmp	w0, #0x0
   18d2c:	b.eq	18d38 <mpc_tan@@Base+0x20c>  // b.none
   18d30:	mov	w0, #0x4                   	// #4
   18d34:	b	18d44 <mpc_tan@@Base+0x218>
   18d38:	mov	w0, #0x0                   	// #0
   18d3c:	b	18d44 <mpc_tan@@Base+0x218>
   18d40:	mov	w0, #0x8                   	// #8
   18d44:	str	w0, [sp, #360]
   18d48:	b	18e80 <mpc_tan@@Base+0x354>
   18d4c:	ldr	x0, [sp, #56]
   18d50:	bl	4b10 <mpfr_set_nan@plt>
   18d54:	ldr	x0, [sp, #56]
   18d58:	add	x0, x0, #0x20
   18d5c:	bl	4b10 <mpfr_set_nan@plt>
   18d60:	str	wzr, [sp, #360]
   18d64:	b	18e80 <mpc_tan@@Base+0x354>
   18d68:	add	x0, sp, #0x48
   18d6c:	bl	4b70 <mpfr_init@plt>
   18d70:	add	x0, sp, #0x68
   18d74:	bl	4b70 <mpfr_init@plt>
   18d78:	ldr	x2, [sp, #48]
   18d7c:	add	x1, sp, #0x48
   18d80:	add	x0, sp, #0x68
   18d84:	mov	w3, #0x0                   	// #0
   18d88:	bl	5620 <mpfr_sin_cos@plt>
   18d8c:	ldr	x0, [sp, #56]
   18d90:	str	x0, [sp, #288]
   18d94:	ldr	x0, [sp, #288]
   18d98:	mov	w1, #0x1                   	// #1
   18d9c:	str	w1, [x0, #8]
   18da0:	ldr	x0, [sp, #288]
   18da4:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   18da8:	str	x1, [x0, #16]
   18dac:	ldr	x4, [sp, #56]
   18db0:	ldr	x5, [sp, #56]
   18db4:	ldr	w0, [sp, #80]
   18db8:	lsr	w0, w0, #31
   18dbc:	and	w1, w0, #0xff
   18dc0:	ldr	w0, [sp, #112]
   18dc4:	lsr	w0, w0, #31
   18dc8:	and	w0, w0, #0xff
   18dcc:	eor	w0, w1, w0
   18dd0:	and	w0, w0, #0xff
   18dd4:	cmp	w0, #0x0
   18dd8:	b.eq	18de4 <mpc_tan@@Base+0x2b8>  // b.none
   18ddc:	mov	w0, #0xffffffff            	// #-1
   18de0:	b	18de8 <mpc_tan@@Base+0x2bc>
   18de4:	mov	w0, #0x1                   	// #1
   18de8:	mov	w3, w0
   18dec:	mov	w2, #0x0                   	// #0
   18df0:	mov	x1, x5
   18df4:	mov	x0, x4
   18df8:	bl	52d0 <mpfr_set4@plt>
   18dfc:	ldr	x0, [sp, #56]
   18e00:	add	x4, x0, #0x20
   18e04:	ldr	x0, [sp, #48]
   18e08:	ldr	w0, [x0, #40]
   18e0c:	cmp	w0, #0x0
   18e10:	b.ge	18e1c <mpc_tan@@Base+0x2f0>  // b.tcont
   18e14:	mov	x0, #0xffffffffffffffff    	// #-1
   18e18:	b	18e20 <mpc_tan@@Base+0x2f4>
   18e1c:	mov	x0, #0x1                   	// #1
   18e20:	ldr	w1, [sp, #44]
   18e24:	asr	w1, w1, #4
   18e28:	mov	w3, w1
   18e2c:	mov	x2, #0x0                   	// #0
   18e30:	mov	x1, x0
   18e34:	mov	x0, x4
   18e38:	bl	4ab0 <mpfr_set_si_2exp@plt>
   18e3c:	str	w0, [sp, #284]
   18e40:	ldr	w0, [sp, #284]
   18e44:	cmp	w0, #0x0
   18e48:	b.lt	18e68 <mpc_tan@@Base+0x33c>  // b.tstop
   18e4c:	ldr	w0, [sp, #284]
   18e50:	cmp	w0, #0x0
   18e54:	b.eq	18e60 <mpc_tan@@Base+0x334>  // b.none
   18e58:	mov	w0, #0x4                   	// #4
   18e5c:	b	18e6c <mpc_tan@@Base+0x340>
   18e60:	mov	w0, #0x0                   	// #0
   18e64:	b	18e6c <mpc_tan@@Base+0x340>
   18e68:	mov	w0, #0x8                   	// #8
   18e6c:	str	w0, [sp, #360]
   18e70:	add	x0, sp, #0x68
   18e74:	bl	4e30 <mpfr_clear@plt>
   18e78:	add	x0, sp, #0x48
   18e7c:	bl	4e30 <mpfr_clear@plt>
   18e80:	ldr	w0, [sp, #360]
   18e84:	b	197f8 <mpc_tan@@Base+0xccc>
   18e88:	ldr	x0, [sp, #48]
   18e8c:	ldr	x1, [x0, #16]
   18e90:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   18e94:	cmp	x1, x0
   18e98:	b.ne	18f18 <mpc_tan@@Base+0x3ec>  // b.any
   18e9c:	ldr	x4, [sp, #56]
   18ea0:	ldr	x1, [sp, #48]
   18ea4:	ldr	w0, [sp, #44]
   18ea8:	and	w2, w0, #0xf
   18eac:	ldr	x0, [sp, #48]
   18eb0:	ldr	w0, [x0, #8]
   18eb4:	mov	w3, w0
   18eb8:	mov	x0, x4
   18ebc:	bl	52d0 <mpfr_set4@plt>
   18ec0:	ldr	x0, [sp, #56]
   18ec4:	add	x3, x0, #0x20
   18ec8:	ldr	x0, [sp, #48]
   18ecc:	add	x1, x0, #0x20
   18ed0:	ldr	w0, [sp, #44]
   18ed4:	asr	w0, w0, #4
   18ed8:	mov	w2, w0
   18edc:	mov	x0, x3
   18ee0:	bl	4b00 <mpfr_tanh@plt>
   18ee4:	str	w0, [sp, #296]
   18ee8:	ldr	w0, [sp, #296]
   18eec:	cmp	w0, #0x0
   18ef0:	b.lt	18f10 <mpc_tan@@Base+0x3e4>  // b.tstop
   18ef4:	ldr	w0, [sp, #296]
   18ef8:	cmp	w0, #0x0
   18efc:	b.eq	18f08 <mpc_tan@@Base+0x3dc>  // b.none
   18f00:	mov	w0, #0x4                   	// #4
   18f04:	b	197f8 <mpc_tan@@Base+0xccc>
   18f08:	mov	w0, #0x0                   	// #0
   18f0c:	b	197f8 <mpc_tan@@Base+0xccc>
   18f10:	mov	w0, #0x8                   	// #8
   18f14:	b	197f8 <mpc_tan@@Base+0xccc>
   18f18:	ldr	x0, [sp, #48]
   18f1c:	ldr	x1, [x0, #48]
   18f20:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   18f24:	cmp	x1, x0
   18f28:	b.ne	18fa0 <mpc_tan@@Base+0x474>  // b.any
   18f2c:	ldr	x3, [sp, #56]
   18f30:	ldr	x1, [sp, #48]
   18f34:	ldr	w0, [sp, #44]
   18f38:	and	w0, w0, #0xf
   18f3c:	mov	w2, w0
   18f40:	mov	x0, x3
   18f44:	bl	4b80 <mpfr_tan@plt>
   18f48:	str	w0, [sp, #300]
   18f4c:	ldr	x0, [sp, #56]
   18f50:	add	x4, x0, #0x20
   18f54:	ldr	x0, [sp, #48]
   18f58:	add	x1, x0, #0x20
   18f5c:	ldr	w0, [sp, #44]
   18f60:	asr	w2, w0, #4
   18f64:	ldr	x0, [sp, #48]
   18f68:	ldr	w0, [x0, #40]
   18f6c:	mov	w3, w0
   18f70:	mov	x0, x4
   18f74:	bl	52d0 <mpfr_set4@plt>
   18f78:	ldr	w0, [sp, #300]
   18f7c:	cmp	w0, #0x0
   18f80:	b.lt	18f98 <mpc_tan@@Base+0x46c>  // b.tstop
   18f84:	ldr	w0, [sp, #300]
   18f88:	cmp	w0, #0x0
   18f8c:	cset	w0, ne  // ne = any
   18f90:	and	w0, w0, #0xff
   18f94:	b	197f8 <mpc_tan@@Base+0xccc>
   18f98:	mov	w0, #0x2                   	// #2
   18f9c:	b	197f8 <mpc_tan@@Base+0xccc>
   18fa0:	ldr	x0, [sp, #56]
   18fa4:	ldr	x1, [x0, #32]
   18fa8:	ldr	x0, [sp, #56]
   18fac:	ldr	x0, [x0]
   18fb0:	cmp	x1, x0
   18fb4:	csel	x0, x1, x0, ge  // ge = tcont
   18fb8:	str	x0, [sp, #376]
   18fbc:	add	x0, sp, #0xc8
   18fc0:	mov	x1, #0x2                   	// #2
   18fc4:	bl	4db0 <mpc_init2@plt>
   18fc8:	add	x0, sp, #0x88
   18fcc:	mov	x1, #0x2                   	// #2
   18fd0:	bl	4db0 <mpc_init2@plt>
   18fd4:	mov	x0, #0x7                   	// #7
   18fd8:	str	x0, [sp, #368]
   18fdc:	str	wzr, [sp, #364]
   18fe0:	ldr	x0, [sp, #376]
   18fe4:	bl	4de0 <mpc_ceil_log2@plt>
   18fe8:	mov	x1, x0
   18fec:	ldr	x0, [sp, #368]
   18ff0:	add	x0, x1, x0
   18ff4:	ldr	x1, [sp, #376]
   18ff8:	add	x0, x1, x0
   18ffc:	str	x0, [sp, #376]
   19000:	add	x0, sp, #0xc8
   19004:	ldr	x1, [sp, #376]
   19008:	bl	4cd0 <mpc_set_prec@plt>
   1900c:	add	x0, sp, #0x88
   19010:	ldr	x1, [sp, #376]
   19014:	bl	4cd0 <mpc_set_prec@plt>
   19018:	add	x1, sp, #0x88
   1901c:	add	x0, sp, #0xc8
   19020:	mov	w4, #0x11                  	// #17
   19024:	mov	w3, #0x11                  	// #17
   19028:	ldr	x2, [sp, #48]
   1902c:	bl	5240 <mpc_sin_cos@plt>
   19030:	ldr	x1, [sp, #216]
   19034:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   19038:	cmp	x1, x0
   1903c:	b.ge	19060 <mpc_tan@@Base+0x534>  // b.tcont
   19040:	ldr	x1, [sp, #216]
   19044:	mov	x0, #0x2                   	// #2
   19048:	movk	x0, #0x8000, lsl #48
   1904c:	cmp	x1, x0
   19050:	b.ne	19058 <mpc_tan@@Base+0x52c>  // b.any
   19054:	bl	4bd0 <mpfr_set_erangeflag@plt>
   19058:	mov	w0, #0x0                   	// #0
   1905c:	b	19070 <mpc_tan@@Base+0x544>
   19060:	ldr	w0, [sp, #208]
   19064:	cmp	w0, #0x0
   19068:	cset	w0, gt
   1906c:	and	w0, w0, #0xff
   19070:	cmp	w0, #0x0
   19074:	b.eq	19084 <mpc_tan@@Base+0x558>  // b.none
   19078:	add	x0, sp, #0xc8
   1907c:	bl	4ee0 <mpfr_nextabove@plt>
   19080:	b	1908c <mpc_tan@@Base+0x560>
   19084:	add	x0, sp, #0xc8
   19088:	bl	4c80 <mpfr_nextbelow@plt>
   1908c:	ldr	x1, [sp, #248]
   19090:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   19094:	cmp	x1, x0
   19098:	b.ge	190bc <mpc_tan@@Base+0x590>  // b.tcont
   1909c:	ldr	x1, [sp, #248]
   190a0:	mov	x0, #0x2                   	// #2
   190a4:	movk	x0, #0x8000, lsl #48
   190a8:	cmp	x1, x0
   190ac:	b.ne	190b4 <mpc_tan@@Base+0x588>  // b.any
   190b0:	bl	4bd0 <mpfr_set_erangeflag@plt>
   190b4:	mov	w0, #0x0                   	// #0
   190b8:	b	190cc <mpc_tan@@Base+0x5a0>
   190bc:	ldr	w0, [sp, #240]
   190c0:	cmp	w0, #0x0
   190c4:	cset	w0, gt
   190c8:	and	w0, w0, #0xff
   190cc:	cmp	w0, #0x0
   190d0:	b.eq	190e4 <mpc_tan@@Base+0x5b8>  // b.none
   190d4:	add	x0, sp, #0xc8
   190d8:	add	x0, x0, #0x20
   190dc:	bl	4ee0 <mpfr_nextabove@plt>
   190e0:	b	190f0 <mpc_tan@@Base+0x5c4>
   190e4:	add	x0, sp, #0xc8
   190e8:	add	x0, x0, #0x20
   190ec:	bl	4c80 <mpfr_nextbelow@plt>
   190f0:	ldr	x1, [sp, #152]
   190f4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   190f8:	cmp	x1, x0
   190fc:	b.ge	19120 <mpc_tan@@Base+0x5f4>  // b.tcont
   19100:	ldr	x1, [sp, #152]
   19104:	mov	x0, #0x2                   	// #2
   19108:	movk	x0, #0x8000, lsl #48
   1910c:	cmp	x1, x0
   19110:	b.ne	19118 <mpc_tan@@Base+0x5ec>  // b.any
   19114:	bl	4bd0 <mpfr_set_erangeflag@plt>
   19118:	mov	w0, #0x0                   	// #0
   1911c:	b	19130 <mpc_tan@@Base+0x604>
   19120:	ldr	w0, [sp, #144]
   19124:	cmp	w0, #0x0
   19128:	cset	w0, gt
   1912c:	and	w0, w0, #0xff
   19130:	cmp	w0, #0x0
   19134:	b.eq	19144 <mpc_tan@@Base+0x618>  // b.none
   19138:	add	x0, sp, #0x88
   1913c:	bl	4ee0 <mpfr_nextabove@plt>
   19140:	b	1914c <mpc_tan@@Base+0x620>
   19144:	add	x0, sp, #0x88
   19148:	bl	4c80 <mpfr_nextbelow@plt>
   1914c:	ldr	x1, [sp, #184]
   19150:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   19154:	cmp	x1, x0
   19158:	b.ge	1917c <mpc_tan@@Base+0x650>  // b.tcont
   1915c:	ldr	x1, [sp, #184]
   19160:	mov	x0, #0x2                   	// #2
   19164:	movk	x0, #0x8000, lsl #48
   19168:	cmp	x1, x0
   1916c:	b.ne	19174 <mpc_tan@@Base+0x648>  // b.any
   19170:	bl	4bd0 <mpfr_set_erangeflag@plt>
   19174:	mov	w0, #0x0                   	// #0
   19178:	b	1918c <mpc_tan@@Base+0x660>
   1917c:	ldr	w0, [sp, #176]
   19180:	cmp	w0, #0x0
   19184:	cset	w0, gt
   19188:	and	w0, w0, #0xff
   1918c:	cmp	w0, #0x0
   19190:	b.eq	191a4 <mpc_tan@@Base+0x678>  // b.none
   19194:	add	x0, sp, #0x88
   19198:	add	x0, x0, #0x20
   1919c:	bl	4ee0 <mpfr_nextabove@plt>
   191a0:	b	191b0 <mpc_tan@@Base+0x684>
   191a4:	add	x0, sp, #0x88
   191a8:	add	x0, x0, #0x20
   191ac:	bl	4c80 <mpfr_nextbelow@plt>
   191b0:	ldr	x1, [sp, #216]
   191b4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   191b8:	cmp	x1, x0
   191bc:	b.ne	191f4 <mpc_tan@@Base+0x6c8>  // b.any
   191c0:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   191c4:	ldr	x0, [x0, #4008]
   191c8:	ldr	x5, [x0]
   191cc:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   191d0:	add	x4, x0, #0x388
   191d4:	mov	w3, #0xc9                  	// #201
   191d8:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   191dc:	add	x2, x0, #0x3b0
   191e0:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   191e4:	add	x1, x0, #0x3b8
   191e8:	mov	x0, x5
   191ec:	bl	56a0 <fprintf@plt>
   191f0:	bl	5100 <abort@plt>
   191f4:	ldr	x1, [sp, #216]
   191f8:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   191fc:	cmp	x1, x0
   19200:	b.eq	19234 <mpc_tan@@Base+0x708>  // b.none
   19204:	ldr	x1, [sp, #248]
   19208:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1920c:	cmp	x1, x0
   19210:	b.eq	19234 <mpc_tan@@Base+0x708>  // b.none
   19214:	ldr	x1, [sp, #152]
   19218:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1921c:	cmp	x1, x0
   19220:	b.eq	19234 <mpc_tan@@Base+0x708>  // b.none
   19224:	ldr	x1, [sp, #184]
   19228:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1922c:	cmp	x1, x0
   19230:	b.ne	194c0 <mpc_tan@@Base+0x994>  // b.any
   19234:	ldr	x0, [sp, #56]
   19238:	str	x0, [sp, #304]
   1923c:	ldr	x0, [sp, #304]
   19240:	mov	w1, #0x1                   	// #1
   19244:	str	w1, [x0, #8]
   19248:	ldr	x0, [sp, #304]
   1924c:	mov	x1, #0x8000000000000001    	// #-9223372036854775807
   19250:	str	x1, [x0, #16]
   19254:	ldr	x1, [sp, #216]
   19258:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   1925c:	cmp	x1, x0
   19260:	b.ge	19284 <mpc_tan@@Base+0x758>  // b.tcont
   19264:	ldr	x1, [sp, #216]
   19268:	mov	x0, #0x2                   	// #2
   1926c:	movk	x0, #0x8000, lsl #48
   19270:	cmp	x1, x0
   19274:	b.ne	1927c <mpc_tan@@Base+0x750>  // b.any
   19278:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1927c:	mov	w19, #0x0                   	// #0
   19280:	b	19288 <mpc_tan@@Base+0x75c>
   19284:	ldr	w19, [sp, #208]
   19288:	ldr	x1, [sp, #152]
   1928c:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   19290:	cmp	x1, x0
   19294:	b.ge	192b8 <mpc_tan@@Base+0x78c>  // b.tcont
   19298:	ldr	x1, [sp, #152]
   1929c:	mov	x0, #0x2                   	// #2
   192a0:	movk	x0, #0x8000, lsl #48
   192a4:	cmp	x1, x0
   192a8:	b.ne	192b0 <mpc_tan@@Base+0x784>  // b.any
   192ac:	bl	4bd0 <mpfr_set_erangeflag@plt>
   192b0:	mov	w0, #0x0                   	// #0
   192b4:	b	192bc <mpc_tan@@Base+0x790>
   192b8:	ldr	w0, [sp, #144]
   192bc:	mul	w0, w19, w0
   192c0:	cmp	w0, #0x0
   192c4:	b.ge	192e4 <mpc_tan@@Base+0x7b8>  // b.tcont
   192c8:	ldr	x0, [sp, #56]
   192cc:	ldr	x1, [sp, #56]
   192d0:	mov	w2, #0x0                   	// #0
   192d4:	bl	4c50 <mpfr_neg@plt>
   192d8:	mov	w0, #0x1                   	// #1
   192dc:	str	w0, [sp, #356]
   192e0:	b	192ec <mpc_tan@@Base+0x7c0>
   192e4:	mov	w0, #0xffffffff            	// #-1
   192e8:	str	w0, [sp, #356]
   192ec:	ldr	x0, [sp, #48]
   192f0:	ldr	x1, [x0, #48]
   192f4:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   192f8:	cmp	x1, x0
   192fc:	b.ge	19324 <mpc_tan@@Base+0x7f8>  // b.tcont
   19300:	ldr	x0, [sp, #48]
   19304:	ldr	x1, [x0, #48]
   19308:	mov	x0, #0x2                   	// #2
   1930c:	movk	x0, #0x8000, lsl #48
   19310:	cmp	x1, x0
   19314:	b.ne	1931c <mpc_tan@@Base+0x7f0>  // b.any
   19318:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1931c:	mov	w0, #0x0                   	// #0
   19320:	b	19338 <mpc_tan@@Base+0x80c>
   19324:	ldr	x0, [sp, #48]
   19328:	ldr	w0, [x0, #40]
   1932c:	cmp	w0, #0x0
   19330:	cset	w0, gt
   19334:	and	w0, w0, #0xff
   19338:	cmp	w0, #0x0
   1933c:	b.eq	19364 <mpc_tan@@Base+0x838>  // b.none
   19340:	ldr	x0, [sp, #56]
   19344:	add	x0, x0, #0x20
   19348:	mov	w3, #0x0                   	// #0
   1934c:	mov	x2, #0x0                   	// #0
   19350:	mov	x1, #0x1                   	// #1
   19354:	bl	5230 <mpfr_set_ui_2exp@plt>
   19358:	mov	w0, #0x1                   	// #1
   1935c:	str	w0, [sp, #352]
   19360:	b	19384 <mpc_tan@@Base+0x858>
   19364:	ldr	x0, [sp, #56]
   19368:	add	x0, x0, #0x20
   1936c:	mov	w3, #0x0                   	// #0
   19370:	mov	x2, #0x0                   	// #0
   19374:	mov	x1, #0xffffffffffffffff    	// #-1
   19378:	bl	4ab0 <mpfr_set_si_2exp@plt>
   1937c:	mov	w0, #0xffffffff            	// #-1
   19380:	str	w0, [sp, #352]
   19384:	ldr	w0, [sp, #44]
   19388:	asr	w0, w0, #4
   1938c:	cmp	w0, #0x1
   19390:	b.eq	193e0 <mpc_tan@@Base+0x8b4>  // b.none
   19394:	ldr	x0, [sp, #56]
   19398:	ldr	w0, [x0, #40]
   1939c:	lsr	w0, w0, #31
   193a0:	and	w0, w0, #0x1
   193a4:	and	w0, w0, #0xff
   193a8:	cmp	w0, #0x0
   193ac:	b.eq	193c0 <mpc_tan@@Base+0x894>  // b.none
   193b0:	ldr	w0, [sp, #44]
   193b4:	asr	w0, w0, #4
   193b8:	cmp	w0, #0x2
   193bc:	b.eq	193e0 <mpc_tan@@Base+0x8b4>  // b.none
   193c0:	ldr	x0, [sp, #56]
   193c4:	ldr	w0, [x0, #40]
   193c8:	cmp	w0, #0x0
   193cc:	b.lt	193fc <mpc_tan@@Base+0x8d0>  // b.tstop
   193d0:	ldr	w0, [sp, #44]
   193d4:	asr	w0, w0, #4
   193d8:	cmp	w0, #0x3
   193dc:	b.ne	193fc <mpc_tan@@Base+0x8d0>  // b.any
   193e0:	ldr	x0, [sp, #56]
   193e4:	add	x0, x0, #0x20
   193e8:	ldr	x1, [sp, #56]
   193ec:	bl	52c0 <mpfr_nexttoward@plt>
   193f0:	ldr	w0, [sp, #352]
   193f4:	neg	w0, w0
   193f8:	str	w0, [sp, #352]
   193fc:	ldr	x0, [sp, #56]
   19400:	ldr	x1, [x0, #16]
   19404:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   19408:	cmp	x1, x0
   1940c:	b.ne	1942c <mpc_tan@@Base+0x900>  // b.any
   19410:	ldr	x2, [sp, #56]
   19414:	ldr	w0, [sp, #44]
   19418:	and	w0, w0, #0xf
   1941c:	mov	w1, w0
   19420:	mov	x0, x2
   19424:	bl	51d0 <mpc_fix_zero@plt>
   19428:	str	w0, [sp, #356]
   1942c:	ldr	x0, [sp, #56]
   19430:	ldr	x1, [x0, #48]
   19434:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   19438:	cmp	x1, x0
   1943c:	b.ne	19460 <mpc_tan@@Base+0x934>  // b.any
   19440:	ldr	x0, [sp, #56]
   19444:	add	x2, x0, #0x20
   19448:	ldr	w0, [sp, #44]
   1944c:	asr	w0, w0, #4
   19450:	mov	w1, w0
   19454:	mov	x0, x2
   19458:	bl	51d0 <mpc_fix_zero@plt>
   1945c:	str	w0, [sp, #352]
   19460:	ldr	w0, [sp, #356]
   19464:	cmp	w0, #0x0
   19468:	b.lt	19484 <mpc_tan@@Base+0x958>  // b.tstop
   1946c:	ldr	w0, [sp, #356]
   19470:	cmp	w0, #0x0
   19474:	cset	w0, ne  // ne = any
   19478:	and	w0, w0, #0xff
   1947c:	mov	w1, w0
   19480:	b	19488 <mpc_tan@@Base+0x95c>
   19484:	mov	w1, #0x2                   	// #2
   19488:	ldr	w0, [sp, #352]
   1948c:	cmp	w0, #0x0
   19490:	b.lt	194b0 <mpc_tan@@Base+0x984>  // b.tstop
   19494:	ldr	w0, [sp, #352]
   19498:	cmp	w0, #0x0
   1949c:	b.eq	194a8 <mpc_tan@@Base+0x97c>  // b.none
   194a0:	mov	w0, #0x4                   	// #4
   194a4:	b	194b4 <mpc_tan@@Base+0x988>
   194a8:	mov	w0, #0x0                   	// #0
   194ac:	b	194b4 <mpc_tan@@Base+0x988>
   194b0:	mov	w0, #0x8                   	// #8
   194b4:	orr	w0, w1, w0
   194b8:	str	w0, [sp, #360]
   194bc:	b	197e4 <mpc_tan@@Base+0xcb8>
   194c0:	ldr	x0, [sp, #216]
   194c4:	str	x0, [sp, #344]
   194c8:	ldr	x0, [sp, #152]
   194cc:	str	x0, [sp, #336]
   194d0:	ldr	x0, [sp, #184]
   194d4:	str	x0, [sp, #328]
   194d8:	add	x2, sp, #0x88
   194dc:	add	x1, sp, #0xc8
   194e0:	add	x0, sp, #0xc8
   194e4:	mov	w3, #0x11                  	// #17
   194e8:	bl	5350 <mpc_div@plt>
   194ec:	str	w0, [sp, #360]
   194f0:	ldr	x1, [sp, #216]
   194f4:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   194f8:	cmp	x1, x0
   194fc:	b.eq	19510 <mpc_tan@@Base+0x9e4>  // b.none
   19500:	ldr	x1, [sp, #248]
   19504:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   19508:	cmp	x1, x0
   1950c:	b.ne	1951c <mpc_tan@@Base+0x9f0>  // b.any
   19510:	ldr	x0, [sp, #376]
   19514:	str	x0, [sp, #368]
   19518:	b	197c0 <mpc_tan@@Base+0xc94>
   1951c:	ldr	w0, [sp, #360]
   19520:	and	w0, w0, #0x3
   19524:	cmp	w0, #0x2
   19528:	b.eq	1953c <mpc_tan@@Base+0xa10>  // b.none
   1952c:	ldr	w0, [sp, #360]
   19530:	and	w0, w0, #0x3
   19534:	cmp	w0, #0x0
   19538:	b.eq	19598 <mpc_tan@@Base+0xa6c>  // b.none
   1953c:	ldr	x1, [sp, #216]
   19540:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   19544:	cmp	x1, x0
   19548:	b.ge	1956c <mpc_tan@@Base+0xa40>  // b.tcont
   1954c:	ldr	x1, [sp, #216]
   19550:	mov	x0, #0x2                   	// #2
   19554:	movk	x0, #0x8000, lsl #48
   19558:	cmp	x1, x0
   1955c:	b.ne	19564 <mpc_tan@@Base+0xa38>  // b.any
   19560:	bl	4bd0 <mpfr_set_erangeflag@plt>
   19564:	mov	w0, #0x0                   	// #0
   19568:	b	1957c <mpc_tan@@Base+0xa50>
   1956c:	ldr	w0, [sp, #208]
   19570:	cmp	w0, #0x0
   19574:	cset	w0, gt
   19578:	and	w0, w0, #0xff
   1957c:	cmp	w0, #0x0
   19580:	b.eq	19590 <mpc_tan@@Base+0xa64>  // b.none
   19584:	add	x0, sp, #0xc8
   19588:	bl	4ee0 <mpfr_nextabove@plt>
   1958c:	b	19598 <mpc_tan@@Base+0xa6c>
   19590:	add	x0, sp, #0xc8
   19594:	bl	4c80 <mpfr_nextbelow@plt>
   19598:	ldr	w0, [sp, #360]
   1959c:	asr	w0, w0, #2
   195a0:	cmp	w0, #0x2
   195a4:	b.eq	195b8 <mpc_tan@@Base+0xa8c>  // b.none
   195a8:	ldr	w0, [sp, #360]
   195ac:	asr	w0, w0, #2
   195b0:	cmp	w0, #0x0
   195b4:	b.eq	1961c <mpc_tan@@Base+0xaf0>  // b.none
   195b8:	ldr	x1, [sp, #248]
   195bc:	mov	x0, #0x8000000000000003    	// #-9223372036854775805
   195c0:	cmp	x1, x0
   195c4:	b.ge	195e8 <mpc_tan@@Base+0xabc>  // b.tcont
   195c8:	ldr	x1, [sp, #248]
   195cc:	mov	x0, #0x2                   	// #2
   195d0:	movk	x0, #0x8000, lsl #48
   195d4:	cmp	x1, x0
   195d8:	b.ne	195e0 <mpc_tan@@Base+0xab4>  // b.any
   195dc:	bl	4bd0 <mpfr_set_erangeflag@plt>
   195e0:	mov	w0, #0x0                   	// #0
   195e4:	b	195f8 <mpc_tan@@Base+0xacc>
   195e8:	ldr	w0, [sp, #240]
   195ec:	cmp	w0, #0x0
   195f0:	cset	w0, gt
   195f4:	and	w0, w0, #0xff
   195f8:	cmp	w0, #0x0
   195fc:	b.eq	19610 <mpc_tan@@Base+0xae4>  // b.none
   19600:	add	x0, sp, #0xc8
   19604:	add	x0, x0, #0x20
   19608:	bl	4ee0 <mpfr_nextabove@plt>
   1960c:	b	1961c <mpc_tan@@Base+0xaf0>
   19610:	add	x0, sp, #0xc8
   19614:	add	x0, x0, #0x20
   19618:	bl	4c80 <mpfr_nextbelow@plt>
   1961c:	ldr	x1, [sp, #216]
   19620:	mov	x0, #0x8000000000000001    	// #-9223372036854775807
   19624:	cmp	x1, x0
   19628:	b.ne	19660 <mpc_tan@@Base+0xb34>  // b.any
   1962c:	adrp	x0, 2c000 <mpc_ui_ui_sub@@Base+0x125c4>
   19630:	ldr	x0, [x0, #4008]
   19634:	ldr	x5, [x0]
   19638:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   1963c:	add	x4, x0, #0x388
   19640:	mov	w3, #0x107                 	// #263
   19644:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   19648:	add	x2, x0, #0x3b0
   1964c:	adrp	x0, 1b000 <mpc_ui_ui_sub@@Base+0x15c4>
   19650:	add	x1, x0, #0x3b8
   19654:	mov	x0, x5
   19658:	bl	56a0 <fprintf@plt>
   1965c:	bl	5100 <abort@plt>
   19660:	ldr	x0, [sp, #216]
   19664:	str	x0, [sp, #320]
   19668:	ldr	x1, [sp, #344]
   1966c:	ldr	x0, [sp, #320]
   19670:	sub	x2, x1, x0
   19674:	ldr	x0, [sp, #328]
   19678:	lsl	x0, x0, #1
   1967c:	ldr	x1, [sp, #336]
   19680:	sub	x1, x1, x0
   19684:	ldr	x0, [sp, #336]
   19688:	neg	x0, x0
   1968c:	cmp	x1, x0
   19690:	csel	x0, x1, x0, ge  // ge = tcont
   19694:	add	x0, x2, x0
   19698:	str	x0, [sp, #312]
   1969c:	ldr	x0, [sp, #312]
   196a0:	cmp	x0, #0x1
   196a4:	b.le	196c8 <mpc_tan@@Base+0xb9c>
   196a8:	ldr	x0, [sp, #312]
   196ac:	cmp	x0, #0x2
   196b0:	b.eq	196c0 <mpc_tan@@Base+0xb94>  // b.none
   196b4:	ldr	x0, [sp, #312]
   196b8:	add	x0, x0, #0x5
   196bc:	b	196cc <mpc_tan@@Base+0xba0>
   196c0:	mov	x0, #0x8                   	// #8
   196c4:	b	196cc <mpc_tan@@Base+0xba0>
   196c8:	mov	x0, #0x7                   	// #7
   196cc:	str	x0, [sp, #368]
   196d0:	add	x0, sp, #0xc8
   196d4:	bl	55c0 <mpfr_number_p@plt>
   196d8:	cmp	w0, #0x0
   196dc:	b.eq	19730 <mpc_tan@@Base+0xc04>  // b.none
   196e0:	ldr	x1, [sp, #376]
   196e4:	ldr	x0, [sp, #368]
   196e8:	sub	x5, x1, x0
   196ec:	ldr	x0, [sp, #56]
   196f0:	ldr	x1, [x0]
   196f4:	ldr	w0, [sp, #44]
   196f8:	and	w0, w0, #0xf
   196fc:	cmp	w0, #0x0
   19700:	cset	w0, eq  // eq = none
   19704:	and	w0, w0, #0xff
   19708:	and	x0, x0, #0xff
   1970c:	add	x1, x1, x0
   19710:	add	x0, sp, #0xc8
   19714:	mov	x4, x1
   19718:	mov	w3, #0x1                   	// #1
   1971c:	mov	w2, #0x0                   	// #0
   19720:	mov	x1, x5
   19724:	bl	5540 <mpfr_can_round@plt>
   19728:	cmp	w0, #0x0
   1972c:	b.eq	19738 <mpc_tan@@Base+0xc0c>  // b.none
   19730:	mov	w0, #0x1                   	// #1
   19734:	b	1973c <mpc_tan@@Base+0xc10>
   19738:	mov	w0, #0x0                   	// #0
   1973c:	str	w0, [sp, #364]
   19740:	ldr	w0, [sp, #364]
   19744:	cmp	w0, #0x0
   19748:	b.eq	197c0 <mpc_tan@@Base+0xc94>  // b.none
   1974c:	add	x0, sp, #0xc8
   19750:	add	x0, x0, #0x20
   19754:	bl	55c0 <mpfr_number_p@plt>
   19758:	cmp	w0, #0x0
   1975c:	b.eq	197b0 <mpc_tan@@Base+0xc84>  // b.none
   19760:	ldr	x0, [sp, #376]
   19764:	sub	x5, x0, #0x6
   19768:	ldr	x0, [sp, #56]
   1976c:	ldr	x1, [x0, #32]
   19770:	ldr	w0, [sp, #44]
   19774:	asr	w0, w0, #4
   19778:	cmp	w0, #0x0
   1977c:	cset	w0, eq  // eq = none
   19780:	and	w0, w0, #0xff
   19784:	and	x0, x0, #0xff
   19788:	add	x1, x1, x0
   1978c:	add	x0, sp, #0xc8
   19790:	add	x0, x0, #0x20
   19794:	mov	x4, x1
   19798:	mov	w3, #0x1                   	// #1
   1979c:	mov	w2, #0x0                   	// #0
   197a0:	mov	x1, x5
   197a4:	bl	5540 <mpfr_can_round@plt>
   197a8:	cmp	w0, #0x0
   197ac:	b.eq	197b8 <mpc_tan@@Base+0xc8c>  // b.none
   197b0:	mov	w0, #0x1                   	// #1
   197b4:	b	197bc <mpc_tan@@Base+0xc90>
   197b8:	mov	w0, #0x0                   	// #0
   197bc:	str	w0, [sp, #364]
   197c0:	ldr	w0, [sp, #364]
   197c4:	cmp	w0, #0x0
   197c8:	b.eq	18fdc <mpc_tan@@Base+0x4b0>  // b.none
   197cc:	add	x0, sp, #0xc8
   197d0:	ldr	w2, [sp, #44]
   197d4:	mov	x1, x0
   197d8:	ldr	x0, [sp, #56]
   197dc:	bl	5680 <mpc_set@plt>
   197e0:	str	w0, [sp, #360]
   197e4:	add	x0, sp, #0xc8
   197e8:	bl	4ae0 <mpc_clear@plt>
   197ec:	add	x0, sp, #0x88
   197f0:	bl	4ae0 <mpc_clear@plt>
   197f4:	ldr	w0, [sp, #360]
   197f8:	ldr	x19, [sp, #16]
   197fc:	ldp	x29, x30, [sp], #384
   19800:	ret

0000000000019804 <mpc_tanh@@Base>:
   19804:	stp	x29, x30, [sp, #-192]!
   19808:	mov	x29, sp
   1980c:	str	x0, [sp, #40]
   19810:	str	x1, [sp, #32]
   19814:	str	w2, [sp, #28]
   19818:	ldr	x0, [sp, #32]
   1981c:	add	x0, x0, #0x20
   19820:	add	x2, sp, #0x78
   19824:	mov	x3, x0
   19828:	ldp	x0, x1, [x3]
   1982c:	stp	x0, x1, [x2]
   19830:	ldp	x0, x1, [x3, #16]
   19834:	stp	x0, x1, [x2, #16]
   19838:	ldr	x0, [sp, #32]
   1983c:	add	x2, sp, #0x98
   19840:	mov	x3, x0
   19844:	ldp	x0, x1, [x3]
   19848:	stp	x0, x1, [x2]
   1984c:	ldp	x0, x1, [x3, #16]
   19850:	stp	x0, x1, [x2, #16]
   19854:	ldr	x0, [sp, #40]
   19858:	add	x0, x0, #0x20
   1985c:	add	x2, sp, #0x38
   19860:	mov	x3, x0
   19864:	ldp	x0, x1, [x3]
   19868:	stp	x0, x1, [x2]
   1986c:	ldp	x0, x1, [x3, #16]
   19870:	stp	x0, x1, [x2, #16]
   19874:	ldr	x0, [sp, #40]
   19878:	add	x2, sp, #0x58
   1987c:	mov	x3, x0
   19880:	ldp	x0, x1, [x3]
   19884:	stp	x0, x1, [x2]
   19888:	ldp	x0, x1, [x3, #16]
   1988c:	stp	x0, x1, [x2, #16]
   19890:	ldr	w0, [sp, #28]
   19894:	asr	w1, w0, #4
   19898:	ldr	w0, [sp, #28]
   1989c:	lsl	w0, w0, #4
   198a0:	and	w0, w0, #0xff
   198a4:	add	w2, w1, w0
   198a8:	add	x1, sp, #0x78
   198ac:	add	x0, sp, #0x38
   198b0:	bl	4cf0 <mpc_tan@plt>
   198b4:	str	w0, [sp, #188]
   198b8:	ldr	x0, [sp, #40]
   198bc:	mov	x3, x0
   198c0:	add	x2, sp, #0x58
   198c4:	ldp	x0, x1, [x2]
   198c8:	stp	x0, x1, [x3]
   198cc:	ldp	x0, x1, [x2, #16]
   198d0:	stp	x0, x1, [x3, #16]
   198d4:	ldr	x0, [sp, #40]
   198d8:	add	x0, x0, #0x20
   198dc:	mov	x3, x0
   198e0:	add	x2, sp, #0x38
   198e4:	ldp	x0, x1, [x2]
   198e8:	stp	x0, x1, [x3]
   198ec:	ldp	x0, x1, [x2, #16]
   198f0:	stp	x0, x1, [x3, #16]
   198f4:	ldr	w0, [sp, #188]
   198f8:	asr	w0, w0, #2
   198fc:	cmp	w0, #0x2
   19900:	b.eq	19934 <mpc_tanh@@Base+0x130>  // b.none
   19904:	ldr	w0, [sp, #188]
   19908:	asr	w0, w0, #2
   1990c:	cmp	w0, #0x2
   19910:	b.eq	19924 <mpc_tanh@@Base+0x120>  // b.none
   19914:	ldr	w0, [sp, #188]
   19918:	asr	w0, w0, #2
   1991c:	cmp	w0, #0x0
   19920:	b.eq	1992c <mpc_tanh@@Base+0x128>  // b.none
   19924:	mov	w0, #0x1                   	// #1
   19928:	b	19938 <mpc_tanh@@Base+0x134>
   1992c:	mov	w0, #0x0                   	// #0
   19930:	b	19938 <mpc_tanh@@Base+0x134>
   19934:	mov	w0, #0x2                   	// #2
   19938:	ldr	w1, [sp, #188]
   1993c:	and	w1, w1, #0x3
   19940:	cmp	w1, #0x2
   19944:	b.eq	1997c <mpc_tanh@@Base+0x178>  // b.none
   19948:	ldr	w1, [sp, #188]
   1994c:	and	w1, w1, #0x3
   19950:	cmp	w1, #0x2
   19954:	b.eq	19968 <mpc_tanh@@Base+0x164>  // b.none
   19958:	ldr	w1, [sp, #188]
   1995c:	and	w1, w1, #0x3
   19960:	cmp	w1, #0x0
   19964:	b.eq	19970 <mpc_tanh@@Base+0x16c>  // b.none
   19968:	mov	w1, #0x1                   	// #1
   1996c:	b	19974 <mpc_tanh@@Base+0x170>
   19970:	mov	w1, #0x0                   	// #0
   19974:	lsl	w1, w1, #2
   19978:	b	19980 <mpc_tanh@@Base+0x17c>
   1997c:	mov	w1, #0x8                   	// #8
   19980:	orr	w0, w0, w1
   19984:	ldp	x29, x30, [sp], #192
   19988:	ret

000000000001998c <mpc_ceil_log2@@Base>:
   1998c:	sub	sp, sp, #0x20
   19990:	str	x0, [sp, #8]
   19994:	str	xzr, [sp, #24]
   19998:	b	199c0 <mpc_ceil_log2@@Base+0x34>
   1999c:	ldr	x0, [sp, #24]
   199a0:	add	x0, x0, #0x1
   199a4:	str	x0, [sp, #24]
   199a8:	ldr	x0, [sp, #8]
   199ac:	add	x0, x0, #0x1
   199b0:	lsr	x1, x0, #63
   199b4:	add	x0, x1, x0
   199b8:	asr	x0, x0, #1
   199bc:	str	x0, [sp, #8]
   199c0:	ldr	x0, [sp, #8]
   199c4:	cmp	x0, #0x1
   199c8:	b.gt	1999c <mpc_ceil_log2@@Base+0x10>
   199cc:	ldr	x0, [sp, #24]
   199d0:	add	sp, sp, #0x20
   199d4:	ret

00000000000199d8 <mpc_ui_div@@Base>:
   199d8:	stp	x29, x30, [sp, #-128]!
   199dc:	mov	x29, sp
   199e0:	str	x0, [sp, #40]
   199e4:	str	x1, [sp, #32]
   199e8:	str	x2, [sp, #24]
   199ec:	str	w3, [sp, #20]
   199f0:	add	x0, sp, #0x38
   199f4:	mov	x1, #0x40                  	// #64
   199f8:	bl	4db0 <mpc_init2@plt>
   199fc:	add	x0, sp, #0x38
   19a00:	ldr	w2, [sp, #20]
   19a04:	ldr	x1, [sp, #32]
   19a08:	bl	4da0 <mpc_set_ui@plt>
   19a0c:	add	x0, sp, #0x38
   19a10:	ldr	w3, [sp, #20]
   19a14:	ldr	x2, [sp, #24]
   19a18:	mov	x1, x0
   19a1c:	ldr	x0, [sp, #40]
   19a20:	bl	5350 <mpc_div@plt>
   19a24:	str	w0, [sp, #124]
   19a28:	add	x0, sp, #0x38
   19a2c:	bl	4ae0 <mpc_clear@plt>
   19a30:	ldr	w0, [sp, #124]
   19a34:	ldp	x29, x30, [sp], #128
   19a38:	ret

0000000000019a3c <mpc_ui_ui_sub@@Base>:
   19a3c:	stp	x29, x30, [sp, #-80]!
   19a40:	mov	x29, sp
   19a44:	str	x0, [sp, #56]
   19a48:	str	x1, [sp, #48]
   19a4c:	str	x2, [sp, #40]
   19a50:	str	x3, [sp, #32]
   19a54:	str	w4, [sp, #28]
   19a58:	ldr	x4, [sp, #56]
   19a5c:	ldr	x1, [sp, #32]
   19a60:	ldr	w0, [sp, #28]
   19a64:	and	w0, w0, #0xf
   19a68:	mov	w3, w0
   19a6c:	mov	x2, x1
   19a70:	ldr	x1, [sp, #48]
   19a74:	mov	x0, x4
   19a78:	bl	5520 <mpfr_ui_sub@plt>
   19a7c:	str	w0, [sp, #76]
   19a80:	ldr	x0, [sp, #56]
   19a84:	add	x4, x0, #0x20
   19a88:	ldr	x0, [sp, #32]
   19a8c:	add	x1, x0, #0x20
   19a90:	ldr	w0, [sp, #28]
   19a94:	asr	w0, w0, #4
   19a98:	mov	w3, w0
   19a9c:	mov	x2, x1
   19aa0:	ldr	x1, [sp, #40]
   19aa4:	mov	x0, x4
   19aa8:	bl	5520 <mpfr_ui_sub@plt>
   19aac:	str	w0, [sp, #72]
   19ab0:	ldr	w0, [sp, #76]
   19ab4:	cmp	w0, #0x0
   19ab8:	b.lt	19ad4 <mpc_ui_ui_sub@@Base+0x98>  // b.tstop
   19abc:	ldr	w0, [sp, #76]
   19ac0:	cmp	w0, #0x0
   19ac4:	cset	w0, ne  // ne = any
   19ac8:	and	w0, w0, #0xff
   19acc:	mov	w1, w0
   19ad0:	b	19ad8 <mpc_ui_ui_sub@@Base+0x9c>
   19ad4:	mov	w1, #0x2                   	// #2
   19ad8:	ldr	w0, [sp, #72]
   19adc:	cmp	w0, #0x0
   19ae0:	b.lt	19b00 <mpc_ui_ui_sub@@Base+0xc4>  // b.tstop
   19ae4:	ldr	w0, [sp, #72]
   19ae8:	cmp	w0, #0x0
   19aec:	b.eq	19af8 <mpc_ui_ui_sub@@Base+0xbc>  // b.none
   19af0:	mov	w0, #0x4                   	// #4
   19af4:	b	19b04 <mpc_ui_ui_sub@@Base+0xc8>
   19af8:	mov	w0, #0x0                   	// #0
   19afc:	b	19b04 <mpc_ui_ui_sub@@Base+0xc8>
   19b00:	mov	w0, #0x8                   	// #8
   19b04:	orr	w0, w1, w0
   19b08:	ldp	x29, x30, [sp], #80
   19b0c:	ret
   19b10:	stp	x29, x30, [sp, #-48]!
   19b14:	mov	x29, sp
   19b18:	str	q0, [sp, #16]
   19b1c:	str	q1, [sp, #32]
   19b20:	ldp	x6, x1, [sp, #16]
   19b24:	ldp	x0, x3, [sp, #32]
   19b28:	mrs	x15, fpcr
   19b2c:	lsr	x7, x1, #63
   19b30:	mov	x10, x0
   19b34:	ubfiz	x4, x3, #3, #48
   19b38:	lsr	x5, x3, #63
   19b3c:	mov	x12, x7
   19b40:	ubfiz	x2, x1, #3, #48
   19b44:	orr	x4, x4, x0, lsr #61
   19b48:	ubfx	x8, x1, #48, #15
   19b4c:	ubfx	x0, x3, #48, #15
   19b50:	and	w7, w7, #0xff
   19b54:	mov	x16, x12
   19b58:	cmp	x12, x5
   19b5c:	and	w11, w5, #0xff
   19b60:	orr	x2, x2, x6, lsr #61
   19b64:	mov	x1, x8
   19b68:	lsl	x9, x6, #3
   19b6c:	mov	x3, x0
   19b70:	lsl	x13, x10, #3
   19b74:	b.eq	19d20 <mpc_ui_ui_sub@@Base+0x2e4>  // b.none
   19b78:	sub	w0, w8, w0
   19b7c:	cmp	w0, #0x0
   19b80:	b.le	19ccc <mpc_ui_ui_sub@@Base+0x290>
   19b84:	cbz	x3, 19d80 <mpc_ui_ui_sub@@Base+0x344>
   19b88:	orr	x4, x4, #0x8000000000000
   19b8c:	mov	x3, #0x7fff                	// #32767
   19b90:	cmp	x1, x3
   19b94:	b.eq	19f84 <mpc_ui_ui_sub@@Base+0x548>  // b.none
   19b98:	cmp	w0, #0x74
   19b9c:	b.gt	1a008 <mpc_ui_ui_sub@@Base+0x5cc>
   19ba0:	cmp	w0, #0x3f
   19ba4:	b.gt	1a168 <mpc_ui_ui_sub@@Base+0x72c>
   19ba8:	mov	w3, #0x40                  	// #64
   19bac:	sub	w3, w3, w0
   19bb0:	lsr	x6, x13, x0
   19bb4:	lsl	x13, x13, x3
   19bb8:	cmp	x13, #0x0
   19bbc:	cset	x5, ne  // ne = any
   19bc0:	lsl	x3, x4, x3
   19bc4:	orr	x3, x3, x6
   19bc8:	lsr	x0, x4, x0
   19bcc:	orr	x3, x3, x5
   19bd0:	sub	x2, x2, x0
   19bd4:	subs	x9, x9, x3
   19bd8:	sbc	x2, x2, xzr
   19bdc:	and	x3, x2, #0x7ffffffffffff
   19be0:	tbz	x2, #51, 19dc0 <mpc_ui_ui_sub@@Base+0x384>
   19be4:	cbz	x3, 19fec <mpc_ui_ui_sub@@Base+0x5b0>
   19be8:	clz	x0, x3
   19bec:	sub	w0, w0, #0xc
   19bf0:	neg	w2, w0
   19bf4:	lsl	x4, x3, x0
   19bf8:	lsl	x3, x9, x0
   19bfc:	lsr	x9, x9, x2
   19c00:	orr	x2, x9, x4
   19c04:	cmp	x1, w0, sxtw
   19c08:	sxtw	x4, w0
   19c0c:	b.gt	19fcc <mpc_ui_ui_sub@@Base+0x590>
   19c10:	sub	w1, w0, w1
   19c14:	add	w0, w1, #0x1
   19c18:	cmp	w0, #0x3f
   19c1c:	b.gt	1a130 <mpc_ui_ui_sub@@Base+0x6f4>
   19c20:	mov	w1, #0x40                  	// #64
   19c24:	sub	w1, w1, w0
   19c28:	lsr	x4, x3, x0
   19c2c:	lsl	x3, x3, x1
   19c30:	cmp	x3, #0x0
   19c34:	lsl	x9, x2, x1
   19c38:	cset	x1, ne  // ne = any
   19c3c:	orr	x9, x9, x4
   19c40:	lsr	x2, x2, x0
   19c44:	orr	x9, x9, x1
   19c48:	orr	x8, x9, x2
   19c4c:	cbz	x8, 19dd4 <mpc_ui_ui_sub@@Base+0x398>
   19c50:	and	x0, x9, #0x7
   19c54:	mov	x1, #0x0                   	// #0
   19c58:	mov	w5, #0x1                   	// #1
   19c5c:	cbz	x0, 1a018 <mpc_ui_ui_sub@@Base+0x5dc>
   19c60:	and	x3, x15, #0xc00000
   19c64:	cmp	x3, #0x400, lsl #12
   19c68:	b.eq	19f5c <mpc_ui_ui_sub@@Base+0x520>  // b.none
   19c6c:	cmp	x3, #0x800, lsl #12
   19c70:	b.eq	19f3c <mpc_ui_ui_sub@@Base+0x500>  // b.none
   19c74:	cbz	x3, 19f68 <mpc_ui_ui_sub@@Base+0x52c>
   19c78:	and	x3, x2, #0x8000000000000
   19c7c:	mov	w0, #0x10                  	// #16
   19c80:	cbz	w5, 19c88 <mpc_ui_ui_sub@@Base+0x24c>
   19c84:	orr	w0, w0, #0x8
   19c88:	cbz	x3, 19fa0 <mpc_ui_ui_sub@@Base+0x564>
   19c8c:	add	x1, x1, #0x1
   19c90:	mov	x3, #0x7fff                	// #32767
   19c94:	cmp	x1, x3
   19c98:	b.eq	19e84 <mpc_ui_ui_sub@@Base+0x448>  // b.none
   19c9c:	and	w1, w1, #0x7fff
   19ca0:	extr	x8, x2, x9, #3
   19ca4:	ubfx	x2, x2, #3, #48
   19ca8:	mov	x5, #0x0                   	// #0
   19cac:	orr	w1, w1, w7, lsl #15
   19cb0:	bfxil	x5, x2, #0, #48
   19cb4:	fmov	d0, x8
   19cb8:	bfi	x5, x1, #48, #16
   19cbc:	fmov	v0.d[1], x5
   19cc0:	cbnz	w0, 19ee0 <mpc_ui_ui_sub@@Base+0x4a4>
   19cc4:	ldp	x29, x30, [sp], #48
   19cc8:	ret
   19ccc:	mov	x14, x5
   19cd0:	b.eq	19dec <mpc_ui_ui_sub@@Base+0x3b0>  // b.none
   19cd4:	cbnz	x8, 1a070 <mpc_ui_ui_sub@@Base+0x634>
   19cd8:	orr	x1, x2, x9
   19cdc:	cbz	x1, 19d9c <mpc_ui_ui_sub@@Base+0x360>
   19ce0:	cmn	w0, #0x1
   19ce4:	b.eq	1a48c <mpc_ui_ui_sub@@Base+0xa50>  // b.none
   19ce8:	mov	x1, #0x7fff                	// #32767
   19cec:	mvn	w0, w0
   19cf0:	cmp	x3, x1
   19cf4:	b.ne	1a084 <mpc_ui_ui_sub@@Base+0x648>  // b.any
   19cf8:	orr	x0, x4, x13
   19cfc:	cbnz	x0, 1a3e4 <mpc_ui_ui_sub@@Base+0x9a8>
   19d00:	mov	x16, x14
   19d04:	nop
   19d08:	mov	x4, #0x0                   	// #0
   19d0c:	fmov	d0, x4
   19d10:	lsl	x16, x16, #63
   19d14:	orr	x5, x16, #0x7fff000000000000
   19d18:	fmov	v0.d[1], x5
   19d1c:	b	19cc4 <mpc_ui_ui_sub@@Base+0x288>
   19d20:	sub	w5, w8, w0
   19d24:	cmp	w5, #0x0
   19d28:	b.le	19ef4 <mpc_ui_ui_sub@@Base+0x4b8>
   19d2c:	cbz	x0, 19e34 <mpc_ui_ui_sub@@Base+0x3f8>
   19d30:	orr	x4, x4, #0x8000000000000
   19d34:	mov	x0, #0x7fff                	// #32767
   19d38:	cmp	x1, x0
   19d3c:	b.eq	19f84 <mpc_ui_ui_sub@@Base+0x548>  // b.none
   19d40:	cmp	w5, #0x74
   19d44:	b.gt	1a118 <mpc_ui_ui_sub@@Base+0x6dc>
   19d48:	cmp	w5, #0x3f
   19d4c:	b.gt	1a218 <mpc_ui_ui_sub@@Base+0x7dc>
   19d50:	mov	w0, #0x40                  	// #64
   19d54:	sub	w0, w0, w5
   19d58:	lsr	x6, x13, x5
   19d5c:	lsl	x13, x13, x0
   19d60:	cmp	x13, #0x0
   19d64:	lsl	x0, x4, x0
   19d68:	cset	x3, ne  // ne = any
   19d6c:	orr	x0, x0, x6
   19d70:	lsr	x4, x4, x5
   19d74:	orr	x0, x0, x3
   19d78:	add	x2, x2, x4
   19d7c:	b	1a124 <mpc_ui_ui_sub@@Base+0x6e8>
   19d80:	orr	x3, x4, x13
   19d84:	cbz	x3, 1a0f4 <mpc_ui_ui_sub@@Base+0x6b8>
   19d88:	subs	w0, w0, #0x1
   19d8c:	b.ne	19b8c <mpc_ui_ui_sub@@Base+0x150>  // b.any
   19d90:	subs	x9, x9, x13
   19d94:	sbc	x2, x2, x4
   19d98:	b	19bdc <mpc_ui_ui_sub@@Base+0x1a0>
   19d9c:	mov	x0, #0x7fff                	// #32767
   19da0:	cmp	x3, x0
   19da4:	b.eq	1a4d8 <mpc_ui_ui_sub@@Base+0xa9c>  // b.none
   19da8:	mov	w7, w11
   19dac:	mov	x2, x4
   19db0:	mov	x9, x13
   19db4:	mov	x1, x3
   19db8:	mov	x12, x5
   19dbc:	nop
   19dc0:	orr	x8, x9, x2
   19dc4:	and	x0, x9, #0x7
   19dc8:	mov	w5, #0x0                   	// #0
   19dcc:	cbnz	x1, 19c5c <mpc_ui_ui_sub@@Base+0x220>
   19dd0:	cbnz	x8, 19c50 <mpc_ui_ui_sub@@Base+0x214>
   19dd4:	mov	x2, #0x0                   	// #0
   19dd8:	mov	x1, #0x0                   	// #0
   19ddc:	mov	w0, #0x0                   	// #0
   19de0:	and	x2, x2, #0xffffffffffff
   19de4:	and	w1, w1, #0x7fff
   19de8:	b	19ca8 <mpc_ui_ui_sub@@Base+0x26c>
   19dec:	add	x5, x8, #0x1
   19df0:	tst	x5, #0x7ffe
   19df4:	b.ne	1a0c4 <mpc_ui_ui_sub@@Base+0x688>  // b.any
   19df8:	orr	x5, x2, x9
   19dfc:	orr	x8, x4, x13
   19e00:	cbnz	x1, 1a284 <mpc_ui_ui_sub@@Base+0x848>
   19e04:	cbz	x5, 1a32c <mpc_ui_ui_sub@@Base+0x8f0>
   19e08:	cbz	x8, 1a340 <mpc_ui_ui_sub@@Base+0x904>
   19e0c:	subs	x5, x9, x13
   19e10:	cmp	x9, x13
   19e14:	sbc	x3, x2, x4
   19e18:	tbz	x3, #51, 1a50c <mpc_ui_ui_sub@@Base+0xad0>
   19e1c:	subs	x9, x13, x9
   19e20:	mov	w7, w11
   19e24:	sbc	x2, x4, x2
   19e28:	mov	x12, x14
   19e2c:	orr	x8, x9, x2
   19e30:	b	19c4c <mpc_ui_ui_sub@@Base+0x210>
   19e34:	orr	x0, x4, x13
   19e38:	cbz	x0, 1a30c <mpc_ui_ui_sub@@Base+0x8d0>
   19e3c:	subs	w5, w5, #0x1
   19e40:	b.ne	19d34 <mpc_ui_ui_sub@@Base+0x2f8>  // b.any
   19e44:	adds	x9, x9, x13
   19e48:	adc	x2, x4, x2
   19e4c:	nop
   19e50:	tbz	x2, #51, 19dc0 <mpc_ui_ui_sub@@Base+0x384>
   19e54:	add	x1, x1, #0x1
   19e58:	mov	x0, #0x7fff                	// #32767
   19e5c:	cmp	x1, x0
   19e60:	b.eq	1a34c <mpc_ui_ui_sub@@Base+0x910>  // b.none
   19e64:	and	x0, x9, #0x1
   19e68:	and	x3, x2, #0xfff7ffffffffffff
   19e6c:	orr	x9, x0, x9, lsr #1
   19e70:	mov	w5, #0x0                   	// #0
   19e74:	orr	x9, x9, x2, lsl #63
   19e78:	lsr	x2, x3, #1
   19e7c:	and	x0, x9, #0x7
   19e80:	b	19c5c <mpc_ui_ui_sub@@Base+0x220>
   19e84:	and	x3, x15, #0xc00000
   19e88:	cbz	x3, 19ec0 <mpc_ui_ui_sub@@Base+0x484>
   19e8c:	cmp	x3, #0x400, lsl #12
   19e90:	b.eq	19eb8 <mpc_ui_ui_sub@@Base+0x47c>  // b.none
   19e94:	cmp	x3, #0x800, lsl #12
   19e98:	csel	w12, w12, wzr, eq  // eq = none
   19e9c:	cbnz	w12, 19ec0 <mpc_ui_ui_sub@@Base+0x484>
   19ea0:	mov	w1, #0x14                  	// #20
   19ea4:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
   19ea8:	orr	w0, w0, w1
   19eac:	mov	x8, #0xffffffffffffffff    	// #-1
   19eb0:	mov	x1, #0x7ffe                	// #32766
   19eb4:	b	19de0 <mpc_ui_ui_sub@@Base+0x3a4>
   19eb8:	cbnz	x12, 19ea0 <mpc_ui_ui_sub@@Base+0x464>
   19ebc:	nop
   19ec0:	mov	w1, #0x14                  	// #20
   19ec4:	and	x16, x7, #0xff
   19ec8:	orr	w0, w0, w1
   19ecc:	mov	x4, #0x0                   	// #0
   19ed0:	fmov	d0, x4
   19ed4:	lsl	x16, x16, #63
   19ed8:	orr	x5, x16, #0x7fff000000000000
   19edc:	fmov	v0.d[1], x5
   19ee0:	str	q0, [sp, #16]
   19ee4:	bl	1ae20 <mpc_ui_ui_sub@@Base+0x13e4>
   19ee8:	ldr	q0, [sp, #16]
   19eec:	ldp	x29, x30, [sp], #48
   19ef0:	ret
   19ef4:	b.eq	1a034 <mpc_ui_ui_sub@@Base+0x5f8>  // b.none
   19ef8:	cbnz	x8, 1a1b8 <mpc_ui_ui_sub@@Base+0x77c>
   19efc:	orr	x0, x2, x9
   19f00:	cbz	x0, 1a424 <mpc_ui_ui_sub@@Base+0x9e8>
   19f04:	cmn	w5, #0x1
   19f08:	b.eq	1a584 <mpc_ui_ui_sub@@Base+0xb48>  // b.none
   19f0c:	mov	x0, #0x7fff                	// #32767
   19f10:	mvn	w5, w5
   19f14:	cmp	x3, x0
   19f18:	b.ne	1a1cc <mpc_ui_ui_sub@@Base+0x790>  // b.any
   19f1c:	orr	x0, x4, x13
   19f20:	cbz	x0, 19d08 <mpc_ui_ui_sub@@Base+0x2cc>
   19f24:	lsr	x5, x4, #50
   19f28:	mov	x9, x13
   19f2c:	eor	x5, x5, #0x1
   19f30:	mov	x2, x4
   19f34:	and	w5, w5, #0x1
   19f38:	b	19f98 <mpc_ui_ui_sub@@Base+0x55c>
   19f3c:	mov	w0, #0x10                  	// #16
   19f40:	cbz	x12, 19f4c <mpc_ui_ui_sub@@Base+0x510>
   19f44:	adds	x9, x9, #0x8
   19f48:	cinc	x2, x2, cs  // cs = hs, nlast
   19f4c:	and	x3, x2, #0x8000000000000
   19f50:	cbz	w5, 19c88 <mpc_ui_ui_sub@@Base+0x24c>
   19f54:	orr	w0, w0, #0x8
   19f58:	b	19c88 <mpc_ui_ui_sub@@Base+0x24c>
   19f5c:	mov	w0, #0x10                  	// #16
   19f60:	cbnz	x12, 19f4c <mpc_ui_ui_sub@@Base+0x510>
   19f64:	b	19f44 <mpc_ui_ui_sub@@Base+0x508>
   19f68:	and	x3, x9, #0xf
   19f6c:	mov	w0, #0x10                  	// #16
   19f70:	cmp	x3, #0x4
   19f74:	b.eq	19f4c <mpc_ui_ui_sub@@Base+0x510>  // b.none
   19f78:	adds	x9, x9, #0x4
   19f7c:	cinc	x2, x2, cs  // cs = hs, nlast
   19f80:	b	19f4c <mpc_ui_ui_sub@@Base+0x510>
   19f84:	orr	x0, x2, x9
   19f88:	cbz	x0, 19d08 <mpc_ui_ui_sub@@Base+0x2cc>
   19f8c:	lsr	x5, x2, #50
   19f90:	eor	x5, x5, #0x1
   19f94:	and	w5, w5, #0x1
   19f98:	mov	w0, w5
   19f9c:	mov	x1, #0x7fff                	// #32767
   19fa0:	mov	x3, #0x7fff                	// #32767
   19fa4:	extr	x8, x2, x9, #3
   19fa8:	cmp	x1, x3
   19fac:	lsr	x2, x2, #3
   19fb0:	b.ne	19de0 <mpc_ui_ui_sub@@Base+0x3a4>  // b.any
   19fb4:	orr	x1, x8, x2
   19fb8:	cbz	x1, 1a624 <mpc_ui_ui_sub@@Base+0xbe8>
   19fbc:	orr	x2, x2, #0x800000000000
   19fc0:	mov	w1, #0x7fff                	// #32767
   19fc4:	and	x2, x2, #0xffffffffffff
   19fc8:	b	19ca8 <mpc_ui_ui_sub@@Base+0x26c>
   19fcc:	mov	x9, x3
   19fd0:	and	x2, x2, #0xfff7ffffffffffff
   19fd4:	sub	x1, x1, x4
   19fd8:	orr	x8, x9, x2
   19fdc:	and	x0, x9, #0x7
   19fe0:	mov	w5, #0x0                   	// #0
   19fe4:	cbz	x1, 19dd0 <mpc_ui_ui_sub@@Base+0x394>
   19fe8:	b	19c5c <mpc_ui_ui_sub@@Base+0x220>
   19fec:	clz	x2, x9
   19ff0:	add	w0, w2, #0x34
   19ff4:	cmp	w0, #0x3f
   19ff8:	b.le	19bf0 <mpc_ui_ui_sub@@Base+0x1b4>
   19ffc:	sub	w2, w2, #0xc
   1a000:	lsl	x2, x9, x2
   1a004:	b	19c04 <mpc_ui_ui_sub@@Base+0x1c8>
   1a008:	orr	x4, x4, x13
   1a00c:	cmp	x4, #0x0
   1a010:	cset	x3, ne  // ne = any
   1a014:	b	19bd4 <mpc_ui_ui_sub@@Base+0x198>
   1a018:	and	x3, x2, #0x8000000000000
   1a01c:	mov	w0, #0x0                   	// #0
   1a020:	cbz	w5, 19c88 <mpc_ui_ui_sub@@Base+0x24c>
   1a024:	mov	w0, #0x0                   	// #0
   1a028:	tbz	w15, #11, 19c88 <mpc_ui_ui_sub@@Base+0x24c>
   1a02c:	orr	w0, w0, #0x8
   1a030:	b	19c88 <mpc_ui_ui_sub@@Base+0x24c>
   1a034:	add	x0, x8, #0x1
   1a038:	tst	x0, #0x7ffe
   1a03c:	b.ne	1a244 <mpc_ui_ui_sub@@Base+0x808>  // b.any
   1a040:	orr	x0, x2, x9
   1a044:	cbnz	x8, 1a400 <mpc_ui_ui_sub@@Base+0x9c4>
   1a048:	orr	x8, x4, x13
   1a04c:	cbz	x0, 1a454 <mpc_ui_ui_sub@@Base+0xa18>
   1a050:	cbz	x8, 1a340 <mpc_ui_ui_sub@@Base+0x904>
   1a054:	adds	x9, x9, x13
   1a058:	adc	x2, x4, x2
   1a05c:	tbz	x2, #51, 19e2c <mpc_ui_ui_sub@@Base+0x3f0>
   1a060:	and	x2, x2, #0xfff7ffffffffffff
   1a064:	and	x0, x9, #0x7
   1a068:	mov	x1, #0x1                   	// #1
   1a06c:	b	19c5c <mpc_ui_ui_sub@@Base+0x220>
   1a070:	mov	x1, #0x7fff                	// #32767
   1a074:	neg	w0, w0
   1a078:	orr	x2, x2, #0x8000000000000
   1a07c:	cmp	x3, x1
   1a080:	b.eq	19cf8 <mpc_ui_ui_sub@@Base+0x2bc>  // b.none
   1a084:	cmp	w0, #0x74
   1a088:	b.gt	1a194 <mpc_ui_ui_sub@@Base+0x758>
   1a08c:	cmp	w0, #0x3f
   1a090:	b.gt	1a3b0 <mpc_ui_ui_sub@@Base+0x974>
   1a094:	mov	w1, #0x40                  	// #64
   1a098:	sub	w1, w1, w0
   1a09c:	lsr	x5, x9, x0
   1a0a0:	lsl	x9, x9, x1
   1a0a4:	cmp	x9, #0x0
   1a0a8:	lsl	x9, x2, x1
   1a0ac:	cset	x1, ne  // ne = any
   1a0b0:	orr	x9, x9, x5
   1a0b4:	lsr	x0, x2, x0
   1a0b8:	orr	x9, x9, x1
   1a0bc:	sub	x4, x4, x0
   1a0c0:	b	1a1a0 <mpc_ui_ui_sub@@Base+0x764>
   1a0c4:	subs	x5, x9, x13
   1a0c8:	cmp	x9, x13
   1a0cc:	sbc	x3, x2, x4
   1a0d0:	tbnz	x3, #51, 1a26c <mpc_ui_ui_sub@@Base+0x830>
   1a0d4:	orr	x8, x5, x3
   1a0d8:	cbnz	x8, 1a398 <mpc_ui_ui_sub@@Base+0x95c>
   1a0dc:	and	x15, x15, #0xc00000
   1a0e0:	mov	x2, #0x0                   	// #0
   1a0e4:	cmp	x15, #0x800, lsl #12
   1a0e8:	mov	x1, #0x0                   	// #0
   1a0ec:	cset	w7, eq  // eq = none
   1a0f0:	b	19de0 <mpc_ui_ui_sub@@Base+0x3a4>
   1a0f4:	mov	x0, #0x7fff                	// #32767
   1a0f8:	cmp	x8, x0
   1a0fc:	b.ne	19dc0 <mpc_ui_ui_sub@@Base+0x384>  // b.any
   1a100:	orr	x0, x2, x9
   1a104:	cbnz	x0, 19f8c <mpc_ui_ui_sub@@Base+0x550>
   1a108:	mov	x2, #0x0                   	// #0
   1a10c:	mov	x8, #0x0                   	// #0
   1a110:	mov	w0, #0x0                   	// #0
   1a114:	b	19fb4 <mpc_ui_ui_sub@@Base+0x578>
   1a118:	orr	x4, x4, x13
   1a11c:	cmp	x4, #0x0
   1a120:	cset	x0, ne  // ne = any
   1a124:	adds	x9, x0, x9
   1a128:	cinc	x2, x2, cs  // cs = hs, nlast
   1a12c:	b	19e50 <mpc_ui_ui_sub@@Base+0x414>
   1a130:	mov	w4, #0x80                  	// #128
   1a134:	sub	w4, w4, w0
   1a138:	cmp	w0, #0x40
   1a13c:	sub	w9, w1, #0x3f
   1a140:	lsl	x0, x2, x4
   1a144:	orr	x0, x3, x0
   1a148:	csel	x3, x0, x3, ne  // ne = any
   1a14c:	lsr	x9, x2, x9
   1a150:	cmp	x3, #0x0
   1a154:	mov	x2, #0x0                   	// #0
   1a158:	cset	x0, ne  // ne = any
   1a15c:	orr	x9, x0, x9
   1a160:	mov	x8, x9
   1a164:	b	19c4c <mpc_ui_ui_sub@@Base+0x210>
   1a168:	mov	w5, #0x80                  	// #128
   1a16c:	sub	w5, w5, w0
   1a170:	subs	w0, w0, #0x40
   1a174:	lsl	x5, x4, x5
   1a178:	orr	x5, x13, x5
   1a17c:	csel	x13, x5, x13, ne  // ne = any
   1a180:	lsr	x4, x4, x0
   1a184:	cmp	x13, #0x0
   1a188:	cset	x3, ne  // ne = any
   1a18c:	orr	x3, x3, x4
   1a190:	b	19bd4 <mpc_ui_ui_sub@@Base+0x198>
   1a194:	orr	x2, x2, x9
   1a198:	cmp	x2, #0x0
   1a19c:	cset	x9, ne  // ne = any
   1a1a0:	subs	x9, x13, x9
   1a1a4:	mov	w7, w11
   1a1a8:	sbc	x2, x4, xzr
   1a1ac:	mov	x1, x3
   1a1b0:	mov	x12, x14
   1a1b4:	b	19bdc <mpc_ui_ui_sub@@Base+0x1a0>
   1a1b8:	mov	x0, #0x7fff                	// #32767
   1a1bc:	neg	w5, w5
   1a1c0:	orr	x2, x2, #0x8000000000000
   1a1c4:	cmp	x3, x0
   1a1c8:	b.eq	19f1c <mpc_ui_ui_sub@@Base+0x4e0>  // b.none
   1a1cc:	cmp	w5, #0x74
   1a1d0:	b.gt	1a3a0 <mpc_ui_ui_sub@@Base+0x964>
   1a1d4:	cmp	w5, #0x3f
   1a1d8:	b.gt	1a460 <mpc_ui_ui_sub@@Base+0xa24>
   1a1dc:	mov	w1, #0x40                  	// #64
   1a1e0:	sub	w1, w1, w5
   1a1e4:	lsr	x6, x9, x5
   1a1e8:	lsl	x9, x9, x1
   1a1ec:	cmp	x9, #0x0
   1a1f0:	cset	x0, ne  // ne = any
   1a1f4:	lsl	x9, x2, x1
   1a1f8:	orr	x9, x9, x6
   1a1fc:	lsr	x5, x2, x5
   1a200:	orr	x9, x9, x0
   1a204:	add	x4, x4, x5
   1a208:	adds	x9, x9, x13
   1a20c:	mov	x1, x3
   1a210:	cinc	x2, x4, cs  // cs = hs, nlast
   1a214:	b	19e50 <mpc_ui_ui_sub@@Base+0x414>
   1a218:	mov	w0, #0x80                  	// #128
   1a21c:	sub	w0, w0, w5
   1a220:	subs	w5, w5, #0x40
   1a224:	lsl	x0, x4, x0
   1a228:	orr	x0, x13, x0
   1a22c:	csel	x13, x0, x13, ne  // ne = any
   1a230:	lsr	x4, x4, x5
   1a234:	cmp	x13, #0x0
   1a238:	cset	x0, ne  // ne = any
   1a23c:	orr	x0, x0, x4
   1a240:	b	1a124 <mpc_ui_ui_sub@@Base+0x6e8>
   1a244:	mov	x1, #0x7fff                	// #32767
   1a248:	cmp	x0, x1
   1a24c:	b.eq	1a4a8 <mpc_ui_ui_sub@@Base+0xa6c>  // b.none
   1a250:	adds	x9, x9, x13
   1a254:	mov	x1, x0
   1a258:	adc	x2, x4, x2
   1a25c:	ubfx	x0, x9, #1, #3
   1a260:	extr	x9, x2, x9, #1
   1a264:	lsr	x2, x2, #1
   1a268:	b	19c5c <mpc_ui_ui_sub@@Base+0x220>
   1a26c:	cmp	x13, x9
   1a270:	mov	w7, w11
   1a274:	sbc	x3, x4, x2
   1a278:	sub	x9, x13, x9
   1a27c:	mov	x12, x14
   1a280:	b	19be4 <mpc_ui_ui_sub@@Base+0x1a8>
   1a284:	mov	x12, #0x7fff                	// #32767
   1a288:	cmp	x1, x12
   1a28c:	b.eq	1a2b8 <mpc_ui_ui_sub@@Base+0x87c>  // b.none
   1a290:	cmp	x3, x12
   1a294:	b.eq	1a4e8 <mpc_ui_ui_sub@@Base+0xaac>  // b.none
   1a298:	cbnz	x5, 1a2d0 <mpc_ui_ui_sub@@Base+0x894>
   1a29c:	mov	w5, w0
   1a2a0:	cbnz	x8, 1a5c8 <mpc_ui_ui_sub@@Base+0xb8c>
   1a2a4:	mov	w7, #0x0                   	// #0
   1a2a8:	mov	x2, #0xffffffffffff        	// #281474976710655
   1a2ac:	mov	w0, #0x1                   	// #1
   1a2b0:	mov	x8, #0xffffffffffffffff    	// #-1
   1a2b4:	b	19fbc <mpc_ui_ui_sub@@Base+0x580>
   1a2b8:	cbz	x5, 1a5e4 <mpc_ui_ui_sub@@Base+0xba8>
   1a2bc:	lsr	x0, x2, #50
   1a2c0:	cmp	x3, x1
   1a2c4:	eor	x0, x0, #0x1
   1a2c8:	and	w0, w0, #0x1
   1a2cc:	b.eq	1a4e8 <mpc_ui_ui_sub@@Base+0xaac>  // b.none
   1a2d0:	cbz	x8, 1a504 <mpc_ui_ui_sub@@Base+0xac8>
   1a2d4:	bfi	x6, x2, #61, #3
   1a2d8:	lsr	x3, x2, #3
   1a2dc:	tbz	x2, #50, 1a2f8 <mpc_ui_ui_sub@@Base+0x8bc>
   1a2e0:	lsr	x1, x4, #3
   1a2e4:	tbnz	x4, #50, 1a2f8 <mpc_ui_ui_sub@@Base+0x8bc>
   1a2e8:	mov	x6, x10
   1a2ec:	mov	w7, w11
   1a2f0:	bfi	x6, x4, #61, #3
   1a2f4:	mov	x3, x1
   1a2f8:	extr	x2, x3, x6, #61
   1a2fc:	bfi	x6, x2, #61, #3
   1a300:	lsr	x2, x2, #3
   1a304:	mov	x8, x6
   1a308:	b	19fb4 <mpc_ui_ui_sub@@Base+0x578>
   1a30c:	mov	x0, #0x7fff                	// #32767
   1a310:	cmp	x8, x0
   1a314:	b.ne	19dc0 <mpc_ui_ui_sub@@Base+0x384>  // b.any
   1a318:	orr	x0, x2, x9
   1a31c:	cbz	x0, 1a108 <mpc_ui_ui_sub@@Base+0x6cc>
   1a320:	lsr	x5, x2, #50
   1a324:	eor	w5, w5, #0x1
   1a328:	b	19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a32c:	cbz	x8, 1a440 <mpc_ui_ui_sub@@Base+0xa04>
   1a330:	mov	w7, w11
   1a334:	mov	x2, x4
   1a338:	mov	x9, x13
   1a33c:	mov	x12, x14
   1a340:	mov	x1, #0x0                   	// #0
   1a344:	mov	x3, #0x0                   	// #0
   1a348:	b	1a024 <mpc_ui_ui_sub@@Base+0x5e8>
   1a34c:	ands	x3, x15, #0xc00000
   1a350:	b.eq	1a3dc <mpc_ui_ui_sub@@Base+0x9a0>  // b.none
   1a354:	cmp	x3, #0x400, lsl #12
   1a358:	eor	w0, w7, #0x1
   1a35c:	cset	w1, eq  // eq = none
   1a360:	tst	w1, w0
   1a364:	b.ne	1a600 <mpc_ui_ui_sub@@Base+0xbc4>  // b.any
   1a368:	cmp	x3, #0x800, lsl #12
   1a36c:	b.eq	1a5ac <mpc_ui_ui_sub@@Base+0xb70>  // b.none
   1a370:	cmp	x3, #0x400, lsl #12
   1a374:	mov	w0, #0x14                  	// #20
   1a378:	b.ne	19e88 <mpc_ui_ui_sub@@Base+0x44c>  // b.any
   1a37c:	mov	x2, #0xffffffffffffffff    	// #-1
   1a380:	mov	x1, #0x7ffe                	// #32766
   1a384:	mov	x9, x2
   1a388:	mov	w5, #0x0                   	// #0
   1a38c:	mov	w0, #0x14                  	// #20
   1a390:	cbnz	x12, 19f4c <mpc_ui_ui_sub@@Base+0x510>
   1a394:	b	19f44 <mpc_ui_ui_sub@@Base+0x508>
   1a398:	mov	x9, x5
   1a39c:	b	19be4 <mpc_ui_ui_sub@@Base+0x1a8>
   1a3a0:	orr	x2, x2, x9
   1a3a4:	cmp	x2, #0x0
   1a3a8:	cset	x9, ne  // ne = any
   1a3ac:	b	1a208 <mpc_ui_ui_sub@@Base+0x7cc>
   1a3b0:	mov	w1, #0x80                  	// #128
   1a3b4:	sub	w1, w1, w0
   1a3b8:	subs	w0, w0, #0x40
   1a3bc:	lsl	x1, x2, x1
   1a3c0:	orr	x1, x9, x1
   1a3c4:	csel	x9, x1, x9, ne  // ne = any
   1a3c8:	lsr	x2, x2, x0
   1a3cc:	cmp	x9, #0x0
   1a3d0:	cset	x9, ne  // ne = any
   1a3d4:	orr	x9, x9, x2
   1a3d8:	b	1a1a0 <mpc_ui_ui_sub@@Base+0x764>
   1a3dc:	mov	w0, #0x14                  	// #20
   1a3e0:	b	19ecc <mpc_ui_ui_sub@@Base+0x490>
   1a3e4:	lsr	x5, x4, #50
   1a3e8:	mov	w7, w11
   1a3ec:	eor	x5, x5, #0x1
   1a3f0:	mov	x9, x13
   1a3f4:	and	w5, w5, #0x1
   1a3f8:	mov	x2, x4
   1a3fc:	b	19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a400:	mov	x8, #0x7fff                	// #32767
   1a404:	cmp	x1, x8
   1a408:	b.eq	1a528 <mpc_ui_ui_sub@@Base+0xaec>  // b.none
   1a40c:	cmp	x3, x8
   1a410:	b.eq	1a59c <mpc_ui_ui_sub@@Base+0xb60>  // b.none
   1a414:	cbnz	x0, 1a540 <mpc_ui_ui_sub@@Base+0xb04>
   1a418:	mov	x2, x4
   1a41c:	mov	x9, x13
   1a420:	b	19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a424:	mov	x0, #0x7fff                	// #32767
   1a428:	cmp	x3, x0
   1a42c:	b.eq	1a5d8 <mpc_ui_ui_sub@@Base+0xb9c>  // b.none
   1a430:	mov	x2, x4
   1a434:	mov	x9, x13
   1a438:	mov	x1, x3
   1a43c:	b	19dc0 <mpc_ui_ui_sub@@Base+0x384>
   1a440:	and	x15, x15, #0xc00000
   1a444:	mov	x2, #0x0                   	// #0
   1a448:	cmp	x15, #0x800, lsl #12
   1a44c:	cset	w7, eq  // eq = none
   1a450:	b	19de0 <mpc_ui_ui_sub@@Base+0x3a4>
   1a454:	mov	x2, x4
   1a458:	mov	x9, x13
   1a45c:	b	19c4c <mpc_ui_ui_sub@@Base+0x210>
   1a460:	mov	w0, #0x80                  	// #128
   1a464:	sub	w0, w0, w5
   1a468:	subs	w5, w5, #0x40
   1a46c:	lsl	x0, x2, x0
   1a470:	orr	x0, x9, x0
   1a474:	csel	x9, x0, x9, ne  // ne = any
   1a478:	lsr	x2, x2, x5
   1a47c:	cmp	x9, #0x0
   1a480:	cset	x9, ne  // ne = any
   1a484:	orr	x9, x9, x2
   1a488:	b	1a208 <mpc_ui_ui_sub@@Base+0x7cc>
   1a48c:	cmp	x13, x9
   1a490:	mov	w7, w11
   1a494:	sbc	x2, x4, x2
   1a498:	sub	x9, x13, x9
   1a49c:	mov	x1, x3
   1a4a0:	mov	x12, x5
   1a4a4:	b	19bdc <mpc_ui_ui_sub@@Base+0x1a0>
   1a4a8:	ands	x3, x15, #0xc00000
   1a4ac:	b.eq	1a3dc <mpc_ui_ui_sub@@Base+0x9a0>  // b.none
   1a4b0:	cmp	x3, #0x400, lsl #12
   1a4b4:	eor	w0, w7, #0x1
   1a4b8:	csel	w0, w0, wzr, eq  // eq = none
   1a4bc:	cbnz	w0, 1a600 <mpc_ui_ui_sub@@Base+0xbc4>
   1a4c0:	cmp	x3, #0x800, lsl #12
   1a4c4:	b.ne	1a370 <mpc_ui_ui_sub@@Base+0x934>  // b.any
   1a4c8:	cbz	x12, 1a5b0 <mpc_ui_ui_sub@@Base+0xb74>
   1a4cc:	mov	w0, #0x14                  	// #20
   1a4d0:	mov	x16, #0x1                   	// #1
   1a4d4:	b	19ecc <mpc_ui_ui_sub@@Base+0x490>
   1a4d8:	orr	x0, x4, x13
   1a4dc:	cbnz	x0, 1a3e4 <mpc_ui_ui_sub@@Base+0x9a8>
   1a4e0:	mov	w7, w11
   1a4e4:	b	1a108 <mpc_ui_ui_sub@@Base+0x6cc>
   1a4e8:	cbz	x8, 1a5f4 <mpc_ui_ui_sub@@Base+0xbb8>
   1a4ec:	tst	x4, #0x4000000000000
   1a4f0:	csinc	w0, w0, wzr, ne  // ne = any
   1a4f4:	cbnz	x5, 1a2d4 <mpc_ui_ui_sub@@Base+0x898>
   1a4f8:	mov	w7, w11
   1a4fc:	mov	x2, x4
   1a500:	mov	x9, x13
   1a504:	mov	w5, w0
   1a508:	b	19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a50c:	orr	x8, x5, x3
   1a510:	cbz	x8, 1a440 <mpc_ui_ui_sub@@Base+0xa04>
   1a514:	and	x0, x5, #0x7
   1a518:	mov	x9, x5
   1a51c:	mov	x2, x3
   1a520:	mov	w5, #0x1                   	// #1
   1a524:	b	19c5c <mpc_ui_ui_sub@@Base+0x220>
   1a528:	cbz	x0, 1a594 <mpc_ui_ui_sub@@Base+0xb58>
   1a52c:	lsr	x5, x2, #50
   1a530:	cmp	x3, x1
   1a534:	eor	x5, x5, #0x1
   1a538:	and	w5, w5, #0x1
   1a53c:	b.eq	1a60c <mpc_ui_ui_sub@@Base+0xbd0>  // b.none
   1a540:	orr	x13, x4, x13
   1a544:	cbz	x13, 19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a548:	bfi	x6, x2, #61, #3
   1a54c:	lsr	x0, x2, #3
   1a550:	tbz	x2, #50, 1a56c <mpc_ui_ui_sub@@Base+0xb30>
   1a554:	lsr	x1, x4, #3
   1a558:	tbnz	x4, #50, 1a56c <mpc_ui_ui_sub@@Base+0xb30>
   1a55c:	and	x6, x10, #0x1fffffffffffffff
   1a560:	mov	w7, w11
   1a564:	orr	x6, x6, x4, lsl #61
   1a568:	mov	x0, x1
   1a56c:	extr	x2, x0, x6, #61
   1a570:	mov	w0, w5
   1a574:	bfi	x6, x2, #61, #3
   1a578:	lsr	x2, x2, #3
   1a57c:	mov	x8, x6
   1a580:	b	19fb4 <mpc_ui_ui_sub@@Base+0x578>
   1a584:	adds	x9, x9, x13
   1a588:	mov	x1, x3
   1a58c:	adc	x2, x4, x2
   1a590:	b	19e50 <mpc_ui_ui_sub@@Base+0x414>
   1a594:	cmp	x3, x1
   1a598:	b.ne	1a418 <mpc_ui_ui_sub@@Base+0x9dc>  // b.any
   1a59c:	orr	x1, x4, x13
   1a5a0:	cbnz	x1, 1a614 <mpc_ui_ui_sub@@Base+0xbd8>
   1a5a4:	cbz	x0, 1a108 <mpc_ui_ui_sub@@Base+0x6cc>
   1a5a8:	b	19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a5ac:	cbnz	x16, 1a4cc <mpc_ui_ui_sub@@Base+0xa90>
   1a5b0:	mov	x2, #0xffffffffffffffff    	// #-1
   1a5b4:	mov	w7, #0x0                   	// #0
   1a5b8:	mov	x9, x2
   1a5bc:	mov	x1, #0x7ffe                	// #32766
   1a5c0:	mov	w0, #0x14                  	// #20
   1a5c4:	b	19c8c <mpc_ui_ui_sub@@Base+0x250>
   1a5c8:	mov	w7, w11
   1a5cc:	mov	x2, x4
   1a5d0:	mov	x9, x13
   1a5d4:	b	19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a5d8:	orr	x0, x4, x13
   1a5dc:	cbz	x0, 1a108 <mpc_ui_ui_sub@@Base+0x6cc>
   1a5e0:	b	19f24 <mpc_ui_ui_sub@@Base+0x4e8>
   1a5e4:	cmp	x3, x1
   1a5e8:	b.eq	1a4e8 <mpc_ui_ui_sub@@Base+0xaac>  // b.none
   1a5ec:	mov	w5, #0x0                   	// #0
   1a5f0:	b	1a2a0 <mpc_ui_ui_sub@@Base+0x864>
   1a5f4:	cbnz	x5, 1a504 <mpc_ui_ui_sub@@Base+0xac8>
   1a5f8:	mov	w5, w0
   1a5fc:	b	1a2a0 <mpc_ui_ui_sub@@Base+0x864>
   1a600:	mov	w0, #0x14                  	// #20
   1a604:	mov	x16, #0x0                   	// #0
   1a608:	b	19ecc <mpc_ui_ui_sub@@Base+0x490>
   1a60c:	orr	x1, x4, x13
   1a610:	cbz	x1, 19f98 <mpc_ui_ui_sub@@Base+0x55c>
   1a614:	tst	x4, #0x4000000000000
   1a618:	csinc	w5, w5, wzr, ne  // ne = any
   1a61c:	cbnz	x0, 1a548 <mpc_ui_ui_sub@@Base+0xb0c>
   1a620:	b	1a418 <mpc_ui_ui_sub@@Base+0x9dc>
   1a624:	mov	x8, #0x0                   	// #0
   1a628:	mov	w1, #0x7fff                	// #32767
   1a62c:	mov	x2, #0x0                   	// #0
   1a630:	b	19ca8 <mpc_ui_ui_sub@@Base+0x26c>
   1a634:	nop
   1a638:	stp	x29, x30, [sp, #-80]!
   1a63c:	mov	x29, sp
   1a640:	str	q0, [sp, #48]
   1a644:	str	q1, [sp, #64]
   1a648:	ldp	x1, x0, [sp, #48]
   1a64c:	ldp	x6, x2, [sp, #64]
   1a650:	mrs	x11, fpcr
   1a654:	lsr	x3, x0, #63
   1a658:	ubfx	x7, x0, #0, #48
   1a65c:	and	w12, w3, #0xff
   1a660:	mov	x14, x3
   1a664:	ubfx	x3, x0, #48, #15
   1a668:	cbz	w3, 1aa10 <mpc_ui_ui_sub@@Base+0xfd4>
   1a66c:	mov	w4, #0x7fff                	// #32767
   1a670:	cmp	w3, w4
   1a674:	b.eq	1aab4 <mpc_ui_ui_sub@@Base+0x1078>  // b.none
   1a678:	and	x3, x3, #0xffff
   1a67c:	extr	x4, x7, x1, #61
   1a680:	mov	x18, #0xffffffffffffc001    	// #-16383
   1a684:	orr	x7, x4, #0x8000000000000
   1a688:	add	x3, x3, x18
   1a68c:	lsl	x5, x1, #3
   1a690:	mov	x16, #0x0                   	// #0
   1a694:	mov	x1, #0x0                   	// #0
   1a698:	mov	w0, #0x0                   	// #0
   1a69c:	lsr	x8, x2, #63
   1a6a0:	ubfx	x4, x2, #0, #48
   1a6a4:	and	w15, w8, #0xff
   1a6a8:	mov	x13, x8
   1a6ac:	ubfx	x9, x2, #48, #15
   1a6b0:	cbz	w9, 1aa70 <mpc_ui_ui_sub@@Base+0x1034>
   1a6b4:	mov	w8, #0x7fff                	// #32767
   1a6b8:	cmp	w9, w8
   1a6bc:	b.eq	1a740 <mpc_ui_ui_sub@@Base+0xd04>  // b.none
   1a6c0:	and	x9, x9, #0xffff
   1a6c4:	mov	x17, #0xffffffffffffc001    	// #-16383
   1a6c8:	add	x9, x9, x17
   1a6cc:	extr	x2, x4, x6, #61
   1a6d0:	add	x9, x9, x3
   1a6d4:	lsl	x6, x6, #3
   1a6d8:	orr	x4, x2, #0x8000000000000
   1a6dc:	mov	x2, #0x0                   	// #0
   1a6e0:	eor	w8, w12, w15
   1a6e4:	cmp	x1, #0xa
   1a6e8:	and	w10, w8, #0xff
   1a6ec:	add	x3, x9, #0x1
   1a6f0:	and	x8, x8, #0xff
   1a6f4:	b.le	1a778 <mpc_ui_ui_sub@@Base+0xd3c>
   1a6f8:	cmp	x1, #0xb
   1a6fc:	b.eq	1ae10 <mpc_ui_ui_sub@@Base+0x13d4>  // b.none
   1a700:	mov	w15, w12
   1a704:	mov	x13, x14
   1a708:	mov	w10, w15
   1a70c:	cmp	x16, #0x2
   1a710:	b.eq	1aad4 <mpc_ui_ui_sub@@Base+0x1098>  // b.none
   1a714:	mov	x4, x7
   1a718:	mov	x6, x5
   1a71c:	mov	x2, x16
   1a720:	mov	x8, x13
   1a724:	cmp	x2, #0x3
   1a728:	b.ne	1a794 <mpc_ui_ui_sub@@Base+0xd58>  // b.any
   1a72c:	orr	x4, x4, #0x800000000000
   1a730:	mov	x5, x6
   1a734:	and	x4, x4, #0xffffffffffff
   1a738:	mov	w1, #0x7fff                	// #32767
   1a73c:	b	1a7a8 <mpc_ui_ui_sub@@Base+0xd6c>
   1a740:	mov	x8, #0x7fff                	// #32767
   1a744:	orr	x2, x4, x6
   1a748:	add	x9, x3, x8
   1a74c:	cbnz	x2, 1a7cc <mpc_ui_ui_sub@@Base+0xd90>
   1a750:	eor	w8, w12, w15
   1a754:	orr	x1, x1, #0x2
   1a758:	and	w10, w8, #0xff
   1a75c:	cmp	x1, #0xa
   1a760:	add	x3, x3, #0x8, lsl #12
   1a764:	and	x8, x8, #0xff
   1a768:	mov	x6, #0x0                   	// #0
   1a76c:	b.gt	1ad84 <mpc_ui_ui_sub@@Base+0x1348>
   1a770:	mov	x4, #0x0                   	// #0
   1a774:	mov	x2, #0x2                   	// #2
   1a778:	cmp	x1, #0x2
   1a77c:	b.gt	1a7f4 <mpc_ui_ui_sub@@Base+0xdb8>
   1a780:	sub	x1, x1, #0x1
   1a784:	cmp	x1, #0x1
   1a788:	b.hi	1a830 <mpc_ui_ui_sub@@Base+0xdf4>  // b.pmore
   1a78c:	cmp	x2, #0x2
   1a790:	b.eq	1aad4 <mpc_ui_ui_sub@@Base+0x1098>  // b.none
   1a794:	cmp	x2, #0x1
   1a798:	b.ne	1a990 <mpc_ui_ui_sub@@Base+0xf54>  // b.any
   1a79c:	mov	w1, #0x0                   	// #0
   1a7a0:	mov	x4, #0x0                   	// #0
   1a7a4:	mov	x5, #0x0                   	// #0
   1a7a8:	mov	x3, #0x0                   	// #0
   1a7ac:	orr	w1, w1, w10, lsl #15
   1a7b0:	bfxil	x3, x4, #0, #48
   1a7b4:	fmov	d0, x5
   1a7b8:	bfi	x3, x1, #48, #16
   1a7bc:	fmov	v0.d[1], x3
   1a7c0:	cbnz	w0, 1ac00 <mpc_ui_ui_sub@@Base+0x11c4>
   1a7c4:	ldp	x29, x30, [sp], #80
   1a7c8:	ret
   1a7cc:	tst	x4, #0x800000000000
   1a7d0:	eor	w8, w12, w15
   1a7d4:	orr	x1, x1, #0x3
   1a7d8:	csinc	w0, w0, wzr, ne  // ne = any
   1a7dc:	and	w10, w8, #0xff
   1a7e0:	add	x3, x3, #0x8, lsl #12
   1a7e4:	cmp	x1, #0xa
   1a7e8:	and	x8, x8, #0xff
   1a7ec:	mov	x2, #0x3                   	// #3
   1a7f0:	b.gt	1ae04 <mpc_ui_ui_sub@@Base+0x13c8>
   1a7f4:	mov	x12, #0x1                   	// #1
   1a7f8:	mov	x14, #0x530                 	// #1328
   1a7fc:	lsl	x1, x12, x1
   1a800:	tst	x1, x14
   1a804:	b.ne	1aa04 <mpc_ui_ui_sub@@Base+0xfc8>  // b.any
   1a808:	mov	x14, #0x240                 	// #576
   1a80c:	tst	x1, x14
   1a810:	b.ne	1a9ec <mpc_ui_ui_sub@@Base+0xfb0>  // b.any
   1a814:	mov	x12, #0x88                  	// #136
   1a818:	tst	x1, x12
   1a81c:	b.eq	1a830 <mpc_ui_ui_sub@@Base+0xdf4>  // b.none
   1a820:	mov	x7, x4
   1a824:	mov	x5, x6
   1a828:	mov	x16, x2
   1a82c:	b	1a708 <mpc_ui_ui_sub@@Base+0xccc>
   1a830:	lsr	x13, x5, #32
   1a834:	and	x12, x6, #0xffffffff
   1a838:	and	x15, x5, #0xffffffff
   1a83c:	lsr	x6, x6, #32
   1a840:	and	x18, x4, #0xffffffff
   1a844:	lsr	x2, x4, #32
   1a848:	mul	x4, x13, x12
   1a84c:	stp	x21, x22, [sp, #32]
   1a850:	lsr	x22, x7, #32
   1a854:	and	x5, x7, #0xffffffff
   1a858:	mul	x16, x12, x15
   1a85c:	madd	x7, x6, x15, x4
   1a860:	stp	x19, x20, [sp, #16]
   1a864:	mul	x1, x13, x18
   1a868:	mul	x17, x15, x18
   1a86c:	and	x30, x16, #0xffffffff
   1a870:	madd	x15, x2, x15, x1
   1a874:	add	x16, x7, x16, lsr #32
   1a878:	mul	x21, x22, x12
   1a87c:	cmp	x4, x16
   1a880:	mul	x20, x22, x18
   1a884:	mov	x14, #0x100000000           	// #4294967296
   1a888:	mul	x19, x13, x6
   1a88c:	add	x15, x15, x17, lsr #32
   1a890:	mul	x12, x12, x5
   1a894:	and	x17, x17, #0xffffffff
   1a898:	mul	x18, x5, x18
   1a89c:	add	x4, x19, x14
   1a8a0:	madd	x7, x6, x5, x21
   1a8a4:	csel	x19, x4, x19, hi  // hi = pmore
   1a8a8:	madd	x5, x2, x5, x20
   1a8ac:	cmp	x1, x15
   1a8b0:	mul	x13, x13, x2
   1a8b4:	add	x17, x17, x15, lsl #32
   1a8b8:	mul	x6, x6, x22
   1a8bc:	add	x7, x7, x12, lsr #32
   1a8c0:	add	x5, x5, x18, lsr #32
   1a8c4:	add	x4, x13, x14
   1a8c8:	mul	x2, x2, x22
   1a8cc:	csel	x13, x4, x13, hi  // hi = pmore
   1a8d0:	and	x1, x18, #0xffffffff
   1a8d4:	cmp	x21, x7
   1a8d8:	add	x4, x6, x14
   1a8dc:	add	x30, x30, x16, lsl #32
   1a8e0:	csel	x6, x4, x6, hi  // hi = pmore
   1a8e4:	add	x13, x13, x15, lsr #32
   1a8e8:	cmp	x20, x5
   1a8ec:	add	x1, x1, x5, lsl #32
   1a8f0:	add	x16, x17, x16, lsr #32
   1a8f4:	add	x14, x2, x14
   1a8f8:	csel	x2, x14, x2, hi  // hi = pmore
   1a8fc:	add	x16, x19, x16
   1a900:	adds	x1, x1, x13
   1a904:	and	x12, x12, #0xffffffff
   1a908:	cset	x13, cs  // cs = hs, nlast
   1a90c:	cmp	x16, x17
   1a910:	cset	x4, cc  // cc = lo, ul, last
   1a914:	add	x12, x12, x7, lsl #32
   1a918:	adds	x1, x1, x4
   1a91c:	lsr	x5, x5, #32
   1a920:	cset	x4, cs  // cs = hs, nlast
   1a924:	cmp	x13, #0x0
   1a928:	ccmp	x4, #0x0, #0x0, eq  // eq = none
   1a92c:	add	x7, x6, x7, lsr #32
   1a930:	cinc	x5, x5, ne  // ne = any
   1a934:	adds	x6, x16, x12
   1a938:	cset	x4, cs  // cs = hs, nlast
   1a93c:	adds	x1, x1, x7
   1a940:	cset	x7, cs  // cs = hs, nlast
   1a944:	adds	x4, x1, x4
   1a948:	cset	x1, cs  // cs = hs, nlast
   1a94c:	cmp	x7, #0x0
   1a950:	orr	x30, x30, x6, lsl #13
   1a954:	ccmp	x1, #0x0, #0x0, eq  // eq = none
   1a958:	cinc	x1, x2, ne  // ne = any
   1a95c:	cmp	x30, #0x0
   1a960:	add	x1, x1, x5
   1a964:	cset	x2, ne  // ne = any
   1a968:	orr	x6, x2, x6, lsr #51
   1a96c:	orr	x6, x6, x4, lsl #13
   1a970:	extr	x4, x1, x4, #51
   1a974:	tbz	x1, #39, 1ac88 <mpc_ui_ui_sub@@Base+0x124c>
   1a978:	ldp	x19, x20, [sp, #16]
   1a97c:	and	x1, x6, #0x1
   1a980:	ldp	x21, x22, [sp, #32]
   1a984:	orr	x6, x1, x6, lsr #1
   1a988:	orr	x6, x6, x4, lsl #63
   1a98c:	lsr	x4, x4, #1
   1a990:	mov	x1, #0x3fff                	// #16383
   1a994:	add	x2, x3, x1
   1a998:	cmp	x2, #0x0
   1a99c:	b.le	1ab34 <mpc_ui_ui_sub@@Base+0x10f8>
   1a9a0:	tst	x6, #0x7
   1a9a4:	b.eq	1a9c4 <mpc_ui_ui_sub@@Base+0xf88>  // b.none
   1a9a8:	and	x1, x11, #0xc00000
   1a9ac:	orr	w0, w0, #0x10
   1a9b0:	cmp	x1, #0x400, lsl #12
   1a9b4:	b.eq	1ad7c <mpc_ui_ui_sub@@Base+0x1340>  // b.none
   1a9b8:	cmp	x1, #0x800, lsl #12
   1a9bc:	b.eq	1ad24 <mpc_ui_ui_sub@@Base+0x12e8>  // b.none
   1a9c0:	cbz	x1, 1ad0c <mpc_ui_ui_sub@@Base+0x12d0>
   1a9c4:	tbz	x4, #52, 1a9d0 <mpc_ui_ui_sub@@Base+0xf94>
   1a9c8:	and	x4, x4, #0xffefffffffffffff
   1a9cc:	add	x2, x3, #0x4, lsl #12
   1a9d0:	mov	x1, #0x7ffe                	// #32766
   1a9d4:	cmp	x2, x1
   1a9d8:	b.gt	1ac5c <mpc_ui_ui_sub@@Base+0x1220>
   1a9dc:	and	w1, w2, #0x7fff
   1a9e0:	extr	x5, x4, x6, #3
   1a9e4:	ubfx	x4, x4, #3, #48
   1a9e8:	b	1a7a8 <mpc_ui_ui_sub@@Base+0xd6c>
   1a9ec:	mov	w0, w12
   1a9f0:	mov	w10, #0x0                   	// #0
   1a9f4:	mov	x4, #0xffffffffffff        	// #281474976710655
   1a9f8:	mov	x5, #0xffffffffffffffff    	// #-1
   1a9fc:	mov	w1, #0x7fff                	// #32767
   1aa00:	b	1a7a8 <mpc_ui_ui_sub@@Base+0xd6c>
   1aa04:	mov	w15, w10
   1aa08:	mov	x13, x8
   1aa0c:	b	1a708 <mpc_ui_ui_sub@@Base+0xccc>
   1aa10:	orr	x5, x7, x1
   1aa14:	cbz	x5, 1ab1c <mpc_ui_ui_sub@@Base+0x10e0>
   1aa18:	cbz	x7, 1ac38 <mpc_ui_ui_sub@@Base+0x11fc>
   1aa1c:	clz	x0, x7
   1aa20:	sub	x4, x0, #0xf
   1aa24:	add	w5, w4, #0x3
   1aa28:	mov	w3, #0x3d                  	// #61
   1aa2c:	sub	w3, w3, w4
   1aa30:	lsl	x4, x7, x5
   1aa34:	lsr	x3, x1, x3
   1aa38:	orr	x7, x3, x4
   1aa3c:	lsl	x5, x1, x5
   1aa40:	lsr	x8, x2, #63
   1aa44:	mov	x3, #0xffffffffffffc011    	// #-16367
   1aa48:	ubfx	x4, x2, #0, #48
   1aa4c:	sub	x3, x3, x0
   1aa50:	and	w15, w8, #0xff
   1aa54:	mov	x13, x8
   1aa58:	ubfx	x9, x2, #48, #15
   1aa5c:	mov	x1, #0x0                   	// #0
   1aa60:	mov	x16, #0x0                   	// #0
   1aa64:	mov	w0, #0x0                   	// #0
   1aa68:	cbnz	w9, 1a6b4 <mpc_ui_ui_sub@@Base+0xc78>
   1aa6c:	nop
   1aa70:	orr	x2, x4, x6
   1aa74:	cbz	x2, 1aae4 <mpc_ui_ui_sub@@Base+0x10a8>
   1aa78:	cbz	x4, 1ac14 <mpc_ui_ui_sub@@Base+0x11d8>
   1aa7c:	clz	x9, x4
   1aa80:	sub	x2, x9, #0xf
   1aa84:	add	w10, w2, #0x3
   1aa88:	mov	w8, #0x3d                  	// #61
   1aa8c:	sub	w8, w8, w2
   1aa90:	lsl	x2, x4, x10
   1aa94:	lsr	x8, x6, x8
   1aa98:	orr	x4, x8, x2
   1aa9c:	lsl	x6, x6, x10
   1aaa0:	sub	x9, x3, x9
   1aaa4:	mov	x10, #0xffffffffffffc011    	// #-16367
   1aaa8:	mov	x2, #0x0                   	// #0
   1aaac:	add	x9, x9, x10
   1aab0:	b	1a6e0 <mpc_ui_ui_sub@@Base+0xca4>
   1aab4:	orr	x5, x7, x1
   1aab8:	cbnz	x5, 1aafc <mpc_ui_ui_sub@@Base+0x10c0>
   1aabc:	mov	x7, #0x0                   	// #0
   1aac0:	mov	x1, #0x8                   	// #8
   1aac4:	mov	x3, #0x7fff                	// #32767
   1aac8:	mov	x16, #0x2                   	// #2
   1aacc:	mov	w0, #0x0                   	// #0
   1aad0:	b	1a69c <mpc_ui_ui_sub@@Base+0xc60>
   1aad4:	mov	w1, #0x7fff                	// #32767
   1aad8:	mov	x4, #0x0                   	// #0
   1aadc:	mov	x5, #0x0                   	// #0
   1aae0:	b	1a7a8 <mpc_ui_ui_sub@@Base+0xd6c>
   1aae4:	orr	x1, x1, #0x1
   1aae8:	mov	x9, x3
   1aaec:	mov	x4, #0x0                   	// #0
   1aaf0:	mov	x6, #0x0                   	// #0
   1aaf4:	mov	x2, #0x1                   	// #1
   1aaf8:	b	1a6e0 <mpc_ui_ui_sub@@Base+0xca4>
   1aafc:	lsr	x0, x7, #47
   1ab00:	mov	x5, x1
   1ab04:	eor	x0, x0, #0x1
   1ab08:	mov	x1, #0xc                   	// #12
   1ab0c:	and	w0, w0, #0x1
   1ab10:	mov	x3, #0x7fff                	// #32767
   1ab14:	mov	x16, #0x3                   	// #3
   1ab18:	b	1a69c <mpc_ui_ui_sub@@Base+0xc60>
   1ab1c:	mov	x7, #0x0                   	// #0
   1ab20:	mov	x1, #0x4                   	// #4
   1ab24:	mov	x3, #0x0                   	// #0
   1ab28:	mov	x16, #0x1                   	// #1
   1ab2c:	mov	w0, #0x0                   	// #0
   1ab30:	b	1a69c <mpc_ui_ui_sub@@Base+0xc60>
   1ab34:	mov	x1, #0x1                   	// #1
   1ab38:	sub	x2, x1, x2
   1ab3c:	cmp	x2, #0x74
   1ab40:	b.gt	1abb8 <mpc_ui_ui_sub@@Base+0x117c>
   1ab44:	cmp	x2, #0x3f
   1ab48:	b.le	1ac98 <mpc_ui_ui_sub@@Base+0x125c>
   1ab4c:	mov	w1, #0x80                  	// #128
   1ab50:	sub	w1, w1, w2
   1ab54:	cmp	x2, #0x40
   1ab58:	sub	w2, w2, #0x40
   1ab5c:	lsl	x1, x4, x1
   1ab60:	orr	x1, x6, x1
   1ab64:	csel	x6, x1, x6, ne  // ne = any
   1ab68:	lsr	x2, x4, x2
   1ab6c:	cmp	x6, #0x0
   1ab70:	cset	x5, ne  // ne = any
   1ab74:	orr	x5, x5, x2
   1ab78:	ands	x2, x5, #0x7
   1ab7c:	b.eq	1accc <mpc_ui_ui_sub@@Base+0x1290>  // b.none
   1ab80:	mov	x2, #0x0                   	// #0
   1ab84:	and	x11, x11, #0xc00000
   1ab88:	orr	w0, w0, #0x10
   1ab8c:	cmp	x11, #0x400, lsl #12
   1ab90:	b.eq	1addc <mpc_ui_ui_sub@@Base+0x13a0>  // b.none
   1ab94:	cmp	x11, #0x800, lsl #12
   1ab98:	b.eq	1adf0 <mpc_ui_ui_sub@@Base+0x13b4>  // b.none
   1ab9c:	cbz	x11, 1ad34 <mpc_ui_ui_sub@@Base+0x12f8>
   1aba0:	tbnz	x2, #51, 1ad4c <mpc_ui_ui_sub@@Base+0x1310>
   1aba4:	ubfx	x4, x2, #3, #48
   1aba8:	extr	x5, x2, x5, #3
   1abac:	orr	w0, w0, #0x8
   1abb0:	mov	w1, #0x0                   	// #0
   1abb4:	b	1abe8 <mpc_ui_ui_sub@@Base+0x11ac>
   1abb8:	orr	x5, x6, x4
   1abbc:	cbz	x5, 1abdc <mpc_ui_ui_sub@@Base+0x11a0>
   1abc0:	and	x11, x11, #0xc00000
   1abc4:	orr	w0, w0, #0x10
   1abc8:	cmp	x11, #0x400, lsl #12
   1abcc:	sub	x5, x1, x8
   1abd0:	b.eq	1abdc <mpc_ui_ui_sub@@Base+0x11a0>  // b.none
   1abd4:	cmp	x11, #0x800, lsl #12
   1abd8:	csel	x5, x8, xzr, eq  // eq = none
   1abdc:	orr	w0, w0, #0x8
   1abe0:	mov	w1, #0x0                   	// #0
   1abe4:	mov	x4, #0x0                   	// #0
   1abe8:	mov	x3, #0x0                   	// #0
   1abec:	fmov	d0, x5
   1abf0:	bfxil	x3, x4, #0, #48
   1abf4:	bfi	x3, x1, #48, #15
   1abf8:	bfi	x3, x10, #63, #1
   1abfc:	fmov	v0.d[1], x3
   1ac00:	str	q0, [sp, #48]
   1ac04:	bl	1ae20 <mpc_ui_ui_sub@@Base+0x13e4>
   1ac08:	ldr	q0, [sp, #48]
   1ac0c:	ldp	x29, x30, [sp], #80
   1ac10:	ret
   1ac14:	clz	x9, x6
   1ac18:	add	x2, x9, #0x31
   1ac1c:	add	x9, x9, #0x40
   1ac20:	cmp	x2, #0x3c
   1ac24:	b.le	1aa84 <mpc_ui_ui_sub@@Base+0x1048>
   1ac28:	sub	w2, w2, #0x3d
   1ac2c:	lsl	x4, x6, x2
   1ac30:	mov	x6, #0x0                   	// #0
   1ac34:	b	1aaa0 <mpc_ui_ui_sub@@Base+0x1064>
   1ac38:	clz	x3, x1
   1ac3c:	add	x4, x3, #0x31
   1ac40:	add	x0, x3, #0x40
   1ac44:	cmp	x4, #0x3c
   1ac48:	b.le	1aa24 <mpc_ui_ui_sub@@Base+0xfe8>
   1ac4c:	sub	w4, w4, #0x3d
   1ac50:	mov	x5, #0x0                   	// #0
   1ac54:	lsl	x7, x1, x4
   1ac58:	b	1aa40 <mpc_ui_ui_sub@@Base+0x1004>
   1ac5c:	and	x5, x11, #0xc00000
   1ac60:	cmp	x5, #0x400, lsl #12
   1ac64:	b.eq	1ad60 <mpc_ui_ui_sub@@Base+0x1324>  // b.none
   1ac68:	cmp	x5, #0x800, lsl #12
   1ac6c:	b.eq	1acf0 <mpc_ui_ui_sub@@Base+0x12b4>  // b.none
   1ac70:	cbz	x5, 1ace4 <mpc_ui_ui_sub@@Base+0x12a8>
   1ac74:	mov	x4, #0xffffffffffff        	// #281474976710655
   1ac78:	mov	x5, #0xffffffffffffffff    	// #-1
   1ac7c:	mov	w2, #0x14                  	// #20
   1ac80:	orr	w0, w0, w2
   1ac84:	b	1abe8 <mpc_ui_ui_sub@@Base+0x11ac>
   1ac88:	mov	x3, x9
   1ac8c:	ldp	x19, x20, [sp, #16]
   1ac90:	ldp	x21, x22, [sp, #32]
   1ac94:	b	1a990 <mpc_ui_ui_sub@@Base+0xf54>
   1ac98:	mov	w1, #0x40                  	// #64
   1ac9c:	sub	w1, w1, w2
   1aca0:	lsr	x3, x6, x2
   1aca4:	lsl	x6, x6, x1
   1aca8:	cmp	x6, #0x0
   1acac:	lsl	x5, x4, x1
   1acb0:	cset	x1, ne  // ne = any
   1acb4:	orr	x5, x5, x3
   1acb8:	lsr	x2, x4, x2
   1acbc:	orr	x5, x5, x1
   1acc0:	tst	x5, #0x7
   1acc4:	b.ne	1ab84 <mpc_ui_ui_sub@@Base+0x1148>  // b.any
   1acc8:	tbnz	x2, #51, 1adfc <mpc_ui_ui_sub@@Base+0x13c0>
   1accc:	ubfx	x4, x2, #3, #48
   1acd0:	extr	x5, x2, x5, #3
   1acd4:	mov	w1, #0x0                   	// #0
   1acd8:	tbz	w11, #11, 1a7a8 <mpc_ui_ui_sub@@Base+0xd6c>
   1acdc:	orr	w0, w0, #0x8
   1ace0:	b	1abe8 <mpc_ui_ui_sub@@Base+0x11ac>
   1ace4:	mov	w1, #0x7fff                	// #32767
   1ace8:	mov	x4, #0x0                   	// #0
   1acec:	b	1ac7c <mpc_ui_ui_sub@@Base+0x1240>
   1acf0:	cmp	x8, #0x0
   1acf4:	mov	w2, #0x7fff                	// #32767
   1acf8:	mov	x4, #0xffffffffffff        	// #281474976710655
   1acfc:	csel	w1, w1, w2, eq  // eq = none
   1ad00:	csel	x4, x4, xzr, eq  // eq = none
   1ad04:	csetm	x5, eq  // eq = none
   1ad08:	b	1ac7c <mpc_ui_ui_sub@@Base+0x1240>
   1ad0c:	and	x1, x6, #0xf
   1ad10:	cmp	x1, #0x4
   1ad14:	b.eq	1a9c4 <mpc_ui_ui_sub@@Base+0xf88>  // b.none
   1ad18:	adds	x6, x6, #0x4
   1ad1c:	cinc	x4, x4, cs  // cs = hs, nlast
   1ad20:	b	1a9c4 <mpc_ui_ui_sub@@Base+0xf88>
   1ad24:	cbz	x8, 1a9c4 <mpc_ui_ui_sub@@Base+0xf88>
   1ad28:	adds	x6, x6, #0x8
   1ad2c:	cinc	x4, x4, cs  // cs = hs, nlast
   1ad30:	b	1a9c4 <mpc_ui_ui_sub@@Base+0xf88>
   1ad34:	and	x1, x5, #0xf
   1ad38:	cmp	x1, #0x4
   1ad3c:	b.eq	1ad48 <mpc_ui_ui_sub@@Base+0x130c>  // b.none
   1ad40:	adds	x5, x5, #0x4
   1ad44:	cinc	x2, x2, cs  // cs = hs, nlast
   1ad48:	tbz	x2, #51, 1aba4 <mpc_ui_ui_sub@@Base+0x1168>
   1ad4c:	orr	w0, w0, #0x8
   1ad50:	mov	w1, #0x1                   	// #1
   1ad54:	mov	x4, #0x0                   	// #0
   1ad58:	mov	x5, #0x0                   	// #0
   1ad5c:	b	1abe8 <mpc_ui_ui_sub@@Base+0x11ac>
   1ad60:	cmp	x8, #0x0
   1ad64:	mov	w2, #0x7fff                	// #32767
   1ad68:	mov	x4, #0xffffffffffff        	// #281474976710655
   1ad6c:	csel	w1, w1, w2, ne  // ne = any
   1ad70:	csel	x4, x4, xzr, ne  // ne = any
   1ad74:	csetm	x5, ne  // ne = any
   1ad78:	b	1ac7c <mpc_ui_ui_sub@@Base+0x1240>
   1ad7c:	cbnz	x8, 1a9c4 <mpc_ui_ui_sub@@Base+0xf88>
   1ad80:	b	1ad28 <mpc_ui_ui_sub@@Base+0x12ec>
   1ad84:	mov	x4, #0x2                   	// #2
   1ad88:	cmp	x1, #0xf
   1ad8c:	b.ne	1adb0 <mpc_ui_ui_sub@@Base+0x1374>  // b.any
   1ad90:	tbz	x7, #47, 1adc8 <mpc_ui_ui_sub@@Base+0x138c>
   1ad94:	tbnz	x2, #47, 1adc8 <mpc_ui_ui_sub@@Base+0x138c>
   1ad98:	orr	x4, x2, #0x800000000000
   1ad9c:	mov	w10, w15
   1ada0:	and	x4, x4, #0xffffffffffff
   1ada4:	mov	x5, x6
   1ada8:	mov	w1, #0x7fff                	// #32767
   1adac:	b	1a7a8 <mpc_ui_ui_sub@@Base+0xd6c>
   1adb0:	cmp	x1, #0xb
   1adb4:	b.ne	1a700 <mpc_ui_ui_sub@@Base+0xcc4>  // b.any
   1adb8:	mov	x7, x2
   1adbc:	mov	x5, x6
   1adc0:	mov	x16, x4
   1adc4:	b	1a708 <mpc_ui_ui_sub@@Base+0xccc>
   1adc8:	orr	x4, x7, #0x800000000000
   1adcc:	mov	w10, w12
   1add0:	and	x4, x4, #0xffffffffffff
   1add4:	mov	w1, #0x7fff                	// #32767
   1add8:	b	1a7a8 <mpc_ui_ui_sub@@Base+0xd6c>
   1addc:	cbnz	x8, 1ad48 <mpc_ui_ui_sub@@Base+0x130c>
   1ade0:	adds	x5, x5, #0x8
   1ade4:	cinc	x2, x2, cs  // cs = hs, nlast
   1ade8:	tbnz	x2, #51, 1ad4c <mpc_ui_ui_sub@@Base+0x1310>
   1adec:	b	1aba4 <mpc_ui_ui_sub@@Base+0x1168>
   1adf0:	cbnz	x8, 1ade0 <mpc_ui_ui_sub@@Base+0x13a4>
   1adf4:	tbnz	x2, #51, 1ad4c <mpc_ui_ui_sub@@Base+0x1310>
   1adf8:	b	1aba4 <mpc_ui_ui_sub@@Base+0x1168>
   1adfc:	orr	w0, w0, #0x10
   1ae00:	b	1ad4c <mpc_ui_ui_sub@@Base+0x1310>
   1ae04:	mov	x2, x4
   1ae08:	mov	x4, #0x3                   	// #3
   1ae0c:	b	1ad88 <mpc_ui_ui_sub@@Base+0x134c>
   1ae10:	mov	w10, w15
   1ae14:	mov	x8, x13
   1ae18:	b	1a724 <mpc_ui_ui_sub@@Base+0xce8>
   1ae1c:	nop
   1ae20:	tbz	w0, #0, 1ae30 <mpc_ui_ui_sub@@Base+0x13f4>
   1ae24:	movi	v1.2s, #0x0
   1ae28:	fdiv	s0, s1, s1
   1ae2c:	mrs	x1, fpsr
   1ae30:	tbz	w0, #1, 1ae44 <mpc_ui_ui_sub@@Base+0x1408>
   1ae34:	fmov	s1, #1.000000000000000000e+00
   1ae38:	movi	v2.2s, #0x0
   1ae3c:	fdiv	s0, s1, s2
   1ae40:	mrs	x1, fpsr
   1ae44:	tbz	w0, #2, 1ae64 <mpc_ui_ui_sub@@Base+0x1428>
   1ae48:	mov	w2, #0xc5ae                	// #50606
   1ae4c:	mov	w1, #0x7f7fffff            	// #2139095039
   1ae50:	movk	w2, #0x749d, lsl #16
   1ae54:	fmov	s1, w1
   1ae58:	fmov	s2, w2
   1ae5c:	fadd	s0, s1, s2
   1ae60:	mrs	x1, fpsr
   1ae64:	tbz	w0, #3, 1ae74 <mpc_ui_ui_sub@@Base+0x1438>
   1ae68:	movi	v1.2s, #0x80, lsl #16
   1ae6c:	fmul	s0, s1, s1
   1ae70:	mrs	x1, fpsr
   1ae74:	tbz	w0, #4, 1ae8c <mpc_ui_ui_sub@@Base+0x1450>
   1ae78:	mov	w0, #0x7f7fffff            	// #2139095039
   1ae7c:	fmov	s2, #1.000000000000000000e+00
   1ae80:	fmov	s1, w0
   1ae84:	fsub	s0, s1, s2
   1ae88:	mrs	x0, fpsr
   1ae8c:	ret

Disassembly of section .fini:

000000000001ae90 <.fini>:
   1ae90:	stp	x29, x30, [sp, #-16]!
   1ae94:	mov	x29, sp
   1ae98:	ldp	x29, x30, [sp], #16
   1ae9c:	ret
