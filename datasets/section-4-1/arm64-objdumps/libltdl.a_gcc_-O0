In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_gcc_-O0:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <preopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <preopen_LTX_get_vtable>
  10:	add	x0, x0, #0x0
  14:	ldr	x0, [x0]
  18:	cmp	x0, #0x0
  1c:	b.ne	38 <preopen_LTX_get_vtable+0x38>  // b.any
  20:	mov	x0, #0x48                  	// #72
  24:	bl	0 <lt__zalloc>
  28:	mov	x1, x0
  2c:	adrp	x0, 0 <preopen_LTX_get_vtable>
  30:	add	x0, x0, #0x0
  34:	str	x1, [x0]
  38:	adrp	x0, 0 <preopen_LTX_get_vtable>
  3c:	add	x0, x0, #0x0
  40:	ldr	x0, [x0]
  44:	cmp	x0, #0x0
  48:	b.eq	128 <preopen_LTX_get_vtable+0x128>  // b.none
  4c:	adrp	x0, 0 <preopen_LTX_get_vtable>
  50:	add	x0, x0, #0x0
  54:	ldr	x0, [x0]
  58:	ldr	x0, [x0]
  5c:	cmp	x0, #0x0
  60:	b.ne	128 <preopen_LTX_get_vtable+0x128>  // b.any
  64:	adrp	x0, 0 <preopen_LTX_get_vtable>
  68:	add	x0, x0, #0x0
  6c:	ldr	x0, [x0]
  70:	adrp	x1, 0 <preopen_LTX_get_vtable>
  74:	add	x1, x1, #0x0
  78:	str	x1, [x0]
  7c:	adrp	x0, 0 <preopen_LTX_get_vtable>
  80:	add	x0, x0, #0x0
  84:	ldr	x0, [x0]
  88:	str	xzr, [x0, #8]
  8c:	adrp	x0, 0 <preopen_LTX_get_vtable>
  90:	add	x0, x0, #0x0
  94:	ldr	x0, [x0]
  98:	adrp	x1, 0 <preopen_LTX_get_vtable>
  9c:	add	x1, x1, #0x0
  a0:	str	x1, [x0, #16]
  a4:	adrp	x0, 0 <preopen_LTX_get_vtable>
  a8:	add	x0, x0, #0x0
  ac:	ldr	x0, [x0]
  b0:	adrp	x1, 0 <preopen_LTX_get_vtable>
  b4:	add	x1, x1, #0x0
  b8:	str	x1, [x0, #24]
  bc:	adrp	x0, 0 <preopen_LTX_get_vtable>
  c0:	add	x0, x0, #0x0
  c4:	ldr	x0, [x0]
  c8:	adrp	x1, 0 <preopen_LTX_get_vtable>
  cc:	add	x1, x1, #0x0
  d0:	str	x1, [x0, #32]
  d4:	adrp	x0, 0 <preopen_LTX_get_vtable>
  d8:	add	x0, x0, #0x0
  dc:	ldr	x0, [x0]
  e0:	adrp	x1, 0 <preopen_LTX_get_vtable>
  e4:	add	x1, x1, #0x0
  e8:	str	x1, [x0, #40]
  ec:	adrp	x0, 0 <preopen_LTX_get_vtable>
  f0:	add	x0, x0, #0x0
  f4:	ldr	x0, [x0]
  f8:	adrp	x1, 0 <preopen_LTX_get_vtable>
  fc:	add	x1, x1, #0x0
 100:	str	x1, [x0, #48]
 104:	adrp	x0, 0 <preopen_LTX_get_vtable>
 108:	add	x0, x0, #0x0
 10c:	ldr	x0, [x0]
 110:	ldr	x1, [sp, #24]
 114:	str	x1, [x0, #56]
 118:	adrp	x0, 0 <preopen_LTX_get_vtable>
 11c:	add	x0, x0, #0x0
 120:	ldr	x0, [x0]
 124:	str	wzr, [x0, #64]
 128:	adrp	x0, 0 <preopen_LTX_get_vtable>
 12c:	add	x0, x0, #0x0
 130:	ldr	x0, [x0]
 134:	cmp	x0, #0x0
 138:	b.eq	16c <preopen_LTX_get_vtable+0x16c>  // b.none
 13c:	adrp	x0, 0 <preopen_LTX_get_vtable>
 140:	add	x0, x0, #0x0
 144:	ldr	x0, [x0]
 148:	ldr	x0, [x0, #56]
 14c:	ldr	x1, [sp, #24]
 150:	cmp	x1, x0
 154:	b.eq	16c <preopen_LTX_get_vtable+0x16c>  // b.none
 158:	mov	w0, #0x3                   	// #3
 15c:	bl	0 <lt__error_string>
 160:	bl	0 <lt__set_last_error>
 164:	mov	x0, #0x0                   	// #0
 168:	b	178 <preopen_LTX_get_vtable+0x178>
 16c:	adrp	x0, 0 <preopen_LTX_get_vtable>
 170:	add	x0, x0, #0x0
 174:	ldr	x0, [x0]
 178:	ldp	x29, x30, [sp], #32
 17c:	ret

0000000000000180 <vl_init>:
 180:	stp	x29, x30, [sp, #-48]!
 184:	mov	x29, sp
 188:	str	x0, [sp, #24]
 18c:	str	wzr, [sp, #44]
 190:	adrp	x0, 0 <preopen_LTX_get_vtable>
 194:	add	x0, x0, #0x0
 198:	str	xzr, [x0]
 19c:	adrp	x0, 0 <preopen_LTX_get_vtable>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	x0, [x0]
 1a8:	cmp	x0, #0x0
 1ac:	b.eq	1c4 <vl_init+0x44>  // b.none
 1b0:	adrp	x0, 0 <preopen_LTX_get_vtable>
 1b4:	add	x0, x0, #0x0
 1b8:	ldr	x0, [x0]
 1bc:	bl	59c <lt_dlpreload>
 1c0:	str	w0, [sp, #44]
 1c4:	ldr	w0, [sp, #44]
 1c8:	ldp	x29, x30, [sp], #48
 1cc:	ret

00000000000001d0 <vl_exit>:
 1d0:	stp	x29, x30, [sp, #-32]!
 1d4:	mov	x29, sp
 1d8:	str	x0, [sp, #24]
 1dc:	adrp	x0, 0 <preopen_LTX_get_vtable>
 1e0:	add	x0, x0, #0x0
 1e4:	str	xzr, [x0]
 1e8:	bl	404 <free_symlists>
 1ec:	mov	w0, #0x0                   	// #0
 1f0:	ldp	x29, x30, [sp], #32
 1f4:	ret

00000000000001f8 <vm_open>:
 1f8:	stp	x29, x30, [sp, #-80]!
 1fc:	mov	x29, sp
 200:	str	x0, [sp, #40]
 204:	str	x1, [sp, #32]
 208:	str	x2, [sp, #24]
 20c:	str	xzr, [sp, #64]
 210:	adrp	x0, 0 <preopen_LTX_get_vtable>
 214:	add	x0, x0, #0x0
 218:	ldr	x0, [x0]
 21c:	cmp	x0, #0x0
 220:	b.ne	234 <vm_open+0x3c>  // b.any
 224:	mov	w0, #0x7                   	// #7
 228:	bl	0 <lt__error_string>
 22c:	bl	0 <lt__set_last_error>
 230:	b	314 <vm_open+0x11c>
 234:	ldr	x0, [sp, #32]
 238:	cmp	x0, #0x0
 23c:	b.ne	24c <vm_open+0x54>  // b.any
 240:	adrp	x0, 0 <preopen_LTX_get_vtable>
 244:	add	x0, x0, #0x0
 248:	str	x0, [sp, #32]
 24c:	adrp	x0, 0 <preopen_LTX_get_vtable>
 250:	add	x0, x0, #0x0
 254:	ldr	x0, [x0]
 258:	str	x0, [sp, #72]
 25c:	b	2fc <vm_open+0x104>
 260:	ldr	x0, [sp, #72]
 264:	ldr	x0, [x0, #8]
 268:	str	x0, [sp, #56]
 26c:	b	2e0 <vm_open+0xe8>
 270:	ldr	x0, [sp, #56]
 274:	ldr	x0, [x0, #8]
 278:	cmp	x0, #0x0
 27c:	b.ne	2d4 <vm_open+0xdc>  // b.any
 280:	ldr	x0, [sp, #56]
 284:	ldr	x0, [x0]
 288:	ldr	x1, [sp, #32]
 28c:	bl	0 <strcmp>
 290:	cmp	w0, #0x0
 294:	b.ne	2d4 <vm_open+0xdc>  // b.any
 298:	ldr	x0, [sp, #56]
 29c:	add	x0, x0, #0x10
 2a0:	str	x0, [sp, #48]
 2a4:	ldr	x0, [sp, #48]
 2a8:	ldr	x0, [x0, #8]
 2ac:	cmp	x0, #0x0
 2b0:	b.eq	2d4 <vm_open+0xdc>  // b.none
 2b4:	ldr	x0, [sp, #48]
 2b8:	ldr	x0, [x0]
 2bc:	cmp	x0, #0x0
 2c0:	b.eq	2d4 <vm_open+0xdc>  // b.none
 2c4:	ldr	x0, [sp, #72]
 2c8:	ldr	x0, [x0, #8]
 2cc:	str	x0, [sp, #64]
 2d0:	b	314 <vm_open+0x11c>
 2d4:	ldr	x0, [sp, #56]
 2d8:	add	x0, x0, #0x10
 2dc:	str	x0, [sp, #56]
 2e0:	ldr	x0, [sp, #56]
 2e4:	ldr	x0, [x0]
 2e8:	cmp	x0, #0x0
 2ec:	b.ne	270 <vm_open+0x78>  // b.any
 2f0:	ldr	x0, [sp, #72]
 2f4:	ldr	x0, [x0]
 2f8:	str	x0, [sp, #72]
 2fc:	ldr	x0, [sp, #72]
 300:	cmp	x0, #0x0
 304:	b.ne	260 <vm_open+0x68>  // b.any
 308:	mov	w0, #0x5                   	// #5
 30c:	bl	0 <lt__error_string>
 310:	bl	0 <lt__set_last_error>
 314:	ldr	x0, [sp, #64]
 318:	ldp	x29, x30, [sp], #80
 31c:	ret

0000000000000320 <vm_close>:
 320:	sub	sp, sp, #0x10
 324:	str	x0, [sp, #8]
 328:	str	x1, [sp]
 32c:	str	xzr, [sp]
 330:	mov	w0, #0x0                   	// #0
 334:	add	sp, sp, #0x10
 338:	ret

000000000000033c <vm_sym>:
 33c:	stp	x29, x30, [sp, #-64]!
 340:	mov	x29, sp
 344:	str	x0, [sp, #40]
 348:	str	x1, [sp, #32]
 34c:	str	x2, [sp, #24]
 350:	ldr	x0, [sp, #32]
 354:	str	x0, [sp, #56]
 358:	ldr	x0, [sp, #56]
 35c:	add	x0, x0, #0x10
 360:	ldr	x0, [x0]
 364:	cmp	x0, #0x0
 368:	b.eq	39c <vm_sym+0x60>  // b.none
 36c:	ldr	x0, [sp, #56]
 370:	add	x0, x0, #0x10
 374:	ldr	x2, [x0]
 378:	adrp	x0, 0 <preopen_LTX_get_vtable>
 37c:	add	x1, x0, #0x0
 380:	mov	x0, x2
 384:	bl	0 <strcmp>
 388:	cmp	w0, #0x0
 38c:	b.ne	39c <vm_sym+0x60>  // b.any
 390:	ldr	x0, [sp, #56]
 394:	add	x0, x0, #0x10
 398:	str	x0, [sp, #56]
 39c:	ldr	x0, [sp, #56]
 3a0:	add	x0, x0, #0x20
 3a4:	str	x0, [sp, #56]
 3a8:	b	3dc <vm_sym+0xa0>
 3ac:	ldr	x0, [sp, #56]
 3b0:	ldr	x0, [x0]
 3b4:	ldr	x1, [sp, #24]
 3b8:	bl	0 <strcmp>
 3bc:	cmp	w0, #0x0
 3c0:	b.ne	3d0 <vm_sym+0x94>  // b.any
 3c4:	ldr	x0, [sp, #56]
 3c8:	ldr	x0, [x0, #8]
 3cc:	b	3fc <vm_sym+0xc0>
 3d0:	ldr	x0, [sp, #56]
 3d4:	add	x0, x0, #0x10
 3d8:	str	x0, [sp, #56]
 3dc:	ldr	x0, [sp, #56]
 3e0:	ldr	x0, [x0]
 3e4:	cmp	x0, #0x0
 3e8:	b.ne	3ac <vm_sym+0x70>  // b.any
 3ec:	mov	w0, #0xa                   	// #10
 3f0:	bl	0 <lt__error_string>
 3f4:	bl	0 <lt__set_last_error>
 3f8:	mov	x0, #0x0                   	// #0
 3fc:	ldp	x29, x30, [sp], #64
 400:	ret

0000000000000404 <free_symlists>:
 404:	stp	x29, x30, [sp, #-32]!
 408:	mov	x29, sp
 40c:	adrp	x0, 0 <preopen_LTX_get_vtable>
 410:	add	x0, x0, #0x0
 414:	ldr	x0, [x0]
 418:	str	x0, [sp, #24]
 41c:	b	440 <free_symlists+0x3c>
 420:	ldr	x0, [sp, #24]
 424:	ldr	x0, [x0]
 428:	str	x0, [sp, #16]
 42c:	ldr	x0, [sp, #24]
 430:	bl	0 <free>
 434:	str	xzr, [sp, #24]
 438:	ldr	x0, [sp, #16]
 43c:	str	x0, [sp, #24]
 440:	ldr	x0, [sp, #24]
 444:	cmp	x0, #0x0
 448:	b.ne	420 <free_symlists+0x1c>  // b.any
 44c:	adrp	x0, 0 <preopen_LTX_get_vtable>
 450:	add	x0, x0, #0x0
 454:	str	xzr, [x0]
 458:	mov	w0, #0x0                   	// #0
 45c:	ldp	x29, x30, [sp], #32
 460:	ret

0000000000000464 <add_symlist>:
 464:	stp	x29, x30, [sp, #-64]!
 468:	mov	x29, sp
 46c:	str	x0, [sp, #24]
 470:	str	wzr, [sp, #52]
 474:	adrp	x0, 0 <preopen_LTX_get_vtable>
 478:	add	x0, x0, #0x0
 47c:	ldr	x0, [x0]
 480:	str	x0, [sp, #56]
 484:	b	494 <add_symlist+0x30>
 488:	ldr	x0, [sp, #56]
 48c:	ldr	x0, [x0]
 490:	str	x0, [sp, #56]
 494:	ldr	x0, [sp, #56]
 498:	cmp	x0, #0x0
 49c:	b.eq	4b4 <add_symlist+0x50>  // b.none
 4a0:	ldr	x0, [sp, #56]
 4a4:	ldr	x0, [x0, #8]
 4a8:	ldr	x1, [sp, #24]
 4ac:	cmp	x1, x0
 4b0:	b.ne	488 <add_symlist+0x24>  // b.any
 4b4:	ldr	x0, [sp, #56]
 4b8:	cmp	x0, #0x0
 4bc:	b.ne	56c <add_symlist+0x108>  // b.any
 4c0:	mov	x0, #0x10                  	// #16
 4c4:	bl	0 <lt__zalloc>
 4c8:	str	x0, [sp, #40]
 4cc:	ldr	x0, [sp, #40]
 4d0:	cmp	x0, #0x0
 4d4:	b.eq	560 <add_symlist+0xfc>  // b.none
 4d8:	ldr	x0, [sp, #40]
 4dc:	ldr	x1, [sp, #24]
 4e0:	str	x1, [x0, #8]
 4e4:	adrp	x0, 0 <preopen_LTX_get_vtable>
 4e8:	add	x0, x0, #0x0
 4ec:	ldr	x1, [x0]
 4f0:	ldr	x0, [sp, #40]
 4f4:	str	x1, [x0]
 4f8:	adrp	x0, 0 <preopen_LTX_get_vtable>
 4fc:	add	x0, x0, #0x0
 500:	ldr	x1, [sp, #40]
 504:	str	x1, [x0]
 508:	ldr	x0, [sp, #24]
 50c:	add	x0, x0, #0x10
 510:	ldr	x0, [x0]
 514:	cmp	x0, #0x0
 518:	b.eq	56c <add_symlist+0x108>  // b.none
 51c:	ldr	x0, [sp, #24]
 520:	add	x0, x0, #0x10
 524:	ldr	x2, [x0]
 528:	adrp	x0, 0 <preopen_LTX_get_vtable>
 52c:	add	x1, x0, #0x0
 530:	mov	x0, x2
 534:	bl	0 <strcmp>
 538:	cmp	w0, #0x0
 53c:	b.ne	56c <add_symlist+0x108>  // b.any
 540:	ldr	x0, [sp, #24]
 544:	add	x1, x0, #0x10
 548:	add	x0, sp, #0x20
 54c:	ldr	x1, [x1, #8]
 550:	str	x1, [x0]
 554:	ldr	x0, [sp, #32]
 558:	blr	x0
 55c:	b	56c <add_symlist+0x108>
 560:	ldr	w0, [sp, #52]
 564:	add	w0, w0, #0x1
 568:	str	w0, [sp, #52]
 56c:	ldr	w0, [sp, #52]
 570:	ldp	x29, x30, [sp], #64
 574:	ret

0000000000000578 <lt_dlpreload_default>:
 578:	sub	sp, sp, #0x10
 57c:	str	x0, [sp, #8]
 580:	adrp	x0, 0 <preopen_LTX_get_vtable>
 584:	add	x0, x0, #0x0
 588:	ldr	x1, [sp, #8]
 58c:	str	x1, [x0]
 590:	mov	w0, #0x0                   	// #0
 594:	add	sp, sp, #0x10
 598:	ret

000000000000059c <lt_dlpreload>:
 59c:	stp	x29, x30, [sp, #-48]!
 5a0:	mov	x29, sp
 5a4:	str	x0, [sp, #24]
 5a8:	str	wzr, [sp, #44]
 5ac:	ldr	x0, [sp, #24]
 5b0:	cmp	x0, #0x0
 5b4:	b.eq	5c8 <lt_dlpreload+0x2c>  // b.none
 5b8:	ldr	x0, [sp, #24]
 5bc:	bl	464 <add_symlist>
 5c0:	str	w0, [sp, #44]
 5c4:	b	5f4 <lt_dlpreload+0x58>
 5c8:	bl	404 <free_symlists>
 5cc:	adrp	x0, 0 <preopen_LTX_get_vtable>
 5d0:	add	x0, x0, #0x0
 5d4:	ldr	x0, [x0]
 5d8:	cmp	x0, #0x0
 5dc:	b.eq	5f4 <lt_dlpreload+0x58>  // b.none
 5e0:	adrp	x0, 0 <preopen_LTX_get_vtable>
 5e4:	add	x0, x0, #0x0
 5e8:	ldr	x0, [x0]
 5ec:	bl	59c <lt_dlpreload>
 5f0:	str	w0, [sp, #44]
 5f4:	ldr	w0, [sp, #44]
 5f8:	ldp	x29, x30, [sp], #48
 5fc:	ret

0000000000000600 <lt_dlpreload_open>:
 600:	stp	x29, x30, [sp, #-80]!
 604:	mov	x29, sp
 608:	str	x0, [sp, #24]
 60c:	str	x1, [sp, #16]
 610:	str	wzr, [sp, #68]
 614:	str	wzr, [sp, #64]
 618:	adrp	x0, 0 <preopen_LTX_get_vtable>
 61c:	add	x0, x0, #0x0
 620:	ldr	x0, [x0]
 624:	str	x0, [sp, #72]
 628:	b	750 <lt_dlpreload_open+0x150>
 62c:	ldr	x0, [sp, #24]
 630:	cmp	x0, #0x0
 634:	b.eq	654 <lt_dlpreload_open+0x54>  // b.none
 638:	ldr	x0, [sp, #72]
 63c:	ldr	x0, [x0, #8]
 640:	ldr	x0, [x0]
 644:	ldr	x1, [sp, #24]
 648:	bl	0 <strcmp>
 64c:	cmp	w0, #0x0
 650:	b.eq	684 <lt_dlpreload_open+0x84>  // b.none
 654:	ldr	x0, [sp, #24]
 658:	cmp	x0, #0x0
 65c:	b.ne	744 <lt_dlpreload_open+0x144>  // b.any
 660:	ldr	x0, [sp, #72]
 664:	ldr	x0, [x0, #8]
 668:	ldr	x2, [x0]
 66c:	adrp	x0, 0 <preopen_LTX_get_vtable>
 670:	add	x1, x0, #0x0
 674:	mov	x0, x2
 678:	bl	0 <strcmp>
 67c:	cmp	w0, #0x0
 680:	b.ne	744 <lt_dlpreload_open+0x144>  // b.any
 684:	str	wzr, [sp, #60]
 688:	ldr	w0, [sp, #64]
 68c:	add	w0, w0, #0x1
 690:	str	w0, [sp, #64]
 694:	b	710 <lt_dlpreload_open+0x110>
 698:	ldr	x0, [sp, #48]
 69c:	ldr	x0, [x0, #8]
 6a0:	cmp	x0, #0x0
 6a4:	b.ne	710 <lt_dlpreload_open+0x110>  // b.any
 6a8:	ldr	x0, [sp, #48]
 6ac:	ldr	x2, [x0]
 6b0:	adrp	x0, 0 <preopen_LTX_get_vtable>
 6b4:	add	x1, x0, #0x0
 6b8:	mov	x0, x2
 6bc:	bl	0 <strcmp>
 6c0:	cmp	w0, #0x0
 6c4:	b.eq	710 <lt_dlpreload_open+0x110>  // b.none
 6c8:	ldr	x0, [sp, #48]
 6cc:	ldr	x0, [x0]
 6d0:	bl	0 <lt_dlopen>
 6d4:	str	x0, [sp, #40]
 6d8:	ldr	x0, [sp, #40]
 6dc:	cmp	x0, #0x0
 6e0:	b.ne	6f4 <lt_dlpreload_open+0xf4>  // b.any
 6e4:	ldr	w0, [sp, #68]
 6e8:	add	w0, w0, #0x1
 6ec:	str	w0, [sp, #68]
 6f0:	b	710 <lt_dlpreload_open+0x110>
 6f4:	ldr	x1, [sp, #16]
 6f8:	ldr	x0, [sp, #40]
 6fc:	blr	x1
 700:	mov	w1, w0
 704:	ldr	w0, [sp, #68]
 708:	add	w0, w0, w1
 70c:	str	w0, [sp, #68]
 710:	ldr	x0, [sp, #72]
 714:	ldr	x1, [x0, #8]
 718:	ldr	w0, [sp, #60]
 71c:	add	w0, w0, #0x1
 720:	str	w0, [sp, #60]
 724:	ldr	w0, [sp, #60]
 728:	lsl	x0, x0, #4
 72c:	add	x0, x1, x0
 730:	str	x0, [sp, #48]
 734:	ldr	x0, [sp, #48]
 738:	ldr	x0, [x0]
 73c:	cmp	x0, #0x0
 740:	b.ne	698 <lt_dlpreload_open+0x98>  // b.any
 744:	ldr	x0, [sp, #72]
 748:	ldr	x0, [x0]
 74c:	str	x0, [sp, #72]
 750:	ldr	x0, [sp, #72]
 754:	cmp	x0, #0x0
 758:	b.ne	62c <lt_dlpreload_open+0x2c>  // b.any
 75c:	ldr	w0, [sp, #64]
 760:	cmp	w0, #0x0
 764:	b.ne	780 <lt_dlpreload_open+0x180>  // b.any
 768:	mov	w0, #0x8                   	// #8
 76c:	bl	0 <lt__error_string>
 770:	bl	0 <lt__set_last_error>
 774:	ldr	w0, [sp, #68]
 778:	add	w0, w0, #0x1
 77c:	str	w0, [sp, #68]
 780:	ldr	w0, [sp, #68]
 784:	ldp	x29, x30, [sp], #80
 788:	ret

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <stderr>
   c:	add	x0, x0, #0x0
  10:	ldr	x0, [x0]
  14:	mov	x3, x0
  18:	mov	x2, #0xf                   	// #15
  1c:	mov	x1, #0x1                   	// #1
  20:	adrp	x0, 0 <alloc_die_default>
  24:	add	x0, x0, #0x0
  28:	bl	0 <fwrite>
  2c:	mov	w0, #0x1                   	// #1
  30:	bl	0 <exit>

0000000000000034 <lt__malloc>:
  34:	stp	x29, x30, [sp, #-48]!
  38:	mov	x29, sp
  3c:	str	x0, [sp, #24]
  40:	ldr	x0, [sp, #24]
  44:	bl	0 <malloc>
  48:	str	x0, [sp, #40]
  4c:	ldr	x0, [sp, #40]
  50:	cmp	x0, #0x0
  54:	b.ne	68 <lt__malloc+0x34>  // b.any
  58:	adrp	x0, 0 <alloc_die_default>
  5c:	add	x0, x0, #0x0
  60:	ldr	x0, [x0]
  64:	blr	x0
  68:	ldr	x0, [sp, #40]
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

0000000000000074 <lt__zalloc>:
  74:	stp	x29, x30, [sp, #-48]!
  78:	mov	x29, sp
  7c:	str	x0, [sp, #24]
  80:	ldr	x0, [sp, #24]
  84:	bl	34 <lt__malloc>
  88:	str	x0, [sp, #40]
  8c:	ldr	x0, [sp, #40]
  90:	cmp	x0, #0x0
  94:	b.eq	a8 <lt__zalloc+0x34>  // b.none
  98:	ldr	x2, [sp, #24]
  9c:	mov	w1, #0x0                   	// #0
  a0:	ldr	x0, [sp, #40]
  a4:	bl	0 <memset>
  a8:	ldr	x0, [sp, #40]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret

00000000000000b4 <lt__realloc>:
  b4:	stp	x29, x30, [sp, #-32]!
  b8:	mov	x29, sp
  bc:	str	x0, [sp, #24]
  c0:	str	x1, [sp, #16]
  c4:	ldr	x1, [sp, #16]
  c8:	ldr	x0, [sp, #24]
  cc:	bl	0 <realloc>
  d0:	str	x0, [sp, #24]
  d4:	ldr	x0, [sp, #24]
  d8:	cmp	x0, #0x0
  dc:	b.ne	f0 <lt__realloc+0x3c>  // b.any
  e0:	adrp	x0, 0 <alloc_die_default>
  e4:	add	x0, x0, #0x0
  e8:	ldr	x0, [x0]
  ec:	blr	x0
  f0:	ldr	x0, [sp, #24]
  f4:	ldp	x29, x30, [sp], #32
  f8:	ret

00000000000000fc <lt__memdup>:
  fc:	stp	x29, x30, [sp, #-48]!
 100:	mov	x29, sp
 104:	str	x0, [sp, #24]
 108:	str	x1, [sp, #16]
 10c:	ldr	x0, [sp, #16]
 110:	bl	34 <lt__malloc>
 114:	str	x0, [sp, #40]
 118:	ldr	x0, [sp, #40]
 11c:	cmp	x0, #0x0
 120:	b.eq	138 <lt__memdup+0x3c>  // b.none
 124:	ldr	x2, [sp, #16]
 128:	ldr	x1, [sp, #24]
 12c:	ldr	x0, [sp, #40]
 130:	bl	0 <memcpy>
 134:	b	13c <lt__memdup+0x40>
 138:	mov	x0, #0x0                   	// #0
 13c:	ldp	x29, x30, [sp], #48
 140:	ret

0000000000000144 <lt__strdup>:
 144:	stp	x29, x30, [sp, #-32]!
 148:	mov	x29, sp
 14c:	str	x0, [sp, #24]
 150:	ldr	x0, [sp, #24]
 154:	bl	0 <strlen>
 158:	add	x0, x0, #0x1
 15c:	mov	x1, x0
 160:	ldr	x0, [sp, #24]
 164:	bl	fc <lt__memdup>
 168:	ldp	x29, x30, [sp], #32
 16c:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <loader_callback>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x0, [x0, #8]
  18:	str	x0, [sp, #40]
  1c:	ldr	x0, [sp, #16]
  20:	str	x0, [sp, #32]
  24:	ldr	x0, [sp, #40]
  28:	cmp	x0, #0x0
  2c:	b.ne	50 <loader_callback+0x50>  // b.any
  30:	adrp	x0, 0 <loader_callback>
  34:	add	x3, x0, #0x0
  38:	mov	w2, #0x36                  	// #54
  3c:	adrp	x0, 0 <loader_callback>
  40:	add	x1, x0, #0x0
  44:	adrp	x0, 0 <loader_callback>
  48:	add	x0, x0, #0x0
  4c:	bl	0 <__assert_fail>
  50:	ldr	x0, [sp, #40]
  54:	ldr	x0, [x0]
  58:	ldr	x1, [sp, #32]
  5c:	bl	0 <strcmp>
  60:	cmp	w0, #0x0
  64:	b.ne	70 <loader_callback+0x70>  // b.any
  68:	ldr	x0, [sp, #24]
  6c:	b	74 <loader_callback+0x74>
  70:	mov	x0, #0x0                   	// #0
  74:	ldp	x29, x30, [sp], #48
  78:	ret

000000000000007c <lt_dlloader_add>:
  7c:	stp	x29, x30, [sp, #-48]!
  80:	mov	x29, sp
  84:	str	x0, [sp, #24]
  88:	ldr	x0, [sp, #24]
  8c:	cmp	x0, #0x0
  90:	b.eq	e4 <lt_dlloader_add+0x68>  // b.none
  94:	ldr	x0, [sp, #24]
  98:	ldr	x0, [x0, #16]
  9c:	cmp	x0, #0x0
  a0:	b.eq	e4 <lt_dlloader_add+0x68>  // b.none
  a4:	ldr	x0, [sp, #24]
  a8:	ldr	x0, [x0, #24]
  ac:	cmp	x0, #0x0
  b0:	b.eq	e4 <lt_dlloader_add+0x68>  // b.none
  b4:	ldr	x0, [sp, #24]
  b8:	ldr	x0, [x0, #32]
  bc:	cmp	x0, #0x0
  c0:	b.eq	e4 <lt_dlloader_add+0x68>  // b.none
  c4:	ldr	x0, [sp, #24]
  c8:	ldr	w0, [x0, #64]
  cc:	cmp	w0, #0x0
  d0:	b.eq	f8 <lt_dlloader_add+0x7c>  // b.none
  d4:	ldr	x0, [sp, #24]
  d8:	ldr	w0, [x0, #64]
  dc:	cmp	w0, #0x1
  e0:	b.eq	f8 <lt_dlloader_add+0x7c>  // b.none
  e4:	mov	w0, #0x2                   	// #2
  e8:	bl	0 <lt__error_string>
  ec:	bl	0 <lt__set_last_error>
  f0:	mov	w0, #0x1                   	// #1
  f4:	b	1bc <lt_dlloader_add+0x140>
  f8:	ldr	x0, [sp, #24]
  fc:	bl	0 <lt__slist_box>
 100:	str	x0, [sp, #40]
 104:	ldr	x0, [sp, #40]
 108:	cmp	x0, #0x0
 10c:	b.ne	128 <lt_dlloader_add+0xac>  // b.any
 110:	adrp	x0, 0 <lt__alloc_die>
 114:	add	x0, x0, #0x0
 118:	ldr	x0, [x0]
 11c:	blr	x0
 120:	mov	w0, #0x1                   	// #1
 124:	b	1bc <lt_dlloader_add+0x140>
 128:	ldr	x0, [sp, #24]
 12c:	ldr	w0, [x0, #64]
 130:	cmp	w0, #0x0
 134:	b.ne	164 <lt_dlloader_add+0xe8>  // b.any
 138:	adrp	x0, 0 <loader_callback>
 13c:	add	x0, x0, #0x0
 140:	ldr	x0, [x0]
 144:	mov	x1, x0
 148:	ldr	x0, [sp, #40]
 14c:	bl	0 <lt__slist_cons>
 150:	mov	x1, x0
 154:	adrp	x0, 0 <loader_callback>
 158:	add	x0, x0, #0x0
 15c:	str	x1, [x0]
 160:	b	1b8 <lt_dlloader_add+0x13c>
 164:	ldr	x0, [sp, #24]
 168:	ldr	w0, [x0, #64]
 16c:	cmp	w0, #0x1
 170:	b.eq	194 <lt_dlloader_add+0x118>  // b.none
 174:	adrp	x0, 0 <loader_callback>
 178:	add	x3, x0, #0x0
 17c:	mov	w2, #0x5e                  	// #94
 180:	adrp	x0, 0 <loader_callback>
 184:	add	x1, x0, #0x0
 188:	adrp	x0, 0 <loader_callback>
 18c:	add	x0, x0, #0x0
 190:	bl	0 <__assert_fail>
 194:	adrp	x0, 0 <loader_callback>
 198:	add	x0, x0, #0x0
 19c:	ldr	x0, [x0]
 1a0:	ldr	x1, [sp, #40]
 1a4:	bl	0 <lt__slist_concat>
 1a8:	mov	x1, x0
 1ac:	adrp	x0, 0 <loader_callback>
 1b0:	add	x0, x0, #0x0
 1b4:	str	x1, [x0]
 1b8:	mov	w0, #0x0                   	// #0
 1bc:	ldp	x29, x30, [sp], #48
 1c0:	ret

00000000000001c4 <lt_dlloader_next>:
 1c4:	sub	sp, sp, #0x20
 1c8:	str	x0, [sp, #8]
 1cc:	ldr	x0, [sp, #8]
 1d0:	str	x0, [sp, #24]
 1d4:	ldr	x0, [sp, #24]
 1d8:	cmp	x0, #0x0
 1dc:	b.eq	1ec <lt_dlloader_next+0x28>  // b.none
 1e0:	ldr	x0, [sp, #24]
 1e4:	ldr	x0, [x0]
 1e8:	b	1f8 <lt_dlloader_next+0x34>
 1ec:	adrp	x0, 0 <loader_callback>
 1f0:	add	x0, x0, #0x0
 1f4:	ldr	x0, [x0]
 1f8:	add	sp, sp, #0x20
 1fc:	ret

0000000000000200 <lt_dlloader_get>:
 200:	sub	sp, sp, #0x10
 204:	str	x0, [sp, #8]
 208:	ldr	x0, [sp, #8]
 20c:	cmp	x0, #0x0
 210:	b.eq	220 <lt_dlloader_get+0x20>  // b.none
 214:	ldr	x0, [sp, #8]
 218:	ldr	x0, [x0, #8]
 21c:	b	224 <lt_dlloader_get+0x24>
 220:	mov	x0, #0x0                   	// #0
 224:	add	sp, sp, #0x10
 228:	ret

000000000000022c <lt_dlloader_remove>:
 22c:	stp	x29, x30, [sp, #-80]!
 230:	mov	x29, sp
 234:	str	x0, [sp, #24]
 238:	ldr	x0, [sp, #24]
 23c:	bl	37c <lt_dlloader_find>
 240:	str	x0, [sp, #56]
 244:	str	xzr, [sp, #72]
 248:	str	wzr, [sp, #68]
 24c:	str	wzr, [sp, #64]
 250:	ldr	x0, [sp, #56]
 254:	cmp	x0, #0x0
 258:	b.ne	270 <lt_dlloader_remove+0x44>  // b.any
 25c:	mov	w0, #0x2                   	// #2
 260:	bl	0 <lt__error_string>
 264:	bl	0 <lt__set_last_error>
 268:	mov	x0, #0x0                   	// #0
 26c:	b	374 <lt_dlloader_remove+0x148>
 270:	mov	x1, #0x0                   	// #0
 274:	adrp	x0, 0 <loader_callback>
 278:	add	x0, x0, #0x0
 27c:	bl	0 <lt_dlinterface_register>
 280:	str	x0, [sp, #48]
 284:	b	2c4 <lt_dlloader_remove+0x98>
 288:	ldr	x0, [sp, #72]
 28c:	str	x0, [sp, #40]
 290:	ldr	x0, [sp, #40]
 294:	ldr	x0, [x0, #8]
 298:	ldr	x1, [sp, #56]
 29c:	cmp	x1, x0
 2a0:	b.ne	2c4 <lt_dlloader_remove+0x98>  // b.any
 2a4:	mov	w0, #0x1                   	// #1
 2a8:	str	w0, [sp, #68]
 2ac:	ldr	x0, [sp, #72]
 2b0:	bl	0 <lt_dlisresident>
 2b4:	cmp	w0, #0x0
 2b8:	b.eq	2c4 <lt_dlloader_remove+0x98>  // b.none
 2bc:	mov	w0, #0x1                   	// #1
 2c0:	str	w0, [sp, #64]
 2c4:	ldr	x1, [sp, #72]
 2c8:	ldr	x0, [sp, #48]
 2cc:	bl	0 <lt_dlhandle_iterate>
 2d0:	str	x0, [sp, #72]
 2d4:	ldr	x0, [sp, #72]
 2d8:	cmp	x0, #0x0
 2dc:	b.ne	288 <lt_dlloader_remove+0x5c>  // b.any
 2e0:	ldr	x0, [sp, #48]
 2e4:	bl	0 <lt_dlinterface_free>
 2e8:	ldr	w0, [sp, #68]
 2ec:	cmp	w0, #0x0
 2f0:	b.eq	314 <lt_dlloader_remove+0xe8>  // b.none
 2f4:	ldr	w0, [sp, #64]
 2f8:	cmp	w0, #0x0
 2fc:	b.ne	30c <lt_dlloader_remove+0xe0>  // b.any
 300:	mov	w0, #0x4                   	// #4
 304:	bl	0 <lt__error_string>
 308:	bl	0 <lt__set_last_error>
 30c:	mov	x0, #0x0                   	// #0
 310:	b	374 <lt_dlloader_remove+0x148>
 314:	ldr	x0, [sp, #56]
 318:	cmp	x0, #0x0
 31c:	b.eq	354 <lt_dlloader_remove+0x128>  // b.none
 320:	ldr	x0, [sp, #56]
 324:	ldr	x0, [x0, #48]
 328:	cmp	x0, #0x0
 32c:	b.eq	354 <lt_dlloader_remove+0x128>  // b.none
 330:	ldr	x0, [sp, #56]
 334:	ldr	x1, [x0, #48]
 338:	ldr	x0, [sp, #56]
 33c:	ldr	x0, [x0, #56]
 340:	blr	x1
 344:	cmp	w0, #0x0
 348:	b.eq	354 <lt_dlloader_remove+0x128>  // b.none
 34c:	mov	x0, #0x0                   	// #0
 350:	b	374 <lt_dlloader_remove+0x148>
 354:	ldr	x2, [sp, #24]
 358:	adrp	x0, 0 <loader_callback>
 35c:	add	x1, x0, #0x0
 360:	adrp	x0, 0 <loader_callback>
 364:	add	x0, x0, #0x0
 368:	bl	0 <lt__slist_remove>
 36c:	bl	0 <lt__slist_unbox>
 370:	nop
 374:	ldp	x29, x30, [sp], #80
 378:	ret

000000000000037c <lt_dlloader_find>:
 37c:	stp	x29, x30, [sp, #-32]!
 380:	mov	x29, sp
 384:	str	x0, [sp, #24]
 388:	adrp	x0, 0 <loader_callback>
 38c:	add	x0, x0, #0x0
 390:	ldr	x3, [x0]
 394:	ldr	x2, [sp, #24]
 398:	adrp	x0, 0 <loader_callback>
 39c:	add	x1, x0, #0x0
 3a0:	mov	x0, x3
 3a4:	bl	0 <lt__slist_find>
 3a8:	bl	200 <lt_dlloader_get>
 3ac:	ldp	x29, x30, [sp], #32
 3b0:	ret

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	wzr, [sp, #40]
  10:	mov	w0, #0xffffffff            	// #-1
  14:	str	w0, [sp, #44]
  18:	str	xzr, [sp, #32]
  1c:	ldr	x0, [sp, #24]
  20:	cmp	x0, #0x0
  24:	b.ne	48 <lt_dladderror+0x48>  // b.any
  28:	adrp	x0, 0 <lt_dladderror>
  2c:	add	x3, x0, #0x0
  30:	mov	w2, #0x35                  	// #53
  34:	adrp	x0, 0 <lt_dladderror>
  38:	add	x1, x0, #0x0
  3c:	adrp	x0, 0 <lt_dladderror>
  40:	add	x0, x0, #0x0
  44:	bl	0 <__assert_fail>
  48:	adrp	x0, 0 <lt_dladderror>
  4c:	add	x0, x0, #0x0
  50:	ldr	w0, [x0]
  54:	sub	w0, w0, #0x14
  58:	str	w0, [sp, #40]
  5c:	adrp	x0, 0 <lt_dladderror>
  60:	add	x0, x0, #0x0
  64:	ldr	x2, [x0]
  68:	ldr	w0, [sp, #40]
  6c:	add	w0, w0, #0x1
  70:	sxtw	x0, w0
  74:	lsl	x0, x0, #3
  78:	mov	x1, x0
  7c:	mov	x0, x2
  80:	bl	0 <lt__realloc>
  84:	str	x0, [sp, #32]
  88:	ldr	x0, [sp, #32]
  8c:	cmp	x0, #0x0
  90:	b.eq	e4 <lt_dladderror+0xe4>  // b.none
  94:	adrp	x0, 0 <lt_dladderror>
  98:	add	x0, x0, #0x0
  9c:	ldr	x1, [sp, #32]
  a0:	str	x1, [x0]
  a4:	adrp	x0, 0 <lt_dladderror>
  a8:	add	x0, x0, #0x0
  ac:	ldr	x1, [x0]
  b0:	ldrsw	x0, [sp, #40]
  b4:	lsl	x0, x0, #3
  b8:	add	x0, x1, x0
  bc:	ldr	x1, [sp, #24]
  c0:	str	x1, [x0]
  c4:	adrp	x0, 0 <lt_dladderror>
  c8:	add	x0, x0, #0x0
  cc:	ldr	w0, [x0]
  d0:	add	w2, w0, #0x1
  d4:	adrp	x1, 0 <lt_dladderror>
  d8:	add	x1, x1, #0x0
  dc:	str	w2, [x1]
  e0:	str	w0, [sp, #44]
  e4:	ldr	w0, [sp, #44]
  e8:	ldp	x29, x30, [sp], #48
  ec:	ret

00000000000000f0 <lt_dlseterror>:
  f0:	stp	x29, x30, [sp, #-48]!
  f4:	mov	x29, sp
  f8:	str	w0, [sp, #28]
  fc:	str	wzr, [sp, #44]
 100:	adrp	x0, 0 <lt_dladderror>
 104:	add	x0, x0, #0x0
 108:	ldr	w0, [x0]
 10c:	ldr	w1, [sp, #28]
 110:	cmp	w1, w0
 114:	b.ge	124 <lt_dlseterror+0x34>  // b.tcont
 118:	ldr	w0, [sp, #28]
 11c:	cmp	w0, #0x0
 120:	b.ge	140 <lt_dlseterror+0x50>  // b.tcont
 124:	mov	w0, #0xe                   	// #14
 128:	bl	1ac <lt__error_string>
 12c:	bl	250 <lt__set_last_error>
 130:	ldr	w0, [sp, #44]
 134:	add	w0, w0, #0x1
 138:	str	w0, [sp, #44]
 13c:	b	1a0 <lt_dlseterror+0xb0>
 140:	ldr	w0, [sp, #28]
 144:	cmp	w0, #0x13
 148:	b.gt	17c <lt_dlseterror+0x8c>
 14c:	ldrsw	x1, [sp, #28]
 150:	mov	x0, x1
 154:	lsl	x0, x0, #2
 158:	add	x0, x0, x1
 15c:	lsl	x0, x0, #2
 160:	add	x0, x0, x1
 164:	lsl	x0, x0, #1
 168:	adrp	x1, 0 <lt_dladderror>
 16c:	add	x1, x1, #0x0
 170:	add	x0, x0, x1
 174:	bl	250 <lt__set_last_error>
 178:	b	1a0 <lt_dlseterror+0xb0>
 17c:	adrp	x0, 0 <lt_dladderror>
 180:	add	x0, x0, #0x0
 184:	ldr	x1, [x0]
 188:	ldrsw	x0, [sp, #28]
 18c:	lsl	x0, x0, #3
 190:	sub	x0, x0, #0xa0
 194:	add	x0, x1, x0
 198:	ldr	x0, [x0]
 19c:	bl	250 <lt__set_last_error>
 1a0:	ldr	w0, [sp, #44]
 1a4:	ldp	x29, x30, [sp], #48
 1a8:	ret

00000000000001ac <lt__error_string>:
 1ac:	stp	x29, x30, [sp, #-32]!
 1b0:	mov	x29, sp
 1b4:	str	w0, [sp, #28]
 1b8:	ldr	w0, [sp, #28]
 1bc:	cmp	w0, #0x0
 1c0:	b.ge	1e4 <lt__error_string+0x38>  // b.tcont
 1c4:	adrp	x0, 0 <lt_dladderror>
 1c8:	add	x3, x0, #0x0
 1cc:	mov	w2, #0x5f                  	// #95
 1d0:	adrp	x0, 0 <lt_dladderror>
 1d4:	add	x1, x0, #0x0
 1d8:	adrp	x0, 0 <lt_dladderror>
 1dc:	add	x0, x0, #0x0
 1e0:	bl	0 <__assert_fail>
 1e4:	ldr	w0, [sp, #28]
 1e8:	cmp	w0, #0x13
 1ec:	b.le	210 <lt__error_string+0x64>
 1f0:	adrp	x0, 0 <lt_dladderror>
 1f4:	add	x3, x0, #0x0
 1f8:	mov	w2, #0x60                  	// #96
 1fc:	adrp	x0, 0 <lt_dladderror>
 200:	add	x1, x0, #0x0
 204:	adrp	x0, 0 <lt_dladderror>
 208:	add	x0, x0, #0x0
 20c:	bl	0 <__assert_fail>
 210:	ldrsw	x1, [sp, #28]
 214:	mov	x0, x1
 218:	lsl	x0, x0, #2
 21c:	add	x0, x0, x1
 220:	lsl	x0, x0, #2
 224:	add	x0, x0, x1
 228:	lsl	x0, x0, #1
 22c:	adrp	x1, 0 <lt_dladderror>
 230:	add	x1, x1, #0x0
 234:	add	x0, x0, x1
 238:	ldp	x29, x30, [sp], #32
 23c:	ret

0000000000000240 <lt__get_last_error>:
 240:	adrp	x0, 0 <lt_dladderror>
 244:	add	x0, x0, #0x0
 248:	ldr	x0, [x0]
 24c:	ret

0000000000000250 <lt__set_last_error>:
 250:	sub	sp, sp, #0x10
 254:	str	x0, [sp, #8]
 258:	adrp	x0, 0 <lt_dladderror>
 25c:	add	x0, x0, #0x0
 260:	ldr	x1, [sp, #8]
 264:	str	x1, [x0]
 268:	adrp	x0, 0 <lt_dladderror>
 26c:	add	x0, x0, #0x0
 270:	ldr	x0, [x0]
 274:	add	sp, sp, #0x10
 278:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x29, sp
       8:	mov	w0, #0xb                   	// #11
       c:	bl	0 <lt__error_string>
      10:	bl	0 <lt__set_last_error>
      14:	nop
      18:	ldp	x29, x30, [sp], #16
      1c:	ret

0000000000000020 <loader_init_callback>:
      20:	stp	x29, x30, [sp, #-48]!
      24:	mov	x29, sp
      28:	str	x0, [sp, #24]
      2c:	adrp	x0, 0 <lt__alloc_die_callback>
      30:	add	x1, x0, #0x0
      34:	ldr	x0, [sp, #24]
      38:	bl	3504 <lt_dlsym>
      3c:	str	x0, [sp, #40]
      40:	mov	x1, #0x0                   	// #0
      44:	ldr	x0, [sp, #40]
      48:	bl	54 <loader_init>
      4c:	ldp	x29, x30, [sp], #48
      50:	ret

0000000000000054 <loader_init>:
      54:	stp	x29, x30, [sp, #-48]!
      58:	mov	x29, sp
      5c:	str	x0, [sp, #24]
      60:	str	x1, [sp, #16]
      64:	str	xzr, [sp, #40]
      68:	str	wzr, [sp, #36]
      6c:	ldr	x0, [sp, #24]
      70:	cmp	x0, #0x0
      74:	b.eq	88 <loader_init+0x34>  // b.none
      78:	ldr	x1, [sp, #24]
      7c:	ldr	x0, [sp, #16]
      80:	blr	x1
      84:	str	x0, [sp, #40]
      88:	ldr	x0, [sp, #40]
      8c:	bl	0 <lt_dlloader_add>
      90:	mov	w1, w0
      94:	ldr	w0, [sp, #36]
      98:	add	w0, w0, w1
      9c:	str	w0, [sp, #36]
      a0:	ldr	w0, [sp, #36]
      a4:	cmp	w0, #0x0
      a8:	b.ne	d8 <loader_init+0x84>  // b.any
      ac:	ldr	x0, [sp, #40]
      b0:	cmp	x0, #0x0
      b4:	b.ne	d8 <loader_init+0x84>  // b.any
      b8:	adrp	x0, 0 <lt__alloc_die_callback>
      bc:	add	x3, x0, #0x0
      c0:	mov	w2, #0xc7                  	// #199
      c4:	adrp	x0, 0 <lt__alloc_die_callback>
      c8:	add	x1, x0, #0x0
      cc:	adrp	x0, 0 <lt__alloc_die_callback>
      d0:	add	x0, x0, #0x0
      d4:	bl	0 <__assert_fail>
      d8:	ldr	w0, [sp, #36]
      dc:	cmp	w0, #0x0
      e0:	b.ne	128 <loader_init+0xd4>  // b.any
      e4:	ldr	x0, [sp, #40]
      e8:	ldr	x0, [x0, #40]
      ec:	cmp	x0, #0x0
      f0:	b.eq	128 <loader_init+0xd4>  // b.none
      f4:	ldr	x0, [sp, #40]
      f8:	ldr	x1, [x0, #40]
      fc:	ldr	x0, [sp, #40]
     100:	ldr	x0, [x0, #56]
     104:	blr	x1
     108:	cmp	w0, #0x0
     10c:	b.eq	128 <loader_init+0xd4>  // b.none
     110:	mov	w0, #0x3                   	// #3
     114:	bl	0 <lt__error_string>
     118:	bl	0 <lt__set_last_error>
     11c:	ldr	w0, [sp, #36]
     120:	add	w0, w0, #0x1
     124:	str	w0, [sp, #36]
     128:	ldr	w0, [sp, #36]
     12c:	ldp	x29, x30, [sp], #48
     130:	ret

0000000000000134 <lt_dlinit>:
     134:	stp	x29, x30, [sp, #-32]!
     138:	mov	x29, sp
     13c:	str	wzr, [sp, #28]
     140:	adrp	x0, 0 <lt__alloc_die_callback>
     144:	add	x0, x0, #0x0
     148:	ldr	w0, [x0]
     14c:	add	w1, w0, #0x1
     150:	adrp	x0, 0 <lt__alloc_die_callback>
     154:	add	x0, x0, #0x0
     158:	str	w1, [x0]
     15c:	adrp	x0, 0 <lt__alloc_die_callback>
     160:	add	x0, x0, #0x0
     164:	ldr	w0, [x0]
     168:	cmp	w0, #0x1
     16c:	b.ne	214 <lt_dlinit+0xe0>  // b.any
     170:	adrp	x0, 0 <lt__alloc_die>
     174:	add	x0, x0, #0x0
     178:	adrp	x1, 0 <lt__alloc_die_callback>
     17c:	add	x1, x1, #0x0
     180:	str	x1, [x0]
     184:	adrp	x0, 0 <lt__alloc_die_callback>
     188:	add	x0, x0, #0x0
     18c:	str	xzr, [x0]
     190:	adrp	x0, 0 <lt__alloc_die_callback>
     194:	add	x0, x0, #0x0
     198:	str	xzr, [x0]
     19c:	mov	x1, #0x0                   	// #0
     1a0:	adrp	x0, 0 <preopen_LTX_get_vtable>
     1a4:	add	x0, x0, #0x0
     1a8:	bl	54 <loader_init>
     1ac:	mov	w1, w0
     1b0:	ldr	w0, [sp, #28]
     1b4:	add	w0, w0, w1
     1b8:	str	w0, [sp, #28]
     1bc:	ldr	w0, [sp, #28]
     1c0:	cmp	w0, #0x0
     1c4:	b.ne	1e4 <lt_dlinit+0xb0>  // b.any
     1c8:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
     1cc:	add	x0, x0, #0x0
     1d0:	bl	0 <lt_dlpreload>
     1d4:	mov	w1, w0
     1d8:	ldr	w0, [sp, #28]
     1dc:	add	w0, w0, w1
     1e0:	str	w0, [sp, #28]
     1e4:	ldr	w0, [sp, #28]
     1e8:	cmp	w0, #0x0
     1ec:	b.ne	214 <lt_dlinit+0xe0>  // b.any
     1f0:	adrp	x0, 0 <lt__alloc_die_callback>
     1f4:	add	x1, x0, #0x0
     1f8:	adrp	x0, 0 <lt__alloc_die_callback>
     1fc:	add	x0, x0, #0x0
     200:	bl	0 <lt_dlpreload_open>
     204:	mov	w1, w0
     208:	ldr	w0, [sp, #28]
     20c:	add	w0, w0, w1
     210:	str	w0, [sp, #28]
     214:	ldr	w0, [sp, #28]
     218:	ldp	x29, x30, [sp], #32
     21c:	ret

0000000000000220 <lt_dlexit>:
     220:	stp	x29, x30, [sp, #-96]!
     224:	mov	x29, sp
     228:	str	xzr, [sp, #88]
     22c:	adrp	x0, 0 <lt__alloc_die_callback>
     230:	add	x0, x0, #0x0
     234:	ldr	x0, [x0]
     238:	str	x0, [sp, #48]
     23c:	str	wzr, [sp, #84]
     240:	adrp	x0, 0 <lt__alloc_die_callback>
     244:	add	x0, x0, #0x0
     248:	ldr	w0, [x0]
     24c:	cmp	w0, #0x0
     250:	b.ne	270 <lt_dlexit+0x50>  // b.any
     254:	mov	w0, #0xf                   	// #15
     258:	bl	0 <lt__error_string>
     25c:	bl	0 <lt__set_last_error>
     260:	ldr	w0, [sp, #84]
     264:	add	w0, w0, #0x1
     268:	str	w0, [sp, #84]
     26c:	b	4e0 <lt_dlexit+0x2c0>
     270:	adrp	x0, 0 <lt__alloc_die_callback>
     274:	add	x0, x0, #0x0
     278:	ldr	w0, [x0]
     27c:	sub	w1, w0, #0x1
     280:	adrp	x0, 0 <lt__alloc_die_callback>
     284:	add	x0, x0, #0x0
     288:	str	w1, [x0]
     28c:	adrp	x0, 0 <lt__alloc_die_callback>
     290:	add	x0, x0, #0x0
     294:	ldr	w0, [x0]
     298:	cmp	w0, #0x0
     29c:	b.ne	4dc <lt_dlexit+0x2bc>  // b.any
     2a0:	b	2c0 <lt_dlexit+0xa0>
     2a4:	adrp	x0, 0 <lt__alloc_die_callback>
     2a8:	add	x0, x0, #0x0
     2ac:	ldr	x0, [x0]
     2b0:	ldr	x1, [x0]
     2b4:	adrp	x0, 0 <lt__alloc_die_callback>
     2b8:	add	x0, x0, #0x0
     2bc:	str	x1, [x0]
     2c0:	adrp	x0, 0 <lt__alloc_die_callback>
     2c4:	add	x0, x0, #0x0
     2c8:	ldr	x0, [x0]
     2cc:	cmp	x0, #0x0
     2d0:	b.eq	2f4 <lt_dlexit+0xd4>  // b.none
     2d4:	adrp	x0, 0 <lt__alloc_die_callback>
     2d8:	add	x0, x0, #0x0
     2dc:	ldr	x0, [x0]
     2e0:	ldrb	w0, [x0, #36]
     2e4:	and	w0, w0, #0x1
     2e8:	and	w0, w0, #0xff
     2ec:	cmp	w0, #0x0
     2f0:	b.ne	2a4 <lt_dlexit+0x84>  // b.any
     2f4:	mov	w0, #0x1                   	// #1
     2f8:	str	w0, [sp, #80]
     2fc:	b	40c <lt_dlexit+0x1ec>
     300:	adrp	x0, 0 <lt__alloc_die_callback>
     304:	add	x0, x0, #0x0
     308:	ldr	x0, [x0]
     30c:	str	x0, [sp, #72]
     310:	str	wzr, [sp, #68]
     314:	b	3e8 <lt_dlexit+0x1c8>
     318:	ldr	x0, [sp, #72]
     31c:	str	x0, [sp, #56]
     320:	ldr	x0, [sp, #72]
     324:	ldr	x0, [x0]
     328:	str	x0, [sp, #72]
     32c:	ldr	x0, [sp, #56]
     330:	ldrb	w0, [x0, #36]
     334:	and	w0, w0, #0x1
     338:	and	w0, w0, #0xff
     33c:	cmp	w0, #0x0
     340:	b.ne	3e8 <lt_dlexit+0x1c8>  // b.any
     344:	mov	w0, #0x1                   	// #1
     348:	str	w0, [sp, #68]
     34c:	ldr	x0, [sp, #56]
     350:	ldr	w0, [x0, #32]
     354:	ldr	w1, [sp, #80]
     358:	cmp	w1, w0
     35c:	b.lt	3e8 <lt_dlexit+0x1c8>  // b.tstop
     360:	ldr	x0, [sp, #56]
     364:	bl	3314 <lt_dlclose>
     368:	cmp	w0, #0x0
     36c:	b.eq	37c <lt_dlexit+0x15c>  // b.none
     370:	ldr	w0, [sp, #84]
     374:	add	w0, w0, #0x1
     378:	str	w0, [sp, #84]
     37c:	ldr	x0, [sp, #72]
     380:	cmp	x0, #0x0
     384:	b.eq	3e8 <lt_dlexit+0x1c8>  // b.none
     388:	adrp	x0, 0 <lt__alloc_die_callback>
     38c:	add	x0, x0, #0x0
     390:	ldr	x0, [x0]
     394:	str	x0, [sp, #56]
     398:	b	3b8 <lt_dlexit+0x198>
     39c:	ldr	x1, [sp, #56]
     3a0:	ldr	x0, [sp, #72]
     3a4:	cmp	x1, x0
     3a8:	b.eq	3c8 <lt_dlexit+0x1a8>  // b.none
     3ac:	ldr	x0, [sp, #56]
     3b0:	ldr	x0, [x0]
     3b4:	str	x0, [sp, #56]
     3b8:	ldr	x0, [sp, #56]
     3bc:	cmp	x0, #0x0
     3c0:	b.ne	39c <lt_dlexit+0x17c>  // b.any
     3c4:	b	3cc <lt_dlexit+0x1ac>
     3c8:	nop
     3cc:	ldr	x0, [sp, #56]
     3d0:	cmp	x0, #0x0
     3d4:	b.ne	3e8 <lt_dlexit+0x1c8>  // b.any
     3d8:	adrp	x0, 0 <lt__alloc_die_callback>
     3dc:	add	x0, x0, #0x0
     3e0:	ldr	x0, [x0]
     3e4:	str	x0, [sp, #72]
     3e8:	ldr	x0, [sp, #72]
     3ec:	cmp	x0, #0x0
     3f0:	b.ne	318 <lt_dlexit+0xf8>  // b.any
     3f4:	ldr	w0, [sp, #68]
     3f8:	cmp	w0, #0x0
     3fc:	b.eq	41c <lt_dlexit+0x1fc>  // b.none
     400:	ldr	w0, [sp, #80]
     404:	add	w0, w0, #0x1
     408:	str	w0, [sp, #80]
     40c:	ldr	x0, [sp, #48]
     410:	cmp	x0, #0x0
     414:	b.ne	300 <lt_dlexit+0xe0>  // b.any
     418:	b	420 <lt_dlexit+0x200>
     41c:	nop
     420:	ldr	w0, [sp, #84]
     424:	cmp	w0, #0x0
     428:	b.ne	434 <lt_dlexit+0x214>  // b.any
     42c:	mov	x0, #0x0                   	// #0
     430:	bl	0 <lt__set_last_error>
     434:	mov	x0, #0x0                   	// #0
     438:	bl	0 <lt_dlloader_next>
     43c:	str	x0, [sp, #88]
     440:	b	4b0 <lt_dlexit+0x290>
     444:	ldr	x0, [sp, #88]
     448:	bl	0 <lt_dlloader_next>
     44c:	str	x0, [sp, #40]
     450:	ldr	x0, [sp, #88]
     454:	bl	0 <lt_dlloader_get>
     458:	str	x0, [sp, #32]
     45c:	ldr	x0, [sp, #32]
     460:	ldr	x0, [x0]
     464:	bl	0 <lt_dlloader_remove>
     468:	str	x0, [sp, #32]
     46c:	ldr	x0, [sp, #32]
     470:	cmp	x0, #0x0
     474:	b.eq	488 <lt_dlexit+0x268>  // b.none
     478:	ldr	x0, [sp, #32]
     47c:	bl	0 <free>
     480:	str	xzr, [sp, #32]
     484:	b	4a8 <lt_dlexit+0x288>
     488:	bl	0 <lt__get_last_error>
     48c:	str	x0, [sp, #24]
     490:	ldr	x0, [sp, #24]
     494:	cmp	x0, #0x0
     498:	b.eq	4a8 <lt_dlexit+0x288>  // b.none
     49c:	ldr	w0, [sp, #84]
     4a0:	add	w0, w0, #0x1
     4a4:	str	w0, [sp, #84]
     4a8:	ldr	x0, [sp, #40]
     4ac:	str	x0, [sp, #88]
     4b0:	ldr	x0, [sp, #88]
     4b4:	cmp	x0, #0x0
     4b8:	b.ne	444 <lt_dlexit+0x224>  // b.any
     4bc:	adrp	x0, 0 <lt__alloc_die_callback>
     4c0:	add	x0, x0, #0x0
     4c4:	ldr	x0, [x0]
     4c8:	bl	0 <free>
     4cc:	adrp	x0, 0 <lt__alloc_die_callback>
     4d0:	add	x0, x0, #0x0
     4d4:	str	xzr, [x0]
     4d8:	b	4e0 <lt_dlexit+0x2c0>
     4dc:	nop
     4e0:	ldr	w0, [sp, #84]
     4e4:	ldp	x29, x30, [sp], #96
     4e8:	ret

00000000000004ec <tryall_dlopen>:
     4ec:	stp	x29, x30, [sp, #-96]!
     4f0:	mov	x29, sp
     4f4:	str	x0, [sp, #40]
     4f8:	str	x1, [sp, #32]
     4fc:	str	x2, [sp, #24]
     500:	str	x3, [sp, #16]
     504:	adrp	x0, 0 <lt__alloc_die_callback>
     508:	add	x0, x0, #0x0
     50c:	ldr	x0, [x0]
     510:	str	x0, [sp, #88]
     514:	str	xzr, [sp, #56]
     518:	str	wzr, [sp, #84]
     51c:	bl	0 <lt__get_last_error>
     520:	str	x0, [sp, #56]
     524:	b	57c <tryall_dlopen+0x90>
     528:	ldr	x0, [sp, #88]
     52c:	ldr	x0, [x0, #16]
     530:	ldr	x1, [sp, #32]
     534:	cmp	x1, x0
     538:	b.eq	588 <tryall_dlopen+0x9c>  // b.none
     53c:	ldr	x0, [sp, #88]
     540:	ldr	x0, [x0, #16]
     544:	cmp	x0, #0x0
     548:	b.eq	570 <tryall_dlopen+0x84>  // b.none
     54c:	ldr	x0, [sp, #32]
     550:	cmp	x0, #0x0
     554:	b.eq	570 <tryall_dlopen+0x84>  // b.none
     558:	ldr	x0, [sp, #88]
     55c:	ldr	x0, [x0, #16]
     560:	ldr	x1, [sp, #32]
     564:	bl	0 <strcmp>
     568:	cmp	w0, #0x0
     56c:	b.eq	588 <tryall_dlopen+0x9c>  // b.none
     570:	ldr	x0, [sp, #88]
     574:	ldr	x0, [x0]
     578:	str	x0, [sp, #88]
     57c:	ldr	x0, [sp, #88]
     580:	cmp	x0, #0x0
     584:	b.ne	528 <tryall_dlopen+0x3c>  // b.any
     588:	ldr	x0, [sp, #88]
     58c:	cmp	x0, #0x0
     590:	b.eq	5b8 <tryall_dlopen+0xcc>  // b.none
     594:	ldr	x0, [sp, #88]
     598:	ldr	w0, [x0, #32]
     59c:	add	w1, w0, #0x1
     5a0:	ldr	x0, [sp, #88]
     5a4:	str	w1, [x0, #32]
     5a8:	ldr	x0, [sp, #40]
     5ac:	ldr	x1, [sp, #88]
     5b0:	str	x1, [x0]
     5b4:	b	77c <tryall_dlopen+0x290>
     5b8:	ldr	x0, [sp, #40]
     5bc:	ldr	x0, [x0]
     5c0:	str	x0, [sp, #88]
     5c4:	ldr	x0, [sp, #32]
     5c8:	cmp	x0, #0x0
     5cc:	b.eq	604 <tryall_dlopen+0x118>  // b.none
     5d0:	ldr	x0, [sp, #32]
     5d4:	bl	0 <lt__strdup>
     5d8:	mov	x1, x0
     5dc:	ldr	x0, [sp, #88]
     5e0:	str	x1, [x0, #16]
     5e4:	ldr	x0, [sp, #88]
     5e8:	ldr	x0, [x0, #16]
     5ec:	cmp	x0, #0x0
     5f0:	b.ne	60c <tryall_dlopen+0x120>  // b.any
     5f4:	ldr	w0, [sp, #84]
     5f8:	add	w0, w0, #0x1
     5fc:	str	w0, [sp, #84]
     600:	b	77c <tryall_dlopen+0x290>
     604:	ldr	x0, [sp, #88]
     608:	str	xzr, [x0, #16]
     60c:	mov	x0, #0x0                   	// #0
     610:	bl	0 <lt_dlloader_next>
     614:	str	x0, [sp, #72]
     618:	ldr	x0, [sp, #16]
     61c:	cmp	x0, #0x0
     620:	b.eq	630 <tryall_dlopen+0x144>  // b.none
     624:	ldr	x0, [sp, #16]
     628:	str	x0, [sp, #64]
     62c:	b	63c <tryall_dlopen+0x150>
     630:	ldr	x0, [sp, #72]
     634:	bl	0 <lt_dlloader_get>
     638:	str	x0, [sp, #64]
     63c:	ldr	x0, [sp, #64]
     640:	ldr	x3, [x0, #16]
     644:	ldr	x0, [sp, #64]
     648:	ldr	x0, [x0, #56]
     64c:	ldr	x2, [sp, #24]
     650:	ldr	x1, [sp, #32]
     654:	blr	x3
     658:	mov	x1, x0
     65c:	ldr	x0, [sp, #88]
     660:	str	x1, [x0, #56]
     664:	ldr	x0, [sp, #88]
     668:	ldr	x0, [x0, #56]
     66c:	cmp	x0, #0x0
     670:	b.eq	6e4 <tryall_dlopen+0x1f8>  // b.none
     674:	ldr	x0, [sp, #24]
     678:	cmp	x0, #0x0
     67c:	b.eq	70c <tryall_dlopen+0x220>  // b.none
     680:	ldr	x0, [sp, #24]
     684:	ldrb	w0, [x0]
     688:	ubfx	x0, x0, #1, #1
     68c:	and	w2, w0, #0xff
     690:	ldr	x1, [sp, #88]
     694:	ldrb	w0, [x1, #36]
     698:	bfxil	w0, w2, #0, #1
     69c:	strb	w0, [x1, #36]
     6a0:	ldr	x0, [sp, #24]
     6a4:	ldrb	w0, [x0]
     6a8:	ubfx	x0, x0, #2, #1
     6ac:	and	w2, w0, #0xff
     6b0:	ldr	x1, [sp, #88]
     6b4:	ldrb	w0, [x1, #36]
     6b8:	bfi	w0, w2, #1, #1
     6bc:	strb	w0, [x1, #36]
     6c0:	ldr	x0, [sp, #24]
     6c4:	ldrb	w0, [x0]
     6c8:	ubfx	x0, x0, #3, #1
     6cc:	and	w2, w0, #0xff
     6d0:	ldr	x1, [sp, #88]
     6d4:	ldrb	w0, [x1, #36]
     6d8:	bfi	w0, w2, #2, #1
     6dc:	strb	w0, [x1, #36]
     6e0:	b	70c <tryall_dlopen+0x220>
     6e4:	ldr	x0, [sp, #16]
     6e8:	cmp	x0, #0x0
     6ec:	b.ne	710 <tryall_dlopen+0x224>  // b.any
     6f0:	ldr	x0, [sp, #72]
     6f4:	bl	0 <lt_dlloader_next>
     6f8:	str	x0, [sp, #72]
     6fc:	ldr	x0, [sp, #72]
     700:	cmp	x0, #0x0
     704:	b.ne	618 <tryall_dlopen+0x12c>  // b.any
     708:	b	710 <tryall_dlopen+0x224>
     70c:	nop
     710:	ldr	x0, [sp, #16]
     714:	cmp	x0, #0x0
     718:	b.eq	72c <tryall_dlopen+0x240>  // b.none
     71c:	ldr	x0, [sp, #88]
     720:	ldr	x0, [x0, #56]
     724:	cmp	x0, #0x0
     728:	b.eq	744 <tryall_dlopen+0x258>  // b.none
     72c:	ldr	x0, [sp, #16]
     730:	cmp	x0, #0x0
     734:	b.ne	768 <tryall_dlopen+0x27c>  // b.any
     738:	ldr	x0, [sp, #72]
     73c:	cmp	x0, #0x0
     740:	b.ne	768 <tryall_dlopen+0x27c>  // b.any
     744:	ldr	x0, [sp, #88]
     748:	ldr	x0, [x0, #16]
     74c:	bl	0 <free>
     750:	ldr	x0, [sp, #88]
     754:	str	xzr, [x0, #16]
     758:	ldr	w0, [sp, #84]
     75c:	add	w0, w0, #0x1
     760:	str	w0, [sp, #84]
     764:	b	77c <tryall_dlopen+0x290>
     768:	ldr	x0, [sp, #88]
     76c:	ldr	x1, [sp, #64]
     770:	str	x1, [x0, #8]
     774:	ldr	x0, [sp, #56]
     778:	bl	0 <lt__set_last_error>
     77c:	ldr	w0, [sp, #84]
     780:	ldp	x29, x30, [sp], #96
     784:	ret

0000000000000788 <tryall_dlopen_module>:
     788:	stp	x29, x30, [sp, #-96]!
     78c:	mov	x29, sp
     790:	str	x0, [sp, #56]
     794:	str	x1, [sp, #48]
     798:	str	x2, [sp, #40]
     79c:	str	x3, [sp, #32]
     7a0:	str	x4, [sp, #24]
     7a4:	str	wzr, [sp, #92]
     7a8:	str	xzr, [sp, #72]
     7ac:	str	xzr, [sp, #64]
     7b0:	ldr	x0, [sp, #40]
     7b4:	cmp	x0, #0x0
     7b8:	b.eq	7d8 <tryall_dlopen_module+0x50>  // b.none
     7bc:	ldr	x0, [sp, #40]
     7c0:	ldrb	w0, [x0]
     7c4:	cmp	w0, #0x0
     7c8:	b.eq	7d8 <tryall_dlopen_module+0x50>  // b.none
     7cc:	ldr	x0, [sp, #40]
     7d0:	bl	0 <strlen>
     7d4:	b	7dc <tryall_dlopen_module+0x54>
     7d8:	mov	x0, #0x0                   	// #0
     7dc:	str	x0, [sp, #80]
     7e0:	ldr	x0, [sp, #56]
     7e4:	cmp	x0, #0x0
     7e8:	b.ne	80c <tryall_dlopen_module+0x84>  // b.any
     7ec:	adrp	x0, 0 <lt__alloc_die_callback>
     7f0:	add	x3, x0, #0x0
     7f4:	mov	w2, #0x1f6                 	// #502
     7f8:	adrp	x0, 0 <lt__alloc_die_callback>
     7fc:	add	x1, x0, #0x0
     800:	adrp	x0, 0 <lt__alloc_die_callback>
     804:	add	x0, x0, #0x0
     808:	bl	0 <__assert_fail>
     80c:	ldr	x0, [sp, #40]
     810:	cmp	x0, #0x0
     814:	b.ne	838 <tryall_dlopen_module+0xb0>  // b.any
     818:	adrp	x0, 0 <lt__alloc_die_callback>
     81c:	add	x3, x0, #0x0
     820:	mov	w2, #0x1f7                 	// #503
     824:	adrp	x0, 0 <lt__alloc_die_callback>
     828:	add	x1, x0, #0x0
     82c:	adrp	x0, 0 <lt__alloc_die_callback>
     830:	add	x0, x0, #0x0
     834:	bl	0 <__assert_fail>
     838:	ldr	x0, [sp, #32]
     83c:	cmp	x0, #0x0
     840:	b.ne	864 <tryall_dlopen_module+0xdc>  // b.any
     844:	adrp	x0, 0 <lt__alloc_die_callback>
     848:	add	x3, x0, #0x0
     84c:	mov	w2, #0x1f8                 	// #504
     850:	adrp	x0, 0 <lt__alloc_die_callback>
     854:	add	x1, x0, #0x0
     858:	adrp	x0, 0 <lt__alloc_die_callback>
     85c:	add	x0, x0, #0x0
     860:	bl	0 <__assert_fail>
     864:	ldr	x0, [sp, #80]
     868:	cmp	x0, #0x0
     86c:	b.eq	898 <tryall_dlopen_module+0x110>  // b.none
     870:	ldr	x0, [sp, #80]
     874:	sub	x0, x0, #0x1
     878:	ldr	x1, [sp, #40]
     87c:	add	x0, x1, x0
     880:	ldrb	w0, [x0]
     884:	cmp	w0, #0x2f
     888:	b.ne	898 <tryall_dlopen_module+0x110>  // b.any
     88c:	ldr	x0, [sp, #80]
     890:	sub	x0, x0, #0x1
     894:	str	x0, [sp, #80]
     898:	ldr	x0, [sp, #32]
     89c:	cmp	x0, #0x0
     8a0:	b.eq	8c4 <tryall_dlopen_module+0x13c>  // b.none
     8a4:	ldr	x0, [sp, #32]
     8a8:	ldrb	w0, [x0]
     8ac:	cmp	w0, #0x0
     8b0:	b.eq	8c4 <tryall_dlopen_module+0x13c>  // b.none
     8b4:	ldr	x0, [sp, #32]
     8b8:	bl	0 <strlen>
     8bc:	mov	x1, x0
     8c0:	b	8c8 <tryall_dlopen_module+0x140>
     8c4:	mov	x1, #0x0                   	// #0
     8c8:	ldr	x0, [sp, #80]
     8cc:	add	x0, x1, x0
     8d0:	add	x0, x0, #0x1
     8d4:	str	x0, [sp, #64]
     8d8:	ldr	x0, [sp, #64]
     8dc:	add	x0, x0, #0x1
     8e0:	bl	0 <lt__malloc>
     8e4:	str	x0, [sp, #72]
     8e8:	ldr	x0, [sp, #72]
     8ec:	cmp	x0, #0x0
     8f0:	b.ne	8fc <tryall_dlopen_module+0x174>  // b.any
     8f4:	mov	w0, #0x1                   	// #1
     8f8:	b	98c <tryall_dlopen_module+0x204>
     8fc:	ldr	x0, [sp, #80]
     900:	ldr	x4, [sp, #32]
     904:	ldr	x3, [sp, #40]
     908:	mov	w2, w0
     90c:	adrp	x0, 0 <lt__alloc_die_callback>
     910:	add	x1, x0, #0x0
     914:	ldr	x0, [sp, #72]
     918:	bl	0 <sprintf>
     91c:	ldr	x0, [sp, #48]
     920:	cmp	x0, #0x0
     924:	b.eq	954 <tryall_dlopen_module+0x1cc>  // b.none
     928:	ldr	x4, [sp, #24]
     92c:	ldr	x3, [sp, #72]
     930:	ldr	x2, [sp, #48]
     934:	mov	x1, #0x0                   	// #0
     938:	ldr	x0, [sp, #56]
     93c:	bl	788 <tryall_dlopen_module>
     940:	mov	w1, w0
     944:	ldr	w0, [sp, #92]
     948:	add	w0, w0, w1
     94c:	str	w0, [sp, #92]
     950:	b	97c <tryall_dlopen_module+0x1f4>
     954:	mov	x3, #0x0                   	// #0
     958:	ldr	x2, [sp, #24]
     95c:	ldr	x1, [sp, #72]
     960:	ldr	x0, [sp, #56]
     964:	bl	4ec <tryall_dlopen>
     968:	cmp	w0, #0x0
     96c:	b.eq	97c <tryall_dlopen_module+0x1f4>  // b.none
     970:	ldr	w0, [sp, #92]
     974:	add	w0, w0, #0x1
     978:	str	w0, [sp, #92]
     97c:	ldr	x0, [sp, #72]
     980:	bl	0 <free>
     984:	str	xzr, [sp, #72]
     988:	ldr	w0, [sp, #92]
     98c:	ldp	x29, x30, [sp], #96
     990:	ret

0000000000000994 <find_module>:
     994:	stp	x29, x30, [sp, #-80]!
     998:	mov	x29, sp
     99c:	str	x0, [sp, #72]
     9a0:	str	x1, [sp, #64]
     9a4:	str	x2, [sp, #56]
     9a8:	str	x3, [sp, #48]
     9ac:	str	x4, [sp, #40]
     9b0:	str	w5, [sp, #36]
     9b4:	str	x6, [sp, #24]
     9b8:	ldr	x0, [sp, #40]
     9bc:	cmp	x0, #0x0
     9c0:	b.eq	9f4 <find_module+0x60>  // b.none
     9c4:	adrp	x0, 0 <lt__alloc_die_callback>
     9c8:	add	x0, x0, #0x0
     9cc:	bl	0 <lt_dlloader_find>
     9d0:	mov	x3, x0
     9d4:	ldr	x2, [sp, #24]
     9d8:	ldr	x1, [sp, #40]
     9dc:	ldr	x0, [sp, #72]
     9e0:	bl	4ec <tryall_dlopen>
     9e4:	cmp	w0, #0x0
     9e8:	b.ne	9f4 <find_module+0x60>  // b.any
     9ec:	mov	w0, #0x0                   	// #0
     9f0:	b	ab0 <find_module+0x11c>
     9f4:	ldr	x0, [sp, #48]
     9f8:	cmp	x0, #0x0
     9fc:	b.eq	aac <find_module+0x118>  // b.none
     a00:	ldr	w0, [sp, #36]
     a04:	cmp	w0, #0x0
     a08:	b.eq	a40 <find_module+0xac>  // b.none
     a0c:	ldr	x0, [sp, #56]
     a10:	cmp	x0, #0x0
     a14:	b.eq	a40 <find_module+0xac>  // b.none
     a18:	ldr	x4, [sp, #24]
     a1c:	ldr	x3, [sp, #48]
     a20:	ldr	x2, [sp, #56]
     a24:	mov	x1, #0x0                   	// #0
     a28:	ldr	x0, [sp, #72]
     a2c:	bl	788 <tryall_dlopen_module>
     a30:	cmp	w0, #0x0
     a34:	b.ne	a40 <find_module+0xac>  // b.any
     a38:	mov	w0, #0x0                   	// #0
     a3c:	b	ab0 <find_module+0x11c>
     a40:	ldr	w0, [sp, #36]
     a44:	cmp	w0, #0x0
     a48:	b.ne	a78 <find_module+0xe4>  // b.any
     a4c:	ldr	x4, [sp, #24]
     a50:	ldr	x3, [sp, #48]
     a54:	adrp	x0, 0 <lt__alloc_die_callback>
     a58:	add	x2, x0, #0x0
     a5c:	ldr	x1, [sp, #64]
     a60:	ldr	x0, [sp, #72]
     a64:	bl	788 <tryall_dlopen_module>
     a68:	cmp	w0, #0x0
     a6c:	b.ne	a78 <find_module+0xe4>  // b.any
     a70:	mov	w0, #0x0                   	// #0
     a74:	b	ab0 <find_module+0x11c>
     a78:	ldr	x0, [sp, #64]
     a7c:	cmp	x0, #0x0
     a80:	b.eq	aac <find_module+0x118>  // b.none
     a84:	ldr	x4, [sp, #24]
     a88:	ldr	x3, [sp, #48]
     a8c:	ldr	x2, [sp, #64]
     a90:	mov	x1, #0x0                   	// #0
     a94:	ldr	x0, [sp, #72]
     a98:	bl	788 <tryall_dlopen_module>
     a9c:	cmp	w0, #0x0
     aa0:	b.ne	aac <find_module+0x118>  // b.any
     aa4:	mov	w0, #0x0                   	// #0
     aa8:	b	ab0 <find_module+0x11c>
     aac:	mov	w0, #0x1                   	// #1
     ab0:	ldp	x29, x30, [sp], #80
     ab4:	ret

0000000000000ab8 <canonicalize_path>:
     ab8:	stp	x29, x30, [sp, #-64]!
     abc:	mov	x29, sp
     ac0:	str	x0, [sp, #24]
     ac4:	str	x1, [sp, #16]
     ac8:	str	xzr, [sp, #40]
     acc:	ldr	x0, [sp, #24]
     ad0:	cmp	x0, #0x0
     ad4:	b.eq	ae8 <canonicalize_path+0x30>  // b.none
     ad8:	ldr	x0, [sp, #24]
     adc:	ldrb	w0, [x0]
     ae0:	cmp	w0, #0x0
     ae4:	b.ne	b08 <canonicalize_path+0x50>  // b.any
     ae8:	adrp	x0, 0 <lt__alloc_die_callback>
     aec:	add	x3, x0, #0x0
     af0:	mov	w2, #0x24f                 	// #591
     af4:	adrp	x0, 0 <lt__alloc_die_callback>
     af8:	add	x1, x0, #0x0
     afc:	adrp	x0, 0 <lt__alloc_die_callback>
     b00:	add	x0, x0, #0x0
     b04:	bl	0 <__assert_fail>
     b08:	ldr	x0, [sp, #16]
     b0c:	cmp	x0, #0x0
     b10:	b.ne	b34 <canonicalize_path+0x7c>  // b.any
     b14:	adrp	x0, 0 <lt__alloc_die_callback>
     b18:	add	x3, x0, #0x0
     b1c:	mov	w2, #0x250                 	// #592
     b20:	adrp	x0, 0 <lt__alloc_die_callback>
     b24:	add	x1, x0, #0x0
     b28:	adrp	x0, 0 <lt__alloc_die_callback>
     b2c:	add	x0, x0, #0x0
     b30:	bl	0 <__assert_fail>
     b34:	ldr	x0, [sp, #24]
     b38:	cmp	x0, #0x0
     b3c:	b.eq	b60 <canonicalize_path+0xa8>  // b.none
     b40:	ldr	x0, [sp, #24]
     b44:	ldrb	w0, [x0]
     b48:	cmp	w0, #0x0
     b4c:	b.eq	b60 <canonicalize_path+0xa8>  // b.none
     b50:	ldr	x0, [sp, #24]
     b54:	bl	0 <strlen>
     b58:	add	x0, x0, #0x1
     b5c:	b	b64 <canonicalize_path+0xac>
     b60:	mov	x0, #0x1                   	// #1
     b64:	bl	0 <lt__malloc>
     b68:	str	x0, [sp, #40]
     b6c:	ldr	x0, [sp, #40]
     b70:	cmp	x0, #0x0
     b74:	b.ne	b80 <canonicalize_path+0xc8>  // b.any
     b78:	mov	w0, #0x1                   	// #1
     b7c:	b	ce8 <canonicalize_path+0x230>
     b80:	str	xzr, [sp, #56]
     b84:	str	xzr, [sp, #48]
     b88:	b	cb0 <canonicalize_path+0x1f8>
     b8c:	ldr	x1, [sp, #24]
     b90:	ldr	x0, [sp, #48]
     b94:	add	x0, x1, x0
     b98:	ldrb	w0, [x0]
     b9c:	cmp	w0, #0x3a
     ba0:	b.ne	be8 <canonicalize_path+0x130>  // b.any
     ba4:	ldr	x0, [sp, #56]
     ba8:	cmp	x0, #0x0
     bac:	b.eq	ca0 <canonicalize_path+0x1e8>  // b.none
     bb0:	ldr	x0, [sp, #48]
     bb4:	add	x0, x0, #0x1
     bb8:	ldr	x1, [sp, #24]
     bbc:	add	x0, x1, x0
     bc0:	ldrb	w0, [x0]
     bc4:	cmp	w0, #0x3a
     bc8:	b.eq	ca0 <canonicalize_path+0x1e8>  // b.none
     bcc:	ldr	x0, [sp, #48]
     bd0:	add	x0, x0, #0x1
     bd4:	ldr	x1, [sp, #24]
     bd8:	add	x0, x1, x0
     bdc:	ldrb	w0, [x0]
     be0:	cmp	w0, #0x0
     be4:	b.eq	ca0 <canonicalize_path+0x1e8>  // b.none
     be8:	ldr	x1, [sp, #24]
     bec:	ldr	x0, [sp, #48]
     bf0:	add	x0, x1, x0
     bf4:	ldrb	w0, [x0]
     bf8:	cmp	w0, #0x2f
     bfc:	b.eq	c2c <canonicalize_path+0x174>  // b.none
     c00:	ldr	x1, [sp, #24]
     c04:	ldr	x0, [sp, #48]
     c08:	add	x1, x1, x0
     c0c:	ldr	x0, [sp, #56]
     c10:	add	x2, x0, #0x1
     c14:	str	x2, [sp, #56]
     c18:	ldr	x2, [sp, #40]
     c1c:	add	x0, x2, x0
     c20:	ldrb	w1, [x1]
     c24:	strb	w1, [x0]
     c28:	b	ca4 <canonicalize_path+0x1ec>
     c2c:	ldr	x0, [sp, #48]
     c30:	add	x0, x0, #0x1
     c34:	ldr	x1, [sp, #24]
     c38:	add	x0, x1, x0
     c3c:	ldrb	w0, [x0]
     c40:	cmp	w0, #0x3a
     c44:	b.eq	ca4 <canonicalize_path+0x1ec>  // b.none
     c48:	ldr	x0, [sp, #48]
     c4c:	add	x0, x0, #0x1
     c50:	ldr	x1, [sp, #24]
     c54:	add	x0, x1, x0
     c58:	ldrb	w0, [x0]
     c5c:	cmp	w0, #0x0
     c60:	b.eq	ca4 <canonicalize_path+0x1ec>  // b.none
     c64:	ldr	x0, [sp, #48]
     c68:	add	x0, x0, #0x1
     c6c:	ldr	x1, [sp, #24]
     c70:	add	x0, x1, x0
     c74:	ldrb	w0, [x0]
     c78:	cmp	w0, #0x2f
     c7c:	b.eq	ca4 <canonicalize_path+0x1ec>  // b.none
     c80:	ldr	x0, [sp, #56]
     c84:	add	x1, x0, #0x1
     c88:	str	x1, [sp, #56]
     c8c:	ldr	x1, [sp, #40]
     c90:	add	x0, x1, x0
     c94:	mov	w1, #0x2f                  	// #47
     c98:	strb	w1, [x0]
     c9c:	b	ca4 <canonicalize_path+0x1ec>
     ca0:	nop
     ca4:	ldr	x0, [sp, #48]
     ca8:	add	x0, x0, #0x1
     cac:	str	x0, [sp, #48]
     cb0:	ldr	x1, [sp, #24]
     cb4:	ldr	x0, [sp, #48]
     cb8:	add	x0, x1, x0
     cbc:	ldrb	w0, [x0]
     cc0:	cmp	w0, #0x0
     cc4:	b.ne	b8c <canonicalize_path+0xd4>  // b.any
     cc8:	ldr	x1, [sp, #40]
     ccc:	ldr	x0, [sp, #56]
     cd0:	add	x0, x1, x0
     cd4:	strb	wzr, [x0]
     cd8:	ldr	x0, [sp, #16]
     cdc:	ldr	x1, [sp, #40]
     ce0:	str	x1, [x0]
     ce4:	mov	w0, #0x0                   	// #0
     ce8:	ldp	x29, x30, [sp], #64
     cec:	ret

0000000000000cf0 <argzize_path>:
     cf0:	stp	x29, x30, [sp, #-64]!
     cf4:	mov	x29, sp
     cf8:	str	x0, [sp, #40]
     cfc:	str	x1, [sp, #32]
     d00:	str	x2, [sp, #24]
     d04:	ldr	x0, [sp, #40]
     d08:	cmp	x0, #0x0
     d0c:	b.ne	d30 <argzize_path+0x40>  // b.any
     d10:	adrp	x0, 0 <lt__alloc_die_callback>
     d14:	add	x3, x0, #0x0
     d18:	mov	w2, #0x28c                 	// #652
     d1c:	adrp	x0, 0 <lt__alloc_die_callback>
     d20:	add	x1, x0, #0x0
     d24:	adrp	x0, 0 <lt__alloc_die_callback>
     d28:	add	x0, x0, #0x0
     d2c:	bl	0 <__assert_fail>
     d30:	ldr	x0, [sp, #32]
     d34:	cmp	x0, #0x0
     d38:	b.ne	d5c <argzize_path+0x6c>  // b.any
     d3c:	adrp	x0, 0 <lt__alloc_die_callback>
     d40:	add	x3, x0, #0x0
     d44:	mov	w2, #0x28d                 	// #653
     d48:	adrp	x0, 0 <lt__alloc_die_callback>
     d4c:	add	x1, x0, #0x0
     d50:	adrp	x0, 0 <lt__alloc_die_callback>
     d54:	add	x0, x0, #0x0
     d58:	bl	0 <__assert_fail>
     d5c:	ldr	x0, [sp, #24]
     d60:	cmp	x0, #0x0
     d64:	b.ne	d88 <argzize_path+0x98>  // b.any
     d68:	adrp	x0, 0 <lt__alloc_die_callback>
     d6c:	add	x3, x0, #0x0
     d70:	mov	w2, #0x28e                 	// #654
     d74:	adrp	x0, 0 <lt__alloc_die_callback>
     d78:	add	x1, x0, #0x0
     d7c:	adrp	x0, 0 <lt__alloc_die_callback>
     d80:	add	x0, x0, #0x0
     d84:	bl	0 <__assert_fail>
     d88:	ldr	x3, [sp, #24]
     d8c:	ldr	x2, [sp, #32]
     d90:	mov	w1, #0x3a                  	// #58
     d94:	ldr	x0, [sp, #40]
     d98:	bl	0 <argz_create_sep>
     d9c:	str	w0, [sp, #60]
     da0:	ldr	w0, [sp, #60]
     da4:	cmp	w0, #0x0
     da8:	b.eq	de0 <argzize_path+0xf0>  // b.none
     dac:	ldr	w0, [sp, #60]
     db0:	cmp	w0, #0xc
     db4:	b.ne	dc8 <argzize_path+0xd8>  // b.any
     db8:	mov	w0, #0xb                   	// #11
     dbc:	bl	0 <lt__error_string>
     dc0:	bl	0 <lt__set_last_error>
     dc4:	b	dd8 <argzize_path+0xe8>
     dc8:	mov	w0, #0x0                   	// #0
     dcc:	bl	0 <lt__error_string>
     dd0:	bl	0 <lt__set_last_error>
     dd4:	nop
     dd8:	mov	w0, #0x1                   	// #1
     ddc:	b	de4 <argzize_path+0xf4>
     de0:	mov	w0, #0x0                   	// #0
     de4:	ldp	x29, x30, [sp], #64
     de8:	ret

0000000000000dec <foreach_dirinpath>:
     dec:	stp	x29, x30, [sp, #-144]!
     df0:	mov	x29, sp
     df4:	str	x0, [sp, #56]
     df8:	str	x1, [sp, #48]
     dfc:	str	x2, [sp, #40]
     e00:	str	x3, [sp, #32]
     e04:	str	x4, [sp, #24]
     e08:	str	wzr, [sp, #140]
     e0c:	str	xzr, [sp, #128]
     e10:	ldr	x0, [sp, #48]
     e14:	cmp	x0, #0x0
     e18:	b.eq	e38 <foreach_dirinpath+0x4c>  // b.none
     e1c:	ldr	x0, [sp, #48]
     e20:	ldrb	w0, [x0]
     e24:	cmp	w0, #0x0
     e28:	b.eq	e38 <foreach_dirinpath+0x4c>  // b.none
     e2c:	ldr	x0, [sp, #48]
     e30:	bl	0 <strlen>
     e34:	b	e3c <foreach_dirinpath+0x50>
     e38:	mov	x0, #0x0                   	// #0
     e3c:	str	x0, [sp, #96]
     e40:	str	xzr, [sp, #88]
     e44:	str	xzr, [sp, #80]
     e48:	str	xzr, [sp, #120]
     e4c:	str	xzr, [sp, #72]
     e50:	ldr	x0, [sp, #56]
     e54:	cmp	x0, #0x0
     e58:	b.eq	e6c <foreach_dirinpath+0x80>  // b.none
     e5c:	ldr	x0, [sp, #56]
     e60:	ldrb	w0, [x0]
     e64:	cmp	w0, #0x0
     e68:	b.ne	e7c <foreach_dirinpath+0x90>  // b.any
     e6c:	mov	w0, #0x5                   	// #5
     e70:	bl	0 <lt__error_string>
     e74:	bl	0 <lt__set_last_error>
     e78:	b	1040 <foreach_dirinpath+0x254>
     e7c:	add	x0, sp, #0x48
     e80:	mov	x1, x0
     e84:	ldr	x0, [sp, #56]
     e88:	bl	ab8 <canonicalize_path>
     e8c:	cmp	w0, #0x0
     e90:	b.ne	1024 <foreach_dirinpath+0x238>  // b.any
     e94:	ldr	x0, [sp, #72]
     e98:	add	x2, sp, #0x58
     e9c:	add	x1, sp, #0x50
     ea0:	bl	cf0 <argzize_path>
     ea4:	cmp	w0, #0x0
     ea8:	b.ne	102c <foreach_dirinpath+0x240>  // b.any
     eac:	str	xzr, [sp, #112]
     eb0:	b	1000 <foreach_dirinpath+0x214>
     eb4:	ldr	x0, [sp, #112]
     eb8:	cmp	x0, #0x0
     ebc:	b.eq	edc <foreach_dirinpath+0xf0>  // b.none
     ec0:	ldr	x0, [sp, #112]
     ec4:	ldrb	w0, [x0]
     ec8:	cmp	w0, #0x0
     ecc:	b.eq	edc <foreach_dirinpath+0xf0>  // b.none
     ed0:	ldr	x0, [sp, #112]
     ed4:	bl	0 <strlen>
     ed8:	b	ee0 <foreach_dirinpath+0xf4>
     edc:	mov	x0, #0x0                   	// #0
     ee0:	str	x0, [sp, #104]
     ee4:	ldr	x1, [sp, #104]
     ee8:	ldr	x0, [sp, #96]
     eec:	add	x0, x1, x0
     ef0:	add	x0, x0, #0x1
     ef4:	ldr	x1, [sp, #128]
     ef8:	cmp	x1, x0
     efc:	b.hi	f38 <foreach_dirinpath+0x14c>  // b.pmore
     f00:	ldr	x0, [sp, #120]
     f04:	bl	0 <free>
     f08:	str	xzr, [sp, #120]
     f0c:	ldr	x1, [sp, #104]
     f10:	ldr	x0, [sp, #96]
     f14:	add	x0, x1, x0
     f18:	add	x0, x0, #0x2
     f1c:	str	x0, [sp, #128]
     f20:	ldr	x0, [sp, #128]
     f24:	bl	0 <lt__malloc>
     f28:	str	x0, [sp, #120]
     f2c:	ldr	x0, [sp, #120]
     f30:	cmp	x0, #0x0
     f34:	b.eq	1034 <foreach_dirinpath+0x248>  // b.none
     f38:	ldr	x1, [sp, #128]
     f3c:	ldr	x0, [sp, #104]
     f40:	cmp	x1, x0
     f44:	b.hi	f68 <foreach_dirinpath+0x17c>  // b.pmore
     f48:	adrp	x0, 0 <lt__alloc_die_callback>
     f4c:	add	x3, x0, #0x0
     f50:	mov	w2, #0x2cd                 	// #717
     f54:	adrp	x0, 0 <lt__alloc_die_callback>
     f58:	add	x1, x0, #0x0
     f5c:	adrp	x0, 0 <lt__alloc_die_callback>
     f60:	add	x0, x0, #0x0
     f64:	bl	0 <__assert_fail>
     f68:	ldr	x1, [sp, #112]
     f6c:	ldr	x0, [sp, #120]
     f70:	bl	0 <strcpy>
     f74:	ldr	x0, [sp, #48]
     f78:	cmp	x0, #0x0
     f7c:	b.eq	fdc <foreach_dirinpath+0x1f0>  // b.none
     f80:	ldr	x0, [sp, #48]
     f84:	ldrb	w0, [x0]
     f88:	cmp	w0, #0x0
     f8c:	b.eq	fdc <foreach_dirinpath+0x1f0>  // b.none
     f90:	ldr	x0, [sp, #104]
     f94:	sub	x0, x0, #0x1
     f98:	ldr	x1, [sp, #120]
     f9c:	add	x0, x1, x0
     fa0:	ldrb	w0, [x0]
     fa4:	cmp	w0, #0x2f
     fa8:	b.eq	fc8 <foreach_dirinpath+0x1dc>  // b.none
     fac:	ldr	x0, [sp, #104]
     fb0:	add	x1, x0, #0x1
     fb4:	str	x1, [sp, #104]
     fb8:	ldr	x1, [sp, #120]
     fbc:	add	x0, x1, x0
     fc0:	mov	w1, #0x2f                  	// #47
     fc4:	strb	w1, [x0]
     fc8:	ldr	x1, [sp, #120]
     fcc:	ldr	x0, [sp, #104]
     fd0:	add	x0, x1, x0
     fd4:	ldr	x1, [sp, #48]
     fd8:	bl	0 <strcpy>
     fdc:	ldr	x3, [sp, #40]
     fe0:	ldr	x2, [sp, #24]
     fe4:	ldr	x1, [sp, #32]
     fe8:	ldr	x0, [sp, #120]
     fec:	blr	x3
     ff0:	str	w0, [sp, #140]
     ff4:	ldr	w0, [sp, #140]
     ff8:	cmp	w0, #0x0
     ffc:	b.ne	103c <foreach_dirinpath+0x250>  // b.any
    1000:	ldr	x0, [sp, #80]
    1004:	ldr	x1, [sp, #88]
    1008:	ldr	x2, [sp, #112]
    100c:	bl	0 <argz_next>
    1010:	str	x0, [sp, #112]
    1014:	ldr	x0, [sp, #112]
    1018:	cmp	x0, #0x0
    101c:	b.ne	eb4 <foreach_dirinpath+0xc8>  // b.any
    1020:	b	1040 <foreach_dirinpath+0x254>
    1024:	nop
    1028:	b	1040 <foreach_dirinpath+0x254>
    102c:	nop
    1030:	b	1040 <foreach_dirinpath+0x254>
    1034:	nop
    1038:	b	1040 <foreach_dirinpath+0x254>
    103c:	nop
    1040:	ldr	x0, [sp, #80]
    1044:	bl	0 <free>
    1048:	str	xzr, [sp, #80]
    104c:	ldr	x0, [sp, #72]
    1050:	bl	0 <free>
    1054:	str	xzr, [sp, #72]
    1058:	ldr	x0, [sp, #120]
    105c:	bl	0 <free>
    1060:	str	xzr, [sp, #120]
    1064:	ldr	w0, [sp, #140]
    1068:	ldp	x29, x30, [sp], #144
    106c:	ret

0000000000001070 <find_file_callback>:
    1070:	stp	x29, x30, [sp, #-80]!
    1074:	mov	x29, sp
    1078:	str	x0, [sp, #40]
    107c:	str	x1, [sp, #32]
    1080:	str	x2, [sp, #24]
    1084:	ldr	x0, [sp, #32]
    1088:	str	x0, [sp, #64]
    108c:	ldr	x0, [sp, #24]
    1090:	str	x0, [sp, #56]
    1094:	str	wzr, [sp, #76]
    1098:	ldr	x0, [sp, #40]
    109c:	cmp	x0, #0x0
    10a0:	b.eq	10b4 <find_file_callback+0x44>  // b.none
    10a4:	ldr	x0, [sp, #40]
    10a8:	ldrb	w0, [x0]
    10ac:	cmp	w0, #0x0
    10b0:	b.ne	10d4 <find_file_callback+0x64>  // b.any
    10b4:	adrp	x0, 0 <lt__alloc_die_callback>
    10b8:	add	x3, x0, #0x0
    10bc:	mov	w2, #0x2f0                 	// #752
    10c0:	adrp	x0, 0 <lt__alloc_die_callback>
    10c4:	add	x1, x0, #0x0
    10c8:	adrp	x0, 0 <lt__alloc_die_callback>
    10cc:	add	x0, x0, #0x0
    10d0:	bl	0 <__assert_fail>
    10d4:	ldr	x0, [sp, #64]
    10d8:	cmp	x0, #0x0
    10dc:	b.ne	1100 <find_file_callback+0x90>  // b.any
    10e0:	adrp	x0, 0 <lt__alloc_die_callback>
    10e4:	add	x3, x0, #0x0
    10e8:	mov	w2, #0x2f1                 	// #753
    10ec:	adrp	x0, 0 <lt__alloc_die_callback>
    10f0:	add	x1, x0, #0x0
    10f4:	adrp	x0, 0 <lt__alloc_die_callback>
    10f8:	add	x0, x0, #0x0
    10fc:	bl	0 <__assert_fail>
    1100:	ldr	x0, [sp, #56]
    1104:	cmp	x0, #0x0
    1108:	b.ne	112c <find_file_callback+0xbc>  // b.any
    110c:	adrp	x0, 0 <lt__alloc_die_callback>
    1110:	add	x3, x0, #0x0
    1114:	mov	w2, #0x2f2                 	// #754
    1118:	adrp	x0, 0 <lt__alloc_die_callback>
    111c:	add	x1, x0, #0x0
    1120:	adrp	x0, 0 <lt__alloc_die_callback>
    1124:	add	x0, x0, #0x0
    1128:	bl	0 <__assert_fail>
    112c:	adrp	x0, 0 <lt__alloc_die_callback>
    1130:	add	x1, x0, #0x0
    1134:	ldr	x0, [sp, #40]
    1138:	bl	0 <fopen>
    113c:	mov	x1, x0
    1140:	ldr	x0, [sp, #56]
    1144:	str	x1, [x0]
    1148:	ldr	x0, [sp, #56]
    114c:	ldr	x0, [x0]
    1150:	cmp	x0, #0x0
    1154:	b.eq	11c8 <find_file_callback+0x158>  // b.none
    1158:	mov	w1, #0x2f                  	// #47
    115c:	ldr	x0, [sp, #40]
    1160:	bl	0 <strrchr>
    1164:	str	x0, [sp, #48]
    1168:	ldr	x1, [sp, #48]
    116c:	ldr	x0, [sp, #40]
    1170:	cmp	x1, x0
    1174:	b.ls	1180 <find_file_callback+0x110>  // b.plast
    1178:	ldr	x0, [sp, #48]
    117c:	strb	wzr, [x0]
    1180:	ldr	x0, [sp, #64]
    1184:	ldr	x0, [x0]
    1188:	bl	0 <free>
    118c:	ldr	x0, [sp, #64]
    1190:	str	xzr, [x0]
    1194:	ldr	x0, [sp, #40]
    1198:	bl	0 <lt__strdup>
    119c:	mov	x1, x0
    11a0:	ldr	x0, [sp, #64]
    11a4:	str	x1, [x0]
    11a8:	ldr	x0, [sp, #64]
    11ac:	ldr	x0, [x0]
    11b0:	cmp	x0, #0x0
    11b4:	b.ne	11c0 <find_file_callback+0x150>  // b.any
    11b8:	mov	w0, #0xffffffff            	// #-1
    11bc:	b	11c4 <find_file_callback+0x154>
    11c0:	mov	w0, #0x1                   	// #1
    11c4:	str	w0, [sp, #76]
    11c8:	ldr	w0, [sp, #76]
    11cc:	ldp	x29, x30, [sp], #80
    11d0:	ret

00000000000011d4 <find_file>:
    11d4:	stp	x29, x30, [sp, #-64]!
    11d8:	mov	x29, sp
    11dc:	str	x0, [sp, #40]
    11e0:	str	x1, [sp, #32]
    11e4:	str	x2, [sp, #24]
    11e8:	str	xzr, [sp, #56]
    11ec:	add	x0, sp, #0x38
    11f0:	mov	x4, x0
    11f4:	ldr	x3, [sp, #24]
    11f8:	adrp	x0, 0 <lt__alloc_die_callback>
    11fc:	add	x2, x0, #0x0
    1200:	ldr	x1, [sp, #32]
    1204:	ldr	x0, [sp, #40]
    1208:	bl	dec <foreach_dirinpath>
    120c:	ldr	x0, [sp, #56]
    1210:	ldp	x29, x30, [sp], #64
    1214:	ret

0000000000001218 <find_handle_callback>:
    1218:	stp	x29, x30, [sp, #-80]!
    121c:	mov	x29, sp
    1220:	str	x0, [sp, #40]
    1224:	str	x1, [sp, #32]
    1228:	str	x2, [sp, #24]
    122c:	ldr	x0, [sp, #32]
    1230:	str	x0, [sp, #72]
    1234:	mov	w1, #0x4                   	// #4
    1238:	ldr	x0, [sp, #40]
    123c:	bl	0 <access>
    1240:	str	w0, [sp, #68]
    1244:	ldr	x0, [sp, #24]
    1248:	str	x0, [sp, #56]
    124c:	ldr	w0, [sp, #68]
    1250:	cmp	w0, #0x0
    1254:	b.eq	1260 <find_handle_callback+0x48>  // b.none
    1258:	mov	w0, #0x0                   	// #0
    125c:	b	1288 <find_handle_callback+0x70>
    1260:	mov	x3, #0x0                   	// #0
    1264:	ldr	x2, [sp, #56]
    1268:	ldr	x1, [sp, #40]
    126c:	ldr	x0, [sp, #72]
    1270:	bl	4ec <tryall_dlopen>
    1274:	cmp	w0, #0x0
    1278:	b.eq	1284 <find_handle_callback+0x6c>  // b.none
    127c:	ldr	x0, [sp, #72]
    1280:	str	xzr, [x0]
    1284:	mov	w0, #0x1                   	// #1
    1288:	ldp	x29, x30, [sp], #80
    128c:	ret

0000000000001290 <find_handle>:
    1290:	stp	x29, x30, [sp, #-48]!
    1294:	mov	x29, sp
    1298:	str	x0, [sp, #40]
    129c:	str	x1, [sp, #32]
    12a0:	str	x2, [sp, #24]
    12a4:	str	x3, [sp, #16]
    12a8:	ldr	x0, [sp, #40]
    12ac:	cmp	x0, #0x0
    12b0:	b.ne	12bc <find_handle+0x2c>  // b.any
    12b4:	mov	x0, #0x0                   	// #0
    12b8:	b	12ec <find_handle+0x5c>
    12bc:	ldr	x4, [sp, #16]
    12c0:	ldr	x3, [sp, #24]
    12c4:	adrp	x0, 0 <lt__alloc_die_callback>
    12c8:	add	x2, x0, #0x0
    12cc:	ldr	x1, [sp, #32]
    12d0:	ldr	x0, [sp, #40]
    12d4:	bl	dec <foreach_dirinpath>
    12d8:	cmp	w0, #0x0
    12dc:	b.ne	12e8 <find_handle+0x58>  // b.any
    12e0:	mov	x0, #0x0                   	// #0
    12e4:	b	12ec <find_handle+0x5c>
    12e8:	ldr	x0, [sp, #24]
    12ec:	ldp	x29, x30, [sp], #48
    12f0:	ret

00000000000012f4 <load_deplibs>:
    12f4:	sub	sp, sp, #0x10
    12f8:	str	x0, [sp, #8]
    12fc:	str	x1, [sp]
    1300:	ldr	x0, [sp, #8]
    1304:	str	wzr, [x0, #40]
    1308:	mov	w0, #0x0                   	// #0
    130c:	add	sp, sp, #0x10
    1310:	ret

0000000000001314 <unload_deplibs>:
    1314:	stp	x29, x30, [sp, #-48]!
    1318:	mov	x29, sp
    131c:	str	x0, [sp, #24]
    1320:	str	wzr, [sp, #40]
    1324:	ldr	x0, [sp, #24]
    1328:	str	x0, [sp, #32]
    132c:	ldr	x0, [sp, #32]
    1330:	ldr	w0, [x0, #40]
    1334:	cmp	w0, #0x0
    1338:	b.eq	13d0 <unload_deplibs+0xbc>  // b.none
    133c:	str	wzr, [sp, #44]
    1340:	b	13a8 <unload_deplibs+0x94>
    1344:	ldr	x0, [sp, #32]
    1348:	ldr	x1, [x0, #48]
    134c:	ldrsw	x0, [sp, #44]
    1350:	lsl	x0, x0, #3
    1354:	add	x0, x1, x0
    1358:	ldr	x0, [x0]
    135c:	ldrb	w0, [x0, #36]
    1360:	and	w0, w0, #0x1
    1364:	and	w0, w0, #0xff
    1368:	cmp	w0, #0x0
    136c:	b.ne	139c <unload_deplibs+0x88>  // b.any
    1370:	ldr	x0, [sp, #32]
    1374:	ldr	x1, [x0, #48]
    1378:	ldrsw	x0, [sp, #44]
    137c:	lsl	x0, x0, #3
    1380:	add	x0, x1, x0
    1384:	ldr	x0, [x0]
    1388:	bl	3314 <lt_dlclose>
    138c:	mov	w1, w0
    1390:	ldr	w0, [sp, #40]
    1394:	add	w0, w0, w1
    1398:	str	w0, [sp, #40]
    139c:	ldr	w0, [sp, #44]
    13a0:	add	w0, w0, #0x1
    13a4:	str	w0, [sp, #44]
    13a8:	ldr	x0, [sp, #32]
    13ac:	ldr	w0, [x0, #40]
    13b0:	ldr	w1, [sp, #44]
    13b4:	cmp	w1, w0
    13b8:	b.lt	1344 <unload_deplibs+0x30>  // b.tstop
    13bc:	ldr	x0, [sp, #32]
    13c0:	ldr	x0, [x0, #48]
    13c4:	bl	0 <free>
    13c8:	ldr	x0, [sp, #32]
    13cc:	str	xzr, [x0, #48]
    13d0:	ldr	w0, [sp, #40]
    13d4:	ldp	x29, x30, [sp], #48
    13d8:	ret

00000000000013dc <trim>:
    13dc:	stp	x29, x30, [sp, #-64]!
    13e0:	mov	x29, sp
    13e4:	str	x0, [sp, #24]
    13e8:	str	x1, [sp, #16]
    13ec:	mov	w1, #0x27                  	// #39
    13f0:	ldr	x0, [sp, #16]
    13f4:	bl	0 <strrchr>
    13f8:	str	x0, [sp, #56]
    13fc:	ldr	x0, [sp, #16]
    1400:	cmp	x0, #0x0
    1404:	b.eq	1424 <trim+0x48>  // b.none
    1408:	ldr	x0, [sp, #16]
    140c:	ldrb	w0, [x0]
    1410:	cmp	w0, #0x0
    1414:	b.eq	1424 <trim+0x48>  // b.none
    1418:	ldr	x0, [sp, #16]
    141c:	bl	0 <strlen>
    1420:	b	1428 <trim+0x4c>
    1424:	mov	x0, #0x0                   	// #0
    1428:	str	x0, [sp, #48]
    142c:	ldr	x0, [sp, #24]
    1430:	ldr	x0, [x0]
    1434:	bl	0 <free>
    1438:	ldr	x0, [sp, #24]
    143c:	str	xzr, [x0]
    1440:	ldr	x0, [sp, #56]
    1444:	cmp	x0, #0x0
    1448:	b.eq	145c <trim+0x80>  // b.none
    144c:	ldr	x1, [sp, #56]
    1450:	ldr	x0, [sp, #16]
    1454:	cmp	x1, x0
    1458:	b.ne	1464 <trim+0x88>  // b.any
    145c:	mov	w0, #0x1                   	// #1
    1460:	b	1508 <trim+0x12c>
    1464:	ldr	x0, [sp, #48]
    1468:	cmp	x0, #0x3
    146c:	b.ls	14fc <trim+0x120>  // b.plast
    1470:	ldr	x0, [sp, #16]
    1474:	ldrb	w0, [x0]
    1478:	cmp	w0, #0x27
    147c:	b.ne	14fc <trim+0x120>  // b.any
    1480:	ldr	x1, [sp, #56]
    1484:	ldr	x0, [sp, #16]
    1488:	sub	x0, x1, x0
    148c:	bl	0 <lt__malloc>
    1490:	str	x0, [sp, #40]
    1494:	ldr	x0, [sp, #40]
    1498:	cmp	x0, #0x0
    149c:	b.ne	14a8 <trim+0xcc>  // b.any
    14a0:	mov	w0, #0x1                   	// #1
    14a4:	b	1508 <trim+0x12c>
    14a8:	ldr	x0, [sp, #16]
    14ac:	add	x3, x0, #0x1
    14b0:	ldr	x1, [sp, #56]
    14b4:	ldr	x0, [sp, #16]
    14b8:	sub	x0, x1, x0
    14bc:	sub	x0, x0, #0x1
    14c0:	mov	x2, x0
    14c4:	mov	x1, x3
    14c8:	ldr	x0, [sp, #40]
    14cc:	bl	0 <memcpy>
    14d0:	ldr	x1, [sp, #56]
    14d4:	ldr	x0, [sp, #16]
    14d8:	sub	x0, x1, x0
    14dc:	sub	x0, x0, #0x1
    14e0:	ldr	x1, [sp, #40]
    14e4:	add	x0, x1, x0
    14e8:	strb	wzr, [x0]
    14ec:	ldr	x0, [sp, #24]
    14f0:	ldr	x1, [sp, #40]
    14f4:	str	x1, [x0]
    14f8:	b	1504 <trim+0x128>
    14fc:	ldr	x0, [sp, #24]
    1500:	str	xzr, [x0]
    1504:	mov	w0, #0x0                   	// #0
    1508:	ldp	x29, x30, [sp], #64
    150c:	ret

0000000000001510 <parse_dotla_file>:
    1510:	stp	x29, x30, [sp, #-96]!
    1514:	mov	x29, sp
    1518:	str	x0, [sp, #56]
    151c:	str	x1, [sp, #48]
    1520:	str	x2, [sp, #40]
    1524:	str	x3, [sp, #32]
    1528:	str	x4, [sp, #24]
    152c:	str	x5, [sp, #16]
    1530:	str	wzr, [sp, #92]
    1534:	mov	x0, #0x800                 	// #2048
    1538:	str	x0, [sp, #80]
    153c:	ldr	x0, [sp, #80]
    1540:	bl	0 <lt__malloc>
    1544:	str	x0, [sp, #72]
    1548:	ldr	x0, [sp, #72]
    154c:	cmp	x0, #0x0
    1550:	b.ne	18e0 <parse_dotla_file+0x3d0>  // b.any
    1554:	mov	w0, #0x5                   	// #5
    1558:	bl	0 <lt__error_string>
    155c:	bl	0 <lt__set_last_error>
    1560:	mov	w0, #0x1                   	// #1
    1564:	b	1910 <parse_dotla_file+0x400>
    1568:	ldr	x0, [sp, #80]
    156c:	sub	x0, x0, #0x2
    1570:	ldr	x1, [sp, #72]
    1574:	add	x0, x1, x0
    1578:	strb	wzr, [x0]
    157c:	ldr	x0, [sp, #80]
    1580:	ldr	x2, [sp, #56]
    1584:	mov	w1, w0
    1588:	ldr	x0, [sp, #72]
    158c:	bl	0 <fgets>
    1590:	cmp	x0, #0x0
    1594:	b.eq	18f4 <parse_dotla_file+0x3e4>  // b.none
    1598:	b	161c <parse_dotla_file+0x10c>
    159c:	ldr	x0, [sp, #80]
    15a0:	lsl	x0, x0, #1
    15a4:	mov	x1, x0
    15a8:	ldr	x0, [sp, #72]
    15ac:	bl	0 <lt__realloc>
    15b0:	str	x0, [sp, #72]
    15b4:	ldr	x0, [sp, #72]
    15b8:	cmp	x0, #0x0
    15bc:	b.ne	15d0 <parse_dotla_file+0xc0>  // b.any
    15c0:	ldr	w0, [sp, #92]
    15c4:	add	w0, w0, #0x1
    15c8:	str	w0, [sp, #92]
    15cc:	b	1900 <parse_dotla_file+0x3f0>
    15d0:	ldr	x0, [sp, #80]
    15d4:	lsl	x0, x0, #1
    15d8:	sub	x0, x0, #0x2
    15dc:	ldr	x1, [sp, #72]
    15e0:	add	x0, x1, x0
    15e4:	strb	wzr, [x0]
    15e8:	ldr	x0, [sp, #80]
    15ec:	sub	x0, x0, #0x1
    15f0:	ldr	x1, [sp, #72]
    15f4:	add	x0, x1, x0
    15f8:	ldr	x1, [sp, #80]
    15fc:	add	w1, w1, #0x1
    1600:	ldr	x2, [sp, #56]
    1604:	bl	0 <fgets>
    1608:	cmp	x0, #0x0
    160c:	b.eq	1668 <parse_dotla_file+0x158>  // b.none
    1610:	ldr	x0, [sp, #80]
    1614:	lsl	x0, x0, #1
    1618:	str	x0, [sp, #80]
    161c:	ldr	x0, [sp, #80]
    1620:	sub	x0, x0, #0x2
    1624:	ldr	x1, [sp, #72]
    1628:	add	x0, x1, x0
    162c:	ldrb	w0, [x0]
    1630:	cmp	w0, #0x0
    1634:	b.eq	166c <parse_dotla_file+0x15c>  // b.none
    1638:	ldr	x0, [sp, #80]
    163c:	sub	x0, x0, #0x2
    1640:	ldr	x1, [sp, #72]
    1644:	add	x0, x1, x0
    1648:	ldrb	w0, [x0]
    164c:	cmp	w0, #0xa
    1650:	b.eq	166c <parse_dotla_file+0x15c>  // b.none
    1654:	ldr	x0, [sp, #56]
    1658:	bl	0 <feof>
    165c:	cmp	w0, #0x0
    1660:	b.eq	159c <parse_dotla_file+0x8c>  // b.none
    1664:	b	166c <parse_dotla_file+0x15c>
    1668:	nop
    166c:	ldr	x0, [sp, #72]
    1670:	ldrb	w0, [x0]
    1674:	cmp	w0, #0xa
    1678:	b.eq	18e0 <parse_dotla_file+0x3d0>  // b.none
    167c:	ldr	x0, [sp, #72]
    1680:	ldrb	w0, [x0]
    1684:	cmp	w0, #0x23
    1688:	b.ne	1690 <parse_dotla_file+0x180>  // b.any
    168c:	b	18e0 <parse_dotla_file+0x3d0>
    1690:	mov	x2, #0x7                   	// #7
    1694:	adrp	x0, 0 <lt__alloc_die_callback>
    1698:	add	x1, x0, #0x0
    169c:	ldr	x0, [sp, #72]
    16a0:	bl	0 <strncmp>
    16a4:	cmp	w0, #0x0
    16a8:	b.ne	16d4 <parse_dotla_file+0x1c4>  // b.any
    16ac:	ldr	x0, [sp, #72]
    16b0:	add	x0, x0, #0x7
    16b4:	mov	x1, x0
    16b8:	ldr	x0, [sp, #48]
    16bc:	bl	13dc <trim>
    16c0:	mov	w1, w0
    16c4:	ldr	w0, [sp, #92]
    16c8:	add	w0, w0, w1
    16cc:	str	w0, [sp, #92]
    16d0:	b	18d4 <parse_dotla_file+0x3c4>
    16d4:	mov	x2, #0xc                   	// #12
    16d8:	adrp	x0, 0 <lt__alloc_die_callback>
    16dc:	add	x1, x0, #0x0
    16e0:	ldr	x0, [sp, #72]
    16e4:	bl	0 <strncmp>
    16e8:	cmp	w0, #0x0
    16ec:	b.ne	1718 <parse_dotla_file+0x208>  // b.any
    16f0:	ldr	x0, [sp, #72]
    16f4:	add	x0, x0, #0xc
    16f8:	mov	x1, x0
    16fc:	ldr	x0, [sp, #24]
    1700:	bl	13dc <trim>
    1704:	mov	w1, w0
    1708:	ldr	w0, [sp, #92]
    170c:	add	w0, w0, w1
    1710:	str	w0, [sp, #92]
    1714:	b	18d4 <parse_dotla_file+0x3c4>
    1718:	mov	x2, #0x7                   	// #7
    171c:	adrp	x0, 0 <lt__alloc_die_callback>
    1720:	add	x1, x0, #0x0
    1724:	ldr	x0, [sp, #72]
    1728:	bl	0 <strncmp>
    172c:	cmp	w0, #0x0
    1730:	b.ne	175c <parse_dotla_file+0x24c>  // b.any
    1734:	ldr	x0, [sp, #72]
    1738:	add	x0, x0, #0x7
    173c:	mov	x1, x0
    1740:	ldr	x0, [sp, #40]
    1744:	bl	13dc <trim>
    1748:	mov	w1, w0
    174c:	ldr	w0, [sp, #92]
    1750:	add	w0, w0, w1
    1754:	str	w0, [sp, #92]
    1758:	b	18d4 <parse_dotla_file+0x3c4>
    175c:	mov	x2, #0x10                  	// #16
    1760:	adrp	x0, 0 <lt__alloc_die_callback>
    1764:	add	x1, x0, #0x0
    1768:	ldr	x0, [sp, #72]
    176c:	bl	0 <strncmp>
    1770:	cmp	w0, #0x0
    1774:	b.ne	17a0 <parse_dotla_file+0x290>  // b.any
    1778:	ldr	x0, [sp, #72]
    177c:	add	x0, x0, #0x10
    1780:	mov	x1, x0
    1784:	ldr	x0, [sp, #32]
    1788:	bl	13dc <trim>
    178c:	mov	w1, w0
    1790:	ldr	w0, [sp, #92]
    1794:	add	w0, w0, w1
    1798:	str	w0, [sp, #92]
    179c:	b	18d4 <parse_dotla_file+0x3c4>
    17a0:	adrp	x0, 0 <lt__alloc_die_callback>
    17a4:	add	x1, x0, #0x0
    17a8:	ldr	x0, [sp, #72]
    17ac:	bl	0 <strcmp>
    17b0:	cmp	w0, #0x0
    17b4:	b.ne	17c8 <parse_dotla_file+0x2b8>  // b.any
    17b8:	ldr	x0, [sp, #16]
    17bc:	mov	w1, #0x1                   	// #1
    17c0:	str	w1, [x0]
    17c4:	b	18d4 <parse_dotla_file+0x3c4>
    17c8:	adrp	x0, 0 <lt__alloc_die_callback>
    17cc:	add	x1, x0, #0x0
    17d0:	ldr	x0, [sp, #72]
    17d4:	bl	0 <strcmp>
    17d8:	cmp	w0, #0x0
    17dc:	b.ne	17ec <parse_dotla_file+0x2dc>  // b.any
    17e0:	ldr	x0, [sp, #16]
    17e4:	str	wzr, [x0]
    17e8:	b	18d4 <parse_dotla_file+0x3c4>
    17ec:	ldr	x0, [sp, #48]
    17f0:	ldr	x0, [x0]
    17f4:	cmp	x0, #0x0
    17f8:	b.ne	18d4 <parse_dotla_file+0x3c4>  // b.any
    17fc:	mov	x2, #0xe                   	// #14
    1800:	adrp	x0, 0 <lt__alloc_die_callback>
    1804:	add	x1, x0, #0x0
    1808:	ldr	x0, [sp, #72]
    180c:	bl	0 <strncmp>
    1810:	cmp	w0, #0x0
    1814:	b.ne	18d4 <parse_dotla_file+0x3c4>  // b.any
    1818:	ldr	x0, [sp, #72]
    181c:	add	x0, x0, #0xe
    1820:	mov	x1, x0
    1824:	ldr	x0, [sp, #48]
    1828:	bl	13dc <trim>
    182c:	mov	w1, w0
    1830:	ldr	w0, [sp, #92]
    1834:	add	w0, w0, w1
    1838:	str	w0, [sp, #92]
    183c:	ldr	w0, [sp, #92]
    1840:	cmp	w0, #0x0
    1844:	b.ne	18d4 <parse_dotla_file+0x3c4>  // b.any
    1848:	ldr	x0, [sp, #48]
    184c:	ldr	x0, [x0]
    1850:	cmp	x0, #0x0
    1854:	b.eq	18d4 <parse_dotla_file+0x3c4>  // b.none
    1858:	ldr	x0, [sp, #48]
    185c:	ldr	x0, [x0]
    1860:	mov	w1, #0x20                  	// #32
    1864:	bl	0 <strrchr>
    1868:	str	x0, [sp, #64]
    186c:	ldr	x0, [sp, #64]
    1870:	cmp	x0, #0x0
    1874:	b.eq	18d4 <parse_dotla_file+0x3c4>  // b.none
    1878:	ldr	x0, [sp, #64]
    187c:	add	x0, x0, #0x1
    1880:	bl	0 <lt__strdup>
    1884:	str	x0, [sp, #64]
    1888:	ldr	x0, [sp, #64]
    188c:	cmp	x0, #0x0
    1890:	b.ne	18a4 <parse_dotla_file+0x394>  // b.any
    1894:	ldr	w0, [sp, #92]
    1898:	add	w0, w0, #0x1
    189c:	str	w0, [sp, #92]
    18a0:	b	1900 <parse_dotla_file+0x3f0>
    18a4:	ldr	x0, [sp, #48]
    18a8:	ldr	x0, [x0]
    18ac:	ldr	x1, [sp, #64]
    18b0:	cmp	x1, x0
    18b4:	b.eq	18d4 <parse_dotla_file+0x3c4>  // b.none
    18b8:	ldr	x0, [sp, #48]
    18bc:	ldr	x0, [x0]
    18c0:	bl	0 <free>
    18c4:	ldr	x0, [sp, #48]
    18c8:	ldr	x1, [sp, #64]
    18cc:	str	x1, [x0]
    18d0:	str	xzr, [sp, #64]
    18d4:	ldr	w0, [sp, #92]
    18d8:	cmp	w0, #0x0
    18dc:	b.ne	18fc <parse_dotla_file+0x3ec>  // b.any
    18e0:	ldr	x0, [sp, #56]
    18e4:	bl	0 <feof>
    18e8:	cmp	w0, #0x0
    18ec:	b.eq	1568 <parse_dotla_file+0x58>  // b.none
    18f0:	b	1900 <parse_dotla_file+0x3f0>
    18f4:	nop
    18f8:	b	1900 <parse_dotla_file+0x3f0>
    18fc:	nop
    1900:	ldr	x0, [sp, #72]
    1904:	bl	0 <free>
    1908:	str	xzr, [sp, #72]
    190c:	ldr	w0, [sp, #92]
    1910:	ldp	x29, x30, [sp], #96
    1914:	ret

0000000000001918 <try_dlopen>:
    1918:	stp	x29, x30, [sp, #-208]!
    191c:	mov	x29, sp
    1920:	str	x19, [sp, #16]
    1924:	str	x0, [sp, #56]
    1928:	str	x1, [sp, #48]
    192c:	str	x2, [sp, #40]
    1930:	str	x3, [sp, #32]
    1934:	str	xzr, [sp, #152]
    1938:	str	xzr, [sp, #200]
    193c:	str	xzr, [sp, #120]
    1940:	str	xzr, [sp, #192]
    1944:	str	xzr, [sp, #112]
    1948:	str	xzr, [sp, #184]
    194c:	str	xzr, [sp, #176]
    1950:	str	wzr, [sp, #172]
    1954:	ldr	x0, [sp, #56]
    1958:	cmp	x0, #0x0
    195c:	b.ne	1980 <try_dlopen+0x68>  // b.any
    1960:	adrp	x0, 0 <lt__alloc_die_callback>
    1964:	add	x3, x0, #0x0
    1968:	mov	w2, #0x494                 	// #1172
    196c:	adrp	x0, 0 <lt__alloc_die_callback>
    1970:	add	x1, x0, #0x0
    1974:	adrp	x0, 0 <lt__alloc_die_callback>
    1978:	add	x0, x0, #0x0
    197c:	bl	0 <__assert_fail>
    1980:	ldr	x0, [sp, #56]
    1984:	ldr	x0, [x0]
    1988:	cmp	x0, #0x0
    198c:	b.eq	19b0 <try_dlopen+0x98>  // b.none
    1990:	adrp	x0, 0 <lt__alloc_die_callback>
    1994:	add	x3, x0, #0x0
    1998:	mov	w2, #0x495                 	// #1173
    199c:	adrp	x0, 0 <lt__alloc_die_callback>
    19a0:	add	x1, x0, #0x0
    19a4:	adrp	x0, 0 <lt__alloc_die_callback>
    19a8:	add	x0, x0, #0x0
    19ac:	bl	0 <__assert_fail>
    19b0:	bl	0 <lt__get_last_error>
    19b4:	str	x0, [sp, #152]
    19b8:	ldr	x0, [sp, #48]
    19bc:	cmp	x0, #0x0
    19c0:	b.ne	1a44 <try_dlopen+0x12c>  // b.any
    19c4:	mov	x0, #0x58                  	// #88
    19c8:	bl	0 <lt__zalloc>
    19cc:	mov	x1, x0
    19d0:	ldr	x0, [sp, #56]
    19d4:	str	x1, [x0]
    19d8:	ldr	x0, [sp, #56]
    19dc:	ldr	x0, [x0]
    19e0:	cmp	x0, #0x0
    19e4:	b.ne	19f0 <try_dlopen+0xd8>  // b.any
    19e8:	mov	w0, #0x1                   	// #1
    19ec:	b	24f4 <try_dlopen+0xbdc>
    19f0:	ldr	x0, [sp, #56]
    19f4:	ldr	x0, [x0]
    19f8:	str	x0, [sp, #104]
    19fc:	ldr	x0, [sp, #104]
    1a00:	ldrb	w1, [x0, #36]
    1a04:	orr	w1, w1, #0x1
    1a08:	strb	w1, [x0, #36]
    1a0c:	add	x0, sp, #0x68
    1a10:	mov	x3, #0x0                   	// #0
    1a14:	ldr	x2, [sp, #32]
    1a18:	mov	x1, #0x0                   	// #0
    1a1c:	bl	4ec <tryall_dlopen>
    1a20:	cmp	w0, #0x0
    1a24:	b.eq	23b4 <try_dlopen+0xa9c>  // b.none
    1a28:	ldr	x0, [sp, #56]
    1a2c:	ldr	x0, [x0]
    1a30:	bl	0 <free>
    1a34:	ldr	x0, [sp, #56]
    1a38:	str	xzr, [x0]
    1a3c:	mov	w0, #0x1                   	// #1
    1a40:	b	24f4 <try_dlopen+0xbdc>
    1a44:	ldr	x0, [sp, #48]
    1a48:	cmp	x0, #0x0
    1a4c:	b.eq	1a60 <try_dlopen+0x148>  // b.none
    1a50:	ldr	x0, [sp, #48]
    1a54:	ldrb	w0, [x0]
    1a58:	cmp	w0, #0x0
    1a5c:	b.ne	1a80 <try_dlopen+0x168>  // b.any
    1a60:	adrp	x0, 0 <lt__alloc_die_callback>
    1a64:	add	x3, x0, #0x0
    1a68:	mov	w2, #0x4b4                 	// #1204
    1a6c:	adrp	x0, 0 <lt__alloc_die_callback>
    1a70:	add	x1, x0, #0x0
    1a74:	adrp	x0, 0 <lt__alloc_die_callback>
    1a78:	add	x0, x0, #0x0
    1a7c:	bl	0 <__assert_fail>
    1a80:	ldr	x0, [sp, #40]
    1a84:	cmp	x0, #0x0
    1a88:	b.eq	1b28 <try_dlopen+0x210>  // b.none
    1a8c:	ldr	x0, [sp, #48]
    1a90:	cmp	x0, #0x0
    1a94:	b.eq	1ab8 <try_dlopen+0x1a0>  // b.none
    1a98:	ldr	x0, [sp, #48]
    1a9c:	ldrb	w0, [x0]
    1aa0:	cmp	w0, #0x0
    1aa4:	b.eq	1ab8 <try_dlopen+0x1a0>  // b.none
    1aa8:	ldr	x0, [sp, #48]
    1aac:	bl	0 <strlen>
    1ab0:	mov	x19, x0
    1ab4:	b	1abc <try_dlopen+0x1a4>
    1ab8:	mov	x19, #0x0                   	// #0
    1abc:	ldr	x0, [sp, #40]
    1ac0:	cmp	x0, #0x0
    1ac4:	b.eq	1ae4 <try_dlopen+0x1cc>  // b.none
    1ac8:	ldr	x0, [sp, #40]
    1acc:	ldrb	w0, [x0]
    1ad0:	cmp	w0, #0x0
    1ad4:	b.eq	1ae4 <try_dlopen+0x1cc>  // b.none
    1ad8:	ldr	x0, [sp, #40]
    1adc:	bl	0 <strlen>
    1ae0:	b	1ae8 <try_dlopen+0x1d0>
    1ae4:	mov	x0, #0x0                   	// #0
    1ae8:	add	x0, x19, x0
    1aec:	add	x0, x0, #0x1
    1af0:	bl	0 <lt__malloc>
    1af4:	str	x0, [sp, #176]
    1af8:	ldr	x0, [sp, #176]
    1afc:	cmp	x0, #0x0
    1b00:	b.ne	1b0c <try_dlopen+0x1f4>  // b.any
    1b04:	mov	w0, #0x1                   	// #1
    1b08:	b	24f4 <try_dlopen+0xbdc>
    1b0c:	ldr	x3, [sp, #40]
    1b10:	ldr	x2, [sp, #48]
    1b14:	adrp	x0, 0 <lt__alloc_die_callback>
    1b18:	add	x1, x0, #0x0
    1b1c:	ldr	x0, [sp, #176]
    1b20:	bl	0 <sprintf>
    1b24:	b	1b48 <try_dlopen+0x230>
    1b28:	ldr	x0, [sp, #48]
    1b2c:	bl	0 <lt__strdup>
    1b30:	str	x0, [sp, #176]
    1b34:	ldr	x0, [sp, #176]
    1b38:	cmp	x0, #0x0
    1b3c:	b.ne	1b48 <try_dlopen+0x230>  // b.any
    1b40:	mov	w0, #0x1                   	// #1
    1b44:	b	24f4 <try_dlopen+0xbdc>
    1b48:	add	x0, sp, #0x78
    1b4c:	mov	x1, x0
    1b50:	ldr	x0, [sp, #176]
    1b54:	bl	ab8 <canonicalize_path>
    1b58:	cmp	w0, #0x0
    1b5c:	b.eq	1b70 <try_dlopen+0x258>  // b.none
    1b60:	ldr	w0, [sp, #172]
    1b64:	add	w0, w0, #0x1
    1b68:	str	w0, [sp, #172]
    1b6c:	b	249c <try_dlopen+0xb84>
    1b70:	ldr	x0, [sp, #120]
    1b74:	mov	w1, #0x2f                  	// #47
    1b78:	bl	0 <strrchr>
    1b7c:	str	x0, [sp, #192]
    1b80:	ldr	x0, [sp, #192]
    1b84:	cmp	x0, #0x0
    1b88:	b.eq	1bfc <try_dlopen+0x2e4>  // b.none
    1b8c:	ldr	x0, [sp, #192]
    1b90:	add	x1, x0, #0x1
    1b94:	ldr	x0, [sp, #120]
    1b98:	sub	x0, x1, x0
    1b9c:	str	x0, [sp, #144]
    1ba0:	ldr	x0, [sp, #144]
    1ba4:	add	x0, x0, #0x1
    1ba8:	bl	0 <lt__malloc>
    1bac:	str	x0, [sp, #112]
    1bb0:	ldr	x0, [sp, #112]
    1bb4:	cmp	x0, #0x0
    1bb8:	b.ne	1bcc <try_dlopen+0x2b4>  // b.any
    1bbc:	ldr	w0, [sp, #172]
    1bc0:	add	w0, w0, #0x1
    1bc4:	str	w0, [sp, #172]
    1bc8:	b	249c <try_dlopen+0xb84>
    1bcc:	ldr	x0, [sp, #112]
    1bd0:	ldr	x1, [sp, #120]
    1bd4:	ldr	x2, [sp, #144]
    1bd8:	bl	0 <lt_strlcpy>
    1bdc:	ldr	x1, [sp, #112]
    1be0:	ldr	x0, [sp, #144]
    1be4:	add	x0, x1, x0
    1be8:	strb	wzr, [x0]
    1bec:	ldr	x0, [sp, #192]
    1bf0:	add	x0, x0, #0x1
    1bf4:	str	x0, [sp, #192]
    1bf8:	b	1c20 <try_dlopen+0x308>
    1bfc:	ldr	x0, [sp, #120]
    1c00:	ldr	x1, [sp, #192]
    1c04:	cmp	x1, x0
    1c08:	b.eq	1c20 <try_dlopen+0x308>  // b.none
    1c0c:	ldr	x0, [sp, #192]
    1c10:	bl	0 <free>
    1c14:	ldr	x0, [sp, #120]
    1c18:	str	x0, [sp, #192]
    1c1c:	str	xzr, [sp, #120]
    1c20:	ldr	x0, [sp, #192]
    1c24:	cmp	x0, #0x0
    1c28:	b.eq	1c3c <try_dlopen+0x324>  // b.none
    1c2c:	ldr	x0, [sp, #192]
    1c30:	ldrb	w0, [x0]
    1c34:	cmp	w0, #0x0
    1c38:	b.ne	1c5c <try_dlopen+0x344>  // b.any
    1c3c:	adrp	x0, 0 <lt__alloc_die_callback>
    1c40:	add	x3, x0, #0x0
    1c44:	mov	w2, #0x4e3                 	// #1251
    1c48:	adrp	x0, 0 <lt__alloc_die_callback>
    1c4c:	add	x1, x0, #0x0
    1c50:	adrp	x0, 0 <lt__alloc_die_callback>
    1c54:	add	x0, x0, #0x0
    1c58:	bl	0 <__assert_fail>
    1c5c:	mov	w1, #0x2e                  	// #46
    1c60:	ldr	x0, [sp, #192]
    1c64:	bl	0 <strrchr>
    1c68:	str	x0, [sp, #40]
    1c6c:	ldr	x0, [sp, #40]
    1c70:	cmp	x0, #0x0
    1c74:	b.ne	1cb0 <try_dlopen+0x398>  // b.any
    1c78:	ldr	x0, [sp, #192]
    1c7c:	cmp	x0, #0x0
    1c80:	b.eq	1ca0 <try_dlopen+0x388>  // b.none
    1c84:	ldr	x0, [sp, #192]
    1c88:	ldrb	w0, [x0]
    1c8c:	cmp	w0, #0x0
    1c90:	b.eq	1ca0 <try_dlopen+0x388>  // b.none
    1c94:	ldr	x0, [sp, #192]
    1c98:	bl	0 <strlen>
    1c9c:	b	1ca4 <try_dlopen+0x38c>
    1ca0:	mov	x0, #0x0                   	// #0
    1ca4:	ldr	x1, [sp, #192]
    1ca8:	add	x0, x1, x0
    1cac:	str	x0, [sp, #40]
    1cb0:	ldr	x1, [sp, #40]
    1cb4:	ldr	x0, [sp, #192]
    1cb8:	sub	x0, x1, x0
    1cbc:	add	x0, x0, #0x1
    1cc0:	bl	0 <lt__malloc>
    1cc4:	str	x0, [sp, #184]
    1cc8:	ldr	x0, [sp, #184]
    1ccc:	cmp	x0, #0x0
    1cd0:	b.ne	1ce4 <try_dlopen+0x3cc>  // b.any
    1cd4:	ldr	w0, [sp, #172]
    1cd8:	add	w0, w0, #0x1
    1cdc:	str	w0, [sp, #172]
    1ce0:	b	249c <try_dlopen+0xb84>
    1ce4:	str	wzr, [sp, #168]
    1ce8:	b	1d64 <try_dlopen+0x44c>
    1cec:	bl	0 <__ctype_b_loc>
    1cf0:	ldr	x1, [x0]
    1cf4:	ldrsw	x0, [sp, #168]
    1cf8:	ldr	x2, [sp, #192]
    1cfc:	add	x0, x2, x0
    1d00:	ldrb	w0, [x0]
    1d04:	and	x0, x0, #0xff
    1d08:	lsl	x0, x0, #1
    1d0c:	add	x0, x1, x0
    1d10:	ldrh	w0, [x0]
    1d14:	and	w0, w0, #0x8
    1d18:	cmp	w0, #0x0
    1d1c:	b.eq	1d44 <try_dlopen+0x42c>  // b.none
    1d20:	ldrsw	x0, [sp, #168]
    1d24:	ldr	x1, [sp, #192]
    1d28:	add	x1, x1, x0
    1d2c:	ldrsw	x0, [sp, #168]
    1d30:	ldr	x2, [sp, #184]
    1d34:	add	x0, x2, x0
    1d38:	ldrb	w1, [x1]
    1d3c:	strb	w1, [x0]
    1d40:	b	1d58 <try_dlopen+0x440>
    1d44:	ldrsw	x0, [sp, #168]
    1d48:	ldr	x1, [sp, #184]
    1d4c:	add	x0, x1, x0
    1d50:	mov	w1, #0x5f                  	// #95
    1d54:	strb	w1, [x0]
    1d58:	ldr	w0, [sp, #168]
    1d5c:	add	w0, w0, #0x1
    1d60:	str	w0, [sp, #168]
    1d64:	ldrsw	x1, [sp, #168]
    1d68:	ldr	x2, [sp, #40]
    1d6c:	ldr	x0, [sp, #192]
    1d70:	sub	x0, x2, x0
    1d74:	cmp	x1, x0
    1d78:	b.lt	1cec <try_dlopen+0x3d4>  // b.tstop
    1d7c:	ldr	x1, [sp, #40]
    1d80:	ldr	x0, [sp, #192]
    1d84:	sub	x0, x1, x0
    1d88:	mov	x1, x0
    1d8c:	ldr	x0, [sp, #184]
    1d90:	add	x0, x0, x1
    1d94:	strb	wzr, [x0]
    1d98:	ldr	x0, [sp, #112]
    1d9c:	cmp	x0, #0x0
    1da0:	b.ne	1ee0 <try_dlopen+0x5c8>  // b.any
    1da4:	adrp	x0, 0 <lt__alloc_die_callback>
    1da8:	add	x0, x0, #0x0
    1dac:	bl	0 <lt_dlloader_find>
    1db0:	str	x0, [sp, #136]
    1db4:	ldr	x0, [sp, #136]
    1db8:	cmp	x0, #0x0
    1dbc:	b.eq	1ee0 <try_dlopen+0x5c8>  // b.none
    1dc0:	ldr	x0, [sp, #184]
    1dc4:	cmp	x0, #0x0
    1dc8:	b.eq	1dec <try_dlopen+0x4d4>  // b.none
    1dcc:	ldr	x0, [sp, #184]
    1dd0:	ldrb	w0, [x0]
    1dd4:	cmp	w0, #0x0
    1dd8:	b.eq	1dec <try_dlopen+0x4d4>  // b.none
    1ddc:	ldr	x0, [sp, #184]
    1de0:	bl	0 <strlen>
    1de4:	add	x0, x0, #0x6
    1de8:	b	1df0 <try_dlopen+0x4d8>
    1dec:	mov	x0, #0x6                   	// #6
    1df0:	bl	0 <lt__malloc>
    1df4:	str	x0, [sp, #200]
    1df8:	mov	x0, #0x58                  	// #88
    1dfc:	bl	0 <lt__zalloc>
    1e00:	mov	x1, x0
    1e04:	ldr	x0, [sp, #56]
    1e08:	str	x1, [x0]
    1e0c:	ldr	x0, [sp, #56]
    1e10:	ldr	x0, [x0]
    1e14:	cmp	x0, #0x0
    1e18:	b.eq	1e28 <try_dlopen+0x510>  // b.none
    1e1c:	ldr	x0, [sp, #200]
    1e20:	cmp	x0, #0x0
    1e24:	b.ne	1e38 <try_dlopen+0x520>  // b.any
    1e28:	ldr	w0, [sp, #172]
    1e2c:	add	w0, w0, #0x1
    1e30:	str	w0, [sp, #172]
    1e34:	b	249c <try_dlopen+0xb84>
    1e38:	ldr	x0, [sp, #56]
    1e3c:	ldr	x0, [x0]
    1e40:	str	x0, [sp, #104]
    1e44:	mov	x2, #0x3                   	// #3
    1e48:	adrp	x0, 0 <lt__alloc_die_callback>
    1e4c:	add	x1, x0, #0x0
    1e50:	ldr	x0, [sp, #184]
    1e54:	bl	0 <strncmp>
    1e58:	cmp	w0, #0x0
    1e5c:	b.ne	1e90 <try_dlopen+0x578>  // b.any
    1e60:	ldr	x0, [sp, #184]
    1e64:	add	x1, x0, #0x3
    1e68:	adrp	x0, 0 <lt__alloc_die_callback>
    1e6c:	add	x4, x0, #0x0
    1e70:	mov	x3, x1
    1e74:	adrp	x0, 0 <lt__alloc_die_callback>
    1e78:	add	x2, x0, #0x0
    1e7c:	adrp	x0, 0 <lt__alloc_die_callback>
    1e80:	add	x1, x0, #0x0
    1e84:	ldr	x0, [sp, #200]
    1e88:	bl	0 <sprintf>
    1e8c:	b	1eac <try_dlopen+0x594>
    1e90:	adrp	x0, 0 <lt__alloc_die_callback>
    1e94:	add	x3, x0, #0x0
    1e98:	ldr	x2, [sp, #184]
    1e9c:	adrp	x0, 0 <lt__alloc_die_callback>
    1ea0:	add	x1, x0, #0x0
    1ea4:	ldr	x0, [sp, #200]
    1ea8:	bl	0 <sprintf>
    1eac:	add	x0, sp, #0x68
    1eb0:	ldr	x3, [sp, #136]
    1eb4:	ldr	x2, [sp, #32]
    1eb8:	ldr	x1, [sp, #200]
    1ebc:	bl	4ec <tryall_dlopen>
    1ec0:	cmp	w0, #0x0
    1ec4:	b.eq	23bc <try_dlopen+0xaa4>  // b.none
    1ec8:	ldr	x0, [sp, #56]
    1ecc:	ldr	x0, [x0]
    1ed0:	bl	0 <free>
    1ed4:	ldr	x0, [sp, #56]
    1ed8:	str	xzr, [x0]
    1edc:	str	xzr, [sp, #104]
    1ee0:	ldr	x0, [sp, #32]
    1ee4:	cmp	x0, #0x0
    1ee8:	b.eq	1f04 <try_dlopen+0x5ec>  // b.none
    1eec:	ldr	x0, [sp, #32]
    1ef0:	ldrb	w0, [x0]
    1ef4:	and	w0, w0, #0x10
    1ef8:	and	w0, w0, #0xff
    1efc:	cmp	w0, #0x0
    1f00:	b.ne	2498 <try_dlopen+0xb80>  // b.any
    1f04:	ldr	x0, [sp, #40]
    1f08:	cmp	x0, #0x0
    1f0c:	b.eq	226c <try_dlopen+0x954>  // b.none
    1f10:	adrp	x0, 0 <lt__alloc_die_callback>
    1f14:	add	x1, x0, #0x0
    1f18:	ldr	x0, [sp, #40]
    1f1c:	bl	0 <strcmp>
    1f20:	cmp	w0, #0x0
    1f24:	b.ne	226c <try_dlopen+0x954>  // b.any
    1f28:	str	xzr, [sp, #160]
    1f2c:	str	xzr, [sp, #96]
    1f30:	str	xzr, [sp, #88]
    1f34:	str	xzr, [sp, #80]
    1f38:	str	xzr, [sp, #72]
    1f3c:	mov	w0, #0x1                   	// #1
    1f40:	str	w0, [sp, #68]
    1f44:	ldr	x0, [sp, #112]
    1f48:	cmp	x0, #0x0
    1f4c:	b.ne	2044 <try_dlopen+0x72c>  // b.any
    1f50:	adrp	x0, 0 <lt__alloc_die_callback>
    1f54:	add	x0, x0, #0x0
    1f58:	ldr	x0, [x0]
    1f5c:	str	x0, [sp, #128]
    1f60:	ldr	x0, [sp, #128]
    1f64:	cmp	x0, #0x0
    1f68:	b.eq	1f8c <try_dlopen+0x674>  // b.none
    1f6c:	adrp	x0, 0 <lt__alloc_die_callback>
    1f70:	add	x0, x0, #0x0
    1f74:	ldr	x0, [x0]
    1f78:	add	x1, sp, #0x70
    1f7c:	mov	x2, x1
    1f80:	ldr	x1, [sp, #192]
    1f84:	bl	11d4 <find_file>
    1f88:	str	x0, [sp, #160]
    1f8c:	ldr	x0, [sp, #160]
    1f90:	cmp	x0, #0x0
    1f94:	b.ne	1fcc <try_dlopen+0x6b4>  // b.any
    1f98:	adrp	x0, 0 <lt__alloc_die_callback>
    1f9c:	add	x0, x0, #0x0
    1fa0:	bl	0 <getenv>
    1fa4:	str	x0, [sp, #128]
    1fa8:	ldr	x0, [sp, #128]
    1fac:	cmp	x0, #0x0
    1fb0:	b.eq	1fcc <try_dlopen+0x6b4>  // b.none
    1fb4:	add	x0, sp, #0x70
    1fb8:	mov	x2, x0
    1fbc:	ldr	x1, [sp, #192]
    1fc0:	ldr	x0, [sp, #128]
    1fc4:	bl	11d4 <find_file>
    1fc8:	str	x0, [sp, #160]
    1fcc:	ldr	x0, [sp, #160]
    1fd0:	cmp	x0, #0x0
    1fd4:	b.ne	200c <try_dlopen+0x6f4>  // b.any
    1fd8:	adrp	x0, 0 <lt__alloc_die_callback>
    1fdc:	add	x0, x0, #0x0
    1fe0:	bl	0 <getenv>
    1fe4:	str	x0, [sp, #128]
    1fe8:	ldr	x0, [sp, #128]
    1fec:	cmp	x0, #0x0
    1ff0:	b.eq	200c <try_dlopen+0x6f4>  // b.none
    1ff4:	add	x0, sp, #0x70
    1ff8:	mov	x2, x0
    1ffc:	ldr	x1, [sp, #192]
    2000:	ldr	x0, [sp, #128]
    2004:	bl	11d4 <find_file>
    2008:	str	x0, [sp, #160]
    200c:	ldr	x0, [sp, #160]
    2010:	cmp	x0, #0x0
    2014:	b.ne	2058 <try_dlopen+0x740>  // b.any
    2018:	mov	w0, #0x2f                  	// #47
    201c:	cmp	w0, #0x0
    2020:	b.eq	2058 <try_dlopen+0x740>  // b.none
    2024:	add	x0, sp, #0x70
    2028:	mov	x2, x0
    202c:	ldr	x1, [sp, #192]
    2030:	adrp	x0, 0 <lt__alloc_die_callback>
    2034:	add	x0, x0, #0x0
    2038:	bl	11d4 <find_file>
    203c:	str	x0, [sp, #160]
    2040:	b	2058 <try_dlopen+0x740>
    2044:	adrp	x0, 0 <lt__alloc_die_callback>
    2048:	add	x1, x0, #0x0
    204c:	ldr	x0, [sp, #176]
    2050:	bl	0 <fopen>
    2054:	str	x0, [sp, #160]
    2058:	ldr	x0, [sp, #160]
    205c:	cmp	x0, #0x0
    2060:	b.ne	2080 <try_dlopen+0x768>  // b.any
    2064:	mov	w0, #0x5                   	// #5
    2068:	bl	0 <lt__error_string>
    206c:	bl	0 <lt__set_last_error>
    2070:	ldr	w0, [sp, #172]
    2074:	add	w0, w0, #0x1
    2078:	str	w0, [sp, #172]
    207c:	b	249c <try_dlopen+0xb84>
    2080:	add	x4, sp, #0x44
    2084:	add	x3, sp, #0x58
    2088:	add	x2, sp, #0x48
    208c:	add	x1, sp, #0x50
    2090:	add	x0, sp, #0x60
    2094:	mov	x5, x4
    2098:	mov	x4, x3
    209c:	mov	x3, x2
    20a0:	mov	x2, x1
    20a4:	mov	x1, x0
    20a8:	ldr	x0, [sp, #160]
    20ac:	bl	1510 <parse_dotla_file>
    20b0:	cmp	w0, #0x0
    20b4:	b.eq	20c4 <try_dlopen+0x7ac>  // b.none
    20b8:	ldr	w0, [sp, #172]
    20bc:	add	w0, w0, #0x1
    20c0:	str	w0, [sp, #172]
    20c4:	ldr	x0, [sp, #160]
    20c8:	bl	0 <fclose>
    20cc:	mov	x0, #0x58                  	// #88
    20d0:	bl	0 <lt__zalloc>
    20d4:	mov	x1, x0
    20d8:	ldr	x0, [sp, #56]
    20dc:	str	x1, [x0]
    20e0:	ldr	x0, [sp, #56]
    20e4:	ldr	x0, [x0]
    20e8:	cmp	x0, #0x0
    20ec:	b.ne	20fc <try_dlopen+0x7e4>  // b.any
    20f0:	ldr	w0, [sp, #172]
    20f4:	add	w0, w0, #0x1
    20f8:	str	w0, [sp, #172]
    20fc:	ldr	w0, [sp, #172]
    2100:	cmp	w0, #0x0
    2104:	b.eq	2150 <try_dlopen+0x838>  // b.none
    2108:	ldr	x0, [sp, #96]
    210c:	bl	0 <free>
    2110:	str	xzr, [sp, #96]
    2114:	ldr	x0, [sp, #88]
    2118:	bl	0 <free>
    211c:	str	xzr, [sp, #88]
    2120:	ldr	x0, [sp, #80]
    2124:	bl	0 <free>
    2128:	str	xzr, [sp, #80]
    212c:	ldr	x0, [sp, #72]
    2130:	bl	0 <free>
    2134:	str	xzr, [sp, #72]
    2138:	ldr	x0, [sp, #56]
    213c:	ldr	x0, [x0]
    2140:	bl	0 <free>
    2144:	ldr	x0, [sp, #56]
    2148:	str	xzr, [x0]
    214c:	b	249c <try_dlopen+0xb84>
    2150:	ldr	x0, [sp, #56]
    2154:	ldr	x0, [x0]
    2158:	cmp	x0, #0x0
    215c:	b.ne	2180 <try_dlopen+0x868>  // b.any
    2160:	adrp	x0, 0 <lt__alloc_die_callback>
    2164:	add	x3, x0, #0x0
    2168:	mov	w2, #0x589                 	// #1417
    216c:	adrp	x0, 0 <lt__alloc_die_callback>
    2170:	add	x1, x0, #0x0
    2174:	adrp	x0, 0 <lt__alloc_die_callback>
    2178:	add	x0, x0, #0x0
    217c:	bl	0 <__assert_fail>
    2180:	ldr	x0, [sp, #56]
    2184:	ldr	x0, [x0]
    2188:	ldr	x1, [sp, #72]
    218c:	bl	12f4 <load_deplibs>
    2190:	cmp	w0, #0x0
    2194:	b.ne	21e8 <try_dlopen+0x8d0>  // b.any
    2198:	ldr	x0, [sp, #56]
    219c:	ldr	x0, [x0]
    21a0:	str	x0, [sp, #104]
    21a4:	ldr	x1, [sp, #112]
    21a8:	ldr	x2, [sp, #80]
    21ac:	ldr	x3, [sp, #96]
    21b0:	ldr	x4, [sp, #88]
    21b4:	ldr	w5, [sp, #68]
    21b8:	add	x0, sp, #0x68
    21bc:	ldr	x6, [sp, #32]
    21c0:	bl	994 <find_module>
    21c4:	cmp	w0, #0x0
    21c8:	b.eq	21f4 <try_dlopen+0x8dc>  // b.none
    21cc:	ldr	x0, [sp, #56]
    21d0:	ldr	x0, [x0]
    21d4:	bl	1314 <unload_deplibs>
    21d8:	ldr	w0, [sp, #172]
    21dc:	add	w0, w0, #0x1
    21e0:	str	w0, [sp, #172]
    21e4:	b	21f4 <try_dlopen+0x8dc>
    21e8:	ldr	w0, [sp, #172]
    21ec:	add	w0, w0, #0x1
    21f0:	str	w0, [sp, #172]
    21f4:	ldr	x0, [sp, #96]
    21f8:	bl	0 <free>
    21fc:	str	xzr, [sp, #96]
    2200:	ldr	x0, [sp, #88]
    2204:	bl	0 <free>
    2208:	str	xzr, [sp, #88]
    220c:	ldr	x0, [sp, #80]
    2210:	bl	0 <free>
    2214:	str	xzr, [sp, #80]
    2218:	ldr	x0, [sp, #72]
    221c:	bl	0 <free>
    2220:	str	xzr, [sp, #72]
    2224:	ldr	w0, [sp, #172]
    2228:	cmp	w0, #0x0
    222c:	b.eq	2248 <try_dlopen+0x930>  // b.none
    2230:	ldr	x0, [sp, #56]
    2234:	ldr	x0, [x0]
    2238:	bl	0 <free>
    223c:	ldr	x0, [sp, #56]
    2240:	str	xzr, [x0]
    2244:	b	249c <try_dlopen+0xb84>
    2248:	ldr	x0, [sp, #56]
    224c:	ldr	x1, [x0]
    2250:	ldr	x0, [sp, #104]
    2254:	cmp	x1, x0
    2258:	b.eq	23c4 <try_dlopen+0xaac>  // b.none
    225c:	ldr	x0, [sp, #56]
    2260:	ldr	x0, [x0]
    2264:	bl	1314 <unload_deplibs>
    2268:	b	23c4 <try_dlopen+0xaac>
    226c:	mov	x0, #0x58                  	// #88
    2270:	bl	0 <lt__zalloc>
    2274:	mov	x1, x0
    2278:	ldr	x0, [sp, #56]
    227c:	str	x1, [x0]
    2280:	ldr	x0, [sp, #56]
    2284:	ldr	x0, [x0]
    2288:	cmp	x0, #0x0
    228c:	b.ne	22a0 <try_dlopen+0x988>  // b.any
    2290:	ldr	w0, [sp, #172]
    2294:	add	w0, w0, #0x1
    2298:	str	w0, [sp, #172]
    229c:	b	249c <try_dlopen+0xb84>
    22a0:	ldr	x0, [sp, #56]
    22a4:	ldr	x0, [x0]
    22a8:	str	x0, [sp, #104]
    22ac:	ldr	x0, [sp, #112]
    22b0:	cmp	x0, #0x0
    22b4:	b.ne	2364 <try_dlopen+0xa4c>  // b.any
    22b8:	adrp	x0, 0 <lt__alloc_die_callback>
    22bc:	add	x0, x0, #0x0
    22c0:	ldr	x0, [x0]
    22c4:	add	x1, sp, #0x68
    22c8:	ldr	x3, [sp, #32]
    22cc:	mov	x2, x1
    22d0:	ldr	x1, [sp, #192]
    22d4:	bl	1290 <find_handle>
    22d8:	cmp	x0, #0x0
    22dc:	b.ne	2384 <try_dlopen+0xa6c>  // b.any
    22e0:	adrp	x0, 0 <lt__alloc_die_callback>
    22e4:	add	x0, x0, #0x0
    22e8:	bl	0 <getenv>
    22ec:	mov	x4, x0
    22f0:	add	x0, sp, #0x68
    22f4:	ldr	x3, [sp, #32]
    22f8:	mov	x2, x0
    22fc:	ldr	x1, [sp, #192]
    2300:	mov	x0, x4
    2304:	bl	1290 <find_handle>
    2308:	cmp	x0, #0x0
    230c:	b.ne	2384 <try_dlopen+0xa6c>  // b.any
    2310:	adrp	x0, 0 <lt__alloc_die_callback>
    2314:	add	x0, x0, #0x0
    2318:	bl	0 <getenv>
    231c:	mov	x4, x0
    2320:	add	x0, sp, #0x68
    2324:	ldr	x3, [sp, #32]
    2328:	mov	x2, x0
    232c:	ldr	x1, [sp, #192]
    2330:	mov	x0, x4
    2334:	bl	1290 <find_handle>
    2338:	cmp	x0, #0x0
    233c:	b.ne	2384 <try_dlopen+0xa6c>  // b.any
    2340:	add	x0, sp, #0x68
    2344:	ldr	x3, [sp, #32]
    2348:	mov	x2, x0
    234c:	ldr	x1, [sp, #192]
    2350:	adrp	x0, 0 <lt__alloc_die_callback>
    2354:	add	x0, x0, #0x0
    2358:	bl	1290 <find_handle>
    235c:	cmp	x0, #0x0
    2360:	b.ne	2384 <try_dlopen+0xa6c>  // b.any
    2364:	add	x0, sp, #0x68
    2368:	mov	x3, #0x0                   	// #0
    236c:	ldr	x2, [sp, #32]
    2370:	ldr	x1, [sp, #176]
    2374:	bl	4ec <tryall_dlopen>
    2378:	cmp	w0, #0x0
    237c:	b.eq	2384 <try_dlopen+0xa6c>  // b.none
    2380:	str	xzr, [sp, #104]
    2384:	ldr	x0, [sp, #104]
    2388:	cmp	x0, #0x0
    238c:	b.ne	23cc <try_dlopen+0xab4>  // b.any
    2390:	ldr	x0, [sp, #56]
    2394:	ldr	x0, [x0]
    2398:	bl	0 <free>
    239c:	ldr	x0, [sp, #56]
    23a0:	str	xzr, [x0]
    23a4:	ldr	w0, [sp, #172]
    23a8:	add	w0, w0, #0x1
    23ac:	str	w0, [sp, #172]
    23b0:	b	249c <try_dlopen+0xb84>
    23b4:	nop
    23b8:	b	23d0 <try_dlopen+0xab8>
    23bc:	nop
    23c0:	b	23d0 <try_dlopen+0xab8>
    23c4:	nop
    23c8:	b	23d0 <try_dlopen+0xab8>
    23cc:	nop
    23d0:	ldr	x0, [sp, #56]
    23d4:	ldr	x1, [x0]
    23d8:	ldr	x0, [sp, #104]
    23dc:	cmp	x1, x0
    23e0:	b.eq	2400 <try_dlopen+0xae8>  // b.none
    23e4:	ldr	x0, [sp, #56]
    23e8:	ldr	x0, [x0]
    23ec:	bl	0 <free>
    23f0:	ldr	x1, [sp, #104]
    23f4:	ldr	x0, [sp, #56]
    23f8:	str	x1, [x0]
    23fc:	str	xzr, [sp, #104]
    2400:	ldr	x0, [sp, #56]
    2404:	ldr	x0, [x0]
    2408:	ldr	w0, [x0, #32]
    240c:	cmp	w0, #0x0
    2410:	b.ne	248c <try_dlopen+0xb74>  // b.any
    2414:	ldr	x0, [sp, #56]
    2418:	ldr	x0, [x0]
    241c:	mov	w1, #0x1                   	// #1
    2420:	str	w1, [x0, #32]
    2424:	ldr	x0, [sp, #56]
    2428:	ldr	x0, [x0]
    242c:	ldr	x0, [x0, #24]
    2430:	ldr	x1, [sp, #184]
    2434:	cmp	x1, x0
    2438:	b.eq	2460 <try_dlopen+0xb48>  // b.none
    243c:	ldr	x0, [sp, #56]
    2440:	ldr	x0, [x0]
    2444:	ldr	x0, [x0, #24]
    2448:	bl	0 <free>
    244c:	ldr	x0, [sp, #56]
    2450:	ldr	x0, [x0]
    2454:	ldr	x1, [sp, #184]
    2458:	str	x1, [x0, #24]
    245c:	str	xzr, [sp, #184]
    2460:	ldr	x0, [sp, #56]
    2464:	ldr	x0, [x0]
    2468:	adrp	x1, 0 <lt__alloc_die_callback>
    246c:	add	x1, x1, #0x0
    2470:	ldr	x1, [x1]
    2474:	str	x1, [x0]
    2478:	ldr	x0, [sp, #56]
    247c:	ldr	x1, [x0]
    2480:	adrp	x0, 0 <lt__alloc_die_callback>
    2484:	add	x0, x0, #0x0
    2488:	str	x1, [x0]
    248c:	ldr	x0, [sp, #152]
    2490:	bl	0 <lt__set_last_error>
    2494:	b	249c <try_dlopen+0xb84>
    2498:	nop
    249c:	ldr	x0, [sp, #112]
    24a0:	bl	0 <free>
    24a4:	str	xzr, [sp, #112]
    24a8:	ldr	x0, [sp, #176]
    24ac:	bl	0 <free>
    24b0:	str	xzr, [sp, #176]
    24b4:	ldr	x0, [sp, #184]
    24b8:	bl	0 <free>
    24bc:	str	xzr, [sp, #184]
    24c0:	ldr	x0, [sp, #120]
    24c4:	cmp	x0, #0x0
    24c8:	b.ne	24d8 <try_dlopen+0xbc0>  // b.any
    24cc:	ldr	x0, [sp, #192]
    24d0:	bl	0 <free>
    24d4:	str	xzr, [sp, #192]
    24d8:	ldr	x0, [sp, #120]
    24dc:	bl	0 <free>
    24e0:	str	xzr, [sp, #120]
    24e4:	ldr	x0, [sp, #200]
    24e8:	bl	0 <free>
    24ec:	str	xzr, [sp, #200]
    24f0:	ldr	w0, [sp, #172]
    24f4:	ldr	x19, [sp, #16]
    24f8:	ldp	x29, x30, [sp], #208
    24fc:	ret

0000000000002500 <file_not_found>:
    2500:	stp	x29, x30, [sp, #-32]!
    2504:	mov	x29, sp
    2508:	str	xzr, [sp, #24]
    250c:	bl	0 <lt__get_last_error>
    2510:	str	x0, [sp, #24]
    2514:	mov	w0, #0x5                   	// #5
    2518:	bl	0 <lt__error_string>
    251c:	mov	x1, x0
    2520:	ldr	x0, [sp, #24]
    2524:	cmp	x0, x1
    2528:	b.ne	2534 <file_not_found+0x34>  // b.any
    252c:	mov	w0, #0x1                   	// #1
    2530:	b	2538 <file_not_found+0x38>
    2534:	mov	w0, #0x0                   	// #0
    2538:	ldp	x29, x30, [sp], #32
    253c:	ret

0000000000002540 <has_library_ext>:
    2540:	stp	x29, x30, [sp, #-48]!
    2544:	mov	x29, sp
    2548:	str	x0, [sp, #24]
    254c:	str	xzr, [sp, #40]
    2550:	ldr	x0, [sp, #24]
    2554:	cmp	x0, #0x0
    2558:	b.ne	257c <has_library_ext+0x3c>  // b.any
    255c:	adrp	x0, 0 <lt__alloc_die_callback>
    2560:	add	x3, x0, #0x0
    2564:	mov	w2, #0x608                 	// #1544
    2568:	adrp	x0, 0 <lt__alloc_die_callback>
    256c:	add	x1, x0, #0x0
    2570:	adrp	x0, 0 <lt__alloc_die_callback>
    2574:	add	x0, x0, #0x0
    2578:	bl	0 <__assert_fail>
    257c:	mov	w1, #0x2e                  	// #46
    2580:	ldr	x0, [sp, #24]
    2584:	bl	0 <strrchr>
    2588:	str	x0, [sp, #40]
    258c:	ldr	x0, [sp, #40]
    2590:	cmp	x0, #0x0
    2594:	b.eq	25d0 <has_library_ext+0x90>  // b.none
    2598:	adrp	x0, 0 <lt__alloc_die_callback>
    259c:	add	x1, x0, #0x0
    25a0:	ldr	x0, [sp, #40]
    25a4:	bl	0 <strcmp>
    25a8:	cmp	w0, #0x0
    25ac:	b.eq	25c8 <has_library_ext+0x88>  // b.none
    25b0:	adrp	x0, 0 <lt__alloc_die_callback>
    25b4:	add	x1, x0, #0x0
    25b8:	ldr	x0, [sp, #40]
    25bc:	bl	0 <strcmp>
    25c0:	cmp	w0, #0x0
    25c4:	b.ne	25d0 <has_library_ext+0x90>  // b.any
    25c8:	mov	w0, #0x1                   	// #1
    25cc:	b	25d4 <has_library_ext+0x94>
    25d0:	mov	w0, #0x0                   	// #0
    25d4:	ldp	x29, x30, [sp], #48
    25d8:	ret

00000000000025dc <lt_dladvise_init>:
    25dc:	stp	x29, x30, [sp, #-48]!
    25e0:	mov	x29, sp
    25e4:	str	x0, [sp, #24]
    25e8:	mov	x0, #0x4                   	// #4
    25ec:	bl	0 <lt__zalloc>
    25f0:	str	x0, [sp, #40]
    25f4:	ldr	x0, [sp, #24]
    25f8:	ldr	x1, [sp, #40]
    25fc:	str	x1, [x0]
    2600:	ldr	x0, [sp, #40]
    2604:	cmp	x0, #0x0
    2608:	cset	w0, eq  // eq = none
    260c:	and	w0, w0, #0xff
    2610:	ldp	x29, x30, [sp], #48
    2614:	ret

0000000000002618 <lt_dladvise_destroy>:
    2618:	stp	x29, x30, [sp, #-32]!
    261c:	mov	x29, sp
    2620:	str	x0, [sp, #24]
    2624:	ldr	x0, [sp, #24]
    2628:	cmp	x0, #0x0
    262c:	b.eq	2644 <lt_dladvise_destroy+0x2c>  // b.none
    2630:	ldr	x0, [sp, #24]
    2634:	ldr	x0, [x0]
    2638:	bl	0 <free>
    263c:	ldr	x0, [sp, #24]
    2640:	str	xzr, [x0]
    2644:	mov	w0, #0x0                   	// #0
    2648:	ldp	x29, x30, [sp], #32
    264c:	ret

0000000000002650 <lt_dladvise_ext>:
    2650:	stp	x29, x30, [sp, #-32]!
    2654:	mov	x29, sp
    2658:	str	x0, [sp, #24]
    265c:	ldr	x0, [sp, #24]
    2660:	cmp	x0, #0x0
    2664:	b.eq	2678 <lt_dladvise_ext+0x28>  // b.none
    2668:	ldr	x0, [sp, #24]
    266c:	ldr	x0, [x0]
    2670:	cmp	x0, #0x0
    2674:	b.ne	2698 <lt_dladvise_ext+0x48>  // b.any
    2678:	adrp	x0, 0 <lt__alloc_die_callback>
    267c:	add	x3, x0, #0x0
    2680:	mov	w2, #0x631                 	// #1585
    2684:	adrp	x0, 0 <lt__alloc_die_callback>
    2688:	add	x1, x0, #0x0
    268c:	adrp	x0, 0 <lt__alloc_die_callback>
    2690:	add	x0, x0, #0x0
    2694:	bl	0 <__assert_fail>
    2698:	ldr	x0, [sp, #24]
    269c:	ldr	x0, [x0]
    26a0:	ldrb	w1, [x0]
    26a4:	orr	w1, w1, #0x1
    26a8:	strb	w1, [x0]
    26ac:	mov	w0, #0x0                   	// #0
    26b0:	ldp	x29, x30, [sp], #32
    26b4:	ret

00000000000026b8 <lt_dladvise_resident>:
    26b8:	stp	x29, x30, [sp, #-32]!
    26bc:	mov	x29, sp
    26c0:	str	x0, [sp, #24]
    26c4:	ldr	x0, [sp, #24]
    26c8:	cmp	x0, #0x0
    26cc:	b.eq	26e0 <lt_dladvise_resident+0x28>  // b.none
    26d0:	ldr	x0, [sp, #24]
    26d4:	ldr	x0, [x0]
    26d8:	cmp	x0, #0x0
    26dc:	b.ne	2700 <lt_dladvise_resident+0x48>  // b.any
    26e0:	adrp	x0, 0 <lt__alloc_die_callback>
    26e4:	add	x3, x0, #0x0
    26e8:	mov	w2, #0x639                 	// #1593
    26ec:	adrp	x0, 0 <lt__alloc_die_callback>
    26f0:	add	x1, x0, #0x0
    26f4:	adrp	x0, 0 <lt__alloc_die_callback>
    26f8:	add	x0, x0, #0x0
    26fc:	bl	0 <__assert_fail>
    2700:	ldr	x0, [sp, #24]
    2704:	ldr	x0, [x0]
    2708:	ldrb	w1, [x0]
    270c:	orr	w1, w1, #0x2
    2710:	strb	w1, [x0]
    2714:	mov	w0, #0x0                   	// #0
    2718:	ldp	x29, x30, [sp], #32
    271c:	ret

0000000000002720 <lt_dladvise_local>:
    2720:	stp	x29, x30, [sp, #-32]!
    2724:	mov	x29, sp
    2728:	str	x0, [sp, #24]
    272c:	ldr	x0, [sp, #24]
    2730:	cmp	x0, #0x0
    2734:	b.eq	2748 <lt_dladvise_local+0x28>  // b.none
    2738:	ldr	x0, [sp, #24]
    273c:	ldr	x0, [x0]
    2740:	cmp	x0, #0x0
    2744:	b.ne	2768 <lt_dladvise_local+0x48>  // b.any
    2748:	adrp	x0, 0 <lt__alloc_die_callback>
    274c:	add	x3, x0, #0x0
    2750:	mov	w2, #0x641                 	// #1601
    2754:	adrp	x0, 0 <lt__alloc_die_callback>
    2758:	add	x1, x0, #0x0
    275c:	adrp	x0, 0 <lt__alloc_die_callback>
    2760:	add	x0, x0, #0x0
    2764:	bl	0 <__assert_fail>
    2768:	ldr	x0, [sp, #24]
    276c:	ldr	x0, [x0]
    2770:	ldrb	w1, [x0]
    2774:	orr	w1, w1, #0x8
    2778:	strb	w1, [x0]
    277c:	mov	w0, #0x0                   	// #0
    2780:	ldp	x29, x30, [sp], #32
    2784:	ret

0000000000002788 <lt_dladvise_global>:
    2788:	stp	x29, x30, [sp, #-32]!
    278c:	mov	x29, sp
    2790:	str	x0, [sp, #24]
    2794:	ldr	x0, [sp, #24]
    2798:	cmp	x0, #0x0
    279c:	b.eq	27b0 <lt_dladvise_global+0x28>  // b.none
    27a0:	ldr	x0, [sp, #24]
    27a4:	ldr	x0, [x0]
    27a8:	cmp	x0, #0x0
    27ac:	b.ne	27d0 <lt_dladvise_global+0x48>  // b.any
    27b0:	adrp	x0, 0 <lt__alloc_die_callback>
    27b4:	add	x3, x0, #0x0
    27b8:	mov	w2, #0x649                 	// #1609
    27bc:	adrp	x0, 0 <lt__alloc_die_callback>
    27c0:	add	x1, x0, #0x0
    27c4:	adrp	x0, 0 <lt__alloc_die_callback>
    27c8:	add	x0, x0, #0x0
    27cc:	bl	0 <__assert_fail>
    27d0:	ldr	x0, [sp, #24]
    27d4:	ldr	x0, [x0]
    27d8:	ldrb	w1, [x0]
    27dc:	orr	w1, w1, #0x4
    27e0:	strb	w1, [x0]
    27e4:	mov	w0, #0x0                   	// #0
    27e8:	ldp	x29, x30, [sp], #32
    27ec:	ret

00000000000027f0 <lt_dladvise_preload>:
    27f0:	stp	x29, x30, [sp, #-32]!
    27f4:	mov	x29, sp
    27f8:	str	x0, [sp, #24]
    27fc:	ldr	x0, [sp, #24]
    2800:	cmp	x0, #0x0
    2804:	b.eq	2818 <lt_dladvise_preload+0x28>  // b.none
    2808:	ldr	x0, [sp, #24]
    280c:	ldr	x0, [x0]
    2810:	cmp	x0, #0x0
    2814:	b.ne	2838 <lt_dladvise_preload+0x48>  // b.any
    2818:	adrp	x0, 0 <lt__alloc_die_callback>
    281c:	add	x3, x0, #0x0
    2820:	mov	w2, #0x651                 	// #1617
    2824:	adrp	x0, 0 <lt__alloc_die_callback>
    2828:	add	x1, x0, #0x0
    282c:	adrp	x0, 0 <lt__alloc_die_callback>
    2830:	add	x0, x0, #0x0
    2834:	bl	0 <__assert_fail>
    2838:	ldr	x0, [sp, #24]
    283c:	ldr	x0, [x0]
    2840:	ldrb	w1, [x0]
    2844:	orr	w1, w1, #0x10
    2848:	strb	w1, [x0]
    284c:	mov	w0, #0x0                   	// #0
    2850:	ldp	x29, x30, [sp], #32
    2854:	ret

0000000000002858 <lt_dlopen>:
    2858:	stp	x29, x30, [sp, #-32]!
    285c:	mov	x29, sp
    2860:	str	x0, [sp, #24]
    2864:	mov	x1, #0x0                   	// #0
    2868:	ldr	x0, [sp, #24]
    286c:	bl	28d0 <lt_dlopenadvise>
    2870:	ldp	x29, x30, [sp], #32
    2874:	ret

0000000000002878 <lt_dlopenext>:
    2878:	stp	x29, x30, [sp, #-48]!
    287c:	mov	x29, sp
    2880:	str	x0, [sp, #24]
    2884:	str	xzr, [sp, #40]
    2888:	add	x0, sp, #0x20
    288c:	bl	25dc <lt_dladvise_init>
    2890:	cmp	w0, #0x0
    2894:	b.ne	28bc <lt_dlopenext+0x44>  // b.any
    2898:	add	x0, sp, #0x20
    289c:	bl	2650 <lt_dladvise_ext>
    28a0:	cmp	w0, #0x0
    28a4:	b.ne	28bc <lt_dlopenext+0x44>  // b.any
    28a8:	ldr	x0, [sp, #32]
    28ac:	mov	x1, x0
    28b0:	ldr	x0, [sp, #24]
    28b4:	bl	28d0 <lt_dlopenadvise>
    28b8:	str	x0, [sp, #40]
    28bc:	add	x0, sp, #0x20
    28c0:	bl	2618 <lt_dladvise_destroy>
    28c4:	ldr	x0, [sp, #40]
    28c8:	ldp	x29, x30, [sp], #48
    28cc:	ret

00000000000028d0 <lt_dlopenadvise>:
    28d0:	stp	x29, x30, [sp, #-64]!
    28d4:	mov	x29, sp
    28d8:	str	x0, [sp, #24]
    28dc:	str	x1, [sp, #16]
    28e0:	str	xzr, [sp, #40]
    28e4:	str	wzr, [sp, #60]
    28e8:	str	xzr, [sp, #48]
    28ec:	bl	0 <lt__get_last_error>
    28f0:	str	x0, [sp, #48]
    28f4:	ldr	x0, [sp, #16]
    28f8:	cmp	x0, #0x0
    28fc:	b.eq	2944 <lt_dlopenadvise+0x74>  // b.none
    2900:	ldr	x0, [sp, #16]
    2904:	ldrb	w0, [x0]
    2908:	and	w0, w0, #0x8
    290c:	and	w0, w0, #0xff
    2910:	cmp	w0, #0x0
    2914:	b.eq	2944 <lt_dlopenadvise+0x74>  // b.none
    2918:	ldr	x0, [sp, #16]
    291c:	ldrb	w0, [x0]
    2920:	and	w0, w0, #0x4
    2924:	and	w0, w0, #0xff
    2928:	cmp	w0, #0x0
    292c:	b.eq	2944 <lt_dlopenadvise+0x74>  // b.none
    2930:	mov	w0, #0x13                  	// #19
    2934:	bl	0 <lt__error_string>
    2938:	bl	0 <lt__set_last_error>
    293c:	mov	x0, #0x0                   	// #0
    2940:	b	2a88 <lt_dlopenadvise+0x1b8>
    2944:	ldr	x0, [sp, #24]
    2948:	cmp	x0, #0x0
    294c:	b.eq	2984 <lt_dlopenadvise+0xb4>  // b.none
    2950:	ldr	x0, [sp, #16]
    2954:	cmp	x0, #0x0
    2958:	b.eq	2984 <lt_dlopenadvise+0xb4>  // b.none
    295c:	ldr	x0, [sp, #16]
    2960:	ldrb	w0, [x0]
    2964:	and	w0, w0, #0x1
    2968:	and	w0, w0, #0xff
    296c:	cmp	w0, #0x0
    2970:	b.eq	2984 <lt_dlopenadvise+0xb4>  // b.none
    2974:	ldr	x0, [sp, #24]
    2978:	bl	2540 <has_library_ext>
    297c:	cmp	w0, #0x0
    2980:	b.eq	29b0 <lt_dlopenadvise+0xe0>  // b.none
    2984:	add	x0, sp, #0x28
    2988:	ldr	x3, [sp, #16]
    298c:	mov	x2, #0x0                   	// #0
    2990:	ldr	x1, [sp, #24]
    2994:	bl	1918 <try_dlopen>
    2998:	cmp	w0, #0x0
    299c:	b.eq	29a8 <lt_dlopenadvise+0xd8>  // b.none
    29a0:	mov	x0, #0x0                   	// #0
    29a4:	b	2a88 <lt_dlopenadvise+0x1b8>
    29a8:	ldr	x0, [sp, #40]
    29ac:	b	2a88 <lt_dlopenadvise+0x1b8>
    29b0:	ldr	x0, [sp, #24]
    29b4:	cmp	x0, #0x0
    29b8:	b.eq	2a78 <lt_dlopenadvise+0x1a8>  // b.none
    29bc:	ldr	x0, [sp, #24]
    29c0:	ldrb	w0, [x0]
    29c4:	cmp	w0, #0x0
    29c8:	b.eq	2a78 <lt_dlopenadvise+0x1a8>  // b.none
    29cc:	add	x4, sp, #0x28
    29d0:	ldr	x3, [sp, #16]
    29d4:	adrp	x0, 0 <lt__alloc_die_callback>
    29d8:	add	x2, x0, #0x0
    29dc:	ldr	x1, [sp, #24]
    29e0:	mov	x0, x4
    29e4:	bl	1918 <try_dlopen>
    29e8:	mov	w1, w0
    29ec:	ldr	w0, [sp, #60]
    29f0:	add	w0, w0, w1
    29f4:	str	w0, [sp, #60]
    29f8:	ldr	x0, [sp, #40]
    29fc:	cmp	x0, #0x0
    2a00:	b.ne	2a1c <lt_dlopenadvise+0x14c>  // b.any
    2a04:	ldr	w0, [sp, #60]
    2a08:	cmp	w0, #0x0
    2a0c:	b.le	2a24 <lt_dlopenadvise+0x154>
    2a10:	bl	2500 <file_not_found>
    2a14:	cmp	w0, #0x0
    2a18:	b.ne	2a24 <lt_dlopenadvise+0x154>  // b.any
    2a1c:	ldr	x0, [sp, #40]
    2a20:	b	2a88 <lt_dlopenadvise+0x1b8>
    2a24:	ldr	x0, [sp, #48]
    2a28:	bl	0 <lt__set_last_error>
    2a2c:	add	x4, sp, #0x28
    2a30:	ldr	x3, [sp, #16]
    2a34:	adrp	x0, 0 <lt__alloc_die_callback>
    2a38:	add	x2, x0, #0x0
    2a3c:	ldr	x1, [sp, #24]
    2a40:	mov	x0, x4
    2a44:	bl	1918 <try_dlopen>
    2a48:	str	w0, [sp, #60]
    2a4c:	ldr	x0, [sp, #40]
    2a50:	cmp	x0, #0x0
    2a54:	b.ne	2a70 <lt_dlopenadvise+0x1a0>  // b.any
    2a58:	ldr	w0, [sp, #60]
    2a5c:	cmp	w0, #0x0
    2a60:	b.le	2a78 <lt_dlopenadvise+0x1a8>
    2a64:	bl	2500 <file_not_found>
    2a68:	cmp	w0, #0x0
    2a6c:	b.ne	2a78 <lt_dlopenadvise+0x1a8>  // b.any
    2a70:	ldr	x0, [sp, #40]
    2a74:	b	2a88 <lt_dlopenadvise+0x1b8>
    2a78:	mov	w0, #0x5                   	// #5
    2a7c:	bl	0 <lt__error_string>
    2a80:	bl	0 <lt__set_last_error>
    2a84:	mov	x0, #0x0                   	// #0
    2a88:	ldp	x29, x30, [sp], #64
    2a8c:	ret

0000000000002a90 <lt_argz_insert>:
    2a90:	stp	x29, x30, [sp, #-64]!
    2a94:	mov	x29, sp
    2a98:	str	x0, [sp, #40]
    2a9c:	str	x1, [sp, #32]
    2aa0:	str	x2, [sp, #24]
    2aa4:	str	x3, [sp, #16]
    2aa8:	ldr	x0, [sp, #24]
    2aac:	cmp	x0, #0x0
    2ab0:	b.eq	2ad0 <lt_argz_insert+0x40>  // b.none
    2ab4:	ldr	x3, [sp, #16]
    2ab8:	ldr	x2, [sp, #24]
    2abc:	ldr	x1, [sp, #32]
    2ac0:	ldr	x0, [sp, #40]
    2ac4:	bl	0 <argz_insert>
    2ac8:	str	w0, [sp, #60]
    2acc:	b	2af4 <lt_argz_insert+0x64>
    2ad0:	ldr	x0, [sp, #16]
    2ad4:	bl	0 <strlen>
    2ad8:	add	x0, x0, #0x1
    2adc:	mov	x3, x0
    2ae0:	ldr	x2, [sp, #16]
    2ae4:	ldr	x1, [sp, #32]
    2ae8:	ldr	x0, [sp, #40]
    2aec:	bl	0 <argz_append>
    2af0:	str	w0, [sp, #60]
    2af4:	ldr	w0, [sp, #60]
    2af8:	cmp	w0, #0x0
    2afc:	b.eq	2b34 <lt_argz_insert+0xa4>  // b.none
    2b00:	ldr	w0, [sp, #60]
    2b04:	cmp	w0, #0xc
    2b08:	b.ne	2b1c <lt_argz_insert+0x8c>  // b.any
    2b0c:	mov	w0, #0xb                   	// #11
    2b10:	bl	0 <lt__error_string>
    2b14:	bl	0 <lt__set_last_error>
    2b18:	b	2b2c <lt_argz_insert+0x9c>
    2b1c:	mov	w0, #0x0                   	// #0
    2b20:	bl	0 <lt__error_string>
    2b24:	bl	0 <lt__set_last_error>
    2b28:	nop
    2b2c:	mov	w0, #0x1                   	// #1
    2b30:	b	2b38 <lt_argz_insert+0xa8>
    2b34:	mov	w0, #0x0                   	// #0
    2b38:	ldp	x29, x30, [sp], #64
    2b3c:	ret

0000000000002b40 <lt_argz_insertinorder>:
    2b40:	stp	x29, x30, [sp, #-64]!
    2b44:	mov	x29, sp
    2b48:	str	x0, [sp, #40]
    2b4c:	str	x1, [sp, #32]
    2b50:	str	x2, [sp, #24]
    2b54:	str	xzr, [sp, #56]
    2b58:	ldr	x0, [sp, #40]
    2b5c:	cmp	x0, #0x0
    2b60:	b.ne	2b84 <lt_argz_insertinorder+0x44>  // b.any
    2b64:	adrp	x0, 0 <lt__alloc_die_callback>
    2b68:	add	x3, x0, #0x0
    2b6c:	mov	w2, #0x6db                 	// #1755
    2b70:	adrp	x0, 0 <lt__alloc_die_callback>
    2b74:	add	x1, x0, #0x0
    2b78:	adrp	x0, 0 <lt__alloc_die_callback>
    2b7c:	add	x0, x0, #0x0
    2b80:	bl	0 <__assert_fail>
    2b84:	ldr	x0, [sp, #32]
    2b88:	cmp	x0, #0x0
    2b8c:	b.ne	2bb0 <lt_argz_insertinorder+0x70>  // b.any
    2b90:	adrp	x0, 0 <lt__alloc_die_callback>
    2b94:	add	x3, x0, #0x0
    2b98:	mov	w2, #0x6dc                 	// #1756
    2b9c:	adrp	x0, 0 <lt__alloc_die_callback>
    2ba0:	add	x1, x0, #0x0
    2ba4:	adrp	x0, 0 <lt__alloc_die_callback>
    2ba8:	add	x0, x0, #0x0
    2bac:	bl	0 <__assert_fail>
    2bb0:	ldr	x0, [sp, #24]
    2bb4:	cmp	x0, #0x0
    2bb8:	b.eq	2bcc <lt_argz_insertinorder+0x8c>  // b.none
    2bbc:	ldr	x0, [sp, #24]
    2bc0:	ldrb	w0, [x0]
    2bc4:	cmp	w0, #0x0
    2bc8:	b.ne	2bec <lt_argz_insertinorder+0xac>  // b.any
    2bcc:	adrp	x0, 0 <lt__alloc_die_callback>
    2bd0:	add	x3, x0, #0x0
    2bd4:	mov	w2, #0x6dd                 	// #1757
    2bd8:	adrp	x0, 0 <lt__alloc_die_callback>
    2bdc:	add	x1, x0, #0x0
    2be0:	adrp	x0, 0 <lt__alloc_die_callback>
    2be4:	add	x0, x0, #0x0
    2be8:	bl	0 <__assert_fail>
    2bec:	ldr	x0, [sp, #40]
    2bf0:	ldr	x0, [x0]
    2bf4:	cmp	x0, #0x0
    2bf8:	b.eq	2c68 <lt_argz_insertinorder+0x128>  // b.none
    2bfc:	b	2c30 <lt_argz_insertinorder+0xf0>
    2c00:	ldr	x1, [sp, #56]
    2c04:	ldr	x0, [sp, #24]
    2c08:	bl	0 <strcmp>
    2c0c:	str	w0, [sp, #52]
    2c10:	ldr	w0, [sp, #52]
    2c14:	cmp	w0, #0x0
    2c18:	b.lt	2c64 <lt_argz_insertinorder+0x124>  // b.tstop
    2c1c:	ldr	w0, [sp, #52]
    2c20:	cmp	w0, #0x0
    2c24:	b.ne	2c30 <lt_argz_insertinorder+0xf0>  // b.any
    2c28:	mov	w0, #0x0                   	// #0
    2c2c:	b	2c7c <lt_argz_insertinorder+0x13c>
    2c30:	ldr	x0, [sp, #40]
    2c34:	ldr	x3, [x0]
    2c38:	ldr	x0, [sp, #32]
    2c3c:	ldr	x0, [x0]
    2c40:	ldr	x2, [sp, #56]
    2c44:	mov	x1, x0
    2c48:	mov	x0, x3
    2c4c:	bl	0 <argz_next>
    2c50:	str	x0, [sp, #56]
    2c54:	ldr	x0, [sp, #56]
    2c58:	cmp	x0, #0x0
    2c5c:	b.ne	2c00 <lt_argz_insertinorder+0xc0>  // b.any
    2c60:	b	2c68 <lt_argz_insertinorder+0x128>
    2c64:	nop
    2c68:	ldr	x3, [sp, #24]
    2c6c:	ldr	x2, [sp, #56]
    2c70:	ldr	x1, [sp, #32]
    2c74:	ldr	x0, [sp, #40]
    2c78:	bl	2a90 <lt_argz_insert>
    2c7c:	ldp	x29, x30, [sp], #64
    2c80:	ret

0000000000002c84 <lt_argz_insertdir>:
    2c84:	stp	x29, x30, [sp, #-128]!
    2c88:	mov	x29, sp
    2c8c:	str	x19, [sp, #16]
    2c90:	str	x0, [sp, #56]
    2c94:	str	x1, [sp, #48]
    2c98:	str	x2, [sp, #40]
    2c9c:	str	x3, [sp, #32]
    2ca0:	str	xzr, [sp, #88]
    2ca4:	str	xzr, [sp, #80]
    2ca8:	str	xzr, [sp, #120]
    2cac:	str	xzr, [sp, #72]
    2cb0:	str	xzr, [sp, #64]
    2cb4:	str	wzr, [sp, #116]
    2cb8:	ldr	x0, [sp, #56]
    2cbc:	cmp	x0, #0x0
    2cc0:	b.ne	2ce4 <lt_argz_insertdir+0x60>  // b.any
    2cc4:	adrp	x0, 0 <lt__alloc_die_callback>
    2cc8:	add	x3, x0, #0x0
    2ccc:	mov	w2, #0x6f6                 	// #1782
    2cd0:	adrp	x0, 0 <lt__alloc_die_callback>
    2cd4:	add	x1, x0, #0x0
    2cd8:	adrp	x0, 0 <lt__alloc_die_callback>
    2cdc:	add	x0, x0, #0x0
    2ce0:	bl	0 <__assert_fail>
    2ce4:	ldr	x0, [sp, #48]
    2ce8:	cmp	x0, #0x0
    2cec:	b.ne	2d10 <lt_argz_insertdir+0x8c>  // b.any
    2cf0:	adrp	x0, 0 <lt__alloc_die_callback>
    2cf4:	add	x3, x0, #0x0
    2cf8:	mov	w2, #0x6f7                 	// #1783
    2cfc:	adrp	x0, 0 <lt__alloc_die_callback>
    2d00:	add	x1, x0, #0x0
    2d04:	adrp	x0, 0 <lt__alloc_die_callback>
    2d08:	add	x0, x0, #0x0
    2d0c:	bl	0 <__assert_fail>
    2d10:	ldr	x0, [sp, #32]
    2d14:	cmp	x0, #0x0
    2d18:	b.ne	2d3c <lt_argz_insertdir+0xb8>  // b.any
    2d1c:	adrp	x0, 0 <lt__alloc_die_callback>
    2d20:	add	x3, x0, #0x0
    2d24:	mov	w2, #0x6f8                 	// #1784
    2d28:	adrp	x0, 0 <lt__alloc_die_callback>
    2d2c:	add	x1, x0, #0x0
    2d30:	adrp	x0, 0 <lt__alloc_die_callback>
    2d34:	add	x0, x0, #0x0
    2d38:	bl	0 <__assert_fail>
    2d3c:	ldr	x0, [sp, #40]
    2d40:	cmp	x0, #0x0
    2d44:	b.eq	2d64 <lt_argz_insertdir+0xe0>  // b.none
    2d48:	ldr	x0, [sp, #40]
    2d4c:	ldrb	w0, [x0]
    2d50:	cmp	w0, #0x0
    2d54:	b.eq	2d64 <lt_argz_insertdir+0xe0>  // b.none
    2d58:	ldr	x0, [sp, #40]
    2d5c:	bl	0 <strlen>
    2d60:	b	2d68 <lt_argz_insertdir+0xe4>
    2d64:	mov	x0, #0x0                   	// #0
    2d68:	str	x0, [sp, #64]
    2d6c:	ldr	x0, [sp, #32]
    2d70:	add	x19, x0, #0x13
    2d74:	ldr	x0, [sp, #32]
    2d78:	add	x0, x0, #0x13
    2d7c:	bl	0 <strlen>
    2d80:	add	x0, x19, x0
    2d84:	str	x0, [sp, #120]
    2d88:	ldr	x0, [sp, #120]
    2d8c:	str	x0, [sp, #104]
    2d90:	b	2dc4 <lt_argz_insertdir+0x140>
    2d94:	ldr	x0, [sp, #104]
    2d98:	sub	x0, x0, #0x1
    2d9c:	ldrb	w0, [x0]
    2da0:	mov	w1, w0
    2da4:	adrp	x0, 0 <lt__alloc_die_callback>
    2da8:	add	x0, x0, #0x0
    2dac:	bl	0 <strchr>
    2db0:	cmp	x0, #0x0
    2db4:	b.eq	2de0 <lt_argz_insertdir+0x15c>  // b.none
    2db8:	ldr	x0, [sp, #104]
    2dbc:	sub	x0, x0, #0x1
    2dc0:	str	x0, [sp, #104]
    2dc4:	ldr	x0, [sp, #104]
    2dc8:	sub	x1, x0, #0x1
    2dcc:	ldr	x0, [sp, #32]
    2dd0:	add	x0, x0, #0x13
    2dd4:	cmp	x1, x0
    2dd8:	b.hi	2d94 <lt_argz_insertdir+0x110>  // b.pmore
    2ddc:	b	2de4 <lt_argz_insertdir+0x160>
    2de0:	nop
    2de4:	ldr	x0, [sp, #104]
    2de8:	ldrb	w0, [x0]
    2dec:	cmp	w0, #0x2e
    2df0:	b.ne	2dfc <lt_argz_insertdir+0x178>  // b.any
    2df4:	ldr	x0, [sp, #104]
    2df8:	str	x0, [sp, #120]
    2dfc:	ldr	x0, [sp, #120]
    2e00:	sub	x0, x0, #0x1
    2e04:	str	x0, [sp, #96]
    2e08:	b	2e34 <lt_argz_insertdir+0x1b0>
    2e0c:	ldr	x0, [sp, #96]
    2e10:	ldrb	w0, [x0]
    2e14:	cmp	w0, #0x2e
    2e18:	b.ne	2e28 <lt_argz_insertdir+0x1a4>  // b.any
    2e1c:	ldr	x0, [sp, #96]
    2e20:	str	x0, [sp, #120]
    2e24:	b	2e48 <lt_argz_insertdir+0x1c4>
    2e28:	ldr	x0, [sp, #96]
    2e2c:	sub	x0, x0, #0x1
    2e30:	str	x0, [sp, #96]
    2e34:	ldr	x0, [sp, #32]
    2e38:	add	x0, x0, #0x13
    2e3c:	ldr	x1, [sp, #96]
    2e40:	cmp	x1, x0
    2e44:	b.hi	2e0c <lt_argz_insertdir+0x188>  // b.pmore
    2e48:	ldr	x0, [sp, #32]
    2e4c:	add	x0, x0, #0x13
    2e50:	ldr	x1, [sp, #120]
    2e54:	sub	x0, x1, x0
    2e58:	str	x0, [sp, #72]
    2e5c:	ldr	x1, [sp, #64]
    2e60:	ldr	x0, [sp, #72]
    2e64:	add	x0, x1, x0
    2e68:	add	x0, x0, #0x1
    2e6c:	str	x0, [sp, #80]
    2e70:	ldr	x0, [sp, #80]
    2e74:	add	x0, x0, #0x1
    2e78:	bl	0 <lt__malloc>
    2e7c:	str	x0, [sp, #88]
    2e80:	ldr	x0, [sp, #88]
    2e84:	cmp	x0, #0x0
    2e88:	b.ne	2ea0 <lt_argz_insertdir+0x21c>  // b.any
    2e8c:	ldr	w0, [sp, #116]
    2e90:	add	w0, w0, #0x1
    2e94:	str	w0, [sp, #116]
    2e98:	ldr	w0, [sp, #116]
    2e9c:	b	2f50 <lt_argz_insertdir+0x2cc>
    2ea0:	ldr	x0, [sp, #88]
    2ea4:	cmp	x0, #0x0
    2ea8:	b.ne	2ecc <lt_argz_insertdir+0x248>  // b.any
    2eac:	adrp	x0, 0 <lt__alloc_die_callback>
    2eb0:	add	x3, x0, #0x0
    2eb4:	mov	w2, #0x71a                 	// #1818
    2eb8:	adrp	x0, 0 <lt__alloc_die_callback>
    2ebc:	add	x1, x0, #0x0
    2ec0:	adrp	x0, 0 <lt__alloc_die_callback>
    2ec4:	add	x0, x0, #0x0
    2ec8:	bl	0 <__assert_fail>
    2ecc:	ldr	x1, [sp, #40]
    2ed0:	ldr	x0, [sp, #88]
    2ed4:	bl	0 <strcpy>
    2ed8:	ldr	x0, [sp, #88]
    2edc:	bl	0 <strlen>
    2ee0:	mov	x1, x0
    2ee4:	ldr	x0, [sp, #88]
    2ee8:	add	x0, x0, x1
    2eec:	mov	w1, #0x2f                  	// #47
    2ef0:	strh	w1, [x0]
    2ef4:	ldr	x0, [sp, #32]
    2ef8:	add	x0, x0, #0x13
    2efc:	ldr	x2, [sp, #72]
    2f00:	mov	x1, x0
    2f04:	ldr	x0, [sp, #88]
    2f08:	bl	0 <strncat>
    2f0c:	ldr	x1, [sp, #88]
    2f10:	ldr	x0, [sp, #80]
    2f14:	add	x0, x1, x0
    2f18:	strb	wzr, [x0]
    2f1c:	ldr	x2, [sp, #88]
    2f20:	ldr	x1, [sp, #48]
    2f24:	ldr	x0, [sp, #56]
    2f28:	bl	2b40 <lt_argz_insertinorder>
    2f2c:	cmp	w0, #0x0
    2f30:	b.eq	2f40 <lt_argz_insertdir+0x2bc>  // b.none
    2f34:	ldr	w0, [sp, #116]
    2f38:	add	w0, w0, #0x1
    2f3c:	str	w0, [sp, #116]
    2f40:	ldr	x0, [sp, #88]
    2f44:	bl	0 <free>
    2f48:	str	xzr, [sp, #88]
    2f4c:	ldr	w0, [sp, #116]
    2f50:	ldr	x19, [sp, #16]
    2f54:	ldp	x29, x30, [sp], #128
    2f58:	ret

0000000000002f5c <list_files_by_dir>:
    2f5c:	stp	x29, x30, [sp, #-80]!
    2f60:	mov	x29, sp
    2f64:	str	x0, [sp, #40]
    2f68:	str	x1, [sp, #32]
    2f6c:	str	x2, [sp, #24]
    2f70:	str	xzr, [sp, #64]
    2f74:	str	wzr, [sp, #76]
    2f78:	ldr	x0, [sp, #40]
    2f7c:	cmp	x0, #0x0
    2f80:	b.eq	2f94 <list_files_by_dir+0x38>  // b.none
    2f84:	ldr	x0, [sp, #40]
    2f88:	ldrb	w0, [x0]
    2f8c:	cmp	w0, #0x0
    2f90:	b.ne	2fb4 <list_files_by_dir+0x58>  // b.any
    2f94:	adrp	x0, 0 <lt__alloc_die_callback>
    2f98:	add	x3, x0, #0x0
    2f9c:	mov	w2, #0x730                 	// #1840
    2fa0:	adrp	x0, 0 <lt__alloc_die_callback>
    2fa4:	add	x1, x0, #0x0
    2fa8:	adrp	x0, 0 <lt__alloc_die_callback>
    2fac:	add	x0, x0, #0x0
    2fb0:	bl	0 <__assert_fail>
    2fb4:	ldr	x0, [sp, #32]
    2fb8:	cmp	x0, #0x0
    2fbc:	b.ne	2fe0 <list_files_by_dir+0x84>  // b.any
    2fc0:	adrp	x0, 0 <lt__alloc_die_callback>
    2fc4:	add	x3, x0, #0x0
    2fc8:	mov	w2, #0x731                 	// #1841
    2fcc:	adrp	x0, 0 <lt__alloc_die_callback>
    2fd0:	add	x1, x0, #0x0
    2fd4:	adrp	x0, 0 <lt__alloc_die_callback>
    2fd8:	add	x0, x0, #0x0
    2fdc:	bl	0 <__assert_fail>
    2fe0:	ldr	x0, [sp, #24]
    2fe4:	cmp	x0, #0x0
    2fe8:	b.ne	300c <list_files_by_dir+0xb0>  // b.any
    2fec:	adrp	x0, 0 <lt__alloc_die_callback>
    2ff0:	add	x3, x0, #0x0
    2ff4:	mov	w2, #0x732                 	// #1842
    2ff8:	adrp	x0, 0 <lt__alloc_die_callback>
    2ffc:	add	x1, x0, #0x0
    3000:	adrp	x0, 0 <lt__alloc_die_callback>
    3004:	add	x0, x0, #0x0
    3008:	bl	0 <__assert_fail>
    300c:	ldr	x0, [sp, #40]
    3010:	cmp	x0, #0x0
    3014:	b.eq	3038 <list_files_by_dir+0xdc>  // b.none
    3018:	ldr	x0, [sp, #40]
    301c:	ldrb	w0, [x0]
    3020:	cmp	w0, #0x0
    3024:	b.eq	3038 <list_files_by_dir+0xdc>  // b.none
    3028:	ldr	x0, [sp, #40]
    302c:	bl	0 <strlen>
    3030:	sub	x0, x0, #0x1
    3034:	b	303c <list_files_by_dir+0xe0>
    3038:	mov	x0, #0xffffffffffffffff    	// #-1
    303c:	ldr	x1, [sp, #40]
    3040:	add	x0, x1, x0
    3044:	ldrb	w0, [x0]
    3048:	cmp	w0, #0x2f
    304c:	b.ne	3070 <list_files_by_dir+0x114>  // b.any
    3050:	adrp	x0, 0 <lt__alloc_die_callback>
    3054:	add	x3, x0, #0x0
    3058:	mov	w2, #0x733                 	// #1843
    305c:	adrp	x0, 0 <lt__alloc_die_callback>
    3060:	add	x1, x0, #0x0
    3064:	adrp	x0, 0 <lt__alloc_die_callback>
    3068:	add	x0, x0, #0x0
    306c:	bl	0 <__assert_fail>
    3070:	ldr	x0, [sp, #40]
    3074:	bl	0 <opendir>
    3078:	str	x0, [sp, #64]
    307c:	ldr	x0, [sp, #64]
    3080:	cmp	x0, #0x0
    3084:	b.eq	30f0 <list_files_by_dir+0x194>  // b.none
    3088:	str	xzr, [sp, #56]
    308c:	b	30cc <list_files_by_dir+0x170>
    3090:	ldr	x0, [sp, #56]
    3094:	ldrb	w0, [x0, #19]
    3098:	cmp	w0, #0x2e
    309c:	b.eq	30cc <list_files_by_dir+0x170>  // b.none
    30a0:	ldr	x3, [sp, #56]
    30a4:	ldr	x2, [sp, #40]
    30a8:	ldr	x1, [sp, #24]
    30ac:	ldr	x0, [sp, #32]
    30b0:	bl	2c84 <lt_argz_insertdir>
    30b4:	cmp	w0, #0x0
    30b8:	b.eq	30cc <list_files_by_dir+0x170>  // b.none
    30bc:	ldr	w0, [sp, #76]
    30c0:	add	w0, w0, #0x1
    30c4:	str	w0, [sp, #76]
    30c8:	b	30e4 <list_files_by_dir+0x188>
    30cc:	ldr	x0, [sp, #64]
    30d0:	bl	0 <readdir>
    30d4:	str	x0, [sp, #56]
    30d8:	ldr	x0, [sp, #56]
    30dc:	cmp	x0, #0x0
    30e0:	b.ne	3090 <list_files_by_dir+0x134>  // b.any
    30e4:	ldr	x0, [sp, #64]
    30e8:	bl	0 <closedir>
    30ec:	b	30fc <list_files_by_dir+0x1a0>
    30f0:	ldr	w0, [sp, #76]
    30f4:	add	w0, w0, #0x1
    30f8:	str	w0, [sp, #76]
    30fc:	ldr	w0, [sp, #76]
    3100:	ldp	x29, x30, [sp], #80
    3104:	ret

0000000000003108 <foreachfile_callback>:
    3108:	stp	x29, x30, [sp, #-96]!
    310c:	mov	x29, sp
    3110:	str	x0, [sp, #40]
    3114:	str	x1, [sp, #32]
    3118:	str	x2, [sp, #24]
    311c:	ldr	x0, [sp, #32]
    3120:	ldr	x0, [x0]
    3124:	str	x0, [sp, #72]
    3128:	str	wzr, [sp, #92]
    312c:	str	xzr, [sp, #64]
    3130:	str	xzr, [sp, #56]
    3134:	add	x1, sp, #0x38
    3138:	add	x0, sp, #0x40
    313c:	mov	x2, x1
    3140:	mov	x1, x0
    3144:	ldr	x0, [sp, #40]
    3148:	bl	2f5c <list_files_by_dir>
    314c:	cmp	w0, #0x0
    3150:	b.ne	31ac <foreachfile_callback+0xa4>  // b.any
    3154:	ldr	x0, [sp, #64]
    3158:	cmp	x0, #0x0
    315c:	b.eq	31b4 <foreachfile_callback+0xac>  // b.none
    3160:	str	xzr, [sp, #80]
    3164:	b	3188 <foreachfile_callback+0x80>
    3168:	ldr	x2, [sp, #72]
    316c:	ldr	x1, [sp, #24]
    3170:	ldr	x0, [sp, #80]
    3174:	blr	x2
    3178:	str	w0, [sp, #92]
    317c:	ldr	w0, [sp, #92]
    3180:	cmp	w0, #0x0
    3184:	b.ne	31bc <foreachfile_callback+0xb4>  // b.any
    3188:	ldr	x0, [sp, #64]
    318c:	ldr	x1, [sp, #56]
    3190:	ldr	x2, [sp, #80]
    3194:	bl	0 <argz_next>
    3198:	str	x0, [sp, #80]
    319c:	ldr	x0, [sp, #80]
    31a0:	cmp	x0, #0x0
    31a4:	b.ne	3168 <foreachfile_callback+0x60>  // b.any
    31a8:	b	31c0 <foreachfile_callback+0xb8>
    31ac:	nop
    31b0:	b	31c0 <foreachfile_callback+0xb8>
    31b4:	nop
    31b8:	b	31c0 <foreachfile_callback+0xb8>
    31bc:	nop
    31c0:	ldr	x0, [sp, #64]
    31c4:	bl	0 <free>
    31c8:	str	xzr, [sp, #64]
    31cc:	ldr	w0, [sp, #92]
    31d0:	ldp	x29, x30, [sp], #96
    31d4:	ret

00000000000031d8 <lt_dlforeachfile>:
    31d8:	stp	x29, x30, [sp, #-64]!
    31dc:	mov	x29, sp
    31e0:	str	x0, [sp, #40]
    31e4:	str	x1, [sp, #32]
    31e8:	str	x2, [sp, #24]
    31ec:	str	wzr, [sp, #60]
    31f0:	add	x0, sp, #0x20
    31f4:	str	x0, [sp, #48]
    31f8:	ldr	x0, [sp, #40]
    31fc:	cmp	x0, #0x0
    3200:	b.eq	3228 <lt_dlforeachfile+0x50>  // b.none
    3204:	ldr	x4, [sp, #24]
    3208:	ldr	x3, [sp, #48]
    320c:	adrp	x0, 0 <lt__alloc_die_callback>
    3210:	add	x2, x0, #0x0
    3214:	mov	x1, #0x0                   	// #0
    3218:	ldr	x0, [sp, #40]
    321c:	bl	dec <foreach_dirinpath>
    3220:	str	w0, [sp, #60]
    3224:	b	3308 <lt_dlforeachfile+0x130>
    3228:	adrp	x0, 0 <lt__alloc_die_callback>
    322c:	add	x0, x0, #0x0
    3230:	ldr	x5, [x0]
    3234:	ldr	x4, [sp, #24]
    3238:	ldr	x3, [sp, #48]
    323c:	adrp	x0, 0 <lt__alloc_die_callback>
    3240:	add	x2, x0, #0x0
    3244:	mov	x1, #0x0                   	// #0
    3248:	mov	x0, x5
    324c:	bl	dec <foreach_dirinpath>
    3250:	str	w0, [sp, #60]
    3254:	ldr	w0, [sp, #60]
    3258:	cmp	w0, #0x0
    325c:	b.ne	3290 <lt_dlforeachfile+0xb8>  // b.any
    3260:	adrp	x0, 0 <lt__alloc_die_callback>
    3264:	add	x0, x0, #0x0
    3268:	bl	0 <getenv>
    326c:	mov	x5, x0
    3270:	ldr	x4, [sp, #24]
    3274:	ldr	x3, [sp, #48]
    3278:	adrp	x0, 0 <lt__alloc_die_callback>
    327c:	add	x2, x0, #0x0
    3280:	mov	x1, #0x0                   	// #0
    3284:	mov	x0, x5
    3288:	bl	dec <foreach_dirinpath>
    328c:	str	w0, [sp, #60]
    3290:	ldr	w0, [sp, #60]
    3294:	cmp	w0, #0x0
    3298:	b.ne	32cc <lt_dlforeachfile+0xf4>  // b.any
    329c:	adrp	x0, 0 <lt__alloc_die_callback>
    32a0:	add	x0, x0, #0x0
    32a4:	bl	0 <getenv>
    32a8:	mov	x5, x0
    32ac:	ldr	x4, [sp, #24]
    32b0:	ldr	x3, [sp, #48]
    32b4:	adrp	x0, 0 <lt__alloc_die_callback>
    32b8:	add	x2, x0, #0x0
    32bc:	mov	x1, #0x0                   	// #0
    32c0:	mov	x0, x5
    32c4:	bl	dec <foreach_dirinpath>
    32c8:	str	w0, [sp, #60]
    32cc:	ldr	w0, [sp, #60]
    32d0:	cmp	w0, #0x0
    32d4:	b.ne	3308 <lt_dlforeachfile+0x130>  // b.any
    32d8:	mov	w0, #0x2f                  	// #47
    32dc:	cmp	w0, #0x0
    32e0:	b.eq	3308 <lt_dlforeachfile+0x130>  // b.none
    32e4:	ldr	x4, [sp, #24]
    32e8:	ldr	x3, [sp, #48]
    32ec:	adrp	x0, 0 <lt__alloc_die_callback>
    32f0:	add	x2, x0, #0x0
    32f4:	mov	x1, #0x0                   	// #0
    32f8:	adrp	x0, 0 <lt__alloc_die_callback>
    32fc:	add	x0, x0, #0x0
    3300:	bl	dec <foreach_dirinpath>
    3304:	str	w0, [sp, #60]
    3308:	ldr	w0, [sp, #60]
    330c:	ldp	x29, x30, [sp], #64
    3310:	ret

0000000000003314 <lt_dlclose>:
    3314:	stp	x29, x30, [sp, #-64]!
    3318:	mov	x29, sp
    331c:	str	x0, [sp, #24]
    3320:	str	wzr, [sp, #44]
    3324:	adrp	x0, 0 <lt__alloc_die_callback>
    3328:	add	x0, x0, #0x0
    332c:	ldr	x0, [x0]
    3330:	str	x0, [sp, #56]
    3334:	ldr	x0, [sp, #56]
    3338:	str	x0, [sp, #48]
    333c:	b	3354 <lt_dlclose+0x40>
    3340:	ldr	x0, [sp, #56]
    3344:	str	x0, [sp, #48]
    3348:	ldr	x0, [sp, #56]
    334c:	ldr	x0, [x0]
    3350:	str	x0, [sp, #56]
    3354:	ldr	x0, [sp, #56]
    3358:	cmp	x0, #0x0
    335c:	b.eq	3370 <lt_dlclose+0x5c>  // b.none
    3360:	ldr	x1, [sp, #24]
    3364:	ldr	x0, [sp, #56]
    3368:	cmp	x1, x0
    336c:	b.ne	3340 <lt_dlclose+0x2c>  // b.any
    3370:	ldr	x0, [sp, #56]
    3374:	cmp	x0, #0x0
    3378:	b.ne	3398 <lt_dlclose+0x84>  // b.any
    337c:	mov	w0, #0xc                   	// #12
    3380:	bl	0 <lt__error_string>
    3384:	bl	0 <lt__set_last_error>
    3388:	ldr	w0, [sp, #44]
    338c:	add	w0, w0, #0x1
    3390:	str	w0, [sp, #44]
    3394:	b	34f8 <lt_dlclose+0x1e4>
    3398:	ldr	x0, [sp, #24]
    339c:	str	x0, [sp, #56]
    33a0:	ldr	x0, [sp, #56]
    33a4:	ldr	w0, [x0, #32]
    33a8:	sub	w1, w0, #0x1
    33ac:	ldr	x0, [sp, #56]
    33b0:	str	w1, [x0, #32]
    33b4:	ldr	x0, [sp, #56]
    33b8:	ldr	w0, [x0, #32]
    33bc:	cmp	w0, #0x0
    33c0:	b.gt	34c0 <lt_dlclose+0x1ac>
    33c4:	ldr	x0, [sp, #56]
    33c8:	ldrb	w0, [x0, #36]
    33cc:	and	w0, w0, #0x1
    33d0:	and	w0, w0, #0xff
    33d4:	cmp	w0, #0x0
    33d8:	b.ne	34c0 <lt_dlclose+0x1ac>  // b.any
    33dc:	ldr	x0, [sp, #56]
    33e0:	ldr	x0, [x0, #8]
    33e4:	ldr	x0, [x0, #56]
    33e8:	str	x0, [sp, #32]
    33ec:	adrp	x0, 0 <lt__alloc_die_callback>
    33f0:	add	x0, x0, #0x0
    33f4:	ldr	x0, [x0]
    33f8:	ldr	x1, [sp, #56]
    33fc:	cmp	x1, x0
    3400:	b.eq	3418 <lt_dlclose+0x104>  // b.none
    3404:	ldr	x0, [sp, #56]
    3408:	ldr	x1, [x0]
    340c:	ldr	x0, [sp, #48]
    3410:	str	x1, [x0]
    3414:	b	342c <lt_dlclose+0x118>
    3418:	ldr	x0, [sp, #56]
    341c:	ldr	x1, [x0]
    3420:	adrp	x0, 0 <lt__alloc_die_callback>
    3424:	add	x0, x0, #0x0
    3428:	str	x1, [x0]
    342c:	ldr	x0, [sp, #56]
    3430:	ldr	x0, [x0, #8]
    3434:	ldr	x2, [x0, #24]
    3438:	ldr	x0, [sp, #56]
    343c:	ldr	x0, [x0, #56]
    3440:	mov	x1, x0
    3444:	ldr	x0, [sp, #32]
    3448:	blr	x2
    344c:	mov	w1, w0
    3450:	ldr	w0, [sp, #44]
    3454:	add	w0, w0, w1
    3458:	str	w0, [sp, #44]
    345c:	ldr	x0, [sp, #24]
    3460:	bl	1314 <unload_deplibs>
    3464:	mov	w1, w0
    3468:	ldr	w0, [sp, #44]
    346c:	add	w0, w0, w1
    3470:	str	w0, [sp, #44]
    3474:	ldr	x0, [sp, #56]
    3478:	ldr	x0, [x0, #72]
    347c:	bl	0 <free>
    3480:	ldr	x0, [sp, #56]
    3484:	str	xzr, [x0, #72]
    3488:	ldr	x0, [sp, #56]
    348c:	ldr	x0, [x0, #16]
    3490:	bl	0 <free>
    3494:	ldr	x0, [sp, #56]
    3498:	str	xzr, [x0, #16]
    349c:	ldr	x0, [sp, #56]
    34a0:	ldr	x0, [x0, #24]
    34a4:	bl	0 <free>
    34a8:	ldr	x0, [sp, #56]
    34ac:	str	xzr, [x0, #24]
    34b0:	ldr	x0, [sp, #56]
    34b4:	bl	0 <free>
    34b8:	str	xzr, [sp, #56]
    34bc:	b	34f8 <lt_dlclose+0x1e4>
    34c0:	ldr	x0, [sp, #24]
    34c4:	ldrb	w0, [x0, #36]
    34c8:	and	w0, w0, #0x1
    34cc:	and	w0, w0, #0xff
    34d0:	cmp	w0, #0x0
    34d4:	b.eq	34f4 <lt_dlclose+0x1e0>  // b.none
    34d8:	mov	w0, #0x10                  	// #16
    34dc:	bl	0 <lt__error_string>
    34e0:	bl	0 <lt__set_last_error>
    34e4:	ldr	w0, [sp, #44]
    34e8:	add	w0, w0, #0x1
    34ec:	str	w0, [sp, #44]
    34f0:	b	34f8 <lt_dlclose+0x1e4>
    34f4:	nop
    34f8:	ldr	w0, [sp, #44]
    34fc:	ldp	x29, x30, [sp], #64
    3500:	ret

0000000000003504 <lt_dlsym>:
    3504:	stp	x29, x30, [sp, #-224]!
    3508:	mov	x29, sp
    350c:	str	x19, [sp, #16]
    3510:	str	x0, [sp, #40]
    3514:	str	x1, [sp, #32]
    3518:	ldr	x0, [sp, #40]
    351c:	cmp	x0, #0x0
    3520:	b.ne	3538 <lt_dlsym+0x34>  // b.any
    3524:	mov	w0, #0xc                   	// #12
    3528:	bl	0 <lt__error_string>
    352c:	bl	0 <lt__set_last_error>
    3530:	mov	x0, #0x0                   	// #0
    3534:	b	3810 <lt_dlsym+0x30c>
    3538:	ldr	x0, [sp, #40]
    353c:	str	x0, [sp, #208]
    3540:	ldr	x0, [sp, #32]
    3544:	cmp	x0, #0x0
    3548:	b.ne	3560 <lt_dlsym+0x5c>  // b.any
    354c:	mov	w0, #0xa                   	// #10
    3550:	bl	0 <lt__error_string>
    3554:	bl	0 <lt__set_last_error>
    3558:	mov	x0, #0x0                   	// #0
    355c:	b	3810 <lt_dlsym+0x30c>
    3560:	ldr	x0, [sp, #32]
    3564:	cmp	x0, #0x0
    3568:	b.eq	358c <lt_dlsym+0x88>  // b.none
    356c:	ldr	x0, [sp, #32]
    3570:	ldrb	w0, [x0]
    3574:	cmp	w0, #0x0
    3578:	b.eq	358c <lt_dlsym+0x88>  // b.none
    357c:	ldr	x0, [sp, #32]
    3580:	bl	0 <strlen>
    3584:	mov	x19, x0
    3588:	b	3590 <lt_dlsym+0x8c>
    358c:	mov	x19, #0x0                   	// #0
    3590:	ldr	x0, [sp, #208]
    3594:	ldr	x0, [x0, #8]
    3598:	ldr	x0, [x0, #8]
    359c:	cmp	x0, #0x0
    35a0:	b.eq	35d0 <lt_dlsym+0xcc>  // b.none
    35a4:	ldr	x0, [sp, #208]
    35a8:	ldr	x0, [x0, #8]
    35ac:	ldr	x0, [x0, #8]
    35b0:	ldrb	w0, [x0]
    35b4:	cmp	w0, #0x0
    35b8:	b.eq	35d0 <lt_dlsym+0xcc>  // b.none
    35bc:	ldr	x0, [sp, #208]
    35c0:	ldr	x0, [x0, #8]
    35c4:	ldr	x0, [x0, #8]
    35c8:	bl	0 <strlen>
    35cc:	b	35d4 <lt_dlsym+0xd0>
    35d0:	mov	x0, #0x0                   	// #0
    35d4:	add	x19, x19, x0
    35d8:	ldr	x0, [sp, #208]
    35dc:	ldr	x0, [x0, #24]
    35e0:	cmp	x0, #0x0
    35e4:	b.eq	360c <lt_dlsym+0x108>  // b.none
    35e8:	ldr	x0, [sp, #208]
    35ec:	ldr	x0, [x0, #24]
    35f0:	ldrb	w0, [x0]
    35f4:	cmp	w0, #0x0
    35f8:	b.eq	360c <lt_dlsym+0x108>  // b.none
    35fc:	ldr	x0, [sp, #208]
    3600:	ldr	x0, [x0, #24]
    3604:	bl	0 <strlen>
    3608:	b	3610 <lt_dlsym+0x10c>
    360c:	mov	x0, #0x0                   	// #0
    3610:	add	x0, x0, x19
    3614:	str	x0, [sp, #200]
    3618:	ldr	x0, [sp, #200]
    361c:	add	x0, x0, #0x5
    3620:	cmp	x0, #0x7f
    3624:	b.hi	3634 <lt_dlsym+0x130>  // b.pmore
    3628:	add	x0, sp, #0x30
    362c:	str	x0, [sp, #216]
    3630:	b	3664 <lt_dlsym+0x160>
    3634:	ldr	x0, [sp, #200]
    3638:	add	x0, x0, #0x6
    363c:	bl	0 <lt__malloc>
    3640:	str	x0, [sp, #216]
    3644:	ldr	x0, [sp, #216]
    3648:	cmp	x0, #0x0
    364c:	b.ne	3664 <lt_dlsym+0x160>  // b.any
    3650:	mov	w0, #0xd                   	// #13
    3654:	bl	0 <lt__error_string>
    3658:	bl	0 <lt__set_last_error>
    365c:	mov	x0, #0x0                   	// #0
    3660:	b	3810 <lt_dlsym+0x30c>
    3664:	ldr	x0, [sp, #208]
    3668:	ldr	x0, [x0, #8]
    366c:	ldr	x0, [x0, #56]
    3670:	str	x0, [sp, #192]
    3674:	ldr	x0, [sp, #208]
    3678:	ldr	x0, [x0, #24]
    367c:	cmp	x0, #0x0
    3680:	b.eq	3780 <lt_dlsym+0x27c>  // b.none
    3684:	bl	0 <lt__get_last_error>
    3688:	str	x0, [sp, #184]
    368c:	ldr	x0, [sp, #208]
    3690:	ldr	x0, [x0, #8]
    3694:	ldr	x0, [x0, #8]
    3698:	cmp	x0, #0x0
    369c:	b.eq	36d0 <lt_dlsym+0x1cc>  // b.none
    36a0:	ldr	x0, [sp, #208]
    36a4:	ldr	x0, [x0, #8]
    36a8:	ldr	x0, [x0, #8]
    36ac:	mov	x1, x0
    36b0:	ldr	x0, [sp, #216]
    36b4:	bl	0 <strcpy>
    36b8:	ldr	x0, [sp, #208]
    36bc:	ldr	x0, [x0, #24]
    36c0:	mov	x1, x0
    36c4:	ldr	x0, [sp, #216]
    36c8:	bl	0 <strcat>
    36cc:	b	36e4 <lt_dlsym+0x1e0>
    36d0:	ldr	x0, [sp, #208]
    36d4:	ldr	x0, [x0, #24]
    36d8:	mov	x1, x0
    36dc:	ldr	x0, [sp, #216]
    36e0:	bl	0 <strcpy>
    36e4:	ldr	x0, [sp, #216]
    36e8:	bl	0 <strlen>
    36ec:	mov	x1, x0
    36f0:	ldr	x0, [sp, #216]
    36f4:	add	x2, x0, x1
    36f8:	adrp	x0, 0 <lt__alloc_die_callback>
    36fc:	add	x1, x0, #0x0
    3700:	mov	x0, x2
    3704:	ldr	w2, [x1]
    3708:	str	w2, [x0]
    370c:	ldrh	w1, [x1, #4]
    3710:	strh	w1, [x0, #4]
    3714:	ldr	x1, [sp, #32]
    3718:	ldr	x0, [sp, #216]
    371c:	bl	0 <strcat>
    3720:	ldr	x0, [sp, #208]
    3724:	ldr	x0, [x0, #8]
    3728:	ldr	x3, [x0, #32]
    372c:	ldr	x0, [sp, #208]
    3730:	ldr	x0, [x0, #56]
    3734:	ldr	x2, [sp, #216]
    3738:	mov	x1, x0
    373c:	ldr	x0, [sp, #192]
    3740:	blr	x3
    3744:	str	x0, [sp, #176]
    3748:	ldr	x0, [sp, #176]
    374c:	cmp	x0, #0x0
    3750:	b.eq	3778 <lt_dlsym+0x274>  // b.none
    3754:	add	x0, sp, #0x30
    3758:	ldr	x1, [sp, #216]
    375c:	cmp	x1, x0
    3760:	b.eq	3770 <lt_dlsym+0x26c>  // b.none
    3764:	ldr	x0, [sp, #216]
    3768:	bl	0 <free>
    376c:	str	xzr, [sp, #216]
    3770:	ldr	x0, [sp, #176]
    3774:	b	3810 <lt_dlsym+0x30c>
    3778:	ldr	x0, [sp, #184]
    377c:	bl	0 <lt__set_last_error>
    3780:	ldr	x0, [sp, #208]
    3784:	ldr	x0, [x0, #8]
    3788:	ldr	x0, [x0, #8]
    378c:	cmp	x0, #0x0
    3790:	b.eq	37bc <lt_dlsym+0x2b8>  // b.none
    3794:	ldr	x0, [sp, #208]
    3798:	ldr	x0, [x0, #8]
    379c:	ldr	x0, [x0, #8]
    37a0:	mov	x1, x0
    37a4:	ldr	x0, [sp, #216]
    37a8:	bl	0 <strcpy>
    37ac:	ldr	x1, [sp, #32]
    37b0:	ldr	x0, [sp, #216]
    37b4:	bl	0 <strcat>
    37b8:	b	37c8 <lt_dlsym+0x2c4>
    37bc:	ldr	x1, [sp, #32]
    37c0:	ldr	x0, [sp, #216]
    37c4:	bl	0 <strcpy>
    37c8:	ldr	x0, [sp, #208]
    37cc:	ldr	x0, [x0, #8]
    37d0:	ldr	x3, [x0, #32]
    37d4:	ldr	x0, [sp, #208]
    37d8:	ldr	x0, [x0, #56]
    37dc:	ldr	x2, [sp, #216]
    37e0:	mov	x1, x0
    37e4:	ldr	x0, [sp, #192]
    37e8:	blr	x3
    37ec:	str	x0, [sp, #176]
    37f0:	add	x0, sp, #0x30
    37f4:	ldr	x1, [sp, #216]
    37f8:	cmp	x1, x0
    37fc:	b.eq	380c <lt_dlsym+0x308>  // b.none
    3800:	ldr	x0, [sp, #216]
    3804:	bl	0 <free>
    3808:	str	xzr, [sp, #216]
    380c:	ldr	x0, [sp, #176]
    3810:	ldr	x19, [sp, #16]
    3814:	ldp	x29, x30, [sp], #224
    3818:	ret

000000000000381c <lt_dlerror>:
    381c:	stp	x29, x30, [sp, #-32]!
    3820:	mov	x29, sp
    3824:	bl	0 <lt__get_last_error>
    3828:	str	x0, [sp, #24]
    382c:	mov	x0, #0x0                   	// #0
    3830:	bl	0 <lt__set_last_error>
    3834:	ldr	x0, [sp, #24]
    3838:	ldp	x29, x30, [sp], #32
    383c:	ret

0000000000003840 <lt_dlpath_insertdir>:
    3840:	stp	x29, x30, [sp, #-96]!
    3844:	mov	x29, sp
    3848:	str	x19, [sp, #16]
    384c:	str	x0, [sp, #56]
    3850:	str	x1, [sp, #48]
    3854:	str	x2, [sp, #40]
    3858:	str	wzr, [sp, #92]
    385c:	str	xzr, [sp, #80]
    3860:	str	xzr, [sp, #72]
    3864:	str	xzr, [sp, #64]
    3868:	ldr	x0, [sp, #56]
    386c:	cmp	x0, #0x0
    3870:	b.ne	3894 <lt_dlpath_insertdir+0x54>  // b.any
    3874:	adrp	x0, 0 <lt__alloc_die_callback>
    3878:	add	x3, x0, #0x0
    387c:	mov	w2, #0x84e                 	// #2126
    3880:	adrp	x0, 0 <lt__alloc_die_callback>
    3884:	add	x1, x0, #0x0
    3888:	adrp	x0, 0 <lt__alloc_die_callback>
    388c:	add	x0, x0, #0x0
    3890:	bl	0 <__assert_fail>
    3894:	ldr	x0, [sp, #40]
    3898:	cmp	x0, #0x0
    389c:	b.eq	38b0 <lt_dlpath_insertdir+0x70>  // b.none
    38a0:	ldr	x0, [sp, #40]
    38a4:	ldrb	w0, [x0]
    38a8:	cmp	w0, #0x0
    38ac:	b.ne	38d0 <lt_dlpath_insertdir+0x90>  // b.any
    38b0:	adrp	x0, 0 <lt__alloc_die_callback>
    38b4:	add	x3, x0, #0x0
    38b8:	mov	w2, #0x84f                 	// #2127
    38bc:	adrp	x0, 0 <lt__alloc_die_callback>
    38c0:	add	x1, x0, #0x0
    38c4:	adrp	x0, 0 <lt__alloc_die_callback>
    38c8:	add	x0, x0, #0x0
    38cc:	bl	0 <__assert_fail>
    38d0:	add	x0, sp, #0x50
    38d4:	mov	x1, x0
    38d8:	ldr	x0, [sp, #40]
    38dc:	bl	ab8 <canonicalize_path>
    38e0:	cmp	w0, #0x0
    38e4:	b.eq	38f8 <lt_dlpath_insertdir+0xb8>  // b.none
    38e8:	ldr	w0, [sp, #92]
    38ec:	add	w0, w0, #0x1
    38f0:	str	w0, [sp, #92]
    38f4:	b	3b58 <lt_dlpath_insertdir+0x318>
    38f8:	ldr	x0, [sp, #80]
    38fc:	cmp	x0, #0x0
    3900:	b.eq	3914 <lt_dlpath_insertdir+0xd4>  // b.none
    3904:	ldr	x0, [sp, #80]
    3908:	ldrb	w0, [x0]
    390c:	cmp	w0, #0x0
    3910:	b.ne	3934 <lt_dlpath_insertdir+0xf4>  // b.any
    3914:	adrp	x0, 0 <lt__alloc_die_callback>
    3918:	add	x3, x0, #0x0
    391c:	mov	w2, #0x857                 	// #2135
    3920:	adrp	x0, 0 <lt__alloc_die_callback>
    3924:	add	x1, x0, #0x0
    3928:	adrp	x0, 0 <lt__alloc_die_callback>
    392c:	add	x0, x0, #0x0
    3930:	bl	0 <__assert_fail>
    3934:	ldr	x0, [sp, #56]
    3938:	ldr	x0, [x0]
    393c:	cmp	x0, #0x0
    3940:	b.ne	39d0 <lt_dlpath_insertdir+0x190>  // b.any
    3944:	ldr	x0, [sp, #48]
    3948:	cmp	x0, #0x0
    394c:	b.eq	3970 <lt_dlpath_insertdir+0x130>  // b.none
    3950:	adrp	x0, 0 <lt__alloc_die_callback>
    3954:	add	x3, x0, #0x0
    3958:	mov	w2, #0x85c                 	// #2140
    395c:	adrp	x0, 0 <lt__alloc_die_callback>
    3960:	add	x1, x0, #0x0
    3964:	adrp	x0, 0 <lt__alloc_die_callback>
    3968:	add	x0, x0, #0x0
    396c:	bl	0 <__assert_fail>
    3970:	ldr	x0, [sp, #40]
    3974:	cmp	x0, #0x0
    3978:	b.ne	399c <lt_dlpath_insertdir+0x15c>  // b.any
    397c:	adrp	x0, 0 <lt__alloc_die_callback>
    3980:	add	x3, x0, #0x0
    3984:	mov	w2, #0x85d                 	// #2141
    3988:	adrp	x0, 0 <lt__alloc_die_callback>
    398c:	add	x1, x0, #0x0
    3990:	adrp	x0, 0 <lt__alloc_die_callback>
    3994:	add	x0, x0, #0x0
    3998:	bl	0 <__assert_fail>
    399c:	ldr	x0, [sp, #40]
    39a0:	bl	0 <lt__strdup>
    39a4:	mov	x1, x0
    39a8:	ldr	x0, [sp, #56]
    39ac:	str	x1, [x0]
    39b0:	ldr	x0, [sp, #56]
    39b4:	ldr	x0, [x0]
    39b8:	cmp	x0, #0x0
    39bc:	b.ne	3b4c <lt_dlpath_insertdir+0x30c>  // b.any
    39c0:	ldr	w0, [sp, #92]
    39c4:	add	w0, w0, #0x1
    39c8:	str	w0, [sp, #92]
    39cc:	b	3b4c <lt_dlpath_insertdir+0x30c>
    39d0:	ldr	x0, [sp, #56]
    39d4:	cmp	x0, #0x0
    39d8:	b.eq	39ec <lt_dlpath_insertdir+0x1ac>  // b.none
    39dc:	ldr	x0, [sp, #56]
    39e0:	ldr	x0, [x0]
    39e4:	cmp	x0, #0x0
    39e8:	b.ne	3a0c <lt_dlpath_insertdir+0x1cc>  // b.any
    39ec:	adrp	x0, 0 <lt__alloc_die_callback>
    39f0:	add	x3, x0, #0x0
    39f4:	mov	w2, #0x866                 	// #2150
    39f8:	adrp	x0, 0 <lt__alloc_die_callback>
    39fc:	add	x1, x0, #0x0
    3a00:	adrp	x0, 0 <lt__alloc_die_callback>
    3a04:	add	x0, x0, #0x0
    3a08:	bl	0 <__assert_fail>
    3a0c:	ldr	x0, [sp, #56]
    3a10:	ldr	x0, [x0]
    3a14:	add	x2, sp, #0x40
    3a18:	add	x1, sp, #0x48
    3a1c:	bl	cf0 <argzize_path>
    3a20:	cmp	w0, #0x0
    3a24:	b.eq	3a38 <lt_dlpath_insertdir+0x1f8>  // b.none
    3a28:	ldr	w0, [sp, #92]
    3a2c:	add	w0, w0, #0x1
    3a30:	str	w0, [sp, #92]
    3a34:	b	3b58 <lt_dlpath_insertdir+0x318>
    3a38:	ldr	x0, [sp, #48]
    3a3c:	cmp	x0, #0x0
    3a40:	b.eq	3adc <lt_dlpath_insertdir+0x29c>  // b.none
    3a44:	ldr	x0, [sp, #56]
    3a48:	ldr	x0, [x0]
    3a4c:	ldr	x1, [sp, #48]
    3a50:	cmp	x1, x0
    3a54:	b.cs	3a78 <lt_dlpath_insertdir+0x238>  // b.hs, b.nlast
    3a58:	adrp	x0, 0 <lt__alloc_die_callback>
    3a5c:	add	x3, x0, #0x0
    3a60:	mov	w2, #0x875                 	// #2165
    3a64:	adrp	x0, 0 <lt__alloc_die_callback>
    3a68:	add	x1, x0, #0x0
    3a6c:	adrp	x0, 0 <lt__alloc_die_callback>
    3a70:	add	x0, x0, #0x0
    3a74:	bl	0 <__assert_fail>
    3a78:	ldr	x0, [sp, #56]
    3a7c:	ldr	x0, [x0]
    3a80:	ldr	x1, [sp, #48]
    3a84:	sub	x0, x1, x0
    3a88:	mov	w19, w0
    3a8c:	ldr	x0, [sp, #56]
    3a90:	ldr	x0, [x0]
    3a94:	bl	0 <strlen>
    3a98:	cmp	w19, w0
    3a9c:	b.le	3ac0 <lt_dlpath_insertdir+0x280>
    3aa0:	adrp	x0, 0 <lt__alloc_die_callback>
    3aa4:	add	x3, x0, #0x0
    3aa8:	mov	w2, #0x876                 	// #2166
    3aac:	adrp	x0, 0 <lt__alloc_die_callback>
    3ab0:	add	x1, x0, #0x0
    3ab4:	adrp	x0, 0 <lt__alloc_die_callback>
    3ab8:	add	x0, x0, #0x0
    3abc:	bl	0 <__assert_fail>
    3ac0:	ldr	x0, [sp, #72]
    3ac4:	ldr	x1, [sp, #56]
    3ac8:	ldr	x1, [x1]
    3acc:	ldr	x2, [sp, #48]
    3ad0:	sub	x1, x2, x1
    3ad4:	add	x0, x0, x1
    3ad8:	str	x0, [sp, #48]
    3adc:	add	x1, sp, #0x40
    3ae0:	add	x0, sp, #0x48
    3ae4:	ldr	x3, [sp, #40]
    3ae8:	ldr	x2, [sp, #48]
    3aec:	bl	2a90 <lt_argz_insert>
    3af0:	cmp	w0, #0x0
    3af4:	b.eq	3b08 <lt_dlpath_insertdir+0x2c8>  // b.none
    3af8:	ldr	w0, [sp, #92]
    3afc:	add	w0, w0, #0x1
    3b00:	str	w0, [sp, #92]
    3b04:	b	3b58 <lt_dlpath_insertdir+0x318>
    3b08:	ldr	x0, [sp, #72]
    3b0c:	ldr	x1, [sp, #64]
    3b10:	mov	w2, #0x3a                  	// #58
    3b14:	bl	0 <argz_stringify>
    3b18:	ldr	x0, [sp, #56]
    3b1c:	ldr	x1, [x0]
    3b20:	ldr	x0, [sp, #72]
    3b24:	cmp	x1, x0
    3b28:	b.eq	3b54 <lt_dlpath_insertdir+0x314>  // b.none
    3b2c:	ldr	x0, [sp, #56]
    3b30:	ldr	x0, [x0]
    3b34:	bl	0 <free>
    3b38:	ldr	x1, [sp, #72]
    3b3c:	ldr	x0, [sp, #56]
    3b40:	str	x1, [x0]
    3b44:	str	xzr, [sp, #72]
    3b48:	b	3b58 <lt_dlpath_insertdir+0x318>
    3b4c:	nop
    3b50:	b	3b58 <lt_dlpath_insertdir+0x318>
    3b54:	nop
    3b58:	ldr	x0, [sp, #72]
    3b5c:	bl	0 <free>
    3b60:	str	xzr, [sp, #72]
    3b64:	ldr	x0, [sp, #80]
    3b68:	bl	0 <free>
    3b6c:	str	xzr, [sp, #80]
    3b70:	ldr	w0, [sp, #92]
    3b74:	ldr	x19, [sp, #16]
    3b78:	ldp	x29, x30, [sp], #96
    3b7c:	ret

0000000000003b80 <lt_dladdsearchdir>:
    3b80:	stp	x29, x30, [sp, #-48]!
    3b84:	mov	x29, sp
    3b88:	str	x0, [sp, #24]
    3b8c:	str	wzr, [sp, #44]
    3b90:	ldr	x0, [sp, #24]
    3b94:	cmp	x0, #0x0
    3b98:	b.eq	3bd4 <lt_dladdsearchdir+0x54>  // b.none
    3b9c:	ldr	x0, [sp, #24]
    3ba0:	ldrb	w0, [x0]
    3ba4:	cmp	w0, #0x0
    3ba8:	b.eq	3bd4 <lt_dladdsearchdir+0x54>  // b.none
    3bac:	ldr	x2, [sp, #24]
    3bb0:	mov	x1, #0x0                   	// #0
    3bb4:	adrp	x0, 0 <lt__alloc_die_callback>
    3bb8:	add	x0, x0, #0x0
    3bbc:	bl	3840 <lt_dlpath_insertdir>
    3bc0:	cmp	w0, #0x0
    3bc4:	b.eq	3bd4 <lt_dladdsearchdir+0x54>  // b.none
    3bc8:	ldr	w0, [sp, #44]
    3bcc:	add	w0, w0, #0x1
    3bd0:	str	w0, [sp, #44]
    3bd4:	ldr	w0, [sp, #44]
    3bd8:	ldp	x29, x30, [sp], #48
    3bdc:	ret

0000000000003be0 <lt_dlinsertsearchdir>:
    3be0:	stp	x29, x30, [sp, #-64]!
    3be4:	mov	x29, sp
    3be8:	str	x19, [sp, #16]
    3bec:	str	x0, [sp, #40]
    3bf0:	str	x1, [sp, #32]
    3bf4:	str	wzr, [sp, #60]
    3bf8:	ldr	x0, [sp, #40]
    3bfc:	cmp	x0, #0x0
    3c00:	b.eq	3c90 <lt_dlinsertsearchdir+0xb0>  // b.none
    3c04:	adrp	x0, 0 <lt__alloc_die_callback>
    3c08:	add	x0, x0, #0x0
    3c0c:	ldr	x0, [x0]
    3c10:	ldr	x1, [sp, #40]
    3c14:	cmp	x1, x0
    3c18:	b.cc	3c7c <lt_dlinsertsearchdir+0x9c>  // b.lo, b.ul, b.last
    3c1c:	adrp	x0, 0 <lt__alloc_die_callback>
    3c20:	add	x0, x0, #0x0
    3c24:	ldr	x19, [x0]
    3c28:	adrp	x0, 0 <lt__alloc_die_callback>
    3c2c:	add	x0, x0, #0x0
    3c30:	ldr	x0, [x0]
    3c34:	cmp	x0, #0x0
    3c38:	b.eq	3c68 <lt_dlinsertsearchdir+0x88>  // b.none
    3c3c:	adrp	x0, 0 <lt__alloc_die_callback>
    3c40:	add	x0, x0, #0x0
    3c44:	ldr	x0, [x0]
    3c48:	ldrb	w0, [x0]
    3c4c:	cmp	w0, #0x0
    3c50:	b.eq	3c68 <lt_dlinsertsearchdir+0x88>  // b.none
    3c54:	adrp	x0, 0 <lt__alloc_die_callback>
    3c58:	add	x0, x0, #0x0
    3c5c:	ldr	x0, [x0]
    3c60:	bl	0 <strlen>
    3c64:	b	3c6c <lt_dlinsertsearchdir+0x8c>
    3c68:	mov	x0, #0x0                   	// #0
    3c6c:	add	x0, x19, x0
    3c70:	ldr	x1, [sp, #40]
    3c74:	cmp	x1, x0
    3c78:	b.cc	3c90 <lt_dlinsertsearchdir+0xb0>  // b.lo, b.ul, b.last
    3c7c:	mov	w0, #0x12                  	// #18
    3c80:	bl	0 <lt__error_string>
    3c84:	bl	0 <lt__set_last_error>
    3c88:	mov	w0, #0x1                   	// #1
    3c8c:	b	3cd8 <lt_dlinsertsearchdir+0xf8>
    3c90:	ldr	x0, [sp, #32]
    3c94:	cmp	x0, #0x0
    3c98:	b.eq	3cd4 <lt_dlinsertsearchdir+0xf4>  // b.none
    3c9c:	ldr	x0, [sp, #32]
    3ca0:	ldrb	w0, [x0]
    3ca4:	cmp	w0, #0x0
    3ca8:	b.eq	3cd4 <lt_dlinsertsearchdir+0xf4>  // b.none
    3cac:	ldr	x2, [sp, #32]
    3cb0:	ldr	x1, [sp, #40]
    3cb4:	adrp	x0, 0 <lt__alloc_die_callback>
    3cb8:	add	x0, x0, #0x0
    3cbc:	bl	3840 <lt_dlpath_insertdir>
    3cc0:	cmp	w0, #0x0
    3cc4:	b.eq	3cd4 <lt_dlinsertsearchdir+0xf4>  // b.none
    3cc8:	ldr	w0, [sp, #60]
    3ccc:	add	w0, w0, #0x1
    3cd0:	str	w0, [sp, #60]
    3cd4:	ldr	w0, [sp, #60]
    3cd8:	ldr	x19, [sp, #16]
    3cdc:	ldp	x29, x30, [sp], #64
    3ce0:	ret

0000000000003ce4 <lt_dlsetsearchpath>:
    3ce4:	stp	x29, x30, [sp, #-48]!
    3ce8:	mov	x29, sp
    3cec:	str	x0, [sp, #24]
    3cf0:	str	wzr, [sp, #44]
    3cf4:	adrp	x0, 0 <lt__alloc_die_callback>
    3cf8:	add	x0, x0, #0x0
    3cfc:	ldr	x0, [x0]
    3d00:	bl	0 <free>
    3d04:	adrp	x0, 0 <lt__alloc_die_callback>
    3d08:	add	x0, x0, #0x0
    3d0c:	str	xzr, [x0]
    3d10:	ldr	x0, [sp, #24]
    3d14:	cmp	x0, #0x0
    3d18:	b.eq	3d48 <lt_dlsetsearchpath+0x64>  // b.none
    3d1c:	ldr	x0, [sp, #24]
    3d20:	cmp	x0, #0x0
    3d24:	b.eq	3d48 <lt_dlsetsearchpath+0x64>  // b.none
    3d28:	ldr	x0, [sp, #24]
    3d2c:	ldrb	w0, [x0]
    3d30:	cmp	w0, #0x0
    3d34:	b.eq	3d48 <lt_dlsetsearchpath+0x64>  // b.none
    3d38:	ldr	x0, [sp, #24]
    3d3c:	ldrb	w0, [x0]
    3d40:	cmp	w0, #0x0
    3d44:	b.ne	3d50 <lt_dlsetsearchpath+0x6c>  // b.any
    3d48:	ldr	w0, [sp, #44]
    3d4c:	b	3d78 <lt_dlsetsearchpath+0x94>
    3d50:	adrp	x0, 0 <lt__alloc_die_callback>
    3d54:	add	x1, x0, #0x0
    3d58:	ldr	x0, [sp, #24]
    3d5c:	bl	ab8 <canonicalize_path>
    3d60:	cmp	w0, #0x0
    3d64:	b.eq	3d74 <lt_dlsetsearchpath+0x90>  // b.none
    3d68:	ldr	w0, [sp, #44]
    3d6c:	add	w0, w0, #0x1
    3d70:	str	w0, [sp, #44]
    3d74:	ldr	w0, [sp, #44]
    3d78:	ldp	x29, x30, [sp], #48
    3d7c:	ret

0000000000003d80 <lt_dlgetsearchpath>:
    3d80:	sub	sp, sp, #0x10
    3d84:	adrp	x0, 0 <lt__alloc_die_callback>
    3d88:	add	x0, x0, #0x0
    3d8c:	ldr	x0, [x0]
    3d90:	str	x0, [sp, #8]
    3d94:	ldr	x0, [sp, #8]
    3d98:	add	sp, sp, #0x10
    3d9c:	ret

0000000000003da0 <lt_dlmakeresident>:
    3da0:	stp	x29, x30, [sp, #-48]!
    3da4:	mov	x29, sp
    3da8:	str	x0, [sp, #24]
    3dac:	str	wzr, [sp, #44]
    3db0:	ldr	x0, [sp, #24]
    3db4:	cmp	x0, #0x0
    3db8:	b.ne	3dd8 <lt_dlmakeresident+0x38>  // b.any
    3dbc:	mov	w0, #0xc                   	// #12
    3dc0:	bl	0 <lt__error_string>
    3dc4:	bl	0 <lt__set_last_error>
    3dc8:	ldr	w0, [sp, #44]
    3dcc:	add	w0, w0, #0x1
    3dd0:	str	w0, [sp, #44]
    3dd4:	b	3de8 <lt_dlmakeresident+0x48>
    3dd8:	ldr	x0, [sp, #24]
    3ddc:	ldrb	w1, [x0, #36]
    3de0:	orr	w1, w1, #0x1
    3de4:	strb	w1, [x0, #36]
    3de8:	ldr	w0, [sp, #44]
    3dec:	ldp	x29, x30, [sp], #48
    3df0:	ret

0000000000003df4 <lt_dlisresident>:
    3df4:	stp	x29, x30, [sp, #-32]!
    3df8:	mov	x29, sp
    3dfc:	str	x0, [sp, #24]
    3e00:	ldr	x0, [sp, #24]
    3e04:	cmp	x0, #0x0
    3e08:	b.ne	3e20 <lt_dlisresident+0x2c>  // b.any
    3e0c:	mov	w0, #0xc                   	// #12
    3e10:	bl	0 <lt__error_string>
    3e14:	bl	0 <lt__set_last_error>
    3e18:	mov	w0, #0xffffffff            	// #-1
    3e1c:	b	3e30 <lt_dlisresident+0x3c>
    3e20:	ldr	x0, [sp, #24]
    3e24:	ldrb	w0, [x0, #36]
    3e28:	ubfx	x0, x0, #0, #1
    3e2c:	and	w0, w0, #0xff
    3e30:	ldp	x29, x30, [sp], #32
    3e34:	ret

0000000000003e38 <lt_dlinterface_register>:
    3e38:	stp	x29, x30, [sp, #-48]!
    3e3c:	mov	x29, sp
    3e40:	str	x0, [sp, #24]
    3e44:	str	x1, [sp, #16]
    3e48:	mov	x0, #0x10                  	// #16
    3e4c:	bl	0 <lt__malloc>
    3e50:	str	x0, [sp, #40]
    3e54:	ldr	x0, [sp, #40]
    3e58:	cmp	x0, #0x0
    3e5c:	b.eq	3ea0 <lt_dlinterface_register+0x68>  // b.none
    3e60:	ldr	x0, [sp, #24]
    3e64:	bl	0 <lt__strdup>
    3e68:	mov	x1, x0
    3e6c:	ldr	x0, [sp, #40]
    3e70:	str	x1, [x0]
    3e74:	ldr	x0, [sp, #40]
    3e78:	ldr	x0, [x0]
    3e7c:	cmp	x0, #0x0
    3e80:	b.ne	3e94 <lt_dlinterface_register+0x5c>  // b.any
    3e84:	ldr	x0, [sp, #40]
    3e88:	bl	0 <free>
    3e8c:	str	xzr, [sp, #40]
    3e90:	b	3ea0 <lt_dlinterface_register+0x68>
    3e94:	ldr	x0, [sp, #40]
    3e98:	ldr	x1, [sp, #16]
    3e9c:	str	x1, [x0, #8]
    3ea0:	ldr	x0, [sp, #40]
    3ea4:	ldp	x29, x30, [sp], #48
    3ea8:	ret

0000000000003eac <lt_dlinterface_free>:
    3eac:	stp	x29, x30, [sp, #-48]!
    3eb0:	mov	x29, sp
    3eb4:	str	x0, [sp, #24]
    3eb8:	ldr	x0, [sp, #24]
    3ebc:	str	x0, [sp, #40]
    3ec0:	ldr	x0, [sp, #40]
    3ec4:	ldr	x0, [x0]
    3ec8:	bl	0 <free>
    3ecc:	ldr	x0, [sp, #40]
    3ed0:	str	xzr, [x0]
    3ed4:	ldr	x0, [sp, #40]
    3ed8:	bl	0 <free>
    3edc:	str	xzr, [sp, #40]
    3ee0:	nop
    3ee4:	ldp	x29, x30, [sp], #48
    3ee8:	ret

0000000000003eec <lt_dlcaller_set_data>:
    3eec:	stp	x29, x30, [sp, #-96]!
    3ef0:	mov	x29, sp
    3ef4:	str	x0, [sp, #40]
    3ef8:	str	x1, [sp, #32]
    3efc:	str	x2, [sp, #24]
    3f00:	str	wzr, [sp, #92]
    3f04:	str	xzr, [sp, #80]
    3f08:	ldr	x0, [sp, #32]
    3f0c:	str	x0, [sp, #64]
    3f10:	ldr	x0, [sp, #64]
    3f14:	ldr	x0, [x0, #72]
    3f18:	cmp	x0, #0x0
    3f1c:	b.eq	3f50 <lt_dlcaller_set_data+0x64>  // b.none
    3f20:	b	3f30 <lt_dlcaller_set_data+0x44>
    3f24:	ldr	w0, [sp, #92]
    3f28:	add	w0, w0, #0x1
    3f2c:	str	w0, [sp, #92]
    3f30:	ldr	x0, [sp, #64]
    3f34:	ldr	x1, [x0, #72]
    3f38:	ldrsw	x0, [sp, #92]
    3f3c:	lsl	x0, x0, #4
    3f40:	add	x0, x1, x0
    3f44:	ldr	x0, [x0]
    3f48:	cmp	x0, #0x0
    3f4c:	b.ne	3f24 <lt_dlcaller_set_data+0x38>  // b.any
    3f50:	str	wzr, [sp, #76]
    3f54:	b	3fa8 <lt_dlcaller_set_data+0xbc>
    3f58:	ldr	x0, [sp, #64]
    3f5c:	ldr	x1, [x0, #72]
    3f60:	ldrsw	x0, [sp, #76]
    3f64:	lsl	x0, x0, #4
    3f68:	add	x0, x1, x0
    3f6c:	ldr	x0, [x0]
    3f70:	ldr	x1, [sp, #40]
    3f74:	cmp	x1, x0
    3f78:	b.ne	3f9c <lt_dlcaller_set_data+0xb0>  // b.any
    3f7c:	ldr	x0, [sp, #64]
    3f80:	ldr	x1, [x0, #72]
    3f84:	ldrsw	x0, [sp, #76]
    3f88:	lsl	x0, x0, #4
    3f8c:	add	x0, x1, x0
    3f90:	ldr	x0, [x0, #8]
    3f94:	str	x0, [sp, #80]
    3f98:	b	3fb8 <lt_dlcaller_set_data+0xcc>
    3f9c:	ldr	w0, [sp, #76]
    3fa0:	add	w0, w0, #0x1
    3fa4:	str	w0, [sp, #76]
    3fa8:	ldr	w1, [sp, #76]
    3fac:	ldr	w0, [sp, #92]
    3fb0:	cmp	w1, w0
    3fb4:	b.lt	3f58 <lt_dlcaller_set_data+0x6c>  // b.tstop
    3fb8:	ldr	w1, [sp, #76]
    3fbc:	ldr	w0, [sp, #92]
    3fc0:	cmp	w1, w0
    3fc4:	b.ne	404c <lt_dlcaller_set_data+0x160>  // b.any
    3fc8:	ldr	x0, [sp, #64]
    3fcc:	ldr	x2, [x0, #72]
    3fd0:	ldr	w0, [sp, #92]
    3fd4:	add	w0, w0, #0x2
    3fd8:	sxtw	x0, w0
    3fdc:	lsl	x0, x0, #4
    3fe0:	mov	x1, x0
    3fe4:	mov	x0, x2
    3fe8:	bl	0 <lt__realloc>
    3fec:	str	x0, [sp, #56]
    3ff0:	ldr	x0, [sp, #56]
    3ff4:	cmp	x0, #0x0
    3ff8:	b.ne	4004 <lt_dlcaller_set_data+0x118>  // b.any
    3ffc:	str	xzr, [sp, #80]
    4000:	b	4068 <lt_dlcaller_set_data+0x17c>
    4004:	ldr	x0, [sp, #64]
    4008:	ldr	x1, [sp, #56]
    400c:	str	x1, [x0, #72]
    4010:	ldr	x0, [sp, #64]
    4014:	ldr	x1, [x0, #72]
    4018:	ldrsw	x0, [sp, #76]
    401c:	lsl	x0, x0, #4
    4020:	add	x0, x1, x0
    4024:	ldr	x1, [sp, #40]
    4028:	str	x1, [x0]
    402c:	ldr	x0, [sp, #64]
    4030:	ldr	x1, [x0, #72]
    4034:	ldr	w0, [sp, #76]
    4038:	add	w0, w0, #0x1
    403c:	sxtw	x0, w0
    4040:	lsl	x0, x0, #4
    4044:	add	x0, x1, x0
    4048:	str	xzr, [x0]
    404c:	ldr	x0, [sp, #64]
    4050:	ldr	x1, [x0, #72]
    4054:	ldrsw	x0, [sp, #76]
    4058:	lsl	x0, x0, #4
    405c:	add	x0, x1, x0
    4060:	ldr	x1, [sp, #24]
    4064:	str	x1, [x0, #8]
    4068:	ldr	x0, [sp, #80]
    406c:	ldp	x29, x30, [sp], #96
    4070:	ret

0000000000004074 <lt_dlcaller_get_data>:
    4074:	sub	sp, sp, #0x30
    4078:	str	x0, [sp, #8]
    407c:	str	x1, [sp]
    4080:	str	xzr, [sp, #40]
    4084:	ldr	x0, [sp]
    4088:	str	x0, [sp, #24]
    408c:	ldr	x0, [sp, #24]
    4090:	ldr	x0, [x0, #72]
    4094:	cmp	x0, #0x0
    4098:	b.eq	4114 <lt_dlcaller_get_data+0xa0>  // b.none
    409c:	str	wzr, [sp, #36]
    40a0:	b	40f4 <lt_dlcaller_get_data+0x80>
    40a4:	ldr	x0, [sp, #24]
    40a8:	ldr	x1, [x0, #72]
    40ac:	ldrsw	x0, [sp, #36]
    40b0:	lsl	x0, x0, #4
    40b4:	add	x0, x1, x0
    40b8:	ldr	x0, [x0]
    40bc:	ldr	x1, [sp, #8]
    40c0:	cmp	x1, x0
    40c4:	b.ne	40e8 <lt_dlcaller_get_data+0x74>  // b.any
    40c8:	ldr	x0, [sp, #24]
    40cc:	ldr	x1, [x0, #72]
    40d0:	ldrsw	x0, [sp, #36]
    40d4:	lsl	x0, x0, #4
    40d8:	add	x0, x1, x0
    40dc:	ldr	x0, [x0, #8]
    40e0:	str	x0, [sp, #40]
    40e4:	b	4114 <lt_dlcaller_get_data+0xa0>
    40e8:	ldr	w0, [sp, #36]
    40ec:	add	w0, w0, #0x1
    40f0:	str	w0, [sp, #36]
    40f4:	ldr	x0, [sp, #24]
    40f8:	ldr	x1, [x0, #72]
    40fc:	ldrsw	x0, [sp, #36]
    4100:	lsl	x0, x0, #4
    4104:	add	x0, x1, x0
    4108:	ldr	x0, [x0]
    410c:	cmp	x0, #0x0
    4110:	b.ne	40a4 <lt_dlcaller_get_data+0x30>  // b.any
    4114:	ldr	x0, [sp, #40]
    4118:	add	sp, sp, #0x30
    411c:	ret

0000000000004120 <lt_dlgetinfo>:
    4120:	stp	x29, x30, [sp, #-32]!
    4124:	mov	x29, sp
    4128:	str	x0, [sp, #24]
    412c:	ldr	x0, [sp, #24]
    4130:	cmp	x0, #0x0
    4134:	b.ne	414c <lt_dlgetinfo+0x2c>  // b.any
    4138:	mov	w0, #0xc                   	// #12
    413c:	bl	0 <lt__error_string>
    4140:	bl	0 <lt__set_last_error>
    4144:	mov	x0, #0x0                   	// #0
    4148:	b	4154 <lt_dlgetinfo+0x34>
    414c:	ldr	x0, [sp, #24]
    4150:	add	x0, x0, #0x10
    4154:	ldp	x29, x30, [sp], #32
    4158:	ret

000000000000415c <lt_dlhandle_iterate>:
    415c:	stp	x29, x30, [sp, #-48]!
    4160:	mov	x29, sp
    4164:	str	x0, [sp, #24]
    4168:	str	x1, [sp, #16]
    416c:	ldr	x0, [sp, #16]
    4170:	str	x0, [sp, #40]
    4174:	ldr	x0, [sp, #24]
    4178:	str	x0, [sp, #32]
    417c:	ldr	x0, [sp, #24]
    4180:	cmp	x0, #0x0
    4184:	b.ne	41a8 <lt_dlhandle_iterate+0x4c>  // b.any
    4188:	adrp	x0, 0 <lt__alloc_die_callback>
    418c:	add	x3, x0, #0x0
    4190:	mov	w2, #0x96a                 	// #2410
    4194:	adrp	x0, 0 <lt__alloc_die_callback>
    4198:	add	x1, x0, #0x0
    419c:	adrp	x0, 0 <lt__alloc_die_callback>
    41a0:	add	x0, x0, #0x0
    41a4:	bl	0 <__assert_fail>
    41a8:	ldr	x0, [sp, #40]
    41ac:	cmp	x0, #0x0
    41b0:	b.ne	41c8 <lt_dlhandle_iterate+0x6c>  // b.any
    41b4:	adrp	x0, 0 <lt__alloc_die_callback>
    41b8:	add	x0, x0, #0x0
    41bc:	ldr	x0, [x0]
    41c0:	str	x0, [sp, #40]
    41c4:	b	41e4 <lt_dlhandle_iterate+0x88>
    41c8:	ldr	x0, [sp, #40]
    41cc:	ldr	x0, [x0]
    41d0:	str	x0, [sp, #40]
    41d4:	b	41e4 <lt_dlhandle_iterate+0x88>
    41d8:	ldr	x0, [sp, #40]
    41dc:	ldr	x0, [x0]
    41e0:	str	x0, [sp, #40]
    41e4:	ldr	x0, [sp, #40]
    41e8:	cmp	x0, #0x0
    41ec:	b.eq	4224 <lt_dlhandle_iterate+0xc8>  // b.none
    41f0:	ldr	x0, [sp, #32]
    41f4:	ldr	x0, [x0, #8]
    41f8:	cmp	x0, #0x0
    41fc:	b.eq	4224 <lt_dlhandle_iterate+0xc8>  // b.none
    4200:	ldr	x0, [sp, #32]
    4204:	ldr	x2, [x0, #8]
    4208:	ldr	x0, [sp, #32]
    420c:	ldr	x0, [x0]
    4210:	mov	x1, x0
    4214:	ldr	x0, [sp, #40]
    4218:	blr	x2
    421c:	cmp	w0, #0x0
    4220:	b.ne	41d8 <lt_dlhandle_iterate+0x7c>  // b.any
    4224:	ldr	x0, [sp, #40]
    4228:	ldp	x29, x30, [sp], #48
    422c:	ret

0000000000004230 <lt_dlhandle_fetch>:
    4230:	stp	x29, x30, [sp, #-48]!
    4234:	mov	x29, sp
    4238:	str	x0, [sp, #24]
    423c:	str	x1, [sp, #16]
    4240:	str	xzr, [sp, #40]
    4244:	ldr	x0, [sp, #24]
    4248:	cmp	x0, #0x0
    424c:	b.ne	42ac <lt_dlhandle_fetch+0x7c>  // b.any
    4250:	adrp	x0, 0 <lt__alloc_die_callback>
    4254:	add	x3, x0, #0x0
    4258:	mov	w2, #0x981                 	// #2433
    425c:	adrp	x0, 0 <lt__alloc_die_callback>
    4260:	add	x1, x0, #0x0
    4264:	adrp	x0, 0 <lt__alloc_die_callback>
    4268:	add	x0, x0, #0x0
    426c:	bl	0 <__assert_fail>
    4270:	ldr	x0, [sp, #40]
    4274:	str	x0, [sp, #32]
    4278:	ldr	x0, [sp, #32]
    427c:	cmp	x0, #0x0
    4280:	b.eq	42ac <lt_dlhandle_fetch+0x7c>  // b.none
    4284:	ldr	x0, [sp, #32]
    4288:	ldr	x0, [x0, #24]
    428c:	cmp	x0, #0x0
    4290:	b.eq	42ac <lt_dlhandle_fetch+0x7c>  // b.none
    4294:	ldr	x0, [sp, #32]
    4298:	ldr	x0, [x0, #24]
    429c:	ldr	x1, [sp, #16]
    42a0:	bl	0 <strcmp>
    42a4:	cmp	w0, #0x0
    42a8:	b.eq	42cc <lt_dlhandle_fetch+0x9c>  // b.none
    42ac:	ldr	x1, [sp, #40]
    42b0:	ldr	x0, [sp, #24]
    42b4:	bl	415c <lt_dlhandle_iterate>
    42b8:	str	x0, [sp, #40]
    42bc:	ldr	x0, [sp, #40]
    42c0:	cmp	x0, #0x0
    42c4:	b.ne	4270 <lt_dlhandle_fetch+0x40>  // b.any
    42c8:	b	42d0 <lt_dlhandle_fetch+0xa0>
    42cc:	nop
    42d0:	ldr	x0, [sp, #40]
    42d4:	ldp	x29, x30, [sp], #48
    42d8:	ret

00000000000042dc <lt_dlhandle_map>:
    42dc:	stp	x29, x30, [sp, #-80]!
    42e0:	mov	x29, sp
    42e4:	str	x0, [sp, #40]
    42e8:	str	x1, [sp, #32]
    42ec:	str	x2, [sp, #24]
    42f0:	ldr	x0, [sp, #40]
    42f4:	str	x0, [sp, #64]
    42f8:	adrp	x0, 0 <lt__alloc_die_callback>
    42fc:	add	x0, x0, #0x0
    4300:	ldr	x0, [x0]
    4304:	str	x0, [sp, #72]
    4308:	ldr	x0, [sp, #40]
    430c:	cmp	x0, #0x0
    4310:	b.ne	43b0 <lt_dlhandle_map+0xd4>  // b.any
    4314:	adrp	x0, 0 <lt__alloc_die_callback>
    4318:	add	x3, x0, #0x0
    431c:	mov	w2, #0x995                 	// #2453
    4320:	adrp	x0, 0 <lt__alloc_die_callback>
    4324:	add	x1, x0, #0x0
    4328:	adrp	x0, 0 <lt__alloc_die_callback>
    432c:	add	x0, x0, #0x0
    4330:	bl	0 <__assert_fail>
    4334:	str	wzr, [sp, #60]
    4338:	b	4348 <lt_dlhandle_map+0x6c>
    433c:	ldr	x0, [sp, #72]
    4340:	ldr	x0, [x0]
    4344:	str	x0, [sp, #72]
    4348:	ldr	x0, [sp, #72]
    434c:	cmp	x0, #0x0
    4350:	b.eq	4388 <lt_dlhandle_map+0xac>  // b.none
    4354:	ldr	x0, [sp, #64]
    4358:	ldr	x0, [x0, #8]
    435c:	cmp	x0, #0x0
    4360:	b.eq	4388 <lt_dlhandle_map+0xac>  // b.none
    4364:	ldr	x0, [sp, #64]
    4368:	ldr	x2, [x0, #8]
    436c:	ldr	x0, [sp, #64]
    4370:	ldr	x0, [x0]
    4374:	mov	x1, x0
    4378:	ldr	x0, [sp, #72]
    437c:	blr	x2
    4380:	cmp	w0, #0x0
    4384:	b.ne	433c <lt_dlhandle_map+0x60>  // b.any
    4388:	ldr	x2, [sp, #32]
    438c:	ldr	x1, [sp, #24]
    4390:	ldr	x0, [sp, #72]
    4394:	blr	x2
    4398:	str	w0, [sp, #60]
    439c:	ldr	w0, [sp, #60]
    43a0:	cmp	w0, #0x0
    43a4:	b.eq	43b0 <lt_dlhandle_map+0xd4>  // b.none
    43a8:	ldr	w0, [sp, #60]
    43ac:	b	43c0 <lt_dlhandle_map+0xe4>
    43b0:	ldr	x0, [sp, #72]
    43b4:	cmp	x0, #0x0
    43b8:	b.ne	4334 <lt_dlhandle_map+0x58>  // b.any
    43bc:	mov	w0, #0x0                   	// #0
    43c0:	ldp	x29, x30, [sp], #80
    43c4:	ret

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	cmp	x0, #0x0
  18:	b.ne	5c <lt__slist_delete+0x5c>  // b.any
  1c:	adrp	x0, 0 <lt__slist_delete>
  20:	add	x3, x0, #0x0
  24:	mov	w2, #0x38                  	// #56
  28:	adrp	x0, 0 <lt__slist_delete>
  2c:	add	x1, x0, #0x0
  30:	adrp	x0, 0 <lt__slist_delete>
  34:	add	x0, x0, #0x0
  38:	bl	0 <__assert_fail>
  3c:	ldr	x0, [sp, #24]
  40:	ldr	x0, [x0]
  44:	str	x0, [sp, #40]
  48:	ldr	x1, [sp, #16]
  4c:	ldr	x0, [sp, #24]
  50:	blr	x1
  54:	ldr	x0, [sp, #40]
  58:	str	x0, [sp, #24]
  5c:	ldr	x0, [sp, #24]
  60:	cmp	x0, #0x0
  64:	b.ne	3c <lt__slist_delete+0x3c>  // b.any
  68:	mov	x0, #0x0                   	// #0
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

0000000000000074 <lt__slist_remove>:
  74:	stp	x29, x30, [sp, #-80]!
  78:	mov	x29, sp
  7c:	str	x0, [sp, #40]
  80:	str	x1, [sp, #32]
  84:	str	x2, [sp, #24]
  88:	str	xzr, [sp, #56]
  8c:	str	xzr, [sp, #72]
  90:	ldr	x0, [sp, #32]
  94:	cmp	x0, #0x0
  98:	b.ne	bc <lt__slist_remove+0x48>  // b.any
  9c:	adrp	x0, 0 <lt__slist_delete>
  a0:	add	x3, x0, #0x0
  a4:	mov	w2, #0x53                  	// #83
  a8:	adrp	x0, 0 <lt__slist_delete>
  ac:	add	x1, x0, #0x0
  b0:	adrp	x0, 0 <lt__slist_delete>
  b4:	add	x0, x0, #0x0
  b8:	bl	0 <__assert_fail>
  bc:	ldr	x0, [sp, #40]
  c0:	cmp	x0, #0x0
  c4:	b.eq	d8 <lt__slist_remove+0x64>  // b.none
  c8:	ldr	x0, [sp, #40]
  cc:	ldr	x0, [x0]
  d0:	cmp	x0, #0x0
  d4:	b.ne	e0 <lt__slist_remove+0x6c>  // b.any
  d8:	mov	x0, #0x0                   	// #0
  dc:	b	198 <lt__slist_remove+0x124>
  e0:	ldr	x0, [sp, #40]
  e4:	ldr	x0, [x0]
  e8:	ldr	x2, [sp, #32]
  ec:	ldr	x1, [sp, #24]
  f0:	blr	x2
  f4:	str	x0, [sp, #72]
  f8:	ldr	x0, [sp, #72]
  fc:	cmp	x0, #0x0
 100:	b.eq	124 <lt__slist_remove+0xb0>  // b.none
 104:	ldr	x0, [sp, #40]
 108:	ldr	x0, [x0]
 10c:	str	x0, [sp, #56]
 110:	ldr	x0, [sp, #56]
 114:	ldr	x1, [x0]
 118:	ldr	x0, [sp, #40]
 11c:	str	x1, [x0]
 120:	b	194 <lt__slist_remove+0x120>
 124:	ldr	x0, [sp, #40]
 128:	ldr	x0, [x0]
 12c:	str	x0, [sp, #64]
 130:	b	184 <lt__slist_remove+0x110>
 134:	ldr	x0, [sp, #64]
 138:	ldr	x0, [x0]
 13c:	ldr	x2, [sp, #32]
 140:	ldr	x1, [sp, #24]
 144:	blr	x2
 148:	str	x0, [sp, #72]
 14c:	ldr	x0, [sp, #72]
 150:	cmp	x0, #0x0
 154:	b.eq	178 <lt__slist_remove+0x104>  // b.none
 158:	ldr	x0, [sp, #64]
 15c:	ldr	x0, [x0]
 160:	str	x0, [sp, #56]
 164:	ldr	x0, [sp, #56]
 168:	ldr	x1, [x0]
 16c:	ldr	x0, [sp, #64]
 170:	str	x1, [x0]
 174:	b	194 <lt__slist_remove+0x120>
 178:	ldr	x0, [sp, #64]
 17c:	ldr	x0, [x0]
 180:	str	x0, [sp, #64]
 184:	ldr	x0, [sp, #64]
 188:	ldr	x0, [x0]
 18c:	cmp	x0, #0x0
 190:	b.ne	134 <lt__slist_remove+0xc0>  // b.any
 194:	ldr	x0, [sp, #72]
 198:	ldp	x29, x30, [sp], #80
 19c:	ret

00000000000001a0 <lt__slist_find>:
 1a0:	stp	x29, x30, [sp, #-64]!
 1a4:	mov	x29, sp
 1a8:	str	x0, [sp, #40]
 1ac:	str	x1, [sp, #32]
 1b0:	str	x2, [sp, #24]
 1b4:	str	xzr, [sp, #56]
 1b8:	ldr	x0, [sp, #32]
 1bc:	cmp	x0, #0x0
 1c0:	b.ne	210 <lt__slist_find+0x70>  // b.any
 1c4:	adrp	x0, 0 <lt__slist_delete>
 1c8:	add	x3, x0, #0x0
 1cc:	mov	w2, #0x7a                  	// #122
 1d0:	adrp	x0, 0 <lt__slist_delete>
 1d4:	add	x1, x0, #0x0
 1d8:	adrp	x0, 0 <lt__slist_delete>
 1dc:	add	x0, x0, #0x0
 1e0:	bl	0 <__assert_fail>
 1e4:	ldr	x2, [sp, #32]
 1e8:	ldr	x1, [sp, #24]
 1ec:	ldr	x0, [sp, #40]
 1f0:	blr	x2
 1f4:	str	x0, [sp, #56]
 1f8:	ldr	x0, [sp, #56]
 1fc:	cmp	x0, #0x0
 200:	b.ne	220 <lt__slist_find+0x80>  // b.any
 204:	ldr	x0, [sp, #40]
 208:	ldr	x0, [x0]
 20c:	str	x0, [sp, #40]
 210:	ldr	x0, [sp, #40]
 214:	cmp	x0, #0x0
 218:	b.ne	1e4 <lt__slist_find+0x44>  // b.any
 21c:	b	224 <lt__slist_find+0x84>
 220:	nop
 224:	ldr	x0, [sp, #56]
 228:	ldp	x29, x30, [sp], #64
 22c:	ret

0000000000000230 <lt__slist_concat>:
 230:	sub	sp, sp, #0x20
 234:	str	x0, [sp, #8]
 238:	str	x1, [sp]
 23c:	ldr	x0, [sp, #8]
 240:	cmp	x0, #0x0
 244:	b.ne	250 <lt__slist_concat+0x20>  // b.any
 248:	ldr	x0, [sp]
 24c:	b	288 <lt__slist_concat+0x58>
 250:	ldr	x0, [sp, #8]
 254:	str	x0, [sp, #24]
 258:	b	268 <lt__slist_concat+0x38>
 25c:	ldr	x0, [sp, #24]
 260:	ldr	x0, [x0]
 264:	str	x0, [sp, #24]
 268:	ldr	x0, [sp, #24]
 26c:	ldr	x0, [x0]
 270:	cmp	x0, #0x0
 274:	b.ne	25c <lt__slist_concat+0x2c>  // b.any
 278:	ldr	x0, [sp, #24]
 27c:	ldr	x1, [sp]
 280:	str	x1, [x0]
 284:	ldr	x0, [sp, #8]
 288:	add	sp, sp, #0x20
 28c:	ret

0000000000000290 <lt__slist_cons>:
 290:	stp	x29, x30, [sp, #-32]!
 294:	mov	x29, sp
 298:	str	x0, [sp, #24]
 29c:	str	x1, [sp, #16]
 2a0:	ldr	x0, [sp, #24]
 2a4:	cmp	x0, #0x0
 2a8:	b.ne	2b4 <lt__slist_cons+0x24>  // b.any
 2ac:	ldr	x0, [sp, #16]
 2b0:	b	2f4 <lt__slist_cons+0x64>
 2b4:	ldr	x0, [sp, #24]
 2b8:	ldr	x0, [x0]
 2bc:	cmp	x0, #0x0
 2c0:	b.eq	2e4 <lt__slist_cons+0x54>  // b.none
 2c4:	adrp	x0, 0 <lt__slist_delete>
 2c8:	add	x3, x0, #0x0
 2cc:	mov	w2, #0xaf                  	// #175
 2d0:	adrp	x0, 0 <lt__slist_delete>
 2d4:	add	x1, x0, #0x0
 2d8:	adrp	x0, 0 <lt__slist_delete>
 2dc:	add	x0, x0, #0x0
 2e0:	bl	0 <__assert_fail>
 2e4:	ldr	x0, [sp, #24]
 2e8:	ldr	x1, [sp, #16]
 2ec:	str	x1, [x0]
 2f0:	ldr	x0, [sp, #24]
 2f4:	ldp	x29, x30, [sp], #32
 2f8:	ret

00000000000002fc <lt__slist_tail>:
 2fc:	sub	sp, sp, #0x10
 300:	str	x0, [sp, #8]
 304:	ldr	x0, [sp, #8]
 308:	cmp	x0, #0x0
 30c:	b.eq	31c <lt__slist_tail+0x20>  // b.none
 310:	ldr	x0, [sp, #8]
 314:	ldr	x0, [x0]
 318:	b	320 <lt__slist_tail+0x24>
 31c:	mov	x0, #0x0                   	// #0
 320:	add	sp, sp, #0x10
 324:	ret

0000000000000328 <lt__slist_nth>:
 328:	sub	sp, sp, #0x10
 32c:	str	x0, [sp, #8]
 330:	str	x1, [sp]
 334:	b	350 <lt__slist_nth+0x28>
 338:	ldr	x0, [sp, #8]
 33c:	ldr	x0, [x0]
 340:	str	x0, [sp, #8]
 344:	ldr	x0, [sp]
 348:	sub	x0, x0, #0x1
 34c:	str	x0, [sp]
 350:	ldr	x0, [sp]
 354:	cmp	x0, #0x1
 358:	b.ls	368 <lt__slist_nth+0x40>  // b.plast
 35c:	ldr	x0, [sp, #8]
 360:	cmp	x0, #0x0
 364:	b.ne	338 <lt__slist_nth+0x10>  // b.any
 368:	ldr	x0, [sp, #8]
 36c:	add	sp, sp, #0x10
 370:	ret

0000000000000374 <lt__slist_length>:
 374:	sub	sp, sp, #0x20
 378:	str	x0, [sp, #8]
 37c:	str	xzr, [sp, #24]
 380:	b	39c <lt__slist_length+0x28>
 384:	ldr	x0, [sp, #8]
 388:	ldr	x0, [x0]
 38c:	str	x0, [sp, #8]
 390:	ldr	x0, [sp, #24]
 394:	add	x0, x0, #0x1
 398:	str	x0, [sp, #24]
 39c:	ldr	x0, [sp, #8]
 3a0:	cmp	x0, #0x0
 3a4:	b.ne	384 <lt__slist_length+0x10>  // b.any
 3a8:	ldr	x0, [sp, #24]
 3ac:	add	sp, sp, #0x20
 3b0:	ret

00000000000003b4 <lt__slist_reverse>:
 3b4:	sub	sp, sp, #0x20
 3b8:	str	x0, [sp, #8]
 3bc:	str	xzr, [sp, #24]
 3c0:	b	3ec <lt__slist_reverse+0x38>
 3c4:	ldr	x0, [sp, #8]
 3c8:	ldr	x0, [x0]
 3cc:	str	x0, [sp, #16]
 3d0:	ldr	x0, [sp, #8]
 3d4:	ldr	x1, [sp, #24]
 3d8:	str	x1, [x0]
 3dc:	ldr	x0, [sp, #8]
 3e0:	str	x0, [sp, #24]
 3e4:	ldr	x0, [sp, #16]
 3e8:	str	x0, [sp, #8]
 3ec:	ldr	x0, [sp, #8]
 3f0:	cmp	x0, #0x0
 3f4:	b.ne	3c4 <lt__slist_reverse+0x10>  // b.any
 3f8:	ldr	x0, [sp, #24]
 3fc:	add	sp, sp, #0x20
 400:	ret

0000000000000404 <lt__slist_foreach>:
 404:	stp	x29, x30, [sp, #-64]!
 408:	mov	x29, sp
 40c:	str	x0, [sp, #40]
 410:	str	x1, [sp, #32]
 414:	str	x2, [sp, #24]
 418:	str	xzr, [sp, #56]
 41c:	ldr	x0, [sp, #32]
 420:	cmp	x0, #0x0
 424:	b.ne	47c <lt__slist_foreach+0x78>  // b.any
 428:	adrp	x0, 0 <lt__slist_delete>
 42c:	add	x3, x0, #0x0
 430:	mov	w2, #0xf6                  	// #246
 434:	adrp	x0, 0 <lt__slist_delete>
 438:	add	x1, x0, #0x0
 43c:	adrp	x0, 0 <lt__slist_delete>
 440:	add	x0, x0, #0x0
 444:	bl	0 <__assert_fail>
 448:	ldr	x0, [sp, #40]
 44c:	ldr	x0, [x0]
 450:	str	x0, [sp, #48]
 454:	ldr	x2, [sp, #32]
 458:	ldr	x1, [sp, #24]
 45c:	ldr	x0, [sp, #40]
 460:	blr	x2
 464:	str	x0, [sp, #56]
 468:	ldr	x0, [sp, #56]
 46c:	cmp	x0, #0x0
 470:	b.ne	48c <lt__slist_foreach+0x88>  // b.any
 474:	ldr	x0, [sp, #48]
 478:	str	x0, [sp, #40]
 47c:	ldr	x0, [sp, #40]
 480:	cmp	x0, #0x0
 484:	b.ne	448 <lt__slist_foreach+0x44>  // b.any
 488:	b	490 <lt__slist_foreach+0x8c>
 48c:	nop
 490:	ldr	x0, [sp, #56]
 494:	ldp	x29, x30, [sp], #64
 498:	ret

000000000000049c <slist_sort_merge>:
 49c:	stp	x29, x30, [sp, #-80]!
 4a0:	mov	x29, sp
 4a4:	str	x0, [sp, #40]
 4a8:	str	x1, [sp, #32]
 4ac:	str	x2, [sp, #24]
 4b0:	str	x3, [sp, #16]
 4b4:	add	x0, sp, #0x38
 4b8:	str	x0, [sp, #72]
 4bc:	b	528 <slist_sort_merge+0x8c>
 4c0:	ldr	x3, [sp, #24]
 4c4:	ldr	x2, [sp, #16]
 4c8:	ldr	x1, [sp, #32]
 4cc:	ldr	x0, [sp, #40]
 4d0:	blr	x3
 4d4:	cmp	w0, #0x0
 4d8:	b.gt	504 <slist_sort_merge+0x68>
 4dc:	ldr	x0, [sp, #72]
 4e0:	ldr	x1, [sp, #40]
 4e4:	str	x1, [x0]
 4e8:	ldr	x0, [sp, #72]
 4ec:	ldr	x0, [x0]
 4f0:	str	x0, [sp, #72]
 4f4:	ldr	x0, [sp, #40]
 4f8:	ldr	x0, [x0]
 4fc:	str	x0, [sp, #40]
 500:	b	528 <slist_sort_merge+0x8c>
 504:	ldr	x0, [sp, #72]
 508:	ldr	x1, [sp, #32]
 50c:	str	x1, [x0]
 510:	ldr	x0, [sp, #72]
 514:	ldr	x0, [x0]
 518:	str	x0, [sp, #72]
 51c:	ldr	x0, [sp, #32]
 520:	ldr	x0, [x0]
 524:	str	x0, [sp, #32]
 528:	ldr	x0, [sp, #40]
 52c:	cmp	x0, #0x0
 530:	b.eq	540 <slist_sort_merge+0xa4>  // b.none
 534:	ldr	x0, [sp, #32]
 538:	cmp	x0, #0x0
 53c:	b.ne	4c0 <slist_sort_merge+0x24>  // b.any
 540:	ldr	x0, [sp, #40]
 544:	cmp	x0, #0x0
 548:	b.eq	554 <slist_sort_merge+0xb8>  // b.none
 54c:	ldr	x0, [sp, #40]
 550:	b	558 <slist_sort_merge+0xbc>
 554:	ldr	x0, [sp, #32]
 558:	ldr	x1, [sp, #72]
 55c:	str	x0, [x1]
 560:	ldr	x0, [sp, #56]
 564:	ldp	x29, x30, [sp], #80
 568:	ret

000000000000056c <lt__slist_sort>:
 56c:	stp	x29, x30, [sp, #-80]!
 570:	mov	x29, sp
 574:	str	x19, [sp, #16]
 578:	str	x0, [sp, #56]
 57c:	str	x1, [sp, #48]
 580:	str	x2, [sp, #40]
 584:	ldr	x0, [sp, #56]
 588:	cmp	x0, #0x0
 58c:	b.ne	598 <lt__slist_sort+0x2c>  // b.any
 590:	ldr	x0, [sp, #56]
 594:	b	660 <lt__slist_sort+0xf4>
 598:	ldr	x0, [sp, #56]
 59c:	str	x0, [sp, #64]
 5a0:	ldr	x0, [sp, #56]
 5a4:	ldr	x0, [x0]
 5a8:	str	x0, [sp, #72]
 5ac:	ldr	x0, [sp, #72]
 5b0:	cmp	x0, #0x0
 5b4:	b.ne	5f0 <lt__slist_sort+0x84>  // b.any
 5b8:	ldr	x0, [sp, #64]
 5bc:	b	660 <lt__slist_sort+0xf4>
 5c0:	ldr	x0, [sp, #72]
 5c4:	cmp	x0, #0x0
 5c8:	b.eq	614 <lt__slist_sort+0xa8>  // b.none
 5cc:	ldr	x0, [sp, #72]
 5d0:	ldr	x0, [x0]
 5d4:	str	x0, [sp, #72]
 5d8:	ldr	x0, [sp, #72]
 5dc:	cmp	x0, #0x0
 5e0:	b.eq	614 <lt__slist_sort+0xa8>  // b.none
 5e4:	ldr	x0, [sp, #56]
 5e8:	ldr	x0, [x0]
 5ec:	str	x0, [sp, #56]
 5f0:	ldr	x0, [sp, #72]
 5f4:	cmp	x0, #0x0
 5f8:	b.eq	614 <lt__slist_sort+0xa8>  // b.none
 5fc:	ldr	x0, [sp, #72]
 600:	ldr	x0, [x0]
 604:	str	x0, [sp, #72]
 608:	ldr	x0, [sp, #72]
 60c:	cmp	x0, #0x0
 610:	b.ne	5c0 <lt__slist_sort+0x54>  // b.any
 614:	ldr	x0, [sp, #56]
 618:	ldr	x0, [x0]
 61c:	str	x0, [sp, #72]
 620:	ldr	x0, [sp, #56]
 624:	str	xzr, [x0]
 628:	ldr	x2, [sp, #40]
 62c:	ldr	x1, [sp, #48]
 630:	ldr	x0, [sp, #64]
 634:	bl	56c <lt__slist_sort>
 638:	mov	x19, x0
 63c:	ldr	x2, [sp, #40]
 640:	ldr	x1, [sp, #48]
 644:	ldr	x0, [sp, #72]
 648:	bl	56c <lt__slist_sort>
 64c:	ldr	x3, [sp, #40]
 650:	ldr	x2, [sp, #48]
 654:	mov	x1, x0
 658:	mov	x0, x19
 65c:	bl	49c <slist_sort_merge>
 660:	ldr	x19, [sp, #16]
 664:	ldp	x29, x30, [sp], #80
 668:	ret

000000000000066c <lt__slist_box>:
 66c:	stp	x29, x30, [sp, #-48]!
 670:	mov	x29, sp
 674:	str	x0, [sp, #24]
 678:	mov	x0, #0x10                  	// #16
 67c:	bl	0 <malloc>
 680:	str	x0, [sp, #40]
 684:	ldr	x0, [sp, #40]
 688:	cmp	x0, #0x0
 68c:	b.eq	6a4 <lt__slist_box+0x38>  // b.none
 690:	ldr	x0, [sp, #40]
 694:	str	xzr, [x0]
 698:	ldr	x0, [sp, #40]
 69c:	ldr	x1, [sp, #24]
 6a0:	str	x1, [x0, #8]
 6a4:	ldr	x0, [sp, #40]
 6a8:	ldp	x29, x30, [sp], #48
 6ac:	ret

00000000000006b0 <lt__slist_unbox>:
 6b0:	stp	x29, x30, [sp, #-48]!
 6b4:	mov	x29, sp
 6b8:	str	x0, [sp, #24]
 6bc:	str	xzr, [sp, #40]
 6c0:	ldr	x0, [sp, #24]
 6c4:	cmp	x0, #0x0
 6c8:	b.eq	6e0 <lt__slist_unbox+0x30>  // b.none
 6cc:	ldr	x0, [sp, #24]
 6d0:	ldr	x0, [x0, #8]
 6d4:	str	x0, [sp, #40]
 6d8:	ldr	x0, [sp, #24]
 6dc:	bl	0 <free>
 6e0:	ldr	x0, [sp, #40]
 6e4:	ldp	x29, x30, [sp], #48
 6e8:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	ldr	x0, [sp, #40]
  18:	cmp	x0, #0x0
  1c:	b.ne	40 <lt_strlcat+0x40>  // b.any
  20:	adrp	x0, 0 <lt_strlcat>
  24:	add	x3, x0, #0x0
  28:	mov	w2, #0x39                  	// #57
  2c:	adrp	x0, 0 <lt_strlcat>
  30:	add	x1, x0, #0x0
  34:	adrp	x0, 0 <lt_strlcat>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <__assert_fail>
  40:	ldr	x0, [sp, #32]
  44:	cmp	x0, #0x0
  48:	b.ne	6c <lt_strlcat+0x6c>  // b.any
  4c:	adrp	x0, 0 <lt_strlcat>
  50:	add	x3, x0, #0x0
  54:	mov	w2, #0x3a                  	// #58
  58:	adrp	x0, 0 <lt_strlcat>
  5c:	add	x1, x0, #0x0
  60:	adrp	x0, 0 <lt_strlcat>
  64:	add	x0, x0, #0x0
  68:	bl	0 <__assert_fail>
  6c:	ldr	x0, [sp, #24]
  70:	cmp	x0, #0x0
  74:	b.ne	98 <lt_strlcat+0x98>  // b.any
  78:	adrp	x0, 0 <lt_strlcat>
  7c:	add	x3, x0, #0x0
  80:	mov	w2, #0x3b                  	// #59
  84:	adrp	x0, 0 <lt_strlcat>
  88:	add	x1, x0, #0x0
  8c:	adrp	x0, 0 <lt_strlcat>
  90:	add	x0, x0, #0x0
  94:	bl	0 <__assert_fail>
  98:	ldr	x0, [sp, #40]
  9c:	bl	0 <strlen>
  a0:	str	x0, [sp, #72]
  a4:	ldr	x1, [sp, #40]
  a8:	ldr	x0, [sp, #72]
  ac:	add	x0, x1, x0
  b0:	str	x0, [sp, #64]
  b4:	ldr	x0, [sp, #32]
  b8:	str	x0, [sp, #56]
  bc:	b	f4 <lt_strlcat+0xf4>
  c0:	ldr	x0, [sp, #56]
  c4:	ldrb	w1, [x0]
  c8:	ldr	x0, [sp, #64]
  cc:	strb	w1, [x0]
  d0:	ldr	x0, [sp, #72]
  d4:	add	x0, x0, #0x1
  d8:	str	x0, [sp, #72]
  dc:	ldr	x0, [sp, #64]
  e0:	add	x0, x0, #0x1
  e4:	str	x0, [sp, #64]
  e8:	ldr	x0, [sp, #56]
  ec:	add	x0, x0, #0x1
  f0:	str	x0, [sp, #56]
  f4:	ldr	x0, [sp, #56]
  f8:	ldrb	w0, [x0]
  fc:	cmp	w0, #0x0
 100:	b.eq	118 <lt_strlcat+0x118>  // b.none
 104:	ldr	x0, [sp, #24]
 108:	sub	x0, x0, #0x1
 10c:	ldr	x1, [sp, #72]
 110:	cmp	x1, x0
 114:	b.cc	c0 <lt_strlcat+0xc0>  // b.lo, b.ul, b.last
 118:	ldr	x1, [sp, #40]
 11c:	ldr	x0, [sp, #72]
 120:	add	x0, x1, x0
 124:	strb	wzr, [x0]
 128:	b	138 <lt_strlcat+0x138>
 12c:	ldr	x0, [sp, #72]
 130:	add	x0, x0, #0x1
 134:	str	x0, [sp, #72]
 138:	ldr	x0, [sp, #56]
 13c:	add	x1, x0, #0x1
 140:	str	x1, [sp, #56]
 144:	ldrb	w0, [x0]
 148:	cmp	w0, #0x0
 14c:	b.ne	12c <lt_strlcat+0x12c>  // b.any
 150:	ldr	x0, [sp, #72]
 154:	ldp	x29, x30, [sp], #80
 158:	ret

000000000000015c <lt_strlcpy>:
 15c:	stp	x29, x30, [sp, #-80]!
 160:	mov	x29, sp
 164:	str	x0, [sp, #40]
 168:	str	x1, [sp, #32]
 16c:	str	x2, [sp, #24]
 170:	str	xzr, [sp, #72]
 174:	ldr	x0, [sp, #40]
 178:	cmp	x0, #0x0
 17c:	b.ne	1a0 <lt_strlcpy+0x44>  // b.any
 180:	adrp	x0, 0 <lt_strlcat>
 184:	add	x3, x0, #0x0
 188:	mov	w2, #0x69                  	// #105
 18c:	adrp	x0, 0 <lt_strlcat>
 190:	add	x1, x0, #0x0
 194:	adrp	x0, 0 <lt_strlcat>
 198:	add	x0, x0, #0x0
 19c:	bl	0 <__assert_fail>
 1a0:	ldr	x0, [sp, #32]
 1a4:	cmp	x0, #0x0
 1a8:	b.ne	1cc <lt_strlcpy+0x70>  // b.any
 1ac:	adrp	x0, 0 <lt_strlcat>
 1b0:	add	x3, x0, #0x0
 1b4:	mov	w2, #0x6a                  	// #106
 1b8:	adrp	x0, 0 <lt_strlcat>
 1bc:	add	x1, x0, #0x0
 1c0:	adrp	x0, 0 <lt_strlcat>
 1c4:	add	x0, x0, #0x0
 1c8:	bl	0 <__assert_fail>
 1cc:	ldr	x0, [sp, #24]
 1d0:	cmp	x0, #0x0
 1d4:	b.ne	1f8 <lt_strlcpy+0x9c>  // b.any
 1d8:	adrp	x0, 0 <lt_strlcat>
 1dc:	add	x3, x0, #0x0
 1e0:	mov	w2, #0x6b                  	// #107
 1e4:	adrp	x0, 0 <lt_strlcat>
 1e8:	add	x1, x0, #0x0
 1ec:	adrp	x0, 0 <lt_strlcat>
 1f0:	add	x0, x0, #0x0
 1f4:	bl	0 <__assert_fail>
 1f8:	ldr	x0, [sp, #40]
 1fc:	str	x0, [sp, #64]
 200:	ldr	x0, [sp, #32]
 204:	str	x0, [sp, #56]
 208:	str	xzr, [sp, #72]
 20c:	b	244 <lt_strlcpy+0xe8>
 210:	ldr	x0, [sp, #56]
 214:	ldrb	w1, [x0]
 218:	ldr	x0, [sp, #64]
 21c:	strb	w1, [x0]
 220:	ldr	x0, [sp, #72]
 224:	add	x0, x0, #0x1
 228:	str	x0, [sp, #72]
 22c:	ldr	x0, [sp, #64]
 230:	add	x0, x0, #0x1
 234:	str	x0, [sp, #64]
 238:	ldr	x0, [sp, #56]
 23c:	add	x0, x0, #0x1
 240:	str	x0, [sp, #56]
 244:	ldr	x0, [sp, #56]
 248:	ldrb	w0, [x0]
 24c:	cmp	w0, #0x0
 250:	b.eq	268 <lt_strlcpy+0x10c>  // b.none
 254:	ldr	x0, [sp, #24]
 258:	sub	x0, x0, #0x1
 25c:	ldr	x1, [sp, #72]
 260:	cmp	x1, x0
 264:	b.cc	210 <lt_strlcpy+0xb4>  // b.lo, b.ul, b.last
 268:	ldr	x1, [sp, #40]
 26c:	ldr	x0, [sp, #72]
 270:	add	x0, x1, x0
 274:	strb	wzr, [x0]
 278:	b	288 <lt_strlcpy+0x12c>
 27c:	ldr	x0, [sp, #72]
 280:	add	x0, x0, #0x1
 284:	str	x0, [sp, #72]
 288:	ldr	x0, [sp, #56]
 28c:	add	x1, x0, #0x1
 290:	str	x1, [sp, #56]
 294:	ldrb	w0, [x0]
 298:	cmp	w0, #0x0
 29c:	b.ne	27c <lt_strlcpy+0x120>  // b.any
 2a0:	ldr	x0, [sp, #72]
 2a4:	ldp	x29, x30, [sp], #80
 2a8:	ret

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <dlopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  10:	add	x0, x0, #0x0
  14:	ldr	x0, [x0]
  18:	cmp	x0, #0x0
  1c:	b.ne	38 <dlopen_LTX_get_vtable+0x38>  // b.any
  20:	mov	x0, #0x48                  	// #72
  24:	bl	0 <lt__zalloc>
  28:	mov	x1, x0
  2c:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  30:	add	x0, x0, #0x0
  34:	str	x1, [x0]
  38:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  3c:	add	x0, x0, #0x0
  40:	ldr	x0, [x0]
  44:	cmp	x0, #0x0
  48:	b.eq	100 <dlopen_LTX_get_vtable+0x100>  // b.none
  4c:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  50:	add	x0, x0, #0x0
  54:	ldr	x0, [x0]
  58:	ldr	x0, [x0]
  5c:	cmp	x0, #0x0
  60:	b.ne	100 <dlopen_LTX_get_vtable+0x100>  // b.any
  64:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  68:	add	x0, x0, #0x0
  6c:	ldr	x0, [x0]
  70:	adrp	x1, 0 <dlopen_LTX_get_vtable>
  74:	add	x1, x1, #0x0
  78:	str	x1, [x0]
  7c:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  80:	add	x0, x0, #0x0
  84:	ldr	x0, [x0]
  88:	adrp	x1, 0 <dlopen_LTX_get_vtable>
  8c:	add	x1, x1, #0x0
  90:	str	x1, [x0, #16]
  94:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  98:	add	x0, x0, #0x0
  9c:	ldr	x0, [x0]
  a0:	adrp	x1, 0 <dlopen_LTX_get_vtable>
  a4:	add	x1, x1, #0x0
  a8:	str	x1, [x0, #24]
  ac:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  b0:	add	x0, x0, #0x0
  b4:	ldr	x0, [x0]
  b8:	adrp	x1, 0 <dlopen_LTX_get_vtable>
  bc:	add	x1, x1, #0x0
  c0:	str	x1, [x0, #32]
  c4:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  c8:	add	x0, x0, #0x0
  cc:	ldr	x0, [x0]
  d0:	adrp	x1, 0 <dlopen_LTX_get_vtable>
  d4:	add	x1, x1, #0x0
  d8:	str	x1, [x0, #48]
  dc:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  e0:	add	x0, x0, #0x0
  e4:	ldr	x0, [x0]
  e8:	ldr	x1, [sp, #24]
  ec:	str	x1, [x0, #56]
  f0:	adrp	x0, 0 <dlopen_LTX_get_vtable>
  f4:	add	x0, x0, #0x0
  f8:	ldr	x0, [x0]
  fc:	str	wzr, [x0, #64]
 100:	adrp	x0, 0 <dlopen_LTX_get_vtable>
 104:	add	x0, x0, #0x0
 108:	ldr	x0, [x0]
 10c:	cmp	x0, #0x0
 110:	b.eq	144 <dlopen_LTX_get_vtable+0x144>  // b.none
 114:	adrp	x0, 0 <dlopen_LTX_get_vtable>
 118:	add	x0, x0, #0x0
 11c:	ldr	x0, [x0]
 120:	ldr	x0, [x0, #56]
 124:	ldr	x1, [sp, #24]
 128:	cmp	x1, x0
 12c:	b.eq	144 <dlopen_LTX_get_vtable+0x144>  // b.none
 130:	mov	w0, #0x3                   	// #3
 134:	bl	0 <lt__error_string>
 138:	bl	0 <lt__set_last_error>
 13c:	mov	x0, #0x0                   	// #0
 140:	b	150 <dlopen_LTX_get_vtable+0x150>
 144:	adrp	x0, 0 <dlopen_LTX_get_vtable>
 148:	add	x0, x0, #0x0
 14c:	ldr	x0, [x0]
 150:	ldp	x29, x30, [sp], #32
 154:	ret

0000000000000158 <vl_exit>:
 158:	sub	sp, sp, #0x10
 15c:	str	x0, [sp, #8]
 160:	adrp	x0, 0 <dlopen_LTX_get_vtable>
 164:	add	x0, x0, #0x0
 168:	str	xzr, [x0]
 16c:	mov	w0, #0x0                   	// #0
 170:	add	sp, sp, #0x10
 174:	ret

0000000000000178 <vm_open>:
 178:	stp	x29, x30, [sp, #-64]!
 17c:	mov	x29, sp
 180:	str	x0, [sp, #40]
 184:	str	x1, [sp, #32]
 188:	str	x2, [sp, #24]
 18c:	mov	w0, #0x1                   	// #1
 190:	str	w0, [sp, #60]
 194:	ldr	x0, [sp, #24]
 198:	cmp	x0, #0x0
 19c:	b.eq	1d8 <vm_open+0x60>  // b.none
 1a0:	ldr	x0, [sp, #24]
 1a4:	ldrb	w0, [x0]
 1a8:	and	w0, w0, #0x4
 1ac:	and	w0, w0, #0xff
 1b0:	cmp	w0, #0x0
 1b4:	b.eq	1c4 <vm_open+0x4c>  // b.none
 1b8:	ldr	w0, [sp, #60]
 1bc:	orr	w0, w0, #0x100
 1c0:	str	w0, [sp, #60]
 1c4:	ldr	x0, [sp, #24]
 1c8:	ldrb	w0, [x0]
 1cc:	and	w0, w0, #0x8
 1d0:	and	w0, w0, #0xff
 1d4:	cmp	w0, #0x0
 1d8:	ldr	w1, [sp, #60]
 1dc:	ldr	x0, [sp, #32]
 1e0:	bl	0 <dlopen>
 1e4:	str	x0, [sp, #48]
 1e8:	ldr	x0, [sp, #48]
 1ec:	cmp	x0, #0x0
 1f0:	b.ne	1fc <vm_open+0x84>  // b.any
 1f4:	bl	0 <dlerror>
 1f8:	bl	0 <lt__set_last_error>
 1fc:	ldr	x0, [sp, #48]
 200:	ldp	x29, x30, [sp], #64
 204:	ret

0000000000000208 <vm_close>:
 208:	stp	x29, x30, [sp, #-48]!
 20c:	mov	x29, sp
 210:	str	x0, [sp, #24]
 214:	str	x1, [sp, #16]
 218:	str	wzr, [sp, #44]
 21c:	ldr	x0, [sp, #16]
 220:	bl	0 <dlclose>
 224:	cmp	w0, #0x0
 228:	b.eq	240 <vm_close+0x38>  // b.none
 22c:	bl	0 <dlerror>
 230:	bl	0 <lt__set_last_error>
 234:	ldr	w0, [sp, #44]
 238:	add	w0, w0, #0x1
 23c:	str	w0, [sp, #44]
 240:	ldr	w0, [sp, #44]
 244:	ldp	x29, x30, [sp], #48
 248:	ret

000000000000024c <vm_sym>:
 24c:	stp	x29, x30, [sp, #-64]!
 250:	mov	x29, sp
 254:	str	x0, [sp, #40]
 258:	str	x1, [sp, #32]
 25c:	str	x2, [sp, #24]
 260:	ldr	x1, [sp, #24]
 264:	ldr	x0, [sp, #32]
 268:	bl	0 <dlsym>
 26c:	str	x0, [sp, #56]
 270:	ldr	x0, [sp, #56]
 274:	cmp	x0, #0x0
 278:	b.ne	284 <vm_sym+0x38>  // b.any
 27c:	bl	0 <dlerror>
 280:	bl	0 <lt__set_last_error>
 284:	ldr	x0, [sp, #56]
 288:	ldp	x29, x30, [sp], #64
 28c:	ret
