
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libffi.so.7.1.0_clang_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000018c8 <.init>:
    18c8:	stp	x29, x30, [sp, #-16]!
    18cc:	mov	x29, sp
    18d0:	bl	1b30 <unlink@plt+0x10>
    18d4:	ldp	x29, x30, [sp], #16
    18d8:	ret

Disassembly of section .plt:

00000000000018e0 <memcpy@plt-0x20>:
    18e0:	stp	x16, x30, [sp, #-16]!
    18e4:	adrp	x16, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xfe40>
    18e8:	ldr	x17, [x16, #4088]
    18ec:	add	x16, x16, #0xff8
    18f0:	br	x17
    18f4:	nop
    18f8:	nop
    18fc:	nop

0000000000001900 <memcpy@plt>:
    1900:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1904:	ldr	x17, [x16]
    1908:	add	x16, x16, #0x0
    190c:	br	x17

0000000000001910 <ffi_prep_closure_loc@plt>:
    1910:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1914:	ldr	x17, [x16, #8]
    1918:	add	x16, x16, #0x8
    191c:	br	x17

0000000000001920 <strlen@plt>:
    1920:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1924:	ldr	x17, [x16, #16]
    1928:	add	x16, x16, #0x10
    192c:	br	x17

0000000000001930 <__cxa_finalize@plt>:
    1930:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1934:	ldr	x17, [x16, #24]
    1938:	add	x16, x16, #0x18
    193c:	br	x17

0000000000001940 <statfs@plt>:
    1940:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1944:	ldr	x17, [x16, #32]
    1948:	add	x16, x16, #0x20
    194c:	br	x17

0000000000001950 <fclose@plt>:
    1950:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1954:	ldr	x17, [x16, #40]
    1958:	add	x16, x16, #0x28
    195c:	br	x17

0000000000001960 <fopen@plt>:
    1960:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1964:	ldr	x17, [x16, #48]
    1968:	add	x16, x16, #0x30
    196c:	br	x17

0000000000001970 <open@plt>:
    1970:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1974:	ldr	x17, [x16, #56]
    1978:	add	x16, x16, #0x38
    197c:	br	x17

0000000000001980 <strncmp@plt>:
    1980:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1984:	ldr	x17, [x16, #64]
    1988:	add	x16, x16, #0x40
    198c:	br	x17

0000000000001990 <memset@plt>:
    1990:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1994:	ldr	x17, [x16, #72]
    1998:	add	x16, x16, #0x48
    199c:	br	x17

00000000000019a0 <setmntent@plt>:
    19a0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19a4:	ldr	x17, [x16, #80]
    19a8:	add	x16, x16, #0x50
    19ac:	br	x17

00000000000019b0 <endmntent@plt>:
    19b0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19b4:	ldr	x17, [x16, #88]
    19b8:	add	x16, x16, #0x58
    19bc:	br	x17

00000000000019c0 <pthread_mutex_init@plt>:
    19c0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19c4:	ldr	x17, [x16, #96]
    19c8:	add	x16, x16, #0x60
    19cc:	br	x17

00000000000019d0 <close@plt>:
    19d0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19d4:	ldr	x17, [x16, #104]
    19d8:	add	x16, x16, #0x68
    19dc:	br	x17

00000000000019e0 <__gmon_start__@plt>:
    19e0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19e4:	ldr	x17, [x16, #112]
    19e8:	add	x16, x16, #0x70
    19ec:	br	x17

00000000000019f0 <write@plt>:
    19f0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19f4:	ldr	x17, [x16, #120]
    19f8:	add	x16, x16, #0x78
    19fc:	br	x17

0000000000001a00 <abort@plt>:
    1a00:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a04:	ldr	x17, [x16, #128]
    1a08:	add	x16, x16, #0x80
    1a0c:	br	x17

0000000000001a10 <mkostemp@plt>:
    1a10:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a14:	ldr	x17, [x16, #136]
    1a18:	add	x16, x16, #0x88
    1a1c:	br	x17

0000000000001a20 <access@plt>:
    1a20:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a24:	ldr	x17, [x16, #144]
    1a28:	add	x16, x16, #0x90
    1a2c:	br	x17

0000000000001a30 <mmap@plt>:
    1a30:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a34:	ldr	x17, [x16, #152]
    1a38:	add	x16, x16, #0x98
    1a3c:	br	x17

0000000000001a40 <free@plt>:
    1a40:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a44:	ldr	x17, [x16, #160]
    1a48:	add	x16, x16, #0xa0
    1a4c:	br	x17

0000000000001a50 <ffi_ptrarray_to_raw@plt>:
    1a50:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a54:	ldr	x17, [x16, #168]
    1a58:	add	x16, x16, #0xa8
    1a5c:	br	x17

0000000000001a60 <hasmntopt@plt>:
    1a60:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a64:	ldr	x17, [x16, #176]
    1a68:	add	x16, x16, #0xb0
    1a6c:	br	x17

0000000000001a70 <strchr@plt>:
    1a70:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a74:	ldr	x17, [x16, #184]
    1a78:	add	x16, x16, #0xb8
    1a7c:	br	x17

0000000000001a80 <munmap@plt>:
    1a80:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a84:	ldr	x17, [x16, #192]
    1a88:	add	x16, x16, #0xc0
    1a8c:	br	x17

0000000000001a90 <ffi_call@plt>:
    1a90:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a94:	ldr	x17, [x16, #200]
    1a98:	add	x16, x16, #0xc8
    1a9c:	br	x17

0000000000001aa0 <sysconf@plt>:
    1aa0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1aa4:	ldr	x17, [x16, #208]
    1aa8:	add	x16, x16, #0xd0
    1aac:	br	x17

0000000000001ab0 <getmntent_r@plt>:
    1ab0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ab4:	ldr	x17, [x16, #216]
    1ab8:	add	x16, x16, #0xd8
    1abc:	br	x17

0000000000001ac0 <ftruncate@plt>:
    1ac0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ac4:	ldr	x17, [x16, #224]
    1ac8:	add	x16, x16, #0xe0
    1acc:	br	x17

0000000000001ad0 <__errno_location@plt>:
    1ad0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ad4:	ldr	x17, [x16, #232]
    1ad8:	add	x16, x16, #0xe8
    1adc:	br	x17

0000000000001ae0 <getenv@plt>:
    1ae0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ae4:	ldr	x17, [x16, #240]
    1ae8:	add	x16, x16, #0xf0
    1aec:	br	x17

0000000000001af0 <pthread_mutex_lock@plt>:
    1af0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1af4:	ldr	x17, [x16, #248]
    1af8:	add	x16, x16, #0xf8
    1afc:	br	x17

0000000000001b00 <__getdelim@plt>:
    1b00:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b04:	ldr	x17, [x16, #256]
    1b08:	add	x16, x16, #0x100
    1b0c:	br	x17

0000000000001b10 <pthread_mutex_unlock@plt>:
    1b10:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b14:	ldr	x17, [x16, #264]
    1b18:	add	x16, x16, #0x108
    1b1c:	br	x17

0000000000001b20 <unlink@plt>:
    1b20:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b24:	ldr	x17, [x16, #272]
    1b28:	add	x16, x16, #0x110
    1b2c:	br	x17

Disassembly of section .text:

0000000000001b30 <ffi_prep_cif@@LIBFFI_BASE_7.0-0x2c8>:
    1b30:	adrp	x0, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xfe40>
    1b34:	ldr	x0, [x0, #4056]
    1b38:	cbz	x0, 1b40 <unlink@plt+0x20>
    1b3c:	b	19e0 <__gmon_start__@plt>
    1b40:	ret
    1b44:	nop
    1b48:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1b4c:	add	x0, x0, #0x158
    1b50:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    1b54:	add	x1, x1, #0x158
    1b58:	cmp	x1, x0
    1b5c:	b.eq	1b74 <unlink@plt+0x54>  // b.none
    1b60:	adrp	x1, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xfe40>
    1b64:	ldr	x1, [x1, #4040]
    1b68:	cbz	x1, 1b74 <unlink@plt+0x54>
    1b6c:	mov	x16, x1
    1b70:	br	x16
    1b74:	ret
    1b78:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1b7c:	add	x0, x0, #0x158
    1b80:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    1b84:	add	x1, x1, #0x158
    1b88:	sub	x1, x1, x0
    1b8c:	lsr	x2, x1, #63
    1b90:	add	x1, x2, x1, asr #3
    1b94:	cmp	xzr, x1, asr #1
    1b98:	asr	x1, x1, #1
    1b9c:	b.eq	1bb4 <unlink@plt+0x94>  // b.none
    1ba0:	adrp	x2, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xfe40>
    1ba4:	ldr	x2, [x2, #4064]
    1ba8:	cbz	x2, 1bb4 <unlink@plt+0x94>
    1bac:	mov	x16, x2
    1bb0:	br	x16
    1bb4:	ret
    1bb8:	stp	x29, x30, [sp, #-32]!
    1bbc:	mov	x29, sp
    1bc0:	str	x19, [sp, #16]
    1bc4:	adrp	x19, 17000 <memcpy@GLIBC_2.17>
    1bc8:	ldrb	w0, [x19, #344]
    1bcc:	cbnz	w0, 1bf4 <unlink@plt+0xd4>
    1bd0:	adrp	x0, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xfe40>
    1bd4:	ldr	x0, [x0, #4048]
    1bd8:	cbz	x0, 1be8 <unlink@plt+0xc8>
    1bdc:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1be0:	ldr	x0, [x0, #280]
    1be4:	bl	1930 <__cxa_finalize@plt>
    1be8:	bl	1b48 <unlink@plt+0x28>
    1bec:	mov	w0, #0x1                   	// #1
    1bf0:	strb	w0, [x19, #344]
    1bf4:	ldr	x19, [sp, #16]
    1bf8:	ldp	x29, x30, [sp], #32
    1bfc:	ret
    1c00:	b	1b78 <unlink@plt+0x58>
    1c04:	stp	x29, x30, [sp, #-48]!
    1c08:	stp	x22, x21, [sp, #16]
    1c0c:	stp	x20, x19, [sp, #32]
    1c10:	mov	x29, sp
    1c14:	cmp	w1, #0x1
    1c18:	b.ne	1cc4 <unlink@plt+0x1a4>  // b.any
    1c1c:	mov	w8, #0x1                   	// #1
    1c20:	stp	x6, x5, [x0, #8]
    1c24:	stp	w8, w4, [x0]
    1c28:	str	wzr, [x0, #28]
    1c2c:	ldr	x8, [x5]
    1c30:	mov	x20, x6
    1c34:	mov	w21, w4
    1c38:	mov	x19, x0
    1c3c:	cbz	x8, 1cd8 <unlink@plt+0x1b8>
    1c40:	ldrh	w8, [x5, #10]
    1c44:	cmp	w8, #0xd
    1c48:	cset	w8, eq  // eq = none
    1c4c:	lsl	w22, w8, #3
    1c50:	cbnz	w21, 1ca0 <unlink@plt+0x180>
    1c54:	str	w22, [x19, #24]
    1c58:	mov	x0, x19
    1c5c:	ldp	x20, x19, [sp, #32]
    1c60:	ldp	x22, x21, [sp, #16]
    1c64:	ldp	x29, x30, [sp], #48
    1c68:	b	5228 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1424>
    1c6c:	ldrh	w9, [x0, #8]
    1c70:	sub	w10, w22, #0x1
    1c74:	sub	w8, w8, #0x1
    1c78:	orr	w8, w8, #0x7
    1c7c:	sub	w9, w9, #0x1
    1c80:	orr	w10, w9, w10
    1c84:	tst	w9, w22
    1c88:	csinc	w9, w22, w10, eq  // eq = none
    1c8c:	add	w8, w8, w9
    1c90:	subs	w21, w21, #0x1
    1c94:	add	w22, w8, #0x1
    1c98:	add	x20, x20, #0x8
    1c9c:	b.eq	1c54 <unlink@plt+0x134>  // b.none
    1ca0:	ldr	x0, [x20]
    1ca4:	ldr	x8, [x0]
    1ca8:	cbnz	x8, 1c6c <unlink@plt+0x14c>
    1cac:	mov	x1, xzr
    1cb0:	bl	1d08 <unlink@plt+0x1e8>
    1cb4:	cbnz	w0, 1ce8 <unlink@plt+0x1c8>
    1cb8:	ldr	x0, [x20]
    1cbc:	ldr	x8, [x0]
    1cc0:	b	1c6c <unlink@plt+0x14c>
    1cc4:	mov	w0, #0x2                   	// #2
    1cc8:	ldp	x20, x19, [sp, #32]
    1ccc:	ldp	x22, x21, [sp, #16]
    1cd0:	ldp	x29, x30, [sp], #48
    1cd4:	ret
    1cd8:	mov	x0, x5
    1cdc:	mov	x1, xzr
    1ce0:	bl	1d08 <unlink@plt+0x1e8>
    1ce4:	cbz	w0, 1cfc <unlink@plt+0x1dc>
    1ce8:	mov	w0, #0x1                   	// #1
    1cec:	ldp	x20, x19, [sp, #32]
    1cf0:	ldp	x22, x21, [sp, #16]
    1cf4:	ldp	x29, x30, [sp], #48
    1cf8:	ret
    1cfc:	ldp	x20, x5, [x19, #8]
    1d00:	ldr	w21, [x19, #4]
    1d04:	b	1c40 <unlink@plt+0x120>
    1d08:	stp	x29, x30, [sp, #-48]!
    1d0c:	str	x21, [sp, #16]
    1d10:	stp	x20, x19, [sp, #32]
    1d14:	mov	x29, sp
    1d18:	cbz	x0, 1de4 <unlink@plt+0x2c4>
    1d1c:	ldr	x9, [x0, #16]
    1d20:	mov	x19, x0
    1d24:	cbz	x9, 1de4 <unlink@plt+0x2c4>
    1d28:	str	xzr, [x19]
    1d2c:	strh	wzr, [x19, #8]
    1d30:	ldr	x0, [x9]
    1d34:	cbz	x0, 1dbc <unlink@plt+0x29c>
    1d38:	mov	x20, x1
    1d3c:	mov	x8, xzr
    1d40:	add	x21, x9, #0x8
    1d44:	b	1d6c <unlink@plt+0x24c>
    1d48:	ldrh	w11, [x19, #8]
    1d4c:	ldr	x10, [x0]
    1d50:	cmp	w11, w9
    1d54:	add	x8, x8, x10
    1d58:	csel	w9, w11, w9, hi  // hi = pmore
    1d5c:	str	x8, [x19]
    1d60:	strh	w9, [x19, #8]
    1d64:	ldr	x0, [x21], #8
    1d68:	cbz	x0, 1db0 <unlink@plt+0x290>
    1d6c:	ldr	x9, [x0]
    1d70:	cbnz	x9, 1d88 <unlink@plt+0x268>
    1d74:	mov	x1, xzr
    1d78:	bl	1d08 <unlink@plt+0x1e8>
    1d7c:	cbnz	w0, 1de4 <unlink@plt+0x2c4>
    1d80:	ldr	x8, [x19]
    1d84:	ldur	x0, [x21, #-8]
    1d88:	ldrh	w9, [x0, #8]
    1d8c:	sub	x8, x8, #0x1
    1d90:	sub	x10, x9, #0x1
    1d94:	orr	x8, x10, x8
    1d98:	add	x8, x8, #0x1
    1d9c:	str	x8, [x19]
    1da0:	cbz	x20, 1d48 <unlink@plt+0x228>
    1da4:	str	x8, [x20], #8
    1da8:	ldr	x8, [x19]
    1dac:	b	1d48 <unlink@plt+0x228>
    1db0:	sub	x10, x8, #0x1
    1db4:	sub	x8, x9, #0x1
    1db8:	b	1dc4 <unlink@plt+0x2a4>
    1dbc:	mov	x8, #0xffffffffffffffff    	// #-1
    1dc0:	mov	x10, #0xffffffffffffffff    	// #-1
    1dc4:	orr	x8, x8, x10
    1dc8:	adds	x8, x8, #0x1
    1dcc:	cset	w0, cs  // cs = hs, nlast
    1dd0:	str	x8, [x19]
    1dd4:	ldp	x20, x19, [sp, #32]
    1dd8:	ldr	x21, [sp, #16]
    1ddc:	ldp	x29, x30, [sp], #48
    1de0:	ret
    1de4:	mov	w0, #0x1                   	// #1
    1de8:	ldp	x20, x19, [sp, #32]
    1dec:	ldr	x21, [sp, #16]
    1df0:	ldp	x29, x30, [sp], #48
    1df4:	ret

0000000000001df8 <ffi_prep_cif@@LIBFFI_BASE_7.0>:
    1df8:	mov	x6, x4
    1dfc:	mov	w4, w2
    1e00:	mov	x5, x3
    1e04:	b	1c04 <unlink@plt+0xe4>

0000000000001e08 <ffi_prep_cif_var@@LIBFFI_BASE_7.0>:
    1e08:	mov	x6, x5
    1e0c:	mov	x5, x4
    1e10:	mov	w4, w3
    1e14:	b	1c04 <unlink@plt+0xe4>

0000000000001e18 <ffi_prep_closure@@LIBFFI_CLOSURE_7.0>:
    1e18:	mov	x4, x0
    1e1c:	b	1910 <ffi_prep_closure_loc@plt>

0000000000001e20 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1>:
    1e20:	cmp	w0, #0x1
    1e24:	b.ne	1e40 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x20>  // b.any
    1e28:	ldrh	w8, [x1, #10]
    1e2c:	cmp	w8, #0xd
    1e30:	b.ne	1e48 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x28>  // b.any
    1e34:	mov	x0, x1
    1e38:	mov	x1, x2
    1e3c:	b	1d08 <unlink@plt+0x1e8>
    1e40:	mov	w0, #0x2                   	// #2
    1e44:	ret
    1e48:	mov	w0, #0x1                   	// #1
    1e4c:	ret

0000000000001e50 <ffi_raw_size@@LIBFFI_BASE_7.0>:
    1e50:	ldr	w8, [x0, #4]
    1e54:	subs	w8, w8, #0x1
    1e58:	b.mi	1f00 <ffi_raw_size@@LIBFFI_BASE_7.0+0xb0>  // b.first
    1e5c:	ldr	x14, [x0, #8]
    1e60:	cbz	w8, 1f08 <ffi_raw_size@@LIBFFI_BASE_7.0+0xb8>
    1e64:	mov	w9, w8
    1e68:	add	x12, x9, #0x1
    1e6c:	and	x13, x12, #0x1fffffffe
    1e70:	mov	x10, xzr
    1e74:	mov	x11, xzr
    1e78:	sub	w8, w8, w13
    1e7c:	add	x9, x14, x13, lsl #3
    1e80:	add	x14, x14, #0x8
    1e84:	mov	x15, x13
    1e88:	b	1ec8 <ffi_raw_size@@LIBFFI_BASE_7.0+0x78>
    1e8c:	sub	x18, x0, #0x1
    1e90:	sub	x0, x1, #0x1
    1e94:	cmp	w17, #0xd
    1e98:	orr	x17, x18, #0x7
    1e9c:	add	x1, x10, #0x8
    1ea0:	orr	x18, x0, #0x7
    1ea4:	add	x10, x10, x17
    1ea8:	add	x2, x11, #0x8
    1eac:	add	x11, x11, x18
    1eb0:	csinc	x10, x1, x10, eq  // eq = none
    1eb4:	cmp	w16, #0xd
    1eb8:	csinc	x11, x2, x11, eq  // eq = none
    1ebc:	subs	x15, x15, #0x2
    1ec0:	add	x14, x14, #0x10
    1ec4:	b.eq	1ef0 <ffi_raw_size@@LIBFFI_BASE_7.0+0xa0>  // b.none
    1ec8:	ldp	x1, x18, [x14, #-8]
    1ecc:	ldrh	w17, [x1, #10]
    1ed0:	ldrh	w16, [x18, #10]
    1ed4:	cmp	w17, #0xd
    1ed8:	b.eq	1ee0 <ffi_raw_size@@LIBFFI_BASE_7.0+0x90>  // b.none
    1edc:	ldr	x0, [x1]
    1ee0:	cmp	w16, #0xd
    1ee4:	b.eq	1e8c <ffi_raw_size@@LIBFFI_BASE_7.0+0x3c>  // b.none
    1ee8:	ldr	x1, [x18]
    1eec:	b	1e8c <ffi_raw_size@@LIBFFI_BASE_7.0+0x3c>
    1ef0:	cmp	x12, x13
    1ef4:	add	x0, x11, x10
    1ef8:	b.ne	1f34 <ffi_raw_size@@LIBFFI_BASE_7.0+0xe4>  // b.any
    1efc:	b	1f54 <ffi_raw_size@@LIBFFI_BASE_7.0+0x104>
    1f00:	mov	x0, xzr
    1f04:	ret
    1f08:	mov	x0, xzr
    1f0c:	mov	x9, x14
    1f10:	b	1f34 <ffi_raw_size@@LIBFFI_BASE_7.0+0xe4>
    1f14:	ldr	x10, [x10]
    1f18:	sub	x10, x10, #0x1
    1f1c:	orr	x10, x10, #0x7
    1f20:	add	x10, x0, x10
    1f24:	add	x0, x10, #0x1
    1f28:	subs	w8, w8, #0x1
    1f2c:	add	x9, x9, #0x8
    1f30:	b.mi	1f54 <ffi_raw_size@@LIBFFI_BASE_7.0+0x104>  // b.first
    1f34:	ldr	x10, [x9]
    1f38:	ldrh	w11, [x10, #10]
    1f3c:	cmp	w11, #0xd
    1f40:	b.ne	1f14 <ffi_raw_size@@LIBFFI_BASE_7.0+0xc4>  // b.any
    1f44:	add	x0, x0, #0x8
    1f48:	subs	w8, w8, #0x1
    1f4c:	add	x9, x9, #0x8
    1f50:	b.pl	1f34 <ffi_raw_size@@LIBFFI_BASE_7.0+0xe4>  // b.nfrst
    1f54:	ret

0000000000001f58 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    1f58:	ldr	w8, [x0, #4]
    1f5c:	cbz	w8, 1fc0 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>
    1f60:	ldr	x9, [x0, #8]
    1f64:	mov	x10, xzr
    1f68:	b	1f80 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x28>
    1f6c:	ldr	x11, [x1], #8
    1f70:	str	x11, [x2], #8
    1f74:	add	x10, x10, #0x1
    1f78:	cmp	w10, w8
    1f7c:	b.cs	1fc0 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>  // b.hs, b.nlast
    1f80:	ldr	x11, [x9, x10, lsl #3]
    1f84:	ldrh	w11, [x11, #10]
    1f88:	cmp	w11, #0xf
    1f8c:	b.eq	1f6c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.none
    1f90:	cmp	w11, #0xd
    1f94:	b.eq	1f6c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.none
    1f98:	str	x1, [x2], #8
    1f9c:	ldr	x11, [x9, x10, lsl #3]
    1fa0:	ldr	x11, [x11]
    1fa4:	sub	x11, x11, #0x1
    1fa8:	orr	x11, x11, #0x7
    1fac:	add	x11, x11, x1
    1fb0:	add	x1, x11, #0x1
    1fb4:	add	x10, x10, #0x1
    1fb8:	cmp	w10, w8
    1fbc:	b.cc	1f80 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x28>  // b.lo, b.ul, b.last
    1fc0:	ret

0000000000001fc4 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    1fc4:	stp	x29, x30, [sp, #-64]!
    1fc8:	stp	x24, x23, [sp, #16]
    1fcc:	stp	x22, x21, [sp, #32]
    1fd0:	stp	x20, x19, [sp, #48]
    1fd4:	ldr	w8, [x0, #4]
    1fd8:	mov	x29, sp
    1fdc:	cbz	w8, 20dc <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x118>
    1fe0:	ldr	x23, [x0, #8]
    1fe4:	adrp	x24, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    1fe8:	mov	x19, x2
    1fec:	mov	x20, x0
    1ff0:	mov	x21, x1
    1ff4:	mov	x22, xzr
    1ff8:	add	x24, x24, #0x1d8
    1ffc:	b	203c <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x78>
    2000:	ldr	x1, [x21]
    2004:	ldr	x2, [x8]
    2008:	mov	x0, x19
    200c:	bl	1900 <memcpy@plt>
    2010:	ldr	x8, [x23, x22, lsl #3]
    2014:	ldr	x8, [x8]
    2018:	sub	x8, x8, #0x1
    201c:	orr	x8, x8, #0x7
    2020:	add	x8, x8, x19
    2024:	add	x19, x8, #0x1
    2028:	ldr	w8, [x20, #4]
    202c:	add	x22, x22, #0x1
    2030:	add	x21, x21, #0x8
    2034:	cmp	w22, w8
    2038:	b.cs	20dc <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x118>  // b.hs, b.nlast
    203c:	ldr	x8, [x23, x22, lsl #3]
    2040:	ldrh	w9, [x8, #10]
    2044:	sub	w9, w9, #0x5
    2048:	cmp	w9, #0xa
    204c:	b.hi	2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>  // b.pmore
    2050:	adr	x10, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>
    2054:	ldrb	w11, [x24, x9]
    2058:	add	x10, x10, x11, lsl #2
    205c:	br	x10
    2060:	ldr	x8, [x21]
    2064:	str	x8, [x19], #8
    2068:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    206c:	ldr	x8, [x21]
    2070:	ldrb	w8, [x8]
    2074:	str	x8, [x19], #8
    2078:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    207c:	ldr	x8, [x21]
    2080:	ldrsb	x8, [x8]
    2084:	str	x8, [x19], #8
    2088:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    208c:	ldr	x8, [x21]
    2090:	ldrh	w8, [x8]
    2094:	str	x8, [x19], #8
    2098:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    209c:	ldr	x8, [x21]
    20a0:	ldrsh	x8, [x8]
    20a4:	str	x8, [x19], #8
    20a8:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20ac:	ldr	x8, [x21]
    20b0:	ldr	w8, [x8]
    20b4:	str	x8, [x19], #8
    20b8:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20bc:	ldr	x8, [x21]
    20c0:	ldrsw	x8, [x8]
    20c4:	str	x8, [x19], #8
    20c8:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20cc:	ldr	x8, [x21]
    20d0:	ldr	x8, [x8]
    20d4:	str	x8, [x19], #8
    20d8:	b	2028 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20dc:	ldp	x20, x19, [sp, #48]
    20e0:	ldp	x22, x21, [sp, #32]
    20e4:	ldp	x24, x23, [sp, #16]
    20e8:	ldp	x29, x30, [sp], #64
    20ec:	ret

00000000000020f0 <ffi_raw_call@@LIBFFI_BASE_7.0>:
    20f0:	stp	x29, x30, [sp, #-16]!
    20f4:	mov	x29, sp
    20f8:	ldr	w9, [x0, #4]
    20fc:	mov	x8, sp
    2100:	lsl	x10, x9, #3
    2104:	add	x10, x10, #0xf
    2108:	and	x10, x10, #0xffffffff0
    210c:	sub	x8, x8, x10
    2110:	mov	sp, x8
    2114:	cbz	w9, 2174 <ffi_raw_call@@LIBFFI_BASE_7.0+0x84>
    2118:	ldr	x10, [x0, #8]
    211c:	mov	x11, x8
    2120:	b	2138 <ffi_raw_call@@LIBFFI_BASE_7.0+0x48>
    2124:	ldr	x12, [x3], #8
    2128:	str	x12, [x11], #8
    212c:	add	x10, x10, #0x8
    2130:	subs	w9, w9, #0x1
    2134:	b.eq	2174 <ffi_raw_call@@LIBFFI_BASE_7.0+0x84>  // b.none
    2138:	ldr	x12, [x10]
    213c:	ldrh	w12, [x12, #10]
    2140:	cmp	w12, #0xf
    2144:	b.eq	2124 <ffi_raw_call@@LIBFFI_BASE_7.0+0x34>  // b.none
    2148:	cmp	w12, #0xd
    214c:	b.eq	2124 <ffi_raw_call@@LIBFFI_BASE_7.0+0x34>  // b.none
    2150:	str	x3, [x11], #8
    2154:	ldr	x12, [x10], #8
    2158:	ldr	x12, [x12]
    215c:	sub	x12, x12, #0x1
    2160:	orr	x12, x12, #0x7
    2164:	add	x12, x12, x3
    2168:	add	x3, x12, #0x1
    216c:	subs	w9, w9, #0x1
    2170:	b.ne	2138 <ffi_raw_call@@LIBFFI_BASE_7.0+0x48>  // b.any
    2174:	mov	x3, x8
    2178:	bl	1a90 <ffi_call@plt>
    217c:	mov	sp, x29
    2180:	ldp	x29, x30, [sp], #16
    2184:	ret

0000000000002188 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    2188:	stp	x29, x30, [sp, #-48]!
    218c:	str	x21, [sp, #16]
    2190:	stp	x20, x19, [sp, #32]
    2194:	mov	x29, sp
    2198:	mov	x20, x2
    219c:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>
    21a0:	mov	x19, x3
    21a4:	add	x2, x2, #0x1dc
    21a8:	mov	x3, x4
    21ac:	mov	x21, x0
    21b0:	bl	1910 <ffi_prep_closure_loc@plt>
    21b4:	cbz	w0, 21c8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x40>
    21b8:	ldp	x20, x19, [sp, #32]
    21bc:	ldr	x21, [sp, #16]
    21c0:	ldp	x29, x30, [sp], #48
    21c4:	ret
    21c8:	stp	x20, x19, [x21, #48]
    21cc:	ldp	x20, x19, [sp, #32]
    21d0:	ldr	x21, [sp, #16]
    21d4:	ldp	x29, x30, [sp], #48
    21d8:	ret
    21dc:	stp	x29, x30, [sp, #-48]!
    21e0:	stp	x22, x21, [sp, #16]
    21e4:	stp	x20, x19, [sp, #32]
    21e8:	mov	x29, sp
    21ec:	ldr	w8, [x0, #4]
    21f0:	mov	x19, x3
    21f4:	mov	x20, x0
    21f8:	mov	x21, x1
    21fc:	subs	w8, w8, #0x1
    2200:	b.mi	22a8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x120>  // b.first
    2204:	ldr	x14, [x20, #8]
    2208:	mov	x10, xzr
    220c:	cbz	w8, 22b0 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x128>
    2210:	mov	w9, w8
    2214:	add	x12, x9, #0x1
    2218:	and	x13, x12, #0x1fffffffe
    221c:	mov	x11, xzr
    2220:	sub	w8, w8, w13
    2224:	add	x9, x14, x13, lsl #3
    2228:	add	x14, x14, #0x8
    222c:	mov	x15, x13
    2230:	b	2270 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xe8>
    2234:	sub	x18, x0, #0x1
    2238:	sub	x0, x1, #0x1
    223c:	cmp	w17, #0xd
    2240:	orr	x17, x18, #0x7
    2244:	add	x1, x10, #0x8
    2248:	orr	x18, x0, #0x7
    224c:	add	x10, x10, x17
    2250:	add	x3, x11, #0x8
    2254:	add	x11, x11, x18
    2258:	csinc	x10, x1, x10, eq  // eq = none
    225c:	cmp	w16, #0xd
    2260:	csinc	x11, x3, x11, eq  // eq = none
    2264:	subs	x15, x15, #0x2
    2268:	add	x14, x14, #0x10
    226c:	b.eq	2298 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x110>  // b.none
    2270:	ldp	x1, x18, [x14, #-8]
    2274:	ldrh	w17, [x1, #10]
    2278:	ldrh	w16, [x18, #10]
    227c:	cmp	w17, #0xd
    2280:	b.eq	2288 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x100>  // b.none
    2284:	ldr	x0, [x1]
    2288:	cmp	w16, #0xd
    228c:	b.eq	2234 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xac>  // b.none
    2290:	ldr	x1, [x18]
    2294:	b	2234 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xac>
    2298:	cmp	x12, x13
    229c:	add	x10, x11, x10
    22a0:	b.ne	22d8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x150>  // b.any
    22a4:	b	22f8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x170>
    22a8:	mov	x10, xzr
    22ac:	b	22f8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x170>
    22b0:	mov	x9, x14
    22b4:	b	22d8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x150>
    22b8:	ldr	x11, [x11]
    22bc:	sub	x11, x11, #0x1
    22c0:	orr	x11, x11, #0x7
    22c4:	add	x10, x10, x11
    22c8:	add	x10, x10, #0x1
    22cc:	subs	w8, w8, #0x1
    22d0:	add	x9, x9, #0x8
    22d4:	b.mi	22f8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x170>  // b.first
    22d8:	ldr	x11, [x9]
    22dc:	ldrh	w12, [x11, #10]
    22e0:	cmp	w12, #0xd
    22e4:	b.ne	22b8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x130>  // b.any
    22e8:	add	x10, x10, #0x8
    22ec:	subs	w8, w8, #0x1
    22f0:	add	x9, x9, #0x8
    22f4:	b.pl	22d8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x150>  // b.nfrst
    22f8:	add	x9, x10, #0xf
    22fc:	mov	x8, sp
    2300:	and	x9, x9, #0xfffffffffffffff0
    2304:	sub	x22, x8, x9
    2308:	mov	sp, x22
    230c:	mov	x0, x20
    2310:	mov	x1, x2
    2314:	mov	x2, x22
    2318:	bl	1a50 <ffi_ptrarray_to_raw@plt>
    231c:	ldp	x8, x3, [x19, #48]
    2320:	mov	x0, x20
    2324:	mov	x1, x21
    2328:	mov	x2, x22
    232c:	blr	x8
    2330:	mov	sp, x29
    2334:	ldp	x20, x19, [sp, #32]
    2338:	ldp	x22, x21, [sp, #16]
    233c:	ldp	x29, x30, [sp], #48
    2340:	ret

0000000000002344 <ffi_prep_raw_closure@@LIBFFI_CLOSURE_7.0>:
    2344:	stp	x29, x30, [sp, #-48]!
    2348:	str	x21, [sp, #16]
    234c:	stp	x20, x19, [sp, #32]
    2350:	mov	x29, sp
    2354:	mov	x20, x2
    2358:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>
    235c:	mov	x19, x3
    2360:	add	x2, x2, #0x1dc
    2364:	mov	x3, x0
    2368:	mov	x4, x0
    236c:	mov	x21, x0
    2370:	bl	1910 <ffi_prep_closure_loc@plt>
    2374:	cbz	w0, 2388 <ffi_prep_raw_closure@@LIBFFI_CLOSURE_7.0+0x44>
    2378:	ldp	x20, x19, [sp, #32]
    237c:	ldr	x21, [sp, #16]
    2380:	ldp	x29, x30, [sp], #48
    2384:	ret
    2388:	stp	x20, x19, [x21, #48]
    238c:	ldp	x20, x19, [sp, #32]
    2390:	ldr	x21, [sp, #16]
    2394:	ldp	x29, x30, [sp], #48
    2398:	ret

000000000000239c <ffi_java_raw_size@@LIBFFI_BASE_7.0>:
    239c:	stp	x29, x30, [sp, #-16]!
    23a0:	ldr	w9, [x0, #4]
    23a4:	mov	x29, sp
    23a8:	subs	w9, w9, #0x1
    23ac:	b.mi	2410 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x74>  // b.first
    23b0:	mov	x8, x0
    23b4:	ldr	x8, [x8, #8]
    23b8:	adrp	x10, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    23bc:	mov	x0, xzr
    23c0:	add	x10, x10, #0x1e3
    23c4:	b	23dc <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x40>
    23c8:	mov	w11, #0x8                   	// #8
    23cc:	add	x0, x0, x11
    23d0:	subs	w9, w9, #0x1
    23d4:	add	x8, x8, #0x8
    23d8:	b.mi	2408 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x6c>  // b.first
    23dc:	ldr	x11, [x8]
    23e0:	ldrh	w11, [x11, #10]
    23e4:	sub	w11, w11, #0x3
    23e8:	cmp	w11, #0xc
    23ec:	b.hi	23c8 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x2c>  // b.pmore
    23f0:	adr	x12, 23c8 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x2c>
    23f4:	ldrb	w13, [x10, x11]
    23f8:	add	x12, x12, x13, lsl #2
    23fc:	mov	w11, #0x10                  	// #16
    2400:	br	x12
    2404:	bl	1a00 <abort@plt>
    2408:	ldp	x29, x30, [sp], #16
    240c:	ret
    2410:	mov	x0, xzr
    2414:	ldp	x29, x30, [sp], #16
    2418:	ret

000000000000241c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    241c:	stp	x29, x30, [sp, #-16]!
    2420:	ldr	w8, [x0, #4]
    2424:	mov	x29, sp
    2428:	cbz	w8, 2484 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>
    242c:	ldr	x9, [x0, #8]
    2430:	mov	x10, xzr
    2434:	b	244c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x30>
    2438:	str	x1, [x2, x10, lsl #3]
    243c:	add	x1, x1, #0x10
    2440:	add	x10, x10, #0x1
    2444:	cmp	w10, w8
    2448:	b.cs	2484 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>  // b.hs, b.nlast
    244c:	ldr	x11, [x9, x10, lsl #3]
    2450:	ldrh	w11, [x11, #10]
    2454:	sub	w12, w11, #0xb
    2458:	cmp	w12, #0x2
    245c:	ccmp	w11, #0x3, #0x4, cs  // cs = hs, nlast
    2460:	b.eq	2438 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x1c>  // b.none
    2464:	cmp	w11, #0xf
    2468:	b.eq	248c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x70>  // b.none
    246c:	add	x11, x1, #0x8
    2470:	str	x1, [x2, x10, lsl #3]
    2474:	mov	x1, x11
    2478:	add	x10, x10, #0x1
    247c:	cmp	w10, w8
    2480:	b.cc	244c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x30>  // b.lo, b.ul, b.last
    2484:	ldp	x29, x30, [sp], #16
    2488:	ret
    248c:	bl	1a00 <abort@plt>

0000000000002490 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    2490:	ldr	w8, [x0, #4]
    2494:	cbz	w8, 2554 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc4>
    2498:	ldr	x9, [x0, #8]
    249c:	adrp	x10, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    24a0:	mov	x8, xzr
    24a4:	add	x10, x10, #0x1f0
    24a8:	b	24c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    24ac:	ldr	x11, [x1, x8, lsl #3]
    24b0:	ldr	x11, [x11]
    24b4:	str	x11, [x2], #8
    24b8:	ldr	w11, [x0, #4]
    24bc:	add	x8, x8, #0x1
    24c0:	cmp	w8, w11
    24c4:	b.cs	2554 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc4>  // b.hs, b.nlast
    24c8:	ldr	x11, [x9, x8, lsl #3]
    24cc:	ldrh	w11, [x11, #10]
    24d0:	sub	w11, w11, #0x2
    24d4:	cmp	w11, #0xc
    24d8:	b.hi	24b8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x28>  // b.pmore
    24dc:	adr	x12, 24ac <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x1c>
    24e0:	ldrb	w13, [x10, x11]
    24e4:	add	x12, x12, x13, lsl #2
    24e8:	br	x12
    24ec:	ldr	x11, [x1, x8, lsl #3]
    24f0:	ldr	x11, [x11]
    24f4:	str	x11, [x2], #16
    24f8:	b	24b8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x28>
    24fc:	ldr	x11, [x1, x8, lsl #3]
    2500:	ldr	w11, [x11]
    2504:	str	w11, [x2], #8
    2508:	b	24b8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x28>
    250c:	ldr	x11, [x1, x8, lsl #3]
    2510:	ldrb	w11, [x11]
    2514:	b	24b4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2518:	ldr	x11, [x1, x8, lsl #3]
    251c:	ldrsb	x11, [x11]
    2520:	b	24b4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2524:	ldr	x11, [x1, x8, lsl #3]
    2528:	ldrh	w11, [x11]
    252c:	b	24b4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2530:	ldr	x11, [x1, x8, lsl #3]
    2534:	ldrsh	x11, [x11]
    2538:	b	24b4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    253c:	ldr	x11, [x1, x8, lsl #3]
    2540:	ldr	w11, [x11]
    2544:	b	24b4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2548:	ldr	x11, [x1, x8, lsl #3]
    254c:	ldrsw	x11, [x11]
    2550:	b	24b4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2554:	ret

0000000000002558 <ffi_java_raw_call@@LIBFFI_BASE_7.0>:
    2558:	stp	x29, x30, [sp, #-16]!
    255c:	mov	x29, sp
    2560:	ldr	w9, [x0, #4]
    2564:	mov	x8, sp
    2568:	lsl	x10, x9, #3
    256c:	add	x10, x10, #0xf
    2570:	and	x10, x10, #0xffffffff0
    2574:	sub	x8, x8, x10
    2578:	mov	sp, x8
    257c:	cbz	w9, 25d8 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x80>
    2580:	ldr	x10, [x0, #8]
    2584:	mov	x11, x8
    2588:	b	25a0 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x48>
    258c:	str	x3, [x11], #8
    2590:	add	x3, x3, #0x10
    2594:	add	x10, x10, #0x8
    2598:	subs	w9, w9, #0x1
    259c:	b.eq	25d8 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x80>  // b.none
    25a0:	ldr	x12, [x10]
    25a4:	ldrh	w12, [x12, #10]
    25a8:	sub	w13, w12, #0xb
    25ac:	cmp	w13, #0x2
    25b0:	ccmp	w12, #0x3, #0x4, cs  // cs = hs, nlast
    25b4:	b.eq	258c <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x34>  // b.none
    25b8:	cmp	w12, #0xf
    25bc:	b.eq	25ec <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x94>  // b.none
    25c0:	add	x12, x3, #0x8
    25c4:	str	x3, [x11], #8
    25c8:	mov	x3, x12
    25cc:	add	x10, x10, #0x8
    25d0:	subs	w9, w9, #0x1
    25d4:	b.ne	25a0 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x48>  // b.any
    25d8:	mov	x3, x8
    25dc:	bl	1a90 <ffi_call@plt>
    25e0:	mov	sp, x29
    25e4:	ldp	x29, x30, [sp], #16
    25e8:	ret
    25ec:	bl	1a00 <abort@plt>

00000000000025f0 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    25f0:	stp	x29, x30, [sp, #-48]!
    25f4:	str	x21, [sp, #16]
    25f8:	stp	x20, x19, [sp, #32]
    25fc:	mov	x29, sp
    2600:	mov	x20, x2
    2604:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>
    2608:	mov	x19, x3
    260c:	add	x2, x2, #0x644
    2610:	mov	x3, x4
    2614:	mov	x21, x0
    2618:	bl	1910 <ffi_prep_closure_loc@plt>
    261c:	cbz	w0, 2630 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x40>
    2620:	ldp	x20, x19, [sp, #32]
    2624:	ldr	x21, [sp, #16]
    2628:	ldp	x29, x30, [sp], #48
    262c:	ret
    2630:	stp	x20, x19, [x21, #48]
    2634:	ldp	x20, x19, [sp, #32]
    2638:	ldr	x21, [sp, #16]
    263c:	ldp	x29, x30, [sp], #48
    2640:	ret
    2644:	stp	x29, x30, [sp, #-16]!
    2648:	mov	x29, sp
    264c:	ldr	w9, [x0, #4]
    2650:	mov	x8, xzr
    2654:	subs	w10, w9, #0x1
    2658:	b.mi	26ac <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xbc>  // b.first
    265c:	ldr	x11, [x0, #8]
    2660:	adrp	x12, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    2664:	add	x12, x12, #0x1fd
    2668:	b	2680 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x90>
    266c:	mov	w13, #0x8                   	// #8
    2670:	add	x8, x8, x13
    2674:	subs	w10, w10, #0x1
    2678:	add	x11, x11, #0x8
    267c:	b.mi	26ac <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xbc>  // b.first
    2680:	ldr	x13, [x11]
    2684:	ldrh	w13, [x13, #10]
    2688:	sub	w13, w13, #0x3
    268c:	cmp	w13, #0xc
    2690:	b.hi	266c <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x7c>  // b.pmore
    2694:	adr	x14, 266c <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x7c>
    2698:	ldrb	w15, [x12, x13]
    269c:	add	x14, x14, x15, lsl #2
    26a0:	mov	w13, #0x10                  	// #16
    26a4:	br	x14
    26a8:	bl	1a00 <abort@plt>
    26ac:	add	x8, x8, #0xf
    26b0:	mov	x10, sp
    26b4:	and	x8, x8, #0xfffffffffffffff0
    26b8:	sub	x8, x10, x8
    26bc:	mov	sp, x8
    26c0:	cbz	w9, 2784 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x194>
    26c4:	ldr	x10, [x0, #8]
    26c8:	adrp	x11, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    26cc:	mov	x9, xzr
    26d0:	add	x11, x11, #0x20a
    26d4:	mov	x12, x8
    26d8:	b	26f8 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x108>
    26dc:	ldr	x13, [x2, x9, lsl #3]
    26e0:	ldr	w13, [x13]
    26e4:	str	x13, [x12], #8
    26e8:	ldr	w13, [x0, #4]
    26ec:	add	x9, x9, #0x1
    26f0:	cmp	w9, w13
    26f4:	b.cs	2784 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x194>  // b.hs, b.nlast
    26f8:	ldr	x13, [x10, x9, lsl #3]
    26fc:	ldrh	w13, [x13, #10]
    2700:	sub	w13, w13, #0x2
    2704:	cmp	w13, #0xc
    2708:	b.hi	26e8 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf8>  // b.pmore
    270c:	adr	x14, 26dc <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xec>
    2710:	ldrb	w15, [x11, x13]
    2714:	add	x14, x14, x15, lsl #2
    2718:	br	x14
    271c:	ldr	x13, [x2, x9, lsl #3]
    2720:	ldr	x13, [x13]
    2724:	str	x13, [x12], #16
    2728:	b	26e8 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf8>
    272c:	ldr	x13, [x2, x9, lsl #3]
    2730:	ldrh	w13, [x13]
    2734:	b	26e4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf4>
    2738:	ldr	x13, [x2, x9, lsl #3]
    273c:	ldr	w13, [x13]
    2740:	str	w13, [x12], #8
    2744:	b	26e8 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf8>
    2748:	ldr	x13, [x2, x9, lsl #3]
    274c:	ldr	x13, [x13]
    2750:	b	26e4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf4>
    2754:	ldr	x13, [x2, x9, lsl #3]
    2758:	ldrb	w13, [x13]
    275c:	b	26e4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf4>
    2760:	ldr	x13, [x2, x9, lsl #3]
    2764:	ldrsb	x13, [x13]
    2768:	b	26e4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf4>
    276c:	ldr	x13, [x2, x9, lsl #3]
    2770:	ldrsh	x13, [x13]
    2774:	b	26e4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf4>
    2778:	ldr	x13, [x2, x9, lsl #3]
    277c:	ldrsw	x13, [x13]
    2780:	b	26e4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf4>
    2784:	ldp	x9, x3, [x3, #48]
    2788:	mov	x2, x8
    278c:	blr	x9
    2790:	mov	sp, x29
    2794:	ldp	x29, x30, [sp], #16
    2798:	ret

000000000000279c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0>:
    279c:	stp	x29, x30, [sp, #-48]!
    27a0:	str	x21, [sp, #16]
    27a4:	stp	x20, x19, [sp, #32]
    27a8:	mov	x29, sp
    27ac:	mov	x20, x2
    27b0:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>
    27b4:	mov	x19, x3
    27b8:	add	x2, x2, #0x644
    27bc:	mov	x3, x0
    27c0:	mov	x4, x0
    27c4:	mov	x21, x0
    27c8:	bl	1910 <ffi_prep_closure_loc@plt>
    27cc:	cbz	w0, 27e0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x44>
    27d0:	ldp	x20, x19, [sp, #32]
    27d4:	ldr	x21, [sp, #16]
    27d8:	ldp	x29, x30, [sp], #48
    27dc:	ret
    27e0:	stp	x20, x19, [x21, #48]
    27e4:	ldp	x20, x19, [sp, #32]
    27e8:	ldr	x21, [sp, #16]
    27ec:	ldp	x29, x30, [sp], #48
    27f0:	ret

00000000000027f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0>:
    27f4:	stp	x29, x30, [sp, #-64]!
    27f8:	stp	x24, x23, [sp, #16]
    27fc:	stp	x22, x21, [sp, #32]
    2800:	stp	x20, x19, [sp, #48]
    2804:	mov	x29, sp
    2808:	cbz	x1, 2850 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5c>
    280c:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2810:	ldr	x8, [x8, #416]
    2814:	mov	x19, x1
    2818:	mov	x20, x0
    281c:	cbz	x8, 2830 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3c>
    2820:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    2824:	ldrb	w8, [x21, #1392]
    2828:	tbnz	w8, #1, 2840 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c>
    282c:	b	2858 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x64>
    2830:	bl	4ab4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb0>
    2834:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    2838:	ldrb	w8, [x21, #1392]
    283c:	tbz	w8, #1, 2858 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x64>
    2840:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    2844:	add	x0, x0, #0x578
    2848:	bl	1af0 <pthread_mutex_lock@plt>
    284c:	cbz	w0, 2858 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x64>
    2850:	mov	x20, xzr
    2854:	b	3a58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1264>
    2858:	cmp	x20, #0xf0
    285c:	b.hi	28d8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe4>  // b.pmore
    2860:	add	x9, x20, #0xf
    2864:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2868:	and	x10, x9, #0xfffffffffffffff8
    286c:	ldr	w9, [x8, #528]
    2870:	cmp	x20, #0x17
    2874:	mov	w11, #0x20                  	// #32
    2878:	csel	x22, x11, x10, cc  // cc = lo, ul, last
    287c:	lsr	x11, x22, #3
    2880:	lsr	x12, x9, x11
    2884:	tst	w12, #0x3
    2888:	b.eq	2918 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x124>  // b.none
    288c:	mvn	w10, w12
    2890:	and	x10, x10, #0x1
    2894:	add	x10, x11, x10
    2898:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    289c:	add	x11, x11, #0x168
    28a0:	add	x13, x11, x10, lsl #4
    28a4:	ldr	x11, [x13, #248]
    28a8:	add	x13, x13, #0xe8
    28ac:	mov	x20, x11
    28b0:	ldr	x12, [x20, #16]!
    28b4:	cmp	x12, x13
    28b8:	b.eq	29a0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1ac>  // b.none
    28bc:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    28c0:	ldr	x8, [x8, #552]
    28c4:	cmp	x8, x12
    28c8:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    28cc:	str	x12, [x13, #16]
    28d0:	str	x13, [x12, #24]
    28d4:	b	29b0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1bc>
    28d8:	cmn	x20, #0x81
    28dc:	b.ls	28e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf4>  // b.plast
    28e0:	mov	x22, #0xffffffffffffffff    	// #-1
    28e4:	b	2c58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>
    28e8:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    28ec:	ldr	w13, [x10, #532]
    28f0:	add	x8, x20, #0xf
    28f4:	and	x22, x8, #0xfffffffffffffff8
    28f8:	cbz	w13, 2c58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>
    28fc:	lsr	x8, x8, #8
    2900:	neg	x9, x22
    2904:	cbz	x8, 29d0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1dc>
    2908:	lsr	x11, x22, #24
    290c:	cbz	x11, 29d8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1e4>
    2910:	mov	w14, #0x1f                  	// #31
    2914:	b	2a30 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x23c>
    2918:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    291c:	ldr	x10, [x10, #536]
    2920:	cmp	x22, x10
    2924:	b.ls	2c58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>  // b.plast
    2928:	cbz	w12, 2b9c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3a8>
    292c:	mov	w13, #0x2                   	// #2
    2930:	lsl	w12, w12, w11
    2934:	lsl	w11, w13, w11
    2938:	neg	w13, w11
    293c:	orr	w11, w11, w13
    2940:	and	w11, w12, w11
    2944:	neg	w12, w11
    2948:	and	w13, w11, w12
    294c:	tst	w11, w12
    2950:	rbit	w11, w13
    2954:	clz	w11, w11
    2958:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    295c:	csinv	w11, w11, wzr, ne  // ne = any
    2960:	add	x12, x12, #0x168
    2964:	add	x14, x12, w11, sxtw #4
    2968:	ldr	x12, [x14, #248]
    296c:	add	x14, x14, #0xe8
    2970:	sxtw	x11, w11
    2974:	mov	x20, x12
    2978:	ldr	x13, [x20, #16]!
    297c:	cmp	x13, x14
    2980:	b.eq	2e64 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x670>  // b.none
    2984:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    2988:	ldr	x15, [x15, #552]
    298c:	cmp	x15, x13
    2990:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    2994:	str	x13, [x14, #16]
    2998:	str	x14, [x13, #24]
    299c:	b	2e74 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x680>
    29a0:	mov	w12, #0x1                   	// #1
    29a4:	lsl	w12, w12, w10
    29a8:	bic	w9, w9, w12
    29ac:	str	w9, [x8, #528]
    29b0:	mov	w8, #0x3                   	// #3
    29b4:	bfi	x8, x10, #3, #61
    29b8:	str	x8, [x11, #8]
    29bc:	add	x8, x11, x10, lsl #3
    29c0:	ldr	x9, [x8, #8]
    29c4:	orr	x9, x9, #0x1
    29c8:	str	x9, [x8, #8]
    29cc:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    29d0:	mov	x14, xzr
    29d4:	b	2a30 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x23c>
    29d8:	mov	w11, #0xfff00               	// #1048320
    29dc:	add	w11, w8, w11
    29e0:	lsr	w11, w11, #16
    29e4:	and	w11, w11, #0x8
    29e8:	lsl	w8, w8, w11
    29ec:	add	w12, w8, #0x7f, lsl #12
    29f0:	lsr	w12, w12, #16
    29f4:	and	w12, w12, #0x4
    29f8:	lsl	w8, w8, w12
    29fc:	orr	w11, w12, w11
    2a00:	add	w12, w8, #0x3c, lsl #12
    2a04:	lsr	w12, w12, #16
    2a08:	and	w12, w12, #0x2
    2a0c:	lsl	w8, w8, w12
    2a10:	orr	w11, w11, w12
    2a14:	lsr	w8, w8, #15
    2a18:	sub	w8, w8, w11
    2a1c:	lsl	w11, w8, #1
    2a20:	add	w8, w8, #0x15
    2a24:	add	w14, w11, #0x1c
    2a28:	lsr	x8, x22, x8
    2a2c:	bfxil	x14, x8, #0, #1
    2a30:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    2a34:	add	x11, x11, #0x168
    2a38:	add	x8, x11, x14, lsl #3
    2a3c:	ldr	x12, [x8, #760]
    2a40:	cbz	x12, 2abc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c8>
    2a44:	mov	w16, #0x39                  	// #57
    2a48:	sub	x16, x16, x14, lsr #1
    2a4c:	cmp	x14, #0x1f
    2a50:	csel	x16, xzr, x16, eq  // eq = none
    2a54:	mov	x15, xzr
    2a58:	mov	x8, xzr
    2a5c:	lsl	x16, x22, x16
    2a60:	b	2a94 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2a0>
    2a64:	lsr	x17, x16, #60
    2a68:	and	x17, x17, #0x8
    2a6c:	ldr	x18, [x12, #40]
    2a70:	add	x12, x12, x17
    2a74:	ldr	x12, [x12, #32]
    2a78:	cmp	x18, x12
    2a7c:	ccmp	x18, #0x0, #0x4, ne  // ne = any
    2a80:	csel	x15, x15, x18, eq  // eq = none
    2a84:	cmp	x12, #0x0
    2a88:	cset	w17, ne  // ne = any
    2a8c:	lsl	x16, x16, x17
    2a90:	cbz	x12, 2ac4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2d0>
    2a94:	ldr	x17, [x12, #8]
    2a98:	and	x17, x17, #0xfffffffffffffffc
    2a9c:	sub	x17, x17, x22
    2aa0:	cmp	x17, x9
    2aa4:	b.cs	2a64 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x270>  // b.hs, b.nlast
    2aa8:	mov	x9, x17
    2aac:	mov	x8, x12
    2ab0:	cbnz	x17, 2a64 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x270>
    2ab4:	mov	x8, x12
    2ab8:	b	2b74 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x380>
    2abc:	mov	x15, xzr
    2ac0:	mov	x8, xzr
    2ac4:	orr	x12, x15, x8
    2ac8:	cbnz	x12, 2b04 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x310>
    2acc:	mov	w12, #0x2                   	// #2
    2ad0:	lsl	w12, w12, w14
    2ad4:	neg	w14, w12
    2ad8:	orr	w12, w12, w14
    2adc:	ands	w12, w12, w13
    2ae0:	b.eq	2c58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>  // b.none
    2ae4:	neg	w14, w12
    2ae8:	and	w15, w12, w14
    2aec:	rbit	w15, w15
    2af0:	clz	w15, w15
    2af4:	tst	w12, w14
    2af8:	csinv	w12, w15, wzr, ne  // ne = any
    2afc:	add	x12, x11, w12, sxtw #3
    2b00:	ldr	x15, [x12, #760]
    2b04:	mov	x12, x15
    2b08:	cbnz	x15, 2b74 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x380>
    2b0c:	cbz	x8, 2c58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>
    2b10:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    2b14:	ldr	x12, [x12, #536]
    2b18:	sub	x12, x12, x22
    2b1c:	cmp	x9, x12
    2b20:	b.cs	2c58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>  // b.hs, b.nlast
    2b24:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    2b28:	ldr	x15, [x14, #552]
    2b2c:	cmp	x15, x8
    2b30:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    2b34:	add	x12, x8, x22
    2b38:	cmp	x12, x8
    2b3c:	b.ls	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.plast
    2b40:	ldr	x17, [x8, #24]
    2b44:	ldr	x16, [x8, #48]
    2b48:	cmp	x17, x8
    2b4c:	b.eq	2ef0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6fc>  // b.none
    2b50:	ldr	x18, [x8, #16]
    2b54:	cmp	x15, x18
    2b58:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    2b5c:	str	x17, [x18, #24]
    2b60:	str	x18, [x17, #16]
    2b64:	cbnz	x16, 2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x744>
    2b68:	b	35f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe00>
    2b6c:	mov	x12, x14
    2b70:	cbz	x14, 2b0c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x318>
    2b74:	ldr	x15, [x12, #8]
    2b78:	ldr	x14, [x12, #32]
    2b7c:	and	x15, x15, #0xfffffffffffffffc
    2b80:	sub	x15, x15, x22
    2b84:	cmp	x15, x9
    2b88:	csel	x9, x15, x9, cc  // cc = lo, ul, last
    2b8c:	csel	x8, x12, x8, cc  // cc = lo, ul, last
    2b90:	cbnz	x14, 2b6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x378>
    2b94:	ldr	x14, [x12, #40]
    2b98:	b	2b6c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x378>
    2b9c:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    2ba0:	ldr	w16, [x15, #532]
    2ba4:	cbz	w16, 2c58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>
    2ba8:	neg	w11, w16
    2bac:	and	w12, w16, w11
    2bb0:	tst	w16, w11
    2bb4:	rbit	w11, w12
    2bb8:	clz	w11, w11
    2bbc:	adrp	x18, 17000 <memcpy@GLIBC_2.17>
    2bc0:	csinv	w11, w11, wzr, ne  // ne = any
    2bc4:	add	x18, x18, #0x168
    2bc8:	add	x11, x18, w11, sxtw #3
    2bcc:	ldr	x11, [x11, #760]
    2bd0:	ldr	x12, [x11, #8]
    2bd4:	mov	x14, x11
    2bd8:	and	x12, x12, #0xfffffffffffffffc
    2bdc:	sub	x12, x12, x22
    2be0:	b	2c00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x40c>
    2be4:	ldr	x14, [x13, #8]
    2be8:	and	x14, x14, #0xfffffffffffffffc
    2bec:	sub	x14, x14, x22
    2bf0:	cmp	x14, x12
    2bf4:	csel	x12, x14, x12, cc  // cc = lo, ul, last
    2bf8:	csel	x11, x13, x11, cc  // cc = lo, ul, last
    2bfc:	mov	x14, x13
    2c00:	ldr	x13, [x14, #32]
    2c04:	cbnz	x13, 2be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3f0>
    2c08:	ldr	x13, [x14, #40]
    2c0c:	cbnz	x13, 2be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3f0>
    2c10:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    2c14:	ldr	x17, [x14, #552]
    2c18:	cmp	x17, x11
    2c1c:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    2c20:	add	x13, x11, x22
    2c24:	cmp	x13, x11
    2c28:	b.ls	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.plast
    2c2c:	ldr	x1, [x11, #24]
    2c30:	ldr	x0, [x11, #48]
    2c34:	cmp	x1, x11
    2c38:	b.eq	34cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcd8>  // b.none
    2c3c:	ldr	x2, [x11, #16]
    2c40:	cmp	x17, x2
    2c44:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    2c48:	str	x1, [x2, #24]
    2c4c:	str	x2, [x1, #16]
    2c50:	cbnz	x0, 3514 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd20>
    2c54:	b	381c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1028>
    2c58:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2c5c:	ldr	x9, [x8, #536]
    2c60:	subs	x10, x9, x22
    2c64:	b.cs	2ca8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4b4>  // b.hs, b.nlast
    2c68:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    2c6c:	ldr	x8, [x23, #544]
    2c70:	subs	x8, x8, x22
    2c74:	b.ls	2ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4f0>  // b.plast
    2c78:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    2c7c:	add	x9, x9, #0x220
    2c80:	ldr	x10, [x9, #24]
    2c84:	orr	x11, x8, #0x1
    2c88:	orr	x12, x22, #0x3
    2c8c:	str	x8, [x9]
    2c90:	add	x8, x10, x22
    2c94:	str	x8, [x9, #24]
    2c98:	str	x11, [x8, #8]
    2c9c:	str	x12, [x10, #8]
    2ca0:	add	x20, x10, #0x10
    2ca4:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    2ca8:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2cac:	ldr	x8, [x8, #560]
    2cb0:	cmp	x10, #0x20
    2cb4:	b.cc	2dac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5b8>  // b.lo, b.ul, b.last
    2cb8:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    2cbc:	add	x11, x8, x22
    2cc0:	add	x12, x12, #0x218
    2cc4:	orr	x13, x10, #0x1
    2cc8:	orr	x14, x22, #0x3
    2ccc:	str	x11, [x12, #24]
    2cd0:	str	x10, [x12]
    2cd4:	str	x13, [x11, #8]
    2cd8:	str	x10, [x8, x9]
    2cdc:	str	x14, [x8, #8]
    2ce0:	b	2dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e0>
    2ce4:	bl	4ab4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb0>
    2ce8:	ldrb	w8, [x21, #1392]
    2cec:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    2cf0:	tbz	w8, #0, 2ddc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e8>
    2cf4:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2cf8:	ldrb	w8, [x8, #368]
    2cfc:	sbfx	x8, x8, #0, #1
    2d00:	cmp	x22, x8
    2d04:	b.cc	2ddc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e8>  // b.lo, b.ul, b.last
    2d08:	ldr	x8, [x24, #424]
    2d0c:	add	x9, x22, x8
    2d10:	add	x9, x9, #0x37
    2d14:	neg	x8, x8
    2d18:	and	x20, x9, x8
    2d1c:	cmp	x20, x22
    2d20:	b.ls	2ddc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e8>  // b.plast
    2d24:	mov	x0, x20
    2d28:	bl	4b8c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd88>
    2d2c:	cmn	x0, #0x1
    2d30:	b.eq	2ddc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e8>  // b.none
    2d34:	add	x8, x0, #0x10
    2d38:	neg	w10, w8
    2d3c:	adrp	x9, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    2d40:	tst	x8, #0x7
    2d44:	and	x8, x10, #0x7
    2d48:	ldr	q0, [x9, #544]
    2d4c:	csel	x9, xzr, x8, eq  // eq = none
    2d50:	sub	x10, x20, x9
    2d54:	add	x8, x0, x9
    2d58:	sub	x10, x10, #0x20
    2d5c:	orr	x9, x9, #0x1
    2d60:	orr	x11, x10, #0x2
    2d64:	add	x10, x8, x10
    2d68:	stp	x9, x11, [x8]
    2d6c:	stur	q0, [x10, #8]
    2d70:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    2d74:	ldr	x10, [x9, #552]
    2d78:	cmp	x0, x10
    2d7c:	b.cs	2d84 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x590>  // b.hs, b.nlast
    2d80:	str	x0, [x9, #552]
    2d84:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2d88:	add	x10, x10, #0x560
    2d8c:	ldp	x9, x11, [x10]
    2d90:	add	x9, x9, x20
    2d94:	cmp	x9, x11
    2d98:	str	x9, [x10]
    2d9c:	b.ls	2dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e0>  // b.plast
    2da0:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2da4:	str	x9, [x10, #1384]
    2da8:	b	2dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e0>
    2dac:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2db0:	add	x10, x10, #0x218
    2db4:	orr	x11, x9, #0x3
    2db8:	str	xzr, [x10]
    2dbc:	str	xzr, [x10, #24]
    2dc0:	str	x11, [x8, #8]
    2dc4:	add	x9, x8, x9
    2dc8:	ldr	x10, [x9, #8]
    2dcc:	orr	x10, x10, #0x1
    2dd0:	str	x10, [x9, #8]
    2dd4:	add	x20, x8, #0x10
    2dd8:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    2ddc:	ldr	x8, [x24, #424]
    2de0:	add	x9, x22, x8
    2de4:	add	x9, x9, #0x49
    2de8:	neg	x8, x8
    2dec:	and	x20, x9, x8
    2df0:	cmp	x20, x22
    2df4:	b.ls	39f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1204>  // b.plast
    2df8:	mov	x0, x20
    2dfc:	bl	4b8c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd88>
    2e00:	cmn	x0, #0x1
    2e04:	cset	w10, ne  // ne = any
    2e08:	csel	x9, xzr, x20, eq  // eq = none
    2e0c:	b.eq	39f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1204>  // b.none
    2e10:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    2e14:	add	x11, x11, #0x560
    2e18:	ldp	x8, x12, [x11]
    2e1c:	add	x8, x8, x9
    2e20:	cmp	x8, x12
    2e24:	str	x8, [x11]
    2e28:	b.ls	2e34 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x640>  // b.plast
    2e2c:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    2e30:	str	x8, [x11, #1384]
    2e34:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2e38:	ldr	x11, [x8, #568]
    2e3c:	cbz	x11, 2f74 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x780>
    2e40:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2e44:	add	x8, x8, #0x5a8
    2e48:	ldp	x13, x12, [x8]
    2e4c:	add	x14, x13, x12
    2e50:	cmp	x0, x14
    2e54:	b.eq	3160 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x96c>  // b.none
    2e58:	ldr	x8, [x8, #16]
    2e5c:	cbnz	x8, 2e48 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x654>
    2e60:	b	31f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa04>
    2e64:	mov	w13, #0x1                   	// #1
    2e68:	lsl	w13, w13, w11
    2e6c:	bic	w9, w9, w13
    2e70:	str	w9, [x8, #528]
    2e74:	lsl	x14, x11, #3
    2e78:	sub	x11, x14, x22
    2e7c:	cmp	x11, #0x1f
    2e80:	b.hi	2e94 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6a0>  // b.pmore
    2e84:	orr	x8, x14, #0x3
    2e88:	str	x8, [x12, #8]
    2e8c:	add	x8, x12, x14
    2e90:	b	29c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1cc>
    2e94:	orr	x15, x22, #0x3
    2e98:	add	x13, x12, x22
    2e9c:	orr	x16, x11, #0x1
    2ea0:	str	x15, [x12, #8]
    2ea4:	str	x16, [x13, #8]
    2ea8:	str	x11, [x12, x14]
    2eac:	cbz	x10, 3568 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd74>
    2eb0:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    2eb4:	add	x12, x12, #0x210
    2eb8:	lsr	x14, x10, #3
    2ebc:	ldr	x10, [x12, #32]
    2ec0:	mov	w15, #0x1                   	// #1
    2ec4:	add	x12, x12, x14, lsl #4
    2ec8:	lsl	w14, w15, w14
    2ecc:	tst	w9, w14
    2ed0:	add	x12, x12, #0x40
    2ed4:	b.eq	3550 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd5c>  // b.none
    2ed8:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    2edc:	ldr	x8, [x12, #16]
    2ee0:	ldr	x9, [x9, #552]
    2ee4:	cmp	x9, x8
    2ee8:	b.ls	355c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd68>  // b.plast
    2eec:	b	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>
    2ef0:	mov	x18, x8
    2ef4:	ldr	x0, [x18, #40]!
    2ef8:	cbnz	x0, 2f08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x714>
    2efc:	mov	x18, x8
    2f00:	ldr	x0, [x18, #32]!
    2f04:	cbz	x0, 37b8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfc4>
    2f08:	mov	x1, x18
    2f0c:	mov	x18, x0
    2f10:	mov	x17, x0
    2f14:	ldr	x0, [x18, #40]!
    2f18:	cbnz	x0, 2f08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x714>
    2f1c:	mov	x18, x17
    2f20:	ldr	x0, [x18, #32]!
    2f24:	cbnz	x0, 2f08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x714>
    2f28:	cmp	x15, x1
    2f2c:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    2f30:	str	xzr, [x1]
    2f34:	cbz	x16, 35f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe00>
    2f38:	ldr	x18, [x8, #56]
    2f3c:	add	x0, x11, x18, lsl #3
    2f40:	ldr	x1, [x0, #760]
    2f44:	cmp	x8, x1
    2f48:	b.eq	347c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc88>  // b.none
    2f4c:	cmp	x15, x16
    2f50:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    2f54:	ldr	x13, [x16, #32]
    2f58:	mov	w18, #0x28                  	// #40
    2f5c:	cmp	x13, x8
    2f60:	mov	w13, #0x20                  	// #32
    2f64:	csel	x13, x13, x18, eq  // eq = none
    2f68:	str	x17, [x16, x13]
    2f6c:	cbnz	x17, 348c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc98>
    2f70:	b	35f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe00>
    2f74:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2f78:	add	x10, x10, #0x228
    2f7c:	add	x8, x0, x9
    2f80:	str	x0, [x10]
    2f84:	str	x0, [x10, #896]
    2f88:	str	x9, [x10, #904]
    2f8c:	ldur	x11, [x8, #-8]
    2f90:	str	x11, [x10, #920]
    2f94:	add	x10, x0, x11
    2f98:	add	x10, x10, x9
    2f9c:	ldur	x10, [x10, #-8]
    2fa0:	cmp	x10, x11
    2fa4:	b.ne	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.any
    2fa8:	stur	xzr, [x8, #-8]
    2fac:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2fb0:	add	x8, x8, #0x168
    2fb4:	ldrb	w10, [x8]
    2fb8:	mov	w11, #0x5858                	// #22616
    2fbc:	movk	w11, #0x5858, lsl #16
    2fc0:	sub	x9, x9, #0x48
    2fc4:	cmp	w10, #0x0
    2fc8:	csel	x11, x11, xzr, ne  // ne = any
    2fcc:	add	x10, x8, #0xe8
    2fd0:	str	x11, [x8, #224]
    2fd4:	mov	x11, x8
    2fd8:	str	x10, [x8, #256]
    2fdc:	str	x10, [x11, #248]!
    2fe0:	add	x10, x8, #0x108
    2fe4:	stp	x10, x10, [x8, #280]
    2fe8:	add	x10, x8, #0x118
    2fec:	stp	x10, x10, [x8, #296]
    2ff0:	add	x10, x8, #0x128
    2ff4:	stp	x10, x10, [x8, #312]
    2ff8:	add	x10, x8, #0x138
    2ffc:	stp	x10, x10, [x8, #328]
    3000:	add	x10, x8, #0x148
    3004:	stp	x10, x10, [x8, #344]
    3008:	add	x10, x8, #0x158
    300c:	stp	x10, x10, [x8, #360]
    3010:	add	x10, x8, #0x168
    3014:	stp	x10, x10, [x8, #376]
    3018:	add	x10, x8, #0x178
    301c:	stp	x10, x10, [x8, #392]
    3020:	add	x10, x8, #0x188
    3024:	stp	x10, x10, [x8, #408]
    3028:	add	x10, x8, #0x198
    302c:	stp	x10, x10, [x8, #424]
    3030:	add	x10, x8, #0x1a8
    3034:	stp	x10, x10, [x8, #440]
    3038:	add	x10, x8, #0x1b8
    303c:	stp	x10, x10, [x8, #456]
    3040:	add	x10, x8, #0x1c8
    3044:	stp	x10, x10, [x8, #472]
    3048:	add	x10, x8, #0x1d8
    304c:	stp	x10, x10, [x8, #488]
    3050:	add	x10, x8, #0x1e8
    3054:	stp	x10, x10, [x8, #504]
    3058:	add	x10, x8, #0x1f8
    305c:	str	x10, [x8, #528]
    3060:	str	x10, [x8, #520]
    3064:	add	x10, x8, #0x208
    3068:	str	x10, [x8, #544]
    306c:	str	x10, [x8, #536]
    3070:	add	x10, x8, #0x218
    3074:	str	x10, [x8, #560]
    3078:	str	x10, [x8, #552]
    307c:	add	x10, x8, #0x228
    3080:	str	x10, [x8, #576]
    3084:	str	x10, [x8, #568]
    3088:	add	x10, x8, #0x238
    308c:	str	x10, [x8, #592]
    3090:	str	x10, [x8, #584]
    3094:	add	x10, x8, #0x248
    3098:	str	x10, [x8, #608]
    309c:	str	x10, [x8, #600]
    30a0:	add	x10, x8, #0x258
    30a4:	str	x10, [x8, #624]
    30a8:	str	x10, [x8, #616]
    30ac:	add	x10, x8, #0x268
    30b0:	str	x10, [x8, #640]
    30b4:	str	x10, [x8, #632]
    30b8:	add	x10, x8, #0x278
    30bc:	str	x10, [x8, #656]
    30c0:	str	x10, [x8, #648]
    30c4:	add	x10, x8, #0x288
    30c8:	str	x10, [x8, #672]
    30cc:	str	x10, [x8, #664]
    30d0:	add	x10, x8, #0x298
    30d4:	str	x10, [x8, #688]
    30d8:	str	x10, [x8, #680]
    30dc:	add	x10, x8, #0x2a8
    30e0:	str	x10, [x8, #704]
    30e4:	str	x10, [x8, #696]
    30e8:	add	x10, x8, #0x2b8
    30ec:	str	x10, [x8, #720]
    30f0:	str	x10, [x8, #712]
    30f4:	add	x10, x8, #0x2c8
    30f8:	str	x10, [x8, #736]
    30fc:	str	x10, [x8, #728]
    3100:	add	x10, x8, #0x2d8
    3104:	str	x10, [x8, #752]
    3108:	str	x10, [x8, #744]
    310c:	add	x10, x0, #0x10
    3110:	tst	x10, #0x7
    3114:	neg	w10, w10
    3118:	and	x10, x10, #0x7
    311c:	csel	x10, xzr, x10, eq  // eq = none
    3120:	stp	x11, x11, [x8, #264]
    3124:	add	x11, x0, x9
    3128:	sub	x9, x9, x10
    312c:	add	x12, x0, x10
    3130:	mov	w10, #0x48                  	// #72
    3134:	str	x9, [x8, #184]
    3138:	orr	x9, x9, #0x1
    313c:	str	x12, [x8, #208]
    3140:	str	x9, [x12, #8]
    3144:	str	x10, [x11, #8]
    3148:	ldrb	w9, [x8, #16]
    314c:	cmp	w9, #0x0
    3150:	mov	w9, #0x200000              	// #2097152
    3154:	csel	x9, x9, xzr, ne  // ne = any
    3158:	str	x9, [x8, #216]
    315c:	b	39ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f8>
    3160:	add	x14, x0, x9
    3164:	ldr	x15, [x8, #24]
    3168:	ldur	x14, [x14, #-8]
    316c:	cmp	x14, x15
    3170:	cset	w14, ne  // ne = any
    3174:	eor	w15, w10, #0x1
    3178:	orr	w14, w14, w15
    317c:	tbnz	w14, #0, 31f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa04>
    3180:	cmp	x0, x11
    3184:	b.ls	31f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa04>  // b.plast
    3188:	cmp	x13, x11
    318c:	b.hi	31f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa04>  // b.pmore
    3190:	add	x10, x12, x9
    3194:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3198:	add	x12, x12, #0x178
    319c:	str	x10, [x8, #8]
    31a0:	ldr	x10, [x12, #168]
    31a4:	add	x8, x11, #0x10
    31a8:	tst	x8, #0x7
    31ac:	neg	w8, w8
    31b0:	and	x8, x8, #0x7
    31b4:	csel	x8, xzr, x8, eq  // eq = none
    31b8:	add	x9, x10, x9
    31bc:	add	x10, x11, x8
    31c0:	sub	x8, x9, x8
    31c4:	add	x9, x11, x9
    31c8:	mov	w11, #0x48                  	// #72
    31cc:	str	x8, [x12, #168]
    31d0:	orr	x8, x8, #0x1
    31d4:	str	x10, [x12, #192]
    31d8:	str	x8, [x10, #8]
    31dc:	str	x11, [x9, #8]
    31e0:	ldrb	w8, [x12]
    31e4:	cmp	w8, #0x0
    31e8:	mov	w8, #0x200000              	// #2097152
    31ec:	csel	x8, x8, xzr, ne  // ne = any
    31f0:	str	x8, [x12, #200]
    31f4:	b	39ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f8>
    31f8:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    31fc:	ldr	x14, [x8, #552]
    3200:	cmp	x0, x14
    3204:	b.cs	3210 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa1c>  // b.hs, b.nlast
    3208:	mov	x14, x0
    320c:	str	x0, [x8, #552]
    3210:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    3214:	add	x12, x0, x9
    3218:	add	x13, x13, #0x5a8
    321c:	ldr	x15, [x13]
    3220:	cmp	x15, x12
    3224:	b.eq	3234 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa40>  // b.none
    3228:	ldr	x13, [x13, #16]
    322c:	cbnz	x13, 321c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa28>
    3230:	b	3310 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb1c>
    3234:	ldur	x15, [x12, #-8]
    3238:	ldr	x16, [x13, #24]
    323c:	cmp	x15, x16
    3240:	cset	w15, eq  // eq = none
    3244:	and	w10, w15, w10
    3248:	tbz	w10, #0, 3310 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb1c>
    324c:	ldr	x10, [x13, #8]
    3250:	add	x9, x10, x9
    3254:	add	x10, x0, #0x10
    3258:	tst	x10, #0x7
    325c:	neg	w10, w10
    3260:	stp	x0, x9, [x13]
    3264:	add	x9, x12, #0x10
    3268:	and	x10, x10, #0x7
    326c:	csel	x10, xzr, x10, eq  // eq = none
    3270:	tst	x9, #0x7
    3274:	neg	w9, w9
    3278:	and	x15, x9, #0x7
    327c:	add	x9, x0, x10
    3280:	csel	x10, xzr, x15, eq  // eq = none
    3284:	add	x12, x12, x10
    3288:	sub	x15, x12, x9
    328c:	orr	x13, x22, #0x3
    3290:	add	x10, x9, x22
    3294:	cmp	x11, x12
    3298:	sub	x11, x15, x22
    329c:	str	x13, [x9, #8]
    32a0:	b.eq	37c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfd0>  // b.none
    32a4:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    32a8:	ldr	x13, [x13, #560]
    32ac:	cmp	x13, x12
    32b0:	b.eq	3a70 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x127c>  // b.none
    32b4:	ldr	x13, [x12, #8]
    32b8:	tbnz	w13, #1, 3bf0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13fc>
    32bc:	cmp	x13, #0xff
    32c0:	b.hi	3aa8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12b4>  // b.pmore
    32c4:	ldp	x15, x16, [x12, #16]
    32c8:	lsr	x17, x13, #3
    32cc:	cmp	x15, x16
    32d0:	b.eq	3ad4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12e0>  // b.none
    32d4:	adrp	x18, 17000 <memcpy@GLIBC_2.17>
    32d8:	add	x18, x18, #0x168
    32dc:	add	x17, x18, x17, lsl #4
    32e0:	add	x17, x17, #0xe8
    32e4:	cmp	x15, x17
    32e8:	b.eq	32f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb00>  // b.none
    32ec:	cmp	x14, x15
    32f0:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    32f4:	cmp	x16, x17
    32f8:	b.eq	3304 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb10>  // b.none
    32fc:	cmp	x14, x16
    3300:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3304:	str	x16, [x15, #24]
    3308:	str	x15, [x16, #16]
    330c:	b	3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3310:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    3314:	add	x10, x10, #0x5a8
    3318:	b	3320 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb2c>
    331c:	ldr	x10, [x10, #16]
    3320:	ldr	x13, [x10]
    3324:	cmp	x13, x11
    3328:	b.hi	331c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb28>  // b.pmore
    332c:	ldr	x14, [x10, #8]
    3330:	add	x13, x13, x14
    3334:	cmp	x13, x11
    3338:	b.ls	331c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb28>  // b.plast
    333c:	sub	x14, x13, #0x3f
    3340:	add	x16, x0, #0x10
    3344:	neg	w18, w14
    3348:	tst	x14, #0x7
    334c:	neg	w14, w16
    3350:	and	x18, x18, #0x7
    3354:	and	x1, x14, #0x7
    3358:	csel	x14, xzr, x18, eq  // eq = none
    335c:	add	x14, x13, x14
    3360:	add	x10, x11, #0x20
    3364:	sub	x14, x14, #0x4f
    3368:	cmp	x14, x10
    336c:	csel	x14, x11, x14, cc  // cc = lo, ul, last
    3370:	tst	x16, #0x7
    3374:	sub	x15, x9, #0x48
    3378:	adrp	x17, 17000 <memcpy@GLIBC_2.17>
    337c:	csel	x16, xzr, x1, eq  // eq = none
    3380:	add	x17, x17, #0x178
    3384:	add	x18, x0, x16
    3388:	sub	x16, x15, x16
    338c:	str	x16, [x17, #168]
    3390:	orr	x16, x16, #0x1
    3394:	str	x18, [x17, #192]
    3398:	str	x16, [x18, #8]
    339c:	mov	w16, #0x48                  	// #72
    33a0:	add	x15, x0, x15
    33a4:	str	x16, [x15, #8]
    33a8:	ldrb	w15, [x17]
    33ac:	mov	w16, #0x200000              	// #2097152
    33b0:	mov	w18, #0x2b                  	// #43
    33b4:	cmp	w15, #0x0
    33b8:	csel	x15, x16, xzr, ne  // ne = any
    33bc:	str	x15, [x17, #200]
    33c0:	str	x18, [x14, #8]
    33c4:	ldr	q0, [x17, #1088]
    33c8:	ldr	q1, [x17, #1072]
    33cc:	stp	q1, q0, [x14, #16]
    33d0:	str	x0, [x17, #1072]
    33d4:	str	x9, [x17, #1080]
    33d8:	ldur	x15, [x12, #-8]
    33dc:	add	x16, x0, x15
    33e0:	str	x15, [x17, #1096]
    33e4:	add	x9, x16, x9
    33e8:	ldur	x9, [x9, #-8]
    33ec:	cmp	x9, x15
    33f0:	b.ne	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.any
    33f4:	add	x15, x14, #0x10
    33f8:	stur	xzr, [x12, #-8]
    33fc:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3400:	add	x9, x14, #0x30
    3404:	str	x15, [x12, #1464]
    3408:	mov	w12, #0xb                   	// #11
    340c:	str	x12, [x9], #8
    3410:	cmp	x13, x9
    3414:	b.hi	340c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc18>  // b.pmore
    3418:	subs	x9, x14, x11
    341c:	b.eq	39ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f8>  // b.none
    3420:	ldr	x12, [x14, #8]
    3424:	orr	x13, x9, #0x1
    3428:	cmp	x9, #0xff
    342c:	and	x12, x12, #0xfffffffffffffffe
    3430:	str	x12, [x14, #8]
    3434:	str	x13, [x11, #8]
    3438:	str	x9, [x14]
    343c:	b.hi	357c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd88>  // b.pmore
    3440:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3444:	add	x12, x12, #0x210
    3448:	ldr	w10, [x12]
    344c:	lsr	x9, x9, #3
    3450:	add	x13, x12, x9, lsl #4
    3454:	mov	w12, #0x1                   	// #1
    3458:	lsl	w12, w12, w9
    345c:	tst	w10, w12
    3460:	add	x9, x13, #0x40
    3464:	b.eq	37ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xff8>  // b.none
    3468:	ldr	x10, [x9, #16]
    346c:	ldr	x8, [x8, #552]
    3470:	cmp	x8, x10
    3474:	b.ls	37fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1008>  // b.plast
    3478:	b	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>
    347c:	add	x15, x0, #0x2f8
    3480:	str	x17, [x15]
    3484:	cbz	x17, 35e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdf0>
    3488:	ldr	x15, [x14, #552]
    348c:	cmp	x15, x17
    3490:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3494:	str	x16, [x17, #48]
    3498:	ldr	x13, [x8, #32]
    349c:	cbz	x13, 34b0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcbc>
    34a0:	cmp	x15, x13
    34a4:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    34a8:	str	x13, [x17, #32]
    34ac:	str	x17, [x13, #48]
    34b0:	ldr	x13, [x8, #40]
    34b4:	cbz	x13, 35f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe00>
    34b8:	cmp	x15, x13
    34bc:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    34c0:	str	x13, [x17, #40]
    34c4:	str	x17, [x13, #48]
    34c8:	b	35f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe00>
    34cc:	mov	x2, x11
    34d0:	ldr	x3, [x2, #40]!
    34d4:	cbnz	x3, 34e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcf0>
    34d8:	mov	x2, x11
    34dc:	ldr	x3, [x2, #32]!
    34e0:	cbz	x3, 3a9c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12a8>
    34e4:	mov	x4, x2
    34e8:	mov	x2, x3
    34ec:	mov	x1, x3
    34f0:	ldr	x3, [x2, #40]!
    34f4:	cbnz	x3, 34e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcf0>
    34f8:	mov	x2, x1
    34fc:	ldr	x3, [x2, #32]!
    3500:	cbnz	x3, 34e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcf0>
    3504:	cmp	x17, x4
    3508:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    350c:	str	xzr, [x4]
    3510:	cbz	x0, 381c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1028>
    3514:	ldr	x2, [x11, #56]
    3518:	add	x18, x18, x2, lsl #3
    351c:	ldr	x3, [x18, #760]
    3520:	cmp	x11, x3
    3524:	b.eq	3594 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xda0>  // b.none
    3528:	cmp	x17, x0
    352c:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3530:	ldr	x15, [x0, #32]
    3534:	mov	w16, #0x28                  	// #40
    3538:	cmp	x15, x11
    353c:	mov	w15, #0x20                  	// #32
    3540:	csel	x15, x15, x16, eq  // eq = none
    3544:	str	x1, [x0, x15]
    3548:	cbnz	x1, 35a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdb0>
    354c:	b	381c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1028>
    3550:	orr	w9, w9, w14
    3554:	str	w9, [x8, #528]
    3558:	mov	x8, x12
    355c:	str	x10, [x12, #16]
    3560:	str	x10, [x8, #24]
    3564:	stp	x8, x12, [x10, #16]
    3568:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    356c:	add	x8, x8, #0x218
    3570:	str	x11, [x8]
    3574:	str	x13, [x8, #24]
    3578:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    357c:	lsr	x12, x9, #8
    3580:	cbz	x12, 3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1130>
    3584:	lsr	x13, x9, #24
    3588:	cbz	x13, 38cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10d8>
    358c:	mov	w12, #0x1f                  	// #31
    3590:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1130>
    3594:	add	x17, x18, #0x2f8
    3598:	str	x1, [x17]
    359c:	cbz	x1, 380c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1018>
    35a0:	ldr	x17, [x14, #552]
    35a4:	cmp	x17, x1
    35a8:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    35ac:	str	x0, [x1, #48]
    35b0:	ldr	x15, [x11, #32]
    35b4:	cbz	x15, 35c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdd4>
    35b8:	cmp	x17, x15
    35bc:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    35c0:	str	x15, [x1, #32]
    35c4:	str	x1, [x15, #48]
    35c8:	ldr	x15, [x11, #40]
    35cc:	cbz	x15, 381c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1028>
    35d0:	cmp	x17, x15
    35d4:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    35d8:	str	x15, [x1, #40]
    35dc:	str	x1, [x15, #48]
    35e0:	b	381c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1028>
    35e4:	mov	w15, #0x1                   	// #1
    35e8:	lsl	w15, w15, w18
    35ec:	bic	w13, w13, w15
    35f0:	str	w13, [x10, #532]
    35f4:	cmp	x9, #0x1f
    35f8:	b.hi	360c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe18>  // b.pmore
    35fc:	add	x9, x9, x22
    3600:	orr	x10, x9, #0x3
    3604:	str	x10, [x8, #8]
    3608:	b	2dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d0>
    360c:	orr	x13, x22, #0x3
    3610:	orr	x15, x9, #0x1
    3614:	cmp	x9, #0xff
    3618:	str	x13, [x8, #8]
    361c:	str	x15, [x12, #8]
    3620:	str	x9, [x12, x9]
    3624:	b.hi	3664 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe70>  // b.pmore
    3628:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    362c:	add	x11, x11, #0x210
    3630:	ldr	w10, [x11]
    3634:	lsr	x9, x9, #3
    3638:	add	x13, x11, x9, lsl #4
    363c:	mov	w11, #0x1                   	// #1
    3640:	lsl	w11, w11, w9
    3644:	tst	w10, w11
    3648:	add	x9, x13, #0x40
    364c:	b.eq	367c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe88>  // b.none
    3650:	ldr	x10, [x9, #16]
    3654:	ldr	x11, [x14, #552]
    3658:	cmp	x11, x10
    365c:	b.ls	368c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe98>  // b.plast
    3660:	b	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>
    3664:	lsr	x13, x9, #8
    3668:	cbz	x13, 36f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf00>
    366c:	lsr	x15, x9, #24
    3670:	cbz	x15, 369c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xea8>
    3674:	mov	w13, #0x1f                  	// #31
    3678:	b	36f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf00>
    367c:	orr	w10, w10, w11
    3680:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3684:	str	w10, [x11, #528]
    3688:	mov	x10, x9
    368c:	str	x12, [x9, #16]
    3690:	str	x12, [x10, #24]
    3694:	stp	x10, x9, [x12, #16]
    3698:	b	2dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e0>
    369c:	mov	w15, #0xfff00               	// #1048320
    36a0:	add	w15, w13, w15
    36a4:	lsr	w15, w15, #16
    36a8:	and	w15, w15, #0x8
    36ac:	lsl	w13, w13, w15
    36b0:	add	w16, w13, #0x7f, lsl #12
    36b4:	lsr	w16, w16, #16
    36b8:	and	w16, w16, #0x4
    36bc:	lsl	w13, w13, w16
    36c0:	orr	w15, w16, w15
    36c4:	add	w16, w13, #0x3c, lsl #12
    36c8:	lsr	w16, w16, #16
    36cc:	and	w16, w16, #0x2
    36d0:	lsl	w13, w13, w16
    36d4:	orr	w15, w15, w16
    36d8:	lsr	w13, w13, #15
    36dc:	sub	w13, w13, w15
    36e0:	lsl	w15, w13, #1
    36e4:	add	w16, w13, #0x15
    36e8:	add	w13, w15, #0x1c
    36ec:	lsr	x15, x9, x16
    36f0:	bfxil	x13, x15, #0, #1
    36f4:	str	x13, [x12, #56]
    36f8:	stp	xzr, xzr, [x12, #32]
    36fc:	ldr	w15, [x11, #172]
    3700:	mov	w16, #0x1                   	// #1
    3704:	add	x11, x11, x13, lsl #3
    3708:	lsl	w16, w16, w13
    370c:	tst	w15, w16
    3710:	add	x11, x11, #0x2f8
    3714:	b.eq	3774 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf80>  // b.none
    3718:	ldr	x15, [x11]
    371c:	mov	w10, #0x39                  	// #57
    3720:	sub	x10, x10, x13, lsr #1
    3724:	cmp	x13, #0x1f
    3728:	csel	x10, xzr, x10, eq  // eq = none
    372c:	lsl	x11, x9, x10
    3730:	ldr	x13, [x15, #8]
    3734:	mov	x10, x15
    3738:	and	x13, x13, #0xfffffffffffffffc
    373c:	cmp	x13, x9
    3740:	b.eq	378c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf98>  // b.none
    3744:	lsr	x13, x11, #60
    3748:	and	x13, x13, #0x8
    374c:	add	x13, x10, x13
    3750:	ldr	x15, [x13, #32]!
    3754:	lsl	x11, x11, #1
    3758:	cbnz	x15, 3730 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf3c>
    375c:	ldr	x9, [x14, #552]
    3760:	cmp	x9, x13
    3764:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3768:	str	x12, [x13]
    376c:	str	x10, [x12, #48]
    3770:	b	3784 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf90>
    3774:	orr	w9, w15, w16
    3778:	str	w9, [x10, #532]
    377c:	str	x12, [x11]
    3780:	str	x11, [x12, #48]
    3784:	stp	x12, x12, [x12, #16]
    3788:	b	2dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e0>
    378c:	ldr	x9, [x10, #16]
    3790:	ldr	x11, [x14, #552]
    3794:	cmp	x11, x9
    3798:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    379c:	cmp	x11, x10
    37a0:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    37a4:	str	x12, [x9, #24]
    37a8:	str	x12, [x10, #16]
    37ac:	stp	x9, x10, [x12, #16]
    37b0:	str	xzr, [x12, #48]
    37b4:	b	2dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e0>
    37b8:	mov	x17, xzr
    37bc:	cbnz	x16, 2f38 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x744>
    37c0:	b	35f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe00>
    37c4:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    37c8:	add	x8, x8, #0x220
    37cc:	ldr	x12, [x8]
    37d0:	str	x10, [x8, #24]
    37d4:	add	x20, x9, #0x10
    37d8:	add	x11, x12, x11
    37dc:	str	x11, [x8]
    37e0:	orr	x8, x11, #0x1
    37e4:	str	x8, [x10, #8]
    37e8:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    37ec:	orr	w8, w10, w12
    37f0:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    37f4:	str	w8, [x10, #528]
    37f8:	mov	x10, x9
    37fc:	str	x11, [x9, #16]
    3800:	str	x11, [x10, #24]
    3804:	stp	x10, x9, [x11, #16]
    3808:	b	39ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f8>
    380c:	mov	w17, #0x1                   	// #1
    3810:	lsl	w17, w17, w2
    3814:	bic	w16, w16, w17
    3818:	str	w16, [x15, #532]
    381c:	cmp	x12, #0x1f
    3820:	b.hi	3848 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1054>  // b.pmore
    3824:	add	x8, x12, x22
    3828:	orr	x9, x8, #0x3
    382c:	str	x9, [x11, #8]
    3830:	add	x8, x11, x8
    3834:	ldr	x9, [x8, #8]
    3838:	add	x20, x11, #0x10
    383c:	orr	x9, x9, #0x1
    3840:	str	x9, [x8, #8]
    3844:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    3848:	orr	x15, x22, #0x3
    384c:	orr	x16, x12, #0x1
    3850:	str	x15, [x11, #8]
    3854:	str	x16, [x13, #8]
    3858:	str	x12, [x13, x12]
    385c:	cbz	x10, 38b4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10c0>
    3860:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    3864:	add	x15, x15, #0x210
    3868:	lsr	x16, x10, #3
    386c:	ldr	x10, [x15, #32]
    3870:	mov	w17, #0x1                   	// #1
    3874:	add	x15, x15, x16, lsl #4
    3878:	lsl	w16, w17, w16
    387c:	tst	w16, w9
    3880:	add	x15, x15, #0x40
    3884:	b.eq	389c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10a8>  // b.none
    3888:	ldr	x8, [x15, #16]
    388c:	ldr	x9, [x14, #552]
    3890:	cmp	x9, x8
    3894:	b.ls	38a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10b4>  // b.plast
    3898:	b	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>
    389c:	orr	w9, w16, w9
    38a0:	str	w9, [x8, #528]
    38a4:	mov	x8, x15
    38a8:	str	x10, [x15, #16]
    38ac:	str	x10, [x8, #24]
    38b0:	stp	x8, x15, [x10, #16]
    38b4:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    38b8:	add	x8, x8, #0x218
    38bc:	str	x12, [x8]
    38c0:	str	x13, [x8, #24]
    38c4:	add	x20, x11, #0x10
    38c8:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    38cc:	mov	w13, #0xfff00               	// #1048320
    38d0:	add	w13, w12, w13
    38d4:	lsr	w13, w13, #16
    38d8:	and	w13, w13, #0x8
    38dc:	lsl	w12, w12, w13
    38e0:	add	w14, w12, #0x7f, lsl #12
    38e4:	lsr	w14, w14, #16
    38e8:	and	w14, w14, #0x4
    38ec:	lsl	w12, w12, w14
    38f0:	orr	w13, w14, w13
    38f4:	add	w14, w12, #0x3c, lsl #12
    38f8:	lsr	w14, w14, #16
    38fc:	and	w14, w14, #0x2
    3900:	lsl	w12, w12, w14
    3904:	orr	w13, w13, w14
    3908:	lsr	w12, w12, #15
    390c:	sub	w12, w12, w13
    3910:	lsl	w13, w12, #1
    3914:	add	w14, w12, #0x15
    3918:	add	w12, w13, #0x1c
    391c:	lsr	x13, x9, x14
    3920:	bfxil	x12, x13, #0, #1
    3924:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    3928:	add	x14, x14, #0x168
    392c:	str	x12, [x11, #56]
    3930:	stp	xzr, xzr, [x10]
    3934:	ldr	w13, [x14, #172]
    3938:	add	x10, x14, x12, lsl #3
    393c:	mov	w14, #0x1                   	// #1
    3940:	lsl	w14, w14, w12
    3944:	tst	w13, w14
    3948:	add	x10, x10, #0x2f8
    394c:	b.eq	39a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11b4>  // b.none
    3950:	ldr	x13, [x10]
    3954:	mov	w10, #0x39                  	// #57
    3958:	sub	x10, x10, x12, lsr #1
    395c:	cmp	x12, #0x1f
    3960:	csel	x10, xzr, x10, eq  // eq = none
    3964:	lsl	x12, x9, x10
    3968:	mov	x10, x13
    396c:	ldr	x13, [x13, #8]
    3970:	and	x13, x13, #0xfffffffffffffffc
    3974:	cmp	x13, x9
    3978:	b.eq	39c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11d0>  // b.none
    397c:	lsr	x13, x12, #60
    3980:	and	x13, x13, #0x8
    3984:	add	x14, x10, x13
    3988:	ldr	x13, [x14, #32]!
    398c:	lsl	x12, x12, #1
    3990:	cbnz	x13, 3968 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1174>
    3994:	ldr	x8, [x8, #552]
    3998:	cmp	x8, x14
    399c:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    39a0:	str	x11, [x14]
    39a4:	b	39b8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11c4>
    39a8:	orr	w8, w13, w14
    39ac:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    39b0:	str	w8, [x9, #532]
    39b4:	str	x11, [x10]
    39b8:	str	x10, [x11, #48]
    39bc:	stp	x11, x11, [x11, #16]
    39c0:	b	39ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f8>
    39c4:	ldr	x9, [x10, #16]
    39c8:	ldr	x8, [x8, #552]
    39cc:	cmp	x8, x9
    39d0:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    39d4:	cmp	x8, x10
    39d8:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    39dc:	str	x11, [x9, #24]
    39e0:	str	x11, [x10, #16]
    39e4:	stp	x9, x10, [x11, #16]
    39e8:	str	xzr, [x11, #48]
    39ec:	ldr	x8, [x23, #544]
    39f0:	subs	x8, x8, x22
    39f4:	b.hi	2c78 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x484>  // b.pmore
    39f8:	bl	1ad0 <__errno_location@plt>
    39fc:	mov	w8, #0xc                   	// #12
    3a00:	mov	x20, xzr
    3a04:	str	w8, [x0]
    3a08:	ldrb	w8, [x21, #1392]
    3a0c:	tbz	w8, #1, 3a1c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1228>
    3a10:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    3a14:	add	x0, x0, #0x578
    3a18:	bl	1b10 <pthread_mutex_unlock@plt>
    3a1c:	cbz	x20, 3a58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1264>
    3a20:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3a24:	add	x8, x8, #0x5a8
    3a28:	b	3a30 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x123c>
    3a2c:	ldr	x8, [x8, #16]
    3a30:	ldr	x9, [x8]
    3a34:	cmp	x9, x20
    3a38:	b.hi	3a2c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1238>  // b.pmore
    3a3c:	ldr	x10, [x8, #8]
    3a40:	add	x9, x9, x10
    3a44:	cmp	x9, x20
    3a48:	b.ls	3a2c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1238>  // b.plast
    3a4c:	ldr	x8, [x8, #24]
    3a50:	add	x8, x20, x8
    3a54:	str	x8, [x19]
    3a58:	mov	x0, x20
    3a5c:	ldp	x20, x19, [sp, #48]
    3a60:	ldp	x22, x21, [sp, #32]
    3a64:	ldp	x24, x23, [sp, #16]
    3a68:	ldp	x29, x30, [sp], #64
    3a6c:	ret
    3a70:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3a74:	add	x8, x8, #0x218
    3a78:	ldr	x12, [x8]
    3a7c:	str	x10, [x8, #24]
    3a80:	add	x20, x9, #0x10
    3a84:	add	x11, x12, x11
    3a88:	str	x11, [x8]
    3a8c:	orr	x8, x11, #0x1
    3a90:	str	x8, [x10, #8]
    3a94:	str	x11, [x10, x11]
    3a98:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    3a9c:	mov	x1, xzr
    3aa0:	cbnz	x0, 3514 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd20>
    3aa4:	b	381c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1028>
    3aa8:	ldr	x16, [x12, #24]
    3aac:	ldr	x15, [x12, #48]
    3ab0:	cmp	x16, x12
    3ab4:	b.eq	3af0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12fc>  // b.none
    3ab8:	ldr	x17, [x12, #16]
    3abc:	cmp	x14, x17
    3ac0:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3ac4:	str	x16, [x17, #24]
    3ac8:	str	x17, [x16, #16]
    3acc:	cbnz	x15, 3b34 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1340>
    3ad0:	b	3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3ad4:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    3ad8:	ldr	w15, [x14, #528]
    3adc:	mov	w16, #0x1                   	// #1
    3ae0:	lsl	w16, w16, w17
    3ae4:	bic	w15, w15, w16
    3ae8:	str	w15, [x14, #528]
    3aec:	b	3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3af0:	mov	x17, x12
    3af4:	ldr	x18, [x17, #40]!
    3af8:	cbnz	x18, 3b04 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1310>
    3afc:	ldr	x18, [x17, #-8]!
    3b00:	cbz	x18, 3db8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15c4>
    3b04:	mov	x0, x17
    3b08:	mov	x17, x18
    3b0c:	mov	x16, x18
    3b10:	ldr	x18, [x17, #40]!
    3b14:	cbnz	x18, 3b04 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1310>
    3b18:	mov	x17, x16
    3b1c:	ldr	x18, [x17, #32]!
    3b20:	cbnz	x18, 3b04 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1310>
    3b24:	cmp	x14, x0
    3b28:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3b2c:	str	xzr, [x0]
    3b30:	cbz	x15, 3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3b34:	ldr	x14, [x12, #56]
    3b38:	adrp	x17, 17000 <memcpy@GLIBC_2.17>
    3b3c:	add	x17, x17, #0x168
    3b40:	add	x17, x17, x14, lsl #3
    3b44:	ldr	x18, [x17, #760]
    3b48:	cmp	x18, x12
    3b4c:	b.eq	3b7c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1388>  // b.none
    3b50:	ldr	x14, [x8, #552]
    3b54:	cmp	x14, x15
    3b58:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3b5c:	ldr	x17, [x15, #32]
    3b60:	mov	w18, #0x28                  	// #40
    3b64:	cmp	x17, x12
    3b68:	mov	w17, #0x20                  	// #32
    3b6c:	csel	x17, x17, x18, eq  // eq = none
    3b70:	str	x16, [x15, x17]
    3b74:	cbnz	x16, 3b8c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1398>
    3b78:	b	3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3b7c:	add	x17, x17, #0x2f8
    3b80:	str	x16, [x17]
    3b84:	cbz	x16, 3bcc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13d8>
    3b88:	ldr	x14, [x8, #552]
    3b8c:	cmp	x14, x16
    3b90:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3b94:	str	x15, [x16, #48]
    3b98:	ldr	x15, [x12, #32]
    3b9c:	cbz	x15, 3bb0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13bc>
    3ba0:	cmp	x14, x15
    3ba4:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3ba8:	str	x15, [x16, #32]
    3bac:	str	x16, [x15, #48]
    3bb0:	ldr	x15, [x12, #40]
    3bb4:	cbz	x15, 3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3bb8:	cmp	x14, x15
    3bbc:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3bc0:	str	x15, [x16, #40]
    3bc4:	str	x16, [x15, #48]
    3bc8:	b	3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3bcc:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    3bd0:	ldr	w16, [x15, #532]
    3bd4:	mov	w17, #0x1                   	// #1
    3bd8:	lsl	w14, w17, w14
    3bdc:	bic	w14, w16, w14
    3be0:	str	w14, [x15, #532]
    3be4:	and	x13, x13, #0xfffffffffffffffc
    3be8:	add	x12, x12, x13
    3bec:	add	x11, x13, x11
    3bf0:	ldr	x13, [x12, #8]
    3bf4:	orr	x14, x11, #0x1
    3bf8:	cmp	x11, #0xff
    3bfc:	and	x13, x13, #0xfffffffffffffffe
    3c00:	str	x13, [x12, #8]
    3c04:	str	x14, [x10, #8]
    3c08:	str	x11, [x10, x11]
    3c0c:	b.hi	3c4c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1458>  // b.pmore
    3c10:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    3c14:	add	x13, x13, #0x210
    3c18:	ldr	w12, [x13]
    3c1c:	lsr	x11, x11, #3
    3c20:	add	x14, x13, x11, lsl #4
    3c24:	mov	w13, #0x1                   	// #1
    3c28:	lsl	w13, w13, w11
    3c2c:	tst	w12, w13
    3c30:	add	x11, x14, #0x40
    3c34:	b.eq	3c64 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1470>  // b.none
    3c38:	ldr	x12, [x11, #16]
    3c3c:	ldr	x8, [x8, #552]
    3c40:	cmp	x8, x12
    3c44:	b.ls	3c74 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1480>  // b.plast
    3c48:	b	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>
    3c4c:	lsr	x12, x11, #8
    3c50:	cbz	x12, 3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14ec>
    3c54:	lsr	x13, x11, #24
    3c58:	cbz	x13, 3c88 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1494>
    3c5c:	mov	w12, #0x1f                  	// #31
    3c60:	b	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14ec>
    3c64:	orr	w8, w12, w13
    3c68:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3c6c:	str	w8, [x12, #528]
    3c70:	mov	x12, x11
    3c74:	str	x10, [x11, #16]
    3c78:	str	x10, [x12, #24]
    3c7c:	stp	x12, x11, [x10, #16]
    3c80:	add	x20, x9, #0x10
    3c84:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    3c88:	mov	w13, #0xfff00               	// #1048320
    3c8c:	add	w13, w12, w13
    3c90:	lsr	w13, w13, #16
    3c94:	and	w13, w13, #0x8
    3c98:	lsl	w12, w12, w13
    3c9c:	add	w14, w12, #0x7f, lsl #12
    3ca0:	lsr	w14, w14, #16
    3ca4:	and	w14, w14, #0x4
    3ca8:	lsl	w12, w12, w14
    3cac:	orr	w13, w14, w13
    3cb0:	add	w14, w12, #0x3c, lsl #12
    3cb4:	lsr	w14, w14, #16
    3cb8:	and	w14, w14, #0x2
    3cbc:	lsl	w12, w12, w14
    3cc0:	orr	w13, w13, w14
    3cc4:	lsr	w12, w12, #15
    3cc8:	sub	w12, w12, w13
    3ccc:	lsl	w13, w12, #1
    3cd0:	add	w14, w12, #0x15
    3cd4:	add	w12, w13, #0x1c
    3cd8:	lsr	x13, x11, x14
    3cdc:	bfxil	x12, x13, #0, #1
    3ce0:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    3ce4:	add	x13, x13, #0x168
    3ce8:	str	x12, [x10, #56]
    3cec:	stp	xzr, xzr, [x10, #32]
    3cf0:	ldr	w14, [x13, #172]
    3cf4:	mov	w15, #0x1                   	// #1
    3cf8:	add	x13, x13, x12, lsl #3
    3cfc:	lsl	w15, w15, w12
    3d00:	tst	w14, w15
    3d04:	add	x13, x13, #0x2f8
    3d08:	b.eq	3d68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1574>  // b.none
    3d0c:	ldr	x14, [x13]
    3d10:	mov	w13, #0x39                  	// #57
    3d14:	sub	x13, x13, x12, lsr #1
    3d18:	cmp	x12, #0x1f
    3d1c:	csel	x12, xzr, x13, eq  // eq = none
    3d20:	lsl	x13, x11, x12
    3d24:	mov	x12, x14
    3d28:	ldr	x14, [x14, #8]
    3d2c:	and	x14, x14, #0xfffffffffffffffc
    3d30:	cmp	x14, x11
    3d34:	b.eq	3d88 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1594>  // b.none
    3d38:	lsr	x14, x13, #60
    3d3c:	and	x14, x14, #0x8
    3d40:	add	x15, x12, x14
    3d44:	ldr	x14, [x15, #32]!
    3d48:	lsl	x13, x13, #1
    3d4c:	cbnz	x14, 3d24 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1530>
    3d50:	ldr	x8, [x8, #552]
    3d54:	cmp	x8, x15
    3d58:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3d5c:	str	x10, [x15]
    3d60:	str	x12, [x10, #48]
    3d64:	b	3d7c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1588>
    3d68:	orr	w8, w14, w15
    3d6c:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3d70:	str	w8, [x11, #532]
    3d74:	str	x10, [x13]
    3d78:	str	x13, [x10, #48]
    3d7c:	stp	x10, x10, [x10, #16]
    3d80:	add	x20, x9, #0x10
    3d84:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    3d88:	ldr	x11, [x12, #16]
    3d8c:	ldr	x8, [x8, #552]
    3d90:	cmp	x8, x11
    3d94:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3d98:	cmp	x8, x12
    3d9c:	b.hi	3dc4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>  // b.pmore
    3da0:	str	x10, [x11, #24]
    3da4:	str	x10, [x12, #16]
    3da8:	stp	x11, x12, [x10, #16]
    3dac:	str	xzr, [x10, #48]
    3db0:	add	x20, x9, #0x10
    3db4:	b	3a08 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1214>
    3db8:	mov	x16, xzr
    3dbc:	cbnz	x15, 3b34 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1340>
    3dc0:	b	3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f0>
    3dc4:	bl	1a00 <abort@plt>
    3dc8:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3dcc:	add	x8, x8, #0x5a8
    3dd0:	b	3ddc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15e8>
    3dd4:	ldr	x8, [x8, #16]
    3dd8:	cbz	x8, 3e00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x160c>
    3ddc:	ldr	x9, [x8]
    3de0:	cmp	x9, x0
    3de4:	b.hi	3dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15e0>  // b.pmore
    3de8:	ldr	x10, [x8, #8]
    3dec:	add	x9, x9, x10
    3df0:	cmp	x9, x0
    3df4:	b.ls	3dd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15e0>  // b.plast
    3df8:	ldr	x8, [x8, #24]
    3dfc:	add	x0, x0, x8
    3e00:	ret

0000000000003e04 <ffi_closure_free@@LIBFFI_CLOSURE_7.0>:
    3e04:	sub	sp, sp, #0x70
    3e08:	stp	x29, x30, [sp, #16]
    3e0c:	stp	x28, x27, [sp, #32]
    3e10:	stp	x26, x25, [sp, #48]
    3e14:	stp	x24, x23, [sp, #64]
    3e18:	stp	x22, x21, [sp, #80]
    3e1c:	stp	x20, x19, [sp, #96]
    3e20:	add	x29, sp, #0x10
    3e24:	cbz	x0, 4a50 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc4c>
    3e28:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3e2c:	ldr	x8, [x8, #416]
    3e30:	mov	x19, x0
    3e34:	cbz	x8, 3e48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x44>
    3e38:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    3e3c:	ldrb	w8, [x21, #1392]
    3e40:	tbnz	w8, #1, 3e58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x54>
    3e44:	b	3e68 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x64>
    3e48:	bl	4ab4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcb0>
    3e4c:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    3e50:	ldrb	w8, [x21, #1392]
    3e54:	tbz	w8, #1, 3e68 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x64>
    3e58:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    3e5c:	add	x0, x0, #0x578
    3e60:	bl	1af0 <pthread_mutex_lock@plt>
    3e64:	cbnz	w0, 4a50 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc4c>
    3e68:	adrp	x22, 17000 <memcpy@GLIBC_2.17>
    3e6c:	ldr	x12, [x22, #552]
    3e70:	sub	x8, x19, #0x10
    3e74:	cmp	x8, x12
    3e78:	b.cc	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.lo, b.ul, b.last
    3e7c:	ldur	x11, [x19, #-8]
    3e80:	tbz	w11, #1, 4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>
    3e84:	and	x9, x11, #0xfffffffffffffffc
    3e88:	add	x10, x8, x9
    3e8c:	tbnz	w11, #0, 40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    3e90:	ldr	x14, [x8]
    3e94:	tbnz	w14, #0, 3f0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x108>
    3e98:	sub	x8, x8, x14
    3e9c:	cmp	x8, x12
    3ea0:	b.cc	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.lo, b.ul, b.last
    3ea4:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3ea8:	ldr	x11, [x11, #560]
    3eac:	add	x9, x14, x9
    3eb0:	cmp	x11, x8
    3eb4:	b.eq	3f88 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x184>  // b.none
    3eb8:	cmp	x14, #0xff
    3ebc:	b.hi	3fb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1b4>  // b.pmore
    3ec0:	ldp	x11, x13, [x8, #16]
    3ec4:	lsr	x14, x14, #3
    3ec8:	cmp	x11, x13
    3ecc:	b.eq	3fe4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1e0>  // b.none
    3ed0:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    3ed4:	add	x15, x15, #0x168
    3ed8:	add	x14, x15, x14, lsl #4
    3edc:	add	x14, x14, #0xe8
    3ee0:	cmp	x11, x14
    3ee4:	b.eq	3ef0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xec>  // b.none
    3ee8:	cmp	x12, x11
    3eec:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    3ef0:	cmp	x13, x14
    3ef4:	b.eq	3f00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfc>  // b.none
    3ef8:	cmp	x12, x13
    3efc:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    3f00:	str	x13, [x11, #24]
    3f04:	str	x11, [x13, #16]
    3f08:	b	40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    3f0c:	and	x10, x14, #0xfffffffffffffffe
    3f10:	add	x9, x9, x10
    3f14:	sub	x20, x8, x10
    3f18:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3f1c:	add	x19, x9, #0x20
    3f20:	add	x8, x8, #0x5a8
    3f24:	b	3f30 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12c>
    3f28:	ldr	x8, [x8, #16]
    3f2c:	cbz	x8, 3f64 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x160>
    3f30:	ldr	x9, [x8]
    3f34:	cmp	x9, x20
    3f38:	b.hi	3f28 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x124>  // b.pmore
    3f3c:	ldr	x10, [x8, #8]
    3f40:	add	x9, x9, x10
    3f44:	cmp	x9, x20
    3f48:	b.ls	3f28 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x124>  // b.plast
    3f4c:	ldr	x8, [x8, #24]
    3f50:	cbz	x8, 3f64 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x160>
    3f54:	add	x0, x20, x8
    3f58:	mov	x1, x19
    3f5c:	bl	1a80 <munmap@plt>
    3f60:	cbnz	w0, 4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    3f64:	mov	x0, x20
    3f68:	mov	x1, x19
    3f6c:	bl	1a80 <munmap@plt>
    3f70:	cbnz	w0, 4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    3f74:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3f78:	ldr	x9, [x8, #1376]
    3f7c:	sub	x9, x9, x19
    3f80:	str	x9, [x8, #1376]
    3f84:	b	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    3f88:	ldr	x11, [x10, #8]
    3f8c:	mvn	w12, w11
    3f90:	tst	x12, #0x3
    3f94:	b.ne	40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>  // b.any
    3f98:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3f9c:	and	x11, x11, #0xfffffffffffffffe
    3fa0:	orr	x13, x9, #0x1
    3fa4:	str	x9, [x12, #536]
    3fa8:	str	x11, [x10, #8]
    3fac:	str	x13, [x8, #8]
    3fb0:	str	x9, [x8, x9]
    3fb4:	b	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    3fb8:	ldr	x13, [x8, #24]
    3fbc:	ldr	x11, [x8, #48]
    3fc0:	cmp	x13, x8
    3fc4:	b.eq	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1fc>  // b.none
    3fc8:	ldr	x14, [x8, #16]
    3fcc:	cmp	x12, x14
    3fd0:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    3fd4:	str	x13, [x14, #24]
    3fd8:	str	x14, [x13, #16]
    3fdc:	cbnz	x11, 4044 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x240>
    3fe0:	b	40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    3fe4:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3fe8:	ldr	w12, [x11, #528]
    3fec:	mov	w13, #0x1                   	// #1
    3ff0:	lsl	w13, w13, w14
    3ff4:	bic	w12, w12, w13
    3ff8:	str	w12, [x11, #528]
    3ffc:	b	40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    4000:	mov	x14, x8
    4004:	ldr	x15, [x14, #40]!
    4008:	cbnz	x15, 4014 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x210>
    400c:	ldr	x15, [x14, #-8]!
    4010:	cbz	x15, 4a98 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc94>
    4014:	mov	x16, x14
    4018:	mov	x14, x15
    401c:	mov	x13, x15
    4020:	ldr	x15, [x14, #40]!
    4024:	cbnz	x15, 4014 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x210>
    4028:	mov	x14, x13
    402c:	ldr	x15, [x14, #32]!
    4030:	cbnz	x15, 4014 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x210>
    4034:	cmp	x12, x16
    4038:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    403c:	str	xzr, [x16]
    4040:	cbz	x11, 40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    4044:	ldr	x12, [x8, #56]
    4048:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    404c:	add	x14, x14, #0x168
    4050:	add	x14, x14, x12, lsl #3
    4054:	ldr	x15, [x14, #760]
    4058:	cmp	x15, x8
    405c:	b.eq	408c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x288>  // b.none
    4060:	ldr	x12, [x22, #552]
    4064:	cmp	x12, x11
    4068:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    406c:	ldr	x14, [x11, #32]
    4070:	mov	w15, #0x28                  	// #40
    4074:	cmp	x14, x8
    4078:	mov	w14, #0x20                  	// #32
    407c:	csel	x14, x14, x15, eq  // eq = none
    4080:	str	x13, [x11, x14]
    4084:	cbnz	x13, 409c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x298>
    4088:	b	40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    408c:	add	x14, x14, #0x2f8
    4090:	str	x13, [x14]
    4094:	cbz	x13, 40dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2d8>
    4098:	ldr	x12, [x22, #552]
    409c:	cmp	x12, x13
    40a0:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    40a4:	str	x11, [x13, #48]
    40a8:	ldr	x11, [x8, #32]
    40ac:	cbz	x11, 40c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2bc>
    40b0:	cmp	x12, x11
    40b4:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    40b8:	str	x11, [x13, #32]
    40bc:	str	x13, [x11, #48]
    40c0:	ldr	x11, [x8, #40]
    40c4:	cbz	x11, 40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    40c8:	cmp	x12, x11
    40cc:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    40d0:	str	x11, [x13, #40]
    40d4:	str	x13, [x11, #48]
    40d8:	b	40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    40dc:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    40e0:	ldr	w13, [x11, #532]
    40e4:	mov	w14, #0x1                   	// #1
    40e8:	lsl	w12, w14, w12
    40ec:	bic	w12, w13, w12
    40f0:	str	w12, [x11, #532]
    40f4:	cmp	x10, x8
    40f8:	b.ls	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.plast
    40fc:	ldr	x11, [x10, #8]
    4100:	tbz	w11, #0, 4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>
    4104:	tbnz	w11, #1, 4168 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x364>
    4108:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    410c:	ldr	x12, [x12, #568]
    4110:	cmp	x12, x10
    4114:	b.eq	41d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3d4>  // b.none
    4118:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    411c:	ldr	x13, [x12, #560]
    4120:	cmp	x13, x10
    4124:	b.eq	427c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x478>  // b.none
    4128:	cmp	x11, #0xff
    412c:	b.hi	42c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4c0>  // b.pmore
    4130:	ldp	x13, x10, [x10, #16]
    4134:	lsr	x14, x11, #3
    4138:	cmp	x13, x10
    413c:	b.eq	441c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x618>  // b.none
    4140:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    4144:	add	x15, x15, #0x168
    4148:	add	x14, x15, x14, lsl #4
    414c:	add	x14, x14, #0xe8
    4150:	cmp	x13, x14
    4154:	b.eq	48b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xab0>  // b.none
    4158:	ldr	x15, [x22, #552]
    415c:	cmp	x15, x13
    4160:	b.ls	48b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xab4>  // b.plast
    4164:	b	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>
    4168:	and	x11, x11, #0xfffffffffffffffe
    416c:	orr	x12, x9, #0x1
    4170:	str	x11, [x10, #8]
    4174:	str	x12, [x8, #8]
    4178:	str	x9, [x8, x9]
    417c:	cmp	x9, #0xff
    4180:	b.hi	41c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3bc>  // b.pmore
    4184:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    4188:	add	x11, x11, #0x210
    418c:	ldr	w10, [x11]
    4190:	lsr	x9, x9, #3
    4194:	add	x12, x11, x9, lsl #4
    4198:	mov	w11, #0x1                   	// #1
    419c:	lsl	w11, w11, w9
    41a0:	tst	w10, w11
    41a4:	add	x9, x12, #0x40
    41a8:	b.eq	42a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4a0>  // b.none
    41ac:	ldr	x10, [x9, #16]
    41b0:	ldr	x11, [x22, #552]
    41b4:	cmp	x11, x10
    41b8:	b.ls	42b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4b0>  // b.plast
    41bc:	b	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>
    41c0:	lsr	x10, x9, #8
    41c4:	cbz	x10, 434c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x548>
    41c8:	lsr	x11, x9, #24
    41cc:	cbz	x11, 42f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4f0>
    41d0:	mov	w10, #0x1f                  	// #31
    41d4:	b	434c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x548>
    41d8:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    41dc:	add	x10, x10, #0x220
    41e0:	ldr	x11, [x10]
    41e4:	str	x8, [x10, #24]
    41e8:	add	x9, x11, x9
    41ec:	orr	x11, x9, #0x1
    41f0:	str	x9, [x10]
    41f4:	str	x11, [x8, #8]
    41f8:	ldr	x10, [x10, #16]
    41fc:	cmp	x8, x10
    4200:	b.ne	4214 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x410>  // b.any
    4204:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4208:	add	x10, x10, #0x218
    420c:	str	xzr, [x10, #24]
    4210:	str	xzr, [x10]
    4214:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4218:	ldr	x10, [x10, #576]
    421c:	cmp	x9, x10
    4220:	b.ls	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>  // b.plast
    4224:	cmp	x9, #0x49
    4228:	b.cc	4504 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x700>  // b.lo, b.ul, b.last
    422c:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4230:	add	x10, x10, #0x1a8
    4234:	ldr	x11, [x10]
    4238:	add	x23, x10, #0x400
    423c:	add	x9, x9, x11
    4240:	sub	x9, x9, #0x49
    4244:	udiv	x9, x9, x11
    4248:	sub	x9, x9, #0x1
    424c:	mul	x19, x9, x11
    4250:	b	425c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x458>
    4254:	ldr	x23, [x23, #16]
    4258:	cbz	x23, 44c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6c4>
    425c:	ldr	x10, [x23]
    4260:	cmp	x10, x8
    4264:	b.hi	4254 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x450>  // b.pmore
    4268:	ldr	x9, [x23, #8]
    426c:	add	x10, x10, x9
    4270:	cmp	x10, x8
    4274:	b.ls	4254 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x450>  // b.plast
    4278:	b	44d0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6cc>
    427c:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4280:	add	x10, x10, #0x218
    4284:	ldr	x11, [x10]
    4288:	str	x8, [x10, #24]
    428c:	add	x9, x11, x9
    4290:	str	x9, [x10]
    4294:	orr	x10, x9, #0x1
    4298:	str	x10, [x8, #8]
    429c:	str	x9, [x8, x9]
    42a0:	b	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    42a4:	orr	w10, w10, w11
    42a8:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    42ac:	str	w10, [x11, #528]
    42b0:	mov	x10, x9
    42b4:	str	x8, [x9, #16]
    42b8:	str	x8, [x10, #24]
    42bc:	stp	x10, x9, [x8, #16]
    42c0:	b	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    42c4:	ldr	x14, [x10, #24]
    42c8:	ldr	x13, [x10, #48]
    42cc:	cmp	x14, x10
    42d0:	b.eq	4438 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x634>  // b.none
    42d4:	ldr	x15, [x10, #16]
    42d8:	ldr	x16, [x22, #552]
    42dc:	cmp	x16, x15
    42e0:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    42e4:	str	x14, [x15, #24]
    42e8:	str	x15, [x14, #16]
    42ec:	cbnz	x13, 4480 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x67c>
    42f0:	b	4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    42f4:	mov	w11, #0xfff00               	// #1048320
    42f8:	add	w11, w10, w11
    42fc:	lsr	w11, w11, #16
    4300:	and	w11, w11, #0x8
    4304:	lsl	w10, w10, w11
    4308:	add	w12, w10, #0x7f, lsl #12
    430c:	lsr	w12, w12, #16
    4310:	and	w12, w12, #0x4
    4314:	lsl	w10, w10, w12
    4318:	orr	w11, w12, w11
    431c:	add	w12, w10, #0x3c, lsl #12
    4320:	lsr	w12, w12, #16
    4324:	and	w12, w12, #0x2
    4328:	lsl	w10, w10, w12
    432c:	orr	w11, w11, w12
    4330:	lsr	w10, w10, #15
    4334:	sub	w10, w10, w11
    4338:	lsl	w11, w10, #1
    433c:	add	w12, w10, #0x15
    4340:	add	w10, w11, #0x1c
    4344:	lsr	x11, x9, x12
    4348:	bfxil	x10, x11, #0, #1
    434c:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    4350:	add	x11, x11, #0x168
    4354:	str	x10, [x8, #56]
    4358:	stp	xzr, xzr, [x8, #32]
    435c:	ldr	w12, [x11, #172]
    4360:	mov	w13, #0x1                   	// #1
    4364:	add	x11, x11, x10, lsl #3
    4368:	lsl	w13, w13, w10
    436c:	tst	w12, w13
    4370:	add	x11, x11, #0x2f8
    4374:	b.eq	43d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5d0>  // b.none
    4378:	ldr	x12, [x11]
    437c:	mov	w11, #0x39                  	// #57
    4380:	sub	x11, x11, x10, lsr #1
    4384:	cmp	x10, #0x1f
    4388:	csel	x10, xzr, x11, eq  // eq = none
    438c:	lsl	x11, x9, x10
    4390:	mov	x10, x12
    4394:	ldr	x12, [x12, #8]
    4398:	and	x12, x12, #0xfffffffffffffffc
    439c:	cmp	x12, x9
    43a0:	b.eq	43f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5ec>  // b.none
    43a4:	lsr	x12, x11, #60
    43a8:	and	x12, x12, #0x8
    43ac:	add	x13, x10, x12
    43b0:	ldr	x12, [x13, #32]!
    43b4:	lsl	x11, x11, #1
    43b8:	cbnz	x12, 4390 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x58c>
    43bc:	ldr	x9, [x22, #552]
    43c0:	cmp	x9, x13
    43c4:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    43c8:	str	x8, [x13]
    43cc:	str	x10, [x8, #48]
    43d0:	b	43e8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5e4>
    43d4:	orr	w9, w12, w13
    43d8:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    43dc:	str	w9, [x10, #532]
    43e0:	str	x8, [x11]
    43e4:	str	x11, [x8, #48]
    43e8:	stp	x8, x8, [x8, #16]
    43ec:	b	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    43f0:	ldr	x9, [x10, #16]
    43f4:	ldr	x11, [x22, #552]
    43f8:	cmp	x11, x9
    43fc:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4400:	cmp	x11, x10
    4404:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4408:	str	x8, [x9, #24]
    440c:	str	x8, [x10, #16]
    4410:	stp	x9, x10, [x8, #16]
    4414:	str	xzr, [x8, #48]
    4418:	b	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    441c:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4420:	ldr	w13, [x10, #528]
    4424:	mov	w15, #0x1                   	// #1
    4428:	lsl	w14, w15, w14
    442c:	bic	w13, w13, w14
    4430:	str	w13, [x10, #528]
    4434:	b	4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    4438:	mov	x15, x10
    443c:	ldr	x16, [x15, #40]!
    4440:	cbnz	x16, 444c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x648>
    4444:	ldr	x16, [x15, #-8]!
    4448:	cbz	x16, 4aa4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xca0>
    444c:	mov	x17, x15
    4450:	mov	x15, x16
    4454:	mov	x14, x16
    4458:	ldr	x16, [x15, #40]!
    445c:	cbnz	x16, 444c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x648>
    4460:	mov	x15, x14
    4464:	ldr	x16, [x15, #32]!
    4468:	cbnz	x16, 444c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x648>
    446c:	ldr	x15, [x22, #552]
    4470:	cmp	x15, x17
    4474:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4478:	str	xzr, [x17]
    447c:	cbz	x13, 4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    4480:	ldr	x15, [x10, #56]
    4484:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    4488:	add	x16, x16, #0x168
    448c:	add	x16, x16, x15, lsl #3
    4490:	ldr	x17, [x16, #760]
    4494:	cmp	x17, x10
    4498:	b.eq	48d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xad0>  // b.none
    449c:	ldr	x15, [x22, #552]
    44a0:	cmp	x15, x13
    44a4:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    44a8:	ldr	x16, [x13, #32]
    44ac:	mov	w17, #0x28                  	// #40
    44b0:	cmp	x16, x10
    44b4:	mov	w16, #0x20                  	// #32
    44b8:	csel	x16, x16, x17, eq  // eq = none
    44bc:	str	x14, [x13, x16]
    44c0:	cbnz	x14, 48e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xae0>
    44c4:	b	4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    44c8:	mov	w8, #0x8                   	// #8
    44cc:	ldr	x9, [x8]
    44d0:	subs	x8, x9, x19
    44d4:	b.cc	4504 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x700>  // b.lo, b.ul, b.last
    44d8:	ldr	x10, [x23]
    44dc:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    44e0:	add	x11, x11, #0x5a8
    44e4:	add	x9, x10, x9
    44e8:	b	44f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6f0>
    44ec:	ldr	x11, [x11, #16]
    44f0:	cbz	x11, 4924 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb20>
    44f4:	cmp	x10, x11
    44f8:	b.hi	44ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6e8>  // b.pmore
    44fc:	cmp	x9, x11
    4500:	b.ls	44ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6e8>  // b.plast
    4504:	mov	x8, xzr
    4508:	str	x8, [sp]
    450c:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4510:	ldr	x28, [x8, #1464]
    4514:	cbz	x28, 4894 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa90>
    4518:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    451c:	add	x24, x24, #0x5a8
    4520:	str	xzr, [sp, #8]
    4524:	ldr	x19, [x28]
    4528:	mov	x23, x28
    452c:	ldr	x28, [x28, #16]
    4530:	add	x8, x19, #0x10
    4534:	neg	w9, w8
    4538:	and	x9, x9, #0x7
    453c:	tst	x8, #0x7
    4540:	csel	x8, xzr, x9, eq  // eq = none
    4544:	add	x27, x19, x8
    4548:	ldr	x25, [x27, #8]
    454c:	tbnz	w25, #1, 4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa44>
    4550:	ldr	x20, [x23, #8]
    4554:	and	x26, x25, #0xfffffffffffffffc
    4558:	add	x8, x27, x26
    455c:	add	x9, x19, x20
    4560:	sub	x9, x9, #0x48
    4564:	cmp	x8, x9
    4568:	b.cc	4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa44>  // b.lo, b.ul, b.last
    456c:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4570:	ldr	x8, [x8, #560]
    4574:	cmp	x8, x27
    4578:	b.eq	45ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7a8>  // b.none
    457c:	ldr	x9, [x27, #24]
    4580:	ldr	x8, [x27, #48]
    4584:	cmp	x9, x27
    4588:	b.eq	45c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7bc>  // b.none
    458c:	ldr	x10, [x27, #16]
    4590:	ldr	x11, [x22, #552]
    4594:	cmp	x11, x10
    4598:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    459c:	str	x9, [x10, #24]
    45a0:	str	x10, [x9, #16]
    45a4:	cbnz	x8, 4608 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x804>
    45a8:	b	46b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    45ac:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    45b0:	add	x8, x8, #0x218
    45b4:	str	xzr, [x8, #24]
    45b8:	str	xzr, [x8]
    45bc:	b	46b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    45c0:	mov	x10, x27
    45c4:	ldr	x11, [x10, #40]!
    45c8:	cbnz	x11, 45d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7d0>
    45cc:	ldr	x11, [x10, #-8]!
    45d0:	cbz	x11, 4888 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa84>
    45d4:	mov	x12, x10
    45d8:	mov	x10, x11
    45dc:	mov	x9, x11
    45e0:	ldr	x11, [x10, #40]!
    45e4:	cbnz	x11, 45d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7d0>
    45e8:	mov	x10, x9
    45ec:	ldr	x11, [x10, #32]!
    45f0:	cbnz	x11, 45d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7d0>
    45f4:	ldr	x10, [x22, #552]
    45f8:	cmp	x10, x12
    45fc:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4600:	str	xzr, [x12]
    4604:	cbz	x8, 46b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    4608:	ldr	x10, [x27, #56]
    460c:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    4610:	add	x11, x11, #0x168
    4614:	add	x11, x11, x10, lsl #3
    4618:	ldr	x12, [x11, #760]
    461c:	cmp	x12, x27
    4620:	b.eq	4650 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x84c>  // b.none
    4624:	ldr	x10, [x22, #552]
    4628:	cmp	x10, x8
    462c:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4630:	ldr	x11, [x8, #32]
    4634:	mov	w12, #0x20                  	// #32
    4638:	cmp	x11, x27
    463c:	mov	w11, #0x28                  	// #40
    4640:	csel	x11, x12, x11, eq  // eq = none
    4644:	str	x9, [x8, x11]
    4648:	cbnz	x9, 4660 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x85c>
    464c:	b	46b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    4650:	add	x11, x11, #0x2f8
    4654:	str	x9, [x11]
    4658:	cbz	x9, 46a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x89c>
    465c:	ldr	x10, [x22, #552]
    4660:	cmp	x10, x9
    4664:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4668:	str	x8, [x9, #48]
    466c:	ldr	x8, [x27, #32]
    4670:	cbz	x8, 4684 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x880>
    4674:	cmp	x10, x8
    4678:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    467c:	str	x8, [x9, #32]
    4680:	str	x9, [x8, #48]
    4684:	ldr	x8, [x27, #40]
    4688:	cbz	x8, 46b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    468c:	cmp	x10, x8
    4690:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4694:	str	x8, [x9, #40]
    4698:	str	x9, [x8, #48]
    469c:	b	46b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    46a0:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    46a4:	ldr	w8, [x11, #532]
    46a8:	mov	w9, #0x1                   	// #1
    46ac:	lsl	w9, w9, w10
    46b0:	bic	w8, w8, w9
    46b4:	str	w8, [x11, #532]
    46b8:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    46bc:	add	x8, x8, #0x5a8
    46c0:	b	46cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8c8>
    46c4:	ldr	x8, [x8, #16]
    46c8:	cbz	x8, 4700 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8fc>
    46cc:	ldr	x9, [x8]
    46d0:	cmp	x9, x19
    46d4:	b.hi	46c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8c0>  // b.pmore
    46d8:	ldr	x10, [x8, #8]
    46dc:	add	x9, x9, x10
    46e0:	cmp	x9, x19
    46e4:	b.ls	46c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8c0>  // b.plast
    46e8:	ldr	x8, [x8, #24]
    46ec:	cbz	x8, 4700 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8fc>
    46f0:	add	x0, x19, x8
    46f4:	mov	x1, x20
    46f8:	bl	1a80 <munmap@plt>
    46fc:	cbnz	w0, 4710 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x90c>
    4700:	mov	x0, x19
    4704:	mov	x1, x20
    4708:	bl	1a80 <munmap@plt>
    470c:	cbz	w0, 4728 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x924>
    4710:	lsr	x8, x25, #8
    4714:	cbz	x8, 47a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9a4>
    4718:	lsr	x9, x25, #24
    471c:	cbz	x9, 4750 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x94c>
    4720:	mov	w8, #0x1f                  	// #31
    4724:	b	47a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9a4>
    4728:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    472c:	ldr	x8, [x10, #1376]
    4730:	ldr	x9, [sp, #8]
    4734:	sub	x8, x8, x20
    4738:	add	x9, x20, x9
    473c:	str	x9, [sp, #8]
    4740:	str	x8, [x10, #1376]
    4744:	str	x28, [x24, #16]
    4748:	cbnz	x28, 4524 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x720>
    474c:	b	4898 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa94>
    4750:	mov	w9, #0xfff00               	// #1048320
    4754:	add	w9, w8, w9
    4758:	lsr	w9, w9, #16
    475c:	and	w9, w9, #0x8
    4760:	lsl	w8, w8, w9
    4764:	add	w10, w8, #0x7f, lsl #12
    4768:	lsr	w10, w10, #16
    476c:	and	w10, w10, #0x4
    4770:	lsl	w8, w8, w10
    4774:	orr	w9, w10, w9
    4778:	add	w10, w8, #0x3c, lsl #12
    477c:	lsr	w10, w10, #16
    4780:	and	w10, w10, #0x2
    4784:	lsl	w8, w8, w10
    4788:	orr	w9, w9, w10
    478c:	lsr	w8, w8, #15
    4790:	sub	w8, w8, w9
    4794:	lsl	w9, w8, #1
    4798:	add	w10, w8, #0x15
    479c:	add	w8, w9, #0x1c
    47a0:	lsr	x9, x26, x10
    47a4:	bfxil	x8, x9, #0, #1
    47a8:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    47ac:	str	x8, [x27, #56]
    47b0:	stp	xzr, xzr, [x27, #32]
    47b4:	add	x9, x9, #0x168
    47b8:	ldr	w10, [x9, #172]
    47bc:	mov	w11, #0x1                   	// #1
    47c0:	add	x9, x9, x8, lsl #3
    47c4:	lsl	w11, w11, w8
    47c8:	tst	w10, w11
    47cc:	add	x9, x9, #0x2f8
    47d0:	b.eq	4830 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa2c>  // b.none
    47d4:	ldr	x10, [x9]
    47d8:	mov	w9, #0x39                  	// #57
    47dc:	sub	x9, x9, x8, lsr #1
    47e0:	cmp	x8, #0x1f
    47e4:	csel	x8, xzr, x9, eq  // eq = none
    47e8:	lsl	x9, x26, x8
    47ec:	mov	x8, x10
    47f0:	ldr	x10, [x10, #8]
    47f4:	and	x10, x10, #0xfffffffffffffffc
    47f8:	cmp	x10, x26
    47fc:	b.eq	4854 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa50>  // b.none
    4800:	lsr	x10, x9, #60
    4804:	and	x10, x10, #0x8
    4808:	add	x11, x8, x10
    480c:	ldr	x10, [x11, #32]!
    4810:	lsl	x9, x9, #1
    4814:	cbnz	x10, 47ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9e8>
    4818:	ldr	x9, [x22, #552]
    481c:	cmp	x9, x11
    4820:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4824:	str	x27, [x11]
    4828:	str	x8, [x27, #48]
    482c:	b	4844 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa40>
    4830:	orr	w8, w10, w11
    4834:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4838:	str	w8, [x10, #532]
    483c:	str	x27, [x9]
    4840:	str	x9, [x27, #48]
    4844:	stp	x27, x27, [x27, #16]
    4848:	mov	x24, x23
    484c:	cbnz	x28, 4524 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x720>
    4850:	b	4898 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa94>
    4854:	ldr	x9, [x8, #16]
    4858:	ldr	x10, [x22, #552]
    485c:	cmp	x10, x9
    4860:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4864:	cmp	x10, x8
    4868:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    486c:	str	x27, [x9, #24]
    4870:	str	x27, [x8, #16]
    4874:	stp	x9, x8, [x27, #16]
    4878:	str	xzr, [x27, #48]
    487c:	mov	x24, x23
    4880:	cbnz	x28, 4524 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x720>
    4884:	b	4898 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa94>
    4888:	mov	x9, xzr
    488c:	cbnz	x8, 4608 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x804>
    4890:	b	46b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    4894:	str	xzr, [sp, #8]
    4898:	ldp	x8, x9, [sp]
    489c:	cmn	x8, x9
    48a0:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    48a4:	b.ne	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>  // b.any
    48a8:	mov	x8, #0xffffffffffffffff    	// #-1
    48ac:	str	x8, [x9, #576]
    48b0:	b	4a48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc44>
    48b4:	ldr	x15, [x22, #552]
    48b8:	cmp	x10, x14
    48bc:	b.eq	48c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xac4>  // b.none
    48c0:	cmp	x15, x10
    48c4:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    48c8:	str	x10, [x13, #24]
    48cc:	str	x13, [x10, #16]
    48d0:	b	4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    48d4:	add	x16, x16, #0x2f8
    48d8:	str	x14, [x16]
    48dc:	cbz	x14, 4a08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc04>
    48e0:	ldr	x15, [x22, #552]
    48e4:	cmp	x15, x14
    48e8:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    48ec:	str	x13, [x14, #48]
    48f0:	ldr	x13, [x10, #32]
    48f4:	cbz	x13, 4908 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb04>
    48f8:	cmp	x15, x13
    48fc:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4900:	str	x13, [x14, #32]
    4904:	str	x14, [x13, #48]
    4908:	ldr	x10, [x10, #40]
    490c:	cbz	x10, 4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    4910:	cmp	x15, x10
    4914:	b.hi	4ab0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcac>  // b.pmore
    4918:	str	x10, [x14, #40]
    491c:	str	x14, [x10, #48]
    4920:	b	4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    4924:	add	x20, x10, x8
    4928:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    492c:	add	x8, x8, #0x5a8
    4930:	b	493c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb38>
    4934:	ldr	x8, [x8, #16]
    4938:	cbz	x8, 4970 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb6c>
    493c:	ldr	x9, [x8]
    4940:	cmp	x9, x20
    4944:	b.hi	4934 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb30>  // b.pmore
    4948:	ldr	x10, [x8, #8]
    494c:	add	x9, x9, x10
    4950:	cmp	x9, x20
    4954:	b.ls	4934 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb30>  // b.plast
    4958:	ldr	x8, [x8, #24]
    495c:	cbz	x8, 4970 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb6c>
    4960:	add	x0, x20, x8
    4964:	mov	x1, x19
    4968:	bl	1a80 <munmap@plt>
    496c:	cbnz	w0, 4504 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x700>
    4970:	mov	x0, x20
    4974:	mov	x1, x19
    4978:	bl	1a80 <munmap@plt>
    497c:	mov	x8, xzr
    4980:	cbz	x19, 4508 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x704>
    4984:	cbnz	w0, 4508 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x704>
    4988:	ldr	x8, [x23, #8]
    498c:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    4990:	add	x9, x9, #0x178
    4994:	sub	x8, x8, x19
    4998:	str	x8, [x23, #8]
    499c:	ldr	x8, [x9, #1000]
    49a0:	ldr	x11, [x9, #192]
    49a4:	ldr	x10, [x9, #168]
    49a8:	sub	x8, x8, x19
    49ac:	add	x12, x11, #0x10
    49b0:	str	x8, [x9, #1000]
    49b4:	neg	w8, w12
    49b8:	tst	x12, #0x7
    49bc:	and	x8, x8, #0x7
    49c0:	sub	x10, x10, x19
    49c4:	csel	x8, xzr, x8, eq  // eq = none
    49c8:	add	x12, x11, x10
    49cc:	add	x11, x11, x8
    49d0:	sub	x8, x10, x8
    49d4:	mov	w10, #0x48                  	// #72
    49d8:	str	x8, [x9, #168]
    49dc:	orr	x8, x8, #0x1
    49e0:	str	x11, [x9, #192]
    49e4:	str	x8, [x11, #8]
    49e8:	str	x10, [x12, #8]
    49ec:	ldrb	w8, [x9]
    49f0:	cmp	w8, #0x0
    49f4:	mov	w8, #0x200000              	// #2097152
    49f8:	csel	x8, x8, xzr, ne  // ne = any
    49fc:	str	x8, [x9, #200]
    4a00:	mov	x8, x19
    4a04:	b	4508 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x704>
    4a08:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4a0c:	ldr	w13, [x10, #532]
    4a10:	mov	w14, #0x1                   	// #1
    4a14:	lsl	w14, w14, w15
    4a18:	bic	w13, w13, w14
    4a1c:	str	w13, [x10, #532]
    4a20:	and	x10, x11, #0xfffffffffffffffc
    4a24:	add	x9, x10, x9
    4a28:	orr	x10, x9, #0x1
    4a2c:	str	x10, [x8, #8]
    4a30:	str	x9, [x8, x9]
    4a34:	ldr	x10, [x12, #560]
    4a38:	cmp	x8, x10
    4a3c:	b.ne	417c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x378>  // b.any
    4a40:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4a44:	str	x9, [x8, #536]
    4a48:	ldrb	w8, [x21, #1392]
    4a4c:	tbnz	w8, #1, 4a70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc6c>
    4a50:	ldp	x20, x19, [sp, #96]
    4a54:	ldp	x22, x21, [sp, #80]
    4a58:	ldp	x24, x23, [sp, #64]
    4a5c:	ldp	x26, x25, [sp, #48]
    4a60:	ldp	x28, x27, [sp, #32]
    4a64:	ldp	x29, x30, [sp, #16]
    4a68:	add	sp, sp, #0x70
    4a6c:	ret
    4a70:	ldp	x20, x19, [sp, #96]
    4a74:	ldp	x22, x21, [sp, #80]
    4a78:	ldp	x24, x23, [sp, #64]
    4a7c:	ldp	x26, x25, [sp, #48]
    4a80:	ldp	x28, x27, [sp, #32]
    4a84:	ldp	x29, x30, [sp, #16]
    4a88:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    4a8c:	add	x0, x0, #0x578
    4a90:	add	sp, sp, #0x70
    4a94:	b	1b10 <pthread_mutex_unlock@plt>
    4a98:	mov	x13, xzr
    4a9c:	cbnz	x11, 4044 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x240>
    4aa0:	b	40f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f0>
    4aa4:	mov	x14, xzr
    4aa8:	cbnz	x13, 4480 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x67c>
    4aac:	b	4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc1c>
    4ab0:	bl	1a00 <abort@plt>
    4ab4:	stp	x29, x30, [sp, #-48]!
    4ab8:	stp	x20, x19, [sp, #32]
    4abc:	adrp	x19, 17000 <memcpy@GLIBC_2.17>
    4ac0:	ldr	x8, [x19, #416]
    4ac4:	str	x21, [sp, #16]
    4ac8:	mov	x29, sp
    4acc:	cbnz	x8, 4b78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd74>
    4ad0:	adrp	x20, 17000 <memcpy@GLIBC_2.17>
    4ad4:	add	x20, x20, #0x168
    4ad8:	mov	w21, #0x1                   	// #1
    4adc:	add	x0, x20, #0x48
    4ae0:	strb	w21, [x20, #8]
    4ae4:	strb	w21, [x20, #16]
    4ae8:	strb	w21, [x20, #24]
    4aec:	bl	1af0 <pthread_mutex_lock@plt>
    4af0:	ldrb	w8, [x20]
    4af4:	tbnz	w8, #0, 4b1c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd18>
    4af8:	add	x0, x20, #0x410
    4afc:	mov	x1, xzr
    4b00:	strb	w21, [x20]
    4b04:	bl	19c0 <pthread_mutex_init@plt>
    4b08:	ldrb	w8, [x20, #24]
    4b0c:	cmp	w8, #0x0
    4b10:	mov	w8, #0x7                   	// #7
    4b14:	csel	w8, w8, wzr, ne  // ne = any
    4b18:	str	w8, [x20, #1032]
    4b1c:	adrp	x20, 17000 <memcpy@GLIBC_2.17>
    4b20:	add	x20, x20, #0x1a0
    4b24:	add	x0, x20, #0x10
    4b28:	bl	1b10 <pthread_mutex_unlock@plt>
    4b2c:	mov	w0, #0x1e                  	// #30
    4b30:	bl	1aa0 <sysconf@plt>
    4b34:	str	x0, [x20]
    4b38:	mov	w0, #0x1e                  	// #30
    4b3c:	bl	1aa0 <sysconf@plt>
    4b40:	cbz	x0, 4b50 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd4c>
    4b44:	mov	w0, #0x1e                  	// #30
    4b48:	bl	1aa0 <sysconf@plt>
    4b4c:	b	4b54 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd50>
    4b50:	ldr	x0, [x19, #416]
    4b54:	sub	x9, x0, #0x1
    4b58:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4b5c:	tst	x0, x9
    4b60:	str	x0, [x8, #424]
    4b64:	b.ne	4b88 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd84>  // b.any
    4b68:	ldr	x8, [x19, #416]
    4b6c:	sub	x9, x8, #0x1
    4b70:	tst	x8, x9
    4b74:	b.ne	4b88 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd84>  // b.any
    4b78:	ldp	x20, x19, [sp, #32]
    4b7c:	ldr	x21, [sp, #16]
    4b80:	ldp	x29, x30, [sp], #48
    4b84:	ret
    4b88:	bl	1a00 <abort@plt>
    4b8c:	sub	sp, sp, #0xd0
    4b90:	stp	x29, x30, [sp, #144]
    4b94:	stp	x24, x23, [sp, #160]
    4b98:	stp	x22, x21, [sp, #176]
    4b9c:	stp	x20, x19, [sp, #192]
    4ba0:	add	x29, sp, #0x90
    4ba4:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    4ba8:	ldr	w8, [x23, #336]
    4bac:	mov	x19, x0
    4bb0:	cmn	w8, #0x1
    4bb4:	b.eq	4c20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe1c>  // b.none
    4bb8:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4bbc:	ldr	x8, [x8, #392]
    4bc0:	cbz	x8, 4be0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xddc>
    4bc4:	ldr	w8, [x23, #336]
    4bc8:	cmn	w8, #0x1
    4bcc:	b.eq	4be0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xddc>  // b.none
    4bd0:	mov	x0, x19
    4bd4:	bl	4d80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf7c>
    4bd8:	mov	x20, x0
    4bdc:	b	4c04 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe00>
    4be0:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    4be4:	add	x21, x21, #0x1e0
    4be8:	mov	x0, x21
    4bec:	bl	1af0 <pthread_mutex_lock@plt>
    4bf0:	mov	x0, x19
    4bf4:	bl	4d80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf7c>
    4bf8:	mov	x20, x0
    4bfc:	mov	x0, x21
    4c00:	bl	1b10 <pthread_mutex_unlock@plt>
    4c04:	mov	x0, x20
    4c08:	ldp	x20, x19, [sp, #192]
    4c0c:	ldp	x22, x21, [sp, #176]
    4c10:	ldp	x24, x23, [sp, #160]
    4c14:	ldp	x29, x30, [sp, #144]
    4c18:	add	sp, sp, #0xd0
    4c1c:	ret
    4c20:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    4c24:	ldr	w8, [x24, #340]
    4c28:	tbnz	w8, #31, 4c34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe30>
    4c2c:	cbnz	w8, 4bb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb4>
    4c30:	b	4d18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf14>
    4c34:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    4c38:	add	x0, x0, #0x230
    4c3c:	add	x1, sp, #0x18
    4c40:	stp	xzr, xzr, [sp, #8]
    4c44:	bl	1940 <statfs@plt>
    4c48:	tbnz	w0, #31, 4c70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe6c>
    4c4c:	ldr	w8, [sp, #24]
    4c50:	mov	w9, #0xff8c                	// #65420
    4c54:	movk	w9, #0xf97c, lsl #16
    4c58:	cmp	w8, w9
    4c5c:	b.ne	4c70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe6c>  // b.any
    4c60:	mov	w8, #0x1                   	// #1
    4c64:	str	w8, [x24, #340]
    4c68:	cbnz	w8, 4bb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb4>
    4c6c:	b	4d18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf14>
    4c70:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    4c74:	adrp	x1, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    4c78:	add	x0, x0, #0x239
    4c7c:	add	x1, x1, #0x246
    4c80:	bl	1960 <fopen@plt>
    4c84:	cbz	x0, 4d0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf08>
    4c88:	mov	x20, x0
    4c8c:	add	x0, sp, #0x10
    4c90:	add	x1, sp, #0x8
    4c94:	mov	w2, #0xa                   	// #10
    4c98:	mov	x3, x20
    4c9c:	bl	1b00 <__getdelim@plt>
    4ca0:	tbnz	x0, #63, 4cfc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xef8>
    4ca4:	adrp	x21, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    4ca8:	add	x21, x21, #0x248
    4cac:	ldr	x22, [sp, #16]
    4cb0:	mov	w1, #0x20                  	// #32
    4cb4:	mov	x0, x22
    4cb8:	bl	1a70 <strchr@plt>
    4cbc:	cbz	x0, 4cfc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xef8>
    4cc0:	add	x0, x0, #0x1
    4cc4:	mov	w1, #0x20                  	// #32
    4cc8:	bl	1a70 <strchr@plt>
    4ccc:	cbz	x0, 4cfc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xef8>
    4cd0:	add	x0, x0, #0x1
    4cd4:	mov	w2, #0xa                   	// #10
    4cd8:	mov	x1, x21
    4cdc:	bl	1980 <strncmp@plt>
    4ce0:	cbz	w0, 4d60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf5c>
    4ce4:	add	x0, sp, #0x10
    4ce8:	add	x1, sp, #0x8
    4cec:	mov	w2, #0xa                   	// #10
    4cf0:	mov	x3, x20
    4cf4:	bl	1b00 <__getdelim@plt>
    4cf8:	tbz	x0, #63, 4cac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xea8>
    4cfc:	ldr	x0, [sp, #16]
    4d00:	bl	1a40 <free@plt>
    4d04:	mov	x0, x20
    4d08:	bl	1950 <fclose@plt>
    4d0c:	mov	w8, wzr
    4d10:	str	w8, [x24, #340]
    4d14:	cbnz	w8, 4bb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb4>
    4d18:	mov	w2, #0x7                   	// #7
    4d1c:	mov	w3, #0x22                  	// #34
    4d20:	mov	w4, #0xffffffff            	// #-1
    4d24:	mov	x0, xzr
    4d28:	mov	x1, x19
    4d2c:	mov	x5, xzr
    4d30:	bl	1a30 <mmap@plt>
    4d34:	mov	x20, x0
    4d38:	cmn	x0, #0x1
    4d3c:	b.ne	4c04 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe00>  // b.any
    4d40:	bl	1ad0 <__errno_location@plt>
    4d44:	ldr	w8, [x0]
    4d48:	cmp	w8, #0xd
    4d4c:	b.eq	4bb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb4>  // b.none
    4d50:	cmp	w8, #0x1
    4d54:	b.eq	4bb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb4>  // b.none
    4d58:	mov	x20, #0xffffffffffffffff    	// #-1
    4d5c:	b	4c04 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe00>
    4d60:	mov	x0, x22
    4d64:	bl	1a40 <free@plt>
    4d68:	mov	x0, x20
    4d6c:	bl	1950 <fclose@plt>
    4d70:	mov	w8, #0x1                   	// #1
    4d74:	str	w8, [x24, #340]
    4d78:	cbnz	w8, 4bb8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb4>
    4d7c:	b	4d18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf14>
    4d80:	stp	x29, x30, [sp, #-80]!
    4d84:	stp	x26, x25, [sp, #16]
    4d88:	stp	x24, x23, [sp, #32]
    4d8c:	stp	x22, x21, [sp, #48]
    4d90:	stp	x20, x19, [sp, #64]
    4d94:	mov	x29, sp
    4d98:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    4d9c:	ldr	w22, [x23, #336]
    4da0:	adrp	x25, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xfe40>
    4da4:	mov	x19, x0
    4da8:	add	x25, x25, #0xd18
    4dac:	cmn	w22, #0x1
    4db0:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    4db4:	b.eq	4dc0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfbc>  // b.none
    4db8:	mov	w20, #0x22                  	// #34
    4dbc:	b	4e48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1044>
    4dc0:	mov	w8, wzr
    4dc4:	mov	w20, #0x22                  	// #34
    4dc8:	str	wzr, [x24, #388]
    4dcc:	mov	w21, #0x18                  	// #24
    4dd0:	smaddl	x8, w8, w21, x25
    4dd4:	ldp	x9, x0, [x8]
    4dd8:	blr	x9
    4ddc:	ldr	w8, [x24, #388]
    4de0:	mov	w22, w0
    4de4:	cmn	w0, #0x1
    4de8:	sxtw	x9, w8
    4dec:	sub	x10, x9, #0x5
    4df0:	b.eq	4dfc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xff8>  // b.none
    4df4:	cmp	x10, #0x1
    4df8:	b.ls	4e44 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1040>  // b.plast
    4dfc:	cmp	x10, #0x1
    4e00:	b.hi	4e18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1014>  // b.pmore
    4e04:	mul	x8, x9, x21
    4e08:	ldr	x8, [x25, x8]
    4e0c:	mov	x0, xzr
    4e10:	blr	x8
    4e14:	ldr	w8, [x24, #388]
    4e18:	add	w9, w8, #0x1
    4e1c:	cmp	w9, #0x7
    4e20:	csinc	w8, wzr, w8, eq  // eq = none
    4e24:	str	w8, [x24, #388]
    4e28:	b.eq	4e34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1030>  // b.none
    4e2c:	cmn	w22, #0x1
    4e30:	b.eq	4dd0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfcc>  // b.none
    4e34:	cmn	w22, #0x1
    4e38:	str	w22, [x23, #336]
    4e3c:	b.ne	4e48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1044>  // b.any
    4e40:	b	4f3c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1138>
    4e44:	str	w22, [x23, #336]
    4e48:	adrp	x26, 17000 <memcpy@GLIBC_2.17>
    4e4c:	ldr	x21, [x26, #392]
    4e50:	mov	w0, w22
    4e54:	mov	x1, x19
    4e58:	bl	4f58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1154>
    4e5c:	cbnz	w0, 4f3c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1138>
    4e60:	ldr	w4, [x23, #336]
    4e64:	mov	w8, #0xffffffdc            	// #-36
    4e68:	and	w8, w20, w8
    4e6c:	orr	w20, w8, #0x1
    4e70:	mov	w2, #0x5                   	// #5
    4e74:	mov	x0, xzr
    4e78:	mov	x1, x19
    4e7c:	mov	w3, w20
    4e80:	mov	x5, x21
    4e84:	bl	1a30 <mmap@plt>
    4e88:	cmn	x0, #0x1
    4e8c:	b.ne	4ea4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10a0>  // b.any
    4e90:	ldr	w0, [x23, #336]
    4e94:	cbnz	x21, 4f34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1130>
    4e98:	bl	19d0 <close@plt>
    4e9c:	ldr	w8, [x24, #388]
    4ea0:	b	4dcc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfc8>
    4ea4:	mov	x22, x0
    4ea8:	cbnz	x21, 4ee4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10e0>
    4eac:	ldrsw	x8, [x24, #388]
    4eb0:	sub	x9, x8, #0x5
    4eb4:	cmp	x9, #0x1
    4eb8:	b.hi	4ee4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10e0>  // b.pmore
    4ebc:	mov	w9, #0x18                  	// #24
    4ec0:	mul	x8, x8, x9
    4ec4:	ldr	x8, [x25, x8]
    4ec8:	mov	x0, xzr
    4ecc:	blr	x8
    4ed0:	ldr	w8, [x24, #388]
    4ed4:	add	w9, w8, #0x1
    4ed8:	cmp	w9, #0x7
    4edc:	csinc	w8, wzr, w8, eq  // eq = none
    4ee0:	str	w8, [x24, #388]
    4ee4:	ldr	w4, [x23, #336]
    4ee8:	mov	w2, #0x3                   	// #3
    4eec:	mov	x0, xzr
    4ef0:	mov	x1, x19
    4ef4:	mov	w3, w20
    4ef8:	mov	x5, x21
    4efc:	bl	1a30 <mmap@plt>
    4f00:	cmn	x0, #0x1
    4f04:	b.eq	4f24 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1120>  // b.none
    4f08:	sub	x8, x22, x0
    4f0c:	add	x9, x0, x19
    4f10:	stur	x8, [x9, #-8]
    4f14:	ldr	x8, [x26, #392]
    4f18:	add	x8, x8, x19
    4f1c:	str	x8, [x26, #392]
    4f20:	b	4f40 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x113c>
    4f24:	mov	x0, x22
    4f28:	mov	x1, x19
    4f2c:	bl	1a80 <munmap@plt>
    4f30:	ldr	w0, [x23, #336]
    4f34:	mov	x1, x21
    4f38:	bl	1ac0 <ftruncate@plt>
    4f3c:	mov	x0, #0xffffffffffffffff    	// #-1
    4f40:	ldp	x20, x19, [sp, #64]
    4f44:	ldp	x22, x21, [sp, #48]
    4f48:	ldp	x24, x23, [sp, #32]
    4f4c:	ldp	x26, x25, [sp, #16]
    4f50:	ldp	x29, x30, [sp], #80
    4f54:	ret
    4f58:	stp	x29, x30, [sp, #-64]!
    4f5c:	str	x23, [sp, #16]
    4f60:	stp	x22, x21, [sp, #32]
    4f64:	stp	x20, x19, [sp, #48]
    4f68:	mov	x29, sp
    4f6c:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    4f70:	ldr	x2, [x23, #352]
    4f74:	mov	x19, x1
    4f78:	mov	w20, w0
    4f7c:	cbnz	x2, 4f90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x118c>
    4f80:	mov	w0, #0x1e                  	// #30
    4f84:	bl	1aa0 <sysconf@plt>
    4f88:	mov	x2, x0
    4f8c:	str	x0, [x23, #352]
    4f90:	add	x9, x2, #0xf
    4f94:	mov	x8, sp
    4f98:	and	x9, x9, #0xfffffffffffffff0
    4f9c:	sub	x21, x8, x9
    4fa0:	mov	sp, x21
    4fa4:	mov	x0, x21
    4fa8:	mov	w1, wzr
    4fac:	bl	1990 <memset@plt>
    4fb0:	cmp	x19, #0x1
    4fb4:	b.lt	4ff0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11ec>  // b.tstop
    4fb8:	ldr	x8, [x23, #352]
    4fbc:	mov	w0, w20
    4fc0:	mov	x1, x21
    4fc4:	cmp	x19, x8
    4fc8:	csel	x22, x19, x8, cc  // cc = lo, ul, last
    4fcc:	mov	x2, x22
    4fd0:	bl	19f0 <write@plt>
    4fd4:	cmp	x0, x22
    4fd8:	csel	x8, xzr, x22, lt  // lt = tstop
    4fdc:	cmp	x0, x22
    4fe0:	sub	x19, x19, x8
    4fe4:	b.ge	4fb0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11ac>  // b.tcont
    4fe8:	mov	w0, #0xffffffff            	// #-1
    4fec:	b	4ff4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11f0>
    4ff0:	mov	w0, wzr
    4ff4:	mov	sp, x29
    4ff8:	ldp	x20, x19, [sp, #48]
    4ffc:	ldp	x22, x21, [sp, #32]
    5000:	ldr	x23, [sp, #16]
    5004:	ldp	x29, x30, [sp], #64
    5008:	ret
    500c:	stp	x29, x30, [sp, #-16]!
    5010:	mov	x29, sp
    5014:	bl	1ae0 <getenv@plt>
    5018:	cbz	x0, 5024 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1220>
    501c:	ldp	x29, x30, [sp], #16
    5020:	b	5030 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x122c>
    5024:	mov	w0, #0xffffffff            	// #-1
    5028:	ldp	x29, x30, [sp], #16
    502c:	ret
    5030:	stp	x29, x30, [sp, #-48]!
    5034:	str	x21, [sp, #16]
    5038:	stp	x20, x19, [sp, #32]
    503c:	mov	x29, sp
    5040:	mov	w1, #0x4082                	// #16514
    5044:	movk	w1, #0x48, lsl #16
    5048:	mov	w2, #0x1c0                 	// #448
    504c:	mov	x19, x0
    5050:	bl	1970 <open@plt>
    5054:	mov	w21, w0
    5058:	cmn	w0, #0x1
    505c:	b.ne	50f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12f4>  // b.any
    5060:	bl	1ad0 <__errno_location@plt>
    5064:	ldr	w8, [x0]
    5068:	sub	w9, w8, #0x15
    506c:	cmp	w9, #0x2
    5070:	b.cc	507c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1278>  // b.lo, b.ul, b.last
    5074:	cmp	w8, #0x5f
    5078:	b.ne	50f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12f0>  // b.any
    507c:	str	wzr, [x0]
    5080:	mov	x0, x19
    5084:	bl	1920 <strlen@plt>
    5088:	sxtw	x21, w0
    508c:	add	x9, x21, #0x1a
    5090:	mov	x8, sp
    5094:	and	x9, x9, #0xfffffffffffffff0
    5098:	sub	x20, x8, x9
    509c:	mov	sp, x20
    50a0:	mov	x0, x20
    50a4:	mov	x1, x19
    50a8:	mov	x2, x21
    50ac:	bl	1900 <memcpy@plt>
    50b0:	adrp	x8, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    50b4:	add	x8, x8, #0x27b
    50b8:	ldr	x8, [x8]
    50bc:	mov	w10, #0x5858                	// #22616
    50c0:	add	x9, x20, x21
    50c4:	movk	w10, #0x58, lsl #16
    50c8:	mov	w1, #0x80000               	// #524288
    50cc:	mov	x0, x20
    50d0:	stur	w10, [x9, #7]
    50d4:	str	x8, [x9]
    50d8:	bl	1a10 <mkostemp@plt>
    50dc:	mov	w21, w0
    50e0:	cmn	w0, #0x1
    50e4:	b.eq	50f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12f4>  // b.none
    50e8:	mov	x0, x20
    50ec:	bl	1b20 <unlink@plt>
    50f0:	b	50f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12f4>
    50f4:	mov	w21, #0xffffffff            	// #-1
    50f8:	mov	w0, w21
    50fc:	mov	sp, x29
    5100:	ldp	x20, x19, [sp, #32]
    5104:	ldr	x21, [sp, #16]
    5108:	ldp	x29, x30, [sp], #48
    510c:	ret
    5110:	stp	x29, x30, [sp, #-48]!
    5114:	stp	x28, x21, [sp, #16]
    5118:	stp	x20, x19, [sp, #32]
    511c:	mov	x29, sp
    5120:	sub	sp, sp, #0x3, lsl #12
    5124:	sub	sp, sp, #0x30
    5128:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    512c:	add	x8, x8, #0x190
    5130:	ldp	x9, x8, [x8]
    5134:	cmp	x9, x0
    5138:	b.eq	5174 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1370>  // b.none
    513c:	mov	x19, x0
    5140:	cbz	x8, 514c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1348>
    5144:	mov	x0, x8
    5148:	bl	19b0 <endmntent@plt>
    514c:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    5150:	str	x19, [x8, #400]
    5154:	cbz	x19, 5204 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1400>
    5158:	adrp	x1, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    515c:	add	x1, x1, #0x246
    5160:	mov	x0, x19
    5164:	bl	19a0 <setmntent@plt>
    5168:	mov	x8, x0
    516c:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    5170:	str	x0, [x9, #408]
    5174:	cbz	x8, 520c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1408>
    5178:	sub	x1, x29, #0x28
    517c:	add	x2, sp, #0x8
    5180:	mov	w3, #0x3000                	// #12288
    5184:	mov	x0, x8
    5188:	bl	1ab0 <getmntent_r@plt>
    518c:	cbz	x0, 520c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1408>
    5190:	adrp	x19, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    5194:	adrp	x20, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    5198:	add	x19, x19, #0x286
    519c:	add	x20, x20, #0x289
    51a0:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    51a4:	b	51c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13bc>
    51a8:	ldr	x0, [x21, #408]
    51ac:	sub	x1, x29, #0x28
    51b0:	add	x2, sp, #0x8
    51b4:	mov	w3, #0x3000                	// #12288
    51b8:	bl	1ab0 <getmntent_r@plt>
    51bc:	cbz	x0, 520c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1408>
    51c0:	sub	x0, x29, #0x28
    51c4:	mov	x1, x19
    51c8:	bl	1a60 <hasmntopt@plt>
    51cc:	cbnz	x0, 51a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a4>
    51d0:	sub	x0, x29, #0x28
    51d4:	mov	x1, x20
    51d8:	bl	1a60 <hasmntopt@plt>
    51dc:	cbnz	x0, 51a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a4>
    51e0:	ldur	x0, [x29, #-32]
    51e4:	mov	w1, #0x2                   	// #2
    51e8:	bl	1a20 <access@plt>
    51ec:	cbnz	w0, 51a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a4>
    51f0:	ldur	x0, [x29, #-32]
    51f4:	bl	5030 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x122c>
    51f8:	cmn	w0, #0x1
    51fc:	b.eq	51a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a4>  // b.none
    5200:	b	5210 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140c>
    5204:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    5208:	str	xzr, [x8, #408]
    520c:	mov	w0, #0xffffffff            	// #-1
    5210:	add	sp, sp, #0x3, lsl #12
    5214:	add	sp, sp, #0x30
    5218:	ldp	x20, x19, [sp, #32]
    521c:	ldp	x28, x21, [sp, #16]
    5220:	ldp	x29, x30, [sp], #48
    5224:	ret
    5228:	stp	x29, x30, [sp, #-64]!
    522c:	stp	x22, x21, [sp, #32]
    5230:	stp	x20, x19, [sp, #48]
    5234:	ldr	x21, [x0, #16]
    5238:	str	x23, [sp, #16]
    523c:	mov	x29, sp
    5240:	ldrh	w8, [x21, #10]
    5244:	cmp	w8, #0xf
    5248:	b.hi	5348 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1544>  // b.pmore
    524c:	ldr	w22, [x0, #24]
    5250:	adrp	x9, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    5254:	add	x9, x9, #0x290
    5258:	adr	x10, 5270 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x146c>
    525c:	ldrb	w11, [x9, x8]
    5260:	add	x10, x10, x11, lsl #2
    5264:	mov	x19, x0
    5268:	mov	w20, wzr
    526c:	br	x10
    5270:	mov	x0, x21
    5274:	bl	534c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1548>
    5278:	cbz	w0, 528c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1488>
    527c:	mov	w20, w0
    5280:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    5284:	mov	w20, #0x1e                  	// #30
    5288:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    528c:	ldr	x8, [x21]
    5290:	cmp	x8, #0x11
    5294:	b.cc	52cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14c8>  // b.lo, b.ul, b.last
    5298:	add	w22, w22, #0x8
    529c:	mov	w20, #0x20                  	// #32
    52a0:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    52a4:	mov	w20, #0x1c                  	// #28
    52a8:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    52ac:	mov	w20, #0x1a                  	// #26
    52b0:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    52b4:	mov	w20, #0x18                  	// #24
    52b8:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    52bc:	mov	w20, #0x14                  	// #20
    52c0:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    52c4:	mov	w20, #0x16                  	// #22
    52c8:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    52cc:	cmp	x8, #0x10
    52d0:	b.eq	5338 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1534>  // b.none
    52d4:	cmp	x8, #0x8
    52d8:	b.ne	5340 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x153c>  // b.any
    52dc:	mov	w20, #0x1                   	// #1
    52e0:	ldr	w21, [x19, #4]
    52e4:	cmp	w21, #0x1
    52e8:	b.lt	5310 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x150c>  // b.tstop
    52ec:	ldr	x23, [x19, #8]
    52f0:	ldr	x0, [x23]
    52f4:	bl	534c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1548>
    52f8:	cbnz	w0, 530c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1508>
    52fc:	subs	x21, x21, #0x1
    5300:	add	x23, x23, #0x8
    5304:	b.ne	52f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14ec>  // b.any
    5308:	b	5310 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x150c>
    530c:	orr	w20, w20, #0x80
    5310:	sub	w8, w22, #0x1
    5314:	orr	w8, w8, #0xf
    5318:	add	w8, w8, #0x1
    531c:	stp	w8, w20, [x19, #24]
    5320:	ldp	x20, x19, [sp, #48]
    5324:	ldp	x22, x21, [sp, #32]
    5328:	ldr	x23, [sp, #16]
    532c:	mov	w0, wzr
    5330:	ldp	x29, x30, [sp], #64
    5334:	ret
    5338:	mov	w20, #0x2                   	// #2
    533c:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    5340:	mov	w20, #0x42                  	// #66
    5344:	b	52e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14dc>
    5348:	bl	1a00 <abort@plt>
    534c:	stp	x29, x30, [sp, #-64]!
    5350:	stp	x24, x23, [sp, #16]
    5354:	stp	x22, x21, [sp, #32]
    5358:	stp	x20, x19, [sp, #48]
    535c:	ldrh	w19, [x0, #10]
    5360:	mov	x29, sp
    5364:	sub	w8, w19, #0x2
    5368:	cmp	w8, #0x3
    536c:	b.cs	5384 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1580>  // b.hs, b.nlast
    5370:	mov	w23, #0x1                   	// #1
    5374:	lsl	w8, w19, #2
    5378:	sub	w8, w8, w23
    537c:	add	w0, w8, #0x4
    5380:	b	5458 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1654>
    5384:	cmp	w19, #0xd
    5388:	b.eq	53b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15b0>  // b.none
    538c:	cmp	w19, #0xf
    5390:	b.ne	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.any
    5394:	ldr	x8, [x0, #16]
    5398:	ldr	x8, [x8]
    539c:	ldrh	w19, [x8, #10]
    53a0:	sub	w8, w19, #0x2
    53a4:	cmp	w8, #0x3
    53a8:	b.cs	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.hs, b.nlast
    53ac:	mov	w23, #0x2                   	// #2
    53b0:	b	5374 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>
    53b4:	ldr	x23, [x0]
    53b8:	sub	x8, x23, #0x4
    53bc:	cmp	x8, #0x3c
    53c0:	b.hi	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.pmore
    53c4:	ldr	x22, [x0, #16]
    53c8:	ldr	x20, [x22]
    53cc:	ldrh	w21, [x20, #10]
    53d0:	orr	w8, w21, #0x2
    53d4:	cmp	w8, #0xf
    53d8:	mov	w19, w21
    53dc:	b.ne	5408 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1604>  // b.any
    53e0:	ldr	x0, [x20, #16]
    53e4:	bl	5c00 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x314>
    53e8:	mov	w19, w0
    53ec:	tbz	w0, #31, 5408 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1604>
    53f0:	add	x24, x22, #0x8
    53f4:	ldr	x8, [x24], #8
    53f8:	ldr	x0, [x8, #16]
    53fc:	bl	5c00 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x314>
    5400:	tbnz	w0, #31, 53f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15f0>
    5404:	mov	w19, w0
    5408:	cmp	w19, #0x4
    540c:	b.eq	5430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x162c>  // b.none
    5410:	cmp	w19, #0x3
    5414:	b.eq	5440 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x163c>  // b.none
    5418:	cmp	w19, #0x2
    541c:	b.ne	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.any
    5420:	tst	x23, #0x3
    5424:	b.ne	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.any
    5428:	lsr	x23, x23, #2
    542c:	b	544c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1648>
    5430:	tst	x23, #0xf
    5434:	b.ne	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.any
    5438:	lsr	x23, x23, #4
    543c:	b	544c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1648>
    5440:	tst	x23, #0x7
    5444:	b.ne	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.any
    5448:	lsr	x23, x23, #3
    544c:	cmp	x23, #0x4
    5450:	b.ls	546c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1668>  // b.plast
    5454:	mov	w0, wzr
    5458:	ldp	x20, x19, [sp, #48]
    545c:	ldp	x22, x21, [sp, #32]
    5460:	ldp	x24, x23, [sp, #16]
    5464:	ldp	x29, x30, [sp], #64
    5468:	ret
    546c:	cbz	x20, 5374 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>
    5470:	orr	w8, w21, #0x2
    5474:	and	w8, w8, #0xffff
    5478:	add	x22, x22, #0x8
    547c:	cmp	w8, #0xf
    5480:	b.ne	5498 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1694>  // b.any
    5484:	ldr	x0, [x20, #16]
    5488:	mov	w1, w19
    548c:	bl	5c5c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x370>
    5490:	cbnz	w0, 54a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x169c>
    5494:	b	5458 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1654>
    5498:	cmp	w19, w21, uxth
    549c:	b.ne	5454 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1650>  // b.any
    54a0:	ldr	x20, [x22]
    54a4:	cbz	x20, 5374 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>
    54a8:	ldrh	w21, [x20, #10]
    54ac:	b	5470 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x166c>

00000000000054b0 <ffi_call@@LIBFFI_BASE_7.0>:
    54b0:	mov	x4, xzr
    54b4:	b	54b8 <ffi_call@@LIBFFI_BASE_7.0+0x8>
    54b8:	stp	x29, x30, [sp, #-96]!
    54bc:	stp	x28, x27, [sp, #16]
    54c0:	stp	x26, x25, [sp, #32]
    54c4:	stp	x24, x23, [sp, #48]
    54c8:	stp	x22, x21, [sp, #64]
    54cc:	stp	x20, x19, [sp, #80]
    54d0:	mov	x29, sp
    54d4:	sub	sp, sp, #0x60
    54d8:	ldr	x8, [x0, #16]
    54dc:	mov	x23, x3
    54e0:	mov	x25, x0
    54e4:	ldr	x9, [x8]
    54e8:	ldp	w8, w10, [x0, #24]
    54ec:	stur	x4, [x29, #-40]
    54f0:	stur	x1, [x29, #-56]
    54f4:	stur	x9, [x29, #-88]
    54f8:	tbnz	w10, #5, 550c <ffi_call@@LIBFFI_BASE_7.0+0x5c>
    54fc:	cbz	x2, 551c <ffi_call@@LIBFFI_BASE_7.0+0x6c>
    5500:	lsr	x9, x10, #2
    5504:	and	x9, x9, #0x10
    5508:	b	5524 <ffi_call@@LIBFFI_BASE_7.0+0x74>
    550c:	cmp	x2, #0x0
    5510:	stur	x10, [x29, #-48]
    5514:	csel	x9, x9, xzr, eq  // eq = none
    5518:	b	5528 <ffi_call@@LIBFFI_BASE_7.0+0x78>
    551c:	and	w10, w10, #0x80
    5520:	mov	x9, xzr
    5524:	stur	x10, [x29, #-48]
    5528:	add	x10, x8, x9
    552c:	add	x10, x10, #0xef
    5530:	and	x10, x10, #0xfffffffffffffff0
    5534:	mov	x11, sp
    5538:	sub	x10, x11, x10
    553c:	mov	sp, x10
    5540:	stur	x10, [x29, #-32]
    5544:	add	x11, x10, #0xc0
    5548:	ldr	w10, [x25, #4]
    554c:	add	x8, x11, x8
    5550:	stp	x2, x8, [x29, #-80]
    5554:	add	x8, x8, #0x20
    5558:	cmp	x9, #0x0
    555c:	csel	x8, x2, x8, eq  // eq = none
    5560:	cmp	w10, #0x1
    5564:	stur	x11, [x29, #-8]
    5568:	stur	x8, [x29, #-64]
    556c:	b.lt	57f8 <ffi_call@@LIBFFI_BASE_7.0+0x348>  // b.tstop
    5570:	ldur	x8, [x29, #-32]
    5574:	adrp	x26, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    5578:	mov	x19, xzr
    557c:	mov	x28, xzr
    5580:	mov	w27, wzr
    5584:	add	x8, x8, #0x80
    5588:	lsl	x22, x10, #3
    558c:	add	x26, x26, #0x2a0
    5590:	stp	x8, xzr, [x29, #-24]
    5594:	b	55d0 <ffi_call@@LIBFFI_BASE_7.0+0x120>
    5598:	ldrh	w9, [x24, #8]
    559c:	mov	w27, #0x8                   	// #8
    55a0:	sub	x10, x28, #0x1
    55a4:	cmp	w9, #0x8
    55a8:	csel	x9, x9, x27, hi  // hi = pmore
    55ac:	sub	x9, x9, #0x1
    55b0:	orr	x9, x9, x10
    55b4:	ldur	x10, [x29, #-8]
    55b8:	add	x9, x9, #0x1
    55bc:	add	x28, x9, x20
    55c0:	str	x8, [x10, x9]
    55c4:	add	x19, x19, #0x8
    55c8:	cmp	x22, x19
    55cc:	b.eq	57f8 <ffi_call@@LIBFFI_BASE_7.0+0x348>  // b.none
    55d0:	ldr	x8, [x25, #8]
    55d4:	ldr	x24, [x8, x19]
    55d8:	ldrh	w8, [x24, #10]
    55dc:	cmp	w8, #0xf
    55e0:	b.hi	5840 <ffi_call@@LIBFFI_BASE_7.0+0x390>  // b.pmore
    55e4:	ldr	x20, [x24]
    55e8:	ldr	x21, [x23, x19]
    55ec:	adr	x9, 55c4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    55f0:	ldrb	w10, [x26, x8]
    55f4:	add	x9, x9, x10, lsl #2
    55f8:	br	x9
    55fc:	mov	x0, x24
    5600:	bl	534c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1548>
    5604:	cbz	w0, 56f4 <ffi_call@@LIBFFI_BASE_7.0+0x244>
    5608:	ldur	x10, [x29, #-16]
    560c:	and	w8, w0, #0x3
    5610:	sub	w8, w10, w8
    5614:	add	w8, w8, #0x4
    5618:	cmp	w8, #0x9
    561c:	b.cs	5714 <ffi_call@@LIBFFI_BASE_7.0+0x264>  // b.hs, b.nlast
    5620:	ldur	x9, [x29, #-32]
    5624:	mov	w11, #0xc                   	// #12
    5628:	add	x9, x9, w10, uxtw #4
    562c:	sub	w10, w0, #0x8
    5630:	smull	x10, w10, w11
    5634:	adr	x11, 5640 <ffi_call@@LIBFFI_BASE_7.0+0x190>
    5638:	add	x11, x11, x10
    563c:	br	x11
    5640:	ldp	s16, s17, [x21]
    5644:	ldp	s18, s19, [x21, #8]
    5648:	b	56cc <ffi_call@@LIBFFI_BASE_7.0+0x21c>
    564c:	ldp	s16, s17, [x21]
    5650:	ldr	s18, [x21, #8]
    5654:	b	56d0 <ffi_call@@LIBFFI_BASE_7.0+0x220>
    5658:	ldp	s16, s17, [x21]
    565c:	b	56d4 <ffi_call@@LIBFFI_BASE_7.0+0x224>
    5660:	nop
    5664:	ldr	s16, [x21]
    5668:	b	56d8 <ffi_call@@LIBFFI_BASE_7.0+0x228>
    566c:	nop
    5670:	ldp	d16, d17, [x21]
    5674:	ldp	d18, d19, [x21, #16]
    5678:	b	56cc <ffi_call@@LIBFFI_BASE_7.0+0x21c>
    567c:	ldp	d16, d17, [x21]
    5680:	ldr	d18, [x21, #16]
    5684:	b	56d0 <ffi_call@@LIBFFI_BASE_7.0+0x220>
    5688:	ldp	d16, d17, [x21]
    568c:	b	56d4 <ffi_call@@LIBFFI_BASE_7.0+0x224>
    5690:	nop
    5694:	ldr	d16, [x21]
    5698:	b	56d8 <ffi_call@@LIBFFI_BASE_7.0+0x228>
    569c:	nop
    56a0:	ldp	q16, q17, [x21]
    56a4:	ldp	q18, q19, [x21, #32]
    56a8:	b	56cc <ffi_call@@LIBFFI_BASE_7.0+0x21c>
    56ac:	ldp	q16, q17, [x21]
    56b0:	ldr	q18, [x21, #32]
    56b4:	b	56d0 <ffi_call@@LIBFFI_BASE_7.0+0x220>
    56b8:	ldp	q16, q17, [x21]
    56bc:	b	56d4 <ffi_call@@LIBFFI_BASE_7.0+0x224>
    56c0:	nop
    56c4:	ldr	q16, [x21]
    56c8:	b	56d8 <ffi_call@@LIBFFI_BASE_7.0+0x228>
    56cc:	str	q19, [x9, #48]
    56d0:	str	q18, [x9, #32]
    56d4:	str	q17, [x9, #16]
    56d8:	str	q16, [x9]
    56dc:	stur	x8, [x29, #-16]
    56e0:	b	55c4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    56e4:	ldrsw	x8, [x21]
    56e8:	cmp	w27, #0x7
    56ec:	b.ls	5780 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>  // b.plast
    56f0:	b	5598 <ffi_call@@LIBFFI_BASE_7.0+0xe8>
    56f4:	cmp	x20, #0x10
    56f8:	b.ls	5794 <ffi_call@@LIBFFI_BASE_7.0+0x2e4>  // b.plast
    56fc:	add	x21, x23, x19
    5700:	mov	w20, #0x8                   	// #8
    5704:	ldr	x8, [x21]
    5708:	cmp	w27, #0x7
    570c:	b.hi	5598 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5710:	b	5780 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5714:	ldrh	w8, [x24, #8]
    5718:	mov	w11, #0x8                   	// #8
    571c:	mov	w10, #0x8                   	// #8
    5720:	sub	x9, x28, #0x1
    5724:	cmp	w8, #0x8
    5728:	stur	x10, [x29, #-16]
    572c:	csel	x8, x8, x11, hi  // hi = pmore
    5730:	b	57d0 <ffi_call@@LIBFFI_BASE_7.0+0x320>
    5734:	ldrsh	x8, [x21]
    5738:	cmp	w27, #0x7
    573c:	b.hi	5598 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5740:	b	5780 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5744:	ldrb	w8, [x21]
    5748:	cmp	w27, #0x7
    574c:	b.hi	5598 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5750:	b	5780 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5754:	ldrsb	x8, [x21]
    5758:	cmp	w27, #0x7
    575c:	b.hi	5598 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5760:	b	5780 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5764:	ldr	w8, [x21]
    5768:	cmp	w27, #0x7
    576c:	b.hi	5598 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5770:	b	5780 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5774:	ldrh	w8, [x21]
    5778:	cmp	w27, #0x7
    577c:	b.hi	5598 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5780:	ldur	x10, [x29, #-24]
    5784:	add	w9, w27, #0x1
    5788:	str	x8, [x10, w27, uxtw #3]
    578c:	mov	w27, w9
    5790:	b	55c4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    5794:	add	x9, x20, #0x7
    5798:	mov	w8, w27
    579c:	add	x10, x8, x9, lsr #3
    57a0:	cmp	x10, #0x8
    57a4:	b.hi	57bc <ffi_call@@LIBFFI_BASE_7.0+0x30c>  // b.pmore
    57a8:	ldur	x10, [x29, #-24]
    57ac:	lsr	x9, x9, #3
    57b0:	add	w27, w27, w9
    57b4:	add	x0, x10, x8, lsl #3
    57b8:	b	57e8 <ffi_call@@LIBFFI_BASE_7.0+0x338>
    57bc:	ldrh	w8, [x24, #8]
    57c0:	mov	w27, #0x8                   	// #8
    57c4:	sub	x9, x28, #0x1
    57c8:	cmp	w8, #0x8
    57cc:	csel	x8, x8, x27, hi  // hi = pmore
    57d0:	sub	x8, x8, #0x1
    57d4:	orr	x8, x8, x9
    57d8:	ldur	x9, [x29, #-8]
    57dc:	add	x8, x8, #0x1
    57e0:	add	x28, x8, x20
    57e4:	add	x0, x9, x8
    57e8:	mov	x1, x21
    57ec:	mov	x2, x20
    57f0:	bl	1900 <memcpy@plt>
    57f4:	b	55c4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    57f8:	ldp	x1, x20, [x29, #-72]
    57fc:	ldp	x2, x19, [x29, #-56]
    5800:	ldp	x5, x0, [x29, #-40]
    5804:	mov	x3, x20
    5808:	mov	w4, w19
    580c:	bl	5cd0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3e4>
    5810:	tbz	w19, #6, 5820 <ffi_call@@LIBFFI_BASE_7.0+0x370>
    5814:	ldp	x2, x0, [x29, #-88]
    5818:	mov	x1, x20
    581c:	bl	1900 <memcpy@plt>
    5820:	mov	sp, x29
    5824:	ldp	x20, x19, [sp, #80]
    5828:	ldp	x22, x21, [sp, #64]
    582c:	ldp	x24, x23, [sp, #48]
    5830:	ldp	x26, x25, [sp, #32]
    5834:	ldp	x28, x27, [sp, #16]
    5838:	ldp	x29, x30, [sp], #96
    583c:	ret
    5840:	bl	1a00 <abort@plt>

0000000000005844 <ffi_call_go@@LIBFFI_GO_CLOSURE_7.0>:
    5844:	b	54b8 <ffi_call@@LIBFFI_BASE_7.0+0x8>

0000000000005848 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0>:
    5848:	stp	x29, x30, [sp, #-48]!
    584c:	stp	x22, x21, [sp, #16]
    5850:	stp	x20, x19, [sp, #32]
    5854:	mov	x29, sp
    5858:	ldr	w8, [x1]
    585c:	cmp	w8, #0x1
    5860:	b.ne	58d8 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0+0x90>  // b.any
    5864:	ldr	w8, [x1, #28]
    5868:	adrp	x10, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    586c:	add	x10, x10, #0x2b7
    5870:	ldr	q0, [x10]
    5874:	adrp	x9, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11fc>
    5878:	adrp	x10, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11fc>
    587c:	add	x9, x9, #0xe40
    5880:	add	x10, x10, #0xe60
    5884:	tst	w8, #0x80
    5888:	mov	x21, x1
    588c:	csel	x8, x10, x9, eq  // eq = none
    5890:	add	x1, x0, #0x18
    5894:	mov	x19, x3
    5898:	mov	x20, x2
    589c:	mov	x22, x0
    58a0:	str	q0, [x0]
    58a4:	str	x8, [x0, #16]
    58a8:	bl	5ff8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x70c>
    58ac:	mov	x0, x22
    58b0:	bl	3dc8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d4>
    58b4:	add	x1, x0, #0x18
    58b8:	bl	5ff8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x70c>
    58bc:	mov	w0, wzr
    58c0:	stp	x21, x20, [x22, #24]
    58c4:	str	x19, [x22, #40]
    58c8:	ldp	x20, x19, [sp, #32]
    58cc:	ldp	x22, x21, [sp, #16]
    58d0:	ldp	x29, x30, [sp], #48
    58d4:	ret
    58d8:	mov	w0, #0x2                   	// #2
    58dc:	ldp	x20, x19, [sp, #32]
    58e0:	ldp	x22, x21, [sp, #16]
    58e4:	ldp	x29, x30, [sp], #48
    58e8:	ret

00000000000058ec <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0>:
    58ec:	ldr	w8, [x1]
    58f0:	cmp	w8, #0x1
    58f4:	b.ne	5928 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c>  // b.any
    58f8:	ldr	w9, [x1, #28]
    58fc:	adrp	x10, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11fc>
    5900:	adrp	x11, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11fc>
    5904:	add	x10, x10, #0xfb0
    5908:	add	x11, x11, #0xfd0
    590c:	tst	w9, #0x80
    5910:	mov	x8, x0
    5914:	mov	w0, wzr
    5918:	csel	x9, x11, x10, eq  // eq = none
    591c:	stp	x9, x1, [x8]
    5920:	str	x2, [x8, #16]
    5924:	ret
    5928:	mov	w0, #0x2                   	// #2
    592c:	ret
    5930:	stp	x29, x30, [sp, #-96]!
    5934:	stp	x28, x27, [sp, #16]
    5938:	stp	x26, x25, [sp, #32]
    593c:	stp	x24, x23, [sp, #48]
    5940:	stp	x22, x21, [sp, #64]
    5944:	stp	x20, x19, [sp, #80]
    5948:	mov	x29, sp
    594c:	sub	sp, sp, #0x30
    5950:	stp	x5, x6, [x29, #-40]
    5954:	stp	x3, x4, [x29, #-16]
    5958:	ldr	w8, [x0, #4]
    595c:	mov	x9, sp
    5960:	mov	x23, x0
    5964:	stur	x2, [x29, #-24]
    5968:	lsl	x28, x8, #3
    596c:	add	x10, x28, #0xf
    5970:	and	x10, x10, #0xffffffff0
    5974:	sub	x26, x9, x10
    5978:	stur	x1, [x29, #-48]
    597c:	mov	sp, x26
    5980:	cmp	w8, #0x1
    5984:	b.lt	5bb4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2c8>  // b.tstop
    5988:	mov	x19, xzr
    598c:	mov	x24, xzr
    5990:	mov	w22, wzr
    5994:	mov	w25, wzr
    5998:	mov	w10, #0x1                   	// #1
    599c:	mov	w21, #0x5fe2                	// #24546
    59a0:	b	59c8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xdc>
    59a4:	ldur	x8, [x29, #-16]
    59a8:	add	w9, w25, #0x1
    59ac:	add	x8, x8, w25, uxtw #3
    59b0:	add	x8, x8, #0x80
    59b4:	str	x8, [x26, x19]
    59b8:	mov	w25, w9
    59bc:	add	x19, x19, #0x8
    59c0:	cmp	x28, x19
    59c4:	b.eq	5bb4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2c8>  // b.none
    59c8:	ldr	x8, [x23, #8]
    59cc:	ldr	x27, [x8, x19]
    59d0:	ldrh	w8, [x27, #10]
    59d4:	cmp	w8, #0xf
    59d8:	b.hi	5bfc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x310>  // b.pmore
    59dc:	ldr	x20, [x27]
    59e0:	lsl	w8, w10, w8
    59e4:	tst	w8, w21
    59e8:	b.eq	5a24 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x138>  // b.none
    59ec:	cmp	w25, #0x7
    59f0:	b.ls	59a4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xb8>  // b.plast
    59f4:	cmp	x20, #0x8
    59f8:	mov	w25, #0x8                   	// #8
    59fc:	csel	x9, x20, x25, hi  // hi = pmore
    5a00:	sub	x8, x24, #0x1
    5a04:	sub	x9, x9, #0x1
    5a08:	orr	x8, x9, x8
    5a0c:	ldur	x9, [x29, #-8]
    5a10:	add	x8, x8, #0x1
    5a14:	add	x24, x8, x20
    5a18:	add	x8, x9, x8
    5a1c:	str	x8, [x26, x19]
    5a20:	b	59bc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xd0>
    5a24:	mov	w9, #0xa01c                	// #40988
    5a28:	tst	w8, w9
    5a2c:	b.eq	59bc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xd0>  // b.none
    5a30:	mov	x0, x27
    5a34:	bl	534c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1548>
    5a38:	cbz	w0, 5a98 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1ac>
    5a3c:	and	w8, w0, #0x3
    5a40:	mov	w9, #0x4                   	// #4
    5a44:	sub	w9, w9, w8
    5a48:	mov	w8, w22
    5a4c:	add	x10, x9, x8
    5a50:	cmp	x10, #0x8
    5a54:	b.hi	5ac0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d4>  // b.pmore
    5a58:	ldur	x10, [x29, #-16]
    5a5c:	add	w22, w9, w22
    5a60:	add	x8, x10, x8, lsl #4
    5a64:	sub	w10, w0, #0x8
    5a68:	cmp	w10, #0x6
    5a6c:	b.hi	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x274>  // b.pmore
    5a70:	adrp	x12, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    5a74:	add	x12, x12, #0x2b0
    5a78:	adr	x9, 5a88 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x19c>
    5a7c:	ldrb	w11, [x12, x10]
    5a80:	add	x9, x9, x11, lsl #2
    5a84:	br	x9
    5a88:	ldp	q16, q17, [x8]
    5a8c:	ldp	q18, q19, [x8, #32]
    5a90:	st4	{v16.s-v19.s}[0], [x8]
    5a94:	b	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x274>
    5a98:	cmp	x20, #0x11
    5a9c:	b.cc	5ad8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1ec>  // b.lo, b.ul, b.last
    5aa0:	cmp	w25, #0x7
    5aa4:	b.hi	5b0c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x220>  // b.pmore
    5aa8:	ldur	x8, [x29, #-16]
    5aac:	add	w9, w25, #0x1
    5ab0:	add	x8, x8, w25, uxtw #3
    5ab4:	add	x8, x8, #0x80
    5ab8:	mov	w25, w9
    5abc:	b	5b28 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x23c>
    5ac0:	ldrh	w8, [x27, #8]
    5ac4:	mov	w22, #0x8                   	// #8
    5ac8:	sub	x9, x24, #0x1
    5acc:	cmp	w8, #0x8
    5ad0:	csel	x8, x8, x22, hi  // hi = pmore
    5ad4:	b	5b48 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x25c>
    5ad8:	add	x9, x20, #0x7
    5adc:	mov	w8, w25
    5ae0:	add	x10, x8, x9, lsr #3
    5ae4:	cmp	x10, #0x8
    5ae8:	b.hi	5b34 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x248>  // b.pmore
    5aec:	ldur	x10, [x29, #-16]
    5af0:	lsr	x9, x9, #3
    5af4:	add	w25, w25, w9
    5af8:	add	x8, x10, x8, lsl #3
    5afc:	add	x8, x8, #0x80
    5b00:	str	x8, [x26, x19]
    5b04:	mov	w10, #0x1                   	// #1
    5b08:	b	59bc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xd0>
    5b0c:	ldur	x9, [x29, #-8]
    5b10:	sub	x8, x24, #0x1
    5b14:	orr	x8, x8, #0x7
    5b18:	add	x24, x8, #0x9
    5b1c:	add	x9, x8, x9
    5b20:	add	x8, x9, #0x1
    5b24:	mov	w25, #0x8                   	// #8
    5b28:	ldr	x8, [x8]
    5b2c:	mov	w10, #0x1                   	// #1
    5b30:	b	5a1c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x130>
    5b34:	ldrh	w8, [x27, #8]
    5b38:	mov	w25, #0x8                   	// #8
    5b3c:	sub	x9, x24, #0x1
    5b40:	cmp	w8, #0x8
    5b44:	csel	x8, x8, x25, hi  // hi = pmore
    5b48:	sub	x8, x8, #0x1
    5b4c:	orr	x8, x8, x9
    5b50:	ldur	x9, [x29, #-8]
    5b54:	add	x8, x8, #0x1
    5b58:	add	x24, x8, x20
    5b5c:	add	x8, x9, x8
    5b60:	str	x8, [x26, x19]
    5b64:	mov	w10, #0x1                   	// #1
    5b68:	b	59bc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xd0>
    5b6c:	ldp	q16, q17, [x8]
    5b70:	st2	{v16.s, v17.s}[0], [x8]
    5b74:	b	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x274>
    5b78:	ldp	q16, q17, [x8]
    5b7c:	ldr	q18, [x8, #32]
    5b80:	st3	{v16.s-v18.s}[0], [x8]
    5b84:	b	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x274>
    5b88:	ldp	q16, q17, [x8]
    5b8c:	ldp	q18, q19, [x8, #32]
    5b90:	st4	{v16.d-v19.d}[0], [x8]
    5b94:	b	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x274>
    5b98:	ldp	q16, q17, [x8]
    5b9c:	ldr	q18, [x8, #32]
    5ba0:	st3	{v16.d-v18.d}[0], [x8]
    5ba4:	b	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x274>
    5ba8:	ldp	q16, q17, [x8]
    5bac:	st2	{v16.d, v17.d}[0], [x8]
    5bb0:	b	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x274>
    5bb4:	ldr	w24, [x23, #28]
    5bb8:	ldp	x9, x8, [x29, #-40]
    5bbc:	ldur	x3, [x29, #-24]
    5bc0:	mov	x0, x23
    5bc4:	tst	w24, #0x20
    5bc8:	csel	x1, x9, x8, eq  // eq = none
    5bcc:	ldur	x8, [x29, #-48]
    5bd0:	mov	x2, x26
    5bd4:	blr	x8
    5bd8:	mov	w0, w24
    5bdc:	mov	sp, x29
    5be0:	ldp	x20, x19, [sp, #80]
    5be4:	ldp	x22, x21, [sp, #64]
    5be8:	ldp	x24, x23, [sp, #48]
    5bec:	ldp	x26, x25, [sp, #32]
    5bf0:	ldp	x28, x27, [sp, #16]
    5bf4:	ldp	x29, x30, [sp], #96
    5bf8:	ret
    5bfc:	bl	1a00 <abort@plt>
    5c00:	stp	x29, x30, [sp, #-32]!
    5c04:	str	x19, [sp, #16]
    5c08:	mov	x29, sp
    5c0c:	cbz	x0, 5c4c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x360>
    5c10:	ldr	x8, [x0]
    5c14:	cbz	x8, 5c4c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x360>
    5c18:	add	x19, x0, #0x8
    5c1c:	ldrh	w0, [x8, #10]
    5c20:	orr	w9, w0, #0x2
    5c24:	cmp	w9, #0xf
    5c28:	b.ne	5c40 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x354>  // b.any
    5c2c:	ldr	x0, [x8, #16]
    5c30:	bl	5c00 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x314>
    5c34:	tbz	w0, #31, 5c40 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x354>
    5c38:	ldr	x8, [x19], #8
    5c3c:	cbnz	x8, 5c1c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x330>
    5c40:	ldr	x19, [sp, #16]
    5c44:	ldp	x29, x30, [sp], #32
    5c48:	ret
    5c4c:	mov	w0, #0xffffffff            	// #-1
    5c50:	ldr	x19, [sp, #16]
    5c54:	ldp	x29, x30, [sp], #32
    5c58:	ret
    5c5c:	stp	x29, x30, [sp, #-32]!
    5c60:	stp	x20, x19, [sp, #16]
    5c64:	mov	x29, sp
    5c68:	cbz	x0, 5cc0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3d4>
    5c6c:	ldr	x8, [x0]
    5c70:	cbz	x8, 5cc0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3d4>
    5c74:	mov	w19, w1
    5c78:	add	x20, x0, #0x8
    5c7c:	b	5c98 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3ac>
    5c80:	ldr	x0, [x8, #16]
    5c84:	mov	w1, w19
    5c88:	bl	5c5c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x370>
    5c8c:	cbz	w0, 5cb4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c8>
    5c90:	ldr	x8, [x20], #8
    5c94:	cbz	x8, 5cc0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3d4>
    5c98:	ldrh	w9, [x8, #10]
    5c9c:	orr	w10, w9, #0x2
    5ca0:	cmp	w10, #0xf
    5ca4:	b.eq	5c80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x394>  // b.none
    5ca8:	cmp	w9, w19
    5cac:	b.eq	5c90 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3a4>  // b.none
    5cb0:	mov	w0, wzr
    5cb4:	ldp	x20, x19, [sp, #16]
    5cb8:	ldp	x29, x30, [sp], #32
    5cbc:	ret
    5cc0:	mov	w0, #0x1                   	// #1
    5cc4:	ldp	x20, x19, [sp, #16]
    5cc8:	ldp	x29, x30, [sp], #32
    5ccc:	ret
    5cd0:	stp	x29, x30, [x1]
    5cd4:	mov	x29, x1
    5cd8:	mov	sp, x0
    5cdc:	mov	x9, x2
    5ce0:	mov	x8, x3
    5ce4:	mov	x18, x5
    5ce8:	stp	x3, x4, [x29, #16]
    5cec:	tbz	w4, #7, 5d00 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x414>
    5cf0:	ldp	q0, q1, [sp]
    5cf4:	ldp	q2, q3, [sp, #32]
    5cf8:	ldp	q4, q5, [sp, #64]
    5cfc:	ldp	q6, q7, [sp, #96]
    5d00:	ldp	x0, x1, [sp, #128]
    5d04:	ldp	x2, x3, [sp, #144]
    5d08:	ldp	x4, x5, [sp, #160]
    5d0c:	ldp	x6, x7, [sp, #176]
    5d10:	add	sp, sp, #0xc0
    5d14:	blr	x9
    5d18:	ldp	x3, x4, [x29, #16]
    5d1c:	mov	sp, x29
    5d20:	ldp	x29, x30, [x29]
    5d24:	adr	x5, 5d40 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x454>
    5d28:	and	w4, w4, #0x1f
    5d2c:	add	x5, x5, x4, lsl #3
    5d30:	br	x5
    5d34:	nop
    5d38:	nop
    5d3c:	nop
    5d40:	ret
    5d44:	nop
    5d48:	str	x0, [x3]
    5d4c:	ret
    5d50:	stp	x0, x1, [x3]
    5d54:	ret
    5d58:	brk	#0x3e8
    5d5c:	ret
    5d60:	brk	#0x3e8
    5d64:	ret
    5d68:	brk	#0x3e8
    5d6c:	ret
    5d70:	brk	#0x3e8
    5d74:	ret
    5d78:	brk	#0x3e8
    5d7c:	ret
    5d80:	st4	{v0.s-v3.s}[0], [x3]
    5d84:	ret
    5d88:	st3	{v0.s-v2.s}[0], [x3]
    5d8c:	ret
    5d90:	stp	s0, s1, [x3]
    5d94:	ret
    5d98:	str	s0, [x3]
    5d9c:	ret
    5da0:	st4	{v0.d-v3.d}[0], [x3]
    5da4:	ret
    5da8:	st3	{v0.d-v2.d}[0], [x3]
    5dac:	ret
    5db0:	stp	d0, d1, [x3]
    5db4:	ret
    5db8:	str	d0, [x3]
    5dbc:	ret
    5dc0:	str	q3, [x3, #48]
    5dc4:	nop
    5dc8:	str	q2, [x3, #32]
    5dcc:	nop
    5dd0:	stp	q0, q1, [x3]
    5dd4:	ret
    5dd8:	str	q0, [x3]
    5ddc:	ret
    5de0:	uxtb	w0, w0
    5de4:	str	x0, [x3]
    5de8:	ret
    5dec:	nop
    5df0:	uxth	w0, w0
    5df4:	str	x0, [x3]
    5df8:	ret
    5dfc:	nop
    5e00:	mov	w0, w0
    5e04:	str	x0, [x3]
    5e08:	ret
    5e0c:	nop
    5e10:	sxtb	x0, w0
    5e14:	str	x0, [x3]
    5e18:	ret
    5e1c:	nop
    5e20:	sxth	x0, w0
    5e24:	str	x0, [x3]
    5e28:	ret
    5e2c:	nop
    5e30:	sxtw	x0, w0
    5e34:	str	x0, [x3]
    5e38:	ret
    5e3c:	nop
    5e40:	stp	x29, x30, [sp, #-272]!
    5e44:	stp	q0, q1, [sp, #16]
    5e48:	stp	q2, q3, [sp, #48]
    5e4c:	stp	q4, q5, [sp, #80]
    5e50:	stp	q6, q7, [sp, #112]
    5e54:	b	5e64 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x578>
    5e58:	nop
    5e5c:	nop
    5e60:	stp	x29, x30, [sp, #-272]!
    5e64:	mov	x29, sp
    5e68:	stp	x0, x1, [sp, #144]
    5e6c:	stp	x2, x3, [sp, #160]
    5e70:	stp	x4, x5, [sp, #176]
    5e74:	stp	x6, x7, [sp, #192]
    5e78:	ldp	x0, x1, [x17, #24]
    5e7c:	ldr	x2, [x17, #40]
    5e80:	add	x3, sp, #0x10
    5e84:	add	x4, sp, #0x110
    5e88:	add	x5, sp, #0xd0
    5e8c:	mov	x6, x8
    5e90:	bl	5930 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x44>
    5e94:	adr	x1, 5eb0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x5c4>
    5e98:	and	w0, w0, #0x1f
    5e9c:	add	x1, x1, x0, lsl #3
    5ea0:	add	x3, sp, #0xd0
    5ea4:	br	x1
    5ea8:	nop
    5eac:	nop
    5eb0:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5eb4:	nop
    5eb8:	ldr	x0, [x3]
    5ebc:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5ec0:	ldp	x0, x1, [x3]
    5ec4:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5ec8:	brk	#0x3e8
    5ecc:	nop
    5ed0:	brk	#0x3e8
    5ed4:	nop
    5ed8:	brk	#0x3e8
    5edc:	nop
    5ee0:	brk	#0x3e8
    5ee4:	nop
    5ee8:	brk	#0x3e8
    5eec:	nop
    5ef0:	ldr	s3, [x3, #12]
    5ef4:	nop
    5ef8:	ldr	s2, [x3, #8]
    5efc:	nop
    5f00:	ldp	s0, s1, [x3]
    5f04:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f08:	ldr	s0, [x3]
    5f0c:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f10:	ldr	d3, [x3, #24]
    5f14:	nop
    5f18:	ldr	d2, [x3, #16]
    5f1c:	nop
    5f20:	ldp	d0, d1, [x3]
    5f24:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f28:	ldr	d0, [x3]
    5f2c:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f30:	ldr	q3, [x3, #48]
    5f34:	nop
    5f38:	ldr	q2, [x3, #32]
    5f3c:	nop
    5f40:	ldp	q0, q1, [x3]
    5f44:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f48:	ldr	q0, [x3]
    5f4c:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f50:	ldrb	w0, [x3]
    5f54:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f58:	brk	#0x3e8
    5f5c:	nop
    5f60:	ldrh	w0, [x3]
    5f64:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f68:	brk	#0x3e8
    5f6c:	nop
    5f70:	ldr	w0, [x3]
    5f74:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f78:	brk	#0x3e8
    5f7c:	nop
    5f80:	ldrsb	x0, [x3]
    5f84:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f88:	brk	#0x3e8
    5f8c:	nop
    5f90:	ldrsh	x0, [x3]
    5f94:	b	5fa8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6bc>
    5f98:	brk	#0x3e8
    5f9c:	nop
    5fa0:	ldrsw	x0, [x3]
    5fa4:	nop
    5fa8:	ldp	x29, x30, [sp], #272
    5fac:	ret
    5fb0:	stp	x29, x30, [sp, #-272]!
    5fb4:	stp	q0, q1, [sp, #16]
    5fb8:	stp	q2, q3, [sp, #48]
    5fbc:	stp	q4, q5, [sp, #80]
    5fc0:	stp	q6, q7, [sp, #112]
    5fc4:	b	5fd4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6e8>
    5fc8:	nop
    5fcc:	nop
    5fd0:	stp	x29, x30, [sp, #-272]!
    5fd4:	mov	x29, sp
    5fd8:	stp	x0, x1, [sp, #144]
    5fdc:	stp	x2, x3, [sp, #160]
    5fe0:	stp	x4, x5, [sp, #176]
    5fe4:	stp	x6, x7, [sp, #192]
    5fe8:	ldp	x0, x1, [x18, #8]
    5fec:	mov	x2, x18
    5ff0:	b	5e80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x594>
    5ff4:	nop
    5ff8:	b	6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x714>
    5ffc:	nop
    6000:	adrp	x3, 17000 <memcpy@GLIBC_2.17>
    6004:	ldr	w2, [x3, #1480]
    6008:	cbnz	w2, 6018 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x72c>
    600c:	mrs	x4, ctr_el0
    6010:	mov	w2, w4
    6014:	str	w4, [x3, #1480]
    6018:	ubfx	x4, x2, #16, #4
    601c:	mov	w3, #0x4                   	// #4
    6020:	and	w5, w2, #0xf
    6024:	lsl	w4, w3, w4
    6028:	sub	w2, w4, #0x1
    602c:	bic	x2, x0, x2
    6030:	sxtw	x4, w4
    6034:	cmp	x2, x1
    6038:	lsl	w3, w3, w5
    603c:	b.cs	6050 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x764>  // b.hs, b.nlast
    6040:	dc	cvau, x2
    6044:	add	x2, x2, x4
    6048:	cmp	x1, x2
    604c:	b.hi	6040 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x754>  // b.pmore
    6050:	dsb	ish
    6054:	sub	w2, w3, #0x1
    6058:	sxtw	x3, w3
    605c:	bic	x0, x0, x2
    6060:	cmp	x1, x0
    6064:	b.ls	6078 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x78c>  // b.plast
    6068:	ic	ivau, x0
    606c:	add	x0, x0, x3
    6070:	cmp	x1, x0
    6074:	b.hi	6068 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x77c>  // b.pmore
    6078:	dsb	ish
    607c:	isb
    6080:	ret

Disassembly of section .fini:

0000000000006084 <.fini>:
    6084:	stp	x29, x30, [sp, #-16]!
    6088:	mov	x29, sp
    608c:	ldp	x29, x30, [sp], #16
    6090:	ret
