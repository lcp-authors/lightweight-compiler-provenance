
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//elf.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_elf_close>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x20, [x0]
  14:	ldr	x0, [x0, #72]
  18:	bl	0 <grub_free>
  1c:	ldr	x0, [x19, #80]
  20:	bl	0 <grub_free>
  24:	mov	x0, x19
  28:	bl	0 <grub_free>
  2c:	cbz	x20, 38 <grub_elf_close+0x38>
  30:	mov	x0, x20
  34:	bl	0 <grub_file_close>
  38:	adrp	x0, 0 <grub_elf_close>
  3c:	ldr	x0, [x0]
  40:	ldr	w0, [x0]
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
	...

0000000000000058 <grub_elf_file>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	str	x21, [sp, #32]
  68:	mov	x20, x0
  6c:	mov	x21, x1
  70:	mov	x0, #0x58                  	// #88
  74:	bl	0 <grub_zalloc>
  78:	mov	x19, x0
  7c:	cbz	x0, 124 <grub_elf_file+0xcc>
  80:	str	x20, [x0]
  84:	mov	x1, #0x0                   	// #0
  88:	mov	x0, x20
  8c:	bl	0 <grub_file_seek>
  90:	cmn	x0, #0x1
  94:	b.eq	108 <grub_elf_file+0xb0>  // b.none
  98:	mov	x1, x19
  9c:	ldr	x0, [x1], #8
  a0:	mov	x2, #0x40                  	// #64
  a4:	bl	0 <grub_file_read>
  a8:	cmp	x0, #0x40
  ac:	b.ne	f8 <grub_elf_file+0xa0>  // b.any
  b0:	ldr	w1, [x19, #8]
  b4:	mov	w0, #0x457f                	// #17791
  b8:	movk	w0, #0x464c, lsl #16
  bc:	cmp	w1, w0
  c0:	b.ne	d0 <grub_elf_file+0x78>  // b.any
  c4:	ldrb	w0, [x19, #14]
  c8:	cmp	w0, #0x1
  cc:	b.eq	150 <grub_elf_file+0xf8>  // b.none
  d0:	adrp	x0, 0 <grub_elf_close>
  d4:	ldr	x1, [x0]
  d8:	mov	w0, #0x15                  	// #21
  dc:	bl	0 <grub_error>
  e0:	cbnz	w0, 108 <grub_elf_file+0xb0>
  e4:	mov	x0, x21
  e8:	bl	0 <grub_strdup>
  ec:	str	x0, [x19, #80]
  f0:	cbnz	x0, 124 <grub_elf_file+0xcc>
  f4:	b	108 <grub_elf_file+0xb0>
  f8:	adrp	x0, 0 <grub_elf_close>
  fc:	ldr	x0, [x0]
 100:	ldr	w0, [x0]
 104:	cbz	w0, 138 <grub_elf_file+0xe0>
 108:	ldr	x0, [x19, #80]
 10c:	bl	0 <grub_free>
 110:	ldr	x0, [x19, #72]
 114:	bl	0 <grub_free>
 118:	mov	x0, x19
 11c:	bl	0 <grub_free>
 120:	mov	x19, #0x0                   	// #0
 124:	mov	x0, x19
 128:	ldp	x19, x20, [sp, #16]
 12c:	ldr	x21, [sp, #32]
 130:	ldp	x29, x30, [sp], #48
 134:	ret
 138:	mov	x2, x21
 13c:	adrp	x0, 0 <grub_elf_close>
 140:	ldr	x1, [x0]
 144:	mov	w0, #0x6                   	// #6
 148:	bl	0 <grub_error>
 14c:	b	108 <grub_elf_file+0xb0>
 150:	ldrb	w0, [x19, #12]
 154:	cmp	w0, #0x1
 158:	b.ne	19c <grub_elf_file+0x144>  // b.any
 15c:	ldrb	w0, [x19, #13]
 160:	cmp	w0, #0x1
 164:	b.ne	188 <grub_elf_file+0x130>  // b.any
 168:	ldr	w0, [x19, #28]
 16c:	cmp	w0, #0x1
 170:	b.eq	e4 <grub_elf_file+0x8c>  // b.none
 174:	adrp	x0, 0 <grub_elf_close>
 178:	ldr	x1, [x0]
 17c:	mov	w0, #0x15                  	// #21
 180:	bl	0 <grub_error>
 184:	b	e0 <grub_elf_file+0x88>
 188:	adrp	x0, 0 <grub_elf_close>
 18c:	ldr	x1, [x0]
 190:	mov	w0, #0x15                  	// #21
 194:	bl	0 <grub_error>
 198:	b	e0 <grub_elf_file+0x88>
 19c:	cmp	w0, #0x2
 1a0:	b.ne	1c4 <grub_elf_file+0x16c>  // b.any
 1a4:	ldrb	w0, [x19, #13]
 1a8:	cmp	w0, #0x1
 1ac:	b.eq	168 <grub_elf_file+0x110>  // b.none
 1b0:	adrp	x0, 0 <grub_elf_close>
 1b4:	ldr	x1, [x0]
 1b8:	mov	w0, #0x15                  	// #21
 1bc:	bl	0 <grub_error>
 1c0:	b	e0 <grub_elf_file+0x88>
 1c4:	adrp	x0, 0 <grub_elf_close>
 1c8:	ldr	x1, [x0]
 1cc:	mov	w0, #0x15                  	// #21
 1d0:	bl	0 <grub_error>
 1d4:	b	e0 <grub_elf_file+0x88>
	...

0000000000000200 <grub_elf_open>:
 200:	stp	x29, x30, [sp, #-32]!
 204:	mov	x29, sp
 208:	stp	x19, x20, [sp, #16]
 20c:	mov	x20, x0
 210:	bl	0 <grub_file_open>
 214:	mov	x19, x0
 218:	cbz	x0, 248 <grub_elf_open+0x48>
 21c:	mov	x1, x20
 220:	bl	58 <grub_elf_file>
 224:	mov	x20, x0
 228:	cbz	x0, 23c <grub_elf_open+0x3c>
 22c:	mov	x0, x20
 230:	ldp	x19, x20, [sp, #16]
 234:	ldp	x29, x30, [sp], #32
 238:	ret
 23c:	mov	x0, x19
 240:	bl	0 <grub_file_close>
 244:	b	22c <grub_elf_open+0x2c>
 248:	mov	x20, x0
 24c:	b	22c <grub_elf_open+0x2c>

0000000000000250 <grub_elf_is_elf32>:
 250:	ldrb	w0, [x0, #12]
 254:	cmp	w0, #0x1
 258:	cset	w0, eq  // eq = none
 25c:	ret

0000000000000260 <grub_elf32_load_phdrs>:
 260:	stp	x29, x30, [sp, #-48]!
 264:	mov	x29, sp
 268:	stp	x19, x20, [sp, #16]
 26c:	mov	x19, x0
 270:	ldr	x0, [x0, #72]
 274:	cbz	x0, 288 <grub_elf32_load_phdrs+0x28>
 278:	mov	w0, #0x0                   	// #0
 27c:	ldp	x19, x20, [sp, #16]
 280:	ldp	x29, x30, [sp], #48
 284:	ret
 288:	str	x21, [sp, #32]
 28c:	ldrh	w20, [x19, #52]
 290:	ldrh	w0, [x19, #50]
 294:	mul	w20, w20, w0
 298:	mov	w21, w20
 29c:	mov	x5, x21
 2a0:	ldr	w4, [x19, #36]
 2a4:	adrp	x0, 0 <grub_elf_close>
 2a8:	ldr	x3, [x0]
 2ac:	adrp	x0, 0 <grub_elf_close>
 2b0:	ldr	x2, [x0]
 2b4:	mov	w1, #0x11                  	// #17
 2b8:	adrp	x0, 0 <grub_elf_close>
 2bc:	ldr	x0, [x0]
 2c0:	bl	0 <grub_real_dprintf>
 2c4:	mov	x0, x21
 2c8:	bl	0 <grub_malloc>
 2cc:	str	x0, [x19, #72]
 2d0:	cbz	x0, 32c <grub_elf32_load_phdrs+0xcc>
 2d4:	ldr	w1, [x19, #36]
 2d8:	ldr	x0, [x19]
 2dc:	bl	0 <grub_file_seek>
 2e0:	cmn	x0, #0x1
 2e4:	b.eq	308 <grub_elf32_load_phdrs+0xa8>  // b.none
 2e8:	mov	x2, x21
 2ec:	ldr	x1, [x19, #72]
 2f0:	ldr	x0, [x19]
 2f4:	bl	0 <grub_file_read>
 2f8:	mov	x1, x0
 2fc:	mov	w0, #0x0                   	// #0
 300:	cmp	x1, w20, uxtw
 304:	b.eq	358 <grub_elf32_load_phdrs+0xf8>  // b.none
 308:	adrp	x0, 0 <grub_elf_close>
 30c:	ldr	x0, [x0]
 310:	ldr	w0, [x0]
 314:	cbz	w0, 340 <grub_elf32_load_phdrs+0xe0>
 318:	adrp	x0, 0 <grub_elf_close>
 31c:	ldr	x0, [x0]
 320:	ldr	w0, [x0]
 324:	ldr	x21, [sp, #32]
 328:	b	27c <grub_elf32_load_phdrs+0x1c>
 32c:	adrp	x0, 0 <grub_elf_close>
 330:	ldr	x0, [x0]
 334:	ldr	w0, [x0]
 338:	ldr	x21, [sp, #32]
 33c:	b	27c <grub_elf32_load_phdrs+0x1c>
 340:	ldr	x2, [x19, #80]
 344:	adrp	x0, 0 <grub_elf_close>
 348:	ldr	x1, [x0]
 34c:	mov	w0, #0x6                   	// #6
 350:	bl	0 <grub_error>
 354:	b	318 <grub_elf32_load_phdrs+0xb8>
 358:	ldr	x21, [sp, #32]
 35c:	b	27c <grub_elf32_load_phdrs+0x1c>
	...

0000000000000388 <grub_elf32_size>:
 388:	stp	x29, x30, [sp, #-48]!
 38c:	mov	x29, sp
 390:	stp	x19, x20, [sp, #16]
 394:	str	x21, [sp, #32]
 398:	mov	x21, x0
 39c:	mov	x19, x1
 3a0:	mov	x20, x2
 3a4:	bl	260 <grub_elf32_load_phdrs>
 3a8:	ldr	x3, [x21, #72]
 3ac:	cbz	x3, 47c <grub_elf32_size+0xf4>
 3b0:	ldrh	w1, [x21, #52]
 3b4:	add	x1, x3, x1, lsl #5
 3b8:	mov	w6, #0x1                   	// #1
 3bc:	mov	w2, #0x0                   	// #0
 3c0:	mov	w0, #0x0                   	// #0
 3c4:	mov	w5, #0xffffffff            	// #-1
 3c8:	b	3d0 <grub_elf32_size+0x48>
 3cc:	add	x3, x3, #0x20
 3d0:	cmp	x1, x3
 3d4:	b.ls	414 <grub_elf32_size+0x8c>  // b.plast
 3d8:	ldr	w4, [x3]
 3dc:	cmp	w4, #0x1
 3e0:	b.ne	3cc <grub_elf32_size+0x44>  // b.any
 3e4:	add	w2, w2, #0x1
 3e8:	ldr	w4, [x3, #12]
 3ec:	cmp	w5, w4
 3f0:	csel	w5, w5, w4, ls  // ls = plast
 3f4:	ldr	w7, [x3, #20]
 3f8:	add	w4, w4, w7
 3fc:	cmp	w0, w4
 400:	csel	w0, w0, w4, cs  // cs = hs, nlast
 404:	ldr	w4, [x3, #28]
 408:	cmp	w6, w4
 40c:	csel	w6, w6, w4, cs  // cs = hs, nlast
 410:	b	3cc <grub_elf32_size+0x44>
 414:	cbz	x19, 41c <grub_elf32_size+0x94>
 418:	str	wzr, [x19]
 41c:	cbz	w2, 44c <grub_elf32_size+0xc4>
 420:	cmp	w5, w0
 424:	b.hi	464 <grub_elf32_size+0xdc>  // b.pmore
 428:	cbz	x19, 430 <grub_elf32_size+0xa8>
 42c:	str	w5, [x19]
 430:	cbz	x20, 438 <grub_elf32_size+0xb0>
 434:	str	w6, [x20]
 438:	sub	w0, w0, w5
 43c:	ldp	x19, x20, [sp, #16]
 440:	ldr	x21, [sp, #32]
 444:	ldp	x29, x30, [sp], #48
 448:	ret
 44c:	adrp	x0, 0 <grub_elf_close>
 450:	ldr	x1, [x0]
 454:	mov	w0, #0x15                  	// #21
 458:	bl	0 <grub_error>
 45c:	mov	x0, #0x0                   	// #0
 460:	b	43c <grub_elf32_size+0xb4>
 464:	adrp	x0, 0 <grub_elf_close>
 468:	ldr	x1, [x0]
 46c:	mov	w0, #0x15                  	// #21
 470:	bl	0 <grub_error>
 474:	mov	x0, #0x0                   	// #0
 478:	b	43c <grub_elf32_size+0xb4>
 47c:	cbz	x19, 44c <grub_elf32_size+0xc4>
 480:	mov	w6, #0x1                   	// #1
 484:	mov	w2, #0x0                   	// #0
 488:	mov	w0, #0x0                   	// #0
 48c:	mov	w5, #0xffffffff            	// #-1
 490:	b	418 <grub_elf32_size+0x90>
 494:	nop
	...

00000000000004a8 <grub_elf32_load>:
 4a8:	stp	x29, x30, [sp, #-128]!
 4ac:	mov	x29, sp
 4b0:	stp	x19, x20, [sp, #16]
 4b4:	stp	x21, x22, [sp, #32]
 4b8:	stp	x23, x24, [sp, #48]
 4bc:	stp	x25, x26, [sp, #64]
 4c0:	mov	x21, x0
 4c4:	str	x1, [sp, #120]
 4c8:	str	x2, [sp, #96]
 4cc:	mov	w25, w3
 4d0:	str	x4, [sp, #104]
 4d4:	str	x5, [sp, #112]
 4d8:	bl	260 <grub_elf32_load_phdrs>
 4dc:	ldr	x19, [x21, #72]
 4e0:	cbz	x19, 504 <grub_elf32_load+0x5c>
 4e4:	stp	x27, x28, [sp, #80]
 4e8:	mov	x23, #0x0                   	// #0
 4ec:	mov	x22, #0xffffffffffffffff    	// #-1
 4f0:	and	w24, w25, #0x6
 4f4:	adrp	x28, 0 <grub_elf_close>
 4f8:	adrp	x27, 0 <grub_elf_close>
 4fc:	adrp	x26, 0 <grub_elf_close>
 500:	b	594 <grub_elf32_load+0xec>
 504:	mov	x23, #0x0                   	// #0
 508:	mov	x22, #0xffffffffffffffff    	// #-1
 50c:	b	648 <grub_elf32_load+0x1a0>
 510:	ldr	w0, [x19, #12]
 514:	and	x20, x0, #0xfffffff
 518:	cmp	w24, #0x2
 51c:	b.eq	530 <grub_elf32_load+0x88>  // b.none
 520:	mov	w20, w0
 524:	and	x0, x0, #0x3fffffff
 528:	cmp	w24, #0x4
 52c:	csel	x20, x0, x20, eq  // eq = none
 530:	ldr	x0, [sp, #96]
 534:	add	x20, x0, x20
 538:	cmp	x22, x20
 53c:	csel	x22, x22, x20, ls  // ls = plast
 540:	ldr	w5, [x19, #20]
 544:	mov	x4, x20
 548:	ldr	x3, [x28]
 54c:	ldr	x2, [x27]
 550:	mov	w1, #0x8e                  	// #142
 554:	ldr	x0, [x26]
 558:	bl	0 <grub_real_dprintf>
 55c:	ldr	w1, [x19, #4]
 560:	ldr	x0, [x21]
 564:	bl	0 <grub_file_seek>
 568:	cmn	x0, #0x1
 56c:	b.eq	5c4 <grub_elf32_load+0x11c>  // b.none
 570:	ldr	w2, [x19, #16]
 574:	cbnz	w2, 5d8 <grub_elf32_load+0x130>
 578:	ldr	w0, [x19, #16]
 57c:	ldr	w2, [x19, #20]
 580:	cmp	w0, w2
 584:	b.cc	630 <grub_elf32_load+0x188>  // b.lo, b.ul, b.last
 588:	ldr	w0, [x19, #20]
 58c:	add	x23, x23, x0
 590:	add	x19, x19, #0x20
 594:	ldrh	w0, [x21, #52]
 598:	ldr	x1, [x21, #72]
 59c:	add	x0, x1, x0, lsl #5
 5a0:	cmp	x19, x0
 5a4:	b.cs	644 <grub_elf32_load+0x19c>  // b.hs, b.nlast
 5a8:	ldr	w0, [x19]
 5ac:	cmp	w0, #0x1
 5b0:	b.eq	510 <grub_elf32_load+0x68>  // b.none
 5b4:	tst	x25, #0x1
 5b8:	ccmp	w0, #0x2, #0x0, ne  // ne = any
 5bc:	b.ne	590 <grub_elf32_load+0xe8>  // b.any
 5c0:	b	510 <grub_elf32_load+0x68>
 5c4:	adrp	x0, 0 <grub_elf_close>
 5c8:	ldr	x0, [x0]
 5cc:	ldr	w0, [x0]
 5d0:	ldp	x27, x28, [sp, #80]
 5d4:	b	66c <grub_elf32_load+0x1c4>
 5d8:	mov	w2, w2
 5dc:	mov	x1, x20
 5e0:	ldr	x0, [x21]
 5e4:	bl	0 <grub_file_read>
 5e8:	ldr	w1, [x19, #16]
 5ec:	cmp	x1, x0
 5f0:	b.eq	578 <grub_elf32_load+0xd0>  // b.none
 5f4:	adrp	x0, 0 <grub_elf_close>
 5f8:	ldr	x0, [x0]
 5fc:	ldr	w0, [x0]
 600:	cbz	w0, 618 <grub_elf32_load+0x170>
 604:	adrp	x0, 0 <grub_elf_close>
 608:	ldr	x0, [x0]
 60c:	ldr	w0, [x0]
 610:	ldp	x27, x28, [sp, #80]
 614:	b	66c <grub_elf32_load+0x1c4>
 618:	ldr	x2, [sp, #120]
 61c:	adrp	x0, 0 <grub_elf_close>
 620:	ldr	x1, [x0]
 624:	mov	w0, #0x6                   	// #6
 628:	bl	0 <grub_error>
 62c:	b	604 <grub_elf32_load+0x15c>
 630:	sub	w2, w2, w0
 634:	mov	w1, #0x0                   	// #0
 638:	add	x0, x20, w0, uxtw
 63c:	bl	0 <grub_memset>
 640:	b	588 <grub_elf32_load+0xe0>
 644:	ldp	x27, x28, [sp, #80]
 648:	ldr	x0, [sp, #104]
 64c:	cbz	x0, 654 <grub_elf32_load+0x1ac>
 650:	str	x22, [x0]
 654:	ldr	x0, [sp, #112]
 658:	cbz	x0, 660 <grub_elf32_load+0x1b8>
 65c:	str	x23, [x0]
 660:	adrp	x0, 0 <grub_elf_close>
 664:	ldr	x0, [x0]
 668:	ldr	w0, [x0]
 66c:	ldp	x19, x20, [sp, #16]
 670:	ldp	x21, x22, [sp, #32]
 674:	ldp	x23, x24, [sp, #48]
 678:	ldp	x25, x26, [sp, #64]
 67c:	ldp	x29, x30, [sp], #128
 680:	ret
 684:	nop
	...

00000000000006b0 <grub_elf_is_elf64>:
 6b0:	ldrb	w0, [x0, #12]
 6b4:	cmp	w0, #0x2
 6b8:	cset	w0, eq  // eq = none
 6bc:	ret

00000000000006c0 <grub_elf64_load_phdrs>:
 6c0:	stp	x29, x30, [sp, #-48]!
 6c4:	mov	x29, sp
 6c8:	stp	x19, x20, [sp, #16]
 6cc:	mov	x19, x0
 6d0:	ldr	x0, [x0, #72]
 6d4:	cbz	x0, 6e8 <grub_elf64_load_phdrs+0x28>
 6d8:	mov	w0, #0x0                   	// #0
 6dc:	ldp	x19, x20, [sp, #16]
 6e0:	ldp	x29, x30, [sp], #48
 6e4:	ret
 6e8:	str	x21, [sp, #32]
 6ec:	ldrh	w20, [x19, #64]
 6f0:	ldrh	w0, [x19, #62]
 6f4:	mul	w20, w20, w0
 6f8:	mov	w21, w20
 6fc:	mov	x5, x21
 700:	ldr	x4, [x19, #40]
 704:	adrp	x0, 0 <grub_elf_close>
 708:	ldr	x3, [x0]
 70c:	adrp	x0, 0 <grub_elf_close>
 710:	ldr	x2, [x0]
 714:	mov	w1, #0x11                  	// #17
 718:	adrp	x0, 0 <grub_elf_close>
 71c:	ldr	x0, [x0]
 720:	bl	0 <grub_real_dprintf>
 724:	mov	x0, x21
 728:	bl	0 <grub_malloc>
 72c:	str	x0, [x19, #72]
 730:	cbz	x0, 78c <grub_elf64_load_phdrs+0xcc>
 734:	ldr	x1, [x19, #40]
 738:	ldr	x0, [x19]
 73c:	bl	0 <grub_file_seek>
 740:	cmn	x0, #0x1
 744:	b.eq	768 <grub_elf64_load_phdrs+0xa8>  // b.none
 748:	mov	x2, x21
 74c:	ldr	x1, [x19, #72]
 750:	ldr	x0, [x19]
 754:	bl	0 <grub_file_read>
 758:	mov	x1, x0
 75c:	mov	w0, #0x0                   	// #0
 760:	cmp	x1, w20, uxtw
 764:	b.eq	7b8 <grub_elf64_load_phdrs+0xf8>  // b.none
 768:	adrp	x0, 0 <grub_elf_close>
 76c:	ldr	x0, [x0]
 770:	ldr	w0, [x0]
 774:	cbz	w0, 7a0 <grub_elf64_load_phdrs+0xe0>
 778:	adrp	x0, 0 <grub_elf_close>
 77c:	ldr	x0, [x0]
 780:	ldr	w0, [x0]
 784:	ldr	x21, [sp, #32]
 788:	b	6dc <grub_elf64_load_phdrs+0x1c>
 78c:	adrp	x0, 0 <grub_elf_close>
 790:	ldr	x0, [x0]
 794:	ldr	w0, [x0]
 798:	ldr	x21, [sp, #32]
 79c:	b	6dc <grub_elf64_load_phdrs+0x1c>
 7a0:	ldr	x2, [x19, #80]
 7a4:	adrp	x0, 0 <grub_elf_close>
 7a8:	ldr	x1, [x0]
 7ac:	mov	w0, #0x6                   	// #6
 7b0:	bl	0 <grub_error>
 7b4:	b	778 <grub_elf64_load_phdrs+0xb8>
 7b8:	ldr	x21, [sp, #32]
 7bc:	b	6dc <grub_elf64_load_phdrs+0x1c>
	...

00000000000007e8 <grub_elf64_size>:
 7e8:	stp	x29, x30, [sp, #-48]!
 7ec:	mov	x29, sp
 7f0:	stp	x19, x20, [sp, #16]
 7f4:	str	x21, [sp, #32]
 7f8:	mov	x21, x0
 7fc:	mov	x20, x1
 800:	mov	x19, x2
 804:	bl	6c0 <grub_elf64_load_phdrs>
 808:	ldr	x3, [x21, #72]
 80c:	cbz	x3, 8e8 <grub_elf64_size+0x100>
 810:	ldrh	w0, [x21, #64]
 814:	lsl	x7, x0, #3
 818:	sub	x7, x7, x0
 81c:	add	x7, x3, x7, lsl #3
 820:	mov	w6, #0x1                   	// #1
 824:	mov	w2, #0x0                   	// #0
 828:	mov	x0, #0x0                   	// #0
 82c:	mov	x5, #0xffffffffffffffff    	// #-1
 830:	b	838 <grub_elf64_size+0x50>
 834:	add	x3, x3, #0x38
 838:	cmp	x7, x3
 83c:	b.ls	87c <grub_elf64_size+0x94>  // b.plast
 840:	ldr	w4, [x3]
 844:	cmp	w4, #0x1
 848:	b.ne	834 <grub_elf64_size+0x4c>  // b.any
 84c:	add	w2, w2, #0x1
 850:	ldr	x4, [x3, #24]
 854:	cmp	x5, x4
 858:	csel	x5, x5, x4, ls  // ls = plast
 85c:	ldr	x1, [x3, #40]
 860:	add	x4, x4, x1
 864:	cmp	x0, x4
 868:	csel	x0, x0, x4, cs  // cs = hs, nlast
 86c:	ldr	x1, [x3, #48]
 870:	cmp	x1, w6, uxtw
 874:	csel	w6, w6, w1, ls  // ls = plast
 878:	b	834 <grub_elf64_size+0x4c>
 87c:	cbz	x20, 884 <grub_elf64_size+0x9c>
 880:	str	xzr, [x20]
 884:	cbz	w2, 8b8 <grub_elf64_size+0xd0>
 888:	cmp	x5, x0
 88c:	b.hi	8d0 <grub_elf64_size+0xe8>  // b.pmore
 890:	cbz	x20, 898 <grub_elf64_size+0xb0>
 894:	str	x5, [x20]
 898:	cbz	x19, 8a4 <grub_elf64_size+0xbc>
 89c:	mov	w6, w6
 8a0:	str	x6, [x19]
 8a4:	sub	x0, x0, x5
 8a8:	ldp	x19, x20, [sp, #16]
 8ac:	ldr	x21, [sp, #32]
 8b0:	ldp	x29, x30, [sp], #48
 8b4:	ret
 8b8:	adrp	x0, 0 <grub_elf_close>
 8bc:	ldr	x1, [x0]
 8c0:	mov	w0, #0x15                  	// #21
 8c4:	bl	0 <grub_error>
 8c8:	mov	x0, #0x0                   	// #0
 8cc:	b	8a8 <grub_elf64_size+0xc0>
 8d0:	adrp	x0, 0 <grub_elf_close>
 8d4:	ldr	x1, [x0]
 8d8:	mov	w0, #0x15                  	// #21
 8dc:	bl	0 <grub_error>
 8e0:	mov	x0, #0x0                   	// #0
 8e4:	b	8a8 <grub_elf64_size+0xc0>
 8e8:	cbz	x20, 8b8 <grub_elf64_size+0xd0>
 8ec:	mov	w6, #0x1                   	// #1
 8f0:	mov	w2, #0x0                   	// #0
 8f4:	mov	x0, #0x0                   	// #0
 8f8:	mov	x5, #0xffffffffffffffff    	// #-1
 8fc:	b	880 <grub_elf64_size+0x98>
	...

0000000000000910 <grub_elf64_load>:
 910:	stp	x29, x30, [sp, #-128]!
 914:	mov	x29, sp
 918:	stp	x19, x20, [sp, #16]
 91c:	stp	x21, x22, [sp, #32]
 920:	stp	x23, x24, [sp, #48]
 924:	stp	x25, x26, [sp, #64]
 928:	mov	x21, x0
 92c:	str	x1, [sp, #120]
 930:	str	x2, [sp, #96]
 934:	mov	w25, w3
 938:	str	x4, [sp, #104]
 93c:	str	x5, [sp, #112]
 940:	bl	6c0 <grub_elf64_load_phdrs>
 944:	ldr	x19, [x21, #72]
 948:	cbz	x19, 96c <grub_elf64_load+0x5c>
 94c:	stp	x27, x28, [sp, #80]
 950:	mov	x24, #0x0                   	// #0
 954:	mov	x22, #0xffffffffffffffff    	// #-1
 958:	and	w23, w25, #0x6
 95c:	adrp	x28, 0 <grub_elf_close>
 960:	adrp	x27, 0 <grub_elf_close>
 964:	adrp	x26, 0 <grub_elf_close>
 968:	b	9fc <grub_elf64_load+0xec>
 96c:	mov	x24, #0x0                   	// #0
 970:	mov	x22, #0xffffffffffffffff    	// #-1
 974:	b	ac4 <grub_elf64_load+0x1b4>
 978:	ldr	x20, [x19, #24]
 97c:	cmp	w23, #0x4
 980:	b.eq	a34 <grub_elf64_load+0x124>  // b.none
 984:	cmp	w23, #0x6
 988:	b.eq	a3c <grub_elf64_load+0x12c>  // b.none
 98c:	and	x0, x20, #0xfffffff
 990:	cmp	w23, #0x2
 994:	csel	x20, x0, x20, eq  // eq = none
 998:	ldr	x0, [sp, #96]
 99c:	add	x20, x0, x20
 9a0:	cmp	x22, x20
 9a4:	csel	x22, x22, x20, ls  // ls = plast
 9a8:	ldr	x5, [x19, #40]
 9ac:	mov	x4, x20
 9b0:	ldr	x3, [x28]
 9b4:	ldr	x2, [x27]
 9b8:	mov	w1, #0x8e                  	// #142
 9bc:	ldr	x0, [x26]
 9c0:	bl	0 <grub_real_dprintf>
 9c4:	ldr	x1, [x19, #8]
 9c8:	ldr	x0, [x21]
 9cc:	bl	0 <grub_file_seek>
 9d0:	cmn	x0, #0x1
 9d4:	b.eq	a44 <grub_elf64_load+0x134>  // b.none
 9d8:	ldr	x2, [x19, #32]
 9dc:	cbnz	x2, a58 <grub_elf64_load+0x148>
 9e0:	ldr	x0, [x19, #32]
 9e4:	ldr	x2, [x19, #40]
 9e8:	cmp	x0, x2
 9ec:	b.cc	aac <grub_elf64_load+0x19c>  // b.lo, b.ul, b.last
 9f0:	ldr	x0, [x19, #40]
 9f4:	add	x24, x24, x0
 9f8:	add	x19, x19, #0x38
 9fc:	ldrh	w1, [x21, #64]
 a00:	lsl	x0, x1, #3
 a04:	sub	x0, x0, x1
 a08:	ldr	x1, [x21, #72]
 a0c:	add	x0, x1, x0, lsl #3
 a10:	cmp	x19, x0
 a14:	b.cs	ac0 <grub_elf64_load+0x1b0>  // b.hs, b.nlast
 a18:	ldr	w0, [x19]
 a1c:	cmp	w0, #0x1
 a20:	b.eq	978 <grub_elf64_load+0x68>  // b.none
 a24:	tst	x25, #0x1
 a28:	ccmp	w0, #0x2, #0x0, ne  // ne = any
 a2c:	b.ne	9f8 <grub_elf64_load+0xe8>  // b.any
 a30:	b	978 <grub_elf64_load+0x68>
 a34:	and	x20, x20, #0x3fffffff
 a38:	b	998 <grub_elf64_load+0x88>
 a3c:	and	x20, x20, #0x3fffffffffffffff
 a40:	b	998 <grub_elf64_load+0x88>
 a44:	adrp	x0, 0 <grub_elf_close>
 a48:	ldr	x0, [x0]
 a4c:	ldr	w0, [x0]
 a50:	ldp	x27, x28, [sp, #80]
 a54:	b	ae8 <grub_elf64_load+0x1d8>
 a58:	mov	x1, x20
 a5c:	ldr	x0, [x21]
 a60:	bl	0 <grub_file_read>
 a64:	ldr	x1, [x19, #32]
 a68:	cmp	x1, x0
 a6c:	b.eq	9e0 <grub_elf64_load+0xd0>  // b.none
 a70:	adrp	x0, 0 <grub_elf_close>
 a74:	ldr	x0, [x0]
 a78:	ldr	w0, [x0]
 a7c:	cbz	w0, a94 <grub_elf64_load+0x184>
 a80:	adrp	x0, 0 <grub_elf_close>
 a84:	ldr	x0, [x0]
 a88:	ldr	w0, [x0]
 a8c:	ldp	x27, x28, [sp, #80]
 a90:	b	ae8 <grub_elf64_load+0x1d8>
 a94:	ldr	x2, [sp, #120]
 a98:	adrp	x0, 0 <grub_elf_close>
 a9c:	ldr	x1, [x0]
 aa0:	mov	w0, #0x6                   	// #6
 aa4:	bl	0 <grub_error>
 aa8:	b	a80 <grub_elf64_load+0x170>
 aac:	sub	x2, x2, x0
 ab0:	mov	w1, #0x0                   	// #0
 ab4:	add	x0, x0, x20
 ab8:	bl	0 <grub_memset>
 abc:	b	9f0 <grub_elf64_load+0xe0>
 ac0:	ldp	x27, x28, [sp, #80]
 ac4:	ldr	x0, [sp, #104]
 ac8:	cbz	x0, ad0 <grub_elf64_load+0x1c0>
 acc:	str	x22, [x0]
 ad0:	ldr	x0, [sp, #112]
 ad4:	cbz	x0, adc <grub_elf64_load+0x1cc>
 ad8:	str	x24, [x0]
 adc:	adrp	x0, 0 <grub_elf_close>
 ae0:	ldr	x0, [x0]
 ae4:	ldr	w0, [x0]
 ae8:	ldp	x19, x20, [sp, #16]
 aec:	ldp	x21, x22, [sp, #32]
 af0:	ldp	x23, x24, [sp, #48]
 af4:	ldp	x25, x26, [sp, #64]
 af8:	ldp	x29, x30, [sp], #128
 afc:	ret
	...
