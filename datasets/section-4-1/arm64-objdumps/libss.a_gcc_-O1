In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libss.a_gcc_-O1:

ss_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <initialize_ss_error_table_r>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x1, [x0]
  14:	cbz	x1, 44 <initialize_ss_error_table_r+0x44>
  18:	adrp	x2, 0 <initialize_ss_error_table_r>
  1c:	add	x2, x2, #0x0
  20:	b	28 <initialize_ss_error_table_r+0x28>
  24:	mov	x1, x0
  28:	ldr	x0, [x1, #8]
  2c:	ldr	x0, [x0]
  30:	cmp	x0, x2
  34:	b.eq	68 <initialize_ss_error_table_r+0x68>  // b.none
  38:	ldr	x0, [x1]
  3c:	cbnz	x0, 24 <initialize_ss_error_table_r+0x24>
  40:	mov	x19, x1
  44:	mov	x0, #0x10                  	// #16
  48:	bl	0 <malloc>
  4c:	cbz	x0, 74 <initialize_ss_error_table_r+0x74>
  50:	adrp	x1, 0 <initialize_ss_error_table_r>
  54:	add	x1, x1, #0x0
  58:	add	x1, x1, #0x68
  5c:	str	x1, [x0, #8]
  60:	str	xzr, [x0]
  64:	str	x0, [x19]
  68:	ldr	x19, [sp, #16]
  6c:	ldp	x29, x30, [sp], #32
  70:	ret
  74:	adrp	x0, 0 <initialize_ss_error_table_r>
  78:	ldr	x0, [x0]
  7c:	cbnz	x0, 68 <initialize_ss_error_table_r+0x68>
  80:	adrp	x0, 0 <initialize_ss_error_table_r>
  84:	add	x0, x0, #0x0
  88:	b	50 <initialize_ss_error_table_r+0x50>

000000000000008c <initialize_ss_error_table>:
  8c:	stp	x29, x30, [sp, #-16]!
  90:	mov	x29, sp
  94:	adrp	x0, 0 <_et_list>
  98:	add	x0, x0, #0x0
  9c:	bl	0 <initialize_ss_error_table_r>
  a0:	ldp	x29, x30, [sp], #16
  a4:	ret

std_rqs.o:     file format elf64-littleaarch64


invocation.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_create_invocation>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	stp	x25, x26, [sp, #64]
  18:	stp	x27, x28, [sp, #80]
  1c:	mov	x23, x0
  20:	mov	x28, x1
  24:	mov	x27, x2
  28:	mov	x26, x3
  2c:	mov	x25, x4
  30:	str	wzr, [x4]
  34:	adrp	x0, 0 <_ss_table>
  38:	ldr	x24, [x0]
  3c:	mov	x0, #0x90                  	// #144
  40:	bl	0 <malloc>
  44:	mov	x19, x0
  48:	cbz	x24, 15c <ss_create_invocation+0x15c>
  4c:	bl	0 <initialize_ss_error_table>
  50:	ldr	x0, [x24, #8]
  54:	cbz	x0, 174 <ss_create_invocation+0x174>
  58:	mov	x0, #0x2                   	// #2
  5c:	sub	x2, x24, #0x8
  60:	mov	w21, w0
  64:	lsl	x22, x0, #3
  68:	mov	x20, x0
  6c:	add	x0, x0, #0x1
  70:	ldr	x1, [x2, x0, lsl #3]
  74:	cbnz	x1, 60 <ss_create_invocation+0x60>
  78:	add	w1, w21, #0x2
  7c:	lsl	x1, x1, #3
  80:	mov	x0, x24
  84:	bl	0 <realloc>
  88:	mov	x24, x0
  8c:	cbz	x0, 184 <ss_create_invocation+0x184>
  90:	add	x20, x20, #0x1
  94:	str	xzr, [x0, x20, lsl #3]
  98:	str	x19, [x0, x22]
  9c:	str	x23, [x19]
  a0:	str	x28, [x19, #8]
  a4:	str	xzr, [x19, #24]
  a8:	str	xzr, [x19, #32]
  ac:	mov	x0, #0x8                   	// #8
  b0:	bl	0 <malloc>
  b4:	str	x0, [x19, #40]
  b8:	str	xzr, [x0]
  bc:	str	x27, [x19, #48]
  c0:	mov	x0, x23
  c4:	bl	0 <strlen>
  c8:	add	w0, w0, #0x4
  cc:	bl	0 <malloc>
  d0:	mov	x20, x0
  d4:	str	x0, [x19, #56]
  d8:	mov	x1, x23
  dc:	bl	0 <strcpy>
  e0:	mov	x0, x20
  e4:	bl	0 <strlen>
  e8:	mov	w1, #0x203a                	// #8250
  ec:	movk	w1, #0x20, lsl #16
  f0:	str	w1, [x20, x0]
  f4:	str	xzr, [x19, #72]
  f8:	ldrb	w0, [x19, #80]
  fc:	and	w0, w0, #0xfffffffc
 100:	strb	w0, [x19, #80]
 104:	mov	x1, #0x8                   	// #8
 108:	mov	x0, #0x2                   	// #2
 10c:	bl	0 <calloc>
 110:	str	x0, [x19, #64]
 114:	str	x26, [x0]
 118:	str	xzr, [x0, #8]
 11c:	str	xzr, [x19, #88]
 120:	str	xzr, [x19, #96]
 124:	str	xzr, [x19, #104]
 128:	str	xzr, [x19, #112]
 12c:	str	xzr, [x19, #120]
 130:	str	xzr, [x19, #128]
 134:	adrp	x0, 0 <_ss_table>
 138:	str	x24, [x0]
 13c:	mov	w0, w21
 140:	ldp	x19, x20, [sp, #16]
 144:	ldp	x21, x22, [sp, #32]
 148:	ldp	x23, x24, [sp, #48]
 14c:	ldp	x25, x26, [sp, #64]
 150:	ldp	x27, x28, [sp, #80]
 154:	ldp	x29, x30, [sp], #96
 158:	ret
 15c:	mov	x0, #0x10                  	// #16
 160:	bl	0 <malloc>
 164:	mov	x24, x0
 168:	str	xzr, [x0, #8]
 16c:	str	xzr, [x0]
 170:	b	4c <ss_create_invocation+0x4c>
 174:	mov	w21, #0x1                   	// #1
 178:	mov	x22, #0x8                   	// #8
 17c:	mov	x20, #0x1                   	// #1
 180:	b	78 <ss_create_invocation+0x78>
 184:	mov	w0, #0xc                   	// #12
 188:	str	w0, [x25]
 18c:	mov	x0, x19
 190:	bl	0 <free>
 194:	mov	w21, #0x0                   	// #0
 198:	b	13c <ss_create_invocation+0x13c>

000000000000019c <ss_delete_invocation>:
 19c:	stp	x29, x30, [sp, #-48]!
 1a0:	mov	x29, sp
 1a4:	stp	x19, x20, [sp, #16]
 1a8:	mov	w20, w0
 1ac:	adrp	x0, 0 <_ss_table>
 1b0:	ldr	x0, [x0]
 1b4:	ldr	x19, [x0, w20, sxtw #3]
 1b8:	ldr	x0, [x19, #56]
 1bc:	bl	0 <free>
 1c0:	ldr	x0, [x19, #64]
 1c4:	bl	0 <free>
 1c8:	ldr	x0, [x19, #40]
 1cc:	ldr	x1, [x0]
 1d0:	cbz	x1, 1ec <ss_delete_invocation+0x50>
 1d4:	add	x2, sp, #0x2c
 1d8:	mov	w0, w20
 1dc:	bl	0 <ss_delete_info_dir>
 1e0:	ldr	x0, [x19, #40]
 1e4:	ldr	x1, [x0]
 1e8:	cbnz	x1, 1d4 <ss_delete_invocation+0x38>
 1ec:	bl	0 <free>
 1f0:	mov	x0, x19
 1f4:	bl	0 <free>
 1f8:	ldp	x19, x20, [sp, #16]
 1fc:	ldp	x29, x30, [sp], #48
 200:	ret

help.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_help>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x23, x24, [sp, #48]
   c:	stp	x25, x26, [sp, #64]
  10:	str	x27, [sp, #80]
  14:	mov	x24, x1
  18:	mov	w27, w2
  1c:	adrp	x1, 0 <_ss_table>
  20:	ldr	x1, [x1]
  24:	ldr	x25, [x1, w27, sxtw #3]
  28:	cmp	w0, #0x1
  2c:	b.eq	150 <ss_help+0x150>  // b.none
  30:	cmp	w0, #0x2
  34:	b.ne	15c <ss_help+0x15c>  // b.any
  38:	ldr	x0, [x25, #40]
  3c:	cbz	x0, 1e0 <ss_help+0x1e0>
  40:	stp	x19, x20, [sp, #16]
  44:	stp	x21, x22, [sp, #32]
  48:	ldr	x20, [x0]
  4c:	mov	x22, #0x8                   	// #8
  50:	mov	w26, #0x2f                  	// #47
  54:	adrp	x23, 0 <ss_help>
  58:	add	x23, x23, #0x0
  5c:	cbz	x20, 1f8 <ss_help+0x1f8>
  60:	mov	x0, x20
  64:	bl	0 <strlen>
  68:	mov	x19, x0
  6c:	ldr	x21, [x24, #8]
  70:	mov	x0, x21
  74:	bl	0 <strlen>
  78:	add	x0, x19, x0
  7c:	add	x0, x0, #0x7
  80:	bl	0 <malloc>
  84:	mov	x19, x0
  88:	cbz	x0, 218 <ss_help+0x218>
  8c:	mov	x1, x20
  90:	bl	0 <strcpy>
  94:	mov	x0, x19
  98:	bl	0 <strlen>
  9c:	strh	w26, [x19, x0]
  a0:	mov	x1, x21
  a4:	mov	x0, x19
  a8:	bl	0 <strcat>
  ac:	mov	x0, x19
  b0:	bl	0 <strlen>
  b4:	add	x1, x19, x0
  b8:	ldr	w2, [x23]
  bc:	str	w2, [x19, x0]
  c0:	ldrh	w0, [x23, #4]
  c4:	strh	w0, [x1, #4]
  c8:	mov	w1, #0x0                   	// #0
  cc:	mov	x0, x19
  d0:	bl	0 <open>
  d4:	mov	w20, w0
  d8:	mov	x0, x19
  dc:	bl	0 <free>
  e0:	tbz	w20, #31, 278 <ss_help+0x278>
  e4:	ldr	x0, [x25, #40]
  e8:	ldr	x20, [x0, x22]
  ec:	add	x22, x22, #0x8
  f0:	cbnz	x20, 60 <ss_help+0x60>
  f4:	ldr	x20, [x24, #8]
  f8:	mov	x0, x20
  fc:	bl	0 <strlen>
 100:	add	x0, x0, #0x13
 104:	bl	0 <malloc>
 108:	mov	x19, x0
 10c:	adrp	x1, 0 <ss_help>
 110:	add	x1, x1, #0x0
 114:	ldp	x2, x3, [x1]
 118:	stp	x2, x3, [x0]
 11c:	ldur	w1, [x1, #15]
 120:	stur	w1, [x0, #15]
 124:	mov	x1, x20
 128:	bl	0 <strcat>
 12c:	mov	x2, x19
 130:	mov	x1, #0x0                   	// #0
 134:	mov	w0, w27
 138:	bl	0 <ss_perror>
 13c:	mov	x0, x19
 140:	bl	0 <free>
 144:	ldp	x19, x20, [sp, #16]
 148:	ldp	x21, x22, [sp, #32]
 14c:	b	1b0 <ss_help+0x1b0>
 150:	mov	x1, x24
 154:	bl	0 <ss_list_requests>
 158:	b	1b0 <ss_help+0x1b0>
 15c:	stp	x19, x20, [sp, #16]
 160:	ldr	x20, [x25, #32]
 164:	mov	x0, x20
 168:	bl	0 <strlen>
 16c:	add	x0, x0, #0x28
 170:	lsl	x0, x0, #1
 174:	bl	0 <malloc>
 178:	mov	x19, x0
 17c:	cbz	x0, 1c4 <ss_help+0x1c4>
 180:	mov	x3, x20
 184:	mov	x2, x20
 188:	adrp	x1, 0 <ss_help>
 18c:	add	x1, x1, #0x0
 190:	bl	0 <sprintf>
 194:	mov	x2, x19
 198:	mov	x1, #0x0                   	// #0
 19c:	mov	w0, w27
 1a0:	bl	0 <ss_perror>
 1a4:	mov	x0, x19
 1a8:	bl	0 <free>
 1ac:	ldp	x19, x20, [sp, #16]
 1b0:	ldp	x23, x24, [sp, #48]
 1b4:	ldp	x25, x26, [sp, #64]
 1b8:	ldr	x27, [sp, #80]
 1bc:	ldp	x29, x30, [sp], #96
 1c0:	ret
 1c4:	adrp	x2, 0 <ss_help>
 1c8:	add	x2, x2, #0x0
 1cc:	mov	x1, #0x0                   	// #0
 1d0:	mov	w0, w27
 1d4:	bl	0 <ss_perror>
 1d8:	ldp	x19, x20, [sp, #16]
 1dc:	b	1b0 <ss_help+0x1b0>
 1e0:	mov	x2, #0x0                   	// #0
 1e4:	mov	x1, #0x6d03                	// #27907
 1e8:	movk	x1, #0xb, lsl #16
 1ec:	mov	w0, w27
 1f0:	bl	0 <ss_perror>
 1f4:	b	1b0 <ss_help+0x1b0>
 1f8:	mov	x2, #0x0                   	// #0
 1fc:	mov	x1, #0x6d03                	// #27907
 200:	movk	x1, #0xb, lsl #16
 204:	mov	w0, w27
 208:	bl	0 <ss_perror>
 20c:	ldp	x19, x20, [sp, #16]
 210:	ldp	x21, x22, [sp, #32]
 214:	b	1b0 <ss_help+0x1b0>
 218:	adrp	x2, 0 <ss_help>
 21c:	add	x2, x2, #0x0
 220:	mov	x1, #0x0                   	// #0
 224:	mov	w0, w27
 228:	bl	0 <ss_perror>
 22c:	ldp	x19, x20, [sp, #16]
 230:	ldp	x21, x22, [sp, #32]
 234:	b	1b0 <ss_help+0x1b0>
 238:	bl	0 <__errno_location>
 23c:	adrp	x2, 0 <ss_help>
 240:	add	x2, x2, #0x0
 244:	ldrsw	x1, [x0]
 248:	mov	w0, w27
 24c:	bl	0 <ss_perror>
 250:	mov	w0, w20
 254:	bl	0 <close>
 258:	ldp	x19, x20, [sp, #16]
 25c:	ldp	x21, x22, [sp, #32]
 260:	b	1b0 <ss_help+0x1b0>
 264:	mov	w1, #0x0                   	// #0
 268:	mov	w0, w20
 26c:	bl	0 <dup2>
 270:	bl	0 <ss_page_stdin>
 274:	b	28c <ss_help+0x28c>
 278:	bl	0 <fork>
 27c:	mov	w19, w0
 280:	cmn	w0, #0x1
 284:	b.eq	238 <ss_help+0x238>  // b.none
 288:	cbz	w0, 264 <ss_help+0x264>
 28c:	mov	w0, w20
 290:	bl	0 <close>
 294:	mov	x0, #0x0                   	// #0
 298:	bl	0 <wait>
 29c:	cmp	w0, w19
 2a0:	b.ne	294 <ss_help+0x294>  // b.any
 2a4:	ldp	x19, x20, [sp, #16]
 2a8:	ldp	x21, x22, [sp, #32]
 2ac:	b	1b0 <ss_help+0x1b0>

00000000000002b0 <ss_add_info_dir>:
 2b0:	stp	x29, x30, [sp, #-64]!
 2b4:	mov	x29, sp
 2b8:	stp	x19, x20, [sp, #16]
 2bc:	mov	x20, x2
 2c0:	cbz	x1, 2d0 <ss_add_info_dir+0x20>
 2c4:	mov	x19, x1
 2c8:	ldrb	w1, [x1]
 2cc:	cbnz	w1, 2e8 <ss_add_info_dir+0x38>
 2d0:	mov	w0, #0x6d03                	// #27907
 2d4:	movk	w0, #0xb, lsl #16
 2d8:	str	w0, [x20]
 2dc:	ldp	x19, x20, [sp, #16]
 2e0:	ldp	x29, x30, [sp], #64
 2e4:	ret
 2e8:	stp	x23, x24, [sp, #48]
 2ec:	adrp	x1, 0 <_ss_table>
 2f0:	ldr	x1, [x1]
 2f4:	ldr	x23, [x1, w0, sxtw #3]
 2f8:	mov	x0, x19
 2fc:	bl	0 <opendir>
 300:	cbz	x0, 384 <ss_add_info_dir+0xd4>
 304:	stp	x21, x22, [sp, #32]
 308:	bl	0 <closedir>
 30c:	ldr	x0, [x23, #40]
 310:	ldr	x1, [x0]
 314:	cbz	x1, 398 <ss_add_info_dir+0xe8>
 318:	mov	x3, #0x1                   	// #1
 31c:	sub	x4, x0, #0x8
 320:	mov	w2, w3
 324:	lsl	x22, x3, #3
 328:	mov	x21, x3
 32c:	add	x3, x3, #0x1
 330:	ldr	x1, [x4, x3, lsl #3]
 334:	cbnz	x1, 320 <ss_add_info_dir+0x70>
 338:	add	w1, w2, #0x2
 33c:	lsl	x1, x1, #3
 340:	bl	0 <realloc>
 344:	mov	x24, x0
 348:	cbz	x0, 3a8 <ss_add_info_dir+0xf8>
 34c:	str	x0, [x23, #40]
 350:	add	x21, x21, #0x1
 354:	str	xzr, [x0, x21, lsl #3]
 358:	mov	x0, x19
 35c:	bl	0 <strlen>
 360:	add	w0, w0, #0x1
 364:	bl	0 <malloc>
 368:	str	x0, [x24, x22]
 36c:	mov	x1, x19
 370:	bl	0 <strcpy>
 374:	str	wzr, [x20]
 378:	ldp	x21, x22, [sp, #32]
 37c:	ldp	x23, x24, [sp, #48]
 380:	b	2dc <ss_add_info_dir+0x2c>
 384:	bl	0 <__errno_location>
 388:	ldr	w0, [x0]
 38c:	str	w0, [x20]
 390:	ldp	x23, x24, [sp, #48]
 394:	b	2dc <ss_add_info_dir+0x2c>
 398:	mov	w2, #0x0                   	// #0
 39c:	mov	x22, #0x0                   	// #0
 3a0:	mov	x21, #0x0                   	// #0
 3a4:	b	338 <ss_add_info_dir+0x88>
 3a8:	str	xzr, [x23, #40]
 3ac:	bl	0 <__errno_location>
 3b0:	ldr	w0, [x0]
 3b4:	str	w0, [x20]
 3b8:	ldp	x21, x22, [sp, #32]
 3bc:	ldp	x23, x24, [sp, #48]
 3c0:	b	2dc <ss_add_info_dir+0x2c>

00000000000003c4 <ss_delete_info_dir>:
 3c4:	stp	x29, x30, [sp, #-48]!
 3c8:	mov	x29, sp
 3cc:	stp	x19, x20, [sp, #16]
 3d0:	str	x21, [sp, #32]
 3d4:	mov	x20, x1
 3d8:	mov	x21, x2
 3dc:	adrp	x1, 0 <_ss_table>
 3e0:	ldr	x1, [x1]
 3e4:	ldr	x0, [x1, w0, sxtw #3]
 3e8:	ldr	x19, [x0, #40]
 3ec:	ldr	x0, [x19]
 3f0:	cbz	x0, 408 <ss_delete_info_dir+0x44>
 3f4:	mov	x1, x20
 3f8:	bl	0 <strcmp>
 3fc:	cbz	w0, 424 <ss_delete_info_dir+0x60>
 400:	ldr	x0, [x19, #8]!
 404:	cbnz	x0, 3f4 <ss_delete_info_dir+0x30>
 408:	mov	w0, #0x6d03                	// #27907
 40c:	movk	w0, #0xb, lsl #16
 410:	str	w0, [x21]
 414:	ldp	x19, x20, [sp, #16]
 418:	ldr	x21, [sp, #32]
 41c:	ldp	x29, x30, [sp], #48
 420:	ret
 424:	ldr	x0, [x19]
 428:	cbz	x0, 43c <ss_delete_info_dir+0x78>
 42c:	ldr	x0, [x19, #8]
 430:	str	x0, [x19]
 434:	add	x19, x19, #0x8
 438:	cbnz	x0, 42c <ss_delete_info_dir+0x68>
 43c:	str	wzr, [x21]
 440:	b	414 <ss_delete_info_dir+0x50>

execute_cmd.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <really_execute_command>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	stp	x25, x26, [sp, #64]
  10:	stp	x27, x28, [sp, #80]
  14:	mov	w3, w0
  18:	str	w0, [sp, #108]
  1c:	mov	w25, w1
  20:	str	x2, [sp, #96]
  24:	adrp	x0, 0 <_ss_table>
  28:	ldr	x0, [x0]
  2c:	add	x28, x0, w3, sxtw #3
  30:	ldr	x0, [x0, w3, sxtw #3]
  34:	ldr	x26, [x0, #64]
  38:	ldr	x0, [x26]
  3c:	cbz	x0, 8c <really_execute_command+0x8c>
  40:	stp	x19, x20, [sp, #16]
  44:	stp	x23, x24, [sp, #48]
  48:	b	a0 <really_execute_command+0xa0>
  4c:	str	x23, [x20, #32]
  50:	ldr	x4, [x21, #8]
  54:	ldr	x3, [x20, #48]
  58:	ldr	w2, [sp, #108]
  5c:	mov	x1, x24
  60:	mov	w0, w25
  64:	blr	x4
  68:	str	xzr, [x20, #32]
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x23, x24, [sp, #48]
  74:	mov	w0, w22
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x25, x26, [sp, #64]
  80:	ldp	x27, x28, [sp, #80]
  84:	ldp	x29, x30, [sp], #112
  88:	ret
  8c:	mov	w22, #0x6d04                	// #27908
  90:	movk	w22, #0xb, lsl #16
  94:	b	74 <really_execute_command+0x74>
  98:	ldr	x0, [x26, #8]!
  9c:	cbz	x0, f4 <really_execute_command+0xf4>
  a0:	ldr	x1, [sp, #96]
  a4:	ldr	x24, [x1]
  a8:	ldr	x27, [x24]
  ac:	ldr	x20, [x28]
  b0:	str	w25, [x20, #16]
  b4:	str	x24, [x20, #24]
  b8:	ldr	x21, [x0, #8]
  bc:	ldr	x19, [x21]
  c0:	cbz	x19, 98 <really_execute_command+0x98>
  c4:	ldr	x23, [x19]
  c8:	mov	x0, x23
  cc:	cbz	x23, e8 <really_execute_command+0xe8>
  d0:	mov	x1, x27
  d4:	bl	0 <strcmp>
  d8:	mov	w22, w0
  dc:	cbz	w0, 4c <really_execute_command+0x4c>
  e0:	ldr	x0, [x19, #8]!
  e4:	cbnz	x0, d0 <really_execute_command+0xd0>
  e8:	ldr	x19, [x21, #32]!
  ec:	cbnz	x19, c4 <really_execute_command+0xc4>
  f0:	b	98 <really_execute_command+0x98>
  f4:	mov	w22, #0x6d04                	// #27908
  f8:	movk	w22, #0xb, lsl #16
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x23, x24, [sp, #48]
 104:	b	74 <really_execute_command+0x74>

0000000000000108 <ss_execute_command>:
 108:	stp	x29, x30, [sp, #-64]!
 10c:	mov	x29, sp
 110:	stp	x19, x20, [sp, #16]
 114:	str	x21, [sp, #32]
 118:	mov	w21, w0
 11c:	mov	x20, x1
 120:	str	x1, [sp, #56]
 124:	ldr	x0, [x1]
 128:	cbz	x0, 1a8 <ss_execute_command+0xa0>
 12c:	add	x2, x1, #0x8
 130:	mov	w19, #0x0                   	// #0
 134:	mov	w1, w19
 138:	add	w19, w19, #0x1
 13c:	str	x2, [sp, #56]
 140:	ldr	x3, [x2], #8
 144:	cbnz	x3, 134 <ss_execute_command+0x2c>
 148:	add	w1, w1, #0x2
 14c:	sbfiz	x0, x1, #3, #32
 150:	bl	0 <malloc>
 154:	str	x0, [sp, #56]
 158:	tbnz	w19, #31, 178 <ss_execute_command+0x70>
 15c:	mov	x2, #0x0                   	// #0
 160:	ldr	x4, [x20, x2, lsl #3]
 164:	ldr	x3, [sp, #56]
 168:	str	x4, [x3, x2, lsl #3]
 16c:	add	x2, x2, #0x1
 170:	cmp	w19, w2
 174:	b.ge	160 <ss_execute_command+0x58>  // b.tcont
 178:	add	x2, sp, #0x38
 17c:	mov	w1, w19
 180:	mov	w0, w21
 184:	bl	0 <really_execute_command>
 188:	mov	w19, w0
 18c:	ldr	x0, [sp, #56]
 190:	bl	0 <free>
 194:	mov	w0, w19
 198:	ldp	x19, x20, [sp, #16]
 19c:	ldr	x21, [sp, #32]
 1a0:	ldp	x29, x30, [sp], #64
 1a4:	ret
 1a8:	mov	x0, #0x8                   	// #8
 1ac:	bl	0 <malloc>
 1b0:	str	x0, [sp, #56]
 1b4:	ldr	x1, [x20]
 1b8:	str	x1, [x0]
 1bc:	mov	w19, #0x0                   	// #0
 1c0:	b	178 <ss_execute_command+0x70>

00000000000001c4 <ss_execute_line>:
 1c4:	stp	x29, x30, [sp, #-48]!
 1c8:	mov	x29, sp
 1cc:	stp	x19, x20, [sp, #16]
 1d0:	mov	w19, w0
 1d4:	ldrb	w2, [x1]
 1d8:	cmp	w2, #0x20
 1dc:	ccmp	w2, #0x9, #0x4, ne  // ne = any
 1e0:	b.ne	1f4 <ss_execute_line+0x30>  // b.any
 1e4:	ldrb	w2, [x1, #1]!
 1e8:	cmp	w2, #0x20
 1ec:	ccmp	w2, #0x9, #0x4, ne  // ne = any
 1f0:	b.eq	1e4 <ss_execute_line+0x20>  // b.none
 1f4:	cmp	w2, #0x21
 1f8:	b.ne	238 <ss_execute_line+0x74>  // b.any
 1fc:	adrp	x0, 0 <_ss_table>
 200:	ldr	x0, [x0]
 204:	ldr	x0, [x0, w19, sxtw #3]
 208:	ldrb	w0, [x0, #80]
 20c:	tbz	w0, #0, 21c <ss_execute_line+0x58>
 210:	mov	w20, #0x6d0a                	// #27914
 214:	movk	w20, #0xb, lsl #16
 218:	b	26c <ss_execute_line+0xa8>
 21c:	add	x0, x1, #0x1
 220:	bl	0 <system>
 224:	mov	w20, #0x0                   	// #0
 228:	tbz	w0, #31, 26c <ss_execute_line+0xa8>
 22c:	bl	0 <__errno_location>
 230:	ldr	w20, [x0]
 234:	b	26c <ss_execute_line+0xa8>
 238:	add	x2, sp, #0x24
 23c:	mov	w0, w19
 240:	bl	0 <ss_parse>
 244:	str	x0, [sp, #40]
 248:	ldr	w20, [sp, #36]
 24c:	cbz	w20, 27c <ss_execute_line+0xb8>
 250:	add	x2, sp, #0x28
 254:	mov	w1, w20
 258:	mov	w0, w19
 25c:	bl	0 <really_execute_command>
 260:	mov	w20, w0
 264:	ldr	x0, [sp, #40]
 268:	bl	0 <free>
 26c:	mov	w0, w20
 270:	ldp	x19, x20, [sp, #16]
 274:	ldp	x29, x30, [sp], #48
 278:	ret
 27c:	bl	0 <free>
 280:	b	26c <ss_execute_line+0xa8>

listen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <listen_int_handler>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <stdout>
   c:	ldr	x1, [x0]
  10:	mov	w0, #0xa                   	// #10
  14:	bl	0 <putc>
  18:	adrp	x1, 0 <listen_int_handler>
  1c:	add	x1, x1, #0x0
  20:	mov	w0, #0x2                   	// #2
  24:	bl	0 <signal>
  28:	mov	w1, #0x1                   	// #1
  2c:	adrp	x0, 0 <listen_int_handler>
  30:	add	x0, x0, #0x0
  34:	bl	0 <longjmp>

0000000000000038 <print_prompt>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	adrp	x0, 0 <listen_int_handler>
  44:	ldr	x2, [x0]
  48:	ldr	x0, [x2, #120]
  4c:	cbz	x0, 5c <print_prompt+0x24>
  50:	blr	x0
  54:	ldp	x29, x30, [sp], #32
  58:	ret
  5c:	str	x19, [sp, #16]
  60:	adrp	x19, 0 <stdout>
  64:	ldr	x1, [x19]
  68:	ldr	x0, [x2, #56]
  6c:	bl	0 <fputs>
  70:	ldr	x0, [x19]
  74:	bl	0 <fflush>
  78:	ldr	x19, [sp, #16]
  7c:	b	54 <print_prompt+0x1c>

0000000000000080 <cmd_generator>:
  80:	stp	x29, x30, [sp, #-64]!
  84:	mov	x29, sp
  88:	stp	x21, x22, [sp, #32]
  8c:	stp	x23, x24, [sp, #48]
  90:	mov	x22, x0
  94:	cbnz	w1, d0 <cmd_generator+0x50>
  98:	bl	0 <strlen>
  9c:	adrp	x1, 0 <listen_int_handler>
  a0:	add	x1, x1, #0x0
  a4:	str	w0, [x1, #320]
  a8:	ldr	x0, [x1, #312]
  ac:	ldr	x24, [x0, #64]
  b0:	str	x24, [x1, #328]
  b4:	cbz	x24, 190 <cmd_generator+0x110>
  b8:	ldr	x24, [x24]
  bc:	cbz	x24, 190 <cmd_generator+0x110>
  c0:	stp	x19, x20, [sp, #16]
  c4:	str	wzr, [x1, #336]
  c8:	str	xzr, [x1, #344]
  cc:	b	d4 <cmd_generator+0x54>
  d0:	stp	x19, x20, [sp, #16]
  d4:	adrp	x0, 0 <listen_int_handler>
  d8:	ldrsw	x23, [x0]
  dc:	adrp	x19, 0 <listen_int_handler>
  e0:	add	x19, x19, #0x0
  e4:	b	134 <cmd_generator+0xb4>
  e8:	ldr	x2, [x19, #328]
  ec:	ldr	x0, [x2]
  f0:	ldr	x0, [x0, #8]
  f4:	ldr	w1, [x19, #336]
  f8:	add	w3, w1, #0x1
  fc:	str	w3, [x19, #336]
 100:	sbfiz	x1, x1, #5, #32
 104:	ldr	x0, [x0, x1]
 108:	str	x0, [x19, #344]
 10c:	cbz	x0, 148 <cmd_generator+0xc8>
 110:	ldr	x20, [x19, #344]
 114:	ldr	x21, [x20]
 118:	mov	x2, x23
 11c:	mov	x1, x22
 120:	mov	x0, x21
 124:	bl	0 <strncmp>
 128:	cbz	w0, 160 <cmd_generator+0xe0>
 12c:	add	x20, x20, #0x8
 130:	str	x20, [x19, #344]
 134:	ldr	x1, [x19, #344]
 138:	cbz	x1, e8 <cmd_generator+0x68>
 13c:	ldr	x0, [x1]
 140:	cbnz	x0, 110 <cmd_generator+0x90>
 144:	b	e8 <cmd_generator+0x68>
 148:	add	x0, x2, #0x8
 14c:	str	x0, [x19, #328]
 150:	ldr	x24, [x2, #8]
 154:	cbz	x24, 1a4 <cmd_generator+0x124>
 158:	str	wzr, [x19, #336]
 15c:	b	134 <cmd_generator+0xb4>
 160:	mov	x0, x21
 164:	bl	0 <strlen>
 168:	add	x0, x0, #0x1
 16c:	bl	0 <malloc>
 170:	mov	x24, x0
 174:	cbz	x0, 180 <cmd_generator+0x100>
 178:	mov	x1, x21
 17c:	bl	0 <strcpy>
 180:	add	x20, x20, #0x8
 184:	adrp	x0, 0 <listen_int_handler>
 188:	str	x20, [x0]
 18c:	ldp	x19, x20, [sp, #16]
 190:	mov	x0, x24
 194:	ldp	x21, x22, [sp, #32]
 198:	ldp	x23, x24, [sp, #48]
 19c:	ldp	x29, x30, [sp], #64
 1a0:	ret
 1a4:	ldp	x19, x20, [sp, #16]
 1a8:	b	190 <cmd_generator+0x110>

00000000000001ac <ss_listen>:
 1ac:	mov	x12, #0x22b0                	// #8880
 1b0:	sub	sp, sp, x12
 1b4:	stp	x29, x30, [sp]
 1b8:	mov	x29, sp
 1bc:	stp	x19, x20, [sp, #16]
 1c0:	stp	x21, x22, [sp, #32]
 1c4:	stp	x23, x24, [sp, #48]
 1c8:	str	x25, [sp, #64]
 1cc:	mov	w1, w0
 1d0:	str	w0, [sp, #92]
 1d4:	adrp	x19, 0 <listen_int_handler>
 1d8:	add	x19, x19, #0x0
 1dc:	ldr	x0, [x19, #312]
 1e0:	str	x0, [sp, #96]
 1e4:	adrp	x0, 0 <_ss_table>
 1e8:	ldr	x0, [x0]
 1ec:	ldr	x0, [x0, w1, sxtw #3]
 1f0:	str	x0, [x19, #312]
 1f4:	str	xzr, [x19, #352]
 1f8:	str	x0, [sp, #80]
 1fc:	str	wzr, [x0, #136]
 200:	add	x1, sp, #0x1b0
 204:	mov	x0, x1
 208:	bl	0 <sigemptyset>
 20c:	mov	w1, #0x2                   	// #2
 210:	add	x2, sp, #0x1b0
 214:	mov	x0, x2
 218:	bl	0 <sigaddset>
 21c:	add	x2, sp, #0x230
 220:	add	x1, sp, #0x1b0
 224:	mov	w0, #0x0                   	// #0
 228:	bl	0 <sigprocmask>
 22c:	mov	x2, #0x138                 	// #312
 230:	mov	x1, x19
 234:	add	x0, sp, #0x78
 238:	bl	0 <memcpy>
 23c:	adrp	x1, 0 <listen_int_handler>
 240:	add	x1, x1, #0x0
 244:	mov	w0, #0x2                   	// #2
 248:	bl	0 <signal>
 24c:	str	x0, [sp, #104]
 250:	mov	x0, x19
 254:	bl	0 <_setjmp>
 258:	mov	x2, #0x0                   	// #0
 25c:	add	x1, sp, #0x230
 260:	mov	w0, #0x2                   	// #2
 264:	bl	0 <sigprocmask>
 268:	ldr	x0, [sp, #80]
 26c:	ldr	w24, [x0, #136]
 270:	cbnz	w24, 45c <ss_listen+0x2b0>
 274:	adrp	x21, 0 <listen_int_handler>
 278:	add	x21, x21, #0x0
 27c:	adrp	x20, 0 <listen_int_handler>
 280:	add	x20, x20, #0x0
 284:	add	x23, sp, #0x2b0
 288:	mov	w22, #0x6d04                	// #27908
 28c:	movk	w22, #0xb, lsl #16
 290:	b	3bc <ss_listen+0x210>
 294:	mov	w0, #0x0                   	// #0
 298:	bl	38 <print_prompt>
 29c:	adrp	x0, 0 <stdin>
 2a0:	ldr	x2, [x0]
 2a4:	mov	w1, #0x2000                	// #8192
 2a8:	mov	x0, x23
 2ac:	bl	0 <fgets>
 2b0:	cmp	x23, x0
 2b4:	b.ne	2cc <ss_listen+0x120>  // b.any
 2b8:	add	x0, sp, #0x2, lsl #12
 2bc:	add	x0, x0, #0x20
 2c0:	strb	wzr, [x0, #655]
 2c4:	mov	x19, x23
 2c8:	b	3f4 <ss_listen+0x248>
 2cc:	add	x0, sp, #0x2, lsl #12
 2d0:	add	x0, x0, #0x20
 2d4:	strb	wzr, [x0, #655]
 2d8:	adrp	x0, 0 <listen_int_handler>
 2dc:	ldr	x1, [x0]
 2e0:	mov	w0, #0x12                  	// #18
 2e4:	bl	0 <signal>
 2e8:	mov	w24, #0x6d06                	// #27910
 2ec:	movk	w24, #0xb, lsl #16
 2f0:	ldr	x1, [sp, #104]
 2f4:	mov	w0, #0x2                   	// #2
 2f8:	bl	0 <signal>
 2fc:	adrp	x19, 0 <listen_int_handler>
 300:	add	x19, x19, #0x0
 304:	mov	x2, #0x138                 	// #312
 308:	add	x1, sp, #0x78
 30c:	mov	x0, x19
 310:	bl	0 <memcpy>
 314:	ldr	x0, [sp, #96]
 318:	str	x0, [x19, #312]
 31c:	mov	w0, w24
 320:	ldp	x19, x20, [sp, #16]
 324:	ldp	x21, x22, [sp, #32]
 328:	ldp	x23, x24, [sp, #48]
 32c:	ldr	x25, [sp, #64]
 330:	ldp	x29, x30, [sp]
 334:	mov	x12, #0x22b0                	// #8880
 338:	add	sp, sp, x12
 33c:	ret
 340:	ldrb	w0, [x19]
 344:	cmp	w0, #0x20
 348:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 34c:	b.ne	3a8 <ss_listen+0x1fc>  // b.any
 350:	mov	x25, x19
 354:	ldrb	w0, [x25, #1]!
 358:	cmp	w0, #0x20
 35c:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 360:	b.eq	354 <ss_listen+0x1a8>  // b.none
 364:	mov	w1, #0x20                  	// #32
 368:	mov	x0, x25
 36c:	bl	0 <strchr>
 370:	cbz	x0, 378 <ss_listen+0x1cc>
 374:	strb	wzr, [x0]
 378:	mov	w1, #0x9                   	// #9
 37c:	mov	x0, x25
 380:	bl	0 <strchr>
 384:	cbz	x0, 38c <ss_listen+0x1e0>
 388:	strb	wzr, [x0]
 38c:	mov	x3, x25
 390:	adrp	x2, 0 <listen_int_handler>
 394:	add	x2, x2, #0x0
 398:	mov	x1, #0x0                   	// #0
 39c:	ldr	w0, [sp, #92]
 3a0:	bl	0 <ss_error>
 3a4:	b	444 <ss_listen+0x298>
 3a8:	mov	x25, x19
 3ac:	b	364 <ss_listen+0x1b8>
 3b0:	ldr	x0, [sp, #80]
 3b4:	ldr	w0, [x0, #136]
 3b8:	cbnz	w0, 2f0 <ss_listen+0x144>
 3bc:	mov	x1, x21
 3c0:	mov	w0, #0x12                  	// #18
 3c4:	bl	0 <signal>
 3c8:	cmp	x0, x21
 3cc:	b.eq	3d4 <ss_listen+0x228>  // b.none
 3d0:	str	x0, [x20, #352]
 3d4:	ldr	x0, [sp, #80]
 3d8:	ldr	x1, [x0, #104]
 3dc:	cbz	x1, 294 <ss_listen+0xe8>
 3e0:	ldr	x0, [x20, #312]
 3e4:	ldr	x0, [x0, #56]
 3e8:	blr	x1
 3ec:	mov	x19, x0
 3f0:	cbz	x0, 2d8 <ss_listen+0x12c>
 3f4:	mov	w1, #0xa                   	// #10
 3f8:	mov	x0, x19
 3fc:	bl	0 <strchr>
 400:	cbz	x0, 410 <ss_listen+0x264>
 404:	strb	wzr, [x0]
 408:	cmp	x0, x19
 40c:	b.eq	3b0 <ss_listen+0x204>  // b.none
 410:	ldr	x1, [x20, #352]
 414:	mov	w0, #0x12                  	// #18
 418:	bl	0 <signal>
 41c:	ldr	x0, [sp, #80]
 420:	ldr	x1, [x0, #112]
 424:	cbz	x1, 430 <ss_listen+0x284>
 428:	mov	x0, x19
 42c:	blr	x1
 430:	mov	x1, x19
 434:	ldr	w0, [sp, #92]
 438:	bl	0 <ss_execute_line>
 43c:	cmp	w0, w22
 440:	b.eq	340 <ss_listen+0x194>  // b.none
 444:	ldr	x0, [sp, #80]
 448:	ldr	x0, [x0, #104]
 44c:	cbz	x0, 3b0 <ss_listen+0x204>
 450:	mov	x0, x19
 454:	bl	0 <free>
 458:	b	3b0 <ss_listen+0x204>
 45c:	mov	w24, #0x0                   	// #0
 460:	b	2f0 <ss_listen+0x144>

0000000000000464 <ss_abort_subsystem>:
 464:	sxtw	x0, w0
 468:	adrp	x2, 0 <_ss_table>
 46c:	ldr	x2, [x2]
 470:	ldr	x3, [x2, x0, lsl #3]
 474:	mov	w4, #0x1                   	// #1
 478:	str	w4, [x3, #136]
 47c:	ldr	x0, [x2, x0, lsl #3]
 480:	str	w1, [x0, #140]
 484:	ret

0000000000000488 <ss_quit>:
 488:	stp	x29, x30, [sp, #-16]!
 48c:	mov	x29, sp
 490:	mov	w0, w2
 494:	mov	w1, #0x0                   	// #0
 498:	bl	464 <ss_abort_subsystem>
 49c:	ldp	x29, x30, [sp], #16
 4a0:	ret

00000000000004a4 <ss_rl_completion>:
 4a4:	cbnz	w1, 4e0 <ss_rl_completion+0x3c>
 4a8:	mov	x2, x0
 4ac:	adrp	x0, 0 <listen_int_handler>
 4b0:	ldr	x0, [x0]
 4b4:	ldr	x3, [x0, #128]
 4b8:	mov	x0, #0x0                   	// #0
 4bc:	cbz	x3, 4e8 <ss_rl_completion+0x44>
 4c0:	stp	x29, x30, [sp, #-16]!
 4c4:	mov	x29, sp
 4c8:	adrp	x1, 0 <listen_int_handler>
 4cc:	add	x1, x1, #0x0
 4d0:	mov	x0, x2
 4d4:	blr	x3
 4d8:	ldp	x29, x30, [sp], #16
 4dc:	ret
 4e0:	mov	x0, #0x0                   	// #0
 4e4:	ret
 4e8:	ret

parse.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_parse>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	w0, [sp, #108]
  18:	mov	x19, x1
  1c:	mov	x24, x2
  20:	mov	x0, #0x8                   	// #8
  24:	bl	0 <malloc>
  28:	mov	x21, x0
  2c:	cbz	x0, 5c <ss_parse+0x5c>
  30:	stp	x25, x26, [sp, #64]
  34:	stp	x27, x28, [sp, #80]
  38:	str	xzr, [x0]
  3c:	mov	x0, x19
  40:	mov	w1, #0x0                   	// #0
  44:	mov	w20, #0x0                   	// #0
  48:	mov	w27, #0x22                  	// #34
  4c:	mov	w25, #0x1                   	// #1
  50:	mov	w22, #0x0                   	// #0
  54:	mov	w26, #0x2                   	// #2
  58:	b	168 <ss_parse+0x168>
  5c:	bl	0 <__errno_location>
  60:	adrp	x2, 0 <ss_parse>
  64:	add	x2, x2, #0x0
  68:	ldrsw	x1, [x0]
  6c:	ldr	w0, [sp, #108]
  70:	bl	0 <ss_error>
  74:	str	wzr, [x24]
  78:	b	11c <ss_parse+0x11c>
  7c:	add	x19, x19, #0x1
  80:	b	168 <ss_parse+0x168>
  84:	add	x28, x19, #0x1
  88:	add	w1, w20, #0x2
  8c:	lsl	x1, x1, #3
  90:	mov	x0, x21
  94:	bl	0 <realloc>
  98:	mov	x23, x0
  9c:	cbz	x0, c4 <ss_parse+0xc4>
  a0:	str	x19, [x0, w20, sxtw #3]
  a4:	add	x0, x0, w20, sxtw #3
  a8:	str	xzr, [x0, #8]
  ac:	add	w20, w20, #0x1
  b0:	mov	x0, x19
  b4:	mov	x21, x23
  b8:	mov	x19, x28
  bc:	mov	w1, w26
  c0:	b	168 <ss_parse+0x168>
  c4:	mov	x0, x21
  c8:	bl	0 <free>
  cc:	str	wzr, [x24]
  d0:	mov	x21, x23
  d4:	ldp	x25, x26, [sp, #64]
  d8:	ldp	x27, x28, [sp, #80]
  dc:	b	11c <ss_parse+0x11c>
  e0:	mov	x0, x21
  e4:	bl	0 <free>
  e8:	str	wzr, [x24]
  ec:	mov	x21, x23
  f0:	ldp	x25, x26, [sp, #64]
  f4:	ldp	x27, x28, [sp, #80]
  f8:	b	11c <ss_parse+0x11c>
  fc:	cmp	w1, #0x1
 100:	b.ne	1c8 <ss_parse+0x1c8>  // b.any
 104:	mov	x1, x0
 108:	b	144 <ss_parse+0x144>
 10c:	strb	wzr, [x1]
 110:	str	w20, [x24]
 114:	ldp	x25, x26, [sp, #64]
 118:	ldp	x27, x28, [sp, #80]
 11c:	mov	x0, x21
 120:	ldp	x19, x20, [sp, #16]
 124:	ldp	x21, x22, [sp, #32]
 128:	ldp	x23, x24, [sp, #48]
 12c:	ldp	x29, x30, [sp], #112
 130:	ret
 134:	cmp	w0, #0x22
 138:	b.eq	1c0 <ss_parse+0x1c0>  // b.none
 13c:	add	x19, x19, #0x1
 140:	strb	w0, [x1], #1
 144:	ldrb	w0, [x19]
 148:	cbz	w0, 10c <ss_parse+0x10c>
 14c:	cmp	w0, #0x20
 150:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 154:	b.ne	134 <ss_parse+0x134>  // b.any
 158:	mov	x0, x1
 15c:	strb	wzr, [x0], #1
 160:	add	x19, x19, #0x1
 164:	mov	w1, w22
 168:	cbnz	w1, fc <ss_parse+0xfc>
 16c:	ldrb	w2, [x19]
 170:	cbz	w2, 110 <ss_parse+0x110>
 174:	cmp	w2, #0x20
 178:	ccmp	w2, #0x9, #0x4, ne  // ne = any
 17c:	b.eq	7c <ss_parse+0x7c>  // b.none
 180:	cmp	w2, #0x22
 184:	b.eq	84 <ss_parse+0x84>  // b.none
 188:	add	w1, w20, #0x2
 18c:	lsl	x1, x1, #3
 190:	mov	x0, x21
 194:	bl	0 <realloc>
 198:	mov	x23, x0
 19c:	cbz	x0, e0 <ss_parse+0xe0>
 1a0:	str	x19, [x0, w20, sxtw #3]
 1a4:	add	x0, x0, w20, sxtw #3
 1a8:	str	xzr, [x0, #8]
 1ac:	add	w20, w20, #0x1
 1b0:	mov	x0, x19
 1b4:	mov	x21, x23
 1b8:	mov	w1, w25
 1bc:	b	168 <ss_parse+0x168>
 1c0:	add	x19, x19, #0x1
 1c4:	b	220 <ss_parse+0x220>
 1c8:	cmp	w1, #0x2
 1cc:	b.ne	168 <ss_parse+0x168>  // b.any
 1d0:	mov	x1, x0
 1d4:	b	220 <ss_parse+0x220>
 1d8:	adrp	x2, 0 <ss_parse>
 1dc:	add	x2, x2, #0x0
 1e0:	mov	x1, #0x0                   	// #0
 1e4:	ldr	w0, [sp, #108]
 1e8:	bl	0 <ss_error>
 1ec:	mov	x0, x21
 1f0:	bl	0 <free>
 1f4:	str	wzr, [x24]
 1f8:	mov	x21, #0x0                   	// #0
 1fc:	ldp	x25, x26, [sp, #64]
 200:	ldp	x27, x28, [sp, #80]
 204:	b	11c <ss_parse+0x11c>
 208:	strb	w27, [x1]
 20c:	add	x19, x19, #0x2
 210:	b	21c <ss_parse+0x21c>
 214:	add	x19, x19, #0x1
 218:	strb	w2, [x1]
 21c:	add	x1, x1, #0x1
 220:	mov	x0, x1
 224:	ldrb	w2, [x19]
 228:	cbz	w2, 1d8 <ss_parse+0x1d8>
 22c:	cmp	w2, #0x22
 230:	b.ne	214 <ss_parse+0x214>  // b.any
 234:	ldrb	w2, [x19, #1]
 238:	cmp	w2, #0x22
 23c:	b.eq	208 <ss_parse+0x208>  // b.none
 240:	add	x19, x19, #0x1
 244:	mov	w1, w25
 248:	b	168 <ss_parse+0x168>

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_name>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	adrp	x1, 0 <_ss_table>
  14:	ldr	x1, [x1]
  18:	ldr	x21, [x1, w0, sxtw #3]
  1c:	ldr	x22, [x21, #32]
  20:	cbz	x22, b0 <ss_name+0xb0>
  24:	ldr	x19, [x21]
  28:	mov	x0, x19
  2c:	bl	0 <strlen>
  30:	mov	x20, x0
  34:	mov	x0, x22
  38:	bl	0 <strlen>
  3c:	add	x0, x20, x0
  40:	add	x0, x0, #0x4
  44:	bl	0 <malloc>
  48:	mov	x20, x0
  4c:	ldrb	w1, [x19]
  50:	cbz	w1, d8 <ss_name+0xd8>
  54:	mov	x3, x0
  58:	strb	w1, [x3], #1
  5c:	ldrb	w1, [x19, #1]!
  60:	cbnz	w1, 58 <ss_name+0x58>
  64:	mov	x2, x3
  68:	mov	w0, #0x20                  	// #32
  6c:	strb	w0, [x2], #2
  70:	mov	w0, #0x28                  	// #40
  74:	strb	w0, [x3, #1]
  78:	ldr	x3, [x21, #32]
  7c:	ldrb	w1, [x3]
  80:	cbz	w1, 90 <ss_name+0x90>
  84:	strb	w1, [x2], #1
  88:	ldrb	w1, [x3, #1]!
  8c:	cbnz	w1, 84 <ss_name+0x84>
  90:	mov	w0, #0x29                  	// #41
  94:	strb	w0, [x2]
  98:	strb	wzr, [x2, #1]
  9c:	mov	x0, x20
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldp	x21, x22, [sp, #32]
  a8:	ldp	x29, x30, [sp], #48
  ac:	ret
  b0:	ldr	x19, [x21]
  b4:	mov	x0, x19
  b8:	bl	0 <strlen>
  bc:	add	w0, w0, #0x1
  c0:	bl	0 <malloc>
  c4:	mov	x20, x0
  c8:	cbz	x0, 9c <ss_name+0x9c>
  cc:	mov	x1, x19
  d0:	bl	0 <strcpy>
  d4:	b	9c <ss_name+0x9c>
  d8:	mov	x3, x0
  dc:	b	64 <ss_name+0x64>

00000000000000e0 <ss_error>:
  e0:	stp	x29, x30, [sp, #-288]!
  e4:	mov	x29, sp
  e8:	stp	x19, x20, [sp, #16]
  ec:	str	x21, [sp, #32]
  f0:	mov	x20, x1
  f4:	mov	x21, x2
  f8:	str	x3, [sp, #248]
  fc:	str	x4, [sp, #256]
 100:	str	x5, [sp, #264]
 104:	str	x6, [sp, #272]
 108:	str	x7, [sp, #280]
 10c:	str	q0, [sp, #112]
 110:	str	q1, [sp, #128]
 114:	str	q2, [sp, #144]
 118:	str	q3, [sp, #160]
 11c:	str	q4, [sp, #176]
 120:	str	q5, [sp, #192]
 124:	str	q6, [sp, #208]
 128:	str	q7, [sp, #224]
 12c:	add	x1, sp, #0x120
 130:	str	x1, [sp, #80]
 134:	str	x1, [sp, #88]
 138:	add	x1, sp, #0xf0
 13c:	str	x1, [sp, #96]
 140:	mov	w1, #0xffffffd8            	// #-40
 144:	str	w1, [sp, #104]
 148:	mov	w1, #0xffffff80            	// #-128
 14c:	str	w1, [sp, #108]
 150:	bl	0 <ss_name>
 154:	mov	x19, x0
 158:	ldp	x2, x3, [sp, #80]
 15c:	stp	x2, x3, [sp, #48]
 160:	ldp	x2, x3, [sp, #96]
 164:	stp	x2, x3, [sp, #64]
 168:	add	x3, sp, #0x30
 16c:	mov	x2, x21
 170:	mov	x1, x20
 174:	bl	0 <com_err_va>
 178:	mov	x0, x19
 17c:	bl	0 <free>
 180:	ldp	x19, x20, [sp, #16]
 184:	ldr	x21, [sp, #32]
 188:	ldp	x29, x30, [sp], #288
 18c:	ret

0000000000000190 <ss_perror>:
 190:	stp	x29, x30, [sp, #-16]!
 194:	mov	x29, sp
 198:	mov	x3, x2
 19c:	adrp	x2, 0 <ss_name>
 1a0:	add	x2, x2, #0x0
 1a4:	bl	e0 <ss_error>
 1a8:	ldp	x29, x30, [sp], #16
 1ac:	ret

prompt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_set_prompt>:
   0:	adrp	x2, 0 <_ss_table>
   4:	ldr	x2, [x2]
   8:	ldr	x0, [x2, w0, sxtw #3]
   c:	str	x1, [x0, #56]
  10:	ret

0000000000000014 <ss_get_prompt>:
  14:	adrp	x1, 0 <_ss_table>
  18:	ldr	x1, [x1]
  1c:	ldr	x0, [x1, w0, sxtw #3]
  20:	ldr	x0, [x0, #56]
  24:	ret

request_tbl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_add_request_table>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x21, x1
  18:	mov	w24, w2
  1c:	mov	x20, x3
  20:	adrp	x1, 0 <_ss_table>
  24:	ldr	x1, [x1]
  28:	ldr	x19, [x1, w0, sxtw #3]
  2c:	ldr	x0, [x19, #64]
  30:	ldr	x1, [x0]
  34:	cbz	x1, f0 <ss_add_request_table+0xf0>
  38:	mov	x4, #0x1                   	// #1
  3c:	sub	x2, x0, #0x8
  40:	mov	w1, w4
  44:	mov	w22, w4
  48:	add	x4, x4, #0x1
  4c:	ldr	x5, [x2, x4, lsl #3]
  50:	cbnz	x5, 40 <ss_add_request_table+0x40>
  54:	add	w23, w1, #0x2
  58:	add	w1, w1, #0x2
  5c:	lsl	x1, x1, #3
  60:	bl	0 <realloc>
  64:	cbz	x0, e0 <ss_add_request_table+0xe0>
  68:	str	x0, [x19, #64]
  6c:	cmp	w24, w22
  70:	csel	w24, w24, w22, le
  74:	cmp	w23, #0x1
  78:	b.le	b4 <ss_add_request_table+0xb4>
  7c:	cmp	w24, w22
  80:	b.gt	b4 <ss_add_request_table+0xb4>
  84:	sxtw	x3, w22
  88:	sbfiz	x0, x22, #3, #32
  8c:	sub	w22, w22, w24
  90:	sub	x3, x3, x22
  94:	lsl	x3, x3, #3
  98:	ldr	x2, [x19, #64]
  9c:	ldr	x1, [x2, x0]
  a0:	add	x2, x2, x0
  a4:	str	x1, [x2, #8]
  a8:	cmp	x0, x3
  ac:	sub	x0, x0, #0x8
  b0:	b.ne	98 <ss_add_request_table+0x98>  // b.any
  b4:	ldr	x0, [x19, #64]
  b8:	str	x21, [x0, w24, sxtw #3]
  bc:	ldr	x0, [x19, #64]
  c0:	add	x23, x0, w23, sxtw #3
  c4:	stur	xzr, [x23, #-8]
  c8:	str	wzr, [x20]
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x23, x24, [sp, #48]
  d8:	ldp	x29, x30, [sp], #64
  dc:	ret
  e0:	bl	0 <__errno_location>
  e4:	ldr	w0, [x0]
  e8:	str	w0, [x20]
  ec:	b	cc <ss_add_request_table+0xcc>
  f0:	mov	x1, #0x10                  	// #16
  f4:	bl	0 <realloc>
  f8:	cbz	x0, e0 <ss_add_request_table+0xe0>
  fc:	str	x0, [x19, #64]
 100:	cmp	w24, #0x0
 104:	csel	w24, w24, wzr, le
 108:	mov	w22, #0x0                   	// #0
 10c:	mov	w23, #0x2                   	// #2
 110:	b	84 <ss_add_request_table+0x84>

0000000000000114 <ss_delete_request_table>:
 114:	mov	w3, #0x6d08                	// #27912
 118:	movk	w3, #0xb, lsl #16
 11c:	str	w3, [x2]
 120:	adrp	x3, 0 <_ss_table>
 124:	ldr	x3, [x3]
 128:	ldr	x0, [x3, w0, sxtw #3]
 12c:	ldr	x4, [x0, #64]
 130:	ldr	x3, [x4]
 134:	cbz	x3, 15c <ss_delete_request_table+0x48>
 138:	mov	x0, x4
 13c:	b	148 <ss_delete_request_table+0x34>
 140:	ldr	x3, [x4, #8]!
 144:	cbz	x3, 160 <ss_delete_request_table+0x4c>
 148:	cmp	x1, x3
 14c:	b.eq	140 <ss_delete_request_table+0x2c>  // b.none
 150:	str	x3, [x0], #8
 154:	str	wzr, [x2]
 158:	b	140 <ss_delete_request_table+0x2c>
 15c:	mov	x0, x4
 160:	str	xzr, [x0]
 164:	ret

list_rqs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_list_requests>:
   0:	stp	x29, x30, [sp, #-400]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w19, w2
  10:	add	x0, sp, #0x90
  14:	bl	0 <sigemptyset>
  18:	mov	w1, #0x2                   	// #2
  1c:	add	x0, sp, #0x90
  20:	bl	0 <sigaddset>
  24:	add	x2, sp, #0x110
  28:	add	x1, sp, #0x90
  2c:	mov	w0, #0x0                   	// #0
  30:	bl	0 <sigprocmask>
  34:	mov	x1, #0x1                   	// #1
  38:	mov	w0, #0x2                   	// #2
  3c:	bl	0 <signal>
  40:	str	x0, [sp, #120]
  44:	bl	0 <ss_pager_create>
  48:	tbnz	w0, #31, c8 <ss_list_requests+0xc8>
  4c:	stp	x23, x24, [sp, #48]
  50:	adrp	x1, 0 <ss_list_requests>
  54:	add	x1, x1, #0x0
  58:	bl	0 <fdopen>
  5c:	mov	x23, x0
  60:	mov	x2, #0x0                   	// #0
  64:	add	x1, sp, #0x110
  68:	mov	w0, #0x2                   	// #2
  6c:	bl	0 <sigprocmask>
  70:	sxtw	x19, w19
  74:	adrp	x20, 0 <_ss_table>
  78:	ldr	x0, [x20]
  7c:	ldr	x0, [x0, x19, lsl #3]
  80:	ldr	x2, [x0]
  84:	adrp	x1, 0 <ss_list_requests>
  88:	add	x1, x1, #0x0
  8c:	mov	x0, x23
  90:	bl	0 <fprintf>
  94:	ldr	x0, [x20]
  98:	ldr	x0, [x0, x19, lsl #3]
  9c:	ldr	x0, [x0, #64]
  a0:	str	x0, [sp, #112]
  a4:	ldr	x0, [x0]
  a8:	cbz	x0, 1ec <ss_list_requests+0x1ec>
  ac:	stp	x21, x22, [sp, #32]
  b0:	stp	x25, x26, [sp, #64]
  b4:	stp	x27, x28, [sp, #80]
  b8:	adrp	x1, 0 <ss_list_requests>
  bc:	add	x1, x1, #0x0
  c0:	str	x1, [sp, #104]
  c4:	b	1cc <ss_list_requests+0x1cc>
  c8:	adrp	x0, 0 <ss_list_requests>
  cc:	add	x0, x0, #0x0
  d0:	bl	0 <perror>
  d4:	ldr	x1, [sp, #120]
  d8:	mov	w0, #0x2                   	// #2
  dc:	bl	0 <signal>
  e0:	b	20c <ss_list_requests+0x20c>
  e4:	mov	x3, x23
  e8:	mov	x2, x28
  ec:	mov	x1, x27
  f0:	ldr	x0, [sp, #104]
  f4:	bl	0 <fwrite>
  f8:	ldr	x20, [x21, #8]!
  fc:	cbz	x20, 12c <ss_list_requests+0x12c>
 100:	mov	x0, x20
 104:	bl	0 <strlen>
 108:	mov	x19, x0
 10c:	mov	x1, x23
 110:	mov	x0, x20
 114:	bl	0 <fputs>
 118:	add	w19, w19, #0x2
 11c:	add	w24, w24, w19
 120:	ldr	x0, [x21, #8]
 124:	cbnz	x0, e4 <ss_list_requests+0xe4>
 128:	b	f8 <ss_list_requests+0xf8>
 12c:	cmp	w24, #0x17
 130:	b.gt	1a0 <ss_list_requests+0x1a0>
 134:	mov	w0, #0x19                  	// #25
 138:	sub	w24, w0, w24
 13c:	cmp	w24, #0x0
 140:	b.le	15c <ss_list_requests+0x15c>
 144:	mov	x1, x23
 148:	mov	w0, w26
 14c:	bl	0 <fputc>
 150:	add	w22, w22, #0x1
 154:	cmp	w24, w22
 158:	b.gt	144 <ss_list_requests+0x144>
 15c:	mov	x1, x23
 160:	ldr	x0, [x25, #16]
 164:	bl	0 <fputs>
 168:	mov	x1, x23
 16c:	mov	w0, #0xa                   	// #10
 170:	bl	0 <fputc>
 174:	ldr	x21, [x25, #32]!
 178:	cbz	x21, 1bc <ss_list_requests+0x1bc>
 17c:	ldr	w0, [x25, #24]
 180:	and	w22, w0, #0x1
 184:	tbnz	w0, #0, 174 <ss_list_requests+0x174>
 188:	ldr	x20, [x21]
 18c:	cbz	x20, 1b4 <ss_list_requests+0x1b4>
 190:	mov	w24, #0xfffffffe            	// #-2
 194:	mov	x28, #0x2                   	// #2
 198:	mov	x27, #0x1                   	// #1
 19c:	b	100 <ss_list_requests+0x100>
 1a0:	mov	x1, x23
 1a4:	mov	w0, #0xa                   	// #10
 1a8:	bl	0 <fputc>
 1ac:	mov	w24, #0x19                  	// #25
 1b0:	b	144 <ss_list_requests+0x144>
 1b4:	mov	w24, #0x1b                  	// #27
 1b8:	b	144 <ss_list_requests+0x144>
 1bc:	ldr	x1, [sp, #112]
 1c0:	ldr	x0, [x1, #8]!
 1c4:	str	x1, [sp, #112]
 1c8:	cbz	x0, 1e0 <ss_list_requests+0x1e0>
 1cc:	ldr	x25, [x0, #8]
 1d0:	ldr	x21, [x25]
 1d4:	cbz	x21, 1bc <ss_list_requests+0x1bc>
 1d8:	mov	w26, #0x20                  	// #32
 1dc:	b	17c <ss_list_requests+0x17c>
 1e0:	ldp	x21, x22, [sp, #32]
 1e4:	ldp	x25, x26, [sp, #64]
 1e8:	ldp	x27, x28, [sp, #80]
 1ec:	mov	x0, x23
 1f0:	bl	0 <fclose>
 1f4:	add	x0, sp, #0x8c
 1f8:	bl	0 <wait>
 1fc:	ldr	x1, [sp, #120]
 200:	mov	w0, #0x2                   	// #2
 204:	bl	0 <signal>
 208:	ldp	x23, x24, [sp, #48]
 20c:	ldp	x19, x20, [sp, #16]
 210:	ldp	x29, x30, [sp], #400
 214:	ret

pager.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_safe_getenv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	bl	0 <getuid>
  14:	mov	w19, w0
  18:	bl	0 <geteuid>
  1c:	cmp	w19, w0
  20:	b.ne	70 <ss_safe_getenv+0x70>  // b.any
  24:	bl	0 <getgid>
  28:	mov	w19, w0
  2c:	bl	0 <getegid>
  30:	mov	w1, w0
  34:	mov	x0, #0x0                   	// #0
  38:	cmp	w19, w1
  3c:	b.ne	74 <ss_safe_getenv+0x74>  // b.any
  40:	mov	w4, #0x0                   	// #0
  44:	mov	w3, #0x0                   	// #0
  48:	mov	w2, #0x0                   	// #0
  4c:	mov	w1, #0x0                   	// #0
  50:	mov	w0, #0x3                   	// #3
  54:	bl	0 <prctl>
  58:	mov	w1, w0
  5c:	mov	x0, #0x0                   	// #0
  60:	cbz	w1, 74 <ss_safe_getenv+0x74>
  64:	mov	x0, x20
  68:	bl	0 <secure_getenv>
  6c:	b	74 <ss_safe_getenv+0x74>
  70:	mov	x0, #0x0                   	// #0
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x29, x30, [sp], #32
  7c:	ret

0000000000000080 <ss_page_stdin>:
  80:	stp	x29, x30, [sp, #-256]!
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	stp	x21, x22, [sp, #32]
  90:	mov	w19, #0x3                   	// #3
  94:	mov	w0, w19
  98:	bl	0 <close>
  9c:	add	w19, w19, #0x1
  a0:	cmp	w19, #0x20
  a4:	b.ne	94 <ss_page_stdin+0x14>  // b.any
  a8:	mov	x1, #0x0                   	// #0
  ac:	mov	w0, #0x2                   	// #2
  b0:	bl	0 <signal>
  b4:	add	x2, sp, #0x80
  b8:	mov	x1, #0x0                   	// #0
  bc:	mov	w0, #0x0                   	// #0
  c0:	bl	0 <sigprocmask>
  c4:	mov	w1, #0x2                   	// #2
  c8:	add	x0, sp, #0x80
  cc:	bl	0 <sigdelset>
  d0:	mov	x2, #0x0                   	// #0
  d4:	add	x1, sp, #0x80
  d8:	mov	w0, #0x2                   	// #2
  dc:	bl	0 <sigprocmask>
  e0:	adrp	x0, 0 <_ss_pager_name>
  e4:	ldr	x0, [x0]
  e8:	cbz	x0, 12c <ss_page_stdin+0xac>
  ec:	adrp	x0, 0 <_ss_pager_name>
  f0:	ldr	x0, [x0]
  f4:	mov	x2, #0x0                   	// #0
  f8:	mov	x1, x0
  fc:	bl	0 <execlp>
 100:	mov	x22, #0x50                  	// #80
 104:	mov	w21, #0x1                   	// #1
 108:	mov	x2, x22
 10c:	add	x1, sp, #0x30
 110:	mov	w0, #0x0                   	// #0
 114:	bl	0 <read>
 118:	cmp	w0, #0x0
 11c:	b.le	194 <ss_page_stdin+0x114>
 120:	sxtw	x19, w0
 124:	add	x20, sp, #0x30
 128:	b	174 <ss_page_stdin+0xf4>
 12c:	adrp	x0, 0 <ss_safe_getenv>
 130:	add	x0, x0, #0x0
 134:	bl	0 <ss_safe_getenv>
 138:	cbz	x0, 148 <ss_page_stdin+0xc8>
 13c:	adrp	x1, 0 <_ss_pager_name>
 140:	str	x0, [x1]
 144:	b	ec <ss_page_stdin+0x6c>
 148:	adrp	x1, 0 <_ss_pager_name>
 14c:	adrp	x0, 0 <ss_safe_getenv>
 150:	add	x0, x0, #0x0
 154:	str	x0, [x1]
 158:	b	ec <ss_page_stdin+0x6c>
 15c:	bl	0 <__errno_location>
 160:	ldr	w0, [x0]
 164:	cmp	w0, #0xb
 168:	ccmp	w0, #0x4, #0x4, ne  // ne = any
 16c:	b.ne	108 <ss_page_stdin+0x88>  // b.any
 170:	cbz	x19, 108 <ss_page_stdin+0x88>
 174:	mov	x2, x19
 178:	mov	x1, x20
 17c:	mov	w0, w21
 180:	bl	0 <write>
 184:	tbnz	x0, #63, 15c <ss_page_stdin+0xdc>
 188:	sub	x19, x19, x0
 18c:	add	x20, x20, x0
 190:	b	170 <ss_page_stdin+0xf0>
 194:	bl	0 <__errno_location>
 198:	ldr	w0, [x0]
 19c:	bl	0 <exit>

00000000000001a0 <ss_pager_create>:
 1a0:	stp	x29, x30, [sp, #-32]!
 1a4:	mov	x29, sp
 1a8:	add	x0, sp, #0x18
 1ac:	bl	0 <pipe>
 1b0:	cbnz	w0, 1f8 <ss_pager_create+0x58>
 1b4:	bl	0 <fork>
 1b8:	cmn	w0, #0x1
 1bc:	b.eq	1f0 <ss_pager_create+0x50>  // b.none
 1c0:	cbnz	w0, 1e4 <ss_pager_create+0x44>
 1c4:	mov	w1, #0x0                   	// #0
 1c8:	ldr	w0, [sp, #24]
 1cc:	bl	0 <dup2>
 1d0:	cmn	w0, #0x1
 1d4:	b.eq	1dc <ss_pager_create+0x3c>  // b.none
 1d8:	bl	80 <ss_page_stdin>
 1dc:	mov	w0, #0x1                   	// #1
 1e0:	bl	0 <exit>
 1e4:	ldr	w0, [sp, #24]
 1e8:	bl	0 <close>
 1ec:	ldr	w0, [sp, #28]
 1f0:	ldp	x29, x30, [sp], #32
 1f4:	ret
 1f8:	mov	w0, #0xffffffff            	// #-1
 1fc:	b	1f0 <ss_pager_create+0x50>

requests.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_self_identify>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <_ss_table>
   c:	ldr	x0, [x0]
  10:	ldr	x0, [x0, w2, sxtw #3]
  14:	ldr	x2, [x0, #8]
  18:	ldr	x1, [x0]
  1c:	adrp	x0, 0 <ss_self_identify>
  20:	add	x0, x0, #0x0
  24:	bl	0 <printf>
  28:	ldp	x29, x30, [sp], #16
  2c:	ret

0000000000000030 <ss_subsystem_name>:
  30:	stp	x29, x30, [sp, #-16]!
  34:	mov	x29, sp
  38:	adrp	x0, 0 <_ss_table>
  3c:	ldr	x0, [x0]
  40:	ldr	x0, [x0, w2, sxtw #3]
  44:	ldr	x0, [x0]
  48:	bl	0 <puts>
  4c:	ldp	x29, x30, [sp], #16
  50:	ret

0000000000000054 <ss_subsystem_version>:
  54:	stp	x29, x30, [sp, #-16]!
  58:	mov	x29, sp
  5c:	adrp	x0, 0 <_ss_table>
  60:	ldr	x0, [x0]
  64:	ldr	x0, [x0, w2, sxtw #3]
  68:	ldr	x0, [x0, #8]
  6c:	bl	0 <puts>
  70:	ldp	x29, x30, [sp], #16
  74:	ret

0000000000000078 <ss_unimplemented>:
  78:	stp	x29, x30, [sp, #-16]!
  7c:	mov	x29, sp
  80:	mov	w0, w2
  84:	adrp	x2, 0 <ss_self_identify>
  88:	add	x2, x2, #0x0
  8c:	mov	x1, #0x6d0b                	// #27915
  90:	movk	x1, #0xb, lsl #16
  94:	bl	0 <ss_perror>
  98:	ldp	x29, x30, [sp], #16
  9c:	ret

data.o:     file format elf64-littleaarch64


get_readline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_release_readline>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0, #88]
  14:	cbz	x0, 30 <ss_release_readline+0x30>
  18:	str	xzr, [x19, #104]
  1c:	str	xzr, [x19, #112]
  20:	str	xzr, [x19, #120]
  24:	str	xzr, [x19, #128]
  28:	bl	0 <dlclose>
  2c:	str	xzr, [x19, #88]
  30:	ldr	x19, [sp, #16]
  34:	ldp	x29, x30, [sp], #32
  38:	ret

000000000000003c <ss_get_readline>:
  3c:	stp	x29, x30, [sp, #-64]!
  40:	mov	x29, sp
  44:	stp	x21, x22, [sp, #32]
  48:	adrp	x1, 0 <_ss_table>
  4c:	ldr	x1, [x1]
  50:	ldr	x21, [x1, w0, sxtw #3]
  54:	ldr	x0, [x21, #88]
  58:	cbz	x0, 68 <ss_get_readline+0x2c>
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #64
  64:	ret
  68:	stp	x19, x20, [sp, #16]
  6c:	adrp	x0, 0 <ss_release_readline>
  70:	add	x0, x0, #0x0
  74:	bl	0 <ss_safe_getenv>
  78:	mov	x19, x0
  7c:	cbz	x0, ac <ss_get_readline+0x70>
  80:	ldrb	w0, [x0]
  84:	cbz	w0, 204 <ss_get_readline+0x1c8>
  88:	adrp	x1, 0 <ss_release_readline>
  8c:	add	x1, x1, #0x0
  90:	mov	x0, x19
  94:	bl	0 <strcmp>
  98:	cbnz	w0, a4 <ss_get_readline+0x68>
  9c:	ldp	x19, x20, [sp, #16]
  a0:	b	5c <ss_get_readline+0x20>
  a4:	stp	x23, x24, [sp, #48]
  a8:	b	b8 <ss_get_readline+0x7c>
  ac:	stp	x23, x24, [sp, #48]
  b0:	adrp	x19, 0 <ss_release_readline>
  b4:	add	x19, x19, #0x0
  b8:	mov	x0, x19
  bc:	bl	0 <strlen>
  c0:	add	x0, x0, #0x1
  c4:	bl	0 <malloc>
  c8:	mov	x23, x0
  cc:	cbz	x0, 20c <ss_get_readline+0x1d0>
  d0:	mov	x1, x19
  d4:	bl	0 <strcpy>
  d8:	mov	x20, x23
  dc:	mov	w22, #0x3a                  	// #58
  e0:	mov	w24, #0x2                   	// #2
  e4:	b	ec <ss_get_readline+0xb0>
  e8:	mov	x20, x19
  ec:	mov	w1, w22
  f0:	mov	x0, x20
  f4:	bl	0 <strchr>
  f8:	mov	x19, x0
  fc:	cbz	x0, 138 <ss_get_readline+0xfc>
 100:	strb	wzr, [x19], #1
 104:	ldrb	w1, [x20]
 108:	cbz	w1, e8 <ss_get_readline+0xac>
 10c:	mov	w1, w24
 110:	mov	x0, x20
 114:	bl	0 <dlopen>
 118:	mov	x20, x0
 11c:	cbz	x0, e8 <ss_get_readline+0xac>
 120:	b	154 <ss_get_readline+0x118>
 124:	mov	x0, x23
 128:	bl	0 <free>
 12c:	ldp	x19, x20, [sp, #16]
 130:	ldp	x23, x24, [sp, #48]
 134:	b	5c <ss_get_readline+0x20>
 138:	ldrb	w0, [x20]
 13c:	cbz	w0, 124 <ss_get_readline+0xe8>
 140:	mov	w1, #0x2                   	// #2
 144:	mov	x0, x20
 148:	bl	0 <dlopen>
 14c:	mov	x20, x0
 150:	cbz	x0, 124 <ss_get_readline+0xe8>
 154:	mov	x0, x23
 158:	bl	0 <free>
 15c:	str	x20, [x21, #88]
 160:	adrp	x1, 0 <ss_release_readline>
 164:	add	x1, x1, #0x0
 168:	mov	x0, x20
 16c:	bl	0 <dlsym>
 170:	str	x0, [x21, #104]
 174:	adrp	x1, 0 <ss_release_readline>
 178:	add	x1, x1, #0x0
 17c:	mov	x0, x20
 180:	bl	0 <dlsym>
 184:	str	x0, [x21, #112]
 188:	adrp	x1, 0 <ss_release_readline>
 18c:	add	x1, x1, #0x0
 190:	mov	x0, x20
 194:	bl	0 <dlsym>
 198:	str	x0, [x21, #120]
 19c:	adrp	x1, 0 <ss_release_readline>
 1a0:	add	x1, x1, #0x0
 1a4:	mov	x0, x20
 1a8:	bl	0 <dlsym>
 1ac:	str	x0, [x21, #128]
 1b0:	adrp	x1, 0 <ss_release_readline>
 1b4:	add	x1, x1, #0x0
 1b8:	mov	x0, x20
 1bc:	bl	0 <dlsym>
 1c0:	cbz	x0, 1cc <ss_get_readline+0x190>
 1c4:	ldr	x1, [x21]
 1c8:	str	x1, [x0]
 1cc:	adrp	x1, 0 <ss_release_readline>
 1d0:	add	x1, x1, #0x0
 1d4:	mov	x0, x20
 1d8:	bl	0 <dlsym>
 1dc:	cbz	x0, 1ec <ss_get_readline+0x1b0>
 1e0:	adrp	x1, 0 <ss_rl_completion>
 1e4:	add	x1, x1, #0x0
 1e8:	str	x1, [x0]
 1ec:	adrp	x0, 0 <ss_release_readline>
 1f0:	add	x0, x0, #0x0
 1f4:	str	x0, [x21, #96]
 1f8:	ldp	x19, x20, [sp, #16]
 1fc:	ldp	x23, x24, [sp, #48]
 200:	b	5c <ss_get_readline+0x20>
 204:	ldp	x19, x20, [sp, #16]
 208:	b	5c <ss_get_readline+0x20>
 20c:	ldp	x19, x20, [sp, #16]
 210:	ldp	x23, x24, [sp, #48]
 214:	b	5c <ss_get_readline+0x20>
