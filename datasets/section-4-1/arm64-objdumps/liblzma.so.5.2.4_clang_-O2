
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_clang_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003008 <.init>:
    3008:	stp	x29, x30, [sp, #-16]!
    300c:	mov	x29, sp
    3010:	bl	34f0 <pthread_cond_timedwait@plt+0x10>
    3014:	ldp	x29, x30, [sp], #16
    3018:	ret

Disassembly of section .plt:

0000000000003020 <memcpy@plt-0x20>:
    3020:	stp	x16, x30, [sp, #-16]!
    3024:	adrp	x16, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    3028:	ldr	x17, [x16, #4088]
    302c:	add	x16, x16, #0xff8
    3030:	br	x17
    3034:	nop
    3038:	nop
    303c:	nop

0000000000003040 <memcpy@plt>:
    3040:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3044:	ldr	x17, [x16]
    3048:	add	x16, x16, #0x0
    304c:	br	x17

0000000000003050 <memmove@plt>:
    3050:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3054:	ldr	x17, [x16, #8]
    3058:	add	x16, x16, #0x8
    305c:	br	x17

0000000000003060 <pthread_sigmask@plt>:
    3060:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3064:	ldr	x17, [x16, #16]
    3068:	add	x16, x16, #0x10
    306c:	br	x17

0000000000003070 <lzma_block_buffer_encode@plt>:
    3070:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3074:	ldr	x17, [x16, #24]
    3078:	add	x16, x16, #0x18
    307c:	br	x17

0000000000003080 <lzma_check_is_supported@plt>:
    3080:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3084:	ldr	x17, [x16, #32]
    3088:	add	x16, x16, #0x20
    308c:	br	x17

0000000000003090 <lzma_filter_flags_size@plt>:
    3090:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16, #40]
    3098:	add	x16, x16, #0x28
    309c:	br	x17

00000000000030a0 <lzma_index_buffer_encode@plt>:
    30a0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #48]
    30a8:	add	x16, x16, #0x30
    30ac:	br	x17

00000000000030b0 <lzma_stream_flags_compare@plt>:
    30b0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #56]
    30b8:	add	x16, x16, #0x38
    30bc:	br	x17

00000000000030c0 <lzma_block_buffer_bound@plt>:
    30c0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #64]
    30c8:	add	x16, x16, #0x40
    30cc:	br	x17

00000000000030d0 <lzma_index_hash_decode@plt>:
    30d0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #72]
    30d8:	add	x16, x16, #0x48
    30dc:	br	x17

00000000000030e0 <__cxa_finalize@plt>:
    30e0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #80]
    30e8:	add	x16, x16, #0x50
    30ec:	br	x17

00000000000030f0 <clock_gettime@plt>:
    30f0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #88]
    30f8:	add	x16, x16, #0x58
    30fc:	br	x17

0000000000003100 <lzma_block_header_size@plt>:
    3100:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #96]
    3108:	add	x16, x16, #0x60
    310c:	br	x17

0000000000003110 <sigfillset@plt>:
    3110:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #104]
    3118:	add	x16, x16, #0x68
    311c:	br	x17

0000000000003120 <lzma_index_memusage@plt>:
    3120:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #112]
    3128:	add	x16, x16, #0x70
    312c:	br	x17

0000000000003130 <lzma_block_unpadded_size@plt>:
    3130:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #120]
    3138:	add	x16, x16, #0x78
    313c:	br	x17

0000000000003140 <malloc@plt>:
    3140:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #128]
    3148:	add	x16, x16, #0x80
    314c:	br	x17

0000000000003150 <lzma_index_hash_append@plt>:
    3150:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #136]
    3158:	add	x16, x16, #0x88
    315c:	br	x17

0000000000003160 <lzma_crc32@plt>:
    3160:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #144]
    3168:	add	x16, x16, #0x90
    316c:	br	x17

0000000000003170 <pthread_condattr_destroy@plt>:
    3170:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #152]
    3178:	add	x16, x16, #0x98
    317c:	br	x17

0000000000003180 <lzma_stream_buffer_encode@plt>:
    3180:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #160]
    3188:	add	x16, x16, #0xa0
    318c:	br	x17

0000000000003190 <pthread_cond_signal@plt>:
    3190:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #168]
    3198:	add	x16, x16, #0xa8
    319c:	br	x17

00000000000031a0 <lzma_stream_footer_encode@plt>:
    31a0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #176]
    31a8:	add	x16, x16, #0xb0
    31ac:	br	x17

00000000000031b0 <lzma_raw_encoder_memusage@plt>:
    31b0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #184]
    31b8:	add	x16, x16, #0xb8
    31bc:	br	x17

00000000000031c0 <memset@plt>:
    31c0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #192]
    31c8:	add	x16, x16, #0xc0
    31cc:	br	x17

00000000000031d0 <lzma_filters_copy@plt>:
    31d0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #200]
    31d8:	add	x16, x16, #0xc8
    31dc:	br	x17

00000000000031e0 <lzma_properties_decode@plt>:
    31e0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #208]
    31e8:	add	x16, x16, #0xd0
    31ec:	br	x17

00000000000031f0 <calloc@plt>:
    31f0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #216]
    31f8:	add	x16, x16, #0xd8
    31fc:	br	x17

0000000000003200 <lzma_check_size@plt>:
    3200:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #224]
    3208:	add	x16, x16, #0xe0
    320c:	br	x17

0000000000003210 <bcmp@plt>:
    3210:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #232]
    3218:	add	x16, x16, #0xe8
    321c:	br	x17

0000000000003220 <lzma_index_hash_init@plt>:
    3220:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #240]
    3228:	add	x16, x16, #0xf0
    322c:	br	x17

0000000000003230 <lzma_crc64@plt>:
    3230:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #248]
    3238:	add	x16, x16, #0xf8
    323c:	br	x17

0000000000003240 <pthread_mutex_init@plt>:
    3240:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #256]
    3248:	add	x16, x16, #0x100
    324c:	br	x17

0000000000003250 <pthread_create@plt>:
    3250:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #264]
    3258:	add	x16, x16, #0x108
    325c:	br	x17

0000000000003260 <__gmon_start__@plt>:
    3260:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #272]
    3268:	add	x16, x16, #0x110
    326c:	br	x17

0000000000003270 <pthread_join@plt>:
    3270:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #280]
    3278:	add	x16, x16, #0x118
    327c:	br	x17

0000000000003280 <lzma_raw_decoder_memusage@plt>:
    3280:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #288]
    3288:	add	x16, x16, #0x120
    328c:	br	x17

0000000000003290 <sched_getaffinity@plt>:
    3290:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #296]
    3298:	add	x16, x16, #0x128
    329c:	br	x17

00000000000032a0 <lzma_index_append@plt>:
    32a0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #304]
    32a8:	add	x16, x16, #0x130
    32ac:	br	x17

00000000000032b0 <lzma_index_hash_end@plt>:
    32b0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #312]
    32b8:	add	x16, x16, #0x138
    32bc:	br	x17

00000000000032c0 <lzma_end@plt>:
    32c0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #320]
    32c8:	add	x16, x16, #0x140
    32cc:	br	x17

00000000000032d0 <lzma_block_header_decode@plt>:
    32d0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #328]
    32d8:	add	x16, x16, #0x148
    32dc:	br	x17

00000000000032e0 <lzma_filter_flags_encode@plt>:
    32e0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #336]
    32e8:	add	x16, x16, #0x150
    32ec:	br	x17

00000000000032f0 <lzma_properties_size@plt>:
    32f0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #344]
    32f8:	add	x16, x16, #0x158
    32fc:	br	x17

0000000000003300 <free@plt>:
    3300:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #352]
    3308:	add	x16, x16, #0x160
    330c:	br	x17

0000000000003310 <lzma_stream_header_encode@plt>:
    3310:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #360]
    3318:	add	x16, x16, #0x168
    331c:	br	x17

0000000000003320 <pthread_cond_wait@plt>:
    3320:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #368]
    3328:	add	x16, x16, #0x170
    332c:	br	x17

0000000000003330 <lzma_index_init@plt>:
    3330:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #376]
    3338:	add	x16, x16, #0x178
    333c:	br	x17

0000000000003340 <lzma_vli_decode@plt>:
    3340:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #384]
    3348:	add	x16, x16, #0x180
    334c:	br	x17

0000000000003350 <pthread_condattr_init@plt>:
    3350:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #392]
    3358:	add	x16, x16, #0x188
    335c:	br	x17

0000000000003360 <lzma_index_end@plt>:
    3360:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #400]
    3368:	add	x16, x16, #0x190
    336c:	br	x17

0000000000003370 <__sched_cpucount@plt>:
    3370:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #408]
    3378:	add	x16, x16, #0x198
    337c:	br	x17

0000000000003380 <lzma_properties_encode@plt>:
    3380:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #416]
    3388:	add	x16, x16, #0x1a0
    338c:	br	x17

0000000000003390 <pthread_mutex_destroy@plt>:
    3390:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #424]
    3398:	add	x16, x16, #0x1a8
    339c:	br	x17

00000000000033a0 <pthread_cond_init@plt>:
    33a0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #432]
    33a8:	add	x16, x16, #0x1b0
    33ac:	br	x17

00000000000033b0 <lzma_stream_footer_decode@plt>:
    33b0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #440]
    33b8:	add	x16, x16, #0x1b8
    33bc:	br	x17

00000000000033c0 <lzma_lzma_preset@plt>:
    33c0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #448]
    33c8:	add	x16, x16, #0x1c0
    33cc:	br	x17

00000000000033d0 <lzma_vli_encode@plt>:
    33d0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #456]
    33d8:	add	x16, x16, #0x1c8
    33dc:	br	x17

00000000000033e0 <lzma_index_iter_next@plt>:
    33e0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #464]
    33e8:	add	x16, x16, #0x1d0
    33ec:	br	x17

00000000000033f0 <sysconf@plt>:
    33f0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #472]
    33f8:	add	x16, x16, #0x1d8
    33fc:	br	x17

0000000000003400 <lzma_vli_size@plt>:
    3400:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #480]
    3408:	add	x16, x16, #0x1e0
    340c:	br	x17

0000000000003410 <pthread_condattr_setclock@plt>:
    3410:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #488]
    3418:	add	x16, x16, #0x1e8
    341c:	br	x17

0000000000003420 <lzma_stream_encoder@plt>:
    3420:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #496]
    3428:	add	x16, x16, #0x1f0
    342c:	br	x17

0000000000003430 <lzma_index_iter_init@plt>:
    3430:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #504]
    3438:	add	x16, x16, #0x1f8
    343c:	br	x17

0000000000003440 <lzma_block_uncomp_encode@plt>:
    3440:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #512]
    3448:	add	x16, x16, #0x200
    344c:	br	x17

0000000000003450 <lzma_index_hash_size@plt>:
    3450:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #520]
    3458:	add	x16, x16, #0x208
    345c:	br	x17

0000000000003460 <lzma_index_block_count@plt>:
    3460:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #528]
    3468:	add	x16, x16, #0x210
    346c:	br	x17

0000000000003470 <lzma_stream_header_decode@plt>:
    3470:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #536]
    3478:	add	x16, x16, #0x218
    347c:	br	x17

0000000000003480 <lzma_filter_flags_decode@plt>:
    3480:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #544]
    3488:	add	x16, x16, #0x220
    348c:	br	x17

0000000000003490 <lzma_index_size@plt>:
    3490:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #552]
    3498:	add	x16, x16, #0x228
    349c:	br	x17

00000000000034a0 <pthread_cond_destroy@plt>:
    34a0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #560]
    34a8:	add	x16, x16, #0x230
    34ac:	br	x17

00000000000034b0 <pthread_mutex_lock@plt>:
    34b0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #568]
    34b8:	add	x16, x16, #0x238
    34bc:	br	x17

00000000000034c0 <lzma_block_header_encode@plt>:
    34c0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #576]
    34c8:	add	x16, x16, #0x240
    34cc:	br	x17

00000000000034d0 <pthread_mutex_unlock@plt>:
    34d0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #584]
    34d8:	add	x16, x16, #0x248
    34dc:	br	x17

00000000000034e0 <pthread_cond_timedwait@plt>:
    34e0:	adrp	x16, 31000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #592]
    34e8:	add	x16, x16, #0x250
    34ec:	br	x17

Disassembly of section .text:

00000000000034f0 <lzma_version_number@@XZ_5.0-0x154>:
    34f0:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    34f4:	ldr	x0, [x0, #3968]
    34f8:	cbz	x0, 3500 <pthread_cond_timedwait@plt+0x20>
    34fc:	b	3260 <__gmon_start__@plt>
    3500:	ret
    3504:	nop
    3508:	adrp	x0, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1fe18>
    350c:	add	x0, x0, #0x260
    3510:	adrp	x1, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1fe18>
    3514:	add	x1, x1, #0x260
    3518:	cmp	x1, x0
    351c:	b.eq	3534 <pthread_cond_timedwait@plt+0x54>  // b.none
    3520:	adrp	x1, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    3524:	ldr	x1, [x1, #3904]
    3528:	cbz	x1, 3534 <pthread_cond_timedwait@plt+0x54>
    352c:	mov	x16, x1
    3530:	br	x16
    3534:	ret
    3538:	adrp	x0, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1fe18>
    353c:	add	x0, x0, #0x260
    3540:	adrp	x1, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1fe18>
    3544:	add	x1, x1, #0x260
    3548:	sub	x1, x1, x0
    354c:	lsr	x2, x1, #63
    3550:	add	x1, x2, x1, asr #3
    3554:	cmp	xzr, x1, asr #1
    3558:	asr	x1, x1, #1
    355c:	b.eq	3574 <pthread_cond_timedwait@plt+0x94>  // b.none
    3560:	adrp	x2, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    3564:	ldr	x2, [x2, #4040]
    3568:	cbz	x2, 3574 <pthread_cond_timedwait@plt+0x94>
    356c:	mov	x16, x2
    3570:	br	x16
    3574:	ret
    3578:	stp	x29, x30, [sp, #-32]!
    357c:	mov	x29, sp
    3580:	str	x19, [sp, #16]
    3584:	adrp	x19, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1fe18>
    3588:	ldrb	w0, [x19, #608]
    358c:	cbnz	w0, 35b4 <pthread_cond_timedwait@plt+0xd4>
    3590:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    3594:	ldr	x0, [x0, #3920]
    3598:	cbz	x0, 35a8 <pthread_cond_timedwait@plt+0xc8>
    359c:	adrp	x0, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1fe18>
    35a0:	ldr	x0, [x0, #600]
    35a4:	bl	30e0 <__cxa_finalize@plt>
    35a8:	bl	3508 <pthread_cond_timedwait@plt+0x28>
    35ac:	mov	w0, #0x1                   	// #1
    35b0:	strb	w0, [x19, #608]
    35b4:	ldr	x19, [sp, #16]
    35b8:	ldp	x29, x30, [sp], #32
    35bc:	ret
    35c0:	b	3538 <pthread_cond_timedwait@plt+0x58>
    35c4:	stp	x29, x30, [sp, #-32]!
    35c8:	mov	w0, #0x1e                  	// #30
    35cc:	str	x19, [sp, #16]
    35d0:	mov	x29, sp
    35d4:	bl	33f0 <sysconf@plt>
    35d8:	mov	x19, x0
    35dc:	mov	w0, #0x55                  	// #85
    35e0:	bl	33f0 <sysconf@plt>
    35e4:	cmn	x0, #0x1
    35e8:	mov	x8, #0xffffffffffffffff    	// #-1
    35ec:	ccmp	x19, x8, #0x4, ne  // ne = any
    35f0:	mul	x8, x0, x19
    35f4:	ldr	x19, [sp, #16]
    35f8:	csel	x0, x8, xzr, ne  // ne = any
    35fc:	ldp	x29, x30, [sp], #32
    3600:	ret
    3604:	sub	sp, sp, #0x90
    3608:	mov	x2, sp
    360c:	mov	w1, #0x80                  	// #128
    3610:	mov	w0, wzr
    3614:	stp	x29, x30, [sp, #128]
    3618:	add	x29, sp, #0x80
    361c:	bl	3290 <sched_getaffinity@plt>
    3620:	mov	w8, w0
    3624:	mov	w0, wzr
    3628:	cbnz	w8, 3638 <pthread_cond_timedwait@plt+0x158>
    362c:	mov	x1, sp
    3630:	mov	w0, #0x80                  	// #128
    3634:	bl	3370 <__sched_cpucount@plt>
    3638:	ldp	x29, x30, [sp, #128]
    363c:	add	sp, sp, #0x90
    3640:	ret

0000000000003644 <lzma_version_number@@XZ_5.0>:
    3644:	mov	w0, #0x3eca                	// #16074
    3648:	movk	w0, #0x2fb, lsl #16
    364c:	ret

0000000000003650 <lzma_version_string@@XZ_5.0>:
    3650:	adrp	x0, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    3654:	add	x0, x0, #0x73b
    3658:	ret
    365c:	cmp	x0, #0x0
    3660:	csinc	x2, x0, xzr, ne  // ne = any
    3664:	cbz	x1, 367c <lzma_version_string@@XZ_5.0+0x2c>
    3668:	ldr	x3, [x1]
    366c:	cbz	x3, 367c <lzma_version_string@@XZ_5.0+0x2c>
    3670:	ldr	x0, [x1, #16]
    3674:	mov	w1, #0x1                   	// #1
    3678:	br	x3
    367c:	mov	x0, x2
    3680:	b	3140 <malloc@plt>
    3684:	stp	x29, x30, [sp, #-32]!
    3688:	cmp	x0, #0x0
    368c:	stp	x20, x19, [sp, #16]
    3690:	csinc	x19, x0, xzr, ne  // ne = any
    3694:	mov	x29, sp
    3698:	cbz	x1, 36dc <lzma_version_string@@XZ_5.0+0x8c>
    369c:	ldr	x8, [x1]
    36a0:	cbz	x8, 36dc <lzma_version_string@@XZ_5.0+0x8c>
    36a4:	ldr	x0, [x1, #16]
    36a8:	mov	w1, #0x1                   	// #1
    36ac:	mov	x2, x19
    36b0:	blr	x8
    36b4:	mov	x20, x0
    36b8:	cbz	x0, 36cc <lzma_version_string@@XZ_5.0+0x7c>
    36bc:	mov	x0, x20
    36c0:	mov	w1, wzr
    36c4:	mov	x2, x19
    36c8:	bl	31c0 <memset@plt>
    36cc:	mov	x0, x20
    36d0:	ldp	x20, x19, [sp, #16]
    36d4:	ldp	x29, x30, [sp], #32
    36d8:	ret
    36dc:	mov	x1, x19
    36e0:	ldp	x20, x19, [sp, #16]
    36e4:	mov	w0, #0x1                   	// #1
    36e8:	ldp	x29, x30, [sp], #32
    36ec:	b	31f0 <calloc@plt>
    36f0:	mov	x8, x0
    36f4:	cbz	x1, 370c <lzma_version_string@@XZ_5.0+0xbc>
    36f8:	ldr	x2, [x1, #8]
    36fc:	cbz	x2, 370c <lzma_version_string@@XZ_5.0+0xbc>
    3700:	ldr	x0, [x1, #16]
    3704:	mov	x1, x8
    3708:	br	x2
    370c:	mov	x0, x8
    3710:	b	3300 <free@plt>
    3714:	stp	x29, x30, [sp, #-64]!
    3718:	str	x23, [sp, #16]
    371c:	stp	x22, x21, [sp, #32]
    3720:	ldr	x22, [x1]
    3724:	ldr	x23, [x4]
    3728:	stp	x20, x19, [sp, #48]
    372c:	mov	x20, x1
    3730:	sub	x9, x2, x22
    3734:	sub	x10, x5, x23
    3738:	cmp	x9, x10
    373c:	add	x8, x3, x23
    3740:	csel	x21, x9, x10, cc  // cc = lo, ul, last
    3744:	add	x1, x0, x22
    3748:	mov	x0, x8
    374c:	mov	x2, x21
    3750:	mov	x29, sp
    3754:	mov	x19, x4
    3758:	bl	3040 <memcpy@plt>
    375c:	add	x8, x21, x22
    3760:	add	x9, x21, x23
    3764:	str	x8, [x20]
    3768:	str	x9, [x19]
    376c:	mov	x0, x21
    3770:	ldp	x20, x19, [sp, #48]
    3774:	ldp	x22, x21, [sp, #32]
    3778:	ldr	x23, [sp, #16]
    377c:	ldp	x29, x30, [sp], #64
    3780:	ret
    3784:	stp	x29, x30, [sp, #-48]!
    3788:	stp	x22, x21, [sp, #16]
    378c:	stp	x20, x19, [sp, #32]
    3790:	mov	x22, x0
    3794:	ldr	x3, [x2, #8]
    3798:	ldr	x8, [x22, #16]!
    379c:	mov	x19, x2
    37a0:	mov	x20, x0
    37a4:	mov	x21, x1
    37a8:	cmp	x3, x8
    37ac:	mov	x29, sp
    37b0:	b.eq	3810 <lzma_version_string@@XZ_5.0+0x1c0>  // b.none
    37b4:	cbz	x8, 3810 <lzma_version_string@@XZ_5.0+0x1c0>
    37b8:	ldr	x8, [x20, #32]
    37bc:	ldr	x1, [x20]
    37c0:	cbz	x8, 37d4 <lzma_version_string@@XZ_5.0+0x184>
    37c4:	mov	x0, x1
    37c8:	mov	x1, x21
    37cc:	blr	x8
    37d0:	b	37f4 <lzma_version_string@@XZ_5.0+0x1a4>
    37d4:	cbz	x21, 37ec <lzma_version_string@@XZ_5.0+0x19c>
    37d8:	ldr	x8, [x21, #8]
    37dc:	cbz	x8, 37ec <lzma_version_string@@XZ_5.0+0x19c>
    37e0:	ldr	x0, [x21, #16]
    37e4:	blr	x8
    37e8:	b	37f4 <lzma_version_string@@XZ_5.0+0x1a4>
    37ec:	mov	x0, x1
    37f0:	bl	3300 <free@plt>
    37f4:	mov	x8, #0xffffffffffffffff    	// #-1
    37f8:	movi	v0.2d, #0x0
    37fc:	stp	xzr, x8, [x20]
    3800:	str	xzr, [x22, #48]
    3804:	stp	q0, q0, [x22, #16]
    3808:	str	q0, [x22]
    380c:	ldr	x3, [x19, #8]
    3810:	str	x3, [x20, #16]
    3814:	ldr	x8, [x19]
    3818:	str	x8, [x20, #8]
    381c:	cbz	x3, 383c <lzma_version_string@@XZ_5.0+0x1ec>
    3820:	mov	x0, x20
    3824:	mov	x1, x21
    3828:	mov	x2, x19
    382c:	ldp	x20, x19, [sp, #32]
    3830:	ldp	x22, x21, [sp, #16]
    3834:	ldp	x29, x30, [sp], #48
    3838:	br	x3
    383c:	ldp	x20, x19, [sp, #32]
    3840:	ldp	x22, x21, [sp, #16]
    3844:	mov	w0, wzr
    3848:	ldp	x29, x30, [sp], #48
    384c:	ret
    3850:	stp	x29, x30, [sp, #-32]!
    3854:	stp	x20, x19, [sp, #16]
    3858:	mov	x20, x0
    385c:	ldr	x8, [x20, #16]!
    3860:	mov	x29, sp
    3864:	cbz	x8, 38c0 <lzma_version_string@@XZ_5.0+0x270>
    3868:	ldr	x9, [x0, #32]
    386c:	ldr	x8, [x0]
    3870:	mov	x19, x0
    3874:	cbz	x9, 3884 <lzma_version_string@@XZ_5.0+0x234>
    3878:	mov	x0, x8
    387c:	blr	x9
    3880:	b	38a8 <lzma_version_string@@XZ_5.0+0x258>
    3884:	cbz	x1, 38a0 <lzma_version_string@@XZ_5.0+0x250>
    3888:	ldr	x9, [x1, #8]
    388c:	cbz	x9, 38a0 <lzma_version_string@@XZ_5.0+0x250>
    3890:	ldr	x0, [x1, #16]
    3894:	mov	x1, x8
    3898:	blr	x9
    389c:	b	38a8 <lzma_version_string@@XZ_5.0+0x258>
    38a0:	mov	x0, x8
    38a4:	bl	3300 <free@plt>
    38a8:	mov	x8, #0xffffffffffffffff    	// #-1
    38ac:	movi	v0.2d, #0x0
    38b0:	stp	xzr, x8, [x19]
    38b4:	str	xzr, [x20, #48]
    38b8:	stp	q0, q0, [x20, #16]
    38bc:	str	q0, [x20]
    38c0:	ldp	x20, x19, [sp, #16]
    38c4:	ldp	x29, x30, [sp], #32
    38c8:	ret
    38cc:	ldr	x8, [x2]
    38d0:	ldr	x9, [x0, #8]
    38d4:	cmp	x8, x9
    38d8:	b.ne	38f8 <lzma_version_string@@XZ_5.0+0x2a8>  // b.any
    38dc:	cmn	x8, #0x1
    38e0:	b.eq	3900 <lzma_version_string@@XZ_5.0+0x2b0>  // b.none
    38e4:	ldr	x4, [x0, #64]
    38e8:	ldr	x0, [x0]
    38ec:	mov	x3, x2
    38f0:	mov	x2, xzr
    38f4:	br	x4
    38f8:	mov	w0, #0xb                   	// #11
    38fc:	ret
    3900:	mov	w0, wzr
    3904:	ret
    3908:	stp	x29, x30, [sp, #-32]!
    390c:	str	x19, [sp, #16]
    3910:	mov	x29, sp
    3914:	cbz	x0, 3954 <lzma_version_string@@XZ_5.0+0x304>
    3918:	ldr	x8, [x0, #56]
    391c:	mov	x19, x0
    3920:	cbnz	x8, 3988 <lzma_version_string@@XZ_5.0+0x338>
    3924:	ldr	x9, [x19, #48]
    3928:	cbz	x9, 395c <lzma_version_string@@XZ_5.0+0x30c>
    392c:	ldr	x8, [x9]
    3930:	cbz	x8, 395c <lzma_version_string@@XZ_5.0+0x30c>
    3934:	ldr	x0, [x9, #16]
    3938:	mov	w1, #0x1                   	// #1
    393c:	mov	w2, #0x60                  	// #96
    3940:	blr	x8
    3944:	str	x0, [x19, #56]
    3948:	cbnz	x0, 396c <lzma_version_string@@XZ_5.0+0x31c>
    394c:	mov	w0, #0x5                   	// #5
    3950:	b	39a8 <lzma_version_string@@XZ_5.0+0x358>
    3954:	mov	w0, #0xb                   	// #11
    3958:	b	39a8 <lzma_version_string@@XZ_5.0+0x358>
    395c:	mov	w0, #0x60                  	// #96
    3960:	bl	3140 <malloc@plt>
    3964:	str	x0, [x19, #56]
    3968:	cbz	x0, 394c <lzma_version_string@@XZ_5.0+0x2fc>
    396c:	mov	x8, #0xffffffffffffffff    	// #-1
    3970:	movi	v0.2d, #0x0
    3974:	stp	xzr, x8, [x0]
    3978:	stp	q0, q0, [x0, #16]
    397c:	str	q0, [x0, #48]
    3980:	str	xzr, [x0, #64]
    3984:	ldr	x8, [x19, #56]
    3988:	strb	wzr, [x8, #92]
    398c:	str	wzr, [x8, #88]
    3990:	ldr	x8, [x19, #56]
    3994:	mov	w0, wzr
    3998:	str	wzr, [x8, #72]
    399c:	strb	wzr, [x8, #93]
    39a0:	str	xzr, [x19, #16]
    39a4:	str	xzr, [x19, #40]
    39a8:	ldr	x19, [sp, #16]
    39ac:	ldp	x29, x30, [sp], #32
    39b0:	ret

00000000000039b4 <lzma_code@@XZ_5.0>:
    39b4:	sub	sp, sp, #0x30
    39b8:	stp	x29, x30, [sp, #16]
    39bc:	ldr	x2, [x0]
    39c0:	mov	x8, x0
    39c4:	str	x19, [sp, #32]
    39c8:	add	x29, sp, #0x10
    39cc:	cbz	x2, 3a5c <lzma_code@@XZ_5.0+0xa8>
    39d0:	ldr	x5, [x8, #24]
    39d4:	cbz	x5, 3a68 <lzma_code@@XZ_5.0+0xb4>
    39d8:	ldr	x10, [x8, #56]
    39dc:	cbz	x10, 3a70 <lzma_code@@XZ_5.0+0xbc>
    39e0:	cmp	w1, #0x4
    39e4:	mov	w0, #0xb                   	// #11
    39e8:	b.hi	3a74 <lzma_code@@XZ_5.0+0xc0>  // b.pmore
    39ec:	ldr	x9, [x10, #24]
    39f0:	cbz	x9, 3a74 <lzma_code@@XZ_5.0+0xc0>
    39f4:	add	x11, x10, w1, uxtw
    39f8:	ldrb	w11, [x11, #88]
    39fc:	cbz	w11, 3a70 <lzma_code@@XZ_5.0+0xbc>
    3a00:	ldr	x11, [x8, #64]
    3a04:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a08:	ldr	x11, [x8, #72]
    3a0c:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a10:	ldr	x11, [x8, #80]
    3a14:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a18:	ldr	x11, [x8, #88]
    3a1c:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a20:	ldr	x11, [x8, #96]
    3a24:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a28:	ldr	x11, [x8, #104]
    3a2c:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a30:	ldr	x11, [x8, #112]
    3a34:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a38:	ldr	x11, [x8, #120]
    3a3c:	cbnz	x11, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a40:	mov	x11, x8
    3a44:	ldr	w8, [x8, #128]
    3a48:	cbnz	w8, 3a54 <lzma_code@@XZ_5.0+0xa0>
    3a4c:	ldr	w8, [x11, #132]
    3a50:	cbz	w8, 3a84 <lzma_code@@XZ_5.0+0xd0>
    3a54:	mov	w0, #0x8                   	// #8
    3a58:	b	3a74 <lzma_code@@XZ_5.0+0xc0>
    3a5c:	ldr	x9, [x8, #8]
    3a60:	cbnz	x9, 3a70 <lzma_code@@XZ_5.0+0xbc>
    3a64:	b	39d0 <lzma_code@@XZ_5.0+0x1c>
    3a68:	ldr	x9, [x8, #32]
    3a6c:	cbz	x9, 39d8 <lzma_code@@XZ_5.0+0x24>
    3a70:	mov	w0, #0xb                   	// #11
    3a74:	ldr	x19, [sp, #32]
    3a78:	ldp	x29, x30, [sp, #16]
    3a7c:	add	sp, sp, #0x30
    3a80:	ret
    3a84:	ldr	w8, [x10, #72]
    3a88:	cmp	w8, #0x5
    3a8c:	b.hi	3a70 <lzma_code@@XZ_5.0+0xbc>  // b.pmore
    3a90:	adrp	x12, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    3a94:	add	x12, x12, #0x710
    3a98:	adr	x13, 3a74 <lzma_code@@XZ_5.0+0xc0>
    3a9c:	ldrb	w14, [x12, x8]
    3aa0:	add	x13, x13, x14, lsl #2
    3aa4:	mov	w0, #0x1                   	// #1
    3aa8:	br	x13
    3aac:	sub	w8, w1, #0x1
    3ab0:	cmp	w8, #0x3
    3ab4:	b.hi	3b30 <lzma_code@@XZ_5.0+0x17c>  // b.pmore
    3ab8:	adrp	x12, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    3abc:	add	x12, x12, #0x716
    3ac0:	adr	x13, 3ad0 <lzma_code@@XZ_5.0+0x11c>
    3ac4:	ldrb	w14, [x12, x8]
    3ac8:	add	x13, x13, x14, lsl #2
    3acc:	br	x13
    3ad0:	mov	w8, #0x1                   	// #1
    3ad4:	b	3b2c <lzma_code@@XZ_5.0+0x178>
    3ad8:	cmp	w1, #0x1
    3adc:	b.ne	3a70 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3ae0:	b	3b04 <lzma_code@@XZ_5.0+0x150>
    3ae4:	cmp	w1, #0x2
    3ae8:	b.ne	3a70 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3aec:	b	3b04 <lzma_code@@XZ_5.0+0x150>
    3af0:	cmp	w1, #0x3
    3af4:	b.ne	3a70 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3af8:	b	3b04 <lzma_code@@XZ_5.0+0x150>
    3afc:	cmp	w1, #0x4
    3b00:	b.ne	3a70 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3b04:	ldr	x8, [x10, #80]
    3b08:	ldr	x12, [x11, #8]
    3b0c:	cmp	x8, x12
    3b10:	b.ne	3a70 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3b14:	b	3b30 <lzma_code@@XZ_5.0+0x17c>
    3b18:	mov	w8, #0x2                   	// #2
    3b1c:	b	3b2c <lzma_code@@XZ_5.0+0x178>
    3b20:	mov	w8, #0x3                   	// #3
    3b24:	b	3b2c <lzma_code@@XZ_5.0+0x178>
    3b28:	mov	w8, #0x4                   	// #4
    3b2c:	str	w8, [x10, #72]
    3b30:	str	xzr, [x29, #24]
    3b34:	str	xzr, [sp, #8]
    3b38:	ldr	x8, [x11, #48]
    3b3c:	ldr	x0, [x10]
    3b40:	ldr	x4, [x11, #8]
    3b44:	ldr	x7, [x11, #32]
    3b48:	add	x3, x29, #0x18
    3b4c:	add	x6, sp, #0x8
    3b50:	str	w1, [sp]
    3b54:	mov	x1, x8
    3b58:	mov	x19, x11
    3b5c:	blr	x9
    3b60:	ldr	x9, [x29, #24]
    3b64:	ldp	x8, x10, [x19]
    3b68:	ldp	x11, x12, [x19, #16]
    3b6c:	cmp	w0, #0x20
    3b70:	add	x8, x8, x9
    3b74:	sub	x13, x10, x9
    3b78:	add	x10, x11, x9
    3b7c:	stp	x8, x13, [x19]
    3b80:	str	x10, [x19, #16]
    3b84:	ldr	x10, [sp, #8]
    3b88:	add	x11, x12, x10
    3b8c:	str	x11, [x19, #24]
    3b90:	ldp	x8, x11, [x19, #32]
    3b94:	sub	x8, x8, x10
    3b98:	str	x8, [x19, #32]
    3b9c:	ldr	x8, [x19, #56]
    3ba0:	add	x11, x11, x10
    3ba4:	str	x11, [x19, #40]
    3ba8:	str	x13, [x8, #80]
    3bac:	b.hi	3c14 <lzma_code@@XZ_5.0+0x260>  // b.pmore
    3bb0:	adrp	x12, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    3bb4:	mov	w11, w0
    3bb8:	add	x12, x12, #0x71a
    3bbc:	adr	x13, 3bcc <lzma_code@@XZ_5.0+0x218>
    3bc0:	ldrb	w14, [x12, x11]
    3bc4:	add	x13, x13, x14, lsl #2
    3bc8:	br	x13
    3bcc:	strb	wzr, [x8, #93]
    3bd0:	b	3a74 <lzma_code@@XZ_5.0+0xc0>
    3bd4:	orr	x9, x10, x9
    3bd8:	cbz	x9, 3c20 <lzma_code@@XZ_5.0+0x26c>
    3bdc:	mov	w0, wzr
    3be0:	strb	wzr, [x8, #93]
    3be4:	b	3a74 <lzma_code@@XZ_5.0+0xc0>
    3be8:	ldr	w9, [x8, #72]
    3bec:	cmp	w9, #0x4
    3bf0:	b.hi	3c30 <lzma_code@@XZ_5.0+0x27c>  // b.pmore
    3bf4:	mov	w10, #0x1                   	// #1
    3bf8:	lsl	w9, w10, w9
    3bfc:	mov	w10, #0x16                  	// #22
    3c00:	tst	w9, w10
    3c04:	b.eq	3c30 <lzma_code@@XZ_5.0+0x27c>  // b.none
    3c08:	str	wzr, [x8, #72]
    3c0c:	strb	wzr, [x8, #93]
    3c10:	b	3a74 <lzma_code@@XZ_5.0+0xc0>
    3c14:	mov	w9, #0x6                   	// #6
    3c18:	str	w9, [x8, #72]
    3c1c:	b	3a74 <lzma_code@@XZ_5.0+0xc0>
    3c20:	ldrb	w9, [x8, #93]
    3c24:	cbz	w9, 3c3c <lzma_code@@XZ_5.0+0x288>
    3c28:	mov	w0, #0xa                   	// #10
    3c2c:	b	3a74 <lzma_code@@XZ_5.0+0xc0>
    3c30:	mov	w9, #0x5                   	// #5
    3c34:	str	w9, [x8, #72]
    3c38:	b	3bcc <lzma_code@@XZ_5.0+0x218>
    3c3c:	mov	w9, #0x1                   	// #1
    3c40:	mov	w0, wzr
    3c44:	strb	w9, [x8, #93]
    3c48:	b	3a74 <lzma_code@@XZ_5.0+0xc0>

0000000000003c4c <lzma_end@@XZ_5.0>:
    3c4c:	stp	x29, x30, [sp, #-48]!
    3c50:	str	x21, [sp, #16]
    3c54:	stp	x20, x19, [sp, #32]
    3c58:	mov	x29, sp
    3c5c:	cbz	x0, 3cfc <lzma_end@@XZ_5.0+0xb0>
    3c60:	ldr	x20, [x0, #56]
    3c64:	mov	x19, x0
    3c68:	cbz	x20, 3cfc <lzma_end@@XZ_5.0+0xb0>
    3c6c:	mov	x21, x20
    3c70:	ldr	x1, [x19, #48]
    3c74:	ldr	x8, [x21, #16]!
    3c78:	cbz	x8, 3cd4 <lzma_end@@XZ_5.0+0x88>
    3c7c:	ldr	x9, [x20, #32]
    3c80:	ldr	x8, [x20]
    3c84:	cbz	x9, 3c94 <lzma_end@@XZ_5.0+0x48>
    3c88:	mov	x0, x8
    3c8c:	blr	x9
    3c90:	b	3cb8 <lzma_end@@XZ_5.0+0x6c>
    3c94:	cbz	x1, 3cb0 <lzma_end@@XZ_5.0+0x64>
    3c98:	ldr	x9, [x1, #8]
    3c9c:	cbz	x9, 3cb0 <lzma_end@@XZ_5.0+0x64>
    3ca0:	ldr	x0, [x1, #16]
    3ca4:	mov	x1, x8
    3ca8:	blr	x9
    3cac:	b	3cb8 <lzma_end@@XZ_5.0+0x6c>
    3cb0:	mov	x0, x8
    3cb4:	bl	3300 <free@plt>
    3cb8:	mov	x8, #0xffffffffffffffff    	// #-1
    3cbc:	movi	v0.2d, #0x0
    3cc0:	stp	xzr, x8, [x20]
    3cc4:	str	xzr, [x21, #48]
    3cc8:	stp	q0, q0, [x21, #16]
    3ccc:	str	q0, [x21]
    3cd0:	ldp	x1, x20, [x19, #48]
    3cd4:	cbz	x1, 3cf0 <lzma_end@@XZ_5.0+0xa4>
    3cd8:	ldr	x8, [x1, #8]
    3cdc:	cbz	x8, 3cf0 <lzma_end@@XZ_5.0+0xa4>
    3ce0:	ldr	x0, [x1, #16]
    3ce4:	mov	x1, x20
    3ce8:	blr	x8
    3cec:	b	3cf8 <lzma_end@@XZ_5.0+0xac>
    3cf0:	mov	x0, x20
    3cf4:	bl	3300 <free@plt>
    3cf8:	str	xzr, [x19, #56]
    3cfc:	ldp	x20, x19, [sp, #32]
    3d00:	ldr	x21, [sp, #16]
    3d04:	ldp	x29, x30, [sp], #48
    3d08:	ret

0000000000003d0c <lzma_get_progress@@XZ_5.2>:
    3d0c:	ldr	x8, [x0, #56]
    3d10:	ldr	x3, [x8, #40]
    3d14:	cbz	x3, 3d20 <lzma_get_progress@@XZ_5.2+0x14>
    3d18:	ldr	x0, [x8]
    3d1c:	br	x3
    3d20:	ldr	x8, [x0, #16]
    3d24:	str	x8, [x1]
    3d28:	ldr	x8, [x0, #40]
    3d2c:	str	x8, [x2]
    3d30:	ret

0000000000003d34 <lzma_get_check@@XZ_5.0>:
    3d34:	ldr	x8, [x0, #56]
    3d38:	ldr	x1, [x8, #48]
    3d3c:	cbz	x1, 3d48 <lzma_get_check@@XZ_5.0+0x14>
    3d40:	ldr	x0, [x8]
    3d44:	br	x1
    3d48:	mov	w0, wzr
    3d4c:	ret

0000000000003d50 <lzma_memusage@@XZ_5.0>:
    3d50:	sub	sp, sp, #0x20
    3d54:	stp	x29, x30, [sp, #16]
    3d58:	add	x29, sp, #0x10
    3d5c:	cbz	x0, 3d98 <lzma_memusage@@XZ_5.0+0x48>
    3d60:	ldr	x9, [x0, #56]
    3d64:	cbz	x9, 3d94 <lzma_memusage@@XZ_5.0+0x44>
    3d68:	ldr	x8, [x9, #56]
    3d6c:	cbz	x8, 3d94 <lzma_memusage@@XZ_5.0+0x44>
    3d70:	ldr	x0, [x9]
    3d74:	add	x1, sp, #0x8
    3d78:	mov	x2, sp
    3d7c:	mov	x3, xzr
    3d80:	blr	x8
    3d84:	ldr	x8, [sp, #8]
    3d88:	cmp	w0, #0x0
    3d8c:	csel	x0, x8, xzr, eq  // eq = none
    3d90:	b	3d98 <lzma_memusage@@XZ_5.0+0x48>
    3d94:	mov	x0, xzr
    3d98:	ldp	x29, x30, [sp, #16]
    3d9c:	add	sp, sp, #0x20
    3da0:	ret

0000000000003da4 <lzma_memlimit_get@@XZ_5.0>:
    3da4:	sub	sp, sp, #0x20
    3da8:	stp	x29, x30, [sp, #16]
    3dac:	add	x29, sp, #0x10
    3db0:	cbz	x0, 3dec <lzma_memlimit_get@@XZ_5.0+0x48>
    3db4:	ldr	x9, [x0, #56]
    3db8:	cbz	x9, 3de8 <lzma_memlimit_get@@XZ_5.0+0x44>
    3dbc:	ldr	x8, [x9, #56]
    3dc0:	cbz	x8, 3de8 <lzma_memlimit_get@@XZ_5.0+0x44>
    3dc4:	ldr	x0, [x9]
    3dc8:	mov	x1, sp
    3dcc:	add	x2, sp, #0x8
    3dd0:	mov	x3, xzr
    3dd4:	blr	x8
    3dd8:	ldr	x8, [sp, #8]
    3ddc:	cmp	w0, #0x0
    3de0:	csel	x0, x8, xzr, eq  // eq = none
    3de4:	b	3dec <lzma_memlimit_get@@XZ_5.0+0x48>
    3de8:	mov	x0, xzr
    3dec:	ldp	x29, x30, [sp, #16]
    3df0:	add	sp, sp, #0x20
    3df4:	ret

0000000000003df8 <lzma_memlimit_set@@XZ_5.0>:
    3df8:	sub	sp, sp, #0x20
    3dfc:	stp	x29, x30, [sp, #16]
    3e00:	add	x29, sp, #0x10
    3e04:	cbz	x0, 3e34 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3e08:	ldr	x9, [x0, #56]
    3e0c:	cbz	x9, 3e34 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3e10:	ldr	x8, [x9, #56]
    3e14:	cbz	x8, 3e34 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3e18:	ldr	x0, [x9]
    3e1c:	cmp	x1, #0x0
    3e20:	csinc	x3, x1, xzr, ne  // ne = any
    3e24:	mov	x1, sp
    3e28:	add	x2, sp, #0x8
    3e2c:	blr	x8
    3e30:	b	3e38 <lzma_memlimit_set@@XZ_5.0+0x40>
    3e34:	mov	w0, #0xb                   	// #11
    3e38:	ldp	x29, x30, [sp, #16]
    3e3c:	add	sp, sp, #0x20
    3e40:	ret

0000000000003e44 <lzma_block_compressed_size@@XZ_5.0>:
    3e44:	stp	x29, x30, [sp, #-64]!
    3e48:	str	x23, [sp, #16]
    3e4c:	stp	x22, x21, [sp, #32]
    3e50:	stp	x20, x19, [sp, #48]
    3e54:	mov	x29, sp
    3e58:	cbz	x0, 3e6c <lzma_block_compressed_size@@XZ_5.0+0x28>
    3e5c:	ldr	w8, [x0]
    3e60:	mov	x19, x0
    3e64:	cmp	w8, #0x1
    3e68:	b.ls	3e84 <lzma_block_compressed_size@@XZ_5.0+0x40>  // b.plast
    3e6c:	mov	w0, #0xb                   	// #11
    3e70:	ldp	x20, x19, [sp, #48]
    3e74:	ldp	x22, x21, [sp, #32]
    3e78:	ldr	x23, [sp, #16]
    3e7c:	ldp	x29, x30, [sp], #64
    3e80:	ret
    3e84:	ldr	w21, [x19, #4]
    3e88:	mov	w0, #0xb                   	// #11
    3e8c:	sub	w8, w21, #0x8
    3e90:	cmp	w8, #0x3f8
    3e94:	b.hi	3e70 <lzma_block_compressed_size@@XZ_5.0+0x2c>  // b.pmore
    3e98:	and	w8, w21, #0x3
    3e9c:	cbnz	w8, 3e70 <lzma_block_compressed_size@@XZ_5.0+0x2c>
    3ea0:	ldr	x22, [x19, #16]
    3ea4:	mov	w0, #0xb                   	// #11
    3ea8:	cmn	x22, #0x1
    3eac:	b.lt	3e70 <lzma_block_compressed_size@@XZ_5.0+0x2c>  // b.tstop
    3eb0:	cbz	x22, 3e70 <lzma_block_compressed_size@@XZ_5.0+0x2c>
    3eb4:	ldr	w0, [x19, #8]
    3eb8:	mov	x20, x1
    3ebc:	cmn	x22, #0x1
    3ec0:	b.eq	3ee8 <lzma_block_compressed_size@@XZ_5.0+0xa4>  // b.none
    3ec4:	cmp	w0, #0xf
    3ec8:	b.hi	3ee8 <lzma_block_compressed_size@@XZ_5.0+0xa4>  // b.pmore
    3ecc:	add	x23, x22, x21
    3ed0:	bl	3200 <lzma_check_size@plt>
    3ed4:	add	x8, x23, w0, uxtw
    3ed8:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    3edc:	cmp	x8, x9
    3ee0:	b.hi	3e6c <lzma_block_compressed_size@@XZ_5.0+0x28>  // b.pmore
    3ee4:	b	3ef4 <lzma_block_compressed_size@@XZ_5.0+0xb0>
    3ee8:	cmp	w0, #0xf
    3eec:	b.hi	3e6c <lzma_block_compressed_size@@XZ_5.0+0x28>  // b.pmore
    3ef0:	bl	3200 <lzma_check_size@plt>
    3ef4:	add	w8, w0, w21
    3ef8:	cmp	x8, x20
    3efc:	b.cs	3f14 <lzma_block_compressed_size@@XZ_5.0+0xd0>  // b.hs, b.nlast
    3f00:	cmn	x22, #0x1
    3f04:	sub	x8, x20, x8
    3f08:	b.eq	3f1c <lzma_block_compressed_size@@XZ_5.0+0xd8>  // b.none
    3f0c:	cmp	x22, x8
    3f10:	b.eq	3f1c <lzma_block_compressed_size@@XZ_5.0+0xd8>  // b.none
    3f14:	mov	w0, #0x9                   	// #9
    3f18:	b	3e70 <lzma_block_compressed_size@@XZ_5.0+0x2c>
    3f1c:	mov	w0, wzr
    3f20:	str	x8, [x19, #16]
    3f24:	b	3e70 <lzma_block_compressed_size@@XZ_5.0+0x2c>

0000000000003f28 <lzma_block_unpadded_size@@XZ_5.0>:
    3f28:	stp	x29, x30, [sp, #-32]!
    3f2c:	str	x19, [sp, #16]
    3f30:	mov	x29, sp
    3f34:	cbz	x0, 3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3f38:	ldr	w9, [x0]
    3f3c:	mov	x8, x0
    3f40:	cmp	w9, #0x1
    3f44:	b.ls	3f50 <lzma_block_unpadded_size@@XZ_5.0+0x28>  // b.plast
    3f48:	mov	x0, xzr
    3f4c:	b	3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3f50:	ldr	w9, [x8, #4]
    3f54:	mov	x0, xzr
    3f58:	sub	w10, w9, #0x8
    3f5c:	cmp	w10, #0x3f8
    3f60:	b.hi	3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.pmore
    3f64:	and	w10, w9, #0x3
    3f68:	cbnz	w10, 3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3f6c:	ldr	x10, [x8, #16]
    3f70:	mov	x0, xzr
    3f74:	cmn	x10, #0x1
    3f78:	b.lt	3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.tstop
    3f7c:	cbz	x10, 3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3f80:	ldr	w8, [x8, #8]
    3f84:	cmp	w8, #0x10
    3f88:	csetm	x0, cc  // cc = lo, ul, last
    3f8c:	cmn	x10, #0x1
    3f90:	b.eq	3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.none
    3f94:	cmp	w8, #0xf
    3f98:	b.hi	3fb8 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.pmore
    3f9c:	mov	w0, w8
    3fa0:	add	x19, x10, x9
    3fa4:	bl	3200 <lzma_check_size@plt>
    3fa8:	add	x8, x19, w0, uxtw
    3fac:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    3fb0:	cmp	x8, x9
    3fb4:	csel	x0, xzr, x8, hi  // hi = pmore
    3fb8:	ldr	x19, [sp, #16]
    3fbc:	ldp	x29, x30, [sp], #32
    3fc0:	ret

0000000000003fc4 <lzma_block_total_size@@XZ_5.0>:
    3fc4:	stp	x29, x30, [sp, #-32]!
    3fc8:	str	x19, [sp, #16]
    3fcc:	mov	x29, sp
    3fd0:	cbz	x0, 3fe8 <lzma_block_total_size@@XZ_5.0+0x24>
    3fd4:	ldr	w9, [x0]
    3fd8:	mov	x8, x0
    3fdc:	cmp	w9, #0x1
    3fe0:	b.ls	3ff4 <lzma_block_total_size@@XZ_5.0+0x30>  // b.plast
    3fe4:	mov	x0, xzr
    3fe8:	ldr	x19, [sp, #16]
    3fec:	ldp	x29, x30, [sp], #32
    3ff0:	ret
    3ff4:	ldr	w9, [x8, #4]
    3ff8:	mov	x0, xzr
    3ffc:	sub	w10, w9, #0x8
    4000:	cmp	w10, #0x3f8
    4004:	b.hi	3fe8 <lzma_block_total_size@@XZ_5.0+0x24>  // b.pmore
    4008:	and	w10, w9, #0x3
    400c:	cbnz	w10, 3fe8 <lzma_block_total_size@@XZ_5.0+0x24>
    4010:	ldr	x10, [x8, #16]
    4014:	mov	x0, xzr
    4018:	cmn	x10, #0x1
    401c:	b.lt	3fe8 <lzma_block_total_size@@XZ_5.0+0x24>  // b.tstop
    4020:	cbz	x10, 3fe8 <lzma_block_total_size@@XZ_5.0+0x24>
    4024:	ldr	w0, [x8, #8]
    4028:	cmn	x10, #0x1
    402c:	b.eq	405c <lzma_block_total_size@@XZ_5.0+0x98>  // b.none
    4030:	cmp	w0, #0xf
    4034:	b.hi	405c <lzma_block_total_size@@XZ_5.0+0x98>  // b.pmore
    4038:	add	x19, x10, x9
    403c:	bl	3200 <lzma_check_size@plt>
    4040:	add	x8, x19, w0, uxtw
    4044:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    4048:	add	x10, x8, #0x3
    404c:	and	x10, x10, #0xfffffffffffffffc
    4050:	cmp	x8, x9
    4054:	csel	x0, xzr, x10, hi  // hi = pmore
    4058:	b	3fe8 <lzma_block_total_size@@XZ_5.0+0x24>
    405c:	cmp	w0, #0x10
    4060:	b.cs	3fe4 <lzma_block_total_size@@XZ_5.0+0x20>  // b.hs, b.nlast
    4064:	mov	x0, #0xffffffffffffffff    	// #-1
    4068:	b	3fe8 <lzma_block_total_size@@XZ_5.0+0x24>
    406c:	stp	x29, x30, [sp, #-32]!
    4070:	stp	x20, x19, [sp, #16]
    4074:	add	x20, x0, #0x50
    4078:	mov	x19, x0
    407c:	mov	x0, x20
    4080:	mov	x29, sp
    4084:	bl	33c0 <lzma_lzma_preset@plt>
    4088:	tst	w0, #0xff
    408c:	b.eq	4098 <lzma_block_total_size@@XZ_5.0+0xd4>  // b.none
    4090:	mov	w0, #0x1                   	// #1
    4094:	b	40ac <lzma_block_total_size@@XZ_5.0+0xe8>
    4098:	mov	w0, wzr
    409c:	mov	w8, #0x21                  	// #33
    40a0:	mov	x9, #0xffffffffffffffff    	// #-1
    40a4:	stp	x8, x20, [x19]
    40a8:	str	x9, [x19, #16]
    40ac:	ldp	x20, x19, [sp, #16]
    40b0:	ldp	x29, x30, [sp], #32
    40b4:	ret

00000000000040b8 <lzma_filters_copy@@XZ_5.0>:
    40b8:	stp	x29, x30, [sp, #-96]!
    40bc:	stp	x22, x21, [sp, #64]
    40c0:	mov	w22, #0xb                   	// #11
    40c4:	stp	x28, x27, [sp, #16]
    40c8:	stp	x26, x25, [sp, #32]
    40cc:	stp	x24, x23, [sp, #48]
    40d0:	stp	x20, x19, [sp, #80]
    40d4:	mov	x29, sp
    40d8:	cbz	x0, 4210 <lzma_filters_copy@@XZ_5.0+0x158>
    40dc:	mov	x20, x1
    40e0:	cbz	x1, 4210 <lzma_filters_copy@@XZ_5.0+0x158>
    40e4:	ldr	x8, [x0]
    40e8:	mov	x21, x0
    40ec:	cmn	x8, #0x1
    40f0:	b.eq	41c8 <lzma_filters_copy@@XZ_5.0+0x110>  // b.none
    40f4:	mov	x24, #0x1                   	// #1
    40f8:	adrp	x26, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    40fc:	adrp	x27, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    4100:	mov	x19, x2
    4104:	mov	x23, xzr
    4108:	movk	x24, #0x4000, lsl #48
    410c:	mov	w25, #0x18                  	// #24
    4110:	add	x26, x26, #0x748
    4114:	add	x27, x27, #0x760
    4118:	mov	x9, x21
    411c:	b	413c <lzma_filters_copy@@XZ_5.0+0x84>
    4120:	add	x8, x20, x23, lsl #4
    4124:	str	xzr, [x8, #8]
    4128:	add	x23, x23, #0x1
    412c:	add	x9, x21, x23, lsl #4
    4130:	ldr	x8, [x9]
    4134:	cmn	x8, #0x1
    4138:	b.eq	41cc <lzma_filters_copy@@XZ_5.0+0x114>  // b.none
    413c:	cmp	x23, #0x4
    4140:	b.eq	41e0 <lzma_filters_copy@@XZ_5.0+0x128>  // b.none
    4144:	lsl	x10, x23, #4
    4148:	str	x8, [x20, x10]
    414c:	add	x28, x21, x10
    4150:	ldr	x8, [x28, #8]!
    4154:	cbz	x8, 4120 <lzma_filters_copy@@XZ_5.0+0x68>
    4158:	ldr	x9, [x9]
    415c:	cmp	x9, x24
    4160:	b.ne	416c <lzma_filters_copy@@XZ_5.0+0xb4>  // b.any
    4164:	mov	x8, xzr
    4168:	b	418c <lzma_filters_copy@@XZ_5.0+0xd4>
    416c:	mov	x8, xzr
    4170:	mov	x10, x27
    4174:	cmp	x8, #0x9
    4178:	b.eq	41bc <lzma_filters_copy@@XZ_5.0+0x104>  // b.none
    417c:	ldr	x11, [x10], #24
    4180:	add	x8, x8, #0x1
    4184:	cmp	x9, x11
    4188:	b.ne	4174 <lzma_filters_copy@@XZ_5.0+0xbc>  // b.any
    418c:	madd	x8, x8, x25, x26
    4190:	ldr	x22, [x8, #8]
    4194:	mov	x1, x19
    4198:	mov	x0, x22
    419c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    41a0:	add	x8, x20, x23, lsl #4
    41a4:	str	x0, [x8, #8]
    41a8:	cbz	x0, 41e8 <lzma_filters_copy@@XZ_5.0+0x130>
    41ac:	ldr	x1, [x28]
    41b0:	mov	x2, x22
    41b4:	bl	3040 <memcpy@plt>
    41b8:	b	4128 <lzma_filters_copy@@XZ_5.0+0x70>
    41bc:	mov	w22, #0x8                   	// #8
    41c0:	cbnz	x23, 41f0 <lzma_filters_copy@@XZ_5.0+0x138>
    41c4:	b	4210 <lzma_filters_copy@@XZ_5.0+0x158>
    41c8:	mov	x23, xzr
    41cc:	mov	w22, wzr
    41d0:	add	x8, x20, x23, lsl #4
    41d4:	mov	x9, #0xffffffffffffffff    	// #-1
    41d8:	stp	x9, xzr, [x8]
    41dc:	b	4210 <lzma_filters_copy@@XZ_5.0+0x158>
    41e0:	mov	w22, #0x8                   	// #8
    41e4:	b	41f0 <lzma_filters_copy@@XZ_5.0+0x138>
    41e8:	mov	w22, #0x5                   	// #5
    41ec:	cbz	x23, 4210 <lzma_filters_copy@@XZ_5.0+0x158>
    41f0:	add	x8, x20, x23, lsl #4
    41f4:	sub	x20, x8, #0x8
    41f8:	ldr	x0, [x20]
    41fc:	mov	x1, x19
    4200:	sub	x23, x23, #0x1
    4204:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    4208:	str	xzr, [x20], #-16
    420c:	cbnz	x23, 41f8 <lzma_filters_copy@@XZ_5.0+0x140>
    4210:	mov	w0, w22
    4214:	ldp	x20, x19, [sp, #80]
    4218:	ldp	x22, x21, [sp, #64]
    421c:	ldp	x24, x23, [sp, #48]
    4220:	ldp	x26, x25, [sp, #32]
    4224:	ldp	x28, x27, [sp, #16]
    4228:	ldp	x29, x30, [sp], #96
    422c:	ret
    4230:	sub	sp, sp, #0xe0
    4234:	stp	x29, x30, [sp, #128]
    4238:	str	x27, [sp, #144]
    423c:	stp	x26, x25, [sp, #160]
    4240:	stp	x24, x23, [sp, #176]
    4244:	stp	x22, x21, [sp, #192]
    4248:	stp	x20, x19, [sp, #208]
    424c:	add	x29, sp, #0x80
    4250:	cbz	x2, 4310 <lzma_filters_copy@@XZ_5.0+0x258>
    4254:	mov	x20, x0
    4258:	ldr	x0, [x2]
    425c:	mov	x22, x2
    4260:	cmn	x0, #0x1
    4264:	b.eq	4310 <lzma_filters_copy@@XZ_5.0+0x258>  // b.none
    4268:	add	x10, sp, #0x8
    426c:	mov	x9, #0x1                   	// #1
    4270:	add	x26, x10, #0x10
    4274:	adrp	x10, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    4278:	mov	x21, x3
    427c:	mov	x19, x1
    4280:	mov	x8, xzr
    4284:	mov	x24, xzr
    4288:	mov	w14, #0x1                   	// #1
    428c:	movk	x9, #0x4000, lsl #48
    4290:	add	x10, x10, #0x760
    4294:	mov	x13, x0
    4298:	mov	x15, x26
    429c:	mov	w12, #0x1                   	// #1
    42a0:	cmp	x13, x9
    42a4:	mov	x27, x15
    42a8:	mov	x25, x14
    42ac:	mov	x11, xzr
    42b0:	b.eq	42d0 <lzma_filters_copy@@XZ_5.0+0x218>  // b.none
    42b4:	mov	x14, x10
    42b8:	cmp	x11, #0x9
    42bc:	b.eq	4308 <lzma_filters_copy@@XZ_5.0+0x250>  // b.none
    42c0:	ldr	x15, [x14], #24
    42c4:	add	x11, x11, #0x1
    42c8:	cmp	x13, x15
    42cc:	b.ne	42b8 <lzma_filters_copy@@XZ_5.0+0x200>  // b.any
    42d0:	tbz	w12, #0, 4308 <lzma_filters_copy@@XZ_5.0+0x250>
    42d4:	add	x24, x24, #0x1
    42d8:	lsl	x13, x24, #4
    42dc:	ldr	x13, [x22, x13]
    42e0:	subs	x12, x11, #0x2
    42e4:	cinc	x8, x8, cc  // cc = lo, ul, last
    42e8:	cmp	x12, #0x7
    42ec:	cset	w12, cc  // cc = lo, ul, last
    42f0:	add	x15, x27, #0x18
    42f4:	cmn	x13, #0x1
    42f8:	add	x14, x25, #0x1
    42fc:	b.ne	42a0 <lzma_filters_copy@@XZ_5.0+0x1e8>  // b.any
    4300:	cmp	x24, #0x4
    4304:	b.ls	4338 <lzma_filters_copy@@XZ_5.0+0x280>  // b.plast
    4308:	mov	w23, #0x8                   	// #8
    430c:	b	4314 <lzma_filters_copy@@XZ_5.0+0x25c>
    4310:	mov	w23, #0xb                   	// #11
    4314:	mov	w0, w23
    4318:	ldp	x20, x19, [sp, #208]
    431c:	ldp	x22, x21, [sp, #192]
    4320:	ldp	x24, x23, [sp, #176]
    4324:	ldp	x26, x25, [sp, #160]
    4328:	ldr	x27, [sp, #144]
    432c:	ldp	x29, x30, [sp, #128]
    4330:	add	sp, sp, #0xe0
    4334:	ret
    4338:	cmp	x8, #0x3
    433c:	mov	w23, #0x8                   	// #8
    4340:	b.hi	4314 <lzma_filters_copy@@XZ_5.0+0x25c>  // b.pmore
    4344:	cmp	x11, #0x1
    4348:	b.hi	4314 <lzma_filters_copy@@XZ_5.0+0x25c>  // b.pmore
    434c:	tbz	w4, #0, 4390 <lzma_filters_copy@@XZ_5.0+0x2d8>
    4350:	cbz	x24, 43d0 <lzma_filters_copy@@XZ_5.0+0x318>
    4354:	blr	x21
    4358:	cbz	x0, 4308 <lzma_filters_copy@@XZ_5.0+0x250>
    435c:	ldr	x8, [x0, #8]
    4360:	cbz	x8, 4308 <lzma_filters_copy@@XZ_5.0+0x250>
    4364:	ldr	x9, [x22]
    4368:	subs	x25, x25, #0x1
    436c:	stp	x9, x8, [x27, #-16]
    4370:	ldr	x8, [x22, #8]
    4374:	str	x8, [x27]
    4378:	b.eq	43d0 <lzma_filters_copy@@XZ_5.0+0x318>  // b.none
    437c:	ldr	x0, [x22, #16]!
    4380:	sub	x27, x27, #0x18
    4384:	blr	x21
    4388:	cbnz	x0, 435c <lzma_filters_copy@@XZ_5.0+0x2a4>
    438c:	b	4308 <lzma_filters_copy@@XZ_5.0+0x250>
    4390:	cbz	x24, 43d0 <lzma_filters_copy@@XZ_5.0+0x318>
    4394:	blr	x21
    4398:	cbz	x0, 4308 <lzma_filters_copy@@XZ_5.0+0x250>
    439c:	ldr	x8, [x0, #8]
    43a0:	cbz	x8, 4308 <lzma_filters_copy@@XZ_5.0+0x250>
    43a4:	ldr	x9, [x22]
    43a8:	subs	x25, x25, #0x1
    43ac:	stp	x9, x8, [x26, #-16]
    43b0:	ldr	x8, [x22, #8]
    43b4:	str	x8, [x26]
    43b8:	b.eq	43d0 <lzma_filters_copy@@XZ_5.0+0x318>  // b.none
    43bc:	ldr	x0, [x22, #16]!
    43c0:	add	x26, x26, #0x18
    43c4:	blr	x21
    43c8:	cbnz	x0, 439c <lzma_filters_copy@@XZ_5.0+0x2e4>
    43cc:	b	4308 <lzma_filters_copy@@XZ_5.0+0x250>
    43d0:	mov	w8, #0x18                  	// #24
    43d4:	add	x9, sp, #0x8
    43d8:	mov	x10, #0xffffffffffffffff    	// #-1
    43dc:	madd	x8, x24, x8, x9
    43e0:	add	x2, sp, #0x8
    43e4:	mov	x0, x20
    43e8:	mov	x1, x19
    43ec:	stp	x10, xzr, [x8]
    43f0:	bl	3784 <lzma_version_string@@XZ_5.0+0x134>
    43f4:	mov	w23, w0
    43f8:	cbz	w0, 4314 <lzma_filters_copy@@XZ_5.0+0x25c>
    43fc:	mov	x0, x20
    4400:	mov	x1, x19
    4404:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    4408:	b	4314 <lzma_filters_copy@@XZ_5.0+0x25c>
    440c:	stp	x29, x30, [sp, #-48]!
    4410:	str	x21, [sp, #16]
    4414:	stp	x20, x19, [sp, #32]
    4418:	mov	x29, sp
    441c:	cbz	x1, 44b0 <lzma_filters_copy@@XZ_5.0+0x3f8>
    4420:	mov	x19, x0
    4424:	ldr	x0, [x1]
    4428:	cmn	x0, #0x1
    442c:	b.eq	44b0 <lzma_filters_copy@@XZ_5.0+0x3f8>  // b.none
    4430:	mov	x10, #0x1                   	// #1
    4434:	adrp	x11, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    4438:	mov	x8, xzr
    443c:	mov	x9, xzr
    4440:	mov	w13, #0x1                   	// #1
    4444:	movk	x10, #0x4000, lsl #48
    4448:	add	x11, x11, #0x760
    444c:	mov	x14, x0
    4450:	cmp	x14, x10
    4454:	b.ne	4460 <lzma_filters_copy@@XZ_5.0+0x3a8>  // b.any
    4458:	mov	x12, xzr
    445c:	b	4480 <lzma_filters_copy@@XZ_5.0+0x3c8>
    4460:	mov	x12, xzr
    4464:	mov	x15, x11
    4468:	cmp	x12, #0x9
    446c:	b.eq	44b0 <lzma_filters_copy@@XZ_5.0+0x3f8>  // b.none
    4470:	ldr	x16, [x15], #24
    4474:	add	x12, x12, #0x1
    4478:	cmp	x14, x16
    447c:	b.ne	4468 <lzma_filters_copy@@XZ_5.0+0x3b0>  // b.any
    4480:	tbz	w13, #0, 44b0 <lzma_filters_copy@@XZ_5.0+0x3f8>
    4484:	add	x9, x9, #0x1
    4488:	lsl	x14, x9, #4
    448c:	ldr	x14, [x1, x14]
    4490:	subs	x13, x12, #0x2
    4494:	cinc	x8, x8, cc  // cc = lo, ul, last
    4498:	cmp	x13, #0x7
    449c:	cset	w13, cc  // cc = lo, ul, last
    44a0:	cmn	x14, #0x1
    44a4:	b.ne	4450 <lzma_filters_copy@@XZ_5.0+0x398>  // b.any
    44a8:	cmp	x9, #0x4
    44ac:	b.ls	44c8 <lzma_filters_copy@@XZ_5.0+0x410>  // b.plast
    44b0:	mov	x8, #0xffffffffffffffff    	// #-1
    44b4:	ldp	x20, x19, [sp, #32]
    44b8:	ldr	x21, [sp, #16]
    44bc:	mov	x0, x8
    44c0:	ldp	x29, x30, [sp], #48
    44c4:	ret
    44c8:	cmp	x8, #0x3
    44cc:	mov	x8, #0xffffffffffffffff    	// #-1
    44d0:	b.hi	44b4 <lzma_filters_copy@@XZ_5.0+0x3fc>  // b.pmore
    44d4:	cmp	x12, #0x1
    44d8:	b.hi	44b4 <lzma_filters_copy@@XZ_5.0+0x3fc>  // b.pmore
    44dc:	mov	x20, xzr
    44e0:	add	x21, x1, #0x10
    44e4:	b	44f8 <lzma_filters_copy@@XZ_5.0+0x440>
    44e8:	add	x20, x20, #0x400
    44ec:	ldr	x0, [x21], #16
    44f0:	cmn	x0, #0x1
    44f4:	b.eq	4524 <lzma_filters_copy@@XZ_5.0+0x46c>  // b.none
    44f8:	blr	x19
    44fc:	cbz	x0, 44b0 <lzma_filters_copy@@XZ_5.0+0x3f8>
    4500:	ldr	x8, [x0, #16]
    4504:	cbz	x8, 44e8 <lzma_filters_copy@@XZ_5.0+0x430>
    4508:	ldur	x0, [x21, #-8]
    450c:	blr	x8
    4510:	cmn	x0, #0x1
    4514:	csel	x8, xzr, x0, eq  // eq = none
    4518:	b.eq	44b0 <lzma_filters_copy@@XZ_5.0+0x3f8>  // b.none
    451c:	add	x20, x8, x20
    4520:	b	44ec <lzma_filters_copy@@XZ_5.0+0x434>
    4524:	add	x8, x20, #0x8, lsl #12
    4528:	b	44b4 <lzma_filters_copy@@XZ_5.0+0x3fc>

000000000000452c <lzma_physmem@@XZ_5.0>:
    452c:	b	35c4 <pthread_cond_timedwait@plt+0xe4>

0000000000004530 <lzma_index_init@@XZ_5.0>:
    4530:	stp	x29, x30, [sp, #-32]!
    4534:	stp	x20, x19, [sp, #16]
    4538:	mov	x20, x0
    453c:	mov	w0, #0x50                  	// #80
    4540:	mov	x1, x20
    4544:	mov	x29, sp
    4548:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    454c:	mov	x19, x0
    4550:	cbz	x0, 4654 <lzma_index_init@@XZ_5.0+0x124>
    4554:	movi	v0.2d, #0x0
    4558:	mov	w8, #0x200                 	// #512
    455c:	mov	w0, #0xa8                  	// #168
    4560:	mov	x1, x20
    4564:	stp	xzr, xzr, [x19]
    4568:	str	wzr, [x19, #24]
    456c:	str	xzr, [x19, #16]
    4570:	stp	q0, q0, [x19, #32]
    4574:	str	x8, [x19, #64]
    4578:	str	wzr, [x19, #72]
    457c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    4580:	cbz	x0, 4638 <lzma_index_init@@XZ_5.0+0x108>
    4584:	ldr	w11, [x19, #24]
    4588:	ldr	x8, [x19, #16]
    458c:	ldr	x12, [x19]
    4590:	mov	w10, #0xffffffff            	// #-1
    4594:	mov	w9, #0x1                   	// #1
    4598:	movi	v0.2d, #0x0
    459c:	str	w10, [x0, #104]
    45a0:	add	w10, w11, #0x1
    45a4:	stp	xzr, xzr, [x0]
    45a8:	stp	xzr, xzr, [x0, #88]
    45ac:	stp	q0, q0, [x0, #48]
    45b0:	str	wzr, [x0, #80]
    45b4:	str	xzr, [x0, #160]
    45b8:	stp	xzr, xzr, [x0, #24]
    45bc:	str	w9, [x0, #40]
    45c0:	str	x8, [x0, #16]
    45c4:	str	w10, [x19, #24]
    45c8:	cbz	x12, 464c <lzma_index_init@@XZ_5.0+0x11c>
    45cc:	clz	w11, w10
    45d0:	eor	w11, w11, #0x1f
    45d4:	lsl	w9, w9, w11
    45d8:	cmp	w10, w9
    45dc:	str	x0, [x8, #32]
    45e0:	str	x0, [x19, #16]
    45e4:	b.eq	4654 <lzma_index_init@@XZ_5.0+0x124>  // b.none
    45e8:	rbit	w9, w10
    45ec:	clz	w9, w9
    45f0:	add	w9, w9, #0x1
    45f4:	ldr	x8, [x8, #16]
    45f8:	subs	w9, w9, #0x1
    45fc:	b.ne	45f4 <lzma_index_init@@XZ_5.0+0xc4>  // b.any
    4600:	ldr	x11, [x8, #16]
    4604:	ldr	x9, [x8, #32]
    4608:	add	x10, x11, #0x20
    460c:	cmp	x11, #0x0
    4610:	csel	x10, x19, x10, eq  // eq = none
    4614:	str	x9, [x10]
    4618:	ldr	x10, [x9, #24]
    461c:	str	x11, [x9, #16]
    4620:	str	x10, [x8, #32]
    4624:	cbz	x10, 462c <lzma_index_init@@XZ_5.0+0xfc>
    4628:	str	x8, [x10, #16]
    462c:	str	x8, [x9, #24]
    4630:	str	x9, [x8, #16]
    4634:	b	4654 <lzma_index_init@@XZ_5.0+0x124>
    4638:	mov	x0, x19
    463c:	mov	x1, x20
    4640:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    4644:	mov	x19, xzr
    4648:	b	4654 <lzma_index_init@@XZ_5.0+0x124>
    464c:	stp	x0, x0, [x19]
    4650:	str	x0, [x19, #16]
    4654:	mov	x0, x19
    4658:	ldp	x20, x19, [sp, #16]
    465c:	ldp	x29, x30, [sp], #32
    4660:	ret

0000000000004664 <lzma_index_end@@XZ_5.0>:
    4664:	cbz	x0, 46a8 <lzma_index_end@@XZ_5.0+0x44>
    4668:	stp	x29, x30, [sp, #-32]!
    466c:	stp	x20, x19, [sp, #16]
    4670:	mov	x20, x0
    4674:	ldr	x0, [x0]
    4678:	mov	x19, x1
    467c:	mov	x29, sp
    4680:	cbz	x0, 4694 <lzma_index_end@@XZ_5.0+0x30>
    4684:	adrp	x2, 4000 <lzma_block_total_size@@XZ_5.0+0x3c>
    4688:	add	x2, x2, #0x6ac
    468c:	mov	x1, x19
    4690:	bl	590c <lzma_index_iter_locate@@XZ_5.0+0xe0>
    4694:	mov	x0, x20
    4698:	mov	x1, x19
    469c:	ldp	x20, x19, [sp, #16]
    46a0:	ldp	x29, x30, [sp], #32
    46a4:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    46a8:	ret
    46ac:	stp	x29, x30, [sp, #-32]!
    46b0:	stp	x20, x19, [sp, #16]
    46b4:	mov	x19, x0
    46b8:	ldr	x0, [x0, #56]
    46bc:	mov	x20, x1
    46c0:	mov	x29, sp
    46c4:	cbz	x0, 46d8 <lzma_index_end@@XZ_5.0+0x74>
    46c8:	adrp	x2, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    46cc:	ldr	x2, [x2, #3992]
    46d0:	mov	x1, x20
    46d4:	bl	590c <lzma_index_iter_locate@@XZ_5.0+0xe0>
    46d8:	mov	x0, x19
    46dc:	mov	x1, x20
    46e0:	ldp	x20, x19, [sp, #16]
    46e4:	ldp	x29, x30, [sp], #32
    46e8:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    46ec:	mov	x8, #0xfffffffffffffffb    	// #-5
    46f0:	movk	x8, #0xfff, lsl #48
    46f4:	cmp	x1, x8
    46f8:	csel	x8, x1, x8, cc  // cc = lo, ul, last
    46fc:	str	x8, [x0, #64]
    4700:	ret

0000000000004704 <lzma_index_memusage@@XZ_5.0>:
    4704:	add	x8, x1, #0x1ff
    4708:	mov	w9, #0x128                 	// #296
    470c:	mov	w10, #0x2060                	// #8288
    4710:	lsr	x12, x8, #9
    4714:	mul	x9, x0, x9
    4718:	mul	x10, x12, x10
    471c:	mov	x12, #0xffffffffffffff8f    	// #-113
    4720:	sub	x12, x12, x9
    4724:	cmp	x12, x10
    4728:	mov	x12, #0x9ff                 	// #2559
    472c:	movk	x12, #0xfd, lsl #16
    4730:	movk	x12, #0x8e55, lsl #32
    4734:	movk	x12, #0xfd0, lsl #48
    4738:	ccmp	x8, x12, #0x2, cs  // cs = hs, nlast
    473c:	sub	x11, x0, #0x1
    4740:	add	x9, x9, x10
    4744:	mov	w10, #0xfffffffe            	// #-2
    4748:	ccmp	x1, #0x0, #0x8, ls  // ls = plast
    474c:	ccmp	x11, x10, #0x2, ge  // ge = tcont
    4750:	add	x8, x9, #0x70
    4754:	csinv	x0, x8, xzr, ls  // ls = plast
    4758:	ret

000000000000475c <lzma_index_memused@@XZ_5.0>:
    475c:	ldr	x8, [x0, #48]
    4760:	ldr	w9, [x0, #24]
    4764:	mov	w10, #0x128                 	// #296
    4768:	mov	w11, #0x2060                	// #8288
    476c:	add	x12, x8, #0x1ff
    4770:	lsr	x13, x12, #9
    4774:	mul	x11, x13, x11
    4778:	mov	x13, #0xffffffffffffff8f    	// #-113
    477c:	mul	x10, x9, x10
    4780:	sub	x13, x13, x10
    4784:	cmp	x13, x11
    4788:	add	x10, x10, x11
    478c:	mov	x11, #0x9ff                 	// #2559
    4790:	mov	w13, #0xfffffffe            	// #-2
    4794:	movk	x11, #0xfd, lsl #16
    4798:	sub	x9, x9, #0x1
    479c:	movk	x11, #0x8e55, lsl #32
    47a0:	ccmp	x9, x13, #0x2, cs  // cs = hs, nlast
    47a4:	movk	x11, #0xfd0, lsl #48
    47a8:	ccmp	x8, #0x0, #0x8, ls  // ls = plast
    47ac:	ccmp	x12, x11, #0x2, ge  // ge = tcont
    47b0:	add	x8, x10, #0x70
    47b4:	csinv	x0, x8, xzr, ls  // ls = plast
    47b8:	ret

00000000000047bc <lzma_index_block_count@@XZ_5.0>:
    47bc:	ldr	x0, [x0, #48]
    47c0:	ret

00000000000047c4 <lzma_index_stream_count@@XZ_5.0>:
    47c4:	ldr	w0, [x0, #24]
    47c8:	ret

00000000000047cc <lzma_index_size@@XZ_5.0>:
    47cc:	stp	x29, x30, [sp, #-32]!
    47d0:	str	x19, [sp, #16]
    47d4:	ldp	x8, x19, [x0, #48]
    47d8:	mov	x29, sp
    47dc:	mov	x0, x8
    47e0:	bl	3400 <lzma_vli_size@plt>
    47e4:	add	w8, w0, #0x1
    47e8:	add	x8, x19, x8
    47ec:	ldr	x19, [sp, #16]
    47f0:	add	x8, x8, #0x7
    47f4:	and	x0, x8, #0xfffffffffffffffc
    47f8:	ldp	x29, x30, [sp], #32
    47fc:	ret

0000000000004800 <lzma_index_total_size@@XZ_5.0>:
    4800:	ldr	x0, [x0, #40]
    4804:	ret

0000000000004808 <lzma_index_stream_size@@XZ_5.0>:
    4808:	stp	x29, x30, [sp, #-32]!
    480c:	stp	x20, x19, [sp, #16]
    4810:	ldp	x19, x8, [x0, #40]
    4814:	ldr	x20, [x0, #56]
    4818:	mov	x29, sp
    481c:	mov	x0, x8
    4820:	bl	3400 <lzma_vli_size@plt>
    4824:	add	w8, w0, #0x1
    4828:	add	x8, x20, x8
    482c:	add	x8, x8, #0x7
    4830:	and	x8, x8, #0xfffffffffffffffc
    4834:	add	x8, x19, x8
    4838:	ldp	x20, x19, [sp, #16]
    483c:	add	x0, x8, #0x18
    4840:	ldp	x29, x30, [sp], #32
    4844:	ret

0000000000004848 <lzma_index_file_size@@XZ_5.0>:
    4848:	stp	x29, x30, [sp, #-32]!
    484c:	stp	x20, x19, [sp, #16]
    4850:	ldr	x8, [x0, #16]
    4854:	mov	x29, sp
    4858:	ldr	x10, [x8, #72]
    485c:	ldr	x9, [x8, #8]
    4860:	cbz	x10, 4878 <lzma_index_file_size@@XZ_5.0+0x30>
    4864:	ldr	x11, [x10, #56]
    4868:	add	x10, x10, x11, lsl #4
    486c:	ldr	x10, [x10, #72]
    4870:	add	x10, x10, #0x3
    4874:	and	x10, x10, #0xfffffffffffffffc
    4878:	ldr	x11, [x8, #160]
    487c:	add	x9, x9, x10
    4880:	add	x9, x9, x11
    4884:	adds	x19, x9, #0x18
    4888:	b.mi	48b4 <lzma_index_file_size@@XZ_5.0+0x6c>  // b.first
    488c:	ldp	x0, x20, [x8, #88]
    4890:	bl	3400 <lzma_vli_size@plt>
    4894:	add	w8, w0, #0x1
    4898:	add	x8, x20, x8
    489c:	add	x8, x8, #0x7
    48a0:	and	x8, x8, #0xfffffffffffffffc
    48a4:	add	x8, x8, x19
    48a8:	cmp	x8, #0x0
    48ac:	csinv	x0, x8, xzr, ge  // ge = tcont
    48b0:	b	48b8 <lzma_index_file_size@@XZ_5.0+0x70>
    48b4:	mov	x0, #0xffffffffffffffff    	// #-1
    48b8:	ldp	x20, x19, [sp, #16]
    48bc:	ldp	x29, x30, [sp], #32
    48c0:	ret

00000000000048c4 <lzma_index_uncompressed_size@@XZ_5.0>:
    48c4:	ldr	x0, [x0, #32]
    48c8:	ret

00000000000048cc <lzma_index_checks@@XZ_5.0>:
    48cc:	ldr	x8, [x0, #16]
    48d0:	ldr	w0, [x0, #72]
    48d4:	ldr	w9, [x8, #104]
    48d8:	cmn	w9, #0x1
    48dc:	b.eq	48f0 <lzma_index_checks@@XZ_5.0+0x24>  // b.none
    48e0:	ldr	w8, [x8, #120]
    48e4:	mov	w9, #0x1                   	// #1
    48e8:	lsl	w8, w9, w8
    48ec:	orr	w0, w8, w0
    48f0:	ret
    48f4:	stp	x29, x30, [sp, #-32]!
    48f8:	ldr	x8, [x0, #48]
    48fc:	str	x19, [sp, #16]
    4900:	ldr	w19, [x0, #56]
    4904:	mov	x29, sp
    4908:	mov	x0, x8
    490c:	bl	3400 <lzma_vli_size@plt>
    4910:	add	w8, w19, w0
    4914:	ldr	x19, [sp, #16]
    4918:	mov	w9, #0x3                   	// #3
    491c:	sub	w8, w9, w8
    4920:	and	w0, w8, #0x3
    4924:	ldp	x29, x30, [sp], #32
    4928:	ret

000000000000492c <lzma_index_stream_flags@@XZ_5.0>:
    492c:	stp	x29, x30, [sp, #-32]!
    4930:	stp	x20, x19, [sp, #16]
    4934:	mov	x20, x0
    4938:	mov	w0, #0xb                   	// #11
    493c:	mov	x29, sp
    4940:	cbz	x20, 497c <lzma_index_stream_flags@@XZ_5.0+0x50>
    4944:	mov	x19, x1
    4948:	cbz	x1, 497c <lzma_index_stream_flags@@XZ_5.0+0x50>
    494c:	mov	x0, x19
    4950:	mov	x1, x19
    4954:	bl	30b0 <lzma_stream_flags_compare@plt>
    4958:	cbnz	w0, 497c <lzma_index_stream_flags@@XZ_5.0+0x50>
    495c:	ldr	x8, [x20, #16]
    4960:	ldr	x9, [x19, #48]
    4964:	ldp	q1, q0, [x19, #16]
    4968:	ldr	q2, [x19]
    496c:	str	x9, [x8, #152]
    4970:	stur	q0, [x8, #136]
    4974:	stur	q1, [x8, #120]
    4978:	stur	q2, [x8, #104]
    497c:	ldp	x20, x19, [sp, #16]
    4980:	ldp	x29, x30, [sp], #32
    4984:	ret

0000000000004988 <lzma_index_stream_padding@@XZ_5.0>:
    4988:	stp	x29, x30, [sp, #-64]!
    498c:	mov	x8, x0
    4990:	mov	w0, #0xb                   	// #11
    4994:	str	x23, [sp, #16]
    4998:	stp	x22, x21, [sp, #32]
    499c:	stp	x20, x19, [sp, #48]
    49a0:	mov	x29, sp
    49a4:	cbz	x8, 4a34 <lzma_index_stream_padding@@XZ_5.0+0xac>
    49a8:	mov	x19, x1
    49ac:	and	x9, x1, #0x8000000000000003
    49b0:	cbnz	x9, 4a34 <lzma_index_stream_padding@@XZ_5.0+0xac>
    49b4:	ldr	x20, [x8, #16]
    49b8:	ldr	x21, [x20, #160]
    49bc:	ldr	x9, [x20, #72]
    49c0:	ldr	x8, [x20, #8]
    49c4:	str	xzr, [x20, #160]
    49c8:	cbz	x9, 49e0 <lzma_index_stream_padding@@XZ_5.0+0x58>
    49cc:	ldr	x10, [x9, #56]
    49d0:	add	x9, x9, x10, lsl #4
    49d4:	ldr	x9, [x9, #72]
    49d8:	add	x9, x9, #0x3
    49dc:	and	x9, x9, #0xfffffffffffffffc
    49e0:	add	x8, x8, x9
    49e4:	adds	x22, x8, #0x18
    49e8:	b.mi	4a14 <lzma_index_stream_padding@@XZ_5.0+0x8c>  // b.first
    49ec:	ldp	x0, x23, [x20, #88]
    49f0:	bl	3400 <lzma_vli_size@plt>
    49f4:	add	w8, w0, #0x1
    49f8:	add	x8, x23, x8
    49fc:	add	x8, x8, #0x7
    4a00:	and	x8, x8, #0xfffffffffffffffc
    4a04:	add	x8, x8, x22
    4a08:	cmp	x8, #0x0
    4a0c:	csinv	x8, x8, xzr, ge  // ge = tcont
    4a10:	b	4a18 <lzma_index_stream_padding@@XZ_5.0+0x90>
    4a14:	mov	x8, #0xffffffffffffffff    	// #-1
    4a18:	add	x8, x8, x19
    4a1c:	mov	w9, #0x9                   	// #9
    4a20:	cmp	x8, #0x0
    4a24:	asr	x8, x8, #63
    4a28:	csel	x10, x21, x19, lt  // lt = tstop
    4a2c:	and	w0, w8, w9
    4a30:	str	x10, [x20, #160]
    4a34:	ldp	x20, x19, [sp, #48]
    4a38:	ldp	x22, x21, [sp, #32]
    4a3c:	ldr	x23, [sp, #16]
    4a40:	ldp	x29, x30, [sp], #64
    4a44:	ret

0000000000004a48 <lzma_index_append@@XZ_5.0>:
    4a48:	sub	sp, sp, #0x80
    4a4c:	stp	x20, x19, [sp, #112]
    4a50:	mov	x19, x0
    4a54:	mov	w0, #0xb                   	// #11
    4a58:	stp	x29, x30, [sp, #32]
    4a5c:	stp	x28, x27, [sp, #48]
    4a60:	stp	x26, x25, [sp, #64]
    4a64:	stp	x24, x23, [sp, #80]
    4a68:	stp	x22, x21, [sp, #96]
    4a6c:	add	x29, sp, #0x20
    4a70:	tbnz	x3, #63, 4b5c <lzma_index_append@@XZ_5.0+0x114>
    4a74:	cbz	x19, 4b5c <lzma_index_append@@XZ_5.0+0x114>
    4a78:	mov	x9, #0xfffffffffffffff7    	// #-9
    4a7c:	sub	x8, x2, #0x5
    4a80:	movk	x9, #0x7fff, lsl #48
    4a84:	mov	x21, x2
    4a88:	cmp	x8, x9
    4a8c:	b.hi	4b5c <lzma_index_append@@XZ_5.0+0x114>  // b.pmore
    4a90:	ldr	x25, [x19, #16]
    4a94:	mov	x20, x3
    4a98:	mov	x23, x1
    4a9c:	ldr	x22, [x25, #72]
    4aa0:	cbz	x22, 4abc <lzma_index_append@@XZ_5.0+0x74>
    4aa4:	ldr	x8, [x22, #56]
    4aa8:	add	x8, x22, x8, lsl #4
    4aac:	ldp	x27, x9, [x8, #64]
    4ab0:	add	x8, x9, #0x3
    4ab4:	and	x28, x8, #0xfffffffffffffffc
    4ab8:	b	4ac4 <lzma_index_append@@XZ_5.0+0x7c>
    4abc:	mov	x28, xzr
    4ac0:	mov	x27, xzr
    4ac4:	mov	x0, x21
    4ac8:	bl	3400 <lzma_vli_size@plt>
    4acc:	mov	w24, w0
    4ad0:	mov	x0, x20
    4ad4:	bl	3400 <lzma_vli_size@plt>
    4ad8:	ldr	x8, [x25, #8]
    4adc:	add	x11, x28, x21
    4ae0:	ldr	x9, [x25, #160]
    4ae4:	add	x10, x11, #0x1b
    4ae8:	and	x10, x10, #0xfffffffffffffffc
    4aec:	add	x8, x10, x8
    4af0:	adds	x26, x8, x9
    4af4:	b.mi	4b58 <lzma_index_append@@XZ_5.0+0x110>  // b.first
    4af8:	str	x11, [sp, #8]
    4afc:	stur	x27, [x29, #-8]
    4b00:	ldp	x8, x27, [x25, #88]
    4b04:	add	w24, w0, w24
    4b08:	add	x0, x8, #0x1
    4b0c:	bl	3400 <lzma_vli_size@plt>
    4b10:	str	x24, [sp, #16]
    4b14:	add	x24, x24, #0x7
    4b18:	add	w8, w0, #0x1
    4b1c:	add	x9, x24, x27
    4b20:	add	x8, x9, x8
    4b24:	and	x8, x8, #0xfffffffffffffffc
    4b28:	cmn	x8, x26
    4b2c:	b.mi	4b58 <lzma_index_append@@XZ_5.0+0x110>  // b.first
    4b30:	ldp	x8, x26, [x19, #48]
    4b34:	add	x0, x8, #0x1
    4b38:	bl	3400 <lzma_vli_size@plt>
    4b3c:	add	w8, w0, #0x1
    4b40:	add	x9, x24, x26
    4b44:	add	x8, x9, x8
    4b48:	and	x8, x8, #0xfffffffffffffffc
    4b4c:	mov	x9, #0x400000000           	// #17179869184
    4b50:	cmp	x8, x9
    4b54:	b.ls	4b7c <lzma_index_append@@XZ_5.0+0x134>  // b.plast
    4b58:	mov	w0, #0x9                   	// #9
    4b5c:	ldp	x20, x19, [sp, #112]
    4b60:	ldp	x22, x21, [sp, #96]
    4b64:	ldp	x24, x23, [sp, #80]
    4b68:	ldp	x26, x25, [sp, #64]
    4b6c:	ldp	x28, x27, [sp, #48]
    4b70:	ldp	x29, x30, [sp, #32]
    4b74:	add	sp, sp, #0x80
    4b78:	ret
    4b7c:	cbz	x22, 4ba0 <lzma_index_append@@XZ_5.0+0x158>
    4b80:	ldp	x9, x8, [x22, #48]
    4b84:	add	x8, x8, #0x1
    4b88:	cmp	x8, x9
    4b8c:	b.cs	4ba0 <lzma_index_append@@XZ_5.0+0x158>  // b.hs, b.nlast
    4b90:	str	x8, [x22, #56]
    4b94:	ldur	x13, [x29, #-8]
    4b98:	ldp	x15, x14, [sp, #8]
    4b9c:	b	4c88 <lzma_index_append@@XZ_5.0+0x240>
    4ba0:	ldr	x8, [x19, #64]
    4ba4:	mov	x1, x23
    4ba8:	lsl	x8, x8, #4
    4bac:	add	x0, x8, #0x40
    4bb0:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    4bb4:	cbz	x0, 4c78 <lzma_index_append@@XZ_5.0+0x230>
    4bb8:	ldr	x8, [x19, #64]
    4bbc:	ldur	x13, [x29, #-8]
    4bc0:	mov	w9, #0x200                 	// #512
    4bc4:	mov	x22, x0
    4bc8:	stp	x8, xzr, [x0, #48]
    4bcc:	str	x9, [x19, #64]
    4bd0:	stp	x13, x28, [x0]
    4bd4:	ldr	x8, [x25, #88]
    4bd8:	add	x8, x8, #0x1
    4bdc:	str	x8, [x0, #40]
    4be0:	ldr	x8, [x25, #72]
    4be4:	stp	xzr, xzr, [x0, #24]
    4be8:	str	x8, [x0, #16]
    4bec:	ldr	w9, [x25, #80]
    4bf0:	ldr	x11, [x25, #56]
    4bf4:	add	w10, w9, #0x1
    4bf8:	str	w10, [x25, #80]
    4bfc:	ldp	x15, x14, [sp, #8]
    4c00:	cbz	x11, 4c80 <lzma_index_append@@XZ_5.0+0x238>
    4c04:	clz	w9, w10
    4c08:	eor	w9, w9, #0x1f
    4c0c:	mov	w11, #0x1                   	// #1
    4c10:	lsl	w9, w11, w9
    4c14:	cmp	w10, w9
    4c18:	str	x22, [x8, #32]
    4c1c:	str	x22, [x25, #72]
    4c20:	b.eq	4c88 <lzma_index_append@@XZ_5.0+0x240>  // b.none
    4c24:	rbit	w10, w10
    4c28:	clz	w10, w10
    4c2c:	add	x9, x25, #0x38
    4c30:	add	w10, w10, #0x1
    4c34:	ldr	x8, [x8, #16]
    4c38:	subs	w10, w10, #0x1
    4c3c:	b.ne	4c34 <lzma_index_append@@XZ_5.0+0x1ec>  // b.any
    4c40:	ldr	x11, [x8, #16]
    4c44:	ldr	x10, [x8, #32]
    4c48:	add	x12, x11, #0x20
    4c4c:	cmp	x11, #0x0
    4c50:	csel	x9, x9, x12, eq  // eq = none
    4c54:	str	x10, [x9]
    4c58:	ldr	x9, [x10, #24]
    4c5c:	str	x11, [x10, #16]
    4c60:	str	x9, [x8, #32]
    4c64:	cbz	x9, 4c6c <lzma_index_append@@XZ_5.0+0x224>
    4c68:	str	x8, [x9, #16]
    4c6c:	str	x8, [x10, #24]
    4c70:	str	x10, [x8, #16]
    4c74:	b	4c88 <lzma_index_append@@XZ_5.0+0x240>
    4c78:	mov	w0, #0x5                   	// #5
    4c7c:	b	4b5c <lzma_index_append@@XZ_5.0+0x114>
    4c80:	stp	x22, x22, [x25, #56]
    4c84:	str	x22, [x25, #72]
    4c88:	ldr	x8, [x22, #56]
    4c8c:	add	x9, x13, x20
    4c90:	add	x10, x21, #0x3
    4c94:	and	x10, x10, #0xfffffffffffffffc
    4c98:	add	x8, x22, x8, lsl #4
    4c9c:	stp	x9, x15, [x8, #64]
    4ca0:	ldp	x8, x9, [x25, #88]
    4ca4:	mov	w0, wzr
    4ca8:	add	x8, x8, #0x1
    4cac:	add	x9, x9, x14
    4cb0:	stp	x8, x9, [x25, #88]
    4cb4:	ldp	x9, x8, [x19, #32]
    4cb8:	ldp	x11, x12, [x19, #48]
    4cbc:	add	x8, x8, x10
    4cc0:	add	x9, x9, x20
    4cc4:	add	x10, x11, #0x1
    4cc8:	add	x11, x12, x14
    4ccc:	stp	x9, x8, [x19, #32]
    4cd0:	stp	x10, x11, [x19, #48]
    4cd4:	b	4b5c <lzma_index_append@@XZ_5.0+0x114>

0000000000004cd8 <lzma_index_cat@@XZ_5.0>:
    4cd8:	sub	sp, sp, #0x90
    4cdc:	stp	x24, x23, [sp, #96]
    4ce0:	ldr	x24, [x0, #16]
    4ce4:	stp	x29, x30, [sp, #48]
    4ce8:	stp	x28, x27, [sp, #64]
    4cec:	stp	x26, x25, [sp, #80]
    4cf0:	stp	x22, x21, [sp, #112]
    4cf4:	stp	x20, x19, [sp, #128]
    4cf8:	ldr	x22, [x24, #72]
    4cfc:	ldr	x8, [x24, #8]
    4d00:	mov	x19, x2
    4d04:	mov	x20, x0
    4d08:	mov	x21, x1
    4d0c:	add	x29, sp, #0x30
    4d10:	cbz	x22, 4d2c <lzma_index_cat@@XZ_5.0+0x54>
    4d14:	ldr	x9, [x22, #56]
    4d18:	add	x9, x22, x9, lsl #4
    4d1c:	ldr	x9, [x9, #72]
    4d20:	add	x9, x9, #0x3
    4d24:	and	x9, x9, #0xfffffffffffffffc
    4d28:	b	4d30 <lzma_index_cat@@XZ_5.0+0x58>
    4d2c:	mov	x9, xzr
    4d30:	ldr	x10, [x24, #160]
    4d34:	add	x8, x8, x9
    4d38:	add	x8, x8, x10
    4d3c:	adds	x23, x8, #0x18
    4d40:	b.mi	4d6c <lzma_index_cat@@XZ_5.0+0x94>  // b.first
    4d44:	ldp	x0, x25, [x24, #88]
    4d48:	bl	3400 <lzma_vli_size@plt>
    4d4c:	add	w8, w0, #0x1
    4d50:	add	x8, x25, x8
    4d54:	add	x8, x8, #0x7
    4d58:	and	x8, x8, #0xfffffffffffffffc
    4d5c:	add	x8, x8, x23
    4d60:	cmp	x8, #0x0
    4d64:	csinv	x25, x8, xzr, ge  // ge = tcont
    4d68:	b	4d70 <lzma_index_cat@@XZ_5.0+0x98>
    4d6c:	mov	x25, #0xffffffffffffffff    	// #-1
    4d70:	ldr	x8, [x21, #16]
    4d74:	ldr	x10, [x8, #72]
    4d78:	ldr	x9, [x8, #8]
    4d7c:	cbz	x10, 4d94 <lzma_index_cat@@XZ_5.0+0xbc>
    4d80:	ldr	x11, [x10, #56]
    4d84:	add	x10, x10, x11, lsl #4
    4d88:	ldr	x10, [x10, #72]
    4d8c:	add	x10, x10, #0x3
    4d90:	and	x10, x10, #0xfffffffffffffffc
    4d94:	ldr	x11, [x8, #160]
    4d98:	add	x9, x9, x10
    4d9c:	add	x9, x9, x11
    4da0:	adds	x23, x9, #0x18
    4da4:	b.mi	4dd8 <lzma_index_cat@@XZ_5.0+0x100>  // b.first
    4da8:	ldp	x0, x26, [x8, #88]
    4dac:	bl	3400 <lzma_vli_size@plt>
    4db0:	add	w8, w0, #0x1
    4db4:	add	x8, x26, x8
    4db8:	add	x8, x8, #0x7
    4dbc:	and	x8, x8, #0xfffffffffffffffc
    4dc0:	add	x8, x8, x23
    4dc4:	cmp	x8, #0x0
    4dc8:	csinv	x8, x8, xzr, ge  // ge = tcont
    4dcc:	cmn	x8, x25
    4dd0:	b.pl	4de4 <lzma_index_cat@@XZ_5.0+0x10c>  // b.nfrst
    4dd4:	b	4ee8 <lzma_index_cat@@XZ_5.0+0x210>
    4dd8:	mov	x8, #0xffffffffffffffff    	// #-1
    4ddc:	cmn	x8, x25
    4de0:	b.mi	4ee8 <lzma_index_cat@@XZ_5.0+0x210>  // b.first
    4de4:	ldr	x26, [x20, #32]
    4de8:	ldr	x8, [x21, #32]
    4dec:	cmn	x8, x26
    4df0:	b.mi	4ee8 <lzma_index_cat@@XZ_5.0+0x210>  // b.first
    4df4:	ldp	x23, x27, [x20, #48]
    4df8:	str	x19, [sp]
    4dfc:	mov	x0, x23
    4e00:	bl	3400 <lzma_vli_size@plt>
    4e04:	ldp	x8, x28, [x21, #48]
    4e08:	add	w19, w0, #0x1
    4e0c:	mov	x0, x8
    4e10:	bl	3400 <lzma_vli_size@plt>
    4e14:	add	x9, x27, x19
    4e18:	add	w8, w0, #0x1
    4e1c:	add	x9, x9, x28
    4e20:	add	x8, x9, x8
    4e24:	add	x8, x8, #0xb
    4e28:	and	x8, x8, #0xfffffffffffffffc
    4e2c:	mov	x9, #0x400000000           	// #17179869184
    4e30:	cmp	x8, x9
    4e34:	b.hi	4ee8 <lzma_index_cat@@XZ_5.0+0x210>  // b.pmore
    4e38:	cbz	x22, 4f0c <lzma_index_cat@@XZ_5.0+0x234>
    4e3c:	ldp	x9, x8, [x22, #48]
    4e40:	ldr	x19, [sp]
    4e44:	add	x8, x8, #0x1
    4e48:	cmp	x8, x9
    4e4c:	b.cs	4f10 <lzma_index_cat@@XZ_5.0+0x238>  // b.hs, b.nlast
    4e50:	lsl	x8, x8, #4
    4e54:	add	x0, x8, #0x40
    4e58:	mov	x1, x19
    4e5c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    4e60:	cbz	x0, 4f88 <lzma_index_cat@@XZ_5.0+0x2b0>
    4e64:	ldr	x8, [x22, #32]
    4e68:	ldp	q1, q0, [x22]
    4e6c:	mov	x23, x0
    4e70:	add	x1, x22, #0x40
    4e74:	str	x8, [x0, #32]
    4e78:	stp	q1, q0, [x0]
    4e7c:	ldr	x8, [x22, #56]
    4e80:	add	x8, x8, #0x1
    4e84:	str	x8, [x0, #48]
    4e88:	ldr	x9, [x22, #56]
    4e8c:	lsl	x2, x8, #4
    4e90:	str	x9, [x0, #56]
    4e94:	ldr	x9, [x22, #40]
    4e98:	add	x0, x0, #0x40
    4e9c:	str	x9, [x23, #40]
    4ea0:	bl	3040 <memcpy@plt>
    4ea4:	ldr	x8, [x22, #16]
    4ea8:	cbz	x8, 4eb0 <lzma_index_cat@@XZ_5.0+0x1d8>
    4eac:	str	x23, [x8, #32]
    4eb0:	ldr	x8, [x24, #64]
    4eb4:	cmp	x8, x22
    4eb8:	b.ne	4ec0 <lzma_index_cat@@XZ_5.0+0x1e8>  // b.any
    4ebc:	stp	x23, x23, [x24, #56]
    4ec0:	ldr	x8, [x24, #72]
    4ec4:	cmp	x8, x22
    4ec8:	b.ne	4ed0 <lzma_index_cat@@XZ_5.0+0x1f8>  // b.any
    4ecc:	str	x23, [x24, #72]
    4ed0:	mov	x0, x22
    4ed4:	mov	x1, x19
    4ed8:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    4edc:	ldr	x26, [x20, #32]
    4ee0:	ldr	x23, [x20, #48]
    4ee4:	b	4f10 <lzma_index_cat@@XZ_5.0+0x238>
    4ee8:	mov	w0, #0x9                   	// #9
    4eec:	ldp	x20, x19, [sp, #128]
    4ef0:	ldp	x22, x21, [sp, #112]
    4ef4:	ldp	x24, x23, [sp, #96]
    4ef8:	ldp	x26, x25, [sp, #80]
    4efc:	ldp	x28, x27, [sp, #64]
    4f00:	ldp	x29, x30, [sp, #48]
    4f04:	add	sp, sp, #0x90
    4f08:	ret
    4f0c:	ldr	x19, [sp]
    4f10:	ldr	w8, [x20, #24]
    4f14:	ldr	x1, [x21]
    4f18:	add	x0, sp, #0x8
    4f1c:	stp	x26, x25, [sp, #8]
    4f20:	str	x23, [sp, #24]
    4f24:	str	w8, [sp, #32]
    4f28:	str	x20, [sp, #40]
    4f2c:	bl	4f90 <lzma_index_cat@@XZ_5.0+0x2b8>
    4f30:	ldp	q0, q1, [x21, #32]
    4f34:	ldp	q2, q3, [x20, #32]
    4f38:	ldr	x9, [x20, #16]
    4f3c:	ldr	w8, [x20, #72]
    4f40:	add	v0.2d, v2.2d, v0.2d
    4f44:	add	v1.2d, v3.2d, v1.2d
    4f48:	stp	q0, q1, [x20, #32]
    4f4c:	ldr	w10, [x9, #104]
    4f50:	cmn	w10, #0x1
    4f54:	b.eq	4f68 <lzma_index_cat@@XZ_5.0+0x290>  // b.none
    4f58:	ldr	w9, [x9, #120]
    4f5c:	mov	w10, #0x1                   	// #1
    4f60:	lsl	w9, w10, w9
    4f64:	orr	w8, w9, w8
    4f68:	ldr	w9, [x21, #72]
    4f6c:	mov	x0, x21
    4f70:	mov	x1, x19
    4f74:	orr	w8, w9, w8
    4f78:	str	w8, [x20, #72]
    4f7c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    4f80:	mov	w0, wzr
    4f84:	b	4eec <lzma_index_cat@@XZ_5.0+0x214>
    4f88:	mov	w0, #0x5                   	// #5
    4f8c:	b	4eec <lzma_index_cat@@XZ_5.0+0x214>
    4f90:	stp	x29, x30, [sp, #-64]!
    4f94:	stp	x22, x21, [sp, #32]
    4f98:	stp	x20, x19, [sp, #48]
    4f9c:	mov	x20, x1
    4fa0:	mov	x19, x0
    4fa4:	mov	w21, #0x1                   	// #1
    4fa8:	str	x23, [sp, #16]
    4fac:	mov	x29, sp
    4fb0:	b	4fc0 <lzma_index_cat@@XZ_5.0+0x2e8>
    4fb4:	stp	x22, x22, [x9]
    4fb8:	str	x22, [x9, #16]
    4fbc:	cbz	x20, 509c <lzma_index_cat@@XZ_5.0+0x3c4>
    4fc0:	mov	x23, x20
    4fc4:	ldr	x1, [x23, #24]!
    4fc8:	mov	x22, x20
    4fcc:	ldr	x20, [x23, #8]
    4fd0:	cbz	x1, 4fdc <lzma_index_cat@@XZ_5.0+0x304>
    4fd4:	mov	x0, x19
    4fd8:	bl	4f90 <lzma_index_cat@@XZ_5.0+0x2b8>
    4fdc:	ldr	q0, [x19]
    4fe0:	ldr	q1, [x22]
    4fe4:	ldr	w8, [x22, #40]
    4fe8:	ldr	x10, [x22, #48]
    4fec:	add	v0.2d, v1.2d, v0.2d
    4ff0:	str	q0, [x22]
    4ff4:	ldr	w9, [x19, #24]
    4ff8:	add	w8, w8, w9
    4ffc:	str	w8, [x22, #40]
    5000:	ldr	x8, [x19, #16]
    5004:	add	x8, x10, x8
    5008:	str	x8, [x22, #48]
    500c:	ldr	x9, [x19, #32]
    5010:	ldr	x8, [x9, #16]
    5014:	str	x8, [x22, #16]
    5018:	stp	xzr, xzr, [x23]
    501c:	ldr	w10, [x9, #24]
    5020:	ldr	x11, [x9]
    5024:	add	w10, w10, #0x1
    5028:	str	w10, [x9, #24]
    502c:	cbz	x11, 4fb4 <lzma_index_cat@@XZ_5.0+0x2dc>
    5030:	clz	w11, w10
    5034:	eor	w11, w11, #0x1f
    5038:	lsl	w11, w21, w11
    503c:	cmp	w10, w11
    5040:	str	x22, [x8, #32]
    5044:	str	x22, [x9, #16]
    5048:	b.eq	4fbc <lzma_index_cat@@XZ_5.0+0x2e4>  // b.none
    504c:	rbit	w10, w10
    5050:	clz	w10, w10
    5054:	add	w10, w10, #0x1
    5058:	ldr	x8, [x8, #16]
    505c:	subs	w10, w10, #0x1
    5060:	b.ne	5058 <lzma_index_cat@@XZ_5.0+0x380>  // b.any
    5064:	ldr	x11, [x8, #16]
    5068:	ldr	x10, [x8, #32]
    506c:	add	x12, x11, #0x20
    5070:	cmp	x11, #0x0
    5074:	csel	x9, x9, x12, eq  // eq = none
    5078:	str	x10, [x9]
    507c:	ldr	x9, [x10, #24]
    5080:	str	x11, [x10, #16]
    5084:	str	x9, [x8, #32]
    5088:	cbz	x9, 5090 <lzma_index_cat@@XZ_5.0+0x3b8>
    508c:	str	x8, [x9, #16]
    5090:	str	x8, [x10, #24]
    5094:	str	x10, [x8, #16]
    5098:	b	4fbc <lzma_index_cat@@XZ_5.0+0x2e4>
    509c:	ldp	x20, x19, [sp, #48]
    50a0:	ldp	x22, x21, [sp, #32]
    50a4:	ldr	x23, [sp, #16]
    50a8:	ldp	x29, x30, [sp], #64
    50ac:	ret

00000000000050b0 <lzma_index_dup@@XZ_5.0>:
    50b0:	stp	x29, x30, [sp, #-96]!
    50b4:	stp	x22, x21, [sp, #64]
    50b8:	mov	x21, x0
    50bc:	mov	w0, #0x50                  	// #80
    50c0:	stp	x28, x27, [sp, #16]
    50c4:	stp	x26, x25, [sp, #32]
    50c8:	stp	x24, x23, [sp, #48]
    50cc:	stp	x20, x19, [sp, #80]
    50d0:	mov	x29, sp
    50d4:	mov	x19, x1
    50d8:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    50dc:	mov	x20, x0
    50e0:	cbz	x0, 5150 <lzma_index_dup@@XZ_5.0+0xa0>
    50e4:	mov	w8, #0x200                 	// #512
    50e8:	stp	xzr, xzr, [x20]
    50ec:	str	wzr, [x20, #24]
    50f0:	str	xzr, [x20, #16]
    50f4:	str	x8, [x20, #64]
    50f8:	str	wzr, [x20, #72]
    50fc:	ldr	q0, [x21, #32]
    5100:	mov	x9, #0xfffffffffffffffb    	// #-5
    5104:	movk	x9, #0xfff, lsl #48
    5108:	str	q0, [x20, #32]
    510c:	ldr	q0, [x21, #48]
    5110:	str	q0, [x20, #48]
    5114:	ldr	x24, [x21, #8]
    5118:	mov	x27, x24
    511c:	ldr	x8, [x27, #88]!
    5120:	cmp	x8, x9
    5124:	b.ls	5170 <lzma_index_dup@@XZ_5.0+0xc0>  // b.plast
    5128:	ldr	x0, [x20]
    512c:	cbz	x0, 5140 <lzma_index_dup@@XZ_5.0+0x90>
    5130:	adrp	x2, 4000 <lzma_block_total_size@@XZ_5.0+0x3c>
    5134:	add	x2, x2, #0x6ac
    5138:	mov	x1, x19
    513c:	bl	590c <lzma_index_iter_locate@@XZ_5.0+0xe0>
    5140:	mov	x0, x20
    5144:	mov	x1, x19
    5148:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    514c:	mov	x20, xzr
    5150:	mov	x0, x20
    5154:	ldp	x20, x19, [sp, #80]
    5158:	ldp	x22, x21, [sp, #64]
    515c:	ldp	x24, x23, [sp, #48]
    5160:	ldp	x26, x25, [sp, #32]
    5164:	ldp	x28, x27, [sp, #16]
    5168:	ldp	x29, x30, [sp], #96
    516c:	ret
    5170:	mov	w25, #0x1                   	// #1
    5174:	ldp	x28, x26, [x24]
    5178:	ldr	w22, [x24, #40]
    517c:	ldr	x23, [x24, #48]
    5180:	mov	w0, #0xa8                  	// #168
    5184:	mov	x1, x19
    5188:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    518c:	cbz	x0, 5128 <lzma_index_dup@@XZ_5.0+0x78>
    5190:	stp	x28, x26, [x0]
    5194:	mov	x26, x0
    5198:	stp	xzr, xzr, [x0, #24]
    519c:	str	xzr, [x0, #16]
    51a0:	str	w22, [x0, #40]
    51a4:	str	x23, [x0, #48]
    51a8:	stp	xzr, xzr, [x0, #64]
    51ac:	str	wzr, [x0, #80]
    51b0:	str	xzr, [x26, #56]!
    51b4:	ldr	x8, [x27]
    51b8:	mov	x21, x0
    51bc:	str	x8, [x0, #88]
    51c0:	ldr	x9, [x24, #96]
    51c4:	str	x9, [x0, #96]
    51c8:	ldr	x9, [x24, #152]
    51cc:	ldur	q0, [x24, #136]
    51d0:	ldur	q1, [x24, #120]
    51d4:	ldur	q2, [x24, #104]
    51d8:	str	x9, [x0, #152]
    51dc:	stur	q0, [x0, #136]
    51e0:	stur	q1, [x0, #120]
    51e4:	stur	q2, [x0, #104]
    51e8:	ldr	x9, [x24, #160]
    51ec:	str	x9, [x0, #160]
    51f0:	ldr	x9, [x24, #64]
    51f4:	cbz	x9, 5320 <lzma_index_dup@@XZ_5.0+0x270>
    51f8:	lsl	x8, x8, #4
    51fc:	add	x0, x8, #0x40
    5200:	mov	x1, x19
    5204:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    5208:	cbz	x0, 540c <lzma_index_dup@@XZ_5.0+0x35c>
    520c:	stp	xzr, xzr, [x0]
    5210:	str	x25, [x0, #40]
    5214:	ldr	x8, [x27]
    5218:	mov	x22, x0
    521c:	mov	x28, xzr
    5220:	add	x27, x0, #0x40
    5224:	sub	x9, x8, #0x1
    5228:	stp	x8, x9, [x0, #48]
    522c:	ldr	x23, [x24, #64]
    5230:	ldr	x8, [x23, #56]
    5234:	add	x0, x27, x28, lsl #4
    5238:	add	x1, x23, #0x40
    523c:	lsl	x8, x8, #4
    5240:	add	x2, x8, #0x10
    5244:	bl	3040 <memcpy@plt>
    5248:	ldr	x9, [x23, #32]
    524c:	ldr	x8, [x23, #56]
    5250:	cbz	x9, 5264 <lzma_index_dup@@XZ_5.0+0x1b4>
    5254:	mov	x23, x9
    5258:	ldr	x9, [x9, #24]
    525c:	cbnz	x9, 5254 <lzma_index_dup@@XZ_5.0+0x1a4>
    5260:	b	5280 <lzma_index_dup@@XZ_5.0+0x1d0>
    5264:	mov	x9, x23
    5268:	ldr	x23, [x9, #16]
    526c:	cbz	x23, 528c <lzma_index_dup@@XZ_5.0+0x1dc>
    5270:	ldr	x10, [x23, #32]
    5274:	cmp	x10, x9
    5278:	mov	x9, x23
    527c:	b.eq	5268 <lzma_index_dup@@XZ_5.0+0x1b8>  // b.none
    5280:	add	x8, x28, x8
    5284:	add	x28, x8, #0x1
    5288:	b	5230 <lzma_index_dup@@XZ_5.0+0x180>
    528c:	ldr	w9, [x21, #80]
    5290:	ldr	x8, [x21, #72]
    5294:	ldr	x10, [x21, #56]
    5298:	stp	xzr, xzr, [x22, #24]
    529c:	add	w9, w9, #0x1
    52a0:	str	x8, [x22, #16]
    52a4:	str	w9, [x21, #80]
    52a8:	cbz	x10, 5318 <lzma_index_dup@@XZ_5.0+0x268>
    52ac:	clz	w10, w9
    52b0:	eor	w10, w10, #0x1f
    52b4:	lsl	w10, w25, w10
    52b8:	cmp	w9, w10
    52bc:	str	x22, [x8, #32]
    52c0:	str	x22, [x21, #72]
    52c4:	b.eq	5320 <lzma_index_dup@@XZ_5.0+0x270>  // b.none
    52c8:	rbit	w9, w9
    52cc:	clz	w9, w9
    52d0:	add	w9, w9, #0x1
    52d4:	ldr	x8, [x8, #16]
    52d8:	subs	w9, w9, #0x1
    52dc:	b.ne	52d4 <lzma_index_dup@@XZ_5.0+0x224>  // b.any
    52e0:	ldr	x11, [x8, #16]
    52e4:	ldr	x9, [x8, #32]
    52e8:	add	x10, x11, #0x20
    52ec:	cmp	x11, #0x0
    52f0:	csel	x10, x26, x10, eq  // eq = none
    52f4:	str	x9, [x10]
    52f8:	ldr	x10, [x9, #24]
    52fc:	str	x11, [x9, #16]
    5300:	str	x10, [x8, #32]
    5304:	cbz	x10, 530c <lzma_index_dup@@XZ_5.0+0x25c>
    5308:	str	x8, [x10, #16]
    530c:	str	x8, [x9, #24]
    5310:	str	x9, [x8, #16]
    5314:	b	5320 <lzma_index_dup@@XZ_5.0+0x270>
    5318:	stp	x22, x22, [x21, #56]
    531c:	str	x22, [x21, #72]
    5320:	ldr	w9, [x20, #24]
    5324:	ldr	x8, [x20, #16]
    5328:	ldr	x10, [x20]
    532c:	stp	xzr, xzr, [x21, #24]
    5330:	add	w9, w9, #0x1
    5334:	str	x8, [x21, #16]
    5338:	str	w9, [x20, #24]
    533c:	cbz	x10, 53b4 <lzma_index_dup@@XZ_5.0+0x304>
    5340:	clz	w10, w9
    5344:	eor	w10, w10, #0x1f
    5348:	lsl	w10, w25, w10
    534c:	cmp	w9, w10
    5350:	str	x21, [x8, #32]
    5354:	str	x21, [x20, #16]
    5358:	b.eq	53a8 <lzma_index_dup@@XZ_5.0+0x2f8>  // b.none
    535c:	rbit	w9, w9
    5360:	clz	w9, w9
    5364:	add	w9, w9, #0x1
    5368:	ldr	x8, [x8, #16]
    536c:	subs	w9, w9, #0x1
    5370:	b.ne	5368 <lzma_index_dup@@XZ_5.0+0x2b8>  // b.any
    5374:	ldr	x11, [x8, #16]
    5378:	ldr	x9, [x8, #32]
    537c:	add	x10, x11, #0x20
    5380:	cmp	x11, #0x0
    5384:	csel	x10, x20, x10, eq  // eq = none
    5388:	str	x9, [x10]
    538c:	ldr	x10, [x9, #24]
    5390:	str	x11, [x9, #16]
    5394:	str	x10, [x8, #32]
    5398:	cbz	x10, 53a0 <lzma_index_dup@@XZ_5.0+0x2f0>
    539c:	str	x8, [x10, #16]
    53a0:	str	x8, [x9, #24]
    53a4:	str	x9, [x8, #16]
    53a8:	ldr	x8, [x24, #32]
    53ac:	cbnz	x8, 53c4 <lzma_index_dup@@XZ_5.0+0x314>
    53b0:	b	53d4 <lzma_index_dup@@XZ_5.0+0x324>
    53b4:	stp	x21, x21, [x20]
    53b8:	str	x21, [x20, #16]
    53bc:	ldr	x8, [x24, #32]
    53c0:	cbz	x8, 53d4 <lzma_index_dup@@XZ_5.0+0x324>
    53c4:	mov	x24, x8
    53c8:	ldr	x8, [x8, #24]
    53cc:	cbnz	x8, 53c4 <lzma_index_dup@@XZ_5.0+0x314>
    53d0:	b	53f0 <lzma_index_dup@@XZ_5.0+0x340>
    53d4:	mov	x8, x24
    53d8:	ldr	x24, [x8, #16]
    53dc:	cbz	x24, 5150 <lzma_index_dup@@XZ_5.0+0xa0>
    53e0:	ldr	x9, [x24, #32]
    53e4:	cmp	x9, x8
    53e8:	mov	x8, x24
    53ec:	b.eq	53d8 <lzma_index_dup@@XZ_5.0+0x328>  // b.none
    53f0:	mov	x27, x24
    53f4:	ldr	x8, [x27, #88]!
    53f8:	mov	x9, #0xfffffffffffffffb    	// #-5
    53fc:	movk	x9, #0xfff, lsl #48
    5400:	cmp	x8, x9
    5404:	b.ls	5174 <lzma_index_dup@@XZ_5.0+0xc4>  // b.plast
    5408:	b	5128 <lzma_index_dup@@XZ_5.0+0x78>
    540c:	ldr	x0, [x26]
    5410:	cbz	x0, 5424 <lzma_index_dup@@XZ_5.0+0x374>
    5414:	adrp	x2, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    5418:	ldr	x2, [x2, #3992]
    541c:	mov	x1, x19
    5420:	bl	590c <lzma_index_iter_locate@@XZ_5.0+0xe0>
    5424:	mov	x0, x21
    5428:	mov	x1, x19
    542c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    5430:	b	5128 <lzma_index_dup@@XZ_5.0+0x78>

0000000000005434 <lzma_index_iter_init@@XZ_5.0>:
    5434:	add	x8, x0, #0x108
    5438:	movi	v0.2d, #0x0
    543c:	add	x9, x0, #0x118
    5440:	str	x1, [x0, #256]
    5444:	str	q0, [x8]
    5448:	str	q0, [x9]
    544c:	ret

0000000000005450 <lzma_index_iter_rewind@@XZ_5.0>:
    5450:	add	x8, x0, #0x108
    5454:	add	x9, x0, #0x118
    5458:	movi	v0.2d, #0x0
    545c:	str	q0, [x9]
    5460:	str	q0, [x8]
    5464:	ret

0000000000005468 <lzma_index_iter_next@@XZ_5.0>:
    5468:	stp	x29, x30, [sp, #-16]!
    546c:	cmp	w1, #0x3
    5470:	mov	x29, sp
    5474:	b.ls	5484 <lzma_index_iter_next@@XZ_5.0+0x1c>  // b.plast
    5478:	mov	w0, #0x1                   	// #1
    547c:	ldp	x29, x30, [sp], #16
    5480:	ret
    5484:	ldp	x8, x9, [x0, #256]
    5488:	ldr	x10, [x0, #280]
    548c:	cmp	w1, #0x1
    5490:	b.ne	549c <lzma_index_iter_next@@XZ_5.0+0x34>  // b.any
    5494:	mov	x11, xzr
    5498:	b	5514 <lzma_index_iter_next@@XZ_5.0+0xac>
    549c:	ldr	x11, [x0, #288]
    54a0:	cmp	x11, #0x2
    54a4:	b.eq	54bc <lzma_index_iter_next@@XZ_5.0+0x54>  // b.none
    54a8:	cmp	x11, #0x1
    54ac:	b.eq	54c4 <lzma_index_iter_next@@XZ_5.0+0x5c>  // b.none
    54b0:	cbnz	x11, 54fc <lzma_index_iter_next@@XZ_5.0+0x94>
    54b4:	ldr	x11, [x0, #272]
    54b8:	b	5514 <lzma_index_iter_next@@XZ_5.0+0xac>
    54bc:	ldr	x11, [x9, #64]
    54c0:	b	5514 <lzma_index_iter_next@@XZ_5.0+0xac>
    54c4:	ldr	x12, [x0, #272]
    54c8:	ldr	x13, [x12, #32]
    54cc:	cbz	x13, 54e0 <lzma_index_iter_next@@XZ_5.0+0x78>
    54d0:	mov	x11, x13
    54d4:	ldr	x13, [x13, #24]
    54d8:	cbnz	x13, 54d0 <lzma_index_iter_next@@XZ_5.0+0x68>
    54dc:	b	5514 <lzma_index_iter_next@@XZ_5.0+0xac>
    54e0:	ldr	x11, [x12, #16]
    54e4:	cbz	x11, 5514 <lzma_index_iter_next@@XZ_5.0+0xac>
    54e8:	ldr	x13, [x11, #32]
    54ec:	cmp	x13, x12
    54f0:	mov	x12, x11
    54f4:	b.eq	54e0 <lzma_index_iter_next@@XZ_5.0+0x78>  // b.none
    54f8:	b	5514 <lzma_index_iter_next@@XZ_5.0+0xac>
    54fc:	mov	x11, xzr
    5500:	b	5514 <lzma_index_iter_next@@XZ_5.0+0xac>
    5504:	ldr	x12, [x11]
    5508:	ldr	x13, [x11, #64]
    550c:	cmp	x12, x13
    5510:	b.ne	562c <lzma_index_iter_next@@XZ_5.0+0x1c4>  // b.any
    5514:	cbz	x9, 5530 <lzma_index_iter_next@@XZ_5.0+0xc8>
    5518:	cbz	x11, 55bc <lzma_index_iter_next@@XZ_5.0+0x154>
    551c:	ldr	x12, [x11, #56]
    5520:	cmp	x10, x12
    5524:	b.cs	557c <lzma_index_iter_next@@XZ_5.0+0x114>  // b.hs, b.nlast
    5528:	add	x10, x10, #0x1
    552c:	b	560c <lzma_index_iter_next@@XZ_5.0+0x1a4>
    5530:	ldr	x9, [x8, #8]
    5534:	cmp	w1, #0x2
    5538:	b.cc	5604 <lzma_index_iter_next@@XZ_5.0+0x19c>  // b.lo, b.ul, b.last
    553c:	ldr	x10, [x9, #64]
    5540:	cbnz	x10, 5604 <lzma_index_iter_next@@XZ_5.0+0x19c>
    5544:	ldr	x10, [x9, #32]
    5548:	cbz	x10, 555c <lzma_index_iter_next@@XZ_5.0+0xf4>
    554c:	mov	x9, x10
    5550:	ldr	x10, [x10, #24]
    5554:	cbnz	x10, 554c <lzma_index_iter_next@@XZ_5.0+0xe4>
    5558:	b	553c <lzma_index_iter_next@@XZ_5.0+0xd4>
    555c:	mov	x10, x9
    5560:	ldr	x9, [x10, #16]
    5564:	cbz	x9, 5478 <lzma_index_iter_next@@XZ_5.0+0x10>
    5568:	ldr	x11, [x9, #32]
    556c:	cmp	x11, x10
    5570:	mov	x10, x9
    5574:	b.eq	5560 <lzma_index_iter_next@@XZ_5.0+0xf8>  // b.none
    5578:	b	553c <lzma_index_iter_next@@XZ_5.0+0xd4>
    557c:	ldr	x10, [x11, #32]
    5580:	cbz	x10, 5594 <lzma_index_iter_next@@XZ_5.0+0x12c>
    5584:	mov	x12, x10
    5588:	ldr	x10, [x10, #24]
    558c:	cbnz	x10, 5584 <lzma_index_iter_next@@XZ_5.0+0x11c>
    5590:	b	55ac <lzma_index_iter_next@@XZ_5.0+0x144>
    5594:	ldr	x12, [x11, #16]
    5598:	cbz	x12, 55ac <lzma_index_iter_next@@XZ_5.0+0x144>
    559c:	ldr	x10, [x12, #32]
    55a0:	cmp	x10, x11
    55a4:	mov	x11, x12
    55a8:	b.eq	5594 <lzma_index_iter_next@@XZ_5.0+0x12c>  // b.none
    55ac:	cbz	x12, 55bc <lzma_index_iter_next@@XZ_5.0+0x154>
    55b0:	mov	x10, xzr
    55b4:	mov	x11, x12
    55b8:	b	560c <lzma_index_iter_next@@XZ_5.0+0x1a4>
    55bc:	ldr	x10, [x9, #32]
    55c0:	cbz	x10, 55d4 <lzma_index_iter_next@@XZ_5.0+0x16c>
    55c4:	mov	x9, x10
    55c8:	ldr	x10, [x10, #24]
    55cc:	cbnz	x10, 55c4 <lzma_index_iter_next@@XZ_5.0+0x15c>
    55d0:	b	55f0 <lzma_index_iter_next@@XZ_5.0+0x188>
    55d4:	mov	x10, x9
    55d8:	ldr	x9, [x10, #16]
    55dc:	cbz	x9, 5478 <lzma_index_iter_next@@XZ_5.0+0x10>
    55e0:	ldr	x11, [x9, #32]
    55e4:	cmp	x11, x10
    55e8:	mov	x10, x9
    55ec:	b.eq	55d8 <lzma_index_iter_next@@XZ_5.0+0x170>  // b.none
    55f0:	cmp	w1, #0x1
    55f4:	b.ls	5604 <lzma_index_iter_next@@XZ_5.0+0x19c>  // b.plast
    55f8:	ldr	x11, [x9, #64]
    55fc:	cbz	x11, 55bc <lzma_index_iter_next@@XZ_5.0+0x154>
    5600:	b	5608 <lzma_index_iter_next@@XZ_5.0+0x1a0>
    5604:	ldr	x11, [x9, #64]
    5608:	mov	x10, xzr
    560c:	cmp	w1, #0x3
    5610:	b.ne	562c <lzma_index_iter_next@@XZ_5.0+0x1c4>  // b.any
    5614:	cbz	x10, 5504 <lzma_index_iter_next@@XZ_5.0+0x9c>
    5618:	add	x12, x11, x10, lsl #4
    561c:	ldr	x13, [x12, #48]
    5620:	ldr	x12, [x12, #64]
    5624:	cmp	x13, x12
    5628:	b.eq	5514 <lzma_index_iter_next@@XZ_5.0+0xac>  // b.none
    562c:	stp	x9, x11, [x0, #264]
    5630:	str	x10, [x0, #280]
    5634:	bl	5644 <lzma_index_iter_next@@XZ_5.0+0x1dc>
    5638:	mov	w0, wzr
    563c:	ldp	x29, x30, [sp], #16
    5640:	ret
    5644:	stp	x29, x30, [sp, #-80]!
    5648:	stp	x26, x25, [sp, #16]
    564c:	stp	x24, x23, [sp, #32]
    5650:	stp	x22, x21, [sp, #48]
    5654:	stp	x20, x19, [sp, #64]
    5658:	ldp	x22, x21, [x0, #264]
    565c:	ldr	x20, [x0, #280]
    5660:	mov	x19, x0
    5664:	mov	x29, sp
    5668:	cbz	x21, 5690 <lzma_index_iter_next@@XZ_5.0+0x228>
    566c:	ldr	x8, [x19, #256]
    5670:	ldr	x8, [x8, #16]
    5674:	cmp	x8, x22
    5678:	b.ne	5688 <lzma_index_iter_next@@XZ_5.0+0x220>  // b.any
    567c:	ldr	x8, [x22, #72]
    5680:	cmp	x8, x21
    5684:	b.eq	57fc <lzma_index_iter_next@@XZ_5.0+0x394>  // b.none
    5688:	str	xzr, [x19, #288]
    568c:	b	5698 <lzma_index_iter_next@@XZ_5.0+0x230>
    5690:	mov	w8, #0x2                   	// #2
    5694:	str	x8, [x19, #288]
    5698:	ldr	w8, [x22, #40]
    569c:	str	x8, [x19, #32]
    56a0:	ldr	x0, [x22, #88]
    56a4:	mov	x8, x22
    56a8:	str	x0, [x19, #40]
    56ac:	ldr	x23, [x22, #8]
    56b0:	str	x23, [x19, #48]
    56b4:	ldr	x24, [x22]
    56b8:	str	x24, [x19, #56]
    56bc:	ldr	w9, [x8, #104]!
    56c0:	cmn	w9, #0x1
    56c4:	csel	x9, xzr, x8, eq  // eq = none
    56c8:	str	x9, [x19]
    56cc:	ldr	x9, [x8, #56]
    56d0:	str	x9, [x19, #80]
    56d4:	ldur	x25, [x8, #-32]
    56d8:	cbz	x25, 572c <lzma_index_iter_next@@XZ_5.0+0x2c4>
    56dc:	ldr	x26, [x22, #96]
    56e0:	bl	3400 <lzma_vli_size@plt>
    56e4:	ldr	x8, [x25, #56]
    56e8:	add	x10, x25, #0x40
    56ec:	add	w9, w0, #0x1
    56f0:	add	x9, x26, x9
    56f4:	add	x8, x10, x8, lsl #4
    56f8:	ldr	x8, [x8, #8]
    56fc:	add	x9, x9, #0x1f
    5700:	and	x9, x9, #0xfffffffffffffffc
    5704:	add	x8, x8, #0x3
    5708:	and	x8, x8, #0xfffffffffffffffc
    570c:	add	x8, x9, x8
    5710:	str	x8, [x19, #64]
    5714:	ldr	x8, [x25, #56]
    5718:	lsl	x8, x8, #4
    571c:	ldr	x8, [x10, x8]
    5720:	str	x8, [x19, #72]
    5724:	cbnz	x21, 5754 <lzma_index_iter_next@@XZ_5.0+0x2ec>
    5728:	b	57e4 <lzma_index_iter_next@@XZ_5.0+0x37c>
    572c:	mov	x0, xzr
    5730:	bl	3400 <lzma_vli_size@plt>
    5734:	add	w9, w0, #0x1
    5738:	add	x9, x9, #0x7
    573c:	and	x9, x9, #0x1fffffffc
    5740:	add	x9, x9, #0x18
    5744:	mov	x8, xzr
    5748:	str	x9, [x19, #64]
    574c:	str	x8, [x19, #72]
    5750:	cbz	x21, 57e4 <lzma_index_iter_next@@XZ_5.0+0x37c>
    5754:	ldr	x8, [x21, #40]
    5758:	add	x8, x8, x20
    575c:	str	x8, [x19, #144]
    5760:	ldr	x9, [x22, #48]
    5764:	add	x8, x9, x8
    5768:	str	x8, [x19, #120]
    576c:	cbz	x20, 5788 <lzma_index_iter_next@@XZ_5.0+0x320>
    5770:	sub	x9, x20, #0x1
    5774:	add	x8, x21, x9, lsl #4
    5778:	ldr	x8, [x8, #72]
    577c:	add	x8, x8, #0x3
    5780:	and	x8, x8, #0xfffffffffffffffc
    5784:	b	5790 <lzma_index_iter_next@@XZ_5.0+0x328>
    5788:	ldr	x8, [x21, #8]
    578c:	mov	x9, #0xffffffffffffffff    	// #-1
    5790:	add	x10, x21, #0x40
    5794:	cmp	x20, #0x0
    5798:	add	x9, x10, x9, lsl #4
    579c:	str	x8, [x19, #152]
    57a0:	csel	x9, x21, x9, eq  // eq = none
    57a4:	ldr	x9, [x9]
    57a8:	add	x10, x10, x20, lsl #4
    57ac:	add	x12, x8, #0xc
    57b0:	str	x9, [x19, #160]
    57b4:	ldr	x11, [x10]
    57b8:	sub	x11, x11, x9
    57bc:	str	x11, [x19, #168]
    57c0:	ldr	x10, [x10, #8]
    57c4:	add	x11, x12, x23
    57c8:	add	x9, x9, x24
    57cc:	str	x12, [x19, #152]
    57d0:	sub	x8, x10, x8
    57d4:	add	x10, x8, #0x3
    57d8:	and	x10, x10, #0xfffffffffffffffc
    57dc:	stp	x8, x10, [x19, #176]
    57e0:	stp	x11, x9, [x19, #128]
    57e4:	ldp	x20, x19, [sp, #64]
    57e8:	ldp	x22, x21, [sp, #48]
    57ec:	ldp	x24, x23, [sp, #32]
    57f0:	ldp	x26, x25, [sp, #16]
    57f4:	ldp	x29, x30, [sp], #80
    57f8:	ret
    57fc:	ldr	x9, [x22, #64]
    5800:	cmp	x9, x8
    5804:	b.eq	581c <lzma_index_iter_next@@XZ_5.0+0x3b4>  // b.none
    5808:	mov	w8, #0x1                   	// #1
    580c:	str	x8, [x19, #288]
    5810:	ldr	x8, [x21, #16]
    5814:	str	x8, [x19, #272]
    5818:	b	5698 <lzma_index_iter_next@@XZ_5.0+0x230>
    581c:	mov	w8, #0x2                   	// #2
    5820:	str	x8, [x19, #288]
    5824:	str	xzr, [x19, #272]
    5828:	b	5698 <lzma_index_iter_next@@XZ_5.0+0x230>

000000000000582c <lzma_index_iter_locate@@XZ_5.0>:
    582c:	stp	x29, x30, [sp, #-16]!
    5830:	ldr	x8, [x0, #256]
    5834:	mov	x29, sp
    5838:	ldr	x9, [x8, #32]
    583c:	cmp	x9, x1
    5840:	b.ls	5874 <lzma_index_iter_locate@@XZ_5.0+0x48>  // b.plast
    5844:	ldr	x9, [x8]
    5848:	cbz	x9, 5880 <lzma_index_iter_locate@@XZ_5.0+0x54>
    584c:	mov	x8, xzr
    5850:	mov	w10, #0x20                  	// #32
    5854:	mov	w11, #0x18                  	// #24
    5858:	ldr	x12, [x9]
    585c:	cmp	x12, x1
    5860:	csel	x12, x11, x10, hi  // hi = pmore
    5864:	csel	x8, x8, x9, hi  // hi = pmore
    5868:	ldr	x9, [x9, x12]
    586c:	cbnz	x9, 5858 <lzma_index_iter_locate@@XZ_5.0+0x2c>
    5870:	b	5884 <lzma_index_iter_locate@@XZ_5.0+0x58>
    5874:	mov	w0, #0x1                   	// #1
    5878:	ldp	x29, x30, [sp], #16
    587c:	ret
    5880:	mov	x8, xzr
    5884:	ldr	x9, [x8]
    5888:	ldr	x11, [x8, #56]
    588c:	sub	x10, x1, x9
    5890:	mov	x9, xzr
    5894:	cbz	x11, 58b8 <lzma_index_iter_locate@@XZ_5.0+0x8c>
    5898:	mov	w12, #0x20                  	// #32
    589c:	mov	w13, #0x18                  	// #24
    58a0:	ldr	x14, [x11]
    58a4:	cmp	x14, x10
    58a8:	csel	x14, x13, x12, hi  // hi = pmore
    58ac:	csel	x9, x9, x11, hi  // hi = pmore
    58b0:	ldr	x11, [x11, x14]
    58b4:	cbnz	x11, 58a0 <lzma_index_iter_locate@@XZ_5.0+0x74>
    58b8:	ldr	x12, [x9, #56]
    58bc:	cbz	x12, 58f0 <lzma_index_iter_locate@@XZ_5.0+0xc4>
    58c0:	mov	x11, xzr
    58c4:	add	x13, x9, #0x40
    58c8:	sub	x14, x12, x11
    58cc:	add	x14, x11, x14, lsr #1
    58d0:	lsl	x15, x14, #4
    58d4:	ldr	x15, [x13, x15]
    58d8:	cmp	x15, x10
    58dc:	csinc	x11, x11, x14, hi  // hi = pmore
    58e0:	csel	x12, x14, x12, hi  // hi = pmore
    58e4:	cmp	x12, x11
    58e8:	b.hi	58c8 <lzma_index_iter_locate@@XZ_5.0+0x9c>  // b.pmore
    58ec:	b	58f4 <lzma_index_iter_locate@@XZ_5.0+0xc8>
    58f0:	mov	x11, xzr
    58f4:	stp	x8, x9, [x0, #264]
    58f8:	str	x11, [x0, #280]
    58fc:	bl	5644 <lzma_index_iter_next@@XZ_5.0+0x1dc>
    5900:	mov	w0, wzr
    5904:	ldp	x29, x30, [sp], #16
    5908:	ret
    590c:	sub	sp, sp, #0x30
    5910:	stp	x29, x30, [sp, #16]
    5914:	stp	x20, x19, [sp, #32]
    5918:	mov	x19, x0
    591c:	ldr	x0, [x0, #24]
    5920:	mov	x20, x1
    5924:	add	x29, sp, #0x10
    5928:	str	x2, [sp, #8]
    592c:	cbz	x0, 5940 <lzma_index_iter_locate@@XZ_5.0+0x114>
    5930:	ldr	x2, [sp, #8]
    5934:	mov	x1, x20
    5938:	bl	590c <lzma_index_iter_locate@@XZ_5.0+0xe0>
    593c:	ldr	x2, [sp, #8]
    5940:	ldr	x0, [x19, #32]
    5944:	cbz	x0, 5958 <lzma_index_iter_locate@@XZ_5.0+0x12c>
    5948:	ldr	x2, [sp, #8]
    594c:	mov	x1, x20
    5950:	bl	590c <lzma_index_iter_locate@@XZ_5.0+0xe0>
    5954:	ldr	x2, [sp, #8]
    5958:	mov	x0, x19
    595c:	mov	x1, x20
    5960:	ldp	x20, x19, [sp, #32]
    5964:	ldp	x29, x30, [sp, #16]
    5968:	add	sp, sp, #0x30
    596c:	br	x2

0000000000005970 <lzma_stream_flags_compare@@XZ_5.0>:
    5970:	ldr	w8, [x0]
    5974:	cbnz	w8, 5980 <lzma_stream_flags_compare@@XZ_5.0+0x10>
    5978:	ldr	w8, [x1]
    597c:	cbz	w8, 5988 <lzma_stream_flags_compare@@XZ_5.0+0x18>
    5980:	mov	w0, #0x8                   	// #8
    5984:	ret
    5988:	ldr	w8, [x0, #16]
    598c:	cmp	w8, #0xf
    5990:	b.hi	59a0 <lzma_stream_flags_compare@@XZ_5.0+0x30>  // b.pmore
    5994:	ldr	w9, [x1, #16]
    5998:	cmp	w9, #0xf
    599c:	b.ls	59a8 <lzma_stream_flags_compare@@XZ_5.0+0x38>  // b.plast
    59a0:	mov	w0, #0xb                   	// #11
    59a4:	ret
    59a8:	cmp	w8, w9
    59ac:	b.ne	5a10 <lzma_stream_flags_compare@@XZ_5.0+0xa0>  // b.any
    59b0:	ldr	x8, [x0, #8]
    59b4:	cmn	x8, #0x1
    59b8:	b.eq	5a08 <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.none
    59bc:	ldr	x9, [x1, #8]
    59c0:	cmn	x9, #0x1
    59c4:	b.eq	5a08 <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.none
    59c8:	mov	x10, #0x3ffff0000           	// #17179803648
    59cc:	movk	x10, #0xfffd
    59d0:	sub	x11, x8, #0x4
    59d4:	cmp	x11, x10
    59d8:	mov	w0, #0xb                   	// #11
    59dc:	b.cs	5a0c <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.hs, b.nlast
    59e0:	and	x11, x8, #0x3
    59e4:	cbnz	x11, 5a0c <lzma_stream_flags_compare@@XZ_5.0+0x9c>
    59e8:	sub	x11, x9, #0x4
    59ec:	cmp	x11, x10
    59f0:	mov	w0, #0xb                   	// #11
    59f4:	b.cs	5a0c <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.hs, b.nlast
    59f8:	and	x10, x9, #0x3
    59fc:	cbnz	x10, 5a0c <lzma_stream_flags_compare@@XZ_5.0+0x9c>
    5a00:	cmp	x8, x9
    5a04:	b.ne	5a10 <lzma_stream_flags_compare@@XZ_5.0+0xa0>  // b.any
    5a08:	mov	w0, wzr
    5a0c:	ret
    5a10:	mov	w0, #0x9                   	// #9
    5a14:	ret

0000000000005a18 <lzma_vli_size@@XZ_5.0>:
    5a18:	mov	w8, wzr
    5a1c:	tbnz	x0, #63, 5a2c <lzma_vli_size@@XZ_5.0+0x14>
    5a20:	lsr	x0, x0, #7
    5a24:	add	w8, w8, #0x1
    5a28:	cbnz	x0, 5a20 <lzma_vli_size@@XZ_5.0+0x8>
    5a2c:	mov	w0, w8
    5a30:	ret

0000000000005a34 <lzma_cputhreads@@XZ_5.2>:
    5a34:	b	3604 <pthread_cond_timedwait@plt+0x124>

0000000000005a38 <lzma_alone_encoder@@XZ_5.0>:
    5a38:	stp	x29, x30, [sp, #-48]!
    5a3c:	str	x21, [sp, #16]
    5a40:	stp	x20, x19, [sp, #32]
    5a44:	mov	x29, sp
    5a48:	mov	x21, x1
    5a4c:	mov	x19, x0
    5a50:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    5a54:	mov	w20, w0
    5a58:	cbnz	w0, 5a8c <lzma_alone_encoder@@XZ_5.0+0x54>
    5a5c:	ldp	x1, x0, [x19, #48]
    5a60:	mov	x2, x21
    5a64:	bl	5aa0 <lzma_alone_encoder@@XZ_5.0+0x68>
    5a68:	mov	w20, w0
    5a6c:	cbz	w0, 5a7c <lzma_alone_encoder@@XZ_5.0+0x44>
    5a70:	mov	x0, x19
    5a74:	bl	32c0 <lzma_end@plt>
    5a78:	b	5a8c <lzma_alone_encoder@@XZ_5.0+0x54>
    5a7c:	ldr	x8, [x19, #56]
    5a80:	mov	w9, #0x1                   	// #1
    5a84:	strb	w9, [x8, #88]
    5a88:	strb	w9, [x8, #91]
    5a8c:	mov	w0, w20
    5a90:	ldp	x20, x19, [sp, #32]
    5a94:	ldr	x21, [sp, #16]
    5a98:	ldp	x29, x30, [sp], #48
    5a9c:	ret
    5aa0:	sub	sp, sp, #0x70
    5aa4:	stp	x29, x30, [sp, #48]
    5aa8:	stp	x22, x21, [sp, #80]
    5aac:	stp	x20, x19, [sp, #96]
    5ab0:	ldr	x8, [x0, #16]
    5ab4:	str	x23, [sp, #64]
    5ab8:	adrp	x23, 5000 <lzma_index_cat@@XZ_5.0+0x328>
    5abc:	add	x23, x23, #0xaa0
    5ac0:	mov	x19, x2
    5ac4:	mov	x22, x0
    5ac8:	cmp	x8, x23
    5acc:	mov	x20, x1
    5ad0:	add	x29, sp, #0x30
    5ad4:	b.eq	5ae4 <lzma_alone_encoder@@XZ_5.0+0xac>  // b.none
    5ad8:	mov	x0, x22
    5adc:	mov	x1, x20
    5ae0:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    5ae4:	ldr	x21, [x22]
    5ae8:	str	x23, [x22, #16]
    5aec:	cbnz	x21, 5b34 <lzma_alone_encoder@@XZ_5.0+0xfc>
    5af0:	mov	w0, #0x68                  	// #104
    5af4:	mov	x1, x20
    5af8:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    5afc:	cbz	x0, 5bcc <lzma_alone_encoder@@XZ_5.0+0x194>
    5b00:	adrp	x8, 5000 <lzma_index_cat@@XZ_5.0+0x328>
    5b04:	adrp	x9, 5000 <lzma_index_cat@@XZ_5.0+0x328>
    5b08:	mov	x21, x0
    5b0c:	add	x8, x8, #0xbe8
    5b10:	add	x9, x9, #0xd08
    5b14:	mov	x10, #0xffffffffffffffff    	// #-1
    5b18:	movi	v0.2d, #0x0
    5b1c:	str	x0, [x22]
    5b20:	stp	x8, x9, [x22, #24]
    5b24:	stp	xzr, x10, [x0]
    5b28:	stp	q0, q0, [x0, #16]
    5b2c:	str	q0, [x0, #48]
    5b30:	str	xzr, [x0, #64]
    5b34:	add	x1, x21, #0x58
    5b38:	mov	x0, x19
    5b3c:	str	wzr, [x21, #72]
    5b40:	str	xzr, [x21, #80]
    5b44:	bl	11128 <lzma_lzma_preset@@XZ_5.0+0x10ec>
    5b48:	tbnz	w0, #0, 5b58 <lzma_alone_encoder@@XZ_5.0+0x120>
    5b4c:	ldr	w8, [x19]
    5b50:	cmp	w8, #0x1, lsl #12
    5b54:	b.cs	5b60 <lzma_alone_encoder@@XZ_5.0+0x128>  // b.hs, b.nlast
    5b58:	mov	w0, #0x8                   	// #8
    5b5c:	b	5bd0 <lzma_alone_encoder@@XZ_5.0+0x198>
    5b60:	sub	w8, w8, #0x1
    5b64:	orr	w8, w8, w8, lsr #2
    5b68:	orr	w8, w8, w8, lsr #3
    5b6c:	orr	w8, w8, w8, lsr #4
    5b70:	orr	w8, w8, w8, lsr #8
    5b74:	orr	w8, w8, w8, lsr #16
    5b78:	adds	w8, w8, #0x1
    5b7c:	mov	x9, #0xffffffffffffffff    	// #-1
    5b80:	csinv	w8, w8, wzr, cc  // cc = lo, ul, last
    5b84:	stur	x9, [x21, #93]
    5b88:	lsr	w9, w8, #8
    5b8c:	strb	w9, [x21, #90]
    5b90:	lsr	w9, w8, #16
    5b94:	strb	w9, [x21, #91]
    5b98:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    5b9c:	ldr	x9, [x9, #4056]
    5ba0:	strb	w8, [x21, #89]
    5ba4:	lsr	w8, w8, #24
    5ba8:	mov	x2, sp
    5bac:	mov	x0, x21
    5bb0:	mov	x1, x20
    5bb4:	strb	w8, [x21, #92]
    5bb8:	stp	xzr, x9, [sp]
    5bbc:	stp	x19, xzr, [sp, #16]
    5bc0:	stp	xzr, xzr, [sp, #32]
    5bc4:	bl	3784 <lzma_version_string@@XZ_5.0+0x134>
    5bc8:	b	5bd0 <lzma_alone_encoder@@XZ_5.0+0x198>
    5bcc:	mov	w0, #0x5                   	// #5
    5bd0:	ldp	x20, x19, [sp, #96]
    5bd4:	ldp	x22, x21, [sp, #80]
    5bd8:	ldr	x23, [sp, #64]
    5bdc:	ldp	x29, x30, [sp, #48]
    5be0:	add	sp, sp, #0x70
    5be4:	ret
    5be8:	sub	sp, sp, #0x70
    5bec:	stp	x29, x30, [sp, #16]
    5bf0:	stp	x28, x27, [sp, #32]
    5bf4:	stp	x26, x25, [sp, #48]
    5bf8:	stp	x24, x23, [sp, #64]
    5bfc:	stp	x22, x21, [sp, #80]
    5c00:	stp	x20, x19, [sp, #96]
    5c04:	ldr	x8, [x6]
    5c08:	add	x29, sp, #0x10
    5c0c:	cmp	x8, x7
    5c10:	b.cs	5c88 <lzma_alone_encoder@@XZ_5.0+0x250>  // b.hs, b.nlast
    5c14:	ldr	w8, [x29, #96]
    5c18:	mov	x19, x7
    5c1c:	mov	x20, x6
    5c20:	mov	x21, x5
    5c24:	stur	w8, [x29, #-4]
    5c28:	ldr	w8, [x0, #72]
    5c2c:	mov	x22, x4
    5c30:	mov	x23, x3
    5c34:	mov	x24, x2
    5c38:	mov	x25, x1
    5c3c:	mov	x26, x0
    5c40:	add	x27, x0, #0x58
    5c44:	add	x28, x0, #0x50
    5c48:	cbnz	w8, 5cac <lzma_alone_encoder@@XZ_5.0+0x274>
    5c4c:	mov	w2, #0xd                   	// #13
    5c50:	mov	x0, x27
    5c54:	mov	x1, x28
    5c58:	mov	x3, x21
    5c5c:	mov	x4, x20
    5c60:	mov	x5, x19
    5c64:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    5c68:	ldr	x8, [x28]
    5c6c:	cmp	x8, #0xd
    5c70:	b.cc	5c88 <lzma_alone_encoder@@XZ_5.0+0x250>  // b.lo, b.ul, b.last
    5c74:	mov	w8, #0x1                   	// #1
    5c78:	str	w8, [x26, #72]
    5c7c:	ldr	x9, [x20]
    5c80:	cmp	x9, x19
    5c84:	b.cc	5c48 <lzma_alone_encoder@@XZ_5.0+0x210>  // b.lo, b.ul, b.last
    5c88:	mov	w0, wzr
    5c8c:	ldp	x20, x19, [sp, #96]
    5c90:	ldp	x22, x21, [sp, #80]
    5c94:	ldp	x24, x23, [sp, #64]
    5c98:	ldp	x26, x25, [sp, #48]
    5c9c:	ldp	x28, x27, [sp, #32]
    5ca0:	ldp	x29, x30, [sp, #16]
    5ca4:	add	sp, sp, #0x70
    5ca8:	ret
    5cac:	cmp	w8, #0x1
    5cb0:	b.ne	5d00 <lzma_alone_encoder@@XZ_5.0+0x2c8>  // b.any
    5cb4:	ldur	w9, [x29, #-4]
    5cb8:	ldr	x8, [x26, #24]
    5cbc:	ldr	x0, [x26]
    5cc0:	mov	x1, x25
    5cc4:	str	w9, [x29, #96]
    5cc8:	mov	x2, x24
    5ccc:	mov	x3, x23
    5cd0:	mov	x4, x22
    5cd4:	mov	x5, x21
    5cd8:	mov	x6, x20
    5cdc:	mov	x7, x19
    5ce0:	ldp	x20, x19, [sp, #96]
    5ce4:	ldp	x22, x21, [sp, #80]
    5ce8:	ldp	x24, x23, [sp, #64]
    5cec:	ldp	x26, x25, [sp, #48]
    5cf0:	ldp	x28, x27, [sp, #32]
    5cf4:	ldp	x29, x30, [sp, #16]
    5cf8:	add	sp, sp, #0x70
    5cfc:	br	x8
    5d00:	mov	w0, #0xb                   	// #11
    5d04:	b	5c8c <lzma_alone_encoder@@XZ_5.0+0x254>
    5d08:	stp	x29, x30, [sp, #-32]!
    5d0c:	stp	x20, x19, [sp, #16]
    5d10:	mov	x29, sp
    5d14:	mov	x19, x1
    5d18:	mov	x20, x0
    5d1c:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    5d20:	mov	x0, x20
    5d24:	mov	x1, x19
    5d28:	ldp	x20, x19, [sp, #16]
    5d2c:	ldp	x29, x30, [sp], #32
    5d30:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    5d34:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5d38:	movk	x8, #0x7fff, lsl #48
    5d3c:	add	x9, x8, #0x1
    5d40:	cmp	x0, x9
    5d44:	b.ls	5d50 <lzma_alone_encoder@@XZ_5.0+0x318>  // b.plast
    5d48:	mov	x0, xzr
    5d4c:	ret
    5d50:	mov	w9, #0xffff                	// #65535
    5d54:	add	x9, x0, x9
    5d58:	lsr	x9, x9, #16
    5d5c:	add	x9, x9, x9, lsl #1
    5d60:	sub	x8, x8, x9
    5d64:	cmp	x8, x0
    5d68:	b.cs	5d74 <lzma_alone_encoder@@XZ_5.0+0x33c>  // b.hs, b.nlast
    5d6c:	mov	x0, xzr
    5d70:	ret
    5d74:	add	x8, x0, x9
    5d78:	add	x8, x8, #0x60
    5d7c:	and	x0, x8, #0xfffffffffffffffc
    5d80:	ret

0000000000005d84 <lzma_block_buffer_bound@@XZ_5.0>:
    5d84:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5d88:	movk	x8, #0x7fff, lsl #48
    5d8c:	add	x9, x8, #0x1
    5d90:	cmp	x0, x9
    5d94:	b.ls	5da0 <lzma_block_buffer_bound@@XZ_5.0+0x1c>  // b.plast
    5d98:	mov	x0, xzr
    5d9c:	ret
    5da0:	mov	w9, #0xffff                	// #65535
    5da4:	add	x9, x0, x9
    5da8:	lsr	x9, x9, #16
    5dac:	add	x9, x9, x9, lsl #1
    5db0:	sub	x8, x8, x9
    5db4:	cmp	x8, x0
    5db8:	b.cs	5dc4 <lzma_block_buffer_bound@@XZ_5.0+0x40>  // b.hs, b.nlast
    5dbc:	mov	x0, xzr
    5dc0:	ret
    5dc4:	add	x8, x0, x9
    5dc8:	add	x8, x8, #0x60
    5dcc:	and	x0, x8, #0xfffffffffffffffc
    5dd0:	ret

0000000000005dd4 <lzma_block_buffer_encode@@XZ_5.0>:
    5dd4:	mov	w7, #0x1                   	// #1
    5dd8:	b	5ddc <lzma_block_buffer_encode@@XZ_5.0+0x8>
    5ddc:	sub	sp, sp, #0x120
    5de0:	stp	x29, x30, [sp, #192]
    5de4:	stp	x28, x27, [sp, #208]
    5de8:	stp	x26, x25, [sp, #224]
    5dec:	stp	x24, x23, [sp, #240]
    5df0:	stp	x22, x21, [sp, #256]
    5df4:	stp	x20, x19, [sp, #272]
    5df8:	add	x29, sp, #0xc0
    5dfc:	cbz	x0, 5e68 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    5e00:	cmp	x2, #0x0
    5e04:	cset	w8, eq  // eq = none
    5e08:	cmp	x3, #0x0
    5e0c:	cset	w9, ne  // ne = any
    5e10:	mov	x22, x3
    5e14:	mov	x23, x2
    5e18:	and	w8, w8, w9
    5e1c:	mov	w26, #0xb                   	// #11
    5e20:	tbnz	w8, #0, 5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5e24:	mov	x21, x4
    5e28:	cbz	x4, 5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5e2c:	mov	x19, x5
    5e30:	cbz	x5, 5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5e34:	ldr	x28, [x19]
    5e38:	mov	x24, x6
    5e3c:	cmp	x28, x6
    5e40:	b.hi	5e68 <lzma_block_buffer_encode@@XZ_5.0+0x94>  // b.pmore
    5e44:	ldr	w8, [x0]
    5e48:	mov	x20, x0
    5e4c:	cmp	w8, #0x1
    5e50:	b.ls	5e5c <lzma_block_buffer_encode@@XZ_5.0+0x88>  // b.plast
    5e54:	mov	w26, #0x8                   	// #8
    5e58:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5e5c:	ldr	w26, [x20, #8]
    5e60:	cmp	w26, #0xf
    5e64:	b.ls	5e90 <lzma_block_buffer_encode@@XZ_5.0+0xbc>  // b.plast
    5e68:	mov	w26, #0xb                   	// #11
    5e6c:	mov	w0, w26
    5e70:	ldp	x20, x19, [sp, #272]
    5e74:	ldp	x22, x21, [sp, #256]
    5e78:	ldp	x24, x23, [sp, #240]
    5e7c:	ldp	x26, x25, [sp, #224]
    5e80:	ldp	x28, x27, [sp, #208]
    5e84:	ldp	x29, x30, [sp, #192]
    5e88:	add	sp, sp, #0x120
    5e8c:	ret
    5e90:	mov	w27, w7
    5e94:	mov	x25, x1
    5e98:	tbz	w7, #0, 5ea4 <lzma_block_buffer_encode@@XZ_5.0+0xd0>
    5e9c:	ldr	x8, [x20, #32]
    5ea0:	cbz	x8, 5e68 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    5ea4:	mov	w0, w26
    5ea8:	bl	3080 <lzma_check_is_supported@plt>
    5eac:	tst	w0, #0xff
    5eb0:	b.eq	5f18 <lzma_block_buffer_encode@@XZ_5.0+0x144>  // b.none
    5eb4:	sub	w8, w24, w28
    5eb8:	and	x8, x8, #0x3
    5ebc:	mov	w0, w26
    5ec0:	sub	x24, x24, x8
    5ec4:	bl	3200 <lzma_check_size@plt>
    5ec8:	mov	w10, w0
    5ecc:	sub	x8, x24, x28
    5ed0:	cmp	x8, x10
    5ed4:	b.ls	5f20 <lzma_block_buffer_encode@@XZ_5.0+0x14c>  // b.plast
    5ed8:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5edc:	movk	x8, #0x7fff, lsl #48
    5ee0:	add	x9, x8, #0x1
    5ee4:	cmp	x22, x9
    5ee8:	str	x22, [x20, #24]
    5eec:	b.hi	5f0c <lzma_block_buffer_encode@@XZ_5.0+0x138>  // b.pmore
    5ef0:	mov	w9, #0xffff                	// #65535
    5ef4:	add	x9, x22, x9
    5ef8:	lsr	x9, x9, #16
    5efc:	add	x9, x9, x9, lsl #1
    5f00:	sub	x8, x8, x9
    5f04:	cmp	x8, x22
    5f08:	b.cs	5f28 <lzma_block_buffer_encode@@XZ_5.0+0x154>  // b.hs, b.nlast
    5f0c:	str	xzr, [x20, #16]
    5f10:	mov	w26, #0x9                   	// #9
    5f14:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5f18:	mov	w26, #0x3                   	// #3
    5f1c:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5f20:	mov	w26, #0xa                   	// #10
    5f24:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5f28:	add	x8, x22, x9
    5f2c:	sub	x28, x24, x10
    5f30:	add	x8, x8, #0x1
    5f34:	str	x10, [sp, #24]
    5f38:	str	x8, [x20, #16]
    5f3c:	tbz	w27, #0, 6044 <lzma_block_buffer_encode@@XZ_5.0+0x270>
    5f40:	mov	x0, x20
    5f44:	bl	3100 <lzma_block_header_size@plt>
    5f48:	mov	w26, w0
    5f4c:	cbnz	w0, 6038 <lzma_block_buffer_encode@@XZ_5.0+0x264>
    5f50:	ldr	x27, [x19]
    5f54:	ldr	w8, [x20, #4]
    5f58:	sub	x9, x28, x27
    5f5c:	cmp	x9, x8
    5f60:	b.ls	6044 <lzma_block_buffer_encode@@XZ_5.0+0x270>  // b.plast
    5f64:	add	x24, x27, x8
    5f68:	movi	v0.2d, #0x0
    5f6c:	mov	x8, #0xffffffffffffffff    	// #-1
    5f70:	str	x24, [x19]
    5f74:	ldr	x9, [x20, #16]
    5f78:	str	xzr, [sp, #128]
    5f7c:	stp	q0, q0, [sp, #96]
    5f80:	stp	q0, q0, [sp, #64]
    5f84:	str	x8, [sp, #72]
    5f88:	ldr	x2, [x20, #32]
    5f8c:	add	x0, sp, #0x40
    5f90:	mov	x1, x25
    5f94:	str	x9, [sp, #16]
    5f98:	bl	6ca0 <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    5f9c:	mov	w26, w0
    5fa0:	cbnz	w0, 5fec <lzma_block_buffer_encode@@XZ_5.0+0x218>
    5fa4:	ldr	x11, [sp, #16]
    5fa8:	ldr	x10, [sp, #88]
    5fac:	ldr	x0, [sp, #64]
    5fb0:	sub	x8, x28, x24
    5fb4:	add	x9, x11, x24
    5fb8:	cmp	x8, x11
    5fbc:	csel	x7, x9, x28, hi  // hi = pmore
    5fc0:	mov	w8, #0x3                   	// #3
    5fc4:	add	x3, sp, #0x20
    5fc8:	mov	x1, x25
    5fcc:	mov	x2, x23
    5fd0:	mov	x4, x22
    5fd4:	mov	x5, x21
    5fd8:	mov	x6, x19
    5fdc:	str	xzr, [sp, #32]
    5fe0:	str	w8, [sp]
    5fe4:	blr	x10
    5fe8:	mov	w26, w0
    5fec:	add	x0, sp, #0x40
    5ff0:	mov	x1, x25
    5ff4:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    5ff8:	cbz	w26, 6030 <lzma_block_buffer_encode@@XZ_5.0+0x25c>
    5ffc:	cmp	w26, #0x1
    6000:	b.ne	6034 <lzma_block_buffer_encode@@XZ_5.0+0x260>  // b.any
    6004:	ldr	x8, [x19]
    6008:	ldr	w9, [x20, #4]
    600c:	add	x1, x21, x27
    6010:	mov	x0, x20
    6014:	sub	x8, x8, x27
    6018:	sub	x8, x8, x9
    601c:	str	x8, [x20, #16]
    6020:	bl	34c0 <lzma_block_header_encode@plt>
    6024:	cbz	w0, 6274 <lzma_block_buffer_encode@@XZ_5.0+0x4a0>
    6028:	mov	w26, #0xb                   	// #11
    602c:	b	6034 <lzma_block_buffer_encode@@XZ_5.0+0x260>
    6030:	mov	w26, #0xa                   	// #10
    6034:	str	x27, [x19]
    6038:	cbz	w26, 61d4 <lzma_block_buffer_encode@@XZ_5.0+0x400>
    603c:	cmp	w26, #0xa
    6040:	b.ne	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>  // b.any
    6044:	movi	v0.2d, #0x0
    6048:	mov	w8, #0x1000                	// #4096
    604c:	mov	w9, #0x21                  	// #33
    6050:	add	x10, sp, #0x40
    6054:	stp	q0, q0, [sp, #64]
    6058:	str	w8, [sp, #64]
    605c:	mov	x8, #0xffffffffffffffff    	// #-1
    6060:	stp	q0, q0, [sp, #144]
    6064:	stp	q0, q0, [sp, #112]
    6068:	str	q0, [sp, #96]
    606c:	stp	x9, x10, [sp, #32]
    6070:	str	x8, [sp, #48]
    6074:	ldr	x25, [x20, #32]
    6078:	add	x8, sp, #0x20
    607c:	mov	x0, x20
    6080:	str	x8, [x20, #32]
    6084:	bl	3100 <lzma_block_header_size@plt>
    6088:	cbz	w0, 6098 <lzma_block_buffer_encode@@XZ_5.0+0x2c4>
    608c:	mov	w26, #0xb                   	// #11
    6090:	str	x25, [x20, #32]
    6094:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    6098:	ldr	x8, [x19]
    609c:	ldr	w9, [x20, #4]
    60a0:	ldr	x10, [x20, #16]
    60a4:	sub	x11, x28, x8
    60a8:	add	x9, x10, x9
    60ac:	cmp	x11, x9
    60b0:	b.cs	60c0 <lzma_block_buffer_encode@@XZ_5.0+0x2ec>  // b.hs, b.nlast
    60b4:	mov	w26, #0xa                   	// #10
    60b8:	str	x25, [x20, #32]
    60bc:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    60c0:	add	x1, x21, x8
    60c4:	mov	x0, x20
    60c8:	bl	34c0 <lzma_block_header_encode@plt>
    60cc:	str	x25, [x20, #32]
    60d0:	cbnz	w0, 5e68 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    60d4:	ldr	w8, [x20, #4]
    60d8:	ldr	x9, [x19]
    60dc:	add	x8, x9, x8
    60e0:	add	x9, x8, #0x1
    60e4:	add	x8, x21, x8
    60e8:	str	x9, [x19]
    60ec:	cbz	x22, 61d0 <lzma_block_buffer_encode@@XZ_5.0+0x3fc>
    60f0:	mov	w9, #0x1                   	// #1
    60f4:	strb	w9, [x8]
    60f8:	ldr	x8, [x19]
    60fc:	cmp	x22, #0x10, lsl #12
    6100:	mov	w10, #0x10000               	// #65536
    6104:	csel	x25, x22, x10, cc  // cc = lo, ul, last
    6108:	sub	x9, x25, #0x1
    610c:	lsr	x10, x9, #8
    6110:	add	x11, x8, #0x1
    6114:	str	x11, [x19]
    6118:	strb	w10, [x21, x8]
    611c:	ldr	x8, [x19]
    6120:	mov	x1, x23
    6124:	mov	x2, x25
    6128:	add	x10, x8, #0x1
    612c:	str	x10, [x19]
    6130:	strb	w9, [x21, x8]
    6134:	ldr	x8, [x19]
    6138:	add	x0, x21, x8
    613c:	bl	3040 <memcpy@plt>
    6140:	ldr	x8, [x19]
    6144:	cmp	x22, #0x10, lsl #12
    6148:	add	x8, x8, x25
    614c:	add	x9, x8, #0x1
    6150:	add	x8, x21, x8
    6154:	str	x9, [x19]
    6158:	b.ls	61d0 <lzma_block_buffer_encode@@XZ_5.0+0x3fc>  // b.plast
    615c:	mov	w27, #0x2                   	// #2
    6160:	mov	w28, #0x10000               	// #65536
    6164:	strb	w27, [x8]
    6168:	sub	x8, x22, x25
    616c:	ldr	x9, [x19]
    6170:	cmp	x8, #0x10, lsl #12
    6174:	csel	x26, x8, x28, cc  // cc = lo, ul, last
    6178:	sub	x8, x26, #0x1
    617c:	lsr	x10, x8, #8
    6180:	add	x11, x9, #0x1
    6184:	str	x11, [x19]
    6188:	strb	w10, [x21, x9]
    618c:	ldr	x9, [x19]
    6190:	add	x1, x23, x25
    6194:	mov	x2, x26
    6198:	add	x10, x9, #0x1
    619c:	str	x10, [x19]
    61a0:	strb	w8, [x21, x9]
    61a4:	ldr	x8, [x19]
    61a8:	add	x0, x21, x8
    61ac:	bl	3040 <memcpy@plt>
    61b0:	ldr	x8, [x19]
    61b4:	add	x25, x26, x25
    61b8:	cmp	x25, x22
    61bc:	add	x8, x8, x26
    61c0:	add	x9, x8, #0x1
    61c4:	add	x8, x21, x8
    61c8:	str	x9, [x19]
    61cc:	b.cc	6164 <lzma_block_buffer_encode@@XZ_5.0+0x390>  // b.lo, b.ul, b.last
    61d0:	strb	wzr, [x8]
    61d4:	ldr	x8, [x20, #16]
    61d8:	tst	x8, #0x3
    61dc:	b.eq	6200 <lzma_block_buffer_encode@@XZ_5.0+0x42c>  // b.none
    61e0:	add	x8, x8, #0x1
    61e4:	ldr	x9, [x19]
    61e8:	tst	x8, #0x3
    61ec:	add	x8, x8, #0x1
    61f0:	add	x10, x9, #0x1
    61f4:	str	x10, [x19]
    61f8:	strb	wzr, [x21, x9]
    61fc:	b.ne	61e4 <lzma_block_buffer_encode@@XZ_5.0+0x410>  // b.any
    6200:	ldr	x24, [sp, #24]
    6204:	cbz	w24, 626c <lzma_block_buffer_encode@@XZ_5.0+0x498>
    6208:	ldr	w1, [x20, #8]
    620c:	add	x0, sp, #0x40
    6210:	bl	c1a8 <lzma_check_size@@XZ_5.0+0x20>
    6214:	ldr	w1, [x20, #8]
    6218:	add	x0, sp, #0x40
    621c:	mov	x2, x23
    6220:	mov	x3, x22
    6224:	bl	c1d4 <lzma_check_size@@XZ_5.0+0x4c>
    6228:	ldr	w1, [x20, #8]
    622c:	add	x0, sp, #0x40
    6230:	bl	c254 <lzma_check_size@@XZ_5.0+0xcc>
    6234:	add	x0, x20, #0x28
    6238:	add	x1, sp, #0x40
    623c:	mov	x2, x24
    6240:	bl	3040 <memcpy@plt>
    6244:	ldr	x8, [x19]
    6248:	add	x1, sp, #0x40
    624c:	mov	x2, x24
    6250:	add	x0, x21, x8
    6254:	bl	3040 <memcpy@plt>
    6258:	ldr	x8, [x19]
    625c:	mov	w26, wzr
    6260:	add	x8, x8, x24
    6264:	str	x8, [x19]
    6268:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    626c:	mov	w26, wzr
    6270:	b	5e6c <lzma_block_buffer_encode@@XZ_5.0+0x98>
    6274:	mov	w26, wzr
    6278:	cbnz	w26, 603c <lzma_block_buffer_encode@@XZ_5.0+0x268>
    627c:	b	61d4 <lzma_block_buffer_encode@@XZ_5.0+0x400>

0000000000006280 <lzma_block_uncomp_encode@@XZ_5.2>:
    6280:	mov	x6, x5
    6284:	mov	x5, x4
    6288:	mov	x4, x3
    628c:	mov	x3, x2
    6290:	mov	x2, x1
    6294:	mov	x1, xzr
    6298:	mov	w7, wzr
    629c:	b	5ddc <lzma_block_buffer_encode@@XZ_5.0+0x8>
    62a0:	stp	x29, x30, [sp, #-64]!
    62a4:	stp	x22, x21, [sp, #32]
    62a8:	stp	x20, x19, [sp, #48]
    62ac:	ldr	x8, [x0, #16]
    62b0:	adrp	x22, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    62b4:	add	x22, x22, #0x2a0
    62b8:	mov	x19, x2
    62bc:	mov	x21, x0
    62c0:	cmp	x8, x22
    62c4:	mov	x20, x1
    62c8:	str	x23, [sp, #16]
    62cc:	mov	x29, sp
    62d0:	b.eq	62e0 <lzma_block_uncomp_encode@@XZ_5.2+0x60>  // b.none
    62d4:	mov	x0, x21
    62d8:	mov	x1, x20
    62dc:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    62e0:	str	x22, [x21, #16]
    62e4:	cbz	x19, 6308 <lzma_block_uncomp_encode@@XZ_5.2+0x88>
    62e8:	ldr	w8, [x19]
    62ec:	cmp	w8, #0x1
    62f0:	b.ls	62fc <lzma_block_uncomp_encode@@XZ_5.2+0x7c>  // b.plast
    62f4:	mov	w0, #0x8                   	// #8
    62f8:	b	630c <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    62fc:	ldr	w23, [x19, #8]
    6300:	cmp	w23, #0xf
    6304:	b.ls	6320 <lzma_block_uncomp_encode@@XZ_5.2+0xa0>  // b.plast
    6308:	mov	w0, #0xb                   	// #11
    630c:	ldp	x20, x19, [sp, #48]
    6310:	ldp	x22, x21, [sp, #32]
    6314:	ldr	x23, [sp, #16]
    6318:	ldp	x29, x30, [sp], #64
    631c:	ret
    6320:	mov	w0, w23
    6324:	bl	3080 <lzma_check_is_supported@plt>
    6328:	tst	w0, #0xff
    632c:	b.eq	63c8 <lzma_block_uncomp_encode@@XZ_5.2+0x148>  // b.none
    6330:	ldr	x22, [x21]
    6334:	cbnz	x22, 638c <lzma_block_uncomp_encode@@XZ_5.2+0x10c>
    6338:	mov	w0, #0xd8                  	// #216
    633c:	mov	x1, x20
    6340:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    6344:	cbz	x0, 63d0 <lzma_block_uncomp_encode@@XZ_5.2+0x150>
    6348:	adrp	x8, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    634c:	adrp	x9, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    6350:	add	x8, x8, #0x3d8
    6354:	add	x9, x9, #0x5dc
    6358:	stp	x8, x9, [x21, #24]
    635c:	adrp	x8, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    6360:	add	x8, x8, #0x608
    6364:	str	x8, [x21, #64]
    6368:	mov	x8, #0xffffffffffffffff    	// #-1
    636c:	movi	v0.2d, #0x0
    6370:	str	x0, [x21]
    6374:	stp	xzr, x8, [x0]
    6378:	stp	q0, q0, [x0, #16]
    637c:	str	q0, [x0, #48]
    6380:	str	xzr, [x0, #64]
    6384:	ldr	w23, [x19, #8]
    6388:	mov	x22, x0
    638c:	add	x0, x22, #0x70
    6390:	mov	w1, w23
    6394:	str	wzr, [x22, #80]
    6398:	str	x19, [x22, #72]
    639c:	stp	xzr, xzr, [x22, #96]
    63a0:	str	xzr, [x22, #88]
    63a4:	bl	c1a8 <lzma_check_size@@XZ_5.0+0x20>
    63a8:	ldr	x2, [x19, #32]
    63ac:	mov	x0, x22
    63b0:	mov	x1, x20
    63b4:	ldp	x20, x19, [sp, #48]
    63b8:	ldp	x22, x21, [sp, #32]
    63bc:	ldr	x23, [sp, #16]
    63c0:	ldp	x29, x30, [sp], #64
    63c4:	b	6ca0 <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    63c8:	mov	w0, #0x3                   	// #3
    63cc:	b	630c <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    63d0:	mov	w0, #0x5                   	// #5
    63d4:	b	630c <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    63d8:	sub	sp, sp, #0x70
    63dc:	stp	x29, x30, [sp, #16]
    63e0:	stp	x28, x27, [sp, #32]
    63e4:	stp	x26, x25, [sp, #48]
    63e8:	stp	x24, x23, [sp, #64]
    63ec:	stp	x22, x21, [sp, #80]
    63f0:	stp	x20, x19, [sp, #96]
    63f4:	ldr	x8, [x0, #96]
    63f8:	ldr	x26, [x3]
    63fc:	mov	x9, #0x7fffffffffffffff    	// #9223372036854775807
    6400:	add	x29, sp, #0x10
    6404:	sub	x8, x9, x8
    6408:	sub	x9, x4, x26
    640c:	cmp	x8, x9
    6410:	b.cs	641c <lzma_block_uncomp_encode@@XZ_5.2+0x19c>  // b.hs, b.nlast
    6414:	mov	w24, #0x9                   	// #9
    6418:	b	65b8 <lzma_block_uncomp_encode@@XZ_5.2+0x338>
    641c:	ldr	w8, [x0, #80]
    6420:	mov	x20, x7
    6424:	mov	x21, x6
    6428:	mov	x22, x5
    642c:	mov	x19, x0
    6430:	cbz	w8, 6458 <lzma_block_uncomp_encode@@XZ_5.2+0x1d8>
    6434:	cmp	w8, #0x2
    6438:	b.eq	6554 <lzma_block_uncomp_encode@@XZ_5.2+0x2d4>  // b.none
    643c:	cmp	w8, #0x1
    6440:	b.ne	6598 <lzma_block_uncomp_encode@@XZ_5.2+0x318>  // b.any
    6444:	mov	x25, x19
    6448:	ldr	x9, [x25, #88]!
    644c:	tst	x9, #0x3
    6450:	b.ne	650c <lzma_block_uncomp_encode@@XZ_5.2+0x28c>  // b.any
    6454:	b	6538 <lzma_block_uncomp_encode@@XZ_5.2+0x2b8>
    6458:	ldr	w27, [x29, #96]
    645c:	ldr	x8, [x19, #24]
    6460:	ldr	x0, [x19]
    6464:	ldr	x28, [x21]
    6468:	mov	x5, x22
    646c:	mov	x6, x21
    6470:	mov	x7, x20
    6474:	mov	x24, x3
    6478:	mov	x23, x2
    647c:	str	w27, [sp]
    6480:	blr	x8
    6484:	mov	x25, x19
    6488:	ldr	x9, [x21]
    648c:	ldr	x10, [x24]
    6490:	ldr	x8, [x25, #88]!
    6494:	mov	x11, #0xfffffffffffffbbc    	// #-1092
    6498:	movk	x11, #0x7fff, lsl #48
    649c:	sub	x9, x9, x28
    64a0:	sub	x11, x11, x8
    64a4:	cmp	x11, x9
    64a8:	b.cc	6414 <lzma_block_uncomp_encode@@XZ_5.2+0x194>  // b.lo, b.ul, b.last
    64ac:	sub	x3, x10, x26
    64b0:	ldr	x10, [x19, #96]
    64b4:	add	x8, x8, x9
    64b8:	ldr	x9, [x19, #72]
    64bc:	str	x8, [x19, #88]
    64c0:	add	x8, x10, x3
    64c4:	str	x8, [x19, #96]
    64c8:	ldr	w1, [x9, #8]
    64cc:	mov	w24, w0
    64d0:	add	x0, x19, #0x70
    64d4:	add	x2, x23, x26
    64d8:	bl	c1d4 <lzma_check_size@@XZ_5.0+0x4c>
    64dc:	cmp	w27, #0x1
    64e0:	b.eq	65b8 <lzma_block_uncomp_encode@@XZ_5.2+0x338>  // b.none
    64e4:	cmp	w24, #0x1
    64e8:	b.ne	65b8 <lzma_block_uncomp_encode@@XZ_5.2+0x338>  // b.any
    64ec:	ldr	x8, [x19, #72]
    64f0:	ldur	q0, [x19, #88]
    64f4:	mov	w9, #0x1                   	// #1
    64f8:	str	q0, [x8, #16]
    64fc:	str	w9, [x19, #80]
    6500:	fmov	x9, d0
    6504:	tst	x9, #0x3
    6508:	b.eq	6538 <lzma_block_uncomp_encode@@XZ_5.2+0x2b8>  // b.none
    650c:	ldr	x8, [x21]
    6510:	add	x9, x9, #0x1
    6514:	cmp	x8, x20
    6518:	b.cs	6590 <lzma_block_uncomp_encode@@XZ_5.2+0x310>  // b.hs, b.nlast
    651c:	strb	wzr, [x22, x8]
    6520:	add	x8, x8, #0x1
    6524:	tst	x9, #0x3
    6528:	str	x8, [x21]
    652c:	str	x9, [x25]
    6530:	add	x9, x9, #0x1
    6534:	b.ne	6514 <lzma_block_uncomp_encode@@XZ_5.2+0x294>  // b.any
    6538:	ldr	x8, [x19, #72]
    653c:	ldr	w1, [x8, #8]
    6540:	cbz	w1, 65b4 <lzma_block_uncomp_encode@@XZ_5.2+0x334>
    6544:	add	x0, x19, #0x70
    6548:	bl	c254 <lzma_check_size@@XZ_5.0+0xcc>
    654c:	mov	w8, #0x2                   	// #2
    6550:	str	w8, [x19, #80]
    6554:	ldr	x8, [x19, #72]
    6558:	ldr	w0, [x8, #8]
    655c:	bl	3200 <lzma_check_size@plt>
    6560:	mov	w23, w0
    6564:	add	x24, x19, #0x70
    6568:	add	x1, x19, #0x68
    656c:	mov	x0, x24
    6570:	mov	x2, x23
    6574:	mov	x3, x22
    6578:	mov	x4, x21
    657c:	mov	x5, x20
    6580:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    6584:	ldr	x8, [x19, #104]
    6588:	cmp	x8, x23
    658c:	b.cs	65a0 <lzma_block_uncomp_encode@@XZ_5.2+0x320>  // b.hs, b.nlast
    6590:	mov	w24, wzr
    6594:	b	65b8 <lzma_block_uncomp_encode@@XZ_5.2+0x338>
    6598:	mov	w24, #0xb                   	// #11
    659c:	b	65b8 <lzma_block_uncomp_encode@@XZ_5.2+0x338>
    65a0:	ldr	x8, [x19, #72]
    65a4:	mov	x1, x24
    65a8:	mov	x2, x23
    65ac:	add	x0, x8, #0x28
    65b0:	bl	3040 <memcpy@plt>
    65b4:	mov	w24, #0x1                   	// #1
    65b8:	mov	w0, w24
    65bc:	ldp	x20, x19, [sp, #96]
    65c0:	ldp	x22, x21, [sp, #80]
    65c4:	ldp	x24, x23, [sp, #64]
    65c8:	ldp	x26, x25, [sp, #48]
    65cc:	ldp	x28, x27, [sp, #32]
    65d0:	ldp	x29, x30, [sp, #16]
    65d4:	add	sp, sp, #0x70
    65d8:	ret
    65dc:	stp	x29, x30, [sp, #-32]!
    65e0:	stp	x20, x19, [sp, #16]
    65e4:	mov	x29, sp
    65e8:	mov	x19, x1
    65ec:	mov	x20, x0
    65f0:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    65f4:	mov	x0, x20
    65f8:	mov	x1, x19
    65fc:	ldp	x20, x19, [sp, #16]
    6600:	ldp	x29, x30, [sp], #32
    6604:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    6608:	ldr	w8, [x0, #80]
    660c:	cbz	w8, 6618 <lzma_block_uncomp_encode@@XZ_5.2+0x398>
    6610:	mov	w0, #0xb                   	// #11
    6614:	ret
    6618:	mov	x2, x3
    661c:	b	38cc <lzma_version_string@@XZ_5.0+0x27c>

0000000000006620 <lzma_block_encoder@@XZ_5.0>:
    6620:	stp	x29, x30, [sp, #-48]!
    6624:	str	x21, [sp, #16]
    6628:	stp	x20, x19, [sp, #32]
    662c:	mov	x29, sp
    6630:	mov	x21, x1
    6634:	mov	x19, x0
    6638:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    663c:	mov	w20, w0
    6640:	cbnz	w0, 6674 <lzma_block_encoder@@XZ_5.0+0x54>
    6644:	ldp	x1, x0, [x19, #48]
    6648:	mov	x2, x21
    664c:	bl	62a0 <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    6650:	mov	w20, w0
    6654:	cbz	w0, 6664 <lzma_block_encoder@@XZ_5.0+0x44>
    6658:	mov	x0, x19
    665c:	bl	32c0 <lzma_end@plt>
    6660:	b	6674 <lzma_block_encoder@@XZ_5.0+0x54>
    6664:	ldr	x8, [x19, #56]
    6668:	mov	w9, #0x1                   	// #1
    666c:	strb	w9, [x8, #88]
    6670:	strb	w9, [x8, #91]
    6674:	mov	w0, w20
    6678:	ldp	x20, x19, [sp, #32]
    667c:	ldr	x21, [sp, #16]
    6680:	ldp	x29, x30, [sp], #48
    6684:	ret

0000000000006688 <lzma_block_header_size@@XZ_5.0>:
    6688:	sub	sp, sp, #0x40
    668c:	stp	x29, x30, [sp, #16]
    6690:	stp	x22, x21, [sp, #32]
    6694:	stp	x20, x19, [sp, #48]
    6698:	ldr	w8, [x0]
    669c:	add	x29, sp, #0x10
    66a0:	cmp	w8, #0x1
    66a4:	b.ls	66b0 <lzma_block_header_size@@XZ_5.0+0x28>  // b.plast
    66a8:	mov	w0, #0x8                   	// #8
    66ac:	b	6768 <lzma_block_header_size@@XZ_5.0+0xe0>
    66b0:	ldr	x20, [x0, #16]
    66b4:	mov	x19, x0
    66b8:	cmn	x20, #0x1
    66bc:	b.eq	66e0 <lzma_block_header_size@@XZ_5.0+0x58>  // b.none
    66c0:	mov	x0, x20
    66c4:	bl	3400 <lzma_vli_size@plt>
    66c8:	mov	w8, w0
    66cc:	mov	w0, #0xb                   	// #11
    66d0:	cbz	x20, 6768 <lzma_block_header_size@@XZ_5.0+0xe0>
    66d4:	cbz	w8, 6768 <lzma_block_header_size@@XZ_5.0+0xe0>
    66d8:	add	w20, w8, #0x6
    66dc:	b	66e4 <lzma_block_header_size@@XZ_5.0+0x5c>
    66e0:	mov	w20, #0x6                   	// #6
    66e4:	ldr	x0, [x19, #24]
    66e8:	cmn	x0, #0x1
    66ec:	b.eq	66fc <lzma_block_header_size@@XZ_5.0+0x74>  // b.none
    66f0:	bl	3400 <lzma_vli_size@plt>
    66f4:	cbz	w0, 6764 <lzma_block_header_size@@XZ_5.0+0xdc>
    66f8:	add	w20, w0, w20
    66fc:	ldr	x8, [x19, #32]
    6700:	cbz	x8, 6764 <lzma_block_header_size@@XZ_5.0+0xdc>
    6704:	ldr	x9, [x8]
    6708:	cmn	x9, #0x1
    670c:	b.eq	6764 <lzma_block_header_size@@XZ_5.0+0xdc>  // b.none
    6710:	mov	w21, #0x10                  	// #16
    6714:	add	x22, x21, #0x10
    6718:	cmp	x22, #0x60
    671c:	b.eq	6764 <lzma_block_header_size@@XZ_5.0+0xdc>  // b.none
    6720:	add	x8, x8, x21
    6724:	sub	x1, x8, #0x10
    6728:	sub	x0, x29, #0x4
    672c:	bl	3090 <lzma_filter_flags_size@plt>
    6730:	cbnz	w0, 6768 <lzma_block_header_size@@XZ_5.0+0xe0>
    6734:	ldr	x8, [x19, #32]
    6738:	ldur	w10, [x29, #-4]
    673c:	ldr	x9, [x8, x21]
    6740:	add	w20, w10, w20
    6744:	mov	x21, x22
    6748:	cmn	x9, #0x1
    674c:	b.ne	6714 <lzma_block_header_size@@XZ_5.0+0x8c>  // b.any
    6750:	add	w8, w20, #0x3
    6754:	mov	w0, wzr
    6758:	and	w8, w8, #0xfffffffc
    675c:	str	w8, [x19, #4]
    6760:	b	6768 <lzma_block_header_size@@XZ_5.0+0xe0>
    6764:	mov	w0, #0xb                   	// #11
    6768:	ldp	x20, x19, [sp, #48]
    676c:	ldp	x22, x21, [sp, #32]
    6770:	ldp	x29, x30, [sp, #16]
    6774:	add	sp, sp, #0x40
    6778:	ret

000000000000677c <lzma_block_header_encode@@XZ_5.0>:
    677c:	stp	x29, x30, [sp, #-64]!
    6780:	str	x23, [sp, #16]
    6784:	stp	x22, x21, [sp, #32]
    6788:	stp	x20, x19, [sp, #48]
    678c:	mov	x29, sp
    6790:	mov	x19, x1
    6794:	mov	x21, x0
    6798:	bl	3130 <lzma_block_unpadded_size@plt>
    679c:	cbz	x0, 68c0 <lzma_block_header_encode@@XZ_5.0+0x144>
    67a0:	ldr	x8, [x21, #24]
    67a4:	cmn	x8, #0x1
    67a8:	b.lt	68c0 <lzma_block_header_encode@@XZ_5.0+0x144>  // b.tstop
    67ac:	ldr	w8, [x21, #4]
    67b0:	mov	w9, #0x2                   	// #2
    67b4:	strb	wzr, [x19, #1]
    67b8:	sub	w20, w8, #0x4
    67bc:	lsr	w8, w20, #2
    67c0:	strb	w8, [x19]
    67c4:	str	x9, [x29, #24]
    67c8:	ldr	x0, [x21, #16]
    67cc:	cmn	x0, #0x1
    67d0:	b.eq	67f8 <lzma_block_header_encode@@XZ_5.0+0x7c>  // b.none
    67d4:	add	x3, x29, #0x18
    67d8:	mov	x1, xzr
    67dc:	mov	x2, x19
    67e0:	mov	x4, x20
    67e4:	bl	33d0 <lzma_vli_encode@plt>
    67e8:	cbnz	w0, 68c4 <lzma_block_header_encode@@XZ_5.0+0x148>
    67ec:	ldrb	w8, [x19, #1]
    67f0:	orr	w8, w8, #0x40
    67f4:	strb	w8, [x19, #1]
    67f8:	ldr	x0, [x21, #24]
    67fc:	cmn	x0, #0x1
    6800:	b.eq	6828 <lzma_block_header_encode@@XZ_5.0+0xac>  // b.none
    6804:	add	x3, x29, #0x18
    6808:	mov	x1, xzr
    680c:	mov	x2, x19
    6810:	mov	x4, x20
    6814:	bl	33d0 <lzma_vli_encode@plt>
    6818:	cbnz	w0, 68c4 <lzma_block_header_encode@@XZ_5.0+0x148>
    681c:	ldrb	w8, [x19, #1]
    6820:	orr	w8, w8, #0x80
    6824:	strb	w8, [x19, #1]
    6828:	ldr	x8, [x21, #32]
    682c:	cbz	x8, 68c0 <lzma_block_header_encode@@XZ_5.0+0x144>
    6830:	ldr	x9, [x8]
    6834:	cmn	x9, #0x1
    6838:	b.eq	68c0 <lzma_block_header_encode@@XZ_5.0+0x144>  // b.none
    683c:	mov	x23, xzr
    6840:	mov	x22, #0xffffffffffffffff    	// #-1
    6844:	cmp	x22, #0x3
    6848:	b.eq	68c0 <lzma_block_header_encode@@XZ_5.0+0x144>  // b.none
    684c:	add	x0, x8, x23
    6850:	add	x2, x29, #0x18
    6854:	mov	x1, x19
    6858:	mov	x3, x20
    685c:	bl	32e0 <lzma_filter_flags_encode@plt>
    6860:	cbnz	w0, 68c4 <lzma_block_header_encode@@XZ_5.0+0x148>
    6864:	ldr	x8, [x21, #32]
    6868:	add	x22, x22, #0x1
    686c:	add	x9, x8, x23
    6870:	ldr	x9, [x9, #16]
    6874:	add	x23, x23, #0x10
    6878:	cmn	x9, #0x1
    687c:	b.ne	6844 <lzma_block_header_encode@@XZ_5.0+0xc8>  // b.any
    6880:	ldrb	w8, [x19, #1]
    6884:	mov	w1, wzr
    6888:	orr	w8, w8, w22
    688c:	strb	w8, [x19, #1]
    6890:	ldr	x8, [x29, #24]
    6894:	add	x0, x19, x8
    6898:	sub	x2, x20, x8
    689c:	bl	31c0 <memset@plt>
    68a0:	mov	x0, x19
    68a4:	mov	x1, x20
    68a8:	mov	w2, wzr
    68ac:	bl	3160 <lzma_crc32@plt>
    68b0:	mov	w8, w0
    68b4:	mov	w0, wzr
    68b8:	str	w8, [x19, x20]
    68bc:	b	68c4 <lzma_block_header_encode@@XZ_5.0+0x148>
    68c0:	mov	w0, #0xb                   	// #11
    68c4:	ldp	x20, x19, [sp, #48]
    68c8:	ldp	x22, x21, [sp, #32]
    68cc:	ldr	x23, [sp, #16]
    68d0:	ldp	x29, x30, [sp], #64
    68d4:	ret

00000000000068d8 <lzma_easy_buffer_encode@@XZ_5.0>:
    68d8:	sub	sp, sp, #0x110
    68dc:	stp	x28, x25, [sp, #208]
    68e0:	mov	w25, w1
    68e4:	mov	w1, w0
    68e8:	mov	x0, sp
    68ec:	stp	x29, x30, [sp, #192]
    68f0:	stp	x24, x23, [sp, #224]
    68f4:	stp	x22, x21, [sp, #240]
    68f8:	stp	x20, x19, [sp, #256]
    68fc:	add	x29, sp, #0xc0
    6900:	mov	x19, x7
    6904:	mov	x20, x6
    6908:	mov	x21, x5
    690c:	mov	x22, x4
    6910:	mov	x23, x3
    6914:	mov	x24, x2
    6918:	bl	406c <lzma_block_total_size@@XZ_5.0+0xa8>
    691c:	tbz	w0, #0, 6928 <lzma_easy_buffer_encode@@XZ_5.0+0x50>
    6920:	mov	w0, #0x8                   	// #8
    6924:	b	694c <lzma_easy_buffer_encode@@XZ_5.0+0x74>
    6928:	mov	x0, sp
    692c:	mov	w1, w25
    6930:	mov	x2, x24
    6934:	mov	x3, x23
    6938:	mov	x4, x22
    693c:	mov	x5, x21
    6940:	mov	x6, x20
    6944:	mov	x7, x19
    6948:	bl	3180 <lzma_stream_buffer_encode@plt>
    694c:	ldp	x20, x19, [sp, #256]
    6950:	ldp	x22, x21, [sp, #240]
    6954:	ldp	x24, x23, [sp, #224]
    6958:	ldp	x28, x25, [sp, #208]
    695c:	ldp	x29, x30, [sp, #192]
    6960:	add	sp, sp, #0x110
    6964:	ret

0000000000006968 <lzma_easy_encoder@@XZ_5.0>:
    6968:	sub	sp, sp, #0xe0
    696c:	stp	x20, x19, [sp, #208]
    6970:	mov	x20, x0
    6974:	mov	x0, sp
    6978:	stp	x29, x30, [sp, #192]
    697c:	add	x29, sp, #0xc0
    6980:	mov	w19, w2
    6984:	bl	406c <lzma_block_total_size@@XZ_5.0+0xa8>
    6988:	tbz	w0, #0, 6994 <lzma_easy_encoder@@XZ_5.0+0x2c>
    698c:	mov	w0, #0x8                   	// #8
    6990:	b	69a4 <lzma_easy_encoder@@XZ_5.0+0x3c>
    6994:	mov	x1, sp
    6998:	mov	x0, x20
    699c:	mov	w2, w19
    69a0:	bl	3420 <lzma_stream_encoder@plt>
    69a4:	ldp	x20, x19, [sp, #208]
    69a8:	ldp	x29, x30, [sp, #192]
    69ac:	add	sp, sp, #0xe0
    69b0:	ret

00000000000069b4 <lzma_easy_encoder_memusage@@XZ_5.0>:
    69b4:	sub	sp, sp, #0xd0
    69b8:	mov	w1, w0
    69bc:	mov	x0, sp
    69c0:	stp	x29, x30, [sp, #192]
    69c4:	add	x29, sp, #0xc0
    69c8:	bl	406c <lzma_block_total_size@@XZ_5.0+0xa8>
    69cc:	tbz	w0, #0, 69d8 <lzma_easy_encoder_memusage@@XZ_5.0+0x24>
    69d0:	mov	w0, #0xffffffff            	// #-1
    69d4:	b	69e0 <lzma_easy_encoder_memusage@@XZ_5.0+0x2c>
    69d8:	mov	x0, sp
    69dc:	bl	31b0 <lzma_raw_encoder_memusage@plt>
    69e0:	ldp	x29, x30, [sp, #192]
    69e4:	add	sp, sp, #0xd0
    69e8:	ret

00000000000069ec <lzma_raw_buffer_encode@@XZ_5.0>:
    69ec:	sub	sp, sp, #0xb0
    69f0:	cmp	x2, #0x0
    69f4:	cset	w8, eq  // eq = none
    69f8:	cmp	x3, #0x0
    69fc:	cset	w9, ne  // ne = any
    6a00:	stp	x26, x25, [sp, #112]
    6a04:	stp	x24, x23, [sp, #128]
    6a08:	mov	x24, x2
    6a0c:	and	w8, w8, w9
    6a10:	mov	w25, #0xb                   	// #11
    6a14:	stp	x29, x30, [sp, #96]
    6a18:	stp	x22, x21, [sp, #144]
    6a1c:	stp	x20, x19, [sp, #160]
    6a20:	add	x29, sp, #0x60
    6a24:	tbnz	w8, #0, 6ae8 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6a28:	mov	x22, x4
    6a2c:	cbz	x4, 6ae8 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6a30:	mov	x19, x5
    6a34:	cbz	x5, 6ae8 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6a38:	ldr	x8, [x19]
    6a3c:	mov	x21, x6
    6a40:	cmp	x8, x6
    6a44:	b.ls	6a50 <lzma_raw_buffer_encode@@XZ_5.0+0x64>  // b.plast
    6a48:	mov	w25, #0xb                   	// #11
    6a4c:	b	6ae8 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6a50:	mov	x2, x0
    6a54:	movi	v0.2d, #0x0
    6a58:	mov	x8, #0xffffffffffffffff    	// #-1
    6a5c:	add	x0, sp, #0x10
    6a60:	mov	x23, x3
    6a64:	mov	x20, x1
    6a68:	str	xzr, [sp, #80]
    6a6c:	stp	q0, q0, [sp, #48]
    6a70:	stp	q0, q0, [sp, #16]
    6a74:	str	x8, [sp, #24]
    6a78:	bl	6ca0 <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    6a7c:	mov	w25, w0
    6a80:	cbnz	w0, 6ae8 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6a84:	ldr	x8, [sp, #40]
    6a88:	ldr	x0, [sp, #16]
    6a8c:	ldr	x26, [x19]
    6a90:	mov	w9, #0x3                   	// #3
    6a94:	add	x3, sp, #0x8
    6a98:	mov	x1, x20
    6a9c:	mov	x2, x24
    6aa0:	mov	x4, x23
    6aa4:	mov	x5, x22
    6aa8:	mov	x6, x19
    6aac:	mov	x7, x21
    6ab0:	str	xzr, [sp, #8]
    6ab4:	str	w9, [sp]
    6ab8:	blr	x8
    6abc:	mov	w25, w0
    6ac0:	add	x0, sp, #0x10
    6ac4:	mov	x1, x20
    6ac8:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    6acc:	cmp	w25, #0x1
    6ad0:	b.eq	6ae4 <lzma_raw_buffer_encode@@XZ_5.0+0xf8>  // b.none
    6ad4:	cbnz	w25, 6adc <lzma_raw_buffer_encode@@XZ_5.0+0xf0>
    6ad8:	mov	w25, #0xa                   	// #10
    6adc:	str	x26, [x19]
    6ae0:	b	6ae8 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6ae4:	mov	w25, wzr
    6ae8:	mov	w0, w25
    6aec:	ldp	x20, x19, [sp, #160]
    6af0:	ldp	x22, x21, [sp, #144]
    6af4:	ldp	x24, x23, [sp, #128]
    6af8:	ldp	x26, x25, [sp, #112]
    6afc:	ldp	x29, x30, [sp, #96]
    6b00:	add	sp, sp, #0xb0
    6b04:	ret

0000000000006b08 <lzma_filter_encoder_is_supported@@XZ_5.0>:
    6b08:	sub	x8, x0, #0x3
    6b0c:	cmp	x8, #0x7
    6b10:	b.cs	6b1c <lzma_filter_encoder_is_supported@@XZ_5.0+0x14>  // b.hs, b.nlast
    6b14:	mov	w0, #0x1                   	// #1
    6b18:	ret
    6b1c:	mov	x8, #0x1                   	// #1
    6b20:	movk	x8, #0x4000, lsl #48
    6b24:	cmp	x0, x8
    6b28:	b.eq	6b14 <lzma_filter_encoder_is_supported@@XZ_5.0+0xc>  // b.none
    6b2c:	cmp	x0, #0x21
    6b30:	b.eq	6b14 <lzma_filter_encoder_is_supported@@XZ_5.0+0xc>  // b.none
    6b34:	mov	w0, wzr
    6b38:	ret
    6b3c:	sub	x9, x0, #0x3
    6b40:	mov	x8, x0
    6b44:	cmp	x9, #0x1e
    6b48:	mov	x0, xzr
    6b4c:	b.hi	6b70 <lzma_filter_encoder_is_supported@@XZ_5.0+0x68>  // b.pmore
    6b50:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    6b54:	add	x8, x8, #0x840
    6b58:	adr	x10, 6b68 <lzma_filter_encoder_is_supported@@XZ_5.0+0x60>
    6b5c:	ldrb	w11, [x8, x9]
    6b60:	add	x10, x10, x11, lsl #2
    6b64:	br	x10
    6b68:	mov	w8, #0x8                   	// #8
    6b6c:	b	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6b70:	mov	x9, #0x1                   	// #1
    6b74:	movk	x9, #0x4000, lsl #48
    6b78:	cmp	x8, x9
    6b7c:	mov	x8, xzr
    6b80:	b.eq	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>  // b.none
    6b84:	ret
    6b88:	mov	w8, #0x2                   	// #2
    6b8c:	b	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6b90:	mov	w8, #0x3                   	// #3
    6b94:	b	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6b98:	mov	w8, #0x4                   	// #4
    6b9c:	b	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6ba0:	mov	w8, #0x5                   	// #5
    6ba4:	b	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6ba8:	mov	w8, #0x6                   	// #6
    6bac:	b	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6bb0:	mov	w8, #0x7                   	// #7
    6bb4:	b	6bbc <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6bb8:	mov	w8, #0x1                   	// #1
    6bbc:	adrp	x10, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    6bc0:	mov	w9, #0x38                  	// #56
    6bc4:	add	x10, x10, #0xa00
    6bc8:	madd	x0, x8, x9, x10
    6bcc:	ret

0000000000006bd0 <lzma_filters_update@@XZ_5.0>:
    6bd0:	sub	sp, sp, #0x70
    6bd4:	stp	x29, x30, [sp, #80]
    6bd8:	stp	x20, x19, [sp, #96]
    6bdc:	ldr	x8, [x0, #56]
    6be0:	add	x29, sp, #0x50
    6be4:	ldr	x8, [x8, #64]
    6be8:	cbz	x8, 6c70 <lzma_filters_update@@XZ_5.0+0xa0>
    6bec:	mov	x20, x0
    6bf0:	adrp	x0, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    6bf4:	add	x0, x0, #0xb3c
    6bf8:	mov	x19, x1
    6bfc:	bl	440c <lzma_filters_copy@@XZ_5.0+0x354>
    6c00:	cmn	x0, #0x1
    6c04:	b.eq	6c78 <lzma_filters_update@@XZ_5.0+0xa8>  // b.none
    6c08:	mov	x9, xzr
    6c0c:	mov	x8, xzr
    6c10:	add	x10, x19, x8
    6c14:	ldr	x10, [x10, #16]
    6c18:	add	x8, x8, #0x10
    6c1c:	add	x9, x9, #0x1
    6c20:	cmn	x10, #0x1
    6c24:	b.ne	6c10 <lzma_filters_update@@XZ_5.0+0x40>  // b.any
    6c28:	mov	x10, sp
    6c2c:	cbz	x9, 6c4c <lzma_filters_update@@XZ_5.0+0x7c>
    6c30:	add	x11, x10, x8
    6c34:	sub	x11, x11, #0x10
    6c38:	mov	x12, x19
    6c3c:	ldr	q0, [x12], #16
    6c40:	sub	x9, x9, #0x1
    6c44:	str	q0, [x11], #-16
    6c48:	cbnz	x9, 6c3c <lzma_filters_update@@XZ_5.0+0x6c>
    6c4c:	mov	x9, #0xffffffffffffffff    	// #-1
    6c50:	str	x9, [x10, x8]
    6c54:	ldp	x1, x8, [x20, #48]
    6c58:	mov	x3, sp
    6c5c:	mov	x2, x19
    6c60:	ldr	x9, [x8, #64]
    6c64:	ldr	x0, [x8]
    6c68:	blr	x9
    6c6c:	b	6c7c <lzma_filters_update@@XZ_5.0+0xac>
    6c70:	mov	w0, #0xb                   	// #11
    6c74:	b	6c7c <lzma_filters_update@@XZ_5.0+0xac>
    6c78:	mov	w0, #0x8                   	// #8
    6c7c:	ldp	x20, x19, [sp, #96]
    6c80:	ldp	x29, x30, [sp, #80]
    6c84:	add	sp, sp, #0x70
    6c88:	ret

0000000000006c8c <lzma_raw_encoder_memusage@@XZ_5.0>:
    6c8c:	adrp	x8, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    6c90:	add	x8, x8, #0xb3c
    6c94:	mov	x1, x0
    6c98:	mov	x0, x8
    6c9c:	b	440c <lzma_filters_copy@@XZ_5.0+0x354>
    6ca0:	adrp	x3, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    6ca4:	add	x3, x3, #0xb3c
    6ca8:	mov	w4, #0x1                   	// #1
    6cac:	b	4230 <lzma_filters_copy@@XZ_5.0+0x178>

0000000000006cb0 <lzma_raw_encoder@@XZ_5.0>:
    6cb0:	stp	x29, x30, [sp, #-48]!
    6cb4:	stp	x22, x21, [sp, #16]
    6cb8:	stp	x20, x19, [sp, #32]
    6cbc:	mov	x29, sp
    6cc0:	mov	x21, x1
    6cc4:	mov	x19, x0
    6cc8:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    6ccc:	mov	w20, w0
    6cd0:	cbnz	w0, 6d14 <lzma_raw_encoder@@XZ_5.0+0x64>
    6cd4:	ldp	x1, x0, [x19, #48]
    6cd8:	adrp	x3, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x22c>
    6cdc:	add	x3, x3, #0xb3c
    6ce0:	mov	w4, #0x1                   	// #1
    6ce4:	mov	x2, x21
    6ce8:	mov	w22, #0x1                   	// #1
    6cec:	bl	4230 <lzma_filters_copy@@XZ_5.0+0x178>
    6cf0:	mov	w20, w0
    6cf4:	cbz	w0, 6d04 <lzma_raw_encoder@@XZ_5.0+0x54>
    6cf8:	mov	x0, x19
    6cfc:	bl	32c0 <lzma_end@plt>
    6d00:	b	6d14 <lzma_raw_encoder@@XZ_5.0+0x64>
    6d04:	ldr	x8, [x19, #56]
    6d08:	mov	w9, #0x101                 	// #257
    6d0c:	strh	w9, [x8, #88]
    6d10:	strb	w22, [x8, #91]
    6d14:	mov	w0, w20
    6d18:	ldp	x20, x19, [sp, #32]
    6d1c:	ldp	x22, x21, [sp, #16]
    6d20:	ldp	x29, x30, [sp], #48
    6d24:	ret
    6d28:	stp	x29, x30, [sp, #-64]!
    6d2c:	stp	x24, x23, [sp, #16]
    6d30:	stp	x22, x21, [sp, #32]
    6d34:	mov	x21, #0x1                   	// #1
    6d38:	adrp	x23, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    6d3c:	adrp	x24, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    6d40:	stp	x20, x19, [sp, #48]
    6d44:	mov	x19, xzr
    6d48:	add	x20, x0, #0x8
    6d4c:	movk	x21, #0x4000, lsl #48
    6d50:	mov	w22, #0x38                  	// #56
    6d54:	add	x23, x23, #0xa00
    6d58:	add	x24, x24, #0x85f
    6d5c:	mov	x29, sp
    6d60:	b	6d68 <lzma_raw_encoder@@XZ_5.0+0xb8>
    6d64:	add	x20, x20, #0x10
    6d68:	ldur	x9, [x20, #-8]
    6d6c:	mov	x8, xzr
    6d70:	add	x10, x9, #0x1
    6d74:	cmp	x10, #0x22
    6d78:	b.hi	6d94 <lzma_raw_encoder@@XZ_5.0+0xe4>  // b.pmore
    6d7c:	adr	x9, 6d8c <lzma_raw_encoder@@XZ_5.0+0xdc>
    6d80:	ldrb	w11, [x24, x10]
    6d84:	add	x9, x9, x11, lsl #2
    6d88:	br	x9
    6d8c:	mov	w9, #0x8                   	// #8
    6d90:	b	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>
    6d94:	cmp	x9, x21
    6d98:	mov	x9, xzr
    6d9c:	b.eq	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>  // b.none
    6da0:	b	6ddc <lzma_raw_encoder@@XZ_5.0+0x12c>
    6da4:	mov	w9, #0x2                   	// #2
    6da8:	b	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>
    6dac:	mov	w9, #0x3                   	// #3
    6db0:	b	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>
    6db4:	mov	w9, #0x4                   	// #4
    6db8:	b	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>
    6dbc:	mov	w9, #0x5                   	// #5
    6dc0:	b	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>
    6dc4:	mov	w9, #0x6                   	// #6
    6dc8:	b	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>
    6dcc:	mov	w9, #0x7                   	// #7
    6dd0:	b	6dd8 <lzma_raw_encoder@@XZ_5.0+0x128>
    6dd4:	mov	w9, #0x1                   	// #1
    6dd8:	madd	x8, x9, x22, x23
    6ddc:	ldr	x8, [x8, #24]
    6de0:	cbz	x8, 6d64 <lzma_raw_encoder@@XZ_5.0+0xb4>
    6de4:	ldr	x0, [x20]
    6de8:	blr	x8
    6dec:	cmp	x0, x19
    6df0:	csel	x19, x0, x19, hi  // hi = pmore
    6df4:	cbnz	x0, 6d64 <lzma_raw_encoder@@XZ_5.0+0xb4>
    6df8:	mov	x19, xzr
    6dfc:	mov	x0, x19
    6e00:	ldp	x20, x19, [sp, #48]
    6e04:	ldp	x22, x21, [sp, #32]
    6e08:	ldp	x24, x23, [sp, #16]
    6e0c:	ldp	x29, x30, [sp], #64
    6e10:	ret

0000000000006e14 <lzma_properties_size@@XZ_5.0>:
    6e14:	ldr	x9, [x1]
    6e18:	sub	x8, x9, #0x3
    6e1c:	cmp	x8, #0x1e
    6e20:	b.hi	6e48 <lzma_properties_size@@XZ_5.0+0x34>  // b.pmore
    6e24:	adrp	x10, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    6e28:	add	x10, x10, #0x882
    6e2c:	adr	x11, 6e40 <lzma_properties_size@@XZ_5.0+0x2c>
    6e30:	ldrb	w12, [x10, x8]
    6e34:	add	x11, x11, x12, lsl #2
    6e38:	mov	w8, #0x2                   	// #2
    6e3c:	br	x11
    6e40:	mov	w9, #0x8                   	// #8
    6e44:	b	6eb8 <lzma_properties_size@@XZ_5.0+0xa4>
    6e48:	mov	x8, #0x1                   	// #1
    6e4c:	movk	x8, #0x4000, lsl #48
    6e50:	cmp	x9, x8
    6e54:	b.ne	6e60 <lzma_properties_size@@XZ_5.0+0x4c>  // b.any
    6e58:	mov	x9, xzr
    6e5c:	b	6eb8 <lzma_properties_size@@XZ_5.0+0xa4>
    6e60:	cmp	x9, #0x0
    6e64:	mov	w8, #0xb                   	// #11
    6e68:	mov	w9, #0x8                   	// #8
    6e6c:	csel	w0, w9, w8, ge  // ge = tcont
    6e70:	ret
    6e74:	mov	w8, #0x3                   	// #3
    6e78:	b	6e98 <lzma_properties_size@@XZ_5.0+0x84>
    6e7c:	mov	w8, #0x4                   	// #4
    6e80:	b	6e98 <lzma_properties_size@@XZ_5.0+0x84>
    6e84:	mov	w8, #0x5                   	// #5
    6e88:	b	6e98 <lzma_properties_size@@XZ_5.0+0x84>
    6e8c:	mov	w8, #0x6                   	// #6
    6e90:	b	6e98 <lzma_properties_size@@XZ_5.0+0x84>
    6e94:	mov	w8, #0x7                   	// #7
    6e98:	adrp	x10, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    6e9c:	mov	w9, #0x38                  	// #56
    6ea0:	add	x10, x10, #0xa00
    6ea4:	madd	x8, x8, x9, x10
    6ea8:	ldr	x2, [x8, #32]
    6eac:	ldr	x1, [x1, #8]
    6eb0:	br	x2
    6eb4:	mov	w9, #0x1                   	// #1
    6eb8:	adrp	x11, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    6ebc:	mov	w10, #0x38                  	// #56
    6ec0:	add	x11, x11, #0xa00
    6ec4:	madd	x9, x9, x10, x11
    6ec8:	ldr	w9, [x9, #40]
    6ecc:	str	w9, [x0]
    6ed0:	mov	w0, wzr
    6ed4:	ret

0000000000006ed8 <lzma_properties_encode@@XZ_5.0>:
    6ed8:	ldr	x8, [x0]
    6edc:	sub	x9, x8, #0x3
    6ee0:	cmp	x9, #0x1e
    6ee4:	b.hi	6f08 <lzma_properties_encode@@XZ_5.0+0x30>  // b.pmore
    6ee8:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    6eec:	add	x8, x8, #0x8a1
    6ef0:	adr	x10, 6f00 <lzma_properties_encode@@XZ_5.0+0x28>
    6ef4:	ldrb	w11, [x8, x9]
    6ef8:	add	x10, x10, x11, lsl #2
    6efc:	br	x10
    6f00:	mov	w8, #0x8                   	// #8
    6f04:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f08:	mov	x9, #0x1                   	// #1
    6f0c:	movk	x9, #0x4000, lsl #48
    6f10:	cmp	x8, x9
    6f14:	b.ne	6f20 <lzma_properties_encode@@XZ_5.0+0x48>  // b.any
    6f18:	mov	x8, xzr
    6f1c:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f20:	mov	w0, #0xb                   	// #11
    6f24:	ret
    6f28:	mov	w8, #0x2                   	// #2
    6f2c:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f30:	mov	w8, #0x3                   	// #3
    6f34:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f38:	mov	w8, #0x4                   	// #4
    6f3c:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f40:	mov	w8, #0x5                   	// #5
    6f44:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f48:	mov	w8, #0x6                   	// #6
    6f4c:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f50:	mov	w8, #0x7                   	// #7
    6f54:	b	6f5c <lzma_properties_encode@@XZ_5.0+0x84>
    6f58:	mov	w8, #0x1                   	// #1
    6f5c:	adrp	x10, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    6f60:	mov	w9, #0x38                  	// #56
    6f64:	add	x10, x10, #0xa00
    6f68:	madd	x8, x8, x9, x10
    6f6c:	ldr	x2, [x8, #48]
    6f70:	ldr	x0, [x0, #8]
    6f74:	br	x2

0000000000006f78 <lzma_filter_flags_size@@XZ_5.0>:
    6f78:	stp	x29, x30, [sp, #-48]!
    6f7c:	stp	x20, x19, [sp, #32]
    6f80:	ldr	x8, [x1]
    6f84:	str	x21, [sp, #16]
    6f88:	mov	x29, sp
    6f8c:	lsr	x8, x8, #62
    6f90:	cbz	x8, 6f9c <lzma_filter_flags_size@@XZ_5.0+0x24>
    6f94:	mov	w0, #0xb                   	// #11
    6f98:	b	6fd8 <lzma_filter_flags_size@@XZ_5.0+0x60>
    6f9c:	mov	x20, x1
    6fa0:	mov	x19, x0
    6fa4:	bl	32f0 <lzma_properties_size@plt>
    6fa8:	cbnz	w0, 6fd8 <lzma_filter_flags_size@@XZ_5.0+0x60>
    6fac:	ldr	x0, [x20]
    6fb0:	bl	3400 <lzma_vli_size@plt>
    6fb4:	ldr	w20, [x19]
    6fb8:	mov	w21, w0
    6fbc:	mov	x0, x20
    6fc0:	bl	3400 <lzma_vli_size@plt>
    6fc4:	mov	w8, w0
    6fc8:	add	w9, w20, w21
    6fcc:	mov	w0, wzr
    6fd0:	add	w8, w9, w8
    6fd4:	str	w8, [x19]
    6fd8:	ldp	x20, x19, [sp, #32]
    6fdc:	ldr	x21, [sp, #16]
    6fe0:	ldp	x29, x30, [sp], #48
    6fe4:	ret

0000000000006fe8 <lzma_filter_flags_encode@@XZ_5.0>:
    6fe8:	sub	sp, sp, #0x40
    6fec:	stp	x29, x30, [sp, #16]
    6ff0:	stp	x22, x21, [sp, #32]
    6ff4:	stp	x20, x19, [sp, #48]
    6ff8:	mov	x20, x0
    6ffc:	ldr	x0, [x0]
    7000:	add	x29, sp, #0x10
    7004:	lsr	x8, x0, #62
    7008:	cbz	x8, 7014 <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    700c:	mov	w0, #0xb                   	// #11
    7010:	b	7064 <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    7014:	mov	x21, x3
    7018:	mov	x19, x2
    701c:	mov	x22, x1
    7020:	mov	x1, xzr
    7024:	mov	x2, x22
    7028:	mov	x3, x19
    702c:	mov	x4, x21
    7030:	bl	33d0 <lzma_vli_encode@plt>
    7034:	cbnz	w0, 7064 <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    7038:	sub	x0, x29, #0x4
    703c:	mov	x1, x20
    7040:	bl	32f0 <lzma_properties_size@plt>
    7044:	cbnz	w0, 7064 <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    7048:	ldur	w0, [x29, #-4]
    704c:	mov	x1, xzr
    7050:	mov	x2, x22
    7054:	mov	x3, x19
    7058:	mov	x4, x21
    705c:	bl	33d0 <lzma_vli_encode@plt>
    7060:	cbz	w0, 7078 <lzma_filter_flags_encode@@XZ_5.0+0x90>
    7064:	ldp	x20, x19, [sp, #48]
    7068:	ldp	x22, x21, [sp, #32]
    706c:	ldp	x29, x30, [sp, #16]
    7070:	add	sp, sp, #0x40
    7074:	ret
    7078:	ldr	x8, [x19]
    707c:	ldur	w9, [x29, #-4]
    7080:	sub	x10, x21, x8
    7084:	cmp	x10, x9
    7088:	b.cc	700c <lzma_filter_flags_encode@@XZ_5.0+0x24>  // b.lo, b.ul, b.last
    708c:	add	x1, x22, x8
    7090:	mov	x0, x20
    7094:	bl	3380 <lzma_properties_encode@plt>
    7098:	cbnz	w0, 7064 <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    709c:	ldur	w8, [x29, #-4]
    70a0:	ldr	x9, [x19]
    70a4:	add	x8, x9, x8
    70a8:	str	x8, [x19]
    70ac:	b	7064 <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    70b0:	stp	x29, x30, [sp, #-48]!
    70b4:	stp	x22, x21, [sp, #16]
    70b8:	stp	x20, x19, [sp, #32]
    70bc:	ldr	x8, [x0, #16]
    70c0:	adrp	x21, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    70c4:	add	x21, x21, #0xb0
    70c8:	mov	x19, x2
    70cc:	mov	x20, x0
    70d0:	cmp	x8, x21
    70d4:	mov	x22, x1
    70d8:	mov	x29, sp
    70dc:	b.eq	70ec <lzma_filter_flags_encode@@XZ_5.0+0x104>  // b.none
    70e0:	mov	x0, x20
    70e4:	mov	x1, x22
    70e8:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    70ec:	str	x21, [x20, #16]
    70f0:	cbz	x19, 714c <lzma_filter_flags_encode@@XZ_5.0+0x164>
    70f4:	ldr	x21, [x20]
    70f8:	cbnz	x21, 7128 <lzma_filter_flags_encode@@XZ_5.0+0x140>
    70fc:	mov	w0, #0x150                 	// #336
    7100:	mov	x1, x22
    7104:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    7108:	str	x0, [x20]
    710c:	cbz	x0, 7154 <lzma_filter_flags_encode@@XZ_5.0+0x16c>
    7110:	adrp	x8, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7114:	adrp	x9, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7118:	mov	x21, x0
    711c:	add	x8, x8, #0x168
    7120:	add	x9, x9, #0x39c
    7124:	stp	x8, x9, [x20, #24]
    7128:	add	x0, x21, #0x10
    712c:	mov	x1, x19
    7130:	bl	3430 <lzma_index_iter_init@plt>
    7134:	mov	w0, wzr
    7138:	str	wzr, [x21]
    713c:	str	x19, [x21, #8]
    7140:	str	xzr, [x21, #320]
    7144:	str	wzr, [x21, #328]
    7148:	b	7158 <lzma_filter_flags_encode@@XZ_5.0+0x170>
    714c:	mov	w0, #0xb                   	// #11
    7150:	b	7158 <lzma_filter_flags_encode@@XZ_5.0+0x170>
    7154:	mov	w0, #0x5                   	// #5
    7158:	ldp	x20, x19, [sp, #32]
    715c:	ldp	x22, x21, [sp, #16]
    7160:	ldp	x29, x30, [sp], #48
    7164:	ret
    7168:	stp	x29, x30, [sp, #-96]!
    716c:	stp	x26, x25, [sp, #32]
    7170:	ldr	x26, [x6]
    7174:	stp	x20, x19, [sp, #80]
    7178:	mov	x20, x5
    717c:	mov	x19, x0
    7180:	cmp	x26, x7
    7184:	stp	x28, x27, [sp, #16]
    7188:	stp	x24, x23, [sp, #48]
    718c:	stp	x22, x21, [sp, #64]
    7190:	mov	x29, sp
    7194:	b.cs	72e4 <lzma_filter_flags_encode@@XZ_5.0+0x2fc>  // b.hs, b.nlast
    7198:	mov	x23, x19
    719c:	ldr	w8, [x23], #16
    71a0:	adrp	x27, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    71a4:	mov	x22, x7
    71a8:	mov	x21, x6
    71ac:	add	x24, x19, #0x140
    71b0:	add	x27, x27, #0x8c0
    71b4:	mov	w28, #0x2                   	// #2
    71b8:	mov	w9, w8
    71bc:	mov	x25, x26
    71c0:	b	71e8 <lzma_filter_flags_encode@@XZ_5.0+0x200>
    71c4:	add	x9, x25, #0x1
    71c8:	mov	w8, #0x1                   	// #1
    71cc:	str	x9, [x21]
    71d0:	mov	w9, #0x1                   	// #1
    71d4:	strb	wzr, [x20, x25]
    71d8:	str	w8, [x19]
    71dc:	ldr	x25, [x21]
    71e0:	cmp	x25, x22
    71e4:	b.cs	72f0 <lzma_filter_flags_encode@@XZ_5.0+0x308>  // b.hs, b.nlast
    71e8:	cmp	w9, #0x6
    71ec:	b.hi	7334 <lzma_filter_flags_encode@@XZ_5.0+0x34c>  // b.pmore
    71f0:	mov	w9, w9
    71f4:	adr	x10, 71c4 <lzma_filter_flags_encode@@XZ_5.0+0x1dc>
    71f8:	ldrb	w11, [x27, x9]
    71fc:	add	x10, x10, x11, lsl #2
    7200:	br	x10
    7204:	cmp	w8, #0x2
    7208:	b.eq	72a8 <lzma_filter_flags_encode@@XZ_5.0+0x2c0>  // b.none
    720c:	mov	w8, #0xb8                  	// #184
    7210:	b	72ac <lzma_filter_flags_encode@@XZ_5.0+0x2c4>
    7214:	ldr	x0, [x19, #8]
    7218:	bl	3460 <lzma_index_block_count@plt>
    721c:	mov	x1, x24
    7220:	mov	x2, x20
    7224:	mov	x3, x21
    7228:	mov	x4, x22
    722c:	bl	33d0 <lzma_vli_encode@plt>
    7230:	cmp	w0, #0x1
    7234:	b.ne	72f8 <lzma_filter_flags_encode@@XZ_5.0+0x310>  // b.any
    7238:	mov	w8, #0x4                   	// #4
    723c:	str	xzr, [x19, #320]
    7240:	str	w8, [x19]
    7244:	mov	w9, #0x4                   	// #4
    7248:	b	71dc <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    724c:	mov	w1, #0x2                   	// #2
    7250:	mov	x0, x23
    7254:	bl	33e0 <lzma_index_iter_next@plt>
    7258:	tst	w0, #0xff
    725c:	b.eq	72a4 <lzma_filter_flags_encode@@XZ_5.0+0x2bc>  // b.none
    7260:	ldr	x0, [x19, #8]
    7264:	bl	48f4 <lzma_index_checks@@XZ_5.0+0x28>
    7268:	mov	w9, w0
    726c:	mov	w8, #0x5                   	// #5
    7270:	str	x9, [x19, #320]
    7274:	str	w8, [x19]
    7278:	mov	w9, #0x5                   	// #5
    727c:	b	71dc <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    7280:	ldr	x9, [x24]
    7284:	cbz	x9, 733c <lzma_filter_flags_encode@@XZ_5.0+0x354>
    7288:	sub	x9, x9, #0x1
    728c:	add	x10, x25, #0x1
    7290:	str	x9, [x24]
    7294:	str	x10, [x21]
    7298:	strb	wzr, [x20, x25]
    729c:	mov	w9, #0x5                   	// #5
    72a0:	b	71dc <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    72a4:	str	w28, [x19]
    72a8:	mov	w8, #0xc0                  	// #192
    72ac:	ldr	x0, [x19, x8]
    72b0:	mov	x1, x24
    72b4:	mov	x2, x20
    72b8:	mov	x3, x21
    72bc:	mov	x4, x22
    72c0:	bl	33d0 <lzma_vli_encode@plt>
    72c4:	cmp	w0, #0x1
    72c8:	b.ne	72f8 <lzma_filter_flags_encode@@XZ_5.0+0x310>  // b.any
    72cc:	ldr	w8, [x19]
    72d0:	str	xzr, [x19, #320]
    72d4:	add	w8, w8, #0x1
    72d8:	str	w8, [x19]
    72dc:	mov	w9, w8
    72e0:	b	71dc <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    72e4:	mov	w25, wzr
    72e8:	mov	x8, x26
    72ec:	b	7300 <lzma_filter_flags_encode@@XZ_5.0+0x318>
    72f0:	mov	w25, wzr
    72f4:	b	72fc <lzma_filter_flags_encode@@XZ_5.0+0x314>
    72f8:	mov	w25, w0
    72fc:	ldr	x8, [x21]
    7300:	ldr	w2, [x19, #328]
    7304:	add	x0, x20, x26
    7308:	sub	x1, x8, x26
    730c:	bl	3160 <lzma_crc32@plt>
    7310:	str	w0, [x19, #328]
    7314:	mov	w0, w25
    7318:	ldp	x20, x19, [sp, #80]
    731c:	ldp	x22, x21, [sp, #64]
    7320:	ldp	x24, x23, [sp, #48]
    7324:	ldp	x26, x25, [sp, #32]
    7328:	ldp	x28, x27, [sp, #16]
    732c:	ldp	x29, x30, [sp], #96
    7330:	ret
    7334:	mov	w25, #0xb                   	// #11
    7338:	b	7314 <lzma_filter_flags_encode@@XZ_5.0+0x32c>
    733c:	ldr	w2, [x19, #328]
    7340:	add	x0, x20, x26
    7344:	sub	x1, x25, x26
    7348:	bl	3160 <lzma_crc32@plt>
    734c:	mov	w8, #0x6                   	// #6
    7350:	str	w0, [x19, #328]
    7354:	str	w8, [x19]
    7358:	cmp	x22, x25
    735c:	b.eq	7394 <lzma_filter_flags_encode@@XZ_5.0+0x3ac>  // b.none
    7360:	ldr	x8, [x19, #320]
    7364:	ldr	w9, [x19, #328]
    7368:	lsl	w10, w8, #3
    736c:	add	x8, x8, #0x1
    7370:	lsr	w9, w9, w10
    7374:	cmp	x8, #0x4
    7378:	strb	w9, [x20, x25]
    737c:	add	x25, x25, #0x1
    7380:	str	x25, [x21]
    7384:	str	x8, [x19, #320]
    7388:	b.cc	7358 <lzma_filter_flags_encode@@XZ_5.0+0x370>  // b.lo, b.ul, b.last
    738c:	mov	w25, #0x1                   	// #1
    7390:	b	7314 <lzma_filter_flags_encode@@XZ_5.0+0x32c>
    7394:	mov	w25, wzr
    7398:	b	7314 <lzma_filter_flags_encode@@XZ_5.0+0x32c>
    739c:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>

00000000000073a0 <lzma_index_encoder@@XZ_5.0>:
    73a0:	stp	x29, x30, [sp, #-64]!
    73a4:	str	x23, [sp, #16]
    73a8:	stp	x22, x21, [sp, #32]
    73ac:	stp	x20, x19, [sp, #48]
    73b0:	mov	x29, sp
    73b4:	mov	x20, x1
    73b8:	mov	x19, x0
    73bc:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    73c0:	mov	w21, w0
    73c4:	cbnz	w0, 7470 <lzma_index_encoder@@XZ_5.0+0xd0>
    73c8:	ldp	x23, x21, [x19, #48]
    73cc:	adrp	x22, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    73d0:	add	x22, x22, #0xb0
    73d4:	ldr	x8, [x21, #16]
    73d8:	cmp	x8, x22
    73dc:	b.eq	73ec <lzma_index_encoder@@XZ_5.0+0x4c>  // b.none
    73e0:	mov	x0, x21
    73e4:	mov	x1, x23
    73e8:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    73ec:	str	x22, [x21, #16]
    73f0:	cbz	x20, 745c <lzma_index_encoder@@XZ_5.0+0xbc>
    73f4:	ldr	x22, [x21]
    73f8:	cbnz	x22, 7428 <lzma_index_encoder@@XZ_5.0+0x88>
    73fc:	mov	w0, #0x150                 	// #336
    7400:	mov	x1, x23
    7404:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    7408:	str	x0, [x21]
    740c:	cbz	x0, 7464 <lzma_index_encoder@@XZ_5.0+0xc4>
    7410:	adrp	x8, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7414:	adrp	x9, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7418:	mov	x22, x0
    741c:	add	x8, x8, #0x168
    7420:	add	x9, x9, #0x39c
    7424:	stp	x8, x9, [x21, #24]
    7428:	add	x0, x22, #0x10
    742c:	mov	x1, x20
    7430:	bl	3430 <lzma_index_iter_init@plt>
    7434:	str	wzr, [x22]
    7438:	str	x20, [x22, #8]
    743c:	str	xzr, [x22, #320]
    7440:	str	wzr, [x22, #328]
    7444:	ldr	x8, [x19, #56]
    7448:	mov	w21, wzr
    744c:	mov	w9, #0x1                   	// #1
    7450:	strb	w9, [x8, #88]
    7454:	strb	w9, [x8, #91]
    7458:	b	7470 <lzma_index_encoder@@XZ_5.0+0xd0>
    745c:	mov	w21, #0xb                   	// #11
    7460:	b	7468 <lzma_index_encoder@@XZ_5.0+0xc8>
    7464:	mov	w21, #0x5                   	// #5
    7468:	mov	x0, x19
    746c:	bl	32c0 <lzma_end@plt>
    7470:	mov	w0, w21
    7474:	ldp	x20, x19, [sp, #48]
    7478:	ldp	x22, x21, [sp, #32]
    747c:	ldr	x23, [sp, #16]
    7480:	ldp	x29, x30, [sp], #64
    7484:	ret

0000000000007488 <lzma_index_buffer_encode@@XZ_5.0>:
    7488:	sub	sp, sp, #0x1a0
    748c:	stp	x22, x21, [sp, #384]
    7490:	mov	x22, x0
    7494:	mov	w0, #0xb                   	// #11
    7498:	stp	x29, x30, [sp, #352]
    749c:	stp	x28, x23, [sp, #368]
    74a0:	stp	x20, x19, [sp, #400]
    74a4:	add	x29, sp, #0x160
    74a8:	cbz	x22, 7548 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    74ac:	mov	x21, x1
    74b0:	cbz	x1, 7548 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    74b4:	mov	x19, x2
    74b8:	cbz	x2, 7548 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    74bc:	ldr	x8, [x19]
    74c0:	mov	x20, x3
    74c4:	cmp	x8, x3
    74c8:	b.hi	7544 <lzma_index_buffer_encode@@XZ_5.0+0xbc>  // b.pmore
    74cc:	mov	x0, x22
    74d0:	sub	x23, x20, x8
    74d4:	bl	3490 <lzma_index_size@plt>
    74d8:	cmp	x23, x0
    74dc:	b.cs	74e8 <lzma_index_buffer_encode@@XZ_5.0+0x60>  // b.hs, b.nlast
    74e0:	mov	w0, #0xa                   	// #10
    74e4:	b	7548 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    74e8:	add	x8, sp, #0x10
    74ec:	add	x0, x8, #0x10
    74f0:	mov	x1, x22
    74f4:	bl	3430 <lzma_index_iter_init@plt>
    74f8:	str	wzr, [sp, #16]
    74fc:	str	x22, [sp, #24]
    7500:	str	xzr, [sp, #336]
    7504:	str	wzr, [sp, #344]
    7508:	ldr	x22, [x19]
    750c:	add	x0, sp, #0x10
    7510:	mov	x1, xzr
    7514:	mov	x2, xzr
    7518:	mov	x3, xzr
    751c:	mov	x4, xzr
    7520:	mov	x5, x21
    7524:	mov	x6, x19
    7528:	mov	x7, x20
    752c:	str	wzr, [sp]
    7530:	bl	7168 <lzma_filter_flags_encode@@XZ_5.0+0x180>
    7534:	cmp	w0, #0x1
    7538:	mov	w0, wzr
    753c:	b.eq	7548 <lzma_index_buffer_encode@@XZ_5.0+0xc0>  // b.none
    7540:	str	x22, [x19]
    7544:	mov	w0, #0xb                   	// #11
    7548:	ldp	x20, x19, [sp, #400]
    754c:	ldp	x22, x21, [sp, #384]
    7550:	ldp	x28, x23, [sp, #368]
    7554:	ldp	x29, x30, [sp, #352]
    7558:	add	sp, sp, #0x1a0
    755c:	ret

0000000000007560 <lzma_stream_buffer_bound@@XZ_5.0>:
    7560:	stp	x29, x30, [sp, #-16]!
    7564:	mov	x29, sp
    7568:	bl	30c0 <lzma_block_buffer_bound@plt>
    756c:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    7570:	sub	x8, x8, x0
    7574:	cmp	x8, #0x30
    7578:	ccmp	x0, #0x0, #0x4, cs  // cs = hs, nlast
    757c:	add	x8, x0, #0x30
    7580:	csel	x0, xzr, x8, eq  // eq = none
    7584:	ldp	x29, x30, [sp], #16
    7588:	ret

000000000000758c <lzma_stream_buffer_encode@@XZ_5.0>:
    758c:	sub	sp, sp, #0x170
    7590:	stp	x24, x23, [sp, #320]
    7594:	mov	w23, #0xb                   	// #11
    7598:	stp	x29, x30, [sp, #272]
    759c:	stp	x28, x27, [sp, #288]
    75a0:	stp	x26, x25, [sp, #304]
    75a4:	stp	x22, x21, [sp, #336]
    75a8:	stp	x20, x19, [sp, #352]
    75ac:	add	x29, sp, #0x110
    75b0:	cbz	x0, 7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    75b4:	mov	w26, w1
    75b8:	cmp	w1, #0xf
    75bc:	b.hi	7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>  // b.pmore
    75c0:	cmp	x3, #0x0
    75c4:	cset	w8, eq  // eq = none
    75c8:	cmp	x4, #0x0
    75cc:	cset	w9, ne  // ne = any
    75d0:	mov	x22, x4
    75d4:	mov	x24, x3
    75d8:	and	w8, w8, w9
    75dc:	mov	w23, #0xb                   	// #11
    75e0:	tbnz	w8, #0, 7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    75e4:	mov	x20, x5
    75e8:	cbz	x5, 7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    75ec:	mov	x19, x6
    75f0:	cbz	x6, 7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    75f4:	ldr	x23, [x19]
    75f8:	mov	x27, x7
    75fc:	cmp	x23, x7
    7600:	b.ls	760c <lzma_stream_buffer_encode@@XZ_5.0+0x80>  // b.plast
    7604:	mov	w23, #0xb                   	// #11
    7608:	b	7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    760c:	mov	x25, x0
    7610:	mov	w0, w26
    7614:	mov	x21, x2
    7618:	bl	3080 <lzma_check_is_supported@plt>
    761c:	tst	w0, #0xff
    7620:	b.eq	763c <lzma_stream_buffer_encode@@XZ_5.0+0xb0>  // b.none
    7624:	sub	x8, x27, x23
    7628:	cmp	x8, #0x19
    762c:	stur	x23, [x29, #-8]
    7630:	b.cs	7664 <lzma_stream_buffer_encode@@XZ_5.0+0xd8>  // b.hs, b.nlast
    7634:	mov	w23, #0xa                   	// #10
    7638:	b	7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    763c:	mov	w23, #0x3                   	// #3
    7640:	mov	w0, w23
    7644:	ldp	x20, x19, [sp, #352]
    7648:	ldp	x22, x21, [sp, #336]
    764c:	ldp	x24, x23, [sp, #320]
    7650:	ldp	x26, x25, [sp, #304]
    7654:	ldp	x28, x27, [sp, #288]
    7658:	ldp	x29, x30, [sp, #272]
    765c:	add	sp, sp, #0x170
    7660:	ret
    7664:	movi	v0.2d, #0x0
    7668:	add	x1, x20, x23
    766c:	sub	x0, x29, #0x40
    7670:	stur	xzr, [x29, #-16]
    7674:	stp	q0, q0, [x29, #-48]
    7678:	stur	q0, [x29, #-64]
    767c:	stur	w26, [x29, #-48]
    7680:	bl	3310 <lzma_stream_header_encode@plt>
    7684:	cbnz	w0, 7604 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    7688:	sub	x27, x27, #0xc
    768c:	add	x8, x23, #0xc
    7690:	movi	v0.2d, #0x0
    7694:	stp	q0, q0, [sp, #176]
    7698:	stp	q0, q0, [sp, #144]
    769c:	stp	q0, q0, [sp, #112]
    76a0:	stp	q0, q0, [sp, #80]
    76a4:	stp	q0, q0, [sp, #48]
    76a8:	stp	q0, q0, [sp, #16]
    76ac:	str	q0, [sp]
    76b0:	str	w26, [sp, #8]
    76b4:	stur	x8, [x29, #-8]
    76b8:	str	x25, [sp, #32]
    76bc:	cbz	x22, 76e8 <lzma_stream_buffer_encode@@XZ_5.0+0x15c>
    76c0:	mov	x0, sp
    76c4:	sub	x5, x29, #0x8
    76c8:	mov	x1, x21
    76cc:	mov	x2, x24
    76d0:	mov	x3, x22
    76d4:	mov	x4, x20
    76d8:	mov	x6, x27
    76dc:	bl	3070 <lzma_block_buffer_encode@plt>
    76e0:	mov	w23, w0
    76e4:	cbnz	w0, 7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    76e8:	mov	x0, x21
    76ec:	bl	3330 <lzma_index_init@plt>
    76f0:	cbz	x0, 7730 <lzma_stream_buffer_encode@@XZ_5.0+0x1a4>
    76f4:	mov	x24, x0
    76f8:	cbz	x22, 7738 <lzma_stream_buffer_encode@@XZ_5.0+0x1ac>
    76fc:	mov	x0, sp
    7700:	bl	3130 <lzma_block_unpadded_size@plt>
    7704:	ldr	x3, [sp, #24]
    7708:	mov	x2, x0
    770c:	mov	x0, x24
    7710:	mov	x1, x21
    7714:	bl	32a0 <lzma_index_append@plt>
    7718:	cbz	w0, 7738 <lzma_stream_buffer_encode@@XZ_5.0+0x1ac>
    771c:	mov	w23, w0
    7720:	mov	x0, x24
    7724:	mov	x1, x21
    7728:	bl	3360 <lzma_index_end@plt>
    772c:	b	7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7730:	mov	w23, #0x5                   	// #5
    7734:	b	7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7738:	sub	x2, x29, #0x8
    773c:	mov	x0, x24
    7740:	mov	x1, x20
    7744:	mov	x3, x27
    7748:	bl	30a0 <lzma_index_buffer_encode@plt>
    774c:	mov	w23, w0
    7750:	mov	x0, x24
    7754:	bl	3490 <lzma_index_size@plt>
    7758:	stur	x0, [x29, #-56]
    775c:	mov	x0, x24
    7760:	mov	x1, x21
    7764:	bl	3360 <lzma_index_end@plt>
    7768:	cbnz	w23, 7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    776c:	ldur	x8, [x29, #-8]
    7770:	sub	x0, x29, #0x40
    7774:	add	x1, x20, x8
    7778:	bl	31a0 <lzma_stream_footer_encode@plt>
    777c:	cbnz	w0, 7604 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    7780:	ldur	x8, [x29, #-8]
    7784:	mov	w23, wzr
    7788:	add	x8, x8, #0xc
    778c:	stur	x8, [x29, #-8]
    7790:	str	x8, [x19]
    7794:	b	7640 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>

0000000000007798 <lzma_stream_encoder@@XZ_5.0>:
    7798:	stp	x29, x30, [sp, #-48]!
    779c:	stp	x22, x21, [sp, #16]
    77a0:	stp	x20, x19, [sp, #32]
    77a4:	mov	x29, sp
    77a8:	mov	w21, w2
    77ac:	mov	x22, x1
    77b0:	mov	x19, x0
    77b4:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    77b8:	mov	w20, w0
    77bc:	cbnz	w0, 77f4 <lzma_stream_encoder@@XZ_5.0+0x5c>
    77c0:	ldp	x1, x0, [x19, #48]
    77c4:	mov	x2, x22
    77c8:	mov	w3, w21
    77cc:	bl	7808 <lzma_stream_encoder@@XZ_5.0+0x70>
    77d0:	mov	w20, w0
    77d4:	cbz	w0, 77e4 <lzma_stream_encoder@@XZ_5.0+0x4c>
    77d8:	mov	x0, x19
    77dc:	bl	32c0 <lzma_end@plt>
    77e0:	b	77f4 <lzma_stream_encoder@@XZ_5.0+0x5c>
    77e4:	ldr	x8, [x19, #56]
    77e8:	mov	w9, #0x1010101             	// #16843009
    77ec:	strb	w9, [x8, #92]
    77f0:	str	w9, [x8, #88]
    77f4:	mov	w0, w20
    77f8:	ldp	x20, x19, [sp, #32]
    77fc:	ldp	x22, x21, [sp, #16]
    7800:	ldp	x29, x30, [sp], #48
    7804:	ret
    7808:	sub	sp, sp, #0x80
    780c:	stp	x29, x30, [sp, #64]
    7810:	stp	x22, x21, [sp, #96]
    7814:	stp	x20, x19, [sp, #112]
    7818:	ldr	x8, [x0, #16]
    781c:	adrp	x22, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7820:	add	x22, x22, #0x808
    7824:	str	x23, [sp, #80]
    7828:	mov	w21, w3
    782c:	mov	x19, x2
    7830:	mov	x23, x0
    7834:	cmp	x8, x22
    7838:	mov	x20, x1
    783c:	add	x29, sp, #0x40
    7840:	b.eq	7850 <lzma_stream_encoder@@XZ_5.0+0xb8>  // b.none
    7844:	mov	x0, x23
    7848:	mov	x1, x20
    784c:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    7850:	str	x22, [x23, #16]
    7854:	cbz	x19, 7934 <lzma_stream_encoder@@XZ_5.0+0x19c>
    7858:	ldr	x22, [x23]
    785c:	cbnz	x22, 78c4 <lzma_stream_encoder@@XZ_5.0+0x12c>
    7860:	mov	w0, #0x5d0                 	// #1488
    7864:	mov	x1, x20
    7868:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    786c:	cbz	x0, 793c <lzma_stream_encoder@@XZ_5.0+0x1a4>
    7870:	adrp	x8, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7874:	adrp	x9, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7878:	add	x8, x8, #0x958
    787c:	add	x9, x9, #0xc50
    7880:	stp	x8, x9, [x23, #24]
    7884:	adrp	x8, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x18>
    7888:	add	x8, x8, #0xcc8
    788c:	mov	x22, x0
    7890:	str	x8, [x23, #64]
    7894:	mov	x8, #0xffffffffffffffff    	// #-1
    7898:	movi	v0.2d, #0x0
    789c:	str	x0, [x23]
    78a0:	str	x8, [x0, #288]
    78a4:	stp	xzr, x8, [x0, #8]
    78a8:	stur	q0, [x0, #24]
    78ac:	stur	q0, [x0, #40]
    78b0:	stur	q0, [x0, #56]
    78b4:	str	xzr, [x0, #72]
    78b8:	stp	xzr, x8, [x0, #368]
    78bc:	stp	q0, q0, [x0, #384]
    78c0:	stp	q0, q0, [x0, #416]
    78c4:	ldr	x0, [x22, #440]
    78c8:	mov	x1, x20
    78cc:	str	wzr, [x22]
    78d0:	str	wzr, [x22, #80]
    78d4:	str	w21, [x22, #88]
    78d8:	bl	3360 <lzma_index_end@plt>
    78dc:	mov	x0, x20
    78e0:	bl	3330 <lzma_index_init@plt>
    78e4:	str	x0, [x22, #440]
    78e8:	cbz	x0, 793c <lzma_stream_encoder@@XZ_5.0+0x1a4>
    78ec:	movi	v0.2d, #0x0
    78f0:	add	x1, x22, #0x1d0
    78f4:	mov	x0, sp
    78f8:	str	xzr, [sp, #48]
    78fc:	stp	q0, q0, [sp, #16]
    7900:	str	q0, [sp]
    7904:	str	w21, [sp, #16]
    7908:	bl	3310 <lzma_stream_header_encode@plt>
    790c:	cbnz	w0, 7940 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    7910:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    7914:	ldr	q0, [x8, #2256]
    7918:	mov	x0, x22
    791c:	mov	x1, x20
    7920:	mov	x2, x19
    7924:	mov	x3, xzr
    7928:	str	q0, [x22, #448]
    792c:	bl	7cc8 <lzma_stream_encoder@@XZ_5.0+0x530>
    7930:	b	7940 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    7934:	mov	w0, #0xb                   	// #11
    7938:	b	7940 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    793c:	mov	w0, #0x5                   	// #5
    7940:	ldp	x20, x19, [sp, #112]
    7944:	ldp	x22, x21, [sp, #96]
    7948:	ldr	x23, [sp, #80]
    794c:	ldp	x29, x30, [sp, #64]
    7950:	add	sp, sp, #0x80
    7954:	ret
    7958:	sub	sp, sp, #0xf0
    795c:	ldr	x8, [x6]
    7960:	stp	x29, x30, [sp, #144]
    7964:	stp	x28, x27, [sp, #160]
    7968:	stp	x26, x25, [sp, #176]
    796c:	cmp	x8, x7
    7970:	stp	x24, x23, [sp, #192]
    7974:	stp	x22, x21, [sp, #208]
    7978:	stp	x20, x19, [sp, #224]
    797c:	add	x29, sp, #0x90
    7980:	b.cs	7c0c <lzma_stream_encoder@@XZ_5.0+0x474>  // b.hs, b.nlast
    7984:	add	x8, x0, #0x170
    7988:	str	x8, [sp, #40]
    798c:	add	x8, x0, #0x8
    7990:	str	x8, [sp, #24]
    7994:	add	x8, x0, #0x50
    7998:	str	x2, [sp, #64]
    799c:	ldr	w10, [x29, #96]
    79a0:	stur	x8, [x29, #-64]
    79a4:	mov	x11, x0
    79a8:	ldr	w8, [x11], #96
    79ac:	sub	x9, x29, #0x38
    79b0:	adrp	x27, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    79b4:	add	x9, x9, #0x14
    79b8:	mov	x19, x7
    79bc:	mov	x20, x6
    79c0:	mov	x21, x5
    79c4:	mov	x22, x4
    79c8:	mov	x23, x3
    79cc:	mov	x25, x1
    79d0:	mov	x26, x0
    79d4:	add	x28, x0, #0x1d0
    79d8:	add	x24, x0, #0x1c0
    79dc:	add	x27, x27, #0x8e0
    79e0:	str	x9, [sp, #48]
    79e4:	mov	w9, w10
    79e8:	str	x11, [sp, #32]
    79ec:	stur	w10, [x29, #-68]
    79f0:	str	x9, [sp, #56]
    79f4:	b	7a08 <lzma_stream_encoder@@XZ_5.0+0x270>
    79f8:	str	w8, [x26]
    79fc:	ldr	x9, [x20]
    7a00:	cmp	x9, x19
    7a04:	b.cs	7c0c <lzma_stream_encoder@@XZ_5.0+0x474>  // b.hs, b.nlast
    7a08:	cmp	w8, #0x5
    7a0c:	b.hi	7c30 <lzma_stream_encoder@@XZ_5.0+0x498>  // b.pmore
    7a10:	mov	w8, w8
    7a14:	adr	x9, 7a24 <lzma_stream_encoder@@XZ_5.0+0x28c>
    7a18:	ldrb	w10, [x27, x8]
    7a1c:	add	x9, x9, x10, lsl #2
    7a20:	br	x9
    7a24:	ldr	x2, [x26, #456]
    7a28:	mov	x0, x28
    7a2c:	mov	x1, x24
    7a30:	mov	x3, x21
    7a34:	mov	x4, x20
    7a38:	mov	x5, x19
    7a3c:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    7a40:	ldp	x8, x9, [x26, #448]
    7a44:	cmp	x8, x9
    7a48:	b.cc	7c0c <lzma_stream_encoder@@XZ_5.0+0x474>  // b.lo, b.ul, b.last
    7a4c:	ldr	w8, [x26]
    7a50:	cmp	w8, #0x5
    7a54:	b.eq	7c38 <lzma_stream_encoder@@XZ_5.0+0x4a0>  // b.none
    7a58:	add	w8, w8, #0x1
    7a5c:	str	xzr, [x26, #448]
    7a60:	b	79f8 <lzma_stream_encoder@@XZ_5.0+0x260>
    7a64:	ldr	x8, [x23]
    7a68:	ldur	x9, [x29, #-64]
    7a6c:	cmp	x8, x22
    7a70:	b.ne	7b8c <lzma_stream_encoder@@XZ_5.0+0x3f4>  // b.any
    7a74:	ldur	w8, [x29, #-68]
    7a78:	cmp	w8, #0x3
    7a7c:	b.ne	7c40 <lzma_stream_encoder@@XZ_5.0+0x4a8>  // b.any
    7a80:	ldr	x2, [x26, #440]
    7a84:	ldr	x0, [sp, #40]
    7a88:	mov	x1, x25
    7a8c:	bl	70b0 <lzma_filter_flags_encode@@XZ_5.0+0xc8>
    7a90:	cbnz	w0, 7c10 <lzma_stream_encoder@@XZ_5.0+0x478>
    7a94:	mov	w8, #0x4                   	// #4
    7a98:	b	79f8 <lzma_stream_encoder@@XZ_5.0+0x260>
    7a9c:	ldp	x10, x2, [sp, #56]
    7aa0:	adrp	x9, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    7aa4:	add	x9, x9, #0x8e8
    7aa8:	ldr	x8, [x26, #32]
    7aac:	ldr	x0, [x26, #8]
    7ab0:	ldr	w9, [x9, x10, lsl #2]
    7ab4:	mov	x1, x25
    7ab8:	mov	x3, x23
    7abc:	mov	x4, x22
    7ac0:	mov	x5, x21
    7ac4:	mov	x6, x20
    7ac8:	mov	x7, x19
    7acc:	str	w9, [sp]
    7ad0:	blr	x8
    7ad4:	ldur	w8, [x29, #-68]
    7ad8:	cmp	w8, #0x1
    7adc:	b.eq	7c10 <lzma_stream_encoder@@XZ_5.0+0x478>  // b.none
    7ae0:	cmp	w0, #0x1
    7ae4:	b.ne	7c10 <lzma_stream_encoder@@XZ_5.0+0x478>  // b.any
    7ae8:	ldur	x0, [x29, #-64]
    7aec:	bl	3130 <lzma_block_unpadded_size@plt>
    7af0:	ldr	x8, [x26, #440]
    7af4:	ldr	x3, [x26, #104]
    7af8:	mov	x2, x0
    7afc:	mov	x1, x25
    7b00:	mov	x0, x8
    7b04:	bl	32a0 <lzma_index_append@plt>
    7b08:	cbnz	w0, 7c10 <lzma_stream_encoder@@XZ_5.0+0x478>
    7b0c:	mov	w8, #0x1                   	// #1
    7b10:	b	79f8 <lzma_stream_encoder@@XZ_5.0+0x260>
    7b14:	ldr	x8, [x26, #392]
    7b18:	ldr	x0, [x26, #368]
    7b1c:	mov	x1, x25
    7b20:	mov	x2, xzr
    7b24:	mov	x3, xzr
    7b28:	mov	x4, xzr
    7b2c:	mov	x5, x21
    7b30:	mov	x6, x20
    7b34:	mov	x7, x19
    7b38:	str	wzr, [sp]
    7b3c:	blr	x8
    7b40:	cmp	w0, #0x1
    7b44:	b.ne	7c10 <lzma_stream_encoder@@XZ_5.0+0x478>  // b.any
    7b48:	stur	wzr, [x29, #-56]
    7b4c:	ldr	x0, [x26, #440]
    7b50:	bl	3490 <lzma_index_size@plt>
    7b54:	stur	x0, [x29, #-48]
    7b58:	ldr	w8, [x26, #88]
    7b5c:	movi	v0.2d, #0x0
    7b60:	sub	x0, x29, #0x38
    7b64:	mov	x1, x28
    7b68:	stur	w8, [x29, #-40]
    7b6c:	ldr	x8, [sp, #48]
    7b70:	stp	q0, q0, [x8]
    7b74:	bl	31a0 <lzma_stream_footer_encode@plt>
    7b78:	cbnz	w0, 7c30 <lzma_stream_encoder@@XZ_5.0+0x498>
    7b7c:	mov	w8, #0xc                   	// #12
    7b80:	str	x8, [x26, #456]
    7b84:	mov	w8, #0x5                   	// #5
    7b88:	b	79f8 <lzma_stream_encoder@@XZ_5.0+0x260>
    7b8c:	ldrb	w8, [x26, #4]
    7b90:	cbnz	w8, 7be8 <lzma_stream_encoder@@XZ_5.0+0x450>
    7b94:	ldr	x8, [sp, #32]
    7b98:	mov	x10, #0xffffffffffffffff    	// #-1
    7b9c:	mov	x0, x9
    7ba0:	str	x24, [sp, #16]
    7ba4:	mov	x24, x27
    7ba8:	mov	x27, x23
    7bac:	mov	x23, x22
    7bb0:	stp	x10, x10, [x8]
    7bb4:	mov	x22, x9
    7bb8:	bl	3100 <lzma_block_header_size@plt>
    7bbc:	cbnz	w0, 7c10 <lzma_stream_encoder@@XZ_5.0+0x478>
    7bc0:	ldr	x0, [sp, #24]
    7bc4:	mov	x1, x25
    7bc8:	mov	x2, x22
    7bcc:	bl	62a0 <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    7bd0:	mov	x9, x22
    7bd4:	mov	x22, x23
    7bd8:	mov	x23, x27
    7bdc:	mov	x27, x24
    7be0:	ldr	x24, [sp, #16]
    7be4:	cbnz	w0, 7c10 <lzma_stream_encoder@@XZ_5.0+0x478>
    7be8:	mov	x0, x9
    7bec:	mov	x1, x28
    7bf0:	strb	wzr, [x26, #4]
    7bf4:	bl	34c0 <lzma_block_header_encode@plt>
    7bf8:	cbnz	w0, 7c30 <lzma_stream_encoder@@XZ_5.0+0x498>
    7bfc:	ldr	w9, [x26, #84]
    7c00:	mov	w8, #0x2                   	// #2
    7c04:	str	x9, [x26, #456]
    7c08:	b	79f8 <lzma_stream_encoder@@XZ_5.0+0x260>
    7c0c:	mov	w0, wzr
    7c10:	ldp	x20, x19, [sp, #224]
    7c14:	ldp	x22, x21, [sp, #208]
    7c18:	ldp	x24, x23, [sp, #192]
    7c1c:	ldp	x26, x25, [sp, #176]
    7c20:	ldp	x28, x27, [sp, #160]
    7c24:	ldp	x29, x30, [sp, #144]
    7c28:	add	sp, sp, #0xf0
    7c2c:	ret
    7c30:	mov	w0, #0xb                   	// #11
    7c34:	b	7c10 <lzma_stream_encoder@@XZ_5.0+0x478>
    7c38:	mov	w0, #0x1                   	// #1
    7c3c:	b	7c10 <lzma_stream_encoder@@XZ_5.0+0x478>
    7c40:	ldur	w8, [x29, #-68]
    7c44:	cmp	w8, #0x0
    7c48:	cset	w0, ne  // ne = any
    7c4c:	b	7c10 <lzma_stream_encoder@@XZ_5.0+0x478>
    7c50:	stp	x29, x30, [sp, #-48]!
    7c54:	stp	x20, x19, [sp, #32]
    7c58:	mov	x20, x0
    7c5c:	add	x0, x0, #0x8
    7c60:	str	x21, [sp, #16]
    7c64:	mov	x29, sp
    7c68:	mov	x19, x1
    7c6c:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    7c70:	add	x0, x20, #0x170
    7c74:	mov	x1, x19
    7c78:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    7c7c:	ldr	x0, [x20, #440]
    7c80:	mov	x1, x19
    7c84:	bl	3360 <lzma_index_end@plt>
    7c88:	ldr	x8, [x20, #288]
    7c8c:	cmn	x8, #0x1
    7c90:	b.eq	7cb0 <lzma_stream_encoder@@XZ_5.0+0x518>  // b.none
    7c94:	add	x21, x20, #0x130
    7c98:	ldur	x0, [x21, #-8]
    7c9c:	mov	x1, x19
    7ca0:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    7ca4:	ldr	x8, [x21], #16
    7ca8:	cmn	x8, #0x1
    7cac:	b.ne	7c98 <lzma_stream_encoder@@XZ_5.0+0x500>  // b.any
    7cb0:	mov	x0, x20
    7cb4:	mov	x1, x19
    7cb8:	ldp	x20, x19, [sp, #32]
    7cbc:	ldr	x21, [sp, #16]
    7cc0:	ldp	x29, x30, [sp], #48
    7cc4:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    7cc8:	stp	x29, x30, [sp, #-48]!
    7ccc:	stp	x22, x21, [sp, #16]
    7cd0:	stp	x20, x19, [sp, #32]
    7cd4:	ldr	w8, [x0]
    7cd8:	mov	x19, x2
    7cdc:	mov	x21, x0
    7ce0:	mov	x20, x1
    7ce4:	cmp	w8, #0x1
    7ce8:	mov	x29, sp
    7cec:	b.hi	7d1c <lzma_stream_encoder@@XZ_5.0+0x584>  // b.pmore
    7cf0:	add	x22, x21, #0x50
    7cf4:	mov	x8, #0xffffffffffffffff    	// #-1
    7cf8:	mov	x0, x22
    7cfc:	strb	wzr, [x21, #4]
    7d00:	str	x8, [x21, #96]
    7d04:	stp	x8, x19, [x21, #104]
    7d08:	bl	3100 <lzma_block_header_size@plt>
    7d0c:	cbz	w0, 7d48 <lzma_stream_encoder@@XZ_5.0+0x5b0>
    7d10:	add	x8, x21, #0x120
    7d14:	str	x8, [x21, #112]
    7d18:	b	7d64 <lzma_stream_encoder@@XZ_5.0+0x5cc>
    7d1c:	cmp	w8, #0x3
    7d20:	b.hi	7d40 <lzma_stream_encoder@@XZ_5.0+0x5a8>  // b.pmore
    7d24:	ldr	x8, [x21, #72]
    7d28:	ldr	x0, [x21, #8]
    7d2c:	mov	x1, x20
    7d30:	mov	x2, x19
    7d34:	blr	x8
    7d38:	cbnz	w0, 7d64 <lzma_stream_encoder@@XZ_5.0+0x5cc>
    7d3c:	b	7d7c <lzma_stream_encoder@@XZ_5.0+0x5e4>
    7d40:	mov	w0, #0xb                   	// #11
    7d44:	b	7d64 <lzma_stream_encoder@@XZ_5.0+0x5cc>
    7d48:	add	x0, x21, #0x8
    7d4c:	mov	x1, x20
    7d50:	mov	x2, x22
    7d54:	bl	62a0 <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    7d58:	add	x8, x21, #0x120
    7d5c:	str	x8, [x21, #112]
    7d60:	cbz	w0, 7d74 <lzma_stream_encoder@@XZ_5.0+0x5dc>
    7d64:	ldp	x20, x19, [sp, #32]
    7d68:	ldp	x22, x21, [sp, #16]
    7d6c:	ldp	x29, x30, [sp], #48
    7d70:	ret
    7d74:	mov	w8, #0x1                   	// #1
    7d78:	strb	w8, [x21, #4]
    7d7c:	ldr	x8, [x21, #288]
    7d80:	add	x22, x21, #0x120
    7d84:	cmn	x8, #0x1
    7d88:	b.eq	7da8 <lzma_stream_encoder@@XZ_5.0+0x610>  // b.none
    7d8c:	add	x21, x21, #0x130
    7d90:	ldur	x0, [x21, #-8]
    7d94:	mov	x1, x20
    7d98:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    7d9c:	ldr	x8, [x21], #16
    7da0:	cmn	x8, #0x1
    7da4:	b.ne	7d90 <lzma_stream_encoder@@XZ_5.0+0x5f8>  // b.any
    7da8:	mov	x0, x19
    7dac:	mov	x1, x22
    7db0:	mov	x2, x20
    7db4:	ldp	x20, x19, [sp, #32]
    7db8:	ldp	x22, x21, [sp, #16]
    7dbc:	ldp	x29, x30, [sp], #48
    7dc0:	b	31d0 <lzma_filters_copy@plt>

0000000000007dc4 <lzma_stream_header_encode@@XZ_5.0>:
    7dc4:	stp	x29, x30, [sp, #-32]!
    7dc8:	ldr	w8, [x0]
    7dcc:	str	x19, [sp, #16]
    7dd0:	mov	x29, sp
    7dd4:	cbz	w8, 7de0 <lzma_stream_header_encode@@XZ_5.0+0x1c>
    7dd8:	mov	w0, #0x8                   	// #8
    7ddc:	b	7e38 <lzma_stream_header_encode@@XZ_5.0+0x74>
    7de0:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    7de4:	ldr	x8, [x8, #3936]
    7de8:	mov	x19, x1
    7dec:	ldrh	w9, [x8, #4]
    7df0:	ldr	w8, [x8]
    7df4:	strh	w9, [x1, #4]
    7df8:	str	w8, [x1]
    7dfc:	ldr	w8, [x0, #16]
    7e00:	cmp	w8, #0xf
    7e04:	b.ls	7e10 <lzma_stream_header_encode@@XZ_5.0+0x4c>  // b.plast
    7e08:	mov	w0, #0xb                   	// #11
    7e0c:	b	7e38 <lzma_stream_header_encode@@XZ_5.0+0x74>
    7e10:	strb	wzr, [x19, #6]
    7e14:	ldr	w8, [x0, #16]
    7e18:	add	x0, x19, #0x6
    7e1c:	mov	w1, #0x2                   	// #2
    7e20:	mov	w2, wzr
    7e24:	strb	w8, [x19, #7]
    7e28:	bl	3160 <lzma_crc32@plt>
    7e2c:	mov	w8, w0
    7e30:	mov	w0, wzr
    7e34:	str	w8, [x19, #8]
    7e38:	ldr	x19, [sp, #16]
    7e3c:	ldp	x29, x30, [sp], #32
    7e40:	ret

0000000000007e44 <lzma_stream_footer_encode@@XZ_5.0>:
    7e44:	stp	x29, x30, [sp, #-32]!
    7e48:	ldr	w9, [x0]
    7e4c:	str	x19, [sp, #16]
    7e50:	mov	x29, sp
    7e54:	cbz	w9, 7e68 <lzma_stream_footer_encode@@XZ_5.0+0x24>
    7e58:	mov	w0, #0x8                   	// #8
    7e5c:	ldr	x19, [sp, #16]
    7e60:	ldp	x29, x30, [sp], #32
    7e64:	ret
    7e68:	ldr	x9, [x0, #8]
    7e6c:	mov	x11, #0x3fffffffc           	// #17179869180
    7e70:	mov	x8, x0
    7e74:	mov	w0, #0xb                   	// #11
    7e78:	sub	x10, x9, #0x4
    7e7c:	cmp	x10, x11
    7e80:	b.hi	7e5c <lzma_stream_footer_encode@@XZ_5.0+0x18>  // b.pmore
    7e84:	and	x10, x9, #0x3
    7e88:	cbnz	x10, 7e5c <lzma_stream_footer_encode@@XZ_5.0+0x18>
    7e8c:	lsr	x9, x9, #2
    7e90:	sub	w9, w9, #0x1
    7e94:	mov	x0, x1
    7e98:	str	w9, [x0, #4]!
    7e9c:	ldr	w9, [x8, #16]
    7ea0:	mov	x19, x1
    7ea4:	cmp	w9, #0xf
    7ea8:	b.ls	7eb4 <lzma_stream_footer_encode@@XZ_5.0+0x70>  // b.plast
    7eac:	mov	w0, #0xb                   	// #11
    7eb0:	b	7e5c <lzma_stream_footer_encode@@XZ_5.0+0x18>
    7eb4:	strb	wzr, [x19, #8]
    7eb8:	ldr	w8, [x8, #16]
    7ebc:	mov	w1, #0x6                   	// #6
    7ec0:	mov	w2, wzr
    7ec4:	strb	w8, [x19, #9]
    7ec8:	bl	3160 <lzma_crc32@plt>
    7ecc:	mov	w8, w0
    7ed0:	strb	w8, [x19]
    7ed4:	adrp	x11, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    7ed8:	ldr	x11, [x11, #3976]
    7edc:	lsr	w9, w8, #8
    7ee0:	strb	w9, [x19, #1]
    7ee4:	mov	w0, wzr
    7ee8:	ldrh	w9, [x11]
    7eec:	lsr	w10, w8, #16
    7ef0:	lsr	w8, w8, #24
    7ef4:	strb	w10, [x19, #2]
    7ef8:	strb	w8, [x19, #3]
    7efc:	strh	w9, [x19, #10]
    7f00:	b	7e5c <lzma_stream_footer_encode@@XZ_5.0+0x18>

0000000000007f04 <lzma_vli_encode@@XZ_5.0>:
    7f04:	sub	sp, sp, #0x10
    7f08:	ldr	x10, [x3]
    7f0c:	cmp	x1, #0x0
    7f10:	add	x9, sp, #0x8
    7f14:	mov	w11, #0xa                   	// #10
    7f18:	mov	x8, x0
    7f1c:	csel	x9, x9, x1, eq  // eq = none
    7f20:	cinc	w0, w11, eq  // eq = none
    7f24:	cmp	x10, x4
    7f28:	str	xzr, [sp, #8]
    7f2c:	b.cs	7fb4 <lzma_vli_encode@@XZ_5.0+0xb0>  // b.hs, b.nlast
    7f30:	mov	w0, #0xb                   	// #11
    7f34:	tbnz	x8, #63, 7fb4 <lzma_vli_encode@@XZ_5.0+0xb0>
    7f38:	ldr	x12, [x9]
    7f3c:	cmp	x12, #0x8
    7f40:	b.hi	7fb4 <lzma_vli_encode@@XZ_5.0+0xb0>  // b.pmore
    7f44:	lsl	x11, x12, #3
    7f48:	sub	x11, x11, x12
    7f4c:	lsr	x11, x8, x11
    7f50:	add	x8, x12, #0x1
    7f54:	cmp	x11, #0x80
    7f58:	b.cc	7f98 <lzma_vli_encode@@XZ_5.0+0x94>  // b.lo, b.ul, b.last
    7f5c:	orr	w12, w11, #0x80
    7f60:	str	x8, [x9]
    7f64:	strb	w12, [x2, x10]
    7f68:	add	x10, x10, #0x1
    7f6c:	lsr	x11, x11, #7
    7f70:	cmp	x4, x10
    7f74:	add	x8, x8, #0x1
    7f78:	str	x10, [x3]
    7f7c:	b.ne	7f54 <lzma_vli_encode@@XZ_5.0+0x50>  // b.any
    7f80:	add	x8, sp, #0x8
    7f84:	cmp	x9, x8
    7f88:	mov	w8, #0xb                   	// #11
    7f8c:	csel	w0, w8, wzr, eq  // eq = none
    7f90:	add	sp, sp, #0x10
    7f94:	ret
    7f98:	strb	w11, [x2, x10]
    7f9c:	add	x11, sp, #0x8
    7fa0:	cmp	x9, x11
    7fa4:	add	x10, x10, #0x1
    7fa8:	cset	w0, ne  // ne = any
    7fac:	str	x10, [x3]
    7fb0:	str	x8, [x9]
    7fb4:	add	sp, sp, #0x10
    7fb8:	ret
    7fbc:	mov	x8, x0
    7fc0:	lsr	x9, x0, #48
    7fc4:	mov	x0, #0xffffffffffffffff    	// #-1
    7fc8:	cbnz	x9, 7fe8 <lzma_vli_encode@@XZ_5.0+0xe4>
    7fcc:	cmp	w1, #0x4, lsl #12
    7fd0:	b.hi	7fe8 <lzma_vli_encode@@XZ_5.0+0xe4>  // b.pmore
    7fd4:	lsl	w9, w1, #1
    7fd8:	mul	x8, x9, x8
    7fdc:	mov	w10, #0x28                  	// #40
    7fe0:	umaddl	x8, w9, w10, x8
    7fe4:	add	x0, x8, #0x30
    7fe8:	ret
    7fec:	stp	x29, x30, [sp, #-64]!
    7ff0:	stp	x20, x19, [sp, #48]
    7ff4:	mov	x19, x0
    7ff8:	lsr	x8, x2, #48
    7ffc:	mov	w0, #0x8                   	// #8
    8000:	str	x23, [sp, #16]
    8004:	stp	x22, x21, [sp, #32]
    8008:	mov	x29, sp
    800c:	cbnz	x8, 80cc <lzma_vli_encode@@XZ_5.0+0x1c8>
    8010:	cmp	w3, #0x4, lsl #12
    8014:	b.hi	80cc <lzma_vli_encode@@XZ_5.0+0x1c8>  // b.pmore
    8018:	ldr	x8, [x19, #16]
    801c:	mov	x21, x2
    8020:	mov	x20, x1
    8024:	lsl	w23, w3, #1
    8028:	cmp	x8, x2
    802c:	b.ne	803c <lzma_vli_encode@@XZ_5.0+0x138>  // b.any
    8030:	ldr	w8, [x19, #24]
    8034:	cmp	w8, w23
    8038:	b.eq	8090 <lzma_vli_encode@@XZ_5.0+0x18c>  // b.none
    803c:	ldr	x0, [x19]
    8040:	mov	x1, x20
    8044:	mul	x22, x23, x21
    8048:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    804c:	ldr	x0, [x19, #8]
    8050:	mov	x1, x20
    8054:	str	xzr, [x19]
    8058:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    805c:	add	x8, x23, x23, lsl #2
    8060:	lsl	x0, x8, #3
    8064:	mov	x1, x20
    8068:	str	xzr, [x19, #8]
    806c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    8070:	str	x0, [x19]
    8074:	mov	x0, x22
    8078:	mov	x1, x20
    807c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    8080:	ldr	x8, [x19]
    8084:	str	x0, [x19, #8]
    8088:	cbz	x0, 80a8 <lzma_vli_encode@@XZ_5.0+0x1a4>
    808c:	cbz	x8, 80a8 <lzma_vli_encode@@XZ_5.0+0x1a4>
    8090:	mov	w0, wzr
    8094:	str	x21, [x19, #16]
    8098:	stp	wzr, wzr, [x19, #28]
    809c:	str	w23, [x19, #24]
    80a0:	str	xzr, [x19, #40]
    80a4:	b	80cc <lzma_vli_encode@@XZ_5.0+0x1c8>
    80a8:	mov	x0, x8
    80ac:	mov	x1, x20
    80b0:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    80b4:	ldr	x0, [x19, #8]
    80b8:	mov	x1, x20
    80bc:	str	xzr, [x19]
    80c0:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    80c4:	str	xzr, [x19, #8]
    80c8:	mov	w0, #0x5                   	// #5
    80cc:	ldp	x20, x19, [sp, #48]
    80d0:	ldp	x22, x21, [sp, #32]
    80d4:	ldr	x23, [sp, #16]
    80d8:	ldp	x29, x30, [sp], #64
    80dc:	ret
    80e0:	stp	x29, x30, [sp, #-32]!
    80e4:	stp	x20, x19, [sp, #16]
    80e8:	mov	x19, x0
    80ec:	ldr	x0, [x0]
    80f0:	mov	x29, sp
    80f4:	mov	x20, x1
    80f8:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    80fc:	ldr	x0, [x19, #8]
    8100:	mov	x1, x20
    8104:	str	xzr, [x19]
    8108:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    810c:	str	xzr, [x19, #8]
    8110:	ldp	x20, x19, [sp, #16]
    8114:	ldp	x29, x30, [sp], #32
    8118:	ret
    811c:	ldr	w9, [x0, #28]
    8120:	ldp	x8, x10, [x0]
    8124:	ldr	x11, [x0, #16]
    8128:	mov	w12, #0x28                  	// #40
    812c:	madd	x8, x9, x12, x8
    8130:	madd	x10, x11, x9, x10
    8134:	stp	x10, xzr, [x8]
    8138:	strb	wzr, [x8, #32]
    813c:	ldr	w10, [x0, #24]
    8140:	ldr	w11, [x0, #32]
    8144:	add	w12, w9, #0x1
    8148:	cmp	w12, w10
    814c:	add	w10, w11, #0x1
    8150:	csinc	w9, wzr, w9, eq  // eq = none
    8154:	stp	w9, w10, [x0, #28]
    8158:	mov	x0, x8
    815c:	ret
    8160:	ldp	w8, w9, [x0, #28]
    8164:	subs	w8, w8, w9
    8168:	b.cs	8174 <lzma_vli_encode@@XZ_5.0+0x270>  // b.hs, b.nlast
    816c:	ldr	w9, [x0, #24]
    8170:	add	w8, w9, w8
    8174:	ldr	x9, [x0]
    8178:	mov	w10, #0x28                  	// #40
    817c:	umaddl	x8, w8, w10, x9
    8180:	ldrb	w0, [x8, #32]
    8184:	ret
    8188:	stp	x29, x30, [sp, #-64]!
    818c:	ldr	w8, [x0, #32]
    8190:	stp	x24, x23, [sp, #16]
    8194:	stp	x22, x21, [sp, #32]
    8198:	stp	x20, x19, [sp, #48]
    819c:	mov	x29, sp
    81a0:	cbz	w8, 820c <lzma_vli_encode@@XZ_5.0+0x308>
    81a4:	ldr	w9, [x0, #28]
    81a8:	mov	x19, x5
    81ac:	mov	x20, x4
    81b0:	mov	x5, x3
    81b4:	mov	x4, x2
    81b8:	mov	x21, x0
    81bc:	mov	x3, x1
    81c0:	subs	w8, w9, w8
    81c4:	b.cs	81d0 <lzma_vli_encode@@XZ_5.0+0x2cc>  // b.hs, b.nlast
    81c8:	ldr	w9, [x21, #24]
    81cc:	add	w8, w9, w8
    81d0:	ldr	x22, [x21]
    81d4:	mov	w9, #0x28                  	// #40
    81d8:	umaddl	x9, w8, w9, x22
    81dc:	ldrb	w9, [x9, #32]
    81e0:	cbz	w9, 820c <lzma_vli_encode@@XZ_5.0+0x308>
    81e4:	mov	w23, w8
    81e8:	mov	w8, #0x28                  	// #40
    81ec:	madd	x24, x23, x8, x22
    81f0:	ldp	x0, x2, [x24]
    81f4:	add	x1, x21, #0x28
    81f8:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    81fc:	ldr	x8, [x21, #40]
    8200:	ldr	x9, [x24, #8]
    8204:	cmp	x8, x9
    8208:	b.cs	8214 <lzma_vli_encode@@XZ_5.0+0x310>  // b.hs, b.nlast
    820c:	mov	w0, wzr
    8210:	b	823c <lzma_vli_encode@@XZ_5.0+0x338>
    8214:	mov	w8, #0x28                  	// #40
    8218:	madd	x8, x23, x8, x22
    821c:	ldp	x9, x8, [x8, #16]
    8220:	ldr	w10, [x21, #32]
    8224:	mov	w0, #0x1                   	// #1
    8228:	str	xzr, [x21, #40]
    822c:	str	x9, [x20]
    8230:	sub	w9, w10, #0x1
    8234:	str	w9, [x21, #32]
    8238:	str	x8, [x19]
    823c:	ldp	x20, x19, [sp, #48]
    8240:	ldp	x22, x21, [sp, #32]
    8244:	ldp	x24, x23, [sp, #16]
    8248:	ldp	x29, x30, [sp], #64
    824c:	ret

0000000000008250 <lzma_stream_encoder_mt@@XZ_5.2>:
    8250:	stp	x29, x30, [sp, #-48]!
    8254:	str	x21, [sp, #16]
    8258:	stp	x20, x19, [sp, #32]
    825c:	mov	x29, sp
    8260:	mov	x21, x1
    8264:	mov	x20, x0
    8268:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    826c:	mov	w19, w0
    8270:	cbnz	w0, 82ac <lzma_stream_encoder_mt@@XZ_5.2+0x5c>
    8274:	ldp	x1, x0, [x20, #48]
    8278:	mov	x2, x21
    827c:	bl	82c0 <lzma_stream_encoder_mt@@XZ_5.2+0x70>
    8280:	mov	w19, w0
    8284:	cbz	w0, 8294 <lzma_stream_encoder_mt@@XZ_5.2+0x44>
    8288:	mov	x0, x20
    828c:	bl	32c0 <lzma_end@plt>
    8290:	b	82ac <lzma_stream_encoder_mt@@XZ_5.2+0x5c>
    8294:	ldr	x8, [x20, #56]
    8298:	mov	w9, #0x1                   	// #1
    829c:	mov	w10, #0x101                 	// #257
    82a0:	strb	w9, [x8, #88]
    82a4:	strh	w10, [x8, #90]
    82a8:	strb	w9, [x8, #92]
    82ac:	mov	w0, w19
    82b0:	ldp	x20, x19, [sp, #32]
    82b4:	ldr	x21, [sp, #16]
    82b8:	ldp	x29, x30, [sp], #48
    82bc:	ret
    82c0:	sub	sp, sp, #0x140
    82c4:	stp	x29, x30, [sp, #224]
    82c8:	stp	x28, x27, [sp, #240]
    82cc:	stp	x26, x25, [sp, #256]
    82d0:	stp	x24, x23, [sp, #272]
    82d4:	stp	x22, x21, [sp, #288]
    82d8:	stp	x20, x19, [sp, #304]
    82dc:	ldr	x8, [x0, #16]
    82e0:	adrp	x21, 8000 <lzma_vli_encode@@XZ_5.0+0xfc>
    82e4:	add	x21, x21, #0x2c0
    82e8:	mov	x19, x2
    82ec:	mov	x23, x0
    82f0:	cmp	x8, x21
    82f4:	mov	x20, x1
    82f8:	add	x29, sp, #0xe0
    82fc:	b.eq	830c <lzma_stream_encoder_mt@@XZ_5.2+0xbc>  // b.none
    8300:	mov	x0, x23
    8304:	mov	x1, x20
    8308:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    830c:	str	x21, [x23, #16]
    8310:	cbz	x19, 83a0 <lzma_stream_encoder_mt@@XZ_5.2+0x150>
    8314:	ldr	w8, [x19]
    8318:	cbnz	w8, 83a8 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    831c:	ldr	w8, [x19, #4]
    8320:	sub	w8, w8, #0x1
    8324:	lsr	w8, w8, #14
    8328:	cbnz	w8, 83a8 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    832c:	ldr	x21, [x19, #24]
    8330:	cbz	x21, 8348 <lzma_stream_encoder_mt@@XZ_5.2+0xf8>
    8334:	ldr	x25, [x19, #8]
    8338:	cbz	x25, 8364 <lzma_stream_encoder_mt@@XZ_5.2+0x114>
    833c:	lsr	x8, x25, #50
    8340:	cbnz	x8, 83a8 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    8344:	b	8374 <lzma_stream_encoder_mt@@XZ_5.2+0x124>
    8348:	ldr	w1, [x19, #20]
    834c:	mov	x0, sp
    8350:	bl	406c <lzma_block_total_size@@XZ_5.0+0xa8>
    8354:	tbnz	w0, #0, 83a8 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    8358:	mov	x21, sp
    835c:	ldr	x25, [x19, #8]
    8360:	cbnz	x25, 833c <lzma_stream_encoder_mt@@XZ_5.2+0xec>
    8364:	mov	x0, x21
    8368:	bl	6d28 <lzma_raw_encoder@@XZ_5.0+0x78>
    836c:	mov	x25, x0
    8370:	cbz	x0, 83a8 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    8374:	mov	x0, x25
    8378:	bl	5d34 <lzma_alone_encoder@@XZ_5.0+0x2fc>
    837c:	cbz	x0, 85ac <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    8380:	mov	x24, x0
    8384:	mov	x0, x21
    8388:	bl	31b0 <lzma_raw_encoder_memusage@plt>
    838c:	cmn	x0, #0x1
    8390:	b.eq	83a8 <lzma_stream_encoder_mt@@XZ_5.2+0x158>  // b.none
    8394:	ldr	w0, [x19, #32]
    8398:	cmp	w0, #0xf
    839c:	b.ls	83cc <lzma_stream_encoder_mt@@XZ_5.2+0x17c>  // b.plast
    83a0:	mov	w0, #0xb                   	// #11
    83a4:	b	83ac <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    83a8:	mov	w0, #0x8                   	// #8
    83ac:	ldp	x20, x19, [sp, #304]
    83b0:	ldp	x22, x21, [sp, #288]
    83b4:	ldp	x24, x23, [sp, #272]
    83b8:	ldp	x26, x25, [sp, #256]
    83bc:	ldp	x28, x27, [sp, #240]
    83c0:	ldp	x29, x30, [sp, #224]
    83c4:	add	sp, sp, #0x140
    83c8:	ret
    83cc:	bl	3080 <lzma_check_is_supported@plt>
    83d0:	tst	w0, #0xff
    83d4:	b.eq	8414 <lzma_stream_encoder_mt@@XZ_5.2+0x1c4>  // b.none
    83d8:	ldr	x22, [x23]
    83dc:	cbz	x22, 841c <lzma_stream_encoder_mt@@XZ_5.2+0x1cc>
    83e0:	str	wzr, [x22]
    83e4:	str	x25, [x22, #8]
    83e8:	str	wzr, [x22, #308]
    83ec:	str	xzr, [x22, #336]
    83f0:	ldr	w8, [x22, #320]
    83f4:	ldr	w9, [x19, #4]
    83f8:	cmp	w8, w9
    83fc:	b.ne	8484 <lzma_stream_encoder_mt@@XZ_5.2+0x234>  // b.any
    8400:	mov	w1, #0x1                   	// #1
    8404:	mov	x0, x22
    8408:	bl	90fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xaec>
    840c:	ldr	w3, [x19, #4]
    8410:	b	84bc <lzma_stream_encoder_mt@@XZ_5.2+0x26c>
    8414:	mov	w0, #0x3                   	// #3
    8418:	b	83ac <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    841c:	mov	w0, #0x1d0                 	// #464
    8420:	mov	x1, x20
    8424:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    8428:	cbz	x0, 85ac <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    842c:	add	x26, x0, #0x168
    8430:	mov	x22, x0
    8434:	str	x0, [x23]
    8438:	mov	x0, x26
    843c:	mov	x1, xzr
    8440:	bl	3240 <pthread_mutex_init@plt>
    8444:	cbnz	w0, 859c <lzma_stream_encoder_mt@@XZ_5.2+0x34c>
    8448:	sub	x1, x29, #0x18
    844c:	mov	w0, #0x1                   	// #1
    8450:	add	x27, x22, #0x198
    8454:	bl	30f0 <clock_gettime@plt>
    8458:	cbnz	w0, 8580 <lzma_stream_encoder_mt@@XZ_5.2+0x330>
    845c:	sub	x0, x29, #0x20
    8460:	bl	3350 <pthread_condattr_init@plt>
    8464:	cbnz	w0, 8580 <lzma_stream_encoder_mt@@XZ_5.2+0x330>
    8468:	sub	x0, x29, #0x20
    846c:	mov	w1, #0x1                   	// #1
    8470:	bl	3410 <pthread_condattr_setclock@plt>
    8474:	cbz	w0, 8564 <lzma_stream_encoder_mt@@XZ_5.2+0x314>
    8478:	sub	x0, x29, #0x20
    847c:	bl	3170 <pthread_condattr_destroy@plt>
    8480:	b	8580 <lzma_stream_encoder_mt@@XZ_5.2+0x330>
    8484:	mov	x0, x22
    8488:	mov	x1, x20
    848c:	bl	9030 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa20>
    8490:	stp	xzr, xzr, [x22, #312]
    8494:	str	xzr, [x22, #328]
    8498:	ldr	w8, [x19, #4]
    849c:	mov	w9, #0x1d0                 	// #464
    84a0:	mov	x1, x20
    84a4:	mul	x0, x8, x9
    84a8:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    84ac:	str	x0, [x22, #312]
    84b0:	cbz	x0, 85ac <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    84b4:	ldr	w3, [x19, #4]
    84b8:	str	w3, [x22, #320]
    84bc:	add	x0, x22, #0x100
    84c0:	mov	x1, x20
    84c4:	mov	x2, x24
    84c8:	bl	7fec <lzma_vli_encode@@XZ_5.0+0xe8>
    84cc:	cbnz	w0, 83ac <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    84d0:	ldr	x8, [x22, #16]
    84d4:	ldr	w9, [x19, #16]
    84d8:	cmn	x8, #0x1
    84dc:	str	w9, [x22, #304]
    84e0:	b.eq	8500 <lzma_stream_encoder_mt@@XZ_5.2+0x2b0>  // b.none
    84e4:	add	x23, x22, #0x20
    84e8:	ldur	x0, [x23, #-8]
    84ec:	mov	x1, x20
    84f0:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    84f4:	ldr	x8, [x23], #16
    84f8:	cmn	x8, #0x1
    84fc:	b.ne	84e8 <lzma_stream_encoder_mt@@XZ_5.2+0x298>  // b.any
    8500:	add	x1, x22, #0x10
    8504:	mov	x0, x21
    8508:	mov	x2, x20
    850c:	bl	31d0 <lzma_filters_copy@plt>
    8510:	cbnz	w0, 83ac <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    8514:	ldr	x0, [x22, #96]
    8518:	mov	x1, x20
    851c:	bl	3360 <lzma_index_end@plt>
    8520:	mov	x0, x20
    8524:	bl	3330 <lzma_index_init@plt>
    8528:	str	x0, [x22, #96]
    852c:	cbz	x0, 85ac <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    8530:	mov	x0, x22
    8534:	str	wzr, [x0, #176]!
    8538:	ldr	w8, [x19, #32]
    853c:	add	x1, x0, #0x38
    8540:	str	w8, [x0, #16]
    8544:	bl	3310 <lzma_stream_header_encode@plt>
    8548:	cbnz	w0, 83ac <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    854c:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    8550:	ldr	q0, [x8, #2256]
    8554:	add	x8, x22, #0x158
    8558:	str	xzr, [x22, #248]
    855c:	str	q0, [x8]
    8560:	b	83ac <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    8564:	sub	x1, x29, #0x20
    8568:	mov	x0, x27
    856c:	bl	33a0 <pthread_cond_init@plt>
    8570:	mov	w28, w0
    8574:	sub	x0, x29, #0x20
    8578:	bl	3170 <pthread_condattr_destroy@plt>
    857c:	cbz	w28, 85b4 <lzma_stream_encoder_mt@@XZ_5.2+0x364>
    8580:	mov	x0, x27
    8584:	mov	x1, xzr
    8588:	str	wzr, [x22, #456]
    858c:	bl	33a0 <pthread_cond_init@plt>
    8590:	cbz	w0, 85bc <lzma_stream_encoder_mt@@XZ_5.2+0x36c>
    8594:	mov	x0, x26
    8598:	bl	3390 <pthread_mutex_destroy@plt>
    859c:	mov	x0, x22
    85a0:	mov	x1, x20
    85a4:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    85a8:	str	xzr, [x23]
    85ac:	mov	w0, #0x5                   	// #5
    85b0:	b	83ac <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    85b4:	mov	w8, #0x1                   	// #1
    85b8:	str	w8, [x22, #456]
    85bc:	adrp	x8, 8000 <lzma_vli_encode@@XZ_5.0+0xfc>
    85c0:	adrp	x9, 8000 <lzma_vli_encode@@XZ_5.0+0xfc>
    85c4:	add	x8, x8, #0x734
    85c8:	add	x9, x9, #0xee8
    85cc:	stp	x8, x9, [x23, #24]
    85d0:	adrp	x8, 8000 <lzma_vli_encode@@XZ_5.0+0xfc>
    85d4:	add	x8, x8, #0xf78
    85d8:	str	x8, [x23, #40]
    85dc:	mov	x8, #0xffffffffffffffff    	// #-1
    85e0:	movi	v0.2d, #0x0
    85e4:	str	x8, [x22, #16]
    85e8:	stp	xzr, x8, [x22, #104]
    85ec:	str	xzr, [x22, #96]
    85f0:	stp	q0, q0, [x22, #256]
    85f4:	str	q0, [x22, #288]
    85f8:	stp	xzr, xzr, [x22, #312]
    85fc:	stur	q0, [x22, #120]
    8600:	stur	q0, [x22, #136]
    8604:	stur	q0, [x22, #152]
    8608:	str	xzr, [x22, #168]
    860c:	b	83e0 <lzma_stream_encoder_mt@@XZ_5.2+0x190>

0000000000008610 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    8610:	sub	sp, sp, #0x100
    8614:	stp	x29, x30, [sp, #192]
    8618:	str	x23, [sp, #208]
    861c:	stp	x22, x21, [sp, #224]
    8620:	stp	x20, x19, [sp, #240]
    8624:	add	x29, sp, #0xc0
    8628:	cbz	x0, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    862c:	ldr	w8, [x0]
    8630:	mov	x19, x0
    8634:	cbnz	w8, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8638:	ldr	w8, [x19, #4]
    863c:	sub	w8, w8, #0x1
    8640:	lsr	w8, w8, #14
    8644:	cbnz	w8, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8648:	ldr	x21, [x19, #24]
    864c:	cbz	x21, 8664 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x54>
    8650:	ldr	x20, [x19, #8]
    8654:	cbz	x20, 8680 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x70>
    8658:	lsr	x8, x20, #50
    865c:	cbnz	x8, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8660:	b	8690 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x80>
    8664:	ldr	w1, [x19, #20]
    8668:	mov	x0, sp
    866c:	bl	406c <lzma_block_total_size@@XZ_5.0+0xa8>
    8670:	tbnz	w0, #0, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8674:	mov	x21, sp
    8678:	ldr	x20, [x19, #8]
    867c:	cbnz	x20, 8658 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x48>
    8680:	mov	x0, x21
    8684:	bl	6d28 <lzma_raw_encoder@@XZ_5.0+0x78>
    8688:	mov	x20, x0
    868c:	cbz	x0, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8690:	mov	x0, x20
    8694:	bl	5d34 <lzma_alone_encoder@@XZ_5.0+0x2fc>
    8698:	cbz	x0, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    869c:	ldr	w22, [x19, #4]
    86a0:	mov	x23, x0
    86a4:	mov	x0, x21
    86a8:	bl	31b0 <lzma_raw_encoder_memusage@plt>
    86ac:	cmn	x0, #0x1
    86b0:	b.eq	870c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>  // b.none
    86b4:	mov	x21, x0
    86b8:	mov	x0, x23
    86bc:	mov	w1, w22
    86c0:	bl	7fbc <lzma_vli_encode@@XZ_5.0+0xb8>
    86c4:	cmn	x0, #0x1
    86c8:	b.eq	870c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>  // b.none
    86cc:	ldr	w9, [x19, #4]
    86d0:	mov	w10, #0x1d0                 	// #464
    86d4:	mul	x8, x20, x22
    86d8:	mul	x10, x9, x10
    86dc:	mov	x9, #0xffffffffffff7e2f    	// #-33233
    86e0:	sub	x9, x9, x10
    86e4:	cmp	x9, x8
    86e8:	b.cc	8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>  // b.lo, b.ul, b.last
    86ec:	add	x8, x8, x10
    86f0:	mov	w10, #0x81d0                	// #33232
    86f4:	add	x8, x8, x10
    86f8:	mul	x9, x21, x22
    86fc:	mvn	x10, x8
    8700:	cmp	x9, x10
    8704:	b.ls	8724 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x114>  // b.plast
    8708:	mov	x0, #0xffffffffffffffff    	// #-1
    870c:	ldp	x20, x19, [sp, #240]
    8710:	ldp	x22, x21, [sp, #224]
    8714:	ldr	x23, [sp, #208]
    8718:	ldp	x29, x30, [sp, #192]
    871c:	add	sp, sp, #0x100
    8720:	ret
    8724:	add	x8, x8, x9
    8728:	adds	x8, x8, x0
    872c:	csinv	x0, x8, xzr, cc  // cc = lo, ul, last
    8730:	b	870c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>
    8734:	stp	x29, x30, [sp, #-96]!
    8738:	stp	x28, x27, [sp, #16]
    873c:	stp	x26, x25, [sp, #32]
    8740:	stp	x24, x23, [sp, #48]
    8744:	stp	x22, x21, [sp, #64]
    8748:	stp	x20, x19, [sp, #80]
    874c:	mov	x29, sp
    8750:	sub	sp, sp, #0x1b0
    8754:	ldr	w8, [x0]
    8758:	str	x2, [sp, #120]
    875c:	cmp	w8, #0x3
    8760:	b.hi	8e8c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x87c>  // b.pmore
    8764:	adrp	x9, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    8768:	add	x9, x9, #0x910
    876c:	adr	x10, 8798 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x188>
    8770:	ldrh	w11, [x9, x8, lsl #1]
    8774:	add	x10, x10, x11, lsl #2
    8778:	mov	x20, x7
    877c:	mov	x21, x6
    8780:	mov	x26, x5
    8784:	mov	x24, x4
    8788:	mov	x25, x3
    878c:	mov	x19, x0
    8790:	mov	x23, x1
    8794:	br	x10
    8798:	add	x0, x19, #0xe8
    879c:	add	x1, x19, #0xf8
    87a0:	mov	w2, #0xc                   	// #12
    87a4:	mov	x3, x26
    87a8:	mov	x4, x21
    87ac:	mov	x5, x20
    87b0:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    87b4:	ldr	x8, [x19, #248]
    87b8:	cmp	x8, #0xc
    87bc:	b.cs	87c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1b8>  // b.hs, b.nlast
    87c0:	mov	w22, wzr
    87c4:	b	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    87c8:	mov	w8, #0x1                   	// #1
    87cc:	str	xzr, [x19, #248]
    87d0:	str	w8, [x19]
    87d4:	add	x8, x19, #0x198
    87d8:	str	x8, [sp, #104]
    87dc:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    87e0:	ldr	q0, [x8, #2304]
    87e4:	str	x23, [sp, #112]
    87e8:	ldr	w23, [x29, #96]
    87ec:	mov	w8, #0xc9ff                	// #51711
    87f0:	movk	w8, #0x3b9a, lsl #16
    87f4:	add	x27, x19, #0x168
    87f8:	add	x28, x19, #0x100
    87fc:	str	q0, [sp, #64]
    8800:	fmov	d0, x8
    8804:	str	x26, [sp, #88]
    8808:	str	wzr, [sp, #100]
    880c:	stp	xzr, xzr, [sp, #144]
    8810:	str	q0, [sp, #48]
    8814:	b	8824 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x214>
    8818:	mov	x0, x27
    881c:	bl	34d0 <pthread_mutex_unlock@plt>
    8820:	tbnz	w26, #0, 8d84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x774>
    8824:	ldr	x26, [sp, #88]
    8828:	mov	x0, x27
    882c:	bl	34b0 <pthread_mutex_lock@plt>
    8830:	ldr	w22, [x19, #308]
    8834:	cbnz	w22, 8858 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x248>
    8838:	add	x4, sp, #0x98
    883c:	add	x5, sp, #0x90
    8840:	mov	x0, x28
    8844:	mov	x1, x26
    8848:	mov	x2, x21
    884c:	mov	x3, x20
    8850:	bl	8188 <lzma_vli_encode@@XZ_5.0+0x284>
    8854:	mov	w22, w0
    8858:	mov	x0, x27
    885c:	bl	34d0 <pthread_mutex_unlock@plt>
    8860:	cmp	w22, #0x1
    8864:	b.ne	8888 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x278>  // b.any
    8868:	ldr	x0, [x19, #96]
    886c:	ldp	x3, x2, [sp, #144]
    8870:	ldr	x1, [sp, #112]
    8874:	bl	32a0 <lzma_index_append@plt>
    8878:	ldr	x8, [x21]
    887c:	cmp	x8, x20
    8880:	b.cc	8828 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x218>  // b.lo, b.ul, b.last
    8884:	mov	w22, w0
    8888:	cbz	w22, 88a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x294>
    888c:	b	8d28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x718>
    8890:	add	x0, x8, #0x190
    8894:	bl	3190 <pthread_cond_signal@plt>
    8898:	ldr	x8, [x19, #336]
    889c:	add	x0, x8, #0x160
    88a0:	bl	34d0 <pthread_mutex_unlock@plt>
    88a4:	ldr	x22, [x25]
    88a8:	ldr	x8, [x19, #336]
    88ac:	cmp	x22, x24
    88b0:	b.cs	8934 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x324>  // b.hs, b.nlast
    88b4:	cbnz	x8, 895c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x34c>
    88b8:	ldr	w8, [x19, #288]
    88bc:	ldr	w9, [x19, #280]
    88c0:	cmp	w8, w9
    88c4:	b.cs	8950 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x340>  // b.hs, b.nlast
    88c8:	mov	x0, x27
    88cc:	bl	34b0 <pthread_mutex_lock@plt>
    88d0:	ldr	x8, [x19, #328]
    88d4:	cbz	x8, 88e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d4>
    88d8:	str	x8, [x19, #336]
    88dc:	ldr	x8, [x8, #344]
    88e0:	str	x8, [x19, #328]
    88e4:	mov	x0, x27
    88e8:	bl	34d0 <pthread_mutex_unlock@plt>
    88ec:	ldr	x22, [x19, #336]
    88f0:	cbz	x22, 8940 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x330>
    88f4:	add	x0, x22, #0x160
    88f8:	bl	34b0 <pthread_mutex_lock@plt>
    88fc:	ldr	x8, [x19, #336]
    8900:	mov	w9, #0x1                   	// #1
    8904:	mov	x0, x28
    8908:	str	w9, [x8]
    890c:	str	xzr, [x8, #16]
    8910:	bl	811c <lzma_vli_encode@@XZ_5.0+0x218>
    8914:	ldr	x8, [x19, #336]
    8918:	str	x0, [x8, #24]
    891c:	add	x0, x8, #0x190
    8920:	bl	3190 <pthread_cond_signal@plt>
    8924:	ldr	x8, [x19, #336]
    8928:	add	x0, x8, #0x160
    892c:	bl	34d0 <pthread_mutex_unlock@plt>
    8930:	b	8950 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x340>
    8934:	cbz	w23, 8bf0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5e0>
    8938:	cbnz	x8, 895c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x34c>
    893c:	b	8bf0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5e0>
    8940:	ldr	w9, [x19, #324]
    8944:	ldr	w8, [x19, #320]
    8948:	cmp	w9, w8
    894c:	b.ne	89f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3e4>  // b.any
    8950:	mov	w22, wzr
    8954:	ldr	x8, [x19, #336]
    8958:	cbz	x8, 8be8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5d8>
    895c:	ldp	x3, x9, [x8, #8]
    8960:	ldr	x0, [sp, #120]
    8964:	sub	x4, x29, #0x90
    8968:	mov	x1, x25
    896c:	stur	x9, [x29, #-144]
    8970:	ldr	x5, [x19, #8]
    8974:	mov	x2, x24
    8978:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    897c:	ldur	x8, [x29, #-144]
    8980:	ldr	x9, [x19, #8]
    8984:	cmp	x8, x9
    8988:	b.ne	8994 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x384>  // b.any
    898c:	mov	w22, #0x1                   	// #1
    8990:	b	89ac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x39c>
    8994:	ldr	x8, [x25]
    8998:	cmp	w23, #0x0
    899c:	cset	w9, ne  // ne = any
    89a0:	cmp	x8, x24
    89a4:	cset	w8, eq  // eq = none
    89a8:	and	w22, w9, w8
    89ac:	ldr	x8, [x19, #336]
    89b0:	add	x0, x8, #0x160
    89b4:	bl	34b0 <pthread_mutex_lock@plt>
    89b8:	ldr	x8, [x19, #336]
    89bc:	ldr	w9, [x8]
    89c0:	cbz	w9, 8bcc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5bc>
    89c4:	ldur	x9, [x29, #-144]
    89c8:	str	x9, [x8, #16]
    89cc:	cbz	w22, 8890 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x280>
    89d0:	mov	w9, #0x2                   	// #2
    89d4:	add	x0, x8, #0x190
    89d8:	str	w9, [x8]
    89dc:	bl	3190 <pthread_cond_signal@plt>
    89e0:	ldr	x8, [x19, #336]
    89e4:	add	x0, x8, #0x160
    89e8:	bl	34d0 <pthread_mutex_unlock@plt>
    89ec:	str	xzr, [x19, #336]
    89f0:	b	88a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x294>
    89f4:	ldr	x26, [x19, #312]
    89f8:	ldr	x0, [x19, #8]
    89fc:	ldr	x1, [sp, #112]
    8a00:	mov	w8, #0x1d0                 	// #464
    8a04:	madd	x22, x9, x8, x26
    8a08:	str	x9, [sp, #80]
    8a0c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    8a10:	mov	x8, x22
    8a14:	str	x0, [x8, #8]!
    8a18:	cbz	x0, 8b84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x574>
    8a1c:	str	x8, [sp, #40]
    8a20:	ldr	x8, [sp, #80]
    8a24:	mov	w9, #0x1d0                 	// #464
    8a28:	mov	x1, xzr
    8a2c:	madd	x8, x8, x9, x26
    8a30:	add	x0, x8, #0x160
    8a34:	str	x0, [sp, #32]
    8a38:	bl	3240 <pthread_mutex_init@plt>
    8a3c:	cbnz	w0, 8b74 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x564>
    8a40:	ldr	x9, [sp, #80]
    8a44:	mov	w8, #0x1d0                 	// #464
    8a48:	sub	x1, x29, #0x90
    8a4c:	mov	w0, #0x1                   	// #1
    8a50:	madd	x8, x9, x8, x26
    8a54:	str	x26, [sp, #24]
    8a58:	add	x26, x8, #0x190
    8a5c:	bl	30f0 <clock_gettime@plt>
    8a60:	cbnz	w0, 8ab8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    8a64:	add	x0, sp, #0xa0
    8a68:	bl	3350 <pthread_condattr_init@plt>
    8a6c:	cbnz	w0, 8ab8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    8a70:	add	x0, sp, #0xa0
    8a74:	mov	w1, #0x1                   	// #1
    8a78:	str	x26, [sp, #16]
    8a7c:	bl	3410 <pthread_condattr_setclock@plt>
    8a80:	cbz	w0, 8a94 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x484>
    8a84:	add	x0, sp, #0xa0
    8a88:	bl	3170 <pthread_condattr_destroy@plt>
    8a8c:	ldr	x26, [sp, #16]
    8a90:	b	8ab8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    8a94:	ldr	x26, [sp, #16]
    8a98:	add	x1, sp, #0xa0
    8a9c:	mov	x0, x26
    8aa0:	bl	33a0 <pthread_cond_init@plt>
    8aa4:	str	w0, [sp, #12]
    8aa8:	add	x0, sp, #0xa0
    8aac:	bl	3170 <pthread_condattr_destroy@plt>
    8ab0:	ldr	w8, [sp, #12]
    8ab4:	cbz	w8, 8bb0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5a0>
    8ab8:	ldr	x9, [sp, #80]
    8abc:	ldr	x10, [sp, #24]
    8ac0:	mov	w8, #0x1d0                 	// #464
    8ac4:	mov	x0, x26
    8ac8:	mov	x1, xzr
    8acc:	madd	x8, x9, x8, x10
    8ad0:	str	wzr, [x8, #448]
    8ad4:	bl	33a0 <pthread_cond_init@plt>
    8ad8:	cbnz	w0, 8b6c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x55c>
    8adc:	ldr	x9, [sp, #80]
    8ae0:	ldr	x10, [sp, #24]
    8ae4:	mov	w8, #0x1d0                 	// #464
    8ae8:	str	x26, [sp, #16]
    8aec:	str	wzr, [x22]
    8af0:	madd	x8, x9, x8, x10
    8af4:	ldr	x9, [sp, #112]
    8af8:	movi	v0.2d, #0x0
    8afc:	add	x0, sp, #0xa0
    8b00:	stp	xzr, xzr, [x8, #48]
    8b04:	stp	x19, x9, [x8, #32]
    8b08:	mov	x9, #0xffffffffffffffff    	// #-1
    8b0c:	stp	xzr, x9, [x8, #64]
    8b10:	add	x26, x8, #0x1c8
    8b14:	stp	q0, q0, [x8, #80]
    8b18:	str	q0, [x8, #112]
    8b1c:	str	xzr, [x8, #128]
    8b20:	bl	3110 <sigfillset@plt>
    8b24:	add	x1, sp, #0xa0
    8b28:	sub	x2, x29, #0x90
    8b2c:	mov	w0, #0x2                   	// #2
    8b30:	bl	3060 <pthread_sigmask@plt>
    8b34:	adrp	x2, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    8b38:	mov	x0, x26
    8b3c:	mov	x1, xzr
    8b40:	add	x2, x2, #0x200
    8b44:	mov	x3, x22
    8b48:	bl	3250 <pthread_create@plt>
    8b4c:	mov	w26, w0
    8b50:	sub	x1, x29, #0x90
    8b54:	mov	w0, #0x2                   	// #2
    8b58:	mov	x2, xzr
    8b5c:	bl	3060 <pthread_sigmask@plt>
    8b60:	cbz	w26, 8b98 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x588>
    8b64:	ldr	x0, [sp, #16]
    8b68:	bl	34a0 <pthread_cond_destroy@plt>
    8b6c:	ldr	x0, [sp, #32]
    8b70:	bl	3390 <pthread_mutex_destroy@plt>
    8b74:	ldr	x8, [sp, #40]
    8b78:	ldr	x1, [sp, #112]
    8b7c:	ldr	x0, [x8]
    8b80:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    8b84:	ldr	x26, [sp, #88]
    8b88:	mov	w22, #0x5                   	// #5
    8b8c:	ldr	x8, [x19, #336]
    8b90:	cbnz	x8, 895c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x34c>
    8b94:	b	8be8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5d8>
    8b98:	ldr	w8, [x19, #324]
    8b9c:	ldr	x26, [sp, #88]
    8ba0:	str	x22, [x19, #336]
    8ba4:	add	w8, w8, #0x1
    8ba8:	str	w8, [x19, #324]
    8bac:	b	88f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2e4>
    8bb0:	ldr	x9, [sp, #80]
    8bb4:	ldr	x10, [sp, #24]
    8bb8:	mov	w8, #0x1d0                 	// #464
    8bbc:	madd	x8, x9, x8, x10
    8bc0:	mov	w9, #0x1                   	// #1
    8bc4:	str	w9, [x8, #448]
    8bc8:	b	8adc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4cc>
    8bcc:	add	x0, x8, #0x160
    8bd0:	bl	34d0 <pthread_mutex_unlock@plt>
    8bd4:	mov	x0, x27
    8bd8:	bl	34b0 <pthread_mutex_lock@plt>
    8bdc:	ldr	w22, [x19, #308]
    8be0:	mov	x0, x27
    8be4:	bl	34d0 <pthread_mutex_unlock@plt>
    8be8:	cbnz	w22, 8d8c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x77c>
    8bec:	ldr	x22, [x25]
    8bf0:	cmp	x22, x24
    8bf4:	b.ne	8c1c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x60c>  // b.any
    8bf8:	cbz	w23, 8df0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7e0>
    8bfc:	cmp	w23, #0x4
    8c00:	b.eq	8de8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7d8>  // b.none
    8c04:	ldr	w8, [x19, #288]
    8c08:	cbnz	w8, 8c1c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x60c>
    8c0c:	cmp	w23, #0x2
    8c10:	b.eq	8de8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7d8>  // b.none
    8c14:	cmp	w23, #0x3
    8c18:	b.eq	8df8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7e8>  // b.none
    8c1c:	ldr	x8, [x21]
    8c20:	cmp	x8, x20
    8c24:	b.eq	87c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1b0>  // b.none
    8c28:	ldr	w8, [sp, #100]
    8c2c:	tst	w8, #0xff
    8c30:	b.ne	8ca0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x690>  // b.any
    8c34:	ldr	w8, [x19, #304]
    8c38:	cbz	w8, 8ca0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x690>
    8c3c:	mov	w9, #0x4dd3                	// #19923
    8c40:	movk	w9, #0x1062, lsl #16
    8c44:	umull	x9, w8, w9
    8c48:	lsr	x9, x9, #38
    8c4c:	mov	w10, #0x3e8                 	// #1000
    8c50:	msub	w8, w9, w10, w8
    8c54:	mov	w10, #0x4240                	// #16960
    8c58:	movk	w10, #0xf, lsl #16
    8c5c:	mul	w8, w8, w10
    8c60:	stp	x9, x8, [sp, #128]
    8c64:	ldr	w0, [x19, #456]
    8c68:	sub	x1, x29, #0x90
    8c6c:	bl	30f0 <clock_gettime@plt>
    8c70:	ldur	q0, [x29, #-144]
    8c74:	ldr	q1, [sp, #128]
    8c78:	ldp	q3, q2, [sp, #48]
    8c7c:	mov	w8, #0x1                   	// #1
    8c80:	str	w8, [sp, #100]
    8c84:	add	v0.2d, v1.2d, v0.2d
    8c88:	dup	v1.2d, v0.d[1]
    8c8c:	cmgt	v1.2d, v1.2d, v3.2d
    8c90:	add	v2.2d, v0.2d, v2.2d
    8c94:	dup	v1.2d, v1.d[0]
    8c98:	bsl	v1.16b, v2.16b, v0.16b
    8c9c:	str	q1, [sp, #128]
    8ca0:	mov	x0, x27
    8ca4:	bl	34b0 <pthread_mutex_lock@plt>
    8ca8:	mov	w26, wzr
    8cac:	cmp	x22, x24
    8cb0:	b.cs	8cf0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6e0>  // b.hs, b.nlast
    8cb4:	b	8cd8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6c8>
    8cb8:	ldr	x0, [sp, #104]
    8cbc:	add	x2, sp, #0x80
    8cc0:	mov	x1, x27
    8cc4:	bl	34e0 <pthread_cond_timedwait@plt>
    8cc8:	cmp	w0, #0x0
    8ccc:	cset	w26, ne  // ne = any
    8cd0:	cmp	x22, x24
    8cd4:	b.cs	8cf0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6e0>  // b.hs, b.nlast
    8cd8:	ldr	x8, [x19, #328]
    8cdc:	cbz	x8, 8cf0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6e0>
    8ce0:	ldr	w8, [x19, #288]
    8ce4:	ldr	w9, [x19, #280]
    8ce8:	cmp	w8, w9
    8cec:	b.cc	8818 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x208>  // b.lo, b.ul, b.last
    8cf0:	mov	x0, x28
    8cf4:	bl	8160 <lzma_vli_encode@@XZ_5.0+0x25c>
    8cf8:	tbnz	w0, #0, 8818 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x208>
    8cfc:	ldr	w8, [x19, #308]
    8d00:	cmp	w8, #0x0
    8d04:	cset	w8, ne  // ne = any
    8d08:	orr	w8, w26, w8
    8d0c:	tbnz	w8, #0, 8818 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x208>
    8d10:	ldr	w8, [x19, #304]
    8d14:	cbnz	w8, 8cb8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6a8>
    8d18:	ldr	x0, [sp, #104]
    8d1c:	mov	x1, x27
    8d20:	bl	3320 <pthread_cond_wait@plt>
    8d24:	b	8ca8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x698>
    8d28:	ldr	w8, [x19, #324]
    8d2c:	cbz	w8, 8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8d30:	mov	x20, xzr
    8d34:	mov	w21, #0x160                 	// #352
    8d38:	mov	w23, #0x3                   	// #3
    8d3c:	ldr	x8, [x19, #312]
    8d40:	add	x0, x8, x21
    8d44:	bl	34b0 <pthread_mutex_lock@plt>
    8d48:	ldr	x8, [x19, #312]
    8d4c:	add	x8, x8, x21
    8d50:	sub	x9, x8, #0x160
    8d54:	add	x0, x8, #0x30
    8d58:	str	w23, [x9]
    8d5c:	bl	3190 <pthread_cond_signal@plt>
    8d60:	ldr	x8, [x19, #312]
    8d64:	add	x0, x8, x21
    8d68:	bl	34d0 <pthread_mutex_unlock@plt>
    8d6c:	ldr	w8, [x19, #324]
    8d70:	add	x20, x20, #0x1
    8d74:	add	x21, x21, #0x1d0
    8d78:	cmp	x20, x8
    8d7c:	b.cc	8d3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x72c>  // b.lo, b.ul, b.last
    8d80:	b	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8d84:	mov	w22, #0x20                  	// #32
    8d88:	b	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8d8c:	ldr	w8, [x19, #324]
    8d90:	cbz	w8, 8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8d94:	mov	x20, xzr
    8d98:	mov	w21, #0x160                 	// #352
    8d9c:	mov	w23, #0x3                   	// #3
    8da0:	ldr	x8, [x19, #312]
    8da4:	add	x0, x8, x21
    8da8:	bl	34b0 <pthread_mutex_lock@plt>
    8dac:	ldr	x8, [x19, #312]
    8db0:	add	x8, x8, x21
    8db4:	sub	x9, x8, #0x160
    8db8:	add	x0, x8, #0x30
    8dbc:	str	w23, [x9]
    8dc0:	bl	3190 <pthread_cond_signal@plt>
    8dc4:	ldr	x8, [x19, #312]
    8dc8:	add	x0, x8, x21
    8dcc:	bl	34d0 <pthread_mutex_unlock@plt>
    8dd0:	ldr	w8, [x19, #324]
    8dd4:	add	x20, x20, #0x1
    8dd8:	add	x21, x21, #0x1d0
    8ddc:	cmp	x20, x8
    8de0:	b.cc	8da0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x790>  // b.lo, b.ul, b.last
    8de4:	b	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8de8:	mov	w22, #0x1                   	// #1
    8dec:	b	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8df0:	mov	w22, w23
    8df4:	b	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8df8:	ldr	x23, [sp, #112]
    8dfc:	ldr	x2, [x19, #96]
    8e00:	add	x0, x19, #0x68
    8e04:	mov	x1, x23
    8e08:	bl	70b0 <lzma_filter_flags_encode@@XZ_5.0+0xc8>
    8e0c:	mov	w22, w0
    8e10:	cbnz	w0, 8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8e14:	ldr	x0, [x19, #96]
    8e18:	mov	w8, #0x2                   	// #2
    8e1c:	str	w8, [x19]
    8e20:	bl	3490 <lzma_index_size@plt>
    8e24:	ldr	x8, [x19, #352]
    8e28:	add	x8, x0, x8
    8e2c:	add	x8, x8, #0xc
    8e30:	str	x8, [x19, #352]
    8e34:	ldr	x8, [x19, #128]
    8e38:	ldr	x0, [x19, #104]
    8e3c:	mov	x1, x23
    8e40:	mov	x2, xzr
    8e44:	mov	x3, xzr
    8e48:	mov	x4, xzr
    8e4c:	mov	x5, x26
    8e50:	mov	x6, x21
    8e54:	mov	x7, x20
    8e58:	str	wzr, [sp]
    8e5c:	blr	x8
    8e60:	mov	w22, w0
    8e64:	cmp	w0, #0x1
    8e68:	b.ne	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>  // b.any
    8e6c:	ldr	x0, [x19, #96]
    8e70:	bl	3490 <lzma_index_size@plt>
    8e74:	add	x8, x19, #0xb0
    8e78:	str	x0, [x19, #184]
    8e7c:	add	x1, x19, #0xe8
    8e80:	mov	x0, x8
    8e84:	bl	31a0 <lzma_stream_footer_encode@plt>
    8e88:	cbz	w0, 8e94 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x884>
    8e8c:	mov	w22, #0xb                   	// #11
    8e90:	b	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8b4>
    8e94:	mov	w8, #0x3                   	// #3
    8e98:	str	w8, [x19]
    8e9c:	add	x0, x19, #0xe8
    8ea0:	add	x1, x19, #0xf8
    8ea4:	mov	w2, #0xc                   	// #12
    8ea8:	mov	x3, x26
    8eac:	mov	x4, x21
    8eb0:	mov	x5, x20
    8eb4:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    8eb8:	ldr	x8, [x19, #248]
    8ebc:	cmp	x8, #0xb
    8ec0:	cset	w22, hi  // hi = pmore
    8ec4:	mov	w0, w22
    8ec8:	add	sp, sp, #0x1b0
    8ecc:	ldp	x20, x19, [sp, #80]
    8ed0:	ldp	x22, x21, [sp, #64]
    8ed4:	ldp	x24, x23, [sp, #48]
    8ed8:	ldp	x26, x25, [sp, #32]
    8edc:	ldp	x28, x27, [sp, #16]
    8ee0:	ldp	x29, x30, [sp], #96
    8ee4:	ret
    8ee8:	stp	x29, x30, [sp, #-48]!
    8eec:	str	x21, [sp, #16]
    8ef0:	stp	x20, x19, [sp, #32]
    8ef4:	mov	x29, sp
    8ef8:	mov	x19, x1
    8efc:	mov	x20, x0
    8f00:	bl	9030 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa20>
    8f04:	add	x0, x20, #0x100
    8f08:	mov	x1, x19
    8f0c:	bl	80e0 <lzma_vli_encode@@XZ_5.0+0x1dc>
    8f10:	ldr	x8, [x20, #16]
    8f14:	cmn	x8, #0x1
    8f18:	b.eq	8f38 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x928>  // b.none
    8f1c:	add	x21, x20, #0x20
    8f20:	ldur	x0, [x21, #-8]
    8f24:	mov	x1, x19
    8f28:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    8f2c:	ldr	x8, [x21], #16
    8f30:	cmn	x8, #0x1
    8f34:	b.ne	8f20 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x910>  // b.any
    8f38:	add	x0, x20, #0x68
    8f3c:	mov	x1, x19
    8f40:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    8f44:	ldr	x0, [x20, #96]
    8f48:	mov	x1, x19
    8f4c:	bl	3360 <lzma_index_end@plt>
    8f50:	add	x0, x20, #0x198
    8f54:	bl	34a0 <pthread_cond_destroy@plt>
    8f58:	add	x0, x20, #0x168
    8f5c:	bl	3390 <pthread_mutex_destroy@plt>
    8f60:	mov	x0, x20
    8f64:	mov	x1, x19
    8f68:	ldp	x20, x19, [sp, #32]
    8f6c:	ldr	x21, [sp, #16]
    8f70:	ldp	x29, x30, [sp], #48
    8f74:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    8f78:	stp	x29, x30, [sp, #-64]!
    8f7c:	stp	x22, x21, [sp, #32]
    8f80:	add	x21, x0, #0x168
    8f84:	mov	x22, x0
    8f88:	mov	x0, x21
    8f8c:	stp	x24, x23, [sp, #16]
    8f90:	stp	x20, x19, [sp, #48]
    8f94:	mov	x29, sp
    8f98:	mov	x19, x2
    8f9c:	mov	x20, x1
    8fa0:	bl	34b0 <pthread_mutex_lock@plt>
    8fa4:	ldr	x8, [x22, #344]
    8fa8:	str	x8, [x20]
    8fac:	ldr	x8, [x22, #352]
    8fb0:	str	x8, [x19]
    8fb4:	ldr	w8, [x22, #324]
    8fb8:	cbz	w8, 9018 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa08>
    8fbc:	mov	x23, xzr
    8fc0:	mov	w24, #0x160                 	// #352
    8fc4:	ldr	x8, [x22, #312]
    8fc8:	add	x0, x8, x24
    8fcc:	bl	34b0 <pthread_mutex_lock@plt>
    8fd0:	ldr	x8, [x22, #312]
    8fd4:	ldr	x9, [x20]
    8fd8:	add	x0, x8, x24
    8fdc:	sub	x8, x0, #0x130
    8fe0:	ldr	x8, [x8]
    8fe4:	sub	x10, x0, #0x128
    8fe8:	add	x8, x9, x8
    8fec:	str	x8, [x20]
    8ff0:	ldr	x8, [x10]
    8ff4:	ldr	x9, [x19]
    8ff8:	add	x8, x9, x8
    8ffc:	str	x8, [x19]
    9000:	bl	34d0 <pthread_mutex_unlock@plt>
    9004:	ldr	w8, [x22, #324]
    9008:	add	x23, x23, #0x1
    900c:	add	x24, x24, #0x1d0
    9010:	cmp	x23, x8
    9014:	b.cc	8fc4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9b4>  // b.lo, b.ul, b.last
    9018:	mov	x0, x21
    901c:	ldp	x20, x19, [sp, #48]
    9020:	ldp	x22, x21, [sp, #32]
    9024:	ldp	x24, x23, [sp, #16]
    9028:	ldp	x29, x30, [sp], #64
    902c:	b	34d0 <pthread_mutex_unlock@plt>
    9030:	stp	x29, x30, [sp, #-64]!
    9034:	stp	x22, x21, [sp, #32]
    9038:	stp	x20, x19, [sp, #48]
    903c:	ldr	w8, [x0, #324]
    9040:	mov	x20, x0
    9044:	mov	x19, x1
    9048:	str	x23, [sp, #16]
    904c:	mov	x29, sp
    9050:	cbz	w8, 90dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xacc>
    9054:	mov	x21, xzr
    9058:	mov	w22, #0x160                 	// #352
    905c:	mov	w23, #0x4                   	// #4
    9060:	ldr	x8, [x20, #312]
    9064:	add	x0, x8, x22
    9068:	bl	34b0 <pthread_mutex_lock@plt>
    906c:	ldr	x8, [x20, #312]
    9070:	add	x8, x8, x22
    9074:	sub	x9, x8, #0x160
    9078:	add	x0, x8, #0x30
    907c:	str	w23, [x9]
    9080:	bl	3190 <pthread_cond_signal@plt>
    9084:	ldr	x8, [x20, #312]
    9088:	add	x0, x8, x22
    908c:	bl	34d0 <pthread_mutex_unlock@plt>
    9090:	ldr	w8, [x20, #324]
    9094:	add	x21, x21, #0x1
    9098:	add	x22, x22, #0x1d0
    909c:	cmp	x21, x8
    90a0:	b.cc	9060 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa50>  // b.lo, b.ul, b.last
    90a4:	add	x21, x20, #0x138
    90a8:	cbz	w8, 90e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xad0>
    90ac:	mov	x22, xzr
    90b0:	mov	w23, #0x1c8                 	// #456
    90b4:	ldr	x8, [x20, #312]
    90b8:	mov	x1, xzr
    90bc:	ldr	x0, [x8, x23]
    90c0:	bl	3270 <pthread_join@plt>
    90c4:	ldr	w8, [x20, #324]
    90c8:	add	x22, x22, #0x1
    90cc:	add	x23, x23, #0x1d0
    90d0:	cmp	x22, x8
    90d4:	b.cc	90b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xaa4>  // b.lo, b.ul, b.last
    90d8:	b	90e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xad0>
    90dc:	add	x21, x20, #0x138
    90e0:	ldr	x0, [x21]
    90e4:	mov	x1, x19
    90e8:	ldp	x20, x19, [sp, #48]
    90ec:	ldp	x22, x21, [sp, #32]
    90f0:	ldr	x23, [sp, #16]
    90f4:	ldp	x29, x30, [sp], #64
    90f8:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    90fc:	stp	x29, x30, [sp, #-64]!
    9100:	stp	x22, x21, [sp, #32]
    9104:	stp	x20, x19, [sp, #48]
    9108:	ldr	w8, [x0, #324]
    910c:	mov	x19, x0
    9110:	mov	w20, w1
    9114:	str	x23, [sp, #16]
    9118:	mov	x29, sp
    911c:	cbz	w8, 9180 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb70>
    9120:	mov	x21, xzr
    9124:	mov	w22, #0x160                 	// #352
    9128:	mov	w23, #0x3                   	// #3
    912c:	ldr	x8, [x19, #312]
    9130:	add	x0, x8, x22
    9134:	bl	34b0 <pthread_mutex_lock@plt>
    9138:	ldr	x8, [x19, #312]
    913c:	add	x8, x8, x22
    9140:	sub	x9, x8, #0x160
    9144:	add	x0, x8, #0x30
    9148:	str	w23, [x9]
    914c:	bl	3190 <pthread_cond_signal@plt>
    9150:	ldr	x8, [x19, #312]
    9154:	add	x0, x8, x22
    9158:	bl	34d0 <pthread_mutex_unlock@plt>
    915c:	ldr	w8, [x19, #324]
    9160:	add	x21, x21, #0x1
    9164:	add	x22, x22, #0x1d0
    9168:	cmp	x21, x8
    916c:	b.cc	912c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb1c>  // b.lo, b.ul, b.last
    9170:	cmp	w8, #0x0
    9174:	cset	w8, eq  // eq = none
    9178:	tbz	w8, #0, 9188 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb78>
    917c:	b	91ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbdc>
    9180:	mov	w8, #0x1                   	// #1
    9184:	tbnz	w8, #0, 91ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbdc>
    9188:	tbz	w20, #0, 91ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbdc>
    918c:	mov	x20, xzr
    9190:	mov	w21, #0x1d0                 	// #464
    9194:	b	91b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xba4>
    9198:	madd	x8, x20, x21, x8
    919c:	add	x0, x8, #0x160
    91a0:	bl	34d0 <pthread_mutex_unlock@plt>
    91a4:	ldr	w8, [x19, #324]
    91a8:	add	x20, x20, #0x1
    91ac:	cmp	x20, x8
    91b0:	b.cs	91ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbdc>  // b.hs, b.nlast
    91b4:	ldr	x8, [x19, #312]
    91b8:	mul	x22, x20, x21
    91bc:	add	x8, x8, x22
    91c0:	add	x0, x8, #0x160
    91c4:	bl	34b0 <pthread_mutex_lock@plt>
    91c8:	ldr	x8, [x19, #312]
    91cc:	ldr	w9, [x8, x22]
    91d0:	cbz	w9, 9198 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb88>
    91d4:	mul	x22, x20, x21
    91d8:	add	x8, x8, x22
    91dc:	add	x1, x8, #0x160
    91e0:	add	x0, x8, #0x190
    91e4:	bl	3320 <pthread_cond_wait@plt>
    91e8:	b	91c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbb8>
    91ec:	ldp	x20, x19, [sp, #48]
    91f0:	ldp	x22, x21, [sp, #32]
    91f4:	ldr	x23, [sp, #16]
    91f8:	ldp	x29, x30, [sp], #64
    91fc:	ret
    9200:	sub	sp, sp, #0x80
    9204:	stp	x28, x27, [sp, #48]
    9208:	stp	x26, x25, [sp, #64]
    920c:	stp	x24, x23, [sp, #80]
    9210:	stp	x22, x21, [sp, #96]
    9214:	stp	x20, x19, [sp, #112]
    9218:	mov	x19, x0
    921c:	add	x22, x0, #0x160
    9220:	add	x20, x0, #0x190
    9224:	add	x23, x0, #0x88
    9228:	add	x26, x0, #0xb0
    922c:	add	x25, x0, #0x40
    9230:	add	x27, x0, #0x30
    9234:	stp	x29, x30, [sp, #32]
    9238:	add	x29, sp, #0x20
    923c:	str	x25, [sp, #16]
    9240:	b	92ac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc9c>
    9244:	mov	x0, x22
    9248:	bl	34d0 <pthread_mutex_unlock@plt>
    924c:	ldr	x8, [x19, #32]
    9250:	cmp	w21, #0x2
    9254:	cset	w21, eq  // eq = none
    9258:	add	x0, x8, #0x168
    925c:	bl	34b0 <pthread_mutex_lock@plt>
    9260:	ldr	x8, [x19, #24]
    9264:	strb	w21, [x8, #32]
    9268:	ldr	x9, [x19, #32]
    926c:	ldr	x10, [x8, #24]
    9270:	ldp	x11, x12, [x9, #344]
    9274:	add	x0, x9, #0x198
    9278:	add	x10, x11, x10
    927c:	str	x10, [x9, #344]
    9280:	ldr	x8, [x8, #8]
    9284:	add	x8, x12, x8
    9288:	str	x8, [x9, #352]
    928c:	stp	xzr, xzr, [x27]
    9290:	ldr	x8, [x9, #328]
    9294:	str	x8, [x19, #344]
    9298:	str	x19, [x9, #328]
    929c:	bl	3190 <pthread_cond_signal@plt>
    92a0:	ldr	x8, [x19, #32]
    92a4:	add	x0, x8, #0x168
    92a8:	bl	34d0 <pthread_mutex_unlock@plt>
    92ac:	mov	x0, x22
    92b0:	bl	34b0 <pthread_mutex_lock@plt>
    92b4:	ldr	w21, [x19]
    92b8:	cmp	w21, #0x3
    92bc:	b.ne	92d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcc0>  // b.any
    92c0:	mov	x0, x20
    92c4:	str	wzr, [x19]
    92c8:	bl	3190 <pthread_cond_signal@plt>
    92cc:	ldr	w21, [x19]
    92d0:	cbnz	w21, 92e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcd4>
    92d4:	mov	x0, x20
    92d8:	mov	x1, x22
    92dc:	bl	3320 <pthread_cond_wait@plt>
    92e0:	b	92b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xca4>
    92e4:	mov	x0, x22
    92e8:	bl	34d0 <pthread_mutex_unlock@plt>
    92ec:	cmp	w21, #0x3
    92f0:	b.cs	9588 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf78>  // b.hs, b.nlast
    92f4:	ldr	x8, [x19, #32]
    92f8:	movi	v0.2d, #0x0
    92fc:	mov	x0, x23
    9300:	ldr	w9, [x8, #192]
    9304:	ldr	x10, [x8, #272]
    9308:	ldr	x11, [x8, #8]
    930c:	add	x8, x8, #0x10
    9310:	str	xzr, [x19, #136]
    9314:	stp	w9, wzr, [x19, #144]
    9318:	stp	x11, x8, [x19, #160]
    931c:	str	x10, [x19, #152]
    9320:	stp	q0, q0, [x26, #32]
    9324:	stp	q0, q0, [x26, #64]
    9328:	stp	q0, q0, [x26, #96]
    932c:	stp	q0, q0, [x26, #128]
    9330:	str	xzr, [x26, #160]
    9334:	stp	q0, q0, [x26]
    9338:	bl	3100 <lzma_block_header_size@plt>
    933c:	cbnz	w0, 9354 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd44>
    9340:	ldr	x1, [x19, #40]
    9344:	mov	x0, x25
    9348:	mov	x2, x23
    934c:	bl	62a0 <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    9350:	cbz	w0, 9390 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd80>
    9354:	ldr	x8, [x19, #32]
    9358:	mov	w24, w0
    935c:	add	x0, x8, #0x168
    9360:	bl	34b0 <pthread_mutex_lock@plt>
    9364:	ldr	x8, [x19, #32]
    9368:	ldr	w9, [x8, #308]
    936c:	cbnz	w9, 9374 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd64>
    9370:	str	w24, [x8, #308]
    9374:	add	x0, x8, #0x198
    9378:	bl	3190 <pthread_cond_signal@plt>
    937c:	ldr	x8, [x19, #32]
    9380:	add	x0, x8, #0x168
    9384:	bl	34d0 <pthread_mutex_unlock@plt>
    9388:	mov	w21, #0x3                   	// #3
    938c:	b	9590 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf80>
    9390:	stur	xzr, [x29, #-8]
    9394:	ldr	w8, [x19, #140]
    9398:	ldr	x9, [x19, #24]
    939c:	mov	x28, xzr
    93a0:	str	x8, [x9, #8]
    93a4:	ldr	x8, [x19, #32]
    93a8:	ldr	x24, [x8, #272]
    93ac:	mov	x0, x22
    93b0:	bl	34b0 <pthread_mutex_lock@plt>
    93b4:	ldur	x8, [x29, #-8]
    93b8:	str	x8, [x19, #48]
    93bc:	ldp	x8, x9, [x19, #16]
    93c0:	ldr	x9, [x9, #8]
    93c4:	cmp	x28, x8
    93c8:	str	x9, [x19, #56]
    93cc:	b.ne	93f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xde4>  // b.any
    93d0:	ldr	w21, [x19]
    93d4:	cmp	w21, #0x1
    93d8:	b.ne	93fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdec>  // b.any
    93dc:	mov	x0, x20
    93e0:	mov	x1, x22
    93e4:	bl	3320 <pthread_cond_wait@plt>
    93e8:	ldr	x8, [x19, #16]
    93ec:	cmp	x28, x8
    93f0:	b.eq	93d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdc0>  // b.none
    93f4:	ldr	w21, [x19]
    93f8:	mov	x28, x8
    93fc:	mov	x0, x22
    9400:	bl	34d0 <pthread_mutex_unlock@plt>
    9404:	cmp	w21, #0x2
    9408:	b.hi	9584 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf74>  // b.pmore
    940c:	ldr	x6, [x19, #24]
    9410:	ldur	x9, [x29, #-8]
    9414:	ldr	x10, [x19, #88]
    9418:	ldr	x0, [x19, #64]
    941c:	ldr	x1, [x19, #40]
    9420:	ldr	x2, [x19, #8]
    9424:	ldr	x5, [x6], #8
    9428:	mov	w8, #0x3                   	// #3
    942c:	sub	x11, x28, x9
    9430:	csel	w8, w8, wzr, eq  // eq = none
    9434:	add	x9, x9, #0x4, lsl #12
    9438:	cmp	x11, #0x4, lsl #12
    943c:	csel	w8, wzr, w8, hi  // hi = pmore
    9440:	csel	x4, x9, x28, hi  // hi = pmore
    9444:	sub	x3, x29, #0x8
    9448:	mov	x7, x24
    944c:	str	w8, [sp]
    9450:	blr	x10
    9454:	cbnz	w0, 948c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe7c>
    9458:	ldr	x8, [x19, #24]
    945c:	ldr	x8, [x8, #8]
    9460:	cmp	x8, x24
    9464:	b.cc	93ac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd9c>  // b.lo, b.ul, b.last
    9468:	mov	x0, x22
    946c:	bl	34b0 <pthread_mutex_lock@plt>
    9470:	ldr	w21, [x19]
    9474:	cmp	w21, #0x1
    9478:	b.ne	94d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xec0>  // b.any
    947c:	mov	x0, x20
    9480:	mov	x1, x22
    9484:	bl	3320 <pthread_cond_wait@plt>
    9488:	b	9470 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe60>
    948c:	mov	w25, w0
    9490:	cmp	w0, #0x1
    9494:	b.ne	9530 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf20>  // b.any
    9498:	ldr	x8, [x19, #24]
    949c:	mov	x0, x23
    94a0:	ldr	x1, [x8]
    94a4:	bl	34c0 <lzma_block_header_encode@plt>
    94a8:	cbz	w0, 9568 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf58>
    94ac:	ldr	x8, [x19, #32]
    94b0:	mov	w24, w0
    94b4:	add	x0, x8, #0x168
    94b8:	bl	34b0 <pthread_mutex_lock@plt>
    94bc:	ldr	x8, [x19, #32]
    94c0:	ldr	w9, [x8, #308]
    94c4:	cbnz	w9, 954c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf3c>
    94c8:	str	w24, [x8, #308]
    94cc:	b	954c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf3c>
    94d0:	ldr	x25, [x19, #16]
    94d4:	mov	x0, x22
    94d8:	bl	34d0 <pthread_mutex_unlock@plt>
    94dc:	cmp	w21, #0x2
    94e0:	b.hi	9584 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf74>  // b.pmore
    94e4:	ldr	x8, [x19, #24]
    94e8:	mov	x0, x23
    94ec:	mov	x2, x25
    94f0:	mov	x5, x24
    94f4:	mov	x4, x8
    94f8:	str	xzr, [x4, #8]!
    94fc:	ldr	x1, [x19, #8]
    9500:	ldr	x3, [x8]
    9504:	bl	3440 <lzma_block_uncomp_encode@plt>
    9508:	cbz	w0, 9568 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf58>
    950c:	ldr	x8, [x19, #32]
    9510:	add	x0, x8, #0x168
    9514:	bl	34b0 <pthread_mutex_lock@plt>
    9518:	ldr	x8, [x19, #32]
    951c:	ldr	w9, [x8, #308]
    9520:	cbnz	w9, 954c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf3c>
    9524:	mov	w9, #0xb                   	// #11
    9528:	str	w9, [x8, #308]
    952c:	b	954c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf3c>
    9530:	ldr	x8, [x19, #32]
    9534:	add	x0, x8, #0x168
    9538:	bl	34b0 <pthread_mutex_lock@plt>
    953c:	ldr	x8, [x19, #32]
    9540:	ldr	w9, [x8, #308]
    9544:	cbnz	w9, 954c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf3c>
    9548:	str	w25, [x8, #308]
    954c:	add	x0, x8, #0x198
    9550:	bl	3190 <pthread_cond_signal@plt>
    9554:	ldr	x8, [x19, #32]
    9558:	add	x0, x8, #0x168
    955c:	bl	34d0 <pthread_mutex_unlock@plt>
    9560:	mov	w21, #0x3                   	// #3
    9564:	b	9584 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf74>
    9568:	mov	x0, x23
    956c:	bl	3130 <lzma_block_unpadded_size@plt>
    9570:	ldr	x8, [x19, #24]
    9574:	mov	w21, #0x2                   	// #2
    9578:	str	x0, [x8, #16]
    957c:	ldr	x9, [x19, #160]
    9580:	str	x9, [x8, #24]
    9584:	ldr	x25, [sp, #16]
    9588:	cmp	w21, #0x4
    958c:	b.eq	95b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfa4>  // b.none
    9590:	mov	x0, x22
    9594:	bl	34b0 <pthread_mutex_lock@plt>
    9598:	ldr	w8, [x19]
    959c:	cmp	w8, #0x4
    95a0:	b.eq	9244 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc34>  // b.none
    95a4:	mov	x0, x20
    95a8:	str	wzr, [x19]
    95ac:	bl	3190 <pthread_cond_signal@plt>
    95b0:	b	9244 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc34>
    95b4:	mov	x0, x22
    95b8:	bl	3390 <pthread_mutex_destroy@plt>
    95bc:	mov	x0, x20
    95c0:	bl	34a0 <pthread_cond_destroy@plt>
    95c4:	ldr	x1, [x19, #40]
    95c8:	mov	x0, x25
    95cc:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    95d0:	ldr	x0, [x19, #8]
    95d4:	ldr	x1, [x19, #40]
    95d8:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    95dc:	ldp	x20, x19, [sp, #112]
    95e0:	ldp	x22, x21, [sp, #96]
    95e4:	ldp	x24, x23, [sp, #80]
    95e8:	ldp	x26, x25, [sp, #64]
    95ec:	ldp	x28, x27, [sp, #48]
    95f0:	ldp	x29, x30, [sp, #32]
    95f4:	mov	x0, xzr
    95f8:	add	sp, sp, #0x80
    95fc:	ret
    9600:	stp	x29, x30, [sp, #-64]!
    9604:	stp	x22, x21, [sp, #32]
    9608:	stp	x20, x19, [sp, #48]
    960c:	ldr	x8, [x0, #16]
    9610:	str	x23, [sp, #16]
    9614:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9618:	add	x23, x23, #0x600
    961c:	mov	w20, w3
    9620:	mov	x19, x2
    9624:	mov	x21, x0
    9628:	cmp	x8, x23
    962c:	mov	x22, x1
    9630:	mov	x29, sp
    9634:	b.eq	9644 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1034>  // b.none
    9638:	mov	x0, x21
    963c:	mov	x1, x22
    9640:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    9644:	ldr	x0, [x21]
    9648:	str	x23, [x21, #16]
    964c:	cbnz	x0, 969c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x108c>
    9650:	mov	w0, #0xe0                  	// #224
    9654:	mov	x1, x22
    9658:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    965c:	cbz	x0, 96e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10d4>
    9660:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9664:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9668:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    966c:	add	x8, x8, #0x6ec
    9670:	add	x9, x9, #0x96c
    9674:	add	x10, x10, #0x998
    9678:	mov	x11, #0xffffffffffffffff    	// #-1
    967c:	movi	v0.2d, #0x0
    9680:	str	x0, [x21]
    9684:	stp	x8, x9, [x21, #24]
    9688:	str	x10, [x21, #56]
    968c:	stp	xzr, x11, [x0]
    9690:	stp	q0, q0, [x0, #16]
    9694:	str	q0, [x0, #48]
    9698:	str	xzr, [x0, #64]
    969c:	and	w9, w20, #0x1
    96a0:	cmp	x19, #0x0
    96a4:	mov	w8, wzr
    96a8:	mov	w10, #0x8000                	// #32768
    96ac:	strb	w9, [x0, #76]
    96b0:	csinc	x9, x19, xzr, ne  // ne = any
    96b4:	str	wzr, [x0, #72]
    96b8:	str	wzr, [x0, #112]
    96bc:	str	xzr, [x0, #120]
    96c0:	str	wzr, [x0, #128]
    96c4:	stp	xzr, xzr, [x0, #80]
    96c8:	stp	x9, x10, [x0, #96]
    96cc:	ldp	x20, x19, [sp, #48]
    96d0:	ldp	x22, x21, [sp, #32]
    96d4:	ldr	x23, [sp, #16]
    96d8:	mov	w0, w8
    96dc:	ldp	x29, x30, [sp], #64
    96e0:	ret
    96e4:	mov	w8, #0x5                   	// #5
    96e8:	b	96cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10bc>
    96ec:	sub	sp, sp, #0xb0
    96f0:	ldr	x8, [x6]
    96f4:	stp	x29, x30, [sp, #80]
    96f8:	stp	x28, x27, [sp, #96]
    96fc:	stp	x26, x25, [sp, #112]
    9700:	cmp	x8, x7
    9704:	stp	x24, x23, [sp, #128]
    9708:	stp	x22, x21, [sp, #144]
    970c:	stp	x20, x19, [sp, #160]
    9710:	add	x29, sp, #0x50
    9714:	b.cs	98fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12ec>  // b.hs, b.nlast
    9718:	ldr	w8, [x29, #96]
    971c:	ldr	w9, [x0, #72]
    9720:	adrp	x28, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    9724:	mov	x19, x7
    9728:	str	w8, [sp, #20]
    972c:	add	x8, sp, #0x20
    9730:	mov	x20, x6
    9734:	mov	x22, x4
    9738:	mov	x23, x3
    973c:	mov	x24, x2
    9740:	mov	x25, x1
    9744:	mov	x26, x0
    9748:	add	x27, x0, #0x70
    974c:	add	x28, x28, #0x918
    9750:	add	x21, x8, #0x18
    9754:	str	x5, [sp, #24]
    9758:	b	9774 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1164>
    975c:	mov	w9, #0x1                   	// #1
    9760:	add	x8, x8, #0x1
    9764:	str	x8, [x23]
    9768:	ldr	x8, [x20]
    976c:	cmp	x8, x19
    9770:	b.cs	98fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12ec>  // b.hs, b.nlast
    9774:	cmp	w9, #0x4
    9778:	b.eq	9920 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1310>  // b.none
    977c:	ldr	x8, [x23]
    9780:	cmp	x8, x22
    9784:	b.cs	98fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12ec>  // b.hs, b.nlast
    9788:	cmp	w9, #0x3
    978c:	b.hi	9954 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1344>  // b.pmore
    9790:	mov	w9, w9
    9794:	adr	x10, 97a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1194>
    9798:	ldrb	w11, [x28, x9]
    979c:	add	x10, x10, x11, lsl #2
    97a0:	br	x10
    97a4:	ldrb	w1, [x24, x8]
    97a8:	mov	x0, x27
    97ac:	bl	17500 <lzma_mode_is_supported@@XZ_5.0+0x6318>
    97b0:	tbnz	w0, #0, 995c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x134c>
    97b4:	mov	w9, #0x1                   	// #1
    97b8:	str	w9, [x26, #72]
    97bc:	ldr	x8, [x23]
    97c0:	b	9760 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1150>
    97c4:	ldr	x9, [x26, #80]
    97c8:	ldrb	w10, [x24, x8]
    97cc:	ldr	w11, [x26, #112]
    97d0:	lsl	x12, x9, #3
    97d4:	add	x13, x9, #0x1
    97d8:	lsl	x9, x10, x12
    97dc:	cmp	x13, #0x4
    97e0:	orr	w9, w11, w9
    97e4:	str	w9, [x26, #112]
    97e8:	str	x13, [x26, #80]
    97ec:	b.ne	975c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x114c>  // b.any
    97f0:	cmn	w9, #0x1
    97f4:	b.eq	9824 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1214>  // b.none
    97f8:	ldrb	w10, [x26, #76]
    97fc:	cbz	w10, 9824 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1214>
    9800:	sub	w10, w9, #0x1
    9804:	orr	w10, w10, w10, lsr #2
    9808:	orr	w10, w10, w10, lsr #3
    980c:	orr	w10, w10, w10, lsr #4
    9810:	orr	w10, w10, w10, lsr #8
    9814:	orr	w10, w10, w10, lsr #16
    9818:	add	w10, w10, #0x1
    981c:	cmp	w10, w9
    9820:	b.ne	995c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x134c>  // b.any
    9824:	mov	w9, #0x2                   	// #2
    9828:	str	xzr, [x26, #80]
    982c:	str	w9, [x26, #72]
    9830:	b	9760 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1150>
    9834:	ldp	x9, x11, [x26, #80]
    9838:	ldrb	w10, [x24, x8]
    983c:	add	x12, x8, #0x1
    9840:	lsl	x8, x9, #3
    9844:	add	x9, x9, #0x1
    9848:	lsl	x8, x10, x8
    984c:	cmp	x9, #0x8
    9850:	orr	x8, x8, x11
    9854:	stp	x9, x8, [x26, #80]
    9858:	str	x12, [x23]
    985c:	b.cs	9870 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1260>  // b.hs, b.nlast
    9860:	mov	w9, #0x2                   	// #2
    9864:	b	9768 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1158>
    9868:	ldr	x8, [x26, #104]
    986c:	b	98ac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x129c>
    9870:	mov	x9, #0xffffffc000000000    	// #-274877906944
    9874:	add	x8, x8, x9
    9878:	mov	x9, #0xfffffffffffffffe    	// #-2
    987c:	movk	x9, #0xffbf, lsl #32
    9880:	cmp	x8, x9
    9884:	b.hi	9890 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1280>  // b.pmore
    9888:	ldrb	w8, [x26, #76]
    988c:	cbnz	w8, 995c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x134c>
    9890:	mov	x0, x27
    9894:	bl	1758c <lzma_mode_is_supported@@XZ_5.0+0x63a4>
    9898:	add	x8, x0, #0x8, lsl #12
    989c:	mov	w9, #0x3                   	// #3
    98a0:	str	xzr, [x26, #80]
    98a4:	str	x8, [x26, #104]
    98a8:	str	w9, [x26, #72]
    98ac:	ldr	x9, [x26, #96]
    98b0:	cmp	x8, x9
    98b4:	b.hi	9964 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1354>  // b.pmore
    98b8:	str	xzr, [sp, #32]
    98bc:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    98c0:	ldr	x8, [x8, #3944]
    98c4:	add	x2, sp, #0x20
    98c8:	mov	x0, x26
    98cc:	mov	x1, x25
    98d0:	stp	x8, x27, [sp, #40]
    98d4:	stp	xzr, xzr, [x21]
    98d8:	str	xzr, [x21, #16]
    98dc:	bl	3784 <lzma_version_string@@XZ_5.0+0x134>
    98e0:	cbnz	w0, 9900 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12f0>
    98e4:	ldr	x0, [x26]
    98e8:	ldr	x1, [x26, #88]
    98ec:	bl	10030 <lzma_mf_is_supported@@XZ_5.0+0x2480>
    98f0:	mov	w9, #0x4                   	// #4
    98f4:	str	w9, [x26, #72]
    98f8:	b	9768 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1158>
    98fc:	mov	w0, wzr
    9900:	ldp	x20, x19, [sp, #160]
    9904:	ldp	x22, x21, [sp, #144]
    9908:	ldp	x24, x23, [sp, #128]
    990c:	ldp	x26, x25, [sp, #112]
    9910:	ldp	x28, x27, [sp, #96]
    9914:	ldp	x29, x30, [sp, #80]
    9918:	add	sp, sp, #0xb0
    991c:	ret
    9920:	ldr	x8, [x26, #24]
    9924:	ldr	x0, [x26]
    9928:	ldr	w9, [sp, #20]
    992c:	ldr	x5, [sp, #24]
    9930:	mov	x1, x25
    9934:	mov	x2, x24
    9938:	mov	x3, x23
    993c:	mov	x4, x22
    9940:	mov	x6, x20
    9944:	mov	x7, x19
    9948:	str	w9, [sp]
    994c:	blr	x8
    9950:	b	9900 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12f0>
    9954:	mov	w0, #0xb                   	// #11
    9958:	b	9900 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12f0>
    995c:	mov	w0, #0x7                   	// #7
    9960:	b	9900 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12f0>
    9964:	mov	w0, #0x6                   	// #6
    9968:	b	9900 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12f0>
    996c:	stp	x29, x30, [sp, #-32]!
    9970:	stp	x20, x19, [sp, #16]
    9974:	mov	x29, sp
    9978:	mov	x19, x1
    997c:	mov	x20, x0
    9980:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    9984:	mov	x0, x20
    9988:	mov	x1, x19
    998c:	ldp	x20, x19, [sp, #16]
    9990:	ldp	x29, x30, [sp], #32
    9994:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    9998:	ldr	x9, [x0, #104]
    999c:	str	x9, [x1]
    99a0:	ldr	x9, [x0, #96]
    99a4:	str	x9, [x2]
    99a8:	cbz	x3, 99c4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13b4>
    99ac:	ldr	x9, [x0, #104]
    99b0:	mov	x8, x0
    99b4:	cmp	x9, x3
    99b8:	b.ls	99cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13bc>  // b.plast
    99bc:	mov	w0, #0x6                   	// #6
    99c0:	ret
    99c4:	mov	w0, wzr
    99c8:	ret
    99cc:	mov	w0, wzr
    99d0:	str	x3, [x8, #96]
    99d4:	ret

00000000000099d8 <lzma_alone_decoder@@XZ_5.0>:
    99d8:	stp	x29, x30, [sp, #-64]!
    99dc:	str	x23, [sp, #16]
    99e0:	stp	x22, x21, [sp, #32]
    99e4:	stp	x20, x19, [sp, #48]
    99e8:	mov	x29, sp
    99ec:	mov	x20, x1
    99f0:	mov	x19, x0
    99f4:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    99f8:	mov	w8, w0
    99fc:	cbnz	w0, 9ab8 <lzma_alone_decoder@@XZ_5.0+0xe0>
    9a00:	ldp	x22, x21, [x19, #48]
    9a04:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9a08:	add	x23, x23, #0x600
    9a0c:	ldr	x8, [x21, #16]
    9a10:	cmp	x8, x23
    9a14:	b.eq	9a24 <lzma_alone_decoder@@XZ_5.0+0x4c>  // b.none
    9a18:	mov	x0, x21
    9a1c:	mov	x1, x22
    9a20:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    9a24:	ldr	x0, [x21]
    9a28:	str	x23, [x21, #16]
    9a2c:	cbnz	x0, 9a7c <lzma_alone_decoder@@XZ_5.0+0xa4>
    9a30:	mov	w0, #0xe0                  	// #224
    9a34:	mov	x1, x22
    9a38:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    9a3c:	cbz	x0, 9ad0 <lzma_alone_decoder@@XZ_5.0+0xf8>
    9a40:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9a44:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9a48:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9a4c:	add	x8, x8, #0x6ec
    9a50:	add	x9, x9, #0x96c
    9a54:	add	x10, x10, #0x998
    9a58:	mov	x11, #0xffffffffffffffff    	// #-1
    9a5c:	movi	v0.2d, #0x0
    9a60:	str	x0, [x21]
    9a64:	stp	x8, x9, [x21, #24]
    9a68:	str	x10, [x21, #56]
    9a6c:	stp	xzr, x11, [x0]
    9a70:	stp	q0, q0, [x0, #16]
    9a74:	str	q0, [x0, #48]
    9a78:	str	xzr, [x0, #64]
    9a7c:	cmp	x20, #0x0
    9a80:	mov	w9, #0x8000                	// #32768
    9a84:	csinc	x10, x20, xzr, ne  // ne = any
    9a88:	stp	x10, x9, [x0, #96]
    9a8c:	str	wzr, [x0, #72]
    9a90:	strb	wzr, [x0, #76]
    9a94:	str	wzr, [x0, #112]
    9a98:	str	xzr, [x0, #120]
    9a9c:	str	wzr, [x0, #128]
    9aa0:	stp	xzr, xzr, [x0, #80]
    9aa4:	ldr	x9, [x19, #56]
    9aa8:	mov	w8, wzr
    9aac:	mov	w10, #0x1                   	// #1
    9ab0:	strb	w10, [x9, #88]
    9ab4:	strb	w10, [x9, #91]
    9ab8:	ldp	x20, x19, [sp, #48]
    9abc:	ldp	x22, x21, [sp, #32]
    9ac0:	ldr	x23, [sp, #16]
    9ac4:	mov	w0, w8
    9ac8:	ldp	x29, x30, [sp], #64
    9acc:	ret
    9ad0:	mov	x0, x19
    9ad4:	bl	32c0 <lzma_end@plt>
    9ad8:	mov	w8, #0x5                   	// #5
    9adc:	b	9ab8 <lzma_alone_decoder@@XZ_5.0+0xe0>

0000000000009ae0 <lzma_auto_decoder@@XZ_5.0>:
    9ae0:	stp	x29, x30, [sp, #-64]!
    9ae4:	stp	x24, x23, [sp, #16]
    9ae8:	stp	x22, x21, [sp, #32]
    9aec:	stp	x20, x19, [sp, #48]
    9af0:	mov	x29, sp
    9af4:	mov	w21, w2
    9af8:	mov	x20, x1
    9afc:	mov	x19, x0
    9b00:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    9b04:	mov	w22, w0
    9b08:	cbnz	w0, 9bcc <lzma_auto_decoder@@XZ_5.0+0xec>
    9b0c:	ldp	x23, x22, [x19, #48]
    9b10:	adrp	x24, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9b14:	add	x24, x24, #0xbec
    9b18:	ldr	x8, [x22, #16]
    9b1c:	cmp	x8, x24
    9b20:	b.eq	9b30 <lzma_auto_decoder@@XZ_5.0+0x50>  // b.none
    9b24:	mov	x0, x22
    9b28:	mov	x1, x23
    9b2c:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    9b30:	cmp	w21, #0x1f
    9b34:	str	x24, [x22, #16]
    9b38:	b.ls	9b4c <lzma_auto_decoder@@XZ_5.0+0x6c>  // b.plast
    9b3c:	mov	w22, #0x8                   	// #8
    9b40:	mov	x0, x19
    9b44:	bl	32c0 <lzma_end@plt>
    9b48:	b	9bcc <lzma_auto_decoder@@XZ_5.0+0xec>
    9b4c:	ldr	x0, [x22]
    9b50:	cbnz	x0, 9ba8 <lzma_auto_decoder@@XZ_5.0+0xc8>
    9b54:	mov	w0, #0x58                  	// #88
    9b58:	mov	x1, x23
    9b5c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    9b60:	cbz	x0, 9be4 <lzma_auto_decoder@@XZ_5.0+0x104>
    9b64:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9b68:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9b6c:	add	x8, x8, #0xcd4
    9b70:	add	x9, x9, #0xe30
    9b74:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9b78:	stp	x8, x9, [x22, #24]
    9b7c:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9b80:	add	x10, x10, #0xe5c
    9b84:	add	x8, x8, #0xe74
    9b88:	stp	x10, x8, [x22, #48]
    9b8c:	mov	x8, #0xffffffffffffffff    	// #-1
    9b90:	movi	v0.2d, #0x0
    9b94:	str	x0, [x22]
    9b98:	stp	xzr, x8, [x0]
    9b9c:	stp	q0, q0, [x0, #16]
    9ba0:	str	q0, [x0, #48]
    9ba4:	str	xzr, [x0, #64]
    9ba8:	cmp	x20, #0x0
    9bac:	csinc	x8, x20, xzr, ne  // ne = any
    9bb0:	stp	w21, wzr, [x0, #80]
    9bb4:	str	x8, [x0, #72]
    9bb8:	ldr	x8, [x19, #56]
    9bbc:	mov	w22, wzr
    9bc0:	mov	w9, #0x1                   	// #1
    9bc4:	strb	w9, [x8, #88]
    9bc8:	strb	w9, [x8, #91]
    9bcc:	mov	w0, w22
    9bd0:	ldp	x20, x19, [sp, #48]
    9bd4:	ldp	x22, x21, [sp, #32]
    9bd8:	ldp	x24, x23, [sp, #16]
    9bdc:	ldp	x29, x30, [sp], #64
    9be0:	ret
    9be4:	mov	w22, #0x5                   	// #5
    9be8:	b	9b40 <lzma_auto_decoder@@XZ_5.0+0x60>
    9bec:	stp	x29, x30, [sp, #-64]!
    9bf0:	stp	x22, x21, [sp, #32]
    9bf4:	stp	x20, x19, [sp, #48]
    9bf8:	ldr	x8, [x0, #16]
    9bfc:	str	x23, [sp, #16]
    9c00:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9c04:	add	x23, x23, #0xbec
    9c08:	mov	w19, w3
    9c0c:	mov	x20, x2
    9c10:	mov	x21, x0
    9c14:	cmp	x8, x23
    9c18:	mov	x22, x1
    9c1c:	mov	x29, sp
    9c20:	b.eq	9c30 <lzma_auto_decoder@@XZ_5.0+0x150>  // b.none
    9c24:	mov	x0, x21
    9c28:	mov	x1, x22
    9c2c:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    9c30:	cmp	w19, #0x1f
    9c34:	str	x23, [x21, #16]
    9c38:	b.ls	9c44 <lzma_auto_decoder@@XZ_5.0+0x164>  // b.plast
    9c3c:	mov	w8, #0x8                   	// #8
    9c40:	b	9cb4 <lzma_auto_decoder@@XZ_5.0+0x1d4>
    9c44:	ldr	x0, [x21]
    9c48:	cbnz	x0, 9ca0 <lzma_auto_decoder@@XZ_5.0+0x1c0>
    9c4c:	mov	w0, #0x58                  	// #88
    9c50:	mov	x1, x22
    9c54:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    9c58:	cbz	x0, 9ccc <lzma_auto_decoder@@XZ_5.0+0x1ec>
    9c5c:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9c60:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9c64:	add	x8, x8, #0xcd4
    9c68:	add	x9, x9, #0xe30
    9c6c:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9c70:	stp	x8, x9, [x21, #24]
    9c74:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9f0>
    9c78:	add	x10, x10, #0xe5c
    9c7c:	add	x8, x8, #0xe74
    9c80:	stp	x10, x8, [x21, #48]
    9c84:	mov	x8, #0xffffffffffffffff    	// #-1
    9c88:	movi	v0.2d, #0x0
    9c8c:	str	x0, [x21]
    9c90:	stp	xzr, x8, [x0]
    9c94:	stp	q0, q0, [x0, #16]
    9c98:	str	q0, [x0, #48]
    9c9c:	str	xzr, [x0, #64]
    9ca0:	cmp	x20, #0x0
    9ca4:	mov	w8, wzr
    9ca8:	csinc	x9, x20, xzr, ne  // ne = any
    9cac:	str	x9, [x0, #72]
    9cb0:	stp	w19, wzr, [x0, #80]
    9cb4:	ldp	x20, x19, [sp, #48]
    9cb8:	ldp	x22, x21, [sp, #32]
    9cbc:	ldr	x23, [sp, #16]
    9cc0:	mov	w0, w8
    9cc4:	ldp	x29, x30, [sp], #64
    9cc8:	ret
    9ccc:	mov	w8, #0x5                   	// #5
    9cd0:	b	9cb4 <lzma_auto_decoder@@XZ_5.0+0x1d4>
    9cd4:	sub	sp, sp, #0x70
    9cd8:	stp	x29, x30, [sp, #16]
    9cdc:	stp	x26, x25, [sp, #48]
    9ce0:	stp	x24, x23, [sp, #64]
    9ce4:	stp	x22, x21, [sp, #80]
    9ce8:	stp	x20, x19, [sp, #96]
    9cec:	add	x29, sp, #0x10
    9cf0:	ldr	w8, [x0, #84]
    9cf4:	str	x27, [sp, #32]
    9cf8:	ldr	w27, [x29, #96]
    9cfc:	mov	x19, x4
    9d00:	mov	x20, x3
    9d04:	cmp	w8, #0x2
    9d08:	b.eq	9dc4 <lzma_auto_decoder@@XZ_5.0+0x2e4>  // b.none
    9d0c:	mov	x22, x7
    9d10:	mov	x23, x6
    9d14:	mov	x24, x5
    9d18:	mov	x25, x2
    9d1c:	mov	x21, x0
    9d20:	mov	x26, x1
    9d24:	cmp	w8, #0x1
    9d28:	b.eq	9d68 <lzma_auto_decoder@@XZ_5.0+0x288>  // b.none
    9d2c:	cbnz	w8, 9dac <lzma_auto_decoder@@XZ_5.0+0x2cc>
    9d30:	ldr	x8, [x20]
    9d34:	cmp	x8, x19
    9d38:	b.cs	9db4 <lzma_auto_decoder@@XZ_5.0+0x2d4>  // b.hs, b.nlast
    9d3c:	mov	w9, #0x1                   	// #1
    9d40:	str	w9, [x21, #84]
    9d44:	ldrb	w8, [x25, x8]
    9d48:	ldr	x2, [x21, #72]
    9d4c:	cmp	w8, #0xfd
    9d50:	b.ne	9e00 <lzma_auto_decoder@@XZ_5.0+0x320>  // b.any
    9d54:	ldr	w3, [x21, #80]
    9d58:	mov	x0, x21
    9d5c:	mov	x1, x26
    9d60:	bl	b848 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    9d64:	cbnz	w0, 9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9d68:	ldr	x8, [x21, #24]
    9d6c:	ldr	x0, [x21]
    9d70:	mov	x1, x26
    9d74:	mov	x2, x25
    9d78:	mov	x3, x20
    9d7c:	mov	x4, x19
    9d80:	mov	x5, x24
    9d84:	mov	x6, x23
    9d88:	mov	x7, x22
    9d8c:	str	w27, [sp]
    9d90:	blr	x8
    9d94:	cmp	w0, #0x1
    9d98:	b.ne	9de0 <lzma_auto_decoder@@XZ_5.0+0x300>  // b.any
    9d9c:	ldrb	w8, [x21, #80]
    9da0:	tbnz	w8, #3, 9dbc <lzma_auto_decoder@@XZ_5.0+0x2dc>
    9da4:	mov	w0, #0x1                   	// #1
    9da8:	b	9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9dac:	mov	w0, #0xb                   	// #11
    9db0:	b	9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9db4:	mov	w0, wzr
    9db8:	b	9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9dbc:	mov	w8, #0x2                   	// #2
    9dc0:	str	w8, [x21, #84]
    9dc4:	ldr	x8, [x20]
    9dc8:	cmp	x8, x19
    9dcc:	b.cs	9dd8 <lzma_auto_decoder@@XZ_5.0+0x2f8>  // b.hs, b.nlast
    9dd0:	mov	w0, #0x9                   	// #9
    9dd4:	b	9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9dd8:	cmp	w27, #0x3
    9ddc:	cset	w0, eq  // eq = none
    9de0:	ldp	x20, x19, [sp, #96]
    9de4:	ldp	x22, x21, [sp, #80]
    9de8:	ldp	x24, x23, [sp, #64]
    9dec:	ldp	x26, x25, [sp, #48]
    9df0:	ldr	x27, [sp, #32]
    9df4:	ldp	x29, x30, [sp, #16]
    9df8:	add	sp, sp, #0x70
    9dfc:	ret
    9e00:	mov	w3, #0x1                   	// #1
    9e04:	mov	x0, x21
    9e08:	mov	x1, x26
    9e0c:	bl	9600 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xff0>
    9e10:	cbnz	w0, 9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9e14:	ldr	w8, [x21, #80]
    9e18:	tbnz	w8, #0, 9e28 <lzma_auto_decoder@@XZ_5.0+0x348>
    9e1c:	tbz	w8, #2, 9d68 <lzma_auto_decoder@@XZ_5.0+0x288>
    9e20:	mov	w0, #0x4                   	// #4
    9e24:	b	9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9e28:	mov	w0, #0x2                   	// #2
    9e2c:	b	9de0 <lzma_auto_decoder@@XZ_5.0+0x300>
    9e30:	stp	x29, x30, [sp, #-32]!
    9e34:	stp	x20, x19, [sp, #16]
    9e38:	mov	x29, sp
    9e3c:	mov	x19, x1
    9e40:	mov	x20, x0
    9e44:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    9e48:	mov	x0, x20
    9e4c:	mov	x1, x19
    9e50:	ldp	x20, x19, [sp, #16]
    9e54:	ldp	x29, x30, [sp], #32
    9e58:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    9e5c:	ldr	x1, [x0, #48]
    9e60:	cbz	x1, 9e6c <lzma_auto_decoder@@XZ_5.0+0x38c>
    9e64:	ldr	x0, [x0]
    9e68:	br	x1
    9e6c:	mov	w0, wzr
    9e70:	ret
    9e74:	stp	x29, x30, [sp, #-32]!
    9e78:	stp	x20, x19, [sp, #16]
    9e7c:	ldr	x8, [x0, #56]
    9e80:	mov	x19, x3
    9e84:	mov	x20, x0
    9e88:	mov	x29, sp
    9e8c:	cbz	x8, 9ea4 <lzma_auto_decoder@@XZ_5.0+0x3c4>
    9e90:	ldr	x0, [x20]
    9e94:	mov	x3, x19
    9e98:	blr	x8
    9e9c:	cbnz	x19, 9ecc <lzma_auto_decoder@@XZ_5.0+0x3ec>
    9ea0:	b	9edc <lzma_auto_decoder@@XZ_5.0+0x3fc>
    9ea4:	mov	w8, #0x8000                	// #32768
    9ea8:	str	x8, [x1]
    9eac:	ldr	x8, [x20, #72]
    9eb0:	str	x8, [x2]
    9eb4:	cbz	x19, 9ed8 <lzma_auto_decoder@@XZ_5.0+0x3f8>
    9eb8:	ldr	x8, [x1]
    9ebc:	cmp	x8, x19
    9ec0:	mov	w8, #0x6                   	// #6
    9ec4:	csel	w0, w8, wzr, hi  // hi = pmore
    9ec8:	cbz	x19, 9edc <lzma_auto_decoder@@XZ_5.0+0x3fc>
    9ecc:	cbnz	w0, 9edc <lzma_auto_decoder@@XZ_5.0+0x3fc>
    9ed0:	str	x19, [x20, #72]
    9ed4:	b	9edc <lzma_auto_decoder@@XZ_5.0+0x3fc>
    9ed8:	mov	w0, wzr
    9edc:	ldp	x20, x19, [sp, #16]
    9ee0:	ldp	x29, x30, [sp], #32
    9ee4:	ret

0000000000009ee8 <lzma_block_buffer_decode@@XZ_5.0>:
    9ee8:	sub	sp, sp, #0xc0
    9eec:	stp	x29, x30, [sp, #96]
    9ef0:	stp	x28, x27, [sp, #112]
    9ef4:	stp	x26, x25, [sp, #128]
    9ef8:	stp	x24, x23, [sp, #144]
    9efc:	stp	x22, x21, [sp, #160]
    9f00:	stp	x20, x19, [sp, #176]
    9f04:	add	x29, sp, #0x60
    9f08:	cbz	x3, 9f60 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    9f0c:	ldr	x8, [x3]
    9f10:	mov	x23, x7
    9f14:	mov	x20, x6
    9f18:	mov	x24, x5
    9f1c:	mov	x22, x4
    9f20:	mov	x21, x3
    9f24:	mov	x25, x2
    9f28:	mov	x19, x1
    9f2c:	mov	x2, x0
    9f30:	cbnz	x25, 9f40 <lzma_block_buffer_decode@@XZ_5.0+0x58>
    9f34:	cmp	x8, x22
    9f38:	mov	x8, x22
    9f3c:	b.ne	9f60 <lzma_block_buffer_decode@@XZ_5.0+0x78>  // b.any
    9f40:	mov	w26, #0xb                   	// #11
    9f44:	cbz	x20, 9f64 <lzma_block_buffer_decode@@XZ_5.0+0x7c>
    9f48:	cmp	x8, x22
    9f4c:	b.hi	9f64 <lzma_block_buffer_decode@@XZ_5.0+0x7c>  // b.pmore
    9f50:	ldr	x8, [x20]
    9f54:	cmp	x8, x23
    9f58:	cbz	x24, 9f88 <lzma_block_buffer_decode@@XZ_5.0+0xa0>
    9f5c:	b.ls	9f8c <lzma_block_buffer_decode@@XZ_5.0+0xa4>  // b.plast
    9f60:	mov	w26, #0xb                   	// #11
    9f64:	mov	w0, w26
    9f68:	ldp	x20, x19, [sp, #176]
    9f6c:	ldp	x22, x21, [sp, #160]
    9f70:	ldp	x24, x23, [sp, #144]
    9f74:	ldp	x26, x25, [sp, #128]
    9f78:	ldp	x28, x27, [sp, #112]
    9f7c:	ldp	x29, x30, [sp, #96]
    9f80:	add	sp, sp, #0xc0
    9f84:	ret
    9f88:	b.ne	9f60 <lzma_block_buffer_decode@@XZ_5.0+0x78>  // b.any
    9f8c:	movi	v0.2d, #0x0
    9f90:	mov	x8, #0xffffffffffffffff    	// #-1
    9f94:	add	x0, sp, #0x10
    9f98:	mov	x1, x19
    9f9c:	str	xzr, [sp, #80]
    9fa0:	stp	q0, q0, [sp, #48]
    9fa4:	stp	q0, q0, [sp, #16]
    9fa8:	str	x8, [sp, #24]
    9fac:	bl	a030 <lzma_block_buffer_decode@@XZ_5.0+0x148>
    9fb0:	mov	w26, w0
    9fb4:	cbnz	w0, a020 <lzma_block_buffer_decode@@XZ_5.0+0x138>
    9fb8:	ldr	x8, [sp, #40]
    9fbc:	ldr	x0, [sp, #16]
    9fc0:	ldr	x27, [x21]
    9fc4:	ldr	x28, [x20]
    9fc8:	mov	w9, #0x3                   	// #3
    9fcc:	mov	x1, x19
    9fd0:	mov	x2, x25
    9fd4:	mov	x3, x21
    9fd8:	mov	x4, x22
    9fdc:	mov	x5, x24
    9fe0:	mov	x6, x20
    9fe4:	mov	x7, x23
    9fe8:	str	w9, [sp]
    9fec:	blr	x8
    9ff0:	cmp	w0, #0x1
    9ff4:	b.eq	a01c <lzma_block_buffer_decode@@XZ_5.0+0x134>  // b.none
    9ff8:	mov	w26, w0
    9ffc:	cbnz	w0, a010 <lzma_block_buffer_decode@@XZ_5.0+0x128>
    a000:	ldr	x8, [x21]
    a004:	cmp	x8, x22
    a008:	mov	w8, #0x9                   	// #9
    a00c:	cinc	w26, w8, ne  // ne = any
    a010:	str	x27, [x21]
    a014:	str	x28, [x20]
    a018:	b	a020 <lzma_block_buffer_decode@@XZ_5.0+0x138>
    a01c:	mov	w26, wzr
    a020:	add	x0, sp, #0x10
    a024:	mov	x1, x19
    a028:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    a02c:	b	9f64 <lzma_block_buffer_decode@@XZ_5.0+0x7c>
    a030:	stp	x29, x30, [sp, #-64]!
    a034:	stp	x22, x21, [sp, #32]
    a038:	stp	x20, x19, [sp, #48]
    a03c:	ldr	x8, [x0, #16]
    a040:	adrp	x21, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    a044:	add	x21, x21, #0x30
    a048:	mov	x19, x2
    a04c:	mov	x22, x0
    a050:	cmp	x8, x21
    a054:	mov	x20, x1
    a058:	str	x23, [sp, #16]
    a05c:	mov	x29, sp
    a060:	b.eq	a070 <lzma_block_buffer_decode@@XZ_5.0+0x188>  // b.none
    a064:	mov	x0, x22
    a068:	mov	x1, x20
    a06c:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    a070:	mov	x0, x19
    a074:	str	x21, [x22, #16]
    a078:	bl	3130 <lzma_block_unpadded_size@plt>
    a07c:	cbz	x0, a0fc <lzma_block_buffer_decode@@XZ_5.0+0x214>
    a080:	ldr	x8, [x19, #24]
    a084:	cmn	x8, #0x1
    a088:	b.lt	a0fc <lzma_block_buffer_decode@@XZ_5.0+0x214>  // b.tstop
    a08c:	ldr	x21, [x22]
    a090:	cbnz	x21, a0dc <lzma_block_buffer_decode@@XZ_5.0+0x1f4>
    a094:	mov	w0, #0xe8                  	// #232
    a098:	mov	x1, x20
    a09c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    a0a0:	cbz	x0, a174 <lzma_block_buffer_decode@@XZ_5.0+0x28c>
    a0a4:	adrp	x8, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    a0a8:	adrp	x9, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    a0ac:	mov	x21, x0
    a0b0:	add	x8, x8, #0x17c
    a0b4:	add	x9, x9, #0x3d4
    a0b8:	mov	x10, #0xffffffffffffffff    	// #-1
    a0bc:	movi	v0.2d, #0x0
    a0c0:	str	x0, [x22]
    a0c4:	stp	x8, x9, [x22, #24]
    a0c8:	stp	xzr, x10, [x0, #8]
    a0cc:	stur	q0, [x0, #24]
    a0d0:	stur	q0, [x0, #40]
    a0d4:	stur	q0, [x0, #56]
    a0d8:	str	xzr, [x0, #72]
    a0dc:	str	wzr, [x21]
    a0e0:	stp	xzr, xzr, [x21, #88]
    a0e4:	str	x19, [x21, #80]
    a0e8:	ldr	x8, [x19, #16]
    a0ec:	cmn	x8, #0x1
    a0f0:	b.eq	a114 <lzma_block_buffer_decode@@XZ_5.0+0x22c>  // b.none
    a0f4:	ldr	w22, [x19, #8]
    a0f8:	b	a12c <lzma_block_buffer_decode@@XZ_5.0+0x244>
    a0fc:	mov	w0, #0xb                   	// #11
    a100:	ldp	x20, x19, [sp, #48]
    a104:	ldp	x22, x21, [sp, #32]
    a108:	ldr	x23, [sp, #16]
    a10c:	ldp	x29, x30, [sp], #64
    a110:	ret
    a114:	ldp	w23, w22, [x19, #4]
    a118:	mov	w0, w22
    a11c:	bl	3200 <lzma_check_size@plt>
    a120:	add	x8, x23, w0, uxtw
    a124:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    a128:	sub	x8, x9, x8
    a12c:	add	x0, x21, #0x78
    a130:	mov	w1, w22
    a134:	stp	x8, xzr, [x21, #104]
    a138:	bl	c1a8 <lzma_check_size@@XZ_5.0+0x20>
    a13c:	ldr	w8, [x19]
    a140:	cbz	w8, a150 <lzma_block_buffer_decode@@XZ_5.0+0x268>
    a144:	ldrb	w8, [x19, #200]
    a148:	cmp	w8, #0x0
    a14c:	cset	w8, ne  // ne = any
    a150:	strb	w8, [x21, #224]
    a154:	ldr	x2, [x19, #32]
    a158:	add	x0, x21, #0x8
    a15c:	mov	x1, x20
    a160:	ldp	x20, x19, [sp, #48]
    a164:	ldp	x22, x21, [sp, #32]
    a168:	ldr	x23, [sp, #16]
    a16c:	ldp	x29, x30, [sp], #64
    a170:	b	a960 <lzma_filter_decoder_is_supported@@XZ_5.0+0xc4>
    a174:	mov	w0, #0x5                   	// #5
    a178:	b	a100 <lzma_block_buffer_decode@@XZ_5.0+0x218>
    a17c:	sub	sp, sp, #0x70
    a180:	stp	x29, x30, [sp, #16]
    a184:	stp	x26, x25, [sp, #48]
    a188:	stp	x24, x23, [sp, #64]
    a18c:	stp	x22, x21, [sp, #80]
    a190:	stp	x20, x19, [sp, #96]
    a194:	ldr	w8, [x0]
    a198:	mov	x20, x4
    a19c:	mov	x21, x3
    a1a0:	mov	x22, x2
    a1a4:	mov	x19, x0
    a1a8:	str	x27, [sp, #32]
    a1ac:	add	x29, sp, #0x10
    a1b0:	cbz	w8, a1fc <lzma_block_buffer_decode@@XZ_5.0+0x314>
    a1b4:	cmp	w8, #0x2
    a1b8:	b.eq	a338 <lzma_block_buffer_decode@@XZ_5.0+0x450>  // b.none
    a1bc:	cmp	w8, #0x1
    a1c0:	b.ne	a30c <lzma_block_buffer_decode@@XZ_5.0+0x424>  // b.any
    a1c4:	mov	x25, x19
    a1c8:	ldr	x8, [x25, #88]!
    a1cc:	tst	x8, #0x3
    a1d0:	b.eq	a314 <lzma_block_buffer_decode@@XZ_5.0+0x42c>  // b.none
    a1d4:	ldr	x9, [x21]
    a1d8:	cmp	x9, x20
    a1dc:	b.cs	a370 <lzma_block_buffer_decode@@XZ_5.0+0x488>  // b.hs, b.nlast
    a1e0:	add	x8, x8, #0x1
    a1e4:	str	x8, [x25]
    a1e8:	ldrb	w10, [x22, x9]
    a1ec:	add	x9, x9, #0x1
    a1f0:	str	x9, [x21]
    a1f4:	cbz	w10, a1cc <lzma_block_buffer_decode@@XZ_5.0+0x2e4>
    a1f8:	b	a3b0 <lzma_block_buffer_decode@@XZ_5.0+0x4c8>
    a1fc:	ldr	w8, [x29, #96]
    a200:	ldr	x9, [x19, #32]
    a204:	ldr	x0, [x19, #8]
    a208:	ldr	x27, [x21]
    a20c:	ldr	x26, [x6]
    a210:	mov	x2, x22
    a214:	mov	x3, x21
    a218:	mov	x4, x20
    a21c:	mov	x25, x6
    a220:	mov	x23, x5
    a224:	str	w8, [sp]
    a228:	blr	x9
    a22c:	ldr	x8, [x25]
    a230:	mov	x25, x19
    a234:	ldr	x9, [x21]
    a238:	ldr	x10, [x25, #88]!
    a23c:	mov	x12, #0x7fffffffffffffff    	// #9223372036854775807
    a240:	mov	w24, w0
    a244:	mov	w0, #0x9                   	// #9
    a248:	ldr	x11, [x25, #16]
    a24c:	cmp	x11, x12
    a250:	csel	x11, x11, x12, cc  // cc = lo, ul, last
    a254:	subs	x12, x11, x10
    a258:	b.cc	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a25c:	sub	x11, x9, x27
    a260:	cmp	x12, x11
    a264:	b.cc	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a268:	ldr	x9, [x19, #80]
    a26c:	add	x10, x10, x11
    a270:	str	x10, [x19, #88]
    a274:	ldr	x10, [x19, #96]
    a278:	ldr	x11, [x9, #24]
    a27c:	mov	x12, #0x7fffffffffffffff    	// #9223372036854775807
    a280:	mov	w0, #0x9                   	// #9
    a284:	cmp	x11, x12
    a288:	csel	x11, x11, x12, cc  // cc = lo, ul, last
    a28c:	subs	x11, x11, x10
    a290:	b.cc	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a294:	sub	x3, x8, x26
    a298:	cmp	x11, x3
    a29c:	b.cc	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a2a0:	ldrb	w8, [x19, #224]
    a2a4:	add	x10, x10, x3
    a2a8:	str	x10, [x19, #96]
    a2ac:	cbnz	w8, a2c0 <lzma_block_buffer_decode@@XZ_5.0+0x3d8>
    a2b0:	ldr	w1, [x9, #8]
    a2b4:	add	x0, x19, #0x78
    a2b8:	add	x2, x23, x26
    a2bc:	bl	c1d4 <lzma_check_size@@XZ_5.0+0x4c>
    a2c0:	cmp	w24, #0x1
    a2c4:	mov	w0, w24
    a2c8:	b.ne	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.any
    a2cc:	ldp	x9, x8, [x19, #80]
    a2d0:	ldr	x10, [x9, #16]
    a2d4:	cmn	x10, #0x1
    a2d8:	b.eq	a2e4 <lzma_block_buffer_decode@@XZ_5.0+0x3fc>  // b.none
    a2dc:	cmp	x10, x8
    a2e0:	b.ne	a3b0 <lzma_block_buffer_decode@@XZ_5.0+0x4c8>  // b.any
    a2e4:	ldr	x11, [x9, #24]
    a2e8:	ldr	x10, [x19, #96]
    a2ec:	cmn	x11, #0x1
    a2f0:	b.eq	a2fc <lzma_block_buffer_decode@@XZ_5.0+0x414>  // b.none
    a2f4:	cmp	x11, x10
    a2f8:	b.ne	a3b0 <lzma_block_buffer_decode@@XZ_5.0+0x4c8>  // b.any
    a2fc:	stp	x8, x10, [x9, #16]
    a300:	mov	w9, #0x1                   	// #1
    a304:	str	w9, [x19]
    a308:	b	a1cc <lzma_block_buffer_decode@@XZ_5.0+0x2e4>
    a30c:	mov	w0, #0xb                   	// #11
    a310:	b	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>
    a314:	ldr	x8, [x19, #80]
    a318:	ldr	w1, [x8, #8]
    a31c:	cbz	w1, a380 <lzma_block_buffer_decode@@XZ_5.0+0x498>
    a320:	ldrb	w8, [x19, #224]
    a324:	cbnz	w8, a330 <lzma_block_buffer_decode@@XZ_5.0+0x448>
    a328:	add	x0, x19, #0x78
    a32c:	bl	c254 <lzma_check_size@@XZ_5.0+0xcc>
    a330:	mov	w8, #0x2                   	// #2
    a334:	str	w8, [x19]
    a338:	ldr	x24, [x19, #80]
    a33c:	ldr	w0, [x24, #8]
    a340:	bl	3200 <lzma_check_size@plt>
    a344:	mov	w23, w0
    a348:	add	x3, x24, #0x28
    a34c:	add	x4, x19, #0x70
    a350:	mov	x0, x22
    a354:	mov	x1, x21
    a358:	mov	x2, x20
    a35c:	mov	x5, x23
    a360:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    a364:	ldr	x8, [x19, #112]
    a368:	cmp	x8, x23
    a36c:	b.cs	a378 <lzma_block_buffer_decode@@XZ_5.0+0x490>  // b.hs, b.nlast
    a370:	mov	w0, wzr
    a374:	b	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>
    a378:	ldrb	w8, [x19, #224]
    a37c:	cbz	w8, a388 <lzma_block_buffer_decode@@XZ_5.0+0x4a0>
    a380:	mov	w0, #0x1                   	// #1
    a384:	b	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>
    a388:	ldr	x20, [x19, #80]
    a38c:	ldr	w0, [x20, #8]
    a390:	bl	3080 <lzma_check_is_supported@plt>
    a394:	tst	w0, #0xff
    a398:	b.eq	a380 <lzma_block_buffer_decode@@XZ_5.0+0x498>  // b.none
    a39c:	add	x0, x20, #0x28
    a3a0:	add	x1, x19, #0x78
    a3a4:	mov	x2, x23
    a3a8:	bl	3210 <bcmp@plt>
    a3ac:	cbz	w0, a380 <lzma_block_buffer_decode@@XZ_5.0+0x498>
    a3b0:	mov	w0, #0x9                   	// #9
    a3b4:	ldp	x20, x19, [sp, #96]
    a3b8:	ldp	x22, x21, [sp, #80]
    a3bc:	ldp	x24, x23, [sp, #64]
    a3c0:	ldp	x26, x25, [sp, #48]
    a3c4:	ldr	x27, [sp, #32]
    a3c8:	ldp	x29, x30, [sp, #16]
    a3cc:	add	sp, sp, #0x70
    a3d0:	ret
    a3d4:	stp	x29, x30, [sp, #-32]!
    a3d8:	stp	x20, x19, [sp, #16]
    a3dc:	mov	x20, x0
    a3e0:	add	x0, x0, #0x8
    a3e4:	mov	x29, sp
    a3e8:	mov	x19, x1
    a3ec:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    a3f0:	mov	x0, x20
    a3f4:	mov	x1, x19
    a3f8:	ldp	x20, x19, [sp, #16]
    a3fc:	ldp	x29, x30, [sp], #32
    a400:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>

000000000000a404 <lzma_block_decoder@@XZ_5.0>:
    a404:	stp	x29, x30, [sp, #-48]!
    a408:	str	x21, [sp, #16]
    a40c:	stp	x20, x19, [sp, #32]
    a410:	mov	x29, sp
    a414:	mov	x21, x1
    a418:	mov	x19, x0
    a41c:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    a420:	mov	w20, w0
    a424:	cbnz	w0, a458 <lzma_block_decoder@@XZ_5.0+0x54>
    a428:	ldp	x1, x0, [x19, #48]
    a42c:	mov	x2, x21
    a430:	bl	a030 <lzma_block_buffer_decode@@XZ_5.0+0x148>
    a434:	mov	w20, w0
    a438:	cbz	w0, a448 <lzma_block_decoder@@XZ_5.0+0x44>
    a43c:	mov	x0, x19
    a440:	bl	32c0 <lzma_end@plt>
    a444:	b	a458 <lzma_block_decoder@@XZ_5.0+0x54>
    a448:	ldr	x8, [x19, #56]
    a44c:	mov	w9, #0x1                   	// #1
    a450:	strb	w9, [x8, #88]
    a454:	strb	w9, [x8, #91]
    a458:	mov	w0, w20
    a45c:	ldp	x20, x19, [sp, #32]
    a460:	ldr	x21, [sp, #16]
    a464:	ldp	x29, x30, [sp], #48
    a468:	ret

000000000000a46c <lzma_block_header_decode@@XZ_5.0>:
    a46c:	stp	x29, x30, [sp, #-80]!
    a470:	stp	x24, x23, [sp, #32]
    a474:	stp	x22, x21, [sp, #48]
    a478:	stp	x20, x19, [sp, #64]
    a47c:	ldr	x8, [x0, #32]
    a480:	mov	x9, #0xffffffffffffffff    	// #-1
    a484:	str	x25, [sp, #16]
    a488:	mov	x21, x2
    a48c:	stp	x9, xzr, [x8]
    a490:	stp	x9, xzr, [x8, #16]
    a494:	stp	x9, xzr, [x8, #32]
    a498:	stp	x9, xzr, [x8, #48]
    a49c:	stp	x9, xzr, [x8, #64]
    a4a0:	ldr	w8, [x0]
    a4a4:	mov	x19, x0
    a4a8:	mov	x20, x1
    a4ac:	mov	x29, sp
    a4b0:	cmp	w8, #0x2
    a4b4:	b.cc	a4c0 <lzma_block_header_decode@@XZ_5.0+0x54>  // b.lo, b.ul, b.last
    a4b8:	mov	w8, #0x1                   	// #1
    a4bc:	str	w8, [x19]
    a4c0:	strb	wzr, [x19, #200]
    a4c4:	ldrb	w8, [x21]
    a4c8:	ldr	w9, [x19, #4]
    a4cc:	lsl	x22, x8, #2
    a4d0:	add	w8, w22, #0x4
    a4d4:	cmp	w8, w9
    a4d8:	b.ne	a4e8 <lzma_block_header_decode@@XZ_5.0+0x7c>  // b.any
    a4dc:	ldr	w8, [x19, #8]
    a4e0:	cmp	w8, #0xf
    a4e4:	b.ls	a508 <lzma_block_header_decode@@XZ_5.0+0x9c>  // b.plast
    a4e8:	mov	w23, #0xb                   	// #11
    a4ec:	mov	w0, w23
    a4f0:	ldp	x20, x19, [sp, #64]
    a4f4:	ldp	x22, x21, [sp, #48]
    a4f8:	ldp	x24, x23, [sp, #32]
    a4fc:	ldr	x25, [sp, #16]
    a500:	ldp	x29, x30, [sp], #80
    a504:	ret
    a508:	mov	x0, x21
    a50c:	mov	x1, x22
    a510:	mov	w2, wzr
    a514:	bl	3160 <lzma_crc32@plt>
    a518:	ldr	w8, [x21, x22]
    a51c:	cmp	w0, w8
    a520:	b.ne	a648 <lzma_block_header_decode@@XZ_5.0+0x1dc>  // b.any
    a524:	ldrb	w8, [x21, #1]
    a528:	tst	w8, #0x3c
    a52c:	b.eq	a538 <lzma_block_header_decode@@XZ_5.0+0xcc>  // b.none
    a530:	mov	w23, #0x8                   	// #8
    a534:	b	a4ec <lzma_block_header_decode@@XZ_5.0+0x80>
    a538:	mov	w9, #0x2                   	// #2
    a53c:	add	x0, x19, #0x10
    a540:	str	x9, [x29, #24]
    a544:	tbnz	w8, #6, a620 <lzma_block_header_decode@@XZ_5.0+0x1b4>
    a548:	mov	x8, #0xffffffffffffffff    	// #-1
    a54c:	str	x8, [x0]
    a550:	ldrsb	w8, [x21, #1]
    a554:	add	x0, x19, #0x18
    a558:	tbnz	w8, #31, a6b0 <lzma_block_header_decode@@XZ_5.0+0x244>
    a55c:	mov	x8, #0xffffffffffffffff    	// #-1
    a560:	str	x8, [x0]
    a564:	ldrb	w8, [x21, #1]
    a568:	mov	x24, xzr
    a56c:	and	x8, x8, #0x3
    a570:	lsl	x8, x8, #4
    a574:	add	x25, x8, #0x10
    a578:	ldr	x8, [x19, #32]
    a57c:	add	x3, x29, #0x18
    a580:	mov	x1, x20
    a584:	mov	x2, x21
    a588:	add	x0, x8, x24
    a58c:	mov	x4, x22
    a590:	bl	3480 <lzma_filter_flags_decode@plt>
    a594:	cbnz	w0, a650 <lzma_block_header_decode@@XZ_5.0+0x1e4>
    a598:	add	x24, x24, #0x10
    a59c:	cmp	x25, x24
    a5a0:	b.ne	a578 <lzma_block_header_decode@@XZ_5.0+0x10c>  // b.any
    a5a4:	ldr	x8, [x29, #24]
    a5a8:	cmp	x8, x22
    a5ac:	b.cs	a6d0 <lzma_block_header_decode@@XZ_5.0+0x264>  // b.hs, b.nlast
    a5b0:	add	x9, x8, #0x1
    a5b4:	str	x9, [x29, #24]
    a5b8:	ldrb	w10, [x21, x8]
    a5bc:	mov	x8, x9
    a5c0:	cbz	w10, a5a8 <lzma_block_header_decode@@XZ_5.0+0x13c>
    a5c4:	ldr	x8, [x19, #32]
    a5c8:	mov	x1, x20
    a5cc:	ldr	x0, [x8, #8]
    a5d0:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a5d4:	ldr	x8, [x19, #32]
    a5d8:	mov	x21, #0xffffffffffffffff    	// #-1
    a5dc:	mov	x1, x20
    a5e0:	ldr	x0, [x8, #24]
    a5e4:	stp	x21, xzr, [x8]
    a5e8:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a5ec:	ldr	x8, [x19, #32]
    a5f0:	mov	x1, x20
    a5f4:	ldr	x0, [x8, #40]
    a5f8:	stp	x21, xzr, [x8, #16]
    a5fc:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a600:	ldr	x8, [x19, #32]
    a604:	mov	x1, x20
    a608:	ldr	x0, [x8, #56]
    a60c:	stp	x21, xzr, [x8, #32]
    a610:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a614:	ldr	x8, [x19, #32]
    a618:	stp	x21, xzr, [x8, #48]
    a61c:	b	a530 <lzma_block_header_decode@@XZ_5.0+0xc4>
    a620:	add	x3, x29, #0x18
    a624:	mov	x1, xzr
    a628:	mov	x2, x21
    a62c:	mov	x4, x22
    a630:	bl	3340 <lzma_vli_decode@plt>
    a634:	mov	w23, w0
    a638:	cbnz	w0, a4ec <lzma_block_header_decode@@XZ_5.0+0x80>
    a63c:	mov	x0, x19
    a640:	bl	3130 <lzma_block_unpadded_size@plt>
    a644:	cbnz	x0, a550 <lzma_block_header_decode@@XZ_5.0+0xe4>
    a648:	mov	w23, #0x9                   	// #9
    a64c:	b	a4ec <lzma_block_header_decode@@XZ_5.0+0x80>
    a650:	ldr	x8, [x19, #32]
    a654:	mov	w23, w0
    a658:	mov	x1, x20
    a65c:	ldr	x0, [x8, #8]
    a660:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a664:	ldr	x8, [x19, #32]
    a668:	mov	x21, #0xffffffffffffffff    	// #-1
    a66c:	mov	x1, x20
    a670:	ldr	x0, [x8, #24]
    a674:	stp	x21, xzr, [x8]
    a678:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a67c:	ldr	x8, [x19, #32]
    a680:	mov	x1, x20
    a684:	ldr	x0, [x8, #40]
    a688:	stp	x21, xzr, [x8, #16]
    a68c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a690:	ldr	x8, [x19, #32]
    a694:	mov	x1, x20
    a698:	ldr	x0, [x8, #56]
    a69c:	stp	x21, xzr, [x8, #32]
    a6a0:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    a6a4:	ldr	x8, [x19, #32]
    a6a8:	stp	x21, xzr, [x8, #48]
    a6ac:	b	a4ec <lzma_block_header_decode@@XZ_5.0+0x80>
    a6b0:	add	x3, x29, #0x18
    a6b4:	mov	x1, xzr
    a6b8:	mov	x2, x21
    a6bc:	mov	x4, x22
    a6c0:	bl	3340 <lzma_vli_decode@plt>
    a6c4:	mov	w23, w0
    a6c8:	cbnz	w0, a4ec <lzma_block_header_decode@@XZ_5.0+0x80>
    a6cc:	b	a564 <lzma_block_header_decode@@XZ_5.0+0xf8>
    a6d0:	mov	w23, wzr
    a6d4:	b	a4ec <lzma_block_header_decode@@XZ_5.0+0x80>

000000000000a6d8 <lzma_easy_decoder_memusage@@XZ_5.0>:
    a6d8:	sub	sp, sp, #0xd0
    a6dc:	mov	w1, w0
    a6e0:	mov	x0, sp
    a6e4:	stp	x29, x30, [sp, #192]
    a6e8:	add	x29, sp, #0xc0
    a6ec:	bl	406c <lzma_block_total_size@@XZ_5.0+0xa8>
    a6f0:	tbz	w0, #0, a6fc <lzma_easy_decoder_memusage@@XZ_5.0+0x24>
    a6f4:	mov	w0, #0xffffffff            	// #-1
    a6f8:	b	a704 <lzma_easy_decoder_memusage@@XZ_5.0+0x2c>
    a6fc:	mov	x0, sp
    a700:	bl	3280 <lzma_raw_decoder_memusage@plt>
    a704:	ldp	x29, x30, [sp, #192]
    a708:	add	sp, sp, #0xd0
    a70c:	ret

000000000000a710 <lzma_raw_buffer_decode@@XZ_5.0>:
    a710:	sub	sp, sp, #0xd0
    a714:	stp	x24, x23, [sp, #160]
    a718:	mov	x23, x2
    a71c:	mov	w24, #0xb                   	// #11
    a720:	stp	x29, x30, [sp, #112]
    a724:	stp	x28, x27, [sp, #128]
    a728:	stp	x26, x25, [sp, #144]
    a72c:	stp	x22, x21, [sp, #176]
    a730:	stp	x20, x19, [sp, #192]
    a734:	add	x29, sp, #0x70
    a738:	cbz	x2, a878 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a73c:	mov	x21, x3
    a740:	cbz	x3, a878 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a744:	mov	x20, x6
    a748:	mov	w24, #0xb                   	// #11
    a74c:	cbz	x6, a878 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a750:	mov	x26, x5
    a754:	cbz	x5, a878 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a758:	ldr	x8, [x21]
    a75c:	mov	x22, x4
    a760:	cmp	x8, x4
    a764:	b.hi	a878 <lzma_raw_buffer_decode@@XZ_5.0+0x168>  // b.pmore
    a768:	ldr	x8, [x20]
    a76c:	mov	x25, x7
    a770:	cmp	x8, x7
    a774:	b.ls	a780 <lzma_raw_buffer_decode@@XZ_5.0+0x70>  // b.plast
    a778:	mov	w24, #0xb                   	// #11
    a77c:	b	a878 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a780:	mov	x2, x0
    a784:	movi	v0.2d, #0x0
    a788:	mov	x8, #0xffffffffffffffff    	// #-1
    a78c:	add	x0, sp, #0x20
    a790:	mov	x19, x1
    a794:	str	xzr, [sp, #96]
    a798:	stp	q0, q0, [sp, #64]
    a79c:	stp	q0, q0, [sp, #32]
    a7a0:	str	x8, [sp, #40]
    a7a4:	bl	a960 <lzma_filter_decoder_is_supported@@XZ_5.0+0xc4>
    a7a8:	mov	w24, w0
    a7ac:	cbnz	w0, a878 <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a7b0:	ldr	x8, [sp, #56]
    a7b4:	ldr	x0, [sp, #32]
    a7b8:	ldr	x27, [x21]
    a7bc:	ldr	x28, [x20]
    a7c0:	mov	w9, #0x3                   	// #3
    a7c4:	mov	x1, x19
    a7c8:	mov	x2, x23
    a7cc:	mov	x3, x21
    a7d0:	mov	x4, x22
    a7d4:	mov	x5, x26
    a7d8:	mov	x6, x20
    a7dc:	mov	x7, x25
    a7e0:	str	w9, [sp]
    a7e4:	blr	x8
    a7e8:	cmp	w0, #0x1
    a7ec:	b.eq	a858 <lzma_raw_buffer_decode@@XZ_5.0+0x148>  // b.none
    a7f0:	mov	w24, w0
    a7f4:	cbnz	w0, a864 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    a7f8:	ldr	x8, [x21]
    a7fc:	cmp	x8, x22
    a800:	b.ne	a860 <lzma_raw_buffer_decode@@XZ_5.0+0x150>  // b.any
    a804:	ldr	x8, [x20]
    a808:	mov	w24, #0x9                   	// #9
    a80c:	cmp	x8, x25
    a810:	b.ne	a864 <lzma_raw_buffer_decode@@XZ_5.0+0x154>  // b.any
    a814:	ldr	x8, [sp, #56]
    a818:	ldr	x0, [sp, #32]
    a81c:	mov	w9, #0x3                   	// #3
    a820:	add	x5, sp, #0x1c
    a824:	add	x6, sp, #0x10
    a828:	mov	w7, #0x1                   	// #1
    a82c:	mov	x1, x19
    a830:	mov	x2, x23
    a834:	mov	x3, x21
    a838:	mov	x4, x22
    a83c:	str	xzr, [sp, #16]
    a840:	str	w9, [sp]
    a844:	blr	x8
    a848:	ldr	x8, [sp, #16]
    a84c:	cmp	x8, #0x1
    a850:	cinc	w24, w24, eq  // eq = none
    a854:	b	a864 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    a858:	mov	w24, wzr
    a85c:	b	a86c <lzma_raw_buffer_decode@@XZ_5.0+0x15c>
    a860:	mov	w24, #0xa                   	// #10
    a864:	str	x27, [x21]
    a868:	str	x28, [x20]
    a86c:	add	x0, sp, #0x20
    a870:	mov	x1, x19
    a874:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    a878:	mov	w0, w24
    a87c:	ldp	x20, x19, [sp, #192]
    a880:	ldp	x22, x21, [sp, #176]
    a884:	ldp	x24, x23, [sp, #160]
    a888:	ldp	x26, x25, [sp, #144]
    a88c:	ldp	x28, x27, [sp, #128]
    a890:	ldp	x29, x30, [sp, #112]
    a894:	add	sp, sp, #0xd0
    a898:	ret

000000000000a89c <lzma_filter_decoder_is_supported@@XZ_5.0>:
    a89c:	sub	x8, x0, #0x3
    a8a0:	cmp	x8, #0x7
    a8a4:	b.cs	a8b0 <lzma_filter_decoder_is_supported@@XZ_5.0+0x14>  // b.hs, b.nlast
    a8a8:	mov	w0, #0x1                   	// #1
    a8ac:	ret
    a8b0:	mov	x8, #0x1                   	// #1
    a8b4:	movk	x8, #0x4000, lsl #48
    a8b8:	cmp	x0, x8
    a8bc:	b.eq	a8a8 <lzma_filter_decoder_is_supported@@XZ_5.0+0xc>  // b.none
    a8c0:	cmp	x0, #0x21
    a8c4:	b.eq	a8a8 <lzma_filter_decoder_is_supported@@XZ_5.0+0xc>  // b.none
    a8c8:	mov	w0, wzr
    a8cc:	ret
    a8d0:	sub	x9, x0, #0x3
    a8d4:	mov	x8, x0
    a8d8:	cmp	x9, #0x1e
    a8dc:	mov	x0, xzr
    a8e0:	b.hi	a904 <lzma_filter_decoder_is_supported@@XZ_5.0+0x68>  // b.pmore
    a8e4:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    a8e8:	add	x8, x8, #0x91c
    a8ec:	adr	x10, a8fc <lzma_filter_decoder_is_supported@@XZ_5.0+0x60>
    a8f0:	ldrb	w11, [x8, x9]
    a8f4:	add	x10, x10, x11, lsl #2
    a8f8:	br	x10
    a8fc:	mov	w8, #0x8                   	// #8
    a900:	b	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>
    a904:	mov	x9, #0x1                   	// #1
    a908:	movk	x9, #0x4000, lsl #48
    a90c:	cmp	x8, x9
    a910:	mov	x8, xzr
    a914:	b.eq	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>  // b.none
    a918:	ret
    a91c:	mov	w8, #0x2                   	// #2
    a920:	b	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>
    a924:	mov	w8, #0x3                   	// #3
    a928:	b	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>
    a92c:	mov	w8, #0x4                   	// #4
    a930:	b	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>
    a934:	mov	w8, #0x5                   	// #5
    a938:	b	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>
    a93c:	mov	w8, #0x6                   	// #6
    a940:	b	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>
    a944:	mov	w8, #0x7                   	// #7
    a948:	b	a950 <lzma_filter_decoder_is_supported@@XZ_5.0+0xb4>
    a94c:	mov	w8, #0x1                   	// #1
    a950:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    a954:	add	x9, x9, #0xbf8
    a958:	add	x0, x9, x8, lsl #5
    a95c:	ret
    a960:	adrp	x3, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    a964:	add	x3, x3, #0x8d0
    a968:	mov	w4, wzr
    a96c:	b	4230 <lzma_filters_copy@@XZ_5.0+0x178>

000000000000a970 <lzma_raw_decoder@@XZ_5.0>:
    a970:	stp	x29, x30, [sp, #-48]!
    a974:	str	x21, [sp, #16]
    a978:	stp	x20, x19, [sp, #32]
    a97c:	mov	x29, sp
    a980:	mov	x21, x1
    a984:	mov	x19, x0
    a988:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    a98c:	mov	w20, w0
    a990:	cbnz	w0, a9d0 <lzma_raw_decoder@@XZ_5.0+0x60>
    a994:	ldp	x1, x0, [x19, #48]
    a998:	adrp	x3, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    a99c:	add	x3, x3, #0x8d0
    a9a0:	mov	x2, x21
    a9a4:	mov	w4, wzr
    a9a8:	bl	4230 <lzma_filters_copy@@XZ_5.0+0x178>
    a9ac:	mov	w20, w0
    a9b0:	cbz	w0, a9c0 <lzma_raw_decoder@@XZ_5.0+0x50>
    a9b4:	mov	x0, x19
    a9b8:	bl	32c0 <lzma_end@plt>
    a9bc:	b	a9d0 <lzma_raw_decoder@@XZ_5.0+0x60>
    a9c0:	ldr	x8, [x19, #56]
    a9c4:	mov	w9, #0x1                   	// #1
    a9c8:	strb	w9, [x8, #88]
    a9cc:	strb	w9, [x8, #91]
    a9d0:	mov	w0, w20
    a9d4:	ldp	x20, x19, [sp, #32]
    a9d8:	ldr	x21, [sp, #16]
    a9dc:	ldp	x29, x30, [sp], #48
    a9e0:	ret

000000000000a9e4 <lzma_raw_decoder_memusage@@XZ_5.0>:
    a9e4:	adrp	x8, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    a9e8:	add	x8, x8, #0x8d0
    a9ec:	mov	x1, x0
    a9f0:	mov	x0, x8
    a9f4:	b	440c <lzma_filters_copy@@XZ_5.0+0x354>

000000000000a9f8 <lzma_properties_decode@@XZ_5.0>:
    a9f8:	mov	x8, x0
    a9fc:	str	xzr, [x0, #8]!
    aa00:	ldr	x8, [x8]
    aa04:	sub	x9, x8, #0x3
    aa08:	cmp	x9, #0x1e
    aa0c:	b.hi	aa30 <lzma_properties_decode@@XZ_5.0+0x38>  // b.pmore
    aa10:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    aa14:	add	x8, x8, #0x93b
    aa18:	adr	x10, aa28 <lzma_properties_decode@@XZ_5.0+0x30>
    aa1c:	ldrb	w11, [x8, x9]
    aa20:	add	x10, x10, x11, lsl #2
    aa24:	br	x10
    aa28:	mov	w8, #0x8                   	// #8
    aa2c:	b	aa80 <lzma_properties_decode@@XZ_5.0+0x88>
    aa30:	mov	x9, #0x1                   	// #1
    aa34:	movk	x9, #0x4000, lsl #48
    aa38:	cmp	x8, x9
    aa3c:	mov	x8, xzr
    aa40:	b.eq	aa80 <lzma_properties_decode@@XZ_5.0+0x88>  // b.none
    aa44:	mov	w0, #0x8                   	// #8
    aa48:	ret
    aa4c:	mov	w8, #0x2                   	// #2
    aa50:	b	aa80 <lzma_properties_decode@@XZ_5.0+0x88>
    aa54:	mov	w8, #0x3                   	// #3
    aa58:	b	aa80 <lzma_properties_decode@@XZ_5.0+0x88>
    aa5c:	mov	w8, #0x4                   	// #4
    aa60:	b	aa80 <lzma_properties_decode@@XZ_5.0+0x88>
    aa64:	mov	w8, #0x5                   	// #5
    aa68:	b	aa80 <lzma_properties_decode@@XZ_5.0+0x88>
    aa6c:	mov	w8, #0x6                   	// #6
    aa70:	b	aa80 <lzma_properties_decode@@XZ_5.0+0x88>
    aa74:	mov	w8, #0x7                   	// #7
    aa78:	b	aa80 <lzma_properties_decode@@XZ_5.0+0x88>
    aa7c:	mov	w8, #0x1                   	// #1
    aa80:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    aa84:	add	x9, x9, #0xbf8
    aa88:	add	x8, x9, x8, lsl #5
    aa8c:	ldr	x4, [x8, #24]
    aa90:	br	x4

000000000000aa94 <lzma_filter_flags_decode@@XZ_5.0>:
    aa94:	stp	x29, x30, [sp, #-64]!
    aa98:	stp	x20, x19, [sp, #48]
    aa9c:	mov	x20, x1
    aaa0:	mov	x1, xzr
    aaa4:	str	x23, [sp, #16]
    aaa8:	stp	x22, x21, [sp, #32]
    aaac:	mov	x29, sp
    aab0:	mov	x23, x4
    aab4:	mov	x19, x3
    aab8:	mov	x22, x2
    aabc:	mov	x21, x0
    aac0:	str	xzr, [x0, #8]
    aac4:	bl	3340 <lzma_vli_decode@plt>
    aac8:	cbnz	w0, ab30 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    aacc:	ldr	x8, [x21]
    aad0:	lsr	x8, x8, #62
    aad4:	cbz	x8, aae0 <lzma_filter_flags_decode@@XZ_5.0+0x4c>
    aad8:	mov	w0, #0x9                   	// #9
    aadc:	b	ab30 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    aae0:	add	x0, x29, #0x18
    aae4:	mov	x1, xzr
    aae8:	mov	x2, x22
    aaec:	mov	x3, x19
    aaf0:	mov	x4, x23
    aaf4:	bl	3340 <lzma_vli_decode@plt>
    aaf8:	cbnz	w0, ab30 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    aafc:	ldr	x8, [x19]
    ab00:	ldr	x3, [x29, #24]
    ab04:	sub	x9, x23, x8
    ab08:	cmp	x9, x3
    ab0c:	b.cc	aad8 <lzma_filter_flags_decode@@XZ_5.0+0x44>  // b.lo, b.ul, b.last
    ab10:	add	x2, x22, x8
    ab14:	mov	x0, x21
    ab18:	mov	x1, x20
    ab1c:	bl	31e0 <lzma_properties_decode@plt>
    ab20:	ldr	x8, [x29, #24]
    ab24:	ldr	x9, [x19]
    ab28:	add	x8, x9, x8
    ab2c:	str	x8, [x19]
    ab30:	ldp	x20, x19, [sp, #48]
    ab34:	ldp	x22, x21, [sp, #32]
    ab38:	ldr	x23, [sp, #16]
    ab3c:	ldp	x29, x30, [sp], #64
    ab40:	ret

000000000000ab44 <lzma_index_decoder@@XZ_5.0>:
    ab44:	stp	x29, x30, [sp, #-48]!
    ab48:	stp	x22, x21, [sp, #16]
    ab4c:	stp	x20, x19, [sp, #32]
    ab50:	mov	x29, sp
    ab54:	mov	x21, x2
    ab58:	mov	x22, x1
    ab5c:	mov	x19, x0
    ab60:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    ab64:	mov	w20, w0
    ab68:	cbnz	w0, aba0 <lzma_index_decoder@@XZ_5.0+0x5c>
    ab6c:	ldp	x1, x0, [x19, #48]
    ab70:	mov	x2, x22
    ab74:	mov	x3, x21
    ab78:	bl	abb4 <lzma_index_decoder@@XZ_5.0+0x70>
    ab7c:	mov	w20, w0
    ab80:	cbz	w0, ab90 <lzma_index_decoder@@XZ_5.0+0x4c>
    ab84:	mov	x0, x19
    ab88:	bl	32c0 <lzma_end@plt>
    ab8c:	b	aba0 <lzma_index_decoder@@XZ_5.0+0x5c>
    ab90:	ldr	x8, [x19, #56]
    ab94:	mov	w9, #0x1                   	// #1
    ab98:	strb	w9, [x8, #88]
    ab9c:	strb	w9, [x8, #91]
    aba0:	mov	w0, w20
    aba4:	ldp	x20, x19, [sp, #32]
    aba8:	ldp	x22, x21, [sp, #16]
    abac:	ldp	x29, x30, [sp], #48
    abb0:	ret
    abb4:	stp	x29, x30, [sp, #-64]!
    abb8:	stp	x22, x21, [sp, #32]
    abbc:	stp	x20, x19, [sp, #48]
    abc0:	ldr	x8, [x0, #16]
    abc4:	adrp	x22, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    abc8:	add	x22, x22, #0xbb4
    abcc:	str	x23, [sp, #16]
    abd0:	mov	x19, x3
    abd4:	mov	x20, x2
    abd8:	mov	x23, x0
    abdc:	cmp	x8, x22
    abe0:	mov	x21, x1
    abe4:	mov	x29, sp
    abe8:	b.eq	abf8 <lzma_index_decoder@@XZ_5.0+0xb4>  // b.none
    abec:	mov	x0, x23
    abf0:	mov	x1, x21
    abf4:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    abf8:	str	x22, [x23, #16]
    abfc:	cbz	x20, ac18 <lzma_index_decoder@@XZ_5.0+0xd4>
    ac00:	ldr	x22, [x23]
    ac04:	cbz	x22, ac20 <lzma_index_decoder@@XZ_5.0+0xdc>
    ac08:	ldr	x0, [x22, #16]
    ac0c:	mov	x1, x21
    ac10:	bl	3360 <lzma_index_end@plt>
    ac14:	b	ac5c <lzma_index_decoder@@XZ_5.0+0x118>
    ac18:	mov	w0, #0xb                   	// #11
    ac1c:	b	ac9c <lzma_index_decoder@@XZ_5.0+0x158>
    ac20:	mov	w0, #0x48                  	// #72
    ac24:	mov	x1, x21
    ac28:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    ac2c:	cbz	x0, ac98 <lzma_index_decoder@@XZ_5.0+0x154>
    ac30:	adrp	x8, a000 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    ac34:	adrp	x9, b000 <lzma_index_buffer_decode@@XZ_5.0+0x350>
    ac38:	adrp	x10, b000 <lzma_index_buffer_decode@@XZ_5.0+0x350>
    ac3c:	add	x8, x8, #0xddc
    ac40:	add	x9, x9, #0xa4
    ac44:	add	x10, x10, #0xd4
    ac48:	mov	x22, x0
    ac4c:	str	x0, [x23]
    ac50:	stp	x8, x9, [x23, #24]
    ac54:	str	x10, [x23, #56]
    ac58:	str	xzr, [x0, #16]
    ac5c:	mov	x0, x21
    ac60:	str	x20, [x22, #24]
    ac64:	str	xzr, [x20]
    ac68:	bl	3330 <lzma_index_init@plt>
    ac6c:	str	x0, [x22, #16]
    ac70:	cbz	x0, ac98 <lzma_index_decoder@@XZ_5.0+0x154>
    ac74:	cmp	x19, #0x0
    ac78:	mov	w0, wzr
    ac7c:	csinc	x8, x19, xzr, ne  // ne = any
    ac80:	str	wzr, [x22]
    ac84:	str	xzr, [x22, #32]
    ac88:	str	xzr, [x22, #56]
    ac8c:	str	x8, [x22, #8]
    ac90:	str	wzr, [x22, #64]
    ac94:	b	ac9c <lzma_index_decoder@@XZ_5.0+0x158>
    ac98:	mov	w0, #0x5                   	// #5
    ac9c:	ldp	x20, x19, [sp, #48]
    aca0:	ldp	x22, x21, [sp, #32]
    aca4:	ldr	x23, [sp, #16]
    aca8:	ldp	x29, x30, [sp], #64
    acac:	ret

000000000000acb0 <lzma_index_buffer_decode@@XZ_5.0>:
    acb0:	sub	sp, sp, #0x90
    acb4:	mov	x8, x0
    acb8:	mov	w0, #0xb                   	// #11
    acbc:	stp	x29, x30, [sp, #80]
    acc0:	stp	x24, x23, [sp, #96]
    acc4:	stp	x22, x21, [sp, #112]
    acc8:	stp	x20, x19, [sp, #128]
    accc:	add	x29, sp, #0x50
    acd0:	cbz	x8, adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    acd4:	mov	x19, x1
    acd8:	cbz	x1, adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    acdc:	mov	x23, x3
    ace0:	cbz	x3, adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    ace4:	mov	x20, x4
    ace8:	cbz	x4, adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    acec:	ldr	x9, [x20]
    acf0:	mov	x22, x5
    acf4:	cmp	x9, x5
    acf8:	b.ls	ad04 <lzma_index_buffer_decode@@XZ_5.0+0x54>  // b.plast
    acfc:	mov	w0, #0xb                   	// #11
    ad00:	b	adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    ad04:	ldr	x24, [x19]
    ad08:	mov	x0, x2
    ad0c:	mov	x21, x2
    ad10:	str	x8, [sp, #32]
    ad14:	str	xzr, [x8]
    ad18:	bl	3330 <lzma_index_init@plt>
    ad1c:	str	x0, [sp, #24]
    ad20:	cbz	x0, adb0 <lzma_index_buffer_decode@@XZ_5.0+0x100>
    ad24:	cmp	x24, #0x0
    ad28:	csinc	x8, x24, xzr, ne  // ne = any
    ad2c:	str	wzr, [sp, #8]
    ad30:	str	xzr, [sp, #64]
    ad34:	str	x8, [sp, #16]
    ad38:	str	xzr, [sp, #40]
    ad3c:	str	wzr, [sp, #72]
    ad40:	ldr	x24, [x20]
    ad44:	add	x0, sp, #0x8
    ad48:	mov	x1, x21
    ad4c:	mov	x2, x23
    ad50:	mov	x3, x20
    ad54:	mov	x4, x22
    ad58:	mov	x5, xzr
    ad5c:	mov	x6, xzr
    ad60:	mov	x7, xzr
    ad64:	str	wzr, [sp]
    ad68:	bl	addc <lzma_index_buffer_decode@@XZ_5.0+0x12c>
    ad6c:	mov	w22, w0
    ad70:	cmp	w0, #0x1
    ad74:	mov	w0, wzr
    ad78:	b.eq	adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>  // b.none
    ad7c:	ldr	x0, [sp, #24]
    ad80:	mov	x1, x21
    ad84:	bl	3360 <lzma_index_end@plt>
    ad88:	str	x24, [x20]
    ad8c:	cbz	w22, adb8 <lzma_index_buffer_decode@@XZ_5.0+0x108>
    ad90:	cmp	w22, #0x6
    ad94:	b.ne	adc0 <lzma_index_buffer_decode@@XZ_5.0+0x110>  // b.any
    ad98:	ldr	x1, [sp, #40]
    ad9c:	mov	w0, #0x1                   	// #1
    ada0:	bl	3120 <lzma_index_memusage@plt>
    ada4:	str	x0, [x19]
    ada8:	mov	w0, #0x6                   	// #6
    adac:	b	adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    adb0:	mov	w0, #0x5                   	// #5
    adb4:	b	adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    adb8:	mov	w0, #0x9                   	// #9
    adbc:	b	adc4 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    adc0:	mov	w0, w22
    adc4:	ldp	x20, x19, [sp, #128]
    adc8:	ldp	x22, x21, [sp, #112]
    adcc:	ldp	x24, x23, [sp, #96]
    add0:	ldp	x29, x30, [sp, #80]
    add4:	add	sp, sp, #0x90
    add8:	ret
    addc:	sub	sp, sp, #0x70
    ade0:	stp	x28, x27, [sp, #32]
    ade4:	ldr	x27, [x3]
    ade8:	stp	x20, x19, [sp, #96]
    adec:	mov	x20, x2
    adf0:	mov	x19, x0
    adf4:	cmp	x27, x4
    adf8:	stp	x29, x30, [sp, #16]
    adfc:	stp	x26, x25, [sp, #48]
    ae00:	stp	x24, x23, [sp, #64]
    ae04:	stp	x22, x21, [sp, #80]
    ae08:	add	x29, sp, #0x10
    ae0c:	str	x1, [sp]
    ae10:	b.cs	afb8 <lzma_index_buffer_decode@@XZ_5.0+0x308>  // b.hs, b.nlast
    ae14:	add	x8, x19, #0x30
    ae18:	str	x8, [sp, #8]
    ae1c:	mov	x25, x19
    ae20:	ldr	w8, [x25], #32
    ae24:	adrp	x24, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    ae28:	mov	x22, x4
    ae2c:	mov	x21, x3
    ae30:	add	x23, x19, #0x38
    ae34:	add	x28, x19, #0x28
    ae38:	add	x24, x24, #0x95a
    ae3c:	mov	x26, x27
    ae40:	b	ae60 <lzma_index_buffer_decode@@XZ_5.0+0x1b0>
    ae44:	mov	w8, #0x3                   	// #3
    ae48:	mov	w9, #0x5                   	// #5
    ae4c:	csel	w8, w9, w8, eq  // eq = none
    ae50:	str	w8, [x19]
    ae54:	ldr	x26, [x21]
    ae58:	cmp	x26, x22
    ae5c:	b.cs	afc4 <lzma_index_buffer_decode@@XZ_5.0+0x314>  // b.hs, b.nlast
    ae60:	cmp	w8, #0x7
    ae64:	b.hi	afcc <lzma_index_buffer_decode@@XZ_5.0+0x31c>  // b.pmore
    ae68:	mov	w9, w8
    ae6c:	adr	x10, ae7c <lzma_index_buffer_decode@@XZ_5.0+0x1cc>
    ae70:	ldrb	w11, [x24, x9]
    ae74:	add	x10, x10, x11, lsl #2
    ae78:	br	x10
    ae7c:	cmp	w8, #0x3
    ae80:	ldr	x8, [sp, #8]
    ae84:	mov	x1, x23
    ae88:	mov	x2, x20
    ae8c:	mov	x3, x21
    ae90:	csel	x0, x28, x8, eq  // eq = none
    ae94:	mov	x4, x22
    ae98:	bl	3340 <lzma_vli_decode@plt>
    ae9c:	cmp	w0, #0x1
    aea0:	b.ne	afd4 <lzma_index_buffer_decode@@XZ_5.0+0x324>  // b.any
    aea4:	ldr	w8, [x19]
    aea8:	str	xzr, [x19, #56]
    aeac:	cmp	w8, #0x3
    aeb0:	b.ne	af94 <lzma_index_buffer_decode@@XZ_5.0+0x2e4>  // b.any
    aeb4:	ldr	x8, [x28]
    aeb8:	mov	x9, #0xfffffffffffffff7    	// #-9
    aebc:	movk	x9, #0x7fff, lsl #48
    aec0:	sub	x8, x8, #0x5
    aec4:	cmp	x8, x9
    aec8:	b.hi	b08c <lzma_index_buffer_decode@@XZ_5.0+0x3dc>  // b.pmore
    aecc:	mov	w8, #0x4                   	// #4
    aed0:	b	ae50 <lzma_index_buffer_decode@@XZ_5.0+0x1a0>
    aed4:	ldrb	w8, [x20, x26]
    aed8:	add	x9, x26, #0x1
    aedc:	str	x9, [x21]
    aee0:	cbnz	w8, b08c <lzma_index_buffer_decode@@XZ_5.0+0x3dc>
    aee4:	mov	w8, #0x1                   	// #1
    aee8:	b	ae50 <lzma_index_buffer_decode@@XZ_5.0+0x1a0>
    aeec:	mov	x0, x25
    aef0:	mov	x1, x23
    aef4:	mov	x2, x20
    aef8:	mov	x3, x21
    aefc:	mov	x4, x22
    af00:	bl	3340 <lzma_vli_decode@plt>
    af04:	cmp	w0, #0x1
    af08:	b.ne	afd4 <lzma_index_buffer_decode@@XZ_5.0+0x324>  // b.any
    af0c:	mov	w8, #0x2                   	// #2
    af10:	str	xzr, [x19, #56]
    af14:	str	w8, [x19]
    af18:	ldr	x1, [x19, #32]
    af1c:	mov	w0, #0x1                   	// #1
    af20:	bl	3120 <lzma_index_memusage@plt>
    af24:	ldr	x8, [x19, #8]
    af28:	cmp	x0, x8
    af2c:	b.hi	afdc <lzma_index_buffer_decode@@XZ_5.0+0x32c>  // b.pmore
    af30:	ldr	x0, [x19, #16]
    af34:	ldr	x1, [x19, #32]
    af38:	bl	46ec <lzma_index_end@@XZ_5.0+0x88>
    af3c:	ldr	x8, [x19, #32]
    af40:	cmp	x8, #0x0
    af44:	b	ae44 <lzma_index_buffer_decode@@XZ_5.0+0x194>
    af48:	ldr	x0, [x19, #16]
    af4c:	bl	48f4 <lzma_index_checks@@XZ_5.0+0x28>
    af50:	mov	w8, w0
    af54:	mov	w9, #0x6                   	// #6
    af58:	str	x8, [x19, #56]
    af5c:	str	w9, [x19]
    af60:	cbnz	x8, af70 <lzma_index_buffer_decode@@XZ_5.0+0x2c0>
    af64:	b	b01c <lzma_index_buffer_decode@@XZ_5.0+0x36c>
    af68:	ldr	x8, [x23]
    af6c:	cbz	x8, b01c <lzma_index_buffer_decode@@XZ_5.0+0x36c>
    af70:	sub	x8, x8, #0x1
    af74:	str	x8, [x23]
    af78:	ldr	x8, [x21]
    af7c:	ldrb	w9, [x20, x8]
    af80:	add	x8, x8, #0x1
    af84:	str	x8, [x21]
    af88:	cbnz	w9, b08c <lzma_index_buffer_decode@@XZ_5.0+0x3dc>
    af8c:	mov	w8, #0x6                   	// #6
    af90:	b	ae54 <lzma_index_buffer_decode@@XZ_5.0+0x1a4>
    af94:	ldr	x0, [x19, #16]
    af98:	ldp	x2, x3, [x19, #40]
    af9c:	ldr	x1, [sp]
    afa0:	bl	32a0 <lzma_index_append@plt>
    afa4:	cbnz	w0, b09c <lzma_index_buffer_decode@@XZ_5.0+0x3ec>
    afa8:	ldr	x8, [x25]
    afac:	subs	x8, x8, #0x1
    afb0:	str	x8, [x25]
    afb4:	b	ae44 <lzma_index_buffer_decode@@XZ_5.0+0x194>
    afb8:	mov	w26, wzr
    afbc:	mov	x8, x27
    afc0:	b	afe4 <lzma_index_buffer_decode@@XZ_5.0+0x334>
    afc4:	mov	w26, wzr
    afc8:	b	afe0 <lzma_index_buffer_decode@@XZ_5.0+0x330>
    afcc:	mov	w26, #0xb                   	// #11
    afd0:	b	aff8 <lzma_index_buffer_decode@@XZ_5.0+0x348>
    afd4:	mov	w26, w0
    afd8:	b	afe0 <lzma_index_buffer_decode@@XZ_5.0+0x330>
    afdc:	mov	w26, #0x6                   	// #6
    afe0:	ldr	x8, [x21]
    afe4:	ldr	w2, [x19, #64]
    afe8:	add	x0, x20, x27
    afec:	sub	x1, x8, x27
    aff0:	bl	3160 <lzma_crc32@plt>
    aff4:	str	w0, [x19, #64]
    aff8:	mov	w0, w26
    affc:	ldp	x20, x19, [sp, #96]
    b000:	ldp	x22, x21, [sp, #80]
    b004:	ldp	x24, x23, [sp, #64]
    b008:	ldp	x26, x25, [sp, #48]
    b00c:	ldp	x28, x27, [sp, #32]
    b010:	ldp	x29, x30, [sp, #16]
    b014:	add	sp, sp, #0x70
    b018:	ret
    b01c:	ldr	x26, [x21]
    b020:	ldr	w2, [x19, #64]
    b024:	add	x0, x20, x27
    b028:	sub	x1, x26, x27
    b02c:	bl	3160 <lzma_crc32@plt>
    b030:	mov	w8, #0x7                   	// #7
    b034:	str	w0, [x19, #64]
    b038:	str	w8, [x19]
    b03c:	cmp	x22, x26
    b040:	b.eq	b094 <lzma_index_buffer_decode@@XZ_5.0+0x3e4>  // b.none
    b044:	ldr	x8, [x19, #56]
    b048:	ldr	w9, [x19, #64]
    b04c:	ldrb	w10, [x20, x26]
    b050:	add	x26, x26, #0x1
    b054:	lsl	w11, w8, #3
    b058:	lsr	w9, w9, w11
    b05c:	cmp	w10, w9, uxtb
    b060:	str	x26, [x21]
    b064:	b.ne	b08c <lzma_index_buffer_decode@@XZ_5.0+0x3dc>  // b.any
    b068:	add	x8, x8, #0x1
    b06c:	cmp	x8, #0x4
    b070:	str	x8, [x23]
    b074:	b.cc	b03c <lzma_index_buffer_decode@@XZ_5.0+0x38c>  // b.lo, b.ul, b.last
    b078:	ldp	x8, x9, [x19, #16]
    b07c:	mov	w26, #0x1                   	// #1
    b080:	str	x8, [x9]
    b084:	str	xzr, [x19, #16]
    b088:	b	aff8 <lzma_index_buffer_decode@@XZ_5.0+0x348>
    b08c:	mov	w26, #0x9                   	// #9
    b090:	b	aff8 <lzma_index_buffer_decode@@XZ_5.0+0x348>
    b094:	mov	w26, wzr
    b098:	b	aff8 <lzma_index_buffer_decode@@XZ_5.0+0x348>
    b09c:	mov	w26, w0
    b0a0:	b	aff8 <lzma_index_buffer_decode@@XZ_5.0+0x348>
    b0a4:	stp	x29, x30, [sp, #-32]!
    b0a8:	stp	x20, x19, [sp, #16]
    b0ac:	mov	x19, x0
    b0b0:	ldr	x0, [x0, #16]
    b0b4:	mov	x29, sp
    b0b8:	mov	x20, x1
    b0bc:	bl	3360 <lzma_index_end@plt>
    b0c0:	mov	x0, x19
    b0c4:	mov	x1, x20
    b0c8:	ldp	x20, x19, [sp, #16]
    b0cc:	ldp	x29, x30, [sp], #32
    b0d0:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    b0d4:	stp	x29, x30, [sp, #-48]!
    b0d8:	stp	x22, x21, [sp, #16]
    b0dc:	stp	x20, x19, [sp, #32]
    b0e0:	ldr	x8, [x0, #32]
    b0e4:	mov	x20, x0
    b0e8:	mov	x21, x1
    b0ec:	mov	w0, #0x1                   	// #1
    b0f0:	mov	x1, x8
    b0f4:	mov	x29, sp
    b0f8:	mov	x19, x3
    b0fc:	mov	x22, x2
    b100:	bl	3120 <lzma_index_memusage@plt>
    b104:	str	x0, [x21]
    b108:	ldr	x8, [x20, #8]
    b10c:	str	x8, [x22]
    b110:	cbz	x19, b128 <lzma_index_buffer_decode@@XZ_5.0+0x478>
    b114:	ldr	x8, [x21]
    b118:	cmp	x8, x19
    b11c:	b.ls	b130 <lzma_index_buffer_decode@@XZ_5.0+0x480>  // b.plast
    b120:	mov	w0, #0x6                   	// #6
    b124:	b	b138 <lzma_index_buffer_decode@@XZ_5.0+0x488>
    b128:	mov	w0, wzr
    b12c:	b	b138 <lzma_index_buffer_decode@@XZ_5.0+0x488>
    b130:	mov	w0, wzr
    b134:	str	x19, [x20, #8]
    b138:	ldp	x20, x19, [sp, #32]
    b13c:	ldp	x22, x21, [sp, #16]
    b140:	ldp	x29, x30, [sp], #48
    b144:	ret

000000000000b148 <lzma_index_hash_init@@XZ_5.0>:
    b148:	stp	x29, x30, [sp, #-32]!
    b14c:	str	x19, [sp, #16]
    b150:	mov	x19, x0
    b154:	mov	x29, sp
    b158:	cbnz	x0, b16c <lzma_index_hash_init@@XZ_5.0+0x24>
    b15c:	mov	w0, #0x140                 	// #320
    b160:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    b164:	mov	x19, x0
    b168:	cbz	x0, b1a4 <lzma_index_hash_init@@XZ_5.0+0x5c>
    b16c:	add	x0, x19, #0x28
    b170:	movi	v0.2d, #0x0
    b174:	mov	w1, #0xa                   	// #10
    b178:	str	wzr, [x19]
    b17c:	stp	xzr, xzr, [x19, #296]
    b180:	str	xzr, [x19, #288]
    b184:	stur	q0, [x19, #8]
    b188:	stur	q0, [x19, #24]
    b18c:	stp	q0, q0, [x19, #144]
    b190:	str	wzr, [x19, #312]
    b194:	bl	c1a8 <lzma_check_size@@XZ_5.0+0x20>
    b198:	add	x0, x19, #0xb0
    b19c:	mov	w1, #0xa                   	// #10
    b1a0:	bl	c1a8 <lzma_check_size@@XZ_5.0+0x20>
    b1a4:	mov	x0, x19
    b1a8:	ldr	x19, [sp, #16]
    b1ac:	ldp	x29, x30, [sp], #32
    b1b0:	ret

000000000000b1b4 <lzma_index_hash_end@@XZ_5.0>:
    b1b4:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>

000000000000b1b8 <lzma_index_hash_size@@XZ_5.0>:
    b1b8:	stp	x29, x30, [sp, #-32]!
    b1bc:	str	x19, [sp, #16]
    b1c0:	ldp	x8, x19, [x0, #24]
    b1c4:	mov	x29, sp
    b1c8:	mov	x0, x8
    b1cc:	bl	3400 <lzma_vli_size@plt>
    b1d0:	add	w8, w0, #0x1
    b1d4:	add	x8, x19, x8
    b1d8:	ldr	x19, [sp, #16]
    b1dc:	add	x8, x8, #0x7
    b1e0:	and	x0, x8, #0xfffffffffffffffc
    b1e4:	ldp	x29, x30, [sp], #32
    b1e8:	ret

000000000000b1ec <lzma_index_hash_append@@XZ_5.0>:
    b1ec:	sub	sp, sp, #0x40
    b1f0:	stp	x20, x19, [sp, #48]
    b1f4:	mov	x19, x0
    b1f8:	mov	w0, #0xb                   	// #11
    b1fc:	stp	x29, x30, [sp, #16]
    b200:	stp	x22, x21, [sp, #32]
    b204:	add	x29, sp, #0x10
    b208:	tbnz	x2, #63, b2d8 <lzma_index_hash_append@@XZ_5.0+0xec>
    b20c:	mov	x9, #0xfffffffffffffff7    	// #-9
    b210:	sub	x8, x1, #0x5
    b214:	movk	x9, #0x7fff, lsl #48
    b218:	mov	x21, x1
    b21c:	cmp	x8, x9
    b220:	b.hi	b2d8 <lzma_index_hash_append@@XZ_5.0+0xec>  // b.pmore
    b224:	ldr	w8, [x19]
    b228:	cbnz	w8, b2d8 <lzma_index_hash_append@@XZ_5.0+0xec>
    b22c:	ldp	x8, x9, [x19, #8]
    b230:	add	x10, x21, #0x3
    b234:	and	x10, x10, #0xfffffffffffffffc
    b238:	mov	x0, x21
    b23c:	add	x8, x8, x10
    b240:	add	x9, x9, x2
    b244:	mov	x20, x2
    b248:	stp	x8, x9, [x19, #8]
    b24c:	bl	3400 <lzma_vli_size@plt>
    b250:	mov	w22, w0
    b254:	mov	x0, x20
    b258:	bl	3400 <lzma_vli_size@plt>
    b25c:	ldp	x9, x8, [x19, #24]
    b260:	add	w10, w0, w22
    b264:	add	x0, x19, #0x28
    b268:	mov	x2, sp
    b26c:	add	x8, x8, x10
    b270:	add	x9, x9, #0x1
    b274:	mov	w1, #0xa                   	// #10
    b278:	mov	w3, #0x10                  	// #16
    b27c:	stp	x9, x8, [x19, #24]
    b280:	stp	x21, x20, [sp]
    b284:	bl	c1d4 <lzma_check_size@@XZ_5.0+0x4c>
    b288:	ldr	x20, [x19, #8]
    b28c:	tbnz	x20, #63, b2d4 <lzma_index_hash_append@@XZ_5.0+0xe8>
    b290:	ldr	x8, [x19, #16]
    b294:	tbnz	x8, #63, b2d4 <lzma_index_hash_append@@XZ_5.0+0xe8>
    b298:	ldp	x0, x19, [x19, #24]
    b29c:	bl	3400 <lzma_vli_size@plt>
    b2a0:	add	w8, w0, #0x1
    b2a4:	add	x8, x19, x8
    b2a8:	add	x8, x8, #0x7
    b2ac:	and	x8, x8, #0xfffffffffffffffc
    b2b0:	mov	x9, #0x400000000           	// #17179869184
    b2b4:	cmp	x8, x9
    b2b8:	mov	w0, #0x9                   	// #9
    b2bc:	b.hi	b2d8 <lzma_index_hash_append@@XZ_5.0+0xec>  // b.pmore
    b2c0:	add	x8, x20, x8
    b2c4:	add	x8, x8, #0x18
    b2c8:	asr	x8, x8, #63
    b2cc:	and	w0, w8, w0
    b2d0:	b	b2d8 <lzma_index_hash_append@@XZ_5.0+0xec>
    b2d4:	mov	w0, #0x9                   	// #9
    b2d8:	ldp	x20, x19, [sp, #48]
    b2dc:	ldp	x22, x21, [sp, #32]
    b2e0:	ldp	x29, x30, [sp, #16]
    b2e4:	add	sp, sp, #0x40
    b2e8:	ret

000000000000b2ec <lzma_index_hash_decode@@XZ_5.0>:
    b2ec:	sub	sp, sp, #0x90
    b2f0:	stp	x29, x30, [sp, #48]
    b2f4:	stp	x28, x27, [sp, #64]
    b2f8:	stp	x26, x25, [sp, #80]
    b2fc:	stp	x24, x23, [sp, #96]
    b300:	stp	x22, x21, [sp, #112]
    b304:	stp	x20, x19, [sp, #128]
    b308:	ldr	x27, [x2]
    b30c:	add	x29, sp, #0x30
    b310:	cmp	x27, x3
    b314:	b.cs	b564 <lzma_index_hash_decode@@XZ_5.0+0x278>  // b.hs, b.nlast
    b318:	add	x8, x0, #0x118
    b31c:	mov	x9, x0
    b320:	str	x8, [sp, #24]
    b324:	ldr	w8, [x9], #176
    b328:	adrp	x25, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    b32c:	mov	x21, x3
    b330:	mov	x20, x2
    b334:	mov	x19, x1
    b338:	mov	x22, x0
    b33c:	add	x23, x0, #0x130
    b340:	add	x28, x0, #0x120
    b344:	add	x24, x0, #0x128
    b348:	add	x25, x25, #0x962
    b34c:	stp	x3, x9, [sp, #8]
    b350:	str	x27, [sp]
    b354:	b	b37c <lzma_index_hash_decode@@XZ_5.0+0x90>
    b358:	add	x8, x27, #0x1
    b35c:	str	x8, [x20]
    b360:	ldrb	w8, [x19, x27]
    b364:	cbnz	w8, b60c <lzma_index_hash_decode@@XZ_5.0+0x320>
    b368:	mov	w8, #0x1                   	// #1
    b36c:	str	w8, [x22]
    b370:	ldr	x27, [x20]
    b374:	cmp	x27, x21
    b378:	b.cs	b56c <lzma_index_hash_decode@@XZ_5.0+0x280>  // b.hs, b.nlast
    b37c:	cmp	w8, #0x6
    b380:	b.hi	b574 <lzma_index_hash_decode@@XZ_5.0+0x288>  // b.pmore
    b384:	mov	w9, w8
    b388:	adr	x10, b358 <lzma_index_hash_decode@@XZ_5.0+0x6c>
    b38c:	ldrb	w11, [x25, x9]
    b390:	add	x10, x10, x11, lsl #2
    b394:	br	x10
    b398:	cmp	w8, #0x2
    b39c:	csel	x0, x28, x24, eq  // eq = none
    b3a0:	mov	x1, x23
    b3a4:	mov	x2, x19
    b3a8:	mov	x3, x20
    b3ac:	mov	x4, x21
    b3b0:	bl	3340 <lzma_vli_decode@plt>
    b3b4:	cmp	w0, #0x1
    b3b8:	b.ne	b57c <lzma_index_hash_decode@@XZ_5.0+0x290>  // b.any
    b3bc:	ldr	w8, [x22]
    b3c0:	ldr	x26, [x22, #288]
    b3c4:	str	xzr, [x22, #304]
    b3c8:	cmp	w8, #0x2
    b3cc:	b.ne	b48c <lzma_index_hash_decode@@XZ_5.0+0x1a0>  // b.any
    b3d0:	mov	x9, #0xfffffffffffffff7    	// #-9
    b3d4:	sub	x8, x26, #0x5
    b3d8:	movk	x9, #0x7fff, lsl #48
    b3dc:	cmp	x8, x9
    b3e0:	b.hi	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.pmore
    b3e4:	mov	w8, #0x3                   	// #3
    b3e8:	b	b36c <lzma_index_hash_decode@@XZ_5.0+0x80>
    b3ec:	ldr	x0, [sp, #24]
    b3f0:	mov	x1, x23
    b3f4:	mov	x2, x19
    b3f8:	mov	x3, x20
    b3fc:	mov	x4, x21
    b400:	bl	3340 <lzma_vli_decode@plt>
    b404:	cmp	w0, #0x1
    b408:	b.ne	b57c <lzma_index_hash_decode@@XZ_5.0+0x290>  // b.any
    b40c:	ldr	x8, [x22, #280]
    b410:	ldr	x9, [x22, #24]
    b414:	cmp	x8, x9
    b418:	b.ne	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.any
    b41c:	cmp	x8, #0x0
    b420:	mov	w8, #0x2                   	// #2
    b424:	mov	w9, #0x4                   	// #4
    b428:	str	xzr, [x23]
    b42c:	csel	w8, w9, w8, eq  // eq = none
    b430:	b	b36c <lzma_index_hash_decode@@XZ_5.0+0x80>
    b434:	ldr	x0, [x22, #160]
    b438:	ldr	w26, [x22, #168]
    b43c:	bl	3400 <lzma_vli_size@plt>
    b440:	add	w8, w0, w26
    b444:	mvn	w8, w8
    b448:	and	x8, x8, #0x3
    b44c:	mov	w9, #0x5                   	// #5
    b450:	str	x8, [x22, #304]
    b454:	str	w9, [x22]
    b458:	cbnz	x8, b468 <lzma_index_hash_decode@@XZ_5.0+0x17c>
    b45c:	b	b5a0 <lzma_index_hash_decode@@XZ_5.0+0x2b4>
    b460:	ldr	x8, [x23]
    b464:	cbz	x8, b5a0 <lzma_index_hash_decode@@XZ_5.0+0x2b4>
    b468:	sub	x8, x8, #0x1
    b46c:	str	x8, [x23]
    b470:	ldr	x8, [x20]
    b474:	add	x9, x8, #0x1
    b478:	str	x9, [x20]
    b47c:	ldrb	w8, [x19, x8]
    b480:	cbnz	w8, b60c <lzma_index_hash_decode@@XZ_5.0+0x320>
    b484:	mov	w8, #0x5                   	// #5
    b488:	b	b370 <lzma_index_hash_decode@@XZ_5.0+0x84>
    b48c:	ldr	x27, [x22, #296]
    b490:	ldp	x8, x9, [x22, #144]
    b494:	add	x10, x26, #0x3
    b498:	and	x10, x10, #0xfffffffffffffffc
    b49c:	mov	x0, x26
    b4a0:	add	x8, x8, x10
    b4a4:	add	x9, x9, x27
    b4a8:	mov	x21, x23
    b4ac:	mov	x23, x19
    b4b0:	mov	x19, x25
    b4b4:	mov	x25, x24
    b4b8:	mov	x24, x28
    b4bc:	stp	x8, x9, [x22, #144]
    b4c0:	bl	3400 <lzma_vli_size@plt>
    b4c4:	mov	w28, w0
    b4c8:	mov	x0, x27
    b4cc:	bl	3400 <lzma_vli_size@plt>
    b4d0:	ldp	x9, x8, [x22, #160]
    b4d4:	add	w10, w0, w28
    b4d8:	sub	x2, x29, #0x10
    b4dc:	mov	w1, #0xa                   	// #10
    b4e0:	add	x8, x8, x10
    b4e4:	add	x9, x9, #0x1
    b4e8:	stp	x9, x8, [x22, #160]
    b4ec:	ldr	x0, [sp, #16]
    b4f0:	mov	w3, #0x10                  	// #16
    b4f4:	stp	x26, x27, [x29, #-16]
    b4f8:	bl	c1d4 <lzma_check_size@@XZ_5.0+0x4c>
    b4fc:	ldr	x8, [x22, #8]
    b500:	ldr	x9, [x22, #144]
    b504:	cmp	x8, x9
    b508:	b.cc	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.lo, b.ul, b.last
    b50c:	ldr	x8, [x22, #16]
    b510:	ldr	x9, [x22, #152]
    b514:	cmp	x8, x9
    b518:	b.cc	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.lo, b.ul, b.last
    b51c:	ldr	x8, [x22, #32]
    b520:	ldr	x9, [x22, #168]
    b524:	cmp	x8, x9
    b528:	b.cc	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.lo, b.ul, b.last
    b52c:	ldr	x9, [sp, #24]
    b530:	mov	x28, x24
    b534:	mov	x24, x25
    b538:	mov	x25, x19
    b53c:	ldr	x8, [x9]
    b540:	mov	x19, x23
    b544:	mov	x23, x21
    b548:	ldr	x21, [sp, #8]
    b54c:	subs	x8, x8, #0x1
    b550:	str	x8, [x9]
    b554:	mov	w8, #0x2                   	// #2
    b558:	mov	w9, #0x4                   	// #4
    b55c:	csel	w8, w9, w8, eq  // eq = none
    b560:	b	b36c <lzma_index_hash_decode@@XZ_5.0+0x80>
    b564:	mov	w26, #0xa                   	// #10
    b568:	b	b610 <lzma_index_hash_decode@@XZ_5.0+0x324>
    b56c:	mov	w26, wzr
    b570:	b	b580 <lzma_index_hash_decode@@XZ_5.0+0x294>
    b574:	mov	w26, #0xb                   	// #11
    b578:	b	b610 <lzma_index_hash_decode@@XZ_5.0+0x324>
    b57c:	mov	w26, w0
    b580:	ldr	x9, [sp]
    b584:	ldr	x8, [x20]
    b588:	ldr	w2, [x22, #312]
    b58c:	add	x0, x19, x9
    b590:	sub	x1, x8, x9
    b594:	bl	3160 <lzma_crc32@plt>
    b598:	str	w0, [x22, #312]
    b59c:	b	b610 <lzma_index_hash_decode@@XZ_5.0+0x324>
    b5a0:	ldr	x8, [x22, #8]
    b5a4:	ldr	x9, [x22, #144]
    b5a8:	cmp	x8, x9
    b5ac:	b.ne	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.any
    b5b0:	ldr	x8, [x22, #16]
    b5b4:	ldr	x9, [x22, #152]
    b5b8:	cmp	x8, x9
    b5bc:	b.ne	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.any
    b5c0:	ldr	x8, [x22, #32]
    b5c4:	ldr	x9, [x22, #168]
    b5c8:	cmp	x8, x9
    b5cc:	b.ne	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.any
    b5d0:	add	x25, x22, #0x28
    b5d4:	mov	w1, #0xa                   	// #10
    b5d8:	mov	x0, x25
    b5dc:	bl	c254 <lzma_check_size@@XZ_5.0+0xcc>
    b5e0:	ldr	x24, [sp, #16]
    b5e4:	mov	w1, #0xa                   	// #10
    b5e8:	mov	x0, x24
    b5ec:	bl	c254 <lzma_check_size@@XZ_5.0+0xcc>
    b5f0:	mov	w0, #0xa                   	// #10
    b5f4:	bl	3200 <lzma_check_size@plt>
    b5f8:	mov	w2, w0
    b5fc:	mov	x0, x25
    b600:	mov	x1, x24
    b604:	bl	3210 <bcmp@plt>
    b608:	cbz	w0, b634 <lzma_index_hash_decode@@XZ_5.0+0x348>
    b60c:	mov	w26, #0x9                   	// #9
    b610:	mov	w0, w26
    b614:	ldp	x20, x19, [sp, #128]
    b618:	ldp	x22, x21, [sp, #112]
    b61c:	ldp	x24, x23, [sp, #96]
    b620:	ldp	x26, x25, [sp, #80]
    b624:	ldp	x28, x27, [sp, #64]
    b628:	ldp	x29, x30, [sp, #48]
    b62c:	add	sp, sp, #0x90
    b630:	ret
    b634:	ldr	x27, [x20]
    b638:	ldr	x8, [sp]
    b63c:	ldr	w2, [x22, #312]
    b640:	add	x0, x19, x8
    b644:	sub	x1, x27, x8
    b648:	bl	3160 <lzma_crc32@plt>
    b64c:	mov	w8, #0x6                   	// #6
    b650:	str	w0, [x22, #312]
    b654:	str	w8, [x22]
    b658:	cmp	x27, x21
    b65c:	b.ne	b668 <lzma_index_hash_decode@@XZ_5.0+0x37c>  // b.any
    b660:	mov	w26, wzr
    b664:	b	b610 <lzma_index_hash_decode@@XZ_5.0+0x324>
    b668:	ldr	w8, [x22, #312]
    b66c:	ldr	w9, [x23]
    b670:	add	x10, x27, #0x1
    b674:	str	x10, [x20]
    b678:	ldrb	w10, [x19, x27]
    b67c:	lsl	w9, w9, #3
    b680:	lsr	w9, w8, w9
    b684:	cmp	w10, w9, uxtb
    b688:	b.ne	b60c <lzma_index_hash_decode@@XZ_5.0+0x320>  // b.any
    b68c:	ldr	x9, [x23]
    b690:	add	x9, x9, #0x1
    b694:	cmp	x9, #0x3
    b698:	str	x9, [x23]
    b69c:	b.hi	b6b4 <lzma_index_hash_decode@@XZ_5.0+0x3c8>  // b.pmore
    b6a0:	ldr	x27, [x20]
    b6a4:	mov	w26, wzr
    b6a8:	cmp	x27, x21
    b6ac:	b.ne	b66c <lzma_index_hash_decode@@XZ_5.0+0x380>  // b.any
    b6b0:	b	b610 <lzma_index_hash_decode@@XZ_5.0+0x324>
    b6b4:	mov	w26, #0x1                   	// #1
    b6b8:	b	b610 <lzma_index_hash_decode@@XZ_5.0+0x324>

000000000000b6bc <lzma_stream_buffer_decode@@XZ_5.0>:
    b6bc:	sub	sp, sp, #0xd0
    b6c0:	stp	x29, x30, [sp, #112]
    b6c4:	stp	x28, x27, [sp, #128]
    b6c8:	stp	x26, x25, [sp, #144]
    b6cc:	stp	x24, x23, [sp, #160]
    b6d0:	stp	x22, x21, [sp, #176]
    b6d4:	stp	x20, x19, [sp, #192]
    b6d8:	add	x29, sp, #0x70
    b6dc:	cbz	x4, b7c8 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>
    b6e0:	ldr	x8, [x4]
    b6e4:	mov	x23, x7
    b6e8:	mov	x24, x6
    b6ec:	mov	x20, x5
    b6f0:	mov	x21, x4
    b6f4:	mov	x25, x3
    b6f8:	mov	x19, x2
    b6fc:	mov	w3, w1
    b700:	mov	x22, x0
    b704:	cbnz	x25, b714 <lzma_stream_buffer_decode@@XZ_5.0+0x58>
    b708:	cmp	x8, x20
    b70c:	mov	x8, x20
    b710:	b.ne	b7c8 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    b714:	mov	w26, #0xb                   	// #11
    b718:	cbz	x23, b7cc <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    b71c:	cmp	x8, x20
    b720:	b.hi	b7cc <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    b724:	ldr	x27, [x29, #96]
    b728:	ldr	x8, [x23]
    b72c:	cbnz	x24, b73c <lzma_stream_buffer_decode@@XZ_5.0+0x80>
    b730:	cmp	x8, x27
    b734:	mov	x8, x27
    b738:	b.ne	b7c8 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    b73c:	mov	w26, #0xb                   	// #11
    b740:	tbnz	w3, #2, b7cc <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    b744:	cmp	x8, x27
    b748:	b.hi	b7cc <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    b74c:	movi	v0.2d, #0x0
    b750:	mov	x8, #0xffffffffffffffff    	// #-1
    b754:	str	xzr, [sp, #96]
    b758:	stp	q0, q0, [sp, #64]
    b75c:	stp	q0, q0, [sp, #32]
    b760:	str	x8, [sp, #40]
    b764:	ldr	x2, [x22]
    b768:	add	x0, sp, #0x20
    b76c:	mov	x1, x19
    b770:	bl	b848 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    b774:	mov	w26, w0
    b778:	cbnz	w0, b838 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b77c:	ldr	x8, [x23]
    b780:	ldr	x0, [sp, #32]
    b784:	ldr	x28, [x21]
    b788:	mov	w9, #0x3                   	// #3
    b78c:	str	x8, [sp, #16]
    b790:	ldr	x8, [sp, #56]
    b794:	mov	x1, x19
    b798:	mov	x2, x25
    b79c:	mov	x3, x21
    b7a0:	mov	x4, x20
    b7a4:	mov	x5, x24
    b7a8:	mov	x6, x23
    b7ac:	mov	x7, x27
    b7b0:	str	w9, [sp]
    b7b4:	blr	x8
    b7b8:	cmp	w0, #0x1
    b7bc:	b.ne	b7f0 <lzma_stream_buffer_decode@@XZ_5.0+0x134>  // b.any
    b7c0:	mov	w26, wzr
    b7c4:	b	b838 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b7c8:	mov	w26, #0xb                   	// #11
    b7cc:	mov	w0, w26
    b7d0:	ldp	x20, x19, [sp, #192]
    b7d4:	ldp	x22, x21, [sp, #176]
    b7d8:	ldp	x24, x23, [sp, #160]
    b7dc:	ldp	x26, x25, [sp, #144]
    b7e0:	ldp	x28, x27, [sp, #128]
    b7e4:	ldp	x29, x30, [sp, #112]
    b7e8:	add	sp, sp, #0xd0
    b7ec:	ret
    b7f0:	ldr	x8, [sp, #16]
    b7f4:	mov	w26, w0
    b7f8:	cmp	w0, #0x6
    b7fc:	str	x28, [x21]
    b800:	str	x8, [x23]
    b804:	b.eq	b820 <lzma_stream_buffer_decode@@XZ_5.0+0x164>  // b.none
    b808:	cbnz	w26, b838 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b80c:	ldr	x8, [x21]
    b810:	cmp	x8, x20
    b814:	mov	w8, #0x9                   	// #9
    b818:	cinc	w26, w8, ne  // ne = any
    b81c:	b	b838 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    b820:	ldr	x8, [sp, #88]
    b824:	ldr	x0, [sp, #32]
    b828:	add	x2, sp, #0x18
    b82c:	mov	x1, x22
    b830:	mov	x3, xzr
    b834:	blr	x8
    b838:	add	x0, sp, #0x20
    b83c:	mov	x1, x19
    b840:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    b844:	b	b7cc <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    b848:	stp	x29, x30, [sp, #-64]!
    b84c:	stp	x22, x21, [sp, #32]
    b850:	stp	x20, x19, [sp, #48]
    b854:	ldr	x8, [x0, #16]
    b858:	adrp	x22, b000 <lzma_index_buffer_decode@@XZ_5.0+0x350>
    b85c:	add	x22, x22, #0x848
    b860:	str	x23, [sp, #16]
    b864:	mov	w21, w3
    b868:	mov	x20, x2
    b86c:	mov	x23, x0
    b870:	cmp	x8, x22
    b874:	mov	x19, x1
    b878:	mov	x29, sp
    b87c:	b.eq	b88c <lzma_stream_buffer_decode@@XZ_5.0+0x1d0>  // b.none
    b880:	mov	x0, x23
    b884:	mov	x1, x19
    b888:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    b88c:	cmp	w21, #0x1f
    b890:	str	x22, [x23, #16]
    b894:	b.ls	b8a0 <lzma_stream_buffer_decode@@XZ_5.0+0x1e4>  // b.plast
    b898:	mov	w0, #0x8                   	// #8
    b89c:	b	b974 <lzma_stream_buffer_decode@@XZ_5.0+0x2b8>
    b8a0:	ldr	x22, [x23]
    b8a4:	cbnz	x22, b908 <lzma_stream_buffer_decode@@XZ_5.0+0x24c>
    b8a8:	mov	w0, #0x580                 	// #1408
    b8ac:	mov	x1, x19
    b8b0:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    b8b4:	cbz	x0, b970 <lzma_stream_buffer_decode@@XZ_5.0+0x2b4>
    b8b8:	adrp	x8, b000 <lzma_index_buffer_decode@@XZ_5.0+0x350>
    b8bc:	adrp	x9, b000 <lzma_index_buffer_decode@@XZ_5.0+0x350>
    b8c0:	add	x8, x8, #0x988
    b8c4:	add	x9, x9, #0xdc0
    b8c8:	adrp	x10, b000 <lzma_index_buffer_decode@@XZ_5.0+0x350>
    b8cc:	stp	x8, x9, [x23, #24]
    b8d0:	adrp	x8, b000 <lzma_index_buffer_decode@@XZ_5.0+0x350>
    b8d4:	add	x10, x10, #0xdfc
    b8d8:	add	x8, x8, #0xe04
    b8dc:	mov	x22, x0
    b8e0:	stp	x10, x8, [x23, #48]
    b8e4:	mov	x8, #0xffffffffffffffff    	// #-1
    b8e8:	movi	v0.2d, #0x0
    b8ec:	str	x0, [x23]
    b8f0:	stp	xzr, x8, [x0, #8]
    b8f4:	str	xzr, [x0, #344]
    b8f8:	stur	q0, [x0, #24]
    b8fc:	stur	q0, [x0, #40]
    b900:	stur	q0, [x0, #56]
    b904:	str	xzr, [x0, #72]
    b908:	cmp	x20, #0x0
    b90c:	and	w9, w21, #0x1
    b910:	lsr	w10, w21, #4
    b914:	mov	w8, #0x8000                	// #32768
    b918:	strb	w9, [x22, #368]
    b91c:	and	w9, w21, #0xff
    b920:	strb	w10, [x22, #371]
    b924:	ldr	x0, [x22, #344]
    b928:	csinc	x10, x20, xzr, ne  // ne = any
    b92c:	stp	x10, x8, [x22, #352]
    b930:	ubfx	w8, w9, #1, #1
    b934:	strb	w8, [x22, #369]
    b938:	ubfx	w8, w9, #2, #1
    b93c:	ubfx	w9, w9, #3, #1
    b940:	strb	w8, [x22, #370]
    b944:	mov	w8, #0x1                   	// #1
    b948:	mov	x1, x19
    b94c:	strb	w9, [x22, #372]
    b950:	strb	w8, [x22, #373]
    b954:	bl	3220 <lzma_index_hash_init@plt>
    b958:	str	x0, [x22, #344]
    b95c:	cbz	x0, b970 <lzma_stream_buffer_decode@@XZ_5.0+0x2b4>
    b960:	mov	w0, wzr
    b964:	str	wzr, [x22]
    b968:	str	xzr, [x22, #376]
    b96c:	b	b974 <lzma_stream_buffer_decode@@XZ_5.0+0x2b8>
    b970:	mov	w0, #0x5                   	// #5
    b974:	ldp	x20, x19, [sp, #48]
    b978:	ldp	x22, x21, [sp, #32]
    b97c:	ldr	x23, [sp, #16]
    b980:	ldp	x29, x30, [sp], #64
    b984:	ret
    b988:	sub	sp, sp, #0xe0
    b98c:	stp	x29, x30, [sp, #128]
    b990:	add	x29, sp, #0x80
    b994:	ldr	w8, [x29, #96]
    b998:	stp	x28, x27, [sp, #144]
    b99c:	stp	x26, x25, [sp, #160]
    b9a0:	stp	x24, x23, [sp, #176]
    b9a4:	str	w8, [sp, #44]
    b9a8:	add	x8, x0, #0x120
    b9ac:	stp	x22, x21, [sp, #192]
    b9b0:	stp	x20, x19, [sp, #208]
    b9b4:	stp	x6, x7, [sp, #16]
    b9b8:	str	x5, [sp, #8]
    b9bc:	str	x8, [sp, #32]
    b9c0:	mov	x23, x0
    b9c4:	ldr	w8, [x23], #8
    b9c8:	mov	x24, x4
    b9cc:	mov	x22, x3
    b9d0:	mov	x25, x2
    b9d4:	mov	x26, x1
    b9d8:	mov	x21, x0
    b9dc:	add	x28, x0, #0x180
    b9e0:	add	x27, x0, #0x178
    b9e4:	add	x20, x0, #0x50
    b9e8:	cmp	w8, #0x5
    b9ec:	b.hi	bd34 <lzma_stream_buffer_decode@@XZ_5.0+0x678>  // b.pmore
    b9f0:	adrp	x11, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    b9f4:	mov	w8, w8
    b9f8:	add	x11, x11, #0x969
    b9fc:	adr	x9, ba0c <lzma_stream_buffer_decode@@XZ_5.0+0x350>
    ba00:	ldrb	w10, [x11, x8]
    ba04:	add	x9, x9, x10, lsl #2
    ba08:	br	x9
    ba0c:	mov	w5, #0xc                   	// #12
    ba10:	mov	x0, x25
    ba14:	mov	x1, x22
    ba18:	mov	x2, x24
    ba1c:	mov	x3, x28
    ba20:	mov	x4, x27
    ba24:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    ba28:	ldr	x8, [x27]
    ba2c:	cmp	x8, #0xc
    ba30:	b.cc	bd24 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.lo, b.ul, b.last
    ba34:	ldr	x0, [sp, #32]
    ba38:	mov	x1, x28
    ba3c:	str	xzr, [x27]
    ba40:	bl	3470 <lzma_stream_header_decode@plt>
    ba44:	cbnz	w0, bd6c <lzma_stream_buffer_decode@@XZ_5.0+0x6b0>
    ba48:	ldr	w0, [x21, #304]
    ba4c:	mov	w8, #0x1                   	// #1
    ba50:	strb	wzr, [x21, #373]
    ba54:	str	w8, [x21]
    ba58:	str	w0, [x21, #88]
    ba5c:	cbnz	w0, ba68 <lzma_stream_buffer_decode@@XZ_5.0+0x3ac>
    ba60:	ldrb	w8, [x21, #368]
    ba64:	cbnz	w8, bd88 <lzma_stream_buffer_decode@@XZ_5.0+0x6cc>
    ba68:	ldrb	w8, [x21, #369]
    ba6c:	cbz	w8, ba7c <lzma_stream_buffer_decode@@XZ_5.0+0x3c0>
    ba70:	bl	3080 <lzma_check_is_supported@plt>
    ba74:	tst	w0, #0xff
    ba78:	b.eq	bd98 <lzma_stream_buffer_decode@@XZ_5.0+0x6dc>  // b.none
    ba7c:	ldrb	w8, [x21, #370]
    ba80:	cbnz	w8, bd90 <lzma_stream_buffer_decode@@XZ_5.0+0x6d4>
    ba84:	ldr	x8, [x22]
    ba88:	cmp	x8, x24
    ba8c:	b.cs	bd24 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.hs, b.nlast
    ba90:	ldr	x9, [x27]
    ba94:	cbz	x9, bba4 <lzma_stream_buffer_decode@@XZ_5.0+0x4e8>
    ba98:	ldr	w8, [x21, #84]
    ba9c:	b	bbb8 <lzma_stream_buffer_decode@@XZ_5.0+0x4fc>
    baa0:	ldr	x8, [x22]
    baa4:	cmp	x8, x24
    baa8:	b.cs	bd24 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.hs, b.nlast
    baac:	ldr	x0, [x21, #344]
    bab0:	mov	x1, x25
    bab4:	mov	x2, x22
    bab8:	mov	x3, x24
    babc:	bl	30d0 <lzma_index_hash_decode@plt>
    bac0:	cmp	w0, #0x1
    bac4:	b.ne	bd2c <lzma_stream_buffer_decode@@XZ_5.0+0x670>  // b.any
    bac8:	mov	w8, #0x4                   	// #4
    bacc:	str	w8, [x21]
    bad0:	mov	w5, #0xc                   	// #12
    bad4:	mov	x0, x25
    bad8:	mov	x1, x22
    badc:	mov	x2, x24
    bae0:	mov	x3, x28
    bae4:	mov	x4, x27
    bae8:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    baec:	ldr	x8, [x27]
    baf0:	cmp	x8, #0xc
    baf4:	b.cc	bd24 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.lo, b.ul, b.last
    baf8:	add	x0, sp, #0x30
    bafc:	mov	x1, x28
    bb00:	str	xzr, [x27]
    bb04:	bl	33b0 <lzma_stream_footer_decode@plt>
    bb08:	cbnz	w0, bd3c <lzma_stream_buffer_decode@@XZ_5.0+0x680>
    bb0c:	ldr	x0, [x21, #344]
    bb10:	bl	3450 <lzma_index_hash_size@plt>
    bb14:	ldr	x8, [sp, #56]
    bb18:	cmp	x0, x8
    bb1c:	b.ne	bd80 <lzma_stream_buffer_decode@@XZ_5.0+0x6c4>  // b.any
    bb20:	ldr	x0, [sp, #32]
    bb24:	add	x1, sp, #0x30
    bb28:	bl	30b0 <lzma_stream_flags_compare@plt>
    bb2c:	cbnz	w0, bd2c <lzma_stream_buffer_decode@@XZ_5.0+0x670>
    bb30:	ldrb	w8, [x21, #372]
    bb34:	cbz	w8, bd4c <lzma_stream_buffer_decode@@XZ_5.0+0x690>
    bb38:	mov	w8, #0x5                   	// #5
    bb3c:	str	w8, [x21]
    bb40:	ldr	x8, [x22]
    bb44:	cmp	x8, x24
    bb48:	b.cs	bd04 <lzma_stream_buffer_decode@@XZ_5.0+0x648>  // b.hs, b.nlast
    bb4c:	ldrb	w9, [x25, x8]
    bb50:	cbnz	w9, bb78 <lzma_stream_buffer_decode@@XZ_5.0+0x4bc>
    bb54:	add	x8, x8, #0x1
    bb58:	str	x8, [x22]
    bb5c:	ldr	w9, [x27]
    bb60:	cmp	x24, x8
    bb64:	add	w9, w9, #0x1
    bb68:	and	x9, x9, #0x3
    bb6c:	str	x9, [x27]
    bb70:	b.ne	bb4c <lzma_stream_buffer_decode@@XZ_5.0+0x490>  // b.any
    bb74:	b	bd04 <lzma_stream_buffer_decode@@XZ_5.0+0x648>
    bb78:	ldr	x9, [x27]
    bb7c:	cbnz	x9, bd54 <lzma_stream_buffer_decode@@XZ_5.0+0x698>
    bb80:	ldr	x0, [x21, #344]
    bb84:	mov	x1, x26
    bb88:	bl	3220 <lzma_index_hash_init@plt>
    bb8c:	str	x0, [x21, #344]
    bb90:	cbz	x0, bd64 <lzma_stream_buffer_decode@@XZ_5.0+0x6a8>
    bb94:	mov	w8, wzr
    bb98:	str	wzr, [x21]
    bb9c:	str	xzr, [x21, #376]
    bba0:	b	b9e8 <lzma_stream_buffer_decode@@XZ_5.0+0x32c>
    bba4:	ldrb	w8, [x25, x8]
    bba8:	cbz	w8, bcf8 <lzma_stream_buffer_decode@@XZ_5.0+0x63c>
    bbac:	lsl	w8, w8, #2
    bbb0:	add	w8, w8, #0x4
    bbb4:	str	w8, [x21, #84]
    bbb8:	mov	w5, w8
    bbbc:	mov	x0, x25
    bbc0:	mov	x1, x22
    bbc4:	mov	x2, x24
    bbc8:	mov	x3, x28
    bbcc:	mov	x4, x27
    bbd0:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    bbd4:	ldr	x8, [x21, #376]
    bbd8:	ldr	w9, [x21, #84]
    bbdc:	cmp	x8, x9
    bbe0:	b.cc	bd24 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.lo, b.ul, b.last
    bbe4:	mov	w8, #0x1                   	// #1
    bbe8:	str	w8, [x21, #80]
    bbec:	add	x8, sp, #0x30
    bbf0:	mov	x0, x20
    bbf4:	mov	x1, x26
    bbf8:	mov	x2, x28
    bbfc:	str	xzr, [x21, #376]
    bc00:	str	x8, [x21, #112]
    bc04:	bl	32d0 <lzma_block_header_decode@plt>
    bc08:	cbnz	w0, bd2c <lzma_stream_buffer_decode@@XZ_5.0+0x670>
    bc0c:	ldrb	w8, [x21, #371]
    bc10:	add	x0, sp, #0x30
    bc14:	strb	w8, [x21, #280]
    bc18:	bl	3280 <lzma_raw_decoder_memusage@plt>
    bc1c:	cmn	x0, #0x1
    bc20:	b.eq	bc3c <lzma_stream_buffer_decode@@XZ_5.0+0x580>  // b.none
    bc24:	ldr	x8, [x21, #352]
    bc28:	str	x0, [x21, #360]
    bc2c:	cmp	x0, x8
    bc30:	b.ls	bc44 <lzma_stream_buffer_decode@@XZ_5.0+0x588>  // b.plast
    bc34:	mov	w19, #0x6                   	// #6
    bc38:	b	bc58 <lzma_stream_buffer_decode@@XZ_5.0+0x59c>
    bc3c:	mov	w19, #0x8                   	// #8
    bc40:	b	bc58 <lzma_stream_buffer_decode@@XZ_5.0+0x59c>
    bc44:	mov	x0, x23
    bc48:	mov	x1, x26
    bc4c:	mov	x2, x20
    bc50:	bl	a030 <lzma_block_buffer_decode@@XZ_5.0+0x148>
    bc54:	mov	w19, w0
    bc58:	ldr	x0, [sp, #56]
    bc5c:	mov	x1, x26
    bc60:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    bc64:	ldr	x0, [sp, #72]
    bc68:	mov	x1, x26
    bc6c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    bc70:	ldr	x0, [sp, #88]
    bc74:	mov	x1, x26
    bc78:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    bc7c:	ldr	x0, [sp, #104]
    bc80:	mov	x1, x26
    bc84:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    bc88:	str	xzr, [x21, #112]
    bc8c:	cbnz	w19, bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bc90:	mov	w8, #0x2                   	// #2
    bc94:	str	w8, [x21]
    bc98:	ldr	x8, [x21, #32]
    bc9c:	ldr	x0, [x21, #8]
    bca0:	ldr	w9, [sp, #44]
    bca4:	ldp	x5, x6, [sp, #8]
    bca8:	ldr	x7, [sp, #24]
    bcac:	mov	x1, x26
    bcb0:	mov	x2, x25
    bcb4:	mov	x3, x22
    bcb8:	mov	x4, x24
    bcbc:	str	w9, [sp]
    bcc0:	blr	x8
    bcc4:	cmp	w0, #0x1
    bcc8:	b.ne	bd2c <lzma_stream_buffer_decode@@XZ_5.0+0x670>  // b.any
    bccc:	ldr	x19, [x21, #344]
    bcd0:	mov	x0, x20
    bcd4:	bl	3130 <lzma_block_unpadded_size@plt>
    bcd8:	ldr	x2, [x21, #104]
    bcdc:	mov	x1, x0
    bce0:	mov	x0, x19
    bce4:	bl	3150 <lzma_index_hash_append@plt>
    bce8:	cbnz	w0, bd2c <lzma_stream_buffer_decode@@XZ_5.0+0x670>
    bcec:	mov	w8, #0x1                   	// #1
    bcf0:	str	w8, [x21]
    bcf4:	b	b9e8 <lzma_stream_buffer_decode@@XZ_5.0+0x32c>
    bcf8:	mov	w8, #0x3                   	// #3
    bcfc:	str	w8, [x21]
    bd00:	b	b9e8 <lzma_stream_buffer_decode@@XZ_5.0+0x32c>
    bd04:	ldr	w8, [sp, #44]
    bd08:	cmp	w8, #0x3
    bd0c:	b.ne	bd24 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.any
    bd10:	ldr	x8, [x27]
    bd14:	cmp	x8, #0x0
    bd18:	mov	w8, #0x9                   	// #9
    bd1c:	csinc	w19, w8, wzr, ne  // ne = any
    bd20:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd24:	mov	w19, wzr
    bd28:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd2c:	mov	w19, w0
    bd30:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd34:	mov	w19, #0xb                   	// #11
    bd38:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd3c:	cmp	w0, #0x7
    bd40:	mov	w8, #0x9                   	// #9
    bd44:	csel	w19, w8, w0, eq  // eq = none
    bd48:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd4c:	mov	w19, #0x1                   	// #1
    bd50:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd54:	add	x8, x8, #0x1
    bd58:	str	x8, [x22]
    bd5c:	mov	w19, #0x9                   	// #9
    bd60:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd64:	mov	w19, #0x5                   	// #5
    bd68:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd6c:	mov	w19, w0
    bd70:	cmp	w0, #0x7
    bd74:	b.ne	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>  // b.any
    bd78:	ldrb	w8, [x21, #373]
    bd7c:	cbnz	w8, bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd80:	mov	w19, #0x9                   	// #9
    bd84:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd88:	mov	w19, #0x2                   	// #2
    bd8c:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd90:	mov	w19, #0x4                   	// #4
    bd94:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bd98:	mov	w19, #0x3                   	// #3
    bd9c:	mov	w0, w19
    bda0:	ldp	x20, x19, [sp, #208]
    bda4:	ldp	x22, x21, [sp, #192]
    bda8:	ldp	x24, x23, [sp, #176]
    bdac:	ldp	x26, x25, [sp, #160]
    bdb0:	ldp	x28, x27, [sp, #144]
    bdb4:	ldp	x29, x30, [sp, #128]
    bdb8:	add	sp, sp, #0xe0
    bdbc:	ret
    bdc0:	stp	x29, x30, [sp, #-32]!
    bdc4:	stp	x20, x19, [sp, #16]
    bdc8:	mov	x20, x0
    bdcc:	add	x0, x0, #0x8
    bdd0:	mov	x29, sp
    bdd4:	mov	x19, x1
    bdd8:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    bddc:	ldr	x0, [x20, #344]
    bde0:	mov	x1, x19
    bde4:	bl	32b0 <lzma_index_hash_end@plt>
    bde8:	mov	x0, x20
    bdec:	mov	x1, x19
    bdf0:	ldp	x20, x19, [sp, #16]
    bdf4:	ldp	x29, x30, [sp], #32
    bdf8:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    bdfc:	ldr	w0, [x0, #304]
    be00:	ret
    be04:	ldr	x9, [x0, #360]
    be08:	str	x9, [x1]
    be0c:	ldr	x9, [x0, #352]
    be10:	str	x9, [x2]
    be14:	cbz	x3, be30 <lzma_stream_buffer_decode@@XZ_5.0+0x774>
    be18:	ldr	x9, [x0, #360]
    be1c:	mov	x8, x0
    be20:	cmp	x9, x3
    be24:	b.ls	be38 <lzma_stream_buffer_decode@@XZ_5.0+0x77c>  // b.plast
    be28:	mov	w0, #0x6                   	// #6
    be2c:	ret
    be30:	mov	w0, wzr
    be34:	ret
    be38:	mov	w0, wzr
    be3c:	str	x3, [x8, #352]
    be40:	ret

000000000000be44 <lzma_stream_decoder@@XZ_5.0>:
    be44:	stp	x29, x30, [sp, #-48]!
    be48:	stp	x22, x21, [sp, #16]
    be4c:	stp	x20, x19, [sp, #32]
    be50:	mov	x29, sp
    be54:	mov	w21, w2
    be58:	mov	x22, x1
    be5c:	mov	x19, x0
    be60:	bl	3908 <lzma_version_string@@XZ_5.0+0x2b8>
    be64:	mov	w20, w0
    be68:	cbnz	w0, bea0 <lzma_stream_decoder@@XZ_5.0+0x5c>
    be6c:	ldp	x1, x0, [x19, #48]
    be70:	mov	x2, x22
    be74:	mov	w3, w21
    be78:	bl	b848 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    be7c:	mov	w20, w0
    be80:	cbz	w0, be90 <lzma_stream_decoder@@XZ_5.0+0x4c>
    be84:	mov	x0, x19
    be88:	bl	32c0 <lzma_end@plt>
    be8c:	b	bea0 <lzma_stream_decoder@@XZ_5.0+0x5c>
    be90:	ldr	x8, [x19, #56]
    be94:	mov	w9, #0x1                   	// #1
    be98:	strb	w9, [x8, #88]
    be9c:	strb	w9, [x8, #91]
    bea0:	mov	w0, w20
    bea4:	ldp	x20, x19, [sp, #32]
    bea8:	ldp	x22, x21, [sp, #16]
    beac:	ldp	x29, x30, [sp], #48
    beb0:	ret

000000000000beb4 <lzma_stream_header_decode@@XZ_5.0>:
    beb4:	stp	x29, x30, [sp, #-48]!
    beb8:	str	x21, [sp, #16]
    bebc:	stp	x20, x19, [sp, #32]
    bec0:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    bec4:	ldr	w8, [x1]
    bec8:	ldr	x9, [x9, #3936]
    becc:	ldrh	w10, [x1, #4]
    bed0:	mov	x29, sp
    bed4:	ldr	w11, [x9]
    bed8:	ldrh	w9, [x9, #4]
    bedc:	eor	w8, w8, w11
    bee0:	eor	w9, w10, w9
    bee4:	orr	w8, w8, w9
    bee8:	cbz	w8, bef4 <lzma_stream_header_decode@@XZ_5.0+0x40>
    beec:	mov	w0, #0x7                   	// #7
    bef0:	b	bf3c <lzma_stream_header_decode@@XZ_5.0+0x88>
    bef4:	add	x21, x1, #0x6
    bef8:	mov	x19, x1
    befc:	mov	x20, x0
    bf00:	mov	w1, #0x2                   	// #2
    bf04:	mov	x0, x21
    bf08:	mov	w2, wzr
    bf0c:	bl	3160 <lzma_crc32@plt>
    bf10:	ldr	w8, [x19, #8]
    bf14:	cmp	w0, w8
    bf18:	b.ne	bf38 <lzma_stream_header_decode@@XZ_5.0+0x84>  // b.any
    bf1c:	ldrb	w8, [x21]
    bf20:	cbnz	w8, bf30 <lzma_stream_header_decode@@XZ_5.0+0x7c>
    bf24:	ldrb	w8, [x19, #7]
    bf28:	cmp	w8, #0xf
    bf2c:	b.ls	bf4c <lzma_stream_header_decode@@XZ_5.0+0x98>  // b.plast
    bf30:	mov	w0, #0x8                   	// #8
    bf34:	b	bf3c <lzma_stream_header_decode@@XZ_5.0+0x88>
    bf38:	mov	w0, #0x9                   	// #9
    bf3c:	ldp	x20, x19, [sp, #32]
    bf40:	ldr	x21, [sp, #16]
    bf44:	ldp	x29, x30, [sp], #48
    bf48:	ret
    bf4c:	str	wzr, [x20]
    bf50:	ldrb	w8, [x19, #7]
    bf54:	mov	w0, wzr
    bf58:	mov	x9, #0xffffffffffffffff    	// #-1
    bf5c:	str	x9, [x20, #8]
    bf60:	and	w8, w8, #0xf
    bf64:	str	w8, [x20, #16]
    bf68:	b	bf3c <lzma_stream_header_decode@@XZ_5.0+0x88>

000000000000bf6c <lzma_stream_footer_decode@@XZ_5.0>:
    bf6c:	stp	x29, x30, [sp, #-32]!
    bf70:	stp	x20, x19, [sp, #16]
    bf74:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    bf78:	ldrh	w8, [x1, #10]
    bf7c:	ldr	x9, [x9, #3976]
    bf80:	mov	x29, sp
    bf84:	ldrh	w9, [x9]
    bf88:	cmp	w8, w9
    bf8c:	b.eq	bf98 <lzma_stream_footer_decode@@XZ_5.0+0x2c>  // b.none
    bf90:	mov	w0, #0x7                   	// #7
    bf94:	b	bfdc <lzma_stream_footer_decode@@XZ_5.0+0x70>
    bf98:	mov	x20, x1
    bf9c:	mov	x19, x0
    bfa0:	add	x0, x1, #0x4
    bfa4:	mov	w1, #0x6                   	// #6
    bfa8:	mov	w2, wzr
    bfac:	bl	3160 <lzma_crc32@plt>
    bfb0:	ldr	w8, [x20]
    bfb4:	cmp	w0, w8
    bfb8:	b.ne	bfd8 <lzma_stream_footer_decode@@XZ_5.0+0x6c>  // b.any
    bfbc:	ldrb	w8, [x20, #8]
    bfc0:	cbnz	w8, bfd0 <lzma_stream_footer_decode@@XZ_5.0+0x64>
    bfc4:	ldrb	w8, [x20, #9]
    bfc8:	cmp	w8, #0xf
    bfcc:	b.ls	bfe8 <lzma_stream_footer_decode@@XZ_5.0+0x7c>  // b.plast
    bfd0:	mov	w0, #0x8                   	// #8
    bfd4:	b	bfdc <lzma_stream_footer_decode@@XZ_5.0+0x70>
    bfd8:	mov	w0, #0x9                   	// #9
    bfdc:	ldp	x20, x19, [sp, #16]
    bfe0:	ldp	x29, x30, [sp], #32
    bfe4:	ret
    bfe8:	str	wzr, [x19]
    bfec:	ldrb	w8, [x20, #9]
    bff0:	mov	w0, wzr
    bff4:	and	w8, w8, #0xf
    bff8:	str	w8, [x19, #16]
    bffc:	ldrb	w8, [x20, #4]
    c000:	ldrb	w9, [x20, #5]
    c004:	ldrb	w10, [x20, #6]
    c008:	ldrb	w11, [x20, #7]
    c00c:	lsl	x8, x8, #2
    c010:	bfi	x8, x9, #10, #8
    c014:	bfi	x8, x10, #18, #8
    c018:	bfi	x8, x11, #26, #8
    c01c:	add	x8, x8, #0x4
    c020:	str	x8, [x19, #8]
    c024:	b	bfdc <lzma_stream_footer_decode@@XZ_5.0+0x70>

000000000000c028 <lzma_vli_decode@@XZ_5.0>:
    c028:	sub	sp, sp, #0x10
    c02c:	str	xzr, [sp, #8]
    c030:	cbz	x1, c04c <lzma_vli_decode@@XZ_5.0+0x24>
    c034:	ldr	x8, [x1]
    c038:	cbz	x8, c06c <lzma_vli_decode@@XZ_5.0+0x44>
    c03c:	cmp	x8, #0x8
    c040:	b.hi	c084 <lzma_vli_decode@@XZ_5.0+0x5c>  // b.pmore
    c044:	ldr	x9, [x0]
    c048:	b	c074 <lzma_vli_decode@@XZ_5.0+0x4c>
    c04c:	ldr	x10, [x3]
    c050:	str	xzr, [x0]
    c054:	cmp	x10, x4
    c058:	b.cs	c12c <lzma_vli_decode@@XZ_5.0+0x104>  // b.hs, b.nlast
    c05c:	mov	x9, xzr
    c060:	mov	x8, xzr
    c064:	add	x1, sp, #0x8
    c068:	b	c098 <lzma_vli_decode@@XZ_5.0+0x70>
    c06c:	mov	x9, xzr
    c070:	str	xzr, [x0]
    c074:	lsl	x10, x8, #3
    c078:	sub	x10, x10, x8
    c07c:	lsr	x10, x9, x10
    c080:	cbz	x10, c08c <lzma_vli_decode@@XZ_5.0+0x64>
    c084:	mov	w8, #0xb                   	// #11
    c088:	b	c15c <lzma_vli_decode@@XZ_5.0+0x134>
    c08c:	ldr	x10, [x3]
    c090:	cmp	x10, x4
    c094:	b.cs	c148 <lzma_vli_decode@@XZ_5.0+0x120>  // b.hs, b.nlast
    c098:	sub	x12, x10, x8
    c09c:	lsl	x13, x8, #3
    c0a0:	mov	x11, xzr
    c0a4:	add	x12, x12, #0x9
    c0a8:	sub	x13, x13, x8
    c0ac:	add	x14, x2, x10
    c0b0:	ldrb	w15, [x14, x11]
    c0b4:	and	x16, x15, #0x7f
    c0b8:	lsl	x16, x16, x13
    c0bc:	add	x9, x16, x9
    c0c0:	add	x16, x8, x11
    c0c4:	tbz	w15, #7, c108 <lzma_vli_decode@@XZ_5.0+0xe0>
    c0c8:	sub	x15, x16, #0x8
    c0cc:	cbz	x15, c134 <lzma_vli_decode@@XZ_5.0+0x10c>
    c0d0:	add	x11, x11, #0x1
    c0d4:	add	x15, x10, x11
    c0d8:	cmp	x15, x4
    c0dc:	add	x13, x13, #0x7
    c0e0:	b.cc	c0b0 <lzma_vli_decode@@XZ_5.0+0x88>  // b.lo, b.ul, b.last
    c0e4:	add	x8, x8, x11
    c0e8:	add	x10, sp, #0x8
    c0ec:	str	x15, [x3]
    c0f0:	str	x8, [x1]
    c0f4:	cmp	x1, x10
    c0f8:	mov	w8, #0x9                   	// #9
    c0fc:	str	x9, [x0]
    c100:	csel	w8, w8, wzr, eq  // eq = none
    c104:	b	c15c <lzma_vli_decode@@XZ_5.0+0x134>
    c108:	add	x10, x10, x11
    c10c:	add	x8, x16, #0x1
    c110:	add	x10, x10, #0x1
    c114:	str	x10, [x3]
    c118:	str	x8, [x1]
    c11c:	str	x9, [x0]
    c120:	cbnz	w15, c150 <lzma_vli_decode@@XZ_5.0+0x128>
    c124:	cmp	x8, #0x1
    c128:	b.ls	c150 <lzma_vli_decode@@XZ_5.0+0x128>  // b.plast
    c12c:	mov	w8, #0x9                   	// #9
    c130:	b	c15c <lzma_vli_decode@@XZ_5.0+0x134>
    c134:	mov	w8, #0x9                   	// #9
    c138:	str	x12, [x3]
    c13c:	str	x8, [x1]
    c140:	str	x9, [x0]
    c144:	b	c15c <lzma_vli_decode@@XZ_5.0+0x134>
    c148:	mov	w8, #0xa                   	// #10
    c14c:	b	c15c <lzma_vli_decode@@XZ_5.0+0x134>
    c150:	add	x8, sp, #0x8
    c154:	cmp	x1, x8
    c158:	cset	w8, ne  // ne = any
    c15c:	mov	w0, w8
    c160:	add	sp, sp, #0x10
    c164:	ret

000000000000c168 <lzma_check_is_supported@@XZ_5.0>:
    c168:	cmp	w0, #0xf
    c16c:	b.ls	c178 <lzma_check_is_supported@@XZ_5.0+0x10>  // b.plast
    c170:	mov	w0, wzr
    c174:	ret
    c178:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    c17c:	add	x8, x8, #0x96f
    c180:	ldrb	w0, [x8, w0, uxtw]
    c184:	ret

000000000000c188 <lzma_check_size@@XZ_5.0>:
    c188:	cmp	w0, #0xf
    c18c:	b.ls	c198 <lzma_check_size@@XZ_5.0+0x10>  // b.plast
    c190:	mov	w0, #0xffffffff            	// #-1
    c194:	ret
    c198:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
    c19c:	add	x8, x8, #0x97f
    c1a0:	ldrb	w0, [x8, w0, uxtw]
    c1a4:	ret
    c1a8:	cmp	w1, #0xa
    c1ac:	b.eq	c1c8 <lzma_check_size@@XZ_5.0+0x40>  // b.none
    c1b0:	cmp	w1, #0x4
    c1b4:	b.eq	c1cc <lzma_check_size@@XZ_5.0+0x44>  // b.none
    c1b8:	cmp	w1, #0x1
    c1bc:	b.ne	c1d0 <lzma_check_size@@XZ_5.0+0x48>  // b.any
    c1c0:	str	wzr, [x0, #64]
    c1c4:	ret
    c1c8:	b	c46c <lzma_crc64@@XZ_5.0+0xd4>
    c1cc:	str	xzr, [x0, #64]
    c1d0:	ret
    c1d4:	stp	x29, x30, [sp, #-32]!
    c1d8:	str	x19, [sp, #16]
    c1dc:	cmp	w1, #0xa
    c1e0:	mov	x19, x0
    c1e4:	mov	x29, sp
    c1e8:	b.eq	c218 <lzma_check_size@@XZ_5.0+0x90>  // b.none
    c1ec:	cmp	w1, #0x4
    c1f0:	b.eq	c230 <lzma_check_size@@XZ_5.0+0xa8>  // b.none
    c1f4:	cmp	w1, #0x1
    c1f8:	b.ne	c248 <lzma_check_size@@XZ_5.0+0xc0>  // b.any
    c1fc:	ldr	w8, [x19, #64]
    c200:	mov	x0, x2
    c204:	mov	x1, x3
    c208:	mov	w2, w8
    c20c:	bl	3160 <lzma_crc32@plt>
    c210:	str	w0, [x19, #64]
    c214:	b	c248 <lzma_check_size@@XZ_5.0+0xc0>
    c218:	mov	x0, x2
    c21c:	mov	x2, x19
    c220:	ldr	x19, [sp, #16]
    c224:	mov	x1, x3
    c228:	ldp	x29, x30, [sp], #32
    c22c:	b	c484 <lzma_crc64@@XZ_5.0+0xec>
    c230:	ldr	x8, [x19, #64]
    c234:	mov	x0, x2
    c238:	mov	x1, x3
    c23c:	mov	x2, x8
    c240:	bl	3230 <lzma_crc64@plt>
    c244:	str	x0, [x19, #64]
    c248:	ldr	x19, [sp, #16]
    c24c:	ldp	x29, x30, [sp], #32
    c250:	ret
    c254:	cmp	w1, #0xa
    c258:	b.eq	c278 <lzma_check_size@@XZ_5.0+0xf0>  // b.none
    c25c:	cmp	w1, #0x4
    c260:	b.eq	c27c <lzma_check_size@@XZ_5.0+0xf4>  // b.none
    c264:	cmp	w1, #0x1
    c268:	b.ne	c284 <lzma_check_size@@XZ_5.0+0xfc>  // b.any
    c26c:	ldr	w8, [x0, #64]
    c270:	str	w8, [x0]
    c274:	ret
    c278:	b	d374 <lzma_crc64@@XZ_5.0+0xfdc>
    c27c:	ldr	x8, [x0, #64]
    c280:	str	x8, [x0]
    c284:	ret

000000000000c288 <lzma_crc32@@XZ_5.0>:
    c288:	cmp	x1, #0x9
    c28c:	mvn	w8, w2
    c290:	b.cc	c368 <lzma_crc32@@XZ_5.0+0xe0>  // b.lo, b.ul, b.last
    c294:	tst	x0, #0x7
    c298:	b.eq	c2c4 <lzma_crc32@@XZ_5.0+0x3c>  // b.none
    c29c:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    c2a0:	ldr	x9, [x9, #3952]
    c2a4:	ldrb	w10, [x0], #1
    c2a8:	and	w11, w8, #0xff
    c2ac:	sub	x1, x1, #0x1
    c2b0:	eor	w10, w11, w10
    c2b4:	ldr	w10, [x9, w10, uxtw #2]
    c2b8:	tst	x0, #0x7
    c2bc:	eor	w8, w10, w8, lsr #8
    c2c0:	b.ne	c2a4 <lzma_crc32@@XZ_5.0+0x1c>  // b.any
    c2c4:	and	x9, x1, #0xfffffffffffffff8
    c2c8:	cmp	x9, #0x1
    c2cc:	and	x1, x1, #0x7
    c2d0:	b.lt	c368 <lzma_crc32@@XZ_5.0+0xe0>  // b.tstop
    c2d4:	adrp	x10, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    c2d8:	ldr	x10, [x10, #3952]
    c2dc:	add	x9, x0, x9
    c2e0:	ldp	w11, w12, [x0], #8
    c2e4:	eor	w8, w11, w8
    c2e8:	and	w15, w8, #0xff
    c2ec:	ubfx	w16, w8, #8, #8
    c2f0:	ubfx	w17, w8, #16, #8
    c2f4:	add	x15, x10, w15, uxtw #2
    c2f8:	add	x16, x10, w16, uxtw #2
    c2fc:	lsr	w8, w8, #24
    c300:	add	x17, x10, w17, uxtw #2
    c304:	ldr	w15, [x15, #7168]
    c308:	ldr	w16, [x16, #6144]
    c30c:	add	x8, x10, w8, uxtw #2
    c310:	ldr	w17, [x17, #5120]
    c314:	add	x11, x10, w12, uxtb #2
    c318:	lsr	x13, x12, #8
    c31c:	ldr	w8, [x8, #4096]
    c320:	lsr	x14, x12, #16
    c324:	ldr	w11, [x11, #3072]
    c328:	add	x13, x10, w13, uxtb #2
    c32c:	lsr	x12, x12, #22
    c330:	add	x14, x10, w14, uxtb #2
    c334:	ldr	w13, [x13, #2048]
    c338:	eor	w15, w16, w15
    c33c:	and	x12, x12, #0x3fc
    c340:	ldr	w14, [x14, #1024]
    c344:	eor	w15, w15, w17
    c348:	ldr	w12, [x10, x12]
    c34c:	eor	w8, w15, w8
    c350:	eor	w8, w8, w11
    c354:	eor	w8, w8, w13
    c358:	eor	w8, w8, w14
    c35c:	cmp	x0, x9
    c360:	eor	w8, w8, w12
    c364:	b.cc	c2e0 <lzma_crc32@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    c368:	cbz	x1, c390 <lzma_crc32@@XZ_5.0+0x108>
    c36c:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    c370:	ldr	x9, [x9, #3952]
    c374:	ldrb	w10, [x0], #1
    c378:	and	w11, w8, #0xff
    c37c:	subs	x1, x1, #0x1
    c380:	eor	w10, w11, w10
    c384:	ldr	w10, [x9, w10, uxtw #2]
    c388:	eor	w8, w10, w8, lsr #8
    c38c:	b.ne	c374 <lzma_crc32@@XZ_5.0+0xec>  // b.any
    c390:	mvn	w0, w8
    c394:	ret

000000000000c398 <lzma_crc64@@XZ_5.0>:
    c398:	cmp	x1, #0x5
    c39c:	mvn	x8, x2
    c3a0:	b.cc	c43c <lzma_crc64@@XZ_5.0+0xa4>  // b.lo, b.ul, b.last
    c3a4:	tst	x0, #0x3
    c3a8:	b.eq	c3d4 <lzma_crc64@@XZ_5.0+0x3c>  // b.none
    c3ac:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    c3b0:	ldr	x9, [x9, #3984]
    c3b4:	ldrb	w10, [x0], #1
    c3b8:	and	x11, x8, #0xff
    c3bc:	sub	x1, x1, #0x1
    c3c0:	eor	x10, x11, x10
    c3c4:	ldr	x10, [x9, x10, lsl #3]
    c3c8:	tst	x0, #0x3
    c3cc:	eor	x8, x10, x8, lsr #8
    c3d0:	b.ne	c3b4 <lzma_crc64@@XZ_5.0+0x1c>  // b.any
    c3d4:	and	x9, x1, #0xfffffffffffffffc
    c3d8:	cmp	x9, #0x1
    c3dc:	and	x1, x1, #0x3
    c3e0:	b.lt	c43c <lzma_crc64@@XZ_5.0+0xa4>  // b.tstop
    c3e4:	adrp	x10, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    c3e8:	ldr	x10, [x10, #3984]
    c3ec:	add	x9, x0, x9
    c3f0:	ldr	w11, [x0], #4
    c3f4:	eor	w11, w11, w8
    c3f8:	and	w12, w11, #0xff
    c3fc:	ubfx	w13, w11, #8, #8
    c400:	add	x12, x10, w12, uxtw #3
    c404:	ubfx	w14, w11, #16, #8
    c408:	add	x13, x10, w13, uxtw #3
    c40c:	ldr	x12, [x12, #6144]
    c410:	add	x14, x10, w14, uxtw #3
    c414:	ldr	x13, [x13, #4096]
    c418:	lsr	w11, w11, #24
    c41c:	ldr	x14, [x14, #2048]
    c420:	ldr	x11, [x10, w11, uxtw #3]
    c424:	eor	x8, x12, x8, lsr #32
    c428:	eor	x8, x8, x13
    c42c:	eor	x8, x8, x14
    c430:	cmp	x0, x9
    c434:	eor	x8, x8, x11
    c438:	b.cc	c3f0 <lzma_crc64@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    c43c:	cbz	x1, c464 <lzma_crc64@@XZ_5.0+0xcc>
    c440:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    c444:	ldr	x9, [x9, #3984]
    c448:	ldrb	w10, [x0], #1
    c44c:	and	x11, x8, #0xff
    c450:	subs	x1, x1, #0x1
    c454:	eor	x10, x11, x10
    c458:	ldr	x10, [x9, x10, lsl #3]
    c45c:	eor	x8, x10, x8, lsr #8
    c460:	b.ne	c448 <lzma_crc64@@XZ_5.0+0xb0>  // b.any
    c464:	mvn	x0, x8
    c468:	ret
    c46c:	adrp	x8, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
    c470:	add	x8, x8, #0x990
    c474:	ldp	q1, q0, [x8]
    c478:	str	xzr, [x0, #96]
    c47c:	stp	q1, q0, [x0, #64]
    c480:	ret
    c484:	stp	x29, x30, [sp, #-64]!
    c488:	str	x23, [sp, #16]
    c48c:	stp	x22, x21, [sp, #32]
    c490:	stp	x20, x19, [sp, #48]
    c494:	mov	x29, sp
    c498:	cbz	x1, c500 <lzma_crc64@@XZ_5.0+0x168>
    c49c:	mov	x19, x2
    c4a0:	mov	x20, x1
    c4a4:	mov	x21, x0
    c4a8:	mov	w23, #0x40                  	// #64
    c4ac:	b	c4b4 <lzma_crc64@@XZ_5.0+0x11c>
    c4b0:	cbz	x20, c500 <lzma_crc64@@XZ_5.0+0x168>
    c4b4:	ldr	x8, [x19, #96]
    c4b8:	mov	x1, x21
    c4bc:	and	x8, x8, #0x3f
    c4c0:	sub	x9, x23, x8
    c4c4:	cmp	x9, x20
    c4c8:	csel	x22, x20, x9, hi  // hi = pmore
    c4cc:	add	x0, x19, x8
    c4d0:	mov	x2, x22
    c4d4:	bl	3040 <memcpy@plt>
    c4d8:	ldr	x8, [x19, #96]
    c4dc:	add	x21, x21, x22
    c4e0:	sub	x20, x20, x22
    c4e4:	add	x8, x22, x8
    c4e8:	tst	x8, #0x3f
    c4ec:	str	x8, [x19, #96]
    c4f0:	b.ne	c4b0 <lzma_crc64@@XZ_5.0+0x118>  // b.any
    c4f4:	mov	x0, x19
    c4f8:	bl	c514 <lzma_crc64@@XZ_5.0+0x17c>
    c4fc:	b	c4b0 <lzma_crc64@@XZ_5.0+0x118>
    c500:	ldp	x20, x19, [sp, #48]
    c504:	ldp	x22, x21, [sp, #32]
    c508:	ldr	x23, [sp, #16]
    c50c:	ldp	x29, x30, [sp], #64
    c510:	ret
    c514:	sub	sp, sp, #0xb0
    c518:	stp	x29, x30, [sp, #80]
    c51c:	stp	x28, x27, [sp, #96]
    c520:	stp	x26, x25, [sp, #112]
    c524:	stp	x24, x23, [sp, #128]
    c528:	stp	x22, x21, [sp, #144]
    c52c:	stp	x20, x19, [sp, #160]
    c530:	str	xzr, [sp, #72]
    c534:	ldp	w26, w27, [x0, #80]
    c538:	ldp	w29, w8, [x0, #88]
    c53c:	ldp	w13, w1, [x0, #8]
    c540:	ldp	w9, w11, [x0]
    c544:	ldp	w21, w23, [x0, #64]
    c548:	ldp	w24, w25, [x0, #72]
    c54c:	bic	w3, w29, w26
    c550:	and	w4, w27, w26
    c554:	eor	w2, w26, w26, ror #14
    c558:	rev	w19, w1
    c55c:	orr	w1, w4, w3
    c560:	rev	w30, w9
    c564:	rev	w22, w13
    c568:	eor	w13, w26, w2, ror #5
    c56c:	add	w1, w8, w1
    c570:	ldp	w16, w17, [x0, #16]
    c574:	eor	w9, w21, w21, ror #9
    c578:	eor	w5, w24, w23
    c57c:	stp	w8, w29, [sp, #8]
    c580:	ror	w13, w13, #6
    c584:	add	w1, w1, w30
    c588:	mov	w8, #0x2f98                	// #12184
    c58c:	and	w6, w24, w23
    c590:	eor	w9, w21, w9, ror #11
    c594:	and	w2, w5, w21
    c598:	add	w13, w1, w13
    c59c:	movk	w8, #0x428a, lsl #16
    c5a0:	add	w2, w2, w6
    c5a4:	ror	w9, w9, #2
    c5a8:	add	w8, w13, w8
    c5ac:	add	w9, w2, w9
    c5b0:	add	w13, w8, w25
    c5b4:	add	w8, w9, w8
    c5b8:	bic	w9, w27, w13
    c5bc:	and	w1, w26, w13
    c5c0:	rev	w28, w11
    c5c4:	orr	w9, w1, w9
    c5c8:	eor	w1, w13, w13, ror #14
    c5cc:	add	w3, w29, w28
    c5d0:	eor	w1, w13, w1, ror #5
    c5d4:	mov	w10, #0x4491                	// #17553
    c5d8:	eor	w11, w23, w21
    c5dc:	eor	w5, w8, w8, ror #9
    c5e0:	add	w9, w3, w9
    c5e4:	ror	w1, w1, #6
    c5e8:	movk	w10, #0x7137, lsl #16
    c5ec:	and	w7, w23, w21
    c5f0:	and	w11, w8, w11
    c5f4:	add	w9, w9, w1
    c5f8:	eor	w5, w8, w5, ror #11
    c5fc:	add	w11, w11, w7
    c600:	ror	w5, w5, #2
    c604:	add	w9, w9, w10
    c608:	add	w11, w11, w5
    c60c:	add	w5, w9, w24
    c610:	add	w6, w11, w9
    c614:	bic	w9, w26, w5
    c618:	and	w10, w13, w5
    c61c:	eor	w3, w8, w21
    c620:	orr	w9, w10, w9
    c624:	eor	w10, w5, w5, ror #14
    c628:	add	w4, w27, w22
    c62c:	and	w1, w8, w21
    c630:	and	w11, w6, w3
    c634:	eor	w10, w5, w10, ror #5
    c638:	mov	w12, #0xfbcf                	// #64463
    c63c:	add	w11, w11, w1
    c640:	eor	w1, w6, w6, ror #9
    c644:	add	w9, w4, w9
    c648:	ror	w10, w10, #6
    c64c:	movk	w12, #0xb5c0, lsl #16
    c650:	add	w9, w9, w10
    c654:	eor	w1, w6, w1, ror #11
    c658:	ror	w1, w1, #2
    c65c:	add	w9, w9, w12
    c660:	add	w11, w11, w1
    c664:	add	w12, w9, w23
    c668:	add	w11, w11, w9
    c66c:	bic	w9, w13, w12
    c670:	and	w1, w5, w12
    c674:	eor	w3, w6, w8
    c678:	orr	w9, w1, w9
    c67c:	eor	w1, w12, w12, ror #14
    c680:	add	w2, w26, w19
    c684:	and	w10, w6, w8
    c688:	and	w3, w11, w3
    c68c:	eor	w1, w12, w1, ror #5
    c690:	mov	w14, #0xdba5                	// #56229
    c694:	add	w10, w3, w10
    c698:	eor	w3, w11, w11, ror #9
    c69c:	add	w9, w2, w9
    c6a0:	ror	w1, w1, #6
    c6a4:	movk	w14, #0xe9b5, lsl #16
    c6a8:	add	w9, w9, w1
    c6ac:	eor	w3, w11, w3, ror #11
    c6b0:	ror	w3, w3, #2
    c6b4:	add	w9, w9, w14
    c6b8:	add	w10, w10, w3
    c6bc:	add	w14, w9, w21
    c6c0:	stp	w23, w21, [sp, #32]
    c6c4:	add	w9, w10, w9
    c6c8:	bic	w10, w5, w14
    c6cc:	and	w3, w12, w14
    c6d0:	rev	w23, w16
    c6d4:	orr	w10, w3, w10
    c6d8:	add	w13, w23, w13
    c6dc:	add	w10, w13, w10
    c6e0:	eor	w13, w14, w14, ror #14
    c6e4:	eor	w13, w14, w13, ror #5
    c6e8:	ror	w13, w13, #6
    c6ec:	mov	w15, #0xc25b                	// #49755
    c6f0:	eor	w2, w11, w6
    c6f4:	add	w10, w10, w13
    c6f8:	eor	w13, w9, w9, ror #9
    c6fc:	movk	w15, #0x3956, lsl #16
    c700:	and	w1, w11, w6
    c704:	and	w2, w9, w2
    c708:	eor	w13, w9, w13, ror #11
    c70c:	add	w1, w2, w1
    c710:	ror	w13, w13, #2
    c714:	add	w10, w10, w15
    c718:	add	w13, w1, w13
    c71c:	add	w15, w10, w8
    c720:	str	w27, [sp, #16]
    c724:	add	w10, w13, w10
    c728:	bic	w8, w12, w15
    c72c:	and	w13, w14, w15
    c730:	rev	w27, w17
    c734:	orr	w8, w13, w8
    c738:	add	w17, w27, w5
    c73c:	add	w8, w17, w8
    c740:	eor	w17, w15, w15, ror #14
    c744:	eor	w17, w15, w17, ror #5
    c748:	str	w25, [sp, #24]
    c74c:	str	w24, [sp, #28]
    c750:	str	w26, [sp, #20]
    c754:	ror	w17, w17, #6
    c758:	mov	w18, #0x11f1                	// #4593
    c75c:	ldp	w2, w3, [x0, #24]
    c760:	eor	w16, w9, w11
    c764:	add	w8, w8, w17
    c768:	eor	w17, w10, w10, ror #9
    c76c:	movk	w18, #0x59f1, lsl #16
    c770:	and	w13, w9, w11
    c774:	and	w16, w10, w16
    c778:	eor	w17, w10, w17, ror #11
    c77c:	add	w13, w16, w13
    c780:	ror	w17, w17, #2
    c784:	add	w8, w8, w18
    c788:	add	w13, w13, w17
    c78c:	add	w18, w8, w6
    c790:	add	w8, w13, w8
    c794:	bic	w13, w14, w18
    c798:	and	w1, w15, w18
    c79c:	rev	w25, w2
    c7a0:	orr	w13, w1, w13
    c7a4:	add	w12, w25, w12
    c7a8:	add	w12, w12, w13
    c7ac:	eor	w13, w18, w18, ror #14
    c7b0:	eor	w13, w18, w13, ror #5
    c7b4:	ror	w13, w13, #6
    c7b8:	mov	w20, #0x82a4                	// #33444
    c7bc:	eor	w17, w10, w9
    c7c0:	add	w12, w12, w13
    c7c4:	eor	w13, w8, w8, ror #9
    c7c8:	movk	w20, #0x923f, lsl #16
    c7cc:	and	w1, w10, w9
    c7d0:	and	w17, w8, w17
    c7d4:	eor	w13, w8, w13, ror #11
    c7d8:	add	w17, w17, w1
    c7dc:	ror	w13, w13, #2
    c7e0:	add	w12, w12, w20
    c7e4:	add	w13, w17, w13
    c7e8:	add	w2, w12, w11
    c7ec:	eor	w17, w8, w10
    c7f0:	add	w11, w13, w12
    c7f4:	bic	w12, w15, w2
    c7f8:	and	w13, w18, w2
    c7fc:	rev	w5, w3
    c800:	orr	w12, w13, w12
    c804:	and	w13, w8, w10
    c808:	and	w17, w11, w17
    c80c:	add	w14, w5, w14
    c810:	add	w13, w17, w13
    c814:	eor	w17, w2, w2, ror #14
    c818:	add	w12, w14, w12
    c81c:	eor	w14, w11, w11, ror #9
    c820:	eor	w17, w2, w17, ror #5
    c824:	mov	w16, #0x5ed5                	// #24277
    c828:	ror	w17, w17, #6
    c82c:	eor	w14, w11, w14, ror #11
    c830:	movk	w16, #0xab1c, lsl #16
    c834:	add	w12, w12, w17
    c838:	ror	w14, w14, #2
    c83c:	add	w13, w13, w14
    c840:	add	w16, w12, w16
    c844:	eor	w17, w11, w8
    c848:	add	w12, w16, w9
    c84c:	add	w9, w13, w16
    c850:	and	w14, w11, w8
    c854:	bic	w13, w18, w12
    c858:	and	w16, w2, w12
    c85c:	and	w17, w9, w17
    c860:	orr	w13, w16, w13
    c864:	add	w14, w17, w14
    c868:	ldp	w16, w17, [x0, #32]
    c86c:	mov	w1, #0xaa98                	// #43672
    c870:	movk	w1, #0xd807, lsl #16
    c874:	rev	w20, w16
    c878:	add	w15, w20, w15
    c87c:	add	w13, w15, w13
    c880:	eor	w15, w12, w12, ror #14
    c884:	eor	w15, w12, w15, ror #5
    c888:	ror	w15, w15, #6
    c88c:	add	w13, w13, w15
    c890:	eor	w15, w9, w9, ror #9
    c894:	eor	w15, w9, w15, ror #11
    c898:	ror	w15, w15, #2
    c89c:	add	w13, w13, w1
    c8a0:	add	w14, w14, w15
    c8a4:	add	w15, w13, w10
    c8a8:	add	w10, w14, w13
    c8ac:	bic	w13, w2, w15
    c8b0:	and	w14, w12, w15
    c8b4:	rev	w3, w17
    c8b8:	orr	w13, w14, w13
    c8bc:	add	w17, w3, w18
    c8c0:	add	w13, w17, w13
    c8c4:	eor	w17, w15, w15, ror #14
    c8c8:	eor	w17, w15, w17, ror #5
    c8cc:	eor	w16, w9, w11
    c8d0:	ror	w17, w17, #6
    c8d4:	and	w14, w9, w11
    c8d8:	and	w16, w10, w16
    c8dc:	add	w13, w13, w17
    c8e0:	eor	w17, w10, w10, ror #9
    c8e4:	add	w14, w16, w14
    c8e8:	mov	w16, #0x5b01                	// #23297
    c8ec:	eor	w17, w10, w17, ror #11
    c8f0:	movk	w16, #0x1283, lsl #16
    c8f4:	ror	w17, w17, #2
    c8f8:	add	w14, w14, w17
    c8fc:	add	w13, w13, w16
    c900:	eor	w17, w10, w9
    c904:	add	w16, w13, w8
    c908:	add	w14, w14, w13
    c90c:	bic	w8, w12, w16
    c910:	and	w13, w15, w16
    c914:	and	w17, w14, w17
    c918:	and	w18, w10, w9
    c91c:	orr	w8, w13, w8
    c920:	add	w17, w17, w18
    c924:	ldp	w13, w18, [x0, #40]
    c928:	and	w1, w14, w10
    c92c:	rev	w7, w13
    c930:	add	w13, w7, w2
    c934:	add	w8, w13, w8
    c938:	eor	w13, w16, w16, ror #14
    c93c:	eor	w13, w16, w13, ror #5
    c940:	ror	w13, w13, #6
    c944:	add	w8, w8, w13
    c948:	eor	w13, w14, w14, ror #9
    c94c:	eor	w13, w14, w13, ror #11
    c950:	ror	w13, w13, #2
    c954:	add	w17, w17, w13
    c958:	mov	w13, #0x85be                	// #34238
    c95c:	movk	w13, #0x2431, lsl #16
    c960:	add	w8, w8, w13
    c964:	add	w13, w8, w11
    c968:	add	w11, w17, w8
    c96c:	bic	w8, w15, w13
    c970:	and	w17, w16, w13
    c974:	rev	w2, w18
    c978:	orr	w8, w17, w8
    c97c:	add	w12, w2, w12
    c980:	add	w8, w12, w8
    c984:	eor	w12, w13, w13, ror #14
    c988:	eor	w12, w13, w12, ror #5
    c98c:	ror	w12, w12, #6
    c990:	eor	w17, w14, w10
    c994:	add	w8, w8, w12
    c998:	eor	w12, w11, w11, ror #9
    c99c:	and	w17, w11, w17
    c9a0:	eor	w12, w11, w12, ror #11
    c9a4:	add	w17, w17, w1
    c9a8:	ror	w12, w12, #2
    c9ac:	add	w17, w17, w12
    c9b0:	mov	w12, #0x7dc3                	// #32195
    c9b4:	movk	w12, #0x550c, lsl #16
    c9b8:	add	w8, w8, w12
    c9bc:	add	w12, w8, w9
    c9c0:	add	w9, w17, w8
    c9c4:	bic	w8, w16, w12
    c9c8:	and	w17, w13, w12
    c9cc:	orr	w8, w17, w8
    c9d0:	eor	w17, w11, w14
    c9d4:	and	w17, w9, w17
    c9d8:	and	w1, w11, w14
    c9dc:	add	w17, w17, w1
    c9e0:	ldp	w18, w1, [x0, #48]
    c9e4:	str	x0, [sp, #40]
    c9e8:	rev	w4, w18
    c9ec:	add	w15, w4, w15
    c9f0:	add	w8, w15, w8
    c9f4:	eor	w15, w12, w12, ror #14
    c9f8:	eor	w15, w12, w15, ror #5
    c9fc:	ror	w15, w15, #6
    ca00:	add	w8, w8, w15
    ca04:	eor	w15, w9, w9, ror #9
    ca08:	eor	w15, w9, w15, ror #11
    ca0c:	ror	w15, w15, #2
    ca10:	add	w15, w17, w15
    ca14:	mov	w17, #0x5d74                	// #23924
    ca18:	movk	w17, #0x72be, lsl #16
    ca1c:	add	w17, w8, w17
    ca20:	add	w8, w17, w10
    ca24:	add	w24, w15, w17
    ca28:	bic	w10, w13, w8
    ca2c:	and	w15, w12, w8
    ca30:	rev	w1, w1
    ca34:	orr	w10, w15, w10
    ca38:	add	w16, w1, w16
    ca3c:	add	w10, w16, w10
    ca40:	eor	w16, w8, w8, ror #14
    ca44:	eor	w16, w8, w16, ror #5
    ca48:	ror	w16, w16, #6
    ca4c:	eor	w15, w9, w11
    ca50:	add	w10, w10, w16
    ca54:	eor	w16, w24, w24, ror #9
    ca58:	and	w15, w24, w15
    ca5c:	and	w17, w9, w11
    ca60:	eor	w16, w24, w16, ror #11
    ca64:	add	w15, w15, w17
    ca68:	ror	w16, w16, #2
    ca6c:	add	w15, w15, w16
    ca70:	mov	w16, #0xb1fe                	// #45566
    ca74:	movk	w16, #0x80de, lsl #16
    ca78:	add	w16, w10, w16
    ca7c:	add	w10, w16, w14
    ca80:	add	w21, w15, w16
    ca84:	bic	w14, w12, w10
    ca88:	and	w15, w8, w10
    ca8c:	orr	w14, w15, w14
    ca90:	eor	w15, w24, w9
    ca94:	and	w15, w21, w15
    ca98:	and	w17, w24, w9
    ca9c:	add	w15, w15, w17
    caa0:	ldp	w16, w17, [x0, #56]
    caa4:	rev	w0, w16
    caa8:	add	w13, w0, w13
    caac:	add	w13, w13, w14
    cab0:	eor	w14, w10, w10, ror #14
    cab4:	eor	w14, w10, w14, ror #5
    cab8:	ror	w14, w14, #6
    cabc:	add	w13, w13, w14
    cac0:	eor	w14, w21, w21, ror #9
    cac4:	eor	w14, w21, w14, ror #11
    cac8:	ror	w14, w14, #2
    cacc:	add	w14, w15, w14
    cad0:	mov	w15, #0x6a7                 	// #1703
    cad4:	movk	w15, #0x9bdc, lsl #16
    cad8:	add	w13, w13, w15
    cadc:	add	w15, w13, w11
    cae0:	add	w26, w14, w13
    cae4:	bic	w11, w8, w15
    cae8:	and	w13, w10, w15
    caec:	rev	w18, w17
    caf0:	orr	w11, w13, w11
    caf4:	add	w12, w18, w12
    caf8:	add	w11, w12, w11
    cafc:	eor	w12, w15, w15, ror #14
    cb00:	eor	w12, w15, w12, ror #5
    cb04:	ror	w12, w12, #6
    cb08:	eor	w13, w21, w24
    cb0c:	add	w11, w11, w12
    cb10:	eor	w12, w26, w26, ror #9
    cb14:	and	w13, w26, w13
    cb18:	and	w14, w21, w24
    cb1c:	eor	w12, w26, w12, ror #11
    cb20:	add	w13, w13, w14
    cb24:	ror	w12, w12, #2
    cb28:	add	w12, w13, w12
    cb2c:	mov	w13, #0xf174                	// #61812
    cb30:	movk	w13, #0xc19b, lsl #16
    cb34:	add	w13, w11, w13
    cb38:	adrp	x17, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
    cb3c:	add	w11, w13, w9
    cb40:	add	w29, w12, w13
    cb44:	add	x17, x17, #0xa2c
    cb48:	bic	w12, w10, w11
    cb4c:	and	w13, w15, w11
    cb50:	eor	w9, w11, w11, ror #14
    cb54:	orr	w12, w13, w12
    cb58:	eor	w13, w21, w26
    cb5c:	add	w8, w12, w8
    cb60:	and	w12, w21, w26
    cb64:	and	w13, w13, w29
    cb68:	eor	w9, w11, w9, ror #5
    cb6c:	add	w12, w13, w12
    cb70:	eor	w13, w29, w29, ror #9
    cb74:	ror	w9, w9, #6
    cb78:	add	w8, w8, w9
    cb7c:	eor	w9, w29, w13, ror #11
    cb80:	ror	w9, w9, #2
    cb84:	add	w9, w12, w9
    cb88:	eor	w14, w0, w0, ror #2
    cb8c:	str	w9, [sp, #64]
    cb90:	eor	w9, w22, w22, ror #11
    cb94:	str	w14, [sp, #68]
    cb98:	eor	w14, w28, w28, ror #11
    cb9c:	ror	w9, w9, #7
    cba0:	ror	w14, w14, #7
    cba4:	eor	w9, w9, w22, lsr #3
    cba8:	eor	w14, w14, w28, lsr #3
    cbac:	add	w28, w9, w28
    cbb0:	eor	w9, w19, w19, ror #11
    cbb4:	eor	w13, w27, w27, ror #11
    cbb8:	ror	w9, w9, #7
    cbbc:	ror	w13, w13, #7
    cbc0:	eor	w9, w9, w19, lsr #3
    cbc4:	eor	w13, w13, w27, lsr #3
    cbc8:	add	w9, w9, w22
    cbcc:	eor	w12, w23, w23, ror #11
    cbd0:	add	w22, w13, w23
    cbd4:	eor	w13, w25, w25, ror #11
    cbd8:	ror	w12, w12, #7
    cbdc:	ror	w13, w13, #7
    cbe0:	eor	w12, w12, w23, lsr #3
    cbe4:	eor	w13, w13, w25, lsr #3
    cbe8:	add	w12, w12, w19
    cbec:	add	w19, w13, w27
    cbf0:	eor	w13, w5, w5, ror #11
    cbf4:	ror	w13, w13, #7
    cbf8:	eor	w13, w13, w5, lsr #3
    cbfc:	add	w23, w13, w25
    cc00:	eor	w13, w20, w20, ror #11
    cc04:	ror	w13, w13, #7
    cc08:	eor	w13, w13, w20, lsr #3
    cc0c:	add	w14, w14, w30
    cc10:	ldp	w16, w30, [x17, #-60]
    cc14:	add	w6, w13, w5
    cc18:	eor	w13, w3, w3, ror #11
    cc1c:	ror	w13, w13, #7
    cc20:	eor	w13, w13, w3, lsr #3
    cc24:	add	w20, w13, w20
    cc28:	eor	w13, w7, w7, ror #11
    cc2c:	ror	w13, w13, #7
    cc30:	add	w5, w14, w3
    cc34:	add	w14, w8, w16
    cc38:	eor	w8, w2, w2, ror #11
    cc3c:	eor	w13, w13, w7, lsr #3
    cc40:	ror	w8, w8, #7
    cc44:	add	w16, w30, w10
    cc48:	eor	w10, w4, w4, ror #11
    cc4c:	add	w13, w13, w3
    cc50:	eor	w8, w8, w2, lsr #3
    cc54:	ror	w10, w10, #7
    cc58:	add	w3, w9, w2
    cc5c:	eor	w9, w1, w1, ror #11
    cc60:	add	w8, w8, w7
    cc64:	eor	w10, w10, w4, lsr #3
    cc68:	ror	w9, w9, #7
    cc6c:	stp	w8, w13, [sp, #56]
    cc70:	add	w8, w10, w2
    cc74:	eor	w9, w9, w1, lsr #3
    cc78:	str	w8, [sp, #52]
    cc7c:	add	w10, w9, w4
    cc80:	ldp	w9, w8, [sp, #64]
    cc84:	add	w4, w12, w4
    cc88:	eor	w12, w0, w0, ror #11
    cc8c:	ror	w12, w12, #7
    cc90:	eor	w12, w12, w0, lsr #3
    cc94:	eor	w25, w18, w18, ror #2
    cc98:	add	w12, w12, w1
    cc9c:	add	w1, w22, w1
    cca0:	ror	w22, w8, #17
    cca4:	eor	w22, w22, w0, lsr #10
    cca8:	ror	w25, w25, #17
    ccac:	add	w30, w5, w22
    ccb0:	eor	w22, w25, w18, lsr #10
    ccb4:	ldp	w5, w25, [x17, #-52]
    ccb8:	eor	w13, w18, w18, ror #11
    ccbc:	ror	w13, w13, #7
    ccc0:	add	w14, w14, w30
    ccc4:	add	w27, w28, w7
    ccc8:	eor	w13, w13, w18, lsr #3
    cccc:	add	w24, w14, w24
    ccd0:	add	w13, w13, w0
    ccd4:	add	w2, w19, w0
    ccd8:	add	w0, w27, w22
    ccdc:	add	w5, w5, w15
    cce0:	bic	w15, w15, w24
    cce4:	and	w22, w11, w24
    cce8:	add	w8, w23, w18
    ccec:	orr	w23, w22, w15
    ccf0:	add	w16, w16, w0
    ccf4:	add	w16, w16, w23
    ccf8:	eor	w23, w24, w24, ror #14
    ccfc:	eor	w23, w24, w23, ror #5
    cd00:	add	w14, w9, w14
    cd04:	ror	w23, w23, #6
    cd08:	eor	w7, w26, w29
    cd0c:	eor	w15, w30, w30, ror #2
    cd10:	add	w16, w16, w23
    cd14:	eor	w23, w14, w14, ror #9
    cd18:	and	w19, w26, w29
    cd1c:	and	w7, w14, w7
    cd20:	ror	w15, w15, #17
    cd24:	eor	w23, w14, w23, ror #11
    cd28:	add	w7, w7, w19
    cd2c:	eor	w15, w15, w30, lsr #10
    cd30:	ror	w23, w23, #2
    cd34:	eor	w19, w0, w0, ror #2
    cd38:	add	w28, w3, w15
    cd3c:	add	w7, w7, w23
    cd40:	ror	w3, w19, #17
    cd44:	add	w21, w16, w21
    cd48:	add	w16, w7, w16
    cd4c:	eor	w7, w28, w28, ror #2
    cd50:	eor	w3, w3, w0, lsr #10
    cd54:	ror	w7, w7, #17
    cd58:	add	w22, w4, w3
    cd5c:	eor	w7, w7, w28, lsr #10
    cd60:	add	w23, w1, w7
    cd64:	eor	w1, w22, w22, ror #2
    cd68:	ror	w1, w1, #17
    cd6c:	eor	w1, w1, w22, lsr #10
    cd70:	add	w4, w25, w11
    cd74:	eor	w25, w14, w29
    cd78:	bic	w11, w11, w21
    cd7c:	add	w27, w2, w1
    cd80:	and	w1, w24, w21
    cd84:	orr	w11, w1, w11
    cd88:	and	w1, w14, w29
    cd8c:	add	w2, w5, w28
    cd90:	and	w5, w16, w25
    cd94:	add	w1, w5, w1
    cd98:	eor	w5, w21, w21, ror #14
    cd9c:	add	w11, w2, w11
    cda0:	eor	w2, w16, w16, ror #9
    cda4:	eor	w5, w21, w5, ror #5
    cda8:	eor	w2, w16, w2, ror #11
    cdac:	ror	w5, w5, #6
    cdb0:	ror	w2, w2, #2
    cdb4:	add	w11, w11, w5
    cdb8:	add	w1, w1, w2
    cdbc:	add	w26, w11, w26
    cdc0:	add	w11, w1, w11
    cdc4:	eor	w1, w23, w23, ror #2
    cdc8:	ror	w1, w1, #17
    cdcc:	eor	w1, w1, w23, lsr #10
    cdd0:	add	w25, w8, w1
    cdd4:	eor	w8, w27, w27, ror #2
    cdd8:	ror	w8, w8, #17
    cddc:	add	w6, w6, w30
    cde0:	eor	w8, w8, w27, lsr #10
    cde4:	add	w19, w6, w8
    cde8:	bic	w8, w24, w26
    cdec:	and	w1, w21, w26
    cdf0:	orr	w8, w1, w8
    cdf4:	add	w4, w4, w22
    cdf8:	add	w8, w4, w8
    cdfc:	eor	w4, w26, w26, ror #14
    ce00:	eor	w4, w26, w4, ror #5
    ce04:	eor	w15, w30, w30, ror #11
    ce08:	ror	w4, w4, #6
    ce0c:	ror	w15, w15, #7
    ce10:	eor	w5, w16, w14
    ce14:	add	w8, w8, w4
    ce18:	eor	w4, w11, w11, ror #9
    ce1c:	eor	w15, w15, w30, lsr #3
    ce20:	and	w2, w16, w14
    ce24:	and	w5, w11, w5
    ce28:	ldr	w9, [sp, #60]
    ce2c:	eor	w4, w11, w4, ror #11
    ce30:	add	w15, w15, w18
    ce34:	ldp	w18, w3, [x17, #-44]
    ce38:	add	w1, w5, w2
    ce3c:	ror	w4, w4, #2
    ce40:	add	w1, w1, w4
    ce44:	eor	w4, w25, w25, ror #2
    ce48:	ror	w4, w4, #17
    ce4c:	add	w5, w20, w0
    ce50:	add	w7, w9, w28
    ce54:	ldr	w9, [sp, #56]
    ce58:	eor	w4, w4, w25, lsr #10
    ce5c:	add	w18, w24, w18
    ce60:	ldp	w2, w24, [x17, #-36]
    ce64:	add	w20, w5, w4
    ce68:	eor	w4, w19, w19, ror #2
    ce6c:	ror	w4, w4, #17
    ce70:	eor	w4, w4, w19, lsr #10
    ce74:	add	w29, w8, w29
    ce78:	str	w0, [sp, #68]
    ce7c:	add	w0, w9, w22
    ce80:	add	w9, w21, w3
    ce84:	ldr	w3, [sp, #52]
    ce88:	add	w6, w7, w4
    ce8c:	add	w8, w1, w8
    ce90:	bic	w1, w21, w29
    ce94:	and	w7, w26, w29
    ce98:	add	w18, w18, w23
    ce9c:	eor	w4, w11, w16
    cea0:	orr	w1, w7, w1
    cea4:	add	w2, w25, w2
    cea8:	add	w21, w2, w26
    ceac:	and	w2, w8, w4
    ceb0:	eor	w4, w20, w20, ror #2
    ceb4:	add	w18, w18, w1
    ceb8:	eor	w1, w6, w6, ror #2
    cebc:	ror	w4, w4, #17
    cec0:	ror	w1, w1, #17
    cec4:	add	w3, w3, w23
    cec8:	and	w7, w11, w16
    cecc:	eor	w4, w4, w20, lsr #10
    ced0:	eor	w1, w1, w6, lsr #10
    ced4:	add	w2, w2, w7
    ced8:	add	w7, w0, w4
    cedc:	eor	w0, w29, w29, ror #14
    cee0:	add	w5, w3, w1
    cee4:	eor	w1, w8, w8, ror #9
    cee8:	eor	w0, w29, w0, ror #5
    ceec:	eor	w1, w8, w1, ror #11
    cef0:	ror	w0, w0, #6
    cef4:	ror	w1, w1, #2
    cef8:	add	w18, w18, w0
    cefc:	add	w1, w2, w1
    cf00:	eor	w0, w8, w11
    cf04:	add	w14, w18, w14
    cf08:	add	w18, w1, w18
    cf0c:	and	w2, w8, w11
    cf10:	bic	w1, w26, w14
    cf14:	and	w4, w29, w14
    cf18:	and	w0, w18, w0
    cf1c:	orr	w26, w4, w1
    cf20:	eor	w1, w7, w7, ror #2
    cf24:	add	w0, w0, w2
    cf28:	eor	w2, w5, w5, ror #2
    cf2c:	ror	w1, w1, #17
    cf30:	ror	w2, w2, #17
    cf34:	add	w10, w10, w27
    cf38:	add	w12, w12, w25
    cf3c:	eor	w1, w1, w7, lsr #10
    cf40:	eor	w2, w2, w5, lsr #10
    cf44:	add	w4, w10, w1
    cf48:	add	w1, w12, w2
    cf4c:	add	w2, w19, w24
    cf50:	add	w24, w2, w29
    cf54:	eor	w2, w14, w14, ror #14
    cf58:	add	w9, w9, w27
    cf5c:	eor	w2, w14, w2, ror #5
    cf60:	add	w9, w9, w26
    cf64:	ror	w2, w2, #6
    cf68:	add	w9, w9, w2
    cf6c:	eor	w2, w18, w18, ror #9
    cf70:	eor	w2, w18, w2, ror #11
    cf74:	ror	w2, w2, #2
    cf78:	add	w0, w0, w2
    cf7c:	add	w16, w9, w16
    cf80:	add	w9, w0, w9
    cf84:	eor	w0, w4, w4, ror #2
    cf88:	ror	w0, w0, #17
    cf8c:	add	w13, w13, w19
    cf90:	eor	w0, w0, w4, lsr #10
    cf94:	add	w3, w13, w0
    cf98:	eor	w13, w1, w1, ror #2
    cf9c:	ror	w13, w13, #17
    cfa0:	add	w15, w15, w20
    cfa4:	eor	w26, w18, w8
    cfa8:	eor	w13, w13, w1, lsr #10
    cfac:	bic	w29, w29, w16
    cfb0:	add	w2, w15, w13
    cfb4:	and	w13, w14, w16
    cfb8:	and	w15, w18, w8
    cfbc:	and	w26, w9, w26
    cfc0:	ldp	w10, w12, [x17, #-28]
    cfc4:	orr	w13, w13, w29
    cfc8:	add	w15, w26, w15
    cfcc:	eor	w26, w16, w16, ror #14
    cfd0:	add	w13, w21, w13
    cfd4:	eor	w21, w9, w9, ror #9
    cfd8:	eor	w26, w16, w26, ror #5
    cfdc:	ror	w26, w26, #6
    cfe0:	eor	w21, w9, w21, ror #11
    cfe4:	add	w13, w13, w26
    cfe8:	ror	w21, w21, #2
    cfec:	add	w10, w20, w10
    cff0:	add	w15, w15, w21
    cff4:	add	w11, w13, w11
    cff8:	add	w10, w10, w14
    cffc:	add	w13, w15, w13
    d000:	bic	w14, w14, w11
    d004:	and	w15, w16, w11
    d008:	orr	w14, w15, w14
    d00c:	add	w14, w24, w14
    d010:	eor	w24, w11, w11, ror #14
    d014:	eor	w24, w11, w24, ror #5
    d018:	ror	w24, w24, #6
    d01c:	eor	w26, w9, w18
    d020:	add	w14, w14, w24
    d024:	eor	w24, w13, w13, ror #9
    d028:	and	w21, w9, w18
    d02c:	and	w26, w13, w26
    d030:	eor	w24, w13, w24, ror #11
    d034:	add	w21, w26, w21
    d038:	ror	w24, w24, #2
    d03c:	add	w12, w6, w12
    d040:	add	w21, w21, w24
    d044:	add	w8, w14, w8
    d048:	add	w12, w12, w16
    d04c:	eor	w24, w13, w9
    d050:	add	w14, w21, w14
    d054:	bic	w16, w16, w8
    d058:	and	w21, w11, w8
    d05c:	orr	w16, w21, w16
    d060:	and	w21, w13, w9
    d064:	and	w24, w14, w24
    d068:	ldp	w15, w26, [x17, #-20]
    d06c:	add	w21, w24, w21
    d070:	eor	w24, w8, w8, ror #14
    d074:	add	w10, w10, w16
    d078:	eor	w16, w14, w14, ror #9
    d07c:	eor	w24, w8, w24, ror #5
    d080:	ror	w24, w24, #6
    d084:	eor	w16, w14, w16, ror #11
    d088:	add	w10, w10, w24
    d08c:	ror	w16, w16, #2
    d090:	add	w15, w7, w15
    d094:	add	w16, w21, w16
    d098:	add	w18, w10, w18
    d09c:	add	w15, w15, w11
    d0a0:	add	w10, w16, w10
    d0a4:	bic	w11, w11, w18
    d0a8:	and	w16, w8, w18
    d0ac:	orr	w11, w16, w11
    d0b0:	add	w11, w12, w11
    d0b4:	eor	w12, w18, w18, ror #14
    d0b8:	eor	w12, w18, w12, ror #5
    d0bc:	ror	w12, w12, #6
    d0c0:	eor	w24, w14, w13
    d0c4:	add	w11, w11, w12
    d0c8:	eor	w12, w10, w10, ror #9
    d0cc:	and	w21, w14, w13
    d0d0:	and	w24, w10, w24
    d0d4:	eor	w12, w10, w12, ror #11
    d0d8:	add	w16, w24, w21
    d0dc:	ror	w12, w12, #2
    d0e0:	add	w26, w5, w26
    d0e4:	add	w12, w16, w12
    d0e8:	add	w9, w11, w9
    d0ec:	add	w26, w26, w8
    d0f0:	add	w11, w12, w11
    d0f4:	bic	w8, w8, w9
    d0f8:	and	w12, w18, w9
    d0fc:	orr	w8, w12, w8
    d100:	add	w8, w15, w8
    d104:	eor	w15, w9, w9, ror #14
    d108:	eor	w15, w9, w15, ror #5
    d10c:	ldp	w21, w24, [x17, #-12]
    d110:	ror	w15, w15, #6
    d114:	eor	w16, w10, w14
    d118:	add	w8, w8, w15
    d11c:	eor	w15, w11, w11, ror #9
    d120:	and	w12, w10, w14
    d124:	and	w16, w11, w16
    d128:	eor	w15, w11, w15, ror #11
    d12c:	add	w12, w16, w12
    d130:	ror	w15, w15, #2
    d134:	add	w21, w4, w21
    d138:	add	w12, w12, w15
    d13c:	add	w13, w8, w13
    d140:	add	w24, w1, w24
    d144:	add	w21, w21, w18
    d148:	add	w12, w12, w8
    d14c:	bic	w8, w18, w13
    d150:	and	w18, w9, w13
    d154:	add	w29, w24, w9
    d158:	eor	w24, w13, w13, ror #14
    d15c:	orr	w8, w18, w8
    d160:	eor	w24, w13, w24, ror #5
    d164:	ldr	x0, [sp, #72]
    d168:	add	w8, w26, w8
    d16c:	ror	w24, w24, #6
    d170:	ldur	w16, [x17, #-4]
    d174:	eor	w15, w11, w10
    d178:	add	w8, w8, w24
    d17c:	eor	w24, w12, w12, ror #9
    d180:	and	w18, w11, w10
    d184:	and	w15, w12, w15
    d188:	eor	w24, w12, w24, ror #11
    d18c:	add	w15, w15, w18
    d190:	ror	w24, w24, #2
    d194:	add	x0, x0, #0x10
    d198:	add	w15, w15, w24
    d19c:	add	w14, w8, w14
    d1a0:	str	x0, [sp, #72]
    d1a4:	cmp	x0, #0x30
    d1a8:	add	w16, w3, w16
    d1ac:	eor	w24, w12, w11
    d1b0:	add	w0, w15, w8
    d1b4:	bic	w8, w9, w14
    d1b8:	and	w9, w13, w14
    d1bc:	orr	w8, w9, w8
    d1c0:	and	w9, w12, w11
    d1c4:	add	w15, w16, w13
    d1c8:	and	w16, w0, w24
    d1cc:	add	w9, w16, w9
    d1d0:	eor	w16, w14, w14, ror #14
    d1d4:	eor	w16, w14, w16, ror #5
    d1d8:	add	w8, w21, w8
    d1dc:	eor	w21, w0, w0, ror #9
    d1e0:	ror	w16, w16, #6
    d1e4:	add	w16, w8, w16
    d1e8:	eor	w8, w0, w21, ror #11
    d1ec:	ror	w8, w8, #2
    d1f0:	add	w9, w9, w8
    d1f4:	add	w8, w16, w10
    d1f8:	add	w24, w9, w16
    d1fc:	bic	w9, w13, w8
    d200:	and	w10, w14, w8
    d204:	orr	w9, w10, w9
    d208:	eor	w10, w8, w8, ror #14
    d20c:	eor	w10, w8, w10, ror #5
    d210:	eor	w26, w0, w12
    d214:	eor	w16, w24, w24, ror #9
    d218:	add	w9, w29, w9
    d21c:	ror	w10, w10, #6
    d220:	ldr	w18, [x17]
    d224:	and	w21, w0, w12
    d228:	and	w13, w24, w26
    d22c:	add	w9, w9, w10
    d230:	eor	w10, w24, w16, ror #11
    d234:	add	w13, w13, w21
    d238:	ror	w10, w10, #2
    d23c:	add	w13, w13, w10
    d240:	add	w10, w9, w11
    d244:	add	w21, w13, w9
    d248:	eor	w9, w10, w10, ror #14
    d24c:	bic	w11, w14, w10
    d250:	and	w13, w8, w10
    d254:	add	w18, w2, w18
    d258:	eor	w26, w24, w0
    d25c:	orr	w11, w13, w11
    d260:	eor	w13, w21, w21, ror #9
    d264:	eor	w9, w10, w9, ror #5
    d268:	add	w18, w18, w14
    d26c:	and	w29, w24, w0
    d270:	and	w14, w21, w26
    d274:	add	w11, w15, w11
    d278:	eor	w13, w21, w13, ror #11
    d27c:	ror	w9, w9, #6
    d280:	add	w14, w14, w29
    d284:	ror	w13, w13, #2
    d288:	add	w9, w11, w9
    d28c:	add	w11, w14, w13
    d290:	add	w15, w9, w12
    d294:	add	w26, w11, w9
    d298:	bic	w11, w8, w15
    d29c:	and	w12, w10, w15
    d2a0:	eor	w16, w21, w24
    d2a4:	eor	w9, w15, w15, ror #14
    d2a8:	orr	w11, w12, w11
    d2ac:	eor	w12, w26, w26, ror #9
    d2b0:	and	w29, w21, w24
    d2b4:	and	w13, w26, w16
    d2b8:	eor	w9, w15, w9, ror #5
    d2bc:	eor	w12, w26, w12, ror #11
    d2c0:	add	w11, w18, w11
    d2c4:	mov	w18, w2
    d2c8:	mov	w2, w5
    d2cc:	mov	w5, w19
    d2d0:	mov	w19, w22
    d2d4:	mov	w22, w28
    d2d8:	ldr	w28, [sp, #68]
    d2dc:	add	w13, w13, w29
    d2e0:	ror	w9, w9, #6
    d2e4:	ror	w12, w12, #2
    d2e8:	add	w9, w11, w9
    d2ec:	add	w12, w13, w12
    d2f0:	add	w11, w9, w0
    d2f4:	mov	w0, w3
    d2f8:	mov	w3, w6
    d2fc:	add	w29, w12, w9
    d300:	add	x17, x17, #0x40
    d304:	b.cc	cb48 <lzma_crc64@@XZ_5.0+0x7b0>  // b.lo, b.ul, b.last
    d308:	ldr	w16, [sp, #20]
    d30c:	ldp	w12, w9, [sp, #32]
    d310:	ldp	w14, w13, [sp, #24]
    d314:	add	w11, w11, w16
    d318:	ldr	w16, [sp, #16]
    d31c:	add	w9, w29, w9
    d320:	add	w12, w26, w12
    d324:	add	w13, w21, w13
    d328:	add	w15, w15, w16
    d32c:	ldr	w16, [sp, #12]
    d330:	add	w14, w24, w14
    d334:	add	w10, w10, w16
    d338:	ldr	w16, [sp, #8]
    d33c:	add	w8, w8, w16
    d340:	ldr	x16, [sp, #40]
    d344:	stp	w9, w12, [x16, #64]
    d348:	stp	w13, w14, [x16, #72]
    d34c:	stp	w11, w15, [x16, #80]
    d350:	stp	w10, w8, [x16, #88]
    d354:	ldp	x20, x19, [sp, #160]
    d358:	ldp	x22, x21, [sp, #144]
    d35c:	ldp	x24, x23, [sp, #128]
    d360:	ldp	x26, x25, [sp, #112]
    d364:	ldp	x28, x27, [sp, #96]
    d368:	ldp	x29, x30, [sp, #80]
    d36c:	add	sp, sp, #0xb0
    d370:	ret
    d374:	stp	x29, x30, [sp, #-32]!
    d378:	ldr	x8, [x0, #96]
    d37c:	str	x19, [sp, #16]
    d380:	mov	x19, x0
    d384:	mov	w9, #0x80                  	// #128
    d388:	and	x8, x8, #0x3f
    d38c:	mov	x29, sp
    d390:	b	d3a4 <lzma_crc64@@XZ_5.0+0x100c>
    d394:	mov	x0, x19
    d398:	bl	c514 <lzma_crc64@@XZ_5.0+0x17c>
    d39c:	mov	x8, xzr
    d3a0:	mov	w9, wzr
    d3a4:	cmp	x8, #0x3f
    d3a8:	add	x10, x8, #0x1
    d3ac:	strb	w9, [x19, x8]
    d3b0:	b.eq	d394 <lzma_crc64@@XZ_5.0+0xffc>  // b.none
    d3b4:	mov	w9, wzr
    d3b8:	cmp	x8, #0x37
    d3bc:	mov	x8, x10
    d3c0:	b.ne	d3a4 <lzma_crc64@@XZ_5.0+0x100c>  // b.any
    d3c4:	ldr	x8, [x19, #96]
    d3c8:	mov	x0, x19
    d3cc:	lsl	x8, x8, #3
    d3d0:	str	x8, [x19, #96]
    d3d4:	rev	x8, x8
    d3d8:	str	x8, [x19, #56]
    d3dc:	bl	c514 <lzma_crc64@@XZ_5.0+0x17c>
    d3e0:	ldp	w8, w9, [x19, #64]
    d3e4:	ldp	w10, w11, [x19, #72]
    d3e8:	rev	w8, w8
    d3ec:	rev	w9, w9
    d3f0:	stp	w8, w9, [x19]
    d3f4:	ldp	w8, w9, [x19, #80]
    d3f8:	rev	w10, w10
    d3fc:	rev	w11, w11
    d400:	stp	w10, w11, [x19, #8]
    d404:	ldp	w10, w11, [x19, #88]
    d408:	rev	w8, w8
    d40c:	rev	w9, w9
    d410:	stp	w8, w9, [x19, #16]
    d414:	rev	w8, w10
    d418:	rev	w9, w11
    d41c:	stp	w8, w9, [x19, #24]
    d420:	ldr	x19, [sp, #16]
    d424:	ldp	x29, x30, [sp], #32
    d428:	ret
    d42c:	sub	sp, sp, #0x90
    d430:	mov	x2, x0
    d434:	movi	v0.2d, #0x0
    d438:	mov	x0, sp
    d43c:	mov	x1, xzr
    d440:	stp	x29, x30, [sp, #128]
    d444:	add	x29, sp, #0x80
    d448:	str	xzr, [sp, #112]
    d44c:	stp	q0, q0, [sp, #80]
    d450:	stp	q0, q0, [sp, #48]
    d454:	stp	q0, q0, [sp, #16]
    d458:	str	q0, [sp]
    d45c:	bl	d48c <lzma_crc64@@XZ_5.0+0x10f4>
    d460:	tbz	w0, #0, d46c <lzma_crc64@@XZ_5.0+0x10d4>
    d464:	mov	x0, #0xffffffffffffffff    	// #-1
    d468:	b	d480 <lzma_crc64@@XZ_5.0+0x10e8>
    d46c:	ldp	w9, w8, [sp, #108]
    d470:	ldr	w10, [sp, #8]
    d474:	add	x8, x8, x9
    d478:	add	x8, x10, x8, lsl #2
    d47c:	add	x0, x8, #0xe0
    d480:	ldp	x29, x30, [sp, #128]
    d484:	add	sp, sp, #0x90
    d488:	ret
    d48c:	stp	x29, x30, [sp, #-48]!
    d490:	stp	x22, x21, [sp, #16]
    d494:	stp	x20, x19, [sp, #32]
    d498:	ldr	x8, [x2, #8]
    d49c:	mov	w10, #0xf000                	// #61440
    d4a0:	movk	w10, #0x5fff, lsl #16
    d4a4:	mov	x29, sp
    d4a8:	sub	x9, x8, #0x1, lsl #12
    d4ac:	cmp	x9, x10
    d4b0:	b.hi	d5e0 <lzma_crc64@@XZ_5.0+0x1248>  // b.pmore
    d4b4:	ldp	x10, x9, [x2, #24]
    d4b8:	mov	x20, x2
    d4bc:	cmp	x9, x10
    d4c0:	b.hi	d5e0 <lzma_crc64@@XZ_5.0+0x1248>  // b.pmore
    d4c4:	ldr	x12, [x20]
    d4c8:	lsr	x13, x8, #1
    d4cc:	mov	w11, #0x40000000            	// #1073741824
    d4d0:	lsr	x14, x8, #2
    d4d4:	add	w15, w12, w8
    d4d8:	str	w15, [x0, #12]
    d4dc:	ldr	x16, [x20, #16]
    d4e0:	cmp	w13, w11
    d4e4:	csel	w13, w14, w13, hi  // hi = pmore
    d4e8:	mov	x19, x0
    d4ec:	add	x14, x16, x10
    d4f0:	add	x12, x14, x12
    d4f4:	ldr	w11, [x0, #8]
    d4f8:	add	w13, w13, w15
    d4fc:	str	w14, [x0, #16]
    d500:	lsr	x12, x12, #1
    d504:	ldr	x0, [x0]
    d508:	add	w12, w13, w12
    d50c:	add	w12, w12, w14
    d510:	mov	x21, x1
    d514:	add	w12, w12, #0x80, lsl #12
    d518:	str	w12, [x19, #8]
    d51c:	cbz	x0, d53c <lzma_crc64@@XZ_5.0+0x11a4>
    d520:	cmp	w11, w12
    d524:	b.eq	d53c <lzma_crc64@@XZ_5.0+0x11a4>  // b.none
    d528:	mov	x1, x21
    d52c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    d530:	str	xzr, [x19]
    d534:	ldp	x10, x9, [x20, #24]
    d538:	ldr	x8, [x20, #8]
    d53c:	stp	w9, w10, [x19, #96]
    d540:	add	w10, w8, #0x1
    d544:	str	w10, [x19, #84]
    d548:	ldr	w11, [x20, #40]
    d54c:	mov	w0, #0x1                   	// #1
    d550:	sub	w12, w11, #0x3
    d554:	cmp	w12, #0x11
    d558:	b.hi	d5e4 <lzma_crc64@@XZ_5.0+0x124c>  // b.pmore
    d55c:	adrp	x14, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
    d560:	adrp	x13, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d564:	add	x14, x14, #0xab0
    d568:	ldr	x13, [x13, #3912]
    d56c:	adr	x15, d584 <lzma_crc64@@XZ_5.0+0x11ec>
    d570:	ldrb	w16, [x14, x12]
    d574:	add	x15, x15, x16, lsl #2
    d578:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d57c:	ldr	x14, [x14, #3896]
    d580:	br	x15
    d584:	adrp	x13, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d588:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d58c:	ldr	x13, [x13, #4024]
    d590:	ldr	x14, [x14, #4064]
    d594:	b	d5d0 <lzma_crc64@@XZ_5.0+0x1238>
    d598:	adrp	x13, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d59c:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d5a0:	ldr	x13, [x13, #4032]
    d5a4:	ldr	x14, [x14, #4048]
    d5a8:	b	d5d0 <lzma_crc64@@XZ_5.0+0x1238>
    d5ac:	adrp	x13, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d5b0:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d5b4:	ldr	x13, [x13, #3928]
    d5b8:	ldr	x14, [x14, #3888]
    d5bc:	b	d5d0 <lzma_crc64@@XZ_5.0+0x1238>
    d5c0:	adrp	x13, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d5c4:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    d5c8:	ldr	x13, [x13, #4000]
    d5cc:	ldr	x14, [x14, #4016]
    d5d0:	and	w12, w11, #0xf
    d5d4:	cmp	w12, w9
    d5d8:	stp	x14, x13, [x19, #48]
    d5dc:	b.ls	d5f4 <lzma_crc64@@XZ_5.0+0x125c>  // b.plast
    d5e0:	mov	w0, #0x1                   	// #1
    d5e4:	ldp	x20, x19, [sp, #32]
    d5e8:	ldp	x22, x21, [sp, #16]
    d5ec:	ldp	x29, x30, [sp], #48
    d5f0:	ret
    d5f4:	cmp	w12, #0x2
    d5f8:	and	w22, w11, #0x10
    d5fc:	b.ne	d608 <lzma_crc64@@XZ_5.0+0x1270>  // b.any
    d600:	mov	w8, #0xffff                	// #65535
    d604:	b	d644 <lzma_crc64@@XZ_5.0+0x12ac>
    d608:	sub	w8, w8, #0x1
    d60c:	orr	w8, w8, w8, lsr #1
    d610:	orr	w8, w8, w8, lsr #2
    d614:	orr	w8, w8, w8, lsr #4
    d618:	lsr	w9, w8, #1
    d61c:	orr	w8, w9, w8, lsr #9
    d620:	mov	w9, #0x1                   	// #1
    d624:	orr	w8, w8, #0xffff
    d628:	movk	w9, #0x100, lsl #16
    d62c:	cmp	w8, w9
    d630:	b.cc	d644 <lzma_crc64@@XZ_5.0+0x12ac>  // b.lo, b.ul, b.last
    d634:	lsr	w8, w8, #1
    d638:	cmp	w12, #0x3
    d63c:	mov	w9, #0xffffff              	// #16777215
    d640:	csel	w8, w9, w8, eq  // eq = none
    d644:	cmp	w12, #0x2
    d648:	mov	w11, #0x401                 	// #1025
    d64c:	ldp	w13, w9, [x19, #108]
    d650:	csinc	w11, w11, wzr, hi  // hi = pmore
    d654:	str	w8, [x19, #88]
    d658:	add	w8, w8, w11
    d65c:	cmp	w12, #0x3
    d660:	add	w11, w8, #0x10, lsl #12
    d664:	lsr	w14, w22, #4
    d668:	csel	w8, w11, w8, hi  // hi = pmore
    d66c:	lsl	w10, w10, w14
    d670:	cmp	w13, w8
    d674:	stp	w8, w10, [x19, #108]
    d678:	b.ne	d684 <lzma_crc64@@XZ_5.0+0x12ec>  // b.any
    d67c:	cmp	w9, w10
    d680:	b.eq	d6a4 <lzma_crc64@@XZ_5.0+0x130c>  // b.none
    d684:	ldr	x0, [x19, #64]
    d688:	mov	x1, x21
    d68c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    d690:	ldr	x0, [x19, #72]
    d694:	mov	x1, x21
    d698:	str	xzr, [x19, #64]
    d69c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    d6a0:	str	xzr, [x19, #72]
    d6a4:	ldr	w8, [x20, #44]
    d6a8:	str	w8, [x19, #92]
    d6ac:	cbz	w8, d6b8 <lzma_crc64@@XZ_5.0+0x1320>
    d6b0:	mov	w0, wzr
    d6b4:	b	d5e4 <lzma_crc64@@XZ_5.0+0x124c>
    d6b8:	ldr	w8, [x19, #96]
    d6bc:	mov	w0, wzr
    d6c0:	cbnz	w22, d6d0 <lzma_crc64@@XZ_5.0+0x1338>
    d6c4:	lsr	w8, w8, #2
    d6c8:	add	w8, w8, #0x4
    d6cc:	b	d6d8 <lzma_crc64@@XZ_5.0+0x1340>
    d6d0:	lsr	w8, w8, #1
    d6d4:	add	w8, w8, #0x10
    d6d8:	str	w8, [x19, #92]
    d6dc:	b	d5e4 <lzma_crc64@@XZ_5.0+0x124c>
    d6e0:	sub	sp, sp, #0x80
    d6e4:	stp	x29, x30, [sp, #64]
    d6e8:	stp	x22, x21, [sp, #96]
    d6ec:	stp	x20, x19, [sp, #112]
    d6f0:	ldr	x20, [x0]
    d6f4:	mov	x22, x3
    d6f8:	mov	x21, x2
    d6fc:	mov	x19, x1
    d700:	str	x23, [sp, #80]
    d704:	add	x29, sp, #0x40
    d708:	cbnz	x20, d77c <lzma_crc64@@XZ_5.0+0x13e4>
    d70c:	mov	x23, x0
    d710:	mov	w0, #0xe0                  	// #224
    d714:	mov	x1, x19
    d718:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    d71c:	cbz	x0, d8b4 <lzma_crc64@@XZ_5.0+0x151c>
    d720:	adrp	x8, d000 <lzma_crc64@@XZ_5.0+0xc68>
    d724:	adrp	x9, d000 <lzma_crc64@@XZ_5.0+0xc68>
    d728:	add	x8, x8, #0x8d0
    d72c:	add	x9, x9, #0xadc
    d730:	stp	x8, x9, [x23, #24]
    d734:	adrp	x8, d000 <lzma_crc64@@XZ_5.0+0xc68>
    d738:	add	x8, x8, #0xb4c
    d73c:	mov	x20, x0
    d740:	str	x8, [x23, #64]
    d744:	mov	x8, #0xffffffffffffffff    	// #-1
    d748:	movi	v0.2d, #0x0
    d74c:	str	x0, [x23]
    d750:	str	xzr, [x0, #32]
    d754:	str	wzr, [x0, #40]
    d758:	stp	wzr, wzr, [x0, #140]
    d75c:	stp	xzr, xzr, [x0, #8]
    d760:	str	xzr, [x0]
    d764:	stp	xzr, xzr, [x0, #96]
    d768:	stp	xzr, x8, [x0, #152]
    d76c:	stur	q0, [x0, #168]
    d770:	stur	q0, [x0, #184]
    d774:	stur	q0, [x0, #200]
    d778:	str	xzr, [x0, #216]
    d77c:	ldr	x2, [x21, #16]
    d780:	mov	x3, sp
    d784:	mov	x0, x20
    d788:	mov	x1, x19
    d78c:	blr	x22
    d790:	cbnz	w0, d8b8 <lzma_crc64@@XZ_5.0+0x1520>
    d794:	add	x22, x20, #0x20
    d798:	mov	x2, sp
    d79c:	mov	x0, x22
    d7a0:	mov	x1, x19
    d7a4:	bl	d48c <lzma_crc64@@XZ_5.0+0x10f4>
    d7a8:	tbz	w0, #0, d7b4 <lzma_crc64@@XZ_5.0+0x141c>
    d7ac:	mov	w0, #0x8                   	// #8
    d7b0:	b	d8b8 <lzma_crc64@@XZ_5.0+0x1520>
    d7b4:	ldr	x8, [x22]
    d7b8:	cbnz	x8, d7d0 <lzma_crc64@@XZ_5.0+0x1438>
    d7bc:	ldr	w0, [x20, #40]
    d7c0:	mov	x1, x19
    d7c4:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    d7c8:	str	x0, [x20, #32]
    d7cc:	cbz	x0, d8b4 <lzma_crc64@@XZ_5.0+0x151c>
    d7d0:	ldr	w8, [x20, #116]
    d7d4:	ldr	x0, [x20, #96]
    d7d8:	stp	xzr, xzr, [x20, #56]
    d7dc:	str	wzr, [x20, #72]
    d7e0:	str	w8, [x20, #52]
    d7e4:	cbz	x0, d7fc <lzma_crc64@@XZ_5.0+0x1464>
    d7e8:	ldr	w8, [x20, #140]
    d7ec:	mov	w1, wzr
    d7f0:	lsl	x2, x8, #2
    d7f4:	bl	31c0 <memset@plt>
    d7f8:	b	d830 <lzma_crc64@@XZ_5.0+0x1498>
    d7fc:	ldr	w8, [x20, #140]
    d800:	mov	x1, x19
    d804:	lsl	x0, x8, #2
    d808:	bl	3684 <lzma_version_string@@XZ_5.0+0x34>
    d80c:	ldr	w8, [x20, #144]
    d810:	str	x0, [x20, #96]
    d814:	mov	x1, x19
    d818:	lsl	x0, x8, #2
    d81c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    d820:	ldr	x8, [x20, #96]
    d824:	str	x0, [x20, #104]
    d828:	cbz	x0, d894 <lzma_crc64@@XZ_5.0+0x14fc>
    d82c:	cbz	x8, d894 <lzma_crc64@@XZ_5.0+0x14fc>
    d830:	str	wzr, [x20, #112]
    d834:	ldr	x8, [sp, #48]
    d838:	cbz	x8, d87c <lzma_crc64@@XZ_5.0+0x14e4>
    d83c:	ldr	w9, [sp, #56]
    d840:	cbz	w9, d87c <lzma_crc64@@XZ_5.0+0x14e4>
    d844:	ldr	w10, [x20, #40]
    d848:	ldr	x0, [x20, #32]
    d84c:	add	x8, x8, x9
    d850:	cmp	w9, w10
    d854:	csel	w2, w9, w10, cc  // cc = lo, ul, last
    d858:	sub	x1, x8, x2
    d85c:	str	w2, [x20, #68]
    d860:	bl	3040 <memcpy@plt>
    d864:	ldr	x8, [x20, #88]
    d868:	ldr	w1, [x20, #68]
    d86c:	mov	w9, #0x1                   	// #1
    d870:	mov	x0, x22
    d874:	str	w9, [x20, #136]
    d878:	blr	x8
    d87c:	add	x0, x20, #0x98
    d880:	add	x2, x21, #0x18
    d884:	mov	x1, x19
    d888:	str	wzr, [x20, #136]
    d88c:	bl	3784 <lzma_version_string@@XZ_5.0+0x134>
    d890:	b	d8b8 <lzma_crc64@@XZ_5.0+0x1520>
    d894:	mov	x0, x8
    d898:	mov	x1, x19
    d89c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    d8a0:	ldr	x0, [x20, #104]
    d8a4:	mov	x1, x19
    d8a8:	str	xzr, [x20, #96]
    d8ac:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    d8b0:	str	xzr, [x20, #104]
    d8b4:	mov	w0, #0x5                   	// #5
    d8b8:	ldp	x20, x19, [sp, #112]
    d8bc:	ldp	x22, x21, [sp, #96]
    d8c0:	ldr	x23, [sp, #80]
    d8c4:	ldp	x29, x30, [sp, #64]
    d8c8:	add	sp, sp, #0x80
    d8cc:	ret
    d8d0:	sub	sp, sp, #0x80
    d8d4:	stp	x29, x30, [sp, #32]
    d8d8:	add	x29, sp, #0x20
    d8dc:	stp	x26, x25, [sp, #64]
    d8e0:	ldr	w26, [x29, #96]
    d8e4:	stp	x28, x27, [sp, #48]
    d8e8:	stp	x24, x23, [sp, #80]
    d8ec:	stp	x22, x21, [sp, #96]
    d8f0:	stp	x20, x19, [sp, #112]
    d8f4:	mov	x19, x7
    d8f8:	mov	x20, x6
    d8fc:	mov	x21, x5
    d900:	mov	x22, x4
    d904:	mov	x23, x3
    d908:	mov	x24, x2
    d90c:	mov	x25, x0
    d910:	add	x27, x0, #0x20
    d914:	str	x1, [sp, #16]
    d918:	b	d940 <lzma_crc64@@XZ_5.0+0x15a8>
    d91c:	ldr	w8, [x25, #136]
    d920:	cbz	w8, d960 <lzma_crc64@@XZ_5.0+0x15c8>
    d924:	ldp	x0, x8, [x25]
    d928:	mov	x1, x27
    d92c:	mov	x2, x21
    d930:	mov	x3, x20
    d934:	mov	x4, x19
    d938:	blr	x8
    d93c:	cbnz	w0, dab0 <lzma_crc64@@XZ_5.0+0x1718>
    d940:	ldr	x8, [x20]
    d944:	cmp	x8, x19
    d948:	b.cs	daa8 <lzma_crc64@@XZ_5.0+0x1710>  // b.hs, b.nlast
    d94c:	cbnz	w26, d91c <lzma_crc64@@XZ_5.0+0x1584>
    d950:	ldr	x8, [x23]
    d954:	cmp	x8, x22
    d958:	b.cc	d91c <lzma_crc64@@XZ_5.0+0x1584>  // b.lo, b.ul, b.last
    d95c:	b	daa8 <lzma_crc64@@XZ_5.0+0x1710>
    d960:	ldr	w8, [x25, #56]
    d964:	ldr	w9, [x25, #64]
    d968:	cmp	w8, w9
    d96c:	b.cc	d924 <lzma_crc64@@XZ_5.0+0x158c>  // b.lo, b.ul, b.last
    d970:	ldr	w9, [x25, #40]
    d974:	ldr	w10, [x25, #48]
    d978:	sub	w9, w9, w10
    d97c:	cmp	w8, w9
    d980:	b.cs	d98c <lzma_crc64@@XZ_5.0+0x15f4>  // b.hs, b.nlast
    d984:	ldr	w8, [x25, #68]
    d988:	b	d9cc <lzma_crc64@@XZ_5.0+0x1634>
    d98c:	ldr	w9, [x25, #44]
    d990:	ldr	w10, [x25, #68]
    d994:	ldr	x0, [x25, #32]
    d998:	sub	w8, w8, w9
    d99c:	and	w28, w8, #0xfffffff0
    d9a0:	sub	w2, w10, w28
    d9a4:	add	x1, x0, x28
    d9a8:	bl	3050 <memmove@plt>
    d9ac:	ldp	w8, w9, [x25, #52]
    d9b0:	ldp	w10, w11, [x25, #64]
    d9b4:	add	w12, w8, w28
    d9b8:	sub	w9, w9, w28
    d9bc:	sub	w10, w10, w28
    d9c0:	sub	w8, w11, w28
    d9c4:	stp	w12, w9, [x25, #52]
    d9c8:	stp	w10, w8, [x25, #64]
    d9cc:	mov	w8, w8
    d9d0:	stur	x8, [x29, #-8]
    d9d4:	ldr	x8, [x25, #176]
    d9d8:	cbz	x8, da0c <lzma_crc64@@XZ_5.0+0x1674>
    d9dc:	ldr	x0, [x25, #152]
    d9e0:	ldr	x5, [x25, #32]
    d9e4:	ldr	w7, [x25, #40]
    d9e8:	ldr	x1, [sp, #16]
    d9ec:	sub	x6, x29, #0x8
    d9f0:	mov	x2, x24
    d9f4:	mov	x3, x23
    d9f8:	mov	x4, x22
    d9fc:	str	w26, [sp]
    da00:	blr	x8
    da04:	mov	w28, w0
    da08:	b	da38 <lzma_crc64@@XZ_5.0+0x16a0>
    da0c:	ldr	x3, [x25, #32]
    da10:	ldr	w5, [x25, #40]
    da14:	sub	x4, x29, #0x8
    da18:	mov	x0, x24
    da1c:	mov	x1, x23
    da20:	mov	x2, x22
    da24:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
    da28:	cbz	w26, da54 <lzma_crc64@@XZ_5.0+0x16bc>
    da2c:	ldr	x8, [x23]
    da30:	cmp	x8, x22
    da34:	cset	w28, eq  // eq = none
    da38:	ldur	w8, [x29, #-8]
    da3c:	cmp	w28, #0x1
    da40:	str	w8, [x25, #68]
    da44:	b.ne	da60 <lzma_crc64@@XZ_5.0+0x16c8>  // b.any
    da48:	mov	w28, wzr
    da4c:	str	w26, [x25, #136]
    da50:	b	da6c <lzma_crc64@@XZ_5.0+0x16d4>
    da54:	ldur	w8, [x29, #-8]
    da58:	mov	w28, wzr
    da5c:	str	w8, [x25, #68]
    da60:	ldr	w9, [x25, #48]
    da64:	subs	w8, w8, w9
    da68:	b.ls	da70 <lzma_crc64@@XZ_5.0+0x16d8>  // b.plast
    da6c:	str	w8, [x25, #64]
    da70:	ldr	w1, [x25, #72]
    da74:	cbz	w1, daa0 <lzma_crc64@@XZ_5.0+0x1708>
    da78:	ldr	w8, [x25, #56]
    da7c:	ldr	w9, [x25, #64]
    da80:	cmp	w8, w9
    da84:	b.cs	daa0 <lzma_crc64@@XZ_5.0+0x1708>  // b.hs, b.nlast
    da88:	ldr	x9, [x25, #88]
    da8c:	sub	w8, w8, w1
    da90:	mov	x0, x27
    da94:	str	wzr, [x25, #72]
    da98:	str	w8, [x25, #56]
    da9c:	blr	x9
    daa0:	cbz	w28, d924 <lzma_crc64@@XZ_5.0+0x158c>
    daa4:	b	dab8 <lzma_crc64@@XZ_5.0+0x1720>
    daa8:	mov	w28, wzr
    daac:	b	dab8 <lzma_crc64@@XZ_5.0+0x1720>
    dab0:	mov	w28, w0
    dab4:	str	wzr, [x25, #136]
    dab8:	mov	w0, w28
    dabc:	ldp	x20, x19, [sp, #112]
    dac0:	ldp	x22, x21, [sp, #96]
    dac4:	ldp	x24, x23, [sp, #80]
    dac8:	ldp	x26, x25, [sp, #64]
    dacc:	ldp	x28, x27, [sp, #48]
    dad0:	ldp	x29, x30, [sp, #32]
    dad4:	add	sp, sp, #0x80
    dad8:	ret
    dadc:	stp	x29, x30, [sp, #-32]!
    dae0:	stp	x20, x19, [sp, #16]
    dae4:	mov	x20, x0
    dae8:	add	x0, x0, #0x98
    daec:	mov	x29, sp
    daf0:	mov	x19, x1
    daf4:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    daf8:	ldr	x0, [x20, #104]
    dafc:	mov	x1, x19
    db00:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    db04:	ldr	x0, [x20, #96]
    db08:	mov	x1, x19
    db0c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    db10:	ldr	x0, [x20, #32]
    db14:	mov	x1, x19
    db18:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    db1c:	ldr	x8, [x20, #16]
    db20:	ldr	x0, [x20]
    db24:	mov	x1, x19
    db28:	cbz	x8, db34 <lzma_crc64@@XZ_5.0+0x179c>
    db2c:	blr	x8
    db30:	b	db38 <lzma_crc64@@XZ_5.0+0x17a0>
    db34:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    db38:	mov	x0, x20
    db3c:	mov	x1, x19
    db40:	ldp	x20, x19, [sp, #16]
    db44:	ldp	x29, x30, [sp], #32
    db48:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    db4c:	stp	x29, x30, [sp, #-48]!
    db50:	stp	x20, x19, [sp, #32]
    db54:	ldr	x8, [x0, #24]
    db58:	str	x21, [sp, #16]
    db5c:	mov	x29, sp
    db60:	cbz	x8, db9c <lzma_crc64@@XZ_5.0+0x1804>
    db64:	mov	x21, x0
    db68:	ldr	x0, [x0]
    db6c:	mov	x20, x1
    db70:	mov	x1, x3
    db74:	mov	x19, x3
    db78:	blr	x8
    db7c:	cbnz	w0, dba0 <lzma_crc64@@XZ_5.0+0x1808>
    db80:	add	x0, x21, #0x98
    db84:	add	x2, x19, #0x10
    db88:	mov	x1, x20
    db8c:	ldp	x20, x19, [sp, #32]
    db90:	ldr	x21, [sp, #16]
    db94:	ldp	x29, x30, [sp], #48
    db98:	b	38cc <lzma_version_string@@XZ_5.0+0x27c>
    db9c:	mov	w0, #0xb                   	// #11
    dba0:	ldp	x20, x19, [sp, #32]
    dba4:	ldr	x21, [sp, #16]
    dba8:	ldp	x29, x30, [sp], #48
    dbac:	ret

000000000000dbb0 <lzma_mf_is_supported@@XZ_5.0>:
    dbb0:	sub	w8, w0, #0x3
    dbb4:	orr	w9, w0, #0x1
    dbb8:	cmp	w8, #0x2
    dbbc:	cset	w8, cc  // cc = lo, ul, last
    dbc0:	cmp	w9, #0x13
    dbc4:	cset	w9, eq  // eq = none
    dbc8:	cmp	w0, #0x14
    dbcc:	orr	w8, w9, w8
    dbd0:	cset	w9, eq  // eq = none
    dbd4:	orr	w0, w9, w8
    dbd8:	ret
    dbdc:	stp	x29, x30, [sp, #-48]!
    dbe0:	stp	x20, x19, [sp, #32]
    dbe4:	ldr	x8, [x0, #48]
    dbe8:	mov	x20, x1
    dbec:	mov	x1, x2
    dbf0:	str	x21, [sp, #16]
    dbf4:	mov	x29, sp
    dbf8:	mov	x21, x2
    dbfc:	mov	x19, x0
    dc00:	blr	x8
    dc04:	cbz	w0, dc8c <lzma_mf_is_supported@@XZ_5.0+0xdc>
    dc08:	sub	w10, w0, #0x1
    dc0c:	lsl	x8, x10, #3
    dc10:	ldr	w8, [x21, x8]
    dc14:	ldr	w9, [x19, #96]
    dc18:	cmp	w8, w9
    dc1c:	b.ne	dc90 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.any
    dc20:	ldr	w9, [x19, #36]
    dc24:	ldr	w11, [x19, #24]
    dc28:	ldr	w12, [x19, #100]
    dc2c:	sub	w9, w9, w11
    dc30:	add	w13, w9, #0x1
    dc34:	cmp	w13, w12
    dc38:	csinc	w9, w12, w9, hi  // hi = pmore
    dc3c:	cmp	w8, w9
    dc40:	b.cs	dc90 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.hs, b.nlast
    dc44:	add	x10, x21, x10, lsl #3
    dc48:	ldr	x13, [x19]
    dc4c:	ldr	w14, [x10, #4]
    dc50:	mov	w12, w9
    dc54:	add	x10, x13, x11
    dc58:	sub	x11, x11, x14
    dc5c:	add	x11, x13, x11
    dc60:	add	x13, x10, x8
    dc64:	add	x14, x11, x8
    dc68:	ldurb	w13, [x13, #-1]
    dc6c:	ldurb	w14, [x14, #-2]
    dc70:	cmp	w13, w14
    dc74:	b.ne	dc90 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.any
    dc78:	add	x8, x8, #0x1
    dc7c:	cmp	w12, w8
    dc80:	b.ne	dc60 <lzma_mf_is_supported@@XZ_5.0+0xb0>  // b.any
    dc84:	mov	w8, w9
    dc88:	b	dc90 <lzma_mf_is_supported@@XZ_5.0+0xe0>
    dc8c:	mov	w8, wzr
    dc90:	str	w0, [x20]
    dc94:	ldr	w9, [x19, #28]
    dc98:	ldr	x21, [sp, #16]
    dc9c:	mov	w0, w8
    dca0:	add	w9, w9, #0x1
    dca4:	str	w9, [x19, #28]
    dca8:	ldp	x20, x19, [sp, #32]
    dcac:	ldp	x29, x30, [sp], #48
    dcb0:	ret
    dcb4:	stp	x20, x19, [sp, #-16]!
    dcb8:	ldr	w9, [x0, #36]
    dcbc:	ldr	w14, [x0, #24]
    dcc0:	ldr	w8, [x0, #96]
    dcc4:	sub	w9, w9, w14
    dcc8:	cmp	w8, w9
    dccc:	b.ls	dcf8 <lzma_mf_is_supported@@XZ_5.0+0x148>  // b.plast
    dcd0:	cmp	w9, #0x2
    dcd4:	mov	w8, w9
    dcd8:	b.hi	dcf8 <lzma_mf_is_supported@@XZ_5.0+0x148>  // b.pmore
    dcdc:	ldr	w9, [x0, #40]
    dce0:	add	w10, w14, #0x1
    dce4:	mov	w8, wzr
    dce8:	str	w10, [x0, #24]
    dcec:	add	w9, w9, #0x1
    dcf0:	str	w9, [x0, #40]
    dcf4:	b	def4 <lzma_mf_is_supported@@XZ_5.0+0x344>
    dcf8:	ldr	x18, [x0]
    dcfc:	adrp	x12, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    dd00:	ldr	w11, [x0, #20]
    dd04:	add	x10, x18, x14
    dd08:	ldrb	w9, [x10]
    dd0c:	ldr	x12, [x12, #3952]
    dd10:	ldrb	w15, [x10, #1]
    dd14:	ldrb	w16, [x10, #2]
    dd18:	ldr	w13, [x0, #88]
    dd1c:	ldr	w12, [x12, x9, lsl #2]
    dd20:	ldr	x9, [x0, #64]
    dd24:	add	w11, w11, w14
    dd28:	eor	w12, w12, w15
    dd2c:	and	w15, w12, #0x3ff
    dd30:	eor	w12, w12, w16, lsl #8
    dd34:	and	w12, w12, w13
    dd38:	add	w12, w12, #0x400
    dd3c:	lsl	x13, x15, #2
    dd40:	lsl	x12, x12, #2
    dd44:	ldr	w15, [x9, x13]
    dd48:	ldr	w3, [x9, x12]
    dd4c:	str	w11, [x9, x13]
    dd50:	str	w11, [x9, x12]
    dd54:	ldr	w12, [x0, #84]
    dd58:	sub	w13, w11, w15
    dd5c:	cmp	w13, w12
    dd60:	b.cs	ddc4 <lzma_mf_is_supported@@XZ_5.0+0x214>  // b.hs, b.nlast
    dd64:	mov	w16, w13
    dd68:	sub	x15, x10, x16
    dd6c:	ldrb	w15, [x15]
    dd70:	ldrb	w17, [x10]
    dd74:	cmp	w15, w17
    dd78:	b.ne	ddc4 <lzma_mf_is_supported@@XZ_5.0+0x214>  // b.any
    dd7c:	cmp	w8, #0x3
    dd80:	b.cc	df00 <lzma_mf_is_supported@@XZ_5.0+0x350>  // b.lo, b.ul, b.last
    dd84:	add	x17, x14, x18
    dd88:	neg	x2, x16
    dd8c:	add	x17, x17, #0x2
    dd90:	mov	x15, xzr
    dd94:	sub	w16, w8, #0x2
    dd98:	add	x2, x17, x2
    dd9c:	ldrb	w4, [x2, x15]
    dda0:	ldrb	w5, [x17, x15]
    dda4:	cmp	w4, w5
    dda8:	b.ne	df08 <lzma_mf_is_supported@@XZ_5.0+0x358>  // b.any
    ddac:	add	x15, x15, #0x1
    ddb0:	cmp	w16, w15
    ddb4:	b.ne	dd9c <lzma_mf_is_supported@@XZ_5.0+0x1ec>  // b.any
    ddb8:	sub	w10, w13, #0x1
    ddbc:	stp	w8, w10, [x1]
    ddc0:	b	df1c <lzma_mf_is_supported@@XZ_5.0+0x36c>
    ddc4:	mov	x16, xzr
    ddc8:	mov	w15, #0x2                   	// #2
    ddcc:	ldr	w17, [x0, #92]
    ddd0:	ldr	x13, [x0, #72]
    ddd4:	ldr	w2, [x0, #80]
    ddd8:	sub	w4, w11, w3
    dddc:	add	x16, x1, x16, lsl #3
    dde0:	cmp	w4, w12
    dde4:	str	w3, [x13, x2, lsl #2]
    dde8:	b.cs	dec0 <lzma_mf_is_supported@@XZ_5.0+0x310>  // b.hs, b.nlast
    ddec:	cbz	w17, dec0 <lzma_mf_is_supported@@XZ_5.0+0x310>
    ddf0:	add	x14, x14, x18
    ddf4:	sub	w3, w8, #0x1
    ddf8:	add	x14, x14, #0x1
    ddfc:	mov	w5, w4
    de00:	subs	w18, w2, w4
    de04:	mov	w7, w15
    de08:	sub	x6, x10, x5
    de0c:	csel	w19, w12, wzr, cc  // cc = lo, ul, last
    de10:	ldrb	w20, [x6, x7]
    de14:	ldrb	w7, [x10, x7]
    de18:	add	w18, w18, w19
    de1c:	ldr	w18, [x13, w18, uxtw #2]
    de20:	cmp	w20, w7
    de24:	b.ne	dea4 <lzma_mf_is_supported@@XZ_5.0+0x2f4>  // b.any
    de28:	ldrb	w6, [x6]
    de2c:	ldrb	w7, [x10]
    de30:	cmp	w6, w7
    de34:	b.ne	dea4 <lzma_mf_is_supported@@XZ_5.0+0x2f4>  // b.any
    de38:	cmp	w8, #0x2
    de3c:	b.cc	de78 <lzma_mf_is_supported@@XZ_5.0+0x2c8>  // b.lo, b.ul, b.last
    de40:	neg	x5, x5
    de44:	mov	x6, xzr
    de48:	add	x5, x14, x5
    de4c:	ldrb	w7, [x5, x6]
    de50:	ldrb	w19, [x14, x6]
    de54:	cmp	w7, w19
    de58:	b.ne	de98 <lzma_mf_is_supported@@XZ_5.0+0x2e8>  // b.any
    de5c:	add	x6, x6, #0x1
    de60:	cmp	w3, w6
    de64:	b.ne	de4c <lzma_mf_is_supported@@XZ_5.0+0x29c>  // b.any
    de68:	mov	w5, w8
    de6c:	cmp	w15, w5
    de70:	b.cc	de84 <lzma_mf_is_supported@@XZ_5.0+0x2d4>  // b.lo, b.ul, b.last
    de74:	b	dea4 <lzma_mf_is_supported@@XZ_5.0+0x2f4>
    de78:	mov	w5, #0x1                   	// #1
    de7c:	cmp	w15, w5
    de80:	b.cs	dea4 <lzma_mf_is_supported@@XZ_5.0+0x2f4>  // b.hs, b.nlast
    de84:	sub	w15, w4, #0x1
    de88:	cmp	w5, w8
    de8c:	stp	w5, w15, [x16], #8
    de90:	b.ne	dea8 <lzma_mf_is_supported@@XZ_5.0+0x2f8>  // b.any
    de94:	b	dec0 <lzma_mf_is_supported@@XZ_5.0+0x310>
    de98:	add	w5, w6, #0x1
    de9c:	cmp	w15, w5
    dea0:	b.cc	de84 <lzma_mf_is_supported@@XZ_5.0+0x2d4>  // b.lo, b.ul, b.last
    dea4:	mov	w5, w15
    dea8:	sub	w17, w17, #0x1
    deac:	cbz	w17, dec0 <lzma_mf_is_supported@@XZ_5.0+0x310>
    deb0:	sub	w4, w11, w18
    deb4:	cmp	w4, w12
    deb8:	mov	w15, w5
    debc:	b.cc	ddfc <lzma_mf_is_supported@@XZ_5.0+0x24c>  // b.lo, b.ul, b.last
    dec0:	ldp	w11, w10, [x0, #80]
    dec4:	ldp	w14, w12, [x0, #20]
    dec8:	sub	x8, x16, x1
    decc:	lsr	x8, x8, #3
    ded0:	add	w15, w11, #0x1
    ded4:	add	w12, w12, #0x1
    ded8:	cmp	w15, w10
    dedc:	add	w14, w14, w12
    dee0:	csinc	w11, wzr, w11, eq  // eq = none
    dee4:	cmn	w14, #0x1
    dee8:	str	w11, [x0, #80]
    deec:	str	w12, [x0, #24]
    def0:	b.eq	df64 <lzma_mf_is_supported@@XZ_5.0+0x3b4>  // b.none
    def4:	mov	w0, w8
    def8:	ldp	x20, x19, [sp], #16
    defc:	ret
    df00:	mov	w15, #0x2                   	// #2
    df04:	b	df0c <lzma_mf_is_supported@@XZ_5.0+0x35c>
    df08:	add	w15, w15, #0x2
    df0c:	sub	w13, w13, #0x1
    df10:	cmp	w15, w8
    df14:	stp	w15, w13, [x1]
    df18:	b.ne	df5c <lzma_mf_is_supported@@XZ_5.0+0x3ac>  // b.any
    df1c:	ldr	x8, [x0, #72]
    df20:	ldr	w10, [x0, #80]
    df24:	str	w3, [x8, x10, lsl #2]
    df28:	ldp	w11, w10, [x0, #80]
    df2c:	ldp	w13, w12, [x0, #20]
    df30:	add	w14, w11, #0x1
    df34:	add	w12, w12, #0x1
    df38:	cmp	w14, w10
    df3c:	add	w13, w13, w12
    df40:	csinc	w11, wzr, w11, eq  // eq = none
    df44:	cmn	w13, #0x1
    df48:	str	w11, [x0, #80]
    df4c:	str	w12, [x0, #24]
    df50:	b.eq	dfd8 <lzma_mf_is_supported@@XZ_5.0+0x428>  // b.none
    df54:	mov	w8, #0x1                   	// #1
    df58:	b	def4 <lzma_mf_is_supported@@XZ_5.0+0x344>
    df5c:	mov	w16, #0x1                   	// #1
    df60:	b	ddcc <lzma_mf_is_supported@@XZ_5.0+0x21c>
    df64:	ldr	w11, [x0, #108]
    df68:	mvn	w10, w10
    df6c:	cbz	w11, df98 <lzma_mf_is_supported@@XZ_5.0+0x3e8>
    df70:	mov	x11, xzr
    df74:	lsl	x12, x11, #2
    df78:	ldr	w14, [x9, x12]
    df7c:	add	x11, x11, #0x1
    df80:	subs	w14, w14, w10
    df84:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    df88:	str	w14, [x9, x12]
    df8c:	ldr	w12, [x0, #108]
    df90:	cmp	x11, x12
    df94:	b.cc	df74 <lzma_mf_is_supported@@XZ_5.0+0x3c4>  // b.lo, b.ul, b.last
    df98:	ldr	w9, [x0, #112]
    df9c:	cbz	w9, dfc8 <lzma_mf_is_supported@@XZ_5.0+0x418>
    dfa0:	mov	x9, xzr
    dfa4:	lsl	x11, x9, #2
    dfa8:	ldr	w12, [x13, x11]
    dfac:	add	x9, x9, #0x1
    dfb0:	subs	w12, w12, w10
    dfb4:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    dfb8:	str	w12, [x13, x11]
    dfbc:	ldr	w11, [x0, #112]
    dfc0:	cmp	x9, x11
    dfc4:	b.cc	dfa4 <lzma_mf_is_supported@@XZ_5.0+0x3f4>  // b.lo, b.ul, b.last
    dfc8:	ldr	w9, [x0, #20]
    dfcc:	sub	w9, w9, w10
    dfd0:	str	w9, [x0, #20]
    dfd4:	b	def4 <lzma_mf_is_supported@@XZ_5.0+0x344>
    dfd8:	ldr	w11, [x0, #108]
    dfdc:	mvn	w10, w10
    dfe0:	cbz	w11, e00c <lzma_mf_is_supported@@XZ_5.0+0x45c>
    dfe4:	mov	x11, xzr
    dfe8:	lsl	x12, x11, #2
    dfec:	ldr	w13, [x9, x12]
    dff0:	add	x11, x11, #0x1
    dff4:	subs	w13, w13, w10
    dff8:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    dffc:	str	w13, [x9, x12]
    e000:	ldr	w12, [x0, #108]
    e004:	cmp	x11, x12
    e008:	b.cc	dfe8 <lzma_mf_is_supported@@XZ_5.0+0x438>  // b.lo, b.ul, b.last
    e00c:	ldr	w9, [x0, #112]
    e010:	cbz	w9, e03c <lzma_mf_is_supported@@XZ_5.0+0x48c>
    e014:	mov	x9, xzr
    e018:	lsl	x11, x9, #2
    e01c:	ldr	w12, [x8, x11]
    e020:	add	x9, x9, #0x1
    e024:	subs	w12, w12, w10
    e028:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e02c:	str	w12, [x8, x11]
    e030:	ldr	w11, [x0, #112]
    e034:	cmp	x9, x11
    e038:	b.cc	e018 <lzma_mf_is_supported@@XZ_5.0+0x468>  // b.lo, b.ul, b.last
    e03c:	ldr	w8, [x0, #20]
    e040:	sub	w8, w8, w10
    e044:	str	w8, [x0, #20]
    e048:	mov	w8, #0x1                   	// #1
    e04c:	b	def4 <lzma_mf_is_supported@@XZ_5.0+0x344>
    e050:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    e054:	ldr	x8, [x8, #3952]
    e058:	b	e078 <lzma_mf_is_supported@@XZ_5.0+0x4c8>
    e05c:	ldr	w10, [x0, #40]
    e060:	add	w9, w9, #0x1
    e064:	str	w9, [x0, #24]
    e068:	add	w9, w10, #0x1
    e06c:	str	w9, [x0, #40]
    e070:	subs	w1, w1, #0x1
    e074:	b.eq	e184 <lzma_mf_is_supported@@XZ_5.0+0x5d4>  // b.none
    e078:	ldr	w10, [x0, #36]
    e07c:	ldr	w9, [x0, #24]
    e080:	sub	w10, w10, w9
    e084:	cmp	w10, #0x2
    e088:	b.ls	e05c <lzma_mf_is_supported@@XZ_5.0+0x4ac>  // b.plast
    e08c:	ldr	x10, [x0]
    e090:	ldr	w12, [x0, #20]
    e094:	ldr	w13, [x0, #88]
    e098:	add	x11, x10, x9
    e09c:	ldrb	w10, [x11]
    e0a0:	ldrb	w14, [x11, #1]
    e0a4:	ldrb	w11, [x11, #2]
    e0a8:	add	w9, w12, w9
    e0ac:	ldr	w15, [x8, x10, lsl #2]
    e0b0:	ldr	x10, [x0, #64]
    e0b4:	eor	w12, w15, w14
    e0b8:	eor	w11, w12, w11, lsl #8
    e0bc:	and	w11, w11, w13
    e0c0:	add	w11, w11, #0x400
    e0c4:	and	w14, w12, #0x3ff
    e0c8:	lsl	x11, x11, #2
    e0cc:	ldr	w12, [x10, x11]
    e0d0:	str	w9, [x10, w14, uxtw #2]
    e0d4:	str	w9, [x10, x11]
    e0d8:	ldr	x9, [x0, #72]
    e0dc:	ldr	w11, [x0, #80]
    e0e0:	str	w12, [x9, x11, lsl #2]
    e0e4:	ldp	w12, w11, [x0, #80]
    e0e8:	ldp	w14, w13, [x0, #20]
    e0ec:	add	w15, w12, #0x1
    e0f0:	add	w13, w13, #0x1
    e0f4:	cmp	w15, w11
    e0f8:	add	w14, w14, w13
    e0fc:	csinc	w12, wzr, w12, eq  // eq = none
    e100:	cmn	w14, #0x1
    e104:	str	w12, [x0, #80]
    e108:	str	w13, [x0, #24]
    e10c:	b.ne	e070 <lzma_mf_is_supported@@XZ_5.0+0x4c0>  // b.any
    e110:	ldr	w12, [x0, #108]
    e114:	mvn	w11, w11
    e118:	cbz	w12, e144 <lzma_mf_is_supported@@XZ_5.0+0x594>
    e11c:	mov	x12, xzr
    e120:	lsl	x13, x12, #2
    e124:	ldr	w14, [x10, x13]
    e128:	add	x12, x12, #0x1
    e12c:	subs	w14, w14, w11
    e130:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    e134:	str	w14, [x10, x13]
    e138:	ldr	w13, [x0, #108]
    e13c:	cmp	x12, x13
    e140:	b.cc	e120 <lzma_mf_is_supported@@XZ_5.0+0x570>  // b.lo, b.ul, b.last
    e144:	ldr	w10, [x0, #112]
    e148:	cbz	w10, e174 <lzma_mf_is_supported@@XZ_5.0+0x5c4>
    e14c:	mov	x10, xzr
    e150:	lsl	x12, x10, #2
    e154:	ldr	w13, [x9, x12]
    e158:	add	x10, x10, #0x1
    e15c:	subs	w13, w13, w11
    e160:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    e164:	str	w13, [x9, x12]
    e168:	ldr	w12, [x0, #112]
    e16c:	cmp	x10, x12
    e170:	b.cc	e150 <lzma_mf_is_supported@@XZ_5.0+0x5a0>  // b.lo, b.ul, b.last
    e174:	ldr	w9, [x0, #20]
    e178:	sub	w9, w9, w11
    e17c:	str	w9, [x0, #20]
    e180:	b	e070 <lzma_mf_is_supported@@XZ_5.0+0x4c0>
    e184:	ret
    e188:	stp	x20, x19, [sp, #-16]!
    e18c:	ldr	w8, [x0, #36]
    e190:	ldr	w14, [x0, #24]
    e194:	ldr	w10, [x0, #96]
    e198:	sub	w8, w8, w14
    e19c:	cmp	w10, w8
    e1a0:	b.ls	e1cc <lzma_mf_is_supported@@XZ_5.0+0x61c>  // b.plast
    e1a4:	cmp	w8, #0x3
    e1a8:	mov	w10, w8
    e1ac:	b.hi	e1cc <lzma_mf_is_supported@@XZ_5.0+0x61c>  // b.pmore
    e1b0:	ldr	w9, [x0, #40]
    e1b4:	add	w10, w14, #0x1
    e1b8:	mov	w8, wzr
    e1bc:	str	w10, [x0, #24]
    e1c0:	add	w9, w9, #0x1
    e1c4:	str	w9, [x0, #40]
    e1c8:	b	e52c <lzma_mf_is_supported@@XZ_5.0+0x97c>
    e1cc:	ldr	x16, [x0]
    e1d0:	adrp	x13, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    e1d4:	ldr	w8, [x0, #20]
    e1d8:	ldr	x13, [x13, #3952]
    e1dc:	add	x11, x16, x14
    e1e0:	ldrb	w12, [x11]
    e1e4:	ldrb	w2, [x11, #3]
    e1e8:	ldrb	w18, [x11, #1]
    e1ec:	ldr	w15, [x0, #88]
    e1f0:	ldr	w3, [x13, x12, lsl #2]
    e1f4:	add	w12, w8, w14
    e1f8:	ldrb	w8, [x11, #2]
    e1fc:	ldr	w13, [x13, x2, lsl #2]
    e200:	eor	w18, w3, w18
    e204:	ldr	x9, [x0, #64]
    e208:	eor	w8, w18, w8, lsl #8
    e20c:	mov	w17, #0x400                 	// #1024
    e210:	and	w2, w18, #0x3ff
    e214:	and	w18, w8, #0xffff
    e218:	eor	w8, w8, w13, lsl #5
    e21c:	movk	w17, #0x1, lsl #16
    e220:	and	w8, w8, w15
    e224:	add	w15, w18, #0x400
    e228:	add	w8, w8, w17
    e22c:	lsl	x13, x2, #2
    e230:	lsl	x18, x15, #2
    e234:	lsl	x8, x8, #2
    e238:	ldr	w3, [x9, x13]
    e23c:	ldr	w15, [x9, x18]
    e240:	ldr	w17, [x9, x8]
    e244:	str	w12, [x9, x13]
    e248:	str	w12, [x9, x18]
    e24c:	str	w12, [x9, x8]
    e250:	ldr	w13, [x0, #84]
    e254:	sub	w8, w12, w3
    e258:	cmp	w8, w13
    e25c:	b.cs	e290 <lzma_mf_is_supported@@XZ_5.0+0x6e0>  // b.hs, b.nlast
    e260:	sub	x18, x11, w8, uxtw
    e264:	ldrb	w18, [x18]
    e268:	ldrb	w2, [x11]
    e26c:	cmp	w18, w2
    e270:	b.ne	e290 <lzma_mf_is_supported@@XZ_5.0+0x6e0>  // b.any
    e274:	mov	w18, #0x2                   	// #2
    e278:	sub	w2, w8, #0x1
    e27c:	stp	w18, w2, [x1]
    e280:	mov	w2, #0x1                   	// #1
    e284:	cmp	w15, w3
    e288:	b.ne	e2a0 <lzma_mf_is_supported@@XZ_5.0+0x6f0>  // b.any
    e28c:	b	e2e8 <lzma_mf_is_supported@@XZ_5.0+0x738>
    e290:	mov	w2, wzr
    e294:	mov	w18, #0x1                   	// #1
    e298:	cmp	w15, w3
    e29c:	b.eq	e2e8 <lzma_mf_is_supported@@XZ_5.0+0x738>  // b.none
    e2a0:	sub	w3, w12, w15
    e2a4:	cmp	w3, w13
    e2a8:	b.cs	e2e8 <lzma_mf_is_supported@@XZ_5.0+0x738>  // b.hs, b.nlast
    e2ac:	mov	w15, w3
    e2b0:	sub	x4, x11, x15
    e2b4:	ldrb	w4, [x4]
    e2b8:	ldrb	w5, [x11]
    e2bc:	cmp	w4, w5
    e2c0:	b.ne	e2e8 <lzma_mf_is_supported@@XZ_5.0+0x738>  // b.any
    e2c4:	sub	w18, w3, #0x1
    e2c8:	add	w8, w2, #0x1
    e2cc:	add	x2, x1, w2, uxtw #3
    e2d0:	neg	x15, x15
    e2d4:	str	w18, [x2, #4]
    e2d8:	mov	w18, #0x3                   	// #3
    e2dc:	cmp	w18, w10
    e2e0:	b.cs	e338 <lzma_mf_is_supported@@XZ_5.0+0x788>  // b.hs, b.nlast
    e2e4:	b	e300 <lzma_mf_is_supported@@XZ_5.0+0x750>
    e2e8:	cbz	w2, e3f4 <lzma_mf_is_supported@@XZ_5.0+0x844>
    e2ec:	mov	x15, xzr
    e2f0:	sub	x15, x15, w8, uxtw
    e2f4:	mov	w8, #0x1                   	// #1
    e2f8:	cmp	w18, w10
    e2fc:	b.cs	e338 <lzma_mf_is_supported@@XZ_5.0+0x788>  // b.hs, b.nlast
    e300:	add	x2, x18, x14
    e304:	add	x2, x16, x2
    e308:	ldrb	w3, [x2, x15]
    e30c:	ldrb	w4, [x2]
    e310:	cmp	w3, w4
    e314:	b.ne	e338 <lzma_mf_is_supported@@XZ_5.0+0x788>  // b.any
    e318:	add	w18, w18, #0x1
    e31c:	cmp	w10, w18
    e320:	add	x2, x2, #0x1
    e324:	b.ne	e308 <lzma_mf_is_supported@@XZ_5.0+0x758>  // b.any
    e328:	sub	w11, w8, #0x1
    e32c:	lsl	x11, x11, #3
    e330:	str	w10, [x1, x11]
    e334:	b	e34c <lzma_mf_is_supported@@XZ_5.0+0x79c>
    e338:	sub	w15, w8, #0x1
    e33c:	lsl	x15, x15, #3
    e340:	cmp	w18, w10
    e344:	str	w18, [x1, x15]
    e348:	b.ne	e3f8 <lzma_mf_is_supported@@XZ_5.0+0x848>  // b.any
    e34c:	ldr	x10, [x0, #72]
    e350:	ldr	w11, [x0, #80]
    e354:	str	w17, [x10, x11, lsl #2]
    e358:	ldp	w12, w11, [x0, #80]
    e35c:	ldp	w14, w13, [x0, #20]
    e360:	add	w15, w12, #0x1
    e364:	add	w13, w13, #0x1
    e368:	cmp	w15, w11
    e36c:	add	w14, w14, w13
    e370:	csinc	w12, wzr, w12, eq  // eq = none
    e374:	cmn	w14, #0x1
    e378:	str	w12, [x0, #80]
    e37c:	str	w13, [x0, #24]
    e380:	b.ne	e52c <lzma_mf_is_supported@@XZ_5.0+0x97c>  // b.any
    e384:	ldr	w12, [x0, #108]
    e388:	mvn	w11, w11
    e38c:	cbz	w12, e3b8 <lzma_mf_is_supported@@XZ_5.0+0x808>
    e390:	mov	x12, xzr
    e394:	lsl	x13, x12, #2
    e398:	ldr	w14, [x9, x13]
    e39c:	add	x12, x12, #0x1
    e3a0:	subs	w14, w14, w11
    e3a4:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    e3a8:	str	w14, [x9, x13]
    e3ac:	ldr	w13, [x0, #108]
    e3b0:	cmp	x12, x13
    e3b4:	b.cc	e394 <lzma_mf_is_supported@@XZ_5.0+0x7e4>  // b.lo, b.ul, b.last
    e3b8:	ldr	w9, [x0, #112]
    e3bc:	cbz	w9, e3e8 <lzma_mf_is_supported@@XZ_5.0+0x838>
    e3c0:	mov	x9, xzr
    e3c4:	lsl	x12, x9, #2
    e3c8:	ldr	w13, [x10, x12]
    e3cc:	add	x9, x9, #0x1
    e3d0:	subs	w13, w13, w11
    e3d4:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    e3d8:	str	w13, [x10, x12]
    e3dc:	ldr	w12, [x0, #112]
    e3e0:	cmp	x9, x12
    e3e4:	b.cc	e3c4 <lzma_mf_is_supported@@XZ_5.0+0x814>  // b.lo, b.ul, b.last
    e3e8:	ldr	w9, [x0, #20]
    e3ec:	sub	w9, w9, w11
    e3f0:	b	e5a4 <lzma_mf_is_supported@@XZ_5.0+0x9f4>
    e3f4:	mov	w8, wzr
    e3f8:	ldr	w2, [x0, #92]
    e3fc:	ldr	x15, [x0, #72]
    e400:	ldr	w3, [x0, #80]
    e404:	sub	w4, w12, w17
    e408:	add	x8, x1, w8, uxtw #3
    e40c:	cmp	w4, w13
    e410:	str	w17, [x15, x3, lsl #2]
    e414:	b.cs	e4f8 <lzma_mf_is_supported@@XZ_5.0+0x948>  // b.hs, b.nlast
    e418:	cbz	w2, e4f8 <lzma_mf_is_supported@@XZ_5.0+0x948>
    e41c:	cmp	w18, #0x3
    e420:	mov	w5, #0x3                   	// #3
    e424:	add	x14, x14, x16
    e428:	sub	w17, w10, #0x1
    e42c:	csel	w16, w18, w5, hi  // hi = pmore
    e430:	add	x14, x14, #0x1
    e434:	mov	w5, w4
    e438:	subs	w18, w3, w4
    e43c:	mov	w7, w16
    e440:	sub	x6, x11, x5
    e444:	csel	w19, w13, wzr, cc  // cc = lo, ul, last
    e448:	ldrb	w20, [x6, x7]
    e44c:	ldrb	w7, [x11, x7]
    e450:	add	w18, w18, w19
    e454:	ldr	w18, [x15, w18, uxtw #2]
    e458:	cmp	w20, w7
    e45c:	b.ne	e4dc <lzma_mf_is_supported@@XZ_5.0+0x92c>  // b.any
    e460:	ldrb	w6, [x6]
    e464:	ldrb	w7, [x11]
    e468:	cmp	w6, w7
    e46c:	b.ne	e4dc <lzma_mf_is_supported@@XZ_5.0+0x92c>  // b.any
    e470:	cmp	w10, #0x2
    e474:	b.cc	e4b0 <lzma_mf_is_supported@@XZ_5.0+0x900>  // b.lo, b.ul, b.last
    e478:	neg	x5, x5
    e47c:	mov	x6, xzr
    e480:	add	x5, x14, x5
    e484:	ldrb	w7, [x5, x6]
    e488:	ldrb	w19, [x14, x6]
    e48c:	cmp	w7, w19
    e490:	b.ne	e4d0 <lzma_mf_is_supported@@XZ_5.0+0x920>  // b.any
    e494:	add	x6, x6, #0x1
    e498:	cmp	w17, w6
    e49c:	b.ne	e484 <lzma_mf_is_supported@@XZ_5.0+0x8d4>  // b.any
    e4a0:	mov	w5, w10
    e4a4:	cmp	w16, w5
    e4a8:	b.cc	e4bc <lzma_mf_is_supported@@XZ_5.0+0x90c>  // b.lo, b.ul, b.last
    e4ac:	b	e4dc <lzma_mf_is_supported@@XZ_5.0+0x92c>
    e4b0:	mov	w5, #0x1                   	// #1
    e4b4:	cmp	w16, w5
    e4b8:	b.cs	e4dc <lzma_mf_is_supported@@XZ_5.0+0x92c>  // b.hs, b.nlast
    e4bc:	sub	w16, w4, #0x1
    e4c0:	cmp	w5, w10
    e4c4:	stp	w5, w16, [x8], #8
    e4c8:	b.ne	e4e0 <lzma_mf_is_supported@@XZ_5.0+0x930>  // b.any
    e4cc:	b	e4f8 <lzma_mf_is_supported@@XZ_5.0+0x948>
    e4d0:	add	w5, w6, #0x1
    e4d4:	cmp	w16, w5
    e4d8:	b.cc	e4bc <lzma_mf_is_supported@@XZ_5.0+0x90c>  // b.lo, b.ul, b.last
    e4dc:	mov	w5, w16
    e4e0:	sub	w2, w2, #0x1
    e4e4:	cbz	w2, e4f8 <lzma_mf_is_supported@@XZ_5.0+0x948>
    e4e8:	sub	w4, w12, w18
    e4ec:	cmp	w4, w13
    e4f0:	mov	w16, w5
    e4f4:	b.cc	e434 <lzma_mf_is_supported@@XZ_5.0+0x884>  // b.lo, b.ul, b.last
    e4f8:	ldp	w11, w10, [x0, #80]
    e4fc:	ldp	w13, w12, [x0, #20]
    e500:	sub	x8, x8, x1
    e504:	lsr	x8, x8, #3
    e508:	add	w14, w11, #0x1
    e50c:	add	w12, w12, #0x1
    e510:	cmp	w14, w10
    e514:	add	w13, w13, w12
    e518:	csinc	w11, wzr, w11, eq  // eq = none
    e51c:	cmn	w13, #0x1
    e520:	str	w11, [x0, #80]
    e524:	str	w12, [x0, #24]
    e528:	b.eq	e538 <lzma_mf_is_supported@@XZ_5.0+0x988>  // b.none
    e52c:	mov	w0, w8
    e530:	ldp	x20, x19, [sp], #16
    e534:	ret
    e538:	ldr	w11, [x0, #108]
    e53c:	mvn	w10, w10
    e540:	cbz	w11, e56c <lzma_mf_is_supported@@XZ_5.0+0x9bc>
    e544:	mov	x11, xzr
    e548:	lsl	x12, x11, #2
    e54c:	ldr	w13, [x9, x12]
    e550:	add	x11, x11, #0x1
    e554:	subs	w13, w13, w10
    e558:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    e55c:	str	w13, [x9, x12]
    e560:	ldr	w12, [x0, #108]
    e564:	cmp	x11, x12
    e568:	b.cc	e548 <lzma_mf_is_supported@@XZ_5.0+0x998>  // b.lo, b.ul, b.last
    e56c:	ldr	w9, [x0, #112]
    e570:	cbz	w9, e59c <lzma_mf_is_supported@@XZ_5.0+0x9ec>
    e574:	mov	x9, xzr
    e578:	lsl	x11, x9, #2
    e57c:	ldr	w12, [x15, x11]
    e580:	add	x9, x9, #0x1
    e584:	subs	w12, w12, w10
    e588:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e58c:	str	w12, [x15, x11]
    e590:	ldr	w11, [x0, #112]
    e594:	cmp	x9, x11
    e598:	b.cc	e578 <lzma_mf_is_supported@@XZ_5.0+0x9c8>  // b.lo, b.ul, b.last
    e59c:	ldr	w9, [x0, #20]
    e5a0:	sub	w9, w9, w10
    e5a4:	str	w9, [x0, #20]
    e5a8:	b	e52c <lzma_mf_is_supported@@XZ_5.0+0x97c>
    e5ac:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    e5b0:	ldr	x8, [x8, #3952]
    e5b4:	mov	w9, #0x400                 	// #1024
    e5b8:	movk	w9, #0x1, lsl #16
    e5bc:	b	e5dc <lzma_mf_is_supported@@XZ_5.0+0xa2c>
    e5c0:	ldr	w11, [x0, #40]
    e5c4:	add	w10, w10, #0x1
    e5c8:	str	w10, [x0, #24]
    e5cc:	add	w10, w11, #0x1
    e5d0:	str	w10, [x0, #40]
    e5d4:	subs	w1, w1, #0x1
    e5d8:	b.eq	e700 <lzma_mf_is_supported@@XZ_5.0+0xb50>  // b.none
    e5dc:	ldr	w11, [x0, #36]
    e5e0:	ldr	w10, [x0, #24]
    e5e4:	sub	w11, w11, w10
    e5e8:	cmp	w11, #0x3
    e5ec:	b.ls	e5c0 <lzma_mf_is_supported@@XZ_5.0+0xa10>  // b.plast
    e5f0:	ldr	x11, [x0]
    e5f4:	ldr	w12, [x0, #20]
    e5f8:	ldr	w13, [x0, #88]
    e5fc:	add	x14, x11, x10
    e600:	ldrb	w11, [x14]
    e604:	ldrb	w15, [x14, #3]
    e608:	add	w10, w12, w10
    e60c:	ldrb	w12, [x14, #1]
    e610:	ldr	w16, [x8, x11, lsl #2]
    e614:	ldrb	w14, [x14, #2]
    e618:	ldr	w15, [x8, x15, lsl #2]
    e61c:	ldr	x11, [x0, #64]
    e620:	eor	w12, w16, w12
    e624:	and	w16, w12, #0x3ff
    e628:	eor	w12, w12, w14, lsl #8
    e62c:	and	w14, w12, #0xffff
    e630:	eor	w12, w12, w15, lsl #5
    e634:	and	w12, w12, w13
    e638:	add	w12, w12, w9
    e63c:	add	w13, w14, #0x400
    e640:	lsl	x12, x12, #2
    e644:	ldr	w14, [x11, x12]
    e648:	str	w10, [x11, w16, uxtw #2]
    e64c:	str	w10, [x11, w13, uxtw #2]
    e650:	str	w10, [x11, x12]
    e654:	ldr	x10, [x0, #72]
    e658:	ldr	w12, [x0, #80]
    e65c:	str	w14, [x10, x12, lsl #2]
    e660:	ldp	w13, w12, [x0, #80]
    e664:	ldp	w15, w14, [x0, #20]
    e668:	add	w16, w13, #0x1
    e66c:	add	w14, w14, #0x1
    e670:	cmp	w16, w12
    e674:	add	w15, w15, w14
    e678:	csinc	w13, wzr, w13, eq  // eq = none
    e67c:	cmn	w15, #0x1
    e680:	str	w13, [x0, #80]
    e684:	str	w14, [x0, #24]
    e688:	b.ne	e5d4 <lzma_mf_is_supported@@XZ_5.0+0xa24>  // b.any
    e68c:	ldr	w13, [x0, #108]
    e690:	mvn	w12, w12
    e694:	cbz	w13, e6c0 <lzma_mf_is_supported@@XZ_5.0+0xb10>
    e698:	mov	x13, xzr
    e69c:	lsl	x14, x13, #2
    e6a0:	ldr	w15, [x11, x14]
    e6a4:	add	x13, x13, #0x1
    e6a8:	subs	w15, w15, w12
    e6ac:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
    e6b0:	str	w15, [x11, x14]
    e6b4:	ldr	w14, [x0, #108]
    e6b8:	cmp	x13, x14
    e6bc:	b.cc	e69c <lzma_mf_is_supported@@XZ_5.0+0xaec>  // b.lo, b.ul, b.last
    e6c0:	ldr	w11, [x0, #112]
    e6c4:	cbz	w11, e6f0 <lzma_mf_is_supported@@XZ_5.0+0xb40>
    e6c8:	mov	x11, xzr
    e6cc:	lsl	x13, x11, #2
    e6d0:	ldr	w14, [x10, x13]
    e6d4:	add	x11, x11, #0x1
    e6d8:	subs	w14, w14, w12
    e6dc:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    e6e0:	str	w14, [x10, x13]
    e6e4:	ldr	w13, [x0, #112]
    e6e8:	cmp	x11, x13
    e6ec:	b.cc	e6cc <lzma_mf_is_supported@@XZ_5.0+0xb1c>  // b.lo, b.ul, b.last
    e6f0:	ldr	w10, [x0, #20]
    e6f4:	sub	w10, w10, w12
    e6f8:	str	w10, [x0, #20]
    e6fc:	b	e5d4 <lzma_mf_is_supported@@XZ_5.0+0xa24>
    e700:	ret
    e704:	str	x25, [sp, #-64]!
    e708:	stp	x24, x23, [sp, #16]
    e70c:	stp	x22, x21, [sp, #32]
    e710:	stp	x20, x19, [sp, #48]
    e714:	ldr	w9, [x0, #36]
    e718:	ldr	w15, [x0, #24]
    e71c:	ldr	w8, [x0, #96]
    e720:	sub	w9, w9, w15
    e724:	cmp	w8, w9
    e728:	b.ls	e760 <lzma_mf_is_supported@@XZ_5.0+0xbb0>  // b.plast
    e72c:	cmp	w9, #0x2
    e730:	b.cc	e744 <lzma_mf_is_supported@@XZ_5.0+0xb94>  // b.lo, b.ul, b.last
    e734:	ldr	w8, [x0, #104]
    e738:	cmp	w8, #0x1
    e73c:	mov	w8, w9
    e740:	b.ne	e760 <lzma_mf_is_supported@@XZ_5.0+0xbb0>  // b.any
    e744:	ldr	w9, [x0, #40]
    e748:	add	w10, w15, #0x1
    e74c:	mov	w8, wzr
    e750:	str	w10, [x0, #24]
    e754:	add	w9, w9, #0x1
    e758:	str	w9, [x0, #40]
    e75c:	b	e8e8 <lzma_mf_is_supported@@XZ_5.0+0xd38>
    e760:	ldr	x3, [x0]
    e764:	ldr	w9, [x0, #20]
    e768:	ldr	x10, [x0, #64]
    e76c:	add	x13, x3, x15
    e770:	ldrb	w11, [x13]
    e774:	ldrb	w12, [x13, #1]
    e778:	add	w14, w9, w15
    e77c:	lsl	x9, x11, #2
    e780:	bfi	x9, x12, #10, #8
    e784:	ldr	w4, [x10, x9]
    e788:	str	w14, [x10, x9]
    e78c:	ldr	w16, [x0, #80]
    e790:	ldr	x9, [x0, #72]
    e794:	ldr	w17, [x0, #92]
    e798:	lsl	w11, w16, #1
    e79c:	add	x11, x9, w11, uxtw #2
    e7a0:	add	x12, x11, #0x4
    e7a4:	cbz	w17, e8a8 <lzma_mf_is_supported@@XZ_5.0+0xcf8>
    e7a8:	ldr	w18, [x0, #84]
    e7ac:	sub	w7, w14, w4
    e7b0:	cmp	w7, w18
    e7b4:	b.cs	e8a8 <lzma_mf_is_supported@@XZ_5.0+0xcf8>  // b.hs, b.nlast
    e7b8:	mov	w5, wzr
    e7bc:	mov	w2, wzr
    e7c0:	add	x3, x3, x15
    e7c4:	mov	w6, #0x1                   	// #1
    e7c8:	mov	x15, x1
    e7cc:	subs	w19, w16, w7
    e7d0:	mov	w22, w7
    e7d4:	csel	w23, w18, wzr, cc  // cc = lo, ul, last
    e7d8:	cmp	w2, w5
    e7dc:	sub	x21, x13, x22
    e7e0:	csel	w20, w2, w5, cc  // cc = lo, ul, last
    e7e4:	ldrb	w24, [x21, x20]
    e7e8:	ldrb	w25, [x13, x20]
    e7ec:	add	w19, w19, w23
    e7f0:	lsl	w19, w19, #1
    e7f4:	add	x19, x9, w19, uxtw #2
    e7f8:	cmp	w24, w25
    e7fc:	b.ne	e854 <lzma_mf_is_supported@@XZ_5.0+0xca4>  // b.any
    e800:	add	w20, w20, #0x1
    e804:	cmp	w20, w8
    e808:	b.cs	e838 <lzma_mf_is_supported@@XZ_5.0+0xc88>  // b.hs, b.nlast
    e80c:	neg	x22, x22
    e810:	add	x23, x3, w20, uxtw
    e814:	ldrb	w24, [x23, x22]
    e818:	ldrb	w25, [x23]
    e81c:	cmp	w24, w25
    e820:	b.ne	e838 <lzma_mf_is_supported@@XZ_5.0+0xc88>  // b.any
    e824:	add	w20, w20, #0x1
    e828:	cmp	w8, w20
    e82c:	add	x23, x23, #0x1
    e830:	b.ne	e814 <lzma_mf_is_supported@@XZ_5.0+0xc64>  // b.any
    e834:	mov	w20, w8
    e838:	cmp	w6, w20
    e83c:	b.cs	e854 <lzma_mf_is_supported@@XZ_5.0+0xca4>  // b.hs, b.nlast
    e840:	sub	w6, w7, #0x1
    e844:	cmp	w20, w8
    e848:	stp	w20, w6, [x15], #8
    e84c:	b.eq	e900 <lzma_mf_is_supported@@XZ_5.0+0xd50>  // b.none
    e850:	mov	w6, w20
    e854:	mov	w7, w20
    e858:	ldrb	w21, [x21, x7]
    e85c:	ldrb	w7, [x13, x7]
    e860:	sub	w17, w17, #0x1
    e864:	cmp	w21, w7
    e868:	b.cs	e884 <lzma_mf_is_supported@@XZ_5.0+0xcd4>  // b.hs, b.nlast
    e86c:	str	w4, [x11]
    e870:	add	x11, x19, #0x4
    e874:	mov	w5, w20
    e878:	mov	x19, x11
    e87c:	cbnz	w17, e894 <lzma_mf_is_supported@@XZ_5.0+0xce4>
    e880:	b	e8ac <lzma_mf_is_supported@@XZ_5.0+0xcfc>
    e884:	str	w4, [x12]
    e888:	mov	x12, x19
    e88c:	mov	w2, w20
    e890:	cbz	w17, e8ac <lzma_mf_is_supported@@XZ_5.0+0xcfc>
    e894:	ldr	w4, [x19]
    e898:	sub	w7, w14, w4
    e89c:	cmp	w7, w18
    e8a0:	b.cc	e7cc <lzma_mf_is_supported@@XZ_5.0+0xc1c>  // b.lo, b.ul, b.last
    e8a4:	b	e8ac <lzma_mf_is_supported@@XZ_5.0+0xcfc>
    e8a8:	mov	x15, x1
    e8ac:	str	wzr, [x12]
    e8b0:	str	wzr, [x11]
    e8b4:	ldp	w12, w11, [x0, #80]
    e8b8:	ldp	w14, w13, [x0, #20]
    e8bc:	sub	x8, x15, x1
    e8c0:	lsr	x8, x8, #3
    e8c4:	add	w15, w12, #0x1
    e8c8:	add	w13, w13, #0x1
    e8cc:	cmp	w15, w11
    e8d0:	add	w14, w14, w13
    e8d4:	csinc	w12, wzr, w12, eq  // eq = none
    e8d8:	cmn	w14, #0x1
    e8dc:	str	w12, [x0, #80]
    e8e0:	str	w13, [x0, #24]
    e8e4:	b.eq	e914 <lzma_mf_is_supported@@XZ_5.0+0xd64>  // b.none
    e8e8:	ldp	x20, x19, [sp, #48]
    e8ec:	ldp	x22, x21, [sp, #32]
    e8f0:	ldp	x24, x23, [sp, #16]
    e8f4:	mov	w0, w8
    e8f8:	ldr	x25, [sp], #64
    e8fc:	ret
    e900:	ldr	w8, [x19]
    e904:	str	w8, [x11]
    e908:	ldr	w8, [x19, #4]
    e90c:	str	w8, [x12]
    e910:	b	e8b4 <lzma_mf_is_supported@@XZ_5.0+0xd04>
    e914:	ldr	w12, [x0, #108]
    e918:	mvn	w11, w11
    e91c:	cbz	w12, e948 <lzma_mf_is_supported@@XZ_5.0+0xd98>
    e920:	mov	x12, xzr
    e924:	lsl	x13, x12, #2
    e928:	ldr	w14, [x10, x13]
    e92c:	add	x12, x12, #0x1
    e930:	subs	w14, w14, w11
    e934:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    e938:	str	w14, [x10, x13]
    e93c:	ldr	w13, [x0, #108]
    e940:	cmp	x12, x13
    e944:	b.cc	e924 <lzma_mf_is_supported@@XZ_5.0+0xd74>  // b.lo, b.ul, b.last
    e948:	ldr	w10, [x0, #112]
    e94c:	cbz	w10, e978 <lzma_mf_is_supported@@XZ_5.0+0xdc8>
    e950:	mov	x10, xzr
    e954:	lsl	x12, x10, #2
    e958:	ldr	w13, [x9, x12]
    e95c:	add	x10, x10, #0x1
    e960:	subs	w13, w13, w11
    e964:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    e968:	str	w13, [x9, x12]
    e96c:	ldr	w12, [x0, #112]
    e970:	cmp	x10, x12
    e974:	b.cc	e954 <lzma_mf_is_supported@@XZ_5.0+0xda4>  // b.lo, b.ul, b.last
    e978:	ldr	w9, [x0, #20]
    e97c:	sub	w9, w9, w11
    e980:	str	w9, [x0, #20]
    e984:	b	e8e8 <lzma_mf_is_supported@@XZ_5.0+0xd38>
    e988:	stp	x22, x21, [sp, #-32]!
    e98c:	stp	x20, x19, [sp, #16]
    e990:	b	e9b0 <lzma_mf_is_supported@@XZ_5.0+0xe00>
    e994:	ldr	w8, [x0, #40]
    e998:	add	w9, w2, #0x1
    e99c:	str	w9, [x0, #24]
    e9a0:	add	w8, w8, #0x1
    e9a4:	str	w8, [x0, #40]
    e9a8:	subs	w1, w1, #0x1
    e9ac:	b.eq	ebc4 <lzma_mf_is_supported@@XZ_5.0+0x1014>  // b.none
    e9b0:	ldr	w8, [x0, #36]
    e9b4:	ldr	w2, [x0, #24]
    e9b8:	ldr	w10, [x0, #96]
    e9bc:	sub	w8, w8, w2
    e9c0:	cmp	w10, w8
    e9c4:	b.ls	e9e0 <lzma_mf_is_supported@@XZ_5.0+0xe30>  // b.plast
    e9c8:	cmp	w8, #0x2
    e9cc:	b.cc	e994 <lzma_mf_is_supported@@XZ_5.0+0xde4>  // b.lo, b.ul, b.last
    e9d0:	ldr	w9, [x0, #104]
    e9d4:	mov	w10, w8
    e9d8:	cmp	w9, #0x1
    e9dc:	b.eq	e994 <lzma_mf_is_supported@@XZ_5.0+0xde4>  // b.none
    e9e0:	ldr	x6, [x0]
    e9e4:	ldr	w8, [x0, #20]
    e9e8:	ldr	x9, [x0, #64]
    e9ec:	add	x12, x6, x2
    e9f0:	ldrb	w11, [x12]
    e9f4:	ldrb	w13, [x12, #1]
    e9f8:	add	w14, w8, w2
    e9fc:	lsl	x8, x11, #2
    ea00:	bfi	x8, x13, #10, #8
    ea04:	ldr	w4, [x9, x8]
    ea08:	str	w14, [x9, x8]
    ea0c:	ldr	w15, [x0, #80]
    ea10:	ldr	x8, [x0, #72]
    ea14:	ldr	w16, [x0, #92]
    ea18:	lsl	w11, w15, #1
    ea1c:	add	x11, x8, w11, uxtw #2
    ea20:	add	x13, x11, #0x4
    ea24:	cbz	w16, eb08 <lzma_mf_is_supported@@XZ_5.0+0xf58>
    ea28:	ldr	w17, [x0, #84]
    ea2c:	sub	w5, w14, w4
    ea30:	cmp	w5, w17
    ea34:	b.cs	eb08 <lzma_mf_is_supported@@XZ_5.0+0xf58>  // b.hs, b.nlast
    ea38:	mov	w3, wzr
    ea3c:	mov	w18, wzr
    ea40:	add	x2, x6, x2
    ea44:	subs	w22, w15, w5
    ea48:	mov	w21, w5
    ea4c:	csel	w5, w17, wzr, cc  // cc = lo, ul, last
    ea50:	cmp	w18, w3
    ea54:	sub	x7, x12, x21
    ea58:	csel	w6, w18, w3, cc  // cc = lo, ul, last
    ea5c:	ldrb	w19, [x7, x6]
    ea60:	ldrb	w20, [x12, x6]
    ea64:	add	w5, w22, w5
    ea68:	lsl	w5, w5, #1
    ea6c:	add	x5, x8, w5, uxtw #2
    ea70:	cmp	w19, w20
    ea74:	b.ne	eac4 <lzma_mf_is_supported@@XZ_5.0+0xf14>  // b.any
    ea78:	add	w6, w6, #0x1
    ea7c:	cmp	w6, w10
    ea80:	b.cs	eab0 <lzma_mf_is_supported@@XZ_5.0+0xf00>  // b.hs, b.nlast
    ea84:	neg	x19, x21
    ea88:	add	x20, x2, w6, uxtw
    ea8c:	ldrb	w21, [x20, x19]
    ea90:	ldrb	w22, [x20]
    ea94:	cmp	w21, w22
    ea98:	b.ne	eab0 <lzma_mf_is_supported@@XZ_5.0+0xf00>  // b.any
    ea9c:	add	w6, w6, #0x1
    eaa0:	cmp	w10, w6
    eaa4:	add	x20, x20, #0x1
    eaa8:	b.ne	ea8c <lzma_mf_is_supported@@XZ_5.0+0xedc>  // b.any
    eaac:	b	eb14 <lzma_mf_is_supported@@XZ_5.0+0xf64>
    eab0:	cmp	w6, w10
    eab4:	b.eq	eb14 <lzma_mf_is_supported@@XZ_5.0+0xf64>  // b.none
    eab8:	mov	w20, w6
    eabc:	ldrb	w19, [x7, x20]
    eac0:	ldrb	w20, [x12, x20]
    eac4:	cmp	w19, w20
    eac8:	sub	w16, w16, #0x1
    eacc:	b.cs	eae8 <lzma_mf_is_supported@@XZ_5.0+0xf38>  // b.hs, b.nlast
    ead0:	str	w4, [x11]
    ead4:	add	x11, x5, #0x4
    ead8:	mov	w3, w6
    eadc:	mov	x5, x11
    eae0:	cbnz	w16, eaf8 <lzma_mf_is_supported@@XZ_5.0+0xf48>
    eae4:	b	eb08 <lzma_mf_is_supported@@XZ_5.0+0xf58>
    eae8:	str	w4, [x13]
    eaec:	mov	w18, w6
    eaf0:	mov	x13, x5
    eaf4:	cbz	w16, eb08 <lzma_mf_is_supported@@XZ_5.0+0xf58>
    eaf8:	ldr	w4, [x5]
    eafc:	sub	w5, w14, w4
    eb00:	cmp	w5, w17
    eb04:	b.cc	ea44 <lzma_mf_is_supported@@XZ_5.0+0xe94>  // b.lo, b.ul, b.last
    eb08:	str	wzr, [x13]
    eb0c:	str	wzr, [x11]
    eb10:	b	eb24 <lzma_mf_is_supported@@XZ_5.0+0xf74>
    eb14:	ldr	w10, [x5]
    eb18:	str	w10, [x11]
    eb1c:	ldr	w10, [x5, #4]
    eb20:	str	w10, [x13]
    eb24:	ldp	w11, w10, [x0, #80]
    eb28:	ldp	w13, w12, [x0, #20]
    eb2c:	add	w14, w11, #0x1
    eb30:	add	w12, w12, #0x1
    eb34:	cmp	w14, w10
    eb38:	add	w13, w13, w12
    eb3c:	csinc	w11, wzr, w11, eq  // eq = none
    eb40:	cmn	w13, #0x1
    eb44:	str	w11, [x0, #80]
    eb48:	str	w12, [x0, #24]
    eb4c:	b.ne	e9a8 <lzma_mf_is_supported@@XZ_5.0+0xdf8>  // b.any
    eb50:	ldr	w11, [x0, #108]
    eb54:	mvn	w10, w10
    eb58:	cbz	w11, eb84 <lzma_mf_is_supported@@XZ_5.0+0xfd4>
    eb5c:	mov	x11, xzr
    eb60:	lsl	x12, x11, #2
    eb64:	ldr	w13, [x9, x12]
    eb68:	add	x11, x11, #0x1
    eb6c:	subs	w13, w13, w10
    eb70:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    eb74:	str	w13, [x9, x12]
    eb78:	ldr	w12, [x0, #108]
    eb7c:	cmp	x11, x12
    eb80:	b.cc	eb60 <lzma_mf_is_supported@@XZ_5.0+0xfb0>  // b.lo, b.ul, b.last
    eb84:	ldr	w9, [x0, #112]
    eb88:	cbz	w9, ebb4 <lzma_mf_is_supported@@XZ_5.0+0x1004>
    eb8c:	mov	x9, xzr
    eb90:	lsl	x11, x9, #2
    eb94:	ldr	w12, [x8, x11]
    eb98:	add	x9, x9, #0x1
    eb9c:	subs	w12, w12, w10
    eba0:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    eba4:	str	w12, [x8, x11]
    eba8:	ldr	w11, [x0, #112]
    ebac:	cmp	x9, x11
    ebb0:	b.cc	eb90 <lzma_mf_is_supported@@XZ_5.0+0xfe0>  // b.lo, b.ul, b.last
    ebb4:	ldr	w8, [x0, #20]
    ebb8:	sub	w8, w8, w10
    ebbc:	str	w8, [x0, #20]
    ebc0:	b	e9a8 <lzma_mf_is_supported@@XZ_5.0+0xdf8>
    ebc4:	ldp	x20, x19, [sp, #16]
    ebc8:	ldp	x22, x21, [sp], #32
    ebcc:	ret
    ebd0:	str	x25, [sp, #-64]!
    ebd4:	stp	x24, x23, [sp, #16]
    ebd8:	stp	x22, x21, [sp, #32]
    ebdc:	stp	x20, x19, [sp, #48]
    ebe0:	ldr	w9, [x0, #36]
    ebe4:	ldr	w3, [x0, #24]
    ebe8:	ldr	w8, [x0, #96]
    ebec:	sub	w9, w9, w3
    ebf0:	cmp	w8, w9
    ebf4:	b.ls	ec2c <lzma_mf_is_supported@@XZ_5.0+0x107c>  // b.plast
    ebf8:	cmp	w9, #0x3
    ebfc:	b.cc	ec10 <lzma_mf_is_supported@@XZ_5.0+0x1060>  // b.lo, b.ul, b.last
    ec00:	ldr	w8, [x0, #104]
    ec04:	cmp	w8, #0x1
    ec08:	mov	w8, w9
    ec0c:	b.ne	ec2c <lzma_mf_is_supported@@XZ_5.0+0x107c>  // b.any
    ec10:	ldr	w9, [x0, #40]
    ec14:	add	w10, w3, #0x1
    ec18:	mov	w8, wzr
    ec1c:	str	w10, [x0, #24]
    ec20:	add	w9, w9, #0x1
    ec24:	str	w9, [x0, #40]
    ec28:	b	ee38 <lzma_mf_is_supported@@XZ_5.0+0x1288>
    ec2c:	ldr	x7, [x0]
    ec30:	adrp	x12, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    ec34:	ldr	w11, [x0, #20]
    ec38:	add	x10, x7, x3
    ec3c:	ldrb	w9, [x10]
    ec40:	ldr	x12, [x12, #3952]
    ec44:	ldrb	w14, [x10, #1]
    ec48:	ldrb	w15, [x10, #2]
    ec4c:	ldr	w13, [x0, #88]
    ec50:	ldr	w12, [x12, x9, lsl #2]
    ec54:	ldr	x9, [x0, #64]
    ec58:	add	w11, w11, w3
    ec5c:	eor	w12, w12, w14
    ec60:	and	w14, w12, #0x3ff
    ec64:	eor	w12, w12, w15, lsl #8
    ec68:	and	w12, w12, w13
    ec6c:	add	w12, w12, #0x400
    ec70:	lsl	x14, x14, #2
    ec74:	lsl	x12, x12, #2
    ec78:	ldr	w15, [x9, x14]
    ec7c:	ldr	w13, [x9, x12]
    ec80:	str	w11, [x9, x14]
    ec84:	str	w11, [x9, x12]
    ec88:	ldr	w12, [x0, #84]
    ec8c:	sub	w14, w11, w15
    ec90:	cmp	w14, w12
    ec94:	b.cs	ece4 <lzma_mf_is_supported@@XZ_5.0+0x1134>  // b.hs, b.nlast
    ec98:	sub	x16, x10, w14, uxtw
    ec9c:	ldrb	w15, [x16]
    eca0:	ldrb	w17, [x10]
    eca4:	cmp	w15, w17
    eca8:	b.ne	ece4 <lzma_mf_is_supported@@XZ_5.0+0x1134>  // b.any
    ecac:	cmp	w8, #0x3
    ecb0:	b.cc	ee50 <lzma_mf_is_supported@@XZ_5.0+0x12a0>  // b.lo, b.ul, b.last
    ecb4:	mov	w17, w8
    ecb8:	mov	w15, #0x2                   	// #2
    ecbc:	ldrb	w18, [x10, x15]
    ecc0:	ldrb	w2, [x16, x15]
    ecc4:	cmp	w18, w2
    ecc8:	b.ne	ee54 <lzma_mf_is_supported@@XZ_5.0+0x12a4>  // b.any
    eccc:	add	x15, x15, #0x1
    ecd0:	cmp	w17, w15
    ecd4:	b.ne	ecbc <lzma_mf_is_supported@@XZ_5.0+0x110c>  // b.any
    ecd8:	sub	w14, w14, #0x1
    ecdc:	stp	w8, w14, [x1]
    ece0:	b	ee64 <lzma_mf_is_supported@@XZ_5.0+0x12b4>
    ece4:	mov	x16, xzr
    ece8:	mov	w15, #0x2                   	// #2
    ecec:	ldr	w2, [x0, #80]
    ecf0:	ldr	x14, [x0, #72]
    ecf4:	sub	w19, w11, w13
    ecf8:	add	x16, x1, x16, lsl #3
    ecfc:	lsl	w17, w2, #1
    ed00:	add	x18, x14, w17, uxtw #2
    ed04:	cmp	w19, w12
    ed08:	add	x17, x18, #0x4
    ed0c:	b.cs	edfc <lzma_mf_is_supported@@XZ_5.0+0x124c>  // b.hs, b.nlast
    ed10:	ldr	w4, [x0, #92]
    ed14:	cbz	w4, edfc <lzma_mf_is_supported@@XZ_5.0+0x124c>
    ed18:	mov	w6, wzr
    ed1c:	mov	w5, wzr
    ed20:	add	x3, x7, x3
    ed24:	subs	w7, w2, w19
    ed28:	mov	w22, w19
    ed2c:	csel	w23, w12, wzr, cc  // cc = lo, ul, last
    ed30:	cmp	w5, w6
    ed34:	sub	x21, x10, x22
    ed38:	csel	w20, w5, w6, cc  // cc = lo, ul, last
    ed3c:	ldrb	w24, [x21, x20]
    ed40:	ldrb	w25, [x10, x20]
    ed44:	add	w7, w7, w23
    ed48:	lsl	w7, w7, #1
    ed4c:	add	x7, x14, w7, uxtw #2
    ed50:	cmp	w24, w25
    ed54:	b.ne	edac <lzma_mf_is_supported@@XZ_5.0+0x11fc>  // b.any
    ed58:	add	w20, w20, #0x1
    ed5c:	cmp	w20, w8
    ed60:	b.cs	ed90 <lzma_mf_is_supported@@XZ_5.0+0x11e0>  // b.hs, b.nlast
    ed64:	neg	x22, x22
    ed68:	add	x23, x3, w20, uxtw
    ed6c:	ldrb	w24, [x23, x22]
    ed70:	ldrb	w25, [x23]
    ed74:	cmp	w24, w25
    ed78:	b.ne	ed90 <lzma_mf_is_supported@@XZ_5.0+0x11e0>  // b.any
    ed7c:	add	w20, w20, #0x1
    ed80:	cmp	w8, w20
    ed84:	add	x23, x23, #0x1
    ed88:	b.ne	ed6c <lzma_mf_is_supported@@XZ_5.0+0x11bc>  // b.any
    ed8c:	mov	w20, w8
    ed90:	cmp	w15, w20
    ed94:	b.cs	edac <lzma_mf_is_supported@@XZ_5.0+0x11fc>  // b.hs, b.nlast
    ed98:	sub	w15, w19, #0x1
    ed9c:	cmp	w20, w8
    eda0:	stp	w20, w15, [x16], #8
    eda4:	b.eq	ef6c <lzma_mf_is_supported@@XZ_5.0+0x13bc>  // b.none
    eda8:	mov	w15, w20
    edac:	mov	w19, w20
    edb0:	ldrb	w21, [x21, x19]
    edb4:	ldrb	w19, [x10, x19]
    edb8:	sub	w4, w4, #0x1
    edbc:	cmp	w21, w19
    edc0:	b.cs	eddc <lzma_mf_is_supported@@XZ_5.0+0x122c>  // b.hs, b.nlast
    edc4:	str	w13, [x18]
    edc8:	add	x18, x7, #0x4
    edcc:	mov	w6, w20
    edd0:	mov	x7, x18
    edd4:	cbnz	w4, edec <lzma_mf_is_supported@@XZ_5.0+0x123c>
    edd8:	b	edfc <lzma_mf_is_supported@@XZ_5.0+0x124c>
    eddc:	str	w13, [x17]
    ede0:	mov	x17, x7
    ede4:	mov	w5, w20
    ede8:	cbz	w4, edfc <lzma_mf_is_supported@@XZ_5.0+0x124c>
    edec:	ldr	w13, [x7]
    edf0:	sub	w19, w11, w13
    edf4:	cmp	w19, w12
    edf8:	b.cc	ed24 <lzma_mf_is_supported@@XZ_5.0+0x1174>  // b.lo, b.ul, b.last
    edfc:	str	wzr, [x17]
    ee00:	str	wzr, [x18]
    ee04:	ldp	w11, w10, [x0, #80]
    ee08:	ldp	w13, w12, [x0, #20]
    ee0c:	sub	x8, x16, x1
    ee10:	lsr	x8, x8, #3
    ee14:	add	w15, w11, #0x1
    ee18:	add	w12, w12, #0x1
    ee1c:	cmp	w15, w10
    ee20:	add	w13, w13, w12
    ee24:	csinc	w11, wzr, w11, eq  // eq = none
    ee28:	cmn	w13, #0x1
    ee2c:	str	w11, [x0, #80]
    ee30:	str	w12, [x0, #24]
    ee34:	b.eq	efc4 <lzma_mf_is_supported@@XZ_5.0+0x1414>  // b.none
    ee38:	ldp	x20, x19, [sp, #48]
    ee3c:	ldp	x22, x21, [sp, #32]
    ee40:	ldp	x24, x23, [sp, #16]
    ee44:	mov	w0, w8
    ee48:	ldr	x25, [sp], #64
    ee4c:	ret
    ee50:	mov	w15, #0x2                   	// #2
    ee54:	sub	w14, w14, #0x1
    ee58:	cmp	w15, w8
    ee5c:	stp	w15, w14, [x1]
    ee60:	b.ne	ef64 <lzma_mf_is_supported@@XZ_5.0+0x13b4>  // b.any
    ee64:	ldr	w17, [x0, #80]
    ee68:	ldr	x14, [x0, #72]
    ee6c:	sub	w5, w11, w13
    ee70:	cmp	w5, w12
    ee74:	lsl	w15, w17, #1
    ee78:	add	x15, x14, w15, uxtw #2
    ee7c:	add	x16, x15, #0x4
    ee80:	b.cs	ef58 <lzma_mf_is_supported@@XZ_5.0+0x13a8>  // b.hs, b.nlast
    ee84:	ldr	w18, [x0, #92]
    ee88:	cbz	w18, ef58 <lzma_mf_is_supported@@XZ_5.0+0x13a8>
    ee8c:	mov	w4, wzr
    ee90:	mov	w2, wzr
    ee94:	add	x1, x7, x3
    ee98:	subs	w3, w17, w5
    ee9c:	mov	w20, w5
    eea0:	csel	w21, w12, wzr, cc  // cc = lo, ul, last
    eea4:	cmp	w2, w4
    eea8:	sub	x6, x10, x20
    eeac:	csel	w5, w2, w4, cc  // cc = lo, ul, last
    eeb0:	ldrb	w7, [x6, x5]
    eeb4:	ldrb	w19, [x10, x5]
    eeb8:	add	w3, w3, w21
    eebc:	lsl	w3, w3, #1
    eec0:	add	x3, x14, w3, uxtw #2
    eec4:	cmp	w7, w19
    eec8:	b.ne	ef18 <lzma_mf_is_supported@@XZ_5.0+0x1368>  // b.any
    eecc:	add	w5, w5, #0x1
    eed0:	cmp	w5, w8
    eed4:	b.cs	ef04 <lzma_mf_is_supported@@XZ_5.0+0x1354>  // b.hs, b.nlast
    eed8:	neg	x7, x20
    eedc:	add	x19, x1, w5, uxtw
    eee0:	ldrb	w20, [x19, x7]
    eee4:	ldrb	w21, [x19]
    eee8:	cmp	w20, w21
    eeec:	b.ne	ef04 <lzma_mf_is_supported@@XZ_5.0+0x1354>  // b.any
    eef0:	add	w5, w5, #0x1
    eef4:	cmp	w8, w5
    eef8:	add	x19, x19, #0x1
    eefc:	b.ne	eee0 <lzma_mf_is_supported@@XZ_5.0+0x1330>  // b.any
    ef00:	b	ef80 <lzma_mf_is_supported@@XZ_5.0+0x13d0>
    ef04:	cmp	w5, w8
    ef08:	b.eq	ef80 <lzma_mf_is_supported@@XZ_5.0+0x13d0>  // b.none
    ef0c:	mov	w19, w5
    ef10:	ldrb	w7, [x6, x19]
    ef14:	ldrb	w19, [x10, x19]
    ef18:	cmp	w7, w19
    ef1c:	sub	w18, w18, #0x1
    ef20:	b.cs	ef38 <lzma_mf_is_supported@@XZ_5.0+0x1388>  // b.hs, b.nlast
    ef24:	str	w13, [x15]
    ef28:	add	x15, x3, #0x4
    ef2c:	mov	w4, w5
    ef30:	mov	x3, x15
    ef34:	b	ef44 <lzma_mf_is_supported@@XZ_5.0+0x1394>
    ef38:	str	w13, [x16]
    ef3c:	mov	w2, w5
    ef40:	mov	x16, x3
    ef44:	cbz	w18, ef58 <lzma_mf_is_supported@@XZ_5.0+0x13a8>
    ef48:	ldr	w13, [x3]
    ef4c:	sub	w5, w11, w13
    ef50:	cmp	w5, w12
    ef54:	b.cc	ee98 <lzma_mf_is_supported@@XZ_5.0+0x12e8>  // b.lo, b.ul, b.last
    ef58:	str	wzr, [x16]
    ef5c:	str	wzr, [x15]
    ef60:	b	ef90 <lzma_mf_is_supported@@XZ_5.0+0x13e0>
    ef64:	mov	w16, #0x1                   	// #1
    ef68:	b	ecec <lzma_mf_is_supported@@XZ_5.0+0x113c>
    ef6c:	ldr	w8, [x7]
    ef70:	str	w8, [x18]
    ef74:	ldr	w8, [x7, #4]
    ef78:	str	w8, [x17]
    ef7c:	b	ee04 <lzma_mf_is_supported@@XZ_5.0+0x1254>
    ef80:	ldr	w8, [x3]
    ef84:	str	w8, [x15]
    ef88:	ldr	w8, [x3, #4]
    ef8c:	str	w8, [x16]
    ef90:	ldp	w10, w8, [x0, #80]
    ef94:	ldp	w12, w11, [x0, #20]
    ef98:	add	w13, w10, #0x1
    ef9c:	add	w11, w11, #0x1
    efa0:	cmp	w13, w8
    efa4:	add	w12, w12, w11
    efa8:	csinc	w10, wzr, w10, eq  // eq = none
    efac:	cmn	w12, #0x1
    efb0:	str	w10, [x0, #80]
    efb4:	str	w11, [x0, #24]
    efb8:	b.eq	f038 <lzma_mf_is_supported@@XZ_5.0+0x1488>  // b.none
    efbc:	mov	w8, #0x1                   	// #1
    efc0:	b	ee38 <lzma_mf_is_supported@@XZ_5.0+0x1288>
    efc4:	ldr	w11, [x0, #108]
    efc8:	mvn	w10, w10
    efcc:	cbz	w11, eff8 <lzma_mf_is_supported@@XZ_5.0+0x1448>
    efd0:	mov	x11, xzr
    efd4:	lsl	x12, x11, #2
    efd8:	ldr	w13, [x9, x12]
    efdc:	add	x11, x11, #0x1
    efe0:	subs	w13, w13, w10
    efe4:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    efe8:	str	w13, [x9, x12]
    efec:	ldr	w12, [x0, #108]
    eff0:	cmp	x11, x12
    eff4:	b.cc	efd4 <lzma_mf_is_supported@@XZ_5.0+0x1424>  // b.lo, b.ul, b.last
    eff8:	ldr	w9, [x0, #112]
    effc:	cbz	w9, f028 <lzma_mf_is_supported@@XZ_5.0+0x1478>
    f000:	mov	x9, xzr
    f004:	lsl	x11, x9, #2
    f008:	ldr	w12, [x14, x11]
    f00c:	add	x9, x9, #0x1
    f010:	subs	w12, w12, w10
    f014:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    f018:	str	w12, [x14, x11]
    f01c:	ldr	w11, [x0, #112]
    f020:	cmp	x9, x11
    f024:	b.cc	f004 <lzma_mf_is_supported@@XZ_5.0+0x1454>  // b.lo, b.ul, b.last
    f028:	ldr	w9, [x0, #20]
    f02c:	sub	w9, w9, w10
    f030:	str	w9, [x0, #20]
    f034:	b	ee38 <lzma_mf_is_supported@@XZ_5.0+0x1288>
    f038:	ldr	w10, [x0, #108]
    f03c:	mvn	w8, w8
    f040:	cbz	w10, f06c <lzma_mf_is_supported@@XZ_5.0+0x14bc>
    f044:	mov	x10, xzr
    f048:	lsl	x11, x10, #2
    f04c:	ldr	w12, [x9, x11]
    f050:	add	x10, x10, #0x1
    f054:	subs	w12, w12, w8
    f058:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    f05c:	str	w12, [x9, x11]
    f060:	ldr	w11, [x0, #108]
    f064:	cmp	x10, x11
    f068:	b.cc	f048 <lzma_mf_is_supported@@XZ_5.0+0x1498>  // b.lo, b.ul, b.last
    f06c:	ldr	w9, [x0, #112]
    f070:	cbz	w9, f09c <lzma_mf_is_supported@@XZ_5.0+0x14ec>
    f074:	mov	x9, xzr
    f078:	lsl	x10, x9, #2
    f07c:	ldr	w11, [x14, x10]
    f080:	add	x9, x9, #0x1
    f084:	subs	w11, w11, w8
    f088:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
    f08c:	str	w11, [x14, x10]
    f090:	ldr	w10, [x0, #112]
    f094:	cmp	x9, x10
    f098:	b.cc	f078 <lzma_mf_is_supported@@XZ_5.0+0x14c8>  // b.lo, b.ul, b.last
    f09c:	ldr	w9, [x0, #20]
    f0a0:	sub	w8, w9, w8
    f0a4:	str	w8, [x0, #20]
    f0a8:	mov	w8, #0x1                   	// #1
    f0ac:	b	ee38 <lzma_mf_is_supported@@XZ_5.0+0x1288>
    f0b0:	str	x23, [sp, #-48]!
    f0b4:	stp	x22, x21, [sp, #16]
    f0b8:	stp	x20, x19, [sp, #32]
    f0bc:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    f0c0:	ldr	x8, [x8, #3952]
    f0c4:	b	f0e4 <lzma_mf_is_supported@@XZ_5.0+0x1534>
    f0c8:	ldr	w9, [x0, #40]
    f0cc:	add	w10, w3, #0x1
    f0d0:	str	w10, [x0, #24]
    f0d4:	add	w9, w9, #0x1
    f0d8:	str	w9, [x0, #40]
    f0dc:	subs	w1, w1, #0x1
    f0e0:	b.eq	f318 <lzma_mf_is_supported@@XZ_5.0+0x1768>  // b.none
    f0e4:	ldr	w9, [x0, #36]
    f0e8:	ldr	w3, [x0, #24]
    f0ec:	ldr	w11, [x0, #96]
    f0f0:	sub	w9, w9, w3
    f0f4:	cmp	w11, w9
    f0f8:	b.ls	f114 <lzma_mf_is_supported@@XZ_5.0+0x1564>  // b.plast
    f0fc:	cmp	w9, #0x3
    f100:	b.cc	f0c8 <lzma_mf_is_supported@@XZ_5.0+0x1518>  // b.lo, b.ul, b.last
    f104:	ldr	w10, [x0, #104]
    f108:	mov	w11, w9
    f10c:	cmp	w10, #0x1
    f110:	b.eq	f0c8 <lzma_mf_is_supported@@XZ_5.0+0x1518>  // b.none
    f114:	ldr	x7, [x0]
    f118:	ldr	w13, [x0, #20]
    f11c:	ldr	w14, [x0, #88]
    f120:	ldr	x10, [x0, #64]
    f124:	add	x12, x7, x3
    f128:	ldrb	w9, [x12]
    f12c:	ldrb	w16, [x12, #1]
    f130:	ldrb	w17, [x12, #2]
    f134:	add	w15, w13, w3
    f138:	ldr	w9, [x8, x9, lsl #2]
    f13c:	eor	w9, w9, w16
    f140:	and	w13, w9, #0x3ff
    f144:	eor	w9, w9, w17, lsl #8
    f148:	and	w9, w9, w14
    f14c:	add	w9, w9, #0x400
    f150:	lsl	x9, x9, #2
    f154:	ldr	w4, [x10, x9]
    f158:	str	w15, [x10, w13, uxtw #2]
    f15c:	str	w15, [x10, x9]
    f160:	ldr	w16, [x0, #80]
    f164:	ldr	x9, [x0, #72]
    f168:	ldr	w17, [x0, #92]
    f16c:	lsl	w13, w16, #1
    f170:	add	x13, x9, w13, uxtw #2
    f174:	add	x14, x13, #0x4
    f178:	cbz	w17, f25c <lzma_mf_is_supported@@XZ_5.0+0x16ac>
    f17c:	ldr	w18, [x0, #84]
    f180:	sub	w6, w15, w4
    f184:	cmp	w6, w18
    f188:	b.cs	f25c <lzma_mf_is_supported@@XZ_5.0+0x16ac>  // b.hs, b.nlast
    f18c:	mov	w5, wzr
    f190:	mov	w2, wzr
    f194:	add	x3, x7, x3
    f198:	subs	w23, w16, w6
    f19c:	mov	w22, w6
    f1a0:	csel	w6, w18, wzr, cc  // cc = lo, ul, last
    f1a4:	cmp	w2, w5
    f1a8:	sub	x19, x12, x22
    f1ac:	csel	w7, w2, w5, cc  // cc = lo, ul, last
    f1b0:	ldrb	w20, [x19, x7]
    f1b4:	ldrb	w21, [x12, x7]
    f1b8:	add	w6, w23, w6
    f1bc:	lsl	w6, w6, #1
    f1c0:	add	x6, x9, w6, uxtw #2
    f1c4:	cmp	w20, w21
    f1c8:	b.ne	f218 <lzma_mf_is_supported@@XZ_5.0+0x1668>  // b.any
    f1cc:	add	w7, w7, #0x1
    f1d0:	cmp	w7, w11
    f1d4:	b.cs	f204 <lzma_mf_is_supported@@XZ_5.0+0x1654>  // b.hs, b.nlast
    f1d8:	neg	x20, x22
    f1dc:	add	x21, x3, w7, uxtw
    f1e0:	ldrb	w22, [x21, x20]
    f1e4:	ldrb	w23, [x21]
    f1e8:	cmp	w22, w23
    f1ec:	b.ne	f204 <lzma_mf_is_supported@@XZ_5.0+0x1654>  // b.any
    f1f0:	add	w7, w7, #0x1
    f1f4:	cmp	w11, w7
    f1f8:	add	x21, x21, #0x1
    f1fc:	b.ne	f1e0 <lzma_mf_is_supported@@XZ_5.0+0x1630>  // b.any
    f200:	b	f268 <lzma_mf_is_supported@@XZ_5.0+0x16b8>
    f204:	cmp	w7, w11
    f208:	b.eq	f268 <lzma_mf_is_supported@@XZ_5.0+0x16b8>  // b.none
    f20c:	mov	w21, w7
    f210:	ldrb	w20, [x19, x21]
    f214:	ldrb	w21, [x12, x21]
    f218:	cmp	w20, w21
    f21c:	sub	w17, w17, #0x1
    f220:	b.cs	f23c <lzma_mf_is_supported@@XZ_5.0+0x168c>  // b.hs, b.nlast
    f224:	str	w4, [x13]
    f228:	add	x13, x6, #0x4
    f22c:	mov	w5, w7
    f230:	mov	x6, x13
    f234:	cbnz	w17, f24c <lzma_mf_is_supported@@XZ_5.0+0x169c>
    f238:	b	f25c <lzma_mf_is_supported@@XZ_5.0+0x16ac>
    f23c:	str	w4, [x14]
    f240:	mov	w2, w7
    f244:	mov	x14, x6
    f248:	cbz	w17, f25c <lzma_mf_is_supported@@XZ_5.0+0x16ac>
    f24c:	ldr	w4, [x6]
    f250:	sub	w6, w15, w4
    f254:	cmp	w6, w18
    f258:	b.cc	f198 <lzma_mf_is_supported@@XZ_5.0+0x15e8>  // b.lo, b.ul, b.last
    f25c:	str	wzr, [x14]
    f260:	str	wzr, [x13]
    f264:	b	f278 <lzma_mf_is_supported@@XZ_5.0+0x16c8>
    f268:	ldr	w11, [x6]
    f26c:	str	w11, [x13]
    f270:	ldr	w11, [x6, #4]
    f274:	str	w11, [x14]
    f278:	ldp	w12, w11, [x0, #80]
    f27c:	ldp	w14, w13, [x0, #20]
    f280:	add	w15, w12, #0x1
    f284:	add	w13, w13, #0x1
    f288:	cmp	w15, w11
    f28c:	add	w14, w14, w13
    f290:	csinc	w12, wzr, w12, eq  // eq = none
    f294:	cmn	w14, #0x1
    f298:	str	w12, [x0, #80]
    f29c:	str	w13, [x0, #24]
    f2a0:	b.ne	f0dc <lzma_mf_is_supported@@XZ_5.0+0x152c>  // b.any
    f2a4:	ldr	w12, [x0, #108]
    f2a8:	mvn	w11, w11
    f2ac:	cbz	w12, f2d8 <lzma_mf_is_supported@@XZ_5.0+0x1728>
    f2b0:	mov	x12, xzr
    f2b4:	lsl	x13, x12, #2
    f2b8:	ldr	w14, [x10, x13]
    f2bc:	add	x12, x12, #0x1
    f2c0:	subs	w14, w14, w11
    f2c4:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    f2c8:	str	w14, [x10, x13]
    f2cc:	ldr	w13, [x0, #108]
    f2d0:	cmp	x12, x13
    f2d4:	b.cc	f2b4 <lzma_mf_is_supported@@XZ_5.0+0x1704>  // b.lo, b.ul, b.last
    f2d8:	ldr	w10, [x0, #112]
    f2dc:	cbz	w10, f308 <lzma_mf_is_supported@@XZ_5.0+0x1758>
    f2e0:	mov	x10, xzr
    f2e4:	lsl	x12, x10, #2
    f2e8:	ldr	w13, [x9, x12]
    f2ec:	add	x10, x10, #0x1
    f2f0:	subs	w13, w13, w11
    f2f4:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    f2f8:	str	w13, [x9, x12]
    f2fc:	ldr	w12, [x0, #112]
    f300:	cmp	x10, x12
    f304:	b.cc	f2e4 <lzma_mf_is_supported@@XZ_5.0+0x1734>  // b.lo, b.ul, b.last
    f308:	ldr	w9, [x0, #20]
    f30c:	sub	w9, w9, w11
    f310:	str	w9, [x0, #20]
    f314:	b	f0dc <lzma_mf_is_supported@@XZ_5.0+0x152c>
    f318:	ldp	x20, x19, [sp, #32]
    f31c:	ldp	x22, x21, [sp, #16]
    f320:	ldr	x23, [sp], #48
    f324:	ret
    f328:	str	x25, [sp, #-64]!
    f32c:	stp	x24, x23, [sp, #16]
    f330:	stp	x22, x21, [sp, #32]
    f334:	stp	x20, x19, [sp, #48]
    f338:	ldr	w8, [x0, #36]
    f33c:	ldr	w16, [x0, #24]
    f340:	ldr	w10, [x0, #96]
    f344:	sub	w8, w8, w16
    f348:	cmp	w10, w8
    f34c:	b.ls	f384 <lzma_mf_is_supported@@XZ_5.0+0x17d4>  // b.plast
    f350:	cmp	w8, #0x4
    f354:	b.cc	f368 <lzma_mf_is_supported@@XZ_5.0+0x17b8>  // b.lo, b.ul, b.last
    f358:	ldr	w9, [x0, #104]
    f35c:	mov	w10, w8
    f360:	cmp	w9, #0x1
    f364:	b.ne	f384 <lzma_mf_is_supported@@XZ_5.0+0x17d4>  // b.any
    f368:	ldr	w9, [x0, #40]
    f36c:	add	w10, w16, #0x1
    f370:	mov	w8, wzr
    f374:	str	w10, [x0, #24]
    f378:	add	w9, w9, #0x1
    f37c:	str	w9, [x0, #40]
    f380:	b	f800 <lzma_mf_is_supported@@XZ_5.0+0x1c50>
    f384:	ldr	x17, [x0]
    f388:	adrp	x13, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    f38c:	ldr	w8, [x0, #20]
    f390:	ldr	x13, [x13, #3952]
    f394:	add	x11, x17, x16
    f398:	ldrb	w12, [x11]
    f39c:	ldrb	w2, [x11, #3]
    f3a0:	ldrb	w18, [x11, #1]
    f3a4:	ldr	w14, [x0, #88]
    f3a8:	ldr	w3, [x13, x12, lsl #2]
    f3ac:	add	w12, w8, w16
    f3b0:	ldrb	w8, [x11, #2]
    f3b4:	ldr	w13, [x13, x2, lsl #2]
    f3b8:	eor	w18, w3, w18
    f3bc:	ldr	x9, [x0, #64]
    f3c0:	eor	w8, w18, w8, lsl #8
    f3c4:	mov	w15, #0x400                 	// #1024
    f3c8:	and	w2, w18, #0x3ff
    f3cc:	and	w18, w8, #0xffff
    f3d0:	eor	w8, w8, w13, lsl #5
    f3d4:	movk	w15, #0x1, lsl #16
    f3d8:	and	w8, w8, w14
    f3dc:	add	w14, w18, #0x400
    f3e0:	add	w8, w8, w15
    f3e4:	lsl	x13, x2, #2
    f3e8:	lsl	x3, x14, #2
    f3ec:	lsl	x8, x8, #2
    f3f0:	ldr	w2, [x9, x13]
    f3f4:	ldr	w18, [x9, x3]
    f3f8:	ldr	w14, [x9, x8]
    f3fc:	str	w12, [x9, x13]
    f400:	str	w12, [x9, x3]
    f404:	str	w12, [x9, x8]
    f408:	ldr	w13, [x0, #84]
    f40c:	sub	w8, w12, w2
    f410:	cmp	w8, w13
    f414:	b.cs	f448 <lzma_mf_is_supported@@XZ_5.0+0x1898>  // b.hs, b.nlast
    f418:	sub	x15, x11, w8, uxtw
    f41c:	ldrb	w15, [x15]
    f420:	ldrb	w3, [x11]
    f424:	cmp	w15, w3
    f428:	b.ne	f448 <lzma_mf_is_supported@@XZ_5.0+0x1898>  // b.any
    f42c:	mov	w7, #0x2                   	// #2
    f430:	sub	w15, w8, #0x1
    f434:	stp	w7, w15, [x1]
    f438:	mov	w15, #0x1                   	// #1
    f43c:	cmp	w18, w2
    f440:	b.ne	f458 <lzma_mf_is_supported@@XZ_5.0+0x18a8>  // b.any
    f444:	b	f4a0 <lzma_mf_is_supported@@XZ_5.0+0x18f0>
    f448:	mov	w15, wzr
    f44c:	mov	w7, #0x1                   	// #1
    f450:	cmp	w18, w2
    f454:	b.eq	f4a0 <lzma_mf_is_supported@@XZ_5.0+0x18f0>  // b.none
    f458:	sub	w2, w12, w18
    f45c:	cmp	w2, w13
    f460:	b.cs	f4a0 <lzma_mf_is_supported@@XZ_5.0+0x18f0>  // b.hs, b.nlast
    f464:	mov	w18, w2
    f468:	sub	x3, x11, x18
    f46c:	ldrb	w3, [x3]
    f470:	ldrb	w4, [x11]
    f474:	cmp	w3, w4
    f478:	b.ne	f4a0 <lzma_mf_is_supported@@XZ_5.0+0x18f0>  // b.any
    f47c:	sub	w2, w2, #0x1
    f480:	add	w8, w15, #0x1
    f484:	add	x15, x1, w15, uxtw #3
    f488:	neg	x18, x18
    f48c:	str	w2, [x15, #4]
    f490:	mov	w7, #0x3                   	// #3
    f494:	cmp	w7, w10
    f498:	b.cc	f4b8 <lzma_mf_is_supported@@XZ_5.0+0x1908>  // b.lo, b.ul, b.last
    f49c:	b	f4ec <lzma_mf_is_supported@@XZ_5.0+0x193c>
    f4a0:	cbz	w15, f600 <lzma_mf_is_supported@@XZ_5.0+0x1a50>
    f4a4:	mov	x15, xzr
    f4a8:	sub	x18, x15, w8, uxtw
    f4ac:	mov	w8, #0x1                   	// #1
    f4b0:	cmp	w7, w10
    f4b4:	b.cs	f4ec <lzma_mf_is_supported@@XZ_5.0+0x193c>  // b.hs, b.nlast
    f4b8:	add	x15, x11, x18
    f4bc:	mov	w18, w10
    f4c0:	ldrb	w2, [x11, x7]
    f4c4:	ldrb	w3, [x15, x7]
    f4c8:	cmp	w2, w3
    f4cc:	b.ne	f4ec <lzma_mf_is_supported@@XZ_5.0+0x193c>  // b.any
    f4d0:	add	x7, x7, #0x1
    f4d4:	cmp	w18, w7
    f4d8:	b.ne	f4c0 <lzma_mf_is_supported@@XZ_5.0+0x1910>  // b.any
    f4dc:	sub	w15, w8, #0x1
    f4e0:	lsl	x15, x15, #3
    f4e4:	str	w10, [x1, x15]
    f4e8:	b	f500 <lzma_mf_is_supported@@XZ_5.0+0x1950>
    f4ec:	sub	w15, w8, #0x1
    f4f0:	lsl	x15, x15, #3
    f4f4:	cmp	w7, w10
    f4f8:	str	w7, [x1, x15]
    f4fc:	b.ne	f604 <lzma_mf_is_supported@@XZ_5.0+0x1a54>  // b.any
    f500:	ldr	w2, [x0, #80]
    f504:	ldr	x15, [x0, #72]
    f508:	sub	w6, w12, w14
    f50c:	cmp	w6, w13
    f510:	lsl	w18, w2, #1
    f514:	add	x18, x15, w18, uxtw #2
    f518:	add	x1, x18, #0x4
    f51c:	b.cs	f5f4 <lzma_mf_is_supported@@XZ_5.0+0x1a44>  // b.hs, b.nlast
    f520:	ldr	w3, [x0, #92]
    f524:	cbz	w3, f5f4 <lzma_mf_is_supported@@XZ_5.0+0x1a44>
    f528:	mov	w5, wzr
    f52c:	mov	w4, wzr
    f530:	add	x16, x17, x16
    f534:	subs	w17, w2, w6
    f538:	mov	w21, w6
    f53c:	csel	w22, w13, wzr, cc  // cc = lo, ul, last
    f540:	cmp	w4, w5
    f544:	sub	x7, x11, x21
    f548:	csel	w6, w4, w5, cc  // cc = lo, ul, last
    f54c:	ldrb	w19, [x7, x6]
    f550:	ldrb	w20, [x11, x6]
    f554:	add	w17, w17, w22
    f558:	lsl	w17, w17, #1
    f55c:	add	x17, x15, w17, uxtw #2
    f560:	cmp	w19, w20
    f564:	b.ne	f5b4 <lzma_mf_is_supported@@XZ_5.0+0x1a04>  // b.any
    f568:	add	w6, w6, #0x1
    f56c:	cmp	w6, w10
    f570:	b.cs	f5a0 <lzma_mf_is_supported@@XZ_5.0+0x19f0>  // b.hs, b.nlast
    f574:	neg	x19, x21
    f578:	add	x20, x16, w6, uxtw
    f57c:	ldrb	w21, [x20, x19]
    f580:	ldrb	w22, [x20]
    f584:	cmp	w21, w22
    f588:	b.ne	f5a0 <lzma_mf_is_supported@@XZ_5.0+0x19f0>  // b.any
    f58c:	add	w6, w6, #0x1
    f590:	cmp	w10, w6
    f594:	add	x20, x20, #0x1
    f598:	b.ne	f57c <lzma_mf_is_supported@@XZ_5.0+0x19cc>  // b.any
    f59c:	b	f7c4 <lzma_mf_is_supported@@XZ_5.0+0x1c14>
    f5a0:	cmp	w6, w10
    f5a4:	b.eq	f7c4 <lzma_mf_is_supported@@XZ_5.0+0x1c14>  // b.none
    f5a8:	mov	w20, w6
    f5ac:	ldrb	w19, [x7, x20]
    f5b0:	ldrb	w20, [x11, x20]
    f5b4:	cmp	w19, w20
    f5b8:	sub	w3, w3, #0x1
    f5bc:	b.cs	f5d4 <lzma_mf_is_supported@@XZ_5.0+0x1a24>  // b.hs, b.nlast
    f5c0:	str	w14, [x18]
    f5c4:	add	x18, x17, #0x4
    f5c8:	mov	w5, w6
    f5cc:	mov	x17, x18
    f5d0:	b	f5e0 <lzma_mf_is_supported@@XZ_5.0+0x1a30>
    f5d4:	str	w14, [x1]
    f5d8:	mov	w4, w6
    f5dc:	mov	x1, x17
    f5e0:	cbz	w3, f5f4 <lzma_mf_is_supported@@XZ_5.0+0x1a44>
    f5e4:	ldr	w14, [x17]
    f5e8:	sub	w6, w12, w14
    f5ec:	cmp	w6, w13
    f5f0:	b.cc	f534 <lzma_mf_is_supported@@XZ_5.0+0x1984>  // b.lo, b.ul, b.last
    f5f4:	str	wzr, [x1]
    f5f8:	str	wzr, [x18]
    f5fc:	b	f7d4 <lzma_mf_is_supported@@XZ_5.0+0x1c24>
    f600:	mov	w8, wzr
    f604:	ldr	w3, [x0, #80]
    f608:	ldr	x15, [x0, #72]
    f60c:	sub	w19, w12, w14
    f610:	add	x8, x1, w8, uxtw #3
    f614:	lsl	w18, w3, #1
    f618:	add	x2, x15, w18, uxtw #2
    f61c:	cmp	w19, w13
    f620:	add	x18, x2, #0x4
    f624:	b.cs	f720 <lzma_mf_is_supported@@XZ_5.0+0x1b70>  // b.hs, b.nlast
    f628:	ldr	w4, [x0, #92]
    f62c:	cbz	w4, f720 <lzma_mf_is_supported@@XZ_5.0+0x1b70>
    f630:	cmp	w7, #0x3
    f634:	mov	w20, #0x3                   	// #3
    f638:	mov	w6, wzr
    f63c:	mov	w5, wzr
    f640:	csel	w7, w7, w20, hi  // hi = pmore
    f644:	add	x16, x17, x16
    f648:	subs	w17, w3, w19
    f64c:	mov	w22, w19
    f650:	csel	w23, w13, wzr, cc  // cc = lo, ul, last
    f654:	cmp	w5, w6
    f658:	sub	x21, x11, x22
    f65c:	csel	w20, w5, w6, cc  // cc = lo, ul, last
    f660:	ldrb	w24, [x21, x20]
    f664:	ldrb	w25, [x11, x20]
    f668:	add	w17, w17, w23
    f66c:	lsl	w17, w17, #1
    f670:	add	x17, x15, w17, uxtw #2
    f674:	cmp	w24, w25
    f678:	b.ne	f6d0 <lzma_mf_is_supported@@XZ_5.0+0x1b20>  // b.any
    f67c:	add	w20, w20, #0x1
    f680:	cmp	w20, w10
    f684:	b.cs	f6b4 <lzma_mf_is_supported@@XZ_5.0+0x1b04>  // b.hs, b.nlast
    f688:	neg	x22, x22
    f68c:	add	x23, x16, w20, uxtw
    f690:	ldrb	w24, [x23, x22]
    f694:	ldrb	w25, [x23]
    f698:	cmp	w24, w25
    f69c:	b.ne	f6b4 <lzma_mf_is_supported@@XZ_5.0+0x1b04>  // b.any
    f6a0:	add	w20, w20, #0x1
    f6a4:	cmp	w10, w20
    f6a8:	add	x23, x23, #0x1
    f6ac:	b.ne	f690 <lzma_mf_is_supported@@XZ_5.0+0x1ae0>  // b.any
    f6b0:	mov	w20, w10
    f6b4:	cmp	w7, w20
    f6b8:	b.cs	f6d0 <lzma_mf_is_supported@@XZ_5.0+0x1b20>  // b.hs, b.nlast
    f6bc:	sub	w7, w19, #0x1
    f6c0:	cmp	w20, w10
    f6c4:	stp	w20, w7, [x8], #8
    f6c8:	b.eq	f818 <lzma_mf_is_supported@@XZ_5.0+0x1c68>  // b.none
    f6cc:	mov	w7, w20
    f6d0:	mov	w19, w20
    f6d4:	ldrb	w21, [x21, x19]
    f6d8:	ldrb	w19, [x11, x19]
    f6dc:	sub	w4, w4, #0x1
    f6e0:	cmp	w21, w19
    f6e4:	b.cs	f700 <lzma_mf_is_supported@@XZ_5.0+0x1b50>  // b.hs, b.nlast
    f6e8:	str	w14, [x2]
    f6ec:	add	x2, x17, #0x4
    f6f0:	mov	w6, w20
    f6f4:	mov	x17, x2
    f6f8:	cbnz	w4, f710 <lzma_mf_is_supported@@XZ_5.0+0x1b60>
    f6fc:	b	f720 <lzma_mf_is_supported@@XZ_5.0+0x1b70>
    f700:	str	w14, [x18]
    f704:	mov	x18, x17
    f708:	mov	w5, w20
    f70c:	cbz	w4, f720 <lzma_mf_is_supported@@XZ_5.0+0x1b70>
    f710:	ldr	w14, [x17]
    f714:	sub	w19, w12, w14
    f718:	cmp	w19, w13
    f71c:	b.cc	f648 <lzma_mf_is_supported@@XZ_5.0+0x1a98>  // b.lo, b.ul, b.last
    f720:	str	wzr, [x18]
    f724:	str	wzr, [x2]
    f728:	ldp	w11, w10, [x0, #80]
    f72c:	ldp	w13, w12, [x0, #20]
    f730:	sub	x8, x8, x1
    f734:	lsr	x8, x8, #3
    f738:	add	w14, w11, #0x1
    f73c:	add	w12, w12, #0x1
    f740:	cmp	w14, w10
    f744:	add	w13, w13, w12
    f748:	csinc	w11, wzr, w11, eq  // eq = none
    f74c:	cmn	w13, #0x1
    f750:	str	w11, [x0, #80]
    f754:	str	w12, [x0, #24]
    f758:	b.ne	f800 <lzma_mf_is_supported@@XZ_5.0+0x1c50>  // b.any
    f75c:	ldr	w11, [x0, #108]
    f760:	mvn	w10, w10
    f764:	cbz	w11, f790 <lzma_mf_is_supported@@XZ_5.0+0x1be0>
    f768:	mov	x11, xzr
    f76c:	lsl	x12, x11, #2
    f770:	ldr	w13, [x9, x12]
    f774:	add	x11, x11, #0x1
    f778:	subs	w13, w13, w10
    f77c:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    f780:	str	w13, [x9, x12]
    f784:	ldr	w12, [x0, #108]
    f788:	cmp	x11, x12
    f78c:	b.cc	f76c <lzma_mf_is_supported@@XZ_5.0+0x1bbc>  // b.lo, b.ul, b.last
    f790:	ldr	w9, [x0, #112]
    f794:	cbz	w9, f890 <lzma_mf_is_supported@@XZ_5.0+0x1ce0>
    f798:	mov	x9, xzr
    f79c:	lsl	x11, x9, #2
    f7a0:	ldr	w12, [x15, x11]
    f7a4:	add	x9, x9, #0x1
    f7a8:	subs	w12, w12, w10
    f7ac:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    f7b0:	str	w12, [x15, x11]
    f7b4:	ldr	w11, [x0, #112]
    f7b8:	cmp	x9, x11
    f7bc:	b.cc	f79c <lzma_mf_is_supported@@XZ_5.0+0x1bec>  // b.lo, b.ul, b.last
    f7c0:	b	f890 <lzma_mf_is_supported@@XZ_5.0+0x1ce0>
    f7c4:	ldr	w10, [x17]
    f7c8:	str	w10, [x18]
    f7cc:	ldr	w10, [x17, #4]
    f7d0:	str	w10, [x1]
    f7d4:	ldp	w11, w10, [x0, #80]
    f7d8:	ldp	w13, w12, [x0, #20]
    f7dc:	add	w14, w11, #0x1
    f7e0:	add	w12, w12, #0x1
    f7e4:	cmp	w14, w10
    f7e8:	add	w13, w13, w12
    f7ec:	csinc	w11, wzr, w11, eq  // eq = none
    f7f0:	cmn	w13, #0x1
    f7f4:	str	w11, [x0, #80]
    f7f8:	str	w12, [x0, #24]
    f7fc:	b.eq	f82c <lzma_mf_is_supported@@XZ_5.0+0x1c7c>  // b.none
    f800:	ldp	x20, x19, [sp, #48]
    f804:	ldp	x22, x21, [sp, #32]
    f808:	ldp	x24, x23, [sp, #16]
    f80c:	mov	w0, w8
    f810:	ldr	x25, [sp], #64
    f814:	ret
    f818:	ldr	w10, [x17]
    f81c:	str	w10, [x2]
    f820:	ldr	w10, [x17, #4]
    f824:	str	w10, [x18]
    f828:	b	f728 <lzma_mf_is_supported@@XZ_5.0+0x1b78>
    f82c:	ldr	w11, [x0, #108]
    f830:	mvn	w10, w10
    f834:	cbz	w11, f860 <lzma_mf_is_supported@@XZ_5.0+0x1cb0>
    f838:	mov	x11, xzr
    f83c:	lsl	x12, x11, #2
    f840:	ldr	w13, [x9, x12]
    f844:	add	x11, x11, #0x1
    f848:	subs	w13, w13, w10
    f84c:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    f850:	str	w13, [x9, x12]
    f854:	ldr	w12, [x0, #108]
    f858:	cmp	x11, x12
    f85c:	b.cc	f83c <lzma_mf_is_supported@@XZ_5.0+0x1c8c>  // b.lo, b.ul, b.last
    f860:	ldr	w9, [x0, #112]
    f864:	cbz	w9, f890 <lzma_mf_is_supported@@XZ_5.0+0x1ce0>
    f868:	mov	x9, xzr
    f86c:	lsl	x11, x9, #2
    f870:	ldr	w12, [x15, x11]
    f874:	add	x9, x9, #0x1
    f878:	subs	w12, w12, w10
    f87c:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    f880:	str	w12, [x15, x11]
    f884:	ldr	w11, [x0, #112]
    f888:	cmp	x9, x11
    f88c:	b.cc	f86c <lzma_mf_is_supported@@XZ_5.0+0x1cbc>  // b.lo, b.ul, b.last
    f890:	ldr	w9, [x0, #20]
    f894:	sub	w9, w9, w10
    f898:	str	w9, [x0, #20]
    f89c:	b	f800 <lzma_mf_is_supported@@XZ_5.0+0x1c50>
    f8a0:	stp	x24, x23, [sp, #-48]!
    f8a4:	stp	x22, x21, [sp, #16]
    f8a8:	stp	x20, x19, [sp, #32]
    f8ac:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
    f8b0:	ldr	x8, [x8, #3952]
    f8b4:	mov	w9, #0x400                 	// #1024
    f8b8:	movk	w9, #0x1, lsl #16
    f8bc:	b	f8dc <lzma_mf_is_supported@@XZ_5.0+0x1d2c>
    f8c0:	ldr	w10, [x0, #40]
    f8c4:	add	w11, w4, #0x1
    f8c8:	str	w11, [x0, #24]
    f8cc:	add	w10, w10, #0x1
    f8d0:	str	w10, [x0, #40]
    f8d4:	subs	w1, w1, #0x1
    f8d8:	b.eq	fb28 <lzma_mf_is_supported@@XZ_5.0+0x1f78>  // b.none
    f8dc:	ldr	w10, [x0, #36]
    f8e0:	ldr	w4, [x0, #24]
    f8e4:	ldr	w12, [x0, #96]
    f8e8:	sub	w10, w10, w4
    f8ec:	cmp	w12, w10
    f8f0:	b.ls	f90c <lzma_mf_is_supported@@XZ_5.0+0x1d5c>  // b.plast
    f8f4:	cmp	w10, #0x4
    f8f8:	b.cc	f8c0 <lzma_mf_is_supported@@XZ_5.0+0x1d10>  // b.lo, b.ul, b.last
    f8fc:	ldr	w11, [x0, #104]
    f900:	mov	w12, w10
    f904:	cmp	w11, #0x1
    f908:	b.eq	f8c0 <lzma_mf_is_supported@@XZ_5.0+0x1d10>  // b.none
    f90c:	ldr	x19, [x0]
    f910:	ldr	w10, [x0, #20]
    f914:	ldr	w13, [x0, #88]
    f918:	ldr	x11, [x0, #64]
    f91c:	add	x14, x19, x4
    f920:	ldrb	w15, [x14]
    f924:	ldrb	w18, [x14, #3]
    f928:	ldrb	w17, [x14, #1]
    f92c:	add	w16, w10, w4
    f930:	ldr	w15, [x8, x15, lsl #2]
    f934:	ldrb	w10, [x14, #2]
    f938:	ldr	w18, [x8, x18, lsl #2]
    f93c:	eor	w15, w15, w17
    f940:	eor	w10, w15, w10, lsl #8
    f944:	and	w17, w15, #0x3ff
    f948:	and	w15, w10, #0xffff
    f94c:	eor	w10, w10, w18, lsl #5
    f950:	and	w10, w10, w13
    f954:	add	w10, w10, w9
    f958:	add	w13, w15, #0x400
    f95c:	lsl	x10, x10, #2
    f960:	ldr	w6, [x11, x10]
    f964:	str	w16, [x11, w17, uxtw #2]
    f968:	str	w16, [x11, w13, uxtw #2]
    f96c:	str	w16, [x11, x10]
    f970:	ldr	w17, [x0, #80]
    f974:	ldr	x10, [x0, #72]
    f978:	ldr	w18, [x0, #92]
    f97c:	lsl	w13, w17, #1
    f980:	add	x13, x10, w13, uxtw #2
    f984:	add	x15, x13, #0x4
    f988:	cbz	w18, fa6c <lzma_mf_is_supported@@XZ_5.0+0x1ebc>
    f98c:	ldr	w2, [x0, #84]
    f990:	sub	w7, w16, w6
    f994:	cmp	w7, w2
    f998:	b.cs	fa6c <lzma_mf_is_supported@@XZ_5.0+0x1ebc>  // b.hs, b.nlast
    f99c:	mov	w5, wzr
    f9a0:	mov	w3, wzr
    f9a4:	add	x4, x19, x4
    f9a8:	subs	w24, w17, w7
    f9ac:	mov	w23, w7
    f9b0:	csel	w7, w2, wzr, cc  // cc = lo, ul, last
    f9b4:	cmp	w3, w5
    f9b8:	sub	x20, x14, x23
    f9bc:	csel	w19, w3, w5, cc  // cc = lo, ul, last
    f9c0:	ldrb	w21, [x20, x19]
    f9c4:	ldrb	w22, [x14, x19]
    f9c8:	add	w7, w24, w7
    f9cc:	lsl	w7, w7, #1
    f9d0:	add	x7, x10, w7, uxtw #2
    f9d4:	cmp	w21, w22
    f9d8:	b.ne	fa28 <lzma_mf_is_supported@@XZ_5.0+0x1e78>  // b.any
    f9dc:	add	w19, w19, #0x1
    f9e0:	cmp	w19, w12
    f9e4:	b.cs	fa14 <lzma_mf_is_supported@@XZ_5.0+0x1e64>  // b.hs, b.nlast
    f9e8:	neg	x21, x23
    f9ec:	add	x22, x4, w19, uxtw
    f9f0:	ldrb	w23, [x22, x21]
    f9f4:	ldrb	w24, [x22]
    f9f8:	cmp	w23, w24
    f9fc:	b.ne	fa14 <lzma_mf_is_supported@@XZ_5.0+0x1e64>  // b.any
    fa00:	add	w19, w19, #0x1
    fa04:	cmp	w12, w19
    fa08:	add	x22, x22, #0x1
    fa0c:	b.ne	f9f0 <lzma_mf_is_supported@@XZ_5.0+0x1e40>  // b.any
    fa10:	b	fa78 <lzma_mf_is_supported@@XZ_5.0+0x1ec8>
    fa14:	cmp	w19, w12
    fa18:	b.eq	fa78 <lzma_mf_is_supported@@XZ_5.0+0x1ec8>  // b.none
    fa1c:	mov	w22, w19
    fa20:	ldrb	w21, [x20, x22]
    fa24:	ldrb	w22, [x14, x22]
    fa28:	cmp	w21, w22
    fa2c:	sub	w18, w18, #0x1
    fa30:	b.cs	fa4c <lzma_mf_is_supported@@XZ_5.0+0x1e9c>  // b.hs, b.nlast
    fa34:	str	w6, [x13]
    fa38:	add	x13, x7, #0x4
    fa3c:	mov	w5, w19
    fa40:	mov	x7, x13
    fa44:	cbnz	w18, fa5c <lzma_mf_is_supported@@XZ_5.0+0x1eac>
    fa48:	b	fa6c <lzma_mf_is_supported@@XZ_5.0+0x1ebc>
    fa4c:	str	w6, [x15]
    fa50:	mov	w3, w19
    fa54:	mov	x15, x7
    fa58:	cbz	w18, fa6c <lzma_mf_is_supported@@XZ_5.0+0x1ebc>
    fa5c:	ldr	w6, [x7]
    fa60:	sub	w7, w16, w6
    fa64:	cmp	w7, w2
    fa68:	b.cc	f9a8 <lzma_mf_is_supported@@XZ_5.0+0x1df8>  // b.lo, b.ul, b.last
    fa6c:	str	wzr, [x15]
    fa70:	str	wzr, [x13]
    fa74:	b	fa88 <lzma_mf_is_supported@@XZ_5.0+0x1ed8>
    fa78:	ldr	w12, [x7]
    fa7c:	str	w12, [x13]
    fa80:	ldr	w12, [x7, #4]
    fa84:	str	w12, [x15]
    fa88:	ldp	w13, w12, [x0, #80]
    fa8c:	ldp	w15, w14, [x0, #20]
    fa90:	add	w16, w13, #0x1
    fa94:	add	w14, w14, #0x1
    fa98:	cmp	w16, w12
    fa9c:	add	w15, w15, w14
    faa0:	csinc	w13, wzr, w13, eq  // eq = none
    faa4:	cmn	w15, #0x1
    faa8:	str	w13, [x0, #80]
    faac:	str	w14, [x0, #24]
    fab0:	b.ne	f8d4 <lzma_mf_is_supported@@XZ_5.0+0x1d24>  // b.any
    fab4:	ldr	w13, [x0, #108]
    fab8:	mvn	w12, w12
    fabc:	cbz	w13, fae8 <lzma_mf_is_supported@@XZ_5.0+0x1f38>
    fac0:	mov	x13, xzr
    fac4:	lsl	x14, x13, #2
    fac8:	ldr	w15, [x11, x14]
    facc:	add	x13, x13, #0x1
    fad0:	subs	w15, w15, w12
    fad4:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
    fad8:	str	w15, [x11, x14]
    fadc:	ldr	w14, [x0, #108]
    fae0:	cmp	x13, x14
    fae4:	b.cc	fac4 <lzma_mf_is_supported@@XZ_5.0+0x1f14>  // b.lo, b.ul, b.last
    fae8:	ldr	w11, [x0, #112]
    faec:	cbz	w11, fb18 <lzma_mf_is_supported@@XZ_5.0+0x1f68>
    faf0:	mov	x11, xzr
    faf4:	lsl	x13, x11, #2
    faf8:	ldr	w14, [x10, x13]
    fafc:	add	x11, x11, #0x1
    fb00:	subs	w14, w14, w12
    fb04:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    fb08:	str	w14, [x10, x13]
    fb0c:	ldr	w13, [x0, #112]
    fb10:	cmp	x11, x13
    fb14:	b.cc	faf4 <lzma_mf_is_supported@@XZ_5.0+0x1f44>  // b.lo, b.ul, b.last
    fb18:	ldr	w10, [x0, #20]
    fb1c:	sub	w10, w10, w12
    fb20:	str	w10, [x0, #20]
    fb24:	b	f8d4 <lzma_mf_is_supported@@XZ_5.0+0x1d24>
    fb28:	ldp	x20, x19, [sp, #32]
    fb2c:	ldp	x22, x21, [sp, #16]
    fb30:	ldp	x24, x23, [sp], #48
    fb34:	ret
    fb38:	sub	sp, sp, #0x60
    fb3c:	stp	x29, x30, [sp, #32]
    fb40:	stp	x22, x21, [sp, #64]
    fb44:	stp	x20, x19, [sp, #80]
    fb48:	ldr	x21, [x0]
    fb4c:	str	x23, [sp, #48]
    fb50:	mov	x23, x3
    fb54:	mov	x20, x2
    fb58:	mov	x22, x0
    fb5c:	mov	x19, x1
    fb60:	add	x29, sp, #0x20
    fb64:	cbnz	x21, fbc0 <lzma_mf_is_supported@@XZ_5.0+0x2010>
    fb68:	mov	w0, #0x10b8                	// #4280
    fb6c:	mov	x1, x19
    fb70:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    fb74:	cbz	x0, fca4 <lzma_mf_is_supported@@XZ_5.0+0x20f4>
    fb78:	adrp	x8, f000 <lzma_mf_is_supported@@XZ_5.0+0x1450>
    fb7c:	adrp	x9, f000 <lzma_mf_is_supported@@XZ_5.0+0x1450>
    fb80:	add	x8, x8, #0xcc0
    fb84:	add	x9, x9, #0xfcc
    fb88:	mov	x21, x0
    fb8c:	movi	v0.2d, #0x0
    fb90:	stp	x8, x9, [x22, #24]
    fb94:	mov	x8, #0xffffffffffffffff    	// #-1
    fb98:	str	x0, [x22]
    fb9c:	str	xzr, [x0]
    fba0:	str	xzr, [x0, #32]
    fba4:	stp	q0, q0, [x0, #48]
    fba8:	stp	xzr, xzr, [x0, #80]
    fbac:	str	x8, [x0, #96]
    fbb0:	stur	q0, [x0, #104]
    fbb4:	stur	q0, [x0, #120]
    fbb8:	stur	q0, [x0, #136]
    fbbc:	str	xzr, [x0, #152]
    fbc0:	ldr	x2, [x20, #16]
    fbc4:	add	x0, x21, #0x30
    fbc8:	add	x3, sp, #0x8
    fbcc:	mov	x1, x19
    fbd0:	blr	x23
    fbd4:	cbnz	w0, fca8 <lzma_mf_is_supported@@XZ_5.0+0x20f8>
    fbd8:	ldr	x8, [sp, #8]
    fbdc:	cmp	x8, #0xfff
    fbe0:	b.hi	fbf0 <lzma_mf_is_supported@@XZ_5.0+0x2040>  // b.pmore
    fbe4:	mov	w8, #0x1000                	// #4096
    fbe8:	str	x8, [sp, #8]
    fbec:	b	fbf8 <lzma_mf_is_supported@@XZ_5.0+0x2048>
    fbf0:	cmn	x8, #0x10
    fbf4:	b.hi	fca4 <lzma_mf_is_supported@@XZ_5.0+0x20f4>  // b.pmore
    fbf8:	add	x8, x8, #0xf
    fbfc:	and	x8, x8, #0xfffffffffffffff0
    fc00:	str	x8, [sp, #8]
    fc04:	ldr	x9, [x21, #32]
    fc08:	cmp	x9, x8
    fc0c:	b.eq	fc38 <lzma_mf_is_supported@@XZ_5.0+0x2088>  // b.none
    fc10:	ldr	x0, [x21]
    fc14:	mov	x1, x19
    fc18:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    fc1c:	ldr	x0, [sp, #8]
    fc20:	mov	x1, x19
    fc24:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
    fc28:	str	x0, [x21]
    fc2c:	cbz	x0, fca4 <lzma_mf_is_supported@@XZ_5.0+0x20f4>
    fc30:	ldr	x8, [sp, #8]
    fc34:	str	x8, [x21, #32]
    fc38:	ldr	x8, [x22]
    fc3c:	ldr	x9, [x8]
    fc40:	ldr	x10, [x8, #32]
    fc44:	stp	xzr, xzr, [x8, #8]
    fc48:	add	x9, x10, x9
    fc4c:	sturb	wzr, [x9, #-1]
    fc50:	strb	wzr, [x8, #40]
    fc54:	ldr	x8, [sp, #16]
    fc58:	cbz	x8, fc88 <lzma_mf_is_supported@@XZ_5.0+0x20d8>
    fc5c:	ldr	x9, [sp, #24]
    fc60:	cbz	x9, fc88 <lzma_mf_is_supported@@XZ_5.0+0x20d8>
    fc64:	ldr	x10, [sp, #8]
    fc68:	ldr	x0, [x21]
    fc6c:	cmp	x9, x10
    fc70:	csel	x22, x9, x10, cc  // cc = lo, ul, last
    fc74:	sub	x9, x9, x22
    fc78:	add	x1, x8, x9
    fc7c:	mov	x2, x22
    fc80:	bl	3040 <memcpy@plt>
    fc84:	stp	x22, x22, [x21, #8]
    fc88:	add	x0, x21, #0x58
    fc8c:	add	x2, x20, #0x18
    fc90:	mov	x1, x19
    fc94:	strh	wzr, [x21, #160]
    fc98:	stp	xzr, xzr, [x21, #168]
    fc9c:	bl	3784 <lzma_version_string@@XZ_5.0+0x134>
    fca0:	b	fca8 <lzma_mf_is_supported@@XZ_5.0+0x20f8>
    fca4:	mov	w0, #0x5                   	// #5
    fca8:	ldp	x20, x19, [sp, #80]
    fcac:	ldp	x22, x21, [sp, #64]
    fcb0:	ldr	x23, [sp, #48]
    fcb4:	ldp	x29, x30, [sp, #32]
    fcb8:	add	sp, sp, #0x60
    fcbc:	ret
    fcc0:	sub	sp, sp, #0xc0
    fcc4:	stp	x29, x30, [sp, #96]
    fcc8:	stp	x28, x27, [sp, #112]
    fccc:	stp	x26, x25, [sp, #128]
    fcd0:	stp	x24, x23, [sp, #144]
    fcd4:	stp	x22, x21, [sp, #160]
    fcd8:	stp	x20, x19, [sp, #176]
    fcdc:	ldr	x8, [x0, #112]
    fce0:	add	x29, sp, #0x60
    fce4:	mov	x27, x6
    fce8:	mov	x19, x4
    fcec:	mov	x23, x0
    fcf0:	stur	x5, [x29, #-16]
    fcf4:	stur	x3, [x29, #-40]
    fcf8:	str	x2, [sp, #48]
    fcfc:	stur	x7, [x29, #-8]
    fd00:	cbz	x8, fecc <lzma_mf_is_supported@@XZ_5.0+0x231c>
    fd04:	ldr	x25, [x27]
    fd08:	cmp	x25, x7
    fd0c:	b.cs	ff90 <lzma_mf_is_supported@@XZ_5.0+0x23e0>  // b.hs, b.nlast
    fd10:	ldr	w8, [x29, #96]
    fd14:	add	x20, x23, #0xb0
    fd18:	add	x21, x23, #0x8
    fd1c:	str	x1, [sp, #24]
    fd20:	str	w8, [sp, #20]
    fd24:	add	x8, x23, #0xa8
    fd28:	stur	x8, [x29, #-24]
    fd2c:	add	x8, x23, #0xb8
    fd30:	stur	x8, [x29, #-32]
    fd34:	stp	x20, x19, [sp, #32]
    fd38:	b	fd48 <lzma_mf_is_supported@@XZ_5.0+0x2198>
    fd3c:	ldr	x20, [sp, #32]
    fd40:	cmp	x25, x7
    fd44:	b.cs	ff90 <lzma_mf_is_supported@@XZ_5.0+0x23e0>  // b.hs, b.nlast
    fd48:	ldrb	w8, [x23, #160]
    fd4c:	cbnz	w8, fdc4 <lzma_mf_is_supported@@XZ_5.0+0x2214>
    fd50:	ldur	x8, [x29, #-24]
    fd54:	ldr	x9, [x20]
    fd58:	ldr	x8, [x8]
    fd5c:	cmp	x8, x9
    fd60:	b.ne	fdc4 <lzma_mf_is_supported@@XZ_5.0+0x2214>  // b.any
    fd64:	ldur	x8, [x29, #-24]
    fd68:	mov	w7, #0x1000                	// #4096
    fd6c:	mov	x4, x19
    fd70:	mov	x6, x20
    fd74:	stp	xzr, xzr, [x8]
    fd78:	ldr	x8, [x23, #112]
    fd7c:	ldr	x0, [x23, #88]
    fd80:	ldr	w9, [sp, #20]
    fd84:	ldr	x1, [sp, #24]
    fd88:	ldr	x2, [sp, #48]
    fd8c:	ldp	x3, x5, [x29, #-40]
    fd90:	str	w9, [sp]
    fd94:	blr	x8
    fd98:	cbz	w0, fdb8 <lzma_mf_is_supported@@XZ_5.0+0x2208>
    fd9c:	mov	w28, w0
    fda0:	cmp	w0, #0x1
    fda4:	b.ne	ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>  // b.any
    fda8:	ldur	x7, [x29, #-8]
    fdac:	mov	w8, #0x1                   	// #1
    fdb0:	strb	w8, [x23, #160]
    fdb4:	b	fdc4 <lzma_mf_is_supported@@XZ_5.0+0x2214>
    fdb8:	ldr	x8, [x20]
    fdbc:	ldur	x7, [x29, #-8]
    fdc0:	cbz	x8, ff90 <lzma_mf_is_supported@@XZ_5.0+0x23e0>
    fdc4:	ldrb	w8, [x23, #161]
    fdc8:	ldr	x22, [x23, #176]
    fdcc:	mov	x19, x27
    fdd0:	cbnz	w8, ffb8 <lzma_mf_is_supported@@XZ_5.0+0x2408>
    fdd4:	ldr	x20, [x23, #8]
    fdd8:	ldr	x8, [x23, #32]
    fddc:	cmp	x20, x8
    fde0:	b.ne	fdec <lzma_mf_is_supported@@XZ_5.0+0x223c>  // b.any
    fde4:	mov	x20, xzr
    fde8:	str	xzr, [x21]
    fdec:	sub	x9, x7, x25
    fdf0:	sub	x8, x8, x20
    fdf4:	cmp	x9, x8
    fdf8:	csel	x8, x9, x8, cc  // cc = lo, ul, last
    fdfc:	add	x8, x8, x20
    fe00:	str	x8, [x23, #24]
    fe04:	ldp	x0, x10, [x23, #48]
    fe08:	ldp	x2, x3, [x29, #-32]
    fe0c:	mov	x1, x23
    fe10:	mov	x4, x22
    fe14:	blr	x10
    fe18:	ldp	x27, x26, [x23]
    fe1c:	ldur	x8, [x29, #-16]
    fe20:	mov	w28, w0
    fe24:	sub	x24, x26, x20
    fe28:	add	x0, x8, x25
    fe2c:	add	x1, x27, x20
    fe30:	mov	x2, x24
    fe34:	bl	3040 <memcpy@plt>
    fe38:	add	x25, x24, x25
    fe3c:	str	x25, [x19]
    fe40:	ldrb	w8, [x23, #40]
    fe44:	cbz	w8, fe70 <lzma_mf_is_supported@@XZ_5.0+0x22c0>
    fe48:	stp	xzr, xzr, [x21]
    fe4c:	ldr	x8, [x23, #32]
    fe50:	ldur	x7, [x29, #-8]
    fe54:	add	x8, x8, x27
    fe58:	sturb	wzr, [x8, #-1]
    fe5c:	strb	wzr, [x23, #40]
    fe60:	cbnz	w28, fe90 <lzma_mf_is_supported@@XZ_5.0+0x22e0>
    fe64:	cmp	x25, x7
    fe68:	b.ne	fdd4 <lzma_mf_is_supported@@XZ_5.0+0x2224>  // b.any
    fe6c:	b	fe90 <lzma_mf_is_supported@@XZ_5.0+0x22e0>
    fe70:	ldur	x7, [x29, #-8]
    fe74:	cbnz	w28, fe90 <lzma_mf_is_supported@@XZ_5.0+0x22e0>
    fe78:	cmp	x25, x7
    fe7c:	b.eq	fe90 <lzma_mf_is_supported@@XZ_5.0+0x22e0>  // b.none
    fe80:	ldr	x8, [x23, #32]
    fe84:	cmp	x26, x8
    fe88:	b.cs	fdd4 <lzma_mf_is_supported@@XZ_5.0+0x2224>  // b.hs, b.nlast
    fe8c:	b	feb0 <lzma_mf_is_supported@@XZ_5.0+0x2300>
    fe90:	cbz	w28, feb0 <lzma_mf_is_supported@@XZ_5.0+0x2300>
    fe94:	mov	x27, x19
    fe98:	ldr	x19, [sp, #40]
    fe9c:	cmp	w28, #0x1
    fea0:	b.ne	ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>  // b.any
    fea4:	mov	w8, #0x1                   	// #1
    fea8:	strb	w8, [x23, #161]
    feac:	b	fd3c <lzma_mf_is_supported@@XZ_5.0+0x218c>
    feb0:	mov	x27, x19
    feb4:	ldr	x19, [sp, #40]
    feb8:	cmp	x25, x7
    febc:	b.cs	fd3c <lzma_mf_is_supported@@XZ_5.0+0x218c>  // b.hs, b.nlast
    fec0:	ldrb	w8, [x23, #160]
    fec4:	cbz	w8, fd3c <lzma_mf_is_supported@@XZ_5.0+0x218c>
    fec8:	b	ffbc <lzma_mf_is_supported@@XZ_5.0+0x240c>
    fecc:	add	x21, x23, #0x8
    fed0:	ldr	x24, [x23, #8]
    fed4:	ldr	x8, [x23, #32]
    fed8:	cmp	x24, x8
    fedc:	b.ne	fee8 <lzma_mf_is_supported@@XZ_5.0+0x2338>  // b.any
    fee0:	mov	x24, xzr
    fee4:	str	xzr, [x21]
    fee8:	ldr	x26, [x27]
    feec:	sub	x8, x8, x24
    fef0:	ldp	x0, x10, [x23, #48]
    fef4:	ldr	x2, [sp, #48]
    fef8:	sub	x9, x7, x26
    fefc:	ldur	x3, [x29, #-40]
    ff00:	cmp	x9, x8
    ff04:	csel	x8, x9, x8, cc  // cc = lo, ul, last
    ff08:	add	x8, x8, x24
    ff0c:	mov	x1, x23
    ff10:	mov	x4, x19
    ff14:	str	x8, [x23, #24]
    ff18:	blr	x10
    ff1c:	ldp	x25, x20, [x23]
    ff20:	ldur	x8, [x29, #-16]
    ff24:	mov	w28, w0
    ff28:	sub	x22, x20, x24
    ff2c:	add	x0, x8, x26
    ff30:	add	x1, x25, x24
    ff34:	mov	x2, x22
    ff38:	bl	3040 <memcpy@plt>
    ff3c:	add	x8, x22, x26
    ff40:	str	x8, [x27]
    ff44:	ldrb	w9, [x23, #40]
    ff48:	cbz	w9, ff74 <lzma_mf_is_supported@@XZ_5.0+0x23c4>
    ff4c:	stp	xzr, xzr, [x21]
    ff50:	ldr	x9, [x23, #32]
    ff54:	add	x9, x9, x25
    ff58:	sturb	wzr, [x9, #-1]
    ff5c:	strb	wzr, [x23, #40]
    ff60:	cbnz	w28, ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>
    ff64:	ldur	x7, [x29, #-8]
    ff68:	cmp	x8, x7
    ff6c:	b.ne	fed0 <lzma_mf_is_supported@@XZ_5.0+0x2320>  // b.any
    ff70:	b	ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>
    ff74:	cbnz	w28, ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>
    ff78:	ldur	x7, [x29, #-8]
    ff7c:	cmp	x8, x7
    ff80:	b.eq	ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>  // b.none
    ff84:	ldr	x8, [x23, #32]
    ff88:	cmp	x20, x8
    ff8c:	b.cs	fed0 <lzma_mf_is_supported@@XZ_5.0+0x2320>  // b.hs, b.nlast
    ff90:	mov	w28, wzr
    ff94:	mov	w0, w28
    ff98:	ldp	x20, x19, [sp, #176]
    ff9c:	ldp	x22, x21, [sp, #160]
    ffa0:	ldp	x24, x23, [sp, #144]
    ffa4:	ldp	x26, x25, [sp, #128]
    ffa8:	ldp	x28, x27, [sp, #112]
    ffac:	ldp	x29, x30, [sp, #96]
    ffb0:	add	sp, sp, #0xc0
    ffb4:	ret
    ffb8:	cbz	x22, ffc4 <lzma_mf_is_supported@@XZ_5.0+0x2414>
    ffbc:	mov	w28, #0x9                   	// #9
    ffc0:	b	ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>
    ffc4:	ldrb	w28, [x23, #160]
    ffc8:	b	ff94 <lzma_mf_is_supported@@XZ_5.0+0x23e4>
    ffcc:	stp	x29, x30, [sp, #-32]!
    ffd0:	stp	x20, x19, [sp, #16]
    ffd4:	mov	x20, x0
    ffd8:	add	x0, x0, #0x58
    ffdc:	mov	x29, sp
    ffe0:	mov	x19, x1
    ffe4:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
    ffe8:	ldr	x0, [x20]
    ffec:	mov	x1, x19
    fff0:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
    fff4:	ldr	x8, [x20, #80]
    fff8:	ldr	x0, [x20, #48]
    fffc:	mov	x1, x19
   10000:	cbz	x8, 1000c <lzma_mf_is_supported@@XZ_5.0+0x245c>
   10004:	blr	x8
   10008:	b	10010 <lzma_mf_is_supported@@XZ_5.0+0x2460>
   1000c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   10010:	mov	x0, x20
   10014:	mov	x1, x19
   10018:	ldp	x20, x19, [sp, #16]
   1001c:	ldp	x29, x30, [sp], #32
   10020:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   10024:	mov	w8, #0x10b8                	// #4280
   10028:	add	x0, x0, x8
   1002c:	ret
   10030:	ldr	x2, [x0, #72]
   10034:	ldr	x0, [x0, #48]
   10038:	br	x2

000000000001003c <lzma_lzma_preset@@XZ_5.0>:
   1003c:	and	x9, x1, #0x1f
   10040:	cmp	w9, #0x9
   10044:	mov	w8, #0x1                   	// #1
   10048:	b.hi	10144 <lzma_lzma_preset@@XZ_5.0+0x108>  // b.pmore
   1004c:	and	w10, w1, #0x7fffffe0
   10050:	cbnz	w10, 10144 <lzma_lzma_preset@@XZ_5.0+0x108>
   10054:	adrp	x11, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   10058:	adrp	x10, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   1005c:	add	x11, x11, #0xad8
   10060:	adrp	x8, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   10064:	ldr	d1, [x10, #2768]
   10068:	ldrb	w10, [x11, x9]
   1006c:	ldr	d0, [x8, #2760]
   10070:	mov	w8, #0x1                   	// #1
   10074:	cmp	w9, #0x3
   10078:	lsl	w10, w8, w10
   1007c:	str	xzr, [x0, #8]
   10080:	stp	d0, d1, [x0, #16]
   10084:	str	w10, [x0]
   10088:	b.hi	100bc <lzma_lzma_preset@@XZ_5.0+0x80>  // b.pmore
   1008c:	adrp	x10, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   10090:	str	w8, [x0, #32]
   10094:	cmp	w9, #0x0
   10098:	mov	w8, #0x3                   	// #3
   1009c:	add	x10, x10, #0xae2
   100a0:	cinc	w11, w8, ne  // ne = any
   100a4:	ldrb	w8, [x10, x9]
   100a8:	cmp	w9, #0x2
   100ac:	mov	w10, #0x111                 	// #273
   100b0:	mov	w12, #0x80                  	// #128
   100b4:	csel	w10, w12, w10, cc  // cc = lo, ul, last
   100b8:	b	100e8 <lzma_lzma_preset@@XZ_5.0+0xac>
   100bc:	mov	w10, #0x2                   	// #2
   100c0:	cmp	w9, #0x5
   100c4:	mov	w11, #0x40                  	// #64
   100c8:	mov	w12, #0x20                  	// #32
   100cc:	mov	w13, #0x10                  	// #16
   100d0:	str	w10, [x0, #32]
   100d4:	csel	w10, w12, w11, eq  // eq = none
   100d8:	cmp	w9, #0x4
   100dc:	mov	w8, wzr
   100e0:	csel	w10, w13, w10, eq  // eq = none
   100e4:	mov	w11, #0x14                  	// #20
   100e8:	stp	w10, w11, [x0, #36]
   100ec:	str	w8, [x0, #44]
   100f0:	tbnz	w1, #31, 100fc <lzma_lzma_preset@@XZ_5.0+0xc0>
   100f4:	mov	w0, wzr
   100f8:	ret
   100fc:	mov	w8, #0x2                   	// #2
   10100:	mov	w10, #0x14                  	// #20
   10104:	cmp	w9, #0x5
   10108:	str	w8, [x0, #32]
   1010c:	str	w10, [x0, #40]
   10110:	b.eq	1011c <lzma_lzma_preset@@XZ_5.0+0xe0>  // b.none
   10114:	cmp	w9, #0x3
   10118:	b.ne	10130 <lzma_lzma_preset@@XZ_5.0+0xf4>  // b.any
   1011c:	mov	w9, #0xc0                  	// #192
   10120:	str	w9, [x0, #36]
   10124:	str	wzr, [x0, #44]
   10128:	mov	w0, wzr
   1012c:	ret
   10130:	mov	w8, wzr
   10134:	mov	w9, #0x111                 	// #273
   10138:	mov	w10, #0x200                 	// #512
   1013c:	str	w9, [x0, #36]
   10140:	str	w10, [x0, #44]
   10144:	mov	w0, w8
   10148:	ret
   1014c:	sub	sp, sp, #0x70
   10150:	ldrb	w8, [x0, #2957]
   10154:	stp	x24, x23, [sp, #64]
   10158:	stp	x22, x21, [sp, #80]
   1015c:	stp	x20, x19, [sp, #96]
   10160:	mov	w23, w5
   10164:	mov	x20, x4
   10168:	mov	x21, x3
   1016c:	mov	x22, x2
   10170:	mov	x19, x0
   10174:	mov	x24, x1
   10178:	stp	x29, x30, [sp, #16]
   1017c:	stp	x28, x27, [sp, #32]
   10180:	stp	x26, x25, [sp, #48]
   10184:	add	x29, sp, #0x10
   10188:	cbnz	w8, 1030c <lzma_lzma_preset@@XZ_5.0+0x2d0>
   1018c:	ldr	w8, [x24, #24]
   10190:	ldr	w9, [x24, #32]
   10194:	cmp	w8, w9
   10198:	b.ne	101a8 <lzma_lzma_preset@@XZ_5.0+0x16c>  // b.any
   1019c:	ldr	w8, [x24, #104]
   101a0:	cbnz	w8, 10304 <lzma_lzma_preset@@XZ_5.0+0x2c8>
   101a4:	b	10328 <lzma_lzma_preset@@XZ_5.0+0x2ec>
   101a8:	ldr	x8, [x24, #56]
   101ac:	mov	w1, #0x1                   	// #1
   101b0:	mov	x0, x24
   101b4:	blr	x8
   101b8:	ldr	x9, [x19, #24]
   101bc:	add	x8, x19, #0x28
   101c0:	mov	w10, #0x6b9c                	// #27548
   101c4:	ldr	x12, [x24]
   101c8:	str	wzr, [x8, x9, lsl #2]
   101cc:	ldr	x11, [x19, #24]
   101d0:	add	x9, x19, #0x110
   101d4:	add	x10, x19, x10
   101d8:	str	wzr, [x24, #28]
   101dc:	str	x10, [x9, x11, lsl #3]
   101e0:	add	x11, x11, #0x1
   101e4:	str	x11, [x19, #24]
   101e8:	ldrb	w10, [x12]
   101ec:	add	x14, x19, #0xb9e
   101f0:	mov	w15, #0x4                   	// #4
   101f4:	lsr	x12, x10, #7
   101f8:	str	w12, [x8, x11, lsl #2]
   101fc:	ldr	x13, [x19, #24]
   10200:	add	x11, x19, #0xb9c
   10204:	bfi	x15, x12, #1, #1
   10208:	add	x12, x11, x15
   1020c:	str	x14, [x9, x13, lsl #3]
   10210:	ubfx	x14, x10, #6, #1
   10214:	add	x13, x13, #0x1
   10218:	str	x13, [x19, #24]
   1021c:	str	w14, [x8, x13, lsl #2]
   10220:	ldr	x13, [x19, #24]
   10224:	ubfx	x14, x10, #5, #1
   10228:	bfxil	x15, x10, #6, #1
   1022c:	str	x12, [x9, x13, lsl #3]
   10230:	add	x13, x13, #0x1
   10234:	str	x13, [x19, #24]
   10238:	str	w14, [x8, x13, lsl #2]
   1023c:	ldr	x13, [x19, #24]
   10240:	lsl	x14, x15, #1
   10244:	add	x15, x11, x14
   10248:	ubfx	x12, x10, #4, #1
   1024c:	str	x15, [x9, x13, lsl #3]
   10250:	add	x13, x13, #0x1
   10254:	str	x13, [x19, #24]
   10258:	str	w12, [x8, x13, lsl #2]
   1025c:	ldr	x13, [x19, #24]
   10260:	bfxil	x14, x10, #5, #1
   10264:	add	x15, x11, x14, lsl #1
   10268:	and	x14, x14, #0xffffffff
   1026c:	str	x15, [x9, x13, lsl #3]
   10270:	ubfx	x15, x10, #3, #1
   10274:	add	x13, x13, #0x1
   10278:	str	x13, [x19, #24]
   1027c:	str	w15, [x8, x13, lsl #2]
   10280:	ldr	x15, [x19, #24]
   10284:	bfi	x12, x14, #1, #32
   10288:	add	x14, x11, x12, lsl #1
   1028c:	ubfx	x13, x10, #2, #1
   10290:	str	x14, [x9, x15, lsl #3]
   10294:	add	x15, x15, #0x1
   10298:	str	x15, [x19, #24]
   1029c:	str	w13, [x8, x15, lsl #2]
   102a0:	ldr	x13, [x19, #24]
   102a4:	lsl	w12, w12, #1
   102a8:	bfxil	x12, x10, #3, #1
   102ac:	add	x15, x11, x12, lsl #1
   102b0:	ubfx	x14, x10, #1, #1
   102b4:	str	x15, [x9, x13, lsl #3]
   102b8:	add	x13, x13, #0x1
   102bc:	str	x13, [x19, #24]
   102c0:	str	w14, [x8, x13, lsl #2]
   102c4:	ldr	x13, [x19, #24]
   102c8:	lsl	w12, w12, #1
   102cc:	bfxil	x12, x10, #2, #1
   102d0:	add	x14, x11, x12, lsl #1
   102d4:	and	w15, w10, #0x1
   102d8:	str	x14, [x9, x13, lsl #3]
   102dc:	add	x13, x13, #0x1
   102e0:	str	x13, [x19, #24]
   102e4:	str	w15, [x8, x13, lsl #2]
   102e8:	ldr	x8, [x19, #24]
   102ec:	lsl	w12, w12, #1
   102f0:	bfxil	x12, x10, #1, #1
   102f4:	add	x10, x11, x12, lsl #1
   102f8:	str	x10, [x9, x8, lsl #3]
   102fc:	add	x8, x8, #0x1
   10300:	str	x8, [x19, #24]
   10304:	mov	w8, #0x1                   	// #1
   10308:	strb	w8, [x19, #2957]
   1030c:	ldp	w25, w26, [x24, #24]
   10310:	mov	x0, x19
   10314:	mov	x1, x22
   10318:	mov	x2, x21
   1031c:	mov	x3, x20
   10320:	bl	10980 <lzma_lzma_preset@@XZ_5.0+0x944>
   10324:	tbz	w0, #0, 10330 <lzma_lzma_preset@@XZ_5.0+0x2f4>
   10328:	mov	w0, wzr
   1032c:	b	10960 <lzma_lzma_preset@@XZ_5.0+0x924>
   10330:	mov	w8, #0xba48                	// #47688
   10334:	sub	w25, w25, w26
   10338:	mov	w26, #0x600                 	// #1536
   1033c:	mov	w28, #0x1                   	// #1
   10340:	add	x8, x19, x8
   10344:	str	x8, [sp]
   10348:	b	103a4 <lzma_lzma_preset@@XZ_5.0+0x368>
   1034c:	str	wzr, [x11]
   10350:	ldr	x11, [x19, #24]
   10354:	sub	w2, w9, #0x4
   10358:	mov	x0, x19
   1035c:	mov	w1, w8
   10360:	add	x12, x19, x11, lsl #3
   10364:	add	x11, x11, #0x1
   10368:	mov	w3, w27
   1036c:	str	x10, [x12, #272]
   10370:	str	x11, [x19, #24]
   10374:	bl	111f8 <lzma_mode_is_supported@@XZ_5.0+0x10>
   10378:	ldr	w8, [x24, #28]
   1037c:	ldur	w9, [x29, #-4]
   10380:	mov	x0, x19
   10384:	mov	x1, x22
   10388:	sub	w8, w8, w27
   1038c:	mov	x2, x21
   10390:	mov	x3, x20
   10394:	str	w8, [x24, #28]
   10398:	add	w25, w9, w25
   1039c:	bl	10980 <lzma_lzma_preset@@XZ_5.0+0x944>
   103a0:	tbnz	w0, #0, 10328 <lzma_lzma_preset@@XZ_5.0+0x2ec>
   103a4:	ldr	w8, [x24, #24]
   103a8:	cmn	w23, #0x1
   103ac:	b.eq	103dc <lzma_lzma_preset@@XZ_5.0+0x3a0>  // b.none
   103b0:	ldr	w9, [x24, #28]
   103b4:	sub	w9, w8, w9
   103b8:	cmp	w9, w23
   103bc:	b.cs	10860 <lzma_lzma_preset@@XZ_5.0+0x824>  // b.hs, b.nlast
   103c0:	ldr	x9, [x21]
   103c4:	ldr	x10, [x19, #8]
   103c8:	add	x9, x9, x10
   103cc:	add	x9, x9, #0x4
   103d0:	mov	w10, #0xeffe                	// #61438
   103d4:	cmp	x9, x10
   103d8:	b.hi	10860 <lzma_lzma_preset@@XZ_5.0+0x824>  // b.pmore
   103dc:	ldr	w9, [x24, #32]
   103e0:	cmp	w8, w9
   103e4:	b.cc	103f8 <lzma_lzma_preset@@XZ_5.0+0x3bc>  // b.lo, b.ul, b.last
   103e8:	ldr	w8, [x24, #104]
   103ec:	cbz	w8, 10328 <lzma_lzma_preset@@XZ_5.0+0x2ec>
   103f0:	ldr	w8, [x24, #28]
   103f4:	cbz	w8, 10860 <lzma_lzma_preset@@XZ_5.0+0x824>
   103f8:	ldrb	w8, [x19, #2956]
   103fc:	cbz	w8, 10418 <lzma_lzma_preset@@XZ_5.0+0x3dc>
   10400:	add	x2, sp, #0x8
   10404:	sub	x3, x29, #0x4
   10408:	mov	x0, x19
   1040c:	mov	x1, x24
   10410:	bl	1198c <lzma_mode_is_supported@@XZ_5.0+0x7a4>
   10414:	b	10430 <lzma_lzma_preset@@XZ_5.0+0x3f4>
   10418:	add	x2, sp, #0x8
   1041c:	sub	x3, x29, #0x4
   10420:	mov	x0, x19
   10424:	mov	x1, x24
   10428:	mov	w4, w25
   1042c:	bl	11f18 <lzma_mode_is_supported@@XZ_5.0+0xd30>
   10430:	ldr	w8, [x19, #2960]
   10434:	ldr	w10, [x19, #736]
   10438:	ldr	x11, [x19, #24]
   1043c:	ldr	w9, [sp, #8]
   10440:	ldur	w27, [x29, #-4]
   10444:	and	w8, w8, w25
   10448:	add	x10, x19, x10, lsl #5
   1044c:	add	x12, x19, x11, lsl #2
   10450:	add	x10, x10, w8, uxtw #1
   10454:	mov	w11, #0x6b9c                	// #27548
   10458:	cmn	w9, #0x1
   1045c:	add	x11, x10, x11
   10460:	add	x10, x12, #0x28
   10464:	b.eq	10528 <lzma_lzma_preset@@XZ_5.0+0x4ec>  // b.none
   10468:	str	w28, [x10]
   1046c:	ldr	x10, [x19, #24]
   10470:	cmp	w9, #0x3
   10474:	add	x12, x19, x10, lsl #3
   10478:	str	x11, [x12, #272]
   1047c:	ldr	w11, [x19, #736]
   10480:	add	x10, x10, #0x1
   10484:	str	x10, [x19, #24]
   10488:	add	x12, x19, x10, lsl #2
   1048c:	add	x10, x19, x11, lsl #1
   10490:	mov	w11, #0x6d1c                	// #27932
   10494:	add	x10, x10, x11
   10498:	add	x11, x12, #0x28
   1049c:	b.hi	1034c <lzma_lzma_preset@@XZ_5.0+0x310>  // b.pmore
   104a0:	str	w28, [x11]
   104a4:	ldr	x11, [x19, #24]
   104a8:	add	x12, x19, x11, lsl #3
   104ac:	add	x11, x11, #0x1
   104b0:	str	x10, [x12, #272]
   104b4:	str	x11, [x19, #24]
   104b8:	cbz	w9, 1073c <lzma_lzma_preset@@XZ_5.0+0x700>
   104bc:	add	x10, x19, x9, lsl #2
   104c0:	add	x13, x19, #0x28
   104c4:	ldr	w12, [x19, #736]
   104c8:	ldr	w10, [x10, #740]
   104cc:	str	w28, [x13, x11, lsl #2]
   104d0:	ldr	x11, [x19, #24]
   104d4:	add	x12, x19, x12, lsl #1
   104d8:	mov	w14, #0x6d34                	// #27956
   104dc:	add	x12, x12, x14
   104e0:	add	x14, x19, x11, lsl #3
   104e4:	str	x12, [x14, #272]
   104e8:	ldr	w12, [x19, #736]
   104ec:	add	x14, x11, #0x1
   104f0:	cmp	w9, #0x1
   104f4:	str	x14, [x19, #24]
   104f8:	add	x11, x19, x12, lsl #1
   104fc:	mov	w12, #0x6d4c                	// #27980
   10500:	add	x11, x11, x12
   10504:	add	x12, x13, x14, lsl #2
   10508:	b.ne	107d4 <lzma_lzma_preset@@XZ_5.0+0x798>  // b.any
   1050c:	str	wzr, [x12]
   10510:	ldr	x9, [x19, #24]
   10514:	add	x12, x19, x9, lsl #3
   10518:	add	x9, x9, #0x1
   1051c:	str	x11, [x12, #272]
   10520:	str	x9, [x19, #24]
   10524:	b	10830 <lzma_lzma_preset@@XZ_5.0+0x7f4>
   10528:	str	wzr, [x10]
   1052c:	ldp	w8, w9, [x24, #24]
   10530:	ldr	x10, [x19, #24]
   10534:	ldr	x12, [x24]
   10538:	mov	w16, #0x8                   	// #8
   1053c:	sub	w13, w8, w9
   10540:	add	x8, x19, x10, lsl #3
   10544:	str	x11, [x8, #272]
   10548:	add	x10, x10, #0x1
   1054c:	ldr	w11, [x19, #2968]
   10550:	sub	w9, w13, #0x1
   10554:	str	x10, [x19, #24]
   10558:	ldr	w14, [x19, #2964]
   1055c:	ldrb	w9, [x12, w9, uxtw]
   10560:	ldr	w15, [x19, #736]
   10564:	ldrb	w8, [x12, w13, uxtw]
   10568:	and	w11, w11, w25
   1056c:	lsl	w11, w11, w14
   10570:	sub	w14, w16, w14
   10574:	lsr	w9, w9, w14
   10578:	cmp	w15, #0x6
   1057c:	add	w9, w9, w11
   10580:	b.hi	106ac <lzma_lzma_preset@@XZ_5.0+0x670>  // b.pmore
   10584:	lsr	x12, x8, #7
   10588:	madd	x11, x9, x26, x19
   1058c:	add	x9, x19, #0x28
   10590:	str	w12, [x9, x10, lsl #2]
   10594:	ldr	x13, [x19, #24]
   10598:	add	x10, x19, #0x110
   1059c:	add	x15, x11, #0xb9e
   105a0:	ubfx	x14, x8, #6, #1
   105a4:	str	x15, [x10, x13, lsl #3]
   105a8:	add	x13, x13, #0x1
   105ac:	str	x13, [x19, #24]
   105b0:	str	w14, [x9, x13, lsl #2]
   105b4:	ldr	x14, [x19, #24]
   105b8:	mov	w15, #0x4                   	// #4
   105bc:	add	x11, x11, #0xb9c
   105c0:	bfi	x15, x12, #1, #1
   105c4:	add	x12, x11, x15
   105c8:	ubfx	x13, x8, #5, #1
   105cc:	str	x12, [x10, x14, lsl #3]
   105d0:	add	x14, x14, #0x1
   105d4:	str	x14, [x19, #24]
   105d8:	str	w13, [x9, x14, lsl #2]
   105dc:	ldr	x13, [x19, #24]
   105e0:	bfxil	x15, x8, #6, #1
   105e4:	lsl	x14, x15, #1
   105e8:	add	x15, x11, x14
   105ec:	ubfx	x12, x8, #4, #1
   105f0:	str	x15, [x10, x13, lsl #3]
   105f4:	add	x13, x13, #0x1
   105f8:	str	x13, [x19, #24]
   105fc:	str	w12, [x9, x13, lsl #2]
   10600:	ldr	x13, [x19, #24]
   10604:	bfxil	x14, x8, #5, #1
   10608:	add	x15, x11, x14, lsl #1
   1060c:	and	x14, x14, #0xffffffff
   10610:	str	x15, [x10, x13, lsl #3]
   10614:	ubfx	x15, x8, #3, #1
   10618:	add	x13, x13, #0x1
   1061c:	str	x13, [x19, #24]
   10620:	str	w15, [x9, x13, lsl #2]
   10624:	ldr	x15, [x19, #24]
   10628:	bfi	x12, x14, #1, #32
   1062c:	add	x14, x11, x12, lsl #1
   10630:	ubfx	x13, x8, #2, #1
   10634:	str	x14, [x10, x15, lsl #3]
   10638:	add	x15, x15, #0x1
   1063c:	str	x15, [x19, #24]
   10640:	str	w13, [x9, x15, lsl #2]
   10644:	ldr	x13, [x19, #24]
   10648:	lsl	w12, w12, #1
   1064c:	bfxil	x12, x8, #3, #1
   10650:	add	x15, x11, x12, lsl #1
   10654:	ubfx	x14, x8, #1, #1
   10658:	str	x15, [x10, x13, lsl #3]
   1065c:	add	x13, x13, #0x1
   10660:	str	x13, [x19, #24]
   10664:	str	w14, [x9, x13, lsl #2]
   10668:	ldr	x13, [x19, #24]
   1066c:	lsl	w12, w12, #1
   10670:	bfxil	x12, x8, #2, #1
   10674:	add	x14, x11, x12, lsl #1
   10678:	and	w15, w8, #0x1
   1067c:	str	x14, [x10, x13, lsl #3]
   10680:	add	x13, x13, #0x1
   10684:	str	x13, [x19, #24]
   10688:	str	w15, [x9, x13, lsl #2]
   1068c:	ldr	x9, [x19, #24]
   10690:	lsl	w12, w12, #1
   10694:	bfxil	x12, x8, #1, #1
   10698:	add	x8, x11, x12, lsl #1
   1069c:	str	x8, [x10, x9, lsl #3]
   106a0:	add	x8, x9, #0x1
   106a4:	str	x8, [x19, #24]
   106a8:	b	10714 <lzma_lzma_preset@@XZ_5.0+0x6d8>
   106ac:	ldr	w11, [x19, #740]
   106b0:	mvn	w11, w11
   106b4:	add	w11, w13, w11
   106b8:	ldrb	w11, [x12, w11, uxtw]
   106bc:	orr	w12, w8, #0x100
   106c0:	mov	w8, #0x100                 	// #256
   106c4:	lsl	w11, w11, #1
   106c8:	ubfx	w14, w12, #7, #1
   106cc:	add	x10, x19, x10, lsl #2
   106d0:	add	w13, w8, w12, lsr #8
   106d4:	str	w14, [x10, #40]
   106d8:	and	w10, w11, w8
   106dc:	add	w10, w13, w10
   106e0:	ldr	x13, [x19, #24]
   106e4:	madd	x15, x9, x26, x19
   106e8:	cmp	w12, #0x8, lsl #12
   106ec:	lsl	w12, w12, #1
   106f0:	eor	w14, w12, w11
   106f4:	add	x10, x15, w10, uxtw #1
   106f8:	add	x15, x10, #0xb9c
   106fc:	add	x16, x19, x13, lsl #3
   10700:	add	x10, x13, #0x1
   10704:	bic	w8, w8, w14
   10708:	str	x15, [x16, #272]
   1070c:	str	x10, [x19, #24]
   10710:	b.cc	106c4 <lzma_lzma_preset@@XZ_5.0+0x688>  // b.lo, b.ul, b.last
   10714:	ldr	w8, [x19, #736]
   10718:	mov	w9, #0xfffffffa            	// #-6
   1071c:	mov	w10, #0xfffffffd            	// #-3
   10720:	cmp	w8, #0xa
   10724:	csel	w9, w10, w9, cc  // cc = lo, ul, last
   10728:	add	w9, w9, w8
   1072c:	cmp	w8, #0x4
   10730:	csel	w8, wzr, w9, cc  // cc = lo, ul, last
   10734:	str	w8, [x19, #736]
   10738:	b	10378 <lzma_lzma_preset@@XZ_5.0+0x33c>
   1073c:	ldr	w9, [x19, #736]
   10740:	add	x10, x19, #0x28
   10744:	str	wzr, [x10, x11, lsl #2]
   10748:	ldr	x11, [x19, #24]
   1074c:	add	x9, x19, x9, lsl #1
   10750:	mov	w14, #0x6d34                	// #27956
   10754:	add	x12, x19, #0x110
   10758:	add	x9, x9, x14
   1075c:	cmp	w27, #0x1
   10760:	str	x9, [x12, x11, lsl #3]
   10764:	cset	w13, ne  // ne = any
   10768:	add	x9, x11, #0x1
   1076c:	ldr	w11, [x19, #736]
   10770:	str	x9, [x19, #24]
   10774:	str	w13, [x10, x9, lsl #2]
   10778:	ldr	x9, [x19, #24]
   1077c:	add	x10, x19, x11, lsl #5
   10780:	add	x10, x10, x8, lsl #1
   10784:	mov	w13, #0x6d7c                	// #28028
   10788:	add	x11, x9, #0x1
   1078c:	add	x10, x10, x13
   10790:	str	x10, [x12, x9, lsl #3]
   10794:	str	x11, [x19, #24]
   10798:	cmp	w27, #0x1
   1079c:	b.eq	10844 <lzma_lzma_preset@@XZ_5.0+0x808>  // b.none
   107a0:	ldrb	w4, [x19, #2956]
   107a4:	ldr	x1, [sp]
   107a8:	mov	x0, x19
   107ac:	mov	w2, w8
   107b0:	mov	w3, w27
   107b4:	bl	1151c <lzma_mode_is_supported@@XZ_5.0+0x334>
   107b8:	ldr	w8, [x19, #736]
   107bc:	mov	w9, #0xb                   	// #11
   107c0:	cmp	w8, #0x7
   107c4:	mov	w8, #0x8                   	// #8
   107c8:	csel	w8, w8, w9, cc  // cc = lo, ul, last
   107cc:	str	w8, [x19, #736]
   107d0:	b	10378 <lzma_lzma_preset@@XZ_5.0+0x33c>
   107d4:	str	w28, [x12]
   107d8:	ldr	x12, [x19, #24]
   107dc:	add	x13, x19, #0x110
   107e0:	sub	w14, w9, #0x2
   107e4:	cmp	w9, #0x3
   107e8:	str	x11, [x13, x12, lsl #3]
   107ec:	add	x11, x12, #0x1
   107f0:	str	x11, [x19, #24]
   107f4:	ldr	w12, [x19, #736]
   107f8:	add	x11, x19, x11, lsl #2
   107fc:	str	w14, [x11, #40]
   10800:	ldr	x11, [x19, #24]
   10804:	add	x12, x19, x12, lsl #1
   10808:	mov	w14, #0x6d64                	// #28004
   1080c:	add	x12, x12, x14
   10810:	str	x12, [x13, x11, lsl #3]
   10814:	add	x11, x11, #0x1
   10818:	str	x11, [x19, #24]
   1081c:	b.ne	10828 <lzma_lzma_preset@@XZ_5.0+0x7ec>  // b.any
   10820:	ldr	w9, [x19, #748]
   10824:	str	w9, [x19, #752]
   10828:	ldr	w9, [x19, #744]
   1082c:	str	w9, [x19, #748]
   10830:	ldr	w9, [x19, #740]
   10834:	str	w10, [x19, #740]
   10838:	str	w9, [x19, #744]
   1083c:	cmp	w27, #0x1
   10840:	b.ne	107a0 <lzma_lzma_preset@@XZ_5.0+0x764>  // b.any
   10844:	ldr	w8, [x19, #736]
   10848:	mov	w9, #0x9                   	// #9
   1084c:	cmp	w8, #0x7
   10850:	mov	w8, #0xb                   	// #11
   10854:	csel	w8, w9, w8, cc  // cc = lo, ul, last
   10858:	str	w8, [x19, #736]
   1085c:	b	10378 <lzma_lzma_preset@@XZ_5.0+0x33c>
   10860:	ldrb	w8, [x19, #2958]
   10864:	cbnz	w8, 10958 <lzma_lzma_preset@@XZ_5.0+0x91c>
   10868:	mov	w8, #0x1                   	// #1
   1086c:	cmn	w23, #0x1
   10870:	strb	w8, [x19, #2958]
   10874:	b.ne	108e8 <lzma_lzma_preset@@XZ_5.0+0x8ac>  // b.any
   10878:	ldr	x9, [x19, #24]
   1087c:	ldr	w10, [x19, #2960]
   10880:	ldr	w11, [x19, #736]
   10884:	add	x12, x19, #0x28
   10888:	str	w8, [x12, x9, lsl #2]
   1088c:	and	w1, w10, w25
   10890:	ldr	x10, [x19, #24]
   10894:	add	x11, x19, x11, lsl #5
   10898:	mov	w8, #0x6b9c                	// #27548
   1089c:	add	x11, x11, w1, uxtw #1
   108a0:	add	x9, x19, #0x110
   108a4:	add	x8, x11, x8
   108a8:	str	x8, [x9, x10, lsl #3]
   108ac:	add	x8, x10, #0x1
   108b0:	str	x8, [x19, #24]
   108b4:	ldr	w10, [x19, #736]
   108b8:	str	wzr, [x12, x8, lsl #2]
   108bc:	ldr	x8, [x19, #24]
   108c0:	mov	w11, #0x6d1c                	// #27932
   108c4:	add	x10, x19, x10, lsl #1
   108c8:	add	x10, x10, x11
   108cc:	add	x11, x8, #0x1
   108d0:	mov	w2, #0xffffffff            	// #-1
   108d4:	mov	w3, #0x2                   	// #2
   108d8:	mov	x0, x19
   108dc:	str	x10, [x9, x8, lsl #3]
   108e0:	str	x11, [x19, #24]
   108e4:	bl	111f8 <lzma_mode_is_supported@@XZ_5.0+0x10>
   108e8:	ldr	x8, [x19, #24]
   108ec:	add	x9, x19, #0x28
   108f0:	mov	w10, #0x4                   	// #4
   108f4:	mov	x0, x19
   108f8:	add	x11, x8, #0x1
   108fc:	str	x11, [x19, #24]
   10900:	str	w10, [x9, x8, lsl #2]
   10904:	ldr	x8, [x19, #24]
   10908:	mov	x1, x22
   1090c:	mov	x2, x21
   10910:	mov	x3, x20
   10914:	add	x11, x8, #0x1
   10918:	str	x11, [x19, #24]
   1091c:	str	w10, [x9, x8, lsl #2]
   10920:	ldr	x8, [x19, #24]
   10924:	add	x11, x8, #0x1
   10928:	str	x11, [x19, #24]
   1092c:	str	w10, [x9, x8, lsl #2]
   10930:	ldr	x8, [x19, #24]
   10934:	add	x11, x8, #0x1
   10938:	str	x11, [x19, #24]
   1093c:	str	w10, [x9, x8, lsl #2]
   10940:	ldr	x8, [x19, #24]
   10944:	add	x11, x8, #0x1
   10948:	str	x11, [x19, #24]
   1094c:	str	w10, [x9, x8, lsl #2]
   10950:	bl	10980 <lzma_lzma_preset@@XZ_5.0+0x944>
   10954:	tbnz	w0, #0, 10328 <lzma_lzma_preset@@XZ_5.0+0x2ec>
   10958:	mov	w0, #0x1                   	// #1
   1095c:	strb	wzr, [x19, #2958]
   10960:	ldp	x20, x19, [sp, #96]
   10964:	ldp	x22, x21, [sp, #80]
   10968:	ldp	x24, x23, [sp, #64]
   1096c:	ldp	x26, x25, [sp, #48]
   10970:	ldp	x28, x27, [sp, #32]
   10974:	ldp	x29, x30, [sp, #16]
   10978:	add	sp, sp, #0x70
   1097c:	ret
   10980:	mov	x9, x0
   10984:	ldr	x10, [x9, #24]!
   10988:	ldr	x8, [x9, #8]
   1098c:	cmp	x8, x10
   10990:	b.cs	10ae4 <lzma_lzma_preset@@XZ_5.0+0xaa8>  // b.hs, b.nlast
   10994:	ldr	w13, [x0, #16]
   10998:	adrp	x11, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   1099c:	mov	w10, #0xff                  	// #255
   109a0:	add	x11, x11, #0xb10
   109a4:	mov	w12, #0x800                 	// #2048
   109a8:	b	109e4 <lzma_lzma_preset@@XZ_5.0+0x9a8>
   109ac:	add	x14, x0, x8, lsl #3
   109b0:	ldr	x14, [x14, #272]
   109b4:	lsr	w13, w13, #11
   109b8:	ldrh	w15, [x14]
   109bc:	sub	w16, w12, w15
   109c0:	mul	w13, w13, w15
   109c4:	add	w15, w15, w16, lsr #5
   109c8:	str	w13, [x0, #16]
   109cc:	strh	w15, [x14]
   109d0:	ldr	x14, [x0, #24]
   109d4:	add	x8, x8, #0x1
   109d8:	str	x8, [x0, #32]
   109dc:	cmp	x8, x14
   109e0:	b.cs	10ae4 <lzma_lzma_preset@@XZ_5.0+0xaa8>  // b.hs, b.nlast
   109e4:	lsr	w14, w13, #24
   109e8:	cbnz	w14, 10a74 <lzma_lzma_preset@@XZ_5.0+0xa38>
   109ec:	ldr	x14, [x0]
   109f0:	lsr	x15, x14, #32
   109f4:	cbnz	x15, 10a10 <lzma_lzma_preset@@XZ_5.0+0x9d4>
   109f8:	lsr	w15, w14, #24
   109fc:	cmp	w15, #0xfe
   10a00:	b.ls	10a10 <lzma_lzma_preset@@XZ_5.0+0x9d4>  // b.plast
   10a04:	ldr	x15, [x0, #8]
   10a08:	add	x15, x15, #0x1
   10a0c:	b	10a64 <lzma_lzma_preset@@XZ_5.0+0xa28>
   10a10:	ldr	x8, [x2]
   10a14:	cmp	x8, x3
   10a18:	b.eq	10bb0 <lzma_lzma_preset@@XZ_5.0+0xb74>  // b.none
   10a1c:	ldrb	w13, [x0, #20]
   10a20:	ldrb	w14, [x0, #4]
   10a24:	add	w13, w13, w14
   10a28:	strb	w13, [x1, x8]
   10a2c:	ldr	x8, [x2]
   10a30:	add	x8, x8, #0x1
   10a34:	str	x8, [x2]
   10a38:	ldr	x8, [x0, #8]
   10a3c:	strb	w10, [x0, #20]
   10a40:	subs	x8, x8, #0x1
   10a44:	str	x8, [x0, #8]
   10a48:	b.ne	10a10 <lzma_lzma_preset@@XZ_5.0+0x9d4>  // b.any
   10a4c:	ldr	x14, [x0]
   10a50:	ldr	w13, [x0, #16]
   10a54:	ldr	x8, [x0, #32]
   10a58:	lsr	x15, x14, #24
   10a5c:	strb	w15, [x0, #20]
   10a60:	mov	w15, #0x1                   	// #1
   10a64:	lsl	w14, w14, #8
   10a68:	lsl	w13, w13, #8
   10a6c:	stp	x14, x15, [x0]
   10a70:	str	w13, [x0, #16]
   10a74:	add	x14, x0, x8, lsl #2
   10a78:	ldr	w14, [x14, #40]
   10a7c:	cmp	w14, #0x4
   10a80:	b.hi	109d0 <lzma_lzma_preset@@XZ_5.0+0x994>  // b.pmore
   10a84:	adr	x15, 109ac <lzma_lzma_preset@@XZ_5.0+0x970>
   10a88:	ldrb	w16, [x11, x14]
   10a8c:	add	x15, x15, x16, lsl #2
   10a90:	br	x15
   10a94:	add	x14, x0, x8, lsl #3
   10a98:	ldr	x14, [x14, #272]
   10a9c:	ldr	x16, [x0]
   10aa0:	lsr	w17, w13, #11
   10aa4:	ldrh	w15, [x14]
   10aa8:	mul	w17, w17, w15
   10aac:	add	x16, x16, x17
   10ab0:	sub	w13, w13, w17
   10ab4:	sub	w15, w15, w15, lsr #5
   10ab8:	str	x16, [x0]
   10abc:	b	109c8 <lzma_lzma_preset@@XZ_5.0+0x98c>
   10ac0:	lsr	w13, w13, #1
   10ac4:	str	w13, [x0, #16]
   10ac8:	b	109d0 <lzma_lzma_preset@@XZ_5.0+0x994>
   10acc:	ldr	x14, [x0]
   10ad0:	lsr	w13, w13, #1
   10ad4:	str	w13, [x0, #16]
   10ad8:	add	x14, x14, x13
   10adc:	str	x14, [x0]
   10ae0:	b	109d0 <lzma_lzma_preset@@XZ_5.0+0x994>
   10ae4:	mov	w8, wzr
   10ae8:	mov	w0, w8
   10aec:	stp	xzr, xzr, [x9]
   10af0:	ret
   10af4:	ldr	x11, [x0]
   10af8:	mov	w10, #0xffffffff            	// #-1
   10afc:	str	w10, [x0, #16]
   10b00:	mov	w10, #0xff                  	// #255
   10b04:	lsr	x12, x11, #32
   10b08:	cbnz	x12, 10b24 <lzma_lzma_preset@@XZ_5.0+0xae8>
   10b0c:	lsr	w12, w11, #24
   10b10:	cmp	w12, #0xfe
   10b14:	b.ls	10b24 <lzma_lzma_preset@@XZ_5.0+0xae8>  // b.plast
   10b18:	ldr	x12, [x0, #8]
   10b1c:	add	x12, x12, #0x1
   10b20:	b	10b74 <lzma_lzma_preset@@XZ_5.0+0xb38>
   10b24:	ldr	x8, [x2]
   10b28:	cmp	x8, x3
   10b2c:	b.eq	10bb0 <lzma_lzma_preset@@XZ_5.0+0xb74>  // b.none
   10b30:	ldrb	w11, [x0, #20]
   10b34:	ldrb	w12, [x0, #4]
   10b38:	add	w11, w11, w12
   10b3c:	strb	w11, [x1, x8]
   10b40:	ldr	x8, [x2]
   10b44:	add	x8, x8, #0x1
   10b48:	str	x8, [x2]
   10b4c:	ldr	x8, [x0, #8]
   10b50:	strb	w10, [x0, #20]
   10b54:	subs	x8, x8, #0x1
   10b58:	str	x8, [x0, #8]
   10b5c:	b.ne	10b24 <lzma_lzma_preset@@XZ_5.0+0xae8>  // b.any
   10b60:	ldr	x11, [x0]
   10b64:	ldr	x8, [x0, #32]
   10b68:	lsr	x12, x11, #24
   10b6c:	strb	w12, [x0, #20]
   10b70:	mov	w12, #0x1                   	// #1
   10b74:	ldr	x13, [x0, #24]
   10b78:	add	x8, x8, #0x1
   10b7c:	lsl	w11, w11, #8
   10b80:	stp	x11, x12, [x0]
   10b84:	cmp	x8, x13
   10b88:	str	x8, [x0, #32]
   10b8c:	b.cc	10b04 <lzma_lzma_preset@@XZ_5.0+0xac8>  // b.lo, b.ul, b.last
   10b90:	adrp	x10, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   10b94:	ldr	q0, [x10, #2800]
   10b98:	mov	w10, #0xffffffff            	// #-1
   10b9c:	mov	w8, wzr
   10ba0:	strb	wzr, [x0, #20]
   10ba4:	str	w10, [x0, #16]
   10ba8:	str	q0, [x0]
   10bac:	b	10ae8 <lzma_lzma_preset@@XZ_5.0+0xaac>
   10bb0:	mov	w0, #0x1                   	// #1
   10bb4:	ret
   10bb8:	stp	x29, x30, [sp, #-48]!
   10bbc:	stp	x22, x21, [sp, #16]
   10bc0:	stp	x20, x19, [sp, #32]
   10bc4:	ldr	w9, [x1, #20]
   10bc8:	mov	x29, sp
   10bcc:	cmp	w9, #0x4
   10bd0:	b.hi	10d7c <lzma_lzma_preset@@XZ_5.0+0xd40>  // b.pmore
   10bd4:	ldr	w8, [x1, #24]
   10bd8:	mov	x20, x1
   10bdc:	mov	x19, x0
   10be0:	mov	w0, #0x8                   	// #8
   10be4:	cmp	w8, #0x4
   10be8:	b.hi	10d80 <lzma_lzma_preset@@XZ_5.0+0xd44>  // b.pmore
   10bec:	add	w10, w8, w9
   10bf0:	cmp	w10, #0x4
   10bf4:	b.hi	10d80 <lzma_lzma_preset@@XZ_5.0+0xd44>  // b.pmore
   10bf8:	ldr	w11, [x20, #28]
   10bfc:	cmp	w11, #0x4
   10c00:	b.hi	10d7c <lzma_lzma_preset@@XZ_5.0+0xd40>  // b.pmore
   10c04:	ldr	w10, [x20, #36]
   10c08:	sub	w10, w10, #0x2
   10c0c:	cmp	w10, #0x10f
   10c10:	b.hi	10d7c <lzma_lzma_preset@@XZ_5.0+0xd40>  // b.pmore
   10c14:	ldr	w10, [x20, #32]
   10c18:	sub	w10, w10, #0x1
   10c1c:	cmp	w10, #0x1
   10c20:	b.hi	10d7c <lzma_lzma_preset@@XZ_5.0+0xd40>  // b.pmore
   10c24:	adrp	x13, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   10c28:	movi	v0.2d, #0x0
   10c2c:	stur	q0, [x19, #24]
   10c30:	str	q0, [x19, #736]
   10c34:	ldr	q0, [x13, #2800]
   10c38:	mov	w12, #0xffffffff            	// #-1
   10c3c:	str	w9, [x19, #2964]
   10c40:	lsl	w9, w12, w11
   10c44:	lsl	w8, w12, w8
   10c48:	mvn	w11, w9
   10c4c:	mvn	w8, w8
   10c50:	strb	wzr, [x19, #20]
   10c54:	str	wzr, [x19, #752]
   10c58:	str	w12, [x19, #16]
   10c5c:	str	w11, [x19, #2960]
   10c60:	str	w8, [x19, #2968]
   10c64:	str	q0, [x19]
   10c68:	ldp	w8, w12, [x20, #20]
   10c6c:	mov	w14, #0xe94                 	// #3732
   10c70:	movk	w14, #0x1, lsl #16
   10c74:	mov	w15, #0x6efc                	// #28412
   10c78:	mov	w10, wzr
   10c7c:	add	w12, w12, w8
   10c80:	mov	w13, #0x600                 	// #1536
   10c84:	add	x21, x19, x14
   10c88:	add	x8, x19, x15
   10c8c:	movi	v0.8h, #0x4, lsl #8
   10c90:	mov	x14, xzr
   10c94:	umaddl	x15, w10, w13, x19
   10c98:	add	x16, x15, x14
   10c9c:	add	x14, x14, #0x20
   10ca0:	add	x17, x16, #0xb9c
   10ca4:	add	x16, x16, #0xbac
   10ca8:	cmp	x14, #0x600
   10cac:	str	q0, [x17]
   10cb0:	str	q0, [x16]
   10cb4:	b.ne	10c98 <lzma_lzma_preset@@XZ_5.0+0xc5c>  // b.any
   10cb8:	add	w10, w10, #0x1
   10cbc:	lsr	w14, w10, w12
   10cc0:	cbz	w14, 10c90 <lzma_lzma_preset@@XZ_5.0+0xc54>
   10cc4:	mov	w16, w11
   10cc8:	mov	w17, #0x6b9c                	// #27548
   10ccc:	mov	w18, #0x6d7c                	// #28028
   10cd0:	add	x16, x16, #0x1
   10cd4:	mov	x10, xzr
   10cd8:	mov	w11, #0x400                 	// #1024
   10cdc:	mov	w12, #0x6d1c                	// #27932
   10ce0:	mov	w13, #0x6d34                	// #27956
   10ce4:	mov	w14, #0x6d4c                	// #27980
   10ce8:	mov	w15, #0x6d64                	// #28004
   10cec:	add	x17, x19, x17
   10cf0:	add	x18, x19, x18
   10cf4:	and	x0, x16, #0x1fffffff8
   10cf8:	movi	v0.8h, #0x4, lsl #8
   10cfc:	b	10d28 <lzma_lzma_preset@@XZ_5.0+0xcec>
   10d00:	add	x1, x19, x10, lsl #1
   10d04:	add	x10, x10, #0x1
   10d08:	add	x17, x17, #0x20
   10d0c:	cmp	x10, #0xc
   10d10:	add	x18, x18, #0x20
   10d14:	strh	w11, [x1, x12]
   10d18:	strh	w11, [x1, x13]
   10d1c:	strh	w11, [x1, x14]
   10d20:	strh	w11, [x1, x15]
   10d24:	b.eq	10d90 <lzma_lzma_preset@@XZ_5.0+0xd54>  // b.none
   10d28:	cmn	w9, #0x8
   10d2c:	mov	x1, x0
   10d30:	mov	x2, x17
   10d34:	b.ls	10d40 <lzma_lzma_preset@@XZ_5.0+0xd04>  // b.plast
   10d38:	mov	x1, xzr
   10d3c:	b	10d60 <lzma_lzma_preset@@XZ_5.0+0xd24>
   10d40:	str	q0, [x2]
   10d44:	str	q0, [x2, #480]
   10d48:	subs	x1, x1, #0x8
   10d4c:	add	x2, x2, #0x10
   10d50:	b.ne	10d40 <lzma_lzma_preset@@XZ_5.0+0xd04>  // b.any
   10d54:	cmp	x16, x0
   10d58:	mov	x1, x0
   10d5c:	b.eq	10d00 <lzma_lzma_preset@@XZ_5.0+0xcc4>  // b.none
   10d60:	lsl	x2, x1, #1
   10d64:	add	x1, x1, #0x1
   10d68:	cmp	x16, x1
   10d6c:	strh	w11, [x17, x2]
   10d70:	strh	w11, [x18, x2]
   10d74:	b.ne	10d60 <lzma_lzma_preset@@XZ_5.0+0xd24>  // b.any
   10d78:	b	10d00 <lzma_lzma_preset@@XZ_5.0+0xcc4>
   10d7c:	mov	w0, #0x8                   	// #8
   10d80:	ldp	x20, x19, [sp, #32]
   10d84:	ldp	x22, x21, [sp, #16]
   10d88:	ldp	x29, x30, [sp], #48
   10d8c:	ret
   10d90:	movi	v0.8h, #0x4, lsl #8
   10d94:	mov	w9, #0x4000400             	// #67109888
   10d98:	stp	q0, q0, [x8, #512]
   10d9c:	stp	q0, q0, [x8, #544]
   10da0:	stp	q0, q0, [x8, #576]
   10da4:	stp	q0, q0, [x8, #608]
   10da8:	stp	q0, q0, [x8, #640]
   10dac:	stp	q0, q0, [x8, #672]
   10db0:	stp	q0, q0, [x8, #704]
   10db4:	str	w9, [x8, #736]
   10db8:	stp	q0, q0, [x8]
   10dbc:	stp	q0, q0, [x8, #32]
   10dc0:	stp	q0, q0, [x8, #64]
   10dc4:	stp	q0, q0, [x8, #96]
   10dc8:	stp	q0, q0, [x8, #128]
   10dcc:	stp	q0, q0, [x8, #160]
   10dd0:	stp	q0, q0, [x8, #192]
   10dd4:	stp	q0, q0, [x8, #224]
   10dd8:	stp	q0, q0, [x8, #256]
   10ddc:	stp	q0, q0, [x8, #288]
   10de0:	stp	q0, q0, [x8, #320]
   10de4:	stp	q0, q0, [x8, #352]
   10de8:	stp	q0, q0, [x8, #384]
   10dec:	stp	q0, q0, [x8, #416]
   10df0:	stp	q0, q0, [x8, #448]
   10df4:	stp	q0, q0, [x8, #480]
   10df8:	str	q0, [x19, #29152]
   10dfc:	str	q0, [x19, #29168]
   10e00:	ldr	w9, [x20, #28]
   10e04:	ldrb	w2, [x19, #2956]
   10e08:	mov	w8, #0x7200                	// #29184
   10e0c:	mov	w22, #0x1                   	// #1
   10e10:	add	x0, x19, x8
   10e14:	lsl	w1, w22, w9
   10e18:	bl	10e54 <lzma_lzma_preset@@XZ_5.0+0xe18>
   10e1c:	ldr	w8, [x20, #28]
   10e20:	ldrb	w2, [x19, #2956]
   10e24:	mov	w9, #0xba48                	// #47688
   10e28:	add	x0, x19, x9
   10e2c:	lsl	w1, w22, w8
   10e30:	bl	10e54 <lzma_lzma_preset@@XZ_5.0+0xe18>
   10e34:	adrp	x8, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   10e38:	ldr	d0, [x8, #2840]
   10e3c:	mov	w0, wzr
   10e40:	mov	w8, #0x7fffffff            	// #2147483647
   10e44:	str	w8, [x21]
   10e48:	stur	d0, [x21, #68]
   10e4c:	str	wzr, [x21, #76]
   10e50:	b	10d80 <lzma_lzma_preset@@XZ_5.0+0xd44>
   10e54:	stp	x29, x30, [sp, #-48]!
   10e58:	stp	x20, x19, [sp, #32]
   10e5c:	mov	w19, w1
   10e60:	mov	x20, x0
   10e64:	add	x8, x0, #0x204
   10e68:	mov	w9, #0x4000400             	// #67109888
   10e6c:	str	x21, [sp, #16]
   10e70:	mov	x29, sp
   10e74:	str	w9, [x0]
   10e78:	cbz	w1, 10e98 <lzma_lzma_preset@@XZ_5.0+0xe5c>
   10e7c:	mov	w9, w19
   10e80:	add	x10, x20, #0x104
   10e84:	movi	v0.8h, #0x4, lsl #8
   10e88:	stur	q0, [x10, #-256]
   10e8c:	str	q0, [x10], #16
   10e90:	subs	x9, x9, #0x1
   10e94:	b.ne	10e88 <lzma_lzma_preset@@XZ_5.0+0xe4c>  // b.any
   10e98:	movi	v0.8h, #0x4, lsl #8
   10e9c:	stp	q0, q0, [x8]
   10ea0:	stp	q0, q0, [x8, #32]
   10ea4:	stp	q0, q0, [x8, #64]
   10ea8:	stp	q0, q0, [x8, #96]
   10eac:	stp	q0, q0, [x8, #128]
   10eb0:	stp	q0, q0, [x8, #160]
   10eb4:	stp	q0, q0, [x8, #192]
   10eb8:	stp	q0, q0, [x8, #224]
   10ebc:	stp	q0, q0, [x8, #256]
   10ec0:	stp	q0, q0, [x8, #288]
   10ec4:	stp	q0, q0, [x8, #320]
   10ec8:	stp	q0, q0, [x8, #352]
   10ecc:	stp	q0, q0, [x8, #384]
   10ed0:	stp	q0, q0, [x8, #416]
   10ed4:	stp	q0, q0, [x8, #448]
   10ed8:	stp	q0, q0, [x8, #480]
   10edc:	cbz	w19, 10f00 <lzma_lzma_preset@@XZ_5.0+0xec4>
   10ee0:	tbnz	w2, #0, 10f00 <lzma_lzma_preset@@XZ_5.0+0xec4>
   10ee4:	mov	w21, wzr
   10ee8:	mov	x0, x20
   10eec:	mov	w1, w21
   10ef0:	bl	117b8 <lzma_mode_is_supported@@XZ_5.0+0x5d0>
   10ef4:	add	w21, w21, #0x1
   10ef8:	cmp	w19, w21
   10efc:	b.ne	10ee8 <lzma_lzma_preset@@XZ_5.0+0xeac>  // b.any
   10f00:	ldp	x20, x19, [sp, #32]
   10f04:	ldr	x21, [sp, #16]
   10f08:	ldp	x29, x30, [sp], #48
   10f0c:	ret
   10f10:	stp	x29, x30, [sp, #-48]!
   10f14:	stp	x20, x19, [sp, #32]
   10f18:	str	x21, [sp, #16]
   10f1c:	mov	x21, x0
   10f20:	ldr	x0, [x0]
   10f24:	mov	x20, x3
   10f28:	mov	x19, x2
   10f2c:	mov	x29, sp
   10f30:	cbnz	x0, 10f48 <lzma_lzma_preset@@XZ_5.0+0xf0c>
   10f34:	mov	w0, #0xcee8                	// #52968
   10f38:	movk	w0, #0x3, lsl #16
   10f3c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   10f40:	str	x0, [x21]
   10f44:	cbz	x0, 1102c <lzma_lzma_preset@@XZ_5.0+0xff0>
   10f48:	ldr	w8, [x19, #32]
   10f4c:	cmp	w8, #0x2
   10f50:	b.eq	10f78 <lzma_lzma_preset@@XZ_5.0+0xf3c>  // b.none
   10f54:	cmp	w8, #0x1
   10f58:	b.ne	11024 <lzma_lzma_preset@@XZ_5.0+0xfe8>  // b.any
   10f5c:	strb	w8, [x0, #2956]
   10f60:	ldr	x8, [x19, #8]
   10f64:	cbz	x8, 10fd0 <lzma_lzma_preset@@XZ_5.0+0xf94>
   10f68:	ldr	w9, [x19, #16]
   10f6c:	cmp	w9, #0x0
   10f70:	cset	w9, ne  // ne = any
   10f74:	b	10fd4 <lzma_lzma_preset@@XZ_5.0+0xf98>
   10f78:	strb	wzr, [x0, #2956]
   10f7c:	ldr	w11, [x19]
   10f80:	mov	w9, #0x24c                 	// #588
   10f84:	movk	w9, #0x1, lsl #16
   10f88:	mov	w10, #0xba04                	// #47620
   10f8c:	mov	w8, wzr
   10f90:	add	x9, x0, x9
   10f94:	add	x10, x0, x10
   10f98:	mov	w12, #0xfffffffe            	// #-2
   10f9c:	mov	w13, #0x1                   	// #1
   10fa0:	lsl	w14, w13, w8
   10fa4:	add	w8, w8, #0x1
   10fa8:	cmp	w14, w11
   10fac:	add	w12, w12, #0x2
   10fb0:	b.cc	10fa0 <lzma_lzma_preset@@XZ_5.0+0xf64>  // b.lo, b.ul, b.last
   10fb4:	str	w12, [x9, #3140]
   10fb8:	ldr	w8, [x19, #36]
   10fbc:	sub	w8, w8, #0x1
   10fc0:	str	w8, [x10]
   10fc4:	str	w8, [x9]
   10fc8:	ldr	x8, [x19, #8]
   10fcc:	cbnz	x8, 10f68 <lzma_lzma_preset@@XZ_5.0+0xf2c>
   10fd0:	mov	w9, wzr
   10fd4:	strb	w9, [x0, #2957]
   10fd8:	mov	w9, #0x1000                	// #4096
   10fdc:	strb	wzr, [x0, #2958]
   10fe0:	str	x9, [x20]
   10fe4:	adrp	x9, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   10fe8:	ldr	q0, [x9, #2816]
   10fec:	ldr	w9, [x19]
   10ff0:	mov	x1, x19
   10ff4:	str	q0, [x20, #16]
   10ff8:	str	x9, [x20, #8]
   10ffc:	ldr	w9, [x19, #36]
   11000:	str	x9, [x20, #32]
   11004:	ldr	x9, [x19, #40]
   11008:	stp	x9, x8, [x20, #40]
   1100c:	ldr	w8, [x19, #16]
   11010:	ldr	x21, [sp, #16]
   11014:	str	w8, [x20, #56]
   11018:	ldp	x20, x19, [sp, #32]
   1101c:	ldp	x29, x30, [sp], #48
   11020:	b	10bb8 <lzma_lzma_preset@@XZ_5.0+0xb7c>
   11024:	mov	w0, #0x8                   	// #8
   11028:	b	11030 <lzma_lzma_preset@@XZ_5.0+0xff4>
   1102c:	mov	w0, #0x5                   	// #5
   11030:	ldp	x20, x19, [sp, #32]
   11034:	ldr	x21, [sp, #16]
   11038:	ldp	x29, x30, [sp], #48
   1103c:	ret
   11040:	adrp	x3, 11000 <lzma_lzma_preset@@XZ_5.0+0xfc4>
   11044:	add	x3, x3, #0x4c
   11048:	b	d6e0 <lzma_crc64@@XZ_5.0+0x1348>
   1104c:	adrp	x8, 11000 <lzma_lzma_preset@@XZ_5.0+0xfc4>
   11050:	add	x8, x8, #0x970
   11054:	str	x8, [x0, #8]
   11058:	b	10f10 <lzma_lzma_preset@@XZ_5.0+0xed4>
   1105c:	sub	sp, sp, #0x50
   11060:	stp	x29, x30, [sp, #64]
   11064:	ldr	w9, [x0, #20]
   11068:	add	x29, sp, #0x40
   1106c:	cmp	w9, #0x4
   11070:	b.hi	11114 <lzma_lzma_preset@@XZ_5.0+0x10d8>  // b.pmore
   11074:	ldr	w10, [x0, #24]
   11078:	mov	x8, #0xffffffffffffffff    	// #-1
   1107c:	cmp	w10, #0x4
   11080:	b.hi	11118 <lzma_lzma_preset@@XZ_5.0+0x10dc>  // b.pmore
   11084:	add	w9, w10, w9
   11088:	cmp	w9, #0x4
   1108c:	b.hi	11118 <lzma_lzma_preset@@XZ_5.0+0x10dc>  // b.pmore
   11090:	ldr	w8, [x0, #28]
   11094:	cmp	w8, #0x4
   11098:	b.hi	11114 <lzma_lzma_preset@@XZ_5.0+0x10d8>  // b.pmore
   1109c:	ldr	w8, [x0, #36]
   110a0:	sub	w9, w8, #0x2
   110a4:	cmp	w9, #0x10f
   110a8:	b.hi	11114 <lzma_lzma_preset@@XZ_5.0+0x10d8>  // b.pmore
   110ac:	ldr	w9, [x0, #32]
   110b0:	sub	w9, w9, #0x1
   110b4:	cmp	w9, #0x1
   110b8:	b.hi	11114 <lzma_lzma_preset@@XZ_5.0+0x10d8>  // b.pmore
   110bc:	mov	w9, #0x1000                	// #4096
   110c0:	adrp	x10, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xbe18>
   110c4:	str	x9, [sp]
   110c8:	ldr	q0, [x10, #2816]
   110cc:	ldr	w9, [x0]
   110d0:	str	x8, [sp, #32]
   110d4:	str	q0, [sp, #16]
   110d8:	str	x9, [sp, #8]
   110dc:	ldr	x8, [x0, #40]
   110e0:	str	x8, [sp, #40]
   110e4:	ldr	x8, [x0, #8]
   110e8:	str	x8, [sp, #48]
   110ec:	ldr	w8, [x0, #16]
   110f0:	mov	x0, sp
   110f4:	str	w8, [sp, #56]
   110f8:	bl	d42c <lzma_crc64@@XZ_5.0+0x1094>
   110fc:	mov	w8, #0xcee8                	// #52968
   11100:	movk	w8, #0x3, lsl #16
   11104:	add	x8, x0, x8
   11108:	cmn	x0, #0x1
   1110c:	csinv	x8, x8, xzr, ne  // ne = any
   11110:	b	11118 <lzma_lzma_preset@@XZ_5.0+0x10dc>
   11114:	mov	x8, #0xffffffffffffffff    	// #-1
   11118:	ldp	x29, x30, [sp, #64]
   1111c:	mov	x0, x8
   11120:	add	sp, sp, #0x50
   11124:	ret
   11128:	ldr	w9, [x0, #20]
   1112c:	cmp	w9, #0x4
   11130:	b.hi	1117c <lzma_lzma_preset@@XZ_5.0+0x1140>  // b.pmore
   11134:	ldr	w10, [x0, #24]
   11138:	mov	x8, x0
   1113c:	mov	w0, #0x1                   	// #1
   11140:	cmp	w10, #0x4
   11144:	b.hi	11178 <lzma_lzma_preset@@XZ_5.0+0x113c>  // b.pmore
   11148:	add	w11, w10, w9
   1114c:	cmp	w11, #0x4
   11150:	b.hi	11178 <lzma_lzma_preset@@XZ_5.0+0x113c>  // b.pmore
   11154:	ldr	w8, [x8, #28]
   11158:	cmp	w8, #0x4
   1115c:	b.hi	1117c <lzma_lzma_preset@@XZ_5.0+0x1140>  // b.pmore
   11160:	add	w8, w8, w8, lsl #2
   11164:	add	w8, w8, w10
   11168:	add	w8, w8, w8, lsl #3
   1116c:	mov	w0, wzr
   11170:	add	w8, w8, w9
   11174:	strb	w8, [x1]
   11178:	ret
   1117c:	mov	w0, #0x1                   	// #1
   11180:	ret
   11184:	ldr	w9, [x0, #20]
   11188:	cmp	w9, #0x4
   1118c:	b.hi	111e0 <lzma_lzma_preset@@XZ_5.0+0x11a4>  // b.pmore
   11190:	ldr	w10, [x0, #24]
   11194:	mov	x8, x0
   11198:	mov	w0, #0xb                   	// #11
   1119c:	cmp	w10, #0x4
   111a0:	b.hi	111dc <lzma_lzma_preset@@XZ_5.0+0x11a0>  // b.pmore
   111a4:	add	w11, w10, w9
   111a8:	cmp	w11, #0x4
   111ac:	b.hi	111dc <lzma_lzma_preset@@XZ_5.0+0x11a0>  // b.pmore
   111b0:	ldr	w11, [x8, #28]
   111b4:	cmp	w11, #0x4
   111b8:	b.hi	111e0 <lzma_lzma_preset@@XZ_5.0+0x11a4>  // b.pmore
   111bc:	add	w11, w11, w11, lsl #2
   111c0:	add	w10, w11, w10
   111c4:	add	w10, w10, w10, lsl #3
   111c8:	add	w9, w10, w9
   111cc:	strb	w9, [x1]
   111d0:	ldr	w8, [x8]
   111d4:	mov	w0, wzr
   111d8:	stur	w8, [x1, #1]
   111dc:	ret
   111e0:	mov	w0, #0xb                   	// #11
   111e4:	ret

00000000000111e8 <lzma_mode_is_supported@@XZ_5.0>:
   111e8:	sub	w8, w0, #0x1
   111ec:	cmp	w8, #0x2
   111f0:	cset	w0, cc  // cc = lo, ul, last
   111f4:	ret
   111f8:	stp	x29, x30, [sp, #-48]!
   111fc:	stp	x22, x21, [sp, #16]
   11200:	stp	x20, x19, [sp, #32]
   11204:	ldr	w9, [x0, #736]
   11208:	ldrb	w4, [x0, #2956]
   1120c:	mov	w8, #0xe94                 	// #3732
   11210:	movk	w8, #0x1, lsl #16
   11214:	mov	w10, #0xa                   	// #10
   11218:	mov	w11, #0x7                   	// #7
   1121c:	mov	w12, #0x7200                	// #29184
   11220:	cmp	w9, #0x7
   11224:	mov	w19, w2
   11228:	mov	w2, w1
   1122c:	add	x22, x0, x8
   11230:	csel	w8, w11, w10, cc  // cc = lo, ul, last
   11234:	add	x1, x0, x12
   11238:	mov	x29, sp
   1123c:	mov	w21, w3
   11240:	mov	x20, x0
   11244:	str	w8, [x0, #736]
   11248:	bl	1151c <lzma_mode_is_supported@@XZ_5.0+0x334>
   1124c:	lsr	w8, w19, #13
   11250:	cbnz	w8, 11264 <lzma_mode_is_supported@@XZ_5.0+0x7c>
   11254:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   11258:	ldr	x8, [x8, #4008]
   1125c:	ldrb	w9, [x8, w19, uxtw]
   11260:	b	112a0 <lzma_mode_is_supported@@XZ_5.0+0xb8>
   11264:	lsr	w8, w19, #25
   11268:	cbnz	w8, 11288 <lzma_mode_is_supported@@XZ_5.0+0xa0>
   1126c:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   11270:	ldr	x9, [x9, #4008]
   11274:	mov	w8, w19
   11278:	lsr	x8, x8, #12
   1127c:	ldrb	w8, [x9, x8]
   11280:	add	w9, w8, #0x18
   11284:	b	112a0 <lzma_mode_is_supported@@XZ_5.0+0xb8>
   11288:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   1128c:	ldr	x9, [x9, #4008]
   11290:	mov	w8, w19
   11294:	lsr	x8, x8, #24
   11298:	ldrb	w8, [x9, x8]
   1129c:	add	w9, w8, #0x30
   112a0:	ldr	x12, [x20, #24]
   112a4:	ubfx	w13, w9, #5, #1
   112a8:	add	x16, x20, #0x28
   112ac:	sub	w10, w21, #0x2
   112b0:	str	w13, [x16, x12, lsl #2]
   112b4:	cmp	w21, #0x6
   112b8:	mov	w11, #0x3                   	// #3
   112bc:	ldr	x12, [x20, #24]
   112c0:	csel	w10, w10, w11, cc  // cc = lo, ul, last
   112c4:	mov	w15, #0x6efe                	// #28414
   112c8:	add	x10, x20, x10, lsl #7
   112cc:	add	x11, x20, #0x110
   112d0:	add	x15, x10, x15
   112d4:	str	x15, [x11, x12, lsl #3]
   112d8:	ubfx	w15, w9, #4, #1
   112dc:	add	x12, x12, #0x1
   112e0:	str	x12, [x20, #24]
   112e4:	str	w15, [x16, x12, lsl #2]
   112e8:	ldr	x15, [x20, #24]
   112ec:	mov	w14, #0x6efc                	// #28412
   112f0:	mov	w13, #0x2                   	// #2
   112f4:	bfxil	w13, w9, #5, #1
   112f8:	add	x14, x10, x14
   112fc:	add	x10, x14, w13, uxtw #1
   11300:	ubfx	w12, w9, #3, #1
   11304:	str	x10, [x11, x15, lsl #3]
   11308:	add	x15, x15, #0x1
   1130c:	str	x15, [x20, #24]
   11310:	str	w12, [x16, x15, lsl #2]
   11314:	ldr	x12, [x20, #24]
   11318:	lsl	w13, w13, #1
   1131c:	bfxil	w13, w9, #4, #1
   11320:	add	x15, x14, w13, uxtw #1
   11324:	ubfx	w10, w9, #2, #1
   11328:	str	x15, [x11, x12, lsl #3]
   1132c:	add	x12, x12, #0x1
   11330:	str	x12, [x20, #24]
   11334:	str	w10, [x16, x12, lsl #2]
   11338:	ldr	x12, [x20, #24]
   1133c:	lsl	w13, w13, #1
   11340:	bfxil	w13, w9, #3, #1
   11344:	add	x10, x14, w13, uxtw #1
   11348:	ubfx	w15, w9, #1, #1
   1134c:	str	x10, [x11, x12, lsl #3]
   11350:	add	x12, x12, #0x1
   11354:	str	x12, [x20, #24]
   11358:	str	w15, [x16, x12, lsl #2]
   1135c:	ldr	x12, [x20, #24]
   11360:	lsl	w13, w13, #1
   11364:	bfxil	w13, w9, #2, #1
   11368:	add	x15, x14, w13, uxtw #1
   1136c:	and	w10, w9, #0x1
   11370:	str	x15, [x11, x12, lsl #3]
   11374:	add	x12, x12, #0x1
   11378:	str	x12, [x20, #24]
   1137c:	str	w10, [x16, x12, lsl #2]
   11380:	ldr	x12, [x20, #24]
   11384:	lsl	w13, w13, #1
   11388:	bfxil	w13, w9, #1, #1
   1138c:	add	x13, x14, w13, uxtw #1
   11390:	add	x8, x20, #0x2e4
   11394:	str	x13, [x11, x12, lsl #3]
   11398:	add	x11, x12, #0x1
   1139c:	cmp	w9, #0x4
   113a0:	str	x11, [x20, #24]
   113a4:	b.cc	114ec <lzma_mode_is_supported@@XZ_5.0+0x304>  // b.lo, b.ul, b.last
   113a8:	lsr	w13, w9, #1
   113ac:	orr	w10, w10, #0x2
   113b0:	sub	w12, w13, #0x1
   113b4:	lsl	w14, w10, w12
   113b8:	cmp	w9, #0xd
   113bc:	sub	w10, w19, w14
   113c0:	b.hi	11418 <lzma_mode_is_supported@@XZ_5.0+0x230>  // b.pmore
   113c4:	add	x13, x20, w14, uxtw #1
   113c8:	mov	w14, #0x70fa                	// #28922
   113cc:	sub	x9, x13, w9, uxtw #1
   113d0:	add	x9, x9, x14
   113d4:	mov	w13, #0x1                   	// #1
   113d8:	and	w14, w10, #0x1
   113dc:	add	x11, x20, x11, lsl #2
   113e0:	str	w14, [x11, #40]
   113e4:	ldr	x11, [x20, #24]
   113e8:	lsr	w15, w10, #1
   113ec:	add	x14, x9, w13, uxtw #1
   113f0:	bfi	w10, w13, #1, #31
   113f4:	add	x13, x20, x11, lsl #3
   113f8:	subs	w12, w12, #0x1
   113fc:	add	x11, x11, #0x1
   11400:	str	x14, [x13, #272]
   11404:	mov	w13, w10
   11408:	mov	w10, w15
   1140c:	str	x11, [x20, #24]
   11410:	b.ne	113d8 <lzma_mode_is_supported@@XZ_5.0+0x1f0>  // b.any
   11414:	b	114ec <lzma_mode_is_supported@@XZ_5.0+0x304>
   11418:	lsr	w9, w10, #4
   1141c:	sub	w12, w13, #0x6
   11420:	lsr	w13, w9, w12
   11424:	mov	w14, #0x2                   	// #2
   11428:	add	x15, x11, #0x1
   1142c:	bfxil	w14, w13, #0, #1
   11430:	add	x11, x20, x11, lsl #2
   11434:	str	x15, [x20, #24]
   11438:	str	w14, [x11, #40]
   1143c:	ldr	x11, [x20, #24]
   11440:	sub	w12, w12, #0x1
   11444:	cmn	w12, #0x1
   11448:	b.ne	11420 <lzma_mode_is_supported@@XZ_5.0+0x238>  // b.any
   1144c:	and	w9, w10, #0x1
   11450:	add	x14, x20, #0x28
   11454:	str	w9, [x14, x11, lsl #2]
   11458:	ldr	x9, [x20, #24]
   1145c:	mov	w13, #0x71e2                	// #29154
   11460:	add	x15, x20, #0x110
   11464:	add	x13, x20, x13
   11468:	ubfx	w16, w10, #1, #1
   1146c:	str	x13, [x15, x9, lsl #3]
   11470:	add	x9, x9, #0x1
   11474:	str	x9, [x20, #24]
   11478:	str	w16, [x14, x9, lsl #2]
   1147c:	ldr	x9, [x20, #24]
   11480:	mov	w12, #0x71e0                	// #29152
   11484:	mov	w11, #0x2                   	// #2
   11488:	add	x12, x20, x12
   1148c:	bfxil	w11, w10, #0, #1
   11490:	add	x13, x12, w11, uxtw #1
   11494:	str	x13, [x15, x9, lsl #3]
   11498:	ubfx	w13, w10, #2, #1
   1149c:	add	x9, x9, #0x1
   114a0:	str	x9, [x20, #24]
   114a4:	str	w13, [x14, x9, lsl #2]
   114a8:	ldr	x9, [x20, #24]
   114ac:	bfi	w16, w11, #1, #2
   114b0:	add	x11, x12, w16, uxtw #1
   114b4:	ubfx	w10, w10, #3, #1
   114b8:	str	x11, [x15, x9, lsl #3]
   114bc:	add	x9, x9, #0x1
   114c0:	str	x9, [x20, #24]
   114c4:	str	w10, [x14, x9, lsl #2]
   114c8:	ldr	x9, [x20, #24]
   114cc:	bfi	w13, w16, #1, #3
   114d0:	add	x10, x12, w13, uxtw #1
   114d4:	str	x10, [x15, x9, lsl #3]
   114d8:	add	x9, x9, #0x1
   114dc:	str	x9, [x20, #24]
   114e0:	ldr	w9, [x22, #68]
   114e4:	add	w9, w9, #0x1
   114e8:	str	w9, [x22, #68]
   114ec:	ldr	w9, [x20, #748]
   114f0:	str	w9, [x20, #752]
   114f4:	ldr	x8, [x8]
   114f8:	str	w19, [x20, #740]
   114fc:	str	x8, [x20, #744]
   11500:	ldr	w8, [x22]
   11504:	add	w8, w8, #0x1
   11508:	str	w8, [x22]
   1150c:	ldp	x20, x19, [sp, #32]
   11510:	ldp	x22, x21, [sp, #16]
   11514:	ldp	x29, x30, [sp], #48
   11518:	ret
   1151c:	ldr	x9, [x0, #24]
   11520:	sub	w8, w3, #0x2
   11524:	cmp	w8, #0x7
   11528:	add	x9, x0, x9, lsl #2
   1152c:	add	x10, x9, #0x28
   11530:	b.hi	115a4 <lzma_mode_is_supported@@XZ_5.0+0x3bc>  // b.pmore
   11534:	str	wzr, [x10]
   11538:	ldr	x11, [x0, #24]
   1153c:	add	x9, x0, #0x110
   11540:	lsr	w10, w8, #2
   11544:	add	x13, x0, #0x28
   11548:	str	x1, [x9, x11, lsl #3]
   1154c:	add	x11, x11, #0x1
   11550:	str	x11, [x0, #24]
   11554:	str	w10, [x13, x11, lsl #2]
   11558:	ldr	x11, [x0, #24]
   1155c:	add	x12, x1, w2, uxtw #4
   11560:	add	x15, x12, #0x4
   11564:	add	x12, x12, #0x6
   11568:	ubfx	w14, w8, #1, #1
   1156c:	str	x12, [x9, x11, lsl #3]
   11570:	add	x11, x11, #0x1
   11574:	str	x11, [x0, #24]
   11578:	str	w14, [x13, x11, lsl #2]
   1157c:	ldr	x11, [x0, #24]
   11580:	orr	w10, w10, #0x2
   11584:	add	x12, x15, w10, uxtw #1
   11588:	lsl	w10, w10, #1
   1158c:	bfxil	w10, w8, #1, #1
   11590:	str	x12, [x9, x11, lsl #3]
   11594:	add	x11, x11, #0x1
   11598:	str	x11, [x0, #24]
   1159c:	add	x9, x15, w10, uxtw #1
   115a0:	b	1176c <lzma_mode_is_supported@@XZ_5.0+0x584>
   115a4:	mov	w9, #0x1                   	// #1
   115a8:	str	w9, [x10]
   115ac:	ldr	x10, [x0, #24]
   115b0:	sub	w8, w3, #0xa
   115b4:	add	x12, x1, #0x2
   115b8:	cmp	w8, #0x7
   115bc:	add	x11, x0, x10, lsl #3
   115c0:	add	x10, x10, #0x1
   115c4:	str	x1, [x11, #272]
   115c8:	str	x10, [x0, #24]
   115cc:	add	x10, x0, x10, lsl #2
   115d0:	add	x10, x10, #0x28
   115d4:	b.hi	11648 <lzma_mode_is_supported@@XZ_5.0+0x460>  // b.pmore
   115d8:	str	wzr, [x10]
   115dc:	ldr	x11, [x0, #24]
   115e0:	add	x9, x0, #0x110
   115e4:	lsr	w10, w8, #2
   115e8:	add	x14, x0, #0x28
   115ec:	str	x12, [x9, x11, lsl #3]
   115f0:	add	x11, x11, #0x1
   115f4:	str	x11, [x0, #24]
   115f8:	str	w10, [x14, x11, lsl #2]
   115fc:	ldr	x11, [x0, #24]
   11600:	add	x13, x1, w2, uxtw #4
   11604:	add	x12, x13, #0x104
   11608:	add	x13, x13, #0x106
   1160c:	ubfx	w15, w8, #1, #1
   11610:	str	x13, [x9, x11, lsl #3]
   11614:	add	x11, x11, #0x1
   11618:	str	x11, [x0, #24]
   1161c:	str	w15, [x14, x11, lsl #2]
   11620:	ldr	x11, [x0, #24]
   11624:	orr	w10, w10, #0x2
   11628:	add	x13, x12, w10, uxtw #1
   1162c:	lsl	w10, w10, #1
   11630:	bfxil	w10, w8, #1, #1
   11634:	str	x13, [x9, x11, lsl #3]
   11638:	add	x11, x11, #0x1
   1163c:	str	x11, [x0, #24]
   11640:	add	x9, x12, w10, uxtw #1
   11644:	b	1176c <lzma_mode_is_supported@@XZ_5.0+0x584>
   11648:	str	w9, [x10]
   1164c:	ldr	x13, [x0, #24]
   11650:	add	x9, x0, #0x110
   11654:	sub	w8, w3, #0x12
   11658:	add	x11, x0, #0x28
   1165c:	ubfx	w14, w8, #7, #1
   11660:	str	x12, [x9, x13, lsl #3]
   11664:	add	x12, x13, #0x1
   11668:	str	x12, [x0, #24]
   1166c:	str	w14, [x11, x12, lsl #2]
   11670:	ldr	x12, [x0, #24]
   11674:	add	x13, x1, #0x206
   11678:	ubfx	w15, w8, #6, #1
   1167c:	mov	w14, #0x2                   	// #2
   11680:	str	x13, [x9, x12, lsl #3]
   11684:	add	x12, x12, #0x1
   11688:	str	x12, [x0, #24]
   1168c:	str	w15, [x11, x12, lsl #2]
   11690:	ldr	x12, [x0, #24]
   11694:	add	x10, x1, #0x204
   11698:	bfxil	w14, w8, #7, #1
   1169c:	add	x15, x10, w14, uxtw #1
   116a0:	ubfx	w13, w8, #5, #1
   116a4:	str	x15, [x9, x12, lsl #3]
   116a8:	add	x12, x12, #0x1
   116ac:	str	x12, [x0, #24]
   116b0:	str	w13, [x11, x12, lsl #2]
   116b4:	ldr	x12, [x0, #24]
   116b8:	lsl	w13, w14, #1
   116bc:	bfxil	w13, w8, #6, #1
   116c0:	add	x14, x10, w13, uxtw #1
   116c4:	ubfx	w15, w8, #4, #1
   116c8:	str	x14, [x9, x12, lsl #3]
   116cc:	add	x12, x12, #0x1
   116d0:	str	x12, [x0, #24]
   116d4:	str	w15, [x11, x12, lsl #2]
   116d8:	ldr	x12, [x0, #24]
   116dc:	lsl	w13, w13, #1
   116e0:	bfxil	w13, w8, #5, #1
   116e4:	add	x15, x10, w13, uxtw #1
   116e8:	ubfx	w14, w8, #3, #1
   116ec:	str	x15, [x9, x12, lsl #3]
   116f0:	add	x12, x12, #0x1
   116f4:	str	x12, [x0, #24]
   116f8:	str	w14, [x11, x12, lsl #2]
   116fc:	ldr	x12, [x0, #24]
   11700:	lsl	w13, w13, #1
   11704:	bfxil	w13, w8, #4, #1
   11708:	add	x14, x10, w13, uxtw #1
   1170c:	ubfx	w15, w8, #2, #1
   11710:	str	x14, [x9, x12, lsl #3]
   11714:	add	x12, x12, #0x1
   11718:	str	x12, [x0, #24]
   1171c:	str	w15, [x11, x12, lsl #2]
   11720:	ldr	x12, [x0, #24]
   11724:	lsl	w13, w13, #1
   11728:	bfxil	w13, w8, #3, #1
   1172c:	add	x15, x10, w13, uxtw #1
   11730:	ubfx	w14, w8, #1, #1
   11734:	str	x15, [x9, x12, lsl #3]
   11738:	add	x12, x12, #0x1
   1173c:	str	x12, [x0, #24]
   11740:	str	w14, [x11, x12, lsl #2]
   11744:	lsl	w13, w13, #1
   11748:	ldr	x11, [x0, #24]
   1174c:	bfxil	w13, w8, #2, #1
   11750:	add	x12, x10, w13, uxtw #1
   11754:	lsl	w13, w13, #1
   11758:	bfxil	w13, w8, #1, #1
   1175c:	str	x12, [x9, x11, lsl #3]
   11760:	add	x11, x11, #0x1
   11764:	add	x9, x10, w13, uxtw #1
   11768:	str	x11, [x0, #24]
   1176c:	and	w8, w8, #0x1
   11770:	add	x10, x0, x11, lsl #2
   11774:	str	w8, [x10, #40]
   11778:	ldr	x8, [x0, #24]
   1177c:	add	x10, x0, x8, lsl #3
   11780:	add	x8, x8, #0x1
   11784:	str	x9, [x10, #272]
   11788:	str	x8, [x0, #24]
   1178c:	tbnz	w4, #0, 117a8 <lzma_mode_is_supported@@XZ_5.0+0x5c0>
   11790:	add	x8, x1, w2, uxtw #2
   11794:	mov	w9, #0x4808                	// #18440
   11798:	ldr	w10, [x8, x9]
   1179c:	subs	w10, w10, #0x1
   117a0:	str	w10, [x8, x9]
   117a4:	b.eq	117ac <lzma_mode_is_supported@@XZ_5.0+0x5c4>  // b.none
   117a8:	ret
   117ac:	mov	x0, x1
   117b0:	mov	w1, w2
   117b4:	b	117b8 <lzma_mode_is_supported@@XZ_5.0+0x5d0>
   117b8:	mov	w8, #0x4804                	// #18436
   117bc:	ldr	w8, [x0, x8]
   117c0:	add	x9, x0, w1, uxtw #2
   117c4:	mov	w10, #0x4808                	// #18440
   117c8:	str	w8, [x9, x10]
   117cc:	ldrh	w9, [x0]
   117d0:	ldrh	w12, [x0, #2]
   117d4:	mov	w10, w1
   117d8:	lsr	x13, x9, #4
   117dc:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   117e0:	ldr	x9, [x9, #3960]
   117e4:	eor	x11, x13, #0x7f
   117e8:	cbz	w8, 11864 <lzma_mode_is_supported@@XZ_5.0+0x67c>
   117ec:	ldrb	w14, [x9, x13]
   117f0:	mov	w13, #0x440                 	// #1088
   117f4:	mov	x15, xzr
   117f8:	madd	x16, x10, x13, x0
   117fc:	mov	w13, wzr
   11800:	add	w17, w15, #0x8
   11804:	and	w18, w17, #0x1
   11808:	lsr	w17, w17, #1
   1180c:	lsl	w1, w17, #1
   11810:	add	x2, x0, x10, lsl #4
   11814:	add	x1, x2, x1
   11818:	ldrh	w1, [x1, #4]
   1181c:	neg	w18, w18
   11820:	and	w18, w18, #0x7f0
   11824:	cmp	w17, #0x1
   11828:	eor	w18, w18, w1
   1182c:	lsr	x18, x18, #4
   11830:	ldrb	w18, [x9, x18]
   11834:	add	w13, w13, w18
   11838:	b.ne	11804 <lzma_mode_is_supported@@XZ_5.0+0x61c>  // b.any
   1183c:	add	w17, w13, w14
   11840:	add	x13, x15, #0x1
   11844:	add	x18, x16, x15, lsl #2
   11848:	cmp	x13, x8
   1184c:	str	w17, [x18, #1028]
   11850:	b.cs	11868 <lzma_mode_is_supported@@XZ_5.0+0x680>  // b.hs, b.nlast
   11854:	cmp	x15, #0x7
   11858:	mov	x15, x13
   1185c:	b.cc	117fc <lzma_mode_is_supported@@XZ_5.0+0x614>  // b.lo, b.ul, b.last
   11860:	b	11868 <lzma_mode_is_supported@@XZ_5.0+0x680>
   11864:	mov	w13, wzr
   11868:	ldrb	w11, [x9, x11]
   1186c:	cmp	w13, w8
   11870:	lsr	x12, x12, #4
   11874:	b.cs	118f8 <lzma_mode_is_supported@@XZ_5.0+0x710>  // b.hs, b.nlast
   11878:	cmp	w13, #0xf
   1187c:	b.hi	118f8 <lzma_mode_is_supported@@XZ_5.0+0x710>  // b.pmore
   11880:	ldrb	w15, [x9, x12]
   11884:	mov	w14, w13
   11888:	mov	w13, #0x440                 	// #1088
   1188c:	madd	x16, x10, x13, x0
   11890:	add	w15, w15, w11
   11894:	mov	w13, wzr
   11898:	mov	w17, w14
   1189c:	and	w18, w17, #0x1
   118a0:	lsr	w17, w17, #1
   118a4:	lsl	w1, w17, #1
   118a8:	add	x2, x0, x10, lsl #4
   118ac:	add	x1, x2, x1
   118b0:	ldrh	w1, [x1, #260]
   118b4:	neg	w18, w18
   118b8:	and	w18, w18, #0x7f0
   118bc:	cmp	w17, #0x1
   118c0:	eor	w18, w18, w1
   118c4:	lsr	x18, x18, #4
   118c8:	ldrb	w18, [x9, x18]
   118cc:	add	w13, w13, w18
   118d0:	b.ne	1189c <lzma_mode_is_supported@@XZ_5.0+0x6b4>  // b.any
   118d4:	add	w17, w15, w13
   118d8:	add	x13, x14, #0x1
   118dc:	add	x18, x16, x14, lsl #2
   118e0:	cmp	x13, x8
   118e4:	str	w17, [x18, #1028]
   118e8:	b.cs	118f8 <lzma_mode_is_supported@@XZ_5.0+0x710>  // b.hs, b.nlast
   118ec:	cmp	x14, #0xf
   118f0:	mov	x14, x13
   118f4:	b.cc	11894 <lzma_mode_is_supported@@XZ_5.0+0x6ac>  // b.lo, b.ul, b.last
   118f8:	cmp	w13, w8
   118fc:	b.cs	1196c <lzma_mode_is_supported@@XZ_5.0+0x784>  // b.hs, b.nlast
   11900:	eor	x12, x12, #0x7f
   11904:	ldrb	w14, [x9, x12]
   11908:	mov	w12, w13
   1190c:	mov	w13, #0x440                 	// #1088
   11910:	madd	x10, x10, x13, x0
   11914:	add	w11, w14, w11
   11918:	mov	w13, wzr
   1191c:	add	w14, w12, #0xf0
   11920:	and	w15, w14, #0x1
   11924:	lsr	w14, w14, #1
   11928:	lsl	w16, w14, #1
   1192c:	add	x16, x0, x16
   11930:	ldrh	w16, [x16, #516]
   11934:	neg	w15, w15
   11938:	and	w15, w15, #0x7f0
   1193c:	cmp	w14, #0x1
   11940:	eor	w15, w15, w16
   11944:	lsr	x15, x15, #4
   11948:	ldrb	w15, [x9, x15]
   1194c:	add	w13, w13, w15
   11950:	b.ne	11920 <lzma_mode_is_supported@@XZ_5.0+0x738>  // b.any
   11954:	add	x14, x10, x12, lsl #2
   11958:	add	x12, x12, #0x1
   1195c:	add	w13, w11, w13
   11960:	cmp	x12, x8
   11964:	str	w13, [x14, #1028]
   11968:	b.ne	11918 <lzma_mode_is_supported@@XZ_5.0+0x730>  // b.any
   1196c:	ret
   11970:	ldr	w8, [x1, #104]
   11974:	cmp	w8, #0x1
   11978:	b.eq	11984 <lzma_mode_is_supported@@XZ_5.0+0x79c>  // b.none
   1197c:	mov	w5, #0xffffffff            	// #-1
   11980:	b	1014c <lzma_lzma_preset@@XZ_5.0+0x110>
   11984:	mov	w0, #0x8                   	// #8
   11988:	ret
   1198c:	stp	x29, x30, [sp, #-96]!
   11990:	stp	x26, x25, [sp, #32]
   11994:	ldr	w8, [x1, #28]
   11998:	ldr	w25, [x1, #96]
   1199c:	stp	x22, x21, [sp, #64]
   119a0:	stp	x20, x19, [sp, #80]
   119a4:	mov	x20, x3
   119a8:	mov	x21, x2
   119ac:	mov	x19, x1
   119b0:	mov	x22, x0
   119b4:	str	x27, [sp, #16]
   119b8:	stp	x24, x23, [sp, #48]
   119bc:	mov	x29, sp
   119c0:	cbz	w8, 119d4 <lzma_mode_is_supported@@XZ_5.0+0x7ec>
   119c4:	ldr	w8, [x22, #2948]
   119c8:	ldr	w23, [x22, #2952]
   119cc:	str	w8, [x29, #28]
   119d0:	b	119e8 <lzma_mode_is_supported@@XZ_5.0+0x800>
   119d4:	add	x2, x22, #0x2f4
   119d8:	add	x1, x29, #0x1c
   119dc:	mov	x0, x19
   119e0:	bl	dbdc <lzma_mf_is_supported@@XZ_5.0+0x2c>
   119e4:	mov	w23, w0
   119e8:	ldr	w11, [x19, #24]
   119ec:	ldr	w8, [x19, #36]
   119f0:	sub	w8, w8, w11
   119f4:	add	w9, w8, #0x1
   119f8:	cmp	w9, #0x111
   119fc:	mov	w9, #0x111                 	// #273
   11a00:	csinc	w8, w9, w8, cs  // cs = hs, nlast
   11a04:	cmp	w8, #0x2
   11a08:	b.cs	11a38 <lzma_mode_is_supported@@XZ_5.0+0x850>  // b.hs, b.nlast
   11a0c:	mov	w8, #0xffffffff            	// #-1
   11a10:	mov	w9, #0x1                   	// #1
   11a14:	str	w8, [x21]
   11a18:	str	w9, [x20]
   11a1c:	ldp	x20, x19, [sp, #80]
   11a20:	ldp	x22, x21, [sp, #64]
   11a24:	ldp	x24, x23, [sp, #48]
   11a28:	ldp	x26, x25, [sp, #32]
   11a2c:	ldr	x27, [sp, #16]
   11a30:	ldp	x29, x30, [sp], #96
   11a34:	ret
   11a38:	ldr	x12, [x19]
   11a3c:	ldr	w16, [x22, #740]
   11a40:	mov	w13, w8
   11a44:	add	x24, x12, x11
   11a48:	sub	x15, x24, #0x2
   11a4c:	sub	x9, x15, x16
   11a50:	ldurb	w14, [x24, #-1]
   11a54:	ldrb	w10, [x9]
   11a58:	cmp	w14, w10
   11a5c:	b.ne	11a8c <lzma_mode_is_supported@@XZ_5.0+0x8a4>  // b.any
   11a60:	ldrb	w10, [x24]
   11a64:	ldrb	w9, [x9, #1]
   11a68:	cmp	w10, w9
   11a6c:	b.ne	11a8c <lzma_mode_is_supported@@XZ_5.0+0x8a4>  // b.any
   11a70:	cmp	w8, #0x2
   11a74:	b.ne	11b10 <lzma_mode_is_supported@@XZ_5.0+0x928>  // b.any
   11a78:	mov	w16, #0x2                   	// #2
   11a7c:	cmp	w16, w25
   11a80:	b.cs	11be0 <lzma_mode_is_supported@@XZ_5.0+0x9f8>  // b.hs, b.nlast
   11a84:	mov	w9, w16
   11a88:	b	11a90 <lzma_mode_is_supported@@XZ_5.0+0x8a8>
   11a8c:	mov	w9, wzr
   11a90:	ldr	w17, [x22, #744]
   11a94:	sub	x10, x15, x17
   11a98:	ldrb	w16, [x10]
   11a9c:	cmp	w14, w16
   11aa0:	b.ne	11ad8 <lzma_mode_is_supported@@XZ_5.0+0x8f0>  // b.any
   11aa4:	ldrb	w16, [x24]
   11aa8:	ldrb	w10, [x10, #1]
   11aac:	cmp	w16, w10
   11ab0:	b.ne	11ad8 <lzma_mode_is_supported@@XZ_5.0+0x8f0>  // b.any
   11ab4:	cmp	w8, #0x2
   11ab8:	b.ne	11b54 <lzma_mode_is_supported@@XZ_5.0+0x96c>  // b.any
   11abc:	mov	w16, #0x2                   	// #2
   11ac0:	cmp	w16, w25
   11ac4:	b.cs	11bf4 <lzma_mode_is_supported@@XZ_5.0+0xa0c>  // b.hs, b.nlast
   11ac8:	cmp	w16, w9
   11acc:	cset	w10, hi  // hi = pmore
   11ad0:	csel	w9, w16, w9, hi  // hi = pmore
   11ad4:	b	11adc <lzma_mode_is_supported@@XZ_5.0+0x8f4>
   11ad8:	mov	w10, wzr
   11adc:	ldr	w18, [x22, #748]
   11ae0:	sub	x16, x15, x18
   11ae4:	ldrb	w17, [x16]
   11ae8:	cmp	w14, w17
   11aec:	b.ne	11c18 <lzma_mode_is_supported@@XZ_5.0+0xa30>  // b.any
   11af0:	ldrb	w17, [x24]
   11af4:	ldrb	w16, [x16, #1]
   11af8:	cmp	w17, w16
   11afc:	b.ne	11c18 <lzma_mode_is_supported@@XZ_5.0+0xa30>  // b.any
   11b00:	cmp	w8, #0x2
   11b04:	b.ne	11b98 <lzma_mode_is_supported@@XZ_5.0+0x9b0>  // b.any
   11b08:	mov	w16, #0x2                   	// #2
   11b0c:	b	11c00 <lzma_mode_is_supported@@XZ_5.0+0xa18>
   11b10:	sub	x16, x11, x16
   11b14:	add	x17, x11, x12
   11b18:	mov	x9, xzr
   11b1c:	sub	x10, x13, #0x2
   11b20:	add	x16, x12, x16
   11b24:	add	x17, x17, #0x1
   11b28:	ldrb	w18, [x17, x9]
   11b2c:	ldrb	w0, [x16, x9]
   11b30:	cmp	w18, w0
   11b34:	b.ne	11bd4 <lzma_mode_is_supported@@XZ_5.0+0x9ec>  // b.any
   11b38:	add	x9, x9, #0x1
   11b3c:	cmp	x10, x9
   11b40:	b.ne	11b28 <lzma_mode_is_supported@@XZ_5.0+0x940>  // b.any
   11b44:	mov	w16, w8
   11b48:	cmp	w16, w25
   11b4c:	b.cc	11a84 <lzma_mode_is_supported@@XZ_5.0+0x89c>  // b.lo, b.ul, b.last
   11b50:	b	11be0 <lzma_mode_is_supported@@XZ_5.0+0x9f8>
   11b54:	sub	x17, x11, x17
   11b58:	add	x18, x11, x12
   11b5c:	mov	x10, xzr
   11b60:	sub	x16, x13, #0x2
   11b64:	add	x17, x12, x17
   11b68:	add	x18, x18, #0x1
   11b6c:	ldrb	w0, [x18, x10]
   11b70:	ldrb	w1, [x17, x10]
   11b74:	cmp	w0, w1
   11b78:	b.ne	11be8 <lzma_mode_is_supported@@XZ_5.0+0xa00>  // b.any
   11b7c:	add	x10, x10, #0x1
   11b80:	cmp	x16, x10
   11b84:	b.ne	11b6c <lzma_mode_is_supported@@XZ_5.0+0x984>  // b.any
   11b88:	mov	w16, w8
   11b8c:	cmp	w16, w25
   11b90:	b.cc	11ac8 <lzma_mode_is_supported@@XZ_5.0+0x8e0>  // b.lo, b.ul, b.last
   11b94:	b	11bf4 <lzma_mode_is_supported@@XZ_5.0+0xa0c>
   11b98:	sub	x18, x11, x18
   11b9c:	add	x0, x11, x12
   11ba0:	mov	x16, xzr
   11ba4:	sub	x17, x13, #0x2
   11ba8:	add	x18, x12, x18
   11bac:	add	x0, x0, #0x1
   11bb0:	ldrb	w1, [x0, x16]
   11bb4:	ldrb	w2, [x18, x16]
   11bb8:	cmp	w1, w2
   11bbc:	b.ne	11bfc <lzma_mode_is_supported@@XZ_5.0+0xa14>  // b.any
   11bc0:	add	x16, x16, #0x1
   11bc4:	cmp	x17, x16
   11bc8:	b.ne	11bb0 <lzma_mode_is_supported@@XZ_5.0+0x9c8>  // b.any
   11bcc:	mov	w16, w8
   11bd0:	b	11c00 <lzma_mode_is_supported@@XZ_5.0+0xa18>
   11bd4:	add	w16, w9, #0x2
   11bd8:	cmp	w16, w25
   11bdc:	b.cc	11a84 <lzma_mode_is_supported@@XZ_5.0+0x89c>  // b.lo, b.ul, b.last
   11be0:	mov	w17, wzr
   11be4:	b	11d30 <lzma_mode_is_supported@@XZ_5.0+0xb48>
   11be8:	add	w16, w10, #0x2
   11bec:	cmp	w16, w25
   11bf0:	b.cc	11ac8 <lzma_mode_is_supported@@XZ_5.0+0x8e0>  // b.lo, b.ul, b.last
   11bf4:	mov	w17, #0x1                   	// #1
   11bf8:	b	11d30 <lzma_mode_is_supported@@XZ_5.0+0xb48>
   11bfc:	add	w16, w16, #0x2
   11c00:	cmp	w16, w25
   11c04:	mov	w17, #0x2                   	// #2
   11c08:	b.cs	11d30 <lzma_mode_is_supported@@XZ_5.0+0xb48>  // b.hs, b.nlast
   11c0c:	cmp	w16, w9
   11c10:	csel	w10, w17, w10, hi  // hi = pmore
   11c14:	csel	w9, w16, w9, hi  // hi = pmore
   11c18:	ldr	w16, [x22, #752]
   11c1c:	sub	x15, x15, x16
   11c20:	ldrb	w17, [x15]
   11c24:	cmp	w14, w17
   11c28:	b.ne	11ca4 <lzma_mode_is_supported@@XZ_5.0+0xabc>  // b.any
   11c2c:	ldrb	w14, [x24]
   11c30:	ldrb	w15, [x15, #1]
   11c34:	cmp	w14, w15
   11c38:	b.ne	11ca4 <lzma_mode_is_supported@@XZ_5.0+0xabc>  // b.any
   11c3c:	cmp	w8, #0x2
   11c40:	b.ne	11c4c <lzma_mode_is_supported@@XZ_5.0+0xa64>  // b.any
   11c44:	mov	w16, #0x2                   	// #2
   11c48:	b	11c8c <lzma_mode_is_supported@@XZ_5.0+0xaa4>
   11c4c:	sub	x15, x11, x16
   11c50:	add	x16, x11, x12
   11c54:	mov	x14, xzr
   11c58:	sub	x13, x13, #0x2
   11c5c:	add	x11, x12, x15
   11c60:	add	x12, x16, #0x1
   11c64:	ldrb	w15, [x12, x14]
   11c68:	ldrb	w16, [x11, x14]
   11c6c:	cmp	w15, w16
   11c70:	b.ne	11c88 <lzma_mode_is_supported@@XZ_5.0+0xaa0>  // b.any
   11c74:	add	x14, x14, #0x1
   11c78:	cmp	x13, x14
   11c7c:	b.ne	11c64 <lzma_mode_is_supported@@XZ_5.0+0xa7c>  // b.any
   11c80:	mov	w16, w8
   11c84:	b	11c8c <lzma_mode_is_supported@@XZ_5.0+0xaa4>
   11c88:	add	w16, w14, #0x2
   11c8c:	cmp	w16, w25
   11c90:	mov	w17, #0x3                   	// #3
   11c94:	b.cs	11d30 <lzma_mode_is_supported@@XZ_5.0+0xb48>  // b.hs, b.nlast
   11c98:	cmp	w16, w9
   11c9c:	csel	w10, w17, w10, hi  // hi = pmore
   11ca0:	csel	w9, w16, w9, hi  // hi = pmore
   11ca4:	cmp	w23, w25
   11ca8:	b.cs	11d60 <lzma_mode_is_supported@@XZ_5.0+0xb78>  // b.hs, b.nlast
   11cac:	cmp	w23, #0x2
   11cb0:	b.cc	11da4 <lzma_mode_is_supported@@XZ_5.0+0xbbc>  // b.lo, b.ul, b.last
   11cb4:	ldr	w11, [x29, #28]
   11cb8:	sub	w12, w11, #0x1
   11cbc:	add	x12, x22, w12, uxtw #3
   11cc0:	ldr	w26, [x12, #760]
   11cc4:	cmp	w11, #0x2
   11cc8:	b.cc	11d18 <lzma_mode_is_supported@@XZ_5.0+0xb30>  // b.lo, b.ul, b.last
   11ccc:	mov	w12, #0xfffffffe            	// #-2
   11cd0:	add	x12, x11, x12
   11cd4:	add	x13, x22, w12, uxtw #3
   11cd8:	ldr	w13, [x13, #756]
   11cdc:	add	w14, w13, #0x1
   11ce0:	cmp	w23, w14
   11ce4:	b.ne	11d18 <lzma_mode_is_supported@@XZ_5.0+0xb30>  // b.any
   11ce8:	and	x14, x12, #0xffffffff
   11cec:	add	x14, x22, x14, lsl #3
   11cf0:	ldr	w14, [x14, #760]
   11cf4:	cmp	w14, w26, lsr #7
   11cf8:	b.cs	11d18 <lzma_mode_is_supported@@XZ_5.0+0xb30>  // b.hs, b.nlast
   11cfc:	sub	w11, w11, #0x1
   11d00:	cmp	w11, #0x1
   11d04:	sub	x12, x12, #0x1
   11d08:	mov	w26, w14
   11d0c:	mov	w23, w13
   11d10:	str	w11, [x29, #28]
   11d14:	b.hi	11cd4 <lzma_mode_is_supported@@XZ_5.0+0xaec>  // b.pmore
   11d18:	cmp	w26, #0x7f
   11d1c:	ccmp	w23, #0x2, #0x0, hi  // hi = pmore
   11d20:	csinc	w23, w23, wzr, ne  // ne = any
   11d24:	cmp	w9, #0x2
   11d28:	b.cs	11db0 <lzma_mode_is_supported@@XZ_5.0+0xbc8>  // b.hs, b.nlast
   11d2c:	b	11e10 <lzma_mode_is_supported@@XZ_5.0+0xc28>
   11d30:	str	w17, [x21]
   11d34:	subs	w21, w16, #0x1
   11d38:	str	w16, [x20]
   11d3c:	b.eq	11a1c <lzma_mode_is_supported@@XZ_5.0+0x834>  // b.none
   11d40:	ldr	x8, [x19, #56]
   11d44:	mov	x0, x19
   11d48:	mov	w1, w21
   11d4c:	blr	x8
   11d50:	ldr	w8, [x19, #28]
   11d54:	add	w8, w8, w21
   11d58:	str	w8, [x19, #28]
   11d5c:	b	11a1c <lzma_mode_is_supported@@XZ_5.0+0x834>
   11d60:	ldr	w8, [x29, #28]
   11d64:	sub	w8, w8, #0x1
   11d68:	add	x8, x22, w8, uxtw #3
   11d6c:	ldr	w8, [x8, #760]
   11d70:	subs	w22, w23, #0x1
   11d74:	add	w8, w8, #0x4
   11d78:	str	w8, [x21]
   11d7c:	str	w23, [x20]
   11d80:	b.eq	11a1c <lzma_mode_is_supported@@XZ_5.0+0x834>  // b.none
   11d84:	ldr	x8, [x19, #56]
   11d88:	mov	x0, x19
   11d8c:	mov	w1, w22
   11d90:	blr	x8
   11d94:	ldr	w8, [x19, #28]
   11d98:	add	w8, w8, w22
   11d9c:	str	w8, [x19, #28]
   11da0:	b	11a1c <lzma_mode_is_supported@@XZ_5.0+0x834>
   11da4:	mov	w26, wzr
   11da8:	cmp	w9, #0x2
   11dac:	b.cc	11e10 <lzma_mode_is_supported@@XZ_5.0+0xc28>  // b.lo, b.ul, b.last
   11db0:	add	w11, w9, #0x1
   11db4:	cmp	w11, w23
   11db8:	b.cs	11de4 <lzma_mode_is_supported@@XZ_5.0+0xbfc>  // b.hs, b.nlast
   11dbc:	cmp	w26, #0x201
   11dc0:	b.cc	11dd0 <lzma_mode_is_supported@@XZ_5.0+0xbe8>  // b.lo, b.ul, b.last
   11dc4:	add	w11, w9, #0x2
   11dc8:	cmp	w11, w23
   11dcc:	b.cs	11de4 <lzma_mode_is_supported@@XZ_5.0+0xbfc>  // b.hs, b.nlast
   11dd0:	cmp	w26, #0x8, lsl #12
   11dd4:	b.ls	11e10 <lzma_mode_is_supported@@XZ_5.0+0xc28>  // b.plast
   11dd8:	add	w11, w9, #0x3
   11ddc:	cmp	w11, w23
   11de0:	b.cc	11e10 <lzma_mode_is_supported@@XZ_5.0+0xc28>  // b.lo, b.ul, b.last
   11de4:	ldr	x8, [x19, #56]
   11de8:	str	w9, [x20]
   11dec:	sub	w20, w9, #0x1
   11df0:	mov	x0, x19
   11df4:	mov	w1, w20
   11df8:	str	w10, [x21]
   11dfc:	blr	x8
   11e00:	ldr	w8, [x19, #28]
   11e04:	add	w8, w8, w20
   11e08:	str	w8, [x19, #28]
   11e0c:	b	11a1c <lzma_mode_is_supported@@XZ_5.0+0x834>
   11e10:	cmp	w8, #0x3
   11e14:	b.cc	11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.lo, b.ul, b.last
   11e18:	subs	w25, w23, #0x1
   11e1c:	b.ls	11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.plast
   11e20:	add	x1, x22, #0xb84
   11e24:	add	x2, x22, #0x2f4
   11e28:	mov	x0, x19
   11e2c:	bl	dbdc <lzma_mf_is_supported@@XZ_5.0+0x2c>
   11e30:	cmp	w0, #0x2
   11e34:	str	w0, [x22, #2952]
   11e38:	b.cc	11e9c <lzma_mode_is_supported@@XZ_5.0+0xcb4>  // b.lo, b.ul, b.last
   11e3c:	ldr	w8, [x22, #2948]
   11e40:	cmp	w0, w23
   11e44:	sub	w8, w8, #0x1
   11e48:	add	x8, x22, w8, uxtw #3
   11e4c:	ldr	w8, [x8, #760]
   11e50:	b.cc	11e5c <lzma_mode_is_supported@@XZ_5.0+0xc74>  // b.lo, b.ul, b.last
   11e54:	cmp	w8, w26
   11e58:	b.cc	11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.lo, b.ul, b.last
   11e5c:	add	w10, w23, #0x1
   11e60:	cmp	w26, w8, lsr #7
   11e64:	cset	w9, cs  // cs = hs, nlast
   11e68:	cmp	w0, w10
   11e6c:	cset	w10, eq  // eq = none
   11e70:	b.hi	11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.pmore
   11e74:	and	w9, w10, w9
   11e78:	tbnz	w9, #0, 11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>
   11e7c:	cmp	w23, #0x3
   11e80:	b.cc	11e9c <lzma_mode_is_supported@@XZ_5.0+0xcb4>  // b.lo, b.ul, b.last
   11e84:	add	w9, w0, #0x1
   11e88:	cmp	w9, w23
   11e8c:	b.cc	11e9c <lzma_mode_is_supported@@XZ_5.0+0xcb4>  // b.lo, b.ul, b.last
   11e90:	lsr	w9, w26, #7
   11e94:	cmp	w9, w8
   11e98:	b.hi	11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.pmore
   11e9c:	ldr	w8, [x22, #740]
   11ea0:	cmp	w25, #0x2
   11ea4:	mov	w9, #0x2                   	// #2
   11ea8:	sub	x27, x24, #0x1
   11eac:	csel	w25, w25, w9, hi  // hi = pmore
   11eb0:	sub	x1, x27, x8
   11eb4:	mov	x0, x24
   11eb8:	mov	x2, x25
   11ebc:	bl	3210 <bcmp@plt>
   11ec0:	cbz	w0, 11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>
   11ec4:	ldr	w8, [x22, #744]
   11ec8:	mov	x0, x24
   11ecc:	mov	x2, x25
   11ed0:	sub	x1, x27, x8
   11ed4:	bl	3210 <bcmp@plt>
   11ed8:	cbz	w0, 11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>
   11edc:	ldr	w8, [x22, #748]
   11ee0:	mov	x0, x24
   11ee4:	mov	x2, x25
   11ee8:	sub	x1, x27, x8
   11eec:	bl	3210 <bcmp@plt>
   11ef0:	cbz	w0, 11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>
   11ef4:	ldr	w8, [x22, #752]
   11ef8:	mov	x0, x24
   11efc:	mov	x2, x25
   11f00:	sub	x1, x27, x8
   11f04:	bl	3210 <bcmp@plt>
   11f08:	cbz	w0, 11a0c <lzma_mode_is_supported@@XZ_5.0+0x824>
   11f0c:	add	w8, w26, #0x4
   11f10:	subs	w22, w23, #0x2
   11f14:	b	11d78 <lzma_mode_is_supported@@XZ_5.0+0xb90>
   11f18:	sub	sp, sp, #0x1b0
   11f1c:	mov	w8, #0xedc                 	// #3804
   11f20:	mov	w9, #0xee0                 	// #3808
   11f24:	movk	w8, #0x1, lsl #16
   11f28:	movk	w9, #0x1, lsl #16
   11f2c:	ldr	w10, [x0, x8]
   11f30:	ldr	w8, [x0, x9]
   11f34:	mov	w9, #0xe90                 	// #3728
   11f38:	movk	w9, #0x1, lsl #16
   11f3c:	stp	x28, x27, [sp, #352]
   11f40:	stp	x24, x23, [sp, #384]
   11f44:	stp	x22, x21, [sp, #400]
   11f48:	mov	x22, x3
   11f4c:	mov	x23, x2
   11f50:	mov	x21, x0
   11f54:	cmp	w10, w8
   11f58:	add	x27, x0, x9
   11f5c:	stp	x29, x30, [sp, #336]
   11f60:	stp	x26, x25, [sp, #368]
   11f64:	stp	x20, x19, [sp, #416]
   11f68:	add	x29, sp, #0x150
   11f6c:	b.ne	11fa0 <lzma_mode_is_supported@@XZ_5.0+0xdb8>  // b.any
   11f70:	ldr	w8, [x1, #28]
   11f74:	mov	w9, #0x6d24                	// #27940
   11f78:	mov	w25, w4
   11f7c:	mov	x24, x1
   11f80:	add	x9, x21, x9
   11f84:	stur	x9, [x29, #-48]
   11f88:	cbz	w8, 11fd4 <lzma_mode_is_supported@@XZ_5.0+0xdec>
   11f8c:	ldr	w19, [x24, #96]
   11f90:	ldr	w8, [x21, #2948]
   11f94:	ldr	w0, [x21, #2952]
   11f98:	stur	w8, [x29, #-12]
   11f9c:	b	12294 <lzma_mode_is_supported@@XZ_5.0+0x10ac>
   11fa0:	mov	w9, #0x2c                  	// #44
   11fa4:	mov	w10, #0xef8                 	// #3832
   11fa8:	movk	w10, #0x1, lsl #16
   11fac:	mov	w11, #0xefc                 	// #3836
   11fb0:	madd	x9, x8, x9, x21
   11fb4:	movk	w11, #0x1, lsl #16
   11fb8:	ldr	w10, [x9, x10]
   11fbc:	ldr	w9, [x9, x11]
   11fc0:	sub	w8, w10, w8
   11fc4:	str	w9, [x23]
   11fc8:	str	w8, [x22]
   11fcc:	str	w10, [x27, #80]
   11fd0:	b	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>
   11fd4:	ldr	w8, [x27, #4]
   11fd8:	cmp	w8, #0x80
   11fdc:	b.cc	121b0 <lzma_mode_is_supported@@XZ_5.0+0xfc8>  // b.lo, b.ul, b.last
   11fe0:	mov	w8, #0x2c8                 	// #712
   11fe4:	movk	w8, #0x1, lsl #16
   11fe8:	add	x13, x21, x8
   11fec:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   11ff0:	ldr	x8, [x8, #3960]
   11ff4:	mov	w10, #0x290                 	// #656
   11ff8:	mov	w11, #0x690                 	// #1680
   11ffc:	mov	x9, xzr
   12000:	movk	w10, #0x1, lsl #16
   12004:	movk	w11, #0x1, lsl #16
   12008:	mov	w12, #0x6efc                	// #28412
   1200c:	b	12030 <lzma_mode_is_supported@@XZ_5.0+0xe48>
   12010:	add	x14, x21, x9, lsl #8
   12014:	ldr	q0, [x14, x10]
   12018:	add	x14, x21, x9, lsl #9
   1201c:	add	x9, x9, #0x1
   12020:	cmp	x9, #0x4
   12024:	add	x13, x13, #0x100
   12028:	str	q0, [x14, x11]
   1202c:	b.eq	120dc <lzma_mode_is_supported@@XZ_5.0+0xef4>  // b.none
   12030:	ldr	w14, [x27]
   12034:	cbz	w14, 12010 <lzma_mode_is_supported@@XZ_5.0+0xe28>
   12038:	mov	x14, xzr
   1203c:	mov	w15, wzr
   12040:	add	w16, w14, #0x40
   12044:	and	w17, w16, #0x1
   12048:	lsr	w16, w16, #1
   1204c:	lsl	w18, w16, #1
   12050:	add	x0, x21, x9, lsl #7
   12054:	add	x18, x0, x18
   12058:	ldrh	w18, [x18, x12]
   1205c:	neg	w17, w17
   12060:	and	w17, w17, #0x7f0
   12064:	cmp	w16, #0x1
   12068:	eor	w17, w17, w18
   1206c:	lsr	x17, x17, #4
   12070:	ldrb	w17, [x8, x17]
   12074:	add	w15, w15, w17
   12078:	b.ne	12044 <lzma_mode_is_supported@@XZ_5.0+0xe5c>  // b.any
   1207c:	add	x16, x21, x9, lsl #8
   12080:	add	x16, x16, x14, lsl #2
   12084:	str	w15, [x16, x10]
   12088:	ldr	w15, [x27]
   1208c:	add	x14, x14, #0x1
   12090:	cmp	x14, x15
   12094:	b.cc	1203c <lzma_mode_is_supported@@XZ_5.0+0xe54>  // b.lo, b.ul, b.last
   12098:	cmp	w15, #0xf
   1209c:	b.cc	12010 <lzma_mode_is_supported@@XZ_5.0+0xe28>  // b.lo, b.ul, b.last
   120a0:	mov	x14, xzr
   120a4:	lsl	x15, x14, #2
   120a8:	ldr	w16, [x13, x15]
   120ac:	lsl	w17, w14, #3
   120b0:	add	w17, w17, #0x70
   120b4:	and	w17, w17, #0xfffffff0
   120b8:	add	w16, w16, w17
   120bc:	sub	w16, w16, #0x50
   120c0:	str	w16, [x13, x15]
   120c4:	ldr	w15, [x27]
   120c8:	add	x16, x14, #0xf
   120cc:	add	x14, x14, #0x1
   120d0:	cmp	x16, x15
   120d4:	b.cc	120a4 <lzma_mode_is_supported@@XZ_5.0+0xebc>  // b.lo, b.ul, b.last
   120d8:	b	12010 <lzma_mode_is_supported@@XZ_5.0+0xe28>
   120dc:	adrp	x10, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   120e0:	ldr	x10, [x10, #4008]
   120e4:	mov	w12, #0x290                 	// #656
   120e8:	mov	w13, #0x690                 	// #1680
   120ec:	mov	w11, #0x70fa                	// #28922
   120f0:	movk	w12, #0x1, lsl #16
   120f4:	movk	w13, #0x1, lsl #16
   120f8:	ldrb	w15, [x10, x9]
   120fc:	mov	w17, #0x2                   	// #2
   12100:	mov	w14, wzr
   12104:	ubfx	x16, x15, #1, #31
   12108:	bfxil	w17, w15, #0, #1
   1210c:	sub	w16, w16, #0x1
   12110:	lsl	w17, w17, w16
   12114:	add	x0, x21, w17, uxtw #1
   12118:	sub	w18, w9, w17
   1211c:	sub	x17, x0, x15, lsl #1
   12120:	add	x17, x17, x11
   12124:	mov	w0, #0x1                   	// #1
   12128:	ldrh	w1, [x17, w0, uxtw #1]
   1212c:	and	w2, w18, #0x1
   12130:	neg	w2, w2
   12134:	and	w2, w2, #0x7f0
   12138:	eor	w1, w2, w1
   1213c:	lsr	x1, x1, #4
   12140:	ldrb	w1, [x8, x1]
   12144:	lsr	w2, w18, #1
   12148:	bfi	w18, w0, #1, #31
   1214c:	subs	w16, w16, #0x1
   12150:	add	w14, w14, w1
   12154:	mov	w0, w18
   12158:	mov	w18, w2
   1215c:	b.ne	12128 <lzma_mode_is_supported@@XZ_5.0+0xf40>  // b.any
   12160:	add	x15, x21, x15, lsl #2
   12164:	add	x15, x15, x12
   12168:	ldr	w16, [x15]
   1216c:	add	x17, x21, x9, lsl #2
   12170:	add	x17, x17, x13
   12174:	add	x9, x9, #0x1
   12178:	add	w16, w16, w14
   1217c:	str	w16, [x17]
   12180:	ldr	w16, [x15, #256]
   12184:	cmp	x9, #0x80
   12188:	add	w16, w16, w14
   1218c:	str	w16, [x17, #512]
   12190:	ldr	w16, [x15, #512]
   12194:	add	w16, w16, w14
   12198:	str	w16, [x17, #1024]
   1219c:	ldr	w15, [x15, #768]
   121a0:	add	w14, w15, w14
   121a4:	str	w14, [x17, #1536]
   121a8:	b.ne	120f8 <lzma_mode_is_supported@@XZ_5.0+0xf10>  // b.any
   121ac:	str	wzr, [x27, #4]
   121b0:	ldr	w8, [x27, #72]
   121b4:	cmp	w8, #0x10
   121b8:	b.cc	12280 <lzma_mode_is_supported@@XZ_5.0+0x1098>  // b.lo, b.ul, b.last
   121bc:	ldur	x9, [x29, #-48]
   121c0:	adrp	x11, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   121c4:	mov	w10, #0xe98                 	// #3736
   121c8:	movk	w10, #0x1, lsl #16
   121cc:	ldrh	w9, [x9, #1214]
   121d0:	ldr	x11, [x11, #3960]
   121d4:	mov	w12, #0x71e0                	// #29152
   121d8:	mov	x8, xzr
   121dc:	add	x10, x21, x10
   121e0:	add	x12, x21, x12
   121e4:	mov	w13, #0x2                   	// #2
   121e8:	ubfx	w14, w8, #1, #1
   121ec:	bfxil	w13, w8, #0, #1
   121f0:	neg	w16, w14
   121f4:	bfi	w14, w13, #1, #2
   121f8:	ldrh	w13, [x12, w13, uxtw #1]
   121fc:	ubfx	w15, w8, #2, #1
   12200:	neg	w17, w15
   12204:	bfi	w15, w14, #1, #3
   12208:	ldrh	w14, [x12, w14, uxtw #1]
   1220c:	and	w16, w16, #0x7f0
   12210:	eor	w13, w16, w13
   12214:	and	w16, w8, #0x1
   12218:	and	w17, w17, #0x7f0
   1221c:	neg	w16, w16
   12220:	ldrh	w15, [x12, w15, uxtw #1]
   12224:	eor	w14, w17, w14
   12228:	ubfx	w17, w8, #3, #1
   1222c:	and	w16, w16, #0x7f0
   12230:	neg	w17, w17
   12234:	eor	w16, w16, w9
   12238:	and	x17, x17, #0x7f0
   1223c:	lsr	x16, x16, #4
   12240:	lsr	x13, x13, #4
   12244:	ldrb	w16, [x11, x16]
   12248:	ldrb	w13, [x11, x13]
   1224c:	lsr	x14, x14, #4
   12250:	eor	x15, x17, x15
   12254:	ldrb	w14, [x11, x14]
   12258:	lsr	x15, x15, #4
   1225c:	ldrb	w15, [x11, x15]
   12260:	add	w13, w13, w16
   12264:	add	w13, w13, w14
   12268:	add	w13, w13, w15
   1226c:	str	w13, [x10, x8, lsl #2]
   12270:	add	x8, x8, #0x1
   12274:	cmp	x8, #0x10
   12278:	b.ne	121e4 <lzma_mode_is_supported@@XZ_5.0+0xffc>  // b.any
   1227c:	str	wzr, [x27, #72]
   12280:	ldr	w19, [x24, #96]
   12284:	add	x2, x21, #0x2f4
   12288:	sub	x1, x29, #0xc
   1228c:	mov	x0, x24
   12290:	bl	dbdc <lzma_mf_is_supported@@XZ_5.0+0x2c>
   12294:	ldr	w8, [x24, #36]
   12298:	ldr	w16, [x24, #24]
   1229c:	sub	w8, w8, w16
   122a0:	add	w15, w8, #0x1
   122a4:	cmp	w15, #0x110
   122a8:	b.hi	122b8 <lzma_mode_is_supported@@XZ_5.0+0x10d0>  // b.pmore
   122ac:	cmp	w15, #0x1
   122b0:	b.hi	122bc <lzma_mode_is_supported@@XZ_5.0+0x10d4>  // b.pmore
   122b4:	b	1253c <lzma_mode_is_supported@@XZ_5.0+0x1354>
   122b8:	mov	w15, #0x111                 	// #273
   122bc:	ldr	x18, [x24]
   122c0:	ldr	w9, [x21, #740]
   122c4:	add	x1, x18, x16
   122c8:	sub	x12, x1, #0x2
   122cc:	sub	x8, x12, x9
   122d0:	ldurb	w10, [x1, #-1]
   122d4:	ldrb	w11, [x8]
   122d8:	cmp	w10, w11
   122dc:	b.ne	12338 <lzma_mode_is_supported@@XZ_5.0+0x1150>  // b.any
   122e0:	ldrb	w13, [x1]
   122e4:	ldrb	w8, [x8, #1]
   122e8:	cmp	w13, w8
   122ec:	b.ne	12338 <lzma_mode_is_supported@@XZ_5.0+0x1150>  // b.any
   122f0:	cmp	w15, #0x3
   122f4:	b.cc	12344 <lzma_mode_is_supported@@XZ_5.0+0x115c>  // b.lo, b.ul, b.last
   122f8:	mov	w13, w15
   122fc:	sub	x14, x16, x9
   12300:	add	x17, x16, x18
   12304:	mov	x8, xzr
   12308:	sub	x13, x13, #0x2
   1230c:	add	x14, x18, x14
   12310:	add	x17, x17, #0x1
   12314:	ldrb	w2, [x17, x8]
   12318:	ldrb	w3, [x14, x8]
   1231c:	cmp	w2, w3
   12320:	b.ne	1234c <lzma_mode_is_supported@@XZ_5.0+0x1164>  // b.any
   12324:	add	x8, x8, #0x1
   12328:	cmp	w13, w8
   1232c:	b.ne	12314 <lzma_mode_is_supported@@XZ_5.0+0x112c>  // b.any
   12330:	mov	w8, w15
   12334:	b	12350 <lzma_mode_is_supported@@XZ_5.0+0x1168>
   12338:	mov	w8, wzr
   1233c:	stur	wzr, [x29, #-32]
   12340:	b	12354 <lzma_mode_is_supported@@XZ_5.0+0x116c>
   12344:	mov	w8, #0x2                   	// #2
   12348:	b	12350 <lzma_mode_is_supported@@XZ_5.0+0x1168>
   1234c:	add	w8, w8, #0x2
   12350:	stur	w8, [x29, #-32]
   12354:	ldr	w13, [x21, #744]
   12358:	sub	x14, x12, x13
   1235c:	ldrb	w17, [x14]
   12360:	cmp	w10, w17
   12364:	b.ne	123c0 <lzma_mode_is_supported@@XZ_5.0+0x11d8>  // b.any
   12368:	ldrb	w17, [x1]
   1236c:	ldrb	w14, [x14, #1]
   12370:	cmp	w17, w14
   12374:	b.ne	123c0 <lzma_mode_is_supported@@XZ_5.0+0x11d8>  // b.any
   12378:	cmp	w15, #0x3
   1237c:	b.cc	123cc <lzma_mode_is_supported@@XZ_5.0+0x11e4>  // b.lo, b.ul, b.last
   12380:	mov	w17, w15
   12384:	sub	x2, x16, x13
   12388:	add	x3, x16, x18
   1238c:	mov	x14, xzr
   12390:	sub	x17, x17, #0x2
   12394:	add	x2, x18, x2
   12398:	add	x3, x3, #0x1
   1239c:	ldrb	w4, [x3, x14]
   123a0:	ldrb	w5, [x2, x14]
   123a4:	cmp	w4, w5
   123a8:	b.ne	123d4 <lzma_mode_is_supported@@XZ_5.0+0x11ec>  // b.any
   123ac:	add	x14, x14, #0x1
   123b0:	cmp	w17, w14
   123b4:	b.ne	1239c <lzma_mode_is_supported@@XZ_5.0+0x11b4>  // b.any
   123b8:	mov	w14, w15
   123bc:	b	123d8 <lzma_mode_is_supported@@XZ_5.0+0x11f0>
   123c0:	mov	w2, wzr
   123c4:	stur	wzr, [x29, #-28]
   123c8:	b	123e4 <lzma_mode_is_supported@@XZ_5.0+0x11fc>
   123cc:	mov	w14, #0x2                   	// #2
   123d0:	b	123d8 <lzma_mode_is_supported@@XZ_5.0+0x11f0>
   123d4:	add	w14, w14, #0x2
   123d8:	cmp	w14, w8
   123dc:	cset	w2, hi  // hi = pmore
   123e0:	stur	w14, [x29, #-28]
   123e4:	ldr	w14, [x21, #748]
   123e8:	sub	x17, x12, x14
   123ec:	ldrb	w3, [x17]
   123f0:	cmp	w10, w3
   123f4:	b.ne	12458 <lzma_mode_is_supported@@XZ_5.0+0x1270>  // b.any
   123f8:	ldrb	w3, [x1]
   123fc:	ldrb	w17, [x17, #1]
   12400:	cmp	w3, w17
   12404:	b.ne	12458 <lzma_mode_is_supported@@XZ_5.0+0x1270>  // b.any
   12408:	mov	w17, #0x2                   	// #2
   1240c:	cmp	w15, #0x3
   12410:	mov	w3, #0x2                   	// #2
   12414:	b.cc	12464 <lzma_mode_is_supported@@XZ_5.0+0x127c>  // b.lo, b.ul, b.last
   12418:	mov	w4, w15
   1241c:	sub	x5, x16, x14
   12420:	add	x6, x16, x18
   12424:	mov	x3, xzr
   12428:	sub	x4, x4, #0x2
   1242c:	add	x5, x18, x5
   12430:	add	x6, x6, #0x1
   12434:	ldrb	w7, [x6, x3]
   12438:	ldrb	w20, [x5, x3]
   1243c:	cmp	w7, w20
   12440:	b.ne	12460 <lzma_mode_is_supported@@XZ_5.0+0x1278>  // b.any
   12444:	add	x3, x3, #0x1
   12448:	cmp	w4, w3
   1244c:	b.ne	12434 <lzma_mode_is_supported@@XZ_5.0+0x124c>  // b.any
   12450:	mov	w3, w15
   12454:	b	12464 <lzma_mode_is_supported@@XZ_5.0+0x127c>
   12458:	stur	wzr, [x29, #-24]
   1245c:	b	12478 <lzma_mode_is_supported@@XZ_5.0+0x1290>
   12460:	add	w3, w3, #0x2
   12464:	stur	w3, [x29, #-24]
   12468:	sub	x4, x29, #0x20
   1246c:	ldr	w4, [x4, w2, uxtw #2]
   12470:	cmp	w3, w4
   12474:	csel	w2, w17, w2, hi  // hi = pmore
   12478:	ldr	w17, [x21, #752]
   1247c:	sub	x3, x12, x17
   12480:	ldrb	w4, [x3]
   12484:	cmp	w10, w4
   12488:	b.ne	124e0 <lzma_mode_is_supported@@XZ_5.0+0x12f8>  // b.any
   1248c:	ldrb	w1, [x1]
   12490:	ldrb	w3, [x3, #1]
   12494:	cmp	w1, w3
   12498:	b.ne	124e0 <lzma_mode_is_supported@@XZ_5.0+0x12f8>  // b.any
   1249c:	cmp	w15, #0x3
   124a0:	b.cc	124e8 <lzma_mode_is_supported@@XZ_5.0+0x1300>  // b.lo, b.ul, b.last
   124a4:	mov	w3, w15
   124a8:	sub	x4, x16, x17
   124ac:	add	x5, x16, x18
   124b0:	mov	x1, xzr
   124b4:	sub	x16, x3, #0x2
   124b8:	add	x18, x18, x4
   124bc:	add	x3, x5, #0x1
   124c0:	ldrb	w4, [x3, x1]
   124c4:	ldrb	w5, [x18, x1]
   124c8:	cmp	w4, w5
   124cc:	b.ne	124f0 <lzma_mode_is_supported@@XZ_5.0+0x1308>  // b.any
   124d0:	add	x1, x1, #0x1
   124d4:	cmp	w16, w1
   124d8:	b.ne	124c0 <lzma_mode_is_supported@@XZ_5.0+0x12d8>  // b.any
   124dc:	b	124f4 <lzma_mode_is_supported@@XZ_5.0+0x130c>
   124e0:	stur	wzr, [x29, #-20]
   124e4:	b	1250c <lzma_mode_is_supported@@XZ_5.0+0x1324>
   124e8:	mov	w15, #0x2                   	// #2
   124ec:	b	124f4 <lzma_mode_is_supported@@XZ_5.0+0x130c>
   124f0:	add	w15, w1, #0x2
   124f4:	stur	w15, [x29, #-20]
   124f8:	sub	x16, x29, #0x20
   124fc:	ldr	w16, [x16, w2, uxtw #2]
   12500:	cmp	w15, w16
   12504:	mov	w15, #0x3                   	// #3
   12508:	csel	w2, w15, w2, hi  // hi = pmore
   1250c:	sub	x15, x29, #0x20
   12510:	ldr	w1, [x15, w2, uxtw #2]
   12514:	cmp	w1, w19
   12518:	b.cs	12550 <lzma_mode_is_supported@@XZ_5.0+0x1368>  // b.hs, b.nlast
   1251c:	cmp	w0, w19
   12520:	b.cs	12580 <lzma_mode_is_supported@@XZ_5.0+0x1398>  // b.hs, b.nlast
   12524:	cmp	w1, #0x1
   12528:	b.hi	125c4 <lzma_mode_is_supported@@XZ_5.0+0x13dc>  // b.pmore
   1252c:	cmp	w0, #0x1
   12530:	b.hi	125c4 <lzma_mode_is_supported@@XZ_5.0+0x13dc>  // b.pmore
   12534:	cmp	w10, w11
   12538:	b.eq	125c4 <lzma_mode_is_supported@@XZ_5.0+0x13dc>  // b.none
   1253c:	mov	w8, #0xffffffff            	// #-1
   12540:	mov	w9, #0x1                   	// #1
   12544:	str	w8, [x23]
   12548:	str	w9, [x22]
   1254c:	b	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>
   12550:	subs	w20, w1, #0x1
   12554:	str	w2, [x23]
   12558:	str	w1, [x22]
   1255c:	b.eq	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>  // b.none
   12560:	ldr	x8, [x24, #56]
   12564:	mov	x0, x24
   12568:	mov	w1, w20
   1256c:	blr	x8
   12570:	ldr	w8, [x24, #28]
   12574:	add	w8, w8, w20
   12578:	str	w8, [x24, #28]
   1257c:	b	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>
   12580:	ldur	w8, [x29, #-12]
   12584:	str	w0, [x22]
   12588:	sub	w8, w8, #0x1
   1258c:	add	x8, x21, w8, uxtw #3
   12590:	ldr	w8, [x8, #760]
   12594:	subs	w21, w0, #0x1
   12598:	add	w8, w8, #0x4
   1259c:	str	w8, [x23]
   125a0:	b.eq	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>  // b.none
   125a4:	ldr	x8, [x24, #56]
   125a8:	mov	x0, x24
   125ac:	mov	w1, w21
   125b0:	blr	x8
   125b4:	ldr	w8, [x24, #28]
   125b8:	add	w8, w8, w21
   125bc:	str	w8, [x24, #28]
   125c0:	b	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>
   125c4:	ldr	w18, [x21, #736]
   125c8:	adrp	x7, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   125cc:	ldr	x7, [x7, #3960]
   125d0:	mov	w15, #0x6b9c                	// #27548
   125d4:	str	w18, [x27, #84]
   125d8:	ldr	w3, [x21, #2960]
   125dc:	add	x2, x21, x18, lsl #5
   125e0:	ldrb	w4, [x12]
   125e4:	ldr	w6, [x21, #2964]
   125e8:	and	w12, w3, w25
   125ec:	add	x2, x2, w12, uxtw #1
   125f0:	ldrh	w15, [x2, x15]
   125f4:	ldr	w5, [x21, #2968]
   125f8:	mov	w16, #0x8                   	// #8
   125fc:	sub	w3, w16, w6
   12600:	lsr	x15, x15, #4
   12604:	ldrb	w16, [x7, x15]
   12608:	and	w2, w5, w25
   1260c:	lsl	w2, w2, w6
   12610:	lsr	w3, w4, w3
   12614:	add	w5, w3, w2
   12618:	cmp	w18, #0x6
   1261c:	orr	w3, w10, #0x100
   12620:	mov	w2, wzr
   12624:	b.ls	1268c <lzma_mode_is_supported@@XZ_5.0+0x14a4>  // b.plast
   12628:	adrp	x20, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   1262c:	ldr	x20, [x20, #3960]
   12630:	mov	w6, #0x600                 	// #1536
   12634:	mov	w4, #0x100                 	// #256
   12638:	madd	x5, x5, x6, x21
   1263c:	mov	w6, w11
   12640:	lsl	w6, w6, #1
   12644:	add	w7, w4, w3, lsr #8
   12648:	and	w19, w6, w4
   1264c:	add	w7, w7, w19
   12650:	add	x7, x5, w7, uxtw #1
   12654:	ldrh	w7, [x7, #2972]
   12658:	ubfx	w19, w3, #7, #1
   1265c:	neg	w19, w19
   12660:	and	w19, w19, #0x7f0
   12664:	eor	w7, w19, w7
   12668:	lsr	x7, x7, #4
   1266c:	ldrb	w7, [x20, x7]
   12670:	cmp	w3, #0x8, lsl #12
   12674:	lsl	w3, w3, #1
   12678:	eor	w19, w3, w6
   1267c:	add	w2, w2, w7
   12680:	bic	w4, w4, w19
   12684:	b.cc	12640 <lzma_mode_is_supported@@XZ_5.0+0x1458>  // b.lo, b.ul, b.last
   12688:	b	126d0 <lzma_mode_is_supported@@XZ_5.0+0x14e8>
   1268c:	adrp	x20, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   12690:	ldr	x20, [x20, #3960]
   12694:	mov	w4, #0x600                 	// #1536
   12698:	madd	x4, x5, x4, x21
   1269c:	and	w5, w3, #0x1
   126a0:	lsr	w3, w3, #1
   126a4:	lsl	w6, w3, #1
   126a8:	add	x6, x4, x6
   126ac:	ldrh	w6, [x6, #2972]
   126b0:	neg	w5, w5
   126b4:	and	w5, w5, #0x7f0
   126b8:	cmp	w3, #0x1
   126bc:	eor	w5, w5, w6
   126c0:	lsr	x5, x5, #4
   126c4:	ldrb	w5, [x20, x5]
   126c8:	add	w2, w2, w5
   126cc:	b.ne	1269c <lzma_mode_is_supported@@XZ_5.0+0x14b4>  // b.any
   126d0:	add	w3, w2, w16
   126d4:	mov	w2, #0xffffffff            	// #-1
   126d8:	strb	wzr, [x27, #132]
   126dc:	add	x4, x21, x18, lsl #1
   126e0:	str	w3, [x27, #144]
   126e4:	str	w2, [x27, #152]
   126e8:	mov	w16, #0x6d1c                	// #27932
   126ec:	ldrh	w16, [x4, x16]
   126f0:	eor	x15, x15, #0x7f
   126f4:	ldrb	w15, [x20, x15]
   126f8:	cmp	w10, w11
   126fc:	lsr	x16, x16, #4
   12700:	eor	x5, x16, #0x7f
   12704:	ldrb	w5, [x20, x5]
   12708:	add	w10, w5, w15
   1270c:	b.ne	12768 <lzma_mode_is_supported@@XZ_5.0+0x1580>  // b.any
   12710:	mov	w11, #0x6d34                	// #27956
   12714:	add	x2, x21, x18, lsl #5
   12718:	mov	w5, #0x6d7c                	// #28028
   1271c:	ldrh	w11, [x4, x11]
   12720:	add	x2, x2, x12, lsl #1
   12724:	adrp	x4, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   12728:	ldrh	w2, [x2, x5]
   1272c:	ldr	x4, [x4, #3960]
   12730:	lsr	x11, x11, #4
   12734:	lsr	x2, x2, #4
   12738:	ldrb	w11, [x4, x11]
   1273c:	ldrb	w2, [x4, x2]
   12740:	add	w11, w10, w11
   12744:	add	w11, w11, w2
   12748:	cmp	w11, w3
   1274c:	b.cs	12764 <lzma_mode_is_supported@@XZ_5.0+0x157c>  // b.hs, b.nlast
   12750:	mov	w2, wzr
   12754:	str	w11, [x27, #144]
   12758:	str	wzr, [x27, #152]
   1275c:	strb	wzr, [x27, #132]
   12760:	b	12768 <lzma_mode_is_supported@@XZ_5.0+0x1580>
   12764:	mov	w2, #0xffffffff            	// #-1
   12768:	cmp	w0, w1
   1276c:	csel	w3, w0, w1, hi  // hi = pmore
   12770:	cmp	w3, #0x1
   12774:	b.hi	12788 <lzma_mode_is_supported@@XZ_5.0+0x15a0>  // b.pmore
   12778:	mov	w8, #0x1                   	// #1
   1277c:	str	w2, [x23]
   12780:	str	w8, [x22]
   12784:	b	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>
   12788:	mov	w11, #0xef4                 	// #3828
   1278c:	movk	w11, #0x1, lsl #16
   12790:	stp	w9, w13, [x27, #112]
   12794:	subs	w13, w3, #0x2
   12798:	mov	w9, w3
   1279c:	str	wzr, [x27, #148]
   127a0:	stp	w14, w17, [x27, #120]
   127a4:	str	x24, [sp, #64]
   127a8:	stp	x23, x22, [sp, #8]
   127ac:	str	w25, [sp, #76]
   127b0:	stur	x3, [x29, #-40]
   127b4:	b.eq	127f4 <lzma_mode_is_supported@@XZ_5.0+0x160c>  // b.none
   127b8:	add	x13, x13, #0x1
   127bc:	mov	w17, #0x2c                  	// #44
   127c0:	and	x14, x13, #0x1fffffffe
   127c4:	madd	x17, x9, x17, x11
   127c8:	sub	x9, x9, x14
   127cc:	add	x17, x21, x17
   127d0:	mov	w1, #0x40000000            	// #1073741824
   127d4:	mov	x2, x14
   127d8:	str	w1, [x17]
   127dc:	stur	w1, [x17, #-44]
   127e0:	subs	x2, x2, #0x2
   127e4:	sub	x17, x17, #0x58
   127e8:	b.ne	127d8 <lzma_mode_is_supported@@XZ_5.0+0x15f0>  // b.any
   127ec:	cmp	x13, x14
   127f0:	b.eq	12814 <lzma_mode_is_supported@@XZ_5.0+0x162c>  // b.none
   127f4:	mov	w13, #0x2c                  	// #44
   127f8:	madd	x11, x9, x13, x11
   127fc:	add	x11, x21, x11
   12800:	mov	w13, #0x40000000            	// #1073741824
   12804:	sub	w9, w9, #0x1
   12808:	cmp	w9, #0x1
   1280c:	str	w13, [x11], #-44
   12810:	b.hi	12804 <lzma_mode_is_supported@@XZ_5.0+0x161c>  // b.pmore
   12814:	add	x4, x21, x18, lsl #1
   12818:	mov	w2, #0x6d34                	// #27956
   1281c:	mov	w3, #0x6d4c                	// #27980
   12820:	mov	w5, #0x6d64                	// #28004
   12824:	add	x6, x21, x18, lsl #5
   12828:	mov	w19, #0x440                 	// #1088
   1282c:	mov	w7, #0x6d7c                	// #28028
   12830:	mov	w20, #0xbe4c                	// #48716
   12834:	mov	w17, #0xef4                 	// #3828
   12838:	mov	w18, #0xef8                 	// #3832
   1283c:	mov	w1, #0xefc                 	// #3836
   12840:	add	x2, x4, x2
   12844:	add	x3, x4, x3
   12848:	add	x4, x4, x5
   1284c:	mov	w5, #0xee8                 	// #3816
   12850:	add	x6, x6, x12, lsl #1
   12854:	madd	x19, x12, x19, x21
   12858:	mov	x11, xzr
   1285c:	add	x9, x21, #0x2e4
   12860:	sub	x13, x29, #0x20
   12864:	mov	w14, #0x2c                  	// #44
   12868:	movk	w17, #0x1, lsl #16
   1286c:	movk	w18, #0x1, lsl #16
   12870:	movk	w1, #0x1, lsl #16
   12874:	movk	w5, #0x1, lsl #16
   12878:	add	x6, x6, x7
   1287c:	add	x7, x19, x20
   12880:	mov	w19, #0x2                   	// #2
   12884:	mov	w20, w8
   12888:	stur	x9, [x29, #-56]
   1288c:	subs	w22, w20, #0x2
   12890:	b.cs	128a4 <lzma_mode_is_supported@@XZ_5.0+0x16bc>  // b.hs, b.nlast
   12894:	b	12974 <lzma_mode_is_supported@@XZ_5.0+0x178c>
   12898:	ldr	w20, [x13, x11, lsl #2]
   1289c:	subs	w22, w20, #0x2
   128a0:	b.cc	12974 <lzma_mode_is_supported@@XZ_5.0+0x178c>  // b.lo, b.ul, b.last
   128a4:	ldrh	w23, [x2]
   128a8:	lsr	x23, x23, #4
   128ac:	cbz	x11, 128d8 <lzma_mode_is_supported@@XZ_5.0+0x16f0>
   128b0:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   128b4:	ldrh	w24, [x3]
   128b8:	ldr	x9, [x9, #3960]
   128bc:	eor	x23, x23, #0x7f
   128c0:	cmp	x11, #0x1
   128c4:	lsr	x24, x24, #4
   128c8:	ldrb	w23, [x9, x23]
   128cc:	b.ne	128f8 <lzma_mode_is_supported@@XZ_5.0+0x1710>  // b.any
   128d0:	ldrb	w24, [x9, x24]
   128d4:	b	1291c <lzma_mode_is_supported@@XZ_5.0+0x1734>
   128d8:	ldrh	w24, [x6]
   128dc:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   128e0:	ldr	x9, [x9, #3960]
   128e4:	lsr	x24, x24, #4
   128e8:	eor	x24, x24, #0x7f
   128ec:	ldrb	w23, [x9, x23]
   128f0:	ldrb	w24, [x9, x24]
   128f4:	b	1291c <lzma_mode_is_supported@@XZ_5.0+0x1734>
   128f8:	eor	x24, x24, #0x7f
   128fc:	ldrh	w25, [x4]
   12900:	ldrb	w24, [x9, x24]
   12904:	sub	w26, w19, w11
   12908:	and	x26, x26, #0x7f0
   1290c:	eor	x25, x26, x25
   12910:	add	w24, w24, w23
   12914:	lsr	x23, x25, #4
   12918:	ldrb	w23, [x9, x23]
   1291c:	add	w23, w24, w23
   12920:	add	w23, w23, w10
   12924:	add	x22, x7, w22, uxtw #2
   12928:	b	1293c <lzma_mode_is_supported@@XZ_5.0+0x1754>
   1292c:	sub	w20, w20, #0x1
   12930:	cmp	w20, #0x1
   12934:	sub	x22, x22, #0x4
   12938:	b.ls	12974 <lzma_mode_is_supported@@XZ_5.0+0x178c>  // b.plast
   1293c:	umaddl	x24, w20, w14, x21
   12940:	ldr	w25, [x22]
   12944:	add	x24, x24, x17
   12948:	ldr	w26, [x24]
   1294c:	mov	w20, w20
   12950:	add	w25, w23, w25
   12954:	cmp	w25, w26
   12958:	b.cs	1292c <lzma_mode_is_supported@@XZ_5.0+0x1744>  // b.hs, b.nlast
   1295c:	str	w25, [x24]
   12960:	madd	x24, x20, x14, x21
   12964:	str	wzr, [x24, x18]
   12968:	str	w11, [x24, x1]
   1296c:	strb	wzr, [x24, x5]
   12970:	b	1292c <lzma_mode_is_supported@@XZ_5.0+0x1744>
   12974:	add	x11, x11, #0x1
   12978:	cmp	x11, #0x4
   1297c:	b.ne	12898 <lzma_mode_is_supported@@XZ_5.0+0x16b0>  // b.any
   12980:	cmp	w8, #0x2
   12984:	mov	w10, #0x2                   	// #2
   12988:	csinc	w17, w10, w8, cc  // cc = lo, ul, last
   1298c:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   12990:	ldr	x8, [x8, #3960]
   12994:	cmp	w17, w0
   12998:	b.hi	12b0c <lzma_mode_is_supported@@XZ_5.0+0x1924>  // b.pmore
   1299c:	ldrb	w10, [x8, x16]
   129a0:	mov	w8, #0xffffffff            	// #-1
   129a4:	add	w8, w8, #0x1
   129a8:	add	x11, x21, w8, uxtw #3
   129ac:	ldr	w11, [x11, #756]
   129b0:	cmp	w17, w11
   129b4:	b.hi	129a4 <lzma_mode_is_supported@@XZ_5.0+0x17bc>  // b.pmore
   129b8:	mov	w20, #0x440                 	// #1088
   129bc:	madd	x12, x12, x20, x21
   129c0:	adrp	x20, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   129c4:	ldur	w11, [x29, #-12]
   129c8:	ldr	x20, [x20, #4008]
   129cc:	mov	w18, #0xef4                 	// #3828
   129d0:	mov	w0, #0xef8                 	// #3832
   129d4:	mov	w1, #0xefc                 	// #3836
   129d8:	mov	w2, #0xee8                 	// #3816
   129dc:	mov	w22, #0x290                 	// #656
   129e0:	mov	w23, #0xe98                 	// #3736
   129e4:	add	w10, w10, w15
   129e8:	mov	w13, #0x3                   	// #3
   129ec:	mov	w15, #0x7604                	// #30212
   129f0:	mov	w16, #0x2c                  	// #44
   129f4:	movk	w18, #0x1, lsl #16
   129f8:	movk	w0, #0x1, lsl #16
   129fc:	movk	w1, #0x1, lsl #16
   12a00:	movk	w2, #0x1, lsl #16
   12a04:	mov	w3, #0x1e                  	// #30
   12a08:	mov	w4, #0x12                  	// #18
   12a0c:	mov	w5, #0x3c                  	// #60
   12a10:	mov	w6, #0x24                  	// #36
   12a14:	mov	w7, #0x6                   	// #6
   12a18:	mov	w19, #0xc                   	// #12
   12a1c:	movk	w22, #0x1, lsl #16
   12a20:	movk	w23, #0x1, lsl #16
   12a24:	b	12a2c <lzma_mode_is_supported@@XZ_5.0+0x1844>
   12a28:	add	w17, w17, #0x1
   12a2c:	add	x24, x21, w8, uxtw #3
   12a30:	ldr	w25, [x24, #760]
   12a34:	sub	w24, w17, #0x2
   12a38:	cmp	w17, #0x6
   12a3c:	csel	w28, w24, w13, cc  // cc = lo, ul, last
   12a40:	cmp	w25, #0x7f
   12a44:	mov	w26, w8
   12a48:	b.hi	12a68 <lzma_mode_is_supported@@XZ_5.0+0x1880>  // b.pmore
   12a4c:	mov	w28, w28
   12a50:	add	x28, x21, x28, lsl #9
   12a54:	mov	w9, #0x690                 	// #1680
   12a58:	add	x28, x28, x25, lsl #2
   12a5c:	movk	w9, #0x1, lsl #16
   12a60:	ldr	w28, [x28, x9]
   12a64:	b	12aac <lzma_mode_is_supported@@XZ_5.0+0x18c4>
   12a68:	cmp	w25, #0x0
   12a6c:	csel	w30, w4, w3, ge  // ge = tcont
   12a70:	csel	x9, x6, x5, ge  // ge = tcont
   12a74:	cmp	w25, #0x80, lsl #12
   12a78:	csel	w30, w7, w30, cc  // cc = lo, ul, last
   12a7c:	lsr	x30, x25, x30
   12a80:	ldrb	w30, [x20, x30]
   12a84:	mov	w28, w28
   12a88:	csel	x9, x19, x9, cc  // cc = lo, ul, last
   12a8c:	add	x28, x21, x28, lsl #8
   12a90:	add	x9, x9, x30
   12a94:	and	x30, x25, #0xf
   12a98:	add	x30, x21, x30, lsl #2
   12a9c:	add	x9, x28, x9, lsl #2
   12aa0:	ldr	w9, [x9, x22]
   12aa4:	ldr	w28, [x30, x23]
   12aa8:	add	w28, w28, w9
   12aac:	add	x9, x12, w24, uxtw #2
   12ab0:	umaddl	x30, w17, w16, x21
   12ab4:	ldr	w9, [x9, x15]
   12ab8:	add	x30, x30, x18
   12abc:	ldr	w14, [x30]
   12ac0:	add	w28, w10, w28
   12ac4:	add	w28, w28, w9
   12ac8:	cmp	w28, w14
   12acc:	b.cs	12aec <lzma_mode_is_supported@@XZ_5.0+0x1904>  // b.hs, b.nlast
   12ad0:	mov	w9, w17
   12ad4:	add	w14, w25, #0x4
   12ad8:	madd	x9, x9, x16, x21
   12adc:	str	w28, [x30]
   12ae0:	str	wzr, [x9, x0]
   12ae4:	str	w14, [x9, x1]
   12ae8:	strb	wzr, [x9, x2]
   12aec:	add	x9, x21, x26, lsl #3
   12af0:	ldr	w9, [x9, #756]
   12af4:	add	w17, w24, #0x2
   12af8:	cmp	w17, w9
   12afc:	b.ne	12a28 <lzma_mode_is_supported@@XZ_5.0+0x1840>  // b.any
   12b00:	add	w8, w8, #0x1
   12b04:	cmp	w8, w11
   12b08:	b.ne	12a28 <lzma_mode_is_supported@@XZ_5.0+0x1840>  // b.any
   12b0c:	ldur	x20, [x29, #-40]
   12b10:	cmn	w20, #0x1
   12b14:	b.eq	14020 <lzma_mode_is_supported@@XZ_5.0+0x2e38>  // b.none
   12b18:	ldur	x8, [x29, #-56]
   12b1c:	cmp	w20, #0x2
   12b20:	mov	w24, #0x1                   	// #1
   12b24:	ldr	q0, [x8]
   12b28:	stur	q0, [x29, #-32]
   12b2c:	b.cc	13f4c <lzma_mode_is_supported@@XZ_5.0+0x2d64>  // b.lo, b.ul, b.last
   12b30:	add	x8, x21, #0xb84
   12b34:	str	x8, [sp, #56]
   12b38:	add	x8, x21, #0x2f4
   12b3c:	ldr	w10, [sp, #76]
   12b40:	str	x8, [sp, #48]
   12b44:	mov	w8, #0xf4c                 	// #3916
   12b48:	movk	w8, #0x1, lsl #16
   12b4c:	mov	w9, #0xf20                 	// #3872
   12b50:	movk	w9, #0x1, lsl #16
   12b54:	add	x8, x21, x8
   12b58:	mov	w23, #0xbe4c                	// #48716
   12b5c:	add	w10, w10, #0x1
   12b60:	mov	w22, #0xef4                 	// #3828
   12b64:	str	x8, [sp, #128]
   12b68:	add	x8, x21, x9
   12b6c:	stur	w10, [x29, #-128]
   12b70:	mov	w10, #0xffe                 	// #4094
   12b74:	mov	w19, #0x2c                  	// #44
   12b78:	movk	w22, #0x1, lsl #16
   12b7c:	mov	w25, #0x440                 	// #1088
   12b80:	mov	w28, #0x40000000            	// #1073741824
   12b84:	str	x8, [sp, #168]
   12b88:	add	x8, x21, x23
   12b8c:	mov	w24, #0x1                   	// #1
   12b90:	stur	wzr, [x29, #-56]
   12b94:	str	w10, [sp, #148]
   12b98:	str	x8, [sp, #24]
   12b9c:	b	12bd0 <lzma_mode_is_supported@@XZ_5.0+0x19e8>
   12ba0:	ldr	w8, [sp, #148]
   12ba4:	ldr	x24, [sp, #136]
   12ba8:	sub	w8, w8, #0x1
   12bac:	str	w8, [sp, #148]
   12bb0:	ldur	w8, [x29, #-128]
   12bb4:	cmp	x24, w20, uxtw
   12bb8:	add	w8, w8, #0x1
   12bbc:	stur	w8, [x29, #-128]
   12bc0:	ldur	w8, [x29, #-56]
   12bc4:	add	w8, w8, #0x1
   12bc8:	stur	w8, [x29, #-56]
   12bcc:	b.cs	13f4c <lzma_mode_is_supported@@XZ_5.0+0x2d64>  // b.hs, b.nlast
   12bd0:	ldp	x1, x26, [sp, #56]
   12bd4:	ldr	x2, [sp, #48]
   12bd8:	mov	x0, x26
   12bdc:	bl	dbdc <lzma_mf_is_supported@@XZ_5.0+0x2c>
   12be0:	ldr	w8, [x26, #96]
   12be4:	str	w0, [x21, #2952]
   12be8:	cmp	w0, w8
   12bec:	stur	w8, [x29, #-152]
   12bf0:	b.cs	13f4c <lzma_mode_is_supported@@XZ_5.0+0x2d64>  // b.hs, b.nlast
   12bf4:	ldr	x7, [x26]
   12bf8:	ldr	w12, [x26, #24]
   12bfc:	ldr	w10, [x26, #36]
   12c00:	mov	w8, #0xef8                 	// #3832
   12c04:	mov	w11, #0xee8                 	// #3816
   12c08:	madd	x9, x24, x19, x21
   12c0c:	movk	w8, #0x1, lsl #16
   12c10:	movk	w11, #0x1, lsl #16
   12c14:	ldr	w8, [x9, x8]
   12c18:	ldrb	w9, [x9, x11]
   12c1c:	add	x11, x7, x12
   12c20:	ldr	w6, [x21, #2948]
   12c24:	sub	w10, w10, w12
   12c28:	sub	x16, x11, #0x1
   12c2c:	mov	w11, #0xfff                 	// #4095
   12c30:	str	x12, [sp, #104]
   12c34:	add	w12, w10, #0x1
   12c38:	sub	w11, w11, w24
   12c3c:	cmp	w12, w11
   12c40:	csinc	w10, w11, w10, cs  // cs = hs, nlast
   12c44:	str	w12, [sp, #92]
   12c48:	stur	w10, [x29, #-60]
   12c4c:	cbz	w9, 12c9c <lzma_mode_is_supported@@XZ_5.0+0x1ab4>
   12c50:	mov	w11, #0xee9                 	// #3817
   12c54:	madd	x10, x24, x19, x21
   12c58:	movk	w11, #0x1, lsl #16
   12c5c:	ldrb	w10, [x10, x11]
   12c60:	sub	w8, w8, #0x1
   12c64:	cbz	w10, 12cbc <lzma_mode_is_supported@@XZ_5.0+0x1ad4>
   12c68:	mov	w10, #0xee4                 	// #3812
   12c6c:	movk	w10, #0x1, lsl #16
   12c70:	add	x10, x21, x10
   12c74:	madd	x11, x24, x19, x10
   12c78:	ldp	w12, w11, [x11, #8]
   12c7c:	mul	x12, x12, x19
   12c80:	ldr	w10, [x10, x12]
   12c84:	cmp	w11, #0x3
   12c88:	b.hi	12cd0 <lzma_mode_is_supported@@XZ_5.0+0x1ae8>  // b.pmore
   12c8c:	cmp	w10, #0x7
   12c90:	mov	w10, #0xb                   	// #11
   12c94:	mov	w11, #0x8                   	// #8
   12c98:	b	12cdc <lzma_mode_is_supported@@XZ_5.0+0x1af4>
   12c9c:	mov	w11, #0xee4                 	// #3812
   12ca0:	madd	x10, x8, x19, x21
   12ca4:	movk	w11, #0x1, lsl #16
   12ca8:	ldr	w10, [x10, x11]
   12cac:	ldur	w26, [x29, #-152]
   12cb0:	mov	w5, #0x600                 	// #1536
   12cb4:	sub	x13, x29, #0x20
   12cb8:	b	12d0c <lzma_mode_is_supported@@XZ_5.0+0x1b24>
   12cbc:	mov	w11, #0xee4                 	// #3812
   12cc0:	umaddl	x10, w8, w19, x21
   12cc4:	movk	w11, #0x1, lsl #16
   12cc8:	ldr	w10, [x10, x11]
   12ccc:	b	12ce0 <lzma_mode_is_supported@@XZ_5.0+0x1af8>
   12cd0:	cmp	w10, #0x7
   12cd4:	mov	w10, #0xa                   	// #10
   12cd8:	mov	w11, #0x7                   	// #7
   12cdc:	csel	w10, w11, w10, cc  // cc = lo, ul, last
   12ce0:	ldur	w26, [x29, #-152]
   12ce4:	cmp	w10, #0xa
   12ce8:	mov	w11, #0xfffffffa            	// #-6
   12cec:	mov	w12, #0xfffffffd            	// #-3
   12cf0:	csel	w11, w12, w11, cc  // cc = lo, ul, last
   12cf4:	cmp	w10, #0x4
   12cf8:	add	w10, w11, w10
   12cfc:	mov	w5, #0x600                 	// #1536
   12d00:	sub	x13, x29, #0x20
   12d04:	csel	w10, wzr, w10, cc  // cc = lo, ul, last
   12d08:	mov	w8, w8
   12d0c:	sub	x11, x24, #0x1
   12d10:	cmp	x8, x11
   12d14:	ldr	w11, [sp, #76]
   12d18:	stur	x16, [x29, #-96]
   12d1c:	str	w0, [sp, #88]
   12d20:	add	w11, w24, w11
   12d24:	stur	w11, [x29, #-156]
   12d28:	b.ne	12d60 <lzma_mode_is_supported@@XZ_5.0+0x1b78>  // b.any
   12d2c:	mov	w9, #0xefc                 	// #3836
   12d30:	madd	x8, x24, x19, x21
   12d34:	movk	w9, #0x1, lsl #16
   12d38:	ldr	w8, [x8, x9]
   12d3c:	cbz	w8, 12e80 <lzma_mode_is_supported@@XZ_5.0+0x1c98>
   12d40:	cmp	w10, #0xa
   12d44:	mov	w8, #0xfffffffa            	// #-6
   12d48:	mov	w9, #0xfffffffd            	// #-3
   12d4c:	csel	w8, w9, w8, cc  // cc = lo, ul, last
   12d50:	add	w8, w8, w10
   12d54:	cmp	w10, #0x4
   12d58:	csel	w15, wzr, w8, cc  // cc = lo, ul, last
   12d5c:	b	12ec8 <lzma_mode_is_supported@@XZ_5.0+0x1ce0>
   12d60:	mov	w14, #0xf00                 	// #3840
   12d64:	movk	w14, #0x1, lsl #16
   12d68:	cbz	w9, 12db8 <lzma_mode_is_supported@@XZ_5.0+0x1bd0>
   12d6c:	mov	w11, #0xee9                 	// #3817
   12d70:	madd	x9, x24, x19, x21
   12d74:	movk	w11, #0x1, lsl #16
   12d78:	ldrb	w9, [x9, x11]
   12d7c:	cbz	w9, 12db8 <lzma_mode_is_supported@@XZ_5.0+0x1bd0>
   12d80:	mov	w9, #0xef0                 	// #3824
   12d84:	madd	x8, x24, x19, x21
   12d88:	movk	w9, #0x1, lsl #16
   12d8c:	mov	w11, #0xeec                 	// #3820
   12d90:	ldr	w9, [x8, x9]
   12d94:	movk	w11, #0x1, lsl #16
   12d98:	ldr	w8, [x8, x11]
   12d9c:	cmp	w10, #0x7
   12da0:	mov	w10, #0xb                   	// #11
   12da4:	mov	w11, #0x8                   	// #8
   12da8:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   12dac:	cmp	w9, #0x3
   12db0:	b.ls	12de0 <lzma_mode_is_supported@@XZ_5.0+0x1bf8>  // b.plast
   12db4:	b	12ea4 <lzma_mode_is_supported@@XZ_5.0+0x1cbc>
   12db8:	mov	w11, #0xefc                 	// #3836
   12dbc:	madd	x9, x24, x19, x21
   12dc0:	movk	w11, #0x1, lsl #16
   12dc4:	ldr	w9, [x9, x11]
   12dc8:	cmp	w9, #0x3
   12dcc:	b.hi	12e94 <lzma_mode_is_supported@@XZ_5.0+0x1cac>  // b.pmore
   12dd0:	cmp	w10, #0x7
   12dd4:	mov	w10, #0xb                   	// #11
   12dd8:	mov	w11, #0x8                   	// #8
   12ddc:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   12de0:	madd	x10, x8, x19, x21
   12de4:	add	x10, x10, w9, uxtw #2
   12de8:	ldr	w10, [x10, x14]
   12dec:	stur	w10, [x29, #-32]
   12df0:	mov	w10, #0x1                   	// #1
   12df4:	cbz	w9, 12e20 <lzma_mode_is_supported@@XZ_5.0+0x1c38>
   12df8:	sub	w11, w10, #0x1
   12dfc:	madd	x12, x8, x19, x21
   12e00:	add	x11, x12, w11, uxtw #2
   12e04:	ldr	w11, [x11, x14]
   12e08:	str	w11, [x13, w10, uxtw #2]
   12e0c:	add	w10, w10, #0x1
   12e10:	cmp	w10, w9
   12e14:	b.ls	12df8 <lzma_mode_is_supported@@XZ_5.0+0x1c10>  // b.plast
   12e18:	cmp	w10, #0x3
   12e1c:	b.hi	12ec8 <lzma_mode_is_supported@@XZ_5.0+0x1ce0>  // b.pmore
   12e20:	mov	w9, w10
   12e24:	add	x0, x13, w10, uxtw #2
   12e28:	cmp	w10, #0x3
   12e2c:	mov	w10, #0xb                   	// #11
   12e30:	madd	x8, x8, x10, x9
   12e34:	mov	w10, #0x3                   	// #3
   12e38:	csel	x10, x9, x10, hi  // hi = pmore
   12e3c:	add	x8, x21, x8, lsl #2
   12e40:	sub	x9, x10, x9
   12e44:	add	x1, x8, x14
   12e48:	lsl	x8, x9, #2
   12e4c:	add	x2, x8, #0x4
   12e50:	mov	w26, w6
   12e54:	str	x7, [sp, #80]
   12e58:	mov	w23, w15
   12e5c:	bl	3040 <memcpy@plt>
   12e60:	ldr	x7, [sp, #80]
   12e64:	ldur	x16, [x29, #-96]
   12e68:	mov	w6, w26
   12e6c:	ldur	w26, [x29, #-152]
   12e70:	mov	w15, w23
   12e74:	mov	w23, #0xbe4c                	// #48716
   12e78:	mov	w5, #0x600                 	// #1536
   12e7c:	b	12ec8 <lzma_mode_is_supported@@XZ_5.0+0x1ce0>
   12e80:	cmp	w10, #0x7
   12e84:	mov	w8, #0xb                   	// #11
   12e88:	mov	w9, #0x9                   	// #9
   12e8c:	csel	w15, w9, w8, cc  // cc = lo, ul, last
   12e90:	b	12ec8 <lzma_mode_is_supported@@XZ_5.0+0x1ce0>
   12e94:	cmp	w10, #0x7
   12e98:	mov	w10, #0xa                   	// #10
   12e9c:	mov	w11, #0x7                   	// #7
   12ea0:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   12ea4:	mov	w11, #0xf08                 	// #3848
   12ea8:	madd	x8, x8, x19, x21
   12eac:	movk	w11, #0x1, lsl #16
   12eb0:	ldr	x10, [x8, x14]
   12eb4:	ldr	w8, [x8, x11]
   12eb8:	sub	w9, w9, #0x4
   12ebc:	stur	w9, [x29, #-32]
   12ec0:	stur	x10, [x29, #-28]
   12ec4:	stur	w8, [x29, #-20]
   12ec8:	ldur	q0, [x29, #-32]
   12ecc:	mov	w9, #0xee4                 	// #3812
   12ed0:	madd	x8, x24, x19, x21
   12ed4:	movk	w9, #0x1, lsl #16
   12ed8:	mov	w10, w15
   12edc:	add	x8, x8, x9
   12ee0:	mov	x11, x16
   12ee4:	str	x10, [sp, #160]
   12ee8:	str	w15, [x8]
   12eec:	stur	q0, [x8, #28]
   12ef0:	cmp	w15, #0x6
   12ef4:	add	x9, x21, x10, lsl #5
   12ef8:	ldr	w15, [x8, #16]
   12efc:	ldrb	w10, [x16]
   12f00:	ldrb	w8, [x11, #-1]!
   12f04:	ldr	w12, [x21, #2960]
   12f08:	ldur	w16, [x29, #-156]
   12f0c:	mov	w13, #0x6b9c                	// #27548
   12f10:	ldr	w14, [x21, #2968]
   12f14:	stp	x11, x12, [x29, #-80]
   12f18:	and	w12, w12, w16
   12f1c:	add	x9, x9, w12, uxtw #1
   12f20:	ldrh	w9, [x9, x13]
   12f24:	ldr	w17, [x21, #2964]
   12f28:	fmov	w18, s0
   12f2c:	sub	x11, x11, x18
   12f30:	stur	w14, [x29, #-108]
   12f34:	and	w14, w14, w16
   12f38:	mov	w13, #0x8                   	// #8
   12f3c:	lsr	x16, x9, #4
   12f40:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   12f44:	sub	w0, w13, w17
   12f48:	ldrb	w13, [x11]
   12f4c:	ldr	x9, [x9, #3960]
   12f50:	lsl	w11, w14, w17
   12f54:	lsr	w8, w8, w0
   12f58:	add	w8, w8, w11
   12f5c:	ldrb	w9, [x9, x16]
   12f60:	mov	w14, wzr
   12f64:	stur	x17, [x29, #-120]
   12f68:	stur	w0, [x29, #-124]
   12f6c:	add	w11, w15, w9
   12f70:	orr	w9, w10, #0x100
   12f74:	b.hi	12fbc <lzma_mode_is_supported@@XZ_5.0+0x1dd4>  // b.pmore
   12f78:	adrp	x2, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   12f7c:	ldr	x2, [x2, #3960]
   12f80:	and	w17, w9, #0x1
   12f84:	lsr	w9, w9, #1
   12f88:	lsl	w0, w9, #1
   12f8c:	madd	x1, x8, x5, x21
   12f90:	add	x0, x1, x0
   12f94:	ldrh	w0, [x0, #2972]
   12f98:	neg	w17, w17
   12f9c:	and	w17, w17, #0x7f0
   12fa0:	cmp	w9, #0x1
   12fa4:	eor	w17, w17, w0
   12fa8:	lsr	x17, x17, #4
   12fac:	ldrb	w17, [x2, x17]
   12fb0:	add	w14, w14, w17
   12fb4:	b.ne	12f80 <lzma_mode_is_supported@@XZ_5.0+0x1d98>  // b.any
   12fb8:	b	13018 <lzma_mode_is_supported@@XZ_5.0+0x1e30>
   12fbc:	adrp	x4, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   12fc0:	ldr	x4, [x4, #3960]
   12fc4:	mov	w17, #0x100                 	// #256
   12fc8:	mov	w0, w13
   12fcc:	lsl	w0, w0, #1
   12fd0:	add	w1, w17, w9, lsr #8
   12fd4:	and	w3, w0, w17
   12fd8:	madd	x2, x8, x5, x21
   12fdc:	add	w1, w1, w3
   12fe0:	add	x1, x2, w1, uxtw #1
   12fe4:	ldrh	w1, [x1, #2972]
   12fe8:	ubfx	w2, w9, #7, #1
   12fec:	neg	w2, w2
   12ff0:	and	w2, w2, #0x7f0
   12ff4:	eor	w1, w2, w1
   12ff8:	lsr	x1, x1, #4
   12ffc:	ldrb	w1, [x4, x1]
   13000:	cmp	w9, #0x8, lsl #12
   13004:	lsl	w9, w9, #1
   13008:	eor	w2, w9, w0
   1300c:	add	w14, w14, w1
   13010:	bic	w17, w17, w2
   13014:	b.cc	12fcc <lzma_mode_is_supported@@XZ_5.0+0x1de4>  // b.lo, b.ul, b.last
   13018:	add	x17, x24, #0x1
   1301c:	madd	x8, x17, x19, x21
   13020:	add	x9, x8, x22
   13024:	ldr	w8, [x9]
   13028:	add	w14, w11, w14
   1302c:	str	x17, [sp, #136]
   13030:	cmp	w14, w8
   13034:	b.cs	13074 <lzma_mode_is_supported@@XZ_5.0+0x1e8c>  // b.hs, b.nlast
   13038:	mov	w11, #0xef8                 	// #3832
   1303c:	madd	x8, x17, x19, x21
   13040:	movk	w11, #0x1, lsl #16
   13044:	str	w14, [x9]
   13048:	str	w24, [x8, x11]
   1304c:	mov	w11, #0xefc                 	// #3836
   13050:	movk	w11, #0x1, lsl #16
   13054:	mov	w17, #0xffffffff            	// #-1
   13058:	str	w17, [x8, x11]
   1305c:	mov	w11, #0xee8                 	// #3816
   13060:	movk	w11, #0x1, lsl #16
   13064:	strb	wzr, [x8, x11]
   13068:	mov	w11, #0x1                   	// #1
   1306c:	mov	w8, w14
   13070:	b	13078 <lzma_mode_is_supported@@XZ_5.0+0x1e90>
   13074:	mov	w11, wzr
   13078:	ldr	x17, [sp, #160]
   1307c:	mov	w0, #0x6d1c                	// #27932
   13080:	ldur	x4, [x29, #-96]
   13084:	eor	x16, x16, #0x7f
   13088:	add	x17, x21, x17, lsl #1
   1308c:	ldrh	w17, [x17, x0]
   13090:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13094:	ldr	x0, [x0, #3960]
   13098:	cmp	w13, w10
   1309c:	lsr	x2, x17, #4
   130a0:	eor	x17, x2, #0x7f
   130a4:	ldrb	w16, [x0, x16]
   130a8:	ldrb	w17, [x0, x17]
   130ac:	add	w1, w15, w16
   130b0:	add	w15, w1, w17
   130b4:	stur	w15, [x29, #-88]
   130b8:	b.ne	13168 <lzma_mode_is_supported@@XZ_5.0+0x1f80>  // b.any
   130bc:	ldr	x17, [sp, #136]
   130c0:	mov	w16, #0xef8                 	// #3832
   130c4:	movk	w16, #0x1, lsl #16
   130c8:	madd	x15, x17, x19, x21
   130cc:	add	x15, x15, x16
   130d0:	ldr	w16, [x15]
   130d4:	cmp	x24, x16
   130d8:	b.ls	130f0 <lzma_mode_is_supported@@XZ_5.0+0x1f08>  // b.plast
   130dc:	madd	x16, x17, x19, x21
   130e0:	mov	w17, #0xefc                 	// #3836
   130e4:	movk	w17, #0x1, lsl #16
   130e8:	ldr	w16, [x16, x17]
   130ec:	cbz	w16, 13168 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   130f0:	ldr	x17, [sp, #160]
   130f4:	mov	w0, #0x6d34                	// #27956
   130f8:	add	x16, x21, x17, lsl #1
   130fc:	add	x17, x21, x17, lsl #5
   13100:	ldrh	w16, [x16, x0]
   13104:	add	x17, x17, x12, lsl #1
   13108:	mov	w0, #0x6d7c                	// #28028
   1310c:	ldrh	w17, [x17, x0]
   13110:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13114:	ldr	x0, [x0, #3960]
   13118:	lsr	x16, x16, #4
   1311c:	lsr	x17, x17, #4
   13120:	ldrb	w16, [x0, x16]
   13124:	ldrb	w17, [x0, x17]
   13128:	ldur	w0, [x29, #-88]
   1312c:	add	w16, w0, w16
   13130:	add	w16, w16, w17
   13134:	cmp	w16, w8
   13138:	b.hi	13168 <lzma_mode_is_supported@@XZ_5.0+0x1f80>  // b.pmore
   1313c:	ldr	x8, [sp, #136]
   13140:	str	w16, [x9]
   13144:	mov	w9, #0xefc                 	// #3836
   13148:	movk	w9, #0x1, lsl #16
   1314c:	madd	x8, x8, x19, x21
   13150:	str	w24, [x15]
   13154:	str	wzr, [x8, x9]
   13158:	mov	w9, #0xee8                 	// #3816
   1315c:	movk	w9, #0x1, lsl #16
   13160:	mov	w11, #0x1                   	// #1
   13164:	strb	wzr, [x8, x9]
   13168:	ldur	w9, [x29, #-60]
   1316c:	cmp	w9, #0x2
   13170:	b.cc	12ba0 <lzma_mode_is_supported@@XZ_5.0+0x19b8>  // b.lo, b.ul, b.last
   13174:	cmp	w13, w10
   13178:	cset	w8, eq  // eq = none
   1317c:	cmp	w9, w26
   13180:	orr	w8, w8, w11
   13184:	csel	w30, w9, w26, cc  // cc = lo, ul, last
   13188:	sub	x3, x29, #0x20
   1318c:	stur	w6, [x29, #-84]
   13190:	str	w1, [sp, #44]
   13194:	str	x2, [sp, #32]
   13198:	tbnz	w8, #0, 13204 <lzma_mode_is_supported@@XZ_5.0+0x201c>
   1319c:	add	w11, w26, #0x1
   131a0:	cmp	w11, w9
   131a4:	csinc	w10, w9, w26, hi  // hi = pmore
   131a8:	cmp	w10, #0x2
   131ac:	b.cc	13204 <lzma_mode_is_supported@@XZ_5.0+0x201c>  // b.lo, b.ul, b.last
   131b0:	ldr	w13, [sp, #148]
   131b4:	ldr	w16, [sp, #92]
   131b8:	ldr	x15, [sp, #104]
   131bc:	mov	x8, xzr
   131c0:	cmp	w13, w16
   131c4:	csel	w13, w13, w16, cc  // cc = lo, ul, last
   131c8:	sub	x9, x15, x18
   131cc:	cmp	w13, w11
   131d0:	add	x9, x7, x9
   131d4:	csel	w11, w13, w11, cc  // cc = lo, ul, last
   131d8:	sub	x9, x9, #0x1
   131dc:	sub	w11, w11, #0x1
   131e0:	add	x13, x7, x15
   131e4:	ldrb	w15, [x13, x8]
   131e8:	ldrb	w16, [x9, x8]
   131ec:	cmp	w15, w16
   131f0:	b.ne	13838 <lzma_mode_is_supported@@XZ_5.0+0x2650>  // b.any
   131f4:	add	x8, x8, #0x1
   131f8:	cmp	w11, w8
   131fc:	b.ne	131e4 <lzma_mode_is_supported@@XZ_5.0+0x1ffc>  // b.any
   13200:	b	1383c <lzma_mode_is_supported@@XZ_5.0+0x2654>
   13204:	ldur	x5, [x29, #-80]
   13208:	ldr	x10, [sp, #160]
   1320c:	mov	x2, xzr
   13210:	str	x7, [sp, #80]
   13214:	stur	w30, [x29, #-148]
   13218:	add	x8, x21, x10, lsl #1
   1321c:	add	x9, x21, x10, lsl #5
   13220:	cmp	w10, #0x7
   13224:	ldr	x10, [sp, #104]
   13228:	add	x11, x7, x10
   1322c:	ldr	x10, [sp, #24]
   13230:	add	x17, x11, #0x1
   13234:	stur	x11, [x29, #-144]
   13238:	madd	x10, x12, x25, x10
   1323c:	stur	x10, [x29, #-104]
   13240:	mov	w10, #0x6d34                	// #27956
   13244:	add	x10, x8, x10
   13248:	stur	x10, [x29, #-136]
   1324c:	mov	w10, #0x6d4c                	// #27980
   13250:	add	x10, x8, x10
   13254:	str	x10, [sp, #152]
   13258:	mov	w10, #0x6d64                	// #28004
   1325c:	add	x8, x8, x10
   13260:	str	x8, [sp, #96]
   13264:	add	x8, x9, x12, lsl #1
   13268:	mov	w9, #0xb                   	// #11
   1326c:	mov	w10, #0x8                   	// #8
   13270:	csel	x9, x10, x9, cc  // cc = lo, ul, last
   13274:	str	x9, [sp, #120]
   13278:	ldr	w9, [sp, #148]
   1327c:	mov	w10, #0x6d7c                	// #28028
   13280:	add	x8, x8, x10
   13284:	str	x8, [sp, #112]
   13288:	cmp	w26, w9
   1328c:	csel	w8, w26, w9, cc  // cc = lo, ul, last
   13290:	ldr	w9, [sp, #92]
   13294:	cmp	w8, w9
   13298:	csel	w8, w8, w9, cc  // cc = lo, ul, last
   1329c:	sub	w7, w8, #0x2
   132a0:	mov	w8, #0x2                   	// #2
   132a4:	stur	w8, [x29, #-40]
   132a8:	mov	w8, w18
   132ac:	sub	x14, x5, x8
   132b0:	ldrb	w9, [x4]
   132b4:	ldrb	w10, [x14]
   132b8:	cmp	w9, w10
   132bc:	b.ne	13310 <lzma_mode_is_supported@@XZ_5.0+0x2128>  // b.any
   132c0:	ldrb	w9, [x4, #1]
   132c4:	ldrb	w10, [x14, #1]
   132c8:	cmp	w9, w10
   132cc:	b.ne	13310 <lzma_mode_is_supported@@XZ_5.0+0x2128>  // b.any
   132d0:	cmp	w30, #0x3
   132d4:	neg	x10, x8
   132d8:	b.cc	1332c <lzma_mode_is_supported@@XZ_5.0+0x2144>  // b.lo, b.ul, b.last
   132dc:	ldur	x9, [x29, #-144]
   132e0:	ldur	w5, [x29, #-40]
   132e4:	mov	x8, xzr
   132e8:	add	x9, x9, x10
   132ec:	ldrb	w11, [x17, x8]
   132f0:	ldrb	w13, [x9, x8]
   132f4:	cmp	w11, w13
   132f8:	b.ne	13338 <lzma_mode_is_supported@@XZ_5.0+0x2150>  // b.any
   132fc:	add	x8, x8, #0x1
   13300:	cmp	w7, w8
   13304:	b.ne	132ec <lzma_mode_is_supported@@XZ_5.0+0x2104>  // b.any
   13308:	mov	w1, w30
   1330c:	b	1333c <lzma_mode_is_supported@@XZ_5.0+0x2154>
   13310:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13314:	ldr	x14, [x14, #3960]
   13318:	add	x2, x2, #0x1
   1331c:	cmp	x2, #0x4
   13320:	b.eq	137bc <lzma_mode_is_supported@@XZ_5.0+0x25d4>  // b.none
   13324:	ldr	w18, [x3, x2, lsl #2]
   13328:	b	132a8 <lzma_mode_is_supported@@XZ_5.0+0x20c0>
   1332c:	ldur	w5, [x29, #-40]
   13330:	mov	w1, #0x2                   	// #2
   13334:	b	1333c <lzma_mode_is_supported@@XZ_5.0+0x2154>
   13338:	add	w1, w8, #0x2
   1333c:	add	w18, w1, w24
   13340:	cmp	w20, w18
   13344:	b.cs	133b8 <lzma_mode_is_supported@@XZ_5.0+0x21d0>  // b.hs, b.nlast
   13348:	mov	w15, w20
   1334c:	mov	w8, w18
   13350:	sub	x9, x8, x15
   13354:	cmp	x9, #0x2
   13358:	b.cs	13364 <lzma_mode_is_supported@@XZ_5.0+0x217c>  // b.hs, b.nlast
   1335c:	mov	x8, x15
   13360:	b	13398 <lzma_mode_is_supported@@XZ_5.0+0x21b0>
   13364:	ldr	x8, [sp, #128]
   13368:	and	x11, x9, #0xfffffffffffffffe
   1336c:	add	w16, w24, w1
   13370:	madd	x13, x15, x19, x8
   13374:	add	x8, x11, x15
   13378:	sub	x15, x16, x15
   1337c:	and	x15, x15, #0xfffffffffffffffe
   13380:	stur	w28, [x13, #-44]
   13384:	str	w28, [x13], #88
   13388:	subs	x15, x15, #0x2
   1338c:	b.ne	13380 <lzma_mode_is_supported@@XZ_5.0+0x2198>  // b.any
   13390:	cmp	x9, x11
   13394:	b.eq	133b4 <lzma_mode_is_supported@@XZ_5.0+0x21cc>  // b.none
   13398:	ldr	x11, [sp, #168]
   1339c:	add	w9, w24, w1
   133a0:	sub	x9, x9, x8
   133a4:	madd	x8, x8, x19, x11
   133a8:	subs	x9, x9, #0x1
   133ac:	str	w28, [x8], #44
   133b0:	b.ne	133a8 <lzma_mode_is_supported@@XZ_5.0+0x21c0>  // b.any
   133b4:	mov	w20, w18
   133b8:	ldur	x8, [x29, #-136]
   133bc:	ldrh	w8, [x8]
   133c0:	lsr	x8, x8, #4
   133c4:	cbz	x2, 133f4 <lzma_mode_is_supported@@XZ_5.0+0x220c>
   133c8:	ldr	x9, [sp, #152]
   133cc:	adrp	x15, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   133d0:	eor	x8, x8, #0x7f
   133d4:	cmp	x2, #0x1
   133d8:	ldrh	w9, [x9]
   133dc:	ldr	x15, [x15, #3960]
   133e0:	lsr	x9, x9, #4
   133e4:	ldrb	w8, [x15, x8]
   133e8:	b.ne	13418 <lzma_mode_is_supported@@XZ_5.0+0x2230>  // b.any
   133ec:	ldrb	w9, [x15, x9]
   133f0:	b	13444 <lzma_mode_is_supported@@XZ_5.0+0x225c>
   133f4:	ldr	x9, [sp, #112]
   133f8:	adrp	x11, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   133fc:	ldrh	w9, [x9]
   13400:	ldr	x11, [x11, #3960]
   13404:	lsr	x9, x9, #4
   13408:	eor	x9, x9, #0x7f
   1340c:	ldrb	w8, [x11, x8]
   13410:	ldrb	w9, [x11, x9]
   13414:	b	13444 <lzma_mode_is_supported@@XZ_5.0+0x225c>
   13418:	ldr	x11, [sp, #96]
   1341c:	eor	x9, x9, #0x7f
   13420:	ldrb	w9, [x15, x9]
   13424:	mov	w13, #0x2                   	// #2
   13428:	ldrh	w11, [x11]
   1342c:	sub	w13, w13, w2
   13430:	and	x13, x13, #0x7f0
   13434:	add	w9, w9, w8
   13438:	eor	x11, x13, x11
   1343c:	lsr	x8, x11, #4
   13440:	ldrb	w8, [x15, x8]
   13444:	ldur	w11, [x29, #-88]
   13448:	add	w8, w9, w8
   1344c:	sub	w9, w1, #0x2
   13450:	add	w30, w8, w11
   13454:	ldur	x8, [x29, #-104]
   13458:	mov	w11, w1
   1345c:	add	x8, x8, w9, uxtw #2
   13460:	b	13474 <lzma_mode_is_supported@@XZ_5.0+0x228c>
   13464:	sub	w11, w11, #0x1
   13468:	cmp	w11, #0x1
   1346c:	sub	x8, x8, #0x4
   13470:	b.ls	134c4 <lzma_mode_is_supported@@XZ_5.0+0x22dc>  // b.plast
   13474:	add	w13, w24, w11
   13478:	umaddl	x15, w13, w19, x21
   1347c:	ldr	w16, [x8]
   13480:	add	x15, x15, x22
   13484:	ldr	w0, [x15]
   13488:	add	w16, w16, w30
   1348c:	cmp	w16, w0
   13490:	b.cs	13464 <lzma_mode_is_supported@@XZ_5.0+0x227c>  // b.hs, b.nlast
   13494:	str	w16, [x15]
   13498:	mov	w15, #0xef8                 	// #3832
   1349c:	madd	x13, x13, x19, x21
   134a0:	movk	w15, #0x1, lsl #16
   134a4:	str	w24, [x13, x15]
   134a8:	mov	w15, #0xefc                 	// #3836
   134ac:	movk	w15, #0x1, lsl #16
   134b0:	str	w2, [x13, x15]
   134b4:	mov	w15, #0xee8                 	// #3816
   134b8:	movk	w15, #0x1, lsl #16
   134bc:	strb	wzr, [x13, x15]
   134c0:	b	13464 <lzma_mode_is_supported@@XZ_5.0+0x227c>
   134c4:	ldur	w13, [x29, #-60]
   134c8:	add	w8, w1, #0x1
   134cc:	cmp	x2, #0x0
   134d0:	add	w11, w8, w26
   134d4:	csinc	w5, w5, w1, ne  // ne = any
   134d8:	cmp	w11, w13
   134dc:	csel	w11, w13, w11, hi  // hi = pmore
   134e0:	cmp	w8, w11
   134e4:	mov	w6, w8
   134e8:	b.cs	13520 <lzma_mode_is_supported@@XZ_5.0+0x2338>  // b.hs, b.nlast
   134ec:	ldur	x15, [x29, #-144]
   134f0:	mov	w6, w8
   134f4:	mov	w13, w11
   134f8:	add	x10, x15, x10
   134fc:	add	x16, x10, x6
   13500:	ldrb	w15, [x4, x6]
   13504:	ldurb	w16, [x16, #-2]
   13508:	cmp	w15, w16
   1350c:	b.ne	13520 <lzma_mode_is_supported@@XZ_5.0+0x2338>  // b.any
   13510:	add	x6, x6, #0x1
   13514:	cmp	x6, x13
   13518:	b.cc	134fc <lzma_mode_is_supported@@XZ_5.0+0x2314>  // b.lo, b.ul, b.last
   1351c:	mov	w6, w11
   13520:	sub	w0, w6, w8
   13524:	subs	w13, w0, #0x2
   13528:	stur	w5, [x29, #-40]
   1352c:	b.cc	13668 <lzma_mode_is_supported@@XZ_5.0+0x2480>  // b.lo, b.ul, b.last
   13530:	ldur	w8, [x29, #-156]
   13534:	ldr	x15, [sp, #120]
   13538:	sub	w16, w1, #0x1
   1353c:	ldrb	w16, [x4, w16, uxtw]
   13540:	add	w11, w1, w8
   13544:	madd	x8, x12, x25, x21
   13548:	add	x9, x8, w9, uxtw #2
   1354c:	ldur	x8, [x29, #-72]
   13550:	add	x15, x21, x15, lsl #5
   13554:	mov	w1, w1
   13558:	ldrb	w4, [x4, x1]
   1355c:	and	x3, x11, x8
   13560:	ldrb	w8, [x14, x1]
   13564:	add	x14, x15, x3, lsl #1
   13568:	mov	w15, #0x6b9c                	// #27548
   1356c:	ldrh	w14, [x14, x15]
   13570:	ldur	w15, [x29, #-108]
   13574:	mov	w1, #0xbe4c                	// #48716
   13578:	ldr	w1, [x9, x1]
   1357c:	ldur	x9, [x29, #-120]
   13580:	and	w15, w11, w15
   13584:	lsr	x14, x14, #4
   13588:	mov	w10, wzr
   1358c:	lsl	w9, w15, w9
   13590:	adrp	x15, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13594:	ldr	x15, [x15, #3960]
   13598:	orr	w4, w4, #0x100
   1359c:	mov	w5, #0x100                 	// #256
   135a0:	mov	w26, #0x600                 	// #1536
   135a4:	ldrb	w23, [x15, x14]
   135a8:	mov	x14, x15
   135ac:	ldur	w15, [x29, #-124]
   135b0:	lsr	w15, w16, w15
   135b4:	add	w9, w15, w9
   135b8:	lsl	w8, w8, #1
   135bc:	add	w15, w5, w4, lsr #8
   135c0:	and	w3, w8, w5
   135c4:	madd	x16, x9, x26, x21
   135c8:	add	w15, w15, w3
   135cc:	add	x15, x16, w15, uxtw #1
   135d0:	ldrh	w15, [x15, #2972]
   135d4:	ubfx	w16, w4, #7, #1
   135d8:	neg	w16, w16
   135dc:	and	w16, w16, #0x7f0
   135e0:	eor	w15, w16, w15
   135e4:	lsr	x15, x15, #4
   135e8:	ldrb	w15, [x14, x15]
   135ec:	cmp	w4, #0x8, lsl #12
   135f0:	lsl	w4, w4, #1
   135f4:	eor	w16, w4, w8
   135f8:	add	w10, w10, w15
   135fc:	bic	w5, w5, w16
   13600:	b.cc	135b8 <lzma_mode_is_supported@@XZ_5.0+0x23d0>  // b.lo, b.ul, b.last
   13604:	ldur	x9, [x29, #-48]
   13608:	add	w8, w11, #0x1
   1360c:	mov	w15, #0x6c3c                	// #27708
   13610:	add	w18, w18, #0x1
   13614:	ldrh	w11, [x9, #2]
   13618:	ldur	x9, [x29, #-72]
   1361c:	add	w5, w0, w18
   13620:	cmp	w20, w5
   13624:	lsr	x11, x11, #4
   13628:	and	x9, x8, x9
   1362c:	add	x8, x21, x9, lsl #1
   13630:	ldrh	w8, [x8, x15]
   13634:	eor	x11, x11, #0x7f
   13638:	ldrb	w11, [x14, x11]
   1363c:	lsr	x8, x8, #4
   13640:	eor	x8, x8, #0x7f
   13644:	ldrb	w4, [x14, x8]
   13648:	b.cs	1367c <lzma_mode_is_supported@@XZ_5.0+0x2494>  // b.hs, b.nlast
   1364c:	mov	w26, w20
   13650:	mov	w0, w5
   13654:	sub	x3, x0, x26
   13658:	cmp	x3, #0x2
   1365c:	b.cs	1368c <lzma_mode_is_supported@@XZ_5.0+0x24a4>  // b.hs, b.nlast
   13660:	mov	x8, x26
   13664:	b	136c8 <lzma_mode_is_supported@@XZ_5.0+0x24e0>
   13668:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   1366c:	ldr	x14, [x14, #3960]
   13670:	ldur	x5, [x29, #-80]
   13674:	ldur	w30, [x29, #-148]
   13678:	b	13318 <lzma_mode_is_supported@@XZ_5.0+0x2130>
   1367c:	mov	w0, w5
   13680:	ldur	x5, [x29, #-80]
   13684:	ldur	w26, [x29, #-152]
   13688:	b	136f0 <lzma_mode_is_supported@@XZ_5.0+0x2508>
   1368c:	ldr	x8, [sp, #128]
   13690:	add	w14, w24, w6
   13694:	and	x16, x3, #0xfffffffffffffffe
   13698:	sub	x14, x14, x26
   1369c:	madd	x15, x26, x19, x8
   136a0:	add	x8, x16, x26
   136a4:	and	x26, x14, #0xfffffffffffffffe
   136a8:	stur	w28, [x15, #-44]
   136ac:	str	w28, [x15], #88
   136b0:	subs	x26, x26, #0x2
   136b4:	b.ne	136a8 <lzma_mode_is_supported@@XZ_5.0+0x24c0>  // b.any
   136b8:	cmp	x3, x16
   136bc:	b.ne	136c8 <lzma_mode_is_supported@@XZ_5.0+0x24e0>  // b.any
   136c0:	mov	w20, w5
   136c4:	b	13680 <lzma_mode_is_supported@@XZ_5.0+0x2498>
   136c8:	add	w14, w24, w6
   136cc:	sub	x15, x14, x8
   136d0:	ldr	x14, [sp, #168]
   136d4:	ldur	w26, [x29, #-152]
   136d8:	madd	x8, x8, x19, x14
   136dc:	subs	x15, x15, #0x1
   136e0:	str	w28, [x8], #44
   136e4:	b.ne	136dc <lzma_mode_is_supported@@XZ_5.0+0x24f4>  // b.any
   136e8:	mov	w20, w5
   136ec:	ldur	x5, [x29, #-80]
   136f0:	ldur	x15, [x29, #-48]
   136f4:	madd	x8, x9, x25, x21
   136f8:	add	w14, w1, w30
   136fc:	add	x9, x21, x9, lsl #1
   13700:	mov	w16, #0x6e1c                	// #28188
   13704:	add	x8, x8, w13, uxtw #2
   13708:	ldrh	w9, [x9, x16]
   1370c:	add	w14, w14, w23
   13710:	mov	w16, #0xbe4c                	// #48716
   13714:	ldrh	w15, [x15, #26]
   13718:	ldr	w16, [x8, x16]
   1371c:	add	w8, w14, w10
   13720:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13724:	ldr	x14, [x14, #3960]
   13728:	add	w8, w8, w4
   1372c:	lsr	x10, x15, #4
   13730:	add	w11, w8, w11
   13734:	lsr	x8, x9, #4
   13738:	madd	x13, x0, x19, x21
   1373c:	ldrb	w10, [x14, x10]
   13740:	eor	x8, x8, #0x7f
   13744:	ldrb	w9, [x14, x8]
   13748:	add	x8, x13, x22
   1374c:	ldr	w13, [x8]
   13750:	add	w11, w11, w16
   13754:	add	w10, w11, w10
   13758:	add	w9, w10, w9
   1375c:	cmp	w9, w13
   13760:	b.cs	137ac <lzma_mode_is_supported@@XZ_5.0+0x25c4>  // b.hs, b.nlast
   13764:	str	w9, [x8]
   13768:	mov	w9, #0xef8                 	// #3832
   1376c:	madd	x8, x0, x19, x21
   13770:	movk	w9, #0x1, lsl #16
   13774:	str	w18, [x8, x9]
   13778:	mov	w9, #0xefc                 	// #3836
   1377c:	movk	w9, #0x1, lsl #16
   13780:	str	wzr, [x8, x9]
   13784:	mov	w9, #0xee8                 	// #3816
   13788:	movk	w9, #0x1, lsl #16
   1378c:	mov	w10, #0x101                 	// #257
   13790:	strh	w10, [x8, x9]
   13794:	mov	w9, #0xeec                 	// #3820
   13798:	movk	w9, #0x1, lsl #16
   1379c:	str	w24, [x8, x9]
   137a0:	mov	w9, #0xef0                 	// #3824
   137a4:	movk	w9, #0x1, lsl #16
   137a8:	str	w2, [x8, x9]
   137ac:	ldur	x4, [x29, #-96]
   137b0:	ldur	w30, [x29, #-148]
   137b4:	sub	x3, x29, #0x20
   137b8:	b	13318 <lzma_mode_is_supported@@XZ_5.0+0x2130>
   137bc:	ldr	w15, [sp, #88]
   137c0:	ldur	w6, [x29, #-84]
   137c4:	ldr	x16, [sp, #80]
   137c8:	ldur	w4, [x29, #-40]
   137cc:	ldr	w18, [sp, #44]
   137d0:	ldr	x17, [sp, #32]
   137d4:	cmp	w15, w30
   137d8:	mov	w8, w15
   137dc:	mov	w23, #0xbe4c                	// #48716
   137e0:	b.ls	13808 <lzma_mode_is_supported@@XZ_5.0+0x2620>  // b.plast
   137e4:	mov	w6, wzr
   137e8:	add	x8, x21, w6, uxtw #3
   137ec:	ldr	w9, [x8, #756]
   137f0:	add	w6, w6, #0x1
   137f4:	cmp	w30, w9
   137f8:	b.hi	137e8 <lzma_mode_is_supported@@XZ_5.0+0x2600>  // b.pmore
   137fc:	add	x8, x8, #0x2f4
   13800:	str	w30, [x8]
   13804:	mov	w8, w30
   13808:	cmp	w8, w4
   1380c:	b.cc	12ba0 <lzma_mode_is_supported@@XZ_5.0+0x19b8>  // b.lo, b.ul, b.last
   13810:	add	w8, w8, w24
   13814:	cmp	w20, w8
   13818:	b.cs	13954 <lzma_mode_is_supported@@XZ_5.0+0x276c>  // b.hs, b.nlast
   1381c:	mov	w13, w20
   13820:	mov	w8, w8
   13824:	sub	x9, x8, x13
   13828:	cmp	x9, #0x1
   1382c:	b.hi	138e0 <lzma_mode_is_supported@@XZ_5.0+0x26f8>  // b.pmore
   13830:	mov	x20, x13
   13834:	b	1393c <lzma_mode_is_supported@@XZ_5.0+0x2754>
   13838:	add	w10, w8, #0x1
   1383c:	ldur	x5, [x29, #-80]
   13840:	sub	w8, w10, #0x1
   13844:	cmp	w8, #0x2
   13848:	b.cc	13208 <lzma_mode_is_supported@@XZ_5.0+0x2020>  // b.lo, b.ul, b.last
   1384c:	ldr	x15, [sp, #160]
   13850:	ldur	w8, [x29, #-156]
   13854:	mov	w9, #0xfffffffa            	// #-6
   13858:	mov	w11, #0xfffffffd            	// #-3
   1385c:	cmp	w15, #0xa
   13860:	csel	w9, w11, w9, cc  // cc = lo, ul, last
   13864:	ldur	x11, [x29, #-72]
   13868:	add	w8, w8, #0x1
   1386c:	cmp	w15, #0x4
   13870:	add	w0, w10, w24
   13874:	and	x13, x11, x8
   13878:	add	w8, w9, w15
   1387c:	csel	w16, wzr, w8, cc  // cc = lo, ul, last
   13880:	add	x8, x21, x16, lsl #5
   13884:	add	x9, x21, w16, uxtw #1
   13888:	mov	w11, #0x6d1c                	// #27932
   1388c:	add	x8, x8, x13, lsl #1
   13890:	ldrh	w9, [x9, x11]
   13894:	mov	w11, #0x6b9c                	// #27548
   13898:	ldrh	w8, [x8, x11]
   1389c:	adrp	x15, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   138a0:	ldr	x15, [x15, #3960]
   138a4:	lsr	x9, x9, #4
   138a8:	lsr	x8, x8, #4
   138ac:	eor	x11, x9, #0x7f
   138b0:	eor	x8, x8, #0x7f
   138b4:	ldrb	w9, [x15, x8]
   138b8:	ldrb	w17, [x15, x11]
   138bc:	cmp	w0, w20
   138c0:	b.ls	13e40 <lzma_mode_is_supported@@XZ_5.0+0x2c58>  // b.plast
   138c4:	mov	w15, w20
   138c8:	mov	w11, w0
   138cc:	sub	x1, x11, x15
   138d0:	cmp	x1, #0x2
   138d4:	b.cs	13e48 <lzma_mode_is_supported@@XZ_5.0+0x2c60>  // b.hs, b.nlast
   138d8:	mov	x8, x15
   138dc:	b	13e84 <lzma_mode_is_supported@@XZ_5.0+0x2c9c>
   138e0:	cmp	w15, w26
   138e4:	csel	w14, w15, w26, cc  // cc = lo, ul, last
   138e8:	ldr	w15, [sp, #148]
   138ec:	ldr	x11, [sp, #128]
   138f0:	and	x10, x9, #0xfffffffffffffffe
   138f4:	add	x20, x10, x13
   138f8:	cmp	w14, w15
   138fc:	csel	w14, w14, w15, cc  // cc = lo, ul, last
   13900:	ldr	w15, [sp, #92]
   13904:	madd	x11, x13, x19, x11
   13908:	cmp	w14, w15
   1390c:	csel	w14, w14, w15, cc  // cc = lo, ul, last
   13910:	add	w14, w14, w24
   13914:	sub	x13, x14, x13
   13918:	and	x13, x13, #0xfffffffffffffffe
   1391c:	stur	w28, [x11, #-44]
   13920:	str	w28, [x11], #88
   13924:	subs	x13, x13, #0x2
   13928:	b.ne	1391c <lzma_mode_is_supported@@XZ_5.0+0x2734>  // b.any
   1392c:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13930:	ldr	x14, [x14, #3960]
   13934:	cmp	x9, x10
   13938:	b.eq	13954 <lzma_mode_is_supported@@XZ_5.0+0x276c>  // b.none
   1393c:	ldr	x9, [sp, #168]
   13940:	madd	x9, x20, x19, x9
   13944:	add	x20, x20, #0x1
   13948:	cmp	x20, x8
   1394c:	str	w28, [x9], #44
   13950:	b.cc	13944 <lzma_mode_is_supported@@XZ_5.0+0x275c>  // b.lo, b.ul, b.last
   13954:	ldrb	w8, [x14, x17]
   13958:	mov	w17, #0xffffffff            	// #-1
   1395c:	add	w17, w17, #0x1
   13960:	add	x9, x21, w17, uxtw #3
   13964:	ldr	w9, [x9, #756]
   13968:	cmp	w4, w9
   1396c:	b.hi	1395c <lzma_mode_is_supported@@XZ_5.0+0x2774>  // b.pmore
   13970:	add	w18, w18, w8
   13974:	ldr	x8, [sp, #160]
   13978:	mov	w9, #0x7                   	// #7
   1397c:	stur	w6, [x29, #-84]
   13980:	cmp	w8, #0x7
   13984:	add	w8, w26, #0x1
   13988:	stur	w8, [x29, #-88]
   1398c:	mov	w8, #0xa                   	// #10
   13990:	csel	x8, x9, x8, cc  // cc = lo, ul, last
   13994:	stur	x8, [x29, #-136]
   13998:	ldr	x8, [sp, #104]
   1399c:	add	x1, x16, x8
   139a0:	b	139b4 <lzma_mode_is_supported@@XZ_5.0+0x27cc>
   139a4:	ldur	w6, [x29, #-84]
   139a8:	add	w17, w17, #0x1
   139ac:	cmp	w17, w6
   139b0:	b.eq	12ba0 <lzma_mode_is_supported@@XZ_5.0+0x19b8>  // b.none
   139b4:	add	x8, x21, w17, uxtw #3
   139b8:	ldr	w2, [x8, #760]
   139bc:	ldur	w9, [x29, #-56]
   139c0:	mov	w10, #0x1e                  	// #30
   139c4:	mov	w14, #0x12                  	// #18
   139c8:	cmp	w2, #0x0
   139cc:	csel	w10, w14, w10, ge  // ge = tcont
   139d0:	mov	w14, #0x3c                  	// #60
   139d4:	mov	w15, #0x24                  	// #36
   139d8:	csel	x14, x15, x14, ge  // ge = tcont
   139dc:	cmp	w2, #0x80, lsl #12
   139e0:	mov	w15, #0x6                   	// #6
   139e4:	csel	w10, w15, w10, cc  // cc = lo, ul, last
   139e8:	mov	w15, #0xc                   	// #12
   139ec:	mov	w5, w4
   139f0:	add	w9, w9, w4
   139f4:	sub	w11, w4, #0x2
   139f8:	ldr	w13, [x8, #756]
   139fc:	and	x8, x2, #0xf
   13a00:	csel	x4, x15, x14, cc  // cc = lo, ul, last
   13a04:	mov	w14, #0xe98                 	// #3736
   13a08:	add	x8, x21, x8, lsl #2
   13a0c:	movk	w14, #0x1, lsl #16
   13a10:	add	x6, x8, x14
   13a14:	ldur	w8, [x29, #-40]
   13a18:	mov	w3, wzr
   13a1c:	add	w0, w2, #0x4
   13a20:	lsr	x7, x2, x10
   13a24:	add	w10, w8, #0x1
   13a28:	add	w14, w5, w3
   13a2c:	sub	w8, w14, #0x2
   13a30:	cmp	w14, #0x6
   13a34:	mov	w14, #0x3                   	// #3
   13a38:	csel	w15, w8, w14, cc  // cc = lo, ul, last
   13a3c:	cmp	w2, #0x7f
   13a40:	add	w14, w11, w3
   13a44:	b.hi	13a64 <lzma_mode_is_supported@@XZ_5.0+0x287c>  // b.pmore
   13a48:	mov	w15, w15
   13a4c:	add	x15, x21, x15, lsl #9
   13a50:	mov	w16, #0x690                 	// #1680
   13a54:	add	x15, x15, x2, lsl #2
   13a58:	movk	w16, #0x1, lsl #16
   13a5c:	ldr	w15, [x15, x16]
   13a60:	b	13a94 <lzma_mode_is_supported@@XZ_5.0+0x28ac>
   13a64:	adrp	x16, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13a68:	ldr	x16, [x16, #4008]
   13a6c:	mov	w15, w15
   13a70:	add	x15, x21, x15, lsl #8
   13a74:	ldrb	w16, [x16, x7]
   13a78:	add	x16, x4, x16
   13a7c:	add	x15, x15, x16, lsl #2
   13a80:	mov	w16, #0x290                 	// #656
   13a84:	movk	w16, #0x1, lsl #16
   13a88:	ldr	w15, [x15, x16]
   13a8c:	ldr	w16, [x6]
   13a90:	add	w15, w16, w15
   13a94:	madd	x16, x12, x25, x21
   13a98:	add	w26, w9, w3
   13a9c:	add	x14, x16, w14, uxtw #2
   13aa0:	add	w16, w26, #0x1
   13aa4:	mov	w26, #0x7604                	// #30212
   13aa8:	ldr	w14, [x14, x26]
   13aac:	umaddl	x26, w16, w19, x21
   13ab0:	add	x26, x26, x22
   13ab4:	ldr	w30, [x26]
   13ab8:	add	w15, w18, w15
   13abc:	add	w14, w15, w14
   13ac0:	cmp	w14, w30
   13ac4:	b.cs	13af4 <lzma_mode_is_supported@@XZ_5.0+0x290c>  // b.hs, b.nlast
   13ac8:	madd	x15, x16, x19, x21
   13acc:	mov	w16, #0xef8                 	// #3832
   13ad0:	movk	w16, #0x1, lsl #16
   13ad4:	str	w14, [x26]
   13ad8:	str	w24, [x15, x16]
   13adc:	mov	w16, #0xefc                 	// #3836
   13ae0:	movk	w16, #0x1, lsl #16
   13ae4:	str	w0, [x15, x16]
   13ae8:	mov	w16, #0xee8                 	// #3816
   13aec:	movk	w16, #0x1, lsl #16
   13af0:	strb	wzr, [x15, x16]
   13af4:	add	w8, w8, #0x2
   13af8:	cmp	w8, w13
   13afc:	b.eq	13b0c <lzma_mode_is_supported@@XZ_5.0+0x2924>  // b.none
   13b00:	add	w3, w3, #0x1
   13b04:	add	w10, w10, #0x1
   13b08:	b	13a28 <lzma_mode_is_supported@@XZ_5.0+0x2840>
   13b0c:	ldur	w8, [x29, #-88]
   13b10:	ldur	w11, [x29, #-60]
   13b14:	add	w9, w5, w3
   13b18:	add	w4, w9, #0x1
   13b1c:	add	w8, w8, w5
   13b20:	add	w8, w8, w3
   13b24:	cmp	w8, w11
   13b28:	csel	w11, w11, w8, hi  // hi = pmore
   13b2c:	ldur	w8, [x29, #-40]
   13b30:	cmp	w4, w11
   13b34:	mov	w6, w4
   13b38:	add	w8, w8, w3
   13b3c:	b.cs	13b8c <lzma_mode_is_supported@@XZ_5.0+0x29a4>  // b.hs, b.nlast
   13b40:	neg	x15, x2
   13b44:	mov	w13, w10
   13b48:	mov	w11, w11
   13b4c:	sub	x13, x13, #0x1
   13b50:	add	x15, x1, x15
   13b54:	mov	w6, w4
   13b58:	add	x0, x15, x13
   13b5c:	ldrb	w16, [x1, x13]
   13b60:	ldurb	w0, [x0, #-1]
   13b64:	cmp	w16, w0
   13b68:	b.ne	13b88 <lzma_mode_is_supported@@XZ_5.0+0x29a0>  // b.any
   13b6c:	add	x16, x13, #0x2
   13b70:	add	w6, w6, #0x1
   13b74:	add	x13, x13, #0x1
   13b78:	cmp	x16, x11
   13b7c:	add	w10, w10, #0x1
   13b80:	b.cc	13b58 <lzma_mode_is_supported@@XZ_5.0+0x2970>  // b.lo, b.ul, b.last
   13b84:	b	13b8c <lzma_mode_is_supported@@XZ_5.0+0x29a4>
   13b88:	mov	w6, w10
   13b8c:	sub	w13, w6, w5
   13b90:	mvn	w10, w3
   13b94:	add	w30, w10, w13
   13b98:	cmp	w30, #0x2
   13b9c:	add	w8, w8, #0x1
   13ba0:	stur	w8, [x29, #-40]
   13ba4:	b.cc	139a4 <lzma_mode_is_supported@@XZ_5.0+0x27bc>  // b.lo, b.ul, b.last
   13ba8:	ldur	x8, [x29, #-80]
   13bac:	mov	x23, x20
   13bb0:	ldur	x20, [x29, #-96]
   13bb4:	ldur	w11, [x29, #-128]
   13bb8:	sub	x8, x8, x2
   13bbc:	mov	w9, w9
   13bc0:	ldur	x15, [x29, #-136]
   13bc4:	ldrb	w8, [x8, x9]
   13bc8:	ldrb	w0, [x20, x9]
   13bcc:	ldur	x9, [x29, #-72]
   13bd0:	add	w11, w11, w5
   13bd4:	add	w11, w11, w3
   13bd8:	add	x15, x21, x15, lsl #5
   13bdc:	and	w9, w11, w9
   13be0:	add	x15, x15, w9, uxtw #1
   13be4:	mov	w7, #0x6b9c                	// #27548
   13be8:	ldrh	w15, [x15, x7]
   13bec:	ldur	w7, [x29, #-108]
   13bf0:	add	w16, w5, w3
   13bf4:	sub	w16, w16, #0x1
   13bf8:	ldrb	w16, [x20, w16, uxtw]
   13bfc:	adrp	x20, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13c00:	and	w11, w11, w7
   13c04:	ldur	x7, [x29, #-120]
   13c08:	ldr	x20, [x20, #3960]
   13c0c:	lsr	x15, x15, #4
   13c10:	mov	w10, wzr
   13c14:	lsl	w11, w11, w7
   13c18:	ldrb	w15, [x20, x15]
   13c1c:	orr	w0, w0, #0x100
   13c20:	mov	w25, #0x600                 	// #1536
   13c24:	stur	w15, [x29, #-104]
   13c28:	ldur	w15, [x29, #-124]
   13c2c:	lsr	w15, w16, w15
   13c30:	add	w11, w15, w11
   13c34:	mov	w15, #0x100                 	// #256
   13c38:	lsl	w8, w8, #1
   13c3c:	add	w16, w15, w0, lsr #8
   13c40:	and	w26, w8, w15
   13c44:	madd	x7, x11, x25, x21
   13c48:	add	w16, w16, w26
   13c4c:	add	x16, x7, w16, uxtw #1
   13c50:	ldrh	w16, [x16, #2972]
   13c54:	ubfx	w7, w0, #7, #1
   13c58:	neg	w7, w7
   13c5c:	and	w7, w7, #0x7f0
   13c60:	eor	w16, w7, w16
   13c64:	lsr	x16, x16, #4
   13c68:	ldrb	w16, [x20, x16]
   13c6c:	cmp	w0, #0x8, lsl #12
   13c70:	lsl	w0, w0, #1
   13c74:	eor	w7, w0, w8
   13c78:	add	w10, w10, w16
   13c7c:	bic	w15, w15, w7
   13c80:	b.cc	13c38 <lzma_mode_is_supported@@XZ_5.0+0x2a50>  // b.lo, b.ul, b.last
   13c84:	add	w8, w9, #0x1
   13c88:	ldur	x9, [x29, #-48]
   13c8c:	ldur	w11, [x29, #-56]
   13c90:	ldur	x15, [x29, #-72]
   13c94:	ldrh	w9, [x9]
   13c98:	add	w11, w11, w5
   13c9c:	and	w0, w8, w15
   13ca0:	add	w8, w11, w3
   13ca4:	add	x11, x21, w0, uxtw #1
   13ca8:	mov	w15, #0x6c1c                	// #27676
   13cac:	ldrh	w15, [x11, x15]
   13cb0:	lsr	x9, x9, #4
   13cb4:	eor	x9, x9, #0x7f
   13cb8:	ldrb	w26, [x20, x9]
   13cbc:	lsr	x9, x15, #4
   13cc0:	eor	x9, x9, #0x7f
   13cc4:	ldrb	w9, [x20, x9]
   13cc8:	add	w5, w8, #0x2
   13ccc:	add	w8, w30, w5
   13cd0:	mov	x20, x23
   13cd4:	cmp	w20, w8
   13cd8:	b.cs	13d00 <lzma_mode_is_supported@@XZ_5.0+0x2b18>  // b.hs, b.nlast
   13cdc:	mov	w15, w20
   13ce0:	mov	w30, w8
   13ce4:	sub	x16, x30, x15
   13ce8:	cmp	x16, #0x2
   13cec:	b.cs	13d10 <lzma_mode_is_supported@@XZ_5.0+0x2b28>  // b.hs, b.nlast
   13cf0:	mov	x7, x15
   13cf4:	mov	w23, #0xbe4c                	// #48716
   13cf8:	mov	w25, #0x440                 	// #1088
   13cfc:	b	13d54 <lzma_mode_is_supported@@XZ_5.0+0x2b6c>
   13d00:	mov	w30, w8
   13d04:	mov	w23, #0xbe4c                	// #48716
   13d08:	mov	w25, #0x440                 	// #1088
   13d0c:	b	13d74 <lzma_mode_is_supported@@XZ_5.0+0x2b8c>
   13d10:	ldr	x11, [sp, #128]
   13d14:	mov	w20, w26
   13d18:	and	x23, x16, #0xfffffffffffffffe
   13d1c:	add	x7, x23, x15
   13d20:	madd	x26, x15, x19, x11
   13d24:	add	w11, w24, w6
   13d28:	sub	x11, x11, x15
   13d2c:	and	x15, x11, #0xfffffffffffffffe
   13d30:	stur	w28, [x26, #-44]
   13d34:	str	w28, [x26], #88
   13d38:	subs	x15, x15, #0x2
   13d3c:	b.ne	13d30 <lzma_mode_is_supported@@XZ_5.0+0x2b48>  // b.any
   13d40:	cmp	x16, x23
   13d44:	mov	w23, #0xbe4c                	// #48716
   13d48:	mov	w25, #0x440                 	// #1088
   13d4c:	mov	w26, w20
   13d50:	b.eq	13d70 <lzma_mode_is_supported@@XZ_5.0+0x2b88>  // b.none
   13d54:	add	w11, w24, w6
   13d58:	sub	x16, x11, x7
   13d5c:	ldr	x11, [sp, #168]
   13d60:	madd	x15, x7, x19, x11
   13d64:	subs	x16, x16, #0x1
   13d68:	str	w28, [x15], #44
   13d6c:	b.ne	13d64 <lzma_mode_is_supported@@XZ_5.0+0x2b7c>  // b.any
   13d70:	mov	w20, w8
   13d74:	ldur	w15, [x29, #-104]
   13d78:	sub	w8, w13, w3
   13d7c:	madd	x11, x0, x25, x21
   13d80:	sub	w8, w8, #0x3
   13d84:	add	w13, w14, w15
   13d88:	ldur	x14, [x29, #-48]
   13d8c:	add	w10, w13, w10
   13d90:	add	x8, x11, w8, uxtw #2
   13d94:	add	x15, x21, x0, lsl #1
   13d98:	ldrh	w14, [x14, #24]
   13d9c:	mov	w16, #0x6dfc                	// #28156
   13da0:	add	w9, w10, w9
   13da4:	ldr	w10, [x8, x23]
   13da8:	lsr	x8, x14, #4
   13dac:	adrp	x14, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13db0:	ldur	w6, [x29, #-84]
   13db4:	ldrh	w15, [x15, x16]
   13db8:	ldr	x14, [x14, #3960]
   13dbc:	madd	x13, x30, x19, x21
   13dc0:	add	w9, w9, w26
   13dc4:	add	w9, w9, w10
   13dc8:	ldrb	w11, [x14, x8]
   13dcc:	lsr	x8, x15, #4
   13dd0:	eor	x8, x8, #0x7f
   13dd4:	ldrb	w14, [x14, x8]
   13dd8:	add	x8, x13, x22
   13ddc:	ldr	w13, [x8]
   13de0:	add	w9, w9, w11
   13de4:	add	w9, w9, w14
   13de8:	cmp	w9, w13
   13dec:	b.cs	139a8 <lzma_mode_is_supported@@XZ_5.0+0x27c0>  // b.hs, b.nlast
   13df0:	mov	w10, #0xef8                 	// #3832
   13df4:	str	w9, [x8]
   13df8:	madd	x8, x30, x19, x21
   13dfc:	movk	w10, #0x1, lsl #16
   13e00:	str	w5, [x8, x10]
   13e04:	mov	w10, #0xefc                 	// #3836
   13e08:	movk	w10, #0x1, lsl #16
   13e0c:	str	wzr, [x8, x10]
   13e10:	mov	w10, #0xee8                 	// #3816
   13e14:	movk	w10, #0x1, lsl #16
   13e18:	mov	w11, #0x101                 	// #257
   13e1c:	strh	w11, [x8, x10]
   13e20:	mov	w10, #0xeec                 	// #3820
   13e24:	movk	w10, #0x1, lsl #16
   13e28:	str	w24, [x8, x10]
   13e2c:	mov	w10, #0xef0                 	// #3824
   13e30:	add	w9, w2, #0x4
   13e34:	movk	w10, #0x1, lsl #16
   13e38:	str	w9, [x8, x10]
   13e3c:	b	139a8 <lzma_mode_is_supported@@XZ_5.0+0x27c0>
   13e40:	mov	w11, w0
   13e44:	b	13ea4 <lzma_mode_is_supported@@XZ_5.0+0x2cbc>
   13e48:	ldr	x8, [sp, #128]
   13e4c:	and	x2, x1, #0xfffffffffffffffe
   13e50:	add	w4, w10, w24
   13e54:	madd	x3, x15, x19, x8
   13e58:	add	x8, x2, x15
   13e5c:	sub	x15, x4, x15
   13e60:	and	x15, x15, #0xfffffffffffffffe
   13e64:	stur	w28, [x3, #-44]
   13e68:	str	w28, [x3], #88
   13e6c:	subs	x15, x15, #0x2
   13e70:	b.ne	13e64 <lzma_mode_is_supported@@XZ_5.0+0x2c7c>  // b.any
   13e74:	ldur	x4, [x29, #-96]
   13e78:	cmp	x1, x2
   13e7c:	sub	x3, x29, #0x20
   13e80:	b.eq	13ea0 <lzma_mode_is_supported@@XZ_5.0+0x2cb8>  // b.none
   13e84:	ldr	x1, [sp, #168]
   13e88:	add	w15, w10, w24
   13e8c:	sub	x15, x15, x8
   13e90:	madd	x8, x8, x19, x1
   13e94:	subs	x15, x15, #0x1
   13e98:	str	w28, [x8], #44
   13e9c:	b.ne	13e94 <lzma_mode_is_supported@@XZ_5.0+0x2cac>  // b.any
   13ea0:	mov	w20, w0
   13ea4:	sub	w8, w10, #0x3
   13ea8:	madd	x10, x13, x25, x21
   13eac:	add	w9, w14, w9
   13eb0:	add	x14, x21, x16, lsl #1
   13eb4:	add	x15, x21, x16, lsl #5
   13eb8:	mov	w16, #0x6d34                	// #27956
   13ebc:	add	x8, x10, w8, uxtw #2
   13ec0:	ldrh	w14, [x14, x16]
   13ec4:	add	x13, x15, x13, lsl #1
   13ec8:	mov	w15, #0x6d7c                	// #28028
   13ecc:	adrp	x16, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   13ed0:	ldrh	w13, [x13, x15]
   13ed4:	ldr	w15, [x8, x23]
   13ed8:	ldr	x16, [x16, #3960]
   13edc:	lsr	x8, x14, #4
   13ee0:	madd	x10, x11, x19, x21
   13ee4:	add	w9, w9, w17
   13ee8:	ldrb	w14, [x16, x8]
   13eec:	lsr	x8, x13, #4
   13ef0:	eor	x8, x8, #0x7f
   13ef4:	ldrb	w13, [x16, x8]
   13ef8:	add	x8, x10, x22
   13efc:	ldr	w10, [x8]
   13f00:	add	w9, w9, w15
   13f04:	add	w9, w9, w14
   13f08:	add	w9, w9, w13
   13f0c:	cmp	w9, w10
   13f10:	b.cs	13208 <lzma_mode_is_supported@@XZ_5.0+0x2020>  // b.hs, b.nlast
   13f14:	ldr	x10, [sp, #136]
   13f18:	str	w9, [x8]
   13f1c:	mov	w9, #0xef8                 	// #3832
   13f20:	madd	x8, x11, x19, x21
   13f24:	movk	w9, #0x1, lsl #16
   13f28:	str	w10, [x8, x9]
   13f2c:	mov	w9, #0xefc                 	// #3836
   13f30:	movk	w9, #0x1, lsl #16
   13f34:	mov	w10, #0xee8                 	// #3816
   13f38:	str	wzr, [x8, x9]
   13f3c:	mov	w9, #0x1                   	// #1
   13f40:	movk	w10, #0x1, lsl #16
   13f44:	strh	w9, [x8, x10]
   13f48:	b	13208 <lzma_mode_is_supported@@XZ_5.0+0x2020>
   13f4c:	mov	w8, #0x2c                  	// #44
   13f50:	mov	w9, #0xef8                 	// #3832
   13f54:	mov	w10, #0xefc                 	// #3836
   13f58:	str	w24, [x27, #76]
   13f5c:	movk	w9, #0x1, lsl #16
   13f60:	movk	w10, #0x1, lsl #16
   13f64:	umaddl	x11, w24, w8, x21
   13f68:	ldr	w15, [x11, x9]
   13f6c:	ldr	w11, [x11, x10]
   13f70:	ldp	x3, x2, [sp, #8]
   13f74:	mov	w10, #0xee4                 	// #3812
   13f78:	movk	w10, #0x1, lsl #16
   13f7c:	add	x12, x21, x10
   13f80:	b	13fa4 <lzma_mode_is_supported@@XZ_5.0+0x2dbc>
   13f84:	madd	x15, x14, x8, x21
   13f88:	ldr	w17, [x16]
   13f8c:	ldr	w15, [x15, x9]
   13f90:	madd	x18, x14, x8, x21
   13f94:	str	w11, [x16]
   13f98:	mov	w11, w17
   13f9c:	str	w13, [x18, x9]
   13fa0:	cbz	w14, 14010 <lzma_mode_is_supported@@XZ_5.0+0x2e28>
   13fa4:	umaddl	x14, w24, w8, x12
   13fa8:	ldrb	w17, [x14, #4]
   13fac:	mov	w13, w24
   13fb0:	mov	w24, w15
   13fb4:	mov	w14, w15
   13fb8:	umaddl	x15, w15, w8, x12
   13fbc:	add	x16, x15, #0x18
   13fc0:	cbz	w17, 13f84 <lzma_mode_is_supported@@XZ_5.0+0x2d9c>
   13fc4:	add	x0, x21, x10
   13fc8:	mov	w18, w13
   13fcc:	mov	w17, #0xffffffff            	// #-1
   13fd0:	sub	w15, w14, #0x1
   13fd4:	madd	x1, x14, x8, x0
   13fd8:	str	w17, [x16]
   13fdc:	strb	wzr, [x1, #4]
   13fe0:	str	w15, [x1, #20]
   13fe4:	madd	x0, x18, x8, x0
   13fe8:	ldrb	w0, [x0, #5]
   13fec:	cbz	w0, 13f90 <lzma_mode_is_supported@@XZ_5.0+0x2da8>
   13ff0:	add	x17, x21, x10
   13ff4:	umaddl	x0, w15, w8, x17
   13ff8:	madd	x17, x18, x8, x17
   13ffc:	strb	wzr, [x0, #4]
   14000:	ldr	x17, [x17, #8]
   14004:	stur	x17, [x0, #20]
   14008:	mov	w17, #0xffffffff            	// #-1
   1400c:	b	13f90 <lzma_mode_is_supported@@XZ_5.0+0x2da8>
   14010:	ldp	w8, w9, [x27, #104]
   14014:	str	w8, [x27, #80]
   14018:	str	w8, [x2]
   1401c:	str	w9, [x3]
   14020:	ldp	x20, x19, [sp, #416]
   14024:	ldp	x22, x21, [sp, #400]
   14028:	ldp	x24, x23, [sp, #384]
   1402c:	ldp	x26, x25, [sp, #368]
   14030:	ldp	x28, x27, [sp, #352]
   14034:	ldp	x29, x30, [sp, #336]
   14038:	add	sp, sp, #0x1b0
   1403c:	ret
   14040:	stp	x29, x30, [sp, #-48]!
   14044:	stp	x20, x19, [sp, #32]
   14048:	ldr	x8, [x0]
   1404c:	mov	x19, x3
   14050:	mov	x20, x2
   14054:	str	x21, [sp, #16]
   14058:	mov	x29, sp
   1405c:	cbnz	x8, 14094 <lzma_mode_is_supported@@XZ_5.0+0x2eac>
   14060:	mov	x21, x0
   14064:	mov	w0, #0x6ec0                	// #28352
   14068:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   1406c:	str	x0, [x21]
   14070:	cbz	x0, 140c0 <lzma_mode_is_supported@@XZ_5.0+0x2ed8>
   14074:	adrp	x8, 14000 <lzma_mode_is_supported@@XZ_5.0+0x2e18>
   14078:	adrp	x9, 16000 <lzma_mode_is_supported@@XZ_5.0+0x4e18>
   1407c:	adrp	x10, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   14080:	add	x8, x8, #0xc8
   14084:	add	x9, x9, #0xfb8
   14088:	add	x10, x10, #0x414
   1408c:	stp	x8, x9, [x21, #8]
   14090:	str	x10, [x21, #24]
   14094:	ldr	w8, [x20]
   14098:	mov	w0, wzr
   1409c:	str	x8, [x19]
   140a0:	ldr	x8, [x20, #8]
   140a4:	str	x8, [x19, #8]
   140a8:	ldr	w8, [x20, #16]
   140ac:	str	x8, [x19, #16]
   140b0:	ldp	x20, x19, [sp, #32]
   140b4:	ldr	x21, [sp, #16]
   140b8:	ldp	x29, x30, [sp], #48
   140bc:	ret
   140c0:	mov	w0, #0x5                   	// #5
   140c4:	b	140b0 <lzma_mode_is_supported@@XZ_5.0+0x2ec8>
   140c8:	sub	sp, sp, #0x120
   140cc:	stp	x29, x30, [sp, #192]
   140d0:	stp	x28, x27, [sp, #208]
   140d4:	stp	x26, x25, [sp, #224]
   140d8:	stp	x24, x23, [sp, #240]
   140dc:	stp	x22, x21, [sp, #256]
   140e0:	stp	x20, x19, [sp, #272]
   140e4:	mov	w8, #0x6e74                	// #28276
   140e8:	ldr	w8, [x0, x8]
   140ec:	mov	w9, #0x6664                	// #26212
   140f0:	add	x29, sp, #0xc0
   140f4:	mov	x6, x2
   140f8:	add	x9, x0, x9
   140fc:	stp	x9, x0, [x29, #-24]
   14100:	cbz	w8, 14170 <lzma_mode_is_supported@@XZ_5.0+0x2f88>
   14104:	ldr	x10, [x3]
   14108:	ldur	x18, [x29, #-24]
   1410c:	mov	x9, xzr
   14110:	sub	x11, x8, #0x5
   14114:	add	x12, x6, x10
   14118:	sub	x13, x10, x4
   1411c:	mov	w14, #0xffffffff            	// #-1
   14120:	b	14154 <lzma_mode_is_supported@@XZ_5.0+0x2f6c>
   14124:	ldr	w15, [x18, #2060]
   14128:	add	x16, x10, x9
   1412c:	add	x9, x9, #0x1
   14130:	add	w17, w8, w14
   14134:	add	x16, x16, #0x1
   14138:	cmp	w8, w9
   1413c:	bfi	w22, w15, #8, #24
   14140:	sub	x14, x14, #0x1
   14144:	str	w22, [x18, #2060]
   14148:	str	x16, [x3]
   1414c:	str	w17, [x18, #2064]
   14150:	b.eq	1418c <lzma_mode_is_supported@@XZ_5.0+0x2fa4>  // b.none
   14154:	cmn	x13, x9
   14158:	b.eq	14184 <lzma_mode_is_supported@@XZ_5.0+0x2f9c>  // b.none
   1415c:	ldrb	w22, [x12, x9]
   14160:	cmp	w11, w9
   14164:	b.ne	14124 <lzma_mode_is_supported@@XZ_5.0+0x2f3c>  // b.any
   14168:	cbz	w22, 14124 <lzma_mode_is_supported@@XZ_5.0+0x2f3c>
   1416c:	b	16ef8 <lzma_mode_is_supported@@XZ_5.0+0x5d10>
   14170:	ldur	x8, [x29, #-24]
   14174:	ldr	x28, [x3]
   14178:	str	x3, [sp, #24]
   1417c:	ldr	w22, [x8, #2060]
   14180:	b	14194 <lzma_mode_is_supported@@XZ_5.0+0x2fac>
   14184:	mov	w0, wzr
   14188:	b	16f28 <lzma_mode_is_supported@@XZ_5.0+0x5d40>
   1418c:	add	x28, x10, x9
   14190:	str	x3, [sp, #24]
   14194:	ldur	x14, [x29, #-24]
   14198:	ldp	x13, x16, [x1, #8]
   1419c:	ldr	x9, [x1, #24]
   141a0:	mov	x11, #0xffffffffffffffff    	// #-1
   141a4:	ldr	w8, [x14, #2076]
   141a8:	ldr	w27, [x14, #2056]
   141ac:	ldr	w15, [x14, #2068]
   141b0:	ldr	w3, [x14, #2072]
   141b4:	stur	w8, [x29, #-28]
   141b8:	ldr	w8, [x14, #2084]
   141bc:	ldr	w17, [x14, #2080]
   141c0:	ldr	w19, [x14, #2124]
   141c4:	ldr	w5, [x14, #2128]
   141c8:	stur	w8, [x29, #-36]
   141cc:	ldur	x8, [x29, #-16]
   141d0:	ldr	w26, [x14, #2132]
   141d4:	ldr	w2, [x14, #2136]
   141d8:	sub	x12, x9, x13
   141dc:	ldr	x23, [x8, #28312]
   141e0:	ldr	x18, [x8, #28328]
   141e4:	ldr	w8, [x14, #2108]
   141e8:	mov	x21, x13
   141ec:	cmp	x23, x12
   141f0:	ccmp	x23, x11, #0x4, cc  // cc = lo, ul, last
   141f4:	add	x10, x23, x13
   141f8:	csel	x7, x10, x9, ne  // ne = any
   141fc:	cmp	w8, #0x46
   14200:	add	x9, x14, #0x83c
   14204:	stp	x9, x13, [sp]
   14208:	str	x1, [sp, #16]
   1420c:	b.hi	14260 <lzma_mode_is_supported@@XZ_5.0+0x3078>  // b.pmore
   14210:	ldur	x9, [x29, #-24]
   14214:	ldr	x30, [x1]
   14218:	ldr	x24, [x1, #32]
   1421c:	ldr	w12, [x9, #2088]
   14220:	ldr	w10, [x9, #2096]
   14224:	ldr	w9, [x9, #2092]
   14228:	stp	x9, x10, [sp, #88]
   1422c:	adrp	x10, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   14230:	add	x10, x10, #0xb20
   14234:	adr	x9, 142b4 <lzma_mode_is_supported@@XZ_5.0+0x30cc>
   14238:	ldrh	w11, [x10, x8, lsl #1]
   1423c:	add	x9, x9, x11, lsl #2
   14240:	stur	w12, [x29, #-32]
   14244:	and	w8, w12, w13
   14248:	stp	x6, x4, [x29, #-80]
   1424c:	str	x7, [sp, #32]
   14250:	stur	x23, [x29, #-88]
   14254:	stp	x24, x30, [sp, #40]
   14258:	br	x9
   1425c:	mov	x21, x7
   14260:	mov	w9, w22
   14264:	lsr	w8, w27, #24
   14268:	cbnz	w8, 14288 <lzma_mode_is_supported@@XZ_5.0+0x30a0>
   1426c:	cmp	x28, x4
   14270:	b.eq	1429c <lzma_mode_is_supported@@XZ_5.0+0x30b4>  // b.none
   14274:	ldrb	w8, [x6, x28]
   14278:	add	x28, x28, #0x1
   1427c:	lsl	w27, w27, #8
   14280:	bfi	w8, w9, #8, #24
   14284:	mov	w9, w8
   14288:	ldr	x10, [sp]
   1428c:	mov	w0, wzr
   14290:	mov	w8, #0x1                   	// #1
   14294:	str	w8, [x10]
   14298:	b	161a8 <lzma_mode_is_supported@@XZ_5.0+0x4fc0>
   1429c:	ldr	x8, [sp]
   142a0:	mov	w0, wzr
   142a4:	str	wzr, [x8]
   142a8:	b	16e64 <lzma_mode_is_supported@@XZ_5.0+0x5c7c>
   142ac:	ldur	w8, [x29, #-32]
   142b0:	and	w8, w8, w21
   142b4:	cmn	x23, #0x1
   142b8:	b.eq	142c4 <lzma_mode_is_supported@@XZ_5.0+0x30dc>  // b.none
   142bc:	cmp	x21, x7
   142c0:	b.eq	1425c <lzma_mode_is_supported@@XZ_5.0+0x3074>  // b.none
   142c4:	lsr	w9, w27, #24
   142c8:	cbnz	w9, 142e8 <lzma_mode_is_supported@@XZ_5.0+0x3100>
   142cc:	cmp	x28, x4
   142d0:	b.eq	16e50 <lzma_mode_is_supported@@XZ_5.0+0x5c68>  // b.none
   142d4:	ldrb	w9, [x6, x28]
   142d8:	lsl	w11, w27, #8
   142dc:	add	x28, x28, #0x1
   142e0:	bfi	w9, w22, #8, #24
   142e4:	b	142f0 <lzma_mode_is_supported@@XZ_5.0+0x3108>
   142e8:	mov	w11, w27
   142ec:	mov	w9, w22
   142f0:	ldur	x12, [x29, #-16]
   142f4:	mov	w10, w15
   142f8:	lsr	w13, w11, #11
   142fc:	add	x10, x12, x10, lsl #5
   14300:	add	x10, x10, w8, uxtw #1
   14304:	add	x10, x10, #0x6, lsl #12
   14308:	ldrh	w12, [x10]
   1430c:	mul	w27, w13, w12
   14310:	subs	w22, w9, w27
   14314:	b.cs	14754 <lzma_mode_is_supported@@XZ_5.0+0x356c>  // b.hs, b.nlast
   14318:	mov	w8, #0x800                 	// #2048
   1431c:	cmp	x21, #0x0
   14320:	sub	w8, w8, w12
   14324:	add	w8, w12, w8, lsr #5
   14328:	csel	x11, x24, xzr, eq  // eq = none
   1432c:	add	x11, x21, x11
   14330:	strh	w8, [x10]
   14334:	add	x8, x11, x30
   14338:	ldp	x12, x10, [sp, #88]
   1433c:	ldurb	w8, [x8, #-1]
   14340:	mov	w11, #0x8                   	// #8
   14344:	cmp	w15, #0x6
   14348:	and	x10, x21, x10
   1434c:	sub	w11, w11, w12
   14350:	lsr	w8, w8, w11
   14354:	lsl	x10, x10, x12
   14358:	add	x8, x10, x8
   1435c:	ldur	x10, [x29, #-16]
   14360:	mov	w11, #0x600                 	// #1536
   14364:	madd	x18, x8, x11, x10
   14368:	b.hi	161b0 <lzma_mode_is_supported@@XZ_5.0+0x4fc8>  // b.pmore
   1436c:	mov	w19, #0x1                   	// #1
   14370:	mov	w22, w9
   14374:	lsr	w8, w27, #24
   14378:	cbnz	w8, 14398 <lzma_mode_is_supported@@XZ_5.0+0x31b0>
   1437c:	cmp	x28, x4
   14380:	b.eq	16b34 <lzma_mode_is_supported@@XZ_5.0+0x594c>  // b.none
   14384:	ldrb	w8, [x6, x28]
   14388:	lsl	w9, w27, #8
   1438c:	add	x28, x28, #0x1
   14390:	bfi	w8, w22, #8, #24
   14394:	b	143a0 <lzma_mode_is_supported@@XZ_5.0+0x31b8>
   14398:	mov	w9, w27
   1439c:	mov	w8, w22
   143a0:	ldrh	w11, [x18, w19, uxtw #1]
   143a4:	lsr	w10, w9, #11
   143a8:	mul	w27, w10, w11
   143ac:	subs	w22, w8, w27
   143b0:	mov	w10, w19
   143b4:	b.cs	143f4 <lzma_mode_is_supported@@XZ_5.0+0x320c>  // b.hs, b.nlast
   143b8:	mov	w9, #0x800                 	// #2048
   143bc:	sub	w9, w9, w11
   143c0:	add	w9, w11, w9, lsr #5
   143c4:	lsl	w19, w19, #1
   143c8:	strh	w9, [x18, x10, lsl #1]
   143cc:	mov	w22, w8
   143d0:	lsr	w8, w27, #24
   143d4:	cbnz	w8, 14414 <lzma_mode_is_supported@@XZ_5.0+0x322c>
   143d8:	cmp	x28, x4
   143dc:	b.eq	16b40 <lzma_mode_is_supported@@XZ_5.0+0x5958>  // b.none
   143e0:	ldrb	w8, [x6, x28]
   143e4:	lsl	w9, w27, #8
   143e8:	add	x28, x28, #0x1
   143ec:	bfi	w8, w22, #8, #24
   143f0:	b	1441c <lzma_mode_is_supported@@XZ_5.0+0x3234>
   143f4:	sub	w27, w9, w27
   143f8:	mov	w9, #0x1                   	// #1
   143fc:	bfi	w9, w19, #1, #31
   14400:	sub	w8, w11, w11, lsr #5
   14404:	mov	w19, w9
   14408:	strh	w8, [x18, x10, lsl #1]
   1440c:	lsr	w8, w27, #24
   14410:	cbz	w8, 143d8 <lzma_mode_is_supported@@XZ_5.0+0x31f0>
   14414:	mov	w9, w27
   14418:	mov	w8, w22
   1441c:	ldrh	w11, [x18, w19, uxtw #1]
   14420:	lsr	w10, w9, #11
   14424:	mul	w27, w10, w11
   14428:	subs	w22, w8, w27
   1442c:	mov	w10, w19
   14430:	b.cs	14470 <lzma_mode_is_supported@@XZ_5.0+0x3288>  // b.hs, b.nlast
   14434:	mov	w9, #0x800                 	// #2048
   14438:	sub	w9, w9, w11
   1443c:	add	w9, w11, w9, lsr #5
   14440:	lsl	w19, w19, #1
   14444:	strh	w9, [x18, x10, lsl #1]
   14448:	mov	w22, w8
   1444c:	lsr	w8, w27, #24
   14450:	cbnz	w8, 14490 <lzma_mode_is_supported@@XZ_5.0+0x32a8>
   14454:	cmp	x28, x4
   14458:	b.eq	16b4c <lzma_mode_is_supported@@XZ_5.0+0x5964>  // b.none
   1445c:	ldrb	w8, [x6, x28]
   14460:	lsl	w9, w27, #8
   14464:	add	x28, x28, #0x1
   14468:	bfi	w8, w22, #8, #24
   1446c:	b	14498 <lzma_mode_is_supported@@XZ_5.0+0x32b0>
   14470:	sub	w27, w9, w27
   14474:	mov	w9, #0x1                   	// #1
   14478:	bfi	w9, w19, #1, #31
   1447c:	sub	w8, w11, w11, lsr #5
   14480:	mov	w19, w9
   14484:	strh	w8, [x18, x10, lsl #1]
   14488:	lsr	w8, w27, #24
   1448c:	cbz	w8, 14454 <lzma_mode_is_supported@@XZ_5.0+0x326c>
   14490:	mov	w9, w27
   14494:	mov	w8, w22
   14498:	ldrh	w11, [x18, w19, uxtw #1]
   1449c:	lsr	w10, w9, #11
   144a0:	mul	w27, w10, w11
   144a4:	subs	w22, w8, w27
   144a8:	mov	w10, w19
   144ac:	b.cs	144ec <lzma_mode_is_supported@@XZ_5.0+0x3304>  // b.hs, b.nlast
   144b0:	mov	w9, #0x800                 	// #2048
   144b4:	sub	w9, w9, w11
   144b8:	add	w9, w11, w9, lsr #5
   144bc:	lsl	w19, w19, #1
   144c0:	strh	w9, [x18, x10, lsl #1]
   144c4:	mov	w22, w8
   144c8:	lsr	w8, w27, #24
   144cc:	cbnz	w8, 1450c <lzma_mode_is_supported@@XZ_5.0+0x3324>
   144d0:	cmp	x28, x4
   144d4:	b.eq	16b58 <lzma_mode_is_supported@@XZ_5.0+0x5970>  // b.none
   144d8:	ldrb	w8, [x6, x28]
   144dc:	lsl	w9, w27, #8
   144e0:	add	x28, x28, #0x1
   144e4:	bfi	w8, w22, #8, #24
   144e8:	b	14514 <lzma_mode_is_supported@@XZ_5.0+0x332c>
   144ec:	sub	w27, w9, w27
   144f0:	mov	w9, #0x1                   	// #1
   144f4:	bfi	w9, w19, #1, #31
   144f8:	sub	w8, w11, w11, lsr #5
   144fc:	mov	w19, w9
   14500:	strh	w8, [x18, x10, lsl #1]
   14504:	lsr	w8, w27, #24
   14508:	cbz	w8, 144d0 <lzma_mode_is_supported@@XZ_5.0+0x32e8>
   1450c:	mov	w9, w27
   14510:	mov	w8, w22
   14514:	ldrh	w11, [x18, w19, uxtw #1]
   14518:	lsr	w10, w9, #11
   1451c:	mul	w27, w10, w11
   14520:	subs	w22, w8, w27
   14524:	mov	w10, w19
   14528:	b.cs	14568 <lzma_mode_is_supported@@XZ_5.0+0x3380>  // b.hs, b.nlast
   1452c:	mov	w9, #0x800                 	// #2048
   14530:	sub	w9, w9, w11
   14534:	add	w9, w11, w9, lsr #5
   14538:	lsl	w19, w19, #1
   1453c:	strh	w9, [x18, x10, lsl #1]
   14540:	mov	w22, w8
   14544:	lsr	w8, w27, #24
   14548:	cbnz	w8, 14588 <lzma_mode_is_supported@@XZ_5.0+0x33a0>
   1454c:	cmp	x28, x4
   14550:	b.eq	16b64 <lzma_mode_is_supported@@XZ_5.0+0x597c>  // b.none
   14554:	ldrb	w8, [x6, x28]
   14558:	lsl	w9, w27, #8
   1455c:	add	x28, x28, #0x1
   14560:	bfi	w8, w22, #8, #24
   14564:	b	14590 <lzma_mode_is_supported@@XZ_5.0+0x33a8>
   14568:	sub	w27, w9, w27
   1456c:	mov	w9, #0x1                   	// #1
   14570:	bfi	w9, w19, #1, #31
   14574:	sub	w8, w11, w11, lsr #5
   14578:	mov	w19, w9
   1457c:	strh	w8, [x18, x10, lsl #1]
   14580:	lsr	w8, w27, #24
   14584:	cbz	w8, 1454c <lzma_mode_is_supported@@XZ_5.0+0x3364>
   14588:	mov	w9, w27
   1458c:	mov	w8, w22
   14590:	ldrh	w11, [x18, w19, uxtw #1]
   14594:	lsr	w10, w9, #11
   14598:	mul	w27, w10, w11
   1459c:	subs	w22, w8, w27
   145a0:	mov	w10, w19
   145a4:	b.cs	145e4 <lzma_mode_is_supported@@XZ_5.0+0x33fc>  // b.hs, b.nlast
   145a8:	mov	w9, #0x800                 	// #2048
   145ac:	sub	w9, w9, w11
   145b0:	add	w9, w11, w9, lsr #5
   145b4:	lsl	w19, w19, #1
   145b8:	strh	w9, [x18, x10, lsl #1]
   145bc:	mov	w22, w8
   145c0:	lsr	w8, w27, #24
   145c4:	cbnz	w8, 14604 <lzma_mode_is_supported@@XZ_5.0+0x341c>
   145c8:	cmp	x28, x4
   145cc:	b.eq	16b70 <lzma_mode_is_supported@@XZ_5.0+0x5988>  // b.none
   145d0:	ldrb	w8, [x6, x28]
   145d4:	lsl	w9, w27, #8
   145d8:	add	x28, x28, #0x1
   145dc:	bfi	w8, w22, #8, #24
   145e0:	b	1460c <lzma_mode_is_supported@@XZ_5.0+0x3424>
   145e4:	sub	w27, w9, w27
   145e8:	mov	w9, #0x1                   	// #1
   145ec:	bfi	w9, w19, #1, #31
   145f0:	sub	w8, w11, w11, lsr #5
   145f4:	mov	w19, w9
   145f8:	strh	w8, [x18, x10, lsl #1]
   145fc:	lsr	w8, w27, #24
   14600:	cbz	w8, 145c8 <lzma_mode_is_supported@@XZ_5.0+0x33e0>
   14604:	mov	w9, w27
   14608:	mov	w8, w22
   1460c:	ldrh	w11, [x18, w19, uxtw #1]
   14610:	lsr	w10, w9, #11
   14614:	mul	w27, w10, w11
   14618:	subs	w22, w8, w27
   1461c:	mov	w10, w19
   14620:	b.cs	14660 <lzma_mode_is_supported@@XZ_5.0+0x3478>  // b.hs, b.nlast
   14624:	mov	w9, #0x800                 	// #2048
   14628:	sub	w9, w9, w11
   1462c:	add	w9, w11, w9, lsr #5
   14630:	lsl	w19, w19, #1
   14634:	strh	w9, [x18, x10, lsl #1]
   14638:	mov	w22, w8
   1463c:	lsr	w8, w27, #24
   14640:	cbnz	w8, 14680 <lzma_mode_is_supported@@XZ_5.0+0x3498>
   14644:	cmp	x28, x4
   14648:	b.eq	16b7c <lzma_mode_is_supported@@XZ_5.0+0x5994>  // b.none
   1464c:	ldrb	w8, [x6, x28]
   14650:	lsl	w9, w27, #8
   14654:	add	x28, x28, #0x1
   14658:	bfi	w8, w22, #8, #24
   1465c:	b	14688 <lzma_mode_is_supported@@XZ_5.0+0x34a0>
   14660:	sub	w27, w9, w27
   14664:	mov	w9, #0x1                   	// #1
   14668:	bfi	w9, w19, #1, #31
   1466c:	sub	w8, w11, w11, lsr #5
   14670:	mov	w19, w9
   14674:	strh	w8, [x18, x10, lsl #1]
   14678:	lsr	w8, w27, #24
   1467c:	cbz	w8, 14644 <lzma_mode_is_supported@@XZ_5.0+0x345c>
   14680:	mov	w9, w27
   14684:	mov	w8, w22
   14688:	ldrh	w11, [x18, w19, uxtw #1]
   1468c:	lsr	w10, w9, #11
   14690:	mul	w27, w10, w11
   14694:	subs	w22, w8, w27
   14698:	mov	w10, w19
   1469c:	b.cs	146dc <lzma_mode_is_supported@@XZ_5.0+0x34f4>  // b.hs, b.nlast
   146a0:	mov	w9, #0x800                 	// #2048
   146a4:	sub	w9, w9, w11
   146a8:	add	w9, w11, w9, lsr #5
   146ac:	lsl	w19, w19, #1
   146b0:	strh	w9, [x18, x10, lsl #1]
   146b4:	mov	w22, w8
   146b8:	lsr	w8, w27, #24
   146bc:	cbnz	w8, 146fc <lzma_mode_is_supported@@XZ_5.0+0x3514>
   146c0:	cmp	x28, x4
   146c4:	b.eq	16b88 <lzma_mode_is_supported@@XZ_5.0+0x59a0>  // b.none
   146c8:	ldrb	w8, [x6, x28]
   146cc:	lsl	w9, w27, #8
   146d0:	add	x28, x28, #0x1
   146d4:	bfi	w8, w22, #8, #24
   146d8:	b	14704 <lzma_mode_is_supported@@XZ_5.0+0x351c>
   146dc:	sub	w27, w9, w27
   146e0:	mov	w9, #0x1                   	// #1
   146e4:	bfi	w9, w19, #1, #31
   146e8:	sub	w8, w11, w11, lsr #5
   146ec:	mov	w19, w9
   146f0:	strh	w8, [x18, x10, lsl #1]
   146f4:	lsr	w8, w27, #24
   146f8:	cbz	w8, 146c0 <lzma_mode_is_supported@@XZ_5.0+0x34d8>
   146fc:	mov	w9, w27
   14700:	mov	w8, w22
   14704:	ldrh	w12, [x18, w19, uxtw #1]
   14708:	lsr	w10, w9, #11
   1470c:	mul	w27, w10, w12
   14710:	subs	w11, w8, w27
   14714:	mov	w10, w19
   14718:	b.cs	14738 <lzma_mode_is_supported@@XZ_5.0+0x3550>  // b.hs, b.nlast
   1471c:	mov	w9, #0x800                 	// #2048
   14720:	sub	w9, w9, w12
   14724:	add	w9, w12, w9, lsr #5
   14728:	strh	w9, [x18, x10, lsl #1]
   1472c:	lsl	w9, w19, #1
   14730:	mov	w10, w26
   14734:	b	1666c <lzma_mode_is_supported@@XZ_5.0+0x5484>
   14738:	sub	w27, w9, w27
   1473c:	sub	w8, w12, w12, lsr #5
   14740:	mov	w9, #0x1                   	// #1
   14744:	strh	w8, [x18, x10, lsl #1]
   14748:	bfi	w9, w19, #1, #31
   1474c:	mov	w10, w26
   14750:	b	16668 <lzma_mode_is_supported@@XZ_5.0+0x5480>
   14754:	sub	w27, w11, w27
   14758:	sub	w9, w12, w12, lsr #5
   1475c:	strh	w9, [x10]
   14760:	mov	w1, w17
   14764:	ldur	w17, [x29, #-28]
   14768:	lsr	w9, w27, #24
   1476c:	cbnz	w9, 1478c <lzma_mode_is_supported@@XZ_5.0+0x35a4>
   14770:	cmp	x28, x4
   14774:	b.eq	16b94 <lzma_mode_is_supported@@XZ_5.0+0x59ac>  // b.none
   14778:	ldrb	w10, [x6, x28]
   1477c:	lsl	w14, w27, #8
   14780:	add	x28, x28, #0x1
   14784:	bfi	w10, w22, #8, #24
   14788:	b	14794 <lzma_mode_is_supported@@XZ_5.0+0x35ac>
   1478c:	mov	w14, w27
   14790:	mov	w10, w22
   14794:	ldur	x11, [x29, #-16]
   14798:	mov	w9, #0x6180                	// #24960
   1479c:	mov	w13, w15
   147a0:	add	x11, x11, x9
   147a4:	ldrh	w12, [x11, w15, uxtw #1]
   147a8:	lsr	w9, w14, #11
   147ac:	mul	w27, w9, w12
   147b0:	subs	w9, w10, w27
   147b4:	b.cs	148d4 <lzma_mode_is_supported@@XZ_5.0+0x36ec>  // b.hs, b.nlast
   147b8:	mov	w9, #0x800                 	// #2048
   147bc:	cmp	w15, #0x7
   147c0:	mov	w14, #0xa                   	// #10
   147c4:	mov	w15, #0x7                   	// #7
   147c8:	sub	w9, w9, w12
   147cc:	csel	w15, w15, w14, cc  // cc = lo, ul, last
   147d0:	add	w9, w12, w9, lsr #5
   147d4:	mov	w19, #0x1                   	// #1
   147d8:	mov	w22, w10
   147dc:	stur	w3, [x29, #-28]
   147e0:	stur	w1, [x29, #-36]
   147e4:	strh	w9, [x11, x13, lsl #1]
   147e8:	lsr	w9, w27, #24
   147ec:	cbnz	w9, 1480c <lzma_mode_is_supported@@XZ_5.0+0x3624>
   147f0:	cmp	x28, x4
   147f4:	b.eq	16bb0 <lzma_mode_is_supported@@XZ_5.0+0x59c8>  // b.none
   147f8:	ldrb	w9, [x6, x28]
   147fc:	lsl	w10, w27, #8
   14800:	add	x28, x28, #0x1
   14804:	bfi	w9, w22, #8, #24
   14808:	b	14814 <lzma_mode_is_supported@@XZ_5.0+0x362c>
   1480c:	mov	w10, w27
   14810:	mov	w9, w22
   14814:	ldur	x11, [x29, #-24]
   14818:	lsr	w12, w10, #11
   1481c:	ldrh	w11, [x11]
   14820:	mul	w27, w12, w11
   14824:	subs	w22, w9, w27
   14828:	b.cs	15098 <lzma_mode_is_supported@@XZ_5.0+0x3eb0>  // b.hs, b.nlast
   1482c:	mov	w10, #0x800                 	// #2048
   14830:	sub	w10, w10, w11
   14834:	add	w10, w11, w10, lsr #5
   14838:	ldur	x11, [x29, #-24]
   1483c:	mov	w22, w9
   14840:	strh	w10, [x11]
   14844:	lsr	w9, w27, #24
   14848:	cbnz	w9, 14868 <lzma_mode_is_supported@@XZ_5.0+0x3680>
   1484c:	cmp	x28, x4
   14850:	b.eq	16bbc <lzma_mode_is_supported@@XZ_5.0+0x59d4>  // b.none
   14854:	ldrb	w9, [x6, x28]
   14858:	lsl	w10, w27, #8
   1485c:	add	x28, x28, #0x1
   14860:	bfi	w9, w22, #8, #24
   14864:	b	14870 <lzma_mode_is_supported@@XZ_5.0+0x3688>
   14868:	mov	w10, w27
   1486c:	mov	w9, w22
   14870:	ldur	x11, [x29, #-16]
   14874:	mov	w12, #0x6668                	// #26216
   14878:	lsr	w13, w10, #11
   1487c:	add	x11, x11, w8, uxtw #4
   14880:	add	x11, x11, w19, uxtw #1
   14884:	add	x11, x11, x12
   14888:	ldrh	w12, [x11]
   1488c:	mul	w27, w13, w12
   14890:	subs	w22, w9, w27
   14894:	b.cs	14a0c <lzma_mode_is_supported@@XZ_5.0+0x3824>  // b.hs, b.nlast
   14898:	mov	w10, #0x800                 	// #2048
   1489c:	sub	w10, w10, w12
   148a0:	add	w10, w12, w10, lsr #5
   148a4:	lsl	w19, w19, #1
   148a8:	strh	w10, [x11]
   148ac:	mov	w22, w9
   148b0:	lsr	w9, w27, #24
   148b4:	cbnz	w9, 14a2c <lzma_mode_is_supported@@XZ_5.0+0x3844>
   148b8:	cmp	x28, x4
   148bc:	b.eq	16bc8 <lzma_mode_is_supported@@XZ_5.0+0x59e0>  // b.none
   148c0:	ldrb	w9, [x6, x28]
   148c4:	lsl	w10, w27, #8
   148c8:	add	x28, x28, #0x1
   148cc:	bfi	w9, w22, #8, #24
   148d0:	b	14a34 <lzma_mode_is_supported@@XZ_5.0+0x384c>
   148d4:	sub	w27, w14, w27
   148d8:	sub	w10, w12, w12, lsr #5
   148dc:	strh	w10, [x11, x13, lsl #1]
   148e0:	cbz	x16, 16e40 <lzma_mode_is_supported@@XZ_5.0+0x5c58>
   148e4:	stur	w17, [x29, #-28]
   148e8:	mov	w17, w1
   148ec:	mov	w22, w9
   148f0:	lsr	w9, w27, #24
   148f4:	cbnz	w9, 14914 <lzma_mode_is_supported@@XZ_5.0+0x372c>
   148f8:	cmp	x28, x4
   148fc:	b.eq	16bd4 <lzma_mode_is_supported@@XZ_5.0+0x59ec>  // b.none
   14900:	ldrb	w9, [x6, x28]
   14904:	lsl	w27, w27, #8
   14908:	add	x28, x28, #0x1
   1490c:	bfi	w9, w22, #8, #24
   14910:	b	14918 <lzma_mode_is_supported@@XZ_5.0+0x3730>
   14914:	mov	w9, w22
   14918:	ldur	x11, [x29, #-16]
   1491c:	mov	w10, #0x6198                	// #24984
   14920:	mov	w13, w15
   14924:	add	x11, x11, x10
   14928:	ldrh	w12, [x11, w15, uxtw #1]
   1492c:	lsr	w10, w27, #11
   14930:	mul	w10, w10, w12
   14934:	subs	w22, w9, w10
   14938:	b.cs	14a98 <lzma_mode_is_supported@@XZ_5.0+0x38b0>  // b.hs, b.nlast
   1493c:	mov	w14, #0x800                 	// #2048
   14940:	sub	w14, w14, w12
   14944:	add	w12, w12, w14, lsr #5
   14948:	mov	w27, w10
   1494c:	mov	w22, w9
   14950:	strh	w12, [x11, x13, lsl #1]
   14954:	lsr	w9, w27, #24
   14958:	cbnz	w9, 14978 <lzma_mode_is_supported@@XZ_5.0+0x3790>
   1495c:	cmp	x28, x4
   14960:	b.eq	16be0 <lzma_mode_is_supported@@XZ_5.0+0x59f8>  // b.none
   14964:	ldrb	w10, [x6, x28]
   14968:	lsl	w11, w27, #8
   1496c:	add	x28, x28, #0x1
   14970:	bfi	w10, w22, #8, #24
   14974:	b	14980 <lzma_mode_is_supported@@XZ_5.0+0x3798>
   14978:	mov	w11, w27
   1497c:	mov	w10, w22
   14980:	ldur	x12, [x29, #-16]
   14984:	mov	w9, w15
   14988:	add	x9, x12, x9, lsl #5
   1498c:	add	x9, x9, w8, uxtw #1
   14990:	mov	w12, #0x61e0                	// #25056
   14994:	add	x12, x9, x12
   14998:	ldrh	w13, [x12]
   1499c:	lsr	w9, w11, #11
   149a0:	mul	w27, w9, w13
   149a4:	subs	w9, w10, w27
   149a8:	b.cs	14b14 <lzma_mode_is_supported@@XZ_5.0+0x392c>  // b.hs, b.nlast
   149ac:	mov	w8, #0x800                 	// #2048
   149b0:	cmp	w15, #0x7
   149b4:	mov	w9, #0xb                   	// #11
   149b8:	mov	w11, #0x9                   	// #9
   149bc:	sub	w8, w8, w13
   149c0:	add	w8, w13, w8, lsr #5
   149c4:	csel	w15, w11, w9, cc  // cc = lo, ul, last
   149c8:	mov	w22, w10
   149cc:	strh	w8, [x12]
   149d0:	cmp	x21, x7
   149d4:	b.eq	16b10 <lzma_mode_is_supported@@XZ_5.0+0x5928>  // b.none
   149d8:	mov	w8, w3
   149dc:	mvn	x9, x8
   149e0:	cmp	x21, x8
   149e4:	add	x8, x21, x9
   149e8:	csel	x9, xzr, x24, hi  // hi = pmore
   149ec:	add	x8, x8, x9
   149f0:	ldrb	w8, [x30, x8]
   149f4:	add	x9, x21, #0x1
   149f8:	cmp	x9, x16
   149fc:	csinc	x16, x16, x21, ls  // ls = plast
   14a00:	strb	w8, [x30, x21]
   14a04:	mov	x21, x9
   14a08:	b	142ac <lzma_mode_is_supported@@XZ_5.0+0x30c4>
   14a0c:	sub	w27, w10, w27
   14a10:	mov	w10, #0x1                   	// #1
   14a14:	bfi	w10, w19, #1, #31
   14a18:	sub	w9, w12, w12, lsr #5
   14a1c:	mov	w19, w10
   14a20:	strh	w9, [x11]
   14a24:	lsr	w9, w27, #24
   14a28:	cbz	w9, 148b8 <lzma_mode_is_supported@@XZ_5.0+0x36d0>
   14a2c:	mov	w10, w27
   14a30:	mov	w9, w22
   14a34:	ldur	x11, [x29, #-16]
   14a38:	mov	w12, #0x6668                	// #26216
   14a3c:	lsr	w13, w10, #11
   14a40:	add	x11, x11, w8, uxtw #4
   14a44:	add	x11, x11, w19, uxtw #1
   14a48:	add	x11, x11, x12
   14a4c:	ldrh	w12, [x11]
   14a50:	mul	w27, w13, w12
   14a54:	subs	w22, w9, w27
   14a58:	b.cs	14b30 <lzma_mode_is_supported@@XZ_5.0+0x3948>  // b.hs, b.nlast
   14a5c:	mov	w10, #0x800                 	// #2048
   14a60:	sub	w10, w10, w12
   14a64:	add	w10, w12, w10, lsr #5
   14a68:	lsl	w19, w19, #1
   14a6c:	strh	w10, [x11]
   14a70:	mov	w22, w9
   14a74:	lsr	w9, w27, #24
   14a78:	cbnz	w9, 14b50 <lzma_mode_is_supported@@XZ_5.0+0x3968>
   14a7c:	cmp	x28, x4
   14a80:	b.eq	16bec <lzma_mode_is_supported@@XZ_5.0+0x5a04>  // b.none
   14a84:	ldrb	w9, [x6, x28]
   14a88:	lsl	w10, w27, #8
   14a8c:	add	x28, x28, #0x1
   14a90:	bfi	w9, w22, #8, #24
   14a94:	b	14b58 <lzma_mode_is_supported@@XZ_5.0+0x3970>
   14a98:	sub	w27, w27, w10
   14a9c:	sub	w9, w12, w12, lsr #5
   14aa0:	strh	w9, [x11, x13, lsl #1]
   14aa4:	lsr	w9, w27, #24
   14aa8:	cbnz	w9, 14ac8 <lzma_mode_is_supported@@XZ_5.0+0x38e0>
   14aac:	cmp	x28, x4
   14ab0:	b.eq	16bf8 <lzma_mode_is_supported@@XZ_5.0+0x5a10>  // b.none
   14ab4:	ldrb	w9, [x6, x28]
   14ab8:	lsl	w10, w27, #8
   14abc:	add	x28, x28, #0x1
   14ac0:	bfi	w9, w22, #8, #24
   14ac4:	b	14ad0 <lzma_mode_is_supported@@XZ_5.0+0x38e8>
   14ac8:	mov	w10, w27
   14acc:	mov	w9, w22
   14ad0:	ldur	x12, [x29, #-16]
   14ad4:	mov	w11, #0x61b0                	// #25008
   14ad8:	lsr	w13, w10, #11
   14adc:	add	x11, x12, x11
   14ae0:	ldrh	w12, [x11, w15, uxtw #1]
   14ae4:	mul	w27, w13, w12
   14ae8:	subs	w22, w9, w27
   14aec:	mov	w13, w15
   14af0:	b.cs	14b9c <lzma_mode_is_supported@@XZ_5.0+0x39b4>  // b.hs, b.nlast
   14af4:	mov	w10, #0x800                 	// #2048
   14af8:	ldur	w0, [x29, #-28]
   14afc:	sub	w10, w10, w12
   14b00:	add	w10, w12, w10, lsr #5
   14b04:	strh	w10, [x11, x13, lsl #1]
   14b08:	mov	w1, w3
   14b0c:	stur	w17, [x29, #-28]
   14b10:	b	14c50 <lzma_mode_is_supported@@XZ_5.0+0x3a68>
   14b14:	ldur	w1, [x29, #-28]
   14b18:	sub	w10, w13, w13, lsr #5
   14b1c:	sub	w27, w11, w27
   14b20:	strh	w10, [x12]
   14b24:	mov	w0, w3
   14b28:	stur	w17, [x29, #-28]
   14b2c:	b	14c50 <lzma_mode_is_supported@@XZ_5.0+0x3a68>
   14b30:	sub	w27, w10, w27
   14b34:	mov	w10, #0x1                   	// #1
   14b38:	bfi	w10, w19, #1, #31
   14b3c:	sub	w9, w12, w12, lsr #5
   14b40:	mov	w19, w10
   14b44:	strh	w9, [x11]
   14b48:	lsr	w9, w27, #24
   14b4c:	cbz	w9, 14a7c <lzma_mode_is_supported@@XZ_5.0+0x3894>
   14b50:	mov	w10, w27
   14b54:	mov	w9, w22
   14b58:	ldur	x11, [x29, #-16]
   14b5c:	add	x8, x11, w8, uxtw #4
   14b60:	add	x8, x8, w19, uxtw #1
   14b64:	mov	w11, #0x6668                	// #26216
   14b68:	add	x8, x8, x11
   14b6c:	ldrh	w12, [x8]
   14b70:	lsr	w11, w10, #11
   14b74:	mul	w27, w11, w12
   14b78:	subs	w11, w9, w27
   14b7c:	b.cs	14c14 <lzma_mode_is_supported@@XZ_5.0+0x3a2c>  // b.hs, b.nlast
   14b80:	mov	w10, #0x800                 	// #2048
   14b84:	sub	w10, w10, w12
   14b88:	add	w10, w12, w10, lsr #5
   14b8c:	strh	w10, [x8]
   14b90:	lsl	w10, w19, #1
   14b94:	sub	w2, w10, #0x6
   14b98:	b	15ab8 <lzma_mode_is_supported@@XZ_5.0+0x48d0>
   14b9c:	sub	w27, w10, w27
   14ba0:	sub	w9, w12, w12, lsr #5
   14ba4:	strh	w9, [x11, x13, lsl #1]
   14ba8:	lsr	w9, w27, #24
   14bac:	cbnz	w9, 14bcc <lzma_mode_is_supported@@XZ_5.0+0x39e4>
   14bb0:	cmp	x28, x4
   14bb4:	b.eq	16c04 <lzma_mode_is_supported@@XZ_5.0+0x5a1c>  // b.none
   14bb8:	ldrb	w9, [x6, x28]
   14bbc:	lsl	w10, w27, #8
   14bc0:	add	x28, x28, #0x1
   14bc4:	bfi	w9, w22, #8, #24
   14bc8:	b	14bd4 <lzma_mode_is_supported@@XZ_5.0+0x39ec>
   14bcc:	mov	w10, w27
   14bd0:	mov	w9, w22
   14bd4:	ldur	x12, [x29, #-16]
   14bd8:	mov	w11, #0x61c8                	// #25032
   14bdc:	mov	w14, w15
   14be0:	add	x12, x12, x11
   14be4:	ldrh	w13, [x12, w15, uxtw #1]
   14be8:	lsr	w11, w10, #11
   14bec:	mul	w27, w11, w13
   14bf0:	subs	w11, w9, w27
   14bf4:	b.cs	14c34 <lzma_mode_is_supported@@XZ_5.0+0x3a4c>  // b.hs, b.nlast
   14bf8:	mov	w10, #0x800                 	// #2048
   14bfc:	sub	w10, w10, w13
   14c00:	add	w10, w13, w10, lsr #5
   14c04:	strh	w10, [x12, x14, lsl #1]
   14c08:	mov	w0, w17
   14c0c:	mov	w1, w3
   14c10:	b	14c50 <lzma_mode_is_supported@@XZ_5.0+0x3a68>
   14c14:	sub	w27, w10, w27
   14c18:	mov	w10, #0x1                   	// #1
   14c1c:	sub	w9, w12, w12, lsr #5
   14c20:	bfi	w10, w19, #1, #31
   14c24:	strh	w9, [x8]
   14c28:	mov	w9, w11
   14c2c:	sub	w2, w10, #0x6
   14c30:	b	15ab8 <lzma_mode_is_supported@@XZ_5.0+0x48d0>
   14c34:	ldur	w0, [x29, #-36]
   14c38:	sub	w9, w13, w13, lsr #5
   14c3c:	sub	w27, w10, w27
   14c40:	strh	w9, [x12, x14, lsl #1]
   14c44:	mov	w1, w3
   14c48:	mov	w9, w11
   14c4c:	stur	w17, [x29, #-36]
   14c50:	ldur	w17, [x29, #-28]
   14c54:	cmp	w15, #0x7
   14c58:	mov	w10, #0xb                   	// #11
   14c5c:	mov	w11, #0x8                   	// #8
   14c60:	mov	w3, w0
   14c64:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   14c68:	mov	w19, #0x1                   	// #1
   14c6c:	mov	w22, w9
   14c70:	stur	w1, [x29, #-28]
   14c74:	lsr	w10, w27, #24
   14c78:	mov	w9, w22
   14c7c:	cbnz	w10, 14ca0 <lzma_mode_is_supported@@XZ_5.0+0x3ab8>
   14c80:	cmp	x28, x4
   14c84:	b.eq	16c10 <lzma_mode_is_supported@@XZ_5.0+0x5a28>  // b.none
   14c88:	ldrb	w11, [x6, x28]
   14c8c:	add	x28, x28, #0x1
   14c90:	lsl	w10, w27, #8
   14c94:	bfi	w11, w9, #8, #24
   14c98:	mov	w9, w11
   14c9c:	b	14ca4 <lzma_mode_is_supported@@XZ_5.0+0x3abc>
   14ca0:	mov	w10, w27
   14ca4:	ldur	x11, [x29, #-24]
   14ca8:	lsr	w12, w10, #11
   14cac:	ldrh	w11, [x11, #1028]
   14cb0:	mul	w27, w12, w11
   14cb4:	subs	w22, w9, w27
   14cb8:	b.cs	14d64 <lzma_mode_is_supported@@XZ_5.0+0x3b7c>  // b.hs, b.nlast
   14cbc:	mov	w10, #0x800                 	// #2048
   14cc0:	sub	w10, w10, w11
   14cc4:	add	w10, w11, w10, lsr #5
   14cc8:	ldur	x11, [x29, #-24]
   14ccc:	mov	w22, w9
   14cd0:	strh	w10, [x11, #1028]
   14cd4:	lsr	w10, w27, #24
   14cd8:	mov	w9, w22
   14cdc:	cbnz	w10, 14cfc <lzma_mode_is_supported@@XZ_5.0+0x3b14>
   14ce0:	cmp	x28, x4
   14ce4:	b.eq	16c1c <lzma_mode_is_supported@@XZ_5.0+0x5a34>  // b.none
   14ce8:	ldrb	w10, [x6, x28]
   14cec:	add	x28, x28, #0x1
   14cf0:	lsl	w27, w27, #8
   14cf4:	bfi	w10, w9, #8, #24
   14cf8:	mov	w9, w10
   14cfc:	ldur	x10, [x29, #-16]
   14d00:	mov	w11, #0x6a6c                	// #27244
   14d04:	add	x10, x10, w8, uxtw #4
   14d08:	add	x10, x10, w19, uxtw #1
   14d0c:	add	x11, x10, x11
   14d10:	ldrh	w12, [x11]
   14d14:	lsr	w10, w27, #11
   14d18:	mul	w10, w10, w12
   14d1c:	subs	w22, w9, w10
   14d20:	b.cs	14e60 <lzma_mode_is_supported@@XZ_5.0+0x3c78>  // b.hs, b.nlast
   14d24:	mov	w13, #0x800                 	// #2048
   14d28:	sub	w13, w13, w12
   14d2c:	add	w12, w12, w13, lsr #5
   14d30:	lsl	w19, w19, #1
   14d34:	strh	w12, [x11]
   14d38:	mov	w27, w10
   14d3c:	mov	w22, w9
   14d40:	lsr	w9, w27, #24
   14d44:	cbnz	w9, 14e80 <lzma_mode_is_supported@@XZ_5.0+0x3c98>
   14d48:	cmp	x28, x4
   14d4c:	b.eq	16c28 <lzma_mode_is_supported@@XZ_5.0+0x5a40>  // b.none
   14d50:	ldrb	w9, [x6, x28]
   14d54:	lsl	w10, w27, #8
   14d58:	add	x28, x28, #0x1
   14d5c:	bfi	w9, w22, #8, #24
   14d60:	b	14e88 <lzma_mode_is_supported@@XZ_5.0+0x3ca0>
   14d64:	sub	w27, w10, w27
   14d68:	ldur	x10, [x29, #-24]
   14d6c:	sub	w9, w11, w11, lsr #5
   14d70:	strh	w9, [x10, #1028]
   14d74:	lsr	w10, w27, #24
   14d78:	mov	w9, w22
   14d7c:	cbnz	w10, 14d9c <lzma_mode_is_supported@@XZ_5.0+0x3bb4>
   14d80:	cmp	x28, x4
   14d84:	b.eq	16c34 <lzma_mode_is_supported@@XZ_5.0+0x5a4c>  // b.none
   14d88:	ldrb	w10, [x6, x28]
   14d8c:	add	x28, x28, #0x1
   14d90:	lsl	w27, w27, #8
   14d94:	bfi	w10, w9, #8, #24
   14d98:	mov	w9, w10
   14d9c:	ldur	x10, [x29, #-24]
   14da0:	ldrh	w11, [x10, #1030]
   14da4:	lsr	w10, w27, #11
   14da8:	mul	w10, w10, w11
   14dac:	subs	w22, w9, w10
   14db0:	b.cs	14eec <lzma_mode_is_supported@@XZ_5.0+0x3d04>  // b.hs, b.nlast
   14db4:	mov	w12, #0x800                 	// #2048
   14db8:	sub	w12, w12, w11
   14dbc:	add	w11, w11, w12, lsr #5
   14dc0:	ldur	x12, [x29, #-24]
   14dc4:	mov	w27, w10
   14dc8:	mov	w22, w9
   14dcc:	strh	w11, [x12, #1030]
   14dd0:	lsr	w10, w27, #24
   14dd4:	mov	w9, w22
   14dd8:	cbnz	w10, 14df8 <lzma_mode_is_supported@@XZ_5.0+0x3c10>
   14ddc:	cmp	x28, x4
   14de0:	b.eq	16c40 <lzma_mode_is_supported@@XZ_5.0+0x5a58>  // b.none
   14de4:	ldrb	w10, [x6, x28]
   14de8:	add	x28, x28, #0x1
   14dec:	lsl	w27, w27, #8
   14df0:	bfi	w10, w9, #8, #24
   14df4:	mov	w9, w10
   14df8:	ldur	x10, [x29, #-16]
   14dfc:	mov	w11, #0x6b6c                	// #27500
   14e00:	add	x10, x10, w8, uxtw #4
   14e04:	add	x10, x10, w19, uxtw #1
   14e08:	add	x11, x10, x11
   14e0c:	ldrh	w12, [x11]
   14e10:	lsr	w10, w27, #11
   14e14:	mul	w10, w10, w12
   14e18:	subs	w22, w9, w10
   14e1c:	b.cs	153d0 <lzma_mode_is_supported@@XZ_5.0+0x41e8>  // b.hs, b.nlast
   14e20:	mov	w13, #0x800                 	// #2048
   14e24:	sub	w13, w13, w12
   14e28:	add	w12, w12, w13, lsr #5
   14e2c:	lsl	w19, w19, #1
   14e30:	strh	w12, [x11]
   14e34:	mov	w27, w10
   14e38:	mov	w22, w9
   14e3c:	lsr	w9, w27, #24
   14e40:	cbnz	w9, 153f0 <lzma_mode_is_supported@@XZ_5.0+0x4208>
   14e44:	cmp	x28, x4
   14e48:	b.eq	16c4c <lzma_mode_is_supported@@XZ_5.0+0x5a64>  // b.none
   14e4c:	ldrb	w9, [x6, x28]
   14e50:	lsl	w10, w27, #8
   14e54:	add	x28, x28, #0x1
   14e58:	bfi	w9, w22, #8, #24
   14e5c:	b	153f8 <lzma_mode_is_supported@@XZ_5.0+0x4210>
   14e60:	sub	w27, w27, w10
   14e64:	mov	w10, #0x1                   	// #1
   14e68:	bfi	w10, w19, #1, #31
   14e6c:	sub	w9, w12, w12, lsr #5
   14e70:	mov	w19, w10
   14e74:	strh	w9, [x11]
   14e78:	lsr	w9, w27, #24
   14e7c:	cbz	w9, 14d48 <lzma_mode_is_supported@@XZ_5.0+0x3b60>
   14e80:	mov	w10, w27
   14e84:	mov	w9, w22
   14e88:	ldur	x11, [x29, #-16]
   14e8c:	mov	w12, #0x6a6c                	// #27244
   14e90:	lsr	w13, w10, #11
   14e94:	add	x11, x11, w8, uxtw #4
   14e98:	add	x11, x11, w19, uxtw #1
   14e9c:	add	x11, x11, x12
   14ea0:	ldrh	w12, [x11]
   14ea4:	mul	w27, w13, w12
   14ea8:	subs	w22, w9, w27
   14eac:	b.cs	14f88 <lzma_mode_is_supported@@XZ_5.0+0x3da0>  // b.hs, b.nlast
   14eb0:	mov	w10, #0x800                 	// #2048
   14eb4:	sub	w10, w10, w12
   14eb8:	add	w10, w12, w10, lsr #5
   14ebc:	lsl	w19, w19, #1
   14ec0:	strh	w10, [x11]
   14ec4:	mov	w22, w9
   14ec8:	lsr	w9, w27, #24
   14ecc:	cbnz	w9, 14fa8 <lzma_mode_is_supported@@XZ_5.0+0x3dc0>
   14ed0:	cmp	x28, x4
   14ed4:	b.eq	16c58 <lzma_mode_is_supported@@XZ_5.0+0x5a70>  // b.none
   14ed8:	ldrb	w9, [x6, x28]
   14edc:	lsl	w10, w27, #8
   14ee0:	add	x28, x28, #0x1
   14ee4:	bfi	w9, w22, #8, #24
   14ee8:	b	14fb0 <lzma_mode_is_supported@@XZ_5.0+0x3dc8>
   14eec:	ldur	x9, [x29, #-24]
   14ef0:	sub	w27, w27, w10
   14ef4:	sub	w8, w11, w11, lsr #5
   14ef8:	strh	w8, [x9, #1030]
   14efc:	lsr	w8, w27, #24
   14f00:	mov	w9, w22
   14f04:	cbnz	w8, 14f24 <lzma_mode_is_supported@@XZ_5.0+0x3d3c>
   14f08:	cmp	x28, x4
   14f0c:	b.eq	16c64 <lzma_mode_is_supported@@XZ_5.0+0x5a7c>  // b.none
   14f10:	ldrb	w8, [x6, x28]
   14f14:	add	x28, x28, #0x1
   14f18:	lsl	w27, w27, #8
   14f1c:	bfi	w8, w9, #8, #24
   14f20:	mov	w9, w8
   14f24:	ldur	x10, [x29, #-16]
   14f28:	mov	w8, #0x6c6c                	// #27756
   14f2c:	mov	w11, w19
   14f30:	add	x10, x10, x8
   14f34:	ldrh	w12, [x10, w19, uxtw #1]
   14f38:	lsr	w8, w27, #11
   14f3c:	mul	w8, w8, w12
   14f40:	subs	w22, w9, w8
   14f44:	b.cs	14ff0 <lzma_mode_is_supported@@XZ_5.0+0x3e08>  // b.hs, b.nlast
   14f48:	mov	w13, #0x800                 	// #2048
   14f4c:	sub	w13, w13, w12
   14f50:	add	w12, w12, w13, lsr #5
   14f54:	lsl	w19, w19, #1
   14f58:	strh	w12, [x10, x11, lsl #1]
   14f5c:	mov	w27, w8
   14f60:	mov	w22, w9
   14f64:	lsr	w8, w27, #24
   14f68:	cbnz	w8, 15010 <lzma_mode_is_supported@@XZ_5.0+0x3e28>
   14f6c:	cmp	x28, x4
   14f70:	b.eq	16c78 <lzma_mode_is_supported@@XZ_5.0+0x5a90>  // b.none
   14f74:	ldrb	w8, [x6, x28]
   14f78:	lsl	w27, w27, #8
   14f7c:	add	x28, x28, #0x1
   14f80:	bfi	w8, w22, #8, #24
   14f84:	b	15014 <lzma_mode_is_supported@@XZ_5.0+0x3e2c>
   14f88:	sub	w27, w10, w27
   14f8c:	mov	w10, #0x1                   	// #1
   14f90:	bfi	w10, w19, #1, #31
   14f94:	sub	w9, w12, w12, lsr #5
   14f98:	mov	w19, w10
   14f9c:	strh	w9, [x11]
   14fa0:	lsr	w9, w27, #24
   14fa4:	cbz	w9, 14ed0 <lzma_mode_is_supported@@XZ_5.0+0x3ce8>
   14fa8:	mov	w10, w27
   14fac:	mov	w9, w22
   14fb0:	ldur	x11, [x29, #-16]
   14fb4:	lsr	w12, w10, #11
   14fb8:	add	x8, x11, w8, uxtw #4
   14fbc:	add	x8, x8, w19, uxtw #1
   14fc0:	mov	w11, #0x6a6c                	// #27244
   14fc4:	add	x11, x8, x11
   14fc8:	ldrh	w8, [x11]
   14fcc:	mul	w27, w12, w8
   14fd0:	subs	w12, w9, w27
   14fd4:	b.cs	15078 <lzma_mode_is_supported@@XZ_5.0+0x3e90>  // b.hs, b.nlast
   14fd8:	mov	w10, #0x800                 	// #2048
   14fdc:	sub	w10, w10, w8
   14fe0:	add	w8, w8, w10, lsr #5
   14fe4:	strh	w8, [x11]
   14fe8:	lsl	w8, w19, #1
   14fec:	b	15090 <lzma_mode_is_supported@@XZ_5.0+0x3ea8>
   14ff0:	mov	w9, #0x1                   	// #1
   14ff4:	bfi	w9, w19, #1, #31
   14ff8:	sub	w27, w27, w8
   14ffc:	sub	w8, w12, w12, lsr #5
   15000:	mov	w19, w9
   15004:	strh	w8, [x10, x11, lsl #1]
   15008:	lsr	w8, w27, #24
   1500c:	cbz	w8, 14f6c <lzma_mode_is_supported@@XZ_5.0+0x3d84>
   15010:	mov	w8, w22
   15014:	ldur	x10, [x29, #-16]
   15018:	mov	w9, #0x6c6c                	// #27756
   1501c:	mov	w11, w19
   15020:	add	x10, x10, x9
   15024:	ldrh	w12, [x10, w19, uxtw #1]
   15028:	lsr	w9, w27, #11
   1502c:	mul	w9, w9, w12
   15030:	subs	w22, w8, w9
   15034:	b.cs	1545c <lzma_mode_is_supported@@XZ_5.0+0x4274>  // b.hs, b.nlast
   15038:	mov	w13, #0x800                 	// #2048
   1503c:	sub	w13, w13, w12
   15040:	add	w12, w12, w13, lsr #5
   15044:	lsl	w19, w19, #1
   15048:	strh	w12, [x10, x11, lsl #1]
   1504c:	mov	w27, w9
   15050:	mov	w22, w8
   15054:	lsr	w8, w27, #24
   15058:	cbnz	w8, 1547c <lzma_mode_is_supported@@XZ_5.0+0x4294>
   1505c:	cmp	x28, x4
   15060:	b.eq	16c84 <lzma_mode_is_supported@@XZ_5.0+0x5a9c>  // b.none
   15064:	ldrb	w8, [x6, x28]
   15068:	lsl	w27, w27, #8
   1506c:	add	x28, x28, #0x1
   15070:	bfi	w8, w22, #8, #24
   15074:	b	15480 <lzma_mode_is_supported@@XZ_5.0+0x4298>
   15078:	sub	w9, w8, w8, lsr #5
   1507c:	mov	w8, #0x1                   	// #1
   15080:	sub	w27, w10, w27
   15084:	strh	w9, [x11]
   15088:	bfi	w8, w19, #1, #31
   1508c:	mov	w9, w12
   15090:	sub	w2, w8, #0x6
   15094:	b	15788 <lzma_mode_is_supported@@XZ_5.0+0x45a0>
   15098:	sub	w27, w10, w27
   1509c:	ldur	x10, [x29, #-24]
   150a0:	sub	w9, w11, w11, lsr #5
   150a4:	strh	w9, [x10]
   150a8:	lsr	w9, w27, #24
   150ac:	cbnz	w9, 150cc <lzma_mode_is_supported@@XZ_5.0+0x3ee4>
   150b0:	cmp	x28, x4
   150b4:	b.eq	16c90 <lzma_mode_is_supported@@XZ_5.0+0x5aa8>  // b.none
   150b8:	ldrb	w9, [x6, x28]
   150bc:	lsl	w10, w27, #8
   150c0:	add	x28, x28, #0x1
   150c4:	bfi	w9, w22, #8, #24
   150c8:	b	150d4 <lzma_mode_is_supported@@XZ_5.0+0x3eec>
   150cc:	mov	w10, w27
   150d0:	mov	w9, w22
   150d4:	ldur	x11, [x29, #-24]
   150d8:	lsr	w12, w10, #11
   150dc:	ldrh	w11, [x11, #2]
   150e0:	mul	w27, w12, w11
   150e4:	subs	w22, w9, w27
   150e8:	b.cs	15194 <lzma_mode_is_supported@@XZ_5.0+0x3fac>  // b.hs, b.nlast
   150ec:	mov	w10, #0x800                 	// #2048
   150f0:	sub	w10, w10, w11
   150f4:	add	w10, w11, w10, lsr #5
   150f8:	ldur	x11, [x29, #-24]
   150fc:	mov	w22, w9
   15100:	strh	w10, [x11, #2]
   15104:	lsr	w9, w27, #24
   15108:	cbnz	w9, 15128 <lzma_mode_is_supported@@XZ_5.0+0x3f40>
   1510c:	cmp	x28, x4
   15110:	b.eq	16c9c <lzma_mode_is_supported@@XZ_5.0+0x5ab4>  // b.none
   15114:	ldrb	w9, [x6, x28]
   15118:	lsl	w10, w27, #8
   1511c:	add	x28, x28, #0x1
   15120:	bfi	w9, w22, #8, #24
   15124:	b	15130 <lzma_mode_is_supported@@XZ_5.0+0x3f48>
   15128:	mov	w10, w27
   1512c:	mov	w9, w22
   15130:	ldur	x11, [x29, #-16]
   15134:	mov	w12, #0x6768                	// #26472
   15138:	lsr	w13, w10, #11
   1513c:	add	x11, x11, w8, uxtw #4
   15140:	add	x11, x11, w19, uxtw #1
   15144:	add	x11, x11, x12
   15148:	ldrh	w12, [x11]
   1514c:	mul	w27, w13, w12
   15150:	subs	w22, w9, w27
   15154:	b.cs	15230 <lzma_mode_is_supported@@XZ_5.0+0x4048>  // b.hs, b.nlast
   15158:	mov	w10, #0x800                 	// #2048
   1515c:	sub	w10, w10, w12
   15160:	add	w10, w12, w10, lsr #5
   15164:	lsl	w19, w19, #1
   15168:	strh	w10, [x11]
   1516c:	mov	w22, w9
   15170:	lsr	w9, w27, #24
   15174:	cbnz	w9, 15250 <lzma_mode_is_supported@@XZ_5.0+0x4068>
   15178:	cmp	x28, x4
   1517c:	b.eq	16ca8 <lzma_mode_is_supported@@XZ_5.0+0x5ac0>  // b.none
   15180:	ldrb	w9, [x6, x28]
   15184:	lsl	w10, w27, #8
   15188:	add	x28, x28, #0x1
   1518c:	bfi	w9, w22, #8, #24
   15190:	b	15258 <lzma_mode_is_supported@@XZ_5.0+0x4070>
   15194:	ldur	x9, [x29, #-24]
   15198:	sub	w27, w10, w27
   1519c:	sub	w8, w11, w11, lsr #5
   151a0:	strh	w8, [x9, #2]
   151a4:	lsr	w8, w27, #24
   151a8:	cbnz	w8, 151c8 <lzma_mode_is_supported@@XZ_5.0+0x3fe0>
   151ac:	cmp	x28, x4
   151b0:	b.eq	16cb4 <lzma_mode_is_supported@@XZ_5.0+0x5acc>  // b.none
   151b4:	ldrb	w8, [x6, x28]
   151b8:	lsl	w27, w27, #8
   151bc:	add	x28, x28, #0x1
   151c0:	bfi	w8, w22, #8, #24
   151c4:	b	151cc <lzma_mode_is_supported@@XZ_5.0+0x3fe4>
   151c8:	mov	w8, w22
   151cc:	ldur	x10, [x29, #-16]
   151d0:	mov	w9, #0x6868                	// #26728
   151d4:	mov	w11, w19
   151d8:	add	x10, x10, x9
   151dc:	ldrh	w12, [x10, w19, uxtw #1]
   151e0:	lsr	w9, w27, #11
   151e4:	mul	w9, w9, w12
   151e8:	subs	w22, w8, w9
   151ec:	b.cs	152bc <lzma_mode_is_supported@@XZ_5.0+0x40d4>  // b.hs, b.nlast
   151f0:	mov	w13, #0x800                 	// #2048
   151f4:	sub	w13, w13, w12
   151f8:	add	w12, w12, w13, lsr #5
   151fc:	lsl	w19, w19, #1
   15200:	strh	w12, [x10, x11, lsl #1]
   15204:	mov	w27, w9
   15208:	mov	w22, w8
   1520c:	lsr	w8, w27, #24
   15210:	cbnz	w8, 152dc <lzma_mode_is_supported@@XZ_5.0+0x40f4>
   15214:	cmp	x28, x4
   15218:	b.eq	16cc0 <lzma_mode_is_supported@@XZ_5.0+0x5ad8>  // b.none
   1521c:	ldrb	w8, [x6, x28]
   15220:	lsl	w27, w27, #8
   15224:	add	x28, x28, #0x1
   15228:	bfi	w8, w22, #8, #24
   1522c:	b	152e0 <lzma_mode_is_supported@@XZ_5.0+0x40f8>
   15230:	sub	w27, w10, w27
   15234:	mov	w10, #0x1                   	// #1
   15238:	bfi	w10, w19, #1, #31
   1523c:	sub	w9, w12, w12, lsr #5
   15240:	mov	w19, w10
   15244:	strh	w9, [x11]
   15248:	lsr	w9, w27, #24
   1524c:	cbz	w9, 15178 <lzma_mode_is_supported@@XZ_5.0+0x3f90>
   15250:	mov	w10, w27
   15254:	mov	w9, w22
   15258:	ldur	x11, [x29, #-16]
   1525c:	mov	w12, #0x6768                	// #26472
   15260:	lsr	w13, w10, #11
   15264:	add	x11, x11, w8, uxtw #4
   15268:	add	x11, x11, w19, uxtw #1
   1526c:	add	x11, x11, x12
   15270:	ldrh	w12, [x11]
   15274:	mul	w27, w13, w12
   15278:	subs	w22, w9, w27
   1527c:	b.cs	15344 <lzma_mode_is_supported@@XZ_5.0+0x415c>  // b.hs, b.nlast
   15280:	mov	w10, #0x800                 	// #2048
   15284:	sub	w10, w10, w12
   15288:	add	w10, w12, w10, lsr #5
   1528c:	lsl	w19, w19, #1
   15290:	strh	w10, [x11]
   15294:	mov	w22, w9
   15298:	lsr	w9, w27, #24
   1529c:	cbnz	w9, 15364 <lzma_mode_is_supported@@XZ_5.0+0x417c>
   152a0:	cmp	x28, x4
   152a4:	b.eq	16ccc <lzma_mode_is_supported@@XZ_5.0+0x5ae4>  // b.none
   152a8:	ldrb	w9, [x6, x28]
   152ac:	lsl	w10, w27, #8
   152b0:	add	x28, x28, #0x1
   152b4:	bfi	w9, w22, #8, #24
   152b8:	b	1536c <lzma_mode_is_supported@@XZ_5.0+0x4184>
   152bc:	sub	w27, w27, w9
   152c0:	mov	w9, #0x1                   	// #1
   152c4:	bfi	w9, w19, #1, #31
   152c8:	sub	w8, w12, w12, lsr #5
   152cc:	mov	w19, w9
   152d0:	strh	w8, [x10, x11, lsl #1]
   152d4:	lsr	w8, w27, #24
   152d8:	cbz	w8, 15214 <lzma_mode_is_supported@@XZ_5.0+0x402c>
   152dc:	mov	w8, w22
   152e0:	ldur	x10, [x29, #-16]
   152e4:	mov	w9, #0x6868                	// #26728
   152e8:	mov	w11, w19
   152ec:	add	x10, x10, x9
   152f0:	ldrh	w12, [x10, w19, uxtw #1]
   152f4:	lsr	w9, w27, #11
   152f8:	mul	w9, w9, w12
   152fc:	subs	w22, w8, w9
   15300:	b.cs	1556c <lzma_mode_is_supported@@XZ_5.0+0x4384>  // b.hs, b.nlast
   15304:	mov	w13, #0x800                 	// #2048
   15308:	sub	w13, w13, w12
   1530c:	add	w12, w12, w13, lsr #5
   15310:	lsl	w19, w19, #1
   15314:	strh	w12, [x10, x11, lsl #1]
   15318:	mov	w27, w9
   1531c:	mov	w22, w8
   15320:	lsr	w8, w27, #24
   15324:	cbnz	w8, 1558c <lzma_mode_is_supported@@XZ_5.0+0x43a4>
   15328:	cmp	x28, x4
   1532c:	b.eq	16cd8 <lzma_mode_is_supported@@XZ_5.0+0x5af0>  // b.none
   15330:	ldrb	w8, [x6, x28]
   15334:	lsl	w27, w27, #8
   15338:	add	x28, x28, #0x1
   1533c:	bfi	w8, w22, #8, #24
   15340:	b	15590 <lzma_mode_is_supported@@XZ_5.0+0x43a8>
   15344:	sub	w27, w10, w27
   15348:	mov	w10, #0x1                   	// #1
   1534c:	bfi	w10, w19, #1, #31
   15350:	sub	w9, w12, w12, lsr #5
   15354:	mov	w19, w10
   15358:	strh	w9, [x11]
   1535c:	lsr	w9, w27, #24
   15360:	cbz	w9, 152a0 <lzma_mode_is_supported@@XZ_5.0+0x40b8>
   15364:	mov	w10, w27
   15368:	mov	w9, w22
   1536c:	ldur	x11, [x29, #-16]
   15370:	add	x8, x11, w8, uxtw #4
   15374:	add	x8, x8, w19, uxtw #1
   15378:	mov	w11, #0x6768                	// #26472
   1537c:	add	x8, x8, x11
   15380:	ldrh	w12, [x8]
   15384:	lsr	w11, w10, #11
   15388:	mul	w27, w11, w12
   1538c:	subs	w11, w9, w27
   15390:	b.cs	153b0 <lzma_mode_is_supported@@XZ_5.0+0x41c8>  // b.hs, b.nlast
   15394:	mov	w10, #0x800                 	// #2048
   15398:	sub	w10, w10, w12
   1539c:	add	w10, w12, w10, lsr #5
   153a0:	strh	w10, [x8]
   153a4:	lsl	w10, w19, #1
   153a8:	add	w2, w10, #0x2
   153ac:	b	15ab8 <lzma_mode_is_supported@@XZ_5.0+0x48d0>
   153b0:	sub	w27, w10, w27
   153b4:	mov	w10, #0x1                   	// #1
   153b8:	sub	w9, w12, w12, lsr #5
   153bc:	bfi	w10, w19, #1, #31
   153c0:	strh	w9, [x8]
   153c4:	mov	w9, w11
   153c8:	add	w2, w10, #0x2
   153cc:	b	15ab8 <lzma_mode_is_supported@@XZ_5.0+0x48d0>
   153d0:	sub	w27, w27, w10
   153d4:	mov	w10, #0x1                   	// #1
   153d8:	bfi	w10, w19, #1, #31
   153dc:	sub	w9, w12, w12, lsr #5
   153e0:	mov	w19, w10
   153e4:	strh	w9, [x11]
   153e8:	lsr	w9, w27, #24
   153ec:	cbz	w9, 14e44 <lzma_mode_is_supported@@XZ_5.0+0x3c5c>
   153f0:	mov	w10, w27
   153f4:	mov	w9, w22
   153f8:	ldur	x11, [x29, #-16]
   153fc:	mov	w12, #0x6b6c                	// #27500
   15400:	lsr	w13, w10, #11
   15404:	add	x11, x11, w8, uxtw #4
   15408:	add	x11, x11, w19, uxtw #1
   1540c:	add	x11, x11, x12
   15410:	ldrh	w12, [x11]
   15414:	mul	w27, w13, w12
   15418:	subs	w22, w9, w27
   1541c:	b.cs	15704 <lzma_mode_is_supported@@XZ_5.0+0x451c>  // b.hs, b.nlast
   15420:	mov	w10, #0x800                 	// #2048
   15424:	sub	w10, w10, w12
   15428:	add	w10, w12, w10, lsr #5
   1542c:	lsl	w19, w19, #1
   15430:	strh	w10, [x11]
   15434:	mov	w22, w9
   15438:	lsr	w9, w27, #24
   1543c:	cbnz	w9, 15724 <lzma_mode_is_supported@@XZ_5.0+0x453c>
   15440:	cmp	x28, x4
   15444:	b.eq	16ce4 <lzma_mode_is_supported@@XZ_5.0+0x5afc>  // b.none
   15448:	ldrb	w9, [x6, x28]
   1544c:	lsl	w10, w27, #8
   15450:	add	x28, x28, #0x1
   15454:	bfi	w9, w22, #8, #24
   15458:	b	1572c <lzma_mode_is_supported@@XZ_5.0+0x4544>
   1545c:	sub	w27, w27, w9
   15460:	mov	w9, #0x1                   	// #1
   15464:	bfi	w9, w19, #1, #31
   15468:	sub	w8, w12, w12, lsr #5
   1546c:	mov	w19, w9
   15470:	strh	w8, [x10, x11, lsl #1]
   15474:	lsr	w8, w27, #24
   15478:	cbz	w8, 1505c <lzma_mode_is_supported@@XZ_5.0+0x3e74>
   1547c:	mov	w8, w22
   15480:	ldur	x10, [x29, #-16]
   15484:	mov	w9, #0x6c6c                	// #27756
   15488:	mov	w11, w19
   1548c:	add	x10, x10, x9
   15490:	ldrh	w12, [x10, w19, uxtw #1]
   15494:	lsr	w9, w27, #11
   15498:	mul	w9, w9, w12
   1549c:	subs	w22, w8, w9
   154a0:	b.cs	154e4 <lzma_mode_is_supported@@XZ_5.0+0x42fc>  // b.hs, b.nlast
   154a4:	mov	w13, #0x800                 	// #2048
   154a8:	sub	w13, w13, w12
   154ac:	add	w12, w12, w13, lsr #5
   154b0:	lsl	w19, w19, #1
   154b4:	strh	w12, [x10, x11, lsl #1]
   154b8:	mov	w27, w9
   154bc:	mov	w22, w8
   154c0:	lsr	w8, w27, #24
   154c4:	cbnz	w8, 15504 <lzma_mode_is_supported@@XZ_5.0+0x431c>
   154c8:	cmp	x28, x4
   154cc:	b.eq	16cf0 <lzma_mode_is_supported@@XZ_5.0+0x5b08>  // b.none
   154d0:	ldrb	w8, [x6, x28]
   154d4:	lsl	w27, w27, #8
   154d8:	add	x28, x28, #0x1
   154dc:	bfi	w8, w22, #8, #24
   154e0:	b	15508 <lzma_mode_is_supported@@XZ_5.0+0x4320>
   154e4:	sub	w27, w27, w9
   154e8:	mov	w9, #0x1                   	// #1
   154ec:	bfi	w9, w19, #1, #31
   154f0:	sub	w8, w12, w12, lsr #5
   154f4:	mov	w19, w9
   154f8:	strh	w8, [x10, x11, lsl #1]
   154fc:	lsr	w8, w27, #24
   15500:	cbz	w8, 154c8 <lzma_mode_is_supported@@XZ_5.0+0x42e0>
   15504:	mov	w8, w22
   15508:	ldur	x10, [x29, #-16]
   1550c:	mov	w9, #0x6c6c                	// #27756
   15510:	mov	w11, w19
   15514:	add	x10, x10, x9
   15518:	ldrh	w12, [x10, w19, uxtw #1]
   1551c:	lsr	w9, w27, #11
   15520:	mul	w9, w9, w12
   15524:	subs	w22, w8, w9
   15528:	b.cs	15790 <lzma_mode_is_supported@@XZ_5.0+0x45a8>  // b.hs, b.nlast
   1552c:	mov	w13, #0x800                 	// #2048
   15530:	sub	w13, w13, w12
   15534:	add	w12, w12, w13, lsr #5
   15538:	lsl	w19, w19, #1
   1553c:	strh	w12, [x10, x11, lsl #1]
   15540:	mov	w27, w9
   15544:	mov	w22, w8
   15548:	lsr	w8, w27, #24
   1554c:	cbnz	w8, 157b0 <lzma_mode_is_supported@@XZ_5.0+0x45c8>
   15550:	cmp	x28, x4
   15554:	b.eq	16cfc <lzma_mode_is_supported@@XZ_5.0+0x5b14>  // b.none
   15558:	ldrb	w8, [x6, x28]
   1555c:	lsl	w27, w27, #8
   15560:	add	x28, x28, #0x1
   15564:	bfi	w8, w22, #8, #24
   15568:	b	157b4 <lzma_mode_is_supported@@XZ_5.0+0x45cc>
   1556c:	sub	w27, w27, w9
   15570:	mov	w9, #0x1                   	// #1
   15574:	bfi	w9, w19, #1, #31
   15578:	sub	w8, w12, w12, lsr #5
   1557c:	mov	w19, w9
   15580:	strh	w8, [x10, x11, lsl #1]
   15584:	lsr	w8, w27, #24
   15588:	cbz	w8, 15328 <lzma_mode_is_supported@@XZ_5.0+0x4140>
   1558c:	mov	w8, w22
   15590:	ldur	x10, [x29, #-16]
   15594:	mov	w9, #0x6868                	// #26728
   15598:	mov	w11, w19
   1559c:	add	x10, x10, x9
   155a0:	ldrh	w12, [x10, w19, uxtw #1]
   155a4:	lsr	w9, w27, #11
   155a8:	mul	w9, w9, w12
   155ac:	subs	w22, w8, w9
   155b0:	b.cs	155f4 <lzma_mode_is_supported@@XZ_5.0+0x440c>  // b.hs, b.nlast
   155b4:	mov	w13, #0x800                 	// #2048
   155b8:	sub	w13, w13, w12
   155bc:	add	w12, w12, w13, lsr #5
   155c0:	lsl	w19, w19, #1
   155c4:	strh	w12, [x10, x11, lsl #1]
   155c8:	mov	w27, w9
   155cc:	mov	w22, w8
   155d0:	lsr	w8, w27, #24
   155d4:	cbnz	w8, 15614 <lzma_mode_is_supported@@XZ_5.0+0x442c>
   155d8:	cmp	x28, x4
   155dc:	b.eq	16d08 <lzma_mode_is_supported@@XZ_5.0+0x5b20>  // b.none
   155e0:	ldrb	w8, [x6, x28]
   155e4:	lsl	w27, w27, #8
   155e8:	add	x28, x28, #0x1
   155ec:	bfi	w8, w22, #8, #24
   155f0:	b	15618 <lzma_mode_is_supported@@XZ_5.0+0x4430>
   155f4:	sub	w27, w27, w9
   155f8:	mov	w9, #0x1                   	// #1
   155fc:	bfi	w9, w19, #1, #31
   15600:	sub	w8, w12, w12, lsr #5
   15604:	mov	w19, w9
   15608:	strh	w8, [x10, x11, lsl #1]
   1560c:	lsr	w8, w27, #24
   15610:	cbz	w8, 155d8 <lzma_mode_is_supported@@XZ_5.0+0x43f0>
   15614:	mov	w8, w22
   15618:	ldur	x10, [x29, #-16]
   1561c:	mov	w9, #0x6868                	// #26728
   15620:	mov	w11, w19
   15624:	add	x10, x10, x9
   15628:	ldrh	w12, [x10, w19, uxtw #1]
   1562c:	lsr	w9, w27, #11
   15630:	mul	w9, w9, w12
   15634:	subs	w22, w8, w9
   15638:	b.cs	1567c <lzma_mode_is_supported@@XZ_5.0+0x4494>  // b.hs, b.nlast
   1563c:	mov	w13, #0x800                 	// #2048
   15640:	sub	w13, w13, w12
   15644:	add	w12, w12, w13, lsr #5
   15648:	lsl	w19, w19, #1
   1564c:	strh	w12, [x10, x11, lsl #1]
   15650:	mov	w27, w9
   15654:	mov	w22, w8
   15658:	lsr	w8, w27, #24
   1565c:	cbnz	w8, 1569c <lzma_mode_is_supported@@XZ_5.0+0x44b4>
   15660:	cmp	x28, x4
   15664:	b.eq	16d14 <lzma_mode_is_supported@@XZ_5.0+0x5b2c>  // b.none
   15668:	ldrb	w8, [x6, x28]
   1566c:	lsl	w27, w27, #8
   15670:	add	x28, x28, #0x1
   15674:	bfi	w8, w22, #8, #24
   15678:	b	156a0 <lzma_mode_is_supported@@XZ_5.0+0x44b8>
   1567c:	sub	w27, w27, w9
   15680:	mov	w9, #0x1                   	// #1
   15684:	bfi	w9, w19, #1, #31
   15688:	sub	w8, w12, w12, lsr #5
   1568c:	mov	w19, w9
   15690:	strh	w8, [x10, x11, lsl #1]
   15694:	lsr	w8, w27, #24
   15698:	cbz	w8, 15660 <lzma_mode_is_supported@@XZ_5.0+0x4478>
   1569c:	mov	w8, w22
   156a0:	ldur	x10, [x29, #-16]
   156a4:	mov	w9, #0x6868                	// #26728
   156a8:	mov	w11, w19
   156ac:	add	x10, x10, x9
   156b0:	ldrh	w12, [x10, w19, uxtw #1]
   156b4:	lsr	w9, w27, #11
   156b8:	mul	w9, w9, w12
   156bc:	subs	w22, w8, w9
   156c0:	b.cs	158a0 <lzma_mode_is_supported@@XZ_5.0+0x46b8>  // b.hs, b.nlast
   156c4:	mov	w13, #0x800                 	// #2048
   156c8:	sub	w13, w13, w12
   156cc:	add	w12, w12, w13, lsr #5
   156d0:	lsl	w19, w19, #1
   156d4:	strh	w12, [x10, x11, lsl #1]
   156d8:	mov	w27, w9
   156dc:	mov	w22, w8
   156e0:	lsr	w8, w27, #24
   156e4:	cbnz	w8, 158c0 <lzma_mode_is_supported@@XZ_5.0+0x46d8>
   156e8:	cmp	x28, x4
   156ec:	b.eq	16d20 <lzma_mode_is_supported@@XZ_5.0+0x5b38>  // b.none
   156f0:	ldrb	w8, [x6, x28]
   156f4:	lsl	w27, w27, #8
   156f8:	add	x28, x28, #0x1
   156fc:	bfi	w8, w22, #8, #24
   15700:	b	158c4 <lzma_mode_is_supported@@XZ_5.0+0x46dc>
   15704:	sub	w27, w10, w27
   15708:	mov	w10, #0x1                   	// #1
   1570c:	bfi	w10, w19, #1, #31
   15710:	sub	w9, w12, w12, lsr #5
   15714:	mov	w19, w10
   15718:	strh	w9, [x11]
   1571c:	lsr	w9, w27, #24
   15720:	cbz	w9, 15440 <lzma_mode_is_supported@@XZ_5.0+0x4258>
   15724:	mov	w10, w27
   15728:	mov	w9, w22
   1572c:	ldur	x11, [x29, #-16]
   15730:	lsr	w12, w10, #11
   15734:	add	x8, x11, w8, uxtw #4
   15738:	add	x8, x8, w19, uxtw #1
   1573c:	mov	w11, #0x6b6c                	// #27500
   15740:	add	x11, x8, x11
   15744:	ldrh	w8, [x11]
   15748:	mul	w27, w12, w8
   1574c:	subs	w12, w9, w27
   15750:	b.cs	1576c <lzma_mode_is_supported@@XZ_5.0+0x4584>  // b.hs, b.nlast
   15754:	mov	w10, #0x800                 	// #2048
   15758:	sub	w10, w10, w8
   1575c:	add	w8, w8, w10, lsr #5
   15760:	strh	w8, [x11]
   15764:	lsl	w8, w19, #1
   15768:	b	15784 <lzma_mode_is_supported@@XZ_5.0+0x459c>
   1576c:	sub	w9, w8, w8, lsr #5
   15770:	mov	w8, #0x1                   	// #1
   15774:	bfi	w8, w19, #1, #31
   15778:	sub	w27, w10, w27
   1577c:	strh	w9, [x11]
   15780:	mov	w9, w12
   15784:	add	w2, w8, #0x2
   15788:	mov	w19, w8
   1578c:	b	16930 <lzma_mode_is_supported@@XZ_5.0+0x5748>
   15790:	sub	w27, w27, w9
   15794:	mov	w9, #0x1                   	// #1
   15798:	bfi	w9, w19, #1, #31
   1579c:	sub	w8, w12, w12, lsr #5
   157a0:	mov	w19, w9
   157a4:	strh	w8, [x10, x11, lsl #1]
   157a8:	lsr	w8, w27, #24
   157ac:	cbz	w8, 15550 <lzma_mode_is_supported@@XZ_5.0+0x4368>
   157b0:	mov	w8, w22
   157b4:	ldur	x10, [x29, #-16]
   157b8:	mov	w9, #0x6c6c                	// #27756
   157bc:	mov	w11, w19
   157c0:	add	x10, x10, x9
   157c4:	ldrh	w12, [x10, w19, uxtw #1]
   157c8:	lsr	w9, w27, #11
   157cc:	mul	w9, w9, w12
   157d0:	subs	w22, w8, w9
   157d4:	b.cs	15818 <lzma_mode_is_supported@@XZ_5.0+0x4630>  // b.hs, b.nlast
   157d8:	mov	w13, #0x800                 	// #2048
   157dc:	sub	w13, w13, w12
   157e0:	add	w12, w12, w13, lsr #5
   157e4:	lsl	w19, w19, #1
   157e8:	strh	w12, [x10, x11, lsl #1]
   157ec:	mov	w27, w9
   157f0:	mov	w22, w8
   157f4:	lsr	w8, w27, #24
   157f8:	cbnz	w8, 15838 <lzma_mode_is_supported@@XZ_5.0+0x4650>
   157fc:	cmp	x28, x4
   15800:	b.eq	16d2c <lzma_mode_is_supported@@XZ_5.0+0x5b44>  // b.none
   15804:	ldrb	w8, [x6, x28]
   15808:	lsl	w27, w27, #8
   1580c:	add	x28, x28, #0x1
   15810:	bfi	w8, w22, #8, #24
   15814:	b	1583c <lzma_mode_is_supported@@XZ_5.0+0x4654>
   15818:	sub	w27, w27, w9
   1581c:	mov	w9, #0x1                   	// #1
   15820:	bfi	w9, w19, #1, #31
   15824:	sub	w8, w12, w12, lsr #5
   15828:	mov	w19, w9
   1582c:	strh	w8, [x10, x11, lsl #1]
   15830:	lsr	w8, w27, #24
   15834:	cbz	w8, 157fc <lzma_mode_is_supported@@XZ_5.0+0x4614>
   15838:	mov	w8, w22
   1583c:	ldur	x10, [x29, #-16]
   15840:	mov	w9, #0x6c6c                	// #27756
   15844:	mov	w11, w19
   15848:	add	x10, x10, x9
   1584c:	ldrh	w12, [x10, w19, uxtw #1]
   15850:	lsr	w9, w27, #11
   15854:	mul	w9, w9, w12
   15858:	subs	w22, w8, w9
   1585c:	b.cs	15928 <lzma_mode_is_supported@@XZ_5.0+0x4740>  // b.hs, b.nlast
   15860:	mov	w13, #0x800                 	// #2048
   15864:	sub	w13, w13, w12
   15868:	add	w12, w12, w13, lsr #5
   1586c:	lsl	w19, w19, #1
   15870:	strh	w12, [x10, x11, lsl #1]
   15874:	mov	w27, w9
   15878:	mov	w22, w8
   1587c:	lsr	w8, w27, #24
   15880:	cbnz	w8, 15948 <lzma_mode_is_supported@@XZ_5.0+0x4760>
   15884:	cmp	x28, x4
   15888:	b.eq	16d38 <lzma_mode_is_supported@@XZ_5.0+0x5b50>  // b.none
   1588c:	ldrb	w8, [x6, x28]
   15890:	lsl	w27, w27, #8
   15894:	add	x28, x28, #0x1
   15898:	bfi	w8, w22, #8, #24
   1589c:	b	1594c <lzma_mode_is_supported@@XZ_5.0+0x4764>
   158a0:	sub	w27, w27, w9
   158a4:	mov	w9, #0x1                   	// #1
   158a8:	bfi	w9, w19, #1, #31
   158ac:	sub	w8, w12, w12, lsr #5
   158b0:	mov	w19, w9
   158b4:	strh	w8, [x10, x11, lsl #1]
   158b8:	lsr	w8, w27, #24
   158bc:	cbz	w8, 156e8 <lzma_mode_is_supported@@XZ_5.0+0x4500>
   158c0:	mov	w8, w22
   158c4:	ldur	x10, [x29, #-16]
   158c8:	mov	w9, #0x6868                	// #26728
   158cc:	mov	w11, w19
   158d0:	add	x10, x10, x9
   158d4:	ldrh	w12, [x10, w19, uxtw #1]
   158d8:	lsr	w9, w27, #11
   158dc:	mul	w9, w9, w12
   158e0:	subs	w22, w8, w9
   158e4:	b.cs	159b0 <lzma_mode_is_supported@@XZ_5.0+0x47c8>  // b.hs, b.nlast
   158e8:	mov	w13, #0x800                 	// #2048
   158ec:	sub	w13, w13, w12
   158f0:	add	w12, w12, w13, lsr #5
   158f4:	lsl	w19, w19, #1
   158f8:	strh	w12, [x10, x11, lsl #1]
   158fc:	mov	w27, w9
   15900:	mov	w22, w8
   15904:	lsr	w8, w27, #24
   15908:	cbnz	w8, 159d0 <lzma_mode_is_supported@@XZ_5.0+0x47e8>
   1590c:	cmp	x28, x4
   15910:	b.eq	16d44 <lzma_mode_is_supported@@XZ_5.0+0x5b5c>  // b.none
   15914:	ldrb	w8, [x6, x28]
   15918:	lsl	w27, w27, #8
   1591c:	add	x28, x28, #0x1
   15920:	bfi	w8, w22, #8, #24
   15924:	b	159d4 <lzma_mode_is_supported@@XZ_5.0+0x47ec>
   15928:	sub	w27, w27, w9
   1592c:	mov	w9, #0x1                   	// #1
   15930:	bfi	w9, w19, #1, #31
   15934:	sub	w8, w12, w12, lsr #5
   15938:	mov	w19, w9
   1593c:	strh	w8, [x10, x11, lsl #1]
   15940:	lsr	w8, w27, #24
   15944:	cbz	w8, 15884 <lzma_mode_is_supported@@XZ_5.0+0x469c>
   15948:	mov	w8, w22
   1594c:	ldur	x10, [x29, #-16]
   15950:	mov	w9, #0x6c6c                	// #27756
   15954:	mov	w11, w19
   15958:	add	x10, x10, x9
   1595c:	ldrh	w12, [x10, w19, uxtw #1]
   15960:	lsr	w9, w27, #11
   15964:	mul	w9, w9, w12
   15968:	subs	w22, w8, w9
   1596c:	b.cs	15b60 <lzma_mode_is_supported@@XZ_5.0+0x4978>  // b.hs, b.nlast
   15970:	mov	w13, #0x800                 	// #2048
   15974:	sub	w13, w13, w12
   15978:	add	w12, w12, w13, lsr #5
   1597c:	lsl	w19, w19, #1
   15980:	strh	w12, [x10, x11, lsl #1]
   15984:	mov	w27, w9
   15988:	mov	w22, w8
   1598c:	lsr	w8, w27, #24
   15990:	cbnz	w8, 15b80 <lzma_mode_is_supported@@XZ_5.0+0x4998>
   15994:	cmp	x28, x4
   15998:	b.eq	16d50 <lzma_mode_is_supported@@XZ_5.0+0x5b68>  // b.none
   1599c:	ldrb	w8, [x6, x28]
   159a0:	lsl	w9, w27, #8
   159a4:	add	x28, x28, #0x1
   159a8:	bfi	w8, w22, #8, #24
   159ac:	b	15b88 <lzma_mode_is_supported@@XZ_5.0+0x49a0>
   159b0:	sub	w27, w27, w9
   159b4:	mov	w9, #0x1                   	// #1
   159b8:	bfi	w9, w19, #1, #31
   159bc:	sub	w8, w12, w12, lsr #5
   159c0:	mov	w19, w9
   159c4:	strh	w8, [x10, x11, lsl #1]
   159c8:	lsr	w8, w27, #24
   159cc:	cbz	w8, 1590c <lzma_mode_is_supported@@XZ_5.0+0x4724>
   159d0:	mov	w8, w22
   159d4:	ldur	x10, [x29, #-16]
   159d8:	mov	w9, #0x6868                	// #26728
   159dc:	mov	w11, w19
   159e0:	add	x10, x10, x9
   159e4:	ldrh	w12, [x10, w19, uxtw #1]
   159e8:	lsr	w9, w27, #11
   159ec:	mul	w9, w9, w12
   159f0:	subs	w22, w8, w9
   159f4:	b.cs	15a38 <lzma_mode_is_supported@@XZ_5.0+0x4850>  // b.hs, b.nlast
   159f8:	mov	w13, #0x800                 	// #2048
   159fc:	sub	w13, w13, w12
   15a00:	add	w12, w12, w13, lsr #5
   15a04:	lsl	w19, w19, #1
   15a08:	strh	w12, [x10, x11, lsl #1]
   15a0c:	mov	w27, w9
   15a10:	mov	w22, w8
   15a14:	lsr	w8, w27, #24
   15a18:	cbnz	w8, 15a58 <lzma_mode_is_supported@@XZ_5.0+0x4870>
   15a1c:	cmp	x28, x4
   15a20:	b.eq	16d5c <lzma_mode_is_supported@@XZ_5.0+0x5b74>  // b.none
   15a24:	ldrb	w9, [x6, x28]
   15a28:	lsl	w8, w27, #8
   15a2c:	add	x28, x28, #0x1
   15a30:	bfi	w9, w22, #8, #24
   15a34:	b	15a60 <lzma_mode_is_supported@@XZ_5.0+0x4878>
   15a38:	sub	w27, w27, w9
   15a3c:	mov	w9, #0x1                   	// #1
   15a40:	bfi	w9, w19, #1, #31
   15a44:	sub	w8, w12, w12, lsr #5
   15a48:	mov	w19, w9
   15a4c:	strh	w8, [x10, x11, lsl #1]
   15a50:	lsr	w8, w27, #24
   15a54:	cbz	w8, 15a1c <lzma_mode_is_supported@@XZ_5.0+0x4834>
   15a58:	mov	w8, w27
   15a5c:	mov	w9, w22
   15a60:	ldur	x11, [x29, #-16]
   15a64:	mov	w10, #0x6868                	// #26728
   15a68:	mov	w12, w19
   15a6c:	add	x10, x11, x10
   15a70:	ldrh	w13, [x10, w19, uxtw #1]
   15a74:	lsr	w11, w8, #11
   15a78:	mul	w27, w11, w13
   15a7c:	subs	w11, w9, w27
   15a80:	b.cs	15a9c <lzma_mode_is_supported@@XZ_5.0+0x48b4>  // b.hs, b.nlast
   15a84:	mov	w8, #0x800                 	// #2048
   15a88:	sub	w8, w8, w13
   15a8c:	add	w8, w13, w8, lsr #5
   15a90:	strh	w8, [x10, x12, lsl #1]
   15a94:	lsl	w8, w19, #1
   15a98:	b	15ab4 <lzma_mode_is_supported@@XZ_5.0+0x48cc>
   15a9c:	sub	w27, w8, w27
   15aa0:	sub	w9, w13, w13, lsr #5
   15aa4:	mov	w8, #0x1                   	// #1
   15aa8:	strh	w9, [x10, x12, lsl #1]
   15aac:	bfi	w8, w19, #1, #31
   15ab0:	mov	w9, w11
   15ab4:	sub	w2, w8, #0xee
   15ab8:	sub	w8, w2, #0x2
   15abc:	cmp	w2, #0x6
   15ac0:	mov	w10, #0x3                   	// #3
   15ac4:	csel	w8, w8, w10, cc  // cc = lo, ul, last
   15ac8:	ldur	x10, [x29, #-16]
   15acc:	mov	w11, #0x6360                	// #25440
   15ad0:	mov	w19, #0x1                   	// #1
   15ad4:	mov	w22, w9
   15ad8:	add	x8, x10, x8, lsl #7
   15adc:	add	x18, x8, x11
   15ae0:	lsr	w8, w27, #24
   15ae4:	cbnz	w8, 15b04 <lzma_mode_is_supported@@XZ_5.0+0x491c>
   15ae8:	cmp	x28, x4
   15aec:	b.eq	16d68 <lzma_mode_is_supported@@XZ_5.0+0x5b80>  // b.none
   15af0:	ldrb	w8, [x6, x28]
   15af4:	lsl	w9, w27, #8
   15af8:	add	x28, x28, #0x1
   15afc:	bfi	w8, w22, #8, #24
   15b00:	b	15b0c <lzma_mode_is_supported@@XZ_5.0+0x4924>
   15b04:	mov	w9, w27
   15b08:	mov	w8, w22
   15b0c:	ldrh	w11, [x18, w19, uxtw #1]
   15b10:	lsr	w10, w9, #11
   15b14:	mul	w27, w10, w11
   15b18:	subs	w22, w8, w27
   15b1c:	mov	w10, w19
   15b20:	b.cs	15bec <lzma_mode_is_supported@@XZ_5.0+0x4a04>  // b.hs, b.nlast
   15b24:	mov	w9, #0x800                 	// #2048
   15b28:	sub	w9, w9, w11
   15b2c:	add	w9, w11, w9, lsr #5
   15b30:	lsl	w19, w19, #1
   15b34:	strh	w9, [x18, x10, lsl #1]
   15b38:	mov	w22, w8
   15b3c:	lsr	w8, w27, #24
   15b40:	cbnz	w8, 15c0c <lzma_mode_is_supported@@XZ_5.0+0x4a24>
   15b44:	cmp	x28, x4
   15b48:	b.eq	16d74 <lzma_mode_is_supported@@XZ_5.0+0x5b8c>  // b.none
   15b4c:	ldrb	w8, [x6, x28]
   15b50:	lsl	w9, w27, #8
   15b54:	add	x28, x28, #0x1
   15b58:	bfi	w8, w22, #8, #24
   15b5c:	b	15c14 <lzma_mode_is_supported@@XZ_5.0+0x4a2c>
   15b60:	sub	w27, w27, w9
   15b64:	mov	w9, #0x1                   	// #1
   15b68:	bfi	w9, w19, #1, #31
   15b6c:	sub	w8, w12, w12, lsr #5
   15b70:	mov	w19, w9
   15b74:	strh	w8, [x10, x11, lsl #1]
   15b78:	lsr	w8, w27, #24
   15b7c:	cbz	w8, 15994 <lzma_mode_is_supported@@XZ_5.0+0x47ac>
   15b80:	mov	w9, w27
   15b84:	mov	w8, w22
   15b88:	ldur	x11, [x29, #-16]
   15b8c:	mov	w10, #0x6c6c                	// #27756
   15b90:	mov	w12, w19
   15b94:	add	x10, x11, x10
   15b98:	ldrh	w13, [x10, w19, uxtw #1]
   15b9c:	lsr	w11, w9, #11
   15ba0:	mul	w27, w11, w13
   15ba4:	subs	w11, w8, w27
   15ba8:	b.cs	15bc4 <lzma_mode_is_supported@@XZ_5.0+0x49dc>  // b.hs, b.nlast
   15bac:	mov	w9, #0x800                 	// #2048
   15bb0:	sub	w9, w9, w13
   15bb4:	add	w9, w13, w9, lsr #5
   15bb8:	strh	w9, [x10, x12, lsl #1]
   15bbc:	lsl	w9, w19, #1
   15bc0:	b	15bdc <lzma_mode_is_supported@@XZ_5.0+0x49f4>
   15bc4:	sub	w27, w9, w27
   15bc8:	sub	w8, w13, w13, lsr #5
   15bcc:	mov	w9, #0x1                   	// #1
   15bd0:	strh	w8, [x10, x12, lsl #1]
   15bd4:	bfi	w9, w19, #1, #31
   15bd8:	mov	w8, w11
   15bdc:	sub	w2, w9, #0xee
   15be0:	mov	w19, w9
   15be4:	mov	w22, w8
   15be8:	b	16934 <lzma_mode_is_supported@@XZ_5.0+0x574c>
   15bec:	sub	w27, w9, w27
   15bf0:	mov	w9, #0x1                   	// #1
   15bf4:	bfi	w9, w19, #1, #31
   15bf8:	sub	w8, w11, w11, lsr #5
   15bfc:	mov	w19, w9
   15c00:	strh	w8, [x18, x10, lsl #1]
   15c04:	lsr	w8, w27, #24
   15c08:	cbz	w8, 15b44 <lzma_mode_is_supported@@XZ_5.0+0x495c>
   15c0c:	mov	w9, w27
   15c10:	mov	w8, w22
   15c14:	ldrh	w11, [x18, w19, uxtw #1]
   15c18:	lsr	w10, w9, #11
   15c1c:	mul	w27, w10, w11
   15c20:	subs	w22, w8, w27
   15c24:	mov	w10, w19
   15c28:	b.cs	15c68 <lzma_mode_is_supported@@XZ_5.0+0x4a80>  // b.hs, b.nlast
   15c2c:	mov	w9, #0x800                 	// #2048
   15c30:	sub	w9, w9, w11
   15c34:	add	w9, w11, w9, lsr #5
   15c38:	lsl	w19, w19, #1
   15c3c:	strh	w9, [x18, x10, lsl #1]
   15c40:	mov	w22, w8
   15c44:	lsr	w8, w27, #24
   15c48:	cbnz	w8, 15c88 <lzma_mode_is_supported@@XZ_5.0+0x4aa0>
   15c4c:	cmp	x28, x4
   15c50:	b.eq	16d80 <lzma_mode_is_supported@@XZ_5.0+0x5b98>  // b.none
   15c54:	ldrb	w8, [x6, x28]
   15c58:	lsl	w9, w27, #8
   15c5c:	add	x28, x28, #0x1
   15c60:	bfi	w8, w22, #8, #24
   15c64:	b	15c90 <lzma_mode_is_supported@@XZ_5.0+0x4aa8>
   15c68:	sub	w27, w9, w27
   15c6c:	mov	w9, #0x1                   	// #1
   15c70:	bfi	w9, w19, #1, #31
   15c74:	sub	w8, w11, w11, lsr #5
   15c78:	mov	w19, w9
   15c7c:	strh	w8, [x18, x10, lsl #1]
   15c80:	lsr	w8, w27, #24
   15c84:	cbz	w8, 15c4c <lzma_mode_is_supported@@XZ_5.0+0x4a64>
   15c88:	mov	w9, w27
   15c8c:	mov	w8, w22
   15c90:	ldrh	w11, [x18, w19, uxtw #1]
   15c94:	lsr	w10, w9, #11
   15c98:	mul	w27, w10, w11
   15c9c:	subs	w22, w8, w27
   15ca0:	mov	w10, w19
   15ca4:	b.cs	15ce4 <lzma_mode_is_supported@@XZ_5.0+0x4afc>  // b.hs, b.nlast
   15ca8:	mov	w9, #0x800                 	// #2048
   15cac:	sub	w9, w9, w11
   15cb0:	add	w9, w11, w9, lsr #5
   15cb4:	lsl	w19, w19, #1
   15cb8:	strh	w9, [x18, x10, lsl #1]
   15cbc:	mov	w22, w8
   15cc0:	lsr	w8, w27, #24
   15cc4:	cbnz	w8, 15d04 <lzma_mode_is_supported@@XZ_5.0+0x4b1c>
   15cc8:	cmp	x28, x4
   15ccc:	b.eq	16d8c <lzma_mode_is_supported@@XZ_5.0+0x5ba4>  // b.none
   15cd0:	ldrb	w8, [x6, x28]
   15cd4:	lsl	w9, w27, #8
   15cd8:	add	x28, x28, #0x1
   15cdc:	bfi	w8, w22, #8, #24
   15ce0:	b	15d0c <lzma_mode_is_supported@@XZ_5.0+0x4b24>
   15ce4:	sub	w27, w9, w27
   15ce8:	mov	w9, #0x1                   	// #1
   15cec:	bfi	w9, w19, #1, #31
   15cf0:	sub	w8, w11, w11, lsr #5
   15cf4:	mov	w19, w9
   15cf8:	strh	w8, [x18, x10, lsl #1]
   15cfc:	lsr	w8, w27, #24
   15d00:	cbz	w8, 15cc8 <lzma_mode_is_supported@@XZ_5.0+0x4ae0>
   15d04:	mov	w9, w27
   15d08:	mov	w8, w22
   15d0c:	ldrh	w11, [x18, w19, uxtw #1]
   15d10:	lsr	w10, w9, #11
   15d14:	mul	w27, w10, w11
   15d18:	subs	w22, w8, w27
   15d1c:	mov	w10, w19
   15d20:	b.cs	15d60 <lzma_mode_is_supported@@XZ_5.0+0x4b78>  // b.hs, b.nlast
   15d24:	mov	w9, #0x800                 	// #2048
   15d28:	sub	w9, w9, w11
   15d2c:	add	w9, w11, w9, lsr #5
   15d30:	lsl	w19, w19, #1
   15d34:	strh	w9, [x18, x10, lsl #1]
   15d38:	mov	w22, w8
   15d3c:	lsr	w8, w27, #24
   15d40:	cbnz	w8, 15d80 <lzma_mode_is_supported@@XZ_5.0+0x4b98>
   15d44:	cmp	x28, x4
   15d48:	b.eq	16d98 <lzma_mode_is_supported@@XZ_5.0+0x5bb0>  // b.none
   15d4c:	ldrb	w8, [x6, x28]
   15d50:	lsl	w9, w27, #8
   15d54:	add	x28, x28, #0x1
   15d58:	bfi	w8, w22, #8, #24
   15d5c:	b	15d88 <lzma_mode_is_supported@@XZ_5.0+0x4ba0>
   15d60:	sub	w27, w9, w27
   15d64:	mov	w9, #0x1                   	// #1
   15d68:	bfi	w9, w19, #1, #31
   15d6c:	sub	w8, w11, w11, lsr #5
   15d70:	mov	w19, w9
   15d74:	strh	w8, [x18, x10, lsl #1]
   15d78:	lsr	w8, w27, #24
   15d7c:	cbz	w8, 15d44 <lzma_mode_is_supported@@XZ_5.0+0x4b5c>
   15d80:	mov	w9, w27
   15d84:	mov	w8, w22
   15d88:	ldrh	w11, [x18, w19, uxtw #1]
   15d8c:	lsr	w10, w9, #11
   15d90:	mul	w27, w10, w11
   15d94:	subs	w22, w8, w27
   15d98:	mov	w10, w19
   15d9c:	b.cs	15ddc <lzma_mode_is_supported@@XZ_5.0+0x4bf4>  // b.hs, b.nlast
   15da0:	mov	w9, #0x800                 	// #2048
   15da4:	sub	w9, w9, w11
   15da8:	add	w9, w11, w9, lsr #5
   15dac:	lsl	w19, w19, #1
   15db0:	strh	w9, [x18, x10, lsl #1]
   15db4:	mov	w22, w8
   15db8:	lsr	w8, w27, #24
   15dbc:	cbnz	w8, 15dfc <lzma_mode_is_supported@@XZ_5.0+0x4c14>
   15dc0:	cmp	x28, x4
   15dc4:	b.eq	16da4 <lzma_mode_is_supported@@XZ_5.0+0x5bbc>  // b.none
   15dc8:	ldrb	w9, [x6, x28]
   15dcc:	lsl	w8, w27, #8
   15dd0:	add	x28, x28, #0x1
   15dd4:	bfi	w9, w22, #8, #24
   15dd8:	b	15e04 <lzma_mode_is_supported@@XZ_5.0+0x4c1c>
   15ddc:	sub	w27, w9, w27
   15de0:	mov	w9, #0x1                   	// #1
   15de4:	bfi	w9, w19, #1, #31
   15de8:	sub	w8, w11, w11, lsr #5
   15dec:	mov	w19, w9
   15df0:	strh	w8, [x18, x10, lsl #1]
   15df4:	lsr	w8, w27, #24
   15df8:	cbz	w8, 15dc0 <lzma_mode_is_supported@@XZ_5.0+0x4bd8>
   15dfc:	mov	w8, w27
   15e00:	mov	w9, w22
   15e04:	ldrh	w12, [x18, w19, uxtw #1]
   15e08:	lsr	w10, w8, #11
   15e0c:	mov	w11, w19
   15e10:	mul	w27, w10, w12
   15e14:	subs	w10, w9, w27
   15e18:	b.cs	15e34 <lzma_mode_is_supported@@XZ_5.0+0x4c4c>  // b.hs, b.nlast
   15e1c:	mov	w8, #0x800                 	// #2048
   15e20:	sub	w8, w8, w12
   15e24:	add	w8, w12, w8, lsr #5
   15e28:	strh	w8, [x18, x11, lsl #1]
   15e2c:	lsl	w8, w19, #1
   15e30:	b	15e4c <lzma_mode_is_supported@@XZ_5.0+0x4c64>
   15e34:	sub	w27, w8, w27
   15e38:	sub	w9, w12, w12, lsr #5
   15e3c:	mov	w8, #0x1                   	// #1
   15e40:	strh	w9, [x18, x11, lsl #1]
   15e44:	bfi	w8, w19, #1, #31
   15e48:	mov	w9, w10
   15e4c:	sub	w8, w8, #0x40
   15e50:	cmp	w8, #0x4
   15e54:	b.cs	15e60 <lzma_mode_is_supported@@XZ_5.0+0x4c78>  // b.hs, b.nlast
   15e58:	mov	w19, w8
   15e5c:	b	16924 <lzma_mode_is_supported@@XZ_5.0+0x573c>
   15e60:	mov	w10, #0x2                   	// #2
   15e64:	lsr	w11, w8, #1
   15e68:	cmp	w8, #0xd
   15e6c:	bfxil	w10, w8, #0, #1
   15e70:	b.hi	15ee8 <lzma_mode_is_supported@@XZ_5.0+0x4d00>  // b.pmore
   15e74:	ldur	x12, [x29, #-16]
   15e78:	sub	w5, w11, #0x1
   15e7c:	lsl	w10, w10, w5
   15e80:	mov	w11, #0x655e                	// #25950
   15e84:	add	x12, x12, w10, uxtw #1
   15e88:	sub	x8, x12, w8, uxtw #1
   15e8c:	mov	w26, wzr
   15e90:	mov	w3, w10
   15e94:	add	x18, x8, x11
   15e98:	mov	w19, #0x1                   	// #1
   15e9c:	mov	w22, w9
   15ea0:	sub	w8, w5, #0x1
   15ea4:	cmp	w8, #0x4
   15ea8:	b.hi	166a4 <lzma_mode_is_supported@@XZ_5.0+0x54bc>  // b.pmore
   15eac:	adrp	x9, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   15eb0:	add	x9, x9, #0xbae
   15eb4:	adr	x10, 15ec4 <lzma_mode_is_supported@@XZ_5.0+0x4cdc>
   15eb8:	ldrh	w11, [x9, x8, lsl #1]
   15ebc:	add	x10, x10, x11, lsl #2
   15ec0:	br	x10
   15ec4:	lsr	w8, w27, #24
   15ec8:	cbnz	w8, 166b0 <lzma_mode_is_supported@@XZ_5.0+0x54c8>
   15ecc:	cmp	x28, x4
   15ed0:	b.eq	16f98 <lzma_mode_is_supported@@XZ_5.0+0x5db0>  // b.none
   15ed4:	ldrb	w8, [x6, x28]
   15ed8:	lsl	w9, w27, #8
   15edc:	add	x28, x28, #0x1
   15ee0:	bfi	w8, w22, #8, #24
   15ee4:	b	166b8 <lzma_mode_is_supported@@XZ_5.0+0x54d0>
   15ee8:	sub	w5, w11, #0x5
   15eec:	mov	w3, w10
   15ef0:	mov	w19, w8
   15ef4:	mov	w22, w9
   15ef8:	mov	w9, w22
   15efc:	mov	w8, w3
   15f00:	b	15f2c <lzma_mode_is_supported@@XZ_5.0+0x4d44>
   15f04:	lsr	w27, w27, #1
   15f08:	mov	w10, #0x1                   	// #1
   15f0c:	sub	w9, w9, w27
   15f10:	bfi	w10, w8, #1, #31
   15f14:	asr	w8, w9, #31
   15f18:	and	w11, w8, w27
   15f1c:	subs	w5, w5, #0x1
   15f20:	add	w9, w11, w9
   15f24:	add	w8, w10, w8
   15f28:	b.eq	15f54 <lzma_mode_is_supported@@XZ_5.0+0x4d6c>  // b.none
   15f2c:	lsr	w10, w27, #24
   15f30:	cbnz	w10, 15f04 <lzma_mode_is_supported@@XZ_5.0+0x4d1c>
   15f34:	cmp	x28, x4
   15f38:	b.eq	16ae0 <lzma_mode_is_supported@@XZ_5.0+0x58f8>  // b.none
   15f3c:	ldrb	w10, [x6, x28]
   15f40:	add	x28, x28, #0x1
   15f44:	lsl	w27, w27, #8
   15f48:	bfi	w10, w9, #8, #24
   15f4c:	mov	w9, w10
   15f50:	b	15f04 <lzma_mode_is_supported@@XZ_5.0+0x4d1c>
   15f54:	lsl	w3, w8, #4
   15f58:	mov	w19, #0x1                   	// #1
   15f5c:	mov	w22, w9
   15f60:	lsr	w8, w27, #24
   15f64:	cbnz	w8, 15f84 <lzma_mode_is_supported@@XZ_5.0+0x4d9c>
   15f68:	cmp	x28, x4
   15f6c:	b.eq	16db0 <lzma_mode_is_supported@@XZ_5.0+0x5bc8>  // b.none
   15f70:	ldrb	w8, [x6, x28]
   15f74:	lsl	w27, w27, #8
   15f78:	add	x28, x28, #0x1
   15f7c:	bfi	w8, w22, #8, #24
   15f80:	b	15f88 <lzma_mode_is_supported@@XZ_5.0+0x4da0>
   15f84:	mov	w8, w22
   15f88:	ldur	x10, [x29, #-16]
   15f8c:	mov	w9, #0x6644                	// #26180
   15f90:	mov	w11, w19
   15f94:	add	x9, x10, x9
   15f98:	ldrh	w12, [x9, w19, uxtw #1]
   15f9c:	lsr	w10, w27, #11
   15fa0:	mul	w10, w10, w12
   15fa4:	subs	w22, w8, w10
   15fa8:	b.cs	15fec <lzma_mode_is_supported@@XZ_5.0+0x4e04>  // b.hs, b.nlast
   15fac:	mov	w13, #0x800                 	// #2048
   15fb0:	sub	w13, w13, w12
   15fb4:	add	w12, w12, w13, lsr #5
   15fb8:	lsl	w19, w19, #1
   15fbc:	strh	w12, [x9, x11, lsl #1]
   15fc0:	mov	w27, w10
   15fc4:	mov	w22, w8
   15fc8:	lsr	w8, w27, #24
   15fcc:	cbnz	w8, 16010 <lzma_mode_is_supported@@XZ_5.0+0x4e28>
   15fd0:	cmp	x28, x4
   15fd4:	b.eq	16dbc <lzma_mode_is_supported@@XZ_5.0+0x5bd4>  // b.none
   15fd8:	ldrb	w8, [x6, x28]
   15fdc:	lsl	w27, w27, #8
   15fe0:	add	x28, x28, #0x1
   15fe4:	bfi	w8, w22, #8, #24
   15fe8:	b	16014 <lzma_mode_is_supported@@XZ_5.0+0x4e2c>
   15fec:	sub	w27, w27, w10
   15ff0:	mov	w10, #0x1                   	// #1
   15ff4:	bfi	w10, w19, #1, #31
   15ff8:	sub	w8, w12, w12, lsr #5
   15ffc:	add	w3, w3, #0x1
   16000:	mov	w19, w10
   16004:	strh	w8, [x9, x11, lsl #1]
   16008:	lsr	w8, w27, #24
   1600c:	cbz	w8, 15fd0 <lzma_mode_is_supported@@XZ_5.0+0x4de8>
   16010:	mov	w8, w22
   16014:	ldur	x10, [x29, #-16]
   16018:	mov	w9, #0x6644                	// #26180
   1601c:	mov	w11, w19
   16020:	add	x9, x10, x9
   16024:	ldrh	w12, [x9, w19, uxtw #1]
   16028:	lsr	w10, w27, #11
   1602c:	mul	w10, w10, w12
   16030:	subs	w22, w8, w10
   16034:	b.cs	16078 <lzma_mode_is_supported@@XZ_5.0+0x4e90>  // b.hs, b.nlast
   16038:	mov	w13, #0x800                 	// #2048
   1603c:	sub	w13, w13, w12
   16040:	add	w12, w12, w13, lsr #5
   16044:	lsl	w19, w19, #1
   16048:	strh	w12, [x9, x11, lsl #1]
   1604c:	mov	w27, w10
   16050:	mov	w22, w8
   16054:	lsr	w8, w27, #24
   16058:	cbnz	w8, 1609c <lzma_mode_is_supported@@XZ_5.0+0x4eb4>
   1605c:	cmp	x28, x4
   16060:	b.eq	16dc8 <lzma_mode_is_supported@@XZ_5.0+0x5be0>  // b.none
   16064:	ldrb	w8, [x6, x28]
   16068:	lsl	w27, w27, #8
   1606c:	add	x28, x28, #0x1
   16070:	bfi	w8, w22, #8, #24
   16074:	b	160a0 <lzma_mode_is_supported@@XZ_5.0+0x4eb8>
   16078:	sub	w27, w27, w10
   1607c:	mov	w10, #0x1                   	// #1
   16080:	bfi	w10, w19, #1, #31
   16084:	sub	w8, w12, w12, lsr #5
   16088:	add	w3, w3, #0x2
   1608c:	mov	w19, w10
   16090:	strh	w8, [x9, x11, lsl #1]
   16094:	lsr	w8, w27, #24
   16098:	cbz	w8, 1605c <lzma_mode_is_supported@@XZ_5.0+0x4e74>
   1609c:	mov	w8, w22
   160a0:	ldur	x10, [x29, #-16]
   160a4:	mov	w9, #0x6644                	// #26180
   160a8:	mov	w11, w19
   160ac:	add	x9, x10, x9
   160b0:	ldrh	w12, [x9, w19, uxtw #1]
   160b4:	lsr	w10, w27, #11
   160b8:	mul	w10, w10, w12
   160bc:	subs	w22, w8, w10
   160c0:	b.cs	16104 <lzma_mode_is_supported@@XZ_5.0+0x4f1c>  // b.hs, b.nlast
   160c4:	mov	w13, #0x800                 	// #2048
   160c8:	sub	w13, w13, w12
   160cc:	add	w12, w12, w13, lsr #5
   160d0:	lsl	w19, w19, #1
   160d4:	strh	w12, [x9, x11, lsl #1]
   160d8:	mov	w27, w10
   160dc:	mov	w22, w8
   160e0:	lsr	w8, w27, #24
   160e4:	cbnz	w8, 16128 <lzma_mode_is_supported@@XZ_5.0+0x4f40>
   160e8:	cmp	x28, x4
   160ec:	b.eq	16dd4 <lzma_mode_is_supported@@XZ_5.0+0x5bec>  // b.none
   160f0:	ldrb	w9, [x6, x28]
   160f4:	lsl	w8, w27, #8
   160f8:	add	x28, x28, #0x1
   160fc:	bfi	w9, w22, #8, #24
   16100:	b	16130 <lzma_mode_is_supported@@XZ_5.0+0x4f48>
   16104:	sub	w27, w27, w10
   16108:	mov	w10, #0x1                   	// #1
   1610c:	bfi	w10, w19, #1, #31
   16110:	sub	w8, w12, w12, lsr #5
   16114:	add	w3, w3, #0x4
   16118:	mov	w19, w10
   1611c:	strh	w8, [x9, x11, lsl #1]
   16120:	lsr	w8, w27, #24
   16124:	cbz	w8, 160e8 <lzma_mode_is_supported@@XZ_5.0+0x4f00>
   16128:	mov	w8, w27
   1612c:	mov	w9, w22
   16130:	ldur	x11, [x29, #-16]
   16134:	mov	w10, #0x6644                	// #26180
   16138:	lsr	w12, w8, #11
   1613c:	mov	w13, w19
   16140:	add	x10, x11, x10
   16144:	ldrh	w11, [x10, w19, uxtw #1]
   16148:	mul	w27, w12, w11
   1614c:	subs	w12, w9, w27
   16150:	b.cs	16174 <lzma_mode_is_supported@@XZ_5.0+0x4f8c>  // b.hs, b.nlast
   16154:	mov	w8, #0x800                 	// #2048
   16158:	sub	w8, w8, w11
   1615c:	add	w8, w11, w8, lsr #5
   16160:	strh	w8, [x10, x13, lsl #1]
   16164:	mov	w8, w3
   16168:	cmn	w8, #0x1
   1616c:	b.ne	16924 <lzma_mode_is_supported@@XZ_5.0+0x573c>  // b.any
   16170:	b	16190 <lzma_mode_is_supported@@XZ_5.0+0x4fa8>
   16174:	sub	w27, w8, w27
   16178:	sub	w8, w11, w11, lsr #5
   1617c:	strh	w8, [x10, x13, lsl #1]
   16180:	add	w8, w3, #0x8
   16184:	mov	w9, w12
   16188:	cmn	w8, #0x1
   1618c:	b.ne	16924 <lzma_mode_is_supported@@XZ_5.0+0x573c>  // b.any
   16190:	ldur	x8, [x29, #-16]
   16194:	ldr	x8, [x8, #28312]
   16198:	cmn	x8, #0x1
   1619c:	b.eq	16ab0 <lzma_mode_is_supported@@XZ_5.0+0x58c8>  // b.none
   161a0:	mov	w0, #0x9                   	// #9
   161a4:	mov	w3, #0xffffffff            	// #-1
   161a8:	mov	x4, x28
   161ac:	b	16e64 <lzma_mode_is_supported@@XZ_5.0+0x5c7c>
   161b0:	mov	w8, w3
   161b4:	mvn	x10, x8
   161b8:	cmp	x21, x8
   161bc:	add	x8, x21, x10
   161c0:	csel	x10, xzr, x24, hi  // hi = pmore
   161c4:	add	x8, x8, x10
   161c8:	ldrb	w8, [x30, x8]
   161cc:	mov	w19, #0x1                   	// #1
   161d0:	mov	w26, #0x100                 	// #256
   161d4:	mov	w22, w9
   161d8:	lsl	w2, w8, #1
   161dc:	lsr	w8, w27, #24
   161e0:	cbnz	w8, 16200 <lzma_mode_is_supported@@XZ_5.0+0x5018>
   161e4:	cmp	x28, x4
   161e8:	b.eq	16de0 <lzma_mode_is_supported@@XZ_5.0+0x5bf8>  // b.none
   161ec:	ldrb	w8, [x6, x28]
   161f0:	lsl	w10, w27, #8
   161f4:	add	x28, x28, #0x1
   161f8:	bfi	w8, w22, #8, #24
   161fc:	b	16208 <lzma_mode_is_supported@@XZ_5.0+0x5020>
   16200:	mov	w10, w27
   16204:	mov	w8, w22
   16208:	and	w9, w26, w2
   1620c:	add	w11, w26, w19
   16210:	add	w11, w11, w9
   16214:	ldrh	w12, [x18, w11, uxtw #1]
   16218:	lsr	w13, w10, #11
   1621c:	mov	w11, w11
   16220:	mul	w27, w13, w12
   16224:	subs	w13, w8, w27
   16228:	b.cs	16248 <lzma_mode_is_supported@@XZ_5.0+0x5060>  // b.hs, b.nlast
   1622c:	mov	w13, #0x800                 	// #2048
   16230:	sub	w13, w13, w12
   16234:	add	w12, w12, w13, lsr #5
   16238:	lsl	w10, w19, #1
   1623c:	strh	w12, [x18, x11, lsl #1]
   16240:	eor	w9, w9, w26
   16244:	b	16260 <lzma_mode_is_supported@@XZ_5.0+0x5078>
   16248:	sub	w27, w10, w27
   1624c:	sub	w8, w12, w12, lsr #5
   16250:	mov	w10, #0x1                   	// #1
   16254:	strh	w8, [x18, x11, lsl #1]
   16258:	bfi	w10, w19, #1, #31
   1625c:	mov	w8, w13
   16260:	lsl	w2, w2, #1
   16264:	mov	w19, w10
   16268:	mov	w26, w9
   1626c:	mov	w22, w8
   16270:	lsr	w8, w27, #24
   16274:	cbnz	w8, 16294 <lzma_mode_is_supported@@XZ_5.0+0x50ac>
   16278:	cmp	x28, x4
   1627c:	b.eq	16dec <lzma_mode_is_supported@@XZ_5.0+0x5c04>  // b.none
   16280:	ldrb	w8, [x6, x28]
   16284:	lsl	w10, w27, #8
   16288:	add	x28, x28, #0x1
   1628c:	bfi	w8, w22, #8, #24
   16290:	b	1629c <lzma_mode_is_supported@@XZ_5.0+0x50b4>
   16294:	mov	w10, w27
   16298:	mov	w8, w22
   1629c:	and	w9, w26, w2
   162a0:	add	w11, w26, w19
   162a4:	add	w11, w11, w9
   162a8:	ldrh	w12, [x18, w11, uxtw #1]
   162ac:	lsr	w13, w10, #11
   162b0:	mov	w11, w11
   162b4:	mul	w27, w13, w12
   162b8:	subs	w13, w8, w27
   162bc:	b.cs	162dc <lzma_mode_is_supported@@XZ_5.0+0x50f4>  // b.hs, b.nlast
   162c0:	mov	w13, #0x800                 	// #2048
   162c4:	sub	w13, w13, w12
   162c8:	add	w12, w12, w13, lsr #5
   162cc:	lsl	w10, w19, #1
   162d0:	strh	w12, [x18, x11, lsl #1]
   162d4:	eor	w9, w9, w26
   162d8:	b	162f4 <lzma_mode_is_supported@@XZ_5.0+0x510c>
   162dc:	sub	w27, w10, w27
   162e0:	sub	w8, w12, w12, lsr #5
   162e4:	mov	w10, #0x1                   	// #1
   162e8:	strh	w8, [x18, x11, lsl #1]
   162ec:	bfi	w10, w19, #1, #31
   162f0:	mov	w8, w13
   162f4:	lsl	w2, w2, #1
   162f8:	mov	w19, w10
   162fc:	mov	w26, w9
   16300:	mov	w22, w8
   16304:	lsr	w8, w27, #24
   16308:	cbnz	w8, 16328 <lzma_mode_is_supported@@XZ_5.0+0x5140>
   1630c:	cmp	x28, x4
   16310:	b.eq	16df8 <lzma_mode_is_supported@@XZ_5.0+0x5c10>  // b.none
   16314:	ldrb	w8, [x6, x28]
   16318:	lsl	w10, w27, #8
   1631c:	add	x28, x28, #0x1
   16320:	bfi	w8, w22, #8, #24
   16324:	b	16330 <lzma_mode_is_supported@@XZ_5.0+0x5148>
   16328:	mov	w10, w27
   1632c:	mov	w8, w22
   16330:	and	w9, w26, w2
   16334:	add	w11, w26, w19
   16338:	add	w11, w11, w9
   1633c:	ldrh	w12, [x18, w11, uxtw #1]
   16340:	lsr	w13, w10, #11
   16344:	mov	w11, w11
   16348:	mul	w27, w13, w12
   1634c:	subs	w13, w8, w27
   16350:	b.cs	16370 <lzma_mode_is_supported@@XZ_5.0+0x5188>  // b.hs, b.nlast
   16354:	mov	w13, #0x800                 	// #2048
   16358:	sub	w13, w13, w12
   1635c:	add	w12, w12, w13, lsr #5
   16360:	lsl	w10, w19, #1
   16364:	strh	w12, [x18, x11, lsl #1]
   16368:	eor	w9, w9, w26
   1636c:	b	16388 <lzma_mode_is_supported@@XZ_5.0+0x51a0>
   16370:	sub	w27, w10, w27
   16374:	sub	w8, w12, w12, lsr #5
   16378:	mov	w10, #0x1                   	// #1
   1637c:	strh	w8, [x18, x11, lsl #1]
   16380:	bfi	w10, w19, #1, #31
   16384:	mov	w8, w13
   16388:	lsl	w2, w2, #1
   1638c:	mov	w19, w10
   16390:	mov	w26, w9
   16394:	mov	w22, w8
   16398:	lsr	w8, w27, #24
   1639c:	cbnz	w8, 163bc <lzma_mode_is_supported@@XZ_5.0+0x51d4>
   163a0:	cmp	x28, x4
   163a4:	b.eq	16e04 <lzma_mode_is_supported@@XZ_5.0+0x5c1c>  // b.none
   163a8:	ldrb	w8, [x6, x28]
   163ac:	lsl	w10, w27, #8
   163b0:	add	x28, x28, #0x1
   163b4:	bfi	w8, w22, #8, #24
   163b8:	b	163c4 <lzma_mode_is_supported@@XZ_5.0+0x51dc>
   163bc:	mov	w10, w27
   163c0:	mov	w8, w22
   163c4:	and	w9, w26, w2
   163c8:	add	w11, w26, w19
   163cc:	add	w11, w11, w9
   163d0:	ldrh	w12, [x18, w11, uxtw #1]
   163d4:	lsr	w13, w10, #11
   163d8:	mov	w11, w11
   163dc:	mul	w27, w13, w12
   163e0:	subs	w13, w8, w27
   163e4:	b.cs	16404 <lzma_mode_is_supported@@XZ_5.0+0x521c>  // b.hs, b.nlast
   163e8:	mov	w13, #0x800                 	// #2048
   163ec:	sub	w13, w13, w12
   163f0:	add	w12, w12, w13, lsr #5
   163f4:	lsl	w10, w19, #1
   163f8:	strh	w12, [x18, x11, lsl #1]
   163fc:	eor	w9, w9, w26
   16400:	b	1641c <lzma_mode_is_supported@@XZ_5.0+0x5234>
   16404:	sub	w27, w10, w27
   16408:	sub	w8, w12, w12, lsr #5
   1640c:	mov	w10, #0x1                   	// #1
   16410:	strh	w8, [x18, x11, lsl #1]
   16414:	bfi	w10, w19, #1, #31
   16418:	mov	w8, w13
   1641c:	lsl	w2, w2, #1
   16420:	mov	w19, w10
   16424:	mov	w26, w9
   16428:	mov	w22, w8
   1642c:	lsr	w8, w27, #24
   16430:	cbnz	w8, 16450 <lzma_mode_is_supported@@XZ_5.0+0x5268>
   16434:	cmp	x28, x4
   16438:	b.eq	16e10 <lzma_mode_is_supported@@XZ_5.0+0x5c28>  // b.none
   1643c:	ldrb	w8, [x6, x28]
   16440:	lsl	w10, w27, #8
   16444:	add	x28, x28, #0x1
   16448:	bfi	w8, w22, #8, #24
   1644c:	b	16458 <lzma_mode_is_supported@@XZ_5.0+0x5270>
   16450:	mov	w10, w27
   16454:	mov	w8, w22
   16458:	and	w9, w26, w2
   1645c:	add	w11, w26, w19
   16460:	add	w11, w11, w9
   16464:	ldrh	w12, [x18, w11, uxtw #1]
   16468:	lsr	w13, w10, #11
   1646c:	mov	w11, w11
   16470:	mul	w27, w13, w12
   16474:	subs	w13, w8, w27
   16478:	b.cs	16498 <lzma_mode_is_supported@@XZ_5.0+0x52b0>  // b.hs, b.nlast
   1647c:	mov	w13, #0x800                 	// #2048
   16480:	sub	w13, w13, w12
   16484:	add	w12, w12, w13, lsr #5
   16488:	lsl	w10, w19, #1
   1648c:	strh	w12, [x18, x11, lsl #1]
   16490:	eor	w9, w9, w26
   16494:	b	164b0 <lzma_mode_is_supported@@XZ_5.0+0x52c8>
   16498:	sub	w27, w10, w27
   1649c:	sub	w8, w12, w12, lsr #5
   164a0:	mov	w10, #0x1                   	// #1
   164a4:	strh	w8, [x18, x11, lsl #1]
   164a8:	bfi	w10, w19, #1, #31
   164ac:	mov	w8, w13
   164b0:	lsl	w2, w2, #1
   164b4:	mov	w19, w10
   164b8:	mov	w26, w9
   164bc:	mov	w22, w8
   164c0:	lsr	w8, w27, #24
   164c4:	cbnz	w8, 164e4 <lzma_mode_is_supported@@XZ_5.0+0x52fc>
   164c8:	cmp	x28, x4
   164cc:	b.eq	16e1c <lzma_mode_is_supported@@XZ_5.0+0x5c34>  // b.none
   164d0:	ldrb	w8, [x6, x28]
   164d4:	lsl	w10, w27, #8
   164d8:	add	x28, x28, #0x1
   164dc:	bfi	w8, w22, #8, #24
   164e0:	b	164ec <lzma_mode_is_supported@@XZ_5.0+0x5304>
   164e4:	mov	w10, w27
   164e8:	mov	w8, w22
   164ec:	and	w9, w26, w2
   164f0:	add	w11, w26, w19
   164f4:	add	w11, w11, w9
   164f8:	ldrh	w12, [x18, w11, uxtw #1]
   164fc:	lsr	w13, w10, #11
   16500:	mov	w11, w11
   16504:	mul	w27, w13, w12
   16508:	subs	w13, w8, w27
   1650c:	b.cs	1652c <lzma_mode_is_supported@@XZ_5.0+0x5344>  // b.hs, b.nlast
   16510:	mov	w13, #0x800                 	// #2048
   16514:	sub	w13, w13, w12
   16518:	add	w12, w12, w13, lsr #5
   1651c:	lsl	w10, w19, #1
   16520:	strh	w12, [x18, x11, lsl #1]
   16524:	eor	w9, w9, w26
   16528:	b	16544 <lzma_mode_is_supported@@XZ_5.0+0x535c>
   1652c:	sub	w27, w10, w27
   16530:	sub	w8, w12, w12, lsr #5
   16534:	mov	w10, #0x1                   	// #1
   16538:	strh	w8, [x18, x11, lsl #1]
   1653c:	bfi	w10, w19, #1, #31
   16540:	mov	w8, w13
   16544:	lsl	w2, w2, #1
   16548:	mov	w19, w10
   1654c:	mov	w26, w9
   16550:	mov	w22, w8
   16554:	lsr	w8, w27, #24
   16558:	cbnz	w8, 16578 <lzma_mode_is_supported@@XZ_5.0+0x5390>
   1655c:	cmp	x28, x4
   16560:	b.eq	16e28 <lzma_mode_is_supported@@XZ_5.0+0x5c40>  // b.none
   16564:	ldrb	w8, [x6, x28]
   16568:	lsl	w10, w27, #8
   1656c:	add	x28, x28, #0x1
   16570:	bfi	w8, w22, #8, #24
   16574:	b	16580 <lzma_mode_is_supported@@XZ_5.0+0x5398>
   16578:	mov	w10, w27
   1657c:	mov	w8, w22
   16580:	and	w9, w26, w2
   16584:	add	w11, w26, w19
   16588:	add	w11, w11, w9
   1658c:	ldrh	w12, [x18, w11, uxtw #1]
   16590:	lsr	w13, w10, #11
   16594:	mov	w11, w11
   16598:	mul	w27, w13, w12
   1659c:	subs	w13, w8, w27
   165a0:	b.cs	165c0 <lzma_mode_is_supported@@XZ_5.0+0x53d8>  // b.hs, b.nlast
   165a4:	mov	w13, #0x800                 	// #2048
   165a8:	sub	w13, w13, w12
   165ac:	add	w12, w12, w13, lsr #5
   165b0:	lsl	w10, w19, #1
   165b4:	strh	w12, [x18, x11, lsl #1]
   165b8:	eor	w9, w9, w26
   165bc:	b	165d8 <lzma_mode_is_supported@@XZ_5.0+0x53f0>
   165c0:	sub	w27, w10, w27
   165c4:	sub	w8, w12, w12, lsr #5
   165c8:	mov	w10, #0x1                   	// #1
   165cc:	strh	w8, [x18, x11, lsl #1]
   165d0:	bfi	w10, w19, #1, #31
   165d4:	mov	w8, w13
   165d8:	lsl	w2, w2, #1
   165dc:	mov	w19, w10
   165e0:	mov	w26, w9
   165e4:	mov	w22, w8
   165e8:	lsr	w8, w27, #24
   165ec:	cbnz	w8, 1660c <lzma_mode_is_supported@@XZ_5.0+0x5424>
   165f0:	cmp	x28, x4
   165f4:	b.eq	16e34 <lzma_mode_is_supported@@XZ_5.0+0x5c4c>  // b.none
   165f8:	ldrb	w8, [x6, x28]
   165fc:	lsl	w9, w27, #8
   16600:	add	x28, x28, #0x1
   16604:	bfi	w8, w22, #8, #24
   16608:	b	16614 <lzma_mode_is_supported@@XZ_5.0+0x542c>
   1660c:	mov	w9, w27
   16610:	mov	w8, w22
   16614:	and	w10, w26, w2
   16618:	add	w11, w26, w19
   1661c:	add	w12, w11, w10
   16620:	ldrh	w13, [x18, w12, uxtw #1]
   16624:	lsr	w11, w9, #11
   16628:	mov	w12, w12
   1662c:	mul	w27, w11, w13
   16630:	subs	w11, w8, w27
   16634:	b.cs	16654 <lzma_mode_is_supported@@XZ_5.0+0x546c>  // b.hs, b.nlast
   16638:	mov	w11, #0x800                 	// #2048
   1663c:	sub	w11, w11, w13
   16640:	add	w11, w13, w11, lsr #5
   16644:	lsl	w9, w19, #1
   16648:	strh	w11, [x18, x12, lsl #1]
   1664c:	eor	w10, w10, w26
   16650:	b	1666c <lzma_mode_is_supported@@XZ_5.0+0x5484>
   16654:	sub	w27, w9, w27
   16658:	mov	w9, #0x1                   	// #1
   1665c:	sub	w8, w13, w13, lsr #5
   16660:	bfi	w9, w19, #1, #31
   16664:	strh	w8, [x18, x12, lsl #1]
   16668:	mov	w8, w11
   1666c:	adrp	x11, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   16670:	add	x11, x11, #0xbb8
   16674:	ldr	w15, [x11, w15, uxtw #2]
   16678:	mov	w19, w9
   1667c:	mov	w26, w10
   16680:	mov	w22, w8
   16684:	cmp	x21, x7
   16688:	b.eq	16b1c <lzma_mode_is_supported@@XZ_5.0+0x5934>  // b.none
   1668c:	add	x8, x21, #0x1
   16690:	cmp	x8, x16
   16694:	strb	w19, [x30, x21]
   16698:	csinc	x16, x16, x21, ls  // ls = plast
   1669c:	mov	x21, x8
   166a0:	b	142ac <lzma_mode_is_supported@@XZ_5.0+0x30c4>
   166a4:	mov	w8, w3
   166a8:	mov	w9, w22
   166ac:	b	16924 <lzma_mode_is_supported@@XZ_5.0+0x573c>
   166b0:	mov	w9, w27
   166b4:	mov	w8, w22
   166b8:	ldrh	w12, [x18, w19, uxtw #1]
   166bc:	lsr	w10, w9, #11
   166c0:	mov	w11, w19
   166c4:	mul	w27, w10, w12
   166c8:	subs	w10, w8, w27
   166cc:	b.cs	166e8 <lzma_mode_is_supported@@XZ_5.0+0x5500>  // b.hs, b.nlast
   166d0:	mov	w9, #0x800                 	// #2048
   166d4:	sub	w9, w9, w12
   166d8:	add	w9, w12, w9, lsr #5
   166dc:	strh	w9, [x18, x11, lsl #1]
   166e0:	lsl	w9, w19, #1
   166e4:	b	16704 <lzma_mode_is_supported@@XZ_5.0+0x551c>
   166e8:	sub	w27, w9, w27
   166ec:	sub	w8, w12, w12, lsr #5
   166f0:	mov	w9, #0x1                   	// #1
   166f4:	add	w3, w3, #0x1
   166f8:	strh	w8, [x18, x11, lsl #1]
   166fc:	bfi	w9, w19, #1, #31
   16700:	mov	w8, w10
   16704:	add	w26, w26, #0x1
   16708:	mov	w19, w9
   1670c:	mov	w22, w8
   16710:	lsr	w8, w27, #24
   16714:	cbnz	w8, 16734 <lzma_mode_is_supported@@XZ_5.0+0x554c>
   16718:	cmp	x28, x4
   1671c:	b.eq	16f84 <lzma_mode_is_supported@@XZ_5.0+0x5d9c>  // b.none
   16720:	ldrb	w8, [x6, x28]
   16724:	lsl	w9, w27, #8
   16728:	add	x28, x28, #0x1
   1672c:	bfi	w8, w22, #8, #24
   16730:	b	1673c <lzma_mode_is_supported@@XZ_5.0+0x5554>
   16734:	mov	w9, w27
   16738:	mov	w8, w22
   1673c:	ldrh	w12, [x18, w19, uxtw #1]
   16740:	lsr	w10, w9, #11
   16744:	mov	w11, w19
   16748:	mul	w27, w10, w12
   1674c:	subs	w10, w8, w27
   16750:	b.cs	1676c <lzma_mode_is_supported@@XZ_5.0+0x5584>  // b.hs, b.nlast
   16754:	mov	w9, #0x800                 	// #2048
   16758:	sub	w9, w9, w12
   1675c:	add	w9, w12, w9, lsr #5
   16760:	strh	w9, [x18, x11, lsl #1]
   16764:	lsl	w9, w19, #1
   16768:	b	1678c <lzma_mode_is_supported@@XZ_5.0+0x55a4>
   1676c:	sub	w27, w9, w27
   16770:	sub	w8, w12, w12, lsr #5
   16774:	mov	w9, #0x1                   	// #1
   16778:	strh	w8, [x18, x11, lsl #1]
   1677c:	lsl	w8, w9, w26
   16780:	add	w3, w8, w3
   16784:	bfi	w9, w19, #1, #31
   16788:	mov	w8, w10
   1678c:	add	w26, w26, #0x1
   16790:	mov	w19, w9
   16794:	mov	w22, w8
   16798:	lsr	w8, w27, #24
   1679c:	cbnz	w8, 167bc <lzma_mode_is_supported@@XZ_5.0+0x55d4>
   167a0:	cmp	x28, x4
   167a4:	b.eq	16f70 <lzma_mode_is_supported@@XZ_5.0+0x5d88>  // b.none
   167a8:	ldrb	w8, [x6, x28]
   167ac:	lsl	w9, w27, #8
   167b0:	add	x28, x28, #0x1
   167b4:	bfi	w8, w22, #8, #24
   167b8:	b	167c4 <lzma_mode_is_supported@@XZ_5.0+0x55dc>
   167bc:	mov	w9, w27
   167c0:	mov	w8, w22
   167c4:	ldrh	w12, [x18, w19, uxtw #1]
   167c8:	lsr	w10, w9, #11
   167cc:	mov	w11, w19
   167d0:	mul	w27, w10, w12
   167d4:	subs	w10, w8, w27
   167d8:	b.cs	167f4 <lzma_mode_is_supported@@XZ_5.0+0x560c>  // b.hs, b.nlast
   167dc:	mov	w9, #0x800                 	// #2048
   167e0:	sub	w9, w9, w12
   167e4:	add	w9, w12, w9, lsr #5
   167e8:	strh	w9, [x18, x11, lsl #1]
   167ec:	lsl	w9, w19, #1
   167f0:	b	16814 <lzma_mode_is_supported@@XZ_5.0+0x562c>
   167f4:	sub	w27, w9, w27
   167f8:	sub	w8, w12, w12, lsr #5
   167fc:	mov	w9, #0x1                   	// #1
   16800:	strh	w8, [x18, x11, lsl #1]
   16804:	lsl	w8, w9, w26
   16808:	add	w3, w8, w3
   1680c:	bfi	w9, w19, #1, #31
   16810:	mov	w8, w10
   16814:	add	w26, w26, #0x1
   16818:	mov	w19, w9
   1681c:	mov	w22, w8
   16820:	lsr	w8, w27, #24
   16824:	cbnz	w8, 16844 <lzma_mode_is_supported@@XZ_5.0+0x565c>
   16828:	cmp	x28, x4
   1682c:	b.eq	16f5c <lzma_mode_is_supported@@XZ_5.0+0x5d74>  // b.none
   16830:	ldrb	w8, [x6, x28]
   16834:	lsl	w9, w27, #8
   16838:	add	x28, x28, #0x1
   1683c:	bfi	w8, w22, #8, #24
   16840:	b	1684c <lzma_mode_is_supported@@XZ_5.0+0x5664>
   16844:	mov	w9, w27
   16848:	mov	w8, w22
   1684c:	ldrh	w12, [x18, w19, uxtw #1]
   16850:	lsr	w10, w9, #11
   16854:	mov	w11, w19
   16858:	mul	w27, w10, w12
   1685c:	subs	w10, w8, w27
   16860:	b.cs	1687c <lzma_mode_is_supported@@XZ_5.0+0x5694>  // b.hs, b.nlast
   16864:	mov	w9, #0x800                 	// #2048
   16868:	sub	w9, w9, w12
   1686c:	add	w9, w12, w9, lsr #5
   16870:	strh	w9, [x18, x11, lsl #1]
   16874:	lsl	w9, w19, #1
   16878:	b	1689c <lzma_mode_is_supported@@XZ_5.0+0x56b4>
   1687c:	sub	w27, w9, w27
   16880:	sub	w8, w12, w12, lsr #5
   16884:	mov	w9, #0x1                   	// #1
   16888:	strh	w8, [x18, x11, lsl #1]
   1688c:	lsl	w8, w9, w26
   16890:	add	w3, w8, w3
   16894:	bfi	w9, w19, #1, #31
   16898:	mov	w8, w10
   1689c:	add	w26, w26, #0x1
   168a0:	mov	w19, w9
   168a4:	mov	w22, w8
   168a8:	lsr	w8, w27, #24
   168ac:	cbnz	w8, 168cc <lzma_mode_is_supported@@XZ_5.0+0x56e4>
   168b0:	cmp	x28, x4
   168b4:	b.eq	16f48 <lzma_mode_is_supported@@XZ_5.0+0x5d60>  // b.none
   168b8:	ldrb	w9, [x6, x28]
   168bc:	lsl	w8, w27, #8
   168c0:	add	x28, x28, #0x1
   168c4:	bfi	w9, w22, #8, #24
   168c8:	b	168d4 <lzma_mode_is_supported@@XZ_5.0+0x56ec>
   168cc:	mov	w8, w27
   168d0:	mov	w9, w22
   168d4:	ldrh	w12, [x18, w19, uxtw #1]
   168d8:	lsr	w10, w8, #11
   168dc:	mov	w11, w19
   168e0:	mul	w27, w10, w12
   168e4:	subs	w10, w9, w27
   168e8:	b.cs	16908 <lzma_mode_is_supported@@XZ_5.0+0x5720>  // b.hs, b.nlast
   168ec:	mov	w8, #0x800                 	// #2048
   168f0:	sub	w8, w8, w12
   168f4:	add	w8, w12, w8, lsr #5
   168f8:	strh	w8, [x18, x11, lsl #1]
   168fc:	mov	w5, #0x1                   	// #1
   16900:	mov	w8, w3
   16904:	b	16924 <lzma_mode_is_supported@@XZ_5.0+0x573c>
   16908:	sub	w27, w8, w27
   1690c:	sub	w8, w12, w12, lsr #5
   16910:	mov	w5, #0x1                   	// #1
   16914:	strh	w8, [x18, x11, lsl #1]
   16918:	lsl	w8, w5, w26
   1691c:	add	w8, w8, w3
   16920:	mov	w9, w10
   16924:	cmp	x16, w8, uxtw
   16928:	b.ls	16b04 <lzma_mode_is_supported@@XZ_5.0+0x591c>  // b.plast
   1692c:	mov	w3, w8
   16930:	mov	w22, w9
   16934:	sub	x8, x7, x21
   16938:	mov	w9, w2
   1693c:	cmp	x8, x9
   16940:	csel	x25, x8, x9, cc  // cc = lo, ul, last
   16944:	sub	w2, w2, w25
   16948:	cmp	w3, w25
   1694c:	mov	w8, w3
   16950:	b.cs	16980 <lzma_mode_is_supported@@XZ_5.0+0x5798>  // b.hs, b.nlast
   16954:	mvn	x9, x8
   16958:	add	x9, x30, x9
   1695c:	cmp	x21, x8
   16960:	csel	x10, xzr, x24, hi  // hi = pmore
   16964:	add	x10, x9, x10
   16968:	ldrb	w10, [x10, x21]
   1696c:	subs	w25, w25, #0x1
   16970:	strb	w10, [x30, x21]
   16974:	add	x21, x21, #0x1
   16978:	b.ne	1695c <lzma_mode_is_supported@@XZ_5.0+0x5774>  // b.any
   1697c:	b	16a90 <lzma_mode_is_supported@@XZ_5.0+0x58a8>
   16980:	cmp	x21, x8
   16984:	stp	w26, w3, [x29, #-60]
   16988:	stur	x16, [x29, #-48]
   1698c:	stur	w2, [x29, #-52]
   16990:	b.ls	169f8 <lzma_mode_is_supported@@XZ_5.0+0x5810>  // b.plast
   16994:	add	x0, x30, x21
   16998:	mvn	x8, x8
   1699c:	add	x1, x8, x0
   169a0:	mov	x2, x25
   169a4:	str	x21, [sp, #80]
   169a8:	mov	w21, w15
   169ac:	mov	w20, w17
   169b0:	mov	x23, x18
   169b4:	mov	w24, w5
   169b8:	mov	x26, x7
   169bc:	bl	3040 <memcpy@plt>
   169c0:	mov	w15, w21
   169c4:	ldr	x21, [sp, #80]
   169c8:	mov	x7, x26
   169cc:	ldp	x6, x4, [x29, #-80]
   169d0:	mov	w5, w24
   169d4:	ldp	x24, x30, [sp, #40]
   169d8:	ldp	w3, w2, [x29, #-56]
   169dc:	mov	x18, x23
   169e0:	ldur	x16, [x29, #-48]
   169e4:	ldur	w26, [x29, #-60]
   169e8:	ldur	x23, [x29, #-88]
   169ec:	mov	w17, w20
   169f0:	add	x21, x25, x21
   169f4:	b	16a90 <lzma_mode_is_supported@@XZ_5.0+0x58a8>
   169f8:	eor	x8, x8, #0xffffffff
   169fc:	add	x23, x8, x21
   16a00:	add	w9, w23, w24
   16a04:	neg	x8, x23
   16a08:	mov	x20, x24
   16a0c:	add	x0, x30, x21
   16a10:	cmp	w25, w8
   16a14:	add	x1, x30, x9
   16a18:	mov	x24, x30
   16a1c:	str	w5, [sp, #60]
   16a20:	str	x18, [sp, #64]
   16a24:	stp	w17, w15, [sp, #76]
   16a28:	b.ls	16a58 <lzma_mode_is_supported@@XZ_5.0+0x5870>  // b.plast
   16a2c:	and	x26, x8, #0xffffffff
   16a30:	mov	x2, x26
   16a34:	bl	3050 <memmove@plt>
   16a38:	add	x21, x26, x21
   16a3c:	add	w25, w23, w25
   16a40:	add	x0, x24, x21
   16a44:	mov	x1, x24
   16a48:	mov	x2, x25
   16a4c:	bl	3040 <memcpy@plt>
   16a50:	add	x21, x21, x25
   16a54:	b	16a64 <lzma_mode_is_supported@@XZ_5.0+0x587c>
   16a58:	mov	x2, x25
   16a5c:	bl	3050 <memmove@plt>
   16a60:	add	x21, x25, x21
   16a64:	ldur	x16, [x29, #-48]
   16a68:	ldp	w17, w15, [sp, #76]
   16a6c:	ldp	x6, x4, [x29, #-80]
   16a70:	ldr	x18, [sp, #64]
   16a74:	ldp	w3, w2, [x29, #-56]
   16a78:	ldr	w5, [sp, #60]
   16a7c:	ldur	w26, [x29, #-60]
   16a80:	ldr	x7, [sp, #32]
   16a84:	ldur	x23, [x29, #-88]
   16a88:	mov	x30, x24
   16a8c:	mov	x24, x20
   16a90:	cmp	x16, x21
   16a94:	csel	x16, x21, x16, cc  // cc = lo, ul, last
   16a98:	cbz	w2, 142ac <lzma_mode_is_supported@@XZ_5.0+0x30c4>
   16a9c:	ldr	x9, [sp]
   16aa0:	mov	w8, #0x46                  	// #70
   16aa4:	mov	w0, wzr
   16aa8:	str	w8, [x9]
   16aac:	b	16afc <lzma_mode_is_supported@@XZ_5.0+0x5914>
   16ab0:	mov	w3, #0xffffffff            	// #-1
   16ab4:	mov	w22, w9
   16ab8:	lsr	w8, w27, #24
   16abc:	cbnz	w8, 16af8 <lzma_mode_is_supported@@XZ_5.0+0x5910>
   16ac0:	cmp	x28, x4
   16ac4:	b.eq	16fac <lzma_mode_is_supported@@XZ_5.0+0x5dc4>  // b.none
   16ac8:	ldrb	w9, [x6, x28]
   16acc:	lsl	w27, w27, #8
   16ad0:	add	x4, x28, #0x1
   16ad4:	mov	w0, #0x1                   	// #1
   16ad8:	bfi	w9, w22, #8, #24
   16adc:	b	16e64 <lzma_mode_is_supported@@XZ_5.0+0x5c7c>
   16ae0:	ldr	x11, [sp]
   16ae4:	mov	w10, #0x2b                  	// #43
   16ae8:	mov	w0, wzr
   16aec:	mov	w3, w8
   16af0:	str	w10, [x11]
   16af4:	b	16e64 <lzma_mode_is_supported@@XZ_5.0+0x5c7c>
   16af8:	mov	w0, #0x1                   	// #1
   16afc:	mov	x4, x28
   16b00:	b	16e60 <lzma_mode_is_supported@@XZ_5.0+0x5c78>
   16b04:	mov	w0, #0x9                   	// #9
   16b08:	mov	w3, w8
   16b0c:	b	161a8 <lzma_mode_is_supported@@XZ_5.0+0x4fc0>
   16b10:	mov	w0, wzr
   16b14:	mov	w8, #0x32                  	// #50
   16b18:	b	16b24 <lzma_mode_is_supported@@XZ_5.0+0x593c>
   16b1c:	mov	w0, wzr
   16b20:	mov	w8, #0x12                  	// #18
   16b24:	ldr	x9, [sp]
   16b28:	mov	x21, x7
   16b2c:	str	w8, [x9]
   16b30:	b	16afc <lzma_mode_is_supported@@XZ_5.0+0x5914>
   16b34:	mov	w0, wzr
   16b38:	mov	w8, #0x2                   	// #2
   16b3c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b40:	mov	w0, wzr
   16b44:	mov	w8, #0x3                   	// #3
   16b48:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b4c:	mov	w0, wzr
   16b50:	mov	w8, #0x4                   	// #4
   16b54:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b58:	mov	w0, wzr
   16b5c:	mov	w8, #0x5                   	// #5
   16b60:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b64:	mov	w0, wzr
   16b68:	mov	w8, #0x6                   	// #6
   16b6c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b70:	mov	w0, wzr
   16b74:	mov	w8, #0x7                   	// #7
   16b78:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b7c:	mov	w0, wzr
   16b80:	mov	w8, #0x8                   	// #8
   16b84:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b88:	mov	w0, wzr
   16b8c:	mov	w8, #0x9                   	// #9
   16b90:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16b94:	ldr	x9, [sp]
   16b98:	mov	w8, #0x13                  	// #19
   16b9c:	mov	w0, wzr
   16ba0:	stur	w17, [x29, #-28]
   16ba4:	str	w8, [x9]
   16ba8:	mov	w17, w1
   16bac:	b	16e60 <lzma_mode_is_supported@@XZ_5.0+0x5c78>
   16bb0:	mov	w0, wzr
   16bb4:	mov	w8, #0x14                  	// #20
   16bb8:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16bbc:	mov	w0, wzr
   16bc0:	mov	w8, #0x15                  	// #21
   16bc4:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16bc8:	mov	w0, wzr
   16bcc:	mov	w8, #0x16                  	// #22
   16bd0:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16bd4:	mov	w0, wzr
   16bd8:	mov	w8, #0x31                  	// #49
   16bdc:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16be0:	mov	w0, wzr
   16be4:	mov	w8, #0x33                  	// #51
   16be8:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16bec:	mov	w0, wzr
   16bf0:	mov	w8, #0x17                  	// #23
   16bf4:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16bf8:	mov	w0, wzr
   16bfc:	mov	w8, #0x34                  	// #52
   16c00:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c04:	mov	w0, wzr
   16c08:	mov	w8, #0x35                  	// #53
   16c0c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c10:	mov	w0, wzr
   16c14:	mov	w8, #0x36                  	// #54
   16c18:	b	16c6c <lzma_mode_is_supported@@XZ_5.0+0x5a84>
   16c1c:	mov	w0, wzr
   16c20:	mov	w8, #0x37                  	// #55
   16c24:	b	16c6c <lzma_mode_is_supported@@XZ_5.0+0x5a84>
   16c28:	mov	w0, wzr
   16c2c:	mov	w8, #0x38                  	// #56
   16c30:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c34:	mov	w0, wzr
   16c38:	mov	w8, #0x3a                  	// #58
   16c3c:	b	16c6c <lzma_mode_is_supported@@XZ_5.0+0x5a84>
   16c40:	mov	w0, wzr
   16c44:	mov	w8, #0x3b                  	// #59
   16c48:	b	16c6c <lzma_mode_is_supported@@XZ_5.0+0x5a84>
   16c4c:	mov	w0, wzr
   16c50:	mov	w8, #0x3c                  	// #60
   16c54:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c58:	mov	w0, wzr
   16c5c:	mov	w8, #0x39                  	// #57
   16c60:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c64:	mov	w0, wzr
   16c68:	mov	w8, #0x3e                  	// #62
   16c6c:	ldr	x10, [sp]
   16c70:	str	w8, [x10]
   16c74:	b	16e64 <lzma_mode_is_supported@@XZ_5.0+0x5c7c>
   16c78:	mov	w0, wzr
   16c7c:	mov	w8, #0x3f                  	// #63
   16c80:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c84:	mov	w0, wzr
   16c88:	mov	w8, #0x40                  	// #64
   16c8c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c90:	mov	w0, wzr
   16c94:	mov	w8, #0x18                  	// #24
   16c98:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16c9c:	mov	w0, wzr
   16ca0:	mov	w8, #0x19                  	// #25
   16ca4:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16ca8:	mov	w0, wzr
   16cac:	mov	w8, #0x1a                  	// #26
   16cb0:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16cb4:	mov	w0, wzr
   16cb8:	mov	w8, #0x1c                  	// #28
   16cbc:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16cc0:	mov	w0, wzr
   16cc4:	mov	w8, #0x1d                  	// #29
   16cc8:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16ccc:	mov	w0, wzr
   16cd0:	mov	w8, #0x1b                  	// #27
   16cd4:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16cd8:	mov	w0, wzr
   16cdc:	mov	w8, #0x1e                  	// #30
   16ce0:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16ce4:	mov	w0, wzr
   16ce8:	mov	w8, #0x3d                  	// #61
   16cec:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16cf0:	mov	w0, wzr
   16cf4:	mov	w8, #0x41                  	// #65
   16cf8:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16cfc:	mov	w0, wzr
   16d00:	mov	w8, #0x42                  	// #66
   16d04:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d08:	mov	w0, wzr
   16d0c:	mov	w8, #0x1f                  	// #31
   16d10:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d14:	mov	w0, wzr
   16d18:	mov	w8, #0x20                  	// #32
   16d1c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d20:	mov	w0, wzr
   16d24:	mov	w8, #0x21                  	// #33
   16d28:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d2c:	mov	w0, wzr
   16d30:	mov	w8, #0x43                  	// #67
   16d34:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d38:	mov	w0, wzr
   16d3c:	mov	w8, #0x44                  	// #68
   16d40:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d44:	mov	w0, wzr
   16d48:	mov	w8, #0x22                  	// #34
   16d4c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d50:	mov	w0, wzr
   16d54:	mov	w8, #0x45                  	// #69
   16d58:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d5c:	mov	w0, wzr
   16d60:	mov	w8, #0x23                  	// #35
   16d64:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d68:	mov	w0, wzr
   16d6c:	mov	w8, #0x24                  	// #36
   16d70:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d74:	mov	w0, wzr
   16d78:	mov	w8, #0x25                  	// #37
   16d7c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d80:	mov	w0, wzr
   16d84:	mov	w8, #0x26                  	// #38
   16d88:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d8c:	mov	w0, wzr
   16d90:	mov	w8, #0x27                  	// #39
   16d94:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16d98:	mov	w0, wzr
   16d9c:	mov	w8, #0x28                  	// #40
   16da0:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16da4:	mov	w0, wzr
   16da8:	mov	w8, #0x29                  	// #41
   16dac:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16db0:	mov	w0, wzr
   16db4:	mov	w8, #0x2c                  	// #44
   16db8:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16dbc:	mov	w0, wzr
   16dc0:	mov	w8, #0x2d                  	// #45
   16dc4:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16dc8:	mov	w0, wzr
   16dcc:	mov	w8, #0x2e                  	// #46
   16dd0:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16dd4:	mov	w0, wzr
   16dd8:	mov	w8, #0x2f                  	// #47
   16ddc:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16de0:	mov	w0, wzr
   16de4:	mov	w8, #0xa                   	// #10
   16de8:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16dec:	mov	w0, wzr
   16df0:	mov	w8, #0xb                   	// #11
   16df4:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16df8:	mov	w0, wzr
   16dfc:	mov	w8, #0xc                   	// #12
   16e00:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16e04:	mov	w0, wzr
   16e08:	mov	w8, #0xd                   	// #13
   16e0c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16e10:	mov	w0, wzr
   16e14:	mov	w8, #0xe                   	// #14
   16e18:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16e1c:	mov	w0, wzr
   16e20:	mov	w8, #0xf                   	// #15
   16e24:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16e28:	mov	w0, wzr
   16e2c:	mov	w8, #0x10                  	// #16
   16e30:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16e34:	mov	w0, wzr
   16e38:	mov	w8, #0x11                  	// #17
   16e3c:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16e40:	mov	w0, #0x9                   	// #9
   16e44:	stur	w17, [x29, #-28]
   16e48:	mov	w17, w1
   16e4c:	b	161a8 <lzma_mode_is_supported@@XZ_5.0+0x4fc0>
   16e50:	mov	w0, wzr
   16e54:	mov	w8, #0x1                   	// #1
   16e58:	ldr	x9, [sp]
   16e5c:	str	w8, [x9]
   16e60:	mov	w9, w22
   16e64:	ldr	x10, [sp, #16]
   16e68:	mov	w8, w3
   16e6c:	ldur	x11, [x29, #-24]
   16e70:	ldur	w8, [x29, #-28]
   16e74:	stp	x21, x16, [x10, #8]
   16e78:	ldr	x10, [sp, #24]
   16e7c:	str	w27, [x11, #2056]
   16e80:	str	w9, [x11, #2060]
   16e84:	str	wzr, [x11, #2064]
   16e88:	str	x4, [x10]
   16e8c:	str	w8, [x11, #2076]
   16e90:	ldur	w8, [x29, #-36]
   16e94:	str	w15, [x11, #2068]
   16e98:	str	w3, [x11, #2072]
   16e9c:	str	w17, [x11, #2080]
   16ea0:	str	w8, [x11, #2084]
   16ea4:	ldur	x8, [x29, #-16]
   16ea8:	ldr	x10, [sp, #8]
   16eac:	str	x18, [x8, #28328]
   16eb0:	str	w19, [x11, #2124]
   16eb4:	str	w5, [x11, #2128]
   16eb8:	str	w26, [x11, #2132]
   16ebc:	str	w2, [x11, #2136]
   16ec0:	ldr	x8, [x8, #28312]
   16ec4:	cmn	x8, #0x1
   16ec8:	b.eq	16f00 <lzma_mode_is_supported@@XZ_5.0+0x5d18>  // b.none
   16ecc:	sub	x10, x10, x21
   16ed0:	add	x8, x8, x10
   16ed4:	ldur	x10, [x29, #-16]
   16ed8:	str	x8, [x10, #28312]
   16edc:	cbnz	w0, 16f00 <lzma_mode_is_supported@@XZ_5.0+0x5d18>
   16ee0:	cbnz	x8, 16f00 <lzma_mode_is_supported@@XZ_5.0+0x5d18>
   16ee4:	ldr	x8, [sp]
   16ee8:	ldr	w0, [x8]
   16eec:	cbz	w0, 16f28 <lzma_mode_is_supported@@XZ_5.0+0x5d40>
   16ef0:	cmp	w0, #0x1
   16ef4:	b.eq	16f08 <lzma_mode_is_supported@@XZ_5.0+0x5d20>  // b.none
   16ef8:	mov	w0, #0x9                   	// #9
   16efc:	b	16f28 <lzma_mode_is_supported@@XZ_5.0+0x5d40>
   16f00:	cmp	w0, #0x1
   16f04:	b.ne	16f28 <lzma_mode_is_supported@@XZ_5.0+0x5d40>  // b.any
   16f08:	cmp	w9, #0x0
   16f0c:	mov	w8, #0x9                   	// #9
   16f10:	csinc	w0, w8, wzr, ne  // ne = any
   16f14:	ldur	x8, [x29, #-24]
   16f18:	movi	d0, #0xffffffff
   16f1c:	mov	w9, #0x5                   	// #5
   16f20:	str	d0, [x8, #2056]
   16f24:	str	w9, [x8, #2064]
   16f28:	ldp	x20, x19, [sp, #272]
   16f2c:	ldp	x22, x21, [sp, #256]
   16f30:	ldp	x24, x23, [sp, #240]
   16f34:	ldp	x26, x25, [sp, #224]
   16f38:	ldp	x28, x27, [sp, #208]
   16f3c:	ldp	x29, x30, [sp, #192]
   16f40:	add	sp, sp, #0x120
   16f44:	ret
   16f48:	ldr	x9, [sp]
   16f4c:	mov	w8, #0x2a                  	// #42
   16f50:	mov	w0, wzr
   16f54:	mov	w5, #0x1                   	// #1
   16f58:	b	16e5c <lzma_mode_is_supported@@XZ_5.0+0x5c74>
   16f5c:	ldr	x9, [sp]
   16f60:	mov	w8, #0x2a                  	// #42
   16f64:	mov	w0, wzr
   16f68:	mov	w5, #0x2                   	// #2
   16f6c:	b	16e5c <lzma_mode_is_supported@@XZ_5.0+0x5c74>
   16f70:	ldr	x9, [sp]
   16f74:	mov	w8, #0x2a                  	// #42
   16f78:	mov	w0, wzr
   16f7c:	mov	w5, #0x3                   	// #3
   16f80:	b	16e5c <lzma_mode_is_supported@@XZ_5.0+0x5c74>
   16f84:	ldr	x9, [sp]
   16f88:	mov	w8, #0x2a                  	// #42
   16f8c:	mov	w0, wzr
   16f90:	mov	w5, #0x4                   	// #4
   16f94:	b	16e5c <lzma_mode_is_supported@@XZ_5.0+0x5c74>
   16f98:	ldr	x9, [sp]
   16f9c:	mov	w8, #0x2a                  	// #42
   16fa0:	mov	w0, wzr
   16fa4:	mov	w5, #0x5                   	// #5
   16fa8:	b	16e5c <lzma_mode_is_supported@@XZ_5.0+0x5c74>
   16fac:	mov	w0, wzr
   16fb0:	mov	w8, #0x30                  	// #48
   16fb4:	b	16e58 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   16fb8:	ldr	w9, [x1, #28]
   16fbc:	mov	w8, #0xffffffff            	// #-1
   16fc0:	mov	w12, #0x6e8c                	// #28300
   16fc4:	mov	w11, wzr
   16fc8:	lsl	w8, w8, w9
   16fcc:	mvn	w10, w8
   16fd0:	str	w10, [x0, x12]
   16fd4:	ldp	w13, w12, [x1, #20]
   16fd8:	mov	w8, #0x6640                	// #26176
   16fdc:	mov	w14, #0x600                 	// #1536
   16fe0:	add	x8, x0, x8
   16fe4:	add	w15, w12, w13
   16fe8:	movi	v0.8h, #0x4, lsl #8
   16fec:	mov	x16, xzr
   16ff0:	umaddl	x17, w11, w14, x0
   16ff4:	add	x18, x17, x16
   16ff8:	add	x16, x16, #0x20
   16ffc:	cmp	x16, #0x600
   17000:	stp	q0, q0, [x18]
   17004:	b.ne	16ff4 <lzma_mode_is_supported@@XZ_5.0+0x5e0c>  // b.any
   17008:	add	w11, w11, #0x1
   1700c:	lsr	w16, w11, w15
   17010:	cbz	w16, 16fec <lzma_mode_is_supported@@XZ_5.0+0x5e04>
   17014:	str	w13, [x8, #2128]
   17018:	mov	w13, #0xffffffff            	// #-1
   1701c:	lsl	w12, w13, w12
   17020:	movi	v0.2d, #0x0
   17024:	mov	w15, #0x6e78                	// #28280
   17028:	mvn	w12, w12
   1702c:	mov	w14, #0x6e88                	// #28296
   17030:	add	x16, x8, #0x82c
   17034:	str	w12, [x8, #2132]
   17038:	str	q0, [x0, x15]
   1703c:	movi	d0, #0xffffffff
   17040:	mov	w18, #0x5                   	// #5
   17044:	mov	w13, #0x61e0                	// #25056
   17048:	mov	w15, #0x6180                	// #24960
   1704c:	mov	w17, #0x6198                	// #24984
   17050:	mov	w1, #0x61b0                	// #25008
   17054:	mov	w2, #0x61c8                	// #25032
   17058:	mov	x11, xzr
   1705c:	add	x12, x0, #0x6, lsl #12
   17060:	str	wzr, [x0, x14]
   17064:	str	w10, [x8, #2124]
   17068:	str	d0, [x16]
   1706c:	add	x13, x0, x13
   17070:	add	x14, x0, x15
   17074:	add	x15, x0, x17
   17078:	add	x16, x0, x1
   1707c:	add	x17, x0, x2
   17080:	str	w18, [x8, #2100]
   17084:	mov	w18, #0x400                 	// #1024
   17088:	mov	w1, wzr
   1708c:	mov	w2, w1
   17090:	lsl	x3, x11, #5
   17094:	add	w1, w1, #0x1
   17098:	add	x4, x12, x3
   1709c:	lsl	x2, x2, #1
   170a0:	add	x3, x13, x3
   170a4:	cmp	w1, w10
   170a8:	strh	w18, [x4, x2]
   170ac:	strh	w18, [x3, x2]
   170b0:	b.ls	1708c <lzma_mode_is_supported@@XZ_5.0+0x5ea4>  // b.plast
   170b4:	lsl	x1, x11, #1
   170b8:	add	x11, x11, #0x1
   170bc:	cmp	x11, #0xc
   170c0:	strh	w18, [x14, x1]
   170c4:	strh	w18, [x15, x1]
   170c8:	strh	w18, [x16, x1]
   170cc:	strh	w18, [x17, x1]
   170d0:	b.ne	17088 <lzma_mode_is_supported@@XZ_5.0+0x5ea0>  // b.any
   170d4:	movi	v0.8h, #0x4, lsl #8
   170d8:	mov	w10, #0x4000400             	// #67109888
   170dc:	mov	w11, #0x6668                	// #26216
   170e0:	mov	w12, #0x6768                	// #26472
   170e4:	mov	w13, #0x6a6c                	// #27244
   170e8:	mov	w14, #0x6b6c                	// #27500
   170ec:	str	q0, [x0, #25440]
   170f0:	str	q0, [x0, #25456]
   170f4:	str	q0, [x0, #25472]
   170f8:	str	q0, [x0, #25488]
   170fc:	str	q0, [x0, #25504]
   17100:	str	q0, [x0, #25520]
   17104:	str	q0, [x0, #25536]
   17108:	str	q0, [x0, #25552]
   1710c:	str	q0, [x0, #25568]
   17110:	str	q0, [x0, #25584]
   17114:	str	q0, [x0, #25600]
   17118:	str	q0, [x0, #25616]
   1711c:	str	q0, [x0, #25632]
   17120:	str	q0, [x0, #25648]
   17124:	str	q0, [x0, #25664]
   17128:	str	q0, [x0, #25680]
   1712c:	str	q0, [x0, #25696]
   17130:	str	q0, [x0, #25712]
   17134:	str	q0, [x0, #25728]
   17138:	str	q0, [x0, #25744]
   1713c:	str	q0, [x0, #25760]
   17140:	str	q0, [x0, #25776]
   17144:	str	q0, [x0, #25792]
   17148:	str	q0, [x0, #25808]
   1714c:	str	q0, [x0, #25824]
   17150:	str	q0, [x0, #25840]
   17154:	str	q0, [x0, #25856]
   17158:	str	q0, [x0, #25872]
   1715c:	str	q0, [x0, #25888]
   17160:	str	q0, [x0, #25904]
   17164:	str	q0, [x0, #25920]
   17168:	str	q0, [x0, #25936]
   1716c:	str	q0, [x0, #25952]
   17170:	str	q0, [x0, #25968]
   17174:	str	q0, [x0, #25984]
   17178:	str	q0, [x0, #26000]
   1717c:	str	q0, [x0, #26016]
   17180:	str	q0, [x0, #26032]
   17184:	str	q0, [x0, #26048]
   17188:	str	q0, [x0, #26064]
   1718c:	str	q0, [x0, #26080]
   17190:	str	q0, [x0, #26096]
   17194:	str	q0, [x0, #26112]
   17198:	str	q0, [x0, #26128]
   1719c:	str	q0, [x0, #26144]
   171a0:	str	q0, [x0, #26160]
   171a4:	str	w10, [x8]
   171a8:	str	w10, [x8, #36]
   171ac:	str	w10, [x8, #1064]
   171b0:	add	x10, x0, x11
   171b4:	add	x11, x0, x12
   171b8:	add	x12, x0, x13
   171bc:	add	x13, x0, x14
   171c0:	mov	w14, #0x1                   	// #1
   171c4:	stur	q0, [x8, #4]
   171c8:	stur	q0, [x8, #20]
   171cc:	sub	w15, w14, #0x1
   171d0:	lsr	w16, w14, w9
   171d4:	lsl	x15, x15, #4
   171d8:	add	w14, w14, #0x1
   171dc:	str	q0, [x10, x15]
   171e0:	str	q0, [x11, x15]
   171e4:	str	q0, [x12, x15]
   171e8:	str	q0, [x13, x15]
   171ec:	cbz	w16, 171cc <lzma_mode_is_supported@@XZ_5.0+0x5fe4>
   171f0:	add	x9, x8, #0x228
   171f4:	movi	v0.8h, #0x4, lsl #8
   171f8:	str	q0, [x9]
   171fc:	add	x9, x8, #0x238
   17200:	str	q0, [x9]
   17204:	add	x9, x8, #0x248
   17208:	str	q0, [x9]
   1720c:	add	x9, x8, #0x258
   17210:	str	q0, [x9]
   17214:	add	x9, x8, #0x268
   17218:	str	q0, [x9]
   1721c:	add	x9, x8, #0x278
   17220:	str	q0, [x9]
   17224:	add	x9, x8, #0x288
   17228:	str	q0, [x9]
   1722c:	add	x9, x8, #0x298
   17230:	str	q0, [x9]
   17234:	add	x9, x8, #0x2a8
   17238:	str	q0, [x9]
   1723c:	add	x9, x8, #0x2b8
   17240:	str	q0, [x9]
   17244:	add	x9, x8, #0x2c8
   17248:	str	q0, [x9]
   1724c:	add	x9, x8, #0x2d8
   17250:	str	q0, [x9]
   17254:	add	x9, x8, #0x2e8
   17258:	str	q0, [x9]
   1725c:	add	x9, x8, #0x2f8
   17260:	str	q0, [x9]
   17264:	add	x9, x8, #0x308
   17268:	str	q0, [x9]
   1726c:	add	x9, x8, #0x318
   17270:	str	q0, [x9]
   17274:	add	x9, x8, #0x328
   17278:	str	q0, [x9]
   1727c:	add	x9, x8, #0x338
   17280:	str	q0, [x9]
   17284:	add	x9, x8, #0x348
   17288:	str	q0, [x9]
   1728c:	add	x9, x8, #0x358
   17290:	str	q0, [x9]
   17294:	add	x9, x8, #0x368
   17298:	str	q0, [x9]
   1729c:	add	x9, x8, #0x378
   172a0:	str	q0, [x9]
   172a4:	add	x9, x8, #0x388
   172a8:	str	q0, [x9]
   172ac:	add	x9, x8, #0x398
   172b0:	str	q0, [x9]
   172b4:	add	x9, x8, #0x3a8
   172b8:	str	q0, [x9]
   172bc:	add	x9, x8, #0x3b8
   172c0:	str	q0, [x9]
   172c4:	add	x9, x8, #0x3c8
   172c8:	str	q0, [x9]
   172cc:	add	x9, x8, #0x3d8
   172d0:	str	q0, [x9]
   172d4:	add	x9, x8, #0x3e8
   172d8:	str	q0, [x9]
   172dc:	add	x9, x8, #0x3f8
   172e0:	str	q0, [x9]
   172e4:	add	x9, x8, #0x408
   172e8:	str	q0, [x9]
   172ec:	add	x9, x8, #0x418
   172f0:	str	q0, [x9]
   172f4:	add	x9, x8, #0x62c
   172f8:	str	q0, [x9]
   172fc:	add	x9, x8, #0x63c
   17300:	str	q0, [x9]
   17304:	add	x9, x8, #0x64c
   17308:	str	q0, [x9]
   1730c:	add	x9, x8, #0x65c
   17310:	str	q0, [x9]
   17314:	add	x9, x8, #0x66c
   17318:	str	q0, [x9]
   1731c:	add	x9, x8, #0x67c
   17320:	str	q0, [x9]
   17324:	add	x9, x8, #0x68c
   17328:	str	q0, [x9]
   1732c:	add	x9, x8, #0x69c
   17330:	str	q0, [x9]
   17334:	add	x9, x8, #0x6ac
   17338:	str	q0, [x9]
   1733c:	add	x9, x8, #0x6bc
   17340:	str	q0, [x9]
   17344:	add	x9, x8, #0x6cc
   17348:	str	q0, [x9]
   1734c:	add	x9, x8, #0x6dc
   17350:	str	q0, [x9]
   17354:	add	x9, x8, #0x6ec
   17358:	str	q0, [x9]
   1735c:	add	x9, x8, #0x6fc
   17360:	str	q0, [x9]
   17364:	add	x9, x8, #0x70c
   17368:	str	q0, [x9]
   1736c:	add	x9, x8, #0x71c
   17370:	str	q0, [x9]
   17374:	add	x9, x8, #0x72c
   17378:	str	q0, [x9]
   1737c:	add	x9, x8, #0x73c
   17380:	str	q0, [x9]
   17384:	add	x9, x8, #0x74c
   17388:	str	q0, [x9]
   1738c:	add	x9, x8, #0x75c
   17390:	str	q0, [x9]
   17394:	add	x9, x8, #0x76c
   17398:	str	q0, [x9]
   1739c:	add	x9, x8, #0x77c
   173a0:	str	q0, [x9]
   173a4:	add	x9, x8, #0x78c
   173a8:	str	q0, [x9]
   173ac:	add	x9, x8, #0x79c
   173b0:	str	q0, [x9]
   173b4:	add	x9, x8, #0x7ac
   173b8:	str	q0, [x9]
   173bc:	add	x9, x8, #0x7bc
   173c0:	str	q0, [x9]
   173c4:	add	x9, x8, #0x7cc
   173c8:	str	q0, [x9]
   173cc:	add	x9, x8, #0x7dc
   173d0:	str	q0, [x9]
   173d4:	add	x9, x8, #0x7ec
   173d8:	str	q0, [x9]
   173dc:	add	x9, x8, #0x7fc
   173e0:	str	q0, [x9]
   173e4:	add	x9, x8, #0x80c
   173e8:	str	q0, [x9]
   173ec:	add	x9, x8, #0x81c
   173f0:	str	q0, [x9]
   173f4:	mov	w9, #0x1                   	// #1
   173f8:	str	w9, [x8, #2144]
   173fc:	mov	w8, #0x6ea8                	// #28328
   17400:	movi	v0.2d, #0x0
   17404:	add	x8, x0, x8
   17408:	str	xzr, [x8, #16]
   1740c:	str	q0, [x8]
   17410:	ret
   17414:	str	x1, [x0, #28312]
   17418:	ret
   1741c:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   17420:	add	x3, x3, #0x428
   17424:	b	fb38 <lzma_mf_is_supported@@XZ_5.0+0x1f88>
   17428:	stp	x29, x30, [sp, #-48]!
   1742c:	stp	x20, x19, [sp, #32]
   17430:	ldr	w8, [x2, #20]
   17434:	str	x21, [sp, #16]
   17438:	mov	x29, sp
   1743c:	cmp	w8, #0x4
   17440:	b.hi	174e4 <lzma_mode_is_supported@@XZ_5.0+0x62fc>  // b.pmore
   17444:	ldr	w9, [x2, #24]
   17448:	mov	x19, x2
   1744c:	mov	x20, x0
   17450:	mov	w0, #0xb                   	// #11
   17454:	cmp	w9, #0x4
   17458:	b.hi	174e8 <lzma_mode_is_supported@@XZ_5.0+0x6300>  // b.pmore
   1745c:	add	w8, w9, w8
   17460:	cmp	w8, #0x4
   17464:	b.hi	174e8 <lzma_mode_is_supported@@XZ_5.0+0x6300>  // b.pmore
   17468:	ldr	w8, [x19, #28]
   1746c:	cmp	w8, #0x4
   17470:	b.hi	174e4 <lzma_mode_is_supported@@XZ_5.0+0x62fc>  // b.pmore
   17474:	ldr	x0, [x20]
   17478:	mov	x21, x3
   1747c:	cbnz	x0, 174b0 <lzma_mode_is_supported@@XZ_5.0+0x62c8>
   17480:	mov	w0, #0x6ec0                	// #28352
   17484:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   17488:	str	x0, [x20]
   1748c:	cbz	x0, 174f8 <lzma_mode_is_supported@@XZ_5.0+0x6310>
   17490:	adrp	x8, 14000 <lzma_mode_is_supported@@XZ_5.0+0x2e18>
   17494:	adrp	x9, 16000 <lzma_mode_is_supported@@XZ_5.0+0x4e18>
   17498:	adrp	x10, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   1749c:	add	x8, x8, #0xc8
   174a0:	add	x9, x9, #0xfb8
   174a4:	add	x10, x10, #0x414
   174a8:	stp	x8, x9, [x20, #8]
   174ac:	str	x10, [x20, #24]
   174b0:	ldr	w8, [x19]
   174b4:	mov	x1, x19
   174b8:	str	x8, [x21]
   174bc:	ldr	x8, [x19, #8]
   174c0:	str	x8, [x21, #8]
   174c4:	ldr	w8, [x19, #16]
   174c8:	str	x8, [x21, #16]
   174cc:	bl	16fb8 <lzma_mode_is_supported@@XZ_5.0+0x5dd0>
   174d0:	ldr	x8, [x20]
   174d4:	mov	w0, wzr
   174d8:	mov	x9, #0xffffffffffffffff    	// #-1
   174dc:	str	x9, [x8, #28312]
   174e0:	b	174e8 <lzma_mode_is_supported@@XZ_5.0+0x6300>
   174e4:	mov	w0, #0xb                   	// #11
   174e8:	ldp	x20, x19, [sp, #32]
   174ec:	ldr	x21, [sp, #16]
   174f0:	ldp	x29, x30, [sp], #48
   174f4:	ret
   174f8:	mov	w0, #0x5                   	// #5
   174fc:	b	174e8 <lzma_mode_is_supported@@XZ_5.0+0x6300>
   17500:	and	w8, w1, #0xff
   17504:	cmp	w8, #0xe0
   17508:	b.ls	17514 <lzma_mode_is_supported@@XZ_5.0+0x632c>  // b.plast
   1750c:	mov	w0, #0x1                   	// #1
   17510:	ret
   17514:	mov	w9, #0xc16d                	// #49517
   17518:	movk	w9, #0x6c16, lsl #16
   1751c:	umull	x9, w8, w9
   17520:	lsr	x9, x9, #32
   17524:	sub	w8, w8, w9
   17528:	add	w8, w9, w8, lsr #1
   1752c:	mov	w9, #0xffffffd3            	// #-45
   17530:	lsr	w8, w8, #5
   17534:	madd	w9, w8, w9, w1
   17538:	mov	w10, #0x8e39                	// #36409
   1753c:	movk	w10, #0x38e3, lsl #16
   17540:	str	w8, [x0, #28]
   17544:	and	w8, w9, #0xff
   17548:	umull	x9, w8, w10
   1754c:	lsr	x9, x9, #33
   17550:	add	w10, w9, w9, lsl #3
   17554:	sub	w8, w8, w10
   17558:	stp	w8, w9, [x0, #20]
   1755c:	add	w8, w8, w9
   17560:	cmp	w8, #0x4
   17564:	cset	w0, hi  // hi = pmore
   17568:	ret
   1756c:	stp	x29, x30, [sp, #-16]!
   17570:	ldr	w0, [x0]
   17574:	mov	x29, sp
   17578:	bl	10024 <lzma_mf_is_supported@@XZ_5.0+0x2474>
   1757c:	mov	w8, #0x6ec0                	// #28352
   17580:	add	x0, x0, x8
   17584:	ldp	x29, x30, [sp], #16
   17588:	ret
   1758c:	stp	x29, x30, [sp, #-16]!
   17590:	ldr	w9, [x0, #20]
   17594:	mov	x29, sp
   17598:	cmp	w9, #0x4
   1759c:	b.hi	175e4 <lzma_mode_is_supported@@XZ_5.0+0x63fc>  // b.pmore
   175a0:	ldr	w10, [x0, #24]
   175a4:	mov	x8, x0
   175a8:	mov	x0, #0xffffffffffffffff    	// #-1
   175ac:	cmp	w10, #0x4
   175b0:	b.hi	175dc <lzma_mode_is_supported@@XZ_5.0+0x63f4>  // b.pmore
   175b4:	add	w9, w10, w9
   175b8:	cmp	w9, #0x4
   175bc:	b.hi	175dc <lzma_mode_is_supported@@XZ_5.0+0x63f4>  // b.pmore
   175c0:	ldr	w9, [x8, #28]
   175c4:	cmp	w9, #0x4
   175c8:	b.hi	175e4 <lzma_mode_is_supported@@XZ_5.0+0x63fc>  // b.pmore
   175cc:	ldr	w0, [x8]
   175d0:	bl	10024 <lzma_mf_is_supported@@XZ_5.0+0x2474>
   175d4:	mov	w8, #0x6ec0                	// #28352
   175d8:	add	x0, x0, x8
   175dc:	ldp	x29, x30, [sp], #16
   175e0:	ret
   175e4:	mov	x0, #0xffffffffffffffff    	// #-1
   175e8:	ldp	x29, x30, [sp], #16
   175ec:	ret
   175f0:	stp	x29, x30, [sp, #-48]!
   175f4:	cmp	x3, #0x5
   175f8:	str	x21, [sp, #16]
   175fc:	stp	x20, x19, [sp, #32]
   17600:	mov	x29, sp
   17604:	b.ne	17688 <lzma_mode_is_supported@@XZ_5.0+0x64a0>  // b.any
   17608:	mov	x19, x0
   1760c:	mov	w0, #0x70                  	// #112
   17610:	mov	x21, x2
   17614:	mov	x20, x1
   17618:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   1761c:	cbz	x0, 17690 <lzma_mode_is_supported@@XZ_5.0+0x64a8>
   17620:	ldrb	w8, [x21]
   17624:	cmp	w8, #0xe0
   17628:	b.hi	17680 <lzma_mode_is_supported@@XZ_5.0+0x6498>  // b.pmore
   1762c:	mov	w9, #0xc16d                	// #49517
   17630:	movk	w9, #0x6c16, lsl #16
   17634:	umull	x9, w8, w9
   17638:	lsr	x9, x9, #32
   1763c:	sub	w10, w8, w9
   17640:	add	w9, w9, w10, lsr #1
   17644:	mov	w10, #0xffffffd3            	// #-45
   17648:	lsr	w9, w9, #5
   1764c:	madd	w8, w9, w10, w8
   17650:	mov	w10, #0x8e39                	// #36409
   17654:	movk	w10, #0x38e3, lsl #16
   17658:	and	w8, w8, #0xff
   1765c:	str	w9, [x0, #28]
   17660:	umull	x9, w8, w10
   17664:	lsr	x9, x9, #33
   17668:	add	w10, w9, w9, lsl #3
   1766c:	sub	w8, w8, w10
   17670:	add	w10, w8, w9
   17674:	cmp	w10, #0x4
   17678:	stp	w8, w9, [x0, #20]
   1767c:	b.ls	17698 <lzma_mode_is_supported@@XZ_5.0+0x64b0>  // b.plast
   17680:	mov	x1, x20
   17684:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   17688:	mov	w8, #0x8                   	// #8
   1768c:	b	176b0 <lzma_mode_is_supported@@XZ_5.0+0x64c8>
   17690:	mov	w8, #0x5                   	// #5
   17694:	b	176b0 <lzma_mode_is_supported@@XZ_5.0+0x64c8>
   17698:	ldur	w9, [x21, #1]
   1769c:	mov	w8, wzr
   176a0:	str	xzr, [x0, #8]
   176a4:	str	wzr, [x0, #16]
   176a8:	str	w9, [x0]
   176ac:	str	x0, [x19]
   176b0:	ldp	x20, x19, [sp, #32]
   176b4:	ldr	x21, [sp, #16]
   176b8:	mov	w0, w8
   176bc:	ldp	x29, x30, [sp], #48
   176c0:	ret
   176c4:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   176c8:	add	x3, x3, #0x6d0
   176cc:	b	d6e0 <lzma_crc64@@XZ_5.0+0x1348>
   176d0:	stp	x29, x30, [sp, #-48]!
   176d4:	stp	x22, x21, [sp, #16]
   176d8:	stp	x20, x19, [sp, #32]
   176dc:	mov	x29, sp
   176e0:	cbz	x2, 177b4 <lzma_mode_is_supported@@XZ_5.0+0x65cc>
   176e4:	mov	x22, x0
   176e8:	ldr	x0, [x0]
   176ec:	mov	x19, x3
   176f0:	mov	x21, x2
   176f4:	mov	x20, x1
   176f8:	cbnz	x0, 17734 <lzma_mode_is_supported@@XZ_5.0+0x654c>
   176fc:	mov	w0, #0xa8                  	// #168
   17700:	movk	w0, #0x1, lsl #16
   17704:	mov	x1, x20
   17708:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   1770c:	cbz	x0, 177bc <lzma_mode_is_supported@@XZ_5.0+0x65d4>
   17710:	adrp	x8, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   17714:	adrp	x9, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   17718:	adrp	x10, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   1771c:	add	x8, x8, #0x8bc
   17720:	add	x9, x9, #0xc48
   17724:	add	x10, x10, #0xc78
   17728:	stp	x0, x8, [x22]
   1772c:	stp	x9, x10, [x22, #16]
   17730:	str	xzr, [x0, #8]
   17734:	ldp	q2, q0, [x21, #16]
   17738:	ldr	q1, [x21]
   1773c:	add	x2, x0, #0x10
   17740:	mov	w8, #0x1                   	// #1
   17744:	stp	q2, q0, [x0, #32]
   17748:	str	q1, [x0, #16]
   1774c:	ldp	q0, q1, [x21, #80]
   17750:	ldp	q2, q3, [x21, #48]
   17754:	ldr	x9, [x0, #24]
   17758:	str	wzr, [x0]
   1775c:	stp	q0, q1, [x0, #96]
   17760:	stp	q2, q3, [x0, #64]
   17764:	strh	w8, [x0, #128]
   17768:	cbz	x9, 17778 <lzma_mode_is_supported@@XZ_5.0+0x6590>
   1776c:	ldr	w8, [x0, #32]
   17770:	cmp	w8, #0x0
   17774:	cset	w8, eq  // eq = none
   17778:	strb	w8, [x0, #130]
   1777c:	add	x0, x0, #0x8
   17780:	mov	x1, x20
   17784:	mov	x3, x19
   17788:	bl	10f10 <lzma_lzma_preset@@XZ_5.0+0xed4>
   1778c:	cbnz	w0, 177c0 <lzma_mode_is_supported@@XZ_5.0+0x65d8>
   17790:	ldp	x9, x8, [x19]
   17794:	mov	w0, wzr
   17798:	add	x9, x8, x9
   1779c:	lsr	x9, x9, #16
   177a0:	cbnz	x9, 177c0 <lzma_mode_is_supported@@XZ_5.0+0x65d8>
   177a4:	mov	w9, #0x10000               	// #65536
   177a8:	sub	x8, x9, x8
   177ac:	str	x8, [x19]
   177b0:	b	177c0 <lzma_mode_is_supported@@XZ_5.0+0x65d8>
   177b4:	mov	w0, #0xb                   	// #11
   177b8:	b	177c0 <lzma_mode_is_supported@@XZ_5.0+0x65d8>
   177bc:	mov	w0, #0x5                   	// #5
   177c0:	ldp	x20, x19, [sp, #32]
   177c4:	ldp	x22, x21, [sp, #16]
   177c8:	ldp	x29, x30, [sp], #48
   177cc:	ret
   177d0:	stp	x29, x30, [sp, #-16]!
   177d4:	mov	x29, sp
   177d8:	bl	1105c <lzma_lzma_preset@@XZ_5.0+0x1020>
   177dc:	mov	w8, #0xa8                  	// #168
   177e0:	movk	w8, #0x1, lsl #16
   177e4:	add	x8, x0, x8
   177e8:	cmn	x0, #0x1
   177ec:	csinv	x0, x8, xzr, ne  // ne = any
   177f0:	ldp	x29, x30, [sp], #16
   177f4:	ret
   177f8:	ldr	w8, [x0]
   177fc:	sub	w9, w8, #0x1
   17800:	cmp	w8, #0x1, lsl #12
   17804:	mov	w8, #0xfff                 	// #4095
   17808:	csel	w8, w9, w8, hi  // hi = pmore
   1780c:	orr	w8, w8, w8, lsr #2
   17810:	orr	w8, w8, w8, lsr #3
   17814:	orr	w8, w8, w8, lsr #4
   17818:	orr	w8, w8, w8, lsr #8
   1781c:	orr	w8, w8, w8, lsr #16
   17820:	cmn	w8, #0x1
   17824:	b.eq	1784c <lzma_mode_is_supported@@XZ_5.0+0x6664>  // b.none
   17828:	mov	w9, w8
   1782c:	mov	w10, #0x1ffe                	// #8190
   17830:	cmp	w8, w10
   17834:	add	x9, x9, #0x1
   17838:	b.hi	17854 <lzma_mode_is_supported@@XZ_5.0+0x666c>  // b.pmore
   1783c:	adrp	x8, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   17840:	ldr	x8, [x8, #4008]
   17844:	ldrb	w8, [x8, x9]
   17848:	b	17894 <lzma_mode_is_supported@@XZ_5.0+0x66ac>
   1784c:	mov	w8, #0x28                  	// #40
   17850:	b	17898 <lzma_mode_is_supported@@XZ_5.0+0x66b0>
   17854:	mov	w10, #0x1fffffe             	// #33554430
   17858:	cmp	w8, w10
   1785c:	b.hi	1787c <lzma_mode_is_supported@@XZ_5.0+0x6694>  // b.pmore
   17860:	mov	w8, w9
   17864:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   17868:	ldr	x9, [x9, #4008]
   1786c:	lsr	x8, x8, #12
   17870:	ldrb	w8, [x9, x8]
   17874:	add	w8, w8, #0x18
   17878:	b	17894 <lzma_mode_is_supported@@XZ_5.0+0x66ac>
   1787c:	mov	w8, w9
   17880:	adrp	x9, 30000 <lzma_mode_is_supported@@XZ_5.0+0x1ee18>
   17884:	ldr	x9, [x9, #4008]
   17888:	lsr	x8, x8, #24
   1788c:	ldrb	w8, [x9, x8]
   17890:	add	w8, w8, #0x30
   17894:	sub	w8, w8, #0x18
   17898:	mov	w0, wzr
   1789c:	strb	w8, [x1]
   178a0:	ret
   178a4:	ldr	w8, [x0]
   178a8:	mov	w9, #0x100000              	// #1048576
   178ac:	add	x8, x8, x8, lsl #1
   178b0:	cmp	x8, #0x100, lsl #12
   178b4:	csel	x0, x8, x9, hi  // hi = pmore
   178b8:	ret
   178bc:	sub	sp, sp, #0x90
   178c0:	stp	x24, x23, [sp, #96]
   178c4:	ldr	x24, [x3]
   178c8:	stp	x29, x30, [sp, #48]
   178cc:	add	x29, sp, #0x30
   178d0:	stp	x28, x27, [sp, #64]
   178d4:	cmp	x24, x4
   178d8:	stp	x26, x25, [sp, #80]
   178dc:	stp	x22, x21, [sp, #112]
   178e0:	stp	x20, x19, [sp, #128]
   178e4:	stur	x2, [x29, #-8]
   178e8:	b.cs	17bfc <lzma_mode_is_supported@@XZ_5.0+0x6a14>  // b.hs, b.nlast
   178ec:	add	x8, x0, #0x98
   178f0:	str	x8, [sp, #16]
   178f4:	add	x8, x0, #0x88
   178f8:	stur	x8, [x29, #-16]
   178fc:	add	x8, x0, #0x10
   17900:	str	x8, [sp]
   17904:	mov	x9, x0
   17908:	ldr	w8, [x9], #166
   1790c:	ldur	x27, [x29, #-16]
   17910:	adrp	x25, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   17914:	mov	x26, x4
   17918:	mov	x20, x3
   1791c:	mov	x22, x1
   17920:	mov	x23, x0
   17924:	add	x19, x0, #0xa0
   17928:	add	x21, x0, #0x90
   1792c:	add	x25, x25, #0xbe8
   17930:	str	x9, [sp, #8]
   17934:	str	x4, [sp, #24]
   17938:	b	179ac <lzma_mode_is_supported@@XZ_5.0+0x67c4>
   1793c:	mov	x28, x25
   17940:	mov	x25, x19
   17944:	ldr	x19, [x27]
   17948:	ldr	x8, [x22]
   1794c:	ldr	w9, [x22, #24]
   17950:	ldur	x11, [x29, #-8]
   17954:	sub	x10, x26, x24
   17958:	cmp	x10, x19
   1795c:	add	x8, x8, x9
   17960:	csel	x26, x10, x19, cc  // cc = lo, ul, last
   17964:	add	x0, x11, x24
   17968:	sub	x1, x8, x19
   1796c:	mov	x2, x26
   17970:	bl	3040 <memcpy@plt>
   17974:	add	x9, x26, x24
   17978:	subs	x10, x19, x26
   1797c:	ldr	x26, [sp, #24]
   17980:	mov	w8, wzr
   17984:	mov	w0, wzr
   17988:	mov	x19, x25
   1798c:	mov	x25, x28
   17990:	str	x9, [x20]
   17994:	str	x10, [x27]
   17998:	b.ne	17c00 <lzma_mode_is_supported@@XZ_5.0+0x6a18>  // b.any
   1799c:	str	w8, [x23]
   179a0:	ldr	x24, [x20]
   179a4:	cmp	x24, x26
   179a8:	b.cs	17bfc <lzma_mode_is_supported@@XZ_5.0+0x6a14>  // b.hs, b.nlast
   179ac:	cmp	w8, #0x4
   179b0:	b.hi	179a0 <lzma_mode_is_supported@@XZ_5.0+0x67b8>  // b.pmore
   179b4:	mov	w8, w8
   179b8:	adr	x9, 1793c <lzma_mode_is_supported@@XZ_5.0+0x6754>
   179bc:	ldrb	w10, [x25, x8]
   179c0:	add	x9, x9, x10, lsl #2
   179c4:	br	x9
   179c8:	ldr	w8, [x22, #36]
   179cc:	ldp	w9, w10, [x22, #24]
   179d0:	sub	w8, w8, w9
   179d4:	cmn	w8, w10
   179d8:	b.eq	17c20 <lzma_mode_is_supported@@XZ_5.0+0x6a38>  // b.none
   179dc:	ldrb	w8, [x23, #129]
   179e0:	cbz	w8, 179f4 <lzma_mode_is_supported@@XZ_5.0+0x680c>
   179e4:	ldr	x0, [x23, #8]
   179e8:	ldr	x1, [sp]
   179ec:	bl	10bb8 <lzma_lzma_preset@@XZ_5.0+0xb7c>
   179f0:	cbnz	w0, 17c00 <lzma_mode_is_supported@@XZ_5.0+0x6a18>
   179f4:	ldur	x9, [x29, #-16]
   179f8:	mov	x8, xzr
   179fc:	stp	xzr, xzr, [x9]
   17a00:	mov	w9, #0x1                   	// #1
   17a04:	str	w9, [x23]
   17a08:	b	17a14 <lzma_mode_is_supported@@XZ_5.0+0x682c>
   17a0c:	ldur	x8, [x29, #-16]
   17a10:	ldr	x8, [x8]
   17a14:	mov	w9, #0x200000              	// #2097152
   17a18:	sub	w8, w9, w8
   17a1c:	ldr	w9, [x22, #100]
   17a20:	ldp	w24, w26, [x22, #24]
   17a24:	ldr	x0, [x23, #8]
   17a28:	ldr	x2, [sp, #8]
   17a2c:	subs	w10, w8, w9
   17a30:	add	w10, w10, w24
   17a34:	sub	w10, w10, w26
   17a38:	cmp	w8, w9
   17a3c:	csel	w5, wzr, w10, cc  // cc = lo, ul, last
   17a40:	mov	w4, #0x10000               	// #65536
   17a44:	mov	x1, x22
   17a48:	mov	x3, x21
   17a4c:	bl	1014c <lzma_lzma_preset@@XZ_5.0+0x110>
   17a50:	ldp	w8, w9, [x22, #24]
   17a54:	ldr	x10, [x23, #136]
   17a58:	sub	w11, w26, w24
   17a5c:	cmp	w0, #0x1
   17a60:	add	w8, w11, w8
   17a64:	sub	w8, w8, w9
   17a68:	add	x10, x10, x8
   17a6c:	str	x10, [x23, #136]
   17a70:	b.ne	17bfc <lzma_mode_is_supported@@XZ_5.0+0x6a14>  // b.any
   17a74:	ldr	x8, [x21]
   17a78:	cmp	x8, x10
   17a7c:	b.cs	17adc <lzma_mode_is_supported@@XZ_5.0+0x68f4>  // b.hs, b.nlast
   17a80:	ldrb	w9, [x23, #128]
   17a84:	cbz	w9, 17b24 <lzma_mode_is_supported@@XZ_5.0+0x693c>
   17a88:	ldrb	w11, [x23, #130]
   17a8c:	cbz	w11, 17b34 <lzma_mode_is_supported@@XZ_5.0+0x694c>
   17a90:	mov	w12, #0xe0                  	// #224
   17a94:	b	17b38 <lzma_mode_is_supported@@XZ_5.0+0x6950>
   17a98:	ldr	x2, [x21]
   17a9c:	b	17bc4 <lzma_mode_is_supported@@XZ_5.0+0x69dc>
   17aa0:	ldr	x24, [sp, #16]
   17aa4:	ldur	x3, [x29, #-8]
   17aa8:	mov	w2, #0x3                   	// #3
   17aac:	mov	x0, x19
   17ab0:	mov	x1, x24
   17ab4:	mov	x4, x20
   17ab8:	mov	x5, x26
   17abc:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
   17ac0:	ldr	x8, [x24]
   17ac4:	cmp	x8, #0x3
   17ac8:	b.ne	17bfc <lzma_mode_is_supported@@XZ_5.0+0x6a14>  // b.any
   17acc:	mov	w8, #0x4                   	// #4
   17ad0:	str	w8, [x23]
   17ad4:	ldr	x24, [x20]
   17ad8:	b	1793c <lzma_mode_is_supported@@XZ_5.0+0x6754>
   17adc:	add	x8, x10, x9
   17ae0:	str	x8, [x23, #136]
   17ae4:	str	wzr, [x22, #28]
   17ae8:	ldrb	w9, [x23, #130]
   17aec:	ldr	x26, [sp, #24]
   17af0:	sub	w8, w8, #0x1
   17af4:	mov	w11, #0x1                   	// #1
   17af8:	cmp	w9, #0x0
   17afc:	lsr	w10, w8, #8
   17b00:	strb	w8, [x23, #162]
   17b04:	cinc	w8, w11, eq  // eq = none
   17b08:	str	xzr, [x23, #152]
   17b0c:	strb	w11, [x23, #129]
   17b10:	strb	wzr, [x23, #130]
   17b14:	strb	w10, [x23, #161]
   17b18:	strb	w8, [x23, #160]
   17b1c:	mov	w8, #0x3                   	// #3
   17b20:	b	1799c <lzma_mode_is_supported@@XZ_5.0+0x67b4>
   17b24:	ldrb	w11, [x23, #129]
   17b28:	cbz	w11, 17b44 <lzma_mode_is_supported@@XZ_5.0+0x695c>
   17b2c:	mov	w11, #0xa0                  	// #160
   17b30:	b	17b48 <lzma_mode_is_supported@@XZ_5.0+0x6960>
   17b34:	mov	w12, #0xc0                  	// #192
   17b38:	mov	x11, xzr
   17b3c:	strb	w12, [x19]
   17b40:	b	17b50 <lzma_mode_is_supported@@XZ_5.0+0x6968>
   17b44:	mov	w11, #0x80                  	// #128
   17b48:	strb	w11, [x23, #161]
   17b4c:	mov	w11, #0x1                   	// #1
   17b50:	add	x13, x23, #0xa0
   17b54:	str	x11, [x23, #152]
   17b58:	add	x14, x13, x11
   17b5c:	ldrb	w15, [x14]
   17b60:	sub	x12, x10, #0x1
   17b64:	ldr	x26, [sp, #24]
   17b68:	lsr	x10, x12, #8
   17b6c:	strb	w10, [x14, #1]
   17b70:	orr	x10, x11, #0x2
   17b74:	add	w11, w15, w12, lsr #16
   17b78:	strb	w11, [x14]
   17b7c:	sub	x11, x8, #0x1
   17b80:	add	x13, x13, x10
   17b84:	lsr	x14, x11, #8
   17b88:	strb	w12, [x13]
   17b8c:	strb	w14, [x13, #1]
   17b90:	strb	w11, [x13, #2]
   17b94:	cbz	w9, 17bac <lzma_mode_is_supported@@XZ_5.0+0x69c4>
   17b98:	ldr	x0, [sp]
   17b9c:	add	x8, x10, x23
   17ba0:	add	x1, x8, #0xa3
   17ba4:	bl	11128 <lzma_lzma_preset@@XZ_5.0+0x10ec>
   17ba8:	ldr	x8, [x23, #144]
   17bac:	add	x2, x8, #0x6
   17bb0:	mov	w8, #0x2                   	// #2
   17bb4:	strh	wzr, [x23, #128]
   17bb8:	strb	wzr, [x23, #130]
   17bbc:	str	x2, [x23, #144]
   17bc0:	str	w8, [x23]
   17bc4:	ldr	x24, [sp, #16]
   17bc8:	ldur	x3, [x29, #-8]
   17bcc:	mov	x0, x19
   17bd0:	mov	x4, x20
   17bd4:	mov	x1, x24
   17bd8:	mov	x5, x26
   17bdc:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
   17be0:	ldr	x9, [x24]
   17be4:	ldr	x10, [x21]
   17be8:	mov	w8, wzr
   17bec:	mov	w0, wzr
   17bf0:	cmp	x9, x10
   17bf4:	b.eq	1799c <lzma_mode_is_supported@@XZ_5.0+0x67b4>  // b.none
   17bf8:	b	17c00 <lzma_mode_is_supported@@XZ_5.0+0x6a18>
   17bfc:	mov	w0, wzr
   17c00:	ldp	x20, x19, [sp, #128]
   17c04:	ldp	x22, x21, [sp, #112]
   17c08:	ldp	x24, x23, [sp, #96]
   17c0c:	ldp	x26, x25, [sp, #80]
   17c10:	ldp	x28, x27, [sp, #64]
   17c14:	ldp	x29, x30, [sp, #48]
   17c18:	add	sp, sp, #0x90
   17c1c:	ret
   17c20:	ldr	w8, [x22, #104]
   17c24:	cmp	w8, #0x3
   17c28:	b.ne	17c3c <lzma_mode_is_supported@@XZ_5.0+0x6a54>  // b.any
   17c2c:	add	x9, x24, #0x1
   17c30:	str	x9, [x20]
   17c34:	ldur	x9, [x29, #-8]
   17c38:	strb	wzr, [x9, x24]
   17c3c:	cmp	w8, #0x0
   17c40:	cset	w0, ne  // ne = any
   17c44:	b	17c00 <lzma_mode_is_supported@@XZ_5.0+0x6a18>
   17c48:	stp	x29, x30, [sp, #-32]!
   17c4c:	stp	x20, x19, [sp, #16]
   17c50:	mov	x19, x0
   17c54:	ldr	x0, [x0, #8]
   17c58:	mov	x29, sp
   17c5c:	mov	x20, x1
   17c60:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   17c64:	mov	x0, x19
   17c68:	mov	x1, x20
   17c6c:	ldp	x20, x19, [sp, #16]
   17c70:	ldp	x29, x30, [sp], #32
   17c74:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   17c78:	ldr	x9, [x1, #8]
   17c7c:	cbz	x9, 17c88 <lzma_mode_is_supported@@XZ_5.0+0x6aa0>
   17c80:	ldr	w8, [x0]
   17c84:	cbz	w8, 17c90 <lzma_mode_is_supported@@XZ_5.0+0x6aa8>
   17c88:	mov	w0, #0xb                   	// #11
   17c8c:	ret
   17c90:	ldr	w8, [x0, #36]
   17c94:	ldr	w10, [x9, #20]
   17c98:	cmp	w8, w10
   17c9c:	b.ne	17cc8 <lzma_mode_is_supported@@XZ_5.0+0x6ae0>  // b.any
   17ca0:	ldr	w8, [x0, #40]
   17ca4:	ldr	w11, [x9, #24]
   17ca8:	cmp	w8, w11
   17cac:	b.ne	17cc8 <lzma_mode_is_supported@@XZ_5.0+0x6ae0>  // b.any
   17cb0:	ldr	w8, [x0, #44]
   17cb4:	ldr	w11, [x9, #28]
   17cb8:	cmp	w8, w11
   17cbc:	b.ne	17cc8 <lzma_mode_is_supported@@XZ_5.0+0x6ae0>  // b.any
   17cc0:	mov	w0, wzr
   17cc4:	ret
   17cc8:	cmp	w10, #0x4
   17ccc:	b.ls	17cd8 <lzma_mode_is_supported@@XZ_5.0+0x6af0>  // b.plast
   17cd0:	mov	w0, #0x8                   	// #8
   17cd4:	ret
   17cd8:	ldr	w11, [x9, #24]
   17cdc:	mov	w8, #0x8                   	// #8
   17ce0:	cmp	w11, #0x4
   17ce4:	b.hi	17d14 <lzma_mode_is_supported@@XZ_5.0+0x6b2c>  // b.pmore
   17ce8:	add	w12, w11, w10
   17cec:	cmp	w12, #0x4
   17cf0:	b.hi	17d14 <lzma_mode_is_supported@@XZ_5.0+0x6b2c>  // b.pmore
   17cf4:	ldr	w9, [x9, #28]
   17cf8:	cmp	w9, #0x4
   17cfc:	b.hi	17cd0 <lzma_mode_is_supported@@XZ_5.0+0x6ae8>  // b.pmore
   17d00:	mov	w8, wzr
   17d04:	str	w9, [x0, #44]
   17d08:	mov	w9, #0x101                 	// #257
   17d0c:	stp	w10, w11, [x0, #36]
   17d10:	strh	w9, [x0, #128]
   17d14:	mov	w0, w8
   17d18:	ret
   17d1c:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   17d20:	add	x3, x3, #0xd28
   17d24:	b	fb38 <lzma_mf_is_supported@@XZ_5.0+0x1f88>
   17d28:	stp	x29, x30, [sp, #-48]!
   17d2c:	stp	x22, x21, [sp, #16]
   17d30:	stp	x20, x19, [sp, #32]
   17d34:	mov	x22, x0
   17d38:	ldr	x0, [x0]
   17d3c:	mov	x19, x3
   17d40:	mov	x20, x2
   17d44:	mov	x21, x1
   17d48:	mov	x29, sp
   17d4c:	cbnz	x0, 17d88 <lzma_mode_is_supported@@XZ_5.0+0x6ba0>
   17d50:	mov	w0, #0xb8                  	// #184
   17d54:	mov	x1, x21
   17d58:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   17d5c:	cbz	x0, 17dd0 <lzma_mode_is_supported@@XZ_5.0+0x6be8>
   17d60:	adrp	x8, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5e18>
   17d64:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   17d68:	add	x8, x8, #0xe8c
   17d6c:	add	x9, x9, #0x174
   17d70:	movi	v0.2d, #0x0
   17d74:	stp	x0, x8, [x22]
   17d78:	str	x9, [x22, #32]
   17d7c:	str	xzr, [x0, #40]
   17d80:	stur	q0, [x0, #24]
   17d84:	stur	q0, [x0, #8]
   17d88:	mov	w9, #0x1                   	// #1
   17d8c:	str	wzr, [x0]
   17d90:	strb	w9, [x0, #64]
   17d94:	ldr	x8, [x20, #8]
   17d98:	cbz	x8, 17da8 <lzma_mode_is_supported@@XZ_5.0+0x6bc0>
   17d9c:	ldr	w8, [x20, #16]
   17da0:	cmp	w8, #0x0
   17da4:	cset	w9, eq  // eq = none
   17da8:	strb	w9, [x0, #65]
   17dac:	mov	x1, x21
   17db0:	mov	x2, x20
   17db4:	mov	x3, x19
   17db8:	ldp	x20, x19, [sp, #32]
   17dbc:	ldp	x22, x21, [sp, #16]
   17dc0:	add	x8, x0, #0x8
   17dc4:	mov	x0, x8
   17dc8:	ldp	x29, x30, [sp], #48
   17dcc:	b	14040 <lzma_mode_is_supported@@XZ_5.0+0x2e58>
   17dd0:	ldp	x20, x19, [sp, #32]
   17dd4:	ldp	x22, x21, [sp, #16]
   17dd8:	mov	w0, #0x5                   	// #5
   17ddc:	ldp	x29, x30, [sp], #48
   17de0:	ret
   17de4:	stp	x29, x30, [sp, #-16]!
   17de8:	mov	x29, sp
   17dec:	bl	1756c <lzma_mode_is_supported@@XZ_5.0+0x6384>
   17df0:	add	x0, x0, #0xb8
   17df4:	ldp	x29, x30, [sp], #16
   17df8:	ret
   17dfc:	stp	x29, x30, [sp, #-32]!
   17e00:	cmp	x3, #0x1
   17e04:	stp	x20, x19, [sp, #16]
   17e08:	mov	x29, sp
   17e0c:	b.ne	17e20 <lzma_mode_is_supported@@XZ_5.0+0x6c38>  // b.any
   17e10:	ldrb	w8, [x2]
   17e14:	mov	x20, x2
   17e18:	cmp	w8, #0x28
   17e1c:	b.ls	17e34 <lzma_mode_is_supported@@XZ_5.0+0x6c4c>  // b.plast
   17e20:	mov	w8, #0x8                   	// #8
   17e24:	ldp	x20, x19, [sp, #16]
   17e28:	mov	w0, w8
   17e2c:	ldp	x29, x30, [sp], #32
   17e30:	ret
   17e34:	mov	x19, x0
   17e38:	mov	w0, #0x70                  	// #112
   17e3c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   17e40:	cbz	x0, 17e58 <lzma_mode_is_supported@@XZ_5.0+0x6c70>
   17e44:	ldrb	w8, [x20]
   17e48:	cmp	w8, #0x28
   17e4c:	b.ne	17e60 <lzma_mode_is_supported@@XZ_5.0+0x6c78>  // b.any
   17e50:	mov	w8, #0xffffffff            	// #-1
   17e54:	b	17e74 <lzma_mode_is_supported@@XZ_5.0+0x6c8c>
   17e58:	mov	w8, #0x5                   	// #5
   17e5c:	b	17e24 <lzma_mode_is_supported@@XZ_5.0+0x6c3c>
   17e60:	mov	w9, #0x2                   	// #2
   17e64:	lsr	w10, w8, #1
   17e68:	bfxil	w9, w8, #0, #1
   17e6c:	add	w8, w10, #0xb
   17e70:	lsl	w8, w9, w8
   17e74:	str	w8, [x0]
   17e78:	mov	w8, wzr
   17e7c:	str	xzr, [x0, #8]
   17e80:	str	wzr, [x0, #16]
   17e84:	str	x0, [x19]
   17e88:	b	17e24 <lzma_mode_is_supported@@XZ_5.0+0x6c3c>
   17e8c:	str	d8, [sp, #-112]!
   17e90:	adrp	x8, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   17e94:	ldr	d8, [x8, #3056]
   17e98:	stp	x26, x25, [sp, #48]
   17e9c:	adrp	x26, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   17ea0:	stp	x28, x27, [sp, #32]
   17ea4:	stp	x24, x23, [sp, #64]
   17ea8:	stp	x22, x21, [sp, #80]
   17eac:	stp	x20, x19, [sp, #96]
   17eb0:	mov	x20, x4
   17eb4:	mov	x21, x3
   17eb8:	mov	x23, x2
   17ebc:	mov	x19, x1
   17ec0:	mov	x22, x0
   17ec4:	add	x24, x1, #0x8
   17ec8:	add	x25, x0, #0x48
   17ecc:	add	x26, x26, #0xbf8
   17ed0:	mov	w28, #0x6                   	// #6
   17ed4:	stp	x29, x30, [sp, #16]
   17ed8:	mov	x29, sp
   17edc:	ldr	x27, [x21]
   17ee0:	ldr	w8, [x22]
   17ee4:	cmp	x27, x20
   17ee8:	b.cs	17f48 <lzma_mode_is_supported@@XZ_5.0+0x6d60>  // b.hs, b.nlast
   17eec:	cmp	w8, #0x7
   17ef0:	b.hi	18148 <lzma_mode_is_supported@@XZ_5.0+0x6f60>  // b.pmore
   17ef4:	mov	w8, w8
   17ef8:	adr	x9, 17f08 <lzma_mode_is_supported@@XZ_5.0+0x6d20>
   17efc:	ldrb	w10, [x26, x8]
   17f00:	add	x9, x9, x10, lsl #2
   17f04:	br	x9
   17f08:	ldrb	w8, [x23, x27]
   17f0c:	add	x9, x27, #0x1
   17f10:	str	x9, [x21]
   17f14:	cbz	x8, 1816c <lzma_mode_is_supported@@XZ_5.0+0x6f84>
   17f18:	cmp	w8, #0xdf
   17f1c:	b.hi	180b8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>  // b.pmore
   17f20:	cmp	w8, #0x1
   17f24:	b.eq	180b8 <lzma_mode_is_supported@@XZ_5.0+0x6ed0>  // b.none
   17f28:	ldrb	w9, [x22, #65]
   17f2c:	cbnz	w9, 18138 <lzma_mode_is_supported@@XZ_5.0+0x6f50>
   17f30:	sxtb	w10, w8
   17f34:	tbnz	w10, #31, 180cc <lzma_mode_is_supported@@XZ_5.0+0x6ee4>
   17f38:	cmp	w8, #0x2
   17f3c:	b.hi	18138 <lzma_mode_is_supported@@XZ_5.0+0x6f50>  // b.pmore
   17f40:	str	d8, [x22]
   17f44:	b	18120 <lzma_mode_is_supported@@XZ_5.0+0x6f38>
   17f48:	cmp	w8, #0x6
   17f4c:	b.ne	18140 <lzma_mode_is_supported@@XZ_5.0+0x6f58>  // b.any
   17f50:	ldp	x0, x8, [x22, #8]
   17f54:	mov	x1, x19
   17f58:	mov	x2, x23
   17f5c:	mov	x3, x21
   17f60:	mov	x4, x20
   17f64:	blr	x8
   17f68:	ldr	x8, [x21]
   17f6c:	ldr	x9, [x22, #56]
   17f70:	sub	x8, x8, x27
   17f74:	subs	x8, x9, x8
   17f78:	b.cc	18138 <lzma_mode_is_supported@@XZ_5.0+0x6f50>  // b.lo, b.ul, b.last
   17f7c:	cmp	w0, #0x1
   17f80:	str	x8, [x22, #56]
   17f84:	b.ne	1814c <lzma_mode_is_supported@@XZ_5.0+0x6f64>  // b.any
   17f88:	cbnz	x8, 18138 <lzma_mode_is_supported@@XZ_5.0+0x6f50>
   17f8c:	str	wzr, [x22]
   17f90:	b	17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   17f94:	add	x8, x27, #0x1
   17f98:	str	x8, [x21]
   17f9c:	ldrb	w9, [x23, x27]
   17fa0:	ldr	x8, [x22, #48]
   17fa4:	add	x8, x8, x9, lsl #8
   17fa8:	str	x8, [x22, #48]
   17fac:	mov	w8, #0x2                   	// #2
   17fb0:	str	w8, [x22]
   17fb4:	b	17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   17fb8:	add	x8, x27, #0x1
   17fbc:	str	x8, [x21]
   17fc0:	ldrb	w9, [x23, x27]
   17fc4:	ldr	x8, [x22, #48]
   17fc8:	ldr	x10, [x22, #32]
   17fcc:	ldr	x0, [x22, #8]
   17fd0:	add	x8, x9, x8
   17fd4:	add	x1, x8, #0x1
   17fd8:	mov	w8, #0x3                   	// #3
   17fdc:	str	x1, [x22, #48]
   17fe0:	str	w8, [x22]
   17fe4:	blr	x10
   17fe8:	b	17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   17fec:	ldrb	w8, [x23, x27]
   17ff0:	add	x9, x27, #0x1
   17ff4:	str	x9, [x21]
   17ff8:	lsl	x8, x8, #8
   17ffc:	str	x8, [x22, #56]
   18000:	mov	w8, #0x4                   	// #4
   18004:	str	w8, [x22]
   18008:	b	17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   1800c:	add	x8, x27, #0x1
   18010:	str	x8, [x21]
   18014:	ldrb	w9, [x23, x27]
   18018:	ldr	x8, [x22, #56]
   1801c:	ldr	w10, [x22, #4]
   18020:	add	x8, x9, x8
   18024:	add	x8, x8, #0x1
   18028:	str	x8, [x22, #56]
   1802c:	str	w10, [x22]
   18030:	b	17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   18034:	ldrb	w1, [x23, x27]
   18038:	add	x8, x27, #0x1
   1803c:	mov	x0, x25
   18040:	str	x8, [x21]
   18044:	bl	17500 <lzma_mode_is_supported@@XZ_5.0+0x6318>
   18048:	tbnz	w0, #0, 18138 <lzma_mode_is_supported@@XZ_5.0+0x6f50>
   1804c:	ldr	x8, [x22, #24]
   18050:	ldr	x0, [x22, #8]
   18054:	mov	x1, x25
   18058:	blr	x8
   1805c:	str	w28, [x22]
   18060:	b	17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   18064:	ldr	x28, [x22, #56]
   18068:	ldr	x3, [x19]
   1806c:	ldr	x5, [x19, #24]
   18070:	sub	x8, x20, x27
   18074:	add	x9, x28, x27
   18078:	cmp	x8, x28
   1807c:	csel	x2, x9, x20, hi  // hi = pmore
   18080:	mov	x0, x23
   18084:	mov	x1, x21
   18088:	mov	x4, x24
   1808c:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
   18090:	sub	x8, x28, x0
   18094:	str	x8, [x22, #56]
   18098:	ldp	x9, x10, [x19, #8]
   1809c:	cmp	x9, x10
   180a0:	b.ls	180a8 <lzma_mode_is_supported@@XZ_5.0+0x6ec0>  // b.plast
   180a4:	str	x9, [x19, #16]
   180a8:	mov	w28, #0x6                   	// #6
   180ac:	cbnz	x8, 18140 <lzma_mode_is_supported@@XZ_5.0+0x6f58>
   180b0:	str	wzr, [x22]
   180b4:	b	17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   180b8:	mov	w9, #0x101                 	// #257
   180bc:	strh	w9, [x22, #64]
   180c0:	mov	w9, #0x1                   	// #1
   180c4:	sxtb	w10, w8
   180c8:	tbz	w10, #31, 17f38 <lzma_mode_is_supported@@XZ_5.0+0x6d50>
   180cc:	lsl	w10, w8, #16
   180d0:	and	x10, x10, #0x1f0000
   180d4:	cmp	w8, #0xc0
   180d8:	str	x10, [x22, #48]
   180dc:	mov	w10, #0x1                   	// #1
   180e0:	str	w10, [x22]
   180e4:	b.cc	180f8 <lzma_mode_is_supported@@XZ_5.0+0x6f10>  // b.lo, b.ul, b.last
   180e8:	mov	w8, #0x5                   	// #5
   180ec:	strb	wzr, [x22, #64]
   180f0:	str	w8, [x22, #4]
   180f4:	b	18120 <lzma_mode_is_supported@@XZ_5.0+0x6f38>
   180f8:	ldrb	w10, [x22, #64]
   180fc:	cbnz	w10, 18138 <lzma_mode_is_supported@@XZ_5.0+0x6f50>
   18100:	cmp	w8, #0xa0
   18104:	str	w28, [x22, #4]
   18108:	b.cc	18120 <lzma_mode_is_supported@@XZ_5.0+0x6f38>  // b.lo, b.ul, b.last
   1810c:	ldr	x8, [x22, #24]
   18110:	ldr	x0, [x22, #8]
   18114:	mov	x1, x25
   18118:	blr	x8
   1811c:	ldrb	w9, [x22, #65]
   18120:	cbz	w9, 17edc <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   18124:	mov	w8, #0x1                   	// #1
   18128:	mov	w0, wzr
   1812c:	strb	wzr, [x22, #65]
   18130:	strb	w8, [x19, #40]
   18134:	b	1814c <lzma_mode_is_supported@@XZ_5.0+0x6f64>
   18138:	mov	w0, #0x9                   	// #9
   1813c:	b	1814c <lzma_mode_is_supported@@XZ_5.0+0x6f64>
   18140:	mov	w0, wzr
   18144:	b	1814c <lzma_mode_is_supported@@XZ_5.0+0x6f64>
   18148:	mov	w0, #0xb                   	// #11
   1814c:	ldp	x20, x19, [sp, #96]
   18150:	ldp	x22, x21, [sp, #80]
   18154:	ldp	x24, x23, [sp, #64]
   18158:	ldp	x26, x25, [sp, #48]
   1815c:	ldp	x28, x27, [sp, #32]
   18160:	ldp	x29, x30, [sp, #16]
   18164:	ldr	d8, [sp], #112
   18168:	ret
   1816c:	mov	w0, #0x1                   	// #1
   18170:	b	1814c <lzma_mode_is_supported@@XZ_5.0+0x6f64>
   18174:	stp	x29, x30, [sp, #-32]!
   18178:	stp	x20, x19, [sp, #16]
   1817c:	mov	x19, x0
   18180:	ldr	x0, [x0, #8]
   18184:	mov	x29, sp
   18188:	mov	x20, x1
   1818c:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   18190:	mov	x0, x19
   18194:	mov	x1, x20
   18198:	ldp	x20, x19, [sp, #16]
   1819c:	ldp	x29, x30, [sp], #32
   181a0:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   181a4:	stp	x29, x30, [sp, #-48]!
   181a8:	stp	x20, x19, [sp, #32]
   181ac:	str	x21, [sp, #16]
   181b0:	mov	x21, x0
   181b4:	ldr	x0, [x0]
   181b8:	mov	x20, x2
   181bc:	mov	x19, x1
   181c0:	mov	x29, sp
   181c4:	cbz	x0, 181d4 <lzma_mode_is_supported@@XZ_5.0+0x6fec>
   181c8:	ldr	x8, [x20, #16]
   181cc:	cbnz	x8, 18214 <lzma_mode_is_supported@@XZ_5.0+0x702c>
   181d0:	b	1822c <lzma_mode_is_supported@@XZ_5.0+0x7044>
   181d4:	mov	w0, #0x158                 	// #344
   181d8:	mov	x1, x19
   181dc:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   181e0:	cbz	x0, 18240 <lzma_mode_is_supported@@XZ_5.0+0x7058>
   181e4:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   181e8:	add	x8, x8, #0x28c
   181ec:	mov	x9, #0xffffffffffffffff    	// #-1
   181f0:	movi	v0.2d, #0x0
   181f4:	str	x0, [x21]
   181f8:	str	x8, [x21, #32]
   181fc:	stp	xzr, x9, [x0]
   18200:	stp	q0, q0, [x0, #16]
   18204:	str	q0, [x0, #48]
   18208:	str	xzr, [x0, #64]
   1820c:	ldr	x8, [x20, #16]
   18210:	cbz	x8, 1822c <lzma_mode_is_supported@@XZ_5.0+0x7044>
   18214:	ldr	w9, [x8]
   18218:	cbnz	w9, 1822c <lzma_mode_is_supported@@XZ_5.0+0x7044>
   1821c:	ldr	w8, [x8, #4]
   18220:	sub	w9, w8, #0x1
   18224:	cmp	w9, #0xff
   18228:	b.ls	18248 <lzma_mode_is_supported@@XZ_5.0+0x7060>  // b.plast
   1822c:	mov	w0, #0x8                   	// #8
   18230:	ldp	x20, x19, [sp, #32]
   18234:	ldr	x21, [sp, #16]
   18238:	ldp	x29, x30, [sp], #48
   1823c:	ret
   18240:	mov	w0, #0x5                   	// #5
   18244:	b	18230 <lzma_mode_is_supported@@XZ_5.0+0x7048>
   18248:	movi	v0.2d, #0x0
   1824c:	str	x8, [x0, #72]
   18250:	stp	q0, q0, [x0, #80]
   18254:	stp	q0, q0, [x0, #112]
   18258:	stp	q0, q0, [x0, #144]
   1825c:	stp	q0, q0, [x0, #176]
   18260:	stp	q0, q0, [x0, #208]
   18264:	stp	q0, q0, [x0, #240]
   18268:	stp	q0, q0, [x0, #272]
   1826c:	stp	q0, q0, [x0, #304]
   18270:	strb	wzr, [x0, #336]
   18274:	add	x2, x20, #0x18
   18278:	mov	x1, x19
   1827c:	ldp	x20, x19, [sp, #32]
   18280:	ldr	x21, [sp, #16]
   18284:	ldp	x29, x30, [sp], #48
   18288:	b	3784 <lzma_version_string@@XZ_5.0+0x134>
   1828c:	stp	x29, x30, [sp, #-32]!
   18290:	stp	x20, x19, [sp, #16]
   18294:	mov	x29, sp
   18298:	mov	x19, x1
   1829c:	mov	x20, x0
   182a0:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
   182a4:	mov	x0, x20
   182a8:	mov	x1, x19
   182ac:	ldp	x20, x19, [sp, #16]
   182b0:	ldp	x29, x30, [sp], #32
   182b4:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   182b8:	cbz	x0, 182c4 <lzma_mode_is_supported@@XZ_5.0+0x70dc>
   182bc:	ldr	w8, [x0]
   182c0:	cbz	w8, 182cc <lzma_mode_is_supported@@XZ_5.0+0x70e4>
   182c4:	mov	x0, #0xffffffffffffffff    	// #-1
   182c8:	ret
   182cc:	ldr	w8, [x0, #4]
   182d0:	sub	w8, w8, #0x1
   182d4:	cmp	w8, #0xff
   182d8:	mov	w8, #0x158                 	// #344
   182dc:	csinv	x0, x8, xzr, ls  // ls = plast
   182e0:	ret
   182e4:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   182e8:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   182ec:	add	x8, x8, #0x300
   182f0:	add	x9, x9, #0x6fc
   182f4:	str	x8, [x0, #24]
   182f8:	str	x9, [x0, #64]
   182fc:	b	181a4 <lzma_mode_is_supported@@XZ_5.0+0x6fbc>
   18300:	sub	sp, sp, #0x40
   18304:	stp	x29, x30, [sp, #16]
   18308:	stp	x22, x21, [sp, #32]
   1830c:	stp	x20, x19, [sp, #48]
   18310:	add	x29, sp, #0x10
   18314:	ldr	x9, [x0, #24]
   18318:	ldr	w8, [x29, #48]
   1831c:	mov	x21, x6
   18320:	mov	x20, x5
   18324:	mov	x19, x0
   18328:	cbz	x9, 183b0 <lzma_mode_is_supported@@XZ_5.0+0x71c8>
   1832c:	ldr	x0, [x19]
   18330:	ldr	x22, [x21]
   18334:	mov	x5, x20
   18338:	mov	x6, x21
   1833c:	str	w8, [sp]
   18340:	blr	x9
   18344:	ldr	x9, [x21]
   18348:	subs	x12, x9, x22
   1834c:	b.eq	186e8 <lzma_mode_is_supported@@XZ_5.0+0x7500>  // b.none
   18350:	mov	x13, x19
   18354:	ldr	x8, [x19, #72]
   18358:	ldrb	w11, [x13, #80]!
   1835c:	cmp	x12, #0x10
   18360:	b.cs	183e8 <lzma_mode_is_supported@@XZ_5.0+0x7200>  // b.hs, b.nlast
   18364:	mov	x10, xzr
   18368:	mov	w14, w11
   1836c:	add	x10, x10, x22
   18370:	sub	x9, x10, x9
   18374:	add	x10, x20, x10
   18378:	add	w12, w8, w14
   1837c:	add	x13, x19, #0x51
   18380:	and	x12, x12, #0xff
   18384:	ldrb	w15, [x10]
   18388:	ldrb	w12, [x13, x12]
   1838c:	and	x11, x14, #0xff
   18390:	sub	w14, w14, #0x1
   18394:	strb	w14, [x19, #80]
   18398:	strb	w15, [x13, x11]
   1839c:	sub	w11, w15, w12
   183a0:	adds	x9, x9, #0x1
   183a4:	strb	w11, [x10], #1
   183a8:	b.cc	18378 <lzma_mode_is_supported@@XZ_5.0+0x7190>  // b.lo, b.ul, b.last
   183ac:	b	186e8 <lzma_mode_is_supported@@XZ_5.0+0x7500>
   183b0:	ldr	x9, [x3]
   183b4:	ldr	x10, [x21]
   183b8:	sub	x11, x4, x9
   183bc:	sub	x12, x7, x10
   183c0:	cmp	x11, x12
   183c4:	csel	x11, x11, x12, cc  // cc = lo, ul, last
   183c8:	cbz	x11, 186c4 <lzma_mode_is_supported@@XZ_5.0+0x74dc>
   183cc:	mov	x15, x19
   183d0:	ldr	x12, [x19, #72]
   183d4:	ldrb	w14, [x15, #80]!
   183d8:	cmp	x11, #0x10
   183dc:	b.cs	18538 <lzma_mode_is_supported@@XZ_5.0+0x7350>  // b.hs, b.nlast
   183e0:	mov	x13, xzr
   183e4:	b	18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>
   183e8:	mvn	x10, x22
   183ec:	add	x14, x9, x10
   183f0:	cmp	w11, w14, uxtb
   183f4:	mov	x10, xzr
   183f8:	b.cc	18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>  // b.lo, b.ul, b.last
   183fc:	cmp	x14, #0xff
   18400:	b.hi	18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>  // b.pmore
   18404:	add	w15, w11, w8
   18408:	and	w16, w15, #0xff
   1840c:	cmp	w16, w14, uxtb
   18410:	b.cc	18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>  // b.lo, b.ul, b.last
   18414:	cmp	x14, #0xff
   18418:	b.hi	18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>  // b.pmore
   1841c:	add	x16, x11, x19
   18420:	add	x16, x16, #0x51
   18424:	cmp	x14, x16
   18428:	b.hi	18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>  // b.pmore
   1842c:	add	x15, x19, w15, uxtb
   18430:	add	x15, x15, #0x51
   18434:	cmp	x14, x15
   18438:	b.hi	18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>  // b.pmore
   1843c:	add	x14, x22, x11
   18440:	add	x16, x11, x19
   18444:	add	w17, w11, w8
   18448:	sub	x14, x14, x9
   1844c:	add	x18, x16, #0x52
   18450:	and	x16, x17, #0xff
   18454:	add	x14, x14, x19
   18458:	add	x17, x22, x16
   1845c:	add	x15, x19, #0x51
   18460:	add	x16, x16, x19
   18464:	cmp	x13, x18
   18468:	add	x1, x14, #0x52
   1846c:	sub	x14, x17, x9
   18470:	add	x17, x16, #0x52
   18474:	cset	w2, cc  // cc = lo, ul, last
   18478:	add	x14, x14, x19
   1847c:	cmp	x1, x15
   18480:	add	x3, x14, #0x52
   18484:	cset	w4, cc  // cc = lo, ul, last
   18488:	cmp	x13, x17
   1848c:	cset	w14, cc  // cc = lo, ul, last
   18490:	cmp	x3, x15
   18494:	cset	w16, cc  // cc = lo, ul, last
   18498:	cmp	x1, x17
   1849c:	cset	w15, cc  // cc = lo, ul, last
   184a0:	cmp	x3, x18
   184a4:	mov	x10, xzr
   184a8:	and	w1, w2, w4
   184ac:	cset	w17, cc  // cc = lo, ul, last
   184b0:	tbnz	w1, #0, 18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>
   184b4:	and	w14, w14, w16
   184b8:	tbnz	w14, #0, 18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>
   184bc:	and	w14, w15, w17
   184c0:	tbnz	w14, #0, 18368 <lzma_mode_is_supported@@XZ_5.0+0x7180>
   184c4:	adrp	x10, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   184c8:	ldr	q0, [x10, #3200]
   184cc:	and	x10, x12, #0xfffffffffffffff0
   184d0:	mov	x15, xzr
   184d4:	add	x16, x20, x22
   184d8:	sub	w14, w11, w10
   184dc:	sub	w18, w11, #0xf
   184e0:	mov	w17, w18
   184e4:	sub	w18, w11, w15
   184e8:	add	x1, x19, #0x51
   184ec:	add	w2, w8, w18
   184f0:	add	x2, x1, w2, uxtb
   184f4:	ldur	q2, [x2, #-15]
   184f8:	ldr	q1, [x16, x15]
   184fc:	add	x18, x1, w18, uxtb
   18500:	tbl	v2.16b, {v2.16b}, v0.16b
   18504:	tbl	v3.16b, {v1.16b}, v0.16b
   18508:	sub	v1.16b, v1.16b, v2.16b
   1850c:	stur	q3, [x18, #-15]
   18510:	str	q1, [x16, x15]
   18514:	add	x15, x15, #0x10
   18518:	cmp	x10, x15
   1851c:	sub	w18, w17, #0x10
   18520:	b.ne	184e0 <lzma_mode_is_supported@@XZ_5.0+0x72f8>  // b.any
   18524:	sub	w11, w17, #0x1
   18528:	cmp	x12, x10
   1852c:	strb	w11, [x13]
   18530:	b.ne	1836c <lzma_mode_is_supported@@XZ_5.0+0x7184>  // b.any
   18534:	b	186e8 <lzma_mode_is_supported@@XZ_5.0+0x7500>
   18538:	sub	x16, x11, #0x1
   1853c:	cmp	w14, w16, uxtb
   18540:	mov	x13, xzr
   18544:	b.cc	18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>  // b.lo, b.ul, b.last
   18548:	cmp	x16, #0xff
   1854c:	b.hi	18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>  // b.pmore
   18550:	add	w17, w14, w12
   18554:	and	w18, w17, #0xff
   18558:	cmp	w18, w16, uxtb
   1855c:	b.cc	18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>  // b.lo, b.ul, b.last
   18560:	cmp	x16, #0xff
   18564:	b.hi	18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>  // b.pmore
   18568:	add	x18, x14, x19
   1856c:	add	x18, x18, #0x51
   18570:	cmp	x16, x18
   18574:	b.hi	18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>  // b.pmore
   18578:	add	x17, x19, w17, uxtb
   1857c:	add	x17, x17, #0x51
   18580:	cmp	x16, x17
   18584:	b.hi	18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>  // b.pmore
   18588:	add	x16, x14, #0x52
   1858c:	add	w18, w14, w12
   18590:	sub	x0, x16, x11
   18594:	add	x1, x19, x16
   18598:	and	x16, x18, #0xff
   1859c:	add	x17, x19, #0x51
   185a0:	add	x0, x19, x0
   185a4:	add	x16, x16, #0x52
   185a8:	cmp	x15, x1
   185ac:	sub	x18, x16, x11
   185b0:	add	x5, x19, x16
   185b4:	cset	w6, cc  // cc = lo, ul, last
   185b8:	cmp	x0, x17
   185bc:	add	x7, x19, x18
   185c0:	cset	w22, cc  // cc = lo, ul, last
   185c4:	cmp	x15, x5
   185c8:	cset	w16, cc  // cc = lo, ul, last
   185cc:	cmp	x7, x17
   185d0:	cset	w18, cc  // cc = lo, ul, last
   185d4:	cmp	x0, x5
   185d8:	cset	w17, cc  // cc = lo, ul, last
   185dc:	cmp	x7, x1
   185e0:	mov	x13, xzr
   185e4:	and	w5, w6, w22
   185e8:	cset	w0, cc  // cc = lo, ul, last
   185ec:	tbnz	w5, #0, 18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>
   185f0:	and	w16, w16, w18
   185f4:	tbnz	w16, #0, 18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>
   185f8:	and	w16, w17, w0
   185fc:	tbnz	w16, #0, 18678 <lzma_mode_is_supported@@XZ_5.0+0x7490>
   18600:	adrp	x13, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   18604:	ldr	q0, [x13, #3200]
   18608:	and	x13, x11, #0xfffffffffffffff0
   1860c:	mov	x17, xzr
   18610:	add	x18, x2, x9
   18614:	add	x0, x20, x10
   18618:	sub	w16, w14, w13
   1861c:	sub	w5, w14, #0xf
   18620:	mov	w1, w5
   18624:	sub	w5, w14, w17
   18628:	add	x6, x19, #0x51
   1862c:	add	w7, w12, w5
   18630:	add	x7, x6, w7, uxtb
   18634:	ldur	q2, [x7, #-15]
   18638:	ldr	q1, [x18, x17]
   1863c:	add	x5, x6, w5, uxtb
   18640:	tbl	v2.16b, {v2.16b}, v0.16b
   18644:	tbl	v3.16b, {v1.16b}, v0.16b
   18648:	sub	v1.16b, v1.16b, v2.16b
   1864c:	stur	q3, [x5, #-15]
   18650:	str	q1, [x0, x17]
   18654:	add	x17, x17, #0x10
   18658:	cmp	x13, x17
   1865c:	sub	w5, w1, #0x10
   18660:	b.ne	18620 <lzma_mode_is_supported@@XZ_5.0+0x7438>  // b.any
   18664:	sub	w14, w1, #0x1
   18668:	cmp	x11, x13
   1866c:	strb	w14, [x15]
   18670:	b.eq	186c4 <lzma_mode_is_supported@@XZ_5.0+0x74dc>  // b.none
   18674:	b	1867c <lzma_mode_is_supported@@XZ_5.0+0x7494>
   18678:	mov	w16, w14
   1867c:	add	x15, x13, x10
   18680:	add	x17, x13, x9
   18684:	sub	x14, x11, x13
   18688:	add	x13, x20, x15
   1868c:	add	x15, x2, x17
   18690:	add	w17, w12, w16
   18694:	add	x18, x19, #0x51
   18698:	and	x17, x17, #0xff
   1869c:	ldrb	w17, [x18, x17]
   186a0:	ldrb	w0, [x15], #1
   186a4:	and	x1, x16, #0xff
   186a8:	sub	w16, w16, #0x1
   186ac:	strb	w16, [x19, #80]
   186b0:	sub	w17, w0, w17
   186b4:	strb	w0, [x18, x1]
   186b8:	subs	x14, x14, #0x1
   186bc:	strb	w17, [x13], #1
   186c0:	b.ne	18690 <lzma_mode_is_supported@@XZ_5.0+0x74a8>  // b.any
   186c4:	add	x9, x11, x9
   186c8:	add	x10, x11, x10
   186cc:	str	x9, [x3]
   186d0:	str	x10, [x21]
   186d4:	cbz	w8, 186e4 <lzma_mode_is_supported@@XZ_5.0+0x74fc>
   186d8:	cmp	x9, x4
   186dc:	cset	w0, eq  // eq = none
   186e0:	b	186e8 <lzma_mode_is_supported@@XZ_5.0+0x7500>
   186e4:	mov	w0, wzr
   186e8:	ldp	x20, x19, [sp, #48]
   186ec:	ldp	x22, x21, [sp, #32]
   186f0:	ldp	x29, x30, [sp, #16]
   186f4:	add	sp, sp, #0x40
   186f8:	ret
   186fc:	add	x2, x3, #0x10
   18700:	b	38cc <lzma_version_string@@XZ_5.0+0x27c>
   18704:	stp	x29, x30, [sp, #-32]!
   18708:	stp	x20, x19, [sp, #16]
   1870c:	mov	x29, sp
   18710:	mov	x19, x1
   18714:	mov	x20, x0
   18718:	bl	182b8 <lzma_mode_is_supported@@XZ_5.0+0x70d0>
   1871c:	cmn	x0, #0x1
   18720:	b.eq	18738 <lzma_mode_is_supported@@XZ_5.0+0x7550>  // b.none
   18724:	ldrb	w8, [x20, #4]
   18728:	mov	w0, wzr
   1872c:	sub	w8, w8, #0x1
   18730:	strb	w8, [x19]
   18734:	b	1873c <lzma_mode_is_supported@@XZ_5.0+0x7554>
   18738:	mov	w0, #0xb                   	// #11
   1873c:	ldp	x20, x19, [sp, #16]
   18740:	ldp	x29, x30, [sp], #32
   18744:	ret
   18748:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   1874c:	add	x8, x8, #0x758
   18750:	str	x8, [x0, #24]
   18754:	b	181a4 <lzma_mode_is_supported@@XZ_5.0+0x6fbc>
   18758:	sub	sp, sp, #0x40
   1875c:	stp	x29, x30, [sp, #16]
   18760:	stp	x22, x21, [sp, #32]
   18764:	stp	x20, x19, [sp, #48]
   18768:	add	x29, sp, #0x10
   1876c:	mov	x19, x0
   18770:	ldr	w8, [x29, #48]
   18774:	ldr	x9, [x0, #24]
   18778:	ldr	x0, [x0]
   1877c:	ldr	x22, [x6]
   18780:	mov	x21, x6
   18784:	mov	x20, x5
   18788:	str	w8, [sp]
   1878c:	blr	x9
   18790:	ldr	x9, [x21]
   18794:	subs	x12, x9, x22
   18798:	b.eq	1894c <lzma_mode_is_supported@@XZ_5.0+0x7764>  // b.none
   1879c:	mov	x13, x19
   187a0:	ldr	x8, [x19, #72]
   187a4:	ldrb	w11, [x13, #80]!
   187a8:	cmp	x12, #0x10
   187ac:	b.cs	187b8 <lzma_mode_is_supported@@XZ_5.0+0x75d0>  // b.hs, b.nlast
   187b0:	mov	x10, xzr
   187b4:	b	18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>
   187b8:	mvn	x10, x22
   187bc:	add	x14, x9, x10
   187c0:	cmp	w11, w14, uxtb
   187c4:	mov	x10, xzr
   187c8:	b.cc	18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>  // b.lo, b.ul, b.last
   187cc:	cmp	x14, #0xff
   187d0:	b.hi	18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>  // b.pmore
   187d4:	add	w15, w11, w8
   187d8:	and	w16, w15, #0xff
   187dc:	cmp	w16, w14, uxtb
   187e0:	b.cc	18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>  // b.lo, b.ul, b.last
   187e4:	cmp	x14, #0xff
   187e8:	b.hi	18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>  // b.pmore
   187ec:	add	x16, x11, x19
   187f0:	add	x16, x16, #0x51
   187f4:	cmp	x14, x16
   187f8:	b.hi	18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>  // b.pmore
   187fc:	add	x15, x19, w15, uxtb
   18800:	add	x15, x15, #0x51
   18804:	cmp	x14, x15
   18808:	b.hi	18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>  // b.pmore
   1880c:	add	x14, x22, x11
   18810:	add	x16, x11, x19
   18814:	add	w17, w11, w8
   18818:	sub	x14, x14, x9
   1881c:	add	x18, x16, #0x52
   18820:	and	x16, x17, #0xff
   18824:	add	x14, x14, x19
   18828:	add	x17, x22, x16
   1882c:	add	x15, x19, #0x51
   18830:	add	x16, x16, x19
   18834:	cmp	x13, x18
   18838:	add	x1, x14, #0x52
   1883c:	sub	x14, x17, x9
   18840:	add	x17, x16, #0x52
   18844:	cset	w2, cc  // cc = lo, ul, last
   18848:	add	x14, x14, x19
   1884c:	cmp	x1, x15
   18850:	add	x3, x14, #0x52
   18854:	cset	w4, cc  // cc = lo, ul, last
   18858:	cmp	x13, x17
   1885c:	cset	w14, cc  // cc = lo, ul, last
   18860:	cmp	x3, x15
   18864:	cset	w16, cc  // cc = lo, ul, last
   18868:	cmp	x1, x17
   1886c:	cset	w15, cc  // cc = lo, ul, last
   18870:	cmp	x3, x18
   18874:	mov	x10, xzr
   18878:	and	w1, w2, w4
   1887c:	cset	w17, cc  // cc = lo, ul, last
   18880:	tbnz	w1, #0, 18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>
   18884:	and	w14, w14, w16
   18888:	tbnz	w14, #0, 18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>
   1888c:	and	w14, w15, w17
   18890:	tbnz	w14, #0, 18908 <lzma_mode_is_supported@@XZ_5.0+0x7720>
   18894:	adrp	x10, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   18898:	ldr	q0, [x10, #3200]
   1889c:	and	x10, x12, #0xfffffffffffffff0
   188a0:	mov	x15, xzr
   188a4:	add	x16, x20, x22
   188a8:	sub	w14, w11, w10
   188ac:	sub	w17, w11, #0xf
   188b0:	sub	w1, w11, w15
   188b4:	add	x2, x19, #0x51
   188b8:	add	w18, w8, w1
   188bc:	add	x18, x2, w18, uxtb
   188c0:	ldur	q1, [x18, #-15]
   188c4:	ldr	q2, [x16, x15]
   188c8:	mov	w18, w17
   188cc:	add	x17, x2, w1, uxtb
   188d0:	tbl	v1.16b, {v1.16b}, v0.16b
   188d4:	add	v1.16b, v2.16b, v1.16b
   188d8:	str	q1, [x16, x15]
   188dc:	tbl	v1.16b, {v1.16b}, v0.16b
   188e0:	add	x15, x15, #0x10
   188e4:	stur	q1, [x17, #-15]
   188e8:	cmp	x10, x15
   188ec:	sub	w17, w18, #0x10
   188f0:	b.ne	188b0 <lzma_mode_is_supported@@XZ_5.0+0x76c8>  // b.any
   188f4:	sub	w11, w18, #0x1
   188f8:	cmp	x12, x10
   188fc:	strb	w11, [x13]
   18900:	b.eq	1894c <lzma_mode_is_supported@@XZ_5.0+0x7764>  // b.none
   18904:	b	1890c <lzma_mode_is_supported@@XZ_5.0+0x7724>
   18908:	mov	w14, w11
   1890c:	add	x10, x10, x22
   18910:	sub	x9, x10, x9
   18914:	add	x10, x20, x10
   18918:	add	w11, w8, w14
   1891c:	add	x12, x19, #0x51
   18920:	and	x11, x11, #0xff
   18924:	ldrb	w13, [x10]
   18928:	ldrb	w11, [x12, x11]
   1892c:	and	x15, x14, #0xff
   18930:	sub	w14, w14, #0x1
   18934:	adds	x9, x9, #0x1
   18938:	add	w11, w13, w11
   1893c:	strb	w11, [x10], #1
   18940:	strb	w14, [x19, #80]
   18944:	strb	w11, [x12, x15]
   18948:	b.cc	18918 <lzma_mode_is_supported@@XZ_5.0+0x7730>  // b.lo, b.ul, b.last
   1894c:	ldp	x20, x19, [sp, #48]
   18950:	ldp	x22, x21, [sp, #32]
   18954:	ldp	x29, x30, [sp, #16]
   18958:	add	sp, sp, #0x40
   1895c:	ret
   18960:	stp	x29, x30, [sp, #-32]!
   18964:	cmp	x3, #0x1
   18968:	stp	x20, x19, [sp, #16]
   1896c:	mov	x29, sp
   18970:	b.ne	189a4 <lzma_mode_is_supported@@XZ_5.0+0x77bc>  // b.any
   18974:	mov	x20, x0
   18978:	mov	w0, #0x28                  	// #40
   1897c:	mov	x19, x2
   18980:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   18984:	cbz	x0, 189ac <lzma_mode_is_supported@@XZ_5.0+0x77c4>
   18988:	ldrb	w9, [x19]
   1898c:	mov	x8, x0
   18990:	mov	w0, wzr
   18994:	add	w9, w9, #0x1
   18998:	stp	wzr, w9, [x8]
   1899c:	str	x8, [x20]
   189a0:	b	189b0 <lzma_mode_is_supported@@XZ_5.0+0x77c8>
   189a4:	mov	w0, #0x8                   	// #8
   189a8:	b	189b0 <lzma_mode_is_supported@@XZ_5.0+0x77c8>
   189ac:	mov	w0, #0x5                   	// #5
   189b0:	ldp	x20, x19, [sp, #16]
   189b4:	ldp	x29, x30, [sp], #32
   189b8:	ret
   189bc:	stp	x29, x30, [sp, #-96]!
   189c0:	stp	x26, x25, [sp, #32]
   189c4:	stp	x24, x23, [sp, #48]
   189c8:	stp	x22, x21, [sp, #64]
   189cc:	stp	x20, x19, [sp, #80]
   189d0:	ldr	x22, [x0]
   189d4:	mov	w21, w7
   189d8:	mov	w23, w6
   189dc:	mov	x20, x2
   189e0:	mov	x19, x1
   189e4:	str	x27, [sp, #16]
   189e8:	mov	x29, sp
   189ec:	cbz	x22, 18a14 <lzma_mode_is_supported@@XZ_5.0+0x782c>
   189f0:	ldr	x8, [x20, #16]
   189f4:	cbz	x8, 18ab4 <lzma_mode_is_supported@@XZ_5.0+0x78cc>
   189f8:	ldr	w8, [x8]
   189fc:	sub	w9, w23, #0x1
   18a00:	tst	w8, w9
   18a04:	str	w8, [x22, #96]
   18a08:	b.eq	18ab8 <lzma_mode_is_supported@@XZ_5.0+0x78d0>  // b.none
   18a0c:	mov	w0, #0x8                   	// #8
   18a10:	b	18a98 <lzma_mode_is_supported@@XZ_5.0+0x78b0>
   18a14:	lsl	x27, x5, #1
   18a18:	mov	x26, x0
   18a1c:	add	x0, x27, #0x88
   18a20:	mov	x1, x19
   18a24:	mov	x24, x4
   18a28:	mov	x25, x3
   18a2c:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   18a30:	cbz	x0, 18a94 <lzma_mode_is_supported@@XZ_5.0+0x78ac>
   18a34:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   18a38:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   18a3c:	add	x8, x8, #0xafc
   18a40:	add	x9, x9, #0xe30
   18a44:	stp	x8, x9, [x26, #24]
   18a48:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   18a4c:	add	x8, x8, #0xe68
   18a50:	mov	x22, x0
   18a54:	str	x8, [x26, #64]
   18a58:	mov	x8, #0xffffffffffffffff    	// #-1
   18a5c:	movi	v0.2d, #0x0
   18a60:	str	x0, [x26]
   18a64:	stp	xzr, x8, [x0]
   18a68:	stp	q0, q0, [x0, #16]
   18a6c:	str	q0, [x0, #48]
   18a70:	str	xzr, [x0, #64]
   18a74:	str	x25, [x0, #80]
   18a78:	str	x27, [x0, #104]
   18a7c:	cbz	x24, 18af4 <lzma_mode_is_supported@@XZ_5.0+0x790c>
   18a80:	mov	x0, x24
   18a84:	mov	x1, x19
   18a88:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   18a8c:	str	x0, [x22, #88]
   18a90:	cbnz	x0, 189f0 <lzma_mode_is_supported@@XZ_5.0+0x7808>
   18a94:	mov	w0, #0x5                   	// #5
   18a98:	ldp	x20, x19, [sp, #80]
   18a9c:	ldp	x22, x21, [sp, #64]
   18aa0:	ldp	x24, x23, [sp, #48]
   18aa4:	ldp	x26, x25, [sp, #32]
   18aa8:	ldr	x27, [sp, #16]
   18aac:	ldp	x29, x30, [sp], #96
   18ab0:	ret
   18ab4:	str	wzr, [x22, #96]
   18ab8:	and	w8, w21, #0x1
   18abc:	strb	wzr, [x22, #72]
   18ac0:	stp	xzr, xzr, [x22, #120]
   18ac4:	strb	w8, [x22, #73]
   18ac8:	str	xzr, [x22, #112]
   18acc:	add	x2, x20, #0x18
   18ad0:	mov	x0, x22
   18ad4:	mov	x1, x19
   18ad8:	ldp	x20, x19, [sp, #80]
   18adc:	ldp	x22, x21, [sp, #64]
   18ae0:	ldp	x24, x23, [sp, #48]
   18ae4:	ldp	x26, x25, [sp, #32]
   18ae8:	ldr	x27, [sp, #16]
   18aec:	ldp	x29, x30, [sp], #96
   18af0:	b	3784 <lzma_version_string@@XZ_5.0+0x134>
   18af4:	str	xzr, [x22, #88]
   18af8:	b	189f0 <lzma_mode_is_supported@@XZ_5.0+0x7808>
   18afc:	sub	sp, sp, #0xa0
   18b00:	stp	x29, x30, [sp, #64]
   18b04:	add	x29, sp, #0x40
   18b08:	stp	x26, x25, [sp, #96]
   18b0c:	ldr	w25, [x29, #96]
   18b10:	stp	x28, x27, [sp, #80]
   18b14:	stp	x24, x23, [sp, #112]
   18b18:	stp	x22, x21, [sp, #128]
   18b1c:	cmp	w25, #0x1
   18b20:	stp	x20, x19, [sp, #144]
   18b24:	b.ne	18b30 <lzma_mode_is_supported@@XZ_5.0+0x7948>  // b.any
   18b28:	mov	w0, #0x8                   	// #8
   18b2c:	b	18e10 <lzma_mode_is_supported@@XZ_5.0+0x7c28>
   18b30:	mov	x19, x0
   18b34:	ldr	x8, [x19, #112]!
   18b38:	mov	x27, x2
   18b3c:	mov	x20, x7
   18b40:	mov	x22, x6
   18b44:	ldr	x2, [x19, #8]
   18b48:	mov	x23, x5
   18b4c:	mov	x26, x4
   18b50:	mov	x24, x3
   18b54:	mov	x28, x1
   18b58:	mov	x21, x0
   18b5c:	cmp	x8, x2
   18b60:	b.cs	18b90 <lzma_mode_is_supported@@XZ_5.0+0x79a8>  // b.hs, b.nlast
   18b64:	add	x0, x21, #0x88
   18b68:	mov	x1, x19
   18b6c:	mov	x3, x23
   18b70:	mov	x4, x22
   18b74:	mov	x5, x20
   18b78:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
   18b7c:	ldp	x8, x9, [x21, #112]
   18b80:	cmp	x8, x9
   18b84:	b.cc	18e0c <lzma_mode_is_supported@@XZ_5.0+0x7c24>  // b.lo, b.ul, b.last
   18b88:	ldrb	w9, [x21, #72]
   18b8c:	cbnz	w9, 18e04 <lzma_mode_is_supported@@XZ_5.0+0x7c1c>
   18b90:	stp	x28, x24, [x29, #-24]
   18b94:	stur	x23, [x29, #-8]
   18b98:	mov	x24, x21
   18b9c:	ldr	x9, [x24, #128]!
   18ba0:	stur	xzr, [x24, #-8]
   18ba4:	ldr	x23, [x22]
   18ba8:	sub	x28, x9, x8
   18bac:	sub	x10, x20, x23
   18bb0:	cmp	x10, x28
   18bb4:	b.hi	18be0 <lzma_mode_is_supported@@XZ_5.0+0x79f8>  // b.pmore
   18bb8:	cbz	x28, 18be0 <lzma_mode_is_supported@@XZ_5.0+0x79f8>
   18bbc:	cbz	x8, 18c44 <lzma_mode_is_supported@@XZ_5.0+0x7a5c>
   18bc0:	add	x0, x21, #0x88
   18bc4:	add	x1, x0, x8
   18bc8:	mov	x2, x28
   18bcc:	bl	3050 <memmove@plt>
   18bd0:	str	x28, [x21, #128]
   18bd4:	str	xzr, [x21, #112]
   18bd8:	ldp	x3, x28, [x29, #-16]
   18bdc:	b	18d0c <lzma_mode_is_supported@@XZ_5.0+0x7b24>
   18be0:	str	x26, [sp, #32]
   18be4:	ldur	x26, [x29, #-8]
   18be8:	add	x9, x21, #0x88
   18bec:	add	x1, x9, x8
   18bf0:	mov	x2, x28
   18bf4:	add	x0, x26, x23
   18bf8:	stp	x9, x0, [sp, #16]
   18bfc:	bl	3040 <memcpy@plt>
   18c00:	add	x8, x28, x23
   18c04:	str	x8, [x22]
   18c08:	ldr	x8, [x21, #24]
   18c0c:	cbz	x8, 18c50 <lzma_mode_is_supported@@XZ_5.0+0x7a68>
   18c10:	ldr	x0, [x21]
   18c14:	ldp	x1, x3, [x29, #-24]
   18c18:	ldr	x4, [sp, #32]
   18c1c:	mov	x2, x27
   18c20:	mov	x5, x26
   18c24:	mov	x6, x22
   18c28:	mov	x7, x20
   18c2c:	str	w25, [sp]
   18c30:	blr	x8
   18c34:	cbz	w0, 18c98 <lzma_mode_is_supported@@XZ_5.0+0x7ab0>
   18c38:	cmp	w0, #0x1
   18c3c:	b.eq	18c90 <lzma_mode_is_supported@@XZ_5.0+0x7aa8>  // b.none
   18c40:	b	18e10 <lzma_mode_is_supported@@XZ_5.0+0x7c28>
   18c44:	ldp	x3, x28, [x29, #-16]
   18c48:	cbnz	x9, 18d0c <lzma_mode_is_supported@@XZ_5.0+0x7b24>
   18c4c:	b	18dec <lzma_mode_is_supported@@XZ_5.0+0x7c04>
   18c50:	ldur	x28, [x29, #-16]
   18c54:	ldr	x2, [sp, #32]
   18c58:	mov	x0, x27
   18c5c:	mov	x3, x26
   18c60:	mov	x1, x28
   18c64:	mov	x4, x22
   18c68:	mov	x5, x20
   18c6c:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
   18c70:	cmp	w25, #0x3
   18c74:	b.ne	18c98 <lzma_mode_is_supported@@XZ_5.0+0x7ab0>  // b.any
   18c78:	ldrb	w8, [x21, #73]
   18c7c:	cbz	w8, 18c98 <lzma_mode_is_supported@@XZ_5.0+0x7ab0>
   18c80:	ldr	x8, [x28]
   18c84:	ldr	x9, [sp, #32]
   18c88:	cmp	x8, x9
   18c8c:	b.ne	18c98 <lzma_mode_is_supported@@XZ_5.0+0x7ab0>  // b.any
   18c90:	mov	w8, #0x1                   	// #1
   18c94:	strb	w8, [x21, #72]
   18c98:	ldr	x8, [x22]
   18c9c:	ldp	x9, x0, [x21, #80]
   18ca0:	ldr	w1, [x21, #96]
   18ca4:	ldrb	w2, [x21, #73]
   18ca8:	ldr	x3, [sp, #24]
   18cac:	sub	x28, x8, x23
   18cb0:	mov	x4, x28
   18cb4:	blr	x9
   18cb8:	ldr	w8, [x21, #96]
   18cbc:	ldrb	w9, [x21, #72]
   18cc0:	sub	x2, x28, x0
   18cc4:	str	xzr, [x21, #112]
   18cc8:	add	w8, w8, w0
   18ccc:	str	w8, [x21, #96]
   18cd0:	str	x2, [x21, #128]
   18cd4:	cbz	w9, 18ce0 <lzma_mode_is_supported@@XZ_5.0+0x7af8>
   18cd8:	str	xzr, [x24]
   18cdc:	b	18dec <lzma_mode_is_supported@@XZ_5.0+0x7c04>
   18ce0:	ldp	x9, x28, [x29, #-16]
   18ce4:	ldr	x26, [sp, #32]
   18ce8:	cbz	x2, 18dec <lzma_mode_is_supported@@XZ_5.0+0x7c04>
   18cec:	ldr	x8, [x22]
   18cf0:	ldr	x0, [sp, #16]
   18cf4:	mov	x23, x9
   18cf8:	sub	x8, x8, x2
   18cfc:	add	x1, x28, x8
   18d00:	str	x8, [x22]
   18d04:	bl	3040 <memcpy@plt>
   18d08:	mov	x3, x23
   18d0c:	ldr	x8, [x21, #24]
   18d10:	ldr	x7, [x21, #104]
   18d14:	add	x23, x21, #0x88
   18d18:	cbz	x8, 18d50 <lzma_mode_is_supported@@XZ_5.0+0x7b68>
   18d1c:	ldr	x0, [x21]
   18d20:	ldur	x1, [x29, #-24]
   18d24:	mov	x2, x27
   18d28:	mov	x4, x26
   18d2c:	mov	x5, x23
   18d30:	mov	x6, x24
   18d34:	str	w25, [sp]
   18d38:	blr	x8
   18d3c:	mov	x25, x23
   18d40:	cbz	w0, 18d98 <lzma_mode_is_supported@@XZ_5.0+0x7bb0>
   18d44:	cmp	w0, #0x1
   18d48:	b.eq	18d90 <lzma_mode_is_supported@@XZ_5.0+0x7ba8>  // b.none
   18d4c:	b	18e10 <lzma_mode_is_supported@@XZ_5.0+0x7c28>
   18d50:	mov	x0, x27
   18d54:	mov	x27, x3
   18d58:	mov	x1, x3
   18d5c:	mov	x2, x26
   18d60:	mov	x3, x23
   18d64:	mov	x4, x24
   18d68:	mov	x5, x7
   18d6c:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
   18d70:	cmp	w25, #0x3
   18d74:	mov	x25, x23
   18d78:	b.ne	18d98 <lzma_mode_is_supported@@XZ_5.0+0x7bb0>  // b.any
   18d7c:	ldrb	w8, [x21, #73]
   18d80:	cbz	w8, 18d98 <lzma_mode_is_supported@@XZ_5.0+0x7bb0>
   18d84:	ldr	x8, [x27]
   18d88:	cmp	x8, x26
   18d8c:	b.ne	18d98 <lzma_mode_is_supported@@XZ_5.0+0x7bb0>  // b.any
   18d90:	mov	w8, #0x1                   	// #1
   18d94:	strb	w8, [x21, #72]
   18d98:	ldr	x4, [x21, #128]
   18d9c:	ldp	x8, x0, [x21, #80]
   18da0:	ldr	w1, [x21, #96]
   18da4:	ldrb	w2, [x21, #73]
   18da8:	mov	x3, x25
   18dac:	blr	x8
   18db0:	ldr	w8, [x21, #96]
   18db4:	ldrb	w9, [x21, #72]
   18db8:	mov	x2, x0
   18dbc:	str	x0, [x21, #120]
   18dc0:	add	w8, w8, w2
   18dc4:	str	w8, [x21, #96]
   18dc8:	cbz	w9, 18dd4 <lzma_mode_is_supported@@XZ_5.0+0x7bec>
   18dcc:	ldr	x2, [x21, #128]
   18dd0:	str	x2, [x21, #120]
   18dd4:	mov	x0, x25
   18dd8:	mov	x1, x19
   18ddc:	mov	x3, x28
   18de0:	mov	x4, x22
   18de4:	mov	x5, x20
   18de8:	bl	3714 <lzma_version_string@@XZ_5.0+0xc4>
   18dec:	ldrb	w8, [x21, #72]
   18df0:	cbz	w8, 18e0c <lzma_mode_is_supported@@XZ_5.0+0x7c24>
   18df4:	ldr	x8, [x19]
   18df8:	ldr	x9, [x24]
   18dfc:	cmp	x8, x9
   18e00:	b.ne	18e0c <lzma_mode_is_supported@@XZ_5.0+0x7c24>  // b.any
   18e04:	mov	w0, #0x1                   	// #1
   18e08:	b	18e10 <lzma_mode_is_supported@@XZ_5.0+0x7c28>
   18e0c:	mov	w0, wzr
   18e10:	ldp	x20, x19, [sp, #144]
   18e14:	ldp	x22, x21, [sp, #128]
   18e18:	ldp	x24, x23, [sp, #112]
   18e1c:	ldp	x26, x25, [sp, #96]
   18e20:	ldp	x28, x27, [sp, #80]
   18e24:	ldp	x29, x30, [sp, #64]
   18e28:	add	sp, sp, #0xa0
   18e2c:	ret
   18e30:	stp	x29, x30, [sp, #-32]!
   18e34:	stp	x20, x19, [sp, #16]
   18e38:	mov	x29, sp
   18e3c:	mov	x19, x1
   18e40:	mov	x20, x0
   18e44:	bl	3850 <lzma_version_string@@XZ_5.0+0x200>
   18e48:	ldr	x0, [x20, #88]
   18e4c:	mov	x1, x19
   18e50:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   18e54:	mov	x0, x20
   18e58:	mov	x1, x19
   18e5c:	ldp	x20, x19, [sp, #16]
   18e60:	ldp	x29, x30, [sp], #32
   18e64:	b	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   18e68:	add	x2, x3, #0x10
   18e6c:	b	38cc <lzma_version_string@@XZ_5.0+0x27c>
   18e70:	cbz	x1, 18e88 <lzma_mode_is_supported@@XZ_5.0+0x7ca0>
   18e74:	ldr	w8, [x1]
   18e78:	cmp	w8, #0x0
   18e7c:	cset	w8, ne  // ne = any
   18e80:	lsl	w8, w8, #2
   18e84:	b	18e8c <lzma_mode_is_supported@@XZ_5.0+0x7ca4>
   18e88:	mov	w8, wzr
   18e8c:	str	w8, [x0]
   18e90:	mov	w0, wzr
   18e94:	ret
   18e98:	cbz	x0, 18ea8 <lzma_mode_is_supported@@XZ_5.0+0x7cc0>
   18e9c:	ldr	w8, [x0]
   18ea0:	cbz	w8, 18ea8 <lzma_mode_is_supported@@XZ_5.0+0x7cc0>
   18ea4:	str	w8, [x1]
   18ea8:	mov	w0, wzr
   18eac:	ret
   18eb0:	stp	x29, x30, [sp, #-48]!
   18eb4:	str	x21, [sp, #16]
   18eb8:	stp	x20, x19, [sp, #32]
   18ebc:	mov	x29, sp
   18ec0:	cbz	x3, 18f1c <lzma_mode_is_supported@@XZ_5.0+0x7d34>
   18ec4:	cmp	x3, #0x4
   18ec8:	b.ne	18f00 <lzma_mode_is_supported@@XZ_5.0+0x7d18>  // b.any
   18ecc:	mov	x20, x0
   18ed0:	mov	w0, #0x4                   	// #4
   18ed4:	mov	x21, x2
   18ed8:	mov	x19, x1
   18edc:	bl	365c <lzma_version_string@@XZ_5.0+0xc>
   18ee0:	cbz	x0, 18f08 <lzma_mode_is_supported@@XZ_5.0+0x7d20>
   18ee4:	ldr	w9, [x21]
   18ee8:	mov	x8, x0
   18eec:	str	w9, [x0]
   18ef0:	cbz	w9, 18f10 <lzma_mode_is_supported@@XZ_5.0+0x7d28>
   18ef4:	mov	w0, wzr
   18ef8:	str	x8, [x20]
   18efc:	b	18f20 <lzma_mode_is_supported@@XZ_5.0+0x7d38>
   18f00:	mov	w0, #0x8                   	// #8
   18f04:	b	18f20 <lzma_mode_is_supported@@XZ_5.0+0x7d38>
   18f08:	mov	w0, #0x5                   	// #5
   18f0c:	b	18f20 <lzma_mode_is_supported@@XZ_5.0+0x7d38>
   18f10:	mov	x0, x8
   18f14:	mov	x1, x19
   18f18:	bl	36f0 <lzma_version_string@@XZ_5.0+0xa0>
   18f1c:	mov	w0, wzr
   18f20:	ldp	x20, x19, [sp, #32]
   18f24:	ldr	x21, [sp, #16]
   18f28:	ldp	x29, x30, [sp], #48
   18f2c:	ret
   18f30:	stp	x29, x30, [sp, #-32]!
   18f34:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   18f38:	add	x3, x3, #0xfd0
   18f3c:	mov	w4, #0x8                   	// #8
   18f40:	mov	w5, #0x5                   	// #5
   18f44:	mov	w6, #0x1                   	// #1
   18f48:	mov	w7, #0x1                   	// #1
   18f4c:	str	x19, [sp, #16]
   18f50:	mov	x29, sp
   18f54:	mov	x19, x0
   18f58:	bl	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   18f5c:	cbnz	w0, 18f74 <lzma_mode_is_supported@@XZ_5.0+0x7d8c>
   18f60:	ldr	x8, [x19]
   18f64:	adrp	x9, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   18f68:	ldr	d0, [x9, #3216]
   18f6c:	ldr	x8, [x8, #88]
   18f70:	str	d0, [x8]
   18f74:	ldr	x19, [sp, #16]
   18f78:	ldp	x29, x30, [sp], #32
   18f7c:	ret
   18f80:	stp	x29, x30, [sp, #-32]!
   18f84:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   18f88:	add	x3, x3, #0xfd0
   18f8c:	mov	w4, #0x8                   	// #8
   18f90:	mov	w5, #0x5                   	// #5
   18f94:	mov	w6, #0x1                   	// #1
   18f98:	mov	w7, wzr
   18f9c:	str	x19, [sp, #16]
   18fa0:	mov	x29, sp
   18fa4:	mov	x19, x0
   18fa8:	bl	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   18fac:	cbnz	w0, 18fc4 <lzma_mode_is_supported@@XZ_5.0+0x7ddc>
   18fb0:	ldr	x8, [x19]
   18fb4:	adrp	x9, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   18fb8:	ldr	d0, [x9, #3216]
   18fbc:	ldr	x8, [x8, #88]
   18fc0:	str	d0, [x8]
   18fc4:	ldr	x19, [sp, #16]
   18fc8:	ldp	x29, x30, [sp], #32
   18fcc:	ret
   18fd0:	subs	x9, x4, #0x5
   18fd4:	b.cs	18fe0 <lzma_mode_is_supported@@XZ_5.0+0x7df8>  // b.hs, b.nlast
   18fd8:	mov	x0, xzr
   18fdc:	ret
   18fe0:	stp	x24, x23, [sp, #-48]!
   18fe4:	stp	x22, x21, [sp, #16]
   18fe8:	stp	x20, x19, [sp, #32]
   18fec:	mov	x8, x0
   18ff0:	ldp	w17, w16, [x8]
   18ff4:	sub	w18, w1, #0x5
   18ff8:	adrp	x12, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   18ffc:	mov	x0, xzr
   19000:	sub	w4, w1, w16
   19004:	cmp	w4, #0x5
   19008:	mov	w10, #0x17                  	// #23
   1900c:	mov	w11, #0xfffffffb            	// #-5
   19010:	add	x12, x12, #0xc98
   19014:	mov	w13, #0x18                  	// #24
   19018:	mov	w14, #0xffffffff            	// #-1
   1901c:	mov	w15, #0x11                  	// #17
   19020:	csel	w4, w18, w16, hi  // hi = pmore
   19024:	mov	w16, #0xee                  	// #238
   19028:	b	19038 <lzma_mode_is_supported@@XZ_5.0+0x7e50>
   1902c:	add	x0, x0, #0x1
   19030:	cmp	x0, x9
   19034:	b.hi	19164 <lzma_mode_is_supported@@XZ_5.0+0x7f7c>  // b.pmore
   19038:	ldrb	w18, [x3, x0]
   1903c:	and	w18, w18, #0xfe
   19040:	cmp	w18, #0xe8
   19044:	b.ne	1902c <lzma_mode_is_supported@@XZ_5.0+0x7e44>  // b.any
   19048:	add	w18, w0, w1
   1904c:	sub	w4, w18, w4
   19050:	cmp	w4, #0x5
   19054:	b.ls	19060 <lzma_mode_is_supported@@XZ_5.0+0x7e78>  // b.plast
   19058:	mov	w17, wzr
   1905c:	b	19070 <lzma_mode_is_supported@@XZ_5.0+0x7e88>
   19060:	cbz	w4, 19070 <lzma_mode_is_supported@@XZ_5.0+0x7e88>
   19064:	subs	w4, w4, #0x1
   19068:	and	w17, w16, w17, lsl #1
   1906c:	b.ne	19064 <lzma_mode_is_supported@@XZ_5.0+0x7e7c>  // b.any
   19070:	add	x4, x0, #0x4
   19074:	ldrb	w5, [x3, x4]
   19078:	cmp	w5, #0xff
   1907c:	b.eq	19084 <lzma_mode_is_supported@@XZ_5.0+0x7e9c>  // b.none
   19080:	cbnz	w5, 1913c <lzma_mode_is_supported@@XZ_5.0+0x7f54>
   19084:	cmp	w17, #0x1f
   19088:	b.hi	1913c <lzma_mode_is_supported@@XZ_5.0+0x7f54>  // b.pmore
   1908c:	ubfx	w6, w17, #1, #3
   19090:	lsr	x6, x10, x6
   19094:	tbz	w6, #0, 1913c <lzma_mode_is_supported@@XZ_5.0+0x7f54>
   19098:	lsl	w19, w5, #24
   1909c:	add	x5, x0, #0x3
   190a0:	add	x6, x0, #0x2
   190a4:	ldrb	w22, [x3, x5]
   190a8:	add	x7, x0, #0x1
   190ac:	ldrb	w23, [x3, x6]
   190b0:	ldrb	w24, [x3, x7]
   190b4:	bfi	w19, w22, #16, #8
   190b8:	add	w20, w18, #0x5
   190bc:	sub	w21, w11, w18
   190c0:	tst	w2, #0x1
   190c4:	bfi	w19, w23, #8, #8
   190c8:	orr	w19, w19, w24
   190cc:	csel	w20, w20, w21, ne  // ne = any
   190d0:	add	w19, w19, w20
   190d4:	cbz	w17, 19110 <lzma_mode_is_supported@@XZ_5.0+0x7f28>
   190d8:	lsr	w17, w17, #1
   190dc:	ldr	w17, [x12, w17, uxtw #2]
   190e0:	lsl	w21, w17, #3
   190e4:	sub	w17, w13, w21
   190e8:	neg	w21, w21
   190ec:	lsl	w21, w14, w21
   190f0:	b	190fc <lzma_mode_is_supported@@XZ_5.0+0x7f14>
   190f4:	eon	w19, w19, w21
   190f8:	add	w19, w19, w20
   190fc:	lsr	w22, w19, w17
   19100:	and	w22, w22, #0xff
   19104:	cmp	w22, #0xff
   19108:	b.eq	190f4 <lzma_mode_is_supported@@XZ_5.0+0x7f0c>  // b.none
   1910c:	cbz	w22, 190f4 <lzma_mode_is_supported@@XZ_5.0+0x7f0c>
   19110:	ubfx	w20, w19, #24, #1
   19114:	lsr	w21, w19, #16
   19118:	lsr	w22, w19, #8
   1911c:	neg	w20, w20
   19120:	mov	w17, wzr
   19124:	strb	w20, [x3, x4]
   19128:	strb	w21, [x3, x5]
   1912c:	strb	w22, [x3, x6]
   19130:	strb	w19, [x3, x7]
   19134:	add	x0, x0, #0x5
   19138:	b	19158 <lzma_mode_is_supported@@XZ_5.0+0x7f70>
   1913c:	add	x0, x0, #0x1
   19140:	cbz	w5, 19154 <lzma_mode_is_supported@@XZ_5.0+0x7f6c>
   19144:	cmp	w5, #0xff
   19148:	b.eq	19154 <lzma_mode_is_supported@@XZ_5.0+0x7f6c>  // b.none
   1914c:	orr	w17, w17, #0x1
   19150:	b	19158 <lzma_mode_is_supported@@XZ_5.0+0x7f70>
   19154:	orr	w17, w17, w15
   19158:	mov	w4, w18
   1915c:	cmp	x0, x9
   19160:	b.ls	19038 <lzma_mode_is_supported@@XZ_5.0+0x7e50>  // b.plast
   19164:	stp	w17, w4, [x8]
   19168:	ldp	x20, x19, [sp, #32]
   1916c:	ldp	x22, x21, [sp, #16]
   19170:	ldp	x24, x23, [sp], #48
   19174:	ret
   19178:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   1917c:	add	x3, x3, #0x1b0
   19180:	mov	w5, #0x4                   	// #4
   19184:	mov	w6, #0x4                   	// #4
   19188:	mov	w7, #0x1                   	// #1
   1918c:	mov	x4, xzr
   19190:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   19194:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   19198:	add	x3, x3, #0x1b0
   1919c:	mov	w5, #0x4                   	// #4
   191a0:	mov	w6, #0x4                   	// #4
   191a4:	mov	x4, xzr
   191a8:	mov	w7, wzr
   191ac:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   191b0:	cmp	x4, #0x4
   191b4:	b.cs	191c0 <lzma_mode_is_supported@@XZ_5.0+0x7fd8>  // b.hs, b.nlast
   191b8:	mov	x0, xzr
   191bc:	ret
   191c0:	mov	x10, xzr
   191c4:	mov	w8, w1
   191c8:	neg	w9, w1
   191cc:	add	x11, x3, #0x1
   191d0:	b	191ec <lzma_mode_is_supported@@XZ_5.0+0x8004>
   191d4:	add	x0, x10, #0x4
   191d8:	add	x10, x10, #0x8
   191dc:	cmp	x10, x4
   191e0:	sub	w9, w9, #0x4
   191e4:	mov	x10, x0
   191e8:	b.hi	19264 <lzma_mode_is_supported@@XZ_5.0+0x807c>  // b.pmore
   191ec:	add	x12, x11, x10
   191f0:	ldurb	w15, [x12, #-1]
   191f4:	and	w13, w15, #0xfc
   191f8:	cmp	w13, #0x48
   191fc:	b.ne	191d4 <lzma_mode_is_supported@@XZ_5.0+0x7fec>  // b.any
   19200:	ldrb	w14, [x12, #2]
   19204:	and	w13, w14, #0x3
   19208:	cmp	w13, #0x1
   1920c:	b.ne	191d4 <lzma_mode_is_supported@@XZ_5.0+0x7fec>  // b.any
   19210:	add	x16, x11, x10
   19214:	ldrb	w17, [x16]
   19218:	ldrb	w18, [x16, #1]
   1921c:	bfi	w14, w15, #24, #8
   19220:	and	w14, w14, #0x3fffffc
   19224:	add	w15, w8, w10
   19228:	tst	w2, #0x1
   1922c:	orr	w14, w14, w17, lsl #16
   19230:	csel	w15, w15, w9, ne  // ne = any
   19234:	orr	w14, w14, w18, lsl #8
   19238:	mov	w17, #0x48                  	// #72
   1923c:	add	w14, w14, w15
   19240:	bfxil	w17, w14, #24, #2
   19244:	lsr	w15, w14, #16
   19248:	lsr	w18, w14, #8
   1924c:	orr	w13, w13, w14
   19250:	sturb	w17, [x12, #-1]
   19254:	strb	w15, [x16]
   19258:	strb	w18, [x16, #1]
   1925c:	strb	w13, [x12, #2]
   19260:	b	191d4 <lzma_mode_is_supported@@XZ_5.0+0x7fec>
   19264:	ret
   19268:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   1926c:	add	x3, x3, #0x2a0
   19270:	mov	w5, #0x10                  	// #16
   19274:	mov	w6, #0x10                  	// #16
   19278:	mov	w7, #0x1                   	// #1
   1927c:	mov	x4, xzr
   19280:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   19284:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   19288:	add	x3, x3, #0x2a0
   1928c:	mov	w5, #0x10                  	// #16
   19290:	mov	w6, #0x10                  	// #16
   19294:	mov	x4, xzr
   19298:	mov	w7, wzr
   1929c:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   192a0:	str	x25, [sp, #-64]!
   192a4:	cmp	x4, #0x10
   192a8:	stp	x24, x23, [sp, #16]
   192ac:	stp	x22, x21, [sp, #32]
   192b0:	stp	x20, x19, [sp, #48]
   192b4:	b.cs	192d0 <lzma_mode_is_supported@@XZ_5.0+0x80e8>  // b.hs, b.nlast
   192b8:	mov	x0, xzr
   192bc:	ldp	x20, x19, [sp, #48]
   192c0:	ldp	x22, x21, [sp, #32]
   192c4:	ldp	x24, x23, [sp, #16]
   192c8:	ldr	x25, [sp], #64
   192cc:	ret
   192d0:	adrp	x8, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xde18>
   192d4:	mov	x9, #0xe00                 	// #3584
   192d8:	mov	x11, #0x1fff                	// #8191
   192dc:	mov	x0, xzr
   192e0:	mov	w15, #0x10                  	// #16
   192e4:	add	x8, x8, #0xcb8
   192e8:	movk	x9, #0x1e0, lsl #32
   192ec:	mov	x10, #0xa000000000          	// #687194767360
   192f0:	movk	x11, #0xffee, lsl #32
   192f4:	mov	w12, #0xffffffff            	// #-1
   192f8:	b	19308 <lzma_mode_is_supported@@XZ_5.0+0x8120>
   192fc:	add	x15, x0, #0x10
   19300:	cmp	x15, x4
   19304:	b.hi	192bc <lzma_mode_is_supported@@XZ_5.0+0x80d4>  // b.pmore
   19308:	ldrb	w16, [x3, x0]
   1930c:	mov	x14, x0
   19310:	mov	x0, x15
   19314:	tst	w2, #0x1
   19318:	and	x15, x16, #0x1f
   1931c:	ldr	w15, [x8, x15, lsl #2]
   19320:	add	w16, w14, w1
   19324:	mov	x13, xzr
   19328:	cneg	w16, w16, eq  // eq = none
   1932c:	mov	w17, #0x5                   	// #5
   19330:	b	19344 <lzma_mode_is_supported@@XZ_5.0+0x815c>
   19334:	add	x13, x13, #0x1
   19338:	cmp	x13, #0x3
   1933c:	add	x17, x17, #0x29
   19340:	b.eq	192fc <lzma_mode_is_supported@@XZ_5.0+0x8114>  // b.none
   19344:	lsr	w18, w15, w13
   19348:	tbz	w18, #0, 19334 <lzma_mode_is_supported@@XZ_5.0+0x814c>
   1934c:	ubfx	x18, x17, #3, #29
   19350:	add	x5, x14, x18
   19354:	ldr	w7, [x3, x5]
   19358:	add	x18, x5, #0x4
   1935c:	add	x6, x5, #0x5
   19360:	ldrb	w19, [x3, x18]
   19364:	ldrb	w20, [x3, x6]
   19368:	mov	x21, x7
   1936c:	bfi	x21, x19, #32, #8
   19370:	bfi	x21, x20, #40, #8
   19374:	add	x19, x13, #0x5
   19378:	lsr	x20, x21, x19
   1937c:	and	x21, x20, x9
   19380:	cmp	x21, x10
   19384:	b.ne	19334 <lzma_mode_is_supported@@XZ_5.0+0x814c>  // b.any
   19388:	lsr	x25, x20, #16
   1938c:	ubfx	x24, x20, #13, #20
   19390:	and	w25, w25, #0x100000
   19394:	orr	w24, w24, w25
   19398:	add	w25, w13, #0x5
   1939c:	lsl	w25, w12, w25
   193a0:	mvn	w25, w25
   193a4:	add	w24, w16, w24, lsl #4
   193a8:	and	x20, x20, x11
   193ac:	and	x7, x7, x25
   193b0:	lsr	w25, w24, #4
   193b4:	ubfx	w24, w24, #4, #20
   193b8:	bfi	x20, x24, #13, #20
   193bc:	and	w24, w25, #0x100000
   193c0:	lsr	x24, x24, #20
   193c4:	bfi	x20, x24, #36, #1
   193c8:	lsl	x19, x20, x19
   193cc:	orr	x7, x19, x7
   193d0:	add	x21, x5, #0x1
   193d4:	add	x22, x5, #0x2
   193d8:	add	x23, x5, #0x3
   193dc:	lsr	x20, x19, #32
   193e0:	lsr	x19, x19, #40
   193e4:	strb	w7, [x3, x5]
   193e8:	lsr	x5, x7, #8
   193ec:	lsr	x24, x7, #16
   193f0:	lsr	x7, x7, #24
   193f4:	strb	w5, [x3, x21]
   193f8:	strb	w24, [x3, x22]
   193fc:	strb	w7, [x3, x23]
   19400:	strb	w20, [x3, x18]
   19404:	strb	w19, [x3, x6]
   19408:	b	19334 <lzma_mode_is_supported@@XZ_5.0+0x814c>
   1940c:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   19410:	add	x3, x3, #0x444
   19414:	mov	w5, #0x4                   	// #4
   19418:	mov	w6, #0x4                   	// #4
   1941c:	mov	w7, #0x1                   	// #1
   19420:	mov	x4, xzr
   19424:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   19428:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   1942c:	add	x3, x3, #0x444
   19430:	mov	w5, #0x4                   	// #4
   19434:	mov	w6, #0x4                   	// #4
   19438:	mov	x4, xzr
   1943c:	mov	w7, wzr
   19440:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   19444:	cmp	x4, #0x4
   19448:	b.cs	19454 <lzma_mode_is_supported@@XZ_5.0+0x826c>  // b.hs, b.nlast
   1944c:	mov	x0, xzr
   19450:	ret
   19454:	mov	w10, #0xfffffff8            	// #-8
   19458:	mov	x8, xzr
   1945c:	add	w9, w1, #0x8
   19460:	sub	w10, w10, w1
   19464:	add	x11, x3, #0x1
   19468:	b	19484 <lzma_mode_is_supported@@XZ_5.0+0x829c>
   1946c:	add	x0, x8, #0x4
   19470:	add	x8, x8, #0x8
   19474:	cmp	x8, x4
   19478:	sub	w10, w10, #0x4
   1947c:	mov	x8, x0
   19480:	b.hi	194d8 <lzma_mode_is_supported@@XZ_5.0+0x82f0>  // b.pmore
   19484:	add	x12, x11, x8
   19488:	ldrb	w13, [x12, #2]
   1948c:	cmp	w13, #0xeb
   19490:	b.ne	1946c <lzma_mode_is_supported@@XZ_5.0+0x8284>  // b.any
   19494:	ldrb	w13, [x12, #1]
   19498:	ldrb	w14, [x12]
   1949c:	ldurb	w15, [x12, #-1]
   194a0:	tst	w2, #0x1
   194a4:	lsl	w13, w13, #16
   194a8:	bfi	w13, w14, #8, #8
   194ac:	add	w14, w9, w8
   194b0:	csel	w14, w14, w10, ne  // ne = any
   194b4:	orr	w13, w13, w15
   194b8:	add	w13, w14, w13, lsl #2
   194bc:	lsr	w14, w13, #2
   194c0:	lsr	w15, w13, #18
   194c4:	lsr	w13, w13, #10
   194c8:	strb	w15, [x12, #1]
   194cc:	strb	w13, [x12]
   194d0:	sturb	w14, [x12, #-1]
   194d4:	b	1946c <lzma_mode_is_supported@@XZ_5.0+0x8284>
   194d8:	ret
   194dc:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   194e0:	add	x3, x3, #0x514
   194e4:	mov	w5, #0x4                   	// #4
   194e8:	mov	w6, #0x2                   	// #2
   194ec:	mov	w7, #0x1                   	// #1
   194f0:	mov	x4, xzr
   194f4:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   194f8:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   194fc:	add	x3, x3, #0x514
   19500:	mov	w5, #0x4                   	// #4
   19504:	mov	w6, #0x2                   	// #2
   19508:	mov	x4, xzr
   1950c:	mov	w7, wzr
   19510:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   19514:	cmp	x4, #0x4
   19518:	b.cs	19524 <lzma_mode_is_supported@@XZ_5.0+0x833c>  // b.hs, b.nlast
   1951c:	mov	x0, xzr
   19520:	ret
   19524:	mov	w8, #0x700                 	// #1792
   19528:	mov	x10, xzr
   1952c:	movk	w8, #0x38, lsl #16
   19530:	mov	w9, #0xfffffffc            	// #-4
   19534:	b	1954c <lzma_mode_is_supported@@XZ_5.0+0x8364>
   19538:	add	x0, x10, #0x2
   1953c:	add	x10, x10, #0x6
   19540:	cmp	x10, x4
   19544:	mov	x10, x0
   19548:	b.hi	195dc <lzma_mode_is_supported@@XZ_5.0+0x83f4>  // b.pmore
   1954c:	add	x11, x10, #0x1
   19550:	ldrb	w14, [x3, x11]
   19554:	and	w12, w14, #0xf8
   19558:	cmp	w12, #0xf0
   1955c:	b.ne	19538 <lzma_mode_is_supported@@XZ_5.0+0x8350>  // b.any
   19560:	add	x12, x10, #0x3
   19564:	ldrb	w13, [x3, x12]
   19568:	mvn	w15, w13
   1956c:	tst	w15, #0xf8
   19570:	b.ne	19538 <lzma_mode_is_supported@@XZ_5.0+0x8350>  // b.any
   19574:	lsl	w14, w14, #19
   19578:	ldrb	w15, [x3, x10]
   1957c:	add	x16, x10, #0x2
   19580:	bfi	w14, w13, #8, #8
   19584:	ldrb	w13, [x3, x16]
   19588:	add	w17, w10, w1
   1958c:	and	w14, w14, w8
   19590:	tst	w2, #0x1
   19594:	add	w18, w17, #0x4
   19598:	sub	w17, w9, w17
   1959c:	bfi	w14, w15, #11, #8
   195a0:	csel	w17, w18, w17, ne  // ne = any
   195a4:	orr	w13, w14, w13
   195a8:	mov	w14, #0xf0                  	// #240
   195ac:	add	w13, w17, w13, lsl #1
   195b0:	bfxil	w14, w13, #20, #3
   195b4:	lsr	w15, w13, #1
   195b8:	strb	w14, [x3, x11]
   195bc:	lsr	w11, w13, #12
   195c0:	lsr	w13, w13, #9
   195c4:	strb	w11, [x3, x10]
   195c8:	orr	w10, w13, #0xf8
   195cc:	strb	w10, [x3, x12]
   195d0:	mov	x10, x16
   195d4:	strb	w15, [x3, x16]
   195d8:	b	19538 <lzma_mode_is_supported@@XZ_5.0+0x8350>
   195dc:	ret
   195e0:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   195e4:	add	x3, x3, #0x618
   195e8:	mov	w5, #0x4                   	// #4
   195ec:	mov	w6, #0x4                   	// #4
   195f0:	mov	w7, #0x1                   	// #1
   195f4:	mov	x4, xzr
   195f8:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   195fc:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7e18>
   19600:	add	x3, x3, #0x618
   19604:	mov	w5, #0x4                   	// #4
   19608:	mov	w6, #0x4                   	// #4
   1960c:	mov	x4, xzr
   19610:	mov	w7, wzr
   19614:	b	189bc <lzma_mode_is_supported@@XZ_5.0+0x77d4>
   19618:	cmp	x4, #0x4
   1961c:	b.cs	19628 <lzma_mode_is_supported@@XZ_5.0+0x8440>  // b.hs, b.nlast
   19620:	mov	x0, xzr
   19624:	ret
   19628:	mov	x10, xzr
   1962c:	add	x8, x3, #0x1
   19630:	mov	w9, w1
   19634:	neg	w11, w1
   19638:	b	196b4 <lzma_mode_is_supported@@XZ_5.0+0x84cc>
   1963c:	lsl	w14, w14, #24
   19640:	add	x15, x8, x10
   19644:	bfi	w14, w13, #16, #8
   19648:	ldrb	w13, [x15, #1]
   1964c:	ldrb	w17, [x15, #2]
   19650:	add	w16, w9, w10
   19654:	tst	w2, #0x1
   19658:	bfi	w14, w13, #8, #8
   1965c:	csel	w16, w16, w11, ne  // ne = any
   19660:	orr	w13, w14, w17
   19664:	add	w13, w16, w13, lsl #2
   19668:	lsr	w14, w13, #2
   1966c:	and	w16, w14, #0x400000
   19670:	and	w17, w14, #0x3f0000
   19674:	mov	w18, #0x40                  	// #64
   19678:	sub	w17, w17, w16
   1967c:	neg	w16, w16
   19680:	lsr	w13, w13, #10
   19684:	bfxil	w18, w16, #24, #6
   19688:	lsr	w16, w17, #16
   1968c:	strb	w18, [x3, x10]
   19690:	strb	w16, [x3, x12]
   19694:	strb	w13, [x15, #1]
   19698:	strb	w14, [x15, #2]
   1969c:	add	x0, x10, #0x4
   196a0:	add	x10, x10, #0x8
   196a4:	cmp	x10, x4
   196a8:	sub	w11, w11, #0x4
   196ac:	mov	x10, x0
   196b0:	b.hi	196f4 <lzma_mode_is_supported@@XZ_5.0+0x850c>  // b.pmore
   196b4:	add	x12, x8, x10
   196b8:	ldurb	w14, [x12, #-1]
   196bc:	cmp	w14, #0x7f
   196c0:	b.eq	196e0 <lzma_mode_is_supported@@XZ_5.0+0x84f8>  // b.none
   196c4:	cmp	w14, #0x40
   196c8:	b.ne	1969c <lzma_mode_is_supported@@XZ_5.0+0x84b4>  // b.any
   196cc:	ldrb	w13, [x8, x10]
   196d0:	cmp	w13, #0x40
   196d4:	b.cs	1969c <lzma_mode_is_supported@@XZ_5.0+0x84b4>  // b.hs, b.nlast
   196d8:	orr	x12, x10, #0x1
   196dc:	b	1963c <lzma_mode_is_supported@@XZ_5.0+0x8454>
   196e0:	ldrb	w13, [x8, x10]
   196e4:	cmp	w13, #0xc0
   196e8:	b.cc	1969c <lzma_mode_is_supported@@XZ_5.0+0x84b4>  // b.lo, b.ul, b.last
   196ec:	add	x12, x10, #0x1
   196f0:	b	1963c <lzma_mode_is_supported@@XZ_5.0+0x8454>
   196f4:	ret

Disassembly of section .fini:

00000000000196f8 <.fini>:
   196f8:	stp	x29, x30, [sp, #-16]!
   196fc:	mov	x29, sp
   19700:	ldp	x29, x30, [sp], #16
   19704:	ret
