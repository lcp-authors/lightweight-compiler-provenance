In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libe2p.a_clang_-O3:

feature.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_feature2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	adrp	x19, 0 <e2p_feature2string>
   c:	adrp	x8, 0 <e2p_feature2string>
  10:	add	x19, x19, #0x0
  14:	add	x8, x8, #0x0
  18:	mov	x29, sp
  1c:	b	2c <e2p_feature2string+0x2c>
  20:	ldur	x19, [x8, #20]
  24:	add	x8, x8, #0x10
  28:	cbz	x19, 54 <e2p_feature2string+0x54>
  2c:	ldur	w9, [x8, #-4]
  30:	cmp	w9, w0
  34:	b.ne	20 <e2p_feature2string+0x20>  // b.any
  38:	ldr	w9, [x8]
  3c:	cmp	w9, w1
  40:	b.ne	20 <e2p_feature2string+0x20>  // b.any
  44:	mov	x0, x19
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	cmp	w0, #0x2
  58:	b.hi	6c <e2p_feature2string+0x6c>  // b.pmore
  5c:	adrp	x8, 0 <e2p_feature2string>
  60:	add	x8, x8, #0x0
  64:	ldr	w2, [x8, w0, sxtw #2]
  68:	b	70 <e2p_feature2string+0x70>
  6c:	mov	w2, #0x3f                  	// #63
  70:	lsr	w8, w1, #1
  74:	adrp	x19, 0 <e2p_feature2string>
  78:	clz	w8, w8
  7c:	mov	w9, #0x20                  	// #32
  80:	add	x19, x19, #0x0
  84:	adrp	x1, 0 <e2p_feature2string>
  88:	sub	w3, w9, w8
  8c:	add	x1, x1, #0x0
  90:	mov	x0, x19
  94:	bl	0 <sprintf>
  98:	mov	x0, x19
  9c:	ldr	x19, [sp, #16]
  a0:	ldp	x29, x30, [sp], #32
  a4:	ret

00000000000000a8 <e2p_string2feature>:
  a8:	stp	x29, x30, [sp, #-48]!
  ac:	stp	x20, x19, [sp, #32]
  b0:	mov	x20, x1
  b4:	adrp	x1, 0 <e2p_feature2string>
  b8:	add	x1, x1, #0x0
  bc:	str	x21, [sp, #16]
  c0:	mov	x29, sp
  c4:	mov	x19, x2
  c8:	mov	x21, x0
  cc:	bl	0 <strcasecmp>
  d0:	cbz	w0, 448 <e2p_string2feature+0x3a0>
  d4:	adrp	x1, 0 <e2p_feature2string>
  d8:	add	x1, x1, #0x0
  dc:	mov	x0, x21
  e0:	bl	0 <strcasecmp>
  e4:	cbz	w0, 454 <e2p_string2feature+0x3ac>
  e8:	adrp	x1, 0 <e2p_feature2string>
  ec:	add	x1, x1, #0x0
  f0:	mov	x0, x21
  f4:	bl	0 <strcasecmp>
  f8:	cbz	w0, 460 <e2p_string2feature+0x3b8>
  fc:	adrp	x1, 0 <e2p_feature2string>
 100:	add	x1, x1, #0x0
 104:	mov	x0, x21
 108:	bl	0 <strcasecmp>
 10c:	cbz	w0, 46c <e2p_string2feature+0x3c4>
 110:	adrp	x1, 0 <e2p_feature2string>
 114:	add	x1, x1, #0x0
 118:	mov	x0, x21
 11c:	bl	0 <strcasecmp>
 120:	cbz	w0, 478 <e2p_string2feature+0x3d0>
 124:	adrp	x1, 0 <e2p_feature2string>
 128:	add	x1, x1, #0x0
 12c:	mov	x0, x21
 130:	bl	0 <strcasecmp>
 134:	cbz	w0, 484 <e2p_string2feature+0x3dc>
 138:	adrp	x1, 0 <e2p_feature2string>
 13c:	add	x1, x1, #0x0
 140:	mov	x0, x21
 144:	bl	0 <strcasecmp>
 148:	cbz	w0, 490 <e2p_string2feature+0x3e8>
 14c:	adrp	x1, 0 <e2p_feature2string>
 150:	add	x1, x1, #0x0
 154:	mov	x0, x21
 158:	bl	0 <strcasecmp>
 15c:	cbz	w0, 49c <e2p_string2feature+0x3f4>
 160:	adrp	x1, 0 <e2p_feature2string>
 164:	add	x1, x1, #0x0
 168:	mov	x0, x21
 16c:	bl	0 <strcasecmp>
 170:	cbz	w0, 4a8 <e2p_string2feature+0x400>
 174:	adrp	x1, 0 <e2p_feature2string>
 178:	add	x1, x1, #0x0
 17c:	mov	x0, x21
 180:	bl	0 <strcasecmp>
 184:	cbz	w0, 4b4 <e2p_string2feature+0x40c>
 188:	adrp	x1, 0 <e2p_feature2string>
 18c:	add	x1, x1, #0x0
 190:	mov	x0, x21
 194:	bl	0 <strcasecmp>
 198:	cbz	w0, 4c0 <e2p_string2feature+0x418>
 19c:	adrp	x1, 0 <e2p_feature2string>
 1a0:	add	x1, x1, #0x0
 1a4:	mov	x0, x21
 1a8:	bl	0 <strcasecmp>
 1ac:	cbz	w0, 4cc <e2p_string2feature+0x424>
 1b0:	adrp	x1, 0 <e2p_feature2string>
 1b4:	add	x1, x1, #0x0
 1b8:	mov	x0, x21
 1bc:	bl	0 <strcasecmp>
 1c0:	cbz	w0, 4d8 <e2p_string2feature+0x430>
 1c4:	adrp	x1, 0 <e2p_feature2string>
 1c8:	add	x1, x1, #0x0
 1cc:	mov	x0, x21
 1d0:	bl	0 <strcasecmp>
 1d4:	cbz	w0, 4e4 <e2p_string2feature+0x43c>
 1d8:	adrp	x1, 0 <e2p_feature2string>
 1dc:	add	x1, x1, #0x0
 1e0:	mov	x0, x21
 1e4:	bl	0 <strcasecmp>
 1e8:	cbz	w0, 4f0 <e2p_string2feature+0x448>
 1ec:	adrp	x1, 0 <e2p_feature2string>
 1f0:	add	x1, x1, #0x0
 1f4:	mov	x0, x21
 1f8:	bl	0 <strcasecmp>
 1fc:	cbz	w0, 4fc <e2p_string2feature+0x454>
 200:	adrp	x1, 0 <e2p_feature2string>
 204:	add	x1, x1, #0x0
 208:	mov	x0, x21
 20c:	bl	0 <strcasecmp>
 210:	cbz	w0, 508 <e2p_string2feature+0x460>
 214:	adrp	x1, 0 <e2p_feature2string>
 218:	add	x1, x1, #0x0
 21c:	mov	x0, x21
 220:	bl	0 <strcasecmp>
 224:	cbz	w0, 514 <e2p_string2feature+0x46c>
 228:	adrp	x1, 0 <e2p_feature2string>
 22c:	add	x1, x1, #0x0
 230:	mov	x0, x21
 234:	bl	0 <strcasecmp>
 238:	cbz	w0, 520 <e2p_string2feature+0x478>
 23c:	adrp	x1, 0 <e2p_feature2string>
 240:	add	x1, x1, #0x0
 244:	mov	x0, x21
 248:	bl	0 <strcasecmp>
 24c:	cbz	w0, 52c <e2p_string2feature+0x484>
 250:	adrp	x1, 0 <e2p_feature2string>
 254:	add	x1, x1, #0x0
 258:	mov	x0, x21
 25c:	bl	0 <strcasecmp>
 260:	cbz	w0, 538 <e2p_string2feature+0x490>
 264:	adrp	x1, 0 <e2p_feature2string>
 268:	add	x1, x1, #0x0
 26c:	mov	x0, x21
 270:	bl	0 <strcasecmp>
 274:	cbz	w0, 544 <e2p_string2feature+0x49c>
 278:	adrp	x1, 0 <e2p_feature2string>
 27c:	add	x1, x1, #0x0
 280:	mov	x0, x21
 284:	bl	0 <strcasecmp>
 288:	cbz	w0, 550 <e2p_string2feature+0x4a8>
 28c:	adrp	x1, 0 <e2p_feature2string>
 290:	add	x1, x1, #0x0
 294:	mov	x0, x21
 298:	bl	0 <strcasecmp>
 29c:	cbz	w0, 55c <e2p_string2feature+0x4b4>
 2a0:	adrp	x1, 0 <e2p_feature2string>
 2a4:	add	x1, x1, #0x0
 2a8:	mov	x0, x21
 2ac:	bl	0 <strcasecmp>
 2b0:	cbz	w0, 568 <e2p_string2feature+0x4c0>
 2b4:	adrp	x1, 0 <e2p_feature2string>
 2b8:	add	x1, x1, #0x0
 2bc:	mov	x0, x21
 2c0:	bl	0 <strcasecmp>
 2c4:	cbz	w0, 574 <e2p_string2feature+0x4cc>
 2c8:	adrp	x1, 0 <e2p_feature2string>
 2cc:	add	x1, x1, #0x0
 2d0:	mov	x0, x21
 2d4:	bl	0 <strcasecmp>
 2d8:	cbz	w0, 580 <e2p_string2feature+0x4d8>
 2dc:	adrp	x1, 0 <e2p_feature2string>
 2e0:	add	x1, x1, #0x0
 2e4:	mov	x0, x21
 2e8:	bl	0 <strcasecmp>
 2ec:	cbz	w0, 58c <e2p_string2feature+0x4e4>
 2f0:	adrp	x1, 0 <e2p_feature2string>
 2f4:	add	x1, x1, #0x0
 2f8:	mov	x0, x21
 2fc:	bl	0 <strcasecmp>
 300:	cbz	w0, 598 <e2p_string2feature+0x4f0>
 304:	adrp	x1, 0 <e2p_feature2string>
 308:	add	x1, x1, #0x0
 30c:	mov	x0, x21
 310:	bl	0 <strcasecmp>
 314:	cbz	w0, 5a4 <e2p_string2feature+0x4fc>
 318:	adrp	x1, 0 <e2p_feature2string>
 31c:	add	x1, x1, #0x0
 320:	mov	x0, x21
 324:	bl	0 <strcasecmp>
 328:	cbz	w0, 5b0 <e2p_string2feature+0x508>
 32c:	adrp	x1, 0 <e2p_feature2string>
 330:	add	x1, x1, #0x0
 334:	mov	x0, x21
 338:	bl	0 <strcasecmp>
 33c:	cbz	w0, 5bc <e2p_string2feature+0x514>
 340:	adrp	x1, 0 <e2p_feature2string>
 344:	add	x1, x1, #0x0
 348:	mov	x0, x21
 34c:	bl	0 <strcasecmp>
 350:	cbz	w0, 5c8 <e2p_string2feature+0x520>
 354:	adrp	x1, 0 <e2p_feature2string>
 358:	add	x1, x1, #0x0
 35c:	mov	x0, x21
 360:	bl	0 <strcasecmp>
 364:	cbz	w0, 5d4 <e2p_string2feature+0x52c>
 368:	adrp	x1, 0 <e2p_feature2string>
 36c:	add	x1, x1, #0x0
 370:	mov	x0, x21
 374:	bl	0 <strcasecmp>
 378:	cbz	w0, 5e0 <e2p_string2feature+0x538>
 37c:	adrp	x1, 0 <e2p_feature2string>
 380:	add	x1, x1, #0x0
 384:	mov	x0, x21
 388:	bl	0 <strcasecmp>
 38c:	cbz	w0, 5ec <e2p_string2feature+0x544>
 390:	adrp	x1, 0 <e2p_feature2string>
 394:	add	x1, x1, #0x0
 398:	mov	x0, x21
 39c:	bl	0 <strcasecmp>
 3a0:	cbz	w0, 5f8 <e2p_string2feature+0x550>
 3a4:	adrp	x1, 0 <e2p_feature2string>
 3a8:	add	x1, x1, #0x0
 3ac:	mov	x0, x21
 3b0:	bl	0 <strcasecmp>
 3b4:	cbz	w0, 604 <e2p_string2feature+0x55c>
 3b8:	adrp	x1, 0 <e2p_feature2string>
 3bc:	add	x1, x1, #0x0
 3c0:	mov	x0, x21
 3c4:	bl	0 <strcasecmp>
 3c8:	cbz	w0, 610 <e2p_string2feature+0x568>
 3cc:	adrp	x1, 0 <e2p_feature2string>
 3d0:	add	x1, x1, #0x0
 3d4:	mov	x0, x21
 3d8:	bl	0 <strcasecmp>
 3dc:	cbz	w0, 61c <e2p_string2feature+0x574>
 3e0:	adrp	x1, 0 <e2p_feature2string>
 3e4:	add	x1, x1, #0x0
 3e8:	mov	x0, x21
 3ec:	bl	0 <strcasecmp>
 3f0:	cbz	w0, 628 <e2p_string2feature+0x580>
 3f4:	adrp	x1, 0 <e2p_feature2string>
 3f8:	add	x1, x1, #0x0
 3fc:	mov	x0, x21
 400:	bl	0 <strcasecmp>
 404:	cbz	w0, 634 <e2p_string2feature+0x58c>
 408:	adrp	x1, 0 <e2p_feature2string>
 40c:	add	x1, x1, #0x0
 410:	mov	x0, x21
 414:	bl	0 <strcasecmp>
 418:	cbz	w0, 640 <e2p_string2feature+0x598>
 41c:	adrp	x1, 0 <e2p_feature2string>
 420:	add	x1, x1, #0x0
 424:	mov	w2, #0x8                   	// #8
 428:	mov	x0, x21
 42c:	bl	0 <strncasecmp>
 430:	cbz	w0, 66c <e2p_string2feature+0x5c4>
 434:	mov	w0, #0x1                   	// #1
 438:	ldp	x20, x19, [sp, #32]
 43c:	ldr	x21, [sp, #16]
 440:	ldp	x29, x30, [sp], #48
 444:	ret
 448:	adrp	x8, 0 <e2p_feature2string>
 44c:	add	x8, x8, #0x0
 450:	b	648 <e2p_string2feature+0x5a0>
 454:	adrp	x8, 0 <e2p_feature2string>
 458:	add	x8, x8, #0x0
 45c:	b	648 <e2p_string2feature+0x5a0>
 460:	adrp	x8, 0 <e2p_feature2string>
 464:	add	x8, x8, #0x0
 468:	b	648 <e2p_string2feature+0x5a0>
 46c:	adrp	x8, 0 <e2p_feature2string>
 470:	add	x8, x8, #0x0
 474:	b	648 <e2p_string2feature+0x5a0>
 478:	adrp	x8, 0 <e2p_feature2string>
 47c:	add	x8, x8, #0x0
 480:	b	648 <e2p_string2feature+0x5a0>
 484:	adrp	x8, 0 <e2p_feature2string>
 488:	add	x8, x8, #0x0
 48c:	b	648 <e2p_string2feature+0x5a0>
 490:	adrp	x8, 0 <e2p_feature2string>
 494:	add	x8, x8, #0x0
 498:	b	648 <e2p_string2feature+0x5a0>
 49c:	adrp	x8, 0 <e2p_feature2string>
 4a0:	add	x8, x8, #0x0
 4a4:	b	648 <e2p_string2feature+0x5a0>
 4a8:	adrp	x8, 0 <e2p_feature2string>
 4ac:	add	x8, x8, #0x0
 4b0:	b	648 <e2p_string2feature+0x5a0>
 4b4:	adrp	x8, 0 <e2p_feature2string>
 4b8:	add	x8, x8, #0x0
 4bc:	b	648 <e2p_string2feature+0x5a0>
 4c0:	adrp	x8, 0 <e2p_feature2string>
 4c4:	add	x8, x8, #0x0
 4c8:	b	648 <e2p_string2feature+0x5a0>
 4cc:	adrp	x8, 0 <e2p_feature2string>
 4d0:	add	x8, x8, #0x0
 4d4:	b	648 <e2p_string2feature+0x5a0>
 4d8:	adrp	x8, 0 <e2p_feature2string>
 4dc:	add	x8, x8, #0x0
 4e0:	b	648 <e2p_string2feature+0x5a0>
 4e4:	adrp	x8, 0 <e2p_feature2string>
 4e8:	add	x8, x8, #0x0
 4ec:	b	648 <e2p_string2feature+0x5a0>
 4f0:	adrp	x8, 0 <e2p_feature2string>
 4f4:	add	x8, x8, #0x0
 4f8:	b	648 <e2p_string2feature+0x5a0>
 4fc:	adrp	x8, 0 <e2p_feature2string>
 500:	add	x8, x8, #0x0
 504:	b	648 <e2p_string2feature+0x5a0>
 508:	adrp	x8, 0 <e2p_feature2string>
 50c:	add	x8, x8, #0x0
 510:	b	648 <e2p_string2feature+0x5a0>
 514:	adrp	x8, 0 <e2p_feature2string>
 518:	add	x8, x8, #0x0
 51c:	b	648 <e2p_string2feature+0x5a0>
 520:	adrp	x8, 0 <e2p_feature2string>
 524:	add	x8, x8, #0x0
 528:	b	648 <e2p_string2feature+0x5a0>
 52c:	adrp	x8, 0 <e2p_feature2string>
 530:	add	x8, x8, #0x0
 534:	b	648 <e2p_string2feature+0x5a0>
 538:	adrp	x8, 0 <e2p_feature2string>
 53c:	add	x8, x8, #0x0
 540:	b	648 <e2p_string2feature+0x5a0>
 544:	adrp	x8, 0 <e2p_feature2string>
 548:	add	x8, x8, #0x0
 54c:	b	648 <e2p_string2feature+0x5a0>
 550:	adrp	x8, 0 <e2p_feature2string>
 554:	add	x8, x8, #0x0
 558:	b	648 <e2p_string2feature+0x5a0>
 55c:	adrp	x8, 0 <e2p_feature2string>
 560:	add	x8, x8, #0x0
 564:	b	648 <e2p_string2feature+0x5a0>
 568:	adrp	x8, 0 <e2p_feature2string>
 56c:	add	x8, x8, #0x0
 570:	b	648 <e2p_string2feature+0x5a0>
 574:	adrp	x8, 0 <e2p_feature2string>
 578:	add	x8, x8, #0x0
 57c:	b	648 <e2p_string2feature+0x5a0>
 580:	adrp	x8, 0 <e2p_feature2string>
 584:	add	x8, x8, #0x0
 588:	b	648 <e2p_string2feature+0x5a0>
 58c:	adrp	x8, 0 <e2p_feature2string>
 590:	add	x8, x8, #0x0
 594:	b	648 <e2p_string2feature+0x5a0>
 598:	adrp	x8, 0 <e2p_feature2string>
 59c:	add	x8, x8, #0x0
 5a0:	b	648 <e2p_string2feature+0x5a0>
 5a4:	adrp	x8, 0 <e2p_feature2string>
 5a8:	add	x8, x8, #0x0
 5ac:	b	648 <e2p_string2feature+0x5a0>
 5b0:	adrp	x8, 0 <e2p_feature2string>
 5b4:	add	x8, x8, #0x0
 5b8:	b	648 <e2p_string2feature+0x5a0>
 5bc:	adrp	x8, 0 <e2p_feature2string>
 5c0:	add	x8, x8, #0x0
 5c4:	b	648 <e2p_string2feature+0x5a0>
 5c8:	adrp	x8, 0 <e2p_feature2string>
 5cc:	add	x8, x8, #0x0
 5d0:	b	648 <e2p_string2feature+0x5a0>
 5d4:	adrp	x8, 0 <e2p_feature2string>
 5d8:	add	x8, x8, #0x0
 5dc:	b	648 <e2p_string2feature+0x5a0>
 5e0:	adrp	x8, 0 <e2p_feature2string>
 5e4:	add	x8, x8, #0x0
 5e8:	b	648 <e2p_string2feature+0x5a0>
 5ec:	adrp	x8, 0 <e2p_feature2string>
 5f0:	add	x8, x8, #0x0
 5f4:	b	648 <e2p_string2feature+0x5a0>
 5f8:	adrp	x8, 0 <e2p_feature2string>
 5fc:	add	x8, x8, #0x0
 600:	b	648 <e2p_string2feature+0x5a0>
 604:	adrp	x8, 0 <e2p_feature2string>
 608:	add	x8, x8, #0x0
 60c:	b	648 <e2p_string2feature+0x5a0>
 610:	adrp	x8, 0 <e2p_feature2string>
 614:	add	x8, x8, #0x0
 618:	b	648 <e2p_string2feature+0x5a0>
 61c:	adrp	x8, 0 <e2p_feature2string>
 620:	add	x8, x8, #0x0
 624:	b	648 <e2p_string2feature+0x5a0>
 628:	adrp	x8, 0 <e2p_feature2string>
 62c:	add	x8, x8, #0x0
 630:	b	648 <e2p_string2feature+0x5a0>
 634:	adrp	x8, 0 <e2p_feature2string>
 638:	add	x8, x8, #0x0
 63c:	b	648 <e2p_string2feature+0x5a0>
 640:	adrp	x8, 0 <e2p_feature2string>
 644:	add	x8, x8, #0x0
 648:	ldr	w9, [x8]
 64c:	mov	w0, wzr
 650:	str	w9, [x20]
 654:	ldr	w8, [x8, #4]
 658:	str	w8, [x19]
 65c:	ldp	x20, x19, [sp, #32]
 660:	ldr	x21, [sp, #16]
 664:	ldp	x29, x30, [sp], #48
 668:	ret
 66c:	ldrb	w8, [x21, #8]
 670:	mov	w0, #0x1                   	// #1
 674:	sub	w8, w8, #0x43
 678:	cmp	w8, #0x2f
 67c:	b.hi	65c <e2p_string2feature+0x5b4>  // b.pmore
 680:	mov	w9, #0x1                   	// #1
 684:	lsl	x9, x9, x8
 688:	tst	x9, #0x100000001
 68c:	b.ne	6b8 <e2p_string2feature+0x610>  // b.any
 690:	mov	w9, #0x1                   	// #1
 694:	lsl	x9, x9, x8
 698:	tst	x9, #0x4000000040
 69c:	b.ne	6c0 <e2p_string2feature+0x618>  // b.any
 6a0:	mov	w9, #0x1                   	// #1
 6a4:	lsl	x8, x9, x8
 6a8:	tst	x8, #0x800000008000
 6ac:	b.eq	65c <e2p_string2feature+0x5b4>  // b.none
 6b0:	mov	w8, #0x2                   	// #2
 6b4:	b	6c4 <e2p_string2feature+0x61c>
 6b8:	mov	w8, wzr
 6bc:	b	6c4 <e2p_string2feature+0x61c>
 6c0:	mov	w8, #0x1                   	// #1
 6c4:	str	w8, [x20]
 6c8:	ldrb	w8, [x21, #9]!
 6cc:	cbz	w8, 434 <e2p_string2feature+0x38c>
 6d0:	add	x1, x29, #0x18
 6d4:	mov	w2, #0xa                   	// #10
 6d8:	mov	x0, x21
 6dc:	bl	0 <strtol>
 6e0:	mov	x8, x0
 6e4:	cmp	w8, #0x1f
 6e8:	b.hi	434 <e2p_string2feature+0x38c>  // b.pmore
 6ec:	ldr	x9, [x29, #24]
 6f0:	mov	w0, #0x1                   	// #1
 6f4:	ldrb	w9, [x9]
 6f8:	cbnz	w9, 65c <e2p_string2feature+0x5b4>
 6fc:	lsl	w8, w0, w8
 700:	mov	w0, wzr
 704:	b	658 <e2p_string2feature+0x5b0>

0000000000000708 <e2p_jrnl_feature2string>:
 708:	stp	x29, x30, [sp, #-32]!
 70c:	cmp	w0, #0x2
 710:	str	x19, [sp, #16]
 714:	mov	x29, sp
 718:	b.eq	748 <e2p_jrnl_feature2string+0x40>  // b.none
 71c:	cmp	w0, #0x1
 720:	b.eq	750 <e2p_jrnl_feature2string+0x48>  // b.none
 724:	cbnz	w0, 798 <e2p_jrnl_feature2string+0x90>
 728:	cmp	w1, #0x1
 72c:	b.ne	7a0 <e2p_jrnl_feature2string+0x98>  // b.any
 730:	adrp	x19, 0 <e2p_feature2string>
 734:	add	x19, x19, #0x0
 738:	mov	x0, x19
 73c:	ldr	x19, [sp, #16]
 740:	ldp	x29, x30, [sp], #32
 744:	ret
 748:	mov	w2, #0x52                  	// #82
 74c:	b	7a4 <e2p_jrnl_feature2string+0x9c>
 750:	sub	w8, w1, #0x1
 754:	cmp	w8, #0xf
 758:	mov	w2, #0x49                  	// #73
 75c:	b.hi	7a4 <e2p_jrnl_feature2string+0x9c>  // b.pmore
 760:	adrp	x9, 0 <e2p_feature2string>
 764:	add	x9, x9, #0x0
 768:	adr	x10, 738 <e2p_jrnl_feature2string+0x30>
 76c:	ldrb	w11, [x9, x8]
 770:	add	x10, x10, x11, lsl #2
 774:	adrp	x19, 0 <e2p_feature2string>
 778:	add	x19, x19, #0x0
 77c:	br	x10
 780:	adrp	x19, 0 <e2p_feature2string>
 784:	add	x19, x19, #0x0
 788:	mov	x0, x19
 78c:	ldr	x19, [sp, #16]
 790:	ldp	x29, x30, [sp], #32
 794:	ret
 798:	mov	w2, #0x3f                  	// #63
 79c:	b	7a4 <e2p_jrnl_feature2string+0x9c>
 7a0:	mov	w2, #0x43                  	// #67
 7a4:	lsr	w8, w1, #1
 7a8:	adrp	x19, 0 <e2p_feature2string>
 7ac:	clz	w8, w8
 7b0:	mov	w9, #0x20                  	// #32
 7b4:	add	x19, x19, #0x0
 7b8:	adrp	x1, 0 <e2p_feature2string>
 7bc:	sub	w3, w9, w8
 7c0:	add	x1, x1, #0x0
 7c4:	mov	x0, x19
 7c8:	bl	0 <sprintf>
 7cc:	mov	x0, x19
 7d0:	ldr	x19, [sp, #16]
 7d4:	ldp	x29, x30, [sp], #32
 7d8:	ret
 7dc:	adrp	x19, 0 <e2p_feature2string>
 7e0:	add	x19, x19, #0x0
 7e4:	mov	x0, x19
 7e8:	ldr	x19, [sp, #16]
 7ec:	ldp	x29, x30, [sp], #32
 7f0:	ret
 7f4:	adrp	x19, 0 <e2p_feature2string>
 7f8:	add	x19, x19, #0x0
 7fc:	mov	x0, x19
 800:	ldr	x19, [sp, #16]
 804:	ldp	x29, x30, [sp], #32
 808:	ret
 80c:	adrp	x19, 0 <e2p_feature2string>
 810:	add	x19, x19, #0x0
 814:	mov	x0, x19
 818:	ldr	x19, [sp, #16]
 81c:	ldp	x29, x30, [sp], #32
 820:	ret

0000000000000824 <e2p_jrnl_string2feature>:
 824:	stp	x29, x30, [sp, #-48]!
 828:	stp	x20, x19, [sp, #32]
 82c:	mov	x20, x1
 830:	adrp	x1, 0 <e2p_feature2string>
 834:	add	x1, x1, #0x0
 838:	str	x21, [sp, #16]
 83c:	mov	x29, sp
 840:	mov	x19, x2
 844:	mov	x21, x0
 848:	bl	0 <strcasecmp>
 84c:	cbz	w0, 8e0 <e2p_jrnl_string2feature+0xbc>
 850:	adrp	x1, 0 <e2p_feature2string>
 854:	add	x1, x1, #0x0
 858:	mov	x0, x21
 85c:	bl	0 <strcasecmp>
 860:	cbz	w0, 8ec <e2p_jrnl_string2feature+0xc8>
 864:	adrp	x1, 0 <e2p_feature2string>
 868:	add	x1, x1, #0x0
 86c:	mov	x0, x21
 870:	bl	0 <strcasecmp>
 874:	cbz	w0, 8f8 <e2p_jrnl_string2feature+0xd4>
 878:	adrp	x1, 0 <e2p_feature2string>
 87c:	add	x1, x1, #0x0
 880:	mov	x0, x21
 884:	bl	0 <strcasecmp>
 888:	cbz	w0, 904 <e2p_jrnl_string2feature+0xe0>
 88c:	adrp	x1, 0 <e2p_feature2string>
 890:	add	x1, x1, #0x0
 894:	mov	x0, x21
 898:	bl	0 <strcasecmp>
 89c:	cbz	w0, 910 <e2p_jrnl_string2feature+0xec>
 8a0:	adrp	x1, 0 <e2p_feature2string>
 8a4:	add	x1, x1, #0x0
 8a8:	mov	x0, x21
 8ac:	bl	0 <strcasecmp>
 8b0:	cbz	w0, 91c <e2p_jrnl_string2feature+0xf8>
 8b4:	adrp	x1, 0 <e2p_feature2string>
 8b8:	add	x1, x1, #0x0
 8bc:	mov	w2, #0x8                   	// #8
 8c0:	mov	x0, x21
 8c4:	bl	0 <strncasecmp>
 8c8:	cbz	w0, 948 <e2p_jrnl_string2feature+0x124>
 8cc:	mov	w0, #0x1                   	// #1
 8d0:	ldp	x20, x19, [sp, #32]
 8d4:	ldr	x21, [sp, #16]
 8d8:	ldp	x29, x30, [sp], #48
 8dc:	ret
 8e0:	adrp	x8, 0 <e2p_feature2string>
 8e4:	add	x8, x8, #0x0
 8e8:	b	924 <e2p_jrnl_string2feature+0x100>
 8ec:	adrp	x8, 0 <e2p_feature2string>
 8f0:	add	x8, x8, #0x0
 8f4:	b	924 <e2p_jrnl_string2feature+0x100>
 8f8:	adrp	x8, 0 <e2p_feature2string>
 8fc:	add	x8, x8, #0x0
 900:	b	924 <e2p_jrnl_string2feature+0x100>
 904:	adrp	x8, 0 <e2p_feature2string>
 908:	add	x8, x8, #0x0
 90c:	b	924 <e2p_jrnl_string2feature+0x100>
 910:	adrp	x8, 0 <e2p_feature2string>
 914:	add	x8, x8, #0x0
 918:	b	924 <e2p_jrnl_string2feature+0x100>
 91c:	adrp	x8, 0 <e2p_feature2string>
 920:	add	x8, x8, #0x0
 924:	ldr	w9, [x8]
 928:	mov	w0, wzr
 92c:	str	w9, [x20]
 930:	ldr	w8, [x8, #4]
 934:	str	w8, [x19]
 938:	ldp	x20, x19, [sp, #32]
 93c:	ldr	x21, [sp, #16]
 940:	ldp	x29, x30, [sp], #48
 944:	ret
 948:	ldrb	w8, [x21, #8]
 94c:	mov	w0, #0x1                   	// #1
 950:	sub	w8, w8, #0x43
 954:	cmp	w8, #0x2f
 958:	b.hi	8d0 <e2p_jrnl_string2feature+0xac>  // b.pmore
 95c:	mov	w9, #0x1                   	// #1
 960:	lsl	x9, x9, x8
 964:	tst	x9, #0x100000001
 968:	b.ne	994 <e2p_jrnl_string2feature+0x170>  // b.any
 96c:	mov	w9, #0x1                   	// #1
 970:	lsl	x9, x9, x8
 974:	tst	x9, #0x4000000040
 978:	b.ne	99c <e2p_jrnl_string2feature+0x178>  // b.any
 97c:	mov	w9, #0x1                   	// #1
 980:	lsl	x8, x9, x8
 984:	tst	x8, #0x800000008000
 988:	b.eq	8d0 <e2p_jrnl_string2feature+0xac>  // b.none
 98c:	mov	w8, #0x2                   	// #2
 990:	b	9a0 <e2p_jrnl_string2feature+0x17c>
 994:	mov	w8, wzr
 998:	b	9a0 <e2p_jrnl_string2feature+0x17c>
 99c:	mov	w8, #0x1                   	// #1
 9a0:	str	w8, [x20]
 9a4:	ldrb	w8, [x21, #9]!
 9a8:	cbz	w8, 9c8 <e2p_jrnl_string2feature+0x1a4>
 9ac:	add	x1, x29, #0x18
 9b0:	mov	w2, #0xa                   	// #10
 9b4:	mov	x0, x21
 9b8:	bl	0 <strtol>
 9bc:	mov	x8, x0
 9c0:	cmp	w8, #0x1f
 9c4:	b.ls	9dc <e2p_jrnl_string2feature+0x1b8>  // b.plast
 9c8:	mov	w0, #0x1                   	// #1
 9cc:	ldp	x20, x19, [sp, #32]
 9d0:	ldr	x21, [sp, #16]
 9d4:	ldp	x29, x30, [sp], #48
 9d8:	ret
 9dc:	ldr	x9, [x29, #24]
 9e0:	mov	w0, #0x1                   	// #1
 9e4:	ldrb	w9, [x9]
 9e8:	cbnz	w9, 8d0 <e2p_jrnl_string2feature+0xac>
 9ec:	lsl	w8, w0, w8
 9f0:	mov	w0, wzr
 9f4:	b	934 <e2p_jrnl_string2feature+0x110>

00000000000009f8 <e2p_edit_feature2>:
 9f8:	sub	sp, sp, #0x70
 9fc:	cmp	x3, #0x0
 a00:	stp	x28, x27, [sp, #32]
 a04:	stp	x24, x23, [sp, #64]
 a08:	stp	x22, x21, [sp, #80]
 a0c:	stp	x20, x19, [sp, #96]
 a10:	mov	x20, x5
 a14:	mov	x21, x4
 a18:	mov	x22, x2
 a1c:	mov	x23, x1
 a20:	mov	x24, x0
 a24:	csel	x27, x2, x3, eq  // eq = none
 a28:	stp	x29, x30, [sp, #16]
 a2c:	stp	x26, x25, [sp, #48]
 a30:	add	x29, sp, #0x10
 a34:	cbz	x4, a3c <e2p_edit_feature2+0x44>
 a38:	str	wzr, [x21]
 a3c:	cbz	x20, a44 <e2p_edit_feature2+0x4c>
 a40:	str	wzr, [x20]
 a44:	mov	x0, x24
 a48:	bl	0 <strlen>
 a4c:	add	x0, x0, #0x1
 a50:	bl	0 <malloc>
 a54:	cbz	x0, d18 <e2p_edit_feature2+0x320>
 a58:	mov	x1, x24
 a5c:	mov	x19, x0
 a60:	str	x20, [sp]
 a64:	bl	0 <strcpy>
 a68:	adrp	x24, 0 <e2p_feature2string>
 a6c:	adrp	x25, 0 <e2p_feature2string>
 a70:	add	x24, x24, #0x0
 a74:	add	x25, x25, #0x0
 a78:	mov	x26, x0
 a7c:	cbnz	x27, a94 <e2p_edit_feature2+0x9c>
 a80:	b	bf0 <e2p_edit_feature2+0x1f8>
 a84:	str	xzr, [x23]
 a88:	str	wzr, [x23, #8]
 a8c:	add	x26, x28, #0x1
 a90:	cbz	x28, bd8 <e2p_edit_feature2+0x1e0>
 a94:	ldrb	w20, [x26]
 a98:	cbz	w20, d58 <e2p_edit_feature2+0x360>
 a9c:	bl	0 <__ctype_b_loc>
 aa0:	ldr	x8, [x0]
 aa4:	and	x9, x20, #0xff
 aa8:	ldrh	w9, [x8, x9, lsl #1]
 aac:	tbz	w9, #13, ad0 <e2p_edit_feature2+0xd8>
 ab0:	ldrb	w20, [x26, #1]!
 ab4:	cbnz	w20, aa4 <e2p_edit_feature2+0xac>
 ab8:	mov	x28, xzr
 abc:	mov	x0, x26
 ac0:	mov	x1, x24
 ac4:	bl	0 <strcasecmp>
 ac8:	cbnz	w0, b18 <e2p_edit_feature2+0x120>
 acc:	b	a84 <e2p_edit_feature2+0x8c>
 ad0:	and	w10, w20, #0xff
 ad4:	cmp	w10, #0x2c
 ad8:	mov	x28, x26
 adc:	b.eq	b04 <e2p_edit_feature2+0x10c>  // b.none
 ae0:	mov	x28, x26
 ae4:	tbnz	w9, #13, b04 <e2p_edit_feature2+0x10c>
 ae8:	mov	x28, x26
 aec:	ldrb	w9, [x28, #1]!
 af0:	cbz	x9, ab8 <e2p_edit_feature2+0xc0>
 af4:	cmp	w9, #0x2c
 af8:	b.eq	b04 <e2p_edit_feature2+0x10c>  // b.none
 afc:	ldrh	w9, [x8, x9, lsl #1]
 b00:	tbz	w9, #13, aec <e2p_edit_feature2+0xf4>
 b04:	strb	wzr, [x28]
 b08:	mov	x0, x26
 b0c:	mov	x1, x24
 b10:	bl	0 <strcasecmp>
 b14:	cbz	w0, a84 <e2p_edit_feature2+0x8c>
 b18:	mov	x0, x26
 b1c:	mov	x1, x25
 b20:	bl	0 <strcasecmp>
 b24:	cbz	w0, a84 <e2p_edit_feature2+0x8c>
 b28:	ldrb	w8, [x26]
 b2c:	mov	w20, wzr
 b30:	cmp	w8, #0x2b
 b34:	b.eq	b4c <e2p_edit_feature2+0x154>  // b.none
 b38:	cmp	w8, #0x5e
 b3c:	b.eq	b48 <e2p_edit_feature2+0x150>  // b.none
 b40:	cmp	w8, #0x2d
 b44:	b.ne	b50 <e2p_edit_feature2+0x158>  // b.any
 b48:	mov	w20, #0x1                   	// #1
 b4c:	add	x26, x26, #0x1
 b50:	add	x1, sp, #0x8
 b54:	sub	x2, x29, #0x4
 b58:	mov	x0, x26
 b5c:	bl	a8 <e2p_string2feature>
 b60:	cbnz	w0, d54 <e2p_edit_feature2+0x35c>
 b64:	cbz	w20, b98 <e2p_edit_feature2+0x1a0>
 b68:	ldrsw	x9, [sp, #8]
 b6c:	ldur	w8, [x29, #-4]
 b70:	ldr	w10, [x27, x9, lsl #2]
 b74:	tst	w8, w10
 b78:	b.eq	d20 <e2p_edit_feature2+0x328>  // b.none
 b7c:	lsl	x9, x9, #2
 b80:	ldr	w10, [x23, x9]
 b84:	bic	w8, w10, w8
 b88:	str	w8, [x23, x9]
 b8c:	add	x26, x28, #0x1
 b90:	cbnz	x28, a94 <e2p_edit_feature2+0x9c>
 b94:	b	bd8 <e2p_edit_feature2+0x1e0>
 b98:	cbz	x22, bb8 <e2p_edit_feature2+0x1c0>
 b9c:	ldr	w9, [sp, #8]
 ba0:	ldur	w8, [x29, #-4]
 ba4:	ldr	w10, [x22, w9, sxtw #2]
 ba8:	tst	w8, w10
 bac:	b.eq	d40 <e2p_edit_feature2+0x348>  // b.none
 bb0:	sxtw	x9, w9
 bb4:	b	bc0 <e2p_edit_feature2+0x1c8>
 bb8:	ldur	w8, [x29, #-4]
 bbc:	ldrsw	x9, [sp, #8]
 bc0:	lsl	x9, x9, #2
 bc4:	ldr	w10, [x23, x9]
 bc8:	orr	w8, w10, w8
 bcc:	str	w8, [x23, x9]
 bd0:	add	x26, x28, #0x1
 bd4:	cbnz	x28, a94 <e2p_edit_feature2+0x9c>
 bd8:	mov	w20, wzr
 bdc:	b	d58 <e2p_edit_feature2+0x360>
 be0:	str	xzr, [x23]
 be4:	str	wzr, [x23, #8]
 be8:	add	x26, x27, #0x1
 bec:	cbz	x27, bd8 <e2p_edit_feature2+0x1e0>
 bf0:	ldrb	w20, [x26]
 bf4:	cbz	w20, d58 <e2p_edit_feature2+0x360>
 bf8:	bl	0 <__ctype_b_loc>
 bfc:	ldr	x8, [x0]
 c00:	and	x9, x20, #0xff
 c04:	ldrh	w9, [x8, x9, lsl #1]
 c08:	tbz	w9, #13, c2c <e2p_edit_feature2+0x234>
 c0c:	ldrb	w20, [x26, #1]!
 c10:	cbnz	w20, c00 <e2p_edit_feature2+0x208>
 c14:	mov	x27, xzr
 c18:	mov	x0, x26
 c1c:	mov	x1, x24
 c20:	bl	0 <strcasecmp>
 c24:	cbnz	w0, c70 <e2p_edit_feature2+0x278>
 c28:	b	be0 <e2p_edit_feature2+0x1e8>
 c2c:	and	w10, w20, #0xff
 c30:	cmp	w10, #0x2c
 c34:	mov	x27, x26
 c38:	b.eq	c5c <e2p_edit_feature2+0x264>  // b.none
 c3c:	mov	x27, x26
 c40:	tbnz	w9, #13, c5c <e2p_edit_feature2+0x264>
 c44:	ldrb	w9, [x27, #1]!
 c48:	cbz	x9, c14 <e2p_edit_feature2+0x21c>
 c4c:	cmp	w9, #0x2c
 c50:	b.eq	c5c <e2p_edit_feature2+0x264>  // b.none
 c54:	ldrh	w9, [x8, x9, lsl #1]
 c58:	tbz	w9, #13, c44 <e2p_edit_feature2+0x24c>
 c5c:	strb	wzr, [x27]
 c60:	mov	x0, x26
 c64:	mov	x1, x24
 c68:	bl	0 <strcasecmp>
 c6c:	cbz	w0, be0 <e2p_edit_feature2+0x1e8>
 c70:	mov	x0, x26
 c74:	mov	x1, x25
 c78:	bl	0 <strcasecmp>
 c7c:	cbz	w0, be0 <e2p_edit_feature2+0x1e8>
 c80:	ldrb	w8, [x26]
 c84:	mov	w28, wzr
 c88:	cmp	w8, #0x2b
 c8c:	b.eq	ca4 <e2p_edit_feature2+0x2ac>  // b.none
 c90:	cmp	w8, #0x5e
 c94:	b.eq	ca0 <e2p_edit_feature2+0x2a8>  // b.none
 c98:	cmp	w8, #0x2d
 c9c:	b.ne	ca8 <e2p_edit_feature2+0x2b0>  // b.any
 ca0:	mov	w28, #0x1                   	// #1
 ca4:	add	x26, x26, #0x1
 ca8:	add	x1, sp, #0x8
 cac:	sub	x2, x29, #0x4
 cb0:	mov	x0, x26
 cb4:	bl	a8 <e2p_string2feature>
 cb8:	cbnz	w0, d54 <e2p_edit_feature2+0x35c>
 cbc:	cbz	w28, cdc <e2p_edit_feature2+0x2e4>
 cc0:	ldrsw	x8, [sp, #8]
 cc4:	ldur	w9, [x29, #-4]
 cc8:	lsl	x8, x8, #2
 ccc:	ldr	w10, [x23, x8]
 cd0:	bic	w9, w10, w9
 cd4:	str	w9, [x23, x8]
 cd8:	b	be8 <e2p_edit_feature2+0x1f0>
 cdc:	cbz	x22, cfc <e2p_edit_feature2+0x304>
 ce0:	ldr	w9, [sp, #8]
 ce4:	ldur	w8, [x29, #-4]
 ce8:	ldr	w10, [x22, w9, sxtw #2]
 cec:	tst	w8, w10
 cf0:	b.eq	d40 <e2p_edit_feature2+0x348>  // b.none
 cf4:	sxtw	x9, w9
 cf8:	b	d04 <e2p_edit_feature2+0x30c>
 cfc:	ldur	w8, [x29, #-4]
 d00:	ldrsw	x9, [sp, #8]
 d04:	lsl	x9, x9, #2
 d08:	ldr	w10, [x23, x9]
 d0c:	orr	w8, w10, w8
 d10:	str	w8, [x23, x9]
 d14:	b	be8 <e2p_edit_feature2+0x1f0>
 d18:	mov	w20, #0x1                   	// #1
 d1c:	b	d60 <e2p_edit_feature2+0x368>
 d20:	cbz	x21, d2c <e2p_edit_feature2+0x334>
 d24:	orr	w9, w9, #0x80
 d28:	str	w9, [x21]
 d2c:	ldr	x9, [sp]
 d30:	cbz	x9, d54 <e2p_edit_feature2+0x35c>
 d34:	str	w8, [x9]
 d38:	mov	w20, #0x1                   	// #1
 d3c:	b	d58 <e2p_edit_feature2+0x360>
 d40:	ldr	x10, [sp]
 d44:	cbz	x21, d4c <e2p_edit_feature2+0x354>
 d48:	str	w9, [x21]
 d4c:	cbz	x10, d54 <e2p_edit_feature2+0x35c>
 d50:	str	w8, [x10]
 d54:	mov	w20, #0x1                   	// #1
 d58:	mov	x0, x19
 d5c:	bl	0 <free>
 d60:	mov	w0, w20
 d64:	ldp	x20, x19, [sp, #96]
 d68:	ldp	x22, x21, [sp, #80]
 d6c:	ldp	x24, x23, [sp, #64]
 d70:	ldp	x26, x25, [sp, #48]
 d74:	ldp	x28, x27, [sp, #32]
 d78:	ldp	x29, x30, [sp, #16]
 d7c:	add	sp, sp, #0x70
 d80:	ret

0000000000000d84 <e2p_edit_feature>:
 d84:	mov	x3, xzr
 d88:	mov	x4, xzr
 d8c:	mov	x5, xzr
 d90:	b	9f8 <e2p_edit_feature2>

fgetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetflags>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x20, x19, [sp, #176]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	add	x2, sp, #0x10
  14:	mov	w0, wzr
  18:	mov	x1, x20
  1c:	stp	x29, x30, [sp, #144]
  20:	stp	x22, x21, [sp, #160]
  24:	add	x29, sp, #0x90
  28:	bl	0 <__lxstat>
  2c:	cbz	w0, 6c <fgetflags+0x6c>
  30:	mov	w1, #0x800                 	// #2048
  34:	mov	x0, x20
  38:	bl	0 <open>
  3c:	cmn	w0, #0x1
  40:	b.eq	90 <fgetflags+0x90>  // b.none
  44:	mov	w1, #0x6601                	// #26113
  48:	add	x2, sp, #0xc
  4c:	movk	w1, #0x8008, lsl #16
  50:	mov	w21, w0
  54:	bl	0 <ioctl>
  58:	mov	w20, w0
  5c:	cmn	w0, #0x1
  60:	b.eq	98 <fgetflags+0x98>  // b.none
  64:	mov	w22, wzr
  68:	b	a0 <fgetflags+0xa0>
  6c:	ldr	w8, [sp, #32]
  70:	and	w8, w8, #0xf000
  74:	cmp	w8, #0x8, lsl #12
  78:	b.eq	30 <fgetflags+0x30>  // b.none
  7c:	cmp	w8, #0x4, lsl #12
  80:	b.eq	30 <fgetflags+0x30>  // b.none
  84:	bl	0 <__errno_location>
  88:	mov	w8, #0x5f                  	// #95
  8c:	str	w8, [x0]
  90:	mov	w20, #0xffffffff            	// #-1
  94:	b	bc <fgetflags+0xbc>
  98:	bl	0 <__errno_location>
  9c:	ldr	w22, [x0]
  a0:	ldrsw	x8, [sp, #12]
  a4:	mov	w0, w21
  a8:	str	x8, [x19]
  ac:	bl	0 <close>
  b0:	cbz	w22, bc <fgetflags+0xbc>
  b4:	bl	0 <__errno_location>
  b8:	str	w22, [x0]
  bc:	mov	w0, w20
  c0:	ldp	x20, x19, [sp, #176]
  c4:	ldp	x22, x21, [sp, #160]
  c8:	ldp	x29, x30, [sp, #144]
  cc:	add	sp, sp, #0xc0
  d0:	ret

fsetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	mov	x2, sp
  14:	mov	w0, wzr
  18:	mov	x1, x20
  1c:	stp	x29, x30, [sp, #128]
  20:	str	x21, [sp, #144]
  24:	add	x29, sp, #0x80
  28:	bl	0 <__lxstat>
  2c:	cbz	w0, 74 <fsetflags+0x74>
  30:	mov	w1, #0x800                 	// #2048
  34:	mov	x0, x20
  38:	bl	0 <open>
  3c:	cmn	w0, #0x1
  40:	b.eq	b8 <fsetflags+0xb8>  // b.none
  44:	mov	w1, #0x6602                	// #26114
  48:	add	x2, x29, #0x1c
  4c:	movk	w1, #0x4008, lsl #16
  50:	mov	w20, w0
  54:	str	w19, [x29, #28]
  58:	bl	0 <ioctl>
  5c:	cmn	w0, #0x1
  60:	b.eq	9c <fsetflags+0x9c>  // b.none
  64:	mov	w19, w0
  68:	mov	w0, w20
  6c:	bl	0 <close>
  70:	b	bc <fsetflags+0xbc>
  74:	ldr	w8, [sp, #16]
  78:	and	w8, w8, #0xf000
  7c:	cmp	w8, #0x8, lsl #12
  80:	b.eq	30 <fsetflags+0x30>  // b.none
  84:	cmp	w8, #0x4, lsl #12
  88:	b.eq	30 <fsetflags+0x30>  // b.none
  8c:	bl	0 <__errno_location>
  90:	mov	w8, #0x5f                  	// #95
  94:	str	w8, [x0]
  98:	b	b8 <fsetflags+0xb8>
  9c:	bl	0 <__errno_location>
  a0:	ldr	w21, [x0]
  a4:	mov	x19, x0
  a8:	mov	w0, w20
  ac:	bl	0 <close>
  b0:	cbz	w21, b8 <fsetflags+0xb8>
  b4:	str	w21, [x19]
  b8:	mov	w19, #0xffffffff            	// #-1
  bc:	mov	w0, w19
  c0:	ldp	x20, x19, [sp, #160]
  c4:	ldr	x21, [sp, #144]
  c8:	ldp	x29, x30, [sp, #128]
  cc:	add	sp, sp, #0xb0
  d0:	ret

fgetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x29, sp
   c:	mov	x20, x1
  10:	mov	w19, #0xffffffff            	// #-1
  14:	mov	w1, #0x800                 	// #2048
  18:	str	x21, [sp, #16]
  1c:	str	w19, [x29, #28]
  20:	bl	0 <open>
  24:	cmn	w0, #0x1
  28:	b.eq	80 <fgetversion+0x80>  // b.none
  2c:	mov	w1, #0x7601                	// #30209
  30:	add	x2, x29, #0x1c
  34:	movk	w1, #0x8008, lsl #16
  38:	mov	w21, w0
  3c:	bl	0 <ioctl>
  40:	cmn	w0, #0x1
  44:	b.eq	64 <fgetversion+0x64>  // b.none
  48:	mov	w19, w0
  4c:	mov	w0, w21
  50:	bl	0 <close>
  54:	cbnz	w19, 80 <fgetversion+0x80>
  58:	ldr	w8, [x29, #28]
  5c:	str	x8, [x20]
  60:	b	80 <fgetversion+0x80>
  64:	bl	0 <__errno_location>
  68:	ldr	w20, [x0]
  6c:	mov	x19, x0
  70:	mov	w0, w21
  74:	bl	0 <close>
  78:	str	w20, [x19]
  7c:	mov	w19, #0xffffffff            	// #-1
  80:	mov	w0, w19
  84:	ldp	x20, x19, [sp, #32]
  88:	ldr	x21, [sp, #16]
  8c:	ldp	x29, x30, [sp], #48
  90:	ret

fsetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x20, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	str	x21, [sp, #16]
  14:	mov	x29, sp
  18:	bl	0 <open>
  1c:	cmn	w0, #0x1
  20:	b.eq	70 <fsetversion+0x70>  // b.none
  24:	mov	w1, #0x7602                	// #30210
  28:	add	x2, x29, #0x1c
  2c:	movk	w1, #0x4008, lsl #16
  30:	mov	w19, w0
  34:	str	w20, [x29, #28]
  38:	bl	0 <ioctl>
  3c:	cmn	w0, #0x1
  40:	b.eq	54 <fsetversion+0x54>  // b.none
  44:	mov	w20, w0
  48:	mov	w0, w19
  4c:	bl	0 <close>
  50:	b	74 <fsetversion+0x74>
  54:	bl	0 <__errno_location>
  58:	ldr	w21, [x0]
  5c:	mov	x20, x0
  60:	mov	w0, w19
  64:	bl	0 <close>
  68:	cbz	w21, 70 <fsetversion+0x70>
  6c:	str	w21, [x20]
  70:	mov	w20, #0xffffffff            	// #-1
  74:	mov	w0, w20
  78:	ldp	x20, x19, [sp, #32]
  7c:	ldr	x21, [sp, #16]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

getflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	w20, w0
   c:	mov	x19, x1
  10:	add	x2, sp, #0x10
  14:	mov	w0, wzr
  18:	mov	w1, w20
  1c:	stp	x29, x30, [sp, #144]
  20:	add	x29, sp, #0x90
  24:	bl	0 <__fxstat>
  28:	cbz	w0, 58 <getflags+0x58>
  2c:	mov	w1, #0x6601                	// #26113
  30:	add	x2, sp, #0xc
  34:	movk	w1, #0x8008, lsl #16
  38:	mov	w0, w20
  3c:	bl	0 <ioctl>
  40:	ldrsw	x8, [sp, #12]
  44:	str	x8, [x19]
  48:	ldp	x20, x19, [sp, #160]
  4c:	ldp	x29, x30, [sp, #144]
  50:	add	sp, sp, #0xb0
  54:	ret
  58:	ldr	w8, [sp, #32]
  5c:	and	w8, w8, #0xf000
  60:	cmp	w8, #0x8, lsl #12
  64:	b.eq	2c <getflags+0x2c>  // b.none
  68:	cmp	w8, #0x4, lsl #12
  6c:	b.eq	2c <getflags+0x2c>  // b.none
  70:	bl	0 <__errno_location>
  74:	mov	w8, #0x5f                  	// #95
  78:	str	w8, [x0]
  7c:	mov	w0, #0xffffffff            	// #-1
  80:	ldp	x20, x19, [sp, #160]
  84:	ldp	x29, x30, [sp, #144]
  88:	add	sp, sp, #0xb0
  8c:	ret

getversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getversion>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	mov	x19, x1
  10:	mov	w1, #0x7601                	// #30209
  14:	add	x2, x29, #0x1c
  18:	movk	w1, #0x8008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldrsw	x8, [x29, #28]
  24:	str	x8, [x19]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

hashstr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_hash2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w2, w0
   8:	cmp	w0, #0x2
   c:	str	x19, [sp, #16]
  10:	mov	x29, sp
  14:	b.hi	30 <e2p_hash2string+0x30>  // b.pmore
  18:	adrp	x8, 0 <e2p_hash2string>
  1c:	add	x8, x8, #0x0
  20:	ldr	x0, [x8, w2, sxtw #3]
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	ret
  30:	adrp	x19, 0 <e2p_hash2string>
  34:	add	x19, x19, #0x0
  38:	adrp	x1, 0 <e2p_hash2string>
  3c:	add	x1, x1, #0x0
  40:	mov	x0, x19
  44:	bl	0 <sprintf>
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret

0000000000000058 <e2p_string2hash>:
  58:	stp	x29, x30, [sp, #-32]!
  5c:	adrp	x1, 0 <e2p_hash2string>
  60:	add	x1, x1, #0x0
  64:	str	x19, [sp, #16]
  68:	mov	x29, sp
  6c:	mov	x19, x0
  70:	bl	0 <strcasecmp>
  74:	cbz	w0, c8 <e2p_string2hash+0x70>
  78:	adrp	x1, 0 <e2p_hash2string>
  7c:	add	x1, x1, #0x0
  80:	mov	x0, x19
  84:	bl	0 <strcasecmp>
  88:	cbz	w0, e0 <e2p_string2hash+0x88>
  8c:	adrp	x1, 0 <e2p_hash2string>
  90:	add	x1, x1, #0x0
  94:	mov	x0, x19
  98:	bl	0 <strcasecmp>
  9c:	cbz	w0, f8 <e2p_string2hash+0xa0>
  a0:	adrp	x1, 0 <e2p_hash2string>
  a4:	add	x1, x1, #0x0
  a8:	mov	w2, #0x8                   	// #8
  ac:	mov	x0, x19
  b0:	bl	0 <strncasecmp>
  b4:	cbz	w0, 110 <e2p_string2hash+0xb8>
  b8:	mov	w0, #0xffffffff            	// #-1
  bc:	ldr	x19, [sp, #16]
  c0:	ldp	x29, x30, [sp], #32
  c4:	ret
  c8:	adrp	x8, 0 <e2p_hash2string>
  cc:	add	x8, x8, #0x0
  d0:	ldr	w0, [x8]
  d4:	ldr	x19, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret
  e0:	adrp	x8, 0 <e2p_hash2string>
  e4:	add	x8, x8, #0x0
  e8:	ldr	w0, [x8]
  ec:	ldr	x19, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret
  f8:	adrp	x8, 0 <e2p_hash2string>
  fc:	add	x8, x8, #0x0
 100:	ldr	w0, [x8]
 104:	ldr	x19, [sp, #16]
 108:	ldp	x29, x30, [sp], #32
 10c:	ret
 110:	ldrb	w8, [x19, #8]!
 114:	cbz	w8, b8 <e2p_string2hash+0x60>
 118:	add	x1, x29, #0x18
 11c:	mov	w2, #0xa                   	// #10
 120:	mov	x0, x19
 124:	bl	0 <strtol>
 128:	cmp	w0, #0xff
 12c:	b.hi	b8 <e2p_string2hash+0x60>  // b.pmore
 130:	ldr	x8, [x29, #24]
 134:	ldrb	w8, [x8]
 138:	cmp	w8, #0x0
 13c:	csinv	w0, w0, wzr, eq  // eq = none
 140:	ldr	x19, [sp, #16]
 144:	ldp	x29, x30, [sp], #32
 148:	ret

iod.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <iterate_on_dir>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x20, x19, [sp, #64]
   8:	mov	x20, x1
   c:	mov	w1, #0x3                   	// #3
  10:	str	x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	mov	x29, sp
  20:	mov	x19, x2
  24:	mov	x21, x0
  28:	bl	0 <pathconf>
  2c:	add	w8, w0, #0x118
  30:	cmn	w0, #0x1
  34:	mov	w9, #0x126                 	// #294
  38:	csel	w25, w9, w8, eq  // eq = none
  3c:	add	w8, w25, #0x1
  40:	sxtw	x23, w8
  44:	mov	x0, x23
  48:	bl	0 <malloc>
  4c:	cbz	x0, c4 <iterate_on_dir+0xc4>
  50:	mov	w1, wzr
  54:	mov	x2, x23
  58:	mov	x22, x0
  5c:	bl	0 <memset>
  60:	mov	x0, x21
  64:	bl	0 <opendir>
  68:	cbz	x0, cc <iterate_on_dir+0xcc>
  6c:	mov	x23, x0
  70:	bl	0 <readdir>
  74:	cbz	x0, dc <iterate_on_dir+0xdc>
  78:	mov	x1, x0
  7c:	mov	w24, wzr
  80:	ldrh	w8, [x1, #16]
  84:	mov	x0, x22
  88:	cmp	w25, w8
  8c:	csel	w8, w25, w8, lt  // lt = tstop
  90:	sxtw	x2, w8
  94:	bl	0 <memcpy>
  98:	mov	x0, x21
  9c:	mov	x1, x22
  a0:	mov	x2, x19
  a4:	blr	x20
  a8:	cmp	w0, #0x0
  ac:	mov	x0, x23
  b0:	cinc	w24, w24, ne  // ne = any
  b4:	bl	0 <readdir>
  b8:	mov	x1, x0
  bc:	cbnz	x0, 80 <iterate_on_dir+0x80>
  c0:	b	e0 <iterate_on_dir+0xe0>
  c4:	mov	w24, #0xffffffff            	// #-1
  c8:	b	f0 <iterate_on_dir+0xf0>
  cc:	mov	x0, x22
  d0:	bl	0 <free>
  d4:	mov	w24, #0xffffffff            	// #-1
  d8:	b	f0 <iterate_on_dir+0xf0>
  dc:	mov	w24, wzr
  e0:	mov	x0, x22
  e4:	bl	0 <free>
  e8:	mov	x0, x23
  ec:	bl	0 <closedir>
  f0:	mov	w0, w24
  f4:	ldp	x20, x19, [sp, #64]
  f8:	ldp	x22, x21, [sp, #48]
  fc:	ldp	x24, x23, [sp, #32]
 100:	ldr	x25, [sp, #16]
 104:	ldp	x29, x30, [sp], #80
 108:	ret

ls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <list_super2>:
       0:	sub	sp, sp, #0xc0
       4:	stp	x29, x30, [sp, #96]
       8:	stp	x28, x27, [sp, #112]
       c:	stp	x26, x25, [sp, #128]
      10:	stp	x24, x23, [sp, #144]
      14:	stp	x22, x21, [sp, #160]
      18:	stp	x20, x19, [sp, #176]
      1c:	ldr	w9, [x0, #76]
      20:	ldr	w8, [x0, #40]
      24:	mov	x20, x0
      28:	mov	x19, x1
      2c:	add	x29, sp, #0x60
      30:	cbz	w9, 3c <list_super2+0x3c>
      34:	ldrh	w9, [x20, #88]
      38:	b	40 <list_super2+0x40>
      3c:	mov	w9, #0x80                  	// #128
      40:	mov	x1, x20
      44:	ldrb	w10, [x1, #120]!
      48:	mov	w11, #0x400                 	// #1024
      4c:	ldur	w22, [x1, #-96]
      50:	lsl	w11, w11, w22
      54:	madd	w21, w9, w8, w11
      58:	cbz	w10, 7c <list_super2+0x7c>
      5c:	movi	v0.2d, #0x0
      60:	add	x0, sp, #0x10
      64:	mov	w2, #0x10                  	// #16
      68:	stp	q0, q0, [sp, #64]
      6c:	stp	q0, q0, [sp, #32]
      70:	str	q0, [sp, #16]
      74:	bl	0 <strncpy>
      78:	b	94 <list_super2+0x94>
      7c:	mov	w8, #0x656e                	// #25966
      80:	mov	w9, #0x6e3c                	// #28220
      84:	movk	w8, #0x3e, lsl #16
      88:	movk	w9, #0x6e6f, lsl #16
      8c:	stur	w8, [sp, #19]
      90:	str	w9, [sp, #16]
      94:	adrp	x1, 0 <list_super2>
      98:	add	x1, x1, #0x0
      9c:	add	x2, sp, #0x10
      a0:	mov	x0, x19
      a4:	sub	w21, w21, #0x1
      a8:	add	w22, w22, #0xa
      ac:	bl	0 <fprintf>
      b0:	mov	x1, x20
      b4:	ldrb	w8, [x1, #136]!
      b8:	cbz	w8, dc <list_super2+0xdc>
      bc:	movi	v0.2d, #0x0
      c0:	add	x0, sp, #0x10
      c4:	mov	w2, #0x40                  	// #64
      c8:	stp	q0, q0, [sp, #64]
      cc:	stp	q0, q0, [sp, #32]
      d0:	str	q0, [sp, #16]
      d4:	bl	0 <strncpy>
      d8:	b	ec <list_super2+0xec>
      dc:	adrp	x8, 0 <list_super2>
      e0:	add	x8, x8, #0x0
      e4:	ldr	q0, [x8]
      e8:	str	q0, [sp, #16]
      ec:	adrp	x1, 0 <list_super2>
      f0:	add	x1, x1, #0x0
      f4:	add	x2, sp, #0x10
      f8:	mov	x0, x19
      fc:	lsr	w21, w21, w22
     100:	bl	0 <fprintf>
     104:	add	x0, x20, #0x68
     108:	bl	0 <e2p_uuid2str>
     10c:	adrp	x1, 0 <list_super2>
     110:	mov	x2, x0
     114:	add	x1, x1, #0x0
     118:	mov	x0, x19
     11c:	bl	0 <fprintf>
     120:	ldrh	w2, [x20, #56]
     124:	adrp	x1, 0 <list_super2>
     128:	add	x1, x1, #0x0
     12c:	mov	x0, x19
     130:	bl	0 <fprintf>
     134:	ldr	w2, [x20, #76]
     138:	adrp	x1, 0 <list_super2>
     13c:	add	x1, x1, #0x0
     140:	mov	x0, x19
     144:	bl	0 <fprintf>
     148:	ldr	w8, [x20, #76]
     14c:	cmp	w8, #0x1
     150:	b.eq	168 <list_super2+0x168>  // b.none
     154:	cbnz	w8, 174 <list_super2+0x174>
     158:	adrp	x0, 0 <list_super2>
     15c:	add	x0, x0, #0x0
     160:	mov	w1, #0xc                   	// #12
     164:	b	180 <list_super2+0x180>
     168:	adrp	x0, 0 <list_super2>
     16c:	add	x0, x0, #0x0
     170:	b	17c <list_super2+0x17c>
     174:	adrp	x0, 0 <list_super2>
     178:	add	x0, x0, #0x0
     17c:	mov	w1, #0xb                   	// #11
     180:	mov	w2, #0x1                   	// #1
     184:	mov	x3, x19
     188:	bl	0 <fwrite>
     18c:	adrp	x0, 0 <list_super2>
     190:	add	x0, x0, #0x0
     194:	mov	w1, #0x19                  	// #25
     198:	mov	w2, #0x1                   	// #1
     19c:	mov	x3, x19
     1a0:	mov	w22, #0x1                   	// #1
     1a4:	bl	0 <fwrite>
     1a8:	adrp	x23, 0 <list_super2>
     1ac:	mov	w24, wzr
     1b0:	mov	w25, #0x20                  	// #32
     1b4:	add	x23, x23, #0x0
     1b8:	b	1c8 <list_super2+0x1c8>
     1bc:	subs	w25, w25, #0x1
     1c0:	lsl	w22, w22, #1
     1c4:	b.eq	1f8 <list_super2+0x1f8>  // b.none
     1c8:	ldr	w8, [x20, #92]
     1cc:	tst	w8, w22
     1d0:	b.eq	1bc <list_super2+0x1bc>  // b.none
     1d4:	mov	w0, wzr
     1d8:	mov	w1, w22
     1dc:	bl	0 <e2p_feature2string>
     1e0:	mov	x2, x0
     1e4:	mov	x0, x19
     1e8:	mov	x1, x23
     1ec:	bl	0 <fprintf>
     1f0:	add	w24, w24, #0x1
     1f4:	b	1bc <list_super2+0x1bc>
     1f8:	adrp	x23, 0 <list_super2>
     1fc:	mov	w22, #0x1                   	// #1
     200:	mov	w25, #0x20                  	// #32
     204:	add	x23, x23, #0x0
     208:	b	218 <list_super2+0x218>
     20c:	subs	w25, w25, #0x1
     210:	lsl	w22, w22, #1
     214:	b.eq	248 <list_super2+0x248>  // b.none
     218:	ldr	w8, [x20, #96]
     21c:	tst	w8, w22
     220:	b.eq	20c <list_super2+0x20c>  // b.none
     224:	mov	w0, #0x1                   	// #1
     228:	mov	w1, w22
     22c:	bl	0 <e2p_feature2string>
     230:	mov	x2, x0
     234:	mov	x0, x19
     238:	mov	x1, x23
     23c:	bl	0 <fprintf>
     240:	add	w24, w24, #0x1
     244:	b	20c <list_super2+0x20c>
     248:	adrp	x23, 0 <list_super2>
     24c:	mov	w22, #0x1                   	// #1
     250:	mov	w25, #0x20                  	// #32
     254:	add	x23, x23, #0x0
     258:	b	268 <list_super2+0x268>
     25c:	subs	w25, w25, #0x1
     260:	lsl	w22, w22, #1
     264:	b.eq	298 <list_super2+0x298>  // b.none
     268:	ldr	w8, [x20, #100]
     26c:	tst	w8, w22
     270:	b.eq	25c <list_super2+0x25c>  // b.none
     274:	mov	w0, #0x2                   	// #2
     278:	mov	w1, w22
     27c:	bl	0 <e2p_feature2string>
     280:	mov	x2, x0
     284:	mov	x0, x19
     288:	mov	x1, x23
     28c:	bl	0 <fprintf>
     290:	add	w24, w24, #0x1
     294:	b	25c <list_super2+0x25c>
     298:	cbnz	w24, 2b4 <list_super2+0x2b4>
     29c:	adrp	x0, 0 <list_super2>
     2a0:	add	x0, x0, #0x0
     2a4:	mov	w1, #0x7                   	// #7
     2a8:	mov	w2, #0x1                   	// #1
     2ac:	mov	x3, x19
     2b0:	bl	0 <fwrite>
     2b4:	mov	w0, #0xa                   	// #10
     2b8:	mov	x1, x19
     2bc:	bl	0 <fputc>
     2c0:	ldr	w8, [x20, #352]
     2c4:	cbz	w8, 380 <list_super2+0x380>
     2c8:	adrp	x0, 0 <list_super2>
     2cc:	add	x0, x0, #0x0
     2d0:	mov	w1, #0x1a                  	// #26
     2d4:	mov	w2, #0x1                   	// #1
     2d8:	mov	x3, x19
     2dc:	bl	0 <fwrite>
     2e0:	ldr	w8, [x20, #352]
     2e4:	tbnz	w8, #0, 2f4 <list_super2+0x2f4>
     2e8:	mov	w22, wzr
     2ec:	tbnz	w8, #1, 318 <list_super2+0x318>
     2f0:	b	338 <list_super2+0x338>
     2f4:	adrp	x0, 0 <list_super2>
     2f8:	add	x0, x0, #0x0
     2fc:	mov	w1, #0x16                  	// #22
     300:	mov	w2, #0x1                   	// #1
     304:	mov	x3, x19
     308:	mov	w22, #0x1                   	// #1
     30c:	bl	0 <fwrite>
     310:	ldr	w8, [x20, #352]
     314:	tbz	w8, #1, 338 <list_super2+0x338>
     318:	adrp	x0, 0 <list_super2>
     31c:	add	x0, x0, #0x0
     320:	mov	w1, #0x18                  	// #24
     324:	mov	w2, #0x1                   	// #1
     328:	mov	x3, x19
     32c:	mov	w22, #0x1                   	// #1
     330:	bl	0 <fwrite>
     334:	ldr	w8, [x20, #352]
     338:	tbnz	w8, #2, 35c <list_super2+0x35c>
     33c:	cbnz	w22, 374 <list_super2+0x374>
     340:	adrp	x0, 0 <list_super2>
     344:	add	x0, x0, #0x0
     348:	mov	w1, #0x7                   	// #7
     34c:	mov	w2, #0x1                   	// #1
     350:	mov	x3, x19
     354:	bl	0 <fwrite>
     358:	b	380 <list_super2+0x380>
     35c:	adrp	x0, 0 <list_super2>
     360:	add	x0, x0, #0x0
     364:	mov	w1, #0x10                  	// #16
     368:	mov	w2, #0x1                   	// #1
     36c:	mov	x3, x19
     370:	bl	0 <fwrite>
     374:	mov	w0, #0xa                   	// #10
     378:	mov	x1, x19
     37c:	bl	0 <fputc>
     380:	ldr	w24, [x20, #256]
     384:	adrp	x0, 0 <list_super2>
     388:	add	x0, x0, #0x0
     38c:	mov	w1, #0x19                  	// #25
     390:	mov	w2, #0x1                   	// #1
     394:	mov	x3, x19
     398:	bl	0 <fwrite>
     39c:	ands	w0, w24, #0x60
     3a0:	b.eq	3c4 <list_super2+0x3c4>  // b.none
     3a4:	bl	0 <e2p_mntopt2string>
     3a8:	adrp	x1, 0 <list_super2>
     3ac:	mov	x2, x0
     3b0:	add	x1, x1, #0x0
     3b4:	mov	x0, x19
     3b8:	bl	0 <fprintf>
     3bc:	mov	w25, #0x1                   	// #1
     3c0:	b	3c8 <list_super2+0x3c8>
     3c4:	mov	w25, wzr
     3c8:	adrp	x23, 0 <list_super2>
     3cc:	mov	w22, #0x1                   	// #1
     3d0:	mov	w26, #0x20                  	// #32
     3d4:	add	x23, x23, #0x0
     3d8:	b	3e8 <list_super2+0x3e8>
     3dc:	subs	w26, w26, #0x1
     3e0:	lsl	w22, w22, #1
     3e4:	b.eq	418 <list_super2+0x418>  // b.none
     3e8:	tst	w22, #0x60
     3ec:	b.ne	3dc <list_super2+0x3dc>  // b.any
     3f0:	and	w8, w22, w24
     3f4:	cbz	w8, 3dc <list_super2+0x3dc>
     3f8:	mov	w0, w22
     3fc:	bl	0 <e2p_mntopt2string>
     400:	mov	x2, x0
     404:	mov	x0, x19
     408:	mov	x1, x23
     40c:	bl	0 <fprintf>
     410:	add	w25, w25, #0x1
     414:	b	3dc <list_super2+0x3dc>
     418:	cbnz	w25, 434 <list_super2+0x434>
     41c:	adrp	x0, 0 <list_super2>
     420:	add	x0, x0, #0x0
     424:	mov	w1, #0x7                   	// #7
     428:	mov	w2, #0x1                   	// #1
     42c:	mov	x3, x19
     430:	bl	0 <fwrite>
     434:	mov	w0, #0xa                   	// #10
     438:	mov	x1, x19
     43c:	bl	0 <fputc>
     440:	ldrb	w8, [x20, #512]
     444:	cbz	w8, 45c <list_super2+0x45c>
     448:	adrp	x1, 0 <list_super2>
     44c:	add	x2, x20, #0x200
     450:	add	x1, x1, #0x0
     454:	mov	x0, x19
     458:	bl	0 <fprintf>
     45c:	adrp	x0, 0 <list_super2>
     460:	add	x0, x0, #0x0
     464:	mov	w1, #0x19                  	// #25
     468:	mov	w2, #0x1                   	// #1
     46c:	mov	x3, x19
     470:	bl	0 <fwrite>
     474:	ldrh	w1, [x20, #58]
     478:	mov	x0, x19
     47c:	bl	0 <print_fs_state>
     480:	mov	w0, #0xa                   	// #10
     484:	mov	x1, x19
     488:	bl	0 <fputc>
     48c:	adrp	x0, 0 <list_super2>
     490:	add	x0, x0, #0x0
     494:	mov	w1, #0x1a                  	// #26
     498:	mov	w2, #0x1                   	// #1
     49c:	mov	x3, x19
     4a0:	bl	0 <fwrite>
     4a4:	ldrh	w1, [x20, #60]
     4a8:	mov	x0, x19
     4ac:	bl	0 <print_fs_errors>
     4b0:	mov	w0, #0xa                   	// #10
     4b4:	mov	x1, x19
     4b8:	bl	0 <fputc>
     4bc:	ldr	w0, [x20, #72]
     4c0:	bl	0 <e2p_os2string>
     4c4:	mov	x22, x0
     4c8:	adrp	x1, 0 <list_super2>
     4cc:	add	x1, x1, #0x0
     4d0:	mov	x0, x19
     4d4:	mov	x2, x22
     4d8:	bl	0 <fprintf>
     4dc:	mov	x0, x22
     4e0:	bl	0 <free>
     4e4:	ldr	w2, [x20]
     4e8:	adrp	x1, 0 <list_super2>
     4ec:	add	x1, x1, #0x0
     4f0:	mov	x0, x19
     4f4:	bl	0 <fprintf>
     4f8:	ldrb	w9, [x20, #96]
     4fc:	ldr	w8, [x20, #4]
     500:	tbnz	w9, #7, 50c <list_super2+0x50c>
     504:	mov	x9, xzr
     508:	b	514 <list_super2+0x514>
     50c:	ldr	w9, [x20, #336]
     510:	lsl	x9, x9, #32
     514:	adrp	x1, 0 <list_super2>
     518:	orr	x2, x9, x8
     51c:	add	x1, x1, #0x0
     520:	mov	x0, x19
     524:	bl	0 <fprintf>
     528:	ldrb	w9, [x20, #96]
     52c:	ldr	w8, [x20, #8]
     530:	tbnz	w9, #7, 53c <list_super2+0x53c>
     534:	mov	x9, xzr
     538:	b	544 <list_super2+0x544>
     53c:	ldr	w9, [x20, #340]
     540:	lsl	x9, x9, #32
     544:	adrp	x1, 0 <list_super2>
     548:	orr	x2, x9, x8
     54c:	add	x1, x1, #0x0
     550:	mov	x0, x19
     554:	bl	0 <fprintf>
     558:	ldr	w2, [x20, #584]
     55c:	cbz	w2, 570 <list_super2+0x570>
     560:	adrp	x1, 0 <list_super2>
     564:	add	x1, x1, #0x0
     568:	mov	x0, x19
     56c:	bl	0 <fprintf>
     570:	ldrb	w9, [x20, #96]
     574:	ldr	w8, [x20, #12]
     578:	tbnz	w9, #7, 584 <list_super2+0x584>
     57c:	mov	x9, xzr
     580:	b	58c <list_super2+0x58c>
     584:	ldr	w9, [x20, #344]
     588:	lsl	x9, x9, #32
     58c:	adrp	x1, 0 <list_super2>
     590:	orr	x2, x9, x8
     594:	add	x1, x1, #0x0
     598:	mov	x0, x19
     59c:	bl	0 <fprintf>
     5a0:	ldr	w2, [x20, #16]
     5a4:	adrp	x1, 0 <list_super2>
     5a8:	add	x1, x1, #0x0
     5ac:	mov	x0, x19
     5b0:	bl	0 <fprintf>
     5b4:	ldr	w2, [x20, #20]
     5b8:	adrp	x1, 0 <list_super2>
     5bc:	add	x1, x1, #0x0
     5c0:	mov	x0, x19
     5c4:	bl	0 <fprintf>
     5c8:	ldr	w8, [x20, #24]
     5cc:	mov	w22, #0x400                 	// #1024
     5d0:	adrp	x1, 0 <list_super2>
     5d4:	add	x1, x1, #0x0
     5d8:	lsl	w2, w22, w8
     5dc:	mov	x0, x19
     5e0:	bl	0 <fprintf>
     5e4:	ldr	w9, [x20, #100]
     5e8:	ldr	w8, [x20, #28]
     5ec:	adrp	x10, 0 <list_super2>
     5f0:	adrp	x11, 0 <list_super2>
     5f4:	add	x10, x10, #0x0
     5f8:	add	x11, x11, #0x0
     5fc:	tst	w9, #0x200
     600:	lsl	w2, w22, w8
     604:	csel	x1, x11, x10, eq  // eq = none
     608:	mov	x0, x19
     60c:	bl	0 <fprintf>
     610:	ldrb	w8, [x20, #96]
     614:	tbz	w8, #7, 62c <list_super2+0x62c>
     618:	ldrh	w2, [x20, #254]
     61c:	adrp	x1, 0 <list_super2>
     620:	add	x1, x1, #0x0
     624:	mov	x0, x19
     628:	bl	0 <fprintf>
     62c:	ldrh	w2, [x20, #206]
     630:	cbz	w2, 644 <list_super2+0x644>
     634:	adrp	x1, 0 <list_super2>
     638:	add	x1, x1, #0x0
     63c:	mov	x0, x19
     640:	bl	0 <fprintf>
     644:	ldr	w2, [x20, #32]
     648:	adrp	x1, 0 <list_super2>
     64c:	add	x1, x1, #0x0
     650:	mov	x0, x19
     654:	bl	0 <fprintf>
     658:	ldr	w8, [x20, #100]
     65c:	ldr	w2, [x20, #36]
     660:	adrp	x9, 0 <list_super2>
     664:	adrp	x10, 0 <list_super2>
     668:	add	x9, x9, #0x0
     66c:	add	x10, x10, #0x0
     670:	tst	w8, #0x200
     674:	csel	x1, x10, x9, eq  // eq = none
     678:	mov	x0, x19
     67c:	bl	0 <fprintf>
     680:	ldr	w2, [x20, #40]
     684:	adrp	x1, 0 <list_super2>
     688:	add	x1, x1, #0x0
     68c:	mov	x0, x19
     690:	bl	0 <fprintf>
     694:	adrp	x1, 0 <list_super2>
     698:	add	x1, x1, #0x0
     69c:	mov	x0, x19
     6a0:	mov	w2, w21
     6a4:	bl	0 <fprintf>
     6a8:	ldrh	w2, [x20, #356]
     6ac:	cbz	w2, 6c0 <list_super2+0x6c0>
     6b0:	adrp	x1, 0 <list_super2>
     6b4:	add	x1, x1, #0x0
     6b8:	mov	x0, x19
     6bc:	bl	0 <fprintf>
     6c0:	ldr	w2, [x20, #368]
     6c4:	cbz	w2, 6d8 <list_super2+0x6d8>
     6c8:	adrp	x1, 0 <list_super2>
     6cc:	add	x1, x1, #0x0
     6d0:	mov	x0, x19
     6d4:	bl	0 <fprintf>
     6d8:	ldr	w2, [x20, #260]
     6dc:	cbz	w2, 6f0 <list_super2+0x6f0>
     6e0:	adrp	x1, 0 <list_super2>
     6e4:	add	x1, x1, #0x0
     6e8:	mov	x0, x19
     6ec:	bl	0 <fprintf>
     6f0:	ldrb	w8, [x20, #372]
     6f4:	cbz	w8, 710 <list_super2+0x710>
     6f8:	mov	w9, #0x1                   	// #1
     6fc:	adrp	x1, 0 <list_super2>
     700:	lsl	w2, w9, w8
     704:	add	x1, x1, #0x0
     708:	mov	x0, x19
     70c:	bl	0 <fprintf>
     710:	ldr	w8, [x20, #264]
     714:	cbz	w8, 738 <list_super2+0x738>
     718:	add	x0, sp, #0x8
     71c:	str	x8, [sp, #8]
     720:	bl	0 <ctime>
     724:	adrp	x1, 0 <list_super2>
     728:	mov	x2, x0
     72c:	add	x1, x1, #0x0
     730:	mov	x0, x19
     734:	bl	0 <fprintf>
     738:	ldr	w8, [x20, #44]
     73c:	str	x8, [sp, #8]
     740:	cbz	w8, 754 <list_super2+0x754>
     744:	add	x0, sp, #0x8
     748:	bl	0 <ctime>
     74c:	mov	x2, x0
     750:	b	75c <list_super2+0x75c>
     754:	adrp	x2, 0 <list_super2>
     758:	add	x2, x2, #0x0
     75c:	adrp	x1, 0 <list_super2>
     760:	add	x1, x1, #0x0
     764:	mov	x0, x19
     768:	bl	0 <fprintf>
     76c:	ldr	w8, [x20, #48]
     770:	add	x0, sp, #0x8
     774:	str	x8, [sp, #8]
     778:	bl	0 <ctime>
     77c:	adrp	x1, 0 <list_super2>
     780:	mov	x2, x0
     784:	add	x1, x1, #0x0
     788:	mov	x0, x19
     78c:	bl	0 <fprintf>
     790:	ldrh	w2, [x20, #52]
     794:	adrp	x1, 0 <list_super2>
     798:	add	x1, x1, #0x0
     79c:	mov	x0, x19
     7a0:	bl	0 <fprintf>
     7a4:	ldrsh	w2, [x20, #54]
     7a8:	adrp	x1, 0 <list_super2>
     7ac:	add	x1, x1, #0x0
     7b0:	mov	x0, x19
     7b4:	bl	0 <fprintf>
     7b8:	ldr	w8, [x20, #64]
     7bc:	add	x0, sp, #0x8
     7c0:	str	x8, [sp, #8]
     7c4:	bl	0 <ctime>
     7c8:	adrp	x1, 0 <list_super2>
     7cc:	mov	x2, x0
     7d0:	add	x1, x1, #0x0
     7d4:	mov	x0, x19
     7d8:	bl	0 <fprintf>
     7dc:	ldr	w21, [x20, #68]
     7e0:	adrp	x8, 0 <list_super2>
     7e4:	strb	wzr, [x8]
     7e8:	cbz	w21, 8d8 <list_super2+0x8d8>
     7ec:	mov	w8, #0x8cff                	// #36095
     7f0:	movk	w8, #0x27, lsl #16
     7f4:	adrp	x24, 0 <list_super2>
     7f8:	adrp	x26, 0 <list_super2>
     7fc:	cmp	w21, w8
     800:	add	x24, x24, #0x0
     804:	add	x26, x26, #0x0
     808:	mov	w27, w21
     80c:	b.ls	848 <list_super2+0x848>  // b.plast
     810:	mov	w10, #0x19ff                	// #6655
     814:	movk	w10, #0x4f, lsl #16
     818:	add	w8, w8, #0x1
     81c:	mov	w9, #0x7300                	// #29440
     820:	cmp	w21, w10
     824:	adrp	x0, 0 <list_super2>
     828:	adrp	x1, 0 <list_super2>
     82c:	movk	w9, #0xffd8, lsl #16
     830:	udiv	w2, w21, w8
     834:	csel	x3, x26, x24, hi  // hi = pmore
     838:	add	x0, x0, #0x0
     83c:	add	x1, x1, #0x0
     840:	madd	w27, w2, w9, w21
     844:	bl	0 <sprintf>
     848:	mov	w8, #0x3a7f                	// #14975
     84c:	movk	w8, #0x9, lsl #16
     850:	adrp	x22, 0 <list_super2>
     854:	adrp	x25, 0 <list_super2>
     858:	cmp	w27, w8
     85c:	add	x22, x22, #0x0
     860:	add	x25, x25, #0x0
     864:	b.hi	8e4 <list_super2+0x8e4>  // b.pmore
     868:	lsr	w8, w27, #7
     86c:	cmp	w8, #0x2a3
     870:	b.cs	944 <list_super2+0x944>  // b.hs, b.nlast
     874:	cbz	w27, 99c <list_super2+0x99c>
     878:	mov	w8, #0xb3c5                	// #46021
     87c:	movk	w8, #0x91a2, lsl #16
     880:	mov	x23, x22
     884:	umull	x8, w27, w8
     888:	ldrb	w12, [x23, #80]!
     88c:	mov	w9, #0xfffff1f0            	// #-3600
     890:	mov	w10, #0x8889                	// #34953
     894:	lsr	x3, x8, #43
     898:	movk	w10, #0x8888, lsl #16
     89c:	madd	w8, w3, w9, w27
     8a0:	umull	x9, w8, w10
     8a4:	mov	w11, #0xffffffc4            	// #-60
     8a8:	lsr	x4, x9, #37
     8ac:	cmp	w12, #0x0
     8b0:	adrp	x1, 0 <list_super2>
     8b4:	madd	w5, w4, w11, w8
     8b8:	csel	x2, x24, x25, eq  // eq = none
     8bc:	add	x1, x1, #0x0
     8c0:	mov	x0, x22
     8c4:	bl	0 <sprintf>
     8c8:	mov	x0, x23
     8cc:	mov	x1, x22
     8d0:	bl	0 <strcat>
     8d4:	b	9a4 <list_super2+0x9a4>
     8d8:	adrp	x23, 0 <list_super2>
     8dc:	add	x23, x23, #0x0
     8e0:	b	9a4 <list_super2+0x9a4>
     8e4:	mov	x23, x22
     8e8:	ldrb	w10, [x23, #80]!
     8ec:	mov	w11, #0x74ff                	// #29951
     8f0:	movk	w11, #0x12, lsl #16
     8f4:	add	w8, w8, #0x1
     8f8:	cmp	w10, #0x0
     8fc:	mov	w9, #0xc580                	// #50560
     900:	csel	x2, x24, x25, eq  // eq = none
     904:	cmp	w27, w11
     908:	adrp	x1, 0 <list_super2>
     90c:	movk	w9, #0xfff6, lsl #16
     910:	udiv	w3, w27, w8
     914:	csel	x4, x26, x24, hi  // hi = pmore
     918:	add	x1, x1, #0x0
     91c:	mov	x0, x22
     920:	madd	w28, w3, w9, w27
     924:	bl	0 <sprintf>
     928:	mov	x0, x23
     92c:	mov	x1, x22
     930:	bl	0 <strcat>
     934:	mov	w27, w28
     938:	lsr	w8, w27, #7
     93c:	cmp	w8, #0x2a3
     940:	b.cc	874 <list_super2+0x874>  // b.lo, b.ul, b.last
     944:	mov	x23, x22
     948:	ldrb	w11, [x23, #80]!
     94c:	mov	w8, #0x517f                	// #20863
     950:	movk	w8, #0x1, lsl #16
     954:	lsr	w10, w27, #8
     958:	cmp	w11, #0x0
     95c:	mov	w9, #0xae80                	// #44672
     960:	add	w8, w8, #0x1
     964:	csel	x2, x24, x25, eq  // eq = none
     968:	cmp	w10, #0x2a2
     96c:	adrp	x1, 0 <list_super2>
     970:	movk	w9, #0xfffe, lsl #16
     974:	udiv	w3, w27, w8
     978:	csel	x4, x26, x24, hi  // hi = pmore
     97c:	add	x1, x1, #0x0
     980:	mov	x0, x22
     984:	madd	w27, w3, w9, w27
     988:	bl	0 <sprintf>
     98c:	mov	x0, x23
     990:	mov	x1, x22
     994:	bl	0 <strcat>
     998:	cbnz	w27, 878 <list_super2+0x878>
     99c:	adrp	x23, 0 <list_super2>
     9a0:	add	x23, x23, #0x0
     9a4:	adrp	x1, 0 <list_super2>
     9a8:	add	x1, x1, #0x0
     9ac:	mov	x0, x19
     9b0:	mov	w2, w21
     9b4:	mov	x3, x23
     9b8:	bl	0 <fprintf>
     9bc:	ldr	w8, [x20, #68]
     9c0:	cbz	w8, 9ec <list_super2+0x9ec>
     9c4:	ldr	w9, [x20, #64]
     9c8:	mov	x0, sp
     9cc:	add	w8, w9, w8
     9d0:	str	x8, [sp]
     9d4:	bl	0 <ctime>
     9d8:	adrp	x1, 0 <list_super2>
     9dc:	mov	x2, x0
     9e0:	add	x1, x1, #0x0
     9e4:	mov	x0, x19
     9e8:	bl	0 <fprintf>
     9ec:	ldr	x8, [x20, #376]
     9f0:	cbz	x8, a98 <list_super2+0xa98>
     9f4:	adrp	x0, 0 <list_super2>
     9f8:	add	x0, x0, #0x0
     9fc:	mov	w1, #0x1a                  	// #26
     a00:	mov	w2, #0x1                   	// #1
     a04:	mov	x3, x19
     a08:	bl	0 <fwrite>
     a0c:	ldr	x2, [x20, #376]
     a10:	lsr	x8, x2, #13
     a14:	cbnz	x8, a24 <list_super2+0xa24>
     a18:	adrp	x1, 0 <list_super2>
     a1c:	add	x1, x1, #0x0
     a20:	b	a90 <list_super2+0xa90>
     a24:	lsr	x8, x2, #23
     a28:	cbnz	x8, a40 <list_super2+0xa40>
     a2c:	add	x8, x2, #0x200
     a30:	adrp	x1, 0 <list_super2>
     a34:	lsr	x2, x8, #10
     a38:	add	x1, x1, #0x0
     a3c:	b	a90 <list_super2+0xa90>
     a40:	lsr	x8, x2, #33
     a44:	cbnz	x8, a5c <list_super2+0xa5c>
     a48:	add	x8, x2, #0x80, lsl #12
     a4c:	adrp	x1, 0 <list_super2>
     a50:	lsr	x2, x8, #20
     a54:	add	x1, x1, #0x0
     a58:	b	a90 <list_super2+0xa90>
     a5c:	lsr	x8, x2, #43
     a60:	cbnz	x8, a7c <list_super2+0xa7c>
     a64:	mov	w8, #0x20000000            	// #536870912
     a68:	add	x8, x2, x8
     a6c:	adrp	x1, 0 <list_super2>
     a70:	lsr	x2, x8, #30
     a74:	add	x1, x1, #0x0
     a78:	b	a90 <list_super2+0xa90>
     a7c:	mov	x8, #0x8000000000          	// #549755813888
     a80:	add	x8, x2, x8
     a84:	adrp	x1, 0 <list_super2>
     a88:	lsr	x2, x8, #40
     a8c:	add	x1, x1, #0x0
     a90:	mov	x0, x19
     a94:	bl	0 <fprintf>
     a98:	adrp	x0, 0 <list_super2>
     a9c:	add	x0, x0, #0x0
     aa0:	mov	w1, #0x1a                  	// #26
     aa4:	mov	w2, #0x1                   	// #1
     aa8:	mov	x3, x19
     aac:	bl	0 <fwrite>
     ab0:	ldrh	w21, [x20, #80]
     ab4:	adrp	x1, 0 <list_super2>
     ab8:	add	x1, x1, #0x0
     abc:	mov	x0, x19
     ac0:	mov	w2, w21
     ac4:	bl	0 <fprintf>
     ac8:	mov	w0, w21
     acc:	bl	0 <getpwuid>
     ad0:	cbz	x0, aec <list_super2+0xaec>
     ad4:	ldr	x2, [x0]
     ad8:	adrp	x1, 0 <list_super2>
     adc:	add	x1, x1, #0x0
     ae0:	mov	x0, x19
     ae4:	bl	0 <fprintf>
     ae8:	b	b04 <list_super2+0xb04>
     aec:	adrp	x0, 0 <list_super2>
     af0:	add	x0, x0, #0x0
     af4:	mov	w1, #0xf                   	// #15
     af8:	mov	w2, #0x1                   	// #1
     afc:	mov	x3, x19
     b00:	bl	0 <fwrite>
     b04:	adrp	x0, 0 <list_super2>
     b08:	add	x0, x0, #0x0
     b0c:	mov	w1, #0x1a                  	// #26
     b10:	mov	w2, #0x1                   	// #1
     b14:	mov	x3, x19
     b18:	bl	0 <fwrite>
     b1c:	ldrh	w21, [x20, #82]
     b20:	adrp	x1, 0 <list_super2>
     b24:	add	x1, x1, #0x0
     b28:	mov	x0, x19
     b2c:	mov	w2, w21
     b30:	bl	0 <fprintf>
     b34:	mov	w0, w21
     b38:	bl	0 <getgrgid>
     b3c:	cbz	x0, b60 <list_super2+0xb60>
     b40:	ldr	x2, [x0]
     b44:	adrp	x1, 0 <list_super2>
     b48:	add	x1, x1, #0x0
     b4c:	mov	x0, x19
     b50:	bl	0 <fprintf>
     b54:	ldr	w8, [x20, #76]
     b58:	cbnz	w8, b80 <list_super2+0xb80>
     b5c:	b	bd8 <list_super2+0xbd8>
     b60:	adrp	x0, 0 <list_super2>
     b64:	add	x0, x0, #0x0
     b68:	mov	w1, #0x10                  	// #16
     b6c:	mov	w2, #0x1                   	// #1
     b70:	mov	x3, x19
     b74:	bl	0 <fwrite>
     b78:	ldr	w8, [x20, #76]
     b7c:	cbz	w8, bd8 <list_super2+0xbd8>
     b80:	ldr	w2, [x20, #84]
     b84:	adrp	x1, 0 <list_super2>
     b88:	add	x1, x1, #0x0
     b8c:	mov	x0, x19
     b90:	bl	0 <fprintf>
     b94:	ldrh	w2, [x20, #88]
     b98:	adrp	x1, 0 <list_super2>
     b9c:	add	x1, x1, #0x0
     ba0:	mov	x0, x19
     ba4:	bl	0 <fprintf>
     ba8:	ldrh	w2, [x20, #348]
     bac:	cbz	w2, bc0 <list_super2+0xbc0>
     bb0:	adrp	x1, 0 <list_super2>
     bb4:	add	x1, x1, #0x0
     bb8:	mov	x0, x19
     bbc:	bl	0 <fprintf>
     bc0:	ldrh	w2, [x20, #350]
     bc4:	cbz	w2, bd8 <list_super2+0xbd8>
     bc8:	adrp	x1, 0 <list_super2>
     bcc:	add	x1, x1, #0x0
     bd0:	mov	x0, x19
     bd4:	bl	0 <fprintf>
     bd8:	add	x21, x20, #0xd0
     bdc:	mov	x0, x21
     be0:	bl	0 <e2p_is_null_uuid>
     be4:	cbnz	w0, c04 <list_super2+0xc04>
     be8:	mov	x0, x21
     bec:	bl	0 <e2p_uuid2str>
     bf0:	adrp	x1, 0 <list_super2>
     bf4:	mov	x2, x0
     bf8:	add	x1, x1, #0x0
     bfc:	mov	x0, x19
     c00:	bl	0 <fprintf>
     c04:	ldr	w2, [x20, #224]
     c08:	cbz	w2, c1c <list_super2+0xc1c>
     c0c:	adrp	x1, 0 <list_super2>
     c10:	add	x1, x1, #0x0
     c14:	mov	x0, x19
     c18:	bl	0 <fprintf>
     c1c:	ldr	w2, [x20, #228]
     c20:	cbz	w2, c34 <list_super2+0xc34>
     c24:	adrp	x1, 0 <list_super2>
     c28:	add	x1, x1, #0x0
     c2c:	mov	x0, x19
     c30:	bl	0 <fprintf>
     c34:	ldr	w2, [x20, #232]
     c38:	cbz	w2, c4c <list_super2+0xc4c>
     c3c:	adrp	x1, 0 <list_super2>
     c40:	add	x1, x1, #0x0
     c44:	mov	x0, x19
     c48:	bl	0 <fprintf>
     c4c:	ldrb	w8, [x20, #92]
     c50:	ldrb	w0, [x20, #252]
     c54:	tbnz	w8, #5, c78 <list_super2+0xc78>
     c58:	cbnz	w0, c78 <list_super2+0xc78>
     c5c:	add	x21, x20, #0xec
     c60:	mov	x0, x21
     c64:	bl	0 <e2p_is_null_uuid>
     c68:	cbz	w0, ca0 <list_super2+0xca0>
     c6c:	ldrb	w8, [x20, #253]
     c70:	cbnz	w8, cc4 <list_super2+0xcc4>
     c74:	b	d00 <list_super2+0xd00>
     c78:	bl	0 <e2p_hash2string>
     c7c:	adrp	x1, 0 <list_super2>
     c80:	mov	x2, x0
     c84:	add	x1, x1, #0x0
     c88:	mov	x0, x19
     c8c:	bl	0 <fprintf>
     c90:	add	x21, x20, #0xec
     c94:	mov	x0, x21
     c98:	bl	0 <e2p_is_null_uuid>
     c9c:	cbnz	w0, c6c <list_super2+0xc6c>
     ca0:	mov	x0, x21
     ca4:	bl	0 <e2p_uuid2str>
     ca8:	adrp	x1, 0 <list_super2>
     cac:	mov	x2, x0
     cb0:	add	x1, x1, #0x0
     cb4:	mov	x0, x19
     cb8:	bl	0 <fprintf>
     cbc:	ldrb	w8, [x20, #253]
     cc0:	cbz	w8, d00 <list_super2+0xd00>
     cc4:	adrp	x0, 0 <list_super2>
     cc8:	add	x0, x0, #0x0
     ccc:	mov	w1, #0x1a                  	// #26
     cd0:	mov	w2, #0x1                   	// #1
     cd4:	mov	x3, x19
     cd8:	bl	0 <fwrite>
     cdc:	ldrb	w2, [x20, #253]
     ce0:	cmp	w2, #0x1
     ce4:	b.ne	d0c <list_super2+0xd0c>  // b.any
     ce8:	adrp	x0, 0 <list_super2>
     cec:	add	x0, x0, #0x0
     cf0:	mov	w1, #0xd                   	// #13
     cf4:	mov	w2, #0x1                   	// #1
     cf8:	mov	x3, x19
     cfc:	bl	0 <fwrite>
     d00:	ldr	w8, [x20, #588]
     d04:	cbnz	w8, d2c <list_super2+0xd2c>
     d08:	b	d24 <list_super2+0xd24>
     d0c:	adrp	x1, 0 <list_super2>
     d10:	add	x1, x1, #0x0
     d14:	mov	x0, x19
     d18:	bl	0 <fprintf>
     d1c:	ldr	w8, [x20, #588]
     d20:	cbnz	w8, d2c <list_super2+0xd2c>
     d24:	ldr	w8, [x20, #592]
     d28:	cbz	w8, d80 <list_super2+0xd80>
     d2c:	adrp	x0, 0 <list_super2>
     d30:	add	x0, x0, #0x0
     d34:	mov	w1, #0x1a                  	// #26
     d38:	mov	w2, #0x1                   	// #1
     d3c:	mov	x3, x19
     d40:	bl	0 <fwrite>
     d44:	ldr	w2, [x20, #588]
     d48:	cbz	w2, d5c <list_super2+0xd5c>
     d4c:	adrp	x1, 0 <list_super2>
     d50:	add	x1, x1, #0x0
     d54:	mov	x0, x19
     d58:	bl	0 <fprintf>
     d5c:	ldr	w2, [x20, #592]
     d60:	cbz	w2, d74 <list_super2+0xd74>
     d64:	adrp	x1, 0 <list_super2>
     d68:	add	x1, x1, #0x0
     d6c:	mov	x0, x19
     d70:	bl	0 <fprintf>
     d74:	mov	w0, #0xa                   	// #10
     d78:	mov	x1, x19
     d7c:	bl	0 <fputc>
     d80:	ldr	w2, [x20, #384]
     d84:	cbz	w2, dc0 <list_super2+0xdc0>
     d88:	adrp	x1, 0 <list_super2>
     d8c:	add	x1, x1, #0x0
     d90:	mov	x0, x19
     d94:	bl	0 <fprintf>
     d98:	ldr	w2, [x20, #388]
     d9c:	adrp	x1, 0 <list_super2>
     da0:	add	x1, x1, #0x0
     da4:	mov	x0, x19
     da8:	bl	0 <fprintf>
     dac:	ldr	x2, [x20, #392]
     db0:	adrp	x1, 0 <list_super2>
     db4:	add	x1, x1, #0x0
     db8:	mov	x0, x19
     dbc:	bl	0 <fprintf>
     dc0:	ldr	w2, [x20, #400]
     dc4:	cbz	w2, dd8 <list_super2+0xdd8>
     dc8:	adrp	x1, 0 <list_super2>
     dcc:	add	x1, x1, #0x0
     dd0:	mov	x0, x19
     dd4:	bl	0 <fprintf>
     dd8:	ldr	w2, [x20, #404]
     ddc:	cbz	w2, df0 <list_super2+0xdf0>
     de0:	adrp	x1, 0 <list_super2>
     de4:	add	x1, x1, #0x0
     de8:	mov	x0, x19
     dec:	bl	0 <fprintf>
     df0:	ldr	w8, [x20, #408]
     df4:	cbz	w8, e88 <list_super2+0xe88>
     df8:	add	x0, sp, #0x8
     dfc:	str	x8, [sp, #8]
     e00:	bl	0 <ctime>
     e04:	adrp	x1, 0 <list_super2>
     e08:	mov	x2, x0
     e0c:	add	x1, x1, #0x0
     e10:	mov	x0, x19
     e14:	bl	0 <fprintf>
     e18:	movi	v0.2d, #0x0
     e1c:	add	x1, x20, #0x1a8
     e20:	add	x0, sp, #0x10
     e24:	mov	w2, #0x20                  	// #32
     e28:	stp	q0, q0, [sp, #16]
     e2c:	stp	q0, q0, [sp, #48]
     e30:	str	q0, [sp, #80]
     e34:	bl	0 <strncpy>
     e38:	adrp	x1, 0 <list_super2>
     e3c:	add	x1, x1, #0x0
     e40:	add	x2, sp, #0x10
     e44:	mov	x0, x19
     e48:	bl	0 <fprintf>
     e4c:	ldr	w2, [x20, #456]
     e50:	adrp	x1, 0 <list_super2>
     e54:	add	x1, x1, #0x0
     e58:	mov	x0, x19
     e5c:	bl	0 <fprintf>
     e60:	ldr	w2, [x20, #412]
     e64:	adrp	x1, 0 <list_super2>
     e68:	add	x1, x1, #0x0
     e6c:	mov	x0, x19
     e70:	bl	0 <fprintf>
     e74:	ldr	x2, [x20, #416]
     e78:	adrp	x1, 0 <list_super2>
     e7c:	add	x1, x1, #0x0
     e80:	mov	x0, x19
     e84:	bl	0 <fprintf>
     e88:	ldr	w8, [x20, #460]
     e8c:	cbz	w8, f20 <list_super2+0xf20>
     e90:	add	x0, sp, #0x8
     e94:	str	x8, [sp, #8]
     e98:	bl	0 <ctime>
     e9c:	adrp	x1, 0 <list_super2>
     ea0:	mov	x2, x0
     ea4:	add	x1, x1, #0x0
     ea8:	mov	x0, x19
     eac:	bl	0 <fprintf>
     eb0:	movi	v0.2d, #0x0
     eb4:	add	x1, x20, #0x1e0
     eb8:	add	x0, sp, #0x10
     ebc:	mov	w2, #0x20                  	// #32
     ec0:	stp	q0, q0, [sp, #16]
     ec4:	stp	q0, q0, [sp, #48]
     ec8:	str	q0, [sp, #80]
     ecc:	bl	0 <strncpy>
     ed0:	adrp	x1, 0 <list_super2>
     ed4:	add	x1, x1, #0x0
     ed8:	add	x2, sp, #0x10
     edc:	mov	x0, x19
     ee0:	bl	0 <fprintf>
     ee4:	ldr	w2, [x20, #468]
     ee8:	adrp	x1, 0 <list_super2>
     eec:	add	x1, x1, #0x0
     ef0:	mov	x0, x19
     ef4:	bl	0 <fprintf>
     ef8:	ldr	w2, [x20, #464]
     efc:	adrp	x1, 0 <list_super2>
     f00:	add	x1, x1, #0x0
     f04:	mov	x0, x19
     f08:	bl	0 <fprintf>
     f0c:	ldr	x2, [x20, #472]
     f10:	adrp	x1, 0 <list_super2>
     f14:	add	x1, x1, #0x0
     f18:	mov	x0, x19
     f1c:	bl	0 <fprintf>
     f20:	ldrb	w8, [x20, #97]
     f24:	tbz	w8, #0, f50 <list_super2+0xf50>
     f28:	ldr	x2, [x20, #360]
     f2c:	adrp	x1, 0 <list_super2>
     f30:	add	x1, x1, #0x0
     f34:	mov	x0, x19
     f38:	bl	0 <fprintf>
     f3c:	ldrh	w2, [x20, #358]
     f40:	adrp	x1, 0 <list_super2>
     f44:	add	x1, x1, #0x0
     f48:	mov	x0, x19
     f4c:	bl	0 <fprintf>
     f50:	ldr	w8, [x20, #576]
     f54:	cbz	w8, f74 <list_super2+0xf74>
     f58:	ldr	w3, [x20, #576]
     f5c:	adrp	x1, 0 <list_super2>
     f60:	adrp	x2, 0 <list_super2>
     f64:	add	x1, x1, #0x0
     f68:	add	x2, x2, #0x0
     f6c:	mov	x0, x19
     f70:	bl	0 <fprintf>
     f74:	ldr	w8, [x20, #580]
     f78:	cbz	w8, f98 <list_super2+0xf98>
     f7c:	ldr	w3, [x20, #580]
     f80:	adrp	x1, 0 <list_super2>
     f84:	adrp	x2, 0 <list_super2>
     f88:	add	x1, x1, #0x0
     f8c:	add	x2, x2, #0x0
     f90:	mov	x0, x19
     f94:	bl	0 <fprintf>
     f98:	ldr	w8, [x20, #620]
     f9c:	cbz	w8, fbc <list_super2+0xfbc>
     fa0:	ldr	w3, [x20, #620]
     fa4:	adrp	x1, 0 <list_super2>
     fa8:	adrp	x2, 0 <list_super2>
     fac:	add	x1, x1, #0x0
     fb0:	add	x2, x2, #0x0
     fb4:	mov	x0, x19
     fb8:	bl	0 <fprintf>
     fbc:	ldrb	w8, [x20, #101]
     fc0:	tbnz	w8, #2, 101c <list_super2+0x101c>
     fc4:	add	x21, x20, #0x258
     fc8:	mov	x0, x21
     fcc:	bl	0 <e2p_is_null_uuid>
     fd0:	cbz	w0, 106c <list_super2+0x106c>
     fd4:	ldr	w8, [x20, #96]
     fd8:	tbnz	w8, #13, 1090 <list_super2+0x1090>
     fdc:	tbz	w8, #17, ffc <list_super2+0xffc>
     fe0:	ldrh	w0, [x20, #636]
     fe4:	bl	0 <e2p_encoding2str>
     fe8:	adrp	x1, 0 <list_super2>
     fec:	mov	x2, x0
     ff0:	add	x1, x1, #0x0
     ff4:	mov	x0, x19
     ff8:	bl	0 <fprintf>
     ffc:	ldp	x20, x19, [sp, #176]
    1000:	ldp	x22, x21, [sp, #160]
    1004:	ldp	x24, x23, [sp, #144]
    1008:	ldp	x26, x25, [sp, #128]
    100c:	ldp	x28, x27, [sp, #112]
    1010:	ldp	x29, x30, [sp, #96]
    1014:	add	sp, sp, #0xc0
    1018:	ret
    101c:	ldrb	w8, [x20, #373]
    1020:	adrp	x9, 0 <list_super2>
    1024:	adrp	x10, 0 <list_super2>
    1028:	add	x9, x9, #0x0
    102c:	add	x10, x10, #0x0
    1030:	cmp	w8, #0x1
    1034:	adrp	x1, 0 <list_super2>
    1038:	csel	x2, x10, x9, eq  // eq = none
    103c:	add	x1, x1, #0x0
    1040:	mov	x0, x19
    1044:	bl	0 <fprintf>
    1048:	ldr	w2, [x20, #1020]
    104c:	adrp	x1, 0 <list_super2>
    1050:	add	x1, x1, #0x0
    1054:	mov	x0, x19
    1058:	bl	0 <fprintf>
    105c:	add	x21, x20, #0x258
    1060:	mov	x0, x21
    1064:	bl	0 <e2p_is_null_uuid>
    1068:	cbnz	w0, fd4 <list_super2+0xfd4>
    106c:	mov	x0, x21
    1070:	bl	0 <e2p_uuid2str>
    1074:	adrp	x1, 0 <list_super2>
    1078:	mov	x2, x0
    107c:	add	x1, x1, #0x0
    1080:	mov	x0, x19
    1084:	bl	0 <fprintf>
    1088:	ldr	w8, [x20, #96]
    108c:	tbz	w8, #13, fdc <list_super2+0xfdc>
    1090:	ldr	w2, [x20, #624]
    1094:	adrp	x1, 0 <list_super2>
    1098:	add	x1, x1, #0x0
    109c:	mov	x0, x19
    10a0:	bl	0 <fprintf>
    10a4:	ldr	w8, [x20, #96]
    10a8:	tbnz	w8, #17, fe0 <list_super2+0xfe0>
    10ac:	b	ffc <list_super2+0xffc>

00000000000010b0 <list_super>:
    10b0:	adrp	x8, 0 <stdout>
    10b4:	ldr	x1, [x8]
    10b8:	b	0 <list_super2>

ljs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_list_journal_super>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x20, x19, [sp, #80]
   8:	mov	x19, x0
   c:	adrp	x0, 0 <e2p_list_journal_super>
  10:	stp	x22, x21, [sp, #64]
  14:	mov	w21, w2
  18:	mov	x20, x1
  1c:	add	x0, x0, #0x0
  20:	mov	w1, #0x19                  	// #25
  24:	mov	w2, #0x1                   	// #1
  28:	mov	x3, x19
  2c:	str	x27, [sp, #16]
  30:	stp	x26, x25, [sp, #32]
  34:	stp	x24, x23, [sp, #48]
  38:	mov	x29, sp
  3c:	mov	w22, #0x1                   	// #1
  40:	bl	0 <fwrite>
  44:	ldr	w8, [x20, #36]
  48:	adrp	x23, 0 <e2p_list_journal_super>
  4c:	mov	w24, wzr
  50:	mov	w25, #0x20                  	// #32
  54:	rev	w26, w8
  58:	add	x23, x23, #0x0
  5c:	b	6c <e2p_list_journal_super+0x6c>
  60:	subs	w25, w25, #0x1
  64:	lsl	w22, w22, #1
  68:	b.eq	98 <e2p_list_journal_super+0x98>  // b.none
  6c:	tst	w22, w26
  70:	b.eq	60 <e2p_list_journal_super+0x60>  // b.none
  74:	mov	w0, wzr
  78:	mov	w1, w22
  7c:	bl	0 <e2p_jrnl_feature2string>
  80:	mov	x2, x0
  84:	mov	x0, x19
  88:	mov	x1, x23
  8c:	bl	0 <fprintf>
  90:	add	w24, w24, #0x1
  94:	b	60 <e2p_list_journal_super+0x60>
  98:	ldr	w8, [x20, #40]
  9c:	adrp	x23, 0 <e2p_list_journal_super>
  a0:	mov	w22, #0x1                   	// #1
  a4:	mov	w25, #0x20                  	// #32
  a8:	rev	w26, w8
  ac:	add	x23, x23, #0x0
  b0:	b	c0 <e2p_list_journal_super+0xc0>
  b4:	subs	w25, w25, #0x1
  b8:	lsl	w22, w22, #1
  bc:	b.eq	ec <e2p_list_journal_super+0xec>  // b.none
  c0:	tst	w22, w26
  c4:	b.eq	b4 <e2p_list_journal_super+0xb4>  // b.none
  c8:	mov	w0, #0x1                   	// #1
  cc:	mov	w1, w22
  d0:	bl	0 <e2p_jrnl_feature2string>
  d4:	mov	x2, x0
  d8:	mov	x0, x19
  dc:	mov	x1, x23
  e0:	bl	0 <fprintf>
  e4:	add	w24, w24, #0x1
  e8:	b	b4 <e2p_list_journal_super+0xb4>
  ec:	ldr	w8, [x20, #44]
  f0:	adrp	x23, 0 <e2p_list_journal_super>
  f4:	mov	w22, #0x1                   	// #1
  f8:	mov	w25, #0x20                  	// #32
  fc:	rev	w26, w8
 100:	add	x23, x23, #0x0
 104:	b	114 <e2p_list_journal_super+0x114>
 108:	subs	w25, w25, #0x1
 10c:	lsl	w22, w22, #1
 110:	b.eq	140 <e2p_list_journal_super+0x140>  // b.none
 114:	tst	w22, w26
 118:	b.eq	108 <e2p_list_journal_super+0x108>  // b.none
 11c:	mov	w0, #0x2                   	// #2
 120:	mov	w1, w22
 124:	bl	0 <e2p_jrnl_feature2string>
 128:	mov	x2, x0
 12c:	mov	x0, x19
 130:	mov	x1, x23
 134:	bl	0 <fprintf>
 138:	add	w24, w24, #0x1
 13c:	b	108 <e2p_list_journal_super+0x108>
 140:	cbnz	w24, 15c <e2p_list_journal_super+0x15c>
 144:	adrp	x0, 0 <e2p_list_journal_super>
 148:	add	x0, x0, #0x0
 14c:	mov	w1, #0x7                   	// #7
 150:	mov	w2, #0x1                   	// #1
 154:	mov	x3, x19
 158:	bl	0 <fwrite>
 15c:	mov	w0, #0xa                   	// #10
 160:	mov	x1, x19
 164:	bl	0 <fputc>
 168:	adrp	x0, 0 <e2p_list_journal_super>
 16c:	add	x0, x0, #0x0
 170:	mov	w1, #0x1a                  	// #26
 174:	mov	w2, #0x1                   	// #1
 178:	mov	x3, x19
 17c:	bl	0 <fwrite>
 180:	ldp	w8, w9, [x20, #12]
 184:	rev	w8, w8
 188:	lsr	w8, w8, #10
 18c:	rev	w9, w9
 190:	mul	w2, w8, w9
 194:	lsr	w8, w2, #13
 198:	cbnz	w8, 1a8 <e2p_list_journal_super+0x1a8>
 19c:	adrp	x1, 0 <e2p_list_journal_super>
 1a0:	add	x1, x1, #0x0
 1a4:	b	1b4 <e2p_list_journal_super+0x1b4>
 1a8:	adrp	x1, 0 <e2p_list_journal_super>
 1ac:	lsr	w2, w2, #10
 1b0:	add	x1, x1, #0x0
 1b4:	mov	x0, x19
 1b8:	bl	0 <fprintf>
 1bc:	ldr	w8, [x20, #12]
 1c0:	ldr	w22, [x20, #64]
 1c4:	rev	w2, w8
 1c8:	cmp	w2, w21
 1cc:	b.eq	1e0 <e2p_list_journal_super+0x1e0>  // b.none
 1d0:	adrp	x1, 0 <e2p_list_journal_super>
 1d4:	add	x1, x1, #0x0
 1d8:	mov	x0, x19
 1dc:	bl	0 <fprintf>
 1e0:	ldr	w8, [x20, #16]
 1e4:	adrp	x1, 0 <e2p_list_journal_super>
 1e8:	add	x1, x1, #0x0
 1ec:	mov	x0, x19
 1f0:	rev	w2, w8
 1f4:	bl	0 <fprintf>
 1f8:	ldr	w8, [x20, #20]
 1fc:	mov	w23, #0x1000000             	// #16777216
 200:	cmp	w8, w23
 204:	b.eq	21c <e2p_list_journal_super+0x21c>  // b.none
 208:	adrp	x1, 0 <e2p_list_journal_super>
 20c:	rev	w2, w8
 210:	add	x1, x1, #0x0
 214:	mov	x0, x19
 218:	bl	0 <fprintf>
 21c:	ldp	w8, w9, [x20, #24]
 220:	adrp	x1, 0 <e2p_list_journal_super>
 224:	add	x1, x1, #0x0
 228:	mov	x0, x19
 22c:	rev	w2, w8
 230:	rev	w3, w9
 234:	rev	w21, w22
 238:	bl	0 <fprintf>
 23c:	cmp	w22, w23
 240:	b.ne	338 <e2p_list_journal_super+0x338>  // b.any
 244:	ldrb	w8, [x20, #39]
 248:	tbnz	w8, #0, 354 <e2p_list_journal_super+0x354>
 24c:	ldrb	w8, [x20, #43]
 250:	tst	w8, #0x18
 254:	b.eq	28c <e2p_list_journal_super+0x28c>  // b.none
 258:	ldrb	w8, [x20, #80]
 25c:	ldr	w10, [x20, #252]
 260:	adrp	x9, 0 <e2p_list_journal_super>
 264:	adrp	x11, 0 <e2p_list_journal_super>
 268:	add	x9, x9, #0x0
 26c:	add	x11, x11, #0x0
 270:	cmp	w8, #0x4
 274:	adrp	x1, 0 <e2p_list_journal_super>
 278:	csel	x2, x11, x9, eq  // eq = none
 27c:	rev	w3, w10
 280:	add	x1, x1, #0x0
 284:	mov	x0, x19
 288:	bl	0 <fprintf>
 28c:	cmp	w21, #0x1
 290:	b.hi	2ac <e2p_list_journal_super+0x2ac>  // b.pmore
 294:	add	x0, x20, #0x100
 298:	bl	0 <e2p_is_null_uuid>
 29c:	cbnz	w0, 304 <e2p_list_journal_super+0x304>
 2a0:	mov	w8, #0x1000000             	// #16777216
 2a4:	cmp	w22, w8
 2a8:	b.ne	304 <e2p_list_journal_super+0x304>  // b.any
 2ac:	adrp	x26, 0 <e2p_list_journal_super>
 2b0:	adrp	x27, 0 <e2p_list_journal_super>
 2b4:	mov	x22, xzr
 2b8:	mov	x25, xzr
 2bc:	add	x23, x20, #0x100
 2c0:	mov	w24, w21
 2c4:	add	x26, x26, #0x0
 2c8:	add	x27, x27, #0x0
 2cc:	cmp	x22, #0x0
 2d0:	add	x0, x23, x22
 2d4:	csel	x21, x27, x26, eq  // eq = none
 2d8:	bl	0 <e2p_uuid2str>
 2dc:	mov	x1, x0
 2e0:	mov	x0, x21
 2e4:	bl	0 <printf>
 2e8:	add	x8, x25, #0x1
 2ec:	cmp	x8, x24
 2f0:	b.cs	304 <e2p_list_journal_super+0x304>  // b.hs, b.nlast
 2f4:	cmp	x25, #0x2f
 2f8:	add	x22, x22, #0x10
 2fc:	mov	x25, x8
 300:	b.cc	2cc <e2p_list_journal_super+0x2cc>  // b.lo, b.ul, b.last
 304:	ldr	w8, [x20, #32]
 308:	cbz	w8, 37c <e2p_list_journal_super+0x37c>
 30c:	mov	x0, x19
 310:	ldp	x20, x19, [sp, #80]
 314:	ldp	x22, x21, [sp, #64]
 318:	ldp	x24, x23, [sp, #48]
 31c:	ldp	x26, x25, [sp, #32]
 320:	ldr	x27, [sp, #16]
 324:	adrp	x1, 0 <e2p_list_journal_super>
 328:	rev	w2, w8
 32c:	add	x1, x1, #0x0
 330:	ldp	x29, x30, [sp], #96
 334:	b	0 <fprintf>
 338:	adrp	x1, 0 <e2p_list_journal_super>
 33c:	add	x1, x1, #0x0
 340:	mov	x0, x19
 344:	mov	w2, w21
 348:	bl	0 <fprintf>
 34c:	ldrb	w8, [x20, #39]
 350:	tbz	w8, #0, 24c <e2p_list_journal_super+0x24c>
 354:	adrp	x0, 0 <e2p_list_journal_super>
 358:	add	x0, x0, #0x0
 35c:	mov	w1, #0x20                  	// #32
 360:	mov	w2, #0x1                   	// #1
 364:	mov	x3, x19
 368:	bl	0 <fwrite>
 36c:	ldrb	w8, [x20, #43]
 370:	tst	w8, #0x18
 374:	b.ne	258 <e2p_list_journal_super+0x258>  // b.any
 378:	b	28c <e2p_list_journal_super+0x28c>
 37c:	ldp	x20, x19, [sp, #80]
 380:	ldp	x22, x21, [sp, #64]
 384:	ldp	x24, x23, [sp, #48]
 388:	ldp	x26, x25, [sp, #32]
 38c:	ldr	x27, [sp, #16]
 390:	ldp	x29, x30, [sp], #96
 394:	ret

mntopts.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_mntopt2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x5f
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.gt	58 <e2p_mntopt2string+0x58>
  14:	sub	w8, w0, #0x1
  18:	cmp	w8, #0x3f
  1c:	b.hi	178 <e2p_mntopt2string+0x178>  // b.pmore
  20:	adrp	x9, 0 <e2p_mntopt2string>
  24:	add	x9, x9, #0x0
  28:	adr	x10, 40 <e2p_mntopt2string+0x40>
  2c:	ldrb	w11, [x9, x8]
  30:	add	x10, x10, x11, lsl #2
  34:	adrp	x19, 0 <e2p_mntopt2string>
  38:	add	x19, x19, #0x0
  3c:	br	x10
  40:	adrp	x19, 0 <e2p_mntopt2string>
  44:	add	x19, x19, #0x0
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret
  58:	cmp	w0, #0x1ff
  5c:	b.le	90 <e2p_mntopt2string+0x90>
  60:	cmp	w0, #0x200
  64:	b.eq	130 <e2p_mntopt2string+0x130>  // b.none
  68:	cmp	w0, #0x400
  6c:	b.eq	148 <e2p_mntopt2string+0x148>  // b.none
  70:	cmp	w0, #0x800
  74:	b.ne	178 <e2p_mntopt2string+0x178>  // b.any
  78:	adrp	x19, 0 <e2p_mntopt2string>
  7c:	add	x19, x19, #0x0
  80:	mov	x0, x19
  84:	ldr	x19, [sp, #16]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret
  90:	cmp	w0, #0x60
  94:	b.eq	160 <e2p_mntopt2string+0x160>  // b.none
  98:	cmp	w0, #0x100
  9c:	b.ne	178 <e2p_mntopt2string+0x178>  // b.any
  a0:	adrp	x19, 0 <e2p_mntopt2string>
  a4:	add	x19, x19, #0x0
  a8:	mov	x0, x19
  ac:	ldr	x19, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret
  b8:	adrp	x19, 0 <e2p_mntopt2string>
  bc:	add	x19, x19, #0x0
  c0:	mov	x0, x19
  c4:	ldr	x19, [sp, #16]
  c8:	ldp	x29, x30, [sp], #32
  cc:	ret
  d0:	adrp	x19, 0 <e2p_mntopt2string>
  d4:	add	x19, x19, #0x0
  d8:	mov	x0, x19
  dc:	ldr	x19, [sp, #16]
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret
  e8:	adrp	x19, 0 <e2p_mntopt2string>
  ec:	add	x19, x19, #0x0
  f0:	mov	x0, x19
  f4:	ldr	x19, [sp, #16]
  f8:	ldp	x29, x30, [sp], #32
  fc:	ret
 100:	adrp	x19, 0 <e2p_mntopt2string>
 104:	add	x19, x19, #0x0
 108:	mov	x0, x19
 10c:	ldr	x19, [sp, #16]
 110:	ldp	x29, x30, [sp], #32
 114:	ret
 118:	adrp	x19, 0 <e2p_mntopt2string>
 11c:	add	x19, x19, #0x0
 120:	mov	x0, x19
 124:	ldr	x19, [sp, #16]
 128:	ldp	x29, x30, [sp], #32
 12c:	ret
 130:	adrp	x19, 0 <e2p_mntopt2string>
 134:	add	x19, x19, #0x0
 138:	mov	x0, x19
 13c:	ldr	x19, [sp, #16]
 140:	ldp	x29, x30, [sp], #32
 144:	ret
 148:	adrp	x19, 0 <e2p_mntopt2string>
 14c:	add	x19, x19, #0x0
 150:	mov	x0, x19
 154:	ldr	x19, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
 160:	adrp	x19, 0 <e2p_mntopt2string>
 164:	add	x19, x19, #0x0
 168:	mov	x0, x19
 16c:	ldr	x19, [sp, #16]
 170:	ldp	x29, x30, [sp], #32
 174:	ret
 178:	lsr	w8, w0, #1
 17c:	adrp	x19, 0 <e2p_mntopt2string>
 180:	clz	w8, w8
 184:	mov	w9, #0x20                  	// #32
 188:	add	x19, x19, #0x0
 18c:	adrp	x1, 0 <e2p_mntopt2string>
 190:	sub	w2, w9, w8
 194:	add	x1, x1, #0x0
 198:	mov	x0, x19
 19c:	bl	0 <sprintf>
 1a0:	mov	x0, x19
 1a4:	ldr	x19, [sp, #16]
 1a8:	ldp	x29, x30, [sp], #32
 1ac:	ret

00000000000001b0 <e2p_string2mntopt>:
 1b0:	sub	sp, sp, #0x30
 1b4:	stp	x20, x19, [sp, #32]
 1b8:	mov	x19, x1
 1bc:	adrp	x1, 0 <e2p_mntopt2string>
 1c0:	add	x1, x1, #0x0
 1c4:	stp	x29, x30, [sp, #16]
 1c8:	add	x29, sp, #0x10
 1cc:	mov	x20, x0
 1d0:	bl	0 <strcasecmp>
 1d4:	cbz	w0, 2e0 <e2p_string2mntopt+0x130>
 1d8:	adrp	x1, 0 <e2p_mntopt2string>
 1dc:	add	x1, x1, #0x0
 1e0:	mov	x0, x20
 1e4:	bl	0 <strcasecmp>
 1e8:	cbz	w0, 2ec <e2p_string2mntopt+0x13c>
 1ec:	adrp	x1, 0 <e2p_mntopt2string>
 1f0:	add	x1, x1, #0x0
 1f4:	mov	x0, x20
 1f8:	bl	0 <strcasecmp>
 1fc:	cbz	w0, 2f8 <e2p_string2mntopt+0x148>
 200:	adrp	x1, 0 <e2p_mntopt2string>
 204:	add	x1, x1, #0x0
 208:	mov	x0, x20
 20c:	bl	0 <strcasecmp>
 210:	cbz	w0, 304 <e2p_string2mntopt+0x154>
 214:	adrp	x1, 0 <e2p_mntopt2string>
 218:	add	x1, x1, #0x0
 21c:	mov	x0, x20
 220:	bl	0 <strcasecmp>
 224:	cbz	w0, 310 <e2p_string2mntopt+0x160>
 228:	adrp	x1, 0 <e2p_mntopt2string>
 22c:	add	x1, x1, #0x0
 230:	mov	x0, x20
 234:	bl	0 <strcasecmp>
 238:	cbz	w0, 31c <e2p_string2mntopt+0x16c>
 23c:	adrp	x1, 0 <e2p_mntopt2string>
 240:	add	x1, x1, #0x0
 244:	mov	x0, x20
 248:	bl	0 <strcasecmp>
 24c:	cbz	w0, 328 <e2p_string2mntopt+0x178>
 250:	adrp	x1, 0 <e2p_mntopt2string>
 254:	add	x1, x1, #0x0
 258:	mov	x0, x20
 25c:	bl	0 <strcasecmp>
 260:	cbz	w0, 334 <e2p_string2mntopt+0x184>
 264:	adrp	x1, 0 <e2p_mntopt2string>
 268:	add	x1, x1, #0x0
 26c:	mov	x0, x20
 270:	bl	0 <strcasecmp>
 274:	cbz	w0, 340 <e2p_string2mntopt+0x190>
 278:	adrp	x1, 0 <e2p_mntopt2string>
 27c:	add	x1, x1, #0x0
 280:	mov	x0, x20
 284:	bl	0 <strcasecmp>
 288:	cbz	w0, 34c <e2p_string2mntopt+0x19c>
 28c:	adrp	x1, 0 <e2p_mntopt2string>
 290:	add	x1, x1, #0x0
 294:	mov	x0, x20
 298:	bl	0 <strcasecmp>
 29c:	cbz	w0, 358 <e2p_string2mntopt+0x1a8>
 2a0:	adrp	x1, 0 <e2p_mntopt2string>
 2a4:	add	x1, x1, #0x0
 2a8:	mov	x0, x20
 2ac:	bl	0 <strcasecmp>
 2b0:	cbz	w0, 364 <e2p_string2mntopt+0x1b4>
 2b4:	adrp	x1, 0 <e2p_mntopt2string>
 2b8:	add	x1, x1, #0x0
 2bc:	mov	w2, #0x7                   	// #7
 2c0:	mov	x0, x20
 2c4:	bl	0 <strncasecmp>
 2c8:	cbz	w0, 388 <e2p_string2mntopt+0x1d8>
 2cc:	mov	w0, #0x1                   	// #1
 2d0:	ldp	x20, x19, [sp, #32]
 2d4:	ldp	x29, x30, [sp, #16]
 2d8:	add	sp, sp, #0x30
 2dc:	ret
 2e0:	adrp	x8, 0 <e2p_mntopt2string>
 2e4:	add	x8, x8, #0x0
 2e8:	b	36c <e2p_string2mntopt+0x1bc>
 2ec:	adrp	x8, 0 <e2p_mntopt2string>
 2f0:	add	x8, x8, #0x0
 2f4:	b	36c <e2p_string2mntopt+0x1bc>
 2f8:	adrp	x8, 0 <e2p_mntopt2string>
 2fc:	add	x8, x8, #0x0
 300:	b	36c <e2p_string2mntopt+0x1bc>
 304:	adrp	x8, 0 <e2p_mntopt2string>
 308:	add	x8, x8, #0x0
 30c:	b	36c <e2p_string2mntopt+0x1bc>
 310:	adrp	x8, 0 <e2p_mntopt2string>
 314:	add	x8, x8, #0x0
 318:	b	36c <e2p_string2mntopt+0x1bc>
 31c:	adrp	x8, 0 <e2p_mntopt2string>
 320:	add	x8, x8, #0x0
 324:	b	36c <e2p_string2mntopt+0x1bc>
 328:	adrp	x8, 0 <e2p_mntopt2string>
 32c:	add	x8, x8, #0x0
 330:	b	36c <e2p_string2mntopt+0x1bc>
 334:	adrp	x8, 0 <e2p_mntopt2string>
 338:	add	x8, x8, #0x0
 33c:	b	36c <e2p_string2mntopt+0x1bc>
 340:	adrp	x8, 0 <e2p_mntopt2string>
 344:	add	x8, x8, #0x0
 348:	b	36c <e2p_string2mntopt+0x1bc>
 34c:	adrp	x8, 0 <e2p_mntopt2string>
 350:	add	x8, x8, #0x0
 354:	b	36c <e2p_string2mntopt+0x1bc>
 358:	adrp	x8, 0 <e2p_mntopt2string>
 35c:	add	x8, x8, #0x0
 360:	b	36c <e2p_string2mntopt+0x1bc>
 364:	adrp	x8, 0 <e2p_mntopt2string>
 368:	add	x8, x8, #0x0
 36c:	ldr	w8, [x8]
 370:	mov	w0, wzr
 374:	str	w8, [x19]
 378:	ldp	x20, x19, [sp, #32]
 37c:	ldp	x29, x30, [sp, #16]
 380:	add	sp, sp, #0x30
 384:	ret
 388:	ldrb	w8, [x20, #8]!
 38c:	cbz	w8, 2cc <e2p_string2mntopt+0x11c>
 390:	add	x1, sp, #0x8
 394:	mov	w2, #0xa                   	// #10
 398:	mov	x0, x20
 39c:	bl	0 <strtol>
 3a0:	mov	x8, x0
 3a4:	cmp	w8, #0x1f
 3a8:	b.hi	2cc <e2p_string2mntopt+0x11c>  // b.pmore
 3ac:	ldr	x9, [sp, #8]
 3b0:	mov	w0, #0x1                   	// #1
 3b4:	ldrb	w9, [x9]
 3b8:	cbnz	w9, 378 <e2p_string2mntopt+0x1c8>
 3bc:	lsl	w8, w0, w8
 3c0:	b	370 <e2p_string2mntopt+0x1c0>

00000000000003c4 <e2p_edit_mntopts>:
 3c4:	sub	sp, sp, #0x50
 3c8:	stp	x29, x30, [sp, #16]
 3cc:	stp	x24, x23, [sp, #32]
 3d0:	stp	x22, x21, [sp, #48]
 3d4:	stp	x20, x19, [sp, #64]
 3d8:	add	x29, sp, #0x10
 3dc:	mov	w21, w2
 3e0:	mov	x20, x1
 3e4:	mov	x22, x0
 3e8:	bl	0 <strlen>
 3ec:	add	x0, x0, #0x1
 3f0:	bl	0 <malloc>
 3f4:	cbz	x0, 524 <e2p_edit_mntopts+0x160>
 3f8:	mov	x1, x22
 3fc:	mov	x19, x0
 400:	bl	0 <strcpy>
 404:	cbz	w21, 52c <e2p_edit_mntopts+0x168>
 408:	mov	x24, x19
 40c:	b	424 <e2p_edit_mntopts+0x60>
 410:	ldr	w9, [x20]
 414:	orr	w8, w9, w8
 418:	add	x24, x22, #0x1
 41c:	str	w8, [x20]
 420:	cbz	x22, 638 <e2p_edit_mntopts+0x274>
 424:	ldrb	w23, [x24]
 428:	cbz	w23, 638 <e2p_edit_mntopts+0x274>
 42c:	bl	0 <__ctype_b_loc>
 430:	ldr	x9, [x0]
 434:	add	x0, x24, #0x1
 438:	and	x8, x23, #0xff
 43c:	ldrh	w10, [x9, x8, lsl #1]
 440:	tbz	w10, #13, 458 <e2p_edit_mntopts+0x94>
 444:	ldrb	w23, [x0], #1
 448:	cbnz	w23, 438 <e2p_edit_mntopts+0x74>
 44c:	mov	x22, xzr
 450:	sub	x0, x0, #0x1
 454:	b	4dc <e2p_edit_mntopts+0x118>
 458:	and	w11, w23, #0xff
 45c:	sub	x8, x0, #0x1
 460:	cmp	w11, #0x2c
 464:	mov	x22, x8
 468:	b.eq	490 <e2p_edit_mntopts+0xcc>  // b.none
 46c:	mov	x22, x8
 470:	tbnz	w10, #13, 490 <e2p_edit_mntopts+0xcc>
 474:	mov	x22, x8
 478:	ldrb	w10, [x22, #1]!
 47c:	cbz	x10, 4bc <e2p_edit_mntopts+0xf8>
 480:	cmp	w10, #0x2c
 484:	b.eq	490 <e2p_edit_mntopts+0xcc>  // b.none
 488:	ldrh	w10, [x9, x10, lsl #1]
 48c:	tbz	w10, #13, 478 <e2p_edit_mntopts+0xb4>
 490:	strb	wzr, [x22]
 494:	ldrb	w23, [x8]
 498:	and	w9, w23, #0xff
 49c:	cmp	w9, #0x2b
 4a0:	b.eq	4cc <e2p_edit_mntopts+0x108>  // b.none
 4a4:	cmp	w9, #0x2d
 4a8:	b.eq	4b4 <e2p_edit_mntopts+0xf0>  // b.none
 4ac:	cmp	w9, #0x5e
 4b0:	b.ne	4d4 <e2p_edit_mntopts+0x110>  // b.any
 4b4:	mov	w23, #0x1                   	// #1
 4b8:	b	4dc <e2p_edit_mntopts+0x118>
 4bc:	mov	x22, xzr
 4c0:	and	w9, w23, #0xff
 4c4:	cmp	w9, #0x2b
 4c8:	b.ne	4a4 <e2p_edit_mntopts+0xe0>  // b.any
 4cc:	mov	w23, wzr
 4d0:	b	4dc <e2p_edit_mntopts+0x118>
 4d4:	mov	w23, wzr
 4d8:	mov	x0, x8
 4dc:	sub	x1, x29, #0x4
 4e0:	bl	1b0 <e2p_string2mntopt>
 4e4:	cbnz	w0, 640 <e2p_edit_mntopts+0x27c>
 4e8:	ldur	w8, [x29, #-4]
 4ec:	tst	w8, w21
 4f0:	b.eq	640 <e2p_edit_mntopts+0x27c>  // b.none
 4f4:	tst	w8, #0x60
 4f8:	b.eq	508 <e2p_edit_mntopts+0x144>  // b.none
 4fc:	ldr	w9, [x20]
 500:	and	w9, w9, #0xffffff9f
 504:	str	w9, [x20]
 508:	cbz	w23, 410 <e2p_edit_mntopts+0x4c>
 50c:	ldr	w9, [x20]
 510:	bic	w8, w9, w8
 514:	add	x24, x22, #0x1
 518:	str	w8, [x20]
 51c:	cbnz	x22, 424 <e2p_edit_mntopts+0x60>
 520:	b	638 <e2p_edit_mntopts+0x274>
 524:	mov	w20, #0x1                   	// #1
 528:	b	64c <e2p_edit_mntopts+0x288>
 52c:	mov	x23, x19
 530:	b	548 <e2p_edit_mntopts+0x184>
 534:	ldr	w9, [x20]
 538:	orr	w8, w9, w8
 53c:	add	x23, x21, #0x1
 540:	str	w8, [x20]
 544:	cbz	x21, 638 <e2p_edit_mntopts+0x274>
 548:	ldrb	w22, [x23]
 54c:	cbz	w22, 638 <e2p_edit_mntopts+0x274>
 550:	bl	0 <__ctype_b_loc>
 554:	ldr	x9, [x0]
 558:	add	x0, x23, #0x1
 55c:	and	x8, x22, #0xff
 560:	ldrh	w10, [x9, x8, lsl #1]
 564:	tbz	w10, #13, 57c <e2p_edit_mntopts+0x1b8>
 568:	ldrb	w22, [x0], #1
 56c:	cbnz	w22, 55c <e2p_edit_mntopts+0x198>
 570:	mov	x21, xzr
 574:	sub	x0, x0, #0x1
 578:	b	5fc <e2p_edit_mntopts+0x238>
 57c:	and	w11, w22, #0xff
 580:	sub	x8, x0, #0x1
 584:	cmp	w11, #0x2c
 588:	mov	x21, x8
 58c:	b.eq	5b0 <e2p_edit_mntopts+0x1ec>  // b.none
 590:	mov	x21, x8
 594:	tbnz	w10, #13, 5b0 <e2p_edit_mntopts+0x1ec>
 598:	ldrb	w10, [x21, #1]!
 59c:	cbz	x10, 5dc <e2p_edit_mntopts+0x218>
 5a0:	cmp	w10, #0x2c
 5a4:	b.eq	5b0 <e2p_edit_mntopts+0x1ec>  // b.none
 5a8:	ldrh	w10, [x9, x10, lsl #1]
 5ac:	tbz	w10, #13, 598 <e2p_edit_mntopts+0x1d4>
 5b0:	strb	wzr, [x21]
 5b4:	ldrb	w22, [x8]
 5b8:	and	w9, w22, #0xff
 5bc:	cmp	w9, #0x2b
 5c0:	b.eq	5ec <e2p_edit_mntopts+0x228>  // b.none
 5c4:	cmp	w9, #0x2d
 5c8:	b.eq	5d4 <e2p_edit_mntopts+0x210>  // b.none
 5cc:	cmp	w9, #0x5e
 5d0:	b.ne	5f4 <e2p_edit_mntopts+0x230>  // b.any
 5d4:	mov	w22, #0x1                   	// #1
 5d8:	b	5fc <e2p_edit_mntopts+0x238>
 5dc:	mov	x21, xzr
 5e0:	and	w9, w22, #0xff
 5e4:	cmp	w9, #0x2b
 5e8:	b.ne	5c4 <e2p_edit_mntopts+0x200>  // b.any
 5ec:	mov	w22, wzr
 5f0:	b	5fc <e2p_edit_mntopts+0x238>
 5f4:	mov	w22, wzr
 5f8:	mov	x0, x8
 5fc:	sub	x1, x29, #0x4
 600:	bl	1b0 <e2p_string2mntopt>
 604:	cbnz	w0, 640 <e2p_edit_mntopts+0x27c>
 608:	ldur	w8, [x29, #-4]
 60c:	tst	w8, #0x60
 610:	b.eq	620 <e2p_edit_mntopts+0x25c>  // b.none
 614:	ldr	w9, [x20]
 618:	and	w9, w9, #0xffffff9f
 61c:	str	w9, [x20]
 620:	cbz	w22, 534 <e2p_edit_mntopts+0x170>
 624:	ldr	w9, [x20]
 628:	bic	w8, w9, w8
 62c:	add	x23, x21, #0x1
 630:	str	w8, [x20]
 634:	cbnz	x21, 548 <e2p_edit_mntopts+0x184>
 638:	mov	w20, wzr
 63c:	b	644 <e2p_edit_mntopts+0x280>
 640:	mov	w20, #0x1                   	// #1
 644:	mov	x0, x19
 648:	bl	0 <free>
 64c:	mov	w0, w20
 650:	ldp	x20, x19, [sp, #64]
 654:	ldp	x22, x21, [sp, #48]
 658:	ldp	x24, x23, [sp, #32]
 65c:	ldp	x29, x30, [sp, #16]
 660:	add	sp, sp, #0x50
 664:	ret

parse_num.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_num_blocks2>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w1
  10:	add	x1, x29, #0x18
  14:	mov	w2, wzr
  18:	bl	0 <strtoull>
  1c:	ldr	x9, [x29, #24]
  20:	ldrb	w8, [x9]
  24:	cbz	w8, 44 <parse_num_blocks2+0x44>
  28:	ldrb	w9, [x9, #1]
  2c:	cbz	w9, 58 <parse_num_blocks2+0x58>
  30:	mov	x8, xzr
  34:	ldr	x19, [sp, #16]
  38:	mov	x0, x8
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	mov	x8, x0
  48:	ldr	x19, [sp, #16]
  4c:	mov	x0, x8
  50:	ldp	x29, x30, [sp], #32
  54:	ret
  58:	sub	w9, w8, #0x47
  5c:	cmp	w9, #0x2d
  60:	mov	x8, xzr
  64:	b.hi	34 <parse_num_blocks2+0x34>  // b.pmore
  68:	adrp	x10, 0 <parse_num_blocks2>
  6c:	add	x10, x10, #0x0
  70:	adr	x11, 34 <parse_num_blocks2+0x34>
  74:	ldrb	w12, [x10, x9]
  78:	add	x11, x11, x12, lsl #2
  7c:	br	x11
  80:	lsl	x0, x0, #10
  84:	lsl	x0, x0, #10
  88:	lsl	x0, x0, #10
  8c:	tbnz	w19, #31, a4 <parse_num_blocks2+0xa4>
  90:	lsr	x8, x0, x19
  94:	ldr	x19, [sp, #16]
  98:	mov	x0, x8
  9c:	ldp	x29, x30, [sp], #32
  a0:	ret
  a4:	lsl	x8, x0, #10
  a8:	ldr	x19, [sp, #16]
  ac:	mov	x0, x8
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret
  b8:	tbnz	w19, #31, d4 <parse_num_blocks2+0xd4>
  bc:	add	w8, w19, #0x1
  c0:	lsr	x8, x0, x8
  c4:	ldr	x19, [sp, #16]
  c8:	mov	x0, x8
  cc:	ldp	x29, x30, [sp], #32
  d0:	ret
  d4:	lsl	x8, x0, #9
  d8:	ldr	x19, [sp, #16]
  dc:	mov	x0, x8
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret

00000000000000e8 <parse_num_blocks>:
  e8:	b	0 <parse_num_blocks2>

pe.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_errors>:
   0:	and	w8, w1, #0xffff
   4:	cmp	w8, #0x3
   8:	mov	x3, x0
   c:	b.eq	34 <print_fs_errors+0x34>  // b.none
  10:	cmp	w8, #0x2
  14:	b.eq	48 <print_fs_errors+0x48>  // b.none
  18:	cmp	w8, #0x1
  1c:	b.ne	5c <print_fs_errors+0x5c>  // b.any
  20:	adrp	x0, 0 <print_fs_errors>
  24:	add	x0, x0, #0x0
  28:	mov	w1, #0x8                   	// #8
  2c:	mov	w2, #0x1                   	// #1
  30:	b	0 <fwrite>
  34:	adrp	x0, 0 <print_fs_errors>
  38:	add	x0, x0, #0x0
  3c:	mov	w1, #0x5                   	// #5
  40:	mov	w2, #0x1                   	// #1
  44:	b	0 <fwrite>
  48:	adrp	x0, 0 <print_fs_errors>
  4c:	add	x0, x0, #0x0
  50:	mov	w1, #0x11                  	// #17
  54:	mov	w2, #0x1                   	// #1
  58:	b	0 <fwrite>
  5c:	adrp	x0, 0 <print_fs_errors>
  60:	add	x0, x0, #0x0
  64:	mov	w1, #0x12                  	// #18
  68:	mov	w2, #0x1                   	// #1
  6c:	b	0 <fwrite>

pf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_flags>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x20, x1
   c:	mov	x19, x0
  10:	stp	x22, x21, [sp, #16]
  14:	mov	x29, sp
  18:	tbnz	w2, #0, 160 <print_flags+0x160>
  1c:	tbnz	w20, #0, 1f0 <print_flags+0x1f0>
  20:	mov	w0, #0x2d                  	// #45
  24:	mov	x1, x19
  28:	bl	0 <fputc>
  2c:	tbz	w20, #1, 200 <print_flags+0x200>
  30:	mov	w0, #0x75                  	// #117
  34:	mov	x1, x19
  38:	bl	0 <fputc>
  3c:	tbz	w20, #3, 210 <print_flags+0x210>
  40:	mov	w0, #0x53                  	// #83
  44:	mov	x1, x19
  48:	bl	0 <fputc>
  4c:	tbz	w20, #16, 220 <print_flags+0x220>
  50:	mov	w0, #0x44                  	// #68
  54:	mov	x1, x19
  58:	bl	0 <fputc>
  5c:	tbz	w20, #4, 230 <print_flags+0x230>
  60:	mov	w0, #0x69                  	// #105
  64:	mov	x1, x19
  68:	bl	0 <fputc>
  6c:	tbz	w20, #5, 240 <print_flags+0x240>
  70:	mov	w0, #0x61                  	// #97
  74:	mov	x1, x19
  78:	bl	0 <fputc>
  7c:	tbz	w20, #6, 250 <print_flags+0x250>
  80:	mov	w0, #0x64                  	// #100
  84:	mov	x1, x19
  88:	bl	0 <fputc>
  8c:	tbz	w20, #7, 260 <print_flags+0x260>
  90:	mov	w0, #0x41                  	// #65
  94:	mov	x1, x19
  98:	bl	0 <fputc>
  9c:	tbz	w20, #2, 270 <print_flags+0x270>
  a0:	mov	w0, #0x63                  	// #99
  a4:	mov	x1, x19
  a8:	bl	0 <fputc>
  ac:	tbz	w20, #11, 280 <print_flags+0x280>
  b0:	mov	w0, #0x45                  	// #69
  b4:	mov	x1, x19
  b8:	bl	0 <fputc>
  bc:	tbz	w20, #14, 290 <print_flags+0x290>
  c0:	mov	w0, #0x6a                  	// #106
  c4:	mov	x1, x19
  c8:	bl	0 <fputc>
  cc:	tbz	w20, #12, 2a0 <print_flags+0x2a0>
  d0:	mov	w0, #0x49                  	// #73
  d4:	mov	x1, x19
  d8:	bl	0 <fputc>
  dc:	tbz	w20, #15, 2b0 <print_flags+0x2b0>
  e0:	mov	w0, #0x74                  	// #116
  e4:	mov	x1, x19
  e8:	bl	0 <fputc>
  ec:	tbz	w20, #17, 2c0 <print_flags+0x2c0>
  f0:	mov	w0, #0x54                  	// #84
  f4:	mov	x1, x19
  f8:	bl	0 <fputc>
  fc:	tbz	w20, #19, 2d0 <print_flags+0x2d0>
 100:	mov	w0, #0x65                  	// #101
 104:	mov	x1, x19
 108:	bl	0 <fputc>
 10c:	tbz	w20, #23, 2e0 <print_flags+0x2e0>
 110:	mov	w0, #0x43                  	// #67
 114:	mov	x1, x19
 118:	bl	0 <fputc>
 11c:	tbz	w20, #30, 2f0 <print_flags+0x2f0>
 120:	mov	w0, #0x46                  	// #70
 124:	mov	x1, x19
 128:	bl	0 <fputc>
 12c:	tbz	w20, #28, 300 <print_flags+0x300>
 130:	mov	w0, #0x4e                  	// #78
 134:	mov	x1, x19
 138:	bl	0 <fputc>
 13c:	tbz	w20, #29, 310 <print_flags+0x310>
 140:	mov	w0, #0x50                  	// #80
 144:	mov	x1, x19
 148:	bl	0 <fputc>
 14c:	tbz	w20, #20, 320 <print_flags+0x320>
 150:	mov	w0, #0x56                  	// #86
 154:	mov	x1, x19
 158:	bl	0 <fputc>
 15c:	b	1e0 <print_flags+0x1e0>
 160:	adrp	x22, 0 <print_flags>
 164:	adrp	x21, 0 <print_flags>
 168:	mov	w9, #0x1                   	// #1
 16c:	add	x22, x22, #0x0
 170:	add	x21, x21, #0x0
 174:	mov	w8, #0x1                   	// #1
 178:	b	194 <print_flags+0x194>
 17c:	ldur	x0, [x22, #-8]
 180:	mov	x1, x19
 184:	bl	0 <fputs>
 188:	mov	w8, wzr
 18c:	ldr	x9, [x22], #24
 190:	cbz	x9, 1b8 <print_flags+0x1b8>
 194:	tst	x9, x20
 198:	b.eq	18c <print_flags+0x18c>  // b.none
 19c:	cbnz	w8, 17c <print_flags+0x17c>
 1a0:	mov	w1, #0x2                   	// #2
 1a4:	mov	w2, #0x1                   	// #1
 1a8:	mov	x0, x21
 1ac:	mov	x3, x19
 1b0:	bl	0 <fwrite>
 1b4:	b	17c <print_flags+0x17c>
 1b8:	cbz	w8, 1e0 <print_flags+0x1e0>
 1bc:	mov	x3, x19
 1c0:	ldp	x20, x19, [sp, #32]
 1c4:	ldp	x22, x21, [sp, #16]
 1c8:	adrp	x0, 0 <print_flags>
 1cc:	add	x0, x0, #0x0
 1d0:	mov	w1, #0x3                   	// #3
 1d4:	mov	w2, #0x1                   	// #1
 1d8:	ldp	x29, x30, [sp], #48
 1dc:	b	0 <fwrite>
 1e0:	ldp	x20, x19, [sp, #32]
 1e4:	ldp	x22, x21, [sp, #16]
 1e8:	ldp	x29, x30, [sp], #48
 1ec:	ret
 1f0:	mov	w0, #0x73                  	// #115
 1f4:	mov	x1, x19
 1f8:	bl	0 <fputc>
 1fc:	tbnz	w20, #1, 30 <print_flags+0x30>
 200:	mov	w0, #0x2d                  	// #45
 204:	mov	x1, x19
 208:	bl	0 <fputc>
 20c:	tbnz	w20, #3, 40 <print_flags+0x40>
 210:	mov	w0, #0x2d                  	// #45
 214:	mov	x1, x19
 218:	bl	0 <fputc>
 21c:	tbnz	w20, #16, 50 <print_flags+0x50>
 220:	mov	w0, #0x2d                  	// #45
 224:	mov	x1, x19
 228:	bl	0 <fputc>
 22c:	tbnz	w20, #4, 60 <print_flags+0x60>
 230:	mov	w0, #0x2d                  	// #45
 234:	mov	x1, x19
 238:	bl	0 <fputc>
 23c:	tbnz	w20, #5, 70 <print_flags+0x70>
 240:	mov	w0, #0x2d                  	// #45
 244:	mov	x1, x19
 248:	bl	0 <fputc>
 24c:	tbnz	w20, #6, 80 <print_flags+0x80>
 250:	mov	w0, #0x2d                  	// #45
 254:	mov	x1, x19
 258:	bl	0 <fputc>
 25c:	tbnz	w20, #7, 90 <print_flags+0x90>
 260:	mov	w0, #0x2d                  	// #45
 264:	mov	x1, x19
 268:	bl	0 <fputc>
 26c:	tbnz	w20, #2, a0 <print_flags+0xa0>
 270:	mov	w0, #0x2d                  	// #45
 274:	mov	x1, x19
 278:	bl	0 <fputc>
 27c:	tbnz	w20, #11, b0 <print_flags+0xb0>
 280:	mov	w0, #0x2d                  	// #45
 284:	mov	x1, x19
 288:	bl	0 <fputc>
 28c:	tbnz	w20, #14, c0 <print_flags+0xc0>
 290:	mov	w0, #0x2d                  	// #45
 294:	mov	x1, x19
 298:	bl	0 <fputc>
 29c:	tbnz	w20, #12, d0 <print_flags+0xd0>
 2a0:	mov	w0, #0x2d                  	// #45
 2a4:	mov	x1, x19
 2a8:	bl	0 <fputc>
 2ac:	tbnz	w20, #15, e0 <print_flags+0xe0>
 2b0:	mov	w0, #0x2d                  	// #45
 2b4:	mov	x1, x19
 2b8:	bl	0 <fputc>
 2bc:	tbnz	w20, #17, f0 <print_flags+0xf0>
 2c0:	mov	w0, #0x2d                  	// #45
 2c4:	mov	x1, x19
 2c8:	bl	0 <fputc>
 2cc:	tbnz	w20, #19, 100 <print_flags+0x100>
 2d0:	mov	w0, #0x2d                  	// #45
 2d4:	mov	x1, x19
 2d8:	bl	0 <fputc>
 2dc:	tbnz	w20, #23, 110 <print_flags+0x110>
 2e0:	mov	w0, #0x2d                  	// #45
 2e4:	mov	x1, x19
 2e8:	bl	0 <fputc>
 2ec:	tbnz	w20, #30, 120 <print_flags+0x120>
 2f0:	mov	w0, #0x2d                  	// #45
 2f4:	mov	x1, x19
 2f8:	bl	0 <fputc>
 2fc:	tbnz	w20, #28, 130 <print_flags+0x130>
 300:	mov	w0, #0x2d                  	// #45
 304:	mov	x1, x19
 308:	bl	0 <fputc>
 30c:	tbnz	w20, #29, 140 <print_flags+0x140>
 310:	mov	w0, #0x2d                  	// #45
 314:	mov	x1, x19
 318:	bl	0 <fputc>
 31c:	tbnz	w20, #20, 150 <print_flags+0x150>
 320:	mov	x1, x19
 324:	ldp	x20, x19, [sp, #32]
 328:	ldp	x22, x21, [sp, #16]
 32c:	mov	w0, #0x2d                  	// #45
 330:	ldp	x29, x30, [sp], #48
 334:	b	0 <fputc>

ps.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_state>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	and	w20, w1, #0xffff
  10:	mov	x29, sp
  14:	tbnz	w1, #0, 54 <print_fs_state+0x54>
  18:	adrp	x0, 0 <print_fs_state>
  1c:	add	x0, x0, #0x0
  20:	mov	w1, #0xa                   	// #10
  24:	mov	w2, #0x1                   	// #1
  28:	mov	x3, x19
  2c:	bl	0 <fwrite>
  30:	tbz	w20, #1, 70 <print_fs_state+0x70>
  34:	mov	x3, x19
  38:	ldp	x20, x19, [sp, #16]
  3c:	adrp	x0, 0 <print_fs_state>
  40:	add	x0, x0, #0x0
  44:	mov	w1, #0xc                   	// #12
  48:	mov	w2, #0x1                   	// #1
  4c:	ldp	x29, x30, [sp], #32
  50:	b	0 <fwrite>
  54:	adrp	x0, 0 <print_fs_state>
  58:	add	x0, x0, #0x0
  5c:	mov	w1, #0x6                   	// #6
  60:	mov	w2, #0x1                   	// #1
  64:	mov	x3, x19
  68:	bl	0 <fwrite>
  6c:	tbnz	w20, #1, 34 <print_fs_state+0x34>
  70:	ldp	x20, x19, [sp, #16]
  74:	ldp	x29, x30, [sp], #32
  78:	ret

setflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	w19, w0
   c:	mov	x20, x1
  10:	add	x2, sp, #0x10
  14:	mov	w0, wzr
  18:	mov	w1, w19
  1c:	stp	x29, x30, [sp, #144]
  20:	add	x29, sp, #0x90
  24:	bl	0 <__fxstat>
  28:	cbz	w0, 54 <setflags+0x54>
  2c:	mov	w1, #0x6602                	// #26114
  30:	add	x2, sp, #0xc
  34:	movk	w1, #0x4008, lsl #16
  38:	mov	w0, w19
  3c:	str	w20, [sp, #12]
  40:	bl	0 <ioctl>
  44:	ldp	x20, x19, [sp, #160]
  48:	ldp	x29, x30, [sp, #144]
  4c:	add	sp, sp, #0xb0
  50:	ret
  54:	ldr	w8, [sp, #32]
  58:	and	w8, w8, #0xf000
  5c:	cmp	w8, #0x4, lsl #12
  60:	b.eq	2c <setflags+0x2c>  // b.none
  64:	cmp	w8, #0x8, lsl #12
  68:	b.eq	2c <setflags+0x2c>  // b.none
  6c:	bl	0 <__errno_location>
  70:	mov	w8, #0x5f                  	// #95
  74:	str	w8, [x0]
  78:	mov	w0, #0xffffffff            	// #-1
  7c:	ldp	x20, x19, [sp, #160]
  80:	ldp	x29, x30, [sp, #144]
  84:	add	sp, sp, #0xb0
  88:	ret

setversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setversion>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	stur	w1, [x29, #-4]
  10:	mov	w1, #0x7602                	// #30210
  14:	sub	x2, x29, #0x4
  18:	movk	w1, #0x4008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldp	x29, x30, [sp, #16]
  24:	add	sp, sp, #0x20
  28:	ret

uuid.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_is_null_uuid>:
   0:	ldrb	w8, [x0]
   4:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
   8:	ldrb	w8, [x0, #1]
   c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  10:	ldrb	w8, [x0, #2]
  14:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  18:	ldrb	w8, [x0, #3]
  1c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  20:	ldrb	w8, [x0, #4]
  24:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  28:	ldrb	w8, [x0, #5]
  2c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  30:	ldrb	w8, [x0, #6]
  34:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  38:	ldrb	w8, [x0, #7]
  3c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  40:	ldrb	w8, [x0, #8]
  44:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  48:	ldrb	w8, [x0, #9]
  4c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  50:	ldrb	w8, [x0, #10]
  54:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  58:	ldrb	w8, [x0, #11]
  5c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  60:	ldrb	w8, [x0, #12]
  64:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  68:	ldrb	w8, [x0, #13]
  6c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  70:	ldrb	w8, [x0, #14]
  74:	cbz	w8, 80 <e2p_is_null_uuid+0x80>
  78:	mov	w0, wzr
  7c:	ret
  80:	ldrb	w8, [x0, #15]
  84:	cmp	w8, #0x0
  88:	cset	w0, eq  // eq = none
  8c:	ret

0000000000000090 <e2p_uuid_to_str>:
  90:	sub	sp, sp, #0x40
  94:	stp	x29, x30, [sp, #48]
  98:	ldr	w9, [x0]
  9c:	ldrh	w10, [x0, #4]
  a0:	ldrh	w11, [x0, #6]
  a4:	ldrb	w5, [x0, #8]
  a8:	ldrb	w6, [x0, #9]
  ac:	ldrb	w7, [x0, #10]
  b0:	ldrb	w12, [x0, #11]
  b4:	ldrb	w13, [x0, #12]
  b8:	ldrb	w14, [x0, #13]
  bc:	ldrb	w15, [x0, #14]
  c0:	ldrb	w16, [x0, #15]
  c4:	mov	x8, x1
  c8:	rev	w2, w9
  cc:	lsl	w9, w10, #16
  d0:	lsl	w10, w11, #16
  d4:	adrp	x1, 0 <e2p_is_null_uuid>
  d8:	rev	w3, w9
  dc:	rev	w4, w10
  e0:	add	x1, x1, #0x0
  e4:	mov	x0, x8
  e8:	add	x29, sp, #0x30
  ec:	str	w16, [sp, #32]
  f0:	str	w15, [sp, #24]
  f4:	str	w14, [sp, #16]
  f8:	str	w13, [sp, #8]
  fc:	str	w12, [sp]
 100:	bl	0 <sprintf>
 104:	ldp	x29, x30, [sp, #48]
 108:	add	sp, sp, #0x40
 10c:	ret

0000000000000110 <e2p_uuid2str>:
 110:	sub	sp, sp, #0x50
 114:	stp	x29, x30, [sp, #48]
 118:	ldrb	w8, [x0]
 11c:	ldrb	w9, [x0, #1]
 120:	str	x19, [sp, #64]
 124:	add	x29, sp, #0x30
 128:	orr	w10, w8, w9
 12c:	cbnz	w10, 1a4 <e2p_uuid2str+0x94>
 130:	ldrb	w9, [x0, #2]
 134:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 138:	ldrb	w9, [x0, #3]
 13c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 140:	ldrb	w9, [x0, #4]
 144:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 148:	ldrb	w9, [x0, #5]
 14c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 150:	ldrb	w9, [x0, #6]
 154:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 158:	ldrb	w9, [x0, #7]
 15c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 160:	ldrb	w9, [x0, #8]
 164:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 168:	ldrb	w9, [x0, #9]
 16c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 170:	ldrb	w9, [x0, #10]
 174:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 178:	ldrb	w9, [x0, #11]
 17c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 180:	ldrb	w9, [x0, #12]
 184:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 188:	ldrb	w9, [x0, #13]
 18c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 190:	ldrb	w9, [x0, #14]
 194:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 198:	ldrb	w9, [x0, #15]
 19c:	cbz	w9, 234 <e2p_uuid2str+0x124>
 1a0:	mov	w9, wzr
 1a4:	ldrb	w10, [x0, #2]
 1a8:	ldrb	w2, [x0, #3]
 1ac:	lsl	w8, w8, #16
 1b0:	ldrh	w11, [x0, #4]
 1b4:	ldrh	w12, [x0, #6]
 1b8:	bfi	w8, w9, #8, #8
 1bc:	orr	w8, w8, w10
 1c0:	ldrb	w5, [x0, #8]
 1c4:	ldrb	w6, [x0, #9]
 1c8:	ldrb	w7, [x0, #10]
 1cc:	ldrb	w13, [x0, #11]
 1d0:	ldrb	w9, [x0, #12]
 1d4:	ldrb	w10, [x0, #13]
 1d8:	bfi	w2, w8, #8, #24
 1dc:	ldrb	w8, [x0, #14]
 1e0:	ldrb	w14, [x0, #15]
 1e4:	adrp	x19, 0 <e2p_is_null_uuid>
 1e8:	lsl	w11, w11, #16
 1ec:	lsl	w12, w12, #16
 1f0:	add	x19, x19, #0x0
 1f4:	adrp	x1, 0 <e2p_is_null_uuid>
 1f8:	rev	w3, w11
 1fc:	rev	w4, w12
 200:	add	x1, x1, #0x0
 204:	mov	x0, x19
 208:	str	w14, [sp, #32]
 20c:	str	w8, [sp, #24]
 210:	str	w10, [sp, #16]
 214:	str	w9, [sp, #8]
 218:	str	w13, [sp]
 21c:	bl	0 <sprintf>
 220:	mov	x0, x19
 224:	ldr	x19, [sp, #64]
 228:	ldp	x29, x30, [sp, #48]
 22c:	add	sp, sp, #0x50
 230:	ret
 234:	adrp	x19, 0 <e2p_is_null_uuid>
 238:	add	x19, x19, #0x0
 23c:	b	220 <e2p_uuid2str+0x110>

ostype.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_os2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x4
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.hi	24 <e2p_os2string+0x24>  // b.pmore
  14:	adrp	x8, 0 <e2p_os2string>
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8, w0, uxtw #3]
  20:	b	2c <e2p_os2string+0x2c>
  24:	adrp	x19, 0 <e2p_os2string>
  28:	add	x19, x19, #0x0
  2c:	mov	x0, x19
  30:	bl	0 <strlen>
  34:	add	x0, x0, #0x1
  38:	bl	0 <malloc>
  3c:	cbz	x0, 48 <e2p_os2string+0x48>
  40:	mov	x1, x19
  44:	bl	0 <strcpy>
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret

0000000000000054 <e2p_string2os>:
  54:	stp	x29, x30, [sp, #-32]!
  58:	adrp	x1, 0 <e2p_os2string>
  5c:	add	x1, x1, #0x0
  60:	str	x19, [sp, #16]
  64:	mov	x29, sp
  68:	mov	x19, x0
  6c:	bl	0 <strcasecmp>
  70:	cbz	w0, cc <e2p_string2os+0x78>
  74:	adrp	x1, 0 <e2p_os2string>
  78:	add	x1, x1, #0x0
  7c:	mov	x0, x19
  80:	bl	0 <strcasecmp>
  84:	cbz	w0, d8 <e2p_string2os+0x84>
  88:	adrp	x1, 0 <e2p_os2string>
  8c:	add	x1, x1, #0x0
  90:	mov	x0, x19
  94:	bl	0 <strcasecmp>
  98:	cbz	w0, e8 <e2p_string2os+0x94>
  9c:	adrp	x1, 0 <e2p_os2string>
  a0:	add	x1, x1, #0x0
  a4:	mov	x0, x19
  a8:	bl	0 <strcasecmp>
  ac:	cbz	w0, f8 <e2p_string2os+0xa4>
  b0:	adrp	x1, 0 <e2p_os2string>
  b4:	add	x1, x1, #0x0
  b8:	mov	x0, x19
  bc:	bl	0 <strcasecmp>
  c0:	cmp	w0, #0x0
  c4:	mov	w8, #0x4                   	// #4
  c8:	csinv	w0, w8, wzr, eq  // eq = none
  cc:	ldr	x19, [sp, #16]
  d0:	ldp	x29, x30, [sp], #32
  d4:	ret
  d8:	mov	w0, #0x1                   	// #1
  dc:	ldr	x19, [sp, #16]
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret
  e8:	mov	w0, #0x2                   	// #2
  ec:	ldr	x19, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret
  f8:	mov	w0, #0x3                   	// #3
  fc:	ldr	x19, [sp, #16]
 100:	ldp	x29, x30, [sp], #32
 104:	ret

percent.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_percent>:
   0:	cbz	w0, 54 <e2p_percent+0x54>
   4:	mov	w8, #0x64                  	// #100
   8:	sdiv	w8, w8, w0
   c:	mul	w9, w8, w0
  10:	cmp	w9, #0x64
  14:	b.eq	38 <e2p_percent+0x38>  // b.none
  18:	lsr	w8, w1, #24
  1c:	cbz	w8, 40 <e2p_percent+0x40>
  20:	mov	w8, #0x851f                	// #34079
  24:	movk	w8, #0x51eb, lsl #16
  28:	umull	x8, w1, w8
  2c:	lsr	x8, x8, #37
  30:	mul	w0, w8, w0
  34:	ret
  38:	udiv	w0, w1, w8
  3c:	ret
  40:	mov	w9, #0x851f                	// #34079
  44:	mul	w8, w1, w0
  48:	movk	w9, #0x51eb, lsl #16
  4c:	umull	x8, w8, w9
  50:	lsr	x0, x8, #37
  54:	ret

crypto_mode.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_encmode2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w2, w0
   8:	cmp	w0, #0x3
   c:	str	x19, [sp, #16]
  10:	mov	x29, sp
  14:	b.hi	30 <e2p_encmode2string+0x30>  // b.pmore
  18:	adrp	x8, 0 <e2p_encmode2string>
  1c:	add	x8, x8, #0x0
  20:	ldr	x0, [x8, w2, sxtw #3]
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	ret
  30:	adrp	x19, 0 <e2p_encmode2string>
  34:	add	x19, x19, #0x0
  38:	adrp	x1, 0 <e2p_encmode2string>
  3c:	add	x1, x1, #0x0
  40:	mov	x0, x19
  44:	bl	0 <sprintf>
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret

0000000000000058 <e2p_string2encmode>:
  58:	stp	x29, x30, [sp, #-32]!
  5c:	adrp	x1, 0 <e2p_encmode2string>
  60:	add	x1, x1, #0x0
  64:	str	x19, [sp, #16]
  68:	mov	x29, sp
  6c:	mov	x19, x0
  70:	bl	0 <strcasecmp>
  74:	cbz	w0, dc <e2p_string2encmode+0x84>
  78:	adrp	x1, 0 <e2p_encmode2string>
  7c:	add	x1, x1, #0x0
  80:	mov	x0, x19
  84:	bl	0 <strcasecmp>
  88:	cbz	w0, f4 <e2p_string2encmode+0x9c>
  8c:	adrp	x1, 0 <e2p_encmode2string>
  90:	add	x1, x1, #0x0
  94:	mov	x0, x19
  98:	bl	0 <strcasecmp>
  9c:	cbz	w0, 10c <e2p_string2encmode+0xb4>
  a0:	adrp	x1, 0 <e2p_encmode2string>
  a4:	add	x1, x1, #0x0
  a8:	mov	x0, x19
  ac:	bl	0 <strcasecmp>
  b0:	cbz	w0, 124 <e2p_string2encmode+0xcc>
  b4:	adrp	x1, 0 <e2p_encmode2string>
  b8:	add	x1, x1, #0x0
  bc:	mov	w2, #0x9                   	// #9
  c0:	mov	x0, x19
  c4:	bl	0 <strncasecmp>
  c8:	cbz	w0, 13c <e2p_string2encmode+0xe4>
  cc:	mov	w0, #0xffffffff            	// #-1
  d0:	ldr	x19, [sp, #16]
  d4:	ldp	x29, x30, [sp], #32
  d8:	ret
  dc:	adrp	x8, 0 <e2p_encmode2string>
  e0:	add	x8, x8, #0x0
  e4:	ldr	w0, [x8]
  e8:	ldr	x19, [sp, #16]
  ec:	ldp	x29, x30, [sp], #32
  f0:	ret
  f4:	adrp	x8, 0 <e2p_encmode2string>
  f8:	add	x8, x8, #0x0
  fc:	ldr	w0, [x8]
 100:	ldr	x19, [sp, #16]
 104:	ldp	x29, x30, [sp], #32
 108:	ret
 10c:	adrp	x8, 0 <e2p_encmode2string>
 110:	add	x8, x8, #0x0
 114:	ldr	w0, [x8]
 118:	ldr	x19, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret
 124:	adrp	x8, 0 <e2p_encmode2string>
 128:	add	x8, x8, #0x0
 12c:	ldr	w0, [x8]
 130:	ldr	x19, [sp, #16]
 134:	ldp	x29, x30, [sp], #32
 138:	ret
 13c:	ldrb	w8, [x19, #9]!
 140:	cbz	w8, cc <e2p_string2encmode+0x74>
 144:	add	x1, x29, #0x18
 148:	mov	w2, #0xa                   	// #10
 14c:	mov	x0, x19
 150:	bl	0 <strtol>
 154:	cmp	w0, #0xff
 158:	b.hi	cc <e2p_string2encmode+0x74>  // b.pmore
 15c:	ldr	x8, [x29, #24]
 160:	ldrb	w8, [x8]
 164:	cmp	w8, #0x0
 168:	csinv	w0, w0, wzr, eq  // eq = none
 16c:	ldr	x19, [sp, #16]
 170:	ldp	x29, x30, [sp], #32
 174:	ret

fgetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetproject>:
   0:	sub	sp, sp, #0x50
   4:	stp	x22, x21, [sp, #48]
   8:	mov	x21, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	stp	x20, x19, [sp, #64]
  18:	add	x29, sp, #0x20
  1c:	bl	0 <open>
  20:	cmn	w0, #0x1
  24:	b.eq	6c <fgetproject+0x6c>  // b.none
  28:	mov	w1, #0x581f                	// #22559
  2c:	mov	x2, sp
  30:	movk	w1, #0x801c, lsl #16
  34:	mov	w20, w0
  38:	bl	0 <ioctl>
  3c:	mov	w19, w0
  40:	cbnz	w0, 4c <fgetproject+0x4c>
  44:	ldr	w8, [sp, #12]
  48:	str	x8, [x21]
  4c:	bl	0 <__errno_location>
  50:	ldr	w22, [x0]
  54:	mov	x21, x0
  58:	mov	w0, w20
  5c:	bl	0 <close>
  60:	cbz	w22, 70 <fgetproject+0x70>
  64:	str	w22, [x21]
  68:	b	70 <fgetproject+0x70>
  6c:	mov	w19, #0xffffffff            	// #-1
  70:	mov	w0, w19
  74:	ldp	x20, x19, [sp, #64]
  78:	ldp	x22, x21, [sp, #48]
  7c:	ldp	x29, x30, [sp, #32]
  80:	add	sp, sp, #0x50
  84:	ret

fsetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetproject>:
   0:	sub	sp, sp, #0x40
   4:	stp	x20, x19, [sp, #48]
   8:	mov	x20, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	add	x29, sp, #0x20
  18:	bl	0 <open>
  1c:	cmn	w0, #0x1
  20:	b.eq	8c <fsetproject+0x8c>  // b.none
  24:	mov	w1, #0x581f                	// #22559
  28:	mov	x2, sp
  2c:	movk	w1, #0x801c, lsl #16
  30:	mov	w19, w0
  34:	bl	0 <ioctl>
  38:	cmn	w0, #0x1
  3c:	b.eq	70 <fsetproject+0x70>  // b.none
  40:	mov	w1, #0x5820                	// #22560
  44:	mov	x2, sp
  48:	movk	w1, #0x401c, lsl #16
  4c:	mov	w0, w19
  50:	str	w20, [sp, #12]
  54:	bl	0 <ioctl>
  58:	cmn	w0, #0x1
  5c:	b.eq	70 <fsetproject+0x70>  // b.none
  60:	mov	w20, w0
  64:	mov	w0, w19
  68:	bl	0 <close>
  6c:	b	90 <fsetproject+0x90>
  70:	bl	0 <__errno_location>
  74:	ldr	w20, [x0]
  78:	mov	w0, w19
  7c:	bl	0 <close>
  80:	cbz	w20, 8c <fsetproject+0x8c>
  84:	bl	0 <__errno_location>
  88:	str	w20, [x0]
  8c:	mov	w20, #0xffffffff            	// #-1
  90:	mov	w0, w20
  94:	ldp	x20, x19, [sp, #48]
  98:	ldp	x29, x30, [sp, #32]
  9c:	add	sp, sp, #0x40
  a0:	ret

encoding.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_str2encoding>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <e2p_str2encoding>
   8:	add	x1, x1, #0x0
   c:	str	x19, [sp, #16]
  10:	mov	x29, sp
  14:	mov	x19, x0
  18:	bl	0 <strcmp>
  1c:	cbz	w0, 44 <e2p_str2encoding+0x44>
  20:	adrp	x1, 0 <e2p_str2encoding>
  24:	add	x1, x1, #0x0
  28:	mov	x0, x19
  2c:	bl	0 <strcmp>
  30:	cbz	w0, 4c <e2p_str2encoding+0x4c>
  34:	mov	w0, #0xffffffea            	// #-22
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	mov	x8, xzr
  48:	b	50 <e2p_str2encoding+0x50>
  4c:	mov	w8, #0x1                   	// #1
  50:	adrp	x9, 0 <e2p_str2encoding>
  54:	add	x9, x9, #0x0
  58:	add	x8, x9, x8, lsl #4
  5c:	ldrh	w0, [x8, #8]
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret

000000000000006c <e2p_encoding2str>:
  6c:	stp	x29, x30, [sp, #-32]!
  70:	cmp	w0, #0x1
  74:	str	x19, [sp, #16]
  78:	mov	x29, sp
  7c:	b.ne	98 <e2p_encoding2str+0x2c>  // b.any
  80:	adrp	x19, 0 <e2p_str2encoding>
  84:	add	x19, x19, #0x0
  88:	mov	x0, x19
  8c:	ldr	x19, [sp, #16]
  90:	ldp	x29, x30, [sp], #32
  94:	ret
  98:	adrp	x19, 0 <e2p_str2encoding>
  9c:	add	x19, x19, #0x0
  a0:	adrp	x1, 0 <e2p_str2encoding>
  a4:	mov	w2, w0
  a8:	add	x1, x1, #0x0
  ac:	mov	x0, x19
  b0:	bl	0 <sprintf>
  b4:	mov	x0, x19
  b8:	ldr	x19, [sp, #16]
  bc:	ldp	x29, x30, [sp], #32
  c0:	ret

00000000000000c4 <e2p_get_encoding_flags>:
  c4:	mov	w0, wzr
  c8:	ret

00000000000000cc <e2p_str2encoding_flags>:
  cc:	stp	x29, x30, [sp, #-64]!
  d0:	mov	x8, x1
  d4:	adrp	x1, 0 <e2p_str2encoding>
  d8:	stp	x20, x19, [sp, #48]
  dc:	mov	w20, w0
  e0:	add	x1, x1, #0x0
  e4:	mov	x0, x8
  e8:	stp	x24, x23, [sp, #16]
  ec:	stp	x22, x21, [sp, #32]
  f0:	mov	x29, sp
  f4:	mov	x19, x2
  f8:	bl	0 <strtok>
  fc:	cmp	w20, #0x1
 100:	b.ne	180 <e2p_str2encoding_flags+0xb4>  // b.any
 104:	mov	x23, x0
 108:	cbz	x0, 188 <e2p_str2encoding_flags+0xbc>
 10c:	adrp	x20, 0 <e2p_str2encoding>
 110:	adrp	x21, 0 <e2p_str2encoding>
 114:	adrp	x22, 0 <e2p_str2encoding>
 118:	add	x20, x20, #0x0
 11c:	add	x21, x21, #0x0
 120:	add	x22, x22, #0x0
 124:	mov	w2, #0x2                   	// #2
 128:	mov	x0, x20
 12c:	mov	x1, x23
 130:	bl	0 <strncmp>
 134:	add	x8, x23, #0x2
 138:	cmp	w0, #0x0
 13c:	mov	w24, w0
 140:	csel	x1, x8, x23, eq  // eq = none
 144:	mov	x0, x21
 148:	bl	0 <strcmp>
 14c:	cbnz	w0, 180 <e2p_str2encoding_flags+0xb4>
 150:	ldrh	w8, [x19]
 154:	cmp	w24, #0x0
 158:	mov	x0, xzr
 15c:	mov	x1, x22
 160:	orr	w9, w8, #0x1
 164:	and	w8, w8, #0xfffe
 168:	csel	w8, w8, w9, eq  // eq = none
 16c:	strh	w8, [x19]
 170:	bl	0 <strtok>
 174:	mov	x23, x0
 178:	cbnz	x0, 124 <e2p_str2encoding_flags+0x58>
 17c:	b	18c <e2p_str2encoding_flags+0xc0>
 180:	mov	w0, #0xffffffea            	// #-22
 184:	b	18c <e2p_str2encoding_flags+0xc0>
 188:	mov	w0, wzr
 18c:	ldp	x20, x19, [sp, #48]
 190:	ldp	x22, x21, [sp, #32]
 194:	ldp	x24, x23, [sp, #16]
 198:	ldp	x29, x30, [sp], #64
 19c:	ret
