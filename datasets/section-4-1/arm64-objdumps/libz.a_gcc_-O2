In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_gcc_-O2:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_combine_>:
   0:	tbnz	x2, #63, dc <adler32_combine_+0xdc>
   4:	mov	x3, #0xe2e7                	// #58087
   8:	and	x4, x0, #0xffff
   c:	movk	x3, #0x8697, lsl #16
  10:	mov	x5, #0xc5cd                	// #50637
  14:	movk	x3, #0x8070, lsl #32
  18:	movk	x5, #0xd2f, lsl #16
  1c:	movk	x3, #0x8007, lsl #48
  20:	movk	x5, #0xe1, lsl #32
  24:	movk	x5, #0xf, lsl #48
  28:	lsr	w6, w1, #16
  2c:	smulh	x3, x2, x3
  30:	adds	x1, x4, w1, uxth
  34:	lsr	w0, w0, #16
  38:	add	x3, x3, x2
  3c:	add	x0, x0, x6
  40:	mov	x6, #0xfff0                	// #65520
  44:	asr	x3, x3, #15
  48:	sub	x3, x3, x2, asr #63
  4c:	lsl	x7, x3, #12
  50:	sub	x7, x7, x3
  54:	add	x3, x3, x7, lsl #4
  58:	sub	x3, x2, x3
  5c:	mul	x2, x3, x4
  60:	umulh	x5, x2, x5
  64:	sub	x4, x2, x5
  68:	add	x4, x5, x4, lsr #1
  6c:	lsr	x4, x4, #15
  70:	lsl	x5, x4, #12
  74:	sub	x5, x5, x4
  78:	add	x4, x4, x5, lsl #4
  7c:	sub	x2, x2, x4
  80:	mov	x4, #0xfff1                	// #65521
  84:	sub	x3, x2, x3
  88:	add	x3, x0, x3
  8c:	add	x0, x3, x4
  90:	b.eq	ac <adler32_combine_+0xac>  // b.none
  94:	sub	x6, x1, #0x1
  98:	mov	x2, #0xffffffffffff000e    	// #-65522
  9c:	add	x1, x1, x2
  a0:	mov	x2, #0xfff0                	// #65520
  a4:	cmp	x6, x2
  a8:	csel	x6, x1, x6, hi  // hi = pmore
  ac:	mov	x2, #0xffe1                	// #65505
  b0:	mov	x1, #0xffffffffffff000f    	// #-65521
  b4:	movk	x2, #0x1, lsl #16
  b8:	add	x3, x3, x1
  bc:	cmp	x0, x2
  c0:	mov	x2, #0xfff0                	// #65520
  c4:	csel	x0, x3, x0, hi  // hi = pmore
  c8:	add	x1, x0, x1
  cc:	cmp	x0, x2
  d0:	csel	x0, x1, x0, hi  // hi = pmore
  d4:	orr	x0, x6, x0, lsl #16
  d8:	ret
  dc:	mov	x0, #0xffffffff            	// #4294967295
  e0:	ret
  e4:	nop

00000000000000e8 <adler32_z>:
  e8:	mov	x10, x2
  ec:	cmp	x2, #0x1
  f0:	lsr	w8, w0, #16
  f4:	mov	x2, x1
  f8:	and	x1, x0, #0xffff
  fc:	b.eq	2e4 <adler32_z+0x1fc>  // b.none
 100:	cbz	x2, 488 <adler32_z+0x3a0>
 104:	cmp	x10, #0xf
 108:	b.ls	27c <adler32_z+0x194>  // b.plast
 10c:	stp	x29, x30, [sp, #-32]!
 110:	mov	x14, #0x15af                	// #5551
 114:	mov	x15, #0x15b0                	// #5552
 118:	mov	x29, sp
 11c:	cmp	x10, x14
 120:	add	x9, x2, x15
 124:	b.ls	324 <adler32_z+0x23c>  // b.plast
 128:	mov	x12, #0xc5cd                	// #50637
 12c:	mov	x13, #0xffffffffffffea50    	// #-5552
 130:	movk	x12, #0xd2f, lsl #16
 134:	str	x19, [sp, #16]
 138:	movk	x12, #0xe1, lsl #32
 13c:	movk	x12, #0xf, lsl #48
 140:	mov	x11, x10
 144:	add	x2, x9, x13
 148:	add	x10, x10, x13
 14c:	nop
 150:	ldrb	w4, [x2]
 154:	add	x2, x2, #0x10
 158:	ldurb	w16, [x2, #-15]
 15c:	add	x4, x4, x1
 160:	ldurb	w0, [x2, #-14]
 164:	add	x16, x16, x4
 168:	ldurb	w1, [x2, #-13]
 16c:	add	x0, x0, x16
 170:	ldurb	w7, [x2, #-12]
 174:	add	x1, x1, x0
 178:	ldurb	w18, [x2, #-11]
 17c:	add	x7, x7, x1
 180:	ldurb	w3, [x2, #-10]
 184:	add	x18, x18, x7
 188:	ldurb	w19, [x2, #-9]
 18c:	add	x3, x3, x18
 190:	ldurb	w6, [x2, #-8]
 194:	add	x19, x19, x3
 198:	ldurb	w30, [x2, #-7]
 19c:	add	x6, x6, x19
 1a0:	ldurb	w5, [x2, #-6]
 1a4:	add	x30, x30, x6
 1a8:	ldurb	w17, [x2, #-5]
 1ac:	add	x16, x4, x16
 1b0:	add	x1, x0, x1
 1b4:	ldurb	w4, [x2, #-4]
 1b8:	add	x5, x5, x30
 1bc:	add	x1, x1, x16
 1c0:	add	x18, x7, x18
 1c4:	add	x16, x17, x5
 1c8:	ldurb	w7, [x2, #-3]
 1cc:	add	x0, x3, x19
 1d0:	add	x4, x4, x16
 1d4:	ldurb	w3, [x2, #-2]
 1d8:	add	x1, x1, x18
 1dc:	add	x1, x1, x0
 1e0:	add	x7, x7, x4
 1e4:	add	x0, x6, x30
 1e8:	ldurb	w6, [x2, #-1]
 1ec:	add	x0, x1, x0
 1f0:	add	x3, x3, x7
 1f4:	add	x5, x5, x16
 1f8:	add	x4, x4, x7
 1fc:	add	x0, x0, x5
 200:	add	x1, x6, x3
 204:	add	x0, x0, x4
 208:	add	x3, x3, x1
 20c:	add	x0, x0, x3
 210:	cmp	x2, x9
 214:	add	x8, x8, x0
 218:	b.ne	150 <adler32_z+0x68>  // b.any
 21c:	umulh	x5, x1, x12
 220:	cmp	x10, x14
 224:	umulh	x4, x8, x12
 228:	add	x9, x2, x15
 22c:	sub	x3, x1, x5
 230:	sub	x0, x8, x4
 234:	add	x3, x5, x3, lsr #1
 238:	add	x0, x4, x0, lsr #1
 23c:	lsr	x3, x3, #15
 240:	lsr	x0, x0, #15
 244:	lsl	x5, x3, #12
 248:	lsl	x4, x0, #12
 24c:	sub	x5, x5, x3
 250:	sub	x4, x4, x0
 254:	add	x3, x3, x5, lsl #4
 258:	add	x0, x0, x4, lsl #4
 25c:	sub	x1, x1, x3
 260:	sub	x8, x8, x0
 264:	b.hi	140 <adler32_z+0x58>  // b.pmore
 268:	cbnz	x10, 318 <adler32_z+0x230>
 26c:	orr	x0, x1, x8, lsl #16
 270:	ldr	x19, [sp, #16]
 274:	ldp	x29, x30, [sp], #32
 278:	ret
 27c:	cbz	x10, 298 <adler32_z+0x1b0>
 280:	add	x10, x2, x10
 284:	ldrb	w0, [x2], #1
 288:	add	x1, x1, x0
 28c:	cmp	x2, x10
 290:	add	x8, x8, x1
 294:	b.ne	284 <adler32_z+0x19c>  // b.any
 298:	mov	x0, #0xc5cd                	// #50637
 29c:	mov	x2, #0xfff0                	// #65520
 2a0:	movk	x0, #0xd2f, lsl #16
 2a4:	cmp	x1, x2
 2a8:	movk	x0, #0xe1, lsl #32
 2ac:	mov	x3, #0xffffffffffff000f    	// #-65521
 2b0:	movk	x0, #0xf, lsl #48
 2b4:	add	x3, x1, x3
 2b8:	csel	x1, x3, x1, hi  // hi = pmore
 2bc:	umulh	x2, x8, x0
 2c0:	sub	x0, x8, x2
 2c4:	add	x0, x2, x0, lsr #1
 2c8:	lsr	x2, x0, #15
 2cc:	lsl	x0, x2, #12
 2d0:	sub	x0, x0, x2
 2d4:	add	x0, x2, x0, lsl #4
 2d8:	sub	x8, x8, x0
 2dc:	orr	x0, x1, x8, lsl #16
 2e0:	ret
 2e4:	ldrb	w0, [x2]
 2e8:	mov	x3, #0xfff0                	// #65520
 2ec:	mov	x2, #0xffffffffffff000f    	// #-65521
 2f0:	add	x1, x0, x1
 2f4:	add	x0, x1, x2
 2f8:	cmp	x1, x3
 2fc:	csel	x1, x0, x1, hi  // hi = pmore
 300:	add	x8, x1, x8
 304:	add	x2, x8, x2
 308:	cmp	x8, x3
 30c:	csel	x8, x2, x8, hi  // hi = pmore
 310:	orr	x0, x1, x8, lsl #16
 314:	ret
 318:	cmp	x10, #0xf
 31c:	b.ls	490 <adler32_z+0x3a8>  // b.plast
 320:	ldr	x19, [sp, #16]
 324:	sub	x7, x10, #0x10
 328:	lsr	x7, x7, #4
 32c:	add	x9, x7, #0x1
 330:	add	x9, x2, x9, lsl #4
 334:	ldrb	w5, [x2]
 338:	add	x2, x2, #0x10
 33c:	ldurb	w11, [x2, #-15]
 340:	add	x5, x5, x1
 344:	ldurb	w0, [x2, #-14]
 348:	add	x11, x11, x5
 34c:	ldurb	w16, [x2, #-13]
 350:	add	x0, x0, x11
 354:	ldurb	w4, [x2, #-12]
 358:	ldurb	w15, [x2, #-11]
 35c:	add	x16, x16, x0
 360:	ldurb	w3, [x2, #-10]
 364:	add	x4, x4, x16
 368:	ldurb	w14, [x2, #-9]
 36c:	add	x15, x15, x4
 370:	add	x3, x3, x15
 374:	ldurb	w1, [x2, #-8]
 378:	add	x14, x14, x3
 37c:	ldurb	w13, [x2, #-7]
 380:	ldurb	w6, [x2, #-6]
 384:	add	x1, x1, x14
 388:	ldurb	w12, [x2, #-5]
 38c:	add	x13, x13, x1
 390:	add	x11, x5, x11
 394:	add	x6, x6, x13
 398:	ldurb	w5, [x2, #-4]
 39c:	add	x0, x0, x16
 3a0:	add	x0, x0, x11
 3a4:	add	x4, x4, x15
 3a8:	ldurb	w11, [x2, #-3]
 3ac:	add	x12, x12, x6
 3b0:	add	x0, x0, x4
 3b4:	add	x5, x5, x12
 3b8:	add	x4, x3, x14
 3bc:	ldurb	w3, [x2, #-2]
 3c0:	add	x0, x0, x4
 3c4:	add	x1, x1, x13
 3c8:	ldurb	w4, [x2, #-1]
 3cc:	add	x11, x11, x5
 3d0:	add	x0, x0, x1
 3d4:	add	x3, x3, x11
 3d8:	add	x6, x6, x12
 3dc:	add	x5, x5, x11
 3e0:	add	x0, x0, x6
 3e4:	add	x1, x4, x3
 3e8:	add	x0, x0, x5
 3ec:	add	x3, x3, x1
 3f0:	add	x0, x0, x3
 3f4:	cmp	x2, x9
 3f8:	add	x8, x8, x0
 3fc:	b.ne	334 <adler32_z+0x24c>  // b.any
 400:	sub	x11, x10, #0x11
 404:	tst	x10, #0xf
 408:	sub	x7, x11, x7, lsl #4
 40c:	b.eq	42c <adler32_z+0x344>  // b.none
 410:	add	x7, x7, #0x1
 414:	add	x0, x9, x7
 418:	ldrb	w2, [x9], #1
 41c:	add	x1, x1, x2
 420:	cmp	x9, x0
 424:	add	x8, x8, x1
 428:	b.ne	418 <adler32_z+0x330>  // b.any
 42c:	mov	x0, #0xc5cd                	// #50637
 430:	movk	x0, #0xd2f, lsl #16
 434:	movk	x0, #0xe1, lsl #32
 438:	movk	x0, #0xf, lsl #48
 43c:	ldp	x29, x30, [sp], #32
 440:	umulh	x3, x8, x0
 444:	umulh	x4, x1, x0
 448:	sub	x0, x8, x3
 44c:	sub	x2, x1, x4
 450:	add	x0, x3, x0, lsr #1
 454:	add	x2, x4, x2, lsr #1
 458:	lsr	x0, x0, #15
 45c:	lsr	x2, x2, #15
 460:	lsl	x3, x0, #12
 464:	lsl	x4, x2, #12
 468:	sub	x3, x3, x0
 46c:	sub	x4, x4, x2
 470:	add	x0, x0, x3, lsl #4
 474:	add	x2, x2, x4, lsl #4
 478:	sub	x8, x8, x0
 47c:	sub	x1, x1, x2
 480:	orr	x0, x1, x8, lsl #16
 484:	ret
 488:	mov	x0, #0x1                   	// #1
 48c:	ret
 490:	mov	x0, #0xffffffffffffea4f    	// #-5553
 494:	mov	x9, x2
 498:	add	x7, x11, x0
 49c:	ldr	x19, [sp, #16]
 4a0:	b	410 <adler32_z+0x328>
 4a4:	nop

00000000000004a8 <adler32>:
 4a8:	mov	w2, w2
 4ac:	b	e8 <adler32_z>

00000000000004b0 <adler32_combine>:
 4b0:	b	0 <adler32_combine_>
 4b4:	nop

00000000000004b8 <adler32_combine64>:
 4b8:	b	0 <adler32_combine_>

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <crc32_little>:
   0:	mov	w4, w0
   4:	mvn	w3, w0
   8:	cbz	x2, 48 <crc32_little+0x48>
   c:	tst	x1, #0x3
  10:	b.eq	50 <crc32_little+0x50>  // b.none
  14:	adrp	x0, 0 <crc32_little>
  18:	add	x0, x0, #0x0
  1c:	b	28 <crc32_little+0x28>
  20:	tst	x1, #0x3
  24:	b.eq	50 <crc32_little+0x50>  // b.none
  28:	ldrb	w4, [x1], #1
  2c:	subs	x2, x2, #0x1
  30:	eor	w4, w4, w3
  34:	and	x4, x4, #0xff
  38:	ldr	w4, [x0, x4, lsl #2]
  3c:	eor	w3, w4, w3, lsr #8
  40:	b.ne	20 <crc32_little+0x20>  // b.any
  44:	mvn	w4, w3
  48:	mov	w0, w4
  4c:	ret
  50:	cmp	x2, #0x1f
  54:	b.ls	258 <crc32_little+0x258>  // b.plast
  58:	sub	x7, x2, #0x20
  5c:	adrp	x0, 0 <crc32_little>
  60:	and	x7, x7, #0xffffffffffffffe0
  64:	add	x0, x0, #0x0
  68:	add	x7, x7, #0x20
  6c:	add	x7, x1, x7
  70:	ldp	w4, w8, [x1]
  74:	ldp	w13, w12, [x1, #8]
  78:	eor	w3, w3, w4
  7c:	ldr	w4, [x1, #16]
  80:	add	x1, x1, #0x20
  84:	ubfx	x6, x3, #8, #8
  88:	ubfx	x5, x3, #16, #8
  8c:	add	x10, x0, w3, uxtb #2
  90:	add	x6, x6, #0x200
  94:	add	x5, x5, #0x100
  98:	lsr	w3, w3, #24
  9c:	ldur	w11, [x1, #-12]
  a0:	ldr	w9, [x0, x6, lsl #2]
  a4:	ldr	w6, [x0, x5, lsl #2]
  a8:	ldr	w5, [x0, x3, lsl #2]
  ac:	ldr	w3, [x10, #3072]
  b0:	eor	w9, w9, w6
  b4:	ldur	w10, [x1, #-8]
  b8:	cmp	x1, x7
  bc:	eor	w3, w3, w5
  c0:	eor	w9, w9, w3
  c4:	eor	w9, w9, w8
  c8:	ubfx	x5, x9, #8, #8
  cc:	ubfx	x3, x9, #16, #8
  d0:	add	x5, x5, #0x200
  d4:	add	x3, x3, #0x100
  d8:	add	x14, x0, w9, uxtb #2
  dc:	lsr	w9, w9, #24
  e0:	ldr	w6, [x0, x3, lsl #2]
  e4:	ldr	w8, [x0, x5, lsl #2]
  e8:	ldr	w3, [x14, #3072]
  ec:	ldr	w5, [x0, x9, lsl #2]
  f0:	eor	w8, w8, w6
  f4:	eor	w3, w3, w5
  f8:	eor	w8, w8, w3
  fc:	eor	w8, w8, w13
 100:	ubfx	x5, x8, #8, #8
 104:	ubfx	x3, x8, #16, #8
 108:	add	x5, x5, #0x200
 10c:	add	x3, x3, #0x100
 110:	add	x13, x0, w8, uxtb #2
 114:	lsr	w8, w8, #24
 118:	ldr	w9, [x0, x3, lsl #2]
 11c:	ldr	w6, [x0, x5, lsl #2]
 120:	ldr	w3, [x13, #3072]
 124:	ldr	w5, [x0, x8, lsl #2]
 128:	eor	w6, w6, w9
 12c:	eor	w3, w3, w5
 130:	eor	w6, w6, w3
 134:	eor	w6, w6, w12
 138:	ubfx	x5, x6, #8, #8
 13c:	ubfx	x3, x6, #16, #8
 140:	add	x3, x3, #0x100
 144:	add	x9, x0, w6, uxtb #2
 148:	add	x5, x5, #0x200
 14c:	lsr	w6, w6, #24
 150:	ldr	w8, [x0, x3, lsl #2]
 154:	ldr	w6, [x0, x6, lsl #2]
 158:	ldr	w5, [x0, x5, lsl #2]
 15c:	ldr	w3, [x9, #3072]
 160:	eor	w5, w5, w8
 164:	eor	w3, w3, w6
 168:	eor	w5, w5, w3
 16c:	eor	w5, w5, w4
 170:	ubfx	x4, x5, #8, #8
 174:	ubfx	x3, x5, #16, #8
 178:	add	x8, x0, w5, uxtb #2
 17c:	add	x3, x3, #0x100
 180:	add	x4, x4, #0x200
 184:	lsr	w5, w5, #24
 188:	ldr	w6, [x0, x3, lsl #2]
 18c:	ldr	w5, [x0, x5, lsl #2]
 190:	ldr	w3, [x8, #3072]
 194:	ldr	w4, [x0, x4, lsl #2]
 198:	eor	w3, w3, w5
 19c:	eor	w4, w4, w6
 1a0:	eor	w4, w4, w3
 1a4:	eor	w4, w4, w11
 1a8:	ubfx	x3, x4, #8, #8
 1ac:	ubfx	x5, x4, #16, #8
 1b0:	add	x8, x0, w4, uxtb #2
 1b4:	add	x5, x5, #0x100
 1b8:	lsr	w4, w4, #24
 1bc:	add	x3, x3, #0x200
 1c0:	ldr	w6, [x0, x5, lsl #2]
 1c4:	ldr	w3, [x0, x3, lsl #2]
 1c8:	ldr	w5, [x0, x4, lsl #2]
 1cc:	ldr	w4, [x8, #3072]
 1d0:	eor	w3, w3, w6
 1d4:	eor	w4, w4, w5
 1d8:	eor	w3, w3, w4
 1dc:	eor	w3, w3, w10
 1e0:	ubfx	x6, x3, #8, #8
 1e4:	ubfx	x5, x3, #16, #8
 1e8:	add	x8, x0, w3, uxtb #2
 1ec:	lsr	w4, w3, #24
 1f0:	add	x6, x6, #0x200
 1f4:	add	x5, x5, #0x100
 1f8:	ldr	w3, [x0, x6, lsl #2]
 1fc:	ldr	w5, [x0, x5, lsl #2]
 200:	ldr	w6, [x0, x4, lsl #2]
 204:	ldr	w4, [x8, #3072]
 208:	eor	w3, w3, w5
 20c:	ldur	w5, [x1, #-4]
 210:	eor	w4, w4, w6
 214:	eor	w3, w3, w4
 218:	eor	w3, w3, w5
 21c:	ubfx	x4, x3, #8, #8
 220:	ubfx	x5, x3, #16, #8
 224:	add	x5, x5, #0x100
 228:	add	x8, x0, w3, uxtb #2
 22c:	add	x4, x4, #0x200
 230:	lsr	w3, w3, #24
 234:	ldr	w6, [x0, x5, lsl #2]
 238:	ldr	w4, [x0, x4, lsl #2]
 23c:	ldr	w5, [x0, x3, lsl #2]
 240:	ldr	w3, [x8, #3072]
 244:	eor	w4, w4, w6
 248:	eor	w3, w3, w5
 24c:	eor	w3, w3, w4
 250:	b.ne	70 <crc32_little+0x70>  // b.any
 254:	and	x2, x2, #0x1f
 258:	cmp	x2, #0x3
 25c:	b.ls	2f0 <crc32_little+0x2f0>  // b.plast
 260:	sub	x6, x2, #0x4
 264:	adrp	x0, 0 <crc32_little>
 268:	and	x6, x6, #0xfffffffffffffffc
 26c:	add	x0, x0, #0x0
 270:	add	x6, x6, #0x4
 274:	add	x6, x1, x6
 278:	ldr	w4, [x1], #4
 27c:	eor	w3, w3, w4
 280:	cmp	x1, x6
 284:	ubfx	x4, x3, #8, #8
 288:	ubfx	x5, x3, #16, #8
 28c:	add	x5, x5, #0x100
 290:	add	x8, x0, w3, uxtb #2
 294:	add	x4, x4, #0x200
 298:	lsr	w3, w3, #24
 29c:	ldr	w7, [x0, x5, lsl #2]
 2a0:	ldr	w4, [x0, x4, lsl #2]
 2a4:	ldr	w5, [x0, x3, lsl #2]
 2a8:	ldr	w3, [x8, #3072]
 2ac:	eor	w4, w4, w7
 2b0:	eor	w3, w3, w5
 2b4:	eor	w3, w4, w3
 2b8:	b.ne	278 <crc32_little+0x278>  // b.any
 2bc:	and	x2, x2, #0x3
 2c0:	cbz	x2, 44 <crc32_little+0x44>
 2c4:	adrp	x0, 0 <crc32_little>
 2c8:	add	x2, x6, x2
 2cc:	add	x0, x0, #0x0
 2d0:	ldrb	w1, [x6], #1
 2d4:	eor	w1, w1, w3
 2d8:	cmp	x6, x2
 2dc:	and	x1, x1, #0xff
 2e0:	ldr	w1, [x0, x1, lsl #2]
 2e4:	eor	w3, w1, w3, lsr #8
 2e8:	b.ne	2d0 <crc32_little+0x2d0>  // b.any
 2ec:	b	44 <crc32_little+0x44>
 2f0:	mov	x6, x1
 2f4:	b	2c0 <crc32_little+0x2c0>

00000000000002f8 <crc32_combine_>:
 2f8:	cmp	x2, #0x0
 2fc:	mov	x6, x0
 300:	b.le	57c <crc32_combine_+0x284>
 304:	sub	sp, sp, #0x200
 308:	mov	x7, x2
 30c:	mov	x8, x1
 310:	mov	x3, #0x8320                	// #33568
 314:	add	x2, sp, #0x200
 318:	add	x1, sp, #0x108
 31c:	movk	x3, #0xedb8, lsl #16
 320:	mov	x0, #0x1                   	// #1
 324:	str	x3, [sp, #256]
 328:	str	x0, [x1], #8
 32c:	lsl	x0, x0, #1
 330:	cmp	x1, x2
 334:	b.ne	328 <crc32_combine_+0x30>  // b.any
 338:	mov	x0, #0x8320                	// #33568
 33c:	mov	x5, #0x1                   	// #1
 340:	movk	x0, #0xedb8, lsl #16
 344:	mov	x4, #0x8                   	// #8
 348:	cbz	x0, 398 <crc32_combine_+0xa0>
 34c:	nop
 350:	add	x1, sp, #0x100
 354:	mov	x2, #0x0                   	// #0
 358:	tbz	w0, #0, 364 <crc32_combine_+0x6c>
 35c:	ldr	x3, [x1]
 360:	eor	x2, x2, x3
 364:	lsr	x0, x0, #1
 368:	add	x1, x1, #0x8
 36c:	cbnz	x0, 358 <crc32_combine_+0x60>
 370:	add	x4, sp, x4
 374:	add	x5, x5, #0x1
 378:	cmp	x5, #0x21
 37c:	stur	x2, [x4, #-8]
 380:	b.eq	3b0 <crc32_combine_+0xb8>  // b.none
 384:	lsl	x4, x5, #3
 388:	add	x0, sp, #0x100
 38c:	add	x0, x0, x4
 390:	ldur	x0, [x0, #-8]
 394:	cbnz	x0, 350 <crc32_combine_+0x58>
 398:	add	x4, sp, x4
 39c:	mov	x2, #0x0                   	// #0
 3a0:	add	x5, x5, #0x1
 3a4:	cmp	x5, #0x21
 3a8:	stur	x2, [x4, #-8]
 3ac:	b.ne	384 <crc32_combine_+0x8c>  // b.any
 3b0:	mov	x5, #0x1                   	// #1
 3b4:	nop
 3b8:	lsl	x4, x5, #3
 3bc:	add	x0, sp, x4
 3c0:	ldur	x0, [x0, #-8]
 3c4:	cbz	x0, 504 <crc32_combine_+0x20c>
 3c8:	mov	x1, sp
 3cc:	mov	x2, #0x0                   	// #0
 3d0:	tbz	w0, #0, 3dc <crc32_combine_+0xe4>
 3d4:	ldr	x3, [x1]
 3d8:	eor	x2, x2, x3
 3dc:	lsr	x0, x0, #1
 3e0:	add	x1, x1, #0x8
 3e4:	cbnz	x0, 3d0 <crc32_combine_+0xd8>
 3e8:	add	x0, sp, #0x100
 3ec:	add	x5, x5, #0x1
 3f0:	add	x4, x0, x4
 3f4:	cmp	x5, #0x21
 3f8:	stur	x2, [x4, #-8]
 3fc:	b.ne	3b8 <crc32_combine_+0xc0>  // b.any
 400:	mov	x5, #0x1                   	// #1
 404:	nop
 408:	lsl	x4, x5, #3
 40c:	add	x0, sp, #0x100
 410:	add	x0, x0, x4
 414:	ldur	x0, [x0, #-8]
 418:	cbz	x0, 4c8 <crc32_combine_+0x1d0>
 41c:	add	x1, sp, #0x100
 420:	mov	x2, #0x0                   	// #0
 424:	nop
 428:	tbz	w0, #0, 434 <crc32_combine_+0x13c>
 42c:	ldr	x3, [x1]
 430:	eor	x2, x2, x3
 434:	lsr	x0, x0, #1
 438:	add	x1, x1, #0x8
 43c:	cbnz	x0, 428 <crc32_combine_+0x130>
 440:	add	x4, sp, x4
 444:	add	x5, x5, #0x1
 448:	cmp	x5, #0x21
 44c:	stur	x2, [x4, #-8]
 450:	b.ne	408 <crc32_combine_+0x110>  // b.any
 454:	tbnz	w7, #0, 550 <crc32_combine_+0x258>
 458:	cmp	xzr, x7, asr #1
 45c:	asr	x9, x7, #1
 460:	b.eq	4bc <crc32_combine_+0x1c4>  // b.none
 464:	mov	x5, #0x1                   	// #1
 468:	lsl	x4, x5, #3
 46c:	add	x0, sp, x4
 470:	ldur	x0, [x0, #-8]
 474:	cbz	x0, 4e4 <crc32_combine_+0x1ec>
 478:	mov	x1, sp
 47c:	mov	x2, #0x0                   	// #0
 480:	tbz	w0, #0, 48c <crc32_combine_+0x194>
 484:	ldr	x3, [x1]
 488:	eor	x2, x2, x3
 48c:	lsr	x0, x0, #1
 490:	add	x1, x1, #0x8
 494:	cbnz	x0, 480 <crc32_combine_+0x188>
 498:	add	x0, sp, #0x100
 49c:	add	x5, x5, #0x1
 4a0:	add	x4, x0, x4
 4a4:	cmp	x5, #0x21
 4a8:	stur	x2, [x4, #-8]
 4ac:	b.ne	468 <crc32_combine_+0x170>  // b.any
 4b0:	tbnz	w9, #0, 524 <crc32_combine_+0x22c>
 4b4:	asr	x7, x7, #2
 4b8:	cbnz	x7, 400 <crc32_combine_+0x108>
 4bc:	eor	x0, x6, x8
 4c0:	add	sp, sp, #0x200
 4c4:	ret
 4c8:	add	x4, sp, x4
 4cc:	mov	x2, #0x0                   	// #0
 4d0:	add	x5, x5, #0x1
 4d4:	cmp	x5, #0x21
 4d8:	stur	x2, [x4, #-8]
 4dc:	b.ne	408 <crc32_combine_+0x110>  // b.any
 4e0:	b	454 <crc32_combine_+0x15c>
 4e4:	add	x0, sp, #0x100
 4e8:	mov	x2, #0x0                   	// #0
 4ec:	add	x4, x0, x4
 4f0:	add	x5, x5, #0x1
 4f4:	cmp	x5, #0x21
 4f8:	stur	x2, [x4, #-8]
 4fc:	b.ne	468 <crc32_combine_+0x170>  // b.any
 500:	b	4b0 <crc32_combine_+0x1b8>
 504:	add	x0, sp, #0x100
 508:	mov	x2, #0x0                   	// #0
 50c:	add	x4, x0, x4
 510:	add	x5, x5, #0x1
 514:	cmp	x5, #0x21
 518:	stur	x2, [x4, #-8]
 51c:	b.ne	3b8 <crc32_combine_+0xc0>  // b.any
 520:	b	400 <crc32_combine_+0x108>
 524:	cbz	x6, 4b4 <crc32_combine_+0x1bc>
 528:	mov	x1, x0
 52c:	mov	x0, x6
 530:	mov	x6, #0x0                   	// #0
 534:	tbz	w0, #0, 540 <crc32_combine_+0x248>
 538:	ldr	x2, [x1]
 53c:	eor	x6, x6, x2
 540:	lsr	x0, x0, #1
 544:	add	x1, x1, #0x8
 548:	cbnz	x0, 534 <crc32_combine_+0x23c>
 54c:	b	4b4 <crc32_combine_+0x1bc>
 550:	cbz	x6, 458 <crc32_combine_+0x160>
 554:	mov	x1, sp
 558:	mov	x0, x6
 55c:	mov	x6, #0x0                   	// #0
 560:	tbz	w0, #0, 56c <crc32_combine_+0x274>
 564:	ldr	x2, [x1]
 568:	eor	x6, x6, x2
 56c:	lsr	x0, x0, #1
 570:	add	x1, x1, #0x8
 574:	cbnz	x0, 560 <crc32_combine_+0x268>
 578:	b	458 <crc32_combine_+0x160>
 57c:	ret

0000000000000580 <get_crc_table>:
 580:	adrp	x0, 0 <crc32_little>
 584:	add	x0, x0, #0x0
 588:	ret
 58c:	nop

0000000000000590 <crc32_z>:
 590:	cbz	x1, 598 <crc32_z+0x8>
 594:	b	0 <crc32_little>
 598:	mov	x0, #0x0                   	// #0
 59c:	ret

00000000000005a0 <crc32>:
 5a0:	cbz	x1, 5ac <crc32+0xc>
 5a4:	mov	w2, w2
 5a8:	b	0 <crc32_little>
 5ac:	mov	x0, #0x0                   	// #0
 5b0:	ret
 5b4:	nop

00000000000005b8 <crc32_combine>:
 5b8:	b	2f8 <crc32_combine_>
 5bc:	nop

00000000000005c0 <crc32_combine64>:
 5c0:	b	2f8 <crc32_combine_>

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <slide_hash>:
       0:	ldr	w2, [x0, #132]
       4:	ldr	x1, [x0, #120]
       8:	sub	w5, w2, #0x1
       c:	mvn	x5, x5
      10:	ldr	w3, [x0, #80]
      14:	add	x2, x1, w2, uxtw #1
      18:	add	x5, x2, x5, lsl #1
      1c:	nop
      20:	ldrh	w4, [x2, #-2]!
      24:	sub	w1, w4, w3
      28:	cmp	w3, w4
      2c:	and	w1, w1, #0xffff
      30:	csel	w1, w1, wzr, ls  // ls = plast
      34:	strh	w1, [x2]
      38:	cmp	x2, x5
      3c:	b.ne	20 <slide_hash+0x20>  // b.any
      40:	ldr	x1, [x0, #112]
      44:	sub	w4, w3, #0x1
      48:	mvn	x4, x4
      4c:	add	x1, x1, w3, uxtw #1
      50:	add	x4, x1, x4, lsl #1
      54:	nop
      58:	ldrh	w2, [x1, #-2]!
      5c:	sub	w0, w2, w3
      60:	cmp	w3, w2
      64:	and	w0, w0, #0xffff
      68:	csel	w0, w0, wzr, ls  // ls = plast
      6c:	strh	w0, [x1]
      70:	cmp	x1, x4
      74:	b.ne	58 <slide_hash+0x58>  // b.any
      78:	ret
      7c:	nop

0000000000000080 <longest_match>:
      80:	ldp	w16, w7, [x0, #180]
      84:	mov	w18, #0x102                 	// #258
      88:	ldr	w2, [x0, #172]
      8c:	ldr	x8, [x0, #96]
      90:	mov	w14, w2
      94:	ldr	w3, [x0, #80]
      98:	add	w9, w2, #0x106
      9c:	ldp	w5, w17, [x0, #204]
      a0:	add	x13, x8, x14
      a4:	ldr	w6, [x0, #188]
      a8:	sub	w10, w3, #0x106
      ac:	cmp	w2, w10
      b0:	sub	w9, w9, w3
      b4:	add	x4, x13, w7, sxtw
      b8:	csel	w9, w9, wzr, hi  // hi = pmore
      bc:	lsr	w2, w6, #2
      c0:	cmp	w7, w5
      c4:	csel	w6, w2, w6, cs  // cs = hs, nlast
      c8:	add	x14, x14, #0x102
      cc:	cmp	w16, w17
      d0:	ldr	w12, [x0, #88]
      d4:	ldurb	w15, [x4, #-1]
      d8:	csel	w17, w17, w16, cs  // cs = hs, nlast
      dc:	ldrb	w10, [x13, w7, sxtw]
      e0:	add	x14, x8, x14
      e4:	ldr	x11, [x0, #112]
      e8:	b	104 <longest_match+0x84>
      ec:	and	w1, w1, w12
      f0:	ldrh	w1, [x11, x1, lsl #1]
      f4:	cmp	w9, w1
      f8:	b.cs	218 <longest_match+0x198>  // b.hs, b.nlast
      fc:	subs	w6, w6, #0x1
     100:	b.eq	218 <longest_match+0x198>  // b.none
     104:	mov	w4, w1
     108:	sxtw	x3, w7
     10c:	add	x2, x8, x4
     110:	ldrb	w5, [x2, w7, sxtw]
     114:	cmp	w5, w10
     118:	b.ne	ec <longest_match+0x6c>  // b.any
     11c:	add	x3, x2, x3
     120:	ldurb	w3, [x3, #-1]
     124:	cmp	w3, w15
     128:	b.ne	ec <longest_match+0x6c>  // b.any
     12c:	ldrb	w4, [x8, x4]
     130:	ldrb	w3, [x13]
     134:	cmp	w4, w3
     138:	b.ne	ec <longest_match+0x6c>  // b.any
     13c:	ldrb	w4, [x2, #1]
     140:	ldrb	w3, [x13, #1]
     144:	cmp	w4, w3
     148:	b.ne	ec <longest_match+0x6c>  // b.any
     14c:	add	x2, x2, #0x2
     150:	add	x3, x13, #0x2
     154:	nop
     158:	ldrb	w5, [x3, #1]
     15c:	ldrb	w4, [x2, #1]
     160:	cmp	w5, w4
     164:	b.ne	224 <longest_match+0x1a4>  // b.any
     168:	ldrb	w5, [x3, #2]
     16c:	ldrb	w4, [x2, #2]
     170:	cmp	w5, w4
     174:	b.ne	22c <longest_match+0x1ac>  // b.any
     178:	ldrb	w5, [x3, #3]
     17c:	ldrb	w4, [x2, #3]
     180:	cmp	w5, w4
     184:	b.ne	234 <longest_match+0x1b4>  // b.any
     188:	ldrb	w5, [x3, #4]
     18c:	ldrb	w4, [x2, #4]
     190:	cmp	w5, w4
     194:	b.ne	23c <longest_match+0x1bc>  // b.any
     198:	ldrb	w5, [x3, #5]
     19c:	ldrb	w4, [x2, #5]
     1a0:	cmp	w5, w4
     1a4:	b.ne	24c <longest_match+0x1cc>  // b.any
     1a8:	ldrb	w5, [x3, #6]
     1ac:	ldrb	w4, [x2, #6]
     1b0:	cmp	w5, w4
     1b4:	b.ne	244 <longest_match+0x1c4>  // b.any
     1b8:	ldrb	w5, [x3, #7]
     1bc:	ldrb	w4, [x2, #7]
     1c0:	cmp	w5, w4
     1c4:	b.ne	254 <longest_match+0x1d4>  // b.any
     1c8:	ldrb	w5, [x3, #8]!
     1cc:	ldrb	w4, [x2, #8]!
     1d0:	cmp	w5, w4
     1d4:	ccmp	x14, x3, #0x0, eq  // eq = none
     1d8:	b.hi	158 <longest_match+0xd8>  // b.pmore
     1dc:	sub	x3, x14, x3
     1e0:	sub	w3, w18, w3
     1e4:	cmp	w7, w3
     1e8:	b.ge	ec <longest_match+0x6c>  // b.tcont
     1ec:	str	w1, [x0, #176]
     1f0:	cmp	w3, w17
     1f4:	b.ge	25c <longest_match+0x1dc>  // b.tcont
     1f8:	and	w1, w1, w12
     1fc:	add	x2, x13, w3, sxtw
     200:	ldrb	w10, [x13, w3, sxtw]
     204:	mov	w7, w3
     208:	ldrh	w1, [x11, x1, lsl #1]
     20c:	ldurb	w15, [x2, #-1]
     210:	cmp	w9, w1
     214:	b.cc	fc <longest_match+0x7c>  // b.lo, b.ul, b.last
     218:	cmp	w7, w16
     21c:	csel	w0, w7, w16, ls  // ls = plast
     220:	ret
     224:	add	x3, x3, #0x1
     228:	b	1dc <longest_match+0x15c>
     22c:	add	x3, x3, #0x2
     230:	b	1dc <longest_match+0x15c>
     234:	add	x3, x3, #0x3
     238:	b	1dc <longest_match+0x15c>
     23c:	add	x3, x3, #0x4
     240:	b	1dc <longest_match+0x15c>
     244:	add	x3, x3, #0x6
     248:	b	1dc <longest_match+0x15c>
     24c:	add	x3, x3, #0x5
     250:	b	1dc <longest_match+0x15c>
     254:	add	x3, x3, #0x7
     258:	b	1dc <longest_match+0x15c>
     25c:	mov	w7, w3
     260:	b	218 <longest_match+0x198>
     264:	nop

0000000000000268 <read_buf>:
     268:	stp	x29, x30, [sp, #-48]!
     26c:	mov	x29, sp
     270:	stp	x19, x20, [sp, #16]
     274:	mov	x20, x0
     278:	ldr	w0, [x0, #8]
     27c:	cmp	w0, w2
     280:	csel	w19, w0, w2, ls  // ls = plast
     284:	cbnz	w19, 298 <read_buf+0x30>
     288:	mov	w0, w19
     28c:	ldp	x19, x20, [sp, #16]
     290:	ldp	x29, x30, [sp], #48
     294:	ret
     298:	mov	x3, x1
     29c:	sub	w0, w0, w19
     2a0:	ldr	x1, [x20]
     2a4:	str	x21, [sp, #32]
     2a8:	str	w0, [x20, #8]
     2ac:	mov	w21, w19
     2b0:	mov	x0, x3
     2b4:	mov	x2, x21
     2b8:	bl	0 <memcpy>
     2bc:	mov	x3, x0
     2c0:	ldr	x0, [x20, #56]
     2c4:	ldr	w0, [x0, #48]
     2c8:	cmp	w0, #0x1
     2cc:	b.eq	304 <read_buf+0x9c>  // b.none
     2d0:	cmp	w0, #0x2
     2d4:	b.eq	31c <read_buf+0xb4>  // b.none
     2d8:	ldr	x0, [x20]
     2dc:	ldr	x2, [x20, #16]
     2e0:	add	x0, x0, x21
     2e4:	add	x2, x2, x21
     2e8:	ldr	x21, [sp, #32]
     2ec:	str	x0, [x20]
     2f0:	str	x2, [x20, #16]
     2f4:	mov	w0, w19
     2f8:	ldp	x19, x20, [sp, #16]
     2fc:	ldp	x29, x30, [sp], #48
     300:	ret
     304:	ldr	x0, [x20, #96]
     308:	mov	x1, x3
     30c:	mov	w2, w19
     310:	bl	0 <adler32>
     314:	str	x0, [x20, #96]
     318:	b	2d8 <read_buf+0x70>
     31c:	ldr	x0, [x20, #96]
     320:	mov	x1, x3
     324:	mov	w2, w19
     328:	bl	0 <crc32>
     32c:	str	x0, [x20, #96]
     330:	b	2d8 <read_buf+0x70>
     334:	nop

0000000000000338 <fill_window>:
     338:	stp	x29, x30, [sp, #-64]!
     33c:	mov	x29, sp
     340:	stp	x19, x20, [sp, #16]
     344:	mov	x19, x0
     348:	ldr	w20, [x0, #80]
     34c:	ldr	w4, [x0, #180]
     350:	mov	w0, w20
     354:	stp	x21, x22, [sp, #32]
     358:	sub	w21, w20, #0x106
     35c:	mov	w22, w20
     360:	str	x23, [sp, #48]
     364:	b	3c4 <fill_window+0x8c>
     368:	ldr	x0, [x19]
     36c:	ldr	w1, [x0, #8]
     370:	cbz	w1, 430 <fill_window+0xf8>
     374:	ldr	w4, [x19, #180]
     378:	mov	w2, w23
     37c:	ldr	w3, [x19, #172]
     380:	ldr	x1, [x19, #96]
     384:	add	x3, x3, x4
     388:	add	x1, x1, x3
     38c:	bl	268 <read_buf>
     390:	ldr	w2, [x19, #180]
     394:	ldr	w1, [x19, #5932]
     398:	add	w4, w0, w2
     39c:	str	w4, [x19, #180]
     3a0:	add	w0, w4, w1
     3a4:	cmp	w0, #0x2
     3a8:	b.hi	474 <fill_window+0x13c>  // b.pmore
     3ac:	cmp	w4, #0x105
     3b0:	b.hi	430 <fill_window+0xf8>  // b.pmore
     3b4:	ldr	x0, [x19]
     3b8:	ldr	w0, [x0, #8]
     3bc:	cbz	w0, 430 <fill_window+0xf8>
     3c0:	ldr	w0, [x19, #80]
     3c4:	ldr	x1, [x19, #104]
     3c8:	add	w0, w21, w0
     3cc:	ldr	w2, [x19, #172]
     3d0:	sub	w23, w1, w2
     3d4:	cmp	w2, w0
     3d8:	sub	w23, w23, w4
     3dc:	add	w2, w2, w20
     3e0:	b.cc	368 <fill_window+0x30>  // b.lo, b.ul, b.last
     3e4:	ldr	x0, [x19, #96]
     3e8:	sub	w4, w4, w1
     3ec:	add	w2, w4, w2
     3f0:	add	w23, w23, w20
     3f4:	add	x1, x0, x22
     3f8:	bl	0 <memcpy>
     3fc:	ldp	w2, w1, [x19, #172]
     400:	mov	x0, x19
     404:	ldr	x3, [x19, #152]
     408:	sub	w1, w1, w20
     40c:	sub	w2, w2, w20
     410:	stp	w2, w1, [x19, #172]
     414:	sub	x3, x3, x22
     418:	str	x3, [x19, #152]
     41c:	bl	0 <slide_hash>
     420:	ldr	x0, [x19]
     424:	ldr	w1, [x0, #8]
     428:	cbnz	w1, 374 <fill_window+0x3c>
     42c:	nop
     430:	ldr	x1, [x19, #104]
     434:	ldr	x0, [x19, #5944]
     438:	cmp	x0, x1
     43c:	b.cs	460 <fill_window+0x128>  // b.hs, b.nlast
     440:	ldr	w20, [x19, #172]
     444:	ldr	w21, [x19, #180]
     448:	add	x21, x20, x21
     44c:	cmp	x0, x21
     450:	b.cc	508 <fill_window+0x1d0>  // b.lo, b.ul, b.last
     454:	add	x2, x21, #0x102
     458:	cmp	x0, x2
     45c:	b.cc	548 <fill_window+0x210>  // b.lo, b.ul, b.last
     460:	ldp	x19, x20, [sp, #16]
     464:	ldp	x21, x22, [sp, #32]
     468:	ldr	x23, [sp, #48]
     46c:	ldp	x29, x30, [sp], #64
     470:	ret
     474:	ldr	w9, [x19, #172]
     478:	ldr	x10, [x19, #96]
     47c:	sub	w1, w9, w1
     480:	add	w0, w1, #0x1
     484:	ldp	w7, w8, [x19, #140]
     488:	ldrb	w2, [x10, w1, uxtw]
     48c:	str	w2, [x19, #128]
     490:	ldrb	w0, [x10, w0, uxtw]
     494:	lsl	w2, w2, w8
     498:	eor	w0, w0, w2
     49c:	and	w0, w0, w7
     4a0:	str	w0, [x19, #128]
     4a4:	b	4f8 <fill_window+0x1c0>
     4a8:	ldr	w2, [x19, #128]
     4ac:	ldrb	w3, [x10, w0, uxtw]
     4b0:	ldp	x6, x5, [x19, #112]
     4b4:	lsl	w2, w2, w8
     4b8:	eor	w3, w3, w2
     4bc:	ldr	w0, [x19, #88]
     4c0:	and	w3, w3, w7
     4c4:	str	w3, [x19, #128]
     4c8:	and	w0, w1, w0
     4cc:	ubfiz	x2, x3, #1, #32
     4d0:	ldrh	w3, [x5, x2]
     4d4:	strh	w3, [x6, x0, lsl #1]
     4d8:	strh	w1, [x5, x2]
     4dc:	add	w1, w1, #0x1
     4e0:	sub	w0, w4, w1
     4e4:	sub	w2, w9, w1
     4e8:	str	w2, [x19, #5932]
     4ec:	add	w0, w0, w9
     4f0:	cmp	w0, #0x2
     4f4:	b.ls	3ac <fill_window+0x74>  // b.plast
     4f8:	add	w0, w1, #0x2
     4fc:	cmp	w1, w9
     500:	b.ne	4a8 <fill_window+0x170>  // b.any
     504:	b	3ac <fill_window+0x74>
     508:	sub	x20, x1, x21
     50c:	mov	x2, #0x102                 	// #258
     510:	cmp	x20, x2
     514:	mov	w1, #0x0                   	// #0
     518:	ldr	x0, [x19, #96]
     51c:	csel	x20, x20, x2, ls  // ls = plast
     520:	mov	x2, x20
     524:	add	x20, x20, x21
     528:	add	x0, x0, x21
     52c:	bl	0 <memset>
     530:	str	x20, [x19, #5944]
     534:	ldp	x19, x20, [sp, #16]
     538:	ldp	x21, x22, [sp, #32]
     53c:	ldr	x23, [sp, #48]
     540:	ldp	x29, x30, [sp], #64
     544:	ret
     548:	sub	x2, x21, x0
     54c:	sub	x20, x1, x0
     550:	add	x2, x2, #0x102
     554:	mov	w1, #0x0                   	// #0
     558:	ldr	x3, [x19, #96]
     55c:	cmp	x20, x2
     560:	csel	x20, x20, x2, ls  // ls = plast
     564:	mov	w2, w20
     568:	add	x0, x3, x0
     56c:	bl	0 <memset>
     570:	ldr	x0, [x19, #5944]
     574:	ldp	x21, x22, [sp, #32]
     578:	add	x20, x0, x20
     57c:	str	x20, [x19, #5944]
     580:	ldp	x19, x20, [sp, #16]
     584:	ldr	x23, [sp, #48]
     588:	ldp	x29, x30, [sp], #64
     58c:	ret

0000000000000590 <flush_pending>:
     590:	stp	x29, x30, [sp, #-48]!
     594:	mov	x29, sp
     598:	stp	x21, x22, [sp, #32]
     59c:	ldr	x21, [x0, #56]
     5a0:	stp	x19, x20, [sp, #16]
     5a4:	mov	x19, x0
     5a8:	mov	x0, x21
     5ac:	bl	0 <_tr_flush_bits>
     5b0:	ldr	x20, [x21, #40]
     5b4:	ldr	w0, [x19, #32]
     5b8:	cmp	w0, w20
     5bc:	csel	w20, w0, w20, ls  // ls = plast
     5c0:	cbnz	w20, 5d4 <flush_pending+0x44>
     5c4:	ldp	x19, x20, [sp, #16]
     5c8:	ldp	x21, x22, [sp, #32]
     5cc:	ldp	x29, x30, [sp], #48
     5d0:	ret
     5d4:	ldr	x0, [x19, #24]
     5d8:	mov	w22, w20
     5dc:	ldr	x1, [x21, #32]
     5e0:	mov	x2, x22
     5e4:	bl	0 <memcpy>
     5e8:	ldr	x2, [x19, #24]
     5ec:	ldr	x3, [x21, #32]
     5f0:	add	x2, x2, x22
     5f4:	ldr	x1, [x19, #40]
     5f8:	str	x2, [x19, #24]
     5fc:	ldr	w0, [x19, #32]
     600:	add	x3, x3, x22
     604:	ldr	x2, [x21, #40]
     608:	str	x3, [x21, #32]
     60c:	add	x1, x1, x22
     610:	sub	w0, w0, w20
     614:	str	w0, [x19, #32]
     618:	sub	x22, x2, x22
     61c:	str	x1, [x19, #40]
     620:	str	x22, [x21, #40]
     624:	cbnz	x22, 5c4 <flush_pending+0x34>
     628:	ldr	x0, [x21, #16]
     62c:	str	x0, [x21, #32]
     630:	ldp	x19, x20, [sp, #16]
     634:	ldp	x21, x22, [sp, #32]
     638:	ldp	x29, x30, [sp], #48
     63c:	ret

0000000000000640 <deflate_slow>:
     640:	stp	x29, x30, [sp, #-64]!
     644:	mov	x29, sp
     648:	ldr	w3, [x0, #180]
     64c:	stp	x19, x20, [sp, #16]
     650:	mov	x19, x0
     654:	mov	w20, #0x1                   	// #1
     658:	stp	x21, x22, [sp, #32]
     65c:	adrp	x22, 0 <_dist_code>
     660:	mov	w21, w1
     664:	add	x22, x22, #0x0
     668:	str	x23, [sp, #48]
     66c:	adrp	x23, 0 <_length_code>
     670:	add	x23, x23, #0x0
     674:	nop
     678:	cmp	w3, #0x105
     67c:	b.ls	7c0 <deflate_slow+0x180>  // b.plast
     680:	ldr	w3, [x19, #160]
     684:	ldp	w2, w4, [x19, #172]
     688:	add	w5, w2, #0x2
     68c:	ldr	x0, [x19, #96]
     690:	mov	w8, #0x2                   	// #2
     694:	ldr	w1, [x19, #128]
     698:	ldr	w6, [x19, #144]
     69c:	ldrb	w0, [x0, w5, uxtw]
     6a0:	ldr	w5, [x19, #140]
     6a4:	lsl	w1, w1, w6
     6a8:	eor	w0, w0, w1
     6ac:	ldp	x9, x7, [x19, #112]
     6b0:	and	w0, w0, w5
     6b4:	ldr	w5, [x19, #88]
     6b8:	ubfiz	x6, x0, #1, #32
     6bc:	and	w5, w2, w5
     6c0:	ldrh	w1, [x7, x6]
     6c4:	str	w0, [x19, #128]
     6c8:	strh	w1, [x9, x5, lsl #1]
     6cc:	strh	w2, [x7, x6]
     6d0:	stp	w8, w4, [x19, #160]
     6d4:	str	w3, [x19, #184]
     6d8:	cbz	w1, 700 <deflate_slow+0xc0>
     6dc:	ldr	w0, [x19, #192]
     6e0:	cmp	w0, w3
     6e4:	b.ls	700 <deflate_slow+0xc0>  // b.plast
     6e8:	ldr	w0, [x19, #80]
     6ec:	sub	w4, w2, w1
     6f0:	sub	w0, w0, #0x106
     6f4:	cmp	w4, w0
     6f8:	b.ls	9f4 <deflate_slow+0x3b4>  // b.plast
     6fc:	nop
     700:	cmp	w3, #0x2
     704:	b.ls	714 <deflate_slow+0xd4>  // b.plast
     708:	ldr	w0, [x19, #160]
     70c:	cmp	w0, w3
     710:	b.ls	878 <deflate_slow+0x238>  // b.plast
     714:	ldr	w0, [x19, #168]
     718:	cbz	w0, 7a4 <deflate_slow+0x164>
     71c:	ldr	x3, [x19, #96]
     720:	sub	w2, w2, #0x1
     724:	ldr	w0, [x19, #5900]
     728:	ldr	x1, [x19, #5904]
     72c:	add	w4, w0, #0x1
     730:	ldrb	w2, [x3, w2, uxtw]
     734:	ldr	x3, [x19, #5888]
     738:	strh	wzr, [x1, w0, uxtw #1]
     73c:	add	x1, x19, w2, uxtb #2
     740:	str	w4, [x19, #5900]
     744:	strb	w2, [x3, w0, uxtw]
     748:	ldrh	w0, [x1, #212]
     74c:	add	w0, w0, #0x1
     750:	strh	w0, [x1, #212]
     754:	ldr	w0, [x19, #5896]
     758:	ldr	w1, [x19, #5900]
     75c:	sub	w0, w0, #0x1
     760:	cmp	w1, w0
     764:	b.eq	7fc <deflate_slow+0x1bc>  // b.none
     768:	ldr	x1, [x19]
     76c:	ldr	w0, [x19, #172]
     770:	ldr	w3, [x19, #180]
     774:	ldr	w1, [x1, #32]
     778:	add	w0, w0, #0x1
     77c:	sub	w3, w3, #0x1
     780:	str	w0, [x19, #172]
     784:	str	w3, [x19, #180]
     788:	cbnz	w1, 678 <deflate_slow+0x38>
     78c:	mov	w0, #0x0                   	// #0
     790:	ldp	x19, x20, [sp, #16]
     794:	ldp	x21, x22, [sp, #32]
     798:	ldr	x23, [sp, #48]
     79c:	ldp	x29, x30, [sp], #64
     7a0:	ret
     7a4:	ldr	w3, [x19, #180]
     7a8:	add	w2, w2, #0x1
     7ac:	stp	w20, w2, [x19, #168]
     7b0:	sub	w3, w3, #0x1
     7b4:	str	w3, [x19, #180]
     7b8:	cmp	w3, #0x105
     7bc:	b.hi	680 <deflate_slow+0x40>  // b.pmore
     7c0:	mov	x0, x19
     7c4:	bl	338 <fill_window>
     7c8:	ldr	w0, [x19, #180]
     7cc:	cmp	w0, #0x105
     7d0:	b.hi	680 <deflate_slow+0x40>  // b.pmore
     7d4:	cbz	w21, 78c <deflate_slow+0x14c>
     7d8:	cbz	w0, a14 <deflate_slow+0x3d4>
     7dc:	ldr	w3, [x19, #160]
     7e0:	cmp	w0, #0x2
     7e4:	ldp	w2, w4, [x19, #172]
     7e8:	b.hi	688 <deflate_slow+0x48>  // b.pmore
     7ec:	mov	w0, #0x2                   	// #2
     7f0:	stp	w0, w4, [x19, #160]
     7f4:	str	w3, [x19, #184]
     7f8:	b	700 <deflate_slow+0xc0>
     7fc:	ldr	x2, [x19, #152]
     800:	mov	x1, #0x0                   	// #0
     804:	tbnz	x2, #63, 810 <deflate_slow+0x1d0>
     808:	ldr	x1, [x19, #96]
     80c:	add	x1, x1, w2, uxtw
     810:	ldr	w4, [x19, #172]
     814:	mov	x0, x19
     818:	mov	w3, #0x0                   	// #0
     81c:	sub	x2, x4, x2
     820:	bl	0 <_tr_flush_block>
     824:	ldr	w1, [x19, #172]
     828:	ldr	x0, [x19]
     82c:	str	x1, [x19, #152]
     830:	bl	590 <flush_pending>
     834:	b	768 <deflate_slow+0x128>
     838:	ldr	w1, [x19, #200]
     83c:	ldr	w2, [x19, #172]
     840:	ldr	w3, [x19, #184]
     844:	cmp	w1, #0x1
     848:	b.eq	864 <deflate_slow+0x224>  // b.none
     84c:	cmp	w0, #0x3
     850:	b.ne	700 <deflate_slow+0xc0>  // b.any
     854:	ldr	w0, [x19, #176]
     858:	sub	w0, w2, w0
     85c:	cmp	w0, #0x1, lsl #12
     860:	b.ls	700 <deflate_slow+0xc0>  // b.plast
     864:	mov	w0, #0x2                   	// #2
     868:	str	w0, [x19, #160]
     86c:	cmp	w3, w0
     870:	b.ls	714 <deflate_slow+0xd4>  // b.plast
     874:	nop
     878:	sub	w3, w3, #0x3
     87c:	ldr	w5, [x19, #5900]
     880:	and	w3, w3, #0xff
     884:	ldr	w0, [x19, #164]
     888:	ldr	x8, [x19, #5904]
     88c:	sub	w0, w2, w0
     890:	ldrb	w1, [x23, w3, sxtw]
     894:	and	w0, w0, #0xffff
     898:	ldr	x6, [x19, #5888]
     89c:	sub	w9, w0, #0x1
     8a0:	ldr	w4, [x19, #180]
     8a4:	add	x1, x19, x1, lsl #2
     8a8:	strh	w9, [x8, w5, uxtw #1]
     8ac:	add	w7, w5, #0x1
     8b0:	str	w7, [x19, #5900]
     8b4:	sub	w0, w0, #0x2
     8b8:	strb	w3, [x6, w5, uxtw]
     8bc:	and	w0, w0, #0xffff
     8c0:	sub	w4, w4, #0x3
     8c4:	cmp	w0, #0xff
     8c8:	ldrh	w3, [x1, #1240]
     8cc:	add	w2, w4, w2
     8d0:	add	w3, w3, #0x1
     8d4:	strh	w3, [x1, #1240]
     8d8:	b.ls	8e4 <deflate_slow+0x2a4>  // b.plast
     8dc:	lsr	w0, w0, #7
     8e0:	add	w0, w0, #0x100
     8e4:	ldrb	w0, [x22, w0, sxtw]
     8e8:	mov	w10, #0xfffffffe            	// #-2
     8ec:	add	x0, x19, w0, sxtw #2
     8f0:	ldrh	w1, [x0, #2504]
     8f4:	add	w1, w1, #0x1
     8f8:	strh	w1, [x0, #2504]
     8fc:	ldp	w3, w1, [x19, #180]
     900:	ldr	w6, [x19, #172]
     904:	ldr	w13, [x19, #5896]
     908:	add	w3, w3, #0x1
     90c:	add	w0, w6, #0x1
     910:	ldr	w14, [x19, #5900]
     914:	add	w6, w1, w6
     918:	sub	w13, w13, #0x1
     91c:	sub	w9, w6, #0x1
     920:	sub	w3, w3, w1
     924:	add	w1, w1, w10
     928:	stp	w3, w1, [x19, #180]
     92c:	nop
     930:	str	w0, [x19, #172]
     934:	sub	w4, w10, w0
     938:	add	w7, w0, #0x2
     93c:	add	w4, w4, w6
     940:	cmp	w2, w0
     944:	b.cc	988 <deflate_slow+0x348>  // b.lo, b.ul, b.last
     948:	ldr	x1, [x19, #96]
     94c:	ldr	w5, [x19, #128]
     950:	ldr	w8, [x19, #144]
     954:	ldrb	w1, [x1, w7, uxtw]
     958:	ldr	w7, [x19, #140]
     95c:	lsl	w5, w5, w8
     960:	eor	w1, w1, w5
     964:	ldp	x11, x8, [x19, #112]
     968:	and	w1, w1, w7
     96c:	ldr	w5, [x19, #88]
     970:	ubfiz	x7, x1, #1, #32
     974:	and	w5, w0, w5
     978:	ldrh	w12, [x8, x7]
     97c:	str	w1, [x19, #128]
     980:	strh	w12, [x11, x5, lsl #1]
     984:	strh	w0, [x8, x7]
     988:	str	w4, [x19, #184]
     98c:	add	w0, w0, #0x1
     990:	cmp	w9, w0
     994:	b.ne	930 <deflate_slow+0x2f0>  // b.any
     998:	mov	w0, #0x2                   	// #2
     99c:	str	w0, [x19, #160]
     9a0:	stp	wzr, w9, [x19, #168]
     9a4:	cmp	w14, w13
     9a8:	b.ne	678 <deflate_slow+0x38>  // b.any
     9ac:	ldr	x2, [x19, #152]
     9b0:	mov	x1, #0x0                   	// #0
     9b4:	tbnz	x2, #63, 9c0 <deflate_slow+0x380>
     9b8:	ldr	x1, [x19, #96]
     9bc:	add	x1, x1, w2, uxtw
     9c0:	sub	x2, x9, x2
     9c4:	mov	x0, x19
     9c8:	mov	w3, #0x0                   	// #0
     9cc:	bl	0 <_tr_flush_block>
     9d0:	ldr	w1, [x19, #172]
     9d4:	ldr	x0, [x19]
     9d8:	str	x1, [x19, #152]
     9dc:	bl	590 <flush_pending>
     9e0:	ldr	x0, [x19]
     9e4:	ldr	w0, [x0, #32]
     9e8:	cbz	w0, 78c <deflate_slow+0x14c>
     9ec:	ldr	w3, [x19, #180]
     9f0:	b	678 <deflate_slow+0x38>
     9f4:	mov	x0, x19
     9f8:	bl	80 <longest_match>
     9fc:	str	w0, [x19, #160]
     a00:	cmp	w0, #0x5
     a04:	b.ls	838 <deflate_slow+0x1f8>  // b.plast
     a08:	ldr	w2, [x19, #172]
     a0c:	ldr	w3, [x19, #184]
     a10:	b	700 <deflate_slow+0xc0>
     a14:	ldp	w0, w3, [x19, #168]
     a18:	cbnz	w0, a9c <deflate_slow+0x45c>
     a1c:	cmp	w3, #0x2
     a20:	mov	w0, #0x2                   	// #2
     a24:	csel	w0, w3, w0, ls  // ls = plast
     a28:	str	w0, [x19, #5932]
     a2c:	cmp	w21, #0x4
     a30:	b.eq	af4 <deflate_slow+0x4b4>  // b.none
     a34:	ldr	w1, [x19, #5900]
     a38:	mov	w0, #0x1                   	// #1
     a3c:	cbz	w1, 790 <deflate_slow+0x150>
     a40:	ldr	x2, [x19, #152]
     a44:	mov	x1, #0x0                   	// #0
     a48:	tbnz	x2, #63, a54 <deflate_slow+0x414>
     a4c:	ldr	x1, [x19, #96]
     a50:	add	x1, x1, w2, uxtw
     a54:	mov	w3, w3
     a58:	mov	x0, x19
     a5c:	sub	x2, x3, x2
     a60:	mov	w3, #0x0                   	// #0
     a64:	bl	0 <_tr_flush_block>
     a68:	ldr	w1, [x19, #172]
     a6c:	ldr	x0, [x19]
     a70:	str	x1, [x19, #152]
     a74:	bl	590 <flush_pending>
     a78:	ldr	x0, [x19]
     a7c:	ldp	x19, x20, [sp, #16]
     a80:	ldr	w0, [x0, #32]
     a84:	ldp	x21, x22, [sp, #32]
     a88:	cmp	w0, #0x0
     a8c:	cset	w0, ne  // ne = any
     a90:	ldr	x23, [sp, #48]
     a94:	ldp	x29, x30, [sp], #64
     a98:	ret
     a9c:	ldr	x2, [x19, #96]
     aa0:	sub	w3, w3, #0x1
     aa4:	ldr	w0, [x19, #5900]
     aa8:	ldr	x1, [x19, #5904]
     aac:	add	w4, w0, #0x1
     ab0:	ldrb	w2, [x2, w3, uxtw]
     ab4:	ldr	x3, [x19, #5888]
     ab8:	strh	wzr, [x1, w0, uxtw #1]
     abc:	add	x1, x19, w2, uxtb #2
     ac0:	str	w4, [x19, #5900]
     ac4:	strb	w2, [x3, w0, uxtw]
     ac8:	ldrh	w0, [x1, #212]
     acc:	add	w0, w0, #0x1
     ad0:	strh	w0, [x1, #212]
     ad4:	mov	w0, #0x2                   	// #2
     ad8:	str	wzr, [x19, #168]
     adc:	ldr	w3, [x19, #172]
     ae0:	cmp	w3, #0x2
     ae4:	csel	w0, w3, w0, ls  // ls = plast
     ae8:	str	w0, [x19, #5932]
     aec:	cmp	w21, #0x4
     af0:	b.ne	a34 <deflate_slow+0x3f4>  // b.any
     af4:	ldr	x2, [x19, #152]
     af8:	mov	x1, #0x0                   	// #0
     afc:	tbnz	x2, #63, b08 <deflate_slow+0x4c8>
     b00:	ldr	x1, [x19, #96]
     b04:	add	x1, x1, w2, uxtw
     b08:	mov	w3, w3
     b0c:	mov	x0, x19
     b10:	sub	x2, x3, x2
     b14:	mov	w3, #0x1                   	// #1
     b18:	bl	0 <_tr_flush_block>
     b1c:	ldr	w1, [x19, #172]
     b20:	ldr	x0, [x19]
     b24:	str	x1, [x19, #152]
     b28:	bl	590 <flush_pending>
     b2c:	ldr	x0, [x19]
     b30:	ldp	x19, x20, [sp, #16]
     b34:	ldr	w0, [x0, #32]
     b38:	ldp	x21, x22, [sp, #32]
     b3c:	cmp	w0, #0x0
     b40:	cset	w0, ne  // ne = any
     b44:	add	w0, w0, #0x2
     b48:	ldr	x23, [sp, #48]
     b4c:	ldp	x29, x30, [sp], #64
     b50:	ret
     b54:	nop

0000000000000b58 <deflate_fast>:
     b58:	stp	x29, x30, [sp, #-48]!
     b5c:	mov	x29, sp
     b60:	stp	x19, x20, [sp, #16]
     b64:	adrp	x20, 0 <_length_code>
     b68:	mov	x19, x0
     b6c:	add	x20, x20, #0x0
     b70:	stp	x21, x22, [sp, #32]
     b74:	adrp	x21, 0 <_dist_code>
     b78:	mov	w22, w1
     b7c:	add	x21, x21, #0x0
     b80:	ldr	w1, [x19, #180]
     b84:	nop
     b88:	cmp	w1, #0x105
     b8c:	b.ls	d38 <deflate_fast+0x1e0>  // b.plast
     b90:	ldr	w3, [x19, #172]
     b94:	ldr	x0, [x19, #96]
     b98:	add	w2, w3, #0x2
     b9c:	ldr	w1, [x19, #128]
     ba0:	ldr	w4, [x19, #144]
     ba4:	ldrb	w0, [x0, w2, uxtw]
     ba8:	ldr	w2, [x19, #140]
     bac:	lsl	w1, w1, w4
     bb0:	eor	w0, w0, w1
     bb4:	ldp	x6, x5, [x19, #112]
     bb8:	and	w0, w0, w2
     bbc:	ldr	w2, [x19, #88]
     bc0:	ubfiz	x4, x0, #1, #32
     bc4:	and	w2, w3, w2
     bc8:	ldrh	w1, [x5, x4]
     bcc:	str	w0, [x19, #128]
     bd0:	strh	w1, [x6, x2, lsl #1]
     bd4:	strh	w3, [x5, x4]
     bd8:	cbz	w1, bf0 <deflate_fast+0x98>
     bdc:	ldr	w0, [x19, #80]
     be0:	sub	w2, w3, w1
     be4:	sub	w0, w0, #0x106
     be8:	cmp	w2, w0
     bec:	b.ls	d64 <deflate_fast+0x20c>  // b.plast
     bf0:	ldr	w2, [x19, #5900]
     bf4:	ldr	w0, [x19, #160]
     bf8:	add	w5, w2, #0x1
     bfc:	cmp	w0, #0x2
     c00:	ubfiz	x6, x2, #1, #32
     c04:	ldr	x4, [x19, #5888]
     c08:	ldr	x7, [x19, #5904]
     c0c:	b.ls	d90 <deflate_fast+0x238>  // b.plast
     c10:	sub	w1, w0, #0x3
     c14:	ldr	w0, [x19, #176]
     c18:	and	w1, w1, #0xff
     c1c:	sub	w0, w3, w0
     c20:	and	w0, w0, #0xffff
     c24:	strh	w0, [x7, x6]
     c28:	ldrb	w3, [x20, w1, sxtw]
     c2c:	sub	w0, w0, #0x1
     c30:	str	w5, [x19, #5900]
     c34:	and	w0, w0, #0xffff
     c38:	strb	w1, [x4, w2, uxtw]
     c3c:	cmp	w0, #0xff
     c40:	add	x1, x19, x3, lsl #2
     c44:	ldrh	w2, [x1, #1240]
     c48:	add	w2, w2, #0x1
     c4c:	strh	w2, [x1, #1240]
     c50:	b.ls	c5c <deflate_fast+0x104>  // b.plast
     c54:	lsr	w0, w0, #7
     c58:	add	w0, w0, #0x100
     c5c:	ldrb	w0, [x21, w0, sxtw]
     c60:	add	x0, x19, w0, sxtw #2
     c64:	ldrh	w1, [x0, #2504]
     c68:	add	w1, w1, #0x1
     c6c:	strh	w1, [x0, #2504]
     c70:	ldr	w0, [x19, #5896]
     c74:	ldr	w2, [x19, #160]
     c78:	ldr	w1, [x19, #180]
     c7c:	sub	w0, w0, #0x1
     c80:	ldr	w4, [x19, #5900]
     c84:	ldr	w3, [x19, #192]
     c88:	sub	w1, w1, w2
     c8c:	cmp	w0, w4
     c90:	ldr	w0, [x19, #172]
     c94:	str	w1, [x19, #180]
     c98:	cset	w6, eq  // eq = none
     c9c:	cmp	w2, w3
     ca0:	add	w3, w2, w0
     ca4:	ldp	w8, w9, [x19, #140]
     ca8:	ccmp	w1, #0x2, #0x0, ls  // ls = plast
     cac:	ldr	x7, [x19, #96]
     cb0:	b.hi	de8 <deflate_fast+0x290>  // b.pmore
     cb4:	str	wzr, [x19, #160]
     cb8:	add	w0, w3, #0x1
     cbc:	str	w3, [x19, #172]
     cc0:	ldrb	w2, [x7, w3, uxtw]
     cc4:	str	w2, [x19, #128]
     cc8:	ldrb	w0, [x7, w0, uxtw]
     ccc:	lsl	w2, w2, w9
     cd0:	eor	w0, w0, w2
     cd4:	and	w0, w0, w8
     cd8:	str	w0, [x19, #128]
     cdc:	cbz	w6, b88 <deflate_fast+0x30>
     ce0:	ldr	x2, [x19, #152]
     ce4:	mov	x1, #0x0                   	// #0
     ce8:	tbnz	x2, #63, cf4 <deflate_fast+0x19c>
     cec:	ldr	x1, [x19, #96]
     cf0:	add	x1, x1, w2, uxtw
     cf4:	ldr	w4, [x19, #172]
     cf8:	mov	x0, x19
     cfc:	mov	w3, #0x0                   	// #0
     d00:	sub	x2, x4, x2
     d04:	bl	0 <_tr_flush_block>
     d08:	ldr	w1, [x19, #172]
     d0c:	ldr	x0, [x19]
     d10:	str	x1, [x19, #152]
     d14:	bl	590 <flush_pending>
     d18:	ldr	x0, [x19]
     d1c:	ldr	w0, [x0, #32]
     d20:	cbnz	w0, b80 <deflate_fast+0x28>
     d24:	mov	w0, #0x0                   	// #0
     d28:	ldp	x19, x20, [sp, #16]
     d2c:	ldp	x21, x22, [sp, #32]
     d30:	ldp	x29, x30, [sp], #48
     d34:	ret
     d38:	mov	x0, x19
     d3c:	bl	338 <fill_window>
     d40:	ldr	w0, [x19, #180]
     d44:	cmp	w0, #0x105
     d48:	b.hi	b90 <deflate_fast+0x38>  // b.pmore
     d4c:	cbz	w22, d24 <deflate_fast+0x1cc>
     d50:	cbz	w0, e54 <deflate_fast+0x2fc>
     d54:	ldr	w3, [x19, #172]
     d58:	cmp	w0, #0x2
     d5c:	b.ls	bf0 <deflate_fast+0x98>  // b.plast
     d60:	b	b94 <deflate_fast+0x3c>
     d64:	mov	x0, x19
     d68:	bl	80 <longest_match>
     d6c:	ldr	w2, [x19, #5900]
     d70:	cmp	w0, #0x2
     d74:	str	w0, [x19, #160]
     d78:	ldr	w3, [x19, #172]
     d7c:	add	w5, w2, #0x1
     d80:	ubfiz	x6, x2, #1, #32
     d84:	ldr	x4, [x19, #5888]
     d88:	ldr	x7, [x19, #5904]
     d8c:	b.hi	c10 <deflate_fast+0xb8>  // b.pmore
     d90:	ldr	x0, [x19, #96]
     d94:	ldrb	w0, [x0, w3, uxtw]
     d98:	strh	wzr, [x7, x6]
     d9c:	str	w5, [x19, #5900]
     da0:	add	x1, x19, w0, uxtb #2
     da4:	strb	w0, [x4, w2, uxtw]
     da8:	ldrh	w0, [x1, #212]
     dac:	add	w0, w0, #0x1
     db0:	strh	w0, [x1, #212]
     db4:	ldr	w1, [x19, #5896]
     db8:	ldr	w2, [x19, #5900]
     dbc:	sub	w1, w1, #0x1
     dc0:	ldr	w0, [x19, #172]
     dc4:	cmp	w1, w2
     dc8:	ldr	w1, [x19, #180]
     dcc:	add	w0, w0, #0x1
     dd0:	str	w0, [x19, #172]
     dd4:	sub	w1, w1, #0x1
     dd8:	str	w1, [x19, #180]
     ddc:	cset	w6, eq  // eq = none
     de0:	cbz	w6, b88 <deflate_fast+0x30>
     de4:	b	ce0 <deflate_fast+0x188>
     de8:	ldp	x13, x10, [x19, #112]
     dec:	sub	w2, w2, #0x1
     df0:	ldr	w14, [x19, #88]
     df4:	add	w0, w0, #0x1
     df8:	str	w2, [x19, #160]
     dfc:	ldr	w2, [x19, #128]
     e00:	add	w5, w0, #0x2
     e04:	str	w0, [x19, #172]
     e08:	lsl	w2, w2, w9
     e0c:	and	w11, w14, w0
     e10:	mvn	w4, w0
     e14:	ldrb	w5, [x7, w5, uxtw]
     e18:	add	w4, w4, w3
     e1c:	eor	w2, w5, w2
     e20:	and	w2, w2, w8
     e24:	ubfiz	x5, x2, #1, #32
     e28:	ldrh	w12, [x10, x5]
     e2c:	str	w2, [x19, #128]
     e30:	strh	w12, [x13, x11, lsl #1]
     e34:	strh	w0, [x10, x5]
     e38:	add	w0, w0, #0x1
     e3c:	str	w4, [x19, #160]
     e40:	cmp	w0, w3
     e44:	b.ne	e00 <deflate_fast+0x2a8>  // b.any
     e48:	str	w0, [x19, #172]
     e4c:	cbz	w6, b88 <deflate_fast+0x30>
     e50:	b	ce0 <deflate_fast+0x188>
     e54:	ldr	w3, [x19, #172]
     e58:	mov	w0, #0x2                   	// #2
     e5c:	cmp	w3, w0
     e60:	csel	w0, w3, w0, ls  // ls = plast
     e64:	str	w0, [x19, #5932]
     e68:	cmp	w22, #0x4
     e6c:	b.eq	ed4 <deflate_fast+0x37c>  // b.none
     e70:	ldr	w1, [x19, #5900]
     e74:	mov	w0, #0x1                   	// #1
     e78:	cbz	w1, f20 <deflate_fast+0x3c8>
     e7c:	ldr	x2, [x19, #152]
     e80:	mov	x1, #0x0                   	// #0
     e84:	tbnz	x2, #63, e90 <deflate_fast+0x338>
     e88:	ldr	x1, [x19, #96]
     e8c:	add	x1, x1, w2, uxtw
     e90:	mov	w3, w3
     e94:	mov	x0, x19
     e98:	sub	x2, x3, x2
     e9c:	mov	w3, #0x0                   	// #0
     ea0:	bl	0 <_tr_flush_block>
     ea4:	ldr	w1, [x19, #172]
     ea8:	ldr	x0, [x19]
     eac:	str	x1, [x19, #152]
     eb0:	bl	590 <flush_pending>
     eb4:	ldr	x0, [x19]
     eb8:	ldp	x19, x20, [sp, #16]
     ebc:	ldr	w0, [x0, #32]
     ec0:	ldp	x21, x22, [sp, #32]
     ec4:	cmp	w0, #0x0
     ec8:	cset	w0, ne  // ne = any
     ecc:	ldp	x29, x30, [sp], #48
     ed0:	ret
     ed4:	ldr	x2, [x19, #152]
     ed8:	mov	x1, #0x0                   	// #0
     edc:	tbnz	x2, #63, ee8 <deflate_fast+0x390>
     ee0:	ldr	x1, [x19, #96]
     ee4:	add	x1, x1, w2, uxtw
     ee8:	mov	w3, w3
     eec:	mov	x0, x19
     ef0:	sub	x2, x3, x2
     ef4:	mov	w3, #0x1                   	// #1
     ef8:	bl	0 <_tr_flush_block>
     efc:	ldr	w1, [x19, #172]
     f00:	ldr	x0, [x19]
     f04:	str	x1, [x19, #152]
     f08:	bl	590 <flush_pending>
     f0c:	ldr	x0, [x19]
     f10:	ldr	w0, [x0, #32]
     f14:	cmp	w0, #0x0
     f18:	cset	w0, ne  // ne = any
     f1c:	add	w0, w0, #0x2
     f20:	ldp	x19, x20, [sp, #16]
     f24:	ldp	x21, x22, [sp, #32]
     f28:	ldp	x29, x30, [sp], #48
     f2c:	ret

0000000000000f30 <deflate_stored>:
     f30:	stp	x29, x30, [sp, #-96]!
     f34:	mov	x29, sp
     f38:	stp	x19, x20, [sp, #16]
     f3c:	mov	x19, x0
     f40:	stp	x21, x22, [sp, #32]
     f44:	mov	w22, w1
     f48:	ldr	w1, [x0, #80]
     f4c:	ldr	x0, [x0]
     f50:	stp	x23, x24, [sp, #48]
     f54:	mov	w24, #0xffff                	// #65535
     f58:	ldr	x23, [x19, #24]
     f5c:	stp	x25, x26, [sp, #64]
     f60:	ldr	w26, [x0, #8]
     f64:	sub	x23, x23, #0x5
     f68:	mov	x25, #0xfffe                	// #65534
     f6c:	cmp	x23, x1
     f70:	mov	w2, w26
     f74:	csel	x23, x23, x1, ls  // ls = plast
     f78:	stp	x27, x28, [sp, #80]
     f7c:	nop
     f80:	ldr	w1, [x19, #5940]
     f84:	ldr	w20, [x0, #32]
     f88:	add	w1, w1, #0x2a
     f8c:	asr	w3, w1, #3
     f90:	cmp	w20, w1, asr #3
     f94:	b.cc	1274 <deflate_stored+0x344>  // b.lo, b.ul, b.last
     f98:	ldr	x4, [x19, #152]
     f9c:	sub	w20, w20, w3
     fa0:	ldr	w21, [x19, #172]
     fa4:	sub	w3, w21, w4
     fa8:	sub	w21, w21, w4
     fac:	add	x3, x3, w2, uxtw
     fb0:	add	w4, w21, w2
     fb4:	cmp	x3, x25
     fb8:	csel	w1, w4, w24, ls  // ls = plast
     fbc:	cmp	w1, w20
     fc0:	csel	w20, w1, w20, ls  // ls = plast
     fc4:	cmp	w20, w23
     fc8:	b.cs	fe4 <deflate_stored+0xb4>  // b.hs, b.nlast
     fcc:	cmp	w20, #0x0
     fd0:	ccmp	w22, #0x4, #0x4, eq  // eq = none
     fd4:	ccmp	w22, #0x0, #0x4, eq  // eq = none
     fd8:	b.eq	1274 <deflate_stored+0x344>  // b.none
     fdc:	cmp	w20, w4
     fe0:	b.ne	1274 <deflate_stored+0x344>  // b.any
     fe4:	cmp	w22, #0x4
     fe8:	mov	w27, #0x0                   	// #0
     fec:	b.ne	ffc <deflate_stored+0xcc>  // b.any
     ff0:	add	w2, w21, w2
     ff4:	cmp	w2, w20
     ff8:	cset	w27, eq  // eq = none
     ffc:	mov	w3, w27
    1000:	mov	x0, x19
    1004:	mov	x2, #0x0                   	// #0
    1008:	mov	x1, #0x0                   	// #0
    100c:	bl	0 <_tr_stored_block>
    1010:	ldr	x3, [x19, #16]
    1014:	and	w1, w20, #0xff
    1018:	ldr	x5, [x19, #40]
    101c:	mvn	w4, w1
    1020:	lsr	w2, w20, #8
    1024:	mvn	w0, w20
    1028:	add	x3, x3, x5
    102c:	lsr	w0, w0, #8
    1030:	sturb	w1, [x3, #-4]
    1034:	ldr	x1, [x19, #16]
    1038:	ldr	x3, [x19, #40]
    103c:	add	x1, x1, x3
    1040:	sturb	w2, [x1, #-3]
    1044:	ldr	x1, [x19, #16]
    1048:	ldr	x2, [x19, #40]
    104c:	add	x1, x1, x2
    1050:	sturb	w4, [x1, #-2]
    1054:	ldr	x1, [x19, #16]
    1058:	ldr	x2, [x19, #40]
    105c:	add	x1, x1, x2
    1060:	sturb	w0, [x1, #-1]
    1064:	ldr	x0, [x19]
    1068:	bl	590 <flush_pending>
    106c:	ldr	x0, [x19]
    1070:	cbnz	w21, 11d8 <deflate_stored+0x2a8>
    1074:	cbnz	w20, 1238 <deflate_stored+0x308>
    1078:	ldr	w2, [x0, #8]
    107c:	cbz	w27, f80 <deflate_stored+0x50>
    1080:	subs	w26, w26, w2
    1084:	mov	w23, #0x1                   	// #1
    1088:	b.eq	1280 <deflate_stored+0x350>  // b.none
    108c:	ldr	w1, [x19, #80]
    1090:	ldr	x3, [x19, #96]
    1094:	cmp	w1, w26
    1098:	b.ls	1360 <deflate_stored+0x430>  // b.plast
    109c:	ldr	w4, [x19, #172]
    10a0:	mov	w20, w26
    10a4:	ldr	x2, [x19, #104]
    10a8:	mov	w5, w4
    10ac:	sub	x2, x2, x5
    10b0:	cmp	x2, w26, uxtw
    10b4:	b.ls	1410 <deflate_stored+0x4e0>  // b.plast
    10b8:	ldr	x1, [x0]
    10bc:	mov	x2, x20
    10c0:	add	x0, x3, x5
    10c4:	sub	x1, x1, x20
    10c8:	bl	0 <memcpy>
    10cc:	ldr	w3, [x19, #172]
    10d0:	ldr	w2, [x19, #80]
    10d4:	add	w3, w26, w3
    10d8:	str	w3, [x19, #172]
    10dc:	ldr	w0, [x19, #5932]
    10e0:	mov	w5, w3
    10e4:	str	x5, [x19, #152]
    10e8:	mov	x6, x5
    10ec:	sub	w2, w2, w0
    10f0:	cmp	w2, w26
    10f4:	csel	w2, w2, w26, ls  // ls = plast
    10f8:	add	w2, w2, w0
    10fc:	str	w2, [x19, #5932]
    1100:	ldr	x0, [x19, #5944]
    1104:	cmp	x0, x5
    1108:	b.cc	1298 <deflate_stored+0x368>  // b.lo, b.ul, b.last
    110c:	cbnz	w23, 12a0 <deflate_stored+0x370>
    1110:	ldr	x0, [x19]
    1114:	tst	w22, #0xfffffffb
    1118:	ldr	w2, [x0, #8]
    111c:	b.eq	1124 <deflate_stored+0x1f4>  // b.none
    1120:	cbz	w2, 134c <deflate_stored+0x41c>
    1124:	ldr	x20, [x19, #104]
    1128:	sub	w20, w20, #0x1
    112c:	sub	w20, w20, w3
    1130:	cmp	w20, w2
    1134:	b.cs	114c <deflate_stored+0x21c>  // b.hs, b.nlast
    1138:	ldr	x4, [x19, #152]
    113c:	ldr	w5, [x19, #80]
    1140:	mov	w1, w5
    1144:	cmp	x4, w5, uxtw
    1148:	b.ge	13c4 <deflate_stored+0x494>  // b.tcont
    114c:	cmp	w20, w2
    1150:	csel	w20, w20, w2, ls  // ls = plast
    1154:	cbnz	w20, 1324 <deflate_stored+0x3f4>
    1158:	ldr	x4, [x19, #152]
    115c:	ldr	x0, [x19, #5944]
    1160:	cmp	x0, x6
    1164:	b.cs	116c <deflate_stored+0x23c>  // b.hs, b.nlast
    1168:	str	x6, [x19, #5944]
    116c:	ldr	w1, [x19, #5940]
    1170:	mov	x5, #0xffff                	// #65535
    1174:	ldr	x0, [x19, #24]
    1178:	add	w1, w1, #0x2a
    117c:	ldr	w2, [x19, #80]
    1180:	sub	w3, w3, w4
    1184:	asr	w1, w1, #3
    1188:	sub	x0, x0, x1
    118c:	cmp	x0, x5
    1190:	csel	x0, x0, x5, ls  // ls = plast
    1194:	cmp	w2, w0
    1198:	mov	w1, w0
    119c:	csel	w2, w2, w0, ls  // ls = plast
    11a0:	cmp	w2, w3
    11a4:	b.ls	12c4 <deflate_stored+0x394>  // b.plast
    11a8:	cmp	w3, #0x0
    11ac:	ccmp	w22, #0x4, #0x4, eq  // eq = none
    11b0:	ccmp	w22, #0x0, #0x4, eq  // eq = none
    11b4:	b.ne	1440 <deflate_stored+0x510>  // b.any
    11b8:	mov	w0, w23
    11bc:	ldp	x19, x20, [sp, #16]
    11c0:	ldp	x21, x22, [sp, #32]
    11c4:	ldp	x23, x24, [sp, #48]
    11c8:	ldp	x25, x26, [sp, #64]
    11cc:	ldp	x27, x28, [sp, #80]
    11d0:	ldp	x29, x30, [sp], #96
    11d4:	ret
    11d8:	ldr	x0, [x0, #24]
    11dc:	cmp	w20, w21
    11e0:	ldr	x3, [x19, #96]
    11e4:	csel	w28, w20, w21, ls  // ls = plast
    11e8:	ldr	x1, [x19, #152]
    11ec:	csel	w21, w20, w21, ls  // ls = plast
    11f0:	mov	x2, x28
    11f4:	sub	w20, w20, w21
    11f8:	add	x1, x3, x1
    11fc:	bl	0 <memcpy>
    1200:	ldr	x0, [x19]
    1204:	ldr	x4, [x19, #152]
    1208:	ldr	x3, [x0, #24]
    120c:	add	x4, x4, x28
    1210:	ldr	x2, [x0, #40]
    1214:	add	x5, x3, x28
    1218:	ldr	w3, [x0, #32]
    121c:	add	x2, x2, x28
    1220:	str	x5, [x0, #24]
    1224:	sub	w21, w3, w21
    1228:	str	w21, [x0, #32]
    122c:	str	x2, [x0, #40]
    1230:	str	x4, [x19, #152]
    1234:	cbz	w20, 1078 <deflate_stored+0x148>
    1238:	ldr	x1, [x0, #24]
    123c:	mov	w2, w20
    1240:	bl	268 <read_buf>
    1244:	ldr	x0, [x19]
    1248:	mov	w4, w20
    124c:	ldr	x3, [x0, #24]
    1250:	ldr	x1, [x0, #40]
    1254:	add	x3, x3, x4
    1258:	ldr	w2, [x0, #32]
    125c:	add	x1, x1, x4
    1260:	str	x3, [x0, #24]
    1264:	sub	w20, w2, w20
    1268:	str	w20, [x0, #32]
    126c:	str	x1, [x0, #40]
    1270:	b	1078 <deflate_stored+0x148>
    1274:	subs	w26, w26, w2
    1278:	mov	w23, #0x0                   	// #0
    127c:	b.ne	108c <deflate_stored+0x15c>  // b.any
    1280:	ldr	w3, [x19, #172]
    1284:	ldr	x0, [x19, #5944]
    1288:	mov	w5, w3
    128c:	mov	x6, x5
    1290:	cmp	x0, x5
    1294:	b.cs	110c <deflate_stored+0x1dc>  // b.hs, b.nlast
    1298:	str	x5, [x19, #5944]
    129c:	cbz	w23, 1110 <deflate_stored+0x1e0>
    12a0:	mov	w23, #0x3                   	// #3
    12a4:	mov	w0, w23
    12a8:	ldp	x19, x20, [sp, #16]
    12ac:	ldp	x21, x22, [sp, #32]
    12b0:	ldp	x23, x24, [sp, #48]
    12b4:	ldp	x25, x26, [sp, #64]
    12b8:	ldp	x27, x28, [sp, #80]
    12bc:	ldp	x29, x30, [sp], #96
    12c0:	ret
    12c4:	cmp	w0, w3
    12c8:	csel	w0, w0, w3, ls  // ls = plast
    12cc:	cmp	w22, #0x4
    12d0:	b.eq	138c <deflate_stored+0x45c>  // b.none
    12d4:	ldr	x1, [x19, #96]
    12d8:	mov	w20, w0
    12dc:	mov	x2, x20
    12e0:	mov	x0, x19
    12e4:	add	x1, x1, x4
    12e8:	mov	w3, #0x0                   	// #0
    12ec:	bl	0 <_tr_stored_block>
    12f0:	ldr	x1, [x19, #152]
    12f4:	ldr	x0, [x19]
    12f8:	add	x1, x1, x20
    12fc:	str	x1, [x19, #152]
    1300:	bl	590 <flush_pending>
    1304:	mov	w0, w23
    1308:	ldp	x19, x20, [sp, #16]
    130c:	ldp	x21, x22, [sp, #32]
    1310:	ldp	x23, x24, [sp, #48]
    1314:	ldp	x25, x26, [sp, #64]
    1318:	ldp	x27, x28, [sp, #80]
    131c:	ldp	x29, x30, [sp], #96
    1320:	ret
    1324:	ldr	x1, [x19, #96]
    1328:	mov	w2, w20
    132c:	add	x1, x1, x6
    1330:	bl	268 <read_buf>
    1334:	ldr	w3, [x19, #172]
    1338:	ldr	x4, [x19, #152]
    133c:	add	w6, w20, w3
    1340:	mov	x3, x6
    1344:	str	w6, [x19, #172]
    1348:	b	115c <deflate_stored+0x22c>
    134c:	ldr	x4, [x19, #152]
    1350:	cmp	x5, x4
    1354:	b.ne	115c <deflate_stored+0x22c>  // b.any
    1358:	mov	w23, #0x1                   	// #1
    135c:	b	11b8 <deflate_stored+0x288>
    1360:	ldr	x0, [x0]
    1364:	mov	w2, #0x2                   	// #2
    1368:	str	w2, [x19, #5928]
    136c:	mov	w2, w1
    1370:	sub	x1, x0, x2
    1374:	mov	x0, x3
    1378:	bl	0 <memcpy>
    137c:	ldr	w3, [x19, #80]
    1380:	str	w3, [x19, #172]
    1384:	mov	w2, w3
    1388:	b	10dc <deflate_stored+0x1ac>
    138c:	ldr	x2, [x19]
    1390:	ldr	w2, [x2, #8]
    1394:	cmp	w2, #0x0
    1398:	ccmp	w1, w3, #0x0, eq  // eq = none
    139c:	b.cc	12d4 <deflate_stored+0x3a4>  // b.lo, b.ul, b.last
    13a0:	ldr	x1, [x19, #96]
    13a4:	mov	w20, w0
    13a8:	mov	x2, x20
    13ac:	mov	x0, x19
    13b0:	add	x1, x1, x4
    13b4:	mov	w3, #0x1                   	// #1
    13b8:	mov	w23, #0x2                   	// #2
    13bc:	bl	0 <_tr_stored_block>
    13c0:	b	12f0 <deflate_stored+0x3c0>
    13c4:	ldr	x0, [x19, #96]
    13c8:	sub	x4, x4, x1
    13cc:	sub	w2, w3, w5
    13d0:	str	x4, [x19, #152]
    13d4:	str	w2, [x19, #172]
    13d8:	add	x1, x0, x1
    13dc:	bl	0 <memcpy>
    13e0:	ldr	w0, [x19, #5928]
    13e4:	cmp	w0, #0x1
    13e8:	b.hi	13f4 <deflate_stored+0x4c4>  // b.pmore
    13ec:	add	w0, w0, #0x1
    13f0:	str	w0, [x19, #5928]
    13f4:	ldr	x0, [x19]
    13f8:	ldr	w1, [x19, #80]
    13fc:	ldr	w3, [x19, #172]
    1400:	ldr	w2, [x0, #8]
    1404:	add	w20, w20, w1
    1408:	mov	w6, w3
    140c:	b	114c <deflate_stored+0x21c>
    1410:	sub	w2, w4, w1
    1414:	str	w2, [x19, #172]
    1418:	add	x1, x3, w1, uxtw
    141c:	mov	x0, x3
    1420:	bl	0 <memcpy>
    1424:	ldr	w0, [x19, #5928]
    1428:	ldr	w5, [x19, #172]
    142c:	cmp	w0, #0x1
    1430:	b.ls	1468 <deflate_stored+0x538>  // b.plast
    1434:	ldr	x0, [x19]
    1438:	ldr	x3, [x19, #96]
    143c:	b	10b8 <deflate_stored+0x188>
    1440:	ldr	x0, [x19]
    1444:	ldr	w0, [x0, #8]
    1448:	cmp	w0, #0x0
    144c:	ccmp	w1, w3, #0x0, eq  // eq = none
    1450:	b.cc	11b8 <deflate_stored+0x288>  // b.lo, b.ul, b.last
    1454:	cmp	w1, w3
    1458:	csel	w0, w1, w3, ls  // ls = plast
    145c:	cmp	w22, #0x4
    1460:	b.ne	12d4 <deflate_stored+0x3a4>  // b.any
    1464:	b	13a0 <deflate_stored+0x470>
    1468:	add	w1, w0, #0x1
    146c:	str	w1, [x19, #5928]
    1470:	ldr	x0, [x19]
    1474:	ldr	x3, [x19, #96]
    1478:	b	10b8 <deflate_stored+0x188>
    147c:	nop

0000000000001480 <deflateStateCheck.part.0>:
    1480:	ldr	x2, [x0, #56]
    1484:	mov	x1, x0
    1488:	cbz	x2, 14e4 <deflateStateCheck.part.0+0x64>
    148c:	ldr	x3, [x2]
    1490:	mov	w0, #0x1                   	// #1
    1494:	cmp	x1, x3
    1498:	b.eq	14a0 <deflateStateCheck.part.0+0x20>  // b.none
    149c:	ret
    14a0:	ldr	w1, [x2, #8]
    14a4:	mov	w0, #0x45                  	// #69
    14a8:	mov	w4, #0x5b                  	// #91
    14ac:	mov	w3, #0x29a                 	// #666
    14b0:	cmp	w1, #0x2a
    14b4:	sub	w2, w1, #0x39
    14b8:	ccmp	w1, w0, #0x4, ne  // ne = any
    14bc:	cset	w0, ne  // ne = any
    14c0:	cmp	w1, #0x67
    14c4:	ccmp	w1, w4, #0x4, ne  // ne = any
    14c8:	csel	w0, w0, wzr, ne  // ne = any
    14cc:	cmp	w1, #0x71
    14d0:	ccmp	w1, w3, #0x4, ne  // ne = any
    14d4:	csel	w0, w0, wzr, ne  // ne = any
    14d8:	tst	w2, #0xffffffef
    14dc:	csel	w0, w0, wzr, ne  // ne = any
    14e0:	ret
    14e4:	mov	w0, #0x1                   	// #1
    14e8:	ret
    14ec:	nop

00000000000014f0 <deflateSetDictionary>:
    14f0:	cbz	x0, 16dc <deflateSetDictionary+0x1ec>
    14f4:	stp	x29, x30, [sp, #-64]!
    14f8:	mov	x29, sp
    14fc:	stp	x19, x20, [sp, #16]
    1500:	mov	x20, x1
    1504:	mov	x19, x0
    1508:	ldr	x1, [x0, #64]
    150c:	cbz	x1, 1658 <deflateSetDictionary+0x168>
    1510:	ldr	x1, [x0, #72]
    1514:	cbz	x1, 1658 <deflateSetDictionary+0x168>
    1518:	stp	x21, x22, [sp, #32]
    151c:	mov	w22, w2
    1520:	bl	1480 <deflateStateCheck.part.0>
    1524:	cmp	x20, #0x0
    1528:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    152c:	b.ne	1700 <deflateSetDictionary+0x210>  // b.any
    1530:	stp	x23, x24, [sp, #48]
    1534:	ldr	x24, [x19, #56]
    1538:	ldr	w21, [x24, #48]
    153c:	cmp	w21, #0x2
    1540:	b.eq	16f0 <deflateSetDictionary+0x200>  // b.none
    1544:	cmp	w21, #0x1
    1548:	b.eq	1668 <deflateSetDictionary+0x178>  // b.none
    154c:	ldr	w0, [x24, #180]
    1550:	cbnz	w0, 16f0 <deflateSetDictionary+0x200>
    1554:	ldr	w1, [x24, #80]
    1558:	str	wzr, [x24, #48]
    155c:	cmp	w1, w22
    1560:	b.hi	16a4 <deflateSetDictionary+0x1b4>  // b.pmore
    1564:	cbz	w21, 16ac <deflateSetDictionary+0x1bc>
    1568:	sub	w22, w22, w1
    156c:	add	x20, x20, x22
    1570:	ldr	w22, [x19, #8]
    1574:	mov	x0, x24
    1578:	str	w1, [x19, #8]
    157c:	ldr	x23, [x19]
    1580:	str	x20, [x19]
    1584:	bl	338 <fill_window>
    1588:	ldr	w3, [x24, #180]
    158c:	cmp	w3, #0x2
    1590:	b.ls	160c <deflateSetDictionary+0x11c>  // b.plast
    1594:	mov	w20, #0x2                   	// #2
    1598:	ldr	w1, [x24, #172]
    159c:	ldp	x9, x4, [x24, #112]
    15a0:	sub	w6, w1, #0x2
    15a4:	ldr	w11, [x24, #88]
    15a8:	add	w6, w6, w3
    15ac:	ldr	w2, [x24, #128]
    15b0:	ldp	w8, w7, [x24, #140]
    15b4:	ldr	x10, [x24, #96]
    15b8:	add	w0, w1, #0x2
    15bc:	lsl	w2, w2, w7
    15c0:	and	w5, w11, w1
    15c4:	ldrb	w3, [x10, w0, uxtw]
    15c8:	eor	w2, w3, w2
    15cc:	and	w2, w2, w8
    15d0:	ubfiz	x0, x2, #1, #32
    15d4:	ldrh	w3, [x4, x0]
    15d8:	str	w2, [x24, #128]
    15dc:	strh	w3, [x9, x5, lsl #1]
    15e0:	strh	w1, [x4, x0]
    15e4:	add	w1, w1, #0x1
    15e8:	cmp	w1, w6
    15ec:	b.ne	15b8 <deflateSetDictionary+0xc8>  // b.any
    15f0:	str	w1, [x24, #172]
    15f4:	mov	x0, x24
    15f8:	str	w20, [x24, #180]
    15fc:	bl	338 <fill_window>
    1600:	ldr	w3, [x24, #180]
    1604:	cmp	w3, #0x2
    1608:	b.hi	1598 <deflateSetDictionary+0xa8>  // b.pmore
    160c:	ldr	w0, [x24, #172]
    1610:	mov	w2, #0x2                   	// #2
    1614:	mov	x1, #0x200000000           	// #8589934592
    1618:	str	w2, [x24, #160]
    161c:	add	w2, w3, w0
    1620:	str	x2, [x24, #152]
    1624:	str	wzr, [x24, #168]
    1628:	mov	w0, #0x0                   	// #0
    162c:	str	w2, [x24, #172]
    1630:	stur	x1, [x24, #180]
    1634:	str	w3, [x24, #5932]
    1638:	str	x23, [x19]
    163c:	str	w22, [x19, #8]
    1640:	str	w21, [x24, #48]
    1644:	ldp	x21, x22, [sp, #32]
    1648:	ldp	x23, x24, [sp, #48]
    164c:	ldp	x19, x20, [sp, #16]
    1650:	ldp	x29, x30, [sp], #64
    1654:	ret
    1658:	mov	w0, #0xfffffffe            	// #-2
    165c:	ldp	x19, x20, [sp, #16]
    1660:	ldp	x29, x30, [sp], #64
    1664:	ret
    1668:	ldr	w0, [x24, #8]
    166c:	cmp	w0, #0x2a
    1670:	b.ne	16f0 <deflateSetDictionary+0x200>  // b.any
    1674:	ldr	w1, [x24, #180]
    1678:	mov	w0, #0xfffffffe            	// #-2
    167c:	cbnz	w1, 16e4 <deflateSetDictionary+0x1f4>
    1680:	ldr	x0, [x19, #96]
    1684:	mov	x1, x20
    1688:	mov	w2, w22
    168c:	bl	0 <adler32>
    1690:	ldr	w1, [x24, #80]
    1694:	str	x0, [x19, #96]
    1698:	str	wzr, [x24, #48]
    169c:	cmp	w22, w1
    16a0:	b.cs	1568 <deflateSetDictionary+0x78>  // b.hs, b.nlast
    16a4:	mov	w1, w22
    16a8:	b	1570 <deflateSetDictionary+0x80>
    16ac:	ldr	w2, [x24, #132]
    16b0:	mov	w1, #0x0                   	// #0
    16b4:	ldr	x0, [x24, #120]
    16b8:	sub	w2, w2, #0x1
    16bc:	lsl	x2, x2, #1
    16c0:	strh	wzr, [x0, x2]
    16c4:	bl	0 <memset>
    16c8:	str	xzr, [x24, #152]
    16cc:	ldr	w1, [x24, #80]
    16d0:	str	wzr, [x24, #172]
    16d4:	str	wzr, [x24, #5932]
    16d8:	b	1568 <deflateSetDictionary+0x78>
    16dc:	mov	w0, #0xfffffffe            	// #-2
    16e0:	ret
    16e4:	ldp	x21, x22, [sp, #32]
    16e8:	ldp	x23, x24, [sp, #48]
    16ec:	b	164c <deflateSetDictionary+0x15c>
    16f0:	mov	w0, #0xfffffffe            	// #-2
    16f4:	ldp	x21, x22, [sp, #32]
    16f8:	ldp	x23, x24, [sp, #48]
    16fc:	b	164c <deflateSetDictionary+0x15c>
    1700:	mov	w0, #0xfffffffe            	// #-2
    1704:	ldp	x21, x22, [sp, #32]
    1708:	b	164c <deflateSetDictionary+0x15c>
    170c:	nop

0000000000001710 <deflateGetDictionary>:
    1710:	stp	x29, x30, [sp, #-48]!
    1714:	mov	x29, sp
    1718:	stp	x19, x20, [sp, #16]
    171c:	cbz	x0, 1790 <deflateGetDictionary+0x80>
    1720:	mov	x6, x1
    1724:	mov	x5, x0
    1728:	ldr	x1, [x0, #64]
    172c:	cbz	x1, 1790 <deflateGetDictionary+0x80>
    1730:	ldr	x1, [x0, #72]
    1734:	cbz	x1, 1790 <deflateGetDictionary+0x80>
    1738:	mov	x19, x2
    173c:	bl	1480 <deflateStateCheck.part.0>
    1740:	mov	w20, w0
    1744:	cbnz	w0, 1790 <deflateGetDictionary+0x80>
    1748:	ldr	x0, [x5, #56]
    174c:	ldr	w3, [x0, #172]
    1750:	ldr	w2, [x0, #180]
    1754:	str	x21, [sp, #32]
    1758:	ldr	w21, [x0, #80]
    175c:	add	w1, w3, w2
    1760:	cmp	w21, w1
    1764:	csel	w21, w21, w1, ls  // ls = plast
    1768:	cmp	x6, #0x0
    176c:	ccmp	w21, #0x0, #0x4, ne  // ne = any
    1770:	b.ne	17a4 <deflateGetDictionary+0x94>  // b.any
    1774:	cbz	x19, 17c8 <deflateGetDictionary+0xb8>
    1778:	str	w21, [x19]
    177c:	mov	w0, w20
    1780:	ldp	x19, x20, [sp, #16]
    1784:	ldr	x21, [sp, #32]
    1788:	ldp	x29, x30, [sp], #48
    178c:	ret
    1790:	mov	w20, #0xfffffffe            	// #-2
    1794:	mov	w0, w20
    1798:	ldp	x19, x20, [sp, #16]
    179c:	ldp	x29, x30, [sp], #48
    17a0:	ret
    17a4:	mov	w4, w2
    17a8:	mov	w2, w21
    17ac:	add	x3, x4, w3, uxtw
    17b0:	sub	x3, x3, x2
    17b4:	ldr	x1, [x0, #96]
    17b8:	mov	x0, x6
    17bc:	add	x1, x1, x3
    17c0:	bl	0 <memcpy>
    17c4:	cbnz	x19, 1778 <deflateGetDictionary+0x68>
    17c8:	mov	w0, w20
    17cc:	ldp	x19, x20, [sp, #16]
    17d0:	ldr	x21, [sp, #32]
    17d4:	ldp	x29, x30, [sp], #48
    17d8:	ret
    17dc:	nop

00000000000017e0 <deflateResetKeep>:
    17e0:	stp	x29, x30, [sp, #-48]!
    17e4:	mov	x29, sp
    17e8:	str	x21, [sp, #32]
    17ec:	cbz	x0, 18cc <deflateResetKeep+0xec>
    17f0:	ldr	x1, [x0, #64]
    17f4:	stp	x19, x20, [sp, #16]
    17f8:	mov	x19, x0
    17fc:	cbz	x1, 1898 <deflateResetKeep+0xb8>
    1800:	ldr	x1, [x0, #72]
    1804:	cbz	x1, 1898 <deflateResetKeep+0xb8>
    1808:	bl	1480 <deflateStateCheck.part.0>
    180c:	mov	w21, w0
    1810:	cbnz	w0, 1898 <deflateResetKeep+0xb8>
    1814:	ldr	x20, [x19, #56]
    1818:	mov	w1, #0x2                   	// #2
    181c:	ldr	w0, [x20, #48]
    1820:	str	xzr, [x19, #16]
    1824:	stp	xzr, xzr, [x19, #40]
    1828:	str	w1, [x19, #88]
    182c:	ldr	x1, [x20, #16]
    1830:	stp	x1, xzr, [x20, #32]
    1834:	tbnz	w0, #31, 1880 <deflateResetKeep+0xa0>
    1838:	cmp	w0, #0x2
    183c:	b.eq	18b0 <deflateResetKeep+0xd0>  // b.none
    1840:	cbnz	w0, 1890 <deflateResetKeep+0xb0>
    1844:	mov	w0, #0x71                  	// #113
    1848:	str	w0, [x20, #8]
    184c:	mov	w2, #0x0                   	// #0
    1850:	mov	x1, #0x0                   	// #0
    1854:	mov	x0, #0x0                   	// #0
    1858:	bl	0 <adler32>
    185c:	str	x0, [x19, #96]
    1860:	mov	x0, x20
    1864:	str	wzr, [x20, #76]
    1868:	bl	0 <_tr_init>
    186c:	mov	w0, w21
    1870:	ldp	x19, x20, [sp, #16]
    1874:	ldr	x21, [sp, #32]
    1878:	ldp	x29, x30, [sp], #48
    187c:	ret
    1880:	neg	w1, w0
    1884:	str	w1, [x20, #48]
    1888:	cmn	w0, #0x2
    188c:	b.eq	18b0 <deflateResetKeep+0xd0>  // b.none
    1890:	mov	w0, #0x2a                  	// #42
    1894:	b	1848 <deflateResetKeep+0x68>
    1898:	mov	w21, #0xfffffffe            	// #-2
    189c:	mov	w0, w21
    18a0:	ldp	x19, x20, [sp, #16]
    18a4:	ldr	x21, [sp, #32]
    18a8:	ldp	x29, x30, [sp], #48
    18ac:	ret
    18b0:	mov	w0, #0x39                  	// #57
    18b4:	str	w0, [x20, #8]
    18b8:	mov	w2, #0x0                   	// #0
    18bc:	mov	x1, #0x0                   	// #0
    18c0:	mov	x0, #0x0                   	// #0
    18c4:	bl	0 <crc32>
    18c8:	b	185c <deflateResetKeep+0x7c>
    18cc:	mov	w21, #0xfffffffe            	// #-2
    18d0:	mov	w0, w21
    18d4:	ldr	x21, [sp, #32]
    18d8:	ldp	x29, x30, [sp], #48
    18dc:	ret

00000000000018e0 <deflateReset>:
    18e0:	stp	x29, x30, [sp, #-32]!
    18e4:	mov	x29, sp
    18e8:	stp	x19, x20, [sp, #16]
    18ec:	mov	x19, x0
    18f0:	bl	17e0 <deflateResetKeep>
    18f4:	mov	w20, w0
    18f8:	cbz	w0, 190c <deflateReset+0x2c>
    18fc:	mov	w0, w20
    1900:	ldp	x19, x20, [sp, #16]
    1904:	ldp	x29, x30, [sp], #32
    1908:	ret
    190c:	ldr	x19, [x19, #56]
    1910:	mov	w1, #0x0                   	// #0
    1914:	ldr	w2, [x19, #132]
    1918:	ldr	w3, [x19, #80]
    191c:	sub	w2, w2, #0x1
    1920:	ldr	x0, [x19, #120]
    1924:	lsl	x2, x2, #1
    1928:	lsl	x3, x3, #1
    192c:	str	x3, [x19, #104]
    1930:	strh	wzr, [x0, x2]
    1934:	bl	0 <memset>
    1938:	str	wzr, [x19, #128]
    193c:	ldrsw	x0, [x19, #196]
    1940:	adrp	x1, 0 <slide_hash>
    1944:	add	x1, x1, #0x0
    1948:	mov	w3, #0x2                   	// #2
    194c:	str	w3, [x19, #160]
    1950:	mov	x4, #0x200000000           	// #8589934592
    1954:	lsl	x0, x0, #4
    1958:	str	xzr, [x19, #152]
    195c:	add	x2, x1, x0
    1960:	str	xzr, [x19, #168]
    1964:	stur	x4, [x19, #180]
    1968:	ldrh	w1, [x1, x0]
    196c:	ldrh	w3, [x2, #2]
    1970:	ldrh	w0, [x2, #4]
    1974:	ldrh	w2, [x2, #6]
    1978:	stp	w2, w3, [x19, #188]
    197c:	stp	w1, w0, [x19, #204]
    1980:	mov	w0, w20
    1984:	str	wzr, [x19, #5932]
    1988:	ldp	x19, x20, [sp, #16]
    198c:	ldp	x29, x30, [sp], #32
    1990:	ret
    1994:	nop

0000000000001998 <deflateSetHeader>:
    1998:	cbz	x0, 19e0 <deflateSetHeader+0x48>
    199c:	mov	x6, x1
    19a0:	mov	x5, x0
    19a4:	ldr	x1, [x0, #64]
    19a8:	cbz	x1, 19e0 <deflateSetHeader+0x48>
    19ac:	ldr	x1, [x0, #72]
    19b0:	cbz	x1, 19e0 <deflateSetHeader+0x48>
    19b4:	stp	x29, x30, [sp, #-16]!
    19b8:	mov	x29, sp
    19bc:	bl	1480 <deflateStateCheck.part.0>
    19c0:	cbnz	w0, 19e8 <deflateSetHeader+0x50>
    19c4:	ldr	x1, [x5, #56]
    19c8:	ldr	w2, [x1, #48]
    19cc:	cmp	w2, #0x2
    19d0:	b.ne	19e8 <deflateSetHeader+0x50>  // b.any
    19d4:	str	x6, [x1, #56]
    19d8:	ldp	x29, x30, [sp], #16
    19dc:	ret
    19e0:	mov	w0, #0xfffffffe            	// #-2
    19e4:	ret
    19e8:	mov	w0, #0xfffffffe            	// #-2
    19ec:	b	19d8 <deflateSetHeader+0x40>

00000000000019f0 <deflatePending>:
    19f0:	cbz	x0, 1a48 <deflatePending+0x58>
    19f4:	mov	x7, x1
    19f8:	mov	x5, x0
    19fc:	ldr	x1, [x0, #64]
    1a00:	cbz	x1, 1a48 <deflatePending+0x58>
    1a04:	ldr	x1, [x0, #72]
    1a08:	cbz	x1, 1a48 <deflatePending+0x58>
    1a0c:	mov	x6, x2
    1a10:	stp	x29, x30, [sp, #-16]!
    1a14:	mov	x29, sp
    1a18:	bl	1480 <deflateStateCheck.part.0>
    1a1c:	cbnz	w0, 1a50 <deflatePending+0x60>
    1a20:	cbz	x7, 1a30 <deflatePending+0x40>
    1a24:	ldr	x1, [x5, #56]
    1a28:	ldr	x1, [x1, #40]
    1a2c:	str	w1, [x7]
    1a30:	cbz	x6, 1a40 <deflatePending+0x50>
    1a34:	ldr	x1, [x5, #56]
    1a38:	ldr	w1, [x1, #5940]
    1a3c:	str	w1, [x6]
    1a40:	ldp	x29, x30, [sp], #16
    1a44:	ret
    1a48:	mov	w0, #0xfffffffe            	// #-2
    1a4c:	ret
    1a50:	mov	w0, #0xfffffffe            	// #-2
    1a54:	b	1a40 <deflatePending+0x50>

0000000000001a58 <deflatePrime>:
    1a58:	stp	x29, x30, [sp, #-64]!
    1a5c:	mov	x29, sp
    1a60:	stp	x19, x20, [sp, #16]
    1a64:	cbz	x0, 1b18 <deflatePrime+0xc0>
    1a68:	mov	w20, w1
    1a6c:	mov	x5, x0
    1a70:	ldr	x1, [x0, #64]
    1a74:	cbz	x1, 1b18 <deflatePrime+0xc0>
    1a78:	ldr	x1, [x0, #72]
    1a7c:	cbz	x1, 1b18 <deflatePrime+0xc0>
    1a80:	stp	x23, x24, [sp, #48]
    1a84:	mov	w24, w2
    1a88:	bl	1480 <deflateStateCheck.part.0>
    1a8c:	cbnz	w0, 1b38 <deflatePrime+0xe0>
    1a90:	ldr	x23, [x5, #56]
    1a94:	ldr	x0, [x23, #32]
    1a98:	ldr	x1, [x23, #5904]
    1a9c:	add	x0, x0, #0x2
    1aa0:	cmp	x1, x0
    1aa4:	b.cc	1b2c <deflatePrime+0xd4>  // b.lo, b.ul, b.last
    1aa8:	stp	x21, x22, [sp, #32]
    1aac:	mov	w22, #0x10                  	// #16
    1ab0:	mov	w21, #0x1                   	// #1
    1ab4:	nop
    1ab8:	ldr	w1, [x23, #5940]
    1abc:	mov	x0, x23
    1ac0:	ldrh	w2, [x23, #5936]
    1ac4:	sub	w19, w22, w1
    1ac8:	cmp	w20, w19
    1acc:	csel	w19, w20, w19, le
    1ad0:	add	w3, w1, w19
    1ad4:	str	w3, [x23, #5940]
    1ad8:	lsl	w3, w21, w19
    1adc:	sub	w3, w3, #0x1
    1ae0:	and	w3, w3, w24
    1ae4:	asr	w24, w24, w19
    1ae8:	lsl	w3, w3, w1
    1aec:	orr	w3, w3, w2
    1af0:	strh	w3, [x23, #5936]
    1af4:	bl	0 <_tr_flush_bits>
    1af8:	subs	w20, w20, w19
    1afc:	b.ne	1ab8 <deflatePrime+0x60>  // b.any
    1b00:	ldp	x21, x22, [sp, #32]
    1b04:	ldp	x23, x24, [sp, #48]
    1b08:	mov	w0, w20
    1b0c:	ldp	x19, x20, [sp, #16]
    1b10:	ldp	x29, x30, [sp], #64
    1b14:	ret
    1b18:	mov	w20, #0xfffffffe            	// #-2
    1b1c:	mov	w0, w20
    1b20:	ldp	x19, x20, [sp, #16]
    1b24:	ldp	x29, x30, [sp], #64
    1b28:	ret
    1b2c:	mov	w20, #0xfffffffb            	// #-5
    1b30:	ldp	x23, x24, [sp, #48]
    1b34:	b	1b08 <deflatePrime+0xb0>
    1b38:	mov	w20, #0xfffffffe            	// #-2
    1b3c:	ldp	x23, x24, [sp, #48]
    1b40:	b	1b08 <deflatePrime+0xb0>
    1b44:	nop

0000000000001b48 <deflateTune>:
    1b48:	cbz	x0, 1b94 <deflateTune+0x4c>
    1b4c:	mov	w7, w1
    1b50:	mov	x5, x0
    1b54:	ldr	x1, [x0, #64]
    1b58:	cbz	x1, 1b94 <deflateTune+0x4c>
    1b5c:	ldr	x1, [x0, #72]
    1b60:	cbz	x1, 1b94 <deflateTune+0x4c>
    1b64:	mov	w8, w2
    1b68:	mov	w6, w3
    1b6c:	mov	w9, w4
    1b70:	stp	x29, x30, [sp, #-16]!
    1b74:	mov	x29, sp
    1b78:	bl	1480 <deflateStateCheck.part.0>
    1b7c:	cbnz	w0, 1b9c <deflateTune+0x54>
    1b80:	ldr	x1, [x5, #56]
    1b84:	stp	w9, w8, [x1, #188]
    1b88:	stp	w7, w6, [x1, #204]
    1b8c:	ldp	x29, x30, [sp], #16
    1b90:	ret
    1b94:	mov	w0, #0xfffffffe            	// #-2
    1b98:	ret
    1b9c:	mov	w0, #0xfffffffe            	// #-2
    1ba0:	b	1b8c <deflateTune+0x44>
    1ba4:	nop

0000000000001ba8 <deflateBound>:
    1ba8:	add	x8, x1, #0x7
    1bac:	add	x2, x1, #0x3f
    1bb0:	mov	x7, x1
    1bb4:	lsr	x1, x8, #3
    1bb8:	add	x2, x1, x2, lsr #6
    1bbc:	add	x6, x2, x7
    1bc0:	cbz	x0, 1c58 <deflateBound+0xb0>
    1bc4:	ldr	x1, [x0, #64]
    1bc8:	mov	x5, x0
    1bcc:	cbz	x1, 1c58 <deflateBound+0xb0>
    1bd0:	ldr	x1, [x0, #72]
    1bd4:	cbz	x1, 1c58 <deflateBound+0xb0>
    1bd8:	stp	x29, x30, [sp, #-16]!
    1bdc:	mov	x29, sp
    1be0:	bl	1480 <deflateStateCheck.part.0>
    1be4:	cbnz	w0, 1c3c <deflateBound+0x94>
    1be8:	ldr	x1, [x5, #56]
    1bec:	ldr	w0, [x1, #48]
    1bf0:	cmp	w0, #0x1
    1bf4:	b.eq	1cd0 <deflateBound+0x128>  // b.none
    1bf8:	cmp	w0, #0x2
    1bfc:	b.eq	1c60 <deflateBound+0xb8>  // b.none
    1c00:	cmp	w0, #0x0
    1c04:	mov	x2, #0x6                   	// #6
    1c08:	csel	x2, x2, xzr, ne  // ne = any
    1c0c:	ldr	w0, [x1, #84]
    1c10:	cmp	w0, #0xf
    1c14:	b.ne	1c48 <deflateBound+0xa0>  // b.any
    1c18:	ldr	w0, [x1, #136]
    1c1c:	cmp	w0, #0xf
    1c20:	b.ne	1c48 <deflateBound+0xa0>  // b.any
    1c24:	lsr	x0, x7, #25
    1c28:	add	x8, x8, x7, lsr #12
    1c2c:	add	x0, x0, x7, lsr #14
    1c30:	add	x0, x0, x8
    1c34:	add	x0, x0, x2
    1c38:	b	1c40 <deflateBound+0x98>
    1c3c:	add	x0, x6, #0xb
    1c40:	ldp	x29, x30, [sp], #16
    1c44:	ret
    1c48:	add	x0, x6, #0x5
    1c4c:	add	x0, x0, x2
    1c50:	ldp	x29, x30, [sp], #16
    1c54:	ret
    1c58:	add	x0, x6, #0xb
    1c5c:	ret
    1c60:	ldr	x4, [x1, #56]
    1c64:	mov	x2, #0x12                  	// #18
    1c68:	cbz	x4, 1c0c <deflateBound+0x64>
    1c6c:	ldr	x0, [x4, #24]
    1c70:	cbz	x0, 1c80 <deflateBound+0xd8>
    1c74:	ldr	w3, [x4, #32]
    1c78:	add	w3, w3, #0x2
    1c7c:	add	x2, x3, x2
    1c80:	ldr	x3, [x4, #40]
    1c84:	cbz	x3, 1c9c <deflateBound+0xf4>
    1c88:	mvn	x0, x2
    1c8c:	add	x3, x3, x0
    1c90:	add	x2, x2, #0x1
    1c94:	ldrb	w0, [x3, x2]
    1c98:	cbnz	w0, 1c90 <deflateBound+0xe8>
    1c9c:	ldr	x3, [x4, #56]
    1ca0:	cbz	x3, 1cbc <deflateBound+0x114>
    1ca4:	mvn	x0, x2
    1ca8:	add	x3, x3, x0
    1cac:	nop
    1cb0:	add	x2, x2, #0x1
    1cb4:	ldrb	w0, [x3, x2]
    1cb8:	cbnz	w0, 1cb0 <deflateBound+0x108>
    1cbc:	ldr	w3, [x4, #68]
    1cc0:	add	x0, x2, #0x2
    1cc4:	cmp	w3, #0x0
    1cc8:	csel	x2, x0, x2, ne  // ne = any
    1ccc:	b	1c0c <deflateBound+0x64>
    1cd0:	ldr	w0, [x1, #172]
    1cd4:	mov	x3, #0xa                   	// #10
    1cd8:	mov	x2, #0x6                   	// #6
    1cdc:	cmp	w0, #0x0
    1ce0:	csel	x2, x3, x2, ne  // ne = any
    1ce4:	b	1c0c <deflateBound+0x64>

0000000000001ce8 <deflate>:
    1ce8:	stp	x29, x30, [sp, #-96]!
    1cec:	mov	x29, sp
    1cf0:	stp	x21, x22, [sp, #32]
    1cf4:	cbz	x0, 2334 <deflate+0x64c>
    1cf8:	mov	w21, w1
    1cfc:	stp	x19, x20, [sp, #16]
    1d00:	mov	x20, x0
    1d04:	ldr	x1, [x0, #64]
    1d08:	cbz	x1, 1ff4 <deflate+0x30c>
    1d0c:	ldr	x1, [x0, #72]
    1d10:	cbz	x1, 1ff4 <deflate+0x30c>
    1d14:	bl	1480 <deflateStateCheck.part.0>
    1d18:	mov	w22, w0
    1d1c:	cbnz	w0, 1ff4 <deflate+0x30c>
    1d20:	cmp	w21, #0x5
    1d24:	b.hi	1ff4 <deflate+0x30c>  // b.pmore
    1d28:	ldr	x0, [x20, #24]
    1d2c:	ldr	x19, [x20, #56]
    1d30:	cbz	x0, 1fdc <deflate+0x2f4>
    1d34:	ldr	w1, [x20, #8]
    1d38:	cbnz	w1, 1fd4 <deflate+0x2ec>
    1d3c:	ldr	w0, [x19, #8]
    1d40:	cmp	w21, #0x4
    1d44:	cset	w2, ne  // ne = any
    1d48:	cmp	w0, #0x29a
    1d4c:	ccmp	w2, #0x0, #0x4, eq  // eq = none
    1d50:	b.ne	1fdc <deflate+0x2f4>  // b.any
    1d54:	ldr	w3, [x20, #32]
    1d58:	cbz	w3, 2cd0 <deflate+0xfe8>
    1d5c:	ldr	x3, [x19, #40]
    1d60:	ldr	w4, [x19, #76]
    1d64:	str	w21, [x19, #76]
    1d68:	cbnz	x3, 2060 <deflate+0x378>
    1d6c:	cbz	w1, 200c <deflate+0x324>
    1d70:	cmp	w0, #0x29a
    1d74:	b.eq	2cd0 <deflate+0xfe8>  // b.none
    1d78:	cmp	w0, #0x2a
    1d7c:	b.ne	1e9c <deflate+0x1b4>  // b.any
    1d80:	ldr	w0, [x19, #84]
    1d84:	ldr	w1, [x19, #200]
    1d88:	lsl	w0, w0, #12
    1d8c:	cmp	w1, #0x1
    1d90:	mov	w1, #0xffff8800            	// #-30720
    1d94:	add	w0, w0, w1
    1d98:	b.le	27cc <deflate+0xae4>
    1d9c:	ldr	w3, [x19, #172]
    1da0:	orr	w2, w0, #0x20
    1da4:	mov	w1, #0x1085                	// #4229
    1da8:	cmp	w3, #0x0
    1dac:	movk	w1, #0x842, lsl #16
    1db0:	csel	w0, w2, w0, ne  // ne = any
    1db4:	ldr	x3, [x19, #16]
    1db8:	umull	x1, w0, w1
    1dbc:	ldr	x2, [x19, #40]
    1dc0:	lsr	x1, x1, #32
    1dc4:	sub	w0, w0, w1
    1dc8:	add	x4, x2, #0x1
    1dcc:	str	x4, [x19, #40]
    1dd0:	add	w0, w1, w0, lsr #1
    1dd4:	lsr	w0, w0, #4
    1dd8:	lsl	w1, w0, #5
    1ddc:	sub	w0, w1, w0
    1de0:	add	w0, w0, #0x1f
    1de4:	lsr	w1, w0, #8
    1de8:	strb	w1, [x3, x2]
    1dec:	ldr	x2, [x19, #16]
    1df0:	ldr	x1, [x19, #40]
    1df4:	add	x3, x1, #0x1
    1df8:	str	x3, [x19, #40]
    1dfc:	strb	w0, [x2, x1]
    1e00:	ldr	w0, [x19, #172]
    1e04:	cbz	w0, 1e6c <deflate+0x184>
    1e08:	ldr	x0, [x20, #96]
    1e0c:	ldr	x2, [x19, #16]
    1e10:	ldr	x1, [x19, #40]
    1e14:	lsr	x0, x0, #16
    1e18:	add	x3, x1, #0x1
    1e1c:	str	x3, [x19, #40]
    1e20:	lsr	w3, w0, #8
    1e24:	strb	w3, [x2, x1]
    1e28:	ldr	x2, [x19, #16]
    1e2c:	ldr	x1, [x19, #40]
    1e30:	add	x3, x1, #0x1
    1e34:	str	x3, [x19, #40]
    1e38:	strb	w0, [x2, x1]
    1e3c:	ldr	x2, [x19, #16]
    1e40:	ldr	x0, [x19, #40]
    1e44:	ldrh	w1, [x20, #96]
    1e48:	add	x3, x0, #0x1
    1e4c:	str	x3, [x19, #40]
    1e50:	lsr	w3, w1, #8
    1e54:	strb	w3, [x2, x0]
    1e58:	ldr	x2, [x19, #16]
    1e5c:	ldr	x0, [x19, #40]
    1e60:	add	x3, x0, #0x1
    1e64:	str	x3, [x19, #40]
    1e68:	strb	w1, [x2, x0]
    1e6c:	mov	w2, #0x0                   	// #0
    1e70:	mov	x1, #0x0                   	// #0
    1e74:	mov	x0, #0x0                   	// #0
    1e78:	bl	0 <adler32>
    1e7c:	str	x0, [x20, #96]
    1e80:	mov	w0, #0x71                  	// #113
    1e84:	str	w0, [x19, #8]
    1e88:	mov	x0, x20
    1e8c:	bl	590 <flush_pending>
    1e90:	ldr	x0, [x19, #40]
    1e94:	cbnz	x0, 21f0 <deflate+0x508>
    1e98:	ldr	w0, [x19, #8]
    1e9c:	cmp	w0, #0x39
    1ea0:	b.eq	2348 <deflate+0x660>  // b.none
    1ea4:	cmp	w0, #0x45
    1ea8:	b.eq	2798 <deflate+0xab0>  // b.none
    1eac:	cmp	w0, #0x49
    1eb0:	b.eq	29d8 <deflate+0xcf0>  // b.none
    1eb4:	cmp	w0, #0x5b
    1eb8:	b.eq	2ca4 <deflate+0xfbc>  // b.none
    1ebc:	cmp	w0, #0x67
    1ec0:	b.eq	2994 <deflate+0xcac>  // b.none
    1ec4:	ldr	w1, [x20, #8]
    1ec8:	cbz	w1, 2044 <deflate+0x35c>
    1ecc:	ldr	w0, [x19, #196]
    1ed0:	cbz	w0, 27a0 <deflate+0xab8>
    1ed4:	ldr	w1, [x19, #200]
    1ed8:	cmp	w1, #0x2
    1edc:	b.eq	2124 <deflate+0x43c>  // b.none
    1ee0:	cmp	w1, #0x3
    1ee4:	b.eq	220c <deflate+0x524>  // b.none
    1ee8:	adrp	x2, 0 <slide_hash>
    1eec:	add	x2, x2, #0x0
    1ef0:	add	x2, x2, w0, sxtw #4
    1ef4:	mov	w1, w21
    1ef8:	mov	x0, x19
    1efc:	ldr	x2, [x2, #8]
    1f00:	blr	x2
    1f04:	sub	w1, w0, #0x2
    1f08:	and	w2, w0, #0xfffffffd
    1f0c:	cmp	w1, #0x1
    1f10:	b.hi	21a8 <deflate+0x4c0>  // b.pmore
    1f14:	mov	w0, #0x29a                 	// #666
    1f18:	str	w0, [x19, #8]
    1f1c:	cbz	w2, 2318 <deflate+0x630>
    1f20:	cmp	w21, #0x4
    1f24:	b.ne	2320 <deflate+0x638>  // b.any
    1f28:	ldr	w0, [x19, #48]
    1f2c:	mov	w22, #0x1                   	// #1
    1f30:	cmp	w0, #0x0
    1f34:	b.le	2320 <deflate+0x638>
    1f38:	ldr	x1, [x19, #40]
    1f3c:	cmp	w0, #0x2
    1f40:	ldr	x2, [x19, #16]
    1f44:	add	x3, x1, #0x1
    1f48:	ldr	x0, [x20, #96]
    1f4c:	b.eq	28ac <deflate+0xbc4>  // b.none
    1f50:	lsr	x0, x0, #16
    1f54:	str	x3, [x19, #40]
    1f58:	lsr	w3, w0, #8
    1f5c:	strb	w3, [x2, x1]
    1f60:	ldr	x2, [x19, #16]
    1f64:	ldr	x1, [x19, #40]
    1f68:	add	x3, x1, #0x1
    1f6c:	str	x3, [x19, #40]
    1f70:	strb	w0, [x2, x1]
    1f74:	ldr	x2, [x19, #16]
    1f78:	ldr	x0, [x19, #40]
    1f7c:	ldrh	w1, [x20, #96]
    1f80:	add	x3, x0, #0x1
    1f84:	str	x3, [x19, #40]
    1f88:	lsr	w3, w1, #8
    1f8c:	strb	w3, [x2, x0]
    1f90:	ldr	x2, [x19, #16]
    1f94:	ldr	x0, [x19, #40]
    1f98:	add	x3, x0, #0x1
    1f9c:	str	x3, [x19, #40]
    1fa0:	strb	w1, [x2, x0]
    1fa4:	mov	x0, x20
    1fa8:	bl	590 <flush_pending>
    1fac:	ldr	w0, [x19, #48]
    1fb0:	cmp	w0, #0x0
    1fb4:	b.le	1fc0 <deflate+0x2d8>
    1fb8:	neg	w0, w0
    1fbc:	str	w0, [x19, #48]
    1fc0:	ldr	x0, [x19, #40]
    1fc4:	ldp	x19, x20, [sp, #16]
    1fc8:	cmp	x0, #0x0
    1fcc:	cset	w22, eq  // eq = none
    1fd0:	b	1ffc <deflate+0x314>
    1fd4:	ldr	x0, [x20]
    1fd8:	cbnz	x0, 1d3c <deflate+0x54>
    1fdc:	adrp	x0, 0 <z_errmsg>
    1fe0:	mov	w22, #0xfffffffe            	// #-2
    1fe4:	ldr	x0, [x0]
    1fe8:	str	x0, [x20, #48]
    1fec:	ldp	x19, x20, [sp, #16]
    1ff0:	b	1ffc <deflate+0x314>
    1ff4:	ldp	x19, x20, [sp, #16]
    1ff8:	mov	w22, #0xfffffffe            	// #-2
    1ffc:	mov	w0, w22
    2000:	ldp	x21, x22, [sp, #32]
    2004:	ldp	x29, x30, [sp], #96
    2008:	ret
    200c:	cmp	w21, #0x5
    2010:	lsl	w3, w4, #1
    2014:	lsl	w1, w21, #1
    2018:	sub	w5, w3, #0x9
    201c:	csinc	w1, w1, wzr, ne  // ne = any
    2020:	cmp	w4, #0x4
    2024:	csel	w3, w5, w3, gt
    2028:	cmp	w2, #0x0
    202c:	ccmp	w1, w3, #0x0, ne  // ne = any
    2030:	b.le	2cd0 <deflate+0xfe8>
    2034:	cmp	w0, #0x29a
    2038:	b.ne	1d78 <deflate+0x90>  // b.any
    203c:	ldr	w1, [x20, #8]
    2040:	cbnz	w1, 2cd0 <deflate+0xfe8>
    2044:	ldr	w2, [x19, #180]
    2048:	cbnz	w2, 1ecc <deflate+0x1e4>
    204c:	cbz	w21, 2320 <deflate+0x638>
    2050:	ldr	w0, [x19, #8]
    2054:	cmp	w0, #0x29a
    2058:	b.ne	1ecc <deflate+0x1e4>  // b.any
    205c:	b	1f20 <deflate+0x238>
    2060:	mov	x0, x20
    2064:	bl	590 <flush_pending>
    2068:	ldr	w0, [x20, #32]
    206c:	cbz	w0, 21f0 <deflate+0x508>
    2070:	ldr	w0, [x19, #8]
    2074:	b	2034 <deflate+0x34c>
    2078:	cbz	w2, 2130 <deflate+0x448>
    207c:	ldr	w2, [x19, #172]
    2080:	ldr	x3, [x19, #96]
    2084:	str	wzr, [x19, #160]
    2088:	ldr	w0, [x19, #5900]
    208c:	ldr	x1, [x19, #5904]
    2090:	add	w4, w0, #0x1
    2094:	ldrb	w2, [x3, x2]
    2098:	ldr	x3, [x19, #5888]
    209c:	strh	wzr, [x1, w0, uxtw #1]
    20a0:	add	x1, x19, w2, uxtb #2
    20a4:	str	w4, [x19, #5900]
    20a8:	strb	w2, [x3, w0, uxtw]
    20ac:	ldrh	w0, [x1, #212]
    20b0:	add	w0, w0, #0x1
    20b4:	strh	w0, [x1, #212]
    20b8:	ldr	w0, [x19, #172]
    20bc:	ldr	w2, [x19, #180]
    20c0:	ldr	w1, [x19, #5896]
    20c4:	add	w0, w0, #0x1
    20c8:	ldr	w3, [x19, #5900]
    20cc:	sub	w2, w2, #0x1
    20d0:	str	w0, [x19, #172]
    20d4:	sub	w1, w1, #0x1
    20d8:	str	w2, [x19, #180]
    20dc:	cmp	w3, w1
    20e0:	b.ne	2078 <deflate+0x390>  // b.any
    20e4:	ldr	x2, [x19, #152]
    20e8:	mov	x1, #0x0                   	// #0
    20ec:	tbnz	x2, #63, 20f8 <deflate+0x410>
    20f0:	ldr	x1, [x19, #96]
    20f4:	add	x1, x1, w2, uxtw
    20f8:	sub	x2, x0, x2
    20fc:	mov	w3, #0x0                   	// #0
    2100:	mov	x0, x19
    2104:	bl	0 <_tr_flush_block>
    2108:	ldr	w1, [x19, #172]
    210c:	ldr	x0, [x19]
    2110:	str	x1, [x19, #152]
    2114:	bl	590 <flush_pending>
    2118:	ldr	x0, [x19]
    211c:	ldr	w0, [x0, #32]
    2120:	cbz	w0, 2318 <deflate+0x630>
    2124:	ldr	w2, [x19, #180]
    2128:	cbnz	w2, 207c <deflate+0x394>
    212c:	nop
    2130:	mov	x0, x19
    2134:	bl	338 <fill_window>
    2138:	ldr	w0, [x19, #180]
    213c:	cbnz	w0, 207c <deflate+0x394>
    2140:	cbz	w21, 2318 <deflate+0x630>
    2144:	str	wzr, [x19, #5932]
    2148:	cmp	w21, #0x4
    214c:	b.eq	2d08 <deflate+0x1020>  // b.none
    2150:	ldr	w0, [x19, #5900]
    2154:	cbz	w0, 21b4 <deflate+0x4cc>
    2158:	ldr	x2, [x19, #152]
    215c:	mov	x1, #0x0                   	// #0
    2160:	tbnz	x2, #63, 216c <deflate+0x484>
    2164:	ldr	x1, [x19, #96]
    2168:	add	x1, x1, w2, uxtw
    216c:	ldr	w4, [x19, #172]
    2170:	mov	x0, x19
    2174:	mov	w3, #0x0                   	// #0
    2178:	sub	x2, x4, x2
    217c:	bl	0 <_tr_flush_block>
    2180:	ldr	w1, [x19, #172]
    2184:	ldr	x0, [x19]
    2188:	str	x1, [x19, #152]
    218c:	bl	590 <flush_pending>
    2190:	ldr	x0, [x19]
    2194:	ldr	w0, [x0, #32]
    2198:	cmp	w0, #0x0
    219c:	cset	w0, ne  // ne = any
    21a0:	mov	w2, w0
    21a4:	nop
    21a8:	cbz	w2, 2318 <deflate+0x630>
    21ac:	cmp	w0, #0x1
    21b0:	b.ne	1f20 <deflate+0x238>  // b.any
    21b4:	cmp	w21, #0x1
    21b8:	b.eq	29a0 <deflate+0xcb8>  // b.none
    21bc:	cmp	w21, #0x5
    21c0:	b.eq	29a8 <deflate+0xcc0>  // b.none
    21c4:	mov	x0, x19
    21c8:	mov	w3, #0x0                   	// #0
    21cc:	mov	x2, #0x0                   	// #0
    21d0:	mov	x1, #0x0                   	// #0
    21d4:	bl	0 <_tr_stored_block>
    21d8:	cmp	w21, #0x3
    21dc:	b.eq	2dbc <deflate+0x10d4>  // b.none
    21e0:	mov	x0, x20
    21e4:	bl	590 <flush_pending>
    21e8:	ldr	w0, [x20, #32]
    21ec:	cbnz	w0, 1f20 <deflate+0x238>
    21f0:	mov	w0, #0xffffffff            	// #-1
    21f4:	str	w0, [x19, #76]
    21f8:	mov	w0, w22
    21fc:	ldp	x19, x20, [sp, #16]
    2200:	ldp	x21, x22, [sp, #32]
    2204:	ldp	x29, x30, [sp], #96
    2208:	ret
    220c:	stp	x23, x24, [sp, #48]
    2210:	adrp	x24, 0 <_length_code>
    2214:	adrp	x23, 0 <_dist_code>
    2218:	add	x24, x24, #0x0
    221c:	add	x23, x23, #0x0
    2220:	stp	x25, x26, [sp, #64]
    2224:	ldr	w2, [x19, #180]
    2228:	mov	w25, #0x102                 	// #258
    222c:	nop
    2230:	cmp	w2, #0x102
    2234:	b.ls	2ab4 <deflate+0xdcc>  // b.plast
    2238:	ldr	w0, [x19, #172]
    223c:	ldr	x1, [x19, #96]
    2240:	mov	w3, w0
    2244:	str	wzr, [x19, #160]
    2248:	cbz	w0, 2268 <deflate+0x580>
    224c:	sub	x0, x3, #0x1
    2250:	add	x4, x1, x0
    2254:	ldrb	w5, [x1, x0]
    2258:	ldrb	w0, [x4, #1]
    225c:	cmp	w0, w5
    2260:	b.eq	2aec <deflate+0xe04>  // b.none
    2264:	nop
    2268:	ldr	w0, [x19, #5900]
    226c:	ldr	x5, [x19, #5904]
    2270:	add	w4, w0, #0x1
    2274:	ldrb	w2, [x1, x3]
    2278:	ldr	x3, [x19, #5888]
    227c:	strh	wzr, [x5, w0, uxtw #1]
    2280:	add	x1, x19, w2, uxtb #2
    2284:	str	w4, [x19, #5900]
    2288:	strb	w2, [x3, w0, uxtw]
    228c:	ldrh	w0, [x1, #212]
    2290:	add	w0, w0, #0x1
    2294:	strh	w0, [x1, #212]
    2298:	ldr	w1, [x19, #5896]
    229c:	ldr	w2, [x19, #5900]
    22a0:	sub	w1, w1, #0x1
    22a4:	ldr	w0, [x19, #172]
    22a8:	cmp	w1, w2
    22ac:	ldr	w2, [x19, #180]
    22b0:	cset	w1, eq  // eq = none
    22b4:	add	w0, w0, #0x1
    22b8:	sub	w2, w2, #0x1
    22bc:	str	w0, [x19, #172]
    22c0:	str	w2, [x19, #180]
    22c4:	cbz	w1, 2230 <deflate+0x548>
    22c8:	ldr	x2, [x19, #152]
    22cc:	mov	x1, #0x0                   	// #0
    22d0:	tbnz	x2, #63, 22dc <deflate+0x5f4>
    22d4:	ldr	x1, [x19, #96]
    22d8:	add	x1, x1, w2, uxtw
    22dc:	ldr	w4, [x19, #172]
    22e0:	mov	x0, x19
    22e4:	mov	w3, #0x0                   	// #0
    22e8:	sub	x2, x4, x2
    22ec:	bl	0 <_tr_flush_block>
    22f0:	ldr	w1, [x19, #172]
    22f4:	ldr	x0, [x19]
    22f8:	str	x1, [x19, #152]
    22fc:	bl	590 <flush_pending>
    2300:	ldr	x0, [x19]
    2304:	ldr	w0, [x0, #32]
    2308:	cbnz	w0, 2224 <deflate+0x53c>
    230c:	ldp	x23, x24, [sp, #48]
    2310:	ldp	x25, x26, [sp, #64]
    2314:	nop
    2318:	ldr	w0, [x20, #32]
    231c:	cbz	w0, 21f0 <deflate+0x508>
    2320:	mov	w0, w22
    2324:	ldp	x19, x20, [sp, #16]
    2328:	ldp	x21, x22, [sp, #32]
    232c:	ldp	x29, x30, [sp], #96
    2330:	ret
    2334:	mov	w22, #0xfffffffe            	// #-2
    2338:	mov	w0, w22
    233c:	ldp	x21, x22, [sp, #32]
    2340:	ldp	x29, x30, [sp], #96
    2344:	ret
    2348:	mov	w2, #0x0                   	// #0
    234c:	mov	x1, #0x0                   	// #0
    2350:	mov	x0, #0x0                   	// #0
    2354:	bl	0 <crc32>
    2358:	ldr	x1, [x19, #16]
    235c:	str	x0, [x20, #96]
    2360:	ldr	x0, [x19, #40]
    2364:	mov	w4, #0x1f                  	// #31
    2368:	mov	w3, #0xffffff8b            	// #-117
    236c:	mov	w2, #0x8                   	// #8
    2370:	add	x5, x0, #0x1
    2374:	str	x5, [x19, #40]
    2378:	strb	w4, [x1, x0]
    237c:	ldr	x1, [x19, #16]
    2380:	ldr	x0, [x19, #40]
    2384:	add	x4, x0, #0x1
    2388:	str	x4, [x19, #40]
    238c:	strb	w3, [x1, x0]
    2390:	ldr	x1, [x19, #16]
    2394:	ldr	x0, [x19, #40]
    2398:	add	x3, x0, #0x1
    239c:	str	x3, [x19, #40]
    23a0:	strb	w2, [x1, x0]
    23a4:	ldr	x1, [x19, #56]
    23a8:	cbz	x1, 29e0 <deflate+0xcf8>
    23ac:	ldr	w0, [x1]
    23b0:	mov	w3, #0x2                   	// #2
    23b4:	ldr	w5, [x1, #68]
    23b8:	cmp	w0, #0x0
    23bc:	ldr	x2, [x1, #24]
    23c0:	cset	w0, ne  // ne = any
    23c4:	add	w4, w0, w3
    23c8:	cmp	w5, #0x0
    23cc:	csel	w0, w0, w4, eq  // eq = none
    23d0:	cmp	x2, #0x0
    23d4:	cset	w2, ne  // ne = any
    23d8:	ldr	x5, [x1, #40]
    23dc:	lsl	w2, w2, #2
    23e0:	add	w4, w2, #0x8
    23e4:	cmp	x5, #0x0
    23e8:	csel	w2, w4, w2, ne  // ne = any
    23ec:	ldr	x5, [x19, #16]
    23f0:	add	w0, w0, w2
    23f4:	ldr	x4, [x19, #40]
    23f8:	add	w2, w0, #0x10
    23fc:	ldr	x6, [x1, #56]
    2400:	and	w1, w2, #0xff
    2404:	add	x2, x4, #0x1
    2408:	str	x2, [x19, #40]
    240c:	cmp	x6, #0x0
    2410:	csel	w0, w0, w1, eq  // eq = none
    2414:	strb	w0, [x5, x4]
    2418:	ldr	x2, [x19, #56]
    241c:	ldr	x1, [x19, #16]
    2420:	ldr	x0, [x19, #40]
    2424:	ldr	x2, [x2, #8]
    2428:	add	x4, x0, #0x1
    242c:	str	x4, [x19, #40]
    2430:	strb	w2, [x1, x0]
    2434:	ldr	x0, [x19, #56]
    2438:	ldr	x2, [x19, #16]
    243c:	ldr	x0, [x0, #8]
    2440:	ldr	x1, [x19, #40]
    2444:	lsr	x0, x0, #8
    2448:	add	x4, x1, #0x1
    244c:	str	x4, [x19, #40]
    2450:	strb	w0, [x2, x1]
    2454:	ldr	x0, [x19, #56]
    2458:	ldr	x2, [x19, #16]
    245c:	ldr	x0, [x0, #8]
    2460:	ldr	x1, [x19, #40]
    2464:	lsr	x0, x0, #16
    2468:	add	x4, x1, #0x1
    246c:	str	x4, [x19, #40]
    2470:	strb	w0, [x2, x1]
    2474:	ldr	x0, [x19, #56]
    2478:	ldr	x2, [x19, #16]
    247c:	ldr	x0, [x0, #8]
    2480:	ldr	x1, [x19, #40]
    2484:	lsr	x0, x0, #24
    2488:	add	x4, x1, #0x1
    248c:	str	x4, [x19, #40]
    2490:	strb	w0, [x2, x1]
    2494:	ldr	w0, [x19, #196]
    2498:	cmp	w0, #0x9
    249c:	b.eq	24b4 <deflate+0x7cc>  // b.none
    24a0:	ldr	w1, [x19, #200]
    24a4:	cmp	w1, #0x1
    24a8:	ccmp	w0, #0x1, #0x4, le
    24ac:	cset	w3, le
    24b0:	lsl	w3, w3, #2
    24b4:	ldr	x1, [x19, #16]
    24b8:	ldr	x0, [x19, #40]
    24bc:	add	x2, x0, #0x1
    24c0:	str	x2, [x19, #40]
    24c4:	strb	w3, [x1, x0]
    24c8:	ldr	x2, [x19, #56]
    24cc:	ldr	x1, [x19, #16]
    24d0:	ldr	x0, [x19, #40]
    24d4:	ldr	w2, [x2, #20]
    24d8:	add	x3, x0, #0x1
    24dc:	str	x3, [x19, #40]
    24e0:	strb	w2, [x1, x0]
    24e4:	ldr	x3, [x19, #56]
    24e8:	ldr	x0, [x3, #24]
    24ec:	cbz	x0, 252c <deflate+0x844>
    24f0:	ldr	x1, [x19, #16]
    24f4:	ldr	x0, [x19, #40]
    24f8:	ldr	w2, [x3, #32]
    24fc:	add	x3, x0, #0x1
    2500:	str	x3, [x19, #40]
    2504:	strb	w2, [x1, x0]
    2508:	ldr	x0, [x19, #56]
    250c:	ldr	x2, [x19, #16]
    2510:	ldr	x1, [x19, #40]
    2514:	ldr	w0, [x0, #32]
    2518:	add	x3, x1, #0x1
    251c:	str	x3, [x19, #40]
    2520:	lsr	w0, w0, #8
    2524:	strb	w0, [x2, x1]
    2528:	ldr	x3, [x19, #56]
    252c:	ldr	w0, [x3, #68]
    2530:	cbnz	w0, 2978 <deflate+0xc90>
    2534:	mov	w0, #0x45                  	// #69
    2538:	str	w0, [x19, #8]
    253c:	str	xzr, [x19, #64]
    2540:	ldr	x4, [x3, #24]
    2544:	cbz	x4, 2654 <deflate+0x96c>
    2548:	ldr	x1, [x19, #64]
    254c:	stp	x23, x24, [sp, #48]
    2550:	stp	x25, x26, [sp, #64]
    2554:	ldrh	w25, [x3, #32]
    2558:	ldr	x23, [x19, #40]
    255c:	sub	w24, w25, w1
    2560:	ldr	x3, [x19, #24]
    2564:	add	x0, x23, x24
    2568:	sub	w25, w25, w1
    256c:	cmp	x0, x3
    2570:	b.ls	2614 <deflate+0x92c>  // b.plast
    2574:	str	x27, [sp, #80]
    2578:	b	25b8 <deflate+0x8d0>
    257c:	ldr	x2, [x19, #64]
    2580:	mov	x0, x20
    2584:	add	x2, x2, x27
    2588:	str	x2, [x19, #64]
    258c:	bl	590 <flush_pending>
    2590:	ldr	x23, [x19, #40]
    2594:	sub	w3, w26, w24
    2598:	add	w24, w25, w3
    259c:	mov	x25, x24
    25a0:	cbnz	x23, 29b4 <deflate+0xccc>
    25a4:	ldp	x0, x1, [x19, #56]
    25a8:	ldr	x3, [x19, #24]
    25ac:	cmp	x3, w24, uxtw
    25b0:	ldr	x4, [x0, #24]
    25b4:	b.cs	2610 <deflate+0x928>  // b.hs, b.nlast
    25b8:	ldr	x0, [x19, #16]
    25bc:	sub	w27, w3, w23
    25c0:	mov	x2, x27
    25c4:	add	x1, x4, x1
    25c8:	mov	w24, w3
    25cc:	add	x0, x0, x23
    25d0:	bl	0 <memcpy>
    25d4:	mov	w26, w23
    25d8:	ldr	x0, [x19, #56]
    25dc:	ldr	x2, [x19, #24]
    25e0:	ldr	w0, [x0, #68]
    25e4:	str	x2, [x19, #40]
    25e8:	cmp	w0, #0x0
    25ec:	ccmp	x2, x23, #0x0, ne  // ne = any
    25f0:	b.ls	257c <deflate+0x894>  // b.plast
    25f4:	ldr	x0, [x20, #96]
    25f8:	sub	w2, w2, w23
    25fc:	ldr	x1, [x19, #16]
    2600:	add	x1, x1, x23
    2604:	bl	0 <crc32>
    2608:	str	x0, [x20, #96]
    260c:	b	257c <deflate+0x894>
    2610:	ldr	x27, [sp, #80]
    2614:	mov	x2, x24
    2618:	ldr	x0, [x19, #16]
    261c:	add	x1, x4, x1
    2620:	add	x0, x0, x23
    2624:	bl	0 <memcpy>
    2628:	ldr	x3, [x19, #56]
    262c:	ldr	x2, [x19, #40]
    2630:	ldr	w0, [x3, #68]
    2634:	add	x2, x24, x2
    2638:	str	x2, [x19, #40]
    263c:	cmp	w0, #0x0
    2640:	ccmp	x2, x23, #0x0, ne  // ne = any
    2644:	b.hi	2ce8 <deflate+0x1000>  // b.pmore
    2648:	ldp	x23, x24, [sp, #48]
    264c:	ldp	x25, x26, [sp, #64]
    2650:	str	xzr, [x19, #64]
    2654:	mov	w0, #0x49                  	// #73
    2658:	str	w0, [x19, #8]
    265c:	ldr	x0, [x3, #40]
    2660:	cbz	x0, 2714 <deflate+0xa2c>
    2664:	ldr	x1, [x19, #40]
    2668:	mov	x2, x1
    266c:	b	26a0 <deflate+0x9b8>
    2670:	ldr	x0, [x19, #64]
    2674:	add	x4, x2, #0x1
    2678:	ldr	x5, [x3, #40]
    267c:	add	x3, x0, #0x1
    2680:	str	x3, [x19, #64]
    2684:	ldr	x3, [x19, #16]
    2688:	ldrb	w0, [x5, x0]
    268c:	str	x4, [x19, #40]
    2690:	strb	w0, [x3, x2]
    2694:	cbz	w0, 26d8 <deflate+0x9f0>
    2698:	ldr	x2, [x19, #40]
    269c:	ldr	x3, [x19, #56]
    26a0:	ldr	x0, [x19, #24]
    26a4:	cmp	x0, x2
    26a8:	b.ne	2670 <deflate+0x988>  // b.any
    26ac:	ldr	w0, [x3, #68]
    26b0:	cmp	w0, #0x0
    26b4:	ccmp	x1, x2, #0x2, ne  // ne = any
    26b8:	b.cc	27b0 <deflate+0xac8>  // b.lo, b.ul, b.last
    26bc:	mov	x0, x20
    26c0:	bl	590 <flush_pending>
    26c4:	ldr	x2, [x19, #40]
    26c8:	mov	x1, #0x0                   	// #0
    26cc:	cbnz	x2, 21f0 <deflate+0x508>
    26d0:	ldr	x3, [x19, #56]
    26d4:	b	2670 <deflate+0x988>
    26d8:	ldr	x3, [x19, #56]
    26dc:	ldr	w0, [x3, #68]
    26e0:	cbz	w0, 2710 <deflate+0xa28>
    26e4:	ldr	x2, [x19, #40]
    26e8:	cmp	x2, x1
    26ec:	b.ls	2710 <deflate+0xa28>  // b.plast
    26f0:	ldr	x3, [x19, #16]
    26f4:	sub	w2, w2, w1
    26f8:	ldr	x0, [x20, #96]
    26fc:	add	x1, x3, x1
    2700:	bl	0 <crc32>
    2704:	ldr	x3, [x19, #56]
    2708:	str	x0, [x20, #96]
    270c:	nop
    2710:	str	xzr, [x19, #64]
    2714:	mov	w0, #0x5b                  	// #91
    2718:	str	w0, [x19, #8]
    271c:	ldr	x0, [x3, #56]
    2720:	cbz	x0, 29d0 <deflate+0xce8>
    2724:	ldr	x1, [x19, #40]
    2728:	mov	x2, x1
    272c:	b	2760 <deflate+0xa78>
    2730:	ldr	x0, [x19, #64]
    2734:	add	x4, x2, #0x1
    2738:	ldr	x5, [x3, #56]
    273c:	add	x3, x0, #0x1
    2740:	str	x3, [x19, #64]
    2744:	ldr	x3, [x19, #16]
    2748:	ldrb	w0, [x5, x0]
    274c:	str	x4, [x19, #40]
    2750:	strb	w0, [x3, x2]
    2754:	cbz	w0, 2804 <deflate+0xb1c>
    2758:	ldr	x2, [x19, #40]
    275c:	ldr	x3, [x19, #56]
    2760:	ldr	x0, [x19, #24]
    2764:	cmp	x0, x2
    2768:	b.ne	2730 <deflate+0xa48>  // b.any
    276c:	ldr	w0, [x3, #68]
    2770:	cmp	w0, #0x0
    2774:	ccmp	x1, x2, #0x2, ne  // ne = any
    2778:	b.cc	27e8 <deflate+0xb00>  // b.lo, b.ul, b.last
    277c:	mov	x0, x20
    2780:	bl	590 <flush_pending>
    2784:	ldr	x2, [x19, #40]
    2788:	mov	x1, #0x0                   	// #0
    278c:	cbnz	x2, 21f0 <deflate+0x508>
    2790:	ldr	x3, [x19, #56]
    2794:	b	2730 <deflate+0xa48>
    2798:	ldr	x3, [x19, #56]
    279c:	b	2540 <deflate+0x858>
    27a0:	mov	w1, w21
    27a4:	mov	x0, x19
    27a8:	bl	f30 <deflate_stored>
    27ac:	b	1f04 <deflate+0x21c>
    27b0:	ldr	x3, [x19, #16]
    27b4:	sub	w2, w2, w1
    27b8:	ldr	x0, [x20, #96]
    27bc:	add	x1, x3, x1
    27c0:	bl	0 <crc32>
    27c4:	str	x0, [x20, #96]
    27c8:	b	26bc <deflate+0x9d4>
    27cc:	ldr	w1, [x19, #196]
    27d0:	cmp	w1, #0x1
    27d4:	b.le	1d9c <deflate+0xb4>
    27d8:	cmp	w1, #0x5
    27dc:	b.gt	2c24 <deflate+0xf3c>
    27e0:	orr	w0, w0, #0x40
    27e4:	b	1d9c <deflate+0xb4>
    27e8:	ldr	x3, [x19, #16]
    27ec:	sub	w2, w2, w1
    27f0:	ldr	x0, [x20, #96]
    27f4:	add	x1, x3, x1
    27f8:	bl	0 <crc32>
    27fc:	str	x0, [x20, #96]
    2800:	b	277c <deflate+0xa94>
    2804:	ldr	x0, [x19, #56]
    2808:	ldr	w0, [x0, #68]
    280c:	cbz	w0, 2890 <deflate+0xba8>
    2810:	ldr	x2, [x19, #40]
    2814:	cmp	x2, x1
    2818:	b.hi	2cac <deflate+0xfc4>  // b.pmore
    281c:	mov	w1, #0x67                  	// #103
    2820:	str	w1, [x19, #8]
    2824:	cbz	w0, 2890 <deflate+0xba8>
    2828:	ldr	x0, [x19, #40]
    282c:	ldr	x1, [x19, #24]
    2830:	add	x2, x0, #0x2
    2834:	cmp	x2, x1
    2838:	b.ls	284c <deflate+0xb64>  // b.plast
    283c:	mov	x0, x20
    2840:	bl	590 <flush_pending>
    2844:	ldr	x0, [x19, #40]
    2848:	cbnz	x0, 21f0 <deflate+0x508>
    284c:	ldr	x1, [x19, #16]
    2850:	add	x3, x0, #0x1
    2854:	ldr	x2, [x20, #96]
    2858:	str	x3, [x19, #40]
    285c:	strb	w2, [x1, x0]
    2860:	mov	w2, #0x0                   	// #0
    2864:	mov	x1, #0x0                   	// #0
    2868:	mov	x0, #0x0                   	// #0
    286c:	ldr	x3, [x20, #96]
    2870:	ldr	x5, [x19, #16]
    2874:	ldr	x4, [x19, #40]
    2878:	lsr	x3, x3, #8
    287c:	add	x6, x4, #0x1
    2880:	str	x6, [x19, #40]
    2884:	strb	w3, [x5, x4]
    2888:	bl	0 <crc32>
    288c:	str	x0, [x20, #96]
    2890:	mov	w0, #0x71                  	// #113
    2894:	str	w0, [x19, #8]
    2898:	mov	x0, x20
    289c:	bl	590 <flush_pending>
    28a0:	ldr	x0, [x19, #40]
    28a4:	cbz	x0, 1ec4 <deflate+0x1dc>
    28a8:	b	21f0 <deflate+0x508>
    28ac:	str	x3, [x19, #40]
    28b0:	strb	w0, [x2, x1]
    28b4:	ldr	x2, [x19, #16]
    28b8:	ldr	x1, [x19, #40]
    28bc:	ldr	x0, [x20, #96]
    28c0:	add	x3, x1, #0x1
    28c4:	str	x3, [x19, #40]
    28c8:	lsr	x0, x0, #8
    28cc:	strb	w0, [x2, x1]
    28d0:	ldr	x2, [x19, #16]
    28d4:	ldr	x1, [x19, #40]
    28d8:	ldr	x0, [x20, #96]
    28dc:	add	x3, x1, #0x1
    28e0:	str	x3, [x19, #40]
    28e4:	lsr	x0, x0, #16
    28e8:	strb	w0, [x2, x1]
    28ec:	ldr	x2, [x19, #16]
    28f0:	ldr	x1, [x19, #40]
    28f4:	ldr	x0, [x20, #96]
    28f8:	add	x3, x1, #0x1
    28fc:	str	x3, [x19, #40]
    2900:	lsr	x0, x0, #24
    2904:	strb	w0, [x2, x1]
    2908:	ldr	x1, [x19, #16]
    290c:	ldr	x0, [x19, #40]
    2910:	ldr	x2, [x20, #16]
    2914:	add	x3, x0, #0x1
    2918:	str	x3, [x19, #40]
    291c:	strb	w2, [x1, x0]
    2920:	ldr	x0, [x20, #16]
    2924:	ldr	x2, [x19, #16]
    2928:	ldr	x1, [x19, #40]
    292c:	lsr	x0, x0, #8
    2930:	add	x3, x1, #0x1
    2934:	str	x3, [x19, #40]
    2938:	strb	w0, [x2, x1]
    293c:	ldr	x0, [x20, #16]
    2940:	ldr	x2, [x19, #16]
    2944:	ldr	x1, [x19, #40]
    2948:	lsr	x0, x0, #16
    294c:	add	x3, x1, #0x1
    2950:	str	x3, [x19, #40]
    2954:	strb	w0, [x2, x1]
    2958:	ldr	x0, [x20, #16]
    295c:	ldr	x2, [x19, #16]
    2960:	ldr	x1, [x19, #40]
    2964:	lsr	x0, x0, #24
    2968:	add	x3, x1, #0x1
    296c:	str	x3, [x19, #40]
    2970:	strb	w0, [x2, x1]
    2974:	b	1fa4 <deflate+0x2bc>
    2978:	ldr	w2, [x19, #40]
    297c:	ldr	x1, [x19, #16]
    2980:	ldr	x0, [x20, #96]
    2984:	bl	0 <crc32>
    2988:	ldr	x3, [x19, #56]
    298c:	str	x0, [x20, #96]
    2990:	b	2534 <deflate+0x84c>
    2994:	ldr	x0, [x19, #56]
    2998:	ldr	w0, [x0, #68]
    299c:	b	2824 <deflate+0xb3c>
    29a0:	mov	x0, x19
    29a4:	bl	0 <_tr_align>
    29a8:	mov	x0, x20
    29ac:	bl	590 <flush_pending>
    29b0:	b	2318 <deflate+0x630>
    29b4:	mov	w0, #0xffffffff            	// #-1
    29b8:	ldp	x23, x24, [sp, #48]
    29bc:	ldp	x25, x26, [sp, #64]
    29c0:	ldr	x27, [sp, #80]
    29c4:	str	w0, [x19, #76]
    29c8:	ldp	x19, x20, [sp, #16]
    29cc:	b	1ffc <deflate+0x314>
    29d0:	ldr	w0, [x3, #68]
    29d4:	b	281c <deflate+0xb34>
    29d8:	ldr	x3, [x19, #56]
    29dc:	b	265c <deflate+0x974>
    29e0:	ldr	x2, [x19, #16]
    29e4:	mov	w1, #0x2                   	// #2
    29e8:	ldr	x0, [x19, #40]
    29ec:	add	x3, x0, #0x1
    29f0:	str	x3, [x19, #40]
    29f4:	strb	wzr, [x2, x0]
    29f8:	ldr	x2, [x19, #16]
    29fc:	ldr	x0, [x19, #40]
    2a00:	add	x3, x0, #0x1
    2a04:	str	x3, [x19, #40]
    2a08:	strb	wzr, [x2, x0]
    2a0c:	ldr	x2, [x19, #16]
    2a10:	ldr	x0, [x19, #40]
    2a14:	add	x3, x0, #0x1
    2a18:	str	x3, [x19, #40]
    2a1c:	strb	wzr, [x2, x0]
    2a20:	ldr	x2, [x19, #16]
    2a24:	ldr	x0, [x19, #40]
    2a28:	add	x3, x0, #0x1
    2a2c:	str	x3, [x19, #40]
    2a30:	strb	wzr, [x2, x0]
    2a34:	ldr	x2, [x19, #16]
    2a38:	ldr	x0, [x19, #40]
    2a3c:	add	x3, x0, #0x1
    2a40:	str	x3, [x19, #40]
    2a44:	strb	wzr, [x2, x0]
    2a48:	ldr	w0, [x19, #196]
    2a4c:	cmp	w0, #0x9
    2a50:	b.eq	2a68 <deflate+0xd80>  // b.none
    2a54:	ldr	w1, [x19, #200]
    2a58:	cmp	w1, #0x1
    2a5c:	ccmp	w0, #0x1, #0x4, le
    2a60:	cset	w1, le
    2a64:	lsl	w1, w1, #2
    2a68:	ldr	x5, [x19, #16]
    2a6c:	mov	w4, #0x3                   	// #3
    2a70:	ldr	x2, [x19, #40]
    2a74:	mov	w3, #0x71                  	// #113
    2a78:	mov	x0, x20
    2a7c:	add	x6, x2, #0x1
    2a80:	str	x6, [x19, #40]
    2a84:	strb	w1, [x5, x2]
    2a88:	ldr	x2, [x19, #16]
    2a8c:	ldr	x1, [x19, #40]
    2a90:	add	x5, x1, #0x1
    2a94:	str	x5, [x19, #40]
    2a98:	strb	w4, [x2, x1]
    2a9c:	str	w3, [x19, #8]
    2aa0:	bl	590 <flush_pending>
    2aa4:	ldr	x0, [x19, #40]
    2aa8:	cbnz	x0, 21f0 <deflate+0x508>
    2aac:	ldr	w0, [x19, #8]
    2ab0:	b	1ea4 <deflate+0x1bc>
    2ab4:	mov	x0, x19
    2ab8:	bl	338 <fill_window>
    2abc:	ldr	w2, [x19, #180]
    2ac0:	cmp	w2, #0x102
    2ac4:	b.hi	2238 <deflate+0x550>  // b.pmore
    2ac8:	cbz	w21, 230c <deflate+0x624>
    2acc:	cbz	w2, 2c38 <deflate+0xf50>
    2ad0:	ldr	w0, [x19, #172]
    2ad4:	cmp	w2, #0x2
    2ad8:	str	wzr, [x19, #160]
    2adc:	mov	w3, w0
    2ae0:	ldr	x1, [x19, #96]
    2ae4:	b.ls	2268 <deflate+0x580>  // b.plast
    2ae8:	b	2248 <deflate+0x560>
    2aec:	ldrb	w0, [x4, #2]
    2af0:	cmp	w0, w5
    2af4:	b.ne	2268 <deflate+0x580>  // b.any
    2af8:	ldrb	w0, [x4, #3]
    2afc:	cmp	w0, w5
    2b00:	b.ne	2268 <deflate+0x580>  // b.any
    2b04:	add	x0, x3, #0x102
    2b08:	add	x4, x4, #0x3
    2b0c:	add	x0, x1, x0
    2b10:	ldrb	w6, [x4, #1]
    2b14:	cmp	w6, w5
    2b18:	b.ne	2e28 <deflate+0x1140>  // b.any
    2b1c:	ldrb	w6, [x4, #2]
    2b20:	cmp	w6, w5
    2b24:	b.ne	2e20 <deflate+0x1138>  // b.any
    2b28:	ldrb	w6, [x4, #3]
    2b2c:	cmp	w6, w5
    2b30:	b.ne	2e18 <deflate+0x1130>  // b.any
    2b34:	ldrb	w6, [x4, #4]
    2b38:	cmp	w6, w5
    2b3c:	b.ne	2e10 <deflate+0x1128>  // b.any
    2b40:	ldrb	w6, [x4, #5]
    2b44:	cmp	w6, w5
    2b48:	b.ne	2e40 <deflate+0x1158>  // b.any
    2b4c:	ldrb	w6, [x4, #6]
    2b50:	cmp	w6, w5
    2b54:	b.ne	2e38 <deflate+0x1150>  // b.any
    2b58:	ldrb	w6, [x4, #7]
    2b5c:	cmp	w6, w5
    2b60:	b.ne	2e30 <deflate+0x1148>  // b.any
    2b64:	ldrb	w6, [x4, #8]!
    2b68:	cmp	w6, w5
    2b6c:	ccmp	x0, x4, #0x0, eq  // eq = none
    2b70:	b.hi	2b10 <deflate+0xe28>  // b.pmore
    2b74:	sub	x0, x0, x4
    2b78:	sub	w0, w25, w0
    2b7c:	str	w0, [x19, #160]
    2b80:	cmp	w0, w2
    2b84:	b.ls	2c18 <deflate+0xf30>  // b.plast
    2b88:	mov	w0, w2
    2b8c:	str	w2, [x19, #160]
    2b90:	sub	w0, w0, #0x3
    2b94:	ldr	w3, [x19, #5900]
    2b98:	and	w0, w0, #0xff
    2b9c:	mov	w6, #0x1                   	// #1
    2ba0:	ldr	x5, [x19, #5904]
    2ba4:	add	w1, w3, #0x1
    2ba8:	ldrb	w2, [x24, w0, sxtw]
    2bac:	ldr	x4, [x19, #5888]
    2bb0:	strh	w6, [x5, w3, uxtw #1]
    2bb4:	add	x2, x19, x2, lsl #2
    2bb8:	str	w1, [x19, #5900]
    2bbc:	ldrb	w1, [x23]
    2bc0:	strb	w0, [x4, w3, uxtw]
    2bc4:	ldrh	w3, [x2, #1240]
    2bc8:	add	x0, x19, x1, lsl #2
    2bcc:	add	w1, w3, #0x1
    2bd0:	strh	w1, [x2, #1240]
    2bd4:	ldrh	w1, [x0, #2504]
    2bd8:	add	w1, w1, #0x1
    2bdc:	strh	w1, [x0, #2504]
    2be0:	ldr	w1, [x19, #5896]
    2be4:	ldr	w2, [x19, #5900]
    2be8:	sub	w1, w1, #0x1
    2bec:	ldr	w3, [x19, #160]
    2bf0:	ldr	w0, [x19, #172]
    2bf4:	cmp	w1, w2
    2bf8:	ldr	w2, [x19, #180]
    2bfc:	cset	w1, eq  // eq = none
    2c00:	add	w0, w0, w3
    2c04:	str	wzr, [x19, #160]
    2c08:	sub	w2, w2, w3
    2c0c:	str	w0, [x19, #172]
    2c10:	str	w2, [x19, #180]
    2c14:	b	22c4 <deflate+0x5dc>
    2c18:	cmp	w0, #0x2
    2c1c:	b.hi	2b90 <deflate+0xea8>  // b.pmore
    2c20:	b	2268 <deflate+0x580>
    2c24:	cmp	w1, #0x6
    2c28:	orr	w1, w0, #0x80
    2c2c:	orr	w0, w0, #0xc0
    2c30:	csel	w0, w0, w1, ne  // ne = any
    2c34:	b	1d9c <deflate+0xb4>
    2c38:	str	wzr, [x19, #5932]
    2c3c:	cmp	w21, #0x4
    2c40:	b.eq	2d58 <deflate+0x1070>  // b.none
    2c44:	ldr	w0, [x19, #5900]
    2c48:	cbz	w0, 2db0 <deflate+0x10c8>
    2c4c:	ldr	x2, [x19, #152]
    2c50:	mov	x1, #0x0                   	// #0
    2c54:	tbnz	x2, #63, 2c60 <deflate+0xf78>
    2c58:	ldr	x1, [x19, #96]
    2c5c:	add	x1, x1, w2, uxtw
    2c60:	ldr	w4, [x19, #172]
    2c64:	mov	x0, x19
    2c68:	mov	w3, #0x0                   	// #0
    2c6c:	sub	x2, x4, x2
    2c70:	bl	0 <_tr_flush_block>
    2c74:	ldr	w1, [x19, #172]
    2c78:	ldr	x0, [x19]
    2c7c:	str	x1, [x19, #152]
    2c80:	bl	590 <flush_pending>
    2c84:	ldr	x0, [x19]
    2c88:	ldp	x23, x24, [sp, #48]
    2c8c:	ldr	w0, [x0, #32]
    2c90:	ldp	x25, x26, [sp, #64]
    2c94:	cmp	w0, #0x0
    2c98:	cset	w0, ne  // ne = any
    2c9c:	mov	w2, w0
    2ca0:	b	21a8 <deflate+0x4c0>
    2ca4:	ldr	x3, [x19, #56]
    2ca8:	b	271c <deflate+0xa34>
    2cac:	ldr	x3, [x19, #16]
    2cb0:	sub	w2, w2, w1
    2cb4:	ldr	x0, [x20, #96]
    2cb8:	add	x1, x3, x1
    2cbc:	bl	0 <crc32>
    2cc0:	str	x0, [x20, #96]
    2cc4:	ldr	x0, [x19, #56]
    2cc8:	ldr	w0, [x0, #68]
    2ccc:	b	281c <deflate+0xb34>
    2cd0:	adrp	x0, 0 <z_errmsg>
    2cd4:	mov	w22, #0xfffffffb            	// #-5
    2cd8:	ldr	x0, [x0]
    2cdc:	str	x0, [x20, #48]
    2ce0:	ldp	x19, x20, [sp, #16]
    2ce4:	b	1ffc <deflate+0x314>
    2ce8:	ldr	x0, [x20, #96]
    2cec:	sub	w2, w2, w23
    2cf0:	ldr	x1, [x19, #16]
    2cf4:	add	x1, x1, x23
    2cf8:	bl	0 <crc32>
    2cfc:	ldr	x3, [x19, #56]
    2d00:	str	x0, [x20, #96]
    2d04:	b	2648 <deflate+0x960>
    2d08:	ldr	x2, [x19, #152]
    2d0c:	mov	x1, #0x0                   	// #0
    2d10:	tbnz	x2, #63, 2d1c <deflate+0x1034>
    2d14:	ldr	x1, [x19, #96]
    2d18:	add	x1, x1, w2, uxtw
    2d1c:	ldr	w4, [x19, #172]
    2d20:	mov	x0, x19
    2d24:	mov	w3, #0x1                   	// #1
    2d28:	sub	x2, x4, x2
    2d2c:	bl	0 <_tr_flush_block>
    2d30:	ldr	w1, [x19, #172]
    2d34:	ldr	x0, [x19]
    2d38:	str	x1, [x19, #152]
    2d3c:	bl	590 <flush_pending>
    2d40:	ldr	x0, [x19]
    2d44:	ldr	w0, [x0, #32]
    2d48:	cbnz	w0, 2df0 <deflate+0x1108>
    2d4c:	mov	w0, #0x29a                 	// #666
    2d50:	str	w0, [x19, #8]
    2d54:	b	2318 <deflate+0x630>
    2d58:	ldr	x2, [x19, #152]
    2d5c:	mov	x1, #0x0                   	// #0
    2d60:	tbnz	x2, #63, 2d6c <deflate+0x1084>
    2d64:	ldr	x1, [x19, #96]
    2d68:	add	x1, x1, w2, uxtw
    2d6c:	ldr	w4, [x19, #172]
    2d70:	mov	x0, x19
    2d74:	mov	w3, #0x1                   	// #1
    2d78:	sub	x2, x4, x2
    2d7c:	bl	0 <_tr_flush_block>
    2d80:	ldr	w1, [x19, #172]
    2d84:	ldr	x0, [x19]
    2d88:	str	x1, [x19, #152]
    2d8c:	bl	590 <flush_pending>
    2d90:	ldr	x0, [x19]
    2d94:	ldr	w0, [x0, #32]
    2d98:	cbnz	w0, 2dfc <deflate+0x1114>
    2d9c:	mov	w0, #0x29a                 	// #666
    2da0:	ldp	x23, x24, [sp, #48]
    2da4:	ldp	x25, x26, [sp, #64]
    2da8:	str	w0, [x19, #8]
    2dac:	b	2318 <deflate+0x630>
    2db0:	ldp	x23, x24, [sp, #48]
    2db4:	ldp	x25, x26, [sp, #64]
    2db8:	b	21b4 <deflate+0x4cc>
    2dbc:	ldr	w2, [x19, #132]
    2dc0:	mov	w1, #0x0                   	// #0
    2dc4:	ldr	x0, [x19, #120]
    2dc8:	sub	w2, w2, #0x1
    2dcc:	lsl	x2, x2, #1
    2dd0:	strh	wzr, [x0, x2]
    2dd4:	bl	0 <memset>
    2dd8:	ldr	w0, [x19, #180]
    2ddc:	cbnz	w0, 29a8 <deflate+0xcc0>
    2de0:	str	xzr, [x19, #152]
    2de4:	str	wzr, [x19, #172]
    2de8:	str	wzr, [x19, #5932]
    2dec:	b	29a8 <deflate+0xcc0>
    2df0:	mov	w0, #0x29a                 	// #666
    2df4:	str	w0, [x19, #8]
    2df8:	b	1f28 <deflate+0x240>
    2dfc:	mov	w0, #0x29a                 	// #666
    2e00:	ldp	x23, x24, [sp, #48]
    2e04:	ldp	x25, x26, [sp, #64]
    2e08:	str	w0, [x19, #8]
    2e0c:	b	1f28 <deflate+0x240>
    2e10:	add	x4, x4, #0x4
    2e14:	b	2b74 <deflate+0xe8c>
    2e18:	add	x4, x4, #0x3
    2e1c:	b	2b74 <deflate+0xe8c>
    2e20:	add	x4, x4, #0x2
    2e24:	b	2b74 <deflate+0xe8c>
    2e28:	add	x4, x4, #0x1
    2e2c:	b	2b74 <deflate+0xe8c>
    2e30:	add	x4, x4, #0x7
    2e34:	b	2b74 <deflate+0xe8c>
    2e38:	add	x4, x4, #0x6
    2e3c:	b	2b74 <deflate+0xe8c>
    2e40:	add	x4, x4, #0x5
    2e44:	b	2b74 <deflate+0xe8c>

0000000000002e48 <deflateParams>:
    2e48:	stp	x29, x30, [sp, #-64]!
    2e4c:	mov	x29, sp
    2e50:	stp	x21, x22, [sp, #32]
    2e54:	cbz	x0, 2f44 <deflateParams+0xfc>
    2e58:	stp	x19, x20, [sp, #16]
    2e5c:	mov	w20, w1
    2e60:	mov	x19, x0
    2e64:	ldr	x1, [x0, #64]
    2e68:	cbz	x1, 2f40 <deflateParams+0xf8>
    2e6c:	ldr	x1, [x0, #72]
    2e70:	cbz	x1, 2f40 <deflateParams+0xf8>
    2e74:	str	x23, [sp, #48]
    2e78:	mov	w23, w2
    2e7c:	bl	1480 <deflateStateCheck.part.0>
    2e80:	mov	w22, w0
    2e84:	cbnz	w0, 2fb0 <deflateParams+0x168>
    2e88:	cmn	w20, #0x1
    2e8c:	ldr	x21, [x19, #56]
    2e90:	b.eq	2f58 <deflateParams+0x110>  // b.none
    2e94:	cmp	w20, #0x9
    2e98:	cset	w0, hi  // hi = pmore
    2e9c:	cmp	w0, #0x0
    2ea0:	ccmp	w23, #0x4, #0x2, eq  // eq = none
    2ea4:	b.hi	2fb0 <deflateParams+0x168>  // b.pmore
    2ea8:	ldp	w0, w1, [x21, #196]
    2eac:	cmp	w1, w23
    2eb0:	b.eq	2f64 <deflateParams+0x11c>  // b.none
    2eb4:	ldr	x1, [x21, #5944]
    2eb8:	cbnz	x1, 2f8c <deflateParams+0x144>
    2ebc:	cmp	w20, w0
    2ec0:	b.eq	2f24 <deflateParams+0xdc>  // b.none
    2ec4:	cbnz	w0, 2ef8 <deflateParams+0xb0>
    2ec8:	ldr	w0, [x21, #5928]
    2ecc:	cbz	w0, 2ef8 <deflateParams+0xb0>
    2ed0:	cmp	w0, #0x1
    2ed4:	b.eq	2fc0 <deflateParams+0x178>  // b.none
    2ed8:	ldr	w2, [x21, #132]
    2edc:	ldr	x0, [x21, #120]
    2ee0:	sub	w2, w2, #0x1
    2ee4:	lsl	x2, x2, #1
    2ee8:	strh	wzr, [x0, x2]
    2eec:	mov	w1, #0x0                   	// #0
    2ef0:	bl	0 <memset>
    2ef4:	str	wzr, [x21, #5928]
    2ef8:	sbfiz	x2, x20, #4, #32
    2efc:	adrp	x0, 0 <slide_hash>
    2f00:	add	x0, x0, #0x0
    2f04:	str	w20, [x21, #196]
    2f08:	add	x1, x0, x2
    2f0c:	ldrh	w2, [x0, x2]
    2f10:	ldrh	w3, [x1, #2]
    2f14:	ldrh	w0, [x1, #4]
    2f18:	ldrh	w1, [x1, #6]
    2f1c:	stp	w1, w3, [x21, #188]
    2f20:	stp	w2, w0, [x21, #204]
    2f24:	ldp	x19, x20, [sp, #16]
    2f28:	str	w23, [x21, #200]
    2f2c:	ldr	x23, [sp, #48]
    2f30:	mov	w0, w22
    2f34:	ldp	x21, x22, [sp, #32]
    2f38:	ldp	x29, x30, [sp], #64
    2f3c:	ret
    2f40:	ldp	x19, x20, [sp, #16]
    2f44:	mov	w22, #0xfffffffe            	// #-2
    2f48:	mov	w0, w22
    2f4c:	ldp	x21, x22, [sp, #32]
    2f50:	ldp	x29, x30, [sp], #64
    2f54:	ret
    2f58:	mov	w0, #0x0                   	// #0
    2f5c:	mov	w20, #0x6                   	// #6
    2f60:	b	2e9c <deflateParams+0x54>
    2f64:	adrp	x1, 0 <slide_hash>
    2f68:	add	x1, x1, #0x0
    2f6c:	add	x2, x1, w20, sxtw #4
    2f70:	add	x1, x1, w0, sxtw #4
    2f74:	ldr	x2, [x2, #8]
    2f78:	ldr	x1, [x1, #8]
    2f7c:	cmp	x2, x1
    2f80:	b.eq	2ebc <deflateParams+0x74>  // b.none
    2f84:	ldr	x1, [x21, #5944]
    2f88:	cbz	x1, 2ebc <deflateParams+0x74>
    2f8c:	mov	x0, x19
    2f90:	mov	w1, #0x5                   	// #5
    2f94:	bl	1ce8 <deflate>
    2f98:	cmn	w0, #0x2
    2f9c:	b.eq	2fb0 <deflateParams+0x168>  // b.none
    2fa0:	ldr	w0, [x19, #32]
    2fa4:	cbz	w0, 2fdc <deflateParams+0x194>
    2fa8:	ldr	w0, [x21, #196]
    2fac:	b	2ebc <deflateParams+0x74>
    2fb0:	mov	w22, #0xfffffffe            	// #-2
    2fb4:	ldp	x19, x20, [sp, #16]
    2fb8:	ldr	x23, [sp, #48]
    2fbc:	b	2f48 <deflateParams+0x100>
    2fc0:	mov	x0, x21
    2fc4:	bl	0 <slide_hash>
    2fc8:	ldr	w2, [x21, #132]
    2fcc:	ldr	x0, [x21, #120]
    2fd0:	sub	w2, w2, #0x1
    2fd4:	lsl	x2, x2, #1
    2fd8:	b	2eec <deflateParams+0xa4>
    2fdc:	mov	w22, #0xfffffffb            	// #-5
    2fe0:	ldp	x19, x20, [sp, #16]
    2fe4:	ldr	x23, [sp, #48]
    2fe8:	b	2f30 <deflateParams+0xe8>
    2fec:	nop

0000000000002ff0 <deflateEnd>:
    2ff0:	cbz	x0, 30ac <deflateEnd+0xbc>
    2ff4:	stp	x29, x30, [sp, #-32]!
    2ff8:	mov	x29, sp
    2ffc:	ldr	x1, [x0, #64]
    3000:	stp	x19, x20, [sp, #16]
    3004:	mov	x19, x0
    3008:	cbz	x1, 309c <deflateEnd+0xac>
    300c:	ldr	x5, [x0, #72]
    3010:	cbz	x5, 309c <deflateEnd+0xac>
    3014:	bl	1480 <deflateStateCheck.part.0>
    3018:	cbnz	w0, 309c <deflateEnd+0xac>
    301c:	ldr	x2, [x19, #56]
    3020:	ldr	x0, [x19, #80]
    3024:	ldr	x1, [x2, #16]
    3028:	ldr	w20, [x2, #8]
    302c:	cbz	x1, 303c <deflateEnd+0x4c>
    3030:	blr	x5
    3034:	ldp	x5, x0, [x19, #72]
    3038:	ldr	x2, [x19, #56]
    303c:	ldr	x1, [x2, #120]
    3040:	cbz	x1, 3050 <deflateEnd+0x60>
    3044:	blr	x5
    3048:	ldp	x5, x0, [x19, #72]
    304c:	ldr	x2, [x19, #56]
    3050:	ldr	x1, [x2, #112]
    3054:	cbz	x1, 3064 <deflateEnd+0x74>
    3058:	blr	x5
    305c:	ldp	x5, x0, [x19, #72]
    3060:	ldr	x2, [x19, #56]
    3064:	ldr	x1, [x2, #96]
    3068:	cbz	x1, 3078 <deflateEnd+0x88>
    306c:	blr	x5
    3070:	ldp	x5, x0, [x19, #72]
    3074:	ldr	x2, [x19, #56]
    3078:	mov	x1, x2
    307c:	blr	x5
    3080:	str	xzr, [x19, #56]
    3084:	cmp	w20, #0x71
    3088:	mov	w0, #0xfffffffd            	// #-3
    308c:	csel	w0, wzr, w0, ne  // ne = any
    3090:	ldp	x19, x20, [sp, #16]
    3094:	ldp	x29, x30, [sp], #32
    3098:	ret
    309c:	mov	w0, #0xfffffffe            	// #-2
    30a0:	ldp	x19, x20, [sp, #16]
    30a4:	ldp	x29, x30, [sp], #32
    30a8:	ret
    30ac:	mov	w0, #0xfffffffe            	// #-2
    30b0:	ret
    30b4:	nop

00000000000030b8 <deflateInit2_>:
    30b8:	cbz	x6, 3340 <deflateInit2_+0x288>
    30bc:	stp	x29, x30, [sp, #-80]!
    30c0:	mov	x29, sp
    30c4:	stp	x19, x20, [sp, #16]
    30c8:	mov	x20, x0
    30cc:	mov	w0, #0x70                  	// #112
    30d0:	stp	x23, x24, [sp, #48]
    30d4:	mov	w24, w1
    30d8:	ldrb	w1, [x6]
    30dc:	cmp	w1, #0x31
    30e0:	ccmp	w7, w0, #0x0, eq  // eq = none
    30e4:	b.ne	330c <deflateInit2_+0x254>  // b.any
    30e8:	cbz	x20, 32f8 <deflateInit2_+0x240>
    30ec:	ldr	x0, [x20, #64]
    30f0:	stp	x21, x22, [sp, #32]
    30f4:	mov	w23, w5
    30f8:	stp	x25, x26, [sp, #64]
    30fc:	mov	w21, w3
    3100:	mov	w22, w4
    3104:	str	xzr, [x20, #48]
    3108:	cbz	x0, 32dc <deflateInit2_+0x224>
    310c:	ldr	x0, [x20, #72]
    3110:	cbz	x0, 32cc <deflateInit2_+0x214>
    3114:	cmn	w24, #0x1
    3118:	mov	w0, #0x6                   	// #6
    311c:	csel	w24, w24, w0, ne  // ne = any
    3120:	tbnz	w21, #31, 32c0 <deflateInit2_+0x208>
    3124:	cmp	w21, #0xf
    3128:	mov	w26, #0x1                   	// #1
    312c:	b.gt	32b4 <deflateInit2_+0x1fc>
    3130:	sub	w0, w22, #0x1
    3134:	cmp	w0, #0x8
    3138:	b.hi	32f0 <deflateInit2_+0x238>  // b.pmore
    313c:	sub	w0, w21, #0x8
    3140:	cmp	w0, #0x7
    3144:	ccmp	w2, #0x8, #0x0, ls  // ls = plast
    3148:	b.ne	32f0 <deflateInit2_+0x238>  // b.any
    314c:	cmp	w24, #0x9
    3150:	ccmp	w23, #0x4, #0x2, ls  // ls = plast
    3154:	b.hi	32f0 <deflateInit2_+0x238>  // b.pmore
    3158:	cmp	w21, #0x8
    315c:	ccmp	w26, #0x1, #0x4, eq  // eq = none
    3160:	b.ne	32f0 <deflateInit2_+0x238>  // b.any
    3164:	ldr	x3, [x20, #64]
    3168:	cmp	w21, #0x8
    316c:	ldr	x0, [x20, #80]
    3170:	mov	w1, #0x9                   	// #9
    3174:	mov	w2, #0x1740                	// #5952
    3178:	csel	w21, w21, w1, ne  // ne = any
    317c:	mov	w1, #0x1                   	// #1
    3180:	blr	x3
    3184:	mov	x19, x0
    3188:	cbz	x0, 3348 <deflateInit2_+0x290>
    318c:	add	w3, w22, #0x9
    3190:	mov	w0, #0xaaab                	// #43691
    3194:	movk	w0, #0xaaaa, lsl #16
    3198:	add	w4, w22, #0x7
    319c:	mov	w25, #0x1                   	// #1
    31a0:	str	x19, [x20, #56]
    31a4:	umull	x3, w3, w0
    31a8:	lsl	w5, w25, w4
    31ac:	ldr	x6, [x20, #64]
    31b0:	sub	w7, w5, #0x1
    31b4:	ldr	x0, [x20, #80]
    31b8:	lsl	w1, w25, w21
    31bc:	lsr	x3, x3, #33
    31c0:	sub	w8, w1, #0x1
    31c4:	mov	w2, #0x2a                  	// #42
    31c8:	str	x20, [x19]
    31cc:	str	w2, [x19, #8]
    31d0:	mov	w2, #0x2                   	// #2
    31d4:	str	w26, [x19, #48]
    31d8:	add	w22, w22, #0x6
    31dc:	str	xzr, [x19, #56]
    31e0:	stp	w1, w21, [x19, #80]
    31e4:	str	w8, [x19, #88]
    31e8:	stp	w5, w4, [x19, #132]
    31ec:	stp	w7, w3, [x19, #140]
    31f0:	blr	x6
    31f4:	ldr	w1, [x19, #80]
    31f8:	mov	w2, #0x2                   	// #2
    31fc:	ldr	x3, [x20, #64]
    3200:	str	x0, [x19, #96]
    3204:	ldr	x0, [x20, #80]
    3208:	blr	x3
    320c:	ldr	w1, [x19, #132]
    3210:	mov	w2, #0x2                   	// #2
    3214:	ldr	x3, [x20, #64]
    3218:	str	x0, [x19, #112]
    321c:	ldr	x0, [x20, #80]
    3220:	blr	x3
    3224:	ldr	x3, [x20, #64]
    3228:	str	x0, [x19, #120]
    322c:	ldr	x0, [x20, #80]
    3230:	lsl	w1, w25, w22
    3234:	str	w1, [x19, #5896]
    3238:	mov	w2, #0x4                   	// #4
    323c:	str	xzr, [x19, #5944]
    3240:	blr	x3
    3244:	ldr	w3, [x19, #5896]
    3248:	ldr	x1, [x19, #96]
    324c:	ubfiz	x2, x3, #2, #32
    3250:	stp	x0, x2, [x19, #16]
    3254:	mov	w2, w3
    3258:	cbz	x1, 3314 <deflateInit2_+0x25c>
    325c:	ldr	x1, [x19, #112]
    3260:	cbz	x1, 3314 <deflateInit2_+0x25c>
    3264:	ldr	x1, [x19, #120]
    3268:	cmp	x1, #0x0
    326c:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    3270:	b.eq	3314 <deflateInit2_+0x25c>  // b.none
    3274:	and	x3, x3, #0xfffffffe
    3278:	add	x2, x2, x2, lsl #1
    327c:	add	x3, x0, x3
    3280:	add	x2, x0, x2
    3284:	mov	w0, #0x8                   	// #8
    3288:	strb	w0, [x19, #72]
    328c:	mov	x0, x20
    3290:	ldp	x21, x22, [sp, #32]
    3294:	ldp	x25, x26, [sp, #64]
    3298:	stp	w24, w23, [x19, #196]
    329c:	str	x2, [x19, #5888]
    32a0:	str	x3, [x19, #5904]
    32a4:	ldp	x19, x20, [sp, #16]
    32a8:	ldp	x23, x24, [sp, #48]
    32ac:	ldp	x29, x30, [sp], #80
    32b0:	b	18e0 <deflateReset>
    32b4:	sub	w21, w21, #0x10
    32b8:	mov	w26, #0x2                   	// #2
    32bc:	b	3130 <deflateInit2_+0x78>
    32c0:	neg	w21, w21
    32c4:	mov	w26, #0x0                   	// #0
    32c8:	b	3130 <deflateInit2_+0x78>
    32cc:	adrp	x0, 0 <zcfree>
    32d0:	add	x0, x0, #0x0
    32d4:	str	x0, [x20, #72]
    32d8:	b	3114 <deflateInit2_+0x5c>
    32dc:	adrp	x0, 0 <zcalloc>
    32e0:	add	x0, x0, #0x0
    32e4:	str	x0, [x20, #64]
    32e8:	str	xzr, [x20, #80]
    32ec:	b	310c <deflateInit2_+0x54>
    32f0:	ldp	x21, x22, [sp, #32]
    32f4:	ldp	x25, x26, [sp, #64]
    32f8:	mov	w0, #0xfffffffe            	// #-2
    32fc:	ldp	x19, x20, [sp, #16]
    3300:	ldp	x23, x24, [sp, #48]
    3304:	ldp	x29, x30, [sp], #80
    3308:	ret
    330c:	mov	w0, #0xfffffffa            	// #-6
    3310:	b	32fc <deflateInit2_+0x244>
    3314:	adrp	x1, 0 <z_errmsg>
    3318:	mov	w0, #0x29a                 	// #666
    331c:	str	w0, [x19, #8]
    3320:	mov	x0, x20
    3324:	ldr	x1, [x1]
    3328:	str	x1, [x20, #48]
    332c:	bl	2ff0 <deflateEnd>
    3330:	mov	w0, #0xfffffffc            	// #-4
    3334:	ldp	x21, x22, [sp, #32]
    3338:	ldp	x25, x26, [sp, #64]
    333c:	b	32fc <deflateInit2_+0x244>
    3340:	mov	w0, #0xfffffffa            	// #-6
    3344:	ret
    3348:	mov	w0, #0xfffffffc            	// #-4
    334c:	ldp	x21, x22, [sp, #32]
    3350:	ldp	x25, x26, [sp, #64]
    3354:	b	32fc <deflateInit2_+0x244>

0000000000003358 <deflateInit_>:
    3358:	mov	x6, x2
    335c:	mov	w7, w3
    3360:	mov	w4, #0x8                   	// #8
    3364:	mov	w5, #0x0                   	// #0
    3368:	mov	w2, w4
    336c:	mov	w3, #0xf                   	// #15
    3370:	b	30b8 <deflateInit2_>
    3374:	nop

0000000000003378 <deflateCopy>:
    3378:	cbz	x1, 3550 <deflateCopy+0x1d8>
    337c:	ldr	x6, [x1, #64]
    3380:	mov	x5, x1
    3384:	cbz	x6, 3550 <deflateCopy+0x1d8>
    3388:	stp	x29, x30, [sp, #-48]!
    338c:	mov	x29, sp
    3390:	stp	x21, x22, [sp, #32]
    3394:	mov	x21, x0
    3398:	ldr	x0, [x1, #72]
    339c:	cbz	x0, 3558 <deflateCopy+0x1e0>
    33a0:	mov	x0, x1
    33a4:	bl	1480 <deflateStateCheck.part.0>
    33a8:	cmp	w0, #0x0
    33ac:	ccmp	x21, #0x0, #0x4, eq  // eq = none
    33b0:	b.eq	3558 <deflateCopy+0x1e0>  // b.none
    33b4:	stp	x19, x20, [sp, #16]
    33b8:	mov	w2, #0x1740                	// #5952
    33bc:	ldp	x0, x1, [x5]
    33c0:	ldr	x22, [x5, #56]
    33c4:	stp	x0, x1, [x21]
    33c8:	mov	w1, #0x1                   	// #1
    33cc:	ldp	x8, x9, [x5, #16]
    33d0:	stp	x8, x9, [x21, #16]
    33d4:	ldp	x8, x9, [x5, #32]
    33d8:	stp	x8, x9, [x21, #32]
    33dc:	ldp	x8, x9, [x5, #48]
    33e0:	stp	x8, x9, [x21, #48]
    33e4:	ldp	x8, x9, [x5, #64]
    33e8:	stp	x8, x9, [x21, #64]
    33ec:	ldp	x8, x9, [x5, #80]
    33f0:	stp	x8, x9, [x21, #80]
    33f4:	ldp	x4, x5, [x5, #96]
    33f8:	stp	x4, x5, [x21, #96]
    33fc:	ldr	x0, [x21, #80]
    3400:	blr	x6
    3404:	mov	x19, x0
    3408:	cbz	x0, 357c <deflateCopy+0x204>
    340c:	str	x0, [x21, #56]
    3410:	mov	x1, x22
    3414:	mov	x2, #0x1740                	// #5952
    3418:	bl	0 <memcpy>
    341c:	ldr	w1, [x19, #80]
    3420:	mov	w2, #0x2                   	// #2
    3424:	ldr	x3, [x21, #64]
    3428:	ldr	x0, [x21, #80]
    342c:	str	x21, [x19]
    3430:	blr	x3
    3434:	ldr	w1, [x19, #80]
    3438:	mov	w2, #0x2                   	// #2
    343c:	ldr	x3, [x21, #64]
    3440:	str	x0, [x19, #96]
    3444:	ldr	x0, [x21, #80]
    3448:	blr	x3
    344c:	ldr	w1, [x19, #132]
    3450:	mov	w2, #0x2                   	// #2
    3454:	ldr	x3, [x21, #64]
    3458:	str	x0, [x19, #112]
    345c:	ldr	x0, [x21, #80]
    3460:	blr	x3
    3464:	ldr	w1, [x19, #5896]
    3468:	mov	w2, #0x4                   	// #4
    346c:	ldr	x3, [x21, #64]
    3470:	str	x0, [x19, #120]
    3474:	ldr	x0, [x21, #80]
    3478:	blr	x3
    347c:	mov	x20, x0
    3480:	ldr	x0, [x19, #96]
    3484:	str	x20, [x19, #16]
    3488:	cbz	x0, 3568 <deflateCopy+0x1f0>
    348c:	ldr	x1, [x19, #112]
    3490:	cbz	x1, 3568 <deflateCopy+0x1f0>
    3494:	ldr	x1, [x19, #120]
    3498:	cmp	x1, #0x0
    349c:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    34a0:	b.eq	3568 <deflateCopy+0x1f0>  // b.none
    34a4:	ldr	x1, [x22, #96]
    34a8:	ldr	w2, [x19, #80]
    34ac:	lsl	w2, w2, #1
    34b0:	bl	0 <memcpy>
    34b4:	ldr	x0, [x19, #112]
    34b8:	ldr	x1, [x22, #112]
    34bc:	ldr	w2, [x19, #80]
    34c0:	lsl	x2, x2, #1
    34c4:	bl	0 <memcpy>
    34c8:	ldr	x0, [x19, #120]
    34cc:	ldr	x1, [x22, #120]
    34d0:	ldr	w2, [x19, #132]
    34d4:	lsl	x2, x2, #1
    34d8:	bl	0 <memcpy>
    34dc:	ldr	w2, [x19, #24]
    34e0:	ldr	x0, [x19, #16]
    34e4:	ldr	x1, [x22, #16]
    34e8:	bl	0 <memcpy>
    34ec:	ldr	w1, [x19, #5896]
    34f0:	ldr	x4, [x22, #16]
    34f4:	and	x0, x1, #0xfffffffe
    34f8:	ldr	x3, [x22, #32]
    34fc:	ubfiz	x5, x1, #1, #32
    3500:	ldr	x2, [x19, #16]
    3504:	add	x20, x20, x0
    3508:	sub	x3, x3, x4
    350c:	add	x1, x5, w1, uxtw
    3510:	add	x1, x2, x1
    3514:	add	x5, x19, #0xd4
    3518:	add	x2, x2, x3
    351c:	add	x4, x19, #0x9c8
    3520:	add	x3, x19, #0xabc
    3524:	str	x2, [x19, #32]
    3528:	str	x5, [x19, #2904]
    352c:	mov	w0, #0x0                   	// #0
    3530:	str	x4, [x19, #2928]
    3534:	str	x3, [x19, #2952]
    3538:	str	x1, [x19, #5888]
    353c:	str	x20, [x19, #5904]
    3540:	ldp	x19, x20, [sp, #16]
    3544:	ldp	x21, x22, [sp, #32]
    3548:	ldp	x29, x30, [sp], #48
    354c:	ret
    3550:	mov	w0, #0xfffffffe            	// #-2
    3554:	ret
    3558:	mov	w0, #0xfffffffe            	// #-2
    355c:	ldp	x21, x22, [sp, #32]
    3560:	ldp	x29, x30, [sp], #48
    3564:	ret
    3568:	mov	x0, x21
    356c:	bl	2ff0 <deflateEnd>
    3570:	mov	w0, #0xfffffffc            	// #-4
    3574:	ldp	x19, x20, [sp, #16]
    3578:	b	3544 <deflateCopy+0x1cc>
    357c:	mov	w0, #0xfffffffc            	// #-4
    3580:	ldp	x19, x20, [sp, #16]
    3584:	b	3544 <deflateCopy+0x1cc>

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
   0:	cbz	x3, ec <inflateBackInit_+0xec>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	w20, w1
  14:	mov	x19, x0
  18:	ldrb	w1, [x3]
  1c:	mov	w0, #0x70                  	// #112
  20:	cmp	w1, #0x31
  24:	ccmp	w4, w0, #0x0, eq  // eq = none
  28:	b.ne	d8 <inflateBackInit_+0xd8>  // b.any
  2c:	str	x21, [sp, #32]
  30:	cmp	x19, #0x0
  34:	mov	x21, x2
  38:	ccmp	x2, #0x0, #0x4, ne  // ne = any
  3c:	b.eq	e0 <inflateBackInit_+0xe0>  // b.none
  40:	sub	w0, w20, #0x8
  44:	cmp	w0, #0x7
  48:	b.hi	e0 <inflateBackInit_+0xe0>  // b.pmore
  4c:	ldr	x3, [x19, #64]
  50:	str	xzr, [x19, #48]
  54:	cbz	x3, a8 <inflateBackInit_+0xa8>
  58:	ldr	x1, [x19, #72]
  5c:	ldr	x0, [x19, #80]
  60:	cbz	x1, c8 <inflateBackInit_+0xc8>
  64:	mov	w2, #0x1bf8                	// #7160
  68:	mov	w1, #0x1                   	// #1
  6c:	blr	x3
  70:	mov	x3, x0
  74:	cbz	x0, f4 <inflateBackInit_+0xf4>
  78:	str	x3, [x19, #56]
  7c:	mov	w1, #0x1                   	// #1
  80:	stp	xzr, x21, [x3, #64]
  84:	lsl	w1, w1, w20
  88:	mov	w2, #0x8000                	// #32768
  8c:	ldr	x21, [sp, #32]
  90:	mov	w0, #0x0                   	// #0
  94:	str	w2, [x3, #28]
  98:	stp	w20, w1, [x3, #56]
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret
  a8:	adrp	x1, 0 <zcalloc>
  ac:	add	x1, x1, #0x0
  b0:	mov	x3, x1
  b4:	str	x1, [x19, #64]
  b8:	ldr	x1, [x19, #72]
  bc:	str	xzr, [x19, #80]
  c0:	mov	x0, #0x0                   	// #0
  c4:	cbnz	x1, 64 <inflateBackInit_+0x64>
  c8:	adrp	x1, 0 <zcfree>
  cc:	add	x1, x1, #0x0
  d0:	str	x1, [x19, #72]
  d4:	b	64 <inflateBackInit_+0x64>
  d8:	mov	w0, #0xfffffffa            	// #-6
  dc:	b	9c <inflateBackInit_+0x9c>
  e0:	mov	w0, #0xfffffffe            	// #-2
  e4:	ldr	x21, [sp, #32]
  e8:	b	9c <inflateBackInit_+0x9c>
  ec:	mov	w0, #0xfffffffa            	// #-6
  f0:	ret
  f4:	mov	w0, #0xfffffffc            	// #-4
  f8:	ldr	x21, [sp, #32]
  fc:	b	9c <inflateBackInit_+0x9c>

0000000000000100 <inflateBack>:
 100:	stp	x29, x30, [sp, #-192]!
 104:	mov	x29, sp
 108:	stp	x3, x4, [sp, #104]
 10c:	cbz	x0, 9e8 <inflateBack+0x8e8>
 110:	stp	x23, x24, [sp, #48]
 114:	ldr	x23, [x0, #56]
 118:	stp	x25, x26, [sp, #64]
 11c:	mov	x25, x0
 120:	cbz	x23, 9d8 <inflateBack+0x8d8>
 124:	stp	x19, x20, [sp, #16]
 128:	mov	x0, #0x3f3f                	// #16191
 12c:	mov	x19, x1
 130:	stp	x21, x22, [sp, #32]
 134:	mov	x24, x2
 138:	mov	w22, #0x0                   	// #0
 13c:	stp	x27, x28, [sp, #80]
 140:	str	xzr, [x25, #48]
 144:	str	x0, [x23, #8]
 148:	str	wzr, [x23, #64]
 14c:	ldr	x0, [x25]
 150:	str	x0, [sp, #184]
 154:	cbz	x0, 15c <inflateBack+0x5c>
 158:	ldr	w22, [x25, #8]
 15c:	adrp	x21, 0 <inflateBackInit_>
 160:	add	x21, x21, #0x0
 164:	add	x0, x21, #0x880
 168:	ldr	w20, [x23, #60]
 16c:	str	x0, [sp, #120]
 170:	mov	w1, #0x3f3f                	// #16191
 174:	ldr	x0, [x23, #72]
 178:	mov	w27, #0x0                   	// #0
 17c:	mov	x28, #0x0                   	// #0
 180:	str	x0, [sp, #96]
 184:	mov	w0, #0x3f48                	// #16200
 188:	cmp	w1, w0
 18c:	b.eq	248 <inflateBack+0x148>  // b.none
 190:	b.hi	2ec <inflateBack+0x1ec>  // b.pmore
 194:	mov	w0, #0x3f41                	// #16193
 198:	cmp	w1, w0
 19c:	b.eq	368 <inflateBack+0x268>  // b.none
 1a0:	mov	w0, #0x3f44                	// #16196
 1a4:	cmp	w1, w0
 1a8:	b.eq	1e8 <inflateBack+0xe8>  // b.none
 1ac:	b	2bc <inflateBack+0x1bc>
 1b0:	add	x1, sp, #0xb8
 1b4:	mov	x0, x24
 1b8:	cbnz	w22, 1c8 <inflateBack+0xc8>
 1bc:	blr	x19
 1c0:	mov	w22, w0
 1c4:	cbz	w0, 418 <inflateBack+0x318>
 1c8:	ldr	x0, [sp, #184]
 1cc:	sub	w22, w22, #0x1
 1d0:	add	x1, x0, #0x1
 1d4:	str	x1, [sp, #184]
 1d8:	ldrb	w0, [x0]
 1dc:	lsl	x0, x0, x27
 1e0:	add	w27, w27, #0x8
 1e4:	add	x28, x28, x0
 1e8:	cmp	w27, #0xd
 1ec:	b.ls	1b0 <inflateBack+0xb0>  // b.plast
 1f0:	and	w1, w28, #0x1f
 1f4:	ubfx	w0, w28, #5, #5
 1f8:	ubfx	w2, w28, #10, #4
 1fc:	add	w1, w1, #0x101
 200:	add	w0, w0, #0x1
 204:	add	w2, w2, #0x4
 208:	stp	w2, w1, [x23, #128]
 20c:	cmp	w1, #0x11e
 210:	str	w0, [x23, #136]
 214:	sub	w27, w27, #0xe
 218:	ccmp	w0, #0x1e, #0x2, ls  // ls = plast
 21c:	lsr	x28, x28, #14
 220:	b.ls	610 <inflateBack+0x510>  // b.plast
 224:	adrp	x0, 0 <inflateBackInit_>
 228:	add	x0, x0, #0x0
 22c:	str	x0, [x25, #48]
 230:	mov	w0, #0x3f51                	// #16209
 234:	str	w0, [x23, #8]
 238:	mov	w1, w0
 23c:	mov	w0, #0x3f48                	// #16200
 240:	cmp	w1, w0
 244:	b.ne	190 <inflateBack+0x90>  // b.any
 248:	cmp	w20, #0x101
 24c:	ccmp	w22, #0x5, #0x0, hi  // hi = pmore
 250:	b.ls	4b0 <inflateBack+0x3b0>  // b.plast
 254:	ldr	x0, [sp, #184]
 258:	ldr	w1, [x23, #60]
 25c:	str	x0, [x25]
 260:	ldr	x0, [sp, #96]
 264:	str	w22, [x25, #8]
 268:	str	x0, [x25, #24]
 26c:	str	w20, [x25, #32]
 270:	ldr	w0, [x23, #64]
 274:	str	x28, [x23, #80]
 278:	str	w27, [x23, #88]
 27c:	cmp	w0, w1
 280:	b.cs	28c <inflateBack+0x18c>  // b.hs, b.nlast
 284:	sub	w20, w1, w20
 288:	str	w20, [x23, #64]
 28c:	mov	x0, x25
 290:	bl	0 <inflate_fast>
 294:	ldr	x0, [x25]
 298:	str	x0, [sp, #184]
 29c:	ldr	x0, [x25, #24]
 2a0:	str	x0, [sp, #96]
 2a4:	ldr	w1, [x23, #8]
 2a8:	ldr	w27, [x23, #88]
 2ac:	ldr	w22, [x25, #8]
 2b0:	ldr	w20, [x25, #32]
 2b4:	ldr	x28, [x23, #80]
 2b8:	b	184 <inflateBack+0x84>
 2bc:	mov	w0, #0x3f3f                	// #16191
 2c0:	cmp	w1, w0
 2c4:	b.ne	35c <inflateBack+0x25c>  // b.any
 2c8:	ldr	w0, [x23, #12]
 2cc:	cbz	w0, 434 <inflateBack+0x334>
 2d0:	and	w0, w27, #0x7
 2d4:	mov	w2, #0x3f50                	// #16208
 2d8:	and	w27, w27, #0xfffffff8
 2dc:	mov	w1, w2
 2e0:	lsr	x28, x28, x0
 2e4:	str	w2, [x23, #8]
 2e8:	b	184 <inflateBack+0x84>
 2ec:	mov	w0, #0x3f50                	// #16208
 2f0:	cmp	w1, w0
 2f4:	b.eq	330 <inflateBack+0x230>  // b.none
 2f8:	mov	w0, #0x3f51                	// #16209
 2fc:	cmp	w1, w0
 300:	b.ne	35c <inflateBack+0x25c>  // b.any
 304:	ldr	x1, [sp, #184]
 308:	mov	w0, #0xfffffffd            	// #-3
 30c:	ldp	x19, x20, [sp, #16]
 310:	ldp	x23, x24, [sp, #48]
 314:	ldp	x27, x28, [sp, #80]
 318:	str	x1, [x25]
 31c:	str	w22, [x25, #8]
 320:	ldp	x21, x22, [sp, #32]
 324:	ldp	x25, x26, [sp, #64]
 328:	ldp	x29, x30, [sp], #192
 32c:	ret
 330:	ldr	w2, [x23, #60]
 334:	cmp	w2, w20
 338:	b.ls	428 <inflateBack+0x328>  // b.plast
 33c:	ldp	x3, x0, [sp, #104]
 340:	sub	w2, w2, w20
 344:	ldr	x1, [x23, #72]
 348:	blr	x3
 34c:	cbz	w0, 428 <inflateBack+0x328>
 350:	mov	w0, #0xfffffffb            	// #-5
 354:	ldr	x1, [sp, #184]
 358:	b	30c <inflateBack+0x20c>
 35c:	mov	w0, #0xfffffffe            	// #-2
 360:	ldr	x1, [sp, #184]
 364:	b	30c <inflateBack+0x20c>
 368:	and	w0, w27, #0x7
 36c:	and	w27, w27, #0xfffffff8
 370:	cmp	w27, #0x1f
 374:	lsr	x28, x28, x0
 378:	b.hi	3c0 <inflateBack+0x2c0>  // b.pmore
 37c:	nop
 380:	add	x1, sp, #0xb8
 384:	mov	x0, x24
 388:	cbnz	w22, 398 <inflateBack+0x298>
 38c:	blr	x19
 390:	mov	w22, w0
 394:	cbz	w0, 418 <inflateBack+0x318>
 398:	ldr	x0, [sp, #184]
 39c:	sub	w22, w22, #0x1
 3a0:	add	x1, x0, #0x1
 3a4:	str	x1, [sp, #184]
 3a8:	ldrb	w0, [x0]
 3ac:	lsl	x0, x0, x27
 3b0:	add	w27, w27, #0x8
 3b4:	add	x28, x28, x0
 3b8:	cmp	w27, #0x1f
 3bc:	b.ls	380 <inflateBack+0x280>  // b.plast
 3c0:	lsr	x0, x28, #16
 3c4:	and	x1, x28, #0xffff
 3c8:	eor	x0, x0, #0xffff
 3cc:	cmp	x0, w28, uxth
 3d0:	b.eq	3f0 <inflateBack+0x2f0>  // b.none
 3d4:	adrp	x0, 0 <inflateBackInit_>
 3d8:	add	x0, x0, #0x0
 3dc:	str	x0, [x25, #48]
 3e0:	mov	w0, #0x3f51                	// #16209
 3e4:	mov	w1, w0
 3e8:	str	w0, [x23, #8]
 3ec:	b	184 <inflateBack+0x84>
 3f0:	str	w1, [x23, #92]
 3f4:	mov	w26, w1
 3f8:	cbz	x1, 5f8 <inflateBack+0x4f8>
 3fc:	nop
 400:	add	x1, sp, #0xb8
 404:	mov	x0, x24
 408:	cbnz	w22, 580 <inflateBack+0x480>
 40c:	blr	x19
 410:	mov	w22, w0
 414:	cbnz	w0, 580 <inflateBack+0x480>
 418:	mov	x1, #0x0                   	// #0
 41c:	mov	w0, #0xfffffffb            	// #-5
 420:	mov	w22, #0x0                   	// #0
 424:	b	30c <inflateBack+0x20c>
 428:	mov	w0, #0x1                   	// #1
 42c:	ldr	x1, [sp, #184]
 430:	b	30c <inflateBack+0x20c>
 434:	cmp	w27, #0x2
 438:	b.hi	474 <inflateBack+0x374>  // b.pmore
 43c:	cbnz	w22, 454 <inflateBack+0x354>
 440:	add	x1, sp, #0xb8
 444:	mov	x0, x24
 448:	blr	x19
 44c:	mov	w22, w0
 450:	cbz	w0, 418 <inflateBack+0x318>
 454:	ldr	x0, [sp, #184]
 458:	sub	w22, w22, #0x1
 45c:	add	x1, x0, #0x1
 460:	str	x1, [sp, #184]
 464:	ldrb	w0, [x0]
 468:	lsl	x0, x0, x27
 46c:	add	w27, w27, #0x8
 470:	add	x28, x28, x0
 474:	and	w0, w28, #0x1
 478:	str	w0, [x23, #12]
 47c:	ubfx	w0, w28, #1, #2
 480:	cmp	w0, #0x2
 484:	b.eq	570 <inflateBack+0x470>  // b.none
 488:	cmp	w0, #0x3
 48c:	b.eq	7a0 <inflateBack+0x6a0>  // b.none
 490:	cmp	w0, #0x1
 494:	b.eq	77c <inflateBack+0x67c>  // b.none
 498:	mov	w0, #0x3f41                	// #16193
 49c:	mov	w1, w0
 4a0:	str	w0, [x23, #8]
 4a4:	lsr	x28, x28, #3
 4a8:	sub	w27, w27, #0x3
 4ac:	b	184 <inflateBack+0x84>
 4b0:	ldr	w4, [x23, #120]
 4b4:	mov	w1, #0xffffffff            	// #-1
 4b8:	ldr	x3, [x23, #104]
 4bc:	lsl	w0, w1, w4
 4c0:	bic	w0, w28, w0
 4c4:	lsl	x0, x0, #2
 4c8:	add	x2, x3, x0
 4cc:	ldrb	w26, [x2, #1]
 4d0:	cmp	w27, w26
 4d4:	b.cs	9f0 <inflateBack+0x8f0>  // b.hs, b.nlast
 4d8:	mov	w5, w1
 4dc:	nop
 4e0:	add	x1, sp, #0xb8
 4e4:	mov	x0, x24
 4e8:	cbnz	w22, 504 <inflateBack+0x404>
 4ec:	blr	x19
 4f0:	mov	w22, w0
 4f4:	cbz	w0, 418 <inflateBack+0x318>
 4f8:	ldr	w4, [x23, #120]
 4fc:	mov	w5, #0xffffffff            	// #-1
 500:	ldr	x3, [x23, #104]
 504:	lsl	w0, w5, w4
 508:	ldr	x1, [sp, #184]
 50c:	sub	w22, w22, #0x1
 510:	add	x2, x1, #0x1
 514:	str	x2, [sp, #184]
 518:	ldrb	w1, [x1]
 51c:	lsl	x1, x1, x27
 520:	add	x28, x28, x1
 524:	bic	w0, w28, w0
 528:	add	w27, w27, #0x8
 52c:	add	x0, x3, x0, lsl #2
 530:	ldrb	w26, [x0, #1]
 534:	cmp	w26, w27
 538:	b.hi	4e0 <inflateBack+0x3e0>  // b.pmore
 53c:	ldrb	w1, [x0]
 540:	ldrh	w5, [x0, #2]
 544:	cbz	w1, 728 <inflateBack+0x628>
 548:	tst	w1, #0xf0
 54c:	b.eq	7dc <inflateBack+0x6dc>  // b.none
 550:	sub	w27, w27, w26
 554:	lsr	x28, x28, x26
 558:	str	w5, [x23, #92]
 55c:	tbz	w1, #5, 7bc <inflateBack+0x6bc>
 560:	mov	w0, #0x3f3f                	// #16191
 564:	mov	w1, w0
 568:	str	w0, [x23, #8]
 56c:	b	184 <inflateBack+0x84>
 570:	mov	w0, #0x3f44                	// #16196
 574:	mov	w1, w0
 578:	str	w0, [x23, #8]
 57c:	b	4a4 <inflateBack+0x3a4>
 580:	cbnz	w20, 5a4 <inflateBack+0x4a4>
 584:	ldp	x3, x0, [sp, #104]
 588:	ldr	x1, [x23, #72]
 58c:	str	x1, [sp, #96]
 590:	ldr	w20, [x23, #60]
 594:	str	w20, [x23, #64]
 598:	mov	w2, w20
 59c:	blr	x3
 5a0:	cbnz	w0, 350 <inflateBack+0x250>
 5a4:	cmp	w22, w20
 5a8:	csel	w27, w22, w20, ls  // ls = plast
 5ac:	ldr	x0, [sp, #96]
 5b0:	cmp	w27, w26
 5b4:	ldr	x1, [sp, #184]
 5b8:	csel	w28, w27, w26, ls  // ls = plast
 5bc:	mov	x2, x28
 5c0:	csel	w27, w27, w26, ls  // ls = plast
 5c4:	sub	w22, w22, w27
 5c8:	sub	w20, w20, w27
 5cc:	bl	0 <memcpy>
 5d0:	ldr	w26, [x23, #92]
 5d4:	ldr	x0, [sp, #184]
 5d8:	sub	w26, w26, w27
 5dc:	str	w26, [x23, #92]
 5e0:	add	x0, x0, x28
 5e4:	str	x0, [sp, #184]
 5e8:	ldr	x0, [sp, #96]
 5ec:	add	x0, x0, x28
 5f0:	str	x0, [sp, #96]
 5f4:	cbnz	w26, 400 <inflateBack+0x300>
 5f8:	mov	w0, #0x3f3f                	// #16191
 5fc:	mov	w27, #0x0                   	// #0
 600:	mov	w1, w0
 604:	mov	x28, #0x0                   	// #0
 608:	str	w0, [x23, #8]
 60c:	b	184 <inflateBack+0x84>
 610:	str	wzr, [x23, #140]
 614:	add	x1, sp, #0xb8
 618:	mov	x0, x24
 61c:	cmp	w27, #0x2
 620:	b.hi	654 <inflateBack+0x554>  // b.pmore
 624:	cbnz	w22, 634 <inflateBack+0x534>
 628:	blr	x19
 62c:	mov	w22, w0
 630:	cbz	w0, 418 <inflateBack+0x318>
 634:	ldr	x0, [sp, #184]
 638:	sub	w22, w22, #0x1
 63c:	add	x1, x0, #0x1
 640:	str	x1, [sp, #184]
 644:	ldrb	w0, [x0]
 648:	lsl	x0, x0, x27
 64c:	add	w27, w27, #0x8
 650:	add	x28, x28, x0
 654:	ldr	w1, [x23, #140]
 658:	and	w2, w28, #0x7
 65c:	ldr	w3, [x23, #128]
 660:	sub	w27, w27, #0x3
 664:	add	w0, w1, #0x1
 668:	str	w0, [x23, #140]
 66c:	cmp	w0, w3
 670:	lsr	x28, x28, #3
 674:	ldr	x3, [sp, #120]
 678:	ldrh	w1, [x3, w1, uxtw #1]
 67c:	add	x1, x23, x1, lsl #1
 680:	strh	w2, [x1, #152]
 684:	b.cc	614 <inflateBack+0x514>  // b.lo, b.ul, b.last
 688:	cmp	w0, #0x12
 68c:	b.hi	6c8 <inflateBack+0x5c8>  // b.pmore
 690:	ldr	x3, [sp, #120]
 694:	mov	w2, #0x12                  	// #18
 698:	sub	w2, w2, w0
 69c:	add	x1, x21, #0x882
 6a0:	add	x2, x2, w0, uxtw
 6a4:	add	x0, x3, w0, uxtw #1
 6a8:	add	x2, x1, x2, lsl #1
 6ac:	ldrh	w1, [x0], #2
 6b0:	cmp	x2, x0
 6b4:	add	x1, x23, x1, lsl #1
 6b8:	strh	wzr, [x1, #152]
 6bc:	b.ne	6ac <inflateBack+0x5ac>  // b.any
 6c0:	mov	w0, #0x13                  	// #19
 6c4:	str	w0, [x23, #140]
 6c8:	add	x2, x23, #0x558
 6cc:	mov	w0, #0x7                   	// #7
 6d0:	str	x2, [x23, #104]
 6d4:	add	x1, x23, #0x98
 6d8:	str	w0, [x23, #120]
 6dc:	add	x0, x23, #0x318
 6e0:	str	x2, [x23, #144]
 6e4:	add	x3, x23, #0x90
 6e8:	add	x4, x23, #0x78
 6ec:	mov	x5, x0
 6f0:	stp	x1, x3, [sp, #128]
 6f4:	stp	x0, x2, [sp, #144]
 6f8:	mov	w2, #0x13                  	// #19
 6fc:	mov	w0, #0x0                   	// #0
 700:	str	x4, [sp, #160]
 704:	bl	0 <inflate_table>
 708:	cbz	w0, c10 <inflateBack+0xb10>
 70c:	adrp	x0, 0 <inflateBackInit_>
 710:	add	x0, x0, #0x0
 714:	str	x0, [x25, #48]
 718:	mov	w0, #0x3f51                	// #16209
 71c:	mov	w1, w0
 720:	str	w0, [x23, #8]
 724:	b	184 <inflateBack+0x84>
 728:	sub	w27, w27, w26
 72c:	lsr	x28, x28, x26
 730:	str	w5, [x23, #92]
 734:	cbnz	w20, 758 <inflateBack+0x658>
 738:	ldp	x3, x0, [sp, #104]
 73c:	ldr	x1, [x23, #72]
 740:	str	x1, [sp, #96]
 744:	ldr	w20, [x23, #60]
 748:	str	w20, [x23, #64]
 74c:	mov	w2, w20
 750:	blr	x3
 754:	cbnz	w0, 350 <inflateBack+0x250>
 758:	ldr	x2, [sp, #96]
 75c:	mov	w0, #0x3f48                	// #16200
 760:	ldr	w3, [x23, #92]
 764:	sub	w20, w20, #0x1
 768:	mov	w1, w0
 76c:	strb	w3, [x2], #1
 770:	str	w0, [x23, #8]
 774:	str	x2, [sp, #96]
 778:	b	184 <inflateBack+0x84>
 77c:	mov	x3, #0x9                   	// #9
 780:	mov	w2, #0x3f48                	// #16200
 784:	add	x0, x21, #0x800
 788:	movk	x3, #0x5, lsl #32
 78c:	mov	w1, w2
 790:	str	w2, [x23, #8]
 794:	stp	x21, x0, [x23, #104]
 798:	str	x3, [x23, #120]
 79c:	b	4a4 <inflateBack+0x3a4>
 7a0:	adrp	x0, 0 <inflateBackInit_>
 7a4:	add	x0, x0, #0x0
 7a8:	str	x0, [x25, #48]
 7ac:	mov	w2, #0x3f51                	// #16209
 7b0:	mov	w1, w2
 7b4:	str	w2, [x23, #8]
 7b8:	b	4a4 <inflateBack+0x3a4>
 7bc:	tbz	w1, #6, 8a0 <inflateBack+0x7a0>
 7c0:	adrp	x0, 0 <inflateBackInit_>
 7c4:	add	x0, x0, #0x0
 7c8:	str	x0, [x25, #48]
 7cc:	mov	w0, #0x3f51                	// #16209
 7d0:	mov	w1, w0
 7d4:	str	w0, [x23, #8]
 7d8:	b	184 <inflateBack+0x84>
 7dc:	add	w1, w1, w26
 7e0:	mov	w0, #0xffffffff            	// #-1
 7e4:	lsl	w1, w0, w1
 7e8:	bic	w0, w28, w1
 7ec:	mvn	w6, w1
 7f0:	lsr	w0, w0, w26
 7f4:	add	w0, w0, w5
 7f8:	lsl	x0, x0, #2
 7fc:	add	x4, x3, x0
 800:	ldrb	w2, [x4, #1]
 804:	add	w1, w2, w26
 808:	cmp	w1, w27
 80c:	b.ls	e54 <inflateBack+0xd54>  // b.plast
 810:	add	x1, sp, #0xb8
 814:	mov	x0, x24
 818:	cbnz	w22, 83c <inflateBack+0x73c>
 81c:	str	w5, [sp, #128]
 820:	str	w6, [sp, #136]
 824:	blr	x19
 828:	mov	w22, w0
 82c:	cbz	w0, 418 <inflateBack+0x318>
 830:	ldr	w5, [sp, #128]
 834:	ldr	w6, [sp, #136]
 838:	ldr	x3, [x23, #104]
 83c:	sub	w22, w22, #0x1
 840:	ldr	x0, [sp, #184]
 844:	add	x1, x0, #0x1
 848:	str	x1, [sp, #184]
 84c:	ldrb	w0, [x0]
 850:	lsl	x0, x0, x27
 854:	add	x28, x28, x0
 858:	and	w0, w6, w28
 85c:	add	w27, w27, #0x8
 860:	lsr	w0, w0, w26
 864:	add	w0, w0, w5
 868:	add	x0, x3, x0, lsl #2
 86c:	ldrb	w2, [x0, #1]
 870:	add	w1, w2, w26
 874:	cmp	w1, w27
 878:	b.hi	810 <inflateBack+0x710>  // b.pmore
 87c:	ldrb	w1, [x0]
 880:	ldrh	w0, [x0, #2]
 884:	str	w0, [x23, #92]
 888:	sub	w7, w27, w26
 88c:	lsr	x8, x28, x26
 890:	sub	w27, w7, w2
 894:	lsr	x28, x8, x2
 898:	cbnz	w1, 55c <inflateBack+0x45c>
 89c:	b	734 <inflateBack+0x634>
 8a0:	and	w1, w1, #0xf
 8a4:	str	w1, [x23, #100]
 8a8:	cbnz	w1, 9ac <inflateBack+0x8ac>
 8ac:	ldr	w4, [x23, #124]
 8b0:	mov	w26, #0xffffffff            	// #-1
 8b4:	ldr	x2, [x23, #112]
 8b8:	lsl	w0, w26, w4
 8bc:	bic	w0, w28, w0
 8c0:	lsl	x0, x0, #2
 8c4:	add	x5, x2, x0
 8c8:	ldrb	w1, [x5, #1]
 8cc:	cmp	w1, w27
 8d0:	mov	w7, w1
 8d4:	b.ls	e40 <inflateBack+0xd40>  // b.plast
 8d8:	add	x1, sp, #0xb8
 8dc:	mov	x0, x24
 8e0:	cbnz	w22, 8f8 <inflateBack+0x7f8>
 8e4:	blr	x19
 8e8:	mov	w22, w0
 8ec:	cbz	w0, 418 <inflateBack+0x318>
 8f0:	ldr	w4, [x23, #124]
 8f4:	ldr	x2, [x23, #112]
 8f8:	lsl	w0, w26, w4
 8fc:	ldr	x1, [sp, #184]
 900:	sub	w22, w22, #0x1
 904:	add	x3, x1, #0x1
 908:	str	x3, [sp, #184]
 90c:	ldrb	w1, [x1]
 910:	lsl	x1, x1, x27
 914:	add	x28, x28, x1
 918:	bic	w0, w28, w0
 91c:	add	w27, w27, #0x8
 920:	add	x0, x2, x0, lsl #2
 924:	ldrb	w1, [x0, #1]
 928:	cmp	w1, w27
 92c:	mov	w7, w1
 930:	b.hi	8d8 <inflateBack+0x7d8>  // b.pmore
 934:	ldrb	w3, [x0]
 938:	ldrh	w26, [x0, #2]
 93c:	tst	w3, #0xf0
 940:	mov	w6, w1
 944:	b.eq	b54 <inflateBack+0xa54>  // b.none
 948:	sub	w27, w27, w1
 94c:	lsr	x28, x28, x1
 950:	tbz	w3, #6, 9fc <inflateBack+0x8fc>
 954:	adrp	x0, 0 <inflateBackInit_>
 958:	add	x0, x0, #0x0
 95c:	str	x0, [x25, #48]
 960:	mov	w0, #0x3f51                	// #16209
 964:	mov	w1, w0
 968:	str	w0, [x23, #8]
 96c:	b	184 <inflateBack+0x84>
 970:	add	x1, sp, #0xb8
 974:	mov	x0, x24
 978:	cbnz	w22, 988 <inflateBack+0x888>
 97c:	blr	x19
 980:	mov	w22, w0
 984:	cbz	w0, 418 <inflateBack+0x318>
 988:	ldr	x0, [sp, #184]
 98c:	sub	w22, w22, #0x1
 990:	ldr	w1, [x23, #100]
 994:	add	x2, x0, #0x1
 998:	str	x2, [sp, #184]
 99c:	ldrb	w0, [x0]
 9a0:	lsl	x0, x0, x27
 9a4:	add	w27, w27, #0x8
 9a8:	add	x28, x28, x0
 9ac:	cmp	w1, w27
 9b0:	b.hi	970 <inflateBack+0x870>  // b.pmore
 9b4:	ldr	w2, [x23, #92]
 9b8:	mov	w0, #0xffffffff            	// #-1
 9bc:	lsl	w0, w0, w1
 9c0:	bic	w0, w28, w0
 9c4:	add	w0, w2, w0
 9c8:	sub	w27, w27, w1
 9cc:	lsr	x28, x28, x1
 9d0:	str	w0, [x23, #92]
 9d4:	b	8ac <inflateBack+0x7ac>
 9d8:	mov	w0, #0xfffffffe            	// #-2
 9dc:	ldp	x23, x24, [sp, #48]
 9e0:	ldp	x25, x26, [sp, #64]
 9e4:	b	328 <inflateBack+0x228>
 9e8:	mov	w0, #0xfffffffe            	// #-2
 9ec:	b	328 <inflateBack+0x228>
 9f0:	ldrb	w1, [x3, x0]
 9f4:	ldrh	w5, [x2, #2]
 9f8:	b	544 <inflateBack+0x444>
 9fc:	and	w0, w3, #0xf
 a00:	stp	w26, w0, [x23, #96]
 a04:	cbnz	w0, a78 <inflateBack+0x978>
 a08:	ldp	w2, w0, [x23, #60]
 a0c:	cmp	w2, w0
 a10:	csel	w0, w20, wzr, hi  // hi = pmore
 a14:	sub	w0, w2, w0
 a18:	cmp	w0, w26
 a1c:	b.cs	ab8 <inflateBack+0x9b8>  // b.hs, b.nlast
 a20:	adrp	x0, 0 <inflateBackInit_>
 a24:	add	x0, x0, #0x0
 a28:	str	x0, [x25, #48]
 a2c:	mov	w0, #0x3f51                	// #16209
 a30:	mov	w1, w0
 a34:	str	w0, [x23, #8]
 a38:	b	184 <inflateBack+0x84>
 a3c:	add	x1, sp, #0xb8
 a40:	mov	x0, x24
 a44:	cbnz	w22, a54 <inflateBack+0x954>
 a48:	blr	x19
 a4c:	mov	w22, w0
 a50:	cbz	w0, 418 <inflateBack+0x318>
 a54:	ldr	x1, [sp, #184]
 a58:	sub	w22, w22, #0x1
 a5c:	ldr	w0, [x23, #100]
 a60:	add	x2, x1, #0x1
 a64:	str	x2, [sp, #184]
 a68:	ldrb	w1, [x1]
 a6c:	lsl	x1, x1, x27
 a70:	add	w27, w27, #0x8
 a74:	add	x28, x28, x1
 a78:	cmp	w0, w27
 a7c:	b.hi	a3c <inflateBack+0x93c>  // b.pmore
 a80:	ldr	w1, [x23, #96]
 a84:	mov	w26, #0xffffffff            	// #-1
 a88:	lsl	w26, w26, w0
 a8c:	bic	w26, w28, w26
 a90:	add	w26, w26, w1
 a94:	sub	w27, w27, w0
 a98:	lsr	x28, x28, x0
 a9c:	str	w26, [x23, #96]
 aa0:	b	a08 <inflateBack+0x908>
 aa4:	ldr	w0, [x23, #92]
 aa8:	add	x1, x6, x5
 aac:	str	x1, [sp, #96]
 ab0:	cbz	w0, e4c <inflateBack+0xd4c>
 ab4:	ldr	w2, [x23, #60]
 ab8:	mov	w26, w2
 abc:	cbnz	w20, ae4 <inflateBack+0x9e4>
 ac0:	ldr	x0, [x23, #72]
 ac4:	str	w2, [x23, #64]
 ac8:	mov	x1, x0
 acc:	str	x1, [sp, #96]
 ad0:	ldp	x3, x0, [sp, #104]
 ad4:	blr	x3
 ad8:	cbnz	w0, 350 <inflateBack+0x250>
 adc:	mov	w20, w26
 ae0:	ldr	w26, [x23, #60]
 ae4:	ldr	w3, [x23, #96]
 ae8:	sub	w0, w26, w3
 aec:	cmp	w20, w0
 af0:	b.ls	b44 <inflateBack+0xa44>  // b.plast
 af4:	ldr	x2, [sp, #96]
 af8:	add	w1, w3, w20
 afc:	sub	w1, w1, w26
 b00:	add	x3, x2, w0, uxtw
 b04:	ldr	w2, [x23, #92]
 b08:	mov	x0, #0x0                   	// #0
 b0c:	cmp	w2, w1
 b10:	csel	w1, w2, w1, ls  // ls = plast
 b14:	sub	w4, w1, #0x1
 b18:	sub	w20, w20, w1
 b1c:	add	x5, x4, #0x1
 b20:	sub	w1, w2, w1
 b24:	str	w1, [x23, #92]
 b28:	ldr	x6, [sp, #96]
 b2c:	cmp	x4, x0
 b30:	ldrb	w2, [x3, x0]
 b34:	strb	w2, [x6, x0]
 b38:	add	x0, x0, #0x1
 b3c:	b.ne	b28 <inflateBack+0xa28>  // b.any
 b40:	b	aa4 <inflateBack+0x9a4>
 b44:	ldr	x0, [sp, #96]
 b48:	mov	w1, w20
 b4c:	sub	x3, x0, w3, uxtw
 b50:	b	b04 <inflateBack+0xa04>
 b54:	add	w0, w3, w1
 b58:	mov	w3, #0xffffffff            	// #-1
 b5c:	lsl	w3, w3, w0
 b60:	bic	w0, w28, w3
 b64:	mvn	w3, w3
 b68:	lsr	w0, w0, w1
 b6c:	add	w0, w0, w26
 b70:	add	x4, x2, x0, lsl #2
 b74:	lsl	x0, x0, #2
 b78:	ldrb	w1, [x4, #1]
 b7c:	add	w5, w1, w6
 b80:	cmp	w5, w27
 b84:	b.ls	e60 <inflateBack+0xd60>  // b.plast
 b88:	add	x1, sp, #0xb8
 b8c:	mov	x0, x24
 b90:	cbnz	w22, bbc <inflateBack+0xabc>
 b94:	str	w3, [sp, #128]
 b98:	str	w7, [sp, #136]
 b9c:	str	w6, [sp, #144]
 ba0:	blr	x19
 ba4:	mov	w22, w0
 ba8:	cbz	w0, 418 <inflateBack+0x318>
 bac:	ldr	w3, [sp, #128]
 bb0:	ldr	w7, [sp, #136]
 bb4:	ldr	w6, [sp, #144]
 bb8:	ldr	x2, [x23, #112]
 bbc:	sub	w22, w22, #0x1
 bc0:	ldr	x0, [sp, #184]
 bc4:	add	x1, x0, #0x1
 bc8:	str	x1, [sp, #184]
 bcc:	ldrb	w0, [x0]
 bd0:	lsl	x0, x0, x27
 bd4:	add	x28, x28, x0
 bd8:	and	w0, w3, w28
 bdc:	add	w27, w27, #0x8
 be0:	lsr	w0, w0, w6
 be4:	add	w0, w0, w26
 be8:	add	x0, x2, x0, lsl #2
 bec:	ldrb	w1, [x0, #1]
 bf0:	add	w4, w1, w6
 bf4:	cmp	w4, w27
 bf8:	b.hi	b88 <inflateBack+0xa88>  // b.pmore
 bfc:	ldrb	w3, [x0]
 c00:	ldrh	w26, [x0, #2]
 c04:	sub	w27, w27, w7
 c08:	lsr	x28, x28, x6
 c0c:	b	948 <inflateBack+0x848>
 c10:	ldp	w2, w3, [x23, #132]
 c14:	str	wzr, [x23, #140]
 c18:	cmn	w2, w3
 c1c:	b.eq	cd8 <inflateBack+0xbd8>  // b.none
 c20:	mov	w26, #0xffffffff            	// #-1
 c24:	ldr	w4, [x23, #120]
 c28:	ldr	x3, [x23, #104]
 c2c:	lsl	w0, w26, w4
 c30:	bic	w0, w28, w0
 c34:	add	x0, x3, x0, lsl #2
 c38:	ldrb	w2, [x0, #1]
 c3c:	cmp	w2, w27
 c40:	b.ls	c9c <inflateBack+0xb9c>  // b.plast
 c44:	add	x1, sp, #0xb8
 c48:	mov	x0, x24
 c4c:	cbnz	w22, c64 <inflateBack+0xb64>
 c50:	blr	x19
 c54:	mov	w22, w0
 c58:	cbz	w0, 418 <inflateBack+0x318>
 c5c:	ldr	w4, [x23, #120]
 c60:	ldr	x3, [x23, #104]
 c64:	lsl	w0, w26, w4
 c68:	ldr	x1, [sp, #184]
 c6c:	sub	w22, w22, #0x1
 c70:	add	x2, x1, #0x1
 c74:	str	x2, [sp, #184]
 c78:	ldrb	w1, [x1]
 c7c:	lsl	x1, x1, x27
 c80:	add	x28, x28, x1
 c84:	bic	w0, w28, w0
 c88:	add	w27, w27, #0x8
 c8c:	add	x0, x3, x0, lsl #2
 c90:	ldrb	w2, [x0, #1]
 c94:	cmp	w2, w27
 c98:	b.hi	c44 <inflateBack+0xb44>  // b.pmore
 c9c:	ldrh	w1, [x0, #2]
 ca0:	cmp	w1, #0xf
 ca4:	b.hi	d08 <inflateBack+0xc08>  // b.pmore
 ca8:	ldr	w0, [x23, #140]
 cac:	sub	w27, w27, w2
 cb0:	lsr	x28, x28, x2
 cb4:	mov	w4, w0
 cb8:	add	w0, w0, #0x1
 cbc:	str	w0, [x23, #140]
 cc0:	add	x4, x23, w4, uxtw #1
 cc4:	ldp	w2, w3, [x23, #132]
 cc8:	strh	w1, [x4, #152]
 ccc:	add	w2, w2, w3
 cd0:	cmp	w0, w2
 cd4:	b.cc	c24 <inflateBack+0xb24>  // b.lo, b.ul, b.last
 cd8:	ldr	w1, [x23, #8]
 cdc:	mov	w26, #0x3f51                	// #16209
 ce0:	cmp	w1, w26
 ce4:	b.eq	184 <inflateBack+0x84>  // b.none
 ce8:	ldrh	w0, [x23, #664]
 cec:	cbnz	w0, f0c <inflateBack+0xe0c>
 cf0:	adrp	x0, 0 <inflateBackInit_>
 cf4:	add	x0, x0, #0x0
 cf8:	str	x0, [x25, #48]
 cfc:	mov	w1, w26
 d00:	str	w26, [x23, #8]
 d04:	b	184 <inflateBack+0x84>
 d08:	cmp	w1, #0x10
 d0c:	b.eq	e88 <inflateBack+0xd88>  // b.none
 d10:	cmp	w1, #0x11
 d14:	b.eq	dc4 <inflateBack+0xcc4>  // b.none
 d18:	add	w3, w2, #0x7
 d1c:	cmp	w3, w27
 d20:	b.ls	d6c <inflateBack+0xc6c>  // b.plast
 d24:	add	x1, sp, #0xb8
 d28:	mov	x0, x24
 d2c:	cbnz	w22, d44 <inflateBack+0xc44>
 d30:	stp	w2, w3, [sp, #168]
 d34:	blr	x19
 d38:	mov	w22, w0
 d3c:	ldp	w2, w3, [sp, #168]
 d40:	cbz	w0, 418 <inflateBack+0x318>
 d44:	ldr	x0, [sp, #184]
 d48:	sub	w22, w22, #0x1
 d4c:	add	x1, x0, #0x1
 d50:	str	x1, [sp, #184]
 d54:	ldrb	w0, [x0]
 d58:	lsl	x0, x0, x27
 d5c:	add	w27, w27, #0x8
 d60:	add	x28, x28, x0
 d64:	cmp	w27, w3
 d68:	b.cc	d24 <inflateBack+0xc24>  // b.lo, b.ul, b.last
 d6c:	lsr	x8, x28, x2
 d70:	sub	w7, w27, w2
 d74:	and	w1, w8, #0x7f
 d78:	ldr	w0, [x23, #140]
 d7c:	sub	w27, w7, #0x7
 d80:	add	w1, w1, #0xb
 d84:	lsr	x28, x8, #7
 d88:	mov	w4, #0x0                   	// #0
 d8c:	ldp	w2, w3, [x23, #132]
 d90:	add	w1, w0, w1
 d94:	add	w5, w2, w3
 d98:	cmp	w1, w5
 d9c:	b.hi	e6c <inflateBack+0xd6c>  // b.pmore
 da0:	and	w4, w4, #0xffff
 da4:	add	x5, x23, w0, uxtw #1
 da8:	add	w0, w0, #0x1
 dac:	cmp	w1, w0
 db0:	strh	w4, [x5, #152]
 db4:	b.ne	da4 <inflateBack+0xca4>  // b.any
 db8:	mov	w0, w1
 dbc:	str	w1, [x23, #140]
 dc0:	b	ccc <inflateBack+0xbcc>
 dc4:	add	w3, w2, #0x3
 dc8:	cmp	w3, w27
 dcc:	b.ls	e18 <inflateBack+0xd18>  // b.plast
 dd0:	add	x1, sp, #0xb8
 dd4:	mov	x0, x24
 dd8:	cbnz	w22, df0 <inflateBack+0xcf0>
 ddc:	stp	w2, w3, [sp, #168]
 de0:	blr	x19
 de4:	mov	w22, w0
 de8:	ldp	w2, w3, [sp, #168]
 dec:	cbz	w0, 418 <inflateBack+0x318>
 df0:	ldr	x0, [sp, #184]
 df4:	sub	w22, w22, #0x1
 df8:	add	x1, x0, #0x1
 dfc:	str	x1, [sp, #184]
 e00:	ldrb	w0, [x0]
 e04:	lsl	x0, x0, x27
 e08:	add	w27, w27, #0x8
 e0c:	add	x28, x28, x0
 e10:	cmp	w27, w3
 e14:	b.cc	dd0 <inflateBack+0xcd0>  // b.lo, b.ul, b.last
 e18:	lsr	x8, x28, x2
 e1c:	mov	w0, #0xfffffffd            	// #-3
 e20:	and	w1, w8, #0x7
 e24:	sub	w2, w0, w2
 e28:	add	w27, w27, w2
 e2c:	ldr	w0, [x23, #140]
 e30:	add	w1, w1, #0x3
 e34:	lsr	x28, x8, #3
 e38:	mov	w4, #0x0                   	// #0
 e3c:	b	d8c <inflateBack+0xc8c>
 e40:	ldrb	w3, [x2, x0]
 e44:	ldrh	w26, [x5, #2]
 e48:	b	93c <inflateBack+0x83c>
 e4c:	ldr	w1, [x23, #8]
 e50:	b	184 <inflateBack+0x84>
 e54:	ldrb	w1, [x3, x0]
 e58:	ldrh	w0, [x4, #2]
 e5c:	b	884 <inflateBack+0x784>
 e60:	ldrb	w3, [x2, x0]
 e64:	ldrh	w26, [x4, #2]
 e68:	b	c04 <inflateBack+0xb04>
 e6c:	adrp	x0, 0 <inflateBackInit_>
 e70:	add	x0, x0, #0x0
 e74:	str	x0, [x25, #48]
 e78:	mov	w1, #0x3f51                	// #16209
 e7c:	mov	w0, #0x3f51                	// #16209
 e80:	str	w0, [x23, #8]
 e84:	b	184 <inflateBack+0x84>
 e88:	add	w3, w2, #0x2
 e8c:	cmp	w3, w27
 e90:	b.ls	edc <inflateBack+0xddc>  // b.plast
 e94:	add	x1, sp, #0xb8
 e98:	mov	x0, x24
 e9c:	cbnz	w22, eb4 <inflateBack+0xdb4>
 ea0:	stp	w2, w3, [sp, #168]
 ea4:	blr	x19
 ea8:	mov	w22, w0
 eac:	ldp	w2, w3, [sp, #168]
 eb0:	cbz	w0, 418 <inflateBack+0x318>
 eb4:	ldr	x0, [sp, #184]
 eb8:	sub	w22, w22, #0x1
 ebc:	add	x1, x0, #0x1
 ec0:	str	x1, [sp, #184]
 ec4:	ldrb	w0, [x0]
 ec8:	lsl	x0, x0, x27
 ecc:	add	w27, w27, #0x8
 ed0:	add	x28, x28, x0
 ed4:	cmp	w27, w3
 ed8:	b.cc	e94 <inflateBack+0xd94>  // b.lo, b.ul, b.last
 edc:	ldr	w0, [x23, #140]
 ee0:	sub	w27, w27, w2
 ee4:	lsr	x28, x28, x2
 ee8:	cbz	w0, e6c <inflateBack+0xd6c>
 eec:	sub	w2, w0, #0x1
 ef0:	and	w1, w28, #0x3
 ef4:	sub	w27, w27, #0x2
 ef8:	add	w1, w1, #0x3
 efc:	add	x2, x23, x2, lsl #1
 f00:	lsr	x28, x28, #2
 f04:	ldrh	w4, [x2, #152]
 f08:	b	d8c <inflateBack+0xc8c>
 f0c:	ldp	x3, x5, [sp, #136]
 f10:	mov	w0, #0x9                   	// #9
 f14:	ldp	x1, x4, [sp, #152]
 f18:	str	x1, [x23, #104]
 f1c:	ldr	w2, [x23, #132]
 f20:	str	x1, [x23, #144]
 f24:	ldr	x1, [sp, #128]
 f28:	str	w0, [x23, #120]
 f2c:	mov	w0, #0x1                   	// #1
 f30:	bl	0 <inflate_table>
 f34:	cbz	w0, f50 <inflateBack+0xe50>
 f38:	adrp	x0, 0 <inflateBackInit_>
 f3c:	add	x0, x0, #0x0
 f40:	str	x0, [x25, #48]
 f44:	mov	w1, w26
 f48:	str	w26, [x23, #8]
 f4c:	b	184 <inflateBack+0x84>
 f50:	ldp	x6, x3, [sp, #128]
 f54:	mov	x4, x23
 f58:	ldp	w1, w2, [x23, #132]
 f5c:	ldr	x0, [x23, #144]
 f60:	str	x0, [x23, #112]
 f64:	ldr	x5, [sp, #144]
 f68:	mov	w0, #0x6                   	// #6
 f6c:	str	w0, [x4, #124]!
 f70:	add	x1, x6, x1, lsl #1
 f74:	mov	w0, #0x2                   	// #2
 f78:	bl	0 <inflate_table>
 f7c:	cbz	w0, f98 <inflateBack+0xe98>
 f80:	adrp	x0, 0 <inflateBackInit_>
 f84:	add	x0, x0, #0x0
 f88:	str	x0, [x25, #48]
 f8c:	mov	w1, w26
 f90:	str	w26, [x23, #8]
 f94:	b	184 <inflateBack+0x84>
 f98:	mov	w0, #0x3f48                	// #16200
 f9c:	str	w0, [x23, #8]
 fa0:	b	248 <inflateBack+0x148>
 fa4:	nop

0000000000000fa8 <inflateBackEnd>:
 fa8:	cbz	x0, ff0 <inflateBackEnd+0x48>
 fac:	stp	x29, x30, [sp, #-32]!
 fb0:	mov	x29, sp
 fb4:	ldr	x1, [x0, #56]
 fb8:	str	x19, [sp, #16]
 fbc:	mov	x19, x0
 fc0:	cbz	x1, fe8 <inflateBackEnd+0x40>
 fc4:	ldr	x2, [x0, #72]
 fc8:	cbz	x2, fe8 <inflateBackEnd+0x40>
 fcc:	ldr	x0, [x0, #80]
 fd0:	blr	x2
 fd4:	str	xzr, [x19, #56]
 fd8:	mov	w0, #0x0                   	// #0
 fdc:	ldr	x19, [sp, #16]
 fe0:	ldp	x29, x30, [sp], #32
 fe4:	ret
 fe8:	mov	w0, #0xfffffffe            	// #-2
 fec:	b	fdc <inflateBackEnd+0x34>
 ff0:	mov	w0, #0xfffffffe            	// #-2
 ff4:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	w13, #0x1                   	// #1
   8:	mov	w30, #0xffffffff            	// #-1
   c:	mov	x29, sp
  10:	ldr	x9, [x0, #56]
  14:	stp	x19, x20, [sp, #16]
  18:	ldr	w11, [x0, #32]
  1c:	ldr	w12, [x0, #8]
  20:	mov	w7, w13
  24:	ldp	w2, w14, [x9, #120]
  28:	sub	w1, w1, w11
  2c:	ldr	w16, [x9, #68]
  30:	sub	w12, w12, #0x5
  34:	ldp	w17, w20, [x9, #60]
  38:	sub	w11, w11, #0x101
  3c:	ldr	x8, [x0]
  40:	add	w18, w16, w30
  44:	ldr	x6, [x0, #24]
  48:	lsl	w14, w13, w14
  4c:	ldp	x19, x3, [x9, #72]
  50:	lsl	w13, w13, w2
  54:	ldp	x5, x10, [x9, #104]
  58:	add	x12, x8, x12
  5c:	ldr	w4, [x9, #88]
  60:	sub	x15, x6, x1
  64:	add	x11, x6, x11
  68:	add	w14, w14, w30
  6c:	add	w13, w13, w30
  70:	stp	x21, x22, [sp, #32]
  74:	add	x22, x18, #0x1
  78:	add	w21, w17, w16
  7c:	stp	x23, x24, [sp, #48]
  80:	cmp	w4, #0xe
  84:	b.hi	ac <inflate_fast+0xac>  // b.pmore
  88:	ldrb	w1, [x8, #1]
  8c:	add	w23, w4, #0x8
  90:	ldrb	w2, [x8]
  94:	add	x8, x8, #0x2
  98:	lsl	x1, x1, x23
  9c:	lsl	x2, x2, x4
  a0:	add	x1, x1, x2
  a4:	add	x3, x3, x1
  a8:	add	w4, w4, #0x10
  ac:	and	x1, x3, x13
  b0:	b	cc <inflate_fast+0xcc>
  b4:	tbnz	w1, #4, 174 <inflate_fast+0x174>
  b8:	tbnz	w1, #6, 2c4 <inflate_fast+0x2c4>
  bc:	lsl	w1, w7, w1
  c0:	sub	w1, w1, #0x1
  c4:	and	x1, x1, x3
  c8:	add	x1, x1, w24, uxth
  cc:	lsl	x1, x1, #2
  d0:	add	x23, x5, x1
  d4:	ldrb	w1, [x5, x1]
  d8:	ldrb	w2, [x23, #1]
  dc:	ldrh	w24, [x23, #2]
  e0:	sub	w4, w4, w2
  e4:	lsr	x3, x3, x2
  e8:	cbnz	w1, b4 <inflate_fast+0xb4>
  ec:	strb	w24, [x6], #1
  f0:	cmp	x8, x12
  f4:	ccmp	x6, x11, #0x2, cc  // cc = lo, ul, last
  f8:	b.cc	80 <inflate_fast+0x80>  // b.lo, b.ul, b.last
  fc:	lsr	w1, w4, #3
 100:	sub	x7, x11, x6
 104:	sub	x8, x8, x1
 108:	and	w4, w4, #0x7
 10c:	sub	x1, x12, x8
 110:	sub	w5, w12, w8
 114:	cmp	x12, x8
 118:	add	w1, w1, #0x5
 11c:	sub	w2, w11, w6
 120:	add	w5, w5, #0x5
 124:	csel	w5, w5, w1, ls  // ls = plast
 128:	add	w7, w7, #0x101
 12c:	cmp	x6, x11
 130:	add	w2, w2, #0x101
 134:	mov	w1, #0x1                   	// #1
 138:	csel	w2, w2, w7, cs  // cs = hs, nlast
 13c:	lsl	w1, w1, w4
 140:	sub	w1, w1, #0x1
 144:	str	x8, [x0]
 148:	and	x3, x1, x3
 14c:	str	w5, [x0, #8]
 150:	str	x6, [x0, #24]
 154:	str	w2, [x0, #32]
 158:	ldp	x19, x20, [sp, #16]
 15c:	ldp	x21, x22, [sp, #32]
 160:	ldp	x23, x24, [sp, #48]
 164:	str	x3, [x9, #80]
 168:	str	w4, [x9, #88]
 16c:	ldp	x29, x30, [sp], #96
 170:	ret
 174:	ands	w2, w1, #0xf
 178:	mov	w23, w24
 17c:	b.eq	1ac <inflate_fast+0x1ac>  // b.none
 180:	cmp	w2, w4
 184:	b.ls	198 <inflate_fast+0x198>  // b.plast
 188:	ldrb	w1, [x8], #1
 18c:	lsl	x1, x1, x4
 190:	add	w4, w4, #0x8
 194:	add	x3, x3, x1
 198:	lsl	w23, w30, w2
 19c:	bic	w23, w3, w23
 1a0:	sub	w4, w4, w2
 1a4:	add	w23, w24, w23
 1a8:	lsr	x3, x3, x2
 1ac:	cmp	w4, #0xe
 1b0:	b.ls	2d4 <inflate_fast+0x2d4>  // b.plast
 1b4:	and	x1, x14, x3
 1b8:	b	1d0 <inflate_fast+0x1d0>
 1bc:	tbnz	w1, #6, 314 <inflate_fast+0x314>
 1c0:	lsl	w1, w7, w1
 1c4:	sub	w1, w1, #0x1
 1c8:	and	x1, x1, x3
 1cc:	add	x1, x1, w24, uxth
 1d0:	lsl	x1, x1, #2
 1d4:	add	x24, x10, x1
 1d8:	ldrb	w1, [x10, x1]
 1dc:	ldrb	w2, [x24, #1]
 1e0:	ldrh	w24, [x24, #2]
 1e4:	sub	w4, w4, w2
 1e8:	lsr	x3, x3, x2
 1ec:	tbz	w1, #4, 1bc <inflate_fast+0x1bc>
 1f0:	stp	x25, x26, [sp, #64]
 1f4:	and	w2, w1, #0xf
 1f8:	cmp	w2, w4
 1fc:	b.ls	220 <inflate_fast+0x220>  // b.plast
 200:	ldrb	w1, [x8]
 204:	add	w25, w4, #0x8
 208:	cmp	w2, w25
 20c:	lsl	x1, x1, x4
 210:	add	x3, x3, x1
 214:	b.hi	3d8 <inflate_fast+0x3d8>  // b.pmore
 218:	add	x8, x8, #0x1
 21c:	mov	w4, w25
 220:	lsl	w1, w30, w2
 224:	bic	w1, w3, w1
 228:	add	w24, w1, w24
 22c:	sub	x1, x6, x15
 230:	sub	w4, w4, w2
 234:	cmp	w24, w1
 238:	lsr	x3, x3, x2
 23c:	b.ls	390 <inflate_fast+0x390>  // b.plast
 240:	sub	w25, w24, w1
 244:	cmp	w20, w25
 248:	b.cs	254 <inflate_fast+0x254>  // b.hs, b.nlast
 24c:	ldr	w2, [x9, #7144]
 250:	cbnz	w2, 450 <inflate_fast+0x450>
 254:	sub	w2, w1, w24
 258:	cbnz	w16, 32c <inflate_fast+0x32c>
 25c:	add	w1, w17, w2
 260:	cmp	w23, w25
 264:	add	x1, x19, x1
 268:	b.hi	480 <inflate_fast+0x480>  // b.pmore
 26c:	cmp	w23, #0x2
 270:	b.ls	2a4 <inflate_fast+0x2a4>  // b.plast
 274:	nop
 278:	ldrb	w2, [x1]
 27c:	add	x1, x1, #0x3
 280:	strb	w2, [x6]
 284:	add	x6, x6, #0x3
 288:	sub	w23, w23, #0x3
 28c:	ldurb	w2, [x1, #-2]
 290:	cmp	w23, #0x2
 294:	sturb	w2, [x6, #-2]
 298:	ldurb	w2, [x1, #-1]
 29c:	sturb	w2, [x6, #-1]
 2a0:	b.hi	278 <inflate_fast+0x278>  // b.pmore
 2a4:	cbz	w23, 3d0 <inflate_fast+0x3d0>
 2a8:	ldrb	w2, [x1]
 2ac:	cmp	w23, #0x2
 2b0:	strb	w2, [x6]
 2b4:	b.eq	46c <inflate_fast+0x46c>  // b.none
 2b8:	add	x6, x6, #0x1
 2bc:	ldp	x25, x26, [sp, #64]
 2c0:	b	f0 <inflate_fast+0xf0>
 2c4:	tbz	w1, #5, 2fc <inflate_fast+0x2fc>
 2c8:	mov	w1, #0x3f3f                	// #16191
 2cc:	str	w1, [x9, #8]
 2d0:	b	fc <inflate_fast+0xfc>
 2d4:	ldrb	w1, [x8, #1]
 2d8:	add	w24, w4, #0x8
 2dc:	ldrb	w2, [x8]
 2e0:	add	x8, x8, #0x2
 2e4:	lsl	x1, x1, x24
 2e8:	lsl	x2, x2, x4
 2ec:	add	x1, x1, x2
 2f0:	add	x3, x3, x1
 2f4:	add	w4, w4, #0x10
 2f8:	b	1b4 <inflate_fast+0x1b4>
 2fc:	adrp	x1, 0 <inflate_fast>
 300:	add	x1, x1, #0x0
 304:	str	x1, [x0, #48]
 308:	mov	w1, #0x3f51                	// #16209
 30c:	str	w1, [x9, #8]
 310:	b	fc <inflate_fast+0xfc>
 314:	adrp	x1, 0 <inflate_fast>
 318:	add	x1, x1, #0x0
 31c:	str	x1, [x0, #48]
 320:	mov	w1, #0x3f51                	// #16209
 324:	str	w1, [x9, #8]
 328:	b	fc <inflate_fast+0xfc>
 32c:	cmp	w16, w25
 330:	b.cs	3f0 <inflate_fast+0x3f0>  // b.hs, b.nlast
 334:	sub	w25, w25, w16
 338:	add	w1, w21, w2
 33c:	cmp	w23, w25
 340:	add	x1, x19, x1
 344:	b.ls	26c <inflate_fast+0x26c>  // b.plast
 348:	add	w23, w23, w16
 34c:	stp	x27, x28, [sp, #80]
 350:	mov	w27, w25
 354:	add	w23, w23, w2
 358:	mov	x2, #0x0                   	// #0
 35c:	ldrb	w26, [x1, x2]
 360:	strb	w26, [x6, x2]
 364:	add	x2, x2, #0x1
 368:	cmp	x27, x2
 36c:	b.ne	35c <inflate_fast+0x35c>  // b.any
 370:	sub	w25, w25, #0x1
 374:	cmp	w16, w23
 378:	add	x2, x25, #0x1
 37c:	mov	x1, x19
 380:	add	x6, x6, x2
 384:	b.cc	4c4 <inflate_fast+0x4c4>  // b.lo, b.ul, b.last
 388:	ldp	x27, x28, [sp, #80]
 38c:	b	26c <inflate_fast+0x26c>
 390:	sub	x1, x6, w24, uxtw
 394:	nop
 398:	ldrb	w2, [x1]
 39c:	mov	x25, x1
 3a0:	strb	w2, [x6]
 3a4:	add	x1, x1, #0x3
 3a8:	mov	x24, x6
 3ac:	add	x6, x6, #0x3
 3b0:	ldurb	w2, [x1, #-2]
 3b4:	sub	w23, w23, #0x3
 3b8:	sturb	w2, [x6, #-2]
 3bc:	cmp	w23, #0x2
 3c0:	ldurb	w2, [x1, #-1]
 3c4:	sturb	w2, [x6, #-1]
 3c8:	b.hi	398 <inflate_fast+0x398>  // b.pmore
 3cc:	cbnz	w23, 438 <inflate_fast+0x438>
 3d0:	ldp	x25, x26, [sp, #64]
 3d4:	b	f0 <inflate_fast+0xf0>
 3d8:	ldrb	w1, [x8, #1]
 3dc:	add	w4, w4, #0x10
 3e0:	add	x8, x8, #0x2
 3e4:	lsl	x25, x1, x25
 3e8:	add	x3, x3, x25
 3ec:	b	220 <inflate_fast+0x220>
 3f0:	add	w1, w16, w2
 3f4:	cmp	w23, w25
 3f8:	add	x1, x19, x1
 3fc:	b.ls	26c <inflate_fast+0x26c>  // b.plast
 400:	sub	w25, w25, #0x1
 404:	stp	x27, x28, [sp, #80]
 408:	add	x28, x25, #0x1
 40c:	add	w23, w23, w2
 410:	mov	x2, #0x0                   	// #0
 414:	ldrb	w27, [x1, x2]
 418:	cmp	x25, x2
 41c:	strb	w27, [x6, x2]
 420:	add	x2, x2, #0x1
 424:	b.ne	414 <inflate_fast+0x414>  // b.any
 428:	add	x6, x6, x28
 42c:	sub	x1, x6, w24, uxtw
 430:	ldp	x27, x28, [sp, #80]
 434:	b	26c <inflate_fast+0x26c>
 438:	ldrb	w1, [x25, #3]
 43c:	strb	w1, [x24, #3]
 440:	b.eq	4b0 <inflate_fast+0x4b0>  // b.none
 444:	add	x6, x24, #0x4
 448:	ldp	x25, x26, [sp, #64]
 44c:	b	f0 <inflate_fast+0xf0>
 450:	adrp	x1, 0 <inflate_fast>
 454:	add	x1, x1, #0x0
 458:	str	x1, [x0, #48]
 45c:	mov	w1, #0x3f51                	// #16209
 460:	ldp	x25, x26, [sp, #64]
 464:	str	w1, [x9, #8]
 468:	b	fc <inflate_fast+0xfc>
 46c:	ldrb	w1, [x1, #1]
 470:	add	x6, x6, #0x2
 474:	sturb	w1, [x6, #-1]
 478:	ldp	x25, x26, [sp, #64]
 47c:	b	f0 <inflate_fast+0xf0>
 480:	stp	x27, x28, [sp, #80]
 484:	sub	w27, w25, #0x1
 488:	add	x28, x27, #0x1
 48c:	add	w23, w23, w2
 490:	mov	x2, #0x0                   	// #0
 494:	nop
 498:	ldrb	w26, [x1, x2]
 49c:	cmp	x27, x2
 4a0:	strb	w26, [x6, x2]
 4a4:	add	x2, x2, #0x1
 4a8:	b.ne	498 <inflate_fast+0x498>  // b.any
 4ac:	b	428 <inflate_fast+0x428>
 4b0:	ldrb	w1, [x25, #4]
 4b4:	add	x6, x24, #0x5
 4b8:	strb	w1, [x24, #4]
 4bc:	ldp	x25, x26, [sp, #64]
 4c0:	b	f0 <inflate_fast+0xf0>
 4c4:	sub	w23, w23, w16
 4c8:	mov	x1, #0x0                   	// #0
 4cc:	ldrb	w25, [x19, x1]
 4d0:	cmp	x18, x1
 4d4:	strb	w25, [x6, x1]
 4d8:	add	x1, x1, #0x1
 4dc:	b.ne	4cc <inflate_fast+0x4cc>  // b.any
 4e0:	add	x6, x6, x22
 4e4:	sub	x1, x6, w24, uxtw
 4e8:	ldp	x27, x28, [sp, #80]
 4ec:	b	26c <inflate_fast+0x26c>

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <updatewindow>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x3, x0
       8:	mov	x29, sp
       c:	stp	x19, x20, [sp, #16]
      10:	mov	w20, w2
      14:	ldr	x19, [x0, #56]
      18:	stp	x21, x22, [sp, #32]
      1c:	mov	x21, x1
      20:	ldr	x0, [x19, #72]
      24:	cbz	x0, d8 <updatewindow+0xd8>
      28:	ldr	w3, [x19, #60]
      2c:	cbnz	w3, 44 <updatewindow+0x44>
      30:	ldr	w2, [x19, #56]
      34:	mov	w3, #0x1                   	// #1
      38:	str	xzr, [x19, #64]
      3c:	lsl	w3, w3, w2
      40:	str	w3, [x19, #60]
      44:	cmp	w20, w3
      48:	b.cc	74 <updatewindow+0x74>  // b.lo, b.ul, b.last
      4c:	mov	w2, w3
      50:	sub	x1, x21, x2
      54:	bl	0 <memcpy>
      58:	ldr	w1, [x19, #60]
      5c:	mov	w0, #0x0                   	// #0
      60:	stp	w1, wzr, [x19, #64]
      64:	ldp	x19, x20, [sp, #16]
      68:	ldp	x21, x22, [sp, #32]
      6c:	ldp	x29, x30, [sp], #48
      70:	ret
      74:	ldr	w2, [x19, #68]
      78:	sub	x1, x21, w20, uxtw
      7c:	sub	w3, w3, w2
      80:	cmp	w20, w3
      84:	add	x0, x0, w2, uxtw
      88:	csel	w22, w20, w3, ls  // ls = plast
      8c:	csel	w2, w20, w3, ls  // ls = plast
      90:	bl	0 <memcpy>
      94:	subs	w20, w20, w22
      98:	b.ne	104 <updatewindow+0x104>  // b.any
      9c:	ldp	w3, w2, [x19, #60]
      a0:	mov	w0, #0x0                   	// #0
      a4:	ldr	w1, [x19, #68]
      a8:	add	w1, w22, w1
      ac:	cmp	w1, w3
      b0:	csel	w1, w1, wzr, ne  // ne = any
      b4:	str	w1, [x19, #68]
      b8:	cmp	w3, w2
      bc:	b.ls	64 <updatewindow+0x64>  // b.plast
      c0:	add	w22, w2, w22
      c4:	str	w22, [x19, #64]
      c8:	ldp	x19, x20, [sp, #16]
      cc:	ldp	x21, x22, [sp, #32]
      d0:	ldp	x29, x30, [sp], #48
      d4:	ret
      d8:	ldr	x4, [x3, #64]
      dc:	mov	w22, #0x1                   	// #1
      e0:	ldr	x0, [x3, #80]
      e4:	mov	w2, w22
      e8:	ldr	w1, [x19, #56]
      ec:	lsl	w1, w22, w1
      f0:	blr	x4
      f4:	str	x0, [x19, #72]
      f8:	cbnz	x0, 28 <updatewindow+0x28>
      fc:	mov	w0, w22
     100:	b	64 <updatewindow+0x64>
     104:	ldr	x0, [x19, #72]
     108:	mov	w2, w20
     10c:	sub	x1, x21, x2
     110:	bl	0 <memcpy>
     114:	ldr	w1, [x19, #60]
     118:	mov	w0, #0x0                   	// #0
     11c:	stp	w1, w20, [x19, #64]
     120:	ldp	x19, x20, [sp, #16]
     124:	ldp	x21, x22, [sp, #32]
     128:	ldp	x29, x30, [sp], #48
     12c:	ret

0000000000000130 <inflateStateCheck.part.0>:
     130:	ldr	x2, [x0, #56]
     134:	mov	x1, x0
     138:	cbz	x2, 168 <inflateStateCheck.part.0+0x38>
     13c:	ldr	x3, [x2]
     140:	mov	w0, #0x1                   	// #1
     144:	cmp	x1, x3
     148:	b.eq	150 <inflateStateCheck.part.0+0x20>  // b.none
     14c:	ret
     150:	ldr	w0, [x2, #8]
     154:	mov	w1, #0xffffc0cc            	// #-16180
     158:	add	w0, w0, w1
     15c:	cmp	w0, #0x1f
     160:	cset	w0, hi  // hi = pmore
     164:	ret
     168:	mov	w0, #0x1                   	// #1
     16c:	ret

0000000000000170 <inflateResetKeep>:
     170:	cbz	x0, 1f8 <inflateResetKeep+0x88>
     174:	ldr	x1, [x0, #64]
     178:	mov	x4, x0
     17c:	cbz	x1, 1f8 <inflateResetKeep+0x88>
     180:	ldr	x1, [x0, #72]
     184:	cbz	x1, 1f8 <inflateResetKeep+0x88>
     188:	stp	x29, x30, [sp, #-16]!
     18c:	mov	x29, sp
     190:	bl	130 <inflateStateCheck.part.0>
     194:	cbnz	w0, 200 <inflateResetKeep+0x90>
     198:	ldr	x1, [x4, #56]
     19c:	ldr	w2, [x1, #16]
     1a0:	str	xzr, [x1, #40]
     1a4:	str	xzr, [x4, #16]
     1a8:	stp	xzr, xzr, [x4, #40]
     1ac:	cbnz	w2, 1ec <inflateResetKeep+0x7c>
     1b0:	add	x2, x1, #0x558
     1b4:	mov	x5, #0x3f34                	// #16180
     1b8:	mov	w4, #0x8000                	// #32768
     1bc:	mov	x3, #0xffffffff00000001    	// #-4294967295
     1c0:	str	x5, [x1, #8]
     1c4:	str	wzr, [x1, #20]
     1c8:	str	w4, [x1, #28]
     1cc:	str	xzr, [x1, #48]
     1d0:	str	xzr, [x1, #80]
     1d4:	str	wzr, [x1, #88]
     1d8:	stp	x2, x2, [x1, #104]
     1dc:	str	x2, [x1, #144]
     1e0:	str	x3, [x1, #7144]
     1e4:	ldp	x29, x30, [sp], #16
     1e8:	ret
     1ec:	and	x2, x2, #0x1
     1f0:	str	x2, [x4, #96]
     1f4:	b	1b0 <inflateResetKeep+0x40>
     1f8:	mov	w0, #0xfffffffe            	// #-2
     1fc:	ret
     200:	mov	w0, #0xfffffffe            	// #-2
     204:	b	1e4 <inflateResetKeep+0x74>

0000000000000208 <inflateReset>:
     208:	cbz	x0, 254 <inflateReset+0x4c>
     20c:	ldr	x1, [x0, #64]
     210:	mov	x4, x0
     214:	cbz	x1, 254 <inflateReset+0x4c>
     218:	ldr	x1, [x0, #72]
     21c:	cbz	x1, 254 <inflateReset+0x4c>
     220:	stp	x29, x30, [sp, #-16]!
     224:	mov	x29, sp
     228:	bl	130 <inflateStateCheck.part.0>
     22c:	cbnz	w0, 248 <inflateReset+0x40>
     230:	ldr	x1, [x4, #56]
     234:	mov	x0, x4
     238:	str	wzr, [x1, #60]
     23c:	str	xzr, [x1, #64]
     240:	ldp	x29, x30, [sp], #16
     244:	b	170 <inflateResetKeep>
     248:	mov	w0, #0xfffffffe            	// #-2
     24c:	ldp	x29, x30, [sp], #16
     250:	ret
     254:	mov	w0, #0xfffffffe            	// #-2
     258:	ret
     25c:	nop

0000000000000260 <inflateReset2>:
     260:	cbz	x0, 31c <inflateReset2+0xbc>
     264:	stp	x29, x30, [sp, #-48]!
     268:	mov	x29, sp
     26c:	stp	x19, x20, [sp, #16]
     270:	mov	w19, w1
     274:	mov	x20, x0
     278:	ldr	x1, [x0, #64]
     27c:	cbz	x1, 30c <inflateReset2+0xac>
     280:	ldr	x4, [x0, #72]
     284:	cbz	x4, 30c <inflateReset2+0xac>
     288:	stp	x21, x22, [sp, #32]
     28c:	bl	130 <inflateStateCheck.part.0>
     290:	mov	w21, w0
     294:	cbnz	w0, 308 <inflateReset2+0xa8>
     298:	ldr	x22, [x20, #56]
     29c:	tbnz	w19, #31, 300 <inflateReset2+0xa0>
     2a0:	asr	w21, w19, #4
     2a4:	cmp	w19, #0x30
     2a8:	and	w0, w19, #0xf
     2ac:	add	w21, w21, #0x5
     2b0:	csel	w19, w0, w19, lt  // lt = tstop
     2b4:	cmp	w19, #0x0
     2b8:	sub	w0, w19, #0x8
     2bc:	ccmp	w0, #0x7, #0x0, ne  // ne = any
     2c0:	b.hi	308 <inflateReset2+0xa8>  // b.pmore
     2c4:	ldr	x1, [x22, #72]
     2c8:	cbz	x1, 2e4 <inflateReset2+0x84>
     2cc:	ldr	w0, [x22, #56]
     2d0:	cmp	w19, w0
     2d4:	b.eq	2e4 <inflateReset2+0x84>  // b.none
     2d8:	ldr	x0, [x20, #80]
     2dc:	blr	x4
     2e0:	str	xzr, [x22, #72]
     2e4:	str	w21, [x22, #16]
     2e8:	mov	x0, x20
     2ec:	str	w19, [x22, #56]
     2f0:	ldp	x19, x20, [sp, #16]
     2f4:	ldp	x21, x22, [sp, #32]
     2f8:	ldp	x29, x30, [sp], #48
     2fc:	b	208 <inflateReset>
     300:	neg	w19, w19
     304:	b	2b4 <inflateReset2+0x54>
     308:	ldp	x21, x22, [sp, #32]
     30c:	mov	w0, #0xfffffffe            	// #-2
     310:	ldp	x19, x20, [sp, #16]
     314:	ldp	x29, x30, [sp], #48
     318:	ret
     31c:	mov	w0, #0xfffffffe            	// #-2
     320:	ret
     324:	nop

0000000000000328 <inflateInit2_>:
     328:	stp	x29, x30, [sp, #-48]!
     32c:	mov	x29, sp
     330:	str	x21, [sp, #32]
     334:	cbz	x2, 42c <inflateInit2_+0x104>
     338:	stp	x19, x20, [sp, #16]
     33c:	mov	w21, w1
     340:	mov	x19, x0
     344:	ldrb	w1, [x2]
     348:	mov	w0, #0x70                  	// #112
     34c:	cmp	w1, #0x31
     350:	ccmp	w3, w0, #0x0, eq  // eq = none
     354:	b.ne	414 <inflateInit2_+0xec>  // b.any
     358:	cbz	x19, 434 <inflateInit2_+0x10c>
     35c:	ldr	x3, [x19, #64]
     360:	str	xzr, [x19, #48]
     364:	cbz	x3, 3f8 <inflateInit2_+0xd0>
     368:	ldr	x0, [x19, #80]
     36c:	ldr	x1, [x19, #72]
     370:	cbz	x1, 3e8 <inflateInit2_+0xc0>
     374:	mov	w2, #0x1bf8                	// #7160
     378:	mov	w1, #0x1                   	// #1
     37c:	blr	x3
     380:	mov	x20, x0
     384:	cbz	x0, 420 <inflateInit2_+0xf8>
     388:	str	x20, [x19, #56]
     38c:	mov	w0, #0x3f34                	// #16180
     390:	str	x19, [x20]
     394:	mov	w1, w21
     398:	str	w0, [x20, #8]
     39c:	mov	x0, x19
     3a0:	str	xzr, [x20, #72]
     3a4:	bl	260 <inflateReset2>
     3a8:	mov	w21, w0
     3ac:	cbnz	w0, 3c4 <inflateInit2_+0x9c>
     3b0:	ldp	x19, x20, [sp, #16]
     3b4:	mov	w0, w21
     3b8:	ldr	x21, [sp, #32]
     3bc:	ldp	x29, x30, [sp], #48
     3c0:	ret
     3c4:	ldp	x2, x0, [x19, #72]
     3c8:	mov	x1, x20
     3cc:	blr	x2
     3d0:	str	xzr, [x19, #56]
     3d4:	mov	w0, w21
     3d8:	ldp	x19, x20, [sp, #16]
     3dc:	ldr	x21, [sp, #32]
     3e0:	ldp	x29, x30, [sp], #48
     3e4:	ret
     3e8:	adrp	x1, 0 <zcfree>
     3ec:	add	x1, x1, #0x0
     3f0:	str	x1, [x19, #72]
     3f4:	b	374 <inflateInit2_+0x4c>
     3f8:	adrp	x1, 0 <zcalloc>
     3fc:	add	x1, x1, #0x0
     400:	mov	x3, x1
     404:	mov	x0, #0x0                   	// #0
     408:	str	x1, [x19, #64]
     40c:	str	xzr, [x19, #80]
     410:	b	36c <inflateInit2_+0x44>
     414:	mov	w21, #0xfffffffa            	// #-6
     418:	ldp	x19, x20, [sp, #16]
     41c:	b	3b4 <inflateInit2_+0x8c>
     420:	mov	w21, #0xfffffffc            	// #-4
     424:	ldp	x19, x20, [sp, #16]
     428:	b	3b4 <inflateInit2_+0x8c>
     42c:	mov	w21, #0xfffffffa            	// #-6
     430:	b	3b4 <inflateInit2_+0x8c>
     434:	mov	w21, #0xfffffffe            	// #-2
     438:	ldp	x19, x20, [sp, #16]
     43c:	b	3b4 <inflateInit2_+0x8c>

0000000000000440 <inflateInit_>:
     440:	mov	w3, w2
     444:	mov	x2, x1
     448:	mov	w1, #0xf                   	// #15
     44c:	b	328 <inflateInit2_>

0000000000000450 <inflatePrime>:
     450:	cbz	x0, 4cc <inflatePrime+0x7c>
     454:	mov	w5, w1
     458:	mov	x4, x0
     45c:	ldr	x1, [x0, #64]
     460:	cbz	x1, 4cc <inflatePrime+0x7c>
     464:	ldr	x1, [x0, #72]
     468:	cbz	x1, 4cc <inflatePrime+0x7c>
     46c:	mov	w6, w2
     470:	stp	x29, x30, [sp, #-16]!
     474:	mov	x29, sp
     478:	bl	130 <inflateStateCheck.part.0>
     47c:	cbnz	w0, 4e4 <inflatePrime+0x94>
     480:	ldr	x2, [x4, #56]
     484:	tbnz	w5, #31, 4d4 <inflatePrime+0x84>
     488:	cmp	w5, #0x10
     48c:	b.gt	4e4 <inflatePrime+0x94>
     490:	ldr	w4, [x2, #88]
     494:	add	w1, w5, w4
     498:	cmp	w1, #0x20
     49c:	b.hi	4e4 <inflatePrime+0x94>  // b.pmore
     4a0:	mov	x3, #0x1                   	// #1
     4a4:	str	w1, [x2, #88]
     4a8:	lsl	x5, x3, x5
     4ac:	sub	w5, w5, #0x1
     4b0:	ldr	x3, [x2, #80]
     4b4:	and	w1, w5, w6
     4b8:	lsl	w1, w1, w4
     4bc:	add	x1, x3, x1
     4c0:	str	x1, [x2, #80]
     4c4:	ldp	x29, x30, [sp], #16
     4c8:	ret
     4cc:	mov	w0, #0xfffffffe            	// #-2
     4d0:	ret
     4d4:	str	xzr, [x2, #80]
     4d8:	str	wzr, [x2, #88]
     4dc:	ldp	x29, x30, [sp], #16
     4e0:	ret
     4e4:	mov	w0, #0xfffffffe            	// #-2
     4e8:	b	4c4 <inflatePrime+0x74>
     4ec:	nop

00000000000004f0 <inflate>:
     4f0:	stp	x29, x30, [sp, #-176]!
     4f4:	mov	x29, sp
     4f8:	stp	x25, x26, [sp, #64]
     4fc:	cbz	x0, e38 <inflate+0x948>
     500:	mov	w26, w1
     504:	stp	x23, x24, [sp, #48]
     508:	mov	x24, x0
     50c:	ldr	x1, [x0, #64]
     510:	cbz	x1, b38 <inflate+0x648>
     514:	ldr	x1, [x0, #72]
     518:	cbz	x1, b38 <inflate+0x648>
     51c:	bl	130 <inflateStateCheck.part.0>
     520:	mov	w25, w0
     524:	cbnz	w0, b38 <inflate+0x648>
     528:	ldr	x7, [x24, #24]
     52c:	cbz	x7, b38 <inflate+0x648>
     530:	stp	x21, x22, [sp, #32]
     534:	ldr	x21, [x24]
     538:	stp	x27, x28, [sp, #80]
     53c:	ldr	w28, [x24, #8]
     540:	cbz	x21, b9c <inflate+0x6ac>
     544:	ldr	x23, [x24, #56]
     548:	stp	x19, x20, [sp, #16]
     54c:	mov	w1, #0x3f3f                	// #16191
     550:	ldr	w0, [x23, #8]
     554:	cmp	w0, w1
     558:	b.eq	b8c <inflate+0x69c>  // b.none
     55c:	ldr	w9, [x24, #32]
     560:	adrp	x10, 0 <updatewindow>
     564:	ldr	w19, [x23, #88]
     568:	add	x27, x10, #0x0
     56c:	ldr	x22, [x23, #80]
     570:	mov	w20, w28
     574:	mov	w8, w9
     578:	add	x1, x27, #0x880
     57c:	str	x1, [sp, #104]
     580:	mov	w1, #0xffffc0cc            	// #-16180
     584:	add	w0, w0, w1
     588:	cmp	w0, #0x1e
     58c:	b.ls	5a8 <inflate+0xb8>  // b.plast
     590:	mov	w25, #0xfffffffe            	// #-2
     594:	ldp	x19, x20, [sp, #16]
     598:	ldp	x21, x22, [sp, #32]
     59c:	ldp	x23, x24, [sp, #48]
     5a0:	ldp	x27, x28, [sp, #80]
     5a4:	b	b28 <inflate+0x638>
     5a8:	adrp	x1, 0 <updatewindow>
     5ac:	add	x1, x1, #0x0
     5b0:	ldrh	w0, [x1, w0, uxtw #1]
     5b4:	adr	x1, 5c0 <inflate+0xd0>
     5b8:	add	x0, x1, w0, sxth #2
     5bc:	br	x0
     5c0:	cbz	w20, a44 <inflate+0x554>
     5c4:	ldrb	w0, [x21], #1
     5c8:	sub	w20, w20, #0x1
     5cc:	lsl	x0, x0, x19
     5d0:	add	w19, w19, #0x8
     5d4:	add	x22, x22, x0
     5d8:	cmp	w19, #0xd
     5dc:	b.ls	5c0 <inflate+0xd0>  // b.plast
     5e0:	and	w1, w22, #0x1f
     5e4:	ubfx	w0, w22, #5, #5
     5e8:	ubfx	w2, w22, #10, #4
     5ec:	add	w1, w1, #0x101
     5f0:	add	w0, w0, #0x1
     5f4:	add	w2, w2, #0x4
     5f8:	stp	w2, w1, [x23, #128]
     5fc:	cmp	w1, #0x11e
     600:	str	w0, [x23, #136]
     604:	sub	w19, w19, #0xe
     608:	ccmp	w0, #0x1e, #0x2, ls  // ls = plast
     60c:	lsr	x22, x22, #14
     610:	b.ls	1a48 <inflate+0x1558>  // b.plast
     614:	adrp	x0, 0 <updatewindow>
     618:	add	x0, x0, #0x0
     61c:	str	x0, [x24, #48]
     620:	mov	w0, #0x3f51                	// #16209
     624:	str	w0, [x23, #8]
     628:	b	d74 <inflate+0x884>
     62c:	ldr	x1, [x23, #48]
     630:	cbz	x1, 63c <inflate+0x14c>
     634:	ubfx	w2, w22, #8, #1
     638:	str	w2, [x1]
     63c:	tbz	w0, #9, 648 <inflate+0x158>
     640:	ldr	w0, [x23, #16]
     644:	tbnz	w0, #2, 1cd8 <inflate+0x17e8>
     648:	mov	w0, #0x3f36                	// #16182
     64c:	mov	x22, #0x0                   	// #0
     650:	mov	w19, #0x0                   	// #0
     654:	str	w0, [x23, #8]
     658:	cbz	w20, a44 <inflate+0x554>
     65c:	ldrb	w0, [x21], #1
     660:	sub	w20, w20, #0x1
     664:	lsl	x0, x0, x19
     668:	add	w19, w19, #0x8
     66c:	add	x22, x22, x0
     670:	cmp	w19, #0x1f
     674:	b.ls	658 <inflate+0x168>  // b.plast
     678:	ldr	x0, [x23, #48]
     67c:	cbz	x0, 684 <inflate+0x194>
     680:	str	x22, [x0, #8]
     684:	ldr	w0, [x23, #24]
     688:	tbz	w0, #9, 694 <inflate+0x1a4>
     68c:	ldr	w0, [x23, #16]
     690:	tbnz	w0, #2, 19e0 <inflate+0x14f0>
     694:	mov	w0, #0x3f37                	// #16183
     698:	mov	x22, #0x0                   	// #0
     69c:	mov	w19, #0x0                   	// #0
     6a0:	str	w0, [x23, #8]
     6a4:	nop
     6a8:	cbz	w20, a44 <inflate+0x554>
     6ac:	ldrb	w0, [x21], #1
     6b0:	sub	w20, w20, #0x1
     6b4:	lsl	x0, x0, x19
     6b8:	add	w19, w19, #0x8
     6bc:	add	x22, x22, x0
     6c0:	cmp	w19, #0xf
     6c4:	b.ls	6a8 <inflate+0x1b8>  // b.plast
     6c8:	ldr	x0, [x23, #48]
     6cc:	cbz	x0, 6dc <inflate+0x1ec>
     6d0:	and	w2, w22, #0xff
     6d4:	lsr	x1, x22, #8
     6d8:	stp	w2, w1, [x0, #16]
     6dc:	ldr	w2, [x23, #24]
     6e0:	mov	w1, w2
     6e4:	tbz	w2, #9, 6f0 <inflate+0x200>
     6e8:	ldr	w0, [x23, #16]
     6ec:	tbnz	w0, #2, 187c <inflate+0x138c>
     6f0:	mov	w0, #0x3f38                	// #16184
     6f4:	str	w0, [x23, #8]
     6f8:	tbnz	w2, #10, 17b8 <inflate+0x12c8>
     6fc:	mov	w19, #0x0                   	// #0
     700:	mov	x22, #0x0                   	// #0
     704:	ldr	x2, [x23, #48]
     708:	mov	w0, #0x0                   	// #0
     70c:	cbz	x2, 714 <inflate+0x224>
     710:	str	xzr, [x2, #24]
     714:	mov	w2, #0x3f39                	// #16185
     718:	str	w2, [x23, #8]
     71c:	cbz	w0, 7c4 <inflate+0x2d4>
     720:	ldr	w3, [x23, #92]
     724:	cmp	w20, w3
     728:	csel	w4, w20, w3, ls  // ls = plast
     72c:	cbz	w4, 7bc <inflate+0x2cc>
     730:	ldr	x2, [x23, #48]
     734:	mov	w5, w4
     738:	cbz	x2, 79c <inflate+0x2ac>
     73c:	ldr	x0, [x2, #24]
     740:	cbz	x0, 79c <inflate+0x2ac>
     744:	ldp	w11, w2, [x2, #32]
     748:	mov	x1, x21
     74c:	str	x5, [sp, #112]
     750:	sub	w12, w11, w3
     754:	str	w4, [sp, #120]
     758:	add	w12, w4, w12
     75c:	str	x7, [sp, #128]
     760:	cmp	w12, w2
     764:	add	w2, w2, w3
     768:	sub	w3, w11, w3
     76c:	sub	w2, w2, w11
     770:	csel	x2, x2, x5, hi  // hi = pmore
     774:	add	x0, x0, x3
     778:	str	w8, [sp, #136]
     77c:	str	w9, [sp, #144]
     780:	bl	0 <memcpy>
     784:	ldr	w1, [x23, #24]
     788:	ldr	w4, [sp, #120]
     78c:	ldr	w8, [sp, #136]
     790:	ldr	w9, [sp, #144]
     794:	ldr	x5, [sp, #112]
     798:	ldr	x7, [sp, #128]
     79c:	tbz	w1, #9, 7a8 <inflate+0x2b8>
     7a0:	ldr	w0, [x23, #16]
     7a4:	tbnz	w0, #2, 1974 <inflate+0x1484>
     7a8:	ldr	w3, [x23, #92]
     7ac:	sub	w20, w20, w4
     7b0:	add	x21, x21, x5
     7b4:	sub	w3, w3, w4
     7b8:	str	w3, [x23, #92]
     7bc:	cbnz	w3, a44 <inflate+0x554>
     7c0:	ldr	w1, [x23, #24]
     7c4:	mov	w0, #0x3f3a                	// #16186
     7c8:	str	w0, [x23, #8]
     7cc:	str	wzr, [x23, #92]
     7d0:	tbnz	w1, #11, 1618 <inflate+0x1128>
     7d4:	ldr	x0, [x23, #48]
     7d8:	cbz	x0, 7e0 <inflate+0x2f0>
     7dc:	str	xzr, [x0, #40]
     7e0:	mov	w0, #0x3f3b                	// #16187
     7e4:	str	w0, [x23, #8]
     7e8:	str	wzr, [x23, #92]
     7ec:	tbnz	w1, #12, 15a0 <inflate+0x10b0>
     7f0:	ldr	x0, [x23, #48]
     7f4:	cbz	x0, 7fc <inflate+0x30c>
     7f8:	str	xzr, [x0, #56]
     7fc:	mov	w0, #0x3f3c                	// #16188
     800:	str	w0, [x23, #8]
     804:	tbnz	w1, #9, 13c4 <inflate+0xed4>
     808:	ldr	x0, [x23, #48]
     80c:	cbz	x0, 81c <inflate+0x32c>
     810:	ubfx	x1, x1, #9, #1
     814:	mov	w2, #0x1                   	// #1
     818:	stp	w1, w2, [x0, #68]
     81c:	mov	x1, #0x0                   	// #0
     820:	mov	w2, #0x0                   	// #0
     824:	mov	x0, #0x0                   	// #0
     828:	str	x7, [sp, #112]
     82c:	str	w8, [sp, #120]
     830:	str	w9, [sp, #128]
     834:	bl	0 <crc32>
     838:	str	x0, [x23, #32]
     83c:	mov	w1, #0x3f3f                	// #16191
     840:	str	x0, [x24, #96]
     844:	ldr	w8, [sp, #120]
     848:	ldr	w9, [sp, #128]
     84c:	str	w1, [x23, #8]
     850:	ldr	x7, [sp, #112]
     854:	b	908 <inflate+0x418>
     858:	mov	w0, #0x3f3d                	// #16189
     85c:	mov	x22, #0x0                   	// #0
     860:	mov	w19, #0x0                   	// #0
     864:	str	w0, [x23, #8]
     868:	cbz	w20, a44 <inflate+0x554>
     86c:	ldrb	w0, [x21], #1
     870:	sub	w20, w20, #0x1
     874:	lsl	x0, x0, x19
     878:	add	w19, w19, #0x8
     87c:	add	x22, x22, x0
     880:	cmp	w19, #0x1f
     884:	b.ls	868 <inflate+0x378>  // b.plast
     888:	lsr	x0, x22, #8
     88c:	lsl	x1, x22, #8
     890:	and	x2, x0, #0xff00
     894:	and	x1, x1, #0xff0000
     898:	lsr	w0, w22, #24
     89c:	lsl	w22, w22, #24
     8a0:	add	x1, x1, x22
     8a4:	orr	x0, x0, x2
     8a8:	add	x0, x0, x1
     8ac:	str	x0, [x23, #32]
     8b0:	str	x0, [x24, #96]
     8b4:	mov	w19, #0x0                   	// #0
     8b8:	mov	w0, #0x3f3e                	// #16190
     8bc:	mov	x22, #0x0                   	// #0
     8c0:	str	w0, [x23, #8]
     8c4:	ldr	w0, [x23, #20]
     8c8:	cbz	w0, 1bc4 <inflate+0x16d4>
     8cc:	mov	x1, #0x0                   	// #0
     8d0:	mov	w2, #0x0                   	// #0
     8d4:	mov	x0, #0x0                   	// #0
     8d8:	str	x7, [sp, #112]
     8dc:	str	w8, [sp, #120]
     8e0:	str	w9, [sp, #128]
     8e4:	bl	0 <adler32>
     8e8:	ldr	w8, [sp, #120]
     8ec:	mov	w1, #0x3f3f                	// #16191
     8f0:	ldr	w9, [sp, #128]
     8f4:	str	x0, [x23, #32]
     8f8:	ldr	x7, [sp, #112]
     8fc:	str	x0, [x24, #96]
     900:	str	w1, [x23, #8]
     904:	nop
     908:	sub	w0, w26, #0x5
     90c:	cmp	w0, #0x1
     910:	b.ls	a44 <inflate+0x554>  // b.plast
     914:	ldr	w0, [x23, #12]
     918:	cbz	w0, 14b0 <inflate+0xfc0>
     91c:	and	w0, w19, #0x7
     920:	and	w19, w19, #0xfffffff8
     924:	mov	w1, #0x3f4e                	// #16206
     928:	str	w1, [x23, #8]
     92c:	lsr	x22, x22, x0
     930:	ldr	w1, [x23, #16]
     934:	cbnz	w1, bcc <inflate+0x6dc>
     938:	mov	w0, #0x3f4f                	// #16207
     93c:	str	w0, [x23, #8]
     940:	cbz	w1, 1a34 <inflate+0x1544>
     944:	ldr	w0, [x23, #24]
     948:	cbnz	w0, 968 <inflate+0x478>
     94c:	b	1a34 <inflate+0x1544>
     950:	cbz	w20, a44 <inflate+0x554>
     954:	ldrb	w0, [x21], #1
     958:	sub	w20, w20, #0x1
     95c:	lsl	x0, x0, x19
     960:	add	w19, w19, #0x8
     964:	add	x22, x22, x0
     968:	cmp	w19, #0x1f
     96c:	b.ls	950 <inflate+0x460>  // b.plast
     970:	ldr	w0, [x23, #40]
     974:	cmp	x22, x0
     978:	b.eq	1a2c <inflate+0x153c>  // b.none
     97c:	adrp	x0, 0 <updatewindow>
     980:	add	x0, x0, #0x0
     984:	str	x0, [x24, #48]
     988:	mov	w0, #0x3f51                	// #16209
     98c:	str	w0, [x23, #8]
     990:	b	d74 <inflate+0x884>
     994:	ldr	w0, [x23, #56]
     998:	cbnz	w0, 9a4 <inflate+0x4b4>
     99c:	mov	w0, #0xf                   	// #15
     9a0:	str	w0, [x23, #56]
     9a4:	mov	w2, #0x0                   	// #0
     9a8:	mov	x1, #0x0                   	// #0
     9ac:	mov	x0, #0x0                   	// #0
     9b0:	str	x7, [sp, #112]
     9b4:	str	w8, [sp, #120]
     9b8:	mov	w19, #0x0                   	// #0
     9bc:	str	w9, [sp, #128]
     9c0:	bl	0 <crc32>
     9c4:	mov	w3, #0xffff8b1f            	// #-29921
     9c8:	str	x0, [x23, #32]
     9cc:	add	x1, sp, #0xa8
     9d0:	mov	w2, #0x2                   	// #2
     9d4:	strh	w3, [sp, #168]
     9d8:	bl	0 <crc32>
     9dc:	ldr	w8, [sp, #120]
     9e0:	mov	w1, #0x3f35                	// #16181
     9e4:	ldr	w9, [sp, #128]
     9e8:	mov	x22, #0x0                   	// #0
     9ec:	ldr	x7, [sp, #112]
     9f0:	str	w1, [x23, #8]
     9f4:	str	x0, [x23, #32]
     9f8:	cbz	w20, a44 <inflate+0x554>
     9fc:	ldrb	w0, [x21], #1
     a00:	sub	w20, w20, #0x1
     a04:	lsl	x0, x0, x19
     a08:	add	w19, w19, #0x8
     a0c:	add	x22, x22, x0
     a10:	cmp	w19, #0xf
     a14:	b.ls	9f8 <inflate+0x508>  // b.plast
     a18:	str	w22, [x23, #24]
     a1c:	and	w0, w22, #0xff
     a20:	cmp	w0, #0x8
     a24:	mov	w0, w22
     a28:	b.eq	1820 <inflate+0x1330>  // b.none
     a2c:	adrp	x0, 0 <updatewindow>
     a30:	add	x0, x0, #0x0
     a34:	str	x0, [x24, #48]
     a38:	mov	w0, #0x3f51                	// #16209
     a3c:	str	w0, [x23, #8]
     a40:	b	d74 <inflate+0x884>
     a44:	sub	w27, w9, w8
     a48:	ldr	w0, [x23, #60]
     a4c:	str	x21, [x24]
     a50:	str	w20, [x24, #8]
     a54:	str	x7, [x24, #24]
     a58:	str	w8, [x24, #32]
     a5c:	str	x22, [x23, #80]
     a60:	str	w19, [x23, #88]
     a64:	cbnz	w0, b60 <inflate+0x670>
     a68:	cmp	w9, w8
     a6c:	b.eq	a80 <inflate+0x590>  // b.none
     a70:	ldr	w0, [x23, #8]
     a74:	mov	w1, #0x3f50                	// #16208
     a78:	cmp	w0, w1
     a7c:	b.ls	b50 <inflate+0x660>  // b.plast
     a80:	ldr	x3, [x24, #16]
     a84:	sub	w4, w28, w20
     a88:	ldr	x2, [x24, #40]
     a8c:	mov	w1, w27
     a90:	ldr	x0, [x23, #40]
     a94:	add	x3, x3, x4
     a98:	ldr	w4, [x23, #16]
     a9c:	add	x2, x2, x1
     aa0:	str	x3, [x24, #16]
     aa4:	add	x0, x0, x1
     aa8:	str	x2, [x24, #40]
     aac:	sub	w20, w28, w20
     ab0:	str	x0, [x23, #40]
     ab4:	tst	x4, #0x4
     ab8:	ccmp	w27, #0x0, #0x4, ne  // ne = any
     abc:	b.ne	e84 <inflate+0x994>  // b.any
     ac0:	ldp	w1, w3, [x23, #8]
     ac4:	mov	w2, #0x3f3f                	// #16191
     ac8:	ldr	w0, [x23, #88]
     acc:	cmp	w3, #0x0
     ad0:	add	w3, w0, #0x40
     ad4:	csel	w0, w3, w0, ne  // ne = any
     ad8:	cmp	w1, w2
     adc:	b.eq	e4c <inflate+0x95c>  // b.none
     ae0:	mov	w2, #0x3f47                	// #16199
     ae4:	cmp	w1, w2
     ae8:	mov	w3, #0x3f42                	// #16194
     aec:	add	w2, w0, #0x100
     af0:	ccmp	w1, w3, #0x4, ne  // ne = any
     af4:	orr	w20, w20, w27
     af8:	csel	w0, w2, w0, eq  // eq = none
     afc:	str	w0, [x24, #88]
     b00:	cmp	w20, #0x0
     b04:	ccmp	w26, #0x4, #0x4, ne  // ne = any
     b08:	b.ne	e64 <inflate+0x974>  // b.any
     b0c:	ldp	x19, x20, [sp, #16]
     b10:	cmp	w25, #0x0
     b14:	ldp	x21, x22, [sp, #32]
     b18:	mov	w0, #0xfffffffb            	// #-5
     b1c:	ldp	x23, x24, [sp, #48]
     b20:	csel	w25, w25, w0, ne  // ne = any
     b24:	ldp	x27, x28, [sp, #80]
     b28:	mov	w0, w25
     b2c:	ldp	x25, x26, [sp, #64]
     b30:	ldp	x29, x30, [sp], #176
     b34:	ret
     b38:	mov	w25, #0xfffffffe            	// #-2
     b3c:	mov	w0, w25
     b40:	ldp	x23, x24, [sp, #48]
     b44:	ldp	x25, x26, [sp, #64]
     b48:	ldp	x29, x30, [sp], #176
     b4c:	ret
     b50:	mov	w1, #0x3f4d                	// #16205
     b54:	cmp	w0, w1
     b58:	ccmp	w26, #0x4, #0x0, hi  // hi = pmore
     b5c:	b.eq	a80 <inflate+0x590>  // b.none
     b60:	mov	w2, w27
     b64:	mov	x1, x7
     b68:	mov	x0, x24
     b6c:	str	w9, [sp, #104]
     b70:	bl	0 <updatewindow>
     b74:	cbnz	w0, 1ab4 <inflate+0x15c4>
     b78:	ldr	w27, [x24, #32]
     b7c:	ldr	w9, [sp, #104]
     b80:	ldr	w20, [x24, #8]
     b84:	sub	w27, w9, w27
     b88:	b	a80 <inflate+0x590>
     b8c:	mov	w1, #0x3f40                	// #16192
     b90:	mov	w0, w1
     b94:	str	w1, [x23, #8]
     b98:	b	55c <inflate+0x6c>
     b9c:	cbz	w28, 544 <inflate+0x54>
     ba0:	mov	w25, #0xfffffffe            	// #-2
     ba4:	ldp	x21, x22, [sp, #32]
     ba8:	ldp	x23, x24, [sp, #48]
     bac:	ldp	x27, x28, [sp, #80]
     bb0:	b	b28 <inflate+0x638>
     bb4:	cbz	w20, a44 <inflate+0x554>
     bb8:	ldrb	w0, [x21], #1
     bbc:	sub	w20, w20, #0x1
     bc0:	lsl	x0, x0, x19
     bc4:	add	w19, w19, #0x8
     bc8:	add	x22, x22, x0
     bcc:	cmp	w19, #0x1f
     bd0:	b.ls	bb4 <inflate+0x6c4>  // b.plast
     bd4:	ldr	x2, [x24, #40]
     bd8:	sub	w3, w9, w8
     bdc:	ldr	x0, [x23, #40]
     be0:	add	x2, x2, x3
     be4:	str	x2, [x24, #40]
     be8:	sub	w2, w9, w8
     bec:	add	x0, x0, x3
     bf0:	str	x0, [x23, #40]
     bf4:	ands	w0, w1, #0x4
     bf8:	ccmp	w2, #0x0, #0x4, ne  // ne = any
     bfc:	b.ne	1564 <inflate+0x1074>  // b.any
     c00:	cbz	w0, 19d0 <inflate+0x14e0>
     c04:	ldr	w2, [x23, #24]
     c08:	mov	x0, x22
     c0c:	cbnz	w2, c34 <inflate+0x744>
     c10:	lsr	x2, x22, #8
     c14:	lsl	x0, x22, #8
     c18:	and	x3, x2, #0xff00
     c1c:	and	x0, x0, #0xff0000
     c20:	lsl	w4, w22, #24
     c24:	lsr	w2, w22, #24
     c28:	add	x0, x0, x4
     c2c:	orr	x2, x2, x3
     c30:	add	x0, x0, x2
     c34:	ldr	x2, [x23, #32]
     c38:	cmp	x2, x0
     c3c:	b.eq	19d0 <inflate+0x14e0>  // b.none
     c40:	adrp	x0, 0 <updatewindow>
     c44:	add	x0, x0, #0x0
     c48:	str	x0, [x24, #48]
     c4c:	mov	w9, w8
     c50:	mov	w0, #0x3f51                	// #16209
     c54:	str	w0, [x23, #8]
     c58:	b	d74 <inflate+0x884>
     c5c:	sub	w19, w19, w0
     c60:	lsr	x22, x22, x0
     c64:	str	w1, [x23, #92]
     c68:	str	w0, [x23, #7148]
     c6c:	mov	w0, #0x3f4d                	// #16205
     c70:	str	w0, [x23, #8]
     c74:	cbz	w8, 1ad4 <inflate+0x15e4>
     c78:	ldr	w1, [x23, #92]
     c7c:	sub	w8, w8, #0x1
     c80:	strb	w1, [x7], #1
     c84:	mov	w0, #0x3f48                	// #16200
     c88:	str	w0, [x23, #8]
     c8c:	cmp	w8, #0x101
     c90:	ccmp	w20, #0x5, #0x0, hi  // hi = pmore
     c94:	b.ls	eb4 <inflate+0x9c4>  // b.plast
     c98:	str	x21, [x24]
     c9c:	mov	w1, w9
     ca0:	str	w20, [x24, #8]
     ca4:	mov	x0, x24
     ca8:	str	x7, [x24, #24]
     cac:	str	w8, [x24, #32]
     cb0:	str	x22, [x23, #80]
     cb4:	str	w19, [x23, #88]
     cb8:	str	w9, [sp, #112]
     cbc:	bl	0 <inflate_fast>
     cc0:	ldr	w19, [x23, #88]
     cc4:	ldr	w0, [x23, #8]
     cc8:	mov	w1, #0x3f3f                	// #16191
     ccc:	ldr	w20, [x24, #8]
     cd0:	ldr	w8, [x24, #32]
     cd4:	cmp	w0, w1
     cd8:	ldr	w9, [sp, #112]
     cdc:	ldr	x21, [x24]
     ce0:	ldr	x7, [x24, #24]
     ce4:	ldr	x22, [x23, #80]
     ce8:	b.ne	580 <inflate+0x90>  // b.any
     cec:	mov	w0, #0xffffffff            	// #-1
     cf0:	str	w0, [x23, #7148]
     cf4:	b	908 <inflate+0x418>
     cf8:	mov	w0, #0x3f47                	// #16199
     cfc:	str	w0, [x23, #8]
     d00:	cmp	w26, #0x6
     d04:	b.eq	1934 <inflate+0x1444>  // b.none
     d08:	mov	w0, #0x3f48                	// #16200
     d0c:	str	w0, [x23, #8]
     d10:	b	c8c <inflate+0x79c>
     d14:	and	w3, w3, #0xf
     d18:	mov	w0, #0x3f4b                	// #16203
     d1c:	str	w0, [x23, #8]
     d20:	stp	w1, w3, [x23, #96]
     d24:	cbnz	w3, 1428 <inflate+0xf38>
     d28:	mov	w0, #0x3f4c                	// #16204
     d2c:	str	w0, [x23, #8]
     d30:	cbz	w8, 1ad4 <inflate+0x15e4>
     d34:	ldr	w1, [x23, #96]
     d38:	sub	w0, w9, w8
     d3c:	cmp	w1, w0
     d40:	b.ls	1684 <inflate+0x1194>  // b.plast
     d44:	ldr	w2, [x23, #64]
     d48:	add	w1, w1, w8
     d4c:	sub	w0, w1, w9
     d50:	cmp	w2, w0
     d54:	b.cs	f5c <inflate+0xa6c>  // b.hs, b.nlast
     d58:	ldr	w2, [x23, #7144]
     d5c:	cbz	w2, f5c <inflate+0xa6c>
     d60:	adrp	x0, 0 <updatewindow>
     d64:	add	x0, x0, #0x0
     d68:	str	x0, [x24, #48]
     d6c:	mov	w0, #0x3f51                	// #16209
     d70:	str	w0, [x23, #8]
     d74:	sub	w27, w9, w8
     d78:	mov	w25, #0xfffffffd            	// #-3
     d7c:	b	a48 <inflate+0x558>
     d80:	and	w3, w3, #0xf
     d84:	mov	w0, #0x3f49                	// #16201
     d88:	str	w0, [x23, #8]
     d8c:	str	w3, [x23, #100]
     d90:	cbnz	w3, 1210 <inflate+0xd20>
     d94:	ldr	w0, [x23, #92]
     d98:	mov	w1, #0x3f4a                	// #16202
     d9c:	str	w1, [x23, #8]
     da0:	str	w0, [x23, #7152]
     da4:	ldr	w0, [x23, #124]
     da8:	mov	w4, #0xffffffff            	// #-1
     dac:	ldr	x2, [x23, #112]
     db0:	lsl	w4, w4, w0
     db4:	bic	w0, w22, w4
     db8:	mvn	w4, w4
     dbc:	b	ddc <inflate+0x8ec>
     dc0:	cbz	w20, a44 <inflate+0x554>
     dc4:	ldrb	w0, [x21], #1
     dc8:	sub	w20, w20, #0x1
     dcc:	lsl	x0, x0, x19
     dd0:	add	x22, x22, x0
     dd4:	and	w0, w4, w22
     dd8:	add	w19, w19, #0x8
     ddc:	lsl	x0, x0, #2
     de0:	add	x1, x2, x0
     de4:	ldrb	w3, [x2, x0]
     de8:	ldrb	w0, [x1, #1]
     dec:	ldrh	w1, [x1, #2]
     df0:	cmp	w0, w19
     df4:	mov	w5, w0
     df8:	b.hi	dc0 <inflate+0x8d0>  // b.pmore
     dfc:	tst	w3, #0xf0
     e00:	mov	w4, w0
     e04:	b.eq	1740 <inflate+0x1250>  // b.none
     e08:	ldr	w2, [x23, #7148]
     e0c:	add	w2, w0, w2
     e10:	str	w2, [x23, #7148]
     e14:	sub	w19, w19, w0
     e18:	lsr	x22, x22, x0
     e1c:	tbz	w3, #6, d14 <inflate+0x824>
     e20:	adrp	x0, 0 <updatewindow>
     e24:	add	x0, x0, #0x0
     e28:	str	x0, [x24, #48]
     e2c:	mov	w0, #0x3f51                	// #16209
     e30:	str	w0, [x23, #8]
     e34:	b	d74 <inflate+0x884>
     e38:	mov	w25, #0xfffffffe            	// #-2
     e3c:	mov	w0, w25
     e40:	ldp	x25, x26, [sp, #64]
     e44:	ldp	x29, x30, [sp], #176
     e48:	ret
     e4c:	add	w0, w0, #0x80
     e50:	orr	w20, w20, w27
     e54:	str	w0, [x24, #88]
     e58:	cmp	w20, #0x0
     e5c:	ccmp	w26, #0x4, #0x4, ne  // ne = any
     e60:	b.eq	b0c <inflate+0x61c>  // b.none
     e64:	mov	w0, w25
     e68:	ldp	x19, x20, [sp, #16]
     e6c:	ldp	x21, x22, [sp, #32]
     e70:	ldp	x23, x24, [sp, #48]
     e74:	ldp	x25, x26, [sp, #64]
     e78:	ldp	x27, x28, [sp, #80]
     e7c:	ldp	x29, x30, [sp], #176
     e80:	ret
     e84:	ldr	w3, [x23, #24]
     e88:	ldr	x2, [x24, #24]
     e8c:	ldr	x0, [x23, #32]
     e90:	sub	x1, x2, x1
     e94:	mov	w2, w27
     e98:	cbz	w3, eac <inflate+0x9bc>
     e9c:	bl	0 <crc32>
     ea0:	str	x0, [x23, #32]
     ea4:	str	x0, [x24, #96]
     ea8:	b	ac0 <inflate+0x5d0>
     eac:	bl	0 <adler32>
     eb0:	b	ea0 <inflate+0x9b0>
     eb4:	ldr	w0, [x23, #120]
     eb8:	mov	w4, #0xffffffff            	// #-1
     ebc:	ldr	x2, [x23, #104]
     ec0:	lsl	w4, w4, w0
     ec4:	bic	w0, w22, w4
     ec8:	mvn	w4, w4
     ecc:	lsl	x0, x0, #2
     ed0:	add	x1, x2, x0
     ed4:	ldrb	w3, [x2, x0]
     ed8:	ldrb	w0, [x1, #1]
     edc:	ldrh	w1, [x1, #2]
     ee0:	str	wzr, [x23, #7148]
     ee4:	cmp	w19, w0
     ee8:	b.cs	f28 <inflate+0xa38>  // b.hs, b.nlast
     eec:	nop
     ef0:	cbz	w20, a44 <inflate+0x554>
     ef4:	ldrb	w0, [x21], #1
     ef8:	sub	w20, w20, #0x1
     efc:	lsl	x0, x0, x19
     f00:	add	x22, x22, x0
     f04:	and	w0, w4, w22
     f08:	add	w19, w19, #0x8
     f0c:	lsl	x0, x0, #2
     f10:	add	x1, x2, x0
     f14:	ldrb	w3, [x2, x0]
     f18:	ldrb	w0, [x1, #1]
     f1c:	ldrh	w1, [x1, #2]
     f20:	cmp	w0, w19
     f24:	b.hi	ef0 <inflate+0xa00>  // b.pmore
     f28:	cbz	w3, c5c <inflate+0x76c>
     f2c:	tst	w3, #0xf0
     f30:	b.eq	1adc <inflate+0x15ec>  // b.none
     f34:	sub	w19, w19, w0
     f38:	lsr	x22, x22, x0
     f3c:	str	w1, [x23, #92]
     f40:	str	w0, [x23, #7148]
     f44:	tbz	w3, #5, 19b4 <inflate+0x14c4>
     f48:	mov	w0, #0xffffffff            	// #-1
     f4c:	mov	w1, #0x3f3f                	// #16191
     f50:	str	w1, [x23, #8]
     f54:	str	w0, [x23, #7148]
     f58:	b	908 <inflate+0x418>
     f5c:	ldr	w2, [x23, #68]
     f60:	sub	w3, w9, w1
     f64:	ldr	x1, [x23, #72]
     f68:	cmp	w2, w0
     f6c:	b.cs	1734 <inflate+0x1244>  // b.hs, b.nlast
     f70:	ldr	w4, [x23, #60]
     f74:	sub	w0, w0, w2
     f78:	add	w2, w2, w4
     f7c:	add	w2, w2, w3
     f80:	add	x1, x1, x2
     f84:	ldr	w3, [x23, #92]
     f88:	cmp	w3, w0
     f8c:	csel	w2, w3, w0, ls  // ls = plast
     f90:	cmp	w2, w8
     f94:	mov	x0, #0x0                   	// #0
     f98:	csel	w2, w2, w8, ls  // ls = plast
     f9c:	sub	w4, w2, #0x1
     fa0:	sub	w8, w8, w2
     fa4:	add	x5, x4, #0x1
     fa8:	sub	w2, w3, w2
     fac:	str	w2, [x23, #92]
     fb0:	ldrb	w3, [x1, x0]
     fb4:	cmp	x0, x4
     fb8:	strb	w3, [x7, x0]
     fbc:	add	x0, x0, #0x1
     fc0:	b.ne	fb0 <inflate+0xac0>  // b.any
     fc4:	ldr	w0, [x23, #92]
     fc8:	add	x7, x7, x5
     fcc:	cbz	w0, d08 <inflate+0x818>
     fd0:	ldr	w0, [x23, #8]
     fd4:	b	580 <inflate+0x90>
     fd8:	ldr	w1, [x23, #16]
     fdc:	cbnz	w1, 1004 <inflate+0xb14>
     fe0:	mov	w0, #0x3f40                	// #16192
     fe4:	str	w0, [x23, #8]
     fe8:	b	914 <inflate+0x424>
     fec:	cbz	w20, a44 <inflate+0x554>
     ff0:	ldrb	w0, [x21], #1
     ff4:	sub	w20, w20, #0x1
     ff8:	lsl	x0, x0, x19
     ffc:	add	w19, w19, #0x8
    1000:	add	x22, x22, x0
    1004:	cmp	w19, #0xf
    1008:	b.ls	fec <inflate+0xafc>  // b.plast
    100c:	tst	x1, #0x2
    1010:	mov	x0, #0x8b1f                	// #35615
    1014:	ccmp	x22, x0, #0x0, ne  // ne = any
    1018:	b.eq	994 <inflate+0x4a4>  // b.none
    101c:	ldr	x0, [x23, #48]
    1020:	str	wzr, [x23, #24]
    1024:	cbz	x0, 1030 <inflate+0xb40>
    1028:	mov	w2, #0xffffffff            	// #-1
    102c:	str	w2, [x0, #72]
    1030:	tbz	w1, #0, 1a14 <inflate+0x1524>
    1034:	mov	x0, #0x4211                	// #16913
    1038:	ubfiz	x1, x22, #8, #8
    103c:	movk	x0, #0x2108, lsl #16
    1040:	add	x1, x1, x22, lsr #8
    1044:	movk	x0, #0x1084, lsl #32
    1048:	movk	x0, #0x842, lsl #48
    104c:	umulh	x2, x1, x0
    1050:	sub	x0, x1, x2
    1054:	add	x0, x2, x0, lsr #1
    1058:	lsr	x0, x0, #4
    105c:	lsl	x2, x0, #5
    1060:	sub	x0, x2, x0
    1064:	cmp	x1, x0
    1068:	b.ne	1a14 <inflate+0x1524>  // b.any
    106c:	and	w0, w22, #0xf
    1070:	cmp	w0, #0x8
    1074:	b.ne	a2c <inflate+0x53c>  // b.any
    1078:	ldr	w1, [x23, #56]
    107c:	lsr	x22, x22, #4
    1080:	and	w0, w22, #0xf
    1084:	sub	w19, w19, #0x4
    1088:	add	w0, w0, #0x8
    108c:	cbnz	w1, 1c5c <inflate+0x176c>
    1090:	str	w0, [x23, #56]
    1094:	cmp	w0, #0xf
    1098:	b.ls	1c6c <inflate+0x177c>  // b.plast
    109c:	adrp	x0, 0 <updatewindow>
    10a0:	add	x0, x0, #0x0
    10a4:	str	x0, [x24, #48]
    10a8:	mov	w0, #0x3f51                	// #16209
    10ac:	str	w0, [x23, #8]
    10b0:	b	d74 <inflate+0x884>
    10b4:	ldr	w2, [x23, #24]
    10b8:	mov	w1, w2
    10bc:	tbz	w2, #10, 704 <inflate+0x214>
    10c0:	cmp	w19, #0xf
    10c4:	b.hi	1480 <inflate+0xf90>  // b.pmore
    10c8:	cbz	w20, a44 <inflate+0x554>
    10cc:	ldrb	w0, [x21], #1
    10d0:	sub	w20, w20, #0x1
    10d4:	lsl	x0, x0, x19
    10d8:	add	w19, w19, #0x8
    10dc:	add	x22, x22, x0
    10e0:	b	10c0 <inflate+0xbd0>
    10e4:	ldr	w1, [x23, #24]
    10e8:	and	w0, w1, #0x400
    10ec:	b	71c <inflate+0x22c>
    10f0:	ldr	w2, [x23, #128]
    10f4:	ldr	w1, [x23, #140]
    10f8:	cmp	w1, w2
    10fc:	b.cs	114c <inflate+0xc5c>  // b.hs, b.nlast
    1100:	cmp	w19, #0x2
    1104:	b.hi	1120 <inflate+0xc30>  // b.pmore
    1108:	cbz	w20, a44 <inflate+0x554>
    110c:	ldrb	w0, [x21], #1
    1110:	sub	w20, w20, #0x1
    1114:	lsl	x0, x0, x19
    1118:	add	w19, w19, #0x8
    111c:	add	x22, x22, x0
    1120:	ldr	x0, [sp, #104]
    1124:	and	w3, w22, #0x7
    1128:	sub	w19, w19, #0x3
    112c:	lsr	x22, x22, #3
    1130:	ldrh	w0, [x0, w1, uxtw #1]
    1134:	add	w1, w1, #0x1
    1138:	str	w1, [x23, #140]
    113c:	cmp	w1, w2
    1140:	add	x0, x23, x0, lsl #1
    1144:	strh	w3, [x0, #152]
    1148:	b.cc	1100 <inflate+0xc10>  // b.lo, b.ul, b.last
    114c:	cmp	w1, #0x12
    1150:	b.hi	118c <inflate+0xc9c>  // b.pmore
    1154:	ldr	x3, [sp, #104]
    1158:	mov	w2, #0x12                  	// #18
    115c:	sub	w2, w2, w1
    1160:	add	x0, x27, #0x882
    1164:	add	x2, x2, w1, uxtw
    1168:	add	x1, x3, w1, uxtw #1
    116c:	add	x2, x0, x2, lsl #1
    1170:	ldrh	w0, [x1], #2
    1174:	cmp	x2, x1
    1178:	add	x0, x23, x0, lsl #1
    117c:	strh	wzr, [x0, #152]
    1180:	b.ne	1170 <inflate+0xc80>  // b.any
    1184:	mov	w0, #0x13                  	// #19
    1188:	str	w0, [x23, #140]
    118c:	add	x0, x23, #0x558
    1190:	mov	w1, #0x7                   	// #7
    1194:	str	x0, [x23, #104]
    1198:	add	x5, x23, #0x318
    119c:	str	w1, [x23, #120]
    11a0:	add	x4, x23, #0x78
    11a4:	str	x0, [x23, #144]
    11a8:	add	x3, x23, #0x90
    11ac:	add	x1, x23, #0x98
    11b0:	mov	w2, #0x13                  	// #19
    11b4:	mov	w0, #0x0                   	// #0
    11b8:	str	x7, [sp, #112]
    11bc:	str	w8, [sp, #120]
    11c0:	str	w9, [sp, #128]
    11c4:	bl	0 <inflate_table>
    11c8:	ldr	w8, [sp, #120]
    11cc:	ldr	w9, [sp, #128]
    11d0:	ldr	x7, [sp, #112]
    11d4:	cbz	w0, 1b9c <inflate+0x16ac>
    11d8:	adrp	x0, 0 <updatewindow>
    11dc:	add	x0, x0, #0x0
    11e0:	str	x0, [x24, #48]
    11e4:	mov	w0, #0x3f51                	// #16209
    11e8:	str	w0, [x23, #8]
    11ec:	b	d74 <inflate+0x884>
    11f0:	ldr	w3, [x23, #100]
    11f4:	b	d90 <inflate+0x8a0>
    11f8:	cbz	w20, a44 <inflate+0x554>
    11fc:	ldrb	w0, [x21], #1
    1200:	sub	w20, w20, #0x1
    1204:	lsl	x0, x0, x19
    1208:	add	w19, w19, #0x8
    120c:	add	x22, x22, x0
    1210:	cmp	w19, w3
    1214:	b.cc	11f8 <inflate+0xd08>  // b.lo, b.ul, b.last
    1218:	ldr	w2, [x23, #92]
    121c:	mov	w0, #0xffffffff            	// #-1
    1220:	ldr	w1, [x23, #7148]
    1224:	lsl	w0, w0, w3
    1228:	bic	w0, w22, w0
    122c:	sub	w19, w19, w3
    1230:	add	w0, w0, w2
    1234:	lsr	x22, x22, x3
    1238:	add	w3, w1, w3
    123c:	str	w0, [x23, #92]
    1240:	str	w3, [x23, #7148]
    1244:	b	d98 <inflate+0x8a8>
    1248:	ldr	w1, [x23, #16]
    124c:	b	940 <inflate+0x450>
    1250:	sub	w27, w9, w8
    1254:	mov	w25, #0x1                   	// #1
    1258:	b	a48 <inflate+0x558>
    125c:	ldr	w0, [x23, #92]
    1260:	mov	w1, #0x3f43                	// #16195
    1264:	str	w1, [x23, #8]
    1268:	cbz	w0, 160c <inflate+0x111c>
    126c:	cmp	w20, w0
    1270:	csel	w0, w20, w0, ls  // ls = plast
    1274:	cmp	w0, w8
    1278:	csel	w3, w0, w8, ls  // ls = plast
    127c:	cbz	w3, a44 <inflate+0x554>
    1280:	mov	w2, w3
    1284:	mov	x1, x21
    1288:	mov	x0, x7
    128c:	str	x2, [sp, #112]
    1290:	str	w3, [sp, #120]
    1294:	str	w8, [sp, #128]
    1298:	str	w9, [sp, #136]
    129c:	bl	0 <memcpy>
    12a0:	ldr	w3, [sp, #120]
    12a4:	mov	x7, x0
    12a8:	ldr	w0, [x23, #92]
    12ac:	ldr	x2, [sp, #112]
    12b0:	sub	w0, w0, w3
    12b4:	ldr	w8, [sp, #128]
    12b8:	sub	w20, w20, w3
    12bc:	ldr	w9, [sp, #136]
    12c0:	add	x21, x21, x2
    12c4:	sub	w8, w8, w3
    12c8:	add	x7, x7, x2
    12cc:	str	w0, [x23, #92]
    12d0:	ldr	w0, [x23, #8]
    12d4:	b	580 <inflate+0x90>
    12d8:	ldr	w5, [x23, #140]
    12dc:	ldp	w2, w11, [x23, #132]
    12e0:	add	w11, w2, w11
    12e4:	cmp	w11, w5
    12e8:	b.ls	1378 <inflate+0xe88>  // b.plast
    12ec:	ldr	w0, [x23, #120]
    12f0:	mov	w3, #0xffffffff            	// #-1
    12f4:	ldr	x4, [x23, #104]
    12f8:	mov	w13, #0xfffffffd            	// #-3
    12fc:	lsl	w3, w3, w0
    1300:	mvn	w3, w3
    1304:	mov	w12, #0xfffffff9            	// #-7
    1308:	and	w0, w3, w22
    130c:	add	x0, x4, x0, lsl #2
    1310:	ldrb	w1, [x0, #1]
    1314:	ldrh	w0, [x0, #2]
    1318:	cmp	w19, w1
    131c:	b.cs	1350 <inflate+0xe60>  // b.hs, b.nlast
    1320:	cbz	w20, a44 <inflate+0x554>
    1324:	ldrb	w0, [x21], #1
    1328:	sub	w20, w20, #0x1
    132c:	lsl	x0, x0, x19
    1330:	add	x22, x22, x0
    1334:	and	w0, w3, w22
    1338:	add	w19, w19, #0x8
    133c:	add	x0, x4, x0, lsl #2
    1340:	ldrb	w1, [x0, #1]
    1344:	ldrh	w0, [x0, #2]
    1348:	cmp	w1, w19
    134c:	b.hi	1320 <inflate+0xe30>  // b.pmore
    1350:	cmp	w0, #0xf
    1354:	b.hi	16a0 <inflate+0x11b0>  // b.pmore
    1358:	add	x14, x23, w5, uxtw #1
    135c:	sub	w19, w19, w1
    1360:	add	w5, w5, #0x1
    1364:	str	w5, [x23, #140]
    1368:	lsr	x22, x22, x1
    136c:	strh	w0, [x14, #152]
    1370:	cmp	w11, w5
    1374:	b.hi	1308 <inflate+0xe18>  // b.pmore
    1378:	ldr	w0, [x23, #8]
    137c:	mov	w11, #0x3f51                	// #16209
    1380:	cmp	w0, w11
    1384:	b.eq	d74 <inflate+0x884>  // b.none
    1388:	ldrh	w0, [x23, #664]
    138c:	cbnz	w0, 1bf4 <inflate+0x1704>
    1390:	adrp	x0, 0 <updatewindow>
    1394:	add	x0, x0, #0x0
    1398:	str	x0, [x24, #48]
    139c:	str	w11, [x23, #8]
    13a0:	b	d74 <inflate+0x884>
    13a4:	ldr	w1, [x23, #24]
    13a8:	b	7ec <inflate+0x2fc>
    13ac:	cbz	w20, a44 <inflate+0x554>
    13b0:	ldrb	w0, [x21], #1
    13b4:	sub	w20, w20, #0x1
    13b8:	lsl	x0, x0, x19
    13bc:	add	w19, w19, #0x8
    13c0:	add	x22, x22, x0
    13c4:	cmp	w19, #0xf
    13c8:	b.ls	13ac <inflate+0xebc>  // b.plast
    13cc:	ldr	w0, [x23, #16]
    13d0:	tbz	w0, #2, 1694 <inflate+0x11a4>
    13d4:	ldrh	w0, [x23, #32]
    13d8:	cmp	x0, x22
    13dc:	b.eq	1694 <inflate+0x11a4>  // b.none
    13e0:	adrp	x0, 0 <updatewindow>
    13e4:	add	x0, x0, #0x0
    13e8:	str	x0, [x24, #48]
    13ec:	mov	w0, #0x3f51                	// #16209
    13f0:	str	w0, [x23, #8]
    13f4:	b	d74 <inflate+0x884>
    13f8:	ldr	w0, [x23, #92]
    13fc:	b	1268 <inflate+0xd78>
    1400:	ldr	w1, [x23, #24]
    1404:	b	7d0 <inflate+0x2e0>
    1408:	ldr	w3, [x23, #100]
    140c:	b	d24 <inflate+0x834>
    1410:	cbz	w20, a44 <inflate+0x554>
    1414:	ldrb	w0, [x21], #1
    1418:	sub	w20, w20, #0x1
    141c:	lsl	x0, x0, x19
    1420:	add	w19, w19, #0x8
    1424:	add	x22, x22, x0
    1428:	cmp	w19, w3
    142c:	b.cc	1410 <inflate+0xf20>  // b.lo, b.ul, b.last
    1430:	ldr	w2, [x23, #96]
    1434:	mov	w0, #0xffffffff            	// #-1
    1438:	ldr	w1, [x23, #7148]
    143c:	lsl	w0, w0, w3
    1440:	bic	w0, w22, w0
    1444:	sub	w19, w19, w3
    1448:	add	w0, w2, w0
    144c:	lsr	x22, x22, x3
    1450:	add	w3, w1, w3
    1454:	str	w0, [x23, #96]
    1458:	str	w3, [x23, #7148]
    145c:	b	d28 <inflate+0x838>
    1460:	ldr	w1, [x23, #24]
    1464:	b	804 <inflate+0x314>
    1468:	mov	w25, #0xfffffffc            	// #-4
    146c:	ldp	x19, x20, [sp, #16]
    1470:	ldp	x21, x22, [sp, #32]
    1474:	ldp	x23, x24, [sp, #48]
    1478:	ldp	x27, x28, [sp, #80]
    147c:	b	b28 <inflate+0x638>
    1480:	ldr	x0, [x23, #48]
    1484:	str	w22, [x23, #92]
    1488:	cbz	x0, 1490 <inflate+0xfa0>
    148c:	str	w22, [x0, #32]
    1490:	tbz	w2, #9, 149c <inflate+0xfac>
    1494:	ldr	w0, [x23, #16]
    1498:	tbnz	w0, #2, 1b58 <inflate+0x1668>
    149c:	mov	w1, w2
    14a0:	and	w0, w2, #0x400
    14a4:	mov	w19, #0x0                   	// #0
    14a8:	mov	x22, #0x0                   	// #0
    14ac:	b	714 <inflate+0x224>
    14b0:	cmp	w19, #0x2
    14b4:	b.hi	14d0 <inflate+0xfe0>  // b.pmore
    14b8:	cbz	w20, 1934 <inflate+0x1444>
    14bc:	ldrb	w0, [x21], #1
    14c0:	sub	w20, w20, #0x1
    14c4:	lsl	x0, x0, x19
    14c8:	add	w19, w19, #0x8
    14cc:	add	x22, x22, x0
    14d0:	and	w0, w22, #0x1
    14d4:	str	w0, [x23, #12]
    14d8:	ubfx	w0, w22, #1, #2
    14dc:	cmp	w0, #0x2
    14e0:	b.eq	1960 <inflate+0x1470>  // b.none
    14e4:	cmp	w0, #0x3
    14e8:	b.eq	1940 <inflate+0x1450>  // b.none
    14ec:	cmp	w0, #0x1
    14f0:	b.eq	1908 <inflate+0x1418>  // b.none
    14f4:	lsr	x22, x22, #3
    14f8:	sub	w19, w19, #0x3
    14fc:	mov	w0, #0x3f41                	// #16193
    1500:	str	w0, [x23, #8]
    1504:	and	w0, w19, #0x7
    1508:	and	w19, w19, #0xfffffff8
    150c:	cmp	w19, #0x1f
    1510:	lsr	x22, x22, x0
    1514:	b.hi	1538 <inflate+0x1048>  // b.pmore
    1518:	cbz	w20, a44 <inflate+0x554>
    151c:	ldrb	w0, [x21], #1
    1520:	sub	w20, w20, #0x1
    1524:	lsl	x0, x0, x19
    1528:	add	w19, w19, #0x8
    152c:	add	x22, x22, x0
    1530:	cmp	w19, #0x1f
    1534:	b.ls	1518 <inflate+0x1028>  // b.plast
    1538:	lsr	x1, x22, #16
    153c:	and	x0, x22, #0xffff
    1540:	eor	x1, x1, #0xffff
    1544:	cmp	x1, w22, uxth
    1548:	b.eq	1800 <inflate+0x1310>  // b.none
    154c:	adrp	x0, 0 <updatewindow>
    1550:	add	x0, x0, #0x0
    1554:	str	x0, [x24, #48]
    1558:	mov	w0, #0x3f51                	// #16209
    155c:	str	w0, [x23, #8]
    1560:	b	d74 <inflate+0x884>
    1564:	ldr	w4, [x23, #24]
    1568:	sub	x1, x7, x3
    156c:	str	x7, [sp, #104]
    1570:	str	w8, [sp, #112]
    1574:	ldr	x0, [x23, #32]
    1578:	cbz	w4, 1bb0 <inflate+0x16c0>
    157c:	bl	0 <crc32>
    1580:	mov	x2, x0
    1584:	ldr	w8, [sp, #112]
    1588:	ldr	x7, [sp, #104]
    158c:	str	x2, [x23, #32]
    1590:	ldr	w1, [x23, #16]
    1594:	str	x2, [x24, #96]
    1598:	and	w0, w1, #0x4
    159c:	b	c00 <inflate+0x710>
    15a0:	cbz	w20, a44 <inflate+0x554>
    15a4:	mov	w2, #0x0                   	// #0
    15a8:	ldr	x1, [x23, #48]
    15ac:	ldrb	w3, [x21, w2, uxtw]
    15b0:	add	w2, w2, #0x1
    15b4:	cbz	x1, 15dc <inflate+0x10ec>
    15b8:	ldr	x0, [x1, #56]
    15bc:	cbz	x0, 15dc <inflate+0x10ec>
    15c0:	ldr	w4, [x1, #64]
    15c4:	ldr	w1, [x23, #92]
    15c8:	cmp	w1, w4
    15cc:	b.cs	15dc <inflate+0x10ec>  // b.hs, b.nlast
    15d0:	add	w4, w1, #0x1
    15d4:	str	w4, [x23, #92]
    15d8:	strb	w3, [x0, w1, uxtw]
    15dc:	cmp	w3, #0x0
    15e0:	ccmp	w20, w2, #0x0, ne  // ne = any
    15e4:	b.hi	15a8 <inflate+0x10b8>  // b.pmore
    15e8:	ldr	w0, [x23, #24]
    15ec:	tbz	w0, #9, 15f8 <inflate+0x1108>
    15f0:	ldr	w0, [x23, #16]
    15f4:	tbnz	w0, #2, 17c4 <inflate+0x12d4>
    15f8:	add	x21, x21, w2, uxtw
    15fc:	sub	w20, w20, w2
    1600:	cbnz	w3, a44 <inflate+0x554>
    1604:	ldr	w1, [x23, #24]
    1608:	b	7fc <inflate+0x30c>
    160c:	mov	w0, #0x3f3f                	// #16191
    1610:	str	w0, [x23, #8]
    1614:	b	908 <inflate+0x418>
    1618:	cbz	w20, a44 <inflate+0x554>
    161c:	mov	w2, #0x0                   	// #0
    1620:	ldr	x1, [x23, #48]
    1624:	ldrb	w3, [x21, w2, uxtw]
    1628:	add	w2, w2, #0x1
    162c:	cbz	x1, 1654 <inflate+0x1164>
    1630:	ldr	x0, [x1, #40]
    1634:	cbz	x0, 1654 <inflate+0x1164>
    1638:	ldr	w4, [x1, #48]
    163c:	ldr	w1, [x23, #92]
    1640:	cmp	w1, w4
    1644:	b.cs	1654 <inflate+0x1164>  // b.hs, b.nlast
    1648:	add	w4, w1, #0x1
    164c:	str	w4, [x23, #92]
    1650:	strb	w3, [x0, w1, uxtw]
    1654:	cmp	w3, #0x0
    1658:	ccmp	w20, w2, #0x0, ne  // ne = any
    165c:	b.hi	1620 <inflate+0x1130>  // b.pmore
    1660:	ldr	w0, [x23, #24]
    1664:	tbz	w0, #9, 1670 <inflate+0x1180>
    1668:	ldr	w0, [x23, #16]
    166c:	tbnz	w0, #2, 1840 <inflate+0x1350>
    1670:	add	x21, x21, w2, uxtw
    1674:	sub	w20, w20, w2
    1678:	cbnz	w3, a44 <inflate+0x554>
    167c:	ldr	w1, [x23, #24]
    1680:	b	7e0 <inflate+0x2f0>
    1684:	ldr	w2, [x23, #92]
    1688:	sub	x1, x7, w1, uxtw
    168c:	mov	w3, w2
    1690:	b	f90 <inflate+0xaa0>
    1694:	mov	w19, #0x0                   	// #0
    1698:	mov	x22, #0x0                   	// #0
    169c:	b	808 <inflate+0x318>
    16a0:	cmp	w0, #0x10
    16a4:	b.eq	1a5c <inflate+0x156c>  // b.none
    16a8:	cmp	w0, #0x11
    16ac:	b.eq	18b8 <inflate+0x13c8>  // b.none
    16b0:	add	w14, w1, #0x7
    16b4:	cmp	w14, w19
    16b8:	b.ls	16e0 <inflate+0x11f0>  // b.plast
    16bc:	nop
    16c0:	cbz	w20, a44 <inflate+0x554>
    16c4:	ldrb	w0, [x21], #1
    16c8:	sub	w20, w20, #0x1
    16cc:	lsl	x0, x0, x19
    16d0:	add	w19, w19, #0x8
    16d4:	add	x22, x22, x0
    16d8:	cmp	w14, w19
    16dc:	b.hi	16c0 <inflate+0x11d0>  // b.pmore
    16e0:	lsr	x22, x22, x1
    16e4:	sub	w1, w12, w1
    16e8:	and	w0, w22, #0x7f
    16ec:	add	w19, w19, w1
    16f0:	lsr	x22, x22, #7
    16f4:	add	w1, w0, #0xb
    16f8:	mov	w14, #0x0                   	// #0
    16fc:	add	w5, w1, w5
    1700:	cmp	w5, w11
    1704:	b.hi	1cc0 <inflate+0x17d0>  // b.pmore
    1708:	ldr	w0, [x23, #140]
    170c:	and	w14, w14, #0xffff
    1710:	add	w5, w0, w1
    1714:	nop
    1718:	add	x1, x23, w0, uxtw #1
    171c:	add	w0, w0, #0x1
    1720:	cmp	w5, w0
    1724:	strh	w14, [x1, #152]
    1728:	b.ne	1718 <inflate+0x1228>  // b.any
    172c:	str	w5, [x23, #140]
    1730:	b	1370 <inflate+0xe80>
    1734:	add	w2, w2, w3
    1738:	add	x1, x1, x2
    173c:	b	f84 <inflate+0xa94>
    1740:	add	w3, w3, w0
    1744:	mov	w11, #0xffffffff            	// #-1
    1748:	mov	w12, w1
    174c:	lsl	w11, w11, w3
    1750:	bic	w1, w22, w11
    1754:	mvn	w11, w11
    1758:	lsr	w0, w1, w0
    175c:	b	1780 <inflate+0x1290>
    1760:	cbz	w20, a44 <inflate+0x554>
    1764:	ldrb	w0, [x21], #1
    1768:	sub	w20, w20, #0x1
    176c:	lsl	x0, x0, x19
    1770:	add	x22, x22, x0
    1774:	and	w0, w11, w22
    1778:	add	w19, w19, #0x8
    177c:	lsr	w0, w0, w4
    1780:	add	w0, w0, w12
    1784:	lsl	x0, x0, #2
    1788:	add	x1, x2, x0
    178c:	ldrb	w3, [x2, x0]
    1790:	ldrb	w0, [x1, #1]
    1794:	ldrh	w1, [x1, #2]
    1798:	add	w13, w0, w4
    179c:	cmp	w13, w19
    17a0:	b.hi	1760 <inflate+0x1270>  // b.pmore
    17a4:	ldr	w2, [x23, #7148]
    17a8:	sub	w19, w19, w5
    17ac:	lsr	x22, x22, x4
    17b0:	add	w2, w4, w2
    17b4:	b	e0c <inflate+0x91c>
    17b8:	mov	x22, #0x0                   	// #0
    17bc:	mov	w19, #0x0                   	// #0
    17c0:	b	10c8 <inflate+0xbd8>
    17c4:	ldr	x0, [x23, #32]
    17c8:	mov	x1, x21
    17cc:	str	w2, [sp, #112]
    17d0:	str	x7, [sp, #120]
    17d4:	str	w3, [sp, #128]
    17d8:	str	w8, [sp, #136]
    17dc:	str	w9, [sp, #144]
    17e0:	bl	0 <crc32>
    17e4:	ldr	w2, [sp, #112]
    17e8:	ldr	w3, [sp, #128]
    17ec:	ldr	w8, [sp, #136]
    17f0:	ldr	w9, [sp, #144]
    17f4:	str	x0, [x23, #32]
    17f8:	ldr	x7, [sp, #120]
    17fc:	b	15f8 <inflate+0x1108>
    1800:	mov	w1, #0x3f42                	// #16194
    1804:	str	w1, [x23, #8]
    1808:	str	w0, [x23, #92]
    180c:	cmp	w26, #0x6
    1810:	b.eq	1d64 <inflate+0x1874>  // b.none
    1814:	mov	w19, #0x0                   	// #0
    1818:	mov	x22, #0x0                   	// #0
    181c:	b	1260 <inflate+0xd70>
    1820:	tst	x22, #0xe000
    1824:	b.eq	62c <inflate+0x13c>  // b.none
    1828:	adrp	x0, 0 <updatewindow>
    182c:	add	x0, x0, #0x0
    1830:	str	x0, [x24, #48]
    1834:	mov	w0, #0x3f51                	// #16209
    1838:	str	w0, [x23, #8]
    183c:	b	d74 <inflate+0x884>
    1840:	ldr	x0, [x23, #32]
    1844:	mov	x1, x21
    1848:	str	w2, [sp, #112]
    184c:	str	x7, [sp, #120]
    1850:	str	w3, [sp, #128]
    1854:	str	w8, [sp, #136]
    1858:	str	w9, [sp, #144]
    185c:	bl	0 <crc32>
    1860:	ldr	w2, [sp, #112]
    1864:	ldr	w3, [sp, #128]
    1868:	ldr	w8, [sp, #136]
    186c:	ldr	w9, [sp, #144]
    1870:	str	x0, [x23, #32]
    1874:	ldr	x7, [sp, #120]
    1878:	b	1670 <inflate+0x1180>
    187c:	ldr	x0, [x23, #32]
    1880:	add	x1, sp, #0xa8
    1884:	mov	w2, #0x2                   	// #2
    1888:	str	x7, [sp, #112]
    188c:	str	w8, [sp, #120]
    1890:	str	w9, [sp, #128]
    1894:	strh	w22, [sp, #168]
    1898:	bl	0 <crc32>
    189c:	ldr	w2, [x23, #24]
    18a0:	ldr	w8, [sp, #120]
    18a4:	ldr	w9, [sp, #128]
    18a8:	mov	w1, w2
    18ac:	str	x0, [x23, #32]
    18b0:	ldr	x7, [sp, #112]
    18b4:	b	6f0 <inflate+0x200>
    18b8:	add	w14, w1, #0x3
    18bc:	cmp	w19, w14
    18c0:	b.cs	18e8 <inflate+0x13f8>  // b.hs, b.nlast
    18c4:	nop
    18c8:	cbz	w20, a44 <inflate+0x554>
    18cc:	ldrb	w0, [x21], #1
    18d0:	sub	w20, w20, #0x1
    18d4:	lsl	x0, x0, x19
    18d8:	add	w19, w19, #0x8
    18dc:	add	x22, x22, x0
    18e0:	cmp	w19, w14
    18e4:	b.cc	18c8 <inflate+0x13d8>  // b.lo, b.ul, b.last
    18e8:	lsr	x22, x22, x1
    18ec:	sub	w1, w13, w1
    18f0:	and	w0, w22, #0x7
    18f4:	add	w19, w19, w1
    18f8:	lsr	x22, x22, #3
    18fc:	add	w1, w0, #0x3
    1900:	mov	w14, #0x0                   	// #0
    1904:	b	16fc <inflate+0x120c>
    1908:	mov	x1, #0x9                   	// #9
    190c:	add	x0, x27, #0x800
    1910:	movk	x1, #0x5, lsl #32
    1914:	mov	w2, #0x3f47                	// #16199
    1918:	str	w2, [x23, #8]
    191c:	lsr	x22, x22, #3
    1920:	stp	x27, x0, [x23, #104]
    1924:	sub	w19, w19, #0x3
    1928:	cmp	w26, #0x6
    192c:	str	x1, [x23, #120]
    1930:	b.ne	d08 <inflate+0x818>  // b.any
    1934:	sub	w27, w9, w8
    1938:	mov	w25, #0x0                   	// #0
    193c:	b	a48 <inflate+0x558>
    1940:	adrp	x0, 0 <updatewindow>
    1944:	add	x0, x0, #0x0
    1948:	str	x0, [x24, #48]
    194c:	lsr	x22, x22, #3
    1950:	mov	w0, #0x3f51                	// #16209
    1954:	sub	w19, w19, #0x3
    1958:	str	w0, [x23, #8]
    195c:	b	d74 <inflate+0x884>
    1960:	mov	w0, #0x3f44                	// #16196
    1964:	lsr	x22, x22, #3
    1968:	sub	w19, w19, #0x3
    196c:	str	w0, [x23, #8]
    1970:	b	5d8 <inflate+0xe8>
    1974:	ldr	x0, [x23, #32]
    1978:	mov	w2, w4
    197c:	mov	x1, x21
    1980:	str	w4, [sp, #112]
    1984:	str	x7, [sp, #120]
    1988:	str	w8, [sp, #128]
    198c:	str	w9, [sp, #136]
    1990:	str	x5, [sp, #144]
    1994:	bl	0 <crc32>
    1998:	ldr	w4, [sp, #112]
    199c:	ldr	w8, [sp, #128]
    19a0:	ldr	w9, [sp, #136]
    19a4:	str	x0, [x23, #32]
    19a8:	ldr	x7, [sp, #120]
    19ac:	ldr	x5, [sp, #144]
    19b0:	b	7a8 <inflate+0x2b8>
    19b4:	tbz	w3, #6, d80 <inflate+0x890>
    19b8:	adrp	x0, 0 <updatewindow>
    19bc:	add	x0, x0, #0x0
    19c0:	str	x0, [x24, #48]
    19c4:	mov	w0, #0x3f51                	// #16209
    19c8:	str	w0, [x23, #8]
    19cc:	b	d74 <inflate+0x884>
    19d0:	mov	w9, w8
    19d4:	mov	w19, #0x0                   	// #0
    19d8:	mov	x22, #0x0                   	// #0
    19dc:	b	938 <inflate+0x448>
    19e0:	ldr	x0, [x23, #32]
    19e4:	add	x1, sp, #0xa8
    19e8:	mov	w2, #0x4                   	// #4
    19ec:	str	x7, [sp, #112]
    19f0:	str	w8, [sp, #120]
    19f4:	str	w9, [sp, #128]
    19f8:	str	w22, [sp, #168]
    19fc:	bl	0 <crc32>
    1a00:	ldr	w8, [sp, #120]
    1a04:	ldr	w9, [sp, #128]
    1a08:	str	x0, [x23, #32]
    1a0c:	ldr	x7, [sp, #112]
    1a10:	b	694 <inflate+0x1a4>
    1a14:	adrp	x0, 0 <updatewindow>
    1a18:	add	x0, x0, #0x0
    1a1c:	str	x0, [x24, #48]
    1a20:	mov	w0, #0x3f51                	// #16209
    1a24:	str	w0, [x23, #8]
    1a28:	b	d74 <inflate+0x884>
    1a2c:	mov	w19, #0x0                   	// #0
    1a30:	mov	x22, #0x0                   	// #0
    1a34:	mov	w0, #0x3f50                	// #16208
    1a38:	sub	w27, w9, w8
    1a3c:	mov	w25, #0x1                   	// #1
    1a40:	str	w0, [x23, #8]
    1a44:	b	a48 <inflate+0x558>
    1a48:	mov	w0, #0x3f45                	// #16197
    1a4c:	mov	w1, #0x0                   	// #0
    1a50:	str	w0, [x23, #8]
    1a54:	str	wzr, [x23, #140]
    1a58:	b	1100 <inflate+0xc10>
    1a5c:	add	w14, w1, #0x2
    1a60:	cmp	w19, w14
    1a64:	b.cs	1a88 <inflate+0x1598>  // b.hs, b.nlast
    1a68:	cbz	w20, a44 <inflate+0x554>
    1a6c:	ldrb	w0, [x21], #1
    1a70:	sub	w20, w20, #0x1
    1a74:	lsl	x0, x0, x19
    1a78:	add	w19, w19, #0x8
    1a7c:	add	x22, x22, x0
    1a80:	cmp	w19, w14
    1a84:	b.cc	1a68 <inflate+0x1578>  // b.lo, b.ul, b.last
    1a88:	sub	w19, w19, w1
    1a8c:	lsr	x22, x22, x1
    1a90:	cbz	w5, 1cc0 <inflate+0x17d0>
    1a94:	sub	w0, w5, #0x1
    1a98:	and	w1, w22, #0x3
    1a9c:	sub	w19, w19, #0x2
    1aa0:	add	w1, w1, #0x3
    1aa4:	add	x0, x23, x0, lsl #1
    1aa8:	lsr	x22, x22, #2
    1aac:	ldrh	w14, [x0, #152]
    1ab0:	b	16fc <inflate+0x120c>
    1ab4:	mov	w0, #0x3f52                	// #16210
    1ab8:	mov	w25, #0xfffffffc            	// #-4
    1abc:	ldp	x19, x20, [sp, #16]
    1ac0:	ldp	x21, x22, [sp, #32]
    1ac4:	ldp	x27, x28, [sp, #80]
    1ac8:	str	w0, [x23, #8]
    1acc:	ldp	x23, x24, [sp, #48]
    1ad0:	b	b28 <inflate+0x638>
    1ad4:	mov	w27, w9
    1ad8:	b	a48 <inflate+0x558>
    1adc:	add	w3, w3, w0
    1ae0:	mov	w11, #0xffffffff            	// #-1
    1ae4:	lsl	w11, w11, w3
    1ae8:	bic	w3, w22, w11
    1aec:	mvn	w11, w11
    1af0:	b	1b10 <inflate+0x1620>
    1af4:	cbz	w20, a44 <inflate+0x554>
    1af8:	ldrb	w3, [x21], #1
    1afc:	sub	w20, w20, #0x1
    1b00:	lsl	x3, x3, x19
    1b04:	add	x22, x22, x3
    1b08:	and	w3, w11, w22
    1b0c:	add	w19, w19, #0x8
    1b10:	lsr	w3, w3, w0
    1b14:	add	w3, w3, w1
    1b18:	lsl	x3, x3, #2
    1b1c:	add	x4, x2, x3
    1b20:	ldrb	w3, [x2, x3]
    1b24:	ldrb	w5, [x4, #1]
    1b28:	ldrh	w12, [x4, #2]
    1b2c:	add	w4, w5, w0
    1b30:	cmp	w4, w19
    1b34:	b.hi	1af4 <inflate+0x1604>  // b.pmore
    1b38:	str	w12, [x23, #92]
    1b3c:	sub	w19, w19, w0
    1b40:	str	w4, [x23, #7148]
    1b44:	lsr	x22, x22, x0
    1b48:	sub	w19, w19, w5
    1b4c:	lsr	x22, x22, x5
    1b50:	cbnz	w3, f44 <inflate+0xa54>
    1b54:	b	c6c <inflate+0x77c>
    1b58:	ldr	x0, [x23, #32]
    1b5c:	add	x1, sp, #0xa8
    1b60:	mov	w2, #0x2                   	// #2
    1b64:	str	x7, [sp, #112]
    1b68:	str	w8, [sp, #120]
    1b6c:	mov	w19, #0x0                   	// #0
    1b70:	str	w9, [sp, #128]
    1b74:	strh	w22, [sp, #168]
    1b78:	bl	0 <crc32>
    1b7c:	ldr	w1, [x23, #24]
    1b80:	mov	x22, #0x0                   	// #0
    1b84:	ldr	w8, [sp, #120]
    1b88:	ldr	w9, [sp, #128]
    1b8c:	str	x0, [x23, #32]
    1b90:	and	w0, w1, #0x400
    1b94:	ldr	x7, [sp, #112]
    1b98:	b	714 <inflate+0x224>
    1b9c:	mov	w0, #0x3f46                	// #16198
    1ba0:	mov	w5, #0x0                   	// #0
    1ba4:	str	w0, [x23, #8]
    1ba8:	str	wzr, [x23, #140]
    1bac:	b	12dc <inflate+0xdec>
    1bb0:	bl	0 <adler32>
    1bb4:	mov	x2, x0
    1bb8:	ldr	w8, [sp, #112]
    1bbc:	ldr	x7, [sp, #104]
    1bc0:	b	158c <inflate+0x109c>
    1bc4:	ldp	x27, x28, [sp, #80]
    1bc8:	str	x21, [x24]
    1bcc:	str	w20, [x24, #8]
    1bd0:	mov	w25, #0x2                   	// #2
    1bd4:	str	x7, [x24, #24]
    1bd8:	str	w8, [x24, #32]
    1bdc:	str	x22, [x23, #80]
    1be0:	str	w19, [x23, #88]
    1be4:	ldp	x19, x20, [sp, #16]
    1be8:	ldp	x21, x22, [sp, #32]
    1bec:	ldp	x23, x24, [sp, #48]
    1bf0:	b	b28 <inflate+0x638>
    1bf4:	add	x0, x23, #0x558
    1bf8:	mov	w3, #0x9                   	// #9
    1bfc:	str	x0, [x23, #104]
    1c00:	add	x1, x23, #0x98
    1c04:	str	w3, [x23, #120]
    1c08:	add	x5, x23, #0x318
    1c0c:	str	x0, [x23, #144]
    1c10:	add	x3, x23, #0x90
    1c14:	add	x4, x23, #0x78
    1c18:	mov	w0, #0x1                   	// #1
    1c1c:	stp	x5, x3, [sp, #112]
    1c20:	stp	x1, x7, [sp, #128]
    1c24:	str	w8, [sp, #144]
    1c28:	str	w9, [sp, #156]
    1c2c:	bl	0 <inflate_table>
    1c30:	ldr	w8, [sp, #144]
    1c34:	mov	w11, #0x3f51                	// #16209
    1c38:	ldr	w9, [sp, #156]
    1c3c:	ldp	x5, x3, [sp, #112]
    1c40:	ldp	x1, x7, [sp, #128]
    1c44:	cbz	w0, 1d0c <inflate+0x181c>
    1c48:	adrp	x0, 0 <updatewindow>
    1c4c:	add	x0, x0, #0x0
    1c50:	str	x0, [x24, #48]
    1c54:	str	w11, [x23, #8]
    1c58:	b	d74 <inflate+0x884>
    1c5c:	cmp	w0, #0xf
    1c60:	b.hi	109c <inflate+0xbac>  // b.pmore
    1c64:	cmp	w1, w0
    1c68:	b.cc	109c <inflate+0xbac>  // b.lo, b.ul, b.last
    1c6c:	mov	w1, #0x1                   	// #1
    1c70:	mov	w2, #0x0                   	// #0
    1c74:	lsl	w0, w1, w0
    1c78:	str	w0, [x23, #28]
    1c7c:	mov	x1, #0x0                   	// #0
    1c80:	mov	x0, #0x0                   	// #0
    1c84:	str	x7, [sp, #112]
    1c88:	str	w8, [sp, #120]
    1c8c:	str	w9, [sp, #128]
    1c90:	bl	0 <adler32>
    1c94:	str	x0, [x23, #32]
    1c98:	ands	x22, x22, #0x200
    1c9c:	str	x0, [x24, #96]
    1ca0:	ldr	w8, [sp, #120]
    1ca4:	ldr	w9, [sp, #128]
    1ca8:	ldr	x7, [sp, #112]
    1cac:	b.ne	858 <inflate+0x368>  // b.any
    1cb0:	mov	w0, #0x3f3f                	// #16191
    1cb4:	mov	w19, #0x0                   	// #0
    1cb8:	str	w0, [x23, #8]
    1cbc:	b	908 <inflate+0x418>
    1cc0:	adrp	x0, 0 <updatewindow>
    1cc4:	add	x0, x0, #0x0
    1cc8:	str	x0, [x24, #48]
    1ccc:	mov	w0, #0x3f51                	// #16209
    1cd0:	str	w0, [x23, #8]
    1cd4:	b	d74 <inflate+0x884>
    1cd8:	ldr	x0, [x23, #32]
    1cdc:	add	x1, sp, #0xa8
    1ce0:	mov	w2, #0x2                   	// #2
    1ce4:	str	x7, [sp, #112]
    1ce8:	str	w8, [sp, #120]
    1cec:	str	w9, [sp, #128]
    1cf0:	strh	w22, [sp, #168]
    1cf4:	bl	0 <crc32>
    1cf8:	ldr	w8, [sp, #120]
    1cfc:	ldr	w9, [sp, #128]
    1d00:	str	x0, [x23, #32]
    1d04:	ldr	x7, [sp, #112]
    1d08:	b	648 <inflate+0x158>
    1d0c:	mov	x4, x23
    1d10:	str	x7, [sp, #112]
    1d14:	ldp	w12, w2, [x23, #132]
    1d18:	str	w8, [sp, #120]
    1d1c:	ldr	x0, [x23, #144]
    1d20:	str	x0, [x23, #112]
    1d24:	mov	w0, #0x6                   	// #6
    1d28:	str	w0, [x4, #124]!
    1d2c:	add	x1, x1, x12, lsl #1
    1d30:	mov	w0, #0x2                   	// #2
    1d34:	str	w9, [sp, #128]
    1d38:	bl	0 <inflate_table>
    1d3c:	ldr	w8, [sp, #120]
    1d40:	ldr	w9, [sp, #128]
    1d44:	ldr	x7, [sp, #112]
    1d48:	cbz	w0, cf8 <inflate+0x808>
    1d4c:	adrp	x0, 0 <updatewindow>
    1d50:	add	x0, x0, #0x0
    1d54:	str	x0, [x24, #48]
    1d58:	mov	w11, #0x3f51                	// #16209
    1d5c:	str	w11, [x23, #8]
    1d60:	b	d74 <inflate+0x884>
    1d64:	sub	w27, w9, w8
    1d68:	mov	w19, #0x0                   	// #0
    1d6c:	mov	x22, #0x0                   	// #0
    1d70:	b	a48 <inflate+0x558>
    1d74:	nop

0000000000001d78 <inflateEnd>:
    1d78:	stp	x29, x30, [sp, #-32]!
    1d7c:	mov	x29, sp
    1d80:	stp	x19, x20, [sp, #16]
    1d84:	cbz	x0, 1de0 <inflateEnd+0x68>
    1d88:	ldr	x1, [x0, #64]
    1d8c:	mov	x19, x0
    1d90:	cbz	x1, 1de0 <inflateEnd+0x68>
    1d94:	ldr	x4, [x0, #72]
    1d98:	cbz	x4, 1de0 <inflateEnd+0x68>
    1d9c:	bl	130 <inflateStateCheck.part.0>
    1da0:	mov	w20, w0
    1da4:	cbnz	w0, 1de0 <inflateEnd+0x68>
    1da8:	ldr	x1, [x19, #56]
    1dac:	ldr	x0, [x19, #80]
    1db0:	ldr	x2, [x1, #72]
    1db4:	cbz	x2, 1dc8 <inflateEnd+0x50>
    1db8:	mov	x1, x2
    1dbc:	blr	x4
    1dc0:	ldp	x4, x0, [x19, #72]
    1dc4:	ldr	x1, [x19, #56]
    1dc8:	blr	x4
    1dcc:	str	xzr, [x19, #56]
    1dd0:	mov	w0, w20
    1dd4:	ldp	x19, x20, [sp, #16]
    1dd8:	ldp	x29, x30, [sp], #32
    1ddc:	ret
    1de0:	mov	w20, #0xfffffffe            	// #-2
    1de4:	mov	w0, w20
    1de8:	ldp	x19, x20, [sp, #16]
    1dec:	ldp	x29, x30, [sp], #32
    1df0:	ret
    1df4:	nop

0000000000001df8 <inflateGetDictionary>:
    1df8:	stp	x29, x30, [sp, #-48]!
    1dfc:	mov	x29, sp
    1e00:	stp	x21, x22, [sp, #32]
    1e04:	cbz	x0, 1ec8 <inflateGetDictionary+0xd0>
    1e08:	stp	x19, x20, [sp, #16]
    1e0c:	mov	x20, x1
    1e10:	mov	x4, x0
    1e14:	ldr	x1, [x0, #64]
    1e18:	cbz	x1, 1e68 <inflateGetDictionary+0x70>
    1e1c:	ldr	x1, [x0, #72]
    1e20:	cbz	x1, 1e68 <inflateGetDictionary+0x70>
    1e24:	mov	x19, x2
    1e28:	bl	130 <inflateStateCheck.part.0>
    1e2c:	mov	w21, w0
    1e30:	cbnz	w0, 1e68 <inflateGetDictionary+0x70>
    1e34:	ldr	x22, [x4, #56]
    1e38:	ldr	w2, [x22, #64]
    1e3c:	cmp	w2, #0x0
    1e40:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    1e44:	b.ne	1e94 <inflateGetDictionary+0x9c>  // b.any
    1e48:	cbz	x19, 1e80 <inflateGetDictionary+0x88>
    1e4c:	ldr	w0, [x22, #64]
    1e50:	str	w0, [x19]
    1e54:	mov	w0, w21
    1e58:	ldp	x19, x20, [sp, #16]
    1e5c:	ldp	x21, x22, [sp, #32]
    1e60:	ldp	x29, x30, [sp], #48
    1e64:	ret
    1e68:	mov	w21, #0xfffffffe            	// #-2
    1e6c:	mov	w0, w21
    1e70:	ldp	x19, x20, [sp, #16]
    1e74:	ldp	x21, x22, [sp, #32]
    1e78:	ldp	x29, x30, [sp], #48
    1e7c:	ret
    1e80:	mov	w0, w21
    1e84:	ldp	x19, x20, [sp, #16]
    1e88:	ldp	x21, x22, [sp, #32]
    1e8c:	ldp	x29, x30, [sp], #48
    1e90:	ret
    1e94:	ldr	x3, [x22, #72]
    1e98:	mov	x0, x20
    1e9c:	ldr	w1, [x22, #68]
    1ea0:	sub	w2, w2, w1
    1ea4:	add	x1, x3, w1, uxtw
    1ea8:	bl	0 <memcpy>
    1eac:	ldp	w0, w2, [x22, #64]
    1eb0:	ldr	x1, [x22, #72]
    1eb4:	sub	x0, x0, x2
    1eb8:	add	x0, x20, x0
    1ebc:	bl	0 <memcpy>
    1ec0:	cbnz	x19, 1e4c <inflateGetDictionary+0x54>
    1ec4:	b	1e80 <inflateGetDictionary+0x88>
    1ec8:	mov	w21, #0xfffffffe            	// #-2
    1ecc:	mov	w0, w21
    1ed0:	ldp	x21, x22, [sp, #32]
    1ed4:	ldp	x29, x30, [sp], #48
    1ed8:	ret
    1edc:	nop

0000000000001ee0 <inflateSetDictionary>:
    1ee0:	cbz	x0, 1fb0 <inflateSetDictionary+0xd0>
    1ee4:	stp	x29, x30, [sp, #-48]!
    1ee8:	mov	x29, sp
    1eec:	stp	x21, x22, [sp, #32]
    1ef0:	mov	x21, x1
    1ef4:	ldr	x1, [x0, #64]
    1ef8:	stp	x19, x20, [sp, #16]
    1efc:	mov	x19, x0
    1f00:	cbz	x1, 1f9c <inflateSetDictionary+0xbc>
    1f04:	ldr	x1, [x0, #72]
    1f08:	cbz	x1, 1f9c <inflateSetDictionary+0xbc>
    1f0c:	mov	w20, w2
    1f10:	bl	130 <inflateStateCheck.part.0>
    1f14:	cbnz	w0, 1f9c <inflateSetDictionary+0xbc>
    1f18:	ldr	x22, [x19, #56]
    1f1c:	ldr	w1, [x22, #16]
    1f20:	ldr	w0, [x22, #8]
    1f24:	cbnz	w1, 1f60 <inflateSetDictionary+0x80>
    1f28:	mov	w1, #0x3f3e                	// #16190
    1f2c:	cmp	w0, w1
    1f30:	b.eq	1f6c <inflateSetDictionary+0x8c>  // b.none
    1f34:	add	x1, x21, w20, uxtw
    1f38:	mov	w2, w20
    1f3c:	mov	x0, x19
    1f40:	bl	0 <updatewindow>
    1f44:	cbnz	w0, 1fb8 <inflateSetDictionary+0xd8>
    1f48:	mov	w1, #0x1                   	// #1
    1f4c:	str	w1, [x22, #20]
    1f50:	ldp	x19, x20, [sp, #16]
    1f54:	ldp	x21, x22, [sp, #32]
    1f58:	ldp	x29, x30, [sp], #48
    1f5c:	ret
    1f60:	mov	w1, #0x3f3e                	// #16190
    1f64:	cmp	w0, w1
    1f68:	b.ne	1f9c <inflateSetDictionary+0xbc>  // b.any
    1f6c:	mov	w2, #0x0                   	// #0
    1f70:	mov	x1, #0x0                   	// #0
    1f74:	mov	x0, #0x0                   	// #0
    1f78:	bl	0 <adler32>
    1f7c:	mov	x1, x21
    1f80:	mov	w2, w20
    1f84:	bl	0 <adler32>
    1f88:	ldr	x1, [x22, #32]
    1f8c:	cmp	x1, x0
    1f90:	b.eq	1f34 <inflateSetDictionary+0x54>  // b.none
    1f94:	mov	w0, #0xfffffffd            	// #-3
    1f98:	b	1f50 <inflateSetDictionary+0x70>
    1f9c:	mov	w0, #0xfffffffe            	// #-2
    1fa0:	ldp	x19, x20, [sp, #16]
    1fa4:	ldp	x21, x22, [sp, #32]
    1fa8:	ldp	x29, x30, [sp], #48
    1fac:	ret
    1fb0:	mov	w0, #0xfffffffe            	// #-2
    1fb4:	ret
    1fb8:	mov	w1, #0x3f52                	// #16210
    1fbc:	mov	w0, #0xfffffffc            	// #-4
    1fc0:	str	w1, [x22, #8]
    1fc4:	b	1f50 <inflateSetDictionary+0x70>

0000000000001fc8 <inflateGetHeader>:
    1fc8:	cbz	x0, 2010 <inflateGetHeader+0x48>
    1fcc:	mov	x5, x1
    1fd0:	mov	x4, x0
    1fd4:	ldr	x1, [x0, #64]
    1fd8:	cbz	x1, 2010 <inflateGetHeader+0x48>
    1fdc:	ldr	x1, [x0, #72]
    1fe0:	cbz	x1, 2010 <inflateGetHeader+0x48>
    1fe4:	stp	x29, x30, [sp, #-16]!
    1fe8:	mov	x29, sp
    1fec:	bl	130 <inflateStateCheck.part.0>
    1ff0:	cbnz	w0, 2018 <inflateGetHeader+0x50>
    1ff4:	ldr	x1, [x4, #56]
    1ff8:	ldr	w2, [x1, #16]
    1ffc:	tbz	w2, #1, 2018 <inflateGetHeader+0x50>
    2000:	str	x5, [x1, #48]
    2004:	str	wzr, [x5, #72]
    2008:	ldp	x29, x30, [sp], #16
    200c:	ret
    2010:	mov	w0, #0xfffffffe            	// #-2
    2014:	ret
    2018:	mov	w0, #0xfffffffe            	// #-2
    201c:	b	2008 <inflateGetHeader+0x40>

0000000000002020 <inflateSync>:
    2020:	cbz	x0, 2264 <inflateSync+0x244>
    2024:	ldr	x1, [x0, #64]
    2028:	mov	x6, x0
    202c:	cbz	x1, 2264 <inflateSync+0x244>
    2030:	ldr	x1, [x0, #72]
    2034:	cbz	x1, 2264 <inflateSync+0x244>
    2038:	stp	x29, x30, [sp, #-32]!
    203c:	mov	x29, sp
    2040:	bl	130 <inflateStateCheck.part.0>
    2044:	mov	w10, w0
    2048:	cbnz	w0, 22a0 <inflateSync+0x280>
    204c:	ldr	w8, [x6, #8]
    2050:	ldr	x9, [x6, #56]
    2054:	cbnz	w8, 2214 <inflateSync+0x1f4>
    2058:	ldr	w1, [x9, #88]
    205c:	cmp	w1, #0x7
    2060:	b.ls	22a8 <inflateSync+0x288>  // b.plast
    2064:	ldr	w2, [x9, #8]
    2068:	mov	w0, #0x3f53                	// #16211
    206c:	ldr	x7, [x6]
    2070:	cmp	w2, w0
    2074:	b.eq	2288 <inflateSync+0x268>  // b.none
    2078:	ldr	x3, [x9, #80]
    207c:	and	w2, w1, #0x7
    2080:	and	w1, w1, #0xfffffff8
    2084:	str	w0, [x9, #8]
    2088:	lsl	x3, x3, x2
    208c:	sub	w1, w1, #0x8
    2090:	add	x2, sp, #0x19
    2094:	add	x0, sp, #0x18
    2098:	lsr	w4, w1, #3
    209c:	lsr	w1, w1, #3
    20a0:	add	x2, x2, x4
    20a4:	nop
    20a8:	strb	w3, [x0], #1
    20ac:	lsr	x3, x3, #8
    20b0:	cmp	x0, x2
    20b4:	b.ne	20a8 <inflateSync+0x88>  // b.any
    20b8:	add	x2, sp, #0x18
    20bc:	add	w5, w1, #0x1
    20c0:	mov	w8, #0x1                   	// #1
    20c4:	mov	w1, #0x0                   	// #0
    20c8:	sub	w8, w8, w2
    20cc:	mov	w11, #0xff                  	// #255
    20d0:	mov	w12, #0x4                   	// #4
    20d4:	str	x3, [x9, #80]
    20d8:	str	wzr, [x9, #88]
    20dc:	b	210c <inflateSync+0xec>
    20e0:	sub	w1, w12, w1
    20e4:	mov	w4, #0x1                   	// #1
    20e8:	cmp	w1, #0x3
    20ec:	cbnz	w3, 225c <inflateSync+0x23c>
    20f0:	cset	w4, ls  // ls = plast
    20f4:	add	w3, w8, w2
    20f8:	add	x2, x2, #0x1
    20fc:	cmp	w3, w5
    2100:	cset	w3, cc  // cc = lo, ul, last
    2104:	tst	w4, w3
    2108:	b.eq	2144 <inflateSync+0x124>  // b.none
    210c:	cmp	w1, #0x2
    2110:	ldrb	w3, [x2]
    2114:	csel	w0, wzr, w11, cc  // cc = lo, ul, last
    2118:	cmp	w3, w0
    211c:	b.ne	20e0 <inflateSync+0xc0>  // b.any
    2120:	add	w1, w1, #0x1
    2124:	add	w3, w8, w2
    2128:	cmp	w1, #0x3
    212c:	add	x2, x2, #0x1
    2130:	cset	w4, ls  // ls = plast
    2134:	cmp	w3, w5
    2138:	cset	w3, cc  // cc = lo, ul, last
    213c:	tst	w4, w3
    2140:	b.ne	210c <inflateSync+0xec>  // b.any
    2144:	str	w1, [x9, #140]
    2148:	ldr	w8, [x6, #8]
    214c:	cmp	w8, #0x0
    2150:	csel	w4, w4, wzr, ne  // ne = any
    2154:	cbz	w4, 22b0 <inflateSync+0x290>
    2158:	mov	w2, #0x0                   	// #0
    215c:	mov	w0, #0xff                  	// #255
    2160:	mov	w11, #0x4                   	// #4
    2164:	b	218c <inflateSync+0x16c>
    2168:	sub	w1, w11, w1
    216c:	mov	w5, w4
    2170:	cmp	w1, #0x3
    2174:	cbnz	w3, 2270 <inflateSync+0x250>
    2178:	cset	w5, ls  // ls = plast
    217c:	add	w2, w2, #0x1
    2180:	cmp	w5, #0x0
    2184:	ccmp	w2, w8, #0x2, ne  // ne = any
    2188:	b.cs	21bc <inflateSync+0x19c>  // b.hs, b.nlast
    218c:	cmp	w1, #0x2
    2190:	ldrb	w3, [x7, w2, uxtw]
    2194:	csel	w5, wzr, w0, cc  // cc = lo, ul, last
    2198:	cmp	w3, w5
    219c:	b.ne	2168 <inflateSync+0x148>  // b.any
    21a0:	add	w1, w1, #0x1
    21a4:	add	w2, w2, #0x1
    21a8:	cmp	w1, #0x3
    21ac:	cset	w5, ls  // ls = plast
    21b0:	cmp	w5, #0x0
    21b4:	ccmp	w2, w8, #0x2, ne  // ne = any
    21b8:	b.cc	218c <inflateSync+0x16c>  // b.lo, b.ul, b.last
    21bc:	mov	w0, w2
    21c0:	add	x7, x7, x0
    21c4:	ldr	x3, [x6, #16]
    21c8:	str	w1, [x9, #140]
    21cc:	cmp	w1, #0x4
    21d0:	str	x7, [x6]
    21d4:	ldr	w1, [x6, #8]
    21d8:	add	x7, x0, x3
    21dc:	str	x7, [x6, #16]
    21e0:	sub	w2, w1, w2
    21e4:	str	w2, [x6, #8]
    21e8:	b.ne	2298 <inflateSync+0x278>  // b.any
    21ec:	ldr	x8, [x6, #40]
    21f0:	mov	x0, x6
    21f4:	bl	208 <inflateReset>
    21f8:	str	x7, [x6, #16]
    21fc:	str	x8, [x6, #40]
    2200:	mov	w0, #0x3f3f                	// #16191
    2204:	str	w0, [x9, #8]
    2208:	mov	w0, w10
    220c:	ldp	x29, x30, [sp], #32
    2210:	ret
    2214:	ldr	w1, [x9, #8]
    2218:	mov	w0, #0x3f53                	// #16211
    221c:	ldr	x7, [x6]
    2220:	cmp	w1, w0
    2224:	b.eq	2278 <inflateSync+0x258>  // b.none
    2228:	ldr	w1, [x9, #88]
    222c:	ldr	x3, [x9, #80]
    2230:	str	w0, [x9, #8]
    2234:	and	w0, w1, #0x7
    2238:	and	w1, w1, #0xfffffff8
    223c:	str	w1, [x9, #88]
    2240:	cmp	w1, #0x7
    2244:	lsl	x3, x3, x0
    2248:	str	x3, [x9, #80]
    224c:	b.hi	208c <inflateSync+0x6c>  // b.pmore
    2250:	mov	w4, #0x1                   	// #1
    2254:	mov	w1, #0x0                   	// #0
    2258:	b	2144 <inflateSync+0x124>
    225c:	mov	w1, #0x0                   	// #0
    2260:	b	20f4 <inflateSync+0xd4>
    2264:	mov	w10, #0xfffffffe            	// #-2
    2268:	mov	w0, w10
    226c:	ret
    2270:	mov	w1, #0x0                   	// #0
    2274:	b	217c <inflateSync+0x15c>
    2278:	ldr	w1, [x9, #140]
    227c:	cmp	w1, #0x3
    2280:	cset	w4, ls  // ls = plast
    2284:	b	214c <inflateSync+0x12c>
    2288:	ldr	w1, [x9, #140]
    228c:	mov	w2, #0x0                   	// #0
    2290:	mov	x0, #0x0                   	// #0
    2294:	b	21c4 <inflateSync+0x1a4>
    2298:	mov	w10, #0xfffffffd            	// #-3
    229c:	b	2208 <inflateSync+0x1e8>
    22a0:	mov	w10, #0xfffffffe            	// #-2
    22a4:	b	2208 <inflateSync+0x1e8>
    22a8:	mov	w10, #0xfffffffb            	// #-5
    22ac:	b	2208 <inflateSync+0x1e8>
    22b0:	mov	x0, #0x0                   	// #0
    22b4:	mov	w2, #0x0                   	// #0
    22b8:	b	21c4 <inflateSync+0x1a4>
    22bc:	nop

00000000000022c0 <inflateSyncPoint>:
    22c0:	cbz	x0, 2304 <inflateSyncPoint+0x44>
    22c4:	ldr	x1, [x0, #64]
    22c8:	mov	x4, x0
    22cc:	cbz	x1, 2304 <inflateSyncPoint+0x44>
    22d0:	ldr	x1, [x0, #72]
    22d4:	cbz	x1, 2304 <inflateSyncPoint+0x44>
    22d8:	stp	x29, x30, [sp, #-16]!
    22dc:	mov	x29, sp
    22e0:	bl	130 <inflateStateCheck.part.0>
    22e4:	cbnz	w0, 2320 <inflateSyncPoint+0x60>
    22e8:	ldr	x1, [x4, #56]
    22ec:	mov	w2, #0x3f41                	// #16193
    22f0:	ldr	w3, [x1, #8]
    22f4:	cmp	w3, w2
    22f8:	b.eq	230c <inflateSyncPoint+0x4c>  // b.none
    22fc:	ldp	x29, x30, [sp], #16
    2300:	ret
    2304:	mov	w0, #0xfffffffe            	// #-2
    2308:	ret
    230c:	ldr	w0, [x1, #88]
    2310:	ldp	x29, x30, [sp], #16
    2314:	cmp	w0, #0x0
    2318:	cset	w0, eq  // eq = none
    231c:	ret
    2320:	mov	w0, #0xfffffffe            	// #-2
    2324:	b	22fc <inflateSyncPoint+0x3c>

0000000000002328 <inflateCopy>:
    2328:	cbz	x1, 250c <inflateCopy+0x1e4>
    232c:	stp	x29, x30, [sp, #-64]!
    2330:	mov	x29, sp
    2334:	ldr	x4, [x1, #64]
    2338:	stp	x19, x20, [sp, #16]
    233c:	mov	x19, x1
    2340:	cbz	x4, 2458 <inflateCopy+0x130>
    2344:	mov	x20, x0
    2348:	ldr	x0, [x1, #72]
    234c:	cbz	x0, 2458 <inflateCopy+0x130>
    2350:	mov	x0, x1
    2354:	bl	130 <inflateStateCheck.part.0>
    2358:	cmp	x20, #0x0
    235c:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    2360:	b.ne	2458 <inflateCopy+0x130>  // b.any
    2364:	ldr	x0, [x19, #80]
    2368:	stp	x21, x22, [sp, #32]
    236c:	mov	w2, #0x1bf8                	// #7160
    2370:	str	x23, [sp, #48]
    2374:	mov	w1, #0x1                   	// #1
    2378:	ldr	x23, [x19, #56]
    237c:	blr	x4
    2380:	mov	x21, x0
    2384:	cbz	x0, 2528 <inflateCopy+0x200>
    2388:	ldr	x22, [x23, #72]
    238c:	cbz	x22, 2468 <inflateCopy+0x140>
    2390:	ldr	x3, [x19, #64]
    2394:	mov	w2, #0x1                   	// #1
    2398:	ldr	x0, [x19, #80]
    239c:	ldr	w1, [x23, #56]
    23a0:	lsl	w1, w2, w1
    23a4:	blr	x3
    23a8:	mov	x22, x0
    23ac:	cbz	x0, 2538 <inflateCopy+0x210>
    23b0:	ldp	x0, x1, [x19]
    23b4:	stp	x0, x1, [x20]
    23b8:	mov	x2, #0x1bf8                	// #7160
    23bc:	ldp	x0, x1, [x19, #16]
    23c0:	stp	x0, x1, [x20, #16]
    23c4:	ldp	x4, x5, [x19, #32]
    23c8:	stp	x4, x5, [x20, #32]
    23cc:	mov	x1, x23
    23d0:	ldp	x4, x5, [x19, #48]
    23d4:	stp	x4, x5, [x20, #48]
    23d8:	mov	x0, x21
    23dc:	ldp	x4, x5, [x19, #64]
    23e0:	stp	x4, x5, [x20, #64]
    23e4:	ldp	x4, x5, [x19, #80]
    23e8:	stp	x4, x5, [x20, #80]
    23ec:	ldp	x4, x5, [x19, #96]
    23f0:	stp	x4, x5, [x20, #96]
    23f4:	bl	0 <memcpy>
    23f8:	ldr	x2, [x23, #104]
    23fc:	str	x20, [x21]
    2400:	add	x0, x23, #0x558
    2404:	add	x1, x21, #0x558
    2408:	cmp	x2, x0
    240c:	b.cs	24c8 <inflateCopy+0x1a0>  // b.hs, b.nlast
    2410:	ldr	x2, [x23, #144]
    2414:	sub	x0, x2, x0
    2418:	add	x1, x1, x0
    241c:	str	x1, [x21, #144]
    2420:	ldr	x1, [x23, #72]
    2424:	mov	w3, #0x1                   	// #1
    2428:	ldr	w2, [x23, #56]
    242c:	mov	x0, x22
    2430:	lsl	w2, w3, w2
    2434:	bl	0 <memcpy>
    2438:	ldr	x23, [sp, #48]
    243c:	str	x22, [x21, #72]
    2440:	str	x21, [x20, #56]
    2444:	mov	w0, #0x0                   	// #0
    2448:	ldp	x21, x22, [sp, #32]
    244c:	ldp	x19, x20, [sp, #16]
    2450:	ldp	x29, x30, [sp], #64
    2454:	ret
    2458:	mov	w0, #0xfffffffe            	// #-2
    245c:	ldp	x19, x20, [sp, #16]
    2460:	ldp	x29, x30, [sp], #64
    2464:	ret
    2468:	ldp	x2, x3, [x19]
    246c:	stp	x2, x3, [x20]
    2470:	mov	x1, x23
    2474:	ldp	x4, x5, [x19, #16]
    2478:	stp	x4, x5, [x20, #16]
    247c:	mov	x2, #0x1bf8                	// #7160
    2480:	ldp	x4, x5, [x19, #32]
    2484:	stp	x4, x5, [x20, #32]
    2488:	ldp	x4, x5, [x19, #48]
    248c:	stp	x4, x5, [x20, #48]
    2490:	ldp	x4, x5, [x19, #64]
    2494:	stp	x4, x5, [x20, #64]
    2498:	ldp	x4, x5, [x19, #80]
    249c:	stp	x4, x5, [x20, #80]
    24a0:	ldp	x4, x5, [x19, #96]
    24a4:	stp	x4, x5, [x20, #96]
    24a8:	bl	0 <memcpy>
    24ac:	ldr	x2, [x23, #104]
    24b0:	str	x20, [x21]
    24b4:	add	x0, x23, #0x558
    24b8:	add	x1, x21, #0x558
    24bc:	cmp	x2, x0
    24c0:	b.cc	2514 <inflateCopy+0x1ec>  // b.lo, b.ul, b.last
    24c4:	nop
    24c8:	mov	x3, #0x1be4                	// #7140
    24cc:	add	x3, x23, x3
    24d0:	cmp	x2, x3
    24d4:	b.hi	24f4 <inflateCopy+0x1cc>  // b.pmore
    24d8:	ldr	x3, [x23, #112]
    24dc:	sub	x2, x2, x0
    24e0:	add	x2, x1, x2
    24e4:	str	x2, [x21, #104]
    24e8:	sub	x2, x3, x0
    24ec:	add	x2, x1, x2
    24f0:	str	x2, [x21, #112]
    24f4:	ldr	x2, [x23, #144]
    24f8:	sub	x0, x2, x0
    24fc:	add	x1, x1, x0
    2500:	str	x1, [x21, #144]
    2504:	cbz	x22, 2438 <inflateCopy+0x110>
    2508:	b	2420 <inflateCopy+0xf8>
    250c:	mov	w0, #0xfffffffe            	// #-2
    2510:	ret
    2514:	ldr	x2, [x23, #144]
    2518:	sub	x0, x2, x0
    251c:	add	x1, x1, x0
    2520:	str	x1, [x21, #144]
    2524:	b	2438 <inflateCopy+0x110>
    2528:	mov	w0, #0xfffffffc            	// #-4
    252c:	ldp	x21, x22, [sp, #32]
    2530:	ldr	x23, [sp, #48]
    2534:	b	244c <inflateCopy+0x124>
    2538:	ldp	x2, x0, [x19, #72]
    253c:	mov	x1, x21
    2540:	blr	x2
    2544:	mov	w0, #0xfffffffc            	// #-4
    2548:	ldp	x21, x22, [sp, #32]
    254c:	ldr	x23, [sp, #48]
    2550:	b	244c <inflateCopy+0x124>
    2554:	nop

0000000000002558 <inflateUndermine>:
    2558:	cbz	x0, 25a0 <inflateUndermine+0x48>
    255c:	ldr	x1, [x0, #64]
    2560:	mov	x4, x0
    2564:	cbz	x1, 25a0 <inflateUndermine+0x48>
    2568:	ldr	x1, [x0, #72]
    256c:	cbz	x1, 25a0 <inflateUndermine+0x48>
    2570:	stp	x29, x30, [sp, #-16]!
    2574:	mov	x29, sp
    2578:	bl	130 <inflateStateCheck.part.0>
    257c:	mov	w1, w0
    2580:	mov	w0, #0xfffffffe            	// #-2
    2584:	cbnz	w1, 2598 <inflateUndermine+0x40>
    2588:	ldr	x1, [x4, #56]
    258c:	mov	w2, #0x1                   	// #1
    2590:	mov	w0, #0xfffffffd            	// #-3
    2594:	str	w2, [x1, #7144]
    2598:	ldp	x29, x30, [sp], #16
    259c:	ret
    25a0:	mov	w0, #0xfffffffe            	// #-2
    25a4:	ret

00000000000025a8 <inflateValidate>:
    25a8:	cbz	x0, 25f8 <inflateValidate+0x50>
    25ac:	mov	w5, w1
    25b0:	mov	x4, x0
    25b4:	ldr	x1, [x0, #64]
    25b8:	cbz	x1, 25f8 <inflateValidate+0x50>
    25bc:	ldr	x1, [x0, #72]
    25c0:	cbz	x1, 25f8 <inflateValidate+0x50>
    25c4:	stp	x29, x30, [sp, #-16]!
    25c8:	mov	x29, sp
    25cc:	bl	130 <inflateStateCheck.part.0>
    25d0:	cbnz	w0, 2600 <inflateValidate+0x58>
    25d4:	ldr	x2, [x4, #56]
    25d8:	cmp	w5, #0x0
    25dc:	ldr	w1, [x2, #16]
    25e0:	and	w3, w1, #0xfffffffb
    25e4:	orr	w1, w1, #0x4
    25e8:	csel	w1, w1, w3, ne  // ne = any
    25ec:	str	w1, [x2, #16]
    25f0:	ldp	x29, x30, [sp], #16
    25f4:	ret
    25f8:	mov	w0, #0xfffffffe            	// #-2
    25fc:	ret
    2600:	mov	w0, #0xfffffffe            	// #-2
    2604:	b	25f0 <inflateValidate+0x48>

0000000000002608 <inflateMark>:
    2608:	cbz	x0, 2670 <inflateMark+0x68>
    260c:	ldr	x1, [x0, #64]
    2610:	mov	x4, x0
    2614:	cbz	x1, 2670 <inflateMark+0x68>
    2618:	ldr	x1, [x0, #72]
    261c:	cbz	x1, 2670 <inflateMark+0x68>
    2620:	stp	x29, x30, [sp, #-16]!
    2624:	mov	x29, sp
    2628:	bl	130 <inflateStateCheck.part.0>
    262c:	cbnz	w0, 2688 <inflateMark+0x80>
    2630:	ldr	x1, [x4, #56]
    2634:	mov	w3, #0x3f43                	// #16195
    2638:	ldrsw	x0, [x1, #7148]
    263c:	ldr	w2, [x1, #8]
    2640:	lsl	x0, x0, #16
    2644:	cmp	w2, w3
    2648:	b.eq	2678 <inflateMark+0x70>  // b.none
    264c:	mov	w3, #0x3f4c                	// #16204
    2650:	cmp	w2, w3
    2654:	b.ne	2668 <inflateMark+0x60>  // b.any
    2658:	ldr	w2, [x1, #92]
    265c:	ldr	w1, [x1, #7152]
    2660:	sub	w1, w1, w2
    2664:	add	x0, x0, x1
    2668:	ldp	x29, x30, [sp], #16
    266c:	ret
    2670:	mov	x0, #0xffffffffffff0000    	// #-65536
    2674:	ret
    2678:	ldr	w1, [x1, #92]
    267c:	ldp	x29, x30, [sp], #16
    2680:	add	x0, x0, x1
    2684:	ret
    2688:	mov	x0, #0xffffffffffff0000    	// #-65536
    268c:	b	2668 <inflateMark+0x60>

0000000000002690 <inflateCodesUsed>:
    2690:	cbz	x0, 26dc <inflateCodesUsed+0x4c>
    2694:	ldr	x1, [x0, #64]
    2698:	mov	x4, x0
    269c:	cbz	x1, 26dc <inflateCodesUsed+0x4c>
    26a0:	ldr	x1, [x0, #72]
    26a4:	cbz	x1, 26dc <inflateCodesUsed+0x4c>
    26a8:	stp	x29, x30, [sp, #-16]!
    26ac:	mov	x29, sp
    26b0:	bl	130 <inflateStateCheck.part.0>
    26b4:	mov	w1, w0
    26b8:	mov	x0, #0xffffffffffffffff    	// #-1
    26bc:	cbnz	w1, 26d4 <inflateCodesUsed+0x44>
    26c0:	ldr	x1, [x4, #56]
    26c4:	add	x2, x1, #0x558
    26c8:	ldr	x0, [x1, #144]
    26cc:	sub	x0, x0, x2
    26d0:	asr	x0, x0, #2
    26d4:	ldp	x29, x30, [sp], #16
    26d8:	ret
    26dc:	mov	x0, #0xffffffffffffffff    	// #-1
    26e0:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	w10, w0
   8:	add	x9, sp, #0x70
   c:	mov	x29, sp
  10:	add	x7, x9, #0x20
  14:	mov	x6, x9
  18:	strh	wzr, [x6], #2
  1c:	cmp	x7, x6
  20:	b.ne	18 <inflate_table+0x18>  // b.any
  24:	cbz	w2, 5c <inflate_table+0x5c>
  28:	sub	w0, w2, #0x1
  2c:	add	x7, x1, #0x2
  30:	mov	x8, x1
  34:	add	x0, x7, w0, uxtw #1
  38:	ldrh	w6, [x8], #2
  3c:	add	x7, sp, #0x70
  40:	add	x11, sp, #0x70
  44:	cmp	x0, x8
  48:	lsl	x6, x6, #1
  4c:	ldrh	w7, [x7, x6]
  50:	add	w7, w7, #0x1
  54:	strh	w7, [x11, x6]
  58:	b.ne	38 <inflate_table+0x38>  // b.any
  5c:	add	x6, sp, #0x70
  60:	mov	w11, #0xf                   	// #15
  64:	nop
  68:	ldrh	w0, [x6, #30]
  6c:	sub	x6, x6, #0x2
  70:	cbnz	w0, a8 <inflate_table+0xa8>
  74:	subs	w11, w11, #0x1
  78:	b.ne	68 <inflate_table+0x68>  // b.any
  7c:	ldr	x2, [x3]
  80:	mov	w5, #0x140                 	// #320
  84:	mov	w6, #0x1                   	// #1
  88:	mov	w0, #0x0                   	// #0
  8c:	mov	x1, x2
  90:	str	w5, [x1], #8
  94:	str	x1, [x3]
  98:	str	w5, [x2, #4]
  9c:	str	w6, [x4]
  a0:	ldp	x29, x30, [sp], #176
  a4:	ret
  a8:	cmp	w11, #0x1
  ac:	add	x6, sp, #0x70
  b0:	mov	w13, #0x1                   	// #1
  b4:	b.ne	c8 <inflate_table+0xc8>  // b.any
  b8:	b	454 <inflate_table+0x454>
  bc:	add	w13, w13, #0x1
  c0:	cmp	w13, w11
  c4:	b.eq	d4 <inflate_table+0xd4>  // b.none
  c8:	ldrh	w0, [x6, #2]
  cc:	add	x6, x6, #0x2
  d0:	cbz	w0, bc <inflate_table+0xbc>
  d4:	add	x0, sp, #0x8e
  d8:	mov	w6, #0x1                   	// #1
  dc:	nop
  e0:	ldrh	w7, [x9, #2]
  e4:	lsl	w6, w6, #1
  e8:	add	x9, x9, #0x2
  ec:	subs	w6, w6, w7
  f0:	b.mi	1dc <inflate_table+0x1dc>  // b.first
  f4:	cmp	x0, x9
  f8:	b.ne	e0 <inflate_table+0xe0>  // b.any
  fc:	cbz	w6, 110 <inflate_table+0x110>
 100:	cmp	w10, #0x0
 104:	mov	w0, #0xffffffff            	// #-1
 108:	ccmp	w11, #0x1, #0x0, ne  // ne = any
 10c:	b.ne	a0 <inflate_table+0xa0>  // b.any
 110:	ldr	w12, [x4]
 114:	add	x9, sp, #0x90
 118:	mov	x8, #0x0                   	// #0
 11c:	mov	w6, #0x0                   	// #0
 120:	stp	x19, x20, [sp, #16]
 124:	stp	x21, x22, [sp, #32]
 128:	stp	x25, x26, [sp, #64]
 12c:	stp	x27, x28, [sp, #80]
 130:	strh	wzr, [sp, #146]
 134:	nop
 138:	add	x0, sp, #0x70
 13c:	add	x7, x0, x8
 140:	add	x0, x9, x8
 144:	add	x8, x8, #0x2
 148:	cmp	x8, #0x1c
 14c:	ldrh	w7, [x7, #2]
 150:	add	w6, w6, w7
 154:	and	w6, w6, #0xffff
 158:	strh	w6, [x0, #4]
 15c:	b.ne	138 <inflate_table+0x138>  // b.any
 160:	mov	x0, #0x0                   	// #0
 164:	cbz	w2, 194 <inflate_table+0x194>
 168:	ldrh	w6, [x1, x0, lsl #1]
 16c:	sbfiz	x7, x6, #1, #32
 170:	cbz	w6, 188 <inflate_table+0x188>
 174:	ldrh	w6, [x9, x7]
 178:	add	w8, w6, #0x1
 17c:	strh	w8, [x9, x7]
 180:	ubfiz	x6, x6, #1, #16
 184:	strh	w0, [x5, x6]
 188:	add	x0, x0, #0x1
 18c:	cmp	w2, w0
 190:	b.hi	168 <inflate_table+0x168>  // b.pmore
 194:	cmp	w12, w11
 198:	mov	w0, #0x1                   	// #1
 19c:	csel	w12, w12, w11, ls  // ls = plast
 1a0:	cmp	w13, w12
 1a4:	csel	w20, w13, w12, cs  // cs = hs, nlast
 1a8:	lsl	w22, w0, w20
 1ac:	cbz	w10, 214 <inflate_table+0x214>
 1b0:	cmp	w10, w0
 1b4:	b.ne	1e8 <inflate_table+0x1e8>  // b.any
 1b8:	cmp	w22, #0x354
 1bc:	b.ls	45c <inflate_table+0x45c>  // b.plast
 1c0:	mov	w0, #0x1                   	// #1
 1c4:	ldp	x19, x20, [sp, #16]
 1c8:	ldp	x21, x22, [sp, #32]
 1cc:	ldp	x25, x26, [sp, #64]
 1d0:	ldp	x27, x28, [sp, #80]
 1d4:	ldp	x29, x30, [sp], #176
 1d8:	ret
 1dc:	mov	w0, #0xffffffff            	// #-1
 1e0:	ldp	x29, x30, [sp], #176
 1e4:	ret
 1e8:	cmp	w10, #0x2
 1ec:	cset	w28, eq  // eq = none
 1f0:	cmp	w22, #0x250
 1f4:	ccmp	w28, #0x0, #0x4, hi  // hi = pmore
 1f8:	b.ne	1c0 <inflate_table+0x1c0>  // b.any
 1fc:	adrp	x27, 0 <inflate_table>
 200:	add	x27, x27, #0x0
 204:	add	x26, x27, #0x40
 208:	mov	w21, #0x0                   	// #0
 20c:	stp	x23, x24, [sp, #48]
 210:	b	228 <inflate_table+0x228>
 214:	mov	x27, x5
 218:	mov	x26, x5
 21c:	mov	w21, #0x14                  	// #20
 220:	mov	w28, #0x0                   	// #0
 224:	stp	x23, x24, [sp, #48]
 228:	cmp	w10, #0x1
 22c:	cset	w0, eq  // eq = none
 230:	ldr	x24, [x3]
 234:	sub	w25, w22, #0x1
 238:	mov	w16, w20
 23c:	mov	w19, w0
 240:	mov	w9, w13
 244:	mov	x7, x24
 248:	mov	w23, #0xffffffff            	// #-1
 24c:	mov	w8, #0x0                   	// #0
 250:	mov	w17, #0x0                   	// #0
 254:	mov	w18, #0x0                   	// #0
 258:	mov	w30, #0x1                   	// #1
 25c:	str	x3, [sp, #104]
 260:	ldrh	w6, [x5, w18, uxtw #1]
 264:	and	w14, w9, #0xff
 268:	mov	w12, #0x0                   	// #0
 26c:	add	w0, w6, #0x1
 270:	cmp	w0, w21
 274:	b.cc	290 <inflate_table+0x290>  // b.lo, b.ul, b.last
 278:	cmp	w6, w21
 27c:	b.cc	3f8 <inflate_table+0x3f8>  // b.lo, b.ul, b.last
 280:	sub	w0, w6, w21
 284:	lsl	x0, x0, #1
 288:	ldrb	w12, [x27, x0]
 28c:	ldrh	w6, [x26, x0]
 290:	lsl	w15, w30, w16
 294:	mov	w2, w15
 298:	lsl	w9, w30, w9
 29c:	lsr	w10, w8, w17
 2a0:	sub	w2, w2, w9
 2a4:	add	w0, w10, w2
 2a8:	lsl	x0, x0, #2
 2ac:	add	x3, x7, x0
 2b0:	strb	w12, [x7, x0]
 2b4:	strb	w14, [x3, #1]
 2b8:	strh	w6, [x3, #2]
 2bc:	cbnz	w2, 2a0 <inflate_table+0x2a0>
 2c0:	sub	w0, w13, #0x1
 2c4:	lsl	w0, w30, w0
 2c8:	tst	w8, w0
 2cc:	b.eq	2dc <inflate_table+0x2dc>  // b.none
 2d0:	lsr	w0, w0, #1
 2d4:	tst	w8, w0
 2d8:	b.ne	2d0 <inflate_table+0x2d0>  // b.any
 2dc:	sub	w2, w0, #0x1
 2e0:	ubfiz	x3, x13, #1, #32
 2e4:	and	w8, w2, w8
 2e8:	add	x2, sp, #0x70
 2ec:	add	x6, sp, #0x70
 2f0:	cmp	w0, #0x0
 2f4:	add	w8, w0, w8
 2f8:	add	w18, w18, #0x1
 2fc:	ldrh	w2, [x2, x3]
 300:	csel	w0, w8, w0, ne  // ne = any
 304:	sub	w2, w2, #0x1
 308:	and	w2, w2, #0xffff
 30c:	strh	w2, [x6, x3]
 310:	cbnz	w2, 324 <inflate_table+0x324>
 314:	cmp	w13, w11
 318:	b.eq	404 <inflate_table+0x404>  // b.none
 31c:	ldrh	w2, [x5, w18, uxtw #1]
 320:	ldrh	w13, [x1, x2, lsl #1]
 324:	sub	w9, w13, w17
 328:	cmp	w13, w20
 32c:	b.ls	340 <inflate_table+0x340>  // b.plast
 330:	and	w6, w25, w0
 334:	sub	w9, w13, w17
 338:	cmp	w6, w23
 33c:	b.ne	348 <inflate_table+0x348>  // b.any
 340:	mov	w8, w0
 344:	b	260 <inflate_table+0x260>
 348:	cmp	w17, #0x0
 34c:	add	x7, x7, w15, uxtw #2
 350:	csel	w17, w17, w20, ne  // ne = any
 354:	cmp	w13, w11
 358:	sub	w16, w13, w17
 35c:	mov	w9, w16
 360:	lsl	w2, w30, w16
 364:	b.cs	3b0 <inflate_table+0x3b0>  // b.hs, b.nlast
 368:	add	x3, sp, #0x70
 36c:	ldrh	w3, [x3, w13, uxtw #1]
 370:	sub	w2, w2, w3
 374:	cmp	w2, #0x0
 378:	b.le	3b0 <inflate_table+0x3b0>
 37c:	add	w3, w13, #0x1
 380:	add	x8, sp, #0x70
 384:	add	x3, x8, x3, lsl #1
 388:	b	39c <inflate_table+0x39c>
 38c:	ldrh	w8, [x3], #2
 390:	sub	w2, w2, w8
 394:	cmp	w2, #0x0
 398:	b.le	3b0 <inflate_table+0x3b0>
 39c:	add	w16, w16, #0x1
 3a0:	lsl	w2, w2, #1
 3a4:	add	w8, w17, w16
 3a8:	cmp	w8, w11
 3ac:	b.cc	38c <inflate_table+0x38c>  // b.lo, b.ul, b.last
 3b0:	lsl	w2, w30, w16
 3b4:	add	w22, w22, w2
 3b8:	cmp	w22, #0x354
 3bc:	ccmp	w19, #0x0, #0x4, hi  // hi = pmore
 3c0:	b.ne	44c <inflate_table+0x44c>  // b.any
 3c4:	cmp	w22, #0x250
 3c8:	ccmp	w28, #0x0, #0x4, hi  // hi = pmore
 3cc:	b.ne	44c <inflate_table+0x44c>  // b.any
 3d0:	ubfiz	x8, x6, #2, #32
 3d4:	sub	x2, x7, x24
 3d8:	add	x3, x24, x8
 3dc:	mov	w23, w6
 3e0:	asr	x2, x2, #2
 3e4:	strb	w16, [x24, x8]
 3e8:	mov	w8, w0
 3ec:	strb	w20, [x3, #1]
 3f0:	strh	w2, [x3, #2]
 3f4:	b	260 <inflate_table+0x260>
 3f8:	mov	w6, #0x0                   	// #0
 3fc:	mov	w12, #0x60                  	// #96
 400:	b	290 <inflate_table+0x290>
 404:	ldr	x3, [sp, #104]
 408:	cbz	w0, 424 <inflate_table+0x424>
 40c:	ubfiz	x0, x0, #2, #32
 410:	mov	w2, #0x40                  	// #64
 414:	add	x1, x7, x0
 418:	strb	w2, [x7, x0]
 41c:	strb	w14, [x1, #1]
 420:	strh	wzr, [x1, #2]
 424:	add	x22, x24, w22, uxtw #2
 428:	mov	w0, #0x0                   	// #0
 42c:	ldp	x23, x24, [sp, #48]
 430:	ldp	x25, x26, [sp, #64]
 434:	ldp	x27, x28, [sp, #80]
 438:	str	x22, [x3]
 43c:	str	w20, [x4]
 440:	ldp	x19, x20, [sp, #16]
 444:	ldp	x21, x22, [sp, #32]
 448:	b	a0 <inflate_table+0xa0>
 44c:	ldp	x23, x24, [sp, #48]
 450:	b	1c0 <inflate_table+0x1c0>
 454:	mov	w13, w11
 458:	b	d4 <inflate_table+0xd4>
 45c:	adrp	x26, 0 <inflate_table>
 460:	add	x26, x26, #0x0
 464:	add	x27, x26, #0x80
 468:	mov	w0, w10
 46c:	add	x26, x26, #0xc0
 470:	mov	w21, #0x101                 	// #257
 474:	mov	w28, #0x0                   	// #0
 478:	stp	x23, x24, [sp, #48]
 47c:	b	230 <inflate_table+0x230>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <pqdownheap>:
       0:	sxtw	x4, w2
       4:	ldr	w8, [x0, #5300]
       8:	add	x3, x4, #0x2f0
       c:	lsl	w5, w2, #1
      10:	cmp	w8, w2, lsl #1
      14:	ldr	w14, [x0, x3, lsl #2]
      18:	b.lt	b4 <pqdownheap+0xb4>  // b.tstop
      1c:	sbfiz	x2, x14, #2, #32
      20:	add	x13, x0, w14, sxtw
      24:	add	x13, x13, #0x1, lsl #12
      28:	ldrh	w11, [x1, x2]
      2c:	b	48 <pqdownheap+0x48>
      30:	add	x4, x4, #0x2f0
      34:	cmp	w8, w2, lsl #1
      38:	lsl	w5, w2, #1
      3c:	str	w3, [x0, x4, lsl #2]
      40:	sxtw	x4, w2
      44:	b.lt	b4 <pqdownheap+0xb4>  // b.tstop
      48:	add	x7, x0, w5, sxtw #2
      4c:	mov	w2, w5
      50:	cmp	w8, w5
      54:	ldr	w3, [x7, #3008]
      58:	sbfiz	x6, x3, #2, #32
      5c:	sxtw	x9, w3
      60:	ldrh	w6, [x1, x6]
      64:	b.le	90 <pqdownheap+0x90>
      68:	ldr	w7, [x7, #3012]
      6c:	add	w2, w5, #0x1
      70:	sbfiz	x10, x7, #2, #32
      74:	sxtw	x12, w7
      78:	ldrh	w10, [x1, x10]
      7c:	cmp	w10, w6
      80:	b.cc	c0 <pqdownheap+0xc0>  // b.lo, b.ul, b.last
      84:	b.eq	cc <pqdownheap+0xcc>  // b.none
      88:	mov	w2, w5
      8c:	nop
      90:	cmp	w11, w6
      94:	b.cc	b4 <pqdownheap+0xb4>  // b.lo, b.ul, b.last
      98:	b.ne	30 <pqdownheap+0x30>  // b.any
      9c:	add	x5, x0, w3, sxtw
      a0:	ldrb	w6, [x13, #1212]
      a4:	add	x5, x5, #0x1, lsl #12
      a8:	ldrb	w5, [x5, #1212]
      ac:	cmp	w6, w5
      b0:	b.hi	30 <pqdownheap+0x30>  // b.pmore
      b4:	add	x4, x4, #0x2f0
      b8:	str	w14, [x0, x4, lsl #2]
      bc:	ret
      c0:	mov	w6, w10
      c4:	mov	w3, w7
      c8:	b	90 <pqdownheap+0x90>
      cc:	add	x12, x0, x12
      d0:	add	x9, x0, x9
      d4:	add	x12, x12, #0x1, lsl #12
      d8:	add	x9, x9, #0x1, lsl #12
      dc:	ldrb	w10, [x12, #1212]
      e0:	ldrb	w9, [x9, #1212]
      e4:	cmp	w10, w9
      e8:	csel	w3, w3, w7, hi  // hi = pmore
      ec:	csel	w2, w5, w2, hi  // hi = pmore
      f0:	b	90 <pqdownheap+0x90>
      f4:	nop

00000000000000f8 <build_tree>:
      f8:	stp	x29, x30, [sp, #-80]!
      fc:	mov	x5, #0x1400                	// #5120
     100:	add	x3, x0, x5
     104:	mov	x29, sp
     108:	ldr	x2, [x1, #16]
     10c:	stp	x19, x20, [sp, #16]
     110:	mov	x4, #0x23d00000000         	// #2461016260608
     114:	ldr	w19, [x2, #20]
     118:	ldr	x7, [x2]
     11c:	str	x21, [sp, #32]
     120:	mov	x21, x1
     124:	cmp	w19, #0x0
     128:	ldr	x1, [x1]
     12c:	stur	x4, [x3, #180]
     130:	b.le	5c4 <build_tree+0x4cc>
     134:	mov	x4, #0x14bc                	// #5308
     138:	mov	x3, x1
     13c:	add	x20, x0, x4
     140:	mov	x2, #0x0                   	// #0
     144:	mov	w15, #0x0                   	// #0
     148:	mov	w18, #0xffffffff            	// #-1
     14c:	b	178 <build_tree+0x80>
     150:	add	w15, w15, #0x1
     154:	str	w15, [x0, #5300]
     158:	mov	w18, w2
     15c:	add	x3, x3, #0x4
     160:	add	x4, x0, w15, sxtw #2
     164:	str	w2, [x4, #3008]
     168:	strb	wzr, [x20, x2]
     16c:	add	x2, x2, #0x1
     170:	cmp	w19, w2
     174:	b.le	194 <build_tree+0x9c>
     178:	ldrh	w4, [x3]
     17c:	cbnz	w4, 150 <build_tree+0x58>
     180:	strh	wzr, [x3, #2]
     184:	add	x2, x2, #0x1
     188:	add	x3, x3, #0x4
     18c:	cmp	w19, w2
     190:	b.gt	178 <build_tree+0x80>
     194:	cmp	w15, #0x1
     198:	b.gt	238 <build_tree+0x140>
     19c:	ldr	x10, [x0, #5912]
     1a0:	sxtw	x3, w15
     1a4:	add	x9, x0, #0xbc4
     1a8:	mov	w8, #0x1                   	// #1
     1ac:	nop
     1b0:	mov	x6, x1
     1b4:	cmp	w18, #0x1
     1b8:	mov	w5, #0x0                   	// #0
     1bc:	mov	x2, #0x0                   	// #0
     1c0:	b.gt	1d4 <build_tree+0xdc>
     1c4:	add	w18, w18, #0x1
     1c8:	mov	w5, w18
     1cc:	sbfiz	x2, x18, #2, #32
     1d0:	add	x6, x1, x2
     1d4:	add	x4, x0, w5, sxtw
     1d8:	str	w5, [x9, x3, lsl #2]
     1dc:	add	x4, x4, #0x1, lsl #12
     1e0:	strh	w8, [x6]
     1e4:	add	x3, x3, #0x1
     1e8:	add	x2, x7, x2
     1ec:	cmp	w3, #0x1
     1f0:	strb	wzr, [x4, #1212]
     1f4:	cbz	x7, 208 <build_tree+0x110>
     1f8:	ldr	x4, [x0, #5920]
     1fc:	ldrh	w2, [x2, #2]
     200:	sub	x2, x4, x2
     204:	str	x2, [x0, #5920]
     208:	b.le	1b0 <build_tree+0xb8>
     20c:	cmp	w15, #0x1
     210:	mov	w2, #0x1                   	// #1
     214:	sub	w2, w2, w15
     218:	sub	x3, x10, #0x1
     21c:	csel	w4, w2, wzr, le
     220:	add	w15, w15, #0x1
     224:	csneg	x2, xzr, x2, gt
     228:	add	w15, w4, w15
     22c:	add	x2, x2, x3
     230:	str	w15, [x0, #5300]
     234:	str	x2, [x0, #5912]
     238:	asr	w15, w15, #1
     23c:	str	w18, [x21, #8]
     240:	mov	w2, w15
     244:	bl	0 <pqdownheap>
     248:	subs	w15, w15, #0x1
     24c:	b.ne	240 <build_tree+0x148>  // b.any
     250:	ldr	w2, [x0, #5300]
     254:	sxtw	x15, w19
     258:	add	x3, x0, w2, sxtw #2
     25c:	ldr	w19, [x0, #3012]
     260:	sub	w2, w2, #0x1
     264:	ldr	w3, [x3, #3008]
     268:	str	w3, [x0, #3012]
     26c:	str	w2, [x0, #5300]
     270:	mov	w2, #0x1                   	// #1
     274:	bl	0 <pqdownheap>
     278:	ldr	w2, [x0, #5304]
     27c:	ldr	w5, [x0, #3012]
     280:	sbfiz	x7, x19, #2, #32
     284:	sub	w6, w2, #0x2
     288:	lsl	x11, x15, #2
     28c:	add	x2, x0, w2, sxtw #2
     290:	add	x4, x0, w19, sxtw
     294:	sbfiz	x8, x5, #2, #32
     298:	add	x3, x0, w5, sxtw
     29c:	add	x10, x1, x8
     2a0:	add	x4, x4, #0x1, lsl #12
     2a4:	str	w19, [x2, #3004]
     2a8:	add	x3, x3, #0x1, lsl #12
     2ac:	str	w6, [x0, #5304]
     2b0:	add	x9, x1, x7
     2b4:	str	w5, [x2, #3000]
     2b8:	mov	w2, #0x1                   	// #1
     2bc:	and	w6, w15, #0xffff
     2c0:	ldrh	w5, [x1, x7]
     2c4:	ldrh	w8, [x1, x8]
     2c8:	add	w5, w5, w8
     2cc:	strh	w5, [x1, x11]
     2d0:	ldrb	w7, [x4, #1212]
     2d4:	ldrb	w5, [x3, #1212]
     2d8:	add	w4, w7, w2
     2dc:	add	w3, w5, w2
     2e0:	cmp	w7, w5
     2e4:	and	w4, w4, #0xff
     2e8:	and	w3, w3, #0xff
     2ec:	csel	w3, w3, w4, cc  // cc = lo, ul, last
     2f0:	strb	w3, [x20, x15]
     2f4:	strh	w6, [x10, #2]
     2f8:	strh	w6, [x9, #2]
     2fc:	str	w15, [x0, #3012]
     300:	add	x15, x15, #0x1
     304:	bl	0 <pqdownheap>
     308:	ldr	w2, [x0, #5300]
     30c:	cmp	w2, #0x1
     310:	b.gt	258 <build_tree+0x160>
     314:	ldr	w3, [x0, #5304]
     318:	add	x8, x0, #0xba0
     31c:	ldr	x4, [x21, #16]
     320:	sub	w7, w3, #0x1
     324:	ldr	w10, [x21, #8]
     328:	mov	x2, x8
     32c:	add	x11, x0, w7, sxtw #2
     330:	add	x9, x0, #0xbc0
     334:	ldr	w16, [x4, #16]
     338:	ldr	w6, [x4, #24]
     33c:	ldp	x14, x15, [x4]
     340:	ldr	w4, [x0, #3012]
     344:	ldr	x5, [x21]
     348:	str	w7, [x0, #5304]
     34c:	str	w4, [x11, #3008]
     350:	strh	wzr, [x2], #2
     354:	cmp	x9, x2
     358:	b.ne	350 <build_tree+0x258>  // b.any
     35c:	add	x4, x5, w4, sxtw #2
     360:	cmp	w3, #0x23c
     364:	mov	w11, #0x0                   	// #0
     368:	sxtw	x3, w3
     36c:	strh	wzr, [x4, #2]
     370:	b.gt	4a0 <build_tree+0x3a8>
     374:	nop
     378:	ldr	w4, [x9, x3, lsl #2]
     37c:	mov	w13, #0x0                   	// #0
     380:	add	x3, x3, #0x1
     384:	sbfiz	x7, x4, #2, #32
     388:	add	x12, x5, x7
     38c:	add	x17, x14, x7
     390:	ldrh	w2, [x12, #2]
     394:	add	x2, x5, x2, lsl #2
     398:	ldrh	w2, [x2, #2]
     39c:	add	w2, w2, #0x1
     3a0:	cmp	w6, w2
     3a4:	b.ge	3b0 <build_tree+0x2b8>  // b.tcont
     3a8:	add	w11, w11, #0x1
     3ac:	mov	w2, w6
     3b0:	strh	w2, [x12, #2]
     3b4:	cmp	w10, w4
     3b8:	add	x12, x0, w2, sxtw #1
     3bc:	b.lt	408 <build_tree+0x310>  // b.tstop
     3c0:	sub	w19, w4, w16
     3c4:	cmp	w16, w4
     3c8:	ldrh	w4, [x12, #2976]
     3cc:	add	w4, w4, #0x1
     3d0:	strh	w4, [x12, #2976]
     3d4:	b.gt	3e0 <build_tree+0x2e8>
     3d8:	ldr	w13, [x15, w19, sxtw #2]
     3dc:	add	w2, w2, w13
     3e0:	ldrh	w4, [x5, x7]
     3e4:	ldr	x7, [x0, #5912]
     3e8:	umaddl	x2, w2, w4, x7
     3ec:	str	x2, [x0, #5912]
     3f0:	cbz	x14, 408 <build_tree+0x310>
     3f4:	ldrh	w2, [x17, #2]
     3f8:	ldr	x7, [x0, #5920]
     3fc:	add	w2, w2, w13
     400:	umaddl	x2, w2, w4, x7
     404:	str	x2, [x0, #5920]
     408:	cmp	w3, #0x23c
     40c:	b.le	378 <build_tree+0x280>
     410:	cbz	w11, 4a0 <build_tree+0x3a8>
     414:	sxtw	x12, w6
     418:	sub	w15, w11, #0x1
     41c:	add	x16, x12, #0x5ce
     420:	and	w15, w15, #0xfffffffe
     424:	add	x14, x0, x12, lsl #1
     428:	sub	w7, w11, #0x2
     42c:	add	x16, x0, x16, lsl #1
     430:	sub	w15, w7, w15
     434:	sub	w13, w6, #0x1
     438:	ldrh	w3, [x14, #2974]
     43c:	cbnz	w3, 494 <build_tree+0x39c>
     440:	mov	x11, x16
     444:	mov	w2, w13
     448:	ldrh	w3, [x11], #-2
     44c:	mov	w4, w2
     450:	sub	w2, w2, #0x1
     454:	cbz	w3, 448 <build_tree+0x350>
     458:	add	x2, x0, w2, sxtw #1
     45c:	add	x4, x0, w4, sxtw #1
     460:	sub	w3, w3, #0x1
     464:	cmp	w7, w15
     468:	strh	w3, [x2, #2976]
     46c:	ldrh	w2, [x4, #2976]
     470:	add	w2, w2, #0x2
     474:	strh	w2, [x4, #2976]
     478:	ldrh	w2, [x14, #2976]
     47c:	sub	w2, w2, #0x1
     480:	strh	w2, [x14, #2976]
     484:	b.eq	548 <build_tree+0x450>  // b.none
     488:	ldrh	w3, [x14, #2974]
     48c:	sub	w7, w7, #0x2
     490:	cbz	w3, 440 <build_tree+0x348>
     494:	mov	w4, w6
     498:	mov	w2, w13
     49c:	b	458 <build_tree+0x360>
     4a0:	add	x6, sp, #0x30
     4a4:	mov	x2, #0x0                   	// #0
     4a8:	mov	w0, #0x0                   	// #0
     4ac:	nop
     4b0:	ldrh	w4, [x8, x2]
     4b4:	add	x3, x6, x2
     4b8:	add	x2, x2, #0x2
     4bc:	add	w0, w4, w0
     4c0:	cmp	x2, #0x1e
     4c4:	lsl	w0, w0, #1
     4c8:	strh	w0, [x3, #2]
     4cc:	b.ne	4b0 <build_tree+0x3b8>  // b.any
     4d0:	cmn	w18, #0x1
     4d4:	b.eq	538 <build_tree+0x440>  // b.none
     4d8:	add	x0, x1, #0x4
     4dc:	add	x18, x0, w18, sxtw #2
     4e0:	b	4f0 <build_tree+0x3f8>
     4e4:	add	x1, x1, #0x4
     4e8:	cmp	x18, x1
     4ec:	b.eq	538 <build_tree+0x440>  // b.none
     4f0:	ldrh	w0, [x1, #2]
     4f4:	cbz	w0, 4e4 <build_tree+0x3ec>
     4f8:	sbfiz	x2, x0, #1, #32
     4fc:	mov	w4, #0x0                   	// #0
     500:	ldrh	w5, [x6, x2]
     504:	mov	w3, w5
     508:	add	w5, w5, #0x1
     50c:	strh	w5, [x6, x2]
     510:	and	w2, w3, #0x1
     514:	subs	w0, w0, #0x1
     518:	orr	w2, w2, w4
     51c:	lsr	w3, w3, #1
     520:	lsl	w4, w2, #1
     524:	b.ne	510 <build_tree+0x418>  // b.any
     528:	strh	w2, [x1]
     52c:	add	x1, x1, #0x4
     530:	cmp	x18, x1
     534:	b.ne	4f0 <build_tree+0x3f8>  // b.any
     538:	ldp	x19, x20, [sp, #16]
     53c:	ldr	x21, [sp, #32]
     540:	ldp	x29, x30, [sp], #80
     544:	ret
     548:	cbz	w6, 4a0 <build_tree+0x3a8>
     54c:	mov	w14, #0x23d                 	// #573
     550:	ldrh	w7, [x8, x12, lsl #1]
     554:	cbz	w7, 5a8 <build_tree+0x4b0>
     558:	sub	w3, w14, #0x1
     55c:	sxtw	x3, w3
     560:	ldr	w4, [x9, x3, lsl #2]
     564:	mov	w14, w3
     568:	cmp	w10, w4
     56c:	b.lt	5bc <build_tree+0x4c4>  // b.tstop
     570:	sbfiz	x4, x4, #2, #32
     574:	sub	x3, x3, #0x1
     578:	add	x11, x5, x4
     57c:	ldrh	w2, [x11, #2]
     580:	cmp	w2, w6
     584:	b.eq	5a0 <build_tree+0x4a8>  // b.none
     588:	ldrh	w15, [x5, x4]
     58c:	sub	x2, x12, w2, uxth
     590:	ldr	x4, [x0, #5912]
     594:	madd	x2, x2, x15, x4
     598:	str	x2, [x0, #5912]
     59c:	strh	w6, [x11, #2]
     5a0:	subs	w7, w7, #0x1
     5a4:	b.ne	560 <build_tree+0x468>  // b.any
     5a8:	sub	x12, x12, #0x1
     5ac:	mov	w6, w13
     5b0:	cbz	w13, 4a0 <build_tree+0x3a8>
     5b4:	sub	w13, w13, #0x1
     5b8:	b	550 <build_tree+0x458>
     5bc:	sub	x3, x3, #0x1
     5c0:	b	560 <build_tree+0x468>
     5c4:	mov	x2, #0x14bc                	// #5308
     5c8:	mov	w18, #0xffffffff            	// #-1
     5cc:	add	x20, x0, x2
     5d0:	mov	w15, #0x0                   	// #0
     5d4:	b	19c <build_tree+0xa4>

00000000000005d8 <scan_tree>:
     5d8:	ldrh	w4, [x1, #2]
     5dc:	add	x6, x1, w2, sxtw #2
     5e0:	mov	w8, #0xffffffff            	// #-1
     5e4:	mov	w3, #0x3                   	// #3
     5e8:	cmp	w4, #0x0
     5ec:	mov	w7, #0x4                   	// #4
     5f0:	strh	w8, [x6, #6]
     5f4:	csel	w7, w7, w3, ne  // ne = any
     5f8:	mov	w5, #0x7                   	// #7
     5fc:	mov	w3, #0x8a                  	// #138
     600:	csel	w5, w5, w3, ne  // ne = any
     604:	tbnz	w2, #31, 674 <scan_tree+0x9c>
     608:	add	x6, x1, #0xa
     60c:	add	x3, x1, #0x6
     610:	add	x6, x6, w2, sxtw #2
     614:	mov	w1, #0x0                   	// #0
     618:	mov	w8, #0xffffffff            	// #-1
     61c:	nop
     620:	add	w1, w1, #0x1
     624:	mov	w2, w4
     628:	cmp	w1, w5
     62c:	ldrh	w4, [x3]
     630:	b.ge	678 <scan_tree+0xa0>  // b.tcont
     634:	cmp	w4, w2
     638:	b.eq	668 <scan_tree+0x90>  // b.none
     63c:	cmp	w1, w7
     640:	b.ge	678 <scan_tree+0xa0>  // b.tcont
     644:	add	x5, x0, w2, sxtw #2
     648:	ldrh	w7, [x5, #2748]
     64c:	add	w1, w1, w7
     650:	strh	w1, [x5, #2748]
     654:	cbz	w4, 6c0 <scan_tree+0xe8>
     658:	mov	w8, w2
     65c:	mov	w7, #0x4                   	// #4
     660:	mov	w5, #0x7                   	// #7
     664:	mov	w1, #0x0                   	// #0
     668:	add	x3, x3, #0x4
     66c:	cmp	x6, x3
     670:	b.ne	620 <scan_tree+0x48>  // b.any
     674:	ret
     678:	cbz	w2, 6d4 <scan_tree+0xfc>
     67c:	cmp	w2, w8
     680:	b.eq	694 <scan_tree+0xbc>  // b.none
     684:	add	x5, x0, w2, sxtw #2
     688:	ldrh	w1, [x5, #2748]
     68c:	add	w1, w1, #0x1
     690:	strh	w1, [x5, #2748]
     694:	ldrh	w1, [x0, #2812]
     698:	add	w1, w1, #0x1
     69c:	strh	w1, [x0, #2812]
     6a0:	cbz	w4, 6c0 <scan_tree+0xe8>
     6a4:	cmp	w4, w2
     6a8:	b.ne	658 <scan_tree+0x80>  // b.any
     6ac:	mov	w8, w4
     6b0:	mov	w7, #0x3                   	// #3
     6b4:	mov	w5, #0x6                   	// #6
     6b8:	mov	w1, #0x0                   	// #0
     6bc:	b	668 <scan_tree+0x90>
     6c0:	mov	w8, w2
     6c4:	mov	w7, #0x3                   	// #3
     6c8:	mov	w5, #0x8a                  	// #138
     6cc:	mov	w1, #0x0                   	// #0
     6d0:	b	668 <scan_tree+0x90>
     6d4:	cmp	w1, #0xa
     6d8:	b.gt	6ec <scan_tree+0x114>
     6dc:	ldrh	w1, [x0, #2816]
     6e0:	add	w1, w1, #0x1
     6e4:	strh	w1, [x0, #2816]
     6e8:	b	6a0 <scan_tree+0xc8>
     6ec:	ldrh	w1, [x0, #2820]
     6f0:	add	w1, w1, #0x1
     6f4:	strh	w1, [x0, #2820]
     6f8:	b	6a0 <scan_tree+0xc8>
     6fc:	nop

0000000000000700 <send_tree>:
     700:	ldrh	w10, [x1, #2]
     704:	mov	w8, #0x4                   	// #4
     708:	mov	w4, #0x3                   	// #3
     70c:	mov	w5, #0x7                   	// #7
     710:	cmp	w10, #0x0
     714:	mov	w3, #0x8a                  	// #138
     718:	csel	w8, w8, w4, ne  // ne = any
     71c:	csel	w5, w5, w3, ne  // ne = any
     720:	tbnz	w2, #31, 824 <send_tree+0x124>
     724:	add	x12, x1, #0xa
     728:	add	x7, x1, #0x6
     72c:	add	x12, x12, w2, sxtw #2
     730:	mov	w4, #0x0                   	// #0
     734:	mov	w9, #0xffffffff            	// #-1
     738:	mov	w6, #0x10                  	// #16
     73c:	nop
     740:	add	w3, w4, #0x1
     744:	mov	w11, w10
     748:	cmp	w3, w5
     74c:	ldrh	w10, [x7]
     750:	b.ge	828 <send_tree+0x128>  // b.tcont
     754:	cmp	w10, w11
     758:	b.eq	bdc <send_tree+0x4dc>  // b.none
     75c:	cmp	w3, w8
     760:	b.ge	828 <send_tree+0x128>  // b.tcont
     764:	add	x8, x0, w11, sxtw #2
     768:	b	7c0 <send_tree+0xc0>
     76c:	strh	w1, [x0, #5936]
     770:	subs	w3, w3, #0x1
     774:	ldr	x9, [x0, #16]
     778:	ldr	x1, [x0, #40]
     77c:	add	x13, x1, #0x1
     780:	str	x13, [x0, #40]
     784:	strb	w4, [x9, x1]
     788:	ldr	x9, [x0, #16]
     78c:	ldr	x4, [x0, #40]
     790:	ldrh	w1, [x0, #5936]
     794:	add	x13, x4, #0x1
     798:	str	x13, [x0, #40]
     79c:	lsr	w1, w1, #8
     7a0:	strb	w1, [x9, x4]
     7a4:	ldr	w1, [x0, #5940]
     7a8:	sub	w4, w6, w1
     7ac:	add	w2, w2, w1
     7b0:	str	w2, [x0, #5940]
     7b4:	asr	w5, w5, w4
     7b8:	strh	w5, [x0, #5936]
     7bc:	b.eq	804 <send_tree+0x104>  // b.none
     7c0:	ldr	w4, [x0, #5940]
     7c4:	ldrh	w5, [x8, #2748]
     7c8:	ldrh	w9, [x0, #5936]
     7cc:	ldrh	w2, [x8, #2750]
     7d0:	lsl	w1, w5, w4
     7d4:	orr	w1, w1, w9
     7d8:	sub	w9, w6, w2
     7dc:	add	w13, w4, w2
     7e0:	cmp	w4, w9
     7e4:	sub	w2, w2, #0x10
     7e8:	sxth	w4, w1
     7ec:	and	w1, w1, #0xffff
     7f0:	b.gt	76c <send_tree+0x6c>
     7f4:	strh	w1, [x0, #5936]
     7f8:	subs	w3, w3, #0x1
     7fc:	str	w13, [x0, #5940]
     800:	b.ne	7c0 <send_tree+0xc0>  // b.any
     804:	cbnz	w10, 9a4 <send_tree+0x2a4>
     808:	add	x7, x7, #0x4
     80c:	mov	w9, w11
     810:	cmp	x12, x7
     814:	mov	w8, #0x3                   	// #3
     818:	mov	w5, #0x8a                  	// #138
     81c:	mov	w4, #0x0                   	// #0
     820:	b.ne	740 <send_tree+0x40>  // b.any
     824:	ret
     828:	ldrh	w1, [x0, #5936]
     82c:	ldr	w2, [x0, #5940]
     830:	cbz	w11, 9c4 <send_tree+0x2c4>
     834:	sxth	w1, w1
     838:	cmp	w11, w9
     83c:	b.eq	8bc <send_tree+0x1bc>  // b.none
     840:	add	x3, x0, w11, sxtw #2
     844:	ldrh	w8, [x3, #2748]
     848:	ldrh	w5, [x3, #2750]
     84c:	lsl	w3, w8, w2
     850:	orr	w1, w1, w3
     854:	sub	w3, w6, w5
     858:	and	w9, w1, #0xffff
     85c:	cmp	w3, w2
     860:	sxth	w1, w1
     864:	b.ge	bcc <send_tree+0x4cc>  // b.tcont
     868:	ldr	x13, [x0, #16]
     86c:	mov	w3, w4
     870:	ldr	x2, [x0, #40]
     874:	strh	w9, [x0, #5936]
     878:	sub	w5, w5, #0x10
     87c:	add	x4, x2, #0x1
     880:	str	x4, [x0, #40]
     884:	strb	w1, [x13, x2]
     888:	ldr	x4, [x0, #16]
     88c:	ldr	x2, [x0, #40]
     890:	ldrh	w1, [x0, #5936]
     894:	add	x9, x2, #0x1
     898:	str	x9, [x0, #40]
     89c:	lsr	w1, w1, #8
     8a0:	strb	w1, [x4, x2]
     8a4:	ldr	w2, [x0, #5940]
     8a8:	sub	w1, w6, w2
     8ac:	add	w2, w5, w2
     8b0:	str	w2, [x0, #5940]
     8b4:	asr	w1, w8, w1
     8b8:	sxth	w1, w1
     8bc:	ldrh	w5, [x0, #2812]
     8c0:	ldrh	w4, [x0, #2814]
     8c4:	lsl	w8, w5, w2
     8c8:	orr	w1, w1, w8
     8cc:	sub	w8, w6, w4
     8d0:	and	w9, w1, #0xffff
     8d4:	cmp	w8, w2
     8d8:	sxth	w1, w1
     8dc:	b.ge	aa8 <send_tree+0x3a8>  // b.tcont
     8e0:	ldr	x13, [x0, #16]
     8e4:	sub	w2, w4, #0x10
     8e8:	ldr	x8, [x0, #40]
     8ec:	strh	w9, [x0, #5936]
     8f0:	sub	w3, w3, #0x3
     8f4:	add	x4, x8, #0x1
     8f8:	str	x4, [x0, #40]
     8fc:	strb	w1, [x13, x8]
     900:	ldr	x8, [x0, #16]
     904:	ldr	x4, [x0, #40]
     908:	ldrh	w1, [x0, #5936]
     90c:	add	x9, x4, #0x1
     910:	str	x9, [x0, #40]
     914:	lsr	w1, w1, #8
     918:	strb	w1, [x8, x4]
     91c:	ldr	w1, [x0, #5940]
     920:	sub	w4, w6, w1
     924:	add	w2, w2, w1
     928:	str	w2, [x0, #5940]
     92c:	cmp	w2, #0xe
     930:	asr	w1, w5, w4
     934:	sxth	w1, w1
     938:	b.le	abc <send_tree+0x3bc>
     93c:	and	w3, w3, #0xffff
     940:	ldr	x5, [x0, #16]
     944:	lsl	w2, w3, w2
     948:	ldr	x4, [x0, #40]
     94c:	orr	w1, w1, w2
     950:	add	x2, x4, #0x1
     954:	sxth	w1, w1
     958:	str	x2, [x0, #40]
     95c:	strh	w1, [x0, #5936]
     960:	strb	w1, [x5, x4]
     964:	ldr	x4, [x0, #16]
     968:	ldr	x2, [x0, #40]
     96c:	ldrh	w1, [x0, #5936]
     970:	add	x5, x2, #0x1
     974:	str	x5, [x0, #40]
     978:	lsr	w1, w1, #8
     97c:	strb	w1, [x4, x2]
     980:	ldr	w1, [x0, #5940]
     984:	sub	w2, w6, w1
     988:	sub	w1, w1, #0xe
     98c:	str	w1, [x0, #5940]
     990:	asr	w3, w3, w2
     994:	strh	w3, [x0, #5936]
     998:	cbz	w10, 808 <send_tree+0x108>
     99c:	cmp	w10, w11
     9a0:	b.eq	bb8 <send_tree+0x4b8>  // b.none
     9a4:	mov	w9, w11
     9a8:	mov	w8, #0x4                   	// #4
     9ac:	mov	w5, #0x7                   	// #7
     9b0:	mov	w4, #0x0                   	// #0
     9b4:	add	x7, x7, #0x4
     9b8:	cmp	x12, x7
     9bc:	b.ne	740 <send_tree+0x40>  // b.any
     9c0:	ret
     9c4:	cmp	w3, #0xa
     9c8:	b.gt	ad8 <send_tree+0x3d8>
     9cc:	ldrh	w8, [x0, #2818]
     9d0:	ldrh	w5, [x0, #2816]
     9d4:	sub	w9, w6, w8
     9d8:	cmp	w9, w2
     9dc:	b.ge	be4 <send_tree+0x4e4>  // b.tcont
     9e0:	ldr	x13, [x0, #16]
     9e4:	lsl	w2, w5, w2
     9e8:	ldr	x9, [x0, #40]
     9ec:	orr	w1, w2, w1
     9f0:	sub	w2, w8, #0x10
     9f4:	sxth	w1, w1
     9f8:	add	x8, x9, #0x1
     9fc:	str	x8, [x0, #40]
     a00:	strh	w1, [x0, #5936]
     a04:	strb	w1, [x13, x9]
     a08:	ldr	x9, [x0, #16]
     a0c:	ldr	x8, [x0, #40]
     a10:	ldrh	w1, [x0, #5936]
     a14:	add	x13, x8, #0x1
     a18:	str	x13, [x0, #40]
     a1c:	lsr	w1, w1, #8
     a20:	strb	w1, [x9, x8]
     a24:	ldr	w1, [x0, #5940]
     a28:	sub	w8, w6, w1
     a2c:	add	w2, w2, w1
     a30:	str	w2, [x0, #5940]
     a34:	cmp	w2, #0xd
     a38:	asr	w5, w5, w8
     a3c:	sxth	w1, w5
     a40:	b.le	c00 <send_tree+0x500>
     a44:	sub	w4, w4, #0x2
     a48:	and	w4, w4, #0xffff
     a4c:	ldr	x5, [x0, #16]
     a50:	lsl	w2, w4, w2
     a54:	ldr	x3, [x0, #40]
     a58:	orr	w1, w1, w2
     a5c:	add	x2, x3, #0x1
     a60:	sxth	w1, w1
     a64:	str	x2, [x0, #40]
     a68:	strh	w1, [x0, #5936]
     a6c:	strb	w1, [x5, x3]
     a70:	ldr	x3, [x0, #16]
     a74:	ldr	x2, [x0, #40]
     a78:	ldrh	w1, [x0, #5936]
     a7c:	add	x5, x2, #0x1
     a80:	str	x5, [x0, #40]
     a84:	lsr	w1, w1, #8
     a88:	strb	w1, [x3, x2]
     a8c:	ldr	w1, [x0, #5940]
     a90:	sub	w2, w6, w1
     a94:	sub	w1, w1, #0xd
     a98:	str	w1, [x0, #5940]
     a9c:	asr	w4, w4, w2
     aa0:	strh	w4, [x0, #5936]
     aa4:	b	998 <send_tree+0x298>
     aa8:	add	w2, w4, w2
     aac:	str	w2, [x0, #5940]
     ab0:	sub	w3, w3, #0x3
     ab4:	cmp	w2, #0xe
     ab8:	b.gt	93c <send_tree+0x23c>
     abc:	add	w4, w2, #0x2
     ac0:	and	w3, w3, #0xffff
     ac4:	str	w4, [x0, #5940]
     ac8:	lsl	w2, w3, w2
     acc:	orr	w1, w1, w2
     ad0:	strh	w1, [x0, #5936]
     ad4:	b	998 <send_tree+0x298>
     ad8:	ldrh	w9, [x0, #2820]
     adc:	ldrh	w8, [x0, #2822]
     ae0:	lsl	w5, w9, w2
     ae4:	orr	w1, w5, w1
     ae8:	sub	w5, w6, w8
     aec:	and	w13, w1, #0xffff
     af0:	cmp	w5, w2
     af4:	sxth	w1, w1
     af8:	b.ge	c18 <send_tree+0x518>  // b.tcont
     afc:	ldr	x14, [x0, #16]
     b00:	sub	w2, w8, #0x10
     b04:	ldr	x5, [x0, #40]
     b08:	strh	w13, [x0, #5936]
     b0c:	add	x8, x5, #0x1
     b10:	str	x8, [x0, #40]
     b14:	strb	w1, [x14, x5]
     b18:	ldr	x8, [x0, #16]
     b1c:	ldr	x5, [x0, #40]
     b20:	ldrh	w1, [x0, #5936]
     b24:	add	x13, x5, #0x1
     b28:	str	x13, [x0, #40]
     b2c:	lsr	w1, w1, #8
     b30:	strb	w1, [x8, x5]
     b34:	ldr	w1, [x0, #5940]
     b38:	sub	w5, w6, w1
     b3c:	add	w2, w2, w1
     b40:	str	w2, [x0, #5940]
     b44:	asr	w1, w9, w5
     b48:	sxth	w1, w1
     b4c:	cmp	w2, #0x9
     b50:	b.le	c0c <send_tree+0x50c>
     b54:	sub	w4, w4, #0xa
     b58:	and	w4, w4, #0xffff
     b5c:	ldr	x5, [x0, #16]
     b60:	lsl	w2, w4, w2
     b64:	ldr	x3, [x0, #40]
     b68:	orr	w1, w1, w2
     b6c:	add	x2, x3, #0x1
     b70:	sxth	w1, w1
     b74:	str	x2, [x0, #40]
     b78:	strh	w1, [x0, #5936]
     b7c:	strb	w1, [x5, x3]
     b80:	ldr	x3, [x0, #16]
     b84:	ldr	x2, [x0, #40]
     b88:	ldrh	w1, [x0, #5936]
     b8c:	add	x5, x2, #0x1
     b90:	str	x5, [x0, #40]
     b94:	lsr	w1, w1, #8
     b98:	strb	w1, [x3, x2]
     b9c:	ldr	w1, [x0, #5940]
     ba0:	sub	w2, w6, w1
     ba4:	sub	w1, w1, #0x9
     ba8:	str	w1, [x0, #5940]
     bac:	asr	w4, w4, w2
     bb0:	strh	w4, [x0, #5936]
     bb4:	b	998 <send_tree+0x298>
     bb8:	mov	w9, w10
     bbc:	mov	w8, #0x3                   	// #3
     bc0:	mov	w5, #0x6                   	// #6
     bc4:	mov	w4, #0x0                   	// #0
     bc8:	b	9b4 <send_tree+0x2b4>
     bcc:	add	w2, w2, w5
     bd0:	mov	w3, w4
     bd4:	str	w2, [x0, #5940]
     bd8:	b	8bc <send_tree+0x1bc>
     bdc:	mov	w4, w3
     be0:	b	9b4 <send_tree+0x2b4>
     be4:	lsl	w5, w5, w2
     be8:	add	w2, w8, w2
     bec:	orr	w1, w5, w1
     bf0:	str	w2, [x0, #5940]
     bf4:	cmp	w2, #0xd
     bf8:	sxth	w1, w1
     bfc:	b.gt	a44 <send_tree+0x344>
     c00:	sub	w3, w3, #0x3
     c04:	add	w4, w2, #0x3
     c08:	b	ac0 <send_tree+0x3c0>
     c0c:	sub	w3, w3, #0xb
     c10:	add	w4, w2, #0x7
     c14:	b	ac0 <send_tree+0x3c0>
     c18:	add	w2, w8, w2
     c1c:	str	w2, [x0, #5940]
     c20:	b	b4c <send_tree+0x44c>
     c24:	nop

0000000000000c28 <compress_block>:
     c28:	stp	x29, x30, [sp, #-16]!
     c2c:	mov	x29, sp
     c30:	ldr	w6, [x0, #5900]
     c34:	ldrh	w5, [x0, #5936]
     c38:	ldr	w7, [x0, #5940]
     c3c:	sxth	w3, w5
     c40:	cbz	w6, ed0 <compress_block+0x2a8>
     c44:	adrp	x10, 0 <pqdownheap>
     c48:	add	x10, x10, #0x0
     c4c:	add	x13, x10, #0x100
     c50:	add	x12, x10, #0x3f0
     c54:	add	x15, x10, #0x468
     c58:	add	x11, x10, #0x1f0
     c5c:	add	x14, x10, #0x178
     c60:	mov	w8, #0x0                   	// #0
     c64:	mov	w9, #0x10                  	// #16
     c68:	b	cfc <compress_block+0xd4>
     c6c:	ubfiz	x4, x4, #2, #8
     c70:	add	x5, x1, x4
     c74:	ldrh	w17, [x1, x4]
     c78:	ldrh	w16, [x5, #2]
     c7c:	lsl	w4, w17, w7
     c80:	orr	w3, w3, w4
     c84:	sub	w4, w9, w16
     c88:	and	w5, w3, #0xffff
     c8c:	cmp	w4, w7
     c90:	sxth	w3, w3
     c94:	b.ge	f5c <compress_block+0x334>  // b.tcont
     c98:	ldr	x6, [x0, #16]
     c9c:	strh	w5, [x0, #5936]
     ca0:	ldr	x4, [x0, #40]
     ca4:	sub	w16, w16, #0x10
     ca8:	add	x5, x4, #0x1
     cac:	str	x5, [x0, #40]
     cb0:	strb	w3, [x6, x4]
     cb4:	ldr	x5, [x0, #16]
     cb8:	ldr	x4, [x0, #40]
     cbc:	ldrh	w3, [x0, #5936]
     cc0:	add	x6, x4, #0x1
     cc4:	str	x6, [x0, #40]
     cc8:	lsr	w3, w3, #8
     ccc:	strb	w3, [x5, x4]
     cd0:	ldr	w7, [x0, #5940]
     cd4:	ldr	w6, [x0, #5900]
     cd8:	sub	w3, w9, w7
     cdc:	add	w7, w16, w7
     ce0:	str	w7, [x0, #5940]
     ce4:	asr	w3, w17, w3
     ce8:	and	w5, w3, #0xffff
     cec:	sxth	w3, w3
     cf0:	strh	w5, [x0, #5936]
     cf4:	cmp	w6, w8
     cf8:	b.ls	ed0 <compress_block+0x2a8>  // b.plast
     cfc:	ldr	x16, [x0, #5904]
     d00:	mov	w4, w8
     d04:	ldr	x17, [x0, #5888]
     d08:	sxth	w3, w5
     d0c:	ldrh	w16, [x16, w8, uxtw #1]
     d10:	add	w8, w8, #0x1
     d14:	ldrb	w4, [x17, x4]
     d18:	cbz	w16, c6c <compress_block+0x44>
     d1c:	ldrb	w5, [x10, w4, sxtw]
     d20:	add	w6, w5, #0x101
     d24:	ubfiz	x6, x6, #2, #10
     d28:	add	x18, x1, x6
     d2c:	ldrh	w17, [x1, x6]
     d30:	ldrh	w6, [x18, #2]
     d34:	lsl	w18, w17, w7
     d38:	orr	w3, w3, w18
     d3c:	sub	w18, w9, w6
     d40:	and	w30, w3, #0xffff
     d44:	cmp	w18, w7
     d48:	sxth	w3, w3
     d4c:	b.ge	f50 <compress_block+0x328>  // b.tcont
     d50:	ldr	x18, [x0, #40]
     d54:	sub	w7, w6, #0x10
     d58:	strh	w30, [x0, #5936]
     d5c:	add	x6, x18, #0x1
     d60:	str	x6, [x0, #40]
     d64:	ldr	x6, [x0, #16]
     d68:	strb	w3, [x6, x18]
     d6c:	ldr	x18, [x0, #16]
     d70:	ldr	x6, [x0, #40]
     d74:	ldrh	w3, [x0, #5936]
     d78:	add	x30, x6, #0x1
     d7c:	str	x30, [x0, #40]
     d80:	lsr	w3, w3, #8
     d84:	strb	w3, [x18, x6]
     d88:	ldr	w6, [x0, #5940]
     d8c:	sub	w3, w9, w6
     d90:	add	w7, w7, w6
     d94:	str	w7, [x0, #5940]
     d98:	asr	w3, w17, w3
     d9c:	sxth	w3, w3
     da0:	ldr	w6, [x13, x5, lsl #2]
     da4:	cbz	w6, e20 <compress_block+0x1f8>
     da8:	ldr	w5, [x14, x5, lsl #2]
     dac:	sub	w17, w9, w6
     db0:	cmp	w17, w7
     db4:	sub	w4, w4, w5
     db8:	and	w4, w4, #0xffff
     dbc:	lsl	w5, w4, w7
     dc0:	orr	w3, w3, w5
     dc4:	and	w5, w3, #0xffff
     dc8:	sxth	w3, w3
     dcc:	b.ge	1028 <compress_block+0x400>  // b.tcont
     dd0:	strh	w5, [x0, #5936]
     dd4:	sub	w6, w6, #0x10
     dd8:	ldr	x7, [x0, #16]
     ddc:	ldr	x5, [x0, #40]
     de0:	add	x17, x5, #0x1
     de4:	str	x17, [x0, #40]
     de8:	strb	w3, [x7, x5]
     dec:	ldr	x7, [x0, #16]
     df0:	ldr	x5, [x0, #40]
     df4:	ldrh	w3, [x0, #5936]
     df8:	add	x17, x5, #0x1
     dfc:	str	x17, [x0, #40]
     e00:	lsr	w3, w3, #8
     e04:	strb	w3, [x7, x5]
     e08:	ldr	w7, [x0, #5940]
     e0c:	sub	w3, w9, w7
     e10:	add	w7, w6, w7
     e14:	str	w7, [x0, #5940]
     e18:	asr	w3, w4, w3
     e1c:	sxth	w3, w3
     e20:	sub	w4, w16, #0x1
     e24:	cmp	w4, #0xff
     e28:	b.hi	1004 <compress_block+0x3dc>  // b.pmore
     e2c:	ldrb	w6, [x11, w4, uxtw]
     e30:	ubfiz	x5, x6, #2, #8
     e34:	mov	w18, w6
     e38:	add	x6, x2, x5
     e3c:	ldrh	w17, [x2, x5]
     e40:	ldrh	w6, [x6, #2]
     e44:	lsl	w5, w17, w7
     e48:	orr	w3, w3, w5
     e4c:	sub	w16, w9, w6
     e50:	and	w5, w3, #0xffff
     e54:	cmp	w16, w7
     e58:	sxth	w3, w3
     e5c:	b.ge	ff4 <compress_block+0x3cc>  // b.tcont
     e60:	strh	w5, [x0, #5936]
     e64:	sub	w7, w6, #0x10
     e68:	ldr	x16, [x0, #16]
     e6c:	ldr	x5, [x0, #40]
     e70:	add	x6, x5, #0x1
     e74:	str	x6, [x0, #40]
     e78:	strb	w3, [x16, x5]
     e7c:	ldr	x6, [x0, #16]
     e80:	ldr	x5, [x0, #40]
     e84:	ldrh	w3, [x0, #5936]
     e88:	add	x16, x5, #0x1
     e8c:	str	x16, [x0, #40]
     e90:	lsr	w3, w3, #8
     e94:	strb	w3, [x6, x5]
     e98:	ldr	w5, [x0, #5940]
     e9c:	sub	w3, w9, w5
     ea0:	add	w7, w7, w5
     ea4:	str	w7, [x0, #5940]
     ea8:	asr	w3, w17, w3
     eac:	and	w5, w3, #0xffff
     eb0:	sxth	w3, w3
     eb4:	strh	w5, [x0, #5936]
     eb8:	ldr	w17, [x12, x18, lsl #2]
     ebc:	cbnz	w17, f6c <compress_block+0x344>
     ec0:	ldr	w6, [x0, #5900]
     ec4:	cmp	w6, w8
     ec8:	b.hi	cfc <compress_block+0xd4>  // b.pmore
     ecc:	nop
     ed0:	ldrh	w2, [x1, #1024]
     ed4:	mov	w4, #0x10                  	// #16
     ed8:	ldrh	w1, [x1, #1026]
     edc:	lsl	w5, w2, w7
     ee0:	orr	w3, w3, w5
     ee4:	sub	w6, w4, w1
     ee8:	and	w5, w3, #0xffff
     eec:	cmp	w6, w7
     ef0:	sxth	w3, w3
     ef4:	b.ge	1034 <compress_block+0x40c>  // b.tcont
     ef8:	strh	w5, [x0, #5936]
     efc:	sub	w1, w1, #0x10
     f00:	ldr	x6, [x0, #16]
     f04:	ldr	x5, [x0, #40]
     f08:	add	x7, x5, #0x1
     f0c:	str	x7, [x0, #40]
     f10:	strb	w3, [x6, x5]
     f14:	ldr	x6, [x0, #16]
     f18:	ldr	x5, [x0, #40]
     f1c:	ldrh	w3, [x0, #5936]
     f20:	add	x7, x5, #0x1
     f24:	str	x7, [x0, #40]
     f28:	lsr	w3, w3, #8
     f2c:	strb	w3, [x6, x5]
     f30:	ldr	w3, [x0, #5940]
     f34:	ldp	x29, x30, [sp], #16
     f38:	sub	w4, w4, w3
     f3c:	add	w1, w1, w3
     f40:	str	w1, [x0, #5940]
     f44:	asr	w2, w2, w4
     f48:	strh	w2, [x0, #5936]
     f4c:	ret
     f50:	add	w7, w6, w7
     f54:	str	w7, [x0, #5940]
     f58:	b	da0 <compress_block+0x178>
     f5c:	add	w7, w7, w16
     f60:	strh	w5, [x0, #5936]
     f64:	str	w7, [x0, #5940]
     f68:	b	cf4 <compress_block+0xcc>
     f6c:	ldr	w5, [x15, x18, lsl #2]
     f70:	sub	w6, w9, w17
     f74:	cmp	w6, w7
     f78:	sub	w4, w4, w5
     f7c:	and	w4, w4, #0xffff
     f80:	lsl	w5, w4, w7
     f84:	orr	w3, w3, w5
     f88:	and	w5, w3, #0xffff
     f8c:	sxth	w3, w3
     f90:	b.ge	1014 <compress_block+0x3ec>  // b.tcont
     f94:	strh	w5, [x0, #5936]
     f98:	sub	w17, w17, #0x10
     f9c:	ldr	x6, [x0, #16]
     fa0:	ldr	x5, [x0, #40]
     fa4:	add	x7, x5, #0x1
     fa8:	str	x7, [x0, #40]
     fac:	strb	w3, [x6, x5]
     fb0:	ldr	x6, [x0, #16]
     fb4:	ldr	x5, [x0, #40]
     fb8:	ldrh	w3, [x0, #5936]
     fbc:	add	x7, x5, #0x1
     fc0:	str	x7, [x0, #40]
     fc4:	lsr	w3, w3, #8
     fc8:	strb	w3, [x6, x5]
     fcc:	ldr	w7, [x0, #5940]
     fd0:	ldr	w6, [x0, #5900]
     fd4:	sub	w3, w9, w7
     fd8:	add	w7, w17, w7
     fdc:	str	w7, [x0, #5940]
     fe0:	asr	w4, w4, w3
     fe4:	and	w5, w4, #0xffff
     fe8:	sxth	w3, w4
     fec:	strh	w5, [x0, #5936]
     ff0:	b	cf4 <compress_block+0xcc>
     ff4:	add	w7, w6, w7
     ff8:	strh	w5, [x0, #5936]
     ffc:	str	w7, [x0, #5940]
    1000:	b	eb8 <compress_block+0x290>
    1004:	lsr	w5, w4, #7
    1008:	add	w5, w5, #0x100
    100c:	ldrb	w6, [x11, w5, uxtw]
    1010:	b	e30 <compress_block+0x208>
    1014:	add	w7, w7, w17
    1018:	ldr	w6, [x0, #5900]
    101c:	strh	w5, [x0, #5936]
    1020:	str	w7, [x0, #5940]
    1024:	b	cf4 <compress_block+0xcc>
    1028:	add	w7, w7, w6
    102c:	str	w7, [x0, #5940]
    1030:	b	e20 <compress_block+0x1f8>
    1034:	add	w7, w1, w7
    1038:	strh	w5, [x0, #5936]
    103c:	ldp	x29, x30, [sp], #16
    1040:	str	w7, [x0, #5940]
    1044:	ret

0000000000001048 <bi_windup>:
    1048:	ldr	w1, [x0, #5940]
    104c:	cmp	w1, #0x8
    1050:	b.le	1094 <bi_windup+0x4c>
    1054:	ldr	x2, [x0, #16]
    1058:	ldr	x1, [x0, #40]
    105c:	ldrh	w3, [x0, #5936]
    1060:	add	x4, x1, #0x1
    1064:	str	x4, [x0, #40]
    1068:	strb	w3, [x2, x1]
    106c:	ldr	x3, [x0, #16]
    1070:	ldr	x2, [x0, #40]
    1074:	ldrh	w1, [x0, #5936]
    1078:	add	x4, x2, #0x1
    107c:	str	x4, [x0, #40]
    1080:	lsr	w1, w1, #8
    1084:	strb	w1, [x3, x2]
    1088:	strh	wzr, [x0, #5936]
    108c:	str	wzr, [x0, #5940]
    1090:	ret
    1094:	cmp	w1, #0x0
    1098:	b.le	1088 <bi_windup+0x40>
    109c:	ldr	x2, [x0, #16]
    10a0:	ldr	x1, [x0, #40]
    10a4:	ldrh	w3, [x0, #5936]
    10a8:	add	x4, x1, #0x1
    10ac:	str	x4, [x0, #40]
    10b0:	strb	w3, [x2, x1]
    10b4:	strh	wzr, [x0, #5936]
    10b8:	str	wzr, [x0, #5940]
    10bc:	ret

00000000000010c0 <bi_flush>:
    10c0:	ldr	w1, [x0, #5940]
    10c4:	cmp	w1, #0x10
    10c8:	b.eq	1108 <bi_flush+0x48>  // b.none
    10cc:	cmp	w1, #0x7
    10d0:	b.le	1104 <bi_flush+0x44>
    10d4:	ldr	x2, [x0, #16]
    10d8:	ldr	x1, [x0, #40]
    10dc:	ldrh	w3, [x0, #5936]
    10e0:	add	x4, x1, #0x1
    10e4:	str	x4, [x0, #40]
    10e8:	strb	w3, [x2, x1]
    10ec:	ldrh	w2, [x0, #5936]
    10f0:	ldr	w1, [x0, #5940]
    10f4:	lsr	w2, w2, #8
    10f8:	sub	w1, w1, #0x8
    10fc:	strh	w2, [x0, #5936]
    1100:	str	w1, [x0, #5940]
    1104:	ret
    1108:	ldr	x2, [x0, #16]
    110c:	ldr	x1, [x0, #40]
    1110:	ldrh	w3, [x0, #5936]
    1114:	add	x4, x1, #0x1
    1118:	str	x4, [x0, #40]
    111c:	strb	w3, [x2, x1]
    1120:	ldr	x3, [x0, #16]
    1124:	ldr	x2, [x0, #40]
    1128:	ldrh	w1, [x0, #5936]
    112c:	add	x4, x2, #0x1
    1130:	str	x4, [x0, #40]
    1134:	lsr	w1, w1, #8
    1138:	strb	w1, [x3, x2]
    113c:	strh	wzr, [x0, #5936]
    1140:	str	wzr, [x0, #5940]
    1144:	ret

0000000000001148 <_tr_init>:
    1148:	add	x6, x0, #0xd4
    114c:	str	x6, [x0, #2904]
    1150:	mov	x1, x6
    1154:	add	x6, x0, #0xb68
    1158:	adrp	x3, 0 <pqdownheap>
    115c:	add	x3, x3, #0x0
    1160:	strh	wzr, [x0, #5936]
    1164:	add	x8, x3, #0x4e0
    1168:	add	x7, x3, #0x500
    116c:	add	x5, x3, #0x520
    1170:	add	x4, x0, #0xabc
    1174:	add	x3, x0, #0x9c8
    1178:	add	x2, x0, #0x54c
    117c:	stp	x8, x3, [x6]
    1180:	stp	x7, x4, [x6, #24]
    1184:	str	x5, [x0, #2968]
    1188:	str	wzr, [x0, #5940]
    118c:	nop
    1190:	strh	wzr, [x1], #4
    1194:	cmp	x1, x2
    1198:	b.ne	1190 <_tr_init+0x48>  // b.any
    119c:	mov	x1, x3
    11a0:	add	x2, x0, #0xa40
    11a4:	nop
    11a8:	strh	wzr, [x1], #4
    11ac:	cmp	x1, x2
    11b0:	b.ne	11a8 <_tr_init+0x60>  // b.any
    11b4:	mov	x1, x4
    11b8:	add	x2, x0, #0xb08
    11bc:	nop
    11c0:	strh	wzr, [x1], #4
    11c4:	cmp	x1, x2
    11c8:	b.ne	11c0 <_tr_init+0x78>  // b.any
    11cc:	mov	w1, #0x1                   	// #1
    11d0:	strh	w1, [x0, #1236]
    11d4:	str	wzr, [x0, #5900]
    11d8:	str	xzr, [x0, #5912]
    11dc:	str	xzr, [x0, #5920]
    11e0:	str	wzr, [x0, #5928]
    11e4:	ret

00000000000011e8 <_tr_stored_block>:
    11e8:	stp	x29, x30, [sp, #-32]!
    11ec:	and	w3, w3, #0xffff
    11f0:	mov	x5, x1
    11f4:	mov	x29, sp
    11f8:	stp	x19, x20, [sp, #16]
    11fc:	mov	x20, x2
    1200:	ldr	w2, [x0, #5940]
    1204:	ldrh	w1, [x0, #5936]
    1208:	mov	x19, x0
    120c:	cmp	w2, #0xd
    1210:	lsl	w0, w3, w2
    1214:	orr	w0, w0, w1
    1218:	and	w1, w0, #0xffff
    121c:	b.le	1310 <_tr_stored_block+0x128>
    1220:	ldr	x4, [x19, #16]
    1224:	strh	w1, [x19, #5936]
    1228:	ldr	x2, [x19, #40]
    122c:	sxth	w0, w0
    1230:	mov	w1, #0x10                  	// #16
    1234:	add	x6, x2, #0x1
    1238:	str	x6, [x19, #40]
    123c:	strb	w0, [x4, x2]
    1240:	ldr	x4, [x19, #16]
    1244:	ldr	x2, [x19, #40]
    1248:	ldrh	w0, [x19, #5936]
    124c:	add	x6, x2, #0x1
    1250:	str	x6, [x19, #40]
    1254:	lsr	w0, w0, #8
    1258:	strb	w0, [x4, x2]
    125c:	ldr	w0, [x19, #5940]
    1260:	sub	w1, w1, w0
    1264:	sub	w0, w0, #0xd
    1268:	str	w0, [x19, #5940]
    126c:	asr	w3, w3, w1
    1270:	strh	w3, [x19, #5936]
    1274:	mov	x0, x19
    1278:	bl	1048 <bi_windup>
    127c:	ldr	x3, [x19, #16]
    1280:	and	w2, w20, #0xff
    1284:	ldr	x1, [x19, #40]
    1288:	ubfx	w7, w20, #8, #8
    128c:	mvn	w6, w2
    1290:	mvn	w0, w20
    1294:	add	x4, x1, #0x1
    1298:	str	x4, [x19, #40]
    129c:	strb	w2, [x3, x1]
    12a0:	mov	x1, x5
    12a4:	ubfx	x0, x0, #8, #8
    12a8:	mov	x2, x20
    12ac:	ldr	x4, [x19, #16]
    12b0:	ldr	x3, [x19, #40]
    12b4:	add	x5, x3, #0x1
    12b8:	str	x5, [x19, #40]
    12bc:	strb	w7, [x4, x3]
    12c0:	ldr	x4, [x19, #16]
    12c4:	ldr	x3, [x19, #40]
    12c8:	add	x5, x3, #0x1
    12cc:	str	x5, [x19, #40]
    12d0:	strb	w6, [x4, x3]
    12d4:	ldr	x4, [x19, #16]
    12d8:	ldr	x3, [x19, #40]
    12dc:	add	x5, x3, #0x1
    12e0:	str	x5, [x19, #40]
    12e4:	strb	w0, [x4, x3]
    12e8:	ldr	x3, [x19, #16]
    12ec:	ldr	x0, [x19, #40]
    12f0:	add	x0, x3, x0
    12f4:	bl	0 <memcpy>
    12f8:	ldr	x2, [x19, #40]
    12fc:	add	x2, x2, x20
    1300:	str	x2, [x19, #40]
    1304:	ldp	x19, x20, [sp, #16]
    1308:	ldp	x29, x30, [sp], #32
    130c:	ret
    1310:	add	w2, w2, #0x3
    1314:	strh	w1, [x19, #5936]
    1318:	str	w2, [x19, #5940]
    131c:	b	1274 <_tr_stored_block+0x8c>

0000000000001320 <_tr_flush_bits>:
    1320:	b	10c0 <bi_flush>
    1324:	nop

0000000000001328 <_tr_align>:
    1328:	ldr	w1, [x0, #5940]
    132c:	mov	w3, #0x2                   	// #2
    1330:	ldrh	w4, [x0, #5936]
    1334:	cmp	w1, #0xd
    1338:	lsl	w2, w3, w1
    133c:	orr	w2, w2, w4
    1340:	and	w4, w2, #0xffff
    1344:	sxth	w2, w2
    1348:	b.le	13f8 <_tr_align+0xd0>
    134c:	ldr	x5, [x0, #16]
    1350:	strh	w4, [x0, #5936]
    1354:	ldr	x1, [x0, #40]
    1358:	mov	w4, #0x10                  	// #16
    135c:	add	x6, x1, #0x1
    1360:	str	x6, [x0, #40]
    1364:	strb	w2, [x5, x1]
    1368:	ldr	x5, [x0, #16]
    136c:	ldr	x2, [x0, #40]
    1370:	ldrh	w1, [x0, #5936]
    1374:	add	x6, x2, #0x1
    1378:	str	x6, [x0, #40]
    137c:	lsr	w1, w1, #8
    1380:	strb	w1, [x5, x2]
    1384:	ldr	w1, [x0, #5940]
    1388:	sub	w2, w4, w1
    138c:	sub	w1, w1, #0xd
    1390:	str	w1, [x0, #5940]
    1394:	asr	w3, w3, w2
    1398:	strh	w3, [x0, #5936]
    139c:	cmp	w1, #0x9
    13a0:	b.le	13ec <_tr_align+0xc4>
    13a4:	ldr	x2, [x0, #16]
    13a8:	ldr	x1, [x0, #40]
    13ac:	ldrh	w3, [x0, #5936]
    13b0:	add	x4, x1, #0x1
    13b4:	str	x4, [x0, #40]
    13b8:	strb	w3, [x2, x1]
    13bc:	ldr	x3, [x0, #16]
    13c0:	ldr	x2, [x0, #40]
    13c4:	ldrh	w1, [x0, #5936]
    13c8:	add	x4, x2, #0x1
    13cc:	str	x4, [x0, #40]
    13d0:	lsr	w1, w1, #8
    13d4:	strb	w1, [x3, x2]
    13d8:	strh	wzr, [x0, #5936]
    13dc:	ldr	w1, [x0, #5940]
    13e0:	sub	w1, w1, #0x9
    13e4:	str	w1, [x0, #5940]
    13e8:	b	10c0 <bi_flush>
    13ec:	add	w1, w1, #0x7
    13f0:	str	w1, [x0, #5940]
    13f4:	b	10c0 <bi_flush>
    13f8:	add	w1, w1, #0x3
    13fc:	strh	w4, [x0, #5936]
    1400:	str	w1, [x0, #5940]
    1404:	b	139c <_tr_align+0x74>

0000000000001408 <_tr_flush_block>:
    1408:	stp	x29, x30, [sp, #-80]!
    140c:	cmp	x1, #0x0
    1410:	mov	x29, sp
    1414:	stp	x19, x20, [sp, #16]
    1418:	stp	x21, x22, [sp, #32]
    141c:	mov	x21, x0
    1420:	ldr	w0, [x0, #196]
    1424:	stp	x23, x24, [sp, #48]
    1428:	mov	w22, w3
    142c:	mov	x24, x1
    1430:	stp	x25, x26, [sp, #64]
    1434:	mov	x23, x2
    1438:	cset	w26, ne  // ne = any
    143c:	add	x25, x2, #0x4
    1440:	cmp	w0, #0x0
    1444:	b.le	17dc <_tr_flush_block+0x3d4>
    1448:	mov	x19, x21
    144c:	ldr	x2, [x19], #212
    1450:	ldr	w0, [x2, #88]
    1454:	cmp	w0, #0x2
    1458:	b.eq	1770 <_tr_flush_block+0x368>  // b.none
    145c:	add	x1, x21, #0xb58
    1460:	mov	x0, x21
    1464:	bl	f8 <build_tree>
    1468:	add	x20, x21, #0x9c8
    146c:	add	x1, x21, #0xb70
    1470:	mov	x0, x21
    1474:	bl	f8 <build_tree>
    1478:	ldr	w2, [x21, #2912]
    147c:	mov	x0, x21
    1480:	mov	x1, x19
    1484:	bl	5d8 <scan_tree>
    1488:	ldr	w2, [x21, #2936]
    148c:	mov	x1, x20
    1490:	bl	5d8 <scan_tree>
    1494:	add	x1, x21, #0xb88
    1498:	bl	f8 <build_tree>
    149c:	adrp	x5, 0 <pqdownheap>
    14a0:	add	x5, x5, #0x0
    14a4:	add	x5, x5, #0x540
    14a8:	mov	x0, #0x12                  	// #18
    14ac:	mov	w4, #0xf                   	// #15
    14b0:	b	14b8 <_tr_flush_block+0xb0>
    14b4:	ldrb	w4, [x0, x5]
    14b8:	add	x4, x21, w4, sxtw #2
    14bc:	mov	w3, w0
    14c0:	sub	x0, x0, #0x1
    14c4:	cmp	x0, #0x2
    14c8:	ldrh	w4, [x4, #2750]
    14cc:	cbnz	w4, 191c <_tr_flush_block+0x514>
    14d0:	b.ne	14b4 <_tr_flush_block+0xac>  // b.any
    14d4:	mov	w3, w0
    14d8:	mov	x1, #0x9                   	// #9
    14dc:	ldr	x0, [x21, #5912]
    14e0:	ldr	x2, [x21, #5920]
    14e4:	add	x0, x0, #0xe
    14e8:	add	x0, x0, x1
    14ec:	str	x0, [x21, #5912]
    14f0:	add	x2, x2, #0xa
    14f4:	add	x0, x0, #0xa
    14f8:	lsr	x2, x2, #3
    14fc:	lsr	x4, x0, #3
    1500:	cmp	x4, x2
    1504:	csel	x0, x4, x2, ls  // ls = plast
    1508:	cmp	w26, #0x0
    150c:	ccmp	x0, x25, #0x0, ne  // ne = any
    1510:	b.cs	192c <_tr_flush_block+0x524>  // b.hs, b.nlast
    1514:	ldr	w1, [x21, #200]
    1518:	ldrsh	w0, [x21, #5936]
    151c:	cmp	w1, #0x4
    1520:	ldr	w1, [x21, #5940]
    1524:	ccmp	x4, x2, #0x2, ne  // ne = any
    1528:	b.cs	1804 <_tr_flush_block+0x3fc>  // b.hs, b.nlast
    152c:	add	w2, w22, #0x4
    1530:	cmp	w1, #0xd
    1534:	b.gt	1960 <_tr_flush_block+0x558>
    1538:	and	w2, w2, #0xffff
    153c:	add	w4, w1, #0x3
    1540:	str	w4, [x21, #5940]
    1544:	cmp	w4, #0xb
    1548:	lsl	w1, w2, w1
    154c:	ldr	w2, [x21, #2912]
    1550:	orr	w0, w0, w1
    1554:	ldr	w15, [x21, #2936]
    1558:	sub	w5, w2, #0x100
    155c:	sxth	w0, w0
    1560:	b.le	19d4 <_tr_flush_block+0x5cc>
    1564:	and	w5, w5, #0xffff
    1568:	mov	w6, #0x10                  	// #16
    156c:	ldr	x7, [x21, #16]
    1570:	lsl	w4, w5, w4
    1574:	ldr	x1, [x21, #40]
    1578:	orr	w0, w0, w4
    157c:	add	x4, x1, #0x1
    1580:	sxth	w0, w0
    1584:	str	x4, [x21, #40]
    1588:	strh	w0, [x21, #5936]
    158c:	strb	w0, [x7, x1]
    1590:	ldr	x4, [x21, #16]
    1594:	ldr	x1, [x21, #40]
    1598:	ldrh	w0, [x21, #5936]
    159c:	add	x7, x1, #0x1
    15a0:	str	x7, [x21, #40]
    15a4:	lsr	w0, w0, #8
    15a8:	strb	w0, [x4, x1]
    15ac:	ldr	w1, [x21, #5940]
    15b0:	sub	w0, w6, w1
    15b4:	sub	w1, w1, #0xb
    15b8:	str	w1, [x21, #5940]
    15bc:	cmp	w1, #0xb
    15c0:	asr	w0, w5, w0
    15c4:	sxth	w0, w0
    15c8:	b.le	19f4 <_tr_flush_block+0x5ec>
    15cc:	and	w5, w15, #0xffff
    15d0:	mov	w6, #0x10                  	// #16
    15d4:	ldr	x7, [x21, #16]
    15d8:	lsl	w1, w5, w1
    15dc:	ldr	x4, [x21, #40]
    15e0:	orr	w0, w0, w1
    15e4:	add	x1, x4, #0x1
    15e8:	sxth	w0, w0
    15ec:	str	x1, [x21, #40]
    15f0:	strh	w0, [x21, #5936]
    15f4:	strb	w0, [x7, x4]
    15f8:	ldr	x4, [x21, #16]
    15fc:	ldr	x1, [x21, #40]
    1600:	ldrh	w0, [x21, #5936]
    1604:	add	x7, x1, #0x1
    1608:	str	x7, [x21, #40]
    160c:	lsr	w0, w0, #8
    1610:	strb	w0, [x4, x1]
    1614:	ldr	w4, [x21, #5940]
    1618:	sub	w1, w6, w4
    161c:	sub	w4, w4, #0xb
    1620:	str	w4, [x21, #5940]
    1624:	cmp	w4, #0xc
    1628:	asr	w1, w5, w1
    162c:	sub	w5, w3, #0x3
    1630:	sxth	w1, w1
    1634:	b.le	1a18 <_tr_flush_block+0x610>
    1638:	and	w5, w5, #0xffff
    163c:	mov	w6, #0x10                  	// #16
    1640:	ldr	x7, [x21, #16]
    1644:	lsl	w0, w5, w4
    1648:	ldr	x4, [x21, #40]
    164c:	orr	w0, w1, w0
    1650:	add	x1, x4, #0x1
    1654:	sxth	w0, w0
    1658:	str	x1, [x21, #40]
    165c:	strh	w0, [x21, #5936]
    1660:	strb	w0, [x7, x4]
    1664:	ldr	x4, [x21, #16]
    1668:	ldr	x1, [x21, #40]
    166c:	ldrh	w0, [x21, #5936]
    1670:	add	x7, x1, #0x1
    1674:	str	x7, [x21, #40]
    1678:	lsr	w0, w0, #8
    167c:	strb	w0, [x4, x1]
    1680:	ldr	w0, [x21, #5940]
    1684:	sub	w4, w6, w0
    1688:	sub	w0, w0, #0xc
    168c:	str	w0, [x21, #5940]
    1690:	asr	w4, w5, w4
    1694:	and	w4, w4, #0xffff
    1698:	adrp	x5, 0 <pqdownheap>
    169c:	add	x5, x5, #0x0
    16a0:	add	x5, x5, #0x540
    16a4:	mov	w1, #0x10                  	// #16
    16a8:	add	x3, x5, w3, sxtw
    16ac:	mov	w8, w1
    16b0:	b	1714 <_tr_flush_block+0x30c>
    16b4:	strh	w4, [x21, #5936]
    16b8:	cmp	x3, x5
    16bc:	ldr	x6, [x21, #16]
    16c0:	ldr	x4, [x21, #40]
    16c4:	add	x7, x4, #0x1
    16c8:	str	x7, [x21, #40]
    16cc:	strb	w0, [x6, x4]
    16d0:	ldr	x6, [x21, #16]
    16d4:	ldr	x4, [x21, #40]
    16d8:	ldrh	w0, [x21, #5936]
    16dc:	add	x7, x4, #0x1
    16e0:	str	x7, [x21, #40]
    16e4:	lsr	w0, w0, #8
    16e8:	strb	w0, [x6, x4]
    16ec:	ldr	w0, [x21, #5940]
    16f0:	sub	w4, w8, w0
    16f4:	sub	w0, w0, #0xd
    16f8:	str	w0, [x21, #5940]
    16fc:	asr	w1, w1, w4
    1700:	strh	w1, [x21, #5936]
    1704:	b.eq	1748 <_tr_flush_block+0x340>  // b.none
    1708:	ldrh	w4, [x21, #5936]
    170c:	ldrb	w1, [x5, #1]!
    1710:	ldr	w0, [x21, #5940]
    1714:	add	x1, x21, w1, sxtw #2
    1718:	add	w6, w0, #0x3
    171c:	cmp	w0, #0xd
    1720:	ldrh	w1, [x1, #2750]
    1724:	lsl	w0, w1, w0
    1728:	orr	w0, w0, w4
    172c:	and	w4, w0, #0xffff
    1730:	sxth	w0, w0
    1734:	b.gt	16b4 <_tr_flush_block+0x2ac>
    1738:	strh	w4, [x21, #5936]
    173c:	cmp	x3, x5
    1740:	str	w6, [x21, #5940]
    1744:	b.ne	1708 <_tr_flush_block+0x300>  // b.any
    1748:	mov	x1, x19
    174c:	mov	x0, x21
    1750:	bl	700 <send_tree>
    1754:	mov	w2, w15
    1758:	mov	x1, x20
    175c:	bl	700 <send_tree>
    1760:	mov	x2, x20
    1764:	mov	x1, x19
    1768:	bl	c28 <compress_block>
    176c:	b	1888 <_tr_flush_block+0x480>
    1770:	mov	x4, #0xc07f                	// #49279
    1774:	mov	x0, x19
    1778:	add	x3, x21, #0x154
    177c:	movk	x4, #0xf3ff, lsl #16
    1780:	tbz	w4, #0, 178c <_tr_flush_block+0x384>
    1784:	ldrh	w1, [x0]
    1788:	cbnz	w1, 1a34 <_tr_flush_block+0x62c>
    178c:	add	x0, x0, #0x4
    1790:	lsr	x4, x4, #1
    1794:	cmp	x3, x0
    1798:	b.ne	1780 <_tr_flush_block+0x378>  // b.any
    179c:	ldr	x1, [x21, #248]
    17a0:	mov	w0, #0x1                   	// #1
    17a4:	tst	x1, #0xffff0000ffff
    17a8:	b.ne	17d4 <_tr_flush_block+0x3cc>  // b.any
    17ac:	ldrh	w1, [x21, #264]
    17b0:	cbnz	w1, 17d4 <_tr_flush_block+0x3cc>
    17b4:	add	x1, x21, #0x4d4
    17b8:	b	17c0 <_tr_flush_block+0x3b8>
    17bc:	b.eq	17d4 <_tr_flush_block+0x3cc>  // b.none
    17c0:	ldrh	w0, [x3]
    17c4:	add	x3, x3, #0x4
    17c8:	cmp	x1, x3
    17cc:	cbz	w0, 17bc <_tr_flush_block+0x3b4>
    17d0:	mov	w0, #0x1                   	// #1
    17d4:	str	w0, [x2, #88]
    17d8:	b	145c <_tr_flush_block+0x54>
    17dc:	cmp	w26, #0x0
    17e0:	add	x0, x2, #0x5
    17e4:	ccmp	x0, x25, #0x0, ne  // ne = any
    17e8:	add	x19, x21, #0xd4
    17ec:	add	x20, x21, #0x9c8
    17f0:	b.cs	192c <_tr_flush_block+0x524>  // b.hs, b.nlast
    17f4:	ldrsh	w0, [x21, #5936]
    17f8:	add	x19, x21, #0xd4
    17fc:	ldr	w1, [x21, #5940]
    1800:	add	x20, x21, #0x9c8
    1804:	add	w2, w22, #0x2
    1808:	cmp	w1, #0xd
    180c:	b.le	1944 <_tr_flush_block+0x53c>
    1810:	and	w2, w2, #0xffff
    1814:	mov	w3, #0x10                  	// #16
    1818:	ldr	x5, [x21, #16]
    181c:	lsl	w1, w2, w1
    1820:	ldr	x4, [x21, #40]
    1824:	orr	w0, w0, w1
    1828:	add	x1, x4, #0x1
    182c:	sxth	w0, w0
    1830:	str	x1, [x21, #40]
    1834:	strh	w0, [x21, #5936]
    1838:	strb	w0, [x5, x4]
    183c:	ldr	x4, [x21, #16]
    1840:	ldr	x1, [x21, #40]
    1844:	ldrh	w0, [x21, #5936]
    1848:	add	x5, x1, #0x1
    184c:	str	x5, [x21, #40]
    1850:	lsr	w0, w0, #8
    1854:	strb	w0, [x4, x1]
    1858:	ldr	w0, [x21, #5940]
    185c:	sub	w1, w3, w0
    1860:	sub	w0, w0, #0xd
    1864:	str	w0, [x21, #5940]
    1868:	asr	w2, w2, w1
    186c:	strh	w2, [x21, #5936]
    1870:	adrp	x1, 0 <pqdownheap>
    1874:	add	x1, x1, #0x0
    1878:	add	x2, x1, #0x558
    187c:	mov	x0, x21
    1880:	add	x1, x1, #0x5d0
    1884:	bl	c28 <compress_block>
    1888:	mov	x1, x19
    188c:	add	x2, x21, #0x54c
    1890:	strh	wzr, [x1], #4
    1894:	cmp	x2, x1
    1898:	b.ne	1890 <_tr_flush_block+0x488>  // b.any
    189c:	mov	x1, x20
    18a0:	add	x0, x21, #0xa40
    18a4:	nop
    18a8:	strh	wzr, [x1], #4
    18ac:	cmp	x0, x1
    18b0:	b.ne	18a8 <_tr_flush_block+0x4a0>  // b.any
    18b4:	add	x0, x21, #0xabc
    18b8:	add	x1, x21, #0xb08
    18bc:	nop
    18c0:	strh	wzr, [x0], #4
    18c4:	cmp	x1, x0
    18c8:	b.ne	18c0 <_tr_flush_block+0x4b8>  // b.any
    18cc:	mov	w0, #0x1                   	// #1
    18d0:	strh	w0, [x21, #1236]
    18d4:	str	wzr, [x21, #5900]
    18d8:	str	xzr, [x21, #5912]
    18dc:	str	xzr, [x21, #5920]
    18e0:	str	wzr, [x21, #5928]
    18e4:	cbnz	w22, 1900 <_tr_flush_block+0x4f8>
    18e8:	ldp	x19, x20, [sp, #16]
    18ec:	ldp	x21, x22, [sp, #32]
    18f0:	ldp	x23, x24, [sp, #48]
    18f4:	ldp	x25, x26, [sp, #64]
    18f8:	ldp	x29, x30, [sp], #80
    18fc:	ret
    1900:	mov	x0, x21
    1904:	ldp	x19, x20, [sp, #16]
    1908:	ldp	x21, x22, [sp, #32]
    190c:	ldp	x23, x24, [sp, #48]
    1910:	ldp	x25, x26, [sp, #64]
    1914:	ldp	x29, x30, [sp], #80
    1918:	b	1048 <bi_windup>
    191c:	sxtw	x0, w3
    1920:	add	x0, x0, #0x1
    1924:	add	x1, x0, x0, lsl #1
    1928:	b	14dc <_tr_flush_block+0xd4>
    192c:	mov	x2, x23
    1930:	mov	x1, x24
    1934:	mov	w3, w22
    1938:	mov	x0, x21
    193c:	bl	11e8 <_tr_stored_block>
    1940:	b	1888 <_tr_flush_block+0x480>
    1944:	and	w2, w2, #0xffff
    1948:	add	w3, w1, #0x3
    194c:	str	w3, [x21, #5940]
    1950:	lsl	w1, w2, w1
    1954:	orr	w0, w0, w1
    1958:	strh	w0, [x21, #5936]
    195c:	b	1870 <_tr_flush_block+0x468>
    1960:	and	w2, w2, #0xffff
    1964:	mov	w5, #0x10                  	// #16
    1968:	ldr	x6, [x21, #16]
    196c:	lsl	w1, w2, w1
    1970:	ldr	x4, [x21, #40]
    1974:	orr	w0, w0, w1
    1978:	add	x1, x4, #0x1
    197c:	sxth	w0, w0
    1980:	str	x1, [x21, #40]
    1984:	strh	w0, [x21, #5936]
    1988:	strb	w0, [x6, x4]
    198c:	ldr	x4, [x21, #16]
    1990:	ldr	x1, [x21, #40]
    1994:	ldrh	w0, [x21, #5936]
    1998:	add	x6, x1, #0x1
    199c:	str	x6, [x21, #40]
    19a0:	lsr	w0, w0, #8
    19a4:	strb	w0, [x4, x1]
    19a8:	ldr	w4, [x21, #5940]
    19ac:	ldr	w15, [x21, #2936]
    19b0:	sub	w0, w5, w4
    19b4:	sub	w4, w4, #0xd
    19b8:	str	w4, [x21, #5940]
    19bc:	cmp	w4, #0xb
    19c0:	asr	w0, w2, w0
    19c4:	ldr	w2, [x21, #2912]
    19c8:	sxth	w0, w0
    19cc:	sub	w5, w2, #0x100
    19d0:	b.gt	1564 <_tr_flush_block+0x15c>
    19d4:	and	w5, w5, #0xffff
    19d8:	add	w1, w4, #0x5
    19dc:	str	w1, [x21, #5940]
    19e0:	cmp	w1, #0xb
    19e4:	lsl	w4, w5, w4
    19e8:	orr	w0, w0, w4
    19ec:	sxth	w0, w0
    19f0:	b.gt	15cc <_tr_flush_block+0x1c4>
    19f4:	and	w5, w15, #0xffff
    19f8:	add	w4, w1, #0x5
    19fc:	str	w4, [x21, #5940]
    1a00:	cmp	w4, #0xc
    1a04:	lsl	w1, w5, w1
    1a08:	orr	w0, w0, w1
    1a0c:	sub	w5, w3, #0x3
    1a10:	sxth	w1, w0
    1a14:	b.gt	1638 <_tr_flush_block+0x230>
    1a18:	and	w5, w5, #0xffff
    1a1c:	add	w0, w4, #0x4
    1a20:	str	w0, [x21, #5940]
    1a24:	lsl	w4, w5, w4
    1a28:	orr	w1, w1, w4
    1a2c:	and	w4, w1, #0xffff
    1a30:	b	1698 <_tr_flush_block+0x290>
    1a34:	mov	w0, #0x0                   	// #0
    1a38:	str	w0, [x2, #88]
    1a3c:	b	145c <_tr_flush_block+0x54>

0000000000001a40 <_tr_tally>:
    1a40:	ldr	w3, [x0, #5900]
    1a44:	ldr	x6, [x0, #5904]
    1a48:	add	w5, w3, #0x1
    1a4c:	ldr	x4, [x0, #5888]
    1a50:	strh	w1, [x6, w3, uxtw #1]
    1a54:	str	w5, [x0, #5900]
    1a58:	strb	w2, [x4, w3, uxtw]
    1a5c:	cbnz	w1, 1a88 <_tr_tally+0x48>
    1a60:	add	x2, x0, w2, uxtw #2
    1a64:	ldrh	w1, [x2, #212]
    1a68:	add	w1, w1, #0x1
    1a6c:	strh	w1, [x2, #212]
    1a70:	ldr	w1, [x0, #5896]
    1a74:	ldr	w2, [x0, #5900]
    1a78:	sub	w0, w1, #0x1
    1a7c:	cmp	w0, w2
    1a80:	cset	w0, eq  // eq = none
    1a84:	ret
    1a88:	adrp	x3, 0 <pqdownheap>
    1a8c:	add	x3, x3, #0x0
    1a90:	ldr	w4, [x0, #5928]
    1a94:	sub	w1, w1, #0x1
    1a98:	cmp	w1, #0xff
    1a9c:	ldrb	w2, [x3, w2, uxtw]
    1aa0:	add	w4, w4, #0x1
    1aa4:	str	w4, [x0, #5928]
    1aa8:	add	x2, x0, x2, lsl #2
    1aac:	ldrh	w4, [x2, #1240]
    1ab0:	add	w4, w4, #0x1
    1ab4:	strh	w4, [x2, #1240]
    1ab8:	b.ls	1af4 <_tr_tally+0xb4>  // b.plast
    1abc:	lsr	w1, w1, #7
    1ac0:	add	x3, x3, #0x1f0
    1ac4:	add	w1, w1, #0x100
    1ac8:	ldrb	w1, [x3, w1, uxtw]
    1acc:	add	x1, x0, w1, sxtw #2
    1ad0:	ldrh	w2, [x1, #2504]
    1ad4:	add	w2, w2, #0x1
    1ad8:	strh	w2, [x1, #2504]
    1adc:	ldr	w1, [x0, #5896]
    1ae0:	ldr	w2, [x0, #5900]
    1ae4:	sub	w0, w1, #0x1
    1ae8:	cmp	w0, w2
    1aec:	cset	w0, eq  // eq = none
    1af0:	ret
    1af4:	add	x3, x3, #0x1f0
    1af8:	ldrb	w1, [x3, w1, uxtw]
    1afc:	b	1acc <_tr_tally+0x8c>

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret
   c:	nop

0000000000000010 <zlibCompileFlags>:
  10:	mov	x0, #0xa9                  	// #169
  14:	ret

0000000000000018 <zError>:
  18:	mov	w2, #0x2                   	// #2
  1c:	adrp	x1, 0 <zlibVersion>
  20:	sub	w2, w2, w0
  24:	add	x1, x1, #0x0
  28:	ldr	x0, [x1, w2, sxtw #3]
  2c:	ret

0000000000000030 <zcalloc>:
  30:	mul	w0, w1, w2
  34:	b	0 <malloc>

0000000000000038 <zcfree>:
  38:	mov	x0, x1
  3c:	b	0 <free>

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x23, x24, [sp, #48]
   c:	mov	x23, x1
  10:	mov	x24, x2
  14:	stp	x19, x20, [sp, #16]
  18:	adrp	x2, 0 <compress2>
  1c:	mov	x19, x0
  20:	stp	x21, x22, [sp, #32]
  24:	mov	x20, x3
  28:	mov	w1, w4
  2c:	ldr	x22, [x23]
  30:	str	xzr, [x23]
  34:	add	x0, sp, #0x40
  38:	add	x2, x2, #0x0
  3c:	mov	w3, #0x70                  	// #112
  40:	stp	xzr, xzr, [sp, #128]
  44:	str	xzr, [sp, #144]
  48:	bl	0 <deflateInit_>
  4c:	cbnz	w0, d8 <compress2+0xd8>
  50:	mov	w1, #0x0                   	// #0
  54:	mov	w3, #0x0                   	// #0
  58:	mov	x21, #0xffffffff            	// #4294967295
  5c:	str	x24, [sp, #64]
  60:	str	wzr, [sp, #72]
  64:	str	x19, [sp, #88]
  68:	str	wzr, [sp, #96]
  6c:	nop
  70:	cmp	x22, x21
  74:	add	x0, sp, #0x40
  78:	csel	x4, x22, x21, ls  // ls = plast
  7c:	cmp	x20, x21
  80:	csel	x2, x20, x21, ls  // ls = plast
  84:	cbnz	w3, 90 <compress2+0x90>
  88:	sub	x22, x22, x4
  8c:	str	w4, [sp, #96]
  90:	cbnz	w1, 9c <compress2+0x9c>
  94:	sub	x20, x20, x2
  98:	str	w2, [sp, #72]
  9c:	cmp	x20, #0x0
  a0:	cset	w1, eq  // eq = none
  a4:	lsl	w1, w1, #2
  a8:	bl	0 <deflate>
  ac:	mov	w19, w0
  b0:	cbnz	w0, c0 <compress2+0xc0>
  b4:	ldr	w1, [sp, #72]
  b8:	ldr	w3, [sp, #96]
  bc:	b	70 <compress2+0x70>
  c0:	ldr	x0, [sp, #104]
  c4:	str	x0, [x23]
  c8:	add	x0, sp, #0x40
  cc:	bl	0 <deflateEnd>
  d0:	cmp	w19, #0x1
  d4:	csel	w0, wzr, w19, eq  // eq = none
  d8:	ldp	x19, x20, [sp, #16]
  dc:	ldp	x21, x22, [sp, #32]
  e0:	ldp	x23, x24, [sp, #48]
  e4:	ldp	x29, x30, [sp], #176
  e8:	ret
  ec:	nop

00000000000000f0 <compress>:
  f0:	mov	w4, #0xffffffff            	// #-1
  f4:	b	0 <compress2>

00000000000000f8 <compressBound>:
  f8:	lsr	x1, x0, #14
  fc:	add	x2, x0, #0xd
 100:	add	x1, x1, x0, lsr #12
 104:	add	x1, x1, x2
 108:	add	x0, x1, x0, lsr #25
 10c:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	ldr	x21, [x1]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x24, x3
  18:	stp	x25, x26, [sp, #64]
  1c:	mov	x3, x2
  20:	mov	x25, x1
  24:	ldr	x22, [x24]
  28:	cbz	x21, 124 <uncompress2+0x124>
  2c:	mov	x26, x0
  30:	str	xzr, [x1]
  34:	add	x0, sp, #0x60
  38:	adrp	x1, 0 <uncompress2>
  3c:	mov	w2, #0x70                  	// #112
  40:	add	x1, x1, #0x0
  44:	str	x3, [sp, #96]
  48:	str	wzr, [sp, #104]
  4c:	stp	xzr, xzr, [sp, #160]
  50:	str	xzr, [sp, #176]
  54:	bl	0 <inflateInit_>
  58:	mov	w23, w0
  5c:	cbnz	w0, 10c <uncompress2+0x10c>
  60:	mov	w2, #0x0                   	// #0
  64:	stp	x19, x20, [sp, #16]
  68:	mov	x20, #0xffffffff            	// #4294967295
  6c:	str	x26, [sp, #120]
  70:	str	wzr, [sp, #128]
  74:	b	7c <uncompress2+0x7c>
  78:	ldr	w2, [sp, #128]
  7c:	cmp	x21, x20
  80:	add	x0, sp, #0x60
  84:	csel	x4, x21, x20, ls  // ls = plast
  88:	cmp	x22, x20
  8c:	csel	x3, x22, x20, ls  // ls = plast
  90:	mov	w1, #0x0                   	// #0
  94:	cbnz	w2, a0 <uncompress2+0xa0>
  98:	sub	x21, x21, x4
  9c:	str	w4, [sp, #128]
  a0:	ldr	w2, [sp, #104]
  a4:	cbnz	w2, b0 <uncompress2+0xb0>
  a8:	sub	x22, x22, x3
  ac:	str	w3, [sp, #104]
  b0:	bl	0 <inflate>
  b4:	mov	w19, w0
  b8:	cbz	w0, 78 <uncompress2+0x78>
  bc:	ldr	x0, [x24]
  c0:	add	x1, sp, #0x58
  c4:	ldr	w2, [sp, #104]
  c8:	cmp	x26, x1
  cc:	ldr	x1, [sp, #136]
  d0:	sub	x0, x0, x2
  d4:	sub	x22, x0, x22
  d8:	str	x22, [x24]
  dc:	b.eq	130 <uncompress2+0x130>  // b.none
  e0:	str	x1, [x25]
  e4:	add	x0, sp, #0x60
  e8:	bl	0 <inflateEnd>
  ec:	cmp	w19, #0x1
  f0:	b.eq	108 <uncompress2+0x108>  // b.none
  f4:	cmp	w19, #0x2
  f8:	b.eq	144 <uncompress2+0x144>  // b.none
  fc:	mov	w23, w19
 100:	cmn	w19, #0x5
 104:	b.eq	150 <uncompress2+0x150>  // b.none
 108:	ldp	x19, x20, [sp, #16]
 10c:	mov	w0, w23
 110:	ldp	x21, x22, [sp, #32]
 114:	ldp	x23, x24, [sp, #48]
 118:	ldp	x25, x26, [sp, #64]
 11c:	ldp	x29, x30, [sp], #208
 120:	ret
 124:	add	x26, sp, #0x58
 128:	mov	x21, #0x1                   	// #1
 12c:	b	34 <uncompress2+0x34>
 130:	cmp	x1, #0x0
 134:	ccmn	w19, #0x5, #0x0, ne  // ne = any
 138:	b.ne	e4 <uncompress2+0xe4>  // b.any
 13c:	add	x0, sp, #0x60
 140:	bl	0 <inflateEnd>
 144:	mov	w23, #0xfffffffd            	// #-3
 148:	ldp	x19, x20, [sp, #16]
 14c:	b	10c <uncompress2+0x10c>
 150:	ldr	w0, [sp, #128]
 154:	cmn	x0, x21
 158:	b.ne	144 <uncompress2+0x144>  // b.any
 15c:	ldp	x19, x20, [sp, #16]
 160:	b	10c <uncompress2+0x10c>
 164:	nop

0000000000000168 <uncompress>:
 168:	stp	x29, x30, [sp, #-32]!
 16c:	mov	x29, sp
 170:	str	x3, [sp, #24]
 174:	add	x3, sp, #0x18
 178:	bl	0 <uncompress2>
 17c:	ldp	x29, x30, [sp], #32
 180:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	cbz	x0, 1c <gzclose+0x1c>
   4:	ldr	w2, [x0, #24]
   8:	mov	w1, #0x1c4f                	// #7247
   c:	cmp	w2, w1
  10:	b.eq	18 <gzclose+0x18>  // b.none
  14:	b	0 <gzclose_w>
  18:	b	0 <gzclose_r>
  1c:	mov	w0, #0xfffffffe            	// #-2
  20:	ret

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzbuffer>:
   0:	mov	x2, x0
   4:	cbz	x0, 44 <gzbuffer+0x44>
   8:	ldr	w0, [x0, #24]
   c:	mov	w4, #0x1c4f                	// #7247
  10:	mov	w3, #0x79b1                	// #31153
  14:	cmp	w0, w4
  18:	ccmp	w0, w3, #0x4, ne  // ne = any
  1c:	b.ne	44 <gzbuffer+0x44>  // b.any
  20:	ldr	w0, [x2, #40]
  24:	cbnz	w0, 44 <gzbuffer+0x44>
  28:	cmp	w1, w1, lsl #1
  2c:	b.hi	44 <gzbuffer+0x44>  // b.pmore
  30:	cmp	w1, #0x2
  34:	mov	w3, #0x2                   	// #2
  38:	csel	w1, w1, w3, cs  // cs = hs, nlast
  3c:	str	w1, [x2, #44]
  40:	ret
  44:	mov	w0, #0xffffffff            	// #-1
  48:	ret
  4c:	nop

0000000000000050 <gztell64>:
  50:	mov	x1, x0
  54:	cbz	x0, 88 <gztell64+0x38>
  58:	ldr	w0, [x0, #24]
  5c:	mov	w3, #0x1c4f                	// #7247
  60:	mov	w2, #0x79b1                	// #31153
  64:	cmp	w0, w3
  68:	ccmp	w0, w2, #0x4, ne  // ne = any
  6c:	b.ne	88 <gztell64+0x38>  // b.any
  70:	ldr	w2, [x1, #104]
  74:	ldr	x0, [x1, #16]
  78:	cbz	w2, 84 <gztell64+0x34>
  7c:	ldr	x1, [x1, #96]
  80:	add	x0, x0, x1
  84:	ret
  88:	mov	x0, #0xffffffffffffffff    	// #-1
  8c:	ret

0000000000000090 <gztell>:
  90:	mov	x1, x0
  94:	cbz	x0, c8 <gztell+0x38>
  98:	ldr	w0, [x0, #24]
  9c:	mov	w3, #0x1c4f                	// #7247
  a0:	mov	w2, #0x79b1                	// #31153
  a4:	cmp	w0, w3
  a8:	ccmp	w0, w2, #0x4, ne  // ne = any
  ac:	b.ne	c8 <gztell+0x38>  // b.any
  b0:	ldr	w2, [x1, #104]
  b4:	ldr	x0, [x1, #16]
  b8:	cbz	w2, c4 <gztell+0x34>
  bc:	ldr	x1, [x1, #96]
  c0:	add	x0, x0, x1
  c4:	ret
  c8:	mov	x0, #0xffffffffffffffff    	// #-1
  cc:	ret

00000000000000d0 <gzoffset64>:
  d0:	cbz	x0, 13c <gzoffset64+0x6c>
  d4:	stp	x29, x30, [sp, #-32]!
  d8:	mov	w1, #0x79b1                	// #31153
  dc:	mov	x29, sp
  e0:	stp	x19, x20, [sp, #16]
  e4:	mov	x19, x0
  e8:	ldr	w0, [x0, #24]
  ec:	mov	w20, #0x1c4f                	// #7247
  f0:	cmp	w0, w20
  f4:	ccmp	w0, w1, #0x4, ne  // ne = any
  f8:	b.ne	134 <gzoffset64+0x64>  // b.any
  fc:	ldr	w0, [x19, #28]
 100:	mov	w2, #0x1                   	// #1
 104:	mov	x1, #0x0                   	// #0
 108:	bl	0 <lseek64>
 10c:	cmn	x0, #0x1
 110:	b.eq	134 <gzoffset64+0x64>  // b.none
 114:	ldr	w1, [x19, #24]
 118:	cmp	w1, w20
 11c:	b.ne	128 <gzoffset64+0x58>  // b.any
 120:	ldr	w1, [x19, #128]
 124:	sub	x0, x0, x1
 128:	ldp	x19, x20, [sp, #16]
 12c:	ldp	x29, x30, [sp], #32
 130:	ret
 134:	mov	x0, #0xffffffffffffffff    	// #-1
 138:	b	128 <gzoffset64+0x58>
 13c:	mov	x0, #0xffffffffffffffff    	// #-1
 140:	ret
 144:	nop

0000000000000148 <gzoffset>:
 148:	b	d0 <gzoffset64>
 14c:	nop

0000000000000150 <gzeof>:
 150:	mov	x1, x0
 154:	cbz	x0, 178 <gzeof+0x28>
 158:	ldr	w3, [x1, #24]
 15c:	mov	w2, #0x1c4f                	// #7247
 160:	mov	w0, #0x0                   	// #0
 164:	cmp	w3, w2
 168:	b.eq	170 <gzeof+0x20>  // b.none
 16c:	ret
 170:	ldr	w0, [x1, #84]
 174:	ret
 178:	mov	w0, #0x0                   	// #0
 17c:	ret

0000000000000180 <gzerror>:
 180:	cbz	x0, 1d8 <gzerror+0x58>
 184:	ldr	w2, [x0, #24]
 188:	mov	w4, #0x1c4f                	// #7247
 18c:	mov	w3, #0x79b1                	// #31153
 190:	cmp	w2, w4
 194:	ccmp	w2, w3, #0x4, ne  // ne = any
 198:	b.ne	1d8 <gzerror+0x58>  // b.any
 19c:	ldr	w2, [x0, #108]
 1a0:	cbz	x1, 1ac <gzerror+0x2c>
 1a4:	str	w2, [x1]
 1a8:	ldr	w2, [x0, #108]
 1ac:	cmn	w2, #0x4
 1b0:	b.eq	1cc <gzerror+0x4c>  // b.none
 1b4:	ldr	x0, [x0, #112]
 1b8:	adrp	x1, 0 <gzbuffer>
 1bc:	add	x1, x1, #0x0
 1c0:	cmp	x0, #0x0
 1c4:	csel	x0, x1, x0, eq  // eq = none
 1c8:	ret
 1cc:	adrp	x0, 0 <gzbuffer>
 1d0:	add	x0, x0, #0x0
 1d4:	ret
 1d8:	mov	x0, #0x0                   	// #0
 1dc:	ret

00000000000001e0 <gz_error>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	mov	x29, sp
 1e8:	stp	x19, x20, [sp, #16]
 1ec:	mov	x19, x0
 1f0:	mov	w20, w1
 1f4:	ldr	x0, [x0, #112]
 1f8:	stp	x21, x22, [sp, #32]
 1fc:	mov	x21, x2
 200:	cbz	x0, 214 <gz_error+0x34>
 204:	ldr	w1, [x19, #108]
 208:	cmn	w1, #0x4
 20c:	b.ne	2ac <gz_error+0xcc>  // b.any
 210:	str	xzr, [x19, #112]
 214:	cmp	w20, #0x0
 218:	ccmn	w20, #0x5, #0x4, ne  // ne = any
 21c:	b.eq	224 <gz_error+0x44>  // b.none
 220:	str	wzr, [x19]
 224:	str	w20, [x19, #108]
 228:	cmp	x21, #0x0
 22c:	ccmn	w20, #0x4, #0x4, ne  // ne = any
 230:	b.eq	2bc <gz_error+0xdc>  // b.none
 234:	ldr	x22, [x19, #32]
 238:	mov	x0, x22
 23c:	bl	0 <strlen>
 240:	mov	x20, x0
 244:	mov	x0, x21
 248:	bl	0 <strlen>
 24c:	add	x0, x20, x0
 250:	add	x0, x0, #0x3
 254:	bl	0 <malloc>
 258:	str	x0, [x19, #112]
 25c:	mov	x20, x0
 260:	cbz	x0, 2b4 <gz_error+0xd4>
 264:	mov	x0, x22
 268:	bl	0 <strlen>
 26c:	mov	x19, x0
 270:	mov	x0, x21
 274:	bl	0 <strlen>
 278:	add	x1, x19, x0
 27c:	mov	x5, x21
 280:	mov	x3, x22
 284:	mov	x0, x20
 288:	add	x1, x1, #0x3
 28c:	ldp	x19, x20, [sp, #16]
 290:	adrp	x4, 0 <gzbuffer>
 294:	ldp	x21, x22, [sp, #32]
 298:	add	x4, x4, #0x0
 29c:	ldp	x29, x30, [sp], #48
 2a0:	adrp	x2, 0 <gzbuffer>
 2a4:	add	x2, x2, #0x0
 2a8:	b	0 <snprintf>
 2ac:	bl	0 <free>
 2b0:	b	210 <gz_error+0x30>
 2b4:	mov	w0, #0xfffffffc            	// #-4
 2b8:	str	w0, [x19, #108]
 2bc:	ldp	x19, x20, [sp, #16]
 2c0:	ldp	x21, x22, [sp, #32]
 2c4:	ldp	x29, x30, [sp], #48
 2c8:	ret
 2cc:	nop

00000000000002d0 <gz_open>:
 2d0:	stp	x29, x30, [sp, #-64]!
 2d4:	mov	x29, sp
 2d8:	stp	x19, x20, [sp, #16]
 2dc:	cbz	x0, 544 <gz_open+0x274>
 2e0:	mov	x20, x2
 2e4:	stp	x21, x22, [sp, #32]
 2e8:	mov	w22, w1
 2ec:	stp	x23, x24, [sp, #48]
 2f0:	mov	x24, x0
 2f4:	mov	x0, #0xe8                  	// #232
 2f8:	bl	0 <malloc>
 2fc:	mov	x19, x0
 300:	cbz	x0, 53c <gz_open+0x26c>
 304:	ldrb	w4, [x20]
 308:	mov	x1, #0x200000000000        	// #35184372088832
 30c:	mov	x0, #0xffffffff            	// #4294967295
 310:	str	wzr, [x19, #24]
 314:	str	x1, [x19, #40]
 318:	mov	w21, #0x0                   	// #0
 31c:	str	wzr, [x19, #64]
 320:	mov	w23, #0x0                   	// #0
 324:	str	x0, [x19, #88]
 328:	str	xzr, [x19, #112]
 32c:	cbz	w4, 4e8 <gz_open+0x218>
 330:	mov	w8, #0x1c4f                	// #7247
 334:	mov	w7, #0x79b1                	// #31153
 338:	mov	w6, #0x1                   	// #1
 33c:	mov	w3, #0x2                   	// #2
 340:	mov	w1, #0x3                   	// #3
 344:	mov	w0, #0x4                   	// #4
 348:	b	358 <gz_open+0x88>
 34c:	str	w5, [x19, #88]
 350:	ldrb	w4, [x20, #1]!
 354:	cbz	w4, 3a0 <gz_open+0xd0>
 358:	sub	w5, w4, #0x30
 35c:	and	w2, w5, #0xff
 360:	cmp	w2, #0x9
 364:	b.ls	34c <gz_open+0x7c>  // b.plast
 368:	cmp	w4, #0x65
 36c:	b.eq	534 <gz_open+0x264>  // b.none
 370:	b.hi	490 <gz_open+0x1c0>  // b.pmore
 374:	cmp	w4, #0x52
 378:	b.eq	52c <gz_open+0x25c>  // b.none
 37c:	b.ls	4b0 <gz_open+0x1e0>  // b.plast
 380:	cmp	w4, #0x54
 384:	b.eq	51c <gz_open+0x24c>  // b.none
 388:	cmp	w4, #0x61
 38c:	b.ne	350 <gz_open+0x80>  // b.any
 390:	ldrb	w4, [x20, #1]!
 394:	str	w6, [x19, #24]
 398:	cbnz	w4, 358 <gz_open+0x88>
 39c:	nop
 3a0:	ldr	w0, [x19, #24]
 3a4:	cbz	w0, 4e8 <gz_open+0x218>
 3a8:	mov	w1, #0x1c4f                	// #7247
 3ac:	cmp	w0, w1
 3b0:	b.ne	3c4 <gz_open+0xf4>  // b.any
 3b4:	ldr	w0, [x19, #64]
 3b8:	cbnz	w0, 4e8 <gz_open+0x218>
 3bc:	mov	w0, #0x1                   	// #1
 3c0:	str	w0, [x19, #64]
 3c4:	mov	x0, x24
 3c8:	bl	0 <strlen>
 3cc:	add	x20, x0, #0x1
 3d0:	mov	x0, x20
 3d4:	bl	0 <malloc>
 3d8:	str	x0, [x19, #32]
 3dc:	cbz	x0, 4e8 <gz_open+0x218>
 3e0:	mov	x1, x20
 3e4:	mov	x3, x24
 3e8:	adrp	x2, 0 <gzbuffer>
 3ec:	add	x2, x2, #0x0
 3f0:	bl	0 <snprintf>
 3f4:	ldr	w0, [x19, #24]
 3f8:	cmp	w23, #0x0
 3fc:	mov	w2, #0x80000               	// #524288
 400:	mov	w1, #0x1c4f                	// #7247
 404:	csel	w23, w23, w2, eq  // eq = none
 408:	cmp	w0, w1
 40c:	b.eq	43c <gz_open+0x16c>  // b.none
 410:	cmp	w21, #0x0
 414:	mov	w2, #0x79b1                	// #31153
 418:	mov	w1, #0xc1                  	// #193
 41c:	mov	w3, #0x41                  	// #65
 420:	csel	w1, w1, w3, ne  // ne = any
 424:	cmp	w0, w2
 428:	orr	w23, w23, w1
 42c:	mov	w2, #0x200                 	// #512
 430:	mov	w1, #0x400                 	// #1024
 434:	csel	w1, w1, w2, ne  // ne = any
 438:	orr	w23, w23, w1
 43c:	tbnz	w22, #31, 558 <gz_open+0x288>
 440:	str	w22, [x19, #28]
 444:	cmp	w0, #0x1
 448:	b.eq	5c0 <gz_open+0x2f0>  // b.none
 44c:	mov	w1, #0x1c4f                	// #7247
 450:	cmp	w0, w1
 454:	b.eq	580 <gz_open+0x2b0>  // b.none
 458:	str	wzr, [x19]
 45c:	str	wzr, [x19, #104]
 460:	mov	x0, x19
 464:	mov	x2, #0x0                   	// #0
 468:	mov	w1, #0x0                   	// #0
 46c:	bl	1e0 <gz_error>
 470:	ldp	x21, x22, [sp, #32]
 474:	mov	x0, x19
 478:	ldp	x23, x24, [sp, #48]
 47c:	str	xzr, [x19, #16]
 480:	str	wzr, [x19, #128]
 484:	ldp	x19, x20, [sp, #16]
 488:	ldp	x29, x30, [sp], #64
 48c:	ret
 490:	cmp	w4, #0x72
 494:	b.eq	524 <gz_open+0x254>  // b.none
 498:	b.ls	4c8 <gz_open+0x1f8>  // b.plast
 49c:	cmp	w4, #0x77
 4a0:	b.eq	514 <gz_open+0x244>  // b.none
 4a4:	cmp	w4, #0x78
 4a8:	csel	w21, w21, w6, ne  // ne = any
 4ac:	b	350 <gz_open+0x80>
 4b0:	cmp	w4, #0x2b
 4b4:	b.eq	4e8 <gz_open+0x218>  // b.none
 4b8:	cmp	w4, #0x46
 4bc:	b.ne	350 <gz_open+0x80>  // b.any
 4c0:	str	w0, [x19, #92]
 4c4:	b	350 <gz_open+0x80>
 4c8:	cmp	w4, #0x66
 4cc:	b.eq	50c <gz_open+0x23c>  // b.none
 4d0:	cmp	w4, #0x68
 4d4:	b.ne	350 <gz_open+0x80>  // b.any
 4d8:	str	w3, [x19, #92]
 4dc:	b	350 <gz_open+0x80>
 4e0:	ldr	x0, [x19, #32]
 4e4:	bl	0 <free>
 4e8:	mov	x0, x19
 4ec:	mov	x19, #0x0                   	// #0
 4f0:	bl	0 <free>
 4f4:	mov	x0, x19
 4f8:	ldp	x19, x20, [sp, #16]
 4fc:	ldp	x21, x22, [sp, #32]
 500:	ldp	x23, x24, [sp, #48]
 504:	ldp	x29, x30, [sp], #64
 508:	ret
 50c:	str	w6, [x19, #92]
 510:	b	350 <gz_open+0x80>
 514:	str	w7, [x19, #24]
 518:	b	350 <gz_open+0x80>
 51c:	str	w6, [x19, #64]
 520:	b	350 <gz_open+0x80>
 524:	str	w8, [x19, #24]
 528:	b	350 <gz_open+0x80>
 52c:	str	w1, [x19, #92]
 530:	b	350 <gz_open+0x80>
 534:	mov	w23, #0x1                   	// #1
 538:	b	350 <gz_open+0x80>
 53c:	ldp	x21, x22, [sp, #32]
 540:	ldp	x23, x24, [sp, #48]
 544:	mov	x19, #0x0                   	// #0
 548:	mov	x0, x19
 54c:	ldp	x19, x20, [sp, #16]
 550:	ldp	x29, x30, [sp], #64
 554:	ret
 558:	mov	w1, w23
 55c:	mov	x0, x24
 560:	mov	w2, #0x1b6                 	// #438
 564:	bl	0 <open>
 568:	str	w0, [x19, #28]
 56c:	mov	w22, w0
 570:	cmn	w0, #0x1
 574:	b.eq	4e0 <gz_open+0x210>  // b.none
 578:	ldr	w0, [x19, #24]
 57c:	b	444 <gz_open+0x174>
 580:	ldr	w0, [x19, #28]
 584:	mov	x1, #0x0                   	// #0
 588:	mov	w2, #0x1                   	// #1
 58c:	bl	0 <lseek64>
 590:	str	x0, [x19, #72]
 594:	ldr	w1, [x19, #24]
 598:	cmn	x0, #0x1
 59c:	b.ne	5a4 <gz_open+0x2d4>  // b.any
 5a0:	str	xzr, [x19, #72]
 5a4:	str	wzr, [x19]
 5a8:	mov	w0, #0x1c4f                	// #7247
 5ac:	cmp	w1, w0
 5b0:	b.ne	45c <gz_open+0x18c>  // b.any
 5b4:	str	wzr, [x19, #68]
 5b8:	str	xzr, [x19, #80]
 5bc:	b	45c <gz_open+0x18c>
 5c0:	mov	w0, w22
 5c4:	mov	w2, #0x2                   	// #2
 5c8:	mov	x1, #0x0                   	// #0
 5cc:	bl	0 <lseek64>
 5d0:	mov	w0, #0x79b1                	// #31153
 5d4:	str	wzr, [x19]
 5d8:	str	w0, [x19, #24]
 5dc:	b	45c <gz_open+0x18c>

00000000000005e0 <gzopen64>:
 5e0:	mov	x2, x1
 5e4:	mov	w1, #0xffffffff            	// #-1
 5e8:	b	2d0 <gz_open>
 5ec:	nop

00000000000005f0 <gzopen>:
 5f0:	b	5e0 <gzopen64>
 5f4:	nop

00000000000005f8 <gzdopen>:
 5f8:	stp	x29, x30, [sp, #-48]!
 5fc:	cmn	w0, #0x1
 600:	mov	x29, sp
 604:	stp	x19, x20, [sp, #16]
 608:	b.eq	670 <gzdopen+0x78>  // b.none
 60c:	mov	w19, w0
 610:	mov	x0, #0x13                  	// #19
 614:	str	x21, [sp, #32]
 618:	mov	x21, x1
 61c:	bl	0 <malloc>
 620:	mov	x20, x0
 624:	cbz	x0, 66c <gzdopen+0x74>
 628:	mov	w3, w19
 62c:	mov	x1, #0x13                  	// #19
 630:	adrp	x2, 0 <gzbuffer>
 634:	add	x2, x2, #0x0
 638:	bl	0 <snprintf>
 63c:	mov	x2, x21
 640:	mov	w1, w19
 644:	mov	x0, x20
 648:	bl	2d0 <gz_open>
 64c:	mov	x19, x0
 650:	mov	x0, x20
 654:	bl	0 <free>
 658:	mov	x0, x19
 65c:	ldp	x19, x20, [sp, #16]
 660:	ldr	x21, [sp, #32]
 664:	ldp	x29, x30, [sp], #48
 668:	ret
 66c:	ldr	x21, [sp, #32]
 670:	mov	x19, #0x0                   	// #0
 674:	mov	x0, x19
 678:	ldp	x19, x20, [sp, #16]
 67c:	ldp	x29, x30, [sp], #48
 680:	ret
 684:	nop

0000000000000688 <gzclearerr>:
 688:	cbz	x0, 6b8 <gzclearerr+0x30>
 68c:	ldr	w1, [x0, #24]
 690:	mov	w2, #0x1c4f                	// #7247
 694:	mov	w3, #0x79b1                	// #31153
 698:	cmp	w1, w2
 69c:	ccmp	w1, w3, #0x4, ne  // ne = any
 6a0:	b.ne	6b8 <gzclearerr+0x30>  // b.any
 6a4:	cmp	w1, w2
 6a8:	b.eq	6bc <gzclearerr+0x34>  // b.none
 6ac:	mov	x2, #0x0                   	// #0
 6b0:	mov	w1, #0x0                   	// #0
 6b4:	b	1e0 <gz_error>
 6b8:	ret
 6bc:	str	xzr, [x0, #80]
 6c0:	mov	x2, #0x0                   	// #0
 6c4:	mov	w1, #0x0                   	// #0
 6c8:	b	1e0 <gz_error>
 6cc:	nop

00000000000006d0 <gzrewind>:
 6d0:	cbz	x0, 768 <gzrewind+0x98>
 6d4:	stp	x29, x30, [sp, #-32]!
 6d8:	mov	x29, sp
 6dc:	stp	x19, x20, [sp, #16]
 6e0:	mov	x19, x0
 6e4:	mov	w0, #0x1c4f                	// #7247
 6e8:	ldr	w20, [x19, #24]
 6ec:	cmp	w20, w0
 6f0:	b.ne	760 <gzrewind+0x90>  // b.any
 6f4:	ldr	w0, [x19, #108]
 6f8:	cmp	w0, #0x0
 6fc:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 700:	b.ne	760 <gzrewind+0x90>  // b.any
 704:	ldr	w0, [x19, #28]
 708:	mov	w2, #0x0                   	// #0
 70c:	ldr	x1, [x19, #72]
 710:	bl	0 <lseek64>
 714:	cmn	x0, #0x1
 718:	b.eq	760 <gzrewind+0x90>  // b.none
 71c:	ldr	w0, [x19, #24]
 720:	str	wzr, [x19]
 724:	cmp	w0, w20
 728:	b.ne	734 <gzrewind+0x64>  // b.any
 72c:	str	wzr, [x19, #68]
 730:	str	xzr, [x19, #80]
 734:	str	wzr, [x19, #104]
 738:	mov	x0, x19
 73c:	mov	x2, #0x0                   	// #0
 740:	mov	w1, #0x0                   	// #0
 744:	bl	1e0 <gz_error>
 748:	str	xzr, [x19, #16]
 74c:	mov	w0, #0x0                   	// #0
 750:	str	wzr, [x19, #128]
 754:	ldp	x19, x20, [sp, #16]
 758:	ldp	x29, x30, [sp], #32
 75c:	ret
 760:	mov	w0, #0xffffffff            	// #-1
 764:	b	754 <gzrewind+0x84>
 768:	mov	w0, #0xffffffff            	// #-1
 76c:	ret

0000000000000770 <gzseek64>:
 770:	cbz	x0, 900 <gzseek64+0x190>
 774:	stp	x29, x30, [sp, #-48]!
 778:	mov	x29, sp
 77c:	stp	x19, x20, [sp, #16]
 780:	mov	x19, x0
 784:	mov	x20, x1
 788:	str	x21, [sp, #32]
 78c:	mov	w1, #0x1c4f                	// #7247
 790:	ldr	w21, [x19, #24]
 794:	mov	w0, #0x79b1                	// #31153
 798:	cmp	w21, w1
 79c:	ccmp	w21, w0, #0x4, ne  // ne = any
 7a0:	b.ne	8b0 <gzseek64+0x140>  // b.any
 7a4:	ldr	w0, [x19, #108]
 7a8:	cmp	w0, #0x0
 7ac:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 7b0:	b.ne	8b0 <gzseek64+0x140>  // b.any
 7b4:	cmp	w2, #0x1
 7b8:	b.hi	8b0 <gzseek64+0x140>  // b.pmore
 7bc:	cbz	w2, 80c <gzseek64+0x9c>
 7c0:	ldr	w0, [x19, #104]
 7c4:	cbz	w0, 7d0 <gzseek64+0x60>
 7c8:	ldr	x0, [x19, #96]
 7cc:	add	x20, x20, x0
 7d0:	str	wzr, [x19, #104]
 7d4:	mov	w0, #0x1c4f                	// #7247
 7d8:	cmp	w21, w0
 7dc:	b.eq	824 <gzseek64+0xb4>  // b.none
 7e0:	tbnz	x20, #63, 8b0 <gzseek64+0x140>
 7e4:	ldr	x0, [x19, #16]
 7e8:	cbz	x20, 7f8 <gzseek64+0x88>
 7ec:	mov	w1, #0x1                   	// #1
 7f0:	str	x20, [x19, #96]
 7f4:	str	w1, [x19, #104]
 7f8:	add	x0, x20, x0
 7fc:	ldp	x19, x20, [sp, #16]
 800:	ldr	x21, [sp, #32]
 804:	ldp	x29, x30, [sp], #48
 808:	ret
 80c:	ldr	x0, [x19, #16]
 810:	str	wzr, [x19, #104]
 814:	sub	x20, x20, x0
 818:	mov	w0, #0x1c4f                	// #7247
 81c:	cmp	w21, w0
 820:	b.ne	7e0 <gzseek64+0x70>  // b.any
 824:	ldr	w2, [x19, #68]
 828:	ldr	x0, [x19, #16]
 82c:	cmp	w2, #0x1
 830:	b.eq	8a0 <gzseek64+0x130>  // b.none
 834:	tbz	x20, #63, 860 <gzseek64+0xf0>
 838:	adds	x20, x20, x0
 83c:	b.mi	8b0 <gzseek64+0x140>  // b.first
 840:	mov	x0, x19
 844:	bl	6d0 <gzrewind>
 848:	cmn	w0, #0x1
 84c:	b.eq	8b0 <gzseek64+0x140>  // b.none
 850:	ldr	w1, [x19, #24]
 854:	ldr	x0, [x19, #16]
 858:	cmp	w1, w21
 85c:	b.ne	7e8 <gzseek64+0x78>  // b.any
 860:	ldr	w2, [x19]
 864:	mov	w4, #0x0                   	// #0
 868:	mov	w1, w2
 86c:	cmp	x1, x20
 870:	mov	x3, x1
 874:	b.le	884 <gzseek64+0x114>
 878:	sub	w4, w2, w20
 87c:	mov	x3, x20
 880:	mov	w1, w20
 884:	ldr	x2, [x19, #8]
 888:	add	x0, x0, x3
 88c:	sub	x20, x20, x3
 890:	str	w4, [x19]
 894:	add	x1, x2, x1
 898:	stp	x1, x0, [x19, #8]
 89c:	b	7e8 <gzseek64+0x78>
 8a0:	cmn	x20, x0
 8a4:	b.pl	8b8 <gzseek64+0x148>  // b.nfrst
 8a8:	tbz	x20, #63, 860 <gzseek64+0xf0>
 8ac:	nop
 8b0:	mov	x0, #0xffffffffffffffff    	// #-1
 8b4:	b	7fc <gzseek64+0x8c>
 8b8:	ldr	w0, [x19, #28]
 8bc:	ldr	w1, [x19]
 8c0:	sub	x1, x20, x1
 8c4:	bl	0 <lseek64>
 8c8:	cmn	x0, #0x1
 8cc:	b.eq	8b0 <gzseek64+0x140>  // b.none
 8d0:	str	wzr, [x19]
 8d4:	mov	x0, x19
 8d8:	str	xzr, [x19, #80]
 8dc:	mov	x2, #0x0                   	// #0
 8e0:	str	wzr, [x19, #104]
 8e4:	mov	w1, #0x0                   	// #0
 8e8:	bl	1e0 <gz_error>
 8ec:	str	wzr, [x19, #128]
 8f0:	ldr	x0, [x19, #16]
 8f4:	add	x0, x20, x0
 8f8:	str	x0, [x19, #16]
 8fc:	b	7fc <gzseek64+0x8c>
 900:	mov	x0, #0xffffffffffffffff    	// #-1
 904:	ret

0000000000000908 <gzseek>:
 908:	b	770 <gzseek64>

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_load>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	wzr, [x3]
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x3
  14:	mov	w20, w2
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x1
  20:	mov	x21, x0
  24:	mov	w1, #0x0                   	// #0
  28:	str	x23, [sp, #48]
  2c:	mov	w23, #0x40000000            	// #1073741824
  30:	b	48 <gz_load+0x48>
  34:	ldr	w1, [x19]
  38:	add	w1, w1, w0
  3c:	str	w1, [x19]
  40:	cmp	w1, w20
  44:	b.cs	90 <gz_load+0x90>  // b.hs, b.nlast
  48:	sub	w2, w20, w1
  4c:	ldr	w0, [x21, #28]
  50:	cmp	w2, w23
  54:	add	x1, x22, w1, uxtw
  58:	csel	w2, w2, w23, ls  // ls = plast
  5c:	bl	0 <read>
  60:	cmp	w0, #0x0
  64:	mov	w1, w0
  68:	b.gt	34 <gz_load+0x34>
  6c:	cbnz	w0, ac <gz_load+0xac>
  70:	mov	w0, #0x1                   	// #1
  74:	str	w0, [x21, #80]
  78:	mov	w0, w1
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x21, x22, [sp, #32]
  84:	ldr	x23, [sp, #48]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret
  90:	mov	w1, #0x0                   	// #0
  94:	mov	w0, w1
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldp	x21, x22, [sp, #32]
  a0:	ldr	x23, [sp, #48]
  a4:	ldp	x29, x30, [sp], #64
  a8:	ret
  ac:	bl	0 <__errno_location>
  b0:	ldr	w0, [x0]
  b4:	bl	0 <strerror>
  b8:	mov	x2, x0
  bc:	mov	w1, #0xffffffff            	// #-1
  c0:	mov	x0, x21
  c4:	bl	0 <gz_error>
  c8:	mov	w1, #0xffffffff            	// #-1
  cc:	b	78 <gz_load+0x78>

00000000000000d0 <gz_avail>:
  d0:	stp	x29, x30, [sp, #-64]!
  d4:	mov	x29, sp
  d8:	stp	x19, x20, [sp, #16]
  dc:	mov	x19, x0
  e0:	ldr	w0, [x0, #108]
  e4:	cmp	w0, #0x0
  e8:	ccmn	w0, #0x5, #0x4, ne  // ne = any
  ec:	b.ne	194 <gz_avail+0xc4>  // b.any
  f0:	ldr	w20, [x19, #80]
  f4:	cbnz	w20, 180 <gz_avail+0xb0>
  f8:	ldr	x1, [x19, #48]
  fc:	str	x21, [sp, #32]
 100:	add	x21, x19, #0x78
 104:	ldr	w2, [x21, #8]
 108:	cbz	w2, 134 <gz_avail+0x64>
 10c:	ldr	x5, [x19, #120]
 110:	sub	w0, w2, #0x1
 114:	mov	x2, #0x0                   	// #0
 118:	ldrb	w4, [x5, x2]
 11c:	cmp	x0, x2
 120:	strb	w4, [x1, x2]
 124:	add	x2, x2, #0x1
 128:	b.ne	118 <gz_avail+0x48>  // b.any
 12c:	ldr	w2, [x21, #8]
 130:	ldr	x1, [x19, #48]
 134:	add	x1, x1, w2, uxtw
 138:	ldr	w4, [x19, #40]
 13c:	add	x3, sp, #0x3c
 140:	mov	x0, x19
 144:	sub	w2, w4, w2
 148:	bl	0 <gz_load>
 14c:	cmn	w0, #0x1
 150:	b.eq	19c <gz_avail+0xcc>  // b.none
 154:	ldr	w0, [x21, #8]
 158:	ldr	w2, [sp, #60]
 15c:	ldr	x1, [x19, #48]
 160:	add	w0, w0, w2
 164:	str	w0, [x21, #8]
 168:	mov	w0, w20
 16c:	ldr	x21, [sp, #32]
 170:	str	x1, [x19, #120]
 174:	ldp	x19, x20, [sp, #16]
 178:	ldp	x29, x30, [sp], #64
 17c:	ret
 180:	mov	w20, #0x0                   	// #0
 184:	mov	w0, w20
 188:	ldp	x19, x20, [sp, #16]
 18c:	ldp	x29, x30, [sp], #64
 190:	ret
 194:	mov	w20, #0xffffffff            	// #-1
 198:	b	184 <gz_avail+0xb4>
 19c:	mov	w20, w0
 1a0:	ldr	x21, [sp, #32]
 1a4:	b	184 <gz_avail+0xb4>

00000000000001a8 <gz_look>:
 1a8:	stp	x29, x30, [sp, #-48]!
 1ac:	mov	x29, sp
 1b0:	stp	x19, x20, [sp, #16]
 1b4:	mov	x19, x0
 1b8:	add	x20, x0, #0x78
 1bc:	ldr	w0, [x0, #40]
 1c0:	cbz	w0, 270 <gz_look+0xc8>
 1c4:	ldr	w2, [x20, #8]
 1c8:	cmp	w2, #0x1
 1cc:	b.ls	208 <gz_look+0x60>  // b.plast
 1d0:	ldr	x1, [x19, #120]
 1d4:	ldrb	w0, [x1]
 1d8:	cmp	w0, #0x1f
 1dc:	b.eq	2d8 <gz_look+0x130>  // b.none
 1e0:	ldr	w0, [x19, #64]
 1e4:	cbnz	w0, 23c <gz_look+0x94>
 1e8:	str	wzr, [x20, #8]
 1ec:	mov	w1, #0x1                   	// #1
 1f0:	str	wzr, [x19]
 1f4:	mov	w0, #0x0                   	// #0
 1f8:	str	w1, [x19, #80]
 1fc:	ldp	x19, x20, [sp, #16]
 200:	ldp	x29, x30, [sp], #48
 204:	ret
 208:	mov	x0, x19
 20c:	bl	d0 <gz_avail>
 210:	cmn	w0, #0x1
 214:	b.eq	264 <gz_look+0xbc>  // b.none
 218:	ldr	w2, [x20, #8]
 21c:	mov	w0, #0x0                   	// #0
 220:	cbz	w2, 264 <gz_look+0xbc>
 224:	cmp	w2, #0x1
 228:	b.hi	1d0 <gz_look+0x28>  // b.pmore
 22c:	ldr	w0, [x19, #64]
 230:	cbz	w0, 1e8 <gz_look+0x40>
 234:	ldr	x1, [x19, #120]
 238:	mov	w2, #0x1                   	// #1
 23c:	ldr	x0, [x19, #56]
 240:	str	x0, [x19, #8]
 244:	mov	w2, w2
 248:	bl	0 <memcpy>
 24c:	ldr	w0, [x20, #8]
 250:	mov	x1, #0x100000001           	// #4294967297
 254:	str	w0, [x19]
 258:	str	wzr, [x20, #8]
 25c:	mov	w0, #0x0                   	// #0
 260:	str	x1, [x19, #64]
 264:	ldp	x19, x20, [sp, #16]
 268:	ldp	x29, x30, [sp], #48
 26c:	ret
 270:	stp	x21, x22, [sp, #32]
 274:	ldr	w22, [x19, #44]
 278:	mov	w0, w22
 27c:	bl	0 <malloc>
 280:	mov	x21, x0
 284:	str	x21, [x19, #48]
 288:	lsl	w0, w22, #1
 28c:	bl	0 <malloc>
 290:	str	x0, [x19, #56]
 294:	cmp	x21, #0x0
 298:	ccmp	x0, #0x0, #0x4, ne  // ne = any
 29c:	b.eq	330 <gz_look+0x188>  // b.none
 2a0:	str	w22, [x19, #40]
 2a4:	adrp	x2, 0 <gz_load>
 2a8:	str	xzr, [x19, #120]
 2ac:	add	x2, x2, #0x0
 2b0:	str	wzr, [x19, #128]
 2b4:	mov	x0, x20
 2b8:	stp	xzr, xzr, [x19, #184]
 2bc:	mov	w3, #0x70                  	// #112
 2c0:	mov	w1, #0x1f                  	// #31
 2c4:	str	xzr, [x19, #200]
 2c8:	bl	0 <inflateInit2_>
 2cc:	cbnz	w0, 2fc <gz_look+0x154>
 2d0:	ldp	x21, x22, [sp, #32]
 2d4:	b	1c4 <gz_look+0x1c>
 2d8:	ldrb	w0, [x1, #1]
 2dc:	cmp	w0, #0x8b
 2e0:	b.ne	1e0 <gz_look+0x38>  // b.any
 2e4:	mov	x0, x20
 2e8:	bl	0 <inflateReset>
 2ec:	mov	x1, #0x200000000           	// #8589934592
 2f0:	mov	w0, #0x0                   	// #0
 2f4:	str	x1, [x19, #64]
 2f8:	b	264 <gz_look+0xbc>
 2fc:	ldr	x0, [x19, #56]
 300:	bl	0 <free>
 304:	ldr	x0, [x19, #48]
 308:	bl	0 <free>
 30c:	str	wzr, [x19, #40]
 310:	mov	x0, x19
 314:	adrp	x2, 0 <gz_load>
 318:	mov	w1, #0xfffffffc            	// #-4
 31c:	add	x2, x2, #0x0
 320:	bl	0 <gz_error>
 324:	mov	w0, #0xffffffff            	// #-1
 328:	ldp	x21, x22, [sp, #32]
 32c:	b	264 <gz_look+0xbc>
 330:	bl	0 <free>
 334:	mov	x0, x21
 338:	bl	0 <free>
 33c:	mov	x0, x19
 340:	adrp	x2, 0 <gz_load>
 344:	mov	w1, #0xfffffffc            	// #-4
 348:	add	x2, x2, #0x0
 34c:	bl	0 <gz_error>
 350:	mov	w0, #0xffffffff            	// #-1
 354:	ldp	x21, x22, [sp, #32]
 358:	b	264 <gz_look+0xbc>
 35c:	nop

0000000000000360 <gz_decomp>:
 360:	stp	x29, x30, [sp, #-48]!
 364:	mov	x29, sp
 368:	stp	x19, x20, [sp, #16]
 36c:	add	x19, x0, #0x78
 370:	mov	x20, x0
 374:	str	x21, [sp, #32]
 378:	ldr	w21, [x19, #32]
 37c:	b	3b8 <gz_decomp+0x58>
 380:	mov	w1, #0x0                   	// #0
 384:	mov	x0, x19
 388:	bl	0 <inflate>
 38c:	add	w1, w0, #0x2
 390:	tst	w1, #0xfffffffb
 394:	b.eq	418 <gz_decomp+0xb8>  // b.none
 398:	cmn	w0, #0x4
 39c:	b.eq	440 <gz_decomp+0xe0>  // b.none
 3a0:	cmn	w0, #0x3
 3a4:	b.eq	468 <gz_decomp+0x108>  // b.none
 3a8:	ldr	w1, [x19, #32]
 3ac:	cmp	w0, #0x1
 3b0:	cbz	w1, 49c <gz_decomp+0x13c>
 3b4:	b.eq	4cc <gz_decomp+0x16c>  // b.none
 3b8:	ldr	w1, [x19, #8]
 3bc:	cbnz	w1, 380 <gz_decomp+0x20>
 3c0:	mov	x0, x20
 3c4:	bl	d0 <gz_avail>
 3c8:	cmn	w0, #0x1
 3cc:	b.eq	408 <gz_decomp+0xa8>  // b.none
 3d0:	ldr	w0, [x19, #8]
 3d4:	cbnz	w0, 380 <gz_decomp+0x20>
 3d8:	mov	x0, x20
 3dc:	mov	w1, #0xfffffffb            	// #-5
 3e0:	adrp	x2, 0 <gz_load>
 3e4:	add	x2, x2, #0x0
 3e8:	bl	0 <gz_error>
 3ec:	ldr	w0, [x19, #32]
 3f0:	ldr	x1, [x19, #24]
 3f4:	sub	w21, w21, w0
 3f8:	mov	w0, #0x0                   	// #0
 3fc:	str	w21, [x20]
 400:	sub	x21, x1, w21, uxtw
 404:	str	x21, [x20, #8]
 408:	ldp	x19, x20, [sp, #16]
 40c:	ldr	x21, [sp, #32]
 410:	ldp	x29, x30, [sp], #48
 414:	ret
 418:	mov	x0, x20
 41c:	mov	w1, #0xfffffffe            	// #-2
 420:	adrp	x2, 0 <gz_load>
 424:	add	x2, x2, #0x0
 428:	bl	0 <gz_error>
 42c:	mov	w0, #0xffffffff            	// #-1
 430:	ldp	x19, x20, [sp, #16]
 434:	ldr	x21, [sp, #32]
 438:	ldp	x29, x30, [sp], #48
 43c:	ret
 440:	mov	w1, w0
 444:	adrp	x2, 0 <gz_load>
 448:	mov	x0, x20
 44c:	add	x2, x2, #0x0
 450:	bl	0 <gz_error>
 454:	mov	w0, #0xffffffff            	// #-1
 458:	ldp	x19, x20, [sp, #16]
 45c:	ldr	x21, [sp, #32]
 460:	ldp	x29, x30, [sp], #48
 464:	ret
 468:	ldr	x3, [x19, #48]
 46c:	adrp	x1, 0 <gz_load>
 470:	add	x2, x1, #0x0
 474:	mov	w1, w0
 478:	cmp	x3, #0x0
 47c:	mov	x0, x20
 480:	csel	x2, x2, x3, eq  // eq = none
 484:	bl	0 <gz_error>
 488:	mov	w0, #0xffffffff            	// #-1
 48c:	ldp	x19, x20, [sp, #16]
 490:	ldr	x21, [sp, #32]
 494:	ldp	x29, x30, [sp], #48
 498:	ret
 49c:	ldr	x1, [x19, #24]
 4a0:	str	w21, [x20]
 4a4:	mov	w0, #0x0                   	// #0
 4a8:	sub	x1, x1, w21, uxtw
 4ac:	str	x1, [x20, #8]
 4b0:	b.ne	408 <gz_decomp+0xa8>  // b.any
 4b4:	mov	w0, #0x0                   	// #0
 4b8:	str	wzr, [x20, #68]
 4bc:	ldp	x19, x20, [sp, #16]
 4c0:	ldr	x21, [sp, #32]
 4c4:	ldp	x29, x30, [sp], #48
 4c8:	ret
 4cc:	ldr	x0, [x19, #24]
 4d0:	sub	w1, w21, w1
 4d4:	str	w1, [x20]
 4d8:	str	wzr, [x20, #68]
 4dc:	sub	x1, x0, w1, uxtw
 4e0:	mov	w0, #0x0                   	// #0
 4e4:	str	x1, [x20, #8]
 4e8:	b	4bc <gz_decomp+0x15c>
 4ec:	nop

00000000000004f0 <gz_fetch>:
 4f0:	stp	x29, x30, [sp, #-32]!
 4f4:	mov	x29, sp
 4f8:	str	x19, [sp, #16]
 4fc:	mov	x19, x0
 500:	ldr	w0, [x19, #68]
 504:	cmp	w0, #0x1
 508:	b.eq	538 <gz_fetch+0x48>  // b.none
 50c:	cmp	w0, #0x2
 510:	b.eq	590 <gz_fetch+0xa0>  // b.none
 514:	cbz	w0, 570 <gz_fetch+0x80>
 518:	ldr	w0, [x19]
 51c:	cbnz	w0, 530 <gz_fetch+0x40>
 520:	ldr	w0, [x19, #80]
 524:	cbz	w0, 500 <gz_fetch+0x10>
 528:	ldr	w0, [x19, #128]
 52c:	cbnz	w0, 500 <gz_fetch+0x10>
 530:	mov	w0, #0x0                   	// #0
 534:	b	564 <gz_fetch+0x74>
 538:	ldr	x1, [x19, #56]
 53c:	mov	x3, x19
 540:	ldr	w2, [x19, #40]
 544:	mov	x0, x19
 548:	lsl	w2, w2, #1
 54c:	bl	0 <gz_load>
 550:	cmn	w0, #0x1
 554:	b.eq	5b4 <gz_fetch+0xc4>  // b.none
 558:	ldr	x1, [x19, #56]
 55c:	mov	w0, #0x0                   	// #0
 560:	str	x1, [x19, #8]
 564:	ldr	x19, [sp, #16]
 568:	ldp	x29, x30, [sp], #32
 56c:	ret
 570:	mov	x0, x19
 574:	bl	1a8 <gz_look>
 578:	cmn	w0, #0x1
 57c:	b.eq	5b4 <gz_fetch+0xc4>  // b.none
 580:	ldr	w0, [x19, #68]
 584:	cbnz	w0, 518 <gz_fetch+0x28>
 588:	mov	w0, #0x0                   	// #0
 58c:	b	564 <gz_fetch+0x74>
 590:	ldr	w2, [x19, #40]
 594:	mov	x0, x19
 598:	ldr	x3, [x19, #56]
 59c:	str	x3, [x19, #144]
 5a0:	lsl	w2, w2, #1
 5a4:	str	w2, [x19, #152]
 5a8:	bl	360 <gz_decomp>
 5ac:	cmn	w0, #0x1
 5b0:	b.ne	518 <gz_fetch+0x28>  // b.any
 5b4:	mov	w0, #0xffffffff            	// #-1
 5b8:	b	564 <gz_fetch+0x74>
 5bc:	nop

00000000000005c0 <gz_skip>:
 5c0:	stp	x29, x30, [sp, #-32]!
 5c4:	mov	x29, sp
 5c8:	stp	x19, x20, [sp, #16]
 5cc:	mov	x19, x0
 5d0:	mov	x20, x1
 5d4:	cbz	x1, 620 <gz_skip+0x60>
 5d8:	ldr	w1, [x19]
 5dc:	mov	x0, x19
 5e0:	mov	w4, #0x0                   	// #0
 5e4:	mov	w2, w1
 5e8:	mov	x3, x2
 5ec:	cmp	x2, x20
 5f0:	cbz	w1, 630 <gz_skip+0x70>
 5f4:	b.le	604 <gz_skip+0x44>
 5f8:	sub	w4, w1, w20
 5fc:	and	x3, x20, #0xffffffff
 600:	mov	w2, w20
 604:	ldp	x1, x0, [x19, #8]
 608:	subs	x20, x20, x3
 60c:	str	w4, [x19]
 610:	add	x2, x1, x2
 614:	add	x3, x0, x3
 618:	stp	x2, x3, [x19, #8]
 61c:	b.ne	5d8 <gz_skip+0x18>  // b.any
 620:	mov	w0, #0x0                   	// #0
 624:	ldp	x19, x20, [sp, #16]
 628:	ldp	x29, x30, [sp], #32
 62c:	ret
 630:	ldr	w1, [x19, #80]
 634:	cbz	w1, 640 <gz_skip+0x80>
 638:	ldr	w1, [x19, #128]
 63c:	cbz	w1, 620 <gz_skip+0x60>
 640:	bl	4f0 <gz_fetch>
 644:	cmn	w0, #0x1
 648:	b.ne	5d8 <gz_skip+0x18>  // b.any
 64c:	ldp	x19, x20, [sp, #16]
 650:	ldp	x29, x30, [sp], #32
 654:	ret

0000000000000658 <gz_read>:
 658:	stp	x29, x30, [sp, #-96]!
 65c:	mov	x29, sp
 660:	stp	x23, x24, [sp, #48]
 664:	cbz	x2, 7dc <gz_read+0x184>
 668:	stp	x25, x26, [sp, #64]
 66c:	mov	x26, x1
 670:	ldr	w1, [x0, #104]
 674:	stp	x19, x20, [sp, #16]
 678:	mov	x25, x2
 67c:	mov	x19, x0
 680:	cbnz	w1, 7c0 <gz_read+0x168>
 684:	mov	x24, #0x0                   	// #0
 688:	mov	x23, #0xfffffffe            	// #4294967294
 68c:	stp	x21, x22, [sp, #32]
 690:	mov	w22, #0xffffffff            	// #-1
 694:	nop
 698:	ldr	w3, [x19]
 69c:	cmp	x25, x23
 6a0:	csel	w0, w25, w22, ls  // ls = plast
 6a4:	str	w0, [sp, #92]
 6a8:	cbz	w3, 718 <gz_read+0xc0>
 6ac:	mov	w21, w0
 6b0:	cmp	w3, w0
 6b4:	b.cs	6c0 <gz_read+0x68>  // b.hs, b.nlast
 6b8:	mov	w21, w3
 6bc:	str	w3, [sp, #92]
 6c0:	ldr	x1, [x19, #8]
 6c4:	mov	w20, w21
 6c8:	mov	x2, x20
 6cc:	mov	x0, x26
 6d0:	bl	0 <memcpy>
 6d4:	ldr	x0, [x19, #8]
 6d8:	ldr	w3, [x19]
 6dc:	add	x0, x0, x20
 6e0:	str	x0, [x19, #8]
 6e4:	sub	w21, w3, w21
 6e8:	str	w21, [x19]
 6ec:	ldr	x0, [x19, #16]
 6f0:	add	x26, x26, x20
 6f4:	add	x24, x24, x20
 6f8:	subs	x25, x25, x20
 6fc:	add	x20, x0, x20
 700:	str	x20, [x19, #16]
 704:	b.ne	698 <gz_read+0x40>  // b.any
 708:	ldp	x19, x20, [sp, #16]
 70c:	ldp	x21, x22, [sp, #32]
 710:	ldp	x25, x26, [sp, #64]
 714:	b	790 <gz_read+0x138>
 718:	ldr	w0, [x19, #80]
 71c:	cbz	w0, 728 <gz_read+0xd0>
 720:	ldr	w0, [x19, #128]
 724:	cbz	w0, 7f0 <gz_read+0x198>
 728:	ldr	w0, [x19, #68]
 72c:	cbz	w0, 770 <gz_read+0x118>
 730:	ldr	w3, [x19, #40]
 734:	ldr	w2, [sp, #92]
 738:	cmp	w2, w3, lsl #1
 73c:	b.cc	770 <gz_read+0x118>  // b.lo, b.ul, b.last
 740:	cmp	w0, #0x1
 744:	b.eq	7a0 <gz_read+0x148>  // b.none
 748:	str	x26, [x19, #144]
 74c:	mov	x0, x19
 750:	str	w2, [x19, #152]
 754:	bl	360 <gz_decomp>
 758:	cmn	w0, #0x1
 75c:	b.eq	780 <gz_read+0x128>  // b.none
 760:	ldr	w21, [x19]
 764:	str	wzr, [x19]
 768:	mov	w20, w21
 76c:	b	6ec <gz_read+0x94>
 770:	mov	x0, x19
 774:	bl	4f0 <gz_fetch>
 778:	cmn	w0, #0x1
 77c:	b.ne	698 <gz_read+0x40>  // b.any
 780:	ldp	x19, x20, [sp, #16]
 784:	mov	x24, #0x0                   	// #0
 788:	ldp	x21, x22, [sp, #32]
 78c:	ldp	x25, x26, [sp, #64]
 790:	mov	x0, x24
 794:	ldp	x23, x24, [sp, #48]
 798:	ldp	x29, x30, [sp], #96
 79c:	ret
 7a0:	add	x3, sp, #0x5c
 7a4:	mov	x1, x26
 7a8:	mov	x0, x19
 7ac:	bl	0 <gz_load>
 7b0:	cmn	w0, #0x1
 7b4:	b.eq	780 <gz_read+0x128>  // b.none
 7b8:	ldr	w20, [sp, #92]
 7bc:	b	6ec <gz_read+0x94>
 7c0:	ldr	x1, [x0, #96]
 7c4:	str	wzr, [x0, #104]
 7c8:	bl	5c0 <gz_skip>
 7cc:	cmn	w0, #0x1
 7d0:	b.ne	684 <gz_read+0x2c>  // b.any
 7d4:	ldp	x19, x20, [sp, #16]
 7d8:	ldp	x25, x26, [sp, #64]
 7dc:	mov	x24, #0x0                   	// #0
 7e0:	mov	x0, x24
 7e4:	ldp	x23, x24, [sp, #48]
 7e8:	ldp	x29, x30, [sp], #96
 7ec:	ret
 7f0:	mov	w0, #0x1                   	// #1
 7f4:	ldp	x21, x22, [sp, #32]
 7f8:	ldp	x25, x26, [sp, #64]
 7fc:	str	w0, [x19, #84]
 800:	ldp	x19, x20, [sp, #16]
 804:	b	790 <gz_read+0x138>

0000000000000808 <gzread>:
 808:	cbz	x0, 880 <gzread+0x78>
 80c:	stp	x29, x30, [sp, #-32]!
 810:	mov	w3, #0x1c4f                	// #7247
 814:	mov	x29, sp
 818:	ldr	w4, [x0, #24]
 81c:	str	x19, [sp, #16]
 820:	mov	x19, x0
 824:	cmp	w4, w3
 828:	b.ne	878 <gzread+0x70>  // b.any
 82c:	ldr	w3, [x0, #108]
 830:	cmp	w3, #0x0
 834:	ccmn	w3, #0x5, #0x4, ne  // ne = any
 838:	b.ne	878 <gzread+0x70>  // b.any
 83c:	tbnz	w2, #31, 868 <gzread+0x60>
 840:	mov	w2, w2
 844:	bl	658 <gz_read>
 848:	cbnz	w0, 85c <gzread+0x54>
 84c:	ldr	w1, [x19, #108]
 850:	cmp	w1, #0x0
 854:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 858:	b.ne	878 <gzread+0x70>  // b.any
 85c:	ldr	x19, [sp, #16]
 860:	ldp	x29, x30, [sp], #32
 864:	ret
 868:	adrp	x2, 0 <gz_load>
 86c:	mov	w1, #0xfffffffe            	// #-2
 870:	add	x2, x2, #0x0
 874:	bl	0 <gz_error>
 878:	mov	w0, #0xffffffff            	// #-1
 87c:	b	85c <gzread+0x54>
 880:	mov	w0, #0xffffffff            	// #-1
 884:	ret

0000000000000888 <gzfread>:
 888:	cbz	x3, 8fc <gzfread+0x74>
 88c:	stp	x29, x30, [sp, #-32]!
 890:	mov	x4, x0
 894:	mov	x0, #0x0                   	// #0
 898:	mov	x29, sp
 89c:	ldr	w5, [x3, #24]
 8a0:	str	x19, [sp, #16]
 8a4:	mov	x19, x1
 8a8:	mov	w1, #0x1c4f                	// #7247
 8ac:	cmp	w5, w1
 8b0:	b.ne	8f0 <gzfread+0x68>  // b.any
 8b4:	ldr	w1, [x3, #108]
 8b8:	cmp	w1, #0x0
 8bc:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 8c0:	b.ne	8f0 <gzfread+0x68>  // b.any
 8c4:	cbz	x19, 8f0 <gzfread+0x68>
 8c8:	mul	x0, x2, x19
 8cc:	udiv	x1, x0, x19
 8d0:	cmp	x1, x2
 8d4:	b.ne	904 <gzfread+0x7c>  // b.any
 8d8:	cbz	x0, 8f0 <gzfread+0x68>
 8dc:	mov	x2, x0
 8e0:	mov	x1, x4
 8e4:	mov	x0, x3
 8e8:	bl	658 <gz_read>
 8ec:	udiv	x0, x0, x19
 8f0:	ldr	x19, [sp, #16]
 8f4:	ldp	x29, x30, [sp], #32
 8f8:	ret
 8fc:	mov	x0, #0x0                   	// #0
 900:	ret
 904:	mov	x0, x3
 908:	adrp	x2, 0 <gz_load>
 90c:	mov	w1, #0xfffffffe            	// #-2
 910:	add	x2, x2, #0x0
 914:	bl	0 <gz_error>
 918:	mov	x0, #0x0                   	// #0
 91c:	b	8f0 <gzfread+0x68>

0000000000000920 <gzgetc>:
 920:	cbz	x0, 998 <gzgetc+0x78>
 924:	ldr	w3, [x0, #24]
 928:	mov	w2, #0x1c4f                	// #7247
 92c:	mov	x1, x0
 930:	cmp	w3, w2
 934:	b.ne	998 <gzgetc+0x78>  // b.any
 938:	ldr	w2, [x0, #108]
 93c:	cmp	w2, #0x0
 940:	ccmn	w2, #0x5, #0x4, ne  // ne = any
 944:	b.ne	998 <gzgetc+0x78>  // b.any
 948:	ldr	w2, [x0]
 94c:	cbz	w2, 970 <gzgetc+0x50>
 950:	ldp	x3, x0, [x0, #8]
 954:	sub	w2, w2, #0x1
 958:	str	w2, [x1]
 95c:	add	x4, x3, #0x1
 960:	add	x0, x0, #0x1
 964:	stp	x4, x0, [x1, #8]
 968:	ldrb	w0, [x3]
 96c:	ret
 970:	stp	x29, x30, [sp, #-32]!
 974:	mov	x2, #0x1                   	// #1
 978:	mov	x29, sp
 97c:	add	x1, sp, #0x18
 980:	bl	658 <gz_read>
 984:	cmp	w0, #0x0
 988:	b.le	9a0 <gzgetc+0x80>
 98c:	ldrb	w0, [sp, #24]
 990:	ldp	x29, x30, [sp], #32
 994:	ret
 998:	mov	w0, #0xffffffff            	// #-1
 99c:	ret
 9a0:	mov	w0, #0xffffffff            	// #-1
 9a4:	b	990 <gzgetc+0x70>

00000000000009a8 <gzgetc_>:
 9a8:	b	920 <gzgetc>
 9ac:	nop

00000000000009b0 <gzungetc>:
 9b0:	cbz	x1, af8 <gzungetc+0x148>
 9b4:	stp	x29, x30, [sp, #-32]!
 9b8:	mov	x29, sp
 9bc:	stp	x19, x20, [sp, #16]
 9c0:	mov	x19, x1
 9c4:	ldr	w1, [x1, #24]
 9c8:	mov	w20, w0
 9cc:	mov	w0, #0x1c4f                	// #7247
 9d0:	cmp	w1, w0
 9d4:	b.ne	a68 <gzungetc+0xb8>  // b.any
 9d8:	ldr	w0, [x19, #108]
 9dc:	cmp	w0, #0x0
 9e0:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 9e4:	b.ne	a68 <gzungetc+0xb8>  // b.any
 9e8:	ldr	w0, [x19, #104]
 9ec:	cbnz	w0, a50 <gzungetc+0xa0>
 9f0:	tbnz	w20, #31, a68 <gzungetc+0xb8>
 9f4:	ldr	w3, [x19]
 9f8:	ldr	w0, [x19, #40]
 9fc:	lsl	w0, w0, #1
 a00:	cbz	w3, a70 <gzungetc+0xc0>
 a04:	cmp	w3, w0
 a08:	b.eq	adc <gzungetc+0x12c>  // b.none
 a0c:	ldr	x1, [x19, #8]
 a10:	ldr	x4, [x19, #56]
 a14:	cmp	x1, x4
 a18:	b.eq	aac <gzungetc+0xfc>  // b.none
 a1c:	sub	x2, x1, #0x1
 a20:	add	w3, w3, #0x1
 a24:	str	w3, [x19]
 a28:	mov	w0, w20
 a2c:	str	x2, [x19, #8]
 a30:	sturb	w20, [x1, #-1]
 a34:	str	wzr, [x19, #84]
 a38:	ldr	x1, [x19, #16]
 a3c:	sub	x1, x1, #0x1
 a40:	str	x1, [x19, #16]
 a44:	ldp	x19, x20, [sp, #16]
 a48:	ldp	x29, x30, [sp], #32
 a4c:	ret
 a50:	ldr	x1, [x19, #96]
 a54:	str	wzr, [x19, #104]
 a58:	mov	x0, x19
 a5c:	bl	5c0 <gz_skip>
 a60:	cmn	w0, #0x1
 a64:	b.ne	9f0 <gzungetc+0x40>  // b.any
 a68:	mov	w0, #0xffffffff            	// #-1
 a6c:	b	a44 <gzungetc+0x94>
 a70:	ldr	x2, [x19, #56]
 a74:	sub	x1, x0, #0x1
 a78:	mov	w3, #0x1                   	// #1
 a7c:	str	w3, [x19]
 a80:	add	x3, x2, x1
 a84:	str	x3, [x19, #8]
 a88:	strb	w20, [x2, x1]
 a8c:	mov	w0, w20
 a90:	str	wzr, [x19, #84]
 a94:	ldr	x1, [x19, #16]
 a98:	sub	x1, x1, #0x1
 a9c:	str	x1, [x19, #16]
 aa0:	ldp	x19, x20, [sp, #16]
 aa4:	ldp	x29, x30, [sp], #32
 aa8:	ret
 aac:	add	x2, x1, w3, uxtw
 ab0:	add	x1, x1, w0, uxtw
 ab4:	cmp	x4, x2
 ab8:	b.cs	a1c <gzungetc+0x6c>  // b.hs, b.nlast
 abc:	nop
 ac0:	ldrb	w0, [x2, #-1]!
 ac4:	strb	w0, [x1, #-1]!
 ac8:	ldr	x0, [x19, #56]
 acc:	cmp	x0, x2
 ad0:	b.cc	ac0 <gzungetc+0x110>  // b.lo, b.ul, b.last
 ad4:	ldr	w3, [x19]
 ad8:	b	a1c <gzungetc+0x6c>
 adc:	mov	x0, x19
 ae0:	adrp	x2, 0 <gz_load>
 ae4:	mov	w1, #0xfffffffd            	// #-3
 ae8:	add	x2, x2, #0x0
 aec:	bl	0 <gz_error>
 af0:	mov	w0, #0xffffffff            	// #-1
 af4:	b	a44 <gzungetc+0x94>
 af8:	mov	w0, #0xffffffff            	// #-1
 afc:	ret

0000000000000b00 <gzgets>:
 b00:	cmp	x1, #0x0
 b04:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 b08:	ccmp	x0, #0x0, #0x4, gt
 b0c:	b.eq	c74 <gzgets+0x174>  // b.none
 b10:	stp	x29, x30, [sp, #-80]!
 b14:	mov	x29, sp
 b18:	stp	x19, x20, [sp, #16]
 b1c:	mov	x19, x0
 b20:	stp	x21, x22, [sp, #32]
 b24:	mov	w21, w2
 b28:	ldr	w2, [x0, #24]
 b2c:	mov	x22, x1
 b30:	mov	w1, #0x1c4f                	// #7247
 b34:	cmp	w2, w1
 b38:	b.ne	c00 <gzgets+0x100>  // b.any
 b3c:	ldr	w1, [x0, #108]
 b40:	cmp	w1, #0x0
 b44:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 b48:	b.ne	c00 <gzgets+0x100>  // b.any
 b4c:	ldr	w1, [x0, #104]
 b50:	cbnz	w1, c7c <gzgets+0x17c>
 b54:	subs	w21, w21, #0x1
 b58:	b.eq	c00 <gzgets+0x100>  // b.none
 b5c:	ldr	w3, [x19]
 b60:	stp	x23, x24, [sp, #48]
 b64:	mov	x24, x22
 b68:	str	x25, [sp, #64]
 b6c:	cbz	w3, c50 <gzgets+0x150>
 b70:	cmp	w21, w3
 b74:	mov	w1, #0xa                   	// #10
 b78:	ldr	x25, [x19, #8]
 b7c:	csel	w23, w21, w3, ls  // ls = plast
 b80:	csel	w20, w21, w3, ls  // ls = plast
 b84:	mov	x2, x23
 b88:	mov	x0, x25
 b8c:	bl	0 <memchr>
 b90:	cbz	x0, c14 <gzgets+0x114>
 b94:	sub	x0, x0, x25
 b98:	mov	x1, x25
 b9c:	add	w21, w0, #0x1
 ba0:	add	w20, w0, #0x1
 ba4:	mov	x2, x21
 ba8:	mov	x0, x24
 bac:	bl	0 <memcpy>
 bb0:	add	x24, x24, x21
 bb4:	ldp	x1, x2, [x19, #8]
 bb8:	ldr	w0, [x19]
 bbc:	sub	w0, w0, w20
 bc0:	str	w0, [x19]
 bc4:	add	x1, x1, x21
 bc8:	add	x2, x2, x21
 bcc:	stp	x1, x2, [x19, #8]
 bd0:	cmp	x24, x22
 bd4:	b.eq	bf8 <gzgets+0xf8>  // b.none
 bd8:	strb	wzr, [x24]
 bdc:	mov	x0, x22
 be0:	ldp	x19, x20, [sp, #16]
 be4:	ldp	x21, x22, [sp, #32]
 be8:	ldp	x23, x24, [sp, #48]
 bec:	ldr	x25, [sp, #64]
 bf0:	ldp	x29, x30, [sp], #80
 bf4:	ret
 bf8:	ldp	x23, x24, [sp, #48]
 bfc:	ldr	x25, [sp, #64]
 c00:	mov	x0, #0x0                   	// #0
 c04:	ldp	x19, x20, [sp, #16]
 c08:	ldp	x21, x22, [sp, #32]
 c0c:	ldp	x29, x30, [sp], #80
 c10:	ret
 c14:	mov	x2, x23
 c18:	mov	x0, x24
 c1c:	mov	x1, x25
 c20:	bl	0 <memcpy>
 c24:	ldp	x0, x2, [x19, #8]
 c28:	add	x24, x24, x23
 c2c:	ldr	w3, [x19]
 c30:	subs	w21, w21, w20
 c34:	sub	w3, w3, w20
 c38:	str	w3, [x19]
 c3c:	add	x0, x0, x23
 c40:	add	x2, x2, x23
 c44:	stp	x0, x2, [x19, #8]
 c48:	b.eq	bd0 <gzgets+0xd0>  // b.none
 c4c:	cbnz	w3, b70 <gzgets+0x70>
 c50:	mov	x0, x19
 c54:	bl	4f0 <gz_fetch>
 c58:	cmn	w0, #0x1
 c5c:	b.eq	bf8 <gzgets+0xf8>  // b.none
 c60:	ldr	w3, [x19]
 c64:	cbnz	w3, b70 <gzgets+0x70>
 c68:	mov	w0, #0x1                   	// #1
 c6c:	str	w0, [x19, #84]
 c70:	b	bd0 <gzgets+0xd0>
 c74:	mov	x0, #0x0                   	// #0
 c78:	ret
 c7c:	ldr	x1, [x0, #96]
 c80:	str	wzr, [x0, #104]
 c84:	bl	5c0 <gz_skip>
 c88:	cmn	w0, #0x1
 c8c:	b.ne	b54 <gzgets+0x54>  // b.any
 c90:	b	c00 <gzgets+0x100>
 c94:	nop

0000000000000c98 <gzdirect>:
 c98:	cbz	x0, ce4 <gzdirect+0x4c>
 c9c:	stp	x29, x30, [sp, #-32]!
 ca0:	mov	w1, #0x1c4f                	// #7247
 ca4:	mov	x29, sp
 ca8:	ldr	w2, [x0, #24]
 cac:	str	x19, [sp, #16]
 cb0:	mov	x19, x0
 cb4:	cmp	w2, w1
 cb8:	b.eq	ccc <gzdirect+0x34>  // b.none
 cbc:	ldr	w0, [x19, #64]
 cc0:	ldr	x19, [sp, #16]
 cc4:	ldp	x29, x30, [sp], #32
 cc8:	ret
 ccc:	ldr	w1, [x0, #68]
 cd0:	cbnz	w1, cbc <gzdirect+0x24>
 cd4:	ldr	w1, [x0]
 cd8:	cbnz	w1, cbc <gzdirect+0x24>
 cdc:	bl	1a8 <gz_look>
 ce0:	b	cbc <gzdirect+0x24>
 ce4:	mov	w0, #0x0                   	// #0
 ce8:	ret
 cec:	nop

0000000000000cf0 <gzclose_r>:
 cf0:	stp	x29, x30, [sp, #-48]!
 cf4:	mov	x29, sp
 cf8:	stp	x19, x20, [sp, #16]
 cfc:	cbz	x0, d90 <gzclose_r+0xa0>
 d00:	mov	x19, x0
 d04:	mov	w0, #0x1c4f                	// #7247
 d08:	ldr	w1, [x19, #24]
 d0c:	cmp	w1, w0
 d10:	b.ne	d90 <gzclose_r+0xa0>  // b.any
 d14:	ldr	w0, [x19, #40]
 d18:	str	x21, [sp, #32]
 d1c:	cbnz	w0, d74 <gzclose_r+0x84>
 d20:	ldr	w20, [x19, #108]
 d24:	mov	x2, #0x0                   	// #0
 d28:	mov	w1, #0x0                   	// #0
 d2c:	mov	x0, x19
 d30:	cmn	w20, #0x5
 d34:	csel	w20, w20, wzr, eq  // eq = none
 d38:	bl	0 <gz_error>
 d3c:	ldr	x0, [x19, #32]
 d40:	bl	0 <free>
 d44:	ldr	w0, [x19, #28]
 d48:	bl	0 <close>
 d4c:	mov	w21, w0
 d50:	mov	x0, x19
 d54:	bl	0 <free>
 d58:	cmp	w21, #0x0
 d5c:	ldr	x21, [sp, #32]
 d60:	csinv	w20, w20, wzr, eq  // eq = none
 d64:	mov	w0, w20
 d68:	ldp	x19, x20, [sp, #16]
 d6c:	ldp	x29, x30, [sp], #48
 d70:	ret
 d74:	add	x0, x19, #0x78
 d78:	bl	0 <inflateEnd>
 d7c:	ldr	x0, [x19, #56]
 d80:	bl	0 <free>
 d84:	ldr	x0, [x19, #48]
 d88:	bl	0 <free>
 d8c:	b	d20 <gzclose_r+0x30>
 d90:	mov	w20, #0xfffffffe            	// #-2
 d94:	b	d64 <gzclose_r+0x74>

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_init>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	x21, [sp, #32]
  14:	ldr	w21, [x0, #44]
  18:	lsl	w0, w21, #1
  1c:	bl	0 <malloc>
  20:	str	x0, [x19, #48]
  24:	cbz	x0, f8 <gz_init+0xf8>
  28:	mov	x20, x0
  2c:	ldr	w0, [x19, #64]
  30:	cbz	w0, 4c <gz_init+0x4c>
  34:	mov	w0, #0x0                   	// #0
  38:	str	w21, [x19, #40]
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldr	x21, [sp, #32]
  44:	ldp	x29, x30, [sp], #48
  48:	ret
  4c:	mov	w0, w21
  50:	bl	0 <malloc>
  54:	str	x0, [x19, #56]
  58:	cbz	x0, f0 <gz_init+0xf0>
  5c:	add	x20, x19, #0x78
  60:	adrp	x6, 0 <gz_init>
  64:	ldp	w1, w5, [x19, #88]
  68:	mov	w4, #0x8                   	// #8
  6c:	stp	xzr, xzr, [x20, #64]
  70:	mov	x0, x20
  74:	add	x6, x6, #0x0
  78:	str	xzr, [x20, #80]
  7c:	mov	w2, w4
  80:	mov	w7, #0x70                  	// #112
  84:	mov	w3, #0x1f                  	// #31
  88:	bl	0 <deflateInit2_>
  8c:	cbnz	w0, c4 <gz_init+0xc4>
  90:	ldr	w0, [x19, #64]
  94:	ldr	w2, [x19, #44]
  98:	str	w2, [x19, #40]
  9c:	str	xzr, [x19, #120]
  a0:	cbnz	w0, 114 <gz_init+0x114>
  a4:	ldr	x1, [x19, #56]
  a8:	str	x1, [x20, #24]
  ac:	str	w2, [x20, #32]
  b0:	str	x1, [x19, #8]
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldr	x21, [sp, #32]
  bc:	ldp	x29, x30, [sp], #48
  c0:	ret
  c4:	ldr	x0, [x19, #56]
  c8:	bl	0 <free>
  cc:	ldr	x0, [x19, #48]
  d0:	bl	0 <free>
  d4:	mov	x0, x19
  d8:	adrp	x2, 0 <gz_init>
  dc:	mov	w1, #0xfffffffc            	// #-4
  e0:	add	x2, x2, #0x0
  e4:	bl	0 <gz_error>
  e8:	mov	w0, #0xffffffff            	// #-1
  ec:	b	3c <gz_init+0x3c>
  f0:	mov	x0, x20
  f4:	bl	0 <free>
  f8:	mov	x0, x19
  fc:	adrp	x2, 0 <gz_init>
 100:	mov	w1, #0xfffffffc            	// #-4
 104:	add	x2, x2, #0x0
 108:	bl	0 <gz_error>
 10c:	mov	w0, #0xffffffff            	// #-1
 110:	b	3c <gz_init+0x3c>
 114:	mov	w0, #0x0                   	// #0
 118:	b	3c <gz_init+0x3c>
 11c:	nop

0000000000000120 <gz_comp>:
 120:	stp	x29, x30, [sp, #-64]!
 124:	mov	x29, sp
 128:	stp	x21, x22, [sp, #32]
 12c:	mov	w22, w1
 130:	ldr	w1, [x0, #40]
 134:	stp	x19, x20, [sp, #16]
 138:	mov	x19, x0
 13c:	stp	x23, x24, [sp, #48]
 140:	cbz	w1, 2e8 <gz_comp+0x1c8>
 144:	ldr	w23, [x19, #64]
 148:	cbz	w23, 1cc <gz_comp+0xac>
 14c:	ldr	w2, [x19, #128]
 150:	add	x20, x19, #0x78
 154:	cbz	w2, 21c <gz_comp+0xfc>
 158:	mov	w21, #0x40000000            	// #1073741824
 15c:	ldr	x1, [x19, #120]
 160:	b	180 <gz_comp+0x60>
 164:	ldr	x1, [x20]
 168:	ldr	w2, [x20, #8]
 16c:	add	x1, x1, w0, sxtw
 170:	sub	w2, w2, w0
 174:	str	x1, [x20]
 178:	str	w2, [x20, #8]
 17c:	cbz	w2, 21c <gz_comp+0xfc>
 180:	ldr	w0, [x19, #28]
 184:	cmp	w2, w21
 188:	csel	w2, w2, w21, ls  // ls = plast
 18c:	bl	0 <write>
 190:	tbz	w0, #31, 164 <gz_comp+0x44>
 194:	bl	0 <__errno_location>
 198:	ldr	w0, [x0]
 19c:	mov	w23, #0xffffffff            	// #-1
 1a0:	bl	0 <strerror>
 1a4:	mov	x2, x0
 1a8:	mov	w1, w23
 1ac:	mov	x0, x19
 1b0:	bl	0 <gz_error>
 1b4:	mov	w0, w23
 1b8:	ldp	x19, x20, [sp, #16]
 1bc:	ldp	x21, x22, [sp, #32]
 1c0:	ldp	x23, x24, [sp, #48]
 1c4:	ldp	x29, x30, [sp], #64
 1c8:	ret
 1cc:	ldr	w3, [x19, #152]
 1d0:	add	x20, x19, #0x78
 1d4:	mov	w0, #0x0                   	// #0
 1d8:	mov	x21, #0x40000000            	// #1073741824
 1dc:	cbz	w3, 2d4 <gz_comp+0x1b4>
 1e0:	cbz	w22, 1f0 <gz_comp+0xd0>
 1e4:	cmp	w22, #0x4
 1e8:	ccmp	w0, #0x1, #0x4, eq  // eq = none
 1ec:	b.eq	238 <gz_comp+0x118>  // b.none
 1f0:	mov	w24, w3
 1f4:	mov	w1, w22
 1f8:	mov	x0, x20
 1fc:	bl	0 <deflate>
 200:	cmn	w0, #0x2
 204:	b.eq	2fc <gz_comp+0x1dc>  // b.none
 208:	ldr	w3, [x20, #32]
 20c:	cmp	w3, w24
 210:	b.ne	1dc <gz_comp+0xbc>  // b.any
 214:	cmp	w22, #0x4
 218:	b.eq	318 <gz_comp+0x1f8>  // b.none
 21c:	mov	w23, #0x0                   	// #0
 220:	mov	w0, w23
 224:	ldp	x19, x20, [sp, #16]
 228:	ldp	x21, x22, [sp, #32]
 22c:	ldp	x23, x24, [sp, #48]
 230:	ldp	x29, x30, [sp], #64
 234:	ret
 238:	ldr	x1, [x19, #8]
 23c:	ldr	x2, [x20, #24]
 240:	cmp	x2, x1
 244:	b.ls	1f0 <gz_comp+0xd0>  // b.plast
 248:	sub	x2, x2, x1
 24c:	ldr	w0, [x19, #28]
 250:	cmp	x2, x21
 254:	csel	x2, x2, x21, le
 258:	mov	w2, w2
 25c:	bl	0 <write>
 260:	tbnz	w0, #31, 194 <gz_comp+0x74>
 264:	ldr	x1, [x19, #8]
 268:	ldr	x2, [x20, #24]
 26c:	add	x1, x1, w0, sxtw
 270:	str	x1, [x19, #8]
 274:	cmp	x1, x2
 278:	b.cs	2b4 <gz_comp+0x194>  // b.hs, b.nlast
 27c:	nop
 280:	sub	x2, x2, x1
 284:	ldr	w0, [x19, #28]
 288:	cmp	x2, x21
 28c:	csel	x2, x2, x21, le
 290:	mov	w2, w2
 294:	bl	0 <write>
 298:	tbnz	w0, #31, 194 <gz_comp+0x74>
 29c:	ldr	x1, [x19, #8]
 2a0:	ldr	x2, [x20, #24]
 2a4:	add	x1, x1, w0, sxtw
 2a8:	str	x1, [x19, #8]
 2ac:	cmp	x1, x2
 2b0:	b.cc	280 <gz_comp+0x160>  // b.lo, b.ul, b.last
 2b4:	ldr	w24, [x20, #32]
 2b8:	cbnz	w24, 1f4 <gz_comp+0xd4>
 2bc:	ldr	w24, [x19, #40]
 2c0:	ldr	x0, [x19, #56]
 2c4:	str	x0, [x20, #24]
 2c8:	str	w24, [x20, #32]
 2cc:	str	x0, [x19, #8]
 2d0:	b	1f4 <gz_comp+0xd4>
 2d4:	ldr	x1, [x19, #8]
 2d8:	ldr	x2, [x20, #24]
 2dc:	cmp	x2, x1
 2e0:	b.hi	280 <gz_comp+0x160>  // b.pmore
 2e4:	b	2bc <gz_comp+0x19c>
 2e8:	bl	0 <gz_init>
 2ec:	mov	w23, w0
 2f0:	cmn	w0, #0x1
 2f4:	b.ne	144 <gz_comp+0x24>  // b.any
 2f8:	b	1b4 <gz_comp+0x94>
 2fc:	mov	w1, w0
 300:	adrp	x2, 0 <gz_init>
 304:	mov	x0, x19
 308:	add	x2, x2, #0x0
 30c:	mov	w23, #0xffffffff            	// #-1
 310:	bl	0 <gz_error>
 314:	b	1b4 <gz_comp+0x94>
 318:	mov	x0, x20
 31c:	bl	0 <deflateReset>
 320:	b	1b4 <gz_comp+0x94>
 324:	nop

0000000000000328 <gz_zero>:
 328:	stp	x29, x30, [sp, #-64]!
 32c:	mov	x29, sp
 330:	str	x23, [sp, #48]
 334:	add	x23, x0, #0x78
 338:	stp	x19, x20, [sp, #16]
 33c:	mov	x20, x1
 340:	mov	x19, x0
 344:	ldr	w1, [x23, #8]
 348:	cbnz	w1, 3f4 <gz_zero+0xcc>
 34c:	mov	w1, #0x1                   	// #1
 350:	cbz	x20, 3c8 <gz_zero+0xa0>
 354:	stp	x21, x22, [sp, #32]
 358:	b	390 <gz_zero+0x68>
 35c:	ldr	x2, [x19, #16]
 360:	str	x0, [x23]
 364:	str	w21, [x23, #8]
 368:	mov	x0, x19
 36c:	add	x2, x2, x22
 370:	str	x2, [x19, #16]
 374:	mov	w1, #0x0                   	// #0
 378:	bl	120 <gz_comp>
 37c:	cmn	w0, #0x1
 380:	b.eq	3dc <gz_zero+0xb4>  // b.none
 384:	subs	x20, x20, x22
 388:	mov	w1, #0x0                   	// #0
 38c:	b.eq	3c4 <gz_zero+0x9c>  // b.none
 390:	ldr	w21, [x19, #40]
 394:	mov	w22, w21
 398:	cmp	x20, w21, uxtw
 39c:	b.ge	3a8 <gz_zero+0x80>  // b.tcont
 3a0:	mov	w21, w20
 3a4:	and	x22, x20, #0xffffffff
 3a8:	ldr	x0, [x19, #48]
 3ac:	cbz	w1, 35c <gz_zero+0x34>
 3b0:	mov	w2, w21
 3b4:	mov	w1, #0x0                   	// #0
 3b8:	bl	0 <memset>
 3bc:	ldr	x0, [x19, #48]
 3c0:	b	35c <gz_zero+0x34>
 3c4:	ldp	x21, x22, [sp, #32]
 3c8:	mov	w0, #0x0                   	// #0
 3cc:	ldp	x19, x20, [sp, #16]
 3d0:	ldr	x23, [sp, #48]
 3d4:	ldp	x29, x30, [sp], #64
 3d8:	ret
 3dc:	ldp	x21, x22, [sp, #32]
 3e0:	mov	w0, #0xffffffff            	// #-1
 3e4:	ldp	x19, x20, [sp, #16]
 3e8:	ldr	x23, [sp, #48]
 3ec:	ldp	x29, x30, [sp], #64
 3f0:	ret
 3f4:	mov	w1, #0x0                   	// #0
 3f8:	bl	120 <gz_comp>
 3fc:	cmn	w0, #0x1
 400:	b.ne	34c <gz_zero+0x24>  // b.any
 404:	mov	w0, #0xffffffff            	// #-1
 408:	b	3e4 <gz_zero+0xbc>
 40c:	nop

0000000000000410 <gz_write>:
 410:	stp	x29, x30, [sp, #-80]!
 414:	mov	x29, sp
 418:	stp	x23, x24, [sp, #48]
 41c:	cbz	x2, 550 <gz_write+0x140>
 420:	mov	x23, x1
 424:	ldr	w1, [x0, #40]
 428:	stp	x19, x20, [sp, #16]
 42c:	mov	x24, x2
 430:	mov	x19, x0
 434:	cbz	w1, 564 <gz_write+0x154>
 438:	ldr	w0, [x19, #104]
 43c:	cbnz	w0, 578 <gz_write+0x168>
 440:	ldr	w20, [x19, #40]
 444:	ldr	w3, [x19, #128]
 448:	cmp	x24, w20, uxtw
 44c:	b.cs	4e0 <gz_write+0xd0>  // b.hs, b.nlast
 450:	stp	x21, x22, [sp, #32]
 454:	mov	x21, x24
 458:	str	x25, [sp, #64]
 45c:	nop
 460:	ldr	x2, [x19, #48]
 464:	cbz	w3, 5a4 <gz_write+0x194>
 468:	ldr	x0, [x19, #120]
 46c:	add	x3, x0, w3, uxtw
 470:	sub	x0, x3, x2
 474:	mov	x1, x23
 478:	sub	w25, w20, w0
 47c:	sub	w20, w20, w0
 480:	cmp	x25, x21
 484:	add	x0, x2, w0, uxtw
 488:	mov	x22, x25
 48c:	b.ls	49c <gz_write+0x8c>  // b.plast
 490:	mov	w25, w21
 494:	and	x22, x21, #0xffffffff
 498:	mov	x20, x25
 49c:	mov	x2, x22
 4a0:	bl	0 <memcpy>
 4a4:	ldr	x0, [x19, #16]
 4a8:	subs	x21, x21, x22
 4ac:	ldr	w1, [x19, #128]
 4b0:	add	x25, x0, x25
 4b4:	str	x25, [x19, #16]
 4b8:	add	w20, w1, w20
 4bc:	str	w20, [x19, #128]
 4c0:	b.ne	5b0 <gz_write+0x1a0>  // b.any
 4c4:	mov	x0, x24
 4c8:	ldp	x19, x20, [sp, #16]
 4cc:	ldp	x21, x22, [sp, #32]
 4d0:	ldp	x23, x24, [sp, #48]
 4d4:	ldr	x25, [sp, #64]
 4d8:	ldp	x29, x30, [sp], #80
 4dc:	ret
 4e0:	cbz	w3, 4f8 <gz_write+0xe8>
 4e4:	mov	x0, x19
 4e8:	mov	w1, #0x0                   	// #0
 4ec:	bl	120 <gz_comp>
 4f0:	cmn	w0, #0x1
 4f4:	b.eq	570 <gz_write+0x160>  // b.none
 4f8:	mov	x20, x24
 4fc:	stp	x21, x22, [sp, #32]
 500:	mov	x22, #0xfffffffe            	// #4294967294
 504:	str	x25, [sp, #64]
 508:	mov	x21, #0xffffffff            	// #4294967295
 50c:	mov	w25, #0xffffffff            	// #-1
 510:	str	x23, [x19, #120]
 514:	nop
 518:	mov	x0, x19
 51c:	cmp	x20, x22
 520:	mov	w1, #0x0                   	// #0
 524:	ldr	x2, [x19, #16]
 528:	b.hi	5d4 <gz_write+0x1c4>  // b.pmore
 52c:	str	w20, [x19, #128]
 530:	add	x20, x2, x20
 534:	str	x20, [x19, #16]
 538:	bl	120 <gz_comp>
 53c:	cmn	w0, #0x1
 540:	b.ne	4c4 <gz_write+0xb4>  // b.any
 544:	ldp	x19, x20, [sp, #16]
 548:	ldp	x21, x22, [sp, #32]
 54c:	ldr	x25, [sp, #64]
 550:	mov	x24, #0x0                   	// #0
 554:	mov	x0, x24
 558:	ldp	x23, x24, [sp, #48]
 55c:	ldp	x29, x30, [sp], #80
 560:	ret
 564:	bl	0 <gz_init>
 568:	cmn	w0, #0x1
 56c:	b.ne	438 <gz_write+0x28>  // b.any
 570:	ldp	x19, x20, [sp, #16]
 574:	b	550 <gz_write+0x140>
 578:	ldr	x1, [x19, #96]
 57c:	str	wzr, [x19, #104]
 580:	mov	x0, x19
 584:	bl	328 <gz_zero>
 588:	cmn	w0, #0x1
 58c:	b.eq	570 <gz_write+0x160>  // b.none
 590:	ldr	w20, [x19, #40]
 594:	ldr	w3, [x19, #128]
 598:	cmp	x24, w20, uxtw
 59c:	b.cc	450 <gz_write+0x40>  // b.lo, b.ul, b.last
 5a0:	b	4e0 <gz_write+0xd0>
 5a4:	mov	x0, x2
 5a8:	str	x2, [x19, #120]
 5ac:	b	46c <gz_write+0x5c>
 5b0:	mov	x0, x19
 5b4:	mov	w1, #0x0                   	// #0
 5b8:	bl	120 <gz_comp>
 5bc:	cmn	w0, #0x1
 5c0:	b.eq	544 <gz_write+0x134>  // b.none
 5c4:	ldr	w20, [x19, #40]
 5c8:	add	x23, x23, x22
 5cc:	ldr	w3, [x19, #128]
 5d0:	b	460 <gz_write+0x50>
 5d4:	add	x2, x2, x21
 5d8:	str	x2, [x19, #16]
 5dc:	str	w25, [x19, #128]
 5e0:	bl	120 <gz_comp>
 5e4:	cmn	w0, #0x1
 5e8:	b.eq	544 <gz_write+0x134>  // b.none
 5ec:	subs	x20, x20, x21
 5f0:	b.ne	518 <gz_write+0x108>  // b.any
 5f4:	b	4c4 <gz_write+0xb4>

00000000000005f8 <gzwrite>:
 5f8:	stp	x29, x30, [sp, #-32]!
 5fc:	mov	x29, sp
 600:	str	x19, [sp, #16]
 604:	cbz	x0, 644 <gzwrite+0x4c>
 608:	ldr	w5, [x0, #24]
 60c:	mov	w4, #0x79b1                	// #31153
 610:	mov	w19, #0x0                   	// #0
 614:	cmp	w5, w4
 618:	b.ne	634 <gzwrite+0x3c>  // b.any
 61c:	ldr	w19, [x0, #108]
 620:	cbnz	w19, 644 <gzwrite+0x4c>
 624:	tbnz	w2, #31, 658 <gzwrite+0x60>
 628:	mov	w2, w2
 62c:	bl	410 <gz_write>
 630:	mov	w19, w0
 634:	mov	w0, w19
 638:	ldr	x19, [sp, #16]
 63c:	ldp	x29, x30, [sp], #32
 640:	ret
 644:	mov	w19, #0x0                   	// #0
 648:	mov	w0, w19
 64c:	ldr	x19, [sp, #16]
 650:	ldp	x29, x30, [sp], #32
 654:	ret
 658:	adrp	x2, 0 <gz_init>
 65c:	mov	w1, #0xfffffffd            	// #-3
 660:	add	x2, x2, #0x0
 664:	bl	0 <gz_error>
 668:	b	634 <gzwrite+0x3c>
 66c:	nop

0000000000000670 <gzfwrite>:
 670:	cbz	x3, 6dc <gzfwrite+0x6c>
 674:	stp	x29, x30, [sp, #-32]!
 678:	mov	x4, x0
 67c:	mov	x0, #0x0                   	// #0
 680:	mov	x29, sp
 684:	ldr	w5, [x3, #24]
 688:	str	x19, [sp, #16]
 68c:	mov	x19, x1
 690:	mov	w1, #0x79b1                	// #31153
 694:	cmp	w5, w1
 698:	b.ne	6d0 <gzfwrite+0x60>  // b.any
 69c:	ldr	w1, [x3, #108]
 6a0:	cbnz	w1, 6d0 <gzfwrite+0x60>
 6a4:	cbz	x19, 6d0 <gzfwrite+0x60>
 6a8:	mul	x0, x2, x19
 6ac:	udiv	x1, x0, x19
 6b0:	cmp	x1, x2
 6b4:	b.ne	6e4 <gzfwrite+0x74>  // b.any
 6b8:	cbz	x0, 6d0 <gzfwrite+0x60>
 6bc:	mov	x2, x0
 6c0:	mov	x1, x4
 6c4:	mov	x0, x3
 6c8:	bl	410 <gz_write>
 6cc:	udiv	x0, x0, x19
 6d0:	ldr	x19, [sp, #16]
 6d4:	ldp	x29, x30, [sp], #32
 6d8:	ret
 6dc:	mov	x0, #0x0                   	// #0
 6e0:	ret
 6e4:	mov	x0, x3
 6e8:	adrp	x2, 0 <gz_init>
 6ec:	mov	w1, #0xfffffffe            	// #-2
 6f0:	add	x2, x2, #0x0
 6f4:	bl	0 <gz_error>
 6f8:	mov	x0, #0x0                   	// #0
 6fc:	b	6d0 <gzfwrite+0x60>

0000000000000700 <gzputc>:
 700:	cbz	x0, 7e8 <gzputc+0xe8>
 704:	stp	x29, x30, [sp, #-48]!
 708:	mov	x29, sp
 70c:	ldr	w2, [x0, #24]
 710:	stp	x19, x20, [sp, #16]
 714:	mov	w20, w1
 718:	mov	x19, x0
 71c:	mov	w1, #0x79b1                	// #31153
 720:	cmp	w2, w1
 724:	b.ne	7e0 <gzputc+0xe0>  // b.any
 728:	ldr	w1, [x0, #108]
 72c:	cbnz	w1, 7e0 <gzputc+0xe0>
 730:	ldr	w1, [x0, #104]
 734:	cbnz	w1, 7cc <gzputc+0xcc>
 738:	ldr	w1, [x19, #40]
 73c:	and	w3, w20, #0xff
 740:	cbz	w1, 794 <gzputc+0x94>
 744:	ldr	w0, [x19, #128]
 748:	add	x4, x19, #0x78
 74c:	ldr	x2, [x19, #48]
 750:	cbz	w0, 7c0 <gzputc+0xc0>
 754:	ldr	x5, [x19, #120]
 758:	add	x0, x5, w0, uxtw
 75c:	sub	x0, x0, x2
 760:	cmp	w1, w0
 764:	b.ls	794 <gzputc+0x94>  // b.plast
 768:	strb	w3, [x2, w0, uxtw]
 76c:	and	w0, w20, #0xff
 770:	ldr	w2, [x4, #8]
 774:	ldr	x1, [x19, #16]
 778:	add	w2, w2, #0x1
 77c:	str	w2, [x4, #8]
 780:	add	x1, x1, #0x1
 784:	str	x1, [x19, #16]
 788:	ldp	x19, x20, [sp, #16]
 78c:	ldp	x29, x30, [sp], #48
 790:	ret
 794:	mov	x0, x19
 798:	add	x1, sp, #0x28
 79c:	mov	x2, #0x1                   	// #1
 7a0:	strb	w3, [sp, #40]
 7a4:	bl	410 <gz_write>
 7a8:	cmp	x0, #0x1
 7ac:	b.ne	7e0 <gzputc+0xe0>  // b.any
 7b0:	and	w0, w20, #0xff
 7b4:	ldp	x19, x20, [sp, #16]
 7b8:	ldp	x29, x30, [sp], #48
 7bc:	ret
 7c0:	mov	x5, x2
 7c4:	str	x2, [x19, #120]
 7c8:	b	758 <gzputc+0x58>
 7cc:	ldr	x1, [x0, #96]
 7d0:	str	wzr, [x0, #104]
 7d4:	bl	328 <gz_zero>
 7d8:	cmn	w0, #0x1
 7dc:	b.ne	738 <gzputc+0x38>  // b.any
 7e0:	mov	w0, #0xffffffff            	// #-1
 7e4:	b	7b4 <gzputc+0xb4>
 7e8:	mov	w0, #0xffffffff            	// #-1
 7ec:	ret

00000000000007f0 <gzputs>:
 7f0:	cbz	x0, 85c <gzputs+0x6c>
 7f4:	stp	x29, x30, [sp, #-32]!
 7f8:	mov	x29, sp
 7fc:	stp	x19, x20, [sp, #16]
 800:	mov	x19, x0
 804:	mov	x20, x1
 808:	mov	w0, #0x79b1                	// #31153
 80c:	ldr	w1, [x19, #24]
 810:	cmp	w1, w0
 814:	b.ne	854 <gzputs+0x64>  // b.any
 818:	ldr	w0, [x19, #108]
 81c:	cbnz	w0, 854 <gzputs+0x64>
 820:	mov	x0, x20
 824:	bl	0 <strlen>
 828:	mov	x1, x20
 82c:	mov	x20, x0
 830:	mov	x2, x20
 834:	mov	x0, x19
 838:	bl	410 <gz_write>
 83c:	cmp	w0, #0x0
 840:	ccmp	x20, #0x0, #0x4, eq  // eq = none
 844:	b.ne	854 <gzputs+0x64>  // b.any
 848:	ldp	x19, x20, [sp, #16]
 84c:	ldp	x29, x30, [sp], #32
 850:	ret
 854:	mov	w0, #0xffffffff            	// #-1
 858:	b	848 <gzputs+0x58>
 85c:	mov	w0, #0xffffffff            	// #-1
 860:	ret
 864:	nop

0000000000000868 <gzvprintf>:
 868:	stp	x29, x30, [sp, #-96]!
 86c:	mov	x29, sp
 870:	stp	x19, x20, [sp, #16]
 874:	cbz	x0, a1c <gzvprintf+0x1b4>
 878:	mov	x20, x2
 87c:	ldr	w2, [x0, #24]
 880:	stp	x21, x22, [sp, #32]
 884:	mov	x19, x0
 888:	mov	x22, x1
 88c:	mov	w1, #0x79b1                	// #31153
 890:	cmp	w2, w1
 894:	b.ne	a00 <gzvprintf+0x198>  // b.any
 898:	ldr	w1, [x0, #108]
 89c:	cbnz	w1, a00 <gzvprintf+0x198>
 8a0:	ldr	w1, [x0, #40]
 8a4:	cbz	w1, 95c <gzvprintf+0xf4>
 8a8:	ldr	w0, [x19, #104]
 8ac:	cbnz	w0, 99c <gzvprintf+0x134>
 8b0:	str	x23, [sp, #48]
 8b4:	add	x23, x19, #0x78
 8b8:	ldr	w21, [x23, #8]
 8bc:	cbz	w21, 950 <gzvprintf+0xe8>
 8c0:	ldr	x1, [x19, #120]
 8c4:	add	x21, x1, w21, uxtw
 8c8:	ldr	w0, [x19, #40]
 8cc:	mov	x2, x22
 8d0:	ldp	x6, x7, [x20]
 8d4:	sub	w0, w0, #0x1
 8d8:	ldp	x4, x5, [x20, #16]
 8dc:	add	x3, sp, #0x40
 8e0:	strb	wzr, [x21, w0, uxtw]
 8e4:	mov	x0, x21
 8e8:	stp	x6, x7, [sp, #64]
 8ec:	ldr	w1, [x19, #40]
 8f0:	stp	x4, x5, [sp, #80]
 8f4:	bl	0 <vsnprintf>
 8f8:	mov	w20, w0
 8fc:	cbz	w0, 938 <gzvprintf+0xd0>
 900:	ldr	w22, [x19, #40]
 904:	cmp	w22, w0
 908:	b.ls	980 <gzvprintf+0x118>  // b.plast
 90c:	sub	w0, w22, #0x1
 910:	ldrb	w0, [x21, w0, uxtw]
 914:	cbnz	w0, 980 <gzvprintf+0x118>
 918:	ldr	x0, [x19, #16]
 91c:	ldr	w21, [x23, #8]
 920:	add	w21, w20, w21
 924:	str	w21, [x23, #8]
 928:	add	x0, x0, w20, sxtw
 92c:	str	x0, [x19, #16]
 930:	cmp	w22, w21
 934:	b.ls	9b8 <gzvprintf+0x150>  // b.plast
 938:	ldp	x21, x22, [sp, #32]
 93c:	ldr	x23, [sp, #48]
 940:	mov	w0, w20
 944:	ldp	x19, x20, [sp, #16]
 948:	ldp	x29, x30, [sp], #96
 94c:	ret
 950:	ldr	x1, [x19, #48]
 954:	str	x1, [x19, #120]
 958:	b	8c4 <gzvprintf+0x5c>
 95c:	bl	0 <gz_init>
 960:	cmn	w0, #0x1
 964:	b.ne	8a8 <gzvprintf+0x40>  // b.any
 968:	ldr	w20, [x19, #108]
 96c:	ldp	x21, x22, [sp, #32]
 970:	mov	w0, w20
 974:	ldp	x19, x20, [sp, #16]
 978:	ldp	x29, x30, [sp], #96
 97c:	ret
 980:	mov	w20, #0x0                   	// #0
 984:	mov	w0, w20
 988:	ldp	x19, x20, [sp, #16]
 98c:	ldp	x21, x22, [sp, #32]
 990:	ldr	x23, [sp, #48]
 994:	ldp	x29, x30, [sp], #96
 998:	ret
 99c:	ldr	x1, [x19, #96]
 9a0:	str	wzr, [x19, #104]
 9a4:	mov	x0, x19
 9a8:	bl	328 <gz_zero>
 9ac:	cmn	w0, #0x1
 9b0:	b.ne	8b0 <gzvprintf+0x48>  // b.any
 9b4:	b	968 <gzvprintf+0x100>
 9b8:	str	w22, [x23, #8]
 9bc:	mov	x0, x19
 9c0:	mov	w1, #0x0                   	// #0
 9c4:	bl	120 <gz_comp>
 9c8:	cmn	w0, #0x1
 9cc:	b.eq	a0c <gzvprintf+0x1a4>  // b.none
 9d0:	ldr	x0, [x19, #48]
 9d4:	sub	w2, w21, w22
 9d8:	ldr	w1, [x19, #40]
 9dc:	sub	w22, w21, w22
 9e0:	add	x1, x0, x1
 9e4:	bl	0 <memcpy>
 9e8:	ldr	x0, [x19, #48]
 9ec:	str	x0, [x19, #120]
 9f0:	str	w22, [x23, #8]
 9f4:	ldp	x21, x22, [sp, #32]
 9f8:	ldr	x23, [sp, #48]
 9fc:	b	940 <gzvprintf+0xd8>
 a00:	mov	w20, #0xfffffffe            	// #-2
 a04:	ldp	x21, x22, [sp, #32]
 a08:	b	940 <gzvprintf+0xd8>
 a0c:	ldr	w20, [x19, #108]
 a10:	ldp	x21, x22, [sp, #32]
 a14:	ldr	x23, [sp, #48]
 a18:	b	940 <gzvprintf+0xd8>
 a1c:	mov	w20, #0xfffffffe            	// #-2
 a20:	b	940 <gzvprintf+0xd8>
 a24:	nop

0000000000000a28 <gzprintf>:
 a28:	stp	x29, x30, [sp, #-256]!
 a2c:	mov	w9, #0xffffffd0            	// #-48
 a30:	mov	w8, #0xffffff80            	// #-128
 a34:	mov	x29, sp
 a38:	add	x10, sp, #0xd0
 a3c:	add	x11, sp, #0x100
 a40:	stp	x11, x11, [sp, #48]
 a44:	str	x10, [sp, #64]
 a48:	stp	w9, w8, [sp, #72]
 a4c:	ldp	x10, x11, [sp, #48]
 a50:	stp	x10, x11, [sp, #16]
 a54:	ldp	x8, x9, [sp, #64]
 a58:	stp	x8, x9, [sp, #32]
 a5c:	str	q0, [sp, #80]
 a60:	str	q1, [sp, #96]
 a64:	str	q2, [sp, #112]
 a68:	str	q3, [sp, #128]
 a6c:	str	q4, [sp, #144]
 a70:	str	q5, [sp, #160]
 a74:	str	q6, [sp, #176]
 a78:	str	q7, [sp, #192]
 a7c:	stp	x2, x3, [sp, #208]
 a80:	add	x2, sp, #0x10
 a84:	stp	x4, x5, [sp, #224]
 a88:	stp	x6, x7, [sp, #240]
 a8c:	bl	868 <gzvprintf>
 a90:	ldp	x29, x30, [sp], #256
 a94:	ret

0000000000000a98 <gzflush>:
 a98:	cbz	x0, b10 <gzflush+0x78>
 a9c:	stp	x29, x30, [sp, #-32]!
 aa0:	mov	x29, sp
 aa4:	ldr	w2, [x0, #24]
 aa8:	stp	x19, x20, [sp, #16]
 aac:	mov	w20, w1
 ab0:	mov	x19, x0
 ab4:	mov	w1, #0x79b1                	// #31153
 ab8:	cmp	w2, w1
 abc:	b.ne	b08 <gzflush+0x70>  // b.any
 ac0:	ldr	w1, [x0, #108]
 ac4:	cbnz	w1, b08 <gzflush+0x70>
 ac8:	cmp	w20, #0x4
 acc:	b.hi	b08 <gzflush+0x70>  // b.pmore
 ad0:	ldr	w1, [x0, #104]
 ad4:	cbz	w1, aec <gzflush+0x54>
 ad8:	ldr	x1, [x0, #96]
 adc:	str	wzr, [x0, #104]
 ae0:	bl	328 <gz_zero>
 ae4:	cmn	w0, #0x1
 ae8:	b.eq	af8 <gzflush+0x60>  // b.none
 aec:	mov	w1, w20
 af0:	mov	x0, x19
 af4:	bl	120 <gz_comp>
 af8:	ldr	w0, [x19, #108]
 afc:	ldp	x19, x20, [sp, #16]
 b00:	ldp	x29, x30, [sp], #32
 b04:	ret
 b08:	mov	w0, #0xfffffffe            	// #-2
 b0c:	b	afc <gzflush+0x64>
 b10:	mov	w0, #0xfffffffe            	// #-2
 b14:	ret

0000000000000b18 <gzsetparams>:
 b18:	stp	x29, x30, [sp, #-64]!
 b1c:	mov	x29, sp
 b20:	stp	x21, x22, [sp, #32]
 b24:	cbz	x0, c10 <gzsetparams+0xf8>
 b28:	stp	x19, x20, [sp, #16]
 b2c:	mov	x19, x0
 b30:	mov	w20, w1
 b34:	mov	w0, #0x79b1                	// #31153
 b38:	ldr	w1, [x19, #24]
 b3c:	cmp	w1, w0
 b40:	b.ne	c04 <gzsetparams+0xec>  // b.any
 b44:	ldr	w22, [x19, #108]
 b48:	cbnz	w22, c04 <gzsetparams+0xec>
 b4c:	ldr	w0, [x19, #88]
 b50:	mov	w21, w2
 b54:	cmp	w0, w20
 b58:	b.eq	bbc <gzsetparams+0xa4>  // b.none
 b5c:	ldr	w0, [x19, #104]
 b60:	cbnz	w0, bd0 <gzsetparams+0xb8>
 b64:	ldr	w0, [x19, #40]
 b68:	cbz	w0, ba4 <gzsetparams+0x8c>
 b6c:	str	x23, [sp, #48]
 b70:	add	x23, x19, #0x78
 b74:	ldr	w0, [x23, #8]
 b78:	cbz	w0, b90 <gzsetparams+0x78>
 b7c:	mov	x0, x19
 b80:	mov	w1, #0x5                   	// #5
 b84:	bl	120 <gz_comp>
 b88:	cmn	w0, #0x1
 b8c:	b.eq	bf4 <gzsetparams+0xdc>  // b.none
 b90:	mov	x0, x23
 b94:	mov	w2, w21
 b98:	mov	w1, w20
 b9c:	bl	0 <deflateParams>
 ba0:	ldr	x23, [sp, #48]
 ba4:	stp	w20, w21, [x19, #88]
 ba8:	ldp	x19, x20, [sp, #16]
 bac:	mov	w0, w22
 bb0:	ldp	x21, x22, [sp, #32]
 bb4:	ldp	x29, x30, [sp], #64
 bb8:	ret
 bbc:	ldr	w0, [x19, #92]
 bc0:	cmp	w0, w2
 bc4:	b.ne	b5c <gzsetparams+0x44>  // b.any
 bc8:	ldp	x19, x20, [sp, #16]
 bcc:	b	bac <gzsetparams+0x94>
 bd0:	ldr	x1, [x19, #96]
 bd4:	str	wzr, [x19, #104]
 bd8:	mov	x0, x19
 bdc:	bl	328 <gz_zero>
 be0:	cmn	w0, #0x1
 be4:	b.ne	b64 <gzsetparams+0x4c>  // b.any
 be8:	ldr	w22, [x19, #108]
 bec:	ldp	x19, x20, [sp, #16]
 bf0:	b	bac <gzsetparams+0x94>
 bf4:	ldr	w22, [x19, #108]
 bf8:	ldp	x19, x20, [sp, #16]
 bfc:	ldr	x23, [sp, #48]
 c00:	b	bac <gzsetparams+0x94>
 c04:	mov	w22, #0xfffffffe            	// #-2
 c08:	ldp	x19, x20, [sp, #16]
 c0c:	b	bac <gzsetparams+0x94>
 c10:	mov	w22, #0xfffffffe            	// #-2
 c14:	b	bac <gzsetparams+0x94>

0000000000000c18 <gzclose_w>:
 c18:	stp	x29, x30, [sp, #-32]!
 c1c:	mov	x29, sp
 c20:	stp	x19, x20, [sp, #16]
 c24:	cbz	x0, ce8 <gzclose_w+0xd0>
 c28:	ldr	w2, [x0, #24]
 c2c:	mov	w1, #0x79b1                	// #31153
 c30:	mov	x19, x0
 c34:	cmp	w2, w1
 c38:	b.ne	ce8 <gzclose_w+0xd0>  // b.any
 c3c:	ldr	w1, [x0, #104]
 c40:	cbnz	w1, cb8 <gzclose_w+0xa0>
 c44:	mov	w20, #0x0                   	// #0
 c48:	mov	x0, x19
 c4c:	mov	w1, #0x4                   	// #4
 c50:	bl	120 <gz_comp>
 c54:	cmn	w0, #0x1
 c58:	b.ne	c60 <gzclose_w+0x48>  // b.any
 c5c:	ldr	w20, [x19, #108]
 c60:	ldr	w0, [x19, #40]
 c64:	cbz	w0, c78 <gzclose_w+0x60>
 c68:	ldr	w0, [x19, #64]
 c6c:	cbz	w0, cd4 <gzclose_w+0xbc>
 c70:	ldr	x0, [x19, #48]
 c74:	bl	0 <free>
 c78:	mov	x2, #0x0                   	// #0
 c7c:	mov	w1, #0x0                   	// #0
 c80:	mov	x0, x19
 c84:	bl	0 <gz_error>
 c88:	ldr	x0, [x19, #32]
 c8c:	bl	0 <free>
 c90:	ldr	w0, [x19, #28]
 c94:	bl	0 <close>
 c98:	cmn	w0, #0x1
 c9c:	csinv	w20, w20, wzr, ne  // ne = any
 ca0:	mov	x0, x19
 ca4:	bl	0 <free>
 ca8:	mov	w0, w20
 cac:	ldp	x19, x20, [sp, #16]
 cb0:	ldp	x29, x30, [sp], #32
 cb4:	ret
 cb8:	ldr	x1, [x0, #96]
 cbc:	str	wzr, [x0, #104]
 cc0:	bl	328 <gz_zero>
 cc4:	cmn	w0, #0x1
 cc8:	b.ne	c44 <gzclose_w+0x2c>  // b.any
 ccc:	ldr	w20, [x19, #108]
 cd0:	b	c48 <gzclose_w+0x30>
 cd4:	add	x0, x19, #0x78
 cd8:	bl	0 <deflateEnd>
 cdc:	ldr	x0, [x19, #56]
 ce0:	bl	0 <free>
 ce4:	b	c70 <gzclose_w+0x58>
 ce8:	mov	w20, #0xfffffffe            	// #-2
 cec:	b	ca8 <gzclose_w+0x90>
