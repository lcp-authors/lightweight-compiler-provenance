In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_clang_-O1:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_blockSort>:
       0:	sub	sp, sp, #0x50
       4:	stp	x29, x30, [sp, #16]
       8:	stp	x24, x23, [sp, #32]
       c:	stp	x22, x21, [sp, #48]
      10:	stp	x20, x19, [sp, #64]
      14:	add	x29, sp, #0x10
      18:	ldr	w21, [x0, #108]
      1c:	ldr	x20, [x0, #56]
      20:	ldr	x23, [x0, #40]
      24:	ldr	w22, [x0, #656]
      28:	mov	w8, #0x2710                	// #10000
      2c:	mov	x19, x0
      30:	cmp	w21, w8
      34:	b.lt	bc <BZ2_blockSort+0xbc>  // b.tstop
      38:	ldr	w8, [x19, #88]
      3c:	add	w9, w21, #0x22
      40:	add	w10, w21, #0x23
      44:	tst	w9, #0x1
      48:	csel	w9, w9, w10, eq  // eq = none
      4c:	cmp	w8, #0x1
      50:	csinc	w8, w8, wzr, gt
      54:	ldr	x1, [x19, #64]
      58:	mov	w10, #0x64                  	// #100
      5c:	cmp	w8, #0x64
      60:	csel	w8, w8, w10, lt  // lt = tstop
      64:	mov	w10, #0x5556                	// #21846
      68:	movk	w10, #0x5555, lsl #16
      6c:	sub	w8, w8, #0x1
      70:	smull	x8, w8, w10
      74:	add	x2, x1, w9, sxtw
      78:	lsr	x9, x8, #63
      7c:	lsr	x8, x8, #32
      80:	add	w8, w8, w9
      84:	mul	w24, w8, w21
      88:	sub	x6, x29, #0x4
      8c:	mov	x0, x20
      90:	mov	x3, x23
      94:	mov	w4, w21
      98:	mov	w5, w22
      9c:	stur	w24, [x29, #-4]
      a0:	bl	640 <mainSort>
      a4:	cmp	w22, #0x3
      a8:	b.ge	134 <BZ2_blockSort+0x134>  // b.tcont
      ac:	ldur	w8, [x29, #-4]
      b0:	tbz	w8, #31, d0 <BZ2_blockSort+0xd0>
      b4:	cmp	w22, #0x2
      b8:	b.ge	178 <BZ2_blockSort+0x178>  // b.tcont
      bc:	ldp	x0, x1, [x19, #24]
      c0:	mov	x2, x23
      c4:	mov	w3, w21
      c8:	mov	w4, w22
      cc:	bl	198 <fallbackSort>
      d0:	ldr	w8, [x19, #108]
      d4:	mov	w9, #0xffffffff            	// #-1
      d8:	str	w9, [x19, #48]
      dc:	cmp	w8, #0x1
      e0:	b.lt	108 <BZ2_blockSort+0x108>  // b.tstop
      e4:	mov	x8, xzr
      e8:	ldr	w9, [x20, x8, lsl #2]
      ec:	cbz	w9, 104 <BZ2_blockSort+0x104>
      f0:	ldrsw	x9, [x19, #108]
      f4:	add	x8, x8, #0x1
      f8:	cmp	x8, x9
      fc:	b.lt	e8 <BZ2_blockSort+0xe8>  // b.tstop
     100:	b	108 <BZ2_blockSort+0x108>
     104:	str	w8, [x19, #48]
     108:	ldr	w8, [x19, #48]
     10c:	cmn	w8, #0x1
     110:	b.ne	11c <BZ2_blockSort+0x11c>  // b.any
     114:	mov	w0, #0x3eb                 	// #1003
     118:	bl	0 <BZ2_bz__AssertH__fail>
     11c:	ldp	x20, x19, [sp, #64]
     120:	ldp	x22, x21, [sp, #48]
     124:	ldp	x24, x23, [sp, #32]
     128:	ldp	x29, x30, [sp, #16]
     12c:	add	sp, sp, #0x50
     130:	ret
     134:	ldur	w9, [x29, #-4]
     138:	adrp	x8, 0 <stderr>
     13c:	cmp	w21, #0x0
     140:	ldr	x0, [x8]
     144:	csinc	w8, w21, wzr, ne  // ne = any
     148:	sub	w2, w24, w9
     14c:	scvtf	s0, w2
     150:	scvtf	s1, w8
     154:	fdiv	s0, s0, s1
     158:	adrp	x1, 0 <BZ2_blockSort>
     15c:	fcvt	d0, s0
     160:	add	x1, x1, #0x0
     164:	mov	w3, w21
     168:	bl	0 <fprintf>
     16c:	ldur	w8, [x29, #-4]
     170:	tbz	w8, #31, d0 <BZ2_blockSort+0xd0>
     174:	b	b4 <BZ2_blockSort+0xb4>
     178:	adrp	x8, 0 <stderr>
     17c:	ldr	x3, [x8]
     180:	adrp	x0, 0 <BZ2_blockSort>
     184:	add	x0, x0, #0x0
     188:	mov	w1, #0x35                  	// #53
     18c:	mov	w2, #0x1                   	// #1
     190:	bl	0 <fwrite>
     194:	b	bc <BZ2_blockSort+0xbc>

0000000000000198 <fallbackSort>:
     198:	stp	x29, x30, [sp, #-96]!
     19c:	stp	x28, x27, [sp, #16]
     1a0:	stp	x26, x25, [sp, #32]
     1a4:	stp	x24, x23, [sp, #48]
     1a8:	stp	x22, x21, [sp, #64]
     1ac:	stp	x20, x19, [sp, #80]
     1b0:	mov	x29, sp
     1b4:	sub	sp, sp, #0x820
     1b8:	mov	w21, w3
     1bc:	mov	x23, x2
     1c0:	mov	x19, x1
     1c4:	mov	x20, x0
     1c8:	cmp	w4, #0x4
     1cc:	str	w4, [sp, #12]
     1d0:	b.ge	5f8 <fallbackSort+0x460>  // b.tcont
     1d4:	add	x0, sp, #0x414
     1d8:	mov	w2, #0x404                 	// #1028
     1dc:	mov	w1, wzr
     1e0:	mov	w25, w21
     1e4:	add	x22, sp, #0x414
     1e8:	bl	0 <memset>
     1ec:	cmp	w21, #0x1
     1f0:	b.lt	218 <fallbackSort+0x80>  // b.tstop
     1f4:	mov	x8, x25
     1f8:	mov	x9, x19
     1fc:	ldrb	w10, [x9], #1
     200:	subs	x8, x8, #0x1
     204:	lsl	x10, x10, #2
     208:	ldr	w11, [x22, x10]
     20c:	add	w11, w11, #0x1
     210:	str	w11, [x22, x10]
     214:	b.ne	1fc <fallbackSort+0x64>  // b.any
     218:	add	x0, sp, #0x14
     21c:	add	x1, sp, #0x414
     220:	mov	w2, #0x400                 	// #1024
     224:	bl	0 <memcpy>
     228:	ldr	w9, [sp, #1044]
     22c:	mov	x8, xzr
     230:	add	x10, x22, #0x4
     234:	ldr	w11, [x10, x8]
     238:	add	w9, w11, w9
     23c:	str	w9, [x10, x8]
     240:	add	x8, x8, #0x4
     244:	cmp	x8, #0x400
     248:	b.ne	234 <fallbackSort+0x9c>  // b.any
     24c:	ldr	w15, [sp, #12]
     250:	cmp	w21, #0x1
     254:	b.lt	284 <fallbackSort+0xec>  // b.tstop
     258:	mov	x8, xzr
     25c:	add	x9, sp, #0x414
     260:	ldrb	w10, [x19, x8]
     264:	lsl	x10, x10, #2
     268:	ldrsw	x11, [x9, x10]
     26c:	sub	x11, x11, #0x1
     270:	str	w11, [x9, x10]
     274:	str	w8, [x20, x11, lsl #2]
     278:	add	x8, x8, #0x1
     27c:	cmp	x25, x8
     280:	b.ne	260 <fallbackSort+0xc8>  // b.any
     284:	cmn	w21, #0x3f
     288:	b.lt	2bc <fallbackSort+0x124>  // b.tstop
     28c:	add	w8, w21, #0x1f
     290:	cmp	w21, #0x0
     294:	csel	w8, w8, w21, lt  // lt = tstop
     298:	asr	w8, w8, #5
     29c:	cmn	w21, #0x20
     2a0:	csinc	w8, wzr, w8, le
     2a4:	lsl	x8, x8, #2
     2a8:	add	x2, x8, #0x4
     2ac:	mov	x0, x23
     2b0:	mov	w1, wzr
     2b4:	bl	0 <memset>
     2b8:	ldr	w15, [sp, #12]
     2bc:	mov	x8, xzr
     2c0:	add	x9, sp, #0x414
     2c4:	mov	w10, #0x1                   	// #1
     2c8:	ldr	w11, [x9, x8]
     2cc:	add	x8, x8, #0x4
     2d0:	cmp	x8, #0x400
     2d4:	asr	w12, w11, #5
     2d8:	sbfiz	x12, x12, #2, #32
     2dc:	ldr	w13, [x23, x12]
     2e0:	lsl	w11, w10, w11
     2e4:	orr	w11, w11, w13
     2e8:	str	w11, [x23, x12]
     2ec:	b.ne	2c8 <fallbackSort+0x130>  // b.any
     2f0:	mov	w8, wzr
     2f4:	mov	w9, #0x1                   	// #1
     2f8:	add	w10, w21, w8
     2fc:	asr	w11, w10, #5
     300:	sbfiz	x11, x11, #2, #32
     304:	ldr	w12, [x23, x11]
     308:	lsl	w13, w9, w10
     30c:	add	w10, w10, #0x1
     310:	add	w8, w8, #0x2
     314:	orr	w12, w12, w13
     318:	asr	w13, w10, #5
     31c:	sbfiz	x13, x13, #2, #32
     320:	str	w12, [x23, x11]
     324:	ldr	w11, [x23, x13]
     328:	lsl	w10, w9, w10
     32c:	cmp	w8, #0x40
     330:	bic	w10, w11, w10
     334:	str	w10, [x23, x13]
     338:	b.ne	2f8 <fallbackSort+0x160>  // b.any
     33c:	mov	w22, #0x1                   	// #1
     340:	mov	w26, #0x1                   	// #1
     344:	cmp	w15, #0x4
     348:	b.ge	520 <fallbackSort+0x388>  // b.tcont
     34c:	cmp	w21, #0x1
     350:	b.lt	390 <fallbackSort+0x1f8>  // b.tstop
     354:	mov	x8, xzr
     358:	mov	w9, wzr
     35c:	ubfx	x10, x8, #5, #27
     360:	ldr	w10, [x23, x10, lsl #2]
     364:	ldr	w11, [x20, x8, lsl #2]
     368:	lsr	w10, w10, w8
     36c:	sub	w11, w11, w26
     370:	tst	w10, #0x1
     374:	and	w12, w25, w11, asr #31
     378:	csel	w9, w9, w8, eq  // eq = none
     37c:	add	x8, x8, #0x1
     380:	add	w10, w12, w11
     384:	cmp	x25, x8
     388:	str	w9, [x19, w10, sxtw #2]
     38c:	b.ne	35c <fallbackSort+0x1c4>  // b.any
     390:	mov	w16, wzr
     394:	mov	w24, #0xffffffff            	// #-1
     398:	add	w8, w24, #0x1
     39c:	asr	w10, w8, #5
     3a0:	ldr	w10, [x23, w10, sxtw #2]
     3a4:	lsl	w11, w22, w8
     3a8:	mov	w9, w24
     3ac:	tst	w8, #0x1f
     3b0:	and	w10, w11, w10
     3b4:	b.eq	3c0 <fallbackSort+0x228>  // b.none
     3b8:	mov	w24, w8
     3bc:	cbnz	w10, 398 <fallbackSort+0x200>
     3c0:	cbz	w10, 3f8 <fallbackSort+0x260>
     3c4:	sub	w10, w9, #0x1f
     3c8:	add	w10, w10, #0x20
     3cc:	asr	w8, w10, #5
     3d0:	ldr	w11, [x23, w8, sxtw #2]
     3d4:	mov	w8, w9
     3d8:	add	w9, w9, #0x20
     3dc:	cmn	w11, #0x1
     3e0:	b.eq	3c8 <fallbackSort+0x230>  // b.none
     3e4:	add	w8, w8, #0x1
     3e8:	asr	w9, w8, #5
     3ec:	ldr	w9, [x23, w9, sxtw #2]
     3f0:	lsr	w9, w9, w8
     3f4:	tbnz	w9, #0, 3e4 <fallbackSort+0x24c>
     3f8:	cmp	w8, w21
     3fc:	b.gt	504 <fallbackSort+0x36c>
     400:	sub	w28, w8, #0x1
     404:	sub	w12, w8, #0x20
     408:	mov	w14, w28
     40c:	mov	w11, w8
     410:	asr	w9, w11, #5
     414:	ldr	w13, [x23, w9, sxtw #2]
     418:	mov	w9, w12
     41c:	lsl	w12, w22, w11
     420:	mov	w10, w14
     424:	tst	w11, #0x1f
     428:	and	w13, w12, w13
     42c:	add	w11, w11, #0x1
     430:	b.eq	440 <fallbackSort+0x2a8>  // b.none
     434:	add	w12, w9, #0x1
     438:	add	w14, w10, #0x1
     43c:	cbz	w13, 410 <fallbackSort+0x278>
     440:	cbz	w13, 44c <fallbackSort+0x2b4>
     444:	sub	w27, w11, #0x1
     448:	b	478 <fallbackSort+0x2e0>
     44c:	add	w9, w9, #0x20
     450:	asr	w11, w9, #5
     454:	ldr	w11, [x23, w11, sxtw #2]
     458:	mov	w27, w10
     45c:	add	w10, w10, #0x20
     460:	cbz	w11, 44c <fallbackSort+0x2b4>
     464:	add	w27, w27, #0x1
     468:	asr	w9, w27, #5
     46c:	ldr	w9, [x23, w9, sxtw #2]
     470:	lsr	w9, w9, w27
     474:	tbz	w9, #0, 464 <fallbackSort+0x2cc>
     478:	cmp	w27, w21
     47c:	b.gt	504 <fallbackSort+0x36c>
     480:	cmp	w27, w8
     484:	sub	w24, w27, #0x1
     488:	b.le	398 <fallbackSort+0x200>
     48c:	sub	w8, w16, w8
     490:	add	w8, w8, w24
     494:	add	w8, w8, #0x2
     498:	mov	x0, x20
     49c:	mov	x1, x19
     4a0:	mov	w2, w28
     4a4:	mov	w3, w24
     4a8:	str	w8, [sp, #16]
     4ac:	bl	e04 <fallbackQSort3>
     4b0:	sxtw	x8, w28
     4b4:	sxtw	x9, w27
     4b8:	mov	w10, #0xffffffff            	// #-1
     4bc:	b	4cc <fallbackSort+0x334>
     4c0:	add	x8, x8, #0x1
     4c4:	cmp	x8, x9
     4c8:	b.ge	4fc <fallbackSort+0x364>  // b.tcont
     4cc:	ldr	w11, [x20, x8, lsl #2]
     4d0:	ldr	w11, [x19, x11, lsl #2]
     4d4:	cmp	w10, w11
     4d8:	b.eq	4c0 <fallbackSort+0x328>  // b.none
     4dc:	asr	w10, w8, #5
     4e0:	sbfiz	x10, x10, #2, #32
     4e4:	ldr	w12, [x23, x10]
     4e8:	lsl	w13, w22, w8
     4ec:	orr	w12, w12, w13
     4f0:	str	w12, [x23, x10]
     4f4:	mov	w10, w11
     4f8:	b	4c0 <fallbackSort+0x328>
     4fc:	ldp	w15, w16, [sp, #12]
     500:	b	398 <fallbackSort+0x200>
     504:	cmp	w15, #0x4
     508:	b.ge	548 <fallbackSort+0x3b0>  // b.tcont
     50c:	lsl	w26, w26, #1
     510:	cmp	w26, w21
     514:	b.gt	570 <fallbackSort+0x3d8>
     518:	cbnz	w16, 344 <fallbackSort+0x1ac>
     51c:	b	570 <fallbackSort+0x3d8>
     520:	adrp	x8, 0 <stderr>
     524:	ldr	x0, [x8]
     528:	adrp	x1, 0 <BZ2_blockSort>
     52c:	add	x1, x1, #0x0
     530:	mov	w2, w26
     534:	bl	0 <fprintf>
     538:	ldr	w15, [sp, #12]
     53c:	cmp	w21, #0x1
     540:	b.ge	354 <fallbackSort+0x1bc>  // b.tcont
     544:	b	390 <fallbackSort+0x1f8>
     548:	adrp	x8, 0 <stderr>
     54c:	ldr	x0, [x8]
     550:	adrp	x1, 0 <BZ2_blockSort>
     554:	add	x1, x1, #0x0
     558:	mov	w2, w16
     55c:	mov	w24, w16
     560:	bl	0 <fprintf>
     564:	ldr	w15, [sp, #12]
     568:	mov	w16, w24
     56c:	b	50c <fallbackSort+0x374>
     570:	cmp	w15, #0x4
     574:	b.ge	618 <fallbackSort+0x480>  // b.tcont
     578:	cmp	w21, #0x1
     57c:	b.lt	5d8 <fallbackSort+0x440>  // b.tstop
     580:	mov	x8, xzr
     584:	mov	x11, xzr
     588:	add	x9, sp, #0x14
     58c:	sxtw	x11, w11
     590:	sub	w10, w11, #0x1
     594:	ldr	w12, [x9, x11, lsl #2]
     598:	add	x11, x11, #0x1
     59c:	add	w10, w10, #0x1
     5a0:	cbz	w12, 594 <fallbackSort+0x3fc>
     5a4:	add	x13, x9, x11, lsl #2
     5a8:	sub	w12, w12, #0x1
     5ac:	stur	w12, [x13, #-4]
     5b0:	ldr	w12, [x20, x8, lsl #2]
     5b4:	add	x8, x8, #0x1
     5b8:	sub	x11, x11, #0x1
     5bc:	cmp	x8, x25
     5c0:	strb	w11, [x19, x12]
     5c4:	b.ne	58c <fallbackSort+0x3f4>  // b.any
     5c8:	cmp	w10, #0x100
     5cc:	b.lt	5d8 <fallbackSort+0x440>  // b.tstop
     5d0:	mov	w0, #0x3ed                 	// #1005
     5d4:	bl	0 <BZ2_bz__AssertH__fail>
     5d8:	add	sp, sp, #0x820
     5dc:	ldp	x20, x19, [sp, #80]
     5e0:	ldp	x22, x21, [sp, #64]
     5e4:	ldp	x24, x23, [sp, #48]
     5e8:	ldp	x26, x25, [sp, #32]
     5ec:	ldp	x28, x27, [sp, #16]
     5f0:	ldp	x29, x30, [sp], #96
     5f4:	ret
     5f8:	adrp	x8, 0 <stderr>
     5fc:	ldr	x3, [x8]
     600:	adrp	x0, 0 <BZ2_blockSort>
     604:	add	x0, x0, #0x0
     608:	mov	w1, #0x1b                  	// #27
     60c:	mov	w2, #0x1                   	// #1
     610:	bl	0 <fwrite>
     614:	b	1d4 <fallbackSort+0x3c>
     618:	adrp	x8, 0 <stderr>
     61c:	ldr	x3, [x8]
     620:	adrp	x0, 0 <BZ2_blockSort>
     624:	add	x0, x0, #0x0
     628:	mov	w1, #0x21                  	// #33
     62c:	mov	w2, #0x1                   	// #1
     630:	bl	0 <fwrite>
     634:	cmp	w21, #0x1
     638:	b.ge	580 <fallbackSort+0x3e8>  // b.tcont
     63c:	b	5d8 <fallbackSort+0x440>

0000000000000640 <mainSort>:
     640:	stp	x29, x30, [sp, #-96]!
     644:	stp	x28, x27, [sp, #16]
     648:	stp	x26, x25, [sp, #32]
     64c:	stp	x24, x23, [sp, #48]
     650:	stp	x22, x21, [sp, #64]
     654:	stp	x20, x19, [sp, #80]
     658:	mov	x29, sp
     65c:	sub	sp, sp, #0xd50
     660:	mov	w19, w4
     664:	mov	x22, x3
     668:	mov	x23, x2
     66c:	mov	x26, x1
     670:	mov	x25, x0
     674:	cmp	w5, #0x4
     678:	str	x6, [sp, #40]
     67c:	str	w5, [sp, #52]
     680:	b.ge	da4 <mainSort+0x764>  // b.tcont
     684:	mov	w2, #0x40004               	// #262148
     688:	mov	x0, x22
     68c:	mov	w1, wzr
     690:	bl	0 <memset>
     694:	ldrb	w8, [x26]
     698:	cmp	w19, #0x4
     69c:	sub	w20, w19, #0x1
     6a0:	lsl	w8, w8, #8
     6a4:	b.lt	75c <mainSort+0x11c>  // b.tstop
     6a8:	sxtw	x9, w20
     6ac:	sub	x11, x9, #0x3
     6b0:	add	x10, x23, w20, sxtw #1
     6b4:	mov	w9, w20
     6b8:	strh	wzr, [x10]
     6bc:	add	x12, x26, x11
     6c0:	ldrb	w13, [x12, #3]
     6c4:	sub	w9, w9, #0x4
     6c8:	lsl	w13, w13, #8
     6cc:	orr	w8, w13, w8, asr #8
     6d0:	sbfiz	x13, x8, #2, #32
     6d4:	ldr	w14, [x22, x13]
     6d8:	add	w14, w14, #0x1
     6dc:	str	w14, [x22, x13]
     6e0:	sturh	wzr, [x10, #-2]
     6e4:	ldrb	w13, [x12, #2]
     6e8:	lsl	w13, w13, #8
     6ec:	orr	w8, w13, w8, asr #8
     6f0:	sbfiz	x13, x8, #2, #32
     6f4:	ldr	w14, [x22, x13]
     6f8:	add	w14, w14, #0x1
     6fc:	str	w14, [x22, x13]
     700:	sturh	wzr, [x10, #-4]
     704:	ldrb	w13, [x12, #1]
     708:	lsl	w13, w13, #8
     70c:	orr	w8, w13, w8, asr #8
     710:	sbfiz	x13, x8, #2, #32
     714:	ldr	w14, [x22, x13]
     718:	add	w14, w14, #0x1
     71c:	str	w14, [x22, x13]
     720:	sturh	wzr, [x10, #-6]
     724:	ldrb	w12, [x12]
     728:	add	x13, x11, #0x3
     72c:	sub	x11, x11, #0x4
     730:	cmp	x13, #0x6
     734:	lsl	w12, w12, #8
     738:	orr	w8, w12, w8, asr #8
     73c:	sbfiz	x12, x8, #2, #32
     740:	ldr	w14, [x22, x12]
     744:	sub	x10, x10, #0x8
     748:	add	w13, w14, #0x1
     74c:	str	w13, [x22, x12]
     750:	b.gt	6b8 <mainSort+0x78>
     754:	tbz	w9, #31, 764 <mainSort+0x124>
     758:	b	794 <mainSort+0x154>
     75c:	mov	w9, w20
     760:	tbnz	w9, #31, 794 <mainSort+0x154>
     764:	sxtw	x9, w9
     768:	strh	wzr, [x23, x9, lsl #1]
     76c:	ldrb	w10, [x26, x9]
     770:	cmp	x9, #0x0
     774:	sub	x9, x9, #0x1
     778:	lsl	w10, w10, #8
     77c:	orr	w8, w10, w8, asr #8
     780:	sbfiz	x10, x8, #2, #32
     784:	ldr	w11, [x22, x10]
     788:	add	w11, w11, #0x1
     78c:	str	w11, [x22, x10]
     790:	b.gt	768 <mainSort+0x128>
     794:	mov	x8, xzr
     798:	add	x9, x26, w19, sxtw
     79c:	add	x10, x23, w19, sxtw #1
     7a0:	ldrb	w11, [x26, x8]
     7a4:	strb	w11, [x9, x8]
     7a8:	strh	wzr, [x10, x8, lsl #1]
     7ac:	add	x8, x8, #0x1
     7b0:	cmp	x8, #0x22
     7b4:	b.ne	7a0 <mainSort+0x160>  // b.any
     7b8:	ldr	w8, [sp, #52]
     7bc:	cmp	w8, #0x4
     7c0:	b.ge	dc4 <mainSort+0x784>  // b.tcont
     7c4:	mov	x8, x22
     7c8:	ldr	w9, [x8], #4
     7cc:	mov	x10, xzr
     7d0:	ldr	w11, [x8, x10]
     7d4:	add	w9, w11, w9
     7d8:	str	w9, [x8, x10]
     7dc:	add	x10, x10, #0x4
     7e0:	cmp	x10, #0x40, lsl #12
     7e4:	b.ne	7d0 <mainSort+0x190>  // b.any
     7e8:	ldrb	w8, [x26]
     7ec:	subs	w10, w19, #0x4
     7f0:	lsl	w8, w8, #8
     7f4:	b.lt	8bc <mainSort+0x27c>  // b.tstop
     7f8:	sxtw	x11, w20
     7fc:	add	x13, x11, x26
     800:	mov	x9, xzr
     804:	sub	w12, w19, #0x2
     808:	sub	x13, x13, #0x3
     80c:	sub	w14, w19, #0x3
     810:	add	x15, x13, x9
     814:	ldrb	w16, [x15, #3]
     818:	ubfx	w8, w8, #8, #8
     81c:	add	w18, w20, w9
     820:	bfi	w8, w16, #8, #8
     824:	lsl	x8, x8, #2
     828:	ldr	w17, [x22, x8]
     82c:	sub	w17, w17, #0x1
     830:	str	w17, [x22, x8]
     834:	str	w18, [x25, w17, sxtw #2]
     838:	ldrb	w17, [x15, #2]
     83c:	lsl	x8, x16, #2
     840:	add	w18, w12, w9
     844:	bfi	x8, x17, #10, #8
     848:	ldr	w16, [x22, x8]
     84c:	sub	w16, w16, #0x1
     850:	str	w16, [x22, x8]
     854:	str	w18, [x25, w16, sxtw #2]
     858:	ldrb	w8, [x15, #1]
     85c:	lsl	x16, x17, #2
     860:	add	w18, w14, w9
     864:	bfi	x16, x8, #10, #8
     868:	ldr	w17, [x22, x16]
     86c:	sub	w17, w17, #0x1
     870:	str	w17, [x22, x16]
     874:	str	w18, [x25, w17, sxtw #2]
     878:	ldrb	w15, [x15]
     87c:	add	w16, w10, w9
     880:	sub	x9, x9, #0x4
     884:	add	x18, x11, x9
     888:	bfi	w8, w15, #8, #24
     88c:	and	x15, x8, #0xffff
     890:	lsl	x15, x15, #2
     894:	ldr	w17, [x22, x15]
     898:	add	x18, x18, #0x4
     89c:	cmp	x18, #0x6
     8a0:	sub	w17, w17, #0x1
     8a4:	str	w17, [x22, x15]
     8a8:	str	w16, [x25, w17, sxtw #2]
     8ac:	b.gt	810 <mainSort+0x1d0>
     8b0:	add	w9, w11, w9
     8b4:	tbz	w9, #31, 8c4 <mainSort+0x284>
     8b8:	b	8fc <mainSort+0x2bc>
     8bc:	mov	w9, w20
     8c0:	tbnz	w9, #31, 8fc <mainSort+0x2bc>
     8c4:	sxtw	x10, w9
     8c8:	ldrb	w11, [x26, x10]
     8cc:	ubfx	w8, w8, #8, #8
     8d0:	cmp	x10, #0x0
     8d4:	sub	x10, x10, #0x1
     8d8:	bfi	w8, w11, #8, #24
     8dc:	and	x11, x8, #0xffff
     8e0:	lsl	x11, x11, #2
     8e4:	ldr	w12, [x22, x11]
     8e8:	sub	w12, w12, #0x1
     8ec:	str	w12, [x22, x11]
     8f0:	str	w9, [x25, w12, sxtw #2]
     8f4:	sub	w9, w9, #0x1
     8f8:	b.gt	8c8 <mainSort+0x288>
     8fc:	mov	x8, xzr
     900:	movi	v0.2d, #0x0
     904:	add	x9, sp, #0x948
     908:	str	q0, [sp, #2352]
     90c:	str	q0, [sp, #2336]
     910:	str	q0, [sp, #2320]
     914:	str	q0, [sp, #2304]
     918:	str	q0, [sp, #2288]
     91c:	str	q0, [sp, #2272]
     920:	str	q0, [sp, #2256]
     924:	str	q0, [sp, #2240]
     928:	str	q0, [sp, #2224]
     92c:	str	q0, [sp, #2208]
     930:	str	q0, [sp, #2192]
     934:	str	q0, [sp, #2176]
     938:	str	q0, [sp, #2160]
     93c:	str	q0, [sp, #2144]
     940:	str	q0, [sp, #2128]
     944:	str	q0, [sp, #2112]
     948:	str	w8, [x9, x8, lsl #2]
     94c:	add	x8, x8, #0x1
     950:	cmp	x8, #0x100
     954:	b.ne	948 <mainSort+0x308>  // b.any
     958:	mov	w8, #0x5556                	// #21846
     95c:	mov	w9, #0x16c                 	// #364
     960:	movk	w8, #0x5555, lsl #16
     964:	add	x10, sp, #0x948
     968:	str	w19, [sp, #56]
     96c:	b	980 <mainSort+0x340>
     970:	sub	w9, w9, #0x3
     974:	cmp	w9, #0x2
     978:	mov	w9, w11
     97c:	b.ls	a0c <mainSort+0x3cc>  // b.plast
     980:	smull	x11, w9, w8
     984:	lsr	x12, x11, #63
     988:	lsr	x11, x11, #32
     98c:	cmp	w9, #0x2ff
     990:	add	w11, w11, w12
     994:	b.gt	970 <mainSort+0x330>
     998:	mov	w12, wzr
     99c:	sxtw	x13, w11
     9a0:	b	9b8 <mainSort+0x378>
     9a4:	cmp	x13, #0xff
     9a8:	add	x13, x13, #0x1
     9ac:	add	w12, w12, #0x1
     9b0:	str	w14, [x10, w17, sxtw #2]
     9b4:	b.ge	970 <mainSort+0x330>  // b.tcont
     9b8:	ldr	w14, [x10, x13, lsl #2]
     9bc:	lsl	w15, w14, #8
     9c0:	add	w16, w15, #0x100
     9c4:	ldr	w16, [x22, w16, sxtw #2]
     9c8:	ldr	w15, [x22, w15, sxtw #2]
     9cc:	sub	w16, w16, w15
     9d0:	mov	w15, w12
     9d4:	ldr	w18, [x10, w15, sxtw #2]
     9d8:	lsl	w17, w18, #8
     9dc:	add	w0, w17, #0x100
     9e0:	ldr	w0, [x22, w0, sxtw #2]
     9e4:	ldr	w17, [x22, w17, sxtw #2]
     9e8:	sub	w17, w0, w17
     9ec:	cmp	w17, w16
     9f0:	add	w17, w11, w15
     9f4:	b.ls	9a4 <mainSort+0x364>  // b.plast
     9f8:	subs	w15, w15, w11
     9fc:	str	w18, [x10, w17, sxtw #2]
     a00:	b.ge	9d4 <mainSort+0x394>  // b.tcont
     a04:	add	w17, w11, w15
     a08:	b	9a4 <mainSort+0x364>
     a0c:	add	x8, x22, #0x4
     a10:	mov	x19, xzr
     a14:	stp	x20, x8, [sp, #8]
     a18:	sub	x8, x25, #0x4
     a1c:	add	x15, sp, #0x440
     a20:	add	x16, sp, #0x40
     a24:	str	wzr, [sp, #60]
     a28:	str	x8, [sp]
     a2c:	b	a3c <mainSort+0x3fc>
     a30:	add	x19, x19, #0x1
     a34:	cmp	x19, #0x100
     a38:	b.eq	d78 <mainSort+0x738>  // b.none
     a3c:	add	x8, sp, #0x948
     a40:	ldr	w28, [x8, x19, lsl #2]
     a44:	mov	x27, xzr
     a48:	sxtw	x8, w28
     a4c:	stp	x19, x8, [sp, #24]
     a50:	lsl	w8, w28, #8
     a54:	add	x24, x22, w8, sxtw #2
     a58:	b	a7c <mainSort+0x43c>
     a5c:	mov	x23, x26
     a60:	mov	x26, x25
     a64:	mov	x25, x19
     a68:	add	x15, sp, #0x440
     a6c:	add	x16, sp, #0x40
     a70:	mov	w8, #0x1                   	// #1
     a74:	cbnz	w8, b18 <mainSort+0x4d8>
     a78:	b	d84 <mainSort+0x744>
     a7c:	cmp	x28, x27
     a80:	b.eq	b24 <mainSort+0x4e4>  // b.none
     a84:	ldr	w8, [x24]
     a88:	tbnz	w8, #21, b18 <mainSort+0x4d8>
     a8c:	ldr	w9, [x24, #4]
     a90:	and	w20, w8, #0xffdfffff
     a94:	and	w8, w9, #0xffdfffff
     a98:	sub	w21, w8, #0x1
     a9c:	subs	w8, w21, w20
     aa0:	b.le	a70 <mainSort+0x430>
     aa4:	ldr	w9, [sp, #52]
     aa8:	cmp	w9, #0x4
     aac:	b.ge	b38 <mainSort+0x4f8>  // b.tcont
     ab0:	mov	x19, x25
     ab4:	mov	x0, x25
     ab8:	mov	x25, x26
     abc:	mov	x1, x26
     ac0:	mov	x26, x23
     ac4:	mov	x2, x23
     ac8:	ldr	x23, [sp, #40]
     acc:	ldr	w3, [sp, #56]
     ad0:	mov	w4, w20
     ad4:	mov	w5, w21
     ad8:	mov	x6, x23
     adc:	bl	1260 <mainQSort3>
     ae0:	ldr	w9, [sp, #60]
     ae4:	ldr	w8, [x23]
     ae8:	sub	w9, w9, w20
     aec:	add	w9, w9, w21
     af0:	add	w9, w9, #0x1
     af4:	str	w9, [sp, #60]
     af8:	tbz	w8, #31, a5c <mainSort+0x41c>
     afc:	mov	w8, wzr
     b00:	mov	x23, x26
     b04:	mov	x26, x25
     b08:	mov	x25, x19
     b0c:	add	x15, sp, #0x440
     b10:	add	x16, sp, #0x40
     b14:	cbz	w8, d84 <mainSort+0x744>
     b18:	ldr	w8, [x24]
     b1c:	orr	w8, w8, #0x200000
     b20:	str	w8, [x24]
     b24:	add	x27, x27, #0x1
     b28:	cmp	x27, #0x100
     b2c:	add	x24, x24, #0x4
     b30:	b.ne	a7c <mainSort+0x43c>  // b.any
     b34:	b	b60 <mainSort+0x520>
     b38:	adrp	x9, 0 <stderr>
     b3c:	ldr	x0, [x9]
     b40:	ldr	w4, [sp, #60]
     b44:	adrp	x1, 0 <BZ2_blockSort>
     b48:	add	w5, w8, #0x1
     b4c:	add	x1, x1, #0x0
     b50:	mov	w2, w28
     b54:	mov	w3, w27
     b58:	bl	0 <fprintf>
     b5c:	b	ab0 <mainSort+0x470>
     b60:	ldr	x8, [sp, #32]
     b64:	add	x27, sp, #0x840
     b68:	ldrb	w8, [x27, x8]
     b6c:	cbz	w8, b80 <mainSort+0x540>
     b70:	mov	w0, #0x3ee                 	// #1006
     b74:	bl	0 <BZ2_bz__AssertH__fail>
     b78:	add	x16, sp, #0x40
     b7c:	add	x15, sp, #0x440
     b80:	ldr	x9, [sp, #16]
     b84:	ldr	w24, [sp, #56]
     b88:	mov	x8, xzr
     b8c:	add	x9, x9, w28, sxtw #2
     b90:	ldur	w10, [x9, #-4]
     b94:	and	w10, w10, #0xffdfffff
     b98:	str	w10, [x15, x8]
     b9c:	ldr	w10, [x9]
     ba0:	add	x9, x9, #0x400
     ba4:	and	w10, w10, #0xffdfffff
     ba8:	sub	w10, w10, #0x1
     bac:	str	w10, [x16, x8]
     bb0:	add	x8, x8, #0x4
     bb4:	cmp	x8, #0x400
     bb8:	b.ne	b90 <mainSort+0x550>  // b.any
     bbc:	lsl	w10, w28, #8
     bc0:	ldp	x19, x28, [sp, #24]
     bc4:	ldrsw	x9, [x22, w10, sxtw #2]
     bc8:	sxtw	x20, w10
     bcc:	ldr	w8, [x15, x28, lsl #2]
     bd0:	and	x9, x9, #0xffffffffffdfffff
     bd4:	cmp	w9, w8
     bd8:	b.lt	c44 <mainSort+0x604>  // b.tstop
     bdc:	add	w21, w20, #0x100
     be0:	ldr	w9, [x22, w21, sxtw #2]
     be4:	ldr	w10, [x16, x28, lsl #2]
     be8:	and	w9, w9, #0xffdfffff
     bec:	b	bf4 <mainSort+0x5b4>
     bf0:	ldr	w10, [x16, x28, lsl #2]
     bf4:	sub	w9, w9, #0x1
     bf8:	cmp	w9, w10
     bfc:	b.le	c78 <mainSort+0x638>
     c00:	ldr	w10, [x25, w9, sxtw #2]
     c04:	sub	w10, w10, #0x1
     c08:	and	w11, w24, w10, asr #31
     c0c:	add	w10, w11, w10
     c10:	ldrb	w11, [x26, w10, sxtw]
     c14:	ldrb	w12, [x27, x11]
     c18:	cbnz	w12, bf0 <mainSort+0x5b0>
     c1c:	lsl	x11, x11, #2
     c20:	ldrsw	x12, [x16, x11]
     c24:	sub	w13, w12, #0x1
     c28:	str	w13, [x16, x11]
     c2c:	str	w10, [x25, x12, lsl #2]
     c30:	b	bf0 <mainSort+0x5b0>
     c34:	ldrsw	x8, [x15, x28, lsl #2]
     c38:	add	x9, x9, #0x1
     c3c:	cmp	x9, x8
     c40:	b.ge	bdc <mainSort+0x59c>  // b.tcont
     c44:	ldr	w8, [x25, x9, lsl #2]
     c48:	sub	w8, w8, #0x1
     c4c:	and	w10, w24, w8, asr #31
     c50:	add	w8, w10, w8
     c54:	ldrb	w10, [x26, w8, sxtw]
     c58:	ldrb	w11, [x27, x10]
     c5c:	cbnz	w11, c34 <mainSort+0x5f4>
     c60:	lsl	x10, x10, #2
     c64:	ldrsw	x11, [x15, x10]
     c68:	add	w12, w11, #0x1
     c6c:	str	w12, [x15, x10]
     c70:	str	w8, [x25, x11, lsl #2]
     c74:	b	c34 <mainSort+0x5f4>
     c78:	sub	w9, w8, #0x1
     c7c:	cmp	w9, w10
     c80:	b.eq	ca4 <mainSort+0x664>  // b.none
     c84:	cbnz	w8, c94 <mainSort+0x654>
     c88:	ldr	x8, [sp, #8]
     c8c:	cmp	w10, w8
     c90:	b.eq	ca4 <mainSort+0x664>  // b.none
     c94:	mov	w0, #0x3ef                 	// #1007
     c98:	bl	0 <BZ2_bz__AssertH__fail>
     c9c:	add	x16, sp, #0x40
     ca0:	add	x15, sp, #0x440
     ca4:	mov	x9, xzr
     ca8:	sxtw	x8, w21
     cac:	add	x10, x22, x28, lsl #2
     cb0:	ldr	w11, [x10, x9]
     cb4:	orr	w11, w11, #0x200000
     cb8:	str	w11, [x10, x9]
     cbc:	add	x9, x9, #0x400
     cc0:	cmp	x9, #0x40, lsl #12
     cc4:	b.ne	cb0 <mainSort+0x670>  // b.any
     cc8:	cmp	x19, #0xfe
     ccc:	mov	w9, #0x1                   	// #1
     cd0:	mov	w13, #0xfffe                	// #65534
     cd4:	strb	w9, [x27, x28]
     cd8:	b.hi	a30 <mainSort+0x3f0>  // b.pmore
     cdc:	ldrsw	x9, [x22, x20, lsl #2]
     ce0:	ldr	w8, [x22, x8, lsl #2]
     ce4:	and	x12, x9, #0xffffffffffdfffff
     ce8:	and	w11, w8, #0xffdfffff
     cec:	sub	w10, w11, w12
     cf0:	mov	w8, #0xffffffff            	// #-1
     cf4:	add	w8, w8, #0x1
     cf8:	asr	w9, w10, w8
     cfc:	cmp	w9, w13
     d00:	b.gt	cf4 <mainSort+0x6b4>
     d04:	subs	w9, w10, #0x1
     d08:	b.lt	d58 <mainSort+0x718>  // b.tstop
     d0c:	sxtw	x13, w10
     d10:	ldr	x10, [sp]
     d14:	add	x10, x10, x12, lsl #2
     d18:	mvn	w12, w12
     d1c:	add	w11, w12, w11
     d20:	b	d34 <mainSort+0x6f4>
     d24:	cmp	x12, #0x0
     d28:	sub	w11, w11, #0x1
     d2c:	mov	x13, x12
     d30:	b.le	d58 <mainSort+0x718>
     d34:	ldrsw	x14, [x10, x13, lsl #2]
     d38:	sub	x12, x13, #0x1
     d3c:	asr	w13, w11, w8
     d40:	cmp	w14, #0x21
     d44:	strh	w13, [x23, x14, lsl #1]
     d48:	b.gt	d24 <mainSort+0x6e4>
     d4c:	add	w14, w14, w24
     d50:	strh	w13, [x23, w14, sxtw #1]
     d54:	b	d24 <mainSort+0x6e4>
     d58:	asr	w8, w9, w8
     d5c:	cmp	w8, #0x10, lsl #12
     d60:	b.lt	a30 <mainSort+0x3f0>  // b.tstop
     d64:	mov	w0, #0x3ea                 	// #1002
     d68:	bl	0 <BZ2_bz__AssertH__fail>
     d6c:	add	x16, sp, #0x40
     d70:	add	x15, sp, #0x440
     d74:	b	a30 <mainSort+0x3f0>
     d78:	ldr	w8, [sp, #52]
     d7c:	cmp	w8, #0x4
     d80:	b.ge	de4 <mainSort+0x7a4>  // b.tcont
     d84:	add	sp, sp, #0xd50
     d88:	ldp	x20, x19, [sp, #80]
     d8c:	ldp	x22, x21, [sp, #64]
     d90:	ldp	x24, x23, [sp, #48]
     d94:	ldp	x26, x25, [sp, #32]
     d98:	ldp	x28, x27, [sp, #16]
     d9c:	ldp	x29, x30, [sp], #96
     da0:	ret
     da4:	adrp	x8, 0 <stderr>
     da8:	ldr	x3, [x8]
     dac:	adrp	x0, 0 <BZ2_blockSort>
     db0:	add	x0, x0, #0x0
     db4:	mov	w1, #0x21                  	// #33
     db8:	mov	w2, #0x1                   	// #1
     dbc:	bl	0 <fwrite>
     dc0:	b	684 <mainSort+0x44>
     dc4:	adrp	x8, 0 <stderr>
     dc8:	ldr	x3, [x8]
     dcc:	adrp	x0, 0 <BZ2_blockSort>
     dd0:	add	x0, x0, #0x0
     dd4:	mov	w1, #0x1b                  	// #27
     dd8:	mov	w2, #0x1                   	// #1
     ddc:	bl	0 <fwrite>
     de0:	b	7c4 <mainSort+0x184>
     de4:	adrp	x8, 0 <stderr>
     de8:	ldp	w2, w3, [sp, #56]
     dec:	ldr	x0, [x8]
     df0:	adrp	x1, 0 <BZ2_blockSort>
     df4:	add	x1, x1, #0x0
     df8:	sub	w4, w2, w3
     dfc:	bl	0 <fprintf>
     e00:	b	d84 <mainSort+0x744>

0000000000000e04 <fallbackQSort3>:
     e04:	stp	x29, x30, [sp, #-96]!
     e08:	stp	x28, x27, [sp, #16]
     e0c:	stp	x26, x25, [sp, #32]
     e10:	stp	x24, x23, [sp, #48]
     e14:	stp	x22, x21, [sp, #64]
     e18:	stp	x20, x19, [sp, #80]
     e1c:	mov	x29, sp
     e20:	sub	sp, sp, #0x340
     e24:	add	x8, sp, #0x1a8
     e28:	add	x9, sp, #0x18
     e2c:	mov	x19, x1
     e30:	mov	x20, x0
     e34:	mov	w21, wzr
     e38:	add	x10, x0, #0x4
     e3c:	mov	w11, #0x1                   	// #1
     e40:	mov	x25, #0xffffffff00000000    	// #-4294967296
     e44:	sub	x8, x8, #0x4
     e48:	sub	x26, x9, #0x4
     e4c:	str	w2, [sp, #424]
     e50:	str	w3, [sp, #24]
     e54:	stp	x10, x8, [sp, #8]
     e58:	ldr	x9, [sp, #16]
     e5c:	sbfiz	x8, x11, #2, #32
     e60:	mov	x27, xzr
     e64:	sxtw	x22, w11
     e68:	sbfiz	x23, x11, #32, #32
     e6c:	add	x24, x9, x8
     e70:	add	x28, x26, x8
     e74:	add	x8, x22, x27
     e78:	cmp	x8, #0x63
     e7c:	b.lt	e88 <fallbackQSort3+0x84>  // b.tstop
     e80:	mov	w0, #0x3ec                 	// #1004
     e84:	bl	0 <BZ2_bz__AssertH__fail>
     e88:	lsl	x8, x27, #2
     e8c:	ldr	w2, [x24, x8]
     e90:	ldr	w3, [x28, x8]
     e94:	sub	w8, w3, w2
     e98:	cmp	w8, #0x9
     e9c:	b.gt	ec8 <fallbackQSort3+0xc4>
     ea0:	mov	x0, x20
     ea4:	mov	x1, x19
     ea8:	bl	1144 <fallbackSimpleSort>
     eac:	sub	x27, x27, #0x1
     eb0:	add	x8, x22, x27
     eb4:	add	x8, x8, #0x1
     eb8:	cmp	x8, #0x1
     ebc:	add	x23, x23, x25
     ec0:	b.gt	e74 <fallbackQSort3+0x70>
     ec4:	b	1124 <fallbackQSort3+0x320>
     ec8:	mov	w10, #0x1dc5                	// #7621
     ecc:	orr	w11, wzr, #0x1
     ed0:	madd	w10, w21, w10, w11
     ed4:	sub	w8, w22, #0x1
     ed8:	and	w21, w10, #0x7fff
     edc:	mov	w10, #0xaaab                	// #43691
     ee0:	add	x11, x8, x27
     ee4:	ldr	x8, [sp, #16]
     ee8:	movk	w10, #0xaaaa, lsl #16
     eec:	umull	x10, w21, w10
     ef0:	lsr	x10, x10, #33
     ef4:	lsl	x9, x22, #2
     ef8:	add	w10, w10, w10, lsl #1
     efc:	add	x8, x8, x9
     f00:	subs	w12, w21, w10
     f04:	add	x9, x26, x9
     f08:	mov	w10, w2
     f0c:	b.eq	f28 <fallbackQSort3+0x124>  // b.none
     f10:	cmp	w12, #0x1
     f14:	b.ne	f24 <fallbackQSort3+0x120>  // b.any
     f18:	add	w10, w3, w2
     f1c:	asr	w10, w10, #1
     f20:	b	f28 <fallbackQSort3+0x124>
     f24:	mov	w10, w3
     f28:	ldr	w10, [x20, w10, sxtw #2]
     f2c:	sxtw	x14, w2
     f30:	mov	w13, w3
     f34:	mov	w15, w3
     f38:	ldr	w16, [x19, x10, lsl #2]
     f3c:	mov	w10, w2
     f40:	mov	w12, w2
     f44:	cmp	w12, w15
     f48:	b.gt	fb0 <fallbackQSort3+0x1ac>
     f4c:	sxtw	x17, w15
     f50:	sxtw	x10, w10
     f54:	sxtw	x18, w12
     f58:	ldr	w12, [x20, x18, lsl #2]
     f5c:	ldr	w0, [x19, x12, lsl #2]
     f60:	subs	w0, w0, w16
     f64:	b.eq	f84 <fallbackQSort3+0x180>  // b.none
     f68:	cmp	w0, #0x0
     f6c:	b.gt	fac <fallbackQSort3+0x1a8>
     f70:	add	x12, x18, #0x1
     f74:	cmp	x18, x17
     f78:	mov	x18, x12
     f7c:	b.lt	f58 <fallbackQSort3+0x154>  // b.tstop
     f80:	b	fb0 <fallbackQSort3+0x1ac>
     f84:	lsl	x0, x10, #2
     f88:	ldr	w1, [x20, x0]
     f8c:	add	x10, x10, #0x1
     f90:	cmp	w15, w18
     f94:	str	w1, [x20, x18, lsl #2]
     f98:	str	w12, [x20, x0]
     f9c:	add	w12, w18, #0x1
     fa0:	b.gt	f54 <fallbackQSort3+0x150>
     fa4:	add	w12, w18, #0x1
     fa8:	b	fb0 <fallbackQSort3+0x1ac>
     fac:	mov	w12, w18
     fb0:	cmp	w12, w15
     fb4:	b.gt	1034 <fallbackQSort3+0x230>
     fb8:	sxtw	x17, w12
     fbc:	sxtw	x13, w13
     fc0:	sxtw	x18, w15
     fc4:	ldr	w15, [x20, x18, lsl #2]
     fc8:	ldr	w0, [x19, x15, lsl #2]
     fcc:	subs	w0, w0, w16
     fd0:	b.eq	fec <fallbackQSort3+0x1e8>  // b.none
     fd4:	tbnz	w0, #31, 1010 <fallbackQSort3+0x20c>
     fd8:	sub	x15, x18, #0x1
     fdc:	cmp	x18, x17
     fe0:	mov	x18, x15
     fe4:	b.gt	fc4 <fallbackQSort3+0x1c0>
     fe8:	b	1034 <fallbackQSort3+0x230>
     fec:	lsl	x0, x13, #2
     ff0:	ldr	w1, [x20, x0]
     ff4:	sub	x13, x13, #0x1
     ff8:	cmp	w12, w18
     ffc:	str	w1, [x20, x18, lsl #2]
    1000:	str	w15, [x20, x0]
    1004:	sub	w15, w18, #0x1
    1008:	b.lt	fc0 <fallbackQSort3+0x1bc>  // b.tstop
    100c:	b	1034 <fallbackQSort3+0x230>
    1010:	sbfiz	x17, x12, #2, #32
    1014:	ldr	w0, [x20, x17]
    1018:	add	w12, w12, #0x1
    101c:	str	w15, [x20, x17]
    1020:	sub	w15, w18, #0x1
    1024:	str	w0, [x20, x18, lsl #2]
    1028:	cmp	w12, w15
    102c:	b.le	f4c <fallbackQSort3+0x148>
    1030:	b	fb0 <fallbackQSort3+0x1ac>
    1034:	cmp	w13, w10
    1038:	b.lt	111c <fallbackQSort3+0x318>  // b.tstop
    103c:	sub	w11, w10, w2
    1040:	sub	w16, w12, w10
    1044:	cmp	w11, w16
    1048:	csel	w16, w11, w16, lt  // lt = tstop
    104c:	cmp	w16, #0x1
    1050:	b.lt	1080 <fallbackQSort3+0x27c>  // b.tstop
    1054:	sub	w17, w12, w16
    1058:	add	x11, x20, x14, lsl #2
    105c:	add	x14, x20, w17, sxtw #2
    1060:	add	w16, w16, #0x1
    1064:	ldr	w17, [x14]
    1068:	ldr	w18, [x11]
    106c:	sub	w16, w16, #0x1
    1070:	cmp	w16, #0x1
    1074:	str	w17, [x11], #4
    1078:	str	w18, [x14], #4
    107c:	b.gt	1064 <fallbackQSort3+0x260>
    1080:	sub	w14, w3, w13
    1084:	sub	w11, w13, w15
    1088:	cmp	w14, w11
    108c:	csel	w15, w14, w11, lt  // lt = tstop
    1090:	cmp	w15, #0x1
    1094:	b.lt	10c8 <fallbackQSort3+0x2c4>  // b.tstop
    1098:	ldr	x16, [sp, #8]
    109c:	sub	w14, w3, w15
    10a0:	add	x13, x20, w12, sxtw #2
    10a4:	add	w15, w15, #0x1
    10a8:	add	x14, x16, w14, sxtw #2
    10ac:	ldr	w16, [x14]
    10b0:	ldr	w17, [x13]
    10b4:	sub	w15, w15, #0x1
    10b8:	cmp	w15, #0x1
    10bc:	str	w16, [x13], #4
    10c0:	str	w17, [x14], #4
    10c4:	b.gt	10ac <fallbackQSort3+0x2a8>
    10c8:	mvn	w10, w10
    10cc:	sub	w11, w3, w11
    10d0:	add	w13, w2, w10
    10d4:	add	w10, w11, #0x1
    10d8:	add	w11, w13, w12
    10dc:	sub	w12, w11, w2
    10e0:	sub	w13, w3, w10
    10e4:	cmp	w12, w13
    10e8:	b.le	10f4 <fallbackQSort3+0x2f0>
    10ec:	str	w11, [x9, x27, lsl #2]
    10f0:	b	1100 <fallbackQSort3+0x2fc>
    10f4:	str	w10, [x8, x27, lsl #2]
    10f8:	mov	w10, w2
    10fc:	mov	w3, w11
    1100:	asr	x8, x23, #30
    1104:	add	x11, sp, #0x1a8
    1108:	add	w9, w22, w27
    110c:	str	w10, [x11, x8]
    1110:	add	x10, sp, #0x18
    1114:	str	w3, [x10, x8]
    1118:	add	w11, w9, #0x1
    111c:	cmp	w11, #0x0
    1120:	b.gt	e58 <fallbackQSort3+0x54>
    1124:	add	sp, sp, #0x340
    1128:	ldp	x20, x19, [sp, #80]
    112c:	ldp	x22, x21, [sp, #64]
    1130:	ldp	x24, x23, [sp, #48]
    1134:	ldp	x26, x25, [sp, #32]
    1138:	ldp	x28, x27, [sp, #16]
    113c:	ldp	x29, x30, [sp], #96
    1140:	ret

0000000000001144 <fallbackSimpleSort>:
    1144:	subs	w8, w3, w2
    1148:	b.eq	125c <fallbackSimpleSort+0x118>  // b.none
    114c:	cmp	w8, #0x4
    1150:	b.lt	11e0 <fallbackSimpleSort+0x9c>  // b.tstop
    1154:	sub	w9, w3, #0x4
    1158:	cmp	w9, w2
    115c:	b.lt	11e0 <fallbackSimpleSort+0x9c>  // b.tstop
    1160:	sxtw	x8, w3
    1164:	sxtw	x9, w9
    1168:	sxtw	x10, w2
    116c:	mov	w11, w3
    1170:	b	118c <fallbackSimpleSort+0x48>
    1174:	sbfiz	x13, x14, #2, #32
    1178:	cmp	x9, x10
    117c:	sub	x9, x9, #0x1
    1180:	sub	w11, w11, #0x1
    1184:	str	w12, [x0, x13]
    1188:	b.le	11e0 <fallbackSimpleSort+0x9c>
    118c:	ldrsw	x12, [x0, x9, lsl #2]
    1190:	add	x13, x9, #0x4
    1194:	cmp	x13, x8
    1198:	mov	x14, x9
    119c:	b.gt	1174 <fallbackSimpleSort+0x30>
    11a0:	ldr	w13, [x1, x12, lsl #2]
    11a4:	sxtw	x16, w11
    11a8:	mov	x14, x9
    11ac:	ldr	w17, [x0, x16, lsl #2]
    11b0:	mov	x15, x16
    11b4:	ldr	w16, [x1, x17, lsl #2]
    11b8:	cmp	w13, w16
    11bc:	b.ls	1174 <fallbackSimpleSort+0x30>  // b.plast
    11c0:	sbfiz	x14, x14, #2, #32
    11c4:	add	x16, x15, #0x4
    11c8:	cmp	x16, x8
    11cc:	str	w17, [x0, x14]
    11d0:	mov	x14, x15
    11d4:	b.le	11ac <fallbackSimpleSort+0x68>
    11d8:	sub	x14, x16, #0x4
    11dc:	b	1174 <fallbackSimpleSort+0x30>
    11e0:	cmp	w3, w2
    11e4:	b.le	125c <fallbackSimpleSort+0x118>
    11e8:	sxtw	x8, w3
    11ec:	sxtw	x9, w2
    11f0:	add	x10, x0, w3, sxtw #2
    11f4:	mov	x12, x8
    11f8:	b	1214 <fallbackSimpleSort+0xd0>
    11fc:	sub	w12, w12, #0x1
    1200:	cmp	x11, x9
    1204:	str	w13, [x0, w12, sxtw #2]
    1208:	sub	x10, x10, #0x4
    120c:	mov	x12, x11
    1210:	b.le	125c <fallbackSimpleSort+0x118>
    1214:	sub	x11, x12, #0x1
    1218:	ldrsw	x13, [x0, x11, lsl #2]
    121c:	cmp	w12, w3
    1220:	b.gt	11fc <fallbackSimpleSort+0xb8>
    1224:	ldr	w14, [x1, x13, lsl #2]
    1228:	mov	x15, x10
    122c:	ldr	w16, [x15]
    1230:	ldr	w17, [x1, x16, lsl #2]
    1234:	cmp	w14, w17
    1238:	b.ls	11fc <fallbackSimpleSort+0xb8>  // b.plast
    123c:	stur	w16, [x15, #-4]
    1240:	add	x16, x12, #0x1
    1244:	cmp	x12, x8
    1248:	add	x15, x15, #0x4
    124c:	mov	x12, x16
    1250:	b.lt	122c <fallbackSimpleSort+0xe8>  // b.tstop
    1254:	mov	w12, w16
    1258:	b	11fc <fallbackSimpleSort+0xb8>
    125c:	ret

0000000000001260 <mainQSort3>:
    1260:	stp	x29, x30, [sp, #-96]!
    1264:	stp	x28, x27, [sp, #16]
    1268:	stp	x26, x25, [sp, #32]
    126c:	stp	x24, x23, [sp, #48]
    1270:	stp	x22, x21, [sp, #64]
    1274:	stp	x20, x19, [sp, #80]
    1278:	mov	x29, sp
    127c:	sub	sp, sp, #0x4e0
    1280:	mov	x22, x1
    1284:	mov	x23, x0
    1288:	mov	w8, #0x2                   	// #2
    128c:	add	x9, x0, #0x4
    1290:	mov	w27, #0x1                   	// #1
    1294:	add	x21, sp, #0x1b8
    1298:	add	x20, sp, #0x28
    129c:	mov	w28, #0x1                   	// #1
    12a0:	str	x6, [sp, #24]
    12a4:	str	w3, [sp, #20]
    12a8:	str	w4, [sp, #840]
    12ac:	str	w5, [sp, #440]
    12b0:	stp	x9, x2, [sp]
    12b4:	str	w8, [sp, #40]
    12b8:	sxtw	x8, w28
    12bc:	sub	x28, x8, #0x1
    12c0:	str	x8, [sp, #32]
    12c4:	ldr	x8, [sp, #32]
    12c8:	cmp	w8, #0x62
    12cc:	b.lt	12d8 <mainQSort3+0x78>  // b.tstop
    12d0:	mov	w0, #0x3e9                 	// #1001
    12d4:	bl	0 <BZ2_bz__AssertH__fail>
    12d8:	lsl	x19, x28, #2
    12dc:	add	x8, sp, #0x348
    12e0:	ldr	w25, [x8, x19]
    12e4:	ldr	w26, [x21, x19]
    12e8:	ldr	w24, [x20, x19]
    12ec:	sub	w8, w26, w25
    12f0:	cmp	w8, #0x14
    12f4:	b.lt	1460 <mainQSort3+0x200>  // b.tstop
    12f8:	cmp	w24, #0xf
    12fc:	b.ge	1460 <mainQSort3+0x200>  // b.tcont
    1300:	add	w9, w26, w25
    1304:	sxtw	x20, w25
    1308:	sxtw	x8, w26
    130c:	asr	w9, w9, #1
    1310:	ldr	w10, [x23, x20, lsl #2]
    1314:	ldr	w8, [x23, x8, lsl #2]
    1318:	ldr	w9, [x23, w9, sxtw #2]
    131c:	add	w10, w10, w24
    1320:	add	w8, w8, w24
    1324:	add	w9, w9, w24
    1328:	ldrb	w1, [x22, w8, uxtw]
    132c:	ldrb	w0, [x22, w10, uxtw]
    1330:	ldrb	w2, [x22, w9, uxtw]
    1334:	bl	18a0 <mmed3>
    1338:	and	w12, w0, #0xff
    133c:	mov	w10, w26
    1340:	mov	w8, w25
    1344:	mov	w11, w26
    1348:	mov	w9, w25
    134c:	cmp	w9, w11
    1350:	b.gt	13bc <mainQSort3+0x15c>
    1354:	sxtw	x13, w11
    1358:	sxtw	x8, w8
    135c:	sxtw	x14, w9
    1360:	ldr	w9, [x23, x14, lsl #2]
    1364:	add	w15, w9, w24
    1368:	ldrb	w15, [x22, w15, uxtw]
    136c:	subs	w15, w15, w12
    1370:	b.eq	1390 <mainQSort3+0x130>  // b.none
    1374:	cmp	w15, #0x0
    1378:	b.gt	13b8 <mainQSort3+0x158>
    137c:	add	x9, x14, #0x1
    1380:	cmp	x14, x13
    1384:	mov	x14, x9
    1388:	b.lt	1360 <mainQSort3+0x100>  // b.tstop
    138c:	b	13bc <mainQSort3+0x15c>
    1390:	lsl	x15, x8, #2
    1394:	ldr	w16, [x23, x15]
    1398:	add	x8, x8, #0x1
    139c:	cmp	w11, w14
    13a0:	str	w16, [x23, x14, lsl #2]
    13a4:	str	w9, [x23, x15]
    13a8:	add	w9, w14, #0x1
    13ac:	b.gt	135c <mainQSort3+0xfc>
    13b0:	add	w9, w14, #0x1
    13b4:	b	13bc <mainQSort3+0x15c>
    13b8:	mov	w9, w14
    13bc:	cmp	w9, w11
    13c0:	b.gt	1444 <mainQSort3+0x1e4>
    13c4:	sxtw	x13, w9
    13c8:	sxtw	x10, w10
    13cc:	sxtw	x14, w11
    13d0:	ldr	w11, [x23, x14, lsl #2]
    13d4:	add	w15, w11, w24
    13d8:	ldrb	w15, [x22, w15, uxtw]
    13dc:	subs	w15, w15, w12
    13e0:	b.eq	13fc <mainQSort3+0x19c>  // b.none
    13e4:	tbnz	w15, #31, 1420 <mainQSort3+0x1c0>
    13e8:	sub	x11, x14, #0x1
    13ec:	cmp	x14, x13
    13f0:	mov	x14, x11
    13f4:	b.gt	13d0 <mainQSort3+0x170>
    13f8:	b	1444 <mainQSort3+0x1e4>
    13fc:	lsl	x15, x10, #2
    1400:	ldr	w16, [x23, x15]
    1404:	sub	x10, x10, #0x1
    1408:	cmp	w9, w14
    140c:	str	w16, [x23, x14, lsl #2]
    1410:	str	w11, [x23, x15]
    1414:	sub	w11, w14, #0x1
    1418:	b.lt	13cc <mainQSort3+0x16c>  // b.tstop
    141c:	b	1444 <mainQSort3+0x1e4>
    1420:	sbfiz	x13, x9, #2, #32
    1424:	ldr	w15, [x23, x13]
    1428:	add	w9, w9, #0x1
    142c:	str	w11, [x23, x13]
    1430:	sub	w11, w14, #0x1
    1434:	str	w15, [x23, x14, lsl #2]
    1438:	cmp	w9, w11
    143c:	b.le	1354 <mainQSort3+0xf4>
    1440:	b	13bc <mainQSort3+0x15c>
    1444:	cmp	w10, w8
    1448:	b.ge	1494 <mainQSort3+0x234>  // b.tcont
    144c:	add	w8, w24, #0x1
    1450:	add	x20, sp, #0x28
    1454:	str	w8, [x20, x28, lsl #2]
    1458:	tbnz	w27, #0, 12c4 <mainQSort3+0x64>
    145c:	b	15e8 <mainQSort3+0x388>
    1460:	ldr	x19, [sp, #24]
    1464:	ldr	x2, [sp, #8]
    1468:	ldr	w3, [sp, #20]
    146c:	mov	x0, x23
    1470:	mov	x1, x22
    1474:	mov	w4, w25
    1478:	mov	w5, w26
    147c:	mov	w6, w24
    1480:	mov	x7, x19
    1484:	bl	1608 <mainSimpleSort>
    1488:	ldr	w8, [x19]
    148c:	tbz	w8, #31, 15dc <mainQSort3+0x37c>
    1490:	b	15e8 <mainQSort3+0x388>
    1494:	sub	w12, w8, w25
    1498:	sub	w13, w9, w8
    149c:	cmp	w12, w13
    14a0:	csel	w14, w12, w13, lt  // lt = tstop
    14a4:	cmp	w14, #0x1
    14a8:	b.lt	14d8 <mainQSort3+0x278>  // b.tstop
    14ac:	sub	w13, w9, w14
    14b0:	add	x12, x23, x20, lsl #2
    14b4:	add	x13, x23, w13, sxtw #2
    14b8:	add	w14, w14, #0x1
    14bc:	ldr	w15, [x13]
    14c0:	ldr	w16, [x12]
    14c4:	sub	w14, w14, #0x1
    14c8:	cmp	w14, #0x1
    14cc:	str	w15, [x12], #4
    14d0:	str	w16, [x13], #4
    14d4:	b.gt	14bc <mainQSort3+0x25c>
    14d8:	sub	w12, w26, w10
    14dc:	sub	w10, w10, w11
    14e0:	cmp	w12, w10
    14e4:	csel	w13, w12, w10, lt  // lt = tstop
    14e8:	cmp	w13, #0x1
    14ec:	b.lt	1520 <mainQSort3+0x2c0>  // b.tstop
    14f0:	ldr	x14, [sp]
    14f4:	sub	w12, w26, w13
    14f8:	add	x11, x23, w9, sxtw #2
    14fc:	add	w13, w13, #0x1
    1500:	add	x12, x14, w12, sxtw #2
    1504:	ldr	w14, [x12]
    1508:	ldr	w15, [x11]
    150c:	sub	w13, w13, #0x1
    1510:	cmp	w13, #0x1
    1514:	str	w14, [x11], #4
    1518:	str	w15, [x12], #4
    151c:	b.gt	1504 <mainQSort3+0x2a4>
    1520:	sub	w8, w25, w8
    1524:	sub	w10, w26, w10
    1528:	add	w8, w8, w9
    152c:	add	w9, w10, #0x1
    1530:	sub	w11, w8, #0x1
    1534:	sub	w9, w26, w9
    1538:	sub	w13, w11, w25
    153c:	cmp	w13, w9
    1540:	csinc	w9, w25, w10, lt  // lt = tstop
    1544:	csel	w14, w11, w26, lt  // lt = tstop
    1548:	sub	w12, w10, w8
    154c:	sub	w15, w14, w9
    1550:	csinc	w13, w25, w10, ge  // ge = tcont
    1554:	csel	w11, w26, w11, lt  // lt = tstop
    1558:	cmp	w15, w12
    155c:	ldr	x1, [sp, #32]
    1560:	csel	w12, w8, w9, lt  // lt = tstop
    1564:	csel	w15, w14, w10, lt  // lt = tstop
    1568:	csel	w10, w10, w14, lt  // lt = tstop
    156c:	sub	w16, w11, w13
    1570:	csel	w8, w9, w8, lt  // lt = tstop
    1574:	sub	w9, w10, w12
    1578:	cinc	w14, w24, ge  // ge = tcont
    157c:	cinc	w17, w24, lt  // lt = tstop
    1580:	cmp	w16, w9
    1584:	lsl	x9, x1, #2
    1588:	csel	w16, w13, w12, lt  // lt = tstop
    158c:	csel	w12, w12, w13, lt  // lt = tstop
    1590:	add	x0, sp, #0x348
    1594:	csel	w13, w11, w10, lt  // lt = tstop
    1598:	csel	w10, w10, w11, lt  // lt = tstop
    159c:	csel	w11, w24, w17, lt  // lt = tstop
    15a0:	csel	w17, w17, w24, lt  // lt = tstop
    15a4:	add	x18, x9, #0x4
    15a8:	str	w12, [x0, x19]
    15ac:	add	x12, sp, #0x1b8
    15b0:	add	x20, sp, #0x28
    15b4:	str	w10, [x12, x19]
    15b8:	str	w17, [x20, x19]
    15bc:	str	w16, [x0, x9]
    15c0:	str	w13, [x12, x9]
    15c4:	str	w11, [x20, x9]
    15c8:	str	w8, [x0, x18]
    15cc:	add	x21, sp, #0x1b8
    15d0:	str	w15, [x12, x18]
    15d4:	str	w14, [x20, x18]
    15d8:	add	w28, w1, #0x2
    15dc:	cmp	w28, #0x0
    15e0:	cset	w27, gt
    15e4:	b.gt	12b8 <mainQSort3+0x58>
    15e8:	add	sp, sp, #0x4e0
    15ec:	ldp	x20, x19, [sp, #80]
    15f0:	ldp	x22, x21, [sp, #64]
    15f4:	ldp	x24, x23, [sp, #48]
    15f8:	ldp	x26, x25, [sp, #32]
    15fc:	ldp	x28, x27, [sp, #16]
    1600:	ldp	x29, x30, [sp], #96
    1604:	ret

0000000000001608 <mainSimpleSort>:
    1608:	sub	sp, sp, #0xb0
    160c:	stp	x29, x30, [sp, #80]
    1610:	stp	x28, x27, [sp, #96]
    1614:	stp	x26, x25, [sp, #112]
    1618:	stp	x24, x23, [sp, #128]
    161c:	stp	x22, x21, [sp, #144]
    1620:	stp	x20, x19, [sp, #160]
    1624:	add	x29, sp, #0x50
    1628:	sub	w9, w5, w4
    162c:	cmp	w9, #0x1
    1630:	stur	w3, [x29, #-4]
    1634:	str	w4, [sp, #28]
    1638:	b.lt	1674 <mainSimpleSort+0x6c>  // b.tstop
    163c:	adrp	x11, 0 <BZ2_blockSort>
    1640:	mov	x19, x7
    1644:	mov	w20, w6
    1648:	mov	x23, x2
    164c:	mov	x24, x1
    1650:	mov	x25, x0
    1654:	mov	x8, xzr
    1658:	add	x11, x11, #0x0
    165c:	ldr	w10, [x11, x8, lsl #2]
    1660:	add	x8, x8, #0x1
    1664:	cmp	w10, w9
    1668:	b.le	165c <mainSimpleSort+0x54>
    166c:	cmp	w8, #0x1
    1670:	b.ne	1694 <mainSimpleSort+0x8c>  // b.any
    1674:	ldp	x20, x19, [sp, #160]
    1678:	ldp	x22, x21, [sp, #144]
    167c:	ldp	x24, x23, [sp, #128]
    1680:	ldp	x26, x25, [sp, #112]
    1684:	ldp	x28, x27, [sp, #96]
    1688:	ldp	x29, x30, [sp, #80]
    168c:	add	sp, sp, #0xb0
    1690:	ret
    1694:	sxtw	x9, w5
    1698:	stur	x9, [x29, #-24]
    169c:	ldr	w9, [sp, #28]
    16a0:	sub	x8, x8, #0x1
    16a4:	and	x8, x8, #0xffffffff
    16a8:	str	x8, [sp, #32]
    16ac:	add	w10, w9, #0x1
    16b0:	add	w8, w9, #0x2
    16b4:	stp	w8, w10, [sp, #8]
    16b8:	b	16c8 <mainSimpleSort+0xc0>
    16bc:	ldr	x8, [sp, #16]
    16c0:	cmp	x8, #0x1
    16c4:	b.le	1674 <mainSimpleSort+0x6c>
    16c8:	ldr	x8, [sp, #32]
    16cc:	ldr	w10, [sp, #8]
    16d0:	str	x8, [sp, #16]
    16d4:	sub	x9, x8, #0x1
    16d8:	adrp	x8, 0 <BZ2_blockSort>
    16dc:	add	x8, x8, #0x0
    16e0:	ldr	w21, [x8, x9, lsl #2]
    16e4:	ldr	w8, [sp, #28]
    16e8:	stur	w10, [x29, #-36]
    16ec:	ldr	w10, [sp, #12]
    16f0:	str	x9, [sp, #32]
    16f4:	add	w27, w21, w8
    16f8:	sxtw	x9, w27
    16fc:	stp	w10, w8, [x29, #-32]
    1700:	b	1744 <mainSimpleSort+0x13c>
    1704:	add	w8, w21, w22
    1708:	ldur	w10, [x29, #-28]
    170c:	ldr	w9, [sp, #40]
    1710:	add	w10, w10, #0x3
    1714:	stur	w10, [x29, #-28]
    1718:	ldur	w10, [x29, #-32]
    171c:	str	w9, [x25, w8, sxtw #2]
    1720:	ldur	x9, [x29, #-16]
    1724:	ldr	w8, [x19]
    1728:	add	w10, w10, #0x3
    172c:	stur	w10, [x29, #-32]
    1730:	ldur	w10, [x29, #-36]
    1734:	add	x9, x9, #0x3
    1738:	add	w10, w10, #0x3
    173c:	stur	w10, [x29, #-36]
    1740:	tbnz	w8, #31, 1674 <mainSimpleSort+0x6c>
    1744:	ldur	x8, [x29, #-24]
    1748:	cmp	x9, x8
    174c:	b.gt	16bc <mainSimpleSort+0xb4>
    1750:	ldr	w8, [x25, x9, lsl #2]
    1754:	ldur	w28, [x29, #-28]
    1758:	stur	x9, [x29, #-16]
    175c:	add	w26, w8, w20
    1760:	str	w8, [sp, #40]
    1764:	ldr	w8, [x25, w28, sxtw #2]
    1768:	ldur	w4, [x29, #-4]
    176c:	mov	w1, w26
    1770:	mov	x2, x24
    1774:	add	w0, w8, w20
    1778:	mov	x3, x23
    177c:	mov	x5, x19
    1780:	sxtw	x22, w28
    1784:	bl	18d0 <mainGtU>
    1788:	tst	w0, #0xff
    178c:	b.eq	17b0 <mainSimpleSort+0x1a8>  // b.none
    1790:	ldr	w8, [x25, x22, lsl #2]
    1794:	add	w9, w21, w28
    1798:	cmp	w22, w27
    179c:	sub	w28, w22, w21
    17a0:	str	w8, [x25, w9, sxtw #2]
    17a4:	b.ge	1764 <mainSimpleSort+0x15c>  // b.tcont
    17a8:	add	w8, w21, w28
    17ac:	b	17b4 <mainSimpleSort+0x1ac>
    17b0:	add	w8, w21, w22
    17b4:	ldp	x9, x10, [x29, #-24]
    17b8:	ldr	w11, [sp, #40]
    17bc:	cmp	x10, x9
    17c0:	str	w11, [x25, w8, sxtw #2]
    17c4:	b.ge	16bc <mainSimpleSort+0xb4>  // b.tcont
    17c8:	add	x8, x10, #0x1
    17cc:	ldr	w8, [x25, x8, lsl #2]
    17d0:	ldur	w28, [x29, #-32]
    17d4:	add	w26, w8, w20
    17d8:	str	w8, [sp, #40]
    17dc:	ldr	w8, [x25, w28, sxtw #2]
    17e0:	ldur	w4, [x29, #-4]
    17e4:	mov	w1, w26
    17e8:	mov	x2, x24
    17ec:	add	w0, w8, w20
    17f0:	mov	x3, x23
    17f4:	mov	x5, x19
    17f8:	sxtw	x22, w28
    17fc:	bl	18d0 <mainGtU>
    1800:	tst	w0, #0xff
    1804:	b.eq	1828 <mainSimpleSort+0x220>  // b.none
    1808:	ldr	w8, [x25, x22, lsl #2]
    180c:	add	w9, w21, w28
    1810:	cmp	w22, w27
    1814:	sub	w28, w22, w21
    1818:	str	w8, [x25, w9, sxtw #2]
    181c:	b.ge	17dc <mainSimpleSort+0x1d4>  // b.tcont
    1820:	add	w8, w21, w28
    1824:	b	182c <mainSimpleSort+0x224>
    1828:	add	w8, w21, w22
    182c:	ldp	x10, x9, [x29, #-24]
    1830:	add	x9, x9, #0x2
    1834:	cmp	x9, x10
    1838:	ldr	w10, [sp, #40]
    183c:	str	w10, [x25, w8, sxtw #2]
    1840:	b.gt	16bc <mainSimpleSort+0xb4>
    1844:	ldr	w8, [x25, x9, lsl #2]
    1848:	ldur	w28, [x29, #-36]
    184c:	add	w26, w8, w20
    1850:	str	w8, [sp, #40]
    1854:	ldr	w8, [x25, w28, sxtw #2]
    1858:	ldur	w4, [x29, #-4]
    185c:	mov	w1, w26
    1860:	mov	x2, x24
    1864:	add	w0, w8, w20
    1868:	mov	x3, x23
    186c:	mov	x5, x19
    1870:	sxtw	x22, w28
    1874:	bl	18d0 <mainGtU>
    1878:	tst	w0, #0xff
    187c:	b.eq	1704 <mainSimpleSort+0xfc>  // b.none
    1880:	ldr	w8, [x25, x22, lsl #2]
    1884:	add	w9, w21, w28
    1888:	cmp	w22, w27
    188c:	sub	w28, w22, w21
    1890:	str	w8, [x25, w9, sxtw #2]
    1894:	b.ge	1854 <mainSimpleSort+0x24c>  // b.tcont
    1898:	add	w8, w21, w28
    189c:	b	1708 <mainSimpleSort+0x100>

00000000000018a0 <mmed3>:
    18a0:	and	w9, w0, #0xff
    18a4:	cmp	w9, w1, uxtb
    18a8:	mov	w8, w0
    18ac:	csel	w0, w0, w1, hi  // hi = pmore
    18b0:	and	w9, w0, #0xff
    18b4:	csel	w8, w1, w8, hi  // hi = pmore
    18b8:	cmp	w9, w2, uxtb
    18bc:	b.ls	18cc <mmed3+0x2c>  // b.plast
    18c0:	and	w9, w8, #0xff
    18c4:	cmp	w9, w2, uxtb
    18c8:	csel	w0, w8, w2, hi  // hi = pmore
    18cc:	ret

00000000000018d0 <mainGtU>:
    18d0:	ldrb	w8, [x2, w0, uxtw]
    18d4:	ldrb	w9, [x2, w1, uxtw]
    18d8:	cmp	w8, w9
    18dc:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    18e0:	add	w8, w0, #0x1
    18e4:	add	w9, w1, #0x1
    18e8:	ldrb	w8, [x2, w8, uxtw]
    18ec:	ldrb	w9, [x2, w9, uxtw]
    18f0:	cmp	w8, w9
    18f4:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    18f8:	add	w8, w0, #0x2
    18fc:	add	w9, w1, #0x2
    1900:	ldrb	w8, [x2, w8, uxtw]
    1904:	ldrb	w9, [x2, w9, uxtw]
    1908:	cmp	w8, w9
    190c:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1910:	add	w8, w0, #0x3
    1914:	add	w9, w1, #0x3
    1918:	ldrb	w8, [x2, w8, uxtw]
    191c:	ldrb	w9, [x2, w9, uxtw]
    1920:	cmp	w8, w9
    1924:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1928:	add	w8, w0, #0x4
    192c:	add	w9, w1, #0x4
    1930:	ldrb	w8, [x2, w8, uxtw]
    1934:	ldrb	w9, [x2, w9, uxtw]
    1938:	cmp	w8, w9
    193c:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1940:	add	w8, w0, #0x5
    1944:	add	w9, w1, #0x5
    1948:	ldrb	w8, [x2, w8, uxtw]
    194c:	ldrb	w9, [x2, w9, uxtw]
    1950:	cmp	w8, w9
    1954:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1958:	add	w8, w0, #0x6
    195c:	add	w9, w1, #0x6
    1960:	ldrb	w8, [x2, w8, uxtw]
    1964:	ldrb	w9, [x2, w9, uxtw]
    1968:	cmp	w8, w9
    196c:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1970:	add	w8, w0, #0x7
    1974:	add	w9, w1, #0x7
    1978:	ldrb	w8, [x2, w8, uxtw]
    197c:	ldrb	w9, [x2, w9, uxtw]
    1980:	cmp	w8, w9
    1984:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1988:	add	w8, w0, #0x8
    198c:	add	w9, w1, #0x8
    1990:	ldrb	w8, [x2, w8, uxtw]
    1994:	ldrb	w9, [x2, w9, uxtw]
    1998:	cmp	w8, w9
    199c:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    19a0:	add	w8, w0, #0x9
    19a4:	add	w9, w1, #0x9
    19a8:	ldrb	w8, [x2, w8, uxtw]
    19ac:	ldrb	w9, [x2, w9, uxtw]
    19b0:	cmp	w8, w9
    19b4:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    19b8:	add	w8, w0, #0xa
    19bc:	add	w9, w1, #0xa
    19c0:	ldrb	w8, [x2, w8, uxtw]
    19c4:	ldrb	w9, [x2, w9, uxtw]
    19c8:	cmp	w8, w9
    19cc:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    19d0:	add	w8, w0, #0xb
    19d4:	add	w9, w1, #0xb
    19d8:	ldrb	w8, [x2, w8, uxtw]
    19dc:	ldrb	w9, [x2, w9, uxtw]
    19e0:	cmp	w8, w9
    19e4:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    19e8:	add	w9, w0, #0xc
    19ec:	add	w10, w1, #0xc
    19f0:	add	w8, w4, #0x10
    19f4:	mov	w9, w9
    19f8:	mov	w10, w10
    19fc:	ldrb	w11, [x2, x9]
    1a00:	ldrb	w12, [x2, x10]
    1a04:	cmp	w11, w12
    1a08:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a0c:	ldrh	w11, [x3, x9, lsl #1]
    1a10:	ldrh	w12, [x3, x10, lsl #1]
    1a14:	cmp	w11, w12
    1a18:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a1c:	add	w11, w9, #0x1
    1a20:	add	w12, w10, #0x1
    1a24:	ldrb	w13, [x2, x11]
    1a28:	ldrb	w14, [x2, x12]
    1a2c:	cmp	w13, w14
    1a30:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a34:	ldrh	w11, [x3, x11, lsl #1]
    1a38:	ldrh	w12, [x3, x12, lsl #1]
    1a3c:	cmp	w11, w12
    1a40:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a44:	add	w11, w9, #0x2
    1a48:	add	w12, w10, #0x2
    1a4c:	ldrb	w13, [x2, x11]
    1a50:	ldrb	w14, [x2, x12]
    1a54:	cmp	w13, w14
    1a58:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a5c:	ldrh	w11, [x3, x11, lsl #1]
    1a60:	ldrh	w12, [x3, x12, lsl #1]
    1a64:	cmp	w11, w12
    1a68:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a6c:	add	w11, w9, #0x3
    1a70:	add	w12, w10, #0x3
    1a74:	ldrb	w13, [x2, x11]
    1a78:	ldrb	w14, [x2, x12]
    1a7c:	cmp	w13, w14
    1a80:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a84:	ldrh	w11, [x3, x11, lsl #1]
    1a88:	ldrh	w12, [x3, x12, lsl #1]
    1a8c:	cmp	w11, w12
    1a90:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1a94:	add	w11, w9, #0x4
    1a98:	add	w12, w10, #0x4
    1a9c:	ldrb	w13, [x2, x11]
    1aa0:	ldrb	w14, [x2, x12]
    1aa4:	cmp	w13, w14
    1aa8:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1aac:	ldrh	w11, [x3, x11, lsl #1]
    1ab0:	ldrh	w12, [x3, x12, lsl #1]
    1ab4:	cmp	w11, w12
    1ab8:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1abc:	add	w11, w9, #0x5
    1ac0:	add	w12, w10, #0x5
    1ac4:	ldrb	w13, [x2, x11]
    1ac8:	ldrb	w14, [x2, x12]
    1acc:	cmp	w13, w14
    1ad0:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1ad4:	ldrh	w11, [x3, x11, lsl #1]
    1ad8:	ldrh	w12, [x3, x12, lsl #1]
    1adc:	cmp	w11, w12
    1ae0:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1ae4:	add	w11, w9, #0x6
    1ae8:	add	w12, w10, #0x6
    1aec:	ldrb	w13, [x2, x11]
    1af0:	ldrb	w14, [x2, x12]
    1af4:	cmp	w13, w14
    1af8:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1afc:	ldrh	w11, [x3, x11, lsl #1]
    1b00:	ldrh	w12, [x3, x12, lsl #1]
    1b04:	cmp	w11, w12
    1b08:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1b0c:	add	w11, w9, #0x7
    1b10:	add	w12, w10, #0x7
    1b14:	ldrb	w13, [x2, x11]
    1b18:	ldrb	w14, [x2, x12]
    1b1c:	cmp	w13, w14
    1b20:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1b24:	ldrh	w11, [x3, x11, lsl #1]
    1b28:	ldrh	w12, [x3, x12, lsl #1]
    1b2c:	cmp	w11, w12
    1b30:	b.ne	1b74 <mainGtU+0x2a4>  // b.any
    1b34:	add	w9, w9, #0x8
    1b38:	ldr	w11, [x5]
    1b3c:	add	w10, w10, #0x8
    1b40:	cmp	w9, w4
    1b44:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    1b48:	cmp	w10, w4
    1b4c:	sub	w8, w8, #0x8
    1b50:	sub	w9, w9, w12
    1b54:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    1b58:	mov	w0, wzr
    1b5c:	sub	w10, w10, w12
    1b60:	sub	w11, w11, #0x1
    1b64:	cmp	w8, #0x7
    1b68:	str	w11, [x5]
    1b6c:	b.gt	19f4 <mainGtU+0x124>
    1b70:	ret
    1b74:	cset	w0, hi  // hi = pmore
    1b78:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x28, x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	mov	x29, sp
  1c:	sub	sp, sp, #0x1, lsl #12
  20:	sub	sp, sp, #0x450
  24:	mov	w19, w3
  28:	mov	w20, w2
  2c:	cmp	w2, #0x1
  30:	mov	x21, x0
  34:	b.lt	64 <BZ2_hbMakeCodeLengths+0x64>  // b.tstop
  38:	add	x9, sp, #0x828
  3c:	mov	w8, w20
  40:	add	x9, x9, #0x4
  44:	mov	w10, #0x100                 	// #256
  48:	ldr	w11, [x1], #4
  4c:	lsl	w12, w11, #8
  50:	cmp	w11, #0x0
  54:	csel	w11, w10, w12, eq  // eq = none
  58:	subs	x8, x8, #0x1
  5c:	str	w11, [x9], #4
  60:	b.ne	48 <BZ2_hbMakeCodeLengths+0x48>  // b.any
  64:	sxtw	x8, w20
  68:	str	x8, [sp, #16]
  6c:	add	w8, w20, #0x1
  70:	add	x23, sp, #0x828
  74:	add	x25, sp, #0x1, lsl #12
  78:	add	x25, x25, #0x38
  7c:	add	x26, sp, #0x18
  80:	mov	w27, #0xffffffff            	// #-1
  84:	add	x9, x23, #0x4
  88:	sub	x24, x8, #0x1
  8c:	mov	w22, w8
  90:	str	x9, [sp, #8]
  94:	cmp	w20, #0x1
  98:	mov	w8, #0xfffffffe            	// #-2
  9c:	str	wzr, [sp, #4152]
  a0:	str	wzr, [sp, #2088]
  a4:	str	w8, [sp, #24]
  a8:	b.lt	120 <BZ2_hbMakeCodeLengths+0x120>  // b.tstop
  ac:	mov	x28, xzr
  b0:	mov	w8, w20
  b4:	mov	w9, #0x1                   	// #1
  b8:	b	cc <BZ2_hbMakeCodeLengths+0xcc>
  bc:	str	w9, [x10]
  c0:	cmp	x28, x8
  c4:	add	x9, x9, #0x1
  c8:	b.eq	124 <BZ2_hbMakeCodeLengths+0x124>  // b.none
  cc:	add	x28, x28, #0x1
  d0:	add	x10, x25, x28, lsl #2
  d4:	str	w9, [x10]
  d8:	ubfx	x11, x28, #1, #31
  dc:	ldrsw	x12, [x25, w11, uxtw #2]
  e0:	lsl	x13, x9, #2
  e4:	ldr	w14, [x23, x13]
  e8:	str	w27, [x26, x13]
  ec:	ldr	w15, [x23, x12, lsl #2]
  f0:	cmp	w14, w15
  f4:	b.ge	bc <BZ2_hbMakeCodeLengths+0xbc>  // b.tcont
  f8:	ldr	w13, [x23, x9, lsl #2]
  fc:	str	w12, [x10]
 100:	asr	w14, w11, #1
 104:	ldrsw	x12, [x25, w14, sxtw #2]
 108:	ldr	w10, [x23, x12, lsl #2]
 10c:	cmp	w13, w10
 110:	add	x10, x25, w11, sxtw #2
 114:	mov	w11, w14
 118:	b.lt	fc <BZ2_hbMakeCodeLengths+0xfc>  // b.tstop
 11c:	b	bc <BZ2_hbMakeCodeLengths+0xbc>
 120:	mov	w28, wzr
 124:	cmp	w28, #0x104
 128:	b.cc	134 <BZ2_hbMakeCodeLengths+0x134>  // b.lo, b.ul, b.last
 12c:	mov	w0, #0x7d1                 	// #2001
 130:	bl	0 <BZ2_bz__AssertH__fail>
 134:	cmp	w28, #0x2
 138:	mov	w8, w20
 13c:	b.lt	308 <BZ2_hbMakeCodeLengths+0x308>  // b.tstop
 140:	ldr	x8, [sp, #16]
 144:	mov	w9, w28
 148:	b	15c <BZ2_hbMakeCodeLengths+0x15c>
 14c:	cmp	x9, #0x2
 150:	mov	x9, x10
 154:	str	w8, [x11]
 158:	b.le	308 <BZ2_hbMakeCodeLengths+0x308>
 15c:	ldr	w12, [x25, x9, lsl #2]
 160:	ldrsw	x11, [sp, #4156]
 164:	cmp	x9, #0x3
 168:	sub	x10, x9, #0x1
 16c:	str	w12, [sp, #4156]
 170:	b.lt	1dc <BZ2_hbMakeCodeLengths+0x1dc>  // b.tstop
 174:	sxtw	x13, w12
 178:	ldr	w13, [x23, x13, lsl #2]
 17c:	mov	w14, #0x1                   	// #1
 180:	mov	w16, #0x2                   	// #2
 184:	cmp	x10, w16, sxtw
 188:	b.le	1b0 <BZ2_hbMakeCodeLengths+0x1b0>
 18c:	sxtw	x15, w16
 190:	orr	x15, x15, #0x1
 194:	ldrsw	x17, [x25, x15, lsl #2]
 198:	ldrsw	x18, [x25, w16, sxtw #2]
 19c:	ldr	w17, [x23, x17, lsl #2]
 1a0:	ldr	w18, [x23, x18, lsl #2]
 1a4:	cmp	w17, w18
 1a8:	csel	w15, w15, w16, lt  // lt = tstop
 1ac:	b	1b4 <BZ2_hbMakeCodeLengths+0x1b4>
 1b0:	mov	w15, w16
 1b4:	ldrsw	x17, [x25, w15, sxtw #2]
 1b8:	ldr	w16, [x23, x17, lsl #2]
 1bc:	cmp	w13, w16
 1c0:	b.lt	1e4 <BZ2_hbMakeCodeLengths+0x1e4>  // b.tstop
 1c4:	lsl	w16, w15, #1
 1c8:	cmp	x9, w16, sxtw
 1cc:	str	w17, [x25, w14, sxtw #2]
 1d0:	mov	w14, w15
 1d4:	b.gt	184 <BZ2_hbMakeCodeLengths+0x184>
 1d8:	b	1e8 <BZ2_hbMakeCodeLengths+0x1e8>
 1dc:	mov	w15, #0x1                   	// #1
 1e0:	b	1e8 <BZ2_hbMakeCodeLengths+0x1e8>
 1e4:	mov	w15, w14
 1e8:	str	w12, [x25, w15, sxtw #2]
 1ec:	ldr	w13, [x25, x10, lsl #2]
 1f0:	ldrsw	x12, [sp, #4156]
 1f4:	cmp	x9, #0x3
 1f8:	str	w13, [sp, #4156]
 1fc:	b.gt	208 <BZ2_hbMakeCodeLengths+0x208>
 200:	mov	w17, #0x1                   	// #1
 204:	b	278 <BZ2_hbMakeCodeLengths+0x278>
 208:	sxtw	x14, w13
 20c:	ldr	w14, [x23, x14, lsl #2]
 210:	sub	x15, x9, #0x2
 214:	mov	w16, #0x1                   	// #1
 218:	mov	w18, #0x2                   	// #2
 21c:	cmp	x15, w18, sxtw
 220:	b.le	248 <BZ2_hbMakeCodeLengths+0x248>
 224:	sxtw	x17, w18
 228:	orr	x17, x17, #0x1
 22c:	ldrsw	x0, [x25, x17, lsl #2]
 230:	ldrsw	x1, [x25, w18, sxtw #2]
 234:	ldr	w0, [x23, x0, lsl #2]
 238:	ldr	w1, [x23, x1, lsl #2]
 23c:	cmp	w0, w1
 240:	csel	w17, w17, w18, lt  // lt = tstop
 244:	b	24c <BZ2_hbMakeCodeLengths+0x24c>
 248:	mov	w17, w18
 24c:	ldrsw	x0, [x25, w17, sxtw #2]
 250:	ldr	w18, [x23, x0, lsl #2]
 254:	cmp	w14, w18
 258:	b.lt	274 <BZ2_hbMakeCodeLengths+0x274>  // b.tstop
 25c:	lsl	w18, w17, #1
 260:	cmp	x15, w18, sxtw
 264:	str	w0, [x25, w16, sxtw #2]
 268:	mov	w16, w17
 26c:	b.ge	21c <BZ2_hbMakeCodeLengths+0x21c>  // b.tcont
 270:	b	278 <BZ2_hbMakeCodeLengths+0x278>
 274:	mov	w17, w16
 278:	lsl	x15, x12, #2
 27c:	lsl	x16, x11, #2
 280:	str	w13, [x25, w17, sxtw #2]
 284:	ldr	w13, [x23, x16]
 288:	ldr	w17, [x23, x15]
 28c:	add	x8, x8, #0x1
 290:	add	x11, x25, x10, lsl #2
 294:	and	w14, w13, #0xffffff00
 298:	and	w18, w17, #0xffffff00
 29c:	and	w13, w13, #0xff
 2a0:	and	w17, w17, #0xff
 2a4:	asr	w12, w10, #1
 2a8:	str	w8, [x11]
 2ac:	cmp	w13, w17
 2b0:	add	w18, w18, w14
 2b4:	ldrsw	x14, [x25, w12, sxtw #2]
 2b8:	csel	w13, w13, w17, hi  // hi = pmore
 2bc:	add	w13, w13, #0x1
 2c0:	orr	w13, w13, w18
 2c4:	lsl	x17, x8, #2
 2c8:	str	w13, [x23, x17]
 2cc:	ldr	w18, [x23, x14, lsl #2]
 2d0:	str	w8, [x26, x15]
 2d4:	str	w8, [x26, x16]
 2d8:	str	w27, [x26, x17]
 2dc:	cmp	w13, w18
 2e0:	b.ge	14c <BZ2_hbMakeCodeLengths+0x14c>  // b.tcont
 2e4:	str	w14, [x11]
 2e8:	asr	w15, w12, #1
 2ec:	ldrsw	x14, [x25, w15, sxtw #2]
 2f0:	ldr	w11, [x23, x14, lsl #2]
 2f4:	cmp	w13, w11
 2f8:	add	x11, x25, w12, sxtw #2
 2fc:	mov	w12, w15
 300:	b.lt	2e4 <BZ2_hbMakeCodeLengths+0x2e4>  // b.tstop
 304:	b	14c <BZ2_hbMakeCodeLengths+0x14c>
 308:	cmp	w8, #0x204
 30c:	b.lt	318 <BZ2_hbMakeCodeLengths+0x318>  // b.tstop
 310:	mov	w0, #0x7d2                 	// #2002
 314:	bl	0 <BZ2_bz__AssertH__fail>
 318:	cmp	w20, #0x1
 31c:	b.lt	364 <BZ2_hbMakeCodeLengths+0x364>  // b.tstop
 320:	mov	w8, wzr
 324:	mov	w9, #0x1                   	// #1
 328:	mov	w10, #0xffffffff            	// #-1
 32c:	mov	w11, w9
 330:	ldr	w11, [x26, w11, sxtw #2]
 334:	add	w10, w10, #0x1
 338:	tbz	w11, #31, 330 <BZ2_hbMakeCodeLengths+0x330>
 33c:	add	x11, x9, x21
 340:	cmp	w10, w19
 344:	add	x9, x9, #0x1
 348:	csinc	w8, w8, wzr, le
 34c:	cmp	x9, x22
 350:	sturb	w10, [x11, #-1]
 354:	b.ne	328 <BZ2_hbMakeCodeLengths+0x328>  // b.any
 358:	tst	w8, #0xff
 35c:	b.ne	370 <BZ2_hbMakeCodeLengths+0x370>  // b.any
 360:	b	3ac <BZ2_hbMakeCodeLengths+0x3ac>
 364:	mov	w8, wzr
 368:	tst	w8, #0xff
 36c:	b.eq	3ac <BZ2_hbMakeCodeLengths+0x3ac>  // b.none
 370:	cmp	w20, #0x1
 374:	b.lt	94 <BZ2_hbMakeCodeLengths+0x94>  // b.tstop
 378:	ldr	x9, [sp, #8]
 37c:	mov	x8, x24
 380:	ldr	w10, [x9]
 384:	asr	w10, w10, #8
 388:	cmp	w10, #0x0
 38c:	cinc	w10, w10, lt  // lt = tstop
 390:	lsl	w10, w10, #7
 394:	and	w10, w10, #0xffffff00
 398:	add	w10, w10, #0x100
 39c:	subs	x8, x8, #0x1
 3a0:	str	w10, [x9], #4
 3a4:	b.ne	380 <BZ2_hbMakeCodeLengths+0x380>  // b.any
 3a8:	b	94 <BZ2_hbMakeCodeLengths+0x94>
 3ac:	add	sp, sp, #0x1, lsl #12
 3b0:	add	sp, sp, #0x450
 3b4:	ldp	x20, x19, [sp, #80]
 3b8:	ldp	x22, x21, [sp, #64]
 3bc:	ldp	x24, x23, [sp, #48]
 3c0:	ldp	x26, x25, [sp, #32]
 3c4:	ldp	x28, x27, [sp, #16]
 3c8:	ldp	x29, x30, [sp], #96
 3cc:	ret

00000000000003d0 <BZ2_hbAssignCodes>:
 3d0:	cmp	w2, w3
 3d4:	b.le	3dc <BZ2_hbAssignCodes+0xc>
 3d8:	ret
 3dc:	mov	w8, wzr
 3e0:	mov	w9, w4
 3e4:	b	3f8 <BZ2_hbAssignCodes+0x28>
 3e8:	cmp	w2, w3
 3ec:	add	w2, w2, #0x1
 3f0:	lsl	w8, w8, #1
 3f4:	b.ge	3d8 <BZ2_hbAssignCodes+0x8>  // b.tcont
 3f8:	cmp	w4, #0x1
 3fc:	b.lt	3e8 <BZ2_hbAssignCodes+0x18>  // b.tstop
 400:	mov	x10, x9
 404:	mov	x11, x1
 408:	mov	x12, x0
 40c:	b	420 <BZ2_hbAssignCodes+0x50>
 410:	add	x12, x12, #0x4
 414:	subs	x10, x10, #0x1
 418:	add	x11, x11, #0x1
 41c:	b.eq	3e8 <BZ2_hbAssignCodes+0x18>  // b.none
 420:	ldrb	w13, [x11]
 424:	cmp	w2, w13
 428:	b.ne	410 <BZ2_hbAssignCodes+0x40>  // b.any
 42c:	str	w8, [x12]
 430:	add	w8, w8, #0x1
 434:	b	410 <BZ2_hbAssignCodes+0x40>

0000000000000438 <BZ2_hbCreateDecodeTables>:
 438:	cmp	w4, w5
 43c:	b.le	538 <BZ2_hbCreateDecodeTables+0x100>
 440:	movi	v0.2d, #0x0
 444:	cmp	w6, #0x0
 448:	stur	q0, [x1, #76]
 44c:	stp	q0, q0, [x1, #48]
 450:	stp	q0, q0, [x1, #16]
 454:	str	q0, [x1]
 458:	b.le	47c <BZ2_hbCreateDecodeTables+0x44>
 45c:	mov	w8, w6
 460:	ldrb	w9, [x3], #1
 464:	subs	x8, x8, #0x1
 468:	add	x9, x1, x9, lsl #2
 46c:	ldr	w10, [x9, #4]
 470:	add	w10, w10, #0x1
 474:	str	w10, [x9, #4]
 478:	b.ne	460 <BZ2_hbCreateDecodeTables+0x28>  // b.any
 47c:	ldr	w8, [x1]
 480:	mov	w9, #0x4                   	// #4
 484:	ldr	w10, [x1, x9]
 488:	add	w8, w10, w8
 48c:	str	w8, [x1, x9]
 490:	add	x9, x9, #0x4
 494:	cmp	x9, #0x5c
 498:	b.ne	484 <BZ2_hbCreateDecodeTables+0x4c>  // b.any
 49c:	movi	v0.2d, #0x0
 4a0:	cmp	w4, w5
 4a4:	stur	q0, [x0, #76]
 4a8:	stp	q0, q0, [x0, #48]
 4ac:	stp	q0, q0, [x0, #16]
 4b0:	str	q0, [x0]
 4b4:	b.gt	4f0 <BZ2_hbCreateDecodeTables+0xb8>
 4b8:	mov	w8, wzr
 4bc:	sxtw	x9, w4
 4c0:	sxtw	x10, w5
 4c4:	lsl	x11, x9, #2
 4c8:	add	x12, x1, x11
 4cc:	ldp	w12, w13, [x12]
 4d0:	cmp	x9, x10
 4d4:	add	x9, x9, #0x1
 4d8:	sub	w12, w13, w12
 4dc:	add	w8, w12, w8
 4e0:	sub	w12, w8, #0x1
 4e4:	lsl	w8, w8, #1
 4e8:	str	w12, [x0, x11]
 4ec:	b.lt	4c4 <BZ2_hbCreateDecodeTables+0x8c>  // b.tstop
 4f0:	cmp	w4, w5
 4f4:	b.ge	534 <BZ2_hbCreateDecodeTables+0xfc>  // b.tcont
 4f8:	sxtw	x9, w4
 4fc:	sxtw	x10, w5
 500:	sbfiz	x11, x4, #2, #32
 504:	sub	x9, x10, x9
 508:	add	x10, x11, x1
 50c:	add	x8, x0, x11
 510:	add	x10, x10, #0x4
 514:	ldr	w11, [x8], #4
 518:	ldr	w12, [x10]
 51c:	subs	x9, x9, #0x1
 520:	lsl	w11, w11, #1
 524:	sub	w11, w11, w12
 528:	add	w11, w11, #0x2
 52c:	str	w11, [x10], #4
 530:	b.ne	514 <BZ2_hbCreateDecodeTables+0xdc>  // b.any
 534:	ret
 538:	mov	w8, wzr
 53c:	mov	w9, w6
 540:	mov	w10, w4
 544:	b	554 <BZ2_hbCreateDecodeTables+0x11c>
 548:	cmp	w10, w5
 54c:	add	w10, w10, #0x1
 550:	b.ge	440 <BZ2_hbCreateDecodeTables+0x8>  // b.tcont
 554:	cmp	w6, #0x1
 558:	b.lt	548 <BZ2_hbCreateDecodeTables+0x110>  // b.tstop
 55c:	mov	x11, xzr
 560:	b	570 <BZ2_hbCreateDecodeTables+0x138>
 564:	add	x11, x11, #0x1
 568:	cmp	x9, x11
 56c:	b.eq	548 <BZ2_hbCreateDecodeTables+0x110>  // b.none
 570:	ldrb	w12, [x3, x11]
 574:	cmp	w10, w12
 578:	b.ne	564 <BZ2_hbCreateDecodeTables+0x12c>  // b.any
 57c:	str	w11, [x2, w8, sxtw #2]
 580:	add	w8, w8, #0x1
 584:	b	564 <BZ2_hbCreateDecodeTables+0x12c>

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bsInitWrite>:
       0:	str	xzr, [x0, #640]
       4:	ret

0000000000000008 <BZ2_compressBlock>:
       8:	stp	x29, x30, [sp, #-32]!
       c:	stp	x20, x19, [sp, #16]
      10:	mov	x29, sp
      14:	ldr	w5, [x0, #108]
      18:	mov	x19, x0
      1c:	mov	w20, w1
      20:	cmp	w5, #0x1
      24:	b.lt	64 <BZ2_compressBlock+0x5c>  // b.tstop
      28:	ldr	w8, [x19, #648]
      2c:	ldr	w9, [x19, #652]
      30:	ldr	w2, [x19, #660]
      34:	mvn	w3, w8
      38:	eon	w4, w8, w9, ror #31
      3c:	cmp	w2, #0x2
      40:	str	w3, [x19, #648]
      44:	str	w4, [x19, #652]
      48:	b.lt	50 <BZ2_compressBlock+0x48>  // b.tstop
      4c:	str	wzr, [x19, #116]
      50:	ldr	w8, [x19, #656]
      54:	cmp	w8, #0x2
      58:	b.ge	1c8 <BZ2_compressBlock+0x1c0>  // b.tcont
      5c:	mov	x0, x19
      60:	bl	0 <BZ2_blockSort>
      64:	ldr	x8, [x19, #32]
      68:	ldrsw	x9, [x19, #108]
      6c:	ldr	w10, [x19, #660]
      70:	add	x8, x8, x9
      74:	cmp	w10, #0x1
      78:	str	x8, [x19, #80]
      7c:	b.ne	bc <BZ2_compressBlock+0xb4>  // b.any
      80:	mov	x0, x19
      84:	bl	0 <BZ2_bsInitWrite>
      88:	mov	w1, #0x42                  	// #66
      8c:	mov	x0, x19
      90:	bl	1fc <bsPutUChar>
      94:	mov	w1, #0x5a                  	// #90
      98:	mov	x0, x19
      9c:	bl	1fc <bsPutUChar>
      a0:	mov	w1, #0x68                  	// #104
      a4:	mov	x0, x19
      a8:	bl	1fc <bsPutUChar>
      ac:	ldrb	w8, [x19, #664]
      b0:	mov	x0, x19
      b4:	add	w1, w8, #0x30
      b8:	bl	1fc <bsPutUChar>
      bc:	ldr	w8, [x19, #108]
      c0:	cmp	w8, #0x1
      c4:	b.lt	14c <BZ2_compressBlock+0x144>  // b.tstop
      c8:	mov	w1, #0x31                  	// #49
      cc:	mov	x0, x19
      d0:	bl	1fc <bsPutUChar>
      d4:	mov	w1, #0x41                  	// #65
      d8:	mov	x0, x19
      dc:	bl	1fc <bsPutUChar>
      e0:	mov	w1, #0x59                  	// #89
      e4:	mov	x0, x19
      e8:	bl	1fc <bsPutUChar>
      ec:	mov	w1, #0x26                  	// #38
      f0:	mov	x0, x19
      f4:	bl	1fc <bsPutUChar>
      f8:	mov	w1, #0x53                  	// #83
      fc:	mov	x0, x19
     100:	bl	1fc <bsPutUChar>
     104:	mov	w1, #0x59                  	// #89
     108:	mov	x0, x19
     10c:	bl	1fc <bsPutUChar>
     110:	ldr	w1, [x19, #648]
     114:	mov	x0, x19
     118:	bl	218 <bsPutUInt32>
     11c:	mov	w1, #0x1                   	// #1
     120:	mov	x0, x19
     124:	mov	w2, wzr
     128:	bl	274 <bsW>
     12c:	ldr	w2, [x19, #48]
     130:	mov	w1, #0x18                  	// #24
     134:	mov	x0, x19
     138:	bl	274 <bsW>
     13c:	mov	x0, x19
     140:	bl	2e0 <generateMTFValues>
     144:	mov	x0, x19
     148:	bl	52c <sendMTFValues>
     14c:	tst	w20, #0xff
     150:	b.eq	1bc <BZ2_compressBlock+0x1b4>  // b.none
     154:	mov	w1, #0x17                  	// #23
     158:	mov	x0, x19
     15c:	bl	1fc <bsPutUChar>
     160:	mov	w1, #0x72                  	// #114
     164:	mov	x0, x19
     168:	bl	1fc <bsPutUChar>
     16c:	mov	w1, #0x45                  	// #69
     170:	mov	x0, x19
     174:	bl	1fc <bsPutUChar>
     178:	mov	w1, #0x38                  	// #56
     17c:	mov	x0, x19
     180:	bl	1fc <bsPutUChar>
     184:	mov	w1, #0x50                  	// #80
     188:	mov	x0, x19
     18c:	bl	1fc <bsPutUChar>
     190:	mov	w1, #0x90                  	// #144
     194:	mov	x0, x19
     198:	bl	1fc <bsPutUChar>
     19c:	ldr	w1, [x19, #652]
     1a0:	mov	x0, x19
     1a4:	bl	218 <bsPutUInt32>
     1a8:	ldr	w8, [x19, #656]
     1ac:	cmp	w8, #0x2
     1b0:	b.ge	1e0 <BZ2_compressBlock+0x1d8>  // b.tcont
     1b4:	mov	x0, x19
     1b8:	bl	1ddc <bsFinishWrite>
     1bc:	ldp	x20, x19, [sp, #16]
     1c0:	ldp	x29, x30, [sp], #32
     1c4:	ret
     1c8:	adrp	x8, 0 <stderr>
     1cc:	ldr	x0, [x8]
     1d0:	adrp	x1, 0 <BZ2_bsInitWrite>
     1d4:	add	x1, x1, #0x0
     1d8:	bl	0 <fprintf>
     1dc:	b	5c <BZ2_compressBlock+0x54>
     1e0:	adrp	x8, 0 <stderr>
     1e4:	ldr	x0, [x8]
     1e8:	ldr	w2, [x19, #652]
     1ec:	adrp	x1, 0 <BZ2_bsInitWrite>
     1f0:	add	x1, x1, #0x0
     1f4:	bl	0 <fprintf>
     1f8:	b	1b4 <BZ2_compressBlock+0x1ac>

00000000000001fc <bsPutUChar>:
     1fc:	stp	x29, x30, [sp, #-16]!
     200:	mov	x29, sp
     204:	and	w2, w1, #0xff
     208:	mov	w1, #0x8                   	// #8
     20c:	bl	274 <bsW>
     210:	ldp	x29, x30, [sp], #16
     214:	ret

0000000000000218 <bsPutUInt32>:
     218:	stp	x29, x30, [sp, #-32]!
     21c:	stp	x20, x19, [sp, #16]
     220:	mov	x29, sp
     224:	mov	w19, w1
     228:	lsr	w2, w1, #24
     22c:	mov	w1, #0x8                   	// #8
     230:	mov	x20, x0
     234:	bl	274 <bsW>
     238:	ubfx	w2, w19, #16, #8
     23c:	mov	w1, #0x8                   	// #8
     240:	mov	x0, x20
     244:	bl	274 <bsW>
     248:	ubfx	w2, w19, #8, #8
     24c:	mov	w1, #0x8                   	// #8
     250:	mov	x0, x20
     254:	bl	274 <bsW>
     258:	and	w2, w19, #0xff
     25c:	mov	w1, #0x8                   	// #8
     260:	mov	x0, x20
     264:	bl	274 <bsW>
     268:	ldp	x20, x19, [sp, #16]
     26c:	ldp	x29, x30, [sp], #32
     270:	ret

0000000000000274 <bsW>:
     274:	ldr	w8, [x0, #644]
     278:	cmp	w8, #0x8
     27c:	b.lt	2c0 <bsW+0x4c>  // b.tstop
     280:	add	x8, x0, #0x280
     284:	ldr	x9, [x0, #80]
     288:	ldrsw	x10, [x0, #116]
     28c:	ldrb	w8, [x8, #3]
     290:	strb	w8, [x9, x10]
     294:	ldr	w8, [x0, #116]
     298:	ldr	w9, [x0, #640]
     29c:	ldr	w10, [x0, #644]
     2a0:	add	w11, w8, #0x1
     2a4:	lsl	w9, w9, #8
     2a8:	sub	w8, w10, #0x8
     2ac:	cmp	w10, #0xf
     2b0:	str	w11, [x0, #116]
     2b4:	str	w9, [x0, #640]
     2b8:	str	w8, [x0, #644]
     2bc:	b.gt	280 <bsW+0xc>
     2c0:	ldr	w9, [x0, #640]
     2c4:	add	w8, w8, w1
     2c8:	neg	w10, w8
     2cc:	lsl	w10, w2, w10
     2d0:	orr	w9, w9, w10
     2d4:	str	w9, [x0, #640]
     2d8:	str	w8, [x0, #644]
     2dc:	ret

00000000000002e0 <generateMTFValues>:
     2e0:	sub	sp, sp, #0x140
     2e4:	stp	x29, x30, [sp, #256]
     2e8:	stp	x28, x23, [sp, #272]
     2ec:	stp	x22, x21, [sp, #288]
     2f0:	stp	x20, x19, [sp, #304]
     2f4:	add	x29, sp, #0x100
     2f8:	ldp	x21, x22, [x0, #56]
     2fc:	ldr	x20, [x0, #72]
     300:	mov	x19, x0
     304:	bl	1e28 <makeMaps_e>
     308:	ldr	w23, [x19, #124]
     30c:	cmn	w23, #0x1
     310:	b.lt	32c <generateMTFValues+0x4c>  // b.tstop
     314:	add	w8, w23, #0x1
     318:	lsl	x8, x8, #2
     31c:	add	x0, x19, #0x2a0
     320:	add	x2, x8, #0x4
     324:	mov	w1, wzr
     328:	bl	0 <memset>
     32c:	cmp	w23, #0x1
     330:	b.lt	34c <generateMTFValues+0x6c>  // b.tstop
     334:	mov	x8, xzr
     338:	mov	x9, sp
     33c:	strb	w8, [x9, x8]
     340:	add	x8, x8, #0x1
     344:	cmp	x23, x8
     348:	b.ne	33c <generateMTFValues+0x5c>  // b.any
     34c:	ldr	w15, [x19, #108]
     350:	add	w8, w23, #0x1
     354:	cmp	w15, #0x1
     358:	b.lt	484 <generateMTFValues+0x1a4>  // b.tstop
     35c:	mov	x11, sp
     360:	mov	x10, xzr
     364:	mov	w14, wzr
     368:	mov	w9, wzr
     36c:	orr	x12, x11, #0x1
     370:	mov	w13, #0x1                   	// #1
     374:	b	38c <generateMTFValues+0xac>
     378:	add	w14, w14, #0x1
     37c:	ldrsw	x15, [x19, #108]
     380:	add	x10, x10, #0x1
     384:	cmp	x10, x15
     388:	b.ge	48c <generateMTFValues+0x1ac>  // b.tcont
     38c:	ldr	w16, [x21, x10, lsl #2]
     390:	sub	w16, w16, #0x1
     394:	and	w15, w15, w16, asr #31
     398:	add	w15, w15, w16
     39c:	ldrb	w15, [x22, w15, sxtw]
     3a0:	ldrb	w16, [sp]
     3a4:	add	x15, x19, x15
     3a8:	ldrb	w15, [x15, #384]
     3ac:	cmp	w16, w15
     3b0:	b.eq	378 <generateMTFValues+0x98>  // b.none
     3b4:	subs	w16, w14, #0x1
     3b8:	b.lt	420 <generateMTFValues+0x140>  // b.tstop
     3bc:	add	x14, x20, w9, sxtw #1
     3c0:	add	w9, w9, #0x1
     3c4:	tbnz	w16, #0, 3e4 <generateMTFValues+0x104>
     3c8:	strh	wzr, [x14]
     3cc:	ldr	w17, [x19, #672]
     3d0:	add	w17, w17, #0x1
     3d4:	str	w17, [x19, #672]
     3d8:	subs	w17, w16, #0x2
     3dc:	b.ge	3fc <generateMTFValues+0x11c>  // b.tcont
     3e0:	b	41c <generateMTFValues+0x13c>
     3e4:	strh	w13, [x14]
     3e8:	ldr	w17, [x19, #676]
     3ec:	add	w17, w17, #0x1
     3f0:	str	w17, [x19, #676]
     3f4:	subs	w17, w16, #0x2
     3f8:	b.lt	41c <generateMTFValues+0x13c>  // b.tstop
     3fc:	sub	w16, w16, #0x1
     400:	cmp	w17, #0x0
     404:	csel	w16, w16, w17, lt  // lt = tstop
     408:	add	x14, x14, #0x2
     40c:	asr	w16, w16, #1
     410:	add	w9, w9, #0x1
     414:	tbnz	w16, #0, 3e4 <generateMTFValues+0x104>
     418:	b	3c8 <generateMTFValues+0xe8>
     41c:	mov	w14, wzr
     420:	ldrb	w17, [sp, #1]
     424:	ldrb	w16, [sp]
     428:	cmp	w15, w17
     42c:	strb	w16, [sp, #1]
     430:	b.ne	440 <generateMTFValues+0x160>  // b.any
     434:	mov	w18, w17
     438:	mov	x16, x12
     43c:	b	458 <generateMTFValues+0x178>
     440:	mov	x16, x12
     444:	ldrb	w18, [x16, #1]!
     448:	cmp	w15, w18
     44c:	strb	w17, [x16]
     450:	mov	w17, w18
     454:	b.ne	444 <generateMTFValues+0x164>  // b.any
     458:	sub	w15, w16, w11
     45c:	sxtw	x15, w15
     460:	add	x15, x15, #0x1
     464:	strb	w18, [sp]
     468:	strh	w15, [x20, w9, sxtw #1]
     46c:	add	x15, x19, x15, lsl #2
     470:	ldr	w16, [x15, #672]
     474:	add	w9, w9, #0x1
     478:	add	w16, w16, #0x1
     47c:	str	w16, [x15, #672]
     480:	b	37c <generateMTFValues+0x9c>
     484:	mov	w9, wzr
     488:	mov	w14, wzr
     48c:	subs	w11, w14, #0x1
     490:	b.lt	4f8 <generateMTFValues+0x218>  // b.tstop
     494:	add	x10, x20, w9, sxtw #1
     498:	add	w9, w9, #0x1
     49c:	mov	w12, #0x1                   	// #1
     4a0:	tbnz	w11, #0, 4c0 <generateMTFValues+0x1e0>
     4a4:	strh	wzr, [x10]
     4a8:	ldr	w13, [x19, #672]
     4ac:	add	w13, w13, #0x1
     4b0:	str	w13, [x19, #672]
     4b4:	subs	w13, w11, #0x2
     4b8:	b.ge	4d8 <generateMTFValues+0x1f8>  // b.tcont
     4bc:	b	4f8 <generateMTFValues+0x218>
     4c0:	strh	w12, [x10]
     4c4:	ldr	w13, [x19, #676]
     4c8:	add	w13, w13, #0x1
     4cc:	str	w13, [x19, #676]
     4d0:	subs	w13, w11, #0x2
     4d4:	b.lt	4f8 <generateMTFValues+0x218>  // b.tstop
     4d8:	sub	w11, w11, #0x1
     4dc:	cmp	w13, #0x0
     4e0:	csel	w11, w11, w13, lt  // lt = tstop
     4e4:	add	x10, x10, #0x2
     4e8:	asr	w11, w11, #1
     4ec:	add	w9, w9, #0x1
     4f0:	tbnz	w11, #0, 4c0 <generateMTFValues+0x1e0>
     4f4:	b	4a4 <generateMTFValues+0x1c4>
     4f8:	strh	w8, [x20, w9, sxtw #1]
     4fc:	add	x8, x19, w8, sxtw #2
     500:	ldr	w10, [x8, #672]
     504:	add	w9, w9, #0x1
     508:	add	w10, w10, #0x1
     50c:	str	w10, [x8, #672]
     510:	str	w9, [x19, #668]
     514:	ldp	x20, x19, [sp, #304]
     518:	ldp	x22, x21, [sp, #288]
     51c:	ldp	x28, x23, [sp, #272]
     520:	ldp	x29, x30, [sp, #256]
     524:	add	sp, sp, #0x140
     528:	ret

000000000000052c <sendMTFValues>:
     52c:	sub	sp, sp, #0xf0
     530:	stp	x29, x30, [sp, #144]
     534:	stp	x28, x27, [sp, #160]
     538:	stp	x26, x25, [sp, #176]
     53c:	stp	x24, x23, [sp, #192]
     540:	stp	x22, x21, [sp, #208]
     544:	stp	x20, x19, [sp, #224]
     548:	add	x29, sp, #0x90
     54c:	ldr	w8, [x0, #656]
     550:	ldr	x27, [x0, #72]
     554:	mov	x19, x0
     558:	cmp	w8, #0x3
     55c:	adrp	x8, 0 <stderr>
     560:	b.ge	1d38 <sendMTFValues+0x180c>  // b.tcont
     564:	ldrsw	x12, [x19, #124]
     568:	mov	w8, #0x934c                	// #37708
     56c:	mov	x21, xzr
     570:	add	x22, x19, x8
     574:	add	w9, w12, #0x2
     578:	cmp	w9, #0x1
     57c:	csinc	w20, w9, wzr, gt
     580:	str	x12, [sp, #48]
     584:	b	594 <sendMTFValues+0x68>
     588:	add	x21, x21, #0x102
     58c:	cmp	x21, #0x60c
     590:	b.eq	5b4 <sendMTFValues+0x88>  // b.none
     594:	cmn	w12, #0x1
     598:	b.lt	588 <sendMTFValues+0x5c>  // b.tstop
     59c:	add	x0, x22, x21
     5a0:	mov	w1, #0xf                   	// #15
     5a4:	mov	x2, x20
     5a8:	bl	0 <memset>
     5ac:	ldr	x12, [sp, #48]
     5b0:	b	588 <sendMTFValues+0x5c>
     5b4:	ldr	w8, [x19, #668]
     5b8:	cmp	w8, #0x0
     5bc:	b.gt	5cc <sendMTFValues+0xa0>
     5c0:	mov	w0, #0xbb9                 	// #3001
     5c4:	bl	0 <BZ2_bz__AssertH__fail>
     5c8:	ldr	x12, [sp, #48]
     5cc:	ldr	w14, [x19, #668]
     5d0:	add	x13, x12, #0x2
     5d4:	cmp	w14, #0xc8
     5d8:	b.ge	5e4 <sendMTFValues+0xb8>  // b.tcont
     5dc:	mov	w8, #0x2                   	// #2
     5e0:	b	610 <sendMTFValues+0xe4>
     5e4:	cmp	w14, #0x258
     5e8:	b.ge	5f4 <sendMTFValues+0xc8>  // b.tcont
     5ec:	mov	w8, #0x3                   	// #3
     5f0:	b	610 <sendMTFValues+0xe4>
     5f4:	cmp	w14, #0x4b0
     5f8:	b.ge	604 <sendMTFValues+0xd8>  // b.tcont
     5fc:	mov	w8, #0x4                   	// #4
     600:	b	610 <sendMTFValues+0xe4>
     604:	cmp	w14, #0x960
     608:	mov	w8, #0x5                   	// #5
     60c:	cinc	w8, w8, ge  // ge = tcont
     610:	mov	w9, #0x102                 	// #258
     614:	mov	w20, w8
     618:	mov	w10, #0x924a                	// #37450
     61c:	umaddl	x8, w8, w9, x19
     620:	mov	w24, wzr
     624:	add	x28, x19, #0x2a4
     628:	add	x21, x8, x10
     62c:	mov	w22, #0xf                   	// #15
     630:	mov	x23, x20
     634:	str	x13, [sp, #32]
     638:	b	650 <sendMTFValues+0x124>
     63c:	sub	w14, w14, w25
     640:	sub	x21, x21, #0x102
     644:	subs	x23, x23, #0x1
     648:	add	w24, w26, #0x1
     64c:	b.le	768 <sendMTFValues+0x23c>
     650:	sdiv	w8, w14, w23
     654:	mov	w25, wzr
     658:	cmp	w8, #0x1
     65c:	sub	w26, w24, #0x1
     660:	b.lt	694 <sendMTFValues+0x168>  // b.tstop
     664:	cmp	w26, w12
     668:	b.gt	694 <sendMTFValues+0x168>
     66c:	mov	w25, wzr
     670:	sxtw	x9, w26
     674:	ldr	w10, [x28, x9, lsl #2]
     678:	add	x26, x9, #0x1
     67c:	add	w25, w10, w25
     680:	cmp	w25, w8
     684:	b.ge	694 <sendMTFValues+0x168>  // b.tcont
     688:	cmp	x9, x12
     68c:	mov	x9, x26
     690:	b.lt	674 <sendMTFValues+0x148>  // b.tstop
     694:	cmp	w26, w24
     698:	b.le	6c4 <sendMTFValues+0x198>
     69c:	cmp	x23, x20
     6a0:	b.eq	6c4 <sendMTFValues+0x198>  // b.none
     6a4:	cmp	x23, #0x1
     6a8:	b.eq	6c4 <sendMTFValues+0x198>  // b.none
     6ac:	sub	w8, w20, w23
     6b0:	tbz	w8, #0, 6c4 <sendMTFValues+0x198>
     6b4:	add	x8, x19, w26, sxtw #2
     6b8:	ldr	w8, [x8, #672]
     6bc:	sub	w26, w26, #0x1
     6c0:	sub	w25, w25, w8
     6c4:	ldr	w8, [x19, #656]
     6c8:	cmp	w8, #0x3
     6cc:	b.ge	704 <sendMTFValues+0x1d8>  // b.tcont
     6d0:	cmn	w12, #0x1
     6d4:	b.lt	63c <sendMTFValues+0x110>  // b.tstop
     6d8:	mov	x8, xzr
     6dc:	sxtw	x9, w26
     6e0:	sxtw	x10, w24
     6e4:	cmp	x8, x9
     6e8:	ccmp	x8, x10, #0x8, le
     6ec:	csel	w11, w22, wzr, lt  // lt = tstop
     6f0:	strb	w11, [x21, x8]
     6f4:	add	x8, x8, #0x1
     6f8:	cmp	x8, x13
     6fc:	b.lt	6e4 <sendMTFValues+0x1b8>  // b.tstop
     700:	b	63c <sendMTFValues+0x110>
     704:	ldr	s0, [x19, #668]
     708:	adrp	x8, 0 <stderr>
     70c:	ldr	x0, [x8]
     710:	scvtf	s1, w25
     714:	mov	x8, #0x4059000000000000    	// #4636737291354636288
     718:	fcvt	d1, s1
     71c:	fmov	d2, x8
     720:	scvtf	s0, s0
     724:	fmul	d1, d1, d2
     728:	fcvt	d0, s0
     72c:	adrp	x1, 0 <BZ2_bsInitWrite>
     730:	fdiv	d0, d1, d0
     734:	add	x1, x1, #0x0
     738:	mov	w2, w23
     73c:	mov	w3, w24
     740:	mov	w4, w26
     744:	mov	w5, w25
     748:	stur	w14, [x29, #-64]
     74c:	bl	0 <fprintf>
     750:	ldur	w14, [x29, #-64]
     754:	ldr	x13, [sp, #32]
     758:	ldr	x12, [sp, #48]
     75c:	cmn	w12, #0x1
     760:	b.lt	63c <sendMTFValues+0x110>  // b.tstop
     764:	b	6d8 <sendMTFValues+0x1ac>
     768:	lsl	w8, w20, #2
     76c:	str	x8, [sp, #16]
     770:	add	w8, w12, #0x2
     774:	lsl	w9, w20, #1
     778:	cmp	w8, #0x1
     77c:	stp	x9, x27, [sp, #64]
     780:	mov	w9, #0x934c                	// #37708
     784:	mov	w11, #0xb188                	// #45448
     788:	mov	w10, #0xc9b8                	// #51640
     78c:	csinc	w8, w8, wzr, gt
     790:	sxtw	x28, w13
     794:	sub	x24, x29, #0xc
     798:	add	x22, x19, x9
     79c:	add	x9, x19, x11
     7a0:	add	x21, x19, x10
     7a4:	lsl	x8, x8, #2
     7a8:	str	wzr, [sp, #28]
     7ac:	stp	x9, x28, [sp]
     7b0:	str	x8, [sp, #40]
     7b4:	str	x22, [sp, #56]
     7b8:	ldr	x2, [sp, #16]
     7bc:	sub	x0, x29, #0x24
     7c0:	mov	w1, wzr
     7c4:	bl	0 <memset>
     7c8:	ldr	x8, [sp, #48]
     7cc:	mov	x25, x20
     7d0:	mov	w26, #0xb188                	// #45448
     7d4:	b	7e4 <sendMTFValues+0x2b8>
     7d8:	subs	x25, x25, #0x1
     7dc:	add	x26, x26, #0x408
     7e0:	b.eq	804 <sendMTFValues+0x2d8>  // b.none
     7e4:	cmn	w8, #0x1
     7e8:	b.lt	7d8 <sendMTFValues+0x2ac>  // b.tstop
     7ec:	ldr	x2, [sp, #40]
     7f0:	add	x0, x19, x26
     7f4:	mov	w1, wzr
     7f8:	bl	0 <memset>
     7fc:	ldr	x8, [sp, #48]
     800:	b	7d8 <sendMTFValues+0x2ac>
     804:	cmn	w8, #0x1
     808:	b.lt	864 <sendMTFValues+0x338>  // b.tstop
     80c:	cmp	w20, #0x6
     810:	b.ne	864 <sendMTFValues+0x338>  // b.any
     814:	mov	x8, xzr
     818:	mov	x9, xzr
     81c:	add	x10, x22, x9
     820:	ldrb	w11, [x10, #258]
     824:	ldrb	w12, [x10]
     828:	add	x13, x22, x8
     82c:	add	x9, x9, #0x1
     830:	cmp	x9, x28
     834:	bfi	w12, w11, #16, #8
     838:	str	w12, [x13, #13932]
     83c:	ldrb	w11, [x10, #774]
     840:	ldrb	w12, [x10, #516]
     844:	add	x8, x8, #0x10
     848:	bfi	w12, w11, #16, #8
     84c:	str	w12, [x13, #13936]
     850:	ldrb	w11, [x10, #1290]
     854:	ldrb	w10, [x10, #1032]
     858:	bfi	w10, w11, #16, #8
     85c:	str	w10, [x13, #13940]
     860:	b.lt	81c <sendMTFValues+0x2f0>  // b.tstop
     864:	ldr	w26, [x19, #668]
     868:	cmp	w26, #0x1
     86c:	b.lt	135c <sendMTFValues+0xe30>  // b.tstop
     870:	mov	w28, wzr
     874:	mov	w23, wzr
     878:	stur	xzr, [x29, #-64]
     87c:	b	c8c <sendMTFValues+0x760>
     880:	add	x10, x27, x25, lsl #1
     884:	ldrh	w12, [x10]
     888:	mov	w9, #0x408                 	// #1032
     88c:	madd	x9, x11, x9, x19
     890:	mov	w11, #0xb188                	// #45448
     894:	add	x9, x9, x11
     898:	lsl	x11, x12, #2
     89c:	ldr	w12, [x9, x11]
     8a0:	add	w12, w12, #0x1
     8a4:	str	w12, [x9, x11]
     8a8:	ldrh	w11, [x10, #2]
     8ac:	lsl	x11, x11, #2
     8b0:	ldr	w12, [x9, x11]
     8b4:	add	w12, w12, #0x1
     8b8:	str	w12, [x9, x11]
     8bc:	ldrh	w11, [x10, #4]
     8c0:	lsl	x11, x11, #2
     8c4:	ldr	w12, [x9, x11]
     8c8:	add	w12, w12, #0x1
     8cc:	str	w12, [x9, x11]
     8d0:	ldrh	w11, [x10, #6]
     8d4:	lsl	x11, x11, #2
     8d8:	ldr	w12, [x9, x11]
     8dc:	add	w12, w12, #0x1
     8e0:	str	w12, [x9, x11]
     8e4:	ldrh	w11, [x10, #8]
     8e8:	lsl	x11, x11, #2
     8ec:	ldr	w12, [x9, x11]
     8f0:	add	w12, w12, #0x1
     8f4:	str	w12, [x9, x11]
     8f8:	ldrh	w11, [x10, #10]
     8fc:	lsl	x11, x11, #2
     900:	ldr	w12, [x9, x11]
     904:	add	w12, w12, #0x1
     908:	str	w12, [x9, x11]
     90c:	ldrh	w11, [x10, #12]
     910:	lsl	x11, x11, #2
     914:	ldr	w12, [x9, x11]
     918:	add	w12, w12, #0x1
     91c:	str	w12, [x9, x11]
     920:	ldrh	w11, [x10, #14]
     924:	lsl	x11, x11, #2
     928:	ldr	w12, [x9, x11]
     92c:	add	w12, w12, #0x1
     930:	str	w12, [x9, x11]
     934:	ldrh	w11, [x10, #16]
     938:	lsl	x11, x11, #2
     93c:	ldr	w12, [x9, x11]
     940:	add	w12, w12, #0x1
     944:	str	w12, [x9, x11]
     948:	ldrh	w11, [x10, #18]
     94c:	lsl	x11, x11, #2
     950:	ldr	w12, [x9, x11]
     954:	add	w12, w12, #0x1
     958:	str	w12, [x9, x11]
     95c:	ldrh	w11, [x10, #20]
     960:	lsl	x11, x11, #2
     964:	ldr	w12, [x9, x11]
     968:	add	w12, w12, #0x1
     96c:	str	w12, [x9, x11]
     970:	ldrh	w11, [x10, #22]
     974:	lsl	x11, x11, #2
     978:	ldr	w12, [x9, x11]
     97c:	add	w12, w12, #0x1
     980:	str	w12, [x9, x11]
     984:	ldrh	w11, [x10, #24]
     988:	lsl	x11, x11, #2
     98c:	ldr	w12, [x9, x11]
     990:	add	w12, w12, #0x1
     994:	str	w12, [x9, x11]
     998:	ldrh	w11, [x10, #26]
     99c:	lsl	x11, x11, #2
     9a0:	ldr	w12, [x9, x11]
     9a4:	add	w12, w12, #0x1
     9a8:	str	w12, [x9, x11]
     9ac:	ldrh	w11, [x10, #28]
     9b0:	lsl	x11, x11, #2
     9b4:	ldr	w12, [x9, x11]
     9b8:	add	w12, w12, #0x1
     9bc:	str	w12, [x9, x11]
     9c0:	ldrh	w11, [x10, #30]
     9c4:	lsl	x11, x11, #2
     9c8:	ldr	w12, [x9, x11]
     9cc:	add	w12, w12, #0x1
     9d0:	str	w12, [x9, x11]
     9d4:	ldrh	w11, [x10, #32]
     9d8:	lsl	x11, x11, #2
     9dc:	ldr	w12, [x9, x11]
     9e0:	add	w12, w12, #0x1
     9e4:	str	w12, [x9, x11]
     9e8:	ldrh	w11, [x10, #34]
     9ec:	lsl	x11, x11, #2
     9f0:	ldr	w12, [x9, x11]
     9f4:	add	w12, w12, #0x1
     9f8:	str	w12, [x9, x11]
     9fc:	ldrh	w11, [x10, #36]
     a00:	lsl	x11, x11, #2
     a04:	ldr	w12, [x9, x11]
     a08:	add	w12, w12, #0x1
     a0c:	str	w12, [x9, x11]
     a10:	ldrh	w11, [x10, #38]
     a14:	lsl	x11, x11, #2
     a18:	ldr	w12, [x9, x11]
     a1c:	add	w12, w12, #0x1
     a20:	str	w12, [x9, x11]
     a24:	ldrh	w11, [x10, #40]
     a28:	lsl	x11, x11, #2
     a2c:	ldr	w12, [x9, x11]
     a30:	add	w12, w12, #0x1
     a34:	str	w12, [x9, x11]
     a38:	ldrh	w11, [x10, #42]
     a3c:	lsl	x11, x11, #2
     a40:	ldr	w12, [x9, x11]
     a44:	add	w12, w12, #0x1
     a48:	str	w12, [x9, x11]
     a4c:	ldrh	w11, [x10, #44]
     a50:	lsl	x11, x11, #2
     a54:	ldr	w12, [x9, x11]
     a58:	add	w12, w12, #0x1
     a5c:	str	w12, [x9, x11]
     a60:	ldrh	w11, [x10, #46]
     a64:	lsl	x11, x11, #2
     a68:	ldr	w12, [x9, x11]
     a6c:	add	w12, w12, #0x1
     a70:	str	w12, [x9, x11]
     a74:	ldrh	w11, [x10, #48]
     a78:	lsl	x11, x11, #2
     a7c:	ldr	w12, [x9, x11]
     a80:	add	w12, w12, #0x1
     a84:	str	w12, [x9, x11]
     a88:	ldrh	w11, [x10, #50]
     a8c:	lsl	x11, x11, #2
     a90:	ldr	w12, [x9, x11]
     a94:	add	w12, w12, #0x1
     a98:	str	w12, [x9, x11]
     a9c:	ldrh	w11, [x10, #52]
     aa0:	lsl	x11, x11, #2
     aa4:	ldr	w12, [x9, x11]
     aa8:	add	w12, w12, #0x1
     aac:	str	w12, [x9, x11]
     ab0:	ldrh	w11, [x10, #54]
     ab4:	lsl	x11, x11, #2
     ab8:	ldr	w12, [x9, x11]
     abc:	add	w12, w12, #0x1
     ac0:	str	w12, [x9, x11]
     ac4:	ldrh	w11, [x10, #56]
     ac8:	lsl	x11, x11, #2
     acc:	ldr	w12, [x9, x11]
     ad0:	add	w12, w12, #0x1
     ad4:	str	w12, [x9, x11]
     ad8:	ldrh	w11, [x10, #58]
     adc:	lsl	x11, x11, #2
     ae0:	ldr	w12, [x9, x11]
     ae4:	add	w12, w12, #0x1
     ae8:	str	w12, [x9, x11]
     aec:	ldrh	w11, [x10, #60]
     af0:	lsl	x11, x11, #2
     af4:	ldr	w12, [x9, x11]
     af8:	add	w12, w12, #0x1
     afc:	str	w12, [x9, x11]
     b00:	ldrh	w11, [x10, #62]
     b04:	lsl	x11, x11, #2
     b08:	ldr	w12, [x9, x11]
     b0c:	add	w12, w12, #0x1
     b10:	str	w12, [x9, x11]
     b14:	ldrh	w11, [x10, #64]
     b18:	lsl	x11, x11, #2
     b1c:	ldr	w12, [x9, x11]
     b20:	add	w12, w12, #0x1
     b24:	str	w12, [x9, x11]
     b28:	ldrh	w11, [x10, #66]
     b2c:	lsl	x11, x11, #2
     b30:	ldr	w12, [x9, x11]
     b34:	add	w12, w12, #0x1
     b38:	str	w12, [x9, x11]
     b3c:	ldrh	w11, [x10, #68]
     b40:	lsl	x11, x11, #2
     b44:	ldr	w12, [x9, x11]
     b48:	add	w12, w12, #0x1
     b4c:	str	w12, [x9, x11]
     b50:	ldrh	w11, [x10, #70]
     b54:	lsl	x11, x11, #2
     b58:	ldr	w12, [x9, x11]
     b5c:	add	w12, w12, #0x1
     b60:	str	w12, [x9, x11]
     b64:	ldrh	w11, [x10, #72]
     b68:	lsl	x11, x11, #2
     b6c:	ldr	w12, [x9, x11]
     b70:	add	w12, w12, #0x1
     b74:	str	w12, [x9, x11]
     b78:	ldrh	w11, [x10, #74]
     b7c:	lsl	x11, x11, #2
     b80:	ldr	w12, [x9, x11]
     b84:	add	w12, w12, #0x1
     b88:	str	w12, [x9, x11]
     b8c:	ldrh	w11, [x10, #76]
     b90:	lsl	x11, x11, #2
     b94:	ldr	w12, [x9, x11]
     b98:	add	w12, w12, #0x1
     b9c:	str	w12, [x9, x11]
     ba0:	ldrh	w11, [x10, #78]
     ba4:	lsl	x11, x11, #2
     ba8:	ldr	w12, [x9, x11]
     bac:	add	w12, w12, #0x1
     bb0:	str	w12, [x9, x11]
     bb4:	ldrh	w11, [x10, #80]
     bb8:	lsl	x11, x11, #2
     bbc:	ldr	w12, [x9, x11]
     bc0:	add	w12, w12, #0x1
     bc4:	str	w12, [x9, x11]
     bc8:	ldrh	w11, [x10, #82]
     bcc:	lsl	x11, x11, #2
     bd0:	ldr	w12, [x9, x11]
     bd4:	add	w12, w12, #0x1
     bd8:	str	w12, [x9, x11]
     bdc:	ldrh	w11, [x10, #84]
     be0:	lsl	x11, x11, #2
     be4:	ldr	w12, [x9, x11]
     be8:	add	w12, w12, #0x1
     bec:	str	w12, [x9, x11]
     bf0:	ldrh	w11, [x10, #86]
     bf4:	lsl	x11, x11, #2
     bf8:	ldr	w12, [x9, x11]
     bfc:	add	w12, w12, #0x1
     c00:	str	w12, [x9, x11]
     c04:	ldrh	w11, [x10, #88]
     c08:	lsl	x11, x11, #2
     c0c:	ldr	w12, [x9, x11]
     c10:	add	w12, w12, #0x1
     c14:	str	w12, [x9, x11]
     c18:	ldrh	w11, [x10, #90]
     c1c:	lsl	x11, x11, #2
     c20:	ldr	w12, [x9, x11]
     c24:	add	w12, w12, #0x1
     c28:	str	w12, [x9, x11]
     c2c:	ldrh	w11, [x10, #92]
     c30:	lsl	x11, x11, #2
     c34:	ldr	w12, [x9, x11]
     c38:	add	w12, w12, #0x1
     c3c:	str	w12, [x9, x11]
     c40:	ldrh	w11, [x10, #94]
     c44:	lsl	x11, x11, #2
     c48:	ldr	w12, [x9, x11]
     c4c:	add	w12, w12, #0x1
     c50:	str	w12, [x9, x11]
     c54:	ldrh	w10, [x10, #96]
     c58:	lsl	x10, x10, #2
     c5c:	ldr	w11, [x9, x10]
     c60:	add	w11, w11, #0x1
     c64:	str	w11, [x9, x10]
     c68:	ldrh	w10, [x27, w18, sxtw #1]
     c6c:	lsl	x10, x10, #2
     c70:	ldr	w11, [x9, x10]
     c74:	add	w11, w11, #0x1
     c78:	str	w11, [x9, x10]
     c7c:	ldr	w26, [x19, #668]
     c80:	add	w28, w8, #0x1
     c84:	cmp	w28, w26
     c88:	b.ge	1364 <sendMTFValues+0xe38>  // b.tcont
     c8c:	ldr	x2, [sp, #64]
     c90:	cmp	w20, #0x6
     c94:	sxtw	x25, w28
     c98:	sub	x0, x29, #0xc
     c9c:	mov	w1, wzr
     ca0:	cset	w27, eq  // eq = none
     ca4:	add	x22, x25, #0x31
     ca8:	bl	0 <memset>
     cac:	mov	x18, x22
     cb0:	sub	w8, w26, #0x1
     cb4:	cmp	w18, w26
     cb8:	csel	w8, w18, w8, lt  // lt = tstop
     cbc:	sub	w9, w8, w28
     cc0:	cmp	w9, #0x31
     cc4:	cset	w9, eq  // eq = none
     cc8:	and	w9, w27, w9
     ccc:	tbz	w9, #0, 1270 <sendMTFValues+0xd44>
     cd0:	ldr	x27, [sp, #72]
     cd4:	ldr	x22, [sp, #56]
     cd8:	add	x10, x27, x25, lsl #1
     cdc:	ldrh	w11, [x10]
     ce0:	ldrh	w12, [x10, #2]
     ce4:	ldrh	w15, [x10, #4]
     ce8:	add	x11, x21, x11, lsl #4
     cec:	add	x12, x21, x12, lsl #4
     cf0:	ldp	w13, w17, [x12]
     cf4:	ldp	w14, w16, [x11]
     cf8:	ldr	w11, [x11, #8]
     cfc:	ldr	w12, [x12, #8]
     d00:	add	x15, x21, x15, lsl #4
     d04:	add	w13, w13, w14
     d08:	ldrh	w14, [x10, #6]
     d0c:	add	w16, w17, w16
     d10:	add	w11, w12, w11
     d14:	ldp	w17, w12, [x15]
     d18:	ldr	w15, [x15, #8]
     d1c:	add	x14, x21, x14, lsl #4
     d20:	add	w13, w13, w17
     d24:	ldrh	w17, [x10, #8]
     d28:	add	w12, w16, w12
     d2c:	add	w11, w11, w15
     d30:	ldp	w15, w16, [x14]
     d34:	ldr	w14, [x14, #8]
     d38:	add	x17, x21, x17, lsl #4
     d3c:	add	w13, w13, w15
     d40:	add	w12, w12, w16
     d44:	ldrh	w16, [x10, #10]
     d48:	add	w11, w11, w14
     d4c:	ldp	w15, w14, [x17]
     d50:	ldr	w17, [x17, #8]
     d54:	add	x16, x21, x16, lsl #4
     d58:	add	w13, w13, w15
     d5c:	ldrh	w15, [x10, #12]
     d60:	add	w12, w12, w14
     d64:	add	w11, w11, w17
     d68:	ldp	w14, w17, [x16]
     d6c:	ldr	w16, [x16, #8]
     d70:	add	x15, x21, x15, lsl #4
     d74:	add	w13, w13, w14
     d78:	ldrh	w14, [x10, #14]
     d7c:	add	w12, w12, w17
     d80:	add	w11, w11, w16
     d84:	ldp	w16, w17, [x15]
     d88:	ldr	w15, [x15, #8]
     d8c:	add	x14, x21, x14, lsl #4
     d90:	add	w12, w12, w17
     d94:	ldrh	w17, [x10, #16]
     d98:	add	w13, w13, w16
     d9c:	add	w11, w11, w15
     da0:	ldp	w16, w15, [x14]
     da4:	ldr	w14, [x14, #8]
     da8:	add	x17, x21, x17, lsl #4
     dac:	add	w13, w13, w16
     db0:	ldrh	w16, [x10, #18]
     db4:	add	w12, w12, w15
     db8:	add	w11, w11, w14
     dbc:	ldp	w15, w14, [x17]
     dc0:	ldr	w17, [x17, #8]
     dc4:	add	x16, x21, x16, lsl #4
     dc8:	add	w13, w13, w15
     dcc:	ldrh	w15, [x10, #20]
     dd0:	add	w12, w12, w14
     dd4:	add	w11, w11, w17
     dd8:	ldp	w14, w17, [x16]
     ddc:	ldr	w16, [x16, #8]
     de0:	add	x15, x21, x15, lsl #4
     de4:	add	w13, w13, w14
     de8:	add	w12, w12, w17
     dec:	ldrh	w17, [x10, #22]
     df0:	add	w11, w11, w16
     df4:	ldp	w14, w16, [x15]
     df8:	ldr	w15, [x15, #8]
     dfc:	add	x17, x21, x17, lsl #4
     e00:	add	w13, w13, w14
     e04:	ldrh	w14, [x10, #24]
     e08:	add	w12, w12, w16
     e0c:	add	w11, w11, w15
     e10:	ldp	w16, w15, [x17]
     e14:	ldr	w17, [x17, #8]
     e18:	add	x14, x21, x14, lsl #4
     e1c:	add	w13, w13, w16
     e20:	ldrh	w16, [x10, #26]
     e24:	add	w12, w12, w15
     e28:	add	w11, w11, w17
     e2c:	ldp	w15, w17, [x14]
     e30:	ldr	w14, [x14, #8]
     e34:	add	x16, x21, x16, lsl #4
     e38:	add	w12, w12, w17
     e3c:	ldrh	w17, [x10, #28]
     e40:	add	w13, w13, w15
     e44:	add	w11, w11, w14
     e48:	ldp	w15, w14, [x16]
     e4c:	ldr	w16, [x16, #8]
     e50:	add	x17, x21, x17, lsl #4
     e54:	add	w13, w13, w15
     e58:	ldrh	w15, [x10, #30]
     e5c:	add	w12, w12, w14
     e60:	add	w11, w11, w16
     e64:	ldp	w14, w16, [x17]
     e68:	ldr	w17, [x17, #8]
     e6c:	add	x15, x21, x15, lsl #4
     e70:	add	w13, w13, w14
     e74:	ldrh	w14, [x10, #32]
     e78:	add	w12, w12, w16
     e7c:	add	w11, w11, w17
     e80:	ldp	w16, w17, [x15]
     e84:	ldr	w15, [x15, #8]
     e88:	add	x14, x21, x14, lsl #4
     e8c:	add	w13, w13, w16
     e90:	add	w12, w12, w17
     e94:	ldrh	w17, [x10, #34]
     e98:	add	w11, w11, w15
     e9c:	ldp	w16, w15, [x14]
     ea0:	ldr	w14, [x14, #8]
     ea4:	add	x17, x21, x17, lsl #4
     ea8:	add	w13, w13, w16
     eac:	ldrh	w16, [x10, #36]
     eb0:	add	w12, w12, w15
     eb4:	add	w11, w11, w14
     eb8:	ldp	w15, w14, [x17]
     ebc:	ldr	w17, [x17, #8]
     ec0:	add	x16, x21, x16, lsl #4
     ec4:	add	w13, w13, w15
     ec8:	ldrh	w15, [x10, #38]
     ecc:	add	w12, w12, w14
     ed0:	add	w11, w11, w17
     ed4:	ldp	w14, w17, [x16]
     ed8:	ldr	w16, [x16, #8]
     edc:	add	x15, x21, x15, lsl #4
     ee0:	add	w12, w12, w17
     ee4:	ldrh	w17, [x10, #40]
     ee8:	add	w13, w13, w14
     eec:	add	w11, w11, w16
     ef0:	ldp	w14, w16, [x15]
     ef4:	ldr	w15, [x15, #8]
     ef8:	add	x17, x21, x17, lsl #4
     efc:	add	w13, w13, w14
     f00:	ldrh	w14, [x10, #42]
     f04:	add	w12, w12, w16
     f08:	add	w11, w11, w15
     f0c:	ldp	w16, w15, [x17]
     f10:	ldr	w17, [x17, #8]
     f14:	add	x14, x21, x14, lsl #4
     f18:	add	w13, w13, w16
     f1c:	ldrh	w16, [x10, #44]
     f20:	add	w12, w12, w15
     f24:	add	w11, w11, w17
     f28:	ldp	w15, w17, [x14]
     f2c:	ldr	w14, [x14, #8]
     f30:	add	x16, x21, x16, lsl #4
     f34:	add	w13, w13, w15
     f38:	add	w12, w12, w17
     f3c:	ldrh	w17, [x10, #46]
     f40:	add	w11, w11, w14
     f44:	ldp	w15, w14, [x16]
     f48:	ldr	w16, [x16, #8]
     f4c:	add	x17, x21, x17, lsl #4
     f50:	add	w13, w13, w15
     f54:	ldrh	w15, [x10, #48]
     f58:	add	w12, w12, w14
     f5c:	add	w11, w11, w16
     f60:	ldp	w14, w16, [x17]
     f64:	ldr	w17, [x17, #8]
     f68:	add	x15, x21, x15, lsl #4
     f6c:	add	w13, w13, w14
     f70:	ldrh	w14, [x10, #50]
     f74:	add	w12, w12, w16
     f78:	add	w11, w11, w17
     f7c:	ldp	w16, w17, [x15]
     f80:	ldr	w15, [x15, #8]
     f84:	add	x14, x21, x14, lsl #4
     f88:	add	w12, w12, w17
     f8c:	ldrh	w17, [x10, #52]
     f90:	add	w13, w13, w16
     f94:	add	w11, w11, w15
     f98:	ldp	w16, w15, [x14]
     f9c:	ldr	w14, [x14, #8]
     fa0:	add	x17, x21, x17, lsl #4
     fa4:	add	w13, w13, w16
     fa8:	ldrh	w16, [x10, #54]
     fac:	add	w12, w12, w15
     fb0:	add	w11, w11, w14
     fb4:	ldp	w15, w14, [x17]
     fb8:	ldr	w17, [x17, #8]
     fbc:	add	x16, x21, x16, lsl #4
     fc0:	add	w13, w13, w15
     fc4:	ldrh	w15, [x10, #56]
     fc8:	add	w12, w12, w14
     fcc:	add	w11, w11, w17
     fd0:	ldp	w14, w17, [x16]
     fd4:	ldr	w16, [x16, #8]
     fd8:	add	x15, x21, x15, lsl #4
     fdc:	add	w13, w13, w14
     fe0:	add	w12, w12, w17
     fe4:	ldrh	w17, [x10, #58]
     fe8:	add	w11, w11, w16
     fec:	ldp	w14, w16, [x15]
     ff0:	ldr	w15, [x15, #8]
     ff4:	add	x17, x21, x17, lsl #4
     ff8:	add	w13, w13, w14
     ffc:	ldrh	w14, [x10, #60]
    1000:	add	w12, w12, w16
    1004:	add	w11, w11, w15
    1008:	ldp	w16, w15, [x17]
    100c:	ldr	w17, [x17, #8]
    1010:	add	x14, x21, x14, lsl #4
    1014:	add	w13, w13, w16
    1018:	ldrh	w16, [x10, #62]
    101c:	add	w12, w12, w15
    1020:	add	w11, w11, w17
    1024:	ldp	w15, w17, [x14]
    1028:	ldr	w14, [x14, #8]
    102c:	add	x16, x21, x16, lsl #4
    1030:	add	w12, w12, w17
    1034:	ldrh	w17, [x10, #64]
    1038:	add	w13, w13, w15
    103c:	add	w11, w11, w14
    1040:	ldp	w15, w14, [x16]
    1044:	ldr	w16, [x16, #8]
    1048:	add	x17, x21, x17, lsl #4
    104c:	add	w13, w13, w15
    1050:	ldrh	w15, [x10, #66]
    1054:	add	w12, w12, w14
    1058:	add	w11, w11, w16
    105c:	ldp	w14, w16, [x17]
    1060:	ldr	w17, [x17, #8]
    1064:	add	x15, x21, x15, lsl #4
    1068:	add	w13, w13, w14
    106c:	ldrh	w14, [x10, #68]
    1070:	add	w12, w12, w16
    1074:	add	w11, w11, w17
    1078:	ldp	w16, w17, [x15]
    107c:	ldr	w15, [x15, #8]
    1080:	add	x14, x21, x14, lsl #4
    1084:	add	w13, w13, w16
    1088:	add	w12, w12, w17
    108c:	ldrh	w17, [x10, #70]
    1090:	add	w11, w11, w15
    1094:	ldp	w16, w15, [x14]
    1098:	ldr	w14, [x14, #8]
    109c:	add	x17, x21, x17, lsl #4
    10a0:	add	w13, w13, w16
    10a4:	ldrh	w16, [x10, #72]
    10a8:	add	w12, w12, w15
    10ac:	add	w11, w11, w14
    10b0:	ldp	w15, w14, [x17]
    10b4:	ldr	w17, [x17, #8]
    10b8:	add	x16, x21, x16, lsl #4
    10bc:	add	w13, w13, w15
    10c0:	ldrh	w15, [x10, #74]
    10c4:	add	w12, w12, w14
    10c8:	add	w11, w11, w17
    10cc:	ldp	w14, w17, [x16]
    10d0:	ldr	w16, [x16, #8]
    10d4:	add	x15, x21, x15, lsl #4
    10d8:	add	w12, w12, w17
    10dc:	ldrh	w17, [x10, #76]
    10e0:	add	w13, w13, w14
    10e4:	add	w11, w11, w16
    10e8:	ldp	w14, w16, [x15]
    10ec:	ldr	w15, [x15, #8]
    10f0:	add	x17, x21, x17, lsl #4
    10f4:	add	w13, w13, w14
    10f8:	ldrh	w14, [x10, #78]
    10fc:	add	w12, w12, w16
    1100:	add	w11, w11, w15
    1104:	ldp	w16, w15, [x17]
    1108:	ldr	w17, [x17, #8]
    110c:	add	x14, x21, x14, lsl #4
    1110:	add	w13, w13, w16
    1114:	ldrh	w16, [x10, #80]
    1118:	add	w12, w12, w15
    111c:	add	w11, w11, w17
    1120:	ldp	w15, w17, [x14]
    1124:	ldr	w14, [x14, #8]
    1128:	add	x16, x21, x16, lsl #4
    112c:	add	w13, w13, w15
    1130:	add	w12, w12, w17
    1134:	ldrh	w17, [x10, #82]
    1138:	add	w11, w11, w14
    113c:	ldp	w15, w14, [x16]
    1140:	ldr	w16, [x16, #8]
    1144:	add	x17, x21, x17, lsl #4
    1148:	add	w13, w13, w15
    114c:	ldrh	w15, [x10, #84]
    1150:	add	w12, w12, w14
    1154:	add	w11, w11, w16
    1158:	ldp	w14, w16, [x17]
    115c:	ldr	w17, [x17, #8]
    1160:	add	x15, x21, x15, lsl #4
    1164:	add	w13, w13, w14
    1168:	ldrh	w14, [x10, #86]
    116c:	add	w12, w12, w16
    1170:	add	w11, w11, w17
    1174:	ldp	w16, w17, [x15]
    1178:	ldr	w15, [x15, #8]
    117c:	add	x14, x21, x14, lsl #4
    1180:	add	w12, w12, w17
    1184:	ldrh	w17, [x10, #88]
    1188:	add	w13, w13, w16
    118c:	add	w11, w11, w15
    1190:	ldp	w16, w15, [x14]
    1194:	ldr	w14, [x14, #8]
    1198:	add	x17, x21, x17, lsl #4
    119c:	add	w13, w13, w16
    11a0:	ldrh	w16, [x10, #90]
    11a4:	add	w12, w12, w15
    11a8:	add	w11, w11, w14
    11ac:	ldp	w15, w14, [x17]
    11b0:	ldr	w17, [x17, #8]
    11b4:	add	x16, x21, x16, lsl #4
    11b8:	add	w13, w13, w15
    11bc:	ldrh	w15, [x10, #92]
    11c0:	add	w12, w12, w14
    11c4:	add	w11, w11, w17
    11c8:	ldp	w14, w17, [x16]
    11cc:	ldr	w16, [x16, #8]
    11d0:	add	x15, x21, x15, lsl #4
    11d4:	add	w13, w13, w14
    11d8:	add	w11, w11, w16
    11dc:	ldp	w14, w16, [x15]
    11e0:	add	w12, w12, w17
    11e4:	ldrh	w17, [x10, #94]
    11e8:	ldrh	w10, [x10, #96]
    11ec:	add	w13, w13, w14
    11f0:	ldr	w14, [x15, #8]
    11f4:	add	x15, x21, x17, lsl #4
    11f8:	add	w12, w12, w16
    11fc:	add	x10, x21, x10, lsl #4
    1200:	add	w11, w11, w14
    1204:	ldp	w16, w14, [x15]
    1208:	ldr	w15, [x15, #8]
    120c:	add	w13, w13, w16
    1210:	ldrh	w16, [x27, x18, lsl #1]
    1214:	add	w12, w12, w14
    1218:	add	w11, w11, w15
    121c:	ldp	w14, w15, [x10]
    1220:	add	x16, x21, x16, lsl #4
    1224:	ldr	w10, [x10, #8]
    1228:	add	w13, w13, w14
    122c:	add	w12, w12, w15
    1230:	ldp	w14, w15, [x16]
    1234:	ldr	w16, [x16, #8]
    1238:	add	w10, w11, w10
    123c:	add	w11, w13, w14
    1240:	add	w12, w12, w15
    1244:	add	w10, w10, w16
    1248:	sturh	w11, [x29, #-12]
    124c:	lsr	w11, w11, #16
    1250:	sturh	w12, [x29, #-8]
    1254:	lsr	w12, w12, #16
    1258:	sturh	w10, [x29, #-4]
    125c:	lsr	w10, w10, #16
    1260:	sturh	w11, [x29, #-10]
    1264:	sturh	w12, [x29, #-6]
    1268:	sturh	w10, [x29, #-2]
    126c:	b	12c0 <sendMTFValues+0xd94>
    1270:	ldr	x27, [sp, #72]
    1274:	ldr	x22, [sp, #56]
    1278:	cmp	w8, w25
    127c:	b.lt	12c0 <sendMTFValues+0xd94>  // b.tstop
    1280:	sxtw	x10, w8
    1284:	mov	x11, x25
    1288:	ldrh	w12, [x27, x11, lsl #1]
    128c:	sub	x13, x29, #0xc
    1290:	mov	x14, x20
    1294:	add	x12, x22, x12
    1298:	ldrb	w15, [x12]
    129c:	ldrh	w16, [x13]
    12a0:	subs	x14, x14, #0x1
    12a4:	add	x12, x12, #0x102
    12a8:	add	w15, w16, w15
    12ac:	strh	w15, [x13], #2
    12b0:	b.ne	1298 <sendMTFValues+0xd6c>  // b.any
    12b4:	cmp	x11, x10
    12b8:	add	x11, x11, #0x1
    12bc:	b.lt	1288 <sendMTFValues+0xd5c>  // b.tstop
    12c0:	mov	w11, #0xc9ff                	// #51711
    12c4:	mov	x12, xzr
    12c8:	movk	w11, #0x3b9a, lsl #16
    12cc:	mov	w10, #0xffffffff            	// #-1
    12d0:	ldrh	w13, [x24, x12, lsl #1]
    12d4:	cmp	w11, w13
    12d8:	csel	w10, w12, w10, gt
    12dc:	add	x12, x12, #0x1
    12e0:	csel	w11, w13, w11, gt
    12e4:	cmp	x20, x12
    12e8:	b.ne	12d0 <sendMTFValues+0xda4>  // b.any
    12ec:	sbfiz	x12, x10, #2, #32
    12f0:	sub	x16, x29, #0x24
    12f4:	ldr	w13, [x16, x12]
    12f8:	ldur	x15, [x29, #-64]
    12fc:	add	w23, w11, w23
    1300:	sxtw	x11, w10
    1304:	add	w13, w13, #0x1
    1308:	add	x14, x19, x15
    130c:	add	x15, x15, #0x1
    1310:	str	w13, [x16, x12]
    1314:	strb	w10, [x14, #1704]
    1318:	stur	x15, [x29, #-64]
    131c:	tbnz	w9, #0, 880 <sendMTFValues+0x354>
    1320:	cmp	w8, w25
    1324:	mov	w13, #0xb188                	// #45448
    1328:	mov	w14, #0x408                 	// #1032
    132c:	b.lt	c7c <sendMTFValues+0x750>  // b.tstop
    1330:	sxtw	x9, w8
    1334:	ldrh	w10, [x27, x25, lsl #1]
    1338:	madd	x12, x11, x14, x19
    133c:	cmp	x25, x9
    1340:	add	x25, x25, #0x1
    1344:	add	x10, x12, x10, lsl #2
    1348:	ldr	w12, [x10, x13]
    134c:	add	w12, w12, #0x1
    1350:	str	w12, [x10, x13]
    1354:	b.lt	1334 <sendMTFValues+0xe08>  // b.tstop
    1358:	b	c7c <sendMTFValues+0x750>
    135c:	stur	xzr, [x29, #-64]
    1360:	mov	w23, wzr
    1364:	ldr	w8, [x19, #656]
    1368:	adrp	x28, 0 <BZ2_bsInitWrite>
    136c:	add	x28, x28, #0x0
    1370:	cmp	w8, #0x3
    1374:	b.ge	13c8 <sendMTFValues+0xe9c>  // b.tcont
    1378:	ldr	x28, [sp]
    137c:	ldr	x23, [sp, #32]
    1380:	mov	x26, x20
    1384:	mov	x25, x22
    1388:	mov	w3, #0x11                  	// #17
    138c:	mov	x0, x25
    1390:	mov	x1, x28
    1394:	mov	w2, w23
    1398:	bl	0 <BZ2_hbMakeCodeLengths>
    139c:	add	x25, x25, #0x102
    13a0:	subs	x26, x26, #0x1
    13a4:	add	x28, x28, #0x408
    13a8:	b.ne	1388 <sendMTFValues+0xe5c>  // b.any
    13ac:	ldr	w8, [sp, #28]
    13b0:	ldr	x28, [sp, #8]
    13b4:	add	w8, w8, #0x1
    13b8:	cmp	w8, #0x4
    13bc:	str	w8, [sp, #28]
    13c0:	b.ne	7b8 <sendMTFValues+0x28c>  // b.any
    13c4:	b	142c <sendMTFValues+0xf00>
    13c8:	ldr	w8, [sp, #28]
    13cc:	adrp	x27, 0 <stderr>
    13d0:	ldr	x0, [x27]
    13d4:	cmp	w23, #0x0
    13d8:	add	w2, w8, #0x1
    13dc:	add	w8, w23, #0x7
    13e0:	csel	w8, w8, w23, lt  // lt = tstop
    13e4:	adrp	x1, 0 <BZ2_bsInitWrite>
    13e8:	asr	w3, w8, #3
    13ec:	add	x1, x1, #0x0
    13f0:	bl	0 <fprintf>
    13f4:	ldr	x1, [x27]
    13f8:	sub	x25, x29, #0x24
    13fc:	mov	x26, x20
    1400:	ldr	w2, [x25], #4
    1404:	mov	x0, x1
    1408:	mov	x1, x28
    140c:	bl	0 <fprintf>
    1410:	ldr	x1, [x27]
    1414:	subs	x26, x26, #0x1
    1418:	b.ne	1400 <sendMTFValues+0xed4>  // b.any
    141c:	mov	w0, #0xa                   	// #10
    1420:	bl	0 <fputc>
    1424:	ldr	x27, [sp, #72]
    1428:	b	1378 <sendMTFValues+0xe4c>
    142c:	ldur	x9, [x29, #-64]
    1430:	mov	w8, #0x4653                	// #18003
    1434:	cmp	w9, w8
    1438:	b.lt	1444 <sendMTFValues+0xf18>  // b.tstop
    143c:	mov	w0, #0xbbb                 	// #3003
    1440:	bl	0 <BZ2_bz__AssertH__fail>
    1444:	mov	x8, xzr
    1448:	sub	x9, x29, #0x34
    144c:	strb	w8, [x9, x8]
    1450:	add	x8, x8, #0x1
    1454:	cmp	x20, x8
    1458:	b.ne	144c <sendMTFValues+0xf20>  // b.any
    145c:	ldur	x8, [x29, #-64]
    1460:	ldr	x17, [sp, #32]
    1464:	cmp	w8, #0x1
    1468:	b.lt	14d4 <sendMTFValues+0xfa8>  // b.tstop
    146c:	ldur	x9, [x29, #-64]
    1470:	ldurb	w10, [x29, #-52]
    1474:	sub	x11, x29, #0x34
    1478:	mov	x8, xzr
    147c:	mov	w9, w9
    1480:	orr	x11, x11, #0x1
    1484:	mov	w12, #0x4cfa                	// #19706
    1488:	b	14a0 <sendMTFValues+0xf74>
    148c:	mov	w14, wzr
    1490:	add	x8, x8, #0x1
    1494:	cmp	x8, x9
    1498:	strb	w14, [x13, x12]
    149c:	b.eq	14d0 <sendMTFValues+0xfa4>  // b.none
    14a0:	add	x13, x19, x8
    14a4:	ldrb	w15, [x13, #1704]
    14a8:	cmp	w15, w10, uxtb
    14ac:	b.eq	148c <sendMTFValues+0xf60>  // b.none
    14b0:	mov	x14, xzr
    14b4:	mov	w16, w10
    14b8:	ldrb	w10, [x11, x14]
    14bc:	strb	w16, [x11, x14]
    14c0:	add	x14, x14, #0x1
    14c4:	cmp	w15, w10
    14c8:	b.ne	14b4 <sendMTFValues+0xf88>  // b.any
    14cc:	b	1490 <sendMTFValues+0xf64>
    14d0:	sturb	w10, [x29, #-52]
    14d4:	mov	w8, #0x934c                	// #37708
    14d8:	mov	x21, xzr
    14dc:	sxtw	x22, w17
    14e0:	mov	w28, #0x934c                	// #37708
    14e4:	add	x25, x19, x8
    14e8:	mov	w26, #0x102                 	// #258
    14ec:	b	1530 <sendMTFValues+0x1004>
    14f0:	cmp	w24, #0x0
    14f4:	b.le	1590 <sendMTFValues+0x1064>
    14f8:	mov	w8, #0x408                 	// #1032
    14fc:	madd	x8, x21, x8, x19
    1500:	madd	x9, x21, x26, x19
    1504:	mov	w10, #0x9958                	// #39256
    1508:	add	x0, x8, x10
    150c:	add	x1, x9, x28
    1510:	mov	w2, w24
    1514:	mov	w3, w23
    1518:	ldr	x4, [sp, #32]
    151c:	bl	0 <BZ2_hbAssignCodes>
    1520:	add	x21, x21, #0x1
    1524:	cmp	x21, x20
    1528:	add	x25, x25, #0x102
    152c:	b.eq	159c <sendMTFValues+0x1070>  // b.none
    1530:	ldr	x8, [sp, #48]
    1534:	cmn	w8, #0x1
    1538:	b.lt	1574 <sendMTFValues+0x1048>  // b.tstop
    153c:	mov	x8, xzr
    1540:	mov	w23, wzr
    1544:	mov	w24, #0x20                  	// #32
    1548:	ldrb	w9, [x25, x8]
    154c:	add	x8, x8, #0x1
    1550:	cmp	w23, w9
    1554:	csel	w23, w9, w23, cc  // cc = lo, ul, last
    1558:	cmp	w24, w9
    155c:	csel	w24, w9, w24, gt
    1560:	cmp	x8, x22
    1564:	b.lt	1548 <sendMTFValues+0x101c>  // b.tstop
    1568:	cmp	w23, #0x12
    156c:	b.lt	14f0 <sendMTFValues+0xfc4>  // b.tstop
    1570:	b	1584 <sendMTFValues+0x1058>
    1574:	mov	w23, wzr
    1578:	mov	w24, #0x20                  	// #32
    157c:	cmp	w23, #0x12
    1580:	b.lt	14f0 <sendMTFValues+0xfc4>  // b.tstop
    1584:	mov	w0, #0xbbc                 	// #3004
    1588:	bl	0 <BZ2_bz__AssertH__fail>
    158c:	b	14f0 <sendMTFValues+0xfc4>
    1590:	mov	w0, #0xbbd                 	// #3005
    1594:	bl	0 <BZ2_bz__AssertH__fail>
    1598:	b	14f8 <sendMTFValues+0xfcc>
    159c:	mov	x8, xzr
    15a0:	add	x9, x19, #0x80
    15a4:	sub	x10, x29, #0x34
    15a8:	mov	w11, #0x1                   	// #1
    15ac:	b	15c0 <sendMTFValues+0x1094>
    15b0:	add	x8, x8, #0x1
    15b4:	cmp	x8, #0x10
    15b8:	add	x9, x9, #0x10
    15bc:	b.eq	15e8 <sendMTFValues+0x10bc>  // b.none
    15c0:	mov	x12, xzr
    15c4:	strb	wzr, [x10, x8]
    15c8:	b	15d8 <sendMTFValues+0x10ac>
    15cc:	add	x12, x12, #0x1
    15d0:	cmp	x12, #0x10
    15d4:	b.eq	15b0 <sendMTFValues+0x1084>  // b.none
    15d8:	ldrb	w13, [x9, x12]
    15dc:	cbz	w13, 15cc <sendMTFValues+0x10a0>
    15e0:	strb	w11, [x10, x8]
    15e4:	b	15cc <sendMTFValues+0x10a0>
    15e8:	ldr	w21, [x19, #116]
    15ec:	mov	x22, xzr
    15f0:	sub	x23, x29, #0x34
    15f4:	ldrb	w8, [x23, x22]
    15f8:	mov	w1, #0x1                   	// #1
    15fc:	mov	x0, x19
    1600:	cmp	w8, #0x0
    1604:	cset	w2, ne  // ne = any
    1608:	bl	274 <bsW>
    160c:	add	x22, x22, #0x1
    1610:	cmp	x22, #0x10
    1614:	b.ne	15f4 <sendMTFValues+0x10c8>  // b.any
    1618:	mov	x22, xzr
    161c:	add	x23, x19, #0x80
    1620:	sub	x24, x29, #0x34
    1624:	b	1638 <sendMTFValues+0x110c>
    1628:	add	x22, x22, #0x1
    162c:	cmp	x22, #0x10
    1630:	add	x23, x23, #0x10
    1634:	b.eq	166c <sendMTFValues+0x1140>  // b.none
    1638:	ldrb	w8, [x24, x22]
    163c:	cbz	w8, 1628 <sendMTFValues+0x10fc>
    1640:	mov	x25, xzr
    1644:	ldrb	w8, [x23, x25]
    1648:	mov	w1, #0x1                   	// #1
    164c:	mov	x0, x19
    1650:	cmp	w8, #0x0
    1654:	cset	w2, ne  // ne = any
    1658:	bl	274 <bsW>
    165c:	add	x25, x25, #0x1
    1660:	cmp	x25, #0x10
    1664:	b.ne	1644 <sendMTFValues+0x1118>  // b.any
    1668:	b	1628 <sendMTFValues+0x10fc>
    166c:	ldr	w8, [x19, #656]
    1670:	cmp	w8, #0x3
    1674:	b.ge	1d58 <sendMTFValues+0x182c>  // b.tcont
    1678:	ldr	w21, [x19, #116]
    167c:	mov	w1, #0x3                   	// #3
    1680:	mov	x0, x19
    1684:	mov	w2, w20
    1688:	bl	274 <bsW>
    168c:	ldur	x22, [x29, #-64]
    1690:	mov	w1, #0xf                   	// #15
    1694:	mov	x0, x19
    1698:	mov	w2, w22
    169c:	bl	274 <bsW>
    16a0:	cmp	w22, #0x1
    16a4:	b.lt	1710 <sendMTFValues+0x11e4>  // b.tstop
    16a8:	ldur	x8, [x29, #-64]
    16ac:	mov	x22, xzr
    16b0:	mov	w24, #0x4cfa                	// #19706
    16b4:	mov	w23, w8
    16b8:	b	16d8 <sendMTFValues+0x11ac>
    16bc:	mov	w1, #0x1                   	// #1
    16c0:	mov	x0, x19
    16c4:	mov	w2, wzr
    16c8:	bl	274 <bsW>
    16cc:	add	x22, x22, #0x1
    16d0:	cmp	x22, x23
    16d4:	b.eq	1710 <sendMTFValues+0x11e4>  // b.none
    16d8:	add	x8, x19, x22
    16dc:	add	x25, x8, x24
    16e0:	ldrb	w8, [x25]
    16e4:	cbz	w8, 16bc <sendMTFValues+0x1190>
    16e8:	mov	w26, wzr
    16ec:	mov	w1, #0x1                   	// #1
    16f0:	mov	w2, #0x1                   	// #1
    16f4:	mov	x0, x19
    16f8:	bl	274 <bsW>
    16fc:	ldrb	w8, [x25]
    1700:	add	w26, w26, #0x1
    1704:	cmp	w26, w8
    1708:	b.cc	16ec <sendMTFValues+0x11c0>  // b.lo, b.ul, b.last
    170c:	b	16bc <sendMTFValues+0x1190>
    1710:	ldr	w8, [x19, #656]
    1714:	cmp	w8, #0x3
    1718:	b.ge	1d78 <sendMTFValues+0x184c>  // b.tcont
    171c:	ldr	w8, [x19, #116]
    1720:	mov	x23, xzr
    1724:	mov	w25, #0x102                 	// #258
    1728:	mov	w26, #0x934c                	// #37708
    172c:	str	w8, [sp, #72]
    1730:	ldr	x8, [sp, #32]
    1734:	sxtw	x24, w8
    1738:	b	1748 <sendMTFValues+0x121c>
    173c:	add	x23, x23, #0x1
    1740:	cmp	x23, x20
    1744:	b.eq	17f8 <sendMTFValues+0x12cc>  // b.none
    1748:	madd	x8, x23, x25, x19
    174c:	ldrb	w22, [x8, x26]
    1750:	mov	w1, #0x5                   	// #5
    1754:	mov	x0, x19
    1758:	mov	w2, w22
    175c:	bl	274 <bsW>
    1760:	ldr	x8, [sp, #48]
    1764:	cmn	w8, #0x1
    1768:	b.lt	173c <sendMTFValues+0x1210>  // b.tstop
    176c:	mov	x28, xzr
    1770:	b	1790 <sendMTFValues+0x1264>
    1774:	mov	w1, #0x1                   	// #1
    1778:	mov	x0, x19
    177c:	mov	w2, wzr
    1780:	bl	274 <bsW>
    1784:	add	x28, x28, #0x1
    1788:	cmp	x28, x24
    178c:	b.ge	173c <sendMTFValues+0x1210>  // b.tcont
    1790:	madd	x8, x23, x25, x19
    1794:	add	x8, x8, x28
    1798:	add	x21, x8, x26
    179c:	ldrb	w8, [x21]
    17a0:	cmp	w22, w8
    17a4:	b.ge	17c8 <sendMTFValues+0x129c>  // b.tcont
    17a8:	mov	w1, #0x2                   	// #2
    17ac:	mov	w2, #0x2                   	// #2
    17b0:	mov	x0, x19
    17b4:	bl	274 <bsW>
    17b8:	ldrb	w8, [x21]
    17bc:	add	w22, w22, #0x1
    17c0:	cmp	w22, w8
    17c4:	b.lt	17a8 <sendMTFValues+0x127c>  // b.tstop
    17c8:	ldrb	w8, [x21]
    17cc:	cmp	w22, w8
    17d0:	b.le	1774 <sendMTFValues+0x1248>
    17d4:	mov	w1, #0x2                   	// #2
    17d8:	mov	w2, #0x3                   	// #3
    17dc:	mov	x0, x19
    17e0:	bl	274 <bsW>
    17e4:	ldrb	w8, [x21]
    17e8:	sub	w22, w22, #0x1
    17ec:	cmp	w22, w8
    17f0:	b.gt	17d4 <sendMTFValues+0x12a8>
    17f4:	b	1774 <sendMTFValues+0x1248>
    17f8:	ldr	w8, [x19, #656]
    17fc:	cmp	w8, #0x3
    1800:	b.ge	1d98 <sendMTFValues+0x186c>  // b.tcont
    1804:	ldr	w8, [x19, #668]
    1808:	ldr	w9, [x19, #116]
    180c:	cmp	w8, #0x1
    1810:	str	w9, [sp, #56]
    1814:	b.lt	1cf0 <sendMTFValues+0x17c4>  // b.tstop
    1818:	mov	x22, xzr
    181c:	mov	w9, wzr
    1820:	mov	w11, #0x102                 	// #258
    1824:	mov	w24, #0x934c                	// #37708
    1828:	mov	w25, #0x408                 	// #1032
    182c:	mov	w26, #0x9958                	// #39256
    1830:	b	1c54 <sendMTFValues+0x1728>
    1834:	ldrb	w8, [x23]
    1838:	add	x23, x27, x21, lsl #1
    183c:	ldrh	w9, [x23]
    1840:	mov	x0, x19
    1844:	madd	x10, x8, x11, x19
    1848:	madd	x8, x8, x25, x19
    184c:	add	x21, x10, x24
    1850:	add	x28, x8, x26
    1854:	ldrb	w1, [x21, x9]
    1858:	ldr	w2, [x28, x9, lsl #2]
    185c:	bl	274 <bsW>
    1860:	ldrh	w8, [x23, #2]
    1864:	mov	x0, x19
    1868:	ldrb	w1, [x21, x8]
    186c:	ldr	w2, [x28, x8, lsl #2]
    1870:	bl	274 <bsW>
    1874:	ldrh	w8, [x23, #4]
    1878:	mov	x0, x19
    187c:	ldrb	w1, [x21, x8]
    1880:	ldr	w2, [x28, x8, lsl #2]
    1884:	bl	274 <bsW>
    1888:	ldrh	w8, [x23, #6]
    188c:	mov	x0, x19
    1890:	ldrb	w1, [x21, x8]
    1894:	ldr	w2, [x28, x8, lsl #2]
    1898:	bl	274 <bsW>
    189c:	ldrh	w8, [x23, #8]
    18a0:	mov	x0, x19
    18a4:	ldrb	w1, [x21, x8]
    18a8:	ldr	w2, [x28, x8, lsl #2]
    18ac:	bl	274 <bsW>
    18b0:	ldrh	w8, [x23, #10]
    18b4:	mov	x0, x19
    18b8:	ldrb	w1, [x21, x8]
    18bc:	ldr	w2, [x28, x8, lsl #2]
    18c0:	bl	274 <bsW>
    18c4:	ldrh	w8, [x23, #12]
    18c8:	mov	x0, x19
    18cc:	ldrb	w1, [x21, x8]
    18d0:	ldr	w2, [x28, x8, lsl #2]
    18d4:	bl	274 <bsW>
    18d8:	ldrh	w8, [x23, #14]
    18dc:	mov	x0, x19
    18e0:	ldrb	w1, [x21, x8]
    18e4:	ldr	w2, [x28, x8, lsl #2]
    18e8:	bl	274 <bsW>
    18ec:	ldrh	w8, [x23, #16]
    18f0:	mov	x0, x19
    18f4:	ldrb	w1, [x21, x8]
    18f8:	ldr	w2, [x28, x8, lsl #2]
    18fc:	bl	274 <bsW>
    1900:	ldrh	w8, [x23, #18]
    1904:	mov	x0, x19
    1908:	ldrb	w1, [x21, x8]
    190c:	ldr	w2, [x28, x8, lsl #2]
    1910:	bl	274 <bsW>
    1914:	ldrh	w8, [x23, #20]
    1918:	mov	x0, x19
    191c:	ldrb	w1, [x21, x8]
    1920:	ldr	w2, [x28, x8, lsl #2]
    1924:	bl	274 <bsW>
    1928:	ldrh	w8, [x23, #22]
    192c:	mov	x0, x19
    1930:	ldrb	w1, [x21, x8]
    1934:	ldr	w2, [x28, x8, lsl #2]
    1938:	bl	274 <bsW>
    193c:	ldrh	w8, [x23, #24]
    1940:	mov	x0, x19
    1944:	ldrb	w1, [x21, x8]
    1948:	ldr	w2, [x28, x8, lsl #2]
    194c:	bl	274 <bsW>
    1950:	ldrh	w8, [x23, #26]
    1954:	mov	x0, x19
    1958:	ldrb	w1, [x21, x8]
    195c:	ldr	w2, [x28, x8, lsl #2]
    1960:	bl	274 <bsW>
    1964:	ldrh	w8, [x23, #28]
    1968:	mov	x0, x19
    196c:	ldrb	w1, [x21, x8]
    1970:	ldr	w2, [x28, x8, lsl #2]
    1974:	bl	274 <bsW>
    1978:	ldrh	w8, [x23, #30]
    197c:	mov	x0, x19
    1980:	ldrb	w1, [x21, x8]
    1984:	ldr	w2, [x28, x8, lsl #2]
    1988:	bl	274 <bsW>
    198c:	ldrh	w8, [x23, #32]
    1990:	mov	x0, x19
    1994:	ldrb	w1, [x21, x8]
    1998:	ldr	w2, [x28, x8, lsl #2]
    199c:	bl	274 <bsW>
    19a0:	ldrh	w8, [x23, #34]
    19a4:	mov	x0, x19
    19a8:	ldrb	w1, [x21, x8]
    19ac:	ldr	w2, [x28, x8, lsl #2]
    19b0:	bl	274 <bsW>
    19b4:	ldrh	w8, [x23, #36]
    19b8:	mov	x0, x19
    19bc:	ldrb	w1, [x21, x8]
    19c0:	ldr	w2, [x28, x8, lsl #2]
    19c4:	bl	274 <bsW>
    19c8:	ldrh	w8, [x23, #38]
    19cc:	mov	x0, x19
    19d0:	ldrb	w1, [x21, x8]
    19d4:	ldr	w2, [x28, x8, lsl #2]
    19d8:	bl	274 <bsW>
    19dc:	ldrh	w8, [x23, #40]
    19e0:	mov	x0, x19
    19e4:	ldrb	w1, [x21, x8]
    19e8:	ldr	w2, [x28, x8, lsl #2]
    19ec:	bl	274 <bsW>
    19f0:	ldrh	w8, [x23, #42]
    19f4:	mov	x0, x19
    19f8:	ldrb	w1, [x21, x8]
    19fc:	ldr	w2, [x28, x8, lsl #2]
    1a00:	bl	274 <bsW>
    1a04:	ldrh	w8, [x23, #44]
    1a08:	mov	x0, x19
    1a0c:	ldrb	w1, [x21, x8]
    1a10:	ldr	w2, [x28, x8, lsl #2]
    1a14:	bl	274 <bsW>
    1a18:	ldrh	w8, [x23, #46]
    1a1c:	mov	x0, x19
    1a20:	ldrb	w1, [x21, x8]
    1a24:	ldr	w2, [x28, x8, lsl #2]
    1a28:	bl	274 <bsW>
    1a2c:	ldrh	w8, [x23, #48]
    1a30:	mov	x0, x19
    1a34:	ldrb	w1, [x21, x8]
    1a38:	ldr	w2, [x28, x8, lsl #2]
    1a3c:	bl	274 <bsW>
    1a40:	ldrh	w8, [x23, #50]
    1a44:	mov	x0, x19
    1a48:	ldrb	w1, [x21, x8]
    1a4c:	ldr	w2, [x28, x8, lsl #2]
    1a50:	bl	274 <bsW>
    1a54:	ldrh	w8, [x23, #52]
    1a58:	mov	x0, x19
    1a5c:	ldrb	w1, [x21, x8]
    1a60:	ldr	w2, [x28, x8, lsl #2]
    1a64:	bl	274 <bsW>
    1a68:	ldrh	w8, [x23, #54]
    1a6c:	mov	x0, x19
    1a70:	ldrb	w1, [x21, x8]
    1a74:	ldr	w2, [x28, x8, lsl #2]
    1a78:	bl	274 <bsW>
    1a7c:	ldrh	w8, [x23, #56]
    1a80:	mov	x0, x19
    1a84:	ldrb	w1, [x21, x8]
    1a88:	ldr	w2, [x28, x8, lsl #2]
    1a8c:	bl	274 <bsW>
    1a90:	ldrh	w8, [x23, #58]
    1a94:	mov	x0, x19
    1a98:	ldrb	w1, [x21, x8]
    1a9c:	ldr	w2, [x28, x8, lsl #2]
    1aa0:	bl	274 <bsW>
    1aa4:	ldrh	w8, [x23, #60]
    1aa8:	mov	x0, x19
    1aac:	ldrb	w1, [x21, x8]
    1ab0:	ldr	w2, [x28, x8, lsl #2]
    1ab4:	bl	274 <bsW>
    1ab8:	ldrh	w8, [x23, #62]
    1abc:	mov	x0, x19
    1ac0:	ldrb	w1, [x21, x8]
    1ac4:	ldr	w2, [x28, x8, lsl #2]
    1ac8:	bl	274 <bsW>
    1acc:	ldrh	w8, [x23, #64]
    1ad0:	mov	x0, x19
    1ad4:	ldrb	w1, [x21, x8]
    1ad8:	ldr	w2, [x28, x8, lsl #2]
    1adc:	bl	274 <bsW>
    1ae0:	ldrh	w8, [x23, #66]
    1ae4:	mov	x0, x19
    1ae8:	ldrb	w1, [x21, x8]
    1aec:	ldr	w2, [x28, x8, lsl #2]
    1af0:	bl	274 <bsW>
    1af4:	ldrh	w8, [x23, #68]
    1af8:	mov	x0, x19
    1afc:	ldrb	w1, [x21, x8]
    1b00:	ldr	w2, [x28, x8, lsl #2]
    1b04:	bl	274 <bsW>
    1b08:	ldrh	w8, [x23, #70]
    1b0c:	mov	x0, x19
    1b10:	ldrb	w1, [x21, x8]
    1b14:	ldr	w2, [x28, x8, lsl #2]
    1b18:	bl	274 <bsW>
    1b1c:	ldrh	w8, [x23, #72]
    1b20:	mov	x0, x19
    1b24:	ldrb	w1, [x21, x8]
    1b28:	ldr	w2, [x28, x8, lsl #2]
    1b2c:	bl	274 <bsW>
    1b30:	ldrh	w8, [x23, #74]
    1b34:	mov	x0, x19
    1b38:	ldrb	w1, [x21, x8]
    1b3c:	ldr	w2, [x28, x8, lsl #2]
    1b40:	bl	274 <bsW>
    1b44:	ldrh	w8, [x23, #76]
    1b48:	mov	x0, x19
    1b4c:	ldrb	w1, [x21, x8]
    1b50:	ldr	w2, [x28, x8, lsl #2]
    1b54:	bl	274 <bsW>
    1b58:	ldrh	w8, [x23, #78]
    1b5c:	mov	x0, x19
    1b60:	ldrb	w1, [x21, x8]
    1b64:	ldr	w2, [x28, x8, lsl #2]
    1b68:	bl	274 <bsW>
    1b6c:	ldrh	w8, [x23, #80]
    1b70:	mov	x0, x19
    1b74:	ldrb	w1, [x21, x8]
    1b78:	ldr	w2, [x28, x8, lsl #2]
    1b7c:	bl	274 <bsW>
    1b80:	ldrh	w8, [x23, #82]
    1b84:	mov	x0, x19
    1b88:	ldrb	w1, [x21, x8]
    1b8c:	ldr	w2, [x28, x8, lsl #2]
    1b90:	bl	274 <bsW>
    1b94:	ldrh	w8, [x23, #84]
    1b98:	mov	x0, x19
    1b9c:	ldrb	w1, [x21, x8]
    1ba0:	ldr	w2, [x28, x8, lsl #2]
    1ba4:	bl	274 <bsW>
    1ba8:	ldrh	w8, [x23, #86]
    1bac:	mov	x0, x19
    1bb0:	ldrb	w1, [x21, x8]
    1bb4:	ldr	w2, [x28, x8, lsl #2]
    1bb8:	bl	274 <bsW>
    1bbc:	ldrh	w8, [x23, #88]
    1bc0:	mov	x0, x19
    1bc4:	ldrb	w1, [x21, x8]
    1bc8:	ldr	w2, [x28, x8, lsl #2]
    1bcc:	bl	274 <bsW>
    1bd0:	ldrh	w8, [x23, #90]
    1bd4:	mov	x0, x19
    1bd8:	ldrb	w1, [x21, x8]
    1bdc:	ldr	w2, [x28, x8, lsl #2]
    1be0:	bl	274 <bsW>
    1be4:	ldrh	w8, [x23, #92]
    1be8:	mov	x0, x19
    1bec:	ldrb	w1, [x21, x8]
    1bf0:	ldr	w2, [x28, x8, lsl #2]
    1bf4:	bl	274 <bsW>
    1bf8:	ldrh	w8, [x23, #94]
    1bfc:	mov	x0, x19
    1c00:	ldrb	w1, [x21, x8]
    1c04:	ldr	w2, [x28, x8, lsl #2]
    1c08:	bl	274 <bsW>
    1c0c:	ldrh	w8, [x23, #96]
    1c10:	mov	x0, x19
    1c14:	ldrb	w1, [x21, x8]
    1c18:	ldr	w2, [x28, x8, lsl #2]
    1c1c:	bl	274 <bsW>
    1c20:	ldr	x8, [sp, #64]
    1c24:	mov	x0, x19
    1c28:	ldrh	w8, [x27, x8, lsl #1]
    1c2c:	ldrb	w1, [x21, x8]
    1c30:	ldr	w2, [x28, x8, lsl #2]
    1c34:	bl	274 <bsW>
    1c38:	mov	w11, #0x102                 	// #258
    1c3c:	ldr	x9, [sp, #72]
    1c40:	ldr	w8, [x19, #668]
    1c44:	add	x22, x22, #0x1
    1c48:	add	w9, w9, #0x1
    1c4c:	cmp	w9, w8
    1c50:	b.ge	1cf4 <sendMTFValues+0x17c8>  // b.tcont
    1c54:	add	x23, x19, x22
    1c58:	sxtw	x21, w9
    1c5c:	ldrb	w9, [x23, #1704]
    1c60:	add	x12, x21, #0x31
    1c64:	sub	w10, w8, #0x1
    1c68:	cmp	w12, w8
    1c6c:	csel	w28, w12, w10, lt  // lt = tstop
    1c70:	cmp	w20, w9
    1c74:	str	x12, [sp, #64]
    1c78:	b.hi	1c88 <sendMTFValues+0x175c>  // b.pmore
    1c7c:	mov	w0, #0xbbe                 	// #3006
    1c80:	bl	0 <BZ2_bz__AssertH__fail>
    1c84:	mov	w11, #0x102                 	// #258
    1c88:	cmp	w20, #0x6
    1c8c:	add	x23, x23, #0x6a8
    1c90:	str	x28, [sp, #72]
    1c94:	b.ne	1ca4 <sendMTFValues+0x1778>  // b.any
    1c98:	sub	w8, w28, w21
    1c9c:	cmp	w8, #0x31
    1ca0:	b.eq	1834 <sendMTFValues+0x1308>  // b.none
    1ca4:	cmp	w28, w21
    1ca8:	b.lt	1c3c <sendMTFValues+0x1710>  // b.tstop
    1cac:	ldr	x8, [sp, #72]
    1cb0:	sxtw	x28, w8
    1cb4:	ldrb	w8, [x23]
    1cb8:	ldrh	w9, [x27, x21, lsl #1]
    1cbc:	mov	x0, x19
    1cc0:	madd	x10, x8, x11, x19
    1cc4:	madd	x8, x8, x25, x19
    1cc8:	add	x10, x10, x9
    1ccc:	add	x8, x8, x9, lsl #2
    1cd0:	ldrb	w1, [x10, x24]
    1cd4:	ldr	w2, [x8, x26]
    1cd8:	bl	274 <bsW>
    1cdc:	mov	w11, #0x102                 	// #258
    1ce0:	cmp	x21, x28
    1ce4:	add	x21, x21, #0x1
    1ce8:	b.lt	1cb4 <sendMTFValues+0x1788>  // b.tstop
    1cec:	b	1c3c <sendMTFValues+0x1710>
    1cf0:	mov	w22, wzr
    1cf4:	ldur	x8, [x29, #-64]
    1cf8:	adrp	x20, 0 <stderr>
    1cfc:	cmp	w22, w8
    1d00:	b.eq	1d0c <sendMTFValues+0x17e0>  // b.none
    1d04:	mov	w0, #0xbbf                 	// #3007
    1d08:	bl	0 <BZ2_bz__AssertH__fail>
    1d0c:	ldr	w8, [x19, #656]
    1d10:	cmp	w8, #0x3
    1d14:	b.ge	1dbc <sendMTFValues+0x1890>  // b.tcont
    1d18:	ldp	x20, x19, [sp, #224]
    1d1c:	ldp	x22, x21, [sp, #208]
    1d20:	ldp	x24, x23, [sp, #192]
    1d24:	ldp	x26, x25, [sp, #176]
    1d28:	ldp	x28, x27, [sp, #160]
    1d2c:	ldp	x29, x30, [sp, #144]
    1d30:	add	sp, sp, #0xf0
    1d34:	ret
    1d38:	ldr	x0, [x8]
    1d3c:	ldr	w2, [x19, #108]
    1d40:	ldr	w3, [x19, #668]
    1d44:	ldr	w4, [x19, #124]
    1d48:	adrp	x1, 0 <BZ2_bsInitWrite>
    1d4c:	add	x1, x1, #0x0
    1d50:	bl	0 <fprintf>
    1d54:	b	564 <sendMTFValues+0x38>
    1d58:	ldr	w8, [x19, #116]
    1d5c:	adrp	x9, 0 <stderr>
    1d60:	ldr	x0, [x9]
    1d64:	adrp	x1, 0 <BZ2_bsInitWrite>
    1d68:	sub	w2, w8, w21
    1d6c:	add	x1, x1, #0x0
    1d70:	bl	0 <fprintf>
    1d74:	b	1678 <sendMTFValues+0x114c>
    1d78:	ldr	w8, [x19, #116]
    1d7c:	adrp	x9, 0 <stderr>
    1d80:	ldr	x0, [x9]
    1d84:	adrp	x1, 0 <BZ2_bsInitWrite>
    1d88:	sub	w2, w8, w21
    1d8c:	add	x1, x1, #0x0
    1d90:	bl	0 <fprintf>
    1d94:	b	171c <sendMTFValues+0x11f0>
    1d98:	adrp	x9, 0 <stderr>
    1d9c:	ldr	w8, [x19, #116]
    1da0:	ldr	x0, [x9]
    1da4:	ldr	w9, [sp, #72]
    1da8:	adrp	x1, 0 <BZ2_bsInitWrite>
    1dac:	add	x1, x1, #0x0
    1db0:	sub	w2, w8, w9
    1db4:	bl	0 <fprintf>
    1db8:	b	1804 <sendMTFValues+0x12d8>
    1dbc:	ldr	w8, [x19, #116]
    1dc0:	ldr	w9, [sp, #56]
    1dc4:	ldr	x0, [x20]
    1dc8:	adrp	x1, 0 <BZ2_bsInitWrite>
    1dcc:	add	x1, x1, #0x0
    1dd0:	sub	w2, w8, w9
    1dd4:	bl	0 <fprintf>
    1dd8:	b	1d18 <sendMTFValues+0x17ec>

0000000000001ddc <bsFinishWrite>:
    1ddc:	ldr	w8, [x0, #644]
    1de0:	cmp	w8, #0x1
    1de4:	b.lt	1e24 <bsFinishWrite+0x48>  // b.tstop
    1de8:	add	x8, x0, #0x280
    1dec:	ldr	x9, [x0, #80]
    1df0:	ldrsw	x10, [x0, #116]
    1df4:	ldrb	w8, [x8, #3]
    1df8:	strb	w8, [x9, x10]
    1dfc:	ldr	w8, [x0, #116]
    1e00:	ldr	w9, [x0, #640]
    1e04:	ldr	w10, [x0, #644]
    1e08:	add	w8, w8, #0x1
    1e0c:	lsl	w9, w9, #8
    1e10:	subs	w10, w10, #0x8
    1e14:	str	w8, [x0, #116]
    1e18:	str	w9, [x0, #640]
    1e1c:	str	w10, [x0, #644]
    1e20:	b.gt	1de8 <bsFinishWrite+0xc>
    1e24:	ret

0000000000001e28 <makeMaps_e>:
    1e28:	mov	x8, xzr
    1e2c:	str	wzr, [x0, #124]
    1e30:	b	1e40 <makeMaps_e+0x18>
    1e34:	add	x8, x8, #0x1
    1e38:	cmp	x8, #0x100
    1e3c:	b.eq	1e60 <makeMaps_e+0x38>  // b.none
    1e40:	add	x9, x0, x8
    1e44:	ldrb	w10, [x9, #128]
    1e48:	cbz	w10, 1e34 <makeMaps_e+0xc>
    1e4c:	ldr	w10, [x0, #124]
    1e50:	strb	w10, [x9, #384]
    1e54:	add	w9, w10, #0x1
    1e58:	str	w9, [x0, #124]
    1e5c:	b	1e34 <makeMaps_e+0xc>
    1e60:	ret

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	sub	sp, sp, #0xf0
       4:	stp	x29, x30, [sp, #144]
       8:	stp	x28, x27, [sp, #160]
       c:	stp	x26, x25, [sp, #176]
      10:	stp	x24, x23, [sp, #192]
      14:	stp	x22, x21, [sp, #208]
      18:	stp	x20, x19, [sp, #224]
      1c:	add	x29, sp, #0x90
      20:	ldr	w8, [x0, #8]
      24:	ldr	x25, [x0]
      28:	mov	w10, #0xfa24                	// #64036
      2c:	mov	x20, x0
      30:	subs	w9, w8, #0xa
      34:	add	x22, x0, x10
      38:	b.ne	58 <BZ2_decompress+0x58>  // b.any
      3c:	mov	w8, #0xfa24                	// #64036
      40:	movi	v0.2d, #0x0
      44:	add	x8, x20, x8
      48:	str	q0, [x20, #64128]
      4c:	stp	q0, q0, [x8, #64]
      50:	stp	q0, q0, [x8, #32]
      54:	stp	q0, q0, [x8]
      58:	ldp	w8, w5, [x22, #56]
      5c:	ldp	w16, w30, [x22]
      60:	ldp	w26, w6, [x22, #8]
      64:	ldp	w4, w17, [x22, #16]
      68:	ldp	w21, w28, [x22, #24]
      6c:	ldp	w15, w24, [x22, #32]
      70:	ldp	w23, w18, [x22, #40]
      74:	ldp	w19, w2, [x22, #48]
      78:	stur	w8, [x29, #-20]
      7c:	ldp	w1, w8, [x22, #64]
      80:	ldr	w3, [x22, #80]
      84:	ldur	x7, [x22, #84]
      88:	ldur	x27, [x22, #92]
      8c:	stur	w8, [x29, #-12]
      90:	ldp	w8, w14, [x22, #72]
      94:	cmp	w9, #0x28
      98:	stur	w8, [x29, #-16]
      9c:	ldur	x8, [x22, #100]
      a0:	stur	x8, [x29, #-32]
      a4:	b.hi	2dc <BZ2_decompress+0x2dc>  // b.pmore
      a8:	adrp	x10, 0 <BZ2_decompress>
      ac:	add	x10, x10, #0x0
      b0:	adr	x8, c0 <BZ2_decompress+0xc0>
      b4:	ldrh	w11, [x10, x9, lsl #1]
      b8:	add	x8, x8, x11, lsl #2
      bc:	br	x8
      c0:	ldr	w8, [x20, #36]
      c4:	mov	w9, #0xa                   	// #10
      c8:	str	w9, [x20, #8]
      cc:	cmp	w8, #0x7
      d0:	b.le	294 <BZ2_decompress+0x294>
      d4:	ldr	w9, [x20, #32]
      d8:	sub	w8, w8, #0x8
      dc:	str	w8, [x20, #36]
      e0:	lsr	w9, w9, w8
      e4:	and	w9, w9, #0xff
      e8:	cmp	w9, #0x42
      ec:	b.ne	184 <BZ2_decompress+0x184>  // b.any
      f0:	ldr	w8, [x20, #36]
      f4:	mov	w9, #0xb                   	// #11
      f8:	str	w9, [x20, #8]
      fc:	cmp	w8, #0x7
     100:	b.le	240 <BZ2_decompress+0x240>
     104:	ldr	w9, [x20, #32]
     108:	sub	w8, w8, #0x8
     10c:	str	w8, [x20, #36]
     110:	lsr	w9, w9, w8
     114:	and	w9, w9, #0xff
     118:	cmp	w9, #0x5a
     11c:	b.ne	184 <BZ2_decompress+0x184>  // b.any
     120:	ldr	w8, [x20, #36]
     124:	mov	w9, #0xc                   	// #12
     128:	str	w9, [x20, #8]
     12c:	cmp	w8, #0x7
     130:	b.le	1ec <BZ2_decompress+0x1ec>
     134:	ldr	w9, [x20, #32]
     138:	sub	w8, w8, #0x8
     13c:	str	w8, [x20, #36]
     140:	lsr	w9, w9, w8
     144:	and	w9, w9, #0xff
     148:	cmp	w9, #0x68
     14c:	b.ne	184 <BZ2_decompress+0x184>  // b.any
     150:	ldr	w8, [x20, #36]
     154:	mov	w9, #0xd                   	// #13
     158:	str	w9, [x20, #8]
     15c:	cmp	w8, #0x7
     160:	b.le	198 <BZ2_decompress+0x198>
     164:	ldr	w9, [x20, #32]
     168:	sub	w10, w8, #0x8
     16c:	lsr	w8, w9, w10
     170:	and	w8, w8, #0xff
     174:	sub	w9, w8, #0x31
     178:	cmp	w9, #0x8
     17c:	stp	w10, w8, [x20, #36]
     180:	b.ls	37c <BZ2_decompress+0x37c>  // b.plast
     184:	mov	w0, #0xfffffffb            	// #-5
     188:	b	29b0 <BZ2_decompress+0x29b0>
     18c:	ldr	w8, [x20, #36]
     190:	cmp	w8, #0x7
     194:	b.gt	164 <BZ2_decompress+0x164>
     198:	ldr	w9, [x25, #8]
     19c:	cbz	w9, 13a4 <BZ2_decompress+0x13a4>
     1a0:	ldr	x10, [x25]
     1a4:	ldr	w11, [x20, #32]
     1a8:	add	w8, w8, #0x8
     1ac:	sub	w9, w9, #0x1
     1b0:	ldrb	w12, [x10], #1
     1b4:	bfi	w12, w11, #8, #24
     1b8:	stp	w12, w8, [x20, #32]
     1bc:	ldr	w8, [x25, #12]
     1c0:	str	x10, [x25]
     1c4:	adds	w8, w8, #0x1
     1c8:	stp	w9, w8, [x25, #8]
     1cc:	b.cc	18c <BZ2_decompress+0x18c>  // b.lo, b.ul, b.last
     1d0:	ldr	w8, [x25, #16]
     1d4:	add	w8, w8, #0x1
     1d8:	str	w8, [x25, #16]
     1dc:	b	18c <BZ2_decompress+0x18c>
     1e0:	ldr	w8, [x20, #36]
     1e4:	cmp	w8, #0x7
     1e8:	b.gt	134 <BZ2_decompress+0x134>
     1ec:	ldr	w9, [x25, #8]
     1f0:	cbz	w9, 13a4 <BZ2_decompress+0x13a4>
     1f4:	ldr	x10, [x25]
     1f8:	ldr	w11, [x20, #32]
     1fc:	add	w8, w8, #0x8
     200:	sub	w9, w9, #0x1
     204:	ldrb	w12, [x10], #1
     208:	bfi	w12, w11, #8, #24
     20c:	stp	w12, w8, [x20, #32]
     210:	ldr	w8, [x25, #12]
     214:	str	x10, [x25]
     218:	adds	w8, w8, #0x1
     21c:	stp	w9, w8, [x25, #8]
     220:	b.cc	1e0 <BZ2_decompress+0x1e0>  // b.lo, b.ul, b.last
     224:	ldr	w8, [x25, #16]
     228:	add	w8, w8, #0x1
     22c:	str	w8, [x25, #16]
     230:	b	1e0 <BZ2_decompress+0x1e0>
     234:	ldr	w8, [x20, #36]
     238:	cmp	w8, #0x7
     23c:	b.gt	104 <BZ2_decompress+0x104>
     240:	ldr	w9, [x25, #8]
     244:	cbz	w9, 13a4 <BZ2_decompress+0x13a4>
     248:	ldr	x10, [x25]
     24c:	ldr	w11, [x20, #32]
     250:	add	w8, w8, #0x8
     254:	sub	w9, w9, #0x1
     258:	ldrb	w12, [x10], #1
     25c:	bfi	w12, w11, #8, #24
     260:	stp	w12, w8, [x20, #32]
     264:	ldr	w8, [x25, #12]
     268:	str	x10, [x25]
     26c:	adds	w8, w8, #0x1
     270:	stp	w9, w8, [x25, #8]
     274:	b.cc	234 <BZ2_decompress+0x234>  // b.lo, b.ul, b.last
     278:	ldr	w8, [x25, #16]
     27c:	add	w8, w8, #0x1
     280:	str	w8, [x25, #16]
     284:	b	234 <BZ2_decompress+0x234>
     288:	ldr	w8, [x20, #36]
     28c:	cmp	w8, #0x7
     290:	b.gt	d4 <BZ2_decompress+0xd4>
     294:	ldr	w9, [x25, #8]
     298:	cbz	w9, 13a4 <BZ2_decompress+0x13a4>
     29c:	ldr	x10, [x25]
     2a0:	ldr	w11, [x20, #32]
     2a4:	add	w8, w8, #0x8
     2a8:	sub	w9, w9, #0x1
     2ac:	ldrb	w12, [x10], #1
     2b0:	bfi	w12, w11, #8, #24
     2b4:	stp	w12, w8, [x20, #32]
     2b8:	ldr	w8, [x25, #12]
     2bc:	str	x10, [x25]
     2c0:	adds	w8, w8, #0x1
     2c4:	stp	w9, w8, [x25, #8]
     2c8:	b.cc	288 <BZ2_decompress+0x288>  // b.lo, b.ul, b.last
     2cc:	ldr	w8, [x25, #16]
     2d0:	add	w8, w8, #0x1
     2d4:	str	w8, [x25, #16]
     2d8:	b	288 <BZ2_decompress+0x288>
     2dc:	mov	w0, #0xfa1                 	// #4001
     2e0:	str	w6, [sp, #44]
     2e4:	stur	w17, [x29, #-36]
     2e8:	str	x23, [sp, #72]
     2ec:	stp	w5, w4, [sp, #28]
     2f0:	str	x24, [sp, #16]
     2f4:	stur	w21, [x29, #-60]
     2f8:	str	x28, [sp, #64]
     2fc:	stp	x26, x7, [x29, #-56]
     300:	stur	w19, [x29, #-40]
     304:	mov	x26, x27
     308:	mov	w27, w3
     30c:	mov	w20, w30
     310:	mov	x25, x1
     314:	mov	x19, x18
     318:	mov	w23, w15
     31c:	mov	x24, x16
     320:	mov	w21, w2
     324:	mov	x28, x14
     328:	bl	0 <BZ2_bz__AssertH__fail>
     32c:	mov	w0, #0xfa2                 	// #4002
     330:	bl	0 <BZ2_bz__AssertH__fail>
     334:	mov	x14, x28
     338:	mov	w2, w21
     33c:	mov	x16, x24
     340:	mov	w15, w23
     344:	mov	x18, x19
     348:	mov	w3, w27
     34c:	mov	x27, x26
     350:	ldp	x26, x7, [x29, #-56]
     354:	ldp	w19, w17, [x29, #-40]
     358:	ldp	x28, x23, [sp, #64]
     35c:	ldur	w21, [x29, #-60]
     360:	ldp	w5, w4, [sp, #28]
     364:	ldr	x24, [sp, #16]
     368:	ldr	w6, [sp, #44]
     36c:	mov	x1, x25
     370:	mov	w30, w20
     374:	mov	w0, wzr
     378:	b	29b0 <BZ2_decompress+0x29b0>
     37c:	sub	w9, w8, #0x30
     380:	stp	x28, x23, [sp, #64]
     384:	str	w9, [x20, #40]
     388:	stur	x26, [x29, #-56]
     38c:	ldur	w26, [x29, #-16]
     390:	ldrb	w10, [x20, #44]
     394:	ldr	x8, [x25, #56]
     398:	ldr	x0, [x25, #72]
     39c:	stur	w21, [x29, #-60]
     3a0:	str	x27, [sp, #56]
     3a4:	mov	x27, x14
     3a8:	mov	w21, w2
     3ac:	mov	x28, x24
     3b0:	mov	w24, w5
     3b4:	mov	w23, w4
     3b8:	str	x16, [sp]
     3bc:	str	w15, [sp, #8]
     3c0:	str	x18, [sp, #48]
     3c4:	str	x1, [sp, #32]
     3c8:	stur	w19, [x29, #-40]
     3cc:	str	w30, [sp, #16]
     3d0:	stur	x7, [x29, #-48]
     3d4:	str	w3, [sp, #28]
     3d8:	stur	w17, [x29, #-36]
     3dc:	str	w6, [sp, #44]
     3e0:	cbz	w10, 480 <BZ2_decompress+0x480>
     3e4:	mov	w10, #0xd40                 	// #3392
     3e8:	movk	w10, #0x3, lsl #16
     3ec:	mul	w1, w9, w10
     3f0:	mov	w2, #0x1                   	// #1
     3f4:	blr	x8
     3f8:	ldr	w8, [x20, #40]
     3fc:	str	x0, [x20, #3160]
     400:	ldr	x9, [x25, #56]
     404:	ldr	x0, [x25, #72]
     408:	mov	w10, #0x86a0                	// #34464
     40c:	movk	w10, #0x1, lsl #16
     410:	mul	w8, w8, w10
     414:	asr	w1, w8, #1
     418:	mov	w2, #0x1                   	// #1
     41c:	blr	x9
     420:	mov	x8, x0
     424:	str	x0, [x20, #3168]
     428:	mov	w0, #0xfffffffd            	// #-3
     42c:	cbz	x8, 11dc <BZ2_decompress+0x11dc>
     430:	ldr	x8, [x20, #3160]
     434:	ldr	w6, [sp, #44]
     438:	mov	w4, w23
     43c:	mov	w5, w24
     440:	mov	x24, x28
     444:	mov	w2, w21
     448:	mov	x14, x27
     44c:	ldp	w19, w17, [x29, #-40]
     450:	ldr	w3, [sp, #28]
     454:	ldp	x26, x7, [x29, #-56]
     458:	ldp	x27, x28, [sp, #56]
     45c:	ldr	w30, [sp, #16]
     460:	ldur	w21, [x29, #-60]
     464:	ldr	x23, [sp, #72]
     468:	ldr	x1, [sp, #32]
     46c:	ldr	x18, [sp, #48]
     470:	ldr	w15, [sp, #8]
     474:	ldr	x16, [sp]
     478:	cbnz	x8, 4e0 <BZ2_decompress+0x4e0>
     47c:	b	29b0 <BZ2_decompress+0x29b0>
     480:	mov	w10, #0x1a80                	// #6784
     484:	movk	w10, #0x6, lsl #16
     488:	mul	w1, w9, w10
     48c:	mov	w2, #0x1                   	// #1
     490:	blr	x8
     494:	str	x0, [x20, #3152]
     498:	ldr	w6, [sp, #44]
     49c:	mov	w4, w23
     4a0:	mov	w5, w24
     4a4:	mov	x24, x28
     4a8:	mov	w2, w21
     4ac:	mov	x14, x27
     4b0:	ldp	w19, w17, [x29, #-40]
     4b4:	ldr	w3, [sp, #28]
     4b8:	ldp	x26, x7, [x29, #-56]
     4bc:	ldp	x27, x28, [sp, #56]
     4c0:	ldr	w30, [sp, #16]
     4c4:	ldur	w21, [x29, #-60]
     4c8:	ldr	x23, [sp, #72]
     4cc:	ldr	x1, [sp, #32]
     4d0:	ldr	x18, [sp, #48]
     4d4:	ldr	w15, [sp, #8]
     4d8:	ldr	x16, [sp]
     4dc:	cbz	x0, 11f4 <BZ2_decompress+0x11f4>
     4e0:	ldr	w9, [x20, #36]
     4e4:	mov	w8, #0xe                   	// #14
     4e8:	str	w8, [x20, #8]
     4ec:	cmp	w9, #0x7
     4f0:	b.le	1180 <BZ2_decompress+0x1180>
     4f4:	ldr	w8, [x20, #32]
     4f8:	sub	w9, w9, #0x8
     4fc:	str	w9, [x20, #36]
     500:	lsr	w8, w8, w9
     504:	and	w8, w8, #0xff
     508:	cmp	w8, #0x17
     50c:	b.eq	944 <BZ2_decompress+0x944>  // b.none
     510:	cmp	w8, #0x31
     514:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     518:	ldr	w9, [x20, #36]
     51c:	mov	w8, #0xf                   	// #15
     520:	str	w8, [x20, #8]
     524:	cmp	w9, #0x7
     528:	b.le	10c8 <BZ2_decompress+0x10c8>
     52c:	ldr	w8, [x20, #32]
     530:	sub	w9, w9, #0x8
     534:	str	w9, [x20, #36]
     538:	lsr	w8, w8, w9
     53c:	and	w8, w8, #0xff
     540:	cmp	w8, #0x41
     544:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     548:	ldr	w9, [x20, #36]
     54c:	mov	w8, #0x10                  	// #16
     550:	str	w8, [x20, #8]
     554:	cmp	w9, #0x7
     558:	b.le	1010 <BZ2_decompress+0x1010>
     55c:	ldr	w8, [x20, #32]
     560:	sub	w9, w9, #0x8
     564:	str	w9, [x20, #36]
     568:	lsr	w8, w8, w9
     56c:	and	w8, w8, #0xff
     570:	cmp	w8, #0x59
     574:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     578:	ldr	w9, [x20, #36]
     57c:	mov	w8, #0x11                  	// #17
     580:	str	w8, [x20, #8]
     584:	cmp	w9, #0x7
     588:	b.le	f58 <BZ2_decompress+0xf58>
     58c:	ldr	w8, [x20, #32]
     590:	sub	w9, w9, #0x8
     594:	str	w9, [x20, #36]
     598:	lsr	w8, w8, w9
     59c:	and	w8, w8, #0xff
     5a0:	cmp	w8, #0x26
     5a4:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     5a8:	ldr	w9, [x20, #36]
     5ac:	mov	w8, #0x12                  	// #18
     5b0:	str	w8, [x20, #8]
     5b4:	cmp	w9, #0x7
     5b8:	b.le	ea0 <BZ2_decompress+0xea0>
     5bc:	ldr	w8, [x20, #32]
     5c0:	sub	w9, w9, #0x8
     5c4:	str	w9, [x20, #36]
     5c8:	lsr	w8, w8, w9
     5cc:	and	w8, w8, #0xff
     5d0:	cmp	w8, #0x53
     5d4:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     5d8:	ldr	w9, [x20, #36]
     5dc:	mov	w8, #0x13                  	// #19
     5e0:	str	w8, [x20, #8]
     5e4:	cmp	w9, #0x7
     5e8:	b.le	de8 <BZ2_decompress+0xde8>
     5ec:	ldr	w8, [x20, #32]
     5f0:	sub	w9, w9, #0x8
     5f4:	str	w9, [x20, #36]
     5f8:	lsr	w8, w8, w9
     5fc:	and	w8, w8, #0xff
     600:	cmp	w8, #0x59
     604:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     608:	ldp	w8, w9, [x20, #48]
     60c:	mov	w10, w2
     610:	add	w2, w8, #0x1
     614:	cmp	w9, #0x2
     618:	str	w2, [x20, #48]
     61c:	b.ge	11fc <BZ2_decompress+0x11fc>  // b.tcont
     620:	mov	w2, w10
     624:	str	wzr, [x20, #3176]
     628:	ldr	w9, [x20, #36]
     62c:	mov	w8, #0x14                  	// #20
     630:	str	w8, [x20, #8]
     634:	cmp	w9, #0x7
     638:	b.le	d30 <BZ2_decompress+0xd30>
     63c:	ldr	w8, [x20, #32]
     640:	ldr	w10, [x20, #3176]
     644:	sub	w9, w9, #0x8
     648:	str	w9, [x20, #36]
     64c:	lsr	w8, w8, w9
     650:	bfi	w8, w10, #8, #24
     654:	str	w8, [x20, #3176]
     658:	ldr	w9, [x20, #36]
     65c:	mov	w8, #0x15                  	// #21
     660:	str	w8, [x20, #8]
     664:	cmp	w9, #0x7
     668:	b.le	c78 <BZ2_decompress+0xc78>
     66c:	ldr	w8, [x20, #32]
     670:	ldr	w10, [x20, #3176]
     674:	sub	w9, w9, #0x8
     678:	str	w9, [x20, #36]
     67c:	lsr	w8, w8, w9
     680:	bfi	w8, w10, #8, #24
     684:	str	w8, [x20, #3176]
     688:	ldr	w9, [x20, #36]
     68c:	mov	w8, #0x16                  	// #22
     690:	str	w8, [x20, #8]
     694:	cmp	w9, #0x7
     698:	b.le	b64 <BZ2_decompress+0xb64>
     69c:	ldr	w8, [x20, #32]
     6a0:	ldr	w10, [x20, #3176]
     6a4:	sub	w9, w9, #0x8
     6a8:	str	w9, [x20, #36]
     6ac:	lsr	w8, w8, w9
     6b0:	bfi	w8, w10, #8, #24
     6b4:	str	w8, [x20, #3176]
     6b8:	ldr	w9, [x20, #36]
     6bc:	mov	w8, #0x17                  	// #23
     6c0:	str	w8, [x20, #8]
     6c4:	cmp	w9, #0x7
     6c8:	b.le	8e8 <BZ2_decompress+0x8e8>
     6cc:	ldr	w8, [x20, #32]
     6d0:	ldr	w10, [x20, #3176]
     6d4:	sub	w9, w9, #0x8
     6d8:	str	w9, [x20, #36]
     6dc:	lsr	w8, w8, w9
     6e0:	bfi	w8, w10, #8, #24
     6e4:	str	w8, [x20, #3176]
     6e8:	ldr	w9, [x20, #36]
     6ec:	mov	w8, #0x18                  	// #24
     6f0:	str	w8, [x20, #8]
     6f4:	cmp	w9, #0x0
     6f8:	b.le	c1c <BZ2_decompress+0xc1c>
     6fc:	ldr	w8, [x20, #32]
     700:	sub	w9, w9, #0x1
     704:	str	w9, [x20, #36]
     708:	str	wzr, [x20, #56]
     70c:	lsr	w8, w8, w9
     710:	and	w8, w8, #0x1
     714:	strb	w8, [x20, #20]
     718:	ldr	w9, [x20, #36]
     71c:	mov	w8, #0x19                  	// #25
     720:	str	w8, [x20, #8]
     724:	cmp	w9, #0x7
     728:	b.le	88c <BZ2_decompress+0x88c>
     72c:	ldr	w8, [x20, #32]
     730:	ldr	w10, [x20, #56]
     734:	sub	w9, w9, #0x8
     738:	str	w9, [x20, #36]
     73c:	lsr	w8, w8, w9
     740:	bfi	w8, w10, #8, #24
     744:	str	w8, [x20, #56]
     748:	ldr	w9, [x20, #36]
     74c:	mov	w8, #0x1a                  	// #26
     750:	str	w8, [x20, #8]
     754:	cmp	w9, #0x7
     758:	b.le	830 <BZ2_decompress+0x830>
     75c:	ldr	w8, [x20, #32]
     760:	ldr	w10, [x20, #56]
     764:	sub	w9, w9, #0x8
     768:	str	w9, [x20, #36]
     76c:	lsr	w8, w8, w9
     770:	bfi	w8, w10, #8, #24
     774:	str	w8, [x20, #56]
     778:	ldr	w9, [x20, #36]
     77c:	mov	w8, #0x1b                  	// #27
     780:	str	w8, [x20, #8]
     784:	cmp	w9, #0x7
     788:	b.le	7d4 <BZ2_decompress+0x7d4>
     78c:	ldr	w8, [x20, #32]
     790:	ldr	w10, [x20, #56]
     794:	sub	w9, w9, #0x8
     798:	str	w9, [x20, #36]
     79c:	lsr	w8, w8, w9
     7a0:	bfi	w8, w10, #8, #24
     7a4:	str	w8, [x20, #56]
     7a8:	tbnz	w8, #31, 29ac <BZ2_decompress+0x29ac>
     7ac:	ldr	w9, [x20, #40]
     7b0:	mov	w10, #0x86a0                	// #34464
     7b4:	movk	w10, #0x1, lsl #16
     7b8:	mul	w9, w9, w10
     7bc:	mov	w10, #0xa                   	// #10
     7c0:	orr	w9, w9, w10
     7c4:	cmp	w8, w9
     7c8:	b.gt	29ac <BZ2_decompress+0x29ac>
     7cc:	mov	w16, wzr
     7d0:	b	129c <BZ2_decompress+0x129c>
     7d4:	ldr	x8, [x20]
     7d8:	b	7e8 <BZ2_decompress+0x7e8>
     7dc:	ldr	w9, [x20, #36]
     7e0:	cmp	w9, #0x7
     7e4:	b.gt	78c <BZ2_decompress+0x78c>
     7e8:	ldr	w10, [x8, #8]
     7ec:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     7f0:	ldr	x11, [x8]
     7f4:	ldr	w12, [x20, #32]
     7f8:	add	w9, w9, #0x8
     7fc:	sub	w10, w10, #0x1
     800:	ldrb	w13, [x11], #1
     804:	bfi	w13, w12, #8, #24
     808:	stp	w13, w9, [x20, #32]
     80c:	ldr	w9, [x8, #12]
     810:	str	x11, [x8]
     814:	adds	w9, w9, #0x1
     818:	stp	w10, w9, [x8, #8]
     81c:	b.cc	7dc <BZ2_decompress+0x7dc>  // b.lo, b.ul, b.last
     820:	ldr	w9, [x8, #16]
     824:	add	w9, w9, #0x1
     828:	str	w9, [x8, #16]
     82c:	b	7dc <BZ2_decompress+0x7dc>
     830:	ldr	x8, [x20]
     834:	b	844 <BZ2_decompress+0x844>
     838:	ldr	w9, [x20, #36]
     83c:	cmp	w9, #0x7
     840:	b.gt	75c <BZ2_decompress+0x75c>
     844:	ldr	w10, [x8, #8]
     848:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     84c:	ldr	x11, [x8]
     850:	ldr	w12, [x20, #32]
     854:	add	w9, w9, #0x8
     858:	sub	w10, w10, #0x1
     85c:	ldrb	w13, [x11], #1
     860:	bfi	w13, w12, #8, #24
     864:	stp	w13, w9, [x20, #32]
     868:	ldr	w9, [x8, #12]
     86c:	str	x11, [x8]
     870:	adds	w9, w9, #0x1
     874:	stp	w10, w9, [x8, #8]
     878:	b.cc	838 <BZ2_decompress+0x838>  // b.lo, b.ul, b.last
     87c:	ldr	w9, [x8, #16]
     880:	add	w9, w9, #0x1
     884:	str	w9, [x8, #16]
     888:	b	838 <BZ2_decompress+0x838>
     88c:	ldr	x8, [x20]
     890:	b	8a0 <BZ2_decompress+0x8a0>
     894:	ldr	w9, [x20, #36]
     898:	cmp	w9, #0x7
     89c:	b.gt	72c <BZ2_decompress+0x72c>
     8a0:	ldr	w10, [x8, #8]
     8a4:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     8a8:	ldr	x11, [x8]
     8ac:	ldr	w12, [x20, #32]
     8b0:	add	w9, w9, #0x8
     8b4:	sub	w10, w10, #0x1
     8b8:	ldrb	w13, [x11], #1
     8bc:	bfi	w13, w12, #8, #24
     8c0:	stp	w13, w9, [x20, #32]
     8c4:	ldr	w9, [x8, #12]
     8c8:	str	x11, [x8]
     8cc:	adds	w9, w9, #0x1
     8d0:	stp	w10, w9, [x8, #8]
     8d4:	b.cc	894 <BZ2_decompress+0x894>  // b.lo, b.ul, b.last
     8d8:	ldr	w9, [x8, #16]
     8dc:	add	w9, w9, #0x1
     8e0:	str	w9, [x8, #16]
     8e4:	b	894 <BZ2_decompress+0x894>
     8e8:	ldr	x8, [x20]
     8ec:	b	8fc <BZ2_decompress+0x8fc>
     8f0:	ldr	w9, [x20, #36]
     8f4:	cmp	w9, #0x7
     8f8:	b.gt	6cc <BZ2_decompress+0x6cc>
     8fc:	ldr	w10, [x8, #8]
     900:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     904:	ldr	x11, [x8]
     908:	ldr	w12, [x20, #32]
     90c:	add	w9, w9, #0x8
     910:	sub	w10, w10, #0x1
     914:	ldrb	w13, [x11], #1
     918:	bfi	w13, w12, #8, #24
     91c:	stp	w13, w9, [x20, #32]
     920:	ldr	w9, [x8, #12]
     924:	str	x11, [x8]
     928:	adds	w9, w9, #0x1
     92c:	stp	w10, w9, [x8, #8]
     930:	b.cc	8f0 <BZ2_decompress+0x8f0>  // b.lo, b.ul, b.last
     934:	ldr	w9, [x8, #16]
     938:	add	w9, w9, #0x1
     93c:	str	w9, [x8, #16]
     940:	b	8f0 <BZ2_decompress+0x8f0>
     944:	ldr	w9, [x20, #36]
     948:	mov	w8, #0x2a                  	// #42
     94c:	str	w8, [x20, #8]
     950:	cmp	w9, #0x7
     954:	b.le	1124 <BZ2_decompress+0x1124>
     958:	ldr	w8, [x20, #32]
     95c:	sub	w9, w9, #0x8
     960:	str	w9, [x20, #36]
     964:	lsr	w8, w8, w9
     968:	and	w8, w8, #0xff
     96c:	cmp	w8, #0x72
     970:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     974:	ldr	w9, [x20, #36]
     978:	mov	w8, #0x2b                  	// #43
     97c:	str	w8, [x20, #8]
     980:	cmp	w9, #0x7
     984:	b.le	106c <BZ2_decompress+0x106c>
     988:	ldr	w8, [x20, #32]
     98c:	sub	w9, w9, #0x8
     990:	str	w9, [x20, #36]
     994:	lsr	w8, w8, w9
     998:	and	w8, w8, #0xff
     99c:	cmp	w8, #0x45
     9a0:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     9a4:	ldr	w9, [x20, #36]
     9a8:	mov	w8, #0x2c                  	// #44
     9ac:	str	w8, [x20, #8]
     9b0:	cmp	w9, #0x7
     9b4:	b.le	fb4 <BZ2_decompress+0xfb4>
     9b8:	ldr	w8, [x20, #32]
     9bc:	sub	w9, w9, #0x8
     9c0:	str	w9, [x20, #36]
     9c4:	lsr	w8, w8, w9
     9c8:	and	w8, w8, #0xff
     9cc:	cmp	w8, #0x38
     9d0:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     9d4:	ldr	w9, [x20, #36]
     9d8:	mov	w8, #0x2d                  	// #45
     9dc:	str	w8, [x20, #8]
     9e0:	cmp	w9, #0x7
     9e4:	b.le	efc <BZ2_decompress+0xefc>
     9e8:	ldr	w8, [x20, #32]
     9ec:	sub	w9, w9, #0x8
     9f0:	str	w9, [x20, #36]
     9f4:	lsr	w8, w8, w9
     9f8:	and	w8, w8, #0xff
     9fc:	cmp	w8, #0x50
     a00:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     a04:	ldr	w9, [x20, #36]
     a08:	mov	w8, #0x2e                  	// #46
     a0c:	str	w8, [x20, #8]
     a10:	cmp	w9, #0x7
     a14:	b.le	e44 <BZ2_decompress+0xe44>
     a18:	ldr	w8, [x20, #32]
     a1c:	sub	w9, w9, #0x8
     a20:	str	w9, [x20, #36]
     a24:	lsr	w8, w8, w9
     a28:	and	w8, w8, #0xff
     a2c:	cmp	w8, #0x90
     a30:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
     a34:	str	wzr, [x20, #3180]
     a38:	ldr	w9, [x20, #36]
     a3c:	mov	w8, #0x2f                  	// #47
     a40:	str	w8, [x20, #8]
     a44:	cmp	w9, #0x7
     a48:	b.le	d8c <BZ2_decompress+0xd8c>
     a4c:	ldr	w8, [x20, #32]
     a50:	ldr	w10, [x20, #3180]
     a54:	sub	w9, w9, #0x8
     a58:	str	w9, [x20, #36]
     a5c:	lsr	w8, w8, w9
     a60:	bfi	w8, w10, #8, #24
     a64:	str	w8, [x20, #3180]
     a68:	ldr	w9, [x20, #36]
     a6c:	mov	w8, #0x30                  	// #48
     a70:	str	w8, [x20, #8]
     a74:	cmp	w9, #0x7
     a78:	b.le	cd4 <BZ2_decompress+0xcd4>
     a7c:	ldr	w8, [x20, #32]
     a80:	ldr	w10, [x20, #3180]
     a84:	sub	w9, w9, #0x8
     a88:	str	w9, [x20, #36]
     a8c:	lsr	w8, w8, w9
     a90:	bfi	w8, w10, #8, #24
     a94:	str	w8, [x20, #3180]
     a98:	ldr	w9, [x20, #36]
     a9c:	mov	w8, #0x31                  	// #49
     aa0:	str	w8, [x20, #8]
     aa4:	cmp	w9, #0x7
     aa8:	b.le	bc0 <BZ2_decompress+0xbc0>
     aac:	ldr	w8, [x20, #32]
     ab0:	ldr	w10, [x20, #3180]
     ab4:	sub	w9, w9, #0x8
     ab8:	str	w9, [x20, #36]
     abc:	lsr	w8, w8, w9
     ac0:	bfi	w8, w10, #8, #24
     ac4:	str	w8, [x20, #3180]
     ac8:	ldr	w9, [x20, #36]
     acc:	mov	w8, #0x32                  	// #50
     ad0:	str	w8, [x20, #8]
     ad4:	cmp	w9, #0x7
     ad8:	b.le	b08 <BZ2_decompress+0xb08>
     adc:	ldr	w8, [x20, #32]
     ae0:	ldr	w10, [x20, #3180]
     ae4:	sub	w9, w9, #0x8
     ae8:	mov	w11, #0x1                   	// #1
     aec:	lsr	w8, w8, w9
     af0:	bfi	w8, w10, #8, #24
     af4:	str	w9, [x20, #36]
     af8:	str	w11, [x20, #8]
     afc:	str	w8, [x20, #3180]
     b00:	mov	w0, #0x4                   	// #4
     b04:	b	29b0 <BZ2_decompress+0x29b0>
     b08:	ldr	x8, [x20]
     b0c:	b	b1c <BZ2_decompress+0xb1c>
     b10:	ldr	w9, [x20, #36]
     b14:	cmp	w9, #0x7
     b18:	b.gt	adc <BZ2_decompress+0xadc>
     b1c:	ldr	w10, [x8, #8]
     b20:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     b24:	ldr	x11, [x8]
     b28:	ldr	w12, [x20, #32]
     b2c:	add	w9, w9, #0x8
     b30:	sub	w10, w10, #0x1
     b34:	ldrb	w13, [x11], #1
     b38:	bfi	w13, w12, #8, #24
     b3c:	stp	w13, w9, [x20, #32]
     b40:	ldr	w9, [x8, #12]
     b44:	str	x11, [x8]
     b48:	adds	w9, w9, #0x1
     b4c:	stp	w10, w9, [x8, #8]
     b50:	b.cc	b10 <BZ2_decompress+0xb10>  // b.lo, b.ul, b.last
     b54:	ldr	w9, [x8, #16]
     b58:	add	w9, w9, #0x1
     b5c:	str	w9, [x8, #16]
     b60:	b	b10 <BZ2_decompress+0xb10>
     b64:	ldr	x8, [x20]
     b68:	b	b78 <BZ2_decompress+0xb78>
     b6c:	ldr	w9, [x20, #36]
     b70:	cmp	w9, #0x7
     b74:	b.gt	69c <BZ2_decompress+0x69c>
     b78:	ldr	w10, [x8, #8]
     b7c:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     b80:	ldr	x11, [x8]
     b84:	ldr	w12, [x20, #32]
     b88:	add	w9, w9, #0x8
     b8c:	sub	w10, w10, #0x1
     b90:	ldrb	w13, [x11], #1
     b94:	bfi	w13, w12, #8, #24
     b98:	stp	w13, w9, [x20, #32]
     b9c:	ldr	w9, [x8, #12]
     ba0:	str	x11, [x8]
     ba4:	adds	w9, w9, #0x1
     ba8:	stp	w10, w9, [x8, #8]
     bac:	b.cc	b6c <BZ2_decompress+0xb6c>  // b.lo, b.ul, b.last
     bb0:	ldr	w9, [x8, #16]
     bb4:	add	w9, w9, #0x1
     bb8:	str	w9, [x8, #16]
     bbc:	b	b6c <BZ2_decompress+0xb6c>
     bc0:	ldr	x8, [x20]
     bc4:	b	bd4 <BZ2_decompress+0xbd4>
     bc8:	ldr	w9, [x20, #36]
     bcc:	cmp	w9, #0x7
     bd0:	b.gt	aac <BZ2_decompress+0xaac>
     bd4:	ldr	w10, [x8, #8]
     bd8:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     bdc:	ldr	x11, [x8]
     be0:	ldr	w12, [x20, #32]
     be4:	add	w9, w9, #0x8
     be8:	sub	w10, w10, #0x1
     bec:	ldrb	w13, [x11], #1
     bf0:	bfi	w13, w12, #8, #24
     bf4:	stp	w13, w9, [x20, #32]
     bf8:	ldr	w9, [x8, #12]
     bfc:	str	x11, [x8]
     c00:	adds	w9, w9, #0x1
     c04:	stp	w10, w9, [x8, #8]
     c08:	b.cc	bc8 <BZ2_decompress+0xbc8>  // b.lo, b.ul, b.last
     c0c:	ldr	w9, [x8, #16]
     c10:	add	w9, w9, #0x1
     c14:	str	w9, [x8, #16]
     c18:	b	bc8 <BZ2_decompress+0xbc8>
     c1c:	ldr	x8, [x20]
     c20:	b	c30 <BZ2_decompress+0xc30>
     c24:	ldr	w9, [x20, #36]
     c28:	cmp	w9, #0x0
     c2c:	b.gt	6fc <BZ2_decompress+0x6fc>
     c30:	ldr	w10, [x8, #8]
     c34:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     c38:	ldr	x11, [x8]
     c3c:	ldr	w12, [x20, #32]
     c40:	add	w9, w9, #0x8
     c44:	sub	w10, w10, #0x1
     c48:	ldrb	w13, [x11], #1
     c4c:	bfi	w13, w12, #8, #24
     c50:	stp	w13, w9, [x20, #32]
     c54:	ldr	w9, [x8, #12]
     c58:	str	x11, [x8]
     c5c:	adds	w9, w9, #0x1
     c60:	stp	w10, w9, [x8, #8]
     c64:	b.cc	c24 <BZ2_decompress+0xc24>  // b.lo, b.ul, b.last
     c68:	ldr	w9, [x8, #16]
     c6c:	add	w9, w9, #0x1
     c70:	str	w9, [x8, #16]
     c74:	b	c24 <BZ2_decompress+0xc24>
     c78:	ldr	x8, [x20]
     c7c:	b	c8c <BZ2_decompress+0xc8c>
     c80:	ldr	w9, [x20, #36]
     c84:	cmp	w9, #0x7
     c88:	b.gt	66c <BZ2_decompress+0x66c>
     c8c:	ldr	w10, [x8, #8]
     c90:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     c94:	ldr	x11, [x8]
     c98:	ldr	w12, [x20, #32]
     c9c:	add	w9, w9, #0x8
     ca0:	sub	w10, w10, #0x1
     ca4:	ldrb	w13, [x11], #1
     ca8:	bfi	w13, w12, #8, #24
     cac:	stp	w13, w9, [x20, #32]
     cb0:	ldr	w9, [x8, #12]
     cb4:	str	x11, [x8]
     cb8:	adds	w9, w9, #0x1
     cbc:	stp	w10, w9, [x8, #8]
     cc0:	b.cc	c80 <BZ2_decompress+0xc80>  // b.lo, b.ul, b.last
     cc4:	ldr	w9, [x8, #16]
     cc8:	add	w9, w9, #0x1
     ccc:	str	w9, [x8, #16]
     cd0:	b	c80 <BZ2_decompress+0xc80>
     cd4:	ldr	x8, [x20]
     cd8:	b	ce8 <BZ2_decompress+0xce8>
     cdc:	ldr	w9, [x20, #36]
     ce0:	cmp	w9, #0x7
     ce4:	b.gt	a7c <BZ2_decompress+0xa7c>
     ce8:	ldr	w10, [x8, #8]
     cec:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     cf0:	ldr	x11, [x8]
     cf4:	ldr	w12, [x20, #32]
     cf8:	add	w9, w9, #0x8
     cfc:	sub	w10, w10, #0x1
     d00:	ldrb	w13, [x11], #1
     d04:	bfi	w13, w12, #8, #24
     d08:	stp	w13, w9, [x20, #32]
     d0c:	ldr	w9, [x8, #12]
     d10:	str	x11, [x8]
     d14:	adds	w9, w9, #0x1
     d18:	stp	w10, w9, [x8, #8]
     d1c:	b.cc	cdc <BZ2_decompress+0xcdc>  // b.lo, b.ul, b.last
     d20:	ldr	w9, [x8, #16]
     d24:	add	w9, w9, #0x1
     d28:	str	w9, [x8, #16]
     d2c:	b	cdc <BZ2_decompress+0xcdc>
     d30:	ldr	x8, [x20]
     d34:	b	d44 <BZ2_decompress+0xd44>
     d38:	ldr	w9, [x20, #36]
     d3c:	cmp	w9, #0x7
     d40:	b.gt	63c <BZ2_decompress+0x63c>
     d44:	ldr	w10, [x8, #8]
     d48:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     d4c:	ldr	x11, [x8]
     d50:	ldr	w12, [x20, #32]
     d54:	add	w9, w9, #0x8
     d58:	sub	w10, w10, #0x1
     d5c:	ldrb	w13, [x11], #1
     d60:	bfi	w13, w12, #8, #24
     d64:	stp	w13, w9, [x20, #32]
     d68:	ldr	w9, [x8, #12]
     d6c:	str	x11, [x8]
     d70:	adds	w9, w9, #0x1
     d74:	stp	w10, w9, [x8, #8]
     d78:	b.cc	d38 <BZ2_decompress+0xd38>  // b.lo, b.ul, b.last
     d7c:	ldr	w9, [x8, #16]
     d80:	add	w9, w9, #0x1
     d84:	str	w9, [x8, #16]
     d88:	b	d38 <BZ2_decompress+0xd38>
     d8c:	ldr	x8, [x20]
     d90:	b	da0 <BZ2_decompress+0xda0>
     d94:	ldr	w9, [x20, #36]
     d98:	cmp	w9, #0x7
     d9c:	b.gt	a4c <BZ2_decompress+0xa4c>
     da0:	ldr	w10, [x8, #8]
     da4:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     da8:	ldr	x11, [x8]
     dac:	ldr	w12, [x20, #32]
     db0:	add	w9, w9, #0x8
     db4:	sub	w10, w10, #0x1
     db8:	ldrb	w13, [x11], #1
     dbc:	bfi	w13, w12, #8, #24
     dc0:	stp	w13, w9, [x20, #32]
     dc4:	ldr	w9, [x8, #12]
     dc8:	str	x11, [x8]
     dcc:	adds	w9, w9, #0x1
     dd0:	stp	w10, w9, [x8, #8]
     dd4:	b.cc	d94 <BZ2_decompress+0xd94>  // b.lo, b.ul, b.last
     dd8:	ldr	w9, [x8, #16]
     ddc:	add	w9, w9, #0x1
     de0:	str	w9, [x8, #16]
     de4:	b	d94 <BZ2_decompress+0xd94>
     de8:	ldr	x8, [x20]
     dec:	b	dfc <BZ2_decompress+0xdfc>
     df0:	ldr	w9, [x20, #36]
     df4:	cmp	w9, #0x7
     df8:	b.gt	5ec <BZ2_decompress+0x5ec>
     dfc:	ldr	w10, [x8, #8]
     e00:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     e04:	ldr	x11, [x8]
     e08:	ldr	w12, [x20, #32]
     e0c:	add	w9, w9, #0x8
     e10:	sub	w10, w10, #0x1
     e14:	ldrb	w13, [x11], #1
     e18:	bfi	w13, w12, #8, #24
     e1c:	stp	w13, w9, [x20, #32]
     e20:	ldr	w9, [x8, #12]
     e24:	str	x11, [x8]
     e28:	adds	w9, w9, #0x1
     e2c:	stp	w10, w9, [x8, #8]
     e30:	b.cc	df0 <BZ2_decompress+0xdf0>  // b.lo, b.ul, b.last
     e34:	ldr	w9, [x8, #16]
     e38:	add	w9, w9, #0x1
     e3c:	str	w9, [x8, #16]
     e40:	b	df0 <BZ2_decompress+0xdf0>
     e44:	ldr	x8, [x20]
     e48:	b	e58 <BZ2_decompress+0xe58>
     e4c:	ldr	w9, [x20, #36]
     e50:	cmp	w9, #0x7
     e54:	b.gt	a18 <BZ2_decompress+0xa18>
     e58:	ldr	w10, [x8, #8]
     e5c:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     e60:	ldr	x11, [x8]
     e64:	ldr	w12, [x20, #32]
     e68:	add	w9, w9, #0x8
     e6c:	sub	w10, w10, #0x1
     e70:	ldrb	w13, [x11], #1
     e74:	bfi	w13, w12, #8, #24
     e78:	stp	w13, w9, [x20, #32]
     e7c:	ldr	w9, [x8, #12]
     e80:	str	x11, [x8]
     e84:	adds	w9, w9, #0x1
     e88:	stp	w10, w9, [x8, #8]
     e8c:	b.cc	e4c <BZ2_decompress+0xe4c>  // b.lo, b.ul, b.last
     e90:	ldr	w9, [x8, #16]
     e94:	add	w9, w9, #0x1
     e98:	str	w9, [x8, #16]
     e9c:	b	e4c <BZ2_decompress+0xe4c>
     ea0:	ldr	x8, [x20]
     ea4:	b	eb4 <BZ2_decompress+0xeb4>
     ea8:	ldr	w9, [x20, #36]
     eac:	cmp	w9, #0x7
     eb0:	b.gt	5bc <BZ2_decompress+0x5bc>
     eb4:	ldr	w10, [x8, #8]
     eb8:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     ebc:	ldr	x11, [x8]
     ec0:	ldr	w12, [x20, #32]
     ec4:	add	w9, w9, #0x8
     ec8:	sub	w10, w10, #0x1
     ecc:	ldrb	w13, [x11], #1
     ed0:	bfi	w13, w12, #8, #24
     ed4:	stp	w13, w9, [x20, #32]
     ed8:	ldr	w9, [x8, #12]
     edc:	str	x11, [x8]
     ee0:	adds	w9, w9, #0x1
     ee4:	stp	w10, w9, [x8, #8]
     ee8:	b.cc	ea8 <BZ2_decompress+0xea8>  // b.lo, b.ul, b.last
     eec:	ldr	w9, [x8, #16]
     ef0:	add	w9, w9, #0x1
     ef4:	str	w9, [x8, #16]
     ef8:	b	ea8 <BZ2_decompress+0xea8>
     efc:	ldr	x8, [x20]
     f00:	b	f10 <BZ2_decompress+0xf10>
     f04:	ldr	w9, [x20, #36]
     f08:	cmp	w9, #0x7
     f0c:	b.gt	9e8 <BZ2_decompress+0x9e8>
     f10:	ldr	w10, [x8, #8]
     f14:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     f18:	ldr	x11, [x8]
     f1c:	ldr	w12, [x20, #32]
     f20:	add	w9, w9, #0x8
     f24:	sub	w10, w10, #0x1
     f28:	ldrb	w13, [x11], #1
     f2c:	bfi	w13, w12, #8, #24
     f30:	stp	w13, w9, [x20, #32]
     f34:	ldr	w9, [x8, #12]
     f38:	str	x11, [x8]
     f3c:	adds	w9, w9, #0x1
     f40:	stp	w10, w9, [x8, #8]
     f44:	b.cc	f04 <BZ2_decompress+0xf04>  // b.lo, b.ul, b.last
     f48:	ldr	w9, [x8, #16]
     f4c:	add	w9, w9, #0x1
     f50:	str	w9, [x8, #16]
     f54:	b	f04 <BZ2_decompress+0xf04>
     f58:	ldr	x8, [x20]
     f5c:	b	f6c <BZ2_decompress+0xf6c>
     f60:	ldr	w9, [x20, #36]
     f64:	cmp	w9, #0x7
     f68:	b.gt	58c <BZ2_decompress+0x58c>
     f6c:	ldr	w10, [x8, #8]
     f70:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     f74:	ldr	x11, [x8]
     f78:	ldr	w12, [x20, #32]
     f7c:	add	w9, w9, #0x8
     f80:	sub	w10, w10, #0x1
     f84:	ldrb	w13, [x11], #1
     f88:	bfi	w13, w12, #8, #24
     f8c:	stp	w13, w9, [x20, #32]
     f90:	ldr	w9, [x8, #12]
     f94:	str	x11, [x8]
     f98:	adds	w9, w9, #0x1
     f9c:	stp	w10, w9, [x8, #8]
     fa0:	b.cc	f60 <BZ2_decompress+0xf60>  // b.lo, b.ul, b.last
     fa4:	ldr	w9, [x8, #16]
     fa8:	add	w9, w9, #0x1
     fac:	str	w9, [x8, #16]
     fb0:	b	f60 <BZ2_decompress+0xf60>
     fb4:	ldr	x8, [x20]
     fb8:	b	fc8 <BZ2_decompress+0xfc8>
     fbc:	ldr	w9, [x20, #36]
     fc0:	cmp	w9, #0x7
     fc4:	b.gt	9b8 <BZ2_decompress+0x9b8>
     fc8:	ldr	w10, [x8, #8]
     fcc:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
     fd0:	ldr	x11, [x8]
     fd4:	ldr	w12, [x20, #32]
     fd8:	add	w9, w9, #0x8
     fdc:	sub	w10, w10, #0x1
     fe0:	ldrb	w13, [x11], #1
     fe4:	bfi	w13, w12, #8, #24
     fe8:	stp	w13, w9, [x20, #32]
     fec:	ldr	w9, [x8, #12]
     ff0:	str	x11, [x8]
     ff4:	adds	w9, w9, #0x1
     ff8:	stp	w10, w9, [x8, #8]
     ffc:	b.cc	fbc <BZ2_decompress+0xfbc>  // b.lo, b.ul, b.last
    1000:	ldr	w9, [x8, #16]
    1004:	add	w9, w9, #0x1
    1008:	str	w9, [x8, #16]
    100c:	b	fbc <BZ2_decompress+0xfbc>
    1010:	ldr	x8, [x20]
    1014:	b	1024 <BZ2_decompress+0x1024>
    1018:	ldr	w9, [x20, #36]
    101c:	cmp	w9, #0x7
    1020:	b.gt	55c <BZ2_decompress+0x55c>
    1024:	ldr	w10, [x8, #8]
    1028:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    102c:	ldr	x11, [x8]
    1030:	ldr	w12, [x20, #32]
    1034:	add	w9, w9, #0x8
    1038:	sub	w10, w10, #0x1
    103c:	ldrb	w13, [x11], #1
    1040:	bfi	w13, w12, #8, #24
    1044:	stp	w13, w9, [x20, #32]
    1048:	ldr	w9, [x8, #12]
    104c:	str	x11, [x8]
    1050:	adds	w9, w9, #0x1
    1054:	stp	w10, w9, [x8, #8]
    1058:	b.cc	1018 <BZ2_decompress+0x1018>  // b.lo, b.ul, b.last
    105c:	ldr	w9, [x8, #16]
    1060:	add	w9, w9, #0x1
    1064:	str	w9, [x8, #16]
    1068:	b	1018 <BZ2_decompress+0x1018>
    106c:	ldr	x8, [x20]
    1070:	b	1080 <BZ2_decompress+0x1080>
    1074:	ldr	w9, [x20, #36]
    1078:	cmp	w9, #0x7
    107c:	b.gt	988 <BZ2_decompress+0x988>
    1080:	ldr	w10, [x8, #8]
    1084:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1088:	ldr	x11, [x8]
    108c:	ldr	w12, [x20, #32]
    1090:	add	w9, w9, #0x8
    1094:	sub	w10, w10, #0x1
    1098:	ldrb	w13, [x11], #1
    109c:	bfi	w13, w12, #8, #24
    10a0:	stp	w13, w9, [x20, #32]
    10a4:	ldr	w9, [x8, #12]
    10a8:	str	x11, [x8]
    10ac:	adds	w9, w9, #0x1
    10b0:	stp	w10, w9, [x8, #8]
    10b4:	b.cc	1074 <BZ2_decompress+0x1074>  // b.lo, b.ul, b.last
    10b8:	ldr	w9, [x8, #16]
    10bc:	add	w9, w9, #0x1
    10c0:	str	w9, [x8, #16]
    10c4:	b	1074 <BZ2_decompress+0x1074>
    10c8:	ldr	x8, [x20]
    10cc:	b	10dc <BZ2_decompress+0x10dc>
    10d0:	ldr	w9, [x20, #36]
    10d4:	cmp	w9, #0x7
    10d8:	b.gt	52c <BZ2_decompress+0x52c>
    10dc:	ldr	w10, [x8, #8]
    10e0:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    10e4:	ldr	x11, [x8]
    10e8:	ldr	w12, [x20, #32]
    10ec:	add	w9, w9, #0x8
    10f0:	sub	w10, w10, #0x1
    10f4:	ldrb	w13, [x11], #1
    10f8:	bfi	w13, w12, #8, #24
    10fc:	stp	w13, w9, [x20, #32]
    1100:	ldr	w9, [x8, #12]
    1104:	str	x11, [x8]
    1108:	adds	w9, w9, #0x1
    110c:	stp	w10, w9, [x8, #8]
    1110:	b.cc	10d0 <BZ2_decompress+0x10d0>  // b.lo, b.ul, b.last
    1114:	ldr	w9, [x8, #16]
    1118:	add	w9, w9, #0x1
    111c:	str	w9, [x8, #16]
    1120:	b	10d0 <BZ2_decompress+0x10d0>
    1124:	ldr	x8, [x20]
    1128:	b	1138 <BZ2_decompress+0x1138>
    112c:	ldr	w9, [x20, #36]
    1130:	cmp	w9, #0x7
    1134:	b.gt	958 <BZ2_decompress+0x958>
    1138:	ldr	w10, [x8, #8]
    113c:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1140:	ldr	x11, [x8]
    1144:	ldr	w12, [x20, #32]
    1148:	add	w9, w9, #0x8
    114c:	sub	w10, w10, #0x1
    1150:	ldrb	w13, [x11], #1
    1154:	bfi	w13, w12, #8, #24
    1158:	stp	w13, w9, [x20, #32]
    115c:	ldr	w9, [x8, #12]
    1160:	str	x11, [x8]
    1164:	adds	w9, w9, #0x1
    1168:	stp	w10, w9, [x8, #8]
    116c:	b.cc	112c <BZ2_decompress+0x112c>  // b.lo, b.ul, b.last
    1170:	ldr	w9, [x8, #16]
    1174:	add	w9, w9, #0x1
    1178:	str	w9, [x8, #16]
    117c:	b	112c <BZ2_decompress+0x112c>
    1180:	ldr	x8, [x20]
    1184:	b	1194 <BZ2_decompress+0x1194>
    1188:	ldr	w9, [x20, #36]
    118c:	cmp	w9, #0x7
    1190:	b.gt	4f4 <BZ2_decompress+0x4f4>
    1194:	ldr	w10, [x8, #8]
    1198:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    119c:	ldr	x11, [x8]
    11a0:	ldr	w12, [x20, #32]
    11a4:	add	w9, w9, #0x8
    11a8:	sub	w10, w10, #0x1
    11ac:	ldrb	w13, [x11], #1
    11b0:	bfi	w13, w12, #8, #24
    11b4:	stp	w13, w9, [x20, #32]
    11b8:	ldr	w9, [x8, #12]
    11bc:	str	x11, [x8]
    11c0:	adds	w9, w9, #0x1
    11c4:	stp	w10, w9, [x8, #8]
    11c8:	b.cc	1188 <BZ2_decompress+0x1188>  // b.lo, b.ul, b.last
    11cc:	ldr	w9, [x8, #16]
    11d0:	add	w9, w9, #0x1
    11d4:	str	w9, [x8, #16]
    11d8:	b	1188 <BZ2_decompress+0x1188>
    11dc:	ldr	w6, [sp, #44]
    11e0:	mov	w4, w23
    11e4:	mov	w5, w24
    11e8:	mov	x24, x28
    11ec:	mov	w2, w21
    11f0:	b	15e4 <BZ2_decompress+0x15e4>
    11f4:	mov	w0, #0xfffffffd            	// #-3
    11f8:	b	29b0 <BZ2_decompress+0x29b0>
    11fc:	adrp	x8, 0 <stderr>
    1200:	ldr	x0, [x8]
    1204:	str	x1, [sp, #32]
    1208:	adrp	x1, 0 <BZ2_decompress>
    120c:	add	x1, x1, #0x0
    1210:	mov	w25, w6
    1214:	stur	w17, [x29, #-36]
    1218:	str	x23, [sp, #72]
    121c:	mov	w23, w4
    1220:	stur	x7, [x29, #-48]
    1224:	stp	x14, x24, [sp, #8]
    1228:	str	w10, [sp, #44]
    122c:	stp	x27, x28, [sp, #56]
    1230:	mov	w24, w5
    1234:	stur	w19, [x29, #-40]
    1238:	stur	x26, [x29, #-56]
    123c:	mov	w26, w3
    1240:	stur	w21, [x29, #-60]
    1244:	mov	w21, w30
    1248:	mov	x27, x18
    124c:	mov	w19, w15
    1250:	mov	x28, x16
    1254:	bl	0 <fprintf>
    1258:	mov	x16, x28
    125c:	mov	w15, w19
    1260:	mov	x18, x27
    1264:	ldr	x1, [sp, #32]
    1268:	mov	w30, w21
    126c:	ldur	w21, [x29, #-60]
    1270:	mov	w3, w26
    1274:	ldp	x26, x7, [x29, #-56]
    1278:	ldp	w19, w17, [x29, #-40]
    127c:	mov	w5, w24
    1280:	ldp	x14, x24, [sp, #8]
    1284:	ldp	x27, x28, [sp, #56]
    1288:	ldr	w10, [sp, #44]
    128c:	mov	w4, w23
    1290:	ldr	x23, [sp, #72]
    1294:	mov	w6, w25
    1298:	b	620 <BZ2_decompress+0x620>
    129c:	cmp	w16, #0x10
    12a0:	b.ge	1338 <BZ2_decompress+0x1338>  // b.tcont
    12a4:	ldr	w9, [x20, #36]
    12a8:	mov	w8, #0x1c                  	// #28
    12ac:	str	w8, [x20, #8]
    12b0:	cmp	w9, #0x0
    12b4:	b.le	12dc <BZ2_decompress+0x12dc>
    12b8:	ldr	w8, [x20, #32]
    12bc:	sub	w9, w9, #0x1
    12c0:	add	x10, x20, w16, sxtw
    12c4:	str	w9, [x20, #36]
    12c8:	lsr	w8, w8, w9
    12cc:	and	w8, w8, #0x1
    12d0:	strb	w8, [x10, #3452]
    12d4:	add	w16, w16, #0x1
    12d8:	b	129c <BZ2_decompress+0x129c>
    12dc:	ldr	x8, [x20]
    12e0:	b	12f0 <BZ2_decompress+0x12f0>
    12e4:	ldr	w9, [x20, #36]
    12e8:	cmp	w9, #0x0
    12ec:	b.gt	12b8 <BZ2_decompress+0x12b8>
    12f0:	ldr	w10, [x8, #8]
    12f4:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    12f8:	ldr	x11, [x8]
    12fc:	ldr	w12, [x20, #32]
    1300:	add	w9, w9, #0x8
    1304:	sub	w10, w10, #0x1
    1308:	ldrb	w13, [x11], #1
    130c:	bfi	w13, w12, #8, #24
    1310:	stp	w13, w9, [x20, #32]
    1314:	ldr	w9, [x8, #12]
    1318:	str	x11, [x8]
    131c:	adds	w9, w9, #0x1
    1320:	stp	w10, w9, [x8, #8]
    1324:	b.cc	12e4 <BZ2_decompress+0x12e4>  // b.lo, b.ul, b.last
    1328:	ldr	w9, [x8, #16]
    132c:	add	w9, w9, #0x1
    1330:	str	w9, [x8, #16]
    1334:	b	12e4 <BZ2_decompress+0x12e4>
    1338:	stur	x26, [x29, #-56]
    133c:	ldur	w26, [x29, #-16]
    1340:	stp	x28, x23, [sp, #64]
    1344:	stur	w21, [x29, #-60]
    1348:	str	x27, [sp, #56]
    134c:	mov	x27, x14
    1350:	mov	w28, w2
    1354:	mov	x21, x24
    1358:	mov	w24, w5
    135c:	mov	w23, w4
    1360:	mov	w25, w6
    1364:	mov	w16, wzr
    1368:	add	x8, x20, #0xc7c
    136c:	movi	v0.2d, #0x0
    1370:	str	x18, [sp, #48]
    1374:	stur	w19, [x29, #-40]
    1378:	stur	x7, [x29, #-48]
    137c:	stur	w17, [x29, #-36]
    1380:	stp	q0, q0, [x8, #224]
    1384:	stp	q0, q0, [x8, #192]
    1388:	stp	q0, q0, [x8, #160]
    138c:	stp	q0, q0, [x8, #128]
    1390:	stp	q0, q0, [x8, #96]
    1394:	stp	q0, q0, [x8, #64]
    1398:	stp	q0, q0, [x8, #32]
    139c:	stp	q0, q0, [x8]
    13a0:	b	13ac <BZ2_decompress+0x13ac>
    13a4:	mov	w0, wzr
    13a8:	b	29b0 <BZ2_decompress+0x29b0>
    13ac:	cmp	w16, #0xf
    13b0:	b.gt	1434 <BZ2_decompress+0x1434>
    13b4:	add	x8, x20, w16, sxtw
    13b8:	ldrb	w8, [x8, #3452]
    13bc:	cbz	w8, 1400 <BZ2_decompress+0x1400>
    13c0:	mov	w4, w23
    13c4:	mov	w5, w24
    13c8:	mov	x24, x21
    13cc:	mov	w2, w28
    13d0:	mov	x14, x27
    13d4:	ldp	w19, w17, [x29, #-40]
    13d8:	ldp	x26, x7, [x29, #-56]
    13dc:	ldp	x27, x28, [sp, #56]
    13e0:	ldur	w21, [x29, #-60]
    13e4:	ldr	x23, [sp, #72]
    13e8:	ldr	x18, [sp, #48]
    13ec:	mov	w30, wzr
    13f0:	mov	w6, w25
    13f4:	cmp	w30, #0xf
    13f8:	b.gt	1664 <BZ2_decompress+0x1664>
    13fc:	b	1620 <BZ2_decompress+0x1620>
    1400:	mov	w4, w23
    1404:	mov	w5, w24
    1408:	mov	x24, x21
    140c:	mov	w2, w28
    1410:	mov	x14, x27
    1414:	ldp	w19, w17, [x29, #-40]
    1418:	ldp	x26, x7, [x29, #-56]
    141c:	ldp	x27, x28, [sp, #56]
    1420:	ldur	w21, [x29, #-60]
    1424:	ldr	x23, [sp, #72]
    1428:	ldr	x18, [sp, #48]
    142c:	mov	w6, w25
    1430:	b	1664 <BZ2_decompress+0x1664>
    1434:	mov	x0, x20
    1438:	str	x16, [sp]
    143c:	str	w15, [sp, #8]
    1440:	str	x1, [sp, #32]
    1444:	str	w30, [sp, #16]
    1448:	str	w3, [sp, #28]
    144c:	bl	2acc <makeMaps_d>
    1450:	ldr	w8, [x20, #3192]
    1454:	cbz	w8, 15cc <BZ2_decompress+0x15cc>
    1458:	mov	w4, w23
    145c:	mov	w5, w24
    1460:	mov	x24, x21
    1464:	mov	w2, w28
    1468:	mov	x14, x27
    146c:	ldp	w19, w17, [x29, #-40]
    1470:	ldr	w3, [sp, #28]
    1474:	ldp	x26, x7, [x29, #-56]
    1478:	ldp	x27, x28, [sp, #56]
    147c:	ldr	w30, [sp, #16]
    1480:	ldur	w21, [x29, #-60]
    1484:	ldr	x23, [sp, #72]
    1488:	ldr	x1, [sp, #32]
    148c:	ldr	x18, [sp, #48]
    1490:	ldr	w15, [sp, #8]
    1494:	ldr	x16, [sp]
    1498:	add	w6, w8, #0x2
    149c:	ldr	w9, [x20, #36]
    14a0:	mov	w8, #0x1e                  	// #30
    14a4:	str	w8, [x20, #8]
    14a8:	cmp	w9, #0x2
    14ac:	b.le	1570 <BZ2_decompress+0x1570>
    14b0:	ldr	w8, [x20, #32]
    14b4:	sub	w9, w9, #0x3
    14b8:	str	w9, [x20, #36]
    14bc:	lsr	w8, w8, w9
    14c0:	and	w4, w8, #0x7
    14c4:	cmp	w4, #0x7
    14c8:	b.hi	14e0 <BZ2_decompress+0x14e0>  // b.pmore
    14cc:	mov	w8, #0x1                   	// #1
    14d0:	lsl	w8, w8, w4
    14d4:	mov	w9, #0x83                  	// #131
    14d8:	tst	w8, w9
    14dc:	b.ne	29ac <BZ2_decompress+0x29ac>  // b.any
    14e0:	ldr	w9, [x20, #36]
    14e4:	mov	w8, #0x1f                  	// #31
    14e8:	str	w8, [x20, #8]
    14ec:	cmp	w9, #0xe
    14f0:	b.le	1514 <BZ2_decompress+0x1514>
    14f4:	ldr	w8, [x20, #32]
    14f8:	sub	w9, w9, #0xf
    14fc:	str	w9, [x20, #36]
    1500:	lsr	w8, w8, w9
    1504:	ands	w17, w8, #0x7fff
    1508:	b.eq	29ac <BZ2_decompress+0x29ac>  // b.none
    150c:	mov	w16, wzr
    1510:	b	1704 <BZ2_decompress+0x1704>
    1514:	ldr	x8, [x20]
    1518:	b	1528 <BZ2_decompress+0x1528>
    151c:	ldr	w9, [x20, #36]
    1520:	cmp	w9, #0xe
    1524:	b.gt	14f4 <BZ2_decompress+0x14f4>
    1528:	ldr	w10, [x8, #8]
    152c:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1530:	ldr	x11, [x8]
    1534:	ldr	w12, [x20, #32]
    1538:	add	w9, w9, #0x8
    153c:	sub	w10, w10, #0x1
    1540:	ldrb	w13, [x11], #1
    1544:	bfi	w13, w12, #8, #24
    1548:	stp	w13, w9, [x20, #32]
    154c:	ldr	w9, [x8, #12]
    1550:	str	x11, [x8]
    1554:	adds	w9, w9, #0x1
    1558:	stp	w10, w9, [x8, #8]
    155c:	b.cc	151c <BZ2_decompress+0x151c>  // b.lo, b.ul, b.last
    1560:	ldr	w9, [x8, #16]
    1564:	add	w9, w9, #0x1
    1568:	str	w9, [x8, #16]
    156c:	b	151c <BZ2_decompress+0x151c>
    1570:	ldr	x8, [x20]
    1574:	b	1584 <BZ2_decompress+0x1584>
    1578:	ldr	w9, [x20, #36]
    157c:	cmp	w9, #0x2
    1580:	b.gt	14b0 <BZ2_decompress+0x14b0>
    1584:	ldr	w10, [x8, #8]
    1588:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    158c:	ldr	x11, [x8]
    1590:	ldr	w12, [x20, #32]
    1594:	add	w9, w9, #0x8
    1598:	sub	w10, w10, #0x1
    159c:	ldrb	w13, [x11], #1
    15a0:	bfi	w13, w12, #8, #24
    15a4:	stp	w13, w9, [x20, #32]
    15a8:	ldr	w9, [x8, #12]
    15ac:	str	x11, [x8]
    15b0:	adds	w9, w9, #0x1
    15b4:	stp	w10, w9, [x8, #8]
    15b8:	b.cc	1578 <BZ2_decompress+0x1578>  // b.lo, b.ul, b.last
    15bc:	ldr	w9, [x8, #16]
    15c0:	add	w9, w9, #0x1
    15c4:	str	w9, [x8, #16]
    15c8:	b	1578 <BZ2_decompress+0x1578>
    15cc:	mov	w0, #0xfffffffc            	// #-4
    15d0:	mov	w6, w25
    15d4:	mov	w4, w23
    15d8:	mov	w5, w24
    15dc:	mov	x24, x21
    15e0:	mov	w2, w28
    15e4:	mov	x14, x27
    15e8:	mov	w9, w26
    15ec:	ldp	w19, w17, [x29, #-40]
    15f0:	ldr	w3, [sp, #28]
    15f4:	ldp	x26, x7, [x29, #-56]
    15f8:	ldr	x27, [sp, #56]
    15fc:	ldr	w30, [sp, #16]
    1600:	ldur	w21, [x29, #-60]
    1604:	ldr	x23, [sp, #72]
    1608:	ldr	x1, [sp, #32]
    160c:	ldr	x28, [sp, #64]
    1610:	ldr	x18, [sp, #48]
    1614:	ldr	w15, [sp, #8]
    1618:	ldr	x16, [sp]
    161c:	b	29b4 <BZ2_decompress+0x29b4>
    1620:	ldr	w9, [x20, #36]
    1624:	mov	w8, #0x1d                  	// #29
    1628:	str	w8, [x20, #8]
    162c:	cmp	w9, #0x0
    1630:	b.le	16a8 <BZ2_decompress+0x16a8>
    1634:	ldr	w8, [x20, #32]
    1638:	sub	w9, w9, #0x1
    163c:	str	w9, [x20, #36]
    1640:	lsr	w8, w8, w9
    1644:	tbz	w8, #0, 1658 <BZ2_decompress+0x1658>
    1648:	add	w8, w30, w16, lsl #4
    164c:	add	x8, x20, w8, sxtw
    1650:	mov	w9, #0x1                   	// #1
    1654:	strb	w9, [x8, #3196]
    1658:	add	w30, w30, #0x1
    165c:	cmp	w30, #0xf
    1660:	b.le	1620 <BZ2_decompress+0x1620>
    1664:	stur	x26, [x29, #-56]
    1668:	ldur	w26, [x29, #-16]
    166c:	str	x18, [sp, #48]
    1670:	stp	x28, x23, [sp, #64]
    1674:	stur	w19, [x29, #-40]
    1678:	stur	w21, [x29, #-60]
    167c:	str	x27, [sp, #56]
    1680:	stur	x7, [x29, #-48]
    1684:	stur	w17, [x29, #-36]
    1688:	mov	x27, x14
    168c:	mov	w28, w2
    1690:	mov	x21, x24
    1694:	mov	w24, w5
    1698:	mov	w23, w4
    169c:	mov	w25, w6
    16a0:	add	w16, w16, #0x1
    16a4:	b	13ac <BZ2_decompress+0x13ac>
    16a8:	ldr	x8, [x20]
    16ac:	b	16bc <BZ2_decompress+0x16bc>
    16b0:	ldr	w9, [x20, #36]
    16b4:	cmp	w9, #0x0
    16b8:	b.gt	1634 <BZ2_decompress+0x1634>
    16bc:	ldr	w10, [x8, #8]
    16c0:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    16c4:	ldr	x11, [x8]
    16c8:	ldr	w12, [x20, #32]
    16cc:	add	w9, w9, #0x8
    16d0:	sub	w10, w10, #0x1
    16d4:	ldrb	w13, [x11], #1
    16d8:	bfi	w13, w12, #8, #24
    16dc:	stp	w13, w9, [x20, #32]
    16e0:	ldr	w9, [x8, #12]
    16e4:	str	x11, [x8]
    16e8:	adds	w9, w9, #0x1
    16ec:	stp	w10, w9, [x8, #8]
    16f0:	b.cc	16b0 <BZ2_decompress+0x16b0>  // b.lo, b.ul, b.last
    16f4:	ldr	w9, [x8, #16]
    16f8:	add	w9, w9, #0x1
    16fc:	str	w9, [x8, #16]
    1700:	b	16b0 <BZ2_decompress+0x16b0>
    1704:	cmp	w16, w17
    1708:	b.ge	17e0 <BZ2_decompress+0x17e0>  // b.tcont
    170c:	mov	w30, wzr
    1710:	mov	w8, #0x20                  	// #32
    1714:	mov	w0, #0xfffffffc            	// #-4
    1718:	ldr	w10, [x20, #36]
    171c:	mov	x25, x14
    1720:	str	w8, [x20, #8]
    1724:	cmp	w10, #0x0
    1728:	b.le	1754 <BZ2_decompress+0x1754>
    172c:	ldr	w9, [x20, #32]
    1730:	sub	w10, w10, #0x1
    1734:	str	w10, [x20, #36]
    1738:	lsr	w9, w9, w10
    173c:	tbz	w9, #0, 17bc <BZ2_decompress+0x17bc>
    1740:	add	w30, w30, #0x1
    1744:	cmp	w30, w4
    1748:	mov	x14, x25
    174c:	b.lt	1718 <BZ2_decompress+0x1718>  // b.tstop
    1750:	b	29b0 <BZ2_decompress+0x29b0>
    1754:	ldr	x9, [x20]
    1758:	b	1768 <BZ2_decompress+0x1768>
    175c:	ldr	w10, [x20, #36]
    1760:	cmp	w10, #0x0
    1764:	b.gt	172c <BZ2_decompress+0x172c>
    1768:	ldr	w11, [x9, #8]
    176c:	cbz	w11, 17b0 <BZ2_decompress+0x17b0>
    1770:	ldr	x12, [x9]
    1774:	ldr	w13, [x20, #32]
    1778:	add	w10, w10, #0x8
    177c:	sub	w11, w11, #0x1
    1780:	ldrb	w14, [x12], #1
    1784:	bfi	w14, w13, #8, #24
    1788:	stp	w14, w10, [x20, #32]
    178c:	ldr	w10, [x9, #12]
    1790:	str	x12, [x9]
    1794:	adds	w10, w10, #0x1
    1798:	stp	w11, w10, [x9, #8]
    179c:	b.cc	175c <BZ2_decompress+0x175c>  // b.lo, b.ul, b.last
    17a0:	ldr	w10, [x9, #16]
    17a4:	add	w10, w10, #0x1
    17a8:	str	w10, [x9, #16]
    17ac:	b	175c <BZ2_decompress+0x175c>
    17b0:	mov	w0, wzr
    17b4:	mov	x14, x25
    17b8:	b	29b0 <BZ2_decompress+0x29b0>
    17bc:	mov	w8, #0x4651                	// #18001
    17c0:	cmp	w16, w8
    17c4:	mov	x14, x25
    17c8:	b.gt	17d8 <BZ2_decompress+0x17d8>
    17cc:	add	x8, x20, w16, sxtw
    17d0:	mov	w9, #0x651e                	// #25886
    17d4:	strb	w30, [x8, x9]
    17d8:	add	w16, w16, #0x1
    17dc:	b	1704 <BZ2_decompress+0x1704>
    17e0:	mov	w8, #0x4652                	// #18002
    17e4:	cmp	w17, w8
    17e8:	csel	w8, w17, w8, lt  // lt = tstop
    17ec:	cmp	w4, #0x1
    17f0:	b.lt	1810 <BZ2_decompress+0x1810>  // b.tstop
    17f4:	mov	w9, wzr
    17f8:	sub	x10, x29, #0x8
    17fc:	and	x11, x9, #0xff
    1800:	strb	w9, [x10, x11]
    1804:	add	w9, w9, #0x1
    1808:	cmp	w4, w9, uxtb
    180c:	b.gt	17fc <BZ2_decompress+0x17fc>
    1810:	cmp	w17, #0x1
    1814:	b.lt	18a0 <BZ2_decompress+0x18a0>  // b.tstop
    1818:	mov	w26, w2
    181c:	mov	w2, w15
    1820:	mov	x0, x18
    1824:	mov	x16, xzr
    1828:	sxtw	x9, w8
    182c:	mov	w10, #0x651e                	// #25886
    1830:	sub	x11, x29, #0x8
    1834:	mov	w12, #0x1ecc                	// #7884
    1838:	str	x14, [sp, #8]
    183c:	b	1858 <BZ2_decompress+0x1858>
    1840:	mov	x16, x25
    1844:	add	x16, x25, #0x1
    1848:	cmp	x16, x9
    184c:	sturb	w14, [x29, #-8]
    1850:	strb	w14, [x13, x12]
    1854:	b.ge	188c <BZ2_decompress+0x188c>  // b.tcont
    1858:	add	x13, x20, x16
    185c:	ldrb	w15, [x13, x10]
    1860:	mov	x25, x16
    1864:	ldrb	w14, [x11, x15]
    1868:	cbz	x15, 1840 <BZ2_decompress+0x1840>
    186c:	add	x16, x11, x15
    1870:	ldurb	w17, [x16, #-1]
    1874:	and	w18, w15, #0xff
    1878:	cmp	w18, #0x1
    187c:	sub	x15, x15, #0x1
    1880:	strb	w17, [x16]
    1884:	b.ne	186c <BZ2_decompress+0x186c>  // b.any
    1888:	b	1840 <BZ2_decompress+0x1840>
    188c:	ldr	x14, [sp, #8]
    1890:	mov	x18, x0
    1894:	mov	w15, w2
    1898:	mov	w2, w26
    189c:	b	18a4 <BZ2_decompress+0x18a4>
    18a0:	mov	w16, wzr
    18a4:	mov	w26, wzr
    18a8:	mov	w17, w8
    18ac:	cmp	w26, w4
    18b0:	b.ge	1948 <BZ2_decompress+0x1948>  // b.tcont
    18b4:	ldr	w9, [x20, #36]
    18b8:	mov	w8, #0x21                  	// #33
    18bc:	str	w8, [x20, #8]
    18c0:	cmp	w9, #0x4
    18c4:	b.le	18ec <BZ2_decompress+0x18ec>
    18c8:	ldr	w8, [x20, #32]
    18cc:	sub	w9, w9, #0x5
    18d0:	mov	w16, wzr
    18d4:	str	w9, [x20, #36]
    18d8:	lsr	w8, w8, w9
    18dc:	and	w0, w8, #0x1f
    18e0:	cmp	w16, w6
    18e4:	b.ge	1c58 <BZ2_decompress+0x1c58>  // b.tcont
    18e8:	b	1bfc <BZ2_decompress+0x1bfc>
    18ec:	ldr	x8, [x20]
    18f0:	b	1900 <BZ2_decompress+0x1900>
    18f4:	ldr	w9, [x20, #36]
    18f8:	cmp	w9, #0x4
    18fc:	b.gt	18c8 <BZ2_decompress+0x18c8>
    1900:	ldr	w10, [x8, #8]
    1904:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1908:	ldr	x11, [x8]
    190c:	ldr	w12, [x20, #32]
    1910:	add	w9, w9, #0x8
    1914:	sub	w10, w10, #0x1
    1918:	ldrb	w13, [x11], #1
    191c:	bfi	w13, w12, #8, #24
    1920:	stp	w13, w9, [x20, #32]
    1924:	ldr	w9, [x8, #12]
    1928:	str	x11, [x8]
    192c:	adds	w9, w9, #0x1
    1930:	stp	w10, w9, [x8, #8]
    1934:	b.cc	18f4 <BZ2_decompress+0x18f4>  // b.lo, b.ul, b.last
    1938:	ldr	w9, [x8, #16]
    193c:	add	w9, w9, #0x1
    1940:	str	w9, [x8, #16]
    1944:	b	18f4 <BZ2_decompress+0x18f4>
    1948:	cmp	w4, #0x1
    194c:	str	x27, [sp, #56]
    1950:	stur	x7, [x29, #-48]
    1954:	stur	w17, [x29, #-36]
    1958:	stp	w5, w4, [sp, #28]
    195c:	str	w30, [sp, #16]
    1960:	str	w2, [sp, #44]
    1964:	str	x14, [sp, #8]
    1968:	stur	w19, [x29, #-40]
    196c:	b.lt	1a44 <BZ2_decompress+0x1a44>  // b.tstop
    1970:	mov	w8, #0xab70                	// #43888
    1974:	mov	x26, xzr
    1978:	mov	w23, w4
    197c:	mov	w9, w6
    1980:	add	x25, x20, x8
    1984:	stur	x9, [x29, #-56]
    1988:	b	19f8 <BZ2_decompress+0x19f8>
    198c:	mov	w5, wzr
    1990:	mov	w21, #0x20                  	// #32
    1994:	mov	w8, #0x408                 	// #1032
    1998:	madd	x8, x26, x8, x20
    199c:	mov	w10, #0xb17c                	// #45436
    19a0:	add	x0, x8, x10
    19a4:	mov	w10, #0xc9ac                	// #51628
    19a8:	mov	w9, #0x102                 	// #258
    19ac:	add	x1, x8, x10
    19b0:	mov	w10, #0xe1dc                	// #57820
    19b4:	madd	x9, x26, x9, x20
    19b8:	add	x2, x8, x10
    19bc:	mov	w8, #0xab70                	// #43888
    19c0:	add	x3, x9, x8
    19c4:	mov	w4, w21
    19c8:	mov	w27, w6
    19cc:	bl	0 <BZ2_hbCreateDecodeTables>
    19d0:	add	x8, x20, x26, lsl #2
    19d4:	add	x26, x26, #0x1
    19d8:	mov	w6, w27
    19dc:	mov	w9, #0xfa0c                	// #64012
    19e0:	cmp	x26, x23
    19e4:	add	x25, x25, #0x102
    19e8:	mov	w3, w19
    19ec:	mov	x1, x28
    19f0:	str	w21, [x8, x9]
    19f4:	b.eq	1a38 <BZ2_decompress+0x1a38>  // b.none
    19f8:	mov	x28, x1
    19fc:	mov	w19, w3
    1a00:	cmp	w6, #0x1
    1a04:	b.lt	198c <BZ2_decompress+0x198c>  // b.tstop
    1a08:	ldur	x8, [x29, #-56]
    1a0c:	mov	w5, wzr
    1a10:	mov	w21, #0x20                  	// #32
    1a14:	mov	x9, x25
    1a18:	ldrb	w10, [x9], #1
    1a1c:	cmp	w5, w10
    1a20:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    1a24:	cmp	w21, w10
    1a28:	csel	w21, w10, w21, gt
    1a2c:	subs	x8, x8, #0x1
    1a30:	b.ne	1a18 <BZ2_decompress+0x1a18>  // b.any
    1a34:	b	1994 <BZ2_decompress+0x1994>
    1a38:	mov	x25, x1
    1a3c:	mov	w19, w3
    1a40:	b	1a54 <BZ2_decompress+0x1a54>
    1a44:	mov	x25, x1
    1a48:	mov	w19, w3
    1a4c:	mov	w27, w6
    1a50:	mov	w26, wzr
    1a54:	ldr	w21, [x20, #3192]
    1a58:	ldr	w23, [x20, #40]
    1a5c:	add	x0, x20, #0x44
    1a60:	mov	w2, #0x400                 	// #1024
    1a64:	mov	w1, wzr
    1a68:	bl	0 <memset>
    1a6c:	ldr	w5, [sp, #28]
    1a70:	ldur	w16, [x29, #-20]
    1a74:	mov	w3, w19
    1a78:	ldr	w30, [sp, #16]
    1a7c:	ldp	w19, w17, [x29, #-40]
    1a80:	ldr	w2, [sp, #44]
    1a84:	mov	w10, #0x86a0                	// #34464
    1a88:	movk	w10, #0x1, lsl #16
    1a8c:	add	w21, w21, #0x1
    1a90:	add	x8, x20, #0xe8c
    1a94:	mov	w9, #0xfff                 	// #4095
    1a98:	mov	w13, #0xf                   	// #15
    1a9c:	mul	w23, w23, w10
    1aa0:	mov	w10, #0xff                  	// #255
    1aa4:	mov	x1, x25
    1aa8:	mov	x12, xzr
    1aac:	mov	x11, x13
    1ab0:	add	x13, x8, w9, sxtw
    1ab4:	add	w14, w10, w12
    1ab8:	strb	w14, [x13, x12]
    1abc:	sub	x12, x12, #0x1
    1ac0:	cmn	w12, #0x10
    1ac4:	b.ne	1ab4 <BZ2_decompress+0x1ab4>  // b.any
    1ac8:	add	w14, w9, w12
    1acc:	add	x15, x20, x11, lsl #2
    1ad0:	sub	x13, x11, #0x1
    1ad4:	add	x9, x12, w9, sxtw
    1ad8:	add	w12, w14, #0x1
    1adc:	sub	x10, x10, #0x10
    1ae0:	str	w12, [x15, #7820]
    1ae4:	cbnz	x11, 1aa8 <BZ2_decompress+0x1aa8>
    1ae8:	ldr	w4, [sp, #32]
    1aec:	cmp	w17, #0x1
    1af0:	mov	w6, w27
    1af4:	mov	w18, wzr
    1af8:	stur	w16, [x29, #-20]
    1afc:	b.lt	1bd8 <BZ2_decompress+0x1bd8>  // b.tstop
    1b00:	mov	w8, #0x1ecc                	// #7884
    1b04:	ldrb	w14, [x20, x8]
    1b08:	mov	w9, #0xfa0c                	// #64012
    1b0c:	mov	w8, #0x408                 	// #1032
    1b10:	mov	w11, #0xe1dc                	// #57820
    1b14:	add	x12, x20, w14, uxtw #2
    1b18:	ldr	w3, [x12, x9]
    1b1c:	umaddl	x8, w14, w8, x20
    1b20:	add	x9, x8, x11
    1b24:	mov	w10, #0xc9ac                	// #51628
    1b28:	stur	x9, [x29, #-32]
    1b2c:	mov	w9, #0xb17c                	// #45436
    1b30:	mov	w28, wzr
    1b34:	add	x27, x8, x10
    1b38:	add	x7, x8, x9
    1b3c:	mov	w16, #0x100                 	// #256
    1b40:	mov	w15, #0x31                  	// #49
    1b44:	mov	w1, w3
    1b48:	ldr	w9, [x20, #36]
    1b4c:	mov	w8, #0x24                  	// #36
    1b50:	str	w8, [x20, #8]
    1b54:	cmp	w9, w1
    1b58:	b.ge	1bb8 <BZ2_decompress+0x1bb8>  // b.tcont
    1b5c:	ldr	x8, [x20]
    1b60:	b	1b70 <BZ2_decompress+0x1b70>
    1b64:	ldr	w9, [x20, #36]
    1b68:	cmp	w9, w1
    1b6c:	b.ge	1bb8 <BZ2_decompress+0x1bb8>  // b.tcont
    1b70:	ldr	w10, [x8, #8]
    1b74:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1b78:	ldr	x11, [x8]
    1b7c:	ldr	w12, [x20, #32]
    1b80:	add	w9, w9, #0x8
    1b84:	sub	w10, w10, #0x1
    1b88:	ldrb	w13, [x11], #1
    1b8c:	bfi	w13, w12, #8, #24
    1b90:	stp	w13, w9, [x20, #32]
    1b94:	ldr	w9, [x8, #12]
    1b98:	str	x11, [x8]
    1b9c:	adds	w9, w9, #0x1
    1ba0:	stp	w10, w9, [x8, #8]
    1ba4:	b.cc	1b64 <BZ2_decompress+0x1b64>  // b.lo, b.ul, b.last
    1ba8:	ldr	w9, [x8, #16]
    1bac:	add	w9, w9, #0x1
    1bb0:	str	w9, [x8, #16]
    1bb4:	b	1b64 <BZ2_decompress+0x1b64>
    1bb8:	ldr	w8, [x20, #32]
    1bbc:	sub	w9, w9, w1
    1bc0:	mov	w10, #0xffffffff            	// #-1
    1bc4:	lsl	w10, w10, w1
    1bc8:	lsr	w8, w8, w9
    1bcc:	bic	w0, w8, w10
    1bd0:	str	w9, [x20, #36]
    1bd4:	b	1d64 <BZ2_decompress+0x1d64>
    1bd8:	ldur	w9, [x29, #-16]
    1bdc:	ldur	x7, [x29, #-48]
    1be0:	ldr	x27, [sp, #56]
    1be4:	ldr	x14, [sp, #8]
    1be8:	mov	w15, wzr
    1bec:	mov	w28, wzr
    1bf0:	mov	w0, #0xfffffffc            	// #-4
    1bf4:	mov	w16, #0x100                 	// #256
    1bf8:	b	29b4 <BZ2_decompress+0x29b4>
    1bfc:	sub	w8, w0, #0x1
    1c00:	cmp	w8, #0x13
    1c04:	b.hi	1d5c <BZ2_decompress+0x1d5c>  // b.pmore
    1c08:	stur	w0, [x29, #-20]
    1c0c:	ldr	w9, [x20, #36]
    1c10:	mov	w8, #0x22                  	// #34
    1c14:	str	w8, [x20, #8]
    1c18:	cmp	w9, #0x0
    1c1c:	b.le	1ca0 <BZ2_decompress+0x1ca0>
    1c20:	ldur	w0, [x29, #-20]
    1c24:	ldr	w8, [x20, #32]
    1c28:	sub	w9, w9, #0x1
    1c2c:	str	w9, [x20, #36]
    1c30:	lsr	w8, w8, w9
    1c34:	tbnz	w8, #0, 1c64 <BZ2_decompress+0x1c64>
    1c38:	mov	w8, #0x102                 	// #258
    1c3c:	smaddl	x8, w26, w8, x20
    1c40:	mov	w9, #0xab70                	// #43888
    1c44:	add	x8, x8, w16, sxtw
    1c48:	strb	w0, [x8, x9]
    1c4c:	add	w16, w16, #0x1
    1c50:	cmp	w16, w6
    1c54:	b.lt	1bfc <BZ2_decompress+0x1bfc>  // b.tstop
    1c58:	stur	w0, [x29, #-20]
    1c5c:	add	w26, w26, #0x1
    1c60:	b	18ac <BZ2_decompress+0x18ac>
    1c64:	ldr	w9, [x20, #36]
    1c68:	ldur	w0, [x29, #-20]
    1c6c:	mov	w8, #0x23                  	// #35
    1c70:	str	w8, [x20, #8]
    1c74:	cmp	w9, #0x0
    1c78:	b.le	1d00 <BZ2_decompress+0x1d00>
    1c7c:	ldr	w8, [x20, #32]
    1c80:	sub	w9, w9, #0x1
    1c84:	str	w9, [x20, #36]
    1c88:	lsr	w8, w8, w9
    1c8c:	tst	w8, #0x1
    1c90:	mov	w8, #0x1                   	// #1
    1c94:	cneg	w8, w8, ne  // ne = any
    1c98:	add	w0, w8, w0
    1c9c:	b	1bfc <BZ2_decompress+0x1bfc>
    1ca0:	ldr	x8, [x20]
    1ca4:	ldur	w0, [x29, #-20]
    1ca8:	b	1cb8 <BZ2_decompress+0x1cb8>
    1cac:	ldr	w9, [x20, #36]
    1cb0:	cmp	w9, #0x0
    1cb4:	b.gt	1c24 <BZ2_decompress+0x1c24>
    1cb8:	ldr	w10, [x8, #8]
    1cbc:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1cc0:	ldr	x11, [x8]
    1cc4:	ldr	w12, [x20, #32]
    1cc8:	add	w9, w9, #0x8
    1ccc:	sub	w10, w10, #0x1
    1cd0:	ldrb	w13, [x11], #1
    1cd4:	bfi	w13, w12, #8, #24
    1cd8:	stp	w13, w9, [x20, #32]
    1cdc:	ldr	w9, [x8, #12]
    1ce0:	str	x11, [x8]
    1ce4:	adds	w9, w9, #0x1
    1ce8:	stp	w10, w9, [x8, #8]
    1cec:	b.cc	1cac <BZ2_decompress+0x1cac>  // b.lo, b.ul, b.last
    1cf0:	ldr	w9, [x8, #16]
    1cf4:	add	w9, w9, #0x1
    1cf8:	str	w9, [x8, #16]
    1cfc:	b	1cac <BZ2_decompress+0x1cac>
    1d00:	ldr	x8, [x20]
    1d04:	b	1d14 <BZ2_decompress+0x1d14>
    1d08:	ldr	w9, [x20, #36]
    1d0c:	cmp	w9, #0x0
    1d10:	b.gt	1c7c <BZ2_decompress+0x1c7c>
    1d14:	ldr	w10, [x8, #8]
    1d18:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1d1c:	ldr	x11, [x8]
    1d20:	ldr	w12, [x20, #32]
    1d24:	add	w9, w9, #0x8
    1d28:	sub	w10, w10, #0x1
    1d2c:	ldrb	w13, [x11], #1
    1d30:	bfi	w13, w12, #8, #24
    1d34:	stp	w13, w9, [x20, #32]
    1d38:	ldr	w9, [x8, #12]
    1d3c:	str	x11, [x8]
    1d40:	adds	w9, w9, #0x1
    1d44:	stp	w10, w9, [x8, #8]
    1d48:	b.cc	1d08 <BZ2_decompress+0x1d08>  // b.lo, b.ul, b.last
    1d4c:	ldr	w9, [x8, #16]
    1d50:	add	w9, w9, #0x1
    1d54:	str	w9, [x8, #16]
    1d58:	b	1d08 <BZ2_decompress+0x1d08>
    1d5c:	stur	w0, [x29, #-20]
    1d60:	b	29ac <BZ2_decompress+0x29ac>
    1d64:	cmp	w1, #0x14
    1d68:	stur	w0, [x29, #-12]
    1d6c:	b.gt	29ac <BZ2_decompress+0x29ac>
    1d70:	ldr	w8, [x7, w1, sxtw #2]
    1d74:	cmp	w0, w8
    1d78:	b.le	1e1c <BZ2_decompress+0x1e1c>
    1d7c:	add	w1, w1, #0x1
    1d80:	ldr	w9, [x20, #36]
    1d84:	mov	w8, #0x25                  	// #37
    1d88:	str	w8, [x20, #8]
    1d8c:	cmp	w9, #0x0
    1d90:	b.le	1dbc <BZ2_decompress+0x1dbc>
    1d94:	ldur	w0, [x29, #-12]
    1d98:	ldr	w8, [x20, #32]
    1d9c:	sub	w9, w9, #0x1
    1da0:	str	w9, [x20, #36]
    1da4:	lsr	w8, w8, w9
    1da8:	and	w10, w8, #0x1
    1dac:	bfi	w8, w0, #1, #31
    1db0:	stur	w10, [x29, #-16]
    1db4:	mov	w0, w8
    1db8:	b	1d64 <BZ2_decompress+0x1d64>
    1dbc:	ldr	x8, [x20]
    1dc0:	ldur	w0, [x29, #-12]
    1dc4:	b	1dd4 <BZ2_decompress+0x1dd4>
    1dc8:	ldr	w9, [x20, #36]
    1dcc:	cmp	w9, #0x0
    1dd0:	b.gt	1d98 <BZ2_decompress+0x1d98>
    1dd4:	ldr	w10, [x8, #8]
    1dd8:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    1ddc:	ldr	x11, [x8]
    1de0:	ldr	w12, [x20, #32]
    1de4:	add	w9, w9, #0x8
    1de8:	sub	w10, w10, #0x1
    1dec:	ldrb	w13, [x11], #1
    1df0:	bfi	w13, w12, #8, #24
    1df4:	stp	w13, w9, [x20, #32]
    1df8:	ldr	w9, [x8, #12]
    1dfc:	str	x11, [x8]
    1e00:	adds	w9, w9, #0x1
    1e04:	stp	w10, w9, [x8, #8]
    1e08:	b.cc	1dc8 <BZ2_decompress+0x1dc8>  // b.lo, b.ul, b.last
    1e0c:	ldr	w9, [x8, #16]
    1e10:	add	w9, w9, #0x1
    1e14:	str	w9, [x8, #16]
    1e18:	b	1dc8 <BZ2_decompress+0x1dc8>
    1e1c:	sxtw	x8, w1
    1e20:	ldr	w8, [x27, x8, lsl #2]
    1e24:	sub	w8, w0, w8
    1e28:	cmp	w8, #0x101
    1e2c:	b.hi	29ac <BZ2_decompress+0x29ac>  // b.pmore
    1e30:	ldur	x9, [x29, #-32]
    1e34:	ldr	w24, [x9, w8, sxtw #2]
    1e38:	cmp	w24, w21
    1e3c:	b.eq	2280 <BZ2_decompress+0x2280>  // b.none
    1e40:	subs	w9, w24, #0x1
    1e44:	b.hi	1e54 <BZ2_decompress+0x1e54>  // b.pmore
    1e48:	mov	w19, #0xffffffff            	// #-1
    1e4c:	mov	w2, #0x1                   	// #1
    1e50:	b	215c <BZ2_decompress+0x215c>
    1e54:	cmp	w18, w23
    1e58:	stur	w0, [x29, #-12]
    1e5c:	b.ge	29ac <BZ2_decompress+0x29ac>  // b.tcont
    1e60:	sxtw	x8, w24
    1e64:	sub	x11, x8, #0x1
    1e68:	mov	x25, x14
    1e6c:	cmp	w11, #0xf
    1e70:	b.hi	1ef4 <BZ2_decompress+0x1ef4>  // b.pmore
    1e74:	ldrsw	x9, [x20, #7820]
    1e78:	cmp	w11, #0x4
    1e7c:	add	w8, w9, w11
    1e80:	add	x8, x20, x8
    1e84:	ldrb	w8, [x8, #3724]
    1e88:	b.cc	1ec0 <BZ2_decompress+0x1ec0>  // b.lo, b.ul, b.last
    1e8c:	mov	w10, w24
    1e90:	add	w11, w9, w10
    1e94:	add	x12, x20, #0xe8c
    1e98:	sub	w13, w11, #0x4
    1e9c:	sub	w11, w11, #0x5
    1ea0:	ldr	w14, [x12, w11, sxtw]
    1ea4:	sub	w11, w10, #0x4
    1ea8:	sub	w10, w10, #0x5
    1eac:	cmp	w10, #0x3
    1eb0:	mov	w10, w11
    1eb4:	str	w14, [x12, w13, sxtw]
    1eb8:	b.hi	1e90 <BZ2_decompress+0x1e90>  // b.pmore
    1ebc:	sub	w11, w11, #0x1
    1ec0:	cbz	w11, 1ee8 <BZ2_decompress+0x1ee8>
    1ec4:	neg	w10, w11
    1ec8:	add	w11, w11, w9
    1ecc:	sub	w12, w11, #0x1
    1ed0:	add	x13, x20, #0xe8c
    1ed4:	ldrb	w14, [x13, w12, uxtw]
    1ed8:	adds	w10, w10, #0x1
    1edc:	strb	w14, [x13, w11, uxtw]
    1ee0:	mov	w11, w12
    1ee4:	b.cc	1ecc <BZ2_decompress+0x1ecc>  // b.lo, b.ul, b.last
    1ee8:	add	x9, x20, x9
    1eec:	strb	w8, [x9, #3724]
    1ef0:	b	2028 <BZ2_decompress+0x2028>
    1ef4:	lsr	w10, w11, #4
    1ef8:	add	x14, x20, w10, uxtw #2
    1efc:	ldrsw	x12, [x14, #7820]
    1f00:	and	x13, x11, #0xf
    1f04:	mov	w11, #0x1e8c                	// #7820
    1f08:	add	x11, x14, x11
    1f0c:	add	x8, x12, x13
    1f10:	add	x8, x20, x8
    1f14:	ldrb	w8, [x8, #3724]
    1f18:	cbz	w13, 1f40 <BZ2_decompress+0x1f40>
    1f1c:	add	w12, w12, w13
    1f20:	sxtw	x13, w12
    1f24:	add	x12, x20, x13
    1f28:	ldrb	w14, [x12, #3723]
    1f2c:	sub	x13, x13, #0x1
    1f30:	strb	w14, [x12, #3724]
    1f34:	ldrsw	x12, [x11]
    1f38:	cmp	x13, x12
    1f3c:	b.gt	1f24 <BZ2_decompress+0x1f24>
    1f40:	add	w12, w12, #0x1
    1f44:	mov	x14, x25
    1f48:	str	w12, [x11]
    1f4c:	cbz	w10, 1f90 <BZ2_decompress+0x1f90>
    1f50:	lsr	w10, w9, #4
    1f54:	add	x9, x10, #0x1
    1f58:	add	x10, x20, w10, uxtw #2
    1f5c:	mov	w11, #0x1e8c                	// #7820
    1f60:	add	x10, x10, x11
    1f64:	ldrsw	x11, [x10]
    1f68:	add	x13, x20, #0xe8c
    1f6c:	sub	x9, x9, #0x1
    1f70:	cmp	x9, #0x1
    1f74:	sub	x11, x11, #0x1
    1f78:	str	w11, [x10], #-4
    1f7c:	ldrsw	x12, [x10]
    1f80:	add	x12, x12, x13
    1f84:	ldrb	w12, [x12, #15]
    1f88:	strb	w12, [x13, x11]
    1f8c:	b.gt	1f64 <BZ2_decompress+0x1f64>
    1f90:	ldrsw	x9, [x20, #7820]
    1f94:	sub	x9, x9, #0x1
    1f98:	str	w9, [x20, #7820]
    1f9c:	add	x9, x20, x9
    1fa0:	strb	w8, [x9, #3724]
    1fa4:	ldr	w9, [x20, #7820]
    1fa8:	cbnz	w9, 202c <BZ2_decompress+0x202c>
    1fac:	str	w2, [sp, #44]
    1fb0:	mov	x2, x16
    1fb4:	mov	w0, w15
    1fb8:	add	x9, x20, #0xe8c
    1fbc:	mov	w10, #0xfff                 	// #4095
    1fc0:	mov	w14, #0xf                   	// #15
    1fc4:	mov	w11, #0x1e8c                	// #7820
    1fc8:	mov	x12, x14
    1fcc:	add	x14, x20, x14, lsl #2
    1fd0:	mov	x13, xzr
    1fd4:	add	x14, x14, x11
    1fd8:	add	x15, x9, w10, sxtw
    1fdc:	ldr	w16, [x14]
    1fe0:	add	w16, w13, w16
    1fe4:	add	w16, w16, #0xf
    1fe8:	add	x16, x20, w16, sxtw
    1fec:	ldrb	w16, [x16, #3724]
    1ff0:	strb	w16, [x15, x13]
    1ff4:	sub	x13, x13, #0x1
    1ff8:	cmn	w13, #0x10
    1ffc:	b.ne	1fdc <BZ2_decompress+0x1fdc>  // b.any
    2000:	add	w15, w10, w13
    2004:	add	x16, x20, x12, lsl #2
    2008:	sub	x14, x12, #0x1
    200c:	add	w15, w15, #0x1
    2010:	add	x10, x13, w10, sxtw
    2014:	str	w15, [x16, #7820]
    2018:	cbnz	x12, 1fc8 <BZ2_decompress+0x1fc8>
    201c:	mov	x16, x2
    2020:	ldr	w2, [sp, #44]
    2024:	mov	w15, w0
    2028:	mov	x14, x25
    202c:	add	x8, x20, x8
    2030:	ldrb	w9, [x8, #3468]
    2034:	add	x9, x20, x9, lsl #2
    2038:	ldr	w10, [x9, #68]
    203c:	add	w10, w10, #0x1
    2040:	str	w10, [x9, #68]
    2044:	ldrb	w9, [x20, #44]
    2048:	ldrb	w8, [x8, #3468]
    204c:	cbz	w9, 2064 <BZ2_decompress+0x2064>
    2050:	ldr	x9, [x20, #3160]
    2054:	strh	w8, [x9, w18, sxtw #1]
    2058:	add	w18, w18, #0x1
    205c:	cbnz	w15, 20c4 <BZ2_decompress+0x20c4>
    2060:	b	2074 <BZ2_decompress+0x2074>
    2064:	ldr	x9, [x20, #3152]
    2068:	str	w8, [x9, w18, sxtw #2]
    206c:	add	w18, w18, #0x1
    2070:	cbnz	w15, 20c4 <BZ2_decompress+0x20c4>
    2074:	sxtw	x8, w28
    2078:	add	x28, x8, #0x1
    207c:	cmp	w28, w17
    2080:	b.ge	2278 <BZ2_decompress+0x2278>  // b.tcont
    2084:	add	x8, x20, x28
    2088:	mov	w9, #0x1ecc                	// #7884
    208c:	ldrb	w14, [x8, x9]
    2090:	mov	w10, #0xfa0c                	// #64012
    2094:	mov	w8, #0x408                 	// #1032
    2098:	mov	w9, #0xb17c                	// #45436
    209c:	add	x12, x20, x14, lsl #2
    20a0:	mov	w11, #0xe1dc                	// #57820
    20a4:	madd	x8, x14, x8, x20
    20a8:	ldr	w3, [x12, x10]
    20ac:	add	x7, x8, x9
    20b0:	add	x9, x8, x11
    20b4:	stur	x9, [x29, #-32]
    20b8:	mov	w9, #0xc9ac                	// #51628
    20bc:	add	x27, x8, x9
    20c0:	mov	w15, #0x32                  	// #50
    20c4:	sub	w15, w15, #0x1
    20c8:	mov	w1, w3
    20cc:	ldr	w9, [x20, #36]
    20d0:	mov	w8, #0x28                  	// #40
    20d4:	str	w8, [x20, #8]
    20d8:	cmp	w9, w1
    20dc:	b.ge	213c <BZ2_decompress+0x213c>  // b.tcont
    20e0:	ldr	x8, [x20]
    20e4:	b	20f4 <BZ2_decompress+0x20f4>
    20e8:	ldr	w9, [x20, #36]
    20ec:	cmp	w9, w1
    20f0:	b.ge	213c <BZ2_decompress+0x213c>  // b.tcont
    20f4:	ldr	w10, [x8, #8]
    20f8:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    20fc:	ldr	x11, [x8]
    2100:	ldr	w12, [x20, #32]
    2104:	add	w9, w9, #0x8
    2108:	sub	w10, w10, #0x1
    210c:	ldrb	w13, [x11], #1
    2110:	bfi	w13, w12, #8, #24
    2114:	stp	w13, w9, [x20, #32]
    2118:	ldr	w9, [x8, #12]
    211c:	str	x11, [x8]
    2120:	adds	w9, w9, #0x1
    2124:	stp	w10, w9, [x8, #8]
    2128:	b.cc	20e8 <BZ2_decompress+0x20e8>  // b.lo, b.ul, b.last
    212c:	ldr	w9, [x8, #16]
    2130:	add	w9, w9, #0x1
    2134:	str	w9, [x8, #16]
    2138:	b	20e8 <BZ2_decompress+0x20e8>
    213c:	ldr	w8, [x20, #32]
    2140:	sub	w9, w9, w1
    2144:	mov	w10, #0xffffffff            	// #-1
    2148:	lsl	w10, w10, w1
    214c:	lsr	w8, w8, w9
    2150:	bic	w0, w8, w10
    2154:	str	w9, [x20, #36]
    2158:	b	2a18 <BZ2_decompress+0x2a18>
    215c:	cmp	w2, #0x200, lsl #12
    2160:	stur	w0, [x29, #-12]
    2164:	b.ge	29ac <BZ2_decompress+0x29ac>  // b.tcont
    2168:	cmp	w24, #0x1
    216c:	b.eq	2184 <BZ2_decompress+0x2184>  // b.none
    2170:	cbnz	w24, 2178 <BZ2_decompress+0x2178>
    2174:	add	w19, w19, w2
    2178:	lsl	w2, w2, #1
    217c:	cbnz	w15, 21e0 <BZ2_decompress+0x21e0>
    2180:	b	2190 <BZ2_decompress+0x2190>
    2184:	add	w19, w19, w2, lsl #1
    2188:	lsl	w2, w2, #1
    218c:	cbnz	w15, 21e0 <BZ2_decompress+0x21e0>
    2190:	sxtw	x8, w28
    2194:	add	x28, x8, #0x1
    2198:	cmp	w28, w17
    219c:	b.ge	2278 <BZ2_decompress+0x2278>  // b.tcont
    21a0:	add	x8, x20, x28
    21a4:	mov	w9, #0x1ecc                	// #7884
    21a8:	ldrb	w14, [x8, x9]
    21ac:	mov	w10, #0xfa0c                	// #64012
    21b0:	mov	w8, #0x408                 	// #1032
    21b4:	mov	w9, #0xb17c                	// #45436
    21b8:	add	x12, x20, x14, lsl #2
    21bc:	mov	w11, #0xe1dc                	// #57820
    21c0:	madd	x8, x14, x8, x20
    21c4:	ldr	w3, [x12, x10]
    21c8:	add	x7, x8, x9
    21cc:	add	x9, x8, x11
    21d0:	stur	x9, [x29, #-32]
    21d4:	mov	w9, #0xc9ac                	// #51628
    21d8:	add	x27, x8, x9
    21dc:	mov	w15, #0x32                  	// #50
    21e0:	sub	w15, w15, #0x1
    21e4:	mov	w1, w3
    21e8:	ldr	w9, [x20, #36]
    21ec:	mov	w8, #0x26                  	// #38
    21f0:	str	w8, [x20, #8]
    21f4:	cmp	w9, w1
    21f8:	b.ge	2258 <BZ2_decompress+0x2258>  // b.tcont
    21fc:	ldr	x8, [x20]
    2200:	b	2210 <BZ2_decompress+0x2210>
    2204:	ldr	w9, [x20, #36]
    2208:	cmp	w9, w1
    220c:	b.ge	2258 <BZ2_decompress+0x2258>  // b.tcont
    2210:	ldr	w10, [x8, #8]
    2214:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    2218:	ldr	x11, [x8]
    221c:	ldr	w12, [x20, #32]
    2220:	add	w9, w9, #0x8
    2224:	sub	w10, w10, #0x1
    2228:	ldrb	w13, [x11], #1
    222c:	bfi	w13, w12, #8, #24
    2230:	stp	w13, w9, [x20, #32]
    2234:	ldr	w9, [x8, #12]
    2238:	str	x11, [x8]
    223c:	adds	w9, w9, #0x1
    2240:	stp	w10, w9, [x8, #8]
    2244:	b.cc	2204 <BZ2_decompress+0x2204>  // b.lo, b.ul, b.last
    2248:	ldr	w9, [x8, #16]
    224c:	add	w9, w9, #0x1
    2250:	str	w9, [x8, #16]
    2254:	b	2204 <BZ2_decompress+0x2204>
    2258:	ldr	w8, [x20, #32]
    225c:	sub	w9, w9, w1
    2260:	mov	w10, #0xffffffff            	// #-1
    2264:	lsl	w10, w10, w1
    2268:	lsr	w8, w8, w9
    226c:	bic	w0, w8, w10
    2270:	str	w9, [x20, #36]
    2274:	b	2818 <BZ2_decompress+0x2818>
    2278:	mov	w15, wzr
    227c:	b	29ac <BZ2_decompress+0x29ac>
    2280:	ldr	w8, [x20, #56]
    2284:	stur	w0, [x29, #-12]
    2288:	mov	w0, #0xfffffffc            	// #-4
    228c:	tbnz	w8, #31, 29b0 <BZ2_decompress+0x29b0>
    2290:	cmp	w8, w18
    2294:	b.ge	29b0 <BZ2_decompress+0x29b0>  // b.tcont
    2298:	ldur	w13, [x29, #-20]
    229c:	mov	x16, xzr
    22a0:	add	x8, x20, #0x44
    22a4:	ldr	w9, [x8, x16, lsl #2]
    22a8:	tbnz	w9, #31, 29ac <BZ2_decompress+0x29ac>
    22ac:	cmp	w9, w18
    22b0:	b.gt	29ac <BZ2_decompress+0x29ac>
    22b4:	add	x16, x16, #0x1
    22b8:	cmp	x16, #0x100
    22bc:	b.ne	22a4 <BZ2_decompress+0x22a4>  // b.any
    22c0:	mov	x25, x1
    22c4:	mov	x8, xzr
    22c8:	add	x1, x20, #0x448
    22cc:	str	wzr, [x20, #1096]
    22d0:	add	x9, x20, x8
    22d4:	ldr	w10, [x9, #68]
    22d8:	add	x8, x8, #0x4
    22dc:	cmp	x8, #0x400
    22e0:	str	w10, [x9, #1100]
    22e4:	b.ne	22d0 <BZ2_decompress+0x22d0>  // b.any
    22e8:	ldr	w9, [x20, #1096]
    22ec:	mov	x8, xzr
    22f0:	add	x10, x20, #0x44c
    22f4:	ldr	w11, [x10, x8]
    22f8:	add	w9, w11, w9
    22fc:	str	w9, [x10, x8]
    2300:	add	x8, x8, #0x4
    2304:	cmp	x8, #0x400
    2308:	b.ne	22f4 <BZ2_decompress+0x22f4>  // b.any
    230c:	mov	x16, xzr
    2310:	add	x8, x20, #0x448
    2314:	ldr	w9, [x8, x16, lsl #2]
    2318:	tbnz	w9, #31, 2448 <BZ2_decompress+0x2448>
    231c:	cmp	w9, w18
    2320:	b.gt	2448 <BZ2_decompress+0x2448>
    2324:	add	x16, x16, #0x1
    2328:	cmp	x16, #0x101
    232c:	b.ne	2314 <BZ2_decompress+0x2314>  // b.any
    2330:	mov	x8, xzr
    2334:	add	x9, x20, x8, lsl #2
    2338:	ldr	w10, [x9, #1096]
    233c:	ldr	w9, [x9, #1100]
    2340:	cmp	w10, w9
    2344:	b.gt	2444 <BZ2_decompress+0x2444>
    2348:	add	x8, x8, #0x1
    234c:	cmp	x8, #0x100
    2350:	b.ne	2334 <BZ2_decompress+0x2334>  // b.any
    2354:	ldr	w8, [x20, #52]
    2358:	mov	w9, #0xffffffff            	// #-1
    235c:	str	w9, [x20, #3184]
    2360:	mov	w9, #0x2                   	// #2
    2364:	cmp	w8, #0x2
    2368:	str	wzr, [x20, #16]
    236c:	strb	wzr, [x20, #12]
    2370:	str	w9, [x20, #8]
    2374:	stur	w17, [x29, #-36]
    2378:	stur	x7, [x29, #-48]
    237c:	str	x27, [sp, #56]
    2380:	stur	x26, [x29, #-56]
    2384:	stur	w21, [x29, #-60]
    2388:	stur	w19, [x29, #-40]
    238c:	stp	x28, x23, [sp, #64]
    2390:	b.ge	2634 <BZ2_decompress+0x2634>  // b.tcont
    2394:	ldrb	w8, [x20, #44]
    2398:	cbz	w8, 26b8 <BZ2_decompress+0x26b8>
    239c:	mov	x27, x14
    23a0:	mov	w21, w13
    23a4:	mov	w28, w2
    23a8:	mov	w23, w5
    23ac:	mov	w26, w6
    23b0:	mov	x8, xzr
    23b4:	str	w15, [sp, #8]
    23b8:	stp	w3, w4, [sp, #28]
    23bc:	add	x9, x20, x8
    23c0:	ldr	w10, [x9, #1096]
    23c4:	add	x8, x8, #0x4
    23c8:	cmp	x8, #0x404
    23cc:	str	w10, [x9, #2124]
    23d0:	b.ne	23bc <BZ2_decompress+0x23bc>  // b.any
    23d4:	cmp	w18, #0x1
    23d8:	b.lt	2454 <BZ2_decompress+0x2454>  // b.tstop
    23dc:	mov	x8, xzr
    23e0:	mov	w9, w18
    23e4:	b	240c <BZ2_decompress+0x240c>
    23e8:	asr	w14, w14, #16
    23ec:	bfi	w13, w14, #4, #28
    23f0:	strb	w13, [x11, x12]
    23f4:	ldr	w11, [x10]
    23f8:	add	x8, x8, #0x1
    23fc:	cmp	x9, x8
    2400:	add	w11, w11, #0x1
    2404:	str	w11, [x10]
    2408:	b.eq	2454 <BZ2_decompress+0x2454>  // b.none
    240c:	ldr	x10, [x20, #3160]
    2410:	lsl	x11, x8, #1
    2414:	ldrb	w12, [x10, x11]
    2418:	add	x15, x20, x12, lsl #2
    241c:	ldr	w14, [x15, #2124]
    2420:	ubfx	x12, x8, #1, #31
    2424:	strh	w14, [x10, x11]
    2428:	ldr	x11, [x20, #3168]
    242c:	add	x10, x15, #0x84c
    2430:	ldrb	w13, [x11, x12]
    2434:	tbnz	w8, #0, 23e8 <BZ2_decompress+0x23e8>
    2438:	and	w13, w13, #0xf0
    243c:	orr	w13, w13, w14, asr #16
    2440:	b	23f0 <BZ2_decompress+0x23f0>
    2444:	add	w16, w8, #0x1
    2448:	mov	w0, #0xfffffffc            	// #-4
    244c:	mov	x1, x25
    2450:	b	29b0 <BZ2_decompress+0x29b0>
    2454:	ldrsw	x8, [x20, #56]
    2458:	ldr	x9, [x20, #3168]
    245c:	ldr	x10, [x20, #3160]
    2460:	str	x18, [sp, #48]
    2464:	asr	w11, w8, #1
    2468:	ldrb	w9, [x9, w11, sxtw]
    246c:	ldrh	w19, [x10, x8, lsl #1]
    2470:	ubfiz	w10, w8, #2, #1
    2474:	lsr	w9, w9, w10
    2478:	bfi	w19, w9, #16, #4
    247c:	b	249c <BZ2_decompress+0x249c>
    2480:	asr	w8, w8, #16
    2484:	bfi	w11, w8, #4, #28
    2488:	strb	w11, [x9, x10]
    248c:	ldr	w0, [x20, #56]
    2490:	mov	w8, w14
    2494:	cmp	w14, w0
    2498:	b.eq	24dc <BZ2_decompress+0x24dc>  // b.none
    249c:	ldr	x9, [x20, #3168]
    24a0:	ldr	x11, [x20, #3160]
    24a4:	mov	w14, w19
    24a8:	sbfx	x10, x14, #1, #31
    24ac:	sbfiz	x12, x14, #1, #32
    24b0:	ldrb	w13, [x9, x10]
    24b4:	ldrh	w19, [x11, x12]
    24b8:	strh	w8, [x11, x12]
    24bc:	ldrb	w11, [x9, x10]
    24c0:	ubfiz	w12, w14, #2, #1
    24c4:	lsr	w12, w13, w12
    24c8:	bfi	w19, w12, #16, #4
    24cc:	tbnz	w14, #0, 2480 <BZ2_decompress+0x2480>
    24d0:	and	w11, w11, #0xf0
    24d4:	orr	w11, w11, w8, asr #16
    24d8:	b	2488 <BZ2_decompress+0x2488>
    24dc:	ldrb	w9, [x20, #20]
    24e0:	mov	w8, #0x86a0                	// #34464
    24e4:	movk	w8, #0x1, lsl #16
    24e8:	str	x14, [sp]
    24ec:	str	w0, [x20, #60]
    24f0:	str	wzr, [x20, #1092]
    24f4:	cbz	w9, 2598 <BZ2_decompress+0x2598>
    24f8:	ldr	w9, [x20, #40]
    24fc:	str	xzr, [x20, #24]
    2500:	mul	w8, w9, w8
    2504:	cmp	w0, w8
    2508:	b.cs	262c <BZ2_decompress+0x262c>  // b.hs, b.nlast
    250c:	bl	0 <BZ2_indexIntoF>
    2510:	ldr	w9, [x20, #60]
    2514:	ldr	x10, [x20, #3168]
    2518:	str	w0, [x20, #64]
    251c:	ldr	x11, [x20, #3160]
    2520:	lsr	x12, x9, #1
    2524:	ldrb	w10, [x10, x12]
    2528:	ldr	w12, [x20, #1092]
    252c:	ldrh	w11, [x11, x9, lsl #1]
    2530:	ubfiz	w9, w9, #2, #1
    2534:	lsr	w9, w10, w9
    2538:	ldr	w10, [x20, #24]
    253c:	mov	w8, w0
    2540:	add	w12, w12, #0x1
    2544:	bfi	w11, w9, #16, #4
    2548:	str	w11, [x20, #60]
    254c:	str	w12, [x20, #1092]
    2550:	cbnz	w10, 2574 <BZ2_decompress+0x2574>
    2554:	ldrsw	x9, [x20, #28]
    2558:	adrp	x10, 0 <BZ2_rNums>
    255c:	add	x10, x10, #0x0
    2560:	ldr	w10, [x10, x9, lsl #2]
    2564:	add	w11, w9, #0x1
    2568:	cmp	w11, #0x200
    256c:	csinc	w9, wzr, w9, eq  // eq = none
    2570:	stp	w10, w9, [x20, #24]
    2574:	ldr	w9, [x20, #24]
    2578:	mov	w0, wzr
    257c:	sub	w9, w9, #0x1
    2580:	cmp	w9, #0x1
    2584:	str	w9, [x20, #24]
    2588:	cset	w9, eq  // eq = none
    258c:	eor	w8, w8, w9
    2590:	str	w8, [x20, #64]
    2594:	b	25ec <BZ2_decompress+0x25ec>
    2598:	ldr	w9, [x20, #40]
    259c:	mul	w8, w9, w8
    25a0:	cmp	w0, w8
    25a4:	b.cs	262c <BZ2_decompress+0x262c>  // b.hs, b.nlast
    25a8:	bl	0 <BZ2_indexIntoF>
    25ac:	ldr	w9, [x20, #60]
    25b0:	mov	w8, w0
    25b4:	ldr	x10, [x20, #3168]
    25b8:	str	w8, [x20, #64]
    25bc:	ldr	x8, [x20, #3160]
    25c0:	lsr	x11, x9, #1
    25c4:	ldrb	w10, [x10, x11]
    25c8:	ldr	w11, [x20, #1092]
    25cc:	ldrh	w8, [x8, x9, lsl #1]
    25d0:	ubfiz	w9, w9, #2, #1
    25d4:	lsr	w9, w10, w9
    25d8:	add	w10, w11, #0x1
    25dc:	bfi	w8, w9, #16, #4
    25e0:	mov	w0, wzr
    25e4:	str	w8, [x20, #60]
    25e8:	str	w10, [x20, #1092]
    25ec:	mov	w6, w26
    25f0:	ldr	w4, [sp, #32]
    25f4:	mov	w5, w23
    25f8:	stur	w21, [x29, #-20]
    25fc:	mov	x14, x27
    2600:	ldur	w9, [x29, #-16]
    2604:	ldr	w3, [sp, #28]
    2608:	ldp	x26, x7, [x29, #-56]
    260c:	ldr	x27, [sp, #56]
    2610:	mov	w30, w19
    2614:	ldur	w21, [x29, #-60]
    2618:	ldp	w19, w17, [x29, #-40]
    261c:	ldr	x23, [sp, #72]
    2620:	mov	w2, w28
    2624:	mov	x1, x25
    2628:	b	160c <BZ2_decompress+0x160c>
    262c:	mov	w0, #0x1                   	// #1
    2630:	b	29f8 <BZ2_decompress+0x29f8>
    2634:	adrp	x8, 0 <stderr>
    2638:	str	w3, [sp, #28]
    263c:	ldr	x3, [x8]
    2640:	adrp	x0, 0 <BZ2_decompress>
    2644:	add	x0, x0, #0x0
    2648:	str	x1, [sp, #48]
    264c:	mov	w1, #0x6                   	// #6
    2650:	mov	w8, w2
    2654:	mov	w2, #0x1                   	// #1
    2658:	mov	w27, w6
    265c:	mov	w23, w4
    2660:	str	x14, [sp, #8]
    2664:	str	w8, [sp, #44]
    2668:	mov	x28, x24
    266c:	mov	w24, w5
    2670:	mov	w26, w30
    2674:	mov	x19, x18
    2678:	mov	w21, w15
    267c:	bl	0 <fwrite>
    2680:	ldr	w3, [sp, #28]
    2684:	ldr	w2, [sp, #44]
    2688:	ldur	w13, [x29, #-20]
    268c:	ldr	x14, [sp, #8]
    2690:	ldr	x1, [sp, #48]
    2694:	mov	w15, w21
    2698:	mov	x18, x19
    269c:	mov	w30, w26
    26a0:	mov	w5, w24
    26a4:	mov	x24, x28
    26a8:	mov	w4, w23
    26ac:	mov	w6, w27
    26b0:	ldrb	w8, [x20, #44]
    26b4:	cbnz	w8, 239c <BZ2_decompress+0x239c>
    26b8:	ldur	w27, [x29, #-16]
    26bc:	ldr	x8, [x20, #3152]
    26c0:	mov	w16, w15
    26c4:	mov	x19, x14
    26c8:	mov	w21, w13
    26cc:	mov	w28, w2
    26d0:	mov	x15, x18
    26d4:	cmp	w18, #0x1
    26d8:	b.lt	2738 <BZ2_decompress+0x2738>  // b.tstop
    26dc:	ldr	x9, [x20, #3152]
    26e0:	mov	w10, wzr
    26e4:	mov	x17, xzr
    26e8:	mov	w11, w15
    26ec:	lsl	x12, x17, #2
    26f0:	ldrb	w12, [x8, x12]
    26f4:	add	x17, x17, #0x1
    26f8:	cmp	x11, x17
    26fc:	add	x12, x20, x12, lsl #2
    2700:	ldrsw	x13, [x12, #1096]
    2704:	lsl	x13, x13, #2
    2708:	ldr	w14, [x8, x13]
    270c:	orr	w14, w14, w10
    2710:	str	w14, [x8, x13]
    2714:	ldr	w8, [x12, #1096]
    2718:	add	w10, w10, #0x100
    271c:	add	w8, w8, #0x1
    2720:	str	w8, [x12, #1096]
    2724:	mov	x8, x9
    2728:	b.ne	26ec <BZ2_decompress+0x26ec>  // b.any
    272c:	mov	x12, x17
    2730:	mov	x8, x9
    2734:	b	273c <BZ2_decompress+0x273c>
    2738:	mov	w12, wzr
    273c:	ldrsw	x9, [x20, #56]
    2740:	ldrb	w11, [x20, #20]
    2744:	mov	w10, #0x86a0                	// #34464
    2748:	movk	w10, #0x1, lsl #16
    274c:	ldr	w9, [x8, x9, lsl #2]
    2750:	str	wzr, [x20, #1092]
    2754:	lsr	x9, x9, #8
    2758:	str	w9, [x20, #60]
    275c:	cbz	w11, 27b4 <BZ2_decompress+0x27b4>
    2760:	ldr	w11, [x20, #40]
    2764:	mov	w0, #0x1                   	// #1
    2768:	str	xzr, [x20, #24]
    276c:	mul	w10, w11, w10
    2770:	cmp	w9, w10
    2774:	b.cs	29f8 <BZ2_decompress+0x29f8>  // b.hs, b.nlast
    2778:	ldr	w8, [x8, x9, lsl #2]
    277c:	str	w0, [x20, #1092]
    2780:	and	w9, w8, #0xff
    2784:	lsr	w8, w8, #8
    2788:	stp	w8, w9, [x20, #60]
    278c:	adrp	x8, 0 <BZ2_rNums>
    2790:	ldr	w8, [x8]
    2794:	sub	w8, w8, #0x1
    2798:	cmp	w8, #0x1
    279c:	stp	w8, w0, [x20, #24]
    27a0:	cset	w8, eq  // eq = none
    27a4:	eor	w8, w9, w8
    27a8:	str	w8, [x20, #64]
    27ac:	mov	w0, wzr
    27b0:	b	27e0 <BZ2_decompress+0x27e0>
    27b4:	ldr	w11, [x20, #40]
    27b8:	mov	w0, #0x1                   	// #1
    27bc:	mul	w10, w11, w10
    27c0:	cmp	w9, w10
    27c4:	b.cs	29f8 <BZ2_decompress+0x29f8>  // b.hs, b.nlast
    27c8:	ldr	w8, [x8, w9, uxtw #2]
    27cc:	str	w0, [x20, #1092]
    27d0:	mov	w0, wzr
    27d4:	and	w9, w8, #0xff
    27d8:	lsr	w8, w8, #8
    27dc:	stp	w8, w9, [x20, #60]
    27e0:	mov	w2, w28
    27e4:	stur	w21, [x29, #-20]
    27e8:	mov	x14, x19
    27ec:	mov	w9, w27
    27f0:	ldp	w19, w17, [x29, #-40]
    27f4:	ldp	x26, x7, [x29, #-56]
    27f8:	ldp	x27, x28, [sp, #56]
    27fc:	ldur	w21, [x29, #-60]
    2800:	ldr	x23, [sp, #72]
    2804:	mov	x1, x25
    2808:	mov	x18, x15
    280c:	mov	w15, w16
    2810:	mov	x16, x12
    2814:	b	29b4 <BZ2_decompress+0x29b4>
    2818:	cmp	w1, #0x14
    281c:	b.gt	29a8 <BZ2_decompress+0x29a8>
    2820:	ldr	w8, [x7, w1, sxtw #2]
    2824:	cmp	w0, w8
    2828:	b.le	2870 <BZ2_decompress+0x2870>
    282c:	add	w1, w1, #0x1
    2830:	stur	w0, [x29, #-12]
    2834:	ldr	w9, [x20, #36]
    2838:	ldur	w0, [x29, #-12]
    283c:	mov	w8, #0x27                  	// #39
    2840:	str	w8, [x20, #8]
    2844:	cmp	w9, #0x0
    2848:	b.le	28f0 <BZ2_decompress+0x28f0>
    284c:	ldr	w8, [x20, #32]
    2850:	sub	w9, w9, #0x1
    2854:	str	w9, [x20, #36]
    2858:	lsr	w8, w8, w9
    285c:	and	w10, w8, #0x1
    2860:	bfi	w8, w0, #1, #31
    2864:	stur	w10, [x29, #-16]
    2868:	mov	w0, w8
    286c:	b	2818 <BZ2_decompress+0x2818>
    2870:	sxtw	x8, w1
    2874:	ldr	w8, [x27, x8, lsl #2]
    2878:	sub	w8, w0, w8
    287c:	cmp	w8, #0x101
    2880:	b.hi	29a8 <BZ2_decompress+0x29a8>  // b.pmore
    2884:	ldur	x9, [x29, #-32]
    2888:	ldr	w24, [x9, w8, sxtw #2]
    288c:	cmp	w24, #0x2
    2890:	b.cc	215c <BZ2_decompress+0x215c>  // b.lo, b.ul, b.last
    2894:	ldrsw	x8, [x20, #7820]
    2898:	add	x8, x20, x8
    289c:	ldrb	w8, [x8, #3724]
    28a0:	add	x8, x20, x8
    28a4:	ldrb	w9, [x8, #3468]
    28a8:	add	w8, w19, #0x1
    28ac:	add	x10, x20, x9, lsl #2
    28b0:	ldr	w11, [x10, #68]
    28b4:	add	w11, w11, w8
    28b8:	str	w11, [x10, #68]
    28bc:	ldrb	w10, [x20, #44]
    28c0:	cbz	w10, 294c <BZ2_decompress+0x294c>
    28c4:	tbnz	w19, #31, 2974 <BZ2_decompress+0x2974>
    28c8:	sxtw	x18, w18
    28cc:	sxtw	x10, w23
    28d0:	cmp	x18, x10
    28d4:	b.ge	2984 <BZ2_decompress+0x2984>  // b.tcont
    28d8:	ldr	x11, [x20, #3160]
    28dc:	subs	w8, w8, #0x1
    28e0:	strh	w9, [x11, x18, lsl #1]
    28e4:	add	x18, x18, #0x1
    28e8:	b.gt	28d0 <BZ2_decompress+0x28d0>
    28ec:	b	2974 <BZ2_decompress+0x2974>
    28f0:	ldr	x8, [x20]
    28f4:	b	2904 <BZ2_decompress+0x2904>
    28f8:	ldr	w9, [x20, #36]
    28fc:	cmp	w9, #0x0
    2900:	b.gt	284c <BZ2_decompress+0x284c>
    2904:	ldr	w10, [x8, #8]
    2908:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    290c:	ldr	x11, [x8]
    2910:	ldr	w12, [x20, #32]
    2914:	add	w9, w9, #0x8
    2918:	sub	w10, w10, #0x1
    291c:	ldrb	w13, [x11], #1
    2920:	bfi	w13, w12, #8, #24
    2924:	stp	w13, w9, [x20, #32]
    2928:	ldr	w9, [x8, #12]
    292c:	str	x11, [x8]
    2930:	adds	w9, w9, #0x1
    2934:	stp	w10, w9, [x8, #8]
    2938:	b.cc	28f8 <BZ2_decompress+0x28f8>  // b.lo, b.ul, b.last
    293c:	ldr	w9, [x8, #16]
    2940:	add	w9, w9, #0x1
    2944:	str	w9, [x8, #16]
    2948:	b	28f8 <BZ2_decompress+0x28f8>
    294c:	tbnz	w19, #31, 2974 <BZ2_decompress+0x2974>
    2950:	sxtw	x18, w18
    2954:	sxtw	x10, w23
    2958:	cmp	x18, x10
    295c:	b.ge	2984 <BZ2_decompress+0x2984>  // b.tcont
    2960:	ldr	x11, [x20, #3152]
    2964:	subs	w8, w8, #0x1
    2968:	str	w9, [x11, x18, lsl #2]
    296c:	add	x18, x18, #0x1
    2970:	b.gt	2958 <BZ2_decompress+0x2958>
    2974:	mov	w19, w8
    2978:	cmp	w24, w21
    297c:	b.ne	1e40 <BZ2_decompress+0x1e40>  // b.any
    2980:	b	2280 <BZ2_decompress+0x2280>
    2984:	stur	w0, [x29, #-12]
    2988:	mov	w0, #0xfffffffc            	// #-4
    298c:	mov	w19, w8
    2990:	b	29b0 <BZ2_decompress+0x29b0>
    2994:	sxtw	x8, w1
    2998:	ldr	w8, [x27, x8, lsl #2]
    299c:	sub	w8, w0, w8
    29a0:	cmp	w8, #0x101
    29a4:	b.ls	1e30 <BZ2_decompress+0x1e30>  // b.plast
    29a8:	stur	w0, [x29, #-12]
    29ac:	mov	w0, #0xfffffffc            	// #-4
    29b0:	ldur	w9, [x29, #-16]
    29b4:	stp	w16, w30, [x22]
    29b8:	stp	w26, w6, [x22, #8]
    29bc:	stp	w4, w17, [x22, #16]
    29c0:	stp	w21, w28, [x22, #24]
    29c4:	stp	w15, w24, [x22, #32]
    29c8:	stp	w23, w18, [x22, #40]
    29cc:	stp	w19, w2, [x22, #48]
    29d0:	ldur	w8, [x29, #-20]
    29d4:	str	w3, [x22, #80]
    29d8:	stur	x7, [x22, #84]
    29dc:	stur	x27, [x22, #92]
    29e0:	stp	w8, w5, [x22, #56]
    29e4:	ldur	w8, [x29, #-12]
    29e8:	stp	w9, w14, [x22, #72]
    29ec:	stp	w1, w8, [x22, #64]
    29f0:	ldur	x8, [x29, #-32]
    29f4:	stur	x8, [x22, #100]
    29f8:	ldp	x20, x19, [sp, #224]
    29fc:	ldp	x22, x21, [sp, #208]
    2a00:	ldp	x24, x23, [sp, #192]
    2a04:	ldp	x26, x25, [sp, #176]
    2a08:	ldp	x28, x27, [sp, #160]
    2a0c:	ldp	x29, x30, [sp, #144]
    2a10:	add	sp, sp, #0xf0
    2a14:	ret
    2a18:	cmp	w1, #0x14
    2a1c:	b.gt	29a8 <BZ2_decompress+0x29a8>
    2a20:	ldr	w8, [x7, w1, sxtw #2]
    2a24:	cmp	w0, w8
    2a28:	b.le	2994 <BZ2_decompress+0x2994>
    2a2c:	add	w1, w1, #0x1
    2a30:	stur	w0, [x29, #-12]
    2a34:	ldr	w9, [x20, #36]
    2a38:	ldur	w0, [x29, #-12]
    2a3c:	mov	w8, #0x29                  	// #41
    2a40:	str	w8, [x20, #8]
    2a44:	cmp	w9, #0x0
    2a48:	b.le	2a70 <BZ2_decompress+0x2a70>
    2a4c:	ldr	w8, [x20, #32]
    2a50:	sub	w9, w9, #0x1
    2a54:	str	w9, [x20, #36]
    2a58:	lsr	w8, w8, w9
    2a5c:	and	w10, w8, #0x1
    2a60:	bfi	w8, w0, #1, #31
    2a64:	stur	w10, [x29, #-16]
    2a68:	mov	w0, w8
    2a6c:	b	2a18 <BZ2_decompress+0x2a18>
    2a70:	ldr	x8, [x20]
    2a74:	b	2a84 <BZ2_decompress+0x2a84>
    2a78:	ldr	w9, [x20, #36]
    2a7c:	cmp	w9, #0x0
    2a80:	b.gt	2a4c <BZ2_decompress+0x2a4c>
    2a84:	ldr	w10, [x8, #8]
    2a88:	cbz	w10, 13a4 <BZ2_decompress+0x13a4>
    2a8c:	ldr	x11, [x8]
    2a90:	ldr	w12, [x20, #32]
    2a94:	add	w9, w9, #0x8
    2a98:	sub	w10, w10, #0x1
    2a9c:	ldrb	w13, [x11], #1
    2aa0:	bfi	w13, w12, #8, #24
    2aa4:	stp	w13, w9, [x20, #32]
    2aa8:	ldr	w9, [x8, #12]
    2aac:	str	x11, [x8]
    2ab0:	adds	w9, w9, #0x1
    2ab4:	stp	w10, w9, [x8, #8]
    2ab8:	b.cc	2a78 <BZ2_decompress+0x2a78>  // b.lo, b.ul, b.last
    2abc:	ldr	w9, [x8, #16]
    2ac0:	add	w9, w9, #0x1
    2ac4:	str	w9, [x8, #16]
    2ac8:	b	2a78 <BZ2_decompress+0x2a78>

0000000000002acc <makeMaps_d>:
    2acc:	mov	x8, xzr
    2ad0:	add	x9, x0, #0xc7c
    2ad4:	str	wzr, [x0, #3192]
    2ad8:	b	2ae8 <makeMaps_d+0x1c>
    2adc:	add	x8, x8, #0x1
    2ae0:	cmp	x8, #0x100
    2ae4:	b.eq	2b0c <makeMaps_d+0x40>  // b.none
    2ae8:	ldrb	w10, [x9, x8]
    2aec:	cbz	w10, 2adc <makeMaps_d+0x10>
    2af0:	ldrsw	x10, [x0, #3192]
    2af4:	add	x10, x0, x10
    2af8:	strb	w8, [x10, #3468]
    2afc:	ldr	w10, [x0, #3192]
    2b00:	add	w10, w10, #0x1
    2b04:	str	w10, [x0, #3192]
    2b08:	b	2adc <makeMaps_d+0x10>
    2b0c:	ret

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bz__AssertH__fail>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	stp	x20, x19, [sp, #16]
       8:	mov	x29, sp
       c:	adrp	x20, 0 <stderr>
      10:	ldr	x8, [x20]
      14:	mov	w19, w0
      18:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
      1c:	adrp	x3, 0 <BZ2_bz__AssertH__fail>
      20:	add	x1, x1, #0x0
      24:	add	x3, x3, #0x0
      28:	mov	x0, x8
      2c:	mov	w2, w19
      30:	bl	0 <fprintf>
      34:	cmp	w19, #0x3ef
      38:	b.ne	54 <BZ2_bz__AssertH__fail+0x54>  // b.any
      3c:	ldr	x3, [x20]
      40:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      44:	add	x0, x0, #0x0
      48:	mov	w1, #0x420                 	// #1056
      4c:	mov	w2, #0x1                   	// #1
      50:	bl	0 <fwrite>
      54:	mov	w0, #0x3                   	// #3
      58:	bl	0 <exit>

000000000000005c <BZ2_bzlibVersion>:
      5c:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      60:	add	x0, x0, #0x0
      64:	ret

0000000000000068 <BZ2_bzCompressInit>:
      68:	stp	x29, x30, [sp, #-64]!
      6c:	stp	x24, x23, [sp, #16]
      70:	stp	x22, x21, [sp, #32]
      74:	stp	x20, x19, [sp, #48]
      78:	mov	x29, sp
      7c:	mov	x19, x0
      80:	cmp	w3, #0xfa
      84:	mov	w0, #0xfffffffe            	// #-2
      88:	b.hi	214 <BZ2_bzCompressInit+0x1ac>  // b.pmore
      8c:	cbz	x19, 214 <BZ2_bzCompressInit+0x1ac>
      90:	sub	w8, w1, #0x1
      94:	mov	w21, w1
      98:	cmp	w8, #0x8
      9c:	b.hi	214 <BZ2_bzCompressInit+0x1ac>  // b.pmore
      a0:	ldr	x8, [x19, #56]
      a4:	cmp	w3, #0x0
      a8:	mov	w9, #0x1e                  	// #30
      ac:	mov	w22, w2
      b0:	csel	w24, w9, w3, eq  // eq = none
      b4:	cbz	x8, 1b4 <BZ2_bzCompressInit+0x14c>
      b8:	ldr	x8, [x19, #64]
      bc:	cbz	x8, 1c8 <BZ2_bzCompressInit+0x160>
      c0:	ldr	x8, [x19, #56]
      c4:	ldr	x0, [x19, #72]
      c8:	mov	w1, #0xd9d8                	// #55768
      cc:	mov	w2, #0x1                   	// #1
      d0:	blr	x8
      d4:	cbz	x0, 210 <BZ2_bzCompressInit+0x1a8>
      d8:	str	x19, [x0]
      dc:	stp	xzr, xzr, [x0, #32]
      e0:	str	xzr, [x0, #24]
      e4:	mov	x20, x0
      e8:	ldr	x8, [x19, #56]
      ec:	ldr	x0, [x19, #72]
      f0:	mov	w9, #0x1a80                	// #6784
      f4:	movk	w9, #0x6, lsl #16
      f8:	mul	w23, w21, w9
      fc:	mov	w2, #0x1                   	// #1
     100:	mov	w1, w23
     104:	blr	x8
     108:	str	x0, [x20, #24]
     10c:	ldr	x8, [x19, #56]
     110:	ldr	x0, [x19, #72]
     114:	add	w1, w23, #0x88
     118:	mov	w2, #0x1                   	// #1
     11c:	blr	x8
     120:	str	x0, [x20, #32]
     124:	ldr	x8, [x19, #56]
     128:	ldr	x0, [x19, #72]
     12c:	mov	w1, #0x40004               	// #262148
     130:	mov	w2, #0x1                   	// #1
     134:	blr	x8
     138:	ldr	x1, [x20, #24]
     13c:	str	x0, [x20, #40]
     140:	cbz	x1, 1e4 <BZ2_bzCompressInit+0x17c>
     144:	cbz	x0, 1d8 <BZ2_bzCompressInit+0x170>
     148:	ldr	x8, [x20, #32]
     14c:	cbz	x8, 1d8 <BZ2_bzCompressInit+0x170>
     150:	mov	w8, #0x86a0                	// #34464
     154:	ldp	x11, x10, [x20, #24]
     158:	movk	w8, #0x1, lsl #16
     15c:	mul	w8, w21, w8
     160:	mov	x9, #0x200000002           	// #8589934594
     164:	sub	w8, w8, #0x13
     168:	mov	x0, x20
     16c:	str	wzr, [x20, #660]
     170:	str	wzr, [x20, #652]
     174:	str	w21, [x20, #664]
     178:	str	w22, [x20, #656]
     17c:	str	w24, [x20, #88]
     180:	str	x9, [x20, #8]
     184:	str	w8, [x20, #112]
     188:	stp	x10, x11, [x20, #64]
     18c:	str	xzr, [x20, #80]
     190:	str	x11, [x20, #56]
     194:	str	x20, [x19, #48]
     198:	stur	xzr, [x19, #12]
     19c:	stur	xzr, [x19, #36]
     1a0:	bl	260 <init_RL>
     1a4:	mov	x0, x20
     1a8:	bl	26c <prepare_new_block>
     1ac:	mov	w0, wzr
     1b0:	b	214 <BZ2_bzCompressInit+0x1ac>
     1b4:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     1b8:	add	x8, x8, #0x0
     1bc:	str	x8, [x19, #56]
     1c0:	ldr	x8, [x19, #64]
     1c4:	cbnz	x8, c0 <BZ2_bzCompressInit+0x58>
     1c8:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     1cc:	add	x8, x8, #0x0
     1d0:	str	x8, [x19, #64]
     1d4:	b	c0 <BZ2_bzCompressInit+0x58>
     1d8:	cbz	x1, 1e4 <BZ2_bzCompressInit+0x17c>
     1dc:	ldp	x8, x0, [x19, #64]
     1e0:	blr	x8
     1e4:	ldr	x1, [x20, #32]
     1e8:	cbz	x1, 1f4 <BZ2_bzCompressInit+0x18c>
     1ec:	ldp	x8, x0, [x19, #64]
     1f0:	blr	x8
     1f4:	ldr	x1, [x20, #40]
     1f8:	cbz	x1, 204 <BZ2_bzCompressInit+0x19c>
     1fc:	ldp	x8, x0, [x19, #64]
     200:	blr	x8
     204:	ldp	x8, x0, [x19, #64]
     208:	mov	x1, x20
     20c:	blr	x8
     210:	mov	w0, #0xfffffffd            	// #-3
     214:	ldp	x20, x19, [sp, #48]
     218:	ldp	x22, x21, [sp, #32]
     21c:	ldp	x24, x23, [sp, #16]
     220:	ldp	x29, x30, [sp], #64
     224:	ret

0000000000000228 <default_bzalloc>:
     228:	stp	x29, x30, [sp, #-16]!
     22c:	mov	x29, sp
     230:	mul	w8, w2, w1
     234:	sxtw	x0, w8
     238:	bl	0 <malloc>
     23c:	ldp	x29, x30, [sp], #16
     240:	ret

0000000000000244 <default_bzfree>:
     244:	cbz	x1, 25c <default_bzfree+0x18>
     248:	stp	x29, x30, [sp, #-16]!
     24c:	mov	x29, sp
     250:	mov	x0, x1
     254:	bl	0 <free>
     258:	ldp	x29, x30, [sp], #16
     25c:	ret

0000000000000260 <init_RL>:
     260:	mov	w8, #0x100                 	// #256
     264:	stur	x8, [x0, #92]
     268:	ret

000000000000026c <prepare_new_block>:
     26c:	mov	w8, #0xffffffff            	// #-1
     270:	str	w8, [x0, #648]
     274:	ldr	w8, [x0, #660]
     278:	movi	v0.2d, #0x0
     27c:	str	wzr, [x0, #108]
     280:	stur	xzr, [x0, #116]
     284:	add	w8, w8, #0x1
     288:	stp	q0, q0, [x0, #128]
     28c:	stp	q0, q0, [x0, #160]
     290:	stp	q0, q0, [x0, #192]
     294:	stp	q0, q0, [x0, #224]
     298:	stp	q0, q0, [x0, #256]
     29c:	stp	q0, q0, [x0, #288]
     2a0:	stp	q0, q0, [x0, #320]
     2a4:	stp	q0, q0, [x0, #352]
     2a8:	str	w8, [x0, #660]
     2ac:	ret

00000000000002b0 <BZ2_bzCompress>:
     2b0:	stp	x29, x30, [sp, #-32]!
     2b4:	str	x19, [sp, #16]
     2b8:	mov	x29, sp
     2bc:	cbz	x0, 2d8 <BZ2_bzCompress+0x28>
     2c0:	ldr	x19, [x0, #48]
     2c4:	mov	x8, x0
     2c8:	cbz	x19, 2d8 <BZ2_bzCompress+0x28>
     2cc:	ldr	x9, [x19]
     2d0:	cmp	x9, x8
     2d4:	b.eq	2e8 <BZ2_bzCompress+0x38>  // b.none
     2d8:	mov	w0, #0xfffffffe            	// #-2
     2dc:	ldr	x19, [sp, #16]
     2e0:	ldp	x29, x30, [sp], #32
     2e4:	ret
     2e8:	mov	w0, #0xffffffff            	// #-1
     2ec:	b	300 <BZ2_bzCompress+0x50>
     2f0:	mov	w10, #0x3                   	// #3
     2f4:	ldr	w11, [x8, #8]
     2f8:	str	w10, [x19, #8]
     2fc:	str	w11, [x19, #16]
     300:	ldr	w10, [x19, #8]
     304:	cmp	w10, #0x2
     308:	b.ne	324 <BZ2_bzCompress+0x74>  // b.any
     30c:	cmp	w1, #0x1
     310:	b.eq	2f0 <BZ2_bzCompress+0x40>  // b.none
     314:	cmp	w1, #0x2
     318:	b.ne	374 <BZ2_bzCompress+0xc4>  // b.any
     31c:	mov	w10, #0x4                   	// #4
     320:	b	2f4 <BZ2_bzCompress+0x44>
     324:	cmp	w10, #0x1
     328:	b.eq	2dc <BZ2_bzCompress+0x2c>  // b.none
     32c:	cmp	w10, #0x3
     330:	b.eq	394 <BZ2_bzCompress+0xe4>  // b.none
     334:	cmp	w10, #0x4
     338:	b.ne	3cc <BZ2_bzCompress+0x11c>  // b.any
     33c:	cmp	w1, #0x2
     340:	b.ne	3c4 <BZ2_bzCompress+0x114>  // b.any
     344:	ldr	w10, [x19, #16]
     348:	ldr	w9, [x9, #8]
     34c:	cmp	w10, w9
     350:	b.ne	3c4 <BZ2_bzCompress+0x114>  // b.any
     354:	mov	x0, x8
     358:	bl	42c <handle_compress>
     35c:	tst	w0, #0xff
     360:	b.eq	3c4 <BZ2_bzCompress+0x114>  // b.none
     364:	ldr	w8, [x19, #16]
     368:	cbz	w8, 400 <BZ2_bzCompress+0x150>
     36c:	mov	w0, #0x3                   	// #3
     370:	b	2dc <BZ2_bzCompress+0x2c>
     374:	mov	w0, #0xfffffffe            	// #-2
     378:	cbnz	w1, 2dc <BZ2_bzCompress+0x2c>
     37c:	mov	x0, x8
     380:	bl	42c <handle_compress>
     384:	tst	w0, #0xff
     388:	mov	w8, #0xfffffffe            	// #-2
     38c:	cinv	w0, w8, ne  // ne = any
     390:	b	2dc <BZ2_bzCompress+0x2c>
     394:	cmp	w1, #0x1
     398:	b.ne	3c4 <BZ2_bzCompress+0x114>  // b.any
     39c:	ldr	w10, [x19, #16]
     3a0:	ldr	w9, [x9, #8]
     3a4:	cmp	w10, w9
     3a8:	b.ne	3c4 <BZ2_bzCompress+0x114>  // b.any
     3ac:	mov	x0, x8
     3b0:	bl	42c <handle_compress>
     3b4:	ldr	w8, [x19, #16]
     3b8:	cbz	w8, 3d4 <BZ2_bzCompress+0x124>
     3bc:	mov	w0, #0x2                   	// #2
     3c0:	b	2dc <BZ2_bzCompress+0x2c>
     3c4:	mov	w0, #0xffffffff            	// #-1
     3c8:	b	2dc <BZ2_bzCompress+0x2c>
     3cc:	mov	w0, wzr
     3d0:	b	2dc <BZ2_bzCompress+0x2c>
     3d4:	mov	x0, x19
     3d8:	bl	568 <isempty_RL>
     3dc:	tst	w0, #0xff
     3e0:	b.eq	3bc <BZ2_bzCompress+0x10c>  // b.none
     3e4:	ldp	w9, w8, [x19, #116]
     3e8:	mov	w0, #0x2                   	// #2
     3ec:	cmp	w8, w9
     3f0:	b.lt	2dc <BZ2_bzCompress+0x2c>  // b.tstop
     3f4:	str	w0, [x19, #8]
     3f8:	mov	w0, #0x1                   	// #1
     3fc:	b	2dc <BZ2_bzCompress+0x2c>
     400:	mov	x0, x19
     404:	bl	568 <isempty_RL>
     408:	tst	w0, #0xff
     40c:	b.eq	36c <BZ2_bzCompress+0xbc>  // b.none
     410:	ldp	w9, w8, [x19, #116]
     414:	cmp	w8, w9
     418:	b.lt	36c <BZ2_bzCompress+0xbc>  // b.tstop
     41c:	mov	w8, #0x1                   	// #1
     420:	str	w8, [x19, #8]
     424:	mov	w0, #0x4                   	// #4
     428:	b	2dc <BZ2_bzCompress+0x2c>

000000000000042c <handle_compress>:
     42c:	stp	x29, x30, [sp, #-64]!
     430:	str	x23, [sp, #16]
     434:	stp	x22, x21, [sp, #32]
     438:	stp	x20, x19, [sp, #48]
     43c:	mov	x29, sp
     440:	ldr	x19, [x0, #48]
     444:	mov	w20, wzr
     448:	mov	w21, wzr
     44c:	mov	w22, #0x2                   	// #2
     450:	mov	w23, #0x1                   	// #1
     454:	b	464 <handle_compress+0x38>
     458:	ldr	w8, [x19, #12]
     45c:	cmp	w8, #0x2
     460:	b.eq	4e0 <handle_compress+0xb4>  // b.none
     464:	ldr	w8, [x19, #12]
     468:	cmp	w8, #0x1
     46c:	b.ne	458 <handle_compress+0x2c>  // b.any
     470:	mov	x0, x19
     474:	bl	24a8 <copy_output_until_stop>
     478:	ldp	w9, w8, [x19, #116]
     47c:	orr	w20, w0, w20
     480:	cmp	w8, w9
     484:	b.lt	548 <handle_compress+0x11c>  // b.tstop
     488:	ldr	w8, [x19, #8]
     48c:	cmp	w8, #0x4
     490:	b.ne	4ac <handle_compress+0x80>  // b.any
     494:	ldr	w8, [x19, #16]
     498:	cbnz	w8, 4ac <handle_compress+0x80>
     49c:	mov	x0, x19
     4a0:	bl	568 <isempty_RL>
     4a4:	tst	w0, #0xff
     4a8:	b.ne	548 <handle_compress+0x11c>  // b.any
     4ac:	mov	x0, x19
     4b0:	bl	26c <prepare_new_block>
     4b4:	ldr	w8, [x19, #8]
     4b8:	str	w22, [x19, #12]
     4bc:	cmp	w8, #0x3
     4c0:	b.ne	458 <handle_compress+0x2c>  // b.any
     4c4:	ldr	w8, [x19, #16]
     4c8:	cbnz	w8, 458 <handle_compress+0x2c>
     4cc:	mov	x0, x19
     4d0:	bl	568 <isempty_RL>
     4d4:	tst	w0, #0xff
     4d8:	b.eq	458 <handle_compress+0x2c>  // b.none
     4dc:	b	548 <handle_compress+0x11c>
     4e0:	mov	x0, x19
     4e4:	bl	2538 <copy_input_until_stop>
     4e8:	ldr	w8, [x19, #8]
     4ec:	orr	w21, w0, w21
     4f0:	cmp	w8, #0x2
     4f4:	b.eq	500 <handle_compress+0xd4>  // b.none
     4f8:	ldr	w8, [x19, #16]
     4fc:	cbz	w8, 524 <handle_compress+0xf8>
     500:	ldp	w8, w9, [x19, #108]
     504:	cmp	w8, w9
     508:	b.ge	51c <handle_compress+0xf0>  // b.tcont
     50c:	ldr	x8, [x19]
     510:	ldr	w8, [x8, #8]
     514:	cbnz	w8, 464 <handle_compress+0x38>
     518:	b	548 <handle_compress+0x11c>
     51c:	mov	w1, wzr
     520:	b	538 <handle_compress+0x10c>
     524:	mov	x0, x19
     528:	bl	278c <flush_RL>
     52c:	ldr	w8, [x19, #8]
     530:	cmp	w8, #0x4
     534:	cset	w1, eq  // eq = none
     538:	mov	x0, x19
     53c:	bl	0 <BZ2_compressBlock>
     540:	str	w23, [x19, #12]
     544:	b	464 <handle_compress+0x38>
     548:	orr	w8, w21, w20
     54c:	ldp	x20, x19, [sp, #48]
     550:	ldp	x22, x21, [sp, #32]
     554:	ldr	x23, [sp, #16]
     558:	tst	w8, #0xff
     55c:	cset	w0, ne  // ne = any
     560:	ldp	x29, x30, [sp], #64
     564:	ret

0000000000000568 <isempty_RL>:
     568:	ldr	w8, [x0, #92]
     56c:	cmp	w8, #0xff
     570:	b.hi	588 <isempty_RL+0x20>  // b.pmore
     574:	ldr	w8, [x0, #96]
     578:	cmp	w8, #0x0
     57c:	b.le	588 <isempty_RL+0x20>
     580:	mov	w0, wzr
     584:	ret
     588:	mov	w0, #0x1                   	// #1
     58c:	ret

0000000000000590 <BZ2_bzCompressEnd>:
     590:	stp	x29, x30, [sp, #-32]!
     594:	stp	x20, x19, [sp, #16]
     598:	mov	x29, sp
     59c:	cbz	x0, 5b8 <BZ2_bzCompressEnd+0x28>
     5a0:	ldr	x20, [x0, #48]
     5a4:	mov	x19, x0
     5a8:	cbz	x20, 5b8 <BZ2_bzCompressEnd+0x28>
     5ac:	ldr	x8, [x20]
     5b0:	cmp	x8, x19
     5b4:	b.eq	5c8 <BZ2_bzCompressEnd+0x38>  // b.none
     5b8:	mov	w0, #0xfffffffe            	// #-2
     5bc:	ldp	x20, x19, [sp, #16]
     5c0:	ldp	x29, x30, [sp], #32
     5c4:	ret
     5c8:	ldr	x1, [x20, #24]
     5cc:	cbz	x1, 5d8 <BZ2_bzCompressEnd+0x48>
     5d0:	ldp	x8, x0, [x19, #64]
     5d4:	blr	x8
     5d8:	ldr	x1, [x20, #32]
     5dc:	cbz	x1, 5e8 <BZ2_bzCompressEnd+0x58>
     5e0:	ldp	x8, x0, [x19, #64]
     5e4:	blr	x8
     5e8:	ldr	x1, [x20, #40]
     5ec:	cbz	x1, 5f8 <BZ2_bzCompressEnd+0x68>
     5f0:	ldp	x8, x0, [x19, #64]
     5f4:	blr	x8
     5f8:	ldp	x8, x0, [x19, #64]
     5fc:	ldr	x1, [x19, #48]
     600:	blr	x8
     604:	mov	w0, wzr
     608:	str	xzr, [x19, #48]
     60c:	b	5bc <BZ2_bzCompressEnd+0x2c>

0000000000000610 <BZ2_bzDecompressInit>:
     610:	stp	x29, x30, [sp, #-48]!
     614:	str	x21, [sp, #16]
     618:	stp	x20, x19, [sp, #32]
     61c:	mov	x29, sp
     620:	mov	x21, x0
     624:	cmp	w1, #0x4
     628:	mov	w0, #0xfffffffe            	// #-2
     62c:	b.hi	6d4 <BZ2_bzDecompressInit+0xc4>  // b.pmore
     630:	cbz	x21, 6d4 <BZ2_bzDecompressInit+0xc4>
     634:	mov	w20, w2
     638:	cmp	w2, #0x1
     63c:	b.hi	6d4 <BZ2_bzDecompressInit+0xc4>  // b.pmore
     640:	ldr	x8, [x21, #56]
     644:	mov	w19, w1
     648:	cbz	x8, 6ac <BZ2_bzDecompressInit+0x9c>
     64c:	ldr	x8, [x21, #64]
     650:	cbz	x8, 6c0 <BZ2_bzDecompressInit+0xb0>
     654:	ldr	x8, [x21, #56]
     658:	ldr	x0, [x21, #72]
     65c:	mov	w1, #0xfa90                	// #64144
     660:	mov	w2, #0x1                   	// #1
     664:	blr	x8
     668:	cbz	x0, 6d0 <BZ2_bzDecompressInit+0xc0>
     66c:	mov	x8, x0
     670:	mov	w0, wzr
     674:	mov	w9, #0xa                   	// #10
     678:	str	x21, [x8]
     67c:	str	x8, [x21, #48]
     680:	str	xzr, [x8, #32]
     684:	str	wzr, [x8, #3188]
     688:	str	w9, [x8, #8]
     68c:	stur	xzr, [x21, #12]
     690:	stur	xzr, [x21, #36]
     694:	strb	w20, [x8, #44]
     698:	str	xzr, [x8, #3160]
     69c:	str	xzr, [x8, #3168]
     6a0:	str	xzr, [x8, #3152]
     6a4:	stp	wzr, w19, [x8, #48]
     6a8:	b	6d4 <BZ2_bzDecompressInit+0xc4>
     6ac:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     6b0:	add	x8, x8, #0x0
     6b4:	str	x8, [x21, #56]
     6b8:	ldr	x8, [x21, #64]
     6bc:	cbnz	x8, 654 <BZ2_bzDecompressInit+0x44>
     6c0:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     6c4:	add	x8, x8, #0x0
     6c8:	str	x8, [x21, #64]
     6cc:	b	654 <BZ2_bzDecompressInit+0x44>
     6d0:	mov	w0, #0xfffffffd            	// #-3
     6d4:	ldp	x20, x19, [sp, #32]
     6d8:	ldr	x21, [sp, #16]
     6dc:	ldp	x29, x30, [sp], #48
     6e0:	ret

00000000000006e4 <BZ2_indexIntoF>:
     6e4:	mov	w8, w0
     6e8:	mov	w0, wzr
     6ec:	mov	w9, #0x100                 	// #256
     6f0:	add	w10, w0, w9
     6f4:	asr	w10, w10, #1
     6f8:	ldr	w11, [x1, w10, sxtw #2]
     6fc:	cmp	w11, w8
     700:	csel	w9, w10, w9, gt
     704:	csel	w0, w0, w10, gt
     708:	sub	w10, w9, w0
     70c:	cmp	w10, #0x1
     710:	b.ne	6f0 <BZ2_indexIntoF+0xc>  // b.any
     714:	ret

0000000000000718 <BZ2_bzDecompress>:
     718:	stp	x29, x30, [sp, #-80]!
     71c:	stp	x26, x25, [sp, #16]
     720:	stp	x24, x23, [sp, #32]
     724:	stp	x22, x21, [sp, #48]
     728:	stp	x20, x19, [sp, #64]
     72c:	mov	x29, sp
     730:	cbz	x0, 748 <BZ2_bzDecompress+0x30>
     734:	ldr	x19, [x0, #48]
     738:	cbz	x19, 748 <BZ2_bzDecompress+0x30>
     73c:	ldr	x8, [x19]
     740:	cmp	x8, x0
     744:	b.eq	768 <BZ2_bzDecompress+0x50>  // b.none
     748:	mov	w20, #0xfffffffe            	// #-2
     74c:	mov	w0, w20
     750:	ldp	x20, x19, [sp, #64]
     754:	ldp	x22, x21, [sp, #48]
     758:	ldp	x24, x23, [sp, #32]
     75c:	ldp	x26, x25, [sp, #16]
     760:	ldp	x29, x30, [sp], #80
     764:	ret
     768:	mov	w8, #0xfa50                	// #64080
     76c:	adrp	x21, 0 <BZ2_bz__AssertH__fail>
     770:	adrp	x22, 0 <BZ2_bz__AssertH__fail>
     774:	adrp	x23, 0 <stderr>
     778:	add	x21, x21, #0x0
     77c:	mov	w24, #0xe                   	// #14
     780:	add	x22, x22, #0x0
     784:	add	x25, x19, x8
     788:	mov	w26, #0x4                   	// #4
     78c:	b	7a4 <BZ2_bzDecompress+0x8c>
     790:	cmp	w8, #0x1
     794:	b.eq	8cc <BZ2_bzDecompress+0x1b4>  // b.none
     798:	ldr	w8, [x19, #8]
     79c:	cmp	w8, #0xa
     7a0:	b.ge	840 <BZ2_bzDecompress+0x128>  // b.tcont
     7a4:	ldr	w8, [x19, #8]
     7a8:	cmp	w8, #0x2
     7ac:	b.ne	790 <BZ2_bzDecompress+0x78>  // b.any
     7b0:	ldrb	w8, [x19, #44]
     7b4:	cbz	w8, 7cc <BZ2_bzDecompress+0xb4>
     7b8:	mov	x0, x19
     7bc:	bl	8e4 <unRLE_obuf_to_output_SMALL>
     7c0:	tst	w0, #0xff
     7c4:	b.eq	7dc <BZ2_bzDecompress+0xc4>  // b.none
     7c8:	b	8dc <BZ2_bzDecompress+0x1c4>
     7cc:	mov	x0, x19
     7d0:	bl	fe4 <unRLE_obuf_to_output_FAST>
     7d4:	tst	w0, #0xff
     7d8:	b.ne	8dc <BZ2_bzDecompress+0x1c4>  // b.any
     7dc:	ldr	w8, [x25]
     7e0:	ldr	w9, [x19, #1092]
     7e4:	add	w8, w8, #0x1
     7e8:	cmp	w9, w8
     7ec:	b.ne	8d4 <BZ2_bzDecompress+0x1bc>  // b.any
     7f0:	ldr	w8, [x19, #16]
     7f4:	cbnz	w8, 8d4 <BZ2_bzDecompress+0x1bc>
     7f8:	ldr	w8, [x19, #3184]
     7fc:	ldr	w9, [x19, #52]
     800:	mvn	w3, w8
     804:	cmp	w9, #0x2
     808:	str	w3, [x19, #3184]
     80c:	b.gt	878 <BZ2_bzDecompress+0x160>
     810:	ldr	w8, [x19, #52]
     814:	cmp	w8, #0x2
     818:	b.ge	88c <BZ2_bzDecompress+0x174>  // b.tcont
     81c:	ldr	w8, [x19, #3184]
     820:	ldr	w9, [x19, #3176]
     824:	cmp	w8, w9
     828:	b.ne	8dc <BZ2_bzDecompress+0x1c4>  // b.any
     82c:	ldr	w9, [x19, #3188]
     830:	str	w24, [x19, #8]
     834:	eor	w8, w8, w9, ror #31
     838:	str	w8, [x19, #3188]
     83c:	b	798 <BZ2_bzDecompress+0x80>
     840:	mov	x0, x19
     844:	bl	0 <BZ2_decompress>
     848:	cmp	w0, #0x4
     84c:	b.ne	89c <BZ2_bzDecompress+0x184>  // b.any
     850:	ldr	w8, [x19, #52]
     854:	cmp	w8, #0x3
     858:	b.ge	8b4 <BZ2_bzDecompress+0x19c>  // b.tcont
     85c:	ldr	w9, [x19, #3188]
     860:	ldr	w10, [x19, #3180]
     864:	mov	w8, wzr
     868:	cmp	w9, w10
     86c:	cneg	w20, w26, ne  // ne = any
     870:	tbnz	w8, #0, 7a4 <BZ2_bzDecompress+0x8c>
     874:	b	74c <BZ2_bzDecompress+0x34>
     878:	ldr	x0, [x23]
     87c:	ldr	w2, [x19, #3176]
     880:	mov	x1, x21
     884:	bl	0 <fprintf>
     888:	b	810 <BZ2_bzDecompress+0xf8>
     88c:	ldr	x1, [x23]
     890:	mov	w0, #0x5d                  	// #93
     894:	bl	0 <fputc>
     898:	b	81c <BZ2_bzDecompress+0x104>
     89c:	ldr	w8, [x19, #8]
     8a0:	cmp	w8, #0x2
     8a4:	cset	w8, eq  // eq = none
     8a8:	csel	w20, w20, w0, eq  // eq = none
     8ac:	tbnz	w8, #0, 7a4 <BZ2_bzDecompress+0x8c>
     8b0:	b	74c <BZ2_bzDecompress+0x34>
     8b4:	ldr	x0, [x23]
     8b8:	ldr	w2, [x19, #3180]
     8bc:	ldr	w3, [x19, #3188]
     8c0:	mov	x1, x22
     8c4:	bl	0 <fprintf>
     8c8:	b	85c <BZ2_bzDecompress+0x144>
     8cc:	mov	w20, #0xffffffff            	// #-1
     8d0:	b	74c <BZ2_bzDecompress+0x34>
     8d4:	mov	w20, wzr
     8d8:	b	74c <BZ2_bzDecompress+0x34>
     8dc:	mov	w20, #0xfffffffc            	// #-4
     8e0:	b	74c <BZ2_bzDecompress+0x34>

00000000000008e4 <unRLE_obuf_to_output_SMALL>:
     8e4:	sub	sp, sp, #0x80
     8e8:	stp	x29, x30, [sp, #32]
     8ec:	stp	x28, x27, [sp, #48]
     8f0:	stp	x26, x25, [sp, #64]
     8f4:	stp	x24, x23, [sp, #80]
     8f8:	stp	x22, x21, [sp, #96]
     8fc:	stp	x20, x19, [sp, #112]
     900:	add	x29, sp, #0x20
     904:	ldr	x8, [x0]
     908:	ldrb	w10, [x0, #20]
     90c:	mov	x19, x0
     910:	ldr	w9, [x8, #32]
     914:	cbz	w10, d08 <unRLE_obuf_to_output_SMALL+0x424>
     918:	cbz	w9, fb8 <unRLE_obuf_to_output_SMALL+0x6d4>
     91c:	mov	w9, #0xfa50                	// #64080
     920:	adrp	x12, 0 <BZ2_crc32Table>
     924:	add	x10, x19, #0x448
     928:	add	x9, x19, x9
     92c:	add	x12, x12, #0x0
     930:	stur	x10, [x29, #-8]
     934:	str	x9, [sp, #16]
     938:	b	948 <unRLE_obuf_to_output_SMALL+0x64>
     93c:	ldr	x8, [x19]
     940:	ldr	w9, [x8, #32]
     944:	cbz	w9, fb8 <unRLE_obuf_to_output_SMALL+0x6d4>
     948:	ldr	w9, [x19, #16]
     94c:	cbz	w9, 9b8 <unRLE_obuf_to_output_SMALL+0xd4>
     950:	ldrb	w9, [x19, #12]
     954:	ldr	x8, [x8, #24]
     958:	strb	w9, [x8]
     95c:	ldr	w9, [x19, #3184]
     960:	ldrb	w8, [x19, #12]
     964:	ldr	w10, [x19, #16]
     968:	eor	w8, w8, w9, lsr #24
     96c:	ldr	w11, [x12, w8, uxtw #2]
     970:	ldr	x8, [x19]
     974:	sub	w10, w10, #0x1
     978:	str	w10, [x19, #16]
     97c:	eor	w9, w11, w9, lsl #8
     980:	str	w9, [x19, #3184]
     984:	ldr	x9, [x8, #24]
     988:	ldp	w10, w11, [x8, #32]
     98c:	add	x9, x9, #0x1
     990:	str	x9, [x8, #24]
     994:	sub	w9, w10, #0x1
     998:	str	w9, [x8, #32]
     99c:	adds	w9, w11, #0x1
     9a0:	str	w9, [x8, #36]
     9a4:	b.cc	93c <unRLE_obuf_to_output_SMALL+0x58>  // b.lo, b.ul, b.last
     9a8:	ldr	w9, [x8, #40]
     9ac:	add	w9, w9, #0x1
     9b0:	str	w9, [x8, #40]
     9b4:	b	93c <unRLE_obuf_to_output_SMALL+0x58>
     9b8:	ldr	x8, [sp, #16]
     9bc:	ldr	w28, [x19, #1092]
     9c0:	ldr	w22, [x8]
     9c4:	add	w8, w22, #0x1
     9c8:	cmp	w28, w8
     9cc:	b.eq	fb8 <unRLE_obuf_to_output_SMALL+0x6d4>  // b.none
     9d0:	mov	w0, #0x1                   	// #1
     9d4:	b.gt	fbc <unRLE_obuf_to_output_SMALL+0x6d8>
     9d8:	ldr	w8, [x19, #40]
     9dc:	ldp	w21, w27, [x19, #60]
     9e0:	mov	w9, #0x86a0                	// #34464
     9e4:	movk	w9, #0x1, lsl #16
     9e8:	mul	w23, w8, w9
     9ec:	cmp	w21, w23
     9f0:	str	w0, [x19, #16]
     9f4:	strb	w27, [x19, #12]
     9f8:	b.cs	fbc <unRLE_obuf_to_output_SMALL+0x6d8>  // b.hs, b.nlast
     9fc:	ldur	x1, [x29, #-8]
     a00:	mov	w0, w21
     a04:	bl	6e4 <BZ2_indexIntoF>
     a08:	ldr	x11, [x19, #3168]
     a0c:	ldr	x25, [x19, #3160]
     a10:	lsr	x8, x21, #1
     a14:	lsl	w9, w21, #2
     a18:	ldrb	w8, [x11, x8]
     a1c:	and	x9, x9, #0x4
     a20:	ldrh	w20, [x25, x21, lsl #1]
     a24:	lsr	x8, x8, x9
     a28:	ldr	w9, [x19, #24]
     a2c:	lsl	w8, w8, #16
     a30:	and	x8, x8, #0xf0000
     a34:	orr	x21, x8, x20
     a38:	str	w21, [x19, #60]
     a3c:	cbnz	w9, a60 <unRLE_obuf_to_output_SMALL+0x17c>
     a40:	ldrsw	x8, [x19, #28]
     a44:	adrp	x9, 0 <BZ2_rNums>
     a48:	add	x9, x9, #0x0
     a4c:	ldr	w9, [x9, x8, lsl #2]
     a50:	add	w10, w8, #0x1
     a54:	cmp	w10, #0x200
     a58:	csinc	w8, wzr, w8, eq  // eq = none
     a5c:	stp	w9, w8, [x19, #24]
     a60:	ldr	w8, [x19, #24]
     a64:	add	w26, w28, #0x1
     a68:	cmp	w28, w22
     a6c:	str	w26, [x19, #1092]
     a70:	sub	w24, w8, #0x1
     a74:	str	w24, [x19, #24]
     a78:	b.eq	cf0 <unRLE_obuf_to_output_SMALL+0x40c>  // b.none
     a7c:	cmp	w24, #0x1
     a80:	cset	w8, eq  // eq = none
     a84:	and	w9, w0, #0xff
     a88:	eor	w8, w9, w8
     a8c:	cmp	w8, w27
     a90:	b.ne	cec <unRLE_obuf_to_output_SMALL+0x408>  // b.any
     a94:	cmp	w21, w23
     a98:	mov	w8, #0x2                   	// #2
     a9c:	str	w8, [x19, #16]
     aa0:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     aa4:	ldur	x1, [x29, #-8]
     aa8:	mov	w0, w21
     aac:	str	x11, [sp, #8]
     ab0:	bl	6e4 <BZ2_indexIntoF>
     ab4:	ldr	x9, [sp, #8]
     ab8:	lsr	x8, x21, #1
     abc:	ldrh	w11, [x25, x21, lsl #1]
     ac0:	ldrb	w8, [x9, x8]
     ac4:	lsl	w9, w20, #2
     ac8:	and	x9, x9, #0x4
     acc:	lsr	x8, x8, x9
     ad0:	lsl	w8, w8, #16
     ad4:	and	x8, x8, #0xf0000
     ad8:	orr	x21, x8, x11
     adc:	str	w21, [x19, #60]
     ae0:	cbnz	w24, b04 <unRLE_obuf_to_output_SMALL+0x220>
     ae4:	ldrsw	x8, [x19, #28]
     ae8:	adrp	x9, 0 <BZ2_rNums>
     aec:	add	x9, x9, #0x0
     af0:	ldr	w9, [x9, x8, lsl #2]
     af4:	add	w10, w8, #0x1
     af8:	cmp	w10, #0x200
     afc:	csinc	w8, wzr, w8, eq  // eq = none
     b00:	stp	w9, w8, [x19, #24]
     b04:	ldr	w8, [x19, #24]
     b08:	add	w20, w28, #0x2
     b0c:	cmp	w26, w22
     b10:	str	w20, [x19, #1092]
     b14:	sub	w24, w8, #0x1
     b18:	str	w24, [x19, #24]
     b1c:	b.eq	cf0 <unRLE_obuf_to_output_SMALL+0x40c>  // b.none
     b20:	cmp	w24, #0x1
     b24:	cset	w8, eq  // eq = none
     b28:	and	w9, w0, #0xff
     b2c:	eor	w8, w9, w8
     b30:	cmp	w8, w27
     b34:	b.ne	cec <unRLE_obuf_to_output_SMALL+0x408>  // b.any
     b38:	cmp	w21, w23
     b3c:	mov	w8, #0x3                   	// #3
     b40:	str	w8, [x19, #16]
     b44:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     b48:	ldur	x1, [x29, #-8]
     b4c:	mov	w0, w21
     b50:	mov	x26, x11
     b54:	bl	6e4 <BZ2_indexIntoF>
     b58:	ldr	x9, [sp, #8]
     b5c:	lsr	x8, x21, #1
     b60:	ldrh	w11, [x25, x21, lsl #1]
     b64:	ldrb	w8, [x9, x8]
     b68:	lsl	w9, w26, #2
     b6c:	and	x9, x9, #0x4
     b70:	lsr	x8, x8, x9
     b74:	lsl	w8, w8, #16
     b78:	and	x8, x8, #0xf0000
     b7c:	orr	x21, x8, x11
     b80:	str	w21, [x19, #60]
     b84:	cbnz	w24, ba8 <unRLE_obuf_to_output_SMALL+0x2c4>
     b88:	ldrsw	x8, [x19, #28]
     b8c:	adrp	x9, 0 <BZ2_rNums>
     b90:	add	x9, x9, #0x0
     b94:	ldr	w9, [x9, x8, lsl #2]
     b98:	add	w10, w8, #0x1
     b9c:	cmp	w10, #0x200
     ba0:	csinc	w8, wzr, w8, eq  // eq = none
     ba4:	stp	w9, w8, [x19, #24]
     ba8:	ldr	w8, [x19, #24]
     bac:	add	w9, w28, #0x3
     bb0:	cmp	w20, w22
     bb4:	str	w9, [x19, #1092]
     bb8:	sub	w22, w8, #0x1
     bbc:	str	w22, [x19, #24]
     bc0:	b.eq	cf0 <unRLE_obuf_to_output_SMALL+0x40c>  // b.none
     bc4:	cmp	w22, #0x1
     bc8:	cset	w8, eq  // eq = none
     bcc:	and	w9, w0, #0xff
     bd0:	eor	w8, w9, w8
     bd4:	cmp	w8, w27
     bd8:	b.ne	cec <unRLE_obuf_to_output_SMALL+0x408>  // b.any
     bdc:	cmp	w21, w23
     be0:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     be4:	ldur	x1, [x29, #-8]
     be8:	mov	w0, w21
     bec:	mov	x24, x11
     bf0:	bl	6e4 <BZ2_indexIntoF>
     bf4:	ldr	x11, [sp, #8]
     bf8:	lsr	x8, x21, #1
     bfc:	lsl	w9, w24, #2
     c00:	ldrh	w20, [x25, x21, lsl #1]
     c04:	ldrb	w8, [x11, x8]
     c08:	and	x9, x9, #0x4
     c0c:	lsr	x8, x8, x9
     c10:	lsl	w8, w8, #16
     c14:	and	x8, x8, #0xf0000
     c18:	orr	x21, x8, x20
     c1c:	str	w21, [x19, #60]
     c20:	cbnz	w22, c44 <unRLE_obuf_to_output_SMALL+0x360>
     c24:	ldrsw	x8, [x19, #28]
     c28:	adrp	x9, 0 <BZ2_rNums>
     c2c:	add	x9, x9, #0x0
     c30:	ldr	w9, [x9, x8, lsl #2]
     c34:	add	w10, w8, #0x1
     c38:	cmp	w10, #0x200
     c3c:	csinc	w8, wzr, w8, eq  // eq = none
     c40:	stp	w9, w8, [x19, #24]
     c44:	ldr	w8, [x19, #24]
     c48:	and	w10, w0, #0xff
     c4c:	add	w9, w28, #0x4
     c50:	str	w9, [x19, #1092]
     c54:	sub	w22, w8, #0x1
     c58:	cmp	w22, #0x1
     c5c:	cset	w8, eq  // eq = none
     c60:	eor	w8, w10, w8
     c64:	add	w8, w8, #0x4
     c68:	cmp	w21, w23
     c6c:	str	w22, [x19, #24]
     c70:	str	w8, [x19, #16]
     c74:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     c78:	ldur	x1, [x29, #-8]
     c7c:	mov	w0, w21
     c80:	mov	x23, x11
     c84:	bl	6e4 <BZ2_indexIntoF>
     c88:	str	w0, [x19, #64]
     c8c:	lsr	x8, x21, #1
     c90:	ldrb	w8, [x23, x8]
     c94:	ldrh	w9, [x25, x21, lsl #1]
     c98:	ubfiz	w10, w20, #2, #1
     c9c:	lsr	w8, w8, w10
     ca0:	bfi	w9, w8, #16, #4
     ca4:	str	w9, [x19, #60]
     ca8:	cbnz	w22, ccc <unRLE_obuf_to_output_SMALL+0x3e8>
     cac:	ldrsw	x8, [x19, #28]
     cb0:	adrp	x9, 0 <BZ2_rNums>
     cb4:	add	x9, x9, #0x0
     cb8:	ldr	w9, [x9, x8, lsl #2]
     cbc:	add	w10, w8, #0x1
     cc0:	cmp	w10, #0x200
     cc4:	csinc	w8, wzr, w8, eq  // eq = none
     cc8:	stp	w9, w8, [x19, #24]
     ccc:	ldr	w8, [x19, #24]
     cd0:	add	w9, w28, #0x5
     cd4:	str	w9, [x19, #1092]
     cd8:	sub	w8, w8, #0x1
     cdc:	cmp	w8, #0x1
     ce0:	str	w8, [x19, #24]
     ce4:	cset	w8, eq  // eq = none
     ce8:	eor	w8, w0, w8
     cec:	str	w8, [x19, #64]
     cf0:	ldr	x8, [x19]
     cf4:	adrp	x12, 0 <BZ2_crc32Table>
     cf8:	add	x12, x12, #0x0
     cfc:	ldr	w9, [x8, #32]
     d00:	cbnz	w9, 948 <unRLE_obuf_to_output_SMALL+0x64>
     d04:	b	fb8 <unRLE_obuf_to_output_SMALL+0x6d4>
     d08:	cbz	w9, fb8 <unRLE_obuf_to_output_SMALL+0x6d4>
     d0c:	mov	w9, #0xfa50                	// #64080
     d10:	adrp	x12, 0 <BZ2_crc32Table>
     d14:	add	x1, x19, #0x448
     d18:	add	x9, x19, x9
     d1c:	add	x12, x12, #0x0
     d20:	str	x9, [sp, #16]
     d24:	stur	x1, [x29, #-8]
     d28:	b	d38 <unRLE_obuf_to_output_SMALL+0x454>
     d2c:	ldr	x8, [x19]
     d30:	ldr	w9, [x8, #32]
     d34:	cbz	w9, fb8 <unRLE_obuf_to_output_SMALL+0x6d4>
     d38:	ldr	w9, [x19, #16]
     d3c:	cbz	w9, da8 <unRLE_obuf_to_output_SMALL+0x4c4>
     d40:	ldrb	w9, [x19, #12]
     d44:	ldr	x8, [x8, #24]
     d48:	strb	w9, [x8]
     d4c:	ldr	w9, [x19, #3184]
     d50:	ldrb	w8, [x19, #12]
     d54:	ldr	w10, [x19, #16]
     d58:	eor	w8, w8, w9, lsr #24
     d5c:	ldr	w11, [x12, w8, uxtw #2]
     d60:	ldr	x8, [x19]
     d64:	sub	w10, w10, #0x1
     d68:	str	w10, [x19, #16]
     d6c:	eor	w9, w11, w9, lsl #8
     d70:	str	w9, [x19, #3184]
     d74:	ldr	x9, [x8, #24]
     d78:	ldp	w10, w11, [x8, #32]
     d7c:	add	x9, x9, #0x1
     d80:	str	x9, [x8, #24]
     d84:	sub	w9, w10, #0x1
     d88:	str	w9, [x8, #32]
     d8c:	adds	w9, w11, #0x1
     d90:	str	w9, [x8, #36]
     d94:	b.cc	d2c <unRLE_obuf_to_output_SMALL+0x448>  // b.lo, b.ul, b.last
     d98:	ldr	w9, [x8, #40]
     d9c:	add	w9, w9, #0x1
     da0:	str	w9, [x8, #40]
     da4:	b	d2c <unRLE_obuf_to_output_SMALL+0x448>
     da8:	ldr	x8, [sp, #16]
     dac:	ldr	w27, [x19, #1092]
     db0:	ldr	w22, [x8]
     db4:	add	w8, w22, #0x1
     db8:	cmp	w27, w8
     dbc:	b.eq	fb8 <unRLE_obuf_to_output_SMALL+0x6d4>  // b.none
     dc0:	mov	w0, #0x1                   	// #1
     dc4:	b.gt	fbc <unRLE_obuf_to_output_SMALL+0x6d8>
     dc8:	ldr	w8, [x19, #40]
     dcc:	ldp	w21, w26, [x19, #60]
     dd0:	mov	w9, #0x86a0                	// #34464
     dd4:	movk	w9, #0x1, lsl #16
     dd8:	mul	w24, w8, w9
     ddc:	cmp	w21, w24
     de0:	str	w0, [x19, #16]
     de4:	strb	w26, [x19, #12]
     de8:	b.cs	fbc <unRLE_obuf_to_output_SMALL+0x6d8>  // b.hs, b.nlast
     dec:	mov	w0, w21
     df0:	bl	6e4 <BZ2_indexIntoF>
     df4:	ldr	x28, [x19, #3168]
     df8:	lsr	x8, x21, #1
     dfc:	ldr	x23, [x19, #3160]
     e00:	lsl	w9, w21, #2
     e04:	ldrb	w8, [x28, x8]
     e08:	and	x9, x9, #0x4
     e0c:	ldrh	w25, [x23, x21, lsl #1]
     e10:	add	w20, w27, #0x1
     e14:	lsr	x8, x8, x9
     e18:	lsl	w8, w8, #16
     e1c:	and	x8, x8, #0xf0000
     e20:	cmp	w27, w22
     e24:	orr	x21, x8, x25
     e28:	str	w21, [x19, #60]
     e2c:	str	w20, [x19, #1092]
     e30:	b.eq	fa0 <unRLE_obuf_to_output_SMALL+0x6bc>  // b.none
     e34:	and	w8, w0, #0xff
     e38:	cmp	w8, w26
     e3c:	b.ne	f9c <unRLE_obuf_to_output_SMALL+0x6b8>  // b.any
     e40:	cmp	w21, w24
     e44:	mov	w8, #0x2                   	// #2
     e48:	str	w8, [x19, #16]
     e4c:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     e50:	ldur	x1, [x29, #-8]
     e54:	mov	w0, w21
     e58:	bl	6e4 <BZ2_indexIntoF>
     e5c:	lsr	x8, x21, #1
     e60:	ldrb	w8, [x28, x8]
     e64:	lsl	w9, w25, #2
     e68:	ldrh	w10, [x23, x21, lsl #1]
     e6c:	and	x9, x9, #0x4
     e70:	lsr	x8, x8, x9
     e74:	lsl	w8, w8, #16
     e78:	and	x8, x8, #0xf0000
     e7c:	add	w25, w27, #0x2
     e80:	cmp	w20, w22
     e84:	orr	x21, x8, x10
     e88:	str	w21, [x19, #60]
     e8c:	str	w25, [x19, #1092]
     e90:	b.eq	fa0 <unRLE_obuf_to_output_SMALL+0x6bc>  // b.none
     e94:	and	w8, w0, #0xff
     e98:	cmp	w8, w26
     e9c:	b.ne	f9c <unRLE_obuf_to_output_SMALL+0x6b8>  // b.any
     ea0:	cmp	w21, w24
     ea4:	mov	w8, #0x3                   	// #3
     ea8:	str	w8, [x19, #16]
     eac:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     eb0:	ldur	x1, [x29, #-8]
     eb4:	mov	w0, w21
     eb8:	mov	x20, x10
     ebc:	bl	6e4 <BZ2_indexIntoF>
     ec0:	lsr	x8, x21, #1
     ec4:	ldrb	w8, [x28, x8]
     ec8:	lsl	w9, w20, #2
     ecc:	ldrh	w11, [x23, x21, lsl #1]
     ed0:	and	x9, x9, #0x4
     ed4:	lsr	x8, x8, x9
     ed8:	lsl	w8, w8, #16
     edc:	and	x8, x8, #0xf0000
     ee0:	add	w10, w27, #0x3
     ee4:	cmp	w25, w22
     ee8:	orr	x21, x8, x11
     eec:	str	w21, [x19, #60]
     ef0:	str	w10, [x19, #1092]
     ef4:	b.eq	fa0 <unRLE_obuf_to_output_SMALL+0x6bc>  // b.none
     ef8:	and	w8, w0, #0xff
     efc:	cmp	w8, w26
     f00:	b.ne	f9c <unRLE_obuf_to_output_SMALL+0x6b8>  // b.any
     f04:	cmp	w21, w24
     f08:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     f0c:	ldur	x22, [x29, #-8]
     f10:	mov	w0, w21
     f14:	mov	x25, x11
     f18:	mov	x1, x22
     f1c:	bl	6e4 <BZ2_indexIntoF>
     f20:	lsr	x8, x21, #1
     f24:	ldrb	w8, [x28, x8]
     f28:	add	w9, w27, #0x4
     f2c:	ldrh	w20, [x23, x21, lsl #1]
     f30:	str	w9, [x19, #1092]
     f34:	lsl	w9, w25, #2
     f38:	and	x9, x9, #0x4
     f3c:	lsr	x8, x8, x9
     f40:	lsl	w8, w8, #16
     f44:	and	x8, x8, #0xf0000
     f48:	and	w10, w0, #0xff
     f4c:	orr	x21, x8, x20
     f50:	add	w10, w10, #0x4
     f54:	cmp	w21, w24
     f58:	str	w21, [x19, #60]
     f5c:	str	w10, [x19, #16]
     f60:	b.cs	fdc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.hs, b.nlast
     f64:	mov	w0, w21
     f68:	mov	x1, x22
     f6c:	bl	6e4 <BZ2_indexIntoF>
     f70:	str	w0, [x19, #64]
     f74:	lsr	x8, x21, #1
     f78:	ldrb	w8, [x28, x8]
     f7c:	ldrh	w9, [x23, x21, lsl #1]
     f80:	ubfiz	w10, w20, #2, #1
     f84:	add	w11, w27, #0x5
     f88:	lsr	w8, w8, w10
     f8c:	bfi	w9, w8, #16, #4
     f90:	str	w9, [x19, #60]
     f94:	str	w11, [x19, #1092]
     f98:	b	fa0 <unRLE_obuf_to_output_SMALL+0x6bc>
     f9c:	str	w8, [x19, #64]
     fa0:	ldr	x8, [x19]
     fa4:	ldur	x1, [x29, #-8]
     fa8:	adrp	x12, 0 <BZ2_crc32Table>
     fac:	add	x12, x12, #0x0
     fb0:	ldr	w9, [x8, #32]
     fb4:	cbnz	w9, d38 <unRLE_obuf_to_output_SMALL+0x454>
     fb8:	mov	w0, wzr
     fbc:	ldp	x20, x19, [sp, #112]
     fc0:	ldp	x22, x21, [sp, #96]
     fc4:	ldp	x24, x23, [sp, #80]
     fc8:	ldp	x26, x25, [sp, #64]
     fcc:	ldp	x28, x27, [sp, #48]
     fd0:	ldp	x29, x30, [sp, #32]
     fd4:	add	sp, sp, #0x80
     fd8:	ret
     fdc:	mov	w0, #0x1                   	// #1
     fe0:	b	fbc <unRLE_obuf_to_output_SMALL+0x6d8>

0000000000000fe4 <unRLE_obuf_to_output_FAST>:
     fe4:	str	x19, [sp, #-16]!
     fe8:	ldrb	w8, [x0, #20]
     fec:	cbz	w8, 12f4 <unRLE_obuf_to_output_FAST+0x310>
     ff0:	ldr	x8, [x0]
     ff4:	ldr	w9, [x8, #32]
     ff8:	cbz	w9, 12ec <unRLE_obuf_to_output_FAST+0x308>
     ffc:	mov	w9, #0x86a0                	// #34464
    1000:	mov	w13, #0xfa50                	// #64080
    1004:	adrp	x10, 0 <BZ2_rNums>
    1008:	adrp	x14, 0 <BZ2_crc32Table>
    100c:	movk	w9, #0x1, lsl #16
    1010:	add	x10, x10, #0x0
    1014:	mov	w11, #0x2                   	// #2
    1018:	mov	w12, #0x3                   	// #3
    101c:	add	x13, x0, x13
    1020:	add	x14, x14, #0x0
    1024:	b	1034 <unRLE_obuf_to_output_FAST+0x50>
    1028:	ldr	x8, [x0]
    102c:	ldr	w15, [x8, #32]
    1030:	cbz	w15, 12ec <unRLE_obuf_to_output_FAST+0x308>
    1034:	ldr	w15, [x0, #16]
    1038:	cbz	w15, 10a4 <unRLE_obuf_to_output_FAST+0xc0>
    103c:	ldrb	w15, [x0, #12]
    1040:	ldr	x8, [x8, #24]
    1044:	strb	w15, [x8]
    1048:	ldr	w15, [x0, #3184]
    104c:	ldrb	w8, [x0, #12]
    1050:	ldr	w16, [x0, #16]
    1054:	eor	w8, w8, w15, lsr #24
    1058:	ldr	w17, [x14, w8, uxtw #2]
    105c:	ldr	x8, [x0]
    1060:	sub	w16, w16, #0x1
    1064:	str	w16, [x0, #16]
    1068:	eor	w15, w17, w15, lsl #8
    106c:	str	w15, [x0, #3184]
    1070:	ldr	x15, [x8, #24]
    1074:	ldp	w16, w17, [x8, #32]
    1078:	add	x15, x15, #0x1
    107c:	str	x15, [x8, #24]
    1080:	sub	w15, w16, #0x1
    1084:	str	w15, [x8, #32]
    1088:	adds	w15, w17, #0x1
    108c:	str	w15, [x8, #36]
    1090:	b.cc	1028 <unRLE_obuf_to_output_FAST+0x44>  // b.lo, b.ul, b.last
    1094:	ldr	w15, [x8, #40]
    1098:	add	w15, w15, #0x1
    109c:	str	w15, [x8, #40]
    10a0:	b	1028 <unRLE_obuf_to_output_FAST+0x44>
    10a4:	ldr	w17, [x13]
    10a8:	ldr	w15, [x0, #1092]
    10ac:	add	w8, w17, #0x1
    10b0:	cmp	w15, w8
    10b4:	b.eq	12ec <unRLE_obuf_to_output_FAST+0x308>  // b.none
    10b8:	mov	w8, #0x1                   	// #1
    10bc:	b.gt	1504 <unRLE_obuf_to_output_FAST+0x520>
    10c0:	ldr	w16, [x0, #40]
    10c4:	ldp	w1, w18, [x0, #60]
    10c8:	str	w8, [x0, #16]
    10cc:	mul	w16, w16, w9
    10d0:	cmp	w1, w16
    10d4:	strb	w18, [x0, #12]
    10d8:	b.cs	1504 <unRLE_obuf_to_output_FAST+0x520>  // b.hs, b.nlast
    10dc:	ldr	x8, [x0, #3152]
    10e0:	ldr	w3, [x8, x1, lsl #2]
    10e4:	ldr	w1, [x0, #24]
    10e8:	lsr	x2, x3, #8
    10ec:	str	w2, [x0, #60]
    10f0:	cbnz	w1, 110c <unRLE_obuf_to_output_FAST+0x128>
    10f4:	ldrsw	x1, [x0, #28]
    10f8:	ldr	w4, [x10, x1, lsl #2]
    10fc:	add	w5, w1, #0x1
    1100:	cmp	w5, #0x200
    1104:	csinc	w1, wzr, w1, eq  // eq = none
    1108:	stp	w4, w1, [x0, #24]
    110c:	ldr	w4, [x0, #24]
    1110:	add	w1, w15, #0x1
    1114:	cmp	w15, w17
    1118:	str	w1, [x0, #1092]
    111c:	sub	w5, w4, #0x1
    1120:	str	w5, [x0, #24]
    1124:	b.eq	12cc <unRLE_obuf_to_output_FAST+0x2e8>  // b.none
    1128:	cmp	w5, #0x1
    112c:	cset	w4, eq  // eq = none
    1130:	and	w3, w3, #0xff
    1134:	eor	w3, w3, w4
    1138:	cmp	w3, w18
    113c:	b.ne	12c8 <unRLE_obuf_to_output_FAST+0x2e4>  // b.any
    1140:	cmp	w2, w16
    1144:	str	w11, [x0, #16]
    1148:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    114c:	ldr	w4, [x8, x2, lsl #2]
    1150:	lsr	x3, x4, #8
    1154:	str	w3, [x0, #60]
    1158:	cbnz	w5, 1174 <unRLE_obuf_to_output_FAST+0x190>
    115c:	ldrsw	x2, [x0, #28]
    1160:	ldr	w5, [x10, x2, lsl #2]
    1164:	add	w6, w2, #0x1
    1168:	cmp	w6, #0x200
    116c:	csinc	w2, wzr, w2, eq  // eq = none
    1170:	stp	w5, w2, [x0, #24]
    1174:	ldr	w5, [x0, #24]
    1178:	add	w2, w15, #0x2
    117c:	cmp	w1, w17
    1180:	str	w2, [x0, #1092]
    1184:	sub	w5, w5, #0x1
    1188:	str	w5, [x0, #24]
    118c:	b.eq	12cc <unRLE_obuf_to_output_FAST+0x2e8>  // b.none
    1190:	cmp	w5, #0x1
    1194:	cset	w1, eq  // eq = none
    1198:	and	w4, w4, #0xff
    119c:	eor	w1, w4, w1
    11a0:	cmp	w1, w18
    11a4:	b.ne	12dc <unRLE_obuf_to_output_FAST+0x2f8>  // b.any
    11a8:	cmp	w3, w16
    11ac:	str	w12, [x0, #16]
    11b0:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    11b4:	ldr	w3, [x8, x3, lsl #2]
    11b8:	lsr	x1, x3, #8
    11bc:	str	w1, [x0, #60]
    11c0:	cbnz	w5, 11dc <unRLE_obuf_to_output_FAST+0x1f8>
    11c4:	ldrsw	x4, [x0, #28]
    11c8:	ldr	w5, [x10, x4, lsl #2]
    11cc:	add	w6, w4, #0x1
    11d0:	cmp	w6, #0x200
    11d4:	csinc	w4, wzr, w4, eq  // eq = none
    11d8:	stp	w5, w4, [x0, #24]
    11dc:	ldr	w4, [x0, #24]
    11e0:	add	w5, w15, #0x3
    11e4:	cmp	w2, w17
    11e8:	str	w5, [x0, #1092]
    11ec:	sub	w2, w4, #0x1
    11f0:	str	w2, [x0, #24]
    11f4:	b.eq	12cc <unRLE_obuf_to_output_FAST+0x2e8>  // b.none
    11f8:	cmp	w2, #0x1
    11fc:	cset	w17, eq  // eq = none
    1200:	and	w3, w3, #0xff
    1204:	eor	w17, w3, w17
    1208:	cmp	w17, w18
    120c:	b.ne	12e4 <unRLE_obuf_to_output_FAST+0x300>  // b.any
    1210:	cmp	w1, w16
    1214:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    1218:	ldr	w18, [x8, x1, lsl #2]
    121c:	lsr	x17, x18, #8
    1220:	str	w17, [x0, #60]
    1224:	cbnz	w2, 1240 <unRLE_obuf_to_output_FAST+0x25c>
    1228:	ldrsw	x1, [x0, #28]
    122c:	ldr	w2, [x10, x1, lsl #2]
    1230:	add	w3, w1, #0x1
    1234:	cmp	w3, #0x200
    1238:	csinc	w1, wzr, w1, eq  // eq = none
    123c:	stp	w2, w1, [x0, #24]
    1240:	ldr	w1, [x0, #24]
    1244:	and	w3, w18, #0xff
    1248:	add	w2, w15, #0x4
    124c:	str	w2, [x0, #1092]
    1250:	sub	w18, w1, #0x1
    1254:	cmp	w18, #0x1
    1258:	cset	w1, eq  // eq = none
    125c:	eor	w1, w3, w1
    1260:	add	w1, w1, #0x4
    1264:	cmp	w17, w16
    1268:	str	w18, [x0, #24]
    126c:	str	w1, [x0, #16]
    1270:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    1274:	ldr	w16, [x8, x17, lsl #2]
    1278:	and	w8, w16, #0xff
    127c:	lsr	w16, w16, #8
    1280:	stp	w16, w8, [x0, #60]
    1284:	cbnz	w18, 12a0 <unRLE_obuf_to_output_FAST+0x2bc>
    1288:	ldrsw	x16, [x0, #28]
    128c:	ldr	w17, [x10, x16, lsl #2]
    1290:	add	w18, w16, #0x1
    1294:	cmp	w18, #0x200
    1298:	csinc	w16, wzr, w16, eq  // eq = none
    129c:	stp	w17, w16, [x0, #24]
    12a0:	ldr	w16, [x0, #24]
    12a4:	add	w15, w15, #0x5
    12a8:	str	w15, [x0, #1092]
    12ac:	sub	w16, w16, #0x1
    12b0:	cmp	w16, #0x1
    12b4:	str	w16, [x0, #24]
    12b8:	cset	w16, eq  // eq = none
    12bc:	eor	w8, w8, w16
    12c0:	str	w8, [x0, #64]
    12c4:	b	12cc <unRLE_obuf_to_output_FAST+0x2e8>
    12c8:	str	w3, [x0, #64]
    12cc:	ldr	x8, [x0]
    12d0:	ldr	w15, [x8, #32]
    12d4:	cbnz	w15, 1034 <unRLE_obuf_to_output_FAST+0x50>
    12d8:	b	12ec <unRLE_obuf_to_output_FAST+0x308>
    12dc:	str	w1, [x0, #64]
    12e0:	b	12cc <unRLE_obuf_to_output_FAST+0x2e8>
    12e4:	str	w17, [x0, #64]
    12e8:	b	12cc <unRLE_obuf_to_output_FAST+0x2e8>
    12ec:	mov	w8, wzr
    12f0:	b	1504 <unRLE_obuf_to_output_FAST+0x520>
    12f4:	ldr	x8, [x0]
    12f8:	mov	w11, #0xfa50                	// #64080
    12fc:	ldr	w15, [x0, x11]
    1300:	ldr	w12, [x0, #40]
    1304:	ldr	x11, [x8, #24]
    1308:	ldr	w8, [x8, #32]
    130c:	ldr	w9, [x0, #3184]
    1310:	ldrb	w2, [x0, #12]
    1314:	ldr	w3, [x0, #16]
    1318:	ldr	w14, [x0, #1092]
    131c:	ldr	x10, [x0, #3152]
    1320:	ldp	w13, w1, [x0, #60]
    1324:	mov	w17, #0x86a0                	// #34464
    1328:	movk	w17, #0x1, lsl #16
    132c:	adrp	x18, 0 <BZ2_crc32Table>
    1330:	add	w16, w15, #0x1
    1334:	mul	w17, w12, w17
    1338:	add	x18, x18, #0x0
    133c:	mov	w12, w8
    1340:	cmp	w3, #0x1
    1344:	b.lt	13ac <unRLE_obuf_to_output_FAST+0x3c8>  // b.tstop
    1348:	cbz	w12, 14b4 <unRLE_obuf_to_output_FAST+0x4d0>
    134c:	mov	w7, w3
    1350:	mov	x4, xzr
    1354:	and	w5, w2, #0xff
    1358:	mov	w6, w12
    135c:	sub	x7, x7, #0x1
    1360:	cmp	w7, w4
    1364:	b.eq	1388 <unRLE_obuf_to_output_FAST+0x3a4>  // b.none
    1368:	strb	w2, [x11, x4]
    136c:	eor	w19, w5, w9, lsr #24
    1370:	ldr	w19, [x18, w19, uxtw #2]
    1374:	add	x4, x4, #0x1
    1378:	cmp	w6, w4
    137c:	eor	w9, w19, w9, lsl #8
    1380:	b.ne	1360 <unRLE_obuf_to_output_FAST+0x37c>  // b.any
    1384:	b	14a8 <unRLE_obuf_to_output_FAST+0x4c4>
    1388:	sub	w12, w12, w4
    138c:	add	x11, x11, x4
    1390:	cbz	w12, 1510 <unRLE_obuf_to_output_FAST+0x52c>
    1394:	and	w3, w2, #0xff
    1398:	strb	w2, [x11], #1
    139c:	eor	w3, w3, w9, lsr #24
    13a0:	ldr	w3, [x18, w3, uxtw #2]
    13a4:	sub	w12, w12, #0x1
    13a8:	eor	w9, w3, w9, lsl #8
    13ac:	mov	w5, w14
    13b0:	mov	w4, w1
    13b4:	cmp	w14, w16
    13b8:	b.gt	1500 <unRLE_obuf_to_output_FAST+0x51c>
    13bc:	b.eq	1518 <unRLE_obuf_to_output_FAST+0x534>  // b.none
    13c0:	cmp	w13, w17
    13c4:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    13c8:	ldr	w14, [x10, w13, uxtw #2]
    13cc:	and	w1, w14, #0xff
    13d0:	lsr	x13, x14, #8
    13d4:	cmp	w1, w4
    13d8:	add	w14, w5, #0x1
    13dc:	b.ne	13ec <unRLE_obuf_to_output_FAST+0x408>  // b.any
    13e0:	cmp	w5, w15
    13e4:	b.ne	13f8 <unRLE_obuf_to_output_FAST+0x414>  // b.any
    13e8:	mov	w1, w4
    13ec:	mov	w2, w4
    13f0:	cbnz	w12, 1394 <unRLE_obuf_to_output_FAST+0x3b0>
    13f4:	b	1510 <unRLE_obuf_to_output_FAST+0x52c>
    13f8:	cmp	w13, w17
    13fc:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    1400:	ldr	w6, [x10, x13, lsl #2]
    1404:	add	w14, w5, #0x2
    1408:	cmp	w14, w16
    140c:	mov	w3, #0x2                   	// #2
    1410:	lsr	x13, x6, #8
    1414:	mov	w1, w4
    1418:	mov	w2, w4
    141c:	b.eq	1340 <unRLE_obuf_to_output_FAST+0x35c>  // b.none
    1420:	and	w1, w6, #0xff
    1424:	cmp	w1, w4
    1428:	mov	w3, #0x2                   	// #2
    142c:	mov	w2, w4
    1430:	b.ne	1340 <unRLE_obuf_to_output_FAST+0x35c>  // b.any
    1434:	cmp	w13, w17
    1438:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    143c:	ldr	w6, [x10, x13, lsl #2]
    1440:	add	w14, w5, #0x3
    1444:	cmp	w14, w16
    1448:	mov	w3, #0x3                   	// #3
    144c:	lsr	x13, x6, #8
    1450:	mov	w1, w4
    1454:	mov	w2, w4
    1458:	b.eq	1340 <unRLE_obuf_to_output_FAST+0x35c>  // b.none
    145c:	and	w1, w6, #0xff
    1460:	cmp	w1, w4
    1464:	mov	w3, #0x3                   	// #3
    1468:	mov	w2, w4
    146c:	b.ne	1340 <unRLE_obuf_to_output_FAST+0x35c>  // b.any
    1470:	cmp	w13, w17
    1474:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    1478:	ldr	w13, [x10, x13, lsl #2]
    147c:	lsr	x14, x13, #8
    1480:	cmp	w14, w17
    1484:	b.cs	1500 <unRLE_obuf_to_output_FAST+0x51c>  // b.hs, b.nlast
    1488:	ldr	w14, [x10, x14, lsl #2]
    148c:	and	w13, w13, #0xff
    1490:	add	w3, w13, #0x4
    1494:	mov	w2, w4
    1498:	and	w1, w14, #0xff
    149c:	lsr	w13, w14, #8
    14a0:	add	w14, w5, #0x5
    14a4:	b	1340 <unRLE_obuf_to_output_FAST+0x35c>
    14a8:	mov	w12, wzr
    14ac:	add	x11, x11, x4
    14b0:	sub	w3, w3, w4
    14b4:	ldr	x15, [x0]
    14b8:	sub	w8, w8, w12
    14bc:	ldr	w16, [x15, #36]
    14c0:	adds	w8, w16, w8
    14c4:	str	w8, [x15, #36]
    14c8:	b.cc	14d8 <unRLE_obuf_to_output_FAST+0x4f4>  // b.lo, b.ul, b.last
    14cc:	ldr	w8, [x15, #40]
    14d0:	add	w8, w8, #0x1
    14d4:	str	w8, [x15, #40]
    14d8:	mov	w8, wzr
    14dc:	str	w9, [x0, #3184]
    14e0:	strb	w2, [x0, #12]
    14e4:	str	w3, [x0, #16]
    14e8:	str	w14, [x0, #1092]
    14ec:	str	x10, [x0, #3152]
    14f0:	stp	w13, w1, [x0, #60]
    14f4:	str	x11, [x15, #24]
    14f8:	str	w12, [x15, #32]
    14fc:	b	1504 <unRLE_obuf_to_output_FAST+0x520>
    1500:	mov	w8, #0x1                   	// #1
    1504:	mov	w0, w8
    1508:	ldr	x19, [sp], #16
    150c:	ret
    1510:	mov	w3, #0x1                   	// #1
    1514:	b	14b4 <unRLE_obuf_to_output_FAST+0x4d0>
    1518:	mov	w3, wzr
    151c:	mov	w14, w5
    1520:	mov	w1, w4
    1524:	b	14b4 <unRLE_obuf_to_output_FAST+0x4d0>

0000000000001528 <BZ2_bzDecompressEnd>:
    1528:	stp	x29, x30, [sp, #-32]!
    152c:	stp	x20, x19, [sp, #16]
    1530:	mov	x29, sp
    1534:	cbz	x0, 1550 <BZ2_bzDecompressEnd+0x28>
    1538:	ldr	x20, [x0, #48]
    153c:	mov	x19, x0
    1540:	cbz	x20, 1550 <BZ2_bzDecompressEnd+0x28>
    1544:	ldr	x8, [x20]
    1548:	cmp	x8, x19
    154c:	b.eq	1560 <BZ2_bzDecompressEnd+0x38>  // b.none
    1550:	mov	w0, #0xfffffffe            	// #-2
    1554:	ldp	x20, x19, [sp, #16]
    1558:	ldp	x29, x30, [sp], #32
    155c:	ret
    1560:	ldr	x1, [x20, #3152]
    1564:	cbz	x1, 1570 <BZ2_bzDecompressEnd+0x48>
    1568:	ldp	x8, x0, [x19, #64]
    156c:	blr	x8
    1570:	ldr	x1, [x20, #3160]
    1574:	cbz	x1, 1580 <BZ2_bzDecompressEnd+0x58>
    1578:	ldp	x8, x0, [x19, #64]
    157c:	blr	x8
    1580:	ldr	x1, [x20, #3168]
    1584:	cbz	x1, 1590 <BZ2_bzDecompressEnd+0x68>
    1588:	ldp	x8, x0, [x19, #64]
    158c:	blr	x8
    1590:	ldp	x8, x0, [x19, #64]
    1594:	ldr	x1, [x19, #48]
    1598:	blr	x8
    159c:	mov	w0, wzr
    15a0:	str	xzr, [x19, #48]
    15a4:	b	1554 <BZ2_bzDecompressEnd+0x2c>

00000000000015a8 <BZ2_bzWriteOpen>:
    15a8:	stp	x29, x30, [sp, #-80]!
    15ac:	str	x25, [sp, #16]
    15b0:	stp	x24, x23, [sp, #32]
    15b4:	stp	x22, x21, [sp, #48]
    15b8:	stp	x20, x19, [sp, #64]
    15bc:	mov	x29, sp
    15c0:	mov	w23, w4
    15c4:	mov	w21, w3
    15c8:	mov	w22, w2
    15cc:	mov	x24, x1
    15d0:	mov	x19, x0
    15d4:	cbz	x0, 15dc <BZ2_bzWriteOpen+0x34>
    15d8:	str	wzr, [x19]
    15dc:	cmp	w21, #0x4
    15e0:	b.hi	1618 <BZ2_bzWriteOpen+0x70>  // b.pmore
    15e4:	cmp	w23, #0xfa
    15e8:	b.hi	1618 <BZ2_bzWriteOpen+0x70>  // b.pmore
    15ec:	cbz	x24, 1618 <BZ2_bzWriteOpen+0x70>
    15f0:	sub	w8, w22, #0x1
    15f4:	cmp	w8, #0x9
    15f8:	b.cs	1618 <BZ2_bzWriteOpen+0x70>  // b.hs, b.nlast
    15fc:	mov	x0, x24
    1600:	bl	0 <ferror>
    1604:	cbz	w0, 1644 <BZ2_bzWriteOpen+0x9c>
    1608:	mov	x20, xzr
    160c:	cbz	x19, 1628 <BZ2_bzWriteOpen+0x80>
    1610:	mov	w8, #0xfffffffa            	// #-6
    1614:	b	1624 <BZ2_bzWriteOpen+0x7c>
    1618:	mov	x20, xzr
    161c:	cbz	x19, 1628 <BZ2_bzWriteOpen+0x80>
    1620:	mov	w8, #0xfffffffe            	// #-2
    1624:	str	w8, [x19]
    1628:	mov	x0, x20
    162c:	ldp	x20, x19, [sp, #64]
    1630:	ldp	x22, x21, [sp, #48]
    1634:	ldp	x24, x23, [sp, #32]
    1638:	ldr	x25, [sp, #16]
    163c:	ldp	x29, x30, [sp], #80
    1640:	ret
    1644:	mov	w0, #0x13f0                	// #5104
    1648:	bl	0 <malloc>
    164c:	cbz	x0, 16c8 <BZ2_bzWriteOpen+0x120>
    1650:	mov	w8, #0x1394                	// #5012
    1654:	mov	x20, x0
    1658:	add	x25, x0, x8
    165c:	cbz	x19, 1664 <BZ2_bzWriteOpen+0xbc>
    1660:	str	wzr, [x19]
    1664:	mov	w8, #0x1398                	// #5016
    1668:	cmp	w23, #0x0
    166c:	mov	w9, #0x1e                  	// #30
    1670:	str	wzr, [x20, #5096]
    1674:	strb	wzr, [x25, #88]
    1678:	str	x24, [x20]
    167c:	mov	w24, #0x1                   	// #1
    1680:	movi	v0.2d, #0x0
    1684:	add	x0, x20, x8
    1688:	csel	w3, w9, w23, eq  // eq = none
    168c:	mov	w1, w22
    1690:	mov	w2, w21
    1694:	str	wzr, [x20, #5008]
    1698:	strb	w24, [x25]
    169c:	str	xzr, [x20, #5088]
    16a0:	str	q0, [x20, #5072]
    16a4:	bl	68 <BZ2_bzCompressInit>
    16a8:	cbz	w0, 16d8 <BZ2_bzWriteOpen+0x130>
    16ac:	cbz	x19, 16b4 <BZ2_bzWriteOpen+0x10c>
    16b0:	str	w0, [x19]
    16b4:	str	w0, [x20, #5096]
    16b8:	mov	x0, x20
    16bc:	bl	0 <free>
    16c0:	mov	x20, xzr
    16c4:	b	1628 <BZ2_bzWriteOpen+0x80>
    16c8:	mov	x20, xzr
    16cc:	cbz	x19, 1628 <BZ2_bzWriteOpen+0x80>
    16d0:	mov	w8, #0xfffffffd            	// #-3
    16d4:	b	1624 <BZ2_bzWriteOpen+0x7c>
    16d8:	str	wzr, [x20, #5024]
    16dc:	strb	w24, [x25, #88]
    16e0:	b	1628 <BZ2_bzWriteOpen+0x80>

00000000000016e4 <BZ2_bzWrite>:
    16e4:	stp	x29, x30, [sp, #-64]!
    16e8:	stp	x24, x23, [sp, #16]
    16ec:	stp	x22, x21, [sp, #32]
    16f0:	stp	x20, x19, [sp, #48]
    16f4:	mov	x29, sp
    16f8:	mov	w22, w3
    16fc:	mov	x21, x2
    1700:	mov	x19, x1
    1704:	mov	x20, x0
    1708:	cbz	x0, 1710 <BZ2_bzWrite+0x2c>
    170c:	str	wzr, [x20]
    1710:	cbz	x19, 1718 <BZ2_bzWrite+0x34>
    1714:	str	wzr, [x19, #5096]
    1718:	cbz	x19, 1758 <BZ2_bzWrite+0x74>
    171c:	cbz	x21, 1758 <BZ2_bzWrite+0x74>
    1720:	tbnz	w22, #31, 1758 <BZ2_bzWrite+0x74>
    1724:	mov	w8, #0x1394                	// #5012
    1728:	ldrb	w8, [x19, x8]
    172c:	cbz	w8, 1774 <BZ2_bzWrite+0x90>
    1730:	ldr	x0, [x19]
    1734:	bl	0 <ferror>
    1738:	cbz	w0, 1790 <BZ2_bzWrite+0xac>
    173c:	cbz	x20, 1748 <BZ2_bzWrite+0x64>
    1740:	mov	w8, #0xfffffffa            	// #-6
    1744:	str	w8, [x20]
    1748:	cbz	x19, 1838 <BZ2_bzWrite+0x154>
    174c:	mov	w8, #0xfffffffa            	// #-6
    1750:	str	w8, [x19, #5096]
    1754:	b	1838 <BZ2_bzWrite+0x154>
    1758:	cbz	x20, 1764 <BZ2_bzWrite+0x80>
    175c:	mov	w8, #0xfffffffe            	// #-2
    1760:	str	w8, [x20]
    1764:	cbz	x19, 1838 <BZ2_bzWrite+0x154>
    1768:	mov	w8, #0xfffffffe            	// #-2
    176c:	str	w8, [x19, #5096]
    1770:	b	1838 <BZ2_bzWrite+0x154>
    1774:	cbz	x20, 1780 <BZ2_bzWrite+0x9c>
    1778:	mov	w8, #0xffffffff            	// #-1
    177c:	str	w8, [x20]
    1780:	cbz	x19, 1838 <BZ2_bzWrite+0x154>
    1784:	mov	w8, #0xffffffff            	// #-1
    1788:	str	w8, [x19, #5096]
    178c:	b	1838 <BZ2_bzWrite+0x154>
    1790:	cbz	w22, 1814 <BZ2_bzWrite+0x130>
    1794:	mov	w8, #0x1398                	// #5016
    1798:	str	w22, [x19, #5024]
    179c:	str	x21, [x19, #5016]
    17a0:	add	x21, x19, #0x8
    17a4:	add	x22, x19, x8
    17a8:	mov	w23, #0x1388                	// #5000
    17ac:	b	17b8 <BZ2_bzWrite+0xd4>
    17b0:	ldr	w8, [x19, #5024]
    17b4:	cbz	w8, 1814 <BZ2_bzWrite+0x130>
    17b8:	mov	x0, x22
    17bc:	mov	w1, wzr
    17c0:	str	w23, [x19, #5048]
    17c4:	str	x21, [x19, #5040]
    17c8:	bl	2b0 <BZ2_bzCompress>
    17cc:	cmp	w0, #0x1
    17d0:	b.ne	1828 <BZ2_bzWrite+0x144>  // b.any
    17d4:	ldr	w8, [x19, #5048]
    17d8:	lsr	w9, w8, #3
    17dc:	cmp	w9, #0x270
    17e0:	b.hi	17b0 <BZ2_bzWrite+0xcc>  // b.pmore
    17e4:	ldr	x3, [x19]
    17e8:	sub	w24, w23, w8
    17ec:	sxtw	x2, w24
    17f0:	mov	w1, #0x1                   	// #1
    17f4:	mov	x0, x21
    17f8:	bl	0 <fwrite>
    17fc:	cmp	w24, w0
    1800:	b.ne	173c <BZ2_bzWrite+0x58>  // b.any
    1804:	ldr	x0, [x19]
    1808:	bl	0 <ferror>
    180c:	cbz	w0, 17b0 <BZ2_bzWrite+0xcc>
    1810:	b	173c <BZ2_bzWrite+0x58>
    1814:	cbz	x20, 181c <BZ2_bzWrite+0x138>
    1818:	str	wzr, [x20]
    181c:	cbz	x19, 1838 <BZ2_bzWrite+0x154>
    1820:	str	wzr, [x19, #5096]
    1824:	b	1838 <BZ2_bzWrite+0x154>
    1828:	cbz	x20, 1830 <BZ2_bzWrite+0x14c>
    182c:	str	w0, [x20]
    1830:	cbz	x19, 1838 <BZ2_bzWrite+0x154>
    1834:	str	w0, [x19, #5096]
    1838:	ldp	x20, x19, [sp, #48]
    183c:	ldp	x22, x21, [sp, #32]
    1840:	ldp	x24, x23, [sp, #16]
    1844:	ldp	x29, x30, [sp], #64
    1848:	ret

000000000000184c <BZ2_bzWriteClose>:
    184c:	stp	x29, x30, [sp, #-16]!
    1850:	mov	x29, sp
    1854:	mov	x5, x4
    1858:	mov	x4, xzr
    185c:	mov	x6, xzr
    1860:	bl	186c <BZ2_bzWriteClose64>
    1864:	ldp	x29, x30, [sp], #16
    1868:	ret

000000000000186c <BZ2_bzWriteClose64>:
    186c:	stp	x29, x30, [sp, #-96]!
    1870:	stp	x28, x27, [sp, #16]
    1874:	stp	x26, x25, [sp, #32]
    1878:	stp	x24, x23, [sp, #48]
    187c:	stp	x22, x21, [sp, #64]
    1880:	stp	x20, x19, [sp, #80]
    1884:	mov	x29, sp
    1888:	mov	x20, x0
    188c:	cbz	x1, 18d8 <BZ2_bzWriteClose64+0x6c>
    1890:	mov	w8, #0x1394                	// #5012
    1894:	ldrb	w8, [x1, x8]
    1898:	mov	x19, x1
    189c:	cbz	w8, 18e4 <BZ2_bzWriteClose64+0x78>
    18a0:	ldr	x0, [x19]
    18a4:	mov	x21, x6
    18a8:	mov	x22, x5
    18ac:	mov	x23, x4
    18b0:	mov	x24, x3
    18b4:	mov	w25, w2
    18b8:	bl	0 <ferror>
    18bc:	cbz	w0, 18fc <BZ2_bzWriteClose64+0x90>
    18c0:	cbz	x20, 18cc <BZ2_bzWriteClose64+0x60>
    18c4:	mov	w8, #0xfffffffa            	// #-6
    18c8:	str	w8, [x20]
    18cc:	mov	w8, #0xfffffffa            	// #-6
    18d0:	str	w8, [x19, #5096]
    18d4:	b	1988 <BZ2_bzWriteClose64+0x11c>
    18d8:	cbz	x20, 1988 <BZ2_bzWriteClose64+0x11c>
    18dc:	str	wzr, [x20]
    18e0:	b	1988 <BZ2_bzWriteClose64+0x11c>
    18e4:	cbz	x20, 18f0 <BZ2_bzWriteClose64+0x84>
    18e8:	mov	w8, #0xffffffff            	// #-1
    18ec:	str	w8, [x20]
    18f0:	mov	w8, #0xffffffff            	// #-1
    18f4:	str	w8, [x19, #5096]
    18f8:	b	1988 <BZ2_bzWriteClose64+0x11c>
    18fc:	cbz	x24, 1904 <BZ2_bzWriteClose64+0x98>
    1900:	str	wzr, [x24]
    1904:	cbz	x23, 190c <BZ2_bzWriteClose64+0xa0>
    1908:	str	wzr, [x23]
    190c:	cbz	x22, 1914 <BZ2_bzWriteClose64+0xa8>
    1910:	str	wzr, [x22]
    1914:	cbz	x21, 191c <BZ2_bzWriteClose64+0xb0>
    1918:	str	wzr, [x21]
    191c:	cbnz	w25, 1938 <BZ2_bzWriteClose64+0xcc>
    1920:	ldr	w8, [x19, #5096]
    1924:	cbz	w8, 19a4 <BZ2_bzWriteClose64+0x138>
    1928:	ldr	x25, [x19]
    192c:	mov	x0, x25
    1930:	bl	0 <ferror>
    1934:	cbz	w0, 1a2c <BZ2_bzWriteClose64+0x1c0>
    1938:	cbz	x24, 1944 <BZ2_bzWriteClose64+0xd8>
    193c:	ldr	w8, [x19, #5028]
    1940:	str	w8, [x24]
    1944:	cbz	x23, 1950 <BZ2_bzWriteClose64+0xe4>
    1948:	ldr	w8, [x19, #5032]
    194c:	str	w8, [x23]
    1950:	cbz	x22, 195c <BZ2_bzWriteClose64+0xf0>
    1954:	ldr	w8, [x19, #5052]
    1958:	str	w8, [x22]
    195c:	cbz	x21, 1968 <BZ2_bzWriteClose64+0xfc>
    1960:	ldr	w8, [x19, #5056]
    1964:	str	w8, [x21]
    1968:	cbz	x20, 1970 <BZ2_bzWriteClose64+0x104>
    196c:	str	wzr, [x20]
    1970:	mov	w8, #0x1398                	// #5016
    1974:	add	x0, x19, x8
    1978:	str	wzr, [x19, #5096]
    197c:	bl	590 <BZ2_bzCompressEnd>
    1980:	mov	x0, x19
    1984:	bl	0 <free>
    1988:	ldp	x20, x19, [sp, #80]
    198c:	ldp	x22, x21, [sp, #64]
    1990:	ldp	x24, x23, [sp, #48]
    1994:	ldp	x26, x25, [sp, #32]
    1998:	ldp	x28, x27, [sp, #16]
    199c:	ldp	x29, x30, [sp], #96
    19a0:	ret
    19a4:	mov	w8, #0x1398                	// #5016
    19a8:	add	x25, x19, #0x8
    19ac:	add	x26, x19, x8
    19b0:	mov	w28, #0x1388                	// #5000
    19b4:	b	19c0 <BZ2_bzWriteClose64+0x154>
    19b8:	cmp	w27, #0x4
    19bc:	b.eq	1928 <BZ2_bzWriteClose64+0xbc>  // b.none
    19c0:	mov	w1, #0x2                   	// #2
    19c4:	mov	x0, x26
    19c8:	str	w28, [x19, #5048]
    19cc:	str	x25, [x19, #5040]
    19d0:	bl	2b0 <BZ2_bzCompress>
    19d4:	sub	w8, w0, #0x3
    19d8:	mov	w27, w0
    19dc:	cmp	w8, #0x2
    19e0:	b.cs	1a44 <BZ2_bzWriteClose64+0x1d8>  // b.hs, b.nlast
    19e4:	ldr	w8, [x19, #5048]
    19e8:	lsr	w9, w8, #3
    19ec:	cmp	w9, #0x270
    19f0:	b.hi	19b8 <BZ2_bzWriteClose64+0x14c>  // b.pmore
    19f4:	ldr	x3, [x19]
    19f8:	mov	w9, #0x1388                	// #5000
    19fc:	sub	w28, w9, w8
    1a00:	sxtw	x2, w28
    1a04:	mov	w1, #0x1                   	// #1
    1a08:	mov	x0, x25
    1a0c:	bl	0 <fwrite>
    1a10:	cmp	w28, w0
    1a14:	mov	w28, #0x1388                	// #5000
    1a18:	b.ne	18c0 <BZ2_bzWriteClose64+0x54>  // b.any
    1a1c:	ldr	x0, [x19]
    1a20:	bl	0 <ferror>
    1a24:	cbz	w0, 19b8 <BZ2_bzWriteClose64+0x14c>
    1a28:	b	18c0 <BZ2_bzWriteClose64+0x54>
    1a2c:	mov	x0, x25
    1a30:	bl	0 <fflush>
    1a34:	ldr	x0, [x19]
    1a38:	bl	0 <ferror>
    1a3c:	cbnz	w0, 18c0 <BZ2_bzWriteClose64+0x54>
    1a40:	b	1938 <BZ2_bzWriteClose64+0xcc>
    1a44:	cbz	x20, 1a4c <BZ2_bzWriteClose64+0x1e0>
    1a48:	str	w27, [x20]
    1a4c:	str	w27, [x19, #5096]
    1a50:	b	1988 <BZ2_bzWriteClose64+0x11c>

0000000000001a54 <BZ2_bzReadOpen>:
    1a54:	stp	x29, x30, [sp, #-80]!
    1a58:	stp	x26, x25, [sp, #16]
    1a5c:	stp	x24, x23, [sp, #32]
    1a60:	stp	x22, x21, [sp, #48]
    1a64:	stp	x20, x19, [sp, #64]
    1a68:	mov	x29, sp
    1a6c:	mov	w24, w5
    1a70:	mov	x23, x4
    1a74:	mov	w21, w3
    1a78:	mov	w22, w2
    1a7c:	mov	x25, x1
    1a80:	mov	x19, x0
    1a84:	cbz	x0, 1a8c <BZ2_bzReadOpen+0x38>
    1a88:	str	wzr, [x19]
    1a8c:	cbz	x25, 1ab8 <BZ2_bzReadOpen+0x64>
    1a90:	cmp	w22, #0x4
    1a94:	b.hi	1ab8 <BZ2_bzReadOpen+0x64>  // b.pmore
    1a98:	cmp	w21, #0x1
    1a9c:	b.hi	1ab8 <BZ2_bzReadOpen+0x64>  // b.pmore
    1aa0:	cbnz	x23, 1aa8 <BZ2_bzReadOpen+0x54>
    1aa4:	cbnz	w24, 1ab8 <BZ2_bzReadOpen+0x64>
    1aa8:	cbz	x23, 1ae4 <BZ2_bzReadOpen+0x90>
    1aac:	mov	w8, #0x1389                	// #5001
    1ab0:	cmp	w24, w8
    1ab4:	b.cc	1ae4 <BZ2_bzReadOpen+0x90>  // b.lo, b.ul, b.last
    1ab8:	mov	x20, xzr
    1abc:	cbz	x19, 1ac8 <BZ2_bzReadOpen+0x74>
    1ac0:	mov	w8, #0xfffffffe            	// #-2
    1ac4:	str	w8, [x19]
    1ac8:	mov	x0, x20
    1acc:	ldp	x20, x19, [sp, #64]
    1ad0:	ldp	x22, x21, [sp, #48]
    1ad4:	ldp	x24, x23, [sp, #32]
    1ad8:	ldp	x26, x25, [sp, #16]
    1adc:	ldp	x29, x30, [sp], #80
    1ae0:	ret
    1ae4:	mov	x0, x25
    1ae8:	bl	0 <ferror>
    1aec:	cbz	w0, 1b00 <BZ2_bzReadOpen+0xac>
    1af0:	mov	x20, xzr
    1af4:	cbz	x19, 1ac8 <BZ2_bzReadOpen+0x74>
    1af8:	mov	w8, #0xfffffffa            	// #-6
    1afc:	b	1ac4 <BZ2_bzReadOpen+0x70>
    1b00:	mov	w0, #0x13f0                	// #5104
    1b04:	bl	0 <malloc>
    1b08:	cbz	x0, 1ba8 <BZ2_bzReadOpen+0x154>
    1b0c:	mov	w8, #0x1394                	// #5012
    1b10:	mov	x20, x0
    1b14:	add	x26, x0, x8
    1b18:	cbz	x19, 1b20 <BZ2_bzReadOpen+0xcc>
    1b1c:	str	wzr, [x19]
    1b20:	mov	w8, #0x1398                	// #5016
    1b24:	movi	v0.2d, #0x0
    1b28:	cmp	w24, #0x1
    1b2c:	add	x0, x20, x8
    1b30:	str	wzr, [x20, #5096]
    1b34:	strb	wzr, [x26, #88]
    1b38:	str	x25, [x20]
    1b3c:	str	wzr, [x20, #5008]
    1b40:	strb	wzr, [x26]
    1b44:	str	xzr, [x20, #5088]
    1b48:	str	q0, [x20, #5072]
    1b4c:	b.lt	1b7c <BZ2_bzReadOpen+0x128>  // b.tstop
    1b50:	add	x8, x20, #0x8
    1b54:	add	w9, w24, #0x1
    1b58:	ldrb	w10, [x23], #1
    1b5c:	ldrsw	x11, [x20, #5008]
    1b60:	sub	w9, w9, #0x1
    1b64:	cmp	w9, #0x1
    1b68:	strb	w10, [x8, x11]
    1b6c:	ldr	w10, [x20, #5008]
    1b70:	add	w10, w10, #0x1
    1b74:	str	w10, [x20, #5008]
    1b78:	b.gt	1b58 <BZ2_bzReadOpen+0x104>
    1b7c:	mov	w1, w22
    1b80:	mov	w2, w21
    1b84:	bl	610 <BZ2_bzDecompressInit>
    1b88:	cbz	w0, 1bb8 <BZ2_bzReadOpen+0x164>
    1b8c:	cbz	x19, 1b94 <BZ2_bzReadOpen+0x140>
    1b90:	str	w0, [x19]
    1b94:	str	w0, [x20, #5096]
    1b98:	mov	x0, x20
    1b9c:	bl	0 <free>
    1ba0:	mov	x20, xzr
    1ba4:	b	1ac8 <BZ2_bzReadOpen+0x74>
    1ba8:	mov	x20, xzr
    1bac:	cbz	x19, 1ac8 <BZ2_bzReadOpen+0x74>
    1bb0:	mov	w8, #0xfffffffd            	// #-3
    1bb4:	b	1ac4 <BZ2_bzReadOpen+0x70>
    1bb8:	ldr	w8, [x20, #5008]
    1bbc:	add	x9, x20, #0x8
    1bc0:	mov	w10, #0x1                   	// #1
    1bc4:	str	x9, [x20, #5016]
    1bc8:	str	w8, [x20, #5024]
    1bcc:	strb	w10, [x26, #88]
    1bd0:	b	1ac8 <BZ2_bzReadOpen+0x74>

0000000000001bd4 <BZ2_bzReadClose>:
    1bd4:	stp	x29, x30, [sp, #-32]!
    1bd8:	str	x19, [sp, #16]
    1bdc:	mov	x29, sp
    1be0:	mov	x19, x1
    1be4:	cbz	x0, 1bec <BZ2_bzReadClose+0x18>
    1be8:	str	wzr, [x0]
    1bec:	cbz	x19, 1bf4 <BZ2_bzReadClose+0x20>
    1bf0:	str	wzr, [x19, #5096]
    1bf4:	cbz	x19, 1c20 <BZ2_bzReadClose+0x4c>
    1bf8:	mov	w8, #0x1394                	// #5012
    1bfc:	add	x8, x19, x8
    1c00:	ldrb	w9, [x8]
    1c04:	cbz	w9, 1c38 <BZ2_bzReadClose+0x64>
    1c08:	cbz	x0, 1c14 <BZ2_bzReadClose+0x40>
    1c0c:	mov	w8, #0xffffffff            	// #-1
    1c10:	str	w8, [x0]
    1c14:	mov	w8, #0xffffffff            	// #-1
    1c18:	str	w8, [x19, #5096]
    1c1c:	b	1c54 <BZ2_bzReadClose+0x80>
    1c20:	cbz	x0, 1c28 <BZ2_bzReadClose+0x54>
    1c24:	str	wzr, [x0]
    1c28:	cbz	x19, 1c54 <BZ2_bzReadClose+0x80>
    1c2c:	mov	w8, #0x13e8                	// #5096
    1c30:	str	wzr, [x8]
    1c34:	b	1c54 <BZ2_bzReadClose+0x80>
    1c38:	ldrb	w8, [x8, #88]
    1c3c:	cbz	w8, 1c4c <BZ2_bzReadClose+0x78>
    1c40:	mov	w8, #0x1398                	// #5016
    1c44:	add	x0, x19, x8
    1c48:	bl	1528 <BZ2_bzDecompressEnd>
    1c4c:	mov	x0, x19
    1c50:	bl	0 <free>
    1c54:	ldr	x19, [sp, #16]
    1c58:	ldp	x29, x30, [sp], #32
    1c5c:	ret

0000000000001c60 <BZ2_bzRead>:
    1c60:	stp	x29, x30, [sp, #-64]!
    1c64:	stp	x24, x23, [sp, #16]
    1c68:	stp	x22, x21, [sp, #32]
    1c6c:	stp	x20, x19, [sp, #48]
    1c70:	mov	x29, sp
    1c74:	mov	w19, w3
    1c78:	mov	x20, x1
    1c7c:	mov	x21, x0
    1c80:	cbz	x0, 1c88 <BZ2_bzRead+0x28>
    1c84:	str	wzr, [x21]
    1c88:	cbz	x20, 1c90 <BZ2_bzRead+0x30>
    1c8c:	str	wzr, [x20, #5096]
    1c90:	cbz	x20, 1cc4 <BZ2_bzRead+0x64>
    1c94:	cbz	x2, 1cc4 <BZ2_bzRead+0x64>
    1c98:	tbnz	w19, #31, 1cc4 <BZ2_bzRead+0x64>
    1c9c:	mov	w8, #0x1394                	// #5012
    1ca0:	ldrb	w8, [x20, x8]
    1ca4:	cbz	w8, 1cf8 <BZ2_bzRead+0x98>
    1ca8:	cbz	x21, 1cb4 <BZ2_bzRead+0x54>
    1cac:	mov	w8, #0xffffffff            	// #-1
    1cb0:	str	w8, [x21]
    1cb4:	mov	w19, wzr
    1cb8:	cbz	x20, 1ce0 <BZ2_bzRead+0x80>
    1cbc:	mov	w8, #0xffffffff            	// #-1
    1cc0:	b	1cdc <BZ2_bzRead+0x7c>
    1cc4:	cbz	x21, 1cd0 <BZ2_bzRead+0x70>
    1cc8:	mov	w8, #0xfffffffe            	// #-2
    1ccc:	str	w8, [x21]
    1cd0:	mov	w19, wzr
    1cd4:	cbz	x20, 1ce0 <BZ2_bzRead+0x80>
    1cd8:	mov	w8, #0xfffffffe            	// #-2
    1cdc:	str	w8, [x20, #5096]
    1ce0:	mov	w0, w19
    1ce4:	ldp	x20, x19, [sp, #48]
    1ce8:	ldp	x22, x21, [sp, #32]
    1cec:	ldp	x24, x23, [sp, #16]
    1cf0:	ldp	x29, x30, [sp], #64
    1cf4:	ret
    1cf8:	cbz	w19, 1dc4 <BZ2_bzRead+0x164>
    1cfc:	mov	w8, #0x1398                	// #5016
    1d00:	add	x22, x20, x8
    1d04:	add	x23, x20, #0x8
    1d08:	str	w19, [x20, #5048]
    1d0c:	str	x2, [x20, #5040]
    1d10:	ldr	x24, [x20]
    1d14:	mov	x0, x24
    1d18:	bl	0 <ferror>
    1d1c:	cbnz	w0, 1e00 <BZ2_bzRead+0x1a0>
    1d20:	ldr	w8, [x20, #5024]
    1d24:	cbnz	w8, 1d6c <BZ2_bzRead+0x10c>
    1d28:	mov	x0, x24
    1d2c:	bl	1e68 <myfeof>
    1d30:	tst	w0, #0xff
    1d34:	b.ne	1d6c <BZ2_bzRead+0x10c>  // b.any
    1d38:	ldr	x3, [x20]
    1d3c:	mov	w1, #0x1                   	// #1
    1d40:	mov	w2, #0x1388                	// #5000
    1d44:	mov	x0, x23
    1d48:	bl	0 <fread>
    1d4c:	ldr	x8, [x20]
    1d50:	mov	x24, x0
    1d54:	mov	x0, x8
    1d58:	bl	0 <ferror>
    1d5c:	cbnz	w0, 1e34 <BZ2_bzRead+0x1d4>
    1d60:	str	w24, [x20, #5008]
    1d64:	str	w24, [x20, #5024]
    1d68:	str	x23, [x20, #5016]
    1d6c:	mov	x0, x22
    1d70:	bl	718 <BZ2_bzDecompress>
    1d74:	mov	w24, w0
    1d78:	tst	w0, #0xfffffffb
    1d7c:	b.ne	1e1c <BZ2_bzRead+0x1bc>  // b.any
    1d80:	cbnz	w24, 1da4 <BZ2_bzRead+0x144>
    1d84:	ldr	x0, [x20]
    1d88:	bl	1e68 <myfeof>
    1d8c:	tst	w0, #0xff
    1d90:	b.eq	1da4 <BZ2_bzRead+0x144>  // b.none
    1d94:	ldr	w8, [x20, #5024]
    1d98:	cbnz	w8, 1da4 <BZ2_bzRead+0x144>
    1d9c:	ldr	w8, [x20, #5048]
    1da0:	cbnz	w8, 1e4c <BZ2_bzRead+0x1ec>
    1da4:	cmp	w24, #0x4
    1da8:	b.eq	1ddc <BZ2_bzRead+0x17c>  // b.none
    1dac:	ldr	w8, [x20, #5048]
    1db0:	cbnz	w8, 1d10 <BZ2_bzRead+0xb0>
    1db4:	cbz	x21, 1dbc <BZ2_bzRead+0x15c>
    1db8:	str	wzr, [x21]
    1dbc:	cbnz	x20, 1dd4 <BZ2_bzRead+0x174>
    1dc0:	b	1ce0 <BZ2_bzRead+0x80>
    1dc4:	cbz	x21, 1dcc <BZ2_bzRead+0x16c>
    1dc8:	str	wzr, [x21]
    1dcc:	mov	w19, wzr
    1dd0:	cbz	x20, 1ce0 <BZ2_bzRead+0x80>
    1dd4:	str	wzr, [x20, #5096]
    1dd8:	b	1ce0 <BZ2_bzRead+0x80>
    1ddc:	cbz	x21, 1de8 <BZ2_bzRead+0x188>
    1de0:	mov	w8, #0x4                   	// #4
    1de4:	str	w8, [x21]
    1de8:	cbz	x20, 1df4 <BZ2_bzRead+0x194>
    1dec:	mov	w8, #0x4                   	// #4
    1df0:	str	w8, [x20, #5096]
    1df4:	ldr	w8, [x20, #5048]
    1df8:	sub	w19, w19, w8
    1dfc:	b	1ce0 <BZ2_bzRead+0x80>
    1e00:	cbz	x21, 1e0c <BZ2_bzRead+0x1ac>
    1e04:	mov	w8, #0xfffffffa            	// #-6
    1e08:	str	w8, [x21]
    1e0c:	cbz	x20, 1e44 <BZ2_bzRead+0x1e4>
    1e10:	mov	w8, #0xfffffffa            	// #-6
    1e14:	mov	w19, wzr
    1e18:	b	1cdc <BZ2_bzRead+0x7c>
    1e1c:	cbz	x21, 1e24 <BZ2_bzRead+0x1c4>
    1e20:	str	w24, [x21]
    1e24:	mov	w19, wzr
    1e28:	cbz	x20, 1ce0 <BZ2_bzRead+0x80>
    1e2c:	str	w24, [x20, #5096]
    1e30:	b	1ce0 <BZ2_bzRead+0x80>
    1e34:	cbz	x21, 1e40 <BZ2_bzRead+0x1e0>
    1e38:	mov	w8, #0xfffffffa            	// #-6
    1e3c:	str	w8, [x21]
    1e40:	cbnz	x20, 1e10 <BZ2_bzRead+0x1b0>
    1e44:	mov	w19, wzr
    1e48:	b	1ce0 <BZ2_bzRead+0x80>
    1e4c:	cbz	x21, 1e58 <BZ2_bzRead+0x1f8>
    1e50:	mov	w8, #0xfffffff9            	// #-7
    1e54:	str	w8, [x21]
    1e58:	mov	w19, wzr
    1e5c:	cbz	x20, 1ce0 <BZ2_bzRead+0x80>
    1e60:	mov	w8, #0xfffffff9            	// #-7
    1e64:	b	1cdc <BZ2_bzRead+0x7c>

0000000000001e68 <myfeof>:
    1e68:	stp	x29, x30, [sp, #-32]!
    1e6c:	str	x19, [sp, #16]
    1e70:	mov	x29, sp
    1e74:	mov	x19, x0
    1e78:	bl	0 <fgetc>
    1e7c:	cmn	w0, #0x1
    1e80:	b.eq	1e94 <myfeof+0x2c>  // b.none
    1e84:	mov	x1, x19
    1e88:	bl	0 <ungetc>
    1e8c:	mov	w0, wzr
    1e90:	b	1e98 <myfeof+0x30>
    1e94:	mov	w0, #0x1                   	// #1
    1e98:	ldr	x19, [sp, #16]
    1e9c:	ldp	x29, x30, [sp], #32
    1ea0:	ret

0000000000001ea4 <BZ2_bzReadGetUnused>:
    1ea4:	cbz	x1, 1edc <BZ2_bzReadGetUnused+0x38>
    1ea8:	ldr	w8, [x1, #5096]
    1eac:	cmp	w8, #0x4
    1eb0:	b.ne	1eec <BZ2_bzReadGetUnused+0x48>  // b.any
    1eb4:	cbz	x2, 1f04 <BZ2_bzReadGetUnused+0x60>
    1eb8:	cbz	x3, 1f04 <BZ2_bzReadGetUnused+0x60>
    1ebc:	cbz	x0, 1ec4 <BZ2_bzReadGetUnused+0x20>
    1ec0:	str	wzr, [x0]
    1ec4:	ldr	w8, [x1, #5024]
    1ec8:	str	wzr, [x1, #5096]
    1ecc:	str	w8, [x3]
    1ed0:	ldr	x8, [x1, #5016]
    1ed4:	str	x8, [x2]
    1ed8:	ret
    1edc:	cbz	x0, 1ed8 <BZ2_bzReadGetUnused+0x34>
    1ee0:	mov	w8, #0xfffffffe            	// #-2
    1ee4:	str	w8, [x0]
    1ee8:	ret
    1eec:	cbz	x0, 1ef8 <BZ2_bzReadGetUnused+0x54>
    1ef0:	mov	w8, #0xffffffff            	// #-1
    1ef4:	str	w8, [x0]
    1ef8:	mov	w8, #0xffffffff            	// #-1
    1efc:	str	w8, [x1, #5096]
    1f00:	ret
    1f04:	cbz	x0, 1f10 <BZ2_bzReadGetUnused+0x6c>
    1f08:	mov	w8, #0xfffffffe            	// #-2
    1f0c:	str	w8, [x0]
    1f10:	mov	w8, #0xfffffffe            	// #-2
    1f14:	str	w8, [x1, #5096]
    1f18:	ret

0000000000001f1c <BZ2_bzBuffToBuffCompress>:
    1f1c:	sub	sp, sp, #0x90
    1f20:	stp	x29, x30, [sp, #80]
    1f24:	str	x23, [sp, #96]
    1f28:	stp	x22, x21, [sp, #112]
    1f2c:	stp	x20, x19, [sp, #128]
    1f30:	add	x29, sp, #0x50
    1f34:	cmp	w6, #0xfa
    1f38:	mov	w20, #0xfffffffe            	// #-2
    1f3c:	b.hi	1f9c <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    1f40:	cmp	w5, #0x4
    1f44:	b.hi	1f9c <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    1f48:	mov	x23, x0
    1f4c:	cbz	x0, 1f9c <BZ2_bzBuffToBuffCompress+0x80>
    1f50:	mov	x19, x1
    1f54:	cbz	x1, 1f9c <BZ2_bzBuffToBuffCompress+0x80>
    1f58:	mov	x22, x2
    1f5c:	cbz	x2, 1f9c <BZ2_bzBuffToBuffCompress+0x80>
    1f60:	sub	w8, w4, #0x1
    1f64:	cmp	w8, #0x8
    1f68:	b.hi	1f9c <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    1f6c:	cmp	w6, #0x0
    1f70:	mov	w8, #0x1e                  	// #30
    1f74:	mov	w21, w3
    1f78:	csel	w3, w8, w6, eq  // eq = none
    1f7c:	mov	x0, sp
    1f80:	mov	w1, w4
    1f84:	mov	w2, w5
    1f88:	stp	xzr, xzr, [sp, #56]
    1f8c:	str	xzr, [sp, #72]
    1f90:	bl	68 <BZ2_bzCompressInit>
    1f94:	mov	w20, w0
    1f98:	cbz	w0, 1fb8 <BZ2_bzBuffToBuffCompress+0x9c>
    1f9c:	mov	w0, w20
    1fa0:	ldp	x20, x19, [sp, #128]
    1fa4:	ldp	x22, x21, [sp, #112]
    1fa8:	ldr	x23, [sp, #96]
    1fac:	ldp	x29, x30, [sp, #80]
    1fb0:	add	sp, sp, #0x90
    1fb4:	ret
    1fb8:	str	x22, [sp]
    1fbc:	str	x23, [sp, #24]
    1fc0:	str	w21, [sp, #8]
    1fc4:	ldr	w8, [x19]
    1fc8:	mov	x0, sp
    1fcc:	mov	w1, #0x2                   	// #2
    1fd0:	str	w8, [sp, #32]
    1fd4:	bl	2b0 <BZ2_bzCompress>
    1fd8:	cmp	w0, #0x3
    1fdc:	b.eq	200c <BZ2_bzBuffToBuffCompress+0xf0>  // b.none
    1fe0:	mov	w20, w0
    1fe4:	cmp	w0, #0x4
    1fe8:	b.ne	201c <BZ2_bzBuffToBuffCompress+0x100>  // b.any
    1fec:	ldr	w8, [sp, #32]
    1ff0:	ldr	w9, [x19]
    1ff4:	mov	x0, sp
    1ff8:	sub	w8, w9, w8
    1ffc:	str	w8, [x19]
    2000:	bl	590 <BZ2_bzCompressEnd>
    2004:	mov	w20, wzr
    2008:	b	1f9c <BZ2_bzBuffToBuffCompress+0x80>
    200c:	mov	x0, sp
    2010:	bl	590 <BZ2_bzCompressEnd>
    2014:	mov	w20, #0xfffffff8            	// #-8
    2018:	b	1f9c <BZ2_bzBuffToBuffCompress+0x80>
    201c:	mov	x0, sp
    2020:	bl	590 <BZ2_bzCompressEnd>
    2024:	b	1f9c <BZ2_bzBuffToBuffCompress+0x80>

0000000000002028 <BZ2_bzBuffToBuffDecompress>:
    2028:	sub	sp, sp, #0x90
    202c:	stp	x29, x30, [sp, #80]
    2030:	str	x23, [sp, #96]
    2034:	stp	x22, x21, [sp, #112]
    2038:	stp	x20, x19, [sp, #128]
    203c:	add	x29, sp, #0x50
    2040:	mov	w20, #0xfffffffe            	// #-2
    2044:	cbz	x0, 2094 <BZ2_bzBuffToBuffDecompress+0x6c>
    2048:	mov	x19, x1
    204c:	cbz	x1, 2094 <BZ2_bzBuffToBuffDecompress+0x6c>
    2050:	mov	x22, x2
    2054:	cbz	x2, 2094 <BZ2_bzBuffToBuffDecompress+0x6c>
    2058:	cmp	w4, #0x1
    205c:	mov	w20, #0xfffffffe            	// #-2
    2060:	b.hi	2094 <BZ2_bzBuffToBuffDecompress+0x6c>  // b.pmore
    2064:	cmp	w5, #0x4
    2068:	b.hi	2094 <BZ2_bzBuffToBuffDecompress+0x6c>  // b.pmore
    206c:	mov	x23, x0
    2070:	mov	x0, sp
    2074:	mov	w1, w5
    2078:	mov	w2, w4
    207c:	mov	w21, w3
    2080:	stp	xzr, xzr, [sp, #56]
    2084:	str	xzr, [sp, #72]
    2088:	bl	610 <BZ2_bzDecompressInit>
    208c:	mov	w20, w0
    2090:	cbz	w0, 20b0 <BZ2_bzBuffToBuffDecompress+0x88>
    2094:	mov	w0, w20
    2098:	ldp	x20, x19, [sp, #128]
    209c:	ldp	x22, x21, [sp, #112]
    20a0:	ldr	x23, [sp, #96]
    20a4:	ldp	x29, x30, [sp, #80]
    20a8:	add	sp, sp, #0x90
    20ac:	ret
    20b0:	str	x22, [sp]
    20b4:	str	x23, [sp, #24]
    20b8:	str	w21, [sp, #8]
    20bc:	ldr	w8, [x19]
    20c0:	mov	x0, sp
    20c4:	str	w8, [sp, #32]
    20c8:	bl	718 <BZ2_bzDecompress>
    20cc:	cbz	w0, 20fc <BZ2_bzBuffToBuffDecompress+0xd4>
    20d0:	mov	w20, w0
    20d4:	cmp	w0, #0x4
    20d8:	b.ne	2118 <BZ2_bzBuffToBuffDecompress+0xf0>  // b.any
    20dc:	ldr	w8, [sp, #32]
    20e0:	ldr	w9, [x19]
    20e4:	mov	x0, sp
    20e8:	sub	w8, w9, w8
    20ec:	str	w8, [x19]
    20f0:	bl	1528 <BZ2_bzDecompressEnd>
    20f4:	mov	w20, wzr
    20f8:	b	2094 <BZ2_bzBuffToBuffDecompress+0x6c>
    20fc:	ldr	w19, [sp, #32]
    2100:	mov	x0, sp
    2104:	bl	1528 <BZ2_bzDecompressEnd>
    2108:	cmp	w19, #0x0
    210c:	mov	w8, #0xfffffff8            	// #-8
    2110:	cinc	w20, w8, ne  // ne = any
    2114:	b	2094 <BZ2_bzBuffToBuffDecompress+0x6c>
    2118:	mov	x0, sp
    211c:	bl	1528 <BZ2_bzDecompressEnd>
    2120:	b	2094 <BZ2_bzBuffToBuffDecompress+0x6c>

0000000000002124 <BZ2_bzopen>:
    2124:	stp	x29, x30, [sp, #-16]!
    2128:	mov	x29, sp
    212c:	mov	x2, x1
    2130:	mov	w1, #0xffffffff            	// #-1
    2134:	mov	w3, wzr
    2138:	bl	2144 <bzopen_or_bzdopen>
    213c:	ldp	x29, x30, [sp], #16
    2140:	ret

0000000000002144 <bzopen_or_bzdopen>:
    2144:	stp	x29, x30, [sp, #-96]!
    2148:	str	x28, [sp, #16]
    214c:	stp	x26, x25, [sp, #32]
    2150:	stp	x24, x23, [sp, #48]
    2154:	stp	x22, x21, [sp, #64]
    2158:	stp	x20, x19, [sp, #80]
    215c:	mov	x29, sp
    2160:	sub	sp, sp, #0x1, lsl #12
    2164:	sub	sp, sp, #0x3a0
    2168:	strh	wzr, [sp, #16]
    216c:	str	xzr, [sp, #8]
    2170:	cbz	x2, 2304 <bzopen_or_bzdopen+0x1c0>
    2174:	mov	w22, w3
    2178:	mov	x23, x2
    217c:	mov	w21, w1
    2180:	mov	x20, x0
    2184:	mov	w25, wzr
    2188:	mov	w19, wzr
    218c:	mov	w24, #0x9                   	// #9
    2190:	b	219c <bzopen_or_bzdopen+0x58>
    2194:	mov	w19, #0x1                   	// #1
    2198:	add	x23, x23, #0x1
    219c:	ldrb	w26, [x23]
    21a0:	cmp	w26, #0x72
    21a4:	b.le	21c4 <bzopen_or_bzdopen+0x80>
    21a8:	cmp	w26, #0x73
    21ac:	b.eq	2194 <bzopen_or_bzdopen+0x50>  // b.none
    21b0:	cmp	w26, #0x77
    21b4:	b.ne	21d8 <bzopen_or_bzdopen+0x94>  // b.any
    21b8:	mov	w25, #0x1                   	// #1
    21bc:	add	x23, x23, #0x1
    21c0:	b	219c <bzopen_or_bzdopen+0x58>
    21c4:	b.ne	21d4 <bzopen_or_bzdopen+0x90>  // b.any
    21c8:	mov	w25, wzr
    21cc:	add	x23, x23, #0x1
    21d0:	b	219c <bzopen_or_bzdopen+0x58>
    21d4:	cbz	w26, 21f8 <bzopen_or_bzdopen+0xb4>
    21d8:	bl	0 <__ctype_b_loc>
    21dc:	ldr	x8, [x0]
    21e0:	sub	w9, w26, #0x30
    21e4:	add	x23, x23, #0x1
    21e8:	ldrh	w8, [x8, w26, uxtw #1]
    21ec:	tst	w8, #0x800
    21f0:	csel	w24, w24, w9, eq  // eq = none
    21f4:	b	219c <bzopen_or_bzdopen+0x58>
    21f8:	add	x0, sp, #0x8
    21fc:	add	x23, sp, #0x8
    2200:	bl	0 <strlen>
    2204:	cmp	w25, #0x0
    2208:	mov	w8, #0x72                  	// #114
    220c:	mov	w9, #0x77                  	// #119
    2210:	csel	w8, w9, w8, ne  // ne = any
    2214:	strh	w8, [x23, x0]
    2218:	add	x0, sp, #0x8
    221c:	bl	0 <strlen>
    2220:	mov	w8, #0x62                  	// #98
    2224:	strh	w8, [x23, x0]
    2228:	cbz	w22, 2244 <bzopen_or_bzdopen+0x100>
    222c:	add	x1, sp, #0x8
    2230:	mov	w0, w21
    2234:	bl	0 <fdopen>
    2238:	mov	x20, x0
    223c:	cbnz	x20, 2288 <bzopen_or_bzdopen+0x144>
    2240:	b	2304 <bzopen_or_bzdopen+0x1c0>
    2244:	cbz	x20, 2268 <bzopen_or_bzdopen+0x124>
    2248:	ldrb	w8, [x20]
    224c:	cbz	w8, 2268 <bzopen_or_bzdopen+0x124>
    2250:	add	x1, sp, #0x8
    2254:	mov	x0, x20
    2258:	bl	0 <fopen64>
    225c:	mov	x20, x0
    2260:	cbnz	x20, 2288 <bzopen_or_bzdopen+0x144>
    2264:	b	2304 <bzopen_or_bzdopen+0x1c0>
    2268:	adrp	x8, 0 <stdout>
    226c:	adrp	x9, 0 <stdin>
    2270:	add	x8, x8, #0x0
    2274:	add	x9, x9, #0x0
    2278:	cmp	w25, #0x0
    227c:	csel	x8, x8, x9, ne  // ne = any
    2280:	ldr	x20, [x8]
    2284:	cbz	x20, 2304 <bzopen_or_bzdopen+0x1c0>
    2288:	cbz	w25, 22bc <bzopen_or_bzdopen+0x178>
    228c:	cmp	w24, #0x1
    2290:	csinc	w8, w24, wzr, gt
    2294:	cmp	w8, #0x9
    2298:	mov	w9, #0x9                   	// #9
    229c:	csel	w2, w8, w9, lt  // lt = tstop
    22a0:	add	x0, x29, #0x1c
    22a4:	mov	w4, #0x1e                  	// #30
    22a8:	mov	x1, x20
    22ac:	mov	w3, wzr
    22b0:	bl	15a8 <BZ2_bzWriteOpen>
    22b4:	cbnz	x0, 2308 <bzopen_or_bzdopen+0x1c4>
    22b8:	b	22dc <bzopen_or_bzdopen+0x198>
    22bc:	add	x0, x29, #0x1c
    22c0:	add	x4, sp, #0x18
    22c4:	mov	x1, x20
    22c8:	mov	w2, wzr
    22cc:	mov	w3, w19
    22d0:	mov	w5, wzr
    22d4:	bl	1a54 <BZ2_bzReadOpen>
    22d8:	cbnz	x0, 2308 <bzopen_or_bzdopen+0x1c4>
    22dc:	adrp	x8, 0 <stdin>
    22e0:	ldr	x8, [x8]
    22e4:	cmp	x20, x8
    22e8:	b.eq	2308 <bzopen_or_bzdopen+0x1c4>  // b.none
    22ec:	adrp	x8, 0 <stdout>
    22f0:	ldr	x8, [x8]
    22f4:	cmp	x20, x8
    22f8:	b.eq	2308 <bzopen_or_bzdopen+0x1c4>  // b.none
    22fc:	mov	x0, x20
    2300:	bl	0 <fclose>
    2304:	mov	x0, xzr
    2308:	add	sp, sp, #0x1, lsl #12
    230c:	add	sp, sp, #0x3a0
    2310:	ldp	x20, x19, [sp, #80]
    2314:	ldp	x22, x21, [sp, #64]
    2318:	ldp	x24, x23, [sp, #48]
    231c:	ldp	x26, x25, [sp, #32]
    2320:	ldr	x28, [sp, #16]
    2324:	ldp	x29, x30, [sp], #96
    2328:	ret

000000000000232c <BZ2_bzdopen>:
    232c:	stp	x29, x30, [sp, #-16]!
    2330:	mov	x29, sp
    2334:	mov	x2, x1
    2338:	mov	w1, w0
    233c:	mov	w3, #0x1                   	// #1
    2340:	mov	x0, xzr
    2344:	bl	2144 <bzopen_or_bzdopen>
    2348:	ldp	x29, x30, [sp], #16
    234c:	ret

0000000000002350 <BZ2_bzread>:
    2350:	sub	sp, sp, #0x20
    2354:	stp	x29, x30, [sp, #16]
    2358:	add	x29, sp, #0x10
    235c:	ldr	w9, [x0, #5096]
    2360:	cmp	w9, #0x4
    2364:	b.ne	2370 <BZ2_bzread+0x20>  // b.any
    2368:	mov	w0, wzr
    236c:	b	2394 <BZ2_bzread+0x44>
    2370:	mov	x8, x0
    2374:	mov	w3, w2
    2378:	mov	x2, x1
    237c:	sub	x0, x29, #0x4
    2380:	mov	x1, x8
    2384:	bl	1c60 <BZ2_bzRead>
    2388:	ldur	w8, [x29, #-4]
    238c:	tst	w8, #0xfffffffb
    2390:	csinv	w0, w0, wzr, eq  // eq = none
    2394:	ldp	x29, x30, [sp, #16]
    2398:	add	sp, sp, #0x20
    239c:	ret

00000000000023a0 <BZ2_bzwrite>:
    23a0:	stp	x29, x30, [sp, #-32]!
    23a4:	str	x19, [sp, #16]
    23a8:	mov	x29, sp
    23ac:	mov	w19, w2
    23b0:	mov	x2, x1
    23b4:	mov	x1, x0
    23b8:	add	x0, x29, #0x1c
    23bc:	mov	w3, w19
    23c0:	bl	16e4 <BZ2_bzWrite>
    23c4:	ldr	w8, [x29, #28]
    23c8:	cmp	w8, #0x0
    23cc:	csinv	w0, w19, wzr, eq  // eq = none
    23d0:	ldr	x19, [sp, #16]
    23d4:	ldp	x29, x30, [sp], #32
    23d8:	ret

00000000000023dc <BZ2_bzflush>:
    23dc:	mov	w0, wzr
    23e0:	ret

00000000000023e4 <BZ2_bzclose>:
    23e4:	sub	sp, sp, #0x30
    23e8:	stp	x29, x30, [sp, #16]
    23ec:	stp	x20, x19, [sp, #32]
    23f0:	add	x29, sp, #0x10
    23f4:	cbz	x0, 2478 <BZ2_bzclose+0x94>
    23f8:	mov	w8, #0x1394                	// #5012
    23fc:	ldrb	w8, [x0, x8]
    2400:	ldr	x19, [x0]
    2404:	mov	x20, x0
    2408:	sub	x0, x29, #0x4
    240c:	cbz	w8, 2448 <BZ2_bzclose+0x64>
    2410:	mov	x1, x20
    2414:	mov	w2, wzr
    2418:	mov	x3, xzr
    241c:	mov	x4, xzr
    2420:	bl	184c <BZ2_bzWriteClose>
    2424:	ldur	w8, [x29, #-4]
    2428:	cbz	w8, 2450 <BZ2_bzclose+0x6c>
    242c:	mov	w2, #0x1                   	// #1
    2430:	mov	x0, xzr
    2434:	mov	x1, x20
    2438:	mov	x3, xzr
    243c:	mov	x4, xzr
    2440:	bl	184c <BZ2_bzWriteClose>
    2444:	b	2450 <BZ2_bzclose+0x6c>
    2448:	mov	x1, x20
    244c:	bl	1bd4 <BZ2_bzReadClose>
    2450:	adrp	x8, 0 <stdin>
    2454:	ldr	x8, [x8]
    2458:	cmp	x19, x8
    245c:	b.eq	2478 <BZ2_bzclose+0x94>  // b.none
    2460:	adrp	x8, 0 <stdout>
    2464:	ldr	x8, [x8]
    2468:	cmp	x19, x8
    246c:	b.eq	2478 <BZ2_bzclose+0x94>  // b.none
    2470:	mov	x0, x19
    2474:	bl	0 <fclose>
    2478:	ldp	x20, x19, [sp, #32]
    247c:	ldp	x29, x30, [sp, #16]
    2480:	add	sp, sp, #0x30
    2484:	ret

0000000000002488 <BZ2_bzerror>:
    2488:	ldr	w8, [x0, #5096]
    248c:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    2490:	add	x9, x9, #0x0
    2494:	and	w8, w8, w8, asr #31
    2498:	sub	x9, x9, w8, sxtw #3
    249c:	ldr	x0, [x9]
    24a0:	str	w8, [x1]
    24a4:	ret

00000000000024a8 <copy_output_until_stop>:
    24a8:	ldr	x8, [x0]
    24ac:	ldr	w9, [x8, #32]
    24b0:	cbz	w9, 2530 <copy_output_until_stop+0x88>
    24b4:	ldp	w10, w9, [x0, #116]
    24b8:	cmp	w9, w10
    24bc:	b.ge	2530 <copy_output_until_stop+0x88>  // b.tcont
    24c0:	ldr	x10, [x0, #80]
    24c4:	ldr	x8, [x8, #24]
    24c8:	ldrb	w9, [x10, w9, sxtw]
    24cc:	strb	w9, [x8]
    24d0:	ldr	w9, [x0, #120]
    24d4:	ldr	x8, [x0]
    24d8:	add	w9, w9, #0x1
    24dc:	str	w9, [x0, #120]
    24e0:	ldp	w9, w11, [x8, #32]
    24e4:	ldr	x10, [x8, #24]
    24e8:	sub	w9, w9, #0x1
    24ec:	str	w9, [x8, #32]
    24f0:	add	x9, x10, #0x1
    24f4:	adds	w10, w11, #0x1
    24f8:	str	x9, [x8, #24]
    24fc:	str	w10, [x8, #36]
    2500:	b.cc	2510 <copy_output_until_stop+0x68>  // b.lo, b.ul, b.last
    2504:	ldr	w9, [x8, #40]
    2508:	add	w9, w9, #0x1
    250c:	str	w9, [x8, #40]
    2510:	ldr	x8, [x0]
    2514:	ldr	w9, [x8, #32]
    2518:	cbz	w9, 2528 <copy_output_until_stop+0x80>
    251c:	ldp	w10, w9, [x0, #116]
    2520:	cmp	w9, w10
    2524:	b.lt	24c0 <copy_output_until_stop+0x18>  // b.tstop
    2528:	mov	w0, #0x1                   	// #1
    252c:	ret
    2530:	mov	w0, wzr
    2534:	ret

0000000000002538 <copy_input_until_stop>:
    2538:	stp	x29, x30, [sp, #-48]!
    253c:	stp	x22, x21, [sp, #16]
    2540:	stp	x20, x19, [sp, #32]
    2544:	mov	x29, sp
    2548:	ldr	w8, [x0, #8]
    254c:	mov	x19, x0
    2550:	cmp	w8, #0x2
    2554:	b.ne	265c <copy_input_until_stop+0x124>  // b.any
    2558:	ldp	w8, w9, [x19, #108]
    255c:	cmp	w8, w9
    2560:	b.ge	2778 <copy_input_until_stop+0x240>  // b.tcont
    2564:	ldr	x9, [x19]
    2568:	ldr	w10, [x9, #8]
    256c:	cbz	w10, 2778 <copy_input_until_stop+0x240>
    2570:	adrp	x21, 0 <BZ2_crc32Table>
    2574:	mov	w20, #0x1                   	// #1
    2578:	add	x21, x21, #0x0
    257c:	ldr	x9, [x9]
    2580:	ldrb	w22, [x9]
    2584:	ldr	w9, [x19, #92]
    2588:	cmp	w9, w22
    258c:	b.eq	25e0 <copy_input_until_stop+0xa8>  // b.none
    2590:	ldr	w10, [x19, #96]
    2594:	cmp	w10, #0x1
    2598:	b.ne	25d8 <copy_input_until_stop+0xa0>  // b.any
    259c:	ldr	w10, [x19, #648]
    25a0:	and	w11, w9, #0xff
    25a4:	add	x12, x19, x9
    25a8:	eor	w11, w11, w10, lsr #24
    25ac:	ldr	w11, [x21, w11, uxtw #2]
    25b0:	eor	w10, w11, w10, lsl #8
    25b4:	str	w10, [x19, #648]
    25b8:	strb	w20, [x12, #128]
    25bc:	ldr	x10, [x19, #64]
    25c0:	strb	w9, [x10, w8, sxtw]
    25c4:	ldr	w8, [x19, #108]
    25c8:	str	w22, [x19, #92]
    25cc:	add	w8, w8, #0x1
    25d0:	str	w8, [x19, #108]
    25d4:	b	260c <copy_input_until_stop+0xd4>
    25d8:	cmp	w9, w22
    25dc:	b.ne	25ec <copy_input_until_stop+0xb4>  // b.any
    25e0:	ldr	w8, [x19, #96]
    25e4:	cmp	w8, #0xff
    25e8:	b.ne	2604 <copy_input_until_stop+0xcc>  // b.any
    25ec:	cmp	w9, #0xff
    25f0:	b.hi	25fc <copy_input_until_stop+0xc4>  // b.pmore
    25f4:	mov	x0, x19
    25f8:	bl	27c4 <add_pair_to_block>
    25fc:	stp	w22, w20, [x19, #92]
    2600:	b	260c <copy_input_until_stop+0xd4>
    2604:	add	w8, w8, #0x1
    2608:	str	w8, [x19, #96]
    260c:	ldr	x8, [x19]
    2610:	ldr	x9, [x8]
    2614:	ldp	w10, w11, [x8, #8]
    2618:	add	x9, x9, #0x1
    261c:	sub	w10, w10, #0x1
    2620:	adds	w11, w11, #0x1
    2624:	str	x9, [x8]
    2628:	stp	w10, w11, [x8, #8]
    262c:	b.cc	263c <copy_input_until_stop+0x104>  // b.lo, b.ul, b.last
    2630:	ldr	w9, [x8, #16]
    2634:	add	w9, w9, #0x1
    2638:	str	w9, [x8, #16]
    263c:	ldp	w8, w9, [x19, #108]
    2640:	cmp	w8, w9
    2644:	b.ge	2654 <copy_input_until_stop+0x11c>  // b.tcont
    2648:	ldr	x9, [x19]
    264c:	ldr	w10, [x9, #8]
    2650:	cbnz	w10, 257c <copy_input_until_stop+0x44>
    2654:	mov	w0, #0x1                   	// #1
    2658:	b	277c <copy_input_until_stop+0x244>
    265c:	ldp	w8, w9, [x19, #108]
    2660:	cmp	w8, w9
    2664:	b.ge	2778 <copy_input_until_stop+0x240>  // b.tcont
    2668:	ldr	x9, [x19]
    266c:	ldr	w10, [x9, #8]
    2670:	cbz	w10, 2778 <copy_input_until_stop+0x240>
    2674:	adrp	x21, 0 <BZ2_crc32Table>
    2678:	mov	w0, wzr
    267c:	mov	w20, #0x1                   	// #1
    2680:	add	x21, x21, #0x0
    2684:	ldr	w10, [x19, #16]
    2688:	cbz	w10, 277c <copy_input_until_stop+0x244>
    268c:	ldr	x9, [x9]
    2690:	ldrb	w22, [x9]
    2694:	ldr	w9, [x19, #92]
    2698:	cmp	w9, w22
    269c:	b.ne	26b8 <copy_input_until_stop+0x180>  // b.any
    26a0:	ldr	w8, [x19, #96]
    26a4:	cmp	w8, #0xff
    26a8:	b.eq	2708 <copy_input_until_stop+0x1d0>  // b.none
    26ac:	add	w8, w8, #0x1
    26b0:	str	w8, [x19, #96]
    26b4:	b	271c <copy_input_until_stop+0x1e4>
    26b8:	ldr	w10, [x19, #96]
    26bc:	cmp	w10, #0x1
    26c0:	b.ne	2700 <copy_input_until_stop+0x1c8>  // b.any
    26c4:	ldr	w10, [x19, #648]
    26c8:	and	w11, w9, #0xff
    26cc:	add	x12, x19, x9
    26d0:	eor	w11, w11, w10, lsr #24
    26d4:	ldr	w11, [x21, w11, uxtw #2]
    26d8:	eor	w10, w11, w10, lsl #8
    26dc:	str	w10, [x19, #648]
    26e0:	strb	w20, [x12, #128]
    26e4:	ldr	x10, [x19, #64]
    26e8:	strb	w9, [x10, w8, sxtw]
    26ec:	ldr	w8, [x19, #108]
    26f0:	str	w22, [x19, #92]
    26f4:	add	w8, w8, #0x1
    26f8:	str	w8, [x19, #108]
    26fc:	b	271c <copy_input_until_stop+0x1e4>
    2700:	cmp	w9, w22
    2704:	b.eq	26a0 <copy_input_until_stop+0x168>  // b.none
    2708:	cmp	w9, #0xff
    270c:	b.hi	2718 <copy_input_until_stop+0x1e0>  // b.pmore
    2710:	mov	x0, x19
    2714:	bl	27c4 <add_pair_to_block>
    2718:	stp	w22, w20, [x19, #92]
    271c:	ldr	x8, [x19]
    2720:	ldr	x9, [x8]
    2724:	ldp	w10, w11, [x8, #8]
    2728:	add	x9, x9, #0x1
    272c:	sub	w10, w10, #0x1
    2730:	adds	w11, w11, #0x1
    2734:	str	x9, [x8]
    2738:	stp	w10, w11, [x8, #8]
    273c:	b.cc	274c <copy_input_until_stop+0x214>  // b.lo, b.ul, b.last
    2740:	ldr	w9, [x8, #16]
    2744:	add	w9, w9, #0x1
    2748:	str	w9, [x8, #16]
    274c:	ldr	w9, [x19, #16]
    2750:	ldp	w8, w10, [x19, #108]
    2754:	sub	w9, w9, #0x1
    2758:	cmp	w8, w10
    275c:	str	w9, [x19, #16]
    2760:	b.ge	2654 <copy_input_until_stop+0x11c>  // b.tcont
    2764:	ldr	x9, [x19]
    2768:	mov	w0, #0x1                   	// #1
    276c:	ldr	w10, [x9, #8]
    2770:	cbnz	w10, 2684 <copy_input_until_stop+0x14c>
    2774:	b	277c <copy_input_until_stop+0x244>
    2778:	mov	w0, wzr
    277c:	ldp	x20, x19, [sp, #32]
    2780:	ldp	x22, x21, [sp, #16]
    2784:	ldp	x29, x30, [sp], #48
    2788:	ret

000000000000278c <flush_RL>:
    278c:	stp	x29, x30, [sp, #-32]!
    2790:	str	x19, [sp, #16]
    2794:	mov	x29, sp
    2798:	ldr	w8, [x0, #92]
    279c:	mov	x19, x0
    27a0:	cmp	w8, #0xff
    27a4:	b.hi	27b0 <flush_RL+0x24>  // b.pmore
    27a8:	mov	x0, x19
    27ac:	bl	27c4 <add_pair_to_block>
    27b0:	mov	x0, x19
    27b4:	bl	260 <init_RL>
    27b8:	ldr	x19, [sp, #16]
    27bc:	ldp	x29, x30, [sp], #32
    27c0:	ret

00000000000027c4 <add_pair_to_block>:
    27c4:	ldp	w8, w9, [x0, #92]
    27c8:	cmp	w9, #0x1
    27cc:	b.lt	2804 <add_pair_to_block+0x40>  // b.tstop
    27d0:	ldr	w9, [x0, #96]
    27d4:	adrp	x12, 0 <BZ2_crc32Table>
    27d8:	mov	w10, wzr
    27dc:	and	w11, w8, #0xff
    27e0:	add	x12, x12, #0x0
    27e4:	ldr	w13, [x0, #648]
    27e8:	add	w10, w10, #0x1
    27ec:	cmp	w10, w9
    27f0:	eor	w14, w11, w13, lsr #24
    27f4:	ldr	w14, [x12, w14, uxtw #2]
    27f8:	eor	w13, w14, w13, lsl #8
    27fc:	str	w13, [x0, #648]
    2800:	b.lt	27e4 <add_pair_to_block+0x20>  // b.tstop
    2804:	add	x10, x0, x8
    2808:	mov	w11, #0x1                   	// #1
    280c:	cmp	w9, #0x3
    2810:	strb	w11, [x10, #128]
    2814:	b.eq	2834 <add_pair_to_block+0x70>  // b.none
    2818:	cmp	w9, #0x2
    281c:	b.eq	2870 <add_pair_to_block+0xac>  // b.none
    2820:	cmp	w9, #0x1
    2824:	b.ne	2898 <add_pair_to_block+0xd4>  // b.any
    2828:	ldr	w10, [x0, #108]!
    282c:	sub	x9, x0, #0x2c
    2830:	b	2904 <add_pair_to_block+0x140>
    2834:	ldr	x9, [x0, #64]!
    2838:	mov	x11, x0
    283c:	ldrsw	x10, [x11, #44]!
    2840:	strb	w8, [x9, x10]
    2844:	ldrsw	x9, [x11]
    2848:	add	x9, x9, #0x1
    284c:	str	w9, [x11]
    2850:	ldr	x10, [x0]
    2854:	strb	w8, [x10, x9]
    2858:	ldr	w9, [x11]
    285c:	add	w10, w9, #0x1
    2860:	str	w10, [x11]
    2864:	mov	x9, x0
    2868:	mov	x0, x11
    286c:	b	2904 <add_pair_to_block+0x140>
    2870:	ldr	x9, [x0, #64]!
    2874:	mov	x11, x0
    2878:	ldrsw	x10, [x11, #44]!
    287c:	strb	w8, [x9, x10]
    2880:	ldr	w10, [x11]
    2884:	mov	x9, x0
    2888:	mov	x0, x11
    288c:	add	w10, w10, #0x1
    2890:	str	w10, [x11]
    2894:	b	2904 <add_pair_to_block+0x140>
    2898:	add	x9, x0, w9, sxtw
    289c:	mov	w10, #0x1                   	// #1
    28a0:	strb	w10, [x9, #124]
    28a4:	ldrsw	x10, [x0, #108]!
    28a8:	mov	x9, x0
    28ac:	ldr	x11, [x9, #-44]!
    28b0:	strb	w8, [x11, x10]
    28b4:	ldrsw	x10, [x0]
    28b8:	add	x10, x10, #0x1
    28bc:	str	w10, [x0]
    28c0:	ldr	x11, [x9]
    28c4:	strb	w8, [x11, x10]
    28c8:	ldrsw	x10, [x0]
    28cc:	add	x10, x10, #0x1
    28d0:	str	w10, [x0]
    28d4:	ldr	x11, [x9]
    28d8:	strb	w8, [x11, x10]
    28dc:	ldrsw	x10, [x0]
    28e0:	add	x10, x10, #0x1
    28e4:	str	w10, [x0]
    28e8:	ldr	x11, [x9]
    28ec:	strb	w8, [x11, x10]
    28f0:	ldr	w8, [x0]
    28f4:	ldurb	w11, [x0, #-12]
    28f8:	add	w10, w8, #0x1
    28fc:	sub	w8, w11, #0x4
    2900:	str	w10, [x0]
    2904:	ldr	x9, [x9]
    2908:	strb	w8, [x9, w10, sxtw]
    290c:	ldr	w8, [x0]
    2910:	add	w8, w8, #0x1
    2914:	str	w8, [x0]
    2918:	ret
