In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_clang_-O1:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <preopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <preopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbz	x8, 28 <preopen_LTX_get_vtable+0x28>
  1c:	ldr	x0, [x20]
  20:	cbnz	x0, 3c <preopen_LTX_get_vtable+0x3c>
  24:	b	b0 <preopen_LTX_get_vtable+0xb0>
  28:	mov	w0, #0x48                  	// #72
  2c:	bl	0 <lt__zalloc>
  30:	str	x0, [x20]
  34:	ldr	x0, [x20]
  38:	cbz	x0, b0 <preopen_LTX_get_vtable+0xb0>
  3c:	ldr	x8, [x0]
  40:	cbz	x8, 4c <preopen_LTX_get_vtable+0x4c>
  44:	cbnz	x0, 94 <preopen_LTX_get_vtable+0x94>
  48:	b	b0 <preopen_LTX_get_vtable+0xb0>
  4c:	adrp	x8, 0 <preopen_LTX_get_vtable>
  50:	adrp	x9, 0 <preopen_LTX_get_vtable>
  54:	adrp	x10, 0 <preopen_LTX_get_vtable>
  58:	adrp	x11, 0 <preopen_LTX_get_vtable>
  5c:	adrp	x12, 0 <preopen_LTX_get_vtable>
  60:	adrp	x13, 0 <preopen_LTX_get_vtable>
  64:	add	x8, x8, #0x0
  68:	add	x9, x9, #0x0
  6c:	add	x10, x10, #0x0
  70:	add	x11, x11, #0x0
  74:	add	x12, x12, #0x0
  78:	add	x13, x13, #0x0
  7c:	stp	x8, xzr, [x0]
  80:	stp	x9, x10, [x0, #16]
  84:	stp	x11, x12, [x0, #32]
  88:	stp	x13, x19, [x0, #48]
  8c:	str	wzr, [x0, #64]
  90:	cbz	x0, b0 <preopen_LTX_get_vtable+0xb0>
  94:	ldr	x8, [x0, #56]
  98:	cmp	x8, x19
  9c:	b.eq	b0 <preopen_LTX_get_vtable+0xb0>  // b.none
  a0:	mov	w0, #0x3                   	// #3
  a4:	bl	0 <lt__error_string>
  a8:	bl	0 <lt__set_last_error>
  ac:	mov	x0, xzr
  b0:	ldp	x20, x19, [sp, #16]
  b4:	ldp	x29, x30, [sp], #32
  b8:	ret

00000000000000bc <vm_open>:
  bc:	stp	x29, x30, [sp, #-48]!
  c0:	adrp	x8, 0 <preopen_LTX_get_vtable>
  c4:	ldr	x9, [x8]
  c8:	stp	x22, x21, [sp, #16]
  cc:	stp	x20, x19, [sp, #32]
  d0:	mov	x29, sp
  d4:	cbz	x9, 15c <vm_open+0xa0>
  d8:	ldr	x21, [x8]
  dc:	adrp	x8, 0 <preopen_LTX_get_vtable>
  e0:	add	x8, x8, #0x0
  e4:	cmp	x1, #0x0
  e8:	csel	x20, x8, x1, eq  // eq = none
  ec:	mov	x19, xzr
  f0:	cbz	x21, 154 <vm_open+0x98>
  f4:	ldr	x8, [x21, #8]
  f8:	ldr	x0, [x8]
  fc:	cbz	x0, 144 <vm_open+0x88>
 100:	add	x22, x8, #0x10
 104:	b	114 <vm_open+0x58>
 108:	cbnz	w8, 148 <vm_open+0x8c>
 10c:	ldr	x0, [x22], #16
 110:	cbz	x0, 144 <vm_open+0x88>
 114:	ldur	x8, [x22, #-8]
 118:	cbnz	x8, 10c <vm_open+0x50>
 11c:	mov	x1, x20
 120:	bl	0 <strcmp>
 124:	cbnz	w0, 10c <vm_open+0x50>
 128:	ldr	x8, [x22, #8]
 12c:	cbz	x8, 108 <vm_open+0x4c>
 130:	ldr	x8, [x22]
 134:	cbz	x8, 108 <vm_open+0x4c>
 138:	ldr	x19, [x21, #8]
 13c:	mov	w8, #0x2                   	// #2
 140:	b	108 <vm_open+0x4c>
 144:	mov	w8, wzr
 148:	cbnz	w8, 16c <vm_open+0xb0>
 14c:	ldr	x21, [x21]
 150:	cbnz	x21, f4 <vm_open+0x38>
 154:	mov	w0, #0x5                   	// #5
 158:	b	164 <vm_open+0xa8>
 15c:	mov	x19, xzr
 160:	mov	w0, #0x7                   	// #7
 164:	bl	0 <lt__error_string>
 168:	bl	0 <lt__set_last_error>
 16c:	mov	x0, x19
 170:	ldp	x20, x19, [sp, #32]
 174:	ldp	x22, x21, [sp, #16]
 178:	ldp	x29, x30, [sp], #48
 17c:	ret

0000000000000180 <vm_close>:
 180:	mov	w0, wzr
 184:	ret

0000000000000188 <vm_sym>:
 188:	stp	x29, x30, [sp, #-48]!
 18c:	str	x21, [sp, #16]
 190:	stp	x20, x19, [sp, #32]
 194:	mov	x21, x1
 198:	ldr	x0, [x21, #16]!
 19c:	mov	x20, x1
 1a0:	mov	x19, x2
 1a4:	mov	x29, sp
 1a8:	cbz	x0, 1c0 <vm_sym+0x38>
 1ac:	adrp	x1, 0 <preopen_LTX_get_vtable>
 1b0:	add	x1, x1, #0x0
 1b4:	bl	0 <strcmp>
 1b8:	cmp	w0, #0x0
 1bc:	csel	x20, x21, x20, eq  // eq = none
 1c0:	ldr	x0, [x20, #32]
 1c4:	cbz	x0, 1e0 <vm_sym+0x58>
 1c8:	add	x20, x20, #0x30
 1cc:	mov	x1, x19
 1d0:	bl	0 <strcmp>
 1d4:	cbz	w0, 1f4 <vm_sym+0x6c>
 1d8:	ldr	x0, [x20], #16
 1dc:	cbnz	x0, 1cc <vm_sym+0x44>
 1e0:	mov	w0, #0xa                   	// #10
 1e4:	bl	0 <lt__error_string>
 1e8:	bl	0 <lt__set_last_error>
 1ec:	mov	x0, xzr
 1f0:	b	1f8 <vm_sym+0x70>
 1f4:	ldur	x0, [x20, #-8]
 1f8:	ldp	x20, x19, [sp, #32]
 1fc:	ldr	x21, [sp, #16]
 200:	ldp	x29, x30, [sp], #48
 204:	ret

0000000000000208 <vl_init>:
 208:	stp	x29, x30, [sp, #-16]!
 20c:	adrp	x8, 0 <preopen_LTX_get_vtable>
 210:	ldr	x0, [x8]
 214:	adrp	x8, 0 <preopen_LTX_get_vtable>
 218:	mov	x29, sp
 21c:	str	xzr, [x8]
 220:	cbz	x0, 228 <vl_init+0x20>
 224:	bl	260 <lt_dlpreload>
 228:	ldp	x29, x30, [sp], #16
 22c:	ret

0000000000000230 <vl_exit>:
 230:	stp	x29, x30, [sp, #-16]!
 234:	adrp	x8, 0 <preopen_LTX_get_vtable>
 238:	mov	x29, sp
 23c:	str	xzr, [x8]
 240:	bl	314 <free_symlists>
 244:	mov	w0, wzr
 248:	ldp	x29, x30, [sp], #16
 24c:	ret

0000000000000250 <lt_dlpreload_default>:
 250:	adrp	x8, 0 <preopen_LTX_get_vtable>
 254:	str	x0, [x8]
 258:	mov	w0, wzr
 25c:	ret

0000000000000260 <lt_dlpreload>:
 260:	stp	x29, x30, [sp, #-16]!
 264:	mov	x29, sp
 268:	cbz	x0, 278 <lt_dlpreload+0x18>
 26c:	bl	294 <add_symlist>
 270:	ldp	x29, x30, [sp], #16
 274:	ret
 278:	bl	314 <free_symlists>
 27c:	adrp	x8, 0 <preopen_LTX_get_vtable>
 280:	ldr	x0, [x8]
 284:	cbz	x0, 28c <lt_dlpreload+0x2c>
 288:	bl	260 <lt_dlpreload>
 28c:	ldp	x29, x30, [sp], #16
 290:	ret

0000000000000294 <add_symlist>:
 294:	stp	x29, x30, [sp, #-32]!
 298:	stp	x20, x19, [sp, #16]
 29c:	adrp	x20, 0 <preopen_LTX_get_vtable>
 2a0:	ldr	x8, [x20]
 2a4:	mov	x19, x0
 2a8:	mov	x29, sp
 2ac:	cbz	x8, 2c4 <add_symlist+0x30>
 2b0:	ldr	x9, [x8, #8]
 2b4:	cmp	x9, x19
 2b8:	b.eq	2fc <add_symlist+0x68>  // b.none
 2bc:	ldr	x8, [x8]
 2c0:	cbnz	x8, 2b0 <add_symlist+0x1c>
 2c4:	mov	w0, #0x10                  	// #16
 2c8:	bl	0 <lt__zalloc>
 2cc:	cbz	x0, 304 <add_symlist+0x70>
 2d0:	ldr	x8, [x20]
 2d4:	stp	x8, x19, [x0]
 2d8:	str	x0, [x20]
 2dc:	ldr	x0, [x19, #16]
 2e0:	cbz	x0, 308 <add_symlist+0x74>
 2e4:	adrp	x1, 0 <preopen_LTX_get_vtable>
 2e8:	add	x1, x1, #0x0
 2ec:	bl	0 <strcmp>
 2f0:	cbnz	w0, 2fc <add_symlist+0x68>
 2f4:	ldr	x8, [x19, #24]
 2f8:	blr	x8
 2fc:	mov	w0, wzr
 300:	b	308 <add_symlist+0x74>
 304:	mov	w0, #0x1                   	// #1
 308:	ldp	x20, x19, [sp, #16]
 30c:	ldp	x29, x30, [sp], #32
 310:	ret

0000000000000314 <free_symlists>:
 314:	stp	x29, x30, [sp, #-32]!
 318:	stp	x20, x19, [sp, #16]
 31c:	adrp	x19, 0 <preopen_LTX_get_vtable>
 320:	ldr	x0, [x19]
 324:	mov	x29, sp
 328:	cbz	x0, 33c <free_symlists+0x28>
 32c:	ldr	x20, [x0]
 330:	bl	0 <free>
 334:	mov	x0, x20
 338:	cbnz	x20, 32c <free_symlists+0x18>
 33c:	str	xzr, [x19]
 340:	ldp	x20, x19, [sp, #16]
 344:	ldp	x29, x30, [sp], #32
 348:	ret

000000000000034c <lt_dlpreload_open>:
 34c:	stp	x29, x30, [sp, #-80]!
 350:	adrp	x8, 0 <preopen_LTX_get_vtable>
 354:	stp	x26, x25, [sp, #16]
 358:	ldr	x25, [x8]
 35c:	stp	x24, x23, [sp, #32]
 360:	stp	x22, x21, [sp, #48]
 364:	stp	x20, x19, [sp, #64]
 368:	mov	x29, sp
 36c:	cbz	x25, 428 <lt_dlpreload_open+0xdc>
 370:	adrp	x22, 0 <preopen_LTX_get_vtable>
 374:	mov	x20, x1
 378:	mov	x21, x0
 37c:	mov	w19, wzr
 380:	mov	w24, wzr
 384:	add	x22, x22, #0x0
 388:	b	394 <lt_dlpreload_open+0x48>
 38c:	ldr	x25, [x25]
 390:	cbz	x25, 430 <lt_dlpreload_open+0xe4>
 394:	ldr	x8, [x25, #8]
 398:	ldr	x0, [x8]
 39c:	cbz	x21, 3b0 <lt_dlpreload_open+0x64>
 3a0:	mov	x1, x21
 3a4:	bl	0 <strcmp>
 3a8:	cbnz	w0, 38c <lt_dlpreload_open+0x40>
 3ac:	b	3bc <lt_dlpreload_open+0x70>
 3b0:	mov	x1, x22
 3b4:	bl	0 <strcmp>
 3b8:	cbnz	w0, 38c <lt_dlpreload_open+0x40>
 3bc:	ldr	x8, [x25, #8]
 3c0:	add	w24, w24, #0x1
 3c4:	ldr	x23, [x8, #16]
 3c8:	cbz	x23, 38c <lt_dlpreload_open+0x40>
 3cc:	mov	w26, #0x2                   	// #2
 3d0:	mov	w9, #0x1                   	// #1
 3d4:	b	3f8 <lt_dlpreload_open+0xac>
 3d8:	blr	x20
 3dc:	add	w19, w0, w19
 3e0:	ldr	x8, [x25, #8]
 3e4:	mov	w9, w26
 3e8:	lsl	x10, x9, #4
 3ec:	add	w26, w26, #0x1
 3f0:	ldr	x23, [x8, x10]
 3f4:	cbz	x23, 38c <lt_dlpreload_open+0x40>
 3f8:	add	x8, x8, x9, lsl #4
 3fc:	ldr	x8, [x8, #8]
 400:	cbnz	x8, 3e0 <lt_dlpreload_open+0x94>
 404:	mov	x0, x23
 408:	mov	x1, x22
 40c:	bl	0 <strcmp>
 410:	cbz	w0, 3e0 <lt_dlpreload_open+0x94>
 414:	mov	x0, x23
 418:	bl	0 <lt_dlopen>
 41c:	cbnz	x0, 3d8 <lt_dlpreload_open+0x8c>
 420:	add	w19, w19, #0x1
 424:	b	3e0 <lt_dlpreload_open+0x94>
 428:	mov	w24, wzr
 42c:	mov	w19, wzr
 430:	cbnz	w24, 444 <lt_dlpreload_open+0xf8>
 434:	mov	w0, #0x8                   	// #8
 438:	bl	0 <lt__error_string>
 43c:	bl	0 <lt__set_last_error>
 440:	add	w19, w19, #0x1
 444:	mov	w0, w19
 448:	ldp	x20, x19, [sp, #64]
 44c:	ldp	x22, x21, [sp, #48]
 450:	ldp	x24, x23, [sp, #32]
 454:	ldp	x26, x25, [sp, #16]
 458:	ldp	x29, x30, [sp], #80
 45c:	ret

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x8, 0 <stderr>
   8:	ldr	x3, [x8]
   c:	adrp	x0, 0 <alloc_die_default>
  10:	add	x0, x0, #0x0
  14:	mov	w1, #0xf                   	// #15
  18:	mov	w2, #0x1                   	// #1
  1c:	mov	x29, sp
  20:	bl	0 <fwrite>
  24:	mov	w0, #0x1                   	// #1
  28:	bl	0 <exit>

000000000000002c <lt__malloc>:
  2c:	stp	x29, x30, [sp, #-32]!
  30:	str	x19, [sp, #16]
  34:	mov	x29, sp
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbnz	x0, 50 <lt__malloc+0x24>
  44:	adrp	x8, 0 <alloc_die_default>
  48:	ldr	x8, [x8]
  4c:	blr	x8
  50:	mov	x0, x19
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <lt__zalloc>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	stp	x20, x19, [sp, #16]
  68:	mov	x29, sp
  6c:	mov	x19, x0
  70:	bl	2c <lt__malloc>
  74:	mov	x20, x0
  78:	cbz	x0, 8c <lt__zalloc+0x2c>
  7c:	mov	x0, x20
  80:	mov	w1, wzr
  84:	mov	x2, x19
  88:	bl	0 <memset>
  8c:	mov	x0, x20
  90:	ldp	x20, x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret

000000000000009c <lt__realloc>:
  9c:	stp	x29, x30, [sp, #-32]!
  a0:	str	x19, [sp, #16]
  a4:	mov	x29, sp
  a8:	bl	0 <realloc>
  ac:	mov	x19, x0
  b0:	cbnz	x0, c0 <lt__realloc+0x24>
  b4:	adrp	x8, 0 <alloc_die_default>
  b8:	ldr	x8, [x8]
  bc:	blr	x8
  c0:	mov	x0, x19
  c4:	ldr	x19, [sp, #16]
  c8:	ldp	x29, x30, [sp], #32
  cc:	ret

00000000000000d0 <lt__memdup>:
  d0:	stp	x29, x30, [sp, #-48]!
  d4:	str	x21, [sp, #16]
  d8:	mov	x21, x0
  dc:	mov	x0, x1
  e0:	stp	x20, x19, [sp, #32]
  e4:	mov	x29, sp
  e8:	mov	x20, x1
  ec:	bl	2c <lt__malloc>
  f0:	mov	x19, x0
  f4:	cbz	x0, 108 <lt__memdup+0x38>
  f8:	mov	x0, x19
  fc:	mov	x1, x21
 100:	mov	x2, x20
 104:	bl	0 <memcpy>
 108:	mov	x0, x19
 10c:	ldp	x20, x19, [sp, #32]
 110:	ldr	x21, [sp, #16]
 114:	ldp	x29, x30, [sp], #48
 118:	ret

000000000000011c <lt__strdup>:
 11c:	stp	x29, x30, [sp, #-32]!
 120:	str	x19, [sp, #16]
 124:	mov	x29, sp
 128:	mov	x19, x0
 12c:	bl	0 <strlen>
 130:	add	x1, x0, #0x1
 134:	mov	x0, x19
 138:	bl	d0 <lt__memdup>
 13c:	ldr	x19, [sp, #16]
 140:	ldp	x29, x30, [sp], #32
 144:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dlloader_add>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 6c <lt_dlloader_add+0x6c>
  10:	ldr	x8, [x0, #16]
  14:	mov	x19, x0
  18:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  1c:	ldr	x8, [x19, #24]
  20:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  24:	ldr	x8, [x19, #32]
  28:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  2c:	ldr	w8, [x19, #64]
  30:	cmp	w8, #0x2
  34:	b.cs	6c <lt_dlloader_add+0x6c>  // b.hs, b.nlast
  38:	mov	x0, x19
  3c:	bl	0 <lt__slist_box>
  40:	cbz	x0, 88 <lt_dlloader_add+0x88>
  44:	ldr	w9, [x19, #64]
  48:	mov	x8, x0
  4c:	adrp	x19, 0 <lt_dlloader_add>
  50:	cmp	w9, #0x1
  54:	b.eq	98 <lt_dlloader_add+0x98>  // b.none
  58:	cbnz	w9, b4 <lt_dlloader_add+0xb4>
  5c:	ldr	x1, [x19]
  60:	mov	x0, x8
  64:	bl	0 <lt__slist_cons>
  68:	b	a4 <lt_dlloader_add+0xa4>
  6c:	mov	w0, #0x2                   	// #2
  70:	bl	0 <lt__error_string>
  74:	bl	0 <lt__set_last_error>
  78:	mov	w0, #0x1                   	// #1
  7c:	ldr	x19, [sp, #16]
  80:	ldp	x29, x30, [sp], #32
  84:	ret
  88:	adrp	x8, 0 <lt__alloc_die>
  8c:	ldr	x8, [x8]
  90:	blr	x8
  94:	b	78 <lt_dlloader_add+0x78>
  98:	ldr	x0, [x19]
  9c:	mov	x1, x8
  a0:	bl	0 <lt__slist_concat>
  a4:	mov	x8, x0
  a8:	mov	w0, wzr
  ac:	str	x8, [x19]
  b0:	b	7c <lt_dlloader_add+0x7c>
  b4:	adrp	x0, 0 <lt_dlloader_add>
  b8:	adrp	x1, 0 <lt_dlloader_add>
  bc:	adrp	x3, 0 <lt_dlloader_add>
  c0:	add	x0, x0, #0x0
  c4:	add	x1, x1, #0x0
  c8:	add	x3, x3, #0x0
  cc:	mov	w2, #0x5e                  	// #94
  d0:	bl	0 <__assert_fail>

00000000000000d4 <lt_dlloader_next>:
  d4:	adrp	x8, 0 <lt_dlloader_add>
  d8:	add	x8, x8, #0x0
  dc:	cmp	x0, #0x0
  e0:	csel	x8, x8, x0, eq  // eq = none
  e4:	ldr	x0, [x8]
  e8:	ret

00000000000000ec <lt_dlloader_get>:
  ec:	cbz	x0, f4 <lt_dlloader_get+0x8>
  f0:	ldr	x0, [x0, #8]
  f4:	ret

00000000000000f8 <lt_dlloader_remove>:
  f8:	stp	x29, x30, [sp, #-64]!
  fc:	stp	x24, x23, [sp, #16]
 100:	stp	x22, x21, [sp, #32]
 104:	stp	x20, x19, [sp, #48]
 108:	mov	x29, sp
 10c:	mov	x19, x0
 110:	bl	1fc <lt_dlloader_find>
 114:	cbz	x0, 184 <lt_dlloader_remove+0x8c>
 118:	mov	x20, x0
 11c:	adrp	x0, 0 <lt_dlloader_add>
 120:	add	x0, x0, #0x0
 124:	mov	x1, xzr
 128:	bl	0 <lt_dlinterface_register>
 12c:	mov	x1, xzr
 130:	mov	x21, x0
 134:	bl	0 <lt_dlhandle_iterate>
 138:	cbz	x0, 18c <lt_dlloader_remove+0x94>
 13c:	mov	x22, x0
 140:	mov	w23, wzr
 144:	mov	w24, wzr
 148:	b	160 <lt_dlloader_remove+0x68>
 14c:	mov	x0, x21
 150:	mov	x1, x22
 154:	bl	0 <lt_dlhandle_iterate>
 158:	mov	x22, x0
 15c:	cbz	x0, 194 <lt_dlloader_remove+0x9c>
 160:	ldr	x8, [x22, #8]
 164:	cmp	x8, x20
 168:	b.ne	14c <lt_dlloader_remove+0x54>  // b.any
 16c:	mov	x0, x22
 170:	bl	0 <lt_dlisresident>
 174:	cmp	w0, #0x0
 178:	csinc	w23, w23, wzr, eq  // eq = none
 17c:	mov	w24, #0x1                   	// #1
 180:	b	14c <lt_dlloader_remove+0x54>
 184:	mov	w0, #0x2                   	// #2
 188:	b	1a8 <lt_dlloader_remove+0xb0>
 18c:	mov	w24, wzr
 190:	mov	w23, wzr
 194:	mov	x0, x21
 198:	bl	0 <lt_dlinterface_free>
 19c:	cbz	w24, 1c8 <lt_dlloader_remove+0xd0>
 1a0:	cbnz	w23, 1b0 <lt_dlloader_remove+0xb8>
 1a4:	mov	w0, #0x4                   	// #4
 1a8:	bl	0 <lt__error_string>
 1ac:	bl	0 <lt__set_last_error>
 1b0:	mov	x0, xzr
 1b4:	ldp	x20, x19, [sp, #48]
 1b8:	ldp	x22, x21, [sp, #32]
 1bc:	ldp	x24, x23, [sp, #16]
 1c0:	ldp	x29, x30, [sp], #64
 1c4:	ret
 1c8:	ldr	x8, [x20, #48]
 1cc:	cbz	x8, 1dc <lt_dlloader_remove+0xe4>
 1d0:	ldr	x0, [x20, #56]
 1d4:	blr	x8
 1d8:	cbnz	w0, 1b0 <lt_dlloader_remove+0xb8>
 1dc:	adrp	x0, 0 <lt_dlloader_add>
 1e0:	adrp	x1, 0 <lt_dlloader_add>
 1e4:	add	x0, x0, #0x0
 1e8:	add	x1, x1, #0x0
 1ec:	mov	x2, x19
 1f0:	bl	0 <lt__slist_remove>
 1f4:	bl	0 <lt__slist_unbox>
 1f8:	b	1b4 <lt_dlloader_remove+0xbc>

00000000000001fc <lt_dlloader_find>:
 1fc:	stp	x29, x30, [sp, #-16]!
 200:	adrp	x8, 0 <lt_dlloader_add>
 204:	ldr	x8, [x8]
 208:	adrp	x1, 0 <lt_dlloader_add>
 20c:	mov	x2, x0
 210:	add	x1, x1, #0x0
 214:	mov	x0, x8
 218:	mov	x29, sp
 21c:	bl	0 <lt__slist_find>
 220:	bl	ec <lt_dlloader_get>
 224:	ldp	x29, x30, [sp], #16
 228:	ret

000000000000022c <loader_callback>:
 22c:	stp	x29, x30, [sp, #-32]!
 230:	ldr	x8, [x0, #8]
 234:	str	x19, [sp, #16]
 238:	mov	x29, sp
 23c:	cbz	x8, 260 <loader_callback+0x34>
 240:	mov	x19, x0
 244:	ldr	x0, [x8]
 248:	bl	0 <strcmp>
 24c:	cmp	w0, #0x0
 250:	csel	x0, x19, xzr, eq  // eq = none
 254:	ldr	x19, [sp, #16]
 258:	ldp	x29, x30, [sp], #32
 25c:	ret
 260:	adrp	x0, 0 <lt_dlloader_add>
 264:	adrp	x1, 0 <lt_dlloader_add>
 268:	adrp	x3, 0 <lt_dlloader_add>
 26c:	add	x0, x0, #0x0
 270:	add	x1, x1, #0x0
 274:	add	x3, x3, #0x0
 278:	mov	w2, #0x36                  	// #54
 27c:	bl	0 <__assert_fail>

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 68 <lt_dladderror+0x68>
  14:	adrp	x20, 0 <lt_dladderror>
  18:	ldr	w21, [x20]
  1c:	adrp	x22, 0 <lt_dladderror>
  20:	mov	x19, x0
  24:	ldr	x0, [x22]
  28:	sub	w8, w21, #0x13
  2c:	sbfiz	x1, x8, #3, #32
  30:	bl	0 <lt__realloc>
  34:	cbz	x0, 54 <lt_dladderror+0x54>
  38:	sub	w8, w21, #0x14
  3c:	str	x0, [x22]
  40:	str	x19, [x0, w8, sxtw #3]
  44:	ldr	w0, [x20]
  48:	add	w8, w0, #0x1
  4c:	str	w8, [x20]
  50:	b	58 <lt_dladderror+0x58>
  54:	mov	w0, #0xffffffff            	// #-1
  58:	ldp	x20, x19, [sp, #32]
  5c:	ldp	x22, x21, [sp, #16]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	adrp	x0, 0 <lt_dladderror>
  6c:	adrp	x1, 0 <lt_dladderror>
  70:	adrp	x3, 0 <lt_dladderror>
  74:	add	x0, x0, #0x0
  78:	add	x1, x1, #0x0
  7c:	add	x3, x3, #0x0
  80:	mov	w2, #0x35                  	// #53
  84:	bl	0 <__assert_fail>

0000000000000088 <lt_dlseterror>:
  88:	stp	x29, x30, [sp, #-16]!
  8c:	mov	x29, sp
  90:	tbnz	w0, #31, c0 <lt_dlseterror+0x38>
  94:	adrp	x8, 0 <lt_dladderror>
  98:	ldr	w8, [x8]
  9c:	cmp	w8, w0
  a0:	b.le	c0 <lt_dlseterror+0x38>
  a4:	cmp	w0, #0x13
  a8:	b.gt	d8 <lt_dlseterror+0x50>
  ac:	adrp	x8, 0 <lt_dladderror>
  b0:	add	x8, x8, #0x0
  b4:	mov	w9, #0x2a                  	// #42
  b8:	smaddl	x0, w0, w9, x8
  bc:	b	e8 <lt_dlseterror+0x60>
  c0:	mov	w0, #0xe                   	// #14
  c4:	bl	104 <lt__error_string>
  c8:	bl	f8 <lt__set_last_error>
  cc:	mov	w0, #0x1                   	// #1
  d0:	ldp	x29, x30, [sp], #16
  d4:	ret
  d8:	adrp	x8, 0 <lt_dladderror>
  dc:	ldr	x8, [x8]
  e0:	add	x8, x8, w0, sxtw #3
  e4:	ldur	x0, [x8, #-160]
  e8:	bl	f8 <lt__set_last_error>
  ec:	mov	w0, wzr
  f0:	ldp	x29, x30, [sp], #16
  f4:	ret

00000000000000f8 <lt__set_last_error>:
  f8:	adrp	x8, 0 <lt_dladderror>
  fc:	str	x0, [x8]
 100:	ret

0000000000000104 <lt__error_string>:
 104:	stp	x29, x30, [sp, #-16]!
 108:	mov	x29, sp
 10c:	tbnz	w0, #31, 130 <lt__error_string+0x2c>
 110:	cmp	w0, #0x14
 114:	b.ge	150 <lt__error_string+0x4c>  // b.tcont
 118:	adrp	x8, 0 <lt_dladderror>
 11c:	add	x8, x8, #0x0
 120:	mov	w9, #0x2a                  	// #42
 124:	smaddl	x0, w0, w9, x8
 128:	ldp	x29, x30, [sp], #16
 12c:	ret
 130:	adrp	x0, 0 <lt_dladderror>
 134:	adrp	x1, 0 <lt_dladderror>
 138:	adrp	x3, 0 <lt_dladderror>
 13c:	add	x0, x0, #0x0
 140:	add	x1, x1, #0x0
 144:	add	x3, x3, #0x0
 148:	mov	w2, #0x5f                  	// #95
 14c:	bl	0 <__assert_fail>
 150:	adrp	x0, 0 <lt_dladderror>
 154:	adrp	x1, 0 <lt_dladderror>
 158:	adrp	x3, 0 <lt_dladderror>
 15c:	add	x0, x0, #0x0
 160:	add	x1, x1, #0x0
 164:	add	x3, x3, #0x0
 168:	mov	w2, #0x60                  	// #96
 16c:	bl	0 <__assert_fail>

0000000000000170 <lt__get_last_error>:
 170:	adrp	x8, 0 <lt_dladderror>
 174:	ldr	x0, [x8]
 178:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w0, #0xb                   	// #11
       8:	mov	x29, sp
       c:	bl	0 <lt__error_string>
      10:	bl	0 <lt__set_last_error>
      14:	ldp	x29, x30, [sp], #16
      18:	ret

000000000000001c <lt_dlinit>:
      1c:	stp	x29, x30, [sp, #-16]!
      20:	adrp	x8, 0 <lt__alloc_die_callback>
      24:	ldr	w9, [x8]
      28:	mov	x29, sp
      2c:	add	w10, w9, #0x1
      30:	str	w10, [x8]
      34:	cbz	w9, 44 <lt_dlinit+0x28>
      38:	mov	w0, wzr
      3c:	ldp	x29, x30, [sp], #16
      40:	ret
      44:	adrp	x9, 0 <lt__alloc_die_callback>
      48:	adrp	x0, 0 <preopen_LTX_get_vtable>
      4c:	adrp	x8, 0 <lt__alloc_die>
      50:	add	x9, x9, #0x0
      54:	adrp	x10, 0 <lt__alloc_die_callback>
      58:	adrp	x11, 0 <lt__alloc_die_callback>
      5c:	add	x0, x0, #0x0
      60:	str	x9, [x8]
      64:	str	xzr, [x10]
      68:	str	xzr, [x11]
      6c:	bl	ac <loader_init>
      70:	cbz	w0, 80 <lt_dlinit+0x64>
      74:	cbz	w0, 90 <lt_dlinit+0x74>
      78:	ldp	x29, x30, [sp], #16
      7c:	ret
      80:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
      84:	add	x0, x0, #0x0
      88:	bl	0 <lt_dlpreload>
      8c:	cbnz	w0, 78 <lt_dlinit+0x5c>
      90:	adrp	x0, 0 <lt__alloc_die_callback>
      94:	adrp	x1, 0 <lt__alloc_die_callback>
      98:	add	x0, x0, #0x0
      9c:	add	x1, x1, #0x0
      a0:	bl	0 <lt_dlpreload_open>
      a4:	ldp	x29, x30, [sp], #16
      a8:	ret

00000000000000ac <loader_init>:
      ac:	stp	x29, x30, [sp, #-32]!
      b0:	str	x19, [sp, #16]
      b4:	mov	x29, sp
      b8:	cbz	x0, d0 <loader_init+0x24>
      bc:	mov	x8, x0
      c0:	mov	x0, xzr
      c4:	blr	x8
      c8:	mov	x19, x0
      cc:	b	d4 <loader_init+0x28>
      d0:	mov	x19, xzr
      d4:	mov	x0, x19
      d8:	bl	0 <lt_dlloader_add>
      dc:	cbnz	x19, e4 <loader_init+0x38>
      e0:	cbz	w0, 124 <loader_init+0x78>
      e4:	cbz	w0, f4 <loader_init+0x48>
      e8:	ldr	x19, [sp, #16]
      ec:	ldp	x29, x30, [sp], #32
      f0:	ret
      f4:	ldr	x8, [x19, #40]
      f8:	cbz	x8, 11c <loader_init+0x70>
      fc:	ldr	x0, [x19, #56]
     100:	blr	x8
     104:	cbz	w0, e8 <loader_init+0x3c>
     108:	mov	w0, #0x3                   	// #3
     10c:	bl	0 <lt__error_string>
     110:	bl	0 <lt__set_last_error>
     114:	mov	w0, #0x1                   	// #1
     118:	b	e8 <loader_init+0x3c>
     11c:	mov	w0, wzr
     120:	b	e8 <loader_init+0x3c>
     124:	adrp	x0, 0 <lt__alloc_die_callback>
     128:	adrp	x1, 0 <lt__alloc_die_callback>
     12c:	adrp	x3, 0 <lt__alloc_die_callback>
     130:	add	x0, x0, #0x0
     134:	add	x1, x1, #0x0
     138:	add	x3, x3, #0x0
     13c:	mov	w2, #0xc7                  	// #199
     140:	bl	0 <__assert_fail>

0000000000000144 <loader_init_callback>:
     144:	stp	x29, x30, [sp, #-16]!
     148:	adrp	x1, 0 <lt__alloc_die_callback>
     14c:	add	x1, x1, #0x0
     150:	mov	x29, sp
     154:	bl	1424 <lt_dlsym>
     158:	bl	ac <loader_init>
     15c:	ldp	x29, x30, [sp], #16
     160:	ret

0000000000000164 <lt_dlexit>:
     164:	stp	x29, x30, [sp, #-64]!
     168:	adrp	x8, 0 <lt__alloc_die_callback>
     16c:	ldr	w9, [x8]
     170:	stp	x24, x23, [sp, #16]
     174:	stp	x22, x21, [sp, #32]
     178:	stp	x20, x19, [sp, #48]
     17c:	mov	x29, sp
     180:	cbz	w9, 1a0 <lt_dlexit+0x3c>
     184:	adrp	x20, 0 <lt__alloc_die_callback>
     188:	ldr	x21, [x20]
     18c:	subs	w9, w9, #0x1
     190:	str	w9, [x8]
     194:	b.eq	1b4 <lt_dlexit+0x50>  // b.none
     198:	mov	w19, wzr
     19c:	b	2c8 <lt_dlexit+0x164>
     1a0:	mov	w0, #0xf                   	// #15
     1a4:	bl	0 <lt__error_string>
     1a8:	bl	0 <lt__set_last_error>
     1ac:	mov	w19, #0x1                   	// #1
     1b0:	b	2c8 <lt_dlexit+0x164>
     1b4:	ldr	x8, [x20]
     1b8:	cbz	x8, 1d0 <lt_dlexit+0x6c>
     1bc:	ldrb	w9, [x8, #36]
     1c0:	tbz	w9, #0, 1d0 <lt_dlexit+0x6c>
     1c4:	ldr	x8, [x8]
     1c8:	str	x8, [x20]
     1cc:	cbnz	x8, 1bc <lt_dlexit+0x58>
     1d0:	mov	w19, wzr
     1d4:	cbz	x21, 25c <lt_dlexit+0xf8>
     1d8:	adrp	x23, 0 <lt__alloc_die_callback>
     1dc:	mov	w22, #0x1                   	// #1
     1e0:	add	x23, x23, #0x0
     1e4:	ldr	x0, [x20]
     1e8:	cbz	x0, 24c <lt_dlexit+0xe8>
     1ec:	mov	w8, wzr
     1f0:	b	20c <lt_dlexit+0xa8>
     1f4:	ldr	x9, [x20]
     1f8:	cmp	x8, #0x0
     1fc:	csel	x24, x24, x9, ne  // ne = any
     200:	mov	w8, #0x1                   	// #1
     204:	mov	x0, x24
     208:	cbz	x24, 250 <lt_dlexit+0xec>
     20c:	ldrb	w9, [x0, #36]
     210:	ldr	x24, [x0]
     214:	tbnz	w9, #0, 204 <lt_dlexit+0xa0>
     218:	ldr	w8, [x0, #32]
     21c:	cmp	w8, w22
     220:	b.gt	200 <lt_dlexit+0x9c>
     224:	bl	2e0 <lt_dlclose>
     228:	cmp	w0, #0x0
     22c:	cinc	w19, w19, ne  // ne = any
     230:	cbz	x24, 200 <lt_dlexit+0x9c>
     234:	mov	x8, x23
     238:	ldr	x8, [x8]
     23c:	cmp	x8, x24
     240:	b.eq	1f4 <lt_dlexit+0x90>  // b.none
     244:	cbnz	x8, 238 <lt_dlexit+0xd4>
     248:	b	1f4 <lt_dlexit+0x90>
     24c:	mov	w8, wzr
     250:	cbz	w8, 25c <lt_dlexit+0xf8>
     254:	add	w22, w22, #0x1
     258:	cbnz	x21, 1e4 <lt_dlexit+0x80>
     25c:	cbnz	w19, 268 <lt_dlexit+0x104>
     260:	mov	x0, xzr
     264:	bl	0 <lt__set_last_error>
     268:	mov	x0, xzr
     26c:	bl	0 <lt_dlloader_next>
     270:	cbz	x0, 2b8 <lt_dlexit+0x154>
     274:	mov	x20, x0
     278:	b	28c <lt_dlexit+0x128>
     27c:	bl	0 <lt__get_last_error>
     280:	cmp	x0, #0x0
     284:	cinc	w19, w19, ne  // ne = any
     288:	cbz	x20, 2b8 <lt_dlexit+0x154>
     28c:	mov	x0, x20
     290:	mov	x21, x20
     294:	bl	0 <lt_dlloader_next>
     298:	mov	x20, x0
     29c:	mov	x0, x21
     2a0:	bl	0 <lt_dlloader_get>
     2a4:	ldr	x0, [x0]
     2a8:	bl	0 <lt_dlloader_remove>
     2ac:	cbz	x0, 27c <lt_dlexit+0x118>
     2b0:	bl	0 <free>
     2b4:	cbnz	x20, 28c <lt_dlexit+0x128>
     2b8:	adrp	x20, 0 <lt__alloc_die_callback>
     2bc:	ldr	x0, [x20]
     2c0:	bl	0 <free>
     2c4:	str	xzr, [x20]
     2c8:	mov	w0, w19
     2cc:	ldp	x20, x19, [sp, #48]
     2d0:	ldp	x22, x21, [sp, #32]
     2d4:	ldp	x24, x23, [sp, #16]
     2d8:	ldp	x29, x30, [sp], #64
     2dc:	ret

00000000000002e0 <lt_dlclose>:
     2e0:	stp	x29, x30, [sp, #-32]!
     2e4:	adrp	x8, 0 <lt__alloc_die_callback>
     2e8:	ldr	x8, [x8]
     2ec:	stp	x20, x19, [sp, #16]
     2f0:	mov	x19, x0
     2f4:	mov	x29, sp
     2f8:	cmp	x8, #0x0
     2fc:	cset	w10, ne  // ne = any
     300:	cbz	x8, 3cc <lt_dlclose+0xec>
     304:	cmp	x8, x19
     308:	b.eq	330 <lt_dlclose+0x50>  // b.none
     30c:	mov	x11, x8
     310:	mov	x9, x11
     314:	ldr	x11, [x11]
     318:	cmp	x11, #0x0
     31c:	cset	w10, ne  // ne = any
     320:	cbz	x11, 334 <lt_dlclose+0x54>
     324:	cmp	x11, x19
     328:	b.ne	310 <lt_dlclose+0x30>  // b.any
     32c:	b	334 <lt_dlclose+0x54>
     330:	mov	x9, x8
     334:	tbz	w10, #0, 3d4 <lt_dlclose+0xf4>
     338:	ldr	w10, [x19, #32]
     33c:	subs	w10, w10, #0x1
     340:	str	w10, [x19, #32]
     344:	b.gt	3bc <lt_dlclose+0xdc>
     348:	ldrb	w10, [x19, #36]
     34c:	tbnz	w10, #0, 3bc <lt_dlclose+0xdc>
     350:	ldp	x11, x10, [x19]
     354:	adrp	x12, 0 <lt__alloc_die_callback>
     358:	add	x12, x12, #0x0
     35c:	cmp	x8, x19
     360:	csel	x8, x12, x9, eq  // eq = none
     364:	ldr	x0, [x10, #56]
     368:	str	x11, [x8]
     36c:	ldr	x8, [x10, #24]
     370:	ldr	x1, [x19, #56]
     374:	blr	x8
     378:	mov	w20, w0
     37c:	mov	x0, x19
     380:	bl	1398 <unload_deplibs>
     384:	ldr	x8, [x19, #72]
     388:	add	w20, w0, w20
     38c:	mov	x0, x8
     390:	bl	0 <free>
     394:	ldr	x0, [x19, #16]
     398:	str	xzr, [x19, #72]
     39c:	bl	0 <free>
     3a0:	ldr	x0, [x19, #24]
     3a4:	str	xzr, [x19, #16]
     3a8:	bl	0 <free>
     3ac:	mov	x0, x19
     3b0:	str	xzr, [x19, #24]
     3b4:	bl	0 <free>
     3b8:	b	3ec <lt_dlclose+0x10c>
     3bc:	ldrb	w8, [x19, #36]
     3c0:	tbnz	w8, #0, 3dc <lt_dlclose+0xfc>
     3c4:	mov	w20, wzr
     3c8:	b	3ec <lt_dlclose+0x10c>
     3cc:	mov	x9, x8
     3d0:	tbnz	w10, #0, 338 <lt_dlclose+0x58>
     3d4:	mov	w0, #0xc                   	// #12
     3d8:	b	3e0 <lt_dlclose+0x100>
     3dc:	mov	w0, #0x10                  	// #16
     3e0:	bl	0 <lt__error_string>
     3e4:	bl	0 <lt__set_last_error>
     3e8:	mov	w20, #0x1                   	// #1
     3ec:	mov	w0, w20
     3f0:	ldp	x20, x19, [sp, #16]
     3f4:	ldp	x29, x30, [sp], #32
     3f8:	ret

00000000000003fc <lt_dladvise_init>:
     3fc:	stp	x29, x30, [sp, #-32]!
     400:	str	x19, [sp, #16]
     404:	mov	x19, x0
     408:	mov	w0, #0x4                   	// #4
     40c:	mov	x29, sp
     410:	bl	0 <lt__zalloc>
     414:	str	x0, [x19]
     418:	ldr	x19, [sp, #16]
     41c:	cmp	x0, #0x0
     420:	cset	w8, eq  // eq = none
     424:	mov	w0, w8
     428:	ldp	x29, x30, [sp], #32
     42c:	ret

0000000000000430 <lt_dladvise_destroy>:
     430:	cbz	x0, 458 <lt_dladvise_destroy+0x28>
     434:	stp	x29, x30, [sp, #-32]!
     438:	str	x19, [sp, #16]
     43c:	mov	x19, x0
     440:	ldr	x0, [x0]
     444:	mov	x29, sp
     448:	bl	0 <free>
     44c:	str	xzr, [x19]
     450:	ldr	x19, [sp, #16]
     454:	ldp	x29, x30, [sp], #32
     458:	mov	w0, wzr
     45c:	ret

0000000000000460 <lt_dladvise_ext>:
     460:	stp	x29, x30, [sp, #-16]!
     464:	mov	x29, sp
     468:	cbz	x0, 48c <lt_dladvise_ext+0x2c>
     46c:	ldr	x8, [x0]
     470:	cbz	x8, 48c <lt_dladvise_ext+0x2c>
     474:	ldrb	w9, [x8]
     478:	mov	w0, wzr
     47c:	orr	w9, w9, #0x1
     480:	strb	w9, [x8]
     484:	ldp	x29, x30, [sp], #16
     488:	ret
     48c:	adrp	x0, 0 <lt__alloc_die_callback>
     490:	adrp	x1, 0 <lt__alloc_die_callback>
     494:	adrp	x3, 0 <lt__alloc_die_callback>
     498:	add	x0, x0, #0x0
     49c:	add	x1, x1, #0x0
     4a0:	add	x3, x3, #0x0
     4a4:	mov	w2, #0x631                 	// #1585
     4a8:	bl	0 <__assert_fail>

00000000000004ac <lt_dladvise_resident>:
     4ac:	stp	x29, x30, [sp, #-16]!
     4b0:	mov	x29, sp
     4b4:	cbz	x0, 4d8 <lt_dladvise_resident+0x2c>
     4b8:	ldr	x8, [x0]
     4bc:	cbz	x8, 4d8 <lt_dladvise_resident+0x2c>
     4c0:	ldrb	w9, [x8]
     4c4:	mov	w0, wzr
     4c8:	orr	w9, w9, #0x2
     4cc:	strb	w9, [x8]
     4d0:	ldp	x29, x30, [sp], #16
     4d4:	ret
     4d8:	adrp	x0, 0 <lt__alloc_die_callback>
     4dc:	adrp	x1, 0 <lt__alloc_die_callback>
     4e0:	adrp	x3, 0 <lt__alloc_die_callback>
     4e4:	add	x0, x0, #0x0
     4e8:	add	x1, x1, #0x0
     4ec:	add	x3, x3, #0x0
     4f0:	mov	w2, #0x639                 	// #1593
     4f4:	bl	0 <__assert_fail>

00000000000004f8 <lt_dladvise_local>:
     4f8:	stp	x29, x30, [sp, #-16]!
     4fc:	mov	x29, sp
     500:	cbz	x0, 524 <lt_dladvise_local+0x2c>
     504:	ldr	x8, [x0]
     508:	cbz	x8, 524 <lt_dladvise_local+0x2c>
     50c:	ldrb	w9, [x8]
     510:	mov	w0, wzr
     514:	orr	w9, w9, #0x8
     518:	strb	w9, [x8]
     51c:	ldp	x29, x30, [sp], #16
     520:	ret
     524:	adrp	x0, 0 <lt__alloc_die_callback>
     528:	adrp	x1, 0 <lt__alloc_die_callback>
     52c:	adrp	x3, 0 <lt__alloc_die_callback>
     530:	add	x0, x0, #0x0
     534:	add	x1, x1, #0x0
     538:	add	x3, x3, #0x0
     53c:	mov	w2, #0x641                 	// #1601
     540:	bl	0 <__assert_fail>

0000000000000544 <lt_dladvise_global>:
     544:	stp	x29, x30, [sp, #-16]!
     548:	mov	x29, sp
     54c:	cbz	x0, 570 <lt_dladvise_global+0x2c>
     550:	ldr	x8, [x0]
     554:	cbz	x8, 570 <lt_dladvise_global+0x2c>
     558:	ldrb	w9, [x8]
     55c:	mov	w0, wzr
     560:	orr	w9, w9, #0x4
     564:	strb	w9, [x8]
     568:	ldp	x29, x30, [sp], #16
     56c:	ret
     570:	adrp	x0, 0 <lt__alloc_die_callback>
     574:	adrp	x1, 0 <lt__alloc_die_callback>
     578:	adrp	x3, 0 <lt__alloc_die_callback>
     57c:	add	x0, x0, #0x0
     580:	add	x1, x1, #0x0
     584:	add	x3, x3, #0x0
     588:	mov	w2, #0x649                 	// #1609
     58c:	bl	0 <__assert_fail>

0000000000000590 <lt_dladvise_preload>:
     590:	stp	x29, x30, [sp, #-16]!
     594:	mov	x29, sp
     598:	cbz	x0, 5bc <lt_dladvise_preload+0x2c>
     59c:	ldr	x8, [x0]
     5a0:	cbz	x8, 5bc <lt_dladvise_preload+0x2c>
     5a4:	ldrb	w9, [x8]
     5a8:	mov	w0, wzr
     5ac:	orr	w9, w9, #0x10
     5b0:	strb	w9, [x8]
     5b4:	ldp	x29, x30, [sp], #16
     5b8:	ret
     5bc:	adrp	x0, 0 <lt__alloc_die_callback>
     5c0:	adrp	x1, 0 <lt__alloc_die_callback>
     5c4:	adrp	x3, 0 <lt__alloc_die_callback>
     5c8:	add	x0, x0, #0x0
     5cc:	add	x1, x1, #0x0
     5d0:	add	x3, x3, #0x0
     5d4:	mov	w2, #0x651                 	// #1617
     5d8:	bl	0 <__assert_fail>

00000000000005dc <lt_dlopen>:
     5dc:	stp	x29, x30, [sp, #-16]!
     5e0:	mov	x1, xzr
     5e4:	mov	x29, sp
     5e8:	bl	5f4 <lt_dlopenadvise>
     5ec:	ldp	x29, x30, [sp], #16
     5f0:	ret

00000000000005f4 <lt_dlopenadvise>:
     5f4:	stp	x29, x30, [sp, #-48]!
     5f8:	mov	x29, sp
     5fc:	str	x21, [sp, #16]
     600:	stp	x20, x19, [sp, #32]
     604:	mov	x19, x1
     608:	mov	x20, x0
     60c:	str	xzr, [x29, #24]
     610:	bl	0 <lt__get_last_error>
     614:	mov	x21, x0
     618:	cbz	x19, 640 <lt_dlopenadvise+0x4c>
     61c:	ldrb	w8, [x19]
     620:	mvn	w8, w8
     624:	tst	w8, #0xc
     628:	b.ne	640 <lt_dlopenadvise+0x4c>  // b.any
     62c:	mov	w0, #0x13                  	// #19
     630:	bl	0 <lt__error_string>
     634:	bl	0 <lt__set_last_error>
     638:	mov	x0, xzr
     63c:	b	67c <lt_dlopenadvise+0x88>
     640:	cbz	x20, 65c <lt_dlopenadvise+0x68>
     644:	cbz	x19, 65c <lt_dlopenadvise+0x68>
     648:	ldrb	w8, [x19]
     64c:	tbz	w8, #0, 65c <lt_dlopenadvise+0x68>
     650:	mov	x0, x20
     654:	bl	760 <has_library_ext>
     658:	cbz	w0, 68c <lt_dlopenadvise+0x98>
     65c:	add	x0, x29, #0x18
     660:	mov	x1, x20
     664:	mov	x2, xzr
     668:	mov	x3, x19
     66c:	bl	7dc <try_dlopen>
     670:	ldr	x8, [x29, #24]
     674:	cmp	w0, #0x0
     678:	csel	x0, x8, xzr, eq  // eq = none
     67c:	ldp	x20, x19, [sp, #32]
     680:	ldr	x21, [sp, #16]
     684:	ldp	x29, x30, [sp], #48
     688:	ret
     68c:	ldrb	w8, [x20]
     690:	cbz	w8, 704 <lt_dlopenadvise+0x110>
     694:	adrp	x2, 0 <lt__alloc_die_callback>
     698:	add	x2, x2, #0x0
     69c:	add	x0, x29, #0x18
     6a0:	mov	x1, x20
     6a4:	mov	x3, x19
     6a8:	bl	7dc <try_dlopen>
     6ac:	ldr	x8, [x29, #24]
     6b0:	cbnz	x8, 6ec <lt_dlopenadvise+0xf8>
     6b4:	cmp	w0, #0x1
     6b8:	b.lt	6c4 <lt_dlopenadvise+0xd0>  // b.tstop
     6bc:	bl	1000 <file_not_found>
     6c0:	cbz	w0, 6ec <lt_dlopenadvise+0xf8>
     6c4:	mov	x0, x21
     6c8:	bl	0 <lt__set_last_error>
     6cc:	adrp	x2, 0 <lt__alloc_die_callback>
     6d0:	add	x2, x2, #0x0
     6d4:	add	x0, x29, #0x18
     6d8:	mov	x1, x20
     6dc:	mov	x3, x19
     6e0:	bl	7dc <try_dlopen>
     6e4:	ldr	x8, [x29, #24]
     6e8:	cbz	x8, 6f4 <lt_dlopenadvise+0x100>
     6ec:	ldr	x0, [x29, #24]
     6f0:	b	67c <lt_dlopenadvise+0x88>
     6f4:	cmp	w0, #0x1
     6f8:	b.lt	704 <lt_dlopenadvise+0x110>  // b.tstop
     6fc:	bl	1000 <file_not_found>
     700:	cbz	w0, 6ec <lt_dlopenadvise+0xf8>
     704:	mov	w0, #0x5                   	// #5
     708:	b	630 <lt_dlopenadvise+0x3c>

000000000000070c <lt_dlopenext>:
     70c:	stp	x29, x30, [sp, #-32]!
     710:	mov	x29, sp
     714:	str	x19, [sp, #16]
     718:	mov	x19, x0
     71c:	add	x0, x29, #0x18
     720:	bl	3fc <lt_dladvise_init>
     724:	cbz	w0, 730 <lt_dlopenext+0x24>
     728:	mov	x19, xzr
     72c:	b	748 <lt_dlopenext+0x3c>
     730:	add	x0, x29, #0x18
     734:	bl	460 <lt_dladvise_ext>
     738:	ldr	x1, [x29, #24]
     73c:	mov	x0, x19
     740:	bl	5f4 <lt_dlopenadvise>
     744:	mov	x19, x0
     748:	add	x0, x29, #0x18
     74c:	bl	430 <lt_dladvise_destroy>
     750:	mov	x0, x19
     754:	ldr	x19, [sp, #16]
     758:	ldp	x29, x30, [sp], #32
     75c:	ret

0000000000000760 <has_library_ext>:
     760:	stp	x29, x30, [sp, #-32]!
     764:	str	x19, [sp, #16]
     768:	mov	x29, sp
     76c:	cbz	x0, 7bc <has_library_ext+0x5c>
     770:	mov	w1, #0x2e                  	// #46
     774:	bl	0 <strrchr>
     778:	cbz	x0, 7a4 <has_library_ext+0x44>
     77c:	adrp	x1, 0 <lt__alloc_die_callback>
     780:	add	x1, x1, #0x0
     784:	mov	x19, x0
     788:	bl	0 <strcmp>
     78c:	cbz	w0, 7ac <has_library_ext+0x4c>
     790:	adrp	x1, 0 <lt__alloc_die_callback>
     794:	add	x1, x1, #0x0
     798:	mov	x0, x19
     79c:	bl	0 <strcmp>
     7a0:	cbz	w0, 7ac <has_library_ext+0x4c>
     7a4:	mov	w0, wzr
     7a8:	b	7b0 <has_library_ext+0x50>
     7ac:	mov	w0, #0x1                   	// #1
     7b0:	ldr	x19, [sp, #16]
     7b4:	ldp	x29, x30, [sp], #32
     7b8:	ret
     7bc:	adrp	x0, 0 <lt__alloc_die_callback>
     7c0:	adrp	x1, 0 <lt__alloc_die_callback>
     7c4:	adrp	x3, 0 <lt__alloc_die_callback>
     7c8:	add	x0, x0, #0x0
     7cc:	add	x1, x1, #0x0
     7d0:	add	x3, x3, #0x0
     7d4:	mov	w2, #0x608                 	// #1544
     7d8:	bl	0 <__assert_fail>

00000000000007dc <try_dlopen>:
     7dc:	sub	sp, sp, #0xb0
     7e0:	stp	x29, x30, [sp, #80]
     7e4:	add	x29, sp, #0x50
     7e8:	stp	x28, x27, [sp, #96]
     7ec:	stp	x26, x25, [sp, #112]
     7f0:	stp	x24, x23, [sp, #128]
     7f4:	stp	x22, x21, [sp, #144]
     7f8:	stp	x20, x19, [sp, #160]
     7fc:	stp	xzr, xzr, [x29, #-16]
     800:	cbz	x0, f60 <try_dlopen+0x784>
     804:	ldr	x8, [x0]
     808:	mov	x20, x0
     80c:	cbnz	x8, f80 <try_dlopen+0x7a4>
     810:	mov	x26, x3
     814:	mov	x23, x2
     818:	mov	x22, x1
     81c:	bl	0 <lt__get_last_error>
     820:	mov	x21, x0
     824:	cbz	x22, 854 <try_dlopen+0x78>
     828:	ldrb	w8, [x22]
     82c:	cbz	w8, fa0 <try_dlopen+0x7c4>
     830:	cbz	x23, 8a0 <try_dlopen+0xc4>
     834:	mov	x0, x22
     838:	bl	0 <strlen>
     83c:	ldrb	w8, [x23]
     840:	mov	x19, x0
     844:	cbz	w8, 8b4 <try_dlopen+0xd8>
     848:	mov	x0, x23
     84c:	bl	0 <strlen>
     850:	b	8b8 <try_dlopen+0xdc>
     854:	mov	w0, #0x58                  	// #88
     858:	bl	0 <lt__zalloc>
     85c:	str	x0, [x20]
     860:	cbz	x0, 904 <try_dlopen+0x128>
     864:	stur	x0, [x29, #-24]
     868:	ldrb	w8, [x0, #36]
     86c:	mov	x1, xzr
     870:	mov	x2, x26
     874:	mov	x3, xzr
     878:	orr	w8, w8, #0x1
     87c:	strb	w8, [x0, #36]
     880:	sub	x0, x29, #0x18
     884:	bl	1ed8 <tryall_dlopen>
     888:	cbz	w0, 964 <try_dlopen+0x188>
     88c:	ldr	x0, [x20]
     890:	bl	0 <free>
     894:	str	xzr, [x20]
     898:	mov	w23, #0x1                   	// #1
     89c:	b	b54 <try_dlopen+0x378>
     8a0:	mov	x0, x22
     8a4:	bl	0 <lt__strdup>
     8a8:	mov	x19, x0
     8ac:	cbnz	x0, 8e0 <try_dlopen+0x104>
     8b0:	b	904 <try_dlopen+0x128>
     8b4:	mov	x0, xzr
     8b8:	add	x8, x19, x0
     8bc:	add	x0, x8, #0x1
     8c0:	bl	0 <lt__malloc>
     8c4:	cbz	x0, 904 <try_dlopen+0x128>
     8c8:	adrp	x1, 0 <lt__alloc_die_callback>
     8cc:	add	x1, x1, #0x0
     8d0:	mov	x2, x22
     8d4:	mov	x3, x23
     8d8:	mov	x19, x0
     8dc:	bl	0 <sprintf>
     8e0:	sub	x1, x29, #0x8
     8e4:	mov	x0, x19
     8e8:	bl	197c <canonicalize_path>
     8ec:	cbz	w0, 90c <try_dlopen+0x130>
     8f0:	mov	x24, xzr
     8f4:	mov	x22, xzr
     8f8:	mov	x25, xzr
     8fc:	mov	w23, #0x1                   	// #1
     900:	b	b14 <try_dlopen+0x338>
     904:	mov	w23, #0x1                   	// #1
     908:	b	b54 <try_dlopen+0x378>
     90c:	ldur	x22, [x29, #-8]
     910:	mov	w1, #0x2f                  	// #47
     914:	mov	x0, x22
     918:	bl	0 <strrchr>
     91c:	cbz	x0, 9ec <try_dlopen+0x210>
     920:	add	x25, x0, #0x1
     924:	sub	x22, x25, x22
     928:	mov	x24, x0
     92c:	add	x0, x22, #0x1
     930:	bl	0 <lt__malloc>
     934:	stur	x0, [x29, #-16]
     938:	cbz	x0, 9fc <try_dlopen+0x220>
     93c:	ldur	x1, [x29, #-8]
     940:	mov	x2, x22
     944:	bl	0 <lt_strlcpy>
     948:	ldur	x9, [x29, #-16]
     94c:	mov	w8, wzr
     950:	mov	w23, wzr
     954:	strb	wzr, [x9, x22]
     958:	mov	x22, x25
     95c:	cbnz	w8, a0c <try_dlopen+0x230>
     960:	b	a20 <try_dlopen+0x244>
     964:	mov	w23, wzr
     968:	mov	x19, xzr
     96c:	mov	x24, xzr
     970:	mov	x22, xzr
     974:	mov	x25, xzr
     978:	ldr	x0, [x20]
     97c:	ldur	x8, [x29, #-24]
     980:	cmp	x0, x8
     984:	b.eq	998 <try_dlopen+0x1bc>  // b.none
     988:	bl	0 <free>
     98c:	ldur	x8, [x29, #-24]
     990:	str	x8, [x20]
     994:	stur	xzr, [x29, #-24]
     998:	ldr	x8, [x20]
     99c:	ldr	w9, [x8, #32]
     9a0:	cbnz	w9, 9e0 <try_dlopen+0x204>
     9a4:	ldr	x0, [x8, #24]
     9a8:	mov	w9, #0x1                   	// #1
     9ac:	str	w9, [x8, #32]
     9b0:	cmp	x0, x24
     9b4:	b.eq	9c8 <try_dlopen+0x1ec>  // b.none
     9b8:	bl	0 <free>
     9bc:	ldr	x8, [x20]
     9c0:	str	x24, [x8, #24]
     9c4:	mov	x24, xzr
     9c8:	adrp	x8, 0 <lt__alloc_die_callback>
     9cc:	ldr	x9, [x8]
     9d0:	ldr	x10, [x20]
     9d4:	str	x9, [x10]
     9d8:	ldr	x9, [x20]
     9dc:	str	x9, [x8]
     9e0:	mov	x0, x21
     9e4:	bl	0 <lt__set_last_error>
     9e8:	b	b14 <try_dlopen+0x338>
     9ec:	mov	w23, wzr
     9f0:	cbz	x22, a20 <try_dlopen+0x244>
     9f4:	stur	xzr, [x29, #-8]
     9f8:	b	a20 <try_dlopen+0x244>
     9fc:	mov	w23, #0x1                   	// #1
     a00:	mov	w8, #0x3                   	// #3
     a04:	mov	x22, x24
     a08:	cbz	w8, a20 <try_dlopen+0x244>
     a0c:	cmp	w8, #0x3
     a10:	b.ne	b54 <try_dlopen+0x378>  // b.any
     a14:	mov	x24, xzr
     a18:	mov	x25, xzr
     a1c:	b	b14 <try_dlopen+0x338>
     a20:	cbz	x22, fc0 <try_dlopen+0x7e4>
     a24:	ldrb	w8, [x22]
     a28:	cbz	w8, fc0 <try_dlopen+0x7e4>
     a2c:	mov	w1, #0x2e                  	// #46
     a30:	mov	x0, x22
     a34:	bl	0 <strrchr>
     a38:	mov	x27, x0
     a3c:	cbnz	x0, a4c <try_dlopen+0x270>
     a40:	mov	x0, x22
     a44:	bl	0 <strlen>
     a48:	add	x27, x22, x0
     a4c:	sub	x25, x27, x22
     a50:	add	x0, x25, #0x1
     a54:	bl	0 <lt__malloc>
     a58:	mov	x24, x0
     a5c:	cbz	x0, b0c <try_dlopen+0x330>
     a60:	cmp	x25, #0x1
     a64:	b.lt	a9c <try_dlopen+0x2c0>  // b.tstop
     a68:	bl	0 <__ctype_b_loc>
     a6c:	mov	w8, #0x5f                  	// #95
     a70:	mov	x9, x25
     a74:	mov	x10, x22
     a78:	mov	x11, x24
     a7c:	ldr	x12, [x0]
     a80:	ldrb	w13, [x10], #1
     a84:	ldrh	w12, [x12, x13, lsl #1]
     a88:	tst	w12, #0x8
     a8c:	csel	w12, w8, w13, eq  // eq = none
     a90:	subs	x9, x9, #0x1
     a94:	strb	w12, [x11], #1
     a98:	b.ne	a7c <try_dlopen+0x2a0>  // b.any
     a9c:	strb	wzr, [x24, x25]
     aa0:	ldur	x8, [x29, #-16]
     aa4:	cbz	x8, b78 <try_dlopen+0x39c>
     aa8:	mov	x25, xzr
     aac:	cbz	x26, ab8 <try_dlopen+0x2dc>
     ab0:	ldrb	w8, [x26]
     ab4:	tbnz	w8, #4, b14 <try_dlopen+0x338>
     ab8:	cbz	x27, ad0 <try_dlopen+0x2f4>
     abc:	adrp	x1, 0 <lt__alloc_die_callback>
     ac0:	add	x1, x1, #0x0
     ac4:	mov	x0, x27
     ac8:	bl	0 <strcmp>
     acc:	cbz	w0, bac <try_dlopen+0x3d0>
     ad0:	mov	w0, #0x58                  	// #88
     ad4:	bl	0 <lt__zalloc>
     ad8:	str	x0, [x20]
     adc:	cbz	x0, b10 <try_dlopen+0x334>
     ae0:	ldur	x8, [x29, #-16]
     ae4:	stur	x0, [x29, #-24]
     ae8:	cbz	x8, bfc <try_dlopen+0x420>
     aec:	sub	x0, x29, #0x18
     af0:	mov	x1, x19
     af4:	mov	x2, x26
     af8:	mov	x3, xzr
     afc:	bl	1ed8 <tryall_dlopen>
     b00:	cbz	w0, c74 <try_dlopen+0x498>
     b04:	stur	xzr, [x29, #-24]
     b08:	b	c74 <try_dlopen+0x498>
     b0c:	mov	x25, xzr
     b10:	add	w23, w23, #0x1
     b14:	ldur	x0, [x29, #-16]
     b18:	bl	0 <free>
     b1c:	mov	x0, x19
     b20:	stur	xzr, [x29, #-16]
     b24:	bl	0 <free>
     b28:	mov	x0, x24
     b2c:	bl	0 <free>
     b30:	ldur	x8, [x29, #-8]
     b34:	cbnz	x8, b40 <try_dlopen+0x364>
     b38:	mov	x0, x22
     b3c:	bl	0 <free>
     b40:	ldur	x0, [x29, #-8]
     b44:	bl	0 <free>
     b48:	mov	x0, x25
     b4c:	stur	xzr, [x29, #-8]
     b50:	bl	0 <free>
     b54:	mov	w0, w23
     b58:	ldp	x20, x19, [sp, #160]
     b5c:	ldp	x22, x21, [sp, #144]
     b60:	ldp	x24, x23, [sp, #128]
     b64:	ldp	x26, x25, [sp, #112]
     b68:	ldp	x28, x27, [sp, #96]
     b6c:	ldp	x29, x30, [sp, #80]
     b70:	add	sp, sp, #0xb0
     b74:	ret
     b78:	adrp	x0, 0 <lt__alloc_die_callback>
     b7c:	add	x0, x0, #0x0
     b80:	bl	0 <lt_dlloader_find>
     b84:	cbz	x0, ba0 <try_dlopen+0x3c4>
     b88:	ldrb	w8, [x24]
     b8c:	mov	x28, x0
     b90:	cbz	w8, c8c <try_dlopen+0x4b0>
     b94:	mov	x0, x24
     b98:	bl	0 <strlen>
     b9c:	b	c90 <try_dlopen+0x4b4>
     ba0:	mov	w8, wzr
     ba4:	mov	x25, xzr
     ba8:	b	d50 <try_dlopen+0x574>
     bac:	ldur	x8, [x29, #-16]
     bb0:	mov	w9, #0x1                   	// #1
     bb4:	stur	xzr, [x29, #-32]
     bb8:	stp	xzr, xzr, [sp, #32]
     bbc:	str	xzr, [sp, #24]
     bc0:	str	w9, [sp, #20]
     bc4:	cbz	x8, d68 <try_dlopen+0x58c>
     bc8:	adrp	x1, 0 <lt__alloc_die_callback>
     bcc:	add	x1, x1, #0x0
     bd0:	mov	x0, x19
     bd4:	bl	0 <fopen>
     bd8:	mov	x27, x0
     bdc:	cbnz	x27, d9c <try_dlopen+0x5c0>
     be0:	mov	w0, #0x5                   	// #5
     be4:	bl	0 <lt__error_string>
     be8:	bl	0 <lt__set_last_error>
     bec:	add	w23, w23, #0x1
     bf0:	mov	w8, #0x3                   	// #3
     bf4:	cbnz	w8, f1c <try_dlopen+0x740>
     bf8:	b	978 <try_dlopen+0x19c>
     bfc:	adrp	x8, 0 <lt__alloc_die_callback>
     c00:	ldr	x0, [x8]
     c04:	sub	x2, x29, #0x18
     c08:	mov	x1, x22
     c0c:	mov	x3, x26
     c10:	bl	247c <find_handle>
     c14:	cbnz	x0, c74 <try_dlopen+0x498>
     c18:	adrp	x0, 0 <lt__alloc_die_callback>
     c1c:	add	x0, x0, #0x0
     c20:	bl	0 <getenv>
     c24:	sub	x2, x29, #0x18
     c28:	mov	x1, x22
     c2c:	mov	x3, x26
     c30:	bl	247c <find_handle>
     c34:	cbnz	x0, c74 <try_dlopen+0x498>
     c38:	adrp	x0, 0 <lt__alloc_die_callback>
     c3c:	add	x0, x0, #0x0
     c40:	bl	0 <getenv>
     c44:	sub	x2, x29, #0x18
     c48:	mov	x1, x22
     c4c:	mov	x3, x26
     c50:	bl	247c <find_handle>
     c54:	cbnz	x0, c74 <try_dlopen+0x498>
     c58:	adrp	x0, 0 <lt__alloc_die_callback>
     c5c:	add	x0, x0, #0x0
     c60:	sub	x2, x29, #0x18
     c64:	mov	x1, x22
     c68:	mov	x3, x26
     c6c:	bl	247c <find_handle>
     c70:	cbz	x0, aec <try_dlopen+0x310>
     c74:	ldur	x8, [x29, #-24]
     c78:	cbnz	x8, 978 <try_dlopen+0x19c>
     c7c:	ldr	x0, [x20]
     c80:	bl	0 <free>
     c84:	str	xzr, [x20]
     c88:	b	b10 <try_dlopen+0x334>
     c8c:	mov	x0, xzr
     c90:	add	x0, x0, #0x6
     c94:	bl	0 <lt__malloc>
     c98:	mov	x25, x0
     c9c:	mov	w0, #0x58                  	// #88
     ca0:	bl	0 <lt__zalloc>
     ca4:	str	x0, [x20]
     ca8:	cbz	x25, cec <try_dlopen+0x510>
     cac:	cbz	x0, cec <try_dlopen+0x510>
     cb0:	adrp	x1, 0 <lt__alloc_die_callback>
     cb4:	stur	x0, [x29, #-24]
     cb8:	add	x1, x1, #0x0
     cbc:	mov	w2, #0x3                   	// #3
     cc0:	mov	x0, x24
     cc4:	bl	0 <strncmp>
     cc8:	cbz	w0, cf8 <try_dlopen+0x51c>
     ccc:	adrp	x1, 0 <lt__alloc_die_callback>
     cd0:	adrp	x3, 0 <lt__alloc_die_callback>
     cd4:	add	x1, x1, #0x0
     cd8:	add	x3, x3, #0x0
     cdc:	mov	x0, x25
     ce0:	mov	x2, x24
     ce4:	bl	0 <sprintf>
     ce8:	b	d1c <try_dlopen+0x540>
     cec:	add	w23, w23, #0x1
     cf0:	mov	w8, #0x3                   	// #3
     cf4:	b	d50 <try_dlopen+0x574>
     cf8:	adrp	x1, 0 <lt__alloc_die_callback>
     cfc:	adrp	x2, 0 <lt__alloc_die_callback>
     d00:	adrp	x4, 0 <lt__alloc_die_callback>
     d04:	add	x3, x24, #0x3
     d08:	add	x1, x1, #0x0
     d0c:	add	x2, x2, #0x0
     d10:	add	x4, x4, #0x0
     d14:	mov	x0, x25
     d18:	bl	0 <sprintf>
     d1c:	sub	x0, x29, #0x18
     d20:	mov	x1, x25
     d24:	mov	x2, x26
     d28:	mov	x3, x28
     d2c:	bl	1ed8 <tryall_dlopen>
     d30:	cbz	w0, d4c <try_dlopen+0x570>
     d34:	ldr	x0, [x20]
     d38:	bl	0 <free>
     d3c:	mov	w8, wzr
     d40:	str	xzr, [x20]
     d44:	stur	xzr, [x29, #-24]
     d48:	b	d50 <try_dlopen+0x574>
     d4c:	mov	w8, #0x2                   	// #2
     d50:	cmp	w8, #0x3
     d54:	b.eq	b14 <try_dlopen+0x338>  // b.none
     d58:	cmp	w8, #0x2
     d5c:	b.eq	978 <try_dlopen+0x19c>  // b.none
     d60:	cbz	w8, aac <try_dlopen+0x2d0>
     d64:	b	b54 <try_dlopen+0x378>
     d68:	adrp	x8, 0 <lt__alloc_die_callback>
     d6c:	ldr	x0, [x8]
     d70:	cbz	x0, d88 <try_dlopen+0x5ac>
     d74:	sub	x2, x29, #0x10
     d78:	mov	x1, x22
     d7c:	bl	2084 <find_file>
     d80:	mov	x27, x0
     d84:	b	d8c <try_dlopen+0x5b0>
     d88:	mov	x27, xzr
     d8c:	cbz	x27, e68 <try_dlopen+0x68c>
     d90:	cbz	x27, e8c <try_dlopen+0x6b0>
     d94:	cbz	x27, eb0 <try_dlopen+0x6d4>
     d98:	cbz	x27, be0 <try_dlopen+0x404>
     d9c:	sub	x1, x29, #0x20
     da0:	add	x2, sp, #0x20
     da4:	add	x3, sp, #0x18
     da8:	add	x4, sp, #0x28
     dac:	add	x5, sp, #0x14
     db0:	mov	x0, x27
     db4:	bl	20b8 <parse_dotla_file>
     db8:	cmp	w0, #0x0
     dbc:	mov	x0, x27
     dc0:	cinc	w23, w23, ne  // ne = any
     dc4:	bl	0 <fclose>
     dc8:	mov	w0, #0x58                  	// #88
     dcc:	bl	0 <lt__zalloc>
     dd0:	cmp	x0, #0x0
     dd4:	cinc	w23, w23, eq  // eq = none
     dd8:	str	x0, [x20]
     ddc:	cbz	w23, e18 <try_dlopen+0x63c>
     de0:	ldur	x0, [x29, #-32]
     de4:	bl	0 <free>
     de8:	ldr	x0, [sp, #40]
     dec:	stur	xzr, [x29, #-32]
     df0:	bl	0 <free>
     df4:	ldr	x0, [sp, #32]
     df8:	str	xzr, [sp, #40]
     dfc:	bl	0 <free>
     e00:	ldr	x0, [sp, #24]
     e04:	str	xzr, [sp, #32]
     e08:	bl	0 <free>
     e0c:	str	xzr, [sp, #24]
     e10:	ldr	x0, [x20]
     e14:	b	f0c <try_dlopen+0x730>
     e18:	ldr	x0, [x20]
     e1c:	cbz	x0, fe0 <try_dlopen+0x804>
     e20:	bl	2390 <load_deplibs>
     e24:	ldp	x2, x28, [sp, #32]
     e28:	ldur	x27, [x29, #-32]
     e2c:	ldr	x8, [x20]
     e30:	ldur	x1, [x29, #-16]
     e34:	ldr	w5, [sp, #20]
     e38:	sub	x0, x29, #0x18
     e3c:	mov	x3, x27
     e40:	mov	x4, x28
     e44:	mov	x6, x26
     e48:	stur	x8, [x29, #-24]
     e4c:	str	x2, [sp, #8]
     e50:	bl	2398 <find_module>
     e54:	cbz	w0, ed0 <try_dlopen+0x6f4>
     e58:	ldr	x0, [x20]
     e5c:	bl	1398 <unload_deplibs>
     e60:	mov	w23, #0x1                   	// #1
     e64:	b	ed4 <try_dlopen+0x6f8>
     e68:	adrp	x0, 0 <lt__alloc_die_callback>
     e6c:	add	x0, x0, #0x0
     e70:	bl	0 <getenv>
     e74:	cbz	x0, f48 <try_dlopen+0x76c>
     e78:	sub	x2, x29, #0x10
     e7c:	mov	x1, x22
     e80:	bl	2084 <find_file>
     e84:	mov	x27, x0
     e88:	cbnz	x27, d94 <try_dlopen+0x5b8>
     e8c:	adrp	x0, 0 <lt__alloc_die_callback>
     e90:	add	x0, x0, #0x0
     e94:	bl	0 <getenv>
     e98:	cbz	x0, f54 <try_dlopen+0x778>
     e9c:	sub	x2, x29, #0x10
     ea0:	mov	x1, x22
     ea4:	bl	2084 <find_file>
     ea8:	mov	x27, x0
     eac:	cbnz	x27, d98 <try_dlopen+0x5bc>
     eb0:	adrp	x0, 0 <lt__alloc_die_callback>
     eb4:	add	x0, x0, #0x0
     eb8:	sub	x2, x29, #0x10
     ebc:	mov	x1, x22
     ec0:	bl	2084 <find_file>
     ec4:	mov	x27, x0
     ec8:	cbnz	x27, d9c <try_dlopen+0x5c0>
     ecc:	b	be0 <try_dlopen+0x404>
     ed0:	mov	w23, wzr
     ed4:	mov	x0, x27
     ed8:	bl	0 <free>
     edc:	mov	x0, x28
     ee0:	stur	xzr, [x29, #-32]
     ee4:	bl	0 <free>
     ee8:	ldr	x0, [sp, #8]
     eec:	str	xzr, [sp, #40]
     ef0:	bl	0 <free>
     ef4:	ldr	x0, [sp, #24]
     ef8:	str	xzr, [sp, #32]
     efc:	bl	0 <free>
     f00:	str	xzr, [sp, #24]
     f04:	ldr	x0, [x20]
     f08:	cbz	w23, f28 <try_dlopen+0x74c>
     f0c:	bl	0 <free>
     f10:	str	xzr, [x20]
     f14:	mov	w8, #0x3                   	// #3
     f18:	cbz	w8, 978 <try_dlopen+0x19c>
     f1c:	cmp	w8, #0x3
     f20:	b.eq	b14 <try_dlopen+0x338>  // b.none
     f24:	b	b54 <try_dlopen+0x378>
     f28:	ldur	x8, [x29, #-24]
     f2c:	cmp	x0, x8
     f30:	b.eq	f38 <try_dlopen+0x75c>  // b.none
     f34:	bl	1398 <unload_deplibs>
     f38:	mov	w8, wzr
     f3c:	mov	w23, wzr
     f40:	cbnz	w8, f1c <try_dlopen+0x740>
     f44:	b	978 <try_dlopen+0x19c>
     f48:	mov	x27, xzr
     f4c:	cbnz	x27, d94 <try_dlopen+0x5b8>
     f50:	b	e8c <try_dlopen+0x6b0>
     f54:	mov	x27, xzr
     f58:	cbnz	x27, d98 <try_dlopen+0x5bc>
     f5c:	b	eb0 <try_dlopen+0x6d4>
     f60:	adrp	x0, 0 <lt__alloc_die_callback>
     f64:	adrp	x1, 0 <lt__alloc_die_callback>
     f68:	adrp	x3, 0 <lt__alloc_die_callback>
     f6c:	add	x0, x0, #0x0
     f70:	add	x1, x1, #0x0
     f74:	add	x3, x3, #0x0
     f78:	mov	w2, #0x494                 	// #1172
     f7c:	bl	0 <__assert_fail>
     f80:	adrp	x0, 0 <lt__alloc_die_callback>
     f84:	adrp	x1, 0 <lt__alloc_die_callback>
     f88:	adrp	x3, 0 <lt__alloc_die_callback>
     f8c:	add	x0, x0, #0x0
     f90:	add	x1, x1, #0x0
     f94:	add	x3, x3, #0x0
     f98:	mov	w2, #0x495                 	// #1173
     f9c:	bl	0 <__assert_fail>
     fa0:	adrp	x0, 0 <lt__alloc_die_callback>
     fa4:	adrp	x1, 0 <lt__alloc_die_callback>
     fa8:	adrp	x3, 0 <lt__alloc_die_callback>
     fac:	add	x0, x0, #0x0
     fb0:	add	x1, x1, #0x0
     fb4:	add	x3, x3, #0x0
     fb8:	mov	w2, #0x4b4                 	// #1204
     fbc:	bl	0 <__assert_fail>
     fc0:	adrp	x0, 0 <lt__alloc_die_callback>
     fc4:	adrp	x1, 0 <lt__alloc_die_callback>
     fc8:	adrp	x3, 0 <lt__alloc_die_callback>
     fcc:	add	x0, x0, #0x0
     fd0:	add	x1, x1, #0x0
     fd4:	add	x3, x3, #0x0
     fd8:	mov	w2, #0x4e3                 	// #1251
     fdc:	bl	0 <__assert_fail>
     fe0:	adrp	x0, 0 <lt__alloc_die_callback>
     fe4:	adrp	x1, 0 <lt__alloc_die_callback>
     fe8:	adrp	x3, 0 <lt__alloc_die_callback>
     fec:	add	x0, x0, #0x0
     ff0:	add	x1, x1, #0x0
     ff4:	add	x3, x3, #0x0
     ff8:	mov	w2, #0x589                 	// #1417
     ffc:	bl	0 <__assert_fail>

0000000000001000 <file_not_found>:
    1000:	stp	x29, x30, [sp, #-32]!
    1004:	str	x19, [sp, #16]
    1008:	mov	x29, sp
    100c:	bl	0 <lt__get_last_error>
    1010:	mov	x19, x0
    1014:	mov	w0, #0x5                   	// #5
    1018:	bl	0 <lt__error_string>
    101c:	cmp	x19, x0
    1020:	ldr	x19, [sp, #16]
    1024:	cset	w0, eq  // eq = none
    1028:	ldp	x29, x30, [sp], #32
    102c:	ret

0000000000001030 <lt_dlforeachfile>:
    1030:	stp	x29, x30, [sp, #-32]!
    1034:	str	x19, [sp, #16]
    1038:	mov	x29, sp
    103c:	mov	x19, x2
    1040:	str	x1, [x29, #24]
    1044:	cbz	x0, 1064 <lt_dlforeachfile+0x34>
    1048:	adrp	x2, 0 <lt__alloc_die_callback>
    104c:	add	x2, x2, #0x0
    1050:	add	x3, x29, #0x18
    1054:	mov	x1, xzr
    1058:	mov	x4, x19
    105c:	bl	10f8 <foreach_dirinpath>
    1060:	b	1090 <lt_dlforeachfile+0x60>
    1064:	adrp	x8, 0 <lt__alloc_die_callback>
    1068:	ldr	x0, [x8]
    106c:	adrp	x2, 0 <lt__alloc_die_callback>
    1070:	add	x2, x2, #0x0
    1074:	add	x3, x29, #0x18
    1078:	mov	x1, xzr
    107c:	mov	x4, x19
    1080:	bl	10f8 <foreach_dirinpath>
    1084:	cbz	w0, 109c <lt_dlforeachfile+0x6c>
    1088:	cbz	w0, 10c4 <lt_dlforeachfile+0x94>
    108c:	cbz	w0, 10ec <lt_dlforeachfile+0xbc>
    1090:	ldr	x19, [sp, #16]
    1094:	ldp	x29, x30, [sp], #32
    1098:	ret
    109c:	adrp	x0, 0 <lt__alloc_die_callback>
    10a0:	add	x0, x0, #0x0
    10a4:	bl	0 <getenv>
    10a8:	adrp	x2, 0 <lt__alloc_die_callback>
    10ac:	add	x2, x2, #0x0
    10b0:	add	x3, x29, #0x18
    10b4:	mov	x1, xzr
    10b8:	mov	x4, x19
    10bc:	bl	10f8 <foreach_dirinpath>
    10c0:	cbnz	w0, 108c <lt_dlforeachfile+0x5c>
    10c4:	adrp	x0, 0 <lt__alloc_die_callback>
    10c8:	add	x0, x0, #0x0
    10cc:	bl	0 <getenv>
    10d0:	adrp	x2, 0 <lt__alloc_die_callback>
    10d4:	add	x2, x2, #0x0
    10d8:	add	x3, x29, #0x18
    10dc:	mov	x1, xzr
    10e0:	mov	x4, x19
    10e4:	bl	10f8 <foreach_dirinpath>
    10e8:	cbnz	w0, 1090 <lt_dlforeachfile+0x60>
    10ec:	adrp	x0, 0 <lt__alloc_die_callback>
    10f0:	add	x0, x0, #0x0
    10f4:	b	1048 <lt_dlforeachfile+0x18>

00000000000010f8 <foreach_dirinpath>:
    10f8:	sub	sp, sp, #0x90
    10fc:	stp	x24, x23, [sp, #96]
    1100:	stp	x22, x21, [sp, #112]
    1104:	stp	x20, x19, [sp, #128]
    1108:	mov	x19, x4
    110c:	mov	x20, x3
    1110:	mov	x21, x2
    1114:	mov	x22, x1
    1118:	mov	x23, x0
    111c:	stp	x29, x30, [sp, #48]
    1120:	stp	x28, x27, [sp, #64]
    1124:	stp	x26, x25, [sp, #80]
    1128:	add	x29, sp, #0x30
    112c:	cbz	x1, 1148 <foreach_dirinpath+0x50>
    1130:	ldrb	w8, [x22]
    1134:	cbz	w8, 1148 <foreach_dirinpath+0x50>
    1138:	mov	x0, x22
    113c:	bl	0 <strlen>
    1140:	mov	x24, x0
    1144:	b	114c <foreach_dirinpath+0x54>
    1148:	mov	x24, xzr
    114c:	stp	xzr, xzr, [x29, #-16]
    1150:	str	xzr, [sp, #24]
    1154:	cbz	x23, 11a0 <foreach_dirinpath+0xa8>
    1158:	ldrb	w8, [x23]
    115c:	cbz	w8, 11a0 <foreach_dirinpath+0xa8>
    1160:	add	x1, sp, #0x18
    1164:	mov	x0, x23
    1168:	bl	197c <canonicalize_path>
    116c:	cbnz	w0, 11ac <foreach_dirinpath+0xb4>
    1170:	ldr	x0, [sp, #24]
    1174:	sub	x1, x29, #0x10
    1178:	sub	x2, x29, #0x8
    117c:	bl	2848 <argzize_path>
    1180:	cbnz	w0, 11ac <foreach_dirinpath+0xb4>
    1184:	mov	x26, xzr
    1188:	mov	x23, xzr
    118c:	mov	x27, xzr
    1190:	mov	w25, wzr
    1194:	add	x8, x24, #0x2
    1198:	stp	x8, x19, [sp, #8]
    119c:	b	1228 <foreach_dirinpath+0x130>
    11a0:	mov	w0, #0x5                   	// #5
    11a4:	bl	0 <lt__error_string>
    11a8:	bl	0 <lt__set_last_error>
    11ac:	mov	x23, xzr
    11b0:	mov	w25, wzr
    11b4:	ldur	x0, [x29, #-16]
    11b8:	bl	0 <free>
    11bc:	ldr	x0, [sp, #24]
    11c0:	stur	xzr, [x29, #-16]
    11c4:	bl	0 <free>
    11c8:	mov	x0, x23
    11cc:	str	xzr, [sp, #24]
    11d0:	bl	0 <free>
    11d4:	mov	w0, w25
    11d8:	ldp	x20, x19, [sp, #128]
    11dc:	ldp	x22, x21, [sp, #112]
    11e0:	ldp	x24, x23, [sp, #96]
    11e4:	ldp	x26, x25, [sp, #80]
    11e8:	ldp	x28, x27, [sp, #64]
    11ec:	ldp	x29, x30, [sp, #48]
    11f0:	add	sp, sp, #0x90
    11f4:	ret
    11f8:	add	x0, x23, x28
    11fc:	mov	x1, x22
    1200:	bl	0 <strcpy>
    1204:	ldr	x2, [sp, #16]
    1208:	mov	x0, x23
    120c:	mov	x1, x20
    1210:	blr	x21
    1214:	cmp	w0, #0x0
    1218:	cset	w8, ne  // ne = any
    121c:	mov	w25, w0
    1220:	lsl	w8, w8, #2
    1224:	cbnz	w8, 12d0 <foreach_dirinpath+0x1d8>
    1228:	ldp	x0, x1, [x29, #-16]
    122c:	mov	x2, x26
    1230:	bl	0 <argz_next>
    1234:	cbz	x0, 12d8 <foreach_dirinpath+0x1e0>
    1238:	ldrb	w8, [x0]
    123c:	mov	x26, x0
    1240:	cbz	w8, 1254 <foreach_dirinpath+0x15c>
    1244:	mov	x0, x26
    1248:	bl	0 <strlen>
    124c:	mov	x28, x0
    1250:	b	1258 <foreach_dirinpath+0x160>
    1254:	mov	x28, xzr
    1258:	add	x19, x28, #0x1
    125c:	add	x8, x19, x24
    1260:	cmp	x8, x27
    1264:	b.cc	1288 <foreach_dirinpath+0x190>  // b.lo, b.ul, b.last
    1268:	mov	x0, x23
    126c:	bl	0 <free>
    1270:	ldr	x8, [sp, #8]
    1274:	add	x27, x8, x28
    1278:	mov	x0, x27
    127c:	bl	0 <lt__malloc>
    1280:	mov	x23, x0
    1284:	cbz	x0, 12c8 <foreach_dirinpath+0x1d0>
    1288:	cmp	x27, x28
    128c:	b.ls	12ec <foreach_dirinpath+0x1f4>  // b.plast
    1290:	mov	x0, x23
    1294:	mov	x1, x26
    1298:	bl	0 <strcpy>
    129c:	cbz	x22, 1204 <foreach_dirinpath+0x10c>
    12a0:	ldrb	w8, [x22]
    12a4:	cbz	w8, 1204 <foreach_dirinpath+0x10c>
    12a8:	add	x8, x28, x23
    12ac:	ldurb	w8, [x8, #-1]
    12b0:	cmp	w8, #0x2f
    12b4:	b.eq	11f8 <foreach_dirinpath+0x100>  // b.none
    12b8:	mov	w8, #0x2f                  	// #47
    12bc:	strb	w8, [x23, x28]
    12c0:	mov	x28, x19
    12c4:	b	11f8 <foreach_dirinpath+0x100>
    12c8:	mov	w8, #0x2                   	// #2
    12cc:	cbz	w8, 1228 <foreach_dirinpath+0x130>
    12d0:	cmp	w8, #0x4
    12d4:	b.ne	12dc <foreach_dirinpath+0x1e4>  // b.any
    12d8:	mov	w8, wzr
    12dc:	orr	w8, w8, #0x2
    12e0:	cmp	w8, #0x2
    12e4:	b.eq	11b4 <foreach_dirinpath+0xbc>  // b.none
    12e8:	b	11d4 <foreach_dirinpath+0xdc>
    12ec:	adrp	x0, 0 <lt__alloc_die_callback>
    12f0:	adrp	x1, 0 <lt__alloc_die_callback>
    12f4:	adrp	x3, 0 <lt__alloc_die_callback>
    12f8:	add	x0, x0, #0x0
    12fc:	add	x1, x1, #0x0
    1300:	add	x3, x3, #0x0
    1304:	mov	w2, #0x2cd                 	// #717
    1308:	bl	0 <__assert_fail>

000000000000130c <foreachfile_callback>:
    130c:	sub	sp, sp, #0x40
    1310:	stp	x29, x30, [sp, #16]
    1314:	stp	x22, x21, [sp, #32]
    1318:	stp	x20, x19, [sp, #48]
    131c:	ldr	x22, [x1]
    1320:	mov	x19, x2
    1324:	add	x1, sp, #0x8
    1328:	mov	x2, sp
    132c:	add	x29, sp, #0x10
    1330:	stp	xzr, xzr, [sp]
    1334:	bl	28f8 <list_files_by_dir>
    1338:	mov	w20, wzr
    133c:	cbnz	w0, 1378 <foreachfile_callback+0x6c>
    1340:	ldr	x8, [sp, #8]
    1344:	cbz	x8, 1378 <foreachfile_callback+0x6c>
    1348:	mov	x21, xzr
    134c:	ldp	x1, x0, [sp]
    1350:	mov	x2, x21
    1354:	bl	0 <argz_next>
    1358:	cbz	x0, 1374 <foreachfile_callback+0x68>
    135c:	mov	x1, x19
    1360:	mov	x21, x0
    1364:	blr	x22
    1368:	cbz	w0, 134c <foreachfile_callback+0x40>
    136c:	mov	w20, w0
    1370:	b	1378 <foreachfile_callback+0x6c>
    1374:	mov	w20, wzr
    1378:	ldr	x0, [sp, #8]
    137c:	bl	0 <free>
    1380:	mov	w0, w20
    1384:	ldp	x20, x19, [sp, #48]
    1388:	ldp	x22, x21, [sp, #32]
    138c:	ldp	x29, x30, [sp, #16]
    1390:	add	sp, sp, #0x40
    1394:	ret

0000000000001398 <unload_deplibs>:
    1398:	stp	x29, x30, [sp, #-48]!
    139c:	stp	x20, x19, [sp, #32]
    13a0:	ldr	w8, [x0, #40]
    13a4:	str	x21, [sp, #16]
    13a8:	mov	x29, sp
    13ac:	cbz	w8, 13fc <unload_deplibs+0x64>
    13b0:	ldr	w8, [x0, #40]
    13b4:	mov	x19, x0
    13b8:	ldr	x0, [x0, #48]
    13bc:	cmp	w8, #0x1
    13c0:	b.lt	1404 <unload_deplibs+0x6c>  // b.tstop
    13c4:	mov	x21, xzr
    13c8:	mov	w20, wzr
    13cc:	b	13e4 <unload_deplibs+0x4c>
    13d0:	ldrsw	x8, [x19, #40]
    13d4:	ldr	x0, [x19, #48]
    13d8:	add	x21, x21, #0x1
    13dc:	cmp	x21, x8
    13e0:	b.ge	1408 <unload_deplibs+0x70>  // b.tcont
    13e4:	ldr	x0, [x0, x21, lsl #3]
    13e8:	ldrb	w8, [x0, #36]
    13ec:	tbnz	w8, #0, 13d0 <unload_deplibs+0x38>
    13f0:	bl	2e0 <lt_dlclose>
    13f4:	add	w20, w0, w20
    13f8:	b	13d0 <unload_deplibs+0x38>
    13fc:	mov	w20, wzr
    1400:	b	1410 <unload_deplibs+0x78>
    1404:	mov	w20, wzr
    1408:	bl	0 <free>
    140c:	str	xzr, [x19, #48]
    1410:	mov	w0, w20
    1414:	ldp	x20, x19, [sp, #32]
    1418:	ldr	x21, [sp, #16]
    141c:	ldp	x29, x30, [sp], #48
    1420:	ret

0000000000001424 <lt_dlsym>:
    1424:	sub	sp, sp, #0xc0
    1428:	stp	x29, x30, [sp, #128]
    142c:	stp	x24, x23, [sp, #144]
    1430:	stp	x22, x21, [sp, #160]
    1434:	stp	x20, x19, [sp, #176]
    1438:	add	x29, sp, #0x80
    143c:	cbz	x0, 1464 <lt_dlsym+0x40>
    1440:	mov	x20, x1
    1444:	cbz	x1, 146c <lt_dlsym+0x48>
    1448:	ldrb	w8, [x20]
    144c:	mov	x19, x0
    1450:	cbz	w8, 1474 <lt_dlsym+0x50>
    1454:	mov	x0, x20
    1458:	bl	0 <strlen>
    145c:	mov	x21, x0
    1460:	b	1478 <lt_dlsym+0x54>
    1464:	mov	w0, #0xc                   	// #12
    1468:	b	1520 <lt_dlsym+0xfc>
    146c:	mov	w0, #0xa                   	// #10
    1470:	b	1520 <lt_dlsym+0xfc>
    1474:	mov	x21, xzr
    1478:	ldr	x8, [x19, #8]
    147c:	ldr	x0, [x8, #8]
    1480:	cbz	x0, 1498 <lt_dlsym+0x74>
    1484:	ldrb	w8, [x0]
    1488:	cbz	w8, 1494 <lt_dlsym+0x70>
    148c:	bl	0 <strlen>
    1490:	b	1498 <lt_dlsym+0x74>
    1494:	mov	x0, xzr
    1498:	ldr	x8, [x19, #24]
    149c:	add	x21, x0, x21
    14a0:	cbz	x8, 14b8 <lt_dlsym+0x94>
    14a4:	ldrb	w9, [x8]
    14a8:	cbz	w9, 14b8 <lt_dlsym+0x94>
    14ac:	mov	x0, x8
    14b0:	bl	0 <strlen>
    14b4:	b	14bc <lt_dlsym+0x98>
    14b8:	mov	x0, xzr
    14bc:	add	x8, x21, x0
    14c0:	add	x9, x8, #0x5
    14c4:	cmp	x9, #0x80
    14c8:	b.cs	14d4 <lt_dlsym+0xb0>  // b.hs, b.nlast
    14cc:	mov	x21, sp
    14d0:	b	14e4 <lt_dlsym+0xc0>
    14d4:	add	x0, x8, #0x6
    14d8:	bl	0 <lt__malloc>
    14dc:	mov	x21, x0
    14e0:	cbz	x0, 151c <lt_dlsym+0xf8>
    14e4:	ldr	x8, [x19, #8]
    14e8:	ldr	x9, [x19, #24]
    14ec:	ldr	x22, [x8, #56]
    14f0:	cbz	x9, 15e0 <lt_dlsym+0x1bc>
    14f4:	bl	0 <lt__get_last_error>
    14f8:	ldr	x8, [x19, #8]
    14fc:	mov	x24, x0
    1500:	ldr	x1, [x8, #8]
    1504:	cbz	x1, 1548 <lt_dlsym+0x124>
    1508:	mov	x0, x21
    150c:	bl	0 <strcpy>
    1510:	ldr	x1, [x19, #24]
    1514:	bl	0 <strcat>
    1518:	b	1554 <lt_dlsym+0x130>
    151c:	mov	w0, #0xd                   	// #13
    1520:	bl	0 <lt__error_string>
    1524:	bl	0 <lt__set_last_error>
    1528:	mov	x23, xzr
    152c:	mov	x0, x23
    1530:	ldp	x20, x19, [sp, #176]
    1534:	ldp	x22, x21, [sp, #160]
    1538:	ldp	x24, x23, [sp, #144]
    153c:	ldp	x29, x30, [sp, #128]
    1540:	add	sp, sp, #0xc0
    1544:	ret
    1548:	ldr	x1, [x19, #24]
    154c:	mov	x0, x21
    1550:	bl	0 <strcpy>
    1554:	mov	x0, x21
    1558:	bl	0 <strlen>
    155c:	mov	w9, #0x4c5f                	// #19551
    1560:	add	x8, x21, x0
    1564:	movk	w9, #0x5854, lsl #16
    1568:	mov	w10, #0x5f                  	// #95
    156c:	mov	x0, x21
    1570:	mov	x1, x20
    1574:	str	w9, [x8]
    1578:	strh	w10, [x8, #4]
    157c:	bl	0 <strcat>
    1580:	ldr	x8, [x19, #8]
    1584:	ldr	x1, [x19, #56]
    1588:	mov	x0, x22
    158c:	mov	x2, x21
    1590:	ldr	x8, [x8, #32]
    1594:	blr	x8
    1598:	mov	x23, x0
    159c:	cbz	x0, 15c4 <lt_dlsym+0x1a0>
    15a0:	mov	x8, sp
    15a4:	cmp	x21, x8
    15a8:	b.eq	15d8 <lt_dlsym+0x1b4>  // b.none
    15ac:	mov	x0, x21
    15b0:	bl	0 <free>
    15b4:	mov	w8, wzr
    15b8:	mov	x21, xzr
    15bc:	cbz	w8, 152c <lt_dlsym+0x108>
    15c0:	b	15e0 <lt_dlsym+0x1bc>
    15c4:	mov	x0, x24
    15c8:	bl	0 <lt__set_last_error>
    15cc:	mov	w8, #0x1                   	// #1
    15d0:	cbz	w8, 152c <lt_dlsym+0x108>
    15d4:	b	15e0 <lt_dlsym+0x1bc>
    15d8:	mov	w8, wzr
    15dc:	cbz	w8, 152c <lt_dlsym+0x108>
    15e0:	ldr	x8, [x19, #8]
    15e4:	ldr	x1, [x8, #8]
    15e8:	cbz	x1, 1600 <lt_dlsym+0x1dc>
    15ec:	mov	x0, x21
    15f0:	bl	0 <strcpy>
    15f4:	mov	x1, x20
    15f8:	bl	0 <strcat>
    15fc:	b	160c <lt_dlsym+0x1e8>
    1600:	mov	x0, x21
    1604:	mov	x1, x20
    1608:	bl	0 <strcpy>
    160c:	ldr	x8, [x19, #8]
    1610:	ldr	x1, [x19, #56]
    1614:	mov	x0, x22
    1618:	mov	x2, x21
    161c:	ldr	x8, [x8, #32]
    1620:	blr	x8
    1624:	mov	x8, sp
    1628:	cmp	x21, x8
    162c:	mov	x23, x0
    1630:	b.eq	152c <lt_dlsym+0x108>  // b.none
    1634:	mov	x0, x21
    1638:	bl	0 <free>
    163c:	b	152c <lt_dlsym+0x108>

0000000000001640 <lt_dlerror>:
    1640:	stp	x29, x30, [sp, #-32]!
    1644:	str	x19, [sp, #16]
    1648:	mov	x29, sp
    164c:	bl	0 <lt__get_last_error>
    1650:	mov	x19, x0
    1654:	mov	x0, xzr
    1658:	bl	0 <lt__set_last_error>
    165c:	mov	x0, x19
    1660:	ldr	x19, [sp, #16]
    1664:	ldp	x29, x30, [sp], #32
    1668:	ret

000000000000166c <lt_dladdsearchdir>:
    166c:	stp	x29, x30, [sp, #-16]!
    1670:	mov	x29, sp
    1674:	cbz	x0, 169c <lt_dladdsearchdir+0x30>
    1678:	ldrb	w8, [x0]
    167c:	mov	x1, x0
    1680:	cbz	w8, 169c <lt_dladdsearchdir+0x30>
    1684:	mov	x0, xzr
    1688:	bl	16a8 <lt_dlpath_insertdir>
    168c:	cmp	w0, #0x0
    1690:	cset	w0, ne  // ne = any
    1694:	ldp	x29, x30, [sp], #16
    1698:	ret
    169c:	mov	w0, wzr
    16a0:	ldp	x29, x30, [sp], #16
    16a4:	ret

00000000000016a8 <lt_dlpath_insertdir>:
    16a8:	sub	sp, sp, #0x40
    16ac:	stp	x29, x30, [sp, #16]
    16b0:	add	x29, sp, #0x10
    16b4:	str	x21, [sp, #32]
    16b8:	stp	x20, x19, [sp, #48]
    16bc:	str	xzr, [x29, #24]
    16c0:	stp	xzr, xzr, [sp]
    16c4:	cbz	x1, 17e0 <lt_dlpath_insertdir+0x138>
    16c8:	ldrb	w8, [x1]
    16cc:	mov	x19, x1
    16d0:	cbz	w8, 17e0 <lt_dlpath_insertdir+0x138>
    16d4:	mov	x20, x0
    16d8:	add	x1, x29, #0x18
    16dc:	mov	x0, x19
    16e0:	bl	197c <canonicalize_path>
    16e4:	cbz	w0, 1718 <lt_dlpath_insertdir+0x70>
    16e8:	mov	w19, #0x1                   	// #1
    16ec:	ldr	x0, [sp, #8]
    16f0:	bl	0 <free>
    16f4:	ldr	x0, [x29, #24]
    16f8:	str	xzr, [sp, #8]
    16fc:	bl	0 <free>
    1700:	mov	w0, w19
    1704:	ldp	x20, x19, [sp, #48]
    1708:	ldr	x21, [sp, #32]
    170c:	ldp	x29, x30, [sp, #16]
    1710:	add	sp, sp, #0x40
    1714:	ret
    1718:	ldr	x8, [x29, #24]
    171c:	cbz	x8, 1800 <lt_dlpath_insertdir+0x158>
    1720:	ldrb	w8, [x8]
    1724:	cbz	w8, 1800 <lt_dlpath_insertdir+0x158>
    1728:	adrp	x21, 0 <lt__alloc_die_callback>
    172c:	ldr	x0, [x21]
    1730:	cbz	x0, 1770 <lt_dlpath_insertdir+0xc8>
    1734:	add	x1, sp, #0x8
    1738:	mov	x2, sp
    173c:	bl	2848 <argzize_path>
    1740:	cbnz	w0, 16e8 <lt_dlpath_insertdir+0x40>
    1744:	cbz	x20, 178c <lt_dlpath_insertdir+0xe4>
    1748:	ldr	x0, [x21]
    174c:	cmp	x0, x20
    1750:	b.hi	1840 <lt_dlpath_insertdir+0x198>  // b.pmore
    1754:	sub	x20, x20, x0
    1758:	bl	0 <strlen>
    175c:	cmp	w20, w0
    1760:	b.gt	1860 <lt_dlpath_insertdir+0x1b8>
    1764:	ldr	x8, [sp, #8]
    1768:	add	x2, x8, x20
    176c:	b	1790 <lt_dlpath_insertdir+0xe8>
    1770:	cbnz	x20, 1820 <lt_dlpath_insertdir+0x178>
    1774:	mov	x0, x19
    1778:	bl	0 <lt__strdup>
    177c:	cmp	x0, #0x0
    1780:	str	x0, [x21]
    1784:	cset	w19, eq  // eq = none
    1788:	b	16ec <lt_dlpath_insertdir+0x44>
    178c:	mov	x2, xzr
    1790:	add	x0, sp, #0x8
    1794:	mov	x1, sp
    1798:	mov	x3, x19
    179c:	bl	2d00 <lt_argz_insert>
    17a0:	cbnz	w0, 16e8 <lt_dlpath_insertdir+0x40>
    17a4:	ldp	x1, x0, [sp]
    17a8:	mov	w2, #0x3a                  	// #58
    17ac:	bl	0 <argz_stringify>
    17b0:	ldr	x0, [x21]
    17b4:	ldr	x8, [sp, #8]
    17b8:	cmp	x0, x8
    17bc:	b.eq	17d8 <lt_dlpath_insertdir+0x130>  // b.none
    17c0:	bl	0 <free>
    17c4:	ldr	x8, [sp, #8]
    17c8:	mov	w19, wzr
    17cc:	str	xzr, [sp, #8]
    17d0:	str	x8, [x21]
    17d4:	b	16ec <lt_dlpath_insertdir+0x44>
    17d8:	mov	w19, wzr
    17dc:	b	16ec <lt_dlpath_insertdir+0x44>
    17e0:	adrp	x0, 0 <lt__alloc_die_callback>
    17e4:	adrp	x1, 0 <lt__alloc_die_callback>
    17e8:	adrp	x3, 0 <lt__alloc_die_callback>
    17ec:	add	x0, x0, #0x0
    17f0:	add	x1, x1, #0x0
    17f4:	add	x3, x3, #0x0
    17f8:	mov	w2, #0x84f                 	// #2127
    17fc:	bl	0 <__assert_fail>
    1800:	adrp	x0, 0 <lt__alloc_die_callback>
    1804:	adrp	x1, 0 <lt__alloc_die_callback>
    1808:	adrp	x3, 0 <lt__alloc_die_callback>
    180c:	add	x0, x0, #0x0
    1810:	add	x1, x1, #0x0
    1814:	add	x3, x3, #0x0
    1818:	mov	w2, #0x857                 	// #2135
    181c:	bl	0 <__assert_fail>
    1820:	adrp	x0, 0 <lt__alloc_die_callback>
    1824:	adrp	x1, 0 <lt__alloc_die_callback>
    1828:	adrp	x3, 0 <lt__alloc_die_callback>
    182c:	add	x0, x0, #0x0
    1830:	add	x1, x1, #0x0
    1834:	add	x3, x3, #0x0
    1838:	mov	w2, #0x85c                 	// #2140
    183c:	bl	0 <__assert_fail>
    1840:	adrp	x0, 0 <lt__alloc_die_callback>
    1844:	adrp	x1, 0 <lt__alloc_die_callback>
    1848:	adrp	x3, 0 <lt__alloc_die_callback>
    184c:	add	x0, x0, #0x0
    1850:	add	x1, x1, #0x0
    1854:	add	x3, x3, #0x0
    1858:	mov	w2, #0x875                 	// #2165
    185c:	bl	0 <__assert_fail>
    1860:	adrp	x0, 0 <lt__alloc_die_callback>
    1864:	adrp	x1, 0 <lt__alloc_die_callback>
    1868:	adrp	x3, 0 <lt__alloc_die_callback>
    186c:	add	x0, x0, #0x0
    1870:	add	x1, x1, #0x0
    1874:	add	x3, x3, #0x0
    1878:	mov	w2, #0x876                 	// #2166
    187c:	bl	0 <__assert_fail>

0000000000001880 <lt_dlinsertsearchdir>:
    1880:	stp	x29, x30, [sp, #-48]!
    1884:	stp	x20, x19, [sp, #32]
    1888:	mov	x19, x1
    188c:	mov	x20, x0
    1890:	str	x21, [sp, #16]
    1894:	mov	x29, sp
    1898:	cbz	x0, 18d4 <lt_dlinsertsearchdir+0x54>
    189c:	adrp	x8, 0 <lt__alloc_die_callback>
    18a0:	ldr	x21, [x8]
    18a4:	cmp	x21, x20
    18a8:	b.hi	18f8 <lt_dlinsertsearchdir+0x78>  // b.pmore
    18ac:	cbz	x21, 18c4 <lt_dlinsertsearchdir+0x44>
    18b0:	ldrb	w8, [x21]
    18b4:	cbz	w8, 18c4 <lt_dlinsertsearchdir+0x44>
    18b8:	mov	x0, x21
    18bc:	bl	0 <strlen>
    18c0:	b	18c8 <lt_dlinsertsearchdir+0x48>
    18c4:	mov	x0, xzr
    18c8:	add	x8, x21, x0
    18cc:	cmp	x8, x20
    18d0:	b.ls	18f8 <lt_dlinsertsearchdir+0x78>  // b.plast
    18d4:	cbz	x19, 190c <lt_dlinsertsearchdir+0x8c>
    18d8:	ldrb	w8, [x19]
    18dc:	cbz	w8, 190c <lt_dlinsertsearchdir+0x8c>
    18e0:	mov	x0, x20
    18e4:	mov	x1, x19
    18e8:	bl	16a8 <lt_dlpath_insertdir>
    18ec:	cmp	w0, #0x0
    18f0:	cset	w0, ne  // ne = any
    18f4:	b	1910 <lt_dlinsertsearchdir+0x90>
    18f8:	mov	w0, #0x12                  	// #18
    18fc:	bl	0 <lt__error_string>
    1900:	bl	0 <lt__set_last_error>
    1904:	mov	w0, #0x1                   	// #1
    1908:	b	1910 <lt_dlinsertsearchdir+0x90>
    190c:	mov	w0, wzr
    1910:	ldp	x20, x19, [sp, #32]
    1914:	ldr	x21, [sp, #16]
    1918:	ldp	x29, x30, [sp], #48
    191c:	ret

0000000000001920 <lt_dlsetsearchpath>:
    1920:	stp	x29, x30, [sp, #-32]!
    1924:	stp	x20, x19, [sp, #16]
    1928:	adrp	x20, 0 <lt__alloc_die_callback>
    192c:	ldr	x8, [x20]
    1930:	mov	x19, x0
    1934:	mov	x29, sp
    1938:	mov	x0, x8
    193c:	bl	0 <free>
    1940:	str	xzr, [x20]
    1944:	cbz	x19, 196c <lt_dlsetsearchpath+0x4c>
    1948:	ldrb	w8, [x19]
    194c:	cbz	w8, 196c <lt_dlsetsearchpath+0x4c>
    1950:	adrp	x1, 0 <lt__alloc_die_callback>
    1954:	add	x1, x1, #0x0
    1958:	mov	x0, x19
    195c:	bl	197c <canonicalize_path>
    1960:	cmp	w0, #0x0
    1964:	cset	w0, ne  // ne = any
    1968:	b	1970 <lt_dlsetsearchpath+0x50>
    196c:	mov	w0, wzr
    1970:	ldp	x20, x19, [sp, #16]
    1974:	ldp	x29, x30, [sp], #32
    1978:	ret

000000000000197c <canonicalize_path>:
    197c:	stp	x29, x30, [sp, #-32]!
    1980:	stp	x20, x19, [sp, #16]
    1984:	mov	x29, sp
    1988:	cbz	x0, 1a68 <canonicalize_path+0xec>
    198c:	ldrb	w8, [x0]
    1990:	mov	x20, x0
    1994:	cbz	w8, 1a68 <canonicalize_path+0xec>
    1998:	mov	x19, x1
    199c:	cbz	x1, 1a88 <canonicalize_path+0x10c>
    19a0:	mov	x0, x20
    19a4:	bl	0 <strlen>
    19a8:	add	x0, x0, #0x1
    19ac:	bl	0 <lt__malloc>
    19b0:	cbz	x0, 1a54 <canonicalize_path+0xd8>
    19b4:	mov	x12, #0xffff800000000001    	// #-140737488355327
    19b8:	mov	x9, xzr
    19bc:	add	x8, x20, #0x1
    19c0:	mov	w10, #0x2f                  	// #47
    19c4:	mov	w11, #0x1                   	// #1
    19c8:	movk	x12, #0x400, lsl #48
    19cc:	b	19e0 <canonicalize_path+0x64>
    19d0:	add	x13, x9, #0x1
    19d4:	strb	w10, [x0, x9]
    19d8:	mov	x9, x13
    19dc:	add	x8, x8, #0x1
    19e0:	ldurb	w13, [x8, #-1]
    19e4:	cmp	w13, #0x2f
    19e8:	b.eq	1a28 <canonicalize_path+0xac>  // b.none
    19ec:	cmp	w13, #0x3a
    19f0:	b.eq	1a0c <canonicalize_path+0x90>  // b.none
    19f4:	cbz	w13, 1a44 <canonicalize_path+0xc8>
    19f8:	add	x14, x9, #0x1
    19fc:	strb	w13, [x0, x9]
    1a00:	mov	x9, x14
    1a04:	add	x8, x8, #0x1
    1a08:	b	19e0 <canonicalize_path+0x64>
    1a0c:	cbz	x9, 19dc <canonicalize_path+0x60>
    1a10:	ldrb	w14, [x8]
    1a14:	cbz	w14, 19dc <canonicalize_path+0x60>
    1a18:	cmp	w14, #0x3a
    1a1c:	b.eq	19dc <canonicalize_path+0x60>  // b.none
    1a20:	cmp	w13, #0x2f
    1a24:	b.ne	19f8 <canonicalize_path+0x7c>  // b.any
    1a28:	ldrb	w13, [x8]
    1a2c:	cmp	w13, #0x3a
    1a30:	b.hi	19d0 <canonicalize_path+0x54>  // b.pmore
    1a34:	lsl	x13, x11, x13
    1a38:	tst	x13, x12
    1a3c:	b.ne	19dc <canonicalize_path+0x60>  // b.any
    1a40:	b	19d0 <canonicalize_path+0x54>
    1a44:	mov	w8, wzr
    1a48:	strb	wzr, [x0, x9]
    1a4c:	str	x0, [x19]
    1a50:	b	1a58 <canonicalize_path+0xdc>
    1a54:	mov	w8, #0x1                   	// #1
    1a58:	ldp	x20, x19, [sp, #16]
    1a5c:	mov	w0, w8
    1a60:	ldp	x29, x30, [sp], #32
    1a64:	ret
    1a68:	adrp	x0, 0 <lt__alloc_die_callback>
    1a6c:	adrp	x1, 0 <lt__alloc_die_callback>
    1a70:	adrp	x3, 0 <lt__alloc_die_callback>
    1a74:	add	x0, x0, #0x0
    1a78:	add	x1, x1, #0x0
    1a7c:	add	x3, x3, #0x0
    1a80:	mov	w2, #0x24f                 	// #591
    1a84:	bl	0 <__assert_fail>
    1a88:	adrp	x0, 0 <lt__alloc_die_callback>
    1a8c:	adrp	x1, 0 <lt__alloc_die_callback>
    1a90:	adrp	x3, 0 <lt__alloc_die_callback>
    1a94:	add	x0, x0, #0x0
    1a98:	add	x1, x1, #0x0
    1a9c:	add	x3, x3, #0x0
    1aa0:	mov	w2, #0x250                 	// #592
    1aa4:	bl	0 <__assert_fail>

0000000000001aa8 <lt_dlgetsearchpath>:
    1aa8:	adrp	x8, 0 <lt__alloc_die_callback>
    1aac:	ldr	x0, [x8]
    1ab0:	ret

0000000000001ab4 <lt_dlmakeresident>:
    1ab4:	stp	x29, x30, [sp, #-16]!
    1ab8:	mov	x29, sp
    1abc:	cbz	x0, 1adc <lt_dlmakeresident+0x28>
    1ac0:	mov	x8, x0
    1ac4:	ldrb	w9, [x8, #36]
    1ac8:	mov	w0, wzr
    1acc:	orr	w9, w9, #0x1
    1ad0:	strb	w9, [x8, #36]
    1ad4:	ldp	x29, x30, [sp], #16
    1ad8:	ret
    1adc:	mov	w0, #0xc                   	// #12
    1ae0:	bl	0 <lt__error_string>
    1ae4:	bl	0 <lt__set_last_error>
    1ae8:	mov	w0, #0x1                   	// #1
    1aec:	ldp	x29, x30, [sp], #16
    1af0:	ret

0000000000001af4 <lt_dlisresident>:
    1af4:	stp	x29, x30, [sp, #-16]!
    1af8:	mov	x29, sp
    1afc:	cbz	x0, 1b10 <lt_dlisresident+0x1c>
    1b00:	ldrb	w8, [x0, #36]
    1b04:	and	w0, w8, #0x1
    1b08:	ldp	x29, x30, [sp], #16
    1b0c:	ret
    1b10:	mov	w0, #0xc                   	// #12
    1b14:	bl	0 <lt__error_string>
    1b18:	bl	0 <lt__set_last_error>
    1b1c:	mov	w0, #0xffffffff            	// #-1
    1b20:	ldp	x29, x30, [sp], #16
    1b24:	ret

0000000000001b28 <lt_dlinterface_register>:
    1b28:	stp	x29, x30, [sp, #-48]!
    1b2c:	str	x21, [sp, #16]
    1b30:	mov	x21, x0
    1b34:	mov	w0, #0x10                  	// #16
    1b38:	stp	x20, x19, [sp, #32]
    1b3c:	mov	x29, sp
    1b40:	mov	x20, x1
    1b44:	bl	0 <lt__malloc>
    1b48:	mov	x19, x0
    1b4c:	cbz	x0, 1b74 <lt_dlinterface_register+0x4c>
    1b50:	mov	x0, x21
    1b54:	bl	0 <lt__strdup>
    1b58:	str	x0, [x19]
    1b5c:	cbz	x0, 1b68 <lt_dlinterface_register+0x40>
    1b60:	str	x20, [x19, #8]
    1b64:	b	1b74 <lt_dlinterface_register+0x4c>
    1b68:	mov	x0, x19
    1b6c:	bl	0 <free>
    1b70:	mov	x19, xzr
    1b74:	mov	x0, x19
    1b78:	ldp	x20, x19, [sp, #32]
    1b7c:	ldr	x21, [sp, #16]
    1b80:	ldp	x29, x30, [sp], #48
    1b84:	ret

0000000000001b88 <lt_dlinterface_free>:
    1b88:	stp	x29, x30, [sp, #-32]!
    1b8c:	str	x19, [sp, #16]
    1b90:	mov	x19, x0
    1b94:	ldr	x0, [x0]
    1b98:	mov	x29, sp
    1b9c:	bl	0 <free>
    1ba0:	mov	x0, x19
    1ba4:	str	xzr, [x19]
    1ba8:	bl	0 <free>
    1bac:	ldr	x19, [sp, #16]
    1bb0:	ldp	x29, x30, [sp], #32
    1bb4:	ret

0000000000001bb8 <lt_dlcaller_set_data>:
    1bb8:	stp	x29, x30, [sp, #-64]!
    1bbc:	stp	x22, x21, [sp, #32]
    1bc0:	stp	x20, x19, [sp, #48]
    1bc4:	ldr	x9, [x1, #72]
    1bc8:	mov	x19, x2
    1bcc:	mov	x20, x1
    1bd0:	mov	x21, x0
    1bd4:	str	x23, [sp, #16]
    1bd8:	mov	x29, sp
    1bdc:	cbz	x9, 1c34 <lt_dlcaller_set_data+0x7c>
    1be0:	mov	w10, #0xffffffff            	// #-1
    1be4:	mov	x8, x9
    1be8:	ldr	x11, [x8], #16
    1bec:	add	w10, w10, #0x1
    1bf0:	cbnz	x11, 1be8 <lt_dlcaller_set_data+0x30>
    1bf4:	mov	w8, w10
    1bf8:	cbz	w10, 1c40 <lt_dlcaller_set_data+0x88>
    1bfc:	mov	x23, xzr
    1c00:	add	x9, x9, #0x8
    1c04:	ldur	x10, [x9, #-8]
    1c08:	cmp	x10, x21
    1c0c:	b.eq	1c54 <lt_dlcaller_set_data+0x9c>  // b.none
    1c10:	add	x23, x23, #0x1
    1c14:	cmp	x8, x23
    1c18:	add	x9, x9, #0x10
    1c1c:	b.ne	1c04 <lt_dlcaller_set_data+0x4c>  // b.any
    1c20:	mov	x22, xzr
    1c24:	mov	w23, w8
    1c28:	cmp	w23, w8
    1c2c:	b.eq	1c60 <lt_dlcaller_set_data+0xa8>  // b.none
    1c30:	b	1c9c <lt_dlcaller_set_data+0xe4>
    1c34:	mov	w10, wzr
    1c38:	mov	w8, w10
    1c3c:	cbnz	w10, 1bfc <lt_dlcaller_set_data+0x44>
    1c40:	mov	w23, wzr
    1c44:	mov	x22, xzr
    1c48:	cmp	w23, w8
    1c4c:	b.eq	1c60 <lt_dlcaller_set_data+0xa8>  // b.none
    1c50:	b	1c9c <lt_dlcaller_set_data+0xe4>
    1c54:	ldr	x22, [x9]
    1c58:	cmp	w23, w8
    1c5c:	b.ne	1c9c <lt_dlcaller_set_data+0xe4>  // b.any
    1c60:	ldr	x0, [x20, #72]
    1c64:	add	w8, w8, #0x2
    1c68:	lsl	x1, x8, #4
    1c6c:	bl	0 <lt__realloc>
    1c70:	cbz	x0, 1cc0 <lt_dlcaller_set_data+0x108>
    1c74:	mov	w8, w23
    1c78:	lsl	x8, x8, #4
    1c7c:	str	x0, [x20, #72]
    1c80:	str	x21, [x0, x8]
    1c84:	ldr	x8, [x20, #72]
    1c88:	add	w9, w23, #0x1
    1c8c:	lsl	x9, x9, #4
    1c90:	str	xzr, [x8, x9]
    1c94:	mov	w8, #0x1                   	// #1
    1c98:	cbz	w8, 1ca8 <lt_dlcaller_set_data+0xf0>
    1c9c:	ldr	x8, [x20, #72]
    1ca0:	add	x8, x8, w23, uxtw #4
    1ca4:	str	x19, [x8, #8]
    1ca8:	mov	x0, x22
    1cac:	ldp	x20, x19, [sp, #48]
    1cb0:	ldp	x22, x21, [sp, #32]
    1cb4:	ldr	x23, [sp, #16]
    1cb8:	ldp	x29, x30, [sp], #64
    1cbc:	ret
    1cc0:	mov	x22, xzr
    1cc4:	mov	w8, wzr
    1cc8:	cbnz	w8, 1c9c <lt_dlcaller_set_data+0xe4>
    1ccc:	b	1ca8 <lt_dlcaller_set_data+0xf0>

0000000000001cd0 <lt_dlcaller_get_data>:
    1cd0:	ldr	x8, [x1, #72]
    1cd4:	cbz	x8, 1cf4 <lt_dlcaller_get_data+0x24>
    1cd8:	ldr	x9, [x8]
    1cdc:	cbz	x9, 1cf4 <lt_dlcaller_get_data+0x24>
    1ce0:	add	x8, x8, #0x10
    1ce4:	cmp	x9, x0
    1ce8:	b.eq	1cfc <lt_dlcaller_get_data+0x2c>  // b.none
    1cec:	ldr	x9, [x8], #16
    1cf0:	cbnz	x9, 1ce4 <lt_dlcaller_get_data+0x14>
    1cf4:	mov	x0, xzr
    1cf8:	ret
    1cfc:	ldur	x0, [x8, #-8]
    1d00:	ret

0000000000001d04 <lt_dlgetinfo>:
    1d04:	cbz	x0, 1d10 <lt_dlgetinfo+0xc>
    1d08:	add	x0, x0, #0x10
    1d0c:	ret
    1d10:	stp	x29, x30, [sp, #-16]!
    1d14:	mov	w0, #0xc                   	// #12
    1d18:	mov	x29, sp
    1d1c:	bl	0 <lt__error_string>
    1d20:	bl	0 <lt__set_last_error>
    1d24:	mov	x0, xzr
    1d28:	ldp	x29, x30, [sp], #16
    1d2c:	ret

0000000000001d30 <lt_dlhandle_iterate>:
    1d30:	stp	x29, x30, [sp, #-32]!
    1d34:	stp	x20, x19, [sp, #16]
    1d38:	mov	x29, sp
    1d3c:	cbz	x0, 1d8c <lt_dlhandle_iterate+0x5c>
    1d40:	adrp	x8, 0 <lt__alloc_die_callback>
    1d44:	add	x8, x8, #0x0
    1d48:	cmp	x1, #0x0
    1d4c:	csel	x8, x8, x1, eq  // eq = none
    1d50:	ldr	x19, [x8]
    1d54:	cbz	x19, 1d7c <lt_dlhandle_iterate+0x4c>
    1d58:	mov	x20, x0
    1d5c:	ldr	x8, [x20, #8]
    1d60:	cbz	x8, 1d7c <lt_dlhandle_iterate+0x4c>
    1d64:	ldr	x1, [x20]
    1d68:	mov	x0, x19
    1d6c:	blr	x8
    1d70:	cbz	w0, 1d7c <lt_dlhandle_iterate+0x4c>
    1d74:	ldr	x19, [x19]
    1d78:	cbnz	x19, 1d5c <lt_dlhandle_iterate+0x2c>
    1d7c:	mov	x0, x19
    1d80:	ldp	x20, x19, [sp, #16]
    1d84:	ldp	x29, x30, [sp], #32
    1d88:	ret
    1d8c:	adrp	x0, 0 <lt__alloc_die_callback>
    1d90:	adrp	x1, 0 <lt__alloc_die_callback>
    1d94:	adrp	x3, 0 <lt__alloc_die_callback>
    1d98:	add	x0, x0, #0x0
    1d9c:	add	x1, x1, #0x0
    1da0:	add	x3, x3, #0x0
    1da4:	mov	w2, #0x96a                 	// #2410
    1da8:	bl	0 <__assert_fail>

0000000000001dac <lt_dlhandle_fetch>:
    1dac:	stp	x29, x30, [sp, #-48]!
    1db0:	str	x21, [sp, #16]
    1db4:	stp	x20, x19, [sp, #32]
    1db8:	mov	x29, sp
    1dbc:	cbz	x0, 1e0c <lt_dlhandle_fetch+0x60>
    1dc0:	mov	x19, x1
    1dc4:	mov	x20, x0
    1dc8:	mov	x1, xzr
    1dcc:	b	1dd8 <lt_dlhandle_fetch+0x2c>
    1dd0:	mov	x0, x20
    1dd4:	mov	x1, x21
    1dd8:	bl	1d30 <lt_dlhandle_iterate>
    1ddc:	mov	x21, x0
    1de0:	cbz	x0, 1df8 <lt_dlhandle_fetch+0x4c>
    1de4:	ldr	x0, [x21, #24]
    1de8:	cbz	x0, 1dd0 <lt_dlhandle_fetch+0x24>
    1dec:	mov	x1, x19
    1df0:	bl	0 <strcmp>
    1df4:	cbnz	w0, 1dd0 <lt_dlhandle_fetch+0x24>
    1df8:	mov	x0, x21
    1dfc:	ldp	x20, x19, [sp, #32]
    1e00:	ldr	x21, [sp, #16]
    1e04:	ldp	x29, x30, [sp], #48
    1e08:	ret
    1e0c:	adrp	x0, 0 <lt__alloc_die_callback>
    1e10:	adrp	x1, 0 <lt__alloc_die_callback>
    1e14:	adrp	x3, 0 <lt__alloc_die_callback>
    1e18:	add	x0, x0, #0x0
    1e1c:	add	x1, x1, #0x0
    1e20:	add	x3, x3, #0x0
    1e24:	mov	w2, #0x981                 	// #2433
    1e28:	bl	0 <__assert_fail>

0000000000001e2c <lt_dlhandle_map>:
    1e2c:	stp	x29, x30, [sp, #-64]!
    1e30:	str	x23, [sp, #16]
    1e34:	stp	x22, x21, [sp, #32]
    1e38:	stp	x20, x19, [sp, #48]
    1e3c:	mov	x29, sp
    1e40:	cbz	x0, 1eb8 <lt_dlhandle_map+0x8c>
    1e44:	adrp	x8, 0 <lt__alloc_die_callback>
    1e48:	ldr	x23, [x8]
    1e4c:	mov	x19, x2
    1e50:	mov	x20, x1
    1e54:	mov	x21, x0
    1e58:	b	1e74 <lt_dlhandle_map+0x48>
    1e5c:	mov	x0, x23
    1e60:	mov	x1, x19
    1e64:	blr	x20
    1e68:	cmp	w0, #0x0
    1e6c:	csel	w22, w22, w0, eq  // eq = none
    1e70:	cbnz	w0, 1ea0 <lt_dlhandle_map+0x74>
    1e74:	cbz	x23, 1e9c <lt_dlhandle_map+0x70>
    1e78:	ldr	x8, [x21, #8]
    1e7c:	cbz	x8, 1e5c <lt_dlhandle_map+0x30>
    1e80:	ldr	x1, [x21]
    1e84:	mov	x0, x23
    1e88:	blr	x8
    1e8c:	cbz	w0, 1e5c <lt_dlhandle_map+0x30>
    1e90:	ldr	x23, [x23]
    1e94:	cbnz	x23, 1e78 <lt_dlhandle_map+0x4c>
    1e98:	b	1e5c <lt_dlhandle_map+0x30>
    1e9c:	mov	w22, wzr
    1ea0:	mov	w0, w22
    1ea4:	ldp	x20, x19, [sp, #48]
    1ea8:	ldp	x22, x21, [sp, #32]
    1eac:	ldr	x23, [sp, #16]
    1eb0:	ldp	x29, x30, [sp], #64
    1eb4:	ret
    1eb8:	adrp	x0, 0 <lt__alloc_die_callback>
    1ebc:	adrp	x1, 0 <lt__alloc_die_callback>
    1ec0:	adrp	x3, 0 <lt__alloc_die_callback>
    1ec4:	add	x0, x0, #0x0
    1ec8:	add	x1, x1, #0x0
    1ecc:	add	x3, x3, #0x0
    1ed0:	mov	w2, #0x995                 	// #2453
    1ed4:	bl	0 <__assert_fail>

0000000000001ed8 <tryall_dlopen>:
    1ed8:	stp	x29, x30, [sp, #-80]!
    1edc:	adrp	x8, 0 <lt__alloc_die_callback>
    1ee0:	stp	x24, x23, [sp, #32]
    1ee4:	ldr	x24, [x8]
    1ee8:	stp	x26, x25, [sp, #16]
    1eec:	stp	x22, x21, [sp, #48]
    1ef0:	stp	x20, x19, [sp, #64]
    1ef4:	mov	x29, sp
    1ef8:	mov	x20, x3
    1efc:	mov	x21, x2
    1f00:	mov	x22, x1
    1f04:	mov	x23, x0
    1f08:	bl	0 <lt__get_last_error>
    1f0c:	mov	x19, x0
    1f10:	cbnz	x24, 1f3c <tryall_dlopen+0x64>
    1f14:	ldr	x26, [x23]
    1f18:	cbz	x22, 1f74 <tryall_dlopen+0x9c>
    1f1c:	mov	x0, x22
    1f20:	bl	0 <lt__strdup>
    1f24:	str	x0, [x26, #16]
    1f28:	cbnz	x0, 1f78 <tryall_dlopen+0xa0>
    1f2c:	mov	w20, #0x1                   	// #1
    1f30:	b	2054 <tryall_dlopen+0x17c>
    1f34:	ldr	x24, [x24]
    1f38:	cbz	x24, 1f14 <tryall_dlopen+0x3c>
    1f3c:	ldr	x0, [x24, #16]
    1f40:	cmp	x0, x22
    1f44:	b.eq	1f5c <tryall_dlopen+0x84>  // b.none
    1f48:	cbz	x22, 1f34 <tryall_dlopen+0x5c>
    1f4c:	cbz	x0, 1f34 <tryall_dlopen+0x5c>
    1f50:	mov	x1, x22
    1f54:	bl	0 <strcmp>
    1f58:	cbnz	w0, 1f34 <tryall_dlopen+0x5c>
    1f5c:	ldr	w8, [x24, #32]
    1f60:	mov	w20, wzr
    1f64:	add	w8, w8, #0x1
    1f68:	str	w8, [x24, #32]
    1f6c:	str	x24, [x23]
    1f70:	b	2054 <tryall_dlopen+0x17c>
    1f74:	str	xzr, [x26, #16]
    1f78:	mov	x0, xzr
    1f7c:	bl	0 <lt_dlloader_next>
    1f80:	mov	x25, x0
    1f84:	mov	x24, x0
    1f88:	mov	x23, x20
    1f8c:	cbnz	x20, 1f9c <tryall_dlopen+0xc4>
    1f90:	mov	x0, x24
    1f94:	bl	0 <lt_dlloader_get>
    1f98:	mov	x23, x0
    1f9c:	ldr	x8, [x23, #16]
    1fa0:	ldr	x0, [x23, #56]
    1fa4:	mov	x1, x22
    1fa8:	mov	x2, x21
    1fac:	blr	x8
    1fb0:	str	x0, [x26, #56]
    1fb4:	cbnz	x0, 1fdc <tryall_dlopen+0x104>
    1fb8:	cbnz	x20, 1fd0 <tryall_dlopen+0xf8>
    1fbc:	mov	x0, x24
    1fc0:	bl	0 <lt_dlloader_next>
    1fc4:	mov	x24, x0
    1fc8:	cbnz	x0, 1f88 <tryall_dlopen+0xb0>
    1fcc:	mov	x25, xzr
    1fd0:	add	x8, x26, #0x38
    1fd4:	mov	x24, x25
    1fd8:	b	2020 <tryall_dlopen+0x148>
    1fdc:	add	x8, x26, #0x38
    1fe0:	cbz	x21, 2020 <tryall_dlopen+0x148>
    1fe4:	ldrb	w9, [x21]
    1fe8:	ldrb	w10, [x26, #36]
    1fec:	bfxil	w10, w9, #1, #1
    1ff0:	strb	w10, [x26, #36]
    1ff4:	ldrb	w9, [x21]
    1ff8:	lsr	w9, w9, #1
    1ffc:	lsr	w9, w9, #1
    2000:	bfi	w10, w9, #1, #1
    2004:	strb	w10, [x26, #36]
    2008:	ldrb	w9, [x21]
    200c:	and	w10, w10, #0xfffffffb
    2010:	lsr	w9, w9, #1
    2014:	and	w9, w9, #0x4
    2018:	orr	w9, w10, w9
    201c:	strb	w9, [x26, #36]
    2020:	cbz	x20, 202c <tryall_dlopen+0x154>
    2024:	ldr	x8, [x8]
    2028:	cbz	x8, 2034 <tryall_dlopen+0x15c>
    202c:	cbnz	x20, 2070 <tryall_dlopen+0x198>
    2030:	cbnz	x24, 2070 <tryall_dlopen+0x198>
    2034:	ldr	x0, [x26, #16]
    2038:	bl	0 <free>
    203c:	mov	w8, wzr
    2040:	str	xzr, [x26, #16]
    2044:	mov	w20, #0x1                   	// #1
    2048:	cbz	w8, 2054 <tryall_dlopen+0x17c>
    204c:	mov	x0, x19
    2050:	bl	0 <lt__set_last_error>
    2054:	mov	w0, w20
    2058:	ldp	x20, x19, [sp, #64]
    205c:	ldp	x22, x21, [sp, #48]
    2060:	ldp	x24, x23, [sp, #32]
    2064:	ldp	x26, x25, [sp, #16]
    2068:	ldp	x29, x30, [sp], #80
    206c:	ret
    2070:	mov	w20, wzr
    2074:	mov	w8, #0x1                   	// #1
    2078:	str	x23, [x26, #8]
    207c:	cbnz	w8, 204c <tryall_dlopen+0x174>
    2080:	b	2054 <tryall_dlopen+0x17c>

0000000000002084 <find_file>:
    2084:	sub	sp, sp, #0x20
    2088:	mov	x3, x2
    208c:	adrp	x2, 0 <lt__alloc_die_callback>
    2090:	add	x2, x2, #0x0
    2094:	add	x4, sp, #0x8
    2098:	stp	x29, x30, [sp, #16]
    209c:	add	x29, sp, #0x10
    20a0:	str	xzr, [sp, #8]
    20a4:	bl	10f8 <foreach_dirinpath>
    20a8:	ldr	x0, [sp, #8]
    20ac:	ldp	x29, x30, [sp, #16]
    20b0:	add	sp, sp, #0x20
    20b4:	ret

00000000000020b8 <parse_dotla_file>:
    20b8:	sub	sp, sp, #0x70
    20bc:	stp	x26, x25, [sp, #48]
    20c0:	mov	x25, x0
    20c4:	mov	w0, #0x800                 	// #2048
    20c8:	stp	x29, x30, [sp, #16]
    20cc:	stp	x28, x27, [sp, #32]
    20d0:	stp	x24, x23, [sp, #64]
    20d4:	stp	x22, x21, [sp, #80]
    20d8:	stp	x20, x19, [sp, #96]
    20dc:	add	x29, sp, #0x10
    20e0:	mov	x20, x5
    20e4:	mov	x21, x4
    20e8:	mov	x22, x3
    20ec:	mov	x23, x2
    20f0:	mov	x24, x1
    20f4:	bl	0 <lt__malloc>
    20f8:	cbz	x0, 2114 <parse_dotla_file+0x5c>
    20fc:	mov	x19, x0
    2100:	mov	x0, x25
    2104:	bl	0 <feof>
    2108:	cbz	w0, 2128 <parse_dotla_file+0x70>
    210c:	mov	w28, wzr
    2110:	b	2358 <parse_dotla_file+0x2a0>
    2114:	mov	w0, #0x5                   	// #5
    2118:	bl	0 <lt__error_string>
    211c:	bl	0 <lt__set_last_error>
    2120:	mov	w28, #0x1                   	// #1
    2124:	b	2360 <parse_dotla_file+0x2a8>
    2128:	adrp	x26, 0 <lt__alloc_die_callback>
    212c:	mov	w27, #0x800                 	// #2048
    2130:	add	x26, x26, #0x0
    2134:	b	2158 <parse_dotla_file+0xa0>
    2138:	add	x1, x19, #0x7
    213c:	mov	x0, x24
    2140:	bl	25ac <trim>
    2144:	mov	w28, w0
    2148:	cbnz	w0, 2358 <parse_dotla_file+0x2a0>
    214c:	mov	x0, x25
    2150:	bl	0 <feof>
    2154:	cbnz	w0, 210c <parse_dotla_file+0x54>
    2158:	add	x8, x27, x19
    215c:	mov	x0, x19
    2160:	mov	w1, w27
    2164:	mov	x2, x25
    2168:	sturb	wzr, [x8, #-2]
    216c:	bl	0 <fgets>
    2170:	cbz	x0, 210c <parse_dotla_file+0x54>
    2174:	mov	x28, x27
    2178:	add	x8, x28, x19
    217c:	ldurb	w8, [x8, #-2]
    2180:	mov	x27, x28
    2184:	cbz	w8, 21d4 <parse_dotla_file+0x11c>
    2188:	cmp	w8, #0xa
    218c:	b.eq	21d4 <parse_dotla_file+0x11c>  // b.none
    2190:	mov	x0, x25
    2194:	bl	0 <feof>
    2198:	cbnz	w0, 21d4 <parse_dotla_file+0x11c>
    219c:	lsl	x28, x27, #1
    21a0:	mov	x0, x19
    21a4:	mov	x1, x28
    21a8:	bl	0 <lt__realloc>
    21ac:	mov	x19, x0
    21b0:	cbz	x0, 2354 <parse_dotla_file+0x29c>
    21b4:	add	x9, x27, x19
    21b8:	add	x8, x28, x19
    21bc:	sub	x0, x9, #0x1
    21c0:	add	w1, w27, #0x1
    21c4:	mov	x2, x25
    21c8:	sturb	wzr, [x8, #-2]
    21cc:	bl	0 <fgets>
    21d0:	cbnz	x0, 2178 <parse_dotla_file+0xc0>
    21d4:	ldrb	w8, [x19]
    21d8:	cmp	w8, #0x23
    21dc:	b.eq	214c <parse_dotla_file+0x94>  // b.none
    21e0:	cmp	w8, #0xa
    21e4:	b.eq	214c <parse_dotla_file+0x94>  // b.none
    21e8:	mov	w2, #0x7                   	// #7
    21ec:	mov	x0, x19
    21f0:	mov	x1, x26
    21f4:	bl	0 <strncmp>
    21f8:	cbz	w0, 2138 <parse_dotla_file+0x80>
    21fc:	adrp	x1, 0 <lt__alloc_die_callback>
    2200:	mov	w2, #0xc                   	// #12
    2204:	mov	x0, x19
    2208:	add	x1, x1, #0x0
    220c:	bl	0 <strncmp>
    2210:	cbz	w0, 2298 <parse_dotla_file+0x1e0>
    2214:	adrp	x1, 0 <lt__alloc_die_callback>
    2218:	mov	w2, #0x7                   	// #7
    221c:	mov	x0, x19
    2220:	add	x1, x1, #0x0
    2224:	bl	0 <strncmp>
    2228:	cbz	w0, 22a4 <parse_dotla_file+0x1ec>
    222c:	adrp	x1, 0 <lt__alloc_die_callback>
    2230:	mov	w2, #0x10                  	// #16
    2234:	mov	x0, x19
    2238:	add	x1, x1, #0x0
    223c:	bl	0 <strncmp>
    2240:	cbz	w0, 22b0 <parse_dotla_file+0x1f8>
    2244:	adrp	x1, 0 <lt__alloc_die_callback>
    2248:	mov	x0, x19
    224c:	add	x1, x1, #0x0
    2250:	bl	0 <strcmp>
    2254:	cbz	w0, 22bc <parse_dotla_file+0x204>
    2258:	adrp	x1, 0 <lt__alloc_die_callback>
    225c:	mov	x0, x19
    2260:	add	x1, x1, #0x0
    2264:	bl	0 <strcmp>
    2268:	cbz	w0, 22d0 <parse_dotla_file+0x218>
    226c:	ldr	x8, [x24]
    2270:	cbnz	x8, 228c <parse_dotla_file+0x1d4>
    2274:	adrp	x1, 0 <lt__alloc_die_callback>
    2278:	mov	w2, #0xe                   	// #14
    227c:	mov	x0, x19
    2280:	add	x1, x1, #0x0
    2284:	bl	0 <strncmp>
    2288:	cbz	w0, 22e0 <parse_dotla_file+0x228>
    228c:	mov	w28, wzr
    2290:	cbz	wzr, 214c <parse_dotla_file+0x94>
    2294:	b	2358 <parse_dotla_file+0x2a0>
    2298:	add	x1, x19, #0xc
    229c:	mov	x0, x21
    22a0:	b	2140 <parse_dotla_file+0x88>
    22a4:	add	x1, x19, #0x7
    22a8:	mov	x0, x23
    22ac:	b	2140 <parse_dotla_file+0x88>
    22b0:	add	x1, x19, #0x10
    22b4:	mov	x0, x22
    22b8:	b	2140 <parse_dotla_file+0x88>
    22bc:	mov	w28, wzr
    22c0:	mov	w8, #0x1                   	// #1
    22c4:	str	w8, [x20]
    22c8:	cbz	wzr, 214c <parse_dotla_file+0x94>
    22cc:	b	2358 <parse_dotla_file+0x2a0>
    22d0:	mov	w28, wzr
    22d4:	str	wzr, [x20]
    22d8:	cbz	w28, 214c <parse_dotla_file+0x94>
    22dc:	b	2358 <parse_dotla_file+0x2a0>
    22e0:	add	x1, x19, #0xe
    22e4:	mov	x0, x24
    22e8:	bl	25ac <trim>
    22ec:	mov	w28, w0
    22f0:	cbz	w0, 2300 <parse_dotla_file+0x248>
    22f4:	mov	w8, wzr
    22f8:	cbz	w8, 22d8 <parse_dotla_file+0x220>
    22fc:	b	2384 <parse_dotla_file+0x2cc>
    2300:	ldr	x0, [x24]
    2304:	cbz	x0, 22f4 <parse_dotla_file+0x23c>
    2308:	mov	w1, #0x20                  	// #32
    230c:	bl	0 <strrchr>
    2310:	cbz	x0, 22f4 <parse_dotla_file+0x23c>
    2314:	add	x0, x0, #0x1
    2318:	bl	0 <lt__strdup>
    231c:	cbz	x0, 2348 <parse_dotla_file+0x290>
    2320:	mov	x8, x0
    2324:	ldr	x0, [x24]
    2328:	str	x8, [sp, #8]
    232c:	cmp	x0, x8
    2330:	b.eq	22f4 <parse_dotla_file+0x23c>  // b.none
    2334:	bl	0 <free>
    2338:	ldr	x9, [sp, #8]
    233c:	mov	w8, wzr
    2340:	str	x9, [x24]
    2344:	b	22f8 <parse_dotla_file+0x240>
    2348:	mov	w8, #0x6                   	// #6
    234c:	mov	w28, #0x1                   	// #1
    2350:	b	22f8 <parse_dotla_file+0x240>
    2354:	mov	w28, #0x1                   	// #1
    2358:	mov	x0, x19
    235c:	bl	0 <free>
    2360:	mov	w0, w28
    2364:	ldp	x20, x19, [sp, #96]
    2368:	ldp	x22, x21, [sp, #80]
    236c:	ldp	x24, x23, [sp, #64]
    2370:	ldp	x26, x25, [sp, #48]
    2374:	ldp	x28, x27, [sp, #32]
    2378:	ldp	x29, x30, [sp, #16]
    237c:	add	sp, sp, #0x70
    2380:	ret
    2384:	cmp	w8, #0x6
    2388:	b.eq	2358 <parse_dotla_file+0x2a0>  // b.none
    238c:	b	2360 <parse_dotla_file+0x2a8>

0000000000002390 <load_deplibs>:
    2390:	str	wzr, [x0, #40]
    2394:	ret

0000000000002398 <find_module>:
    2398:	stp	x29, x30, [sp, #-80]!
    239c:	stp	x24, x23, [sp, #32]
    23a0:	stp	x22, x21, [sp, #48]
    23a4:	stp	x20, x19, [sp, #64]
    23a8:	mov	x19, x6
    23ac:	mov	w23, w5
    23b0:	mov	x20, x3
    23b4:	mov	x24, x2
    23b8:	mov	x21, x1
    23bc:	mov	x22, x0
    23c0:	str	x25, [sp, #16]
    23c4:	mov	x29, sp
    23c8:	cbz	x4, 23f4 <find_module+0x5c>
    23cc:	adrp	x0, 0 <lt__alloc_die_callback>
    23d0:	add	x0, x0, #0x0
    23d4:	mov	x25, x4
    23d8:	bl	0 <lt_dlloader_find>
    23dc:	mov	x3, x0
    23e0:	mov	x0, x22
    23e4:	mov	x1, x25
    23e8:	mov	x2, x19
    23ec:	bl	1ed8 <tryall_dlopen>
    23f0:	cbz	w0, 2464 <find_module+0xcc>
    23f4:	cbz	x20, 2460 <find_module+0xc8>
    23f8:	cbz	x24, 241c <find_module+0x84>
    23fc:	cbz	w23, 241c <find_module+0x84>
    2400:	mov	x0, x22
    2404:	mov	x1, xzr
    2408:	mov	x2, x24
    240c:	mov	x3, x20
    2410:	mov	x4, x19
    2414:	bl	2670 <tryall_dlopen_module>
    2418:	cbz	w0, 2464 <find_module+0xcc>
    241c:	cbnz	w23, 2440 <find_module+0xa8>
    2420:	adrp	x2, 0 <lt__alloc_die_callback>
    2424:	add	x2, x2, #0x0
    2428:	mov	x0, x22
    242c:	mov	x1, x21
    2430:	mov	x3, x20
    2434:	mov	x4, x19
    2438:	bl	2670 <tryall_dlopen_module>
    243c:	cbz	w0, 2464 <find_module+0xcc>
    2440:	cbz	x21, 2460 <find_module+0xc8>
    2444:	mov	x0, x22
    2448:	mov	x1, xzr
    244c:	mov	x2, x21
    2450:	mov	x3, x20
    2454:	mov	x4, x19
    2458:	bl	2670 <tryall_dlopen_module>
    245c:	cbz	w0, 2464 <find_module+0xcc>
    2460:	mov	w0, #0x1                   	// #1
    2464:	ldp	x20, x19, [sp, #64]
    2468:	ldp	x22, x21, [sp, #48]
    246c:	ldp	x24, x23, [sp, #32]
    2470:	ldr	x25, [sp, #16]
    2474:	ldp	x29, x30, [sp], #80
    2478:	ret

000000000000247c <find_handle>:
    247c:	cbz	x0, 24b4 <find_handle+0x38>
    2480:	stp	x29, x30, [sp, #-32]!
    2484:	str	x19, [sp, #16]
    2488:	mov	x19, x2
    248c:	adrp	x2, 0 <lt__alloc_die_callback>
    2490:	mov	x4, x3
    2494:	add	x2, x2, #0x0
    2498:	mov	x3, x19
    249c:	mov	x29, sp
    24a0:	bl	10f8 <foreach_dirinpath>
    24a4:	cmp	w0, #0x0
    24a8:	csel	x0, xzr, x19, eq  // eq = none
    24ac:	ldr	x19, [sp, #16]
    24b0:	ldp	x29, x30, [sp], #32
    24b4:	ret

00000000000024b8 <find_file_callback>:
    24b8:	stp	x29, x30, [sp, #-48]!
    24bc:	str	x21, [sp, #16]
    24c0:	stp	x20, x19, [sp, #32]
    24c4:	mov	x29, sp
    24c8:	cbz	x0, 254c <find_file_callback+0x94>
    24cc:	ldrb	w8, [x0]
    24d0:	mov	x20, x0
    24d4:	cbz	w8, 254c <find_file_callback+0x94>
    24d8:	mov	x19, x1
    24dc:	cbz	x1, 256c <find_file_callback+0xb4>
    24e0:	mov	x21, x2
    24e4:	cbz	x2, 258c <find_file_callback+0xd4>
    24e8:	adrp	x1, 0 <lt__alloc_die_callback>
    24ec:	add	x1, x1, #0x0
    24f0:	mov	x0, x20
    24f4:	bl	0 <fopen>
    24f8:	str	x0, [x21]
    24fc:	cbz	x0, 253c <find_file_callback+0x84>
    2500:	mov	w1, #0x2f                  	// #47
    2504:	mov	x0, x20
    2508:	bl	0 <strrchr>
    250c:	cmp	x0, x20
    2510:	b.ls	2518 <find_file_callback+0x60>  // b.plast
    2514:	strb	wzr, [x0]
    2518:	ldr	x0, [x19]
    251c:	bl	0 <free>
    2520:	mov	x0, x20
    2524:	str	xzr, [x19]
    2528:	bl	0 <lt__strdup>
    252c:	cmp	x0, #0x0
    2530:	mov	w8, #0xffffffff            	// #-1
    2534:	str	x0, [x19]
    2538:	cneg	w0, w8, ne  // ne = any
    253c:	ldp	x20, x19, [sp, #32]
    2540:	ldr	x21, [sp, #16]
    2544:	ldp	x29, x30, [sp], #48
    2548:	ret
    254c:	adrp	x0, 0 <lt__alloc_die_callback>
    2550:	adrp	x1, 0 <lt__alloc_die_callback>
    2554:	adrp	x3, 0 <lt__alloc_die_callback>
    2558:	add	x0, x0, #0x0
    255c:	add	x1, x1, #0x0
    2560:	add	x3, x3, #0x0
    2564:	mov	w2, #0x2f0                 	// #752
    2568:	bl	0 <__assert_fail>
    256c:	adrp	x0, 0 <lt__alloc_die_callback>
    2570:	adrp	x1, 0 <lt__alloc_die_callback>
    2574:	adrp	x3, 0 <lt__alloc_die_callback>
    2578:	add	x0, x0, #0x0
    257c:	add	x1, x1, #0x0
    2580:	add	x3, x3, #0x0
    2584:	mov	w2, #0x2f1                 	// #753
    2588:	bl	0 <__assert_fail>
    258c:	adrp	x0, 0 <lt__alloc_die_callback>
    2590:	adrp	x1, 0 <lt__alloc_die_callback>
    2594:	adrp	x3, 0 <lt__alloc_die_callback>
    2598:	add	x0, x0, #0x0
    259c:	add	x1, x1, #0x0
    25a0:	add	x3, x3, #0x0
    25a4:	mov	w2, #0x2f2                 	// #754
    25a8:	bl	0 <__assert_fail>

00000000000025ac <trim>:
    25ac:	stp	x29, x30, [sp, #-48]!
    25b0:	stp	x20, x19, [sp, #32]
    25b4:	mov	x20, x1
    25b8:	mov	x19, x0
    25bc:	mov	w1, #0x27                  	// #39
    25c0:	mov	x0, x20
    25c4:	stp	x22, x21, [sp, #16]
    25c8:	mov	x29, sp
    25cc:	bl	0 <strrchr>
    25d0:	mov	x21, x0
    25d4:	cbz	x20, 25f0 <trim+0x44>
    25d8:	ldrb	w8, [x20]
    25dc:	cbz	w8, 25f0 <trim+0x44>
    25e0:	mov	x0, x20
    25e4:	bl	0 <strlen>
    25e8:	mov	x22, x0
    25ec:	b	25f4 <trim+0x48>
    25f0:	mov	x22, xzr
    25f4:	ldr	x0, [x19]
    25f8:	bl	0 <free>
    25fc:	mov	w0, #0x1                   	// #1
    2600:	str	xzr, [x19]
    2604:	cbz	x21, 2658 <trim+0xac>
    2608:	subs	x21, x21, x20
    260c:	b.eq	2658 <trim+0xac>  // b.none
    2610:	cmp	x22, #0x4
    2614:	b.cc	264c <trim+0xa0>  // b.lo, b.ul, b.last
    2618:	ldrb	w8, [x20]
    261c:	cmp	w8, #0x27
    2620:	b.ne	264c <trim+0xa0>  // b.any
    2624:	mov	x0, x21
    2628:	bl	0 <lt__malloc>
    262c:	cbz	x0, 2668 <trim+0xbc>
    2630:	add	x1, x20, #0x1
    2634:	sub	x20, x21, #0x1
    2638:	mov	x2, x20
    263c:	mov	x22, x0
    2640:	bl	0 <memcpy>
    2644:	strb	wzr, [x22, x20]
    2648:	b	2650 <trim+0xa4>
    264c:	mov	x22, xzr
    2650:	mov	w0, wzr
    2654:	str	x22, [x19]
    2658:	ldp	x20, x19, [sp, #32]
    265c:	ldp	x22, x21, [sp, #16]
    2660:	ldp	x29, x30, [sp], #48
    2664:	ret
    2668:	mov	w0, #0x1                   	// #1
    266c:	b	2658 <trim+0xac>

0000000000002670 <tryall_dlopen_module>:
    2670:	stp	x29, x30, [sp, #-80]!
    2674:	stp	x24, x23, [sp, #32]
    2678:	stp	x22, x21, [sp, #48]
    267c:	stp	x20, x19, [sp, #64]
    2680:	mov	x19, x4
    2684:	mov	x22, x3
    2688:	mov	x23, x2
    268c:	mov	x21, x1
    2690:	mov	x20, x0
    2694:	str	x25, [sp, #16]
    2698:	mov	x29, sp
    269c:	cbz	x2, 26d8 <tryall_dlopen_module+0x68>
    26a0:	ldrb	w8, [x23]
    26a4:	cbz	w8, 26d8 <tryall_dlopen_module+0x68>
    26a8:	mov	x0, x23
    26ac:	bl	0 <strlen>
    26b0:	mov	x24, x0
    26b4:	cbnz	x20, 26e0 <tryall_dlopen_module+0x70>
    26b8:	adrp	x0, 0 <lt__alloc_die_callback>
    26bc:	adrp	x1, 0 <lt__alloc_die_callback>
    26c0:	adrp	x3, 0 <lt__alloc_die_callback>
    26c4:	add	x0, x0, #0x0
    26c8:	add	x1, x1, #0x0
    26cc:	add	x3, x3, #0x0
    26d0:	mov	w2, #0x1f6                 	// #502
    26d4:	bl	0 <__assert_fail>
    26d8:	mov	x24, xzr
    26dc:	cbz	x20, 26b8 <tryall_dlopen_module+0x48>
    26e0:	cbz	x23, 27a8 <tryall_dlopen_module+0x138>
    26e4:	cbz	x22, 27c8 <tryall_dlopen_module+0x158>
    26e8:	cbz	x24, 26fc <tryall_dlopen_module+0x8c>
    26ec:	sub	x8, x24, #0x1
    26f0:	ldrb	w9, [x23, x8]
    26f4:	cmp	w9, #0x2f
    26f8:	csel	x24, x8, x24, eq  // eq = none
    26fc:	ldrb	w8, [x22]
    2700:	cbz	w8, 2710 <tryall_dlopen_module+0xa0>
    2704:	mov	x0, x22
    2708:	bl	0 <strlen>
    270c:	b	2714 <tryall_dlopen_module+0xa4>
    2710:	mov	x0, xzr
    2714:	add	x8, x24, x0
    2718:	add	x0, x8, #0x2
    271c:	bl	0 <lt__malloc>
    2720:	cbz	x0, 2764 <tryall_dlopen_module+0xf4>
    2724:	adrp	x1, 0 <lt__alloc_die_callback>
    2728:	add	x1, x1, #0x0
    272c:	mov	w2, w24
    2730:	mov	x3, x23
    2734:	mov	x4, x22
    2738:	mov	x25, x0
    273c:	bl	0 <sprintf>
    2740:	mov	x0, x20
    2744:	cbz	x21, 276c <tryall_dlopen_module+0xfc>
    2748:	mov	x1, xzr
    274c:	mov	x2, x21
    2750:	mov	x3, x25
    2754:	mov	x4, x19
    2758:	bl	2670 <tryall_dlopen_module>
    275c:	mov	w19, w0
    2760:	b	2784 <tryall_dlopen_module+0x114>
    2764:	mov	w19, #0x1                   	// #1
    2768:	b	278c <tryall_dlopen_module+0x11c>
    276c:	mov	x1, x25
    2770:	mov	x2, x19
    2774:	mov	x3, xzr
    2778:	bl	1ed8 <tryall_dlopen>
    277c:	cmp	w0, #0x0
    2780:	cset	w19, ne  // ne = any
    2784:	mov	x0, x25
    2788:	bl	0 <free>
    278c:	mov	w0, w19
    2790:	ldp	x20, x19, [sp, #64]
    2794:	ldp	x22, x21, [sp, #48]
    2798:	ldp	x24, x23, [sp, #32]
    279c:	ldr	x25, [sp, #16]
    27a0:	ldp	x29, x30, [sp], #80
    27a4:	ret
    27a8:	adrp	x0, 0 <lt__alloc_die_callback>
    27ac:	adrp	x1, 0 <lt__alloc_die_callback>
    27b0:	adrp	x3, 0 <lt__alloc_die_callback>
    27b4:	add	x0, x0, #0x0
    27b8:	add	x1, x1, #0x0
    27bc:	add	x3, x3, #0x0
    27c0:	mov	w2, #0x1f7                 	// #503
    27c4:	bl	0 <__assert_fail>
    27c8:	adrp	x0, 0 <lt__alloc_die_callback>
    27cc:	adrp	x1, 0 <lt__alloc_die_callback>
    27d0:	adrp	x3, 0 <lt__alloc_die_callback>
    27d4:	add	x0, x0, #0x0
    27d8:	add	x1, x1, #0x0
    27dc:	add	x3, x3, #0x0
    27e0:	mov	w2, #0x1f8                 	// #504
    27e4:	bl	0 <__assert_fail>

00000000000027e8 <find_handle_callback>:
    27e8:	stp	x29, x30, [sp, #-48]!
    27ec:	stp	x20, x19, [sp, #32]
    27f0:	mov	x19, x1
    27f4:	mov	w1, #0x4                   	// #4
    27f8:	str	x21, [sp, #16]
    27fc:	mov	x29, sp
    2800:	mov	x20, x2
    2804:	mov	x21, x0
    2808:	bl	0 <access>
    280c:	cbz	w0, 2818 <find_handle_callback+0x30>
    2810:	mov	w0, wzr
    2814:	b	2838 <find_handle_callback+0x50>
    2818:	mov	x0, x19
    281c:	mov	x1, x21
    2820:	mov	x2, x20
    2824:	mov	x3, xzr
    2828:	bl	1ed8 <tryall_dlopen>
    282c:	cbz	w0, 2834 <find_handle_callback+0x4c>
    2830:	str	xzr, [x19]
    2834:	mov	w0, #0x1                   	// #1
    2838:	ldp	x20, x19, [sp, #32]
    283c:	ldr	x21, [sp, #16]
    2840:	ldp	x29, x30, [sp], #48
    2844:	ret

0000000000002848 <argzize_path>:
    2848:	stp	x29, x30, [sp, #-16]!
    284c:	mov	x29, sp
    2850:	cbz	x0, 2898 <argzize_path+0x50>
    2854:	mov	x3, x2
    2858:	mov	x2, x1
    285c:	cbz	x1, 28b8 <argzize_path+0x70>
    2860:	cbz	x3, 28d8 <argzize_path+0x90>
    2864:	mov	w1, #0x3a                  	// #58
    2868:	bl	0 <argz_create_sep>
    286c:	cbz	w0, 2890 <argzize_path+0x48>
    2870:	cmp	w0, #0xc
    2874:	b.ne	2880 <argzize_path+0x38>  // b.any
    2878:	mov	w0, #0xb                   	// #11
    287c:	b	2884 <argzize_path+0x3c>
    2880:	mov	w0, wzr
    2884:	bl	0 <lt__error_string>
    2888:	bl	0 <lt__set_last_error>
    288c:	mov	w0, #0x1                   	// #1
    2890:	ldp	x29, x30, [sp], #16
    2894:	ret
    2898:	adrp	x0, 0 <lt__alloc_die_callback>
    289c:	adrp	x1, 0 <lt__alloc_die_callback>
    28a0:	adrp	x3, 0 <lt__alloc_die_callback>
    28a4:	add	x0, x0, #0x0
    28a8:	add	x1, x1, #0x0
    28ac:	add	x3, x3, #0x0
    28b0:	mov	w2, #0x28c                 	// #652
    28b4:	bl	0 <__assert_fail>
    28b8:	adrp	x0, 0 <lt__alloc_die_callback>
    28bc:	adrp	x1, 0 <lt__alloc_die_callback>
    28c0:	adrp	x3, 0 <lt__alloc_die_callback>
    28c4:	add	x0, x0, #0x0
    28c8:	add	x1, x1, #0x0
    28cc:	add	x3, x3, #0x0
    28d0:	mov	w2, #0x28d                 	// #653
    28d4:	bl	0 <__assert_fail>
    28d8:	adrp	x0, 0 <lt__alloc_die_callback>
    28dc:	adrp	x1, 0 <lt__alloc_die_callback>
    28e0:	adrp	x3, 0 <lt__alloc_die_callback>
    28e4:	add	x0, x0, #0x0
    28e8:	add	x1, x1, #0x0
    28ec:	add	x3, x3, #0x0
    28f0:	mov	w2, #0x28e                 	// #654
    28f4:	bl	0 <__assert_fail>

00000000000028f8 <list_files_by_dir>:
    28f8:	stp	x29, x30, [sp, #-48]!
    28fc:	stp	x22, x21, [sp, #16]
    2900:	stp	x20, x19, [sp, #32]
    2904:	mov	x29, sp
    2908:	cbz	x0, 29c0 <list_files_by_dir+0xc8>
    290c:	ldrb	w8, [x0]
    2910:	mov	x21, x0
    2914:	cbz	w8, 29c0 <list_files_by_dir+0xc8>
    2918:	mov	x20, x1
    291c:	cbz	x1, 29e0 <list_files_by_dir+0xe8>
    2920:	mov	x19, x2
    2924:	cbz	x2, 2a00 <list_files_by_dir+0x108>
    2928:	mov	x0, x21
    292c:	bl	0 <strlen>
    2930:	add	x8, x0, x21
    2934:	ldurb	w8, [x8, #-1]
    2938:	cmp	w8, #0x2f
    293c:	b.eq	2a20 <list_files_by_dir+0x128>  // b.none
    2940:	mov	x0, x21
    2944:	bl	0 <opendir>
    2948:	cbz	x0, 29a8 <list_files_by_dir+0xb0>
    294c:	mov	x22, x0
    2950:	bl	0 <readdir>
    2954:	cbz	x0, 2998 <list_files_by_dir+0xa0>
    2958:	mov	x3, x0
    295c:	b	2970 <list_files_by_dir+0x78>
    2960:	mov	x0, x22
    2964:	bl	0 <readdir>
    2968:	mov	x3, x0
    296c:	cbz	x0, 2998 <list_files_by_dir+0xa0>
    2970:	ldrb	w8, [x3, #19]
    2974:	cmp	w8, #0x2e
    2978:	b.eq	2960 <list_files_by_dir+0x68>  // b.none
    297c:	mov	x0, x20
    2980:	mov	x1, x19
    2984:	mov	x2, x21
    2988:	bl	2a40 <lt_argz_insertdir>
    298c:	cbz	w0, 2960 <list_files_by_dir+0x68>
    2990:	mov	w19, #0x1                   	// #1
    2994:	b	299c <list_files_by_dir+0xa4>
    2998:	mov	w19, wzr
    299c:	mov	x0, x22
    29a0:	bl	0 <closedir>
    29a4:	b	29ac <list_files_by_dir+0xb4>
    29a8:	mov	w19, #0x1                   	// #1
    29ac:	mov	w0, w19
    29b0:	ldp	x20, x19, [sp, #32]
    29b4:	ldp	x22, x21, [sp, #16]
    29b8:	ldp	x29, x30, [sp], #48
    29bc:	ret
    29c0:	adrp	x0, 0 <lt__alloc_die_callback>
    29c4:	adrp	x1, 0 <lt__alloc_die_callback>
    29c8:	adrp	x3, 0 <lt__alloc_die_callback>
    29cc:	add	x0, x0, #0x0
    29d0:	add	x1, x1, #0x0
    29d4:	add	x3, x3, #0x0
    29d8:	mov	w2, #0x730                 	// #1840
    29dc:	bl	0 <__assert_fail>
    29e0:	adrp	x0, 0 <lt__alloc_die_callback>
    29e4:	adrp	x1, 0 <lt__alloc_die_callback>
    29e8:	adrp	x3, 0 <lt__alloc_die_callback>
    29ec:	add	x0, x0, #0x0
    29f0:	add	x1, x1, #0x0
    29f4:	add	x3, x3, #0x0
    29f8:	mov	w2, #0x731                 	// #1841
    29fc:	bl	0 <__assert_fail>
    2a00:	adrp	x0, 0 <lt__alloc_die_callback>
    2a04:	adrp	x1, 0 <lt__alloc_die_callback>
    2a08:	adrp	x3, 0 <lt__alloc_die_callback>
    2a0c:	add	x0, x0, #0x0
    2a10:	add	x1, x1, #0x0
    2a14:	add	x3, x3, #0x0
    2a18:	mov	w2, #0x732                 	// #1842
    2a1c:	bl	0 <__assert_fail>
    2a20:	adrp	x0, 0 <lt__alloc_die_callback>
    2a24:	adrp	x1, 0 <lt__alloc_die_callback>
    2a28:	adrp	x3, 0 <lt__alloc_die_callback>
    2a2c:	add	x0, x0, #0x0
    2a30:	add	x1, x1, #0x0
    2a34:	add	x3, x3, #0x0
    2a38:	mov	w2, #0x733                 	// #1843
    2a3c:	bl	0 <__assert_fail>

0000000000002a40 <lt_argz_insertdir>:
    2a40:	stp	x29, x30, [sp, #-80]!
    2a44:	str	x25, [sp, #16]
    2a48:	stp	x24, x23, [sp, #32]
    2a4c:	stp	x22, x21, [sp, #48]
    2a50:	stp	x20, x19, [sp, #64]
    2a54:	mov	x29, sp
    2a58:	cbz	x0, 2b8c <lt_argz_insertdir+0x14c>
    2a5c:	mov	x19, x1
    2a60:	cbz	x1, 2bac <lt_argz_insertdir+0x16c>
    2a64:	mov	x22, x3
    2a68:	cbz	x3, 2bcc <lt_argz_insertdir+0x18c>
    2a6c:	mov	x21, x2
    2a70:	mov	x20, x0
    2a74:	cbz	x2, 2a90 <lt_argz_insertdir+0x50>
    2a78:	ldrb	w8, [x21]
    2a7c:	cbz	w8, 2a90 <lt_argz_insertdir+0x50>
    2a80:	mov	x0, x21
    2a84:	bl	0 <strlen>
    2a88:	add	x23, x0, #0x1
    2a8c:	b	2a94 <lt_argz_insertdir+0x54>
    2a90:	mov	w23, #0x1                   	// #1
    2a94:	add	x22, x22, #0x13
    2a98:	mov	x0, x22
    2a9c:	bl	0 <strlen>
    2aa0:	mov	x11, #0x1                   	// #1
    2aa4:	add	x8, x22, x0
    2aa8:	movk	x11, #0x4000, lsl #32
    2aac:	mov	w9, #0x1                   	// #1
    2ab0:	movk	x11, #0x3ff, lsl #48
    2ab4:	mov	x12, x8
    2ab8:	mov	x10, x12
    2abc:	sub	x12, x12, #0x1
    2ac0:	cmp	x12, x22
    2ac4:	b.ls	2ae0 <lt_argz_insertdir+0xa0>  // b.plast
    2ac8:	ldrb	w13, [x12]
    2acc:	cmp	x13, #0x3f
    2ad0:	b.hi	2ae0 <lt_argz_insertdir+0xa0>  // b.pmore
    2ad4:	lsl	x13, x9, x13
    2ad8:	and	x13, x13, x11
    2adc:	cbnz	x13, 2ab8 <lt_argz_insertdir+0x78>
    2ae0:	ldrb	w9, [x10]
    2ae4:	cmp	w9, #0x2e
    2ae8:	csel	x8, x10, x8, eq  // eq = none
    2aec:	sub	x9, x8, #0x1
    2af0:	cmp	x9, x22
    2af4:	b.ls	2b08 <lt_argz_insertdir+0xc8>  // b.plast
    2af8:	ldrb	w10, [x9], #-1
    2afc:	cmp	w10, #0x2e
    2b00:	b.ne	2af0 <lt_argz_insertdir+0xb0>  // b.any
    2b04:	add	x8, x9, #0x1
    2b08:	sub	x24, x8, x22
    2b0c:	add	x25, x24, x23
    2b10:	add	x0, x25, #0x1
    2b14:	bl	0 <lt__malloc>
    2b18:	cbz	x0, 2b6c <lt_argz_insertdir+0x12c>
    2b1c:	mov	x1, x21
    2b20:	mov	x23, x0
    2b24:	bl	0 <strcpy>
    2b28:	bl	0 <strlen>
    2b2c:	mov	w8, #0x2f                  	// #47
    2b30:	strh	w8, [x23, x0]
    2b34:	mov	x0, x23
    2b38:	mov	x1, x22
    2b3c:	mov	x2, x24
    2b40:	bl	0 <strncat>
    2b44:	mov	x0, x20
    2b48:	mov	x1, x19
    2b4c:	mov	x2, x23
    2b50:	strb	wzr, [x23, x25]
    2b54:	bl	2bec <lt_argz_insertinorder>
    2b58:	cmp	w0, #0x0
    2b5c:	mov	x0, x23
    2b60:	cset	w19, ne  // ne = any
    2b64:	bl	0 <free>
    2b68:	b	2b70 <lt_argz_insertdir+0x130>
    2b6c:	mov	w19, #0x1                   	// #1
    2b70:	mov	w0, w19
    2b74:	ldp	x20, x19, [sp, #64]
    2b78:	ldp	x22, x21, [sp, #48]
    2b7c:	ldp	x24, x23, [sp, #32]
    2b80:	ldr	x25, [sp, #16]
    2b84:	ldp	x29, x30, [sp], #80
    2b88:	ret
    2b8c:	adrp	x0, 0 <lt__alloc_die_callback>
    2b90:	adrp	x1, 0 <lt__alloc_die_callback>
    2b94:	adrp	x3, 0 <lt__alloc_die_callback>
    2b98:	add	x0, x0, #0x0
    2b9c:	add	x1, x1, #0x0
    2ba0:	add	x3, x3, #0x0
    2ba4:	mov	w2, #0x6f6                 	// #1782
    2ba8:	bl	0 <__assert_fail>
    2bac:	adrp	x0, 0 <lt__alloc_die_callback>
    2bb0:	adrp	x1, 0 <lt__alloc_die_callback>
    2bb4:	adrp	x3, 0 <lt__alloc_die_callback>
    2bb8:	add	x0, x0, #0x0
    2bbc:	add	x1, x1, #0x0
    2bc0:	add	x3, x3, #0x0
    2bc4:	mov	w2, #0x6f7                 	// #1783
    2bc8:	bl	0 <__assert_fail>
    2bcc:	adrp	x0, 0 <lt__alloc_die_callback>
    2bd0:	adrp	x1, 0 <lt__alloc_die_callback>
    2bd4:	adrp	x3, 0 <lt__alloc_die_callback>
    2bd8:	add	x0, x0, #0x0
    2bdc:	add	x1, x1, #0x0
    2be0:	add	x3, x3, #0x0
    2be4:	mov	w2, #0x6f8                 	// #1784
    2be8:	bl	0 <__assert_fail>

0000000000002bec <lt_argz_insertinorder>:
    2bec:	stp	x29, x30, [sp, #-64]!
    2bf0:	str	x23, [sp, #16]
    2bf4:	stp	x22, x21, [sp, #32]
    2bf8:	stp	x20, x19, [sp, #48]
    2bfc:	mov	x29, sp
    2c00:	cbz	x0, 2cc0 <lt_argz_insertinorder+0xd4>
    2c04:	mov	x20, x1
    2c08:	cbz	x1, 2ce0 <lt_argz_insertinorder+0xf4>
    2c0c:	mov	x19, x2
    2c10:	cbz	x2, 2ca0 <lt_argz_insertinorder+0xb4>
    2c14:	ldrb	w8, [x19]
    2c18:	cbz	w8, 2ca0 <lt_argz_insertinorder+0xb4>
    2c1c:	ldr	x8, [x0]
    2c20:	mov	x21, x0
    2c24:	cbz	x8, 2c74 <lt_argz_insertinorder+0x88>
    2c28:	mov	x22, xzr
    2c2c:	mov	w23, #0x3                   	// #3
    2c30:	ldr	x0, [x21]
    2c34:	ldr	x1, [x20]
    2c38:	mov	x2, x22
    2c3c:	bl	0 <argz_next>
    2c40:	mov	x22, x0
    2c44:	cbz	x0, 2c78 <lt_argz_insertinorder+0x8c>
    2c48:	mov	x0, x19
    2c4c:	mov	x1, x22
    2c50:	bl	0 <strcmp>
    2c54:	cmp	w0, #0x0
    2c58:	cset	w8, eq  // eq = none
    2c5c:	csel	w8, w23, w8, lt  // lt = tstop
    2c60:	cbz	w8, 2c30 <lt_argz_insertinorder+0x44>
    2c64:	cmp	w8, #0x3
    2c68:	b.eq	2c78 <lt_argz_insertinorder+0x8c>  // b.none
    2c6c:	mov	w0, wzr
    2c70:	b	2c8c <lt_argz_insertinorder+0xa0>
    2c74:	mov	x22, xzr
    2c78:	mov	x0, x21
    2c7c:	mov	x1, x20
    2c80:	mov	x2, x22
    2c84:	mov	x3, x19
    2c88:	bl	2d00 <lt_argz_insert>
    2c8c:	ldp	x20, x19, [sp, #48]
    2c90:	ldp	x22, x21, [sp, #32]
    2c94:	ldr	x23, [sp, #16]
    2c98:	ldp	x29, x30, [sp], #64
    2c9c:	ret
    2ca0:	adrp	x0, 0 <lt__alloc_die_callback>
    2ca4:	adrp	x1, 0 <lt__alloc_die_callback>
    2ca8:	adrp	x3, 0 <lt__alloc_die_callback>
    2cac:	add	x0, x0, #0x0
    2cb0:	add	x1, x1, #0x0
    2cb4:	add	x3, x3, #0x0
    2cb8:	mov	w2, #0x6dd                 	// #1757
    2cbc:	bl	0 <__assert_fail>
    2cc0:	adrp	x0, 0 <lt__alloc_die_callback>
    2cc4:	adrp	x1, 0 <lt__alloc_die_callback>
    2cc8:	adrp	x3, 0 <lt__alloc_die_callback>
    2ccc:	add	x0, x0, #0x0
    2cd0:	add	x1, x1, #0x0
    2cd4:	add	x3, x3, #0x0
    2cd8:	mov	w2, #0x6db                 	// #1755
    2cdc:	bl	0 <__assert_fail>
    2ce0:	adrp	x0, 0 <lt__alloc_die_callback>
    2ce4:	adrp	x1, 0 <lt__alloc_die_callback>
    2ce8:	adrp	x3, 0 <lt__alloc_die_callback>
    2cec:	add	x0, x0, #0x0
    2cf0:	add	x1, x1, #0x0
    2cf4:	add	x3, x3, #0x0
    2cf8:	mov	w2, #0x6dc                 	// #1756
    2cfc:	bl	0 <__assert_fail>

0000000000002d00 <lt_argz_insert>:
    2d00:	stp	x29, x30, [sp, #-48]!
    2d04:	str	x21, [sp, #16]
    2d08:	stp	x20, x19, [sp, #32]
    2d0c:	mov	x19, x3
    2d10:	mov	x20, x1
    2d14:	mov	x21, x0
    2d18:	mov	x29, sp
    2d1c:	cbz	x2, 2d38 <lt_argz_insert+0x38>
    2d20:	mov	x0, x21
    2d24:	mov	x1, x20
    2d28:	mov	x3, x19
    2d2c:	bl	0 <argz_insert>
    2d30:	cbnz	w0, 2d58 <lt_argz_insert+0x58>
    2d34:	b	2d78 <lt_argz_insert+0x78>
    2d38:	mov	x0, x19
    2d3c:	bl	0 <strlen>
    2d40:	add	x3, x0, #0x1
    2d44:	mov	x0, x21
    2d48:	mov	x1, x20
    2d4c:	mov	x2, x19
    2d50:	bl	0 <argz_append>
    2d54:	cbz	w0, 2d78 <lt_argz_insert+0x78>
    2d58:	cmp	w0, #0xc
    2d5c:	b.ne	2d68 <lt_argz_insert+0x68>  // b.any
    2d60:	mov	w0, #0xb                   	// #11
    2d64:	b	2d6c <lt_argz_insert+0x6c>
    2d68:	mov	w0, wzr
    2d6c:	bl	0 <lt__error_string>
    2d70:	bl	0 <lt__set_last_error>
    2d74:	mov	w0, #0x1                   	// #1
    2d78:	ldp	x20, x19, [sp, #32]
    2d7c:	ldr	x21, [sp, #16]
    2d80:	ldp	x29, x30, [sp], #48
    2d84:	ret

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x1, 38 <lt__slist_delete+0x38>
  10:	cbz	x0, 28 <lt__slist_delete+0x28>
  14:	mov	x19, x1
  18:	ldr	x20, [x0]
  1c:	blr	x19
  20:	mov	x0, x20
  24:	cbnz	x20, 18 <lt__slist_delete+0x18>
  28:	ldp	x20, x19, [sp, #16]
  2c:	mov	x0, xzr
  30:	ldp	x29, x30, [sp], #32
  34:	ret
  38:	adrp	x0, 0 <lt__slist_delete>
  3c:	adrp	x1, 0 <lt__slist_delete>
  40:	adrp	x3, 0 <lt__slist_delete>
  44:	add	x0, x0, #0x0
  48:	add	x1, x1, #0x0
  4c:	add	x3, x3, #0x0
  50:	mov	w2, #0x38                  	// #56
  54:	bl	0 <__assert_fail>

0000000000000058 <lt__slist_remove>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	str	x21, [sp, #16]
  60:	stp	x20, x19, [sp, #32]
  64:	mov	x29, sp
  68:	cbz	x1, d8 <lt__slist_remove+0x80>
  6c:	mov	x21, x0
  70:	cbz	x0, 98 <lt__slist_remove+0x40>
  74:	ldr	x0, [x21]
  78:	cbz	x0, c8 <lt__slist_remove+0x70>
  7c:	mov	x20, x1
  80:	mov	x1, x2
  84:	mov	x19, x2
  88:	blr	x20
  8c:	cbz	x0, a0 <lt__slist_remove+0x48>
  90:	ldr	x8, [x21]
  94:	b	c0 <lt__slist_remove+0x68>
  98:	mov	x0, xzr
  9c:	b	c8 <lt__slist_remove+0x70>
  a0:	ldr	x8, [x21]
  a4:	ldr	x0, [x8]
  a8:	cbz	x0, c8 <lt__slist_remove+0x70>
  ac:	mov	x1, x19
  b0:	mov	x21, x8
  b4:	blr	x20
  b8:	ldr	x8, [x21]
  bc:	cbz	x0, a4 <lt__slist_remove+0x4c>
  c0:	ldr	x8, [x8]
  c4:	str	x8, [x21]
  c8:	ldp	x20, x19, [sp, #32]
  cc:	ldr	x21, [sp, #16]
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret
  d8:	adrp	x0, 0 <lt__slist_delete>
  dc:	adrp	x1, 0 <lt__slist_delete>
  e0:	adrp	x3, 0 <lt__slist_delete>
  e4:	add	x0, x0, #0x0
  e8:	add	x1, x1, #0x0
  ec:	add	x3, x3, #0x0
  f0:	mov	w2, #0x53                  	// #83
  f4:	bl	0 <__assert_fail>

00000000000000f8 <lt__slist_find>:
  f8:	stp	x29, x30, [sp, #-48]!
  fc:	str	x21, [sp, #16]
 100:	stp	x20, x19, [sp, #32]
 104:	mov	x29, sp
 108:	cbz	x1, 148 <lt__slist_find+0x50>
 10c:	mov	x21, x0
 110:	cbz	x0, 134 <lt__slist_find+0x3c>
 114:	mov	x19, x2
 118:	mov	x20, x1
 11c:	mov	x0, x21
 120:	mov	x1, x19
 124:	blr	x20
 128:	cbnz	x0, 138 <lt__slist_find+0x40>
 12c:	ldr	x21, [x21]
 130:	cbnz	x21, 11c <lt__slist_find+0x24>
 134:	mov	x0, xzr
 138:	ldp	x20, x19, [sp, #32]
 13c:	ldr	x21, [sp, #16]
 140:	ldp	x29, x30, [sp], #48
 144:	ret
 148:	adrp	x0, 0 <lt__slist_delete>
 14c:	adrp	x1, 0 <lt__slist_delete>
 150:	adrp	x3, 0 <lt__slist_delete>
 154:	add	x0, x0, #0x0
 158:	add	x1, x1, #0x0
 15c:	add	x3, x3, #0x0
 160:	mov	w2, #0x7a                  	// #122
 164:	bl	0 <__assert_fail>

0000000000000168 <lt__slist_concat>:
 168:	cbz	x0, 184 <lt__slist_concat+0x1c>
 16c:	mov	x9, x0
 170:	mov	x8, x9
 174:	ldr	x9, [x9]
 178:	cbnz	x9, 170 <lt__slist_concat+0x8>
 17c:	str	x1, [x8]
 180:	ret
 184:	mov	x0, x1
 188:	ret

000000000000018c <lt__slist_cons>:
 18c:	stp	x29, x30, [sp, #-16]!
 190:	mov	x29, sp
 194:	cbz	x0, 1ac <lt__slist_cons+0x20>
 198:	ldr	x8, [x0]
 19c:	cbnz	x8, 1b8 <lt__slist_cons+0x2c>
 1a0:	str	x1, [x0]
 1a4:	ldp	x29, x30, [sp], #16
 1a8:	ret
 1ac:	mov	x0, x1
 1b0:	ldp	x29, x30, [sp], #16
 1b4:	ret
 1b8:	adrp	x0, 0 <lt__slist_delete>
 1bc:	adrp	x1, 0 <lt__slist_delete>
 1c0:	adrp	x3, 0 <lt__slist_delete>
 1c4:	add	x0, x0, #0x0
 1c8:	add	x1, x1, #0x0
 1cc:	add	x3, x3, #0x0
 1d0:	mov	w2, #0xaf                  	// #175
 1d4:	bl	0 <__assert_fail>

00000000000001d8 <lt__slist_tail>:
 1d8:	cbz	x0, 1e0 <lt__slist_tail+0x8>
 1dc:	ldr	x0, [x0]
 1e0:	ret

00000000000001e4 <lt__slist_nth>:
 1e4:	cbz	x0, 204 <lt__slist_nth+0x20>
 1e8:	cmp	x1, #0x2
 1ec:	b.cc	204 <lt__slist_nth+0x20>  // b.lo, b.ul, b.last
 1f0:	sub	x8, x1, #0x1
 1f4:	ldr	x0, [x0]
 1f8:	subs	x8, x8, #0x1
 1fc:	cbz	x0, 204 <lt__slist_nth+0x20>
 200:	b.hi	1f4 <lt__slist_nth+0x10>  // b.pmore
 204:	ret

0000000000000208 <lt__slist_length>:
 208:	mov	x8, xzr
 20c:	cbz	x0, 21c <lt__slist_length+0x14>
 210:	ldr	x0, [x0]
 214:	add	x8, x8, #0x1
 218:	cbnz	x0, 210 <lt__slist_length+0x8>
 21c:	mov	x0, x8
 220:	ret

0000000000000224 <lt__slist_reverse>:
 224:	cbz	x0, 248 <lt__slist_reverse+0x24>
 228:	mov	x9, xzr
 22c:	mov	x8, x0
 230:	ldr	x0, [x0]
 234:	str	x9, [x8]
 238:	mov	x9, x8
 23c:	cbnz	x0, 22c <lt__slist_reverse+0x8>
 240:	mov	x0, x8
 244:	ret
 248:	mov	x0, xzr
 24c:	ret

0000000000000250 <lt__slist_foreach>:
 250:	stp	x29, x30, [sp, #-48]!
 254:	stp	x22, x21, [sp, #16]
 258:	stp	x20, x19, [sp, #32]
 25c:	mov	x29, sp
 260:	cbz	x1, 2ac <lt__slist_foreach+0x5c>
 264:	mov	x21, x0
 268:	cbz	x0, 298 <lt__slist_foreach+0x48>
 26c:	mov	x19, x2
 270:	mov	x20, x1
 274:	ldr	x22, [x21]
 278:	mov	x0, x21
 27c:	mov	x1, x19
 280:	blr	x20
 284:	cmp	x0, #0x0
 288:	csel	x21, x22, x21, eq  // eq = none
 28c:	cbz	x21, 29c <lt__slist_foreach+0x4c>
 290:	cbz	x0, 274 <lt__slist_foreach+0x24>
 294:	b	29c <lt__slist_foreach+0x4c>
 298:	mov	x0, xzr
 29c:	ldp	x20, x19, [sp, #32]
 2a0:	ldp	x22, x21, [sp, #16]
 2a4:	ldp	x29, x30, [sp], #48
 2a8:	ret
 2ac:	adrp	x0, 0 <lt__slist_delete>
 2b0:	adrp	x1, 0 <lt__slist_delete>
 2b4:	adrp	x3, 0 <lt__slist_delete>
 2b8:	add	x0, x0, #0x0
 2bc:	add	x1, x1, #0x0
 2c0:	add	x3, x3, #0x0
 2c4:	mov	w2, #0xf6                  	// #246
 2c8:	bl	0 <__assert_fail>

00000000000002cc <lt__slist_sort>:
 2cc:	stp	x29, x30, [sp, #-48]!
 2d0:	stp	x22, x21, [sp, #16]
 2d4:	stp	x20, x19, [sp, #32]
 2d8:	mov	x29, sp
 2dc:	cbz	x0, 350 <lt__slist_sort+0x84>
 2e0:	ldr	x8, [x0]
 2e4:	cbz	x8, 350 <lt__slist_sort+0x84>
 2e8:	ldr	x9, [x8]
 2ec:	mov	x19, x2
 2f0:	mov	x20, x1
 2f4:	mov	x8, x0
 2f8:	cbz	x9, 314 <lt__slist_sort+0x48>
 2fc:	mov	x8, x0
 300:	ldr	x9, [x9]
 304:	cbz	x9, 314 <lt__slist_sort+0x48>
 308:	ldr	x9, [x9]
 30c:	ldr	x8, [x8]
 310:	cbnz	x9, 300 <lt__slist_sort+0x34>
 314:	ldr	x21, [x8]
 318:	mov	x1, x20
 31c:	mov	x2, x19
 320:	str	xzr, [x8]
 324:	bl	2cc <lt__slist_sort>
 328:	mov	x22, x0
 32c:	mov	x0, x21
 330:	mov	x1, x20
 334:	mov	x2, x19
 338:	bl	2cc <lt__slist_sort>
 33c:	mov	x1, x0
 340:	mov	x0, x22
 344:	mov	x2, x20
 348:	mov	x3, x19
 34c:	bl	360 <slist_sort_merge>
 350:	ldp	x20, x19, [sp, #32]
 354:	ldp	x22, x21, [sp, #16]
 358:	ldp	x29, x30, [sp], #48
 35c:	ret

0000000000000360 <slist_sort_merge>:
 360:	stp	x29, x30, [sp, #-64]!
 364:	mov	x29, sp
 368:	cmp	x0, #0x0
 36c:	str	x23, [sp, #16]
 370:	stp	x22, x21, [sp, #32]
 374:	mov	x22, x1
 378:	mov	x21, x0
 37c:	add	x23, x29, #0x18
 380:	cset	w10, ne  // ne = any
 384:	stp	x20, x19, [sp, #48]
 388:	cbz	x1, 3f4 <slist_sort_merge+0x94>
 38c:	cbz	x21, 3f4 <slist_sort_merge+0x94>
 390:	mov	x19, x3
 394:	mov	x20, x2
 398:	add	x23, x29, #0x18
 39c:	mov	x0, x21
 3a0:	mov	x1, x22
 3a4:	mov	x2, x19
 3a8:	blr	x20
 3ac:	cmp	w0, #0x0
 3b0:	b.le	3c8 <slist_sort_merge+0x68>
 3b4:	str	x22, [x23]
 3b8:	ldr	x8, [x22]
 3bc:	mov	x9, x21
 3c0:	mov	x23, x22
 3c4:	b	3d8 <slist_sort_merge+0x78>
 3c8:	str	x21, [x23]
 3cc:	ldr	x9, [x21]
 3d0:	mov	x8, x22
 3d4:	mov	x23, x21
 3d8:	cmp	x9, #0x0
 3dc:	cset	w10, ne  // ne = any
 3e0:	cbz	x8, 3fc <slist_sort_merge+0x9c>
 3e4:	mov	x21, x9
 3e8:	mov	x22, x8
 3ec:	cbnz	x9, 39c <slist_sort_merge+0x3c>
 3f0:	b	3fc <slist_sort_merge+0x9c>
 3f4:	mov	x8, x22
 3f8:	mov	x9, x21
 3fc:	cmp	w10, #0x0
 400:	csel	x8, x9, x8, ne  // ne = any
 404:	str	x8, [x23]
 408:	ldr	x0, [x29, #24]
 40c:	ldp	x20, x19, [sp, #48]
 410:	ldp	x22, x21, [sp, #32]
 414:	ldr	x23, [sp, #16]
 418:	ldp	x29, x30, [sp], #64
 41c:	ret

0000000000000420 <lt__slist_box>:
 420:	stp	x29, x30, [sp, #-32]!
 424:	str	x19, [sp, #16]
 428:	mov	x19, x0
 42c:	mov	w0, #0x10                  	// #16
 430:	mov	x29, sp
 434:	bl	0 <malloc>
 438:	cbz	x0, 440 <lt__slist_box+0x20>
 43c:	stp	xzr, x19, [x0]
 440:	ldr	x19, [sp, #16]
 444:	ldp	x29, x30, [sp], #32
 448:	ret

000000000000044c <lt__slist_unbox>:
 44c:	stp	x29, x30, [sp, #-32]!
 450:	str	x19, [sp, #16]
 454:	mov	x29, sp
 458:	cbz	x0, 468 <lt__slist_unbox+0x1c>
 45c:	ldr	x19, [x0, #8]
 460:	bl	0 <free>
 464:	b	46c <lt__slist_unbox+0x20>
 468:	mov	x19, xzr
 46c:	mov	x0, x19
 470:	ldr	x19, [sp, #16]
 474:	ldp	x29, x30, [sp], #32
 478:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 84 <lt_strlcat+0x84>
  14:	mov	x19, x1
  18:	cbz	x1, a4 <lt_strlcat+0xa4>
  1c:	mov	x21, x2
  20:	cbz	x2, c4 <lt_strlcat+0xc4>
  24:	mov	x20, x0
  28:	bl	0 <strlen>
  2c:	sub	x8, x21, #0x1
  30:	cmp	x0, x8
  34:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  38:	ldrb	w9, [x19]
  3c:	cbz	w9, 58 <lt_strlcat+0x58>
  40:	strb	w9, [x20, x0]
  44:	ldrb	w9, [x19, #1]!
  48:	add	x0, x0, #0x1
  4c:	cmp	x0, x8
  50:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  54:	cbnz	w9, 40 <lt_strlcat+0x40>
  58:	strb	wzr, [x20, x0]
  5c:	ldrb	w8, [x19]
  60:	cbz	w8, 74 <lt_strlcat+0x74>
  64:	add	x8, x19, #0x1
  68:	ldrb	w9, [x8], #1
  6c:	add	x0, x0, #0x1
  70:	cbnz	w9, 68 <lt_strlcat+0x68>
  74:	ldp	x20, x19, [sp, #32]
  78:	ldr	x21, [sp, #16]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret
  84:	adrp	x0, 0 <lt_strlcat>
  88:	adrp	x1, 0 <lt_strlcat>
  8c:	adrp	x3, 0 <lt_strlcat>
  90:	add	x0, x0, #0x0
  94:	add	x1, x1, #0x0
  98:	add	x3, x3, #0x0
  9c:	mov	w2, #0x39                  	// #57
  a0:	bl	0 <__assert_fail>
  a4:	adrp	x0, 0 <lt_strlcat>
  a8:	adrp	x1, 0 <lt_strlcat>
  ac:	adrp	x3, 0 <lt_strlcat>
  b0:	add	x0, x0, #0x0
  b4:	add	x1, x1, #0x0
  b8:	add	x3, x3, #0x0
  bc:	mov	w2, #0x3a                  	// #58
  c0:	bl	0 <__assert_fail>
  c4:	adrp	x0, 0 <lt_strlcat>
  c8:	adrp	x1, 0 <lt_strlcat>
  cc:	adrp	x3, 0 <lt_strlcat>
  d0:	add	x0, x0, #0x0
  d4:	add	x1, x1, #0x0
  d8:	add	x3, x3, #0x0
  dc:	mov	w2, #0x3b                  	// #59
  e0:	bl	0 <__assert_fail>

00000000000000e4 <lt_strlcpy>:
  e4:	stp	x29, x30, [sp, #-16]!
  e8:	mov	x29, sp
  ec:	cbz	x0, 15c <lt_strlcpy+0x78>
  f0:	cbz	x1, 17c <lt_strlcpy+0x98>
  f4:	cbz	x2, 19c <lt_strlcpy+0xb8>
  f8:	mov	x8, x0
  fc:	subs	x9, x2, #0x1
 100:	mov	x0, xzr
 104:	b.eq	138 <lt_strlcpy+0x54>  // b.none
 108:	ldrb	w10, [x1]
 10c:	cbz	w10, 138 <lt_strlcpy+0x54>
 110:	mov	x11, xzr
 114:	add	x0, x11, #0x1
 118:	cmp	x0, x9
 11c:	strb	w10, [x8, x11]
 120:	b.cs	134 <lt_strlcpy+0x50>  // b.hs, b.nlast
 124:	add	x10, x1, x11
 128:	ldrb	w10, [x10, #1]
 12c:	mov	x11, x0
 130:	cbnz	w10, 114 <lt_strlcpy+0x30>
 134:	add	x1, x1, x0
 138:	strb	wzr, [x8, x0]
 13c:	ldrb	w8, [x1]
 140:	cbz	w8, 154 <lt_strlcpy+0x70>
 144:	add	x8, x1, #0x1
 148:	ldrb	w9, [x8], #1
 14c:	add	x0, x0, #0x1
 150:	cbnz	w9, 148 <lt_strlcpy+0x64>
 154:	ldp	x29, x30, [sp], #16
 158:	ret
 15c:	adrp	x0, 0 <lt_strlcat>
 160:	adrp	x1, 0 <lt_strlcat>
 164:	adrp	x3, 0 <lt_strlcat>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	add	x3, x3, #0x0
 174:	mov	w2, #0x69                  	// #105
 178:	bl	0 <__assert_fail>
 17c:	adrp	x0, 0 <lt_strlcat>
 180:	adrp	x1, 0 <lt_strlcat>
 184:	adrp	x3, 0 <lt_strlcat>
 188:	add	x0, x0, #0x0
 18c:	add	x1, x1, #0x0
 190:	add	x3, x3, #0x0
 194:	mov	w2, #0x6a                  	// #106
 198:	bl	0 <__assert_fail>
 19c:	adrp	x0, 0 <lt_strlcat>
 1a0:	adrp	x1, 0 <lt_strlcat>
 1a4:	adrp	x3, 0 <lt_strlcat>
 1a8:	add	x0, x0, #0x0
 1ac:	add	x1, x1, #0x0
 1b0:	add	x3, x3, #0x0
 1b4:	mov	w2, #0x6b                  	// #107
 1b8:	bl	0 <__assert_fail>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <dlopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <dlopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbz	x8, 28 <dlopen_LTX_get_vtable+0x28>
  1c:	ldr	x0, [x20]
  20:	cbnz	x0, 3c <dlopen_LTX_get_vtable+0x3c>
  24:	b	a8 <dlopen_LTX_get_vtable+0xa8>
  28:	mov	w0, #0x48                  	// #72
  2c:	bl	0 <lt__zalloc>
  30:	str	x0, [x20]
  34:	ldr	x0, [x20]
  38:	cbz	x0, a8 <dlopen_LTX_get_vtable+0xa8>
  3c:	ldr	x8, [x0]
  40:	cbz	x8, 4c <dlopen_LTX_get_vtable+0x4c>
  44:	cbnz	x0, 8c <dlopen_LTX_get_vtable+0x8c>
  48:	b	a8 <dlopen_LTX_get_vtable+0xa8>
  4c:	adrp	x8, 0 <dlopen_LTX_get_vtable>
  50:	adrp	x9, 0 <dlopen_LTX_get_vtable>
  54:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  58:	adrp	x11, 0 <dlopen_LTX_get_vtable>
  5c:	adrp	x12, 0 <dlopen_LTX_get_vtable>
  60:	add	x8, x8, #0x0
  64:	add	x9, x9, #0x0
  68:	add	x10, x10, #0x0
  6c:	add	x11, x11, #0x0
  70:	add	x12, x12, #0x0
  74:	str	x8, [x0]
  78:	stp	x9, x10, [x0, #16]
  7c:	str	x11, [x0, #32]
  80:	stp	x12, x19, [x0, #48]
  84:	str	wzr, [x0, #64]
  88:	cbz	x0, a8 <dlopen_LTX_get_vtable+0xa8>
  8c:	ldr	x8, [x0, #56]
  90:	cmp	x8, x19
  94:	b.eq	a8 <dlopen_LTX_get_vtable+0xa8>  // b.none
  98:	mov	w0, #0x3                   	// #3
  9c:	bl	0 <lt__error_string>
  a0:	bl	0 <lt__set_last_error>
  a4:	mov	x0, xzr
  a8:	ldp	x20, x19, [sp, #16]
  ac:	ldp	x29, x30, [sp], #32
  b0:	ret

00000000000000b4 <vm_open>:
  b4:	stp	x29, x30, [sp, #-32]!
  b8:	mov	x0, x1
  bc:	str	x19, [sp, #16]
  c0:	mov	x29, sp
  c4:	cbz	x2, dc <vm_open+0x28>
  c8:	ldrb	w8, [x2]
  cc:	tst	w8, #0x4
  d0:	mov	w8, #0x101                 	// #257
  d4:	csinc	w1, w8, wzr, ne  // ne = any
  d8:	b	e0 <vm_open+0x2c>
  dc:	mov	w1, #0x1                   	// #1
  e0:	bl	0 <dlopen>
  e4:	mov	x19, x0
  e8:	cbnz	x0, f4 <vm_open+0x40>
  ec:	bl	0 <dlerror>
  f0:	bl	0 <lt__set_last_error>
  f4:	mov	x0, x19
  f8:	ldr	x19, [sp, #16]
  fc:	ldp	x29, x30, [sp], #32
 100:	ret

0000000000000104 <vm_close>:
 104:	stp	x29, x30, [sp, #-16]!
 108:	mov	x0, x1
 10c:	mov	x29, sp
 110:	bl	0 <dlclose>
 114:	cbz	w0, 124 <vm_close+0x20>
 118:	bl	0 <dlerror>
 11c:	bl	0 <lt__set_last_error>
 120:	mov	w0, #0x1                   	// #1
 124:	ldp	x29, x30, [sp], #16
 128:	ret

000000000000012c <vm_sym>:
 12c:	stp	x29, x30, [sp, #-32]!
 130:	mov	x0, x1
 134:	mov	x1, x2
 138:	str	x19, [sp, #16]
 13c:	mov	x29, sp
 140:	bl	0 <dlsym>
 144:	mov	x19, x0
 148:	cbnz	x0, 154 <vm_sym+0x28>
 14c:	bl	0 <dlerror>
 150:	bl	0 <lt__set_last_error>
 154:	mov	x0, x19
 158:	ldr	x19, [sp, #16]
 15c:	ldp	x29, x30, [sp], #32
 160:	ret

0000000000000164 <vl_exit>:
 164:	adrp	x8, 0 <dlopen_LTX_get_vtable>
 168:	mov	w0, wzr
 16c:	str	xzr, [x8]
 170:	ret
