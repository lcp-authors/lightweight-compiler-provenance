In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgomp.a_gcc_-O2:

alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_malloc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <malloc>
  14:	cbz	x0, 24 <gomp_malloc+0x24>
  18:	ldr	x19, [sp, #16]
  1c:	ldp	x29, x30, [sp], #32
  20:	ret
  24:	adrp	x0, 0 <gomp_malloc>
  28:	mov	x1, x19
  2c:	add	x0, x0, #0x0
  30:	bl	0 <gomp_fatal>
  34:	nop

0000000000000038 <gomp_malloc_cleared>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	x19, [sp, #16]
  44:	mov	x19, x0
  48:	mov	x1, x19
  4c:	mov	x0, #0x1                   	// #1
  50:	bl	0 <calloc>
  54:	cbz	x0, 64 <gomp_malloc_cleared+0x2c>
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	adrp	x0, 0 <gomp_malloc>
  68:	mov	x1, x19
  6c:	add	x0, x0, #0x0
  70:	bl	0 <gomp_fatal>
  74:	nop

0000000000000078 <gomp_realloc>:
  78:	stp	x29, x30, [sp, #-32]!
  7c:	mov	x29, sp
  80:	str	x19, [sp, #16]
  84:	mov	x19, x1
  88:	bl	0 <realloc>
  8c:	cbz	x0, 9c <gomp_realloc+0x24>
  90:	ldr	x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret
  9c:	adrp	x0, 0 <gomp_malloc>
  a0:	mov	x1, x19
  a4:	add	x0, x0, #0x0
  a8:	bl	0 <gomp_fatal>
  ac:	nop

00000000000000b0 <gomp_aligned_alloc>:
  b0:	stp	x29, x30, [sp, #-32]!
  b4:	mov	x2, #0x8                   	// #8
  b8:	cmp	x0, x2
  bc:	mov	x29, sp
  c0:	csel	x0, x0, x2, cs  // cs = hs, nlast
  c4:	str	x19, [sp, #16]
  c8:	mov	x19, x1
  cc:	bl	0 <aligned_alloc>
  d0:	cbz	x0, e0 <gomp_aligned_alloc+0x30>
  d4:	ldr	x19, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret
  e0:	adrp	x0, 0 <gomp_malloc>
  e4:	mov	x1, x19
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <gomp_fatal>

00000000000000f0 <gomp_aligned_free>:
  f0:	b	0 <free>

atomic.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_atomic_start>:
   0:	adrp	x0, 0 <GOMP_atomic_start>
   4:	add	x0, x0, #0x0
   8:	mov	w2, #0x1                   	// #1
   c:	ldaxr	w1, [x0]
  10:	cbnz	w1, 1c <GOMP_atomic_start+0x1c>
  14:	stxr	w3, w2, [x0]
  18:	cbnz	w3, c <GOMP_atomic_start+0xc>
  1c:	cmp	w1, #0x0
  20:	b.ne	28 <GOMP_atomic_start+0x28>  // b.any
  24:	ret
  28:	b	0 <gomp_mutex_lock_slow>
  2c:	nop

0000000000000030 <GOMP_atomic_end>:
  30:	adrp	x0, 0 <GOMP_atomic_start>
  34:	add	x0, x0, #0x0
  38:	ldxr	w1, [x0]
  3c:	stlxr	w2, wzr, [x0]
  40:	cbnz	w2, 38 <GOMP_atomic_end+0x8>
  44:	tbnz	w1, #31, 4c <GOMP_atomic_end+0x1c>
  48:	ret
  4c:	b	0 <gomp_mutex_unlock_slow>

barrier.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_barrier>:
   0:	adrp	x0, 0 <gomp_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0, #16]
  14:	cbz	x0, 20 <GOMP_barrier+0x20>
  18:	add	x0, x0, #0x80
  1c:	b	0 <gomp_team_barrier_wait>
  20:	ret
  24:	nop

0000000000000028 <GOMP_barrier_cancel>:
  28:	adrp	x0, 0 <gomp_tls_data>
  2c:	ldr	x0, [x0]
  30:	mrs	x1, tpidr_el0
  34:	add	x0, x1, x0
  38:	ldr	x0, [x0, #16]
  3c:	add	x0, x0, #0x80
  40:	b	0 <gomp_team_barrier_wait_cancel>

critical.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_critical_start>:
   0:	dmb	ish
   4:	adrp	x0, 0 <GOMP_critical_start>
   8:	add	x0, x0, #0x0
   c:	mov	w2, #0x1                   	// #1
  10:	ldaxr	w1, [x0]
  14:	cbnz	w1, 20 <GOMP_critical_start+0x20>
  18:	stxr	w3, w2, [x0]
  1c:	cbnz	w3, 10 <GOMP_critical_start+0x10>
  20:	cmp	w1, #0x0
  24:	b.ne	2c <GOMP_critical_start+0x2c>  // b.any
  28:	ret
  2c:	b	0 <gomp_mutex_lock_slow>

0000000000000030 <GOMP_critical_end>:
  30:	adrp	x0, 0 <GOMP_critical_start>
  34:	add	x0, x0, #0x0
  38:	ldxr	w1, [x0]
  3c:	stlxr	w2, wzr, [x0]
  40:	cbnz	w2, 38 <GOMP_critical_end+0x8>
  44:	tbnz	w1, #31, 4c <GOMP_critical_end+0x1c>
  48:	ret
  4c:	b	0 <gomp_mutex_unlock_slow>

0000000000000050 <GOMP_critical_name_start>:
  50:	mov	x2, x0
  54:	mov	w3, #0x1                   	// #1
  58:	ldaxr	w1, [x2]
  5c:	cbnz	w1, 68 <GOMP_critical_name_start+0x18>
  60:	stxr	w4, w3, [x2]
  64:	cbnz	w4, 58 <GOMP_critical_name_start+0x8>
  68:	cmp	w1, #0x0
  6c:	b.ne	74 <GOMP_critical_name_start+0x24>  // b.any
  70:	ret
  74:	b	0 <gomp_mutex_lock_slow>

0000000000000078 <GOMP_critical_name_end>:
  78:	mov	x1, x0
  7c:	ldxr	w2, [x1]
  80:	stlxr	w3, wzr, [x1]
  84:	cbnz	w3, 7c <GOMP_critical_name_end+0x4>
  88:	tbnz	w2, #31, 90 <GOMP_critical_name_end+0x18>
  8c:	ret
  90:	b	0 <gomp_mutex_unlock_slow>

env.o:     file format elf64-littleaarch64


Disassembly of section .text.startup:

0000000000000000 <parse_boolean>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	stp	x21, x22, [sp, #32]
       c:	mov	x22, x1
      10:	mov	x21, x0
      14:	bl	0 <getenv>
      18:	cbz	x0, a0 <parse_boolean+0xa0>
      1c:	stp	x19, x20, [sp, #16]
      20:	mov	x19, x0
      24:	bl	0 <__ctype_b_loc>
      28:	ldr	x20, [x0]
      2c:	b	34 <parse_boolean+0x34>
      30:	add	x19, x19, #0x1
      34:	ldrb	w2, [x19]
      38:	ldrh	w2, [x20, x2, lsl #1]
      3c:	tbnz	w2, #13, 30 <parse_boolean+0x30>
      40:	adrp	x1, 0 <parse_boolean>
      44:	mov	x0, x19
      48:	add	x1, x1, #0x0
      4c:	mov	x2, #0x4                   	// #4
      50:	bl	0 <strncasecmp>
      54:	cbz	w0, ac <parse_boolean+0xac>
      58:	adrp	x1, 0 <parse_boolean>
      5c:	mov	x0, x19
      60:	add	x1, x1, #0x0
      64:	mov	x2, #0x5                   	// #5
      68:	bl	0 <strncasecmp>
      6c:	cbnz	w0, d8 <parse_boolean+0xd8>
      70:	add	x19, x19, #0x5
      74:	strb	wzr, [x22]
      78:	ldrb	w1, [x19]
      7c:	ubfiz	x0, x1, #1, #8
      80:	ldrh	w0, [x20, x0]
      84:	tbz	w0, #13, 98 <parse_boolean+0x98>
      88:	ldrb	w1, [x19, #1]!
      8c:	ubfiz	x0, x1, #1, #8
      90:	ldrh	w2, [x20, x0]
      94:	tbnz	w2, #13, 88 <parse_boolean+0x88>
      98:	cbnz	w1, bc <parse_boolean+0xbc>
      9c:	ldp	x19, x20, [sp, #16]
      a0:	ldp	x21, x22, [sp, #32]
      a4:	ldp	x29, x30, [sp], #48
      a8:	ret
      ac:	mov	w0, #0x1                   	// #1
      b0:	add	x19, x19, #0x4
      b4:	strb	w0, [x22]
      b8:	b	78 <parse_boolean+0x78>
      bc:	mov	x1, x21
      c0:	adrp	x0, 0 <parse_boolean>
      c4:	ldp	x19, x20, [sp, #16]
      c8:	add	x0, x0, #0x0
      cc:	ldp	x21, x22, [sp, #32]
      d0:	ldp	x29, x30, [sp], #48
      d4:	b	0 <gomp_error>
      d8:	adrp	x19, 0 <parse_boolean>
      dc:	add	x19, x19, #0x0
      e0:	b	78 <parse_boolean+0x78>
      e4:	nop

00000000000000e8 <parse_unsigned_long_1>:
      e8:	stp	x29, x30, [sp, #-80]!
      ec:	tst	w3, #0xff
      f0:	mov	x29, sp
      f4:	stp	x19, x20, [sp, #16]
      f8:	mov	x20, x0
      fc:	stp	x21, x22, [sp, #32]
     100:	mov	x21, x1
     104:	and	w22, w2, #0xff
     108:	b.eq	16c <parse_unsigned_long_1+0x84>  // b.none
     10c:	bl	0 <secure_getenv>
     110:	mov	x19, x0
     114:	cbz	x19, 178 <parse_unsigned_long_1+0x90>
     118:	stp	x23, x24, [sp, #48]
     11c:	bl	0 <__ctype_b_loc>
     120:	mov	x23, x0
     124:	ldr	x4, [x0]
     128:	b	130 <parse_unsigned_long_1+0x48>
     12c:	add	x19, x19, #0x1
     130:	ldrb	w2, [x19]
     134:	ubfiz	x3, x2, #1, #8
     138:	ldrh	w3, [x4, x3]
     13c:	tbnz	w3, #13, 12c <parse_unsigned_long_1+0x44>
     140:	cbnz	w2, 180 <parse_unsigned_long_1+0x98>
     144:	mov	x1, x20
     148:	adrp	x0, 0 <parse_boolean>
     14c:	add	x0, x0, #0x0
     150:	bl	0 <gomp_error>
     154:	ldp	x23, x24, [sp, #48]
     158:	mov	w0, #0x0                   	// #0
     15c:	ldp	x19, x20, [sp, #16]
     160:	ldp	x21, x22, [sp, #32]
     164:	ldp	x29, x30, [sp], #80
     168:	ret
     16c:	bl	0 <getenv>
     170:	mov	x19, x0
     174:	cbnz	x19, 118 <parse_unsigned_long_1+0x30>
     178:	mov	w0, #0x0                   	// #0
     17c:	b	15c <parse_unsigned_long_1+0x74>
     180:	bl	0 <__errno_location>
     184:	mov	x24, x0
     188:	add	x1, sp, #0x48
     18c:	mov	x0, x19
     190:	mov	w2, #0xa                   	// #10
     194:	str	wzr, [x24]
     198:	bl	0 <strtoul>
     19c:	mov	x5, x0
     1a0:	ldr	w1, [x24]
     1a4:	cbnz	w1, 144 <parse_unsigned_long_1+0x5c>
     1a8:	neg	w22, w22
     1ac:	cmp	x0, w22, sxtw
     1b0:	b.le	144 <parse_unsigned_long_1+0x5c>
     1b4:	ldr	x2, [sp, #72]
     1b8:	ldr	x4, [x23]
     1bc:	ldrb	w0, [x2]
     1c0:	ldrb	w1, [x2]
     1c4:	ldrh	w0, [x4, x0, lsl #1]
     1c8:	tbz	w0, #13, 1e4 <parse_unsigned_long_1+0xfc>
     1cc:	add	x2, x2, #0x1
     1d0:	str	x2, [sp, #72]
     1d4:	ldrb	w1, [x2], #1
     1d8:	ubfiz	x3, x1, #1, #8
     1dc:	ldrh	w3, [x4, x3]
     1e0:	tbnz	w3, #13, 1d0 <parse_unsigned_long_1+0xe8>
     1e4:	cbnz	w1, 144 <parse_unsigned_long_1+0x5c>
     1e8:	mov	w0, #0x1                   	// #1
     1ec:	ldp	x23, x24, [sp, #48]
     1f0:	str	x5, [x21]
     1f4:	b	15c <parse_unsigned_long_1+0x74>

00000000000001f8 <parse_one_place>:
     1f8:	stp	x29, x30, [sp, #-160]!
     1fc:	mov	x29, sp
     200:	stp	x21, x22, [sp, #32]
     204:	adrp	x22, 8 <parse_boolean+0x8>
     208:	stp	x23, x24, [sp, #48]
     20c:	ldr	x24, [x22]
     210:	stp	x19, x20, [sp, #16]
     214:	ldr	x20, [x0]
     218:	stp	x1, x0, [sp, #104]
     21c:	stp	x2, x3, [sp, #120]
     220:	str	x20, [sp, #152]
     224:	cbz	x24, 234 <parse_one_place+0x3c>
     228:	adrp	x0, 8 <parse_boolean+0x8>
     22c:	ldr	x0, [x0]
     230:	ldr	x24, [x24, x0, lsl #3]
     234:	ldr	x0, [sp, #104]
     238:	strb	wzr, [x0]
     23c:	bl	0 <__ctype_b_loc>
     240:	mov	x19, x0
     244:	mov	x0, x20
     248:	ldr	x4, [x19]
     24c:	b	254 <parse_one_place+0x5c>
     250:	str	x0, [sp, #152]
     254:	mov	x1, x0
     258:	ldrb	w2, [x0], #1
     25c:	ubfiz	x3, x2, #1, #8
     260:	ldrh	w3, [x4, x3]
     264:	tbnz	w3, #13, 250 <parse_one_place+0x58>
     268:	cmp	w2, #0x21
     26c:	b.eq	4fc <parse_one_place+0x304>  // b.none
     270:	cmp	w2, #0x7b
     274:	b.ne	3dc <parse_one_place+0x1e4>  // b.any
     278:	add	x21, x1, #0x1
     27c:	stp	x25, x26, [sp, #64]
     280:	stp	x27, x28, [sp, #80]
     284:	str	x21, [sp, #152]
     288:	ldrb	w0, [x1, #1]
     28c:	ldrh	w0, [x4, x0, lsl #1]
     290:	tbz	w0, #13, 2b0 <parse_one_place+0xb8>
     294:	add	x0, x1, #0x2
     298:	mov	x21, x0
     29c:	str	x0, [sp, #152]
     2a0:	add	x0, x0, #0x1
     2a4:	ldrb	w1, [x21]
     2a8:	ldrh	w1, [x4, x1, lsl #1]
     2ac:	tbnz	w1, #13, 298 <parse_one_place+0xa0>
     2b0:	mov	w27, #0x0                   	// #0
     2b4:	mov	w23, #0x0                   	// #0
     2b8:	str	x21, [sp, #152]
     2bc:	bl	0 <__errno_location>
     2c0:	mov	x28, x0
     2c4:	mov	x0, x21
     2c8:	ldrb	w25, [x0]
     2cc:	cmp	w25, #0x21
     2d0:	cset	w20, eq  // eq = none
     2d4:	b.eq	378 <parse_one_place+0x180>  // b.none
     2d8:	str	wzr, [x28]
     2dc:	add	x1, sp, #0x98
     2e0:	mov	w2, #0xa                   	// #10
     2e4:	bl	0 <strtoul>
     2e8:	mov	x26, x0
     2ec:	ldr	w1, [x28]
     2f0:	cbnz	w1, 3d4 <parse_one_place+0x1dc>
     2f4:	ldr	x4, [sp, #152]
     2f8:	ldr	x5, [x19]
     2fc:	ldrb	w2, [x4]
     300:	ubfiz	x0, x2, #1, #8
     304:	ldrh	w0, [x5, x0]
     308:	tbz	w0, #13, 328 <parse_one_place+0x130>
     30c:	add	x1, x4, #0x1
     310:	str	x1, [sp, #152]
     314:	mov	x4, x1
     318:	ldrb	w2, [x1], #1
     31c:	ubfiz	x3, x2, #1, #8
     320:	ldrh	w3, [x5, x3]
     324:	tbnz	w3, #13, 310 <parse_one_place+0x118>
     328:	mov	x3, #0x1                   	// #1
     32c:	cmp	w2, #0x3a
     330:	mov	x9, x3
     334:	b.eq	438 <parse_one_place+0x240>  // b.none
     338:	ldr	x0, [x22]
     33c:	cbz	x0, 348 <parse_one_place+0x150>
     340:	cmp	w20, w23
     344:	b.eq	3f4 <parse_one_place+0x1fc>  // b.none
     348:	ldr	x0, [sp, #152]
     34c:	ldrb	w1, [x0]
     350:	cmp	w1, #0x7d
     354:	b.eq	428 <parse_one_place+0x230>  // b.none
     358:	cmp	w1, #0x2c
     35c:	b.ne	3d4 <parse_one_place+0x1dc>  // b.any
     360:	add	x0, x0, #0x1
     364:	str	x0, [sp, #152]
     368:	ldrb	w25, [x0]
     36c:	cmp	w25, #0x21
     370:	cset	w20, eq  // eq = none
     374:	b.ne	2d8 <parse_one_place+0xe0>  // b.any
     378:	add	x1, x0, #0x1
     37c:	str	x1, [sp, #152]
     380:	ldr	x3, [x19]
     384:	ldrb	w2, [x0, #1]
     388:	ldr	x4, [x22]
     38c:	ldrh	w2, [x3, x2, lsl #1]
     390:	cmp	x4, #0x0
     394:	csinc	w27, w27, wzr, eq  // eq = none
     398:	tbz	w2, #13, 5c8 <parse_one_place+0x3d0>
     39c:	add	x1, x0, #0x2
     3a0:	mov	x0, x1
     3a4:	str	x1, [sp, #152]
     3a8:	add	x1, x1, #0x1
     3ac:	ldrb	w2, [x0]
     3b0:	ldrh	w2, [x3, x2, lsl #1]
     3b4:	tbnz	w2, #13, 3a0 <parse_one_place+0x1a8>
     3b8:	str	wzr, [x28]
     3bc:	add	x1, sp, #0x98
     3c0:	mov	w2, #0xa                   	// #10
     3c4:	bl	0 <strtoul>
     3c8:	mov	x26, x0
     3cc:	ldr	w1, [x28]
     3d0:	cbz	w1, 2f4 <parse_one_place+0xfc>
     3d4:	ldp	x25, x26, [sp, #64]
     3d8:	ldp	x27, x28, [sp, #80]
     3dc:	mov	w0, #0x0                   	// #0
     3e0:	ldp	x19, x20, [sp, #16]
     3e4:	ldp	x21, x22, [sp, #32]
     3e8:	ldp	x23, x24, [sp, #48]
     3ec:	ldp	x29, x30, [sp], #160
     3f0:	ret
     3f4:	cmp	w25, #0x21
     3f8:	b.eq	4e4 <parse_one_place+0x2ec>  // b.none
     3fc:	mov	x2, x9
     400:	mov	x1, x26
     404:	mov	x0, x24
     408:	mov	w4, #0x0                   	// #0
     40c:	bl	0 <gomp_affinity_add_cpus>
     410:	tst	w0, #0xff
     414:	b.eq	3d4 <parse_one_place+0x1dc>  // b.none
     418:	ldr	x0, [sp, #152]
     41c:	ldrb	w1, [x0]
     420:	cmp	w1, #0x7d
     424:	b.ne	358 <parse_one_place+0x160>  // b.any
     428:	cbz	w27, 5d8 <parse_one_place+0x3e0>
     42c:	cbnz	w23, 5d8 <parse_one_place+0x3e0>
     430:	mov	w23, #0x1                   	// #1
     434:	b	2b8 <parse_one_place+0xc0>
     438:	add	x0, x4, x3
     43c:	str	x0, [sp, #152]
     440:	ldrb	w1, [x4, #1]
     444:	ldrh	w1, [x5, x1, lsl #1]
     448:	tbz	w1, #13, 468 <parse_one_place+0x270>
     44c:	add	x4, x4, #0x2
     450:	mov	x0, x4
     454:	str	x4, [sp, #152]
     458:	add	x4, x4, #0x1
     45c:	ldrb	w1, [x0]
     460:	ldrh	w1, [x5, x1, lsl #1]
     464:	tbnz	w1, #13, 450 <parse_one_place+0x258>
     468:	str	wzr, [x28]
     46c:	add	x1, sp, #0x98
     470:	mov	w2, #0xa                   	// #10
     474:	bl	0 <strtoul>
     478:	mov	x9, x0
     47c:	ldr	w1, [x28]
     480:	cmp	w1, #0x0
     484:	ccmp	x0, #0x0, #0x4, eq  // eq = none
     488:	b.eq	3d4 <parse_one_place+0x1dc>  // b.none
     48c:	ldr	x4, [sp, #152]
     490:	ldr	x5, [x19]
     494:	ldrb	w2, [x4]
     498:	ubfiz	x0, x2, #1, #8
     49c:	ldrh	w0, [x5, x0]
     4a0:	tbz	w0, #13, 4c0 <parse_one_place+0x2c8>
     4a4:	add	x1, x4, #0x1
     4a8:	str	x1, [sp, #152]
     4ac:	mov	x4, x1
     4b0:	ldrb	w2, [x1], #1
     4b4:	ubfiz	x3, x2, #1, #8
     4b8:	ldrh	w3, [x5, x3]
     4bc:	tbnz	w3, #13, 4a8 <parse_one_place+0x2b0>
     4c0:	cmp	w2, #0x3a
     4c4:	mov	x3, #0x1                   	// #1
     4c8:	b.eq	53c <parse_one_place+0x344>  // b.none
     4cc:	cmp	w20, #0x0
     4d0:	ccmp	x9, #0x1, #0x4, ne  // ne = any
     4d4:	b.eq	338 <parse_one_place+0x140>  // b.none
     4d8:	ldp	x25, x26, [sp, #64]
     4dc:	ldp	x27, x28, [sp, #80]
     4e0:	b	3dc <parse_one_place+0x1e4>
     4e4:	mov	x1, x26
     4e8:	mov	x0, x24
     4ec:	bl	0 <gomp_affinity_remove_cpu>
     4f0:	tst	w0, #0xff
     4f4:	b.ne	348 <parse_one_place+0x150>  // b.any
     4f8:	b	3d4 <parse_one_place+0x1dc>
     4fc:	ldr	x3, [sp, #104]
     500:	mov	w2, #0x1                   	// #1
     504:	str	x0, [sp, #152]
     508:	strb	w2, [x3]
     50c:	ldrb	w2, [x1, #1]
     510:	ubfiz	x3, x2, #1, #8
     514:	ldrh	w3, [x4, x3]
     518:	tbz	w3, #13, 5d0 <parse_one_place+0x3d8>
     51c:	add	x0, x1, #0x2
     520:	str	x0, [sp, #152]
     524:	mov	x1, x0
     528:	ldrb	w2, [x0], #1
     52c:	ubfiz	x3, x2, #1, #8
     530:	ldrh	w3, [x4, x3]
     534:	tbnz	w3, #13, 520 <parse_one_place+0x328>
     538:	b	270 <parse_one_place+0x78>
     53c:	add	x0, x4, x3
     540:	str	x0, [sp, #152]
     544:	ldrb	w1, [x4, #1]
     548:	ldrh	w1, [x5, x1, lsl #1]
     54c:	tbz	w1, #13, 570 <parse_one_place+0x378>
     550:	add	x4, x4, #0x2
     554:	nop
     558:	mov	x0, x4
     55c:	str	x4, [sp, #152]
     560:	add	x4, x4, #0x1
     564:	ldrb	w1, [x0]
     568:	ldrh	w1, [x5, x1, lsl #1]
     56c:	tbnz	w1, #13, 558 <parse_one_place+0x360>
     570:	str	wzr, [x28]
     574:	add	x1, sp, #0x98
     578:	mov	w2, #0xa                   	// #10
     57c:	str	x9, [sp, #136]
     580:	bl	0 <strtol>
     584:	mov	x3, x0
     588:	ldr	w1, [x28]
     58c:	cbnz	w1, 3d4 <parse_one_place+0x1dc>
     590:	ldr	x0, [sp, #152]
     594:	ldr	x2, [x19]
     598:	ldrb	w1, [x0]
     59c:	ldr	x9, [sp, #136]
     5a0:	ldrh	w1, [x2, x1, lsl #1]
     5a4:	tbz	w1, #13, 4cc <parse_one_place+0x2d4>
     5a8:	add	x0, x0, #0x1
     5ac:	nop
     5b0:	str	x0, [sp, #152]
     5b4:	add	x0, x0, #0x1
     5b8:	ldurb	w1, [x0, #-1]
     5bc:	ldrh	w1, [x2, x1, lsl #1]
     5c0:	tbnz	w1, #13, 5b0 <parse_one_place+0x3b8>
     5c4:	b	4cc <parse_one_place+0x2d4>
     5c8:	mov	x0, x1
     5cc:	b	2d8 <parse_one_place+0xe0>
     5d0:	mov	x1, x0
     5d4:	b	270 <parse_one_place+0x78>
     5d8:	add	x1, x0, #0x1
     5dc:	str	x1, [sp, #152]
     5e0:	ldr	x3, [x19]
     5e4:	ldrb	w2, [x0, #1]
     5e8:	ubfiz	x4, x2, #1, #8
     5ec:	ldrh	w4, [x3, x4]
     5f0:	tbz	w4, #13, 610 <parse_one_place+0x418>
     5f4:	add	x0, x0, #0x2
     5f8:	str	x0, [sp, #152]
     5fc:	mov	x1, x0
     600:	ldrb	w2, [x0], #1
     604:	ubfiz	x4, x2, #1, #8
     608:	ldrh	w4, [x3, x4]
     60c:	tbnz	w4, #13, 5f8 <parse_one_place+0x400>
     610:	cmp	w2, #0x3a
     614:	mov	x2, #0x1                   	// #1
     618:	mov	x20, x2
     61c:	b.eq	648 <parse_one_place+0x450>  // b.none
     620:	ldr	x1, [sp, #112]
     624:	ldr	x0, [sp, #152]
     628:	ldp	x25, x26, [sp, #64]
     62c:	ldp	x27, x28, [sp, #80]
     630:	str	x0, [x1]
     634:	ldp	x0, x1, [sp, #120]
     638:	str	x20, [x0]
     63c:	mov	w0, #0x1                   	// #1
     640:	str	x2, [x1]
     644:	b	3e0 <parse_one_place+0x1e8>
     648:	add	x20, x1, x2
     64c:	str	x20, [sp, #152]
     650:	ldrb	w0, [x1, #1]
     654:	ldrh	w0, [x3, x0, lsl #1]
     658:	tbz	w0, #13, 678 <parse_one_place+0x480>
     65c:	add	x1, x1, #0x2
     660:	mov	x20, x1
     664:	str	x1, [sp, #152]
     668:	add	x1, x1, #0x1
     66c:	ldrb	w0, [x20]
     670:	ldrh	w0, [x3, x0, lsl #1]
     674:	tbnz	w0, #13, 660 <parse_one_place+0x468>
     678:	bl	0 <__errno_location>
     67c:	mov	x21, x0
     680:	add	x1, sp, #0x98
     684:	mov	x0, x20
     688:	mov	w2, #0xa                   	// #10
     68c:	str	wzr, [x21]
     690:	bl	0 <strtoul>
     694:	mov	x20, x0
     698:	ldr	w1, [x21]
     69c:	cbnz	w1, 3d4 <parse_one_place+0x1dc>
     6a0:	sub	x1, x0, #0x1
     6a4:	mov	x0, #0xfffe                	// #65534
     6a8:	cmp	x1, x0
     6ac:	b.hi	3d4 <parse_one_place+0x1dc>  // b.pmore
     6b0:	ldr	x1, [sp, #152]
     6b4:	ldr	x3, [x19]
     6b8:	ldrb	w0, [x1]
     6bc:	ubfiz	x2, x0, #1, #8
     6c0:	ldrh	w2, [x3, x2]
     6c4:	tbz	w2, #13, 6e4 <parse_one_place+0x4ec>
     6c8:	add	x2, x1, #0x1
     6cc:	str	x2, [sp, #152]
     6d0:	mov	x1, x2
     6d4:	ldrb	w0, [x2], #1
     6d8:	ubfiz	x4, x0, #1, #8
     6dc:	ldrh	w4, [x3, x4]
     6e0:	tbnz	w4, #13, 6cc <parse_one_place+0x4d4>
     6e4:	cmp	w0, #0x3a
     6e8:	mov	x2, #0x1                   	// #1
     6ec:	b.eq	708 <parse_one_place+0x510>  // b.none
     6f0:	ldr	x0, [sp, #104]
     6f4:	ldrb	w0, [x0]
     6f8:	cbz	w0, 620 <parse_one_place+0x428>
     6fc:	cmp	x20, #0x1
     700:	b.ne	3d4 <parse_one_place+0x1dc>  // b.any
     704:	b	620 <parse_one_place+0x428>
     708:	add	x0, x1, x2
     70c:	str	x0, [sp, #152]
     710:	ldrb	w2, [x1, #1]
     714:	ldrh	w2, [x3, x2, lsl #1]
     718:	tbz	w2, #13, 738 <parse_one_place+0x540>
     71c:	add	x1, x1, #0x2
     720:	mov	x0, x1
     724:	str	x1, [sp, #152]
     728:	add	x1, x1, #0x1
     72c:	ldrb	w2, [x0]
     730:	ldrh	w2, [x3, x2, lsl #1]
     734:	tbnz	w2, #13, 720 <parse_one_place+0x528>
     738:	str	wzr, [x21]
     73c:	add	x1, sp, #0x98
     740:	mov	w2, #0xa                   	// #10
     744:	bl	0 <strtol>
     748:	mov	x2, x0
     74c:	ldr	w1, [x21]
     750:	cbnz	w1, 3d4 <parse_one_place+0x1dc>
     754:	ldr	x0, [sp, #152]
     758:	ldr	x3, [x19]
     75c:	ldrb	w1, [x0]
     760:	ldrh	w1, [x3, x1, lsl #1]
     764:	tbz	w1, #13, 6f0 <parse_one_place+0x4f8>
     768:	add	x0, x0, #0x1
     76c:	str	x0, [sp, #152]
     770:	add	x0, x0, #0x1
     774:	ldurb	w1, [x0, #-1]
     778:	ldrh	w1, [x3, x1, lsl #1]
     77c:	tbnz	w1, #13, 76c <parse_one_place+0x574>
     780:	b	6f0 <parse_one_place+0x4f8>
     784:	nop

0000000000000788 <parse_stacksize>:
     788:	stp	x29, x30, [sp, #-80]!
     78c:	mov	x29, sp
     790:	stp	x19, x20, [sp, #16]
     794:	mov	x20, x0
     798:	stp	x21, x22, [sp, #32]
     79c:	mov	x21, x1
     7a0:	bl	0 <getenv>
     7a4:	cbz	x0, 8f4 <parse_stacksize+0x16c>
     7a8:	mov	x19, x0
     7ac:	bl	0 <__ctype_b_loc>
     7b0:	mov	x22, x0
     7b4:	ldr	x4, [x0]
     7b8:	b	7c0 <parse_stacksize+0x38>
     7bc:	add	x19, x19, #0x1
     7c0:	ldrb	w2, [x19]
     7c4:	ubfiz	x3, x2, #1, #8
     7c8:	ldrh	w3, [x4, x3]
     7cc:	tbnz	w3, #13, 7bc <parse_stacksize+0x34>
     7d0:	cbnz	w2, 7f8 <parse_stacksize+0x70>
     7d4:	mov	x1, x20
     7d8:	adrp	x0, 0 <parse_boolean>
     7dc:	add	x0, x0, #0x0
     7e0:	bl	0 <gomp_error>
     7e4:	mov	w0, #0x0                   	// #0
     7e8:	ldp	x19, x20, [sp, #16]
     7ec:	ldp	x21, x22, [sp, #32]
     7f0:	ldp	x29, x30, [sp], #80
     7f4:	ret
     7f8:	stp	x23, x24, [sp, #48]
     7fc:	bl	0 <__errno_location>
     800:	mov	x23, x0
     804:	add	x1, sp, #0x48
     808:	mov	x0, x19
     80c:	mov	w2, #0xa                   	// #10
     810:	str	wzr, [x23]
     814:	bl	0 <strtoul>
     818:	mov	x24, x0
     81c:	ldr	w1, [x23]
     820:	cbnz	w1, 8c8 <parse_stacksize+0x140>
     824:	ldr	x19, [sp, #72]
     828:	ldr	x22, [x22]
     82c:	ldrb	w0, [x19]
     830:	ldrb	w3, [x19]
     834:	mov	x23, x0
     838:	ldrh	w0, [x22, x0, lsl #1]
     83c:	tbz	w0, #13, 864 <parse_stacksize+0xdc>
     840:	add	x2, x19, #0x1
     844:	nop
     848:	str	x2, [sp, #72]
     84c:	mov	x19, x2
     850:	ldrb	w3, [x2], #1
     854:	and	x23, x3, #0xff
     858:	ubfiz	x1, x3, #1, #8
     85c:	ldrh	w1, [x22, x1]
     860:	tbnz	w1, #13, 848 <parse_stacksize+0xc0>
     864:	cbz	w3, 8d0 <parse_stacksize+0x148>
     868:	bl	0 <__ctype_tolower_loc>
     86c:	ldr	x0, [x0]
     870:	ldr	w0, [x0, x23, lsl #2]
     874:	cmp	w0, #0x6b
     878:	b.eq	914 <parse_stacksize+0x18c>  // b.none
     87c:	b.gt	8fc <parse_stacksize+0x174>
     880:	cmp	w0, #0x62
     884:	b.eq	90c <parse_stacksize+0x184>  // b.none
     888:	cmp	w0, #0x67
     88c:	mov	x0, #0x1e                  	// #30
     890:	b.ne	8c8 <parse_stacksize+0x140>  // b.any
     894:	add	x1, x19, #0x1
     898:	str	x1, [sp, #72]
     89c:	ldrb	w2, [x19, #1]
     8a0:	ldrb	w1, [x19, #1]
     8a4:	ldrh	w2, [x22, x2, lsl #1]
     8a8:	tbz	w2, #13, 8c4 <parse_stacksize+0x13c>
     8ac:	add	x19, x19, #0x2
     8b0:	str	x19, [sp, #72]
     8b4:	ldrb	w1, [x19], #1
     8b8:	ubfiz	x2, x1, #1, #8
     8bc:	ldrh	w2, [x22, x2]
     8c0:	tbnz	w2, #13, 8b0 <parse_stacksize+0x128>
     8c4:	cbz	w1, 8d4 <parse_stacksize+0x14c>
     8c8:	ldp	x23, x24, [sp, #48]
     8cc:	b	7d4 <parse_stacksize+0x4c>
     8d0:	mov	x0, #0xa                   	// #10
     8d4:	lsl	x1, x24, x0
     8d8:	lsr	x0, x1, x0
     8dc:	cmp	x0, x24
     8e0:	b.ne	8c8 <parse_stacksize+0x140>  // b.any
     8e4:	mov	w0, #0x1                   	// #1
     8e8:	ldp	x23, x24, [sp, #48]
     8ec:	str	x1, [x21]
     8f0:	b	7e8 <parse_stacksize+0x60>
     8f4:	mov	w0, #0x0                   	// #0
     8f8:	b	7e8 <parse_stacksize+0x60>
     8fc:	cmp	w0, #0x6d
     900:	b.ne	8c8 <parse_stacksize+0x140>  // b.any
     904:	mov	x0, #0x14                  	// #20
     908:	b	894 <parse_stacksize+0x10c>
     90c:	mov	x0, #0x0                   	// #0
     910:	b	894 <parse_stacksize+0x10c>
     914:	mov	x0, #0xa                   	// #10
     918:	b	894 <parse_stacksize+0x10c>
     91c:	nop

0000000000000920 <parse_int_1.constprop.0>:
     920:	stp	x29, x30, [sp, #-48]!
     924:	mov	w3, w2
     928:	mov	w2, #0x1                   	// #1
     92c:	mov	x29, sp
     930:	stp	x19, x20, [sp, #16]
     934:	mov	x19, x1
     938:	mov	x20, x0
     93c:	add	x1, sp, #0x28
     940:	bl	e8 <parse_unsigned_long_1>
     944:	ands	w0, w0, #0xff
     948:	b.eq	960 <parse_int_1.constprop.0+0x40>  // b.none
     94c:	ldr	x1, [sp, #40]
     950:	mov	x2, #0x7fffffff            	// #2147483647
     954:	cmp	x1, x2
     958:	b.hi	96c <parse_int_1.constprop.0+0x4c>  // b.pmore
     95c:	str	w1, [x19]
     960:	ldp	x19, x20, [sp, #16]
     964:	ldp	x29, x30, [sp], #48
     968:	ret
     96c:	mov	x1, x20
     970:	adrp	x0, 0 <parse_boolean>
     974:	add	x0, x0, #0x0
     978:	bl	0 <gomp_error>
     97c:	mov	w0, #0x0                   	// #0
     980:	b	960 <parse_int_1.constprop.0+0x40>
     984:	nop

0000000000000988 <initialize_env>:
     988:	stp	x29, x30, [sp, #-208]!
     98c:	adrp	x0, 0 <parse_boolean>
     990:	add	x0, x0, #0x0
     994:	mov	x29, sp
     998:	stp	x19, x20, [sp, #16]
     99c:	stp	x21, x22, [sp, #32]
     9a0:	adrp	x22, 0 <parse_boolean>
     9a4:	add	x19, x22, #0x0
     9a8:	stp	x23, x24, [sp, #48]
     9ac:	stp	x25, x26, [sp, #64]
     9b0:	stp	x27, x28, [sp, #80]
     9b4:	str	xzr, [sp, #168]
     9b8:	bl	0 <getenv>
     9bc:	cbz	x0, a5c <initialize_env+0xd4>
     9c0:	mov	x20, x0
     9c4:	bl	0 <__ctype_b_loc>
     9c8:	mov	x23, x0
     9cc:	ldr	x24, [x0]
     9d0:	b	9d8 <initialize_env+0x50>
     9d4:	add	x20, x20, #0x1
     9d8:	ldrb	w0, [x20]
     9dc:	ldrh	w0, [x24, x0, lsl #1]
     9e0:	tbnz	w0, #13, 9d4 <initialize_env+0x4c>
     9e4:	adrp	x1, 0 <parse_boolean>
     9e8:	mov	x0, x20
     9ec:	add	x1, x1, #0x0
     9f0:	mov	x2, #0x9                   	// #9
     9f4:	bl	0 <strncasecmp>
     9f8:	cbz	w0, 11bc <initialize_env+0x834>
     9fc:	adrp	x1, 0 <parse_boolean>
     a00:	mov	x0, x20
     a04:	add	x1, x1, #0x0
     a08:	mov	x2, #0xc                   	// #12
     a0c:	bl	0 <strncasecmp>
     a10:	cbnz	w0, 1de8 <initialize_env+0x1460>
     a14:	add	x20, x20, #0xc
     a18:	mov	w21, #0xffffffff            	// #-1
     a1c:	ldrb	w0, [x20]
     a20:	ldrb	w1, [x20]
     a24:	ldrh	w0, [x24, x0, lsl #1]
     a28:	tbz	w0, #13, a40 <initialize_env+0xb8>
     a2c:	nop
     a30:	ldrb	w1, [x20, #1]!
     a34:	ubfiz	x0, x1, #1, #8
     a38:	ldrh	w0, [x24, x0]
     a3c:	tbnz	w0, #13, a30 <initialize_env+0xa8>
     a40:	cmp	w1, #0x3a
     a44:	b.eq	1bd4 <initialize_env+0x124c>  // b.none
     a48:	adrp	x22, 0 <parse_boolean>
     a4c:	add	x19, x22, #0x0
     a50:	adrp	x0, 0 <parse_boolean>
     a54:	add	x0, x0, #0x0
     a58:	bl	0 <gomp_error>
     a5c:	add	x1, x19, #0x18
     a60:	adrp	x0, 0 <parse_boolean>
     a64:	add	x0, x0, #0x0
     a68:	bl	0 <parse_boolean>
     a6c:	add	x1, x19, #0x19
     a70:	adrp	x0, 0 <parse_boolean>
     a74:	add	x0, x0, #0x0
     a78:	bl	0 <parse_boolean>
     a7c:	adrp	x0, 0 <parse_boolean>
     a80:	add	x1, x0, #0x0
     a84:	adrp	x0, 0 <parse_boolean>
     a88:	add	x0, x0, #0x0
     a8c:	bl	0 <parse_boolean>
     a90:	adrp	x0, 0 <parse_boolean>
     a94:	adrp	x1, 1 <parse_boolean+0x1>
     a98:	add	x0, x0, #0x0
     a9c:	add	x1, x1, #0x0
     aa0:	bl	0 <parse_boolean>
     aa4:	add	x1, x19, #0x10
     aa8:	mov	w2, #0x0                   	// #0
     aac:	adrp	x0, 0 <parse_boolean>
     ab0:	add	x0, x0, #0x0
     ab4:	bl	920 <parse_int_1.constprop.0>
     ab8:	adrp	x0, 0 <parse_boolean>
     abc:	add	x0, x0, #0x0
     ac0:	add	x1, x0, #0x4
     ac4:	mov	w2, #0x0                   	// #0
     ac8:	adrp	x0, 0 <parse_boolean>
     acc:	add	x0, x0, #0x0
     ad0:	bl	920 <parse_int_1.constprop.0>
     ad4:	add	x1, x19, #0x28
     ad8:	mov	w3, #0x0                   	// #0
     adc:	mov	w2, #0x1                   	// #1
     ae0:	adrp	x0, 0 <parse_boolean>
     ae4:	add	x0, x0, #0x0
     ae8:	bl	e8 <parse_unsigned_long_1>
     aec:	add	x1, sp, #0xa0
     af0:	adrp	x0, 0 <parse_boolean>
     af4:	mov	w3, #0x0                   	// #0
     af8:	add	x0, x0, #0x0
     afc:	mov	w2, #0x0                   	// #0
     b00:	bl	e8 <parse_unsigned_long_1>
     b04:	tst	w0, #0xff
     b08:	b.eq	b24 <initialize_env+0x19c>  // b.none
     b0c:	ldr	x0, [sp, #160]
     b10:	mov	x2, #0x7fffffff            	// #2147483647
     b14:	mov	x1, #0xffffffff            	// #4294967295
     b18:	cmp	x0, x2
     b1c:	csel	x0, x0, x1, ls  // ls = plast
     b20:	str	w0, [x19, #20]
     b24:	adrp	x1, 4 <parse_boolean+0x4>
     b28:	add	x1, x1, #0x0
     b2c:	mov	w2, #0x1                   	// #1
     b30:	adrp	x0, 0 <parse_boolean>
     b34:	add	x0, x0, #0x0
     b38:	bl	920 <parse_int_1.constprop.0>
     b3c:	bl	0 <gomp_init_num_threads>
     b40:	adrp	x23, 0 <parse_boolean>
     b44:	ldr	x1, [x22]
     b48:	add	x23, x23, #0x0
     b4c:	mov	x0, x23
     b50:	str	x1, [x19, #48]
     b54:	bl	0 <getenv>
     b58:	mov	x20, x0
     b5c:	cbz	x0, ba4 <initialize_env+0x21c>
     b60:	bl	0 <__ctype_b_loc>
     b64:	mov	x25, x0
     b68:	ldr	x2, [x0]
     b6c:	b	b74 <initialize_env+0x1ec>
     b70:	add	x20, x20, #0x1
     b74:	ldrb	w1, [x20]
     b78:	ubfiz	x0, x1, #1, #8
     b7c:	ldrh	w0, [x2, x0]
     b80:	tbnz	w0, #13, b70 <initialize_env+0x1e8>
     b84:	cbnz	w1, 11c8 <initialize_env+0x840>
     b88:	mov	x26, #0x0                   	// #0
     b8c:	mov	x0, x26
     b90:	bl	0 <free>
     b94:	adrp	x0, 0 <parse_boolean>
     b98:	mov	x1, x23
     b9c:	add	x0, x0, #0x0
     ba0:	bl	0 <gomp_error>
     ba4:	ldr	x0, [x19, #48]
     ba8:	str	x0, [x22]
     bac:	adrp	x21, 0 <parse_boolean>
     bb0:	add	x21, x21, #0x0
     bb4:	mov	x0, x21
     bb8:	bl	0 <getenv>
     bbc:	mov	x20, x0
     bc0:	cbz	x0, 1f4c <initialize_env+0x15c4>
     bc4:	bl	0 <__ctype_b_loc>
     bc8:	ldr	x28, [x0]
     bcc:	b	bd4 <initialize_env+0x24c>
     bd0:	add	x20, x20, #0x1
     bd4:	ldrb	w0, [x20]
     bd8:	ubfiz	x1, x0, #1, #8
     bdc:	ldrh	w1, [x28, x1]
     be0:	tbnz	w1, #13, bd0 <initialize_env+0x248>
     be4:	cbz	w0, c18 <initialize_env+0x290>
     be8:	add	x24, x19, #0x38
     bec:	mov	w23, #0x0                   	// #0
     bf0:	ldrb	w25, [x24, #7]
     bf4:	mov	x1, x24
     bf8:	mov	x0, x20
     bfc:	add	x24, x24, #0xc
     c00:	mov	x2, x25
     c04:	bl	0 <strncasecmp>
     c08:	cbz	w0, 1a64 <initialize_env+0x10dc>
     c0c:	add	w23, w23, #0x1
     c10:	cmp	w23, #0x5
     c14:	b.ne	bf0 <initialize_env+0x268>  // b.any
     c18:	mov	x26, #0x0                   	// #0
     c1c:	mov	x0, x26
     c20:	bl	0 <free>
     c24:	adrp	x0, 0 <parse_boolean>
     c28:	mov	x1, x21
     c2c:	add	x0, x0, #0x0
     c30:	mov	w24, #0x0                   	// #0
     c34:	bl	0 <gomp_error>
     c38:	adrp	x20, 0 <parse_boolean>
     c3c:	add	x20, x20, #0x0
     c40:	mov	x0, x20
     c44:	bl	0 <getenv>
     c48:	str	x0, [sp, #176]
     c4c:	mov	x21, x0
     c50:	cbz	x0, db4 <initialize_env+0x42c>
     c54:	bl	0 <__ctype_b_loc>
     c58:	mov	x23, x0
     c5c:	mov	x1, x21
     c60:	ldr	x27, [x0]
     c64:	b	c6c <initialize_env+0x2e4>
     c68:	str	x1, [sp, #176]
     c6c:	mov	x25, x1
     c70:	ldrb	w0, [x1], #1
     c74:	ubfiz	x2, x0, #1, #8
     c78:	ldrh	w2, [x27, x2]
     c7c:	tbnz	w2, #13, c68 <initialize_env+0x2e0>
     c80:	cbz	w0, 116c <initialize_env+0x7e4>
     c84:	adrp	x1, 0 <parse_boolean>
     c88:	mov	x0, x25
     c8c:	add	x1, x1, #0x0
     c90:	mov	x2, #0x7                   	// #7
     c94:	bl	0 <strncasecmp>
     c98:	cbnz	w0, 12f0 <initialize_env+0x968>
     c9c:	add	x25, x25, #0x7
     ca0:	mov	w28, #0x1                   	// #1
     ca4:	str	x25, [sp, #176]
     ca8:	ldr	x0, [sp, #176]
     cac:	mov	x1, x0
     cb0:	ldrb	w2, [x1], #1
     cb4:	ubfiz	x3, x2, #1, #8
     cb8:	ldrh	w3, [x27, x3]
     cbc:	tbz	w3, #13, cd8 <initialize_env+0x350>
     cc0:	str	x1, [sp, #176]
     cc4:	mov	x0, x1
     cc8:	ldrb	w2, [x1], #1
     ccc:	ubfiz	x3, x2, #1, #8
     cd0:	ldrh	w3, [x27, x3]
     cd4:	tbnz	w3, #13, cc0 <initialize_env+0x338>
     cd8:	cbz	w2, 1d60 <initialize_env+0x13d8>
     cdc:	add	x21, x0, #0x1
     ce0:	str	x21, [sp, #176]
     ce4:	ldrb	w1, [x0]
     ce8:	cmp	w1, #0x28
     cec:	b.ne	116c <initialize_env+0x7e4>  // b.any
     cf0:	ldrb	w1, [x0, #1]
     cf4:	ldrh	w1, [x27, x1, lsl #1]
     cf8:	tbz	w1, #13, d18 <initialize_env+0x390>
     cfc:	add	x0, x0, #0x2
     d00:	mov	x21, x0
     d04:	str	x0, [sp, #176]
     d08:	add	x0, x0, #0x1
     d0c:	ldrb	w1, [x21]
     d10:	ldrh	w1, [x27, x1, lsl #1]
     d14:	tbnz	w1, #13, d00 <initialize_env+0x378>
     d18:	bl	0 <__errno_location>
     d1c:	mov	x25, x0
     d20:	add	x1, sp, #0xb8
     d24:	mov	w2, #0xa                   	// #10
     d28:	mov	x0, x21
     d2c:	str	wzr, [x25]
     d30:	bl	0 <strtoul>
     d34:	mov	x1, x0
     d38:	ldr	w2, [x25]
     d3c:	cbnz	w2, 116c <initialize_env+0x7e4>
     d40:	ldr	x6, [sp, #184]
     d44:	str	x6, [sp, #176]
     d48:	ldr	x5, [x23]
     d4c:	ldrb	w0, [x6]
     d50:	ldrb	w3, [x6]
     d54:	ldrh	w0, [x5, x0, lsl #1]
     d58:	tbz	w0, #13, d78 <initialize_env+0x3f0>
     d5c:	add	x2, x6, #0x1
     d60:	str	x2, [sp, #176]
     d64:	mov	x6, x2
     d68:	ldrb	w3, [x2], #1
     d6c:	ubfiz	x4, x3, #1, #8
     d70:	ldrh	w4, [x5, x4]
     d74:	tbnz	w4, #13, d60 <initialize_env+0x3d8>
     d78:	cmp	w3, #0x29
     d7c:	b.ne	116c <initialize_env+0x7e4>  // b.any
     d80:	add	x6, x6, #0x1
     d84:	str	x6, [sp, #176]
     d88:	b	d90 <initialize_env+0x408>
     d8c:	str	x0, [sp, #176]
     d90:	ldr	x2, [sp, #176]
     d94:	add	x0, x2, #0x1
     d98:	ldrb	w3, [x2]
     d9c:	ldrb	w4, [x2]
     da0:	ldrh	w2, [x5, x3, lsl #1]
     da4:	tbnz	w2, #13, d8c <initialize_env+0x404>
     da8:	cbnz	w4, 116c <initialize_env+0x7e4>
     dac:	cbz	w24, 1e60 <initialize_env+0x14d8>
     db0:	mov	w24, #0x1                   	// #1
     db4:	adrp	x0, 0 <parse_boolean>
     db8:	add	x0, x0, #0x0
     dbc:	bl	0 <getenv>
     dc0:	str	x0, [sp, #136]
     dc4:	cbz	x0, f98 <initialize_env+0x610>
     dc8:	bl	0 <__ctype_b_loc>
     dcc:	add	x21, sp, #0xc8
     dd0:	str	x0, [sp, #96]
     dd4:	bl	0 <__errno_location>
     dd8:	mov	x20, x0
     ddc:	mov	x27, #0x0                   	// #0
     de0:	mov	w25, #0x0                   	// #0
     de4:	ldr	x0, [sp, #96]
     de8:	ldr	x6, [sp, #136]
     dec:	ldr	x0, [x0]
     df0:	ldrb	w1, [x6]
     df4:	ldrh	w1, [x0, x1, lsl #1]
     df8:	tbnz	w1, #13, f74 <initialize_env+0x5ec>
     dfc:	str	wzr, [x20]
     e00:	mov	x1, x21
     e04:	mov	x0, x6
     e08:	mov	w2, #0x0                   	// #0
     e0c:	bl	0 <strtoul>
     e10:	mov	x28, x0
     e14:	ldr	w1, [x20]
     e18:	mov	x0, #0xffff                	// #65535
     e1c:	cmp	w1, #0x0
     e20:	ccmp	x28, x0, #0x2, eq  // eq = none
     e24:	b.hi	11a0 <initialize_env+0x818>  // b.pmore
     e28:	ldr	x6, [sp, #200]
     e2c:	ldrb	w1, [x6]
     e30:	cmp	w1, #0x2d
     e34:	b.eq	f1c <initialize_env+0x594>  // b.none
     e38:	mov	x2, #0x1                   	// #1
     e3c:	mov	x5, #0x0                   	// #0
     e40:	mov	x8, x2
     e44:	cbnz	w25, ea4 <initialize_env+0x51c>
     e48:	add	x27, x27, x2
     e4c:	ldr	x0, [sp, #96]
     e50:	ubfiz	x2, x1, #1, #8
     e54:	ldr	x0, [x0]
     e58:	ldrh	w2, [x0, x2]
     e5c:	tbz	w2, #13, e70 <initialize_env+0x4e8>
     e60:	ldrb	w1, [x6, #1]!
     e64:	ubfiz	x2, x1, #1, #8
     e68:	ldrh	w2, [x0, x2]
     e6c:	tbnz	w2, #13, e60 <initialize_env+0x4d8>
     e70:	cmp	w1, #0x2c
     e74:	b.eq	f74 <initialize_env+0x5ec>  // b.none
     e78:	cbnz	w1, df0 <initialize_env+0x468>
     e7c:	cbz	w25, 1fec <initialize_env+0x1664>
     e80:	adrp	x0, 8 <parse_boolean+0x8>
     e84:	ldr	x0, [x0]
     e88:	cbz	x0, f7c <initialize_env+0x5f4>
     e8c:	ldrb	w0, [x19, #26]
     e90:	cbnz	w0, e98 <initialize_env+0x510>
     e94:	strb	w25, [x19, #26]
     e98:	bl	0 <gomp_init_affinity>
     e9c:	b	fa0 <initialize_env+0x618>
     ea0:	cbz	x2, f14 <initialize_env+0x58c>
     ea4:	adrp	x0, 8 <parse_boolean+0x8>
     ea8:	add	x26, x0, #0x0
     eac:	adrp	x0, 8 <parse_boolean+0x8>
     eb0:	add	x23, x0, #0x0
     eb4:	nop
     eb8:	ldr	x1, [x26]
     ebc:	sub	x5, x5, #0x1
     ec0:	ldr	x0, [x23]
     ec4:	stp	x8, x6, [sp, #120]
     ec8:	ldr	x0, [x0, x1, lsl #3]
     ecc:	stp	x0, x5, [sp, #104]
     ed0:	bl	0 <gomp_affinity_init_place>
     ed4:	ldr	x0, [sp, #104]
     ed8:	mov	x1, x28
     edc:	mov	w4, #0x1                   	// #1
     ee0:	mov	x3, #0x0                   	// #0
     ee4:	mov	x2, #0x1                   	// #1
     ee8:	bl	0 <gomp_affinity_add_cpus>
     eec:	tst	w0, #0xff
     ef0:	ldp	x5, x8, [sp, #112]
     ef4:	ldr	x6, [sp, #128]
     ef8:	add	x28, x28, x8
     efc:	b.eq	f0c <initialize_env+0x584>  // b.none
     f00:	ldr	x1, [x26]
     f04:	add	x1, x1, #0x1
     f08:	str	x1, [x26]
     f0c:	cmn	x5, #0x1
     f10:	b.ne	eb8 <initialize_env+0x530>  // b.any
     f14:	ldrb	w1, [x6]
     f18:	b	e4c <initialize_env+0x4c4>
     f1c:	mov	x1, x21
     f20:	add	x0, x6, #0x1
     f24:	mov	w2, #0x0                   	// #0
     f28:	bl	0 <strtoul>
     f2c:	ldr	w1, [x20]
     f30:	mov	x23, x0
     f34:	cbnz	w1, 11a0 <initialize_env+0x818>
     f38:	mov	x0, #0xffff                	// #65535
     f3c:	cmp	x23, x0
     f40:	ccmp	x28, x23, #0x2, ls  // ls = plast
     f44:	b.hi	11a0 <initialize_env+0x818>  // b.pmore
     f48:	ldr	x6, [sp, #200]
     f4c:	mov	x8, #0x1                   	// #1
     f50:	ldrb	w0, [x6]
     f54:	cmp	w0, #0x3a
     f58:	b.eq	1138 <initialize_env+0x7b0>  // b.none
     f5c:	sub	x5, x23, x28
     f60:	udiv	x5, x5, x8
     f64:	add	x2, x5, #0x1
     f68:	cbnz	w25, ea0 <initialize_env+0x518>
     f6c:	ldrb	w1, [x6]
     f70:	b	e48 <initialize_env+0x4c0>
     f74:	add	x6, x6, #0x1
     f78:	b	df0 <initialize_env+0x468>
     f7c:	adrp	x4, 8 <parse_boolean+0x8>
     f80:	str	x4, [sp, #96]
     f84:	ldr	x0, [x4]
     f88:	bl	0 <free>
     f8c:	ldr	x4, [sp, #96]
     f90:	str	xzr, [x4]
     f94:	nop
     f98:	ldrb	w0, [x19, #26]
     f9c:	cbnz	w0, e98 <initialize_env+0x510>
     fa0:	adrp	x0, 0 <parse_boolean>
     fa4:	add	x0, x0, #0x0
     fa8:	bl	0 <getenv>
     fac:	mov	x20, x0
     fb0:	cbz	x0, fc4 <initialize_env+0x63c>
     fb4:	bl	0 <strlen>
     fb8:	mov	x1, x0
     fbc:	mov	x0, x20
     fc0:	bl	0 <gomp_set_affinity_format>
     fc4:	adrp	x0, 0 <parse_boolean>
     fc8:	add	x0, x0, #0x0
     fcc:	bl	0 <getenv>
     fd0:	mov	x20, x0
     fd4:	cbz	x0, 1060 <initialize_env+0x6d8>
     fd8:	bl	0 <__ctype_b_loc>
     fdc:	ldr	x21, [x0]
     fe0:	b	fe8 <initialize_env+0x660>
     fe4:	add	x20, x20, #0x1
     fe8:	ldrb	w0, [x20]
     fec:	ldrh	w0, [x21, x0, lsl #1]
     ff0:	tbnz	w0, #13, fe4 <initialize_env+0x65c>
     ff4:	adrp	x1, 0 <parse_boolean>
     ff8:	mov	x0, x20
     ffc:	add	x1, x1, #0x0
    1000:	mov	x2, #0x6                   	// #6
    1004:	bl	0 <strncasecmp>
    1008:	cbz	w0, 11b0 <initialize_env+0x828>
    100c:	mov	x0, x20
    1010:	adrp	x1, 0 <parse_boolean>
    1014:	mov	x2, #0x7                   	// #7
    1018:	add	x1, x1, #0x0
    101c:	bl	0 <strncasecmp>
    1020:	mov	w24, w0
    1024:	cbnz	w0, 1dac <initialize_env+0x1424>
    1028:	add	x20, x20, #0x7
    102c:	ldrb	w0, [x20]
    1030:	ubfiz	x1, x0, #1, #8
    1034:	ldrh	w1, [x21, x1]
    1038:	tbz	w1, #13, 1050 <initialize_env+0x6c8>
    103c:	nop
    1040:	ldrb	w0, [x20, #1]!
    1044:	ubfiz	x1, x0, #1, #8
    1048:	ldrh	w1, [x21, x1]
    104c:	tbnz	w1, #13, 1040 <initialize_env+0x6b8>
    1050:	cbz	w0, 1b38 <initialize_env+0x11b0>
    1054:	adrp	x0, 0 <parse_boolean>
    1058:	add	x0, x0, #0x0
    105c:	bl	0 <gomp_error>
    1060:	adrp	x21, 0 <parse_boolean>
    1064:	add	x21, x21, #0x0
    1068:	mov	x0, x21
    106c:	bl	0 <getenv>
    1070:	mov	x20, x0
    1074:	cbz	x0, 1e28 <initialize_env+0x14a0>
    1078:	mov	w24, #0xffffffff            	// #-1
    107c:	bl	0 <__ctype_b_loc>
    1080:	mov	x23, x0
    1084:	ldr	x25, [x0]
    1088:	b	1090 <initialize_env+0x708>
    108c:	add	x20, x20, #0x1
    1090:	ldrb	w1, [x20]
    1094:	ubfiz	x0, x1, #1, #8
    1098:	ldrh	w0, [x25, x0]
    109c:	tbnz	w0, #13, 108c <initialize_env+0x704>
    10a0:	cbz	w1, 13b8 <initialize_env+0xa30>
    10a4:	adrp	x1, 0 <parse_boolean>
    10a8:	mov	x0, x20
    10ac:	add	x1, x1, #0x0
    10b0:	mov	x2, #0x8                   	// #8
    10b4:	bl	0 <strncasecmp>
    10b8:	cbz	w0, 10d4 <initialize_env+0x74c>
    10bc:	adrp	x1, 0 <parse_boolean>
    10c0:	mov	x0, x20
    10c4:	add	x1, x1, #0x0
    10c8:	mov	x2, #0x8                   	// #8
    10cc:	bl	0 <strncasecmp>
    10d0:	cbnz	w0, 1330 <initialize_env+0x9a8>
    10d4:	add	x20, x20, #0x8
    10d8:	mov	x4, #0x1                   	// #1
    10dc:	mov	x27, #0xffffffffffffffff    	// #-1
    10e0:	str	x20, [sp, #200]
    10e4:	ldr	x1, [sp, #200]
    10e8:	ldrb	w2, [x1], #1
    10ec:	ubfiz	x0, x2, #1, #8
    10f0:	ldrh	w0, [x25, x0]
    10f4:	tbz	w0, #13, 110c <initialize_env+0x784>
    10f8:	str	x1, [sp, #200]
    10fc:	ldrb	w2, [x1], #1
    1100:	ubfiz	x3, x2, #1, #8
    1104:	ldrh	w3, [x25, x3]
    1108:	tbnz	w3, #13, 10f8 <initialize_env+0x770>
    110c:	cbnz	w2, 13b8 <initialize_env+0xa30>
    1110:	umulh	x0, x27, x4
    1114:	cbnz	x0, 21ec <initialize_env+0x1864>
    1118:	mul	x4, x4, x27
    111c:	adrp	x25, 8 <parse_boolean+0x8>
    1120:	cmp	w24, #0x1
    1124:	str	x4, [x25]
    1128:	b.eq	13e4 <initialize_env+0xa5c>  // b.none
    112c:	cbnz	w24, 1e38 <initialize_env+0x14b0>
    1130:	adrp	x0, 8 <parse_boolean+0x8>
    1134:	b	13f4 <initialize_env+0xa6c>
    1138:	add	x0, x6, x8
    113c:	mov	x1, x21
    1140:	mov	w2, #0x0                   	// #0
    1144:	bl	0 <strtoul>
    1148:	ldr	w1, [x20]
    114c:	mov	x8, x0
    1150:	cbnz	w1, 11a0 <initialize_env+0x818>
    1154:	sub	x1, x0, #0x1
    1158:	mov	x0, #0xfffe                	// #65534
    115c:	cmp	x1, x0
    1160:	b.hi	11a0 <initialize_env+0x818>  // b.pmore
    1164:	ldr	x6, [sp, #200]
    1168:	b	f5c <initialize_env+0x5d4>
    116c:	adrp	x28, 8 <parse_boolean+0x8>
    1170:	adrp	x4, 8 <parse_boolean+0x8>
    1174:	ldr	x0, [x4]
    1178:	str	x4, [sp, #96]
    117c:	bl	0 <free>
    1180:	str	xzr, [x28]
    1184:	ldr	x4, [sp, #96]
    1188:	mov	x1, x20
    118c:	adrp	x0, 0 <parse_boolean>
    1190:	add	x0, x0, #0x0
    1194:	str	xzr, [x4]
    1198:	bl	0 <gomp_error>
    119c:	b	db4 <initialize_env+0x42c>
    11a0:	adrp	x0, 0 <parse_boolean>
    11a4:	add	x0, x0, #0x0
    11a8:	bl	0 <gomp_error>
    11ac:	b	f98 <initialize_env+0x610>
    11b0:	add	x20, x20, #0x6
    11b4:	mov	w24, #0x1                   	// #1
    11b8:	b	102c <initialize_env+0x6a4>
    11bc:	add	x20, x20, #0x9
    11c0:	mov	w21, #0x1                   	// #1
    11c4:	b	a1c <initialize_env+0x94>
    11c8:	bl	0 <__errno_location>
    11cc:	mov	x24, x0
    11d0:	add	x21, sp, #0xc8
    11d4:	mov	x0, x20
    11d8:	mov	x1, x21
    11dc:	mov	w2, #0xa                   	// #10
    11e0:	str	wzr, [x24]
    11e4:	bl	0 <strtoul>
    11e8:	mov	x27, x0
    11ec:	ldr	w1, [x24]
    11f0:	cbnz	w1, b88 <initialize_env+0x200>
    11f4:	cmp	x0, #0x0
    11f8:	b.le	b88 <initialize_env+0x200>
    11fc:	ldr	x1, [sp, #200]
    1200:	ldr	x4, [x25]
    1204:	ldrb	w0, [x1]
    1208:	ldrb	w2, [x1]
    120c:	ldrh	w0, [x4, x0, lsl #1]
    1210:	tbz	w0, #13, 122c <initialize_env+0x8a4>
    1214:	add	x1, x1, #0x1
    1218:	str	x1, [sp, #200]
    121c:	ldrb	w2, [x1], #1
    1220:	ubfiz	x0, x2, #1, #8
    1224:	ldrh	w0, [x4, x0]
    1228:	tbnz	w0, #13, 1218 <initialize_env+0x890>
    122c:	cbz	w2, 2064 <initialize_env+0x16dc>
    1230:	cmp	w2, #0x2c
    1234:	b.ne	b88 <initialize_env+0x200>  // b.any
    1238:	mov	x20, #0x0                   	// #0
    123c:	mov	x28, #0x0                   	// #0
    1240:	mov	x26, #0x0                   	// #0
    1244:	ldr	x3, [sp, #200]
    1248:	cmp	x28, x20
    124c:	add	x2, x3, #0x1
    1250:	b.eq	21f4 <initialize_env+0x186c>  // b.none
    1254:	ldrb	w0, [x3, #1]
    1258:	ldrb	w1, [x3, #1]
    125c:	ldrh	w0, [x4, x0, lsl #1]
    1260:	tbz	w0, #13, 1278 <initialize_env+0x8f0>
    1264:	nop
    1268:	ldrb	w1, [x2, #1]!
    126c:	ubfiz	x0, x1, #1, #8
    1270:	ldrh	w0, [x4, x0]
    1274:	tbnz	w0, #13, 1268 <initialize_env+0x8e0>
    1278:	cbz	w1, b8c <initialize_env+0x204>
    127c:	str	wzr, [x24]
    1280:	mov	x0, x2
    1284:	mov	x1, x21
    1288:	mov	w2, #0xa                   	// #10
    128c:	bl	0 <strtoul>
    1290:	mov	x27, x0
    1294:	ldr	w1, [x24]
    1298:	cbnz	w1, b8c <initialize_env+0x204>
    129c:	cmp	x0, #0x0
    12a0:	b.le	b8c <initialize_env+0x204>
    12a4:	ldr	x1, [sp, #200]
    12a8:	str	x0, [x26, x28, lsl #3]
    12ac:	ldr	x4, [x25]
    12b0:	add	x3, x28, #0x1
    12b4:	ldrb	w0, [x1]
    12b8:	ldrb	w2, [x1]
    12bc:	ldrh	w0, [x4, x0, lsl #1]
    12c0:	tbz	w0, #13, 12dc <initialize_env+0x954>
    12c4:	add	x1, x1, #0x1
    12c8:	str	x1, [sp, #200]
    12cc:	ldrb	w2, [x1], #1
    12d0:	ubfiz	x0, x2, #1, #8
    12d4:	ldrh	w0, [x4, x0]
    12d8:	tbnz	w0, #13, 12c8 <initialize_env+0x940>
    12dc:	cbz	w2, 2360 <initialize_env+0x19d8>
    12e0:	cmp	w2, #0x2c
    12e4:	b.ne	b8c <initialize_env+0x204>  // b.any
    12e8:	mov	x28, x3
    12ec:	b	1244 <initialize_env+0x8bc>
    12f0:	adrp	x1, 0 <parse_boolean>
    12f4:	mov	x0, x25
    12f8:	add	x1, x1, #0x0
    12fc:	mov	x2, #0x5                   	// #5
    1300:	bl	0 <strncasecmp>
    1304:	cbz	w0, 1df0 <initialize_env+0x1468>
    1308:	adrp	x1, 0 <parse_boolean>
    130c:	mov	x0, x25
    1310:	add	x1, x1, #0x0
    1314:	mov	x2, #0x7                   	// #7
    1318:	bl	0 <strncasecmp>
    131c:	cbnz	w0, 2088 <initialize_env+0x1700>
    1320:	add	x25, x25, #0x7
    1324:	mov	w28, #0x3                   	// #3
    1328:	str	x25, [sp, #176]
    132c:	b	ca8 <initialize_env+0x320>
    1330:	bl	0 <__errno_location>
    1334:	mov	x25, x0
    1338:	add	x1, sp, #0xc8
    133c:	mov	x0, x20
    1340:	mov	w2, #0xa                   	// #10
    1344:	str	wzr, [x25]
    1348:	bl	0 <strtoull>
    134c:	mov	x27, x0
    1350:	ldr	w1, [x25]
    1354:	cbnz	w1, 13b8 <initialize_env+0xa30>
    1358:	ldr	x20, [sp, #200]
    135c:	ldr	x25, [x23]
    1360:	ldrb	w0, [x20]
    1364:	ldrb	w2, [x20]
    1368:	mov	x23, x0
    136c:	ldrh	w0, [x25, x0, lsl #1]
    1370:	tbz	w0, #13, 1394 <initialize_env+0xa0c>
    1374:	add	x1, x20, #0x1
    1378:	str	x1, [sp, #200]
    137c:	mov	x20, x1
    1380:	ldrb	w2, [x1], #1
    1384:	and	x23, x2, #0xff
    1388:	ubfiz	x3, x2, #1, #8
    138c:	ldrh	w3, [x25, x3]
    1390:	tbnz	w3, #13, 1378 <initialize_env+0x9f0>
    1394:	cbz	w2, 21a0 <initialize_env+0x1818>
    1398:	bl	0 <__ctype_tolower_loc>
    139c:	ldr	x0, [x0]
    13a0:	ldr	w0, [x0, x23, lsl #2]
    13a4:	cmp	w0, #0x6d
    13a8:	b.eq	21e0 <initialize_env+0x1858>  // b.none
    13ac:	b.le	1e8c <initialize_env+0x1504>
    13b0:	cmp	w0, #0x74
    13b4:	b.eq	21c4 <initialize_env+0x183c>  // b.none
    13b8:	adrp	x0, 0 <parse_boolean>
    13bc:	mov	x1, x21
    13c0:	add	x0, x0, #0x0
    13c4:	bl	0 <gomp_error>
    13c8:	cmp	w24, #0x1
    13cc:	b.ne	1fdc <initialize_env+0x1654>  // b.any
    13d0:	adrp	x25, 8 <parse_boolean+0x8>
    13d4:	mov	x0, #0xac00                	// #44032
    13d8:	movk	x0, #0xfc23, lsl #16
    13dc:	movk	x0, #0x6, lsl #32
    13e0:	str	x0, [x25]
    13e4:	adrp	x0, 8 <parse_boolean+0x8>
    13e8:	mov	x1, #0x3e8                 	// #1000
    13ec:	mov	w24, #0x1                   	// #1
    13f0:	str	x1, [x0]
    13f4:	ldr	x1, [x25]
    13f8:	ldr	x2, [x0]
    13fc:	cmp	x2, x1
    1400:	b.ls	1408 <initialize_env+0xa80>  // b.plast
    1404:	str	x1, [x0]
    1408:	adrp	x20, 0 <gomp_thread_attr>
    140c:	add	x20, x20, #0x0
    1410:	mov	x0, x20
    1414:	bl	0 <pthread_attr_init>
    1418:	add	x1, sp, #0xa8
    141c:	adrp	x0, 0 <parse_boolean>
    1420:	add	x0, x0, #0x0
    1424:	bl	788 <parse_stacksize>
    1428:	tst	w0, #0xff
    142c:	b.ne	1448 <initialize_env+0xac0>  // b.any
    1430:	add	x1, sp, #0xa8
    1434:	adrp	x0, 0 <parse_boolean>
    1438:	add	x0, x0, #0x0
    143c:	bl	788 <parse_stacksize>
    1440:	tst	w0, #0xff
    1444:	b.eq	1460 <initialize_env+0xad8>  // b.none
    1448:	ldr	x1, [sp, #168]
    144c:	mov	x0, x20
    1450:	bl	0 <pthread_attr_setstacksize>
    1454:	cmp	w0, #0x16
    1458:	b.eq	1d3c <initialize_env+0x13b4>  // b.none
    145c:	cbnz	w0, 1f9c <initialize_env+0x1614>
    1460:	ldr	x1, [sp, #168]
    1464:	adrp	x0, 0 <parse_boolean>
    1468:	add	x0, x0, #0x0
    146c:	str	x1, [sp, #96]
    1470:	bl	0 <getenv>
    1474:	mov	x20, x0
    1478:	cbz	x0, 18f4 <initialize_env+0xf6c>
    147c:	bl	0 <__ctype_b_loc>
    1480:	ldr	x21, [x0]
    1484:	b	148c <initialize_env+0xb04>
    1488:	add	x20, x20, #0x1
    148c:	ldrb	w0, [x20]
    1490:	ldrh	w0, [x21, x0, lsl #1]
    1494:	tbnz	w0, #13, 1488 <initialize_env+0xb00>
    1498:	adrp	x1, 0 <parse_boolean>
    149c:	mov	x0, x20
    14a0:	add	x1, x1, #0x0
    14a4:	mov	x2, #0x4                   	// #4
    14a8:	bl	0 <strncasecmp>
    14ac:	cbnz	w0, 1b54 <initialize_env+0x11cc>
    14b0:	add	x20, x20, #0x4
    14b4:	mov	w23, #0x1                   	// #1
    14b8:	str	wzr, [sp, #112]
    14bc:	ldrb	w0, [x20]
    14c0:	ubfiz	x1, x0, #1, #8
    14c4:	ldrh	w1, [x21, x1]
    14c8:	tbz	w1, #13, 14e0 <initialize_env+0xb58>
    14cc:	nop
    14d0:	ldrb	w0, [x20, #1]!
    14d4:	ubfiz	x1, x0, #1, #8
    14d8:	ldrh	w1, [x21, x1]
    14dc:	tbnz	w1, #13, 14d0 <initialize_env+0xb48>
    14e0:	cbnz	w0, 19e8 <initialize_env+0x1060>
    14e4:	cbz	w23, 18f4 <initialize_env+0xf6c>
    14e8:	adrp	x20, 0 <stderr>
    14ec:	mov	x2, #0x22                  	// #34
    14f0:	mov	x1, #0x1                   	// #1
    14f4:	adrp	x0, 0 <parse_boolean>
    14f8:	ldr	x3, [x20]
    14fc:	add	x0, x0, #0x0
    1500:	adrp	x21, 0 <parse_boolean>
    1504:	adrp	x23, 0 <parse_boolean>
    1508:	add	x21, x21, #0x0
    150c:	add	x23, x23, #0x0
    1510:	bl	0 <fwrite>
    1514:	ldr	x3, [x20]
    1518:	mov	x2, #0x15                  	// #21
    151c:	mov	x1, #0x1                   	// #1
    1520:	adrp	x0, 0 <parse_boolean>
    1524:	add	x0, x0, #0x0
    1528:	bl	0 <fwrite>
    152c:	ldrb	w1, [x19, #24]
    1530:	ldr	x0, [x20]
    1534:	cmp	w1, #0x0
    1538:	csel	x2, x23, x21, ne  // ne = any
    153c:	adrp	x1, 0 <parse_boolean>
    1540:	add	x1, x1, #0x0
    1544:	bl	0 <fprintf>
    1548:	ldrb	w2, [x19, #25]
    154c:	adrp	x1, 0 <parse_boolean>
    1550:	ldr	x0, [x20]
    1554:	cmp	w2, #0x0
    1558:	csel	x2, x23, x21, ne  // ne = any
    155c:	add	x1, x1, #0x0
    1560:	adrp	x23, 8 <parse_boolean+0x8>
    1564:	bl	0 <fprintf>
    1568:	ldr	x2, [x22]
    156c:	adrp	x1, 0 <parse_boolean>
    1570:	ldr	x0, [x20]
    1574:	add	x1, x1, #0x0
    1578:	bl	0 <fprintf>
    157c:	ldr	x0, [x23]
    1580:	cmp	x0, #0x1
    1584:	b.ls	15cc <initialize_env+0xc44>  // b.plast
    1588:	adrp	x27, 8 <parse_boolean+0x8>
    158c:	adrp	x1, 0 <parse_boolean>
    1590:	add	x23, x23, #0x0
    1594:	add	x27, x27, #0x0
    1598:	add	x26, x1, #0x0
    159c:	add	x22, x20, #0x0
    15a0:	mov	x21, #0x1                   	// #1
    15a4:	nop
    15a8:	ldr	x2, [x27]
    15ac:	mov	x1, x26
    15b0:	ldr	x0, [x22]
    15b4:	ldr	x2, [x2, x21, lsl #3]
    15b8:	add	x21, x21, #0x1
    15bc:	bl	0 <fprintf>
    15c0:	ldr	x0, [x23]
    15c4:	cmp	x0, x21
    15c8:	b.hi	15a8 <initialize_env+0xc20>  // b.pmore
    15cc:	ldr	x3, [x20]
    15d0:	adrp	x27, 0 <parse_boolean>
    15d4:	add	x27, x27, #0x0
    15d8:	mov	x2, #0x2                   	// #2
    15dc:	mov	x1, #0x1                   	// #1
    15e0:	mov	x0, x27
    15e4:	bl	0 <fwrite>
    15e8:	ldr	x3, [x20]
    15ec:	adrp	x0, 0 <parse_boolean>
    15f0:	mov	x2, #0x12                  	// #18
    15f4:	add	x0, x0, #0x0
    15f8:	mov	x1, #0x1                   	// #1
    15fc:	bl	0 <fwrite>
    1600:	ldr	w0, [x19, #8]
    1604:	tbnz	w0, #31, 1f6c <initialize_env+0x15e4>
    1608:	cmp	w0, #0x1
    160c:	b.eq	21a8 <initialize_env+0x1820>  // b.none
    1610:	ldr	w1, [x19, #8]
    1614:	ldr	x3, [x20]
    1618:	and	w0, w1, #0x7fffffff
    161c:	cmp	w0, #0x3
    1620:	b.eq	2150 <initialize_env+0x17c8>  // b.none
    1624:	tst	w1, #0x7ffffffc
    1628:	b.ne	1bb4 <initialize_env+0x122c>  // b.any
    162c:	cmp	w0, #0x2
    1630:	b.eq	2160 <initialize_env+0x17d8>  // b.none
    1634:	cmp	w0, #0x3
    1638:	b.ne	19f8 <initialize_env+0x1070>  // b.any
    163c:	ldr	x3, [x20]
    1640:	mov	x2, #0x2                   	// #2
    1644:	mov	x1, #0x1                   	// #1
    1648:	mov	x0, x27
    164c:	bl	0 <fwrite>
    1650:	ldr	x3, [x20]
    1654:	adrp	x0, 0 <parse_boolean>
    1658:	mov	x2, #0x13                  	// #19
    165c:	add	x0, x0, #0x0
    1660:	mov	x1, #0x1                   	// #1
    1664:	bl	0 <fwrite>
    1668:	ldrb	w0, [x19, #26]
    166c:	cmp	w0, #0x2
    1670:	b.eq	20fc <initialize_env+0x1774>  // b.none
    1674:	b.hi	1b7c <initialize_env+0x11f4>  // b.pmore
    1678:	cbz	w0, 2134 <initialize_env+0x17ac>
    167c:	ldr	x3, [x20]
    1680:	adrp	x0, 0 <parse_boolean>
    1684:	mov	x2, #0x4                   	// #4
    1688:	add	x0, x0, #0x0
    168c:	mov	x1, #0x1                   	// #1
    1690:	bl	0 <fwrite>
    1694:	adrp	x22, 8 <parse_boolean+0x8>
    1698:	ldr	x3, [x20]
    169c:	ldr	x0, [x22]
    16a0:	cmp	x0, #0x1
    16a4:	b.ls	1720 <initialize_env+0xd98>  // b.plast
    16a8:	adrp	x0, 0 <parse_boolean>
    16ac:	adrp	x23, 8 <parse_boolean+0x8>
    16b0:	add	x28, x0, #0x0
    16b4:	add	x22, x22, #0x0
    16b8:	adrp	x0, 0 <parse_boolean>
    16bc:	add	x23, x23, #0x0
    16c0:	add	x26, x0, #0x0
    16c4:	mov	x21, #0x1                   	// #1
    16c8:	b	16e4 <initialize_env+0xd5c>
    16cc:	cmp	w0, #0x2
    16d0:	b.eq	1a48 <initialize_env+0x10c0>  // b.none
    16d4:	ldr	x0, [x22]
    16d8:	add	x21, x21, #0x1
    16dc:	cmp	x0, x21
    16e0:	b.ls	1720 <initialize_env+0xd98>  // b.plast
    16e4:	ldr	x0, [x23]
    16e8:	ldrb	w0, [x0, x21]
    16ec:	cmp	w0, #0x3
    16f0:	b.eq	1a30 <initialize_env+0x10a8>  // b.none
    16f4:	cmp	w0, #0x4
    16f8:	b.ne	16cc <initialize_env+0xd44>  // b.any
    16fc:	mov	x0, x26
    1700:	mov	x2, #0x7                   	// #7
    1704:	mov	x1, #0x1                   	// #1
    1708:	bl	0 <fwrite>
    170c:	ldr	x0, [x22]
    1710:	add	x21, x21, #0x1
    1714:	ldr	x3, [x20]
    1718:	cmp	x0, x21
    171c:	b.hi	16e4 <initialize_env+0xd5c>  // b.pmore
    1720:	ldr	x3, [x20]
    1724:	mov	x2, #0x2                   	// #2
    1728:	mov	x1, #0x1                   	// #1
    172c:	mov	x0, x27
    1730:	adrp	x28, 8 <parse_boolean+0x8>
    1734:	bl	0 <fwrite>
    1738:	ldr	x3, [x20]
    173c:	adrp	x0, 0 <parse_boolean>
    1740:	mov	x2, #0x10                  	// #16
    1744:	add	x0, x0, #0x0
    1748:	mov	x1, #0x1                   	// #1
    174c:	bl	0 <fwrite>
    1750:	ldr	x0, [x28]
    1754:	cbz	x0, 17c8 <initialize_env+0xe40>
    1758:	adrp	x1, 0 <parse_boolean>
    175c:	add	x1, x1, #0x0
    1760:	add	x26, x28, #0x0
    1764:	adrp	x4, 8 <parse_boolean+0x8>
    1768:	adrp	x22, 0 <stderr>
    176c:	add	x23, x4, #0x0
    1770:	add	x22, x22, #0x0
    1774:	mov	x28, x1
    1778:	adrp	x0, 0 <parse_boolean>
    177c:	mov	x21, #0x0                   	// #0
    1780:	add	x0, x0, #0x0
    1784:	str	x0, [sp, #104]
    1788:	ldr	x1, [x22]
    178c:	mov	w0, #0x7b                  	// #123
    1790:	bl	0 <fputc>
    1794:	ldr	x0, [x23]
    1798:	ldr	x0, [x0, x21, lsl #3]
    179c:	add	x21, x21, #0x1
    17a0:	bl	0 <gomp_affinity_print_place>
    17a4:	ldr	x0, [x26]
    17a8:	ldr	x1, [x22]
    17ac:	cmp	x0, x21
    17b0:	ldr	x0, [sp, #104]
    17b4:	csel	x0, x0, x28, ne  // ne = any
    17b8:	bl	0 <fputs>
    17bc:	ldr	x0, [x26]
    17c0:	cmp	x0, x21
    17c4:	b.hi	1788 <initialize_env+0xe00>  // b.pmore
    17c8:	ldr	x3, [x20]
    17cc:	mov	x2, #0x2                   	// #2
    17d0:	mov	x1, #0x1                   	// #1
    17d4:	mov	x0, x27
    17d8:	adrp	x21, 0 <parse_boolean>
    17dc:	adrp	x22, 0 <parse_boolean>
    17e0:	bl	0 <fwrite>
    17e4:	add	x21, x21, #0x0
    17e8:	ldr	x0, [x20]
    17ec:	adrp	x1, 0 <parse_boolean>
    17f0:	ldr	x2, [sp, #96]
    17f4:	add	x1, x1, #0x0
    17f8:	add	x22, x22, #0x0
    17fc:	bl	0 <fprintf>
    1800:	ldr	x0, [x20]
    1804:	cmp	w24, #0x1
    1808:	adrp	x3, 0 <parse_boolean>
    180c:	add	x3, x3, #0x0
    1810:	adrp	x2, 0 <parse_boolean>
    1814:	add	x2, x2, #0x0
    1818:	csel	x2, x2, x3, eq  // eq = none
    181c:	adrp	x1, 0 <parse_boolean>
    1820:	add	x1, x1, #0x0
    1824:	bl	0 <fprintf>
    1828:	ldr	w2, [x19, #20]
    182c:	adrp	x1, 0 <parse_boolean>
    1830:	ldr	x0, [x20]
    1834:	add	x1, x1, #0x0
    1838:	bl	0 <fprintf>
    183c:	ldr	x0, [x20]
    1840:	adrp	x1, 0 <parse_boolean>
    1844:	ldr	x2, [x19, #40]
    1848:	add	x1, x1, #0x0
    184c:	bl	0 <fprintf>
    1850:	adrp	x0, 0 <parse_boolean>
    1854:	ldrb	w1, [x0]
    1858:	ldr	x0, [x20]
    185c:	cmp	w1, #0x0
    1860:	csel	x2, x22, x21, ne  // ne = any
    1864:	adrp	x1, 0 <parse_boolean>
    1868:	add	x1, x1, #0x0
    186c:	bl	0 <fprintf>
    1870:	ldr	w2, [x19, #16]
    1874:	adrp	x1, 0 <parse_boolean>
    1878:	ldr	x0, [x20]
    187c:	add	x1, x1, #0x0
    1880:	bl	0 <fprintf>
    1884:	adrp	x2, 0 <parse_boolean>
    1888:	add	x2, x2, #0x0
    188c:	ldr	x0, [x20]
    1890:	adrp	x1, 0 <parse_boolean>
    1894:	ldr	w2, [x2, #4]
    1898:	add	x1, x1, #0x0
    189c:	bl	0 <fprintf>
    18a0:	adrp	x0, 1 <parse_boolean+0x1>
    18a4:	ldrb	w1, [x0]
    18a8:	ldr	x0, [x20]
    18ac:	cmp	w1, #0x0
    18b0:	csel	x2, x22, x21, ne  // ne = any
    18b4:	adrp	x1, 0 <parse_boolean>
    18b8:	add	x1, x1, #0x0
    18bc:	bl	0 <fprintf>
    18c0:	ldr	x0, [x20]
    18c4:	adrp	x1, 0 <parse_boolean>
    18c8:	ldr	x2, [x19, #120]
    18cc:	add	x1, x1, #0x0
    18d0:	bl	0 <fprintf>
    18d4:	ldr	w0, [sp, #112]
    18d8:	cbnz	w0, 2020 <initialize_env+0x1698>
    18dc:	ldr	x3, [x20]
    18e0:	adrp	x0, 0 <parse_boolean>
    18e4:	mov	x2, #0x1f                  	// #31
    18e8:	add	x0, x0, #0x0
    18ec:	mov	x1, #0x1                   	// #1
    18f0:	bl	0 <fwrite>
    18f4:	adrp	x19, 4 <parse_boolean+0x4>
    18f8:	adrp	x0, 0 <parse_boolean>
    18fc:	add	x1, x19, #0x0
    1900:	add	x0, x0, #0x0
    1904:	mov	w2, #0x0                   	// #0
    1908:	bl	920 <parse_int_1.constprop.0>
    190c:	tst	w0, #0xff
    1910:	b.ne	1918 <initialize_env+0xf90>  // b.any
    1914:	str	wzr, [x19]
    1918:	adrp	x0, 0 <parse_boolean>
    191c:	add	x0, x0, #0x0
    1920:	bl	0 <getenv>
    1924:	cbz	x0, 1930 <initialize_env+0xfa8>
    1928:	ldrb	w1, [x0]
    192c:	cbnz	w1, 1d6c <initialize_env+0x13e4>
    1930:	adrp	x0, 8 <parse_boolean+0x8>
    1934:	str	xzr, [x0]
    1938:	adrp	x0, 0 <parse_boolean>
    193c:	add	x0, x0, #0x0
    1940:	bl	0 <getenv>
    1944:	mov	x19, x0
    1948:	cbz	x0, 19c8 <initialize_env+0x1040>
    194c:	ldrb	w0, [x0]
    1950:	mov	x21, #0x1                   	// #1
    1954:	cbz	w0, 19c8 <initialize_env+0x1040>
    1958:	adrp	x22, c <parse_boolean+0xc>
    195c:	add	x22, x22, #0x0
    1960:	ldrb	w0, [x19]
    1964:	cmp	w0, #0x3a
    1968:	b.eq	19a8 <initialize_env+0x1020>  // b.none
    196c:	bl	0 <__errno_location>
    1970:	mov	x20, x0
    1974:	add	x1, sp, #0xc8
    1978:	mov	x0, x19
    197c:	mov	w2, #0xa                   	// #10
    1980:	str	wzr, [x20]
    1984:	bl	0 <strtol>
    1988:	ldr	w1, [x20]
    198c:	cmp	w1, #0x0
    1990:	ccmp	x0, #0x0, #0x1, eq  // eq = none
    1994:	b.lt	19c8 <initialize_env+0x1040>  // b.tstop
    1998:	tst	x0, #0xffffffff00000000
    199c:	b.ne	19c8 <initialize_env+0x1040>  // b.any
    19a0:	ldr	x19, [sp, #200]
    19a4:	str	w0, [x22, x21, lsl #2]
    19a8:	ldrb	w0, [x19]
    19ac:	add	x19, x19, #0x1
    19b0:	cmp	w0, #0x0
    19b4:	ccmp	w21, #0x3, #0x4, ne  // ne = any
    19b8:	b.eq	19c8 <initialize_env+0x1040>  // b.none
    19bc:	add	x21, x21, #0x1
    19c0:	cmp	w0, #0x3a
    19c4:	b.eq	1960 <initialize_env+0xfd8>  // b.none
    19c8:	bl	0 <goacc_runtime_initialize>
    19cc:	ldp	x19, x20, [sp, #16]
    19d0:	ldp	x21, x22, [sp, #32]
    19d4:	ldp	x23, x24, [sp, #48]
    19d8:	ldp	x25, x26, [sp, #64]
    19dc:	ldp	x27, x28, [sp, #80]
    19e0:	ldp	x29, x30, [sp], #208
    19e4:	ret
    19e8:	adrp	x0, 0 <parse_boolean>
    19ec:	add	x0, x0, #0x0
    19f0:	bl	0 <gomp_error>
    19f4:	b	14e4 <initialize_env+0xb5c>
    19f8:	cbnz	w0, 1ba8 <initialize_env+0x1220>
    19fc:	adrp	x0, 0 <parse_boolean>
    1a00:	add	x0, x0, #0x0
    1a04:	mov	x2, #0x7                   	// #7
    1a08:	mov	x1, #0x1                   	// #1
    1a0c:	bl	0 <fwrite>
    1a10:	ldr	w2, [x19, #12]
    1a14:	cmp	w2, #0x1
    1a18:	b.eq	163c <initialize_env+0xcb4>  // b.none
    1a1c:	ldr	x0, [x20]
    1a20:	adrp	x1, 0 <parse_boolean>
    1a24:	add	x1, x1, #0x0
    1a28:	bl	0 <fprintf>
    1a2c:	b	163c <initialize_env+0xcb4>
    1a30:	mov	x0, x28
    1a34:	mov	x2, #0x6                   	// #6
    1a38:	mov	x1, #0x1                   	// #1
    1a3c:	bl	0 <fwrite>
    1a40:	ldr	x3, [x20]
    1a44:	b	16d4 <initialize_env+0xd4c>
    1a48:	adrp	x0, 0 <parse_boolean>
    1a4c:	mov	x2, #0x7                   	// #7
    1a50:	add	x0, x0, #0x0
    1a54:	mov	x1, #0x1                   	// #1
    1a58:	bl	0 <fwrite>
    1a5c:	ldr	x3, [x20]
    1a60:	b	16d4 <initialize_env+0xd4c>
    1a64:	ldrb	w1, [x20, x25]
    1a68:	sxtw	x23, w23
    1a6c:	mov	x2, #0xc                   	// #12
    1a70:	ldrb	w0, [x20, x25]
    1a74:	add	x27, x20, x25
    1a78:	madd	x23, x23, x2, x19
    1a7c:	ldrh	w1, [x28, x1, lsl #1]
    1a80:	ldrb	w20, [x23, #64]
    1a84:	tbz	w1, #13, 1a98 <initialize_env+0x1110>
    1a88:	ldrb	w0, [x27, #1]!
    1a8c:	ubfiz	x1, x0, #1, #8
    1a90:	ldrh	w1, [x28, x1]
    1a94:	tbnz	w1, #13, 1a88 <initialize_env+0x1100>
    1a98:	cbz	w0, 1d98 <initialize_env+0x1410>
    1a9c:	cmp	w0, #0x2c
    1aa0:	cset	w24, ne  // ne = any
    1aa4:	cmp	w20, #0x1
    1aa8:	cset	w0, ls  // ls = plast
    1aac:	orr	w24, w24, w0
    1ab0:	cbnz	w24, c18 <initialize_env+0x290>
    1ab4:	add	x0, x19, #0x38
    1ab8:	stp	xzr, x0, [sp, #104]
    1abc:	mov	x6, #0x0                   	// #0
    1ac0:	ldr	x0, [sp, #104]
    1ac4:	mov	x4, x6
    1ac8:	add	x23, x27, #0x1
    1acc:	mov	x26, #0x0                   	// #0
    1ad0:	cmp	x6, x0
    1ad4:	b.eq	1f20 <initialize_env+0x1598>  // b.none
    1ad8:	ldrb	w0, [x27, #1]
    1adc:	ubfiz	x1, x0, #1, #8
    1ae0:	ldrh	w1, [x28, x1]
    1ae4:	tbz	w1, #13, 1af8 <initialize_env+0x1170>
    1ae8:	ldrb	w0, [x23, #1]!
    1aec:	ubfiz	x1, x0, #1, #8
    1af0:	ldrh	w1, [x28, x1]
    1af4:	tbnz	w1, #13, 1ae8 <initialize_env+0x1160>
    1af8:	cbz	w0, c1c <initialize_env+0x294>
    1afc:	add	x27, x19, #0x50
    1b00:	mov	w20, #0x2                   	// #2
    1b04:	ldrb	w25, [x27, #7]
    1b08:	mov	x1, x27
    1b0c:	mov	x0, x23
    1b10:	str	x4, [sp, #96]
    1b14:	mov	x2, x25
    1b18:	bl	0 <strncasecmp>
    1b1c:	add	x27, x27, #0xc
    1b20:	ldr	x4, [sp, #96]
    1b24:	cbz	w0, 1ebc <initialize_env+0x1534>
    1b28:	add	w20, w20, #0x1
    1b2c:	cmp	w20, #0x5
    1b30:	b.ne	1b04 <initialize_env+0x117c>  // b.any
    1b34:	b	c1c <initialize_env+0x294>
    1b38:	adrp	x21, 0 <parse_boolean>
    1b3c:	add	x21, x21, #0x0
    1b40:	mov	x0, x21
    1b44:	bl	0 <getenv>
    1b48:	mov	x20, x0
    1b4c:	cbnz	x0, 107c <initialize_env+0x6f4>
    1b50:	b	13c8 <initialize_env+0xa40>
    1b54:	adrp	x1, 0 <parse_boolean>
    1b58:	mov	x0, x20
    1b5c:	add	x1, x1, #0x0
    1b60:	mov	x2, #0x5                   	// #5
    1b64:	bl	0 <strncasecmp>
    1b68:	cbnz	w0, 1dbc <initialize_env+0x1434>
    1b6c:	add	x20, x20, #0x5
    1b70:	mov	w23, #0x0                   	// #0
    1b74:	str	wzr, [sp, #112]
    1b78:	b	14bc <initialize_env+0xb34>
    1b7c:	cmp	w0, #0x3
    1b80:	b.eq	2118 <initialize_env+0x1790>  // b.none
    1b84:	cmp	w0, #0x4
    1b88:	b.ne	1694 <initialize_env+0xd0c>  // b.any
    1b8c:	ldr	x3, [x20]
    1b90:	adrp	x0, 0 <parse_boolean>
    1b94:	mov	x2, #0x6                   	// #6
    1b98:	mov	x1, #0x1                   	// #1
    1b9c:	add	x0, x0, #0x0
    1ba0:	bl	0 <fwrite>
    1ba4:	b	1694 <initialize_env+0xd0c>
    1ba8:	cmp	w0, #0x1
    1bac:	b.ne	163c <initialize_env+0xcb4>  // b.any
    1bb0:	b	1f78 <initialize_env+0x15f0>
    1bb4:	cmp	w0, #0x4
    1bb8:	b.ne	163c <initialize_env+0xcb4>  // b.any
    1bbc:	adrp	x0, 0 <parse_boolean>
    1bc0:	mov	x2, #0x4                   	// #4
    1bc4:	mov	x1, #0x1                   	// #1
    1bc8:	add	x0, x0, #0x0
    1bcc:	bl	0 <fwrite>
    1bd0:	b	163c <initialize_env+0xcb4>
    1bd4:	ldrb	w0, [x20, #1]
    1bd8:	add	x20, x20, #0x1
    1bdc:	ldrh	w0, [x24, x0, lsl #1]
    1be0:	tbz	w0, #13, 1bf4 <initialize_env+0x126c>
    1be4:	nop
    1be8:	ldrb	w0, [x20, #1]!
    1bec:	ldrh	w0, [x24, x0, lsl #1]
    1bf0:	tbnz	w0, #13, 1be8 <initialize_env+0x1260>
    1bf4:	adrp	x1, 0 <parse_boolean>
    1bf8:	mov	x0, x20
    1bfc:	add	x1, x1, #0x0
    1c00:	mov	x2, #0x6                   	// #6
    1c04:	bl	0 <strncasecmp>
    1c08:	cbnz	w0, 1cf4 <initialize_env+0x136c>
    1c0c:	adrp	x22, 0 <parse_boolean>
    1c10:	add	x19, x22, #0x0
    1c14:	add	x20, x20, #0x6
    1c18:	mov	w0, #0x1                   	// #1
    1c1c:	str	w0, [x19, #8]
    1c20:	cmp	w21, #0x1
    1c24:	b.eq	1d88 <initialize_env+0x1400>  // b.none
    1c28:	cbz	w21, 1d7c <initialize_env+0x13f4>
    1c2c:	ldrb	w0, [x20]
    1c30:	ldrb	w1, [x20]
    1c34:	ldrh	w0, [x24, x0, lsl #1]
    1c38:	tbz	w0, #13, 1c50 <initialize_env+0x12c8>
    1c3c:	nop
    1c40:	ldrb	w1, [x20, #1]!
    1c44:	ubfiz	x0, x1, #1, #8
    1c48:	ldrh	w0, [x24, x0]
    1c4c:	tbnz	w0, #13, 1c40 <initialize_env+0x12b8>
    1c50:	cbz	w1, 1f54 <initialize_env+0x15cc>
    1c54:	cmp	w1, #0x2c
    1c58:	b.ne	a50 <initialize_env+0xc8>  // b.any
    1c5c:	ldrb	w0, [x20, #1]
    1c60:	add	x21, x20, #0x1
    1c64:	ldrb	w1, [x20, #1]
    1c68:	ldrh	w0, [x24, x0, lsl #1]
    1c6c:	tbz	w0, #13, 1c80 <initialize_env+0x12f8>
    1c70:	ldrb	w1, [x21, #1]!
    1c74:	ubfiz	x0, x1, #1, #8
    1c78:	ldrh	w0, [x24, x0]
    1c7c:	tbnz	w0, #13, 1c70 <initialize_env+0x12e8>
    1c80:	cbz	w1, 1eac <initialize_env+0x1524>
    1c84:	bl	0 <__errno_location>
    1c88:	mov	x20, x0
    1c8c:	add	x1, sp, #0xc8
    1c90:	mov	x0, x21
    1c94:	mov	w2, #0xa                   	// #10
    1c98:	str	wzr, [x20]
    1c9c:	bl	0 <strtoul>
    1ca0:	ldr	w1, [x20]
    1ca4:	cbnz	w1, 1eac <initialize_env+0x1524>
    1ca8:	ldr	x5, [x23]
    1cac:	b	1cb4 <initialize_env+0x132c>
    1cb0:	str	x3, [sp, #200]
    1cb4:	ldr	x1, [sp, #200]
    1cb8:	add	x3, x1, #0x1
    1cbc:	ldrb	w2, [x1]
    1cc0:	ldrb	w4, [x1]
    1cc4:	ldrh	w1, [x5, x2, lsl #1]
    1cc8:	tbnz	w1, #13, 1cb0 <initialize_env+0x1328>
    1ccc:	cbnz	w4, 1eac <initialize_env+0x1524>
    1cd0:	cmp	x0, w0, sxtw
    1cd4:	b.ne	1eac <initialize_env+0x1524>  // b.any
    1cd8:	cbnz	x0, 1cec <initialize_env+0x1364>
    1cdc:	ldr	w0, [x19, #8]
    1ce0:	and	w0, w0, #0x7fffffff
    1ce4:	cmp	w0, #0x1
    1ce8:	cset	x0, ne  // ne = any
    1cec:	str	w0, [x19, #12]
    1cf0:	b	a5c <initialize_env+0xd4>
    1cf4:	adrp	x1, 0 <parse_boolean>
    1cf8:	mov	x0, x20
    1cfc:	add	x1, x1, #0x0
    1d00:	mov	x2, #0x7                   	// #7
    1d04:	bl	0 <strncasecmp>
    1d08:	cbz	w0, 1e00 <initialize_env+0x1478>
    1d0c:	adrp	x1, 0 <parse_boolean>
    1d10:	mov	x0, x20
    1d14:	add	x1, x1, #0x0
    1d18:	mov	x2, #0x6                   	// #6
    1d1c:	bl	0 <strncasecmp>
    1d20:	cbnz	w0, 2170 <initialize_env+0x17e8>
    1d24:	adrp	x22, 0 <parse_boolean>
    1d28:	add	x19, x22, #0x0
    1d2c:	mov	w0, #0x3                   	// #3
    1d30:	add	x20, x20, #0x6
    1d34:	str	w0, [x19, #8]
    1d38:	b	1c20 <initialize_env+0x1298>
    1d3c:	ldr	x1, [sp, #168]
    1d40:	mov	x0, #0x1ffff               	// #131071
    1d44:	cmp	x1, x0
    1d48:	b.hi	1e18 <initialize_env+0x1490>  // b.pmore
    1d4c:	adrp	x0, 0 <parse_boolean>
    1d50:	mov	x1, #0x80                  	// #128
    1d54:	add	x0, x0, #0x0
    1d58:	bl	0 <gomp_error>
    1d5c:	b	1460 <initialize_env+0xad8>
    1d60:	mov	x1, #0xffffffffffffffff    	// #-1
    1d64:	cbnz	w24, db0 <initialize_env+0x428>
    1d68:	b	1e60 <initialize_env+0x14d8>
    1d6c:	bl	0 <strdup>
    1d70:	adrp	x1, 8 <parse_boolean+0x8>
    1d74:	str	x0, [x1]
    1d78:	b	1938 <initialize_env+0xfb0>
    1d7c:	ldr	w0, [x19, #8]
    1d80:	cmp	w0, #0x1
    1d84:	b.ne	1c2c <initialize_env+0x12a4>  // b.any
    1d88:	ldr	w0, [x19, #8]
    1d8c:	orr	w0, w0, #0x80000000
    1d90:	str	w0, [x19, #8]
    1d94:	b	1c2c <initialize_env+0x12a4>
    1d98:	strb	w20, [x19, #26]
    1d9c:	ldrb	w0, [x19, #26]
    1da0:	cmp	w0, #0x0
    1da4:	cset	w24, eq  // eq = none
    1da8:	b	c38 <initialize_env+0x2b0>
    1dac:	adrp	x20, 0 <parse_boolean>
    1db0:	mov	w24, #0xffffffff            	// #-1
    1db4:	add	x20, x20, #0x0
    1db8:	b	102c <initialize_env+0x6a4>
    1dbc:	adrp	x1, 0 <parse_boolean>
    1dc0:	mov	x0, x20
    1dc4:	add	x1, x1, #0x0
    1dc8:	mov	x2, #0x7                   	// #7
    1dcc:	bl	0 <strncasecmp>
    1dd0:	cbnz	w0, 1e4c <initialize_env+0x14c4>
    1dd4:	mov	w0, #0x1                   	// #1
    1dd8:	add	x20, x20, #0x7
    1ddc:	mov	w23, w0
    1de0:	str	w0, [sp, #112]
    1de4:	b	14bc <initialize_env+0xb34>
    1de8:	mov	w21, #0x0                   	// #0
    1dec:	b	1bf4 <initialize_env+0x126c>
    1df0:	add	x25, x25, #0x5
    1df4:	mov	w28, #0x2                   	// #2
    1df8:	str	x25, [sp, #176]
    1dfc:	b	ca8 <initialize_env+0x320>
    1e00:	adrp	x22, 0 <parse_boolean>
    1e04:	add	x19, x22, #0x0
    1e08:	mov	w0, #0x2                   	// #2
    1e0c:	add	x20, x20, #0x7
    1e10:	str	w0, [x19, #8]
    1e14:	b	1c20 <initialize_env+0x1298>
    1e18:	adrp	x0, 0 <parse_boolean>
    1e1c:	add	x0, x0, #0x0
    1e20:	bl	0 <gomp_error>
    1e24:	b	1460 <initialize_env+0xad8>
    1e28:	adrp	x25, 8 <parse_boolean+0x8>
    1e2c:	mov	x0, #0x93e0                	// #37856
    1e30:	movk	x0, #0x4, lsl #16
    1e34:	str	x0, [x25]
    1e38:	adrp	x0, 8 <parse_boolean+0x8>
    1e3c:	mov	x1, #0x64                  	// #100
    1e40:	mov	w24, #0xffffffff            	// #-1
    1e44:	str	x1, [x0]
    1e48:	b	13f4 <initialize_env+0xa6c>
    1e4c:	adrp	x20, 0 <parse_boolean>
    1e50:	mov	w23, #0x0                   	// #0
    1e54:	add	x20, x20, #0x0
    1e58:	str	wzr, [sp, #112]
    1e5c:	b	14bc <initialize_env+0xb34>
    1e60:	mov	w0, w28
    1e64:	mov	w2, #0x0                   	// #0
    1e68:	bl	0 <gomp_affinity_init_level>
    1e6c:	ands	w24, w0, #0xff
    1e70:	b.eq	db4 <initialize_env+0x42c>  // b.none
    1e74:	ldrb	w0, [x19, #26]
    1e78:	cbnz	w0, db0 <initialize_env+0x428>
    1e7c:	mov	w0, #0x1                   	// #1
    1e80:	mov	w24, #0x1                   	// #1
    1e84:	strb	w0, [x19, #26]
    1e88:	b	db4 <initialize_env+0x42c>
    1e8c:	cmp	w0, #0x67
    1e90:	b.eq	21d4 <initialize_env+0x184c>  // b.none
    1e94:	cmp	w0, #0x6b
    1e98:	mov	x4, #0x3e8                 	// #1000
    1e9c:	b.ne	13b8 <initialize_env+0xa30>  // b.any
    1ea0:	add	x20, x20, #0x1
    1ea4:	str	x20, [sp, #200]
    1ea8:	b	10e4 <initialize_env+0x75c>
    1eac:	adrp	x0, 0 <parse_boolean>
    1eb0:	add	x0, x0, #0x0
    1eb4:	bl	0 <gomp_error>
    1eb8:	b	a5c <initialize_env+0xd4>
    1ebc:	sbfiz	x0, x20, #1, #32
    1ec0:	add	x6, x4, #0x1
    1ec4:	add	x20, x0, w20, sxtw
    1ec8:	add	x27, x23, x25
    1ecc:	ldr	x0, [sp, #112]
    1ed0:	add	x20, x0, x20, lsl #2
    1ed4:	ldrb	w20, [x20, #8]
    1ed8:	strb	w20, [x26, x4]
    1edc:	ldrb	w0, [x23, x25]
    1ee0:	ubfiz	x1, x0, #1, #8
    1ee4:	ldrh	w1, [x28, x1]
    1ee8:	tbz	w1, #13, 1f00 <initialize_env+0x1578>
    1eec:	nop
    1ef0:	ldrb	w0, [x27, #1]!
    1ef4:	ubfiz	x1, x0, #1, #8
    1ef8:	ldrh	w1, [x28, x1]
    1efc:	tbnz	w1, #13, 1ef0 <initialize_env+0x1568>
    1f00:	cbz	w0, 224c <initialize_env+0x18c4>
    1f04:	cmp	w0, #0x2c
    1f08:	b.ne	c1c <initialize_env+0x294>  // b.any
    1f0c:	ldr	x0, [sp, #104]
    1f10:	mov	x4, x6
    1f14:	add	x23, x27, #0x1
    1f18:	cmp	x6, x0
    1f1c:	b.ne	1ad8 <initialize_env+0x1150>  // b.any
    1f20:	str	x6, [sp, #96]
    1f24:	cbz	x0, 1fb4 <initialize_env+0x162c>
    1f28:	lsl	x0, x0, #1
    1f2c:	mov	x1, x0
    1f30:	mov	x0, x26
    1f34:	str	x1, [sp, #104]
    1f38:	bl	0 <realloc>
    1f3c:	ldr	x4, [sp, #96]
    1f40:	cbz	x0, 2474 <initialize_env+0x1aec>
    1f44:	mov	x26, x0
    1f48:	b	1ad8 <initialize_env+0x1150>
    1f4c:	mov	w24, #0x0                   	// #0
    1f50:	b	c38 <initialize_env+0x2b0>
    1f54:	ldr	w0, [x19, #8]
    1f58:	and	w0, w0, #0x7fffffff
    1f5c:	cmp	w0, #0x1
    1f60:	cset	w0, ne  // ne = any
    1f64:	str	w0, [x19, #12]
    1f68:	b	a5c <initialize_env+0xd4>
    1f6c:	mov	w1, #0x80000001            	// #-2147483647
    1f70:	cmp	w0, w1
    1f74:	b.ne	206c <initialize_env+0x16e4>  // b.any
    1f78:	ldr	x3, [x20]
    1f7c:	mov	x2, #0x6                   	// #6
    1f80:	adrp	x0, 0 <parse_boolean>
    1f84:	mov	x1, #0x1                   	// #1
    1f88:	add	x0, x0, #0x0
    1f8c:	bl	0 <fwrite>
    1f90:	ldr	w2, [x19, #12]
    1f94:	cbz	w2, 163c <initialize_env+0xcb4>
    1f98:	b	1a1c <initialize_env+0x1094>
    1f9c:	bl	0 <strerror>
    1fa0:	mov	x1, x0
    1fa4:	adrp	x0, 0 <parse_boolean>
    1fa8:	add	x0, x0, #0x0
    1fac:	bl	0 <gomp_error>
    1fb0:	b	1460 <initialize_env+0xad8>
    1fb4:	mov	x0, x26
    1fb8:	mov	x1, #0x10                  	// #16
    1fbc:	bl	0 <realloc>
    1fc0:	cbz	x0, 2474 <initialize_env+0x1aec>
    1fc4:	mov	x1, #0x10                  	// #16
    1fc8:	mov	x26, x0
    1fcc:	mov	x4, #0x1                   	// #1
    1fd0:	strb	w20, [x0]
    1fd4:	str	x1, [sp, #104]
    1fd8:	b	1ad8 <initialize_env+0x1150>
    1fdc:	cbnz	w24, 1e28 <initialize_env+0x14a0>
    1fe0:	adrp	x25, 8 <parse_boolean+0x8>
    1fe4:	adrp	x0, 8 <parse_boolean+0x8>
    1fe8:	b	13f4 <initialize_env+0xa6c>
    1fec:	cbnz	w24, f98 <initialize_env+0x610>
    1ff0:	adrp	x4, 8 <parse_boolean+0x8>
    1ff4:	adrp	x0, 8 <parse_boolean+0x8>
    1ff8:	mov	w1, #0x1                   	// #1
    1ffc:	str	x4, [sp, #104]
    2000:	str	xzr, [x0]
    2004:	mov	x0, x27
    2008:	bl	0 <gomp_affinity_alloc>
    200c:	mov	w25, #0x1                   	// #1
    2010:	ldr	x4, [sp, #104]
    2014:	str	x0, [x4]
    2018:	cbnz	x0, de4 <initialize_env+0x45c>
    201c:	b	f98 <initialize_env+0x610>
    2020:	ldr	x3, [x20]
    2024:	mov	x2, #0x19                  	// #25
    2028:	mov	x1, #0x1                   	// #1
    202c:	adrp	x0, 0 <parse_boolean>
    2030:	add	x0, x0, #0x0
    2034:	bl	0 <fwrite>
    2038:	ldr	x0, [x20]
    203c:	adrp	x1, 0 <parse_boolean>
    2040:	ldr	x2, [sp, #96]
    2044:	add	x1, x1, #0x0
    2048:	bl	0 <fprintf>
    204c:	ldr	x2, [x25]
    2050:	adrp	x1, 0 <parse_boolean>
    2054:	ldr	x0, [x20]
    2058:	add	x1, x1, #0x0
    205c:	bl	0 <fprintf>
    2060:	b	18dc <initialize_env+0xf54>
    2064:	str	x27, [x22]
    2068:	b	bac <initialize_env+0x224>
    206c:	ldr	x3, [x20]
    2070:	adrp	x0, 0 <parse_boolean>
    2074:	mov	x2, #0xa                   	// #10
    2078:	mov	x1, #0x1                   	// #1
    207c:	add	x0, x0, #0x0
    2080:	bl	0 <fwrite>
    2084:	b	1610 <initialize_env+0xc88>
    2088:	add	x21, sp, #0xc8
    208c:	mov	x27, #0x0                   	// #0
    2090:	mov	w23, #0x0                   	// #0
    2094:	str	x25, [sp, #184]
    2098:	b	20cc <initialize_env+0x1744>
    209c:	cbnz	w23, 20b0 <initialize_env+0x1728>
    20a0:	add	x27, x27, #0x1
    20a4:	mov	w23, w0
    20a8:	cmp	x27, #0x10, lsl #12
    20ac:	b.hi	116c <initialize_env+0x7e4>  // b.pmore
    20b0:	ldr	x0, [sp, #184]
    20b4:	add	x1, x0, #0x1
    20b8:	ldrb	w0, [x0]
    20bc:	cmp	w0, #0x2c
    20c0:	cbz	w0, 2268 <initialize_env+0x18e0>
    20c4:	b.ne	116c <initialize_env+0x7e4>  // b.any
    20c8:	str	x1, [sp, #184]
    20cc:	mov	x3, x21
    20d0:	add	x2, sp, #0xc0
    20d4:	add	x1, sp, #0x9f
    20d8:	add	x0, sp, #0xb8
    20dc:	bl	1f8 <parse_one_place>
    20e0:	tst	w0, #0xff
    20e4:	b.eq	116c <initialize_env+0x7e4>  // b.none
    20e8:	ldrb	w0, [sp, #159]
    20ec:	cbnz	w0, 209c <initialize_env+0x1714>
    20f0:	ldr	x0, [sp, #192]
    20f4:	add	x27, x27, x0
    20f8:	b	20a8 <initialize_env+0x1720>
    20fc:	ldr	x3, [x20]
    2100:	adrp	x0, 0 <parse_boolean>
    2104:	mov	x2, #0x6                   	// #6
    2108:	mov	x1, #0x1                   	// #1
    210c:	add	x0, x0, #0x0
    2110:	bl	0 <fwrite>
    2114:	b	1694 <initialize_env+0xd0c>
    2118:	ldr	x3, [x20]
    211c:	adrp	x0, 0 <parse_boolean>
    2120:	mov	x2, #0x5                   	// #5
    2124:	mov	x1, #0x1                   	// #1
    2128:	add	x0, x0, #0x0
    212c:	bl	0 <fwrite>
    2130:	b	1694 <initialize_env+0xd0c>
    2134:	ldr	x3, [x20]
    2138:	adrp	x0, 0 <parse_boolean>
    213c:	mov	x2, #0x5                   	// #5
    2140:	mov	x1, #0x1                   	// #1
    2144:	add	x0, x0, #0x0
    2148:	bl	0 <fwrite>
    214c:	b	1694 <initialize_env+0xd0c>
    2150:	adrp	x0, 0 <parse_boolean>
    2154:	mov	x2, #0x6                   	// #6
    2158:	add	x0, x0, #0x0
    215c:	b	1a08 <initialize_env+0x1080>
    2160:	adrp	x0, 0 <parse_boolean>
    2164:	mov	x2, #0x7                   	// #7
    2168:	add	x0, x0, #0x0
    216c:	b	1a08 <initialize_env+0x1080>
    2170:	mov	x0, x20
    2174:	adrp	x1, 0 <parse_boolean>
    2178:	mov	x2, #0x4                   	// #4
    217c:	add	x1, x1, #0x0
    2180:	adrp	x22, 0 <parse_boolean>
    2184:	bl	0 <strncasecmp>
    2188:	add	x19, x22, #0x0
    218c:	cbnz	w0, a50 <initialize_env+0xc8>
    2190:	mov	w0, #0x4                   	// #4
    2194:	add	x20, x20, #0x4
    2198:	str	w0, [x19, #8]
    219c:	b	1c20 <initialize_env+0x1298>
    21a0:	mov	x4, #0x1                   	// #1
    21a4:	b	1118 <initialize_env+0x790>
    21a8:	ldr	x3, [x20]
    21ac:	adrp	x0, 0 <parse_boolean>
    21b0:	mov	x2, #0xd                   	// #13
    21b4:	mov	x1, #0x1                   	// #1
    21b8:	add	x0, x0, #0x0
    21bc:	bl	0 <fwrite>
    21c0:	b	1610 <initialize_env+0xc88>
    21c4:	mov	x4, #0x1000                	// #4096
    21c8:	movk	x4, #0xd4a5, lsl #16
    21cc:	movk	x4, #0xe8, lsl #32
    21d0:	b	1ea0 <initialize_env+0x1518>
    21d4:	mov	x4, #0xca00                	// #51712
    21d8:	movk	x4, #0x3b9a, lsl #16
    21dc:	b	1ea0 <initialize_env+0x1518>
    21e0:	mov	x4, #0x4240                	// #16960
    21e4:	movk	x4, #0xf, lsl #16
    21e8:	b	1ea0 <initialize_env+0x1518>
    21ec:	mov	x4, #0xffffffffffffffff    	// #-1
    21f0:	b	111c <initialize_env+0x794>
    21f4:	stp	x3, x2, [sp, #96]
    21f8:	cbz	x28, 2220 <initialize_env+0x1898>
    21fc:	lsl	x1, x28, #4
    2200:	mov	x0, x26
    2204:	bl	0 <realloc>
    2208:	lsl	x20, x28, #1
    220c:	ldp	x3, x2, [sp, #96]
    2210:	cbz	x0, 2458 <initialize_env+0x1ad0>
    2214:	mov	x26, x0
    2218:	ldr	x4, [x25]
    221c:	b	1254 <initialize_env+0x8cc>
    2220:	mov	x0, x26
    2224:	mov	x1, #0x80                  	// #128
    2228:	bl	0 <realloc>
    222c:	cbz	x0, 2458 <initialize_env+0x1ad0>
    2230:	mov	x26, x0
    2234:	mov	x20, #0x10                  	// #16
    2238:	mov	x28, #0x1                   	// #1
    223c:	str	x27, [x0]
    2240:	ldr	x4, [x25]
    2244:	ldp	x3, x2, [sp, #96]
    2248:	b	1254 <initialize_env+0x8cc>
    224c:	adrp	x23, 8 <parse_boolean+0x8>
    2250:	adrp	x1, 8 <parse_boolean+0x8>
    2254:	ldrb	w0, [x26]
    2258:	str	x26, [x23]
    225c:	str	x6, [x1]
    2260:	strb	w0, [x19, #26]
    2264:	b	1d9c <initialize_env+0x1414>
    2268:	cbnz	w24, db0 <initialize_env+0x428>
    226c:	adrp	x4, 8 <parse_boolean+0x8>
    2270:	adrp	x28, 8 <parse_boolean+0x8>
    2274:	mov	x0, x27
    2278:	mov	w1, #0x0                   	// #0
    227c:	str	xzr, [x28]
    2280:	str	x4, [sp, #96]
    2284:	bl	0 <gomp_affinity_alloc>
    2288:	ldr	x4, [sp, #96]
    228c:	str	x0, [x4]
    2290:	cbz	x0, db4 <initialize_env+0x42c>
    2294:	add	x26, x28, #0x0
    2298:	add	x23, x4, #0x0
    229c:	ldr	x1, [x26]
    22a0:	str	x4, [sp, #96]
    22a4:	ldr	x0, [x23]
    22a8:	ldr	x0, [x0, x1, lsl #3]
    22ac:	bl	0 <gomp_affinity_init_place>
    22b0:	mov	x3, x21
    22b4:	add	x2, sp, #0xc0
    22b8:	add	x1, sp, #0x9f
    22bc:	add	x0, sp, #0xb0
    22c0:	bl	1f8 <parse_one_place>
    22c4:	tst	w0, #0xff
    22c8:	ldr	x4, [sp, #96]
    22cc:	b.eq	1174 <initialize_env+0x7ec>  // b.none
    22d0:	ldrb	w0, [sp, #159]
    22d4:	cbnz	w0, 237c <initialize_env+0x19f4>
    22d8:	ldr	x0, [sp, #192]
    22dc:	cmp	x0, #0x1
    22e0:	b.ne	2308 <initialize_env+0x1980>  // b.any
    22e4:	ldr	x0, [x26]
    22e8:	add	x0, x0, #0x1
    22ec:	str	x0, [x26]
    22f0:	ldr	x0, [sp, #176]
    22f4:	ldrb	w1, [x0]
    22f8:	cbz	w1, 2408 <initialize_env+0x1a80>
    22fc:	add	x0, x0, #0x1
    2300:	str	x0, [sp, #176]
    2304:	b	229c <initialize_env+0x1914>
    2308:	mov	x25, #0x0                   	// #0
    230c:	b	2344 <initialize_env+0x19bc>
    2310:	add	x1, x25, x1
    2314:	str	x4, [sp, #96]
    2318:	ldr	x3, [x23]
    231c:	add	x0, x1, #0x1
    2320:	ldr	x2, [sp, #200]
    2324:	add	x25, x25, #0x1
    2328:	ldr	x0, [x3, x0, lsl #3]
    232c:	ldr	x1, [x3, x1, lsl #3]
    2330:	bl	0 <gomp_affinity_copy_place>
    2334:	tst	w0, #0xff
    2338:	ldr	x4, [sp, #96]
    233c:	b.eq	1174 <initialize_env+0x7ec>  // b.none
    2340:	ldr	x0, [sp, #192]
    2344:	sub	x1, x0, #0x1
    2348:	cmp	x25, x1
    234c:	ldr	x1, [x26]
    2350:	b.cc	2310 <initialize_env+0x1988>  // b.lo, b.ul, b.last
    2354:	add	x1, x0, x1
    2358:	str	x1, [x26]
    235c:	b	22f0 <initialize_env+0x1968>
    2360:	adrp	x27, 8 <parse_boolean+0x8>
    2364:	adrp	x0, 8 <parse_boolean+0x8>
    2368:	ldr	x1, [x26]
    236c:	str	x26, [x27]
    2370:	str	x3, [x0]
    2374:	str	x1, [x22]
    2378:	b	bac <initialize_env+0x224>
    237c:	mov	x25, #0x0                   	// #0
    2380:	b	23a8 <initialize_env+0x1a20>
    2384:	ldr	x2, [x23]
    2388:	str	x4, [sp, #96]
    238c:	ldr	x1, [x2, x0, lsl #3]
    2390:	ldr	x0, [x2, x25, lsl #3]
    2394:	bl	0 <gomp_affinity_same_place>
    2398:	tst	w0, #0xff
    239c:	ldr	x4, [sp, #96]
    23a0:	b.ne	23b4 <initialize_env+0x1a2c>  // b.any
    23a4:	add	x25, x25, #0x1
    23a8:	ldr	x0, [x26]
    23ac:	cmp	x25, x0
    23b0:	b.cc	2384 <initialize_env+0x19fc>  // b.lo, b.ul, b.last
    23b4:	ldr	x0, [x26]
    23b8:	cmp	x25, x0
    23bc:	b.eq	2440 <initialize_env+0x1ab8>  // b.none
    23c0:	ldr	x3, [x23]
    23c4:	lsl	x6, x25, #3
    23c8:	sub	x0, x0, #0x1
    23cc:	add	x1, x6, #0x8
    23d0:	sub	x2, x0, x25
    23d4:	add	x1, x3, x1
    23d8:	add	x0, x3, x25, lsl #3
    23dc:	str	x4, [sp, #96]
    23e0:	lsl	x2, x2, #3
    23e4:	ldr	x25, [x3, x6]
    23e8:	bl	0 <memmove>
    23ec:	ldr	x0, [x26]
    23f0:	ldr	x1, [x23]
    23f4:	sub	x0, x0, #0x1
    23f8:	str	x0, [x26]
    23fc:	ldr	x4, [sp, #96]
    2400:	str	x25, [x1, x0, lsl #3]
    2404:	b	22f0 <initialize_env+0x1968>
    2408:	ldr	x0, [x28]
    240c:	str	x4, [sp, #96]
    2410:	cbz	x0, 242c <initialize_env+0x1aa4>
    2414:	mov	w0, #0x0                   	// #0
    2418:	bl	0 <gomp_affinity_finalize_place_list>
    241c:	tst	w0, #0xff
    2420:	ldr	x4, [sp, #96]
    2424:	b.ne	1e74 <initialize_env+0x14ec>  // b.any
    2428:	b	1174 <initialize_env+0x7ec>
    242c:	adrp	x0, 0 <parse_boolean>
    2430:	add	x0, x0, #0x0
    2434:	bl	0 <gomp_error>
    2438:	ldr	x4, [sp, #96]
    243c:	b	1174 <initialize_env+0x7ec>
    2440:	adrp	x0, 0 <parse_boolean>
    2444:	add	x0, x0, #0x0
    2448:	str	x4, [sp, #96]
    244c:	bl	0 <gomp_error>
    2450:	ldr	x4, [sp, #96]
    2454:	b	1174 <initialize_env+0x7ec>
    2458:	mov	x0, x26
    245c:	bl	0 <free>
    2460:	mov	x1, x23
    2464:	adrp	x0, 0 <parse_boolean>
    2468:	add	x0, x0, #0x0
    246c:	bl	0 <gomp_error>
    2470:	b	ba4 <initialize_env+0x21c>
    2474:	mov	x0, x26
    2478:	bl	0 <free>
    247c:	mov	x1, x21
    2480:	adrp	x0, 0 <parse_boolean>
    2484:	add	x0, x0, #0x0
    2488:	bl	0 <gomp_error>
    248c:	b	c38 <initialize_env+0x2b0>

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_vdebug>:
   0:	adrp	x0, 0 <gomp_debug_var>
   4:	ldr	w0, [x0]
   8:	cbnz	w0, 10 <gomp_vdebug+0x10>
   c:	ret
  10:	mov	x3, x2
  14:	stp	x29, x30, [sp, #-48]!
  18:	adrp	x0, 0 <stderr>
  1c:	mov	x29, sp
  20:	ldp	x4, x5, [x3]
  24:	stp	x4, x5, [sp, #16]
  28:	add	x2, sp, #0x10
  2c:	ldp	x4, x5, [x3, #16]
  30:	stp	x4, x5, [sp, #32]
  34:	ldr	x0, [x0]
  38:	bl	0 <vfprintf>
  3c:	ldp	x29, x30, [sp], #48
  40:	ret
  44:	nop

0000000000000048 <gomp_debug>:
  48:	stp	x29, x30, [sp, #-288]!
  4c:	adrp	x0, 0 <gomp_debug_var>
  50:	mov	w9, #0xffffffd0            	// #-48
  54:	mov	x29, sp
  58:	add	x10, sp, #0xf0
  5c:	add	x11, sp, #0x120
  60:	mov	w8, #0xffffff80            	// #-128
  64:	stp	x11, x11, [sp, #48]
  68:	ldr	w0, [x0]
  6c:	str	x10, [sp, #64]
  70:	stp	w9, w8, [sp, #72]
  74:	ldp	x10, x11, [sp, #48]
  78:	stp	x10, x11, [sp, #80]
  7c:	ldp	x8, x9, [sp, #64]
  80:	stp	x8, x9, [sp, #96]
  84:	str	q0, [sp, #112]
  88:	str	q1, [sp, #128]
  8c:	str	q2, [sp, #144]
  90:	str	q3, [sp, #160]
  94:	str	q4, [sp, #176]
  98:	str	q5, [sp, #192]
  9c:	str	q6, [sp, #208]
  a0:	str	q7, [sp, #224]
  a4:	stp	x2, x3, [sp, #240]
  a8:	stp	x4, x5, [sp, #256]
  ac:	stp	x6, x7, [sp, #272]
  b0:	cbnz	w0, bc <gomp_debug+0x74>
  b4:	ldp	x29, x30, [sp], #288
  b8:	ret
  bc:	adrp	x0, 0 <stderr>
  c0:	add	x2, sp, #0x10
  c4:	stp	x10, x11, [sp, #16]
  c8:	ldr	x0, [x0]
  cc:	stp	x8, x9, [sp, #32]
  d0:	bl	0 <vfprintf>
  d4:	ldp	x29, x30, [sp], #288
  d8:	ret
  dc:	nop

00000000000000e0 <gomp_verror>:
  e0:	stp	x29, x30, [sp, #-80]!
  e4:	mov	x2, #0xa                   	// #10
  e8:	mov	x29, sp
  ec:	stp	x19, x20, [sp, #16]
  f0:	adrp	x20, 0 <stderr>
  f4:	mov	x19, x1
  f8:	ldr	x3, [x20]
  fc:	mov	x1, #0x1                   	// #1
 100:	str	x21, [sp, #32]
 104:	mov	x21, x0
 108:	adrp	x0, 0 <gomp_vdebug>
 10c:	add	x0, x0, #0x0
 110:	bl	0 <fwrite>
 114:	ldp	x6, x7, [x19]
 118:	mov	x1, x21
 11c:	ldp	x4, x5, [x19, #16]
 120:	add	x2, sp, #0x30
 124:	ldr	x0, [x20]
 128:	stp	x6, x7, [sp, #48]
 12c:	stp	x4, x5, [sp, #64]
 130:	bl	0 <vfprintf>
 134:	ldr	x1, [x20]
 138:	mov	w0, #0xa                   	// #10
 13c:	ldp	x19, x20, [sp, #16]
 140:	ldr	x21, [sp, #32]
 144:	ldp	x29, x30, [sp], #80
 148:	b	0 <fputc>
 14c:	nop

0000000000000150 <gomp_error>:
 150:	stp	x29, x30, [sp, #-272]!
 154:	mov	w9, #0xffffffc8            	// #-56
 158:	mov	w8, #0xffffff80            	// #-128
 15c:	mov	x29, sp
 160:	add	x10, sp, #0xd0
 164:	add	x11, sp, #0x110
 168:	stp	x11, x11, [sp, #48]
 16c:	str	x10, [sp, #64]
 170:	stp	w9, w8, [sp, #72]
 174:	ldp	x10, x11, [sp, #48]
 178:	stp	x10, x11, [sp, #16]
 17c:	ldp	x8, x9, [sp, #64]
 180:	stp	x8, x9, [sp, #32]
 184:	str	q0, [sp, #80]
 188:	str	q1, [sp, #96]
 18c:	str	q2, [sp, #112]
 190:	str	q3, [sp, #128]
 194:	str	q4, [sp, #144]
 198:	str	q5, [sp, #160]
 19c:	str	q6, [sp, #176]
 1a0:	str	q7, [sp, #192]
 1a4:	stp	x1, x2, [sp, #216]
 1a8:	add	x1, sp, #0x10
 1ac:	stp	x3, x4, [sp, #232]
 1b0:	stp	x5, x6, [sp, #248]
 1b4:	str	x7, [sp, #264]
 1b8:	bl	e0 <gomp_verror>
 1bc:	ldp	x29, x30, [sp], #272
 1c0:	ret
 1c4:	nop

00000000000001c8 <gomp_vfatal>:
 1c8:	mov	x2, x1
 1cc:	stp	x29, x30, [sp, #-48]!
 1d0:	mov	x29, sp
 1d4:	ldp	x4, x5, [x2]
 1d8:	stp	x4, x5, [sp, #16]
 1dc:	add	x1, sp, #0x10
 1e0:	ldp	x2, x3, [x2, #16]
 1e4:	stp	x2, x3, [sp, #32]
 1e8:	bl	e0 <gomp_verror>
 1ec:	mov	w0, #0x1                   	// #1
 1f0:	bl	0 <exit>
 1f4:	nop

00000000000001f8 <gomp_fatal>:
 1f8:	stp	x29, x30, [sp, #-272]!
 1fc:	mov	w9, #0xffffffc8            	// #-56
 200:	mov	w8, #0xffffff80            	// #-128
 204:	mov	x29, sp
 208:	add	x10, sp, #0xd0
 20c:	add	x11, sp, #0x110
 210:	stp	x11, x11, [sp, #48]
 214:	str	x10, [sp, #64]
 218:	stp	w9, w8, [sp, #72]
 21c:	ldp	x10, x11, [sp, #48]
 220:	stp	x10, x11, [sp, #16]
 224:	ldp	x8, x9, [sp, #64]
 228:	stp	x8, x9, [sp, #32]
 22c:	str	q0, [sp, #80]
 230:	str	q1, [sp, #96]
 234:	str	q2, [sp, #112]
 238:	str	q3, [sp, #128]
 23c:	str	q4, [sp, #144]
 240:	str	q5, [sp, #160]
 244:	str	q6, [sp, #176]
 248:	str	q7, [sp, #192]
 24c:	stp	x1, x2, [sp, #216]
 250:	add	x1, sp, #0x10
 254:	stp	x3, x4, [sp, #232]
 258:	stp	x5, x6, [sp, #248]
 25c:	str	x7, [sp, #264]
 260:	bl	1c8 <gomp_vfatal>

icv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_num_threads>:
   0:	adrp	x2, 0 <gomp_tls_data>
   4:	ldr	x2, [x2]
   8:	mrs	x1, tpidr_el0
   c:	stp	x29, x30, [sp, #-32]!
  10:	add	x1, x1, x2
  14:	mov	x29, sp
  18:	str	x19, [sp, #16]
  1c:	mov	w19, w0
  20:	ldr	x0, [x1, #80]
  24:	cbz	x0, 48 <gomp_ialias_omp_set_num_threads+0x48>
  28:	add	x0, x0, #0x90
  2c:	cmp	w19, #0x0
  30:	csinc	w19, w19, wzr, gt
  34:	sxtw	x19, w19
  38:	str	x19, [x0]
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	bl	0 <gomp_new_icv>
  4c:	cmp	w19, #0x0
  50:	csinc	w19, w19, wzr, gt
  54:	sxtw	x19, w19
  58:	str	x19, [x0]
  5c:	ldr	x19, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret

0000000000000068 <gomp_ialias_omp_set_dynamic>:
  68:	adrp	x2, 0 <gomp_tls_data>
  6c:	ldr	x2, [x2]
  70:	mrs	x1, tpidr_el0
  74:	stp	x29, x30, [sp, #-32]!
  78:	add	x1, x1, x2
  7c:	mov	x29, sp
  80:	ldr	x1, [x1, #80]
  84:	str	x19, [sp, #16]
  88:	mov	w19, w0
  8c:	cbz	x1, ac <gomp_ialias_omp_set_dynamic+0x44>
  90:	add	x1, x1, #0x90
  94:	cmp	w19, #0x0
  98:	cset	w0, ne  // ne = any
  9c:	ldr	x19, [sp, #16]
  a0:	strb	w0, [x1, #24]
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret
  ac:	bl	0 <gomp_new_icv>
  b0:	mov	x1, x0
  b4:	cmp	w19, #0x0
  b8:	cset	w0, ne  // ne = any
  bc:	strb	w0, [x1, #24]
  c0:	ldr	x19, [sp, #16]
  c4:	ldp	x29, x30, [sp], #32
  c8:	ret
  cc:	nop

00000000000000d0 <gomp_ialias_omp_get_dynamic>:
  d0:	adrp	x2, 0 <gomp_tls_data>
  d4:	ldr	x2, [x2]
  d8:	mrs	x1, tpidr_el0
  dc:	adrp	x0, 0 <gomp_global_icv>
  e0:	add	x0, x0, #0x0
  e4:	add	x1, x1, x2
  e8:	ldr	x1, [x1, #80]
  ec:	cmp	x1, #0x0
  f0:	add	x1, x1, #0x90
  f4:	csel	x0, x0, x1, eq  // eq = none
  f8:	ldrb	w0, [x0, #24]
  fc:	ret

0000000000000100 <gomp_ialias_omp_set_nested>:
 100:	adrp	x2, 0 <gomp_tls_data>
 104:	ldr	x2, [x2]
 108:	mrs	x1, tpidr_el0
 10c:	stp	x29, x30, [sp, #-32]!
 110:	add	x1, x1, x2
 114:	mov	x29, sp
 118:	ldr	x1, [x1, #80]
 11c:	str	x19, [sp, #16]
 120:	mov	w19, w0
 124:	cbz	x1, 144 <gomp_ialias_omp_set_nested+0x44>
 128:	add	x1, x1, #0x90
 12c:	cmp	w19, #0x0
 130:	cset	w0, ne  // ne = any
 134:	ldr	x19, [sp, #16]
 138:	strb	w0, [x1, #25]
 13c:	ldp	x29, x30, [sp], #32
 140:	ret
 144:	bl	0 <gomp_new_icv>
 148:	mov	x1, x0
 14c:	cmp	w19, #0x0
 150:	cset	w0, ne  // ne = any
 154:	strb	w0, [x1, #25]
 158:	ldr	x19, [sp, #16]
 15c:	ldp	x29, x30, [sp], #32
 160:	ret
 164:	nop

0000000000000168 <gomp_ialias_omp_get_nested>:
 168:	adrp	x2, 0 <gomp_tls_data>
 16c:	ldr	x2, [x2]
 170:	mrs	x1, tpidr_el0
 174:	adrp	x0, 0 <gomp_global_icv>
 178:	add	x0, x0, #0x0
 17c:	add	x1, x1, x2
 180:	ldr	x1, [x1, #80]
 184:	cmp	x1, #0x0
 188:	add	x1, x1, #0x90
 18c:	csel	x0, x0, x1, eq  // eq = none
 190:	ldrb	w0, [x0, #25]
 194:	ret

0000000000000198 <gomp_ialias_omp_set_schedule>:
 198:	adrp	x3, 0 <gomp_tls_data>
 19c:	ldr	x3, [x3]
 1a0:	mrs	x2, tpidr_el0
 1a4:	stp	x29, x30, [sp, #-32]!
 1a8:	add	x2, x2, x3
 1ac:	mov	x29, sp
 1b0:	stp	x19, x20, [sp, #16]
 1b4:	mov	w19, w0
 1b8:	mov	w20, w1
 1bc:	ldr	x0, [x2, #80]
 1c0:	cbz	x0, 214 <gomp_ialias_omp_set_schedule+0x7c>
 1c4:	add	x0, x0, #0x90
 1c8:	tst	w19, #0x7ffffffc
 1cc:	and	w1, w19, #0x7fffffff
 1d0:	b.ne	200 <gomp_ialias_omp_set_schedule+0x68>  // b.any
 1d4:	tst	w19, #0x7ffffffe
 1d8:	b.ne	21c <gomp_ialias_omp_set_schedule+0x84>  // b.any
 1dc:	cmp	w1, #0x1
 1e0:	b.ne	1f4 <gomp_ialias_omp_set_schedule+0x5c>  // b.any
 1e4:	cmp	w20, #0x0
 1e8:	csel	w20, w20, wzr, ge  // ge = tcont
 1ec:	str	w20, [x0, #12]
 1f0:	str	w19, [x0, #8]
 1f4:	ldp	x19, x20, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #32
 1fc:	ret
 200:	cmp	w1, #0x4
 204:	b.eq	1f0 <gomp_ialias_omp_set_schedule+0x58>  // b.none
 208:	ldp	x19, x20, [sp, #16]
 20c:	ldp	x29, x30, [sp], #32
 210:	ret
 214:	bl	0 <gomp_new_icv>
 218:	b	1c8 <gomp_ialias_omp_set_schedule+0x30>
 21c:	cmp	w20, #0x0
 220:	csinc	w20, w20, wzr, gt
 224:	str	w20, [x0, #12]
 228:	b	1f0 <gomp_ialias_omp_set_schedule+0x58>
 22c:	nop

0000000000000230 <gomp_ialias_omp_get_schedule>:
 230:	adrp	x4, 0 <gomp_tls_data>
 234:	ldr	x4, [x4]
 238:	mrs	x3, tpidr_el0
 23c:	adrp	x2, 0 <gomp_global_icv>
 240:	add	x2, x2, #0x0
 244:	add	x3, x3, x4
 248:	ldr	x3, [x3, #80]
 24c:	cmp	x3, #0x0
 250:	add	x3, x3, #0x90
 254:	csel	x2, x2, x3, eq  // eq = none
 258:	ldr	w3, [x2, #8]
 25c:	str	w3, [x0]
 260:	ldr	w0, [x2, #12]
 264:	str	w0, [x1]
 268:	ret
 26c:	nop

0000000000000270 <gomp_ialias_omp_get_max_threads>:
 270:	adrp	x2, 0 <gomp_tls_data>
 274:	ldr	x2, [x2]
 278:	mrs	x1, tpidr_el0
 27c:	adrp	x0, 0 <gomp_global_icv>
 280:	add	x0, x0, #0x0
 284:	add	x1, x1, x2
 288:	ldr	x1, [x1, #80]
 28c:	cmp	x1, #0x0
 290:	add	x1, x1, #0x90
 294:	csel	x0, x0, x1, eq  // eq = none
 298:	ldr	w0, [x0]
 29c:	ret

00000000000002a0 <gomp_ialias_omp_get_thread_limit>:
 2a0:	adrp	x0, 0 <gomp_tls_data>
 2a4:	ldr	x0, [x0]
 2a8:	mrs	x2, tpidr_el0
 2ac:	adrp	x1, 0 <gomp_global_icv>
 2b0:	add	x1, x1, #0x0
 2b4:	add	x2, x2, x0
 2b8:	mov	w3, #0x7fffffff            	// #2147483647
 2bc:	ldr	x2, [x2, #80]
 2c0:	cmp	x2, #0x0
 2c4:	add	x2, x2, #0x90
 2c8:	csel	x1, x1, x2, eq  // eq = none
 2cc:	ldr	w0, [x1, #20]
 2d0:	cmp	w0, #0x0
 2d4:	csel	w0, w0, w3, ge  // ge = tcont
 2d8:	ret
 2dc:	nop

00000000000002e0 <gomp_ialias_omp_set_max_active_levels>:
 2e0:	tbnz	w0, #31, 2f0 <gomp_ialias_omp_set_max_active_levels+0x10>
 2e4:	adrp	x1, 0 <gomp_max_active_levels_var>
 2e8:	sxtw	x0, w0
 2ec:	str	x0, [x1]
 2f0:	ret
 2f4:	nop

00000000000002f8 <gomp_ialias_omp_get_max_active_levels>:
 2f8:	adrp	x0, 0 <gomp_max_active_levels_var>
 2fc:	ldr	w0, [x0]
 300:	ret
 304:	nop

0000000000000308 <gomp_ialias_omp_get_cancellation>:
 308:	adrp	x0, 0 <gomp_cancel_var>
 30c:	ldrb	w0, [x0]
 310:	ret
 314:	nop

0000000000000318 <gomp_ialias_omp_get_max_task_priority>:
 318:	adrp	x0, 0 <gomp_max_task_priority_var>
 31c:	ldr	w0, [x0]
 320:	ret
 324:	nop

0000000000000328 <gomp_ialias_omp_get_proc_bind>:
 328:	adrp	x2, 0 <gomp_tls_data>
 32c:	ldr	x2, [x2]
 330:	mrs	x1, tpidr_el0
 334:	adrp	x0, 0 <gomp_global_icv>
 338:	add	x0, x0, #0x0
 33c:	add	x1, x1, x2
 340:	ldr	x1, [x1, #80]
 344:	cmp	x1, #0x0
 348:	add	x1, x1, #0x90
 34c:	csel	x0, x0, x1, eq  // eq = none
 350:	ldrb	w0, [x0, #26]
 354:	ret

0000000000000358 <gomp_ialias_omp_get_initial_device>:
 358:	mov	w0, #0xfffffffe            	// #-2
 35c:	ret

0000000000000360 <gomp_ialias_omp_get_num_places>:
 360:	adrp	x0, 0 <gomp_places_list_len>
 364:	ldr	w0, [x0]
 368:	ret
 36c:	nop

0000000000000370 <gomp_ialias_omp_get_place_num>:
 370:	adrp	x0, 0 <gomp_places_list>
 374:	ldr	x0, [x0]
 378:	cbz	x0, 3c8 <gomp_ialias_omp_get_place_num+0x58>
 37c:	stp	x29, x30, [sp, #-32]!
 380:	mrs	x0, tpidr_el0
 384:	mov	x29, sp
 388:	str	x19, [sp, #16]
 38c:	adrp	x19, 0 <gomp_tls_data>
 390:	ldr	x19, [x19]
 394:	add	x19, x0, x19
 398:	ldr	w0, [x19, #92]
 39c:	cbz	w0, 3b0 <gomp_ialias_omp_get_place_num+0x40>
 3a0:	sub	w0, w0, #0x1
 3a4:	ldr	x19, [sp, #16]
 3a8:	ldp	x29, x30, [sp], #32
 3ac:	ret
 3b0:	bl	0 <gomp_init_affinity>
 3b4:	ldr	w0, [x19, #92]
 3b8:	ldr	x19, [sp, #16]
 3bc:	sub	w0, w0, #0x1
 3c0:	ldp	x29, x30, [sp], #32
 3c4:	ret
 3c8:	mov	w0, #0xffffffff            	// #-1
 3cc:	ret

00000000000003d0 <gomp_ialias_omp_get_partition_num_places>:
 3d0:	adrp	x0, 0 <gomp_places_list>
 3d4:	ldr	x0, [x0]
 3d8:	cbz	x0, 42c <gomp_ialias_omp_get_partition_num_places+0x5c>
 3dc:	stp	x29, x30, [sp, #-32]!
 3e0:	mov	x29, sp
 3e4:	stp	x19, x20, [sp, #16]
 3e8:	mrs	x19, tpidr_el0
 3ec:	adrp	x20, 0 <gomp_tls_data>
 3f0:	ldr	x20, [x20]
 3f4:	add	x0, x19, x20
 3f8:	ldr	w0, [x0, #92]
 3fc:	cbz	w0, 414 <gomp_ialias_omp_get_partition_num_places+0x44>
 400:	add	x19, x19, x20
 404:	ldr	w0, [x19, #56]
 408:	ldp	x19, x20, [sp, #16]
 40c:	ldp	x29, x30, [sp], #32
 410:	ret
 414:	add	x19, x19, x20
 418:	bl	0 <gomp_init_affinity>
 41c:	ldr	w0, [x19, #56]
 420:	ldp	x19, x20, [sp, #16]
 424:	ldp	x29, x30, [sp], #32
 428:	ret
 42c:	mov	w0, #0x0                   	// #0
 430:	ret
 434:	nop

0000000000000438 <gomp_ialias_omp_get_partition_place_nums>:
 438:	stp	x29, x30, [sp, #-48]!
 43c:	adrp	x1, 0 <gomp_places_list>
 440:	mov	x29, sp
 444:	stp	x19, x20, [sp, #16]
 448:	mov	x20, x0
 44c:	ldr	x0, [x1]
 450:	cbz	x0, 4a0 <gomp_ialias_omp_get_partition_place_nums+0x68>
 454:	str	x21, [sp, #32]
 458:	mrs	x19, tpidr_el0
 45c:	adrp	x21, 0 <gomp_tls_data>
 460:	ldr	x21, [x21]
 464:	add	x0, x19, x21
 468:	ldr	w0, [x0, #92]
 46c:	cbz	w0, 4ac <gomp_ialias_omp_get_partition_place_nums+0x74>
 470:	add	x3, x19, x21
 474:	ldr	w0, [x3, #56]
 478:	cbz	w0, 49c <gomp_ialias_omp_get_partition_place_nums+0x64>
 47c:	mov	x1, #0x0                   	// #0
 480:	ldr	w2, [x3, #52]
 484:	add	w2, w2, w1
 488:	str	w2, [x20, x1, lsl #2]
 48c:	add	x1, x1, #0x1
 490:	ldr	w2, [x3, #56]
 494:	cmp	w2, w1
 498:	b.hi	480 <gomp_ialias_omp_get_partition_place_nums+0x48>  // b.pmore
 49c:	ldr	x21, [sp, #32]
 4a0:	ldp	x19, x20, [sp, #16]
 4a4:	ldp	x29, x30, [sp], #48
 4a8:	ret
 4ac:	bl	0 <gomp_init_affinity>
 4b0:	b	470 <gomp_ialias_omp_get_partition_place_nums+0x38>

icv-device.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_default_device>:
   0:	adrp	x2, 0 <gomp_tls_data>
   4:	ldr	x2, [x2]
   8:	mrs	x1, tpidr_el0
   c:	stp	x29, x30, [sp, #-32]!
  10:	add	x1, x1, x2
  14:	mov	x29, sp
  18:	str	x19, [sp, #16]
  1c:	mov	w19, w0
  20:	ldr	x0, [x1, #80]
  24:	cbz	x0, 44 <gomp_ialias_omp_set_default_device+0x44>
  28:	add	x0, x0, #0x90
  2c:	cmp	w19, #0x0
  30:	csel	w19, w19, wzr, ge  // ge = tcont
  34:	str	w19, [x0, #16]
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	bl	0 <gomp_new_icv>
  48:	cmp	w19, #0x0
  4c:	csel	w19, w19, wzr, ge  // ge = tcont
  50:	str	w19, [x0, #16]
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <gomp_ialias_omp_get_default_device>:
  60:	adrp	x2, 0 <gomp_tls_data>
  64:	ldr	x2, [x2]
  68:	mrs	x1, tpidr_el0
  6c:	adrp	x0, 0 <gomp_global_icv>
  70:	add	x0, x0, #0x0
  74:	add	x1, x1, x2
  78:	ldr	x1, [x1, #80]
  7c:	cmp	x1, #0x0
  80:	add	x1, x1, #0x90
  84:	csel	x0, x0, x1, eq  // eq = none
  88:	ldr	w0, [x0, #16]
  8c:	ret

0000000000000090 <gomp_ialias_omp_get_num_devices>:
  90:	b	0 <gomp_get_num_devices>
  94:	nop

0000000000000098 <gomp_ialias_omp_is_initial_device>:
  98:	mov	w0, #0x1                   	// #1
  9c:	ret

iter.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_static_next>:
   0:	adrp	x5, 0 <gomp_tls_data>
   4:	ldr	x5, [x5]
   8:	mrs	x10, tpidr_el0
   c:	mov	x8, x0
  10:	add	x2, x10, x5
  14:	ldp	x6, x4, [x2, #16]
  18:	ldr	x7, [x2, #72]
  1c:	cbz	x6, 118 <gomp_iter_static_next+0x118>
  20:	ldr	w3, [x6]
  24:	cmn	x7, #0x1
  28:	mov	w0, #0xffffffff            	// #-1
  2c:	b.eq	a8 <gomp_iter_static_next+0xa8>  // b.none
  30:	cmp	x3, #0x1
  34:	b.eq	124 <gomp_iter_static_next+0x124>  // b.none
  38:	ldr	x6, [x4, #8]
  3c:	cbnz	x6, ac <gomp_iter_static_next+0xac>
  40:	mov	w0, #0x1                   	// #1
  44:	cbnz	x7, a8 <gomp_iter_static_next+0xa8>
  48:	ldp	x0, x7, [x4, #16]
  4c:	mov	x6, #0x1                   	// #1
  50:	ldr	x9, [x4, #72]
  54:	ldr	w4, [x2, #40]
  58:	cmp	x7, #0x0
  5c:	sub	x0, x0, x9
  60:	cneg	x6, x6, gt
  64:	add	x6, x7, x6
  68:	add	x0, x0, x6
  6c:	sdiv	x0, x0, x7
  70:	udiv	x2, x0, x3
  74:	msub	x3, x2, x3, x0
  78:	cmp	x4, x3
  7c:	b.cs	88 <gomp_iter_static_next+0x88>  // b.hs, b.nlast
  80:	add	x2, x2, #0x1
  84:	mov	x3, #0x0                   	// #0
  88:	madd	x3, x2, x4, x3
  8c:	add	x2, x2, x3
  90:	cmp	x3, x2
  94:	b.cc	150 <gomp_iter_static_next+0x150>  // b.lo, b.ul, b.last
  98:	add	x5, x10, x5
  9c:	mov	x1, #0x1                   	// #1
  a0:	mov	w0, w1
  a4:	str	x1, [x5, #72]
  a8:	ret
  ac:	ldp	x5, x9, [x4, #16]
  b0:	mov	x0, #0x1                   	// #1
  b4:	ldr	x11, [x4, #72]
  b8:	ldr	w12, [x2, #40]
  bc:	cmp	x9, #0x0
  c0:	cneg	x4, x0, gt
  c4:	add	x10, x9, x4
  c8:	sub	x4, x5, x11
  cc:	add	x4, x4, x10
  d0:	madd	x3, x3, x7, x12
  d4:	sdiv	x4, x4, x9
  d8:	mul	x3, x3, x6
  dc:	cmp	x4, x3
  e0:	b.ls	a8 <gomp_iter_static_next+0xa8>  // b.plast
  e4:	add	x6, x6, x3
  e8:	madd	x3, x3, x9, x11
  ec:	cmp	x4, x6
  f0:	str	x3, [x8]
  f4:	csel	x0, x4, x6, ls  // ls = plast
  f8:	madd	x9, x0, x9, x11
  fc:	str	x9, [x1]
 100:	b.ls	17c <gomp_iter_static_next+0x17c>  // b.plast
 104:	ldr	x1, [x2, #72]
 108:	mov	w0, #0x0                   	// #0
 10c:	add	x1, x1, #0x1
 110:	str	x1, [x2, #72]
 114:	ret
 118:	cmn	x7, #0x1
 11c:	mov	w0, #0xffffffff            	// #-1
 120:	b.eq	a8 <gomp_iter_static_next+0xa8>  // b.none
 124:	ldr	x0, [x4, #72]
 128:	str	x0, [x8]
 12c:	add	x5, x10, x5
 130:	mov	x2, #0xffffffffffffffff    	// #-1
 134:	ldr	x0, [x4, #16]
 138:	str	x0, [x1]
 13c:	ldr	x1, [x4, #72]
 140:	str	x2, [x5, #72]
 144:	cmp	x1, x0
 148:	cset	w0, eq  // eq = none
 14c:	ret
 150:	madd	x3, x3, x7, x9
 154:	add	x5, x10, x5
 158:	madd	x7, x2, x7, x9
 15c:	str	x3, [x8]
 160:	cmp	x0, x2
 164:	str	x7, [x1]
 168:	mov	w0, #0x0                   	// #0
 16c:	mov	x1, #0x1                   	// #1
 170:	cneg	x1, x1, eq  // eq = none
 174:	str	x1, [x5, #72]
 178:	ret
 17c:	mov	x1, #0xffffffffffffffff    	// #-1
 180:	mov	w0, #0x0                   	// #0
 184:	str	x1, [x2, #72]
 188:	ret
 18c:	nop

0000000000000190 <gomp_iter_dynamic_next_locked>:
 190:	adrp	x3, 0 <gomp_tls_data>
 194:	ldr	x3, [x3]
 198:	mrs	x2, tpidr_el0
 19c:	add	x2, x2, x3
 1a0:	ldr	x3, [x2, #24]
 1a4:	ldr	x2, [x3, #16]
 1a8:	ldr	x4, [x3, #72]
 1ac:	cmp	x2, x4
 1b0:	b.eq	204 <gomp_iter_dynamic_next_locked+0x74>  // b.none
 1b4:	ldr	x6, [x3, #8]
 1b8:	sub	x2, x2, x4
 1bc:	ldr	x7, [x3, #24]
 1c0:	cmp	x6, x2
 1c4:	csel	x5, x6, x2, le
 1c8:	tbnz	x7, #63, 1e4 <gomp_iter_dynamic_next_locked+0x54>
 1cc:	add	x2, x5, x4
 1d0:	str	x2, [x3, #72]
 1d4:	str	x4, [x0]
 1d8:	mov	w0, #0x1                   	// #1
 1dc:	str	x2, [x1]
 1e0:	ret
 1e4:	cmp	x6, x2
 1e8:	csel	x5, x6, x2, ge  // ge = tcont
 1ec:	add	x2, x5, x4
 1f0:	str	x2, [x3, #72]
 1f4:	str	x4, [x0]
 1f8:	mov	w0, #0x1                   	// #1
 1fc:	str	x2, [x1]
 200:	b	1e0 <gomp_iter_dynamic_next_locked+0x50>
 204:	mov	w0, #0x0                   	// #0
 208:	ret
 20c:	nop

0000000000000210 <gomp_iter_dynamic_next>:
 210:	adrp	x3, 0 <gomp_tls_data>
 214:	ldr	x3, [x3]
 218:	mrs	x2, tpidr_el0
 21c:	add	x2, x2, x3
 220:	ldr	x2, [x2, #24]
 224:	add	x4, x2, #0x48
 228:	ldr	w7, [x2, #4]
 22c:	ldr	x3, [x2, #8]
 230:	ldp	x5, x6, [x2, #16]
 234:	cbz	w7, 2a4 <gomp_iter_dynamic_next+0x94>
 238:	ldxr	x2, [x4]
 23c:	add	x7, x2, x3
 240:	stlxr	w8, x7, [x4]
 244:	cbnz	w8, 238 <gomp_iter_dynamic_next+0x28>
 248:	dmb	ish
 24c:	cmp	x6, #0x0
 250:	b.le	280 <gomp_iter_dynamic_next+0x70>
 254:	cmp	x5, x2
 258:	b.gt	264 <gomp_iter_dynamic_next+0x54>
 25c:	mov	w0, #0x0                   	// #0
 260:	ret
 264:	add	x3, x3, x2
 268:	str	x2, [x0]
 26c:	cmp	x5, x3
 270:	mov	w0, #0x1                   	// #1
 274:	csel	x3, x5, x3, le
 278:	str	x3, [x1]
 27c:	ret
 280:	cmp	x5, x2
 284:	b.ge	25c <gomp_iter_dynamic_next+0x4c>  // b.tcont
 288:	add	x3, x3, x2
 28c:	str	x2, [x0]
 290:	cmp	x5, x3
 294:	mov	w0, #0x1                   	// #1
 298:	csel	x3, x5, x3, ge  // ge = tcont
 29c:	str	x3, [x1]
 2a0:	ret
 2a4:	ldr	x2, [x4]
 2a8:	cmp	x2, x5
 2ac:	sub	x7, x5, x2
 2b0:	b.eq	25c <gomp_iter_dynamic_next+0x4c>  // b.none
 2b4:	tbnz	x6, #63, 2f4 <gomp_iter_dynamic_next+0xe4>
 2b8:	cmp	x3, x7
 2bc:	csel	x3, x3, x7, le
 2c0:	add	x7, x2, x3
 2c4:	ldxr	x8, [x4]
 2c8:	cmp	x8, x2
 2cc:	b.ne	2d8 <gomp_iter_dynamic_next+0xc8>  // b.any
 2d0:	stlxr	w9, x7, [x4]
 2d4:	cbnz	w9, 2c4 <gomp_iter_dynamic_next+0xb4>
 2d8:	dmb	ish
 2dc:	cmp	x2, x8
 2e0:	b.ne	300 <gomp_iter_dynamic_next+0xf0>  // b.any
 2e4:	str	x2, [x0]
 2e8:	mov	w0, #0x1                   	// #1
 2ec:	str	x7, [x1]
 2f0:	ret
 2f4:	cmp	x3, x7
 2f8:	csel	x3, x3, x7, ge  // ge = tcont
 2fc:	b	2c0 <gomp_iter_dynamic_next+0xb0>
 300:	mov	x2, x8
 304:	b	2a8 <gomp_iter_dynamic_next+0x98>

0000000000000308 <gomp_iter_guided_next_locked>:
 308:	adrp	x2, 0 <gomp_tls_data>
 30c:	ldr	x2, [x2]
 310:	mrs	x3, tpidr_el0
 314:	mov	x9, #0x1                   	// #1
 318:	add	x2, x3, x2
 31c:	ldp	x3, x4, [x2, #16]
 320:	cbz	x3, 328 <gomp_iter_guided_next_locked+0x20>
 324:	ldr	w9, [x3]
 328:	ldr	x2, [x4, #16]
 32c:	mov	w10, #0x0                   	// #0
 330:	ldr	x6, [x4, #72]
 334:	cmp	x6, x2
 338:	b.eq	37c <gomp_iter_guided_next_locked+0x74>  // b.none
 33c:	ldr	x7, [x4, #24]
 340:	sub	x8, x2, x6
 344:	ldr	x5, [x4, #8]
 348:	mov	w10, #0x1                   	// #1
 34c:	sdiv	x8, x8, x7
 350:	sub	x3, x8, #0x1
 354:	add	x3, x3, x9
 358:	udiv	x3, x3, x9
 35c:	cmp	x5, x3
 360:	csel	x3, x5, x3, cs  // cs = hs, nlast
 364:	cmp	x3, x8
 368:	madd	x3, x7, x3, x6
 36c:	csel	x2, x3, x2, ls  // ls = plast
 370:	str	x2, [x4, #72]
 374:	str	x6, [x0]
 378:	str	x2, [x1]
 37c:	mov	w0, w10
 380:	ret
 384:	nop

0000000000000388 <gomp_iter_guided_next>:
 388:	adrp	x2, 0 <gomp_tls_data>
 38c:	ldr	x2, [x2]
 390:	mrs	x3, tpidr_el0
 394:	mov	x6, #0x1                   	// #1
 398:	add	x2, x3, x2
 39c:	ldp	x3, x2, [x2, #16]
 3a0:	cbz	x3, 3a8 <gomp_iter_guided_next+0x20>
 3a4:	ldr	w6, [x3]
 3a8:	add	x5, x2, #0x48
 3ac:	ldr	x3, [x5]
 3b0:	ldp	x8, x7, [x2, #8]
 3b4:	sub	x10, x6, #0x1
 3b8:	ldr	x9, [x2, #24]
 3bc:	sub	x4, x7, x3
 3c0:	cmp	x3, x7
 3c4:	b.eq	430 <gomp_iter_guided_next+0xa8>  // b.none
 3c8:	sdiv	x4, x4, x9
 3cc:	add	x2, x10, x4
 3d0:	udiv	x2, x2, x6
 3d4:	cmp	x8, x2
 3d8:	csel	x2, x8, x2, cs  // cs = hs, nlast
 3dc:	cmp	x2, x4
 3e0:	b.hi	41c <gomp_iter_guided_next+0x94>  // b.pmore
 3e4:	madd	x2, x9, x2, x3
 3e8:	mov	x11, x2
 3ec:	ldxr	x4, [x5]
 3f0:	cmp	x4, x3
 3f4:	b.ne	400 <gomp_iter_guided_next+0x78>  // b.any
 3f8:	stlxr	w12, x2, [x5]
 3fc:	cbnz	w12, 3ec <gomp_iter_guided_next+0x64>
 400:	dmb	ish
 404:	cmp	x3, x4
 408:	b.ne	428 <gomp_iter_guided_next+0xa0>  // b.any
 40c:	str	x3, [x0]
 410:	mov	w0, #0x1                   	// #1
 414:	str	x11, [x1]
 418:	ret
 41c:	mov	x2, x7
 420:	mov	x11, x7
 424:	b	3ec <gomp_iter_guided_next+0x64>
 428:	mov	x3, x4
 42c:	b	3bc <gomp_iter_guided_next+0x34>
 430:	mov	w0, #0x0                   	// #0
 434:	ret

iter_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_ull_static_next>:
   0:	adrp	x5, 0 <gomp_tls_data>
   4:	ldr	x5, [x5]
   8:	mrs	x4, tpidr_el0
   c:	mov	x9, x0
  10:	add	x2, x4, x5
  14:	ldp	x7, x3, [x2, #16]
  18:	ldr	x6, [x2, #72]
  1c:	cbz	x7, 118 <gomp_iter_ull_static_next+0x118>
  20:	ldr	w2, [x7]
  24:	cmn	x6, #0x1
  28:	mov	w0, #0xffffffff            	// #-1
  2c:	b.eq	a8 <gomp_iter_ull_static_next+0xa8>  // b.none
  30:	cmp	x2, #0x1
  34:	b.eq	124 <gomp_iter_ull_static_next+0x124>  // b.none
  38:	ldr	x8, [x3, #8]
  3c:	cbz	x8, ac <gomp_iter_ull_static_next+0xac>
  40:	ldp	x7, x10, [x3, #16]
  44:	ldr	w12, [x3, #4]
  48:	ldr	x11, [x3, #72]
  4c:	add	x0, x10, x7
  50:	cbnz	w12, 1a0 <gomp_iter_ull_static_next+0x1a0>
  54:	mvn	x3, x11
  58:	add	x3, x3, x0
  5c:	udiv	x3, x3, x10
  60:	add	x4, x4, x5
  64:	mov	w0, #0x1                   	// #1
  68:	ldr	w5, [x4, #40]
  6c:	madd	x2, x2, x6, x5
  70:	mul	x2, x2, x8
  74:	cmp	x3, x2
  78:	b.ls	a8 <gomp_iter_ull_static_next+0xa8>  // b.plast
  7c:	add	x8, x8, x2
  80:	madd	x2, x2, x10, x11
  84:	cmp	x3, x8
  88:	str	x2, [x9]
  8c:	csel	x0, x3, x8, ls  // ls = plast
  90:	madd	x10, x0, x10, x11
  94:	str	x10, [x1]
  98:	b.ls	17c <gomp_iter_ull_static_next+0x17c>  // b.plast
  9c:	add	x6, x6, #0x1
  a0:	mov	w0, #0x0                   	// #0
  a4:	str	x6, [x4, #72]
  a8:	ret
  ac:	mov	w0, #0x1                   	// #1
  b0:	cbnz	x6, a8 <gomp_iter_ull_static_next+0xa8>
  b4:	ldp	x0, x7, [x3, #16]
  b8:	ldr	w10, [x3, #4]
  bc:	ldr	x8, [x3, #72]
  c0:	add	x6, x7, x0
  c4:	cbnz	w10, 18c <gomp_iter_ull_static_next+0x18c>
  c8:	mvn	x3, x8
  cc:	add	x3, x3, x6
  d0:	udiv	x3, x3, x7
  d4:	add	x6, x4, x5
  d8:	udiv	x0, x3, x2
  dc:	ldr	w6, [x6, #40]
  e0:	msub	x2, x0, x2, x3
  e4:	cmp	x6, x2
  e8:	b.cs	f4 <gomp_iter_ull_static_next+0xf4>  // b.hs, b.nlast
  ec:	add	x0, x0, #0x1
  f0:	mov	x2, #0x0                   	// #0
  f4:	madd	x2, x0, x6, x2
  f8:	add	x0, x0, x2
  fc:	cmp	x2, x0
 100:	b.cc	150 <gomp_iter_ull_static_next+0x150>  // b.lo, b.ul, b.last
 104:	add	x4, x4, x5
 108:	mov	x1, #0x1                   	// #1
 10c:	mov	w0, w1
 110:	str	x1, [x4, #72]
 114:	ret
 118:	cmn	x6, #0x1
 11c:	mov	w0, #0xffffffff            	// #-1
 120:	b.eq	a8 <gomp_iter_ull_static_next+0xa8>  // b.none
 124:	ldr	x0, [x3, #72]
 128:	str	x0, [x9]
 12c:	add	x4, x4, x5
 130:	mov	x2, #0xffffffffffffffff    	// #-1
 134:	ldr	x0, [x3, #16]
 138:	str	x0, [x1]
 13c:	ldr	x1, [x3, #72]
 140:	str	x2, [x4, #72]
 144:	cmp	x1, x0
 148:	cset	w0, eq  // eq = none
 14c:	ret
 150:	madd	x2, x7, x2, x8
 154:	add	x4, x4, x5
 158:	madd	x7, x7, x0, x8
 15c:	str	x2, [x9]
 160:	cmp	x3, x0
 164:	str	x7, [x1]
 168:	mov	w0, #0x0                   	// #0
 16c:	mov	x1, #0x1                   	// #1
 170:	cneg	x1, x1, eq  // eq = none
 174:	str	x1, [x4, #72]
 178:	ret
 17c:	mov	x1, #0xffffffffffffffff    	// #-1
 180:	mov	w0, #0x0                   	// #0
 184:	str	x1, [x4, #72]
 188:	ret
 18c:	sub	x0, x8, #0x1
 190:	neg	x3, x7
 194:	sub	x0, x0, x6
 198:	udiv	x3, x0, x3
 19c:	b	d4 <gomp_iter_ull_static_next+0xd4>
 1a0:	sub	x7, x11, #0x1
 1a4:	neg	x3, x10
 1a8:	sub	x7, x7, x0
 1ac:	udiv	x3, x7, x3
 1b0:	b	60 <gomp_iter_ull_static_next+0x60>
 1b4:	nop

00000000000001b8 <gomp_iter_ull_dynamic_next_locked>:
 1b8:	adrp	x3, 0 <gomp_tls_data>
 1bc:	ldr	x3, [x3]
 1c0:	mrs	x2, tpidr_el0
 1c4:	add	x2, x2, x3
 1c8:	ldr	x2, [x2, #24]
 1cc:	ldr	x3, [x2, #16]
 1d0:	ldr	x4, [x2, #72]
 1d4:	cmp	x3, x4
 1d8:	b.eq	20c <gomp_iter_ull_dynamic_next_locked+0x54>  // b.none
 1dc:	ldr	x6, [x2, #8]
 1e0:	sub	x3, x3, x4
 1e4:	ldr	w7, [x2, #4]
 1e8:	cmp	x6, x3
 1ec:	csel	x5, x6, x3, ls  // ls = plast
 1f0:	tbnz	w7, #1, 214 <gomp_iter_ull_dynamic_next_locked+0x5c>
 1f4:	add	x3, x5, x4
 1f8:	str	x3, [x2, #72]
 1fc:	str	x4, [x0]
 200:	mov	w0, #0x1                   	// #1
 204:	str	x3, [x1]
 208:	ret
 20c:	mov	w0, #0x0                   	// #0
 210:	ret
 214:	cmp	x6, x3
 218:	csel	x5, x6, x3, cs  // cs = hs, nlast
 21c:	b	1f4 <gomp_iter_ull_dynamic_next_locked+0x3c>

0000000000000220 <gomp_iter_ull_dynamic_next>:
 220:	adrp	x3, 0 <gomp_tls_data>
 224:	ldr	x3, [x3]
 228:	mrs	x2, tpidr_el0
 22c:	add	x2, x2, x3
 230:	ldr	x2, [x2, #24]
 234:	add	x4, x2, #0x48
 238:	ldr	w6, [x2, #4]
 23c:	ldp	x3, x5, [x2, #8]
 240:	tbz	w6, #0, 28c <gomp_iter_ull_dynamic_next+0x6c>
 244:	ldxr	x6, [x4]
 248:	add	x7, x6, x3
 24c:	stlxr	w8, x7, [x4]
 250:	cbnz	w8, 244 <gomp_iter_ull_dynamic_next+0x24>
 254:	dmb	ish
 258:	ldr	w2, [x2, #4]
 25c:	tbnz	w2, #1, 2e0 <gomp_iter_ull_dynamic_next+0xc0>
 260:	cmp	x5, x6
 264:	b.hi	270 <gomp_iter_ull_dynamic_next+0x50>  // b.pmore
 268:	mov	w0, #0x0                   	// #0
 26c:	ret
 270:	add	x3, x3, x6
 274:	str	x6, [x0]
 278:	cmp	x5, x3
 27c:	mov	w0, #0x1                   	// #1
 280:	csel	x3, x5, x3, ls  // ls = plast
 284:	str	x3, [x1]
 288:	ret
 28c:	ldr	x6, [x4]
 290:	cmp	x6, x5
 294:	sub	x7, x5, x6
 298:	b.eq	268 <gomp_iter_ull_dynamic_next+0x48>  // b.none
 29c:	ldr	w8, [x2, #4]
 2a0:	tbnz	w8, #1, 30c <gomp_iter_ull_dynamic_next+0xec>
 2a4:	cmp	x3, x7
 2a8:	csel	x3, x3, x7, ls  // ls = plast
 2ac:	add	x7, x6, x3
 2b0:	ldxr	x8, [x4]
 2b4:	cmp	x8, x6
 2b8:	b.ne	2c4 <gomp_iter_ull_dynamic_next+0xa4>  // b.any
 2bc:	stlxr	w9, x7, [x4]
 2c0:	cbnz	w9, 2b0 <gomp_iter_ull_dynamic_next+0x90>
 2c4:	dmb	ish
 2c8:	cmp	x6, x8
 2cc:	b.ne	304 <gomp_iter_ull_dynamic_next+0xe4>  // b.any
 2d0:	str	x6, [x0]
 2d4:	mov	w0, #0x1                   	// #1
 2d8:	str	x7, [x1]
 2dc:	ret
 2e0:	cmp	x5, x6
 2e4:	b.cs	268 <gomp_iter_ull_dynamic_next+0x48>  // b.hs, b.nlast
 2e8:	add	x2, x3, x6
 2ec:	str	x6, [x0]
 2f0:	cmp	x5, x2
 2f4:	mov	w0, #0x1                   	// #1
 2f8:	csel	x3, x5, x2, cs  // cs = hs, nlast
 2fc:	str	x3, [x1]
 300:	ret
 304:	mov	x6, x8
 308:	b	290 <gomp_iter_ull_dynamic_next+0x70>
 30c:	cmp	x3, x7
 310:	csel	x3, x3, x7, cs  // cs = hs, nlast
 314:	b	2ac <gomp_iter_ull_dynamic_next+0x8c>

0000000000000318 <gomp_iter_ull_guided_next_locked>:
 318:	sub	sp, sp, #0x10
 31c:	adrp	x3, 0 <gomp_tls_data>
 320:	ldr	x3, [x3]
 324:	mrs	x2, tpidr_el0
 328:	mov	x8, #0x1                   	// #1
 32c:	str	x1, [sp, #8]
 330:	add	x1, x2, x3
 334:	ldr	x7, [sp, #8]
 338:	ldp	x3, x2, [x1, #16]
 33c:	cbz	x3, 344 <gomp_iter_ull_guided_next_locked+0x2c>
 340:	ldr	w8, [x3]
 344:	ldr	x3, [x2, #16]
 348:	mov	w9, #0x0                   	// #0
 34c:	ldr	x5, [x2, #72]
 350:	cmp	x5, x3
 354:	b.eq	3a0 <gomp_iter_ull_guided_next_locked+0x88>  // b.none
 358:	ldr	w1, [x2, #4]
 35c:	ldr	x10, [x2, #24]
 360:	cbnz	w1, 3ac <gomp_iter_ull_guided_next_locked+0x94>
 364:	sub	x6, x3, x5
 368:	udiv	x6, x6, x10
 36c:	sub	x4, x8, #0x1
 370:	mov	w9, #0x1                   	// #1
 374:	add	x4, x4, x6
 378:	ldr	x1, [x2, #8]
 37c:	udiv	x4, x4, x8
 380:	cmp	x1, x4
 384:	csel	x1, x1, x4, cs  // cs = hs, nlast
 388:	cmp	x6, x1
 38c:	madd	x1, x1, x10, x5
 390:	csel	x3, x1, x3, cs  // cs = hs, nlast
 394:	str	x3, [x2, #72]
 398:	str	x5, [x0]
 39c:	str	x3, [x7]
 3a0:	mov	w0, w9
 3a4:	add	sp, sp, #0x10
 3a8:	ret
 3ac:	sub	x6, x5, x3
 3b0:	neg	x1, x10
 3b4:	udiv	x6, x6, x1
 3b8:	b	36c <gomp_iter_ull_guided_next_locked+0x54>
 3bc:	nop

00000000000003c0 <gomp_iter_ull_guided_next>:
 3c0:	adrp	x2, 0 <gomp_tls_data>
 3c4:	ldr	x2, [x2]
 3c8:	mrs	x3, tpidr_el0
 3cc:	mov	x9, #0x1                   	// #1
 3d0:	add	x2, x3, x2
 3d4:	ldp	x3, x4, [x2, #16]
 3d8:	cbz	x3, 3e0 <gomp_iter_ull_guided_next+0x20>
 3dc:	ldr	w9, [x3]
 3e0:	add	x7, x4, #0x48
 3e4:	ldr	x3, [x7]
 3e8:	ldp	x10, x6, [x4, #8]
 3ec:	sub	x11, x9, #0x1
 3f0:	ldr	x8, [x4, #24]
 3f4:	neg	x12, x8
 3f8:	sub	x5, x6, x3
 3fc:	cmp	x3, x6
 400:	b.eq	470 <gomp_iter_ull_guided_next+0xb0>  // b.none
 404:	ldr	w2, [x4, #4]
 408:	cbnz	w2, 45c <gomp_iter_ull_guided_next+0x9c>
 40c:	udiv	x5, x5, x8
 410:	add	x2, x11, x5
 414:	udiv	x2, x2, x9
 418:	cmp	x10, x2
 41c:	csel	x2, x10, x2, cs  // cs = hs, nlast
 420:	cmp	x5, x2
 424:	madd	x2, x2, x8, x3
 428:	csel	x2, x2, x6, cs  // cs = hs, nlast
 42c:	ldxr	x5, [x7]
 430:	cmp	x5, x3
 434:	b.ne	440 <gomp_iter_ull_guided_next+0x80>  // b.any
 438:	stlxr	w13, x2, [x7]
 43c:	cbnz	w13, 42c <gomp_iter_ull_guided_next+0x6c>
 440:	dmb	ish
 444:	cmp	x3, x5
 448:	b.ne	468 <gomp_iter_ull_guided_next+0xa8>  // b.any
 44c:	str	x3, [x0]
 450:	mov	w0, #0x1                   	// #1
 454:	str	x2, [x1]
 458:	ret
 45c:	sub	x5, x3, x6
 460:	udiv	x5, x5, x12
 464:	b	410 <gomp_iter_ull_guided_next+0x50>
 468:	mov	x3, x5
 46c:	b	3f8 <gomp_iter_ull_guided_next+0x38>
 470:	mov	w0, #0x0                   	// #0
 474:	ret

loop.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_adjust_sched>:
       0:	tst	x0, #0x7ffffffc
       4:	and	x0, x0, #0x7fffffff
       8:	b.ne	6c <gomp_adjust_sched+0x6c>  // b.any
       c:	cbnz	x0, 80 <gomp_adjust_sched+0x80>
      10:	adrp	x3, 0 <gomp_tls_data>
      14:	ldr	x3, [x3]
      18:	mrs	x0, tpidr_el0
      1c:	adrp	x2, 0 <gomp_global_icv>
      20:	add	x2, x2, #0x0
      24:	add	x0, x0, x3
      28:	ldr	x0, [x0, #80]
      2c:	cmp	x0, #0x0
      30:	add	x0, x0, #0x90
      34:	csel	x2, x2, x0, eq  // eq = none
      38:	ldr	w0, [x2, #8]
      3c:	tst	w0, #0x7ffffffc
      40:	and	w0, w0, #0x7fffffff
      44:	b.ne	58 <gomp_adjust_sched+0x58>  // b.any
      48:	cbz	w0, 74 <gomp_adjust_sched+0x74>
      4c:	ldrsw	x2, [x2, #12]
      50:	str	x2, [x1]
      54:	ret
      58:	cmp	w0, #0x4
      5c:	b.ne	74 <gomp_adjust_sched+0x74>  // b.any
      60:	mov	x0, #0x1                   	// #1
      64:	str	xzr, [x1]
      68:	ret
      6c:	cmp	x0, #0x4
      70:	b.eq	10 <gomp_adjust_sched+0x10>  // b.none
      74:	stp	x29, x30, [sp, #-16]!
      78:	mov	x29, sp
      7c:	bl	0 <abort>
      80:	ret
      84:	nop

0000000000000088 <gomp_parallel_loop_start>:
      88:	stp	x29, x30, [sp, #-96]!
      8c:	mov	x29, sp
      90:	stp	x25, x26, [sp, #64]
      94:	mov	x25, x1
      98:	mov	w1, #0x0                   	// #0
      9c:	stp	x19, x20, [sp, #16]
      a0:	mov	x19, x4
      a4:	mov	x20, x7
      a8:	stp	x21, x22, [sp, #32]
      ac:	mov	x21, x3
      b0:	mov	x22, x5
      b4:	stp	x23, x24, [sp, #48]
      b8:	mov	w23, w6
      bc:	mov	x24, x0
      c0:	mov	w0, w2
      c4:	str	x27, [sp, #80]
      c8:	ldr	w27, [sp, #96]
      cc:	bl	0 <gomp_resolve_num_threads>
      d0:	mov	w26, w0
      d4:	bl	0 <gomp_new_team>
      d8:	add	x6, x0, #0x100
      dc:	str	w23, [x0, #256]
      e0:	cmp	x22, #0x0
      e4:	mov	x4, x0
      e8:	ccmp	x21, x19, #0x4, gt
      ec:	str	x20, [x6, #8]
      f0:	b.gt	140 <gomp_parallel_loop_start+0xb8>
      f4:	cmp	x22, #0x0
      f8:	str	x21, [x6, #72]
      fc:	ccmp	x21, x19, #0x0, lt  // lt = tstop
     100:	csel	x19, x19, x21, ge  // ge = tcont
     104:	stp	x19, x22, [x6, #16]
     108:	cmp	w23, #0x2
     10c:	b.eq	154 <gomp_parallel_loop_start+0xcc>  // b.none
     110:	mov	w3, w27
     114:	mov	w2, w26
     118:	mov	x1, x25
     11c:	mov	x0, x24
     120:	ldp	x19, x20, [sp, #16]
     124:	mov	x5, #0x0                   	// #0
     128:	ldp	x21, x22, [sp, #32]
     12c:	ldp	x23, x24, [sp, #48]
     130:	ldp	x25, x26, [sp, #64]
     134:	ldr	x27, [sp, #80]
     138:	ldp	x29, x30, [sp], #96
     13c:	b	0 <gomp_team_start>
     140:	mov	x19, x21
     144:	stp	x19, x22, [x6, #16]
     148:	cmp	w23, #0x2
     14c:	str	x21, [x6, #72]
     150:	b.ne	110 <gomp_parallel_loop_start+0x88>  // b.any
     154:	adrp	x0, 0 <gomp_tls_data>
     158:	ldr	x0, [x0]
     15c:	mrs	x5, tpidr_el0
     160:	mul	x20, x22, x20
     164:	mov	x1, #0x1                   	// #1
     168:	add	x5, x5, x0
     16c:	str	x20, [x6, #8]
     170:	ldr	x0, [x5, #16]
     174:	cbz	x0, 17c <gomp_parallel_loop_start+0xf4>
     178:	ldr	w1, [x0]
     17c:	cmp	x22, #0x0
     180:	b.le	1b0 <gomp_parallel_loop_start+0x128>
     184:	orr	x2, x20, x1
     188:	mov	x0, #0x7fffffff            	// #2147483647
     18c:	cmp	x2, x0
     190:	b.hi	1e4 <gomp_parallel_loop_start+0x15c>  // b.pmore
     194:	madd	x20, x1, x20, x20
     198:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
     19c:	sub	x20, x0, x20
     1a0:	cmp	x19, x20
     1a4:	cset	w0, lt  // lt = tstop
     1a8:	str	w0, [x6, #4]
     1ac:	b	110 <gomp_parallel_loop_start+0x88>
     1b0:	neg	x5, x20
     1b4:	mov	x0, #0x7fffffff            	// #2147483647
     1b8:	orr	x2, x1, x5
     1bc:	cmp	x2, x0
     1c0:	b.hi	1e4 <gomp_parallel_loop_start+0x15c>  // b.pmore
     1c4:	madd	x5, x1, x5, x5
     1c8:	mov	x0, #0x2                   	// #2
     1cc:	movk	x0, #0x8000, lsl #48
     1d0:	add	x5, x5, x0
     1d4:	cmp	x19, x5
     1d8:	cset	w0, ge  // ge = tcont
     1dc:	str	w0, [x6, #4]
     1e0:	b	110 <gomp_parallel_loop_start+0x88>
     1e4:	str	wzr, [x6, #4]
     1e8:	b	110 <gomp_parallel_loop_start+0x88>
     1ec:	nop

00000000000001f0 <GOMP_loop_static_start>:
     1f0:	stp	x29, x30, [sp, #-96]!
     1f4:	mov	x29, sp
     1f8:	stp	x25, x26, [sp, #64]
     1fc:	mov	x25, x3
     200:	adrp	x26, 0 <gomp_tls_data>
     204:	ldr	x26, [x26]
     208:	stp	x23, x24, [sp, #48]
     20c:	mrs	x24, tpidr_el0
     210:	mov	x23, x5
     214:	str	x27, [sp, #80]
     218:	add	x27, x24, x26
     21c:	stp	x19, x20, [sp, #16]
     220:	mov	x20, x0
     224:	mov	x19, x1
     228:	stp	x21, x22, [sp, #32]
     22c:	mov	x0, #0x0                   	// #0
     230:	mov	x21, x2
     234:	mov	x22, x4
     238:	str	xzr, [x27, #72]
     23c:	bl	0 <gomp_work_share_start>
     240:	tst	w0, #0xff
     244:	b.eq	2a0 <GOMP_loop_static_start+0xb0>  // b.none
     248:	ldr	x1, [x27, #24]
     24c:	mov	w0, #0x1                   	// #1
     250:	cmp	x21, #0x0
     254:	ccmp	x20, x19, #0x4, gt
     258:	str	w0, [x1]
     25c:	str	x25, [x1, #8]
     260:	b.gt	2d0 <GOMP_loop_static_start+0xe0>
     264:	cmp	x21, #0x0
     268:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     26c:	csel	x19, x19, x20, ge  // ge = tcont
     270:	add	x24, x24, x26
     274:	str	x20, [x1, #72]
     278:	ldr	x0, [x24, #32]
     27c:	stp	x19, x21, [x1, #16]
     280:	cbz	x0, 2a0 <GOMP_loop_static_start+0xb0>
     284:	add	x0, x0, #0x50
     288:	ldxr	x2, [x0]
     28c:	stlxr	w3, x1, [x0]
     290:	cbnz	w3, 288 <GOMP_loop_static_start+0x98>
     294:	cmp	x2, #0x1
     298:	b.eq	2a0 <GOMP_loop_static_start+0xb0>  // b.none
     29c:	bl	0 <gomp_ptrlock_set_slow>
     2a0:	mov	x1, x23
     2a4:	mov	x0, x22
     2a8:	bl	0 <gomp_iter_static_next>
     2ac:	cmp	w0, #0x0
     2b0:	cset	w0, eq  // eq = none
     2b4:	ldp	x19, x20, [sp, #16]
     2b8:	ldp	x21, x22, [sp, #32]
     2bc:	ldp	x23, x24, [sp, #48]
     2c0:	ldp	x25, x26, [sp, #64]
     2c4:	ldr	x27, [sp, #80]
     2c8:	ldp	x29, x30, [sp], #96
     2cc:	ret
     2d0:	mov	x19, x20
     2d4:	b	270 <GOMP_loop_static_start+0x80>

00000000000002d8 <GOMP_loop_dynamic_start>:
     2d8:	stp	x29, x30, [sp, #-64]!
     2dc:	mov	x29, sp
     2e0:	stp	x19, x20, [sp, #16]
     2e4:	mov	x19, x1
     2e8:	mov	x20, x2
     2ec:	stp	x21, x22, [sp, #32]
     2f0:	mov	x21, x0
     2f4:	mov	x22, x5
     2f8:	mov	x0, #0x0                   	// #0
     2fc:	stp	x23, x24, [sp, #48]
     300:	mov	x23, x3
     304:	mov	x24, x4
     308:	bl	0 <gomp_work_share_start>
     30c:	tst	w0, #0xff
     310:	b.ne	330 <GOMP_loop_dynamic_start+0x58>  // b.any
     314:	mov	x1, x22
     318:	mov	x0, x24
     31c:	ldp	x19, x20, [sp, #16]
     320:	ldp	x21, x22, [sp, #32]
     324:	ldp	x23, x24, [sp, #48]
     328:	ldp	x29, x30, [sp], #64
     32c:	b	0 <gomp_iter_dynamic_next>
     330:	adrp	x5, 0 <gomp_tls_data>
     334:	ldr	x5, [x5]
     338:	mrs	x3, tpidr_el0
     33c:	mov	w4, #0x2                   	// #2
     340:	cmp	x20, #0x0
     344:	add	x2, x3, x5
     348:	mul	x0, x20, x23
     34c:	ccmp	x21, x19, #0x4, gt
     350:	ldr	x1, [x2, #24]
     354:	ldr	x2, [x2, #16]
     358:	str	w4, [x1]
     35c:	str	x23, [x1, #8]
     360:	b.le	3f4 <GOMP_loop_dynamic_start+0x11c>
     364:	stp	x0, x21, [x1, #8]
     368:	mov	x19, x21
     36c:	mov	x4, #0x1                   	// #1
     370:	str	x20, [x1, #24]
     374:	str	x21, [x1, #72]
     378:	cbz	x2, 388 <GOMP_loop_dynamic_start+0xb0>
     37c:	ldr	w4, [x2]
     380:	cmp	x20, #0x0
     384:	b.le	418 <GOMP_loop_dynamic_start+0x140>
     388:	orr	x6, x0, x4
     38c:	mov	x2, #0x7fffffff            	// #2147483647
     390:	cmp	x6, x2
     394:	b.hi	44c <GOMP_loop_dynamic_start+0x174>  // b.pmore
     398:	madd	x0, x4, x0, x0
     39c:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     3a0:	sub	x0, x2, x0
     3a4:	cmp	x0, x19
     3a8:	cset	w0, gt
     3ac:	str	w0, [x1, #4]
     3b0:	add	x3, x3, x5
     3b4:	ldr	x0, [x3, #32]
     3b8:	cbz	x0, 314 <GOMP_loop_dynamic_start+0x3c>
     3bc:	add	x0, x0, #0x50
     3c0:	ldxr	x2, [x0]
     3c4:	stlxr	w3, x1, [x0]
     3c8:	cbnz	w3, 3c0 <GOMP_loop_dynamic_start+0xe8>
     3cc:	cmp	x2, #0x1
     3d0:	b.eq	314 <GOMP_loop_dynamic_start+0x3c>  // b.none
     3d4:	bl	0 <gomp_ptrlock_set_slow>
     3d8:	mov	x1, x22
     3dc:	mov	x0, x24
     3e0:	ldp	x19, x20, [sp, #16]
     3e4:	ldp	x21, x22, [sp, #32]
     3e8:	ldp	x23, x24, [sp, #48]
     3ec:	ldp	x29, x30, [sp], #64
     3f0:	b	0 <gomp_iter_dynamic_next>
     3f4:	cmp	x20, #0x0
     3f8:	str	x20, [x1, #24]
     3fc:	ccmp	x21, x19, #0x0, lt  // lt = tstop
     400:	str	x21, [x1, #72]
     404:	csel	x19, x19, x21, ge  // ge = tcont
     408:	stp	x0, x19, [x1, #8]
     40c:	mov	x4, #0x1                   	// #1
     410:	cbnz	x2, 37c <GOMP_loop_dynamic_start+0xa4>
     414:	b	380 <GOMP_loop_dynamic_start+0xa8>
     418:	neg	x2, x0
     41c:	mov	x0, #0x7fffffff            	// #2147483647
     420:	orr	x6, x4, x2
     424:	cmp	x6, x0
     428:	b.hi	44c <GOMP_loop_dynamic_start+0x174>  // b.pmore
     42c:	madd	x0, x4, x2, x2
     430:	mov	x2, #0x2                   	// #2
     434:	movk	x2, #0x8000, lsl #48
     438:	add	x0, x0, x2
     43c:	cmp	x0, x19
     440:	cset	w0, le
     444:	str	w0, [x1, #4]
     448:	b	3b0 <GOMP_loop_dynamic_start+0xd8>
     44c:	str	wzr, [x1, #4]
     450:	b	3b0 <GOMP_loop_dynamic_start+0xd8>
     454:	nop

0000000000000458 <GOMP_loop_guided_start>:
     458:	stp	x29, x30, [sp, #-64]!
     45c:	mov	x29, sp
     460:	stp	x19, x20, [sp, #16]
     464:	mov	x20, x0
     468:	mov	x19, x1
     46c:	mov	x0, #0x0                   	// #0
     470:	stp	x21, x22, [sp, #32]
     474:	mov	x21, x2
     478:	mov	x22, x4
     47c:	stp	x23, x24, [sp, #48]
     480:	mov	x24, x3
     484:	mov	x23, x5
     488:	bl	0 <gomp_work_share_start>
     48c:	tst	w0, #0xff
     490:	b.eq	4fc <GOMP_loop_guided_start+0xa4>  // b.none
     494:	adrp	x2, 0 <gomp_tls_data>
     498:	ldr	x2, [x2]
     49c:	mrs	x0, tpidr_el0
     4a0:	mov	w3, #0x3                   	// #3
     4a4:	cmp	x21, #0x0
     4a8:	add	x1, x0, x2
     4ac:	ccmp	x20, x19, #0x4, gt
     4b0:	ldr	x1, [x1, #24]
     4b4:	str	w3, [x1]
     4b8:	str	x24, [x1, #8]
     4bc:	b.gt	518 <GOMP_loop_guided_start+0xc0>
     4c0:	cmp	x21, #0x0
     4c4:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     4c8:	csel	x19, x19, x20, ge  // ge = tcont
     4cc:	add	x0, x0, x2
     4d0:	str	x20, [x1, #72]
     4d4:	ldr	x0, [x0, #32]
     4d8:	stp	x19, x21, [x1, #16]
     4dc:	cbz	x0, 4fc <GOMP_loop_guided_start+0xa4>
     4e0:	add	x0, x0, #0x50
     4e4:	ldxr	x2, [x0]
     4e8:	stlxr	w3, x1, [x0]
     4ec:	cbnz	w3, 4e4 <GOMP_loop_guided_start+0x8c>
     4f0:	cmp	x2, #0x1
     4f4:	b.eq	4fc <GOMP_loop_guided_start+0xa4>  // b.none
     4f8:	bl	0 <gomp_ptrlock_set_slow>
     4fc:	mov	x1, x23
     500:	mov	x0, x22
     504:	ldp	x19, x20, [sp, #16]
     508:	ldp	x21, x22, [sp, #32]
     50c:	ldp	x23, x24, [sp, #48]
     510:	ldp	x29, x30, [sp], #64
     514:	b	0 <gomp_iter_guided_next>
     518:	mov	x19, x20
     51c:	b	4cc <GOMP_loop_guided_start+0x74>

0000000000000520 <GOMP_loop_maybe_nonmonotonic_runtime_start>:
     520:	adrp	x5, 0 <gomp_tls_data>
     524:	ldr	x5, [x5]
     528:	mrs	x7, tpidr_el0
     52c:	adrp	x6, 0 <gomp_global_icv>
     530:	add	x6, x6, #0x0
     534:	add	x7, x7, x5
     538:	mov	x8, x3
     53c:	mov	x5, x4
     540:	ldr	x7, [x7, #80]
     544:	cmp	x7, #0x0
     548:	add	x7, x7, #0x90
     54c:	csel	x6, x6, x7, eq  // eq = none
     550:	ldr	w3, [x6, #8]
     554:	and	w7, w3, #0x7fffffff
     558:	cmp	w7, #0x3
     55c:	b.eq	5a4 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x84>  // b.none
     560:	tst	w3, #0x7ffffffc
     564:	b.ne	57c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x5c>  // b.any
     568:	cmp	w7, #0x1
     56c:	b.ne	590 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x70>  // b.any
     570:	ldrsw	x3, [x6, #12]
     574:	mov	x4, x8
     578:	b	1f0 <GOMP_loop_static_start>
     57c:	cmp	w7, #0x4
     580:	b.ne	5b0 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x90>  // b.any
     584:	mov	x4, x8
     588:	mov	x3, #0x0                   	// #0
     58c:	b	1f0 <GOMP_loop_static_start>
     590:	cmp	w7, #0x2
     594:	b.ne	5b0 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x90>  // b.any
     598:	ldrsw	x3, [x6, #12]
     59c:	mov	x4, x8
     5a0:	b	2d8 <GOMP_loop_dynamic_start>
     5a4:	ldrsw	x3, [x6, #12]
     5a8:	mov	x4, x8
     5ac:	b	458 <GOMP_loop_guided_start>
     5b0:	stp	x29, x30, [sp, #-16]!
     5b4:	mov	x29, sp
     5b8:	bl	0 <abort>
     5bc:	nop

00000000000005c0 <GOMP_loop_ordered_static_start>:
     5c0:	stp	x29, x30, [sp, #-96]!
     5c4:	mov	x29, sp
     5c8:	stp	x25, x26, [sp, #64]
     5cc:	mov	x26, x3
     5d0:	adrp	x25, 0 <gomp_tls_data>
     5d4:	ldr	x25, [x25]
     5d8:	stp	x23, x24, [sp, #48]
     5dc:	mrs	x24, tpidr_el0
     5e0:	mov	x23, x5
     5e4:	str	x27, [sp, #80]
     5e8:	add	x27, x24, x25
     5ec:	stp	x19, x20, [sp, #16]
     5f0:	mov	x20, x0
     5f4:	mov	x19, x1
     5f8:	stp	x21, x22, [sp, #32]
     5fc:	mov	x0, #0x1                   	// #1
     600:	mov	x21, x2
     604:	mov	x22, x4
     608:	str	xzr, [x27, #72]
     60c:	bl	0 <gomp_work_share_start>
     610:	tst	w0, #0xff
     614:	b.eq	678 <GOMP_loop_ordered_static_start+0xb8>  // b.none
     618:	ldr	x0, [x27, #24]
     61c:	mov	w1, #0x1                   	// #1
     620:	cmp	x21, #0x0
     624:	ccmp	x20, x19, #0x4, gt
     628:	str	w1, [x0]
     62c:	str	x26, [x0, #8]
     630:	b.gt	6a8 <GOMP_loop_ordered_static_start+0xe8>
     634:	cmp	x21, #0x0
     638:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     63c:	csel	x19, x19, x20, ge  // ge = tcont
     640:	add	x24, x24, x25
     644:	stp	x19, x21, [x0, #16]
     648:	str	x20, [x0, #72]
     64c:	bl	0 <gomp_ordered_static_init>
     650:	ldr	x0, [x24, #32]
     654:	cbz	x0, 678 <GOMP_loop_ordered_static_start+0xb8>
     658:	ldr	x2, [x24, #24]
     65c:	add	x0, x0, #0x50
     660:	ldxr	x1, [x0]
     664:	stlxr	w3, x2, [x0]
     668:	cbnz	w3, 660 <GOMP_loop_ordered_static_start+0xa0>
     66c:	cmp	x1, #0x1
     670:	b.eq	678 <GOMP_loop_ordered_static_start+0xb8>  // b.none
     674:	bl	0 <gomp_ptrlock_set_slow>
     678:	mov	x1, x23
     67c:	mov	x0, x22
     680:	bl	0 <gomp_iter_static_next>
     684:	cmp	w0, #0x0
     688:	cset	w0, eq  // eq = none
     68c:	ldp	x19, x20, [sp, #16]
     690:	ldp	x21, x22, [sp, #32]
     694:	ldp	x23, x24, [sp, #48]
     698:	ldp	x25, x26, [sp, #64]
     69c:	ldr	x27, [sp, #80]
     6a0:	ldp	x29, x30, [sp], #96
     6a4:	ret
     6a8:	mov	x19, x20
     6ac:	b	640 <GOMP_loop_ordered_static_start+0x80>

00000000000006b0 <GOMP_loop_ordered_dynamic_start>:
     6b0:	stp	x29, x30, [sp, #-80]!
     6b4:	mov	x29, sp
     6b8:	stp	x19, x20, [sp, #16]
     6bc:	mov	x20, x1
     6c0:	adrp	x19, 0 <gomp_tls_data>
     6c4:	ldr	x19, [x19]
     6c8:	stp	x21, x22, [sp, #32]
     6cc:	mov	x22, x0
     6d0:	mov	x21, x2
     6d4:	mov	x0, #0x1                   	// #1
     6d8:	stp	x23, x24, [sp, #48]
     6dc:	mov	x23, x3
     6e0:	mov	x24, x4
     6e4:	stp	x25, x26, [sp, #64]
     6e8:	mov	x25, x5
     6ec:	mrs	x26, tpidr_el0
     6f0:	bl	0 <gomp_work_share_start>
     6f4:	tst	w0, #0xff
     6f8:	b.ne	774 <GOMP_loop_ordered_dynamic_start+0xc4>  // b.any
     6fc:	add	x0, x26, x19
     700:	mov	w2, #0x1                   	// #1
     704:	ldr	x0, [x0, #24]
     708:	add	x0, x0, #0x40
     70c:	ldaxr	w1, [x0]
     710:	cbnz	w1, 71c <GOMP_loop_ordered_dynamic_start+0x6c>
     714:	stxr	w3, w2, [x0]
     718:	cbnz	w3, 70c <GOMP_loop_ordered_dynamic_start+0x5c>
     71c:	cmp	w1, #0x0
     720:	b.ne	8dc <GOMP_loop_ordered_dynamic_start+0x22c>  // b.any
     724:	mov	x1, x25
     728:	mov	x0, x24
     72c:	bl	0 <gomp_iter_dynamic_next_locked>
     730:	mov	w20, w0
     734:	tst	w0, #0xff
     738:	b.ne	850 <GOMP_loop_ordered_dynamic_start+0x1a0>  // b.any
     73c:	add	x19, x26, x19
     740:	ldr	x1, [x19, #24]
     744:	add	x1, x1, #0x40
     748:	ldxr	w0, [x1]
     74c:	stlxr	w2, wzr, [x1]
     750:	cbnz	w2, 748 <GOMP_loop_ordered_dynamic_start+0x98>
     754:	tbnz	w0, #31, 87c <GOMP_loop_ordered_dynamic_start+0x1cc>
     758:	mov	w0, w20
     75c:	ldp	x19, x20, [sp, #16]
     760:	ldp	x21, x22, [sp, #32]
     764:	ldp	x23, x24, [sp, #48]
     768:	ldp	x25, x26, [sp, #64]
     76c:	ldp	x29, x30, [sp], #80
     770:	ret
     774:	add	x2, x26, x19
     778:	mov	w3, #0x2                   	// #2
     77c:	cmp	x21, #0x0
     780:	mul	x1, x21, x23
     784:	ccmp	x22, x20, #0x4, gt
     788:	ldr	x0, [x2, #24]
     78c:	ldr	x2, [x2, #16]
     790:	str	w3, [x0]
     794:	str	x23, [x0, #8]
     798:	b.le	858 <GOMP_loop_ordered_dynamic_start+0x1a8>
     79c:	stp	x1, x22, [x0, #8]
     7a0:	mov	x20, x22
     7a4:	mov	x3, #0x1                   	// #1
     7a8:	str	x21, [x0, #24]
     7ac:	str	x22, [x0, #72]
     7b0:	cbz	x2, 7c0 <GOMP_loop_ordered_dynamic_start+0x110>
     7b4:	ldr	w3, [x2]
     7b8:	cmp	x21, #0x0
     7bc:	b.le	8a0 <GOMP_loop_ordered_dynamic_start+0x1f0>
     7c0:	orr	x4, x1, x3
     7c4:	mov	x2, #0x7fffffff            	// #2147483647
     7c8:	cmp	x4, x2
     7cc:	b.hi	8d4 <GOMP_loop_ordered_dynamic_start+0x224>  // b.pmore
     7d0:	madd	x1, x3, x1, x1
     7d4:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     7d8:	sub	x1, x2, x1
     7dc:	cmp	x1, x20
     7e0:	cset	w1, gt
     7e4:	str	w1, [x0, #4]
     7e8:	add	x0, x0, #0x40
     7ec:	mov	w2, #0x1                   	// #1
     7f0:	ldaxr	w1, [x0]
     7f4:	cbnz	w1, 800 <GOMP_loop_ordered_dynamic_start+0x150>
     7f8:	stxr	w3, w2, [x0]
     7fc:	cbnz	w3, 7f0 <GOMP_loop_ordered_dynamic_start+0x140>
     800:	cmp	w1, #0x0
     804:	b.ne	8e4 <GOMP_loop_ordered_dynamic_start+0x234>  // b.any
     808:	add	x1, x26, x19
     80c:	ldr	x0, [x1, #32]
     810:	cbz	x0, 724 <GOMP_loop_ordered_dynamic_start+0x74>
     814:	ldr	x2, [x1, #24]
     818:	add	x0, x0, #0x50
     81c:	ldxr	x1, [x0]
     820:	stlxr	w3, x2, [x0]
     824:	cbnz	w3, 81c <GOMP_loop_ordered_dynamic_start+0x16c>
     828:	cmp	x1, #0x1
     82c:	b.eq	724 <GOMP_loop_ordered_dynamic_start+0x74>  // b.none
     830:	bl	0 <gomp_ptrlock_set_slow>
     834:	mov	x1, x25
     838:	mov	x0, x24
     83c:	bl	0 <gomp_iter_dynamic_next_locked>
     840:	mov	w20, w0
     844:	tst	w0, #0xff
     848:	b.eq	73c <GOMP_loop_ordered_dynamic_start+0x8c>  // b.none
     84c:	nop
     850:	bl	0 <gomp_ordered_first>
     854:	b	73c <GOMP_loop_ordered_dynamic_start+0x8c>
     858:	cmp	x21, #0x0
     85c:	str	x21, [x0, #24]
     860:	ccmp	x22, x20, #0x0, lt  // lt = tstop
     864:	str	x22, [x0, #72]
     868:	csel	x20, x20, x22, ge  // ge = tcont
     86c:	stp	x1, x20, [x0, #8]
     870:	mov	x3, #0x1                   	// #1
     874:	cbnz	x2, 7b4 <GOMP_loop_ordered_dynamic_start+0x104>
     878:	b	7b8 <GOMP_loop_ordered_dynamic_start+0x108>
     87c:	mov	x0, x1
     880:	bl	0 <gomp_mutex_unlock_slow>
     884:	mov	w0, w20
     888:	ldp	x19, x20, [sp, #16]
     88c:	ldp	x21, x22, [sp, #32]
     890:	ldp	x23, x24, [sp, #48]
     894:	ldp	x25, x26, [sp, #64]
     898:	ldp	x29, x30, [sp], #80
     89c:	ret
     8a0:	neg	x2, x1
     8a4:	mov	x1, #0x7fffffff            	// #2147483647
     8a8:	orr	x4, x3, x2
     8ac:	cmp	x4, x1
     8b0:	b.hi	8d4 <GOMP_loop_ordered_dynamic_start+0x224>  // b.pmore
     8b4:	madd	x1, x3, x2, x2
     8b8:	mov	x2, #0x2                   	// #2
     8bc:	movk	x2, #0x8000, lsl #48
     8c0:	add	x1, x1, x2
     8c4:	cmp	x1, x20
     8c8:	cset	w1, le
     8cc:	str	w1, [x0, #4]
     8d0:	b	7e8 <GOMP_loop_ordered_dynamic_start+0x138>
     8d4:	str	wzr, [x0, #4]
     8d8:	b	7e8 <GOMP_loop_ordered_dynamic_start+0x138>
     8dc:	bl	0 <gomp_mutex_lock_slow>
     8e0:	b	724 <GOMP_loop_ordered_dynamic_start+0x74>
     8e4:	bl	0 <gomp_mutex_lock_slow>
     8e8:	b	808 <GOMP_loop_ordered_dynamic_start+0x158>
     8ec:	nop

00000000000008f0 <GOMP_loop_ordered_guided_start>:
     8f0:	stp	x29, x30, [sp, #-80]!
     8f4:	mov	x29, sp
     8f8:	stp	x19, x20, [sp, #16]
     8fc:	mov	x20, x1
     900:	mrs	x19, tpidr_el0
     904:	stp	x21, x22, [sp, #32]
     908:	mov	x21, x0
     90c:	mov	x22, x2
     910:	mov	x0, #0x1                   	// #1
     914:	stp	x23, x24, [sp, #48]
     918:	mov	x23, x4
     91c:	mov	x24, x5
     920:	stp	x25, x26, [sp, #64]
     924:	mov	x26, x3
     928:	adrp	x25, 0 <gomp_tls_data>
     92c:	ldr	x25, [x25]
     930:	bl	0 <gomp_work_share_start>
     934:	tst	w0, #0xff
     938:	b.eq	9dc <GOMP_loop_ordered_guided_start+0xec>  // b.none
     93c:	add	x1, x19, x25
     940:	mov	w0, #0x3                   	// #3
     944:	cmp	x22, #0x0
     948:	ccmp	x21, x20, #0x4, gt
     94c:	ldr	x1, [x1, #24]
     950:	str	w0, [x1]
     954:	str	x26, [x1, #8]
     958:	b.gt	a54 <GOMP_loop_ordered_guided_start+0x164>
     95c:	cmp	x22, #0x0
     960:	ccmp	x21, x20, #0x0, lt  // lt = tstop
     964:	csel	x20, x20, x21, ge  // ge = tcont
     968:	add	x0, x1, #0x40
     96c:	mov	w2, #0x1                   	// #1
     970:	stp	x20, x22, [x1, #16]
     974:	str	x21, [x1, #72]
     978:	ldaxr	w1, [x0]
     97c:	cbnz	w1, 988 <GOMP_loop_ordered_guided_start+0x98>
     980:	stxr	w3, w2, [x0]
     984:	cbnz	w3, 978 <GOMP_loop_ordered_guided_start+0x88>
     988:	cmp	w1, #0x0
     98c:	b.ne	a88 <GOMP_loop_ordered_guided_start+0x198>  // b.any
     990:	add	x1, x19, x25
     994:	ldr	x0, [x1, #32]
     998:	cbz	x0, a04 <GOMP_loop_ordered_guided_start+0x114>
     99c:	ldr	x2, [x1, #24]
     9a0:	add	x0, x0, #0x50
     9a4:	ldxr	x1, [x0]
     9a8:	stlxr	w3, x2, [x0]
     9ac:	cbnz	w3, 9a4 <GOMP_loop_ordered_guided_start+0xb4>
     9b0:	cmp	x1, #0x1
     9b4:	b.eq	a04 <GOMP_loop_ordered_guided_start+0x114>  // b.none
     9b8:	bl	0 <gomp_ptrlock_set_slow>
     9bc:	mov	x1, x24
     9c0:	mov	x0, x23
     9c4:	bl	0 <gomp_iter_guided_next_locked>
     9c8:	mov	w20, w0
     9cc:	tst	w0, #0xff
     9d0:	b.eq	a1c <GOMP_loop_ordered_guided_start+0x12c>  // b.none
     9d4:	bl	0 <gomp_ordered_first>
     9d8:	b	a1c <GOMP_loop_ordered_guided_start+0x12c>
     9dc:	add	x0, x19, x25
     9e0:	mov	w2, #0x1                   	// #1
     9e4:	ldr	x0, [x0, #24]
     9e8:	add	x0, x0, #0x40
     9ec:	ldaxr	w1, [x0]
     9f0:	cbnz	w1, 9fc <GOMP_loop_ordered_guided_start+0x10c>
     9f4:	stxr	w3, w2, [x0]
     9f8:	cbnz	w3, 9ec <GOMP_loop_ordered_guided_start+0xfc>
     9fc:	cmp	w1, #0x0
     a00:	b.ne	a80 <GOMP_loop_ordered_guided_start+0x190>  // b.any
     a04:	mov	x1, x24
     a08:	mov	x0, x23
     a0c:	bl	0 <gomp_iter_guided_next_locked>
     a10:	mov	w20, w0
     a14:	tst	w0, #0xff
     a18:	b.ne	9d4 <GOMP_loop_ordered_guided_start+0xe4>  // b.any
     a1c:	add	x19, x19, x25
     a20:	ldr	x1, [x19, #24]
     a24:	add	x1, x1, #0x40
     a28:	ldxr	w0, [x1]
     a2c:	stlxr	w2, wzr, [x1]
     a30:	cbnz	w2, a28 <GOMP_loop_ordered_guided_start+0x138>
     a34:	tbnz	w0, #31, a5c <GOMP_loop_ordered_guided_start+0x16c>
     a38:	mov	w0, w20
     a3c:	ldp	x19, x20, [sp, #16]
     a40:	ldp	x21, x22, [sp, #32]
     a44:	ldp	x23, x24, [sp, #48]
     a48:	ldp	x25, x26, [sp, #64]
     a4c:	ldp	x29, x30, [sp], #80
     a50:	ret
     a54:	mov	x20, x21
     a58:	b	968 <GOMP_loop_ordered_guided_start+0x78>
     a5c:	mov	x0, x1
     a60:	bl	0 <gomp_mutex_unlock_slow>
     a64:	mov	w0, w20
     a68:	ldp	x19, x20, [sp, #16]
     a6c:	ldp	x21, x22, [sp, #32]
     a70:	ldp	x23, x24, [sp, #48]
     a74:	ldp	x25, x26, [sp, #64]
     a78:	ldp	x29, x30, [sp], #80
     a7c:	ret
     a80:	bl	0 <gomp_mutex_lock_slow>
     a84:	b	a04 <GOMP_loop_ordered_guided_start+0x114>
     a88:	bl	0 <gomp_mutex_lock_slow>
     a8c:	b	990 <GOMP_loop_ordered_guided_start+0xa0>

0000000000000a90 <GOMP_loop_ordered_runtime_start>:
     a90:	adrp	x5, 0 <gomp_tls_data>
     a94:	ldr	x5, [x5]
     a98:	mrs	x7, tpidr_el0
     a9c:	adrp	x6, 0 <gomp_global_icv>
     aa0:	add	x6, x6, #0x0
     aa4:	add	x7, x7, x5
     aa8:	mov	x8, x3
     aac:	mov	x5, x4
     ab0:	ldr	x7, [x7, #80]
     ab4:	cmp	x7, #0x0
     ab8:	add	x7, x7, #0x90
     abc:	csel	x6, x6, x7, eq  // eq = none
     ac0:	ldr	w3, [x6, #8]
     ac4:	and	w7, w3, #0x7fffffff
     ac8:	cmp	w7, #0x3
     acc:	b.eq	b14 <GOMP_loop_ordered_runtime_start+0x84>  // b.none
     ad0:	tst	w3, #0x7ffffffc
     ad4:	b.ne	aec <GOMP_loop_ordered_runtime_start+0x5c>  // b.any
     ad8:	cmp	w7, #0x1
     adc:	b.ne	b00 <GOMP_loop_ordered_runtime_start+0x70>  // b.any
     ae0:	ldrsw	x3, [x6, #12]
     ae4:	mov	x4, x8
     ae8:	b	5c0 <GOMP_loop_ordered_static_start>
     aec:	cmp	w7, #0x4
     af0:	b.ne	b20 <GOMP_loop_ordered_runtime_start+0x90>  // b.any
     af4:	mov	x4, x8
     af8:	mov	x3, #0x0                   	// #0
     afc:	b	5c0 <GOMP_loop_ordered_static_start>
     b00:	cmp	w7, #0x2
     b04:	b.ne	b20 <GOMP_loop_ordered_runtime_start+0x90>  // b.any
     b08:	ldrsw	x3, [x6, #12]
     b0c:	mov	x4, x8
     b10:	b	6b0 <GOMP_loop_ordered_dynamic_start>
     b14:	ldrsw	x3, [x6, #12]
     b18:	mov	x4, x8
     b1c:	b	8f0 <GOMP_loop_ordered_guided_start>
     b20:	stp	x29, x30, [sp, #-16]!
     b24:	mov	x29, sp
     b28:	bl	0 <abort>
     b2c:	nop

0000000000000b30 <GOMP_loop_ordered_start>:
     b30:	stp	x29, x30, [sp, #-112]!
     b34:	mov	x29, sp
     b38:	stp	x19, x20, [sp, #16]
     b3c:	mov	x20, x3
     b40:	adrp	x19, 0 <gomp_tls_data>
     b44:	ldr	x19, [x19]
     b48:	stp	x21, x22, [sp, #32]
     b4c:	mrs	x21, tpidr_el0
     b50:	mov	x22, x7
     b54:	str	x4, [sp, #104]
     b58:	add	x4, x21, x19
     b5c:	stp	x23, x24, [sp, #48]
     b60:	mov	x24, x5
     b64:	stp	x25, x26, [sp, #64]
     b68:	mov	x26, x1
     b6c:	mov	x25, x6
     b70:	stp	x27, x28, [sp, #80]
     b74:	mov	x27, x0
     b78:	mov	x28, x2
     b7c:	str	xzr, [x4, #72]
     b80:	ldr	x23, [sp, #112]
     b84:	cbz	x7, b8c <GOMP_loop_ordered_start+0x5c>
     b88:	bl	0 <gomp_workshare_taskgroup_start>
     b8c:	mov	x0, #0x1                   	// #1
     b90:	cbz	x23, b9c <GOMP_loop_ordered_start+0x6c>
     b94:	ldr	x0, [x23]
     b98:	add	x0, x0, #0x1
     b9c:	bl	0 <gomp_work_share_start>
     ba0:	tst	w0, #0xff
     ba4:	b.ne	d0c <GOMP_loop_ordered_start+0x1dc>  // b.any
     ba8:	add	x20, x21, x19
     bac:	ldr	x1, [x20, #24]
     bb0:	cbz	x22, bc4 <GOMP_loop_ordered_start+0x94>
     bb4:	ldr	x1, [x1, #88]
     bb8:	mov	x0, x22
     bbc:	bl	0 <gomp_workshare_task_reduction_register>
     bc0:	ldr	x1, [x20, #24]
     bc4:	ldr	w20, [x1]
     bc8:	cmp	x20, #0x1
     bcc:	b.eq	c8c <GOMP_loop_ordered_start+0x15c>  // b.none
     bd0:	add	x0, x1, #0x40
     bd4:	mov	w2, #0x1                   	// #1
     bd8:	ldaxr	w1, [x0]
     bdc:	cbnz	w1, be8 <GOMP_loop_ordered_start+0xb8>
     be0:	stxr	w3, w2, [x0]
     be4:	cbnz	w3, bd8 <GOMP_loop_ordered_start+0xa8>
     be8:	cmp	w1, #0x0
     bec:	b.ne	e5c <GOMP_loop_ordered_start+0x32c>  // b.any
     bf0:	cbz	x23, c28 <GOMP_loop_ordered_start+0xf8>
     bf4:	add	x0, x21, x19
     bf8:	ldr	x1, [x0, #24]
     bfc:	add	x3, x21, x19
     c00:	ldr	x0, [x1, #32]
     c04:	mov	x2, #0x4                   	// #4
     c08:	ldr	x1, [x3, #16]
     c0c:	cbz	x1, c18 <GOMP_loop_ordered_start+0xe8>
     c10:	ldr	w2, [x1]
     c14:	lsl	x2, x2, #2
     c18:	add	x0, x0, x2
     c1c:	add	x0, x0, #0x7
     c20:	and	x0, x0, #0xfffffffffffffff8
     c24:	str	x0, [x23]
     c28:	cmp	x20, #0x2
     c2c:	b.eq	cf0 <GOMP_loop_ordered_start+0x1c0>  // b.none
     c30:	b.le	cd0 <GOMP_loop_ordered_start+0x1a0>
     c34:	cmp	x20, #0x3
     c38:	b.ne	cc4 <GOMP_loop_ordered_start+0x194>  // b.any
     c3c:	mov	x1, x25
     c40:	mov	x0, x24
     c44:	bl	0 <gomp_iter_guided_next_locked>
     c48:	and	w20, w0, #0xff
     c4c:	cbnz	w20, d04 <GOMP_loop_ordered_start+0x1d4>
     c50:	add	x19, x21, x19
     c54:	ldr	x0, [x19, #24]
     c58:	add	x0, x0, #0x40
     c5c:	ldxr	w1, [x0]
     c60:	stlxr	w2, wzr, [x0]
     c64:	cbnz	w2, c5c <GOMP_loop_ordered_start+0x12c>
     c68:	tbnz	w1, #31, e54 <GOMP_loop_ordered_start+0x324>
     c6c:	mov	w0, w20
     c70:	ldp	x19, x20, [sp, #16]
     c74:	ldp	x21, x22, [sp, #32]
     c78:	ldp	x23, x24, [sp, #48]
     c7c:	ldp	x25, x26, [sp, #64]
     c80:	ldp	x27, x28, [sp, #80]
     c84:	ldp	x29, x30, [sp], #112
     c88:	ret
     c8c:	cbnz	x23, bfc <GOMP_loop_ordered_start+0xcc>
     c90:	mov	x1, x25
     c94:	mov	x0, x24
     c98:	bl	0 <gomp_iter_static_next>
     c9c:	cmp	w0, #0x0
     ca0:	cset	w20, eq  // eq = none
     ca4:	mov	w0, w20
     ca8:	ldp	x19, x20, [sp, #16]
     cac:	ldp	x21, x22, [sp, #32]
     cb0:	ldp	x23, x24, [sp, #48]
     cb4:	ldp	x25, x26, [sp, #64]
     cb8:	ldp	x27, x28, [sp, #80]
     cbc:	ldp	x29, x30, [sp], #112
     cc0:	ret
     cc4:	cmp	x20, #0x4
     cc8:	b.eq	c90 <GOMP_loop_ordered_start+0x160>  // b.none
     ccc:	bl	0 <abort>
     cd0:	cmp	x20, #0x1
     cd4:	b.ne	ccc <GOMP_loop_ordered_start+0x19c>  // b.any
     cd8:	mov	x1, x25
     cdc:	mov	x0, x24
     ce0:	bl	0 <gomp_iter_static_next>
     ce4:	cmp	w0, #0x0
     ce8:	cset	w20, eq  // eq = none
     cec:	b	ca4 <GOMP_loop_ordered_start+0x174>
     cf0:	mov	x1, x25
     cf4:	mov	x0, x24
     cf8:	bl	0 <gomp_iter_dynamic_next_locked>
     cfc:	and	w20, w0, #0xff
     d00:	cbz	w20, c50 <GOMP_loop_ordered_start+0x120>
     d04:	bl	0 <gomp_ordered_first>
     d08:	b	c50 <GOMP_loop_ordered_start+0x120>
     d0c:	mov	x0, x20
     d10:	add	x1, sp, #0x68
     d14:	bl	0 <gomp_adjust_sched>
     d18:	mov	x20, x0
     d1c:	add	x2, x21, x19
     d20:	cmp	x28, #0x0
     d24:	ldr	x1, [sp, #104]
     d28:	ccmp	x27, x26, #0x4, gt
     d2c:	ldr	x0, [x2, #24]
     d30:	mov	w2, w20
     d34:	str	w20, [x0]
     d38:	str	x1, [x0, #8]
     d3c:	b.gt	de4 <GOMP_loop_ordered_start+0x2b4>
     d40:	cmp	x28, #0x0
     d44:	str	x27, [x0, #72]
     d48:	ccmp	x27, x26, #0x0, lt  // lt = tstop
     d4c:	csel	x26, x26, x27, ge  // ge = tcont
     d50:	stp	x26, x28, [x0, #16]
     d54:	cmp	w2, #0x2
     d58:	b.eq	df8 <GOMP_loop_ordered_start+0x2c8>  // b.none
     d5c:	cbz	x22, d84 <GOMP_loop_ordered_start+0x254>
     d60:	mov	x0, x22
     d64:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     d68:	add	x0, x21, x19
     d6c:	mov	w2, #0x1                   	// #1
     d70:	ldr	x1, [x0, #80]
     d74:	ldr	x0, [x0, #24]
     d78:	ldr	x1, [x1, #40]
     d7c:	strb	w2, [x1, #50]
     d80:	str	x22, [x0, #88]
     d84:	cmp	x20, #0x1
     d88:	b.eq	e4c <GOMP_loop_ordered_start+0x31c>  // b.none
     d8c:	add	x0, x21, x19
     d90:	ldr	x0, [x0, #24]
     d94:	add	x0, x0, #0x40
     d98:	mov	w2, #0x1                   	// #1
     d9c:	ldaxr	w1, [x0]
     da0:	cbnz	w1, dac <GOMP_loop_ordered_start+0x27c>
     da4:	stxr	w3, w2, [x0]
     da8:	cbnz	w3, d9c <GOMP_loop_ordered_start+0x26c>
     dac:	cmp	w1, #0x0
     db0:	b.ne	ea8 <GOMP_loop_ordered_start+0x378>  // b.any
     db4:	add	x1, x21, x19
     db8:	ldr	x0, [x1, #32]
     dbc:	cbz	x0, bf0 <GOMP_loop_ordered_start+0xc0>
     dc0:	ldr	x2, [x1, #24]
     dc4:	add	x0, x0, #0x50
     dc8:	ldxr	x1, [x0]
     dcc:	stlxr	w3, x2, [x0]
     dd0:	cbnz	w3, dc8 <GOMP_loop_ordered_start+0x298>
     dd4:	cmp	x1, #0x1
     dd8:	b.eq	bf0 <GOMP_loop_ordered_start+0xc0>  // b.none
     ddc:	bl	0 <gomp_ptrlock_set_slow>
     de0:	b	bf0 <GOMP_loop_ordered_start+0xc0>
     de4:	mov	x26, x27
     de8:	stp	x26, x28, [x0, #16]
     dec:	cmp	w2, #0x2
     df0:	str	x27, [x0, #72]
     df4:	b.ne	d5c <GOMP_loop_ordered_start+0x22c>  // b.any
     df8:	add	x2, x21, x19
     dfc:	mul	x1, x1, x28
     e00:	mov	x3, #0x1                   	// #1
     e04:	ldr	x2, [x2, #16]
     e08:	str	x1, [x0, #8]
     e0c:	cbz	x2, e14 <GOMP_loop_ordered_start+0x2e4>
     e10:	ldr	w3, [x2]
     e14:	cmp	x28, #0x0
     e18:	b.le	e70 <GOMP_loop_ordered_start+0x340>
     e1c:	orr	x4, x1, x3
     e20:	mov	x2, #0x7fffffff            	// #2147483647
     e24:	cmp	x4, x2
     e28:	b.hi	e64 <GOMP_loop_ordered_start+0x334>  // b.pmore
     e2c:	madd	x1, x3, x1, x1
     e30:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     e34:	sub	x1, x2, x1
     e38:	cmp	x26, x1
     e3c:	cset	w1, lt  // lt = tstop
     e40:	str	w1, [x0, #4]
     e44:	cbnz	x22, d60 <GOMP_loop_ordered_start+0x230>
     e48:	b	d94 <GOMP_loop_ordered_start+0x264>
     e4c:	bl	0 <gomp_ordered_static_init>
     e50:	b	db4 <GOMP_loop_ordered_start+0x284>
     e54:	bl	0 <gomp_mutex_unlock_slow>
     e58:	b	c6c <GOMP_loop_ordered_start+0x13c>
     e5c:	bl	0 <gomp_mutex_lock_slow>
     e60:	b	bf0 <GOMP_loop_ordered_start+0xc0>
     e64:	str	wzr, [x0, #4]
     e68:	cbnz	x22, d60 <GOMP_loop_ordered_start+0x230>
     e6c:	b	d94 <GOMP_loop_ordered_start+0x264>
     e70:	neg	x2, x1
     e74:	mov	x1, #0x7fffffff            	// #2147483647
     e78:	orr	x4, x3, x2
     e7c:	cmp	x4, x1
     e80:	b.hi	e64 <GOMP_loop_ordered_start+0x334>  // b.pmore
     e84:	madd	x1, x3, x2, x2
     e88:	mov	x2, #0x2                   	// #2
     e8c:	movk	x2, #0x8000, lsl #48
     e90:	add	x1, x1, x2
     e94:	cmp	x26, x1
     e98:	cset	w1, ge  // ge = tcont
     e9c:	str	w1, [x0, #4]
     ea0:	cbnz	x22, d60 <GOMP_loop_ordered_start+0x230>
     ea4:	b	d94 <GOMP_loop_ordered_start+0x264>
     ea8:	bl	0 <gomp_mutex_lock_slow>
     eac:	b	db4 <GOMP_loop_ordered_start+0x284>

0000000000000eb0 <GOMP_loop_doacross_static_start>:
     eb0:	stp	x29, x30, [sp, #-64]!
     eb4:	mrs	x5, tpidr_el0
     eb8:	mov	x29, sp
     ebc:	stp	x19, x20, [sp, #16]
     ec0:	mov	x20, x3
     ec4:	adrp	x19, 0 <gomp_tls_data>
     ec8:	ldr	x19, [x19]
     ecc:	stp	x21, x22, [sp, #32]
     ed0:	mov	x22, x1
     ed4:	add	x19, x5, x19
     ed8:	stp	x23, x24, [sp, #48]
     edc:	mov	x21, x4
     ee0:	mov	w23, w0
     ee4:	mov	x24, x2
     ee8:	mov	x0, #0x0                   	// #0
     eec:	str	xzr, [x19, #72]
     ef0:	bl	0 <gomp_work_share_start>
     ef4:	tst	w0, #0xff
     ef8:	b.ne	f24 <GOMP_loop_doacross_static_start+0x74>  // b.any
     efc:	mov	x1, x21
     f00:	mov	x0, x20
     f04:	bl	0 <gomp_iter_static_next>
     f08:	cmp	w0, #0x0
     f0c:	cset	w0, eq  // eq = none
     f10:	ldp	x19, x20, [sp, #16]
     f14:	ldp	x21, x22, [sp, #32]
     f18:	ldp	x23, x24, [sp, #48]
     f1c:	ldp	x29, x30, [sp], #64
     f20:	ret
     f24:	ldr	x0, [x22]
     f28:	mov	w2, #0x1                   	// #1
     f2c:	ldr	x4, [x19, #24]
     f30:	cmp	x0, #0x0
     f34:	csel	x5, x0, xzr, ge  // ge = tcont
     f38:	mov	x6, #0x1                   	// #1
     f3c:	mov	w0, w23
     f40:	mov	x1, x22
     f44:	str	w2, [x4]
     f48:	mov	x3, #0x0                   	// #0
     f4c:	stp	x24, x5, [x4, #8]
     f50:	mov	x2, x24
     f54:	str	x6, [x4, #24]
     f58:	str	xzr, [x4, #72]
     f5c:	bl	0 <gomp_doacross_init>
     f60:	ldr	x0, [x19, #32]
     f64:	cbz	x0, efc <GOMP_loop_doacross_static_start+0x4c>
     f68:	ldr	x2, [x19, #24]
     f6c:	add	x0, x0, #0x50
     f70:	ldxr	x1, [x0]
     f74:	stlxr	w3, x2, [x0]
     f78:	cbnz	w3, f70 <GOMP_loop_doacross_static_start+0xc0>
     f7c:	cmp	x1, #0x1
     f80:	b.eq	efc <GOMP_loop_doacross_static_start+0x4c>  // b.none
     f84:	bl	0 <gomp_ptrlock_set_slow>
     f88:	b	efc <GOMP_loop_doacross_static_start+0x4c>
     f8c:	nop

0000000000000f90 <GOMP_loop_doacross_dynamic_start>:
     f90:	stp	x29, x30, [sp, #-80]!
     f94:	mov	x29, sp
     f98:	stp	x19, x20, [sp, #16]
     f9c:	mov	x19, x2
     fa0:	mov	x20, x3
     fa4:	stp	x21, x22, [sp, #32]
     fa8:	mov	x22, x1
     fac:	mov	x21, x4
     fb0:	stp	x23, x24, [sp, #48]
     fb4:	mov	w23, w0
     fb8:	mov	x0, #0x0                   	// #0
     fbc:	bl	0 <gomp_work_share_start>
     fc0:	tst	w0, #0xff
     fc4:	b.ne	fe4 <GOMP_loop_doacross_dynamic_start+0x54>  // b.any
     fc8:	mov	x1, x21
     fcc:	mov	x0, x20
     fd0:	ldp	x19, x20, [sp, #16]
     fd4:	ldp	x21, x22, [sp, #32]
     fd8:	ldp	x23, x24, [sp, #48]
     fdc:	ldp	x29, x30, [sp], #80
     fe0:	b	0 <gomp_iter_dynamic_next>
     fe4:	ldr	x0, [x22]
     fe8:	str	x25, [sp, #64]
     fec:	adrp	x25, 0 <gomp_tls_data>
     ff0:	ldr	x25, [x25]
     ff4:	mrs	x24, tpidr_el0
     ff8:	cmp	x0, #0x0
     ffc:	mov	x3, #0x1                   	// #1
    1000:	add	x4, x24, x25
    1004:	csel	x0, x0, xzr, ge  // ge = tcont
    1008:	mov	w5, #0x2                   	// #2
    100c:	mov	x2, x3
    1010:	ldr	x1, [x4, #24]
    1014:	ldr	x4, [x4, #16]
    1018:	str	w5, [x1]
    101c:	stp	x19, x0, [x1, #8]
    1020:	str	x3, [x1, #24]
    1024:	str	xzr, [x1, #72]
    1028:	cbz	x4, 1030 <GOMP_loop_doacross_dynamic_start+0xa0>
    102c:	ldr	w2, [x4]
    1030:	orr	x4, x19, x2
    1034:	mov	x3, #0x7fffffff            	// #2147483647
    1038:	cmp	x4, x3
    103c:	b.hi	10d8 <GOMP_loop_doacross_dynamic_start+0x148>  // b.pmore
    1040:	madd	x2, x2, x19, x19
    1044:	mov	x3, #0x7fffffffffffffff    	// #9223372036854775807
    1048:	sub	x2, x3, x2
    104c:	cmp	x2, x0
    1050:	cset	w0, gt
    1054:	add	x24, x24, x25
    1058:	str	w0, [x1, #4]
    105c:	mov	x2, x19
    1060:	mov	w0, w23
    1064:	mov	x1, x22
    1068:	mov	x3, #0x0                   	// #0
    106c:	bl	0 <gomp_doacross_init>
    1070:	ldr	x0, [x24, #32]
    1074:	cbz	x0, 10b8 <GOMP_loop_doacross_dynamic_start+0x128>
    1078:	ldr	x2, [x24, #24]
    107c:	add	x0, x0, #0x50
    1080:	ldxr	x1, [x0]
    1084:	stlxr	w3, x2, [x0]
    1088:	cbnz	w3, 1080 <GOMP_loop_doacross_dynamic_start+0xf0>
    108c:	cmp	x1, #0x1
    1090:	b.eq	10b8 <GOMP_loop_doacross_dynamic_start+0x128>  // b.none
    1094:	bl	0 <gomp_ptrlock_set_slow>
    1098:	mov	x1, x21
    109c:	mov	x0, x20
    10a0:	ldp	x19, x20, [sp, #16]
    10a4:	ldp	x21, x22, [sp, #32]
    10a8:	ldp	x23, x24, [sp, #48]
    10ac:	ldr	x25, [sp, #64]
    10b0:	ldp	x29, x30, [sp], #80
    10b4:	b	0 <gomp_iter_dynamic_next>
    10b8:	mov	x1, x21
    10bc:	mov	x0, x20
    10c0:	ldp	x19, x20, [sp, #16]
    10c4:	ldp	x21, x22, [sp, #32]
    10c8:	ldp	x23, x24, [sp, #48]
    10cc:	ldr	x25, [sp, #64]
    10d0:	ldp	x29, x30, [sp], #80
    10d4:	b	0 <gomp_iter_dynamic_next>
    10d8:	mov	w0, #0x0                   	// #0
    10dc:	b	1054 <GOMP_loop_doacross_dynamic_start+0xc4>

00000000000010e0 <GOMP_loop_doacross_guided_start>:
    10e0:	stp	x29, x30, [sp, #-64]!
    10e4:	mov	x29, sp
    10e8:	stp	x19, x20, [sp, #16]
    10ec:	mov	x19, x3
    10f0:	mov	x20, x4
    10f4:	stp	x21, x22, [sp, #32]
    10f8:	mov	x21, x1
    10fc:	stp	x23, x24, [sp, #48]
    1100:	mov	w23, w0
    1104:	mov	x24, x2
    1108:	mov	x0, #0x0                   	// #0
    110c:	bl	0 <gomp_work_share_start>
    1110:	tst	w0, #0xff
    1114:	b.ne	1134 <GOMP_loop_doacross_guided_start+0x54>  // b.any
    1118:	mov	x1, x20
    111c:	mov	x0, x19
    1120:	ldp	x19, x20, [sp, #16]
    1124:	ldp	x21, x22, [sp, #32]
    1128:	ldp	x23, x24, [sp, #48]
    112c:	ldp	x29, x30, [sp], #64
    1130:	b	0 <gomp_iter_guided_next>
    1134:	adrp	x0, 0 <gomp_tls_data>
    1138:	ldr	x0, [x0]
    113c:	mrs	x22, tpidr_el0
    1140:	ldr	x1, [x21]
    1144:	add	x22, x22, x0
    1148:	mov	w7, #0x3                   	// #3
    114c:	mov	x6, #0x1                   	// #1
    1150:	cmp	x1, #0x0
    1154:	mov	w0, w23
    1158:	ldr	x4, [x22, #24]
    115c:	csel	x5, x1, xzr, ge  // ge = tcont
    1160:	mov	x2, x24
    1164:	mov	x1, x21
    1168:	mov	x3, #0x0                   	// #0
    116c:	str	w7, [x4]
    1170:	stp	x24, x5, [x4, #8]
    1174:	str	x6, [x4, #24]
    1178:	str	xzr, [x4, #72]
    117c:	bl	0 <gomp_doacross_init>
    1180:	ldr	x0, [x22, #32]
    1184:	cbz	x0, 1118 <GOMP_loop_doacross_guided_start+0x38>
    1188:	ldr	x2, [x22, #24]
    118c:	add	x0, x0, #0x50
    1190:	ldxr	x1, [x0]
    1194:	stlxr	w3, x2, [x0]
    1198:	cbnz	w3, 1190 <GOMP_loop_doacross_guided_start+0xb0>
    119c:	cmp	x1, #0x1
    11a0:	b.eq	1118 <GOMP_loop_doacross_guided_start+0x38>  // b.none
    11a4:	bl	0 <gomp_ptrlock_set_slow>
    11a8:	mov	x1, x20
    11ac:	mov	x0, x19
    11b0:	ldp	x19, x20, [sp, #16]
    11b4:	ldp	x21, x22, [sp, #32]
    11b8:	ldp	x23, x24, [sp, #48]
    11bc:	ldp	x29, x30, [sp], #64
    11c0:	b	0 <gomp_iter_guided_next>
    11c4:	nop

00000000000011c8 <GOMP_loop_doacross_runtime_start>:
    11c8:	adrp	x4, 0 <gomp_tls_data>
    11cc:	ldr	x4, [x4]
    11d0:	mrs	x6, tpidr_el0
    11d4:	adrp	x5, 0 <gomp_global_icv>
    11d8:	add	x5, x5, #0x0
    11dc:	add	x6, x6, x4
    11e0:	mov	x7, x2
    11e4:	mov	x4, x3
    11e8:	ldr	x6, [x6, #80]
    11ec:	cmp	x6, #0x0
    11f0:	add	x6, x6, #0x90
    11f4:	csel	x5, x5, x6, eq  // eq = none
    11f8:	ldr	w2, [x5, #8]
    11fc:	and	w6, w2, #0x7fffffff
    1200:	cmp	w6, #0x3
    1204:	b.eq	124c <GOMP_loop_doacross_runtime_start+0x84>  // b.none
    1208:	tst	w2, #0x7ffffffc
    120c:	b.ne	1224 <GOMP_loop_doacross_runtime_start+0x5c>  // b.any
    1210:	cmp	w6, #0x1
    1214:	b.ne	1238 <GOMP_loop_doacross_runtime_start+0x70>  // b.any
    1218:	ldrsw	x2, [x5, #12]
    121c:	mov	x3, x7
    1220:	b	eb0 <GOMP_loop_doacross_static_start>
    1224:	cmp	w6, #0x4
    1228:	b.ne	1258 <GOMP_loop_doacross_runtime_start+0x90>  // b.any
    122c:	mov	x3, x7
    1230:	mov	x2, #0x0                   	// #0
    1234:	b	eb0 <GOMP_loop_doacross_static_start>
    1238:	cmp	w6, #0x2
    123c:	b.ne	1258 <GOMP_loop_doacross_runtime_start+0x90>  // b.any
    1240:	ldrsw	x2, [x5, #12]
    1244:	mov	x3, x7
    1248:	b	f90 <GOMP_loop_doacross_dynamic_start>
    124c:	ldrsw	x2, [x5, #12]
    1250:	mov	x3, x7
    1254:	b	10e0 <GOMP_loop_doacross_guided_start>
    1258:	stp	x29, x30, [sp, #-16]!
    125c:	mov	x29, sp
    1260:	bl	0 <abort>
    1264:	nop

0000000000001268 <GOMP_loop_static_next>:
    1268:	stp	x29, x30, [sp, #-16]!
    126c:	mov	x29, sp
    1270:	bl	0 <gomp_iter_static_next>
    1274:	cmp	w0, #0x0
    1278:	cset	w0, eq  // eq = none
    127c:	ldp	x29, x30, [sp], #16
    1280:	ret
    1284:	nop

0000000000001288 <GOMP_loop_dynamic_next>:
    1288:	b	0 <gomp_iter_dynamic_next>
    128c:	nop

0000000000001290 <GOMP_loop_guided_next>:
    1290:	b	0 <gomp_iter_guided_next>
    1294:	nop

0000000000001298 <GOMP_loop_maybe_nonmonotonic_runtime_next>:
    1298:	adrp	x3, 0 <gomp_tls_data>
    129c:	ldr	x3, [x3]
    12a0:	mrs	x2, tpidr_el0
    12a4:	add	x2, x2, x3
    12a8:	ldr	x2, [x2, #24]
    12ac:	ldr	w2, [x2]
    12b0:	cmp	w2, #0x2
    12b4:	b.eq	130c <GOMP_loop_maybe_nonmonotonic_runtime_next+0x74>  // b.none
    12b8:	stp	x29, x30, [sp, #-16]!
    12bc:	mov	x3, x0
    12c0:	mov	x4, x1
    12c4:	mov	x29, sp
    12c8:	b.ls	12dc <GOMP_loop_maybe_nonmonotonic_runtime_next+0x44>  // b.plast
    12cc:	cmp	w2, #0x3
    12d0:	b.ne	1300 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x68>  // b.any
    12d4:	ldp	x29, x30, [sp], #16
    12d8:	b	0 <gomp_iter_guided_next>
    12dc:	cmp	w2, #0x1
    12e0:	b.ne	1308 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x70>  // b.any
    12e4:	mov	x1, x4
    12e8:	mov	x0, x3
    12ec:	bl	0 <gomp_iter_static_next>
    12f0:	cmp	w0, #0x0
    12f4:	cset	w0, eq  // eq = none
    12f8:	ldp	x29, x30, [sp], #16
    12fc:	ret
    1300:	cmp	w2, #0x4
    1304:	b.eq	12e4 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x4c>  // b.none
    1308:	bl	0 <abort>
    130c:	b	0 <gomp_iter_dynamic_next>

0000000000001310 <GOMP_loop_start>:
    1310:	stp	x29, x30, [sp, #-112]!
    1314:	mov	x29, sp
    1318:	stp	x19, x20, [sp, #16]
    131c:	mov	x20, x7
    1320:	adrp	x19, 0 <gomp_tls_data>
    1324:	ldr	x19, [x19]
    1328:	stp	x25, x26, [sp, #64]
    132c:	mrs	x26, tpidr_el0
    1330:	mov	x25, x6
    1334:	stp	x27, x28, [sp, #80]
    1338:	add	x28, x26, x19
    133c:	mov	x27, x3
    1340:	stp	x21, x22, [sp, #32]
    1344:	mov	x22, x1
    1348:	mov	x21, x5
    134c:	stp	x23, x24, [sp, #48]
    1350:	mov	x23, x0
    1354:	mov	x24, x2
    1358:	str	xzr, [x28, #72]
    135c:	str	x4, [sp, #104]
    1360:	cbz	x7, 13d8 <GOMP_loop_start+0xc8>
    1364:	bl	0 <gomp_workshare_taskgroup_start>
    1368:	mov	x0, #0x0                   	// #0
    136c:	bl	0 <gomp_work_share_start>
    1370:	tst	w0, #0xff
    1374:	b.ne	13e8 <GOMP_loop_start+0xd8>  // b.any
    1378:	ldr	x1, [x28, #24]
    137c:	mov	x0, x20
    1380:	ldr	x1, [x1, #88]
    1384:	bl	0 <gomp_workshare_task_reduction_register>
    1388:	ldr	x0, [sp, #112]
    138c:	cbz	x0, 13a4 <GOMP_loop_start+0x94>
    1390:	add	x19, x26, x19
    1394:	ldr	x1, [sp, #112]
    1398:	ldr	x0, [x19, #24]
    139c:	ldr	x0, [x0, #32]
    13a0:	str	x0, [x1]
    13a4:	mov	w0, #0x1                   	// #1
    13a8:	cbz	x21, 13bc <GOMP_loop_start+0xac>
    13ac:	mov	x1, x25
    13b0:	mov	x0, x21
    13b4:	bl	1298 <GOMP_loop_maybe_nonmonotonic_runtime_next>
    13b8:	and	w0, w0, #0xff
    13bc:	ldp	x19, x20, [sp, #16]
    13c0:	ldp	x21, x22, [sp, #32]
    13c4:	ldp	x23, x24, [sp, #48]
    13c8:	ldp	x25, x26, [sp, #64]
    13cc:	ldp	x27, x28, [sp, #80]
    13d0:	ldp	x29, x30, [sp], #112
    13d4:	ret
    13d8:	mov	x0, #0x0                   	// #0
    13dc:	bl	0 <gomp_work_share_start>
    13e0:	tst	w0, #0xff
    13e4:	b.eq	1388 <GOMP_loop_start+0x78>  // b.none
    13e8:	add	x1, sp, #0x68
    13ec:	mov	x0, x27
    13f0:	bl	0 <gomp_adjust_sched>
    13f4:	add	x1, x26, x19
    13f8:	cmp	x24, #0x0
    13fc:	ldr	x2, [sp, #104]
    1400:	ccmp	x23, x22, #0x4, gt
    1404:	ldr	x1, [x1, #24]
    1408:	str	w0, [x1]
    140c:	str	x2, [x1, #8]
    1410:	b.gt	14b4 <GOMP_loop_start+0x1a4>
    1414:	cmp	x24, #0x0
    1418:	str	x23, [x1, #72]
    141c:	ccmp	x23, x22, #0x0, lt  // lt = tstop
    1420:	csel	x22, x22, x23, ge  // ge = tcont
    1424:	stp	x22, x24, [x1, #16]
    1428:	cmp	w0, #0x2
    142c:	b.eq	14c8 <GOMP_loop_start+0x1b8>  // b.none
    1430:	cbz	x20, 1458 <GOMP_loop_start+0x148>
    1434:	mov	x0, x20
    1438:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    143c:	add	x0, x26, x19
    1440:	mov	w2, #0x1                   	// #1
    1444:	ldr	x1, [x0, #80]
    1448:	ldr	x0, [x0, #24]
    144c:	ldr	x1, [x1, #40]
    1450:	strb	w2, [x1, #50]
    1454:	str	x20, [x0, #88]
    1458:	ldr	x0, [sp, #112]
    145c:	cbz	x0, 1484 <GOMP_loop_start+0x174>
    1460:	add	x1, x26, x19
    1464:	ldr	x0, [x0]
    1468:	ldr	x20, [x1, #24]
    146c:	cmp	x0, #0x20
    1470:	b.ls	1518 <GOMP_loop_start+0x208>  // b.plast
    1474:	bl	0 <gomp_malloc_cleared>
    1478:	str	x0, [x20, #32]
    147c:	ldr	x1, [sp, #112]
    1480:	str	x0, [x1]
    1484:	add	x19, x26, x19
    1488:	ldr	x0, [x19, #32]
    148c:	cbz	x0, 13a4 <GOMP_loop_start+0x94>
    1490:	ldr	x2, [x19, #24]
    1494:	add	x0, x0, #0x50
    1498:	ldxr	x1, [x0]
    149c:	stlxr	w3, x2, [x0]
    14a0:	cbnz	w3, 1498 <GOMP_loop_start+0x188>
    14a4:	cmp	x1, #0x1
    14a8:	b.eq	13a4 <GOMP_loop_start+0x94>  // b.none
    14ac:	bl	0 <gomp_ptrlock_set_slow>
    14b0:	b	13a4 <GOMP_loop_start+0x94>
    14b4:	mov	x22, x23
    14b8:	stp	x22, x24, [x1, #16]
    14bc:	cmp	w0, #0x2
    14c0:	str	x23, [x1, #72]
    14c4:	b.ne	1430 <GOMP_loop_start+0x120>  // b.any
    14c8:	add	x0, x26, x19
    14cc:	mul	x2, x2, x24
    14d0:	mov	x3, #0x1                   	// #1
    14d4:	ldr	x0, [x0, #16]
    14d8:	str	x2, [x1, #8]
    14dc:	cbz	x0, 14e4 <GOMP_loop_start+0x1d4>
    14e0:	ldr	w3, [x0]
    14e4:	cmp	x24, #0x0
    14e8:	b.le	1534 <GOMP_loop_start+0x224>
    14ec:	orr	x4, x2, x3
    14f0:	mov	x0, #0x7fffffff            	// #2147483647
    14f4:	cmp	x4, x0
    14f8:	b.hi	1568 <GOMP_loop_start+0x258>  // b.pmore
    14fc:	madd	x2, x3, x2, x2
    1500:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    1504:	sub	x2, x0, x2
    1508:	cmp	x22, x2
    150c:	cset	w0, lt  // lt = tstop
    1510:	str	w0, [x1, #4]
    1514:	b	1430 <GOMP_loop_start+0x120>
    1518:	mov	x2, x0
    151c:	mov	w1, #0x0                   	// #0
    1520:	add	x0, x20, #0x60
    1524:	bl	0 <memset>
    1528:	ldr	x1, [sp, #112]
    152c:	str	x0, [x1]
    1530:	b	1484 <GOMP_loop_start+0x174>
    1534:	neg	x0, x2
    1538:	mov	x2, #0x7fffffff            	// #2147483647
    153c:	orr	x4, x3, x0
    1540:	cmp	x4, x2
    1544:	b.hi	1568 <GOMP_loop_start+0x258>  // b.pmore
    1548:	madd	x0, x3, x0, x0
    154c:	mov	x2, #0x2                   	// #2
    1550:	movk	x2, #0x8000, lsl #48
    1554:	add	x0, x0, x2
    1558:	cmp	x22, x0
    155c:	cset	w0, ge  // ge = tcont
    1560:	str	w0, [x1, #4]
    1564:	b	1430 <GOMP_loop_start+0x120>
    1568:	str	wzr, [x1, #4]
    156c:	b	1430 <GOMP_loop_start+0x120>

0000000000001570 <GOMP_loop_doacross_start>:
    1570:	stp	x29, x30, [sp, #-112]!
    1574:	mov	x29, sp
    1578:	stp	x25, x26, [sp, #64]
    157c:	mov	w26, w0
    1580:	adrp	x25, 0 <gomp_tls_data>
    1584:	ldr	x25, [x25]
    1588:	stp	x19, x20, [sp, #16]
    158c:	mrs	x20, tpidr_el0
    1590:	mov	x19, x7
    1594:	stp	x27, x28, [sp, #80]
    1598:	add	x28, x20, x25
    159c:	mov	x27, x2
    15a0:	stp	x21, x22, [sp, #32]
    15a4:	mov	x22, x4
    15a8:	mov	x21, x6
    15ac:	stp	x23, x24, [sp, #48]
    15b0:	mov	x24, x1
    15b4:	mov	x23, x5
    15b8:	str	xzr, [x28, #72]
    15bc:	str	x3, [sp, #104]
    15c0:	cbz	x6, 16dc <GOMP_loop_doacross_start+0x16c>
    15c4:	bl	0 <gomp_workshare_taskgroup_start>
    15c8:	mov	x0, #0x0                   	// #0
    15cc:	bl	0 <gomp_work_share_start>
    15d0:	tst	w0, #0xff
    15d4:	b.eq	16c8 <GOMP_loop_doacross_start+0x158>  // b.none
    15d8:	mov	x28, #0x0                   	// #0
    15dc:	cbz	x19, 15e4 <GOMP_loop_doacross_start+0x74>
    15e0:	ldr	x28, [x19]
    15e4:	add	x1, sp, #0x68
    15e8:	mov	x0, x27
    15ec:	bl	0 <gomp_adjust_sched>
    15f0:	add	x3, x20, x25
    15f4:	mov	x5, #0x1                   	// #1
    15f8:	ldr	x4, [x24]
    15fc:	ldr	x1, [x3, #24]
    1600:	cmp	x4, #0x0
    1604:	ldr	x2, [sp, #104]
    1608:	csel	x4, x4, xzr, ge  // ge = tcont
    160c:	str	w0, [x1]
    1610:	cmp	w0, #0x2
    1614:	stp	x2, x4, [x1, #8]
    1618:	str	x5, [x1, #24]
    161c:	str	xzr, [x1, #72]
    1620:	b.eq	16f8 <GOMP_loop_doacross_start+0x188>  // b.none
    1624:	mov	x3, x28
    1628:	mov	x1, x24
    162c:	mov	w0, w26
    1630:	bl	0 <gomp_doacross_init>
    1634:	cbz	x21, 165c <GOMP_loop_doacross_start+0xec>
    1638:	mov	x0, x21
    163c:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    1640:	add	x0, x20, x25
    1644:	mov	w2, #0x1                   	// #1
    1648:	ldr	x1, [x0, #80]
    164c:	ldr	x0, [x0, #24]
    1650:	ldr	x1, [x1, #40]
    1654:	strb	w2, [x1, #50]
    1658:	str	x21, [x0, #88]
    165c:	add	x1, x20, x25
    1660:	ldr	x0, [x1, #32]
    1664:	cbz	x0, 1688 <GOMP_loop_doacross_start+0x118>
    1668:	ldr	x2, [x1, #24]
    166c:	add	x0, x0, #0x50
    1670:	ldxr	x1, [x0]
    1674:	stlxr	w3, x2, [x0]
    1678:	cbnz	w3, 1670 <GOMP_loop_doacross_start+0x100>
    167c:	cmp	x1, #0x1
    1680:	b.eq	1688 <GOMP_loop_doacross_start+0x118>  // b.none
    1684:	bl	0 <gomp_ptrlock_set_slow>
    1688:	cbz	x19, 16a0 <GOMP_loop_doacross_start+0x130>
    168c:	add	x20, x20, x25
    1690:	ldr	x0, [x20, #24]
    1694:	ldr	x0, [x0, #32]
    1698:	ldr	x0, [x0, #48]
    169c:	str	x0, [x19]
    16a0:	mov	x1, x23
    16a4:	mov	x0, x22
    16a8:	bl	1298 <GOMP_loop_maybe_nonmonotonic_runtime_next>
    16ac:	ldp	x19, x20, [sp, #16]
    16b0:	ldp	x21, x22, [sp, #32]
    16b4:	ldp	x23, x24, [sp, #48]
    16b8:	ldp	x25, x26, [sp, #64]
    16bc:	ldp	x27, x28, [sp, #80]
    16c0:	ldp	x29, x30, [sp], #112
    16c4:	ret
    16c8:	ldr	x1, [x28, #24]
    16cc:	mov	x0, x21
    16d0:	ldr	x1, [x1, #88]
    16d4:	bl	0 <gomp_workshare_task_reduction_register>
    16d8:	b	1688 <GOMP_loop_doacross_start+0x118>
    16dc:	mov	x0, #0x0                   	// #0
    16e0:	bl	0 <gomp_work_share_start>
    16e4:	tst	w0, #0xff
    16e8:	b.eq	1688 <GOMP_loop_doacross_start+0x118>  // b.none
    16ec:	mov	x28, #0x0                   	// #0
    16f0:	cbnz	x19, 15e0 <GOMP_loop_doacross_start+0x70>
    16f4:	b	15e4 <GOMP_loop_doacross_start+0x74>
    16f8:	ldr	x0, [x3, #16]
    16fc:	cbz	x0, 1704 <GOMP_loop_doacross_start+0x194>
    1700:	ldr	w5, [x0]
    1704:	orr	x3, x2, x5
    1708:	mov	x0, #0x7fffffff            	// #2147483647
    170c:	cmp	x3, x0
    1710:	b.hi	1744 <GOMP_loop_doacross_start+0x1d4>  // b.pmore
    1714:	madd	x5, x5, x2, x2
    1718:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    171c:	mov	x3, x28
    1720:	sub	x5, x0, x5
    1724:	cmp	x5, x4
    1728:	cset	w0, gt
    172c:	str	w0, [x1, #4]
    1730:	mov	x1, x24
    1734:	mov	w0, w26
    1738:	bl	0 <gomp_doacross_init>
    173c:	cbnz	x21, 1638 <GOMP_loop_doacross_start+0xc8>
    1740:	b	165c <GOMP_loop_doacross_start+0xec>
    1744:	str	wzr, [x1, #4]
    1748:	b	1624 <GOMP_loop_doacross_start+0xb4>
    174c:	nop

0000000000001750 <GOMP_loop_ordered_static_next>:
    1750:	stp	x29, x30, [sp, #-48]!
    1754:	mov	x29, sp
    1758:	stp	x21, x22, [sp, #32]
    175c:	mov	x21, x1
    1760:	adrp	x22, 0 <gomp_tls_data>
    1764:	ldr	x22, [x22]
    1768:	stp	x19, x20, [sp, #16]
    176c:	mov	x19, x0
    1770:	mrs	x20, tpidr_el0
    1774:	bl	0 <gomp_ordered_sync>
    1778:	add	x1, x20, x22
    177c:	mov	w0, #0x1                   	// #1
    1780:	ldr	x2, [x1, #24]
    1784:	add	x2, x2, #0x40
    1788:	ldaxr	w1, [x2]
    178c:	cbnz	w1, 1798 <GOMP_loop_ordered_static_next+0x48>
    1790:	stxr	w3, w0, [x2]
    1794:	cbnz	w3, 1788 <GOMP_loop_ordered_static_next+0x38>
    1798:	cmp	w1, #0x0
    179c:	b.ne	180c <GOMP_loop_ordered_static_next+0xbc>  // b.any
    17a0:	mov	x0, x19
    17a4:	mov	x1, x21
    17a8:	bl	0 <gomp_iter_static_next>
    17ac:	mov	w19, w0
    17b0:	tbnz	w0, #31, 17b8 <GOMP_loop_ordered_static_next+0x68>
    17b4:	bl	0 <gomp_ordered_static_next>
    17b8:	add	x20, x20, x22
    17bc:	ldr	x1, [x20, #24]
    17c0:	add	x1, x1, #0x40
    17c4:	ldxr	w0, [x1]
    17c8:	stlxr	w2, wzr, [x1]
    17cc:	cbnz	w2, 17c4 <GOMP_loop_ordered_static_next+0x74>
    17d0:	tbnz	w0, #31, 17ec <GOMP_loop_ordered_static_next+0x9c>
    17d4:	cmp	w19, #0x0
    17d8:	cset	w0, eq  // eq = none
    17dc:	ldp	x19, x20, [sp, #16]
    17e0:	ldp	x21, x22, [sp, #32]
    17e4:	ldp	x29, x30, [sp], #48
    17e8:	ret
    17ec:	mov	x0, x1
    17f0:	bl	0 <gomp_mutex_unlock_slow>
    17f4:	cmp	w19, #0x0
    17f8:	cset	w0, eq  // eq = none
    17fc:	ldp	x19, x20, [sp, #16]
    1800:	ldp	x21, x22, [sp, #32]
    1804:	ldp	x29, x30, [sp], #48
    1808:	ret
    180c:	mov	x0, x2
    1810:	bl	0 <gomp_mutex_lock_slow>
    1814:	b	17a0 <GOMP_loop_ordered_static_next+0x50>

0000000000001818 <GOMP_loop_ordered_dynamic_next>:
    1818:	stp	x29, x30, [sp, #-48]!
    181c:	mov	x29, sp
    1820:	stp	x21, x22, [sp, #32]
    1824:	mov	x21, x1
    1828:	adrp	x22, 0 <gomp_tls_data>
    182c:	ldr	x22, [x22]
    1830:	stp	x19, x20, [sp, #16]
    1834:	mov	x19, x0
    1838:	mrs	x20, tpidr_el0
    183c:	bl	0 <gomp_ordered_sync>
    1840:	add	x1, x20, x22
    1844:	mov	w0, #0x1                   	// #1
    1848:	ldr	x2, [x1, #24]
    184c:	add	x2, x2, #0x40
    1850:	ldaxr	w1, [x2]
    1854:	cbnz	w1, 1860 <GOMP_loop_ordered_dynamic_next+0x48>
    1858:	stxr	w3, w0, [x2]
    185c:	cbnz	w3, 1850 <GOMP_loop_ordered_dynamic_next+0x38>
    1860:	cmp	w1, #0x0
    1864:	b.ne	18d8 <GOMP_loop_ordered_dynamic_next+0xc0>  // b.any
    1868:	mov	x0, x19
    186c:	mov	x1, x21
    1870:	bl	0 <gomp_iter_dynamic_next_locked>
    1874:	mov	w19, w0
    1878:	tst	w0, #0xff
    187c:	b.eq	18b4 <GOMP_loop_ordered_dynamic_next+0x9c>  // b.none
    1880:	bl	0 <gomp_ordered_next>
    1884:	add	x20, x20, x22
    1888:	ldr	x1, [x20, #24]
    188c:	add	x1, x1, #0x40
    1890:	ldxr	w0, [x1]
    1894:	stlxr	w2, wzr, [x1]
    1898:	cbnz	w2, 1890 <GOMP_loop_ordered_dynamic_next+0x78>
    189c:	tbnz	w0, #31, 18bc <GOMP_loop_ordered_dynamic_next+0xa4>
    18a0:	mov	w0, w19
    18a4:	ldp	x19, x20, [sp, #16]
    18a8:	ldp	x21, x22, [sp, #32]
    18ac:	ldp	x29, x30, [sp], #48
    18b0:	ret
    18b4:	bl	0 <gomp_ordered_last>
    18b8:	b	1884 <GOMP_loop_ordered_dynamic_next+0x6c>
    18bc:	mov	x0, x1
    18c0:	bl	0 <gomp_mutex_unlock_slow>
    18c4:	mov	w0, w19
    18c8:	ldp	x19, x20, [sp, #16]
    18cc:	ldp	x21, x22, [sp, #32]
    18d0:	ldp	x29, x30, [sp], #48
    18d4:	ret
    18d8:	mov	x0, x2
    18dc:	bl	0 <gomp_mutex_lock_slow>
    18e0:	b	1868 <GOMP_loop_ordered_dynamic_next+0x50>
    18e4:	nop

00000000000018e8 <GOMP_loop_ordered_guided_next>:
    18e8:	stp	x29, x30, [sp, #-48]!
    18ec:	mov	x29, sp
    18f0:	stp	x21, x22, [sp, #32]
    18f4:	mov	x21, x1
    18f8:	adrp	x22, 0 <gomp_tls_data>
    18fc:	ldr	x22, [x22]
    1900:	stp	x19, x20, [sp, #16]
    1904:	mov	x19, x0
    1908:	mrs	x20, tpidr_el0
    190c:	bl	0 <gomp_ordered_sync>
    1910:	add	x1, x20, x22
    1914:	mov	w0, #0x1                   	// #1
    1918:	ldr	x2, [x1, #24]
    191c:	add	x2, x2, #0x40
    1920:	ldaxr	w1, [x2]
    1924:	cbnz	w1, 1930 <GOMP_loop_ordered_guided_next+0x48>
    1928:	stxr	w3, w0, [x2]
    192c:	cbnz	w3, 1920 <GOMP_loop_ordered_guided_next+0x38>
    1930:	cmp	w1, #0x0
    1934:	b.ne	19a8 <GOMP_loop_ordered_guided_next+0xc0>  // b.any
    1938:	mov	x0, x19
    193c:	mov	x1, x21
    1940:	bl	0 <gomp_iter_guided_next_locked>
    1944:	mov	w19, w0
    1948:	tst	w0, #0xff
    194c:	b.eq	1984 <GOMP_loop_ordered_guided_next+0x9c>  // b.none
    1950:	bl	0 <gomp_ordered_next>
    1954:	add	x20, x20, x22
    1958:	ldr	x1, [x20, #24]
    195c:	add	x1, x1, #0x40
    1960:	ldxr	w0, [x1]
    1964:	stlxr	w2, wzr, [x1]
    1968:	cbnz	w2, 1960 <GOMP_loop_ordered_guided_next+0x78>
    196c:	tbnz	w0, #31, 198c <GOMP_loop_ordered_guided_next+0xa4>
    1970:	mov	w0, w19
    1974:	ldp	x19, x20, [sp, #16]
    1978:	ldp	x21, x22, [sp, #32]
    197c:	ldp	x29, x30, [sp], #48
    1980:	ret
    1984:	bl	0 <gomp_ordered_last>
    1988:	b	1954 <GOMP_loop_ordered_guided_next+0x6c>
    198c:	mov	x0, x1
    1990:	bl	0 <gomp_mutex_unlock_slow>
    1994:	mov	w0, w19
    1998:	ldp	x19, x20, [sp, #16]
    199c:	ldp	x21, x22, [sp, #32]
    19a0:	ldp	x29, x30, [sp], #48
    19a4:	ret
    19a8:	mov	x0, x2
    19ac:	bl	0 <gomp_mutex_lock_slow>
    19b0:	b	1938 <GOMP_loop_ordered_guided_next+0x50>
    19b4:	nop

00000000000019b8 <GOMP_loop_ordered_runtime_next>:
    19b8:	adrp	x3, 0 <gomp_tls_data>
    19bc:	ldr	x3, [x3]
    19c0:	mrs	x2, tpidr_el0
    19c4:	add	x2, x2, x3
    19c8:	ldr	x2, [x2, #24]
    19cc:	ldr	w2, [x2]
    19d0:	cmp	w2, #0x2
    19d4:	b.eq	1a18 <GOMP_loop_ordered_runtime_next+0x60>  // b.none
    19d8:	mov	x3, x0
    19dc:	mov	x4, x1
    19e0:	b.ls	19f0 <GOMP_loop_ordered_runtime_next+0x38>  // b.plast
    19e4:	cmp	w2, #0x3
    19e8:	b.ne	1a04 <GOMP_loop_ordered_runtime_next+0x4c>  // b.any
    19ec:	b	18e8 <GOMP_loop_ordered_guided_next>
    19f0:	cmp	w2, #0x1
    19f4:	b.ne	1a0c <GOMP_loop_ordered_runtime_next+0x54>  // b.any
    19f8:	mov	x1, x4
    19fc:	mov	x0, x3
    1a00:	b	1750 <GOMP_loop_ordered_static_next>
    1a04:	cmp	w2, #0x4
    1a08:	b.eq	19f8 <GOMP_loop_ordered_runtime_next+0x40>  // b.none
    1a0c:	stp	x29, x30, [sp, #-16]!
    1a10:	mov	x29, sp
    1a14:	bl	0 <abort>
    1a18:	b	1818 <GOMP_loop_ordered_dynamic_next>
    1a1c:	nop

0000000000001a20 <GOMP_parallel_loop_static_start>:
    1a20:	sub	sp, sp, #0x20
    1a24:	mov	x7, x6
    1a28:	mov	w6, #0x1                   	// #1
    1a2c:	stp	x29, x30, [sp, #16]
    1a30:	add	x29, sp, #0x10
    1a34:	str	wzr, [sp]
    1a38:	bl	88 <gomp_parallel_loop_start>
    1a3c:	ldp	x29, x30, [sp, #16]
    1a40:	add	sp, sp, #0x20
    1a44:	ret

0000000000001a48 <GOMP_parallel_loop_dynamic_start>:
    1a48:	sub	sp, sp, #0x20
    1a4c:	mov	x7, x6
    1a50:	mov	w6, #0x2                   	// #2
    1a54:	stp	x29, x30, [sp, #16]
    1a58:	add	x29, sp, #0x10
    1a5c:	str	wzr, [sp]
    1a60:	bl	88 <gomp_parallel_loop_start>
    1a64:	ldp	x29, x30, [sp, #16]
    1a68:	add	sp, sp, #0x20
    1a6c:	ret

0000000000001a70 <GOMP_parallel_loop_guided_start>:
    1a70:	sub	sp, sp, #0x20
    1a74:	mov	x7, x6
    1a78:	mov	w6, #0x3                   	// #3
    1a7c:	stp	x29, x30, [sp, #16]
    1a80:	add	x29, sp, #0x10
    1a84:	str	wzr, [sp]
    1a88:	bl	88 <gomp_parallel_loop_start>
    1a8c:	ldp	x29, x30, [sp, #16]
    1a90:	add	sp, sp, #0x20
    1a94:	ret

0000000000001a98 <GOMP_parallel_loop_runtime_start>:
    1a98:	sub	sp, sp, #0x20
    1a9c:	adrp	x8, 0 <gomp_tls_data>
    1aa0:	ldr	x8, [x8]
    1aa4:	mrs	x7, tpidr_el0
    1aa8:	adrp	x6, 0 <gomp_global_icv>
    1aac:	add	x7, x7, x8
    1ab0:	add	x6, x6, #0x0
    1ab4:	stp	x29, x30, [sp, #16]
    1ab8:	add	x29, sp, #0x10
    1abc:	ldr	x7, [x7, #80]
    1ac0:	cmp	x7, #0x0
    1ac4:	add	x7, x7, #0x90
    1ac8:	csel	x6, x6, x7, eq  // eq = none
    1acc:	ldrsw	x7, [x6, #12]
    1ad0:	ldr	w6, [x6, #8]
    1ad4:	str	wzr, [sp]
    1ad8:	and	w6, w6, #0x7fffffff
    1adc:	bl	88 <gomp_parallel_loop_start>
    1ae0:	ldp	x29, x30, [sp, #16]
    1ae4:	add	sp, sp, #0x20
    1ae8:	ret
    1aec:	nop

0000000000001af0 <GOMP_parallel_loop_static>:
    1af0:	sub	sp, sp, #0x30
    1af4:	mov	w8, w7
    1af8:	mov	x7, x6
    1afc:	mov	w6, #0x1                   	// #1
    1b00:	stp	x29, x30, [sp, #16]
    1b04:	add	x29, sp, #0x10
    1b08:	str	w8, [sp]
    1b0c:	stp	x19, x20, [sp, #32]
    1b10:	mov	x20, x1
    1b14:	mov	x19, x0
    1b18:	bl	88 <gomp_parallel_loop_start>
    1b1c:	mov	x0, x20
    1b20:	blr	x19
    1b24:	ldp	x29, x30, [sp, #16]
    1b28:	ldp	x19, x20, [sp, #32]
    1b2c:	add	sp, sp, #0x30
    1b30:	b	0 <gomp_ialias_GOMP_parallel_end>
    1b34:	nop

0000000000001b38 <GOMP_parallel_loop_dynamic>:
    1b38:	sub	sp, sp, #0x30
    1b3c:	mov	w8, w7
    1b40:	mov	x7, x6
    1b44:	mov	w6, #0x2                   	// #2
    1b48:	stp	x29, x30, [sp, #16]
    1b4c:	add	x29, sp, #0x10
    1b50:	str	w8, [sp]
    1b54:	stp	x19, x20, [sp, #32]
    1b58:	mov	x20, x1
    1b5c:	mov	x19, x0
    1b60:	bl	88 <gomp_parallel_loop_start>
    1b64:	mov	x0, x20
    1b68:	blr	x19
    1b6c:	ldp	x29, x30, [sp, #16]
    1b70:	ldp	x19, x20, [sp, #32]
    1b74:	add	sp, sp, #0x30
    1b78:	b	0 <gomp_ialias_GOMP_parallel_end>
    1b7c:	nop

0000000000001b80 <GOMP_parallel_loop_guided>:
    1b80:	sub	sp, sp, #0x30
    1b84:	mov	w8, w7
    1b88:	mov	x7, x6
    1b8c:	mov	w6, #0x3                   	// #3
    1b90:	stp	x29, x30, [sp, #16]
    1b94:	add	x29, sp, #0x10
    1b98:	str	w8, [sp]
    1b9c:	stp	x19, x20, [sp, #32]
    1ba0:	mov	x20, x1
    1ba4:	mov	x19, x0
    1ba8:	bl	88 <gomp_parallel_loop_start>
    1bac:	mov	x0, x20
    1bb0:	blr	x19
    1bb4:	ldp	x29, x30, [sp, #16]
    1bb8:	ldp	x19, x20, [sp, #32]
    1bbc:	add	sp, sp, #0x30
    1bc0:	b	0 <gomp_ialias_GOMP_parallel_end>
    1bc4:	nop

0000000000001bc8 <GOMP_parallel_loop_maybe_nonmonotonic_runtime>:
    1bc8:	sub	sp, sp, #0x30
    1bcc:	adrp	x9, 0 <gomp_tls_data>
    1bd0:	ldr	x9, [x9]
    1bd4:	mrs	x7, tpidr_el0
    1bd8:	adrp	x8, 0 <gomp_global_icv>
    1bdc:	add	x7, x7, x9
    1be0:	add	x8, x8, #0x0
    1be4:	stp	x29, x30, [sp, #16]
    1be8:	add	x29, sp, #0x10
    1bec:	ldr	x7, [x7, #80]
    1bf0:	stp	x19, x20, [sp, #32]
    1bf4:	mov	x20, x1
    1bf8:	cmp	x7, #0x0
    1bfc:	add	x7, x7, #0x90
    1c00:	csel	x8, x8, x7, eq  // eq = none
    1c04:	mov	x19, x0
    1c08:	ldrsw	x7, [x8, #12]
    1c0c:	ldr	w8, [x8, #8]
    1c10:	str	w6, [sp]
    1c14:	and	w6, w8, #0x7fffffff
    1c18:	bl	88 <gomp_parallel_loop_start>
    1c1c:	mov	x0, x20
    1c20:	blr	x19
    1c24:	ldp	x29, x30, [sp, #16]
    1c28:	ldp	x19, x20, [sp, #32]
    1c2c:	add	sp, sp, #0x30
    1c30:	b	0 <gomp_ialias_GOMP_parallel_end>
    1c34:	nop

0000000000001c38 <GOMP_loop_end>:
    1c38:	b	0 <gomp_work_share_end>
    1c3c:	nop

0000000000001c40 <GOMP_loop_end_cancel>:
    1c40:	b	0 <gomp_work_share_end_cancel>
    1c44:	nop

0000000000001c48 <GOMP_loop_end_nowait>:
    1c48:	b	0 <gomp_work_share_end_nowait>

loop_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_adjust_sched>:
       0:	tst	x0, #0x7ffffffc
       4:	and	x0, x0, #0x7fffffff
       8:	b.ne	6c <gomp_adjust_sched+0x6c>  // b.any
       c:	cbnz	x0, 80 <gomp_adjust_sched+0x80>
      10:	adrp	x3, 0 <gomp_tls_data>
      14:	ldr	x3, [x3]
      18:	mrs	x0, tpidr_el0
      1c:	adrp	x2, 0 <gomp_global_icv>
      20:	add	x2, x2, #0x0
      24:	add	x0, x0, x3
      28:	ldr	x0, [x0, #80]
      2c:	cmp	x0, #0x0
      30:	add	x0, x0, #0x90
      34:	csel	x2, x2, x0, eq  // eq = none
      38:	ldr	w0, [x2, #8]
      3c:	tst	w0, #0x7ffffffc
      40:	and	w0, w0, #0x7fffffff
      44:	b.ne	58 <gomp_adjust_sched+0x58>  // b.any
      48:	cbz	w0, 74 <gomp_adjust_sched+0x74>
      4c:	ldrsw	x2, [x2, #12]
      50:	str	x2, [x1]
      54:	ret
      58:	cmp	w0, #0x4
      5c:	b.ne	74 <gomp_adjust_sched+0x74>  // b.any
      60:	mov	x0, #0x1                   	// #1
      64:	str	xzr, [x1]
      68:	ret
      6c:	cmp	x0, #0x4
      70:	b.eq	10 <gomp_adjust_sched+0x10>  // b.none
      74:	stp	x29, x30, [sp, #-16]!
      78:	mov	x29, sp
      7c:	bl	0 <abort>
      80:	ret
      84:	nop

0000000000000088 <GOMP_loop_ull_static_start>:
      88:	stp	x29, x30, [sp, #-96]!
      8c:	mov	x29, sp
      90:	stp	x23, x24, [sp, #48]
      94:	mov	x23, x3
      98:	adrp	x24, 0 <gomp_tls_data>
      9c:	ldr	x24, [x24]
      a0:	stp	x27, x28, [sp, #80]
      a4:	mrs	x28, tpidr_el0
      a8:	and	w27, w0, #0xff
      ac:	stp	x25, x26, [sp, #64]
      b0:	add	x26, x28, x24
      b4:	mov	x25, x4
      b8:	stp	x19, x20, [sp, #16]
      bc:	mov	x0, #0x0                   	// #0
      c0:	mov	x19, x1
      c4:	stp	x21, x22, [sp, #32]
      c8:	mov	x20, x5
      cc:	mov	x22, x2
      d0:	mov	x21, x6
      d4:	str	xzr, [x26, #72]
      d8:	bl	0 <gomp_work_share_start>
      dc:	tst	w0, #0xff
      e0:	b.eq	134 <GOMP_loop_ull_static_start+0xac>  // b.none
      e4:	ldr	x7, [x26, #24]
      e8:	mov	w0, #0x1                   	// #1
      ec:	cmp	w27, #0x0
      f0:	ccmp	x19, x22, #0x0, ne  // ne = any
      f4:	str	w0, [x7]
      f8:	str	x25, [x7, #8]
      fc:	b.ls	164 <GOMP_loop_ull_static_start+0xdc>  // b.plast
     100:	str	wzr, [x7, #4]
     104:	stp	x19, x23, [x7, #16]
     108:	str	x19, [x7, #72]
     10c:	add	x24, x28, x24
     110:	ldr	x0, [x24, #32]
     114:	cbz	x0, 134 <GOMP_loop_ull_static_start+0xac>
     118:	add	x0, x0, #0x50
     11c:	ldxr	x1, [x0]
     120:	stlxr	w2, x7, [x0]
     124:	cbnz	w2, 11c <GOMP_loop_ull_static_start+0x94>
     128:	cmp	x1, #0x1
     12c:	b.eq	134 <GOMP_loop_ull_static_start+0xac>  // b.none
     130:	bl	0 <gomp_ptrlock_set_slow>
     134:	mov	x1, x21
     138:	mov	x0, x20
     13c:	bl	0 <gomp_iter_ull_static_next>
     140:	cmp	w0, #0x0
     144:	cset	w0, eq  // eq = none
     148:	ldp	x19, x20, [sp, #16]
     14c:	ldp	x21, x22, [sp, #32]
     150:	ldp	x23, x24, [sp, #48]
     154:	ldp	x25, x26, [sp, #64]
     158:	ldp	x27, x28, [sp, #80]
     15c:	ldp	x29, x30, [sp], #96
     160:	ret
     164:	cmp	x19, x22
     168:	eor	w0, w27, w0
     16c:	cset	w1, cc  // cc = lo, ul, last
     170:	tst	w1, w0
     174:	b.ne	194 <GOMP_loop_ull_static_start+0x10c>  // b.any
     178:	str	wzr, [x7, #4]
     17c:	stp	x22, x23, [x7, #16]
     180:	str	x19, [x7, #72]
     184:	cbnz	w27, 10c <GOMP_loop_ull_static_start+0x84>
     188:	mov	w0, #0x2                   	// #2
     18c:	str	w0, [x7, #4]
     190:	b	10c <GOMP_loop_ull_static_start+0x84>
     194:	stp	x19, x23, [x7, #16]
     198:	str	x19, [x7, #72]
     19c:	b	188 <GOMP_loop_ull_static_start+0x100>

00000000000001a0 <GOMP_loop_ull_dynamic_start>:
     1a0:	stp	x29, x30, [sp, #-80]!
     1a4:	mov	x29, sp
     1a8:	stp	x19, x20, [sp, #16]
     1ac:	mov	x19, x1
     1b0:	mov	x20, x5
     1b4:	stp	x21, x22, [sp, #32]
     1b8:	mov	x22, x4
     1bc:	mov	x21, x6
     1c0:	stp	x23, x24, [sp, #48]
     1c4:	mov	x24, x2
     1c8:	mov	x23, x3
     1cc:	str	x25, [sp, #64]
     1d0:	and	w25, w0, #0xff
     1d4:	mov	x0, #0x0                   	// #0
     1d8:	bl	0 <gomp_work_share_start>
     1dc:	tst	w0, #0xff
     1e0:	b.ne	204 <GOMP_loop_ull_dynamic_start+0x64>  // b.any
     1e4:	mov	x1, x21
     1e8:	mov	x0, x20
     1ec:	ldp	x19, x20, [sp, #16]
     1f0:	ldp	x21, x22, [sp, #32]
     1f4:	ldp	x23, x24, [sp, #48]
     1f8:	ldr	x25, [sp, #64]
     1fc:	ldp	x29, x30, [sp], #80
     200:	b	0 <gomp_iter_ull_dynamic_next>
     204:	adrp	x3, 0 <gomp_tls_data>
     208:	ldr	x3, [x3]
     20c:	mrs	x6, tpidr_el0
     210:	mov	w4, #0x2                   	// #2
     214:	cmp	w25, #0x0
     218:	add	x2, x6, x3
     21c:	mul	x0, x23, x22
     220:	ccmp	x19, x24, #0x0, ne  // ne = any
     224:	ldr	x1, [x2, #24]
     228:	ldr	x2, [x2, #16]
     22c:	str	w4, [x1]
     230:	str	x22, [x1, #8]
     234:	b.hi	2dc <GOMP_loop_ull_dynamic_start+0x13c>  // b.pmore
     238:	cmp	x19, x24
     23c:	str	wzr, [x1, #4]
     240:	str	x0, [x1, #8]
     244:	eor	w4, w25, #0x1
     248:	cset	w5, cc  // cc = lo, ul, last
     24c:	tst	w5, w4
     250:	b.ne	2fc <GOMP_loop_ull_dynamic_start+0x15c>  // b.any
     254:	stp	x24, x23, [x1, #16]
     258:	str	x19, [x1, #72]
     25c:	mov	x19, x24
     260:	cbz	x2, 340 <GOMP_loop_ull_dynamic_start+0x1a0>
     264:	ldr	w5, [x2]
     268:	mov	x4, x5
     26c:	cbz	w25, 310 <GOMP_loop_ull_dynamic_start+0x170>
     270:	orr	x4, x0, x4
     274:	mov	x2, #0x7fffffff            	// #2147483647
     278:	cmp	x4, x2
     27c:	b.hi	294 <GOMP_loop_ull_dynamic_start+0xf4>  // b.pmore
     280:	madd	x0, x5, x0, x0
     284:	mvn	x0, x0
     288:	cmp	x0, x19
     28c:	cset	w0, hi  // hi = pmore
     290:	str	w0, [x1, #4]
     294:	add	x3, x6, x3
     298:	ldr	x0, [x3, #32]
     29c:	cbz	x0, 1e4 <GOMP_loop_ull_dynamic_start+0x44>
     2a0:	add	x0, x0, #0x50
     2a4:	ldxr	x2, [x0]
     2a8:	stlxr	w3, x1, [x0]
     2ac:	cbnz	w3, 2a4 <GOMP_loop_ull_dynamic_start+0x104>
     2b0:	cmp	x2, #0x1
     2b4:	b.eq	1e4 <GOMP_loop_ull_dynamic_start+0x44>  // b.none
     2b8:	bl	0 <gomp_ptrlock_set_slow>
     2bc:	mov	x1, x21
     2c0:	mov	x0, x20
     2c4:	ldp	x19, x20, [sp, #16]
     2c8:	ldp	x21, x22, [sp, #32]
     2cc:	ldp	x23, x24, [sp, #48]
     2d0:	ldr	x25, [sp, #64]
     2d4:	ldp	x29, x30, [sp], #80
     2d8:	b	0 <gomp_iter_ull_dynamic_next>
     2dc:	str	wzr, [x1, #4]
     2e0:	stp	x0, x19, [x1, #8]
     2e4:	str	x23, [x1, #24]
     2e8:	str	x19, [x1, #72]
     2ec:	cbnz	x2, 264 <GOMP_loop_ull_dynamic_start+0xc4>
     2f0:	mov	x4, #0x1                   	// #1
     2f4:	mov	x5, x4
     2f8:	b	270 <GOMP_loop_ull_dynamic_start+0xd0>
     2fc:	stp	x19, x23, [x1, #16]
     300:	mov	x4, #0x1                   	// #1
     304:	mov	x5, x4
     308:	str	x19, [x1, #72]
     30c:	cbnz	x2, 264 <GOMP_loop_ull_dynamic_start+0xc4>
     310:	neg	x2, x0
     314:	mov	x0, #0x7fffffff            	// #2147483647
     318:	orr	x4, x4, x2
     31c:	cmp	x4, x0
     320:	b.hi	34c <GOMP_loop_ull_dynamic_start+0x1ac>  // b.pmore
     324:	madd	x0, x5, x2, x2
     328:	add	x0, x0, #0x1
     32c:	cmp	x0, x19
     330:	cset	w0, cc  // cc = lo, ul, last
     334:	orr	w0, w0, #0x2
     338:	str	w0, [x1, #4]
     33c:	b	294 <GOMP_loop_ull_dynamic_start+0xf4>
     340:	mov	x4, #0x1                   	// #1
     344:	mov	x5, x4
     348:	b	26c <GOMP_loop_ull_dynamic_start+0xcc>
     34c:	ldr	w0, [x1, #4]
     350:	b	334 <GOMP_loop_ull_dynamic_start+0x194>
     354:	nop

0000000000000358 <GOMP_loop_ull_guided_start>:
     358:	stp	x29, x30, [sp, #-80]!
     35c:	mov	x29, sp
     360:	stp	x19, x20, [sp, #16]
     364:	mov	x19, x1
     368:	mov	x20, x5
     36c:	stp	x21, x22, [sp, #32]
     370:	mov	x22, x2
     374:	mov	x21, x6
     378:	stp	x23, x24, [sp, #48]
     37c:	mov	x23, x3
     380:	mov	x24, x4
     384:	str	x25, [sp, #64]
     388:	and	w25, w0, #0xff
     38c:	mov	x0, #0x0                   	// #0
     390:	bl	0 <gomp_work_share_start>
     394:	tst	w0, #0xff
     398:	b.eq	3fc <GOMP_loop_ull_guided_start+0xa4>  // b.none
     39c:	adrp	x1, 0 <gomp_tls_data>
     3a0:	ldr	x1, [x1]
     3a4:	mrs	x0, tpidr_el0
     3a8:	mov	w2, #0x3                   	// #3
     3ac:	cmp	w25, #0x0
     3b0:	add	x3, x0, x1
     3b4:	ccmp	x19, x22, #0x0, ne  // ne = any
     3b8:	ldr	x7, [x3, #24]
     3bc:	str	w2, [x7]
     3c0:	str	x24, [x7, #8]
     3c4:	b.ls	41c <GOMP_loop_ull_guided_start+0xc4>  // b.plast
     3c8:	str	wzr, [x7, #4]
     3cc:	stp	x19, x23, [x7, #16]
     3d0:	str	x19, [x7, #72]
     3d4:	add	x0, x0, x1
     3d8:	ldr	x0, [x0, #32]
     3dc:	cbz	x0, 3fc <GOMP_loop_ull_guided_start+0xa4>
     3e0:	add	x0, x0, #0x50
     3e4:	ldxr	x1, [x0]
     3e8:	stlxr	w2, x7, [x0]
     3ec:	cbnz	w2, 3e4 <GOMP_loop_ull_guided_start+0x8c>
     3f0:	cmp	x1, #0x1
     3f4:	b.eq	3fc <GOMP_loop_ull_guided_start+0xa4>  // b.none
     3f8:	bl	0 <gomp_ptrlock_set_slow>
     3fc:	mov	x1, x21
     400:	mov	x0, x20
     404:	ldp	x19, x20, [sp, #16]
     408:	ldp	x21, x22, [sp, #32]
     40c:	ldp	x23, x24, [sp, #48]
     410:	ldr	x25, [sp, #64]
     414:	ldp	x29, x30, [sp], #80
     418:	b	0 <gomp_iter_ull_guided_next>
     41c:	cmp	x19, x22
     420:	eor	w2, w25, #0x1
     424:	cset	w3, cc  // cc = lo, ul, last
     428:	tst	w3, w2
     42c:	b.ne	44c <GOMP_loop_ull_guided_start+0xf4>  // b.any
     430:	str	wzr, [x7, #4]
     434:	stp	x22, x23, [x7, #16]
     438:	str	x19, [x7, #72]
     43c:	cbnz	w25, 3d4 <GOMP_loop_ull_guided_start+0x7c>
     440:	mov	w2, #0x2                   	// #2
     444:	str	w2, [x7, #4]
     448:	b	3d4 <GOMP_loop_ull_guided_start+0x7c>
     44c:	stp	x19, x23, [x7, #16]
     450:	str	x19, [x7, #72]
     454:	b	440 <GOMP_loop_ull_guided_start+0xe8>

0000000000000458 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start>:
     458:	adrp	x6, 0 <gomp_tls_data>
     45c:	ldr	x6, [x6]
     460:	mrs	x8, tpidr_el0
     464:	adrp	x7, 0 <gomp_global_icv>
     468:	add	x7, x7, #0x0
     46c:	add	x8, x8, x6
     470:	mov	x9, x4
     474:	mov	x6, x5
     478:	and	w0, w0, #0xff
     47c:	ldr	x8, [x8, #80]
     480:	cmp	x8, #0x0
     484:	add	x8, x8, #0x90
     488:	csel	x7, x7, x8, eq  // eq = none
     48c:	ldr	w4, [x7, #8]
     490:	and	w8, w4, #0x7fffffff
     494:	cmp	w8, #0x3
     498:	b.eq	4e0 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x88>  // b.none
     49c:	tst	w4, #0x7ffffffc
     4a0:	b.ne	4b8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x60>  // b.any
     4a4:	cmp	w8, #0x1
     4a8:	b.ne	4cc <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x74>  // b.any
     4ac:	ldrsw	x4, [x7, #12]
     4b0:	mov	x5, x9
     4b4:	b	88 <GOMP_loop_ull_static_start>
     4b8:	cmp	w8, #0x4
     4bc:	b.ne	4ec <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x94>  // b.any
     4c0:	mov	x5, x9
     4c4:	mov	x4, #0x0                   	// #0
     4c8:	b	88 <GOMP_loop_ull_static_start>
     4cc:	cmp	w8, #0x2
     4d0:	b.ne	4ec <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x94>  // b.any
     4d4:	ldrsw	x4, [x7, #12]
     4d8:	mov	x5, x9
     4dc:	b	1a0 <GOMP_loop_ull_dynamic_start>
     4e0:	ldrsw	x4, [x7, #12]
     4e4:	mov	x5, x9
     4e8:	b	358 <GOMP_loop_ull_guided_start>
     4ec:	stp	x29, x30, [sp, #-16]!
     4f0:	mov	x29, sp
     4f4:	bl	0 <abort>

00000000000004f8 <GOMP_loop_ull_ordered_static_start>:
     4f8:	stp	x29, x30, [sp, #-96]!
     4fc:	mov	x29, sp
     500:	stp	x25, x26, [sp, #64]
     504:	mov	x25, x4
     508:	adrp	x26, 0 <gomp_tls_data>
     50c:	ldr	x26, [x26]
     510:	stp	x21, x22, [sp, #32]
     514:	mrs	x22, tpidr_el0
     518:	mov	x21, x6
     51c:	stp	x27, x28, [sp, #80]
     520:	add	x28, x22, x26
     524:	and	w27, w0, #0xff
     528:	stp	x19, x20, [sp, #16]
     52c:	mov	x0, #0x1                   	// #1
     530:	mov	x19, x1
     534:	stp	x23, x24, [sp, #48]
     538:	mov	x20, x5
     53c:	mov	x23, x2
     540:	mov	x24, x3
     544:	str	xzr, [x28, #72]
     548:	bl	0 <gomp_work_share_start>
     54c:	tst	w0, #0xff
     550:	b.eq	5ac <GOMP_loop_ull_ordered_static_start+0xb4>  // b.none
     554:	ldr	x0, [x28, #24]
     558:	mov	w1, #0x1                   	// #1
     55c:	cmp	w27, #0x0
     560:	ccmp	x19, x23, #0x0, ne  // ne = any
     564:	str	w1, [x0]
     568:	str	x25, [x0, #8]
     56c:	b.ls	5dc <GOMP_loop_ull_ordered_static_start+0xe4>  // b.plast
     570:	str	wzr, [x0, #4]
     574:	stp	x19, x24, [x0, #16]
     578:	str	x19, [x0, #72]
     57c:	add	x22, x22, x26
     580:	bl	0 <gomp_ordered_static_init>
     584:	ldr	x0, [x22, #32]
     588:	cbz	x0, 5ac <GOMP_loop_ull_ordered_static_start+0xb4>
     58c:	ldr	x2, [x22, #24]
     590:	add	x0, x0, #0x50
     594:	ldxr	x1, [x0]
     598:	stlxr	w3, x2, [x0]
     59c:	cbnz	w3, 594 <GOMP_loop_ull_ordered_static_start+0x9c>
     5a0:	cmp	x1, #0x1
     5a4:	b.eq	5ac <GOMP_loop_ull_ordered_static_start+0xb4>  // b.none
     5a8:	bl	0 <gomp_ptrlock_set_slow>
     5ac:	mov	x1, x21
     5b0:	mov	x0, x20
     5b4:	bl	0 <gomp_iter_ull_static_next>
     5b8:	cmp	w0, #0x0
     5bc:	cset	w0, eq  // eq = none
     5c0:	ldp	x19, x20, [sp, #16]
     5c4:	ldp	x21, x22, [sp, #32]
     5c8:	ldp	x23, x24, [sp, #48]
     5cc:	ldp	x25, x26, [sp, #64]
     5d0:	ldp	x27, x28, [sp, #80]
     5d4:	ldp	x29, x30, [sp], #96
     5d8:	ret
     5dc:	cmp	x19, x23
     5e0:	eor	w1, w27, w1
     5e4:	cset	w2, cc  // cc = lo, ul, last
     5e8:	tst	w2, w1
     5ec:	b.ne	60c <GOMP_loop_ull_ordered_static_start+0x114>  // b.any
     5f0:	str	wzr, [x0, #4]
     5f4:	stp	x23, x24, [x0, #16]
     5f8:	str	x19, [x0, #72]
     5fc:	cbnz	w27, 57c <GOMP_loop_ull_ordered_static_start+0x84>
     600:	mov	w1, #0x2                   	// #2
     604:	str	w1, [x0, #4]
     608:	b	57c <GOMP_loop_ull_ordered_static_start+0x84>
     60c:	stp	x19, x24, [x0, #16]
     610:	str	x19, [x0, #72]
     614:	b	600 <GOMP_loop_ull_ordered_static_start+0x108>

0000000000000618 <GOMP_loop_ull_ordered_dynamic_start>:
     618:	stp	x29, x30, [sp, #-96]!
     61c:	mov	x29, sp
     620:	stp	x19, x20, [sp, #16]
     624:	mov	x20, x1
     628:	adrp	x19, 0 <gomp_tls_data>
     62c:	ldr	x19, [x19]
     630:	stp	x21, x22, [sp, #32]
     634:	mov	x21, x2
     638:	mov	x22, x3
     63c:	stp	x23, x24, [sp, #48]
     640:	mov	x23, x4
     644:	mov	x24, x5
     648:	stp	x25, x26, [sp, #64]
     64c:	mov	x26, x6
     650:	and	w25, w0, #0xff
     654:	mov	x0, #0x1                   	// #1
     658:	str	x27, [sp, #80]
     65c:	bl	0 <gomp_work_share_start>
     660:	mrs	x27, tpidr_el0
     664:	tst	w0, #0xff
     668:	b.ne	6e8 <GOMP_loop_ull_ordered_dynamic_start+0xd0>  // b.any
     66c:	add	x0, x27, x19
     670:	mov	w2, #0x1                   	// #1
     674:	ldr	x0, [x0, #24]
     678:	add	x0, x0, #0x40
     67c:	ldaxr	w1, [x0]
     680:	cbnz	w1, 68c <GOMP_loop_ull_ordered_dynamic_start+0x74>
     684:	stxr	w3, w2, [x0]
     688:	cbnz	w3, 67c <GOMP_loop_ull_ordered_dynamic_start+0x64>
     68c:	cmp	w1, #0x0
     690:	b.ne	878 <GOMP_loop_ull_ordered_dynamic_start+0x260>  // b.any
     694:	mov	x1, x26
     698:	mov	x0, x24
     69c:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     6a0:	mov	w20, w0
     6a4:	tst	w0, #0xff
     6a8:	b.ne	7d0 <GOMP_loop_ull_ordered_dynamic_start+0x1b8>  // b.any
     6ac:	add	x19, x27, x19
     6b0:	ldr	x1, [x19, #24]
     6b4:	add	x1, x1, #0x40
     6b8:	ldxr	w0, [x1]
     6bc:	stlxr	w2, wzr, [x1]
     6c0:	cbnz	w2, 6b8 <GOMP_loop_ull_ordered_dynamic_start+0xa0>
     6c4:	tbnz	w0, #31, 7f8 <GOMP_loop_ull_ordered_dynamic_start+0x1e0>
     6c8:	mov	w0, w20
     6cc:	ldp	x19, x20, [sp, #16]
     6d0:	ldp	x21, x22, [sp, #32]
     6d4:	ldp	x23, x24, [sp, #48]
     6d8:	ldp	x25, x26, [sp, #64]
     6dc:	ldr	x27, [sp, #80]
     6e0:	ldp	x29, x30, [sp], #96
     6e4:	ret
     6e8:	add	x2, x27, x19
     6ec:	mov	w3, #0x2                   	// #2
     6f0:	cmp	w25, #0x0
     6f4:	mul	x1, x22, x23
     6f8:	ccmp	x20, x21, #0x0, ne  // ne = any
     6fc:	ldr	x0, [x2, #24]
     700:	ldr	x2, [x2, #16]
     704:	str	w3, [x0]
     708:	str	x23, [x0, #8]
     70c:	b.hi	7d8 <GOMP_loop_ull_ordered_dynamic_start+0x1c0>  // b.pmore
     710:	cmp	x20, x21
     714:	str	wzr, [x0, #4]
     718:	str	x1, [x0, #8]
     71c:	eor	w3, w25, #0x1
     720:	cset	w4, cc  // cc = lo, ul, last
     724:	tst	w4, w3
     728:	b.ne	820 <GOMP_loop_ull_ordered_dynamic_start+0x208>  // b.any
     72c:	stp	x21, x22, [x0, #16]
     730:	str	x20, [x0, #72]
     734:	mov	x20, x21
     738:	cbz	x2, 864 <GOMP_loop_ull_ordered_dynamic_start+0x24c>
     73c:	ldr	w4, [x2]
     740:	mov	x3, x4
     744:	cbz	w25, 834 <GOMP_loop_ull_ordered_dynamic_start+0x21c>
     748:	orr	x3, x3, x1
     74c:	mov	x2, #0x7fffffff            	// #2147483647
     750:	cmp	x3, x2
     754:	b.hi	76c <GOMP_loop_ull_ordered_dynamic_start+0x154>  // b.pmore
     758:	madd	x1, x4, x1, x1
     75c:	mvn	x1, x1
     760:	cmp	x1, x20
     764:	cset	w1, hi  // hi = pmore
     768:	str	w1, [x0, #4]
     76c:	add	x0, x0, #0x40
     770:	mov	w2, #0x1                   	// #1
     774:	ldaxr	w1, [x0]
     778:	cbnz	w1, 784 <GOMP_loop_ull_ordered_dynamic_start+0x16c>
     77c:	stxr	w3, w2, [x0]
     780:	cbnz	w3, 774 <GOMP_loop_ull_ordered_dynamic_start+0x15c>
     784:	cmp	w1, #0x0
     788:	b.ne	880 <GOMP_loop_ull_ordered_dynamic_start+0x268>  // b.any
     78c:	add	x1, x27, x19
     790:	ldr	x0, [x1, #32]
     794:	cbz	x0, 694 <GOMP_loop_ull_ordered_dynamic_start+0x7c>
     798:	ldr	x2, [x1, #24]
     79c:	add	x0, x0, #0x50
     7a0:	ldxr	x1, [x0]
     7a4:	stlxr	w3, x2, [x0]
     7a8:	cbnz	w3, 7a0 <GOMP_loop_ull_ordered_dynamic_start+0x188>
     7ac:	cmp	x1, #0x1
     7b0:	b.eq	694 <GOMP_loop_ull_ordered_dynamic_start+0x7c>  // b.none
     7b4:	bl	0 <gomp_ptrlock_set_slow>
     7b8:	mov	x1, x26
     7bc:	mov	x0, x24
     7c0:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     7c4:	mov	w20, w0
     7c8:	tst	w0, #0xff
     7cc:	b.eq	6ac <GOMP_loop_ull_ordered_dynamic_start+0x94>  // b.none
     7d0:	bl	0 <gomp_ordered_first>
     7d4:	b	6ac <GOMP_loop_ull_ordered_dynamic_start+0x94>
     7d8:	str	wzr, [x0, #4]
     7dc:	stp	x1, x20, [x0, #8]
     7e0:	str	x22, [x0, #24]
     7e4:	str	x20, [x0, #72]
     7e8:	cbnz	x2, 73c <GOMP_loop_ull_ordered_dynamic_start+0x124>
     7ec:	mov	x3, #0x1                   	// #1
     7f0:	mov	x4, x3
     7f4:	b	748 <GOMP_loop_ull_ordered_dynamic_start+0x130>
     7f8:	mov	x0, x1
     7fc:	bl	0 <gomp_mutex_unlock_slow>
     800:	mov	w0, w20
     804:	ldp	x19, x20, [sp, #16]
     808:	ldp	x21, x22, [sp, #32]
     80c:	ldp	x23, x24, [sp, #48]
     810:	ldp	x25, x26, [sp, #64]
     814:	ldr	x27, [sp, #80]
     818:	ldp	x29, x30, [sp], #96
     81c:	ret
     820:	stp	x20, x22, [x0, #16]
     824:	mov	x3, #0x1                   	// #1
     828:	mov	x4, x3
     82c:	str	x20, [x0, #72]
     830:	cbnz	x2, 73c <GOMP_loop_ull_ordered_dynamic_start+0x124>
     834:	neg	x2, x1
     838:	mov	x1, #0x7fffffff            	// #2147483647
     83c:	orr	x3, x3, x2
     840:	cmp	x3, x1
     844:	b.hi	870 <GOMP_loop_ull_ordered_dynamic_start+0x258>  // b.pmore
     848:	madd	x1, x4, x2, x2
     84c:	add	x1, x1, #0x1
     850:	cmp	x1, x20
     854:	cset	w1, cc  // cc = lo, ul, last
     858:	orr	w1, w1, #0x2
     85c:	str	w1, [x0, #4]
     860:	b	76c <GOMP_loop_ull_ordered_dynamic_start+0x154>
     864:	mov	x3, #0x1                   	// #1
     868:	mov	x4, x3
     86c:	b	744 <GOMP_loop_ull_ordered_dynamic_start+0x12c>
     870:	ldr	w1, [x0, #4]
     874:	b	858 <GOMP_loop_ull_ordered_dynamic_start+0x240>
     878:	bl	0 <gomp_mutex_lock_slow>
     87c:	b	694 <GOMP_loop_ull_ordered_dynamic_start+0x7c>
     880:	bl	0 <gomp_mutex_lock_slow>
     884:	b	78c <GOMP_loop_ull_ordered_dynamic_start+0x174>

0000000000000888 <GOMP_loop_ull_ordered_guided_start>:
     888:	stp	x29, x30, [sp, #-96]!
     88c:	mov	x29, sp
     890:	stp	x19, x20, [sp, #16]
     894:	mov	x20, x1
     898:	mrs	x19, tpidr_el0
     89c:	stp	x21, x22, [sp, #32]
     8a0:	mov	x22, x5
     8a4:	mov	x21, x6
     8a8:	stp	x23, x24, [sp, #48]
     8ac:	mov	x23, x2
     8b0:	mov	x24, x3
     8b4:	stp	x25, x26, [sp, #64]
     8b8:	mov	x25, x4
     8bc:	and	w26, w0, #0xff
     8c0:	mov	x0, #0x1                   	// #1
     8c4:	str	x27, [sp, #80]
     8c8:	bl	0 <gomp_work_share_start>
     8cc:	adrp	x27, 0 <gomp_tls_data>
     8d0:	ldr	x27, [x27]
     8d4:	tst	w0, #0xff
     8d8:	b.eq	974 <GOMP_loop_ull_ordered_guided_start+0xec>  // b.none
     8dc:	add	x0, x19, x27
     8e0:	mov	w1, #0x3                   	// #3
     8e4:	cmp	w26, #0x0
     8e8:	ccmp	x20, x23, #0x0, ne  // ne = any
     8ec:	ldr	x0, [x0, #24]
     8f0:	str	w1, [x0]
     8f4:	str	x25, [x0, #8]
     8f8:	b.ls	9f0 <GOMP_loop_ull_ordered_guided_start+0x168>  // b.plast
     8fc:	str	wzr, [x0, #4]
     900:	stp	x20, x24, [x0, #16]
     904:	str	x20, [x0, #72]
     908:	add	x0, x0, #0x40
     90c:	mov	w2, #0x1                   	// #1
     910:	ldaxr	w1, [x0]
     914:	cbnz	w1, 920 <GOMP_loop_ull_ordered_guided_start+0x98>
     918:	stxr	w3, w2, [x0]
     91c:	cbnz	w3, 910 <GOMP_loop_ull_ordered_guided_start+0x88>
     920:	cmp	w1, #0x0
     924:	b.ne	a5c <GOMP_loop_ull_ordered_guided_start+0x1d4>  // b.any
     928:	add	x1, x19, x27
     92c:	ldr	x0, [x1, #32]
     930:	cbz	x0, 99c <GOMP_loop_ull_ordered_guided_start+0x114>
     934:	ldr	x2, [x1, #24]
     938:	add	x0, x0, #0x50
     93c:	ldxr	x1, [x0]
     940:	stlxr	w3, x2, [x0]
     944:	cbnz	w3, 93c <GOMP_loop_ull_ordered_guided_start+0xb4>
     948:	cmp	x1, #0x1
     94c:	b.eq	99c <GOMP_loop_ull_ordered_guided_start+0x114>  // b.none
     950:	bl	0 <gomp_ptrlock_set_slow>
     954:	mov	x1, x21
     958:	mov	x0, x22
     95c:	bl	0 <gomp_iter_ull_guided_next_locked>
     960:	mov	w20, w0
     964:	tst	w0, #0xff
     968:	b.eq	9b4 <GOMP_loop_ull_ordered_guided_start+0x12c>  // b.none
     96c:	bl	0 <gomp_ordered_first>
     970:	b	9b4 <GOMP_loop_ull_ordered_guided_start+0x12c>
     974:	add	x0, x19, x27
     978:	mov	w2, #0x1                   	// #1
     97c:	ldr	x0, [x0, #24]
     980:	add	x0, x0, #0x40
     984:	ldaxr	w1, [x0]
     988:	cbnz	w1, 994 <GOMP_loop_ull_ordered_guided_start+0x10c>
     98c:	stxr	w3, w2, [x0]
     990:	cbnz	w3, 984 <GOMP_loop_ull_ordered_guided_start+0xfc>
     994:	cmp	w1, #0x0
     998:	b.ne	a54 <GOMP_loop_ull_ordered_guided_start+0x1cc>  // b.any
     99c:	mov	x1, x21
     9a0:	mov	x0, x22
     9a4:	bl	0 <gomp_iter_ull_guided_next_locked>
     9a8:	mov	w20, w0
     9ac:	tst	w0, #0xff
     9b0:	b.ne	96c <GOMP_loop_ull_ordered_guided_start+0xe4>  // b.any
     9b4:	add	x19, x19, x27
     9b8:	ldr	x1, [x19, #24]
     9bc:	add	x1, x1, #0x40
     9c0:	ldxr	w0, [x1]
     9c4:	stlxr	w2, wzr, [x1]
     9c8:	cbnz	w2, 9c0 <GOMP_loop_ull_ordered_guided_start+0x138>
     9cc:	tbnz	w0, #31, a2c <GOMP_loop_ull_ordered_guided_start+0x1a4>
     9d0:	mov	w0, w20
     9d4:	ldp	x19, x20, [sp, #16]
     9d8:	ldp	x21, x22, [sp, #32]
     9dc:	ldp	x23, x24, [sp, #48]
     9e0:	ldp	x25, x26, [sp, #64]
     9e4:	ldr	x27, [sp, #80]
     9e8:	ldp	x29, x30, [sp], #96
     9ec:	ret
     9f0:	cmp	x20, x23
     9f4:	eor	w1, w26, #0x1
     9f8:	cset	w2, cc  // cc = lo, ul, last
     9fc:	tst	w2, w1
     a00:	b.ne	a20 <GOMP_loop_ull_ordered_guided_start+0x198>  // b.any
     a04:	str	wzr, [x0, #4]
     a08:	stp	x23, x24, [x0, #16]
     a0c:	str	x20, [x0, #72]
     a10:	cbnz	w26, 908 <GOMP_loop_ull_ordered_guided_start+0x80>
     a14:	mov	w1, #0x2                   	// #2
     a18:	str	w1, [x0, #4]
     a1c:	b	908 <GOMP_loop_ull_ordered_guided_start+0x80>
     a20:	stp	x20, x24, [x0, #16]
     a24:	str	x20, [x0, #72]
     a28:	b	a14 <GOMP_loop_ull_ordered_guided_start+0x18c>
     a2c:	mov	x0, x1
     a30:	bl	0 <gomp_mutex_unlock_slow>
     a34:	mov	w0, w20
     a38:	ldp	x19, x20, [sp, #16]
     a3c:	ldp	x21, x22, [sp, #32]
     a40:	ldp	x23, x24, [sp, #48]
     a44:	ldp	x25, x26, [sp, #64]
     a48:	ldr	x27, [sp, #80]
     a4c:	ldp	x29, x30, [sp], #96
     a50:	ret
     a54:	bl	0 <gomp_mutex_lock_slow>
     a58:	b	99c <GOMP_loop_ull_ordered_guided_start+0x114>
     a5c:	bl	0 <gomp_mutex_lock_slow>
     a60:	b	928 <GOMP_loop_ull_ordered_guided_start+0xa0>
     a64:	nop

0000000000000a68 <GOMP_loop_ull_ordered_runtime_start>:
     a68:	adrp	x6, 0 <gomp_tls_data>
     a6c:	ldr	x6, [x6]
     a70:	mrs	x8, tpidr_el0
     a74:	adrp	x7, 0 <gomp_global_icv>
     a78:	add	x7, x7, #0x0
     a7c:	add	x8, x8, x6
     a80:	mov	x9, x4
     a84:	mov	x6, x5
     a88:	and	w0, w0, #0xff
     a8c:	ldr	x8, [x8, #80]
     a90:	cmp	x8, #0x0
     a94:	add	x8, x8, #0x90
     a98:	csel	x7, x7, x8, eq  // eq = none
     a9c:	ldr	w4, [x7, #8]
     aa0:	and	w8, w4, #0x7fffffff
     aa4:	cmp	w8, #0x3
     aa8:	b.eq	af0 <GOMP_loop_ull_ordered_runtime_start+0x88>  // b.none
     aac:	tst	w4, #0x7ffffffc
     ab0:	b.ne	ac8 <GOMP_loop_ull_ordered_runtime_start+0x60>  // b.any
     ab4:	cmp	w8, #0x1
     ab8:	b.ne	adc <GOMP_loop_ull_ordered_runtime_start+0x74>  // b.any
     abc:	ldrsw	x4, [x7, #12]
     ac0:	mov	x5, x9
     ac4:	b	4f8 <GOMP_loop_ull_ordered_static_start>
     ac8:	cmp	w8, #0x4
     acc:	b.ne	afc <GOMP_loop_ull_ordered_runtime_start+0x94>  // b.any
     ad0:	mov	x5, x9
     ad4:	mov	x4, #0x0                   	// #0
     ad8:	b	4f8 <GOMP_loop_ull_ordered_static_start>
     adc:	cmp	w8, #0x2
     ae0:	b.ne	afc <GOMP_loop_ull_ordered_runtime_start+0x94>  // b.any
     ae4:	ldrsw	x4, [x7, #12]
     ae8:	mov	x5, x9
     aec:	b	618 <GOMP_loop_ull_ordered_dynamic_start>
     af0:	ldrsw	x4, [x7, #12]
     af4:	mov	x5, x9
     af8:	b	888 <GOMP_loop_ull_ordered_guided_start>
     afc:	stp	x29, x30, [sp, #-16]!
     b00:	mov	x29, sp
     b04:	bl	0 <abort>

0000000000000b08 <GOMP_loop_ull_ordered_start>:
     b08:	stp	x29, x30, [sp, #-112]!
     b0c:	mov	x29, sp
     b10:	stp	x19, x20, [sp, #16]
     b14:	mrs	x19, tpidr_el0
     b18:	adrp	x20, 0 <gomp_tls_data>
     b1c:	ldr	x20, [x20]
     b20:	stp	x21, x22, [sp, #32]
     b24:	mov	x22, x1
     b28:	add	x8, x19, x20
     b2c:	stp	x25, x26, [sp, #64]
     b30:	mov	x26, x2
     b34:	ldp	x25, x21, [sp, #112]
     b38:	stp	x23, x24, [sp, #48]
     b3c:	mov	x23, x6
     b40:	stp	x27, x28, [sp, #80]
     b44:	mov	x24, x7
     b48:	mov	x27, x4
     b4c:	str	xzr, [x8, #72]
     b50:	and	w28, w0, #0xff
     b54:	stp	x3, x5, [sp, #96]
     b58:	cbz	x25, b60 <GOMP_loop_ull_ordered_start+0x58>
     b5c:	bl	0 <gomp_workshare_taskgroup_start>
     b60:	mov	x0, #0x1                   	// #1
     b64:	cbz	x21, b70 <GOMP_loop_ull_ordered_start+0x68>
     b68:	ldr	x0, [x21]
     b6c:	add	x0, x0, #0x1
     b70:	bl	0 <gomp_work_share_start>
     b74:	tst	w0, #0xff
     b78:	b.ne	ce0 <GOMP_loop_ull_ordered_start+0x1d8>  // b.any
     b7c:	add	x22, x19, x20
     b80:	ldr	x1, [x22, #24]
     b84:	cbz	x25, b98 <GOMP_loop_ull_ordered_start+0x90>
     b88:	ldr	x1, [x1, #88]
     b8c:	mov	x0, x25
     b90:	bl	0 <gomp_workshare_task_reduction_register>
     b94:	ldr	x1, [x22, #24]
     b98:	ldr	w27, [x1]
     b9c:	cmp	x27, #0x1
     ba0:	b.eq	c60 <GOMP_loop_ull_ordered_start+0x158>  // b.none
     ba4:	add	x0, x1, #0x40
     ba8:	mov	w2, #0x1                   	// #1
     bac:	ldaxr	w1, [x0]
     bb0:	cbnz	w1, bbc <GOMP_loop_ull_ordered_start+0xb4>
     bb4:	stxr	w3, w2, [x0]
     bb8:	cbnz	w3, bac <GOMP_loop_ull_ordered_start+0xa4>
     bbc:	cmp	w1, #0x0
     bc0:	b.ne	ea8 <GOMP_loop_ull_ordered_start+0x3a0>  // b.any
     bc4:	cbz	x21, bfc <GOMP_loop_ull_ordered_start+0xf4>
     bc8:	add	x0, x19, x20
     bcc:	ldr	x1, [x0, #24]
     bd0:	add	x3, x19, x20
     bd4:	ldr	x0, [x1, #32]
     bd8:	mov	x2, #0x4                   	// #4
     bdc:	ldr	x1, [x3, #16]
     be0:	cbz	x1, bec <GOMP_loop_ull_ordered_start+0xe4>
     be4:	ldr	w2, [x1]
     be8:	lsl	x2, x2, #2
     bec:	add	x0, x0, x2
     bf0:	add	x0, x0, #0x7
     bf4:	and	x0, x0, #0xfffffffffffffff8
     bf8:	str	x0, [x21]
     bfc:	cmp	x27, #0x2
     c00:	b.eq	cc4 <GOMP_loop_ull_ordered_start+0x1bc>  // b.none
     c04:	b.le	ca4 <GOMP_loop_ull_ordered_start+0x19c>
     c08:	cmp	x27, #0x3
     c0c:	b.ne	c98 <GOMP_loop_ull_ordered_start+0x190>  // b.any
     c10:	mov	x1, x24
     c14:	mov	x0, x23
     c18:	bl	0 <gomp_iter_ull_guided_next_locked>
     c1c:	and	w21, w0, #0xff
     c20:	cbnz	w21, cd8 <GOMP_loop_ull_ordered_start+0x1d0>
     c24:	add	x19, x19, x20
     c28:	ldr	x0, [x19, #24]
     c2c:	add	x0, x0, #0x40
     c30:	ldxr	w1, [x0]
     c34:	stlxr	w2, wzr, [x0]
     c38:	cbnz	w2, c30 <GOMP_loop_ull_ordered_start+0x128>
     c3c:	tbnz	w1, #31, ea0 <GOMP_loop_ull_ordered_start+0x398>
     c40:	mov	w0, w21
     c44:	ldp	x19, x20, [sp, #16]
     c48:	ldp	x21, x22, [sp, #32]
     c4c:	ldp	x23, x24, [sp, #48]
     c50:	ldp	x25, x26, [sp, #64]
     c54:	ldp	x27, x28, [sp, #80]
     c58:	ldp	x29, x30, [sp], #112
     c5c:	ret
     c60:	cbnz	x21, bd0 <GOMP_loop_ull_ordered_start+0xc8>
     c64:	mov	x1, x24
     c68:	mov	x0, x23
     c6c:	bl	0 <gomp_iter_ull_static_next>
     c70:	cmp	w0, #0x0
     c74:	cset	w21, eq  // eq = none
     c78:	mov	w0, w21
     c7c:	ldp	x19, x20, [sp, #16]
     c80:	ldp	x21, x22, [sp, #32]
     c84:	ldp	x23, x24, [sp, #48]
     c88:	ldp	x25, x26, [sp, #64]
     c8c:	ldp	x27, x28, [sp, #80]
     c90:	ldp	x29, x30, [sp], #112
     c94:	ret
     c98:	cmp	x27, #0x4
     c9c:	b.eq	c64 <GOMP_loop_ull_ordered_start+0x15c>  // b.none
     ca0:	bl	0 <abort>
     ca4:	cmp	x27, #0x1
     ca8:	b.ne	ca0 <GOMP_loop_ull_ordered_start+0x198>  // b.any
     cac:	mov	x1, x24
     cb0:	mov	x0, x23
     cb4:	bl	0 <gomp_iter_ull_static_next>
     cb8:	cmp	w0, #0x0
     cbc:	cset	w21, eq  // eq = none
     cc0:	b	c78 <GOMP_loop_ull_ordered_start+0x170>
     cc4:	mov	x1, x24
     cc8:	mov	x0, x23
     ccc:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     cd0:	and	w21, w0, #0xff
     cd4:	cbz	w21, c24 <GOMP_loop_ull_ordered_start+0x11c>
     cd8:	bl	0 <gomp_ordered_first>
     cdc:	b	c24 <GOMP_loop_ull_ordered_start+0x11c>
     ce0:	mov	x0, x27
     ce4:	add	x1, sp, #0x68
     ce8:	bl	0 <gomp_adjust_sched>
     cec:	mov	x27, x0
     cf0:	add	x2, x19, x20
     cf4:	cmp	w28, #0x0
     cf8:	ldr	x1, [sp, #104]
     cfc:	ccmp	x22, x26, #0x0, ne  // ne = any
     d00:	ldr	x0, [x2, #24]
     d04:	str	w27, [x0]
     d08:	str	x1, [x0, #8]
     d0c:	b.ls	dfc <GOMP_loop_ull_ordered_start+0x2f4>  // b.plast
     d10:	ldr	x3, [sp, #96]
     d14:	str	wzr, [x0, #4]
     d18:	stp	x22, x3, [x0, #16]
     d1c:	cmp	w27, #0x2
     d20:	str	x22, [x0, #72]
     d24:	b.ne	d74 <GOMP_loop_ull_ordered_start+0x26c>  // b.any
     d28:	ldr	x3, [sp, #96]
     d2c:	ldr	x2, [x2, #16]
     d30:	mul	x1, x1, x3
     d34:	mov	x3, #0x1                   	// #1
     d38:	str	x1, [x0, #8]
     d3c:	mov	x4, x3
     d40:	cbz	x2, d50 <GOMP_loop_ull_ordered_start+0x248>
     d44:	ldr	w4, [x2]
     d48:	mov	x3, x4
     d4c:	cbz	w28, e68 <GOMP_loop_ull_ordered_start+0x360>
     d50:	orr	x3, x1, x3
     d54:	mov	x2, #0x7fffffff            	// #2147483647
     d58:	cmp	x3, x2
     d5c:	b.hi	d74 <GOMP_loop_ull_ordered_start+0x26c>  // b.pmore
     d60:	madd	x1, x4, x1, x1
     d64:	mvn	x1, x1
     d68:	cmp	x1, x22
     d6c:	cset	w1, hi  // hi = pmore
     d70:	str	w1, [x0, #4]
     d74:	cbz	x25, d9c <GOMP_loop_ull_ordered_start+0x294>
     d78:	mov	x0, x25
     d7c:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     d80:	add	x0, x19, x20
     d84:	mov	w2, #0x1                   	// #1
     d88:	ldr	x1, [x0, #80]
     d8c:	ldr	x0, [x0, #24]
     d90:	ldr	x1, [x1, #40]
     d94:	strb	w2, [x1, #50]
     d98:	str	x25, [x0, #88]
     d9c:	cmp	x27, #0x1
     da0:	b.eq	e98 <GOMP_loop_ull_ordered_start+0x390>  // b.none
     da4:	add	x0, x19, x20
     da8:	mov	w2, #0x1                   	// #1
     dac:	ldr	x0, [x0, #24]
     db0:	add	x0, x0, #0x40
     db4:	ldaxr	w1, [x0]
     db8:	cbnz	w1, dc4 <GOMP_loop_ull_ordered_start+0x2bc>
     dbc:	stxr	w3, w2, [x0]
     dc0:	cbnz	w3, db4 <GOMP_loop_ull_ordered_start+0x2ac>
     dc4:	cmp	w1, #0x0
     dc8:	b.ne	ee0 <GOMP_loop_ull_ordered_start+0x3d8>  // b.any
     dcc:	add	x1, x19, x20
     dd0:	ldr	x0, [x1, #32]
     dd4:	cbz	x0, bc4 <GOMP_loop_ull_ordered_start+0xbc>
     dd8:	ldr	x2, [x1, #24]
     ddc:	add	x0, x0, #0x50
     de0:	ldxr	x1, [x0]
     de4:	stlxr	w3, x2, [x0]
     de8:	cbnz	w3, de0 <GOMP_loop_ull_ordered_start+0x2d8>
     dec:	cmp	x1, #0x1
     df0:	b.eq	bc4 <GOMP_loop_ull_ordered_start+0xbc>  // b.none
     df4:	bl	0 <gomp_ptrlock_set_slow>
     df8:	b	bc4 <GOMP_loop_ull_ordered_start+0xbc>
     dfc:	cmp	x22, x26
     e00:	str	wzr, [x0, #4]
     e04:	eor	w3, w28, #0x1
     e08:	cset	w5, cc  // cc = lo, ul, last
     e0c:	tst	w5, w3
     e10:	b.ne	e38 <GOMP_loop_ull_ordered_start+0x330>  // b.any
     e14:	ldr	x3, [sp, #96]
     e18:	stp	x26, x3, [x0, #16]
     e1c:	cmp	w27, #0x2
     e20:	str	x22, [x0, #72]
     e24:	b.eq	eb0 <GOMP_loop_ull_ordered_start+0x3a8>  // b.none
     e28:	cbnz	w28, d74 <GOMP_loop_ull_ordered_start+0x26c>
     e2c:	mov	w1, #0x2                   	// #2
     e30:	str	w1, [x0, #4]
     e34:	b	d74 <GOMP_loop_ull_ordered_start+0x26c>
     e38:	ldr	x3, [sp, #96]
     e3c:	stp	x22, x3, [x0, #16]
     e40:	cmp	w27, #0x2
     e44:	str	x22, [x0, #72]
     e48:	b.ne	e2c <GOMP_loop_ull_ordered_start+0x324>  // b.any
     e4c:	ldr	x3, [sp, #96]
     e50:	ldr	x2, [x2, #16]
     e54:	mul	x1, x1, x3
     e58:	mov	x3, #0x1                   	// #1
     e5c:	str	x1, [x0, #8]
     e60:	mov	x4, x3
     e64:	cbnz	x2, d44 <GOMP_loop_ull_ordered_start+0x23c>
     e68:	neg	x2, x1
     e6c:	mov	x1, #0x7fffffff            	// #2147483647
     e70:	orr	x3, x2, x3
     e74:	cmp	x3, x1
     e78:	b.hi	ed0 <GOMP_loop_ull_ordered_start+0x3c8>  // b.pmore
     e7c:	madd	x1, x4, x2, x2
     e80:	add	x1, x1, #0x1
     e84:	cmp	x1, x22
     e88:	cset	w1, cc  // cc = lo, ul, last
     e8c:	orr	w1, w1, #0x2
     e90:	str	w1, [x0, #4]
     e94:	b	d74 <GOMP_loop_ull_ordered_start+0x26c>
     e98:	bl	0 <gomp_ordered_static_init>
     e9c:	b	dcc <GOMP_loop_ull_ordered_start+0x2c4>
     ea0:	bl	0 <gomp_mutex_unlock_slow>
     ea4:	b	c40 <GOMP_loop_ull_ordered_start+0x138>
     ea8:	bl	0 <gomp_mutex_lock_slow>
     eac:	b	bc4 <GOMP_loop_ull_ordered_start+0xbc>
     eb0:	ldr	x2, [x2, #16]
     eb4:	mul	x1, x1, x3
     eb8:	str	x1, [x0, #8]
     ebc:	mov	x22, x26
     ec0:	cbnz	x2, d44 <GOMP_loop_ull_ordered_start+0x23c>
     ec4:	mov	x3, #0x1                   	// #1
     ec8:	mov	x4, x3
     ecc:	b	d4c <GOMP_loop_ull_ordered_start+0x244>
     ed0:	ldr	w1, [x0, #4]
     ed4:	orr	w1, w1, #0x2
     ed8:	str	w1, [x0, #4]
     edc:	b	d74 <GOMP_loop_ull_ordered_start+0x26c>
     ee0:	bl	0 <gomp_mutex_lock_slow>
     ee4:	b	dcc <GOMP_loop_ull_ordered_start+0x2c4>

0000000000000ee8 <GOMP_loop_ull_doacross_static_start>:
     ee8:	stp	x29, x30, [sp, #-64]!
     eec:	mrs	x5, tpidr_el0
     ef0:	mov	x29, sp
     ef4:	stp	x19, x20, [sp, #16]
     ef8:	mov	x20, x3
     efc:	adrp	x19, 0 <gomp_tls_data>
     f00:	ldr	x19, [x19]
     f04:	stp	x21, x22, [sp, #32]
     f08:	mov	x22, x1
     f0c:	add	x19, x5, x19
     f10:	stp	x23, x24, [sp, #48]
     f14:	mov	x21, x4
     f18:	mov	w23, w0
     f1c:	mov	x24, x2
     f20:	mov	x0, #0x0                   	// #0
     f24:	str	xzr, [x19, #72]
     f28:	bl	0 <gomp_work_share_start>
     f2c:	tst	w0, #0xff
     f30:	b.ne	f5c <GOMP_loop_ull_doacross_static_start+0x74>  // b.any
     f34:	mov	x1, x21
     f38:	mov	x0, x20
     f3c:	bl	0 <gomp_iter_ull_static_next>
     f40:	cmp	w0, #0x0
     f44:	cset	w0, eq  // eq = none
     f48:	ldp	x19, x20, [sp, #16]
     f4c:	ldp	x21, x22, [sp, #32]
     f50:	ldp	x23, x24, [sp, #48]
     f54:	ldp	x29, x30, [sp], #64
     f58:	ret
     f5c:	ldr	x4, [x19, #24]
     f60:	mov	x5, #0x1                   	// #1
     f64:	ldr	x3, [x22]
     f68:	mov	w0, w23
     f6c:	stp	x5, x24, [x4]
     f70:	mov	x2, x24
     f74:	mov	x1, x22
     f78:	stp	x3, x5, [x4, #16]
     f7c:	mov	x3, #0x0                   	// #0
     f80:	str	xzr, [x4, #72]
     f84:	bl	0 <gomp_doacross_ull_init>
     f88:	ldr	x0, [x19, #32]
     f8c:	cbz	x0, f34 <GOMP_loop_ull_doacross_static_start+0x4c>
     f90:	ldr	x2, [x19, #24]
     f94:	add	x0, x0, #0x50
     f98:	ldxr	x1, [x0]
     f9c:	stlxr	w3, x2, [x0]
     fa0:	cbnz	w3, f98 <GOMP_loop_ull_doacross_static_start+0xb0>
     fa4:	cmp	x1, #0x1
     fa8:	b.eq	f34 <GOMP_loop_ull_doacross_static_start+0x4c>  // b.none
     fac:	bl	0 <gomp_ptrlock_set_slow>
     fb0:	b	f34 <GOMP_loop_ull_doacross_static_start+0x4c>
     fb4:	nop

0000000000000fb8 <GOMP_loop_ull_doacross_dynamic_start>:
     fb8:	stp	x29, x30, [sp, #-80]!
     fbc:	mov	x29, sp
     fc0:	stp	x19, x20, [sp, #16]
     fc4:	mov	x19, x2
     fc8:	mov	x20, x3
     fcc:	stp	x21, x22, [sp, #32]
     fd0:	mov	x22, x1
     fd4:	mov	x21, x4
     fd8:	stp	x23, x24, [sp, #48]
     fdc:	mov	w23, w0
     fe0:	mov	x0, #0x0                   	// #0
     fe4:	bl	0 <gomp_work_share_start>
     fe8:	tst	w0, #0xff
     fec:	b.ne	100c <GOMP_loop_ull_doacross_dynamic_start+0x54>  // b.any
     ff0:	mov	x1, x21
     ff4:	mov	x0, x20
     ff8:	ldp	x19, x20, [sp, #16]
     ffc:	ldp	x21, x22, [sp, #32]
    1000:	ldp	x23, x24, [sp, #48]
    1004:	ldp	x29, x30, [sp], #80
    1008:	b	0 <gomp_iter_ull_dynamic_next>
    100c:	ldr	x3, [x22]
    1010:	str	x25, [sp, #64]
    1014:	adrp	x25, 0 <gomp_tls_data>
    1018:	ldr	x25, [x25]
    101c:	mrs	x24, tpidr_el0
    1020:	mov	x4, #0x2                   	// #2
    1024:	mov	x1, #0x1                   	// #1
    1028:	add	x2, x24, x25
    102c:	ldr	x0, [x2, #24]
    1030:	stp	x4, x19, [x0]
    1034:	ldr	x2, [x2, #16]
    1038:	str	x3, [x0, #16]
    103c:	str	x1, [x0, #24]
    1040:	str	xzr, [x0, #72]
    1044:	cbz	x2, 10f4 <GOMP_loop_ull_doacross_dynamic_start+0x13c>
    1048:	ldr	w2, [x2]
    104c:	mov	x1, x2
    1050:	orr	x1, x19, x1
    1054:	mov	x4, #0x7fffffff            	// #2147483647
    1058:	cmp	x1, x4
    105c:	b.hi	1074 <GOMP_loop_ull_doacross_dynamic_start+0xbc>  // b.pmore
    1060:	madd	x2, x2, x19, x19
    1064:	mvn	x2, x2
    1068:	cmp	x3, x2
    106c:	cset	w1, cc  // cc = lo, ul, last
    1070:	str	w1, [x0, #4]
    1074:	add	x24, x24, x25
    1078:	mov	w0, w23
    107c:	mov	x2, x19
    1080:	mov	x1, x22
    1084:	mov	x3, #0x0                   	// #0
    1088:	bl	0 <gomp_doacross_ull_init>
    108c:	ldr	x0, [x24, #32]
    1090:	cbz	x0, 10d4 <GOMP_loop_ull_doacross_dynamic_start+0x11c>
    1094:	ldr	x2, [x24, #24]
    1098:	add	x0, x0, #0x50
    109c:	ldxr	x1, [x0]
    10a0:	stlxr	w3, x2, [x0]
    10a4:	cbnz	w3, 109c <GOMP_loop_ull_doacross_dynamic_start+0xe4>
    10a8:	cmp	x1, #0x1
    10ac:	b.eq	10d4 <GOMP_loop_ull_doacross_dynamic_start+0x11c>  // b.none
    10b0:	bl	0 <gomp_ptrlock_set_slow>
    10b4:	mov	x1, x21
    10b8:	mov	x0, x20
    10bc:	ldp	x19, x20, [sp, #16]
    10c0:	ldp	x21, x22, [sp, #32]
    10c4:	ldp	x23, x24, [sp, #48]
    10c8:	ldr	x25, [sp, #64]
    10cc:	ldp	x29, x30, [sp], #80
    10d0:	b	0 <gomp_iter_ull_dynamic_next>
    10d4:	mov	x1, x21
    10d8:	mov	x0, x20
    10dc:	ldp	x19, x20, [sp, #16]
    10e0:	ldp	x21, x22, [sp, #32]
    10e4:	ldp	x23, x24, [sp, #48]
    10e8:	ldr	x25, [sp, #64]
    10ec:	ldp	x29, x30, [sp], #80
    10f0:	b	0 <gomp_iter_ull_dynamic_next>
    10f4:	mov	x2, x1
    10f8:	b	1050 <GOMP_loop_ull_doacross_dynamic_start+0x98>
    10fc:	nop

0000000000001100 <GOMP_loop_ull_doacross_guided_start>:
    1100:	stp	x29, x30, [sp, #-64]!
    1104:	mov	x29, sp
    1108:	stp	x19, x20, [sp, #16]
    110c:	mov	x19, x3
    1110:	mov	x20, x4
    1114:	stp	x21, x22, [sp, #32]
    1118:	mov	x22, x2
    111c:	stp	x23, x24, [sp, #48]
    1120:	mov	w23, w0
    1124:	mov	x24, x1
    1128:	mov	x0, #0x0                   	// #0
    112c:	bl	0 <gomp_work_share_start>
    1130:	tst	w0, #0xff
    1134:	b.ne	1154 <GOMP_loop_ull_doacross_guided_start+0x54>  // b.any
    1138:	mov	x1, x20
    113c:	mov	x0, x19
    1140:	ldp	x19, x20, [sp, #16]
    1144:	ldp	x21, x22, [sp, #32]
    1148:	ldp	x23, x24, [sp, #48]
    114c:	ldp	x29, x30, [sp], #64
    1150:	b	0 <gomp_iter_ull_guided_next>
    1154:	adrp	x0, 0 <gomp_tls_data>
    1158:	ldr	x0, [x0]
    115c:	mrs	x21, tpidr_el0
    1160:	ldr	x6, [x24]
    1164:	add	x21, x21, x0
    1168:	mov	x5, #0x1                   	// #1
    116c:	mov	x7, #0x3                   	// #3
    1170:	mov	w0, w23
    1174:	mov	x2, x22
    1178:	ldr	x4, [x21, #24]
    117c:	mov	x1, x24
    1180:	mov	x3, #0x0                   	// #0
    1184:	stp	x7, x22, [x4]
    1188:	stp	x6, x5, [x4, #16]
    118c:	str	xzr, [x4, #72]
    1190:	bl	0 <gomp_doacross_ull_init>
    1194:	ldr	x0, [x21, #32]
    1198:	cbz	x0, 1138 <GOMP_loop_ull_doacross_guided_start+0x38>
    119c:	ldr	x2, [x21, #24]
    11a0:	add	x0, x0, #0x50
    11a4:	ldxr	x1, [x0]
    11a8:	stlxr	w3, x2, [x0]
    11ac:	cbnz	w3, 11a4 <GOMP_loop_ull_doacross_guided_start+0xa4>
    11b0:	cmp	x1, #0x1
    11b4:	b.eq	1138 <GOMP_loop_ull_doacross_guided_start+0x38>  // b.none
    11b8:	bl	0 <gomp_ptrlock_set_slow>
    11bc:	mov	x1, x20
    11c0:	mov	x0, x19
    11c4:	ldp	x19, x20, [sp, #16]
    11c8:	ldp	x21, x22, [sp, #32]
    11cc:	ldp	x23, x24, [sp, #48]
    11d0:	ldp	x29, x30, [sp], #64
    11d4:	b	0 <gomp_iter_ull_guided_next>

00000000000011d8 <GOMP_loop_ull_doacross_runtime_start>:
    11d8:	adrp	x4, 0 <gomp_tls_data>
    11dc:	ldr	x4, [x4]
    11e0:	mrs	x6, tpidr_el0
    11e4:	adrp	x5, 0 <gomp_global_icv>
    11e8:	add	x5, x5, #0x0
    11ec:	add	x6, x6, x4
    11f0:	mov	x7, x2
    11f4:	mov	x4, x3
    11f8:	ldr	x6, [x6, #80]
    11fc:	cmp	x6, #0x0
    1200:	add	x6, x6, #0x90
    1204:	csel	x5, x5, x6, eq  // eq = none
    1208:	ldr	w2, [x5, #8]
    120c:	and	w6, w2, #0x7fffffff
    1210:	cmp	w6, #0x3
    1214:	b.eq	125c <GOMP_loop_ull_doacross_runtime_start+0x84>  // b.none
    1218:	tst	w2, #0x7ffffffc
    121c:	b.ne	1234 <GOMP_loop_ull_doacross_runtime_start+0x5c>  // b.any
    1220:	cmp	w6, #0x1
    1224:	b.ne	1248 <GOMP_loop_ull_doacross_runtime_start+0x70>  // b.any
    1228:	ldrsw	x2, [x5, #12]
    122c:	mov	x3, x7
    1230:	b	ee8 <GOMP_loop_ull_doacross_static_start>
    1234:	cmp	w6, #0x4
    1238:	b.ne	1268 <GOMP_loop_ull_doacross_runtime_start+0x90>  // b.any
    123c:	mov	x3, x7
    1240:	mov	x2, #0x0                   	// #0
    1244:	b	ee8 <GOMP_loop_ull_doacross_static_start>
    1248:	cmp	w6, #0x2
    124c:	b.ne	1268 <GOMP_loop_ull_doacross_runtime_start+0x90>  // b.any
    1250:	ldrsw	x2, [x5, #12]
    1254:	mov	x3, x7
    1258:	b	fb8 <GOMP_loop_ull_doacross_dynamic_start>
    125c:	ldrsw	x2, [x5, #12]
    1260:	mov	x3, x7
    1264:	b	1100 <GOMP_loop_ull_doacross_guided_start>
    1268:	stp	x29, x30, [sp, #-16]!
    126c:	mov	x29, sp
    1270:	bl	0 <abort>
    1274:	nop

0000000000001278 <GOMP_loop_ull_static_next>:
    1278:	stp	x29, x30, [sp, #-16]!
    127c:	mov	x29, sp
    1280:	bl	0 <gomp_iter_ull_static_next>
    1284:	cmp	w0, #0x0
    1288:	cset	w0, eq  // eq = none
    128c:	ldp	x29, x30, [sp], #16
    1290:	ret
    1294:	nop

0000000000001298 <GOMP_loop_ull_dynamic_next>:
    1298:	b	0 <gomp_iter_ull_dynamic_next>
    129c:	nop

00000000000012a0 <GOMP_loop_ull_guided_next>:
    12a0:	b	0 <gomp_iter_ull_guided_next>
    12a4:	nop

00000000000012a8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>:
    12a8:	adrp	x3, 0 <gomp_tls_data>
    12ac:	ldr	x3, [x3]
    12b0:	mrs	x2, tpidr_el0
    12b4:	add	x2, x2, x3
    12b8:	ldr	x2, [x2, #24]
    12bc:	ldr	w2, [x2]
    12c0:	cmp	w2, #0x2
    12c4:	b.eq	131c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x74>  // b.none
    12c8:	stp	x29, x30, [sp, #-16]!
    12cc:	mov	x3, x0
    12d0:	mov	x4, x1
    12d4:	mov	x29, sp
    12d8:	b.ls	12ec <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x44>  // b.plast
    12dc:	cmp	w2, #0x3
    12e0:	b.ne	1310 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x68>  // b.any
    12e4:	ldp	x29, x30, [sp], #16
    12e8:	b	0 <gomp_iter_ull_guided_next>
    12ec:	cmp	w2, #0x1
    12f0:	b.ne	1318 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x70>  // b.any
    12f4:	mov	x1, x4
    12f8:	mov	x0, x3
    12fc:	bl	0 <gomp_iter_ull_static_next>
    1300:	cmp	w0, #0x0
    1304:	cset	w0, eq  // eq = none
    1308:	ldp	x29, x30, [sp], #16
    130c:	ret
    1310:	cmp	w2, #0x4
    1314:	b.eq	12f4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x4c>  // b.none
    1318:	bl	0 <abort>
    131c:	b	0 <gomp_iter_ull_dynamic_next>

0000000000001320 <GOMP_loop_ull_start>:
    1320:	stp	x29, x30, [sp, #-112]!
    1324:	mov	x29, sp
    1328:	stp	x19, x20, [sp, #16]
    132c:	mov	x20, x1
    1330:	adrp	x19, 0 <gomp_tls_data>
    1334:	ldr	x19, [x19]
    1338:	stp	x23, x24, [sp, #48]
    133c:	mrs	x24, tpidr_el0
    1340:	add	x8, x24, x19
    1344:	stp	x27, x28, [sp, #80]
    1348:	mov	x23, x2
    134c:	and	w28, w0, #0xff
    1350:	ldr	x27, [sp, #112]
    1354:	stp	x21, x22, [sp, #32]
    1358:	mov	x21, x6
    135c:	stp	x25, x26, [sp, #64]
    1360:	mov	x22, x7
    1364:	mov	x25, x3
    1368:	str	xzr, [x8, #72]
    136c:	mov	x26, x4
    1370:	stp	x8, x5, [sp, #96]
    1374:	cbz	x27, 13e4 <GOMP_loop_ull_start+0xc4>
    1378:	bl	0 <gomp_workshare_taskgroup_start>
    137c:	mov	x0, #0x0                   	// #0
    1380:	bl	0 <gomp_work_share_start>
    1384:	tst	w0, #0xff
    1388:	ldr	x8, [sp, #96]
    138c:	b.ne	13f4 <GOMP_loop_ull_start+0xd4>  // b.any
    1390:	ldr	x1, [x8, #24]
    1394:	mov	x0, x27
    1398:	ldr	x1, [x1, #88]
    139c:	bl	0 <gomp_workshare_task_reduction_register>
    13a0:	ldr	x0, [sp, #120]
    13a4:	cbz	x0, 13bc <GOMP_loop_ull_start+0x9c>
    13a8:	add	x19, x24, x19
    13ac:	ldr	x1, [sp, #120]
    13b0:	ldr	x0, [x19, #24]
    13b4:	ldr	x0, [x0, #32]
    13b8:	str	x0, [x1]
    13bc:	mov	x1, x22
    13c0:	mov	x0, x21
    13c4:	bl	12a8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
    13c8:	ldp	x19, x20, [sp, #16]
    13cc:	ldp	x21, x22, [sp, #32]
    13d0:	ldp	x23, x24, [sp, #48]
    13d4:	ldp	x25, x26, [sp, #64]
    13d8:	ldp	x27, x28, [sp, #80]
    13dc:	ldp	x29, x30, [sp], #112
    13e0:	ret
    13e4:	mov	x0, #0x0                   	// #0
    13e8:	bl	0 <gomp_work_share_start>
    13ec:	tst	w0, #0xff
    13f0:	b.eq	13a0 <GOMP_loop_ull_start+0x80>  // b.none
    13f4:	add	x1, sp, #0x68
    13f8:	mov	x0, x26
    13fc:	bl	0 <gomp_adjust_sched>
    1400:	add	x3, x24, x19
    1404:	cmp	w28, #0x0
    1408:	ldr	x2, [sp, #104]
    140c:	ccmp	x20, x23, #0x0, ne  // ne = any
    1410:	ldr	x1, [x3, #24]
    1414:	str	w0, [x1]
    1418:	str	x2, [x1, #8]
    141c:	b.ls	1500 <GOMP_loop_ull_start+0x1e0>  // b.plast
    1420:	str	wzr, [x1, #4]
    1424:	cmp	w0, #0x2
    1428:	stp	x20, x25, [x1, #16]
    142c:	str	x20, [x1, #72]
    1430:	b.ne	147c <GOMP_loop_ull_start+0x15c>  // b.any
    1434:	ldr	x0, [x3, #16]
    1438:	mul	x25, x2, x25
    143c:	str	x25, [x1, #8]
    1440:	mov	x3, #0x1                   	// #1
    1444:	mov	x2, x3
    1448:	cbz	x0, 1458 <GOMP_loop_ull_start+0x138>
    144c:	ldr	w2, [x0]
    1450:	mov	x3, x2
    1454:	cbz	w28, 1580 <GOMP_loop_ull_start+0x260>
    1458:	orr	x3, x3, x25
    145c:	mov	x0, #0x7fffffff            	// #2147483647
    1460:	cmp	x3, x0
    1464:	b.hi	147c <GOMP_loop_ull_start+0x15c>  // b.pmore
    1468:	madd	x25, x2, x25, x25
    146c:	mvn	x2, x25
    1470:	cmp	x2, x20
    1474:	cset	w0, hi  // hi = pmore
    1478:	str	w0, [x1, #4]
    147c:	cbz	x27, 14a4 <GOMP_loop_ull_start+0x184>
    1480:	mov	x0, x27
    1484:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    1488:	add	x0, x24, x19
    148c:	mov	w2, #0x1                   	// #1
    1490:	ldr	x1, [x0, #80]
    1494:	ldr	x0, [x0, #24]
    1498:	ldr	x1, [x1, #40]
    149c:	strb	w2, [x1, #50]
    14a0:	str	x27, [x0, #88]
    14a4:	ldr	x0, [sp, #120]
    14a8:	cbz	x0, 14d0 <GOMP_loop_ull_start+0x1b0>
    14ac:	add	x1, x24, x19
    14b0:	ldr	x0, [x0]
    14b4:	ldr	x20, [x1, #24]
    14b8:	cmp	x0, #0x20
    14bc:	b.ls	1538 <GOMP_loop_ull_start+0x218>  // b.plast
    14c0:	bl	0 <gomp_malloc_cleared>
    14c4:	str	x0, [x20, #32]
    14c8:	ldr	x1, [sp, #120]
    14cc:	str	x0, [x1]
    14d0:	add	x19, x24, x19
    14d4:	ldr	x0, [x19, #32]
    14d8:	cbz	x0, 13bc <GOMP_loop_ull_start+0x9c>
    14dc:	ldr	x2, [x19, #24]
    14e0:	add	x0, x0, #0x50
    14e4:	ldxr	x1, [x0]
    14e8:	stlxr	w3, x2, [x0]
    14ec:	cbnz	w3, 14e4 <GOMP_loop_ull_start+0x1c4>
    14f0:	cmp	x1, #0x1
    14f4:	b.eq	13bc <GOMP_loop_ull_start+0x9c>  // b.none
    14f8:	bl	0 <gomp_ptrlock_set_slow>
    14fc:	b	13bc <GOMP_loop_ull_start+0x9c>
    1500:	cmp	x20, x23
    1504:	str	wzr, [x1, #4]
    1508:	eor	w4, w28, #0x1
    150c:	cset	w5, cc  // cc = lo, ul, last
    1510:	tst	w5, w4
    1514:	b.ne	1554 <GOMP_loop_ull_start+0x234>  // b.any
    1518:	stp	x23, x25, [x1, #16]
    151c:	cmp	w0, #0x2
    1520:	str	x20, [x1, #72]
    1524:	b.eq	15b0 <GOMP_loop_ull_start+0x290>  // b.none
    1528:	cbnz	w28, 147c <GOMP_loop_ull_start+0x15c>
    152c:	mov	w0, #0x2                   	// #2
    1530:	str	w0, [x1, #4]
    1534:	b	147c <GOMP_loop_ull_start+0x15c>
    1538:	mov	x2, x0
    153c:	mov	w1, #0x0                   	// #0
    1540:	add	x0, x20, #0x60
    1544:	bl	0 <memset>
    1548:	ldr	x1, [sp, #120]
    154c:	str	x0, [x1]
    1550:	b	14d0 <GOMP_loop_ull_start+0x1b0>
    1554:	stp	x20, x25, [x1, #16]
    1558:	cmp	w0, #0x2
    155c:	str	x20, [x1, #72]
    1560:	b.ne	152c <GOMP_loop_ull_start+0x20c>  // b.any
    1564:	ldr	x0, [x3, #16]
    1568:	mul	x25, x2, x25
    156c:	str	x25, [x1, #8]
    1570:	mov	x3, #0x1                   	// #1
    1574:	mov	x2, x3
    1578:	cbnz	x0, 144c <GOMP_loop_ull_start+0x12c>
    157c:	nop
    1580:	neg	x0, x25
    1584:	mov	x4, #0x7fffffff            	// #2147483647
    1588:	orr	x3, x0, x3
    158c:	cmp	x3, x4
    1590:	b.hi	15d0 <GOMP_loop_ull_start+0x2b0>  // b.pmore
    1594:	madd	x0, x2, x0, x0
    1598:	add	x0, x0, #0x1
    159c:	cmp	x20, x0
    15a0:	cset	w0, hi  // hi = pmore
    15a4:	orr	w0, w0, #0x2
    15a8:	str	w0, [x1, #4]
    15ac:	b	147c <GOMP_loop_ull_start+0x15c>
    15b0:	ldr	x0, [x3, #16]
    15b4:	mul	x25, x2, x25
    15b8:	str	x25, [x1, #8]
    15bc:	mov	x20, x23
    15c0:	cbnz	x0, 144c <GOMP_loop_ull_start+0x12c>
    15c4:	mov	x3, #0x1                   	// #1
    15c8:	mov	x2, x3
    15cc:	b	1454 <GOMP_loop_ull_start+0x134>
    15d0:	ldr	w0, [x1, #4]
    15d4:	orr	w0, w0, #0x2
    15d8:	str	w0, [x1, #4]
    15dc:	b	147c <GOMP_loop_ull_start+0x15c>

00000000000015e0 <GOMP_loop_ull_doacross_start>:
    15e0:	stp	x29, x30, [sp, #-112]!
    15e4:	mov	x29, sp
    15e8:	stp	x19, x20, [sp, #16]
    15ec:	mov	x19, x7
    15f0:	adrp	x20, 0 <gomp_tls_data>
    15f4:	ldr	x20, [x20]
    15f8:	stp	x25, x26, [sp, #64]
    15fc:	mrs	x25, tpidr_el0
    1600:	mov	w26, w0
    1604:	stp	x27, x28, [sp, #80]
    1608:	add	x28, x25, x20
    160c:	mov	x27, x2
    1610:	stp	x21, x22, [sp, #32]
    1614:	mov	x22, x4
    1618:	mov	x21, x6
    161c:	stp	x23, x24, [sp, #48]
    1620:	mov	x24, x1
    1624:	mov	x23, x5
    1628:	str	xzr, [x28, #72]
    162c:	str	x3, [sp, #104]
    1630:	cbz	x6, 1744 <GOMP_loop_ull_doacross_start+0x164>
    1634:	bl	0 <gomp_workshare_taskgroup_start>
    1638:	mov	x0, #0x0                   	// #0
    163c:	bl	0 <gomp_work_share_start>
    1640:	tst	w0, #0xff
    1644:	b.eq	1730 <GOMP_loop_ull_doacross_start+0x150>  // b.none
    1648:	mov	x28, #0x0                   	// #0
    164c:	cbz	x19, 1654 <GOMP_loop_ull_doacross_start+0x74>
    1650:	ldr	x28, [x19]
    1654:	add	x1, sp, #0x68
    1658:	mov	x0, x27
    165c:	bl	0 <gomp_adjust_sched>
    1660:	add	x3, x25, x20
    1664:	mov	x4, #0x1                   	// #1
    1668:	ldr	x5, [x24]
    166c:	cmp	w0, #0x2
    1670:	ldr	x1, [x3, #24]
    1674:	ldr	x2, [sp, #104]
    1678:	stp	w0, wzr, [x1]
    167c:	stp	x2, x5, [x1, #8]
    1680:	str	x4, [x1, #24]
    1684:	str	xzr, [x1, #72]
    1688:	b.eq	1760 <GOMP_loop_ull_doacross_start+0x180>  // b.none
    168c:	mov	x3, x28
    1690:	mov	x1, x24
    1694:	mov	w0, w26
    1698:	bl	0 <gomp_doacross_ull_init>
    169c:	cbz	x21, 16c4 <GOMP_loop_ull_doacross_start+0xe4>
    16a0:	mov	x0, x21
    16a4:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    16a8:	add	x0, x25, x20
    16ac:	mov	w2, #0x1                   	// #1
    16b0:	ldr	x1, [x0, #80]
    16b4:	ldr	x0, [x0, #24]
    16b8:	ldr	x1, [x1, #40]
    16bc:	strb	w2, [x1, #50]
    16c0:	str	x21, [x0, #88]
    16c4:	add	x1, x25, x20
    16c8:	ldr	x0, [x1, #32]
    16cc:	cbz	x0, 16f0 <GOMP_loop_ull_doacross_start+0x110>
    16d0:	ldr	x2, [x1, #24]
    16d4:	add	x0, x0, #0x50
    16d8:	ldxr	x1, [x0]
    16dc:	stlxr	w3, x2, [x0]
    16e0:	cbnz	w3, 16d8 <GOMP_loop_ull_doacross_start+0xf8>
    16e4:	cmp	x1, #0x1
    16e8:	b.eq	16f0 <GOMP_loop_ull_doacross_start+0x110>  // b.none
    16ec:	bl	0 <gomp_ptrlock_set_slow>
    16f0:	cbz	x19, 1708 <GOMP_loop_ull_doacross_start+0x128>
    16f4:	add	x20, x25, x20
    16f8:	ldr	x0, [x20, #24]
    16fc:	ldr	x0, [x0, #32]
    1700:	ldr	x0, [x0, #48]
    1704:	str	x0, [x19]
    1708:	mov	x1, x23
    170c:	mov	x0, x22
    1710:	bl	12a8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
    1714:	ldp	x19, x20, [sp, #16]
    1718:	ldp	x21, x22, [sp, #32]
    171c:	ldp	x23, x24, [sp, #48]
    1720:	ldp	x25, x26, [sp, #64]
    1724:	ldp	x27, x28, [sp, #80]
    1728:	ldp	x29, x30, [sp], #112
    172c:	ret
    1730:	ldr	x1, [x28, #24]
    1734:	mov	x0, x21
    1738:	ldr	x1, [x1, #88]
    173c:	bl	0 <gomp_workshare_task_reduction_register>
    1740:	b	16f0 <GOMP_loop_ull_doacross_start+0x110>
    1744:	mov	x0, #0x0                   	// #0
    1748:	bl	0 <gomp_work_share_start>
    174c:	tst	w0, #0xff
    1750:	b.eq	16f0 <GOMP_loop_ull_doacross_start+0x110>  // b.none
    1754:	mov	x28, #0x0                   	// #0
    1758:	cbnz	x19, 1650 <GOMP_loop_ull_doacross_start+0x70>
    175c:	b	1654 <GOMP_loop_ull_doacross_start+0x74>
    1760:	ldr	x0, [x3, #16]
    1764:	cbz	x0, 17ac <GOMP_loop_ull_doacross_start+0x1cc>
    1768:	ldr	w0, [x0]
    176c:	mov	x4, x0
    1770:	orr	x4, x2, x4
    1774:	mov	x3, #0x7fffffff            	// #2147483647
    1778:	cmp	x4, x3
    177c:	b.hi	168c <GOMP_loop_ull_doacross_start+0xac>  // b.pmore
    1780:	madd	x0, x0, x2, x2
    1784:	mov	x3, x28
    1788:	mvn	x0, x0
    178c:	cmp	x5, x0
    1790:	cset	w0, cc  // cc = lo, ul, last
    1794:	str	w0, [x1, #4]
    1798:	mov	x1, x24
    179c:	mov	w0, w26
    17a0:	bl	0 <gomp_doacross_ull_init>
    17a4:	cbnz	x21, 16a0 <GOMP_loop_ull_doacross_start+0xc0>
    17a8:	b	16c4 <GOMP_loop_ull_doacross_start+0xe4>
    17ac:	mov	x0, x4
    17b0:	b	1770 <GOMP_loop_ull_doacross_start+0x190>
    17b4:	nop

00000000000017b8 <GOMP_loop_ull_ordered_static_next>:
    17b8:	stp	x29, x30, [sp, #-48]!
    17bc:	mov	x29, sp
    17c0:	stp	x21, x22, [sp, #32]
    17c4:	mov	x21, x1
    17c8:	adrp	x22, 0 <gomp_tls_data>
    17cc:	ldr	x22, [x22]
    17d0:	stp	x19, x20, [sp, #16]
    17d4:	mov	x19, x0
    17d8:	mrs	x20, tpidr_el0
    17dc:	bl	0 <gomp_ordered_sync>
    17e0:	add	x1, x20, x22
    17e4:	mov	w0, #0x1                   	// #1
    17e8:	ldr	x2, [x1, #24]
    17ec:	add	x2, x2, #0x40
    17f0:	ldaxr	w1, [x2]
    17f4:	cbnz	w1, 1800 <GOMP_loop_ull_ordered_static_next+0x48>
    17f8:	stxr	w3, w0, [x2]
    17fc:	cbnz	w3, 17f0 <GOMP_loop_ull_ordered_static_next+0x38>
    1800:	cmp	w1, #0x0
    1804:	b.ne	1874 <GOMP_loop_ull_ordered_static_next+0xbc>  // b.any
    1808:	mov	x0, x19
    180c:	mov	x1, x21
    1810:	bl	0 <gomp_iter_ull_static_next>
    1814:	mov	w19, w0
    1818:	tbnz	w0, #31, 1820 <GOMP_loop_ull_ordered_static_next+0x68>
    181c:	bl	0 <gomp_ordered_static_next>
    1820:	add	x20, x20, x22
    1824:	ldr	x1, [x20, #24]
    1828:	add	x1, x1, #0x40
    182c:	ldxr	w0, [x1]
    1830:	stlxr	w2, wzr, [x1]
    1834:	cbnz	w2, 182c <GOMP_loop_ull_ordered_static_next+0x74>
    1838:	tbnz	w0, #31, 1854 <GOMP_loop_ull_ordered_static_next+0x9c>
    183c:	cmp	w19, #0x0
    1840:	cset	w0, eq  // eq = none
    1844:	ldp	x19, x20, [sp, #16]
    1848:	ldp	x21, x22, [sp, #32]
    184c:	ldp	x29, x30, [sp], #48
    1850:	ret
    1854:	mov	x0, x1
    1858:	bl	0 <gomp_mutex_unlock_slow>
    185c:	cmp	w19, #0x0
    1860:	cset	w0, eq  // eq = none
    1864:	ldp	x19, x20, [sp, #16]
    1868:	ldp	x21, x22, [sp, #32]
    186c:	ldp	x29, x30, [sp], #48
    1870:	ret
    1874:	mov	x0, x2
    1878:	bl	0 <gomp_mutex_lock_slow>
    187c:	b	1808 <GOMP_loop_ull_ordered_static_next+0x50>

0000000000001880 <GOMP_loop_ull_ordered_dynamic_next>:
    1880:	stp	x29, x30, [sp, #-48]!
    1884:	mov	x29, sp
    1888:	stp	x21, x22, [sp, #32]
    188c:	mov	x21, x1
    1890:	adrp	x22, 0 <gomp_tls_data>
    1894:	ldr	x22, [x22]
    1898:	stp	x19, x20, [sp, #16]
    189c:	mov	x19, x0
    18a0:	mrs	x20, tpidr_el0
    18a4:	bl	0 <gomp_ordered_sync>
    18a8:	add	x1, x20, x22
    18ac:	mov	w0, #0x1                   	// #1
    18b0:	ldr	x2, [x1, #24]
    18b4:	add	x2, x2, #0x40
    18b8:	ldaxr	w1, [x2]
    18bc:	cbnz	w1, 18c8 <GOMP_loop_ull_ordered_dynamic_next+0x48>
    18c0:	stxr	w3, w0, [x2]
    18c4:	cbnz	w3, 18b8 <GOMP_loop_ull_ordered_dynamic_next+0x38>
    18c8:	cmp	w1, #0x0
    18cc:	b.ne	1940 <GOMP_loop_ull_ordered_dynamic_next+0xc0>  // b.any
    18d0:	mov	x0, x19
    18d4:	mov	x1, x21
    18d8:	bl	0 <gomp_iter_ull_dynamic_next_locked>
    18dc:	mov	w19, w0
    18e0:	tst	w0, #0xff
    18e4:	b.eq	191c <GOMP_loop_ull_ordered_dynamic_next+0x9c>  // b.none
    18e8:	bl	0 <gomp_ordered_next>
    18ec:	add	x20, x20, x22
    18f0:	ldr	x1, [x20, #24]
    18f4:	add	x1, x1, #0x40
    18f8:	ldxr	w0, [x1]
    18fc:	stlxr	w2, wzr, [x1]
    1900:	cbnz	w2, 18f8 <GOMP_loop_ull_ordered_dynamic_next+0x78>
    1904:	tbnz	w0, #31, 1924 <GOMP_loop_ull_ordered_dynamic_next+0xa4>
    1908:	mov	w0, w19
    190c:	ldp	x19, x20, [sp, #16]
    1910:	ldp	x21, x22, [sp, #32]
    1914:	ldp	x29, x30, [sp], #48
    1918:	ret
    191c:	bl	0 <gomp_ordered_last>
    1920:	b	18ec <GOMP_loop_ull_ordered_dynamic_next+0x6c>
    1924:	mov	x0, x1
    1928:	bl	0 <gomp_mutex_unlock_slow>
    192c:	mov	w0, w19
    1930:	ldp	x19, x20, [sp, #16]
    1934:	ldp	x21, x22, [sp, #32]
    1938:	ldp	x29, x30, [sp], #48
    193c:	ret
    1940:	mov	x0, x2
    1944:	bl	0 <gomp_mutex_lock_slow>
    1948:	b	18d0 <GOMP_loop_ull_ordered_dynamic_next+0x50>
    194c:	nop

0000000000001950 <GOMP_loop_ull_ordered_guided_next>:
    1950:	stp	x29, x30, [sp, #-48]!
    1954:	mov	x29, sp
    1958:	stp	x21, x22, [sp, #32]
    195c:	mov	x21, x1
    1960:	adrp	x22, 0 <gomp_tls_data>
    1964:	ldr	x22, [x22]
    1968:	stp	x19, x20, [sp, #16]
    196c:	mov	x19, x0
    1970:	mrs	x20, tpidr_el0
    1974:	bl	0 <gomp_ordered_sync>
    1978:	add	x1, x20, x22
    197c:	mov	w0, #0x1                   	// #1
    1980:	ldr	x2, [x1, #24]
    1984:	add	x2, x2, #0x40
    1988:	ldaxr	w1, [x2]
    198c:	cbnz	w1, 1998 <GOMP_loop_ull_ordered_guided_next+0x48>
    1990:	stxr	w3, w0, [x2]
    1994:	cbnz	w3, 1988 <GOMP_loop_ull_ordered_guided_next+0x38>
    1998:	cmp	w1, #0x0
    199c:	b.ne	1a10 <GOMP_loop_ull_ordered_guided_next+0xc0>  // b.any
    19a0:	mov	x0, x19
    19a4:	mov	x1, x21
    19a8:	bl	0 <gomp_iter_ull_guided_next_locked>
    19ac:	mov	w19, w0
    19b0:	tst	w0, #0xff
    19b4:	b.eq	19ec <GOMP_loop_ull_ordered_guided_next+0x9c>  // b.none
    19b8:	bl	0 <gomp_ordered_next>
    19bc:	add	x20, x20, x22
    19c0:	ldr	x1, [x20, #24]
    19c4:	add	x1, x1, #0x40
    19c8:	ldxr	w0, [x1]
    19cc:	stlxr	w2, wzr, [x1]
    19d0:	cbnz	w2, 19c8 <GOMP_loop_ull_ordered_guided_next+0x78>
    19d4:	tbnz	w0, #31, 19f4 <GOMP_loop_ull_ordered_guided_next+0xa4>
    19d8:	mov	w0, w19
    19dc:	ldp	x19, x20, [sp, #16]
    19e0:	ldp	x21, x22, [sp, #32]
    19e4:	ldp	x29, x30, [sp], #48
    19e8:	ret
    19ec:	bl	0 <gomp_ordered_last>
    19f0:	b	19bc <GOMP_loop_ull_ordered_guided_next+0x6c>
    19f4:	mov	x0, x1
    19f8:	bl	0 <gomp_mutex_unlock_slow>
    19fc:	mov	w0, w19
    1a00:	ldp	x19, x20, [sp, #16]
    1a04:	ldp	x21, x22, [sp, #32]
    1a08:	ldp	x29, x30, [sp], #48
    1a0c:	ret
    1a10:	mov	x0, x2
    1a14:	bl	0 <gomp_mutex_lock_slow>
    1a18:	b	19a0 <GOMP_loop_ull_ordered_guided_next+0x50>
    1a1c:	nop

0000000000001a20 <GOMP_loop_ull_ordered_runtime_next>:
    1a20:	adrp	x3, 0 <gomp_tls_data>
    1a24:	ldr	x3, [x3]
    1a28:	mrs	x2, tpidr_el0
    1a2c:	add	x2, x2, x3
    1a30:	ldr	x2, [x2, #24]
    1a34:	ldr	w2, [x2]
    1a38:	cmp	w2, #0x2
    1a3c:	b.eq	1a80 <GOMP_loop_ull_ordered_runtime_next+0x60>  // b.none
    1a40:	mov	x3, x0
    1a44:	mov	x4, x1
    1a48:	b.ls	1a58 <GOMP_loop_ull_ordered_runtime_next+0x38>  // b.plast
    1a4c:	cmp	w2, #0x3
    1a50:	b.ne	1a6c <GOMP_loop_ull_ordered_runtime_next+0x4c>  // b.any
    1a54:	b	1950 <GOMP_loop_ull_ordered_guided_next>
    1a58:	cmp	w2, #0x1
    1a5c:	b.ne	1a74 <GOMP_loop_ull_ordered_runtime_next+0x54>  // b.any
    1a60:	mov	x1, x4
    1a64:	mov	x0, x3
    1a68:	b	17b8 <GOMP_loop_ull_ordered_static_next>
    1a6c:	cmp	w2, #0x4
    1a70:	b.eq	1a60 <GOMP_loop_ull_ordered_runtime_next+0x40>  // b.none
    1a74:	stp	x29, x30, [sp, #-16]!
    1a78:	mov	x29, sp
    1a7c:	bl	0 <abort>
    1a80:	b	1880 <GOMP_loop_ull_ordered_dynamic_next>

ordered.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ordered_first>:
       0:	adrp	x1, 0 <gomp_tls_data>
       4:	ldr	x1, [x1]
       8:	mrs	x0, tpidr_el0
       c:	add	x1, x0, x1
      10:	ldr	x3, [x1, #16]
      14:	cbz	x3, 5c <gomp_ordered_first+0x5c>
      18:	ldr	w0, [x3]
      1c:	cmp	w0, #0x1
      20:	b.eq	5c <gomp_ordered_first+0x5c>  // b.none
      24:	ldr	x2, [x1, #24]
      28:	ldr	w4, [x1, #40]
      2c:	ldr	w6, [x2, #40]
      30:	ldr	w1, [x2, #48]
      34:	ldr	x5, [x2, #32]
      38:	add	w1, w1, w6
      3c:	cmp	w0, w1
      40:	sub	w0, w1, w0
      44:	csel	w0, w0, w1, ls  // ls = plast
      48:	str	w4, [x5, x0, lsl #2]
      4c:	ldr	w0, [x2, #40]
      50:	add	w1, w0, #0x1
      54:	str	w1, [x2, #40]
      58:	cbz	w0, 60 <gomp_ordered_first+0x60>
      5c:	ret
      60:	ldr	x0, [x3, #80]
      64:	ldr	x0, [x0, w4, uxtw #3]
      68:	ldr	w1, [x0]
      6c:	add	w2, w1, #0x1
      70:	and	w2, w2, #0x7fffffff
      74:	ldxr	w3, [x0]
      78:	cmp	w3, w1
      7c:	b.ne	88 <gomp_ordered_first+0x88>  // b.any
      80:	stlxr	w4, w2, [x0]
      84:	cmp	w4, #0x0
      88:	mov	w1, w3
      8c:	b.ne	6c <gomp_ordered_first+0x6c>  // b.any
      90:	tbz	w3, #31, 5c <gomp_ordered_first+0x5c>
      94:	b	0 <gomp_sem_post_slow>

0000000000000098 <gomp_ordered_last>:
      98:	adrp	x0, 0 <gomp_tls_data>
      9c:	ldr	x0, [x0]
      a0:	mrs	x1, tpidr_el0
      a4:	add	x0, x1, x0
      a8:	ldr	x2, [x0, #16]
      ac:	cbz	x2, 128 <gomp_ordered_last+0x90>
      b0:	ldr	w3, [x2]
      b4:	cmp	w3, #0x1
      b8:	b.eq	128 <gomp_ordered_last+0x90>  // b.none
      bc:	ldr	x0, [x0, #24]
      c0:	mov	w4, #0xffffffff            	// #-1
      c4:	ldr	w1, [x0, #40]
      c8:	add	w1, w1, w4
      cc:	stp	w1, w4, [x0, #40]
      d0:	cbz	w1, 128 <gomp_ordered_last+0x90>
      d4:	ldr	w1, [x0, #48]
      d8:	add	w1, w1, #0x1
      dc:	cmp	w3, w1
      e0:	b.eq	12c <gomp_ordered_last+0x94>  // b.none
      e4:	ubfiz	x3, x1, #2, #32
      e8:	ldr	x4, [x0, #32]
      ec:	str	w1, [x0, #48]
      f0:	ldr	x0, [x2, #80]
      f4:	ldr	w1, [x4, x3]
      f8:	ldr	x0, [x0, x1, lsl #3]
      fc:	ldr	w1, [x0]
     100:	add	w2, w1, #0x1
     104:	and	w2, w2, #0x7fffffff
     108:	ldxr	w3, [x0]
     10c:	cmp	w3, w1
     110:	b.ne	11c <gomp_ordered_last+0x84>  // b.any
     114:	stlxr	w4, w2, [x0]
     118:	cmp	w4, #0x0
     11c:	mov	w1, w3
     120:	b.ne	100 <gomp_ordered_last+0x68>  // b.any
     124:	tbnz	w3, #31, 138 <gomp_ordered_last+0xa0>
     128:	ret
     12c:	mov	x3, #0x0                   	// #0
     130:	mov	w1, #0x0                   	// #0
     134:	b	e8 <gomp_ordered_last+0x50>
     138:	b	0 <gomp_sem_post_slow>
     13c:	nop

0000000000000140 <gomp_ordered_next>:
     140:	adrp	x0, 0 <gomp_tls_data>
     144:	ldr	x0, [x0]
     148:	mrs	x1, tpidr_el0
     14c:	add	x0, x1, x0
     150:	ldr	x4, [x0, #16]
     154:	cbz	x4, 1f8 <gomp_ordered_next+0xb8>
     158:	ldr	w1, [x4]
     15c:	cmp	w1, #0x1
     160:	b.eq	1f8 <gomp_ordered_next+0xb8>  // b.none
     164:	ldr	x3, [x0, #24]
     168:	mov	w2, #0xffffffff            	// #-1
     16c:	ldr	x7, [x4, #80]
     170:	ldr	w5, [x3, #40]
     174:	str	w2, [x3, #44]
     178:	cmp	w5, #0x1
     17c:	b.eq	208 <gomp_ordered_next+0xc8>  // b.none
     180:	ldr	w2, [x3, #48]
     184:	cmp	w1, w5
     188:	ldr	x6, [x3, #32]
     18c:	b.ls	1b0 <gomp_ordered_next+0x70>  // b.plast
     190:	add	w2, w5, w2
     194:	ldr	w0, [x0, #40]
     198:	cmp	w1, w2
     19c:	sub	w1, w2, w1
     1a0:	csel	w1, w1, w2, ls  // ls = plast
     1a4:	str	w0, [x6, x1, lsl #2]
     1a8:	ldr	w2, [x3, #48]
     1ac:	ldr	w1, [x4]
     1b0:	add	w0, w2, #0x1
     1b4:	cmp	w1, w0
     1b8:	b.eq	1fc <gomp_ordered_next+0xbc>  // b.none
     1bc:	add	x6, x6, w0, uxtw #2
     1c0:	str	w0, [x3, #48]
     1c4:	ldr	w0, [x6]
     1c8:	ldr	x0, [x7, x0, lsl #3]
     1cc:	ldr	w1, [x0]
     1d0:	add	w2, w1, #0x1
     1d4:	and	w2, w2, #0x7fffffff
     1d8:	ldxr	w3, [x0]
     1dc:	cmp	w3, w1
     1e0:	b.ne	1ec <gomp_ordered_next+0xac>  // b.any
     1e4:	stlxr	w4, w2, [x0]
     1e8:	cmp	w4, #0x0
     1ec:	mov	w1, w3
     1f0:	b.ne	1d0 <gomp_ordered_next+0x90>  // b.any
     1f4:	tbnz	w1, #31, 204 <gomp_ordered_next+0xc4>
     1f8:	ret
     1fc:	mov	w0, #0x0                   	// #0
     200:	b	1c0 <gomp_ordered_next+0x80>
     204:	b	0 <gomp_sem_post_slow>
     208:	ldr	w0, [x0, #40]
     20c:	ldr	x0, [x7, x0, lsl #3]
     210:	ldr	w1, [x0]
     214:	add	w2, w1, #0x1
     218:	and	w2, w2, #0x7fffffff
     21c:	ldxr	w3, [x0]
     220:	cmp	w3, w1
     224:	b.ne	230 <gomp_ordered_next+0xf0>  // b.any
     228:	stlxr	w4, w2, [x0]
     22c:	cmp	w4, #0x0
     230:	mov	w1, w3
     234:	b.ne	214 <gomp_ordered_next+0xd4>  // b.any
     238:	tbz	w1, #31, 1f8 <gomp_ordered_next+0xb8>
     23c:	b	204 <gomp_ordered_next+0xc4>

0000000000000240 <gomp_ordered_static_init>:
     240:	adrp	x0, 0 <gomp_tls_data>
     244:	ldr	x0, [x0]
     248:	mrs	x1, tpidr_el0
     24c:	add	x0, x1, x0
     250:	ldr	x0, [x0, #16]
     254:	cbz	x0, 298 <gomp_ordered_static_init+0x58>
     258:	ldr	w1, [x0]
     25c:	cmp	w1, #0x1
     260:	b.eq	298 <gomp_ordered_static_init+0x58>  // b.none
     264:	ldr	x0, [x0, #80]
     268:	ldr	x0, [x0]
     26c:	ldr	w1, [x0]
     270:	add	w2, w1, #0x1
     274:	and	w2, w2, #0x7fffffff
     278:	ldxr	w3, [x0]
     27c:	cmp	w3, w1
     280:	b.ne	28c <gomp_ordered_static_init+0x4c>  // b.any
     284:	stlxr	w4, w2, [x0]
     288:	cmp	w4, #0x0
     28c:	mov	w1, w3
     290:	b.ne	270 <gomp_ordered_static_init+0x30>  // b.any
     294:	tbnz	w3, #31, 29c <gomp_ordered_static_init+0x5c>
     298:	ret
     29c:	b	0 <gomp_sem_post_slow>

00000000000002a0 <gomp_ordered_static_next>:
     2a0:	adrp	x0, 0 <gomp_tls_data>
     2a4:	ldr	x0, [x0]
     2a8:	mrs	x1, tpidr_el0
     2ac:	add	x0, x1, x0
     2b0:	ldr	x2, [x0, #16]
     2b4:	cbz	x2, 320 <gomp_ordered_static_next+0x80>
     2b8:	ldr	w3, [x2]
     2bc:	cmp	w3, #0x1
     2c0:	b.eq	320 <gomp_ordered_static_next+0x80>  // b.none
     2c4:	ldr	x4, [x0, #24]
     2c8:	mov	w5, #0xffffffff            	// #-1
     2cc:	ldr	w1, [x0, #40]
     2d0:	str	w5, [x4, #44]
     2d4:	add	w1, w1, #0x1
     2d8:	cmp	w3, w1
     2dc:	b.eq	324 <gomp_ordered_static_next+0x84>  // b.none
     2e0:	ubfiz	x0, x1, #3, #32
     2e4:	ldr	x3, [x2, #80]
     2e8:	ldr	x2, [x4, #32]
     2ec:	ldr	x0, [x3, x0]
     2f0:	str	w1, [x2]
     2f4:	ldr	w1, [x0]
     2f8:	add	w2, w1, #0x1
     2fc:	and	w2, w2, #0x7fffffff
     300:	ldxr	w3, [x0]
     304:	cmp	w3, w1
     308:	b.ne	314 <gomp_ordered_static_next+0x74>  // b.any
     30c:	stlxr	w4, w2, [x0]
     310:	cmp	w4, #0x0
     314:	mov	w1, w3
     318:	b.ne	2f8 <gomp_ordered_static_next+0x58>  // b.any
     31c:	tbnz	w3, #31, 330 <gomp_ordered_static_next+0x90>
     320:	ret
     324:	mov	x0, #0x0                   	// #0
     328:	mov	w1, #0x0                   	// #0
     32c:	b	2e4 <gomp_ordered_static_next+0x44>
     330:	b	0 <gomp_sem_post_slow>
     334:	nop

0000000000000338 <GOMP_ordered_start>:
     338:	stp	x29, x30, [sp, #-48]!
     33c:	mov	x29, sp
     340:	stp	x19, x20, [sp, #16]
     344:	mrs	x19, tpidr_el0
     348:	adrp	x20, 0 <gomp_tls_data>
     34c:	ldr	x20, [x20]
     350:	add	x1, x19, x20
     354:	ldr	x0, [x1, #16]
     358:	cbz	x0, 388 <GOMP_ordered_start+0x50>
     35c:	ldr	w2, [x0]
     360:	cmp	w2, #0x1
     364:	b.eq	388 <GOMP_ordered_start+0x50>  // b.none
     368:	str	x21, [sp, #32]
     36c:	ldr	x21, [x1, #24]
     370:	dmb	ish
     374:	ldr	w1, [x1, #40]
     378:	ldr	w2, [x21, #44]
     37c:	cmp	w2, w1
     380:	b.ne	394 <GOMP_ordered_start+0x5c>  // b.any
     384:	ldr	x21, [sp, #32]
     388:	ldp	x19, x20, [sp, #16]
     38c:	ldp	x29, x30, [sp], #48
     390:	ret
     394:	ldr	x0, [x0, #80]
     398:	ldr	x0, [x0, w1, uxtw #3]
     39c:	ldr	w1, [x0]
     3a0:	tst	x1, #0x7fffffff
     3a4:	b.eq	3e4 <GOMP_ordered_start+0xac>  // b.none
     3a8:	sub	w3, w1, #0x1
     3ac:	ldaxr	w2, [x0]
     3b0:	cmp	w2, w1
     3b4:	b.ne	3c0 <GOMP_ordered_start+0x88>  // b.any
     3b8:	stxr	w4, w3, [x0]
     3bc:	cmp	w4, #0x0
     3c0:	mov	w1, w2
     3c4:	b.ne	3a0 <GOMP_ordered_start+0x68>  // b.any
     3c8:	add	x19, x19, x20
     3cc:	ldr	w0, [x19, #40]
     3d0:	str	w0, [x21, #44]
     3d4:	ldp	x19, x20, [sp, #16]
     3d8:	ldr	x21, [sp, #32]
     3dc:	ldp	x29, x30, [sp], #48
     3e0:	ret
     3e4:	bl	0 <gomp_sem_wait_slow>
     3e8:	b	3c8 <GOMP_ordered_start+0x90>
     3ec:	nop

00000000000003f0 <GOMP_ordered_end>:
     3f0:	ret
     3f4:	nop

00000000000003f8 <gomp_doacross_init>:
     3f8:	adrp	x4, 0 <gomp_tls_data>
     3fc:	ldr	x4, [x4]
     400:	mrs	x5, tpidr_el0
     404:	stp	x29, x30, [sp, #-368]!
     408:	add	x4, x5, x4
     40c:	mov	x29, sp
     410:	stp	x21, x22, [sp, #32]
     414:	stp	x23, x24, [sp, #48]
     418:	mov	x23, x1
     41c:	ldp	x1, x22, [x4, #16]
     420:	stp	x25, x26, [sp, #64]
     424:	mov	x26, x3
     428:	cbz	x1, 5c0 <gomp_doacross_init+0x1c8>
     42c:	ldr	w24, [x1]
     430:	cmp	w24, #0x1
     434:	b.eq	5c0 <gomp_doacross_init+0x1c8>  // b.none
     438:	stp	x19, x20, [sp, #16]
     43c:	mov	x21, x2
     440:	mov	w20, w0
     444:	mov	x5, #0x0                   	// #0
     448:	add	x0, x3, #0x77
     44c:	mov	w19, #0x0                   	// #0
     450:	cbz	w20, 6d4 <gomp_doacross_init+0x2dc>
     454:	add	x7, sp, #0x70
     458:	mov	w2, #0x1                   	// #1
     45c:	mov	w1, #0x40                  	// #64
     460:	b	488 <gomp_doacross_init+0x90>
     464:	add	x5, x5, #0x1
     468:	mov	w19, #0x41                  	// #65
     46c:	cmp	w20, w5
     470:	b.ls	6a8 <gomp_doacross_init+0x2b0>  // b.plast
     474:	ldr	x3, [x23, x5, lsl #3]
     478:	cbz	x3, 5bc <gomp_doacross_init+0x1c4>
     47c:	add	x5, x5, #0x1
     480:	cmp	w20, w5
     484:	b.ls	4c8 <gomp_doacross_init+0xd0>  // b.plast
     488:	ldr	x6, [x23, x5, lsl #3]
     48c:	cmp	w19, #0x40
     490:	sub	x4, x6, #0x1
     494:	clz	x4, x4
     498:	cbz	x6, 5bc <gomp_doacross_init+0x1c4>
     49c:	sub	w4, w1, w4
     4a0:	b.hi	47c <gomp_doacross_init+0x84>  // b.pmore
     4a4:	cmp	x6, #0x1
     4a8:	csel	w4, w4, w2, ne  // ne = any
     4ac:	add	w19, w19, w4
     4b0:	cmp	w19, #0x40
     4b4:	b.hi	464 <gomp_doacross_init+0x6c>  // b.pmore
     4b8:	str	w4, [x7, x5, lsl #2]
     4bc:	add	x5, x5, #0x1
     4c0:	cmp	w20, w5
     4c4:	b.hi	488 <gomp_doacross_init+0x90>  // b.pmore
     4c8:	stp	x27, x28, [sp, #80]
     4cc:	ldr	w1, [x22]
     4d0:	mov	w24, w24
     4d4:	cmp	w1, #0x1
     4d8:	b.eq	4f4 <gomp_doacross_init+0xfc>  // b.none
     4dc:	cmp	w1, #0x3
     4e0:	ldr	x24, [x23]
     4e4:	b.eq	4f4 <gomp_doacross_init+0xfc>  // b.none
     4e8:	sub	x24, x24, #0x1
     4ec:	sdiv	x24, x24, x21
     4f0:	add	x24, x24, #0x1
     4f4:	cmp	w19, #0x40
     4f8:	b.ls	604 <gomp_doacross_init+0x20c>  // b.plast
     4fc:	mov	x27, #0x3f                  	// #63
     500:	mov	x1, #0x77                  	// #119
     504:	add	x27, x27, w20, uxtw #3
     508:	str	x1, [sp, #104]
     50c:	and	x27, x27, #0xffffffffffffffc0
     510:	mov	x1, #0x0                   	// #0
     514:	mul	x28, x24, x27
     518:	add	x1, x28, x1
     51c:	add	x0, x1, x0
     520:	bl	0 <gomp_malloc>
     524:	mov	x25, x0
     528:	strb	wzr, [x0, #20]
     52c:	ldr	x0, [sp, #104]
     530:	stp	x21, x27, [x25]
     534:	add	x0, x25, x0
     538:	str	w20, [x25, #16]
     53c:	and	x0, x0, #0xffffffffffffffc0
     540:	str	x0, [x25, #24]
     544:	cbnz	x26, 690 <gomp_doacross_init+0x298>
     548:	str	xzr, [x25, #48]
     54c:	cmp	w19, #0x40
     550:	b.ls	618 <gomp_doacross_init+0x220>  // b.plast
     554:	ubfiz	x26, x20, #3, #32
     558:	mov	x19, #0x0                   	// #0
     55c:	mov	x20, #0x0                   	// #0
     560:	cbz	x24, 58c <gomp_doacross_init+0x194>
     564:	nop
     568:	ldr	x0, [x25, #24]
     56c:	add	x19, x19, #0x1
     570:	mov	x2, x26
     574:	mov	w1, #0x0                   	// #0
     578:	add	x0, x0, x20
     57c:	bl	0 <memset>
     580:	add	x20, x20, x27
     584:	cmp	x24, x19
     588:	b.ne	568 <gomp_doacross_init+0x170>  // b.any
     58c:	ldr	w0, [x22]
     590:	cmp	x21, #0x0
     594:	ccmp	w0, #0x1, #0x0, eq  // eq = none
     598:	b.eq	6b4 <gomp_doacross_init+0x2bc>  // b.none
     59c:	ldp	x19, x20, [sp, #16]
     5a0:	ldp	x27, x28, [sp, #80]
     5a4:	str	x25, [x22, #32]
     5a8:	ldp	x21, x22, [sp, #32]
     5ac:	ldp	x23, x24, [sp, #48]
     5b0:	ldp	x25, x26, [sp, #64]
     5b4:	ldp	x29, x30, [sp], #368
     5b8:	ret
     5bc:	ldp	x19, x20, [sp, #16]
     5c0:	cbnz	x26, 5dc <gomp_doacross_init+0x1e4>
     5c4:	str	xzr, [x22, #32]
     5c8:	ldp	x21, x22, [sp, #32]
     5cc:	ldp	x23, x24, [sp, #48]
     5d0:	ldp	x25, x26, [sp, #64]
     5d4:	ldp	x29, x30, [sp], #368
     5d8:	ret
     5dc:	add	x0, x26, #0x38
     5e0:	bl	0 <gomp_malloc_cleared>
     5e4:	add	x1, x0, #0x38
     5e8:	str	x1, [x0, #48]
     5ec:	str	x0, [x22, #32]
     5f0:	ldp	x21, x22, [sp, #32]
     5f4:	ldp	x23, x24, [sp, #48]
     5f8:	ldp	x25, x26, [sp, #64]
     5fc:	ldp	x29, x30, [sp], #368
     600:	ret
     604:	ubfiz	x1, x20, #2, #32
     608:	mov	x27, #0x40                  	// #64
     60c:	add	x2, x1, #0x77
     610:	str	x2, [sp, #104]
     614:	b	514 <gomp_doacross_init+0x11c>
     618:	mov	w0, #0x1                   	// #1
     61c:	strb	w0, [x25, #20]
     620:	cbz	w20, 668 <gomp_doacross_init+0x270>
     624:	sub	w2, w20, #0x1
     628:	add	x0, sp, #0x70
     62c:	mvn	x5, x2
     630:	mov	x1, #0x0                   	// #0
     634:	lsl	x2, x2, #2
     638:	mov	w3, #0x0                   	// #0
     63c:	add	x4, x2, #0x38
     640:	lsl	x5, x5, #2
     644:	add	x4, x25, x4
     648:	add	x2, x0, x2
     64c:	nop
     650:	ldr	w0, [x2, x1]
     654:	str	w3, [x4, x1]
     658:	sub	x1, x1, #0x4
     65c:	cmp	x5, x1
     660:	add	w3, w3, w0
     664:	b.ne	650 <gomp_doacross_init+0x258>  // b.any
     668:	cbz	x24, 58c <gomp_doacross_init+0x194>
     66c:	ldr	x2, [x25, #24]
     670:	mov	x1, #0x0                   	// #0
     674:	nop
     678:	str	xzr, [x2]
     67c:	add	x1, x1, #0x1
     680:	cmp	x24, x1
     684:	add	x2, x2, x27
     688:	b.ne	678 <gomp_doacross_init+0x280>  // b.any
     68c:	b	58c <gomp_doacross_init+0x194>
     690:	add	x0, x0, x28
     694:	mov	x2, x26
     698:	mov	w1, #0x0                   	// #0
     69c:	str	x0, [x25, #48]
     6a0:	bl	0 <memset>
     6a4:	b	54c <gomp_doacross_init+0x154>
     6a8:	mov	w19, #0x41                  	// #65
     6ac:	stp	x27, x28, [sp, #80]
     6b0:	b	4cc <gomp_doacross_init+0xd4>
     6b4:	ldr	x1, [x23]
     6b8:	udiv	x0, x1, x24
     6bc:	msub	x24, x0, x24, x1
     6c0:	str	x0, [x25]
     6c4:	madd	x0, x0, x24, x24
     6c8:	str	x24, [x25, #32]
     6cc:	str	x0, [x25, #40]
     6d0:	b	59c <gomp_doacross_init+0x1a4>
     6d4:	mov	w19, w20
     6d8:	stp	x27, x28, [sp, #80]
     6dc:	b	4cc <gomp_doacross_init+0xd4>

00000000000006e0 <GOMP_doacross_post>:
     6e0:	adrp	x2, 0 <gomp_tls_data>
     6e4:	ldr	x2, [x2]
     6e8:	mrs	x1, tpidr_el0
     6ec:	add	x2, x1, x2
     6f0:	ldr	x3, [x2, #24]
     6f4:	ldr	x1, [x3, #32]
     6f8:	cbz	x1, 784 <GOMP_doacross_post+0xa4>
     6fc:	ldr	x4, [x1, #24]
     700:	cbz	x4, 784 <GOMP_doacross_post+0xa4>
     704:	ldr	w3, [x3]
     708:	cmp	w3, #0x1
     70c:	b.ne	78c <GOMP_doacross_post+0xac>  // b.any
     710:	ldr	w7, [x2, #40]
     714:	ldrb	w2, [x1, #20]
     718:	ldr	x3, [x1, #8]
     71c:	madd	x7, x7, x3, x4
     720:	cbz	w2, 7a4 <GOMP_doacross_post+0xc4>
     724:	ldr	x3, [x0]
     728:	ldr	w2, [x1, #56]
     72c:	ldr	w6, [x1, #16]
     730:	lsl	x3, x3, x2
     734:	cmp	w6, #0x1
     738:	b.ls	764 <GOMP_doacross_post+0x84>  // b.plast
     73c:	add	x4, x1, #0x38
     740:	mov	x1, #0x1                   	// #1
     744:	nop
     748:	ldr	x2, [x0, x1, lsl #3]
     74c:	ldr	w5, [x4, x1, lsl #2]
     750:	add	x1, x1, #0x1
     754:	cmp	w6, w1
     758:	lsl	x2, x2, x5
     75c:	orr	x3, x3, x2
     760:	b.hi	748 <GOMP_doacross_post+0x68>  // b.pmore
     764:	add	x3, x3, #0x1
     768:	ldar	x0, [x7]
     76c:	cmp	x0, x3
     770:	b.eq	77c <GOMP_doacross_post+0x9c>  // b.none
     774:	stlr	x3, [x7]
     778:	ret
     77c:	dmb	ish
     780:	ret
     784:	dmb	ish
     788:	ret
     78c:	cmp	w3, #0x3
     790:	ldr	x7, [x0]
     794:	b.eq	714 <GOMP_doacross_post+0x34>  // b.none
     798:	ldr	x2, [x1]
     79c:	sdiv	x7, x7, x2
     7a0:	b	714 <GOMP_doacross_post+0x34>
     7a4:	dmb	ishld
     7a8:	ldr	w2, [x1, #16]
     7ac:	sub	w1, w2, #0x1
     7b0:	lsl	x1, x1, #3
     7b4:	cbz	w2, 778 <GOMP_doacross_post+0x98>
     7b8:	ldr	x2, [x0, x1]
     7bc:	add	x3, x7, x1
     7c0:	add	x2, x2, #0x1
     7c4:	ldr	x4, [x3]
     7c8:	cmp	x2, x4
     7cc:	b.eq	7d4 <GOMP_doacross_post+0xf4>  // b.none
     7d0:	stlr	x2, [x3]
     7d4:	sub	x1, x1, #0x8
     7d8:	cmn	x1, #0x8
     7dc:	b.ne	7b8 <GOMP_doacross_post+0xd8>  // b.any
     7e0:	ret
     7e4:	nop

00000000000007e8 <GOMP_doacross_wait>:
     7e8:	sub	sp, sp, #0x60
     7ec:	adrp	x9, 0 <gomp_tls_data>
     7f0:	ldr	x9, [x9]
     7f4:	mrs	x8, tpidr_el0
     7f8:	stp	x1, x2, [sp, #40]
     7fc:	add	x1, x8, x9
     800:	stp	x3, x4, [sp, #56]
     804:	ldr	x3, [x1, #24]
     808:	stp	x5, x6, [sp, #72]
     80c:	str	x7, [sp, #88]
     810:	ldr	x2, [x3, #32]
     814:	cbz	x2, a08 <GOMP_doacross_wait+0x220>
     818:	ldr	x5, [x2, #24]
     81c:	cbz	x5, a08 <GOMP_doacross_wait+0x220>
     820:	ldr	w4, [x3]
     824:	cmp	w4, #0x1
     828:	b.ne	a28 <GOMP_doacross_wait+0x240>  // b.any
     82c:	ldr	x3, [x3, #8]
     830:	cbz	x3, 9e0 <GOMP_doacross_wait+0x1f8>
     834:	ldr	x1, [x1, #16]
     838:	sdiv	x3, x0, x3
     83c:	ldr	w1, [x1]
     840:	sdiv	x4, x3, x1
     844:	msub	x4, x4, x1, x3
     848:	ldrb	w7, [x2, #20]
     84c:	add	x10, sp, #0x20
     850:	ldr	x1, [x2, #8]
     854:	mov	w9, #0xffffffc8            	// #-56
     858:	madd	x4, x4, x1, x5
     85c:	add	x1, x0, #0x1
     860:	cbz	w7, 954 <GOMP_doacross_wait+0x16c>
     864:	ldr	w1, [x2, #56]
     868:	add	x5, sp, #0x20
     86c:	ldr	w8, [x2, #16]
     870:	add	x6, sp, #0x60
     874:	mov	w3, #0xffffffc8            	// #-56
     878:	stp	x6, x6, [sp]
     87c:	cmp	w8, #0x1
     880:	str	x5, [sp, #16]
     884:	lsl	x0, x0, x1
     888:	stp	w3, wzr, [sp, #24]
     88c:	b.ls	920 <GOMP_doacross_wait+0x138>  // b.plast
     890:	sub	w8, w8, #0x2
     894:	add	x5, x2, #0x40
     898:	add	x1, x2, #0x3c
     89c:	mov	w9, #0x0                   	// #0
     8a0:	add	x8, x5, w8, uxtw #2
     8a4:	mov	w10, #0x0                   	// #0
     8a8:	mov	x5, x6
     8ac:	b	8d4 <GOMP_doacross_wait+0xec>
     8b0:	mov	x2, x5
     8b4:	ldr	w6, [x1], #4
     8b8:	mov	w9, w7
     8bc:	add	x5, x5, #0x8
     8c0:	cmp	x8, x1
     8c4:	ldr	x2, [x2]
     8c8:	lsl	x2, x2, x6
     8cc:	orr	x0, x0, x2
     8d0:	b.eq	910 <GOMP_doacross_wait+0x128>  // b.none
     8d4:	add	w6, w3, #0x8
     8d8:	tbz	w3, #31, 8b0 <GOMP_doacross_wait+0xc8>
     8dc:	add	x2, sp, #0x60
     8e0:	mov	w10, w7
     8e4:	add	x2, x2, w3, sxtw
     8e8:	cmp	w6, #0x0
     8ec:	mov	w3, w6
     8f0:	b.gt	8b0 <GOMP_doacross_wait+0xc8>
     8f4:	ldr	x2, [x2]
     8f8:	ldr	w6, [x1], #4
     8fc:	cmp	x8, x1
     900:	lsl	x2, x2, x6
     904:	orr	x0, x0, x2
     908:	b.ne	8d4 <GOMP_doacross_wait+0xec>  // b.any
     90c:	nop
     910:	cbz	w10, 918 <GOMP_doacross_wait+0x130>
     914:	str	w3, [sp, #24]
     918:	cbz	w9, 920 <GOMP_doacross_wait+0x138>
     91c:	str	x5, [sp]
     920:	ldar	x1, [x4]
     924:	cmp	x1, x0
     928:	b.hi	93c <GOMP_doacross_wait+0x154>  // b.pmore
     92c:	nop
     930:	ldr	x1, [x4]
     934:	cmp	x1, x0
     938:	b.ls	930 <GOMP_doacross_wait+0x148>  // b.plast
     93c:	dmb	ish
     940:	add	sp, sp, #0x60
     944:	ret
     948:	mov	w0, w6
     94c:	cmp	w6, w0
     950:	b.eq	a08 <GOMP_doacross_wait+0x220>  // b.none
     954:	ldr	w6, [x2, #16]
     958:	add	x0, sp, #0x60
     95c:	stp	x0, x0, [sp]
     960:	mov	w0, w6
     964:	str	x10, [sp, #16]
     968:	stp	w9, wzr, [sp, #24]
     96c:	cbz	w6, 94c <GOMP_doacross_wait+0x164>
     970:	mov	w0, #0x0                   	// #0
     974:	b	9a8 <GOMP_doacross_wait+0x1c0>
     978:	and	x7, x7, #0xfffffffffffffff8
     97c:	str	x7, [sp]
     980:	ldr	x3, [x3]
     984:	add	x3, x3, #0x1
     988:	add	x5, x4, w0, uxtw #3
     98c:	ldr	x5, [x5]
     990:	cmp	x3, x5
     994:	b.cc	948 <GOMP_doacross_wait+0x160>  // b.lo, b.ul, b.last
     998:	b.hi	94c <GOMP_doacross_wait+0x164>  // b.pmore
     99c:	add	w0, w0, #0x1
     9a0:	cmp	w6, w0
     9a4:	b.ls	94c <GOMP_doacross_wait+0x164>  // b.plast
     9a8:	mov	x3, x1
     9ac:	cbz	w0, 988 <GOMP_doacross_wait+0x1a0>
     9b0:	ldr	w5, [sp, #24]
     9b4:	ldr	x3, [sp]
     9b8:	add	w8, w5, #0x8
     9bc:	add	x7, x3, #0xf
     9c0:	tbz	w5, #31, 978 <GOMP_doacross_wait+0x190>
     9c4:	str	w8, [sp, #24]
     9c8:	add	x7, x3, #0xf
     9cc:	cmp	w8, #0x0
     9d0:	and	x7, x7, #0xfffffffffffffff8
     9d4:	b.le	9fc <GOMP_doacross_wait+0x214>
     9d8:	str	x7, [sp]
     9dc:	b	980 <GOMP_doacross_wait+0x198>
     9e0:	ldr	x1, [x2, #40]
     9e4:	ldr	x4, [x2]
     9e8:	cmp	x1, x0
     9ec:	b.le	a14 <GOMP_doacross_wait+0x22c>
     9f0:	add	x4, x4, #0x1
     9f4:	sdiv	x4, x0, x4
     9f8:	b	848 <GOMP_doacross_wait+0x60>
     9fc:	ldr	x3, [sp, #8]
     a00:	add	x3, x3, w5, sxtw
     a04:	b	980 <GOMP_doacross_wait+0x198>
     a08:	dmb	ish
     a0c:	add	sp, sp, #0x60
     a10:	ret
     a14:	sub	x1, x0, x1
     a18:	ldr	x3, [x2, #32]
     a1c:	sdiv	x4, x1, x4
     a20:	add	x4, x4, x3
     a24:	b	848 <GOMP_doacross_wait+0x60>
     a28:	cmp	w4, #0x3
     a2c:	b.eq	a3c <GOMP_doacross_wait+0x254>  // b.none
     a30:	ldr	x1, [x2]
     a34:	sdiv	x4, x0, x1
     a38:	b	848 <GOMP_doacross_wait+0x60>
     a3c:	mov	x4, x0
     a40:	b	848 <GOMP_doacross_wait+0x60>
     a44:	nop

0000000000000a48 <gomp_doacross_ull_init>:
     a48:	adrp	x4, 0 <gomp_tls_data>
     a4c:	ldr	x4, [x4]
     a50:	mrs	x5, tpidr_el0
     a54:	stp	x29, x30, [sp, #-368]!
     a58:	add	x4, x5, x4
     a5c:	mov	x29, sp
     a60:	stp	x19, x20, [sp, #16]
     a64:	mov	w20, w0
     a68:	stp	x21, x22, [sp, #32]
     a6c:	ldp	x0, x22, [x4, #16]
     a70:	stp	x25, x26, [sp, #64]
     a74:	mov	x26, x3
     a78:	cbz	x0, c08 <gomp_doacross_ull_init+0x1c0>
     a7c:	stp	x23, x24, [sp, #48]
     a80:	ldr	w24, [x0]
     a84:	cmp	w24, #0x1
     a88:	b.eq	c04 <gomp_doacross_ull_init+0x1bc>  // b.none
     a8c:	mov	x23, x1
     a90:	mov	x21, x2
     a94:	mov	x5, #0x0                   	// #0
     a98:	mov	w19, #0x0                   	// #0
     a9c:	cbz	w20, d14 <gomp_doacross_ull_init+0x2cc>
     aa0:	add	x3, sp, #0x70
     aa4:	mov	w1, #0x1                   	// #1
     aa8:	mov	w0, #0x40                  	// #64
     aac:	b	ad4 <gomp_doacross_ull_init+0x8c>
     ab0:	add	x5, x5, #0x1
     ab4:	mov	w19, #0x41                  	// #65
     ab8:	cmp	w20, w5
     abc:	b.ls	ce8 <gomp_doacross_ull_init+0x2a0>  // b.plast
     ac0:	ldr	x2, [x23, x5, lsl #3]
     ac4:	cbz	x2, c04 <gomp_doacross_ull_init+0x1bc>
     ac8:	add	x5, x5, #0x1
     acc:	cmp	w20, w5
     ad0:	b.ls	b14 <gomp_doacross_ull_init+0xcc>  // b.plast
     ad4:	ldr	x6, [x23, x5, lsl #3]
     ad8:	cmp	w19, #0x40
     adc:	sub	x4, x6, #0x1
     ae0:	clz	x4, x4
     ae4:	cbz	x6, c04 <gomp_doacross_ull_init+0x1bc>
     ae8:	sub	w4, w0, w4
     aec:	b.hi	ac8 <gomp_doacross_ull_init+0x80>  // b.pmore
     af0:	cmp	x6, #0x1
     af4:	csel	w4, w4, w1, ne  // ne = any
     af8:	add	w19, w19, w4
     afc:	cmp	w19, #0x40
     b00:	b.hi	ab0 <gomp_doacross_ull_init+0x68>  // b.pmore
     b04:	str	w4, [x3, x5, lsl #2]
     b08:	add	x5, x5, #0x1
     b0c:	cmp	w20, w5
     b10:	b.hi	ad4 <gomp_doacross_ull_init+0x8c>  // b.pmore
     b14:	stp	x27, x28, [sp, #80]
     b18:	ldr	w0, [x22]
     b1c:	mov	w24, w24
     b20:	cmp	w0, #0x1
     b24:	b.eq	b40 <gomp_doacross_ull_init+0xf8>  // b.none
     b28:	cmp	w0, #0x3
     b2c:	ldr	x24, [x23]
     b30:	b.eq	b40 <gomp_doacross_ull_init+0xf8>  // b.none
     b34:	sub	x24, x24, #0x1
     b38:	udiv	x24, x24, x21
     b3c:	add	x24, x24, #0x1
     b40:	cmp	w19, #0x40
     b44:	b.ls	c4c <gomp_doacross_ull_init+0x204>  // b.plast
     b48:	mov	x27, #0x3f                  	// #63
     b4c:	mov	x28, #0x77                  	// #119
     b50:	add	x27, x27, w20, uxtw #3
     b54:	and	x27, x27, #0xffffffffffffffc0
     b58:	mul	x1, x24, x27
     b5c:	str	x1, [sp, #104]
     b60:	add	x0, x1, x28
     b64:	bl	0 <gomp_malloc>
     b68:	add	x28, x0, x28
     b6c:	and	x28, x28, #0xffffffffffffffc0
     b70:	stp	x21, x27, [x0]
     b74:	mov	x25, x0
     b78:	str	w20, [x0, #16]
     b7c:	strb	wzr, [x0, #20]
     b80:	str	x28, [x0, #24]
     b84:	str	xzr, [x0, #40]
     b88:	ldr	x1, [sp, #104]
     b8c:	cbnz	x26, cd0 <gomp_doacross_ull_init+0x288>
     b90:	str	xzr, [x0, #48]
     b94:	cmp	w19, #0x40
     b98:	b.ls	c5c <gomp_doacross_ull_init+0x214>  // b.plast
     b9c:	ubfiz	x20, x20, #3, #32
     ba0:	mov	x26, #0x0                   	// #0
     ba4:	mov	x19, #0x0                   	// #0
     ba8:	cbz	x24, bd4 <gomp_doacross_ull_init+0x18c>
     bac:	nop
     bb0:	ldr	x0, [x25, #24]
     bb4:	add	x19, x19, #0x1
     bb8:	mov	x2, x20
     bbc:	mov	w1, #0x0                   	// #0
     bc0:	add	x0, x0, x26
     bc4:	bl	0 <memset>
     bc8:	add	x26, x26, x27
     bcc:	cmp	x24, x19
     bd0:	b.ne	bb0 <gomp_doacross_ull_init+0x168>  // b.any
     bd4:	ldr	w0, [x22]
     bd8:	cmp	x21, #0x0
     bdc:	ccmp	w0, #0x1, #0x0, eq  // eq = none
     be0:	b.eq	cf4 <gomp_doacross_ull_init+0x2ac>  // b.none
     be4:	ldp	x23, x24, [sp, #48]
     be8:	ldp	x27, x28, [sp, #80]
     bec:	str	x25, [x22, #32]
     bf0:	ldp	x19, x20, [sp, #16]
     bf4:	ldp	x21, x22, [sp, #32]
     bf8:	ldp	x25, x26, [sp, #64]
     bfc:	ldp	x29, x30, [sp], #368
     c00:	ret
     c04:	ldp	x23, x24, [sp, #48]
     c08:	cbnz	x26, c24 <gomp_doacross_ull_init+0x1dc>
     c0c:	str	xzr, [x22, #32]
     c10:	ldp	x19, x20, [sp, #16]
     c14:	ldp	x21, x22, [sp, #32]
     c18:	ldp	x25, x26, [sp, #64]
     c1c:	ldp	x29, x30, [sp], #368
     c20:	ret
     c24:	add	x0, x26, #0x38
     c28:	bl	0 <gomp_malloc_cleared>
     c2c:	add	x1, x0, #0x38
     c30:	str	x1, [x0, #48]
     c34:	str	x0, [x22, #32]
     c38:	ldp	x19, x20, [sp, #16]
     c3c:	ldp	x21, x22, [sp, #32]
     c40:	ldp	x25, x26, [sp, #64]
     c44:	ldp	x29, x30, [sp], #368
     c48:	ret
     c4c:	mov	x28, #0x77                  	// #119
     c50:	mov	x27, #0x40                  	// #64
     c54:	add	x28, x28, w20, uxtw #2
     c58:	b	b58 <gomp_doacross_ull_init+0x110>
     c5c:	mov	w0, #0x1                   	// #1
     c60:	strb	w0, [x25, #20]
     c64:	cbz	w20, ca8 <gomp_doacross_ull_init+0x260>
     c68:	sub	w2, w20, #0x1
     c6c:	add	x3, sp, #0x70
     c70:	mvn	x5, x2
     c74:	mov	x1, #0x0                   	// #0
     c78:	lsl	x2, x2, #2
     c7c:	mov	w0, #0x0                   	// #0
     c80:	add	x4, x2, #0x38
     c84:	lsl	x5, x5, #2
     c88:	add	x4, x25, x4
     c8c:	add	x3, x3, x2
     c90:	ldr	w2, [x3, x1]
     c94:	str	w0, [x4, x1]
     c98:	sub	x1, x1, #0x4
     c9c:	cmp	x5, x1
     ca0:	add	w0, w0, w2
     ca4:	b.ne	c90 <gomp_doacross_ull_init+0x248>  // b.any
     ca8:	cbz	x24, bd4 <gomp_doacross_ull_init+0x18c>
     cac:	ldr	x1, [x25, #24]
     cb0:	mov	x0, #0x0                   	// #0
     cb4:	nop
     cb8:	str	xzr, [x1]
     cbc:	add	x0, x0, #0x1
     cc0:	cmp	x24, x0
     cc4:	add	x1, x1, x27
     cc8:	b.ne	cb8 <gomp_doacross_ull_init+0x270>  // b.any
     ccc:	b	bd4 <gomp_doacross_ull_init+0x18c>
     cd0:	add	x0, x28, x1
     cd4:	mov	x2, x26
     cd8:	mov	w1, #0x0                   	// #0
     cdc:	str	x0, [x25, #48]
     ce0:	bl	0 <memset>
     ce4:	b	b94 <gomp_doacross_ull_init+0x14c>
     ce8:	mov	w19, #0x41                  	// #65
     cec:	stp	x27, x28, [sp, #80]
     cf0:	b	b18 <gomp_doacross_ull_init+0xd0>
     cf4:	ldr	x1, [x23]
     cf8:	udiv	x0, x1, x24
     cfc:	msub	x24, x0, x24, x1
     d00:	str	x0, [x25]
     d04:	madd	x0, x0, x24, x24
     d08:	str	x24, [x25, #32]
     d0c:	str	x0, [x25, #40]
     d10:	b	be4 <gomp_doacross_ull_init+0x19c>
     d14:	mov	w19, w20
     d18:	stp	x27, x28, [sp, #80]
     d1c:	b	b18 <gomp_doacross_ull_init+0xd0>

0000000000000d20 <GOMP_doacross_ull_post>:
     d20:	adrp	x2, 0 <gomp_tls_data>
     d24:	ldr	x2, [x2]
     d28:	mrs	x1, tpidr_el0
     d2c:	add	x2, x1, x2
     d30:	ldr	x3, [x2, #24]
     d34:	ldr	x1, [x3, #32]
     d38:	cbz	x1, dc4 <GOMP_doacross_ull_post+0xa4>
     d3c:	ldr	x4, [x1, #24]
     d40:	cbz	x4, dc4 <GOMP_doacross_ull_post+0xa4>
     d44:	ldr	w3, [x3]
     d48:	cmp	w3, #0x1
     d4c:	b.ne	dcc <GOMP_doacross_ull_post+0xac>  // b.any
     d50:	ldr	w7, [x2, #40]
     d54:	ldrb	w2, [x1, #20]
     d58:	cbz	w2, de4 <GOMP_doacross_ull_post+0xc4>
     d5c:	ldr	x3, [x0]
     d60:	ldr	x5, [x1, #8]
     d64:	ldr	w2, [x1, #56]
     d68:	ldr	w6, [x1, #16]
     d6c:	madd	x7, x7, x5, x4
     d70:	cmp	w6, #0x1
     d74:	lsl	x3, x3, x2
     d78:	b.ls	da4 <GOMP_doacross_ull_post+0x84>  // b.plast
     d7c:	add	x4, x1, #0x38
     d80:	mov	x1, #0x1                   	// #1
     d84:	nop
     d88:	ldr	x2, [x0, x1, lsl #3]
     d8c:	ldr	w5, [x4, x1, lsl #2]
     d90:	add	x1, x1, #0x1
     d94:	cmp	w6, w1
     d98:	lsl	x2, x2, x5
     d9c:	orr	x3, x3, x2
     da0:	b.hi	d88 <GOMP_doacross_ull_post+0x68>  // b.pmore
     da4:	add	x3, x3, #0x1
     da8:	ldar	x0, [x7]
     dac:	cmp	x0, x3
     db0:	b.eq	dbc <GOMP_doacross_ull_post+0x9c>  // b.none
     db4:	stlr	x3, [x7]
     db8:	ret
     dbc:	dmb	ish
     dc0:	ret
     dc4:	dmb	ish
     dc8:	ret
     dcc:	cmp	w3, #0x3
     dd0:	ldr	x7, [x0]
     dd4:	b.eq	d54 <GOMP_doacross_ull_post+0x34>  // b.none
     dd8:	ldr	x2, [x1]
     ddc:	udiv	x7, x7, x2
     de0:	b	d54 <GOMP_doacross_ull_post+0x34>
     de4:	dmb	ishld
     de8:	ldr	w3, [x1, #16]
     dec:	ldr	x4, [x1, #8]
     df0:	ldr	x2, [x1, #24]
     df4:	sub	w1, w3, #0x1
     df8:	mul	x7, x7, x4
     dfc:	cbz	w3, db8 <GOMP_doacross_ull_post+0x98>
     e00:	ubfiz	x1, x1, #3, #32
     e04:	add	x7, x7, x1
     e08:	add	x1, x0, x1
     e0c:	add	x7, x2, x7
     e10:	ldr	x2, [x1]
     e14:	add	x2, x2, #0x1
     e18:	ldr	x3, [x7]
     e1c:	cmp	x2, x3
     e20:	b.eq	e28 <GOMP_doacross_ull_post+0x108>  // b.none
     e24:	stlr	x2, [x7]
     e28:	cmp	x1, x0
     e2c:	sub	x7, x7, #0x8
     e30:	sub	x1, x1, #0x8
     e34:	b.ne	e10 <GOMP_doacross_ull_post+0xf0>  // b.any
     e38:	ret
     e3c:	nop

0000000000000e40 <GOMP_doacross_ull_wait>:
     e40:	sub	sp, sp, #0x60
     e44:	adrp	x9, 0 <gomp_tls_data>
     e48:	ldr	x9, [x9]
     e4c:	mrs	x8, tpidr_el0
     e50:	stp	x1, x2, [sp, #40]
     e54:	add	x1, x8, x9
     e58:	stp	x3, x4, [sp, #56]
     e5c:	ldr	x3, [x1, #24]
     e60:	stp	x5, x6, [sp, #72]
     e64:	str	x7, [sp, #88]
     e68:	ldr	x2, [x3, #32]
     e6c:	cbz	x2, 1064 <GOMP_doacross_ull_wait+0x224>
     e70:	ldr	x5, [x2, #24]
     e74:	cbz	x5, 1064 <GOMP_doacross_ull_wait+0x224>
     e78:	ldr	w4, [x3]
     e7c:	cmp	w4, #0x1
     e80:	b.ne	1084 <GOMP_doacross_ull_wait+0x244>  // b.any
     e84:	ldr	x6, [x3, #8]
     e88:	cbz	x6, 103c <GOMP_doacross_ull_wait+0x1fc>
     e8c:	ldr	x3, [x1, #16]
     e90:	udiv	x1, x0, x6
     e94:	ldr	w3, [x3]
     e98:	udiv	x6, x1, x3
     e9c:	msub	x6, x6, x3, x1
     ea0:	ldrb	w7, [x2, #20]
     ea4:	add	x11, sp, #0x20
     ea8:	ldr	x1, [x2, #8]
     eac:	mov	w10, #0xffffffc8            	// #-56
     eb0:	mul	x6, x6, x1
     eb4:	add	x1, x0, #0x1
     eb8:	cbz	w7, fac <GOMP_doacross_ull_wait+0x16c>
     ebc:	add	x8, sp, #0x60
     ec0:	ldr	w1, [x2, #56]
     ec4:	add	x4, sp, #0x20
     ec8:	mov	w3, #0xffffffc8            	// #-56
     ecc:	stp	x8, x8, [sp]
     ed0:	add	x5, x5, x6
     ed4:	ldr	w8, [x2, #16]
     ed8:	str	x4, [sp, #16]
     edc:	lsl	x0, x0, x1
     ee0:	stp	w3, wzr, [sp, #24]
     ee4:	cmp	w8, #0x1
     ee8:	b.ls	f78 <GOMP_doacross_ull_wait+0x138>  // b.plast
     eec:	sub	w8, w8, #0x2
     ef0:	add	x4, x2, #0x40
     ef4:	add	x1, x2, #0x3c
     ef8:	mov	w9, #0x0                   	// #0
     efc:	add	x8, x4, w8, uxtw #2
     f00:	mov	w10, #0x0                   	// #0
     f04:	add	x4, sp, #0x60
     f08:	b	f30 <GOMP_doacross_ull_wait+0xf0>
     f0c:	mov	x2, x4
     f10:	ldr	w6, [x1], #4
     f14:	mov	w9, w7
     f18:	add	x4, x4, #0x8
     f1c:	cmp	x1, x8
     f20:	ldr	x2, [x2]
     f24:	lsl	x2, x2, x6
     f28:	orr	x0, x0, x2
     f2c:	b.eq	f68 <GOMP_doacross_ull_wait+0x128>  // b.none
     f30:	add	w6, w3, #0x8
     f34:	tbz	w3, #31, f0c <GOMP_doacross_ull_wait+0xcc>
     f38:	add	x2, sp, #0x60
     f3c:	mov	w10, w7
     f40:	add	x2, x2, w3, sxtw
     f44:	cmp	w6, #0x0
     f48:	mov	w3, w6
     f4c:	b.gt	f0c <GOMP_doacross_ull_wait+0xcc>
     f50:	ldr	x2, [x2]
     f54:	ldr	w6, [x1], #4
     f58:	cmp	x1, x8
     f5c:	lsl	x2, x2, x6
     f60:	orr	x0, x0, x2
     f64:	b.ne	f30 <GOMP_doacross_ull_wait+0xf0>  // b.any
     f68:	cbz	w10, f70 <GOMP_doacross_ull_wait+0x130>
     f6c:	str	w3, [sp, #24]
     f70:	cbz	w9, f78 <GOMP_doacross_ull_wait+0x138>
     f74:	str	x4, [sp]
     f78:	ldar	x1, [x5]
     f7c:	cmp	x1, x0
     f80:	b.hi	f94 <GOMP_doacross_ull_wait+0x154>  // b.pmore
     f84:	nop
     f88:	ldr	x1, [x5]
     f8c:	cmp	x1, x0
     f90:	b.ls	f88 <GOMP_doacross_ull_wait+0x148>  // b.plast
     f94:	dmb	ish
     f98:	add	sp, sp, #0x60
     f9c:	ret
     fa0:	mov	w0, w7
     fa4:	cmp	w7, w0
     fa8:	b.eq	1064 <GOMP_doacross_ull_wait+0x224>  // b.none
     fac:	ldr	w7, [x2, #16]
     fb0:	add	x0, sp, #0x60
     fb4:	stp	x0, x0, [sp]
     fb8:	mov	w0, w7
     fbc:	str	x11, [sp, #16]
     fc0:	stp	w10, wzr, [sp, #24]
     fc4:	cbz	w7, fa4 <GOMP_doacross_ull_wait+0x164>
     fc8:	mov	w0, #0x0                   	// #0
     fcc:	b	1004 <GOMP_doacross_ull_wait+0x1c4>
     fd0:	and	x8, x8, #0xfffffffffffffff8
     fd4:	str	x8, [sp]
     fd8:	ldr	x4, [x3]
     fdc:	add	x4, x4, #0x1
     fe0:	add	x3, x6, w0, uxtw #3
     fe4:	add	x3, x5, x3
     fe8:	ldr	x3, [x3]
     fec:	cmp	x4, x3
     ff0:	b.cc	fa0 <GOMP_doacross_ull_wait+0x160>  // b.lo, b.ul, b.last
     ff4:	b.hi	fa4 <GOMP_doacross_ull_wait+0x164>  // b.pmore
     ff8:	add	w0, w0, #0x1
     ffc:	cmp	w7, w0
    1000:	b.ls	fa4 <GOMP_doacross_ull_wait+0x164>  // b.plast
    1004:	mov	x4, x1
    1008:	cbz	w0, fe0 <GOMP_doacross_ull_wait+0x1a0>
    100c:	ldr	w4, [sp, #24]
    1010:	ldr	x3, [sp]
    1014:	add	w9, w4, #0x8
    1018:	add	x8, x3, #0xf
    101c:	tbz	w4, #31, fd0 <GOMP_doacross_ull_wait+0x190>
    1020:	str	w9, [sp, #24]
    1024:	add	x8, x3, #0xf
    1028:	cmp	w9, #0x0
    102c:	and	x8, x8, #0xfffffffffffffff8
    1030:	b.le	1058 <GOMP_doacross_ull_wait+0x218>
    1034:	str	x8, [sp]
    1038:	b	fd8 <GOMP_doacross_ull_wait+0x198>
    103c:	ldr	x1, [x2, #40]
    1040:	ldr	x3, [x2]
    1044:	cmp	x1, x0
    1048:	b.ls	1070 <GOMP_doacross_ull_wait+0x230>  // b.plast
    104c:	add	x6, x3, #0x1
    1050:	udiv	x6, x0, x6
    1054:	b	ea0 <GOMP_doacross_ull_wait+0x60>
    1058:	ldr	x3, [sp, #8]
    105c:	add	x3, x3, w4, sxtw
    1060:	b	fd8 <GOMP_doacross_ull_wait+0x198>
    1064:	dmb	ish
    1068:	add	sp, sp, #0x60
    106c:	ret
    1070:	sub	x6, x0, x1
    1074:	ldr	x1, [x2, #32]
    1078:	udiv	x6, x6, x3
    107c:	add	x6, x6, x1
    1080:	b	ea0 <GOMP_doacross_ull_wait+0x60>
    1084:	cmp	w4, #0x3
    1088:	mov	x6, x0
    108c:	b.eq	ea0 <GOMP_doacross_ull_wait+0x60>  // b.none
    1090:	ldr	x6, [x2]
    1094:	udiv	x6, x0, x6
    1098:	b	ea0 <GOMP_doacross_ull_wait+0x60>

parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_cancellation_point.part.0>:
   0:	adrp	x1, 0 <gomp_tls_data>
   4:	ldr	x1, [x1]
   8:	mrs	x2, tpidr_el0
   c:	tst	w0, #0x6
  10:	add	x1, x2, x1
  14:	ldr	x2, [x1, #16]
  18:	b.eq	34 <GOMP_cancellation_point.part.0+0x34>  // b.none
  1c:	mov	w0, #0x0                   	// #0
  20:	cbz	x2, 30 <GOMP_cancellation_point.part.0+0x30>
  24:	ldr	w0, [x2, #1332]
  28:	cmp	w0, #0x0
  2c:	cset	w0, ne  // ne = any
  30:	ret
  34:	tbz	w0, #3, 68 <GOMP_cancellation_point.part.0+0x68>
  38:	ldr	x0, [x1, #80]
  3c:	ldr	x1, [x0, #40]
  40:	cbz	x1, 68 <GOMP_cancellation_point.part.0+0x68>
  44:	ldrb	w0, [x1, #49]
  48:	cbnz	w0, 30 <GOMP_cancellation_point.part.0+0x30>
  4c:	ldrb	w0, [x1, #50]
  50:	cbz	w0, 68 <GOMP_cancellation_point.part.0+0x68>
  54:	ldr	x0, [x1]
  58:	cbz	x0, 68 <GOMP_cancellation_point.part.0+0x68>
  5c:	ldrb	w0, [x0, #49]
  60:	cbnz	w0, 30 <GOMP_cancellation_point.part.0+0x30>
  64:	nop
  68:	mov	w0, #0x0                   	// #0
  6c:	cbz	x2, 30 <GOMP_cancellation_point.part.0+0x30>
  70:	ldr	w0, [x2, #132]
  74:	ubfx	x0, x0, #2, #1
  78:	ret
  7c:	nop

0000000000000080 <gomp_resolve_num_threads>:
  80:	stp	x29, x30, [sp, #-64]!
  84:	mov	x29, sp
  88:	stp	x21, x22, [sp, #32]
  8c:	mrs	x21, tpidr_el0
  90:	adrp	x22, 0 <gomp_tls_data>
  94:	ldr	x22, [x22]
  98:	stp	x19, x20, [sp, #16]
  9c:	adrp	x20, 0 <gomp_global_icv>
  a0:	add	x3, x21, x22
  a4:	add	x20, x20, #0x0
  a8:	ldr	x2, [x3, #80]
  ac:	cmp	x2, #0x0
  b0:	add	x2, x2, #0x90
  b4:	csel	x20, x20, x2, eq  // eq = none
  b8:	cmp	w0, #0x1
  bc:	b.eq	124 <gomp_resolve_num_threads+0xa4>  // b.none
  c0:	ldr	w2, [x3, #48]
  c4:	str	x23, [sp, #48]
  c8:	mov	w23, w1
  cc:	cbz	w2, d8 <gomp_resolve_num_threads+0x58>
  d0:	ldrb	w3, [x20, #25]
  d4:	cbz	w3, 120 <gomp_resolve_num_threads+0xa0>
  d8:	adrp	x3, 0 <gomp_max_active_levels_var>
  dc:	ldr	x3, [x3]
  e0:	cmp	x3, w2, uxtw
  e4:	b.ls	120 <gomp_resolve_num_threads+0xa0>  // b.plast
  e8:	mov	w19, w0
  ec:	cbnz	w0, f4 <gomp_resolve_num_threads+0x74>
  f0:	ldr	w19, [x20]
  f4:	ldrb	w0, [x20, #24]
  f8:	cbnz	w0, 13c <gomp_resolve_num_threads+0xbc>
  fc:	ldr	w0, [x20, #20]
 100:	cmn	w0, #0x1
 104:	b.ne	158 <gomp_resolve_num_threads+0xd8>  // b.any
 108:	mov	w0, w19
 10c:	ldp	x19, x20, [sp, #16]
 110:	ldp	x21, x22, [sp, #32]
 114:	ldr	x23, [sp, #48]
 118:	ldp	x29, x30, [sp], #64
 11c:	ret
 120:	ldr	x23, [sp, #48]
 124:	mov	w19, #0x1                   	// #1
 128:	mov	w0, w19
 12c:	ldp	x19, x20, [sp, #16]
 130:	ldp	x21, x22, [sp, #32]
 134:	ldp	x29, x30, [sp], #64
 138:	ret
 13c:	bl	0 <gomp_dynamic_max_threads>
 140:	cmp	w19, w0
 144:	csel	w19, w19, w0, ls  // ls = plast
 148:	cmp	w23, #0x0
 14c:	ccmp	w19, w23, #0x0, ne  // ne = any
 150:	csel	w19, w19, w23, ls  // ls = plast
 154:	b	fc <gomp_resolve_num_threads+0x7c>
 158:	cmp	w19, #0x1
 15c:	b.eq	120 <gomp_resolve_num_threads+0xa0>  // b.none
 160:	add	x21, x21, x22
 164:	ldr	x1, [x21, #16]
 168:	ldr	x9, [x21, #96]
 16c:	cbz	x1, 1e4 <gomp_resolve_num_threads+0x164>
 170:	cbz	x9, 200 <gomp_resolve_num_threads+0x180>
 174:	mov	w6, w19
 178:	add	x5, x9, #0x18
 17c:	mov	x4, #0x1                   	// #1
 180:	b	188 <gomp_resolve_num_threads+0x108>
 184:	ldr	w0, [x20, #20]
 188:	ldr	x1, [x9, #24]
 18c:	mov	x3, x6
 190:	mov	w8, w19
 194:	sub	x2, x4, x1
 198:	sub	w7, w4, w1
 19c:	add	x2, x2, w0, uxtw
 1a0:	cmp	x2, x6
 1a4:	b.cs	1b0 <gomp_resolve_num_threads+0x130>  // b.hs, b.nlast
 1a8:	add	w8, w7, w0
 1ac:	add	w3, w7, w0
 1b0:	sub	x0, x1, #0x1
 1b4:	add	x0, x0, x3
 1b8:	ldxr	x2, [x5]
 1bc:	cmp	x2, x1
 1c0:	b.ne	1cc <gomp_resolve_num_threads+0x14c>  // b.any
 1c4:	stlxr	w3, x0, [x5]
 1c8:	cbnz	w3, 1b8 <gomp_resolve_num_threads+0x138>
 1cc:	dmb	ish
 1d0:	cmp	x2, x1
 1d4:	b.ne	184 <gomp_resolve_num_threads+0x104>  // b.any
 1d8:	mov	w19, w8
 1dc:	ldr	x23, [sp, #48]
 1e0:	b	128 <gomp_resolve_num_threads+0xa8>
 1e4:	cmp	w19, w0
 1e8:	csel	w19, w19, w0, ls  // ls = plast
 1ec:	cbz	x9, 108 <gomp_resolve_num_threads+0x88>
 1f0:	mov	w0, w19
 1f4:	ldr	x23, [sp, #48]
 1f8:	str	x0, [x9, #24]
 1fc:	b	128 <gomp_resolve_num_threads+0xa8>
 200:	cmp	w19, w0
 204:	csel	w19, w19, w0, ls  // ls = plast
 208:	ldr	x23, [sp, #48]
 20c:	b	128 <gomp_resolve_num_threads+0xa8>

0000000000000210 <GOMP_parallel_start>:
 210:	stp	x29, x30, [sp, #-48]!
 214:	mov	x29, sp
 218:	stp	x19, x20, [sp, #16]
 21c:	mov	x20, x1
 220:	mov	w1, #0x0                   	// #0
 224:	mov	x19, x0
 228:	mov	w0, w2
 22c:	str	x21, [sp, #32]
 230:	bl	80 <gomp_resolve_num_threads>
 234:	mov	w21, w0
 238:	bl	0 <gomp_new_team>
 23c:	mov	w2, w21
 240:	mov	x4, x0
 244:	mov	x1, x20
 248:	mov	x0, x19
 24c:	ldp	x19, x20, [sp, #16]
 250:	mov	x5, #0x0                   	// #0
 254:	ldr	x21, [sp, #32]
 258:	mov	w3, #0x0                   	// #0
 25c:	ldp	x29, x30, [sp], #48
 260:	b	0 <gomp_team_start>
 264:	nop

0000000000000268 <GOMP_parallel_end>:
 268:	stp	x29, x30, [sp, #-32]!
 26c:	mrs	x0, tpidr_el0
 270:	adrp	x1, 0 <gomp_global_icv>
 274:	mov	x29, sp
 278:	stp	x19, x20, [sp, #16]
 27c:	add	x1, x1, #0x0
 280:	adrp	x19, 0 <gomp_tls_data>
 284:	ldr	x19, [x19]
 288:	add	x19, x0, x19
 28c:	ldr	x0, [x19, #80]
 290:	cmp	x0, #0x0
 294:	add	x0, x0, #0x90
 298:	csel	x0, x1, x0, eq  // eq = none
 29c:	ldr	w0, [x0, #20]
 2a0:	cmn	w0, #0x1
 2a4:	b.ne	2b4 <GOMP_parallel_end+0x4c>  // b.any
 2a8:	ldp	x19, x20, [sp, #16]
 2ac:	ldp	x29, x30, [sp], #32
 2b0:	b	0 <gomp_team_end>
 2b4:	ldr	x0, [x19, #16]
 2b8:	cbz	x0, 2a8 <GOMP_parallel_end+0x40>
 2bc:	ldr	w20, [x0]
 2c0:	bl	0 <gomp_team_end>
 2c4:	cmp	w20, #0x1
 2c8:	b.ls	2f8 <GOMP_parallel_end+0x90>  // b.plast
 2cc:	ldr	x0, [x19, #16]
 2d0:	cbz	x0, 304 <GOMP_parallel_end+0x9c>
 2d4:	ldr	x0, [x19, #96]
 2d8:	mov	x1, #0x1                   	// #1
 2dc:	sub	x20, x1, w20, uxtw
 2e0:	add	x0, x0, #0x18
 2e4:	ldxr	x1, [x0]
 2e8:	add	x1, x1, x20
 2ec:	stlxr	w2, x1, [x0]
 2f0:	cbnz	w2, 2e4 <GOMP_parallel_end+0x7c>
 2f4:	dmb	ish
 2f8:	ldp	x19, x20, [sp, #16]
 2fc:	ldp	x29, x30, [sp], #32
 300:	ret
 304:	ldr	x0, [x19, #96]
 308:	mov	x1, #0x1                   	// #1
 30c:	str	x1, [x0, #24]
 310:	b	2f8 <GOMP_parallel_end+0x90>
 314:	nop

0000000000000318 <GOMP_parallel>:
 318:	stp	x29, x30, [sp, #-48]!
 31c:	mov	x29, sp
 320:	stp	x19, x20, [sp, #16]
 324:	mov	x20, x1
 328:	mov	w1, #0x0                   	// #0
 32c:	mov	x19, x0
 330:	mov	w0, w2
 334:	stp	x21, x22, [sp, #32]
 338:	mov	w22, w3
 33c:	bl	80 <gomp_resolve_num_threads>
 340:	mov	w21, w0
 344:	bl	0 <gomp_new_team>
 348:	mov	w3, w22
 34c:	mov	w2, w21
 350:	mov	x4, x0
 354:	mov	x1, x20
 358:	mov	x5, #0x0                   	// #0
 35c:	mov	x0, x19
 360:	bl	0 <gomp_team_start>
 364:	mov	x0, x20
 368:	blr	x19
 36c:	ldp	x19, x20, [sp, #16]
 370:	ldp	x21, x22, [sp, #32]
 374:	ldp	x29, x30, [sp], #48
 378:	b	268 <GOMP_parallel_end>
 37c:	nop

0000000000000380 <GOMP_parallel_reductions>:
 380:	stp	x29, x30, [sp, #-64]!
 384:	mov	x29, sp
 388:	stp	x19, x20, [sp, #16]
 38c:	mov	x20, x1
 390:	mov	w1, #0x0                   	// #0
 394:	stp	x21, x22, [sp, #32]
 398:	mov	x22, x0
 39c:	mov	w0, w2
 3a0:	str	x23, [sp, #48]
 3a4:	mov	w23, w3
 3a8:	bl	80 <gomp_resolve_num_threads>
 3ac:	mov	w19, w0
 3b0:	mov	w1, w0
 3b4:	ldr	x0, [x20]
 3b8:	bl	0 <gomp_parallel_reduction_register>
 3bc:	mov	x21, x0
 3c0:	mov	w0, w19
 3c4:	bl	0 <gomp_new_team>
 3c8:	mov	x5, x21
 3cc:	mov	x4, x0
 3d0:	mov	w3, w23
 3d4:	mov	w2, w19
 3d8:	mov	x1, x20
 3dc:	mov	x0, x22
 3e0:	bl	0 <gomp_team_start>
 3e4:	mov	x0, x20
 3e8:	blr	x22
 3ec:	bl	268 <GOMP_parallel_end>
 3f0:	mov	x0, x21
 3f4:	bl	0 <free>
 3f8:	mov	w0, w19
 3fc:	ldp	x19, x20, [sp, #16]
 400:	ldp	x21, x22, [sp, #32]
 404:	ldr	x23, [sp, #48]
 408:	ldp	x29, x30, [sp], #64
 40c:	ret

0000000000000410 <GOMP_cancellation_point>:
 410:	adrp	x1, 0 <gomp_cancel_var>
 414:	ldrb	w1, [x1]
 418:	cbz	w1, 420 <GOMP_cancellation_point+0x10>
 41c:	b	0 <GOMP_cancellation_point.part.0>
 420:	mov	w0, #0x0                   	// #0
 424:	ret

0000000000000428 <GOMP_cancel>:
 428:	adrp	x2, 0 <gomp_cancel_var>
 42c:	ldrb	w2, [x2]
 430:	cbz	w2, 4ec <GOMP_cancel+0xc4>
 434:	stp	x29, x30, [sp, #-48]!
 438:	mov	x29, sp
 43c:	stp	x19, x20, [sp, #16]
 440:	and	w19, w1, #0xff
 444:	cbz	w19, 4e0 <GOMP_cancel+0xb8>
 448:	mov	w1, w0
 44c:	adrp	x0, 0 <gomp_tls_data>
 450:	ldr	x0, [x0]
 454:	mrs	x2, tpidr_el0
 458:	tst	w1, #0x6
 45c:	add	x2, x2, x0
 460:	ldr	x0, [x2, #16]
 464:	b.ne	504 <GOMP_cancel+0xdc>  // b.any
 468:	tbz	w1, #3, 4f4 <GOMP_cancel+0xcc>
 46c:	ldr	x1, [x2, #80]
 470:	ldr	x20, [x1, #40]
 474:	cbz	x20, 4cc <GOMP_cancel+0xa4>
 478:	ldrb	w1, [x20, #50]
 47c:	cbz	w1, 48c <GOMP_cancel+0x64>
 480:	ldr	x1, [x20]
 484:	cmp	x1, #0x0
 488:	csel	x20, x20, x1, eq  // eq = none
 48c:	ldrb	w1, [x20, #49]
 490:	cbnz	w1, 4cc <GOMP_cancel+0xa4>
 494:	add	x0, x0, #0x500
 498:	mov	w2, #0x1                   	// #1
 49c:	ldaxr	w1, [x0]
 4a0:	cbnz	w1, 4ac <GOMP_cancel+0x84>
 4a4:	stxr	w3, w2, [x0]
 4a8:	cbnz	w3, 49c <GOMP_cancel+0x74>
 4ac:	cmp	w1, #0x0
 4b0:	b.ne	530 <GOMP_cancel+0x108>  // b.any
 4b4:	mov	w1, #0x1                   	// #1
 4b8:	strb	w1, [x20, #49]
 4bc:	ldxr	w1, [x0]
 4c0:	stlxr	w2, wzr, [x0]
 4c4:	cbnz	w2, 4bc <GOMP_cancel+0x94>
 4c8:	tbnz	w1, #31, 524 <GOMP_cancel+0xfc>
 4cc:	mov	w2, w19
 4d0:	mov	w0, w2
 4d4:	ldp	x19, x20, [sp, #16]
 4d8:	ldp	x29, x30, [sp], #48
 4dc:	ret
 4e0:	ldp	x19, x20, [sp, #16]
 4e4:	ldp	x29, x30, [sp], #48
 4e8:	b	0 <GOMP_cancellation_point.part.0>
 4ec:	mov	w0, w2
 4f0:	ret
 4f4:	mov	w1, #0x1                   	// #1
 4f8:	str	w1, [x0, #1336]
 4fc:	bl	0 <gomp_team_barrier_cancel>
 500:	b	4cc <GOMP_cancel+0xa4>
 504:	cbz	x0, 4cc <GOMP_cancel+0xa4>
 508:	mov	w1, #0x1                   	// #1
 50c:	str	w1, [x0, #1332]
 510:	mov	w2, w19
 514:	mov	w0, w2
 518:	ldp	x19, x20, [sp, #16]
 51c:	ldp	x29, x30, [sp], #48
 520:	ret
 524:	bl	0 <gomp_mutex_unlock_slow>
 528:	mov	w2, w19
 52c:	b	4d0 <GOMP_cancel+0xa8>
 530:	str	x0, [sp, #40]
 534:	bl	0 <gomp_mutex_lock_slow>
 538:	ldr	x0, [sp, #40]
 53c:	b	4b4 <GOMP_cancel+0x8c>

0000000000000540 <gomp_ialias_omp_get_num_threads>:
 540:	adrp	x2, 0 <gomp_tls_data>
 544:	ldr	x2, [x2]
 548:	mrs	x1, tpidr_el0
 54c:	mov	w0, #0x1                   	// #1
 550:	add	x1, x1, x2
 554:	ldr	x1, [x1, #16]
 558:	cbz	x1, 560 <gomp_ialias_omp_get_num_threads+0x20>
 55c:	ldr	w0, [x1]
 560:	ret
 564:	nop

0000000000000568 <gomp_ialias_omp_get_thread_num>:
 568:	adrp	x0, 0 <gomp_tls_data>
 56c:	ldr	x0, [x0]
 570:	mrs	x1, tpidr_el0
 574:	add	x0, x1, x0
 578:	ldr	w0, [x0, #40]
 57c:	ret

0000000000000580 <gomp_ialias_omp_in_parallel>:
 580:	adrp	x0, 0 <gomp_tls_data>
 584:	ldr	x0, [x0]
 588:	mrs	x1, tpidr_el0
 58c:	add	x0, x1, x0
 590:	ldr	w0, [x0, #48]
 594:	cmp	w0, #0x0
 598:	cset	w0, ne  // ne = any
 59c:	ret

00000000000005a0 <gomp_ialias_omp_get_level>:
 5a0:	adrp	x0, 0 <gomp_tls_data>
 5a4:	ldr	x0, [x0]
 5a8:	mrs	x1, tpidr_el0
 5ac:	add	x0, x1, x0
 5b0:	ldr	w0, [x0, #44]
 5b4:	ret

00000000000005b8 <gomp_ialias_omp_get_ancestor_thread_num>:
 5b8:	tbnz	w0, #31, 600 <gomp_ialias_omp_get_ancestor_thread_num+0x48>
 5bc:	adrp	x1, 0 <gomp_tls_data>
 5c0:	ldr	x1, [x1]
 5c4:	mrs	x2, tpidr_el0
 5c8:	add	x1, x2, x1
 5cc:	ldr	w2, [x1, #44]
 5d0:	cmp	w2, w0
 5d4:	b.cc	600 <gomp_ialias_omp_get_ancestor_thread_num+0x48>  // b.lo, b.ul, b.last
 5d8:	sub	w2, w2, w0
 5dc:	add	x0, x1, #0x10
 5e0:	cmp	w2, #0x0
 5e4:	b.le	5f8 <gomp_ialias_omp_get_ancestor_thread_num+0x40>
 5e8:	ldr	x0, [x0]
 5ec:	subs	w2, w2, #0x1
 5f0:	add	x0, x0, #0x8
 5f4:	b.ne	5e8 <gomp_ialias_omp_get_ancestor_thread_num+0x30>  // b.any
 5f8:	ldr	w0, [x0, #24]
 5fc:	ret
 600:	mov	w0, #0xffffffff            	// #-1
 604:	ret

0000000000000608 <gomp_ialias_omp_get_team_size>:
 608:	sub	sp, sp, #0x10
 60c:	mov	w2, w0
 610:	str	w0, [sp, #12]
 614:	tbnz	w2, #31, 670 <gomp_ialias_omp_get_team_size+0x68>
 618:	adrp	x0, 0 <gomp_tls_data>
 61c:	ldr	x0, [x0]
 620:	mrs	x1, tpidr_el0
 624:	add	x0, x1, x0
 628:	ldr	w1, [x0, #44]
 62c:	cmp	w1, w2
 630:	b.cc	670 <gomp_ialias_omp_get_team_size+0x68>  // b.lo, b.ul, b.last
 634:	sub	w1, w1, w2
 638:	add	x0, x0, #0x10
 63c:	cmp	w1, #0x0
 640:	b.le	658 <gomp_ialias_omp_get_team_size+0x50>
 644:	nop
 648:	ldr	x0, [x0]
 64c:	subs	w1, w1, #0x1
 650:	add	x0, x0, #0x8
 654:	b.ne	648 <gomp_ialias_omp_get_team_size+0x40>  // b.any
 658:	ldr	x1, [x0]
 65c:	mov	w0, #0x1                   	// #1
 660:	cbz	x1, 668 <gomp_ialias_omp_get_team_size+0x60>
 664:	ldr	w0, [x1]
 668:	add	sp, sp, #0x10
 66c:	ret
 670:	mov	w0, #0xffffffff            	// #-1
 674:	b	668 <gomp_ialias_omp_get_team_size+0x60>

0000000000000678 <gomp_ialias_omp_get_active_level>:
 678:	adrp	x0, 0 <gomp_tls_data>
 67c:	ldr	x0, [x0]
 680:	mrs	x1, tpidr_el0
 684:	add	x0, x1, x0
 688:	ldr	w0, [x0, #48]
 68c:	ret

sections.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_sections_start>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w0
  10:	mov	x0, #0x0                   	// #0
  14:	bl	0 <gomp_work_share_start>
  18:	tst	w0, #0xff
  1c:	b.eq	78 <GOMP_sections_start+0x78>  // b.none
  20:	adrp	x2, 0 <gomp_tls_data>
  24:	ldr	x2, [x2]
  28:	mrs	x0, tpidr_el0
  2c:	mov	x4, #0x2                   	// #2
  30:	mov	x3, #0x1                   	// #1
  34:	add	x0, x0, x2
  38:	movk	x4, #0x1, lsl #32
  3c:	mov	w1, w19
  40:	add	x1, x1, #0x1
  44:	ldr	x2, [x0, #24]
  48:	stp	x4, x3, [x2]
  4c:	ldr	x0, [x0, #32]
  50:	stp	x1, x3, [x2, #16]
  54:	str	x3, [x2, #72]
  58:	cbz	x0, 78 <GOMP_sections_start+0x78>
  5c:	add	x0, x0, #0x50
  60:	ldxr	x1, [x0]
  64:	stlxr	w3, x2, [x0]
  68:	cbnz	w3, 60 <GOMP_sections_start+0x60>
  6c:	cmp	x1, #0x1
  70:	b.eq	78 <GOMP_sections_start+0x78>  // b.none
  74:	bl	0 <gomp_ptrlock_set_slow>
  78:	add	x1, sp, #0x28
  7c:	add	x0, sp, #0x20
  80:	bl	0 <gomp_iter_dynamic_next>
  84:	sxtb	w0, w0
  88:	ldr	w1, [sp, #32]
  8c:	cmp	w0, #0x0
  90:	mov	w2, #0x0                   	// #0
  94:	csel	w0, w1, w2, ne  // ne = any
  98:	ldr	x19, [sp, #16]
  9c:	ldp	x29, x30, [sp], #48
  a0:	ret
  a4:	nop

00000000000000a8 <GOMP_sections2_start>:
  a8:	stp	x29, x30, [sp, #-96]!
  ac:	mov	x29, sp
  b0:	stp	x19, x20, [sp, #16]
  b4:	mov	w19, w0
  b8:	mov	x20, x2
  bc:	stp	x21, x22, [sp, #32]
  c0:	cbz	x1, 204 <GOMP_sections2_start+0x15c>
  c4:	mov	x21, x1
  c8:	bl	0 <gomp_workshare_taskgroup_start>
  cc:	mov	x0, #0x0                   	// #0
  d0:	bl	0 <gomp_work_share_start>
  d4:	tst	w0, #0xff
  d8:	b.eq	18c <GOMP_sections2_start+0xe4>  // b.none
  dc:	adrp	x22, 0 <gomp_tls_data>
  e0:	ldr	x22, [x22]
  e4:	mov	x2, #0x2                   	// #2
  e8:	stp	x23, x24, [sp, #48]
  ec:	mrs	x23, tpidr_el0
  f0:	mov	x24, #0x1                   	// #1
  f4:	str	x25, [sp, #64]
  f8:	add	x25, x23, x22
  fc:	movk	x2, #0x1, lsl #32
 100:	add	x19, x19, #0x1
 104:	mov	x0, x21
 108:	ldr	x1, [x25, #24]
 10c:	stp	x2, x24, [x1]
 110:	stp	x19, x24, [x1, #16]
 114:	str	x24, [x1, #72]
 118:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
 11c:	ldr	x1, [x25, #80]
 120:	ldr	x0, [x25, #24]
 124:	ldr	x1, [x1, #40]
 128:	ldr	x25, [sp, #64]
 12c:	strb	w24, [x1, #50]
 130:	str	x21, [x0, #88]
 134:	cbz	x20, 158 <GOMP_sections2_start+0xb0>
 138:	add	x1, x23, x22
 13c:	ldr	x0, [x20]
 140:	ldr	x19, [x1, #24]
 144:	cmp	x0, #0x20
 148:	b.ls	250 <GOMP_sections2_start+0x1a8>  // b.plast
 14c:	bl	0 <gomp_malloc_cleared>
 150:	str	x0, [x19, #32]
 154:	str	x0, [x20]
 158:	add	x22, x23, x22
 15c:	ldr	x0, [x22, #32]
 160:	cbz	x0, 1fc <GOMP_sections2_start+0x154>
 164:	ldr	x2, [x22, #24]
 168:	add	x0, x0, #0x50
 16c:	ldxr	x1, [x0]
 170:	stlxr	w3, x2, [x0]
 174:	cbnz	w3, 16c <GOMP_sections2_start+0xc4>
 178:	cmp	x1, #0x1
 17c:	b.eq	1fc <GOMP_sections2_start+0x154>  // b.none
 180:	bl	0 <gomp_ptrlock_set_slow>
 184:	ldp	x23, x24, [sp, #48]
 188:	b	1cc <GOMP_sections2_start+0x124>
 18c:	adrp	x2, 0 <gomp_tls_data>
 190:	ldr	x2, [x2]
 194:	mrs	x1, tpidr_el0
 198:	mov	x0, x21
 19c:	add	x1, x1, x2
 1a0:	ldr	x1, [x1, #24]
 1a4:	ldr	x1, [x1, #88]
 1a8:	bl	0 <gomp_workshare_task_reduction_register>
 1ac:	cbz	x20, 1cc <GOMP_sections2_start+0x124>
 1b0:	adrp	x0, 0 <gomp_tls_data>
 1b4:	ldr	x0, [x0]
 1b8:	mrs	x1, tpidr_el0
 1bc:	add	x0, x1, x0
 1c0:	ldr	x0, [x0, #24]
 1c4:	ldr	x0, [x0, #32]
 1c8:	str	x0, [x20]
 1cc:	add	x1, sp, #0x58
 1d0:	add	x0, sp, #0x50
 1d4:	bl	0 <gomp_iter_dynamic_next>
 1d8:	sxtb	w0, w0
 1dc:	ldr	w1, [sp, #80]
 1e0:	cmp	w0, #0x0
 1e4:	mov	w2, #0x0                   	// #0
 1e8:	csel	w0, w1, w2, ne  // ne = any
 1ec:	ldp	x19, x20, [sp, #16]
 1f0:	ldp	x21, x22, [sp, #32]
 1f4:	ldp	x29, x30, [sp], #96
 1f8:	ret
 1fc:	ldp	x23, x24, [sp, #48]
 200:	b	1cc <GOMP_sections2_start+0x124>
 204:	mov	x0, #0x0                   	// #0
 208:	bl	0 <gomp_work_share_start>
 20c:	tst	w0, #0xff
 210:	b.eq	1ac <GOMP_sections2_start+0x104>  // b.none
 214:	adrp	x22, 0 <gomp_tls_data>
 218:	ldr	x22, [x22]
 21c:	mov	w0, w19
 220:	stp	x23, x24, [sp, #48]
 224:	mrs	x23, tpidr_el0
 228:	add	x1, x23, x22
 22c:	mov	x3, #0x2                   	// #2
 230:	mov	x2, #0x1                   	// #1
 234:	add	x0, x0, #0x1
 238:	movk	x3, #0x1, lsl #32
 23c:	ldr	x1, [x1, #24]
 240:	stp	x3, x2, [x1]
 244:	stp	x0, x2, [x1, #16]
 248:	str	x2, [x1, #72]
 24c:	b	134 <GOMP_sections2_start+0x8c>
 250:	mov	x2, x0
 254:	mov	w1, #0x0                   	// #0
 258:	add	x0, x19, #0x60
 25c:	bl	0 <memset>
 260:	str	x0, [x20]
 264:	b	158 <GOMP_sections2_start+0xb0>

0000000000000268 <GOMP_sections_next>:
 268:	stp	x29, x30, [sp, #-32]!
 26c:	mov	x29, sp
 270:	add	x1, sp, #0x18
 274:	add	x0, sp, #0x10
 278:	bl	0 <gomp_iter_dynamic_next>
 27c:	sxtb	w1, w0
 280:	ldr	w2, [sp, #16]
 284:	cmp	w1, #0x0
 288:	mov	w0, #0x0                   	// #0
 28c:	ldp	x29, x30, [sp], #32
 290:	csel	w0, w2, w0, ne  // ne = any
 294:	ret

0000000000000298 <GOMP_parallel_sections_start>:
 298:	stp	x29, x30, [sp, #-48]!
 29c:	mov	x29, sp
 2a0:	stp	x19, x20, [sp, #16]
 2a4:	mov	w19, w3
 2a8:	mov	x20, x0
 2ac:	stp	x21, x22, [sp, #32]
 2b0:	mov	x21, x1
 2b4:	mov	w1, w19
 2b8:	mov	w0, w2
 2bc:	bl	0 <gomp_resolve_num_threads>
 2c0:	mov	w22, w0
 2c4:	add	x19, x19, #0x1
 2c8:	bl	0 <gomp_new_team>
 2cc:	mov	x4, x0
 2d0:	mov	x8, #0x2                   	// #2
 2d4:	mov	x7, #0x1                   	// #1
 2d8:	movk	x8, #0x1, lsl #32
 2dc:	mov	w2, w22
 2e0:	stp	x8, x7, [x4, #256]
 2e4:	mov	x1, x21
 2e8:	mov	x0, x20
 2ec:	stp	x19, x7, [x4, #272]
 2f0:	mov	x5, #0x0                   	// #0
 2f4:	mov	w3, #0x0                   	// #0
 2f8:	str	x7, [x4, #328]
 2fc:	ldp	x19, x20, [sp, #16]
 300:	ldp	x21, x22, [sp, #32]
 304:	ldp	x29, x30, [sp], #48
 308:	b	0 <gomp_team_start>
 30c:	nop

0000000000000310 <GOMP_parallel_sections>:
 310:	stp	x29, x30, [sp, #-64]!
 314:	mov	x29, sp
 318:	stp	x19, x20, [sp, #16]
 31c:	mov	w19, w3
 320:	mov	x20, x0
 324:	stp	x21, x22, [sp, #32]
 328:	mov	x21, x1
 32c:	mov	w1, w19
 330:	mov	w0, w2
 334:	str	x23, [sp, #48]
 338:	mov	w23, w4
 33c:	bl	0 <gomp_resolve_num_threads>
 340:	mov	w22, w0
 344:	bl	0 <gomp_new_team>
 348:	mov	x4, x0
 34c:	mov	x8, #0x2                   	// #2
 350:	mov	x7, #0x1                   	// #1
 354:	mov	w3, w23
 358:	mov	w2, w22
 35c:	mov	x1, x21
 360:	movk	x8, #0x1, lsl #32
 364:	add	x19, x19, #0x1
 368:	stp	x8, x7, [x4, #256]
 36c:	mov	x5, #0x0                   	// #0
 370:	mov	x0, x20
 374:	stp	x19, x7, [x4, #272]
 378:	str	x7, [x4, #328]
 37c:	bl	0 <gomp_team_start>
 380:	mov	x0, x21
 384:	blr	x20
 388:	ldp	x19, x20, [sp, #16]
 38c:	ldp	x21, x22, [sp, #32]
 390:	ldr	x23, [sp, #48]
 394:	ldp	x29, x30, [sp], #64
 398:	b	0 <gomp_ialias_GOMP_parallel_end>
 39c:	nop

00000000000003a0 <GOMP_sections_end>:
 3a0:	b	0 <gomp_work_share_end>
 3a4:	nop

00000000000003a8 <GOMP_sections_end_cancel>:
 3a8:	b	0 <gomp_work_share_end_cancel>
 3ac:	nop

00000000000003b0 <GOMP_sections_end_nowait>:
 3b0:	b	0 <gomp_work_share_end_nowait>

single.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_single_start>:
   0:	adrp	x0, 0 <gomp_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	add	x0, x1, x0
  10:	ldr	x1, [x0, #16]
  14:	cbz	x1, 48 <GOMP_single_start+0x48>
  18:	ldr	x2, [x0, #64]
  1c:	add	x1, x1, #0x70
  20:	add	x3, x2, #0x1
  24:	str	x3, [x0, #64]
  28:	ldxr	x0, [x1]
  2c:	cmp	x0, x2
  30:	b.ne	3c <GOMP_single_start+0x3c>  // b.any
  34:	stlxr	w4, x3, [x1]
  38:	cbnz	w4, 28 <GOMP_single_start+0x28>
  3c:	cset	w0, eq  // eq = none
  40:	dmb	ish
  44:	ret
  48:	mov	w0, #0x1                   	// #1
  4c:	ret

0000000000000050 <GOMP_single_copy_start>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x0, #0x0                   	// #0
  58:	mov	x29, sp
  5c:	str	x19, [sp, #16]
  60:	bl	0 <gomp_work_share_start>
  64:	tst	w0, #0xff
  68:	b.eq	cc <GOMP_single_copy_start+0x7c>  // b.none
  6c:	adrp	x1, 0 <gomp_tls_data>
  70:	ldr	x1, [x1]
  74:	mrs	x0, tpidr_el0
  78:	add	x1, x0, x1
  7c:	ldr	x0, [x1, #32]
  80:	cbz	x0, b8 <GOMP_single_copy_start+0x68>
  84:	ldr	x2, [x1, #24]
  88:	add	x0, x0, #0x50
  8c:	ldxr	x1, [x0]
  90:	stlxr	w3, x2, [x0]
  94:	cbnz	w3, 8c <GOMP_single_copy_start+0x3c>
  98:	cmp	x1, #0x1
  9c:	b.eq	b8 <GOMP_single_copy_start+0x68>  // b.none
  a0:	bl	0 <gomp_ptrlock_set_slow>
  a4:	mov	x19, #0x0                   	// #0
  a8:	mov	x0, x19
  ac:	ldr	x19, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret
  b8:	mov	x19, #0x0                   	// #0
  bc:	mov	x0, x19
  c0:	ldr	x19, [sp, #16]
  c4:	ldp	x29, x30, [sp], #32
  c8:	ret
  cc:	adrp	x19, 0 <gomp_tls_data>
  d0:	ldr	x19, [x19]
  d4:	mrs	x0, tpidr_el0
  d8:	add	x19, x0, x19
  dc:	ldr	x0, [x19, #16]
  e0:	add	x0, x0, #0x80
  e4:	bl	0 <gomp_team_barrier_wait>
  e8:	ldr	x0, [x19, #24]
  ec:	ldr	x19, [x0, #72]
  f0:	bl	0 <gomp_work_share_end_nowait>
  f4:	mov	x0, x19
  f8:	ldr	x19, [sp, #16]
  fc:	ldp	x29, x30, [sp], #32
 100:	ret
 104:	nop

0000000000000108 <GOMP_single_copy_end>:
 108:	adrp	x1, 0 <gomp_tls_data>
 10c:	ldr	x1, [x1]
 110:	mrs	x2, tpidr_el0
 114:	add	x1, x2, x1
 118:	mov	x2, x0
 11c:	ldr	x0, [x1, #16]
 120:	cbz	x0, 144 <GOMP_single_copy_end+0x3c>
 124:	stp	x29, x30, [sp, #-16]!
 128:	add	x0, x0, #0x80
 12c:	mov	x29, sp
 130:	ldr	x1, [x1, #24]
 134:	str	x2, [x1, #72]
 138:	bl	0 <gomp_team_barrier_wait>
 13c:	ldp	x29, x30, [sp], #16
 140:	b	0 <gomp_work_share_end_nowait>
 144:	b	0 <gomp_work_share_end_nowait>

task.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <htab_find>:
       0:	ldr	w8, [x0, #24]
       4:	adrp	x5, 0 <htab_find>
       8:	add	x5, x5, #0x0
       c:	mov	x4, x0
      10:	ldr	x6, [x1]
      14:	lsl	x1, x8, #4
      18:	add	x3, x5, x1
      1c:	eor	x2, x6, x6, lsr #32
      20:	ldr	w7, [x5, x1]
      24:	ldr	w1, [x3, #4]
      28:	and	x10, x2, #0xffffffff
      2c:	ldr	w9, [x3, #12]
      30:	mul	x1, x1, x10
      34:	lsr	x0, x1, #32
      38:	sub	w1, w2, w0
      3c:	add	w1, w0, w1, lsr #1
      40:	lsr	w1, w1, w9
      44:	msub	w1, w1, w7, w2
      48:	add	x0, x4, w1, uxtw #3
      4c:	ldr	x0, [x0, #32]
      50:	cbz	x0, d4 <htab_find+0xd4>
      54:	cmp	x0, #0x1
      58:	b.eq	68 <htab_find+0x68>  // b.none
      5c:	ldr	x3, [x0]
      60:	cmp	x6, x3
      64:	b.eq	d0 <htab_find+0xd0>  // b.none
      68:	add	x8, x5, x8, lsl #4
      6c:	sub	w7, w7, #0x2
      70:	add	w11, w2, #0x1
      74:	ldr	x5, [x4]
      78:	ldr	w0, [x8, #8]
      7c:	mul	x0, x0, x10
      80:	lsr	x0, x0, #32
      84:	sub	w3, w2, w0
      88:	add	w3, w0, w3, lsr #1
      8c:	lsr	w3, w3, w9
      90:	msub	w3, w3, w7, w11
      94:	nop
      98:	add	w2, w1, w3
      9c:	mov	x1, x2
      a0:	cmp	x5, w2, uxtw
      a4:	b.hi	b0 <htab_find+0xb0>  // b.pmore
      a8:	sub	w2, w2, w5
      ac:	mov	x1, x2
      b0:	add	x2, x2, #0x4
      b4:	ldr	x0, [x4, x2, lsl #3]
      b8:	cmp	x0, #0x1
      bc:	cbz	x0, d4 <htab_find+0xd4>
      c0:	b.eq	98 <htab_find+0x98>  // b.none
      c4:	ldr	x2, [x0]
      c8:	cmp	x6, x2
      cc:	b.ne	98 <htab_find+0x98>  // b.any
      d0:	ret
      d4:	mov	x0, #0x0                   	// #0
      d8:	ret
      dc:	nop

00000000000000e0 <gomp_clear_parent_in_tree>:
      e0:	cbz	x1, 144 <gomp_clear_parent_in_tree+0x64>
      e4:	stp	x29, x30, [sp, #-48]!
      e8:	mov	x29, sp
      ec:	stp	x19, x20, [sp, #16]
      f0:	mov	x19, x1
      f4:	str	x21, [sp, #32]
      f8:	mov	x21, x0
      fc:	ldr	x3, [x19, #8]
     100:	mov	x0, x19
     104:	ldp	x20, x19, [x19, #24]
     108:	cbz	x3, 120 <gomp_clear_parent_in_tree+0x40>
     10c:	mov	x2, x3
     110:	stur	xzr, [x2, #-112]
     114:	ldr	x2, [x2]
     118:	cmp	x3, x2
     11c:	b.ne	110 <gomp_clear_parent_in_tree+0x30>  // b.any
     120:	bl	0 <free>
     124:	mov	x1, x20
     128:	mov	x0, x21
     12c:	bl	e0 <gomp_clear_parent_in_tree>
     130:	cbnz	x19, fc <gomp_clear_parent_in_tree+0x1c>
     134:	ldp	x19, x20, [sp, #16]
     138:	ldr	x21, [sp, #32]
     13c:	ldp	x29, x30, [sp], #48
     140:	ret
     144:	ret

0000000000000148 <htab_create>:
     148:	stp	x29, x30, [sp, #-48]!
     14c:	adrp	x2, 0 <htab_find>
     150:	mov	w3, #0x0                   	// #0
     154:	mov	x29, sp
     158:	add	x2, x2, #0x0
     15c:	stp	x19, x20, [sp, #16]
     160:	mov	w20, #0x1e                  	// #30
     164:	str	x21, [sp, #32]
     168:	b	188 <htab_create+0x40>
     16c:	sub	w1, w20, w3
     170:	add	w1, w3, w1, lsr #1
     174:	ubfiz	x4, x1, #4, #32
     178:	ldr	w4, [x2, x4]
     17c:	cmp	x0, x4
     180:	b.hi	1e4 <htab_create+0x9c>  // b.pmore
     184:	mov	w20, w1
     188:	cmp	w20, w3
     18c:	b.ne	16c <htab_create+0x24>  // b.any
     190:	ubfiz	x1, x20, #4, #32
     194:	ldr	w21, [x2, x1]
     198:	cmp	x0, x21
     19c:	b.hi	1ec <htab_create+0xa4>  // b.pmore
     1a0:	add	x19, x21, #0x4
     1a4:	lsl	x19, x19, #3
     1a8:	mov	x0, x19
     1ac:	bl	0 <gomp_malloc>
     1b0:	sub	x2, x19, #0x20
     1b4:	mov	x19, x0
     1b8:	mov	w1, #0x0                   	// #0
     1bc:	add	x0, x0, #0x20
     1c0:	stp	x21, xzr, [x19]
     1c4:	str	xzr, [x19, #16]
     1c8:	str	w20, [x19, #24]
     1cc:	bl	0 <memset>
     1d0:	mov	x0, x19
     1d4:	ldp	x19, x20, [sp, #16]
     1d8:	ldr	x21, [sp, #32]
     1dc:	ldp	x29, x30, [sp], #48
     1e0:	ret
     1e4:	add	w3, w1, #0x1
     1e8:	b	188 <htab_create+0x40>
     1ec:	bl	0 <abort>

00000000000001f0 <find_empty_slot_for_expand>:
     1f0:	add	x4, x0, #0x20
     1f4:	mov	x5, x0
     1f8:	ldr	w0, [x0, #24]
     1fc:	adrp	x2, 0 <htab_find>
     200:	add	x2, x2, #0x0
     204:	lsl	x0, x0, #4
     208:	add	x7, x2, x0
     20c:	ldr	w6, [x2, x0]
     210:	ldr	w2, [x7, #4]
     214:	ldr	w8, [x7, #12]
     218:	umull	x2, w1, w2
     21c:	lsr	x3, x2, #32
     220:	sub	w2, w1, w3
     224:	add	w2, w3, w2, lsr #1
     228:	lsr	w2, w2, w8
     22c:	msub	w2, w2, w6, w1
     230:	add	x0, x4, w2, uxtw #3
     234:	ldr	x3, [x4, w2, uxtw #3]
     238:	cbz	x3, 29c <find_empty_slot_for_expand+0xac>
     23c:	cmp	x3, #0x1
     240:	b.eq	2a0 <find_empty_slot_for_expand+0xb0>  // b.none
     244:	ldr	w0, [x7, #8]
     248:	add	w3, w1, #0x1
     24c:	sub	w6, w6, #0x2
     250:	ldr	x5, [x5]
     254:	umull	x0, w1, w0
     258:	lsr	x0, x0, #32
     25c:	sub	w1, w1, w0
     260:	add	w1, w0, w1, lsr #1
     264:	lsr	w1, w1, w8
     268:	msub	w1, w1, w6, w3
     26c:	b	278 <find_empty_slot_for_expand+0x88>
     270:	cmp	x3, #0x1
     274:	b.eq	2a0 <find_empty_slot_for_expand+0xb0>  // b.none
     278:	add	w0, w2, w1
     27c:	mov	x2, x0
     280:	cmp	x5, w0, uxtw
     284:	b.hi	290 <find_empty_slot_for_expand+0xa0>  // b.pmore
     288:	sub	w0, w0, w5
     28c:	mov	x2, x0
     290:	ldr	x3, [x4, x0, lsl #3]
     294:	add	x0, x4, x0, lsl #3
     298:	cbnz	x3, 270 <find_empty_slot_for_expand+0x80>
     29c:	ret
     2a0:	stp	x29, x30, [sp, #-16]!
     2a4:	mov	x29, sp
     2a8:	bl	0 <abort>
     2ac:	nop

00000000000002b0 <htab_find_slot>:
     2b0:	stp	x29, x30, [sp, #-96]!
     2b4:	cmp	w2, #0x1
     2b8:	mov	x29, sp
     2bc:	stp	x19, x20, [sp, #16]
     2c0:	ldr	x7, [x1]
     2c4:	stp	x21, x22, [sp, #32]
     2c8:	mov	x21, x1
     2cc:	ldr	x20, [x0]
     2d0:	mov	w22, w2
     2d4:	eor	x19, x7, x7, lsr #32
     2d8:	ldr	x8, [x20]
     2dc:	b.eq	3f8 <htab_find_slot+0x148>  // b.none
     2e0:	ldr	w5, [x20, #24]
     2e4:	adrp	x1, 0 <htab_find>
     2e8:	add	x1, x1, #0x0
     2ec:	and	x7, x19, #0xffffffff
     2f0:	lsl	x2, x5, #4
     2f4:	add	x0, x1, x2
     2f8:	ldr	w2, [x1, x2]
     2fc:	ldr	w3, [x0, #4]
     300:	ldr	w9, [x0, #12]
     304:	mul	x3, x3, x7
     308:	lsr	x3, x3, #32
     30c:	sub	w4, w19, w3
     310:	add	w3, w3, w4, lsr #1
     314:	lsr	w3, w3, w9
     318:	msub	w6, w3, w2, w19
     31c:	add	x4, x6, #0x4
     320:	mov	x3, x6
     324:	ldr	x0, [x20, x4, lsl #3]
     328:	cbz	x0, 420 <htab_find_slot+0x170>
     32c:	cmp	x0, #0x1
     330:	b.eq	418 <htab_find_slot+0x168>  // b.none
     334:	ldr	x10, [x0]
     338:	mov	x0, #0x0                   	// #0
     33c:	ldr	x6, [x21]
     340:	cmp	x10, x6
     344:	b.eq	448 <htab_find_slot+0x198>  // b.none
     348:	add	x5, x1, x5, lsl #4
     34c:	sub	w2, w2, #0x2
     350:	add	w4, w19, #0x1
     354:	ldr	w1, [x5, #8]
     358:	mul	x1, x1, x7
     35c:	lsr	x1, x1, #32
     360:	sub	w7, w19, w1
     364:	add	w7, w1, w7, lsr #1
     368:	lsr	w7, w7, w9
     36c:	msub	w7, w7, w2, w4
     370:	add	w6, w3, w7
     374:	mov	x3, x6
     378:	cmp	x8, w6, uxtw
     37c:	b.hi	388 <htab_find_slot+0xd8>  // b.pmore
     380:	sub	w6, w6, w8
     384:	mov	x3, x6
     388:	add	x5, x6, #0x4
     38c:	ldr	x4, [x20, x5, lsl #3]
     390:	cmp	x4, #0x1
     394:	cbz	x4, 3d0 <htab_find_slot+0x120>
     398:	b.eq	3c0 <htab_find_slot+0x110>  // b.none
     39c:	ldr	x6, [x4]
     3a0:	ldr	x4, [x21]
     3a4:	cmp	x6, x4
     3a8:	b.ne	370 <htab_find_slot+0xc0>  // b.any
     3ac:	add	x0, x20, x5, lsl #3
     3b0:	ldp	x19, x20, [sp, #16]
     3b4:	ldp	x21, x22, [sp, #32]
     3b8:	ldp	x29, x30, [sp], #96
     3bc:	ret
     3c0:	add	x5, x20, x5, lsl #3
     3c4:	cmp	x0, #0x0
     3c8:	csel	x0, x5, x0, eq  // eq = none
     3cc:	b	370 <htab_find_slot+0xc0>
     3d0:	cbz	w22, 50c <htab_find_slot+0x25c>
     3d4:	cbz	x0, 424 <htab_find_slot+0x174>
     3d8:	ldr	x1, [x20, #16]
     3dc:	ldp	x21, x22, [sp, #32]
     3e0:	sub	x1, x1, #0x1
     3e4:	str	x1, [x20, #16]
     3e8:	str	xzr, [x0]
     3ec:	ldp	x19, x20, [sp, #16]
     3f0:	ldp	x29, x30, [sp], #96
     3f4:	ret
     3f8:	stp	x23, x24, [sp, #48]
     3fc:	mov	x24, x0
     400:	add	x1, x8, x8, lsl #1
     404:	ldr	x0, [x20, #8]
     408:	cmp	x1, x0, lsl #2
     40c:	b.ls	45c <htab_find_slot+0x1ac>  // b.plast
     410:	ldp	x23, x24, [sp, #48]
     414:	b	2e0 <htab_find_slot+0x30>
     418:	add	x0, x20, x4, lsl #3
     41c:	b	348 <htab_find_slot+0x98>
     420:	cbz	w22, 3b0 <htab_find_slot+0x100>
     424:	ldr	x1, [x20, #8]
     428:	add	x6, x6, #0x4
     42c:	ldp	x21, x22, [sp, #32]
     430:	add	x1, x1, #0x1
     434:	str	x1, [x20, #8]
     438:	add	x0, x20, x6, lsl #3
     43c:	ldp	x19, x20, [sp, #16]
     440:	ldp	x29, x30, [sp], #96
     444:	ret
     448:	add	x0, x20, x4, lsl #3
     44c:	ldp	x19, x20, [sp, #16]
     450:	ldp	x21, x22, [sp, #32]
     454:	ldp	x29, x30, [sp], #96
     458:	ret
     45c:	ldr	x1, [x20, #16]
     460:	stp	x25, x26, [sp, #64]
     464:	add	x23, x20, #0x20
     468:	sub	x1, x0, x1
     46c:	str	x27, [sp, #80]
     470:	add	x26, x23, x8, lsl #3
     474:	cmp	x8, x1, lsl #1
     478:	lsl	x0, x1, #1
     47c:	b.cc	49c <htab_find_slot+0x1ec>  // b.lo, b.ul, b.last
     480:	lsl	x1, x1, #3
     484:	mov	x2, #0x20                  	// #32
     488:	cmp	x1, x2
     48c:	csel	x1, x1, x2, cs  // cs = hs, nlast
     490:	cmp	x1, x8
     494:	b.cc	49c <htab_find_slot+0x1ec>  // b.lo, b.ul, b.last
     498:	sub	x0, x8, #0x1
     49c:	bl	148 <htab_create>
     4a0:	mov	x27, x0
     4a4:	ldp	x0, x1, [x20, #8]
     4a8:	sub	x0, x0, x1
     4ac:	str	x0, [x27, #8]
     4b0:	b	4bc <htab_find_slot+0x20c>
     4b4:	cmp	x26, x23
     4b8:	b.ls	4e8 <htab_find_slot+0x238>  // b.plast
     4bc:	ldr	x25, [x23]
     4c0:	add	x23, x23, #0x8
     4c4:	cmp	x25, #0x1
     4c8:	b.ls	4b4 <htab_find_slot+0x204>  // b.plast
     4cc:	ldr	x1, [x25]
     4d0:	mov	x0, x27
     4d4:	eor	x1, x1, x1, lsr #32
     4d8:	bl	1f0 <find_empty_slot_for_expand>
     4dc:	str	x25, [x0]
     4e0:	cmp	x26, x23
     4e4:	b.hi	4bc <htab_find_slot+0x20c>  // b.pmore
     4e8:	mov	x0, x20
     4ec:	bl	0 <free>
     4f0:	mov	x20, x27
     4f4:	ldr	x8, [x27]
     4f8:	ldp	x25, x26, [sp, #64]
     4fc:	str	x27, [x24]
     500:	ldp	x23, x24, [sp, #48]
     504:	ldr	x27, [sp, #80]
     508:	b	2e0 <htab_find_slot+0x30>
     50c:	mov	x0, #0x0                   	// #0
     510:	b	3b0 <htab_find_slot+0x100>
     514:	nop

0000000000000518 <gomp_task_handle_depend>:
     518:	stp	x29, x30, [sp, #-96]!
     51c:	mov	x29, sp
     520:	ldp	x5, x6, [x2]
     524:	stp	x19, x20, [sp, #16]
     528:	mov	x20, x0
     52c:	stp	x21, x22, [sp, #32]
     530:	mov	x22, x1
     534:	stp	x27, x28, [sp, #80]
     538:	cbz	x5, 76c <gomp_task_handle_depend+0x254>
     53c:	add	x2, x2, #0x10
     540:	add	x0, x0, #0xd0
     544:	mov	x28, #0x0                   	// #0
     548:	cmp	x28, x6
     54c:	add	x0, x0, #0x28
     550:	ldr	x4, [x2, x28, lsl #3]
     554:	cset	w3, cs  // cs = hs, nlast
     558:	stur	x4, [x0, #-40]
     55c:	add	x28, x28, #0x1
     560:	sturb	w3, [x0, #-8]
     564:	cmp	x5, x28
     568:	b.ne	548 <gomp_task_handle_depend+0x30>  // b.any
     56c:	ldr	x8, [x22, #56]
     570:	stp	x28, xzr, [x20, #72]
     574:	cbz	x8, 860 <gomp_task_handle_depend+0x348>
     578:	add	x22, x22, #0x38
     57c:	stp	x25, x26, [sp, #64]
     580:	add	x25, x20, #0xd0
     584:	mov	x21, #0x0                   	// #0
     588:	stp	x23, x24, [sp, #48]
     58c:	mov	x24, #0x1                   	// #1
     590:	stp	xzr, xzr, [x25, #8]
     594:	mov	x1, x25
     598:	mov	x0, x22
     59c:	str	x20, [x25, #24]
     5a0:	mov	w2, #0x1                   	// #1
     5a4:	strb	wzr, [x25, #33]
     5a8:	strb	wzr, [x25, #34]
     5ac:	bl	2b0 <htab_find_slot>
     5b0:	mov	x23, x0
     5b4:	ldr	x19, [x0]
     5b8:	cbz	x19, 718 <gomp_task_handle_depend+0x200>
     5bc:	ldr	x0, [x19, #24]
     5c0:	cmp	x0, x20
     5c4:	b.eq	758 <gomp_task_handle_depend+0x240>  // b.none
     5c8:	ldrb	w3, [x25, #32]
     5cc:	mov	x0, #0x0                   	// #0
     5d0:	mov	x26, #0x0                   	// #0
     5d4:	b	63c <gomp_task_handle_depend+0x124>
     5d8:	cbnz	w1, 6e8 <gomp_task_handle_depend+0x1d0>
     5dc:	ldr	x27, [x19, #24]
     5e0:	mov	x26, x19
     5e4:	ldr	x0, [x27, #48]
     5e8:	cbz	x0, 660 <gomp_task_handle_depend+0x148>
     5ec:	ldr	x1, [x0]
     5f0:	mov	x2, #0x1                   	// #1
     5f4:	cbz	x1, 608 <gomp_task_handle_depend+0xf0>
     5f8:	add	x2, x1, #0x1
     5fc:	ldr	x5, [x0, x2, lsl #3]
     600:	cmp	x5, x20
     604:	b.eq	62c <gomp_task_handle_depend+0x114>  // b.none
     608:	ldr	x5, [x0, #8]
     60c:	cmp	x1, x5
     610:	b.eq	6f0 <gomp_task_handle_depend+0x1d8>  // b.none
     614:	add	x1, x1, #0x2
     618:	str	x2, [x0]
     61c:	ldr	x2, [x20, #80]
     620:	str	x20, [x0, x1, lsl #3]
     624:	add	x2, x2, #0x1
     628:	str	x2, [x20, #80]
     62c:	ldr	x1, [x19, #8]
     630:	mov	x0, x19
     634:	cbz	x1, 698 <gomp_task_handle_depend+0x180>
     638:	mov	x19, x1
     63c:	ldrb	w1, [x19, #34]
     640:	cbnz	w1, 764 <gomp_task_handle_depend+0x24c>
     644:	ldrb	w1, [x19, #32]
     648:	cbnz	w3, 5d8 <gomp_task_handle_depend+0xc0>
     64c:	ldr	x27, [x19, #24]
     650:	cmp	w1, #0x0
     654:	csel	x26, x26, x19, ne  // ne = any
     658:	ldr	x0, [x27, #48]
     65c:	cbnz	x0, 5ec <gomp_task_handle_depend+0xd4>
     660:	mov	x0, #0x40                  	// #64
     664:	bl	0 <gomp_malloc>
     668:	ldr	x1, [x20, #80]
     66c:	mov	x2, #0x6                   	// #6
     670:	ldrb	w3, [x25, #32]
     674:	add	x1, x1, #0x1
     678:	str	x0, [x27, #48]
     67c:	str	x1, [x20, #80]
     680:	ldr	x1, [x19, #8]
     684:	stp	x24, x2, [x0]
     688:	str	x20, [x0, #16]
     68c:	mov	x0, x19
     690:	cbnz	x1, 638 <gomp_task_handle_depend+0x120>
     694:	nop
     698:	ldr	x0, [x23]
     69c:	str	x0, [x25, #8]
     6a0:	cmp	x26, #0x0
     6a4:	eor	w3, w3, #0x1
     6a8:	cset	w1, ne  // ne = any
     6ac:	str	x25, [x0, #16]
     6b0:	tst	w1, w3
     6b4:	str	x25, [x23]
     6b8:	b.ne	720 <gomp_task_handle_depend+0x208>  // b.any
     6bc:	add	x21, x21, #0x1
     6c0:	add	x25, x25, #0x28
     6c4:	cmp	x28, x21
     6c8:	b.hi	590 <gomp_task_handle_depend+0x78>  // b.pmore
     6cc:	ldp	x19, x20, [sp, #16]
     6d0:	ldp	x21, x22, [sp, #32]
     6d4:	ldp	x23, x24, [sp, #48]
     6d8:	ldp	x25, x26, [sp, #64]
     6dc:	ldp	x27, x28, [sp, #80]
     6e0:	ldp	x29, x30, [sp], #96
     6e4:	ret
     6e8:	mov	w3, w1
     6ec:	b	62c <gomp_task_handle_depend+0x114>
     6f0:	lsl	x2, x2, #1
     6f4:	str	x2, [x0, #8]
     6f8:	add	x2, x2, #0x2
     6fc:	lsl	x1, x2, #3
     700:	bl	0 <gomp_realloc>
     704:	ldr	x1, [x0]
     708:	ldrb	w3, [x25, #32]
     70c:	add	x2, x1, #0x1
     710:	str	x0, [x27, #48]
     714:	b	614 <gomp_task_handle_depend+0xfc>
     718:	str	x25, [x0]
     71c:	b	6bc <gomp_task_handle_depend+0x1a4>
     720:	cmp	x26, x19
     724:	b.eq	74c <gomp_task_handle_depend+0x234>  // b.none
     728:	ldp	x1, x0, [x26, #8]
     72c:	str	x0, [x1, #16]
     730:	str	x1, [x0, #8]
     734:	ldr	x0, [x19, #8]
     738:	stp	x0, x19, [x26, #8]
     73c:	str	x26, [x19, #8]
     740:	ldr	x0, [x26, #8]
     744:	cbz	x0, 74c <gomp_task_handle_depend+0x234>
     748:	str	x26, [x0, #16]
     74c:	mov	w0, #0x1                   	// #1
     750:	strb	w0, [x26, #34]
     754:	b	6bc <gomp_task_handle_depend+0x1a4>
     758:	mov	w0, #0x1                   	// #1
     75c:	strb	w0, [x25, #33]
     760:	b	6bc <gomp_task_handle_depend+0x1a4>
     764:	mov	x19, x0
     768:	b	698 <gomp_task_handle_depend+0x180>
     76c:	ldp	x9, x0, [x2, #16]
     770:	ldr	x7, [x2, #32]
     774:	add	x9, x9, x0
     778:	add	x7, x7, x9
     77c:	cmp	x7, x6
     780:	b.cs	8a4 <gomp_task_handle_depend+0x38c>  // b.hs, b.nlast
     784:	add	x3, x2, #0x28
     788:	mov	x4, x7
     78c:	mov	x0, #0x0                   	// #0
     790:	ldr	x5, [x3, x4, lsl #3]
     794:	ldr	x1, [x5, #8]
     798:	cmp	x1, #0x1
     79c:	b.eq	7c4 <gomp_task_handle_depend+0x2ac>  // b.none
     7a0:	sub	x8, x1, #0x2
     7a4:	cmp	x8, #0x2
     7a8:	b.hi	8b8 <gomp_task_handle_depend+0x3a0>  // b.pmore
     7ac:	add	x2, x0, x0, lsl #2
     7b0:	add	x0, x0, #0x1
     7b4:	ldr	x5, [x5]
     7b8:	add	x2, x20, x2, lsl #3
     7bc:	str	x5, [x2, #208]
     7c0:	strb	wzr, [x2, #240]
     7c4:	add	x4, x4, #0x1
     7c8:	cmp	x4, x6
     7cc:	b.ne	790 <gomp_task_handle_depend+0x278>  // b.any
     7d0:	ldr	x8, [x22, #56]
     7d4:	cbz	x7, 820 <gomp_task_handle_depend+0x308>
     7d8:	add	x4, x0, x0, lsl #2
     7dc:	mov	x2, #0x0                   	// #0
     7e0:	add	x4, x20, x4, lsl #3
     7e4:	nop
     7e8:	cmp	x9, x2
     7ec:	add	x4, x4, #0x28
     7f0:	ldr	x5, [x3, x2, lsl #3]
     7f4:	cset	w1, ls  // ls = plast
     7f8:	str	x5, [x4, #168]
     7fc:	add	x2, x2, #0x1
     800:	strb	w1, [x4, #200]
     804:	cmp	x7, x2
     808:	b.hi	7e8 <gomp_task_handle_depend+0x2d0>  // b.pmore
     80c:	cmp	x7, #0x0
     810:	csinc	x1, x7, xzr, ne  // ne = any
     814:	cmp	x7, x6
     818:	add	x0, x0, x1
     81c:	b.cs	890 <gomp_task_handle_depend+0x378>  // b.hs, b.nlast
     820:	ldr	x1, [x3, x7, lsl #3]
     824:	ldr	x2, [x1, #8]
     828:	cmp	x2, #0x1
     82c:	b.ne	848 <gomp_task_handle_depend+0x330>  // b.any
     830:	add	x4, x0, x0, lsl #2
     834:	add	x0, x0, #0x1
     838:	ldr	x5, [x1]
     83c:	add	x1, x20, x4, lsl #3
     840:	str	x5, [x1, #208]
     844:	strb	w2, [x1, #240]
     848:	add	x7, x7, #0x1
     84c:	cmp	x7, x6
     850:	b.cc	820 <gomp_task_handle_depend+0x308>  // b.lo, b.ul, b.last
     854:	mov	x28, x6
     858:	stp	x28, xzr, [x20, #72]
     85c:	cbnz	x8, 578 <gomp_task_handle_depend+0x60>
     860:	lsl	x0, x28, #1
     864:	mov	x1, #0xc                   	// #12
     868:	cmp	x0, x1
     86c:	csel	x0, x0, x1, cs  // cs = hs, nlast
     870:	bl	148 <htab_create>
     874:	str	x0, [x22, #56]
     878:	cbnz	x28, 578 <gomp_task_handle_depend+0x60>
     87c:	ldp	x19, x20, [sp, #16]
     880:	ldp	x21, x22, [sp, #32]
     884:	ldp	x27, x28, [sp, #80]
     888:	ldp	x29, x30, [sp], #96
     88c:	ret
     890:	stp	x6, xzr, [x20, #72]
     894:	mov	x28, x6
     898:	cbz	x8, 860 <gomp_task_handle_depend+0x348>
     89c:	cbz	x28, 87c <gomp_task_handle_depend+0x364>
     8a0:	b	578 <gomp_task_handle_depend+0x60>
     8a4:	ldr	x8, [x1, #56]
     8a8:	cbz	x7, 890 <gomp_task_handle_depend+0x378>
     8ac:	add	x3, x2, #0x28
     8b0:	mov	x0, #0x0                   	// #0
     8b4:	b	7d8 <gomp_task_handle_depend+0x2c0>
     8b8:	adrp	x0, 0 <htab_find>
     8bc:	add	x0, x0, #0x0
     8c0:	stp	x23, x24, [sp, #48]
     8c4:	stp	x25, x26, [sp, #64]
     8c8:	bl	0 <gomp_fatal>
     8cc:	nop

00000000000008d0 <gomp_task_run_post_handle_depend_hash>:
     8d0:	stp	x29, x30, [sp, #-80]!
     8d4:	mov	x29, sp
     8d8:	ldr	x3, [x0, #72]
     8dc:	stp	x23, x24, [sp, #48]
     8e0:	ldr	x24, [x0]
     8e4:	cbz	x3, 944 <gomp_task_run_post_handle_depend_hash+0x74>
     8e8:	stp	x19, x20, [sp, #16]
     8ec:	add	x19, x0, #0xd8
     8f0:	mov	x20, #0x0                   	// #0
     8f4:	stp	x21, x22, [sp, #32]
     8f8:	mov	x21, x0
     8fc:	mov	x22, #0x1                   	// #1
     900:	str	x25, [sp, #64]
     904:	add	x25, x24, #0x38
     908:	ldrb	w1, [x19, #25]
     90c:	cbnz	w1, 928 <gomp_task_run_post_handle_depend_hash+0x58>
     910:	ldp	x2, x1, [x19]
     914:	cbz	x2, 920 <gomp_task_run_post_handle_depend_hash+0x50>
     918:	str	x1, [x2, #16]
     91c:	ldr	x1, [x19, #8]
     920:	cbz	x1, 950 <gomp_task_run_post_handle_depend_hash+0x80>
     924:	str	x2, [x1, #8]
     928:	add	x20, x20, #0x1
     92c:	add	x19, x19, #0x28
     930:	cmp	x3, x20
     934:	b.hi	908 <gomp_task_run_post_handle_depend_hash+0x38>  // b.pmore
     938:	ldp	x19, x20, [sp, #16]
     93c:	ldp	x21, x22, [sp, #32]
     940:	ldr	x25, [sp, #64]
     944:	ldp	x23, x24, [sp, #48]
     948:	ldp	x29, x30, [sp], #80
     94c:	ret
     950:	sub	x23, x19, #0x8
     954:	mov	x0, x25
     958:	mov	x1, x23
     95c:	mov	w2, #0x0                   	// #0
     960:	bl	2b0 <htab_find_slot>
     964:	ldr	x1, [x0]
     968:	cmp	x1, x23
     96c:	b.ne	9c0 <gomp_task_run_post_handle_depend_hash+0xf0>  // b.any
     970:	ldr	x1, [x19]
     974:	cbz	x1, 984 <gomp_task_run_post_handle_depend_hash+0xb4>
     978:	ldr	x3, [x21, #72]
     97c:	str	x1, [x0]
     980:	b	928 <gomp_task_run_post_handle_depend_hash+0x58>
     984:	ldr	x1, [x24, #56]
     988:	add	x3, x1, #0x20
     98c:	cmp	x0, x3
     990:	b.cc	9c0 <gomp_task_run_post_handle_depend_hash+0xf0>  // b.lo, b.ul, b.last
     994:	ldr	x2, [x1]
     998:	add	x2, x3, x2, lsl #3
     99c:	cmp	x0, x2
     9a0:	ccmp	x19, #0x9, #0x4, cc  // cc = lo, ul, last
     9a4:	b.eq	9c0 <gomp_task_run_post_handle_depend_hash+0xf0>  // b.none
     9a8:	ldr	x2, [x1, #16]
     9ac:	ldr	x3, [x21, #72]
     9b0:	str	x22, [x0]
     9b4:	add	x0, x2, #0x1
     9b8:	str	x0, [x1, #16]
     9bc:	b	928 <gomp_task_run_post_handle_depend_hash+0x58>
     9c0:	bl	0 <abort>
     9c4:	nop

00000000000009c8 <gomp_mutex_unlock>:
     9c8:	mov	x1, x0
     9cc:	ldxr	w2, [x1]
     9d0:	stlxr	w3, wzr, [x1]
     9d4:	cbnz	w3, 9cc <gomp_mutex_unlock+0x4>
     9d8:	tbnz	w2, #31, 9e0 <gomp_mutex_unlock+0x18>
     9dc:	ret
     9e0:	b	0 <gomp_mutex_unlock_slow>
     9e4:	nop

00000000000009e8 <gomp_create_artificial_team>:
     9e8:	stp	x29, x30, [sp, #-48]!
     9ec:	mov	w0, #0x1                   	// #1
     9f0:	mov	x29, sp
     9f4:	stp	x21, x22, [sp, #32]
     9f8:	adrp	x21, 0 <gomp_tls_data>
     9fc:	ldr	x21, [x21]
     a00:	stp	x19, x20, [sp, #16]
     a04:	bl	0 <gomp_new_team>
     a08:	mrs	x20, tpidr_el0
     a0c:	add	x1, x20, x21
     a10:	adrp	x2, 0 <gomp_global_icv>
     a14:	add	x2, x2, #0x0
     a18:	add	x3, x0, #0x5d0
     a1c:	add	x19, x0, #0x540
     a20:	add	x9, x0, #0x100
     a24:	ldr	x22, [x1, #80]
     a28:	ldp	x4, x5, [x1, #16]
     a2c:	cmp	x22, #0x0
     a30:	add	x8, x22, #0x90
     a34:	stp	x4, x5, [x0, #8]
     a38:	csel	x2, x2, x8, eq  // eq = none
     a3c:	ldp	x4, x5, [x1, #32]
     a40:	stp	x4, x5, [x0, #24]
     a44:	ldp	x4, x5, [x1, #48]
     a48:	stp	x4, x5, [x0, #40]
     a4c:	ldp	x4, x5, [x1, #64]
     a50:	stp	x4, x5, [x0, #56]
     a54:	ldp	x4, x5, [x2]
     a58:	str	xzr, [x0, #1344]
     a5c:	stp	x4, x5, [x3]
     a60:	ldp	x4, x5, [x2, #16]
     a64:	stp	x4, x5, [x3, #16]
     a68:	ldr	x2, [x2, #32]
     a6c:	str	x2, [x0, #1520]
     a70:	str	xzr, [x19, #64]
     a74:	str	xzr, [x0, #1352]
     a78:	str	xzr, [x0, #1368]
     a7c:	str	xzr, [x0, #1376]
     a80:	str	xzr, [x0, #1544]
     a84:	stp	x0, x9, [x1, #16]
     a88:	str	xzr, [x1, #32]
     a8c:	str	wzr, [x1, #40]
     a90:	stp	xzr, xzr, [x19, #40]
     a94:	str	xzr, [x19, #56]
     a98:	stp	xzr, xzr, [x1, #64]
     a9c:	str	xzr, [x19, #72]
     aa0:	str	x19, [x1, #80]
     aa4:	cbz	x22, ad0 <gomp_create_artificial_team+0xe8>
     aa8:	ldr	x0, [x22, #56]
     aac:	cbnz	x0, ae8 <gomp_create_artificial_team+0x100>
     ab0:	add	x20, x20, x21
     ab4:	mov	x0, x22
     ab8:	bl	0 <free>
     abc:	ldp	x21, x22, [sp, #32]
     ac0:	str	x19, [x20, #80]
     ac4:	ldp	x19, x20, [sp, #16]
     ac8:	ldp	x29, x30, [sp], #48
     acc:	ret
     ad0:	adrp	x0, 0 <gomp_thread_destructor>
     ad4:	ldp	x19, x20, [sp, #16]
     ad8:	ldp	x21, x22, [sp, #32]
     adc:	ldp	x29, x30, [sp], #48
     ae0:	ldr	w0, [x0]
     ae4:	b	0 <pthread_setspecific>
     ae8:	bl	0 <free>
     aec:	b	ab0 <gomp_create_artificial_team+0xc8>

0000000000000af0 <gomp_task_run_pre>:
     af0:	stp	x29, x30, [sp, #-80]!
     af4:	mov	x29, sp
     af8:	stp	x19, x20, [sp, #16]
     afc:	mov	x19, x0
     b00:	mov	x20, x2
     b04:	stp	x21, x22, [sp, #32]
     b08:	cbz	x1, b44 <gomp_task_run_pre+0x54>
     b0c:	add	x21, x0, #0x70
     b10:	ldr	x0, [x1, #8]
     b14:	cbnz	x0, c44 <gomp_task_run_pre+0x154>
     b18:	ldr	x0, [x1, #24]
     b1c:	ldr	x2, [x19, #112]
     b20:	cmp	x0, x21
     b24:	b.eq	d64 <gomp_task_run_pre+0x274>  // b.none
     b28:	cmp	x0, x2
     b2c:	b.eq	b3c <gomp_task_run_pre+0x4c>  // b.none
     b30:	ldr	w3, [x2, #88]
     b34:	cmp	w3, #0x2
     b38:	b.eq	bfc <gomp_task_run_pre+0x10c>  // b.none
     b3c:	ldrb	w0, [x19, #207]
     b40:	cbnz	w0, e00 <gomp_task_run_pre+0x310>
     b44:	ldr	x21, [x19, #40]
     b48:	cbz	x21, b84 <gomp_task_run_pre+0x94>
     b4c:	ldr	x0, [x21, #8]
     b50:	add	x22, x19, #0x80
     b54:	cbnz	x0, cd4 <gomp_task_run_pre+0x1e4>
     b58:	ldr	x0, [x21, #24]
     b5c:	ldr	x1, [x19, #128]
     b60:	cmp	x22, x0
     b64:	b.eq	d74 <gomp_task_run_pre+0x284>  // b.none
     b68:	cmp	x1, x0
     b6c:	b.eq	b7c <gomp_task_run_pre+0x8c>  // b.none
     b70:	ldr	w2, [x1, #72]
     b74:	cmp	w2, #0x2
     b78:	b.eq	c20 <gomp_task_run_pre+0x130>  // b.none
     b7c:	ldrb	w0, [x19, #207]
     b80:	cbnz	w0, dd4 <gomp_task_run_pre+0x2e4>
     b84:	ldr	x0, [x20, #1288]
     b88:	add	x2, x19, #0x60
     b8c:	cbnz	x0, d84 <gomp_task_run_pre+0x294>
     b90:	ldp	x0, x1, [x19, #96]
     b94:	ldr	x4, [x20, #1304]
     b98:	cmp	x2, x4
     b9c:	str	x0, [x1]
     ba0:	str	x1, [x0, #8]
     ba4:	b.eq	bec <gomp_task_run_pre+0xfc>  // b.none
     ba8:	ldr	w0, [x20, #1324]
     bac:	mov	w1, #0x3                   	// #3
     bb0:	stp	xzr, xzr, [x19, #96]
     bb4:	sub	w0, w0, #0x1
     bb8:	str	w1, [x19, #200]
     bbc:	str	w0, [x20, #1324]
     bc0:	cbnz	w0, bd0 <gomp_task_run_pre+0xe0>
     bc4:	ldr	w0, [x20, #132]
     bc8:	and	w0, w0, #0xfffffffe
     bcc:	str	w0, [x20, #132]
     bd0:	adrp	x0, 0 <gomp_cancel_var>
     bd4:	ldrb	w0, [x0]
     bd8:	cbnz	w0, d94 <gomp_task_run_pre+0x2a4>
     bdc:	ldp	x19, x20, [sp, #16]
     be0:	ldp	x21, x22, [sp, #32]
     be4:	ldp	x29, x30, [sp], #80
     be8:	ret
     bec:	cmp	x2, x0
     bf0:	csel	x0, x0, xzr, ne  // ne = any
     bf4:	str	x0, [x20, #1304]
     bf8:	b	ba8 <gomp_task_run_pre+0xb8>
     bfc:	ldr	x3, [x19, #120]
     c00:	str	x2, [x3]
     c04:	str	x3, [x2, #8]
     c08:	ldr	x2, [x0, #8]
     c0c:	stp	x0, x2, [x19, #112]
     c10:	ldr	x2, [x0, #8]
     c14:	str	x21, [x2]
     c18:	str	x21, [x0, #8]
     c1c:	b	b3c <gomp_task_run_pre+0x4c>
     c20:	ldr	x2, [x19, #136]
     c24:	str	x1, [x2]
     c28:	str	x2, [x1, #8]
     c2c:	ldr	x1, [x0, #8]
     c30:	stp	x0, x1, [x19, #128]
     c34:	ldr	x1, [x0, #8]
     c38:	str	x22, [x1]
     c3c:	str	x22, [x0, #8]
     c40:	b	b7c <gomp_task_run_pre+0x8c>
     c44:	ldr	w2, [x19, #88]
     c48:	add	x0, x1, #0x8
     c4c:	add	x1, sp, #0x38
     c50:	str	w2, [sp, #56]
     c54:	bl	0 <prio_splay_tree_lookup>
     c58:	ldr	x1, [x0, #8]
     c5c:	cmp	x1, x21
     c60:	b.eq	e2c <gomp_task_run_pre+0x33c>  // b.none
     c64:	ldr	x2, [x19, #112]
     c68:	cmp	x1, x2
     c6c:	b.eq	ca0 <gomp_task_run_pre+0x1b0>  // b.none
     c70:	ldr	w3, [x2, #88]
     c74:	cmp	w3, #0x2
     c78:	b.ne	ca0 <gomp_task_run_pre+0x1b0>  // b.any
     c7c:	ldr	x3, [x19, #120]
     c80:	str	x2, [x3]
     c84:	ldr	x2, [x19, #112]
     c88:	str	x3, [x2, #8]
     c8c:	ldr	x2, [x1, #8]
     c90:	stp	x1, x2, [x19, #112]
     c94:	ldr	x2, [x1, #8]
     c98:	str	x21, [x2]
     c9c:	str	x21, [x1, #8]
     ca0:	ldrb	w1, [x19, #207]
     ca4:	cbz	w1, b44 <gomp_task_run_pre+0x54>
     ca8:	ldr	x1, [x0, #16]
     cac:	cmp	x1, x21
     cb0:	b.ne	b44 <gomp_task_run_pre+0x54>  // b.any
     cb4:	ldr	x1, [x19, #120]
     cb8:	cmp	x1, x21
     cbc:	b.eq	ccc <gomp_task_run_pre+0x1dc>  // b.none
     cc0:	ldr	w3, [x1, #88]
     cc4:	cmp	w3, #0x2
     cc8:	b.eq	e74 <gomp_task_run_pre+0x384>  // b.none
     ccc:	str	xzr, [x0, #16]
     cd0:	b	b44 <gomp_task_run_pre+0x54>
     cd4:	ldr	w2, [x19, #88]
     cd8:	add	x1, sp, #0x38
     cdc:	add	x0, x21, #0x8
     ce0:	str	w2, [sp, #56]
     ce4:	bl	0 <prio_splay_tree_lookup>
     ce8:	ldr	x1, [x0, #8]
     cec:	cmp	x22, x1
     cf0:	b.eq	e38 <gomp_task_run_pre+0x348>  // b.none
     cf4:	ldr	x2, [x19, #128]
     cf8:	cmp	x1, x2
     cfc:	b.eq	d30 <gomp_task_run_pre+0x240>  // b.none
     d00:	ldr	w3, [x2, #72]
     d04:	cmp	w3, #0x2
     d08:	b.ne	d30 <gomp_task_run_pre+0x240>  // b.any
     d0c:	ldr	x3, [x19, #136]
     d10:	str	x2, [x3]
     d14:	ldr	x2, [x19, #128]
     d18:	str	x3, [x2, #8]
     d1c:	ldr	x2, [x1, #8]
     d20:	stp	x1, x2, [x19, #128]
     d24:	ldr	x2, [x1, #8]
     d28:	str	x22, [x2]
     d2c:	str	x22, [x1, #8]
     d30:	ldrb	w1, [x19, #207]
     d34:	cbz	w1, b84 <gomp_task_run_pre+0x94>
     d38:	ldr	x1, [x0, #16]
     d3c:	cmp	x22, x1
     d40:	b.ne	b84 <gomp_task_run_pre+0x94>  // b.any
     d44:	ldr	x1, [x19, #136]
     d48:	cmp	x22, x1
     d4c:	b.eq	d5c <gomp_task_run_pre+0x26c>  // b.none
     d50:	ldr	w3, [x1, #72]
     d54:	cmp	w3, #0x2
     d58:	b.eq	e64 <gomp_task_run_pre+0x374>  // b.none
     d5c:	str	xzr, [x0, #16]
     d60:	b	b84 <gomp_task_run_pre+0x94>
     d64:	ldrb	w0, [x19, #207]
     d68:	str	x2, [x1, #24]
     d6c:	cbz	w0, b44 <gomp_task_run_pre+0x54>
     d70:	b	e00 <gomp_task_run_pre+0x310>
     d74:	ldrb	w0, [x19, #207]
     d78:	str	x1, [x21, #24]
     d7c:	cbz	w0, b84 <gomp_task_run_pre+0x94>
     d80:	b	dd4 <gomp_task_run_pre+0x2e4>
     d84:	add	x1, x20, #0x508
     d88:	mov	w0, #0x0                   	// #0
     d8c:	bl	0 <priority_tree_remove>
     d90:	b	ba8 <gomp_task_run_pre+0xb8>
     d94:	ldrb	w1, [x19, #206]
     d98:	cbnz	w1, dcc <gomp_task_run_pre+0x2dc>
     d9c:	ldr	w1, [x20, #132]
     da0:	tbnz	w1, #2, bdc <gomp_task_run_pre+0xec>
     da4:	mov	w0, #0x0                   	// #0
     da8:	cbz	x21, bdc <gomp_task_run_pre+0xec>
     dac:	ldrb	w0, [x21, #49]
     db0:	cbnz	w0, bdc <gomp_task_run_pre+0xec>
     db4:	ldrb	w1, [x21, #50]
     db8:	cbz	w1, bdc <gomp_task_run_pre+0xec>
     dbc:	ldr	x1, [x21]
     dc0:	cbz	x1, bdc <gomp_task_run_pre+0xec>
     dc4:	ldrb	w0, [x1, #49]
     dc8:	b	bdc <gomp_task_run_pre+0xec>
     dcc:	mov	w0, #0x0                   	// #0
     dd0:	b	bdc <gomp_task_run_pre+0xec>
     dd4:	ldr	x0, [x21, #32]
     dd8:	cmp	x22, x0
     ddc:	b.ne	b84 <gomp_task_run_pre+0x94>  // b.any
     de0:	ldr	x0, [x19, #136]
     de4:	cmp	x22, x0
     de8:	b.eq	df8 <gomp_task_run_pre+0x308>  // b.none
     dec:	ldr	w2, [x0, #72]
     df0:	cmp	w2, #0x2
     df4:	b.eq	e44 <gomp_task_run_pre+0x354>  // b.none
     df8:	str	xzr, [x21, #32]
     dfc:	b	b84 <gomp_task_run_pre+0x94>
     e00:	ldr	x0, [x1, #32]
     e04:	cmp	x0, x21
     e08:	b.ne	b44 <gomp_task_run_pre+0x54>  // b.any
     e0c:	ldr	x0, [x19, #120]
     e10:	cmp	x0, x21
     e14:	b.eq	e24 <gomp_task_run_pre+0x334>  // b.none
     e18:	ldr	w3, [x0, #88]
     e1c:	cmp	w3, #0x2
     e20:	b.eq	e54 <gomp_task_run_pre+0x364>  // b.none
     e24:	str	xzr, [x1, #32]
     e28:	b	b44 <gomp_task_run_pre+0x54>
     e2c:	ldr	x1, [x19, #112]
     e30:	str	x1, [x0, #8]
     e34:	b	ca0 <gomp_task_run_pre+0x1b0>
     e38:	ldr	x1, [x19, #128]
     e3c:	str	x1, [x0, #8]
     e40:	b	d30 <gomp_task_run_pre+0x240>
     e44:	ldrb	w1, [x0, #79]
     e48:	cbz	w1, df8 <gomp_task_run_pre+0x308>
     e4c:	str	x0, [x21, #32]
     e50:	b	b84 <gomp_task_run_pre+0x94>
     e54:	ldrb	w2, [x0, #95]
     e58:	cbz	w2, e24 <gomp_task_run_pre+0x334>
     e5c:	str	x0, [x1, #32]
     e60:	b	b44 <gomp_task_run_pre+0x54>
     e64:	ldrb	w2, [x1, #79]
     e68:	cbz	w2, d5c <gomp_task_run_pre+0x26c>
     e6c:	str	x1, [x0, #16]
     e70:	b	b84 <gomp_task_run_pre+0x94>
     e74:	ldrb	w2, [x1, #95]
     e78:	cbz	w2, ccc <gomp_task_run_pre+0x1dc>
     e7c:	str	x1, [x0, #16]
     e80:	b	b44 <gomp_task_run_pre+0x54>
     e84:	nop

0000000000000e88 <gomp_task_run_post_handle_dependers>:
     e88:	stp	x29, x30, [sp, #-160]!
     e8c:	mov	x29, sp
     e90:	stp	x23, x24, [sp, #48]
     e94:	mov	x24, x0
     e98:	ldr	x0, [x0, #48]
     e9c:	stp	x25, x26, [sp, #64]
     ea0:	stp	x27, x28, [sp, #80]
     ea4:	ldr	x26, [x0]
     ea8:	ldr	x27, [x24]
     eac:	cbz	x26, 13f8 <gomp_task_run_post_handle_dependers+0x570>
     eb0:	add	x25, x1, #0x508
     eb4:	mov	x28, #0x0                   	// #0
     eb8:	stp	x19, x20, [sp, #16]
     ebc:	mov	x20, x1
     ec0:	add	x1, x27, #0x8
     ec4:	stp	x21, x22, [sp, #32]
     ec8:	mov	x21, #0x0                   	// #0
     ecc:	str	x1, [sp, #96]
     ed0:	add	x1, x21, #0x2
     ed4:	ldr	x19, [x0, x1, lsl #3]
     ed8:	ldr	x2, [x19, #80]
     edc:	sub	x2, x2, #0x1
     ee0:	str	x2, [x19, #80]
     ee4:	cbnz	x2, 1008 <gomp_task_run_post_handle_dependers+0x180>
     ee8:	ldr	w23, [x19, #88]
     eec:	ldr	x22, [x19, #40]
     ef0:	cbz	x27, f6c <gomp_task_run_post_handle_dependers+0xe4>
     ef4:	ldr	x0, [x27, #8]
     ef8:	add	x2, x19, #0x70
     efc:	ldrb	w4, [x19, #207]
     f00:	cbnz	x0, 11f4 <gomp_task_run_post_handle_dependers+0x36c>
     f04:	cmp	w23, #0x0
     f08:	ldr	x0, [x27, #24]
     f0c:	b.gt	11a8 <gomp_task_run_post_handle_dependers+0x320>
     f10:	cbz	x0, 110c <gomp_task_run_post_handle_dependers+0x284>
     f14:	ldr	x1, [x27, #32]
     f18:	cmp	x1, #0x0
     f1c:	ccmp	w4, #0x0, #0x0, ne  // ne = any
     f20:	b.eq	1348 <gomp_task_run_post_handle_dependers+0x4c0>  // b.none
     f24:	ldr	x1, [x0, #8]
     f28:	stp	x0, x1, [x19, #112]
     f2c:	str	x2, [x27, #24]
     f30:	ldr	x0, [x19, #112]
     f34:	str	x2, [x0, #8]
     f38:	ldr	x0, [x19, #120]
     f3c:	str	x2, [x0]
     f40:	ldr	x0, [x27, #32]
     f44:	cmp	x0, #0x0
     f48:	ccmp	w4, #0x0, #0x4, eq  // eq = none
     f4c:	b.ne	1124 <gomp_task_run_post_handle_dependers+0x29c>  // b.any
     f50:	ldr	x0, [x27, #64]
     f54:	cbz	x0, f68 <gomp_task_run_post_handle_dependers+0xe0>
     f58:	ldrb	w1, [x0]
     f5c:	cbnz	w1, 112c <gomp_task_run_post_handle_dependers+0x2a4>
     f60:	ldrb	w1, [x0, #1]
     f64:	cbnz	w1, 1168 <gomp_task_run_post_handle_dependers+0x2e0>
     f68:	ldr	w23, [x19, #88]
     f6c:	cbz	x22, fb8 <gomp_task_run_post_handle_dependers+0x130>
     f70:	ldr	x0, [x22, #8]
     f74:	add	x4, x22, #0x8
     f78:	add	x2, x19, #0x80
     f7c:	cbnz	x0, 12a4 <gomp_task_run_post_handle_dependers+0x41c>
     f80:	cmp	w23, #0x0
     f84:	ldr	x0, [x22, #24]
     f88:	b.gt	1264 <gomp_task_run_post_handle_dependers+0x3dc>
     f8c:	cbz	x0, 1100 <gomp_task_run_post_handle_dependers+0x278>
     f90:	ldr	x1, [x0, #8]
     f94:	stp	x0, x1, [x19, #128]
     f98:	str	x2, [x22, #24]
     f9c:	ldr	x0, [x19, #128]
     fa0:	str	x2, [x0, #8]
     fa4:	ldr	x0, [x19, #136]
     fa8:	str	x2, [x0]
     fac:	ldrb	w0, [x22, #48]
     fb0:	cbnz	w0, 1050 <gomp_task_run_post_handle_dependers+0x1c8>
     fb4:	ldr	w23, [x19, #88]
     fb8:	ldr	x0, [x20, #1288]
     fbc:	add	x22, x19, #0x60
     fc0:	cbnz	x0, 10cc <gomp_task_run_post_handle_dependers+0x244>
     fc4:	cmp	w23, #0x0
     fc8:	ldr	x0, [x20, #1304]
     fcc:	b.gt	1098 <gomp_task_run_post_handle_dependers+0x210>
     fd0:	cbz	x0, 108c <gomp_task_run_post_handle_dependers+0x204>
     fd4:	ldr	x1, [x0, #8]
     fd8:	stp	x0, x1, [x19, #96]
     fdc:	str	x22, [x0, #8]
     fe0:	ldr	x0, [x19, #104]
     fe4:	str	x22, [x0]
     fe8:	ldr	w2, [x20, #1320]
     fec:	add	x28, x28, #0x1
     ff0:	ldr	w1, [x20, #1324]
     ff4:	add	w2, w2, #0x1
     ff8:	add	w1, w1, #0x1
     ffc:	ldr	x0, [x24, #48]
    1000:	str	w2, [x20, #1320]
    1004:	str	w1, [x20, #1324]
    1008:	add	x21, x21, #0x1
    100c:	cmp	x26, x21
    1010:	b.ne	ed0 <gomp_task_run_post_handle_dependers+0x48>  // b.any
    1014:	bl	0 <free>
    1018:	str	xzr, [x24, #48]
    101c:	cmp	x28, #0x1
    1020:	b.ls	1328 <gomp_task_run_post_handle_dependers+0x4a0>  // b.plast
    1024:	ldr	w0, [x20, #132]
    1028:	ldp	x21, x22, [sp, #32]
    102c:	orr	w0, w0, #0x1
    1030:	str	w0, [x20, #132]
    1034:	mov	x0, x28
    1038:	ldp	x19, x20, [sp, #16]
    103c:	ldp	x23, x24, [sp, #48]
    1040:	ldp	x25, x26, [sp, #64]
    1044:	ldp	x27, x28, [sp, #80]
    1048:	ldp	x29, x30, [sp], #160
    104c:	ret
    1050:	ldr	w1, [x22, #52]
    1054:	add	x0, x22, #0x34
    1058:	strb	wzr, [x22, #48]
    105c:	add	w2, w1, #0x1
    1060:	and	w2, w2, #0x7fffffff
    1064:	ldxr	w4, [x0]
    1068:	cmp	w4, w1
    106c:	b.ne	1078 <gomp_task_run_post_handle_dependers+0x1f0>  // b.any
    1070:	stlxr	w3, w2, [x0]
    1074:	cmp	w3, #0x0
    1078:	mov	w1, w4
    107c:	b.ne	105c <gomp_task_run_post_handle_dependers+0x1d4>  // b.any
    1080:	tbz	w4, #31, fb4 <gomp_task_run_post_handle_dependers+0x12c>
    1084:	bl	0 <gomp_sem_post_slow>
    1088:	b	fb4 <gomp_task_run_post_handle_dependers+0x12c>
    108c:	stp	x22, x22, [x19, #96]
    1090:	str	x22, [x20, #1304]
    1094:	b	fe8 <gomp_task_run_post_handle_dependers+0x160>
    1098:	cbz	x0, 12e8 <gomp_task_run_post_handle_dependers+0x460>
    109c:	mov	x0, #0x28                  	// #40
    10a0:	bl	0 <gomp_malloc>
    10a4:	ldp	x4, x2, [x25, #16]
    10a8:	mov	x1, x0
    10ac:	mov	x0, x25
    10b0:	str	wzr, [x1]
    10b4:	stp	x4, x2, [x1, #8]
    10b8:	stp	xzr, xzr, [x1, #24]
    10bc:	bl	0 <prio_splay_tree_insert>
    10c0:	str	xzr, [x25, #16]
    10c4:	ldr	x0, [x25]
    10c8:	cbz	x0, 12e8 <gomp_task_run_post_handle_dependers+0x460>
    10cc:	add	x1, sp, #0x88
    10d0:	mov	x0, x25
    10d4:	str	w23, [sp, #136]
    10d8:	bl	0 <prio_splay_tree_lookup>
    10dc:	cbz	x0, 12e8 <gomp_task_run_post_handle_dependers+0x460>
    10e0:	ldr	x1, [x0, #8]
    10e4:	cbz	x1, 131c <gomp_task_run_post_handle_dependers+0x494>
    10e8:	ldr	x0, [x1, #8]
    10ec:	stp	x1, x0, [x19, #96]
    10f0:	str	x22, [x1, #8]
    10f4:	ldr	x0, [x19, #104]
    10f8:	str	x22, [x0]
    10fc:	b	fe8 <gomp_task_run_post_handle_dependers+0x160>
    1100:	stp	x2, x2, [x19, #128]
    1104:	str	x2, [x22, #24]
    1108:	b	fac <gomp_task_run_post_handle_dependers+0x124>
    110c:	stp	x2, x2, [x19, #112]
    1110:	ldr	x0, [x27, #32]
    1114:	str	x2, [x27, #24]
    1118:	cmp	x0, #0x0
    111c:	ccmp	w4, #0x0, #0x4, eq  // eq = none
    1120:	b.eq	f50 <gomp_task_run_post_handle_dependers+0xc8>  // b.none
    1124:	str	x2, [x27, #32]
    1128:	b	f50 <gomp_task_run_post_handle_dependers+0xc8>
    112c:	ldr	w1, [x0, #16]
    1130:	strb	wzr, [x0], #16
    1134:	add	w2, w1, #0x1
    1138:	and	w2, w2, #0x7fffffff
    113c:	ldxr	w4, [x0]
    1140:	cmp	w4, w1
    1144:	b.ne	1150 <gomp_task_run_post_handle_dependers+0x2c8>  // b.any
    1148:	stlxr	w3, w2, [x0]
    114c:	cmp	w3, #0x0
    1150:	mov	w1, w4
    1154:	b.ne	1134 <gomp_task_run_post_handle_dependers+0x2ac>  // b.any
    1158:	tbz	w4, #31, f68 <gomp_task_run_post_handle_dependers+0xe0>
    115c:	bl	0 <gomp_sem_post_slow>
    1160:	ldr	w23, [x19, #88]
    1164:	b	f6c <gomp_task_run_post_handle_dependers+0xe4>
    1168:	ldr	w1, [x0, #16]
    116c:	add	x4, x0, #0x10
    1170:	strb	wzr, [x0, #1]
    1174:	add	w2, w1, #0x1
    1178:	and	w2, w2, #0x7fffffff
    117c:	ldxr	w0, [x4]
    1180:	cmp	w0, w1
    1184:	b.ne	1190 <gomp_task_run_post_handle_dependers+0x308>  // b.any
    1188:	stlxr	w3, w2, [x4]
    118c:	cmp	w3, #0x0
    1190:	mov	w1, w0
    1194:	b.ne	1174 <gomp_task_run_post_handle_dependers+0x2ec>  // b.any
    1198:	tbz	w0, #31, f68 <gomp_task_run_post_handle_dependers+0xe0>
    119c:	mov	x0, x4
    11a0:	bl	0 <gomp_sem_post_slow>
    11a4:	b	1160 <gomp_task_run_post_handle_dependers+0x2d8>
    11a8:	cbz	x0, 1354 <gomp_task_run_post_handle_dependers+0x4cc>
    11ac:	mov	x0, #0x28                  	// #40
    11b0:	str	w4, [sp, #104]
    11b4:	str	x2, [sp, #112]
    11b8:	bl	0 <gomp_malloc>
    11bc:	ldr	x2, [sp, #96]
    11c0:	mov	x1, x0
    11c4:	mov	x0, x2
    11c8:	ldp	x6, x5, [x2, #16]
    11cc:	str	wzr, [x1]
    11d0:	stp	x6, x5, [x1, #8]
    11d4:	stp	xzr, xzr, [x1, #24]
    11d8:	bl	0 <prio_splay_tree_insert>
    11dc:	ldr	x1, [sp, #96]
    11e0:	ldr	w4, [sp, #104]
    11e4:	ldr	x2, [sp, #112]
    11e8:	str	xzr, [x1, #16]
    11ec:	ldr	x0, [x1]
    11f0:	cbz	x0, 1354 <gomp_task_run_post_handle_dependers+0x4cc>
    11f4:	ldr	x0, [sp, #96]
    11f8:	add	x1, sp, #0x88
    11fc:	str	w4, [sp, #104]
    1200:	str	x2, [sp, #112]
    1204:	str	w23, [sp, #136]
    1208:	bl	0 <prio_splay_tree_lookup>
    120c:	ldr	w4, [sp, #104]
    1210:	ldr	x2, [sp, #112]
    1214:	cbz	x0, 1354 <gomp_task_run_post_handle_dependers+0x4cc>
    1218:	ldr	x1, [x0, #8]
    121c:	cbz	x1, 1398 <gomp_task_run_post_handle_dependers+0x510>
    1220:	ldr	x5, [x0, #16]
    1224:	cmp	x5, #0x0
    1228:	ccmp	w4, #0x0, #0x0, ne  // ne = any
    122c:	b.eq	13ec <gomp_task_run_post_handle_dependers+0x564>  // b.none
    1230:	ldr	x5, [x1, #8]
    1234:	stp	x1, x5, [x19, #112]
    1238:	str	x2, [x0, #8]
    123c:	ldr	x1, [x19, #112]
    1240:	str	x2, [x1, #8]
    1244:	ldr	x1, [x19, #120]
    1248:	str	x2, [x1]
    124c:	ldr	x1, [x0, #16]
    1250:	cmp	x1, #0x0
    1254:	ccmp	w4, #0x0, #0x4, eq  // eq = none
    1258:	b.eq	f50 <gomp_task_run_post_handle_dependers+0xc8>  // b.none
    125c:	str	x2, [x0, #16]
    1260:	b	f50 <gomp_task_run_post_handle_dependers+0xc8>
    1264:	cbz	x0, 13a4 <gomp_task_run_post_handle_dependers+0x51c>
    1268:	mov	x0, #0x28                  	// #40
    126c:	stp	x4, x2, [sp, #104]
    1270:	bl	0 <gomp_malloc>
    1274:	ldr	x4, [sp, #104]
    1278:	mov	x1, x0
    127c:	mov	x0, x4
    1280:	ldp	x6, x5, [x4, #16]
    1284:	str	wzr, [x1]
    1288:	stp	x6, x5, [x1, #8]
    128c:	stp	xzr, xzr, [x1, #24]
    1290:	bl	0 <prio_splay_tree_insert>
    1294:	ldr	x0, [x22, #8]
    1298:	ldp	x4, x2, [sp, #104]
    129c:	str	xzr, [x4, #16]
    12a0:	cbz	x0, 13a4 <gomp_task_run_post_handle_dependers+0x51c>
    12a4:	mov	x0, x4
    12a8:	add	x1, sp, #0x88
    12ac:	stp	x4, x2, [sp, #104]
    12b0:	str	w23, [sp, #136]
    12b4:	bl	0 <prio_splay_tree_lookup>
    12b8:	ldp	x4, x2, [sp, #104]
    12bc:	cbz	x0, 13a4 <gomp_task_run_post_handle_dependers+0x51c>
    12c0:	ldr	x1, [x0, #8]
    12c4:	cbz	x1, 13e0 <gomp_task_run_post_handle_dependers+0x558>
    12c8:	ldr	x4, [x1, #8]
    12cc:	stp	x1, x4, [x19, #128]
    12d0:	str	x2, [x0, #8]
    12d4:	ldr	x0, [x19, #128]
    12d8:	str	x2, [x0, #8]
    12dc:	ldr	x0, [x19, #136]
    12e0:	str	x2, [x0]
    12e4:	b	fac <gomp_task_run_post_handle_dependers+0x124>
    12e8:	mov	x0, #0x28                  	// #40
    12ec:	bl	0 <gomp_malloc>
    12f0:	mov	x1, x0
    12f4:	mov	x0, x25
    12f8:	str	x1, [sp, #104]
    12fc:	str	w23, [x1]
    1300:	stp	xzr, xzr, [x1, #8]
    1304:	stp	xzr, xzr, [x1, #24]
    1308:	bl	0 <prio_splay_tree_insert>
    130c:	ldr	x1, [sp, #104]
    1310:	mov	x0, x1
    1314:	ldr	x1, [x0, #8]
    1318:	cbnz	x1, 10e8 <gomp_task_run_post_handle_dependers+0x260>
    131c:	stp	x22, x22, [x19, #96]
    1320:	str	x22, [x0, #8]
    1324:	b	fe8 <gomp_task_run_post_handle_dependers+0x160>
    1328:	mov	x0, x28
    132c:	ldp	x19, x20, [sp, #16]
    1330:	ldp	x21, x22, [sp, #32]
    1334:	ldp	x23, x24, [sp, #48]
    1338:	ldp	x25, x26, [sp, #64]
    133c:	ldp	x27, x28, [sp, #80]
    1340:	ldp	x29, x30, [sp], #160
    1344:	ret
    1348:	ldr	x0, [x1]
    134c:	stp	x0, x1, [x19, #112]
    1350:	b	f34 <gomp_task_run_post_handle_dependers+0xac>
    1354:	mov	x0, #0x28                  	// #40
    1358:	str	w4, [sp, #112]
    135c:	str	x2, [sp, #120]
    1360:	bl	0 <gomp_malloc>
    1364:	mov	x1, x0
    1368:	str	x1, [sp, #104]
    136c:	ldr	x0, [sp, #96]
    1370:	str	w23, [x1]
    1374:	stp	xzr, xzr, [x1, #8]
    1378:	stp	xzr, xzr, [x1, #24]
    137c:	bl	0 <prio_splay_tree_insert>
    1380:	ldr	x1, [sp, #104]
    1384:	ldr	w4, [sp, #112]
    1388:	mov	x0, x1
    138c:	ldr	x2, [sp, #120]
    1390:	ldr	x1, [x0, #8]
    1394:	cbnz	x1, 1220 <gomp_task_run_post_handle_dependers+0x398>
    1398:	stp	x2, x2, [x19, #112]
    139c:	str	x2, [x0, #8]
    13a0:	b	124c <gomp_task_run_post_handle_dependers+0x3c4>
    13a4:	mov	x0, #0x28                  	// #40
    13a8:	stp	x4, x2, [sp, #104]
    13ac:	bl	0 <gomp_malloc>
    13b0:	mov	x1, x0
    13b4:	ldr	x4, [sp, #104]
    13b8:	str	x1, [sp, #104]
    13bc:	str	w23, [x1]
    13c0:	stp	xzr, xzr, [x1, #8]
    13c4:	mov	x0, x4
    13c8:	stp	xzr, xzr, [x1, #24]
    13cc:	bl	0 <prio_splay_tree_insert>
    13d0:	ldp	x1, x2, [sp, #104]
    13d4:	mov	x0, x1
    13d8:	ldr	x1, [x0, #8]
    13dc:	cbnz	x1, 12c8 <gomp_task_run_post_handle_dependers+0x440>
    13e0:	stp	x2, x2, [x19, #128]
    13e4:	str	x2, [x0, #8]
    13e8:	b	fac <gomp_task_run_post_handle_dependers+0x124>
    13ec:	ldr	x1, [x5]
    13f0:	stp	x1, x5, [x19, #112]
    13f4:	b	1240 <gomp_task_run_post_handle_dependers+0x3b8>
    13f8:	bl	0 <free>
    13fc:	str	xzr, [x24, #48]
    1400:	mov	x28, #0x0                   	// #0
    1404:	mov	x0, x28
    1408:	ldp	x23, x24, [sp, #48]
    140c:	ldp	x25, x26, [sp, #64]
    1410:	ldp	x27, x28, [sp, #80]
    1414:	ldp	x29, x30, [sp], #160
    1418:	ret
    141c:	nop

0000000000001420 <gomp_target_task_completion>:
    1420:	stp	x29, x30, [sp, #-112]!
    1424:	mov	x29, sp
    1428:	stp	x21, x22, [sp, #32]
    142c:	ldr	x21, [x1]
    1430:	stp	x19, x20, [sp, #16]
    1434:	mov	x19, x1
    1438:	stp	x23, x24, [sp, #48]
    143c:	mov	x24, x0
    1440:	stp	x25, x26, [sp, #64]
    1444:	cbz	x21, 14bc <gomp_target_task_completion+0x9c>
    1448:	mov	x1, x21
    144c:	ldr	x0, [x1, #8]!
    1450:	add	x3, x1, #0x8
    1454:	cbnz	x0, 1708 <gomp_target_task_completion+0x2e8>
    1458:	ldp	x1, x0, [x19, #112]
    145c:	add	x2, x19, #0x70
    1460:	ldr	x4, [x3, #8]
    1464:	cmp	x2, x4
    1468:	str	x1, [x0]
    146c:	str	x0, [x1, #8]
    1470:	b.eq	1694 <gomp_target_task_completion+0x274>  // b.none
    1474:	ldrb	w0, [x19, #207]
    1478:	mov	x1, x4
    147c:	cbz	x4, 1760 <gomp_target_task_completion+0x340>
    1480:	ldr	x4, [x3, #16]
    1484:	cmp	x4, #0x0
    1488:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    148c:	b.eq	16e4 <gomp_target_task_completion+0x2c4>  // b.none
    1490:	ldr	x4, [x1, #8]
    1494:	stp	x1, x4, [x19, #112]
    1498:	str	x2, [x3, #8]
    149c:	ldr	x1, [x19, #112]
    14a0:	str	x2, [x1, #8]
    14a4:	ldr	x1, [x19, #120]
    14a8:	str	x2, [x1]
    14ac:	ldr	x1, [x3, #16]
    14b0:	cmp	x1, #0x0
    14b4:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    14b8:	b.ne	17d8 <gomp_target_task_completion+0x3b8>  // b.any
    14bc:	ldr	x20, [x19, #40]
    14c0:	cbz	x20, 1514 <gomp_target_task_completion+0xf4>
    14c4:	mov	x1, x20
    14c8:	ldr	x2, [x1, #8]!
    14cc:	add	x0, x1, #0x8
    14d0:	cbnz	x2, 16f0 <gomp_target_task_completion+0x2d0>
    14d4:	ldp	x1, x3, [x19, #128]
    14d8:	add	x2, x19, #0x80
    14dc:	ldr	x4, [x0, #8]
    14e0:	cmp	x2, x4
    14e4:	str	x1, [x3]
    14e8:	str	x3, [x1, #8]
    14ec:	b.eq	1630 <gomp_target_task_completion+0x210>  // b.none
    14f0:	mov	x1, x4
    14f4:	cbz	x4, 1638 <gomp_target_task_completion+0x218>
    14f8:	ldr	x3, [x1, #8]
    14fc:	stp	x1, x3, [x19, #128]
    1500:	str	x2, [x0, #8]
    1504:	ldr	x0, [x19, #128]
    1508:	str	x2, [x0, #8]
    150c:	ldr	x0, [x19, #136]
    1510:	str	x2, [x0]
    1514:	ldr	x1, [x24, #1288]
    1518:	add	x26, x24, #0x508
    151c:	ldr	w23, [x19, #88]
    1520:	add	x22, x19, #0x60
    1524:	cbnz	x1, 1658 <gomp_target_task_completion+0x238>
    1528:	cmp	w23, #0x0
    152c:	ldr	x1, [x24, #1304]
    1530:	b.gt	176c <gomp_target_task_completion+0x34c>
    1534:	cbz	x1, 1624 <gomp_target_task_completion+0x204>
    1538:	ldr	x0, [x1, #8]
    153c:	stp	x1, x0, [x19, #96]
    1540:	str	x22, [x24, #1304]
    1544:	ldr	x0, [x19, #96]
    1548:	str	x22, [x0, #8]
    154c:	ldr	x0, [x19, #104]
    1550:	str	x22, [x0]
    1554:	mov	w1, #0x2                   	// #2
    1558:	str	w1, [x19, #200]
    155c:	cbz	x21, 1578 <gomp_target_task_completion+0x158>
    1560:	ldr	x1, [x21, #64]
    1564:	cbz	x1, 1578 <gomp_target_task_completion+0x158>
    1568:	ldrb	w0, [x1]
    156c:	cbnz	w0, 1724 <gomp_target_task_completion+0x304>
    1570:	ldrb	w0, [x1, #1]
    1574:	cbnz	w0, 16a8 <gomp_target_task_completion+0x288>
    1578:	cbz	x20, 1584 <gomp_target_task_completion+0x164>
    157c:	ldrb	w0, [x20, #48]
    1580:	cbnz	w0, 15c4 <gomp_target_task_completion+0x1a4>
    1584:	ldr	w2, [x24, #132]
    1588:	ldr	w1, [x24, #1324]
    158c:	orr	w2, w2, #0x1
    1590:	str	w2, [x24, #132]
    1594:	add	w1, w1, #0x1
    1598:	ldr	w2, [x24]
    159c:	str	w1, [x24, #1324]
    15a0:	ldr	w1, [x24, #1328]
    15a4:	cmp	w2, w1
    15a8:	b.hi	1600 <gomp_target_task_completion+0x1e0>  // b.pmore
    15ac:	ldp	x19, x20, [sp, #16]
    15b0:	ldp	x21, x22, [sp, #32]
    15b4:	ldp	x23, x24, [sp, #48]
    15b8:	ldp	x25, x26, [sp, #64]
    15bc:	ldp	x29, x30, [sp], #112
    15c0:	ret
    15c4:	ldr	w1, [x20, #52]
    15c8:	add	x0, x20, #0x34
    15cc:	strb	wzr, [x20, #48]
    15d0:	add	w2, w1, #0x1
    15d4:	and	w2, w2, #0x7fffffff
    15d8:	ldxr	w3, [x0]
    15dc:	cmp	w3, w1
    15e0:	b.ne	15ec <gomp_target_task_completion+0x1cc>  // b.any
    15e4:	stlxr	w4, w2, [x0]
    15e8:	cmp	w4, #0x0
    15ec:	mov	w1, w3
    15f0:	b.ne	15d0 <gomp_target_task_completion+0x1b0>  // b.any
    15f4:	tbz	w3, #31, 1584 <gomp_target_task_completion+0x164>
    15f8:	bl	0 <gomp_sem_post_slow>
    15fc:	b	1584 <gomp_target_task_completion+0x164>
    1600:	add	x0, x24, #0x80
    1604:	mov	w1, #0x1                   	// #1
    1608:	bl	0 <gomp_team_barrier_wake>
    160c:	ldp	x19, x20, [sp, #16]
    1610:	ldp	x21, x22, [sp, #32]
    1614:	ldp	x23, x24, [sp, #48]
    1618:	ldp	x25, x26, [sp, #64]
    161c:	ldp	x29, x30, [sp], #112
    1620:	ret
    1624:	stp	x22, x22, [x19, #96]
    1628:	str	x22, [x24, #1304]
    162c:	b	1554 <gomp_target_task_completion+0x134>
    1630:	cmp	x2, x1
    1634:	b.ne	14f8 <gomp_target_task_completion+0xd8>  // b.any
    1638:	ldr	x1, [x24, #1288]
    163c:	stp	x2, x2, [x19, #128]
    1640:	ldr	w23, [x19, #88]
    1644:	str	x2, [x0, #8]
    1648:	add	x26, x24, #0x508
    164c:	add	x22, x19, #0x60
    1650:	cbz	x1, 1528 <gomp_target_task_completion+0x108>
    1654:	nop
    1658:	add	x1, sp, #0x58
    165c:	mov	x0, x26
    1660:	str	w23, [sp, #88]
    1664:	bl	0 <prio_splay_tree_lookup>
    1668:	cbz	x0, 17a0 <gomp_target_task_completion+0x380>
    166c:	ldr	x1, [x0, #8]
    1670:	cbz	x1, 17cc <gomp_target_task_completion+0x3ac>
    1674:	ldr	x2, [x1, #8]
    1678:	stp	x1, x2, [x19, #96]
    167c:	str	x22, [x0, #8]
    1680:	ldr	x0, [x19, #96]
    1684:	str	x22, [x0, #8]
    1688:	ldr	x0, [x19, #104]
    168c:	str	x22, [x0]
    1690:	b	1554 <gomp_target_task_completion+0x134>
    1694:	ldrb	w0, [x19, #207]
    1698:	cmp	x2, x1
    169c:	b.eq	1760 <gomp_target_task_completion+0x340>  // b.none
    16a0:	str	x1, [x3, #8]
    16a4:	b	1480 <gomp_target_task_completion+0x60>
    16a8:	ldr	w2, [x1, #16]
    16ac:	add	x0, x1, #0x10
    16b0:	strb	wzr, [x1, #1]
    16b4:	add	w1, w2, #0x1
    16b8:	and	w1, w1, #0x7fffffff
    16bc:	ldxr	w3, [x0]
    16c0:	cmp	w3, w2
    16c4:	b.ne	16d0 <gomp_target_task_completion+0x2b0>  // b.any
    16c8:	stlxr	w4, w1, [x0]
    16cc:	cmp	w4, #0x0
    16d0:	mov	w2, w3
    16d4:	b.ne	16b4 <gomp_target_task_completion+0x294>  // b.any
    16d8:	tbz	w3, #31, 1578 <gomp_target_task_completion+0x158>
    16dc:	bl	0 <gomp_sem_post_slow>
    16e0:	b	1578 <gomp_target_task_completion+0x158>
    16e4:	ldr	x1, [x4]
    16e8:	stp	x1, x4, [x19, #112]
    16ec:	b	14a0 <gomp_target_task_completion+0x80>
    16f0:	ldr	w2, [x19, #88]
    16f4:	mov	x0, x1
    16f8:	add	x1, sp, #0x58
    16fc:	str	w2, [sp, #88]
    1700:	bl	0 <prio_splay_tree_lookup>
    1704:	b	14d4 <gomp_target_task_completion+0xb4>
    1708:	ldr	w2, [x19, #88]
    170c:	mov	x0, x1
    1710:	add	x1, sp, #0x58
    1714:	str	w2, [sp, #88]
    1718:	bl	0 <prio_splay_tree_lookup>
    171c:	mov	x3, x0
    1720:	b	1458 <gomp_target_task_completion+0x38>
    1724:	ldr	w0, [x1, #16]
    1728:	strb	wzr, [x1], #16
    172c:	add	w2, w0, #0x1
    1730:	and	w2, w2, #0x7fffffff
    1734:	ldxr	w3, [x1]
    1738:	cmp	w3, w0
    173c:	b.ne	1748 <gomp_target_task_completion+0x328>  // b.any
    1740:	stlxr	w4, w2, [x1]
    1744:	cmp	w4, #0x0
    1748:	mov	w0, w3
    174c:	b.ne	172c <gomp_target_task_completion+0x30c>  // b.any
    1750:	tbz	w3, #31, 1578 <gomp_target_task_completion+0x158>
    1754:	mov	x0, x1
    1758:	bl	0 <gomp_sem_post_slow>
    175c:	b	1578 <gomp_target_task_completion+0x158>
    1760:	stp	x2, x2, [x19, #112]
    1764:	str	x2, [x3, #8]
    1768:	b	14ac <gomp_target_task_completion+0x8c>
    176c:	cbz	x1, 17a0 <gomp_target_task_completion+0x380>
    1770:	mov	x0, #0x28                  	// #40
    1774:	bl	0 <gomp_malloc>
    1778:	ldp	x3, x2, [x26, #16]
    177c:	mov	x1, x0
    1780:	mov	x0, x26
    1784:	str	wzr, [x1]
    1788:	stp	x3, x2, [x1, #8]
    178c:	stp	xzr, xzr, [x1, #24]
    1790:	bl	0 <prio_splay_tree_insert>
    1794:	ldr	x0, [x24, #1288]
    1798:	str	xzr, [x26, #16]
    179c:	cbnz	x0, 1658 <gomp_target_task_completion+0x238>
    17a0:	mov	x0, #0x28                  	// #40
    17a4:	bl	0 <gomp_malloc>
    17a8:	mov	x25, x0
    17ac:	mov	x0, x26
    17b0:	mov	x1, x25
    17b4:	str	w23, [x25]
    17b8:	stp	xzr, xzr, [x25, #8]
    17bc:	stp	xzr, xzr, [x25, #24]
    17c0:	bl	0 <prio_splay_tree_insert>
    17c4:	mov	x0, x25
    17c8:	b	166c <gomp_target_task_completion+0x24c>
    17cc:	stp	x22, x22, [x19, #96]
    17d0:	str	x22, [x0, #8]
    17d4:	b	1554 <gomp_target_task_completion+0x134>
    17d8:	str	x2, [x3, #16]
    17dc:	b	14bc <gomp_target_task_completion+0x9c>

00000000000017e0 <gomp_init_task>:
    17e0:	mov	x3, x0
    17e4:	ldp	x6, x7, [x2]
    17e8:	str	x1, [x3], #144
    17ec:	stp	x6, x7, [x0, #144]
    17f0:	ldp	x6, x7, [x2, #16]
    17f4:	stp	x6, x7, [x3, #16]
    17f8:	ldr	x1, [x2, #32]
    17fc:	str	x1, [x3, #32]
    1800:	str	xzr, [x0, #8]
    1804:	stp	xzr, xzr, [x0, #24]
    1808:	stp	xzr, xzr, [x0, #40]
    180c:	stp	xzr, xzr, [x0, #56]
    1810:	str	xzr, [x0, #72]
    1814:	str	xzr, [x0, #200]
    1818:	ret
    181c:	nop

0000000000001820 <gomp_end_task>:
    1820:	stp	x29, x30, [sp, #-48]!
    1824:	mov	x29, sp
    1828:	str	x21, [sp, #32]
    182c:	adrp	x21, 0 <gomp_tls_data>
    1830:	ldr	x21, [x21]
    1834:	stp	x19, x20, [sp, #16]
    1838:	mrs	x19, tpidr_el0
    183c:	add	x0, x19, x21
    1840:	ldr	x20, [x0, #80]
    1844:	ldr	x0, [x20, #56]
    1848:	cbnz	x0, 1868 <gomp_end_task+0x48>
    184c:	add	x19, x19, x21
    1850:	ldr	x0, [x20]
    1854:	ldr	x21, [sp, #32]
    1858:	str	x0, [x19, #80]
    185c:	ldp	x19, x20, [sp, #16]
    1860:	ldp	x29, x30, [sp], #48
    1864:	ret
    1868:	add	x19, x19, x21
    186c:	bl	0 <free>
    1870:	ldr	x0, [x20]
    1874:	ldr	x21, [sp, #32]
    1878:	str	x0, [x19, #80]
    187c:	ldp	x19, x20, [sp, #16]
    1880:	ldp	x29, x30, [sp], #48
    1884:	ret

0000000000001888 <GOMP_PLUGIN_target_task_completion>:
    1888:	stp	x29, x30, [sp, #-48]!
    188c:	mov	w2, #0x1                   	// #1
    1890:	mov	x29, sp
    1894:	stp	x21, x22, [sp, #32]
    1898:	ldp	x22, x21, [x0, #56]
    189c:	stp	x19, x20, [sp, #16]
    18a0:	mov	x19, x0
    18a4:	add	x20, x21, #0x500
    18a8:	ldaxr	w1, [x20]
    18ac:	cbnz	w1, 18b8 <GOMP_PLUGIN_target_task_completion+0x30>
    18b0:	stxr	w0, w2, [x20]
    18b4:	cbnz	w0, 18a8 <GOMP_PLUGIN_target_task_completion+0x20>
    18b8:	cmp	w1, #0x0
    18bc:	b.ne	1924 <GOMP_PLUGIN_target_task_completion+0x9c>  // b.any
    18c0:	ldr	w0, [x19, #44]
    18c4:	cmp	w0, #0x3
    18c8:	mov	w0, #0x5                   	// #5
    18cc:	str	w0, [x19, #44]
    18d0:	b.eq	1900 <GOMP_PLUGIN_target_task_completion+0x78>  // b.none
    18d4:	mov	x1, x22
    18d8:	mov	x0, x21
    18dc:	bl	1420 <gomp_target_task_completion>
    18e0:	ldxr	w0, [x20]
    18e4:	stlxr	w1, wzr, [x20]
    18e8:	cbnz	w1, 18e0 <GOMP_PLUGIN_target_task_completion+0x58>
    18ec:	tbnz	w0, #31, 1910 <GOMP_PLUGIN_target_task_completion+0x88>
    18f0:	ldp	x19, x20, [sp, #16]
    18f4:	ldp	x21, x22, [sp, #32]
    18f8:	ldp	x29, x30, [sp], #48
    18fc:	ret
    1900:	ldxr	w0, [x20]
    1904:	stlxr	w1, wzr, [x20]
    1908:	cbnz	w1, 1900 <GOMP_PLUGIN_target_task_completion+0x78>
    190c:	tbz	w0, #31, 18f0 <GOMP_PLUGIN_target_task_completion+0x68>
    1910:	mov	x0, x20
    1914:	ldp	x19, x20, [sp, #16]
    1918:	ldp	x21, x22, [sp, #32]
    191c:	ldp	x29, x30, [sp], #48
    1920:	b	0 <gomp_mutex_unlock_slow>
    1924:	mov	x0, x20
    1928:	bl	0 <gomp_mutex_lock_slow>
    192c:	b	18c0 <GOMP_PLUGIN_target_task_completion+0x38>

0000000000001930 <gomp_create_target_task>:
    1930:	adrp	x8, 0 <gomp_tls_data>
    1934:	ldr	x8, [x8]
    1938:	mrs	x9, tpidr_el0
    193c:	stp	x29, x30, [sp, #-208]!
    1940:	mov	x13, x1
    1944:	add	x10, x9, x8
    1948:	mov	x29, sp
    194c:	stp	x25, x26, [sp, #64]
    1950:	ldr	x26, [x10, #16]
    1954:	stp	x7, x8, [sp, #112]
    1958:	adrp	x8, 0 <gomp_cancel_var>
    195c:	cmp	x26, #0x0
    1960:	stp	x21, x22, [sp, #32]
    1964:	ldrb	w11, [x8]
    1968:	stp	x23, x24, [sp, #48]
    196c:	mov	x22, x2
    1970:	mov	x21, x5
    1974:	stp	x27, x28, [sp, #80]
    1978:	mov	x27, x4
    197c:	stp	x3, x0, [sp, #96]
    1980:	cset	w0, ne  // ne = any
    1984:	tst	w0, w11
    1988:	str	x9, [sp, #128]
    198c:	str	w6, [sp, #140]
    1990:	b.ne	2040 <gomp_create_target_task+0x710>  // b.any
    1994:	ldr	x25, [x10, #80]
    1998:	stp	x19, x20, [sp, #16]
    199c:	ldr	x23, [x25, #40]
    19a0:	ldr	x0, [sp, #112]
    19a4:	cbz	x0, 1dac <gomp_create_target_task+0x47c>
    19a8:	ldr	x7, [x0]
    19ac:	cbz	x7, 1d4c <gomp_create_target_task+0x41c>
    19b0:	add	x7, x7, x7, lsl #2
    19b4:	lsl	x20, x7, #3
    19b8:	add	x14, x20, #0xd0
    19bc:	sub	x10, x20, #0x1
    19c0:	cbz	x13, 1d54 <gomp_create_target_task+0x424>
    19c4:	cbz	x22, 1d54 <gomp_create_target_task+0x424>
    19c8:	mov	x1, #0x0                   	// #0
    19cc:	mov	x2, #0x0                   	// #0
    19d0:	mov	x6, #0x0                   	// #0
    19d4:	mov	x15, #0x1                   	// #1
    19d8:	ldrh	w0, [x21, x1, lsl #1]
    19dc:	and	w3, w0, #0xff
    19e0:	cmp	w3, #0xc
    19e4:	b.ne	1a10 <gomp_create_target_task+0xe0>  // b.any
    19e8:	lsr	w0, w0, #8
    19ec:	sub	x2, x2, #0x1
    19f0:	ldr	x16, [x27, x1, lsl #3]
    19f4:	lsl	x0, x15, x0
    19f8:	add	x2, x2, x0
    19fc:	neg	x3, x0
    1a00:	cmp	x6, x0
    1a04:	and	x2, x3, x2
    1a08:	csel	x6, x6, x0, cs  // cs = hs, nlast
    1a0c:	add	x2, x2, x16
    1a10:	add	x1, x1, #0x1
    1a14:	cmp	x22, x1
    1a18:	b.ne	19d8 <gomp_create_target_task+0xa8>  // b.any
    1a1c:	add	x2, x6, x2
    1a20:	cmp	x6, #0x0
    1a24:	add	x2, x10, x2
    1a28:	csel	x2, x2, x20, ne  // ne = any
    1a2c:	lsl	x10, x22, #3
    1a30:	lsl	x0, x22, #1
    1a34:	stp	x13, x0, [sp, #160]
    1a38:	add	x0, x10, x22
    1a3c:	mov	x28, x10
    1a40:	add	x0, x2, x0, lsl #1
    1a44:	stp	x6, x14, [sp, #144]
    1a48:	add	x0, x0, #0x120
    1a4c:	bl	0 <gomp_malloc>
    1a50:	mov	x24, x0
    1a54:	ldp	x3, x1, [sp, #120]
    1a58:	mov	x15, x0
    1a5c:	ldp	x14, x13, [sp, #152]
    1a60:	adrp	x2, 0 <gomp_global_icv>
    1a64:	add	x2, x2, #0x0
    1a68:	str	x25, [x15], #144
    1a6c:	add	x1, x1, x3
    1a70:	add	x19, x0, x14
    1a74:	ldr	x0, [x1, #80]
    1a78:	add	x3, x19, #0x50
    1a7c:	str	x3, [sp, #152]
    1a80:	cmp	x0, #0x0
    1a84:	add	x0, x0, #0x90
    1a88:	csel	x2, x2, x0, eq  // eq = none
    1a8c:	ldp	x0, x1, [x2]
    1a90:	stp	x0, x1, [x24, #144]
    1a94:	ldp	x0, x1, [x2, #16]
    1a98:	stp	x0, x1, [x15, #16]
    1a9c:	ldr	x0, [x2, #32]
    1aa0:	str	x0, [x15, #32]
    1aa4:	mov	x1, #0x2                   	// #2
    1aa8:	str	x1, [x24, #200]
    1aac:	str	xzr, [x24, #8]
    1ab0:	mov	x0, x3
    1ab4:	ldrb	w1, [x25, #204]
    1ab8:	mov	x2, x28
    1abc:	stp	xzr, xzr, [x24, #24]
    1ac0:	str	x23, [x24, #40]
    1ac4:	str	xzr, [x24, #48]
    1ac8:	str	xzr, [x24, #56]
    1acc:	str	xzr, [x24, #64]
    1ad0:	str	xzr, [x24, #72]
    1ad4:	str	wzr, [x24, #88]
    1ad8:	strb	w1, [x24, #204]
    1adc:	ldr	x1, [sp, #104]
    1ae0:	str	x1, [x24, x14]
    1ae4:	ldr	x1, [sp, #96]
    1ae8:	stp	x13, x22, [x19, #8]
    1aec:	ldr	x3, [sp, #208]
    1af0:	str	x3, [x19, #72]
    1af4:	bl	0 <memcpy>
    1af8:	add	x0, x28, #0x50
    1afc:	mov	x2, x28
    1b00:	add	x0, x19, x0
    1b04:	str	x0, [x19, #24]
    1b08:	mov	x1, x27
    1b0c:	bl	0 <memcpy>
    1b10:	ldr	x0, [x19, #24]
    1b14:	lsl	x2, x22, #1
    1b18:	mov	x1, x21
    1b1c:	add	x0, x0, x28
    1b20:	str	x0, [x19, #32]
    1b24:	bl	0 <memcpy>
    1b28:	ldr	x6, [sp, #144]
    1b2c:	cbnz	x6, 1ca8 <gomp_create_target_task+0x378>
    1b30:	ldr	w0, [sp, #140]
    1b34:	add	x21, x26, #0x500
    1b38:	str	w0, [x19, #40]
    1b3c:	ldr	w0, [sp, #216]
    1b40:	str	w0, [x19, #44]
    1b44:	stp	x24, x26, [x19, #56]
    1b48:	mov	w0, #0x1                   	// #1
    1b4c:	stp	xzr, x19, [x24, #184]
    1b50:	strb	wzr, [x24, #205]
    1b54:	ldaxr	w1, [x21]
    1b58:	cbnz	w1, 1b64 <gomp_create_target_task+0x234>
    1b5c:	stxr	w2, w0, [x21]
    1b60:	cbnz	w2, 1b54 <gomp_create_target_task+0x224>
    1b64:	cmp	w1, #0x0
    1b68:	b.ne	2230 <gomp_create_target_task+0x900>  // b.any
    1b6c:	adrp	x0, 0 <gomp_cancel_var>
    1b70:	ldrb	w22, [x0]
    1b74:	cbnz	w22, 1ec4 <gomp_create_target_task+0x594>
    1b78:	cbnz	x20, 1d60 <gomp_create_target_task+0x430>
    1b7c:	ldr	w0, [sp, #216]
    1b80:	cbz	w0, 1f24 <gomp_create_target_task+0x5f4>
    1b84:	cbz	x23, 1b94 <gomp_create_target_task+0x264>
    1b88:	ldr	x0, [x23, #56]
    1b8c:	add	x0, x0, #0x1
    1b90:	str	x0, [x23, #56]
    1b94:	ldr	x1, [sp, #104]
    1b98:	add	x22, x25, #0x8
    1b9c:	add	x20, x24, #0x70
    1ba0:	ldr	x0, [x25, #8]
    1ba4:	cbz	x1, 1bb0 <gomp_create_target_task+0x280>
    1ba8:	ldr	w1, [x1, #8]
    1bac:	tbnz	w1, #2, 1df4 <gomp_create_target_task+0x4c4>
    1bb0:	cbnz	x0, 1fdc <gomp_create_target_task+0x6ac>
    1bb4:	ldr	x0, [x25, #24]
    1bb8:	cbz	x0, 1de8 <gomp_create_target_task+0x4b8>
    1bbc:	ldr	x1, [x0, #8]
    1bc0:	stp	x0, x1, [x24, #112]
    1bc4:	str	x20, [x25, #24]
    1bc8:	ldr	x0, [x24, #112]
    1bcc:	str	x20, [x0, #8]
    1bd0:	ldr	x0, [x24, #120]
    1bd4:	str	x20, [x0]
    1bd8:	cbz	x23, 1c0c <gomp_create_target_task+0x2dc>
    1bdc:	ldr	x0, [x23, #8]
    1be0:	add	x19, x24, #0x80
    1be4:	cbnz	x0, 207c <gomp_create_target_task+0x74c>
    1be8:	ldr	x0, [x23, #24]
    1bec:	cbz	x0, 1f18 <gomp_create_target_task+0x5e8>
    1bf0:	ldr	x1, [x0, #8]
    1bf4:	stp	x0, x1, [x24, #128]
    1bf8:	str	x19, [x23, #24]
    1bfc:	ldr	x0, [x24, #128]
    1c00:	str	x19, [x0, #8]
    1c04:	ldr	x0, [x24, #136]
    1c08:	str	x19, [x0]
    1c0c:	ldr	x0, [x26, #1288]
    1c10:	add	x19, x24, #0x60
    1c14:	cbnz	x0, 1f7c <gomp_create_target_task+0x64c>
    1c18:	ldr	x0, [x26, #1304]
    1c1c:	cbz	x0, 1f70 <gomp_create_target_task+0x640>
    1c20:	ldr	x1, [x0, #8]
    1c24:	stp	x0, x1, [x24, #96]
    1c28:	str	x19, [x0, #8]
    1c2c:	ldr	x0, [x24, #104]
    1c30:	str	x19, [x0]
    1c34:	ldr	w0, [x26, #1324]
    1c38:	ldrb	w19, [x25, #204]
    1c3c:	add	w0, w0, #0x1
    1c40:	str	w0, [x26, #1324]
    1c44:	ldr	w0, [x26, #1328]
    1c48:	eor	w19, w19, #0x1
    1c4c:	ldr	w2, [x26, #132]
    1c50:	ldr	w1, [x26, #1320]
    1c54:	add	w19, w19, w0
    1c58:	ldr	w20, [x26]
    1c5c:	orr	w2, w2, #0x1
    1c60:	add	w1, w1, #0x1
    1c64:	str	w2, [x26, #132]
    1c68:	str	w1, [x26, #1320]
    1c6c:	ldxr	w0, [x21]
    1c70:	stlxr	w1, wzr, [x21]
    1c74:	cbnz	w1, 1c6c <gomp_create_target_task+0x33c>
    1c78:	tbnz	w0, #31, 20bc <gomp_create_target_task+0x78c>
    1c7c:	cmp	w19, w20
    1c80:	b.cc	1db8 <gomp_create_target_task+0x488>  // b.lo, b.ul, b.last
    1c84:	ldp	x19, x20, [sp, #16]
    1c88:	mov	w22, #0x1                   	// #1
    1c8c:	mov	w0, w22
    1c90:	ldp	x21, x22, [sp, #32]
    1c94:	ldp	x23, x24, [sp, #48]
    1c98:	ldp	x25, x26, [sp, #64]
    1c9c:	ldp	x27, x28, [sp, #80]
    1ca0:	ldp	x29, x30, [sp], #208
    1ca4:	ret
    1ca8:	ldr	x13, [x19, #32]
    1cac:	lsl	x1, x22, #1
    1cb0:	sub	x0, x6, #0x1
    1cb4:	add	x13, x13, x1
    1cb8:	ands	x0, x13, x0
    1cbc:	sub	x6, x6, x0
    1cc0:	add	x6, x13, x6
    1cc4:	csel	x13, x6, x13, ne  // ne = any
    1cc8:	cbz	x22, 1b30 <gomp_create_target_task+0x200>
    1ccc:	mov	x28, #0x0                   	// #0
    1cd0:	mov	x10, #0x0                   	// #0
    1cd4:	b	1ce4 <gomp_create_target_task+0x3b4>
    1cd8:	add	x28, x28, #0x1
    1cdc:	cmp	x22, x28
    1ce0:	b.eq	1b30 <gomp_create_target_task+0x200>  // b.none
    1ce4:	ldrh	w0, [x21, x28, lsl #1]
    1ce8:	and	w1, w0, #0xff
    1cec:	cmp	w1, #0xc
    1cf0:	b.ne	1cd8 <gomp_create_target_task+0x3a8>  // b.any
    1cf4:	lsr	w0, w0, #8
    1cf8:	mov	x1, #0x1                   	// #1
    1cfc:	sub	x10, x10, #0x1
    1d00:	str	x13, [sp, #144]
    1d04:	lsl	x0, x1, x0
    1d08:	add	x10, x10, x0
    1d0c:	ldr	x1, [sp, #96]
    1d10:	neg	x0, x0
    1d14:	and	x10, x0, x10
    1d18:	str	x10, [sp, #160]
    1d1c:	ldr	x2, [x27, x28, lsl #3]
    1d20:	add	x14, x13, x10
    1d24:	ldr	x1, [x1, x28, lsl #3]
    1d28:	mov	x0, x14
    1d2c:	bl	0 <memcpy>
    1d30:	mov	x14, x0
    1d34:	ldp	x13, x1, [sp, #144]
    1d38:	ldr	x0, [x27, x28, lsl #3]
    1d3c:	ldr	x10, [sp, #160]
    1d40:	str	x14, [x1, x28, lsl #3]
    1d44:	add	x10, x10, x0
    1d48:	b	1cd8 <gomp_create_target_task+0x3a8>
    1d4c:	ldr	x7, [x0, #8]
    1d50:	b	19b0 <gomp_create_target_task+0x80>
    1d54:	mov	x2, x20
    1d58:	mov	x6, #0x0                   	// #0
    1d5c:	b	1a2c <gomp_create_target_task+0xfc>
    1d60:	ldr	x2, [sp, #112]
    1d64:	mov	x0, x24
    1d68:	mov	x1, x25
    1d6c:	bl	518 <gomp_task_handle_depend>
    1d70:	ldr	x0, [x24, #80]
    1d74:	cbz	x0, 1b7c <gomp_create_target_task+0x24c>
    1d78:	cbz	x23, 1d88 <gomp_create_target_task+0x458>
    1d7c:	ldr	x0, [x23, #56]
    1d80:	add	x0, x0, #0x1
    1d84:	str	x0, [x23, #56]
    1d88:	ldxr	w0, [x21]
    1d8c:	stlxr	w1, wzr, [x21]
    1d90:	cbnz	w1, 1d88 <gomp_create_target_task+0x458>
    1d94:	tbz	w0, #31, 1c84 <gomp_create_target_task+0x354>
    1d98:	mov	x0, x21
    1d9c:	mov	w22, #0x1                   	// #1
    1da0:	bl	0 <gomp_mutex_unlock_slow>
    1da4:	ldp	x19, x20, [sp, #16]
    1da8:	b	1c8c <gomp_create_target_task+0x35c>
    1dac:	mov	x14, #0xd0                  	// #208
    1db0:	mov	x20, #0x0                   	// #0
    1db4:	b	19bc <gomp_create_target_task+0x8c>
    1db8:	add	x0, x26, #0x80
    1dbc:	mov	w22, #0x1                   	// #1
    1dc0:	mov	w1, w22
    1dc4:	bl	0 <gomp_team_barrier_wake>
    1dc8:	mov	w0, w22
    1dcc:	ldp	x19, x20, [sp, #16]
    1dd0:	ldp	x21, x22, [sp, #32]
    1dd4:	ldp	x23, x24, [sp, #48]
    1dd8:	ldp	x25, x26, [sp, #64]
    1ddc:	ldp	x27, x28, [sp, #80]
    1de0:	ldp	x29, x30, [sp], #208
    1de4:	ret
    1de8:	stp	x20, x20, [x24, #112]
    1dec:	str	x20, [x25, #24]
    1df0:	b	1bd8 <gomp_create_target_task+0x2a8>
    1df4:	cbnz	x0, 2148 <gomp_create_target_task+0x818>
    1df8:	ldr	x0, [x25, #24]
    1dfc:	cbz	x0, 212c <gomp_create_target_task+0x7fc>
    1e00:	ldr	x1, [x0, #8]
    1e04:	stp	x0, x1, [x24, #112]
    1e08:	str	x20, [x0, #8]
    1e0c:	ldr	x0, [x24, #120]
    1e10:	str	x20, [x0]
    1e14:	cbz	x23, 1e40 <gomp_create_target_task+0x510>
    1e18:	ldr	x0, [x23, #8]
    1e1c:	add	x22, x24, #0x80
    1e20:	cbnz	x0, 21b8 <gomp_create_target_task+0x888>
    1e24:	ldr	x0, [x23, #24]
    1e28:	cbz	x0, 2100 <gomp_create_target_task+0x7d0>
    1e2c:	ldr	x1, [x0, #8]
    1e30:	stp	x0, x1, [x24, #128]
    1e34:	str	x22, [x0, #8]
    1e38:	ldr	x0, [x24, #136]
    1e3c:	str	x22, [x0]
    1e40:	ldr	w0, [x26, #1320]
    1e44:	mov	w1, #0x3                   	// #3
    1e48:	stp	xzr, xzr, [x24, #96]
    1e4c:	add	w0, w0, #0x1
    1e50:	str	w1, [x24, #200]
    1e54:	str	w0, [x26, #1320]
    1e58:	ldxr	w0, [x21]
    1e5c:	stlxr	w1, wzr, [x21]
    1e60:	cbnz	w1, 1e58 <gomp_create_target_task+0x528>
    1e64:	tbnz	w0, #31, 220c <gomp_create_target_task+0x8dc>
    1e68:	ldp	x2, x1, [sp, #120]
    1e6c:	ldr	x0, [x24, #192]
    1e70:	add	x23, x1, x2
    1e74:	str	x24, [x23, #80]
    1e78:	bl	0 <gomp_target_task_fn>
    1e7c:	mov	w0, #0x1                   	// #1
    1e80:	str	x25, [x23, #80]
    1e84:	ldaxr	w1, [x21]
    1e88:	cbnz	w1, 1e94 <gomp_create_target_task+0x564>
    1e8c:	stxr	w2, w0, [x21]
    1e90:	cbnz	w2, 1e84 <gomp_create_target_task+0x554>
    1e94:	cmp	w1, #0x0
    1e98:	b.ne	223c <gomp_create_target_task+0x90c>  // b.any
    1e9c:	ldr	w1, [x19, #44]
    1ea0:	mov	w0, #0x4                   	// #4
    1ea4:	str	w0, [x24, #200]
    1ea8:	cmp	w1, #0x5
    1eac:	b.eq	2138 <gomp_create_target_task+0x808>  // b.none
    1eb0:	str	w0, [x19, #44]
    1eb4:	ldxr	w0, [x21]
    1eb8:	stlxr	w1, wzr, [x21]
    1ebc:	cbz	w1, 1d94 <gomp_create_target_task+0x464>
    1ec0:	b	1eb4 <gomp_create_target_task+0x584>
    1ec4:	ldr	w0, [x26, #132]
    1ec8:	tbnz	w0, #2, 1ef0 <gomp_create_target_task+0x5c0>
    1ecc:	cbz	x23, 1b78 <gomp_create_target_task+0x248>
    1ed0:	ldrb	w0, [x23, #49]
    1ed4:	cbnz	w0, 1ef0 <gomp_create_target_task+0x5c0>
    1ed8:	ldrb	w0, [x23, #50]
    1edc:	cbz	w0, 1b78 <gomp_create_target_task+0x248>
    1ee0:	ldr	x0, [x23]
    1ee4:	cbz	x0, 1b78 <gomp_create_target_task+0x248>
    1ee8:	ldrb	w0, [x0, #49]
    1eec:	cbz	w0, 1b78 <gomp_create_target_task+0x248>
    1ef0:	ldxr	w0, [x21]
    1ef4:	stlxr	w1, wzr, [x21]
    1ef8:	cbnz	w1, 1ef0 <gomp_create_target_task+0x5c0>
    1efc:	tbnz	w0, #31, 2224 <gomp_create_target_task+0x8f4>
    1f00:	ldr	x0, [x24, #56]
    1f04:	cbnz	x0, 210c <gomp_create_target_task+0x7dc>
    1f08:	mov	x0, x24
    1f0c:	bl	0 <free>
    1f10:	ldp	x19, x20, [sp, #16]
    1f14:	b	1c8c <gomp_create_target_task+0x35c>
    1f18:	stp	x19, x19, [x24, #128]
    1f1c:	str	x19, [x23, #24]
    1f20:	b	1c0c <gomp_create_target_task+0x2dc>
    1f24:	mov	x0, x24
    1f28:	bl	8d0 <gomp_task_run_post_handle_depend_hash>
    1f2c:	ldxr	w0, [x21]
    1f30:	stlxr	w1, wzr, [x21]
    1f34:	cbnz	w1, 1f2c <gomp_create_target_task+0x5fc>
    1f38:	tbnz	w0, #31, 21ac <gomp_create_target_task+0x87c>
    1f3c:	ldr	x0, [x24, #56]
    1f40:	cbnz	x0, 21a4 <gomp_create_target_task+0x874>
    1f44:	mov	x0, x24
    1f48:	mov	w22, #0x0                   	// #0
    1f4c:	bl	0 <free>
    1f50:	mov	w0, w22
    1f54:	ldp	x19, x20, [sp, #16]
    1f58:	ldp	x21, x22, [sp, #32]
    1f5c:	ldp	x23, x24, [sp, #48]
    1f60:	ldp	x25, x26, [sp, #64]
    1f64:	ldp	x27, x28, [sp, #80]
    1f68:	ldp	x29, x30, [sp], #208
    1f6c:	ret
    1f70:	stp	x19, x19, [x24, #96]
    1f74:	str	x19, [x26, #1304]
    1f78:	b	1c34 <gomp_create_target_task+0x304>
    1f7c:	add	x22, x26, #0x508
    1f80:	add	x1, sp, #0xb8
    1f84:	mov	x0, x22
    1f88:	str	wzr, [sp, #184]
    1f8c:	bl	0 <prio_splay_tree_lookup>
    1f90:	cbnz	x0, 1fbc <gomp_create_target_task+0x68c>
    1f94:	mov	x0, #0x28                  	// #40
    1f98:	bl	0 <gomp_malloc>
    1f9c:	mov	x20, x0
    1fa0:	mov	x0, x22
    1fa4:	mov	x1, x20
    1fa8:	str	wzr, [x20]
    1fac:	stp	xzr, xzr, [x20, #8]
    1fb0:	stp	xzr, xzr, [x20, #24]
    1fb4:	bl	0 <prio_splay_tree_insert>
    1fb8:	mov	x0, x20
    1fbc:	ldr	x1, [x0, #8]
    1fc0:	cbz	x1, 2120 <gomp_create_target_task+0x7f0>
    1fc4:	ldr	x0, [x1, #8]
    1fc8:	stp	x1, x0, [x24, #96]
    1fcc:	str	x19, [x1, #8]
    1fd0:	ldr	x0, [x24, #104]
    1fd4:	str	x19, [x0]
    1fd8:	b	1c34 <gomp_create_target_task+0x304>
    1fdc:	add	x1, sp, #0xb8
    1fe0:	mov	x0, x22
    1fe4:	str	wzr, [sp, #184]
    1fe8:	bl	0 <prio_splay_tree_lookup>
    1fec:	cbnz	x0, 2018 <gomp_create_target_task+0x6e8>
    1ff0:	mov	x0, #0x28                  	// #40
    1ff4:	bl	0 <gomp_malloc>
    1ff8:	mov	x19, x0
    1ffc:	mov	x0, x22
    2000:	mov	x1, x19
    2004:	str	wzr, [x19]
    2008:	stp	xzr, xzr, [x19, #8]
    200c:	stp	xzr, xzr, [x19, #24]
    2010:	bl	0 <prio_splay_tree_insert>
    2014:	mov	x0, x19
    2018:	ldr	x1, [x0, #8]
    201c:	cbz	x1, 2114 <gomp_create_target_task+0x7e4>
    2020:	ldr	x2, [x1, #8]
    2024:	stp	x1, x2, [x24, #112]
    2028:	str	x20, [x0, #8]
    202c:	ldr	x0, [x24, #112]
    2030:	str	x20, [x0, #8]
    2034:	ldr	x0, [x24, #120]
    2038:	str	x20, [x0]
    203c:	b	1bd8 <gomp_create_target_task+0x2a8>
    2040:	ldr	w0, [x26, #132]
    2044:	tbnz	w0, #2, 1c88 <gomp_create_target_task+0x358>
    2048:	ldr	x25, [x10, #80]
    204c:	ldr	x23, [x25, #40]
    2050:	cbz	x23, 2074 <gomp_create_target_task+0x744>
    2054:	ldrb	w0, [x23, #49]
    2058:	cbnz	w0, 1c88 <gomp_create_target_task+0x358>
    205c:	ldrb	w0, [x23, #50]
    2060:	cbz	w0, 2074 <gomp_create_target_task+0x744>
    2064:	ldr	x0, [x23]
    2068:	cbz	x0, 2074 <gomp_create_target_task+0x744>
    206c:	ldrb	w0, [x0, #49]
    2070:	cbnz	w0, 1c88 <gomp_create_target_task+0x358>
    2074:	stp	x19, x20, [sp, #16]
    2078:	b	19a0 <gomp_create_target_task+0x70>
    207c:	add	x23, x23, #0x8
    2080:	add	x1, sp, #0xb8
    2084:	mov	x0, x23
    2088:	str	wzr, [sp, #184]
    208c:	bl	0 <prio_splay_tree_lookup>
    2090:	cbz	x0, 20c8 <gomp_create_target_task+0x798>
    2094:	ldr	x1, [x0, #8]
    2098:	cbz	x1, 20f4 <gomp_create_target_task+0x7c4>
    209c:	ldr	x2, [x1, #8]
    20a0:	stp	x1, x2, [x24, #128]
    20a4:	str	x19, [x0, #8]
    20a8:	ldr	x0, [x24, #128]
    20ac:	str	x19, [x0, #8]
    20b0:	ldr	x0, [x24, #136]
    20b4:	str	x19, [x0]
    20b8:	b	1c0c <gomp_create_target_task+0x2dc>
    20bc:	mov	x0, x21
    20c0:	bl	0 <gomp_mutex_unlock_slow>
    20c4:	b	1c7c <gomp_create_target_task+0x34c>
    20c8:	mov	x0, #0x28                  	// #40
    20cc:	bl	0 <gomp_malloc>
    20d0:	mov	x20, x0
    20d4:	mov	x0, x23
    20d8:	mov	x1, x20
    20dc:	str	wzr, [x20]
    20e0:	stp	xzr, xzr, [x20, #8]
    20e4:	stp	xzr, xzr, [x20, #24]
    20e8:	bl	0 <prio_splay_tree_insert>
    20ec:	mov	x0, x20
    20f0:	b	2094 <gomp_create_target_task+0x764>
    20f4:	stp	x19, x19, [x24, #128]
    20f8:	str	x19, [x0, #8]
    20fc:	b	1c0c <gomp_create_target_task+0x2dc>
    2100:	stp	x22, x22, [x24, #128]
    2104:	str	x22, [x23, #24]
    2108:	b	1e40 <gomp_create_target_task+0x510>
    210c:	bl	0 <free>
    2110:	b	1f08 <gomp_create_target_task+0x5d8>
    2114:	stp	x20, x20, [x24, #112]
    2118:	str	x20, [x0, #8]
    211c:	b	1bd8 <gomp_create_target_task+0x2a8>
    2120:	stp	x19, x19, [x24, #96]
    2124:	str	x19, [x0, #8]
    2128:	b	1c34 <gomp_create_target_task+0x304>
    212c:	stp	x20, x20, [x24, #112]
    2130:	str	x20, [x25, #24]
    2134:	b	1e14 <gomp_create_target_task+0x4e4>
    2138:	mov	x1, x24
    213c:	mov	x0, x26
    2140:	bl	1420 <gomp_target_task_completion>
    2144:	b	1eb4 <gomp_create_target_task+0x584>
    2148:	add	x1, sp, #0xb8
    214c:	mov	x0, x22
    2150:	str	wzr, [sp, #184]
    2154:	bl	0 <prio_splay_tree_lookup>
    2158:	cbnz	x0, 2184 <gomp_create_target_task+0x854>
    215c:	mov	x0, #0x28                  	// #40
    2160:	bl	0 <gomp_malloc>
    2164:	mov	x1, x0
    2168:	mov	x0, x22
    216c:	mov	x22, x1
    2170:	str	wzr, [x1]
    2174:	stp	xzr, xzr, [x1, #8]
    2178:	stp	xzr, xzr, [x1, #24]
    217c:	bl	0 <prio_splay_tree_insert>
    2180:	mov	x0, x22
    2184:	ldr	x1, [x0, #8]
    2188:	cbz	x1, 2218 <gomp_create_target_task+0x8e8>
    218c:	ldr	x0, [x1, #8]
    2190:	stp	x1, x0, [x24, #112]
    2194:	str	x20, [x1, #8]
    2198:	ldr	x0, [x24, #120]
    219c:	str	x20, [x0]
    21a0:	b	1e14 <gomp_create_target_task+0x4e4>
    21a4:	bl	0 <free>
    21a8:	b	1f44 <gomp_create_target_task+0x614>
    21ac:	mov	x0, x21
    21b0:	bl	0 <gomp_mutex_unlock_slow>
    21b4:	b	1f3c <gomp_create_target_task+0x60c>
    21b8:	add	x23, x23, #0x8
    21bc:	add	x1, sp, #0xb8
    21c0:	mov	x0, x23
    21c4:	str	wzr, [sp, #184]
    21c8:	bl	0 <prio_splay_tree_lookup>
    21cc:	mov	x20, x0
    21d0:	cbnz	x0, 21f8 <gomp_create_target_task+0x8c8>
    21d4:	mov	x0, #0x28                  	// #40
    21d8:	bl	0 <gomp_malloc>
    21dc:	mov	x20, x0
    21e0:	mov	x0, x23
    21e4:	mov	x1, x20
    21e8:	str	wzr, [x20]
    21ec:	stp	xzr, xzr, [x20, #8]
    21f0:	stp	xzr, xzr, [x20, #24]
    21f4:	bl	0 <prio_splay_tree_insert>
    21f8:	ldr	x0, [x20, #8]
    21fc:	cbnz	x0, 1e2c <gomp_create_target_task+0x4fc>
    2200:	stp	x22, x22, [x24, #128]
    2204:	str	x22, [x20, #8]
    2208:	b	1e40 <gomp_create_target_task+0x510>
    220c:	mov	x0, x21
    2210:	bl	0 <gomp_mutex_unlock_slow>
    2214:	b	1e68 <gomp_create_target_task+0x538>
    2218:	stp	x20, x20, [x24, #112]
    221c:	str	x20, [x0, #8]
    2220:	b	1e14 <gomp_create_target_task+0x4e4>
    2224:	mov	x0, x21
    2228:	bl	0 <gomp_mutex_unlock_slow>
    222c:	b	1f00 <gomp_create_target_task+0x5d0>
    2230:	mov	x0, x21
    2234:	bl	0 <gomp_mutex_lock_slow>
    2238:	b	1b6c <gomp_create_target_task+0x23c>
    223c:	mov	x0, x21
    2240:	bl	0 <gomp_mutex_lock_slow>
    2244:	b	1e9c <gomp_create_target_task+0x56c>

0000000000002248 <gomp_barrier_handle_tasks>:
    2248:	stp	x29, x30, [sp, #-144]!
    224c:	mov	w2, #0x1                   	// #1
    2250:	mov	x29, sp
    2254:	stp	x23, x24, [sp, #48]
    2258:	mrs	x24, tpidr_el0
    225c:	adrp	x23, 0 <gomp_tls_data>
    2260:	ldr	x23, [x23]
    2264:	stp	x19, x20, [sp, #16]
    2268:	add	x1, x24, x23
    226c:	stp	x27, x28, [sp, #80]
    2270:	ldr	x20, [x1, #16]
    2274:	stp	x21, x22, [sp, #32]
    2278:	ldr	x27, [x1, #80]
    227c:	add	x22, x20, #0x500
    2280:	stp	x25, x26, [sp, #64]
    2284:	mov	w25, w0
    2288:	ldaxr	w1, [x22]
    228c:	cbnz	w1, 2298 <gomp_barrier_handle_tasks+0x50>
    2290:	stxr	w0, w2, [x22]
    2294:	cbnz	w0, 2288 <gomp_barrier_handle_tasks+0x40>
    2298:	cmp	w1, #0x0
    229c:	b.ne	2810 <gomp_barrier_handle_tasks+0x5c8>  // b.any
    22a0:	tbz	w25, #0, 22b8 <gomp_barrier_handle_tasks+0x70>
    22a4:	ldr	w0, [x20, #1320]
    22a8:	cbz	w0, 2628 <gomp_barrier_handle_tasks+0x3e0>
    22ac:	ldr	w0, [x20, #132]
    22b0:	orr	w0, w0, #0x2
    22b4:	str	w0, [x20, #132]
    22b8:	and	w25, w25, #0xfffffff8
    22bc:	add	x26, x20, #0x508
    22c0:	add	w0, w25, #0x8
    22c4:	str	w0, [sp, #108]
    22c8:	add	x0, x20, #0x80
    22cc:	str	x0, [sp, #96]
    22d0:	ldr	x0, [x20, #1288]
    22d4:	mov	w21, #0x0                   	// #0
    22d8:	mov	x25, #0x0                   	// #0
    22dc:	cbnz	x0, 24c0 <gomp_barrier_handle_tasks+0x278>
    22e0:	ldr	x19, [x26, #16]
    22e4:	cbz	x19, 2320 <gomp_barrier_handle_tasks+0xd8>
    22e8:	sub	x19, x19, #0x60
    22ec:	mov	w0, #0x1                   	// #1
    22f0:	strb	w0, [sp, #143]
    22f4:	ldr	x1, [x19]
    22f8:	mov	x2, x20
    22fc:	mov	x0, x19
    2300:	bl	af0 <gomp_task_run_pre>
    2304:	ands	w28, w0, #0xff
    2308:	b.ne	2508 <gomp_barrier_handle_tasks+0x2c0>  // b.any
    230c:	ldr	w0, [x20, #1328]
    2310:	mov	w1, #0x1                   	// #1
    2314:	add	w0, w0, #0x1
    2318:	str	w0, [x20, #1328]
    231c:	strb	w1, [x19, #204]
    2320:	ldxr	w0, [x22]
    2324:	stlxr	w1, wzr, [x22]
    2328:	cbnz	w1, 2320 <gomp_barrier_handle_tasks+0xd8>
    232c:	tbnz	w0, #31, 2530 <gomp_barrier_handle_tasks+0x2e8>
    2330:	cbnz	w21, 2520 <gomp_barrier_handle_tasks+0x2d8>
    2334:	cbz	x25, 2348 <gomp_barrier_handle_tasks+0x100>
    2338:	ldr	x0, [x25, #56]
    233c:	cbnz	x0, 2760 <gomp_barrier_handle_tasks+0x518>
    2340:	mov	x0, x25
    2344:	bl	0 <free>
    2348:	cbz	x19, 2650 <gomp_barrier_handle_tasks+0x408>
    234c:	ldp	x1, x0, [x19, #184]
    2350:	add	x21, x24, x23
    2354:	str	x19, [x21, #80]
    2358:	cbz	x1, 2678 <gomp_barrier_handle_tasks+0x430>
    235c:	blr	x1
    2360:	add	x0, x24, x23
    2364:	mov	w2, #0x1                   	// #1
    2368:	str	x27, [x0, #80]
    236c:	ldaxr	w1, [x22]
    2370:	cbnz	w1, 237c <gomp_barrier_handle_tasks+0x134>
    2374:	stxr	w0, w2, [x22]
    2378:	cbnz	w0, 236c <gomp_barrier_handle_tasks+0x124>
    237c:	cmp	w1, #0x0
    2380:	b.ne	2830 <gomp_barrier_handle_tasks+0x5e8>  // b.any
    2384:	mov	w28, #0x0                   	// #0
    2388:	mov	w21, #0x0                   	// #0
    238c:	ldr	x25, [x19, #72]
    2390:	ldr	x4, [x19]
    2394:	cbz	x25, 23c0 <gomp_barrier_handle_tasks+0x178>
    2398:	cbz	x4, 25dc <gomp_barrier_handle_tasks+0x394>
    239c:	mov	x0, x19
    23a0:	bl	8d0 <gomp_task_run_post_handle_depend_hash>
    23a4:	ldr	x0, [x19, #48]
    23a8:	cbz	x0, 266c <gomp_barrier_handle_tasks+0x424>
    23ac:	mov	x1, x20
    23b0:	mov	x0, x19
    23b4:	bl	e88 <gomp_task_run_post_handle_dependers>
    23b8:	mov	x25, x0
    23bc:	ldr	x4, [x19]
    23c0:	cbz	x4, 23f4 <gomp_barrier_handle_tasks+0x1ac>
    23c4:	ldrb	w0, [x19, #207]
    23c8:	cbnz	w0, 26dc <gomp_barrier_handle_tasks+0x494>
    23cc:	ldr	x0, [x4, #8]
    23d0:	add	x2, x19, #0x70
    23d4:	cbnz	x0, 273c <gomp_barrier_handle_tasks+0x4f4>
    23d8:	ldp	x0, x1, [x19, #112]
    23dc:	ldr	x7, [x4, #24]
    23e0:	cmp	x2, x7
    23e4:	str	x0, [x1]
    23e8:	str	x1, [x0, #8]
    23ec:	b.eq	2540 <gomp_barrier_handle_tasks+0x2f8>  // b.none
    23f0:	stp	xzr, xzr, [x19, #112]
    23f4:	ldr	x1, [x19, #8]
    23f8:	cbnz	x1, 25f0 <gomp_barrier_handle_tasks+0x3a8>
    23fc:	ldr	x0, [x19, #24]
    2400:	mov	x1, x0
    2404:	cbz	x0, 2418 <gomp_barrier_handle_tasks+0x1d0>
    2408:	stur	xzr, [x1, #-112]
    240c:	ldr	x1, [x1]
    2410:	cmp	x0, x1
    2414:	b.ne	2408 <gomp_barrier_handle_tasks+0x1c0>  // b.any
    2418:	ldr	x4, [x19, #40]
    241c:	cbz	x4, 2470 <gomp_barrier_handle_tasks+0x228>
    2420:	ldr	x0, [x4, #8]
    2424:	add	x2, x19, #0x80
    2428:	cbnz	x0, 2768 <gomp_barrier_handle_tasks+0x520>
    242c:	ldp	x0, x1, [x19, #128]
    2430:	add	x6, x4, #0x10
    2434:	ldr	x8, [x6, #8]
    2438:	mov	w7, #0x0                   	// #0
    243c:	cmp	x2, x8
    2440:	str	x0, [x1]
    2444:	str	x1, [x0, #8]
    2448:	b.eq	2600 <gomp_barrier_handle_tasks+0x3b8>  // b.none
    244c:	ldr	x0, [x4, #56]
    2450:	stp	xzr, xzr, [x19, #128]
    2454:	cmp	x0, #0x1
    2458:	b.ls	261c <gomp_barrier_handle_tasks+0x3d4>  // b.plast
    245c:	sub	x0, x0, #0x1
    2460:	str	x0, [x4, #56]
    2464:	cbz	w7, 2470 <gomp_barrier_handle_tasks+0x228>
    2468:	ldrb	w0, [x4, #48]
    246c:	cbnz	w0, 25a0 <gomp_barrier_handle_tasks+0x358>
    2470:	cbnz	w28, 2480 <gomp_barrier_handle_tasks+0x238>
    2474:	ldr	w0, [x20, #1328]
    2478:	sub	w0, w0, #0x1
    247c:	str	w0, [x20, #1328]
    2480:	cmp	x25, #0x1
    2484:	b.ls	249c <gomp_barrier_handle_tasks+0x254>  // b.plast
    2488:	ldr	w21, [x20]
    248c:	ldr	w0, [x20, #1328]
    2490:	sub	w21, w21, w0
    2494:	cmp	x25, w21, sxtw
    2498:	csel	w21, w25, w21, cc  // cc = lo, ul, last
    249c:	ldr	w0, [x20, #1320]
    24a0:	sub	w0, w0, #0x1
    24a4:	str	w0, [x20, #1320]
    24a8:	cbnz	w0, 24b4 <gomp_barrier_handle_tasks+0x26c>
    24ac:	ldr	w0, [x20, #132]
    24b0:	tbnz	w0, #1, 2550 <gomp_barrier_handle_tasks+0x308>
    24b4:	mov	x25, x19
    24b8:	ldr	x0, [x20, #1288]
    24bc:	cbz	x0, 22e0 <gomp_barrier_handle_tasks+0x98>
    24c0:	add	x4, sp, #0x8f
    24c4:	mov	x1, x26
    24c8:	mov	x3, #0x0                   	// #0
    24cc:	mov	w2, #0x3e7                 	// #999
    24d0:	mov	w0, #0x0                   	// #0
    24d4:	bl	0 <priority_tree_next_task>
    24d8:	mov	x19, x0
    24dc:	cbnz	x0, 22f4 <gomp_barrier_handle_tasks+0xac>
    24e0:	ldr	x0, [x26]
    24e4:	mov	x2, x20
    24e8:	ldr	x19, [x0, #8]
    24ec:	sub	x19, x19, #0x60
    24f0:	ldr	x1, [x19]
    24f4:	mov	x0, x19
    24f8:	bl	af0 <gomp_task_run_pre>
    24fc:	ands	w28, w0, #0xff
    2500:	b.eq	230c <gomp_barrier_handle_tasks+0xc4>  // b.none
    2504:	nop
    2508:	cbz	x25, 238c <gomp_barrier_handle_tasks+0x144>
    250c:	ldr	x0, [x25, #56]
    2510:	cbnz	x0, 281c <gomp_barrier_handle_tasks+0x5d4>
    2514:	mov	x0, x25
    2518:	bl	0 <free>
    251c:	b	238c <gomp_barrier_handle_tasks+0x144>
    2520:	ldr	x0, [sp, #96]
    2524:	mov	w1, w21
    2528:	bl	0 <gomp_team_barrier_wake>
    252c:	b	2334 <gomp_barrier_handle_tasks+0xec>
    2530:	mov	x0, x22
    2534:	bl	0 <gomp_mutex_unlock_slow>
    2538:	cbz	w21, 2334 <gomp_barrier_handle_tasks+0xec>
    253c:	b	2520 <gomp_barrier_handle_tasks+0x2d8>
    2540:	cmp	x2, x0
    2544:	b.eq	278c <gomp_barrier_handle_tasks+0x544>  // b.none
    2548:	str	x0, [x4, #24]
    254c:	b	23f0 <gomp_barrier_handle_tasks+0x1a8>
    2550:	ldr	w0, [sp, #108]
    2554:	str	w0, [x20, #132]
    2558:	ldxr	w0, [x22]
    255c:	stlxr	w1, wzr, [x22]
    2560:	cbnz	w1, 2558 <gomp_barrier_handle_tasks+0x310>
    2564:	tbnz	w0, #31, 27e8 <gomp_barrier_handle_tasks+0x5a0>
    2568:	ldr	x0, [sp, #96]
    256c:	mov	w1, #0x0                   	// #0
    2570:	bl	0 <gomp_team_barrier_wake>
    2574:	mov	w0, #0x1                   	// #1
    2578:	ldaxr	w1, [x22]
    257c:	cbnz	w1, 2588 <gomp_barrier_handle_tasks+0x340>
    2580:	stxr	w2, w0, [x22]
    2584:	cbnz	w2, 2578 <gomp_barrier_handle_tasks+0x330>
    2588:	cmp	w1, #0x0
    258c:	b.eq	24b4 <gomp_barrier_handle_tasks+0x26c>  // b.none
    2590:	mov	x0, x22
    2594:	mov	x25, x19
    2598:	bl	0 <gomp_mutex_lock_slow>
    259c:	b	24b8 <gomp_barrier_handle_tasks+0x270>
    25a0:	ldr	w1, [x4, #52]
    25a4:	add	x0, x4, #0x34
    25a8:	strb	wzr, [x4, #48]
    25ac:	add	w2, w1, #0x1
    25b0:	and	w2, w2, #0x7fffffff
    25b4:	ldxr	w4, [x0]
    25b8:	cmp	w4, w1
    25bc:	b.ne	25c8 <gomp_barrier_handle_tasks+0x380>  // b.any
    25c0:	stlxr	w3, w2, [x0]
    25c4:	cmp	w3, #0x0
    25c8:	mov	w1, w4
    25cc:	b.ne	25ac <gomp_barrier_handle_tasks+0x364>  // b.any
    25d0:	tbz	w4, #31, 2470 <gomp_barrier_handle_tasks+0x228>
    25d4:	bl	0 <gomp_sem_post_slow>
    25d8:	b	2470 <gomp_barrier_handle_tasks+0x228>
    25dc:	ldr	x0, [x19, #48]
    25e0:	mov	x25, #0x0                   	// #0
    25e4:	cbnz	x0, 23ac <gomp_barrier_handle_tasks+0x164>
    25e8:	ldr	x1, [x19, #8]
    25ec:	cbz	x1, 23fc <gomp_barrier_handle_tasks+0x1b4>
    25f0:	add	x0, x19, #0x8
    25f4:	bl	e0 <gomp_clear_parent_in_tree>
    25f8:	str	xzr, [x19, #8]
    25fc:	b	2418 <gomp_barrier_handle_tasks+0x1d0>
    2600:	cmp	x2, x0
    2604:	b.eq	27dc <gomp_barrier_handle_tasks+0x594>  // b.none
    2608:	str	x0, [x6, #8]
    260c:	ldr	x0, [x4, #56]
    2610:	stp	xzr, xzr, [x19, #128]
    2614:	cmp	x0, #0x1
    2618:	b.hi	245c <gomp_barrier_handle_tasks+0x214>  // b.pmore
    261c:	add	x0, x4, #0x38
    2620:	stlr	xzr, [x0]
    2624:	b	2464 <gomp_barrier_handle_tasks+0x21c>
    2628:	and	w0, w25, #0xfffffff8
    262c:	add	w0, w0, #0x8
    2630:	str	w0, [x20, #132]
    2634:	ldxr	w0, [x22]
    2638:	stlxr	w1, wzr, [x22]
    263c:	cbnz	w1, 2634 <gomp_barrier_handle_tasks+0x3ec>
    2640:	tbnz	w0, #31, 2824 <gomp_barrier_handle_tasks+0x5dc>
    2644:	add	x0, x20, #0x80
    2648:	mov	w1, #0x0                   	// #0
    264c:	bl	0 <gomp_team_barrier_wake>
    2650:	ldp	x19, x20, [sp, #16]
    2654:	ldp	x21, x22, [sp, #32]
    2658:	ldp	x23, x24, [sp, #48]
    265c:	ldp	x25, x26, [sp, #64]
    2660:	ldp	x27, x28, [sp, #80]
    2664:	ldp	x29, x30, [sp], #144
    2668:	ret
    266c:	mov	x25, #0x0                   	// #0
    2670:	ldr	x4, [x19]
    2674:	b	23c0 <gomp_barrier_handle_tasks+0x178>
    2678:	bl	0 <gomp_target_task_fn>
    267c:	tst	w0, #0xff
    2680:	b.eq	2360 <gomp_barrier_handle_tasks+0x118>  // b.none
    2684:	mov	w0, #0x1                   	// #1
    2688:	str	x27, [x21, #80]
    268c:	ldaxr	w1, [x22]
    2690:	cbnz	w1, 269c <gomp_barrier_handle_tasks+0x454>
    2694:	stxr	w2, w0, [x22]
    2698:	cbnz	w2, 268c <gomp_barrier_handle_tasks+0x444>
    269c:	cmp	w1, #0x0
    26a0:	b.ne	2844 <gomp_barrier_handle_tasks+0x5fc>  // b.any
    26a4:	ldr	x1, [x19, #192]
    26a8:	mov	w2, #0x4                   	// #4
    26ac:	ldr	w0, [x20, #1328]
    26b0:	str	w2, [x19, #200]
    26b4:	sub	w0, w0, #0x1
    26b8:	str	w0, [x20, #1328]
    26bc:	ldr	w0, [x1, #44]
    26c0:	cmp	w0, #0x5
    26c4:	b.eq	27f4 <gomp_barrier_handle_tasks+0x5ac>  // b.none
    26c8:	mov	x19, #0x0                   	// #0
    26cc:	mov	w21, #0x0                   	// #0
    26d0:	mov	x25, x19
    26d4:	str	w2, [x1, #44]
    26d8:	b	24b8 <gomp_barrier_handle_tasks+0x270>
    26dc:	ldr	x1, [x4, #64]
    26e0:	ldr	x0, [x1, #8]
    26e4:	sub	x0, x0, #0x1
    26e8:	str	x0, [x1, #8]
    26ec:	cbnz	x0, 23cc <gomp_barrier_handle_tasks+0x184>
    26f0:	ldrb	w0, [x1, #1]
    26f4:	cbz	w0, 23cc <gomp_barrier_handle_tasks+0x184>
    26f8:	ldr	w2, [x1, #16]
    26fc:	add	x0, x1, #0x10
    2700:	strb	wzr, [x1, #1]
    2704:	add	w1, w2, #0x1
    2708:	and	w1, w1, #0x7fffffff
    270c:	ldxr	w6, [x0]
    2710:	cmp	w6, w2
    2714:	b.ne	2720 <gomp_barrier_handle_tasks+0x4d8>  // b.any
    2718:	stlxr	w3, w1, [x0]
    271c:	cmp	w3, #0x0
    2720:	mov	w2, w6
    2724:	b.ne	2704 <gomp_barrier_handle_tasks+0x4bc>  // b.any
    2728:	tbz	w6, #31, 23cc <gomp_barrier_handle_tasks+0x184>
    272c:	str	x4, [sp, #112]
    2730:	bl	0 <gomp_sem_post_slow>
    2734:	ldr	x4, [sp, #112]
    2738:	b	23cc <gomp_barrier_handle_tasks+0x184>
    273c:	add	x1, x4, #0x8
    2740:	mov	w0, #0x1                   	// #1
    2744:	stp	x1, x4, [sp, #112]
    2748:	bl	0 <priority_tree_remove>
    274c:	ldp	x1, x4, [sp, #112]
    2750:	ldr	x0, [x4, #8]
    2754:	cbnz	x0, 23f0 <gomp_barrier_handle_tasks+0x1a8>
    2758:	stlr	xzr, [x1]
    275c:	b	2794 <gomp_barrier_handle_tasks+0x54c>
    2760:	bl	0 <free>
    2764:	b	2340 <gomp_barrier_handle_tasks+0xf8>
    2768:	add	x1, x4, #0x8
    276c:	mov	w0, #0x2                   	// #2
    2770:	str	x4, [sp, #112]
    2774:	bl	0 <priority_tree_remove>
    2778:	ldr	x4, [sp, #112]
    277c:	ldr	x0, [x4, #8]
    2780:	cmp	x0, #0x0
    2784:	cset	w7, eq  // eq = none
    2788:	b	244c <gomp_barrier_handle_tasks+0x204>
    278c:	add	x0, x4, #0x18
    2790:	stlr	xzr, [x0]
    2794:	ldr	x0, [x4, #64]
    2798:	cbz	x0, 23f0 <gomp_barrier_handle_tasks+0x1a8>
    279c:	ldrb	w1, [x0]
    27a0:	cbz	w1, 23f0 <gomp_barrier_handle_tasks+0x1a8>
    27a4:	ldr	w1, [x0, #16]
    27a8:	strb	wzr, [x0], #16
    27ac:	add	w2, w1, #0x1
    27b0:	and	w2, w2, #0x7fffffff
    27b4:	ldxr	w4, [x0]
    27b8:	cmp	w4, w1
    27bc:	b.ne	27c8 <gomp_barrier_handle_tasks+0x580>  // b.any
    27c0:	stlxr	w3, w2, [x0]
    27c4:	cmp	w3, #0x0
    27c8:	mov	w1, w4
    27cc:	b.ne	27ac <gomp_barrier_handle_tasks+0x564>  // b.any
    27d0:	tbz	w4, #31, 23f0 <gomp_barrier_handle_tasks+0x1a8>
    27d4:	bl	0 <gomp_sem_post_slow>
    27d8:	b	23f0 <gomp_barrier_handle_tasks+0x1a8>
    27dc:	mov	w7, #0x1                   	// #1
    27e0:	str	xzr, [x6, #8]
    27e4:	b	244c <gomp_barrier_handle_tasks+0x204>
    27e8:	mov	x0, x22
    27ec:	bl	0 <gomp_mutex_unlock_slow>
    27f0:	b	2568 <gomp_barrier_handle_tasks+0x320>
    27f4:	mov	x1, x19
    27f8:	mov	x0, x20
    27fc:	mov	x19, #0x0                   	// #0
    2800:	mov	w21, #0x0                   	// #0
    2804:	mov	x25, x19
    2808:	bl	1420 <gomp_target_task_completion>
    280c:	b	24b8 <gomp_barrier_handle_tasks+0x270>
    2810:	mov	x0, x22
    2814:	bl	0 <gomp_mutex_lock_slow>
    2818:	b	22a0 <gomp_barrier_handle_tasks+0x58>
    281c:	bl	0 <free>
    2820:	b	2514 <gomp_barrier_handle_tasks+0x2cc>
    2824:	mov	x0, x22
    2828:	bl	0 <gomp_mutex_unlock_slow>
    282c:	b	2644 <gomp_barrier_handle_tasks+0x3fc>
    2830:	mov	x0, x22
    2834:	mov	w28, #0x0                   	// #0
    2838:	mov	w21, #0x0                   	// #0
    283c:	bl	0 <gomp_mutex_lock_slow>
    2840:	b	238c <gomp_barrier_handle_tasks+0x144>
    2844:	mov	x0, x22
    2848:	bl	0 <gomp_mutex_lock_slow>
    284c:	b	26a4 <gomp_barrier_handle_tasks+0x45c>

0000000000002850 <GOMP_taskwait>:
    2850:	stp	x29, x30, [sp, #-144]!
    2854:	mov	x29, sp
    2858:	stp	x23, x24, [sp, #48]
    285c:	mrs	x23, tpidr_el0
    2860:	adrp	x24, 0 <gomp_tls_data>
    2864:	ldr	x24, [x24]
    2868:	stp	x27, x28, [sp, #80]
    286c:	add	x0, x23, x24
    2870:	ldr	x28, [x0, #80]
    2874:	cbz	x28, 28ac <GOMP_taskwait+0x5c>
    2878:	ldr	x1, [x28, #8]
    287c:	stp	x21, x22, [sp, #32]
    2880:	stp	x25, x26, [sp, #64]
    2884:	add	x25, x28, #0x8
    2888:	ldr	x22, [x0, #16]
    288c:	cbnz	x1, 2d2c <GOMP_taskwait+0x4dc>
    2890:	add	x0, x28, #0x18
    2894:	ldar	x0, [x0]
    2898:	cmp	x0, #0x0
    289c:	cset	w0, eq  // eq = none
    28a0:	cbz	w0, 28bc <GOMP_taskwait+0x6c>
    28a4:	ldp	x21, x22, [sp, #32]
    28a8:	ldp	x25, x26, [sp, #64]
    28ac:	ldp	x23, x24, [sp, #48]
    28b0:	ldp	x27, x28, [sp, #80]
    28b4:	ldp	x29, x30, [sp], #144
    28b8:	ret
    28bc:	stp	x19, x20, [sp, #16]
    28c0:	add	x20, x22, #0x500
    28c4:	mov	w0, #0x1                   	// #1
    28c8:	strb	wzr, [sp, #119]
    28cc:	stp	xzr, xzr, [sp, #120]
    28d0:	str	xzr, [sp, #136]
    28d4:	ldaxr	w1, [x20]
    28d8:	cbnz	w1, 28e4 <GOMP_taskwait+0x94>
    28dc:	stxr	w2, w0, [x20]
    28e0:	cbnz	w2, 28d4 <GOMP_taskwait+0x84>
    28e4:	cmp	w1, #0x0
    28e8:	b.ne	2dc8 <GOMP_taskwait+0x578>  // b.any
    28ec:	add	x26, sp, #0x78
    28f0:	mov	w27, #0x0                   	// #0
    28f4:	add	x0, x26, #0x10
    28f8:	str	x0, [sp, #104]
    28fc:	ldr	x0, [x28, #8]
    2900:	mov	x21, #0x0                   	// #0
    2904:	cbnz	x0, 2a98 <GOMP_taskwait+0x248>
    2908:	ldr	x19, [x25, #16]
    290c:	cbz	x19, 2bf4 <GOMP_taskwait+0x3a4>
    2910:	sub	x19, x19, #0x70
    2914:	mov	w0, #0x1                   	// #1
    2918:	strb	w0, [sp, #119]
    291c:	ldr	w0, [x19, #200]
    2920:	cmp	w0, #0x2
    2924:	b.eq	2b3c <GOMP_taskwait+0x2ec>  // b.none
    2928:	ldr	x0, [x28, #64]
    292c:	cbz	x0, 2b2c <GOMP_taskwait+0x2dc>
    2930:	mov	w0, #0x1                   	// #1
    2934:	mov	x19, #0x0                   	// #0
    2938:	strb	w0, [sp, #120]
    293c:	ldxr	w0, [x20]
    2940:	stlxr	w1, wzr, [x20]
    2944:	cbnz	w1, 293c <GOMP_taskwait+0xec>
    2948:	tbnz	w0, #31, 2c38 <GOMP_taskwait+0x3e8>
    294c:	cbnz	w27, 2ac8 <GOMP_taskwait+0x278>
    2950:	cbz	x21, 2964 <GOMP_taskwait+0x114>
    2954:	ldr	x0, [x21, #56]
    2958:	cbnz	x0, 2d00 <GOMP_taskwait+0x4b0>
    295c:	mov	x0, x21
    2960:	bl	0 <free>
    2964:	cbz	x19, 2b6c <GOMP_taskwait+0x31c>
    2968:	ldp	x1, x0, [x19, #184]
    296c:	add	x21, x23, x24
    2970:	str	x19, [x21, #80]
    2974:	cbz	x1, 2c64 <GOMP_taskwait+0x414>
    2978:	blr	x1
    297c:	add	x0, x23, x24
    2980:	mov	w2, #0x1                   	// #1
    2984:	str	x28, [x0, #80]
    2988:	ldaxr	w1, [x20]
    298c:	cbnz	w1, 2998 <GOMP_taskwait+0x148>
    2990:	stxr	w0, w2, [x20]
    2994:	cbnz	w0, 2988 <GOMP_taskwait+0x138>
    2998:	cmp	w1, #0x0
    299c:	mov	w27, #0x0                   	// #0
    29a0:	b.ne	2dbc <GOMP_taskwait+0x56c>  // b.any
    29a4:	ldr	x0, [x19, #72]
    29a8:	cbz	x0, 2ad8 <GOMP_taskwait+0x288>
    29ac:	ldr	x0, [x19]
    29b0:	cbz	x0, 29bc <GOMP_taskwait+0x16c>
    29b4:	mov	x0, x19
    29b8:	bl	8d0 <gomp_task_run_post_handle_depend_hash>
    29bc:	ldr	x0, [x19, #48]
    29c0:	cbz	x0, 2ad8 <GOMP_taskwait+0x288>
    29c4:	mov	x1, x22
    29c8:	mov	x0, x19
    29cc:	bl	e88 <gomp_task_run_post_handle_dependers>
    29d0:	mov	x3, x0
    29d4:	ldrb	w0, [sp, #119]
    29d8:	cbnz	w0, 2ae4 <GOMP_taskwait+0x294>
    29dc:	ldr	x1, [x19, #8]
    29e0:	cbnz	x1, 2b14 <GOMP_taskwait+0x2c4>
    29e4:	ldr	x2, [x19, #24]
    29e8:	mov	x1, x2
    29ec:	cbz	x2, 2a00 <GOMP_taskwait+0x1b0>
    29f0:	stur	xzr, [x1, #-112]
    29f4:	ldr	x1, [x1]
    29f8:	cmp	x2, x1
    29fc:	b.ne	29f0 <GOMP_taskwait+0x1a0>  // b.any
    2a00:	ldr	x21, [x19, #40]
    2a04:	cbz	x21, 2a58 <GOMP_taskwait+0x208>
    2a08:	ldr	x0, [x21, #8]
    2a0c:	add	x2, x19, #0x80
    2a10:	cbnz	x0, 2d08 <GOMP_taskwait+0x4b8>
    2a14:	ldp	x0, x1, [x19, #128]
    2a18:	add	x4, x21, #0x10
    2a1c:	ldr	x7, [x4, #8]
    2a20:	mov	w6, #0x0                   	// #0
    2a24:	cmp	x2, x7
    2a28:	str	x0, [x1]
    2a2c:	str	x1, [x0, #8]
    2a30:	b.eq	2bcc <GOMP_taskwait+0x37c>  // b.none
    2a34:	ldr	x0, [x21, #56]
    2a38:	stp	xzr, xzr, [x19, #128]
    2a3c:	cmp	x0, #0x1
    2a40:	b.ls	2be8 <GOMP_taskwait+0x398>  // b.plast
    2a44:	sub	x0, x0, #0x1
    2a48:	str	x0, [x21, #56]
    2a4c:	cbz	w6, 2a58 <GOMP_taskwait+0x208>
    2a50:	ldrb	w0, [x21, #48]
    2a54:	cbnz	w0, 2cbc <GOMP_taskwait+0x46c>
    2a58:	ldr	w0, [x22, #1320]
    2a5c:	cmp	x3, #0x1
    2a60:	sub	w0, w0, #0x1
    2a64:	str	w0, [x22, #1320]
    2a68:	b.ls	2a8c <GOMP_taskwait+0x23c>  // b.plast
    2a6c:	ldrb	w0, [x28, #204]
    2a70:	ldr	w5, [x22]
    2a74:	ldr	w1, [x22, #1328]
    2a78:	eor	w0, w0, #0x1
    2a7c:	sub	w5, w5, w1
    2a80:	sub	w27, w5, w0
    2a84:	cmp	x3, w27, sxtw
    2a88:	csel	w27, w3, w27, cc  // cc = lo, ul, last
    2a8c:	mov	x21, x19
    2a90:	ldr	x0, [x28, #8]
    2a94:	cbz	x0, 2908 <GOMP_taskwait+0xb8>
    2a98:	add	x4, sp, #0x77
    2a9c:	add	x3, x22, #0x508
    2aa0:	mov	x1, x25
    2aa4:	mov	w2, #0x0                   	// #0
    2aa8:	mov	w0, #0x1                   	// #1
    2aac:	bl	0 <priority_tree_next_task>
    2ab0:	mov	x19, x0
    2ab4:	cbnz	x0, 291c <GOMP_taskwait+0xcc>
    2ab8:	ldr	x0, [x25]
    2abc:	ldr	x19, [x0, #8]
    2ac0:	sub	x19, x19, #0x70
    2ac4:	b	291c <GOMP_taskwait+0xcc>
    2ac8:	mov	w1, w27
    2acc:	add	x0, x22, #0x80
    2ad0:	bl	0 <gomp_team_barrier_wake>
    2ad4:	b	2950 <GOMP_taskwait+0x100>
    2ad8:	ldrb	w0, [sp, #119]
    2adc:	mov	x3, #0x0                   	// #0
    2ae0:	cbz	w0, 29dc <GOMP_taskwait+0x18c>
    2ae4:	ldr	x0, [x28, #8]
    2ae8:	add	x2, x19, #0x70
    2aec:	cbnz	x0, 2d5c <GOMP_taskwait+0x50c>
    2af0:	ldp	x0, x1, [x19, #112]
    2af4:	ldr	x6, [x28, #24]
    2af8:	cmp	x2, x6
    2afc:	str	x0, [x1]
    2b00:	str	x1, [x0, #8]
    2b04:	b.eq	2c48 <GOMP_taskwait+0x3f8>  // b.none
    2b08:	stp	xzr, xzr, [x19, #112]
    2b0c:	ldr	x1, [x19, #8]
    2b10:	cbz	x1, 29e4 <GOMP_taskwait+0x194>
    2b14:	add	x0, x19, #0x8
    2b18:	str	x3, [sp, #96]
    2b1c:	bl	e0 <gomp_clear_parent_in_tree>
    2b20:	str	xzr, [x19, #8]
    2b24:	ldr	x3, [sp, #96]
    2b28:	b	2a00 <GOMP_taskwait+0x1b0>
    2b2c:	str	x26, [x28, #64]
    2b30:	strb	wzr, [sp, #121]
    2b34:	str	wzr, [sp, #136]
    2b38:	b	2930 <GOMP_taskwait+0xe0>
    2b3c:	mov	x2, x22
    2b40:	mov	x1, x28
    2b44:	mov	x0, x19
    2b48:	bl	af0 <gomp_task_run_pre>
    2b4c:	tst	w0, #0xff
    2b50:	b.eq	293c <GOMP_taskwait+0xec>  // b.none
    2b54:	cbz	x21, 29a4 <GOMP_taskwait+0x154>
    2b58:	ldr	x0, [x21, #56]
    2b5c:	cbnz	x0, 2da8 <GOMP_taskwait+0x558>
    2b60:	mov	x0, x21
    2b64:	bl	0 <free>
    2b68:	b	29a4 <GOMP_taskwait+0x154>
    2b6c:	ldr	w1, [sp, #136]
    2b70:	tst	x1, #0x7fffffff
    2b74:	b.eq	2d78 <GOMP_taskwait+0x528>  // b.none
    2b78:	sub	w2, w1, #0x1
    2b7c:	add	x3, sp, #0x88
    2b80:	ldaxr	w0, [x3]
    2b84:	cmp	w0, w1
    2b88:	b.ne	2b94 <GOMP_taskwait+0x344>  // b.any
    2b8c:	stxr	w4, w2, [x3]
    2b90:	cmp	w4, #0x0
    2b94:	mov	w1, w0
    2b98:	b.ne	2b70 <GOMP_taskwait+0x320>  // b.any
    2b9c:	mov	w0, #0x1                   	// #1
    2ba0:	ldaxr	w1, [x20]
    2ba4:	cbnz	w1, 2bb0 <GOMP_taskwait+0x360>
    2ba8:	stxr	w2, w0, [x20]
    2bac:	cbnz	w2, 2ba0 <GOMP_taskwait+0x350>
    2bb0:	cmp	w1, #0x0
    2bb4:	mov	w27, #0x0                   	// #0
    2bb8:	b.eq	2a8c <GOMP_taskwait+0x23c>  // b.none
    2bbc:	mov	x0, x20
    2bc0:	mov	x21, x19
    2bc4:	bl	0 <gomp_mutex_lock_slow>
    2bc8:	b	2a90 <GOMP_taskwait+0x240>
    2bcc:	cmp	x2, x0
    2bd0:	b.eq	2d50 <GOMP_taskwait+0x500>  // b.none
    2bd4:	str	x0, [x4, #8]
    2bd8:	ldr	x0, [x21, #56]
    2bdc:	stp	xzr, xzr, [x19, #128]
    2be0:	cmp	x0, #0x1
    2be4:	b.hi	2a44 <GOMP_taskwait+0x1f4>  // b.pmore
    2be8:	add	x0, x21, #0x38
    2bec:	stlr	xzr, [x0]
    2bf0:	b	2a4c <GOMP_taskwait+0x1fc>
    2bf4:	str	xzr, [x28, #64]
    2bf8:	ldxr	w0, [x20]
    2bfc:	stlxr	w1, wzr, [x20]
    2c00:	cbnz	w1, 2bf8 <GOMP_taskwait+0x3a8>
    2c04:	tbnz	w0, #31, 2d40 <GOMP_taskwait+0x4f0>
    2c08:	cbz	x21, 2c5c <GOMP_taskwait+0x40c>
    2c0c:	ldr	x0, [x21, #56]
    2c10:	cbnz	x0, 2d84 <GOMP_taskwait+0x534>
    2c14:	mov	x0, x21
    2c18:	bl	0 <free>
    2c1c:	ldp	x19, x20, [sp, #16]
    2c20:	ldp	x21, x22, [sp, #32]
    2c24:	ldp	x23, x24, [sp, #48]
    2c28:	ldp	x25, x26, [sp, #64]
    2c2c:	ldp	x27, x28, [sp, #80]
    2c30:	ldp	x29, x30, [sp], #144
    2c34:	ret
    2c38:	mov	x0, x20
    2c3c:	bl	0 <gomp_mutex_unlock_slow>
    2c40:	cbz	w27, 2950 <GOMP_taskwait+0x100>
    2c44:	b	2ac8 <GOMP_taskwait+0x278>
    2c48:	cmp	x2, x0
    2c4c:	csel	x0, x0, xzr, ne  // ne = any
    2c50:	str	x0, [x28, #24]
    2c54:	stp	xzr, xzr, [x19, #112]
    2c58:	b	2b0c <GOMP_taskwait+0x2bc>
    2c5c:	ldp	x19, x20, [sp, #16]
    2c60:	b	28a4 <GOMP_taskwait+0x54>
    2c64:	bl	0 <gomp_target_task_fn>
    2c68:	tst	w0, #0xff
    2c6c:	b.eq	297c <GOMP_taskwait+0x12c>  // b.none
    2c70:	mov	w0, #0x1                   	// #1
    2c74:	str	x28, [x21, #80]
    2c78:	ldaxr	w1, [x20]
    2c7c:	cbnz	w1, 2c88 <GOMP_taskwait+0x438>
    2c80:	stxr	w2, w0, [x20]
    2c84:	cbnz	w2, 2c78 <GOMP_taskwait+0x428>
    2c88:	cmp	w1, #0x0
    2c8c:	b.ne	2db0 <GOMP_taskwait+0x560>  // b.any
    2c90:	ldr	x0, [x19, #192]
    2c94:	mov	w1, #0x4                   	// #4
    2c98:	ldr	w2, [x0, #44]
    2c9c:	str	w1, [x19, #200]
    2ca0:	cmp	w2, #0x5
    2ca4:	b.eq	2d8c <GOMP_taskwait+0x53c>  // b.none
    2ca8:	mov	x19, #0x0                   	// #0
    2cac:	mov	w27, #0x0                   	// #0
    2cb0:	mov	x21, x19
    2cb4:	str	w1, [x0, #44]
    2cb8:	b	2a90 <GOMP_taskwait+0x240>
    2cbc:	ldr	w1, [x21, #52]
    2cc0:	add	x0, x21, #0x34
    2cc4:	strb	wzr, [x21, #48]
    2cc8:	add	w2, w1, #0x1
    2ccc:	and	w2, w2, #0x7fffffff
    2cd0:	ldxr	w4, [x0]
    2cd4:	cmp	w4, w1
    2cd8:	b.ne	2ce4 <GOMP_taskwait+0x494>  // b.any
    2cdc:	stlxr	w5, w2, [x0]
    2ce0:	cmp	w5, #0x0
    2ce4:	mov	w1, w4
    2ce8:	b.ne	2cc8 <GOMP_taskwait+0x478>  // b.any
    2cec:	tbz	w4, #31, 2a58 <GOMP_taskwait+0x208>
    2cf0:	str	x3, [sp, #96]
    2cf4:	bl	0 <gomp_sem_post_slow>
    2cf8:	ldr	x3, [sp, #96]
    2cfc:	b	2a58 <GOMP_taskwait+0x208>
    2d00:	bl	0 <free>
    2d04:	b	295c <GOMP_taskwait+0x10c>
    2d08:	mov	w0, #0x2                   	// #2
    2d0c:	add	x1, x21, #0x8
    2d10:	str	x3, [sp, #96]
    2d14:	bl	0 <priority_tree_remove>
    2d18:	ldr	x0, [x21, #8]
    2d1c:	ldr	x3, [sp, #96]
    2d20:	cmp	x0, #0x0
    2d24:	cset	w6, eq  // eq = none
    2d28:	b	2a34 <GOMP_taskwait+0x1e4>
    2d2c:	ldar	x0, [x25]
    2d30:	cmp	x0, #0x0
    2d34:	cset	w0, eq  // eq = none
    2d38:	cbnz	w0, 28a4 <GOMP_taskwait+0x54>
    2d3c:	b	28bc <GOMP_taskwait+0x6c>
    2d40:	mov	x0, x20
    2d44:	bl	0 <gomp_mutex_unlock_slow>
    2d48:	cbnz	x21, 2c0c <GOMP_taskwait+0x3bc>
    2d4c:	b	2c5c <GOMP_taskwait+0x40c>
    2d50:	mov	w6, #0x1                   	// #1
    2d54:	str	xzr, [x4, #8]
    2d58:	b	2a34 <GOMP_taskwait+0x1e4>
    2d5c:	mov	x1, x25
    2d60:	mov	w0, #0x1                   	// #1
    2d64:	str	x3, [sp, #96]
    2d68:	bl	0 <priority_tree_remove>
    2d6c:	stp	xzr, xzr, [x19, #112]
    2d70:	ldr	x3, [sp, #96]
    2d74:	b	2b0c <GOMP_taskwait+0x2bc>
    2d78:	ldr	x0, [sp, #104]
    2d7c:	bl	0 <gomp_sem_wait_slow>
    2d80:	b	2b9c <GOMP_taskwait+0x34c>
    2d84:	bl	0 <free>
    2d88:	b	2c14 <GOMP_taskwait+0x3c4>
    2d8c:	mov	x1, x19
    2d90:	mov	x0, x22
    2d94:	mov	x19, #0x0                   	// #0
    2d98:	mov	w27, #0x0                   	// #0
    2d9c:	mov	x21, x19
    2da0:	bl	1420 <gomp_target_task_completion>
    2da4:	b	2a90 <GOMP_taskwait+0x240>
    2da8:	bl	0 <free>
    2dac:	b	2b60 <GOMP_taskwait+0x310>
    2db0:	mov	x0, x20
    2db4:	bl	0 <gomp_mutex_lock_slow>
    2db8:	b	2c90 <GOMP_taskwait+0x440>
    2dbc:	mov	x0, x20
    2dc0:	bl	0 <gomp_mutex_lock_slow>
    2dc4:	b	29a4 <GOMP_taskwait+0x154>
    2dc8:	mov	x0, x20
    2dcc:	bl	0 <gomp_mutex_lock_slow>
    2dd0:	b	28ec <GOMP_taskwait+0x9c>
    2dd4:	nop

0000000000002dd8 <gomp_task_maybe_wait_for_dependencies>:
    2dd8:	stp	x29, x30, [sp, #-240]!
    2ddc:	adrp	x1, 0 <gomp_tls_data>
    2de0:	ldr	x1, [x1]
    2de4:	mov	x29, sp
    2de8:	stp	x19, x20, [sp, #16]
    2dec:	mov	x19, x0
    2df0:	mrs	x0, tpidr_el0
    2df4:	stp	x21, x22, [sp, #32]
    2df8:	stp	x23, x24, [sp, #48]
    2dfc:	ldp	x21, x24, [x19]
    2e00:	stp	x1, x0, [sp, #120]
    2e04:	add	x0, x0, x1
    2e08:	stp	x25, x26, [sp, #64]
    2e0c:	stp	x27, x28, [sp, #80]
    2e10:	ldr	x26, [x0, #16]
    2e14:	ldr	x27, [x0, #80]
    2e18:	cbz	x21, 340c <gomp_task_maybe_wait_for_dependencies+0x634>
    2e1c:	add	x0, x26, #0x500
    2e20:	mov	x2, x0
    2e24:	mov	w0, #0x1                   	// #1
    2e28:	str	x2, [sp, #112]
    2e2c:	ldaxr	w1, [x2]
    2e30:	cbnz	w1, 2e3c <gomp_task_maybe_wait_for_dependencies+0x64>
    2e34:	stxr	w3, w0, [x2]
    2e38:	cbnz	w3, 2e2c <gomp_task_maybe_wait_for_dependencies+0x54>
    2e3c:	cmp	w1, #0x0
    2e40:	b.ne	351c <gomp_task_maybe_wait_for_dependencies+0x744>  // b.any
    2e44:	mov	x25, x21
    2e48:	mov	x23, #0x2                   	// #2
    2e4c:	add	x0, x19, x23, lsl #3
    2e50:	mov	x28, #0x0                   	// #0
    2e54:	mov	x23, #0x0                   	// #0
    2e58:	mov	w22, #0x1                   	// #1
    2e5c:	str	x0, [sp, #104]
    2e60:	ldr	x0, [sp, #104]
    2e64:	cmp	x23, x24
    2e68:	cset	w1, cs  // cs = hs, nlast
    2e6c:	strb	w1, [sp, #232]
    2e70:	cmp	x23, x21
    2e74:	ldr	x0, [x0, x23, lsl #3]
    2e78:	str	x0, [sp, #200]
    2e7c:	b.cs	3170 <gomp_task_maybe_wait_for_dependencies+0x398>  // b.hs, b.nlast
    2e80:	ldr	x0, [x27, #56]
    2e84:	add	x1, sp, #0xc8
    2e88:	bl	0 <htab_find>
    2e8c:	mov	x19, x0
    2e90:	cbz	x0, 2ee0 <gomp_task_maybe_wait_for_dependencies+0x108>
    2e94:	ldrb	w2, [sp, #232]
    2e98:	add	x8, x27, #0x8
    2e9c:	nop
    2ea0:	cbz	w2, 2eac <gomp_task_maybe_wait_for_dependencies+0xd4>
    2ea4:	ldrb	w0, [x19, #32]
    2ea8:	cbnz	w0, 2ed8 <gomp_task_maybe_wait_for_dependencies+0x100>
    2eac:	ldr	x20, [x19, #24]
    2eb0:	ldrb	w0, [x20, #207]
    2eb4:	cbnz	w0, 2ed8 <gomp_task_maybe_wait_for_dependencies+0x100>
    2eb8:	ldr	x0, [x20, #80]
    2ebc:	strb	w22, [x20, #207]
    2ec0:	add	x28, x28, #0x1
    2ec4:	cbnz	x0, 2ed8 <gomp_task_maybe_wait_for_dependencies+0x100>
    2ec8:	ldr	w0, [x20, #200]
    2ecc:	cmp	w0, #0x2
    2ed0:	b.eq	3130 <gomp_task_maybe_wait_for_dependencies+0x358>  // b.none
    2ed4:	nop
    2ed8:	ldr	x19, [x19, #8]
    2edc:	cbnz	x19, 2ea0 <gomp_task_maybe_wait_for_dependencies+0xc8>
    2ee0:	add	x23, x23, #0x1
    2ee4:	cmp	x23, x25
    2ee8:	b.cc	2e60 <gomp_task_maybe_wait_for_dependencies+0x88>  // b.lo, b.ul, b.last
    2eec:	cbz	x28, 3328 <gomp_task_maybe_wait_for_dependencies+0x550>
    2ef0:	stp	xzr, xzr, [sp, #176]
    2ef4:	add	x20, x27, #0x8
    2ef8:	add	x21, sp, #0xb0
    2efc:	stp	x28, xzr, [sp, #184]
    2f00:	mov	w24, #0x0                   	// #0
    2f04:	mov	x25, #0x0                   	// #0
    2f08:	mov	w23, #0x1                   	// #1
    2f0c:	str	x21, [x27, #64]
    2f10:	ldr	x0, [x27, #8]
    2f14:	cbnz	x0, 3348 <gomp_task_maybe_wait_for_dependencies+0x570>
    2f18:	ldr	x19, [x20, #16]
    2f1c:	strb	w23, [sp, #175]
    2f20:	sub	x19, x19, #0x70
    2f24:	ldr	w0, [x19, #200]
    2f28:	cmp	w0, #0x2
    2f2c:	b.eq	31d8 <gomp_task_maybe_wait_for_dependencies+0x400>  // b.none
    2f30:	mov	x19, #0x0                   	// #0
    2f34:	strb	w23, [sp, #177]
    2f38:	ldr	x1, [sp, #112]
    2f3c:	ldxr	w0, [x1]
    2f40:	stlxr	w2, wzr, [x1]
    2f44:	cbnz	w2, 2f3c <gomp_task_maybe_wait_for_dependencies+0x164>
    2f48:	tbnz	w0, #31, 3318 <gomp_task_maybe_wait_for_dependencies+0x540>
    2f4c:	cbnz	w24, 3120 <gomp_task_maybe_wait_for_dependencies+0x348>
    2f50:	cbz	x25, 2f64 <gomp_task_maybe_wait_for_dependencies+0x18c>
    2f54:	ldr	x0, [x25, #56]
    2f58:	cbnz	x0, 3464 <gomp_task_maybe_wait_for_dependencies+0x68c>
    2f5c:	mov	x0, x25
    2f60:	bl	0 <free>
    2f64:	cbz	x19, 3230 <gomp_task_maybe_wait_for_dependencies+0x458>
    2f68:	ldp	x1, x0, [sp, #120]
    2f6c:	add	x24, x0, x1
    2f70:	ldp	x1, x0, [x19, #184]
    2f74:	str	x19, [x24, #80]
    2f78:	cbz	x1, 3378 <gomp_task_maybe_wait_for_dependencies+0x5a0>
    2f7c:	blr	x1
    2f80:	ldp	x1, x0, [sp, #120]
    2f84:	mov	w2, #0x1                   	// #1
    2f88:	add	x0, x0, x1
    2f8c:	str	x27, [x0, #80]
    2f90:	ldr	x0, [sp, #112]
    2f94:	ldaxr	w1, [x0]
    2f98:	cbnz	w1, 2fa4 <gomp_task_maybe_wait_for_dependencies+0x1cc>
    2f9c:	stxr	w3, w2, [x0]
    2fa0:	cbnz	w3, 2f94 <gomp_task_maybe_wait_for_dependencies+0x1bc>
    2fa4:	cmp	w1, #0x0
    2fa8:	mov	w24, #0x0                   	// #0
    2fac:	b.ne	3530 <gomp_task_maybe_wait_for_dependencies+0x758>  // b.any
    2fb0:	ldr	x0, [x19, #72]
    2fb4:	cbz	x0, 31d0 <gomp_task_maybe_wait_for_dependencies+0x3f8>
    2fb8:	ldr	x0, [x19]
    2fbc:	cbz	x0, 2fc8 <gomp_task_maybe_wait_for_dependencies+0x1f0>
    2fc0:	mov	x0, x19
    2fc4:	bl	8d0 <gomp_task_run_post_handle_depend_hash>
    2fc8:	ldr	x0, [x19, #48]
    2fcc:	cbz	x0, 31d0 <gomp_task_maybe_wait_for_dependencies+0x3f8>
    2fd0:	mov	x1, x26
    2fd4:	mov	x0, x19
    2fd8:	bl	e88 <gomp_task_run_post_handle_dependers>
    2fdc:	mov	x22, x0
    2fe0:	ldrb	w0, [x19, #207]
    2fe4:	cbz	w0, 2ff4 <gomp_task_maybe_wait_for_dependencies+0x21c>
    2fe8:	ldr	x0, [sp, #184]
    2fec:	sub	x0, x0, #0x1
    2ff0:	str	x0, [sp, #184]
    2ff4:	ldr	x0, [x27, #8]
    2ff8:	add	x2, x19, #0x70
    2ffc:	cbnz	x0, 3454 <gomp_task_maybe_wait_for_dependencies+0x67c>
    3000:	ldp	x0, x1, [x19, #112]
    3004:	ldr	x6, [x27, #24]
    3008:	cmp	x2, x6
    300c:	str	x0, [x1]
    3010:	str	x1, [x0, #8]
    3014:	b.eq	3208 <gomp_task_maybe_wait_for_dependencies+0x430>  // b.none
    3018:	ldr	x1, [x19, #8]
    301c:	stp	xzr, xzr, [x19, #112]
    3020:	cbnz	x1, 3220 <gomp_task_maybe_wait_for_dependencies+0x448>
    3024:	ldr	x2, [x19, #24]
    3028:	mov	x1, x2
    302c:	cbz	x2, 3040 <gomp_task_maybe_wait_for_dependencies+0x268>
    3030:	stur	xzr, [x1, #-112]
    3034:	ldr	x1, [x1]
    3038:	cmp	x2, x1
    303c:	b.ne	3030 <gomp_task_maybe_wait_for_dependencies+0x258>  // b.any
    3040:	ldr	x25, [x19, #40]
    3044:	cbz	x25, 3098 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    3048:	ldr	x0, [x25, #8]
    304c:	add	x2, x19, #0x80
    3050:	cbnz	x0, 34b0 <gomp_task_maybe_wait_for_dependencies+0x6d8>
    3054:	ldp	x0, x1, [x19, #128]
    3058:	add	x6, x25, #0x10
    305c:	ldr	x7, [x6, #8]
    3060:	mov	w4, #0x0                   	// #0
    3064:	cmp	x2, x7
    3068:	str	x0, [x1]
    306c:	str	x1, [x0, #8]
    3070:	b.eq	32f0 <gomp_task_maybe_wait_for_dependencies+0x518>  // b.none
    3074:	ldr	x0, [x25, #56]
    3078:	stp	xzr, xzr, [x19, #128]
    307c:	cmp	x0, #0x1
    3080:	b.ls	330c <gomp_task_maybe_wait_for_dependencies+0x534>  // b.plast
    3084:	sub	x0, x0, #0x1
    3088:	str	x0, [x25, #56]
    308c:	cbz	w4, 3098 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    3090:	ldrb	w0, [x25, #48]
    3094:	cbnz	w0, 33d0 <gomp_task_maybe_wait_for_dependencies+0x5f8>
    3098:	ldr	w0, [x26, #1320]
    309c:	cmp	x22, #0x1
    30a0:	sub	w0, w0, #0x1
    30a4:	str	w0, [x26, #1320]
    30a8:	b.ls	30cc <gomp_task_maybe_wait_for_dependencies+0x2f4>  // b.plast
    30ac:	ldrb	w0, [x27, #204]
    30b0:	ldr	w24, [x26]
    30b4:	ldr	w1, [x26, #1328]
    30b8:	eor	w0, w0, #0x1
    30bc:	sub	w24, w24, w1
    30c0:	sub	w24, w24, w0
    30c4:	cmp	x22, w24, sxtw
    30c8:	csel	w24, w22, w24, cc  // cc = lo, ul, last
    30cc:	mov	x25, x19
    30d0:	ldr	x0, [sp, #184]
    30d4:	cbnz	x0, 2f10 <gomp_task_maybe_wait_for_dependencies+0x138>
    30d8:	ldr	x1, [sp, #112]
    30dc:	str	xzr, [x27, #64]
    30e0:	ldxr	w0, [x1]
    30e4:	stlxr	w2, wzr, [x1]
    30e8:	cbnz	w2, 30e0 <gomp_task_maybe_wait_for_dependencies+0x308>
    30ec:	tbnz	w0, #31, 34cc <gomp_task_maybe_wait_for_dependencies+0x6f4>
    30f0:	cbz	x25, 3104 <gomp_task_maybe_wait_for_dependencies+0x32c>
    30f4:	ldr	x0, [x25, #56]
    30f8:	cbnz	x0, 34d8 <gomp_task_maybe_wait_for_dependencies+0x700>
    30fc:	mov	x0, x25
    3100:	bl	0 <free>
    3104:	ldp	x19, x20, [sp, #16]
    3108:	ldp	x21, x22, [sp, #32]
    310c:	ldp	x23, x24, [sp, #48]
    3110:	ldp	x25, x26, [sp, #64]
    3114:	ldp	x27, x28, [sp, #80]
    3118:	ldp	x29, x30, [sp], #240
    311c:	ret
    3120:	mov	w1, w24
    3124:	add	x0, x26, #0x80
    3128:	bl	0 <gomp_team_barrier_wake>
    312c:	b	2f50 <gomp_task_maybe_wait_for_dependencies+0x178>
    3130:	ldr	x0, [x27, #8]
    3134:	add	x7, x20, #0x70
    3138:	cbnz	x0, 3290 <gomp_task_maybe_wait_for_dependencies+0x4b8>
    313c:	ldr	x0, [x27, #32]
    3140:	cbz	x0, 3198 <gomp_task_maybe_wait_for_dependencies+0x3c0>
    3144:	ldp	x9, x1, [x20, #112]
    3148:	str	x9, [x1]
    314c:	ldr	x10, [x20, #112]
    3150:	ldr	x9, [x0]
    3154:	str	x1, [x10, #8]
    3158:	stp	x9, x0, [x20, #112]
    315c:	str	x7, [x0]
    3160:	ldr	x0, [x20, #112]
    3164:	str	x7, [x0, #8]
    3168:	str	x7, [x27, #32]
    316c:	b	2ed8 <gomp_task_maybe_wait_for_dependencies+0x100>
    3170:	ldr	x1, [x0, #8]
    3174:	cmp	x1, #0x1
    3178:	b.eq	318c <gomp_task_maybe_wait_for_dependencies+0x3b4>  // b.none
    317c:	sub	x2, x1, #0x2
    3180:	cmp	x2, #0x2
    3184:	b.hi	3510 <gomp_task_maybe_wait_for_dependencies+0x738>  // b.pmore
    3188:	strb	wzr, [sp, #232]
    318c:	ldr	x0, [x0]
    3190:	str	x0, [sp, #200]
    3194:	b	2e80 <gomp_task_maybe_wait_for_dependencies+0xa8>
    3198:	ldr	x0, [x27, #24]
    319c:	cmp	x7, x0
    31a0:	b.eq	3168 <gomp_task_maybe_wait_for_dependencies+0x390>  // b.none
    31a4:	ldp	x1, x9, [x20, #112]
    31a8:	str	x1, [x9]
    31ac:	str	x9, [x1, #8]
    31b0:	ldr	x1, [x0, #8]
    31b4:	stp	x0, x1, [x20, #112]
    31b8:	str	x7, [x27, #24]
    31bc:	str	x7, [x1]
    31c0:	ldr	x0, [x20, #112]
    31c4:	str	x7, [x0, #8]
    31c8:	str	x7, [x27, #32]
    31cc:	b	2ed8 <gomp_task_maybe_wait_for_dependencies+0x100>
    31d0:	mov	x22, #0x0                   	// #0
    31d4:	b	2fe0 <gomp_task_maybe_wait_for_dependencies+0x208>
    31d8:	mov	x2, x26
    31dc:	mov	x1, x27
    31e0:	mov	x0, x19
    31e4:	bl	af0 <gomp_task_run_pre>
    31e8:	tst	w0, #0xff
    31ec:	b.eq	2f38 <gomp_task_maybe_wait_for_dependencies+0x160>  // b.none
    31f0:	cbz	x25, 2fb0 <gomp_task_maybe_wait_for_dependencies+0x1d8>
    31f4:	ldr	x0, [x25, #56]
    31f8:	cbnz	x0, 34fc <gomp_task_maybe_wait_for_dependencies+0x724>
    31fc:	mov	x0, x25
    3200:	bl	0 <free>
    3204:	b	2fb0 <gomp_task_maybe_wait_for_dependencies+0x1d8>
    3208:	cmp	x2, x0
    320c:	ldr	x1, [x19, #8]
    3210:	csel	x0, x0, xzr, ne  // ne = any
    3214:	str	x0, [x27, #24]
    3218:	stp	xzr, xzr, [x19, #112]
    321c:	cbz	x1, 3024 <gomp_task_maybe_wait_for_dependencies+0x24c>
    3220:	add	x0, x19, #0x8
    3224:	bl	e0 <gomp_clear_parent_in_tree>
    3228:	str	xzr, [x19, #8]
    322c:	b	3040 <gomp_task_maybe_wait_for_dependencies+0x268>
    3230:	ldr	w1, [sp, #192]
    3234:	tst	x1, #0x7fffffff
    3238:	b.eq	34e0 <gomp_task_maybe_wait_for_dependencies+0x708>  // b.none
    323c:	sub	w2, w1, #0x1
    3240:	add	x3, sp, #0xc0
    3244:	ldaxr	w0, [x3]
    3248:	cmp	w0, w1
    324c:	b.ne	3258 <gomp_task_maybe_wait_for_dependencies+0x480>  // b.any
    3250:	stxr	w4, w2, [x3]
    3254:	cmp	w4, #0x0
    3258:	mov	w1, w0
    325c:	b.ne	3234 <gomp_task_maybe_wait_for_dependencies+0x45c>  // b.any
    3260:	ldr	x2, [sp, #112]
    3264:	mov	w0, #0x1                   	// #1
    3268:	ldaxr	w1, [x2]
    326c:	cbnz	w1, 3278 <gomp_task_maybe_wait_for_dependencies+0x4a0>
    3270:	stxr	w3, w0, [x2]
    3274:	cbnz	w3, 3268 <gomp_task_maybe_wait_for_dependencies+0x490>
    3278:	cmp	w1, #0x0
    327c:	mov	w24, #0x0                   	// #0
    3280:	b.eq	30cc <gomp_task_maybe_wait_for_dependencies+0x2f4>  // b.none
    3284:	ldr	x0, [sp, #112]
    3288:	bl	0 <gomp_mutex_lock_slow>
    328c:	b	30cc <gomp_task_maybe_wait_for_dependencies+0x2f4>
    3290:	ldr	w0, [x20, #88]
    3294:	add	x1, sp, #0xb0
    3298:	str	x8, [sp, #136]
    329c:	str	w2, [sp, #148]
    32a0:	str	x7, [sp, #152]
    32a4:	str	w0, [sp, #176]
    32a8:	mov	x0, x8
    32ac:	bl	0 <prio_splay_tree_lookup>
    32b0:	ldr	x1, [x0, #16]
    32b4:	ldr	w2, [sp, #148]
    32b8:	ldr	x8, [sp, #136]
    32bc:	ldr	x7, [sp, #152]
    32c0:	cbz	x1, 346c <gomp_task_maybe_wait_for_dependencies+0x694>
    32c4:	ldp	x10, x9, [x20, #112]
    32c8:	str	x10, [x9]
    32cc:	ldr	x11, [x20, #112]
    32d0:	ldr	x10, [x1]
    32d4:	str	x9, [x11, #8]
    32d8:	stp	x10, x1, [x20, #112]
    32dc:	str	x7, [x1]
    32e0:	ldr	x1, [x20, #112]
    32e4:	str	x7, [x1, #8]
    32e8:	str	x7, [x0, #16]
    32ec:	b	2ed8 <gomp_task_maybe_wait_for_dependencies+0x100>
    32f0:	cmp	x2, x0
    32f4:	b.eq	34a4 <gomp_task_maybe_wait_for_dependencies+0x6cc>  // b.none
    32f8:	str	x0, [x6, #8]
    32fc:	ldr	x0, [x25, #56]
    3300:	stp	xzr, xzr, [x19, #128]
    3304:	cmp	x0, #0x1
    3308:	b.hi	3084 <gomp_task_maybe_wait_for_dependencies+0x2ac>  // b.pmore
    330c:	add	x0, x25, #0x38
    3310:	stlr	xzr, [x0]
    3314:	b	308c <gomp_task_maybe_wait_for_dependencies+0x2b4>
    3318:	ldr	x0, [sp, #112]
    331c:	bl	0 <gomp_mutex_unlock_slow>
    3320:	cbz	w24, 2f50 <gomp_task_maybe_wait_for_dependencies+0x178>
    3324:	b	3120 <gomp_task_maybe_wait_for_dependencies+0x348>
    3328:	ldr	x1, [sp, #112]
    332c:	ldxr	w0, [x1]
    3330:	stlxr	w2, wzr, [x1]
    3334:	cbnz	w2, 332c <gomp_task_maybe_wait_for_dependencies+0x554>
    3338:	tbz	w0, #31, 3104 <gomp_task_maybe_wait_for_dependencies+0x32c>
    333c:	ldr	x0, [sp, #112]
    3340:	bl	0 <gomp_mutex_unlock_slow>
    3344:	b	3104 <gomp_task_maybe_wait_for_dependencies+0x32c>
    3348:	add	x4, sp, #0xaf
    334c:	mov	x1, x20
    3350:	mov	x3, #0x0                   	// #0
    3354:	mov	w2, #0x3e7                 	// #999
    3358:	mov	w0, #0x1                   	// #1
    335c:	bl	0 <priority_tree_next_task>
    3360:	mov	x19, x0
    3364:	cbnz	x0, 2f24 <gomp_task_maybe_wait_for_dependencies+0x14c>
    3368:	ldr	x0, [x20]
    336c:	ldr	x19, [x0, #8]
    3370:	sub	x19, x19, #0x70
    3374:	b	2f24 <gomp_task_maybe_wait_for_dependencies+0x14c>
    3378:	bl	0 <gomp_target_task_fn>
    337c:	tst	w0, #0xff
    3380:	b.eq	2f80 <gomp_task_maybe_wait_for_dependencies+0x1a8>  // b.none
    3384:	ldr	x2, [sp, #112]
    3388:	mov	w0, #0x1                   	// #1
    338c:	str	x27, [x24, #80]
    3390:	ldaxr	w1, [x2]
    3394:	cbnz	w1, 33a0 <gomp_task_maybe_wait_for_dependencies+0x5c8>
    3398:	stxr	w3, w0, [x2]
    339c:	cbnz	w3, 3390 <gomp_task_maybe_wait_for_dependencies+0x5b8>
    33a0:	cmp	w1, #0x0
    33a4:	b.ne	3504 <gomp_task_maybe_wait_for_dependencies+0x72c>  // b.any
    33a8:	ldr	x0, [x19, #192]
    33ac:	mov	w1, #0x4                   	// #4
    33b0:	ldr	w2, [x0, #44]
    33b4:	str	w1, [x19, #200]
    33b8:	cmp	w2, #0x5
    33bc:	b.eq	34ec <gomp_task_maybe_wait_for_dependencies+0x714>  // b.none
    33c0:	str	w1, [x0, #44]
    33c4:	mov	w24, #0x0                   	// #0
    33c8:	mov	x25, #0x0                   	// #0
    33cc:	b	30d0 <gomp_task_maybe_wait_for_dependencies+0x2f8>
    33d0:	ldr	w1, [x25, #52]
    33d4:	add	x0, x25, #0x34
    33d8:	strb	wzr, [x25, #48]
    33dc:	add	w2, w1, #0x1
    33e0:	and	w2, w2, #0x7fffffff
    33e4:	ldxr	w4, [x0]
    33e8:	cmp	w4, w1
    33ec:	b.ne	33f8 <gomp_task_maybe_wait_for_dependencies+0x620>  // b.any
    33f0:	stlxr	w3, w2, [x0]
    33f4:	cmp	w3, #0x0
    33f8:	mov	w1, w4
    33fc:	b.ne	33dc <gomp_task_maybe_wait_for_dependencies+0x604>  // b.any
    3400:	tbz	w4, #31, 3098 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    3404:	bl	0 <gomp_sem_post_slow>
    3408:	b	3098 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    340c:	ldp	x20, x1, [x19, #16]
    3410:	add	x2, x26, #0x500
    3414:	ldr	x21, [x19, #32]
    3418:	mov	w0, #0x1                   	// #1
    341c:	str	x2, [sp, #112]
    3420:	add	x20, x20, x1
    3424:	add	x21, x21, x20
    3428:	ldaxr	w1, [x2]
    342c:	cbnz	w1, 3438 <gomp_task_maybe_wait_for_dependencies+0x660>
    3430:	stxr	w3, w0, [x2]
    3434:	cbnz	w3, 3428 <gomp_task_maybe_wait_for_dependencies+0x650>
    3438:	cmp	w1, #0x0
    343c:	b.ne	353c <gomp_task_maybe_wait_for_dependencies+0x764>  // b.any
    3440:	cbz	x24, 3328 <gomp_task_maybe_wait_for_dependencies+0x550>
    3444:	mov	x25, x24
    3448:	mov	x23, #0x5                   	// #5
    344c:	mov	x24, x20
    3450:	b	2e4c <gomp_task_maybe_wait_for_dependencies+0x74>
    3454:	mov	x1, x20
    3458:	mov	w0, #0x1                   	// #1
    345c:	bl	0 <priority_tree_remove>
    3460:	b	3018 <gomp_task_maybe_wait_for_dependencies+0x240>
    3464:	bl	0 <free>
    3468:	b	2f5c <gomp_task_maybe_wait_for_dependencies+0x184>
    346c:	ldr	x1, [x0, #8]
    3470:	cmp	x7, x1
    3474:	b.eq	32e8 <gomp_task_maybe_wait_for_dependencies+0x510>  // b.none
    3478:	ldp	x9, x10, [x20, #112]
    347c:	str	x9, [x10]
    3480:	str	x10, [x9, #8]
    3484:	ldr	x9, [x1, #8]
    3488:	stp	x1, x9, [x20, #112]
    348c:	str	x7, [x0, #8]
    3490:	str	x7, [x9]
    3494:	ldr	x1, [x20, #112]
    3498:	str	x7, [x1, #8]
    349c:	str	x7, [x0, #16]
    34a0:	b	2ed8 <gomp_task_maybe_wait_for_dependencies+0x100>
    34a4:	mov	w4, #0x1                   	// #1
    34a8:	str	xzr, [x6, #8]
    34ac:	b	3074 <gomp_task_maybe_wait_for_dependencies+0x29c>
    34b0:	mov	w0, #0x2                   	// #2
    34b4:	add	x1, x25, #0x8
    34b8:	bl	0 <priority_tree_remove>
    34bc:	ldr	x0, [x25, #8]
    34c0:	cmp	x0, #0x0
    34c4:	cset	w4, eq  // eq = none
    34c8:	b	3074 <gomp_task_maybe_wait_for_dependencies+0x29c>
    34cc:	ldr	x0, [sp, #112]
    34d0:	bl	0 <gomp_mutex_unlock_slow>
    34d4:	b	30f0 <gomp_task_maybe_wait_for_dependencies+0x318>
    34d8:	bl	0 <free>
    34dc:	b	30fc <gomp_task_maybe_wait_for_dependencies+0x324>
    34e0:	add	x0, x21, #0x10
    34e4:	bl	0 <gomp_sem_wait_slow>
    34e8:	b	3260 <gomp_task_maybe_wait_for_dependencies+0x488>
    34ec:	mov	x1, x19
    34f0:	mov	x0, x26
    34f4:	bl	1420 <gomp_target_task_completion>
    34f8:	b	33c4 <gomp_task_maybe_wait_for_dependencies+0x5ec>
    34fc:	bl	0 <free>
    3500:	b	31fc <gomp_task_maybe_wait_for_dependencies+0x424>
    3504:	ldr	x0, [sp, #112]
    3508:	bl	0 <gomp_mutex_lock_slow>
    350c:	b	33a8 <gomp_task_maybe_wait_for_dependencies+0x5d0>
    3510:	adrp	x0, 0 <htab_find>
    3514:	add	x0, x0, #0x0
    3518:	bl	0 <gomp_fatal>
    351c:	ldr	x0, [sp, #112]
    3520:	mov	x25, x21
    3524:	mov	x23, #0x2                   	// #2
    3528:	bl	0 <gomp_mutex_lock_slow>
    352c:	b	2e4c <gomp_task_maybe_wait_for_dependencies+0x74>
    3530:	ldr	x0, [sp, #112]
    3534:	bl	0 <gomp_mutex_lock_slow>
    3538:	b	2fb0 <gomp_task_maybe_wait_for_dependencies+0x1d8>
    353c:	ldr	x0, [sp, #112]
    3540:	bl	0 <gomp_mutex_lock_slow>
    3544:	cbz	x24, 3328 <gomp_task_maybe_wait_for_dependencies+0x550>
    3548:	mov	x25, x24
    354c:	mov	x23, #0x5                   	// #5
    3550:	mov	x24, x20
    3554:	b	2e4c <gomp_task_maybe_wait_for_dependencies+0x74>

0000000000003558 <GOMP_task>:
    3558:	stp	x29, x30, [sp, #-352]!
    355c:	adrp	x9, 0 <gomp_cancel_var>
    3560:	and	w5, w5, #0xff
    3564:	mov	x29, sp
    3568:	stp	x21, x22, [sp, #32]
    356c:	mov	w22, w6
    3570:	adrp	x21, 0 <gomp_tls_data>
    3574:	ldr	x21, [x21]
    3578:	stp	x23, x24, [sp, #48]
    357c:	mrs	x24, tpidr_el0
    3580:	add	x10, x24, x21
    3584:	stp	x19, x20, [sp, #16]
    3588:	ldrb	w11, [x9]
    358c:	ldr	x20, [x10, #16]
    3590:	stp	x25, x26, [sp, #64]
    3594:	mov	x26, x0
    3598:	cmp	x20, #0x0
    359c:	stp	x27, x28, [sp, #80]
    35a0:	cset	w0, ne  // ne = any
    35a4:	mov	x27, x2
    35a8:	mov	x28, x4
    35ac:	tst	w0, w11
    35b0:	b.ne	3b1c <GOMP_task+0x5c4>  // b.any
    35b4:	ldr	x19, [x10, #80]
    35b8:	mov	w25, #0x0                   	// #0
    35bc:	tbnz	w22, #4, 3738 <GOMP_task+0x1e0>
    35c0:	cmp	x20, #0x0
    35c4:	eor	w5, w5, #0x1
    35c8:	cset	w0, eq  // eq = none
    35cc:	and	w2, w22, #0x8
    35d0:	orr	w5, w0, w5
    35d4:	cbnz	w5, 36b8 <GOMP_task+0x160>
    35d8:	cbz	x19, 36a8 <GOMP_task+0x150>
    35dc:	ldrb	w0, [x19, #205]
    35e0:	cbz	w0, 36a8 <GOMP_task+0x150>
    35e4:	cbnz	w2, 36c0 <GOMP_task+0x168>
    35e8:	ldp	x6, x7, [x19, #144]
    35ec:	stp	x6, x7, [x29, #288]
    35f0:	mov	x2, #0x1                   	// #1
    35f4:	ldp	x6, x7, [x19, #160]
    35f8:	stp	x6, x7, [x29, #304]
    35fc:	ldr	x4, [x19, #176]
    3600:	str	x2, [x29, #344]
    3604:	str	x19, [x29, #144]
    3608:	ldrb	w0, [x19, #205]
    360c:	str	xzr, [x29, #152]
    3610:	stp	xzr, xzr, [x29, #168]
    3614:	stp	xzr, xzr, [x29, #184]
    3618:	stp	xzr, xzr, [x29, #200]
    361c:	str	xzr, [x29, #216]
    3620:	str	x4, [x29, #320]
    3624:	cbnz	w0, 362c <GOMP_task+0xd4>
    3628:	tbz	w22, #1, 39c8 <GOMP_task+0x470>
    362c:	str	w25, [x29, #232]
    3630:	strb	w2, [x29, #349]
    3634:	ldrb	w0, [x19, #204]
    3638:	ldr	x2, [x19, #40]
    363c:	str	x2, [x29, #184]
    3640:	strb	w0, [x29, #348]
    3644:	add	x0, x24, x21
    3648:	add	x19, x29, #0x90
    364c:	str	x19, [x0, #80]
    3650:	cbnz	x27, 39d0 <GOMP_task+0x478>
    3654:	mov	x0, x1
    3658:	blr	x26
    365c:	ldr	x0, [x29, #152]
    3660:	cbnz	x0, 3768 <GOMP_task+0x210>
    3664:	ldr	x0, [x29, #168]
    3668:	cbnz	x0, 3768 <GOMP_task+0x210>
    366c:	add	x0, x24, x21
    3670:	ldr	x19, [x0, #80]
    3674:	ldr	x0, [x19, #56]
    3678:	cbnz	x0, 3a0c <GOMP_task+0x4b4>
    367c:	add	x21, x24, x21
    3680:	ldr	x0, [x19]
    3684:	str	x0, [x21, #80]
    3688:	mov	sp, x29
    368c:	ldp	x19, x20, [sp, #16]
    3690:	ldp	x21, x22, [sp, #32]
    3694:	ldp	x23, x24, [sp, #48]
    3698:	ldp	x25, x26, [sp, #64]
    369c:	ldp	x27, x28, [sp, #80]
    36a0:	ldp	x29, x30, [sp], #352
    36a4:	ret
    36a8:	ldr	w4, [x20]
    36ac:	ldr	w0, [x20, #1320]
    36b0:	cmp	w0, w4, lsl #6
    36b4:	b.ls	37d8 <GOMP_task+0x280>  // b.plast
    36b8:	cbz	w2, 36e0 <GOMP_task+0x188>
    36bc:	cbz	x19, 36e4 <GOMP_task+0x18c>
    36c0:	ldr	x0, [x19, #56]
    36c4:	cbz	x0, 35e8 <GOMP_task+0x90>
    36c8:	mov	x0, x7
    36cc:	stp	x3, x1, [x29, #128]
    36d0:	bl	2dd8 <gomp_task_maybe_wait_for_dependencies>
    36d4:	add	x0, x24, x21
    36d8:	ldp	x3, x1, [x29, #128]
    36dc:	ldr	x19, [x0, #80]
    36e0:	cbnz	x19, 35e8 <GOMP_task+0x90>
    36e4:	adrp	x0, 0 <gomp_global_icv>
    36e8:	add	x0, x0, #0x0
    36ec:	mov	w2, #0x1                   	// #1
    36f0:	stp	xzr, xzr, [x29, #144]
    36f4:	ldp	x6, x7, [x0]
    36f8:	stp	xzr, xzr, [x29, #168]
    36fc:	ldp	x4, x5, [x0, #16]
    3700:	stp	xzr, xzr, [x29, #184]
    3704:	ldr	x0, [x0, #32]
    3708:	stp	xzr, xzr, [x29, #200]
    370c:	str	xzr, [x29, #216]
    3710:	stp	x6, x7, [x29, #288]
    3714:	stp	x4, x5, [x29, #304]
    3718:	str	x0, [x29, #320]
    371c:	str	w2, [x29, #344]
    3720:	strb	wzr, [x29, #348]
    3724:	strh	wzr, [x29, #350]
    3728:	tbz	w22, #1, 37cc <GOMP_task+0x274>
    372c:	str	w25, [x29, #232]
    3730:	strb	w2, [x29, #349]
    3734:	b	3644 <GOMP_task+0xec>
    3738:	adrp	x0, 0 <gomp_max_task_priority_var>
    373c:	eor	w5, w5, #0x1
    3740:	and	w2, w22, #0x8
    3744:	ldr	w25, [x0]
    3748:	ldr	w0, [x29, #352]
    374c:	cmp	w25, w0
    3750:	csel	w25, w25, w0, le
    3754:	cmp	x20, #0x0
    3758:	cset	w0, eq  // eq = none
    375c:	orr	w5, w0, w5
    3760:	cbnz	w5, 36b8 <GOMP_task+0x160>
    3764:	b	35d8 <GOMP_task+0x80>
    3768:	add	x20, x20, #0x500
    376c:	mov	w0, #0x1                   	// #1
    3770:	ldaxr	w1, [x20]
    3774:	cbnz	w1, 3780 <GOMP_task+0x228>
    3778:	stxr	w2, w0, [x20]
    377c:	cbnz	w2, 3770 <GOMP_task+0x218>
    3780:	cmp	w1, #0x0
    3784:	b.ne	3dcc <GOMP_task+0x874>  // b.any
    3788:	ldr	x1, [x29, #152]
    378c:	cbnz	x1, 3bd4 <GOMP_task+0x67c>
    3790:	ldr	x1, [x29, #168]
    3794:	mov	x0, x1
    3798:	cbz	x1, 37b0 <GOMP_task+0x258>
    379c:	nop
    37a0:	stur	xzr, [x0, #-112]
    37a4:	ldr	x0, [x0]
    37a8:	cmp	x1, x0
    37ac:	b.ne	37a0 <GOMP_task+0x248>  // b.any
    37b0:	ldxr	w0, [x20]
    37b4:	stlxr	w1, wzr, [x20]
    37b8:	cbnz	w1, 37b0 <GOMP_task+0x258>
    37bc:	tbz	w0, #31, 366c <GOMP_task+0x114>
    37c0:	mov	x0, x20
    37c4:	bl	0 <gomp_mutex_unlock_slow>
    37c8:	b	366c <GOMP_task+0x114>
    37cc:	str	w25, [x29, #232]
    37d0:	strb	wzr, [x29, #349]
    37d4:	b	3644 <GOMP_task+0xec>
    37d8:	mov	x10, #0x0                   	// #0
    37dc:	ldr	x11, [x19, #40]
    37e0:	cbz	w2, 37f4 <GOMP_task+0x29c>
    37e4:	ldr	x10, [x7]
    37e8:	cbz	x10, 3c1c <GOMP_task+0x6c4>
    37ec:	add	x10, x10, x10, lsl #2
    37f0:	lsl	x10, x10, #3
    37f4:	add	x4, x28, #0xcf
    37f8:	stp	x7, x1, [x29, #96]
    37fc:	add	x0, x3, x4
    3800:	add	x0, x0, x10
    3804:	stp	x11, x4, [x29, #112]
    3808:	neg	x28, x28
    380c:	stp	x3, x10, [x29, #128]
    3810:	bl	0 <gomp_malloc>
    3814:	add	x6, x24, x21
    3818:	ldp	x11, x4, [x29, #112]
    381c:	adrp	x2, 0 <gomp_global_icv>
    3820:	ldp	x3, x10, [x29, #128]
    3824:	add	x2, x2, #0x0
    3828:	ldr	x5, [x6, #80]
    382c:	mov	x23, x0
    3830:	str	x19, [x0], #144
    3834:	cmp	x5, #0x0
    3838:	add	x5, x5, #0x90
    383c:	csel	x2, x2, x5, eq  // eq = none
    3840:	add	x4, x10, x4
    3844:	add	x4, x23, x4
    3848:	and	x28, x4, x28
    384c:	ldp	x4, x5, [x2]
    3850:	stp	x4, x5, [x23, #144]
    3854:	ldp	x4, x5, [x2, #16]
    3858:	stp	x4, x5, [x0, #16]
    385c:	ldr	x2, [x2, #32]
    3860:	str	x2, [x0, #32]
    3864:	mov	x0, #0x1                   	// #1
    3868:	str	x0, [x23, #200]
    386c:	ldp	x7, x1, [x29, #96]
    3870:	str	xzr, [x23, #8]
    3874:	ldrb	w0, [x19, #204]
    3878:	stp	xzr, xzr, [x23, #24]
    387c:	str	x11, [x23, #40]
    3880:	str	xzr, [x23, #48]
    3884:	str	xzr, [x23, #56]
    3888:	str	xzr, [x23, #64]
    388c:	str	xzr, [x23, #72]
    3890:	str	x23, [x6, #80]
    3894:	str	w25, [x23, #88]
    3898:	stp	x7, x11, [x29, #120]
    389c:	strb	w0, [x23, #204]
    38a0:	cbz	x27, 3bfc <GOMP_task+0x6a4>
    38a4:	mov	x0, x28
    38a8:	blr	x27
    38ac:	ldp	x7, x11, [x29, #120]
    38b0:	mov	w0, #0x1                   	// #1
    38b4:	ldr	x10, [x29, #136]
    38b8:	adrp	x9, 0 <gomp_cancel_var>
    38bc:	strb	w0, [x23, #206]
    38c0:	add	x21, x24, x21
    38c4:	stp	x26, x28, [x23, #184]
    38c8:	add	x26, x20, #0x500
    38cc:	ubfx	x22, x22, #1, #1
    38d0:	mov	w1, #0x2                   	// #2
    38d4:	mov	w0, #0x1                   	// #1
    38d8:	str	x19, [x21, #80]
    38dc:	str	w1, [x23, #200]
    38e0:	strb	w22, [x23, #205]
    38e4:	ldaxr	w1, [x26]
    38e8:	cbnz	w1, 38f4 <GOMP_task+0x39c>
    38ec:	stxr	w2, w0, [x26]
    38f0:	cbnz	w2, 38e4 <GOMP_task+0x38c>
    38f4:	cmp	w1, #0x0
    38f8:	b.ne	3dec <GOMP_task+0x894>  // b.any
    38fc:	ldrb	w0, [x9]
    3900:	cbnz	w0, 3b60 <GOMP_task+0x608>
    3904:	cbz	x11, 3914 <GOMP_task+0x3bc>
    3908:	ldr	x0, [x11, #56]
    390c:	add	x0, x0, #0x1
    3910:	str	x0, [x11, #56]
    3914:	cbz	x10, 3938 <GOMP_task+0x3e0>
    3918:	mov	x0, x23
    391c:	mov	x2, x7
    3920:	mov	x1, x19
    3924:	str	x11, [x29, #136]
    3928:	bl	518 <gomp_task_handle_depend>
    392c:	ldr	x0, [x23, #80]
    3930:	ldr	x11, [x29, #136]
    3934:	cbnz	x0, 3bb8 <GOMP_task+0x660>
    3938:	ldr	x0, [x19, #8]
    393c:	add	x24, x19, #0x8
    3940:	add	x21, x23, #0x70
    3944:	cbnz	x0, 3c60 <GOMP_task+0x708>
    3948:	cmp	w25, #0x0
    394c:	ldr	x0, [x19, #24]
    3950:	b.gt	3c24 <GOMP_task+0x6cc>
    3954:	cbz	x0, 3be4 <GOMP_task+0x68c>
    3958:	ldr	x1, [x0, #8]
    395c:	stp	x0, x1, [x23, #112]
    3960:	str	x21, [x19, #24]
    3964:	ldr	x0, [x23, #112]
    3968:	str	x21, [x0, #8]
    396c:	ldr	x0, [x23, #120]
    3970:	str	x21, [x0]
    3974:	cbz	x11, 3a88 <GOMP_task+0x530>
    3978:	ldr	x0, [x11, #8]
    397c:	add	x24, x11, #0x8
    3980:	add	x21, x23, #0x80
    3984:	cbnz	x0, 3a50 <GOMP_task+0x4f8>
    3988:	cmp	w25, #0x0
    398c:	ldr	x0, [x11, #24]
    3990:	b.gt	3a14 <GOMP_task+0x4bc>
    3994:	cbz	x0, 3b54 <GOMP_task+0x5fc>
    3998:	ldr	x1, [x0, #8]
    399c:	stp	x0, x1, [x23, #128]
    39a0:	str	x21, [x11, #24]
    39a4:	ldr	x0, [x23, #128]
    39a8:	str	x21, [x0, #8]
    39ac:	ldr	x0, [x23, #136]
    39b0:	str	x21, [x0]
    39b4:	ldr	x0, [x20, #1288]
    39b8:	add	x21, x20, #0x508
    39bc:	cbnz	x0, 3cd8 <GOMP_task+0x780>
    39c0:	ldr	x0, [x20, #1304]
    39c4:	b	3aa0 <GOMP_task+0x548>
    39c8:	str	w25, [x29, #232]
    39cc:	b	3634 <GOMP_task+0xdc>
    39d0:	add	x3, x3, x28
    39d4:	mov	x22, sp
    39d8:	add	x3, x3, #0xe
    39dc:	sub	x0, x28, #0x1
    39e0:	and	x3, x3, #0xfffffffffffffff0
    39e4:	neg	x28, x28
    39e8:	sub	sp, sp, x3
    39ec:	add	x0, sp, x0
    39f0:	and	x28, x0, x28
    39f4:	mov	x0, x28
    39f8:	blr	x27
    39fc:	mov	x0, x28
    3a00:	blr	x26
    3a04:	mov	sp, x22
    3a08:	b	365c <GOMP_task+0x104>
    3a0c:	bl	0 <free>
    3a10:	b	367c <GOMP_task+0x124>
    3a14:	cbz	x0, 3d94 <GOMP_task+0x83c>
    3a18:	mov	x0, #0x28                  	// #40
    3a1c:	str	x11, [x29, #136]
    3a20:	bl	0 <gomp_malloc>
    3a24:	mov	x1, x0
    3a28:	ldp	x3, x2, [x24, #16]
    3a2c:	mov	x0, x24
    3a30:	str	wzr, [x1]
    3a34:	stp	x3, x2, [x1, #8]
    3a38:	stp	xzr, xzr, [x1, #24]
    3a3c:	bl	0 <prio_splay_tree_insert>
    3a40:	ldr	x11, [x29, #136]
    3a44:	ldr	x0, [x11, #8]
    3a48:	str	xzr, [x24, #16]
    3a4c:	cbz	x0, 3d94 <GOMP_task+0x83c>
    3a50:	add	x1, x29, #0x90
    3a54:	mov	x0, x24
    3a58:	str	w25, [x29, #144]
    3a5c:	bl	0 <prio_splay_tree_lookup>
    3a60:	cbz	x0, 3d94 <GOMP_task+0x83c>
    3a64:	ldr	x1, [x0, #8]
    3a68:	cbz	x1, 3dc0 <GOMP_task+0x868>
    3a6c:	ldr	x2, [x1, #8]
    3a70:	stp	x1, x2, [x23, #128]
    3a74:	str	x21, [x0, #8]
    3a78:	ldr	x0, [x23, #128]
    3a7c:	str	x21, [x0, #8]
    3a80:	ldr	x0, [x23, #136]
    3a84:	str	x21, [x0]
    3a88:	ldr	x0, [x20, #1288]
    3a8c:	add	x21, x20, #0x508
    3a90:	cbnz	x0, 3cd8 <GOMP_task+0x780>
    3a94:	cmp	w25, #0x0
    3a98:	ldr	x0, [x21, #16]
    3a9c:	b.gt	3ca4 <GOMP_task+0x74c>
    3aa0:	add	x1, x23, #0x60
    3aa4:	cbz	x0, 3bf0 <GOMP_task+0x698>
    3aa8:	ldr	x2, [x0, #8]
    3aac:	stp	x0, x2, [x23, #96]
    3ab0:	str	x1, [x0, #8]
    3ab4:	ldr	x0, [x23, #104]
    3ab8:	str	x1, [x0]
    3abc:	ldr	w0, [x20, #1324]
    3ac0:	ldrb	w19, [x19, #204]
    3ac4:	add	w0, w0, #0x1
    3ac8:	str	w0, [x20, #1324]
    3acc:	ldr	w0, [x20, #1328]
    3ad0:	eor	w19, w19, #0x1
    3ad4:	ldr	w2, [x20, #132]
    3ad8:	ldr	w1, [x20, #1320]
    3adc:	add	w19, w19, w0
    3ae0:	ldr	w21, [x20]
    3ae4:	orr	w2, w2, #0x1
    3ae8:	add	w1, w1, #0x1
    3aec:	str	w2, [x20, #132]
    3af0:	str	w1, [x20, #1320]
    3af4:	ldxr	w0, [x26]
    3af8:	stlxr	w1, wzr, [x26]
    3afc:	cbnz	w1, 3af4 <GOMP_task+0x59c>
    3b00:	tbnz	w0, #31, 3d10 <GOMP_task+0x7b8>
    3b04:	cmp	w19, w21
    3b08:	b.cs	3688 <GOMP_task+0x130>  // b.hs, b.nlast
    3b0c:	add	x0, x20, #0x80
    3b10:	mov	w1, #0x1                   	// #1
    3b14:	bl	0 <gomp_team_barrier_wake>
    3b18:	b	3688 <GOMP_task+0x130>
    3b1c:	ldr	w0, [x20, #132]
    3b20:	tbnz	w0, #2, 3688 <GOMP_task+0x130>
    3b24:	ldr	x19, [x10, #80]
    3b28:	ldr	x0, [x19, #40]
    3b2c:	cbz	x0, 35b8 <GOMP_task+0x60>
    3b30:	ldrb	w2, [x0, #49]
    3b34:	cbnz	w2, 3688 <GOMP_task+0x130>
    3b38:	ldrb	w2, [x0, #50]
    3b3c:	cbz	w2, 35b8 <GOMP_task+0x60>
    3b40:	ldr	x0, [x0]
    3b44:	cbz	x0, 35b8 <GOMP_task+0x60>
    3b48:	ldrb	w0, [x0, #49]
    3b4c:	cbz	w0, 35b8 <GOMP_task+0x60>
    3b50:	b	3688 <GOMP_task+0x130>
    3b54:	stp	x21, x21, [x23, #128]
    3b58:	str	x21, [x11, #24]
    3b5c:	b	39b4 <GOMP_task+0x45c>
    3b60:	ldrb	w0, [x23, #206]
    3b64:	cbnz	w0, 3904 <GOMP_task+0x3ac>
    3b68:	ldr	w0, [x20, #132]
    3b6c:	tbnz	w0, #2, 3b94 <GOMP_task+0x63c>
    3b70:	cbz	x11, 3914 <GOMP_task+0x3bc>
    3b74:	ldrb	w0, [x11, #49]
    3b78:	cbnz	w0, 3b94 <GOMP_task+0x63c>
    3b7c:	ldrb	w0, [x11, #50]
    3b80:	cbz	w0, 3908 <GOMP_task+0x3b0>
    3b84:	ldr	x0, [x11]
    3b88:	cbz	x0, 3908 <GOMP_task+0x3b0>
    3b8c:	ldrb	w0, [x0, #49]
    3b90:	cbz	w0, 3908 <GOMP_task+0x3b0>
    3b94:	ldxr	w0, [x26]
    3b98:	stlxr	w1, wzr, [x26]
    3b9c:	cbnz	w1, 3b94 <GOMP_task+0x63c>
    3ba0:	tbnz	w0, #31, 3de0 <GOMP_task+0x888>
    3ba4:	ldr	x0, [x23, #56]
    3ba8:	cbnz	x0, 3dd8 <GOMP_task+0x880>
    3bac:	mov	x0, x23
    3bb0:	bl	0 <free>
    3bb4:	b	3688 <GOMP_task+0x130>
    3bb8:	ldxr	w0, [x26]
    3bbc:	stlxr	w1, wzr, [x26]
    3bc0:	cbnz	w1, 3bb8 <GOMP_task+0x660>
    3bc4:	tbz	w0, #31, 3688 <GOMP_task+0x130>
    3bc8:	mov	x0, x26
    3bcc:	bl	0 <gomp_mutex_unlock_slow>
    3bd0:	b	3688 <GOMP_task+0x130>
    3bd4:	add	x0, x19, #0x8
    3bd8:	bl	e0 <gomp_clear_parent_in_tree>
    3bdc:	str	xzr, [x29, #152]
    3be0:	b	37b0 <GOMP_task+0x258>
    3be4:	stp	x21, x21, [x23, #112]
    3be8:	str	x21, [x19, #24]
    3bec:	b	3974 <GOMP_task+0x41c>
    3bf0:	stp	x1, x1, [x23, #96]
    3bf4:	str	x1, [x20, #1304]
    3bf8:	b	3abc <GOMP_task+0x564>
    3bfc:	mov	x2, x3
    3c00:	mov	x0, x28
    3c04:	str	x10, [x29, #136]
    3c08:	bl	0 <memcpy>
    3c0c:	adrp	x9, 0 <gomp_cancel_var>
    3c10:	ldp	x7, x11, [x29, #120]
    3c14:	ldr	x10, [x29, #136]
    3c18:	b	38c0 <GOMP_task+0x368>
    3c1c:	ldr	x10, [x7, #8]
    3c20:	b	37ec <GOMP_task+0x294>
    3c24:	cbz	x0, 3d1c <GOMP_task+0x7c4>
    3c28:	mov	x0, #0x28                  	// #40
    3c2c:	str	x11, [x29, #136]
    3c30:	bl	0 <gomp_malloc>
    3c34:	mov	x1, x0
    3c38:	ldp	x3, x2, [x24, #16]
    3c3c:	mov	x0, x24
    3c40:	str	wzr, [x1]
    3c44:	stp	x3, x2, [x1, #8]
    3c48:	stp	xzr, xzr, [x1, #24]
    3c4c:	bl	0 <prio_splay_tree_insert>
    3c50:	str	xzr, [x24, #16]
    3c54:	ldr	x0, [x24]
    3c58:	ldr	x11, [x29, #136]
    3c5c:	cbz	x0, 3d1c <GOMP_task+0x7c4>
    3c60:	add	x1, x29, #0x90
    3c64:	mov	x0, x24
    3c68:	str	x11, [x29, #136]
    3c6c:	str	w25, [x29, #144]
    3c70:	bl	0 <prio_splay_tree_lookup>
    3c74:	ldr	x11, [x29, #136]
    3c78:	cbz	x0, 3d1c <GOMP_task+0x7c4>
    3c7c:	ldr	x1, [x0, #8]
    3c80:	cbz	x1, 3d88 <GOMP_task+0x830>
    3c84:	ldr	x2, [x1, #8]
    3c88:	stp	x1, x2, [x23, #112]
    3c8c:	str	x21, [x0, #8]
    3c90:	ldr	x0, [x23, #112]
    3c94:	str	x21, [x0, #8]
    3c98:	ldr	x0, [x23, #120]
    3c9c:	str	x21, [x0]
    3ca0:	b	3974 <GOMP_task+0x41c>
    3ca4:	cbz	x0, 3d50 <GOMP_task+0x7f8>
    3ca8:	mov	x0, #0x28                  	// #40
    3cac:	bl	0 <gomp_malloc>
    3cb0:	ldp	x3, x2, [x21, #16]
    3cb4:	mov	x1, x0
    3cb8:	mov	x0, x21
    3cbc:	str	wzr, [x1]
    3cc0:	stp	x3, x2, [x1, #8]
    3cc4:	stp	xzr, xzr, [x1, #24]
    3cc8:	bl	0 <prio_splay_tree_insert>
    3ccc:	ldr	x0, [x20, #1288]
    3cd0:	str	xzr, [x21, #16]
    3cd4:	cbz	x0, 3d50 <GOMP_task+0x7f8>
    3cd8:	add	x1, x29, #0x90
    3cdc:	mov	x0, x21
    3ce0:	str	w25, [x29, #144]
    3ce4:	bl	0 <prio_splay_tree_lookup>
    3ce8:	cbz	x0, 3d50 <GOMP_task+0x7f8>
    3cec:	ldr	x1, [x0, #8]
    3cf0:	add	x2, x23, #0x60
    3cf4:	cbz	x1, 3d7c <GOMP_task+0x824>
    3cf8:	ldr	x0, [x1, #8]
    3cfc:	stp	x1, x0, [x23, #96]
    3d00:	str	x2, [x1, #8]
    3d04:	ldr	x0, [x23, #104]
    3d08:	str	x2, [x0]
    3d0c:	b	3abc <GOMP_task+0x564>
    3d10:	mov	x0, x26
    3d14:	bl	0 <gomp_mutex_unlock_slow>
    3d18:	b	3b04 <GOMP_task+0x5ac>
    3d1c:	mov	x0, #0x28                  	// #40
    3d20:	str	x11, [x29, #136]
    3d24:	bl	0 <gomp_malloc>
    3d28:	mov	x22, x0
    3d2c:	mov	x1, x22
    3d30:	mov	x0, x24
    3d34:	str	w25, [x22]
    3d38:	stp	xzr, xzr, [x22, #8]
    3d3c:	stp	xzr, xzr, [x22, #24]
    3d40:	bl	0 <prio_splay_tree_insert>
    3d44:	mov	x0, x22
    3d48:	ldr	x11, [x29, #136]
    3d4c:	b	3c7c <GOMP_task+0x724>
    3d50:	mov	x0, #0x28                  	// #40
    3d54:	bl	0 <gomp_malloc>
    3d58:	mov	x1, x0
    3d5c:	mov	x0, x21
    3d60:	mov	x21, x1
    3d64:	str	w25, [x1]
    3d68:	stp	xzr, xzr, [x1, #8]
    3d6c:	stp	xzr, xzr, [x1, #24]
    3d70:	bl	0 <prio_splay_tree_insert>
    3d74:	mov	x0, x21
    3d78:	b	3cec <GOMP_task+0x794>
    3d7c:	stp	x2, x2, [x23, #96]
    3d80:	str	x2, [x0, #8]
    3d84:	b	3abc <GOMP_task+0x564>
    3d88:	stp	x21, x21, [x23, #112]
    3d8c:	str	x21, [x0, #8]
    3d90:	b	3974 <GOMP_task+0x41c>
    3d94:	mov	x0, #0x28                  	// #40
    3d98:	bl	0 <gomp_malloc>
    3d9c:	mov	x22, x0
    3da0:	mov	x0, x24
    3da4:	mov	x1, x22
    3da8:	str	w25, [x22]
    3dac:	stp	xzr, xzr, [x22, #8]
    3db0:	stp	xzr, xzr, [x22, #24]
    3db4:	bl	0 <prio_splay_tree_insert>
    3db8:	mov	x0, x22
    3dbc:	b	3a64 <GOMP_task+0x50c>
    3dc0:	stp	x21, x21, [x23, #128]
    3dc4:	str	x21, [x0, #8]
    3dc8:	b	3a88 <GOMP_task+0x530>
    3dcc:	mov	x0, x20
    3dd0:	bl	0 <gomp_mutex_lock_slow>
    3dd4:	b	3788 <GOMP_task+0x230>
    3dd8:	bl	0 <free>
    3ddc:	b	3bac <GOMP_task+0x654>
    3de0:	mov	x0, x26
    3de4:	bl	0 <gomp_mutex_unlock_slow>
    3de8:	b	3ba4 <GOMP_task+0x64c>
    3dec:	mov	x0, x26
    3df0:	stp	x7, x11, [x29, #120]
    3df4:	str	x10, [x29, #136]
    3df8:	bl	0 <gomp_mutex_lock_slow>
    3dfc:	adrp	x9, 0 <gomp_cancel_var>
    3e00:	ldp	x7, x11, [x29, #120]
    3e04:	ldr	x10, [x29, #136]
    3e08:	b	38fc <GOMP_task+0x3a4>
    3e0c:	nop

0000000000003e10 <GOMP_taskwait_depend>:
    3e10:	adrp	x1, 0 <gomp_tls_data>
    3e14:	ldr	x1, [x1]
    3e18:	mrs	x2, tpidr_el0
    3e1c:	adrp	x3, 0 <gomp_cancel_var>
    3e20:	add	x1, x2, x1
    3e24:	ldrb	w3, [x3]
    3e28:	ldr	x2, [x1, #16]
    3e2c:	cmp	x2, #0x0
    3e30:	cset	w4, ne  // ne = any
    3e34:	tst	w4, w3
    3e38:	b.ne	3e50 <GOMP_taskwait_depend+0x40>  // b.any
    3e3c:	ldr	x1, [x1, #80]
    3e40:	cbz	x1, 3e84 <GOMP_taskwait_depend+0x74>
    3e44:	ldr	x1, [x1, #56]
    3e48:	cbz	x1, 3e84 <GOMP_taskwait_depend+0x74>
    3e4c:	b	2dd8 <gomp_task_maybe_wait_for_dependencies>
    3e50:	ldr	w2, [x2, #132]
    3e54:	tbnz	w2, #2, 3e84 <GOMP_taskwait_depend+0x74>
    3e58:	ldr	x1, [x1, #80]
    3e5c:	ldr	x2, [x1, #40]
    3e60:	cbz	x2, 3e44 <GOMP_taskwait_depend+0x34>
    3e64:	ldrb	w3, [x2, #49]
    3e68:	cbnz	w3, 3e84 <GOMP_taskwait_depend+0x74>
    3e6c:	ldrb	w3, [x2, #50]
    3e70:	cbz	w3, 3e44 <GOMP_taskwait_depend+0x34>
    3e74:	ldr	x2, [x2]
    3e78:	cbz	x2, 3e44 <GOMP_taskwait_depend+0x34>
    3e7c:	ldrb	w2, [x2, #49]
    3e80:	cbz	w2, 3e44 <GOMP_taskwait_depend+0x34>
    3e84:	ret

0000000000003e88 <GOMP_taskyield>:
    3e88:	ret
    3e8c:	nop

0000000000003e90 <GOMP_taskgroup_start>:
    3e90:	adrp	x0, 0 <gomp_tls_data>
    3e94:	ldr	x0, [x0]
    3e98:	mrs	x1, tpidr_el0
    3e9c:	add	x0, x1, x0
    3ea0:	ldr	x1, [x0, #16]
    3ea4:	cbz	x1, 3f00 <GOMP_taskgroup_start+0x70>
    3ea8:	stp	x29, x30, [sp, #-32]!
    3eac:	mov	x29, sp
    3eb0:	stp	x19, x20, [sp, #16]
    3eb4:	ldr	x20, [x0, #80]
    3eb8:	mov	x0, #0x40                  	// #64
    3ebc:	ldr	x19, [x20, #40]
    3ec0:	bl	0 <gomp_malloc>
    3ec4:	mov	x1, x0
    3ec8:	str	x19, [x1], #8
    3ecc:	str	xzr, [x0, #8]
    3ed0:	stp	xzr, xzr, [x1, #16]
    3ed4:	cbz	x19, 3edc <GOMP_taskgroup_start+0x4c>
    3ed8:	ldr	x19, [x19, #40]
    3edc:	str	x19, [x0, #40]
    3ee0:	strh	wzr, [x0, #48]
    3ee4:	strb	wzr, [x0, #50]
    3ee8:	str	wzr, [x0, #52]
    3eec:	str	xzr, [x0, #56]
    3ef0:	str	x0, [x20, #40]
    3ef4:	ldp	x19, x20, [sp, #16]
    3ef8:	ldp	x29, x30, [sp], #32
    3efc:	ret
    3f00:	ret
    3f04:	nop

0000000000003f08 <GOMP_taskgroup_end>:
    3f08:	stp	x29, x30, [sp, #-144]!
    3f0c:	mov	x29, sp
    3f10:	stp	x23, x24, [sp, #48]
    3f14:	adrp	x24, 0 <gomp_tls_data>
    3f18:	ldr	x24, [x24]
    3f1c:	stp	x25, x26, [sp, #64]
    3f20:	mrs	x25, tpidr_el0
    3f24:	add	x0, x25, x24
    3f28:	stp	x21, x22, [sp, #32]
    3f2c:	ldr	x22, [x0, #16]
    3f30:	cbz	x22, 41bc <GOMP_taskgroup_end+0x2b4>
    3f34:	ldr	x23, [x0, #80]
    3f38:	ldr	x21, [x23, #40]
    3f3c:	cbz	x21, 44f0 <GOMP_taskgroup_end+0x5e8>
    3f40:	add	x0, x21, #0x38
    3f44:	ldar	x0, [x0]
    3f48:	cbz	x0, 41ac <GOMP_taskgroup_end+0x2a4>
    3f4c:	stp	x19, x20, [sp, #16]
    3f50:	add	x20, x22, #0x500
    3f54:	mov	w0, #0x1                   	// #1
    3f58:	stp	x27, x28, [sp, #80]
    3f5c:	ldaxr	w1, [x20]
    3f60:	cbnz	w1, 3f6c <GOMP_taskgroup_end+0x64>
    3f64:	stxr	w2, w0, [x20]
    3f68:	cbnz	w2, 3f5c <GOMP_taskgroup_end+0x54>
    3f6c:	cmp	w1, #0x0
    3f70:	b.ne	4544 <GOMP_taskgroup_end+0x63c>  // b.any
    3f74:	add	x0, x22, #0x508
    3f78:	str	x0, [sp, #104]
    3f7c:	ldr	x0, [x21, #8]
    3f80:	add	x26, x21, #0x8
    3f84:	mov	w27, #0x0                   	// #0
    3f88:	mov	x28, #0x0                   	// #0
    3f8c:	cbnz	x0, 4148 <GOMP_taskgroup_end+0x240>
    3f90:	ldr	x19, [x26, #16]
    3f94:	cbnz	x19, 4200 <GOMP_taskgroup_end+0x2f8>
    3f98:	ldr	x0, [x21, #56]
    3f9c:	cbz	x0, 4178 <GOMP_taskgroup_end+0x270>
    3fa0:	ldr	x0, [x23, #8]
    3fa4:	cbnz	x0, 449c <GOMP_taskgroup_end+0x594>
    3fa8:	ldr	x19, [x23, #24]
    3fac:	cbnz	x19, 4248 <GOMP_taskgroup_end+0x340>
    3fb0:	mov	w0, #0x1                   	// #1
    3fb4:	mov	x19, #0x0                   	// #0
    3fb8:	strb	w0, [x21, #48]
    3fbc:	ldxr	w0, [x20]
    3fc0:	stlxr	w1, wzr, [x20]
    3fc4:	cbnz	w1, 3fbc <GOMP_taskgroup_end+0xb4>
    3fc8:	tbnz	w0, #31, 41e0 <GOMP_taskgroup_end+0x2d8>
    3fcc:	cbnz	w27, 41d0 <GOMP_taskgroup_end+0x2c8>
    3fd0:	cbz	x28, 3fe4 <GOMP_taskgroup_end+0xdc>
    3fd4:	ldr	x0, [x28, #56]
    3fd8:	cbnz	x0, 43a8 <GOMP_taskgroup_end+0x4a0>
    3fdc:	mov	x0, x28
    3fe0:	bl	0 <free>
    3fe4:	cbz	x19, 4280 <GOMP_taskgroup_end+0x378>
    3fe8:	ldp	x1, x0, [x19, #184]
    3fec:	add	x27, x25, x24
    3ff0:	str	x19, [x27, #80]
    3ff4:	cbz	x1, 4308 <GOMP_taskgroup_end+0x400>
    3ff8:	blr	x1
    3ffc:	add	x0, x25, x24
    4000:	str	x23, [x0, #80]
    4004:	mov	w0, #0x1                   	// #1
    4008:	ldaxr	w1, [x20]
    400c:	cbnz	w1, 4018 <GOMP_taskgroup_end+0x110>
    4010:	stxr	w2, w0, [x20]
    4014:	cbnz	w2, 4008 <GOMP_taskgroup_end+0x100>
    4018:	cmp	w1, #0x0
    401c:	mov	w27, #0x0                   	// #0
    4020:	b.ne	4550 <GOMP_taskgroup_end+0x648>  // b.any
    4024:	ldr	x28, [x19, #72]
    4028:	ldr	x4, [x19]
    402c:	cbz	x28, 4058 <GOMP_taskgroup_end+0x150>
    4030:	cbz	x4, 4258 <GOMP_taskgroup_end+0x350>
    4034:	mov	x0, x19
    4038:	bl	8d0 <gomp_task_run_post_handle_depend_hash>
    403c:	ldr	x0, [x19, #48]
    4040:	cbz	x0, 439c <GOMP_taskgroup_end+0x494>
    4044:	mov	x1, x22
    4048:	mov	x0, x19
    404c:	bl	e88 <gomp_task_run_post_handle_dependers>
    4050:	mov	x28, x0
    4054:	ldr	x4, [x19]
    4058:	cbz	x4, 408c <GOMP_taskgroup_end+0x184>
    405c:	ldrb	w0, [x19, #207]
    4060:	cbnz	w0, 43b0 <GOMP_taskgroup_end+0x4a8>
    4064:	ldr	x0, [x4, #8]
    4068:	add	x2, x19, #0x70
    406c:	cbnz	x0, 4410 <GOMP_taskgroup_end+0x508>
    4070:	ldp	x0, x1, [x19, #112]
    4074:	ldr	x7, [x4, #24]
    4078:	cmp	x2, x7
    407c:	str	x0, [x1]
    4080:	str	x1, [x0, #8]
    4084:	b.eq	41f0 <GOMP_taskgroup_end+0x2e8>  // b.none
    4088:	stp	xzr, xzr, [x19, #112]
    408c:	ldr	x1, [x19, #8]
    4090:	cbnz	x1, 4270 <GOMP_taskgroup_end+0x368>
    4094:	ldr	x0, [x19, #24]
    4098:	mov	x1, x0
    409c:	cbz	x0, 40b0 <GOMP_taskgroup_end+0x1a8>
    40a0:	stur	xzr, [x1, #-112]
    40a4:	ldr	x1, [x1]
    40a8:	cmp	x0, x1
    40ac:	b.ne	40a0 <GOMP_taskgroup_end+0x198>  // b.any
    40b0:	ldr	x4, [x19, #40]
    40b4:	cbz	x4, 4108 <GOMP_taskgroup_end+0x200>
    40b8:	ldr	x0, [x4, #8]
    40bc:	add	x2, x19, #0x80
    40c0:	cbnz	x0, 4478 <GOMP_taskgroup_end+0x570>
    40c4:	ldp	x0, x1, [x19, #128]
    40c8:	add	x5, x4, #0x10
    40cc:	ldr	x8, [x5, #8]
    40d0:	mov	w7, #0x0                   	// #0
    40d4:	cmp	x2, x8
    40d8:	str	x0, [x1]
    40dc:	str	x1, [x0, #8]
    40e0:	b.eq	42e0 <GOMP_taskgroup_end+0x3d8>  // b.none
    40e4:	ldr	x0, [x4, #56]
    40e8:	stp	xzr, xzr, [x19, #128]
    40ec:	cmp	x0, #0x1
    40f0:	b.ls	42fc <GOMP_taskgroup_end+0x3f4>  // b.plast
    40f4:	sub	x0, x0, #0x1
    40f8:	str	x0, [x4, #56]
    40fc:	cbz	w7, 4108 <GOMP_taskgroup_end+0x200>
    4100:	ldrb	w0, [x4, #48]
    4104:	cbnz	w0, 4360 <GOMP_taskgroup_end+0x458>
    4108:	ldr	w0, [x22, #1320]
    410c:	cmp	x28, #0x1
    4110:	sub	w0, w0, #0x1
    4114:	str	w0, [x22, #1320]
    4118:	b.ls	413c <GOMP_taskgroup_end+0x234>  // b.plast
    411c:	ldrb	w0, [x23, #204]
    4120:	ldr	w6, [x22]
    4124:	ldr	w1, [x22, #1328]
    4128:	eor	w0, w0, #0x1
    412c:	sub	w6, w6, w1
    4130:	sub	w27, w6, w0
    4134:	cmp	x28, w27, sxtw
    4138:	csel	w27, w28, w27, cc  // cc = lo, ul, last
    413c:	mov	x28, x19
    4140:	ldr	x0, [x21, #8]
    4144:	cbz	x0, 3f90 <GOMP_taskgroup_end+0x88>
    4148:	ldr	x3, [sp, #104]
    414c:	add	x4, sp, #0x8f
    4150:	mov	x1, x26
    4154:	mov	w2, #0x0                   	// #0
    4158:	mov	w0, #0x2                   	// #2
    415c:	bl	0 <priority_tree_next_task>
    4160:	mov	x19, x0
    4164:	cbnz	x0, 420c <GOMP_taskgroup_end+0x304>
    4168:	ldr	x0, [x26]
    416c:	ldr	x19, [x0, #8]
    4170:	sub	x19, x19, #0x80
    4174:	b	420c <GOMP_taskgroup_end+0x304>
    4178:	ldxr	w0, [x20]
    417c:	stlxr	w1, wzr, [x20]
    4180:	cbnz	w1, 4178 <GOMP_taskgroup_end+0x270>
    4184:	tbz	w0, #31, 4190 <GOMP_taskgroup_end+0x288>
    4188:	mov	x0, x20
    418c:	bl	0 <gomp_mutex_unlock_slow>
    4190:	cbz	x28, 44d8 <GOMP_taskgroup_end+0x5d0>
    4194:	ldr	x0, [x28, #56]
    4198:	cbnz	x0, 450c <GOMP_taskgroup_end+0x604>
    419c:	mov	x0, x28
    41a0:	bl	0 <free>
    41a4:	ldp	x19, x20, [sp, #16]
    41a8:	ldp	x27, x28, [sp, #80]
    41ac:	ldr	x0, [x21]
    41b0:	str	x0, [x23, #40]
    41b4:	mov	x0, x21
    41b8:	bl	0 <free>
    41bc:	ldp	x21, x22, [sp, #32]
    41c0:	ldp	x23, x24, [sp, #48]
    41c4:	ldp	x25, x26, [sp, #64]
    41c8:	ldp	x29, x30, [sp], #144
    41cc:	ret
    41d0:	mov	w1, w27
    41d4:	add	x0, x22, #0x80
    41d8:	bl	0 <gomp_team_barrier_wake>
    41dc:	b	3fd0 <GOMP_taskgroup_end+0xc8>
    41e0:	mov	x0, x20
    41e4:	bl	0 <gomp_mutex_unlock_slow>
    41e8:	cbz	w27, 3fd0 <GOMP_taskgroup_end+0xc8>
    41ec:	b	41d0 <GOMP_taskgroup_end+0x2c8>
    41f0:	cmp	x2, x0
    41f4:	b.eq	44cc <GOMP_taskgroup_end+0x5c4>  // b.none
    41f8:	str	x0, [x4, #24]
    41fc:	b	4088 <GOMP_taskgroup_end+0x180>
    4200:	sub	x19, x19, #0x80
    4204:	mov	w0, #0x1                   	// #1
    4208:	strb	w0, [sp, #143]
    420c:	ldr	w0, [x19, #200]
    4210:	cmp	w0, #0x2
    4214:	b.ne	3fb0 <GOMP_taskgroup_end+0xa8>  // b.any
    4218:	ldr	x1, [x19]
    421c:	mov	x2, x22
    4220:	mov	x0, x19
    4224:	bl	af0 <gomp_task_run_pre>
    4228:	tst	w0, #0xff
    422c:	b.eq	3fbc <GOMP_taskgroup_end+0xb4>  // b.none
    4230:	cbz	x28, 4024 <GOMP_taskgroup_end+0x11c>
    4234:	ldr	x0, [x28, #56]
    4238:	cbnz	x0, 4530 <GOMP_taskgroup_end+0x628>
    423c:	mov	x0, x28
    4240:	bl	0 <free>
    4244:	b	4024 <GOMP_taskgroup_end+0x11c>
    4248:	mov	w0, #0x1                   	// #1
    424c:	sub	x19, x19, #0x70
    4250:	strb	w0, [sp, #143]
    4254:	b	420c <GOMP_taskgroup_end+0x304>
    4258:	ldr	x0, [x19, #48]
    425c:	mov	x28, #0x0                   	// #0
    4260:	cbnz	x0, 4044 <GOMP_taskgroup_end+0x13c>
    4264:	ldr	x1, [x19, #8]
    4268:	cbz	x1, 4094 <GOMP_taskgroup_end+0x18c>
    426c:	nop
    4270:	add	x0, x19, #0x8
    4274:	bl	e0 <gomp_clear_parent_in_tree>
    4278:	str	xzr, [x19, #8]
    427c:	b	40b0 <GOMP_taskgroup_end+0x1a8>
    4280:	ldr	w1, [x21, #52]
    4284:	add	x0, x21, #0x34
    4288:	tst	x1, #0x7fffffff
    428c:	b.eq	4504 <GOMP_taskgroup_end+0x5fc>  // b.none
    4290:	sub	w3, w1, #0x1
    4294:	ldaxr	w2, [x0]
    4298:	cmp	w2, w1
    429c:	b.ne	42a8 <GOMP_taskgroup_end+0x3a0>  // b.any
    42a0:	stxr	w4, w3, [x0]
    42a4:	cmp	w4, #0x0
    42a8:	mov	w1, w2
    42ac:	b.ne	4288 <GOMP_taskgroup_end+0x380>  // b.any
    42b0:	mov	w0, #0x1                   	// #1
    42b4:	ldaxr	w1, [x20]
    42b8:	cbnz	w1, 42c4 <GOMP_taskgroup_end+0x3bc>
    42bc:	stxr	w2, w0, [x20]
    42c0:	cbnz	w2, 42b4 <GOMP_taskgroup_end+0x3ac>
    42c4:	cmp	w1, #0x0
    42c8:	mov	w27, #0x0                   	// #0
    42cc:	b.eq	413c <GOMP_taskgroup_end+0x234>  // b.none
    42d0:	mov	x0, x20
    42d4:	mov	x28, x19
    42d8:	bl	0 <gomp_mutex_lock_slow>
    42dc:	b	4140 <GOMP_taskgroup_end+0x238>
    42e0:	cmp	x2, x0
    42e4:	b.eq	44e4 <GOMP_taskgroup_end+0x5dc>  // b.none
    42e8:	str	x0, [x5, #8]
    42ec:	ldr	x0, [x4, #56]
    42f0:	stp	xzr, xzr, [x19, #128]
    42f4:	cmp	x0, #0x1
    42f8:	b.hi	40f4 <GOMP_taskgroup_end+0x1ec>  // b.pmore
    42fc:	add	x0, x4, #0x38
    4300:	stlr	xzr, [x0]
    4304:	b	40fc <GOMP_taskgroup_end+0x1f4>
    4308:	bl	0 <gomp_target_task_fn>
    430c:	tst	w0, #0xff
    4310:	b.eq	3ffc <GOMP_taskgroup_end+0xf4>  // b.none
    4314:	mov	w0, #0x1                   	// #1
    4318:	str	x23, [x27, #80]
    431c:	ldaxr	w1, [x20]
    4320:	cbnz	w1, 432c <GOMP_taskgroup_end+0x424>
    4324:	stxr	w2, w0, [x20]
    4328:	cbnz	w2, 431c <GOMP_taskgroup_end+0x414>
    432c:	cmp	w1, #0x0
    4330:	b.ne	4538 <GOMP_taskgroup_end+0x630>  // b.any
    4334:	ldr	x0, [x19, #192]
    4338:	mov	w1, #0x4                   	// #4
    433c:	ldr	w2, [x0, #44]
    4340:	str	w1, [x19, #200]
    4344:	cmp	w2, #0x5
    4348:	b.eq	4514 <GOMP_taskgroup_end+0x60c>  // b.none
    434c:	mov	x19, #0x0                   	// #0
    4350:	mov	w27, #0x0                   	// #0
    4354:	mov	x28, x19
    4358:	str	w1, [x0, #44]
    435c:	b	4140 <GOMP_taskgroup_end+0x238>
    4360:	ldr	w1, [x4, #52]
    4364:	add	x0, x4, #0x34
    4368:	strb	wzr, [x4, #48]
    436c:	add	w2, w1, #0x1
    4370:	and	w2, w2, #0x7fffffff
    4374:	ldxr	w4, [x0]
    4378:	cmp	w4, w1
    437c:	b.ne	4388 <GOMP_taskgroup_end+0x480>  // b.any
    4380:	stlxr	w3, w2, [x0]
    4384:	cmp	w3, #0x0
    4388:	mov	w1, w4
    438c:	b.ne	436c <GOMP_taskgroup_end+0x464>  // b.any
    4390:	tbz	w4, #31, 4108 <GOMP_taskgroup_end+0x200>
    4394:	bl	0 <gomp_sem_post_slow>
    4398:	b	4108 <GOMP_taskgroup_end+0x200>
    439c:	mov	x28, #0x0                   	// #0
    43a0:	ldr	x4, [x19]
    43a4:	b	4058 <GOMP_taskgroup_end+0x150>
    43a8:	bl	0 <free>
    43ac:	b	3fdc <GOMP_taskgroup_end+0xd4>
    43b0:	ldr	x1, [x4, #64]
    43b4:	ldr	x0, [x1, #8]
    43b8:	sub	x0, x0, #0x1
    43bc:	str	x0, [x1, #8]
    43c0:	cbnz	x0, 4064 <GOMP_taskgroup_end+0x15c>
    43c4:	ldrb	w0, [x1, #1]
    43c8:	cbz	w0, 4064 <GOMP_taskgroup_end+0x15c>
    43cc:	ldr	w2, [x1, #16]
    43d0:	add	x0, x1, #0x10
    43d4:	strb	wzr, [x1, #1]
    43d8:	add	w1, w2, #0x1
    43dc:	and	w1, w1, #0x7fffffff
    43e0:	ldxr	w5, [x0]
    43e4:	cmp	w5, w2
    43e8:	b.ne	43f4 <GOMP_taskgroup_end+0x4ec>  // b.any
    43ec:	stlxr	w3, w1, [x0]
    43f0:	cmp	w3, #0x0
    43f4:	mov	w2, w5
    43f8:	b.ne	43d8 <GOMP_taskgroup_end+0x4d0>  // b.any
    43fc:	tbz	w5, #31, 4064 <GOMP_taskgroup_end+0x15c>
    4400:	str	x4, [sp, #112]
    4404:	bl	0 <gomp_sem_post_slow>
    4408:	ldr	x4, [sp, #112]
    440c:	b	4064 <GOMP_taskgroup_end+0x15c>
    4410:	add	x1, x4, #0x8
    4414:	mov	w0, #0x1                   	// #1
    4418:	stp	x1, x4, [sp, #112]
    441c:	bl	0 <priority_tree_remove>
    4420:	ldp	x1, x4, [sp, #112]
    4424:	ldr	x0, [x4, #8]
    4428:	cbnz	x0, 4088 <GOMP_taskgroup_end+0x180>
    442c:	stlr	xzr, [x1]
    4430:	ldr	x0, [x4, #64]
    4434:	cbz	x0, 4088 <GOMP_taskgroup_end+0x180>
    4438:	ldrb	w1, [x0]
    443c:	cbz	w1, 4088 <GOMP_taskgroup_end+0x180>
    4440:	ldr	w1, [x0, #16]
    4444:	strb	wzr, [x0], #16
    4448:	add	w2, w1, #0x1
    444c:	and	w2, w2, #0x7fffffff
    4450:	ldxr	w4, [x0]
    4454:	cmp	w4, w1
    4458:	b.ne	4464 <GOMP_taskgroup_end+0x55c>  // b.any
    445c:	stlxr	w3, w2, [x0]
    4460:	cmp	w3, #0x0
    4464:	mov	w1, w4
    4468:	b.ne	4448 <GOMP_taskgroup_end+0x540>  // b.any
    446c:	tbz	w4, #31, 4088 <GOMP_taskgroup_end+0x180>
    4470:	bl	0 <gomp_sem_post_slow>
    4474:	b	4088 <GOMP_taskgroup_end+0x180>
    4478:	add	x1, x4, #0x8
    447c:	mov	w0, #0x2                   	// #2
    4480:	str	x4, [sp, #112]
    4484:	bl	0 <priority_tree_remove>
    4488:	ldr	x4, [sp, #112]
    448c:	ldr	x0, [x4, #8]
    4490:	cmp	x0, #0x0
    4494:	cset	w7, eq  // eq = none
    4498:	b	40e4 <GOMP_taskgroup_end+0x1dc>
    449c:	ldr	x3, [sp, #104]
    44a0:	add	x4, sp, #0x8f
    44a4:	add	x1, x23, #0x8
    44a8:	mov	w2, #0x0                   	// #0
    44ac:	mov	w0, #0x1                   	// #1
    44b0:	bl	0 <priority_tree_next_task>
    44b4:	mov	x19, x0
    44b8:	cbnz	x0, 420c <GOMP_taskgroup_end+0x304>
    44bc:	ldr	x0, [x23, #8]
    44c0:	ldr	x19, [x0, #8]
    44c4:	sub	x19, x19, #0x70
    44c8:	b	420c <GOMP_taskgroup_end+0x304>
    44cc:	add	x0, x4, #0x18
    44d0:	stlr	xzr, [x0]
    44d4:	b	4430 <GOMP_taskgroup_end+0x528>
    44d8:	ldp	x19, x20, [sp, #16]
    44dc:	ldp	x27, x28, [sp, #80]
    44e0:	b	41ac <GOMP_taskgroup_end+0x2a4>
    44e4:	mov	w7, #0x1                   	// #1
    44e8:	str	xzr, [x5, #8]
    44ec:	b	40e4 <GOMP_taskgroup_end+0x1dc>
    44f0:	ldr	w0, [x0, #44]
    44f4:	cbnz	w0, 3f40 <GOMP_taskgroup_end+0x38>
    44f8:	add	x0, x22, #0x80
    44fc:	bl	0 <gomp_team_barrier_wait>
    4500:	b	41bc <GOMP_taskgroup_end+0x2b4>
    4504:	bl	0 <gomp_sem_wait_slow>
    4508:	b	42b0 <GOMP_taskgroup_end+0x3a8>
    450c:	bl	0 <free>
    4510:	b	419c <GOMP_taskgroup_end+0x294>
    4514:	mov	x1, x19
    4518:	mov	x0, x22
    451c:	mov	x19, #0x0                   	// #0
    4520:	mov	w27, #0x0                   	// #0
    4524:	mov	x28, x19
    4528:	bl	1420 <gomp_target_task_completion>
    452c:	b	4140 <GOMP_taskgroup_end+0x238>
    4530:	bl	0 <free>
    4534:	b	423c <GOMP_taskgroup_end+0x334>
    4538:	mov	x0, x20
    453c:	bl	0 <gomp_mutex_lock_slow>
    4540:	b	4334 <GOMP_taskgroup_end+0x42c>
    4544:	mov	x0, x20
    4548:	bl	0 <gomp_mutex_lock_slow>
    454c:	b	3f74 <GOMP_taskgroup_end+0x6c>
    4550:	mov	x0, x20
    4554:	bl	0 <gomp_mutex_lock_slow>
    4558:	b	4024 <GOMP_taskgroup_end+0x11c>
    455c:	nop

0000000000004560 <GOMP_taskgroup_reduction_register>:
    4560:	stp	x29, x30, [sp, #-96]!
    4564:	mov	x29, sp
    4568:	stp	x19, x20, [sp, #16]
    456c:	mrs	x19, tpidr_el0
    4570:	adrp	x20, 0 <gomp_tls_data>
    4574:	ldr	x20, [x20]
    4578:	stp	x21, x22, [sp, #32]
    457c:	add	x21, x19, x20
    4580:	stp	x23, x24, [sp, #48]
    4584:	mov	x24, x0
    4588:	ldr	x1, [x21, #16]
    458c:	stp	x25, x26, [sp, #64]
    4590:	cbz	x1, 4704 <GOMP_taskgroup_reduction_register+0x1a4>
    4594:	add	x0, x19, x20
    4598:	ldr	w22, [x1]
    459c:	mov	x19, x24
    45a0:	mov	x26, #0x0                   	// #0
    45a4:	ldr	x25, [x0, #80]
    45a8:	ldr	x0, [x25, #40]
    45ac:	ldr	x23, [x0, #40]
    45b0:	b	45b8 <GOMP_taskgroup_reduction_register+0x58>
    45b4:	mov	x19, x0
    45b8:	ldp	x20, x0, [x19, #8]
    45bc:	mul	x20, x22, x20
    45c0:	mov	x1, x20
    45c4:	bl	0 <gomp_aligned_alloc>
    45c8:	mov	x2, x20
    45cc:	mov	x21, x0
    45d0:	mov	w1, #0x0                   	// #0
    45d4:	bl	0 <memset>
    45d8:	ldr	x0, [x19, #32]
    45dc:	add	x20, x20, x21
    45e0:	ldr	x1, [x19]
    45e4:	str	x21, [x19, #16]
    45e8:	stp	xzr, x20, [x19, #40]
    45ec:	add	x26, x26, x1
    45f0:	cbnz	x0, 45b4 <GOMP_taskgroup_reduction_register+0x54>
    45f4:	str	x23, [x19, #32]
    45f8:	cbz	x23, 46cc <GOMP_taskgroup_reduction_register+0x16c>
    45fc:	ldr	x20, [x23, #40]
    4600:	cbz	x20, 46cc <GOMP_taskgroup_reduction_register+0x16c>
    4604:	ldp	x0, x1, [x20, #8]
    4608:	mov	x19, x20
    460c:	sub	x0, x0, x1
    4610:	add	x0, x0, x26
    4614:	bl	148 <htab_create>
    4618:	mov	x22, x0
    461c:	ldp	x0, x1, [x20, #8]
    4620:	ldr	x21, [x19], #32
    4624:	str	x22, [sp, #88]
    4628:	sub	x0, x0, x1
    462c:	add	x21, x19, x21, lsl #3
    4630:	str	x0, [x22, #8]
    4634:	b	4640 <GOMP_taskgroup_reduction_register+0xe0>
    4638:	cmp	x21, x19
    463c:	b.ls	4670 <GOMP_taskgroup_reduction_register+0x110>  // b.plast
    4640:	ldr	x20, [x19]
    4644:	add	x19, x19, #0x8
    4648:	cmp	x20, #0x1
    464c:	b.ls	4638 <GOMP_taskgroup_reduction_register+0xd8>  // b.plast
    4650:	ldr	x1, [x20]
    4654:	mov	x0, x22
    4658:	eor	x1, x1, x1, lsr #32
    465c:	bl	1f0 <find_empty_slot_for_expand>
    4660:	str	x20, [x0]
    4664:	cmp	x21, x19
    4668:	b.hi	4640 <GOMP_taskgroup_reduction_register+0xe0>  // b.pmore
    466c:	nop
    4670:	mov	x22, x24
    4674:	nop
    4678:	ldr	x0, [x22]
    467c:	add	x20, x22, #0x38
    4680:	mov	x21, #0x0                   	// #0
    4684:	cbz	x0, 46b8 <GOMP_taskgroup_reduction_register+0x158>
    4688:	str	x22, [x20, #16]
    468c:	mov	x19, x20
    4690:	add	x0, sp, #0x58
    4694:	mov	w2, #0x1                   	// #1
    4698:	mov	x1, x19
    469c:	bl	2b0 <htab_find_slot>
    46a0:	ldr	x1, [x22]
    46a4:	str	x19, [x0]
    46a8:	add	x21, x21, #0x1
    46ac:	add	x20, x20, #0x18
    46b0:	cmp	x21, x1
    46b4:	b.cc	4688 <GOMP_taskgroup_reduction_register+0x128>  // b.lo, b.ul, b.last
    46b8:	ldr	x0, [x22, #32]
    46bc:	cmp	x23, x0
    46c0:	b.eq	46dc <GOMP_taskgroup_reduction_register+0x17c>  // b.none
    46c4:	mov	x22, x0
    46c8:	b	4678 <GOMP_taskgroup_reduction_register+0x118>
    46cc:	mov	x0, x26
    46d0:	bl	148 <htab_create>
    46d4:	str	x0, [sp, #88]
    46d8:	b	4670 <GOMP_taskgroup_reduction_register+0x110>
    46dc:	ldr	x0, [x25, #40]
    46e0:	ldr	x1, [sp, #88]
    46e4:	ldp	x19, x20, [sp, #16]
    46e8:	ldp	x25, x26, [sp, #64]
    46ec:	str	x1, [x22, #40]
    46f0:	ldp	x21, x22, [sp, #32]
    46f4:	str	x24, [x0, #40]
    46f8:	ldp	x23, x24, [sp, #48]
    46fc:	ldp	x29, x30, [sp], #96
    4700:	ret
    4704:	bl	9e8 <gomp_create_artificial_team>
    4708:	bl	3e90 <GOMP_taskgroup_start>
    470c:	ldr	x1, [x21, #16]
    4710:	b	4594 <GOMP_taskgroup_reduction_register+0x34>
    4714:	nop

0000000000004718 <GOMP_taskloop>:
    4718:	adrp	x10, 0 <gomp_tls_data>
    471c:	ldr	x10, [x10]
    4720:	mrs	x11, tpidr_el0
    4724:	stp	x29, x30, [sp, #-416]!
    4728:	add	x8, x11, x10
    472c:	mov	x29, sp
    4730:	stp	x19, x20, [sp, #16]
    4734:	mov	w19, w7
    4738:	ldr	x20, [x8, #16]
    473c:	stp	x21, x22, [sp, #32]
    4740:	mov	w22, w5
    4744:	stp	x23, x24, [sp, #48]
    4748:	stp	x25, x26, [sp, #64]
    474c:	mov	x25, x2
    4750:	stp	x27, x28, [sp, #80]
    4754:	mov	x28, x1
    4758:	stp	x3, x0, [x29, #184]
    475c:	ldr	x24, [x29, #416]
    4760:	ldr	x3, [x29, #424]
    4764:	cbz	x20, 4770 <GOMP_taskloop+0x58>
    4768:	ldr	w0, [x20, #132]
    476c:	tbnz	w0, #2, 49cc <GOMP_taskloop+0x2b4>
    4770:	ldr	x0, [x29, #432]
    4774:	cmp	x0, #0x0
    4778:	b.le	49ec <GOMP_taskloop+0x2d4>
    477c:	cmp	x24, x3
    4780:	b.ge	49cc <GOMP_taskloop+0x2b4>  // b.tcont
    4784:	sub	x21, x0, #0x1
    4788:	sub	x23, x3, x24
    478c:	ldr	x0, [x29, #432]
    4790:	add	x21, x23, x21
    4794:	sdiv	x21, x21, x0
    4798:	tbz	w22, #9, 4a10 <GOMP_taskloop+0x2f8>
    479c:	udiv	x0, x21, x6
    47a0:	str	x0, [x29, #200]
    47a4:	cmp	x0, #0x1
    47a8:	b.ls	4c50 <GOMP_taskloop+0x538>  // b.plast
    47ac:	cmp	x6, x0
    47b0:	b.hi	4c84 <GOMP_taskloop+0x56c>  // b.pmore
    47b4:	ldr	x1, [x29, #432]
    47b8:	mul	x0, x6, x0
    47bc:	cmp	x21, x0
    47c0:	mul	x23, x6, x1
    47c4:	b.eq	47d8 <GOMP_taskloop+0xc0>  // b.none
    47c8:	sub	x21, x21, x0
    47cc:	add	x23, x23, x1
    47d0:	sub	x21, x21, #0x1
    47d4:	nop
    47d8:	and	w0, w22, #0x800
    47dc:	str	w0, [x29, #172]
    47e0:	tbz	w22, #11, 4c14 <GOMP_taskloop+0x4fc>
    47e4:	adrp	x0, 0 <gomp_cancel_var>
    47e8:	ldrb	w0, [x0]
    47ec:	cbnz	w0, 5304 <GOMP_taskloop+0xbec>
    47f0:	adrp	x0, 0 <gomp_max_task_priority_var>
    47f4:	ldr	w7, [x0]
    47f8:	cmp	w7, w19
    47fc:	csel	w19, w7, w19, le
    4800:	tst	x22, #0x400
    4804:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    4808:	b.ne	4a48 <GOMP_taskloop+0x330>  // b.any
    480c:	cbnz	x25, 4ff8 <GOMP_taskloop+0x8e0>
    4810:	ldr	x0, [x29, #200]
    4814:	cbz	x0, 49c0 <GOMP_taskloop+0x2a8>
    4818:	add	x10, x11, x10
    481c:	and	w0, w22, #0x2
    4820:	mov	x22, #0x0                   	// #0
    4824:	mov	x27, x28
    4828:	adrp	x26, 0 <gomp_global_icv>
    482c:	mov	x28, x23
    4830:	add	x26, x26, #0x0
    4834:	mov	x25, #0x1                   	// #1
    4838:	str	x20, [x29, #176]
    483c:	mov	w20, w19
    4840:	mov	x19, x24
    4844:	mov	x24, x22
    4848:	mov	x22, x10
    484c:	str	w0, [x29, #184]
    4850:	ldr	x0, [x10, #80]
    4854:	ldr	x23, [x29, #432]
    4858:	b	4880 <GOMP_taskloop+0x168>
    485c:	ldr	x1, [x22, #80]
    4860:	ldr	x0, [x1, #56]
    4864:	cbnz	x0, 4998 <GOMP_taskloop+0x280>
    4868:	ldr	x0, [x1]
    486c:	str	x0, [x22, #80]
    4870:	ldr	x1, [x29, #200]
    4874:	add	x24, x24, #0x1
    4878:	cmp	x1, x24
    487c:	b.eq	49c0 <GOMP_taskloop+0x2a8>  // b.none
    4880:	cmp	x0, #0x0
    4884:	add	x1, x0, #0x90
    4888:	csel	x1, x26, x1, eq  // eq = none
    488c:	ldp	x4, x5, [x1]
    4890:	stp	x4, x5, [x29, #352]
    4894:	ldp	x4, x5, [x1, #16]
    4898:	stp	x4, x5, [x29, #368]
    489c:	ldr	x1, [x1, #32]
    48a0:	stp	x0, xzr, [x29, #208]
    48a4:	stp	xzr, xzr, [x29, #232]
    48a8:	stp	xzr, xzr, [x29, #248]
    48ac:	stp	xzr, xzr, [x29, #264]
    48b0:	str	xzr, [x29, #280]
    48b4:	str	w20, [x29, #296]
    48b8:	str	x1, [x29, #384]
    48bc:	str	x25, [x29, #408]
    48c0:	cbz	x0, 4c5c <GOMP_taskloop+0x544>
    48c4:	ldrb	w1, [x0, #205]
    48c8:	cbnz	w1, 48d4 <GOMP_taskloop+0x1bc>
    48cc:	ldr	w1, [x29, #184]
    48d0:	cbz	w1, 48dc <GOMP_taskloop+0x1c4>
    48d4:	mov	w1, #0x1                   	// #1
    48d8:	strb	w1, [x29, #413]
    48dc:	ldrb	w1, [x0, #204]
    48e0:	ldr	x0, [x0, #40]
    48e4:	str	x0, [x29, #248]
    48e8:	strb	w1, [x29, #412]
    48ec:	ldr	x1, [x29, #192]
    48f0:	cmp	x21, x24
    48f4:	add	x0, x29, #0xd0
    48f8:	str	x0, [x22, #80]
    48fc:	str	x19, [x27]
    4900:	add	x19, x19, x28
    4904:	str	x19, [x27, #8]
    4908:	sub	x0, x28, x23
    490c:	csel	x28, x0, x28, eq  // eq = none
    4910:	mov	x0, x27
    4914:	blr	x1
    4918:	ldr	x0, [x29, #216]
    491c:	cbnz	x0, 4928 <GOMP_taskloop+0x210>
    4920:	ldr	x0, [x29, #232]
    4924:	cbz	x0, 485c <GOMP_taskloop+0x144>
    4928:	ldr	x0, [x29, #176]
    492c:	add	x4, x0, #0x500
    4930:	mov	w0, #0x1                   	// #1
    4934:	ldaxr	w1, [x4]
    4938:	cbnz	w1, 4944 <GOMP_taskloop+0x22c>
    493c:	stxr	w2, w0, [x4]
    4940:	cbnz	w2, 4934 <GOMP_taskloop+0x21c>
    4944:	cmp	w1, #0x0
    4948:	b.ne	5464 <GOMP_taskloop+0xd4c>  // b.any
    494c:	ldr	x1, [x29, #216]
    4950:	cbnz	x1, 4c6c <GOMP_taskloop+0x554>
    4954:	ldr	x1, [x29, #232]
    4958:	mov	x0, x1
    495c:	cbz	x1, 4970 <GOMP_taskloop+0x258>
    4960:	stur	xzr, [x0, #-112]
    4964:	ldr	x0, [x0]
    4968:	cmp	x1, x0
    496c:	b.ne	4960 <GOMP_taskloop+0x248>  // b.any
    4970:	ldxr	w0, [x4]
    4974:	stlxr	w1, wzr, [x4]
    4978:	cbnz	w1, 4970 <GOMP_taskloop+0x258>
    497c:	tbz	w0, #31, 485c <GOMP_taskloop+0x144>
    4980:	mov	x0, x4
    4984:	bl	0 <gomp_mutex_unlock_slow>
    4988:	ldr	x1, [x22, #80]
    498c:	ldr	x0, [x1, #56]
    4990:	cbz	x0, 4868 <GOMP_taskloop+0x150>
    4994:	nop
    4998:	str	x1, [x29, #160]
    499c:	bl	0 <free>
    49a0:	ldr	x1, [x29, #160]
    49a4:	add	x24, x24, #0x1
    49a8:	ldr	x0, [x1]
    49ac:	str	x0, [x22, #80]
    49b0:	ldr	x1, [x29, #200]
    49b4:	cmp	x1, x24
    49b8:	b.ne	4880 <GOMP_taskloop+0x168>  // b.any
    49bc:	nop
    49c0:	ldr	w0, [x29, #172]
    49c4:	cbnz	w0, 49cc <GOMP_taskloop+0x2b4>
    49c8:	bl	3f08 <GOMP_taskgroup_end>
    49cc:	mov	sp, x29
    49d0:	ldp	x19, x20, [sp, #16]
    49d4:	ldp	x21, x22, [sp, #32]
    49d8:	ldp	x23, x24, [sp, #48]
    49dc:	ldp	x25, x26, [sp, #64]
    49e0:	ldp	x27, x28, [sp, #80]
    49e4:	ldp	x29, x30, [sp], #416
    49e8:	ret
    49ec:	cmp	x24, x3
    49f0:	b.le	49cc <GOMP_taskloop+0x2b4>
    49f4:	ldr	x0, [x29, #432]
    49f8:	sub	x23, x3, x24
    49fc:	add	x21, x0, #0x1
    4a00:	ldr	x0, [x29, #432]
    4a04:	add	x21, x23, x21
    4a08:	sdiv	x21, x21, x0
    4a0c:	tbnz	w22, #9, 479c <GOMP_taskloop+0x84>
    4a10:	cbnz	x6, 4a1c <GOMP_taskloop+0x304>
    4a14:	cbz	x20, 4c40 <GOMP_taskloop+0x528>
    4a18:	ldr	w6, [x20]
    4a1c:	cmp	x6, x21
    4a20:	b.cs	4c00 <GOMP_taskloop+0x4e8>  // b.hs, b.nlast
    4a24:	udiv	x3, x21, x6
    4a28:	str	x6, [x29, #200]
    4a2c:	ldr	x0, [x29, #432]
    4a30:	msub	x6, x3, x6, x21
    4a34:	mul	x23, x3, x0
    4a38:	cbz	x6, 47d8 <GOMP_taskloop+0xc0>
    4a3c:	add	x23, x23, x0
    4a40:	sub	x21, x6, #0x1
    4a44:	b	47d8 <GOMP_taskloop+0xc0>
    4a48:	add	x0, x11, x10
    4a4c:	ldr	x27, [x0, #80]
    4a50:	cbz	x27, 4a5c <GOMP_taskloop+0x344>
    4a54:	ldrb	w0, [x27, #205]
    4a58:	cbnz	w0, 480c <GOMP_taskloop+0xf4>
    4a5c:	ldr	w0, [x20]
    4a60:	ldr	x2, [x29, #200]
    4a64:	ldr	w1, [x20, #1320]
    4a68:	lsl	w0, w0, #6
    4a6c:	add	x1, x1, x2
    4a70:	cmp	x1, x0
    4a74:	b.hi	480c <GOMP_taskloop+0xf4>  // b.pmore
    4a78:	ldr	x1, [x29, #200]
    4a7c:	mov	x2, sp
    4a80:	str	x2, [x29, #104]
    4a84:	ldr	x26, [x27, #40]
    4a88:	lsl	x0, x1, #3
    4a8c:	add	x0, x0, #0xf
    4a90:	and	x0, x0, #0xfffffffffffffff0
    4a94:	sub	sp, sp, x0
    4a98:	mov	x0, sp
    4a9c:	str	x0, [x29, #176]
    4aa0:	cbz	x1, 4cb4 <GOMP_taskloop+0x59c>
    4aa4:	ubfx	x1, x22, #1, #1
    4aa8:	add	x0, x4, #0xcf
    4aac:	stp	x0, x1, [x29, #136]
    4ab0:	neg	x1, x4
    4ab4:	mov	x22, #0x0                   	// #0
    4ab8:	str	x1, [x29, #128]
    4abc:	add	x10, x11, x10
    4ac0:	ldr	x1, [x29, #184]
    4ac4:	str	x20, [x29, #96]
    4ac8:	str	x21, [x29, #112]
    4acc:	mov	x21, x10
    4ad0:	add	x1, x0, x1
    4ad4:	adrp	x0, 0 <gomp_global_icv>
    4ad8:	add	x0, x0, #0x0
    4adc:	str	x0, [x29, #120]
    4ae0:	mov	x0, x22
    4ae4:	mov	x20, x1
    4ae8:	mov	x22, x23
    4aec:	mov	x23, x0
    4af0:	str	x26, [x29, #152]
    4af4:	str	w19, [x29, #160]
    4af8:	b	4b54 <GOMP_taskloop+0x43c>
    4afc:	blr	x25
    4b00:	mov	w0, #0x1                   	// #1
    4b04:	strb	w0, [x19, #206]
    4b08:	ldr	x0, [x29, #112]
    4b0c:	str	x24, [x26]
    4b10:	add	x24, x24, x22
    4b14:	str	x24, [x26, #8]
    4b18:	cmp	x0, x23
    4b1c:	add	x23, x23, #0x1
    4b20:	ldr	x0, [x29, #192]
    4b24:	stp	x0, x26, [x19, #184]
    4b28:	ldr	x0, [x29, #432]
    4b2c:	str	x27, [x21, #80]
    4b30:	sub	x0, x22, x0
    4b34:	csel	x22, x0, x22, eq  // eq = none
    4b38:	mov	w0, #0x2                   	// #2
    4b3c:	str	w0, [x19, #200]
    4b40:	ldr	x0, [x29, #200]
    4b44:	cmp	x0, x23
    4b48:	ldrb	w0, [x29, #144]
    4b4c:	strb	w0, [x19, #205]
    4b50:	b.eq	4ca8 <GOMP_taskloop+0x590>  // b.none
    4b54:	mov	x0, x20
    4b58:	bl	0 <gomp_malloc>
    4b5c:	mov	x19, x0
    4b60:	mov	x11, x0
    4b64:	ldr	x0, [x29, #176]
    4b68:	mov	x1, x28
    4b6c:	ldr	x2, [x21, #80]
    4b70:	str	x27, [x11], #144
    4b74:	str	x19, [x0, x23, lsl #3]
    4b78:	cmp	x2, #0x0
    4b7c:	add	x0, x2, #0x90
    4b80:	ldr	x2, [x29, #120]
    4b84:	ldr	x3, [x29, #136]
    4b88:	csel	x0, x2, x0, eq  // eq = none
    4b8c:	mov	x2, #0x1                   	// #1
    4b90:	add	x4, x19, x3
    4b94:	ldp	x8, x9, [x0]
    4b98:	stp	x8, x9, [x19, #144]
    4b9c:	ldp	x8, x9, [x0, #16]
    4ba0:	stp	x8, x9, [x11, #16]
    4ba4:	ldr	x0, [x0, #32]
    4ba8:	str	x0, [x11, #32]
    4bac:	str	x2, [x19, #200]
    4bb0:	ldr	x0, [x29, #128]
    4bb4:	str	xzr, [x19, #8]
    4bb8:	ldr	x3, [x29, #152]
    4bbc:	stp	xzr, xzr, [x19, #24]
    4bc0:	ldrb	w2, [x27, #204]
    4bc4:	str	x3, [x19, #40]
    4bc8:	and	x26, x4, x0
    4bcc:	ldr	w3, [x29, #160]
    4bd0:	mov	x0, x26
    4bd4:	str	xzr, [x19, #48]
    4bd8:	str	xzr, [x19, #56]
    4bdc:	str	xzr, [x19, #64]
    4be0:	str	xzr, [x19, #72]
    4be4:	str	x19, [x21, #80]
    4be8:	str	w3, [x19, #88]
    4bec:	strb	w2, [x19, #204]
    4bf0:	cbnz	x25, 4afc <GOMP_taskloop+0x3e4>
    4bf4:	ldr	x2, [x29, #184]
    4bf8:	bl	0 <memcpy>
    4bfc:	b	4b08 <GOMP_taskloop+0x3f0>
    4c00:	and	w0, w22, #0x800
    4c04:	str	w0, [x29, #172]
    4c08:	str	x21, [x29, #200]
    4c0c:	ldr	x23, [x29, #432]
    4c10:	tbnz	w22, #11, 47e4 <GOMP_taskloop+0xcc>
    4c14:	stp	x11, x10, [x29, #152]
    4c18:	str	x4, [x29, #176]
    4c1c:	bl	3e90 <GOMP_taskgroup_start>
    4c20:	ldp	x11, x10, [x29, #152]
    4c24:	ldr	x4, [x29, #176]
    4c28:	tbz	w22, #12, 47f0 <GOMP_taskloop+0xd8>
    4c2c:	ldr	x0, [x28, #16]
    4c30:	bl	4560 <GOMP_taskgroup_reduction_register>
    4c34:	ldp	x11, x10, [x29, #152]
    4c38:	ldr	x4, [x29, #176]
    4c3c:	b	47f0 <GOMP_taskloop+0xd8>
    4c40:	cmp	x21, #0x1
    4c44:	b.ls	4c00 <GOMP_taskloop+0x4e8>  // b.plast
    4c48:	ldr	x0, [x29, #432]
    4c4c:	mul	x23, x21, x0
    4c50:	mov	x0, #0x1                   	// #1
    4c54:	str	x0, [x29, #200]
    4c58:	b	47d8 <GOMP_taskloop+0xc0>
    4c5c:	ldr	w0, [x29, #184]
    4c60:	cbz	w0, 48ec <GOMP_taskloop+0x1d4>
    4c64:	strb	w25, [x29, #413]
    4c68:	b	48ec <GOMP_taskloop+0x1d4>
    4c6c:	add	x0, x29, #0xd8
    4c70:	str	x4, [x29, #160]
    4c74:	bl	e0 <gomp_clear_parent_in_tree>
    4c78:	str	xzr, [x29, #216]
    4c7c:	ldr	x4, [x29, #160]
    4c80:	b	4970 <GOMP_taskloop+0x258>
    4c84:	ldr	x0, [x29, #200]
    4c88:	ldr	x1, [x29, #432]
    4c8c:	udiv	x3, x21, x0
    4c90:	msub	x0, x3, x0, x21
    4c94:	mul	x23, x3, x1
    4c98:	cbz	x0, 47d8 <GOMP_taskloop+0xc0>
    4c9c:	add	x23, x23, x1
    4ca0:	sub	x21, x0, #0x1
    4ca4:	b	47d8 <GOMP_taskloop+0xc0>
    4ca8:	ldr	w19, [x29, #160]
    4cac:	ldr	x20, [x29, #96]
    4cb0:	ldr	x26, [x29, #152]
    4cb4:	add	x0, x20, #0x500
    4cb8:	mov	x2, x0
    4cbc:	mov	w0, #0x1                   	// #1
    4cc0:	str	x2, [x29, #184]
    4cc4:	ldaxr	w1, [x2]
    4cc8:	cbnz	w1, 4cd4 <GOMP_taskloop+0x5bc>
    4ccc:	stxr	w3, w0, [x2]
    4cd0:	cbnz	w3, 4cc4 <GOMP_taskloop+0x5ac>
    4cd4:	cmp	w1, #0x0
    4cd8:	b.ne	5480 <GOMP_taskloop+0xd68>  // b.any
    4cdc:	adrp	x0, 0 <gomp_cancel_var>
    4ce0:	cmp	x25, #0x0
    4ce4:	cset	w1, eq  // eq = none
    4ce8:	ldrb	w0, [x0]
    4cec:	tst	w1, w0
    4cf0:	b.ne	53e8 <GOMP_taskloop+0xcd0>  // b.any
    4cf4:	cbz	x26, 4d08 <GOMP_taskloop+0x5f0>
    4cf8:	ldr	x0, [x26, #56]
    4cfc:	ldr	x1, [x29, #200]
    4d00:	add	x0, x0, x1
    4d04:	str	x0, [x26, #56]
    4d08:	ldr	x0, [x29, #200]
    4d0c:	add	x22, x27, #0x8
    4d10:	mov	x24, #0x0                   	// #0
    4d14:	cbz	x0, 4df8 <GOMP_taskloop+0x6e0>
    4d18:	add	x25, x26, #0x8
    4d1c:	str	x25, [x29, #192]
    4d20:	mov	w25, w19
    4d24:	add	x21, x20, #0x508
    4d28:	ldr	x19, [x29, #176]
    4d2c:	mov	x28, x26
    4d30:	ldr	x0, [x27, #8]
    4d34:	ldr	x23, [x19, x24, lsl #3]
    4d38:	add	x26, x23, #0x70
    4d3c:	cbnz	x0, 4fb0 <GOMP_taskloop+0x898>
    4d40:	cmp	w25, #0x0
    4d44:	ldr	x0, [x27, #24]
    4d48:	b.gt	4f7c <GOMP_taskloop+0x864>
    4d4c:	cbz	x0, 4f38 <GOMP_taskloop+0x820>
    4d50:	ldr	x1, [x0, #8]
    4d54:	stp	x0, x1, [x23, #112]
    4d58:	str	x26, [x27, #24]
    4d5c:	ldr	x0, [x23, #112]
    4d60:	str	x26, [x0, #8]
    4d64:	ldr	x0, [x23, #120]
    4d68:	str	x26, [x0]
    4d6c:	cbz	x28, 4eb8 <GOMP_taskloop+0x7a0>
    4d70:	ldr	x0, [x28, #8]
    4d74:	add	x26, x23, #0x80
    4d78:	cbnz	x0, 4e7c <GOMP_taskloop+0x764>
    4d7c:	cmp	w25, #0x0
    4d80:	ldr	x0, [x28, #24]
    4d84:	b.gt	4e40 <GOMP_taskloop+0x728>
    4d88:	cbz	x0, 4fec <GOMP_taskloop+0x8d4>
    4d8c:	ldr	x1, [x0, #8]
    4d90:	stp	x0, x1, [x23, #128]
    4d94:	str	x26, [x28, #24]
    4d98:	ldr	x0, [x23, #128]
    4d9c:	str	x26, [x0, #8]
    4da0:	ldr	x0, [x23, #136]
    4da4:	str	x26, [x0]
    4da8:	ldr	x0, [x20, #1288]
    4dac:	cbnz	x0, 4f44 <GOMP_taskloop+0x82c>
    4db0:	ldr	x0, [x20, #1304]
    4db4:	add	x1, x23, #0x60
    4db8:	cbz	x0, 4f2c <GOMP_taskloop+0x814>
    4dbc:	ldr	x4, [x0, #8]
    4dc0:	stp	x0, x4, [x23, #96]
    4dc4:	str	x1, [x0, #8]
    4dc8:	ldr	x0, [x23, #104]
    4dcc:	str	x1, [x0]
    4dd0:	ldr	w1, [x20, #1320]
    4dd4:	add	x24, x24, #0x1
    4dd8:	ldr	w0, [x20, #1324]
    4ddc:	ldr	x2, [x29, #200]
    4de0:	add	w1, w1, #0x1
    4de4:	add	w0, w0, #0x1
    4de8:	str	w1, [x20, #1320]
    4dec:	str	w0, [x20, #1324]
    4df0:	cmp	x2, x24
    4df4:	b.ne	4d30 <GOMP_taskloop+0x618>  // b.any
    4df8:	ldr	w0, [x20, #132]
    4dfc:	ldrb	w1, [x27, #204]
    4e00:	orr	w0, w0, #0x1
    4e04:	ldr	w2, [x20, #1328]
    4e08:	eor	w1, w1, #0x1
    4e0c:	str	w0, [x20, #132]
    4e10:	ldr	w0, [x20]
    4e14:	add	w3, w2, w1
    4e18:	cmp	w3, w0
    4e1c:	b.cc	5174 <GOMP_taskloop+0xa5c>  // b.lo, b.ul, b.last
    4e20:	ldr	x1, [x29, #184]
    4e24:	ldxr	w0, [x1]
    4e28:	stlxr	w2, wzr, [x1]
    4e2c:	cbnz	w2, 4e24 <GOMP_taskloop+0x70c>
    4e30:	tbnz	w0, #31, 53dc <GOMP_taskloop+0xcc4>
    4e34:	ldr	x0, [x29, #104]
    4e38:	mov	sp, x0
    4e3c:	b	49c0 <GOMP_taskloop+0x2a8>
    4e40:	cbz	x0, 5370 <GOMP_taskloop+0xc58>
    4e44:	mov	x0, #0x28                  	// #40
    4e48:	bl	0 <gomp_malloc>
    4e4c:	ldr	x2, [x29, #192]
    4e50:	mov	x1, x0
    4e54:	mov	x0, x2
    4e58:	ldp	x5, x4, [x2, #16]
    4e5c:	str	wzr, [x1]
    4e60:	stp	x5, x4, [x1, #8]
    4e64:	stp	xzr, xzr, [x1, #24]
    4e68:	bl	0 <prio_splay_tree_insert>
    4e6c:	ldr	x1, [x29, #192]
    4e70:	ldr	x0, [x1]
    4e74:	str	xzr, [x1, #16]
    4e78:	cbz	x0, 5370 <GOMP_taskloop+0xc58>
    4e7c:	ldr	x0, [x29, #192]
    4e80:	add	x1, x29, #0xd0
    4e84:	str	w25, [x29, #208]
    4e88:	bl	0 <prio_splay_tree_lookup>
    4e8c:	cbz	x0, 5370 <GOMP_taskloop+0xc58>
    4e90:	ldr	x1, [x0, #8]
    4e94:	cbz	x1, 53b0 <GOMP_taskloop+0xc98>
    4e98:	ldr	x4, [x1, #8]
    4e9c:	stp	x1, x4, [x23, #128]
    4ea0:	str	x26, [x0, #8]
    4ea4:	ldr	x0, [x23, #128]
    4ea8:	str	x26, [x0, #8]
    4eac:	ldr	x0, [x23, #136]
    4eb0:	str	x26, [x0]
    4eb4:	nop
    4eb8:	ldr	x0, [x20, #1288]
    4ebc:	cbnz	x0, 4f44 <GOMP_taskloop+0x82c>
    4ec0:	cmp	w25, #0x0
    4ec4:	ldr	x0, [x21, #16]
    4ec8:	b.le	4db4 <GOMP_taskloop+0x69c>
    4ecc:	cbz	x0, 4f00 <GOMP_taskloop+0x7e8>
    4ed0:	mov	x0, #0x28                  	// #40
    4ed4:	bl	0 <gomp_malloc>
    4ed8:	ldp	x5, x4, [x21, #16]
    4edc:	mov	x1, x0
    4ee0:	mov	x0, x21
    4ee4:	str	wzr, [x1]
    4ee8:	stp	x5, x4, [x1, #8]
    4eec:	stp	xzr, xzr, [x1, #24]
    4ef0:	bl	0 <prio_splay_tree_insert>
    4ef4:	str	xzr, [x21, #16]
    4ef8:	ldr	x0, [x21]
    4efc:	cbnz	x0, 4f44 <GOMP_taskloop+0x82c>
    4f00:	mov	x0, #0x28                  	// #40
    4f04:	bl	0 <gomp_malloc>
    4f08:	mov	x26, x0
    4f0c:	mov	x0, x21
    4f10:	mov	x1, x26
    4f14:	str	w25, [x26]
    4f18:	stp	xzr, xzr, [x26, #8]
    4f1c:	stp	xzr, xzr, [x26, #24]
    4f20:	bl	0 <prio_splay_tree_insert>
    4f24:	mov	x0, x26
    4f28:	b	4f58 <GOMP_taskloop+0x840>
    4f2c:	stp	x1, x1, [x23, #96]
    4f30:	str	x1, [x20, #1304]
    4f34:	b	4dd0 <GOMP_taskloop+0x6b8>
    4f38:	stp	x26, x26, [x23, #112]
    4f3c:	str	x26, [x27, #24]
    4f40:	b	4d6c <GOMP_taskloop+0x654>
    4f44:	add	x1, x29, #0xd0
    4f48:	mov	x0, x21
    4f4c:	str	w25, [x29, #208]
    4f50:	bl	0 <prio_splay_tree_lookup>
    4f54:	cbz	x0, 4f00 <GOMP_taskloop+0x7e8>
    4f58:	ldr	x1, [x0, #8]
    4f5c:	add	x4, x23, #0x60
    4f60:	cbz	x1, 5364 <GOMP_taskloop+0xc4c>
    4f64:	ldr	x0, [x1, #8]
    4f68:	stp	x1, x0, [x23, #96]
    4f6c:	str	x4, [x1, #8]
    4f70:	ldr	x0, [x23, #104]
    4f74:	str	x4, [x0]
    4f78:	b	4dd0 <GOMP_taskloop+0x6b8>
    4f7c:	cbz	x0, 52d4 <GOMP_taskloop+0xbbc>
    4f80:	mov	x0, #0x28                  	// #40
    4f84:	bl	0 <gomp_malloc>
    4f88:	ldp	x5, x4, [x22, #16]
    4f8c:	mov	x1, x0
    4f90:	mov	x0, x22
    4f94:	str	wzr, [x1]
    4f98:	stp	x5, x4, [x1, #8]
    4f9c:	stp	xzr, xzr, [x1, #24]
    4fa0:	bl	0 <prio_splay_tree_insert>
    4fa4:	str	xzr, [x22, #16]
    4fa8:	ldr	x0, [x22]
    4fac:	cbz	x0, 52d4 <GOMP_taskloop+0xbbc>
    4fb0:	add	x1, x29, #0xd0
    4fb4:	mov	x0, x22
    4fb8:	str	w25, [x29, #208]
    4fbc:	bl	0 <prio_splay_tree_lookup>
    4fc0:	cbz	x0, 52d4 <GOMP_taskloop+0xbbc>
    4fc4:	ldr	x1, [x0, #8]
    4fc8:	cbz	x1, 5358 <GOMP_taskloop+0xc40>
    4fcc:	ldr	x4, [x1, #8]
    4fd0:	stp	x1, x4, [x23, #112]
    4fd4:	str	x26, [x0, #8]
    4fd8:	ldr	x0, [x23, #112]
    4fdc:	str	x26, [x0, #8]
    4fe0:	ldr	x0, [x23, #120]
    4fe4:	str	x26, [x0]
    4fe8:	b	4d6c <GOMP_taskloop+0x654>
    4fec:	stp	x26, x26, [x23, #128]
    4ff0:	str	x26, [x28, #24]
    4ff4:	b	4da8 <GOMP_taskloop+0x690>
    4ff8:	ldr	x0, [x29, #184]
    4ffc:	neg	x2, x4
    5000:	sub	x3, x4, #0x1
    5004:	mov	x1, sp
    5008:	add	x0, x0, x4
    500c:	str	x1, [x29, #176]
    5010:	ldr	x4, [x29, #200]
    5014:	sub	x0, x0, #0x1
    5018:	and	x5, x0, x2
    501c:	add	x12, x11, x10
    5020:	add	x0, x4, x4, lsl #1
    5024:	add	x0, x4, x0, lsl #2
    5028:	sub	x6, x1, x0, lsl #4
    502c:	madd	x1, x5, x4, x3
    5030:	mov	sp, x6
    5034:	stp	x6, x5, [x29, #152]
    5038:	add	x1, x1, #0xf
    503c:	and	x1, x1, #0xfffffffffffffff0
    5040:	lsl	x0, x0, #4
    5044:	sub	sp, sp, x1
    5048:	add	x1, sp, x3
    504c:	and	x27, x1, x2
    5050:	ldr	x2, [x12, #80]
    5054:	cbz	x4, 5168 <GOMP_taskloop+0xa50>
    5058:	add	x4, x0, x6
    505c:	mov	x1, x6
    5060:	and	w6, w22, #0x2
    5064:	mov	x26, x25
    5068:	adrp	x0, 0 <gomp_global_icv>
    506c:	mov	x3, x2
    5070:	add	x0, x0, #0x0
    5074:	mov	x22, x2
    5078:	mov	x25, x4
    507c:	stp	x11, x10, [x29, #104]
    5080:	stp	x27, x20, [x29, #120]
    5084:	mov	x20, x27
    5088:	mov	x27, x12
    508c:	stp	x21, x23, [x29, #136]
    5090:	mov	x23, x5
    5094:	mov	x21, x1
    5098:	str	x0, [x29, #184]
    509c:	str	x24, [x29, #416]
    50a0:	mov	x24, x28
    50a4:	mov	w28, w6
    50a8:	b	50f4 <GOMP_taskloop+0x9dc>
    50ac:	ldrb	w4, [x3, #205]
    50b0:	cbnz	w4, 50b8 <GOMP_taskloop+0x9a0>
    50b4:	cbz	w28, 50c0 <GOMP_taskloop+0x9a8>
    50b8:	mov	w0, #0x1                   	// #1
    50bc:	strb	w0, [x21, #205]
    50c0:	ldrb	w4, [x3, #204]
    50c4:	ldr	x3, [x3, #40]
    50c8:	str	x3, [x21, #40]
    50cc:	strb	w4, [x21, #204]
    50d0:	str	x21, [x27, #80]
    50d4:	mov	x0, x20
    50d8:	mov	x1, x24
    50dc:	add	x21, x21, #0xd0
    50e0:	blr	x26
    50e4:	add	x20, x20, x23
    50e8:	cmp	x25, x21
    50ec:	b.eq	51c0 <GOMP_taskloop+0xaa8>  // b.none
    50f0:	ldr	x3, [x27, #80]
    50f4:	mov	x5, x21
    50f8:	ldr	x0, [x29, #184]
    50fc:	cmp	x3, #0x0
    5100:	add	x4, x3, #0x90
    5104:	str	x22, [x5], #144
    5108:	csel	x4, x0, x4, eq  // eq = none
    510c:	mov	w0, #0x1                   	// #1
    5110:	ldp	x6, x7, [x4]
    5114:	stp	x6, x7, [x21, #144]
    5118:	ldp	x6, x7, [x4, #16]
    511c:	stp	x6, x7, [x5, #16]
    5120:	ldr	x4, [x4, #32]
    5124:	str	x4, [x5, #32]
    5128:	str	xzr, [x21, #8]
    512c:	stp	xzr, xzr, [x21, #24]
    5130:	stp	xzr, xzr, [x21, #40]
    5134:	stp	xzr, xzr, [x21, #56]
    5138:	str	xzr, [x21, #72]
    513c:	str	w19, [x21, #88]
    5140:	str	w0, [x21, #200]
    5144:	strb	wzr, [x21, #204]
    5148:	strb	wzr, [x21, #205]
    514c:	strb	wzr, [x21, #206]
    5150:	strb	wzr, [x21, #207]
    5154:	cbnz	x3, 50ac <GOMP_taskloop+0x994>
    5158:	cbz	w28, 50d0 <GOMP_taskloop+0x9b8>
    515c:	mov	w0, #0x1                   	// #1
    5160:	strb	w0, [x21, #205]
    5164:	b	50d0 <GOMP_taskloop+0x9b8>
    5168:	ldr	x0, [x29, #176]
    516c:	mov	sp, x0
    5170:	b	49c0 <GOMP_taskloop+0x2a8>
    5174:	sub	w0, w0, w2
    5178:	sub	w1, w0, w1
    517c:	ldr	x0, [x29, #200]
    5180:	ldr	x2, [x29, #184]
    5184:	cmp	x0, w1, sxtw
    5188:	csel	w1, w0, w1, cc  // cc = lo, ul, last
    518c:	ldxr	w0, [x2]
    5190:	stlxr	w3, wzr, [x2]
    5194:	cbnz	w3, 518c <GOMP_taskloop+0xa74>
    5198:	tbnz	w0, #31, 51ac <GOMP_taskloop+0xa94>
    519c:	cbz	w1, 4e34 <GOMP_taskloop+0x71c>
    51a0:	add	x0, x20, #0x80
    51a4:	bl	0 <gomp_team_barrier_wake>
    51a8:	b	4e34 <GOMP_taskloop+0x71c>
    51ac:	ldr	x0, [x29, #184]
    51b0:	str	w1, [x29, #200]
    51b4:	bl	0 <gomp_mutex_unlock_slow>
    51b8:	ldr	w1, [x29, #200]
    51bc:	b	519c <GOMP_taskloop+0xa84>
    51c0:	ldp	x0, x28, [x29, #152]
    51c4:	mov	x26, #0x0                   	// #0
    51c8:	ldp	x11, x10, [x29, #104]
    51cc:	mov	w19, #0x1                   	// #1
    51d0:	ldp	x27, x20, [x29, #120]
    51d4:	ldp	x21, x23, [x29, #136]
    51d8:	add	x22, x0, #0x8
    51dc:	mov	x0, x26
    51e0:	add	x25, x11, x10
    51e4:	ldr	x24, [x29, #416]
    51e8:	add	x20, x20, #0x500
    51ec:	mov	x26, x23
    51f0:	mov	x23, x21
    51f4:	mov	x21, x0
    51f8:	b	5224 <GOMP_taskloop+0xb0c>
    51fc:	ldr	x1, [x25, #80]
    5200:	ldr	x0, [x1, #56]
    5204:	cbnz	x0, 52c4 <GOMP_taskloop+0xbac>
    5208:	ldr	x0, [x1]
    520c:	str	x0, [x25, #80]
    5210:	ldr	x0, [x29, #200]
    5214:	add	x21, x21, #0x1
    5218:	add	x22, x22, #0xd0
    521c:	cmp	x0, x21
    5220:	b.eq	5168 <GOMP_taskloop+0xa50>  // b.none
    5224:	sub	x0, x22, #0x8
    5228:	str	x0, [x25, #80]
    522c:	ldr	x1, [x29, #192]
    5230:	cmp	x23, x21
    5234:	ldr	x0, [x29, #432]
    5238:	str	x24, [x27]
    523c:	add	x24, x24, x26
    5240:	str	x24, [x27, #8]
    5244:	sub	x0, x26, x0
    5248:	csel	x26, x0, x26, eq  // eq = none
    524c:	mov	x0, x27
    5250:	blr	x1
    5254:	add	x27, x27, x28
    5258:	ldr	x0, [x22]
    525c:	cbnz	x0, 5268 <GOMP_taskloop+0xb50>
    5260:	ldr	x0, [x22, #16]
    5264:	cbz	x0, 51fc <GOMP_taskloop+0xae4>
    5268:	ldaxr	w1, [x20]
    526c:	cbnz	w1, 5278 <GOMP_taskloop+0xb60>
    5270:	stxr	w0, w19, [x20]
    5274:	cbnz	w0, 5268 <GOMP_taskloop+0xb50>
    5278:	cmp	w1, #0x0
    527c:	b.ne	548c <GOMP_taskloop+0xd74>  // b.any
    5280:	ldr	x1, [x22]
    5284:	cbnz	x1, 53a0 <GOMP_taskloop+0xc88>
    5288:	ldr	x1, [x22, #16]
    528c:	mov	x0, x1
    5290:	cbz	x1, 52a8 <GOMP_taskloop+0xb90>
    5294:	nop
    5298:	stur	xzr, [x0, #-112]
    529c:	ldr	x0, [x0]
    52a0:	cmp	x1, x0
    52a4:	b.ne	5298 <GOMP_taskloop+0xb80>  // b.any
    52a8:	ldxr	w0, [x20]
    52ac:	stlxr	w1, wzr, [x20]
    52b0:	cbnz	w1, 52a8 <GOMP_taskloop+0xb90>
    52b4:	tbz	w0, #31, 51fc <GOMP_taskloop+0xae4>
    52b8:	mov	x0, x20
    52bc:	bl	0 <gomp_mutex_unlock_slow>
    52c0:	b	51fc <GOMP_taskloop+0xae4>
    52c4:	str	x1, [x29, #184]
    52c8:	bl	0 <free>
    52cc:	ldr	x1, [x29, #184]
    52d0:	b	5208 <GOMP_taskloop+0xaf0>
    52d4:	mov	x0, #0x28                  	// #40
    52d8:	bl	0 <gomp_malloc>
    52dc:	mov	x1, x0
    52e0:	mov	x0, x22
    52e4:	str	x1, [x29, #176]
    52e8:	str	w25, [x1]
    52ec:	stp	xzr, xzr, [x1, #8]
    52f0:	stp	xzr, xzr, [x1, #24]
    52f4:	bl	0 <prio_splay_tree_insert>
    52f8:	ldr	x1, [x29, #176]
    52fc:	mov	x0, x1
    5300:	b	4fc4 <GOMP_taskloop+0x8ac>
    5304:	add	x0, x11, x10
    5308:	ldr	x27, [x0, #80]
    530c:	cbz	x27, 53bc <GOMP_taskloop+0xca4>
    5310:	ldr	x0, [x27, #40]
    5314:	cbz	x0, 5338 <GOMP_taskloop+0xc20>
    5318:	ldrb	w1, [x0, #49]
    531c:	cbnz	w1, 49cc <GOMP_taskloop+0x2b4>
    5320:	ldrb	w1, [x0, #50]
    5324:	cbz	w1, 5338 <GOMP_taskloop+0xc20>
    5328:	ldr	x0, [x0]
    532c:	cbz	x0, 5338 <GOMP_taskloop+0xc20>
    5330:	ldrb	w0, [x0, #49]
    5334:	cbnz	w0, 49cc <GOMP_taskloop+0x2b4>
    5338:	adrp	x0, 0 <gomp_max_task_priority_var>
    533c:	ldr	w0, [x0]
    5340:	cmp	w0, w19
    5344:	csel	w19, w0, w19, le
    5348:	tst	x22, #0x400
    534c:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    5350:	b.eq	480c <GOMP_taskloop+0xf4>  // b.none
    5354:	b	4a54 <GOMP_taskloop+0x33c>
    5358:	stp	x26, x26, [x23, #112]
    535c:	str	x26, [x0, #8]
    5360:	b	4d6c <GOMP_taskloop+0x654>
    5364:	stp	x4, x4, [x23, #96]
    5368:	str	x4, [x0, #8]
    536c:	b	4dd0 <GOMP_taskloop+0x6b8>
    5370:	mov	x0, #0x28                  	// #40
    5374:	bl	0 <gomp_malloc>
    5378:	mov	x1, x0
    537c:	str	x1, [x29, #176]
    5380:	ldr	x0, [x29, #192]
    5384:	str	w25, [x1]
    5388:	stp	xzr, xzr, [x1, #8]
    538c:	stp	xzr, xzr, [x1, #24]
    5390:	bl	0 <prio_splay_tree_insert>
    5394:	ldr	x1, [x29, #176]
    5398:	mov	x0, x1
    539c:	b	4e90 <GOMP_taskloop+0x778>
    53a0:	mov	x0, x22
    53a4:	bl	e0 <gomp_clear_parent_in_tree>
    53a8:	str	xzr, [x22]
    53ac:	b	52a8 <GOMP_taskloop+0xb90>
    53b0:	stp	x26, x26, [x23, #128]
    53b4:	str	x26, [x0, #8]
    53b8:	b	4eb8 <GOMP_taskloop+0x7a0>
    53bc:	adrp	x0, 0 <gomp_max_task_priority_var>
    53c0:	ldr	w0, [x0]
    53c4:	cmp	w0, w19
    53c8:	csel	w19, w0, w19, le
    53cc:	tst	x22, #0x400
    53d0:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    53d4:	b.eq	480c <GOMP_taskloop+0xf4>  // b.none
    53d8:	b	4a5c <GOMP_taskloop+0x344>
    53dc:	ldr	x0, [x29, #184]
    53e0:	bl	0 <gomp_mutex_unlock_slow>
    53e4:	b	4e34 <GOMP_taskloop+0x71c>
    53e8:	ldr	w0, [x20, #132]
    53ec:	tbnz	w0, #2, 5414 <GOMP_taskloop+0xcfc>
    53f0:	cbz	x26, 4d08 <GOMP_taskloop+0x5f0>
    53f4:	ldrb	w0, [x26, #49]
    53f8:	cbnz	w0, 5414 <GOMP_taskloop+0xcfc>
    53fc:	ldrb	w0, [x26, #50]
    5400:	cbz	w0, 4cf8 <GOMP_taskloop+0x5e0>
    5404:	ldr	x0, [x26]
    5408:	cbz	x0, 4cf8 <GOMP_taskloop+0x5e0>
    540c:	ldrb	w0, [x0, #49]
    5410:	cbz	w0, 4cf8 <GOMP_taskloop+0x5e0>
    5414:	ldr	x0, [x29, #184]
    5418:	mov	x19, #0x0                   	// #0
    541c:	bl	9c8 <gomp_mutex_unlock>
    5420:	ldr	x0, [x29, #200]
    5424:	cbz	x0, 5450 <GOMP_taskloop+0xd38>
    5428:	ldr	x0, [x29, #176]
    542c:	ldr	x20, [x0, x19, lsl #3]
    5430:	add	x19, x19, #0x1
    5434:	ldr	x0, [x20, #56]
    5438:	cbnz	x0, 5478 <GOMP_taskloop+0xd60>
    543c:	mov	x0, x20
    5440:	bl	0 <free>
    5444:	ldr	x0, [x29, #200]
    5448:	cmp	x0, x19
    544c:	b.ne	5428 <GOMP_taskloop+0xd10>  // b.any
    5450:	ldr	w0, [x29, #172]
    5454:	cbz	w0, 5498 <GOMP_taskloop+0xd80>
    5458:	ldr	x0, [x29, #104]
    545c:	mov	sp, x0
    5460:	b	49cc <GOMP_taskloop+0x2b4>
    5464:	mov	x0, x4
    5468:	str	x4, [x29, #160]
    546c:	bl	0 <gomp_mutex_lock_slow>
    5470:	ldr	x4, [x29, #160]
    5474:	b	494c <GOMP_taskloop+0x234>
    5478:	bl	0 <free>
    547c:	b	543c <GOMP_taskloop+0xd24>
    5480:	ldr	x0, [x29, #184]
    5484:	bl	0 <gomp_mutex_lock_slow>
    5488:	b	4cdc <GOMP_taskloop+0x5c4>
    548c:	mov	x0, x20
    5490:	bl	0 <gomp_mutex_lock_slow>
    5494:	b	5280 <GOMP_taskloop+0xb68>
    5498:	bl	3f08 <GOMP_taskgroup_end>
    549c:	b	5458 <GOMP_taskloop+0xd40>

00000000000054a0 <GOMP_taskloop_ull>:
    54a0:	stp	x29, x30, [sp, #-432]!
    54a4:	mrs	x10, tpidr_el0
    54a8:	adrp	x9, 0 <gomp_tls_data>
    54ac:	ldr	x9, [x9]
    54b0:	mov	x29, sp
    54b4:	add	x8, x10, x9
    54b8:	stp	x19, x20, [sp, #16]
    54bc:	mov	w19, w7
    54c0:	stp	x21, x22, [sp, #32]
    54c4:	mov	w21, w5
    54c8:	stp	x23, x24, [sp, #48]
    54cc:	stp	x25, x26, [sp, #64]
    54d0:	mov	x25, x2
    54d4:	stp	x27, x28, [sp, #80]
    54d8:	mov	x28, x1
    54dc:	stp	x3, x0, [x29, #200]
    54e0:	ldp	x3, x0, [x29, #440]
    54e4:	str	w7, [x29, #216]
    54e8:	ldr	x20, [x8, #16]
    54ec:	ldr	x24, [x29, #432]
    54f0:	sub	x1, x0, #0x1
    54f4:	cbz	x20, 5500 <GOMP_taskloop_ull+0x60>
    54f8:	ldr	w0, [x20, #132]
    54fc:	tbnz	w0, #2, 5754 <GOMP_taskloop_ull+0x2b4>
    5500:	tbz	w21, #8, 5774 <GOMP_taskloop_ull+0x2d4>
    5504:	cmp	x24, x3
    5508:	b.cs	5754 <GOMP_taskloop_ull+0x2b4>  // b.hs, b.nlast
    550c:	sub	x22, x3, x24
    5510:	ldr	x0, [x29, #448]
    5514:	add	x22, x22, x1
    5518:	udiv	x22, x22, x0
    551c:	tbz	w21, #9, 579c <GOMP_taskloop_ull+0x2fc>
    5520:	udiv	x0, x22, x6
    5524:	str	x0, [x29, #216]
    5528:	cmp	x0, #0x1
    552c:	b.ls	59cc <GOMP_taskloop_ull+0x52c>  // b.plast
    5530:	ldr	x0, [x29, #216]
    5534:	cmp	x6, x0
    5538:	ccmn	x0, #0x1, #0x4, ls  // ls = plast
    553c:	b.eq	5a04 <GOMP_taskloop_ull+0x564>  // b.none
    5540:	ldr	x1, [x29, #448]
    5544:	mul	x0, x6, x0
    5548:	cmp	x22, x0
    554c:	mul	x23, x1, x6
    5550:	b.eq	5560 <GOMP_taskloop_ull+0xc0>  // b.none
    5554:	sub	x22, x22, x0
    5558:	add	x23, x23, x1
    555c:	sub	x22, x22, #0x1
    5560:	and	w0, w21, #0x800
    5564:	str	w0, [x29, #188]
    5568:	tbz	w21, #11, 59a0 <GOMP_taskloop_ull+0x500>
    556c:	adrp	x0, 0 <gomp_cancel_var>
    5570:	ldrb	w0, [x0]
    5574:	cbnz	w0, 6098 <GOMP_taskloop_ull+0xbf8>
    5578:	adrp	x0, 0 <gomp_max_task_priority_var>
    557c:	ldr	w0, [x0]
    5580:	cmp	w0, w19
    5584:	csel	w19, w0, w19, le
    5588:	tst	x21, #0x400
    558c:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    5590:	b.ne	57d4 <GOMP_taskloop_ull+0x334>  // b.any
    5594:	cbnz	x25, 5d78 <GOMP_taskloop_ull+0x8d8>
    5598:	ldr	x0, [x29, #216]
    559c:	cbz	x0, 5748 <GOMP_taskloop_ull+0x2a8>
    55a0:	add	x10, x10, x9
    55a4:	and	w0, w21, #0x2
    55a8:	mov	x21, #0x0                   	// #0
    55ac:	mov	x27, x28
    55b0:	adrp	x26, 0 <gomp_global_icv>
    55b4:	mov	x28, x23
    55b8:	add	x26, x26, #0x0
    55bc:	mov	x25, #0x1                   	// #1
    55c0:	str	x20, [x29, #192]
    55c4:	mov	w20, w19
    55c8:	mov	x19, x24
    55cc:	mov	x24, x21
    55d0:	mov	x21, x10
    55d4:	str	w0, [x29, #200]
    55d8:	ldr	x0, [x10, #80]
    55dc:	ldr	x23, [x29, #448]
    55e0:	b	5608 <GOMP_taskloop_ull+0x168>
    55e4:	ldr	x1, [x21, #80]
    55e8:	ldr	x0, [x1, #56]
    55ec:	cbnz	x0, 5720 <GOMP_taskloop_ull+0x280>
    55f0:	ldr	x0, [x1]
    55f4:	str	x0, [x21, #80]
    55f8:	ldr	x1, [x29, #216]
    55fc:	add	x24, x24, #0x1
    5600:	cmp	x1, x24
    5604:	b.eq	5748 <GOMP_taskloop_ull+0x2a8>  // b.none
    5608:	cmp	x0, #0x0
    560c:	add	x1, x0, #0x90
    5610:	csel	x1, x26, x1, eq  // eq = none
    5614:	ldp	x4, x5, [x1]
    5618:	stp	x4, x5, [x29, #368]
    561c:	ldp	x4, x5, [x1, #16]
    5620:	stp	x4, x5, [x29, #384]
    5624:	ldr	x1, [x1, #32]
    5628:	stp	x0, xzr, [x29, #224]
    562c:	stp	xzr, xzr, [x29, #248]
    5630:	stp	xzr, xzr, [x29, #264]
    5634:	stp	xzr, xzr, [x29, #280]
    5638:	str	xzr, [x29, #296]
    563c:	str	w20, [x29, #312]
    5640:	str	x1, [x29, #400]
    5644:	str	x25, [x29, #424]
    5648:	cbz	x0, 59dc <GOMP_taskloop_ull+0x53c>
    564c:	ldrb	w1, [x0, #205]
    5650:	cbnz	w1, 565c <GOMP_taskloop_ull+0x1bc>
    5654:	ldr	w1, [x29, #200]
    5658:	cbz	w1, 5664 <GOMP_taskloop_ull+0x1c4>
    565c:	mov	w1, #0x1                   	// #1
    5660:	strb	w1, [x29, #429]
    5664:	ldrb	w1, [x0, #204]
    5668:	ldr	x0, [x0, #40]
    566c:	str	x0, [x29, #264]
    5670:	strb	w1, [x29, #428]
    5674:	ldr	x1, [x29, #208]
    5678:	cmp	x22, x24
    567c:	add	x0, x29, #0xe0
    5680:	str	x0, [x21, #80]
    5684:	str	x19, [x27]
    5688:	add	x19, x19, x28
    568c:	str	x19, [x27, #8]
    5690:	sub	x0, x28, x23
    5694:	csel	x28, x0, x28, eq  // eq = none
    5698:	mov	x0, x27
    569c:	blr	x1
    56a0:	ldr	x0, [x29, #232]
    56a4:	cbnz	x0, 56b0 <GOMP_taskloop_ull+0x210>
    56a8:	ldr	x0, [x29, #248]
    56ac:	cbz	x0, 55e4 <GOMP_taskloop_ull+0x144>
    56b0:	ldr	x0, [x29, #192]
    56b4:	add	x4, x0, #0x500
    56b8:	mov	w0, #0x1                   	// #1
    56bc:	ldaxr	w1, [x4]
    56c0:	cbnz	w1, 56cc <GOMP_taskloop_ull+0x22c>
    56c4:	stxr	w2, w0, [x4]
    56c8:	cbnz	w2, 56bc <GOMP_taskloop_ull+0x21c>
    56cc:	cmp	w1, #0x0
    56d0:	b.ne	61f8 <GOMP_taskloop_ull+0xd58>  // b.any
    56d4:	ldr	x1, [x29, #232]
    56d8:	cbnz	x1, 59ec <GOMP_taskloop_ull+0x54c>
    56dc:	ldr	x1, [x29, #248]
    56e0:	mov	x0, x1
    56e4:	cbz	x1, 56f8 <GOMP_taskloop_ull+0x258>
    56e8:	stur	xzr, [x0, #-112]
    56ec:	ldr	x0, [x0]
    56f0:	cmp	x1, x0
    56f4:	b.ne	56e8 <GOMP_taskloop_ull+0x248>  // b.any
    56f8:	ldxr	w0, [x4]
    56fc:	stlxr	w1, wzr, [x4]
    5700:	cbnz	w1, 56f8 <GOMP_taskloop_ull+0x258>
    5704:	tbz	w0, #31, 55e4 <GOMP_taskloop_ull+0x144>
    5708:	mov	x0, x4
    570c:	bl	0 <gomp_mutex_unlock_slow>
    5710:	ldr	x1, [x21, #80]
    5714:	ldr	x0, [x1, #56]
    5718:	cbz	x0, 55f0 <GOMP_taskloop_ull+0x150>
    571c:	nop
    5720:	str	x1, [x29, #176]
    5724:	bl	0 <free>
    5728:	ldr	x1, [x29, #176]
    572c:	add	x24, x24, #0x1
    5730:	ldr	x0, [x1]
    5734:	str	x0, [x21, #80]
    5738:	ldr	x1, [x29, #216]
    573c:	cmp	x1, x24
    5740:	b.ne	5608 <GOMP_taskloop_ull+0x168>  // b.any
    5744:	nop
    5748:	ldr	w0, [x29, #188]
    574c:	cbnz	w0, 5754 <GOMP_taskloop_ull+0x2b4>
    5750:	bl	3f08 <GOMP_taskgroup_end>
    5754:	mov	sp, x29
    5758:	ldp	x19, x20, [sp, #16]
    575c:	ldp	x21, x22, [sp, #32]
    5760:	ldp	x23, x24, [sp, #48]
    5764:	ldp	x25, x26, [sp, #64]
    5768:	ldp	x27, x28, [sp, #80]
    576c:	ldp	x29, x30, [sp], #432
    5770:	ret
    5774:	cmp	x24, x3
    5778:	b.ls	5754 <GOMP_taskloop_ull+0x2b4>  // b.plast
    577c:	ldr	x0, [x29, #448]
    5780:	sub	x22, x24, x3
    5784:	mvn	x0, x0
    5788:	add	x22, x22, x0
    578c:	ldr	x0, [x29, #448]
    5790:	neg	x0, x0
    5794:	udiv	x22, x22, x0
    5798:	tbnz	w21, #9, 5520 <GOMP_taskloop_ull+0x80>
    579c:	cbnz	x6, 57a8 <GOMP_taskloop_ull+0x308>
    57a0:	cbz	x20, 603c <GOMP_taskloop_ull+0xb9c>
    57a4:	ldr	w6, [x20]
    57a8:	cmp	x22, x6
    57ac:	b.ls	598c <GOMP_taskloop_ull+0x4ec>  // b.plast
    57b0:	udiv	x3, x22, x6
    57b4:	str	x6, [x29, #216]
    57b8:	ldr	x0, [x29, #448]
    57bc:	msub	x6, x3, x6, x22
    57c0:	mul	x23, x3, x0
    57c4:	cbz	x6, 5560 <GOMP_taskloop_ull+0xc0>
    57c8:	add	x23, x23, x0
    57cc:	sub	x22, x6, #0x1
    57d0:	b	5560 <GOMP_taskloop_ull+0xc0>
    57d4:	add	x0, x10, x9
    57d8:	ldr	x27, [x0, #80]
    57dc:	cbz	x27, 57e8 <GOMP_taskloop_ull+0x348>
    57e0:	ldrb	w0, [x27, #205]
    57e4:	cbnz	w0, 5594 <GOMP_taskloop_ull+0xf4>
    57e8:	ldr	w0, [x20]
    57ec:	ldr	x2, [x29, #216]
    57f0:	ldr	w1, [x20, #1320]
    57f4:	lsl	w0, w0, #6
    57f8:	add	x1, x1, x2
    57fc:	cmp	x1, x0
    5800:	b.hi	5594 <GOMP_taskloop_ull+0xf4>  // b.pmore
    5804:	ldr	x1, [x29, #216]
    5808:	mov	x2, sp
    580c:	str	x2, [x29, #112]
    5810:	ldr	x26, [x27, #40]
    5814:	lsl	x0, x1, #3
    5818:	add	x0, x0, #0xf
    581c:	and	x0, x0, #0xfffffffffffffff0
    5820:	sub	sp, sp, x0
    5824:	mov	x0, sp
    5828:	str	x0, [x29, #176]
    582c:	cbz	x1, 5a34 <GOMP_taskloop_ull+0x594>
    5830:	ubfx	x1, x21, #1, #1
    5834:	add	x0, x4, #0xcf
    5838:	stp	x0, x1, [x29, #144]
    583c:	neg	x1, x4
    5840:	mov	x21, #0x0                   	// #0
    5844:	str	x1, [x29, #136]
    5848:	add	x9, x10, x9
    584c:	ldr	x1, [x29, #200]
    5850:	str	x20, [x29, #104]
    5854:	mov	x20, x23
    5858:	mov	x23, x21
    585c:	add	x1, x0, x1
    5860:	adrp	x0, 0 <gomp_global_icv>
    5864:	mov	x21, x1
    5868:	add	x0, x0, #0x0
    586c:	str	x22, [x29, #120]
    5870:	mov	x22, x9
    5874:	str	x0, [x29, #128]
    5878:	str	x26, [x29, #160]
    587c:	str	w19, [x29, #168]
    5880:	b	58dc <GOMP_taskloop_ull+0x43c>
    5884:	blr	x25
    5888:	mov	w0, #0x1                   	// #1
    588c:	strb	w0, [x19, #206]
    5890:	ldr	x0, [x29, #120]
    5894:	str	x24, [x26]
    5898:	add	x24, x24, x20
    589c:	str	x24, [x26, #8]
    58a0:	cmp	x0, x23
    58a4:	add	x23, x23, #0x1
    58a8:	ldr	x0, [x29, #208]
    58ac:	stp	x0, x26, [x19, #184]
    58b0:	ldr	x0, [x29, #448]
    58b4:	str	x27, [x22, #80]
    58b8:	sub	x0, x20, x0
    58bc:	csel	x20, x0, x20, eq  // eq = none
    58c0:	mov	w0, #0x2                   	// #2
    58c4:	str	w0, [x19, #200]
    58c8:	ldr	x0, [x29, #216]
    58cc:	cmp	x0, x23
    58d0:	ldrb	w0, [x29, #152]
    58d4:	strb	w0, [x19, #205]
    58d8:	b.eq	5a28 <GOMP_taskloop_ull+0x588>  // b.none
    58dc:	mov	x0, x21
    58e0:	bl	0 <gomp_malloc>
    58e4:	ldr	x3, [x29, #176]
    58e8:	str	x0, [x29, #192]
    58ec:	ldr	x0, [x22, #80]
    58f0:	mov	x1, x28
    58f4:	ldr	x19, [x29, #192]
    58f8:	str	x19, [x3, x23, lsl #3]
    58fc:	ldr	x3, [x29, #128]
    5900:	cmp	x0, #0x0
    5904:	add	x0, x0, #0x90
    5908:	mov	x2, x19
    590c:	csel	x0, x3, x0, eq  // eq = none
    5910:	ldr	x3, [x29, #144]
    5914:	str	x27, [x2], #144
    5918:	ldp	x8, x9, [x0]
    591c:	stp	x8, x9, [x19, #144]
    5920:	add	x4, x19, x3
    5924:	ldp	x8, x9, [x0, #16]
    5928:	stp	x8, x9, [x2, #16]
    592c:	ldr	x0, [x0, #32]
    5930:	str	x0, [x2, #32]
    5934:	mov	x2, #0x1                   	// #1
    5938:	str	x2, [x19, #200]
    593c:	ldr	x0, [x29, #136]
    5940:	str	xzr, [x19, #8]
    5944:	ldr	x3, [x29, #160]
    5948:	stp	xzr, xzr, [x19, #24]
    594c:	ldrb	w2, [x27, #204]
    5950:	str	x3, [x19, #40]
    5954:	and	x26, x4, x0
    5958:	ldr	w3, [x29, #168]
    595c:	mov	x0, x26
    5960:	str	xzr, [x19, #48]
    5964:	str	xzr, [x19, #56]
    5968:	str	xzr, [x19, #64]
    596c:	str	xzr, [x19, #72]
    5970:	str	x19, [x22, #80]
    5974:	str	w3, [x19, #88]
    5978:	strb	w2, [x19, #204]
    597c:	cbnz	x25, 5884 <GOMP_taskloop_ull+0x3e4>
    5980:	ldr	x2, [x29, #200]
    5984:	bl	0 <memcpy>
    5988:	b	5890 <GOMP_taskloop_ull+0x3f0>
    598c:	and	w0, w21, #0x800
    5990:	str	w0, [x29, #188]
    5994:	str	x22, [x29, #216]
    5998:	ldr	x23, [x29, #448]
    599c:	tbnz	w21, #11, 556c <GOMP_taskloop_ull+0xcc>
    59a0:	stp	x10, x9, [x29, #168]
    59a4:	str	x4, [x29, #192]
    59a8:	bl	3e90 <GOMP_taskgroup_start>
    59ac:	ldp	x10, x9, [x29, #168]
    59b0:	ldr	x4, [x29, #192]
    59b4:	tbz	w21, #12, 5578 <GOMP_taskloop_ull+0xd8>
    59b8:	ldr	x0, [x28, #16]
    59bc:	bl	4560 <GOMP_taskgroup_reduction_register>
    59c0:	ldp	x10, x9, [x29, #168]
    59c4:	ldr	x4, [x29, #192]
    59c8:	b	5578 <GOMP_taskloop_ull+0xd8>
    59cc:	mov	x0, #0x1                   	// #1
    59d0:	sub	x23, x3, x24
    59d4:	str	x0, [x29, #216]
    59d8:	b	5560 <GOMP_taskloop_ull+0xc0>
    59dc:	ldr	w0, [x29, #200]
    59e0:	cbz	w0, 5674 <GOMP_taskloop_ull+0x1d4>
    59e4:	strb	w25, [x29, #429]
    59e8:	b	5674 <GOMP_taskloop_ull+0x1d4>
    59ec:	add	x0, x29, #0xe8
    59f0:	str	x4, [x29, #176]
    59f4:	bl	e0 <gomp_clear_parent_in_tree>
    59f8:	str	xzr, [x29, #232]
    59fc:	ldr	x4, [x29, #176]
    5a00:	b	56f8 <GOMP_taskloop_ull+0x258>
    5a04:	ldr	x0, [x29, #216]
    5a08:	ldr	x1, [x29, #448]
    5a0c:	udiv	x3, x22, x0
    5a10:	msub	x0, x3, x0, x22
    5a14:	mul	x23, x3, x1
    5a18:	cbz	x0, 5560 <GOMP_taskloop_ull+0xc0>
    5a1c:	add	x23, x23, x1
    5a20:	sub	x22, x0, #0x1
    5a24:	b	5560 <GOMP_taskloop_ull+0xc0>
    5a28:	ldr	w19, [x29, #168]
    5a2c:	ldr	x20, [x29, #104]
    5a30:	ldr	x26, [x29, #160]
    5a34:	add	x0, x20, #0x500
    5a38:	mov	x2, x0
    5a3c:	mov	w0, #0x1                   	// #1
    5a40:	str	x2, [x29, #200]
    5a44:	ldaxr	w1, [x2]
    5a48:	cbnz	w1, 5a54 <GOMP_taskloop_ull+0x5b4>
    5a4c:	stxr	w3, w0, [x2]
    5a50:	cbnz	w3, 5a44 <GOMP_taskloop_ull+0x5a4>
    5a54:	cmp	w1, #0x0
    5a58:	b.ne	6214 <GOMP_taskloop_ull+0xd74>  // b.any
    5a5c:	adrp	x0, 0 <gomp_cancel_var>
    5a60:	cmp	x25, #0x0
    5a64:	cset	w1, eq  // eq = none
    5a68:	ldrb	w0, [x0]
    5a6c:	tst	w1, w0
    5a70:	b.ne	617c <GOMP_taskloop_ull+0xcdc>  // b.any
    5a74:	cbz	x26, 5a88 <GOMP_taskloop_ull+0x5e8>
    5a78:	ldr	x0, [x26, #56]
    5a7c:	ldr	x1, [x29, #216]
    5a80:	add	x0, x0, x1
    5a84:	str	x0, [x26, #56]
    5a88:	ldr	x0, [x29, #216]
    5a8c:	add	x22, x27, #0x8
    5a90:	mov	x24, #0x0                   	// #0
    5a94:	cbz	x0, 5b78 <GOMP_taskloop_ull+0x6d8>
    5a98:	add	x25, x26, #0x8
    5a9c:	str	x25, [x29, #208]
    5aa0:	mov	w25, w19
    5aa4:	add	x21, x20, #0x508
    5aa8:	ldr	x19, [x29, #176]
    5aac:	mov	x28, x26
    5ab0:	ldr	x0, [x27, #8]
    5ab4:	ldr	x23, [x19, x24, lsl #3]
    5ab8:	add	x26, x23, #0x70
    5abc:	cbnz	x0, 5d30 <GOMP_taskloop_ull+0x890>
    5ac0:	cmp	w25, #0x0
    5ac4:	ldr	x0, [x27, #24]
    5ac8:	b.gt	5cfc <GOMP_taskloop_ull+0x85c>
    5acc:	cbz	x0, 5cb8 <GOMP_taskloop_ull+0x818>
    5ad0:	ldr	x1, [x0, #8]
    5ad4:	stp	x0, x1, [x23, #112]
    5ad8:	str	x26, [x27, #24]
    5adc:	ldr	x0, [x23, #112]
    5ae0:	str	x26, [x0, #8]
    5ae4:	ldr	x0, [x23, #120]
    5ae8:	str	x26, [x0]
    5aec:	cbz	x28, 5c38 <GOMP_taskloop_ull+0x798>
    5af0:	ldr	x0, [x28, #8]
    5af4:	add	x26, x23, #0x80
    5af8:	cbnz	x0, 5bfc <GOMP_taskloop_ull+0x75c>
    5afc:	cmp	w25, #0x0
    5b00:	ldr	x0, [x28, #24]
    5b04:	b.gt	5bc0 <GOMP_taskloop_ull+0x720>
    5b08:	cbz	x0, 5d6c <GOMP_taskloop_ull+0x8cc>
    5b0c:	ldr	x1, [x0, #8]
    5b10:	stp	x0, x1, [x23, #128]
    5b14:	str	x26, [x28, #24]
    5b18:	ldr	x0, [x23, #128]
    5b1c:	str	x26, [x0, #8]
    5b20:	ldr	x0, [x23, #136]
    5b24:	str	x26, [x0]
    5b28:	ldr	x0, [x20, #1288]
    5b2c:	cbnz	x0, 5cc4 <GOMP_taskloop_ull+0x824>
    5b30:	ldr	x0, [x20, #1304]
    5b34:	add	x1, x23, #0x60
    5b38:	cbz	x0, 5cac <GOMP_taskloop_ull+0x80c>
    5b3c:	ldr	x4, [x0, #8]
    5b40:	stp	x0, x4, [x23, #96]
    5b44:	str	x1, [x0, #8]
    5b48:	ldr	x0, [x23, #104]
    5b4c:	str	x1, [x0]
    5b50:	ldr	w1, [x20, #1320]
    5b54:	add	x24, x24, #0x1
    5b58:	ldr	w0, [x20, #1324]
    5b5c:	ldr	x2, [x29, #216]
    5b60:	add	w1, w1, #0x1
    5b64:	add	w0, w0, #0x1
    5b68:	str	w1, [x20, #1320]
    5b6c:	str	w0, [x20, #1324]
    5b70:	cmp	x2, x24
    5b74:	b.ne	5ab0 <GOMP_taskloop_ull+0x610>  // b.any
    5b78:	ldr	w0, [x20, #132]
    5b7c:	ldrb	w1, [x27, #204]
    5b80:	orr	w0, w0, #0x1
    5b84:	ldr	w2, [x20, #1328]
    5b88:	eor	w1, w1, #0x1
    5b8c:	str	w0, [x20, #132]
    5b90:	ldr	w0, [x20]
    5b94:	add	w3, w2, w1
    5b98:	cmp	w3, w0
    5b9c:	b.cc	5ef4 <GOMP_taskloop_ull+0xa54>  // b.lo, b.ul, b.last
    5ba0:	ldr	x1, [x29, #200]
    5ba4:	ldxr	w0, [x1]
    5ba8:	stlxr	w2, wzr, [x1]
    5bac:	cbnz	w2, 5ba4 <GOMP_taskloop_ull+0x704>
    5bb0:	tbnz	w0, #31, 6170 <GOMP_taskloop_ull+0xcd0>
    5bb4:	ldr	x0, [x29, #112]
    5bb8:	mov	sp, x0
    5bbc:	b	5748 <GOMP_taskloop_ull+0x2a8>
    5bc0:	cbz	x0, 6104 <GOMP_taskloop_ull+0xc64>
    5bc4:	mov	x0, #0x28                  	// #40
    5bc8:	bl	0 <gomp_malloc>
    5bcc:	ldr	x2, [x29, #208]
    5bd0:	mov	x1, x0
    5bd4:	mov	x0, x2
    5bd8:	ldp	x5, x4, [x2, #16]
    5bdc:	str	wzr, [x1]
    5be0:	stp	x5, x4, [x1, #8]
    5be4:	stp	xzr, xzr, [x1, #24]
    5be8:	bl	0 <prio_splay_tree_insert>
    5bec:	ldr	x1, [x29, #208]
    5bf0:	ldr	x0, [x1]
    5bf4:	str	xzr, [x1, #16]
    5bf8:	cbz	x0, 6104 <GOMP_taskloop_ull+0xc64>
    5bfc:	ldr	x0, [x29, #208]
    5c00:	add	x1, x29, #0xe0
    5c04:	str	w25, [x29, #224]
    5c08:	bl	0 <prio_splay_tree_lookup>
    5c0c:	cbz	x0, 6104 <GOMP_taskloop_ull+0xc64>
    5c10:	ldr	x1, [x0, #8]
    5c14:	cbz	x1, 6144 <GOMP_taskloop_ull+0xca4>
    5c18:	ldr	x4, [x1, #8]
    5c1c:	stp	x1, x4, [x23, #128]
    5c20:	str	x26, [x0, #8]
    5c24:	ldr	x0, [x23, #128]
    5c28:	str	x26, [x0, #8]
    5c2c:	ldr	x0, [x23, #136]
    5c30:	str	x26, [x0]
    5c34:	nop
    5c38:	ldr	x0, [x20, #1288]
    5c3c:	cbnz	x0, 5cc4 <GOMP_taskloop_ull+0x824>
    5c40:	cmp	w25, #0x0
    5c44:	ldr	x0, [x21, #16]
    5c48:	b.le	5b34 <GOMP_taskloop_ull+0x694>
    5c4c:	cbz	x0, 5c80 <GOMP_taskloop_ull+0x7e0>
    5c50:	mov	x0, #0x28                  	// #40
    5c54:	bl	0 <gomp_malloc>
    5c58:	ldp	x5, x4, [x21, #16]
    5c5c:	mov	x1, x0
    5c60:	mov	x0, x21
    5c64:	str	wzr, [x1]
    5c68:	stp	x5, x4, [x1, #8]
    5c6c:	stp	xzr, xzr, [x1, #24]
    5c70:	bl	0 <prio_splay_tree_insert>
    5c74:	str	xzr, [x21, #16]
    5c78:	ldr	x0, [x21]
    5c7c:	cbnz	x0, 5cc4 <GOMP_taskloop_ull+0x824>
    5c80:	mov	x0, #0x28                  	// #40
    5c84:	bl	0 <gomp_malloc>
    5c88:	mov	x26, x0
    5c8c:	mov	x0, x21
    5c90:	mov	x1, x26
    5c94:	str	w25, [x26]
    5c98:	stp	xzr, xzr, [x26, #8]
    5c9c:	stp	xzr, xzr, [x26, #24]
    5ca0:	bl	0 <prio_splay_tree_insert>
    5ca4:	mov	x0, x26
    5ca8:	b	5cd8 <GOMP_taskloop_ull+0x838>
    5cac:	stp	x1, x1, [x23, #96]
    5cb0:	str	x1, [x20, #1304]
    5cb4:	b	5b50 <GOMP_taskloop_ull+0x6b0>
    5cb8:	stp	x26, x26, [x23, #112]
    5cbc:	str	x26, [x27, #24]
    5cc0:	b	5aec <GOMP_taskloop_ull+0x64c>
    5cc4:	add	x1, x29, #0xe0
    5cc8:	mov	x0, x21
    5ccc:	str	w25, [x29, #224]
    5cd0:	bl	0 <prio_splay_tree_lookup>
    5cd4:	cbz	x0, 5c80 <GOMP_taskloop_ull+0x7e0>
    5cd8:	ldr	x1, [x0, #8]
    5cdc:	add	x4, x23, #0x60
    5ce0:	cbz	x1, 60f8 <GOMP_taskloop_ull+0xc58>
    5ce4:	ldr	x0, [x1, #8]
    5ce8:	stp	x1, x0, [x23, #96]
    5cec:	str	x4, [x1, #8]
    5cf0:	ldr	x0, [x23, #104]
    5cf4:	str	x4, [x0]
    5cf8:	b	5b50 <GOMP_taskloop_ull+0x6b0>
    5cfc:	cbz	x0, 6068 <GOMP_taskloop_ull+0xbc8>
    5d00:	mov	x0, #0x28                  	// #40
    5d04:	bl	0 <gomp_malloc>
    5d08:	ldp	x5, x4, [x22, #16]
    5d0c:	mov	x1, x0
    5d10:	mov	x0, x22
    5d14:	str	wzr, [x1]
    5d18:	stp	x5, x4, [x1, #8]
    5d1c:	stp	xzr, xzr, [x1, #24]
    5d20:	bl	0 <prio_splay_tree_insert>
    5d24:	str	xzr, [x22, #16]
    5d28:	ldr	x0, [x22]
    5d2c:	cbz	x0, 6068 <GOMP_taskloop_ull+0xbc8>
    5d30:	add	x1, x29, #0xe0
    5d34:	mov	x0, x22
    5d38:	str	w25, [x29, #224]
    5d3c:	bl	0 <prio_splay_tree_lookup>
    5d40:	cbz	x0, 6068 <GOMP_taskloop_ull+0xbc8>
    5d44:	ldr	x1, [x0, #8]
    5d48:	cbz	x1, 60ec <GOMP_taskloop_ull+0xc4c>
    5d4c:	ldr	x4, [x1, #8]
    5d50:	stp	x1, x4, [x23, #112]
    5d54:	str	x26, [x0, #8]
    5d58:	ldr	x0, [x23, #112]
    5d5c:	str	x26, [x0, #8]
    5d60:	ldr	x0, [x23, #120]
    5d64:	str	x26, [x0]
    5d68:	b	5aec <GOMP_taskloop_ull+0x64c>
    5d6c:	stp	x26, x26, [x23, #128]
    5d70:	str	x26, [x28, #24]
    5d74:	b	5b28 <GOMP_taskloop_ull+0x688>
    5d78:	ldr	x0, [x29, #200]
    5d7c:	neg	x2, x4
    5d80:	ldr	x3, [x29, #216]
    5d84:	add	x0, x0, x4
    5d88:	sub	x0, x0, #0x1
    5d8c:	sub	x4, x4, #0x1
    5d90:	and	x5, x0, x2
    5d94:	mov	x1, sp
    5d98:	add	x0, x3, x3, lsl #1
    5d9c:	str	x1, [x29, #192]
    5da0:	add	x6, x10, x9
    5da4:	add	x0, x3, x0, lsl #2
    5da8:	sub	x7, x1, x0, lsl #4
    5dac:	madd	x1, x5, x3, x4
    5db0:	mov	sp, x7
    5db4:	stp	x7, x5, [x29, #168]
    5db8:	add	x1, x1, #0xf
    5dbc:	and	x1, x1, #0xfffffffffffffff0
    5dc0:	lsl	x0, x0, #4
    5dc4:	sub	sp, sp, x1
    5dc8:	add	x4, sp, x4
    5dcc:	and	x27, x4, x2
    5dd0:	ldr	x2, [x6, #80]
    5dd4:	cbz	x3, 5ee8 <GOMP_taskloop_ull+0xa48>
    5dd8:	add	x4, x0, x7
    5ddc:	mov	x1, x7
    5de0:	and	w7, w21, #0x2
    5de4:	mov	x26, x25
    5de8:	adrp	x0, 0 <gomp_global_icv>
    5dec:	mov	x3, x2
    5df0:	add	x0, x0, #0x0
    5df4:	mov	x21, x2
    5df8:	mov	x25, x4
    5dfc:	stp	x10, x9, [x29, #120]
    5e00:	stp	x27, x20, [x29, #136]
    5e04:	mov	x20, x27
    5e08:	mov	x27, x6
    5e0c:	stp	x22, x23, [x29, #152]
    5e10:	mov	x23, x5
    5e14:	mov	x22, x1
    5e18:	str	x0, [x29, #200]
    5e1c:	str	x24, [x29, #432]
    5e20:	mov	x24, x28
    5e24:	mov	w28, w7
    5e28:	b	5e74 <GOMP_taskloop_ull+0x9d4>
    5e2c:	ldrb	w4, [x3, #205]
    5e30:	cbnz	w4, 5e38 <GOMP_taskloop_ull+0x998>
    5e34:	cbz	w28, 5e40 <GOMP_taskloop_ull+0x9a0>
    5e38:	mov	w0, #0x1                   	// #1
    5e3c:	strb	w0, [x22, #205]
    5e40:	ldrb	w4, [x3, #204]
    5e44:	ldr	x3, [x3, #40]
    5e48:	str	x3, [x22, #40]
    5e4c:	strb	w4, [x22, #204]
    5e50:	str	x22, [x27, #80]
    5e54:	mov	x0, x20
    5e58:	mov	x1, x24
    5e5c:	add	x22, x22, #0xd0
    5e60:	blr	x26
    5e64:	add	x20, x20, x23
    5e68:	cmp	x25, x22
    5e6c:	b.eq	5f40 <GOMP_taskloop_ull+0xaa0>  // b.none
    5e70:	ldr	x3, [x27, #80]
    5e74:	mov	x5, x22
    5e78:	ldr	x0, [x29, #200]
    5e7c:	cmp	x3, #0x0
    5e80:	add	x4, x3, #0x90
    5e84:	str	x21, [x5], #144
    5e88:	csel	x4, x0, x4, eq  // eq = none
    5e8c:	mov	w0, #0x1                   	// #1
    5e90:	ldp	x8, x9, [x4]
    5e94:	stp	x8, x9, [x22, #144]
    5e98:	ldp	x8, x9, [x4, #16]
    5e9c:	stp	x8, x9, [x5, #16]
    5ea0:	ldr	x4, [x4, #32]
    5ea4:	str	x4, [x5, #32]
    5ea8:	str	xzr, [x22, #8]
    5eac:	stp	xzr, xzr, [x22, #24]
    5eb0:	stp	xzr, xzr, [x22, #40]
    5eb4:	stp	xzr, xzr, [x22, #56]
    5eb8:	str	xzr, [x22, #72]
    5ebc:	str	w19, [x22, #88]
    5ec0:	str	w0, [x22, #200]
    5ec4:	strb	wzr, [x22, #204]
    5ec8:	strb	wzr, [x22, #205]
    5ecc:	strb	wzr, [x22, #206]
    5ed0:	strb	wzr, [x22, #207]
    5ed4:	cbnz	x3, 5e2c <GOMP_taskloop_ull+0x98c>
    5ed8:	cbz	w28, 5e50 <GOMP_taskloop_ull+0x9b0>
    5edc:	mov	w0, #0x1                   	// #1
    5ee0:	strb	w0, [x22, #205]
    5ee4:	b	5e50 <GOMP_taskloop_ull+0x9b0>
    5ee8:	ldr	x0, [x29, #192]
    5eec:	mov	sp, x0
    5ef0:	b	5748 <GOMP_taskloop_ull+0x2a8>
    5ef4:	sub	w0, w0, w2
    5ef8:	sub	w1, w0, w1
    5efc:	ldr	x0, [x29, #216]
    5f00:	ldr	x2, [x29, #200]
    5f04:	cmp	x0, w1, sxtw
    5f08:	csel	w1, w0, w1, cc  // cc = lo, ul, last
    5f0c:	ldxr	w0, [x2]
    5f10:	stlxr	w3, wzr, [x2]
    5f14:	cbnz	w3, 5f0c <GOMP_taskloop_ull+0xa6c>
    5f18:	tbnz	w0, #31, 5f2c <GOMP_taskloop_ull+0xa8c>
    5f1c:	cbz	w1, 5bb4 <GOMP_taskloop_ull+0x714>
    5f20:	add	x0, x20, #0x80
    5f24:	bl	0 <gomp_team_barrier_wake>
    5f28:	b	5bb4 <GOMP_taskloop_ull+0x714>
    5f2c:	ldr	x0, [x29, #200]
    5f30:	str	w1, [x29, #216]
    5f34:	bl	0 <gomp_mutex_unlock_slow>
    5f38:	ldr	w1, [x29, #216]
    5f3c:	b	5f1c <GOMP_taskloop_ull+0xa7c>
    5f40:	ldp	x0, x28, [x29, #168]
    5f44:	mov	x26, #0x0                   	// #0
    5f48:	ldp	x10, x9, [x29, #120]
    5f4c:	mov	w19, #0x1                   	// #1
    5f50:	ldp	x27, x20, [x29, #136]
    5f54:	ldp	x22, x23, [x29, #152]
    5f58:	add	x21, x0, #0x8
    5f5c:	mov	x0, x26
    5f60:	add	x25, x10, x9
    5f64:	ldr	x24, [x29, #432]
    5f68:	add	x20, x20, #0x500
    5f6c:	mov	x26, x23
    5f70:	mov	x23, x0
    5f74:	b	5fa0 <GOMP_taskloop_ull+0xb00>
    5f78:	ldr	x1, [x25, #80]
    5f7c:	ldr	x0, [x1, #56]
    5f80:	cbnz	x0, 6058 <GOMP_taskloop_ull+0xbb8>
    5f84:	ldr	x0, [x1]
    5f88:	str	x0, [x25, #80]
    5f8c:	ldr	x0, [x29, #216]
    5f90:	add	x23, x23, #0x1
    5f94:	add	x21, x21, #0xd0
    5f98:	cmp	x0, x23
    5f9c:	b.eq	5ee8 <GOMP_taskloop_ull+0xa48>  // b.none
    5fa0:	sub	x0, x21, #0x8
    5fa4:	str	x0, [x25, #80]
    5fa8:	ldr	x1, [x29, #208]
    5fac:	cmp	x22, x23
    5fb0:	ldr	x0, [x29, #448]
    5fb4:	str	x24, [x27]
    5fb8:	add	x24, x24, x26
    5fbc:	str	x24, [x27, #8]
    5fc0:	sub	x0, x26, x0
    5fc4:	csel	x26, x0, x26, eq  // eq = none
    5fc8:	mov	x0, x27
    5fcc:	blr	x1
    5fd0:	add	x27, x27, x28
    5fd4:	ldr	x0, [x21]
    5fd8:	cbnz	x0, 5fe4 <GOMP_taskloop_ull+0xb44>
    5fdc:	ldr	x0, [x21, #16]
    5fe0:	cbz	x0, 5f78 <GOMP_taskloop_ull+0xad8>
    5fe4:	ldaxr	w1, [x20]
    5fe8:	cbnz	w1, 5ff4 <GOMP_taskloop_ull+0xb54>
    5fec:	stxr	w0, w19, [x20]
    5ff0:	cbnz	w0, 5fe4 <GOMP_taskloop_ull+0xb44>
    5ff4:	cmp	w1, #0x0
    5ff8:	b.ne	6220 <GOMP_taskloop_ull+0xd80>  // b.any
    5ffc:	ldr	x1, [x21]
    6000:	cbnz	x1, 6134 <GOMP_taskloop_ull+0xc94>
    6004:	ldr	x1, [x21, #16]
    6008:	mov	x0, x1
    600c:	cbz	x1, 6020 <GOMP_taskloop_ull+0xb80>
    6010:	stur	xzr, [x0, #-112]
    6014:	ldr	x0, [x0]
    6018:	cmp	x1, x0
    601c:	b.ne	6010 <GOMP_taskloop_ull+0xb70>  // b.any
    6020:	ldxr	w0, [x20]
    6024:	stlxr	w1, wzr, [x20]
    6028:	cbnz	w1, 6020 <GOMP_taskloop_ull+0xb80>
    602c:	tbz	w0, #31, 5f78 <GOMP_taskloop_ull+0xad8>
    6030:	mov	x0, x20
    6034:	bl	0 <gomp_mutex_unlock_slow>
    6038:	b	5f78 <GOMP_taskloop_ull+0xad8>
    603c:	cmp	x22, #0x1
    6040:	b.ls	598c <GOMP_taskloop_ull+0x4ec>  // b.plast
    6044:	ldr	x0, [x29, #448]
    6048:	mul	x23, x22, x0
    604c:	mov	x0, #0x1                   	// #1
    6050:	str	x0, [x29, #216]
    6054:	b	5560 <GOMP_taskloop_ull+0xc0>
    6058:	str	x1, [x29, #200]
    605c:	bl	0 <free>
    6060:	ldr	x1, [x29, #200]
    6064:	b	5f84 <GOMP_taskloop_ull+0xae4>
    6068:	mov	x0, #0x28                  	// #40
    606c:	bl	0 <gomp_malloc>
    6070:	mov	x1, x0
    6074:	mov	x0, x22
    6078:	str	x1, [x29, #192]
    607c:	str	w25, [x1]
    6080:	stp	xzr, xzr, [x1, #8]
    6084:	stp	xzr, xzr, [x1, #24]
    6088:	bl	0 <prio_splay_tree_insert>
    608c:	ldr	x1, [x29, #192]
    6090:	mov	x0, x1
    6094:	b	5d44 <GOMP_taskloop_ull+0x8a4>
    6098:	add	x0, x10, x9
    609c:	ldr	x27, [x0, #80]
    60a0:	cbz	x27, 6150 <GOMP_taskloop_ull+0xcb0>
    60a4:	ldr	x0, [x27, #40]
    60a8:	cbz	x0, 60cc <GOMP_taskloop_ull+0xc2c>
    60ac:	ldrb	w1, [x0, #49]
    60b0:	cbnz	w1, 5754 <GOMP_taskloop_ull+0x2b4>
    60b4:	ldrb	w1, [x0, #50]
    60b8:	cbz	w1, 60cc <GOMP_taskloop_ull+0xc2c>
    60bc:	ldr	x0, [x0]
    60c0:	cbz	x0, 60cc <GOMP_taskloop_ull+0xc2c>
    60c4:	ldrb	w0, [x0, #49]
    60c8:	cbnz	w0, 5754 <GOMP_taskloop_ull+0x2b4>
    60cc:	adrp	x0, 0 <gomp_max_task_priority_var>
    60d0:	ldr	w0, [x0]
    60d4:	cmp	w0, w19
    60d8:	csel	w19, w0, w19, le
    60dc:	tst	x21, #0x400
    60e0:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    60e4:	b.eq	5594 <GOMP_taskloop_ull+0xf4>  // b.none
    60e8:	b	57e0 <GOMP_taskloop_ull+0x340>
    60ec:	stp	x26, x26, [x23, #112]
    60f0:	str	x26, [x0, #8]
    60f4:	b	5aec <GOMP_taskloop_ull+0x64c>
    60f8:	stp	x4, x4, [x23, #96]
    60fc:	str	x4, [x0, #8]
    6100:	b	5b50 <GOMP_taskloop_ull+0x6b0>
    6104:	mov	x0, #0x28                  	// #40
    6108:	bl	0 <gomp_malloc>
    610c:	mov	x1, x0
    6110:	str	x1, [x29, #192]
    6114:	ldr	x0, [x29, #208]
    6118:	str	w25, [x1]
    611c:	stp	xzr, xzr, [x1, #8]
    6120:	stp	xzr, xzr, [x1, #24]
    6124:	bl	0 <prio_splay_tree_insert>
    6128:	ldr	x1, [x29, #192]
    612c:	mov	x0, x1
    6130:	b	5c10 <GOMP_taskloop_ull+0x770>
    6134:	mov	x0, x21
    6138:	bl	e0 <gomp_clear_parent_in_tree>
    613c:	str	xzr, [x21]
    6140:	b	6020 <GOMP_taskloop_ull+0xb80>
    6144:	stp	x26, x26, [x23, #128]
    6148:	str	x26, [x0, #8]
    614c:	b	5c38 <GOMP_taskloop_ull+0x798>
    6150:	adrp	x0, 0 <gomp_max_task_priority_var>
    6154:	ldr	w0, [x0]
    6158:	cmp	w0, w19
    615c:	csel	w19, w0, w19, le
    6160:	tst	x21, #0x400
    6164:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    6168:	b.eq	5594 <GOMP_taskloop_ull+0xf4>  // b.none
    616c:	b	57e8 <GOMP_taskloop_ull+0x348>
    6170:	ldr	x0, [x29, #200]
    6174:	bl	0 <gomp_mutex_unlock_slow>
    6178:	b	5bb4 <GOMP_taskloop_ull+0x714>
    617c:	ldr	w0, [x20, #132]
    6180:	tbnz	w0, #2, 61a8 <GOMP_taskloop_ull+0xd08>
    6184:	cbz	x26, 5a88 <GOMP_taskloop_ull+0x5e8>
    6188:	ldrb	w0, [x26, #49]
    618c:	cbnz	w0, 61a8 <GOMP_taskloop_ull+0xd08>
    6190:	ldrb	w0, [x26, #50]
    6194:	cbz	w0, 5a78 <GOMP_taskloop_ull+0x5d8>
    6198:	ldr	x0, [x26]
    619c:	cbz	x0, 5a78 <GOMP_taskloop_ull+0x5d8>
    61a0:	ldrb	w0, [x0, #49]
    61a4:	cbz	w0, 5a78 <GOMP_taskloop_ull+0x5d8>
    61a8:	ldr	x0, [x29, #200]
    61ac:	mov	x19, #0x0                   	// #0
    61b0:	bl	9c8 <gomp_mutex_unlock>
    61b4:	ldr	x0, [x29, #216]
    61b8:	cbz	x0, 61e4 <GOMP_taskloop_ull+0xd44>
    61bc:	ldr	x0, [x29, #176]
    61c0:	ldr	x20, [x0, x19, lsl #3]
    61c4:	add	x19, x19, #0x1
    61c8:	ldr	x0, [x20, #56]
    61cc:	cbnz	x0, 620c <GOMP_taskloop_ull+0xd6c>
    61d0:	mov	x0, x20
    61d4:	bl	0 <free>
    61d8:	ldr	x0, [x29, #216]
    61dc:	cmp	x0, x19
    61e0:	b.ne	61bc <GOMP_taskloop_ull+0xd1c>  // b.any
    61e4:	ldr	w0, [x29, #188]
    61e8:	cbz	w0, 622c <GOMP_taskloop_ull+0xd8c>
    61ec:	ldr	x0, [x29, #112]
    61f0:	mov	sp, x0
    61f4:	b	5754 <GOMP_taskloop_ull+0x2b4>
    61f8:	mov	x0, x4
    61fc:	str	x4, [x29, #176]
    6200:	bl	0 <gomp_mutex_lock_slow>
    6204:	ldr	x4, [x29, #176]
    6208:	b	56d4 <GOMP_taskloop_ull+0x234>
    620c:	bl	0 <free>
    6210:	b	61d0 <GOMP_taskloop_ull+0xd30>
    6214:	ldr	x0, [x29, #200]
    6218:	bl	0 <gomp_mutex_lock_slow>
    621c:	b	5a5c <GOMP_taskloop_ull+0x5bc>
    6220:	mov	x0, x20
    6224:	bl	0 <gomp_mutex_lock_slow>
    6228:	b	5ffc <GOMP_taskloop_ull+0xb5c>
    622c:	bl	3f08 <GOMP_taskgroup_end>
    6230:	b	61ec <GOMP_taskloop_ull+0xd4c>
    6234:	nop

0000000000006238 <GOMP_taskgroup_reduction_unregister>:
    6238:	stp	x29, x30, [sp, #-32]!
    623c:	mov	x29, sp
    6240:	str	x19, [sp, #16]
    6244:	mov	x19, x0
    6248:	ldr	x0, [x0, #40]
    624c:	bl	0 <free>
    6250:	b	625c <GOMP_taskgroup_reduction_unregister+0x24>
    6254:	ldr	x0, [x19, #40]
    6258:	cbnz	x0, 626c <GOMP_taskgroup_reduction_unregister+0x34>
    625c:	ldr	x0, [x19, #16]
    6260:	bl	0 <gomp_aligned_free>
    6264:	ldr	x19, [x19, #32]
    6268:	cbnz	x19, 6254 <GOMP_taskgroup_reduction_unregister+0x1c>
    626c:	ldr	x19, [sp, #16]
    6270:	ldp	x29, x30, [sp], #32
    6274:	ret

0000000000006278 <GOMP_task_reduction_remap>:
    6278:	adrp	x4, 0 <gomp_tls_data>
    627c:	ldr	x4, [x4]
    6280:	mrs	x3, tpidr_el0
    6284:	stp	x29, x30, [sp, #-32]!
    6288:	mov	x14, x0
    628c:	add	x3, x3, x4
    6290:	mov	x29, sp
    6294:	stp	x19, x20, [sp, #16]
    6298:	ldr	w15, [x3, #40]
    629c:	ldr	x0, [x3, #80]
    62a0:	ldr	x0, [x0, #40]
    62a4:	ldr	x20, [x0, #40]
    62a8:	ldr	x19, [x20, #40]
    62ac:	cbz	x14, 63d0 <GOMP_task_reduction_remap+0x158>
    62b0:	mov	x18, x1
    62b4:	mov	x12, x2
    62b8:	mov	w15, w15
    62bc:	mov	x13, #0x0                   	// #0
    62c0:	b	62f0 <GOMP_task_reduction_remap+0x78>
    62c4:	ldp	x4, x3, [x0, #8]
    62c8:	cmp	x13, x18
    62cc:	ldp	x1, x2, [x3, #8]
    62d0:	add	x2, x2, x4
    62d4:	madd	x1, x15, x1, x2
    62d8:	str	x1, [x12]
    62dc:	b.cc	63b8 <GOMP_task_reduction_remap+0x140>  // b.lo, b.ul, b.last
    62e0:	add	x13, x13, #0x1
    62e4:	add	x12, x12, #0x8
    62e8:	cmp	x14, x13
    62ec:	b.eq	63d0 <GOMP_task_reduction_remap+0x158>  // b.none
    62f0:	mov	x1, x12
    62f4:	mov	x0, x19
    62f8:	bl	0 <htab_find>
    62fc:	cbnz	x0, 62c4 <GOMP_task_reduction_remap+0x4c>
    6300:	ldr	x4, [x12]
    6304:	mov	x2, x20
    6308:	ldr	x3, [x2, #16]
    630c:	cmp	x4, x3
    6310:	b.cc	6320 <GOMP_task_reduction_remap+0xa8>  // b.lo, b.ul, b.last
    6314:	ldr	x0, [x2, #48]
    6318:	cmp	x4, x0
    631c:	b.cc	6338 <GOMP_task_reduction_remap+0xc0>  // b.lo, b.ul, b.last
    6320:	ldr	x2, [x2, #32]
    6324:	cbnz	x2, 6308 <GOMP_task_reduction_remap+0x90>
    6328:	adrp	x0, 0 <htab_find>
    632c:	mov	x1, x4
    6330:	add	x0, x0, #0x0
    6334:	bl	0 <gomp_fatal>
    6338:	ldr	x0, [x2, #8]
    633c:	sub	x4, x4, x3
    6340:	cmp	x13, x18
    6344:	udiv	x1, x4, x0
    6348:	msub	x4, x1, x0, x4
    634c:	madd	x0, x15, x0, x4
    6350:	add	x3, x0, x3
    6354:	str	x3, [x12]
    6358:	b.cs	62e0 <GOMP_task_reduction_remap+0x68>  // b.hs, b.nlast
    635c:	ldr	x5, [x2]
    6360:	mov	x6, #0x0                   	// #0
    6364:	sub	x5, x5, #0x1
    6368:	b	6378 <GOMP_task_reduction_remap+0x100>
    636c:	add	x6, x1, #0x1
    6370:	cmp	x5, x6
    6374:	b.cc	63a8 <GOMP_task_reduction_remap+0x130>  // b.lo, b.ul, b.last
    6378:	add	x1, x6, x5
    637c:	and	x0, x1, #0xfffffffffffffffe
    6380:	lsr	x1, x1, #1
    6384:	add	x0, x0, x1
    6388:	add	x0, x2, x0, lsl #3
    638c:	ldr	x7, [x0, #64]
    6390:	cmp	x7, x4
    6394:	b.cc	636c <GOMP_task_reduction_remap+0xf4>  // b.lo, b.ul, b.last
    6398:	b.eq	63dc <GOMP_task_reduction_remap+0x164>  // b.none
    639c:	sub	x5, x1, #0x1
    63a0:	cmp	x5, x6
    63a4:	b.cs	6378 <GOMP_task_reduction_remap+0x100>  // b.hs, b.nlast
    63a8:	adrp	x0, 0 <htab_find>
    63ac:	mov	x1, x3
    63b0:	add	x0, x0, #0x0
    63b4:	bl	0 <gomp_fatal>
    63b8:	ldr	x0, [x0]
    63bc:	str	x0, [x12, x14, lsl #3]
    63c0:	add	x13, x13, #0x1
    63c4:	add	x12, x12, #0x8
    63c8:	cmp	x14, x13
    63cc:	b.ne	62f0 <GOMP_task_reduction_remap+0x78>  // b.any
    63d0:	ldp	x19, x20, [sp, #16]
    63d4:	ldp	x29, x30, [sp], #32
    63d8:	ret
    63dc:	ldr	x0, [x0, #56]
    63e0:	str	x0, [x12, x14, lsl #3]
    63e4:	b	62e0 <GOMP_task_reduction_remap+0x68>

00000000000063e8 <gomp_parallel_reduction_register>:
    63e8:	stp	x29, x30, [sp, #-96]!
    63ec:	mov	x29, sp
    63f0:	stp	x19, x20, [sp, #16]
    63f4:	stp	x21, x22, [sp, #32]
    63f8:	mov	w22, w1
    63fc:	stp	x23, x24, [sp, #48]
    6400:	mov	x24, x0
    6404:	mov	x0, #0x40                  	// #64
    6408:	str	x25, [sp, #64]
    640c:	bl	0 <gomp_malloc>
    6410:	mov	x23, x0
    6414:	str	xzr, [x0], #8
    6418:	mov	x19, x24
    641c:	mov	x25, #0x0                   	// #0
    6420:	str	xzr, [x23, #8]
    6424:	stp	xzr, xzr, [x0, #16]
    6428:	str	xzr, [x23, #40]
    642c:	strh	wzr, [x23, #48]
    6430:	strb	wzr, [x23, #50]
    6434:	str	wzr, [x23, #52]
    6438:	str	xzr, [x23, #56]
    643c:	nop
    6440:	ldp	x20, x0, [x19, #8]
    6444:	mul	x20, x22, x20
    6448:	mov	x1, x20
    644c:	bl	0 <gomp_aligned_alloc>
    6450:	mov	x2, x20
    6454:	mov	x21, x0
    6458:	mov	w1, #0x0                   	// #0
    645c:	bl	0 <memset>
    6460:	ldr	x0, [x19, #32]
    6464:	add	x20, x20, x21
    6468:	ldr	x1, [x19]
    646c:	str	x21, [x19, #16]
    6470:	stp	xzr, x20, [x19, #40]
    6474:	mov	x19, x0
    6478:	add	x25, x25, x1
    647c:	cbnz	x0, 6440 <gomp_parallel_reduction_register+0x58>
    6480:	mov	x22, x24
    6484:	mov	x0, x25
    6488:	bl	148 <htab_create>
    648c:	str	x0, [sp, #88]
    6490:	ldr	x0, [x22]
    6494:	add	x20, x22, #0x38
    6498:	mov	x21, #0x0                   	// #0
    649c:	cbz	x0, 64d0 <gomp_parallel_reduction_register+0xe8>
    64a0:	str	x22, [x20, #16]
    64a4:	mov	x19, x20
    64a8:	add	x0, sp, #0x58
    64ac:	mov	w2, #0x1                   	// #1
    64b0:	mov	x1, x19
    64b4:	bl	2b0 <htab_find_slot>
    64b8:	ldr	x1, [x22]
    64bc:	str	x19, [x0]
    64c0:	add	x21, x21, #0x1
    64c4:	add	x20, x20, #0x18
    64c8:	cmp	x21, x1
    64cc:	b.cc	64a0 <gomp_parallel_reduction_register+0xb8>  // b.lo, b.ul, b.last
    64d0:	ldr	x0, [x22, #32]
    64d4:	cbz	x0, 64e0 <gomp_parallel_reduction_register+0xf8>
    64d8:	mov	x22, x0
    64dc:	b	6490 <gomp_parallel_reduction_register+0xa8>
    64e0:	ldr	x0, [sp, #88]
    64e4:	ldp	x19, x20, [sp, #16]
    64e8:	ldr	x25, [sp, #64]
    64ec:	str	x0, [x22, #40]
    64f0:	str	x24, [x23, #40]
    64f4:	mov	x0, x23
    64f8:	ldp	x21, x22, [sp, #32]
    64fc:	ldp	x23, x24, [sp, #48]
    6500:	ldp	x29, x30, [sp], #96
    6504:	ret

0000000000006508 <gomp_workshare_task_reduction_register>:
    6508:	adrp	x3, 0 <gomp_tls_data>
    650c:	ldr	x3, [x3]
    6510:	mrs	x2, tpidr_el0
    6514:	stp	x29, x30, [sp, #-112]!
    6518:	add	x2, x2, x3
    651c:	mov	x29, sp
    6520:	stp	x25, x26, [sp, #64]
    6524:	ldr	x25, [x2, #80]
    6528:	stp	x19, x20, [sp, #16]
    652c:	mov	x19, x0
    6530:	stp	x21, x22, [sp, #32]
    6534:	mov	x22, x1
    6538:	stp	x23, x24, [sp, #48]
    653c:	mov	x24, x0
    6540:	ldr	x1, [x2, #16]
    6544:	ldr	x0, [x25, #40]
    6548:	ldr	w26, [x1]
    654c:	ldr	x23, [x0, #40]
    6550:	str	x27, [sp, #80]
    6554:	mov	x27, #0x0                   	// #0
    6558:	cbnz	x22, 65a8 <gomp_workshare_task_reduction_register+0xa0>
    655c:	nop
    6560:	ldp	x20, x0, [x19, #8]
    6564:	mul	x20, x26, x20
    6568:	mov	x1, x20
    656c:	bl	0 <gomp_aligned_alloc>
    6570:	mov	x2, x20
    6574:	mov	x21, x0
    6578:	mov	w1, #0x0                   	// #0
    657c:	bl	0 <memset>
    6580:	ldr	x0, [x19, #32]
    6584:	add	x20, x20, x21
    6588:	ldr	x1, [x19]
    658c:	str	x21, [x19, #16]
    6590:	str	xzr, [x19, #40]
    6594:	str	x20, [x19, #48]
    6598:	add	x27, x27, x1
    659c:	cbz	x0, 65d0 <gomp_workshare_task_reduction_register+0xc8>
    65a0:	mov	x19, x0
    65a4:	cbz	x22, 6560 <gomp_workshare_task_reduction_register+0x58>
    65a8:	ldr	x0, [x22, #16]
    65ac:	str	x0, [x19, #16]
    65b0:	ldr	x1, [x19]
    65b4:	ldr	x0, [x22, #48]
    65b8:	str	x0, [x19, #48]
    65bc:	ldr	x0, [x19, #32]
    65c0:	add	x27, x27, x1
    65c4:	ldr	x22, [x22, #32]
    65c8:	str	xzr, [x19, #40]
    65cc:	cbnz	x0, 65a0 <gomp_workshare_task_reduction_register+0x98>
    65d0:	str	x23, [x19, #32]
    65d4:	cbz	x23, 66a4 <gomp_workshare_task_reduction_register+0x19c>
    65d8:	ldr	x20, [x23, #40]
    65dc:	cbz	x20, 66a4 <gomp_workshare_task_reduction_register+0x19c>
    65e0:	ldp	x0, x1, [x20, #8]
    65e4:	mov	x19, x20
    65e8:	sub	x0, x0, x1
    65ec:	add	x0, x0, x27
    65f0:	bl	148 <htab_create>
    65f4:	mov	x22, x0
    65f8:	ldp	x0, x1, [x20, #8]
    65fc:	ldr	x21, [x19], #32
    6600:	str	x22, [sp, #104]
    6604:	sub	x0, x0, x1
    6608:	add	x21, x19, x21, lsl #3
    660c:	str	x0, [x22, #8]
    6610:	b	661c <gomp_workshare_task_reduction_register+0x114>
    6614:	cmp	x21, x19
    6618:	b.ls	6648 <gomp_workshare_task_reduction_register+0x140>  // b.plast
    661c:	ldr	x20, [x19]
    6620:	add	x19, x19, #0x8
    6624:	cmp	x20, #0x1
    6628:	b.ls	6614 <gomp_workshare_task_reduction_register+0x10c>  // b.plast
    662c:	ldr	x1, [x20]
    6630:	mov	x0, x22
    6634:	eor	x1, x1, x1, lsr #32
    6638:	bl	1f0 <find_empty_slot_for_expand>
    663c:	str	x20, [x0]
    6640:	cmp	x21, x19
    6644:	b.hi	661c <gomp_workshare_task_reduction_register+0x114>  // b.pmore
    6648:	mov	x22, x24
    664c:	nop
    6650:	ldr	x0, [x22]
    6654:	add	x20, x22, #0x38
    6658:	mov	x21, #0x0                   	// #0
    665c:	cbz	x0, 6690 <gomp_workshare_task_reduction_register+0x188>
    6660:	str	x22, [x20, #16]
    6664:	mov	x19, x20
    6668:	add	x0, sp, #0x68
    666c:	mov	w2, #0x1                   	// #1
    6670:	mov	x1, x19
    6674:	bl	2b0 <htab_find_slot>
    6678:	ldr	x1, [x22]
    667c:	str	x19, [x0]
    6680:	add	x21, x21, #0x1
    6684:	add	x20, x20, #0x18
    6688:	cmp	x21, x1
    668c:	b.cc	6660 <gomp_workshare_task_reduction_register+0x158>  // b.lo, b.ul, b.last
    6690:	ldr	x0, [x22, #32]
    6694:	cmp	x23, x0
    6698:	b.eq	66b4 <gomp_workshare_task_reduction_register+0x1ac>  // b.none
    669c:	mov	x22, x0
    66a0:	b	6650 <gomp_workshare_task_reduction_register+0x148>
    66a4:	mov	x0, x27
    66a8:	bl	148 <htab_create>
    66ac:	str	x0, [sp, #104]
    66b0:	b	6648 <gomp_workshare_task_reduction_register+0x140>
    66b4:	ldr	x0, [x25, #40]
    66b8:	ldr	x1, [sp, #104]
    66bc:	ldp	x19, x20, [sp, #16]
    66c0:	ldp	x25, x26, [sp, #64]
    66c4:	ldr	x27, [sp, #80]
    66c8:	str	x1, [x22, #40]
    66cc:	ldp	x21, x22, [sp, #32]
    66d0:	str	x24, [x0, #40]
    66d4:	ldp	x23, x24, [sp, #48]
    66d8:	ldp	x29, x30, [sp], #112
    66dc:	ret

00000000000066e0 <gomp_workshare_taskgroup_start>:
    66e0:	stp	x29, x30, [sp, #-32]!
    66e4:	mov	x29, sp
    66e8:	stp	x19, x20, [sp, #16]
    66ec:	mrs	x19, tpidr_el0
    66f0:	adrp	x20, 0 <gomp_tls_data>
    66f4:	ldr	x20, [x20]
    66f8:	add	x0, x19, x20
    66fc:	ldr	x0, [x0, #16]
    6700:	cbz	x0, 6758 <gomp_workshare_taskgroup_start+0x78>
    6704:	add	x19, x19, x20
    6708:	mov	x0, #0x40                  	// #64
    670c:	ldr	x20, [x19, #80]
    6710:	ldr	x19, [x20, #40]
    6714:	bl	0 <gomp_malloc>
    6718:	mov	x1, x0
    671c:	str	x19, [x1], #8
    6720:	str	xzr, [x0, #8]
    6724:	stp	xzr, xzr, [x1, #16]
    6728:	cbz	x19, 6730 <gomp_workshare_taskgroup_start+0x50>
    672c:	ldr	x19, [x19, #40]
    6730:	str	x19, [x0, #40]
    6734:	strh	wzr, [x0, #48]
    6738:	mov	w1, #0x1                   	// #1
    673c:	str	wzr, [x0, #52]
    6740:	str	xzr, [x0, #56]
    6744:	str	x0, [x20, #40]
    6748:	strb	w1, [x0, #50]
    674c:	ldp	x19, x20, [sp, #16]
    6750:	ldp	x29, x30, [sp], #32
    6754:	ret
    6758:	bl	9e8 <gomp_create_artificial_team>
    675c:	b	6704 <gomp_workshare_taskgroup_start+0x24>

0000000000006760 <GOMP_workshare_task_reduction_unregister>:
    6760:	stp	x29, x30, [sp, #-48]!
    6764:	mrs	x1, tpidr_el0
    6768:	mov	x29, sp
    676c:	stp	x19, x20, [sp, #16]
    6770:	and	w20, w0, #0xff
    6774:	adrp	x19, 0 <gomp_tls_data>
    6778:	ldr	x19, [x19]
    677c:	stp	x21, x22, [sp, #32]
    6780:	add	x19, x1, x19
    6784:	ldr	x0, [x19, #80]
    6788:	ldr	x22, [x19, #16]
    678c:	ldr	x0, [x0, #40]
    6790:	ldr	x21, [x0, #40]
    6794:	bl	3f08 <GOMP_taskgroup_end>
    6798:	ldr	w0, [x19, #40]
    679c:	cbnz	w0, 67bc <GOMP_workshare_task_reduction_unregister+0x5c>
    67a0:	mov	x0, x21
    67a4:	bl	6238 <GOMP_taskgroup_reduction_unregister>
    67a8:	cbz	w20, 67c8 <GOMP_workshare_task_reduction_unregister+0x68>
    67ac:	ldp	x19, x20, [sp, #16]
    67b0:	ldp	x21, x22, [sp, #32]
    67b4:	ldp	x29, x30, [sp], #48
    67b8:	ret
    67bc:	ldr	x0, [x21, #40]
    67c0:	bl	0 <free>
    67c4:	cbnz	w20, 67ac <GOMP_workshare_task_reduction_unregister+0x4c>
    67c8:	add	x0, x22, #0x80
    67cc:	ldp	x19, x20, [sp, #16]
    67d0:	ldp	x21, x22, [sp, #32]
    67d4:	ldp	x29, x30, [sp], #48
    67d8:	b	0 <gomp_team_barrier_wait>
    67dc:	nop

00000000000067e0 <gomp_ialias_omp_in_final>:
    67e0:	adrp	x2, 0 <gomp_tls_data>
    67e4:	ldr	x2, [x2]
    67e8:	mrs	x1, tpidr_el0
    67ec:	mov	w0, #0x0                   	// #0
    67f0:	add	x1, x1, x2
    67f4:	ldr	x1, [x1, #80]
    67f8:	cbz	x1, 6800 <gomp_ialias_omp_in_final+0x20>
    67fc:	ldrb	w0, [x1, #205]
    6800:	ret

team.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_free_pool_helper>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	add	x0, x0, #0x40
       8:	mov	x29, sp
       c:	bl	0 <gomp_barrier_wait_last>
      10:	mrs	x0, tpidr_el0
      14:	add	x0, x0, #0x0, lsl #12
      18:	add	x0, x0, #0x0
      1c:	str	xzr, [x0, #80]
      20:	str	xzr, [x0, #96]
      24:	bl	0 <pthread_self>
      28:	bl	0 <pthread_detach>
      2c:	mov	x0, #0x0                   	// #0
      30:	bl	0 <pthread_exit>
      34:	nop

0000000000000038 <gomp_pause_pool_helper>:
      38:	stp	x29, x30, [sp, #-16]!
      3c:	add	x0, x0, #0x40
      40:	mov	x29, sp
      44:	bl	0 <gomp_barrier_wait_last>
      48:	mrs	x1, tpidr_el0
      4c:	mov	x0, #0x0                   	// #0
      50:	add	x1, x1, #0x0, lsl #12
      54:	add	x1, x1, #0x0
      58:	str	xzr, [x1, #80]
      5c:	str	xzr, [x1, #96]
      60:	bl	0 <pthread_exit>
      64:	nop

0000000000000068 <gomp_thread_start>:
      68:	stp	x29, x30, [sp, #-64]!
      6c:	mov	x29, sp
      70:	stp	x23, x24, [sp, #48]
      74:	mrs	x23, tpidr_el0
      78:	add	x1, x23, #0x0, lsl #12
      7c:	add	x1, x1, #0x0
      80:	ldp	x4, x5, [x0, #16]
      84:	stp	x19, x20, [sp, #16]
      88:	ldr	w11, [x0, #96]
      8c:	stp	x21, x22, [sp, #32]
      90:	add	x10, x1, #0x58
      94:	ldp	x8, x9, [x0, #32]
      98:	mov	x2, x4
      9c:	ldp	x20, x21, [x0]
      a0:	ldp	x22, x24, [x0, #80]
      a4:	stp	x8, x9, [x1, #32]
      a8:	ldrb	w8, [x0, #100]
      ac:	ldr	w7, [x1, #40]
      b0:	ldr	x9, [x4, #80]
      b4:	stp	x4, x5, [x1, #16]
      b8:	ldp	x4, x5, [x0, #48]
      bc:	stp	x4, x5, [x1, #48]
      c0:	ldp	x4, x5, [x0, #64]
      c4:	stp	x4, x5, [x1, #64]
      c8:	str	x22, [x1, #80]
      cc:	str	wzr, [x1, #88]
      d0:	str	w11, [x1, #92]
      d4:	str	x24, [x1, #96]
      d8:	str	x10, [x9, x7, lsl #3]
      dc:	cbz	w8, 13c <gomp_thread_start+0xd4>
      e0:	add	x19, x2, #0x80
      e4:	mov	x0, x19
      e8:	bl	0 <gomp_barrier_wait>
      ec:	mov	x0, x21
      f0:	blr	x20
      f4:	mov	x0, x19
      f8:	bl	0 <gomp_team_barrier_wait_final>
      fc:	ldr	x0, [x22, #56]
     100:	cbnz	x0, 190 <gomp_thread_start+0x128>
     104:	mov	x0, x19
     108:	bl	0 <gomp_barrier_wait_last>
     10c:	add	x23, x23, #0x0, lsl #12
     110:	add	x23, x23, #0x0
     114:	bl	0 <pthread_self>
     118:	bl	0 <pthread_detach>
     11c:	ldp	x19, x20, [sp, #16]
     120:	mov	x0, #0x0                   	// #0
     124:	ldp	x21, x22, [sp, #32]
     128:	str	xzr, [x23, #80]
     12c:	str	xzr, [x23, #96]
     130:	ldp	x23, x24, [sp, #48]
     134:	ldp	x29, x30, [sp], #64
     138:	ret
     13c:	ldr	x2, [x24], #64
     140:	mov	x19, x1
     144:	mov	x0, x24
     148:	str	x1, [x2, x7, lsl #3]
     14c:	bl	0 <gomp_barrier_wait>
     150:	b	168 <gomp_thread_start+0x100>
     154:	mov	x0, x24
     158:	bl	0 <gomp_barrier_wait>
     15c:	ldp	x20, x21, [x19]
     160:	str	xzr, [x19]
     164:	cbz	x20, 10c <gomp_thread_start+0xa4>
     168:	mov	x0, x21
     16c:	ldr	x21, [x19, #16]
     170:	ldr	x22, [x19, #80]
     174:	blr	x20
     178:	add	x0, x21, #0x80
     17c:	bl	0 <gomp_team_barrier_wait_final>
     180:	ldr	x0, [x22, #56]
     184:	cbz	x0, 154 <gomp_thread_start+0xec>
     188:	bl	0 <free>
     18c:	b	154 <gomp_thread_start+0xec>
     190:	bl	0 <free>
     194:	b	104 <gomp_thread_start+0x9c>

0000000000000198 <gomp_new_team>:
     198:	stp	x29, x30, [sp, #-48]!
     19c:	mov	x29, sp
     1a0:	stp	x19, x20, [sp, #16]
     1a4:	mrs	x19, tpidr_el0
     1a8:	add	x19, x19, #0x0, lsl #12
     1ac:	add	x19, x19, #0x0
     1b0:	stp	x21, x22, [sp, #32]
     1b4:	mov	w22, w0
     1b8:	mov	x20, x22
     1bc:	ldr	x0, [x19, #16]
     1c0:	cbz	x0, 290 <gomp_new_team+0xf8>
     1c4:	mov	w1, #0xd8                  	// #216
     1c8:	mov	x0, #0x540                 	// #1344
     1cc:	umaddl	x0, w20, w1, x0
     1d0:	bl	0 <gomp_malloc>
     1d4:	mov	x19, x0
     1d8:	str	w20, [x0]
     1dc:	stp	w20, wzr, [x0, #128]
     1e0:	stp	w20, w20, [x0, #192]
     1e4:	str	wzr, [x0, #1280]
     1e8:	add	x0, x19, #0x100
     1ec:	mov	w1, #0x8                   	// #8
     1f0:	str	w1, [x19, #4]
     1f4:	mov	w2, w20
     1f8:	str	x0, [x19, #88]
     1fc:	mov	x1, #0x0                   	// #0
     200:	str	xzr, [x19, #112]
     204:	bl	0 <gomp_init_work_share>
     208:	str	wzr, [x19, #72]
     20c:	mov	w1, #0xd0                  	// #208
     210:	mov	x2, #0x540                 	// #1344
     214:	add	x0, x19, #0x180
     218:	add	x8, x19, #0x200
     21c:	umaddl	x20, w20, w1, x2
     220:	add	x7, x19, #0x280
     224:	add	x1, x19, #0x518
     228:	add	x6, x19, #0x300
     22c:	add	x5, x19, #0x380
     230:	add	x4, x19, #0x400
     234:	add	x2, x19, x20
     238:	add	x3, x19, #0x480
     23c:	str	x2, [x19, #80]
     240:	add	x2, x19, #0x48
     244:	stp	x0, xzr, [x19, #96]
     248:	mov	x0, x19
     24c:	str	xzr, [x19, #312]
     250:	str	x8, [x19, #464]
     254:	str	x7, [x19, #592]
     258:	str	x6, [x19, #720]
     25c:	str	x5, [x19, #848]
     260:	str	x4, [x19, #976]
     264:	str	x3, [x19, #1104]
     268:	str	xzr, [x19, #1232]
     26c:	str	x2, [x19, x20]
     270:	str	xzr, [x19, #1288]
     274:	stp	xzr, xzr, [x1]
     278:	stp	xzr, xzr, [x1, #16]
     27c:	str	wzr, [x19, #1336]
     280:	ldp	x19, x20, [sp, #16]
     284:	ldp	x21, x22, [sp, #32]
     288:	ldp	x29, x30, [sp], #48
     28c:	ret
     290:	ldr	x21, [x19, #96]
     294:	cbz	x21, 2b4 <gomp_new_team+0x11c>
     298:	ldr	x19, [x21, #16]
     29c:	cbz	x19, 1c4 <gomp_new_team+0x2c>
     2a0:	ldr	w0, [x19]
     2a4:	cmp	w20, w0
     2a8:	b.ne	1c4 <gomp_new_team+0x2c>  // b.any
     2ac:	str	xzr, [x21, #16]
     2b0:	b	1e8 <gomp_new_team+0x50>
     2b4:	mov	x0, #0xc0                  	// #192
     2b8:	bl	0 <gomp_malloc>
     2bc:	adrp	x2, 4 <gomp_free_pool_helper+0x4>
     2c0:	mov	x21, x0
     2c4:	mov	x1, x19
     2c8:	str	x21, [x19, #96]
     2cc:	ldr	w0, [x2]
     2d0:	stp	xzr, xzr, [x21]
     2d4:	stp	xzr, x22, [x21, #16]
     2d8:	bl	0 <pthread_setspecific>
     2dc:	b	298 <gomp_new_team+0x100>

00000000000002e0 <gomp_team_start>:
     2e0:	stp	x29, x30, [sp, #-320]!
     2e4:	mrs	x6, tpidr_el0
     2e8:	mov	x29, sp
     2ec:	stp	x19, x20, [sp, #16]
     2f0:	adrp	x19, 0 <gomp_global_icv>
     2f4:	add	x19, x19, #0x0
     2f8:	stp	x21, x22, [sp, #32]
     2fc:	stp	x23, x24, [sp, #48]
     300:	add	x24, x6, #0x0, lsl #12
     304:	add	x24, x24, #0x0
     308:	stp	x25, x26, [sp, #64]
     30c:	mov	x26, x4
     310:	stp	x27, x28, [sp, #80]
     314:	str	x6, [x29, #160]
     318:	adrp	x6, 0 <gomp_places_list>
     31c:	ldr	x22, [x24, #80]
     320:	stp	x1, x0, [x29, #192]
     324:	ldr	x7, [x6]
     328:	str	x5, [x29, #216]
     32c:	ldr	w6, [x24, #44]
     330:	str	w6, [x29, #128]
     334:	cmp	w6, #0x0
     338:	str	w2, [x29, #236]
     33c:	cset	w8, ne  // ne = any
     340:	str	w8, [x29, #180]
     344:	cmp	x22, #0x0
     348:	add	x8, x22, #0x90
     34c:	mov	w2, w6
     350:	csel	x19, x19, x8, eq  // eq = none
     354:	ldr	x21, [x24, #96]
     358:	cbnz	x7, cdc <gomp_team_start+0x9fc>
     35c:	ldr	x0, [x29, #160]
     360:	add	w2, w2, #0x1
     364:	ldr	w4, [x29, #236]
     368:	add	x0, x0, #0x0, lsl #12
     36c:	add	x0, x0, #0x0
     370:	cmp	w4, #0x1
     374:	ldp	x8, x9, [x0, #16]
     378:	stp	x8, x9, [x26, #8]
     37c:	ldp	x8, x9, [x0, #32]
     380:	stp	x8, x9, [x26, #24]
     384:	ldp	x8, x9, [x0, #48]
     388:	stp	x8, x9, [x26, #40]
     38c:	ldp	x8, x9, [x0, #64]
     390:	str	x26, [x0, #16]
     394:	stp	wzr, w2, [x0, #40]
     398:	stp	x8, x9, [x26, #56]
     39c:	b.ls	3ac <gomp_team_start+0xcc>  // b.plast
     3a0:	ldr	w1, [x0, #48]
     3a4:	add	w1, w1, #0x1
     3a8:	str	w1, [x0, #48]
     3ac:	ldr	x0, [x29, #160]
     3b0:	adrp	x5, 0 <gomp_nthreads_var_list>
     3b4:	add	x4, x26, #0x100
     3b8:	str	x4, [x29, #208]
     3bc:	add	x1, x0, #0x0, lsl #12
     3c0:	add	x1, x1, #0x0
     3c4:	add	x0, x26, #0x540
     3c8:	ldr	x5, [x5]
     3cc:	stp	x4, xzr, [x1, #24]
     3d0:	stp	xzr, xzr, [x1, #64]
     3d4:	str	x0, [x1, #80]
     3d8:	ldr	x1, [x19]
     3dc:	str	x1, [x29, #224]
     3e0:	cbnz	x5, d10 <gomp_team_start+0xa30>
     3e4:	ldrb	w1, [x19, #26]
     3e8:	str	w1, [x29, #176]
     3ec:	cbz	w1, 400 <gomp_team_start+0x120>
     3f0:	tst	x3, #0x7
     3f4:	and	w3, w3, #0x7
     3f8:	csel	w1, w3, w1, ne  // ne = any
     3fc:	str	w1, [x29, #176]
     400:	adrp	x1, 0 <gomp_bind_var_list>
     404:	ldr	w3, [x29, #176]
     408:	str	w3, [x29, #232]
     40c:	ldr	x1, [x1]
     410:	cbnz	x1, d30 <gomp_team_start+0xa50>
     414:	mov	x2, x19
     418:	mov	x1, x22
     41c:	bl	0 <gomp_init_task>
     420:	ldr	x0, [x29, #160]
     424:	ldr	x2, [x29, #216]
     428:	add	x1, x0, #0x0, lsl #12
     42c:	add	x1, x1, #0x0
     430:	ldr	w0, [x29, #236]
     434:	cmp	w0, #0x1
     438:	ldr	x0, [x1, #80]
     43c:	str	x2, [x0, #40]
     440:	ldr	x0, [x29, #224]
     444:	str	x0, [x26, #1488]
     448:	ldrb	w0, [x29, #232]
     44c:	strb	w0, [x26, #1514]
     450:	b.eq	698 <gomp_team_start+0x3b8>  // b.none
     454:	adrp	x0, 0 <gomp_places_list>
     458:	ldr	x0, [x0]
     45c:	cbnz	x0, d54 <gomp_team_start+0xa74>
     460:	str	wzr, [x29, #124]
     464:	str	wzr, [x29, #132]
     468:	stp	wzr, wzr, [x29, #152]
     46c:	str	wzr, [x29, #176]
     470:	ldr	w1, [x29, #128]
     474:	cbz	w1, 6b8 <gomp_team_start+0x3d8>
     478:	ldr	w1, [x29, #236]
     47c:	cbnz	w1, 1044 <gomp_team_start+0xd64>
     480:	mov	w25, #0x1                   	// #1
     484:	str	wzr, [x29, #112]
     488:	stp	wzr, wzr, [x29, #136]
     48c:	str	xzr, [x29, #144]
     490:	cbnz	x0, e80 <gomp_team_start+0xba0>
     494:	ldr	w2, [x29, #236]
     498:	mov	w1, #0x70                  	// #112
     49c:	adrp	x27, 40 <gomp_pause_pool_helper+0x8>
     4a0:	add	x27, x27, #0x0
     4a4:	sub	w0, w2, w25
     4a8:	cmp	w25, w2
     4ac:	mov	x2, sp
     4b0:	umsubl	x0, w0, w1, x2
     4b4:	mov	sp, x0
     4b8:	mov	x23, sp
     4bc:	b.cs	648 <gomp_team_start+0x368>  // b.hs, b.nlast
     4c0:	adrp	x28, 0 <gomp_free_pool_helper>
     4c4:	add	x0, x28, #0x0
     4c8:	mov	w7, #0xd0                  	// #208
     4cc:	str	x0, [x29, #168]
     4d0:	ldr	x0, [x29, #160]
     4d4:	umaddl	x7, w25, w7, x26
     4d8:	ldr	w1, [x29, #124]
     4dc:	ubfiz	x4, x25, #3, #32
     4e0:	add	x28, x0, #0x0, lsl #12
     4e4:	add	x28, x28, #0x0
     4e8:	ldr	w0, [x29, #236]
     4ec:	add	x24, x7, #0x540
     4f0:	adrp	x8, 0 <gomp_places_list>
     4f4:	add	x20, x8, #0x0
     4f8:	sub	w0, w0, w1
     4fc:	str	w0, [x29, #120]
     500:	str	x21, [x29, #184]
     504:	mov	x21, x20
     508:	mov	w20, w25
     50c:	mov	x25, x22
     510:	mov	x22, x24
     514:	mov	x24, x19
     518:	mov	x19, x23
     51c:	mov	x23, x4
     520:	b	5c4 <gomp_team_start+0x2e4>
     524:	ldp	x0, x3, [x29, #200]
     528:	str	x0, [x19]
     52c:	ldr	w7, [x26, #36]
     530:	mov	x2, x24
     534:	ldr	w11, [x28, #48]
     538:	mov	x1, x25
     53c:	add	w7, w7, #0x1
     540:	stp	x26, x3, [x19, #16]
     544:	ldr	x0, [x29, #192]
     548:	str	x0, [x19, #8]
     54c:	str	xzr, [x19, #32]
     550:	mov	x0, x22
     554:	stp	w20, w7, [x19, #40]
     558:	str	w11, [x19, #48]
     55c:	stp	xzr, xzr, [x19, #64]
     560:	str	x22, [x19, #80]
     564:	bl	0 <gomp_init_task>
     568:	ldr	x0, [x19, #80]
     56c:	mov	x3, x19
     570:	ldp	x4, x1, [x29, #216]
     574:	str	x1, [x22, #144]
     578:	ldrb	w1, [x29, #232]
     57c:	strb	w1, [x22, #170]
     580:	mov	x1, x27
     584:	str	x4, [x0, #40]
     588:	add	x0, x19, #0x68
     58c:	ldr	x4, [x29, #184]
     590:	str	x4, [x19, #88]
     594:	ldrb	w4, [x29, #180]
     598:	add	x19, x19, #0x70
     59c:	ldr	x2, [x29, #168]
     5a0:	sturb	w4, [x19, #-12]
     5a4:	bl	0 <pthread_create>
     5a8:	cbnz	w0, 1248 <gomp_team_start+0xf68>
     5ac:	ldr	w0, [x29, #236]
     5b0:	add	w20, w20, #0x1
     5b4:	add	x23, x23, #0x8
     5b8:	add	x22, x22, #0xd0
     5bc:	cmp	w0, w20
     5c0:	b.eq	628 <gomp_team_start+0x348>  // b.none
     5c4:	ldr	x0, [x21]
     5c8:	str	wzr, [x19, #96]
     5cc:	ldur	x1, [x28, #52]
     5d0:	stur	x1, [x19, #52]
     5d4:	cbz	x0, 524 <gomp_team_start+0x244>
     5d8:	ldr	w0, [x29, #176]
     5dc:	cmp	w0, #0x3
     5e0:	b.eq	88c <gomp_team_start+0x5ac>  // b.none
     5e4:	cmp	w0, #0x4
     5e8:	b.eq	8b4 <gomp_team_start+0x5d4>  // b.none
     5ec:	cmp	w0, #0x1
     5f0:	b.eq	88c <gomp_team_start+0x5ac>  // b.none
     5f4:	ldr	w0, [x29, #156]
     5f8:	add	w0, w0, #0x1
     5fc:	str	w0, [x19, #96]
     600:	ldr	x0, [x29, #144]
     604:	cbz	x0, 618 <gomp_team_start+0x338>
     608:	ldr	x0, [x29, #184]
     60c:	ldr	x0, [x0]
     610:	ldr	x0, [x0, x23]
     614:	cbnz	x0, 5ac <gomp_team_start+0x2cc>
     618:	ldr	w1, [x29, #156]
     61c:	mov	x0, x27
     620:	bl	0 <gomp_init_thread_affinity>
     624:	b	524 <gomp_team_start+0x244>
     628:	add	x28, x29, #0x100
     62c:	mov	x23, x19
     630:	cmp	x27, x28
     634:	ldr	x21, [x29, #184]
     638:	b.ne	648 <gomp_team_start+0x368>  // b.any
     63c:	mov	x0, x28
     640:	bl	0 <pthread_attr_destroy>
     644:	nop
     648:	ldr	w0, [x29, #128]
     64c:	cbz	w0, 908 <gomp_team_start+0x628>
     650:	add	x0, x26, #0x80
     654:	bl	0 <gomp_barrier_wait>
     658:	ldr	w1, [x29, #136]
     65c:	ldr	w0, [x29, #236]
     660:	cmp	w0, w1
     664:	b.cc	d8c <gomp_team_start+0xaac>  // b.lo, b.ul, b.last
     668:	ldr	w0, [x29, #140]
     66c:	cbnz	w0, e74 <gomp_team_start+0xb94>
     670:	adrp	x0, 0 <gomp_display_affinity_var>
     674:	ldrb	w0, [x0]
     678:	cbnz	w0, de4 <gomp_team_start+0xb04>
     67c:	ldr	x0, [x29, #144]
     680:	cbz	x0, 698 <gomp_team_start+0x3b8>
     684:	ldr	w0, [x26, #48]
     688:	cmp	w0, #0x40
     68c:	b.ls	698 <gomp_team_start+0x3b8>  // b.plast
     690:	ldr	x0, [x29, #144]
     694:	bl	0 <free>
     698:	mov	sp, x29
     69c:	ldp	x19, x20, [sp, #16]
     6a0:	ldp	x21, x22, [sp, #32]
     6a4:	ldp	x23, x24, [sp, #48]
     6a8:	ldp	x25, x26, [sp, #64]
     6ac:	ldp	x27, x28, [sp, #80]
     6b0:	ldp	x29, x30, [sp], #320
     6b4:	ret
     6b8:	ldr	w0, [x21, #12]
     6bc:	ldr	w1, [x29, #236]
     6c0:	str	w0, [x29, #136]
     6c4:	str	w1, [x29, #184]
     6c8:	cmp	w1, w0
     6cc:	b.hi	b30 <gomp_team_start+0x850>  // b.pmore
     6d0:	ldr	w1, [x29, #236]
     6d4:	ldr	w0, [x21, #8]
     6d8:	str	w1, [x21, #12]
     6dc:	cmp	w0, w1
     6e0:	b.ls	b54 <gomp_team_start+0x874>  // b.plast
     6e4:	ldr	w0, [x29, #184]
     6e8:	cmp	w0, #0x1
     6ec:	b.ls	10f4 <gomp_team_start+0xe14>  // b.plast
     6f0:	ldr	w1, [x29, #136]
     6f4:	adrp	x8, 0 <gomp_places_list>
     6f8:	ldr	w0, [x29, #236]
     6fc:	add	x20, x8, #0x0
     700:	mov	w25, #0x1                   	// #1
     704:	str	wzr, [x29, #112]
     708:	sub	w0, w0, w1
     70c:	ubfiz	x2, x1, #3, #32
     710:	str	wzr, [x29, #140]
     714:	lsl	x0, x0, #3
     718:	stp	x0, x2, [x29, #96]
     71c:	ldr	x0, [x29, #160]
     720:	str	xzr, [x29, #144]
     724:	str	x23, [x29, #168]
     728:	add	x24, x0, #0x0, lsl #12
     72c:	add	x24, x24, #0x0
     730:	sub	w0, w1, #0x1
     734:	mov	x1, x26
     738:	str	w0, [x29, #120]
     73c:	mov	x0, x20
     740:	mov	x26, x21
     744:	mov	w20, w25
     748:	mov	x21, x1
     74c:	mov	x25, x0
     750:	b	800 <gomp_team_start+0x520>
     754:	ldr	x0, [x26]
     758:	mov	w4, w20
     75c:	ubfiz	x28, x20, #3, #32
     760:	mov	w13, #0x0                   	// #0
     764:	ldr	x27, [x0, x4, lsl #3]
     768:	add	x0, x4, x4, lsl #1
     76c:	ldr	w1, [x21, #36]
     770:	mov	x2, x19
     774:	add	x4, x4, x0, lsl #2
     778:	str	xzr, [x27, #32]
     77c:	add	w1, w1, #0x1
     780:	stp	w20, w1, [x27, #40]
     784:	lsl	x23, x4, #4
     788:	ldr	w1, [x24, #48]
     78c:	ldr	x0, [x29, #208]
     790:	stp	x21, x0, [x27, #16]
     794:	add	x0, x23, #0x540
     798:	add	x0, x21, x0
     79c:	str	w1, [x27, #48]
     7a0:	stp	w8, w12, [x27, #52]
     7a4:	mov	x1, x22
     7a8:	stp	xzr, xzr, [x27, #64]
     7ac:	str	x0, [x27, #80]
     7b0:	str	w13, [x27, #92]
     7b4:	bl	0 <gomp_init_task>
     7b8:	add	x4, x21, x23
     7bc:	ldrb	w0, [x29, #232]
     7c0:	add	x1, x27, #0x58
     7c4:	strb	w0, [x4, #1514]
     7c8:	ldp	x3, x0, [x29, #216]
     7cc:	ldr	x2, [x27, #80]
     7d0:	str	x0, [x4, #1488]
     7d4:	ldr	x0, [x21, #80]
     7d8:	str	x3, [x2, #40]
     7dc:	ldr	x2, [x29, #200]
     7e0:	str	x2, [x27]
     7e4:	ldr	x2, [x29, #192]
     7e8:	str	x2, [x27, #8]
     7ec:	str	x1, [x0, x28]
     7f0:	ldr	w0, [x29, #184]
     7f4:	add	w20, w20, #0x1
     7f8:	cmp	w0, w20
     7fc:	b.ls	914 <gomp_team_start+0x634>  // b.plast
     800:	ldr	x0, [x25]
     804:	ldp	w8, w12, [x24, #52]
     808:	cbz	x0, 754 <gomp_team_start+0x474>
     80c:	ldr	w0, [x29, #176]
     810:	cmp	w0, #0x3
     814:	b.eq	a98 <gomp_team_start+0x7b8>  // b.none
     818:	cmp	w0, #0x4
     81c:	b.eq	964 <gomp_team_start+0x684>  // b.none
     820:	cmp	w0, #0x1
     824:	b.eq	a98 <gomp_team_start+0x7b8>  // b.none
     828:	ldr	x0, [x29, #144]
     82c:	cbz	x0, abc <gomp_team_start+0x7dc>
     830:	ldr	w0, [x29, #140]
     834:	cbz	w0, f78 <gomp_team_start+0xc98>
     838:	ldr	w2, [x21, #44]
     83c:	ldr	w0, [x29, #156]
     840:	ldr	x3, [x29, #144]
     844:	sub	w0, w0, w2
     848:	ldr	x27, [x3, x0, lsl #3]
     84c:	add	x1, x3, x0, lsl #3
     850:	cbz	x27, c38 <gomp_team_start+0x958>
     854:	ldr	w2, [x29, #140]
     858:	mov	w4, w20
     85c:	ldr	x0, [x26]
     860:	sub	w2, w2, #0x1
     864:	ubfiz	x28, x20, #3, #32
     868:	str	w2, [x29, #140]
     86c:	ldr	x2, [x27, #8]
     870:	str	x2, [x1]
     874:	mov	w1, #0x1                   	// #1
     878:	str	x27, [x0, x4, lsl #3]
     87c:	str	w1, [x29, #112]
     880:	ldr	w0, [x29, #156]
     884:	add	w13, w0, #0x1
     888:	b	768 <gomp_team_start+0x488>
     88c:	ldr	w0, [x29, #132]
     890:	ldr	w1, [x29, #152]
     894:	cmp	w0, w1
     898:	ldr	w0, [x29, #156]
     89c:	add	w0, w0, #0x1
     8a0:	b.eq	ca8 <gomp_team_start+0x9c8>  // b.none
     8a4:	ldr	w1, [x29, #152]
     8a8:	add	w1, w1, #0x1
     8ac:	str	w1, [x29, #152]
     8b0:	b	5fc <gomp_team_start+0x31c>
     8b4:	ldr	w0, [x29, #152]
     8b8:	cbnz	w0, af8 <gomp_team_start+0x818>
     8bc:	ldr	w1, [x29, #156]
     8c0:	ldp	w2, w0, [x26, #44]
     8c4:	ldr	w3, [x29, #124]
     8c8:	ldr	w4, [x29, #132]
     8cc:	add	w0, w2, w0
     8d0:	cmp	w3, w1
     8d4:	add	w1, w4, w1
     8d8:	cinc	w1, w1, hi  // hi = pmore
     8dc:	cmp	w0, w1
     8e0:	csel	w1, w1, w2, ne  // ne = any
     8e4:	str	w1, [x19, #52]
     8e8:	str	w1, [x29, #156]
     8ec:	cmp	w3, w1
     8f0:	add	w0, w1, #0x1
     8f4:	b.ls	bb8 <gomp_team_start+0x8d8>  // b.plast
     8f8:	add	w1, w4, #0x1
     8fc:	str	w1, [x19, #56]
     900:	b	5fc <gomp_team_start+0x31c>
     904:	str	xzr, [x29, #144]
     908:	add	x0, x21, #0x40
     90c:	bl	0 <gomp_barrier_wait>
     910:	b	658 <gomp_team_start+0x378>
     914:	mov	x0, x21
     918:	mov	x21, x26
     91c:	mov	x26, x0
     920:	mov	w25, w20
     924:	ldr	x0, [x29, #144]
     928:	ldr	x23, [x29, #168]
     92c:	cbnz	x0, f94 <gomp_team_start+0xcb4>
     930:	ldr	w0, [x29, #236]
     934:	cmp	w0, w25
     938:	b.eq	904 <gomp_team_start+0x624>  // b.none
     93c:	ldr	w0, [x29, #140]
     940:	ldr	w1, [x29, #236]
     944:	str	xzr, [x29, #144]
     948:	add	w0, w0, w1
     94c:	ldr	w1, [x29, #136]
     950:	cmp	w1, w0
     954:	b.cc	1018 <gomp_team_start+0xd38>  // b.lo, b.ul, b.last
     958:	adrp	x0, 0 <gomp_places_list>
     95c:	ldr	x0, [x0]
     960:	b	490 <gomp_team_start+0x1b0>
     964:	ldr	w0, [x29, #152]
     968:	cbz	w0, b80 <gomp_team_start+0x8a0>
     96c:	ldr	w1, [x29, #132]
     970:	ldr	w0, [x29, #152]
     974:	cmp	w0, w1
     978:	b.eq	fd4 <gomp_team_start+0xcf4>  // b.none
     97c:	ldr	w0, [x29, #152]
     980:	mov	w12, #0x1                   	// #1
     984:	add	w0, w0, #0x1
     988:	str	w0, [x29, #152]
     98c:	ldr	x0, [x29, #144]
     990:	ldr	w8, [x29, #156]
     994:	cbnz	x0, 830 <gomp_team_start+0x550>
     998:	ldr	x0, [x26]
     99c:	mov	w4, w20
     9a0:	ubfiz	x28, x20, #3, #32
     9a4:	ldr	x27, [x0, x4, lsl #3]
     9a8:	ldr	w0, [x27, #92]
     9ac:	ldr	w1, [x29, #156]
     9b0:	add	w1, w1, #0x1
     9b4:	cmp	w1, w0
     9b8:	b.eq	adc <gomp_team_start+0x7fc>  // b.none
     9bc:	ldr	w23, [x21, #48]
     9c0:	cmp	w23, #0x40
     9c4:	ubfiz	x2, x23, #3, #32
     9c8:	b.hi	108c <gomp_team_start+0xdac>  // b.pmore
     9cc:	add	x0, x2, #0xf
     9d0:	and	x0, x0, #0xfffffffffffffff0
     9d4:	sub	sp, sp, x0
     9d8:	mov	x0, sp
     9dc:	str	x0, [x29, #144]
     9e0:	ldr	x0, [x29, #144]
     9e4:	mov	w1, #0x0                   	// #0
     9e8:	str	x4, [x29, #112]
     9ec:	str	w12, [x29, #140]
     9f0:	str	w8, [x29, #184]
     9f4:	bl	0 <memset>
     9f8:	ldp	w0, w12, [x29, #136]
     9fc:	ldr	w8, [x29, #184]
     a00:	cmp	w0, w20
     a04:	ldr	x4, [x29, #112]
     a08:	b.ls	a70 <gomp_team_start+0x790>  // b.plast
     a0c:	ldr	w1, [x29, #120]
     a10:	ldr	x0, [x26]
     a14:	sub	w2, w1, w20
     a18:	ldr	w3, [x21, #44]
     a1c:	add	x2, x2, x4
     a20:	add	x1, x0, #0x8
     a24:	ldr	x5, [x29, #144]
     a28:	add	w23, w3, w23
     a2c:	mvn	w13, w3
     a30:	add	x4, x0, x4, lsl #3
     a34:	add	x2, x1, x2, lsl #3
     a38:	ldr	x1, [x4]
     a3c:	ldr	w0, [x1, #92]
     a40:	cmp	w0, w3
     a44:	b.ls	a64 <gomp_team_start+0x784>  // b.plast
     a48:	cmp	w0, w23
     a4c:	b.hi	a64 <gomp_team_start+0x784>  // b.pmore
     a50:	add	w0, w13, w0
     a54:	ldr	x6, [x5, x0, lsl #3]
     a58:	str	x6, [x1, #8]
     a5c:	ldr	x1, [x4]
     a60:	str	x1, [x5, x0, lsl #3]
     a64:	str	xzr, [x4], #8
     a68:	cmp	x4, x2
     a6c:	b.ne	a38 <gomp_team_start+0x758>  // b.any
     a70:	ldr	w1, [x29, #136]
     a74:	ldr	w0, [x29, #236]
     a78:	cmp	w0, w1
     a7c:	b.hi	1064 <gomp_team_start+0xd84>  // b.pmore
     a80:	ldr	w0, [x29, #136]
     a84:	sub	w0, w0, w20
     a88:	str	w0, [x29, #140]
     a8c:	ldr	w0, [x29, #236]
     a90:	str	w0, [x29, #184]
     a94:	b	830 <gomp_team_start+0x550>
     a98:	ldr	w1, [x29, #132]
     a9c:	ldr	w0, [x29, #152]
     aa0:	cmp	w0, w1
     aa4:	b.eq	bc4 <gomp_team_start+0x8e4>  // b.none
     aa8:	ldr	w0, [x29, #152]
     aac:	add	w0, w0, #0x1
     ab0:	str	w0, [x29, #152]
     ab4:	ldr	x0, [x29, #144]
     ab8:	cbnz	x0, 830 <gomp_team_start+0x550>
     abc:	ldr	x0, [x26]
     ac0:	mov	w4, w20
     ac4:	ldr	w1, [x29, #176]
     ac8:	ubfiz	x28, x20, #3, #32
     acc:	ldr	x27, [x0, x4, lsl #3]
     ad0:	cmp	w1, #0x1
     ad4:	ldr	w0, [x27, #92]
     ad8:	b.ne	9ac <gomp_team_start+0x6cc>  // b.any
     adc:	cmp	w0, w8
     ae0:	b.ls	9bc <gomp_team_start+0x6dc>  // b.plast
     ae4:	add	w1, w8, w12
     ae8:	cmp	w1, w0
     aec:	b.cc	9bc <gomp_team_start+0x6dc>  // b.lo, b.ul, b.last
     af0:	str	xzr, [x29, #144]
     af4:	b	880 <gomp_team_start+0x5a0>
     af8:	ldr	w0, [x29, #132]
     afc:	ldr	w1, [x29, #152]
     b00:	cmp	w0, w1
     b04:	ldr	w0, [x29, #156]
     b08:	add	w0, w0, #0x1
     b0c:	b.eq	c04 <gomp_team_start+0x924>  // b.none
     b10:	ldr	w1, [x29, #152]
     b14:	add	w1, w1, #0x1
     b18:	str	w1, [x29, #152]
     b1c:	ldr	w1, [x29, #156]
     b20:	str	w1, [x19, #52]
     b24:	mov	w1, #0x1                   	// #1
     b28:	str	w1, [x19, #56]
     b2c:	b	5fc <gomp_team_start+0x31c>
     b30:	cbnz	w0, ecc <gomp_team_start+0xbec>
     b34:	stp	w1, wzr, [x21, #64]
     b38:	stp	w1, w1, [x21, #128]
     b3c:	ldr	w1, [x29, #236]
     b40:	ldr	w0, [x21, #8]
     b44:	str	w1, [x21, #12]
     b48:	str	wzr, [x29, #184]
     b4c:	cmp	w0, w1
     b50:	b.hi	6e4 <gomp_team_start+0x404>  // b.pmore
     b54:	ldr	x0, [x21]
     b58:	add	w1, w1, #0x1
     b5c:	str	w1, [x21, #8]
     b60:	ubfiz	x1, x1, #3, #32
     b64:	bl	0 <gomp_realloc>
     b68:	str	x0, [x21]
     b6c:	ldr	x1, [x29, #160]
     b70:	add	x1, x1, #0x0, lsl #12
     b74:	add	x1, x1, #0x0
     b78:	str	x1, [x0]
     b7c:	b	6e4 <gomp_team_start+0x404>
     b80:	ldr	w2, [x29, #156]
     b84:	ldp	w1, w0, [x21, #44]
     b88:	ldr	w3, [x29, #124]
     b8c:	ldr	w4, [x29, #132]
     b90:	add	w0, w1, w0
     b94:	cmp	w3, w2
     b98:	add	w2, w2, w4
     b9c:	cinc	w2, w2, hi  // hi = pmore
     ba0:	cmp	w0, w2
     ba4:	csel	w0, w2, w1, ne  // ne = any
     ba8:	str	w0, [x29, #156]
     bac:	cmp	w3, w0
     bb0:	cinc	w12, w4, hi  // hi = pmore
     bb4:	b	98c <gomp_team_start+0x6ac>
     bb8:	ldr	w1, [x29, #132]
     bbc:	str	w1, [x19, #56]
     bc0:	b	5fc <gomp_team_start+0x31c>
     bc4:	ldr	w0, [x29, #156]
     bc8:	ldp	w2, w1, [x21, #44]
     bcc:	add	w3, w0, #0x1
     bd0:	ldr	w4, [x29, #124]
     bd4:	ldr	w0, [x29, #236]
     bd8:	add	w1, w2, w1
     bdc:	cmp	w1, w3
     be0:	mov	w1, #0x1                   	// #1
     be4:	sub	w0, w0, w4
     be8:	csel	w2, w3, w2, ne  // ne = any
     bec:	cmp	w0, w20
     bf0:	ldr	w0, [x29, #132]
     bf4:	stp	w1, w2, [x29, #152]
     bf8:	csel	w0, w0, w1, ne  // ne = any
     bfc:	str	w0, [x29, #132]
     c00:	b	828 <gomp_team_start+0x548>
     c04:	ldp	w2, w1, [x26, #44]
     c08:	mov	w3, #0x1                   	// #1
     c0c:	add	w1, w2, w1
     c10:	cmp	w1, w0
     c14:	ldr	w1, [x29, #120]
     c18:	csel	w0, w2, w0, eq  // eq = none
     c1c:	stp	w3, w0, [x29, #152]
     c20:	cmp	w1, w20
     c24:	ldr	w1, [x29, #132]
     c28:	add	w0, w0, w3
     c2c:	csel	w1, w1, w3, ne  // ne = any
     c30:	str	w1, [x29, #132]
     c34:	b	b1c <gomp_team_start+0x83c>
     c38:	ldr	w0, [x29, #176]
     c3c:	cmp	w0, #0x1
     c40:	mov	w0, #0x1                   	// #1
     c44:	str	w0, [x29, #112]
     c48:	b.ne	7f0 <gomp_team_start+0x510>  // b.any
     c4c:	add	w13, w8, w12
     c50:	cmp	w8, w13
     c54:	b.cs	125c <gomp_team_start+0xf7c>  // b.hs, b.nlast
     c58:	sub	w0, w8, w2
     c5c:	sub	w9, w13, w2
     c60:	add	w4, w2, #0x1
     c64:	nop
     c68:	ldr	x27, [x3, w0, uxtw #3]
     c6c:	add	x1, x3, w0, uxtw #3
     c70:	cbnz	x27, 854 <gomp_team_start+0x574>
     c74:	add	w1, w4, w0
     c78:	add	w0, w0, #0x1
     c7c:	cmp	w9, w0
     c80:	b.ne	c68 <gomp_team_start+0x988>  // b.any
     c84:	mov	w0, #0x1                   	// #1
     c88:	str	w0, [x29, #112]
     c8c:	cmp	w1, w13
     c90:	b.eq	7f0 <gomp_team_start+0x510>  // b.none
     c94:	ldr	x0, [x29, #144]
     c98:	sub	w2, w1, w2
     c9c:	add	x1, x0, x2, lsl #3
     ca0:	ldr	x27, [x0, x2, lsl #3]
     ca4:	b	854 <gomp_team_start+0x574>
     ca8:	ldp	w2, w1, [x26, #44]
     cac:	mov	w3, #0x1                   	// #1
     cb0:	add	w1, w2, w1
     cb4:	cmp	w1, w0
     cb8:	ldr	w1, [x29, #120]
     cbc:	csel	w0, w2, w0, eq  // eq = none
     cc0:	stp	w3, w0, [x29, #152]
     cc4:	cmp	w1, w20
     cc8:	ldr	w1, [x29, #132]
     ccc:	add	w0, w0, w3
     cd0:	csel	w1, w1, w3, ne  // ne = any
     cd4:	str	w1, [x29, #132]
     cd8:	b	5fc <gomp_team_start+0x31c>
     cdc:	ldr	w0, [x24, #92]
     ce0:	cbnz	w0, 35c <gomp_team_start+0x7c>
     ce4:	str	w3, [x29, #232]
     ce8:	bl	0 <gomp_init_affinity>
     cec:	ldp	w3, w1, [x29, #232]
     cf0:	adrp	x0, 0 <gomp_display_affinity_var>
     cf4:	cmp	w1, #0x1
     cf8:	ldrb	w0, [x0]
     cfc:	cset	w1, eq  // eq = none
     d00:	tst	w1, w0
     d04:	b.ne	1264 <gomp_team_start+0xf84>  // b.any
     d08:	ldr	w2, [x24, #44]
     d0c:	b	35c <gomp_team_start+0x7c>
     d10:	adrp	x1, 0 <gomp_nthreads_var_list_len>
     d14:	mov	w7, w2
     d18:	ldr	x1, [x1]
     d1c:	cmp	x1, w2, uxtw
     d20:	b.ls	3e4 <gomp_team_start+0x104>  // b.plast
     d24:	ldr	x1, [x5, x7, lsl #3]
     d28:	str	x1, [x29, #224]
     d2c:	b	3e4 <gomp_team_start+0x104>
     d30:	adrp	x3, 0 <gomp_bind_var_list_len>
     d34:	ldr	w4, [x29, #176]
     d38:	str	w4, [x29, #232]
     d3c:	ldr	x3, [x3]
     d40:	cmp	x3, w2, uxtw
     d44:	b.ls	414 <gomp_team_start+0x134>  // b.plast
     d48:	ldrb	w1, [x1, w2, uxtw]
     d4c:	str	w1, [x29, #232]
     d50:	b	414 <gomp_team_start+0x134>
     d54:	ldr	w2, [x1, #92]
     d58:	ldr	w3, [x29, #176]
     d5c:	sub	w2, w2, #0x1
     d60:	str	w2, [x29, #156]
     d64:	cmp	w3, #0x3
     d68:	b.eq	10bc <gomp_team_start+0xddc>  // b.none
     d6c:	cmp	w3, #0x4
     d70:	b.eq	efc <gomp_team_start+0xc1c>  // b.none
     d74:	cmp	w3, #0x1
     d78:	b.eq	10bc <gomp_team_start+0xddc>  // b.none
     d7c:	str	wzr, [x29, #124]
     d80:	str	wzr, [x29, #132]
     d84:	str	wzr, [x29, #152]
     d88:	b	470 <gomp_team_start+0x190>
     d8c:	ldr	w0, [x29, #136]
     d90:	ldr	w2, [x29, #236]
     d94:	sub	x2, x2, w0, uxtw
     d98:	ldr	w0, [x29, #140]
     d9c:	cbnz	w0, e74 <gomp_team_start+0xb94>
     da0:	ldr	w1, [x21, #64]
     da4:	add	x0, x21, #0x80
     da8:	ldr	w3, [x29, #236]
     dac:	sub	w1, w3, w1
     db0:	ldaxr	w4, [x0]
     db4:	add	w4, w4, w1
     db8:	stlxr	w5, w4, [x0]
     dbc:	cbnz	w5, db0 <gomp_team_start+0xad0>
     dc0:	adrp	x0, 0 <gomp_managed_threads>
     dc4:	add	x0, x0, #0x0
     dc8:	str	w3, [x21, #64]
     dcc:	ldxr	x1, [x0]
     dd0:	add	x1, x1, x2
     dd4:	stlxr	w3, x1, [x0]
     dd8:	cbnz	w3, dcc <gomp_team_start+0xaec>
     ddc:	dmb	ish
     de0:	b	670 <gomp_team_start+0x390>
     de4:	ldr	w0, [x29, #180]
     de8:	ldr	w1, [x29, #136]
     dec:	cmp	w0, #0x0
     df0:	ldr	w0, [x29, #236]
     df4:	ccmp	w0, w1, #0x0, eq  // eq = none
     df8:	b.ne	12b4 <gomp_team_start+0xfd4>  // b.any
     dfc:	ldr	w0, [x29, #112]
     e00:	cbz	w0, 67c <gomp_team_start+0x39c>
     e04:	bl	0 <pthread_self>
     e08:	mov	x19, x0
     e0c:	ldr	x1, [x29, #160]
     e10:	add	x2, x1, #0x0, lsl #12
     e14:	add	x2, x2, #0x0
     e18:	add	x1, x2, #0x10
     e1c:	ldr	w2, [x2, #92]
     e20:	bl	0 <gomp_display_affinity_thread>
     e24:	ldr	x0, [x29, #160]
     e28:	mov	x23, #0x8                   	// #8
     e2c:	mov	w22, #0x1                   	// #1
     e30:	add	x24, x0, #0x0, lsl #12
     e34:	add	x24, x24, #0x0
     e38:	sub	x25, x19, x24
     e3c:	ldr	w0, [x29, #236]
     e40:	cmp	w22, w0
     e44:	b.cs	67c <gomp_team_start+0x39c>  // b.hs, b.nlast
     e48:	ldr	x0, [x21]
     e4c:	add	w22, w22, #0x1
     e50:	ldr	x1, [x0, x23]
     e54:	add	x23, x23, #0x8
     e58:	cmp	x24, x1
     e5c:	add	x0, x1, x25
     e60:	ldr	w2, [x1, #92]
     e64:	csel	x0, x0, x19, ne  // ne = any
     e68:	add	x1, x1, #0x10
     e6c:	bl	0 <gomp_display_affinity_thread>
     e70:	b	e3c <gomp_team_start+0xb5c>
     e74:	ldr	w0, [x29, #140]
     e78:	neg	w2, w0
     e7c:	b	da0 <gomp_team_start+0xac0>
     e80:	add	x28, x29, #0x100
     e84:	mov	x0, x28
     e88:	bl	0 <pthread_attr_init>
     e8c:	adrp	x0, 40 <gomp_pause_pool_helper+0x8>
     e90:	add	x1, x29, #0xf8
     e94:	add	x0, x0, #0x0
     e98:	bl	0 <pthread_attr_getstacksize>
     e9c:	cbz	w0, f68 <gomp_team_start+0xc88>
     ea0:	ldr	w2, [x29, #236]
     ea4:	mov	w1, #0x70                  	// #112
     ea8:	sub	w0, w2, w25
     eac:	cmp	w25, w2
     eb0:	mov	x2, sp
     eb4:	umsubl	x0, w0, w1, x2
     eb8:	mov	sp, x0
     ebc:	mov	x23, sp
     ec0:	b.cs	63c <gomp_team_start+0x35c>  // b.hs, b.nlast
     ec4:	mov	x27, x28
     ec8:	b	4c0 <gomp_team_start+0x1e0>
     ecc:	ldr	w1, [x21, #64]
     ed0:	add	x0, x21, #0x80
     ed4:	ldr	w2, [x29, #236]
     ed8:	sub	w1, w2, w1
     edc:	ldaxr	w3, [x0]
     ee0:	add	w3, w3, w1
     ee4:	stlxr	w4, w3, [x0]
     ee8:	cbnz	w4, edc <gomp_team_start+0xbfc>
     eec:	ldr	w0, [x29, #136]
     ef0:	str	w2, [x21, #64]
     ef4:	str	w0, [x29, #184]
     ef8:	b	6d0 <gomp_team_start+0x3f0>
     efc:	ldr	w2, [x1, #56]
     f00:	ldr	w3, [x29, #236]
     f04:	cmp	w2, w3
     f08:	b.cc	1168 <gomp_team_start+0xe88>  // b.lo, b.ul, b.last
     f0c:	udiv	w4, w2, w3
     f10:	ldr	w1, [x1, #52]
     f14:	msub	w2, w4, w3, w2
     f18:	add	w3, w4, #0x1
     f1c:	madd	w2, w4, w2, w2
     f20:	str	w4, [x29, #132]
     f24:	ldr	w4, [x29, #156]
     f28:	add	w2, w2, w1
     f2c:	str	w2, [x29, #124]
     f30:	cmp	w4, w2
     f34:	b.cs	11a4 <gomp_team_start+0xec4>  // b.hs, b.nlast
     f38:	sub	w1, w4, w1
     f3c:	udiv	w2, w1, w3
     f40:	msub	w1, w2, w3, w1
     f44:	sub	w1, w4, w1
     f48:	str	w1, [x29, #156]
     f4c:	ldr	x1, [x29, #160]
     f50:	str	wzr, [x29, #152]
     f54:	ldr	w2, [x29, #156]
     f58:	add	x1, x1, #0x0, lsl #12
     f5c:	add	x1, x1, #0x0
     f60:	stp	w2, w3, [x1, #52]
     f64:	b	470 <gomp_team_start+0x190>
     f68:	ldr	x1, [x29, #248]
     f6c:	mov	x0, x28
     f70:	bl	0 <pthread_attr_setstacksize>
     f74:	b	ea0 <gomp_team_start+0xbc0>
     f78:	ldr	x23, [x29, #168]
     f7c:	mov	x0, x21
     f80:	mov	w25, w20
     f84:	mov	x21, x26
     f88:	mov	x26, x0
     f8c:	mov	w0, #0x1                   	// #1
     f90:	str	w0, [x29, #112]
     f94:	ldr	w1, [x29, #136]
     f98:	ldr	w0, [x29, #236]
     f9c:	cmp	w0, w1
     fa0:	b.hi	1158 <gomp_team_start+0xe78>  // b.pmore
     fa4:	sub	w0, w1, w0
     fa8:	ldr	w1, [x29, #140]
     fac:	cmp	w0, w1
     fb0:	cset	w0, eq  // eq = none
     fb4:	cbz	w0, 1104 <gomp_team_start+0xe24>
     fb8:	ldr	w0, [x26, #48]
     fbc:	str	wzr, [x29, #140]
     fc0:	cmp	w0, #0x40
     fc4:	b.ls	930 <gomp_team_start+0x650>  // b.plast
     fc8:	ldr	x0, [x29, #144]
     fcc:	bl	0 <free>
     fd0:	b	930 <gomp_team_start+0x650>
     fd4:	ldr	w0, [x29, #156]
     fd8:	ldp	w2, w1, [x21, #44]
     fdc:	add	w4, w0, #0x1
     fe0:	ldr	w3, [x29, #124]
     fe4:	ldr	w0, [x29, #236]
     fe8:	add	w1, w2, w1
     fec:	cmp	w1, w4
     ff0:	sub	w0, w0, w3
     ff4:	csel	w2, w4, w2, ne  // ne = any
     ff8:	cmp	w0, w20
     ffc:	ldr	w0, [x29, #132]
    1000:	mov	w3, #0x1                   	// #1
    1004:	csel	w12, w3, w3, ne  // ne = any
    1008:	csel	w0, w0, w3, ne  // ne = any
    100c:	str	w0, [x29, #132]
    1010:	stp	w3, w2, [x29, #152]
    1014:	b	98c <gomp_team_start+0x6ac>
    1018:	ldr	w1, [x29, #136]
    101c:	sub	x0, x0, w1, uxtw
    1020:	cbz	w1, 1058 <gomp_team_start+0xd78>
    1024:	adrp	x1, 0 <gomp_managed_threads>
    1028:	add	x1, x1, #0x0
    102c:	ldxr	x2, [x1]
    1030:	add	x2, x2, x0
    1034:	stlxr	w3, x2, [x1]
    1038:	cbnz	w3, 102c <gomp_team_start+0xd4c>
    103c:	dmb	ish
    1040:	b	958 <gomp_team_start+0x678>
    1044:	ldr	w0, [x29, #236]
    1048:	mov	w25, #0x1                   	// #1
    104c:	str	wzr, [x29, #112]
    1050:	str	wzr, [x29, #140]
    1054:	str	xzr, [x29, #144]
    1058:	sub	x0, x0, #0x1
    105c:	str	wzr, [x29, #136]
    1060:	b	1024 <gomp_team_start+0xd44>
    1064:	ldp	x2, x3, [x29, #96]
    1068:	mov	w1, #0x0                   	// #0
    106c:	ldr	x0, [x26]
    1070:	str	w12, [x29, #140]
    1074:	str	w8, [x29, #184]
    1078:	add	x0, x0, x3
    107c:	bl	0 <memset>
    1080:	ldr	w12, [x29, #140]
    1084:	ldr	w8, [x29, #184]
    1088:	b	a80 <gomp_team_start+0x7a0>
    108c:	mov	x0, x2
    1090:	str	x4, [x29, #112]
    1094:	str	w12, [x29, #140]
    1098:	str	w8, [x29, #184]
    109c:	bl	0 <gomp_malloc>
    10a0:	ldr	w23, [x21, #48]
    10a4:	ldr	w12, [x29, #140]
    10a8:	ldr	w8, [x29, #184]
    10ac:	ubfiz	x2, x23, #3, #32
    10b0:	str	x0, [x29, #144]
    10b4:	ldr	x4, [x29, #112]
    10b8:	b	9e0 <gomp_team_start+0x700>
    10bc:	ldr	x1, [x29, #160]
    10c0:	ldr	w2, [x29, #236]
    10c4:	add	x1, x1, #0x0, lsl #12
    10c8:	add	x1, x1, #0x0
    10cc:	ldr	w1, [x1, #56]
    10d0:	cmp	w1, w2
    10d4:	b.cs	1190 <gomp_team_start+0xeb0>  // b.hs, b.nlast
    10d8:	udiv	w3, w2, w1
    10dc:	mov	w4, #0x1                   	// #1
    10e0:	str	w4, [x29, #152]
    10e4:	msub	w1, w3, w1, w2
    10e8:	str	w3, [x29, #132]
    10ec:	str	w1, [x29, #124]
    10f0:	b	470 <gomp_team_start+0x190>
    10f4:	mov	w25, #0x1                   	// #1
    10f8:	str	wzr, [x29, #112]
    10fc:	str	wzr, [x29, #140]
    1100:	b	93c <gomp_team_start+0x65c>
    1104:	ldr	w0, [x29, #176]
    1108:	cmp	w0, #0x3
    110c:	b.eq	1204 <gomp_team_start+0xf24>  // b.none
    1110:	cmp	w0, #0x4
    1114:	b.eq	11cc <gomp_team_start+0xeec>  // b.none
    1118:	cmp	w0, #0x1
    111c:	b.eq	1204 <gomp_team_start+0xf24>  // b.none
    1120:	ldr	w1, [x29, #140]
    1124:	mov	w25, #0x1                   	// #1
    1128:	ldr	w0, [x29, #236]
    112c:	add	w0, w0, w1
    1130:	cbz	w1, 94c <gomp_team_start+0x66c>
    1134:	ldr	w2, [x21, #64]
    1138:	add	x1, x21, #0x80
    113c:	sub	w2, w0, w2
    1140:	ldaxr	w3, [x1]
    1144:	add	w3, w3, w2
    1148:	stlxr	w4, w3, [x1]
    114c:	cbnz	w4, 1140 <gomp_team_start+0xe60>
    1150:	str	w0, [x21, #64]
    1154:	b	94c <gomp_team_start+0x66c>
    1158:	ldr	w0, [x29, #136]
    115c:	cmp	w0, w25
    1160:	cset	w0, eq  // eq = none
    1164:	b	fb4 <gomp_team_start+0xcd4>
    1168:	ldr	w5, [x29, #236]
    116c:	mov	w3, #0x1                   	// #1
    1170:	ldr	w6, [x29, #156]
    1174:	stp	w6, w3, [x1, #52]
    1178:	str	w3, [x29, #152]
    117c:	udiv	w4, w5, w2
    1180:	msub	w1, w4, w2, w5
    1184:	str	w4, [x29, #132]
    1188:	str	w1, [x29, #124]
    118c:	b	470 <gomp_team_start+0x190>
    1190:	mov	w1, #0x1                   	// #1
    1194:	str	wzr, [x29, #124]
    1198:	str	w1, [x29, #132]
    119c:	str	w1, [x29, #152]
    11a0:	b	470 <gomp_team_start+0x190>
    11a4:	ldr	w5, [x29, #156]
    11a8:	ldr	w1, [x29, #124]
    11ac:	ldr	w4, [x29, #132]
    11b0:	sub	w2, w5, w1
    11b4:	mov	w3, w4
    11b8:	udiv	w1, w2, w4
    11bc:	msub	w1, w1, w4, w2
    11c0:	sub	w1, w5, w1
    11c4:	str	w1, [x29, #156]
    11c8:	b	f4c <gomp_team_start+0xc6c>
    11cc:	ldr	x0, [x29, #160]
    11d0:	add	x0, x0, #0x0, lsl #12
    11d4:	add	x0, x0, #0x0
    11d8:	ldr	w0, [x0, #52]
    11dc:	str	w0, [x29, #156]
    11e0:	ldr	w0, [x29, #152]
    11e4:	cbz	w0, 1120 <gomp_team_start+0xe40>
    11e8:	mov	w1, #0x1                   	// #1
    11ec:	ldr	w0, [x26, #48]
    11f0:	str	w1, [x29, #152]
    11f4:	ldr	w1, [x29, #236]
    11f8:	udiv	w0, w1, w0
    11fc:	str	w0, [x29, #132]
    1200:	b	1120 <gomp_team_start+0xe40>
    1204:	ldr	x0, [x29, #160]
    1208:	ldr	w1, [x29, #236]
    120c:	add	x0, x0, #0x0, lsl #12
    1210:	add	x0, x0, #0x0
    1214:	ldr	w0, [x0, #56]
    1218:	cmp	w0, w1
    121c:	b.cs	1228 <gomp_team_start+0xf48>  // b.hs, b.nlast
    1220:	udiv	w0, w1, w0
    1224:	str	w0, [x29, #132]
    1228:	ldr	x0, [x29, #160]
    122c:	mov	w1, #0x1                   	// #1
    1230:	add	x0, x0, #0x0, lsl #12
    1234:	add	x0, x0, #0x0
    1238:	ldr	w0, [x0, #92]
    123c:	sub	w0, w0, #0x1
    1240:	stp	w1, w0, [x29, #152]
    1244:	b	1120 <gomp_team_start+0xe40>
    1248:	bl	0 <strerror>
    124c:	mov	x1, x0
    1250:	adrp	x0, 0 <gomp_free_pool_helper>
    1254:	add	x0, x0, #0x0
    1258:	bl	0 <gomp_fatal>
    125c:	mov	w1, w8
    1260:	b	c84 <gomp_team_start+0x9a4>
    1264:	str	w3, [x29, #232]
    1268:	bl	0 <pthread_self>
    126c:	ldr	w2, [x24, #92]
    1270:	add	x25, x24, #0x10
    1274:	mov	x1, x25
    1278:	bl	0 <gomp_display_affinity_thread>
    127c:	ldp	x0, x1, [x24, #16]
    1280:	stp	x0, x1, [x26, #8]
    1284:	ldr	w2, [x24, #44]
    1288:	ldp	x0, x1, [x24, #32]
    128c:	stp	x0, x1, [x26, #24]
    1290:	add	w2, w2, #0x1
    1294:	ldp	x0, x1, [x24, #48]
    1298:	stp	x0, x1, [x26, #40]
    129c:	ldr	w3, [x29, #232]
    12a0:	ldp	x0, x1, [x24, #64]
    12a4:	str	x26, [x24, #16]
    12a8:	stp	wzr, w2, [x24, #40]
    12ac:	stp	x0, x1, [x26, #56]
    12b0:	b	3ac <gomp_team_start+0xcc>
    12b4:	bl	0 <pthread_self>
    12b8:	mov	x19, x0
    12bc:	ldr	x1, [x29, #160]
    12c0:	add	x2, x1, #0x0, lsl #12
    12c4:	add	x2, x2, #0x0
    12c8:	add	x1, x2, #0x10
    12cc:	ldr	w2, [x2, #92]
    12d0:	bl	0 <gomp_display_affinity_thread>
    12d4:	ldr	w0, [x29, #128]
    12d8:	cbz	w0, e24 <gomp_team_start+0xb44>
    12dc:	ldr	w0, [x29, #236]
    12e0:	mov	x1, #0x10                  	// #16
    12e4:	mov	w21, #0x1                   	// #1
    12e8:	sub	w19, w0, #0x1
    12ec:	mov	w0, #0x70                  	// #112
    12f0:	umsubl	x19, w19, w0, x1
    12f4:	add	x19, x23, x19
    12f8:	ldr	w0, [x29, #236]
    12fc:	cmp	w21, w0
    1300:	b.cs	67c <gomp_team_start+0x39c>  // b.hs, b.nlast
    1304:	ldr	w2, [x19, #80]
    1308:	mov	x1, x19
    130c:	ldr	x0, [x19, #88]
    1310:	add	w21, w21, #0x1
    1314:	add	x19, x19, #0x70
    1318:	bl	0 <gomp_display_affinity_thread>
    131c:	b	12f8 <gomp_team_start+0x1018>

0000000000001320 <gomp_team_end>:
    1320:	stp	x29, x30, [sp, #-64]!
    1324:	mov	x29, sp
    1328:	stp	x19, x20, [sp, #16]
    132c:	mrs	x20, tpidr_el0
    1330:	stp	x21, x22, [sp, #32]
    1334:	add	x21, x20, #0x0, lsl #12
    1338:	add	x21, x21, #0x0
    133c:	ldr	x19, [x21, #16]
    1340:	add	x22, x19, #0x80
    1344:	mov	x0, x22
    1348:	bl	0 <gomp_team_barrier_wait_final>
    134c:	ldr	w0, [x19, #1336]
    1350:	cbnz	w0, 1414 <gomp_team_end+0xf4>
    1354:	ldr	x0, [x21, #24]
    1358:	bl	0 <gomp_fini_work_share>
    135c:	bl	0 <gomp_end_task>
    1360:	add	x0, x20, #0x0, lsl #12
    1364:	add	x0, x0, #0x0
    1368:	ldp	x4, x5, [x19, #8]
    136c:	add	x1, x0, #0x10
    1370:	stp	x4, x5, [x0, #16]
    1374:	ldp	x4, x5, [x19, #24]
    1378:	stp	x4, x5, [x0, #32]
    137c:	ldr	w0, [x0, #44]
    1380:	ldp	x4, x5, [x19, #40]
    1384:	stp	x4, x5, [x1, #32]
    1388:	ldp	x2, x3, [x19, #56]
    138c:	stp	x2, x3, [x1, #48]
    1390:	cbnz	w0, 1498 <gomp_team_end+0x178>
    1394:	ldr	x21, [x19, #312]
    1398:	cbnz	x21, 13dc <gomp_team_end+0xbc>
    139c:	add	x20, x20, #0x0, lsl #12
    13a0:	add	x20, x20, #0x0
    13a4:	ldr	x0, [x20, #16]
    13a8:	cbnz	x0, 1400 <gomp_team_end+0xe0>
    13ac:	ldr	w0, [x19]
    13b0:	cmp	w0, #0x1
    13b4:	b.eq	1400 <gomp_team_end+0xe0>  // b.none
    13b8:	ldr	x20, [x20, #96]
    13bc:	ldr	x0, [x20, #16]
    13c0:	cbz	x0, 13c8 <gomp_team_end+0xa8>
    13c4:	bl	0 <free>
    13c8:	ldp	x21, x22, [sp, #32]
    13cc:	str	x19, [x20, #16]
    13d0:	ldp	x19, x20, [sp, #16]
    13d4:	ldp	x29, x30, [sp], #64
    13d8:	ret
    13dc:	mov	x0, x21
    13e0:	ldr	x21, [x21, #56]
    13e4:	bl	0 <free>
    13e8:	cbz	x21, 139c <gomp_team_end+0x7c>
    13ec:	mov	x0, x21
    13f0:	ldr	x21, [x21, #56]
    13f4:	bl	0 <free>
    13f8:	cbnz	x21, 13dc <gomp_team_end+0xbc>
    13fc:	b	139c <gomp_team_end+0x7c>
    1400:	mov	x0, x19
    1404:	ldp	x19, x20, [sp, #16]
    1408:	ldp	x21, x22, [sp, #32]
    140c:	ldp	x29, x30, [sp], #64
    1410:	b	0 <free>
    1414:	stp	x23, x24, [sp, #48]
    1418:	mov	x24, #0x1                   	// #1
    141c:	ldr	x23, [x19, #88]
    1420:	add	x21, x23, #0x50
    1424:	ldar	x0, [x21]
    1428:	mov	x1, x0
    142c:	cmp	x0, #0x2
    1430:	b.hi	1488 <gomp_team_end+0x168>  // b.pmore
    1434:	ldaxr	x0, [x21]
    1438:	cbnz	x0, 1444 <gomp_team_end+0x124>
    143c:	stxr	w1, x24, [x21]
    1440:	cbnz	w1, 1434 <gomp_team_end+0x114>
    1444:	cmp	x0, #0x0
    1448:	b.ne	1478 <gomp_team_end+0x158>  // b.any
    144c:	ldxr	x0, [x21]
    1450:	stlxr	w1, x23, [x21]
    1454:	cbnz	w1, 144c <gomp_team_end+0x12c>
    1458:	cmp	x0, #0x1
    145c:	b.eq	1468 <gomp_team_end+0x148>  // b.none
    1460:	mov	x0, x21
    1464:	bl	0 <gomp_ptrlock_set_slow>
    1468:	mov	x0, x23
    146c:	bl	0 <gomp_fini_work_share>
    1470:	ldp	x23, x24, [sp, #48]
    1474:	b	135c <gomp_team_end+0x3c>
    1478:	mov	x0, x21
    147c:	bl	0 <gomp_ptrlock_get_slow>
    1480:	mov	x1, x0
    1484:	cbz	x0, 144c <gomp_team_end+0x12c>
    1488:	mov	x0, x23
    148c:	mov	x23, x1
    1490:	bl	0 <gomp_fini_work_share>
    1494:	b	1420 <gomp_team_end+0x100>
    1498:	ldr	w2, [x19]
    149c:	mov	x1, #0x1                   	// #1
    14a0:	adrp	x0, 0 <gomp_managed_threads>
    14a4:	add	x0, x0, #0x0
    14a8:	sub	x1, x1, x2
    14ac:	ldxr	x2, [x0]
    14b0:	add	x2, x2, x1
    14b4:	stlxr	w3, x2, [x0]
    14b8:	cbnz	w3, 14ac <gomp_team_end+0x18c>
    14bc:	mov	x0, x22
    14c0:	dmb	ish
    14c4:	bl	0 <gomp_barrier_wait>
    14c8:	b	1394 <gomp_team_end+0x74>
    14cc:	nop

00000000000014d0 <gomp_free_thread>:
    14d0:	stp	x29, x30, [sp, #-48]!
    14d4:	mov	x29, sp
    14d8:	stp	x19, x20, [sp, #16]
    14dc:	mrs	x20, tpidr_el0
    14e0:	add	x0, x20, #0x0, lsl #12
    14e4:	add	x0, x0, #0x0
    14e8:	ldr	x19, [x0, #96]
    14ec:	cbz	x19, 1594 <gomp_free_thread+0xc4>
    14f0:	ldr	w2, [x19, #12]
    14f4:	cbz	w2, 156c <gomp_free_thread+0x9c>
    14f8:	str	x21, [sp, #32]
    14fc:	cmp	w2, #0x1
    1500:	b.ls	152c <gomp_free_thread+0x5c>  // b.plast
    1504:	ldr	x4, [x19]
    1508:	adrp	x3, 0 <gomp_free_pool_helper>
    150c:	add	x3, x3, #0x0
    1510:	mov	x0, #0x1                   	// #1
    1514:	nop
    1518:	ldr	x1, [x4, x0, lsl #3]
    151c:	add	x0, x0, #0x1
    1520:	cmp	w2, w0
    1524:	stp	x3, x19, [x1]
    1528:	b.hi	1518 <gomp_free_thread+0x48>  // b.pmore
    152c:	add	x21, x19, #0x40
    1530:	mov	x0, x21
    1534:	bl	0 <gomp_barrier_wait>
    1538:	mov	x0, x21
    153c:	bl	0 <gomp_barrier_wait>
    1540:	ldr	w2, [x19, #12]
    1544:	mov	x1, #0x1                   	// #1
    1548:	adrp	x0, 0 <gomp_managed_threads>
    154c:	add	x0, x0, #0x0
    1550:	sub	x1, x1, x2
    1554:	ldxr	x2, [x0]
    1558:	add	x2, x2, x1
    155c:	stlxr	w3, x2, [x0]
    1560:	cbnz	w3, 1554 <gomp_free_thread+0x84>
    1564:	dmb	ish
    1568:	ldr	x21, [sp, #32]
    156c:	ldr	x0, [x19, #16]
    1570:	cbz	x0, 1578 <gomp_free_thread+0xa8>
    1574:	bl	0 <free>
    1578:	ldr	x0, [x19]
    157c:	bl	0 <free>
    1580:	mov	x0, x19
    1584:	bl	0 <free>
    1588:	add	x0, x20, #0x0, lsl #12
    158c:	add	x0, x0, #0x0
    1590:	str	xzr, [x0, #96]
    1594:	add	x0, x20, #0x0, lsl #12
    1598:	add	x0, x0, #0x0
    159c:	ldr	w1, [x0, #44]
    15a0:	cbnz	w1, 15ac <gomp_free_thread+0xdc>
    15a4:	ldr	x0, [x0, #16]
    15a8:	cbnz	x0, 15dc <gomp_free_thread+0x10c>
    15ac:	add	x20, x20, #0x0, lsl #12
    15b0:	add	x20, x20, #0x0
    15b4:	ldr	x19, [x20, #80]
    15b8:	cbz	x19, 15d0 <gomp_free_thread+0x100>
    15bc:	bl	0 <gomp_end_task>
    15c0:	mov	x0, x19
    15c4:	ldp	x19, x20, [sp, #16]
    15c8:	ldp	x29, x30, [sp], #48
    15cc:	b	0 <free>
    15d0:	ldp	x19, x20, [sp, #16]
    15d4:	ldp	x29, x30, [sp], #48
    15d8:	ret
    15dc:	bl	1320 <gomp_team_end>
    15e0:	b	15ac <gomp_free_thread+0xdc>
    15e4:	nop

00000000000015e8 <gomp_pause_host>:
    15e8:	stp	x29, x30, [sp, #-64]!
    15ec:	mov	x29, sp
    15f0:	stp	x21, x22, [sp, #32]
    15f4:	mrs	x22, tpidr_el0
    15f8:	stp	x19, x20, [sp, #16]
    15fc:	add	x19, x22, #0x0, lsl #12
    1600:	add	x19, x19, #0x0
    1604:	ldr	w0, [x19, #44]
    1608:	ldr	x20, [x19, #96]
    160c:	str	x23, [sp, #48]
    1610:	cbnz	w0, 1724 <gomp_pause_host+0x13c>
    1614:	cbz	x20, 170c <gomp_pause_host+0x124>
    1618:	ldr	w23, [x20, #12]
    161c:	cbz	w23, 16e0 <gomp_pause_host+0xf8>
    1620:	ubfiz	x0, x23, #3, #32
    1624:	cmp	w23, #0x1
    1628:	add	x0, x0, #0xf
    162c:	and	x0, x0, #0xffffffff0
    1630:	sub	sp, sp, x0
    1634:	mov	x21, sp
    1638:	b.ls	167c <gomp_pause_host+0x94>  // b.plast
    163c:	bl	0 <pthread_self>
    1640:	sub	x6, x0, x19
    1644:	ldr	x7, [x20]
    1648:	adrp	x5, 0 <gomp_free_pool_helper>
    164c:	mov	x4, x19
    1650:	add	x5, x5, #0x0
    1654:	mov	x1, #0x1                   	// #1
    1658:	ldr	x2, [x7, x1, lsl #3]
    165c:	cmp	x4, x2
    1660:	add	x3, x2, x6
    1664:	csel	x3, x3, x0, ne  // ne = any
    1668:	stp	x5, x20, [x2]
    166c:	str	x3, [x21, x1, lsl #3]
    1670:	add	x1, x1, #0x1
    1674:	cmp	w23, w1
    1678:	b.hi	1658 <gomp_pause_host+0x70>  // b.pmore
    167c:	add	x19, x20, #0x40
    1680:	mov	x0, x19
    1684:	bl	0 <gomp_barrier_wait>
    1688:	mov	x0, x19
    168c:	bl	0 <gomp_barrier_wait>
    1690:	ldr	w1, [x20, #12]
    1694:	mov	x19, #0x1                   	// #1
    1698:	adrp	x0, 0 <gomp_managed_threads>
    169c:	add	x0, x0, #0x0
    16a0:	sub	x1, x19, x1
    16a4:	ldxr	x2, [x0]
    16a8:	add	x2, x2, x1
    16ac:	stlxr	w3, x2, [x0]
    16b0:	cbnz	w3, 16a4 <gomp_pause_host+0xbc>
    16b4:	dmb	ish
    16b8:	ldr	w0, [x20, #12]
    16bc:	cmp	w0, #0x1
    16c0:	b.ls	16e0 <gomp_pause_host+0xf8>  // b.plast
    16c4:	ldr	x0, [x21, x19, lsl #3]
    16c8:	mov	x1, #0x0                   	// #0
    16cc:	add	x19, x19, #0x1
    16d0:	bl	0 <pthread_join>
    16d4:	ldr	w0, [x20, #12]
    16d8:	cmp	w0, w19
    16dc:	b.hi	16c4 <gomp_pause_host+0xdc>  // b.pmore
    16e0:	ldr	x0, [x20, #16]
    16e4:	cbz	x0, 16ec <gomp_pause_host+0x104>
    16e8:	bl	0 <free>
    16ec:	ldr	x0, [x20]
    16f0:	add	x22, x22, #0x0, lsl #12
    16f4:	add	x22, x22, #0x0
    16f8:	bl	0 <free>
    16fc:	mov	x0, x20
    1700:	bl	0 <free>
    1704:	mov	w0, #0x0                   	// #0
    1708:	str	xzr, [x22, #96]
    170c:	mov	sp, x29
    1710:	ldp	x19, x20, [sp, #16]
    1714:	ldp	x21, x22, [sp, #32]
    1718:	ldr	x23, [sp, #48]
    171c:	ldp	x29, x30, [sp], #64
    1720:	ret
    1724:	mov	w0, #0xffffffff            	// #-1
    1728:	b	170c <gomp_pause_host+0x124>
    172c:	nop

0000000000001730 <gomp_new_icv>:
    1730:	stp	x29, x30, [sp, #-32]!
    1734:	mov	x0, #0xd0                  	// #208
    1738:	mov	x29, sp
    173c:	str	x19, [sp, #16]
    1740:	bl	0 <gomp_malloc>
    1744:	mov	x1, #0x0                   	// #0
    1748:	mov	x19, x0
    174c:	adrp	x2, 0 <gomp_global_icv>
    1750:	add	x2, x2, #0x0
    1754:	bl	0 <gomp_init_task>
    1758:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
    175c:	mrs	x1, tpidr_el0
    1760:	add	x1, x1, #0x0, lsl #12
    1764:	add	x1, x1, #0x0
    1768:	ldr	w0, [x0]
    176c:	str	x19, [x1, #80]
    1770:	bl	0 <pthread_setspecific>
    1774:	add	x0, x19, #0x90
    1778:	ldr	x19, [sp, #16]
    177c:	ldp	x29, x30, [sp], #32
    1780:	ret

Disassembly of section .text.startup:

0000000000000000 <initialize_team>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 14d0 <gomp_free_thread>
   8:	adrp	x0, 4 <initialize_team+0x4>
   c:	mov	x29, sp
  10:	add	x1, x1, #0x0
  14:	add	x0, x0, #0x0
  18:	bl	0 <pthread_key_create>
  1c:	cbnz	w0, 28 <initialize_team+0x28>
  20:	ldp	x29, x30, [sp], #16
  24:	ret
  28:	adrp	x0, 0 <initialize_team>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <gomp_fatal>

Disassembly of section .text.exit:

0000000000000000 <team_destructor>:
   0:	adrp	x0, 4 <team_destructor+0x4>
   4:	ldr	w0, [x0]
   8:	b	0 <pthread_key_delete>

work.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_init_work_share>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	wzr, [x0, #64]
  14:	cbnz	x1, 34 <gomp_init_work_share+0x34>
  18:	add	x0, x0, #0x60
  1c:	str	x0, [x19, #32]
  20:	str	wzr, [x19, #68]
  24:	str	xzr, [x19, #80]
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	ubfiz	x20, x2, #2, #32
  38:	sub	x2, x1, #0x1
  3c:	add	x0, x20, #0x7
  40:	cmp	x1, #0x1
  44:	and	x0, x0, #0xfffffffffffffff8
  48:	add	x0, x0, x2
  4c:	csel	x20, x20, x0, eq  // eq = none
  50:	cmp	x20, #0x20
  54:	b.hi	8c <gomp_init_work_share+0x8c>  // b.pmore
  58:	add	x0, x19, #0x60
  5c:	str	x0, [x19, #32]
  60:	mov	x2, x20
  64:	mov	w1, #0x0                   	// #0
  68:	bl	0 <memset>
  6c:	str	wzr, [x19, #48]
  70:	mov	x0, #0xffffffff00000000    	// #-4294967296
  74:	str	x0, [x19, #40]
  78:	str	wzr, [x19, #68]
  7c:	str	xzr, [x19, #80]
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x29, x30, [sp], #32
  88:	ret
  8c:	mov	x0, x20
  90:	bl	0 <gomp_malloc>
  94:	str	x0, [x19, #32]
  98:	b	60 <gomp_init_work_share+0x60>
  9c:	nop

00000000000000a0 <gomp_fini_work_share>:
  a0:	add	x1, x0, #0x60
  a4:	ldr	x0, [x0, #32]
  a8:	cmp	x0, x1
  ac:	b.eq	b4 <gomp_fini_work_share+0x14>  // b.none
  b0:	b	0 <free>
  b4:	ret

00000000000000b8 <gomp_work_share_start>:
  b8:	stp	x29, x30, [sp, #-64]!
  bc:	mov	x29, sp
  c0:	stp	x21, x22, [sp, #32]
  c4:	adrp	x21, 0 <gomp_tls_data>
  c8:	ldr	x21, [x21]
  cc:	stp	x19, x20, [sp, #16]
  d0:	mrs	x19, tpidr_el0
  d4:	add	x20, x19, x21
  d8:	ldr	x22, [x20, #16]
  dc:	str	x23, [sp, #48]
  e0:	mov	x23, x0
  e4:	cbz	x22, 1a4 <gomp_work_share_start+0xec>
  e8:	ldr	x1, [x20, #24]
  ec:	str	x1, [x20, #32]
  f0:	add	x1, x1, #0x50
  f4:	ldar	x2, [x1]
  f8:	cmp	x2, #0x2
  fc:	b.hi	16c <gomp_work_share_start+0xb4>  // b.pmore
 100:	mov	x0, #0x1                   	// #1
 104:	ldaxr	x2, [x1]
 108:	cbnz	x2, 114 <gomp_work_share_start+0x5c>
 10c:	stxr	w3, x0, [x1]
 110:	cbnz	w3, 104 <gomp_work_share_start+0x4c>
 114:	cmp	x2, #0x0
 118:	b.ne	15c <gomp_work_share_start+0xa4>  // b.any
 11c:	ldr	x20, [x22, #96]
 120:	cbz	x20, 18c <gomp_work_share_start+0xd4>
 124:	ldr	x0, [x20, #80]
 128:	str	x0, [x22, #96]
 12c:	ldr	w2, [x22]
 130:	add	x19, x19, x21
 134:	mov	x1, x23
 138:	mov	x0, x20
 13c:	bl	0 <gomp_init_work_share>
 140:	str	x20, [x19, #24]
 144:	mov	w0, #0x1                   	// #1
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldp	x21, x22, [sp, #32]
 150:	ldr	x23, [sp, #48]
 154:	ldp	x29, x30, [sp], #64
 158:	ret
 15c:	mov	x0, x1
 160:	bl	0 <gomp_ptrlock_get_slow>
 164:	mov	x2, x0
 168:	cbz	x0, 11c <gomp_work_share_start+0x64>
 16c:	add	x19, x19, x21
 170:	mov	w0, #0x0                   	// #0
 174:	ldp	x21, x22, [sp, #32]
 178:	str	x2, [x19, #24]
 17c:	ldp	x19, x20, [sp, #16]
 180:	ldr	x23, [sp, #48]
 184:	ldp	x29, x30, [sp], #64
 188:	ret
 18c:	ldr	x0, [x22, #104]
 190:	cbz	x0, 1d8 <gomp_work_share_start+0x120>
 194:	ldr	x20, [x0, #80]
 198:	cbz	x20, 1d8 <gomp_work_share_start+0x120>
 19c:	str	xzr, [x0, #80]
 1a0:	b	124 <gomp_work_share_start+0x6c>
 1a4:	mov	x0, #0x80                  	// #128
 1a8:	bl	0 <gomp_malloc>
 1ac:	mov	x1, x23
 1b0:	mov	x19, x0
 1b4:	mov	w2, #0x1                   	// #1
 1b8:	bl	0 <gomp_init_work_share>
 1bc:	str	x19, [x20, #24]
 1c0:	mov	w0, #0x1                   	// #1
 1c4:	ldp	x19, x20, [sp, #16]
 1c8:	ldp	x21, x22, [sp, #32]
 1cc:	ldr	x23, [sp, #48]
 1d0:	ldp	x29, x30, [sp], #64
 1d4:	ret
 1d8:	ldr	w1, [x22, #4]
 1dc:	mov	x0, #0x40                  	// #64
 1e0:	lsl	w1, w1, #1
 1e4:	str	w1, [x22, #4]
 1e8:	lsl	x1, x1, #7
 1ec:	bl	0 <gomp_aligned_alloc>
 1f0:	mov	x20, x0
 1f4:	ldr	w1, [x22, #4]
 1f8:	ldr	x2, [x22, #312]
 1fc:	add	x0, x0, #0x80
 200:	str	x2, [x20, #56]
 204:	sub	w2, w1, #0x1
 208:	str	x0, [x22, #96]
 20c:	cmp	w2, #0x1
 210:	str	x20, [x22, #312]
 214:	b.ls	248 <gomp_work_share_start+0x190>  // b.plast
 218:	sub	w2, w1, #0x3
 21c:	add	x0, x20, #0x100
 220:	ubfiz	x1, x2, #7, #32
 224:	add	x1, x1, #0x180
 228:	add	x1, x20, x1
 22c:	nop
 230:	stur	x0, [x0, #-48]
 234:	add	x0, x0, #0x80
 238:	cmp	x1, x0
 23c:	b.ne	230 <gomp_work_share_start+0x178>  // b.any
 240:	add	x0, x2, #0x2
 244:	add	x0, x20, x0, lsl #7
 248:	str	xzr, [x0, #80]
 24c:	b	12c <gomp_work_share_start+0x74>

0000000000000250 <gomp_work_share_end>:
 250:	stp	x29, x30, [sp, #-80]!
 254:	mov	x29, sp
 258:	stp	x21, x22, [sp, #32]
 25c:	adrp	x21, 0 <gomp_tls_data>
 260:	ldr	x21, [x21]
 264:	stp	x19, x20, [sp, #16]
 268:	mrs	x20, tpidr_el0
 26c:	add	x2, x20, x21
 270:	ldr	x19, [x2, #16]
 274:	cbz	x19, 328 <gomp_work_share_end+0xd8>
 278:	add	x0, x19, #0x84
 27c:	str	x23, [sp, #48]
 280:	add	x23, x19, #0x80
 284:	ldar	w1, [x0]
 288:	and	w1, w1, #0xfffffffc
 28c:	add	x0, x19, #0xc0
 290:	ldaxr	w3, [x0]
 294:	sub	w3, w3, #0x1
 298:	stlxr	w4, w3, [x0]
 29c:	cbnz	w4, 290 <gomp_work_share_end+0x40>
 2a0:	cmp	w3, #0x0
 2a4:	orr	w0, w1, #0x1
 2a8:	csel	w1, w0, w1, eq  // eq = none
 2ac:	tbz	w1, #0, 304 <gomp_work_share_end+0xb4>
 2b0:	ldr	x22, [x2, #32]
 2b4:	cbz	x22, 304 <gomp_work_share_end+0xb4>
 2b8:	ldr	x0, [x2, #24]
 2bc:	str	x0, [x19, #88]
 2c0:	ldr	x0, [x22, #32]
 2c4:	add	x2, x22, #0x60
 2c8:	cmp	x0, x2
 2cc:	b.eq	2dc <gomp_work_share_end+0x8c>  // b.none
 2d0:	str	w1, [sp, #76]
 2d4:	bl	0 <free>
 2d8:	ldr	w1, [sp, #76]
 2dc:	add	x0, x19, #0x68
 2e0:	ldr	x2, [x19, #104]
 2e4:	str	x2, [x22, #80]
 2e8:	ldxr	x3, [x0]
 2ec:	cmp	x3, x2
 2f0:	b.ne	2fc <gomp_work_share_end+0xac>  // b.any
 2f4:	stlxr	w4, x22, [x0]
 2f8:	cbnz	w4, 2e8 <gomp_work_share_end+0x98>
 2fc:	dmb	ish
 300:	b.ne	2e0 <gomp_work_share_end+0x90>  // b.any
 304:	add	x20, x20, x21
 308:	mov	x0, x23
 30c:	bl	0 <gomp_team_barrier_wait_end>
 310:	ldr	x23, [sp, #48]
 314:	str	xzr, [x20, #32]
 318:	ldp	x19, x20, [sp, #16]
 31c:	ldp	x21, x22, [sp, #32]
 320:	ldp	x29, x30, [sp], #80
 324:	ret
 328:	ldr	x19, [x2, #24]
 32c:	add	x1, x19, #0x60
 330:	ldr	x0, [x19, #32]
 334:	cmp	x0, x1
 338:	b.eq	340 <gomp_work_share_end+0xf0>  // b.none
 33c:	bl	0 <free>
 340:	add	x20, x20, x21
 344:	mov	x0, x19
 348:	bl	0 <free>
 34c:	ldp	x21, x22, [sp, #32]
 350:	str	xzr, [x20, #24]
 354:	ldp	x19, x20, [sp, #16]
 358:	ldp	x29, x30, [sp], #80
 35c:	ret

0000000000000360 <gomp_work_share_end_cancel>:
 360:	stp	x29, x30, [sp, #-80]!
 364:	mov	x29, sp
 368:	stp	x21, x22, [sp, #32]
 36c:	adrp	x21, 0 <gomp_tls_data>
 370:	ldr	x21, [x21]
 374:	stp	x19, x20, [sp, #16]
 378:	mrs	x20, tpidr_el0
 37c:	add	x2, x20, x21
 380:	ldr	x19, [x2, #16]
 384:	str	x23, [sp, #48]
 388:	add	x0, x19, #0x84
 38c:	add	x23, x19, #0x80
 390:	ldar	w1, [x0]
 394:	and	w1, w1, #0xfffffffc
 398:	add	x0, x19, #0xc0
 39c:	ldaxr	w3, [x0]
 3a0:	sub	w3, w3, #0x1
 3a4:	stlxr	w4, w3, [x0]
 3a8:	cbnz	w4, 39c <gomp_work_share_end_cancel+0x3c>
 3ac:	cmp	w3, #0x0
 3b0:	orr	w0, w1, #0x1
 3b4:	csel	w1, w0, w1, eq  // eq = none
 3b8:	tbz	w1, #0, 410 <gomp_work_share_end_cancel+0xb0>
 3bc:	ldr	x22, [x2, #32]
 3c0:	cbz	x22, 410 <gomp_work_share_end_cancel+0xb0>
 3c4:	ldr	x0, [x2, #24]
 3c8:	str	x0, [x19, #88]
 3cc:	ldr	x0, [x22, #32]
 3d0:	add	x2, x22, #0x60
 3d4:	cmp	x0, x2
 3d8:	b.eq	3e8 <gomp_work_share_end_cancel+0x88>  // b.none
 3dc:	str	w1, [sp, #76]
 3e0:	bl	0 <free>
 3e4:	ldr	w1, [sp, #76]
 3e8:	add	x0, x19, #0x68
 3ec:	ldr	x2, [x19, #104]
 3f0:	str	x2, [x22, #80]
 3f4:	ldxr	x3, [x0]
 3f8:	cmp	x3, x2
 3fc:	b.ne	408 <gomp_work_share_end_cancel+0xa8>  // b.any
 400:	stlxr	w4, x22, [x0]
 404:	cbnz	w4, 3f4 <gomp_work_share_end_cancel+0x94>
 408:	dmb	ish
 40c:	b.ne	3ec <gomp_work_share_end_cancel+0x8c>  // b.any
 410:	add	x20, x20, x21
 414:	mov	x0, x23
 418:	ldp	x21, x22, [sp, #32]
 41c:	ldr	x23, [sp, #48]
 420:	str	xzr, [x20, #32]
 424:	ldp	x19, x20, [sp, #16]
 428:	ldp	x29, x30, [sp], #80
 42c:	b	0 <gomp_team_barrier_wait_cancel_end>

0000000000000430 <gomp_work_share_end_nowait>:
 430:	stp	x29, x30, [sp, #-48]!
 434:	mov	x29, sp
 438:	stp	x21, x22, [sp, #32]
 43c:	adrp	x22, 0 <gomp_tls_data>
 440:	ldr	x22, [x22]
 444:	stp	x19, x20, [sp, #16]
 448:	mrs	x20, tpidr_el0
 44c:	add	x1, x20, x22
 450:	ldp	x21, x19, [x1, #16]
 454:	cbz	x21, 4e4 <gomp_work_share_end_nowait+0xb4>
 458:	ldr	x0, [x1, #32]
 45c:	cbz	x0, 48c <gomp_work_share_end_nowait+0x5c>
 460:	add	x0, x19, #0x44
 464:	ldxr	w2, [x0]
 468:	add	w2, w2, #0x1
 46c:	stlxr	w3, w2, [x0]
 470:	cbnz	w3, 464 <gomp_work_share_end_nowait+0x34>
 474:	dmb	ish
 478:	ldr	w0, [x21]
 47c:	cmp	w0, w2
 480:	b.eq	49c <gomp_work_share_end_nowait+0x6c>  // b.none
 484:	add	x20, x20, x22
 488:	str	xzr, [x20, #32]
 48c:	ldp	x19, x20, [sp, #16]
 490:	ldp	x21, x22, [sp, #32]
 494:	ldp	x29, x30, [sp], #48
 498:	ret
 49c:	ldp	x0, x19, [x1, #24]
 4a0:	str	x0, [x21, #88]
 4a4:	ldr	x0, [x19, #32]
 4a8:	add	x1, x19, #0x60
 4ac:	cmp	x0, x1
 4b0:	b.eq	4b8 <gomp_work_share_end_nowait+0x88>  // b.none
 4b4:	bl	0 <free>
 4b8:	add	x0, x21, #0x68
 4bc:	ldr	x1, [x21, #104]
 4c0:	str	x1, [x19, #80]
 4c4:	ldxr	x2, [x0]
 4c8:	cmp	x2, x1
 4cc:	b.ne	4d8 <gomp_work_share_end_nowait+0xa8>  // b.any
 4d0:	stlxr	w3, x19, [x0]
 4d4:	cbnz	w3, 4c4 <gomp_work_share_end_nowait+0x94>
 4d8:	dmb	ish
 4dc:	b.eq	484 <gomp_work_share_end_nowait+0x54>  // b.none
 4e0:	b	4bc <gomp_work_share_end_nowait+0x8c>
 4e4:	ldr	x0, [x19, #32]
 4e8:	add	x1, x19, #0x60
 4ec:	cmp	x0, x1
 4f0:	b.eq	4f8 <gomp_work_share_end_nowait+0xc8>  // b.none
 4f4:	bl	0 <free>
 4f8:	add	x20, x20, x22
 4fc:	mov	x0, x19
 500:	bl	0 <free>
 504:	str	xzr, [x20, #24]
 508:	b	48c <gomp_work_share_end_nowait+0x5c>

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_init_lock>:
   0:	str	wzr, [x0]
   4:	ret

0000000000000008 <gomp_ialias_omp_destroy_lock>:
   8:	ret
   c:	nop

0000000000000010 <gomp_ialias_omp_set_lock>:
  10:	mov	x2, x0
  14:	mov	w3, #0x1                   	// #1
  18:	ldaxr	w1, [x2]
  1c:	cbnz	w1, 28 <gomp_ialias_omp_set_lock+0x18>
  20:	stxr	w4, w3, [x2]
  24:	cbnz	w4, 18 <gomp_ialias_omp_set_lock+0x8>
  28:	cmp	w1, #0x0
  2c:	b.ne	34 <gomp_ialias_omp_set_lock+0x24>  // b.any
  30:	ret
  34:	b	0 <gomp_mutex_lock_slow>

0000000000000038 <gomp_ialias_omp_unset_lock>:
  38:	mov	x1, x0
  3c:	ldxr	w2, [x1]
  40:	stlxr	w3, wzr, [x1]
  44:	cbnz	w3, 3c <gomp_ialias_omp_unset_lock+0x4>
  48:	tbnz	w2, #31, 50 <gomp_ialias_omp_unset_lock+0x18>
  4c:	ret
  50:	b	0 <gomp_mutex_unlock_slow>
  54:	nop

0000000000000058 <gomp_ialias_omp_test_lock>:
  58:	mov	w1, #0x1                   	// #1
  5c:	ldaxr	w2, [x0]
  60:	cbnz	w2, 6c <gomp_ialias_omp_test_lock+0x14>
  64:	stxr	w3, w1, [x0]
  68:	cbnz	w3, 5c <gomp_ialias_omp_test_lock+0x4>
  6c:	cmp	w2, #0x0
  70:	cset	w0, eq  // eq = none
  74:	ret

0000000000000078 <gomp_ialias_omp_init_nest_lock>:
  78:	stp	xzr, xzr, [x0]
  7c:	ret

0000000000000080 <gomp_ialias_omp_destroy_nest_lock>:
  80:	ret
  84:	nop

0000000000000088 <gomp_ialias_omp_set_nest_lock>:
  88:	adrp	x2, 0 <gomp_tls_data>
  8c:	ldr	x2, [x2]
  90:	mrs	x1, tpidr_el0
  94:	stp	x29, x30, [sp, #-32]!
  98:	add	x1, x1, x2
  9c:	mov	x29, sp
  a0:	stp	x19, x20, [sp, #16]
  a4:	mov	x19, x0
  a8:	ldr	x20, [x1, #80]
  ac:	cbz	x20, f8 <gomp_ialias_omp_set_nest_lock+0x70>
  b0:	add	x20, x20, #0x90
  b4:	ldr	x0, [x19, #8]
  b8:	cmp	x0, x20
  bc:	b.eq	e0 <gomp_ialias_omp_set_nest_lock+0x58>  // b.none
  c0:	mov	w0, #0x1                   	// #1
  c4:	ldaxr	w1, [x19]
  c8:	cbnz	w1, d4 <gomp_ialias_omp_set_nest_lock+0x4c>
  cc:	stxr	w2, w0, [x19]
  d0:	cbnz	w2, c4 <gomp_ialias_omp_set_nest_lock+0x3c>
  d4:	cmp	w1, #0x0
  d8:	b.ne	104 <gomp_ialias_omp_set_nest_lock+0x7c>  // b.any
  dc:	str	x20, [x19, #8]
  e0:	ldr	w0, [x19, #4]
  e4:	add	w0, w0, #0x1
  e8:	str	w0, [x19, #4]
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret
  f8:	bl	0 <gomp_new_icv>
  fc:	mov	x20, x0
 100:	b	b4 <gomp_ialias_omp_set_nest_lock+0x2c>
 104:	mov	x0, x19
 108:	bl	0 <gomp_mutex_lock_slow>
 10c:	b	dc <gomp_ialias_omp_set_nest_lock+0x54>

0000000000000110 <gomp_ialias_omp_unset_nest_lock>:
 110:	ldr	w2, [x0, #4]
 114:	mov	x1, x0
 118:	sub	w2, w2, #0x1
 11c:	str	w2, [x0, #4]
 120:	cbz	w2, 128 <gomp_ialias_omp_unset_nest_lock+0x18>
 124:	ret
 128:	str	xzr, [x0, #8]
 12c:	ldxr	w2, [x1]
 130:	stlxr	w3, wzr, [x1]
 134:	cbnz	w3, 12c <gomp_ialias_omp_unset_nest_lock+0x1c>
 138:	tbz	w2, #31, 124 <gomp_ialias_omp_unset_nest_lock+0x14>
 13c:	b	0 <gomp_mutex_unlock_slow>

0000000000000140 <gomp_ialias_omp_test_nest_lock>:
 140:	adrp	x2, 0 <gomp_tls_data>
 144:	ldr	x2, [x2]
 148:	mrs	x1, tpidr_el0
 14c:	stp	x29, x30, [sp, #-32]!
 150:	add	x1, x1, x2
 154:	mov	x29, sp
 158:	ldr	x1, [x1, #80]
 15c:	str	x19, [sp, #16]
 160:	mov	x19, x0
 164:	cbz	x1, 1ac <gomp_ialias_omp_test_nest_lock+0x6c>
 168:	ldr	x0, [x19, #8]
 16c:	add	x1, x1, #0x90
 170:	mov	w2, #0x1                   	// #1
 174:	cmp	x0, x1
 178:	b.eq	1c4 <gomp_ialias_omp_test_nest_lock+0x84>  // b.none
 17c:	ldaxr	w0, [x19]
 180:	cbnz	w0, 18c <gomp_ialias_omp_test_nest_lock+0x4c>
 184:	stxr	w3, w2, [x19]
 188:	cbnz	w3, 17c <gomp_ialias_omp_test_nest_lock+0x3c>
 18c:	cmp	w0, #0x0
 190:	b.ne	1dc <gomp_ialias_omp_test_nest_lock+0x9c>  // b.any
 194:	mov	w0, w2
 198:	str	w2, [x19, #4]
 19c:	str	x1, [x19, #8]
 1a0:	ldr	x19, [sp, #16]
 1a4:	ldp	x29, x30, [sp], #32
 1a8:	ret
 1ac:	bl	0 <gomp_new_icv>
 1b0:	mov	x1, x0
 1b4:	ldr	x0, [x19, #8]
 1b8:	mov	w2, #0x1                   	// #1
 1bc:	cmp	x0, x1
 1c0:	b.ne	17c <gomp_ialias_omp_test_nest_lock+0x3c>  // b.any
 1c4:	ldr	w0, [x19, #4]
 1c8:	add	w0, w0, #0x1
 1cc:	str	w0, [x19, #4]
 1d0:	ldr	x19, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #32
 1d8:	ret
 1dc:	mov	w0, #0x0                   	// #0
 1e0:	b	1a0 <gomp_ialias_omp_test_nest_lock+0x60>

mutex.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock_slow>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x6, 0 <gomp_spin_count_var>
   8:	adrp	x5, 0 <gomp_available_cpus>
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x19, x0
  18:	adrp	x0, 0 <gomp_managed_threads>
  1c:	add	x2, x0, #0x0
  20:	adrp	x4, 0 <gomp_throttled_spin_count_var>
  24:	mov	w7, #0x1                   	// #1
  28:	cmp	w1, #0x1
  2c:	b.ne	1e0 <gomp_mutex_lock_slow+0x1e0>  // b.any
  30:	ldr	x0, [x6]
  34:	ldr	x8, [x2]
  38:	ldr	x3, [x5]
  3c:	ldr	x1, [x4]
  40:	cmp	x8, x3
  44:	csel	x0, x1, x0, hi  // hi = pmore
  48:	cbz	x0, 90 <gomp_mutex_lock_slow+0x90>
  4c:	mov	x1, #0x0                   	// #0
  50:	b	60 <gomp_mutex_lock_slow+0x60>
  54:	add	x1, x1, #0x1
  58:	cmp	x1, x0
  5c:	b.eq	90 <gomp_mutex_lock_slow+0x90>  // b.none
  60:	ldr	w3, [x19]
  64:	cmp	w3, #0x1
  68:	b.eq	54 <gomp_mutex_lock_slow+0x54>  // b.none
  6c:	ldaxr	w1, [x19]
  70:	cbnz	w1, 7c <gomp_mutex_lock_slow+0x7c>
  74:	stxr	w0, w7, [x19]
  78:	cbnz	w0, 6c <gomp_mutex_lock_slow+0x6c>
  7c:	cmp	w1, #0x0
  80:	b.ne	28 <gomp_mutex_lock_slow+0x28>  // b.any
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret
  90:	mov	w20, #0xffffffff            	// #-1
  94:	ldaxr	w0, [x19]
  98:	stxr	w1, w20, [x19]
  9c:	cbnz	w1, 94 <gomp_mutex_lock_slow+0x94>
  a0:	cbz	w0, 84 <gomp_mutex_lock_slow+0x84>
  a4:	stp	x21, x22, [sp, #32]
  a8:	adrp	x21, 0 <gomp_mutex_lock_slow>
  ac:	mov	w3, w20
  b0:	ldr	w2, [x21]
  b4:	mov	x1, x19
  b8:	add	x22, x21, #0x0
  bc:	mov	x4, #0x0                   	// #0
  c0:	mov	x0, #0x62                  	// #98
  c4:	str	x23, [sp, #48]
  c8:	bl	0 <syscall>
  cc:	tbnz	w0, #31, 1a0 <gomp_mutex_lock_slow+0x1a0>
  d0:	adrp	x20, 0 <gomp_managed_threads>
  d4:	add	x20, x20, #0x0
  d8:	adrp	x22, 0 <gomp_spin_count_var>
  dc:	mov	w4, #0xffffffff            	// #-1
  e0:	adrp	x6, 0 <gomp_available_cpus>
  e4:	adrp	x5, 0 <gomp_throttled_spin_count_var>
  e8:	ldaxr	w0, [x19]
  ec:	stxr	w1, w4, [x19]
  f0:	cbnz	w1, e8 <gomp_mutex_lock_slow+0xe8>
  f4:	cbz	w0, 194 <gomp_mutex_lock_slow+0x194>
  f8:	ldr	x0, [x22]
  fc:	ldr	x3, [x20]
 100:	ldr	x2, [x6]
 104:	ldr	x1, [x5]
 108:	cmp	x3, x2
 10c:	csel	x0, x1, x0, hi  // hi = pmore
 110:	cbz	x0, 130 <gomp_mutex_lock_slow+0x130>
 114:	mov	x1, #0x0                   	// #0
 118:	ldr	w2, [x19]
 11c:	cmn	w2, #0x1
 120:	b.ne	e8 <gomp_mutex_lock_slow+0xe8>  // b.any
 124:	add	x1, x1, #0x1
 128:	cmp	x1, x0
 12c:	b.ne	118 <gomp_mutex_lock_slow+0x118>  // b.any
 130:	adrp	x21, 0 <gomp_mutex_lock_slow>
 134:	mov	x1, x19
 138:	add	x23, x21, #0x0
 13c:	mov	x4, #0x0                   	// #0
 140:	ldr	w2, [x21]
 144:	mov	w3, #0xffffffff            	// #-1
 148:	mov	x0, #0x62                  	// #98
 14c:	bl	0 <syscall>
 150:	tbz	w0, #31, dc <gomp_mutex_lock_slow+0xdc>
 154:	bl	0 <__errno_location>
 158:	ldr	w0, [x0]
 15c:	cmp	w0, #0x26
 160:	b.ne	dc <gomp_mutex_lock_slow+0xdc>  // b.any
 164:	ldr	w5, [x23, #4]
 168:	mov	x1, x19
 16c:	ldr	w2, [x21]
 170:	mov	x4, #0x0                   	// #0
 174:	and	w5, w5, #0xffffff7f
 178:	mov	w3, #0xffffffff            	// #-1
 17c:	and	w2, w2, #0xffffff7f
 180:	mov	x0, #0x62                  	// #98
 184:	str	w2, [x21]
 188:	str	w5, [x23, #4]
 18c:	bl	0 <syscall>
 190:	b	dc <gomp_mutex_lock_slow+0xdc>
 194:	ldp	x21, x22, [sp, #32]
 198:	ldr	x23, [sp, #48]
 19c:	b	84 <gomp_mutex_lock_slow+0x84>
 1a0:	bl	0 <__errno_location>
 1a4:	ldr	w0, [x0]
 1a8:	cmp	w0, #0x26
 1ac:	b.ne	d0 <gomp_mutex_lock_slow+0xd0>  // b.any
 1b0:	ldr	w5, [x22, #4]
 1b4:	mov	w3, w20
 1b8:	ldr	w2, [x21]
 1bc:	mov	x1, x19
 1c0:	and	w5, w5, #0xffffff7f
 1c4:	mov	x4, #0x0                   	// #0
 1c8:	and	w2, w2, #0xffffff7f
 1cc:	mov	x0, #0x62                  	// #98
 1d0:	str	w2, [x21]
 1d4:	str	w5, [x22, #4]
 1d8:	bl	0 <syscall>
 1dc:	b	d0 <gomp_mutex_lock_slow+0xd0>
 1e0:	stp	x21, x22, [sp, #32]
 1e4:	str	x23, [sp, #48]
 1e8:	b	d0 <gomp_mutex_lock_slow+0xd0>
 1ec:	nop

00000000000001f0 <gomp_mutex_unlock_slow>:
 1f0:	stp	x29, x30, [sp, #-48]!
 1f4:	mov	w3, #0x1                   	// #1
 1f8:	mov	x29, sp
 1fc:	stp	x19, x20, [sp, #16]
 200:	mov	x19, x0
 204:	mov	x1, x19
 208:	str	x21, [sp, #32]
 20c:	adrp	x21, 0 <gomp_mutex_lock_slow>
 210:	add	x20, x21, #0x0
 214:	mov	x0, #0x62                  	// #98
 218:	ldr	w2, [x20, #4]
 21c:	bl	0 <syscall>
 220:	tbnz	w0, #31, 234 <gomp_mutex_unlock_slow+0x44>
 224:	ldp	x19, x20, [sp, #16]
 228:	ldr	x21, [sp, #32]
 22c:	ldp	x29, x30, [sp], #48
 230:	ret
 234:	bl	0 <__errno_location>
 238:	ldr	w0, [x0]
 23c:	cmp	w0, #0x26
 240:	b.ne	224 <gomp_mutex_unlock_slow+0x34>  // b.any
 244:	ldr	w4, [x21]
 248:	mov	x1, x19
 24c:	ldr	w2, [x20, #4]
 250:	mov	w3, #0x1                   	// #1
 254:	and	w4, w4, #0xffffff7f
 258:	str	w4, [x21]
 25c:	and	w2, w2, #0xffffff7f
 260:	str	w2, [x20, #4]
 264:	ldp	x19, x20, [sp, #16]
 268:	mov	x0, #0x62                  	// #98
 26c:	ldr	x21, [sp, #32]
 270:	ldp	x29, x30, [sp], #48
 274:	b	0 <syscall>

proc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_num_procs>:
   0:	adrp	x0, 0 <gomp_places_list>
   4:	ldr	x0, [x0]
   8:	cbz	x0, 18 <get_num_procs+0x18>
   c:	adrp	x0, 0 <gomp_available_cpus>
  10:	ldr	w0, [x0]
  14:	ret
  18:	stp	x29, x30, [sp, #-32]!
  1c:	mov	x29, sp
  20:	stp	x19, x20, [sp, #16]
  24:	adrp	x20, 8 <get_num_procs+0x8>
  28:	ldr	x19, [x20]
  2c:	cbz	x19, 4c <get_num_procs+0x4c>
  30:	bl	0 <pthread_self>
  34:	adrp	x1, 0 <get_num_procs>
  38:	mov	x2, x19
  3c:	ldr	x19, [x1]
  40:	mov	x1, x19
  44:	bl	0 <pthread_getaffinity_np>
  48:	cbz	w0, 60 <get_num_procs+0x60>
  4c:	mov	w0, #0x54                  	// #84
  50:	bl	0 <sysconf>
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	ldr	x1, [x20]
  64:	mov	x0, x19
  68:	bl	0 <__sched_cpucount>
  6c:	cmp	w0, #0x0
  70:	csinc	w0, w0, wzr, ne  // ne = any
  74:	b	54 <get_num_procs+0x54>

0000000000000078 <gomp_cpuset_popcount>:
  78:	stp	x29, x30, [sp, #-16]!
  7c:	mov	x29, sp
  80:	bl	0 <__sched_cpucount>
  84:	sxtw	x0, w0
  88:	ldp	x29, x30, [sp], #16
  8c:	ret

0000000000000090 <gomp_init_num_threads>:
  90:	stp	x29, x30, [sp, #-80]!
  94:	mov	w0, #0x53                  	// #83
  98:	mov	x29, sp
  9c:	stp	x19, x20, [sp, #16]
  a0:	adrp	x19, 8 <get_num_procs+0x8>
  a4:	stp	x21, x22, [sp, #32]
  a8:	adrp	x22, 8 <get_num_procs+0x8>
  ac:	add	x20, x22, #0x0
  b0:	stp	x23, x24, [sp, #48]
  b4:	bl	0 <sysconf>
  b8:	add	x0, x0, #0x3f
  bc:	mov	x21, #0x80                  	// #128
  c0:	lsr	x0, x0, #6
  c4:	lsl	x0, x0, #3
  c8:	str	x0, [x22]
  cc:	bl	0 <gomp_malloc>
  d0:	str	x0, [x19]
  d4:	str	x0, [sp, #72]
  d8:	bl	0 <pthread_self>
  dc:	ldr	x2, [sp, #72]
  e0:	mov	x23, x0
  e4:	nop
  e8:	ldr	x1, [x20]
  ec:	mov	x0, x23
  f0:	add	x24, x19, #0x0
  f4:	bl	0 <pthread_getaffinity_np>
  f8:	cbz	w0, 150 <gomp_init_num_threads+0xc0>
  fc:	ldr	x2, [x19]
 100:	cmp	w0, #0x16
 104:	mov	x1, #0x80                  	// #128
 108:	b.ne	1c0 <gomp_init_num_threads+0x130>  // b.any
 10c:	ldr	x3, [x20]
 110:	mov	x0, x2
 114:	cmp	x3, #0x7f
 118:	b.ls	1a8 <gomp_init_num_threads+0x118>  // b.plast
 11c:	lsl	x1, x3, #1
 120:	str	x1, [x20]
 124:	cmp	x1, #0x3ff
 128:	b.ls	1ac <gomp_init_num_threads+0x11c>  // b.plast
 12c:	bl	0 <realloc>
 130:	mov	x2, x0
 134:	cbz	x0, 238 <gomp_init_num_threads+0x1a8>
 138:	ldr	x1, [x20]
 13c:	str	x0, [x19]
 140:	add	x24, x19, #0x0
 144:	mov	x0, x23
 148:	bl	0 <pthread_getaffinity_np>
 14c:	cbnz	w0, fc <gomp_init_num_threads+0x6c>
 150:	ldr	x1, [x19]
 154:	adrp	x21, 0 <gomp_global_icv>
 158:	ldr	x0, [x20]
 15c:	bl	0 <__sched_cpucount>
 160:	sxtw	x0, w0
 164:	str	x0, [x21]
 168:	cbnz	x0, 1c8 <gomp_init_num_threads+0x138>
 16c:	ldr	x2, [x19]
 170:	mov	x1, #0x1                   	// #1
 174:	mov	x0, x2
 178:	str	x1, [x21]
 17c:	str	xzr, [x22]
 180:	bl	0 <free>
 184:	mov	w0, #0x54                  	// #84
 188:	str	xzr, [x19]
 18c:	bl	0 <sysconf>
 190:	str	x0, [x21]
 194:	ldp	x19, x20, [sp, #16]
 198:	ldp	x21, x22, [sp, #32]
 19c:	ldp	x23, x24, [sp, #48]
 1a0:	ldp	x29, x30, [sp], #80
 1a4:	ret
 1a8:	str	x21, [x20]
 1ac:	mov	x0, x2
 1b0:	bl	0 <gomp_realloc>
 1b4:	mov	x2, x0
 1b8:	str	x0, [x19]
 1bc:	b	e8 <gomp_init_num_threads+0x58>
 1c0:	adrp	x21, 0 <gomp_global_icv>
 1c4:	b	170 <gomp_init_num_threads+0xe0>
 1c8:	adrp	x0, 0 <get_num_procs>
 1cc:	ldr	x2, [x20]
 1d0:	str	x2, [x0]
 1d4:	cmp	xzr, x2, lsl #3
 1d8:	lsl	x0, x2, #3
 1dc:	b.eq	20c <gomp_init_num_threads+0x17c>  // b.none
 1e0:	ldr	x4, [x19]
 1e4:	nop
 1e8:	mov	x3, x0
 1ec:	sub	x0, x0, #0x1
 1f0:	lsr	x1, x0, #6
 1f4:	cmp	x2, x0, lsr #3
 1f8:	b.ls	208 <gomp_init_num_threads+0x178>  // b.plast
 1fc:	ldr	x1, [x4, x1, lsl #3]
 200:	lsr	x1, x1, x0
 204:	tbnz	w1, #0, 224 <gomp_init_num_threads+0x194>
 208:	cbnz	x0, 1e8 <gomp_init_num_threads+0x158>
 20c:	str	x0, [x22]
 210:	ldp	x19, x20, [sp, #16]
 214:	ldp	x21, x22, [sp, #32]
 218:	ldp	x23, x24, [sp, #48]
 21c:	ldp	x29, x30, [sp], #80
 220:	ret
 224:	add	x0, x3, #0x3f
 228:	lsr	x0, x0, #6
 22c:	lsl	x0, x0, #3
 230:	str	x0, [x22]
 234:	b	210 <gomp_init_num_threads+0x180>
 238:	adrp	x21, 0 <gomp_global_icv>
 23c:	ldr	x2, [x24]
 240:	b	170 <gomp_init_num_threads+0xe0>
 244:	nop

0000000000000248 <gomp_dynamic_max_threads>:
 248:	adrp	x2, 0 <gomp_tls_data>
 24c:	ldr	x2, [x2]
 250:	mrs	x1, tpidr_el0
 254:	stp	x29, x30, [sp, #-64]!
 258:	adrp	x0, 0 <gomp_global_icv>
 25c:	add	x1, x1, x2
 260:	mov	x29, sp
 264:	add	x0, x0, #0x0
 268:	stp	x19, x20, [sp, #16]
 26c:	ldr	x1, [x1, #80]
 270:	cmp	x1, #0x0
 274:	add	x1, x1, #0x90
 278:	csel	x0, x0, x1, eq  // eq = none
 27c:	ldr	x20, [x0]
 280:	bl	0 <get_num_procs>
 284:	mov	w19, w0
 288:	mov	w1, #0x3                   	// #3
 28c:	cmp	w20, w19
 290:	add	x0, sp, #0x28
 294:	csel	w19, w20, w19, ls  // ls = plast
 298:	bl	0 <getloadavg>
 29c:	cmp	w0, #0x3
 2a0:	b.eq	2c0 <gomp_dynamic_max_threads+0x78>  // b.none
 2a4:	mov	w0, #0x0                   	// #0
 2a8:	cmp	w0, w19
 2ac:	sub	w0, w19, w0
 2b0:	csinc	w0, w0, wzr, cc  // cc = lo, ul, last
 2b4:	ldp	x19, x20, [sp, #16]
 2b8:	ldp	x29, x30, [sp], #64
 2bc:	ret
 2c0:	adrp	x0, 0 <get_num_procs>
 2c4:	ldr	d0, [sp, #56]
 2c8:	ldr	d1, [x0]
 2cc:	fadd	d0, d0, d1
 2d0:	fcvtzu	w0, d0
 2d4:	cmp	w0, w19
 2d8:	sub	w0, w19, w0
 2dc:	csinc	w0, w0, wzr, cc  // cc = lo, ul, last
 2e0:	ldp	x19, x20, [sp, #16]
 2e4:	ldp	x29, x30, [sp], #64
 2e8:	ret
 2ec:	nop

00000000000002f0 <gomp_ialias_omp_get_num_procs>:
 2f0:	b	0 <get_num_procs>

sem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_sem_wait_slow>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	w2, w1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	cbnz	w1, a8 <gomp_sem_wait_slow+0xa8>
  18:	adrp	x5, 0 <gomp_spin_count_var>
  1c:	adrp	x4, 0 <gomp_managed_threads>
  20:	adrp	x3, 0 <gomp_available_cpus>
  24:	add	x5, x5, #0x0
  28:	add	x4, x4, #0x0
  2c:	add	x3, x3, #0x0
  30:	adrp	x6, 0 <gomp_throttled_spin_count_var>
  34:	mov	w7, #0x80000000            	// #-2147483648
  38:	ldr	x2, [x4]
  3c:	ldr	x1, [x3]
  40:	add	x0, x6, #0x0
  44:	cmp	x2, x1
  48:	csel	x0, x5, x0, ls  // ls = plast
  4c:	ldr	x2, [x0]
  50:	cbz	x2, b4 <gomp_sem_wait_slow+0xb4>
  54:	mov	x0, #0x0                   	// #0
  58:	b	68 <gomp_sem_wait_slow+0x68>
  5c:	add	x0, x0, #0x1
  60:	cmp	x0, x2
  64:	b.eq	b4 <gomp_sem_wait_slow+0xb4>  // b.none
  68:	ldr	w1, [x19]
  6c:	cbz	w1, 5c <gomp_sem_wait_slow+0x5c>
  70:	ldr	w2, [x19]
  74:	cmp	w2, #0x0
  78:	b.lt	a8 <gomp_sem_wait_slow+0xa8>  // b.tstop
  7c:	b.eq	38 <gomp_sem_wait_slow+0x38>  // b.none
  80:	sub	w0, w2, #0x1
  84:	ldaxr	w1, [x19]
  88:	cmp	w1, w2
  8c:	b.ne	98 <gomp_sem_wait_slow+0x98>  // b.any
  90:	stxr	w8, w0, [x19]
  94:	cbnz	w8, 84 <gomp_sem_wait_slow+0x84>
  98:	b.eq	148 <gomp_sem_wait_slow+0x148>  // b.none
  9c:	mov	w2, w1
  a0:	cbz	w1, 38 <gomp_sem_wait_slow+0x38>
  a4:	nop
  a8:	stp	x21, x22, [sp, #32]
  ac:	str	x23, [sp, #48]
  b0:	b	f8 <gomp_sem_wait_slow+0xf8>
  b4:	ldaxr	w0, [x19]
  b8:	cbnz	w0, c4 <gomp_sem_wait_slow+0xc4>
  bc:	stxr	w1, w7, [x19]
  c0:	cbnz	w1, b4 <gomp_sem_wait_slow+0xb4>
  c4:	cmp	w0, #0x0
  c8:	b.ne	70 <gomp_sem_wait_slow+0x70>  // b.any
  cc:	adrp	x20, 0 <gomp_futex_wait>
  d0:	mov	x1, x19
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	w3, #0x80000000            	// #-2147483648
  dc:	ldr	w2, [x20]
  e0:	mov	x0, #0x62                  	// #98
  e4:	stp	x21, x22, [sp, #32]
  e8:	str	x23, [sp, #48]
  ec:	bl	0 <syscall>
  f0:	tbnz	w0, #31, 28c <gomp_sem_wait_slow+0x28c>
  f4:	ldr	w2, [x19]
  f8:	adrp	x21, 0 <gomp_managed_threads>
  fc:	add	x21, x21, #0x0
 100:	mov	w20, #0x80000000            	// #-2147483648
 104:	adrp	x22, 0 <gomp_spin_count_var>
 108:	mov	w1, w2
 10c:	ands	w0, w2, #0x7fffffff
 110:	b.eq	154 <gomp_sem_wait_slow+0x154>  // b.none
 114:	sub	w0, w0, #0x1
 118:	orr	w0, w0, #0x80000000
 11c:	ldaxr	w3, [x19]
 120:	cmp	w3, w2
 124:	b.ne	130 <gomp_sem_wait_slow+0x130>  // b.any
 128:	stxr	w4, w0, [x19]
 12c:	cbnz	w4, 11c <gomp_sem_wait_slow+0x11c>
 130:	mov	w2, w3
 134:	b.ne	108 <gomp_sem_wait_slow+0x108>  // b.any
 138:	tst	w1, #0x7ffffffe
 13c:	b.ne	224 <gomp_sem_wait_slow+0x224>  // b.any
 140:	ldp	x21, x22, [sp, #32]
 144:	ldr	x23, [sp, #48]
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldp	x29, x30, [sp], #64
 150:	ret
 154:	ldaxr	w0, [x19]
 158:	cmp	w0, w2
 15c:	b.ne	168 <gomp_sem_wait_slow+0x168>  // b.any
 160:	stxr	w1, w20, [x19]
 164:	cbnz	w1, 154 <gomp_sem_wait_slow+0x154>
 168:	mov	w2, w0
 16c:	b.ne	108 <gomp_sem_wait_slow+0x108>  // b.any
 170:	ldr	x0, [x22]
 174:	ldr	x3, [x21]
 178:	adrp	x2, 0 <gomp_available_cpus>
 17c:	adrp	x1, 0 <gomp_throttled_spin_count_var>
 180:	ldr	x2, [x2]
 184:	ldr	x1, [x1]
 188:	cmp	x3, x2
 18c:	csel	x0, x1, x0, hi  // hi = pmore
 190:	cbz	x0, 1bc <gomp_sem_wait_slow+0x1bc>
 194:	mov	x1, #0x0                   	// #0
 198:	b	1a8 <gomp_sem_wait_slow+0x1a8>
 19c:	add	x1, x1, #0x1
 1a0:	cmp	x1, x0
 1a4:	b.eq	1bc <gomp_sem_wait_slow+0x1bc>  // b.none
 1a8:	ldr	w2, [x19]
 1ac:	cmp	w2, w20
 1b0:	b.eq	19c <gomp_sem_wait_slow+0x19c>  // b.none
 1b4:	ldr	w2, [x19]
 1b8:	b	108 <gomp_sem_wait_slow+0x108>
 1bc:	adrp	x23, 0 <gomp_futex_wait>
 1c0:	mov	x1, x19
 1c4:	mov	x4, #0x0                   	// #0
 1c8:	mov	w3, #0x80000000            	// #-2147483648
 1cc:	ldr	w2, [x23]
 1d0:	mov	x0, #0x62                  	// #98
 1d4:	bl	0 <syscall>
 1d8:	tbz	w0, #31, 1b4 <gomp_sem_wait_slow+0x1b4>
 1dc:	bl	0 <__errno_location>
 1e0:	ldr	w0, [x0]
 1e4:	cmp	w0, #0x26
 1e8:	b.ne	1b4 <gomp_sem_wait_slow+0x1b4>  // b.any
 1ec:	adrp	x5, 0 <gomp_futex_wake>
 1f0:	ldr	w2, [x23]
 1f4:	mov	x1, x19
 1f8:	mov	x4, #0x0                   	// #0
 1fc:	ldr	w0, [x5]
 200:	and	w2, w2, #0xffffff7f
 204:	mov	w3, #0x80000000            	// #-2147483648
 208:	str	w2, [x23]
 20c:	and	w0, w0, #0xffffff7f
 210:	str	w0, [x5]
 214:	mov	x0, #0x62                  	// #98
 218:	bl	0 <syscall>
 21c:	ldr	w2, [x19]
 220:	b	108 <gomp_sem_wait_slow+0x108>
 224:	adrp	x20, 0 <gomp_futex_wake>
 228:	mov	x1, x19
 22c:	mov	w3, #0x1                   	// #1
 230:	mov	x0, #0x62                  	// #98
 234:	ldr	w2, [x20]
 238:	bl	0 <syscall>
 23c:	tbz	w0, #31, 140 <gomp_sem_wait_slow+0x140>
 240:	bl	0 <__errno_location>
 244:	ldr	w0, [x0]
 248:	cmp	w0, #0x26
 24c:	b.ne	140 <gomp_sem_wait_slow+0x140>  // b.any
 250:	ldr	w2, [x20]
 254:	mov	x1, x19
 258:	ldp	x21, x22, [sp, #32]
 25c:	and	w2, w2, #0xffffff7f
 260:	str	w2, [x20]
 264:	adrp	x5, 0 <gomp_futex_wait>
 268:	ldp	x19, x20, [sp, #16]
 26c:	mov	w3, #0x1                   	// #1
 270:	ldr	x23, [sp, #48]
 274:	mov	x0, #0x62                  	// #98
 278:	ldp	x29, x30, [sp], #64
 27c:	ldr	w4, [x5]
 280:	and	w4, w4, #0xffffff7f
 284:	str	w4, [x5]
 288:	b	0 <syscall>
 28c:	bl	0 <__errno_location>
 290:	ldr	w0, [x0]
 294:	cmp	w0, #0x26
 298:	b.ne	f4 <gomp_sem_wait_slow+0xf4>  // b.any
 29c:	adrp	x5, 0 <gomp_futex_wake>
 2a0:	ldr	w2, [x20]
 2a4:	mov	x1, x19
 2a8:	mov	x4, #0x0                   	// #0
 2ac:	ldr	w0, [x5]
 2b0:	and	w2, w2, #0xffffff7f
 2b4:	mov	w3, #0x80000000            	// #-2147483648
 2b8:	str	w2, [x20]
 2bc:	and	w0, w0, #0xffffff7f
 2c0:	str	w0, [x5]
 2c4:	mov	x0, #0x62                  	// #98
 2c8:	bl	0 <syscall>
 2cc:	b	f4 <gomp_sem_wait_slow+0xf4>

00000000000002d0 <gomp_sem_post_slow>:
 2d0:	stp	x29, x30, [sp, #-32]!
 2d4:	mov	x1, x0
 2d8:	mov	w3, #0x1                   	// #1
 2dc:	mov	x29, sp
 2e0:	stp	x19, x20, [sp, #16]
 2e4:	adrp	x20, 0 <gomp_futex_wake>
 2e8:	mov	x19, x0
 2ec:	ldr	w2, [x20]
 2f0:	mov	x0, #0x62                  	// #98
 2f4:	bl	0 <syscall>
 2f8:	tbnz	w0, #31, 308 <gomp_sem_post_slow+0x38>
 2fc:	ldp	x19, x20, [sp, #16]
 300:	ldp	x29, x30, [sp], #32
 304:	ret
 308:	bl	0 <__errno_location>
 30c:	ldr	w0, [x0]
 310:	cmp	w0, #0x26
 314:	b.ne	2fc <gomp_sem_post_slow+0x2c>  // b.any
 318:	ldr	w2, [x20]
 31c:	mov	x1, x19
 320:	adrp	x5, 0 <gomp_futex_wait>
 324:	mov	w3, #0x1                   	// #1
 328:	and	w2, w2, #0xffffff7f
 32c:	str	w2, [x20]
 330:	ldp	x19, x20, [sp, #16]
 334:	mov	x0, #0x62                  	// #98
 338:	ldp	x29, x30, [sp], #32
 33c:	ldr	w4, [x5]
 340:	and	w4, w4, #0xffffff7f
 344:	str	w4, [x5]
 348:	b	0 <syscall>

bar.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_barrier_wait_end>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w19, w1
  10:	add	x20, x0, #0x4
  14:	tbnz	w19, #0, 10c <gomp_barrier_wait_end+0x10c>
  18:	stp	x21, x22, [sp, #32]
  1c:	adrp	x21, 0 <gomp_futex_wait>
  20:	adrp	x22, 0 <gomp_futex_wake>
  24:	add	x21, x21, #0x0
  28:	add	x22, x22, #0x0
  2c:	stp	x23, x24, [sp, #48]
  30:	adrp	x23, 0 <gomp_available_cpus>
  34:	add	x23, x23, #0x0
  38:	stp	x25, x26, [sp, #64]
  3c:	adrp	x26, 0 <gomp_spin_count_var>
  40:	adrp	x25, 0 <gomp_managed_threads>
  44:	add	x26, x26, #0x0
  48:	add	x25, x25, #0x0
  4c:	adrp	x24, 0 <gomp_throttled_spin_count_var>
  50:	ldr	x2, [x25]
  54:	ldr	x1, [x23]
  58:	add	x0, x24, #0x0
  5c:	cmp	x2, x1
  60:	csel	x0, x26, x0, ls  // ls = plast
  64:	ldr	x2, [x0]
  68:	cbz	x2, b0 <gomp_barrier_wait_end+0xb0>
  6c:	mov	x0, #0x0                   	// #0
  70:	b	80 <gomp_barrier_wait_end+0x80>
  74:	add	x0, x0, #0x1
  78:	cmp	x0, x2
  7c:	b.eq	b0 <gomp_barrier_wait_end+0xb0>  // b.none
  80:	ldr	w1, [x20]
  84:	cmp	w19, w1
  88:	b.eq	74 <gomp_barrier_wait_end+0x74>  // b.none
  8c:	ldar	w0, [x20]
  90:	cmp	w0, w19
  94:	b.eq	50 <gomp_barrier_wait_end+0x50>  // b.none
  98:	ldp	x21, x22, [sp, #32]
  9c:	ldp	x23, x24, [sp, #48]
  a0:	ldp	x25, x26, [sp, #64]
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldp	x29, x30, [sp], #80
  ac:	ret
  b0:	ldr	w2, [x21]
  b4:	mov	w3, w19
  b8:	mov	x1, x20
  bc:	mov	x4, #0x0                   	// #0
  c0:	mov	x0, #0x62                  	// #98
  c4:	bl	0 <syscall>
  c8:	tbz	w0, #31, 8c <gomp_barrier_wait_end+0x8c>
  cc:	bl	0 <__errno_location>
  d0:	ldr	w0, [x0]
  d4:	cmp	w0, #0x26
  d8:	b.ne	8c <gomp_barrier_wait_end+0x8c>  // b.any
  dc:	ldr	w5, [x22]
  e0:	mov	w3, w19
  e4:	ldr	w2, [x21]
  e8:	mov	x1, x20
  ec:	and	w5, w5, #0xffffff7f
  f0:	mov	x4, #0x0                   	// #0
  f4:	and	w2, w2, #0xffffff7f
  f8:	mov	x0, #0x62                  	// #98
  fc:	str	w2, [x21]
 100:	str	w5, [x22]
 104:	bl	0 <syscall>
 108:	b	8c <gomp_barrier_wait_end+0x8c>
 10c:	ldp	w2, w1, [x0]
 110:	str	w2, [x0, #64]
 114:	add	w1, w1, #0x8
 118:	stlr	w1, [x20]
 11c:	mov	x1, x20
 120:	adrp	x19, 0 <gomp_futex_wake>
 124:	mov	w3, #0x7fffffff            	// #2147483647
 128:	mov	x0, #0x62                  	// #98
 12c:	ldr	w2, [x19]
 130:	bl	0 <syscall>
 134:	tbz	w0, #31, a4 <gomp_barrier_wait_end+0xa4>
 138:	bl	0 <__errno_location>
 13c:	ldr	w0, [x0]
 140:	cmp	w0, #0x26
 144:	b.ne	a4 <gomp_barrier_wait_end+0xa4>  // b.any
 148:	ldr	w2, [x19]
 14c:	mov	x1, x20
 150:	adrp	x5, 0 <gomp_futex_wait>
 154:	mov	w3, #0x7fffffff            	// #2147483647
 158:	and	w2, w2, #0xffffff7f
 15c:	str	w2, [x19]
 160:	ldp	x19, x20, [sp, #16]
 164:	mov	x0, #0x62                  	// #98
 168:	ldp	x29, x30, [sp], #80
 16c:	ldr	w4, [x5]
 170:	and	w4, w4, #0xffffff7f
 174:	str	w4, [x5]
 178:	b	0 <syscall>
 17c:	nop

0000000000000180 <gomp_barrier_wait>:
 180:	add	x1, x0, #0x4
 184:	ldar	w1, [x1]
 188:	and	w1, w1, #0xfffffffc
 18c:	add	x2, x0, #0x40
 190:	ldaxr	w3, [x2]
 194:	sub	w3, w3, #0x1
 198:	stlxr	w4, w3, [x2]
 19c:	cbnz	w4, 190 <gomp_barrier_wait+0x10>
 1a0:	cmp	w3, #0x0
 1a4:	orr	w2, w1, #0x1
 1a8:	csel	w1, w2, w1, eq  // eq = none
 1ac:	b	0 <gomp_barrier_wait_end>

00000000000001b0 <gomp_barrier_wait_last>:
 1b0:	add	x1, x0, #0x4
 1b4:	ldar	w1, [x1]
 1b8:	add	x2, x0, #0x40
 1bc:	ldaxr	w3, [x2]
 1c0:	sub	w3, w3, #0x1
 1c4:	stlxr	w4, w3, [x2]
 1c8:	cbnz	w4, 1bc <gomp_barrier_wait_last+0xc>
 1cc:	cbnz	w3, 1dc <gomp_barrier_wait_last+0x2c>
 1d0:	and	w1, w1, #0xfffffffc
 1d4:	orr	w1, w1, #0x1
 1d8:	b	0 <gomp_barrier_wait_end>
 1dc:	ret

00000000000001e0 <gomp_team_barrier_wake>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	cmp	w1, #0x0
 1e8:	mov	x29, sp
 1ec:	str	x21, [sp, #32]
 1f0:	adrp	x21, 0 <gomp_futex_wake>
 1f4:	stp	x19, x20, [sp, #16]
 1f8:	add	x20, x0, #0x4
 1fc:	ldr	w2, [x21]
 200:	mov	w0, #0x7fffffff            	// #2147483647
 204:	csel	w19, w1, w0, ne  // ne = any
 208:	mov	w3, w19
 20c:	mov	x1, x20
 210:	mov	x0, #0x62                  	// #98
 214:	bl	0 <syscall>
 218:	tbnz	w0, #31, 22c <gomp_team_barrier_wake+0x4c>
 21c:	ldp	x19, x20, [sp, #16]
 220:	ldr	x21, [sp, #32]
 224:	ldp	x29, x30, [sp], #48
 228:	ret
 22c:	bl	0 <__errno_location>
 230:	ldr	w0, [x0]
 234:	cmp	w0, #0x26
 238:	b.ne	21c <gomp_team_barrier_wake+0x3c>  // b.any
 23c:	ldr	w2, [x21]
 240:	mov	w3, w19
 244:	mov	x1, x20
 248:	adrp	x5, 0 <gomp_futex_wait>
 24c:	and	w2, w2, #0xffffff7f
 250:	str	w2, [x21]
 254:	ldp	x19, x20, [sp, #16]
 258:	mov	x0, #0x62                  	// #98
 25c:	ldr	x21, [sp, #32]
 260:	ldp	x29, x30, [sp], #48
 264:	ldr	w4, [x5]
 268:	and	w4, w4, #0xffffff7f
 26c:	str	w4, [x5]
 270:	b	0 <syscall>
 274:	nop

0000000000000278 <gomp_team_barrier_wait_end>:
 278:	stp	x29, x30, [sp, #-96]!
 27c:	mov	x29, sp
 280:	stp	x19, x20, [sp, #16]
 284:	mov	w19, w1
 288:	stp	x27, x28, [sp, #80]
 28c:	add	x28, x0, #0x4
 290:	tbnz	w19, #0, 3b4 <gomp_team_barrier_wait_end+0x13c>
 294:	stp	x21, x22, [sp, #32]
 298:	stp	x23, x24, [sp, #48]
 29c:	stp	x25, x26, [sp, #64]
 2a0:	and	w22, w19, #0xfffffffb
 2a4:	adrp	x25, 0 <gomp_spin_count_var>
 2a8:	adrp	x24, 0 <gomp_managed_threads>
 2ac:	adrp	x23, 0 <gomp_available_cpus>
 2b0:	adrp	x20, 0 <gomp_futex_wait>
 2b4:	adrp	x21, 0 <gomp_futex_wake>
 2b8:	add	w27, w22, #0x8
 2bc:	add	x25, x25, #0x0
 2c0:	add	x24, x24, #0x0
 2c4:	add	x23, x23, #0x0
 2c8:	add	x20, x20, #0x0
 2cc:	add	x21, x21, #0x0
 2d0:	adrp	x26, 0 <gomp_throttled_spin_count_var>
 2d4:	nop
 2d8:	ldr	x3, [x24]
 2dc:	ldr	x2, [x23]
 2e0:	add	x0, x26, #0x0
 2e4:	cmp	x3, x2
 2e8:	csel	x0, x25, x0, ls  // ls = plast
 2ec:	ldr	x2, [x0]
 2f0:	cbz	x2, 348 <gomp_team_barrier_wait_end+0xd0>
 2f4:	mov	x0, #0x0                   	// #0
 2f8:	b	308 <gomp_team_barrier_wait_end+0x90>
 2fc:	add	x0, x0, #0x1
 300:	cmp	x0, x2
 304:	b.eq	348 <gomp_team_barrier_wait_end+0xd0>  // b.none
 308:	ldr	w3, [x28]
 30c:	cmp	w19, w3
 310:	b.eq	2fc <gomp_team_barrier_wait_end+0x84>  // b.none
 314:	ldar	w0, [x28]
 318:	tbnz	w0, #0, 3a4 <gomp_team_barrier_wait_end+0x12c>
 31c:	and	w2, w0, #0x2
 320:	cmp	w0, w27
 324:	orr	w19, w19, w2
 328:	b.ne	2d8 <gomp_team_barrier_wait_end+0x60>  // b.any
 32c:	ldp	x21, x22, [sp, #32]
 330:	ldp	x23, x24, [sp, #48]
 334:	ldp	x25, x26, [sp, #64]
 338:	ldp	x19, x20, [sp, #16]
 33c:	ldp	x27, x28, [sp, #80]
 340:	ldp	x29, x30, [sp], #96
 344:	ret
 348:	ldr	w2, [x20]
 34c:	mov	w3, w19
 350:	mov	x1, x28
 354:	mov	x4, #0x0                   	// #0
 358:	mov	x0, #0x62                  	// #98
 35c:	bl	0 <syscall>
 360:	tbz	w0, #31, 314 <gomp_team_barrier_wait_end+0x9c>
 364:	bl	0 <__errno_location>
 368:	ldr	w0, [x0]
 36c:	cmp	w0, #0x26
 370:	b.ne	314 <gomp_team_barrier_wait_end+0x9c>  // b.any
 374:	ldr	w5, [x21]
 378:	mov	w3, w19
 37c:	ldr	w2, [x20]
 380:	mov	x1, x28
 384:	and	w5, w5, #0xffffff7f
 388:	mov	x4, #0x0                   	// #0
 38c:	and	w2, w2, #0xffffff7f
 390:	mov	x0, #0x62                  	// #98
 394:	str	w2, [x20]
 398:	str	w5, [x21]
 39c:	bl	0 <syscall>
 3a0:	b	314 <gomp_team_barrier_wait_end+0x9c>
 3a4:	mov	w0, w22
 3a8:	bl	0 <gomp_barrier_handle_tasks>
 3ac:	ldar	w0, [x28]
 3b0:	b	31c <gomp_team_barrier_wait_end+0xa4>
 3b4:	adrp	x2, 0 <gomp_tls_data>
 3b8:	ldr	x2, [x2]
 3bc:	mrs	x1, tpidr_el0
 3c0:	ldr	w3, [x0]
 3c4:	add	x1, x1, x2
 3c8:	str	w3, [x0, #64]
 3cc:	ldr	x0, [x1, #16]
 3d0:	ldr	w1, [x0, #1320]
 3d4:	str	wzr, [x0, #1332]
 3d8:	cbnz	w1, 44c <gomp_team_barrier_wait_end+0x1d4>
 3dc:	and	w0, w19, #0xfffffffb
 3e0:	add	w0, w0, #0x7
 3e4:	stlr	w0, [x28]
 3e8:	mov	x1, x28
 3ec:	adrp	x19, 0 <gomp_futex_wake>
 3f0:	mov	w3, #0x7fffffff            	// #2147483647
 3f4:	mov	x0, #0x62                  	// #98
 3f8:	ldr	w2, [x19]
 3fc:	bl	0 <syscall>
 400:	tbz	w0, #31, 338 <gomp_team_barrier_wait_end+0xc0>
 404:	bl	0 <__errno_location>
 408:	ldr	w0, [x0]
 40c:	cmp	w0, #0x26
 410:	b.ne	338 <gomp_team_barrier_wait_end+0xc0>  // b.any
 414:	ldr	w2, [x19]
 418:	mov	x1, x28
 41c:	ldp	x27, x28, [sp, #80]
 420:	and	w2, w2, #0xffffff7f
 424:	str	w2, [x19]
 428:	adrp	x5, 0 <gomp_futex_wait>
 42c:	ldp	x19, x20, [sp, #16]
 430:	mov	w3, #0x7fffffff            	// #2147483647
 434:	ldp	x29, x30, [sp], #96
 438:	mov	x0, #0x62                  	// #98
 43c:	ldr	w4, [x5]
 440:	and	w4, w4, #0xffffff7f
 444:	str	w4, [x5]
 448:	b	0 <syscall>
 44c:	mov	w0, w19
 450:	and	w19, w19, #0xfffffffe
 454:	stp	x21, x22, [sp, #32]
 458:	stp	x23, x24, [sp, #48]
 45c:	stp	x25, x26, [sp, #64]
 460:	bl	0 <gomp_barrier_handle_tasks>
 464:	b	2a0 <gomp_team_barrier_wait_end+0x28>

0000000000000468 <gomp_team_barrier_wait>:
 468:	add	x1, x0, #0x4
 46c:	ldar	w1, [x1]
 470:	and	w1, w1, #0xfffffffc
 474:	add	x2, x0, #0x40
 478:	ldaxr	w3, [x2]
 47c:	sub	w3, w3, #0x1
 480:	stlxr	w4, w3, [x2]
 484:	cbnz	w4, 478 <gomp_team_barrier_wait+0x10>
 488:	cmp	w3, #0x0
 48c:	orr	w2, w1, #0x1
 490:	csel	w1, w2, w1, eq  // eq = none
 494:	b	278 <gomp_team_barrier_wait_end>

0000000000000498 <gomp_team_barrier_wait_final>:
 498:	add	x1, x0, #0x4
 49c:	ldar	w1, [x1]
 4a0:	and	w1, w1, #0xfffffffc
 4a4:	add	x2, x0, #0x44
 4a8:	ldaxr	w3, [x2]
 4ac:	sub	w3, w3, #0x1
 4b0:	stlxr	w4, w3, [x2]
 4b4:	cbnz	w4, 4a8 <gomp_team_barrier_wait_final+0x10>
 4b8:	cbnz	w3, 4c8 <gomp_team_barrier_wait_final+0x30>
 4bc:	ldr	w2, [x0]
 4c0:	orr	w1, w1, #0x1
 4c4:	str	w2, [x0, #68]
 4c8:	b	278 <gomp_team_barrier_wait_end>
 4cc:	nop

00000000000004d0 <gomp_team_barrier_wait_cancel_end>:
 4d0:	stp	x29, x30, [sp, #-96]!
 4d4:	mov	x29, sp
 4d8:	stp	x19, x20, [sp, #16]
 4dc:	mov	x19, x0
 4e0:	stp	x23, x24, [sp, #48]
 4e4:	mov	w24, w1
 4e8:	tbnz	w24, #0, 638 <gomp_team_barrier_wait_cancel_end+0x168>
 4ec:	tbnz	w24, #2, 614 <gomp_team_barrier_wait_cancel_end+0x144>
 4f0:	adrp	x20, 0 <gomp_futex_wait>
 4f4:	add	x19, x19, #0x4
 4f8:	add	x20, x20, #0x0
 4fc:	stp	x21, x22, [sp, #32]
 500:	adrp	x21, 0 <gomp_futex_wake>
 504:	mov	w22, w24
 508:	add	x21, x21, #0x0
 50c:	stp	x25, x26, [sp, #64]
 510:	adrp	x26, 0 <gomp_managed_threads>
 514:	adrp	x25, 0 <gomp_available_cpus>
 518:	add	x26, x26, #0x0
 51c:	add	x25, x25, #0x0
 520:	str	x27, [sp, #80]
 524:	adrp	x27, 0 <gomp_spin_count_var>
 528:	add	x27, x27, #0x0
 52c:	adrp	x23, 0 <gomp_throttled_spin_count_var>
 530:	ldr	x3, [x26]
 534:	ldr	x2, [x25]
 538:	add	x0, x23, #0x0
 53c:	cmp	x3, x2
 540:	csel	x0, x27, x0, ls  // ls = plast
 544:	ldr	x2, [x0]
 548:	cbz	x2, 5ac <gomp_team_barrier_wait_cancel_end+0xdc>
 54c:	mov	x0, #0x0                   	// #0
 550:	b	560 <gomp_team_barrier_wait_cancel_end+0x90>
 554:	add	x0, x0, #0x1
 558:	cmp	x0, x2
 55c:	b.eq	5ac <gomp_team_barrier_wait_cancel_end+0xdc>  // b.none
 560:	ldr	w3, [x19]
 564:	cmp	w22, w3
 568:	b.eq	554 <gomp_team_barrier_wait_cancel_end+0x84>  // b.none
 56c:	ldar	w0, [x19]
 570:	tbnz	w0, #2, 608 <gomp_team_barrier_wait_cancel_end+0x138>
 574:	tbnz	w0, #0, 628 <gomp_team_barrier_wait_cancel_end+0x158>
 578:	and	w3, w0, #0x2
 57c:	add	w2, w24, #0x8
 580:	orr	w22, w22, w3
 584:	cmp	w2, w0
 588:	b.ne	530 <gomp_team_barrier_wait_cancel_end+0x60>  // b.any
 58c:	ldp	x21, x22, [sp, #32]
 590:	ldp	x25, x26, [sp, #64]
 594:	ldr	x27, [sp, #80]
 598:	mov	w0, #0x0                   	// #0
 59c:	ldp	x19, x20, [sp, #16]
 5a0:	ldp	x23, x24, [sp, #48]
 5a4:	ldp	x29, x30, [sp], #96
 5a8:	ret
 5ac:	ldr	w2, [x20]
 5b0:	mov	w3, w22
 5b4:	mov	x1, x19
 5b8:	mov	x4, #0x0                   	// #0
 5bc:	mov	x0, #0x62                  	// #98
 5c0:	bl	0 <syscall>
 5c4:	tbz	w0, #31, 56c <gomp_team_barrier_wait_cancel_end+0x9c>
 5c8:	bl	0 <__errno_location>
 5cc:	ldr	w0, [x0]
 5d0:	cmp	w0, #0x26
 5d4:	b.ne	56c <gomp_team_barrier_wait_cancel_end+0x9c>  // b.any
 5d8:	ldr	w5, [x21]
 5dc:	mov	w3, w22
 5e0:	ldr	w2, [x20]
 5e4:	mov	x1, x19
 5e8:	and	w5, w5, #0xffffff7f
 5ec:	mov	x4, #0x0                   	// #0
 5f0:	and	w2, w2, #0xffffff7f
 5f4:	mov	x0, #0x62                  	// #98
 5f8:	str	w2, [x20]
 5fc:	str	w5, [x21]
 600:	bl	0 <syscall>
 604:	b	56c <gomp_team_barrier_wait_cancel_end+0x9c>
 608:	ldp	x21, x22, [sp, #32]
 60c:	ldp	x25, x26, [sp, #64]
 610:	ldr	x27, [sp, #80]
 614:	mov	w0, #0x1                   	// #1
 618:	ldp	x19, x20, [sp, #16]
 61c:	ldp	x23, x24, [sp, #48]
 620:	ldp	x29, x30, [sp], #96
 624:	ret
 628:	mov	w0, w24
 62c:	bl	0 <gomp_barrier_handle_tasks>
 630:	ldar	w0, [x19]
 634:	b	578 <gomp_team_barrier_wait_cancel_end+0xa8>
 638:	adrp	x1, 0 <gomp_tls_data>
 63c:	ldr	x1, [x1]
 640:	mrs	x0, tpidr_el0
 644:	ldr	w2, [x19]
 648:	add	x0, x0, x1
 64c:	ldr	x0, [x0, #16]
 650:	ldr	w1, [x0, #1320]
 654:	str	w2, [x19, #64]
 658:	str	wzr, [x0, #1332]
 65c:	cbnz	w1, 6cc <gomp_team_barrier_wait_cancel_end+0x1fc>
 660:	add	x19, x19, #0x4
 664:	add	w24, w24, #0x7
 668:	stlr	w24, [x19]
 66c:	mov	x1, x19
 670:	adrp	x20, 0 <gomp_futex_wake>
 674:	mov	w3, #0x7fffffff            	// #2147483647
 678:	mov	x0, #0x62                  	// #98
 67c:	ldr	w2, [x20]
 680:	bl	0 <syscall>
 684:	tbz	w0, #31, 598 <gomp_team_barrier_wait_cancel_end+0xc8>
 688:	bl	0 <__errno_location>
 68c:	ldr	w0, [x0]
 690:	cmp	w0, #0x26
 694:	b.ne	598 <gomp_team_barrier_wait_cancel_end+0xc8>  // b.any
 698:	adrp	x5, 0 <gomp_futex_wait>
 69c:	ldr	w2, [x20]
 6a0:	mov	x1, x19
 6a4:	mov	w3, #0x7fffffff            	// #2147483647
 6a8:	ldr	w4, [x5]
 6ac:	and	w2, w2, #0xffffff7f
 6b0:	mov	x0, #0x62                  	// #98
 6b4:	str	w2, [x20]
 6b8:	and	w4, w4, #0xffffff7f
 6bc:	str	w4, [x5]
 6c0:	bl	0 <syscall>
 6c4:	mov	w0, #0x0                   	// #0
 6c8:	b	59c <gomp_team_barrier_wait_cancel_end+0xcc>
 6cc:	mov	w0, w24
 6d0:	and	w24, w24, #0xfffffffe
 6d4:	bl	0 <gomp_barrier_handle_tasks>
 6d8:	b	4ec <gomp_team_barrier_wait_cancel_end+0x1c>
 6dc:	nop

00000000000006e0 <gomp_team_barrier_wait_cancel>:
 6e0:	add	x1, x0, #0x4
 6e4:	ldar	w1, [x1]
 6e8:	and	w1, w1, #0xfffffffc
 6ec:	add	x2, x0, #0x40
 6f0:	ldaxr	w3, [x2]
 6f4:	sub	w3, w3, #0x1
 6f8:	stlxr	w4, w3, [x2]
 6fc:	cbnz	w4, 6f0 <gomp_team_barrier_wait_cancel+0x10>
 700:	cmp	w3, #0x0
 704:	orr	w2, w1, #0x1
 708:	csel	w1, w2, w1, eq  // eq = none
 70c:	b	4d0 <gomp_team_barrier_wait_cancel_end>

0000000000000710 <gomp_team_barrier_cancel>:
 710:	stp	x29, x30, [sp, #-48]!
 714:	mov	w2, #0x1                   	// #1
 718:	mov	x29, sp
 71c:	stp	x19, x20, [sp, #16]
 720:	mov	x19, x0
 724:	add	x0, x0, #0x500
 728:	ldaxr	w1, [x0]
 72c:	cbnz	w1, 738 <gomp_team_barrier_cancel+0x28>
 730:	stxr	w3, w2, [x0]
 734:	cbnz	w3, 728 <gomp_team_barrier_cancel+0x18>
 738:	cmp	w1, #0x0
 73c:	b.ne	7f4 <gomp_team_barrier_cancel+0xe4>  // b.any
 740:	ldr	w1, [x19, #132]
 744:	tbnz	w1, #2, 78c <gomp_team_barrier_cancel+0x7c>
 748:	orr	w1, w1, #0x4
 74c:	str	w1, [x19, #132]
 750:	ldxr	w1, [x0]
 754:	stlxr	w2, wzr, [x0]
 758:	cbnz	w2, 750 <gomp_team_barrier_cancel+0x40>
 75c:	tbnz	w1, #31, 7a8 <gomp_team_barrier_cancel+0x98>
 760:	adrp	x20, 0 <gomp_futex_wake>
 764:	add	x19, x19, #0x84
 768:	mov	x1, x19
 76c:	mov	w3, #0x7fffffff            	// #2147483647
 770:	ldr	w2, [x20]
 774:	mov	x0, #0x62                  	// #98
 778:	bl	0 <syscall>
 77c:	tbnz	w0, #31, 7b0 <gomp_team_barrier_cancel+0xa0>
 780:	ldp	x19, x20, [sp, #16]
 784:	ldp	x29, x30, [sp], #48
 788:	ret
 78c:	ldxr	w1, [x0]
 790:	stlxr	w2, wzr, [x0]
 794:	cbnz	w2, 78c <gomp_team_barrier_cancel+0x7c>
 798:	tbz	w1, #31, 780 <gomp_team_barrier_cancel+0x70>
 79c:	ldp	x19, x20, [sp, #16]
 7a0:	ldp	x29, x30, [sp], #48
 7a4:	b	0 <gomp_mutex_unlock_slow>
 7a8:	bl	0 <gomp_mutex_unlock_slow>
 7ac:	b	760 <gomp_team_barrier_cancel+0x50>
 7b0:	bl	0 <__errno_location>
 7b4:	ldr	w0, [x0]
 7b8:	cmp	w0, #0x26
 7bc:	b.ne	780 <gomp_team_barrier_cancel+0x70>  // b.any
 7c0:	adrp	x5, 0 <gomp_futex_wait>
 7c4:	ldr	w2, [x20]
 7c8:	mov	x1, x19
 7cc:	mov	w3, #0x7fffffff            	// #2147483647
 7d0:	ldr	w4, [x5]
 7d4:	and	w2, w2, #0xffffff7f
 7d8:	str	w2, [x20]
 7dc:	mov	x0, #0x62                  	// #98
 7e0:	and	w4, w4, #0xffffff7f
 7e4:	str	w4, [x5]
 7e8:	ldp	x19, x20, [sp, #16]
 7ec:	ldp	x29, x30, [sp], #48
 7f0:	b	0 <syscall>
 7f4:	str	x0, [sp, #40]
 7f8:	bl	0 <gomp_mutex_lock_slow>
 7fc:	ldr	x0, [sp, #40]
 800:	b	740 <gomp_team_barrier_cancel+0x30>

ptrlock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ptrlock_get_slow>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x1, #0x2                   	// #2
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x0
  14:	stp	x21, x22, [sp, #32]
  18:	stp	x23, x24, [sp, #48]
  1c:	stp	x25, x26, [sp, #64]
  20:	ldxr	x0, [x20]
  24:	cmp	x0, #0x1
  28:	b.ne	34 <gomp_ptrlock_get_slow+0x34>  // b.any
  2c:	stxr	w2, x1, [x20]
  30:	cbnz	w2, 20 <gomp_ptrlock_get_slow+0x20>
  34:	mov	x19, x20
  38:	adrp	x26, 0 <gomp_spin_count_var>
  3c:	adrp	x25, 0 <gomp_managed_threads>
  40:	adrp	x23, 0 <gomp_available_cpus>
  44:	adrp	x21, 0 <gomp_futex_wait>
  48:	adrp	x22, 0 <gomp_futex_wake>
  4c:	add	x26, x26, #0x0
  50:	add	x25, x25, #0x0
  54:	add	x23, x23, #0x0
  58:	add	x21, x21, #0x0
  5c:	add	x22, x22, #0x0
  60:	adrp	x24, 0 <gomp_throttled_spin_count_var>
  64:	nop
  68:	ldr	x1, [x25]
  6c:	ldr	x0, [x23]
  70:	add	x2, x24, #0x0
  74:	cmp	x1, x0
  78:	csel	x2, x26, x2, ls  // ls = plast
  7c:	ldr	x3, [x2]
  80:	cbz	x3, cc <gomp_ptrlock_get_slow+0xcc>
  84:	mov	x2, #0x0                   	// #0
  88:	b	98 <gomp_ptrlock_get_slow+0x98>
  8c:	add	x2, x2, #0x1
  90:	cmp	x2, x3
  94:	b.eq	cc <gomp_ptrlock_get_slow+0xcc>  // b.none
  98:	ldr	w0, [x19]
  9c:	cmp	w0, #0x2
  a0:	b.eq	8c <gomp_ptrlock_get_slow+0x8c>  // b.none
  a4:	ldr	w1, [x19]
  a8:	cmp	w1, #0x2
  ac:	b.eq	68 <gomp_ptrlock_get_slow+0x68>  // b.none
  b0:	ldar	x0, [x20]
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldp	x21, x22, [sp, #32]
  bc:	ldp	x23, x24, [sp, #48]
  c0:	ldp	x25, x26, [sp, #64]
  c4:	ldp	x29, x30, [sp], #80
  c8:	ret
  cc:	ldr	w2, [x21]
  d0:	mov	x1, x19
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	w3, #0x2                   	// #2
  dc:	mov	x0, #0x62                  	// #98
  e0:	bl	0 <syscall>
  e4:	tbz	w0, #31, a4 <gomp_ptrlock_get_slow+0xa4>
  e8:	bl	0 <__errno_location>
  ec:	ldr	w0, [x0]
  f0:	cmp	w0, #0x26
  f4:	b.ne	a4 <gomp_ptrlock_get_slow+0xa4>  // b.any
  f8:	ldr	w5, [x22]
  fc:	mov	x1, x19
 100:	ldr	w2, [x21]
 104:	mov	x4, #0x0                   	// #0
 108:	and	w5, w5, #0xffffff7f
 10c:	mov	w3, #0x2                   	// #2
 110:	and	w2, w2, #0xffffff7f
 114:	mov	x0, #0x62                  	// #98
 118:	str	w2, [x21]
 11c:	str	w5, [x22]
 120:	bl	0 <syscall>
 124:	b	a4 <gomp_ptrlock_get_slow+0xa4>

0000000000000128 <gomp_ptrlock_set_slow>:
 128:	stp	x29, x30, [sp, #-32]!
 12c:	mov	x29, sp
 130:	stp	x19, x20, [sp, #16]
 134:	mov	x19, x0
 138:	adrp	x20, 0 <gomp_futex_wake>
 13c:	mov	x1, x19
 140:	mov	w3, #0x7fffffff            	// #2147483647
 144:	mov	x0, #0x62                  	// #98
 148:	ldr	w2, [x20]
 14c:	bl	0 <syscall>
 150:	tbnz	w0, #31, 160 <gomp_ptrlock_set_slow+0x38>
 154:	ldp	x19, x20, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
 160:	bl	0 <__errno_location>
 164:	ldr	w0, [x0]
 168:	cmp	w0, #0x26
 16c:	b.ne	154 <gomp_ptrlock_set_slow+0x2c>  // b.any
 170:	ldr	w2, [x20]
 174:	mov	x1, x19
 178:	adrp	x5, 0 <gomp_futex_wait>
 17c:	mov	w3, #0x7fffffff            	// #2147483647
 180:	and	w2, w2, #0xffffff7f
 184:	str	w2, [x20]
 188:	ldp	x19, x20, [sp, #16]
 18c:	mov	x0, #0x62                  	// #98
 190:	ldp	x29, x30, [sp], #32
 194:	ldr	w4, [x5]
 198:	and	w4, w4, #0xffffff7f
 19c:	str	w4, [x5]
 1a0:	b	0 <syscall>

time.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_get_wtime>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w0, #0x1                   	// #1
   8:	mov	x29, sp
   c:	add	x1, sp, #0x10
  10:	bl	0 <clock_gettime>
  14:	tbnz	w0, #31, 40 <gomp_ialias_omp_get_wtime+0x40>
  18:	ldp	d2, d0, [sp, #16]
  1c:	mov	x0, #0xcd6500000000        	// #225833675390976
  20:	movk	x0, #0x41cd, lsl #48
  24:	fmov	d3, x0
  28:	ldp	x29, x30, [sp], #32
  2c:	scvtf	d1, d0
  30:	scvtf	d2, d2
  34:	fdiv	d0, d1, d3
  38:	fadd	d0, d0, d2
  3c:	ret
  40:	add	x1, sp, #0x10
  44:	mov	w0, #0x0                   	// #0
  48:	bl	0 <clock_gettime>
  4c:	b	18 <gomp_ialias_omp_get_wtime+0x18>

0000000000000050 <gomp_ialias_omp_get_wtick>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	w0, #0x1                   	// #1
  58:	mov	x29, sp
  5c:	add	x1, sp, #0x10
  60:	bl	0 <clock_getres>
  64:	tbnz	w0, #31, 90 <gomp_ialias_omp_get_wtick+0x40>
  68:	ldp	d2, d0, [sp, #16]
  6c:	mov	x0, #0xcd6500000000        	// #225833675390976
  70:	movk	x0, #0x41cd, lsl #48
  74:	fmov	d3, x0
  78:	ldp	x29, x30, [sp], #32
  7c:	scvtf	d1, d0
  80:	scvtf	d2, d2
  84:	fdiv	d0, d1, d3
  88:	fadd	d0, d0, d2
  8c:	ret
  90:	add	x1, sp, #0x10
  94:	mov	w0, #0x0                   	// #0
  98:	bl	0 <clock_getres>
  9c:	b	68 <gomp_ialias_omp_get_wtick+0x18>

fortran.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <omp_init_lock_>:
   0:	b	0 <gomp_ialias_omp_init_lock>
   4:	nop

0000000000000008 <omp_init_nest_lock_>:
   8:	stp	x29, x30, [sp, #-32]!
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	mov	x0, #0x10                  	// #16
  1c:	bl	0 <malloc>
  20:	str	x0, [x19]
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	b	0 <gomp_ialias_omp_init_nest_lock>

0000000000000030 <omp_destroy_lock_>:
  30:	b	0 <gomp_ialias_omp_destroy_lock>
  34:	nop

0000000000000038 <omp_destroy_nest_lock_>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	x19, [sp, #16]
  44:	mov	x19, x0
  48:	ldr	x0, [x0]
  4c:	bl	0 <gomp_ialias_omp_destroy_nest_lock>
  50:	ldr	x0, [x19]
  54:	bl	0 <free>
  58:	str	xzr, [x19]
  5c:	ldr	x19, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret

0000000000000068 <omp_set_lock_>:
  68:	b	0 <gomp_ialias_omp_set_lock>
  6c:	nop

0000000000000070 <omp_set_nest_lock_>:
  70:	ldr	x0, [x0]
  74:	b	0 <gomp_ialias_omp_set_nest_lock>

0000000000000078 <omp_unset_lock_>:
  78:	b	0 <gomp_ialias_omp_unset_lock>
  7c:	nop

0000000000000080 <omp_unset_nest_lock_>:
  80:	ldr	x0, [x0]
  84:	b	0 <gomp_ialias_omp_unset_nest_lock>

0000000000000088 <omp_test_lock_>:
  88:	b	0 <gomp_ialias_omp_test_lock>
  8c:	nop

0000000000000090 <omp_test_nest_lock_>:
  90:	ldr	x0, [x0]
  94:	b	0 <gomp_ialias_omp_test_nest_lock>

0000000000000098 <omp_set_dynamic_>:
  98:	ldr	w0, [x0]
  9c:	b	0 <gomp_ialias_omp_set_dynamic>

00000000000000a0 <omp_set_dynamic_8_>:
  a0:	ldr	x0, [x0]
  a4:	cmp	x0, #0x0
  a8:	cset	w0, ne  // ne = any
  ac:	b	0 <gomp_ialias_omp_set_dynamic>

00000000000000b0 <omp_set_nested_>:
  b0:	ldr	w0, [x0]
  b4:	b	0 <gomp_ialias_omp_set_nested>

00000000000000b8 <omp_set_nested_8_>:
  b8:	ldr	x0, [x0]
  bc:	cmp	x0, #0x0
  c0:	cset	w0, ne  // ne = any
  c4:	b	0 <gomp_ialias_omp_set_nested>

00000000000000c8 <omp_set_num_threads_>:
  c8:	ldr	w0, [x0]
  cc:	b	0 <gomp_ialias_omp_set_num_threads>

00000000000000d0 <omp_set_num_threads_8_>:
  d0:	mov	x1, x0
  d4:	mov	x2, #0xffffffff80000001    	// #-2147483647
  d8:	mov	w0, #0x80000000            	// #-2147483648
  dc:	ldr	x1, [x1]
  e0:	cmp	x1, x2
  e4:	b.lt	f4 <omp_set_num_threads_8_+0x24>  // b.tstop
  e8:	mov	x0, #0x7fffffff            	// #2147483647
  ec:	cmp	x1, x0
  f0:	csel	x0, x1, x0, le
  f4:	b	0 <gomp_ialias_omp_set_num_threads>

00000000000000f8 <omp_get_dynamic_>:
  f8:	b	0 <gomp_ialias_omp_get_dynamic>
  fc:	nop

0000000000000100 <omp_get_nested_>:
 100:	b	0 <gomp_ialias_omp_get_nested>
 104:	nop

0000000000000108 <omp_in_parallel_>:
 108:	b	0 <gomp_ialias_omp_in_parallel>
 10c:	nop

0000000000000110 <omp_get_max_threads_>:
 110:	b	0 <gomp_ialias_omp_get_max_threads>
 114:	nop

0000000000000118 <omp_get_num_procs_>:
 118:	b	0 <gomp_ialias_omp_get_num_procs>
 11c:	nop

0000000000000120 <omp_get_num_threads_>:
 120:	b	0 <gomp_ialias_omp_get_num_threads>
 124:	nop

0000000000000128 <omp_get_thread_num_>:
 128:	b	0 <gomp_ialias_omp_get_thread_num>
 12c:	nop

0000000000000130 <omp_get_wtick_>:
 130:	b	0 <gomp_ialias_omp_get_wtick>
 134:	nop

0000000000000138 <omp_get_wtime_>:
 138:	b	0 <gomp_ialias_omp_get_wtime>
 13c:	nop

0000000000000140 <omp_set_schedule_>:
 140:	ldr	w0, [x0]
 144:	ldr	w1, [x1]
 148:	b	0 <gomp_ialias_omp_set_schedule>
 14c:	nop

0000000000000150 <omp_set_schedule_8_>:
 150:	mov	x2, x1
 154:	mov	x3, #0xffffffff80000001    	// #-2147483647
 158:	ldr	w0, [x0]
 15c:	mov	w1, #0x80000000            	// #-2147483648
 160:	ldr	x2, [x2]
 164:	cmp	x2, x3
 168:	b.lt	178 <omp_set_schedule_8_+0x28>  // b.tstop
 16c:	mov	x1, #0x7fffffff            	// #2147483647
 170:	cmp	x2, x1
 174:	csel	x1, x2, x1, le
 178:	b	0 <gomp_ialias_omp_set_schedule>
 17c:	nop

0000000000000180 <omp_get_schedule_>:
 180:	stp	x29, x30, [sp, #-48]!
 184:	mov	x29, sp
 188:	stp	x19, x20, [sp, #16]
 18c:	mov	x20, x0
 190:	mov	x19, x1
 194:	add	x0, sp, #0x28
 198:	add	x1, sp, #0x2c
 19c:	bl	0 <gomp_ialias_omp_get_schedule>
 1a0:	ldp	w0, w1, [sp, #40]
 1a4:	and	w0, w0, #0x7fffffff
 1a8:	str	w0, [x20]
 1ac:	str	w1, [x19]
 1b0:	ldp	x19, x20, [sp, #16]
 1b4:	ldp	x29, x30, [sp], #48
 1b8:	ret
 1bc:	nop

00000000000001c0 <omp_get_schedule_8_>:
 1c0:	stp	x29, x30, [sp, #-48]!
 1c4:	mov	x29, sp
 1c8:	stp	x19, x20, [sp, #16]
 1cc:	mov	x20, x0
 1d0:	mov	x19, x1
 1d4:	add	x0, sp, #0x28
 1d8:	add	x1, sp, #0x2c
 1dc:	bl	0 <gomp_ialias_omp_get_schedule>
 1e0:	ldr	w0, [sp, #40]
 1e4:	ldrsw	x1, [sp, #44]
 1e8:	and	w0, w0, #0x7fffffff
 1ec:	str	w0, [x20]
 1f0:	str	x1, [x19]
 1f4:	ldp	x19, x20, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #48
 1fc:	ret

0000000000000200 <omp_get_thread_limit_>:
 200:	b	0 <gomp_ialias_omp_get_thread_limit>
 204:	nop

0000000000000208 <omp_set_max_active_levels_>:
 208:	ldr	w0, [x0]
 20c:	b	0 <gomp_ialias_omp_set_max_active_levels>

0000000000000210 <omp_set_max_active_levels_8_>:
 210:	mov	x1, x0
 214:	mov	x2, #0xffffffff80000001    	// #-2147483647
 218:	mov	w0, #0x80000000            	// #-2147483648
 21c:	ldr	x1, [x1]
 220:	cmp	x1, x2
 224:	b.lt	234 <omp_set_max_active_levels_8_+0x24>  // b.tstop
 228:	mov	x0, #0x7fffffff            	// #2147483647
 22c:	cmp	x1, x0
 230:	csel	x0, x1, x0, le
 234:	b	0 <gomp_ialias_omp_set_max_active_levels>

0000000000000238 <omp_get_max_active_levels_>:
 238:	b	0 <gomp_ialias_omp_get_max_active_levels>
 23c:	nop

0000000000000240 <omp_get_level_>:
 240:	b	0 <gomp_ialias_omp_get_level>
 244:	nop

0000000000000248 <omp_get_ancestor_thread_num_>:
 248:	ldr	w0, [x0]
 24c:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>

0000000000000250 <omp_get_ancestor_thread_num_8_>:
 250:	ldr	x0, [x0]
 254:	mov	x1, #0xffffffff80000001    	// #-2147483647
 258:	cmp	x0, x1
 25c:	b.lt	270 <omp_get_ancestor_thread_num_8_+0x20>  // b.tstop
 260:	mov	x1, #0x7fffffff            	// #2147483647
 264:	cmp	x0, x1
 268:	csel	x0, x0, x1, le
 26c:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>
 270:	mov	w0, #0x80000000            	// #-2147483648
 274:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>

0000000000000278 <omp_get_team_size_>:
 278:	ldr	w0, [x0]
 27c:	b	0 <gomp_ialias_omp_get_team_size>

0000000000000280 <omp_get_team_size_8_>:
 280:	ldr	x0, [x0]
 284:	mov	x1, #0xffffffff80000001    	// #-2147483647
 288:	cmp	x0, x1
 28c:	b.lt	2a0 <omp_get_team_size_8_+0x20>  // b.tstop
 290:	mov	x1, #0x7fffffff            	// #2147483647
 294:	cmp	x0, x1
 298:	csel	x0, x0, x1, le
 29c:	b	0 <gomp_ialias_omp_get_team_size>
 2a0:	mov	w0, #0x80000000            	// #-2147483648
 2a4:	b	0 <gomp_ialias_omp_get_team_size>

00000000000002a8 <omp_get_active_level_>:
 2a8:	b	0 <gomp_ialias_omp_get_active_level>
 2ac:	nop

00000000000002b0 <omp_in_final_>:
 2b0:	b	0 <gomp_ialias_omp_in_final>
 2b4:	nop

00000000000002b8 <omp_get_cancellation_>:
 2b8:	b	0 <gomp_ialias_omp_get_cancellation>
 2bc:	nop

00000000000002c0 <omp_get_proc_bind_>:
 2c0:	b	0 <gomp_ialias_omp_get_proc_bind>
 2c4:	nop

00000000000002c8 <omp_get_num_places_>:
 2c8:	b	0 <gomp_ialias_omp_get_num_places>
 2cc:	nop

00000000000002d0 <omp_get_place_num_procs_>:
 2d0:	ldr	w0, [x0]
 2d4:	b	0 <gomp_ialias_omp_get_place_num_procs>

00000000000002d8 <omp_get_place_num_procs_8_>:
 2d8:	ldr	x0, [x0]
 2dc:	mov	x1, #0xffffffff80000001    	// #-2147483647
 2e0:	cmp	x0, x1
 2e4:	b.lt	2f8 <omp_get_place_num_procs_8_+0x20>  // b.tstop
 2e8:	mov	x1, #0x7fffffff            	// #2147483647
 2ec:	cmp	x0, x1
 2f0:	csel	x0, x0, x1, le
 2f4:	b	0 <gomp_ialias_omp_get_place_num_procs>
 2f8:	mov	w0, #0x80000000            	// #-2147483648
 2fc:	b	0 <gomp_ialias_omp_get_place_num_procs>

0000000000000300 <omp_get_place_proc_ids_>:
 300:	ldr	w0, [x0]
 304:	b	0 <gomp_ialias_omp_get_place_proc_ids>

0000000000000308 <omp_get_place_proc_ids_8_>:
 308:	mov	x2, x0
 30c:	mov	x3, #0xffffffff80000001    	// #-2147483647
 310:	mov	w0, #0x80000000            	// #-2147483648
 314:	ldr	x2, [x2]
 318:	cmp	x2, x3
 31c:	b.lt	32c <omp_get_place_proc_ids_8_+0x24>  // b.tstop
 320:	mov	x0, #0x7fffffff            	// #2147483647
 324:	cmp	x2, x0
 328:	csel	x0, x2, x0, le
 32c:	b	0 <gomp_get_place_proc_ids_8>

0000000000000330 <omp_get_place_num_>:
 330:	b	0 <gomp_ialias_omp_get_place_num>
 334:	nop

0000000000000338 <omp_get_partition_num_places_>:
 338:	b	0 <gomp_ialias_omp_get_partition_num_places>
 33c:	nop

0000000000000340 <omp_get_partition_place_nums_>:
 340:	b	0 <gomp_ialias_omp_get_partition_place_nums>
 344:	nop

0000000000000348 <omp_get_partition_place_nums_8_>:
 348:	stp	x29, x30, [sp, #-48]!
 34c:	adrp	x1, 0 <gomp_places_list>
 350:	mov	x29, sp
 354:	stp	x19, x20, [sp, #16]
 358:	mov	x19, x0
 35c:	ldr	x0, [x1]
 360:	cbz	x0, 3b8 <omp_get_partition_place_nums_8_+0x70>
 364:	str	x21, [sp, #32]
 368:	mrs	x20, tpidr_el0
 36c:	adrp	x21, 0 <gomp_tls_data>
 370:	ldr	x21, [x21]
 374:	add	x0, x20, x21
 378:	ldr	w0, [x0, #92]
 37c:	cbz	w0, 3c4 <omp_get_partition_place_nums_8_+0x7c>
 380:	add	x20, x20, x21
 384:	ldr	w1, [x20, #56]
 388:	cbz	w1, 3b4 <omp_get_partition_place_nums_8_+0x6c>
 38c:	ldr	w2, [x20, #52]
 390:	sub	w3, w1, #0x1
 394:	add	x1, x2, #0x1
 398:	sub	x4, x19, x2, lsl #3
 39c:	add	x0, x3, x1
 3a0:	str	x2, [x4, x2, lsl #3]
 3a4:	cmp	x1, x0
 3a8:	mov	x2, x1
 3ac:	add	x1, x1, #0x1
 3b0:	b.ne	3a0 <omp_get_partition_place_nums_8_+0x58>  // b.any
 3b4:	ldr	x21, [sp, #32]
 3b8:	ldp	x19, x20, [sp, #16]
 3bc:	ldp	x29, x30, [sp], #48
 3c0:	ret
 3c4:	bl	0 <gomp_init_affinity>
 3c8:	b	380 <omp_get_partition_place_nums_8_+0x38>
 3cc:	nop

00000000000003d0 <omp_set_default_device_>:
 3d0:	ldr	w0, [x0]
 3d4:	b	0 <gomp_ialias_omp_set_default_device>

00000000000003d8 <omp_set_default_device_8_>:
 3d8:	mov	x1, x0
 3dc:	mov	x2, #0xffffffff80000001    	// #-2147483647
 3e0:	mov	w0, #0x80000000            	// #-2147483648
 3e4:	ldr	x1, [x1]
 3e8:	cmp	x1, x2
 3ec:	b.lt	3fc <omp_set_default_device_8_+0x24>  // b.tstop
 3f0:	mov	x0, #0x7fffffff            	// #2147483647
 3f4:	cmp	x1, x0
 3f8:	csel	x0, x1, x0, le
 3fc:	b	0 <gomp_ialias_omp_set_default_device>

0000000000000400 <omp_get_default_device_>:
 400:	b	0 <gomp_ialias_omp_get_default_device>
 404:	nop

0000000000000408 <omp_get_num_devices_>:
 408:	b	0 <gomp_ialias_omp_get_num_devices>
 40c:	nop

0000000000000410 <omp_get_num_teams_>:
 410:	b	0 <gomp_ialias_omp_get_num_teams>
 414:	nop

0000000000000418 <omp_get_team_num_>:
 418:	b	0 <gomp_ialias_omp_get_team_num>
 41c:	nop

0000000000000420 <omp_is_initial_device_>:
 420:	b	0 <gomp_ialias_omp_is_initial_device>
 424:	nop

0000000000000428 <omp_get_initial_device_>:
 428:	b	0 <gomp_ialias_omp_get_initial_device>
 42c:	nop

0000000000000430 <omp_get_max_task_priority_>:
 430:	b	0 <gomp_ialias_omp_get_max_task_priority>
 434:	nop

0000000000000438 <omp_set_affinity_format_>:
 438:	b	0 <gomp_set_affinity_format>
 43c:	nop

0000000000000440 <omp_get_affinity_format_>:
 440:	stp	x29, x30, [sp, #-48]!
 444:	adrp	x2, 0 <gomp_affinity_format_var>
 448:	mov	x29, sp
 44c:	stp	x21, x22, [sp, #32]
 450:	mov	x21, x0
 454:	ldr	x22, [x2]
 458:	stp	x19, x20, [sp, #16]
 45c:	mov	x20, x1
 460:	mov	x0, x22
 464:	bl	0 <strlen>
 468:	mov	x19, x0
 46c:	cbz	x20, 498 <omp_get_affinity_format_+0x58>
 470:	cmp	x0, x20
 474:	b.cs	4ac <omp_get_affinity_format_+0x6c>  // b.hs, b.nlast
 478:	mov	x2, x0
 47c:	mov	x1, x22
 480:	mov	x0, x21
 484:	bl	0 <memcpy>
 488:	sub	x2, x20, x19
 48c:	add	x0, x21, x19
 490:	mov	w1, #0x20                  	// #32
 494:	bl	0 <memset>
 498:	mov	w0, w19
 49c:	ldp	x19, x20, [sp, #16]
 4a0:	ldp	x21, x22, [sp, #32]
 4a4:	ldp	x29, x30, [sp], #48
 4a8:	ret
 4ac:	mov	x2, x20
 4b0:	mov	x1, x22
 4b4:	mov	x0, x21
 4b8:	bl	0 <memcpy>
 4bc:	mov	w0, w19
 4c0:	ldp	x19, x20, [sp, #16]
 4c4:	ldp	x21, x22, [sp, #32]
 4c8:	ldp	x29, x30, [sp], #48
 4cc:	ret

00000000000004d0 <omp_display_affinity_>:
 4d0:	sub	sp, sp, #0x360
 4d4:	stp	x29, x30, [sp]
 4d8:	mov	x29, sp
 4dc:	stp	x19, x20, [sp, #16]
 4e0:	mov	x19, x1
 4e4:	stp	x21, x22, [sp, #32]
 4e8:	mov	x22, x0
 4ec:	stp	x23, x24, [sp, #48]
 4f0:	stp	x25, x26, [sp, #64]
 4f4:	stp	x27, x28, [sp, #80]
 4f8:	bl	0 <pthread_self>
 4fc:	mov	x20, x0
 500:	cbz	x19, 5a4 <omp_display_affinity_+0xd4>
 504:	add	x23, sp, #0x60
 508:	cmp	x19, #0xff
 50c:	mov	w25, #0x0                   	// #0
 510:	b.hi	688 <omp_display_affinity_+0x1b8>  // b.pmore
 514:	adrp	x21, 0 <gomp_tls_data>
 518:	ldr	x21, [x21]
 51c:	mov	x1, x22
 520:	mov	x2, x19
 524:	mrs	x24, tpidr_el0
 528:	mov	x0, x23
 52c:	bl	0 <memcpy>
 530:	add	x1, x24, x21
 534:	strb	wzr, [x23, x19]
 538:	add	x22, sp, #0x160
 53c:	add	x4, x1, #0x10
 540:	mov	x0, x22
 544:	mov	x3, x20
 548:	ldr	w5, [x1, #92]
 54c:	mov	x2, x23
 550:	mov	x1, #0x200                 	// #512
 554:	bl	0 <gomp_display_affinity>
 558:	mov	x19, x0
 55c:	cmp	x0, #0x1ff
 560:	b.hi	670 <omp_display_affinity_+0x1a0>  // b.pmore
 564:	mov	w2, #0xa                   	// #10
 568:	add	x1, x0, #0x1
 56c:	mov	x0, x22
 570:	strb	w2, [x22, x19]
 574:	bl	0 <gomp_print_string>
 578:	cbz	w25, 584 <omp_display_affinity_+0xb4>
 57c:	mov	x0, x23
 580:	bl	0 <free>
 584:	ldp	x29, x30, [sp]
 588:	ldp	x19, x20, [sp, #16]
 58c:	ldp	x21, x22, [sp, #32]
 590:	ldp	x23, x24, [sp, #48]
 594:	ldp	x25, x26, [sp, #64]
 598:	ldp	x27, x28, [sp, #80]
 59c:	add	sp, sp, #0x360
 5a0:	ret
 5a4:	adrp	x21, 0 <gomp_tls_data>
 5a8:	ldr	x21, [x21]
 5ac:	mrs	x24, tpidr_el0
 5b0:	adrp	x27, 0 <gomp_affinity_format_var>
 5b4:	add	x22, sp, #0x160
 5b8:	add	x1, x24, x21
 5bc:	mov	x0, x22
 5c0:	ldr	x2, [x27]
 5c4:	add	x4, x1, #0x10
 5c8:	ldr	w5, [x1, #92]
 5cc:	mov	x3, x20
 5d0:	mov	x1, #0x200                 	// #512
 5d4:	bl	0 <gomp_display_affinity>
 5d8:	mov	x19, x0
 5dc:	cmp	x0, #0x1ff
 5e0:	b.ls	63c <omp_display_affinity_+0x16c>  // b.plast
 5e4:	add	x28, x19, #0x1
 5e8:	mov	w25, #0x0                   	// #0
 5ec:	mov	x0, x28
 5f0:	bl	0 <gomp_malloc>
 5f4:	ldr	x2, [x27]
 5f8:	mov	x26, x0
 5fc:	mov	x23, #0x0                   	// #0
 600:	add	x21, x24, x21
 604:	mov	x3, x20
 608:	add	x4, x21, #0x10
 60c:	mov	x0, x22
 610:	mov	x1, #0x200                 	// #512
 614:	ldr	w5, [x21, #92]
 618:	bl	0 <gomp_display_affinity>
 61c:	mov	x1, x28
 620:	mov	w0, #0xa                   	// #10
 624:	strb	w0, [x26, x19]
 628:	mov	x0, x26
 62c:	bl	0 <gomp_print_string>
 630:	mov	x0, x26
 634:	bl	0 <free>
 638:	b	578 <omp_display_affinity_+0xa8>
 63c:	mov	w2, #0xa                   	// #10
 640:	add	x1, x0, #0x1
 644:	mov	x0, x22
 648:	strb	w2, [x22, x19]
 64c:	bl	0 <gomp_print_string>
 650:	ldp	x29, x30, [sp]
 654:	ldp	x19, x20, [sp, #16]
 658:	ldp	x21, x22, [sp, #32]
 65c:	ldp	x23, x24, [sp, #48]
 660:	ldp	x25, x26, [sp, #64]
 664:	ldp	x27, x28, [sp, #80]
 668:	add	sp, sp, #0x360
 66c:	ret
 670:	add	x28, x0, #0x1
 674:	mov	x0, x28
 678:	bl	0 <gomp_malloc>
 67c:	mov	x2, x23
 680:	mov	x26, x0
 684:	b	600 <omp_display_affinity_+0x130>
 688:	add	x0, x19, #0x1
 68c:	bl	0 <gomp_malloc>
 690:	cmp	x0, #0x0
 694:	mov	x23, x0
 698:	cset	w25, ne  // ne = any
 69c:	b	514 <omp_display_affinity_+0x44>

00000000000006a0 <omp_capture_affinity_>:
 6a0:	stp	x29, x30, [sp, #-320]!
 6a4:	mov	x29, sp
 6a8:	stp	x19, x20, [sp, #16]
 6ac:	mov	x20, x2
 6b0:	mov	x19, x3
 6b4:	stp	x21, x22, [sp, #32]
 6b8:	mov	x21, x0
 6bc:	str	x23, [sp, #48]
 6c0:	mov	x23, x1
 6c4:	bl	0 <pthread_self>
 6c8:	mov	x22, x0
 6cc:	cbz	x19, 754 <omp_capture_affinity_+0xb4>
 6d0:	cmp	x19, #0xff
 6d4:	b.hi	7a8 <omp_capture_affinity_+0x108>  // b.pmore
 6d8:	add	x6, sp, #0x40
 6dc:	mov	x2, x19
 6e0:	mov	x1, x23
 6e4:	mov	x0, x6
 6e8:	bl	0 <memcpy>
 6ec:	mov	x6, x0
 6f0:	adrp	x0, 0 <gomp_tls_data>
 6f4:	ldr	x0, [x0]
 6f8:	mrs	x5, tpidr_el0
 6fc:	mov	x2, x6
 700:	mov	x3, x22
 704:	add	x5, x5, x0
 708:	strb	wzr, [x6, x19]
 70c:	add	x4, x5, #0x10
 710:	mov	x1, x20
 714:	mov	x0, x21
 718:	ldr	w5, [x5, #92]
 71c:	bl	0 <gomp_display_affinity>
 720:	mov	x19, x0
 724:	cmp	x20, x19
 728:	b.ls	790 <omp_capture_affinity_+0xf0>  // b.plast
 72c:	sub	x2, x20, x19
 730:	add	x0, x21, x19
 734:	mov	w1, #0x20                  	// #32
 738:	bl	0 <memset>
 73c:	mov	w0, w19
 740:	ldp	x19, x20, [sp, #16]
 744:	ldp	x21, x22, [sp, #32]
 748:	ldr	x23, [sp, #48]
 74c:	ldp	x29, x30, [sp], #320
 750:	ret
 754:	adrp	x0, 0 <gomp_tls_data>
 758:	ldr	x0, [x0]
 75c:	mrs	x1, tpidr_el0
 760:	adrp	x2, 0 <gomp_affinity_format_var>
 764:	mov	x3, x22
 768:	add	x0, x1, x0
 76c:	mov	x1, x20
 770:	ldr	x2, [x2]
 774:	add	x4, x0, #0x10
 778:	ldr	w5, [x0, #92]
 77c:	mov	x0, x21
 780:	bl	0 <gomp_display_affinity>
 784:	mov	x19, x0
 788:	cmp	x20, x19
 78c:	b.hi	72c <omp_capture_affinity_+0x8c>  // b.pmore
 790:	mov	w0, w19
 794:	ldp	x19, x20, [sp, #16]
 798:	ldp	x21, x22, [sp, #32]
 79c:	ldr	x23, [sp, #48]
 7a0:	ldp	x29, x30, [sp], #320
 7a4:	ret
 7a8:	add	x0, x19, #0x1
 7ac:	bl	0 <gomp_malloc>
 7b0:	mov	x1, x23
 7b4:	mov	x2, x19
 7b8:	mov	x23, x0
 7bc:	bl	0 <memcpy>
 7c0:	adrp	x5, 0 <gomp_tls_data>
 7c4:	ldr	x5, [x5]
 7c8:	mrs	x0, tpidr_el0
 7cc:	mov	x3, x22
 7d0:	mov	x2, x23
 7d4:	add	x5, x0, x5
 7d8:	strb	wzr, [x23, x19]
 7dc:	add	x4, x5, #0x10
 7e0:	mov	x1, x20
 7e4:	mov	x0, x21
 7e8:	ldr	w5, [x5, #92]
 7ec:	bl	0 <gomp_display_affinity>
 7f0:	mov	x19, x0
 7f4:	cbz	x23, 788 <omp_capture_affinity_+0xe8>
 7f8:	mov	x0, x23
 7fc:	bl	0 <free>
 800:	b	788 <omp_capture_affinity_+0xe8>
 804:	nop

0000000000000808 <omp_pause_resource_>:
 808:	ldr	w0, [x0]
 80c:	ldr	w1, [x1]
 810:	b	0 <gomp_ialias_omp_pause_resource>
 814:	nop

0000000000000818 <omp_pause_resource_all_>:
 818:	ldr	w0, [x0]
 81c:	b	0 <gomp_ialias_omp_pause_resource_all>

affinity.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_init_thread_affinity>:
   0:	adrp	x2, 0 <gomp_places_list>
   4:	mov	w3, w1
   8:	adrp	x1, 0 <gomp_cpuset_size>
   c:	ldr	x2, [x2]
  10:	ldr	x1, [x1]
  14:	ldr	x2, [x2, w3, uxtw #3]
  18:	b	0 <pthread_attr_setaffinity_np>
  1c:	nop

0000000000000020 <gomp_affinity_alloc>:
  20:	stp	x29, x30, [sp, #-48]!
  24:	adrp	x2, 0 <gomp_cpusetp>
  28:	mov	x29, sp
  2c:	stp	x19, x20, [sp, #16]
  30:	ldr	x20, [x2]
  34:	stp	x21, x22, [sp, #32]
  38:	and	w22, w1, #0xff
  3c:	cbz	x20, 94 <gomp_affinity_alloc+0x74>
  40:	mov	x21, x0
  44:	adrp	x0, 0 <gomp_cpuset_size>
  48:	ldr	x19, [x0]
  4c:	add	x0, x19, #0x8
  50:	mul	x0, x0, x21
  54:	bl	0 <malloc>
  58:	mov	x20, x0
  5c:	cbz	x0, c0 <gomp_affinity_alloc+0xa0>
  60:	add	x1, x0, x21, lsl #3
  64:	cbz	x21, 80 <gomp_affinity_alloc+0x60>
  68:	mov	x2, x0
  6c:	mov	x0, x1
  70:	str	x1, [x2], #8
  74:	add	x1, x1, x19
  78:	cmp	x2, x0
  7c:	b.ne	70 <gomp_affinity_alloc+0x50>  // b.any
  80:	mov	x0, x20
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x21, x22, [sp, #32]
  8c:	ldp	x29, x30, [sp], #48
  90:	ret
  94:	cbz	w22, b0 <gomp_affinity_alloc+0x90>
  98:	mov	x20, #0x0                   	// #0
  9c:	mov	x0, x20
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldp	x21, x22, [sp, #32]
  a8:	ldp	x29, x30, [sp], #48
  ac:	ret
  b0:	adrp	x0, 0 <gomp_init_thread_affinity>
  b4:	add	x0, x0, #0x0
  b8:	bl	0 <gomp_error>
  bc:	b	80 <gomp_affinity_alloc+0x60>
  c0:	cbnz	w22, 98 <gomp_affinity_alloc+0x78>
  c4:	adrp	x0, 0 <gomp_init_thread_affinity>
  c8:	add	x0, x0, #0x0
  cc:	bl	0 <gomp_error>
  d0:	b	80 <gomp_affinity_alloc+0x60>
  d4:	nop

00000000000000d8 <gomp_affinity_init_place>:
  d8:	adrp	x2, 0 <gomp_cpuset_size>
  dc:	mov	w1, #0x0                   	// #0
  e0:	ldr	x2, [x2]
  e4:	b	0 <memset>

00000000000000e8 <gomp_affinity_add_cpus>:
  e8:	stp	x29, x30, [sp, #-32]!
  ec:	adrp	x8, 0 <gomp_cpuset_size>
  f0:	mov	x9, #0x1                   	// #1
  f4:	mov	x29, sp
  f8:	ldr	x5, [x8]
  fc:	str	x19, [sp, #16]
 100:	and	w19, w4, #0xff
 104:	lsl	x10, x5, #3
 108:	cmp	x1, x5, lsl #3
 10c:	b.cc	12c <gomp_affinity_add_cpus+0x44>  // b.lo, b.ul, b.last
 110:	b	184 <gomp_affinity_add_cpus+0x9c>
 114:	b.eq	11c <gomp_affinity_add_cpus+0x34>  // b.none
 118:	cbnz	x6, 16c <gomp_affinity_add_cpus+0x84>
 11c:	cmp	x10, x5
 120:	mov	x1, x5
 124:	b.ls	188 <gomp_affinity_add_cpus+0xa0>  // b.plast
 128:	ldr	x5, [x8]
 12c:	lsr	x6, x1, #6
 130:	cmp	x5, x1, lsr #3
 134:	lsl	x7, x9, x1
 138:	b.ls	148 <gomp_affinity_add_cpus+0x60>  // b.plast
 13c:	ldr	x5, [x0, x6, lsl #3]
 140:	orr	x5, x5, x7
 144:	str	x5, [x0, x6, lsl #3]
 148:	subs	x2, x2, #0x1
 14c:	b.eq	1ac <gomp_affinity_add_cpus+0xc4>  // b.none
 150:	adds	x5, x3, x1
 154:	cset	x6, cs  // cs = hs, nlast
 158:	mov	x7, x5
 15c:	cmp	x3, #0x0
 160:	b.ge	114 <gomp_affinity_add_cpus+0x2c>  // b.tcont
 164:	cmp	x1, x5
 168:	b.cs	11c <gomp_affinity_add_cpus+0x34>  // b.hs, b.nlast
 16c:	cbz	w19, 1c0 <gomp_affinity_add_cpus+0xd8>
 170:	mov	w19, #0x0                   	// #0
 174:	mov	w0, w19
 178:	ldr	x19, [sp, #16]
 17c:	ldp	x29, x30, [sp], #32
 180:	ret
 184:	mov	x7, x1
 188:	cbnz	w19, 170 <gomp_affinity_add_cpus+0x88>
 18c:	mov	x1, x7
 190:	adrp	x0, 0 <gomp_init_thread_affinity>
 194:	add	x0, x0, #0x0
 198:	bl	0 <gomp_error>
 19c:	mov	w0, w19
 1a0:	ldr	x19, [sp, #16]
 1a4:	ldp	x29, x30, [sp], #32
 1a8:	ret
 1ac:	mov	w19, #0x1                   	// #1
 1b0:	mov	w0, w19
 1b4:	ldr	x19, [sp, #16]
 1b8:	ldp	x29, x30, [sp], #32
 1bc:	ret
 1c0:	mov	x2, x3
 1c4:	adrp	x0, 0 <gomp_init_thread_affinity>
 1c8:	add	x0, x0, #0x0
 1cc:	bl	0 <gomp_error>
 1d0:	mov	w0, w19
 1d4:	ldr	x19, [sp, #16]
 1d8:	ldp	x29, x30, [sp], #32
 1dc:	ret

00000000000001e0 <gomp_affinity_init_level_1>:
 1e0:	stp	x29, x30, [sp, #-256]!
 1e4:	mov	x29, sp
 1e8:	stp	x23, x24, [sp, #48]
 1ec:	adrp	x24, 0 <gomp_cpuset_size>
 1f0:	ldr	x6, [x24]
 1f4:	stp	x21, x22, [sp, #32]
 1f8:	mov	w22, w0
 1fc:	and	w0, w5, #0xff
 200:	str	x4, [sp, #104]
 204:	str	w0, [sp, #176]
 208:	cmp	xzr, x6, lsl #3
 20c:	stp	xzr, xzr, [sp, #232]
 210:	b.eq	594 <gomp_affinity_init_level_1+0x3b4>  // b.none
 214:	mov	w21, w1
 218:	cmp	w1, #0x3
 21c:	adrp	x0, 0 <gomp_init_thread_affinity>
 220:	adrp	x1, 0 <gomp_init_thread_affinity>
 224:	add	x0, x0, #0x0
 228:	add	x1, x1, #0x0
 22c:	csel	x0, x1, x0, eq  // eq = none
 230:	adrp	x10, 0 <gomp_places_list_len>
 234:	mov	w23, w22
 238:	stp	x19, x20, [sp, #16]
 23c:	mov	x19, x2
 240:	stp	x25, x26, [sp, #64]
 244:	lsl	x26, x6, #3
 248:	mov	x25, x3
 24c:	stp	x27, x28, [sp, #80]
 250:	add	x27, x10, #0x0
 254:	adrp	x1, 0 <gomp_init_thread_affinity>
 258:	mov	x28, #0x0                   	// #0
 25c:	add	x1, x1, #0x0
 260:	stp	x0, x1, [sp, #144]
 264:	adrp	x0, 0 <gomp_init_thread_affinity>
 268:	add	x0, x0, #0x0
 26c:	str	x0, [sp, #160]
 270:	str	w21, [sp, #180]
 274:	ldr	x0, [x27]
 278:	cmp	x0, x19
 27c:	b.cs	30c <gomp_affinity_init_level_1+0x12c>  // b.hs, b.nlast
 280:	ldr	x0, [x24]
 284:	lsr	x21, x28, #3
 288:	add	x20, x24, #0x0
 28c:	cmp	x0, x28, lsr #3
 290:	b.ls	300 <gomp_affinity_init_level_1+0x120>  // b.plast
 294:	lsr	x22, x28, #6
 298:	and	w0, w28, #0x3f
 29c:	mov	w1, w0
 2a0:	str	w1, [sp, #124]
 2a4:	ldr	x0, [x25, x22, lsl #3]
 2a8:	lsr	x0, x0, x1
 2ac:	tbz	w0, #0, 300 <gomp_affinity_init_level_1+0x120>
 2b0:	ldp	x3, x1, [sp, #144]
 2b4:	mov	x2, x28
 2b8:	ldr	x0, [sp, #104]
 2bc:	add	x0, x0, #0x1b
 2c0:	bl	0 <sprintf>
 2c4:	ldr	x0, [sp, #104]
 2c8:	ldr	x1, [sp, #160]
 2cc:	bl	0 <fopen>
 2d0:	str	x0, [sp, #112]
 2d4:	cbz	x0, 330 <gomp_affinity_init_level_1+0x150>
 2d8:	ldr	x3, [sp, #112]
 2dc:	add	x1, sp, #0xf0
 2e0:	add	x0, sp, #0xe8
 2e4:	mov	w2, #0xa                   	// #10
 2e8:	bl	0 <__getdelim>
 2ec:	cmp	x0, #0x0
 2f0:	b.gt	358 <gomp_affinity_init_level_1+0x178>
 2f4:	ldr	x0, [sp, #112]
 2f8:	bl	0 <fclose>
 2fc:	nop
 300:	add	x28, x28, #0x1
 304:	cmp	x26, x28
 308:	b.ne	274 <gomp_affinity_init_level_1+0x94>  // b.any
 30c:	ldr	x0, [sp, #232]
 310:	ldp	x19, x20, [sp, #16]
 314:	ldp	x25, x26, [sp, #64]
 318:	ldp	x27, x28, [sp, #80]
 31c:	bl	0 <free>
 320:	ldp	x21, x22, [sp, #32]
 324:	ldp	x23, x24, [sp, #48]
 328:	ldp	x29, x30, [sp], #256
 32c:	ret
 330:	ldr	x0, [x24]
 334:	cmp	x21, x0
 338:	b.cs	300 <gomp_affinity_init_level_1+0x120>  // b.hs, b.nlast
 33c:	ldrb	w2, [sp, #124]
 340:	mov	x0, #0x1                   	// #1
 344:	ldr	x1, [x25, x22, lsl #3]
 348:	lsl	x0, x0, x2
 34c:	bic	x0, x1, x0
 350:	str	x0, [x25, x22, lsl #3]
 354:	b	300 <gomp_affinity_init_level_1+0x120>
 358:	adrp	x0, 0 <gomp_places_list>
 35c:	ldr	w1, [sp, #180]
 360:	ldr	x2, [x27]
 364:	cmp	w1, w23
 368:	ldr	x0, [x0]
 36c:	ldr	x1, [sp, #232]
 370:	str	x1, [sp, #248]
 374:	ldr	x0, [x0, x2, lsl #3]
 378:	str	x0, [sp, #168]
 37c:	b.eq	5ac <gomp_affinity_init_level_1+0x3cc>  // b.none
 380:	ldrb	w0, [x1]
 384:	cmp	w0, #0x0
 388:	ccmp	w0, #0xa, #0x4, ne  // ne = any
 38c:	b.eq	5f8 <gomp_affinity_init_level_1+0x418>  // b.none
 390:	str	x1, [sp, #128]
 394:	bl	0 <__errno_location>
 398:	ldr	x1, [sp, #128]
 39c:	stp	x19, x21, [sp, #184]
 3a0:	ldr	w21, [sp, #180]
 3a4:	stp	x26, x28, [sp, #200]
 3a8:	mov	x26, x0
 3ac:	mov	x0, x1
 3b0:	str	x22, [sp, #216]
 3b4:	nop
 3b8:	str	wzr, [x26]
 3bc:	add	x1, sp, #0xf8
 3c0:	mov	w2, #0xa                   	// #10
 3c4:	bl	0 <strtoul>
 3c8:	mov	x22, x0
 3cc:	ldr	w1, [x26]
 3d0:	cbnz	w1, 4d8 <gomp_affinity_init_level_1+0x2f8>
 3d4:	mov	x28, x0
 3d8:	ldr	x0, [sp, #248]
 3dc:	ldrb	w1, [x0]
 3e0:	cmp	w1, #0x2d
 3e4:	b.eq	56c <gomp_affinity_init_level_1+0x38c>  // b.none
 3e8:	mov	x7, x25
 3ec:	mov	w25, w23
 3f0:	str	x26, [sp, #136]
 3f4:	mov	w26, w21
 3f8:	ldr	x2, [x20]
 3fc:	lsr	x23, x22, #3
 400:	cmp	x2, x22, lsr #3
 404:	b.ls	490 <gomp_affinity_init_level_1+0x2b0>  // b.plast
 408:	lsr	x21, x22, #6
 40c:	and	w19, w22, #0x3f
 410:	ldr	x0, [x7, x21, lsl #3]
 414:	lsr	x0, x0, x19
 418:	tbz	w0, #0, 490 <gomp_affinity_init_level_1+0x2b0>
 41c:	cmp	w26, #0x3
 420:	ccmp	w26, w25, #0x4, eq  // eq = none
 424:	b.gt	518 <gomp_affinity_init_level_1+0x338>
 428:	cmp	w25, #0x1
 42c:	b.eq	540 <gomp_affinity_init_level_1+0x360>  // b.none
 430:	ldr	x0, [sp, #168]
 434:	mov	x1, x22
 438:	mov	w4, #0x1                   	// #1
 43c:	mov	x3, #0x0                   	// #0
 440:	mov	x2, #0x1                   	// #1
 444:	str	x7, [sp, #128]
 448:	bl	e8 <gomp_affinity_add_cpus>
 44c:	tst	w0, #0xff
 450:	ldr	x7, [sp, #128]
 454:	b.eq	490 <gomp_affinity_init_level_1+0x2b0>  // b.none
 458:	ldr	x0, [x20]
 45c:	cmp	x23, x0
 460:	b.cs	478 <gomp_affinity_init_level_1+0x298>  // b.hs, b.nlast
 464:	ldr	x0, [x7, x21, lsl #3]
 468:	mov	x1, #0x1                   	// #1
 46c:	lsl	x19, x1, x19
 470:	bic	x19, x0, x19
 474:	str	x19, [x7, x21, lsl #3]
 478:	cmp	w25, #0x1
 47c:	b.ne	490 <gomp_affinity_init_level_1+0x2b0>  // b.any
 480:	ldr	x0, [x27]
 484:	add	x0, x0, #0x1
 488:	str	x0, [x27]
 48c:	nop
 490:	add	x22, x22, #0x1
 494:	cmp	x28, x22
 498:	b.cs	3f8 <gomp_affinity_init_level_1+0x218>  // b.hs, b.nlast
 49c:	ldr	x0, [sp, #248]
 4a0:	mov	w23, w25
 4a4:	mov	w21, w26
 4a8:	mov	x25, x7
 4ac:	ldr	x26, [sp, #136]
 4b0:	ldrb	w2, [x0]
 4b4:	cmp	w2, #0x2c
 4b8:	b.ne	4cc <gomp_affinity_init_level_1+0x2ec>  // b.any
 4bc:	add	x1, x0, #0x1
 4c0:	str	x1, [sp, #248]
 4c4:	ldrb	w2, [x0, #1]
 4c8:	mov	x0, x1
 4cc:	cmp	w2, #0x0
 4d0:	ccmp	w2, #0xa, #0x4, ne  // ne = any
 4d4:	b.ne	3b8 <gomp_affinity_init_level_1+0x1d8>  // b.any
 4d8:	ldr	w0, [sp, #180]
 4dc:	ldp	x19, x21, [sp, #184]
 4e0:	cmp	w0, w23
 4e4:	ldr	x0, [x24]
 4e8:	ldp	x26, x28, [sp, #200]
 4ec:	ldr	x22, [sp, #216]
 4f0:	b.eq	5d0 <gomp_affinity_init_level_1+0x3f0>  // b.none
 4f4:	cmp	x21, x0
 4f8:	b.cs	2f4 <gomp_affinity_init_level_1+0x114>  // b.hs, b.nlast
 4fc:	ldr	x1, [x25, x22, lsl #3]
 500:	mov	x0, #0x1                   	// #1
 504:	ldrb	w2, [sp, #124]
 508:	lsl	x0, x0, x2
 50c:	bic	x0, x1, x0
 510:	str	x0, [x25, x22, lsl #3]
 514:	b	2f4 <gomp_affinity_init_level_1+0x114>
 518:	ldrb	w5, [sp, #176]
 51c:	mov	x3, x7
 520:	ldr	x4, [sp, #104]
 524:	mov	w0, w25
 528:	ldr	x2, [sp, #184]
 52c:	mov	w1, #0x2                   	// #2
 530:	str	x7, [sp, #128]
 534:	bl	1e0 <gomp_affinity_init_level_1>
 538:	ldr	x7, [sp, #128]
 53c:	b	490 <gomp_affinity_init_level_1+0x2b0>
 540:	adrp	x0, 0 <gomp_places_list>
 544:	add	x0, x0, #0x0
 548:	ldr	x3, [x27]
 54c:	mov	w1, #0x0                   	// #0
 550:	ldr	x0, [x0]
 554:	str	x7, [sp, #128]
 558:	ldr	x0, [x0, x3, lsl #3]
 55c:	str	x0, [sp, #168]
 560:	bl	0 <memset>
 564:	ldr	x7, [sp, #128]
 568:	b	430 <gomp_affinity_init_level_1+0x250>
 56c:	add	x1, sp, #0xf8
 570:	add	x0, x0, #0x1
 574:	mov	w2, #0xa                   	// #10
 578:	bl	0 <strtoul>
 57c:	ldr	w1, [x26]
 580:	mov	x28, x0
 584:	cmp	w1, #0x0
 588:	ccmp	x22, x0, #0x2, eq  // eq = none
 58c:	b.ls	3e8 <gomp_affinity_init_level_1+0x208>  // b.plast
 590:	b	4d8 <gomp_affinity_init_level_1+0x2f8>
 594:	mov	x0, #0x0                   	// #0
 598:	bl	0 <free>
 59c:	ldp	x21, x22, [sp, #32]
 5a0:	ldp	x23, x24, [sp, #48]
 5a4:	ldp	x29, x30, [sp], #256
 5a8:	ret
 5ac:	ldr	x2, [x24]
 5b0:	mov	w1, #0x0                   	// #0
 5b4:	bl	0 <memset>
 5b8:	ldr	x1, [sp, #248]
 5bc:	ldrb	w0, [x1]
 5c0:	cmp	w0, #0x0
 5c4:	ccmp	w0, #0xa, #0x4, ne  // ne = any
 5c8:	b.ne	390 <gomp_affinity_init_level_1+0x1b0>  // b.any
 5cc:	ldr	x0, [x24]
 5d0:	cmp	x21, x0
 5d4:	b.cs	5e8 <gomp_affinity_init_level_1+0x408>  // b.hs, b.nlast
 5d8:	ldr	x1, [x25, x22, lsl #3]
 5dc:	ldrb	w2, [sp, #124]
 5e0:	lsr	x2, x1, x2
 5e4:	tbnz	w2, #0, 500 <gomp_affinity_init_level_1+0x320>
 5e8:	ldr	x1, [x27]
 5ec:	add	x1, x1, #0x1
 5f0:	str	x1, [x27]
 5f4:	b	4f4 <gomp_affinity_init_level_1+0x314>
 5f8:	ldr	x0, [x24]
 5fc:	b	4f4 <gomp_affinity_init_level_1+0x314>

0000000000000600 <gomp_affinity_remove_cpu>:
 600:	stp	x29, x30, [sp, #-16]!
 604:	adrp	x3, 0 <gomp_cpuset_size>
 608:	mov	x29, sp
 60c:	ldr	x4, [x3]
 610:	cmp	x1, x4, lsl #3
 614:	b.cs	674 <gomp_affinity_remove_cpu+0x74>  // b.hs, b.nlast
 618:	mov	x2, x1
 61c:	cmp	x4, x1, lsr #3
 620:	b.ls	658 <gomp_affinity_remove_cpu+0x58>  // b.plast
 624:	lsr	x4, x1, #6
 628:	and	w6, w1, #0x3f
 62c:	mov	x3, x0
 630:	ldr	x5, [x0, x4, lsl #3]
 634:	lsr	x0, x5, x6
 638:	tbz	w0, #0, 658 <gomp_affinity_remove_cpu+0x58>
 63c:	mov	x1, #0x1                   	// #1
 640:	mov	w0, w1
 644:	lsl	x1, x1, x6
 648:	bic	x1, x5, x1
 64c:	str	x1, [x3, x4, lsl #3]
 650:	ldp	x29, x30, [sp], #16
 654:	ret
 658:	mov	x1, x2
 65c:	adrp	x0, 0 <gomp_init_thread_affinity>
 660:	add	x0, x0, #0x0
 664:	bl	0 <gomp_error>
 668:	mov	w0, #0x0                   	// #0
 66c:	ldp	x29, x30, [sp], #16
 670:	ret
 674:	adrp	x0, 0 <gomp_init_thread_affinity>
 678:	add	x0, x0, #0x0
 67c:	bl	0 <gomp_error>
 680:	mov	w0, #0x0                   	// #0
 684:	ldp	x29, x30, [sp], #16
 688:	ret
 68c:	nop

0000000000000690 <gomp_affinity_copy_place>:
 690:	stp	x29, x30, [sp, #-64]!
 694:	mov	x29, sp
 698:	stp	x19, x20, [sp, #16]
 69c:	adrp	x20, 0 <gomp_cpuset_size>
 6a0:	ldr	x19, [x20]
 6a4:	stp	x21, x22, [sp, #32]
 6a8:	mov	x22, x1
 6ac:	mov	x21, x2
 6b0:	mov	w1, #0x0                   	// #0
 6b4:	mov	x2, x19
 6b8:	str	x23, [sp, #48]
 6bc:	mov	x23, x0
 6c0:	bl	0 <memset>
 6c4:	lsl	x19, x19, #3
 6c8:	add	x6, x20, #0x0
 6cc:	mov	x1, #0x0                   	// #0
 6d0:	mov	x0, #0x1                   	// #1
 6d4:	cbnz	x19, 70c <gomp_affinity_copy_place+0x7c>
 6d8:	b	774 <gomp_affinity_copy_place+0xe4>
 6dc:	b.eq	6ec <gomp_affinity_copy_place+0x5c>  // b.none
 6e0:	cmp	x7, #0x0
 6e4:	ccmp	x19, x2, #0x0, eq  // eq = none
 6e8:	b.ls	74c <gomp_affinity_copy_place+0xbc>  // b.plast
 6ec:	cmp	x3, x2, lsr #3
 6f0:	b.ls	700 <gomp_affinity_copy_place+0x70>  // b.plast
 6f4:	ldr	x2, [x23, x5, lsl #3]
 6f8:	orr	x4, x2, x4
 6fc:	str	x4, [x23, x5, lsl #3]
 700:	add	x1, x1, #0x1
 704:	cmp	x19, x1
 708:	b.eq	774 <gomp_affinity_copy_place+0xe4>  // b.none
 70c:	ldr	x3, [x6]
 710:	lsr	x5, x1, #6
 714:	cmp	x3, x1, lsr #3
 718:	b.ls	700 <gomp_affinity_copy_place+0x70>  // b.plast
 71c:	ldr	x5, [x22, x5, lsl #3]
 720:	lsr	x5, x5, x1
 724:	tbz	w5, #0, 700 <gomp_affinity_copy_place+0x70>
 728:	adds	x2, x1, x21
 72c:	add	w4, w1, w21
 730:	cset	x7, cs  // cs = hs, nlast
 734:	cmp	x21, #0x0
 738:	lsr	x5, x2, #6
 73c:	lsl	x4, x0, x4
 740:	b.ge	6dc <gomp_affinity_copy_place+0x4c>  // b.tcont
 744:	cmp	x2, x1
 748:	b.ls	6ec <gomp_affinity_copy_place+0x5c>  // b.plast
 74c:	mov	x2, x21
 750:	adrp	x0, 0 <gomp_init_thread_affinity>
 754:	add	x0, x0, #0x0
 758:	bl	0 <gomp_error>
 75c:	mov	w0, #0x0                   	// #0
 760:	ldp	x19, x20, [sp, #16]
 764:	ldp	x21, x22, [sp, #32]
 768:	ldr	x23, [sp, #48]
 76c:	ldp	x29, x30, [sp], #64
 770:	ret
 774:	mov	w0, #0x1                   	// #1
 778:	ldp	x19, x20, [sp, #16]
 77c:	ldp	x21, x22, [sp, #32]
 780:	ldr	x23, [sp, #48]
 784:	ldp	x29, x30, [sp], #64
 788:	ret
 78c:	nop

0000000000000790 <gomp_affinity_same_place>:
 790:	stp	x29, x30, [sp, #-16]!
 794:	adrp	x2, 0 <gomp_cpuset_size>
 798:	mov	x29, sp
 79c:	ldr	x2, [x2]
 7a0:	bl	0 <memcmp>
 7a4:	cmp	w0, #0x0
 7a8:	cset	w0, eq  // eq = none
 7ac:	ldp	x29, x30, [sp], #16
 7b0:	ret
 7b4:	nop

00000000000007b8 <gomp_affinity_finalize_place_list>:
 7b8:	stp	x29, x30, [sp, #-96]!
 7bc:	mov	x29, sp
 7c0:	stp	x25, x26, [sp, #64]
 7c4:	adrp	x25, 0 <gomp_places_list_len>
 7c8:	stp	x23, x24, [sp, #48]
 7cc:	and	w24, w0, #0xff
 7d0:	ldr	x0, [x25]
 7d4:	cbz	x0, 8e0 <gomp_affinity_finalize_place_list+0x128>
 7d8:	add	x23, x25, #0x0
 7dc:	stp	x19, x20, [sp, #16]
 7e0:	adrp	x19, 0 <gomp_cpuset_size>
 7e4:	add	x19, x19, #0x0
 7e8:	stp	x21, x22, [sp, #32]
 7ec:	adrp	x22, 0 <gomp_cpusetp>
 7f0:	add	x22, x22, #0x0
 7f4:	str	x27, [sp, #80]
 7f8:	adrp	x27, 0 <gomp_places_list>
 7fc:	add	x27, x27, #0x0
 800:	mov	x20, #0x0                   	// #0
 804:	mov	x26, #0x0                   	// #0
 808:	ldr	x0, [x19]
 80c:	lsl	x21, x26, #3
 810:	ldr	x1, [x27]
 814:	cmp	xzr, x0, lsr #3
 818:	lsr	x5, x0, #3
 81c:	ldr	x4, [x22]
 820:	ldr	x1, [x1, x26, lsl #3]
 824:	b.eq	850 <gomp_affinity_finalize_place_list+0x98>  // b.none
 828:	mov	x0, #0x0                   	// #0
 82c:	nop
 830:	ldr	x2, [x1, x0, lsl #3]
 834:	ldr	x3, [x4, x0, lsl #3]
 838:	and	x2, x2, x3
 83c:	str	x2, [x1, x0, lsl #3]
 840:	add	x0, x0, #0x1
 844:	cmp	x5, x0
 848:	b.ne	830 <gomp_affinity_finalize_place_list+0x78>  // b.any
 84c:	ldr	x0, [x19]
 850:	bl	0 <gomp_cpuset_popcount>
 854:	cbz	x0, 868 <gomp_affinity_finalize_place_list+0xb0>
 858:	ldr	x0, [x27]
 85c:	ldr	x1, [x0, x21]
 860:	str	x1, [x0, x20, lsl #3]
 864:	add	x20, x20, #0x1
 868:	ldr	x1, [x23]
 86c:	add	x26, x26, #0x1
 870:	cmp	x1, x26
 874:	b.hi	808 <gomp_affinity_finalize_place_list+0x50>  // b.pmore
 878:	cbz	x20, 8d4 <gomp_affinity_finalize_place_list+0x11c>
 87c:	cmp	x1, x20
 880:	b.ls	8b0 <gomp_affinity_finalize_place_list+0xf8>  // b.plast
 884:	cbz	w24, 8fc <gomp_affinity_finalize_place_list+0x144>
 888:	mov	w24, #0x1                   	// #1
 88c:	str	x20, [x25]
 890:	mov	w0, w24
 894:	ldp	x19, x20, [sp, #16]
 898:	ldp	x21, x22, [sp, #32]
 89c:	ldp	x23, x24, [sp, #48]
 8a0:	ldp	x25, x26, [sp, #64]
 8a4:	ldr	x27, [sp, #80]
 8a8:	ldp	x29, x30, [sp], #96
 8ac:	ret
 8b0:	mov	w24, #0x1                   	// #1
 8b4:	mov	w0, w24
 8b8:	ldp	x19, x20, [sp, #16]
 8bc:	ldp	x21, x22, [sp, #32]
 8c0:	ldp	x23, x24, [sp, #48]
 8c4:	ldp	x25, x26, [sp, #64]
 8c8:	ldr	x27, [sp, #80]
 8cc:	ldp	x29, x30, [sp], #96
 8d0:	ret
 8d4:	ldp	x19, x20, [sp, #16]
 8d8:	ldp	x21, x22, [sp, #32]
 8dc:	ldr	x27, [sp, #80]
 8e0:	cbz	w24, 910 <gomp_affinity_finalize_place_list+0x158>
 8e4:	mov	w24, #0x0                   	// #0
 8e8:	mov	w0, w24
 8ec:	ldp	x23, x24, [sp, #48]
 8f0:	ldp	x25, x26, [sp, #64]
 8f4:	ldp	x29, x30, [sp], #96
 8f8:	ret
 8fc:	mov	x2, x20
 900:	adrp	x0, 0 <gomp_init_thread_affinity>
 904:	add	x0, x0, #0x0
 908:	bl	0 <gomp_error>
 90c:	b	888 <gomp_affinity_finalize_place_list+0xd0>
 910:	adrp	x0, 0 <gomp_init_thread_affinity>
 914:	add	x0, x0, #0x0
 918:	bl	0 <gomp_error>
 91c:	mov	w0, w24
 920:	ldp	x23, x24, [sp, #48]
 924:	ldp	x25, x26, [sp, #64]
 928:	ldp	x29, x30, [sp], #96
 92c:	ret

0000000000000930 <gomp_affinity_init_level>:
 930:	stp	x29, x30, [sp, #-160]!
 934:	mov	x29, sp
 938:	stp	x23, x24, [sp, #48]
 93c:	adrp	x24, 0 <gomp_cpusetp>
 940:	stp	x19, x20, [sp, #16]
 944:	mov	w20, w0
 948:	mov	x19, x1
 94c:	ldr	x0, [x24]
 950:	stp	x21, x22, [sp, #32]
 954:	and	w21, w2, #0xff
 958:	cbz	x0, 974 <gomp_affinity_init_level+0x44>
 95c:	adrp	x2, 0 <gomp_cpuset_size>
 960:	mov	x1, x0
 964:	ldr	x0, [x2]
 968:	bl	0 <gomp_cpuset_popcount>
 96c:	cmp	x19, x0
 970:	csel	x19, x19, x0, ls  // ls = plast
 974:	adrp	x23, 0 <gomp_places_list>
 978:	adrp	x22, 0 <gomp_places_list_len>
 97c:	mov	w1, w21
 980:	mov	x0, x19
 984:	bl	20 <gomp_affinity_alloc>
 988:	str	xzr, [x22]
 98c:	str	x0, [x23]
 990:	mov	x1, x0
 994:	mov	w0, #0x0                   	// #0
 998:	cbz	x1, a08 <gomp_affinity_init_level+0xd8>
 99c:	adrp	x0, 0 <gomp_cpuset_size>
 9a0:	adrp	x4, 0 <gomp_init_thread_affinity>
 9a4:	add	x4, x4, #0x0
 9a8:	ldr	x2, [x0]
 9ac:	ldp	x6, x7, [x4]
 9b0:	add	x0, x2, #0xf
 9b4:	and	x0, x0, #0xfffffffffffffff0
 9b8:	ldr	w5, [x4, #24]
 9bc:	sub	sp, sp, x0
 9c0:	stp	x6, x7, [x29, #72]
 9c4:	mov	x3, sp
 9c8:	ldr	x1, [x24]
 9cc:	mov	x0, x3
 9d0:	ldr	x4, [x4, #16]
 9d4:	str	x4, [x29, #88]
 9d8:	str	w5, [x29, #96]
 9dc:	bl	0 <memcpy>
 9e0:	mov	x3, x0
 9e4:	mov	w1, #0x3                   	// #3
 9e8:	mov	w0, w20
 9ec:	mov	w5, w21
 9f0:	add	x4, x29, #0x48
 9f4:	mov	x2, x19
 9f8:	bl	1e0 <gomp_affinity_init_level_1>
 9fc:	ldr	x1, [x22]
 a00:	mov	w0, #0x1                   	// #1
 a04:	cbz	x1, a20 <gomp_affinity_init_level+0xf0>
 a08:	mov	sp, x29
 a0c:	ldp	x19, x20, [sp, #16]
 a10:	ldp	x21, x22, [sp, #32]
 a14:	ldp	x23, x24, [sp, #48]
 a18:	ldp	x29, x30, [sp], #160
 a1c:	ret
 a20:	cbz	w21, a4c <gomp_affinity_init_level+0x11c>
 a24:	ldr	x0, [x23]
 a28:	bl	0 <free>
 a2c:	str	xzr, [x23]
 a30:	mov	w0, #0x0                   	// #0
 a34:	mov	sp, x29
 a38:	ldp	x19, x20, [sp, #16]
 a3c:	ldp	x21, x22, [sp, #32]
 a40:	ldp	x23, x24, [sp, #48]
 a44:	ldp	x29, x30, [sp], #160
 a48:	ret
 a4c:	adrp	x0, 0 <gomp_init_thread_affinity>
 a50:	add	x0, x0, #0x0
 a54:	bl	0 <gomp_error>
 a58:	b	a24 <gomp_affinity_init_level+0xf4>
 a5c:	nop

0000000000000a60 <gomp_init_affinity>:
 a60:	stp	x29, x30, [sp, #-32]!
 a64:	mov	x29, sp
 a68:	stp	x19, x20, [sp, #16]
 a6c:	adrp	x20, 0 <gomp_places_list>
 a70:	ldr	x19, [x20]
 a74:	cbz	x19, abc <gomp_init_affinity+0x5c>
 a78:	bl	0 <pthread_self>
 a7c:	adrp	x1, 0 <gomp_cpuset_size>
 a80:	ldr	x2, [x19]
 a84:	ldr	x1, [x1]
 a88:	bl	0 <pthread_setaffinity_np>
 a8c:	adrp	x1, 0 <gomp_tls_data>
 a90:	ldr	x1, [x1]
 a94:	mrs	x0, tpidr_el0
 a98:	adrp	x2, 0 <gomp_places_list_len>
 a9c:	add	x0, x0, x1
 aa0:	mov	w1, #0x1                   	// #1
 aa4:	ldr	x2, [x2]
 aa8:	stp	wzr, w2, [x0, #52]
 aac:	str	w1, [x0, #92]
 ab0:	ldp	x19, x20, [sp, #16]
 ab4:	ldp	x29, x30, [sp], #32
 ab8:	ret
 abc:	mov	w2, #0x1                   	// #1
 ac0:	mov	x1, #0xffffffffffffffff    	// #-1
 ac4:	mov	w0, #0x1                   	// #1
 ac8:	bl	930 <gomp_affinity_init_level>
 acc:	tst	w0, #0xff
 ad0:	b.eq	ab0 <gomp_init_affinity+0x50>  // b.none
 ad4:	ldr	x19, [x20]
 ad8:	b	a78 <gomp_init_affinity+0x18>
 adc:	nop

0000000000000ae0 <gomp_affinity_print_place>:
 ae0:	stp	x29, x30, [sp, #-96]!
 ae4:	mov	x29, sp
 ae8:	stp	x25, x26, [sp, #64]
 aec:	adrp	x26, 0 <gomp_cpuset_size>
 af0:	ldr	x2, [x26]
 af4:	cmp	xzr, x2, lsl #3
 af8:	b.eq	bb8 <gomp_affinity_print_place+0xd8>  // b.none
 afc:	stp	x19, x20, [sp, #16]
 b00:	mov	x19, #0x0                   	// #0
 b04:	cmp	x2, x19, lsr #3
 b08:	stp	x21, x22, [sp, #32]
 b0c:	mov	w25, #0x0                   	// #0
 b10:	adrp	x22, 0 <gomp_init_thread_affinity>
 b14:	stp	x23, x24, [sp, #48]
 b18:	mov	x21, x0
 b1c:	adrp	x24, 0 <gomp_init_thread_affinity>
 b20:	str	x27, [sp, #80]
 b24:	add	x22, x22, #0x0
 b28:	add	x24, x24, #0x0
 b2c:	lsl	x27, x2, #3
 b30:	mov	x20, #0x0                   	// #0
 b34:	adrp	x23, 0 <stderr>
 b38:	b.ls	b88 <gomp_affinity_print_place+0xa8>  // b.plast
 b3c:	nop
 b40:	lsr	x0, x19, #6
 b44:	ldr	x1, [x21, x0, lsl #3]
 b48:	lsr	x1, x1, x19
 b4c:	tbz	w1, #0, b88 <gomp_affinity_print_place+0xa8>
 b50:	cbnz	x20, b6c <gomp_affinity_print_place+0x8c>
 b54:	ldr	x0, [x23]
 b58:	cbnz	w25, c0c <gomp_affinity_print_place+0x12c>
 b5c:	mov	x2, x19
 b60:	mov	x1, x24
 b64:	mov	w25, #0x1                   	// #1
 b68:	bl	0 <fprintf>
 b6c:	add	x20, x20, #0x1
 b70:	add	x19, x19, #0x1
 b74:	cmp	x27, x19
 b78:	b.eq	ba0 <gomp_affinity_print_place+0xc0>  // b.none
 b7c:	ldr	x2, [x26]
 b80:	cmp	x2, x19, lsr #3
 b84:	b.hi	b40 <gomp_affinity_print_place+0x60>  // b.pmore
 b88:	cmp	x20, #0x1
 b8c:	b.hi	bc4 <gomp_affinity_print_place+0xe4>  // b.pmore
 b90:	add	x19, x19, #0x1
 b94:	mov	x20, #0x0                   	// #0
 b98:	cmp	x27, x19
 b9c:	b.ne	b7c <gomp_affinity_print_place+0x9c>  // b.any
 ba0:	cmp	x20, #0x1
 ba4:	b.hi	bdc <gomp_affinity_print_place+0xfc>  // b.pmore
 ba8:	ldp	x19, x20, [sp, #16]
 bac:	ldp	x21, x22, [sp, #32]
 bb0:	ldp	x23, x24, [sp, #48]
 bb4:	ldr	x27, [sp, #80]
 bb8:	ldp	x25, x26, [sp, #64]
 bbc:	ldp	x29, x30, [sp], #96
 bc0:	ret
 bc4:	ldr	x0, [x23]
 bc8:	mov	x2, x20
 bcc:	mov	x1, x22
 bd0:	mov	x20, #0x0                   	// #0
 bd4:	bl	0 <fprintf>
 bd8:	b	b70 <gomp_affinity_print_place+0x90>
 bdc:	mov	x2, x20
 be0:	adrp	x0, 0 <stderr>
 be4:	ldp	x19, x20, [sp, #16]
 be8:	adrp	x1, 0 <gomp_init_thread_affinity>
 bec:	ldp	x21, x22, [sp, #32]
 bf0:	add	x1, x1, #0x0
 bf4:	ldp	x23, x24, [sp, #48]
 bf8:	ldp	x25, x26, [sp, #64]
 bfc:	ldr	x27, [sp, #80]
 c00:	ldp	x29, x30, [sp], #96
 c04:	ldr	x0, [x0]
 c08:	b	0 <fprintf>
 c0c:	mov	x1, x0
 c10:	mov	w0, #0x2c                  	// #44
 c14:	bl	0 <fputc>
 c18:	ldr	x0, [x23]
 c1c:	b	b5c <gomp_affinity_print_place+0x7c>

0000000000000c20 <gomp_ialias_omp_get_place_num_procs>:
 c20:	tbnz	w0, #31, c6c <gomp_ialias_omp_get_place_num_procs+0x4c>
 c24:	adrp	x2, 0 <gomp_places_list_len>
 c28:	mov	w1, w0
 c2c:	sxtw	x3, w0
 c30:	mov	w0, #0x0                   	// #0
 c34:	ldr	x2, [x2]
 c38:	cmp	x2, w1, sxtw
 c3c:	b.hi	c44 <gomp_ialias_omp_get_place_num_procs+0x24>  // b.pmore
 c40:	ret
 c44:	stp	x29, x30, [sp, #-16]!
 c48:	adrp	x1, 0 <gomp_places_list>
 c4c:	adrp	x0, 0 <gomp_cpuset_size>
 c50:	mov	x29, sp
 c54:	ldr	x1, [x1]
 c58:	ldr	x0, [x0]
 c5c:	ldr	x1, [x1, x3, lsl #3]
 c60:	bl	0 <gomp_cpuset_popcount>
 c64:	ldp	x29, x30, [sp], #16
 c68:	ret
 c6c:	mov	w0, #0x0                   	// #0
 c70:	ret
 c74:	nop

0000000000000c78 <gomp_ialias_omp_get_place_proc_ids>:
 c78:	tbnz	w0, #31, ce8 <gomp_ialias_omp_get_place_proc_ids+0x70>
 c7c:	adrp	x2, 0 <gomp_places_list_len>
 c80:	sxtw	x4, w0
 c84:	ldr	x2, [x2]
 c88:	cmp	x2, w0, sxtw
 c8c:	b.ls	ce8 <gomp_ialias_omp_get_place_proc_ids+0x70>  // b.plast
 c90:	adrp	x0, 0 <gomp_places_list>
 c94:	adrp	x2, 0 <gomp_cpuset_size>
 c98:	ldr	x0, [x0]
 c9c:	ldr	x3, [x2]
 ca0:	ldr	x6, [x0, x4, lsl #3]
 ca4:	cmp	xzr, x3, lsl #3
 ca8:	lsl	x5, x3, #3
 cac:	b.eq	ce8 <gomp_ialias_omp_get_place_proc_ids+0x70>  // b.none
 cb0:	mov	x0, #0x0                   	// #0
 cb4:	nop
 cb8:	lsr	x2, x0, #6
 cbc:	cmp	x3, x0, lsr #3
 cc0:	b.ls	cdc <gomp_ialias_omp_get_place_proc_ids+0x64>  // b.plast
 cc4:	ldr	x2, [x6, x2, lsl #3]
 cc8:	mov	x4, x1
 ccc:	lsr	x2, x2, x0
 cd0:	tbz	w2, #0, cdc <gomp_ialias_omp_get_place_proc_ids+0x64>
 cd4:	str	w0, [x4], #4
 cd8:	mov	x1, x4
 cdc:	add	x0, x0, #0x1
 ce0:	cmp	x5, x0
 ce4:	b.ne	cb8 <gomp_ialias_omp_get_place_proc_ids+0x40>  // b.any
 ce8:	ret
 cec:	nop

0000000000000cf0 <gomp_get_place_proc_ids_8>:
 cf0:	tbnz	w0, #31, d64 <gomp_get_place_proc_ids_8+0x74>
 cf4:	adrp	x2, 0 <gomp_places_list_len>
 cf8:	sxtw	x3, w0
 cfc:	ldr	x2, [x2]
 d00:	cmp	x2, w0, sxtw
 d04:	b.ls	d64 <gomp_get_place_proc_ids_8+0x74>  // b.plast
 d08:	adrp	x0, 0 <gomp_places_list>
 d0c:	adrp	x5, 0 <gomp_cpuset_size>
 d10:	ldr	x0, [x0]
 d14:	ldr	x2, [x5]
 d18:	ldr	x7, [x0, x3, lsl #3]
 d1c:	cmp	xzr, x2, lsl #3
 d20:	lsl	x6, x2, #3
 d24:	b.eq	d64 <gomp_get_place_proc_ids_8+0x74>  // b.none
 d28:	mov	x0, #0x0                   	// #0
 d2c:	b	d34 <gomp_get_place_proc_ids_8+0x44>
 d30:	ldr	x2, [x5]
 d34:	lsr	x3, x0, #6
 d38:	cmp	x2, x0, lsr #3
 d3c:	b.ls	d58 <gomp_get_place_proc_ids_8+0x68>  // b.plast
 d40:	ldr	x2, [x7, x3, lsl #3]
 d44:	mov	x4, x1
 d48:	lsr	x2, x2, x0
 d4c:	tbz	w2, #0, d58 <gomp_get_place_proc_ids_8+0x68>
 d50:	str	x0, [x4], #8
 d54:	mov	x1, x4
 d58:	add	x0, x0, #0x1
 d5c:	cmp	x6, x0
 d60:	b.ne	d30 <gomp_get_place_proc_ids_8+0x40>  // b.any
 d64:	ret

0000000000000d68 <gomp_display_affinity_place>:
 d68:	stp	x29, x30, [sp, #-144]!
 d6c:	mov	x29, sp
 d70:	stp	x19, x20, [sp, #16]
 d74:	stp	x21, x22, [sp, #32]
 d78:	mov	x22, x0
 d7c:	stp	x23, x24, [sp, #48]
 d80:	mov	x23, x1
 d84:	mov	x24, x2
 d88:	stp	x25, x26, [sp, #64]
 d8c:	tbnz	w3, #31, da4 <gomp_display_affinity_place+0x3c>
 d90:	adrp	x0, 0 <gomp_places_list_len>
 d94:	sxtw	x1, w3
 d98:	ldr	x0, [x0]
 d9c:	cmp	x0, w3, sxtw
 da0:	b.hi	ea8 <gomp_display_affinity_place+0x140>  // b.pmore
 da4:	adrp	x0, 0 <gomp_cpusetp>
 da8:	ldr	x25, [x0]
 dac:	cbz	x25, ebc <gomp_display_affinity_place+0x154>
 db0:	stp	x27, x28, [sp, #80]
 db4:	adrp	x21, 0 <gomp_cpuset_size>
 db8:	add	x0, sp, #0x71
 dbc:	adrp	x26, 0 <gomp_init_thread_affinity>
 dc0:	ldr	x28, [x21]
 dc4:	add	x26, x26, #0x0
 dc8:	mov	w27, #0x0                   	// #0
 dcc:	mov	x19, #0x0                   	// #0
 dd0:	str	x0, [sp, #104]
 dd4:	lsl	x28, x28, #3
 dd8:	mov	x20, x28
 ddc:	b	e50 <gomp_display_affinity_place+0xe8>
 de0:	lsr	x0, x19, #6
 de4:	ldr	x0, [x25, x0, lsl #3]
 de8:	lsr	x0, x0, x19
 dec:	tbz	w0, #0, e64 <gomp_display_affinity_place+0xfc>
 df0:	cbnz	w27, e44 <gomp_display_affinity_place+0xdc>
 df4:	cmp	x28, x20
 df8:	add	x0, sp, #0x70
 dfc:	b.eq	e0c <gomp_display_affinity_place+0xa4>  // b.none
 e00:	ldr	x0, [sp, #104]
 e04:	mov	w1, #0x2c                  	// #44
 e08:	strb	w1, [sp, #112]
 e0c:	mov	x20, x19
 e10:	mov	w27, #0x1                   	// #1
 e14:	mov	x2, x19
 e18:	adrp	x1, 0 <gomp_init_thread_affinity>
 e1c:	add	x1, x1, #0x0
 e20:	bl	0 <sprintf>
 e24:	add	x0, sp, #0x70
 e28:	bl	0 <strlen>
 e2c:	add	x3, sp, #0x70
 e30:	mov	x4, x0
 e34:	mov	x2, x24
 e38:	mov	x1, x23
 e3c:	mov	x0, x22
 e40:	bl	0 <gomp_display_string>
 e44:	cmp	x28, x19
 e48:	add	x19, x19, #0x1
 e4c:	b.eq	e8c <gomp_display_affinity_place+0x124>  // b.none
 e50:	cmp	x28, x19
 e54:	b.eq	e64 <gomp_display_affinity_place+0xfc>  // b.none
 e58:	ldr	x0, [x21]
 e5c:	cmp	x0, x19, lsr #3
 e60:	b.hi	de0 <gomp_display_affinity_place+0x78>  // b.pmore
 e64:	cbz	w27, e44 <gomp_display_affinity_place+0xdc>
 e68:	add	x0, x20, #0x1
 e6c:	mov	w27, #0x0                   	// #0
 e70:	cmp	x0, x19
 e74:	b.eq	e44 <gomp_display_affinity_place+0xdc>  // b.none
 e78:	sub	x2, x19, #0x1
 e7c:	mov	x1, x26
 e80:	add	x0, sp, #0x70
 e84:	bl	0 <sprintf>
 e88:	b	e24 <gomp_display_affinity_place+0xbc>
 e8c:	ldp	x19, x20, [sp, #16]
 e90:	ldp	x21, x22, [sp, #32]
 e94:	ldp	x23, x24, [sp, #48]
 e98:	ldp	x25, x26, [sp, #64]
 e9c:	ldp	x27, x28, [sp, #80]
 ea0:	ldp	x29, x30, [sp], #144
 ea4:	ret
 ea8:	adrp	x0, 0 <gomp_places_list>
 eac:	stp	x27, x28, [sp, #80]
 eb0:	ldr	x0, [x0]
 eb4:	ldr	x25, [x0, x1, lsl #3]
 eb8:	b	db4 <gomp_display_affinity_place+0x4c>
 ebc:	adrp	x0, 0 <gomp_available_cpus>
 ec0:	add	x19, sp, #0x70
 ec4:	ldr	x2, [x0]
 ec8:	cmp	x2, #0x1
 ecc:	b.ls	f1c <gomp_display_affinity_place+0x1b4>  // b.plast
 ed0:	adrp	x1, 0 <gomp_init_thread_affinity>
 ed4:	sub	x2, x2, #0x1
 ed8:	mov	x0, x19
 edc:	add	x1, x1, #0x0
 ee0:	bl	0 <sprintf>
 ee4:	mov	x0, x19
 ee8:	bl	0 <strlen>
 eec:	mov	x3, x19
 ef0:	mov	x4, x0
 ef4:	mov	x2, x24
 ef8:	mov	x1, x23
 efc:	mov	x0, x22
 f00:	bl	0 <gomp_display_string>
 f04:	ldp	x19, x20, [sp, #16]
 f08:	ldp	x21, x22, [sp, #32]
 f0c:	ldp	x23, x24, [sp, #48]
 f10:	ldp	x25, x26, [sp, #64]
 f14:	ldp	x29, x30, [sp], #144
 f18:	ret
 f1c:	mov	w0, #0x30                  	// #48
 f20:	strh	w0, [sp, #112]
 f24:	b	ee4 <gomp_display_affinity_place+0x17c>

target.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <omp_target_memcpy_rect_worker>:
       0:	sub	sp, sp, #0xa0
       4:	cmp	w3, #0x1
       8:	stp	x29, x30, [sp, #32]
       c:	add	x29, sp, #0x20
      10:	stp	x21, x22, [sp, #64]
      14:	mov	x21, x0
      18:	stp	x23, x24, [sp, #80]
      1c:	mov	x23, x2
      20:	stp	x27, x28, [sp, #112]
      24:	mov	x28, x4
      28:	ldr	x24, [sp, #160]
      2c:	b.eq	174 <omp_target_memcpy_rect_worker+0x174>  // b.none
      30:	stp	x19, x20, [sp, #48]
      34:	b.le	268 <omp_target_memcpy_rect_worker+0x268>
      38:	ldr	x19, [x7, #8]
      3c:	umulh	x0, x2, x19
      40:	mul	x19, x2, x19
      44:	cbnz	x0, 154 <omp_target_memcpy_rect_worker+0x154>
      48:	ldr	x20, [x24, #8]
      4c:	umulh	x0, x2, x20
      50:	mul	x20, x2, x20
      54:	cbnz	x0, 154 <omp_target_memcpy_rect_worker+0x154>
      58:	mov	x8, #0x2                   	// #2
      5c:	b	84 <omp_target_memcpy_rect_worker+0x84>
      60:	ldr	x9, [x7, x8, lsl #3]
      64:	umulh	x10, x19, x9
      68:	mul	x19, x19, x9
      6c:	cbnz	x10, 154 <omp_target_memcpy_rect_worker+0x154>
      70:	ldr	x9, [x24, x8, lsl #3]
      74:	add	x8, x8, #0x1
      78:	umulh	x10, x20, x9
      7c:	mul	x20, x20, x9
      80:	cbnz	x10, 154 <omp_target_memcpy_rect_worker+0x154>
      84:	cmp	w3, w8
      88:	b.gt	60 <omp_target_memcpy_rect_worker+0x60>
      8c:	ldr	x8, [x5]
      90:	umulh	x0, x19, x8
      94:	mul	x8, x19, x8
      98:	cbnz	x0, 154 <omp_target_memcpy_rect_worker+0x154>
      9c:	ldr	x0, [x6]
      a0:	umulh	x2, x20, x0
      a4:	mul	x0, x20, x0
      a8:	cmp	x2, #0x0
      ac:	cset	x22, ne  // ne = any
      b0:	b.ne	154 <omp_target_memcpy_rect_worker+0x154>  // b.any
      b4:	ldr	x2, [x28]
      b8:	cbz	x2, 148 <omp_target_memcpy_rect_worker+0x148>
      bc:	add	x2, x24, #0x8
      c0:	sub	w3, w3, #0x1
      c4:	add	x7, x7, #0x8
      c8:	add	x21, x21, x8
      cc:	add	x24, x1, x0
      d0:	add	x27, x28, #0x8
      d4:	stp	x25, x26, [sp, #96]
      d8:	add	x25, x5, #0x8
      dc:	add	x26, x6, #0x8
      e0:	str	x2, [sp, #152]
      e4:	ldr	x0, [sp, #152]
      e8:	str	x0, [sp]
      ec:	ldr	x0, [sp, #168]
      f0:	str	x0, [sp, #8]
      f4:	ldr	x0, [sp, #176]
      f8:	str	x0, [sp, #16]
      fc:	mov	x6, x26
     100:	mov	x5, x25
     104:	mov	x4, x27
     108:	mov	x2, x23
     10c:	mov	x1, x24
     110:	add	x22, x22, #0x1
     114:	mov	x0, x21
     118:	str	w3, [sp, #140]
     11c:	str	x7, [sp, #144]
     120:	bl	0 <omp_target_memcpy_rect_worker>
     124:	cbnz	w0, 1f8 <omp_target_memcpy_rect_worker+0x1f8>
     128:	ldr	x0, [x28]
     12c:	add	x21, x21, x19
     130:	ldr	w3, [sp, #140]
     134:	add	x24, x24, x20
     138:	cmp	x0, x22
     13c:	ldr	x7, [sp, #144]
     140:	b.hi	e4 <omp_target_memcpy_rect_worker+0xe4>  // b.pmore
     144:	ldp	x25, x26, [sp, #96]
     148:	mov	w0, #0x0                   	// #0
     14c:	ldp	x19, x20, [sp, #48]
     150:	b	15c <omp_target_memcpy_rect_worker+0x15c>
     154:	ldp	x19, x20, [sp, #48]
     158:	mov	w0, #0x16                  	// #22
     15c:	ldp	x29, x30, [sp, #32]
     160:	ldp	x21, x22, [sp, #64]
     164:	ldp	x23, x24, [sp, #80]
     168:	ldp	x27, x28, [sp, #112]
     16c:	add	sp, sp, #0xa0
     170:	ret
     174:	ldr	x2, [x4]
     178:	umulh	x0, x23, x2
     17c:	mul	x2, x23, x2
     180:	cbnz	x0, 158 <omp_target_memcpy_rect_worker+0x158>
     184:	ldr	x0, [x5]
     188:	umulh	x3, x23, x0
     18c:	mul	x4, x23, x0
     190:	cbnz	x3, 158 <omp_target_memcpy_rect_worker+0x158>
     194:	ldr	x0, [x6]
     198:	umulh	x3, x23, x0
     19c:	mul	x23, x23, x0
     1a0:	cbnz	x3, 158 <omp_target_memcpy_rect_worker+0x158>
     1a4:	ldp	x0, x3, [sp, #168]
     1a8:	orr	x0, x0, x3
     1ac:	cbz	x0, 204 <omp_target_memcpy_rect_worker+0x204>
     1b0:	ldr	x0, [sp, #176]
     1b4:	cbz	x0, 240 <omp_target_memcpy_rect_worker+0x240>
     1b8:	ldr	x0, [sp, #168]
     1bc:	cbz	x0, 218 <omp_target_memcpy_rect_worker+0x218>
     1c0:	ldp	x0, x3, [sp, #168]
     1c4:	cmp	x0, x3
     1c8:	b.ne	158 <omp_target_memcpy_rect_worker+0x158>  // b.any
     1cc:	mov	x3, x2
     1d0:	ldr	w0, [x0, #12]
     1d4:	ldr	x2, [sp, #168]
     1d8:	ldr	x5, [x2, #128]
     1dc:	add	x2, x1, x23
     1e0:	add	x1, x21, x4
     1e4:	blr	x5
     1e8:	and	w1, w0, #0xff
     1ec:	mov	w0, #0x0                   	// #0
     1f0:	cbnz	w1, 15c <omp_target_memcpy_rect_worker+0x15c>
     1f4:	b	158 <omp_target_memcpy_rect_worker+0x158>
     1f8:	ldp	x19, x20, [sp, #48]
     1fc:	ldp	x25, x26, [sp, #96]
     200:	b	15c <omp_target_memcpy_rect_worker+0x15c>
     204:	add	x1, x1, x23
     208:	add	x0, x21, x4
     20c:	bl	0 <memcpy>
     210:	mov	w0, #0x0                   	// #0
     214:	b	15c <omp_target_memcpy_rect_worker+0x15c>
     218:	mov	x3, x2
     21c:	ldr	x0, [sp, #176]
     220:	ldr	x2, [sp, #176]
     224:	ldr	w0, [x0, #12]
     228:	ldr	x5, [x2, #112]
     22c:	add	x2, x1, x23
     230:	add	x1, x21, x4
     234:	blr	x5
     238:	and	w1, w0, #0xff
     23c:	b	1ec <omp_target_memcpy_rect_worker+0x1ec>
     240:	mov	x3, x2
     244:	ldr	x0, [sp, #168]
     248:	ldr	x2, [sp, #168]
     24c:	ldr	w0, [x0, #12]
     250:	ldr	x5, [x2, #120]
     254:	add	x2, x1, x23
     258:	add	x1, x21, x4
     25c:	blr	x5
     260:	and	w1, w0, #0xff
     264:	b	1ec <omp_target_memcpy_rect_worker+0x1ec>
     268:	mov	x20, x2
     26c:	mov	x19, x2
     270:	b	8c <omp_target_memcpy_rect_worker+0x8c>
     274:	nop

0000000000000278 <gomp_target_init>:
     278:	stp	x29, x30, [sp, #-32]!
     27c:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     280:	mov	x0, #0x0                   	// #0
     284:	mov	x29, sp
     288:	str	wzr, [x1]
     28c:	str	x19, [sp, #16]
     290:	add	x19, x1, #0x0
     294:	bl	0 <malloc>
     298:	mov	x1, x0
     29c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     2a0:	add	x0, x0, #0x0
     2a4:	str	wzr, [x19, #4]
     2a8:	str	x1, [x19, #8]
     2ac:	bl	0 <atexit>
     2b0:	cbnz	w0, 2c0 <gomp_target_init+0x48>
     2b4:	ldr	x19, [sp, #16]
     2b8:	ldp	x29, x30, [sp], #32
     2bc:	ret
     2c0:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     2c4:	add	x0, x0, #0x0
     2c8:	bl	0 <gomp_fatal>
     2cc:	nop

00000000000002d0 <gomp_mutex_unlock>:
     2d0:	mov	x1, x0
     2d4:	ldxr	w2, [x1]
     2d8:	stlxr	w3, wzr, [x1]
     2dc:	cbnz	w3, 2d4 <gomp_mutex_unlock+0x4>
     2e0:	tbnz	w2, #31, 2e8 <gomp_mutex_unlock+0x18>
     2e4:	ret
     2e8:	b	0 <gomp_mutex_unlock_slow>
     2ec:	nop

00000000000002f0 <gomp_target_fallback>:
     2f0:	stp	x29, x30, [sp, #-144]!
     2f4:	adrp	x3, 0 <gomp_places_list>
     2f8:	adrp	x4, 0 <gomp_tls_data>
     2fc:	ldr	x4, [x4]
     300:	mov	x29, sp
     304:	str	x19, [sp, #16]
     308:	mrs	x19, tpidr_el0
     30c:	add	x2, x19, x4
     310:	ldr	x5, [x3]
     314:	mov	x3, x0
     318:	ldp	x6, x7, [x2]
     31c:	stp	x6, x7, [sp, #40]
     320:	mov	x0, x1
     324:	ldp	x6, x7, [x2, #16]
     328:	stp	x6, x7, [sp, #56]
     32c:	ldr	w8, [x2, #92]
     330:	ldp	x6, x7, [x2, #32]
     334:	stp	x6, x7, [sp, #72]
     338:	ldp	x6, x7, [x2, #48]
     33c:	stp	x6, x7, [sp, #88]
     340:	ldp	x6, x7, [x2, #64]
     344:	stp	x6, x7, [sp, #104]
     348:	ldp	x6, x7, [x2, #80]
     34c:	stp	xzr, xzr, [x2]
     350:	ldr	x1, [x2, #96]
     354:	stp	xzr, xzr, [x2, #16]
     358:	stp	xzr, xzr, [x2, #32]
     35c:	stp	xzr, xzr, [x2, #48]
     360:	stp	xzr, xzr, [x2, #64]
     364:	stp	xzr, xzr, [x2, #80]
     368:	str	xzr, [x2, #96]
     36c:	stp	x6, x7, [sp, #120]
     370:	str	x1, [sp, #136]
     374:	cbz	x5, 388 <gomp_target_fallback+0x98>
     378:	adrp	x1, 0 <gomp_places_list_len>
     37c:	str	w8, [x2, #92]
     380:	ldr	x1, [x1]
     384:	str	w1, [x2, #56]
     388:	add	x19, x19, x4
     38c:	blr	x3
     390:	mov	x0, x19
     394:	bl	0 <gomp_free_thread>
     398:	ldp	x0, x1, [sp, #40]
     39c:	stp	x0, x1, [x19]
     3a0:	ldp	x0, x1, [sp, #56]
     3a4:	stp	x0, x1, [x19, #16]
     3a8:	ldp	x0, x1, [sp, #72]
     3ac:	stp	x0, x1, [x19, #32]
     3b0:	ldp	x0, x1, [sp, #88]
     3b4:	stp	x0, x1, [x19, #48]
     3b8:	ldp	x0, x1, [sp, #104]
     3bc:	stp	x0, x1, [x19, #64]
     3c0:	ldp	x0, x1, [sp, #120]
     3c4:	stp	x0, x1, [x19, #80]
     3c8:	ldr	x0, [sp, #136]
     3cc:	str	x0, [x19, #96]
     3d0:	ldr	x19, [sp, #16]
     3d4:	ldp	x29, x30, [sp], #144
     3d8:	ret
     3dc:	nop

00000000000003e0 <gomp_free_device_memory>:
     3e0:	stp	x29, x30, [sp, #-32]!
     3e4:	mov	x29, sp
     3e8:	stp	x19, x20, [sp, #16]
     3ec:	mov	x19, x0
     3f0:	ldr	w0, [x0, #12]
     3f4:	mov	x20, x1
     3f8:	ldr	x2, [x19, #104]
     3fc:	blr	x2
     400:	tst	w0, #0xff
     404:	b.eq	414 <gomp_free_device_memory+0x34>  // b.none
     408:	ldp	x19, x20, [sp, #16]
     40c:	ldp	x29, x30, [sp], #32
     410:	ret
     414:	add	x0, x19, #0xa8
     418:	bl	2d0 <gomp_mutex_unlock>
     41c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     420:	mov	x1, x20
     424:	add	x0, x0, #0x0
     428:	bl	0 <gomp_fatal>
     42c:	nop

0000000000000430 <gomp_unmap_tgt>:
     430:	stp	x29, x30, [sp, #-32]!
     434:	mov	x29, sp
     438:	str	x19, [sp, #16]
     43c:	mov	x19, x0
     440:	ldr	x0, [x0, #24]
     444:	cbnz	x0, 460 <gomp_unmap_tgt+0x30>
     448:	ldr	x0, [x19, #8]
     44c:	bl	0 <free>
     450:	mov	x0, x19
     454:	ldr	x19, [sp, #16]
     458:	ldp	x29, x30, [sp], #32
     45c:	b	0 <free>
     460:	ldr	x1, [x19, #32]
     464:	ldr	x0, [x19, #56]
     468:	bl	3e0 <gomp_free_device_memory>
     46c:	ldr	x0, [x19, #8]
     470:	bl	0 <free>
     474:	mov	x0, x19
     478:	ldr	x19, [sp, #16]
     47c:	ldp	x29, x30, [sp], #32
     480:	b	0 <free>
     484:	nop

0000000000000488 <gomp_target_fini>:
     488:	stp	x29, x30, [sp, #-80]!
     48c:	mov	x29, sp
     490:	stp	x23, x24, [sp, #48]
     494:	adrp	x23, 0 <omp_target_memcpy_rect_worker>
     498:	ldr	w0, [x23]
     49c:	cmp	w0, #0x0
     4a0:	b.le	58c <gomp_target_fini+0x104>
     4a4:	add	x23, x23, #0x0
     4a8:	mov	w24, #0x2                   	// #2
     4ac:	stp	x19, x20, [sp, #16]
     4b0:	stp	x21, x22, [sp, #32]
     4b4:	mov	x21, #0x0                   	// #0
     4b8:	mov	w22, #0x0                   	// #0
     4bc:	str	x25, [sp, #64]
     4c0:	mov	w25, #0x1                   	// #1
     4c4:	b	4ec <gomp_target_fini+0x64>
     4c8:	ldxr	w0, [x20]
     4cc:	stlxr	w1, wzr, [x20]
     4d0:	cbnz	w1, 4c8 <gomp_target_fini+0x40>
     4d4:	tbnz	w0, #31, 560 <gomp_target_fini+0xd8>
     4d8:	ldr	w0, [x23]
     4dc:	add	w22, w22, #0x1
     4e0:	add	x21, x21, #0x130
     4e4:	cmp	w0, w22
     4e8:	b.le	580 <gomp_target_fini+0xf8>
     4ec:	ldr	x19, [x23, #8]
     4f0:	add	x19, x19, x21
     4f4:	add	x20, x19, #0xa8
     4f8:	ldaxr	w1, [x20]
     4fc:	cbnz	w1, 508 <gomp_target_fini+0x80>
     500:	stxr	w0, w25, [x20]
     504:	cbnz	w0, 4f8 <gomp_target_fini+0x70>
     508:	cmp	w1, #0x0
     50c:	b.ne	598 <gomp_target_fini+0x110>  // b.any
     510:	ldr	w0, [x19, #172]
     514:	cmp	w0, #0x1
     518:	b.ne	4c8 <gomp_target_fini+0x40>  // b.any
     51c:	ldr	w0, [x19, #12]
     520:	ldr	x1, [x19, #64]
     524:	blr	x1
     528:	str	w24, [x19, #172]
     52c:	and	w19, w0, #0xff
     530:	ldxr	w0, [x20]
     534:	stlxr	w1, wzr, [x20]
     538:	cbnz	w1, 530 <gomp_target_fini+0xa8>
     53c:	tbnz	w0, #31, 550 <gomp_target_fini+0xc8>
     540:	cbnz	w19, 4d8 <gomp_target_fini+0x50>
     544:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     548:	add	x0, x0, #0x0
     54c:	bl	0 <gomp_fatal>
     550:	mov	x0, x20
     554:	bl	0 <gomp_mutex_unlock_slow>
     558:	cbnz	w19, 4d8 <gomp_target_fini+0x50>
     55c:	b	544 <gomp_target_fini+0xbc>
     560:	mov	x0, x20
     564:	bl	0 <gomp_mutex_unlock_slow>
     568:	ldr	w0, [x23]
     56c:	add	w22, w22, #0x1
     570:	add	x21, x21, #0x130
     574:	cmp	w0, w22
     578:	b.gt	4ec <gomp_target_fini+0x64>
     57c:	nop
     580:	ldp	x19, x20, [sp, #16]
     584:	ldp	x21, x22, [sp, #32]
     588:	ldr	x25, [sp, #64]
     58c:	ldp	x23, x24, [sp, #48]
     590:	ldp	x29, x30, [sp], #80
     594:	ret
     598:	mov	x0, x20
     59c:	bl	0 <gomp_mutex_lock_slow>
     5a0:	b	510 <gomp_target_fini+0x88>
     5a4:	nop

00000000000005a8 <gomp_copy_host2dev>:
     5a8:	stp	x29, x30, [sp, #-48]!
     5ac:	mov	x29, sp
     5b0:	stp	x19, x20, [sp, #16]
     5b4:	mov	x19, x0
     5b8:	mov	x20, x3
     5bc:	stp	x21, x22, [sp, #32]
     5c0:	mov	x21, x1
     5c4:	mov	x22, x2
     5c8:	cbz	x4, 640 <gomp_copy_host2dev+0x98>
     5cc:	ldp	x1, x12, [x4, #8]
     5d0:	ldr	x7, [x4, #24]
     5d4:	add	x0, x12, x7, lsl #4
     5d8:	ldr	x10, [x1, #16]
     5dc:	ldur	x0, [x0, #-8]
     5e0:	sub	x10, x21, x10
     5e4:	cmp	x0, x10
     5e8:	b.ls	640 <gomp_copy_host2dev+0x98>  // b.plast
     5ec:	subs	x7, x7, #0x1
     5f0:	b.mi	640 <gomp_copy_host2dev+0x98>  // b.first
     5f4:	mov	x8, #0x0                   	// #0
     5f8:	b	608 <gomp_copy_host2dev+0x60>
     5fc:	add	x8, x6, #0x1
     600:	cmp	x7, x8
     604:	b.lt	640 <gomp_copy_host2dev+0x98>  // b.tstop
     608:	add	x6, x7, x8
     60c:	asr	x6, x6, #1
     610:	lsl	x9, x6, #4
     614:	add	x11, x12, x9
     618:	ldr	x11, [x11, #8]
     61c:	cmp	x11, x10
     620:	b.ls	5fc <gomp_copy_host2dev+0x54>  // b.plast
     624:	ldr	x7, [x12, x9]
     628:	cmp	x7, x10
     62c:	b.ls	670 <gomp_copy_host2dev+0xc8>  // b.plast
     630:	sub	x7, x6, #0x1
     634:	cmp	x7, x8
     638:	b.ge	608 <gomp_copy_host2dev+0x60>  // b.tcont
     63c:	nop
     640:	ldr	w0, [x19, #12]
     644:	mov	x3, x20
     648:	ldr	x4, [x19, #120]
     64c:	mov	x2, x22
     650:	mov	x1, x21
     654:	blr	x4
     658:	tst	w0, #0xff
     65c:	b.eq	6a4 <gomp_copy_host2dev+0xfc>  // b.none
     660:	ldp	x19, x20, [sp, #16]
     664:	ldp	x21, x22, [sp, #32]
     668:	ldp	x29, x30, [sp], #48
     66c:	ret
     670:	add	x0, x10, x20
     674:	cmp	x11, x0
     678:	b.cc	6d8 <gomp_copy_host2dev+0x130>  // b.lo, b.ul, b.last
     67c:	ldr	x1, [x12]
     680:	mov	x2, x20
     684:	ldp	x19, x20, [sp, #16]
     688:	sub	x10, x10, x1
     68c:	mov	x1, x22
     690:	ldp	x21, x22, [sp, #32]
     694:	ldp	x29, x30, [sp], #48
     698:	ldr	x0, [x4]
     69c:	add	x0, x0, x10
     6a0:	b	0 <memcpy>
     6a4:	add	x0, x19, #0xa8
     6a8:	bl	2d0 <gomp_mutex_unlock>
     6ac:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
     6b0:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     6b4:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     6b8:	add	x6, x21, x20
     6bc:	add	x4, x4, #0x0
     6c0:	add	x1, x1, #0x0
     6c4:	mov	x5, x21
     6c8:	add	x0, x0, #0x0
     6cc:	add	x3, x22, x20
     6d0:	mov	x2, x22
     6d4:	bl	0 <gomp_fatal>
     6d8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     6dc:	add	x0, x0, #0x0
     6e0:	bl	0 <gomp_fatal>
     6e4:	nop

00000000000006e8 <gomp_map_pointer>:
     6e8:	stp	x29, x30, [sp, #-128]!
     6ec:	mov	x29, sp
     6f0:	stp	x19, x20, [sp, #16]
     6f4:	mov	x19, x0
     6f8:	stp	x21, x22, [sp, #32]
     6fc:	mov	x21, x2
     700:	stp	x23, x24, [sp, #48]
     704:	str	x1, [sp, #72]
     708:	ldr	x23, [x0, #56]
     70c:	cbz	x1, 7a4 <gomp_map_pointer+0xbc>
     710:	add	x5, x1, x3
     714:	add	x24, x23, #0xa0
     718:	add	x2, x5, #0x1
     71c:	add	x1, sp, #0x48
     720:	mov	x20, x3
     724:	mov	x22, x4
     728:	mov	x0, x24
     72c:	stp	x5, x2, [sp, #72]
     730:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     734:	ldr	x2, [sp, #80]
     738:	mov	x1, x0
     73c:	sub	x2, x2, #0x1
     740:	str	x2, [sp, #80]
     744:	cbz	x0, 7d4 <gomp_map_pointer+0xec>
     748:	ldr	x6, [sp, #72]
     74c:	mov	x4, x22
     750:	ldr	x5, [x1, #16]
     754:	add	x2, sp, #0x60
     758:	ldr	x3, [x1]
     75c:	mov	x0, x23
     760:	ldr	x5, [x5, #16]
     764:	sub	x6, x6, x3
     768:	ldr	x3, [x1, #24]
     76c:	add	x5, x6, x5
     770:	ldr	x1, [x19, #16]
     774:	sub	x20, x3, x20
     778:	add	x20, x5, x20
     77c:	mov	x3, #0x8                   	// #8
     780:	add	x1, x21, x1
     784:	str	x6, [sp, #72]
     788:	str	x20, [sp, #96]
     78c:	bl	5a8 <gomp_copy_host2dev>
     790:	ldp	x19, x20, [sp, #16]
     794:	ldp	x21, x22, [sp, #32]
     798:	ldp	x23, x24, [sp, #48]
     79c:	ldp	x29, x30, [sp], #128
     7a0:	ret
     7a4:	ldr	x1, [x19, #16]
     7a8:	mov	x0, x23
     7ac:	add	x2, sp, #0x60
     7b0:	mov	x3, #0x8                   	// #8
     7b4:	add	x1, x21, x1
     7b8:	str	xzr, [sp, #96]
     7bc:	bl	5a8 <gomp_copy_host2dev>
     7c0:	ldp	x19, x20, [sp, #16]
     7c4:	ldp	x21, x22, [sp, #32]
     7c8:	ldp	x23, x24, [sp, #48]
     7cc:	ldp	x29, x30, [sp], #128
     7d0:	ret
     7d4:	ldr	x2, [sp, #72]
     7d8:	add	x1, sp, #0x48
     7dc:	mov	x0, x24
     7e0:	sub	x2, x2, #0x1
     7e4:	str	x2, [sp, #72]
     7e8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     7ec:	mov	x1, x0
     7f0:	ldr	x6, [sp, #72]
     7f4:	add	x6, x6, #0x1
     7f8:	str	x6, [sp, #72]
     7fc:	cbnz	x0, 74c <gomp_map_pointer+0x64>
     800:	add	x1, sp, #0x48
     804:	mov	x0, x24
     808:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     80c:	mov	x1, x0
     810:	cbnz	x0, 748 <gomp_map_pointer+0x60>
     814:	add	x0, x23, #0xa8
     818:	bl	2d0 <gomp_mutex_unlock>
     81c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     820:	add	x0, x0, #0x0
     824:	bl	0 <gomp_fatal>

0000000000000828 <gomp_map_vars_existing.isra.0.part.0>:
     828:	stp	x29, x30, [sp, #-48]!
     82c:	add	x0, x0, #0xa8
     830:	mov	x29, sp
     834:	stp	x19, x20, [sp, #16]
     838:	mov	x19, x1
     83c:	mov	x20, x2
     840:	ldxr	w1, [x0]
     844:	stlxr	w2, wzr, [x0]
     848:	cbnz	w2, 840 <gomp_map_vars_existing.isra.0.part.0+0x18>
     84c:	tbnz	w1, #31, 868 <gomp_map_vars_existing.isra.0.part.0+0x40>
     850:	ldr	x2, [x3]
     854:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     858:	ldp	x3, x4, [x19]
     85c:	add	x0, x0, #0x0
     860:	ldr	x1, [x20]
     864:	bl	0 <gomp_fatal>
     868:	str	x3, [sp, #40]
     86c:	bl	0 <gomp_mutex_unlock_slow>
     870:	ldr	x3, [sp, #40]
     874:	b	850 <gomp_map_vars_existing.isra.0.part.0+0x28>

0000000000000878 <gomp_get_target_fn_addr.part.0>:
     878:	stp	x29, x30, [sp, #-112]!
     87c:	mov	x29, sp
     880:	str	x21, [sp, #32]
     884:	mov	x21, x1
     888:	stp	x19, x20, [sp, #16]
     88c:	mov	x19, x0
     890:	add	x20, x0, #0xa8
     894:	mov	w0, #0x1                   	// #1
     898:	ldaxr	w1, [x20]
     89c:	cbnz	w1, 8a8 <gomp_get_target_fn_addr.part.0+0x30>
     8a0:	stxr	w2, w0, [x20]
     8a4:	cbnz	w2, 898 <gomp_get_target_fn_addr.part.0+0x20>
     8a8:	cmp	w1, #0x0
     8ac:	b.ne	93c <gomp_get_target_fn_addr.part.0+0xc4>  // b.any
     8b0:	ldr	w0, [x19, #172]
     8b4:	cmp	w0, #0x2
     8b8:	b.eq	8fc <gomp_get_target_fn_addr.part.0+0x84>  // b.none
     8bc:	add	x2, x21, #0x1
     8c0:	add	x0, x19, #0xa0
     8c4:	add	x1, sp, #0x38
     8c8:	stp	x21, x2, [sp, #56]
     8cc:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     8d0:	mov	x19, x0
     8d4:	ldxr	w0, [x20]
     8d8:	stlxr	w1, wzr, [x20]
     8dc:	cbnz	w1, 8d4 <gomp_get_target_fn_addr.part.0+0x5c>
     8e0:	tbnz	w0, #31, 920 <gomp_get_target_fn_addr.part.0+0xa8>
     8e4:	cbz	x19, 90c <gomp_get_target_fn_addr.part.0+0x94>
     8e8:	ldr	x0, [x19, #24]
     8ec:	ldp	x19, x20, [sp, #16]
     8f0:	ldr	x21, [sp, #32]
     8f4:	ldp	x29, x30, [sp], #112
     8f8:	ret
     8fc:	ldxr	w0, [x20]
     900:	stlxr	w1, wzr, [x20]
     904:	cbnz	w1, 8fc <gomp_get_target_fn_addr.part.0+0x84>
     908:	tbnz	w0, #31, 92c <gomp_get_target_fn_addr.part.0+0xb4>
     90c:	mov	x0, #0x0                   	// #0
     910:	ldp	x19, x20, [sp, #16]
     914:	ldr	x21, [sp, #32]
     918:	ldp	x29, x30, [sp], #112
     91c:	ret
     920:	mov	x0, x20
     924:	bl	0 <gomp_mutex_unlock_slow>
     928:	b	8e4 <gomp_get_target_fn_addr.part.0+0x6c>
     92c:	mov	x0, x20
     930:	bl	0 <gomp_mutex_unlock_slow>
     934:	mov	x0, #0x0                   	// #0
     938:	b	910 <gomp_get_target_fn_addr.part.0+0x98>
     93c:	mov	x0, x20
     940:	bl	0 <gomp_mutex_lock_slow>
     944:	b	8b0 <gomp_get_target_fn_addr.part.0+0x38>

0000000000000948 <gomp_update>:
     948:	stp	x29, x30, [sp, #-192]!
     94c:	mov	x29, sp
     950:	stp	x19, x20, [sp, #16]
     954:	mov	x20, x0
     958:	mov	w0, #0x7                   	// #7
     95c:	stp	x21, x22, [sp, #32]
     960:	mov	w22, #0xff                  	// #255
     964:	stp	x25, x26, [sp, #64]
     968:	ands	w25, w5, #0xff
     96c:	csel	w22, w22, w0, ne  // ne = any
     970:	str	x4, [sp, #96]
     974:	cmp	x20, #0x0
     978:	ccmp	x1, #0x0, #0x4, ne  // ne = any
     97c:	b.eq	af0 <gomp_update+0x1a8>  // b.none
     980:	add	x0, x20, #0xa8
     984:	mov	x26, x1
     988:	stp	x23, x24, [sp, #48]
     98c:	mov	x23, x3
     990:	mov	x21, x2
     994:	mov	x2, x0
     998:	mov	w0, #0x1                   	// #1
     99c:	str	x2, [sp, #104]
     9a0:	ldaxr	w1, [x2]
     9a4:	cbnz	w1, 9b0 <gomp_update+0x68>
     9a8:	stxr	w3, w0, [x2]
     9ac:	cbnz	w3, 9a0 <gomp_update+0x58>
     9b0:	cmp	w1, #0x0
     9b4:	b.ne	bf0 <gomp_update+0x2a8>  // b.any
     9b8:	ldr	w0, [x20, #172]
     9bc:	mov	x19, #0x0                   	// #0
     9c0:	cmp	w0, #0x2
     9c4:	b.eq	b78 <gomp_update+0x230>  // b.none
     9c8:	add	x24, x20, #0xa0
     9cc:	stp	x27, x28, [sp, #80]
     9d0:	b	9e0 <gomp_update+0x98>
     9d4:	add	x19, x19, #0x1
     9d8:	cmp	x26, x19
     9dc:	b.ls	ad4 <gomp_update+0x18c>  // b.plast
     9e0:	ldr	x5, [x23, x19, lsl #3]
     9e4:	cbz	x5, 9d4 <gomp_update+0x8c>
     9e8:	ldr	x2, [x21, x19, lsl #3]
     9ec:	add	x1, sp, #0x88
     9f0:	mov	x0, x24
     9f4:	add	x5, x5, x2
     9f8:	stp	x2, x5, [sp, #136]
     9fc:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     a00:	mov	x28, x0
     a04:	cbz	x0, 9d4 <gomp_update+0x8c>
     a08:	sxtw	x0, w19
     a0c:	ldr	x1, [sp, #96]
     a10:	cbz	w25, b04 <gomp_update+0x1bc>
     a14:	ldrh	w4, [x1, x0, lsl #1]
     a18:	ldr	x1, [x28]
     a1c:	ldr	x8, [sp, #136]
     a20:	cmp	x1, x8
     a24:	b.hi	bc8 <gomp_update+0x280>  // b.pmore
     a28:	ldr	x0, [x28, #8]
     a2c:	ldr	x3, [sp, #144]
     a30:	cmp	x0, x3
     a34:	b.cc	bc8 <gomp_update+0x280>  // b.lo, b.ul, b.last
     a38:	ldp	x2, x0, [x28, #16]
     a3c:	and	w4, w22, w4
     a40:	mov	w5, #0xd                   	// #13
     a44:	and	w5, w4, w5
     a48:	sub	x27, x3, x8
     a4c:	cmp	w5, #0x1
     a50:	ldr	x2, [x2, #16]
     a54:	add	x0, x8, x0
     a58:	sub	x2, x2, x1
     a5c:	add	x28, x2, x0
     a60:	b.eq	b0c <gomp_update+0x1c4>  // b.none
     a64:	and	w4, w4, #0xe
     a68:	cmp	w4, #0x2
     a6c:	b.ne	9d4 <gomp_update+0x8c>  // b.any
     a70:	ldr	w0, [x20, #12]
     a74:	mov	x1, x8
     a78:	ldr	x4, [x20, #112]
     a7c:	mov	x3, x27
     a80:	mov	x2, x28
     a84:	str	x8, [sp, #112]
     a88:	blr	x4
     a8c:	tst	w0, #0xff
     a90:	ldr	x8, [sp, #112]
     a94:	b.ne	9d4 <gomp_update+0x8c>  // b.any
     a98:	ldr	x0, [sp, #104]
     a9c:	str	x8, [sp, #96]
     aa0:	bl	2d0 <gomp_mutex_unlock>
     aa4:	ldr	x8, [sp, #96]
     aa8:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
     aac:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     ab0:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     ab4:	add	x4, x4, #0x0
     ab8:	add	x1, x1, #0x0
     abc:	add	x0, x0, #0x0
     ac0:	add	x3, x28, x27
     ac4:	mov	x2, x28
     ac8:	add	x6, x8, x27
     acc:	mov	x5, x8
     ad0:	bl	0 <gomp_fatal>
     ad4:	ldr	x1, [sp, #104]
     ad8:	ldxr	w0, [x1]
     adc:	stlxr	w2, wzr, [x1]
     ae0:	cbnz	w2, ad8 <gomp_update+0x190>
     ae4:	tbnz	w0, #31, ba4 <gomp_update+0x25c>
     ae8:	ldp	x23, x24, [sp, #48]
     aec:	ldp	x27, x28, [sp, #80]
     af0:	ldp	x19, x20, [sp, #16]
     af4:	ldp	x21, x22, [sp, #32]
     af8:	ldp	x25, x26, [sp, #64]
     afc:	ldp	x29, x30, [sp], #192
     b00:	ret
     b04:	ldrb	w4, [x1, x0]
     b08:	b	a18 <gomp_update+0xd0>
     b0c:	ldr	w0, [x20, #12]
     b10:	mov	x2, x8
     b14:	ldr	x5, [x20, #120]
     b18:	mov	x3, x27
     b1c:	mov	x1, x28
     b20:	str	x8, [sp, #112]
     b24:	str	w4, [sp, #124]
     b28:	blr	x5
     b2c:	tst	w0, #0xff
     b30:	ldr	w4, [sp, #124]
     b34:	ldr	x8, [sp, #112]
     b38:	b.ne	a64 <gomp_update+0x11c>  // b.any
     b3c:	ldr	x0, [sp, #104]
     b40:	str	x8, [sp, #96]
     b44:	bl	2d0 <gomp_mutex_unlock>
     b48:	ldr	x8, [sp, #96]
     b4c:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
     b50:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     b54:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     b58:	add	x6, x28, x27
     b5c:	add	x4, x4, #0x0
     b60:	add	x1, x1, #0x0
     b64:	mov	x5, x28
     b68:	add	x0, x0, #0x0
     b6c:	add	x3, x8, x27
     b70:	mov	x2, x8
     b74:	bl	0 <gomp_fatal>
     b78:	ldr	x1, [sp, #104]
     b7c:	ldxr	w0, [x1]
     b80:	stlxr	w2, wzr, [x1]
     b84:	cbnz	w2, b7c <gomp_update+0x234>
     b88:	tbnz	w0, #31, bb8 <gomp_update+0x270>
     b8c:	ldp	x19, x20, [sp, #16]
     b90:	ldp	x21, x22, [sp, #32]
     b94:	ldp	x23, x24, [sp, #48]
     b98:	ldp	x25, x26, [sp, #64]
     b9c:	ldp	x29, x30, [sp], #192
     ba0:	ret
     ba4:	ldr	x0, [sp, #104]
     ba8:	bl	0 <gomp_mutex_unlock_slow>
     bac:	ldp	x23, x24, [sp, #48]
     bb0:	ldp	x27, x28, [sp, #80]
     bb4:	b	af0 <gomp_update+0x1a8>
     bb8:	ldr	x0, [sp, #104]
     bbc:	bl	0 <gomp_mutex_unlock_slow>
     bc0:	ldp	x23, x24, [sp, #48]
     bc4:	b	af0 <gomp_update+0x1a8>
     bc8:	ldr	x1, [sp, #104]
     bcc:	ldxr	w0, [x1]
     bd0:	stlxr	w2, wzr, [x1]
     bd4:	cbnz	w2, bcc <gomp_update+0x284>
     bd8:	tbnz	w0, #31, bfc <gomp_update+0x2b4>
     bdc:	ldp	x3, x4, [x28]
     be0:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     be4:	ldp	x1, x2, [sp, #136]
     be8:	add	x0, x0, #0x0
     bec:	bl	0 <gomp_fatal>
     bf0:	ldr	x0, [sp, #104]
     bf4:	bl	0 <gomp_mutex_lock_slow>
     bf8:	b	9b8 <gomp_update+0x70>
     bfc:	ldr	x0, [sp, #104]
     c00:	bl	0 <gomp_mutex_unlock_slow>
     c04:	b	bdc <gomp_update+0x294>

0000000000000c08 <gomp_load_image_to_device>:
     c08:	stp	x29, x30, [sp, #-144]!
     c0c:	mov	x5, x2
     c10:	mov	x2, x3
     c14:	mov	x29, sp
     c18:	stp	x23, x24, [sp, #48]
     c1c:	mov	x23, x0
     c20:	and	w0, w4, #0xff
     c24:	stp	x25, x26, [sp, #64]
     c28:	add	x3, sp, #0x88
     c2c:	str	w0, [sp, #124]
     c30:	ldr	x0, [x5, #16]
     c34:	stp	x27, x28, [sp, #80]
     c38:	ldr	x25, [x5, #24]
     c3c:	stp	x19, x20, [sp, #16]
     c40:	ldp	x27, x26, [x5]
     c44:	sub	x25, x25, x0
     c48:	stp	x21, x22, [sp, #32]
     c4c:	lsr	x4, x25, #63
     c50:	add	x25, x4, x25, asr #3
     c54:	str	xzr, [sp, #136]
     c58:	ldr	x4, [x23, #80]
     c5c:	asr	x20, x25, #1
     c60:	sub	x26, x26, x27
     c64:	stp	x20, x0, [sp, #104]
     c68:	ldr	w0, [x23, #12]
     c6c:	asr	x26, x26, #3
     c70:	add	w22, w20, w26
     c74:	blr	x4
     c78:	mov	w19, w0
     c7c:	cmp	w22, w0
     c80:	b.ne	e38 <gomp_load_image_to_device+0x230>  // b.any
     c84:	mov	x0, #0x40                  	// #64
     c88:	bl	0 <gomp_malloc>
     c8c:	mov	w1, #0x48                  	// #72
     c90:	mov	x20, x0
     c94:	smull	x0, w22, w1
     c98:	mov	x22, #0xffffffffffffffff    	// #-1
     c9c:	bl	0 <gomp_malloc>
     ca0:	stp	x22, x0, [x20]
     ca4:	mov	x19, x0
     ca8:	stp	xzr, xzr, [x20, #16]
     cac:	cmp	w26, #0x0
     cb0:	stp	xzr, xzr, [x20, #32]
     cb4:	stp	xzr, x23, [x20, #48]
     cb8:	b.le	d24 <gomp_load_image_to_device+0x11c>
     cbc:	mov	w28, w26
     cc0:	add	x25, x23, #0xa0
     cc4:	mov	x21, x0
     cc8:	mov	x24, #0x0                   	// #0
     ccc:	nop
     cd0:	ldr	x3, [x27, x24, lsl #3]
     cd4:	lsl	x4, x24, #4
     cd8:	ldr	x5, [sp, #136]
     cdc:	add	x6, x3, #0x1
     ce0:	stp	x3, x6, [x21]
     ce4:	mov	x1, x21
     ce8:	add	x24, x24, #0x1
     cec:	ldr	x3, [x5, x4]
     cf0:	str	x20, [x21, #16]
     cf4:	stp	x3, x22, [x21, #24]
     cf8:	mov	x0, x25
     cfc:	stp	xzr, xzr, [x21, #48]
     d00:	add	x21, x21, #0x48
     d04:	stur	xzr, [x21, #-8]
     d08:	bl	0 <splay_tree_prefix_splay_tree_insert>
     d0c:	cmp	w28, w24
     d10:	b.gt	cd0 <gomp_load_image_to_device+0xc8>
     d14:	sub	w0, w26, #0x1
     d18:	add	x0, x0, #0x1
     d1c:	add	x0, x0, x0, lsl #3
     d20:	add	x19, x19, x0, lsl #3
     d24:	ldr	w0, [sp, #104]
     d28:	cmp	w0, #0x0
     d2c:	b.le	dc0 <gomp_load_image_to_device+0x1b8>
     d30:	ldr	w0, [sp, #104]
     d34:	sbfiz	x22, x26, #4, #32
     d38:	ldr	x27, [sp, #112]
     d3c:	sub	w25, w0, #0x1
     d40:	add	x21, x25, #0x1
     d44:	add	x25, x23, #0xa0
     d48:	sub	x22, x22, x27
     d4c:	add	x21, x21, x21, lsl #3
     d50:	add	x21, x19, x21, lsl #3
     d54:	nop
     d58:	ldr	x2, [sp, #136]
     d5c:	add	x0, x22, x27
     d60:	ldr	x1, [x27, #8]
     d64:	add	x3, x2, x0
     d68:	ldr	x4, [x2, x0]
     d6c:	ldr	x0, [x3, #8]
     d70:	sub	x0, x0, x4
     d74:	cmp	x1, x0
     d78:	b.ne	de4 <gomp_load_image_to_device+0x1dc>  // b.any
     d7c:	mvn	x3, x1
     d80:	and	x2, x1, #0x7fffffffffffffff
     d84:	ldr	x5, [x27], #16
     d88:	lsr	x3, x3, #63
     d8c:	sub	x3, x3, #0x2
     d90:	stp	x20, x4, [x19, #16]
     d94:	add	x2, x2, x5
     d98:	stp	x5, x2, [x19]
     d9c:	mov	x1, x19
     da0:	mov	x0, x25
     da4:	str	x3, [x19, #32]
     da8:	stp	xzr, xzr, [x19, #48]
     dac:	add	x19, x19, #0x48
     db0:	stur	xzr, [x19, #-8]
     db4:	bl	0 <splay_tree_prefix_splay_tree_insert>
     db8:	cmp	x19, x21
     dbc:	b.ne	d58 <gomp_load_image_to_device+0x150>  // b.any
     dc0:	ldr	x0, [sp, #136]
     dc4:	bl	0 <free>
     dc8:	ldp	x19, x20, [sp, #16]
     dcc:	ldp	x21, x22, [sp, #32]
     dd0:	ldp	x23, x24, [sp, #48]
     dd4:	ldp	x25, x26, [sp, #64]
     dd8:	ldp	x27, x28, [sp, #80]
     ddc:	ldp	x29, x30, [sp], #144
     de0:	ret
     de4:	add	x0, x23, #0xa8
     de8:	ldxr	w1, [x0]
     dec:	stlxr	w2, wzr, [x0]
     df0:	cbnz	w2, de8 <gomp_load_image_to_device+0x1e0>
     df4:	tbnz	w1, #31, e30 <gomp_load_image_to_device+0x228>
     df8:	ldr	w0, [sp, #124]
     dfc:	cbnz	w0, e0c <gomp_load_image_to_device+0x204>
     e00:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     e04:	add	x0, x0, #0x0
     e08:	bl	0 <gomp_fatal>
     e0c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     e10:	add	x0, x0, #0x0
     e14:	add	x0, x0, #0x10
     e18:	ldxr	w1, [x0]
     e1c:	stlxr	w2, wzr, [x0]
     e20:	cbnz	w2, e18 <gomp_load_image_to_device+0x210>
     e24:	tbz	w1, #31, e00 <gomp_load_image_to_device+0x1f8>
     e28:	bl	0 <gomp_mutex_unlock_slow>
     e2c:	b	e00 <gomp_load_image_to_device+0x1f8>
     e30:	bl	0 <gomp_mutex_unlock_slow>
     e34:	b	df8 <gomp_load_image_to_device+0x1f0>
     e38:	add	x0, x23, #0xa8
     e3c:	bl	2d0 <gomp_mutex_unlock>
     e40:	ldr	w0, [sp, #124]
     e44:	cbnz	w0, e5c <gomp_load_image_to_device+0x254>
     e48:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     e4c:	mov	w2, w19
     e50:	mov	w1, w22
     e54:	add	x0, x0, #0x0
     e58:	bl	0 <gomp_fatal>
     e5c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     e60:	add	x0, x0, #0x0
     e64:	add	x0, x0, #0x10
     e68:	bl	2d0 <gomp_mutex_unlock>
     e6c:	b	e48 <gomp_load_image_to_device+0x240>

0000000000000e70 <gomp_exit_data>:
     e70:	stp	x29, x30, [sp, #-192]!
     e74:	mov	x29, sp
     e78:	stp	x21, x22, [sp, #32]
     e7c:	mov	x21, x1
     e80:	stp	x23, x24, [sp, #48]
     e84:	mov	x23, x3
     e88:	mov	x24, x4
     e8c:	stp	x25, x26, [sp, #64]
     e90:	mov	x25, x0
     e94:	add	x0, x0, #0xa8
     e98:	str	x2, [sp, #104]
     e9c:	mov	x2, x0
     ea0:	mov	w0, #0x1                   	// #1
     ea4:	str	x2, [sp, #120]
     ea8:	ldaxr	w1, [x2]
     eac:	cbnz	w1, eb8 <gomp_exit_data+0x48>
     eb0:	stxr	w3, w0, [x2]
     eb4:	cbnz	w3, ea8 <gomp_exit_data+0x38>
     eb8:	cmp	w1, #0x0
     ebc:	b.ne	112c <gomp_exit_data+0x2bc>  // b.any
     ec0:	ldr	w0, [x25, #172]
     ec4:	cmp	w0, #0x2
     ec8:	b.eq	1108 <gomp_exit_data+0x298>  // b.none
     ecc:	mov	x22, #0x0                   	// #0
     ed0:	cbz	x21, fd8 <gomp_exit_data+0x168>
     ed4:	stp	x19, x20, [sp, #16]
     ed8:	add	x20, x25, #0xa0
     edc:	stp	x27, x28, [sp, #80]
     ee0:	mov	x27, #0x1                   	// #1
     ee4:	nop
     ee8:	ldrh	w2, [x24, x22, lsl #1]
     eec:	and	w28, w2, #0xff
     ef0:	cmp	w28, #0x1f
     ef4:	b.hi	f0c <gomp_exit_data+0x9c>  // b.pmore
     ef8:	mov	x1, #0x8084                	// #32900
     efc:	lsl	x0, x27, x28
     f00:	movk	x1, #0x8084, lsl #16
     f04:	tst	x0, x1
     f08:	b.ne	f30 <gomp_exit_data+0xc0>  // b.any
     f0c:	ldr	x1, [sp, #120]
     f10:	ldxr	w0, [x1]
     f14:	stlxr	w2, wzr, [x1]
     f18:	cbnz	w2, f10 <gomp_exit_data+0xa0>
     f1c:	tbnz	w0, #31, 1138 <gomp_exit_data+0x2c8>
     f20:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     f24:	mov	w1, w28
     f28:	add	x0, x0, #0x0
     f2c:	bl	0 <gomp_fatal>
     f30:	ldr	x0, [sp, #104]
     f34:	cmp	w28, #0x1f
     f38:	and	w3, w28, #0xffffffef
     f3c:	cset	w19, eq  // eq = none
     f40:	cmp	w3, #0xf
     f44:	ldr	x1, [x0, x22, lsl #3]
     f48:	ldr	x0, [x23, x22, lsl #3]
     f4c:	add	x0, x1, x0
     f50:	stp	x1, x0, [sp, #136]
     f54:	b.ne	1000 <gomp_exit_data+0x190>  // b.any
     f58:	cmp	x1, x0
     f5c:	b.ne	1000 <gomp_exit_data+0x190>  // b.any
     f60:	add	x3, x1, #0x1
     f64:	mov	x0, x20
     f68:	add	x1, sp, #0x88
     f6c:	str	x3, [sp, #144]
     f70:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     f74:	mov	x26, x0
     f78:	ldr	x1, [sp, #144]
     f7c:	sub	x1, x1, #0x1
     f80:	str	x1, [sp, #144]
     f84:	cbz	x26, fc4 <gomp_exit_data+0x154>
     f88:	ldr	x0, [x26, #32]
     f8c:	cmp	w28, #0x7
     f90:	csinc	w19, w19, wzr, ne  // ne = any
     f94:	sub	x1, x0, #0x1
     f98:	cmn	x1, #0x3
     f9c:	b.hi	10b0 <gomp_exit_data+0x240>  // b.pmore
     fa0:	str	x1, [x26, #32]
     fa4:	cbz	w19, 1014 <gomp_exit_data+0x1a4>
     fa8:	str	xzr, [x26, #32]
     fac:	cmp	w28, #0x2
     fb0:	b.eq	1028 <gomp_exit_data+0x1b8>  // b.none
     fb4:	cmp	w28, #0x12
     fb8:	b.eq	1028 <gomp_exit_data+0x1b8>  // b.none
     fbc:	ldr	x0, [x26, #32]
     fc0:	cbz	x0, 10c8 <gomp_exit_data+0x258>
     fc4:	add	x22, x22, #0x1
     fc8:	cmp	x21, x22
     fcc:	b.ne	ee8 <gomp_exit_data+0x78>  // b.any
     fd0:	ldp	x19, x20, [sp, #16]
     fd4:	ldp	x27, x28, [sp, #80]
     fd8:	ldr	x1, [sp, #120]
     fdc:	ldxr	w0, [x1]
     fe0:	stlxr	w2, wzr, [x1]
     fe4:	cbnz	w2, fdc <gomp_exit_data+0x16c>
     fe8:	tbnz	w0, #31, 1120 <gomp_exit_data+0x2b0>
     fec:	ldp	x21, x22, [sp, #32]
     ff0:	ldp	x23, x24, [sp, #48]
     ff4:	ldp	x25, x26, [sp, #64]
     ff8:	ldp	x29, x30, [sp], #192
     ffc:	ret
    1000:	add	x1, sp, #0x88
    1004:	mov	x0, x20
    1008:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    100c:	mov	x26, x0
    1010:	b	f84 <gomp_exit_data+0x114>
    1014:	cmp	w28, #0x2
    1018:	b.ne	fb4 <gomp_exit_data+0x144>  // b.any
    101c:	ldr	x0, [x26, #32]
    1020:	cbnz	x0, fc4 <gomp_exit_data+0x154>
    1024:	nop
    1028:	ldr	x2, [x26, #16]
    102c:	ldp	x5, x3, [sp, #136]
    1030:	str	x5, [sp, #112]
    1034:	ldr	x0, [x26]
    1038:	ldr	x19, [x2, #16]
    103c:	ldr	x2, [x26, #24]
    1040:	sub	x19, x19, x0
    1044:	ldr	w0, [x25, #12]
    1048:	sub	x28, x3, x5
    104c:	ldr	x7, [x25, #112]
    1050:	add	x2, x5, x2
    1054:	add	x19, x19, x2
    1058:	mov	x1, x5
    105c:	mov	x2, x19
    1060:	mov	x3, x28
    1064:	blr	x7
    1068:	tst	w0, #0xff
    106c:	ldr	x5, [sp, #112]
    1070:	b.ne	fbc <gomp_exit_data+0x14c>  // b.any
    1074:	ldr	x1, [sp, #120]
    1078:	ldxr	w0, [x1]
    107c:	stlxr	w2, wzr, [x1]
    1080:	cbnz	w2, 1078 <gomp_exit_data+0x208>
    1084:	tbnz	w0, #31, 1144 <gomp_exit_data+0x2d4>
    1088:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    108c:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    1090:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1094:	add	x4, x4, #0x0
    1098:	add	x1, x1, #0x0
    109c:	add	x6, x5, x28
    10a0:	add	x0, x0, #0x0
    10a4:	add	x3, x19, x28
    10a8:	mov	x2, x19
    10ac:	bl	0 <gomp_fatal>
    10b0:	cbz	w19, 1014 <gomp_exit_data+0x1a4>
    10b4:	cmn	x0, #0x1
    10b8:	b.ne	fa8 <gomp_exit_data+0x138>  // b.any
    10bc:	cmp	w28, #0x2
    10c0:	b.ne	fb4 <gomp_exit_data+0x144>  // b.any
    10c4:	b	fc4 <gomp_exit_data+0x154>
    10c8:	mov	x1, x26
    10cc:	mov	x0, x20
    10d0:	bl	0 <splay_tree_prefix_splay_tree_remove>
    10d4:	ldr	x1, [x26, #48]
    10d8:	cbz	x1, 10e4 <gomp_exit_data+0x274>
    10dc:	mov	x0, x20
    10e0:	bl	0 <splay_tree_prefix_splay_tree_insert>
    10e4:	ldr	x0, [x26, #16]
    10e8:	ldr	x1, [x0]
    10ec:	cmp	x1, #0x1
    10f0:	b.ls	1100 <gomp_exit_data+0x290>  // b.plast
    10f4:	sub	x1, x1, #0x1
    10f8:	str	x1, [x0]
    10fc:	b	fc4 <gomp_exit_data+0x154>
    1100:	bl	430 <gomp_unmap_tgt>
    1104:	b	fc4 <gomp_exit_data+0x154>
    1108:	ldr	x1, [sp, #120]
    110c:	ldxr	w0, [x1]
    1110:	stlxr	w2, wzr, [x1]
    1114:	cbnz	w2, 110c <gomp_exit_data+0x29c>
    1118:	tbz	w0, #31, fec <gomp_exit_data+0x17c>
    111c:	nop
    1120:	ldr	x0, [sp, #120]
    1124:	bl	0 <gomp_mutex_unlock_slow>
    1128:	b	fec <gomp_exit_data+0x17c>
    112c:	ldr	x0, [sp, #120]
    1130:	bl	0 <gomp_mutex_lock_slow>
    1134:	b	ec0 <gomp_exit_data+0x50>
    1138:	ldr	x0, [sp, #120]
    113c:	bl	0 <gomp_mutex_unlock_slow>
    1140:	b	f20 <gomp_exit_data+0xb0>
    1144:	ldr	x0, [sp, #120]
    1148:	str	x5, [sp, #104]
    114c:	bl	0 <gomp_mutex_unlock_slow>
    1150:	ldr	x5, [sp, #104]
    1154:	b	1088 <gomp_exit_data+0x218>

0000000000001158 <gomp_map_fields_existing>:
    1158:	stp	x29, x30, [sp, #-176]!
    115c:	mov	x29, sp
    1160:	stp	x19, x20, [sp, #16]
    1164:	mov	x19, x3
    1168:	mov	x20, x2
    116c:	ldr	x8, [x4, x3, lsl #3]
    1170:	stp	x23, x24, [sp, #48]
    1174:	ldr	x3, [x5, x3, lsl #3]
    1178:	stp	x25, x26, [sp, #64]
    117c:	mov	x26, x6
    1180:	ldr	x24, [x0, #56]
    1184:	add	x3, x3, x8
    1188:	mov	x25, x0
    118c:	stp	x21, x22, [sp, #32]
    1190:	add	x23, x24, #0xa0
    1194:	mov	x21, x1
    1198:	mov	x0, x23
    119c:	add	x1, sp, #0x78
    11a0:	stp	x27, x28, [sp, #80]
    11a4:	mov	x27, x4
    11a8:	mov	x28, x5
    11ac:	str	x7, [sp, #104]
    11b0:	stp	x8, x3, [sp, #120]
    11b4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    11b8:	ldrh	w26, [x26, w19, sxtw #1]
    11bc:	cbz	x0, 11d4 <gomp_map_fields_existing+0x7c>
    11c0:	mov	x22, x0
    11c4:	ldr	x0, [x21, #16]
    11c8:	ldr	x4, [x22, #16]
    11cc:	cmp	x4, x0
    11d0:	b.eq	13c0 <gomp_map_fields_existing+0x268>  // b.none
    11d4:	ldr	x0, [x28, x19, lsl #3]
    11d8:	cbnz	x0, 1498 <gomp_map_fields_existing+0x340>
    11dc:	add	x20, x27, x20, lsl #3
    11e0:	ldr	x0, [sp, #120]
    11e4:	ldur	x1, [x20, #-8]
    11e8:	cmp	x1, x0
    11ec:	b.cc	12e4 <gomp_map_fields_existing+0x18c>  // b.lo, b.ul, b.last
    11f0:	ldr	x4, [sp, #128]
    11f4:	add	x4, x4, #0x1
    11f8:	add	x1, sp, #0x78
    11fc:	mov	x0, x23
    1200:	str	x4, [sp, #128]
    1204:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1208:	mov	x20, x0
    120c:	ldr	x4, [sp, #128]
    1210:	sub	x4, x4, #0x1
    1214:	str	x4, [sp, #128]
    1218:	cbz	x0, 1498 <gomp_map_fields_existing+0x340>
    121c:	ldr	x5, [x0, #16]
    1220:	ldr	x0, [x21, #16]
    1224:	cmp	x5, x0
    1228:	b.ne	1498 <gomp_map_fields_existing+0x340>  // b.any
    122c:	ldr	x6, [x20]
    1230:	ldr	x2, [x21]
    1234:	ldr	x1, [x20, #24]
    1238:	sub	x2, x6, x2
    123c:	ldr	x0, [x21, #24]
    1240:	sub	x0, x1, x0
    1244:	cmp	x2, x0
    1248:	b.ne	1498 <gomp_map_fields_existing+0x340>  // b.any
    124c:	and	w0, w26, #0xff
    1250:	add	x19, x25, x19, lsl #5
    1254:	and	w7, w26, #0xe
    1258:	sub	w3, w0, #0x12
    125c:	ldr	x2, [sp, #120]
    1260:	cmp	w7, #0x2
    1264:	and	w3, w3, #0xff
    1268:	cset	w9, eq  // eq = none
    126c:	cmp	w3, #0x1
    1270:	sub	x7, x2, x6
    1274:	cset	w8, ls  // ls = plast
    1278:	sub	x3, x4, x2
    127c:	str	x20, [x19, #64]
    1280:	tst	x26, #0x80
    1284:	strb	w9, [x19, #72]
    1288:	add	x1, x1, x2
    128c:	strb	w8, [x19, #73]
    1290:	ccmp	x6, x2, #0x2, eq  // eq = none
    1294:	stp	x7, x3, [x19, #80]
    1298:	b.hi	14bc <gomp_map_fields_existing+0x364>  // b.pmore
    129c:	ldr	x7, [x20, #8]
    12a0:	cmp	x4, x7
    12a4:	b.hi	14bc <gomp_map_fields_existing+0x364>  // b.pmore
    12a8:	and	w0, w0, #0xfffffffd
    12ac:	cmp	w0, #0x11
    12b0:	b.eq	1460 <gomp_map_fields_existing+0x308>  // b.none
    12b4:	ldr	x0, [x20, #32]
    12b8:	cmn	x0, #0x1
    12bc:	b.eq	12c8 <gomp_map_fields_existing+0x170>  // b.none
    12c0:	add	x0, x0, #0x1
    12c4:	str	x0, [x20, #32]
    12c8:	ldp	x19, x20, [sp, #16]
    12cc:	ldp	x21, x22, [sp, #32]
    12d0:	ldp	x23, x24, [sp, #48]
    12d4:	ldp	x25, x26, [sp, #64]
    12d8:	ldp	x27, x28, [sp, #80]
    12dc:	ldp	x29, x30, [sp], #176
    12e0:	ret
    12e4:	sub	x2, x0, #0x1
    12e8:	add	x1, sp, #0x78
    12ec:	mov	x0, x23
    12f0:	str	x2, [sp, #120]
    12f4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    12f8:	mov	x20, x0
    12fc:	ldr	x2, [sp, #120]
    1300:	add	x2, x2, #0x1
    1304:	str	x2, [sp, #120]
    1308:	cbz	x0, 11f0 <gomp_map_fields_existing+0x98>
    130c:	ldr	x0, [x0, #16]
    1310:	ldr	x1, [x21, #16]
    1314:	ldr	x4, [sp, #128]
    1318:	cmp	x0, x1
    131c:	b.ne	11f4 <gomp_map_fields_existing+0x9c>  // b.any
    1320:	ldr	x7, [x20]
    1324:	ldr	x6, [x21]
    1328:	ldr	x3, [x20, #24]
    132c:	sub	x6, x7, x6
    1330:	ldr	x8, [x21, #24]
    1334:	add	x1, x2, x3
    1338:	sub	x3, x3, x8
    133c:	cmp	x6, x3
    1340:	b.ne	11f4 <gomp_map_fields_existing+0x9c>  // b.any
    1344:	and	w5, w26, #0xff
    1348:	add	x19, x25, x19, lsl #5
    134c:	and	w6, w26, #0xe
    1350:	sub	w3, w5, #0x12
    1354:	cmp	w6, #0x2
    1358:	and	w3, w3, #0xff
    135c:	cset	w9, eq  // eq = none
    1360:	cmp	w3, #0x1
    1364:	cset	w8, ls  // ls = plast
    1368:	sub	x6, x2, x7
    136c:	sub	x3, x4, x2
    1370:	str	x20, [x19, #64]
    1374:	strb	w9, [x19, #72]
    1378:	tst	x26, #0x80
    137c:	strb	w8, [x19, #73]
    1380:	ccmp	x2, x7, #0x0, eq  // eq = none
    1384:	stp	x6, x3, [x19, #80]
    1388:	b.cc	1508 <gomp_map_fields_existing+0x3b0>  // b.lo, b.ul, b.last
    138c:	ldr	x6, [x20, #8]
    1390:	cmp	x6, x4
    1394:	b.cc	1508 <gomp_map_fields_existing+0x3b0>  // b.lo, b.ul, b.last
    1398:	and	w5, w5, #0xfffffffd
    139c:	cmp	w5, #0x11
    13a0:	b.ne	12b4 <gomp_map_fields_existing+0x15c>  // b.any
    13a4:	ldr	x0, [x0, #16]
    13a8:	ldr	x4, [sp, #104]
    13ac:	sub	x7, x0, x7
    13b0:	add	x1, x7, x1
    13b4:	mov	x0, x24
    13b8:	bl	5a8 <gomp_copy_host2dev>
    13bc:	b	12b4 <gomp_map_fields_existing+0x15c>
    13c0:	ldr	x1, [x21]
    13c4:	ldr	x7, [x22]
    13c8:	ldr	x0, [x21, #24]
    13cc:	sub	x1, x7, x1
    13d0:	ldr	x6, [x22, #24]
    13d4:	sub	x0, x6, x0
    13d8:	cmp	x1, x0
    13dc:	b.ne	11d4 <gomp_map_fields_existing+0x7c>  // b.any
    13e0:	ldp	x2, x5, [sp, #120]
    13e4:	and	w0, w26, #0xff
    13e8:	add	x19, x25, x19, lsl #5
    13ec:	and	w3, w26, #0xe
    13f0:	sub	w1, w0, #0x12
    13f4:	cmp	w3, #0x2
    13f8:	and	w1, w1, #0xff
    13fc:	cset	w9, eq  // eq = none
    1400:	cmp	w1, #0x1
    1404:	str	x22, [x19, #64]
    1408:	cset	w8, ls  // ls = plast
    140c:	sub	x1, x2, x7
    1410:	sub	x3, x5, x2
    1414:	strb	w9, [x19, #72]
    1418:	strb	w8, [x19, #73]
    141c:	tst	x26, #0x80
    1420:	stp	x1, x3, [x19, #80]
    1424:	add	x6, x6, x2
    1428:	ccmp	x7, x2, #0x2, eq  // eq = none
    142c:	b.hi	14f4 <gomp_map_fields_existing+0x39c>  // b.pmore
    1430:	ldr	x1, [x22, #8]
    1434:	cmp	x5, x1
    1438:	b.hi	14f4 <gomp_map_fields_existing+0x39c>  // b.pmore
    143c:	and	w0, w0, #0xfffffffd
    1440:	cmp	w0, #0x11
    1444:	b.eq	147c <gomp_map_fields_existing+0x324>  // b.none
    1448:	ldr	x0, [x22, #32]
    144c:	cmn	x0, #0x1
    1450:	b.eq	12c8 <gomp_map_fields_existing+0x170>  // b.none
    1454:	add	x0, x0, #0x1
    1458:	str	x0, [x22, #32]
    145c:	b	12c8 <gomp_map_fields_existing+0x170>
    1460:	ldr	x0, [x5, #16]
    1464:	ldr	x4, [sp, #104]
    1468:	sub	x6, x0, x6
    146c:	add	x1, x6, x1
    1470:	mov	x0, x24
    1474:	bl	5a8 <gomp_copy_host2dev>
    1478:	b	12b4 <gomp_map_fields_existing+0x15c>
    147c:	ldr	x1, [x4, #16]
    1480:	mov	x0, x24
    1484:	ldr	x4, [sp, #104]
    1488:	sub	x1, x1, x7
    148c:	add	x1, x1, x6
    1490:	bl	5a8 <gomp_copy_host2dev>
    1494:	b	1448 <gomp_map_fields_existing+0x2f0>
    1498:	add	x0, x24, #0xa8
    149c:	ldxr	w1, [x0]
    14a0:	stlxr	w2, wzr, [x0]
    14a4:	cbnz	w2, 149c <gomp_map_fields_existing+0x344>
    14a8:	tbnz	w1, #31, 14e4 <gomp_map_fields_existing+0x38c>
    14ac:	ldp	x1, x2, [sp, #120]
    14b0:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    14b4:	add	x0, x0, #0x0
    14b8:	bl	0 <gomp_fatal>
    14bc:	add	x0, x24, #0xa8
    14c0:	ldxr	w1, [x0]
    14c4:	stlxr	w2, wzr, [x0]
    14c8:	cbnz	w2, 14c0 <gomp_map_fields_existing+0x368>
    14cc:	tbnz	w1, #31, 14ec <gomp_map_fields_existing+0x394>
    14d0:	ldp	x3, x4, [x20]
    14d4:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    14d8:	ldp	x1, x2, [sp, #120]
    14dc:	add	x0, x0, #0x0
    14e0:	bl	0 <gomp_fatal>
    14e4:	bl	0 <gomp_mutex_unlock_slow>
    14e8:	b	14ac <gomp_map_fields_existing+0x354>
    14ec:	bl	0 <gomp_mutex_unlock_slow>
    14f0:	b	14d0 <gomp_map_fields_existing+0x378>
    14f4:	mov	x1, x22
    14f8:	mov	x0, x24
    14fc:	add	x2, sp, #0x78
    1500:	add	x3, sp, #0x80
    1504:	bl	828 <gomp_map_vars_existing.isra.0.part.0>
    1508:	add	x0, x24, #0xa8
    150c:	ldxr	w1, [x0]
    1510:	stlxr	w2, wzr, [x0]
    1514:	cbz	w2, 14cc <gomp_map_fields_existing+0x374>
    1518:	b	150c <gomp_map_fields_existing+0x3b4>
    151c:	nop

0000000000001520 <gomp_init_targets_once>:
    1520:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1524:	add	x0, x0, #0x0
    1528:	add	x0, x0, #0x14
    152c:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    1530:	add	x1, x1, #0x0
    1534:	b	0 <pthread_once>

0000000000001538 <gomp_get_num_devices>:
    1538:	stp	x29, x30, [sp, #-32]!
    153c:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    1540:	add	x1, x1, #0x0
    1544:	mov	x29, sp
    1548:	str	x19, [sp, #16]
    154c:	adrp	x19, 0 <omp_target_memcpy_rect_worker>
    1550:	add	x19, x19, #0x0
    1554:	add	x0, x19, #0x14
    1558:	bl	0 <pthread_once>
    155c:	ldr	w0, [x19, #4]
    1560:	ldr	x19, [sp, #16]
    1564:	ldp	x29, x30, [sp], #32
    1568:	ret
    156c:	nop

0000000000001570 <gomp_map_vars>:
    1570:	stp	x29, x30, [sp, #-352]!
    1574:	mov	x29, sp
    1578:	stp	x19, x20, [sp, #16]
    157c:	mov	x19, x1
    1580:	mov	w1, #0x8                   	// #8
    1584:	stp	x21, x22, [sp, #32]
    1588:	ands	w21, w6, #0xff
    158c:	mov	w6, #0x3                   	// #3
    1590:	csel	w1, w6, w1, eq  // eq = none
    1594:	cmp	w21, #0x0
    1598:	add	x6, x19, #0x2
    159c:	stp	w7, w1, [x29, #184]
    15a0:	mov	w1, #0xff                  	// #255
    15a4:	mov	x20, x5
    15a8:	mov	w22, #0x7                   	// #7
    15ac:	csel	w22, w22, w1, eq  // eq = none
    15b0:	stp	x23, x24, [sp, #48]
    15b4:	mov	x24, x0
    15b8:	mov	x23, x4
    15bc:	lsl	x0, x6, #5
    15c0:	stp	x25, x26, [sp, #64]
    15c4:	mov	w26, w7
    15c8:	mov	x25, x2
    15cc:	stp	x27, x28, [sp, #80]
    15d0:	str	x3, [x29, #168]
    15d4:	bl	0 <gomp_malloc>
    15d8:	mov	x28, x0
    15dc:	cmp	w26, #0x3
    15e0:	cset	x0, ne  // ne = any
    15e4:	str	x0, [x28]
    15e8:	stp	x19, x24, [x28, #48]
    15ec:	cbz	x19, 1e24 <gomp_map_vars+0x8b4>
    15f0:	ldr	w0, [x29, #184]
    15f4:	str	xzr, [x29, #256]
    15f8:	cmp	w0, #0x1
    15fc:	mov	x0, #0xffffffffffffffff    	// #-1
    1600:	cset	w1, eq  // eq = none
    1604:	str	w1, [x29, #112]
    1608:	stp	xzr, x0, [x29, #272]
    160c:	cmp	w1, #0x0
    1610:	ccmp	x19, #0x1, #0x2, eq  // eq = none
    1614:	str	xzr, [x29, #288]
    1618:	b.hi	1868 <gomp_map_vars+0x2f8>  // b.pmore
    161c:	mov	x0, #0x8                   	// #8
    1620:	str	xzr, [x29, #192]
    1624:	str	x0, [x29, #208]
    1628:	add	x0, x24, #0xa8
    162c:	mov	x2, x0
    1630:	mov	w0, #0x1                   	// #1
    1634:	str	x2, [x29, #136]
    1638:	ldaxr	w1, [x2]
    163c:	cbnz	w1, 1648 <gomp_map_vars+0xd8>
    1640:	stxr	w3, w0, [x2]
    1644:	cbnz	w3, 1638 <gomp_map_vars+0xc8>
    1648:	cmp	w1, #0x0
    164c:	b.ne	2b68 <gomp_map_vars+0x15f8>  // b.any
    1650:	ldr	w0, [x24, #172]
    1654:	cmp	w0, #0x2
    1658:	b.eq	2a44 <gomp_map_vars+0x14d4>  // b.none
    165c:	add	x0, x24, #0xa0
    1660:	stp	x0, x19, [x29, #224]
    1664:	mov	x26, #0x0                   	// #0
    1668:	ldr	x0, [x29, #192]
    166c:	mov	x27, #0x5                   	// #5
    1670:	str	x24, [x29, #128]
    1674:	mov	x24, x20
    1678:	mov	x20, x25
    167c:	mov	x25, x28
    1680:	str	x0, [x29, #216]
    1684:	add	x0, x28, #0x40
    1688:	mov	x28, x26
    168c:	movk	x27, #0x4, lsl #16
    1690:	str	x0, [x29, #120]
    1694:	str	wzr, [x29, #160]
    1698:	str	xzr, [x29, #200]
    169c:	nop
    16a0:	sxtw	x0, w28
    16a4:	cbz	w21, 18cc <gomp_map_vars+0x35c>
    16a8:	ldrh	w26, [x24, x0, lsl #1]
    16ac:	lsl	x2, x28, #3
    16b0:	ldr	x0, [x20, x28, lsl #3]
    16b4:	add	x3, x20, x2
    16b8:	cbz	x0, 18e0 <gomp_map_vars+0x370>
    16bc:	and	w4, w22, w26
    16c0:	cmp	w4, #0xd
    16c4:	b.eq	18e0 <gomp_map_vars+0x370>  // b.none
    16c8:	cmp	w4, #0xe
    16cc:	b.eq	1a4c <gomp_map_vars+0x4dc>  // b.none
    16d0:	cmp	w4, #0x1c
    16d4:	b.eq	1ab0 <gomp_map_vars+0x540>  // b.none
    16d8:	cmp	w4, #0x1d
    16dc:	b.eq	1b74 <gomp_map_vars+0x604>  // b.none
    16e0:	str	x0, [x29, #296]
    16e4:	cmp	w4, #0x4
    16e8:	b.eq	18f8 <gomp_map_vars+0x388>  // b.none
    16ec:	ldr	x2, [x23, x2]
    16f0:	cmp	w4, #0xc
    16f4:	add	x1, x0, x2
    16f8:	str	x1, [x29, #304]
    16fc:	b.eq	1bdc <gomp_map_vars+0x66c>  // b.none
    1700:	cmp	w4, #0xf
    1704:	b.ne	1900 <gomp_map_vars+0x390>  // b.any
    1708:	str	w4, [x29, #176]
    170c:	cmp	x0, x1
    1710:	b.eq	1b98 <gomp_map_vars+0x628>  // b.none
    1714:	ldr	x0, [x29, #224]
    1718:	add	x1, x29, #0x128
    171c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1720:	mov	x7, x0
    1724:	ldr	w4, [x29, #176]
    1728:	cbz	x7, 1bc4 <gomp_map_vars+0x654>
    172c:	ldp	x2, x1, [x29, #296]
    1730:	ldr	x0, [x7, #32]
    1734:	cmn	x0, #0x2
    1738:	sub	x3, x1, x2
    173c:	b.eq	1924 <gomp_map_vars+0x3b4>  // b.none
    1740:	add	x11, x25, x28, lsl #5
    1744:	and	w13, w4, #0xe
    1748:	sub	w5, w4, #0x12
    174c:	cmp	w13, #0x2
    1750:	ldr	x12, [x7]
    1754:	and	w5, w5, #0xff
    1758:	cset	w14, eq  // eq = none
    175c:	cmp	w5, #0x1
    1760:	cset	w13, ls  // ls = plast
    1764:	sxtb	w4, w4
    1768:	sub	x5, x2, x12
    176c:	str	x7, [x11, #64]
    1770:	strb	w14, [x11, #72]
    1774:	cmp	w4, #0x0
    1778:	strb	w13, [x11, #73]
    177c:	ccmp	x12, x2, #0x2, ge  // ge = tcont
    1780:	stp	x5, x3, [x11, #80]
    1784:	b.hi	2ae8 <gomp_map_vars+0x1578>  // b.pmore
    1788:	ldr	x5, [x7, #8]
    178c:	cmp	x5, x1
    1790:	b.cc	2ae8 <gomp_map_vars+0x1578>  // b.lo, b.ul, b.last
    1794:	and	w4, w4, #0xfffffffd
    1798:	cmp	w4, #0x11
    179c:	b.eq	1e2c <gomp_map_vars+0x8bc>  // b.none
    17a0:	add	x28, x28, #0x1
    17a4:	cmn	x0, #0x1
    17a8:	b.eq	17b8 <gomp_map_vars+0x248>  // b.none
    17ac:	add	x0, x0, #0x1
    17b0:	str	x0, [x7, #32]
    17b4:	nop
    17b8:	ldr	x0, [x29, #232]
    17bc:	cmp	x0, x28
    17c0:	b.hi	16a0 <gomp_map_vars+0x130>  // b.pmore
    17c4:	mov	x19, x0
    17c8:	mov	x28, x25
    17cc:	ldr	x0, [x29, #168]
    17d0:	mov	x25, x20
    17d4:	mov	x20, x24
    17d8:	ldr	x24, [x29, #128]
    17dc:	cbz	x0, 1e9c <gomp_map_vars+0x92c>
    17e0:	cmp	x19, #0x1
    17e4:	b.ne	2b74 <gomp_map_vars+0x1604>  // b.any
    17e8:	ldr	x0, [x29, #168]
    17ec:	ldr	x2, [x29, #200]
    17f0:	ldr	x1, [x0]
    17f4:	stp	xzr, x1, [x28, #8]
    17f8:	cmp	x2, #0x0
    17fc:	ldr	x0, [x23]
    1800:	mov	x27, x1
    1804:	add	x0, x1, x0
    1808:	stp	x0, x1, [x28, #24]
    180c:	ldr	w0, [x29, #160]
    1810:	ccmp	w0, #0x0, #0x0, eq  // eq = none
    1814:	b.ne	1f30 <gomp_map_vars+0x9c0>  // b.any
    1818:	ldr	w0, [x29, #184]
    181c:	cmp	w0, #0x1
    1820:	b.eq	2200 <gomp_map_vars+0xc90>  // b.none
    1824:	ldr	w0, [x29, #184]
    1828:	cmp	w0, #0x3
    182c:	b.eq	18b4 <gomp_map_vars+0x344>  // b.none
    1830:	ldr	x1, [x29, #136]
    1834:	ldxr	w0, [x1]
    1838:	stlxr	w2, wzr, [x1]
    183c:	cbnz	w2, 1834 <gomp_map_vars+0x2c4>
    1840:	tbnz	w0, #31, 29a4 <gomp_map_vars+0x1434>
    1844:	mov	sp, x29
    1848:	mov	x0, x28
    184c:	ldp	x19, x20, [sp, #16]
    1850:	ldp	x21, x22, [sp, #32]
    1854:	ldp	x23, x24, [sp, #48]
    1858:	ldp	x25, x26, [sp, #64]
    185c:	ldp	x27, x28, [sp, #80]
    1860:	ldp	x29, x30, [sp], #352
    1864:	ret
    1868:	lsl	x0, x19, #4
    186c:	ldr	w1, [x29, #184]
    1870:	add	x0, x0, #0x10
    1874:	sub	sp, sp, x0
    1878:	cmp	w1, #0x1
    187c:	mov	x0, sp
    1880:	str	x0, [x29, #272]
    1884:	b.ne	27d4 <gomp_map_vars+0x1264>  // b.any
    1888:	cmp	x19, #0x1
    188c:	lsl	x3, x19, #3
    1890:	cset	x1, hi  // hi = pmore
    1894:	mov	x2, #0x1                   	// #1
    1898:	mov	x4, #0x20                  	// #32
    189c:	add	x1, x1, x2
    18a0:	stp	xzr, x3, [x0]
    18a4:	str	x3, [x29, #192]
    18a8:	str	x4, [x29, #208]
    18ac:	stp	x2, x1, [x29, #280]
    18b0:	b	1628 <gomp_map_vars+0xb8>
    18b4:	ldr	x0, [x28]
    18b8:	cbnz	x0, 1830 <gomp_map_vars+0x2c0>
    18bc:	mov	x0, x28
    18c0:	mov	x28, #0x0                   	// #0
    18c4:	bl	0 <free>
    18c8:	b	1830 <gomp_map_vars+0x2c0>
    18cc:	ldrb	w26, [x24, x0]
    18d0:	lsl	x2, x28, #3
    18d4:	ldr	x0, [x20, x28, lsl #3]
    18d8:	add	x3, x20, x2
    18dc:	cbnz	x0, 16bc <gomp_map_vars+0x14c>
    18e0:	add	x1, x25, x28, lsl #5
    18e4:	mov	x2, #0xffffffffffffffff    	// #-1
    18e8:	add	x28, x28, #0x1
    18ec:	str	xzr, [x1, #64]
    18f0:	str	x2, [x1, #80]
    18f4:	b	17b8 <gomp_map_vars+0x248>
    18f8:	add	x0, x0, #0x8
    18fc:	str	x0, [x29, #304]
    1900:	ldr	x0, [x29, #224]
    1904:	add	x1, x29, #0x128
    1908:	str	w4, [x29, #176]
    190c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1910:	mov	x7, x0
    1914:	ldr	w4, [x29, #176]
    1918:	cbnz	x0, 172c <gomp_map_vars+0x1bc>
    191c:	ldp	x2, x1, [x29, #296]
    1920:	sub	x3, x1, x2
    1924:	ldrb	w0, [x29, #188]
    1928:	add	x7, x25, x28, lsl #5
    192c:	ldp	x8, x6, [x29, #200]
    1930:	asr	w5, w26, w0
    1934:	str	xzr, [x7, #64]
    1938:	ldr	x0, [x29, #216]
    193c:	sub	x26, x0, #0x1
    1940:	mov	x0, #0x1                   	// #1
    1944:	lsl	x5, x0, x5
    1948:	add	x26, x26, x5
    194c:	cmp	x6, x5
    1950:	neg	x7, x5
    1954:	and	x7, x7, x26
    1958:	csel	x5, x6, x5, cs  // cs = hs, nlast
    195c:	add	x8, x8, x0
    1960:	stp	x8, x5, [x29, #200]
    1964:	add	x5, x7, x3
    1968:	str	x5, [x29, #216]
    196c:	cmp	w4, #0x12
    1970:	b.gt	1994 <gomp_map_vars+0x424>
    1974:	lsl	x0, x0, x4
    1978:	tst	x0, x27
    197c:	b.ne	19dc <gomp_map_vars+0x46c>  // b.any
    1980:	sub	x3, x3, #0x1
    1984:	mov	x0, #0x7fff                	// #32767
    1988:	cmp	x3, x0
    198c:	b.ls	19ac <gomp_map_vars+0x43c>  // b.plast
    1990:	b	19dc <gomp_map_vars+0x46c>
    1994:	cmp	w4, #0x80
    1998:	b.eq	1b6c <gomp_map_vars+0x5fc>  // b.none
    199c:	sub	x3, x3, #0x1
    19a0:	mov	x0, #0x7fff                	// #32767
    19a4:	cmp	x3, x0
    19a8:	b.hi	1b6c <gomp_map_vars+0x5fc>  // b.pmore
    19ac:	ldr	x0, [x29, #280]
    19b0:	cmp	x0, #0x0
    19b4:	cbnz	x0, 1e5c <gomp_map_vars+0x8ec>
    19b8:	ldr	x5, [x29, #272]
    19bc:	mov	x0, #0x1                   	// #1
    19c0:	mov	x3, #0x0                   	// #0
    19c4:	add	x11, x5, x3
    19c8:	str	x7, [x5, x3]
    19cc:	ldr	x5, [x29, #216]
    19d0:	mov	x3, #0x1                   	// #1
    19d4:	str	x5, [x11, #8]
    19d8:	stp	x0, x3, [x29, #280]
    19dc:	add	x28, x28, #0x1
    19e0:	cmp	w4, #0x5
    19e4:	b.ne	17b8 <gomp_map_vars+0x248>  // b.any
    19e8:	ldr	x0, [x29, #232]
    19ec:	cmp	x0, x28
    19f0:	b.ls	17c4 <gomp_map_vars+0x254>  // b.plast
    19f4:	ldr	x4, [x29, #120]
    19f8:	ldr	x3, [x29, #232]
    19fc:	b	1a3c <gomp_map_vars+0x4cc>
    1a00:	ldrh	w0, [x24, x0, lsl #1]
    1a04:	and	w0, w22, w0
    1a08:	cmp	w0, #0x4
    1a0c:	b.ne	17b8 <gomp_map_vars+0x248>  // b.any
    1a10:	ldr	x0, [x20, x28, lsl #3]
    1a14:	cmp	x0, x2
    1a18:	b.cc	17b8 <gomp_map_vars+0x248>  // b.lo, b.ul, b.last
    1a1c:	add	x0, x0, #0x8
    1a20:	cmp	x0, x1
    1a24:	b.hi	17b8 <gomp_map_vars+0x248>  // b.pmore
    1a28:	lsl	x0, x28, #5
    1a2c:	add	x28, x28, #0x1
    1a30:	cmp	x3, x28
    1a34:	str	xzr, [x4, x0]
    1a38:	b.ls	17b8 <gomp_map_vars+0x248>  // b.plast
    1a3c:	sxtw	x0, w28
    1a40:	cbnz	w21, 1a00 <gomp_map_vars+0x490>
    1a44:	ldrb	w0, [x24, x0]
    1a48:	b	1a04 <gomp_map_vars+0x494>
    1a4c:	add	x3, x0, #0x1
    1a50:	stp	x0, x3, [x29, #296]
    1a54:	add	x1, x29, #0x128
    1a58:	ldr	x0, [x29, #224]
    1a5c:	str	x2, [x29, #176]
    1a60:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1a64:	ldp	x3, x1, [x29, #296]
    1a68:	ldr	x2, [x29, #176]
    1a6c:	sub	x1, x1, #0x1
    1a70:	str	x1, [x29, #304]
    1a74:	cbz	x0, 204c <gomp_map_vars+0xadc>
    1a78:	ldp	x1, x5, [x0, #16]
    1a7c:	add	x7, x25, x28, lsl #5
    1a80:	ldr	x4, [x0]
    1a84:	add	x28, x28, #0x1
    1a88:	sub	x3, x3, x4
    1a8c:	str	x3, [x29, #296]
    1a90:	ldr	x1, [x1, #16]
    1a94:	str	xzr, [x7, #64]
    1a98:	add	x0, x3, x1
    1a9c:	mov	x1, #0xffffffffffffffff    	// #-1
    1aa0:	add	x0, x0, x5
    1aa4:	str	x0, [x20, x2]
    1aa8:	str	x1, [x7, #80]
    1aac:	b	17b8 <gomp_map_vars+0x248>
    1ab0:	ldr	x7, [x23, x2]
    1ab4:	str	x0, [x29, #296]
    1ab8:	add	x2, x25, x28, lsl #5
    1abc:	mov	x8, #0xfffffffffffffffd    	// #-3
    1ac0:	add	x19, x7, x28
    1ac4:	mov	x1, x2
    1ac8:	stp	x3, x7, [x29, #144]
    1acc:	ldr	x4, [x23, x19, lsl #3]
    1ad0:	str	xzr, [x2, #64]
    1ad4:	ldr	x0, [x20, x19, lsl #3]
    1ad8:	add	x2, x28, #0x1
    1adc:	str	x8, [x1, #80]
    1ae0:	add	x1, x29, #0x128
    1ae4:	add	x0, x0, x4
    1ae8:	str	x0, [x29, #304]
    1aec:	ldr	x0, [x29, #224]
    1af0:	str	x2, [x29, #176]
    1af4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1af8:	ldp	x3, x7, [x29, #144]
    1afc:	ldr	x2, [x29, #176]
    1b00:	cbz	x0, 1cb0 <gomp_map_vars+0x740>
    1b04:	mov	x28, x2
    1b08:	cmp	x2, x19
    1b0c:	b.hi	17b8 <gomp_map_vars+0x248>  // b.pmore
    1b10:	mov	x26, x2
    1b14:	str	w22, [x29, #176]
    1b18:	mov	x22, x24
    1b1c:	mov	w24, w21
    1b20:	mov	x21, x20
    1b24:	mov	x20, x0
    1b28:	mov	x3, x28
    1b2c:	mov	x6, x22
    1b30:	mov	x5, x23
    1b34:	mov	x4, x21
    1b38:	mov	x2, x26
    1b3c:	add	x28, x28, #0x1
    1b40:	mov	x1, x20
    1b44:	mov	x0, x25
    1b48:	mov	x7, #0x0                   	// #0
    1b4c:	bl	1158 <gomp_map_fields_existing>
    1b50:	cmp	x19, x28
    1b54:	b.cs	1b28 <gomp_map_vars+0x5b8>  // b.hs, b.nlast
    1b58:	mov	x20, x21
    1b5c:	mov	w21, w24
    1b60:	mov	x24, x22
    1b64:	ldr	w22, [x29, #176]
    1b68:	b	17b8 <gomp_map_vars+0x248>
    1b6c:	add	x28, x28, #0x1
    1b70:	b	17b8 <gomp_map_vars+0x248>
    1b74:	add	x1, x25, x28, lsl #5
    1b78:	mov	x2, #0xfffffffffffffffe    	// #-2
    1b7c:	mov	x0, x1
    1b80:	add	x28, x28, #0x1
    1b84:	str	xzr, [x1, #64]
    1b88:	mov	w1, #0x1                   	// #1
    1b8c:	str	x2, [x0, #80]
    1b90:	str	w1, [x29, #160]
    1b94:	b	17b8 <gomp_map_vars+0x248>
    1b98:	add	x0, x0, #0x1
    1b9c:	str	x0, [x29, #304]
    1ba0:	ldr	x0, [x29, #224]
    1ba4:	add	x1, x29, #0x128
    1ba8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1bac:	mov	x7, x0
    1bb0:	ldr	x1, [x29, #304]
    1bb4:	ldr	w4, [x29, #176]
    1bb8:	sub	x1, x1, #0x1
    1bbc:	str	x1, [x29, #304]
    1bc0:	cbnz	x7, 172c <gomp_map_vars+0x1bc>
    1bc4:	add	x1, x25, x28, lsl #5
    1bc8:	mov	x2, #0xfffffffffffffffe    	// #-2
    1bcc:	add	x28, x28, #0x1
    1bd0:	str	xzr, [x1, #64]
    1bd4:	str	x2, [x1, #80]
    1bd8:	b	17b8 <gomp_map_vars+0x248>
    1bdc:	add	x4, x25, x28, lsl #5
    1be0:	ldrb	w0, [x29, #188]
    1be4:	ldr	x1, [x29, #216]
    1be8:	mov	x5, #0x1                   	// #1
    1bec:	str	xzr, [x4, #64]
    1bf0:	asr	w0, w26, w0
    1bf4:	ldr	x4, [x29, #208]
    1bf8:	sub	x1, x1, #0x1
    1bfc:	lsl	x0, x5, x0
    1c00:	add	x3, x1, x0
    1c04:	cmp	x4, x0
    1c08:	neg	x1, x0
    1c0c:	and	x1, x1, x3
    1c10:	csel	x0, x4, x0, cs  // cs = hs, nlast
    1c14:	str	x0, [x29, #208]
    1c18:	add	x0, x2, x1
    1c1c:	str	x0, [x29, #216]
    1c20:	sub	x3, x2, #0x1
    1c24:	mov	x0, #0x7fff                	// #32767
    1c28:	cmp	x3, x0
    1c2c:	b.hi	1ca0 <gomp_map_vars+0x730>  // b.pmore
    1c30:	ldr	x0, [x29, #280]
    1c34:	cmp	x0, #0x0
    1c38:	cbz	x0, 1c7c <gomp_map_vars+0x70c>
    1c3c:	b.lt	1ca0 <gomp_map_vars+0x730>  // b.tstop
    1c40:	ldr	x3, [x29, #272]
    1c44:	lsl	x2, x0, #4
    1c48:	sub	x4, x2, #0x10
    1c4c:	add	x4, x3, x4
    1c50:	ldr	x5, [x4, #8]
    1c54:	cmp	x1, x5
    1c58:	b.cc	2a38 <gomp_map_vars+0x14c8>  // b.lo, b.ul, b.last
    1c5c:	add	x5, x5, #0x1, lsl #12
    1c60:	cmp	x1, x5
    1c64:	ldr	x5, [x29, #288]
    1c68:	b.cc	29c4 <gomp_map_vars+0x1454>  // b.lo, b.ul, b.last
    1c6c:	cmp	x5, #0x1
    1c70:	b.eq	2ac4 <gomp_map_vars+0x1554>  // b.none
    1c74:	add	x0, x0, #0x1
    1c78:	b	1c88 <gomp_map_vars+0x718>
    1c7c:	ldr	x3, [x29, #272]
    1c80:	mov	x0, x5
    1c84:	mov	x2, #0x0                   	// #0
    1c88:	add	x4, x3, x2
    1c8c:	str	x1, [x3, x2]
    1c90:	ldr	x2, [x29, #216]
    1c94:	mov	x1, #0x1                   	// #1
    1c98:	str	x2, [x4, #8]
    1c9c:	stp	x0, x1, [x29, #280]
    1ca0:	mov	w0, #0x1                   	// #1
    1ca4:	add	x28, x28, #0x1
    1ca8:	str	w0, [x29, #160]
    1cac:	b	17b8 <gomp_map_vars+0x248>
    1cb0:	ldrb	w1, [x29, #188]
    1cb4:	ldp	x5, x4, [x29, #296]
    1cb8:	ldr	x0, [x3, #8]
    1cbc:	asr	w3, w26, w1
    1cc0:	ldp	x8, x6, [x29, #200]
    1cc4:	ldr	x1, [x29, #216]
    1cc8:	sub	x0, x1, x0
    1ccc:	sub	x1, x5, #0x1
    1cd0:	add	x0, x0, x1
    1cd4:	mov	x1, #0x1                   	// #1
    1cd8:	lsl	x3, x1, x3
    1cdc:	add	x0, x0, x3
    1ce0:	neg	x26, x3
    1ce4:	cmp	x6, x3
    1ce8:	sub	x5, x4, x5
    1cec:	and	x0, x26, x0
    1cf0:	csel	x3, x6, x3, cs  // cs = hs, nlast
    1cf4:	add	x7, x8, x7
    1cf8:	add	x0, x5, x0
    1cfc:	stp	x7, x3, [x29, #200]
    1d00:	cmp	x2, x19
    1d04:	str	x0, [x29, #216]
    1d08:	b.hi	2a1c <gomp_map_vars+0x14ac>  // b.pmore
    1d0c:	mov	x28, x2
    1d10:	sub	x4, x0, x4
    1d14:	mov	w14, #0x0                   	// #0
    1d18:	mov	w13, #0x0                   	// #0
    1d1c:	mov	x12, #0x7fff                	// #32767
    1d20:	ldr	x6, [x29, #120]
    1d24:	ldp	x7, x3, [x29, #272]
    1d28:	ldr	x5, [x29, #288]
    1d2c:	b	1d9c <gomp_map_vars+0x82c>
    1d30:	ldrh	w0, [x24, x2, lsl #1]
    1d34:	and	w0, w22, w0
    1d38:	cmp	w0, #0x12
    1d3c:	b.gt	1dbc <gomp_map_vars+0x84c>
    1d40:	lsl	x0, x1, x0
    1d44:	tst	x0, x27
    1d48:	b.ne	1d90 <gomp_map_vars+0x820>  // b.any
    1d4c:	ldr	x0, [x23, x28, lsl #3]
    1d50:	sub	x2, x0, #0x1
    1d54:	cmp	x2, x12
    1d58:	b.hi	1d90 <gomp_map_vars+0x820>  // b.pmore
    1d5c:	ldr	x2, [x20, x28, lsl #3]
    1d60:	cmp	x3, #0x0
    1d64:	add	x2, x2, x4
    1d68:	cbnz	x3, 1de4 <gomp_map_vars+0x874>
    1d6c:	add	x0, x2, x0
    1d70:	mov	x8, #0x0                   	// #0
    1d74:	add	x9, x7, x8
    1d78:	mov	x5, #0x1                   	// #1
    1d7c:	add	x3, x3, #0x1
    1d80:	mov	w13, w5
    1d84:	str	x2, [x7, x8]
    1d88:	mov	w14, #0x1                   	// #1
    1d8c:	str	x0, [x9, #8]
    1d90:	add	x28, x28, #0x1
    1d94:	cmp	x19, x28
    1d98:	b.cc	1dd0 <gomp_map_vars+0x860>  // b.lo, b.ul, b.last
    1d9c:	lsl	x0, x28, #5
    1da0:	sxtw	x2, w28
    1da4:	str	xzr, [x6, x0]
    1da8:	cbnz	w21, 1d30 <gomp_map_vars+0x7c0>
    1dac:	ldrb	w0, [x24, x2]
    1db0:	and	w0, w22, w0
    1db4:	cmp	w0, #0x12
    1db8:	b.le	1d40 <gomp_map_vars+0x7d0>
    1dbc:	cmp	w0, #0x80
    1dc0:	b.ne	1d4c <gomp_map_vars+0x7dc>  // b.any
    1dc4:	add	x28, x28, #0x1
    1dc8:	cmp	x19, x28
    1dcc:	b.cs	1d9c <gomp_map_vars+0x82c>  // b.hs, b.nlast
    1dd0:	cbz	w13, 1dd8 <gomp_map_vars+0x868>
    1dd4:	str	x3, [x29, #280]
    1dd8:	cbz	w14, 17b8 <gomp_map_vars+0x248>
    1ddc:	str	x5, [x29, #288]
    1de0:	b	17b8 <gomp_map_vars+0x248>
    1de4:	b.lt	1d90 <gomp_map_vars+0x820>  // b.tstop
    1de8:	lsl	x8, x3, #4
    1dec:	sub	x9, x8, #0x10
    1df0:	add	x9, x7, x9
    1df4:	ldr	x10, [x9, #8]
    1df8:	cmp	x2, x10
    1dfc:	b.cc	27c8 <gomp_map_vars+0x1258>  // b.lo, b.ul, b.last
    1e00:	add	x10, x10, #0x1, lsl #12
    1e04:	add	x0, x2, x0
    1e08:	cmp	x2, x10
    1e0c:	b.cc	21e8 <gomp_map_vars+0xc78>  // b.lo, b.ul, b.last
    1e10:	cmp	x5, #0x1
    1e14:	b.ne	1d74 <gomp_map_vars+0x804>  // b.any
    1e18:	sub	x3, x3, #0x1
    1e1c:	lsl	x8, x3, #4
    1e20:	b	1d74 <gomp_map_vars+0x804>
    1e24:	stp	xzr, xzr, [x28, #16]
    1e28:	b	1844 <gomp_map_vars+0x2d4>
    1e2c:	ldp	x0, x1, [x7, #16]
    1e30:	mov	x4, #0x0                   	// #0
    1e34:	str	x7, [x29, #176]
    1e38:	ldr	x0, [x0, #16]
    1e3c:	add	x1, x2, x1
    1e40:	sub	x12, x0, x12
    1e44:	ldr	x0, [x29, #128]
    1e48:	add	x1, x12, x1
    1e4c:	bl	5a8 <gomp_copy_host2dev>
    1e50:	ldr	x7, [x29, #176]
    1e54:	ldr	x0, [x7, #32]
    1e58:	b	17a0 <gomp_map_vars+0x230>
    1e5c:	b.lt	19dc <gomp_map_vars+0x46c>  // b.tstop
    1e60:	ldr	x5, [x29, #272]
    1e64:	lsl	x3, x0, #4
    1e68:	sub	x11, x3, #0x10
    1e6c:	add	x11, x5, x11
    1e70:	ldr	x12, [x11, #8]
    1e74:	cmp	x7, x12
    1e78:	b.cc	21dc <gomp_map_vars+0xc6c>  // b.lo, b.ul, b.last
    1e7c:	add	x12, x12, #0x1, lsl #12
    1e80:	cmp	x7, x12
    1e84:	ldr	x12, [x29, #288]
    1e88:	b.cc	29b0 <gomp_map_vars+0x1440>  // b.lo, b.ul, b.last
    1e8c:	cmp	x12, #0x1
    1e90:	b.eq	2a2c <gomp_map_vars+0x14bc>  // b.none
    1e94:	add	x0, x0, #0x1
    1e98:	b	19c4 <gomp_map_vars+0x454>
    1e9c:	ldr	x0, [x29, #200]
    1ea0:	cmp	x0, #0x0
    1ea4:	ldr	w0, [x29, #112]
    1ea8:	cset	w2, ne  // ne = any
    1eac:	str	w2, [x29, #232]
    1eb0:	cmp	w0, #0x0
    1eb4:	ccmp	w2, #0x0, #0x0, eq  // eq = none
    1eb8:	b.eq	2950 <gomp_map_vars+0x13e0>  // b.none
    1ebc:	ldp	x1, x2, [x29, #208]
    1ec0:	ldr	w0, [x24, #12]
    1ec4:	ldr	x3, [x24, #96]
    1ec8:	add	x1, x1, x2
    1ecc:	sub	x1, x1, #0x1
    1ed0:	blr	x3
    1ed4:	str	x0, [x28, #32]
    1ed8:	ldr	w2, [x29, #232]
    1edc:	cbz	x0, 2bc0 <gomp_map_vars+0x1650>
    1ee0:	ldr	x3, [x29, #208]
    1ee4:	sub	x1, x3, #0x1
    1ee8:	neg	x27, x3
    1eec:	add	x0, x0, x1
    1ef0:	ldr	x1, [x29, #216]
    1ef4:	and	x27, x0, x27
    1ef8:	ldr	x0, [x29, #288]
    1efc:	add	x26, x27, x1
    1f00:	stp	x27, x26, [x28, #16]
    1f04:	cmp	x0, #0x1
    1f08:	ldr	x0, [x29, #280]
    1f0c:	b.ne	1f18 <gomp_map_vars+0x9a8>  // b.any
    1f10:	sub	x0, x0, #0x1
    1f14:	str	x0, [x29, #280]
    1f18:	ldr	w1, [x29, #160]
    1f1c:	cmp	x0, #0x0
    1f20:	orr	w26, w2, w1
    1f24:	b.gt	29e4 <gomp_map_vars+0x1474>
    1f28:	str	xzr, [x28, #8]
    1f2c:	cbz	w26, 2204 <gomp_map_vars+0xc94>
    1f30:	ldr	x0, [x29, #200]
    1f34:	cbnz	x0, 21bc <gomp_map_vars+0xc4c>
    1f38:	mov	x26, #0x0                   	// #0
    1f3c:	str	xzr, [x29, #168]
    1f40:	mov	x27, #0x0                   	// #0
    1f44:	str	x24, [x29, #232]
    1f48:	mov	x24, x19
    1f4c:	mov	x19, x28
    1f50:	mov	x28, x26
    1f54:	mov	x26, x23
    1f58:	mov	x23, x25
    1f5c:	mov	x25, x27
    1f60:	ldr	x27, [x29, #168]
    1f64:	add	x0, x29, #0x140
    1f68:	stp	xzr, xzr, [x29, #112]
    1f6c:	str	x0, [x29, #128]
    1f70:	mov	x0, #0xffffffffffffffff    	// #-1
    1f74:	str	x0, [x29, #144]
    1f78:	lsl	x3, x25, #5
    1f7c:	add	x5, x19, x3
    1f80:	ldr	x0, [x5, #64]
    1f84:	cbz	x0, 2090 <gomp_map_vars+0xb20>
    1f88:	add	x25, x25, #0x1
    1f8c:	cmp	x24, x25
    1f90:	b.hi	1f78 <gomp_map_vars+0xa08>  // b.pmore
    1f94:	ldr	w0, [x29, #184]
    1f98:	mov	x28, x19
    1f9c:	mov	x25, x23
    1fa0:	mov	x19, x24
    1fa4:	cmp	w0, #0x1
    1fa8:	ldr	x24, [x29, #232]
    1fac:	b.eq	27dc <gomp_map_vars+0x126c>  // b.none
    1fb0:	ldr	x0, [x29, #168]
    1fb4:	cbz	x0, 1824 <gomp_map_vars+0x2b4>
    1fb8:	ldr	x0, [x29, #280]
    1fbc:	ldr	x2, [x29, #256]
    1fc0:	cmp	x0, #0x0
    1fc4:	b.le	2030 <gomp_map_vars+0xac0>
    1fc8:	mov	x21, #0x0                   	// #0
    1fcc:	nop
    1fd0:	ldr	x3, [x29, #272]
    1fd4:	lsl	x1, x21, #4
    1fd8:	ldr	w0, [x24, #12]
    1fdc:	add	x4, x3, x1
    1fe0:	ldr	x19, [x3]
    1fe4:	ldr	x1, [x3, x1]
    1fe8:	ldr	x22, [x4, #8]
    1fec:	sub	x19, x1, x19
    1ff0:	ldr	x20, [x28, #16]
    1ff4:	sub	x22, x22, x1
    1ff8:	ldr	x4, [x24, #120]
    1ffc:	add	x20, x1, x20
    2000:	add	x19, x2, x19
    2004:	mov	x3, x22
    2008:	mov	x2, x19
    200c:	mov	x1, x20
    2010:	blr	x4
    2014:	tst	w0, #0xff
    2018:	b.eq	2b28 <gomp_map_vars+0x15b8>  // b.none
    201c:	ldr	x0, [x29, #280]
    2020:	add	x21, x21, #0x1
    2024:	ldr	x2, [x29, #256]
    2028:	cmp	x0, x21
    202c:	b.gt	1fd0 <gomp_map_vars+0xa60>
    2030:	mov	x0, x2
    2034:	bl	0 <free>
    2038:	ldr	w0, [x29, #184]
    203c:	str	xzr, [x29, #256]
    2040:	cmp	w0, #0x3
    2044:	b.ne	1830 <gomp_map_vars+0x2c0>  // b.any
    2048:	b	18b4 <gomp_map_vars+0x344>
    204c:	ldr	x0, [x29, #224]
    2050:	sub	x3, x3, #0x1
    2054:	add	x1, x29, #0x128
    2058:	str	x3, [x29, #296]
    205c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2060:	ldr	x3, [x29, #296]
    2064:	ldr	x2, [x29, #176]
    2068:	add	x3, x3, #0x1
    206c:	str	x3, [x29, #296]
    2070:	cbnz	x0, 1a78 <gomp_map_vars+0x508>
    2074:	ldr	x0, [x29, #224]
    2078:	add	x1, x29, #0x128
    207c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2080:	cbz	x0, 2b94 <gomp_map_vars+0x1624>
    2084:	ldr	x2, [x29, #176]
    2088:	ldr	x3, [x29, #296]
    208c:	b	1a78 <gomp_map_vars+0x508>
    2090:	sxtw	x0, w25
    2094:	cbz	w21, 23b8 <gomp_map_vars+0xe48>
    2098:	ldrh	w6, [x20, x0, lsl #1]
    209c:	ldr	x2, [x23, x25, lsl #3]
    20a0:	lsl	x7, x25, #3
    20a4:	add	x15, x23, x7
    20a8:	cbz	x2, 1f88 <gomp_map_vars+0xa18>
    20ac:	ldr	x0, [x29, #192]
    20b0:	and	w4, w22, w6
    20b4:	cmp	w4, #0x1c
    20b8:	sub	x14, x0, #0x1
    20bc:	b.eq	23c0 <gomp_map_vars+0xe50>  // b.none
    20c0:	b.gt	22b8 <gomp_map_vars+0xd48>
    20c4:	cmp	w4, #0xc
    20c8:	b.eq	246c <gomp_map_vars+0xefc>  // b.none
    20cc:	sub	w0, w4, #0xd
    20d0:	cmp	w0, #0x2
    20d4:	b.ls	1f88 <gomp_map_vars+0xa18>  // b.plast
    20d8:	str	x2, [x28]
    20dc:	cmp	w4, #0x4
    20e0:	add	x0, x2, #0x8
    20e4:	b.ne	24bc <gomp_map_vars+0xf4c>  // b.any
    20e8:	str	x0, [x28, #8]
    20ec:	mov	x1, x28
    20f0:	ldr	x0, [x29, #224]
    20f4:	str	w6, [x29, #152]
    20f8:	str	w4, [x29, #160]
    20fc:	str	x3, [x29, #176]
    2100:	stp	x14, x5, [x29, #200]
    2104:	str	x7, [x29, #216]
    2108:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    210c:	ldr	w6, [x29, #152]
    2110:	mov	x13, x0
    2114:	ldr	w4, [x29, #160]
    2118:	ldr	x3, [x29, #176]
    211c:	ldp	x14, x5, [x29, #200]
    2120:	ldr	x7, [x29, #216]
    2124:	cbz	x0, 27c0 <gomp_map_vars+0x1250>
    2128:	ldr	x0, [x0, #32]
    212c:	cmn	x0, #0x2
    2130:	b.eq	24e0 <gomp_map_vars+0xf70>  // b.none
    2134:	and	w2, w4, #0xe
    2138:	sub	w1, w4, #0x12
    213c:	cmp	w2, #0x2
    2140:	and	w1, w1, #0xff
    2144:	cset	w2, eq  // eq = none
    2148:	cmp	w1, #0x1
    214c:	cset	w1, ls  // ls = plast
    2150:	str	x13, [x5, #64]
    2154:	strb	w2, [x5, #72]
    2158:	add	x6, x19, x3
    215c:	strb	w1, [x5, #73]
    2160:	sxtb	w4, w4
    2164:	ldr	x5, [x13]
    2168:	cmp	w4, #0x0
    216c:	ldr	x2, [x28]
    2170:	sub	x1, x2, x5
    2174:	str	x1, [x6, #80]
    2178:	ccmp	x2, x5, #0x0, ge  // ge = tcont
    217c:	ldr	x1, [x28, #8]
    2180:	sub	x3, x1, x2
    2184:	str	x3, [x6, #88]
    2188:	b.cc	2ba8 <gomp_map_vars+0x1638>  // b.lo, b.ul, b.last
    218c:	ldr	x6, [x13, #8]
    2190:	cmp	x1, x6
    2194:	b.hi	2ba8 <gomp_map_vars+0x1638>  // b.pmore
    2198:	and	w4, w4, #0xfffffffd
    219c:	cmp	w4, #0x11
    21a0:	b.eq	2964 <gomp_map_vars+0x13f4>  // b.none
    21a4:	add	x25, x25, #0x1
    21a8:	cmn	x0, #0x1
    21ac:	b.eq	1f8c <gomp_map_vars+0xa1c>  // b.none
    21b0:	add	x0, x0, #0x1
    21b4:	str	x0, [x13, #32]
    21b8:	b	1f8c <gomp_map_vars+0xa1c>
    21bc:	str	xzr, [x29, #168]
    21c0:	ldr	x0, [x29, #200]
    21c4:	add	x0, x0, x0, lsl #3
    21c8:	lsl	x0, x0, #3
    21cc:	bl	0 <gomp_malloc>
    21d0:	mov	x26, x0
    21d4:	str	x0, [x28, #8]
    21d8:	b	1f40 <gomp_map_vars+0x9d0>
    21dc:	mov	x0, #0xffffffffffffffff    	// #-1
    21e0:	str	x0, [x29, #280]
    21e4:	b	19dc <gomp_map_vars+0x46c>
    21e8:	add	x5, x5, #0x1
    21ec:	mov	w14, #0x1                   	// #1
    21f0:	str	x0, [x9, #8]
    21f4:	b	1d90 <gomp_map_vars+0x820>
    21f8:	str	xzr, [x28, #8]
    21fc:	cbnz	w26, 1f30 <gomp_map_vars+0x9c0>
    2200:	str	xzr, [x29, #168]
    2204:	add	x22, x28, #0x40
    2208:	sub	x20, x25, #0x8
    220c:	mov	x21, #0x0                   	// #0
    2210:	ldr	x23, [x29, #168]
    2214:	b	2254 <gomp_map_vars+0xce4>
    2218:	ldp	x3, x0, [x0, #16]
    221c:	ldr	x5, [x3, #16]
    2220:	add	x2, x2, x0
    2224:	add	x5, x2, x5
    2228:	add	x1, x27, x1
    222c:	mov	x4, x23
    2230:	add	x2, x29, #0x140
    2234:	mov	x0, x24
    2238:	mov	x3, #0x8                   	// #8
    223c:	str	x5, [x29, #320]
    2240:	bl	5a8 <gomp_copy_host2dev>
    2244:	add	x22, x22, #0x20
    2248:	cmp	x19, x21
    224c:	b.eq	1fb0 <gomp_map_vars+0xa40>  // b.none
    2250:	ldr	x27, [x28, #16]
    2254:	add	x21, x21, #0x1
    2258:	ldr	x0, [x22]
    225c:	lsl	x1, x21, #3
    2260:	sub	x1, x1, #0x8
    2264:	ldr	x2, [x22, #16]
    2268:	cbnz	x0, 2218 <gomp_map_vars+0xca8>
    226c:	cmn	x2, #0x1
    2270:	b.eq	27b8 <gomp_map_vars+0x1248>  // b.none
    2274:	cmn	x2, #0x2
    2278:	mov	x5, #0x0                   	// #0
    227c:	b.eq	2228 <gomp_map_vars+0xcb8>  // b.none
    2280:	cmn	x2, #0x3
    2284:	add	x5, x27, x2
    2288:	b.ne	2228 <gomp_map_vars+0xcb8>  // b.any
    228c:	ldr	x0, [x22, #32]
    2290:	ldr	x3, [x25, x21, lsl #3]
    2294:	ldp	x4, x5, [x0, #16]
    2298:	ldr	x2, [x20, x21, lsl #3]
    229c:	sub	x2, x2, x3
    22a0:	ldr	x3, [x22, #48]
    22a4:	ldr	x0, [x4, #16]
    22a8:	add	x5, x5, x3
    22ac:	add	x2, x2, x5
    22b0:	add	x5, x2, x0
    22b4:	b	2228 <gomp_map_vars+0xcb8>
    22b8:	cmp	w4, #0x1d
    22bc:	b.ne	24b8 <gomp_map_vars+0xf48>  // b.any
    22c0:	add	x0, x2, #0x8
    22c4:	stp	x2, x0, [x29, #296]
    22c8:	add	x1, x29, #0x128
    22cc:	ldr	x0, [x29, #224]
    22d0:	stp	x3, x5, [x29, #200]
    22d4:	str	x7, [x29, #216]
    22d8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    22dc:	mov	x6, x0
    22e0:	cbz	x0, 2b14 <gomp_map_vars+0x15a4>
    22e4:	ldr	x13, [x0]
    22e8:	ldr	x1, [x29, #296]
    22ec:	cmp	x13, x1
    22f0:	b.hi	2b14 <gomp_map_vars+0x15a4>  // b.pmore
    22f4:	ldr	x2, [x0, #8]
    22f8:	ldr	x0, [x29, #304]
    22fc:	ldp	x3, x5, [x29, #200]
    2300:	cmp	x2, x0
    2304:	ldr	x7, [x29, #216]
    2308:	b.cc	2b14 <gomp_map_vars+0x15a4>  // b.lo, b.ul, b.last
    230c:	sub	w0, w25, #0x1
    2310:	sxtw	x2, w0
    2314:	cbz	w21, 24c8 <gomp_map_vars+0xf58>
    2318:	ldrh	w0, [x20, x2, lsl #1]
    231c:	and	w0, w22, w0
    2320:	cmp	w0, #0x1d
    2324:	b.eq	24d8 <gomp_map_vars+0xf68>  // b.none
    2328:	sub	x4, x25, #0x1
    232c:	ldr	x2, [x5, #32]
    2330:	add	x0, x19, x4, lsl #5
    2334:	ldr	x0, [x0, #80]
    2338:	cbz	x2, 2764 <gomp_map_vars+0x11f4>
    233c:	ldp	x4, x3, [x2, #16]
    2340:	ldr	x2, [x4, #16]
    2344:	add	x0, x0, x3
    2348:	add	x0, x0, x2
    234c:	str	x0, [x29, #320]
    2350:	cbz	x0, 2360 <gomp_map_vars+0xdf0>
    2354:	ldr	x2, [x26, x7]
    2358:	sub	x0, x0, x2
    235c:	str	x0, [x29, #320]
    2360:	ldp	x0, x2, [x6, #16]
    2364:	mov	x3, #0x8                   	// #8
    2368:	mov	x4, x27
    236c:	str	x6, [x29, #216]
    2370:	add	x25, x25, #0x1
    2374:	ldr	x0, [x0, #16]
    2378:	add	x1, x1, x2
    237c:	ldr	x2, [x29, #128]
    2380:	sub	x13, x0, x13
    2384:	ldr	x0, [x29, #232]
    2388:	add	x1, x13, x1
    238c:	bl	5a8 <gomp_copy_host2dev>
    2390:	ldr	x6, [x29, #216]
    2394:	ldr	x2, [x29, #296]
    2398:	ldp	x0, x1, [x6, #16]
    239c:	ldr	x3, [x6]
    23a0:	ldr	x0, [x0, #16]
    23a4:	add	x1, x1, x2
    23a8:	sub	x0, x0, x3
    23ac:	add	x0, x0, x1
    23b0:	str	x0, [x29, #320]
    23b4:	b	1f8c <gomp_map_vars+0xa1c>
    23b8:	ldrb	w6, [x20, x0]
    23bc:	b	209c <gomp_map_vars+0xb2c>
    23c0:	ldr	x13, [x26, x7]
    23c4:	ldr	x1, [x5, #96]
    23c8:	add	x13, x25, x13
    23cc:	ldr	x0, [x23, x13, lsl #3]
    23d0:	ldr	x3, [x26, x13, lsl #3]
    23d4:	add	x0, x0, x3
    23d8:	stp	x2, x0, [x29, #296]
    23dc:	add	x2, x25, #0x1
    23e0:	mov	x25, x2
    23e4:	cbnz	x1, 1f8c <gomp_map_vars+0xa1c>
    23e8:	ldr	x0, [x29, #224]
    23ec:	add	x1, x29, #0x128
    23f0:	str	x2, [x29, #152]
    23f4:	str	w6, [x29, #160]
    23f8:	str	x14, [x29, #176]
    23fc:	stp	x13, x15, [x29, #200]
    2400:	str	x7, [x29, #216]
    2404:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2408:	ldr	w6, [x29, #160]
    240c:	ldr	x14, [x29, #176]
    2410:	ldp	x13, x15, [x29, #200]
    2414:	ldr	x7, [x29, #216]
    2418:	cbnz	x0, 27e4 <gomp_map_vars+0x1274>
    241c:	ldrb	w0, [x29, #188]
    2420:	mov	x1, #0x1                   	// #1
    2424:	ldr	x2, [x23, x7]
    2428:	str	x13, [x29, #144]
    242c:	ldr	x4, [x15, #8]
    2430:	asr	w0, w6, w0
    2434:	add	x14, x2, x14
    2438:	lsl	x0, x1, x0
    243c:	sub	x1, x0, x4
    2440:	neg	x0, x0
    2444:	ldr	x3, [x29, #304]
    2448:	add	x1, x1, x14
    244c:	and	x0, x1, x0
    2450:	sub	x2, x4, x2
    2454:	add	x1, x2, x0
    2458:	sub	x0, x3, x4
    245c:	add	x0, x0, x1
    2460:	stp	x4, x1, [x29, #112]
    2464:	str	x0, [x29, #192]
    2468:	b	1f8c <gomp_map_vars+0xa1c>
    246c:	ldrb	w1, [x29, #188]
    2470:	add	x0, x19, x3
    2474:	ldr	x3, [x26, x7]
    2478:	add	x25, x25, #0x1
    247c:	asr	w6, w6, w1
    2480:	mov	x1, #0x1                   	// #1
    2484:	lsl	x6, x1, x6
    2488:	add	x14, x6, x14
    248c:	neg	x6, x6
    2490:	mov	x4, x27
    2494:	and	x6, x14, x6
    2498:	ldr	x1, [x19, #16]
    249c:	str	x6, [x0, #80]
    24a0:	add	x0, x6, x3
    24a4:	str	x0, [x29, #192]
    24a8:	ldr	x0, [x29, #232]
    24ac:	add	x1, x6, x1
    24b0:	bl	5a8 <gomp_copy_host2dev>
    24b4:	b	1f8c <gomp_map_vars+0xa1c>
    24b8:	str	x2, [x28]
    24bc:	ldr	x0, [x26, x7]
    24c0:	add	x0, x2, x0
    24c4:	b	20e8 <gomp_map_vars+0xb78>
    24c8:	ldrb	w0, [x20, w0, sxtw]
    24cc:	and	w0, w22, w0
    24d0:	cmp	w0, #0x1d
    24d4:	b.ne	2328 <gomp_map_vars+0xdb8>  // b.any
    24d8:	ldr	x0, [x29, #320]
    24dc:	b	2350 <gomp_map_vars+0xde0>
    24e0:	ldr	x0, [x29, #224]
    24e4:	str	xzr, [x28, #48]
    24e8:	mov	x1, x13
    24ec:	str	w6, [x29, #108]
    24f0:	str	w4, [x29, #152]
    24f4:	str	x3, [x29, #160]
    24f8:	str	x14, [x29, #176]
    24fc:	stp	x5, x7, [x29, #200]
    2500:	str	x13, [x29, #216]
    2504:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2508:	ldp	x5, x7, [x29, #200]
    250c:	ldr	w6, [x29, #108]
    2510:	ldr	w4, [x29, #152]
    2514:	ldr	x3, [x29, #160]
    2518:	ldr	x14, [x29, #176]
    251c:	ldr	x13, [x29, #216]
    2520:	str	x13, [x28, #48]
    2524:	ldp	x0, x2, [x28]
    2528:	str	x28, [x5, #64]
    252c:	ldr	x1, [x29, #144]
    2530:	str	x19, [x28, #16]
    2534:	cmn	x1, #0x1
    2538:	sub	x2, x2, x0
    253c:	b.eq	278c <gomp_map_vars+0x121c>  // b.none
    2540:	ldr	x8, [x29, #112]
    2544:	cmp	x25, x1
    2548:	csinv	x1, x1, xzr, ne  // ne = any
    254c:	str	x1, [x29, #144]
    2550:	sub	x0, x0, x8
    2554:	ldr	x8, [x29, #120]
    2558:	add	x0, x0, x8
    255c:	str	x0, [x28, #24]
    2560:	and	w1, w4, #0xe
    2564:	and	w0, w4, #0xfffffffe
    2568:	cmp	w1, #0x2
    256c:	add	x3, x19, x3
    2570:	cset	w1, eq  // eq = none
    2574:	cmp	w0, #0x12
    2578:	cset	w0, eq  // eq = none
    257c:	strb	w1, [x5, #72]
    2580:	strb	w0, [x5, #73]
    2584:	mov	x1, x28
    2588:	stp	xzr, x2, [x3, #80]
    258c:	mov	x3, #0x1                   	// #1
    2590:	ldr	x2, [x19]
    2594:	stp	x3, xzr, [x28, #32]
    2598:	ldr	x0, [x29, #224]
    259c:	add	x2, x2, x3
    25a0:	str	x2, [x19]
    25a4:	stp	xzr, xzr, [x28, #56]
    25a8:	str	x13, [x29, #160]
    25ac:	str	w6, [x29, #176]
    25b0:	str	x7, [x29, #200]
    25b4:	str	w4, [x29, #208]
    25b8:	str	x5, [x29, #216]
    25bc:	bl	0 <splay_tree_prefix_splay_tree_insert>
    25c0:	ldr	w4, [x29, #208]
    25c4:	ldr	x13, [x29, #160]
    25c8:	cmp	w4, #0x5
    25cc:	ldr	x5, [x29, #216]
    25d0:	b.eq	2868 <gomp_map_vars+0x12f8>  // b.none
    25d4:	ldr	w6, [x29, #176]
    25d8:	b.le	267c <gomp_map_vars+0x110c>
    25dc:	cmp	w4, #0x11
    25e0:	b.eq	2608 <gomp_map_vars+0x1098>  // b.none
    25e4:	b.le	26b0 <gomp_map_vars+0x1140>
    25e8:	cmp	w4, #0x80
    25ec:	b.eq	2630 <gomp_map_vars+0x10c0>  // b.none
    25f0:	b.le	2728 <gomp_map_vars+0x11b8>
    25f4:	cmp	w4, #0x82
    25f8:	b.eq	2630 <gomp_map_vars+0x10c0>  // b.none
    25fc:	and	w4, w4, #0xfffffffd
    2600:	cmp	w4, #0x81
    2604:	b.ne	26fc <gomp_map_vars+0x118c>  // b.any
    2608:	ldp	x2, x3, [x28]
    260c:	mov	x4, x27
    2610:	ldr	x5, [x19, #16]
    2614:	str	x13, [x29, #216]
    2618:	ldr	x0, [x29, #232]
    261c:	ldr	x1, [x28, #24]
    2620:	sub	x3, x3, x2
    2624:	add	x1, x5, x1
    2628:	bl	5a8 <gomp_copy_host2dev>
    262c:	ldr	x13, [x29, #216]
    2630:	ldr	x0, [x28, #48]
    2634:	cbz	x0, 2674 <gomp_map_vars+0x1104>
    2638:	ldr	x5, [x29, #232]
    263c:	add	x2, x29, #0xf8
    2640:	ldr	x4, [x19, #16]
    2644:	mov	x3, #0x8                   	// #8
    2648:	ldr	x1, [x28, #24]
    264c:	ldr	w0, [x5, #12]
    2650:	add	x4, x4, x1
    2654:	str	x4, [x29, #248]
    2658:	ldr	x1, [x13, #24]
    265c:	str	x1, [x29, #216]
    2660:	ldr	x5, [x5, #120]
    2664:	blr	x5
    2668:	tst	w0, #0xff
    266c:	ldr	x1, [x29, #216]
    2670:	b.eq	2bfc <gomp_map_vars+0x168c>  // b.none
    2674:	add	x28, x28, #0x48
    2678:	b	1f88 <gomp_map_vars+0xa18>
    267c:	cmp	w4, #0x4
    2680:	ldr	x7, [x29, #200]
    2684:	b.ne	26f4 <gomp_map_vars+0x1184>  // b.any
    2688:	ldr	x1, [x28]
    268c:	mov	x4, x27
    2690:	ldr	x3, [x26, x7]
    2694:	mov	x0, x19
    2698:	ldr	x1, [x1]
    269c:	str	x13, [x29, #216]
    26a0:	ldr	x2, [x28, #24]
    26a4:	bl	6e8 <gomp_map_pointer>
    26a8:	ldr	x13, [x29, #216]
    26ac:	b	2630 <gomp_map_vars+0x10c0>
    26b0:	cmp	w4, #0x6
    26b4:	b.eq	2bd4 <gomp_map_vars+0x1664>  // b.none
    26b8:	cmp	w4, #0x8
    26bc:	b.ne	26fc <gomp_map_vars+0x118c>  // b.any
    26c0:	ldp	x2, x3, [x28]
    26c4:	sub	x3, x3, x2
    26c8:	cmp	x3, #0x8
    26cc:	b.ne	2c3c <gomp_map_vars+0x16cc>  // b.any
    26d0:	ldr	x5, [x19, #16]
    26d4:	mov	x4, x27
    26d8:	ldr	x0, [x29, #232]
    26dc:	str	x13, [x29, #216]
    26e0:	ldr	x1, [x28, #24]
    26e4:	add	x1, x5, x1
    26e8:	bl	5a8 <gomp_copy_host2dev>
    26ec:	ldr	x13, [x29, #216]
    26f0:	b	2630 <gomp_map_vars+0x10c0>
    26f4:	cmp	w4, #0x5
    26f8:	b.ne	273c <gomp_map_vars+0x11cc>  // b.any
    26fc:	ldr	x0, [x29, #136]
    2700:	str	w6, [x29, #232]
    2704:	bl	2d0 <gomp_mutex_unlock>
    2708:	ldr	w6, [x29, #232]
    270c:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    2710:	add	x1, x1, #0x0
    2714:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2718:	add	x1, x1, #0x10
    271c:	add	x0, x0, #0x0
    2720:	mov	w2, w6
    2724:	bl	0 <gomp_fatal>
    2728:	cmp	w4, #0x12
    272c:	b.eq	2630 <gomp_map_vars+0x10c0>  // b.none
    2730:	cmp	w4, #0x13
    2734:	b.eq	2608 <gomp_map_vars+0x1098>  // b.none
    2738:	b	26fc <gomp_map_vars+0x118c>
    273c:	cmp	w4, #0x2
    2740:	b.eq	2630 <gomp_map_vars+0x10c0>  // b.none
    2744:	b.le	2754 <gomp_map_vars+0x11e4>
    2748:	cmp	w4, #0x3
    274c:	b.eq	2608 <gomp_map_vars+0x1098>  // b.none
    2750:	b	26fc <gomp_map_vars+0x118c>
    2754:	cbz	w4, 2630 <gomp_map_vars+0x10c0>
    2758:	cmp	w4, #0x1
    275c:	b.eq	2608 <gomp_map_vars+0x1098>  // b.none
    2760:	b	26fc <gomp_map_vars+0x118c>
    2764:	cmn	x0, #0x1
    2768:	b.eq	29d8 <gomp_map_vars+0x1468>  // b.none
    276c:	cmn	x0, #0x2
    2770:	b.eq	2a24 <gomp_map_vars+0x14b4>  // b.none
    2774:	cmn	x0, #0x3
    2778:	b.eq	2a68 <gomp_map_vars+0x14f8>  // b.none
    277c:	ldr	x2, [x19, #16]
    2780:	add	x0, x0, x2
    2784:	str	x0, [x29, #320]
    2788:	b	2350 <gomp_map_vars+0xde0>
    278c:	ldrb	w0, [x29, #188]
    2790:	mov	x1, #0x1                   	// #1
    2794:	asr	w0, w6, w0
    2798:	lsl	x0, x1, x0
    279c:	add	x14, x0, x14
    27a0:	neg	x0, x0
    27a4:	and	x0, x14, x0
    27a8:	str	x0, [x28, #24]
    27ac:	add	x0, x0, x2
    27b0:	str	x0, [x29, #192]
    27b4:	b	2560 <gomp_map_vars+0xff0>
    27b8:	ldr	x5, [x20, x21, lsl #3]
    27bc:	b	2228 <gomp_map_vars+0xcb8>
    27c0:	str	xzr, [x28, #48]
    27c4:	b	2524 <gomp_map_vars+0xfb4>
    27c8:	mov	w13, #0x1                   	// #1
    27cc:	mov	x3, #0xffffffffffffffff    	// #-1
    27d0:	b	1d90 <gomp_map_vars+0x820>
    27d4:	str	xzr, [x29, #280]
    27d8:	b	161c <gomp_map_vars+0xac>
    27dc:	ldr	x27, [x28, #16]
    27e0:	b	2204 <gomp_map_vars+0xc94>
    27e4:	cmp	x25, x13
    27e8:	ldr	x2, [x29, #152]
    27ec:	b.hi	1f8c <gomp_map_vars+0xa1c>  // b.pmore
    27f0:	str	x24, [x29, #200]
    27f4:	mov	x24, x20
    27f8:	mov	x20, x0
    27fc:	str	w22, [x29, #208]
    2800:	mov	x22, x25
    2804:	mov	w25, w21
    2808:	mov	x21, x19
    280c:	mov	x19, x13
    2810:	str	x28, [x29, #216]
    2814:	mov	x28, x2
    2818:	mov	x3, x22
    281c:	mov	x7, x27
    2820:	mov	x6, x24
    2824:	mov	x5, x26
    2828:	mov	x4, x23
    282c:	mov	x2, x28
    2830:	add	x22, x22, #0x1
    2834:	mov	x1, x20
    2838:	mov	x0, x21
    283c:	bl	1158 <gomp_map_fields_existing>
    2840:	cmp	x19, x22
    2844:	b.cs	2818 <gomp_map_vars+0x12a8>  // b.hs, b.nlast
    2848:	mov	x19, x21
    284c:	mov	x20, x24
    2850:	mov	w21, w25
    2854:	mov	x25, x22
    2858:	ldr	w22, [x29, #208]
    285c:	ldr	x24, [x29, #200]
    2860:	ldr	x28, [x29, #216]
    2864:	b	1f8c <gomp_map_vars+0xa1c>
    2868:	ldp	x2, x3, [x28]
    286c:	mov	x4, x27
    2870:	ldr	x6, [x19, #16]
    2874:	stp	x13, x5, [x29, #208]
    2878:	ldr	x0, [x29, #232]
    287c:	sub	x3, x3, x2
    2880:	ldr	x1, [x28, #24]
    2884:	add	x1, x6, x1
    2888:	bl	5a8 <gomp_copy_host2dev>
    288c:	add	x6, x25, #0x1
    2890:	cmp	x24, x6
    2894:	ldr	x13, [x29, #208]
    2898:	b.ls	2630 <gomp_map_vars+0x10c0>  // b.plast
    289c:	ldr	x5, [x29, #216]
    28a0:	mov	x25, x6
    28a4:	str	x24, [x29, #216]
    28a8:	mov	x24, x27
    28ac:	mov	x27, x5
    28b0:	b	293c <gomp_map_vars+0x13cc>
    28b4:	ldrh	w0, [x20, x0, lsl #1]
    28b8:	and	w0, w22, w0
    28bc:	cmp	w0, #0x4
    28c0:	b.ne	2994 <gomp_map_vars+0x1424>  // b.any
    28c4:	ldr	x2, [x23, x25, lsl #3]
    28c8:	ldr	x7, [x28]
    28cc:	cmp	x2, x7
    28d0:	b.cc	2994 <gomp_map_vars+0x1424>  // b.lo, b.ul, b.last
    28d4:	ldr	x0, [x28, #8]
    28d8:	add	x1, x2, #0x8
    28dc:	cmp	x1, x0
    28e0:	b.hi	2994 <gomp_map_vars+0x1424>  // b.pmore
    28e4:	ldr	x0, [x28, #32]
    28e8:	str	x28, [x27, #96]
    28ec:	strb	wzr, [x27, #104]
    28f0:	strb	wzr, [x27, #105]
    28f4:	cmn	x0, #0x1
    28f8:	b.eq	2904 <gomp_map_vars+0x1394>  // b.none
    28fc:	add	x0, x0, #0x1
    2900:	str	x0, [x28, #32]
    2904:	ldr	x6, [x28, #24]
    2908:	mov	x0, x19
    290c:	ldr	x1, [x2]
    2910:	sub	x6, x6, x7
    2914:	ldr	x3, [x26, x25, lsl #3]
    2918:	mov	x4, x24
    291c:	add	x2, x2, x6
    2920:	add	x27, x27, #0x20
    2924:	bl	6e8 <gomp_map_pointer>
    2928:	ldr	x1, [x29, #216]
    292c:	add	x0, x25, #0x1
    2930:	cmp	x1, x0
    2934:	b.ls	2a9c <gomp_map_vars+0x152c>  // b.plast
    2938:	mov	x25, x0
    293c:	sub	x3, x25, #0x1
    2940:	sxtw	x0, w25
    2944:	cbnz	w21, 28b4 <gomp_map_vars+0x1344>
    2948:	ldrb	w0, [x20, x0]
    294c:	b	28b8 <gomp_map_vars+0x1348>
    2950:	ldr	w0, [x29, #160]
    2954:	stp	xzr, xzr, [x28, #8]
    2958:	stp	xzr, xzr, [x28, #24]
    295c:	cbz	w0, 1824 <gomp_map_vars+0x2b4>
    2960:	b	1f38 <gomp_map_vars+0x9c8>
    2964:	ldp	x0, x1, [x13, #16]
    2968:	mov	x4, x27
    296c:	str	x13, [x29, #216]
    2970:	ldr	x0, [x0, #16]
    2974:	add	x1, x2, x1
    2978:	sub	x5, x0, x5
    297c:	ldr	x0, [x29, #232]
    2980:	add	x1, x5, x1
    2984:	bl	5a8 <gomp_copy_host2dev>
    2988:	ldr	x13, [x29, #216]
    298c:	ldr	x0, [x13, #32]
    2990:	b	21a4 <gomp_map_vars+0xc34>
    2994:	mov	x27, x24
    2998:	mov	x25, x3
    299c:	ldp	x13, x24, [x29, #208]
    29a0:	b	2630 <gomp_map_vars+0x10c0>
    29a4:	ldr	x0, [x29, #136]
    29a8:	bl	0 <gomp_mutex_unlock_slow>
    29ac:	b	1844 <gomp_map_vars+0x2d4>
    29b0:	ldr	x0, [x29, #216]
    29b4:	str	x0, [x11, #8]
    29b8:	add	x12, x12, #0x1
    29bc:	str	x12, [x29, #288]
    29c0:	b	19dc <gomp_map_vars+0x46c>
    29c4:	ldr	x0, [x29, #216]
    29c8:	str	x0, [x4, #8]
    29cc:	add	x5, x5, #0x1
    29d0:	str	x5, [x29, #288]
    29d4:	b	1ca0 <gomp_map_vars+0x730>
    29d8:	ldr	x0, [x23, x4, lsl #3]
    29dc:	str	x0, [x29, #320]
    29e0:	b	2350 <gomp_map_vars+0xde0>
    29e4:	ldr	x1, [x29, #272]
    29e8:	add	x0, x1, x0, lsl #4
    29ec:	ldr	x1, [x1]
    29f0:	ldur	x0, [x0, #-8]
    29f4:	sub	x0, x0, x1
    29f8:	bl	0 <malloc>
    29fc:	str	x0, [x29, #256]
    2a00:	cbz	x0, 21f8 <gomp_map_vars+0xc88>
    2a04:	str	xzr, [x28, #8]
    2a08:	str	x28, [x29, #264]
    2a0c:	cbnz	w26, 2aac <gomp_map_vars+0x153c>
    2a10:	add	x0, x29, #0x100
    2a14:	str	x0, [x29, #168]
    2a18:	b	2204 <gomp_map_vars+0xc94>
    2a1c:	mov	x28, x2
    2a20:	b	17b8 <gomp_map_vars+0x248>
    2a24:	str	xzr, [x29, #320]
    2a28:	b	2360 <gomp_map_vars+0xdf0>
    2a2c:	sub	x3, x0, #0x1
    2a30:	lsl	x3, x3, #4
    2a34:	b	19c4 <gomp_map_vars+0x454>
    2a38:	mov	x0, #0xffffffffffffffff    	// #-1
    2a3c:	str	x0, [x29, #280]
    2a40:	b	1ca0 <gomp_map_vars+0x730>
    2a44:	ldr	x1, [x29, #136]
    2a48:	ldxr	w0, [x1]
    2a4c:	stlxr	w2, wzr, [x1]
    2a50:	cbnz	w2, 2a48 <gomp_map_vars+0x14d8>
    2a54:	tbnz	w0, #31, 2adc <gomp_map_vars+0x156c>
    2a58:	mov	x0, x28
    2a5c:	mov	x28, #0x0                   	// #0
    2a60:	bl	0 <free>
    2a64:	b	1844 <gomp_map_vars+0x2d4>
    2a68:	ldr	x2, [x5, #64]
    2a6c:	add	x3, x19, x3
    2a70:	ldr	x0, [x23, x4, lsl #3]
    2a74:	ldp	x5, x2, [x2, #16]
    2a78:	ldr	x3, [x3, #80]
    2a7c:	ldr	x4, [x23, x7]
    2a80:	add	x2, x2, x3
    2a84:	ldr	x3, [x5, #16]
    2a88:	sub	x0, x0, x4
    2a8c:	add	x0, x0, x2
    2a90:	add	x0, x0, x3
    2a94:	str	x0, [x29, #320]
    2a98:	b	2350 <gomp_map_vars+0xde0>
    2a9c:	mov	x27, x24
    2aa0:	mov	x24, x1
    2aa4:	ldr	x13, [x29, #208]
    2aa8:	b	2630 <gomp_map_vars+0x10c0>
    2aac:	ldr	x0, [x29, #200]
    2ab0:	cbnz	x0, 2ad0 <gomp_map_vars+0x1560>
    2ab4:	add	x0, x29, #0x100
    2ab8:	mov	x26, #0x0                   	// #0
    2abc:	str	x0, [x29, #168]
    2ac0:	b	1f40 <gomp_map_vars+0x9d0>
    2ac4:	sub	x2, x0, #0x1
    2ac8:	lsl	x2, x2, #4
    2acc:	b	1c88 <gomp_map_vars+0x718>
    2ad0:	add	x0, x29, #0x100
    2ad4:	str	x0, [x29, #168]
    2ad8:	b	21c0 <gomp_map_vars+0xc50>
    2adc:	ldr	x0, [x29, #136]
    2ae0:	bl	0 <gomp_mutex_unlock_slow>
    2ae4:	b	2a58 <gomp_map_vars+0x14e8>
    2ae8:	ldr	x1, [x29, #136]
    2aec:	mov	x6, x7
    2af0:	ldxr	w0, [x1]
    2af4:	stlxr	w2, wzr, [x1]
    2af8:	cbnz	w2, 2af0 <gomp_map_vars+0x1580>
    2afc:	tbnz	w0, #31, 2c5c <gomp_map_vars+0x16ec>
    2b00:	ldp	x3, x4, [x6]
    2b04:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2b08:	ldp	x1, x2, [x29, #296]
    2b0c:	add	x0, x0, #0x0
    2b10:	bl	0 <gomp_fatal>
    2b14:	ldr	x0, [x29, #136]
    2b18:	bl	2d0 <gomp_mutex_unlock>
    2b1c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2b20:	add	x0, x0, #0x0
    2b24:	bl	0 <gomp_fatal>
    2b28:	ldr	x1, [x29, #136]
    2b2c:	ldxr	w0, [x1]
    2b30:	stlxr	w2, wzr, [x1]
    2b34:	cbnz	w2, 2b2c <gomp_map_vars+0x15bc>
    2b38:	tbnz	w0, #31, 2b88 <gomp_map_vars+0x1618>
    2b3c:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    2b40:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    2b44:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2b48:	add	x4, x4, #0x0
    2b4c:	add	x1, x1, #0x0
    2b50:	add	x6, x20, x22
    2b54:	add	x0, x0, #0x0
    2b58:	mov	x5, x20
    2b5c:	add	x3, x19, x22
    2b60:	mov	x2, x19
    2b64:	bl	0 <gomp_fatal>
    2b68:	ldr	x0, [x29, #136]
    2b6c:	bl	0 <gomp_mutex_lock_slow>
    2b70:	b	1650 <gomp_map_vars+0xe0>
    2b74:	ldr	x0, [x29, #136]
    2b78:	bl	2d0 <gomp_mutex_unlock>
    2b7c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2b80:	add	x0, x0, #0x0
    2b84:	bl	0 <gomp_fatal>
    2b88:	ldr	x0, [x29, #136]
    2b8c:	bl	0 <gomp_mutex_unlock_slow>
    2b90:	b	2b3c <gomp_map_vars+0x15cc>
    2b94:	ldr	x0, [x29, #136]
    2b98:	bl	2d0 <gomp_mutex_unlock>
    2b9c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2ba0:	add	x0, x0, #0x0
    2ba4:	bl	0 <gomp_fatal>
    2ba8:	ldr	x24, [x29, #232]
    2bac:	mov	x1, x13
    2bb0:	add	x3, x28, #0x8
    2bb4:	mov	x2, x28
    2bb8:	mov	x0, x24
    2bbc:	bl	828 <gomp_map_vars_existing.isra.0.part.0>
    2bc0:	ldr	x0, [x29, #136]
    2bc4:	bl	2d0 <gomp_mutex_unlock>
    2bc8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2bcc:	add	x0, x0, #0x0
    2bd0:	bl	0 <gomp_fatal>
    2bd4:	ldp	x1, x19, [x28]
    2bd8:	ldr	x0, [x29, #136]
    2bdc:	sub	x19, x19, x1
    2be0:	bl	2d0 <gomp_mutex_unlock>
    2be4:	ldr	x1, [x28]
    2be8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2bec:	mov	x3, x19
    2bf0:	mov	x2, x19
    2bf4:	add	x0, x0, #0x0
    2bf8:	bl	0 <gomp_fatal>
    2bfc:	mov	x5, x1
    2c00:	ldr	x1, [x29, #136]
    2c04:	ldxr	w0, [x1]
    2c08:	stlxr	w2, wzr, [x1]
    2c0c:	cbnz	w2, 2c04 <gomp_map_vars+0x1694>
    2c10:	tbnz	w0, #31, 2c70 <gomp_map_vars+0x1700>
    2c14:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    2c18:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    2c1c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2c20:	add	x4, x4, #0x0
    2c24:	add	x1, x1, #0x0
    2c28:	add	x6, x5, #0x8
    2c2c:	add	x0, x0, #0x0
    2c30:	add	x2, x29, #0xf8
    2c34:	add	x3, x29, #0x100
    2c38:	bl	0 <gomp_fatal>
    2c3c:	adrp	x3, 0 <omp_target_memcpy_rect_worker>
    2c40:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    2c44:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2c48:	add	x3, x3, #0x0
    2c4c:	add	x1, x1, #0x0
    2c50:	add	x0, x0, #0x0
    2c54:	mov	w2, #0x3b4                 	// #948
    2c58:	bl	0 <__assert_fail>
    2c5c:	ldr	x0, [x29, #136]
    2c60:	str	x6, [x29, #232]
    2c64:	bl	0 <gomp_mutex_unlock_slow>
    2c68:	ldr	x6, [x29, #232]
    2c6c:	b	2b00 <gomp_map_vars+0x1590>
    2c70:	ldr	x0, [x29, #136]
    2c74:	str	x5, [x29, #232]
    2c78:	bl	0 <gomp_mutex_unlock_slow>
    2c7c:	ldr	x5, [x29, #232]
    2c80:	b	2c14 <gomp_map_vars+0x16a4>
    2c84:	nop

0000000000002c88 <gomp_target_data_fallback>:
    2c88:	adrp	x1, 0 <gomp_tls_data>
    2c8c:	ldr	x1, [x1]
    2c90:	mrs	x0, tpidr_el0
    2c94:	stp	x29, x30, [sp, #-32]!
    2c98:	add	x0, x0, x1
    2c9c:	mov	x29, sp
    2ca0:	ldr	x0, [x0, #80]
    2ca4:	str	x19, [sp, #16]
    2ca8:	adrp	x19, 0 <gomp_global_icv>
    2cac:	add	x19, x19, #0x0
    2cb0:	cmp	x0, #0x0
    2cb4:	add	x0, x0, #0x90
    2cb8:	csel	x19, x19, x0, eq  // eq = none
    2cbc:	ldr	x0, [x19, #32]
    2cc0:	cbz	x0, 2cf4 <gomp_target_data_fallback+0x6c>
    2cc4:	mov	x1, #0x0                   	// #0
    2cc8:	mov	w7, #0x2                   	// #2
    2ccc:	mov	w6, #0x0                   	// #0
    2cd0:	mov	x5, #0x0                   	// #0
    2cd4:	mov	x4, #0x0                   	// #0
    2cd8:	mov	x3, #0x0                   	// #0
    2cdc:	mov	x2, #0x0                   	// #0
    2ce0:	mov	x0, #0x0                   	// #0
    2ce4:	bl	1570 <gomp_map_vars>
    2ce8:	ldr	x1, [x19, #32]
    2cec:	str	x1, [x0, #40]
    2cf0:	str	x0, [x19, #32]
    2cf4:	ldr	x19, [sp, #16]
    2cf8:	ldp	x29, x30, [sp], #32
    2cfc:	ret

0000000000002d00 <gomp_remove_var>:
    2d00:	stp	x29, x30, [sp, #-32]!
    2d04:	mov	x29, sp
    2d08:	stp	x19, x20, [sp, #16]
    2d0c:	mov	x19, x1
    2d10:	add	x20, x0, #0xa0
    2d14:	mov	x0, x20
    2d18:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2d1c:	ldr	x1, [x19, #48]
    2d20:	cbz	x1, 2d2c <gomp_remove_var+0x2c>
    2d24:	mov	x0, x20
    2d28:	bl	0 <splay_tree_prefix_splay_tree_insert>
    2d2c:	ldr	x2, [x19, #16]
    2d30:	ldr	x1, [x2]
    2d34:	cmp	x1, #0x1
    2d38:	b.ls	2d54 <gomp_remove_var+0x54>  // b.plast
    2d3c:	sub	x1, x1, #0x1
    2d40:	str	x1, [x2]
    2d44:	mov	w0, #0x0                   	// #0
    2d48:	ldp	x19, x20, [sp, #16]
    2d4c:	ldp	x29, x30, [sp], #32
    2d50:	ret
    2d54:	mov	x0, x2
    2d58:	bl	430 <gomp_unmap_tgt>
    2d5c:	mov	w0, #0x1                   	// #1
    2d60:	ldp	x19, x20, [sp, #16]
    2d64:	ldp	x29, x30, [sp], #32
    2d68:	ret
    2d6c:	nop

0000000000002d70 <gomp_unload_image_from_device>:
    2d70:	stp	x29, x30, [sp, #-176]!
    2d74:	mov	x29, sp
    2d78:	stp	x19, x20, [sp, #16]
    2d7c:	mov	x20, x3
    2d80:	stp	x25, x26, [sp, #64]
    2d84:	ldp	x19, x26, [x2, #16]
    2d88:	stp	x27, x28, [sp, #80]
    2d8c:	ldp	x28, x4, [x2]
    2d90:	stp	x23, x24, [sp, #48]
    2d94:	mov	x23, x0
    2d98:	sub	x26, x26, x19
    2d9c:	lsr	x0, x26, #63
    2da0:	add	x26, x0, x26, asr #3
    2da4:	sub	x4, x4, x28
    2da8:	asr	x26, x26, #1
    2dac:	asr	x4, x4, #3
    2db0:	orr	w0, w26, w4
    2db4:	cbz	w0, 2ee0 <gomp_unload_image_from_device+0x170>
    2db8:	stp	x21, x22, [sp, #32]
    2dbc:	mov	w24, w1
    2dc0:	str	x4, [sp, #104]
    2dc4:	cbz	w4, 2f10 <gomp_unload_image_from_device+0x1a0>
    2dc8:	ldr	x2, [x28]
    2dcc:	add	x21, x23, #0xa0
    2dd0:	add	x22, sp, #0x78
    2dd4:	mov	w27, w4
    2dd8:	add	x3, x2, #0x1
    2ddc:	mov	x1, x22
    2de0:	mov	x0, x21
    2de4:	stp	x2, x3, [sp, #120]
    2de8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2dec:	mov	x25, x0
    2df0:	ldr	w0, [x23, #12]
    2df4:	mov	x2, x20
    2df8:	ldr	x3, [x23, #88]
    2dfc:	mov	w1, w24
    2e00:	blr	x3
    2e04:	tst	w0, #0xff
    2e08:	ldr	x4, [sp, #104]
    2e0c:	b.eq	2efc <gomp_unload_image_from_device+0x18c>  // b.none
    2e10:	cmp	x25, #0x0
    2e14:	mov	x20, #0x0                   	// #0
    2e18:	cset	w24, ne  // ne = any
    2e1c:	cmp	w4, #0x0
    2e20:	b.le	2e4c <gomp_unload_image_from_device+0xdc>
    2e24:	nop
    2e28:	ldr	x2, [x28, x20, lsl #3]
    2e2c:	mov	x1, x22
    2e30:	add	x20, x20, #0x1
    2e34:	mov	x0, x21
    2e38:	add	x3, x2, #0x1
    2e3c:	stp	x2, x3, [sp, #120]
    2e40:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2e44:	cmp	w27, w20
    2e48:	b.gt	2e28 <gomp_unload_image_from_device+0xb8>
    2e4c:	cmp	w26, #0x0
    2e50:	b.le	2ec0 <gomp_unload_image_from_device+0x150>
    2e54:	sub	w20, w26, #0x1
    2e58:	add	x0, x19, #0x10
    2e5c:	mov	w26, #0x0                   	// #0
    2e60:	add	x20, x0, w20, uxtw #4
    2e64:	b	2e7c <gomp_unload_image_from_device+0x10c>
    2e68:	mov	x0, x21
    2e6c:	add	x19, x19, #0x10
    2e70:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2e74:	cmp	x20, x19
    2e78:	b.eq	2eb8 <gomp_unload_image_from_device+0x148>  // b.none
    2e7c:	ldp	x2, x0, [x19]
    2e80:	and	x1, x0, #0x7fffffffffffffff
    2e84:	add	x1, x1, x2
    2e88:	stp	x2, x1, [sp, #120]
    2e8c:	mov	x1, x22
    2e90:	tbz	x0, #63, 2e68 <gomp_unload_image_from_device+0xf8>
    2e94:	mov	x0, x21
    2e98:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2e9c:	add	x19, x19, #0x10
    2ea0:	mov	x1, x0
    2ea4:	mov	x0, x23
    2ea8:	bl	2d00 <gomp_remove_var>
    2eac:	cmp	x20, x19
    2eb0:	and	w26, w0, #0xff
    2eb4:	b.ne	2e7c <gomp_unload_image_from_device+0x10c>  // b.any
    2eb8:	eor	w26, w26, #0x1
    2ebc:	and	w24, w24, w26
    2ec0:	cbnz	w24, 2f5c <gomp_unload_image_from_device+0x1ec>
    2ec4:	ldp	x21, x22, [sp, #32]
    2ec8:	ldp	x19, x20, [sp, #16]
    2ecc:	ldp	x23, x24, [sp, #48]
    2ed0:	ldp	x25, x26, [sp, #64]
    2ed4:	ldp	x27, x28, [sp, #80]
    2ed8:	ldp	x29, x30, [sp], #176
    2edc:	ret
    2ee0:	mov	x2, x3
    2ee4:	ldr	w0, [x23, #12]
    2ee8:	ldr	x3, [x23, #88]
    2eec:	blr	x3
    2ef0:	tst	w0, #0xff
    2ef4:	b.ne	2ec8 <gomp_unload_image_from_device+0x158>  // b.any
    2ef8:	stp	x21, x22, [sp, #32]
    2efc:	add	x0, x23, #0xa8
    2f00:	bl	2d0 <gomp_mutex_unlock>
    2f04:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2f08:	add	x0, x0, #0x0
    2f0c:	bl	0 <gomp_fatal>
    2f10:	ldr	x2, [x19]
    2f14:	add	x22, sp, #0x78
    2f18:	add	x21, x23, #0xa0
    2f1c:	mov	x1, x22
    2f20:	add	x3, x2, #0x1
    2f24:	mov	x0, x21
    2f28:	stp	x2, x3, [sp, #120]
    2f2c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2f30:	mov	x25, x0
    2f34:	ldr	w0, [x23, #12]
    2f38:	mov	x2, x20
    2f3c:	ldr	x3, [x23, #88]
    2f40:	mov	w1, w24
    2f44:	blr	x3
    2f48:	tst	w0, #0xff
    2f4c:	b.eq	2efc <gomp_unload_image_from_device+0x18c>  // b.none
    2f50:	cmp	x25, #0x0
    2f54:	cset	w24, ne  // ne = any
    2f58:	b	2e4c <gomp_unload_image_from_device+0xdc>
    2f5c:	ldr	x0, [x25, #16]
    2f60:	bl	0 <free>
    2f64:	mov	x0, x25
    2f68:	bl	0 <free>
    2f6c:	ldp	x19, x20, [sp, #16]
    2f70:	ldp	x21, x22, [sp, #32]
    2f74:	ldp	x23, x24, [sp, #48]
    2f78:	ldp	x25, x26, [sp, #64]
    2f7c:	ldp	x27, x28, [sp, #80]
    2f80:	ldp	x29, x30, [sp], #176
    2f84:	ret

0000000000002f88 <gomp_unmap_vars>:
    2f88:	stp	x29, x30, [sp, #-112]!
    2f8c:	mov	x29, sp
    2f90:	stp	x23, x24, [sp, #48]
    2f94:	and	w24, w1, #0xff
    2f98:	ldr	x1, [x0, #48]
    2f9c:	cbz	x1, 3150 <gomp_unmap_vars+0x1c8>
    2fa0:	stp	x25, x26, [sp, #64]
    2fa4:	mov	x26, x0
    2fa8:	mov	w0, #0x1                   	// #1
    2fac:	stp	x27, x28, [sp, #80]
    2fb0:	ldr	x27, [x26, #56]
    2fb4:	add	x1, x27, #0xa8
    2fb8:	str	x1, [sp, #104]
    2fbc:	mov	x2, x1
    2fc0:	ldaxr	w1, [x2]
    2fc4:	cbnz	w1, 2fd0 <gomp_unmap_vars+0x48>
    2fc8:	stxr	w3, w0, [x2]
    2fcc:	cbnz	w3, 2fc0 <gomp_unmap_vars+0x38>
    2fd0:	cmp	w1, #0x0
    2fd4:	b.ne	31d4 <gomp_unmap_vars+0x24c>  // b.any
    2fd8:	ldr	w0, [x27, #172]
    2fdc:	cmp	w0, #0x2
    2fe0:	b.eq	3128 <gomp_unmap_vars+0x1a0>  // b.none
    2fe4:	ldr	x0, [x26, #48]
    2fe8:	stp	x19, x20, [sp, #16]
    2fec:	add	x20, x26, #0x40
    2ff0:	stp	x21, x22, [sp, #32]
    2ff4:	mov	x21, #0x0                   	// #0
    2ff8:	cbz	x0, 308c <gomp_unmap_vars+0x104>
    2ffc:	nop
    3000:	ldr	x19, [x20]
    3004:	cbz	x19, 307c <gomp_unmap_vars+0xf4>
    3008:	ldr	x1, [x19, #32]
    300c:	sub	x2, x1, #0x2
    3010:	cmn	x2, #0x4
    3014:	b.hi	30d0 <gomp_unmap_vars+0x148>  // b.pmore
    3018:	ldrb	w2, [x20, #9]
    301c:	sub	x1, x1, #0x1
    3020:	str	x1, [x19, #32]
    3024:	cbz	w2, 307c <gomp_unmap_vars+0xf4>
    3028:	mov	w28, #0x0                   	// #0
    302c:	ldp	x1, x22, [x19, #16]
    3030:	ldp	x5, x23, [x20, #16]
    3034:	ldr	w0, [x27, #12]
    3038:	ldr	x25, [x19]
    303c:	ldr	x2, [x1, #16]
    3040:	add	x22, x5, x22
    3044:	ldr	x4, [x27, #112]
    3048:	add	x25, x5, x25
    304c:	add	x22, x22, x2
    3050:	mov	x1, x25
    3054:	mov	x2, x22
    3058:	mov	x3, x23
    305c:	blr	x4
    3060:	tst	w0, #0xff
    3064:	b.eq	3194 <gomp_unmap_vars+0x20c>  // b.none
    3068:	cbz	w28, 3110 <gomp_unmap_vars+0x188>
    306c:	mov	x1, x19
    3070:	mov	x0, x27
    3074:	bl	2d00 <gomp_remove_var>
    3078:	ldr	x0, [x26, #48]
    307c:	add	x21, x21, #0x1
    3080:	cmp	x0, x21
    3084:	add	x20, x20, #0x20
    3088:	b.hi	3000 <gomp_unmap_vars+0x78>  // b.pmore
    308c:	ldr	x0, [x26]
    3090:	cmp	x0, #0x1
    3094:	b.ls	315c <gomp_unmap_vars+0x1d4>  // b.plast
    3098:	sub	x0, x0, #0x1
    309c:	str	x0, [x26]
    30a0:	ldr	x1, [sp, #104]
    30a4:	ldxr	w0, [x1]
    30a8:	stlxr	w2, wzr, [x1]
    30ac:	cbnz	w2, 30a4 <gomp_unmap_vars+0x11c>
    30b0:	tbnz	w0, #31, 3168 <gomp_unmap_vars+0x1e0>
    30b4:	ldp	x19, x20, [sp, #16]
    30b8:	ldp	x21, x22, [sp, #32]
    30bc:	ldp	x23, x24, [sp, #48]
    30c0:	ldp	x25, x26, [sp, #64]
    30c4:	ldp	x27, x28, [sp, #80]
    30c8:	ldp	x29, x30, [sp], #112
    30cc:	ret
    30d0:	cmp	x1, #0x1
    30d4:	b.eq	30f4 <gomp_unmap_vars+0x16c>  // b.none
    30d8:	ldrb	w1, [x20, #9]
    30dc:	cbnz	w1, 3028 <gomp_unmap_vars+0xa0>
    30e0:	add	x21, x21, #0x1
    30e4:	add	x20, x20, #0x20
    30e8:	cmp	x0, x21
    30ec:	b.hi	3000 <gomp_unmap_vars+0x78>  // b.pmore
    30f0:	b	308c <gomp_unmap_vars+0x104>
    30f4:	str	xzr, [x19, #32]
    30f8:	cbz	w24, 3104 <gomp_unmap_vars+0x17c>
    30fc:	ldrb	w28, [x20, #8]
    3100:	cbnz	w28, 302c <gomp_unmap_vars+0xa4>
    3104:	ldrb	w28, [x20, #9]
    3108:	cbnz	w28, 302c <gomp_unmap_vars+0xa4>
    310c:	b	306c <gomp_unmap_vars+0xe4>
    3110:	ldr	x0, [x26, #48]
    3114:	add	x21, x21, #0x1
    3118:	add	x20, x20, #0x20
    311c:	cmp	x0, x21
    3120:	b.hi	3000 <gomp_unmap_vars+0x78>  // b.pmore
    3124:	b	308c <gomp_unmap_vars+0x104>
    3128:	ldr	x1, [sp, #104]
    312c:	ldxr	w0, [x1]
    3130:	stlxr	w2, wzr, [x1]
    3134:	cbnz	w2, 312c <gomp_unmap_vars+0x1a4>
    3138:	tbnz	w0, #31, 3188 <gomp_unmap_vars+0x200>
    313c:	ldr	x0, [x26, #8]
    3140:	bl	0 <free>
    3144:	mov	x0, x26
    3148:	ldp	x25, x26, [sp, #64]
    314c:	ldp	x27, x28, [sp, #80]
    3150:	ldp	x23, x24, [sp, #48]
    3154:	ldp	x29, x30, [sp], #112
    3158:	b	0 <free>
    315c:	mov	x0, x26
    3160:	bl	430 <gomp_unmap_tgt>
    3164:	b	30a0 <gomp_unmap_vars+0x118>
    3168:	ldp	x19, x20, [sp, #16]
    316c:	ldp	x21, x22, [sp, #32]
    3170:	ldp	x23, x24, [sp, #48]
    3174:	ldp	x25, x26, [sp, #64]
    3178:	ldp	x27, x28, [sp, #80]
    317c:	ldr	x0, [sp, #104]
    3180:	ldp	x29, x30, [sp], #112
    3184:	b	0 <gomp_mutex_unlock_slow>
    3188:	ldr	x0, [sp, #104]
    318c:	bl	0 <gomp_mutex_unlock_slow>
    3190:	b	313c <gomp_unmap_vars+0x1b4>
    3194:	ldr	x1, [sp, #104]
    3198:	ldxr	w0, [x1]
    319c:	stlxr	w2, wzr, [x1]
    31a0:	cbnz	w2, 3198 <gomp_unmap_vars+0x210>
    31a4:	tbnz	w0, #31, 31e0 <gomp_unmap_vars+0x258>
    31a8:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    31ac:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    31b0:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    31b4:	add	x4, x4, #0x0
    31b8:	add	x1, x1, #0x0
    31bc:	add	x6, x25, x23
    31c0:	add	x0, x0, #0x0
    31c4:	mov	x5, x25
    31c8:	add	x3, x22, x23
    31cc:	mov	x2, x22
    31d0:	bl	0 <gomp_fatal>
    31d4:	ldr	x0, [sp, #104]
    31d8:	bl	0 <gomp_mutex_lock_slow>
    31dc:	b	2fd8 <gomp_unmap_vars+0x50>
    31e0:	ldr	x0, [sp, #104]
    31e4:	bl	0 <gomp_mutex_unlock_slow>
    31e8:	b	31a8 <gomp_unmap_vars+0x220>
    31ec:	nop

00000000000031f0 <GOMP_offload_register_ver>:
    31f0:	stp	x29, x30, [sp, #-96]!
    31f4:	mov	x29, sp
    31f8:	stp	x19, x20, [sp, #16]
    31fc:	stp	x21, x22, [sp, #32]
    3200:	stp	x23, x24, [sp, #48]
    3204:	mov	w24, w0
    3208:	lsr	w0, w0, #16
    320c:	stp	x25, x26, [sp, #64]
    3210:	cmp	w0, #0x1
    3214:	stp	x27, x28, [sp, #80]
    3218:	b.hi	3390 <GOMP_offload_register_ver+0x1a0>  // b.pmore
    321c:	adrp	x19, 0 <omp_target_memcpy_rect_worker>
    3220:	add	x21, x19, #0x0
    3224:	mov	x26, x1
    3228:	mov	x25, x3
    322c:	add	x0, x21, #0x10
    3230:	mov	w27, w2
    3234:	mov	w2, #0x1                   	// #1
    3238:	ldaxr	w1, [x0]
    323c:	cbnz	w1, 3248 <GOMP_offload_register_ver+0x58>
    3240:	stxr	w3, w2, [x0]
    3244:	cbnz	w3, 3238 <GOMP_offload_register_ver+0x48>
    3248:	cmp	w1, #0x0
    324c:	b.ne	3388 <GOMP_offload_register_ver+0x198>  // b.any
    3250:	ldr	w0, [x19]
    3254:	mov	x23, #0x0                   	// #0
    3258:	mov	w22, #0x0                   	// #0
    325c:	mov	w28, #0x1                   	// #1
    3260:	cmp	w0, #0x0
    3264:	b.gt	3290 <GOMP_offload_register_ver+0xa0>
    3268:	b	32e4 <GOMP_offload_register_ver+0xf4>
    326c:	ldxr	w0, [x20]
    3270:	stlxr	w1, wzr, [x20]
    3274:	cbnz	w1, 326c <GOMP_offload_register_ver+0x7c>
    3278:	tbnz	w0, #31, 3350 <GOMP_offload_register_ver+0x160>
    327c:	ldr	w0, [x21]
    3280:	add	w22, w22, #0x1
    3284:	add	x23, x23, #0x130
    3288:	cmp	w0, w22
    328c:	b.le	32e4 <GOMP_offload_register_ver+0xf4>
    3290:	ldr	x19, [x21, #8]
    3294:	add	x19, x19, x23
    3298:	add	x20, x19, #0xa8
    329c:	ldaxr	w1, [x20]
    32a0:	cbnz	w1, 32ac <GOMP_offload_register_ver+0xbc>
    32a4:	stxr	w0, w28, [x20]
    32a8:	cbnz	w0, 329c <GOMP_offload_register_ver+0xac>
    32ac:	cmp	w1, #0x0
    32b0:	b.ne	337c <GOMP_offload_register_ver+0x18c>  // b.any
    32b4:	ldr	w0, [x19, #16]
    32b8:	cmp	w0, w27
    32bc:	b.ne	326c <GOMP_offload_register_ver+0x7c>  // b.any
    32c0:	ldr	w4, [x19, #172]
    32c4:	cmp	w4, #0x1
    32c8:	b.ne	326c <GOMP_offload_register_ver+0x7c>  // b.any
    32cc:	mov	x0, x19
    32d0:	mov	x3, x25
    32d4:	mov	x2, x26
    32d8:	mov	w1, w24
    32dc:	bl	c08 <gomp_load_image_to_device>
    32e0:	b	326c <GOMP_offload_register_ver+0x7c>
    32e4:	ldr	w20, [x21, #24]
    32e8:	mov	w19, #0x18                  	// #24
    32ec:	ldr	x0, [x21, #32]
    32f0:	add	w20, w20, #0x1
    32f4:	smull	x19, w20, w19
    32f8:	mov	x1, x19
    32fc:	bl	0 <realloc>
    3300:	cbz	x0, 33a4 <GOMP_offload_register_ver+0x1b4>
    3304:	sub	x19, x19, #0x18
    3308:	add	x21, x21, #0x10
    330c:	add	x1, x0, x19
    3310:	str	w20, [x21, #8]
    3314:	str	x0, [x21, #16]
    3318:	str	w24, [x0, x19]
    331c:	str	w27, [x1, #4]
    3320:	stp	x26, x25, [x1, #8]
    3324:	ldxr	w0, [x21]
    3328:	stlxr	w1, wzr, [x21]
    332c:	cbnz	w1, 3324 <GOMP_offload_register_ver+0x134>
    3330:	tbnz	w0, #31, 335c <GOMP_offload_register_ver+0x16c>
    3334:	ldp	x19, x20, [sp, #16]
    3338:	ldp	x21, x22, [sp, #32]
    333c:	ldp	x23, x24, [sp, #48]
    3340:	ldp	x25, x26, [sp, #64]
    3344:	ldp	x27, x28, [sp, #80]
    3348:	ldp	x29, x30, [sp], #96
    334c:	ret
    3350:	mov	x0, x20
    3354:	bl	0 <gomp_mutex_unlock_slow>
    3358:	b	327c <GOMP_offload_register_ver+0x8c>
    335c:	mov	x0, x21
    3360:	ldp	x19, x20, [sp, #16]
    3364:	ldp	x21, x22, [sp, #32]
    3368:	ldp	x23, x24, [sp, #48]
    336c:	ldp	x25, x26, [sp, #64]
    3370:	ldp	x27, x28, [sp, #80]
    3374:	ldp	x29, x30, [sp], #96
    3378:	b	0 <gomp_mutex_unlock_slow>
    337c:	mov	x0, x20
    3380:	bl	0 <gomp_mutex_lock_slow>
    3384:	b	32b4 <GOMP_offload_register_ver+0xc4>
    3388:	bl	0 <gomp_mutex_lock_slow>
    338c:	b	3250 <GOMP_offload_register_ver+0x60>
    3390:	mov	w2, w0
    3394:	mov	w1, #0x1                   	// #1
    3398:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    339c:	add	x0, x0, #0x0
    33a0:	bl	0 <gomp_fatal>
    33a4:	add	x0, x21, #0x10
    33a8:	bl	2d0 <gomp_mutex_unlock>
    33ac:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    33b0:	mov	x1, x19
    33b4:	add	x0, x0, #0x0
    33b8:	bl	0 <gomp_fatal>
    33bc:	nop

00000000000033c0 <GOMP_offload_register>:
    33c0:	mov	w4, w1
    33c4:	mov	x3, x2
    33c8:	mov	x1, x0
    33cc:	mov	w2, w4
    33d0:	mov	w0, #0x0                   	// #0
    33d4:	b	31f0 <GOMP_offload_register_ver>

00000000000033d8 <GOMP_offload_unregister_ver>:
    33d8:	stp	x29, x30, [sp, #-96]!
    33dc:	mov	x29, sp
    33e0:	stp	x19, x20, [sp, #16]
    33e4:	adrp	x19, 0 <omp_target_memcpy_rect_worker>
    33e8:	stp	x23, x24, [sp, #48]
    33ec:	add	x23, x19, #0x0
    33f0:	mov	w24, w0
    33f4:	add	x0, x23, #0x10
    33f8:	stp	x25, x26, [sp, #64]
    33fc:	mov	x25, x1
    3400:	mov	x26, x3
    3404:	stp	x21, x22, [sp, #32]
    3408:	stp	x27, x28, [sp, #80]
    340c:	mov	w27, w2
    3410:	mov	w2, #0x1                   	// #1
    3414:	ldaxr	w1, [x0]
    3418:	cbnz	w1, 3424 <GOMP_offload_unregister_ver+0x4c>
    341c:	stxr	w3, w2, [x0]
    3420:	cbnz	w3, 3414 <GOMP_offload_unregister_ver+0x3c>
    3424:	cmp	w1, #0x0
    3428:	b.ne	3580 <GOMP_offload_unregister_ver+0x1a8>  // b.any
    342c:	ldr	w0, [x19]
    3430:	mov	x22, #0x0                   	// #0
    3434:	mov	w21, #0x0                   	// #0
    3438:	mov	w28, #0x1                   	// #1
    343c:	cmp	w0, #0x0
    3440:	b.gt	346c <GOMP_offload_unregister_ver+0x94>
    3444:	b	34c0 <GOMP_offload_unregister_ver+0xe8>
    3448:	ldxr	w4, [x20]
    344c:	stlxr	w0, wzr, [x20]
    3450:	cbnz	w0, 3448 <GOMP_offload_unregister_ver+0x70>
    3454:	add	w21, w21, #0x1
    3458:	tbnz	w4, #31, 354c <GOMP_offload_unregister_ver+0x174>
    345c:	ldr	w4, [x23]
    3460:	add	x22, x22, #0x130
    3464:	cmp	w4, w21
    3468:	b.le	34c0 <GOMP_offload_unregister_ver+0xe8>
    346c:	ldr	x19, [x23, #8]
    3470:	add	x19, x19, x22
    3474:	add	x20, x19, #0xa8
    3478:	ldaxr	w1, [x20]
    347c:	cbnz	w1, 3488 <GOMP_offload_unregister_ver+0xb0>
    3480:	stxr	w0, w28, [x20]
    3484:	cbnz	w0, 3478 <GOMP_offload_unregister_ver+0xa0>
    3488:	cmp	w1, #0x0
    348c:	b.ne	3574 <GOMP_offload_unregister_ver+0x19c>  // b.any
    3490:	ldr	w0, [x19, #16]
    3494:	cmp	w0, w27
    3498:	b.ne	3448 <GOMP_offload_unregister_ver+0x70>  // b.any
    349c:	ldr	w0, [x19, #172]
    34a0:	cmp	w0, #0x1
    34a4:	b.ne	3448 <GOMP_offload_unregister_ver+0x70>  // b.any
    34a8:	mov	x0, x19
    34ac:	mov	x3, x26
    34b0:	mov	x2, x25
    34b4:	mov	w1, w24
    34b8:	bl	2d70 <gomp_unload_image_from_device>
    34bc:	b	3448 <GOMP_offload_unregister_ver+0x70>
    34c0:	ldr	w0, [x23, #24]
    34c4:	cmp	w0, #0x0
    34c8:	b.le	351c <GOMP_offload_unregister_ver+0x144>
    34cc:	ldr	x4, [x23, #32]
    34d0:	sub	w3, w0, #0x1
    34d4:	mov	w2, #0x18                  	// #24
    34d8:	add	x1, x4, #0x18
    34dc:	mov	x0, x4
    34e0:	umaddl	x2, w3, w2, x1
    34e4:	b	34f4 <GOMP_offload_unregister_ver+0x11c>
    34e8:	add	x0, x0, #0x18
    34ec:	cmp	x0, x2
    34f0:	b.eq	351c <GOMP_offload_unregister_ver+0x144>  // b.none
    34f4:	ldr	x1, [x0, #16]
    34f8:	cmp	x1, x26
    34fc:	b.ne	34e8 <GOMP_offload_unregister_ver+0x110>  // b.any
    3500:	mov	w1, #0x18                  	// #24
    3504:	str	w3, [x23, #24]
    3508:	smaddl	x3, w3, w1, x4
    350c:	ldp	x4, x5, [x3]
    3510:	stp	x4, x5, [x0]
    3514:	ldr	x1, [x3, #16]
    3518:	str	x1, [x0, #16]
    351c:	add	x0, x23, #0x10
    3520:	ldxr	w1, [x0]
    3524:	stlxr	w2, wzr, [x0]
    3528:	cbnz	w2, 3520 <GOMP_offload_unregister_ver+0x148>
    352c:	tbnz	w1, #31, 3558 <GOMP_offload_unregister_ver+0x180>
    3530:	ldp	x19, x20, [sp, #16]
    3534:	ldp	x21, x22, [sp, #32]
    3538:	ldp	x23, x24, [sp, #48]
    353c:	ldp	x25, x26, [sp, #64]
    3540:	ldp	x27, x28, [sp, #80]
    3544:	ldp	x29, x30, [sp], #96
    3548:	ret
    354c:	mov	x0, x20
    3550:	bl	0 <gomp_mutex_unlock_slow>
    3554:	b	345c <GOMP_offload_unregister_ver+0x84>
    3558:	ldp	x19, x20, [sp, #16]
    355c:	ldp	x21, x22, [sp, #32]
    3560:	ldp	x23, x24, [sp, #48]
    3564:	ldp	x25, x26, [sp, #64]
    3568:	ldp	x27, x28, [sp, #80]
    356c:	ldp	x29, x30, [sp], #96
    3570:	b	0 <gomp_mutex_unlock_slow>
    3574:	mov	x0, x20
    3578:	bl	0 <gomp_mutex_lock_slow>
    357c:	b	3490 <GOMP_offload_unregister_ver+0xb8>
    3580:	bl	0 <gomp_mutex_lock_slow>
    3584:	b	342c <GOMP_offload_unregister_ver+0x54>

0000000000003588 <GOMP_offload_unregister>:
    3588:	mov	w4, w1
    358c:	mov	x3, x2
    3590:	mov	x1, x0
    3594:	mov	w2, w4
    3598:	mov	w0, #0x0                   	// #0
    359c:	b	33d8 <GOMP_offload_unregister_ver>

00000000000035a0 <gomp_init_device>:
    35a0:	stp	x29, x30, [sp, #-48]!
    35a4:	mov	x29, sp
    35a8:	stp	x21, x22, [sp, #32]
    35ac:	mov	x22, x0
    35b0:	ldr	w0, [x0, #12]
    35b4:	stp	x19, x20, [sp, #16]
    35b8:	ldr	x1, [x22, #56]
    35bc:	blr	x1
    35c0:	tst	w0, #0xff
    35c4:	b.eq	3654 <gomp_init_device+0xb4>  // b.none
    35c8:	adrp	x21, 0 <omp_target_memcpy_rect_worker>
    35cc:	add	x21, x21, #0x0
    35d0:	mov	x19, #0x0                   	// #0
    35d4:	mov	w20, #0x0                   	// #0
    35d8:	ldr	w0, [x21, #24]
    35dc:	cmp	w0, #0x0
    35e0:	b.gt	35fc <gomp_init_device+0x5c>
    35e4:	b	363c <gomp_init_device+0x9c>
    35e8:	ldr	w1, [x21, #24]
    35ec:	add	w20, w20, #0x1
    35f0:	add	x19, x19, #0x18
    35f4:	cmp	w1, w20
    35f8:	b.le	363c <gomp_init_device+0x9c>
    35fc:	ldr	x1, [x21, #32]
    3600:	ldr	w2, [x22, #16]
    3604:	add	x3, x1, x19
    3608:	ldr	w4, [x3, #4]
    360c:	cmp	w4, w2
    3610:	b.ne	35e8 <gomp_init_device+0x48>  // b.any
    3614:	ldp	x2, x3, [x3, #8]
    3618:	mov	x0, x22
    361c:	ldr	w1, [x1, x19]
    3620:	mov	w4, #0x0                   	// #0
    3624:	add	w20, w20, #0x1
    3628:	add	x19, x19, #0x18
    362c:	bl	c08 <gomp_load_image_to_device>
    3630:	ldr	w1, [x21, #24]
    3634:	cmp	w1, w20
    3638:	b.gt	35fc <gomp_init_device+0x5c>
    363c:	mov	w0, #0x1                   	// #1
    3640:	ldp	x19, x20, [sp, #16]
    3644:	str	w0, [x22, #172]
    3648:	ldp	x21, x22, [sp, #32]
    364c:	ldp	x29, x30, [sp], #48
    3650:	ret
    3654:	add	x0, x22, #0xa8
    3658:	bl	2d0 <gomp_mutex_unlock>
    365c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3660:	add	x0, x0, #0x0
    3664:	bl	0 <gomp_fatal>

0000000000003668 <resolve_device>:
    3668:	stp	x29, x30, [sp, #-32]!
    366c:	cmn	w0, #0x1
    3670:	mov	x29, sp
    3674:	stp	x19, x20, [sp, #16]
    3678:	mov	w19, w0
    367c:	b.eq	3718 <resolve_device+0xb0>  // b.none
    3680:	tbnz	w19, #31, 3748 <resolve_device+0xe0>
    3684:	adrp	x20, 0 <omp_target_memcpy_rect_worker>
    3688:	add	x20, x20, #0x0
    368c:	add	x0, x20, #0x14
    3690:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    3694:	add	x1, x1, #0x0
    3698:	bl	0 <pthread_once>
    369c:	ldr	w0, [x20, #4]
    36a0:	cmp	w19, w0
    36a4:	b.ge	3748 <resolve_device+0xe0>  // b.tcont
    36a8:	mov	w1, #0x130                 	// #304
    36ac:	mov	w2, #0x1                   	// #1
    36b0:	ldr	x0, [x20, #8]
    36b4:	smull	x19, w19, w1
    36b8:	add	x0, x0, x19
    36bc:	add	x0, x0, #0xa8
    36c0:	ldaxr	w1, [x0]
    36c4:	cbnz	w1, 36d0 <resolve_device+0x68>
    36c8:	stxr	w3, w2, [x0]
    36cc:	cbnz	w3, 36c0 <resolve_device+0x58>
    36d0:	cmp	w1, #0x0
    36d4:	b.ne	3790 <resolve_device+0x128>  // b.any
    36d8:	ldr	x0, [x20, #8]
    36dc:	add	x0, x0, x19
    36e0:	ldr	w1, [x0, #172]
    36e4:	cbz	w1, 3758 <resolve_device+0xf0>
    36e8:	add	x0, x0, #0xa8
    36ec:	cmp	w1, #0x2
    36f0:	b.eq	376c <resolve_device+0x104>  // b.none
    36f4:	ldxr	w1, [x0]
    36f8:	stlxr	w2, wzr, [x0]
    36fc:	cbnz	w2, 36f4 <resolve_device+0x8c>
    3700:	tbnz	w1, #31, 3788 <resolve_device+0x120>
    3704:	ldr	x0, [x20, #8]
    3708:	add	x0, x0, x19
    370c:	ldp	x19, x20, [sp, #16]
    3710:	ldp	x29, x30, [sp], #32
    3714:	ret
    3718:	adrp	x2, 0 <gomp_tls_data>
    371c:	ldr	x2, [x2]
    3720:	mrs	x1, tpidr_el0
    3724:	adrp	x0, 0 <gomp_global_icv>
    3728:	add	x0, x0, #0x0
    372c:	add	x1, x1, x2
    3730:	ldr	x1, [x1, #80]
    3734:	cmp	x1, #0x0
    3738:	add	x1, x1, #0x90
    373c:	csel	x0, x0, x1, eq  // eq = none
    3740:	ldr	w19, [x0, #16]
    3744:	tbz	w19, #31, 3684 <resolve_device+0x1c>
    3748:	mov	x0, #0x0                   	// #0
    374c:	ldp	x19, x20, [sp, #16]
    3750:	ldp	x29, x30, [sp], #32
    3754:	ret
    3758:	bl	35a0 <gomp_init_device>
    375c:	ldr	x0, [x20, #8]
    3760:	add	x0, x0, x19
    3764:	add	x0, x0, #0xa8
    3768:	b	36f4 <resolve_device+0x8c>
    376c:	ldxr	w1, [x0]
    3770:	stlxr	w2, wzr, [x0]
    3774:	cbnz	w2, 376c <resolve_device+0x104>
    3778:	tbz	w1, #31, 3748 <resolve_device+0xe0>
    377c:	bl	0 <gomp_mutex_unlock_slow>
    3780:	mov	x0, #0x0                   	// #0
    3784:	b	374c <resolve_device+0xe4>
    3788:	bl	0 <gomp_mutex_unlock_slow>
    378c:	b	3704 <resolve_device+0x9c>
    3790:	bl	0 <gomp_mutex_lock_slow>
    3794:	b	36d8 <resolve_device+0x70>

0000000000003798 <gomp_unload_device>:
    3798:	stp	x29, x30, [sp, #-48]!
    379c:	mov	x29, sp
    37a0:	stp	x19, x20, [sp, #16]
    37a4:	mov	x20, x0
    37a8:	ldr	w0, [x0, #172]
    37ac:	cmp	w0, #0x1
    37b0:	b.eq	37c0 <gomp_unload_device+0x28>  // b.none
    37b4:	ldp	x19, x20, [sp, #16]
    37b8:	ldp	x29, x30, [sp], #48
    37bc:	ret
    37c0:	stp	x21, x22, [sp, #32]
    37c4:	adrp	x21, 0 <omp_target_memcpy_rect_worker>
    37c8:	add	x21, x21, #0x0
    37cc:	ldr	w0, [x21, #24]
    37d0:	cbz	w0, 3828 <gomp_unload_device+0x90>
    37d4:	mov	w19, #0x0                   	// #0
    37d8:	mov	w22, #0x18                  	// #24
    37dc:	b	37ec <gomp_unload_device+0x54>
    37e0:	ldr	w0, [x21, #24]
    37e4:	cmp	w0, w19
    37e8:	b.ls	3828 <gomp_unload_device+0x90>  // b.plast
    37ec:	ldr	x1, [x21, #32]
    37f0:	umull	x0, w19, w22
    37f4:	ldr	w2, [x20, #16]
    37f8:	add	w19, w19, #0x1
    37fc:	add	x3, x1, x0
    3800:	ldr	w4, [x3, #4]
    3804:	cmp	w4, w2
    3808:	b.ne	37e0 <gomp_unload_device+0x48>  // b.any
    380c:	ldp	x2, x3, [x3, #8]
    3810:	ldr	w1, [x1, x0]
    3814:	mov	x0, x20
    3818:	bl	2d70 <gomp_unload_image_from_device>
    381c:	ldr	w0, [x21, #24]
    3820:	cmp	w0, w19
    3824:	b.hi	37ec <gomp_unload_device+0x54>  // b.pmore
    3828:	ldp	x19, x20, [sp, #16]
    382c:	ldp	x21, x22, [sp, #32]
    3830:	ldp	x29, x30, [sp], #48
    3834:	ret

0000000000003838 <gomp_free_memmap>:
    3838:	ldr	x1, [x0]
    383c:	cbz	x1, 3880 <gomp_free_memmap+0x48>
    3840:	stp	x29, x30, [sp, #-32]!
    3844:	mov	x29, sp
    3848:	stp	x19, x20, [sp, #16]
    384c:	mov	x20, x0
    3850:	mov	x0, x20
    3854:	ldr	x19, [x1, #16]
    3858:	bl	0 <splay_tree_prefix_splay_tree_remove>
    385c:	ldr	x0, [x19, #8]
    3860:	bl	0 <free>
    3864:	mov	x0, x19
    3868:	bl	0 <free>
    386c:	ldr	x1, [x20]
    3870:	cbnz	x1, 3850 <gomp_free_memmap+0x18>
    3874:	ldp	x19, x20, [sp, #16]
    3878:	ldp	x29, x30, [sp], #32
    387c:	ret
    3880:	ret
    3884:	nop

0000000000003888 <GOMP_target>:
    3888:	stp	x29, x30, [sp, #-80]!
    388c:	mov	x29, sp
    3890:	stp	x19, x20, [sp, #16]
    3894:	mov	x20, x1
    3898:	stp	x21, x22, [sp, #32]
    389c:	mov	x22, x3
    38a0:	mov	x21, x4
    38a4:	stp	x23, x24, [sp, #48]
    38a8:	mov	x23, x5
    38ac:	mov	x24, x6
    38b0:	bl	3668 <resolve_device>
    38b4:	cbz	x0, 3950 <GOMP_target+0xc8>
    38b8:	ldr	w2, [x0, #8]
    38bc:	mov	w1, #0x5                   	// #5
    38c0:	mov	x19, x0
    38c4:	and	w1, w2, w1
    38c8:	cmp	w1, #0x4
    38cc:	b.ne	3950 <GOMP_target+0xc8>  // b.any
    38d0:	str	x25, [sp, #64]
    38d4:	mov	x25, x20
    38d8:	tbnz	w2, #1, 38e8 <GOMP_target+0x60>
    38dc:	mov	x1, x20
    38e0:	bl	878 <gomp_get_target_fn_addr.part.0>
    38e4:	mov	x25, x0
    38e8:	cbz	x25, 394c <GOMP_target+0xc4>
    38ec:	mov	x5, x24
    38f0:	mov	x4, x23
    38f4:	mov	x2, x21
    38f8:	mov	x1, x22
    38fc:	mov	w7, #0x1                   	// #1
    3900:	mov	w6, #0x0                   	// #0
    3904:	mov	x0, x19
    3908:	mov	x3, #0x0                   	// #0
    390c:	bl	1570 <gomp_map_vars>
    3910:	mov	x20, x0
    3914:	ldr	w0, [x19, #12]
    3918:	mov	x1, x25
    391c:	ldr	x4, [x19, #144]
    3920:	mov	x3, #0x0                   	// #0
    3924:	ldr	x2, [x20, #16]
    3928:	blr	x4
    392c:	mov	x0, x20
    3930:	mov	w1, #0x1                   	// #1
    3934:	ldp	x19, x20, [sp, #16]
    3938:	ldp	x21, x22, [sp, #32]
    393c:	ldp	x23, x24, [sp, #48]
    3940:	ldr	x25, [sp, #64]
    3944:	ldp	x29, x30, [sp], #80
    3948:	b	2f88 <gomp_unmap_vars>
    394c:	ldr	x25, [sp, #64]
    3950:	mov	x1, x21
    3954:	mov	x0, x20
    3958:	ldp	x19, x20, [sp, #16]
    395c:	ldp	x21, x22, [sp, #32]
    3960:	ldp	x23, x24, [sp, #48]
    3964:	ldp	x29, x30, [sp], #80
    3968:	b	2f0 <gomp_target_fallback>
    396c:	nop

0000000000003970 <GOMP_target_ext>:
    3970:	stp	x29, x30, [sp, #-144]!
    3974:	mov	x29, sp
    3978:	stp	x19, x20, [sp, #16]
    397c:	mov	x20, x2
    3980:	mov	x19, x5
    3984:	stp	x21, x22, [sp, #32]
    3988:	mov	x22, x4
    398c:	stp	x23, x24, [sp, #48]
    3990:	mov	x23, x1
    3994:	mov	x24, x3
    3998:	stp	x25, x26, [sp, #64]
    399c:	mov	w25, w6
    39a0:	mov	x26, x7
    39a4:	stp	x27, x28, [sp, #80]
    39a8:	sub	sp, sp, #0x10
    39ac:	bl	3668 <resolve_device>
    39b0:	mov	x21, x0
    39b4:	tbz	w25, #0, 3b14 <GOMP_target_ext+0x1a4>
    39b8:	adrp	x28, 0 <gomp_tls_data>
    39bc:	ldr	x28, [x28]
    39c0:	mrs	x27, tpidr_el0
    39c4:	add	x3, x27, x28
    39c8:	ldr	x0, [x3, #16]
    39cc:	cbz	x0, 3a78 <GOMP_target_ext+0x108>
    39d0:	add	x27, x27, x28
    39d4:	ldr	x0, [x27, #80]
    39d8:	ldrb	w1, [x0, #205]
    39dc:	cbz	w1, 3f00 <GOMP_target_ext+0x590>
    39e0:	cbnz	x26, 3b30 <GOMP_target_ext+0x1c0>
    39e4:	nop
    39e8:	cbz	x21, 3bdc <GOMP_target_ext+0x26c>
    39ec:	ldr	w0, [x21, #8]
    39f0:	tbz	w0, #2, 3bdc <GOMP_target_ext+0x26c>
    39f4:	mov	x25, #0x0                   	// #0
    39f8:	mov	x27, #0x0                   	// #0
    39fc:	mov	w28, #0x0                   	// #0
    3a00:	mov	x26, x23
    3a04:	tbnz	w0, #1, 3a18 <GOMP_target_ext+0xa8>
    3a08:	mov	x1, x23
    3a0c:	mov	x0, x21
    3a10:	bl	878 <gomp_get_target_fn_addr.part.0>
    3a14:	mov	x26, x0
    3a18:	cbz	x26, 3cd8 <GOMP_target_ext+0x368>
    3a1c:	ldr	x1, [x21, #136]
    3a20:	cbz	x1, 3a34 <GOMP_target_ext+0xc4>
    3a24:	mov	x0, x26
    3a28:	blr	x1
    3a2c:	tst	w0, #0xff
    3a30:	b.eq	3cd8 <GOMP_target_ext+0x368>  // b.none
    3a34:	ldr	w0, [x21, #8]
    3a38:	tbz	w0, #0, 3e90 <GOMP_target_ext+0x520>
    3a3c:	cbz	w28, 3d9c <GOMP_target_ext+0x42c>
    3a40:	ldr	w0, [x21, #12]
    3a44:	ldr	x4, [x21, #144]
    3a48:	mov	x2, x24
    3a4c:	ldr	x3, [x29, #144]
    3a50:	mov	x1, x26
    3a54:	blr	x4
    3a58:	mov	sp, x29
    3a5c:	ldp	x19, x20, [sp, #16]
    3a60:	ldp	x21, x22, [sp, #32]
    3a64:	ldp	x23, x24, [sp, #48]
    3a68:	ldp	x25, x26, [sp, #64]
    3a6c:	ldp	x27, x28, [sp, #80]
    3a70:	ldp	x29, x30, [sp], #144
    3a74:	ret
    3a78:	mov	w0, #0x1                   	// #1
    3a7c:	str	x3, [x29, #136]
    3a80:	bl	0 <gomp_new_team>
    3a84:	mov	x6, x0
    3a88:	ldr	x3, [x29, #136]
    3a8c:	ldr	x7, [x3, #80]
    3a90:	cbz	x7, 3f38 <GOMP_target_ext+0x5c8>
    3a94:	ldp	x4, x5, [x3, #16]
    3a98:	stp	x4, x5, [x0, #8]
    3a9c:	add	x8, x0, #0x540
    3aa0:	ldp	x4, x5, [x3, #32]
    3aa4:	stp	x4, x5, [x6, #24]
    3aa8:	add	x11, x6, #0x100
    3aac:	ldp	x4, x5, [x3, #48]
    3ab0:	stp	x4, x5, [x6, #40]
    3ab4:	mov	x0, x8
    3ab8:	ldp	x4, x5, [x3, #64]
    3abc:	stp	x4, x5, [x6, #56]
    3ac0:	add	x2, x7, #0x90
    3ac4:	mov	x1, #0x0                   	// #0
    3ac8:	stp	x6, x11, [x3, #16]
    3acc:	str	xzr, [x3, #32]
    3ad0:	str	wzr, [x3, #40]
    3ad4:	stp	xzr, xzr, [x3, #64]
    3ad8:	str	x8, [x3, #80]
    3adc:	stp	x8, x7, [x29, #120]
    3ae0:	bl	0 <gomp_init_task>
    3ae4:	ldp	x7, x3, [x29, #128]
    3ae8:	str	x7, [x3, #80]
    3aec:	bl	0 <gomp_end_task>
    3af0:	ldr	x7, [x29, #128]
    3af4:	mov	x0, x7
    3af8:	bl	0 <free>
    3afc:	ldr	x3, [x29, #136]
    3b00:	ldr	x8, [x29, #120]
    3b04:	str	x8, [x3, #80]
    3b08:	add	x0, x27, x28
    3b0c:	ldr	x0, [x0, #16]
    3b10:	cbnz	x0, 39d0 <GOMP_target_ext+0x60>
    3b14:	cbz	x26, 39e8 <GOMP_target_ext+0x78>
    3b18:	adrp	x0, 0 <gomp_tls_data>
    3b1c:	ldr	x0, [x0]
    3b20:	mrs	x1, tpidr_el0
    3b24:	add	x0, x1, x0
    3b28:	ldr	x0, [x0, #80]
    3b2c:	cbz	x0, 39e8 <GOMP_target_ext+0x78>
    3b30:	ldr	x0, [x0, #56]
    3b34:	cbz	x0, 39e8 <GOMP_target_ext+0x78>
    3b38:	cbz	x20, 3fa0 <GOMP_target_ext+0x630>
    3b3c:	mov	x25, #0x0                   	// #0
    3b40:	mov	x27, #0x0                   	// #0
    3b44:	mov	x1, #0x0                   	// #0
    3b48:	mov	x4, #0x1                   	// #1
    3b4c:	nop
    3b50:	ldrh	w0, [x19, x1, lsl #1]
    3b54:	and	w2, w0, #0xff
    3b58:	cmp	w2, #0xc
    3b5c:	b.ne	3b88 <GOMP_target_ext+0x218>  // b.any
    3b60:	lsr	w0, w0, #8
    3b64:	sub	x25, x25, #0x1
    3b68:	ldr	x2, [x22, x1, lsl #3]
    3b6c:	lsl	x0, x4, x0
    3b70:	add	x25, x25, x0
    3b74:	neg	x3, x0
    3b78:	cmp	x27, x0
    3b7c:	and	x25, x25, x3
    3b80:	csel	x27, x27, x0, cs  // cs = hs, nlast
    3b84:	add	x25, x25, x2
    3b88:	add	x1, x1, #0x1
    3b8c:	cmp	x20, x1
    3b90:	b.ne	3b50 <GOMP_target_ext+0x1e0>  // b.any
    3b94:	cbnz	x27, 3ce4 <GOMP_target_ext+0x374>
    3b98:	mov	x0, x26
    3b9c:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    3ba0:	cbz	x21, 3bb0 <GOMP_target_ext+0x240>
    3ba4:	ldr	w0, [x21, #8]
    3ba8:	mov	w28, #0x1                   	// #1
    3bac:	tbnz	w0, #2, 3a00 <GOMP_target_ext+0x90>
    3bb0:	mov	x1, x24
    3bb4:	mov	x0, x23
    3bb8:	bl	2f0 <gomp_target_fallback>
    3bbc:	mov	sp, x29
    3bc0:	ldp	x19, x20, [sp, #16]
    3bc4:	ldp	x21, x22, [sp, #32]
    3bc8:	ldp	x23, x24, [sp, #48]
    3bcc:	ldp	x25, x26, [sp, #64]
    3bd0:	ldp	x27, x28, [sp, #80]
    3bd4:	ldp	x29, x30, [sp], #144
    3bd8:	ret
    3bdc:	mov	x27, #0x0                   	// #0
    3be0:	mov	x25, #0x0                   	// #0
    3be4:	cbz	x20, 3bb0 <GOMP_target_ext+0x240>
    3be8:	mov	x1, #0x0                   	// #0
    3bec:	mov	x4, #0x1                   	// #1
    3bf0:	ldrh	w0, [x19, x1, lsl #1]
    3bf4:	and	w2, w0, #0xff
    3bf8:	cmp	w2, #0xc
    3bfc:	b.ne	3c28 <GOMP_target_ext+0x2b8>  // b.any
    3c00:	lsr	w0, w0, #8
    3c04:	sub	x25, x25, #0x1
    3c08:	ldr	x2, [x22, x1, lsl #3]
    3c0c:	lsl	x0, x4, x0
    3c10:	add	x25, x25, x0
    3c14:	neg	x3, x0
    3c18:	cmp	x27, x0
    3c1c:	and	x25, x25, x3
    3c20:	csel	x27, x27, x0, cs  // cs = hs, nlast
    3c24:	add	x25, x25, x2
    3c28:	add	x1, x1, #0x1
    3c2c:	cmp	x20, x1
    3c30:	b.hi	3bf0 <GOMP_target_ext+0x280>  // b.pmore
    3c34:	cbz	x27, 3bb0 <GOMP_target_ext+0x240>
    3c38:	add	x0, x25, x27
    3c3c:	sub	x1, x27, #0x1
    3c40:	add	x0, x0, #0xe
    3c44:	and	x0, x0, #0xfffffffffffffff0
    3c48:	sub	sp, sp, x0
    3c4c:	add	x28, sp, #0x10
    3c50:	ands	x0, x28, x1
    3c54:	sub	x27, x27, x0
    3c58:	add	x27, x28, x27
    3c5c:	csel	x28, x27, x28, ne  // ne = any
    3c60:	cbz	x20, 3bb0 <GOMP_target_ext+0x240>
    3c64:	add	x20, x19, x20, lsl #1
    3c68:	mov	x25, x24
    3c6c:	mov	x21, #0x0                   	// #0
    3c70:	mov	x26, #0x1                   	// #1
    3c74:	b	3c88 <GOMP_target_ext+0x318>
    3c78:	add	x25, x25, #0x8
    3c7c:	add	x22, x22, #0x8
    3c80:	cmp	x20, x19
    3c84:	b.eq	3bb0 <GOMP_target_ext+0x240>  // b.none
    3c88:	ldrh	w0, [x19]
    3c8c:	add	x19, x19, #0x2
    3c90:	and	w1, w0, #0xff
    3c94:	cmp	w1, #0xc
    3c98:	b.ne	3c78 <GOMP_target_ext+0x308>  // b.any
    3c9c:	lsr	w0, w0, #8
    3ca0:	sub	x21, x21, #0x1
    3ca4:	ldr	x1, [x25]
    3ca8:	lsl	x0, x26, x0
    3cac:	add	x21, x21, x0
    3cb0:	neg	x0, x0
    3cb4:	and	x21, x0, x21
    3cb8:	add	x3, x28, x21
    3cbc:	ldr	x27, [x22]
    3cc0:	mov	x0, x3
    3cc4:	mov	x2, x27
    3cc8:	add	x21, x21, x27
    3ccc:	bl	0 <memcpy>
    3cd0:	str	x0, [x25]
    3cd4:	b	3c78 <GOMP_target_ext+0x308>
    3cd8:	cbnz	w28, 3bb0 <GOMP_target_ext+0x240>
    3cdc:	cbnz	x20, 3be8 <GOMP_target_ext+0x278>
    3ce0:	b	3c34 <GOMP_target_ext+0x2c4>
    3ce4:	add	x0, x27, x25
    3ce8:	sub	x1, x27, #0x1
    3cec:	add	x0, x0, #0xe
    3cf0:	mov	x4, x19
    3cf4:	and	x0, x0, #0xfffffffffffffff0
    3cf8:	mov	x5, x24
    3cfc:	sub	sp, sp, x0
    3d00:	mov	x6, x22
    3d04:	add	x28, sp, #0x10
    3d08:	add	x7, x19, x20, lsl #1
    3d0c:	ands	x0, x28, x1
    3d10:	mov	x3, #0x0                   	// #0
    3d14:	sub	x1, x27, x0
    3d18:	add	x0, x28, x1
    3d1c:	csel	x28, x0, x28, ne  // ne = any
    3d20:	b	3d34 <GOMP_target_ext+0x3c4>
    3d24:	add	x5, x5, #0x8
    3d28:	add	x6, x6, #0x8
    3d2c:	cmp	x7, x4
    3d30:	b.eq	3b98 <GOMP_target_ext+0x228>  // b.none
    3d34:	ldrh	w0, [x4]
    3d38:	add	x4, x4, #0x2
    3d3c:	and	w1, w0, #0xff
    3d40:	cmp	w1, #0xc
    3d44:	b.ne	3d24 <GOMP_target_ext+0x3b4>  // b.any
    3d48:	lsr	w0, w0, #8
    3d4c:	mov	x2, #0x1                   	// #1
    3d50:	sub	x3, x3, #0x1
    3d54:	stp	x4, x7, [x29, #96]
    3d58:	lsl	x0, x2, x0
    3d5c:	add	x3, x3, x0
    3d60:	neg	x0, x0
    3d64:	and	x3, x0, x3
    3d68:	stp	x5, x6, [x29, #112]
    3d6c:	add	x9, x28, x3
    3d70:	ldr	x2, [x6]
    3d74:	mov	x0, x9
    3d78:	ldr	x1, [x5]
    3d7c:	stp	x3, x2, [x29, #128]
    3d80:	bl	0 <memcpy>
    3d84:	ldp	x3, x2, [x29, #128]
    3d88:	ldp	x5, x6, [x29, #112]
    3d8c:	str	x0, [x5]
    3d90:	ldp	x4, x7, [x29, #96]
    3d94:	add	x3, x3, x2
    3d98:	b	3d24 <GOMP_target_ext+0x3b4>
    3d9c:	mov	x1, #0x0                   	// #0
    3da0:	mov	x4, #0x1                   	// #1
    3da4:	cbz	x20, 3dec <GOMP_target_ext+0x47c>
    3da8:	ldrh	w0, [x19, x1, lsl #1]
    3dac:	and	w2, w0, #0xff
    3db0:	cmp	w2, #0xc
    3db4:	b.ne	3de0 <GOMP_target_ext+0x470>  // b.any
    3db8:	lsr	w0, w0, #8
    3dbc:	sub	x25, x25, #0x1
    3dc0:	ldr	x2, [x22, x1, lsl #3]
    3dc4:	lsl	x0, x4, x0
    3dc8:	add	x25, x25, x0
    3dcc:	neg	x3, x0
    3dd0:	cmp	x27, x0
    3dd4:	and	x25, x25, x3
    3dd8:	csel	x27, x27, x0, cs  // cs = hs, nlast
    3ddc:	add	x25, x25, x2
    3de0:	add	x1, x1, #0x1
    3de4:	cmp	x20, x1
    3de8:	b.ne	3da8 <GOMP_target_ext+0x438>  // b.any
    3dec:	cbz	x27, 3a40 <GOMP_target_ext+0xd0>
    3df0:	add	x0, x25, x27
    3df4:	sub	x1, x27, #0x1
    3df8:	add	x0, x0, #0xe
    3dfc:	and	x0, x0, #0xfffffffffffffff0
    3e00:	sub	sp, sp, x0
    3e04:	add	x28, sp, #0x10
    3e08:	ands	x0, x28, x1
    3e0c:	sub	x27, x27, x0
    3e10:	add	x0, x28, x27
    3e14:	csel	x28, x0, x28, ne  // ne = any
    3e18:	cbz	x20, 3a40 <GOMP_target_ext+0xd0>
    3e1c:	add	x20, x19, x20, lsl #1
    3e20:	mov	x27, x24
    3e24:	mov	x23, #0x0                   	// #0
    3e28:	b	3e3c <GOMP_target_ext+0x4cc>
    3e2c:	add	x27, x27, #0x8
    3e30:	add	x22, x22, #0x8
    3e34:	cmp	x20, x19
    3e38:	b.eq	3a40 <GOMP_target_ext+0xd0>  // b.none
    3e3c:	ldrh	w0, [x19]
    3e40:	add	x19, x19, #0x2
    3e44:	and	w1, w0, #0xff
    3e48:	cmp	w1, #0xc
    3e4c:	b.ne	3e2c <GOMP_target_ext+0x4bc>  // b.any
    3e50:	lsr	w0, w0, #8
    3e54:	mov	x2, #0x1                   	// #1
    3e58:	sub	x23, x23, #0x1
    3e5c:	lsl	x0, x2, x0
    3e60:	add	x23, x23, x0
    3e64:	neg	x0, x0
    3e68:	and	x23, x0, x23
    3e6c:	ldr	x1, [x27]
    3e70:	add	x3, x28, x23
    3e74:	ldr	x25, [x22]
    3e78:	mov	x0, x3
    3e7c:	mov	x2, x25
    3e80:	add	x23, x23, x25
    3e84:	bl	0 <memcpy>
    3e88:	str	x0, [x27]
    3e8c:	b	3e2c <GOMP_target_ext+0x4bc>
    3e90:	mov	x5, x19
    3e94:	mov	x4, x22
    3e98:	mov	w7, #0x1                   	// #1
    3e9c:	mov	x1, x20
    3ea0:	mov	w6, w7
    3ea4:	mov	x2, x24
    3ea8:	mov	x0, x21
    3eac:	mov	x3, #0x0                   	// #0
    3eb0:	bl	1570 <gomp_map_vars>
    3eb4:	mov	x19, x0
    3eb8:	ldr	w0, [x21, #12]
    3ebc:	ldr	x4, [x21, #144]
    3ec0:	cbz	x19, 3a48 <GOMP_target_ext+0xd8>
    3ec4:	ldr	x2, [x19, #16]
    3ec8:	mov	x1, x26
    3ecc:	ldr	x3, [x29, #144]
    3ed0:	blr	x4
    3ed4:	mov	x0, x19
    3ed8:	mov	w1, #0x1                   	// #1
    3edc:	bl	2f88 <gomp_unmap_vars>
    3ee0:	mov	sp, x29
    3ee4:	ldp	x19, x20, [sp, #16]
    3ee8:	ldp	x21, x22, [sp, #32]
    3eec:	ldp	x23, x24, [sp, #48]
    3ef0:	ldp	x25, x26, [sp, #64]
    3ef4:	ldp	x27, x28, [sp, #80]
    3ef8:	ldp	x29, x30, [sp], #144
    3efc:	ret
    3f00:	ldr	x1, [x29, #144]
    3f04:	mov	w0, #0x1                   	// #1
    3f08:	str	x1, [sp]
    3f0c:	mov	x7, x26
    3f10:	str	w0, [sp, #8]
    3f14:	mov	w6, w25
    3f18:	mov	x5, x19
    3f1c:	mov	x4, x22
    3f20:	mov	x3, x24
    3f24:	mov	x2, x20
    3f28:	mov	x1, x23
    3f2c:	mov	x0, x21
    3f30:	bl	0 <gomp_create_target_task>
    3f34:	b	3a58 <GOMP_target_ext+0xe8>
    3f38:	ldp	x4, x5, [x3, #16]
    3f3c:	stp	x4, x5, [x0, #8]
    3f40:	add	x7, x6, #0x100
    3f44:	ldp	x4, x5, [x3, #32]
    3f48:	stp	x4, x5, [x6, #24]
    3f4c:	add	x0, x0, #0x540
    3f50:	ldp	x4, x5, [x3, #48]
    3f54:	stp	x4, x5, [x6, #40]
    3f58:	mov	x1, #0x0                   	// #0
    3f5c:	ldp	x4, x5, [x3, #64]
    3f60:	stp	x4, x5, [x6, #56]
    3f64:	adrp	x2, 0 <gomp_global_icv>
    3f68:	add	x2, x2, #0x0
    3f6c:	stp	x6, x7, [x3, #16]
    3f70:	str	xzr, [x3, #32]
    3f74:	str	wzr, [x3, #40]
    3f78:	stp	xzr, xzr, [x3, #64]
    3f7c:	str	x0, [x3, #80]
    3f80:	str	x3, [x29, #136]
    3f84:	bl	0 <gomp_init_task>
    3f88:	adrp	x0, 0 <gomp_thread_destructor>
    3f8c:	ldr	x3, [x29, #136]
    3f90:	ldr	w0, [x0]
    3f94:	mov	x1, x3
    3f98:	bl	0 <pthread_setspecific>
    3f9c:	b	3b08 <GOMP_target_ext+0x198>
    3fa0:	mov	x27, #0x0                   	// #0
    3fa4:	mov	x25, #0x0                   	// #0
    3fa8:	b	3b98 <GOMP_target_ext+0x228>
    3fac:	nop

0000000000003fb0 <GOMP_target_data>:
    3fb0:	stp	x29, x30, [sp, #-48]!
    3fb4:	mov	x29, sp
    3fb8:	stp	x19, x20, [sp, #16]
    3fbc:	mov	x19, x2
    3fc0:	mov	x20, x4
    3fc4:	stp	x21, x22, [sp, #32]
    3fc8:	mov	x22, x3
    3fcc:	mov	x21, x5
    3fd0:	bl	3668 <resolve_device>
    3fd4:	cbz	x0, 3fec <GOMP_target_data+0x3c>
    3fd8:	ldr	w1, [x0, #8]
    3fdc:	mov	w2, #0x5                   	// #5
    3fe0:	and	w1, w1, w2
    3fe4:	cmp	w1, #0x4
    3fe8:	b.eq	3ffc <GOMP_target_data+0x4c>  // b.none
    3fec:	ldp	x19, x20, [sp, #16]
    3ff0:	ldp	x21, x22, [sp, #32]
    3ff4:	ldp	x29, x30, [sp], #48
    3ff8:	b	2c88 <gomp_target_data_fallback>
    3ffc:	mov	x1, x19
    4000:	mov	x2, x22
    4004:	mov	x5, x21
    4008:	mov	x4, x20
    400c:	mov	w7, #0x2                   	// #2
    4010:	mov	w6, #0x0                   	// #0
    4014:	mov	x3, #0x0                   	// #0
    4018:	bl	1570 <gomp_map_vars>
    401c:	adrp	x2, 0 <gomp_tls_data>
    4020:	ldr	x2, [x2]
    4024:	mrs	x1, tpidr_el0
    4028:	mov	x19, x0
    402c:	add	x1, x1, x2
    4030:	ldr	x1, [x1, #80]
    4034:	cbz	x1, 4058 <GOMP_target_data+0xa8>
    4038:	ldr	x0, [x1, #176]
    403c:	add	x1, x1, #0x90
    4040:	ldp	x21, x22, [sp, #32]
    4044:	str	x0, [x19, #40]
    4048:	str	x19, [x1, #32]
    404c:	ldp	x19, x20, [sp, #16]
    4050:	ldp	x29, x30, [sp], #48
    4054:	ret
    4058:	bl	0 <gomp_new_icv>
    405c:	mov	x1, x0
    4060:	ldp	x21, x22, [sp, #32]
    4064:	ldr	x0, [x1, #32]
    4068:	str	x0, [x19, #40]
    406c:	str	x19, [x1, #32]
    4070:	ldp	x19, x20, [sp, #16]
    4074:	ldp	x29, x30, [sp], #48
    4078:	ret
    407c:	nop

0000000000004080 <GOMP_target_data_ext>:
    4080:	stp	x29, x30, [sp, #-48]!
    4084:	mov	x29, sp
    4088:	stp	x19, x20, [sp, #16]
    408c:	mov	x19, x1
    4090:	mov	x20, x3
    4094:	stp	x21, x22, [sp, #32]
    4098:	mov	x22, x2
    409c:	mov	x21, x4
    40a0:	bl	3668 <resolve_device>
    40a4:	cbz	x0, 40bc <GOMP_target_data_ext+0x3c>
    40a8:	ldr	w5, [x0, #8]
    40ac:	mov	w1, #0x5                   	// #5
    40b0:	and	w5, w5, w1
    40b4:	cmp	w5, #0x4
    40b8:	b.eq	40cc <GOMP_target_data_ext+0x4c>  // b.none
    40bc:	ldp	x19, x20, [sp, #16]
    40c0:	ldp	x21, x22, [sp, #32]
    40c4:	ldp	x29, x30, [sp], #48
    40c8:	b	2c88 <gomp_target_data_fallback>
    40cc:	mov	x1, x19
    40d0:	mov	x2, x22
    40d4:	mov	x5, x21
    40d8:	mov	x4, x20
    40dc:	mov	w7, #0x2                   	// #2
    40e0:	mov	w6, #0x1                   	// #1
    40e4:	mov	x3, #0x0                   	// #0
    40e8:	bl	1570 <gomp_map_vars>
    40ec:	adrp	x2, 0 <gomp_tls_data>
    40f0:	ldr	x2, [x2]
    40f4:	mrs	x1, tpidr_el0
    40f8:	mov	x19, x0
    40fc:	add	x1, x1, x2
    4100:	ldr	x1, [x1, #80]
    4104:	cbz	x1, 4128 <GOMP_target_data_ext+0xa8>
    4108:	ldr	x0, [x1, #176]
    410c:	add	x1, x1, #0x90
    4110:	ldp	x21, x22, [sp, #32]
    4114:	str	x0, [x19, #40]
    4118:	str	x19, [x1, #32]
    411c:	ldp	x19, x20, [sp, #16]
    4120:	ldp	x29, x30, [sp], #48
    4124:	ret
    4128:	bl	0 <gomp_new_icv>
    412c:	mov	x1, x0
    4130:	ldp	x21, x22, [sp, #32]
    4134:	ldr	x0, [x1, #32]
    4138:	str	x0, [x19, #40]
    413c:	str	x19, [x1, #32]
    4140:	ldp	x19, x20, [sp, #16]
    4144:	ldp	x29, x30, [sp], #48
    4148:	ret
    414c:	nop

0000000000004150 <GOMP_target_end_data>:
    4150:	adrp	x2, 0 <gomp_tls_data>
    4154:	ldr	x2, [x2]
    4158:	mrs	x0, tpidr_el0
    415c:	adrp	x1, 0 <gomp_global_icv>
    4160:	add	x1, x1, #0x0
    4164:	add	x0, x0, x2
    4168:	ldr	x0, [x0, #80]
    416c:	cmp	x0, #0x0
    4170:	add	x0, x0, #0x90
    4174:	csel	x1, x1, x0, eq  // eq = none
    4178:	ldr	x0, [x1, #32]
    417c:	cbz	x0, 4190 <GOMP_target_end_data+0x40>
    4180:	ldr	x2, [x0, #40]
    4184:	str	x2, [x1, #32]
    4188:	mov	w1, #0x1                   	// #1
    418c:	b	2f88 <gomp_unmap_vars>
    4190:	ret
    4194:	nop

0000000000004198 <GOMP_target_update>:
    4198:	stp	x29, x30, [sp, #-64]!
    419c:	mov	x29, sp
    41a0:	stp	x19, x20, [sp, #16]
    41a4:	mov	x20, x4
    41a8:	mov	x19, x2
    41ac:	stp	x21, x22, [sp, #32]
    41b0:	mov	x22, x3
    41b4:	mov	x21, x5
    41b8:	str	x2, [sp, #56]
    41bc:	bl	3668 <resolve_device>
    41c0:	cbz	x0, 41d8 <GOMP_target_update+0x40>
    41c4:	ldr	w1, [x0, #8]
    41c8:	mov	w2, #0x5                   	// #5
    41cc:	and	w1, w1, w2
    41d0:	cmp	w1, #0x4
    41d4:	b.eq	41e8 <GOMP_target_update+0x50>  // b.none
    41d8:	ldp	x19, x20, [sp, #16]
    41dc:	ldp	x21, x22, [sp, #32]
    41e0:	ldp	x29, x30, [sp], #64
    41e4:	ret
    41e8:	mov	x4, x21
    41ec:	mov	x3, x20
    41f0:	mov	x2, x22
    41f4:	mov	x1, x19
    41f8:	ldp	x19, x20, [sp, #16]
    41fc:	mov	w5, #0x0                   	// #0
    4200:	ldp	x21, x22, [sp, #32]
    4204:	ldp	x29, x30, [sp], #64
    4208:	b	948 <gomp_update>
    420c:	nop

0000000000004210 <GOMP_target_update_ext>:
    4210:	sub	sp, sp, #0x60
    4214:	stp	x29, x30, [sp, #16]
    4218:	add	x29, sp, #0x10
    421c:	stp	x19, x20, [sp, #32]
    4220:	mov	x20, x6
    4224:	stp	x21, x22, [sp, #48]
    4228:	mov	x21, x1
    422c:	mov	x22, x2
    4230:	stp	x23, x24, [sp, #64]
    4234:	mov	x23, x3
    4238:	mov	x24, x4
    423c:	str	x25, [sp, #80]
    4240:	mov	w25, w5
    4244:	bl	3668 <resolve_device>
    4248:	mov	x19, x0
    424c:	cbz	x20, 42a4 <GOMP_target_update_ext+0x94>
    4250:	adrp	x1, 0 <gomp_tls_data>
    4254:	ldr	x1, [x1]
    4258:	mrs	x2, tpidr_el0
    425c:	add	x1, x2, x1
    4260:	ldr	x2, [x1, #80]
    4264:	cbz	x2, 42a4 <GOMP_target_update_ext+0x94>
    4268:	ldr	x3, [x2, #56]
    426c:	cbz	x3, 42a4 <GOMP_target_update_ext+0x94>
    4270:	ldr	x1, [x1, #16]
    4274:	tbz	w25, #0, 4284 <GOMP_target_update_ext+0x74>
    4278:	cbz	x1, 429c <GOMP_target_update_ext+0x8c>
    427c:	ldrb	w3, [x2, #205]
    4280:	cbz	w3, 436c <GOMP_target_update_ext+0x15c>
    4284:	adrp	x0, 0 <gomp_cancel_var>
    4288:	cmp	x1, #0x0
    428c:	cset	w3, ne  // ne = any
    4290:	ldrb	w0, [x0]
    4294:	tst	w3, w0
    4298:	b.ne	43a0 <GOMP_target_update_ext+0x190>  // b.any
    429c:	mov	x0, x20
    42a0:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    42a4:	cbz	x19, 4350 <GOMP_target_update_ext+0x140>
    42a8:	ldr	w0, [x19, #8]
    42ac:	mov	w1, #0x5                   	// #5
    42b0:	and	w0, w0, w1
    42b4:	cmp	w0, #0x4
    42b8:	b.ne	4350 <GOMP_target_update_ext+0x140>  // b.any
    42bc:	adrp	x1, 0 <gomp_tls_data>
    42c0:	ldr	x1, [x1]
    42c4:	mrs	x0, tpidr_el0
    42c8:	adrp	x2, 0 <gomp_cancel_var>
    42cc:	add	x0, x0, x1
    42d0:	ldrb	w2, [x2]
    42d4:	ldr	x1, [x0, #16]
    42d8:	cmp	x1, #0x0
    42dc:	cset	w3, ne  // ne = any
    42e0:	tst	w3, w2
    42e4:	b.ne	431c <GOMP_target_update_ext+0x10c>  // b.any
    42e8:	mov	x4, x24
    42ec:	mov	x3, x23
    42f0:	mov	x2, x22
    42f4:	mov	x1, x21
    42f8:	mov	x0, x19
    42fc:	mov	w5, #0x1                   	// #1
    4300:	ldp	x29, x30, [sp, #16]
    4304:	ldp	x19, x20, [sp, #32]
    4308:	ldp	x21, x22, [sp, #48]
    430c:	ldp	x23, x24, [sp, #64]
    4310:	ldr	x25, [sp, #80]
    4314:	add	sp, sp, #0x60
    4318:	b	948 <gomp_update>
    431c:	ldr	w1, [x1, #132]
    4320:	tbnz	w1, #2, 4350 <GOMP_target_update_ext+0x140>
    4324:	ldr	x0, [x0, #80]
    4328:	ldr	x0, [x0, #40]
    432c:	cbz	x0, 42e8 <GOMP_target_update_ext+0xd8>
    4330:	ldrb	w1, [x0, #49]
    4334:	cbnz	w1, 4350 <GOMP_target_update_ext+0x140>
    4338:	ldrb	w1, [x0, #50]
    433c:	cbz	w1, 42e8 <GOMP_target_update_ext+0xd8>
    4340:	ldr	x0, [x0]
    4344:	cbz	x0, 42e8 <GOMP_target_update_ext+0xd8>
    4348:	ldrb	w0, [x0, #49]
    434c:	cbz	w0, 42e8 <GOMP_target_update_ext+0xd8>
    4350:	ldp	x29, x30, [sp, #16]
    4354:	ldp	x19, x20, [sp, #32]
    4358:	ldp	x21, x22, [sp, #48]
    435c:	ldp	x23, x24, [sp, #64]
    4360:	ldr	x25, [sp, #80]
    4364:	add	sp, sp, #0x60
    4368:	ret
    436c:	str	xzr, [sp]
    4370:	mov	x7, x20
    4374:	str	wzr, [sp, #8]
    4378:	orr	w6, w25, #0x80000000
    437c:	mov	x5, x24
    4380:	mov	x4, x23
    4384:	mov	x3, x22
    4388:	mov	x2, x21
    438c:	mov	x1, #0x0                   	// #0
    4390:	bl	0 <gomp_create_target_task>
    4394:	tst	w0, #0xff
    4398:	b.eq	42a4 <GOMP_target_update_ext+0x94>  // b.none
    439c:	b	4350 <GOMP_target_update_ext+0x140>
    43a0:	ldr	w0, [x1, #132]
    43a4:	tbnz	w0, #2, 4350 <GOMP_target_update_ext+0x140>
    43a8:	ldr	x0, [x2, #40]
    43ac:	cbz	x0, 429c <GOMP_target_update_ext+0x8c>
    43b0:	ldrb	w1, [x0, #49]
    43b4:	cbnz	w1, 4350 <GOMP_target_update_ext+0x140>
    43b8:	ldrb	w1, [x0, #50]
    43bc:	cbz	w1, 429c <GOMP_target_update_ext+0x8c>
    43c0:	ldr	x0, [x0]
    43c4:	cbz	x0, 429c <GOMP_target_update_ext+0x8c>
    43c8:	ldrb	w0, [x0, #49]
    43cc:	cbz	w0, 429c <GOMP_target_update_ext+0x8c>
    43d0:	b	4350 <GOMP_target_update_ext+0x140>
    43d4:	nop

00000000000043d8 <GOMP_target_enter_exit_data>:
    43d8:	sub	sp, sp, #0x60
    43dc:	stp	x29, x30, [sp, #16]
    43e0:	add	x29, sp, #0x10
    43e4:	stp	x19, x20, [sp, #32]
    43e8:	mov	x20, x4
    43ec:	mov	x19, x6
    43f0:	stp	x21, x22, [sp, #48]
    43f4:	mov	x22, x1
    43f8:	mov	x21, x3
    43fc:	stp	x23, x24, [sp, #64]
    4400:	mov	x23, x2
    4404:	str	x25, [sp, #80]
    4408:	mov	w25, w5
    440c:	bl	3668 <resolve_device>
    4410:	mov	x24, x0
    4414:	cbz	x19, 446c <GOMP_target_enter_exit_data+0x94>
    4418:	adrp	x1, 0 <gomp_tls_data>
    441c:	ldr	x1, [x1]
    4420:	mrs	x2, tpidr_el0
    4424:	add	x1, x2, x1
    4428:	ldr	x2, [x1, #80]
    442c:	cbz	x2, 446c <GOMP_target_enter_exit_data+0x94>
    4430:	ldr	x3, [x2, #56]
    4434:	cbz	x3, 446c <GOMP_target_enter_exit_data+0x94>
    4438:	ldr	x1, [x1, #16]
    443c:	tbz	w25, #0, 444c <GOMP_target_enter_exit_data+0x74>
    4440:	cbz	x1, 4464 <GOMP_target_enter_exit_data+0x8c>
    4444:	ldrb	w3, [x2, #205]
    4448:	cbz	w3, 4574 <GOMP_target_enter_exit_data+0x19c>
    444c:	adrp	x0, 0 <gomp_cancel_var>
    4450:	cmp	x1, #0x0
    4454:	cset	w3, ne  // ne = any
    4458:	ldrb	w0, [x0]
    445c:	tst	w3, w0
    4460:	b.ne	45e0 <GOMP_target_enter_exit_data+0x208>  // b.any
    4464:	mov	x0, x19
    4468:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    446c:	cbz	x24, 4484 <GOMP_target_enter_exit_data+0xac>
    4470:	ldr	w0, [x24, #8]
    4474:	mov	w1, #0x5                   	// #5
    4478:	and	w0, w0, w1
    447c:	cmp	w0, #0x4
    4480:	b.eq	44a0 <GOMP_target_enter_exit_data+0xc8>  // b.none
    4484:	ldp	x29, x30, [sp, #16]
    4488:	ldp	x19, x20, [sp, #32]
    448c:	ldp	x21, x22, [sp, #48]
    4490:	ldp	x23, x24, [sp, #64]
    4494:	ldr	x25, [sp, #80]
    4498:	add	sp, sp, #0x60
    449c:	ret
    44a0:	adrp	x1, 0 <gomp_tls_data>
    44a4:	ldr	x1, [x1]
    44a8:	mrs	x0, tpidr_el0
    44ac:	adrp	x2, 0 <gomp_cancel_var>
    44b0:	add	x0, x0, x1
    44b4:	ldrb	w2, [x2]
    44b8:	ldr	x1, [x0, #16]
    44bc:	cmp	x1, #0x0
    44c0:	cset	w3, ne  // ne = any
    44c4:	tst	w3, w2
    44c8:	b.ne	45a8 <GOMP_target_enter_exit_data+0x1d0>  // b.any
    44cc:	tbnz	w25, #1, 4544 <GOMP_target_enter_exit_data+0x16c>
    44d0:	cbz	x22, 4484 <GOMP_target_enter_exit_data+0xac>
    44d4:	mov	x19, #0x0                   	// #0
    44d8:	b	44fc <GOMP_target_enter_exit_data+0x124>
    44dc:	mov	w7, #0x3                   	// #3
    44e0:	mov	w6, #0x1                   	// #1
    44e4:	mov	x3, #0x0                   	// #0
    44e8:	mov	x1, #0x1                   	// #1
    44ec:	bl	1570 <gomp_map_vars>
    44f0:	add	x19, x19, #0x1
    44f4:	cmp	x22, x19
    44f8:	b.ls	4484 <GOMP_target_enter_exit_data+0xac>  // b.plast
    44fc:	lsl	x7, x19, #1
    4500:	lsl	x6, x19, #3
    4504:	add	x5, x20, x7
    4508:	add	x2, x23, x6
    450c:	add	x4, x21, x6
    4510:	mov	x0, x24
    4514:	ldrb	w1, [x20, x7]
    4518:	cmp	w1, #0x1c
    451c:	b.ne	44dc <GOMP_target_enter_exit_data+0x104>  // b.any
    4520:	ldr	x1, [x21, x19, lsl #3]
    4524:	mov	w7, #0x3                   	// #3
    4528:	mov	w6, #0x1                   	// #1
    452c:	mov	x3, #0x0                   	// #0
    4530:	add	x1, x1, #0x1
    4534:	bl	1570 <gomp_map_vars>
    4538:	ldr	x0, [x21, x19, lsl #3]
    453c:	add	x19, x19, x0
    4540:	b	44f0 <GOMP_target_enter_exit_data+0x118>
    4544:	mov	x4, x20
    4548:	mov	x3, x21
    454c:	mov	x2, x23
    4550:	mov	x1, x22
    4554:	mov	x0, x24
    4558:	ldp	x29, x30, [sp, #16]
    455c:	ldp	x19, x20, [sp, #32]
    4560:	ldp	x21, x22, [sp, #48]
    4564:	ldp	x23, x24, [sp, #64]
    4568:	ldr	x25, [sp, #80]
    456c:	add	sp, sp, #0x60
    4570:	b	e70 <gomp_exit_data>
    4574:	str	xzr, [sp]
    4578:	mov	x7, x19
    457c:	str	wzr, [sp, #8]
    4580:	mov	w6, w25
    4584:	mov	x5, x20
    4588:	mov	x4, x21
    458c:	mov	x3, x23
    4590:	mov	x2, x22
    4594:	mov	x1, #0x0                   	// #0
    4598:	bl	0 <gomp_create_target_task>
    459c:	tst	w0, #0xff
    45a0:	b.eq	446c <GOMP_target_enter_exit_data+0x94>  // b.none
    45a4:	b	4484 <GOMP_target_enter_exit_data+0xac>
    45a8:	ldr	w1, [x1, #132]
    45ac:	tbnz	w1, #2, 4484 <GOMP_target_enter_exit_data+0xac>
    45b0:	ldr	x0, [x0, #80]
    45b4:	ldr	x0, [x0, #40]
    45b8:	cbz	x0, 44cc <GOMP_target_enter_exit_data+0xf4>
    45bc:	ldrb	w1, [x0, #49]
    45c0:	cbnz	w1, 4484 <GOMP_target_enter_exit_data+0xac>
    45c4:	ldrb	w1, [x0, #50]
    45c8:	cbz	w1, 44cc <GOMP_target_enter_exit_data+0xf4>
    45cc:	ldr	x0, [x0]
    45d0:	cbz	x0, 44cc <GOMP_target_enter_exit_data+0xf4>
    45d4:	ldrb	w0, [x0, #49]
    45d8:	cbz	w0, 44cc <GOMP_target_enter_exit_data+0xf4>
    45dc:	b	4484 <GOMP_target_enter_exit_data+0xac>
    45e0:	ldr	w0, [x1, #132]
    45e4:	tbnz	w0, #2, 4484 <GOMP_target_enter_exit_data+0xac>
    45e8:	ldr	x0, [x2, #40]
    45ec:	cbz	x0, 4464 <GOMP_target_enter_exit_data+0x8c>
    45f0:	ldrb	w1, [x0, #49]
    45f4:	cbnz	w1, 4484 <GOMP_target_enter_exit_data+0xac>
    45f8:	ldrb	w1, [x0, #50]
    45fc:	cbz	w1, 4464 <GOMP_target_enter_exit_data+0x8c>
    4600:	ldr	x0, [x0]
    4604:	cbz	x0, 4464 <GOMP_target_enter_exit_data+0x8c>
    4608:	ldrb	w0, [x0, #49]
    460c:	cbz	w0, 4464 <GOMP_target_enter_exit_data+0x8c>
    4610:	b	4484 <GOMP_target_enter_exit_data+0xac>
    4614:	nop

0000000000004618 <gomp_target_task_fn>:
    4618:	stp	x29, x30, [sp, #-48]!
    461c:	mov	x29, sp
    4620:	stp	x19, x20, [sp, #16]
    4624:	mov	x19, x0
    4628:	ldr	x0, [x0, #8]
    462c:	stp	x21, x22, [sp, #32]
    4630:	ldr	x21, [x19]
    4634:	cbz	x0, 46ec <gomp_target_task_fn+0xd4>
    4638:	cbz	x21, 46c8 <gomp_target_task_fn+0xb0>
    463c:	ldr	w1, [x21, #8]
    4640:	tbz	w1, #2, 46c8 <gomp_target_task_fn+0xb0>
    4644:	tbnz	w1, #1, 47d8 <gomp_target_task_fn+0x1c0>
    4648:	mov	x1, x0
    464c:	mov	x0, x21
    4650:	bl	878 <gomp_get_target_fn_addr.part.0>
    4654:	mov	x20, x0
    4658:	cbz	x0, 46c4 <gomp_target_task_fn+0xac>
    465c:	ldr	x1, [x21, #136]
    4660:	cbz	x1, 4674 <gomp_target_task_fn+0x5c>
    4664:	mov	x0, x20
    4668:	blr	x1
    466c:	tst	w0, #0xff
    4670:	b.eq	46c4 <gomp_target_task_fn+0xac>  // b.none
    4674:	ldr	w0, [x19, #44]
    4678:	cmp	w0, #0x5
    467c:	b.eq	47c0 <gomp_target_task_fn+0x1a8>  // b.none
    4680:	ldr	w0, [x21, #8]
    4684:	add	x2, x19, #0x50
    4688:	tbz	w0, #0, 47e0 <gomp_target_task_fn+0x1c8>
    468c:	str	xzr, [x19, #48]
    4690:	ldr	w0, [x21, #12]
    4694:	mov	w1, #0x3                   	// #3
    4698:	ldr	x3, [x19, #72]
    469c:	mov	x4, x19
    46a0:	ldr	x5, [x21, #152]
    46a4:	str	w1, [x19, #44]
    46a8:	mov	x1, x20
    46ac:	blr	x5
    46b0:	mov	w0, #0x1                   	// #1
    46b4:	ldp	x19, x20, [sp, #16]
    46b8:	ldp	x21, x22, [sp, #32]
    46bc:	ldp	x29, x30, [sp], #48
    46c0:	ret
    46c4:	ldr	x0, [x19, #8]
    46c8:	mov	w1, #0x2                   	// #2
    46cc:	str	w1, [x19, #44]
    46d0:	add	x1, x19, #0x50
    46d4:	bl	2f0 <gomp_target_fallback>
    46d8:	mov	w0, #0x0                   	// #0
    46dc:	ldp	x19, x20, [sp, #16]
    46e0:	ldp	x21, x22, [sp, #32]
    46e4:	ldp	x29, x30, [sp], #48
    46e8:	ret
    46ec:	cbz	x21, 47ac <gomp_target_task_fn+0x194>
    46f0:	ldr	w0, [x21, #8]
    46f4:	mov	w1, #0x5                   	// #5
    46f8:	and	w0, w0, w1
    46fc:	cmp	w0, #0x4
    4700:	b.ne	47ac <gomp_target_task_fn+0x194>  // b.any
    4704:	ldr	w0, [x19, #40]
    4708:	ldr	x1, [x19, #16]
    470c:	tbnz	w0, #31, 4808 <gomp_target_task_fn+0x1f0>
    4710:	tbnz	w0, #1, 479c <gomp_target_task_fn+0x184>
    4714:	cbz	x1, 47ac <gomp_target_task_fn+0x194>
    4718:	mov	x20, #0x0                   	// #0
    471c:	b	4744 <gomp_target_task_fn+0x12c>
    4720:	mov	w7, #0x3                   	// #3
    4724:	mov	w6, #0x1                   	// #1
    4728:	mov	x3, #0x0                   	// #0
    472c:	mov	x1, #0x1                   	// #1
    4730:	bl	1570 <gomp_map_vars>
    4734:	ldr	x0, [x19, #16]
    4738:	add	x20, x20, #0x1
    473c:	cmp	x0, x20
    4740:	b.ls	47ac <gomp_target_task_fn+0x194>  // b.plast
    4744:	ldp	x3, x1, [x19, #24]
    4748:	lsl	x5, x20, #1
    474c:	add	x2, x20, #0xa
    4750:	mov	x0, x21
    4754:	lsl	x2, x2, #3
    4758:	sub	x22, x2, #0x50
    475c:	add	x2, x19, x2
    4760:	ldrb	w6, [x1, x5]
    4764:	add	x4, x3, x22
    4768:	add	x5, x1, x5
    476c:	cmp	w6, #0x1c
    4770:	b.ne	4720 <gomp_target_task_fn+0x108>  // b.any
    4774:	ldr	x1, [x3, x22]
    4778:	mov	w7, #0x3                   	// #3
    477c:	mov	w6, #0x1                   	// #1
    4780:	mov	x3, #0x0                   	// #0
    4784:	add	x1, x1, #0x1
    4788:	bl	1570 <gomp_map_vars>
    478c:	ldr	x0, [x19, #24]
    4790:	ldr	x0, [x0, x22]
    4794:	add	x20, x20, x0
    4798:	b	4734 <gomp_target_task_fn+0x11c>
    479c:	ldp	x3, x4, [x19, #24]
    47a0:	mov	x0, x21
    47a4:	add	x2, x19, #0x50
    47a8:	bl	e70 <gomp_exit_data>
    47ac:	mov	w0, #0x0                   	// #0
    47b0:	ldp	x19, x20, [sp, #16]
    47b4:	ldp	x21, x22, [sp, #32]
    47b8:	ldp	x29, x30, [sp], #48
    47bc:	ret
    47c0:	ldr	x0, [x19, #48]
    47c4:	cbz	x0, 47ac <gomp_target_task_fn+0x194>
    47c8:	mov	w1, #0x1                   	// #1
    47cc:	bl	2f88 <gomp_unmap_vars>
    47d0:	mov	w0, #0x0                   	// #0
    47d4:	b	46dc <gomp_target_task_fn+0xc4>
    47d8:	mov	x20, x0
    47dc:	b	465c <gomp_target_task_fn+0x44>
    47e0:	ldp	x1, x4, [x19, #16]
    47e4:	mov	w7, #0x1                   	// #1
    47e8:	ldr	x5, [x19, #32]
    47ec:	mov	w6, w7
    47f0:	mov	x0, x21
    47f4:	mov	x3, #0x0                   	// #0
    47f8:	bl	1570 <gomp_map_vars>
    47fc:	ldr	x2, [x0, #16]
    4800:	str	x0, [x19, #48]
    4804:	b	4690 <gomp_target_task_fn+0x78>
    4808:	ldp	x3, x4, [x19, #24]
    480c:	mov	x0, x21
    4810:	add	x2, x19, #0x50
    4814:	mov	w5, #0x1                   	// #1
    4818:	bl	948 <gomp_update>
    481c:	mov	w0, #0x0                   	// #0
    4820:	b	46dc <gomp_target_task_fn+0xc4>
    4824:	nop

0000000000004828 <GOMP_teams>:
    4828:	cbz	w1, 4870 <GOMP_teams+0x48>
    482c:	stp	x29, x30, [sp, #-32]!
    4830:	adrp	x0, 0 <gomp_tls_data>
    4834:	ldr	x0, [x0]
    4838:	mov	x29, sp
    483c:	str	x19, [sp, #16]
    4840:	mov	w19, w1
    4844:	mrs	x1, tpidr_el0
    4848:	add	x0, x1, x0
    484c:	ldr	x0, [x0, #80]
    4850:	cbz	x0, 4874 <GOMP_teams+0x4c>
    4854:	add	x0, x0, #0x90
    4858:	cmp	w19, #0x0
    485c:	csinv	w19, w19, wzr, ge  // ge = tcont
    4860:	str	w19, [x0, #20]
    4864:	ldr	x19, [sp, #16]
    4868:	ldp	x29, x30, [sp], #32
    486c:	ret
    4870:	ret
    4874:	bl	0 <gomp_new_icv>
    4878:	cmp	w19, #0x0
    487c:	csinv	w19, w19, wzr, ge  // ge = tcont
    4880:	str	w19, [x0, #20]
    4884:	ldr	x19, [sp, #16]
    4888:	ldp	x29, x30, [sp], #32
    488c:	ret

0000000000004890 <omp_target_alloc>:
    4890:	cmn	w1, #0x2
    4894:	b.eq	4938 <omp_target_alloc+0xa8>  // b.none
    4898:	stp	x29, x30, [sp, #-48]!
    489c:	mov	x29, sp
    48a0:	stp	x19, x20, [sp, #16]
    48a4:	tbnz	w1, #31, 493c <omp_target_alloc+0xac>
    48a8:	mov	x20, x0
    48ac:	mov	w0, w1
    48b0:	bl	3668 <resolve_device>
    48b4:	mov	x19, x0
    48b8:	cbz	x0, 493c <omp_target_alloc+0xac>
    48bc:	ldr	w0, [x0, #8]
    48c0:	mov	w1, #0x5                   	// #5
    48c4:	and	w0, w0, w1
    48c8:	cmp	w0, #0x4
    48cc:	b.ne	492c <omp_target_alloc+0x9c>  // b.any
    48d0:	str	x21, [sp, #32]
    48d4:	add	x21, x19, #0xa8
    48d8:	mov	w0, #0x1                   	// #1
    48dc:	ldaxr	w1, [x21]
    48e0:	cbnz	w1, 48ec <omp_target_alloc+0x5c>
    48e4:	stxr	w2, w0, [x21]
    48e8:	cbnz	w2, 48dc <omp_target_alloc+0x4c>
    48ec:	cmp	w1, #0x0
    48f0:	b.ne	4960 <omp_target_alloc+0xd0>  // b.any
    48f4:	ldr	w0, [x19, #12]
    48f8:	mov	x1, x20
    48fc:	ldr	x2, [x19, #96]
    4900:	blr	x2
    4904:	mov	x19, x0
    4908:	ldxr	w0, [x21]
    490c:	stlxr	w1, wzr, [x21]
    4910:	cbnz	w1, 4908 <omp_target_alloc+0x78>
    4914:	tbnz	w0, #31, 4950 <omp_target_alloc+0xc0>
    4918:	ldr	x21, [sp, #32]
    491c:	mov	x0, x19
    4920:	ldp	x19, x20, [sp, #16]
    4924:	ldp	x29, x30, [sp], #48
    4928:	ret
    492c:	mov	x0, x20
    4930:	ldp	x19, x20, [sp, #16]
    4934:	ldp	x29, x30, [sp], #48
    4938:	b	0 <malloc>
    493c:	mov	x19, #0x0                   	// #0
    4940:	mov	x0, x19
    4944:	ldp	x19, x20, [sp, #16]
    4948:	ldp	x29, x30, [sp], #48
    494c:	ret
    4950:	mov	x0, x21
    4954:	bl	0 <gomp_mutex_unlock_slow>
    4958:	ldr	x21, [sp, #32]
    495c:	b	491c <omp_target_alloc+0x8c>
    4960:	mov	x0, x21
    4964:	bl	0 <gomp_mutex_lock_slow>
    4968:	b	48f4 <omp_target_alloc+0x64>
    496c:	nop

0000000000004970 <omp_target_free>:
    4970:	cbz	x0, 4a14 <omp_target_free+0xa4>
    4974:	stp	x29, x30, [sp, #-48]!
    4978:	cmn	w1, #0x2
    497c:	mov	x29, sp
    4980:	stp	x19, x20, [sp, #16]
    4984:	mov	x19, x0
    4988:	b.eq	4a04 <omp_target_free+0x94>  // b.none
    498c:	tbnz	w1, #31, 49f8 <omp_target_free+0x88>
    4990:	mov	w0, w1
    4994:	bl	3668 <resolve_device>
    4998:	mov	x20, x0
    499c:	cbz	x0, 49f8 <omp_target_free+0x88>
    49a0:	ldr	w0, [x0, #8]
    49a4:	mov	w1, #0x5                   	// #5
    49a8:	and	w0, w0, w1
    49ac:	cmp	w0, #0x4
    49b0:	b.ne	4a04 <omp_target_free+0x94>  // b.any
    49b4:	str	x21, [sp, #32]
    49b8:	add	x21, x20, #0xa8
    49bc:	mov	w0, #0x1                   	// #1
    49c0:	ldaxr	w1, [x21]
    49c4:	cbnz	w1, 49d0 <omp_target_free+0x60>
    49c8:	stxr	w2, w0, [x21]
    49cc:	cbnz	w2, 49c0 <omp_target_free+0x50>
    49d0:	cmp	w1, #0x0
    49d4:	b.ne	4a2c <omp_target_free+0xbc>  // b.any
    49d8:	mov	x1, x19
    49dc:	mov	x0, x20
    49e0:	bl	3e0 <gomp_free_device_memory>
    49e4:	ldxr	w0, [x21]
    49e8:	stlxr	w1, wzr, [x21]
    49ec:	cbnz	w1, 49e4 <omp_target_free+0x74>
    49f0:	tbnz	w0, #31, 4a18 <omp_target_free+0xa8>
    49f4:	ldr	x21, [sp, #32]
    49f8:	ldp	x19, x20, [sp, #16]
    49fc:	ldp	x29, x30, [sp], #48
    4a00:	ret
    4a04:	mov	x0, x19
    4a08:	ldp	x19, x20, [sp, #16]
    4a0c:	ldp	x29, x30, [sp], #48
    4a10:	b	0 <free>
    4a14:	ret
    4a18:	mov	x0, x21
    4a1c:	ldp	x19, x20, [sp, #16]
    4a20:	ldr	x21, [sp, #32]
    4a24:	ldp	x29, x30, [sp], #48
    4a28:	b	0 <gomp_mutex_unlock_slow>
    4a2c:	mov	x0, x21
    4a30:	bl	0 <gomp_mutex_lock_slow>
    4a34:	b	49d8 <omp_target_free+0x68>

0000000000004a38 <omp_target_is_present>:
    4a38:	stp	x29, x30, [sp, #-112]!
    4a3c:	cmp	x0, #0x0
    4a40:	ccmn	w1, #0x2, #0x4, ne  // ne = any
    4a44:	mov	x29, sp
    4a48:	stp	x19, x20, [sp, #16]
    4a4c:	b.eq	4aec <omp_target_is_present+0xb4>  // b.none
    4a50:	tbnz	w1, #31, 4b00 <omp_target_is_present+0xc8>
    4a54:	mov	x19, x0
    4a58:	mov	w0, w1
    4a5c:	bl	3668 <resolve_device>
    4a60:	mov	x20, x0
    4a64:	cbz	x0, 4b00 <omp_target_is_present+0xc8>
    4a68:	ldr	w0, [x0, #8]
    4a6c:	mov	w1, #0x5                   	// #5
    4a70:	and	w0, w0, w1
    4a74:	cmp	w0, #0x4
    4a78:	b.ne	4aec <omp_target_is_present+0xb4>  // b.any
    4a7c:	str	x21, [sp, #32]
    4a80:	add	x21, x20, #0xa8
    4a84:	mov	w0, #0x1                   	// #1
    4a88:	ldaxr	w1, [x21]
    4a8c:	cbnz	w1, 4a98 <omp_target_is_present+0x60>
    4a90:	stxr	w2, w0, [x21]
    4a94:	cbnz	w2, 4a88 <omp_target_is_present+0x50>
    4a98:	cmp	w1, #0x0
    4a9c:	b.ne	4b24 <omp_target_is_present+0xec>  // b.any
    4aa0:	add	x2, x19, #0x1
    4aa4:	add	x1, sp, #0x38
    4aa8:	add	x0, x20, #0xa0
    4aac:	stp	x19, x2, [sp, #56]
    4ab0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    4ab4:	cmp	x0, #0x0
    4ab8:	ldr	x1, [sp, #64]
    4abc:	cset	w19, ne  // ne = any
    4ac0:	sub	x1, x1, #0x1
    4ac4:	str	x1, [sp, #64]
    4ac8:	ldxr	w0, [x21]
    4acc:	stlxr	w1, wzr, [x21]
    4ad0:	cbnz	w1, 4ac8 <omp_target_is_present+0x90>
    4ad4:	tbnz	w0, #31, 4b14 <omp_target_is_present+0xdc>
    4ad8:	mov	w0, w19
    4adc:	ldp	x19, x20, [sp, #16]
    4ae0:	ldr	x21, [sp, #32]
    4ae4:	ldp	x29, x30, [sp], #112
    4ae8:	ret
    4aec:	mov	w19, #0x1                   	// #1
    4af0:	mov	w0, w19
    4af4:	ldp	x19, x20, [sp, #16]
    4af8:	ldp	x29, x30, [sp], #112
    4afc:	ret
    4b00:	mov	w19, #0x0                   	// #0
    4b04:	mov	w0, w19
    4b08:	ldp	x19, x20, [sp, #16]
    4b0c:	ldp	x29, x30, [sp], #112
    4b10:	ret
    4b14:	mov	x0, x21
    4b18:	bl	0 <gomp_mutex_unlock_slow>
    4b1c:	ldr	x21, [sp, #32]
    4b20:	b	4af0 <omp_target_is_present+0xb8>
    4b24:	mov	x0, x21
    4b28:	bl	0 <gomp_mutex_lock_slow>
    4b2c:	b	4aa0 <omp_target_is_present+0x68>

0000000000004b30 <omp_target_memcpy>:
    4b30:	stp	x29, x30, [sp, #-80]!
    4b34:	cmn	w5, #0x2
    4b38:	mov	x29, sp
    4b3c:	stp	x19, x20, [sp, #16]
    4b40:	mov	w19, w6
    4b44:	stp	x21, x22, [sp, #32]
    4b48:	mov	x21, x0
    4b4c:	mov	x22, x1
    4b50:	stp	x23, x24, [sp, #48]
    4b54:	mov	x23, x2
    4b58:	mov	x24, x3
    4b5c:	str	x25, [sp, #64]
    4b60:	mov	x25, x4
    4b64:	b.eq	4b90 <omp_target_memcpy+0x60>  // b.none
    4b68:	tbnz	w5, #31, 4c18 <omp_target_memcpy+0xe8>
    4b6c:	mov	w0, w5
    4b70:	bl	3668 <resolve_device>
    4b74:	mov	x20, x0
    4b78:	cbz	x0, 4c18 <omp_target_memcpy+0xe8>
    4b7c:	ldr	w0, [x0, #8]
    4b80:	mov	w1, #0x5                   	// #5
    4b84:	and	w0, w0, w1
    4b88:	cmp	w0, #0x4
    4b8c:	b.eq	4c90 <omp_target_memcpy+0x160>  // b.none
    4b90:	cmn	w19, #0x2
    4b94:	mov	x20, #0x0                   	// #0
    4b98:	b.eq	4d18 <omp_target_memcpy+0x1e8>  // b.none
    4b9c:	tbnz	w19, #31, 4c18 <omp_target_memcpy+0xe8>
    4ba0:	mov	w0, w19
    4ba4:	bl	3668 <resolve_device>
    4ba8:	mov	x19, x0
    4bac:	cbz	x0, 4c18 <omp_target_memcpy+0xe8>
    4bb0:	ldr	w0, [x0, #8]
    4bb4:	mov	w1, #0x5                   	// #5
    4bb8:	and	w0, w0, w1
    4bbc:	cmp	w0, #0x4
    4bc0:	b.eq	4c34 <omp_target_memcpy+0x104>  // b.none
    4bc4:	cbz	x20, 4d18 <omp_target_memcpy+0x1e8>
    4bc8:	add	x19, x20, #0xa8
    4bcc:	mov	w0, #0x1                   	// #1
    4bd0:	ldaxr	w1, [x19]
    4bd4:	cbnz	w1, 4be0 <omp_target_memcpy+0xb0>
    4bd8:	stxr	w2, w0, [x19]
    4bdc:	cbnz	w2, 4bd0 <omp_target_memcpy+0xa0>
    4be0:	cmp	w1, #0x0
    4be4:	b.ne	4d6c <omp_target_memcpy+0x23c>  // b.any
    4be8:	ldr	w0, [x20, #12]
    4bec:	mov	x3, x23
    4bf0:	ldr	x4, [x20, #120]
    4bf4:	add	x2, x22, x25
    4bf8:	add	x1, x21, x24
    4bfc:	blr	x4
    4c00:	and	w20, w0, #0xff
    4c04:	ldxr	w0, [x19]
    4c08:	stlxr	w1, wzr, [x19]
    4c0c:	cbnz	w1, 4c04 <omp_target_memcpy+0xd4>
    4c10:	tbnz	w0, #31, 4d44 <omp_target_memcpy+0x214>
    4c14:	cbnz	w20, 4cfc <omp_target_memcpy+0x1cc>
    4c18:	mov	w0, #0x16                  	// #22
    4c1c:	ldp	x19, x20, [sp, #16]
    4c20:	ldp	x21, x22, [sp, #32]
    4c24:	ldp	x23, x24, [sp, #48]
    4c28:	ldr	x25, [sp, #64]
    4c2c:	ldp	x29, x30, [sp], #80
    4c30:	ret
    4c34:	cbz	x20, 4ca0 <omp_target_memcpy+0x170>
    4c38:	cmp	x19, x20
    4c3c:	b.ne	4c18 <omp_target_memcpy+0xe8>  // b.any
    4c40:	add	x19, x20, #0xa8
    4c44:	mov	w0, #0x1                   	// #1
    4c48:	ldaxr	w1, [x19]
    4c4c:	cbnz	w1, 4c58 <omp_target_memcpy+0x128>
    4c50:	stxr	w2, w0, [x19]
    4c54:	cbnz	w2, 4c48 <omp_target_memcpy+0x118>
    4c58:	cmp	w1, #0x0
    4c5c:	b.ne	4d60 <omp_target_memcpy+0x230>  // b.any
    4c60:	ldr	w0, [x20, #12]
    4c64:	mov	x3, x23
    4c68:	ldr	x4, [x20, #128]
    4c6c:	add	x2, x22, x25
    4c70:	add	x1, x21, x24
    4c74:	blr	x4
    4c78:	and	w20, w0, #0xff
    4c7c:	ldxr	w0, [x19]
    4c80:	stlxr	w1, wzr, [x19]
    4c84:	cbnz	w1, 4c7c <omp_target_memcpy+0x14c>
    4c88:	tbz	w0, #31, 4c14 <omp_target_memcpy+0xe4>
    4c8c:	b	4d44 <omp_target_memcpy+0x214>
    4c90:	cmn	w19, #0x2
    4c94:	b.eq	4bc8 <omp_target_memcpy+0x98>  // b.none
    4c98:	tbz	w19, #31, 4ba0 <omp_target_memcpy+0x70>
    4c9c:	b	4c18 <omp_target_memcpy+0xe8>
    4ca0:	add	x20, x19, #0xa8
    4ca4:	mov	w0, #0x1                   	// #1
    4ca8:	ldaxr	w1, [x20]
    4cac:	cbnz	w1, 4cb8 <omp_target_memcpy+0x188>
    4cb0:	stxr	w2, w0, [x20]
    4cb4:	cbnz	w2, 4ca8 <omp_target_memcpy+0x178>
    4cb8:	cmp	w1, #0x0
    4cbc:	b.ne	4d54 <omp_target_memcpy+0x224>  // b.any
    4cc0:	ldr	w0, [x19, #12]
    4cc4:	mov	x3, x23
    4cc8:	ldr	x4, [x19, #112]
    4ccc:	add	x2, x22, x25
    4cd0:	add	x1, x21, x24
    4cd4:	blr	x4
    4cd8:	and	w19, w0, #0xff
    4cdc:	ldxr	w0, [x20]
    4ce0:	stlxr	w1, wzr, [x20]
    4ce4:	cbnz	w1, 4cdc <omp_target_memcpy+0x1ac>
    4ce8:	tbz	w0, #31, 4cf8 <omp_target_memcpy+0x1c8>
    4cec:	mov	x0, x20
    4cf0:	bl	0 <gomp_mutex_unlock_slow>
    4cf4:	nop
    4cf8:	cbz	w19, 4c18 <omp_target_memcpy+0xe8>
    4cfc:	mov	w0, #0x0                   	// #0
    4d00:	ldp	x19, x20, [sp, #16]
    4d04:	ldp	x21, x22, [sp, #32]
    4d08:	ldp	x23, x24, [sp, #48]
    4d0c:	ldr	x25, [sp, #64]
    4d10:	ldp	x29, x30, [sp], #80
    4d14:	ret
    4d18:	add	x1, x22, x25
    4d1c:	mov	x2, x23
    4d20:	add	x0, x21, x24
    4d24:	bl	0 <memcpy>
    4d28:	mov	w0, #0x0                   	// #0
    4d2c:	ldp	x19, x20, [sp, #16]
    4d30:	ldp	x21, x22, [sp, #32]
    4d34:	ldp	x23, x24, [sp, #48]
    4d38:	ldr	x25, [sp, #64]
    4d3c:	ldp	x29, x30, [sp], #80
    4d40:	ret
    4d44:	mov	x0, x19
    4d48:	bl	0 <gomp_mutex_unlock_slow>
    4d4c:	cbz	w20, 4c18 <omp_target_memcpy+0xe8>
    4d50:	b	4cfc <omp_target_memcpy+0x1cc>
    4d54:	mov	x0, x20
    4d58:	bl	0 <gomp_mutex_lock_slow>
    4d5c:	b	4cc0 <omp_target_memcpy+0x190>
    4d60:	mov	x0, x19
    4d64:	bl	0 <gomp_mutex_lock_slow>
    4d68:	b	4c60 <omp_target_memcpy+0x130>
    4d6c:	mov	x0, x19
    4d70:	bl	0 <gomp_mutex_lock_slow>
    4d74:	b	4be8 <omp_target_memcpy+0xb8>

0000000000004d78 <omp_target_memcpy_rect>:
    4d78:	sub	sp, sp, #0x90
    4d7c:	stp	x29, x30, [sp, #32]
    4d80:	add	x29, sp, #0x20
    4d84:	stp	x19, x20, [sp, #48]
    4d88:	mov	x19, x0
    4d8c:	mov	x20, x1
    4d90:	stp	x21, x22, [sp, #64]
    4d94:	orr	x1, x0, x1
    4d98:	ldr	w22, [sp, #160]
    4d9c:	stp	x27, x28, [sp, #112]
    4da0:	mov	x28, x2
    4da4:	ldr	w0, [sp, #152]
    4da8:	ldr	x2, [sp, #144]
    4dac:	cbz	x1, 4eb0 <omp_target_memcpy_rect+0x138>
    4db0:	stp	x23, x24, [sp, #80]
    4db4:	mov	w27, w3
    4db8:	mov	x24, x6
    4dbc:	stp	x25, x26, [sp, #96]
    4dc0:	mov	x23, x7
    4dc4:	mov	x26, x4
    4dc8:	mov	x25, x5
    4dcc:	cmn	w0, #0x2
    4dd0:	b.eq	4e00 <omp_target_memcpy_rect+0x88>  // b.none
    4dd4:	tbnz	w0, #31, 4e88 <omp_target_memcpy_rect+0x110>
    4dd8:	str	x2, [sp, #128]
    4ddc:	bl	3668 <resolve_device>
    4de0:	mov	x21, x0
    4de4:	cbz	x0, 4e88 <omp_target_memcpy_rect+0x110>
    4de8:	ldr	w0, [x0, #8]
    4dec:	mov	w1, #0x5                   	// #5
    4df0:	ldr	x2, [sp, #128]
    4df4:	and	w0, w0, w1
    4df8:	cmp	w0, #0x4
    4dfc:	b.eq	4f68 <omp_target_memcpy_rect+0x1f0>  // b.none
    4e00:	cmn	w22, #0x2
    4e04:	mov	x21, #0x0                   	// #0
    4e08:	b.eq	4e40 <omp_target_memcpy_rect+0xc8>  // b.none
    4e0c:	str	x2, [sp, #128]
    4e10:	tbnz	w22, #31, 4e88 <omp_target_memcpy_rect+0x110>
    4e14:	mov	w0, w22
    4e18:	bl	3668 <resolve_device>
    4e1c:	mov	x22, x0
    4e20:	cbz	x0, 4e88 <omp_target_memcpy_rect+0x110>
    4e24:	ldr	w0, [x0, #8]
    4e28:	mov	w1, #0x5                   	// #5
    4e2c:	ldr	x2, [sp, #128]
    4e30:	and	w0, w0, w1
    4e34:	cmp	w0, #0x4
    4e38:	b.eq	4ed0 <omp_target_memcpy_rect+0x158>  // b.none
    4e3c:	cbnz	x21, 4f70 <omp_target_memcpy_rect+0x1f8>
    4e40:	mov	x7, x23
    4e44:	mov	x6, x24
    4e48:	mov	x5, x25
    4e4c:	mov	x4, x26
    4e50:	mov	w3, w27
    4e54:	mov	x1, x20
    4e58:	mov	x0, x19
    4e5c:	stp	x2, xzr, [sp, #144]
    4e60:	mov	x2, x28
    4e64:	ldp	x29, x30, [sp, #32]
    4e68:	str	xzr, [sp, #160]
    4e6c:	ldp	x19, x20, [sp, #48]
    4e70:	ldp	x21, x22, [sp, #64]
    4e74:	ldp	x23, x24, [sp, #80]
    4e78:	ldp	x25, x26, [sp, #96]
    4e7c:	ldp	x27, x28, [sp, #112]
    4e80:	add	sp, sp, #0x90
    4e84:	b	0 <omp_target_memcpy_rect_worker>
    4e88:	ldp	x23, x24, [sp, #80]
    4e8c:	mov	w19, #0x16                  	// #22
    4e90:	ldp	x25, x26, [sp, #96]
    4e94:	mov	w0, w19
    4e98:	ldp	x29, x30, [sp, #32]
    4e9c:	ldp	x19, x20, [sp, #48]
    4ea0:	ldp	x21, x22, [sp, #64]
    4ea4:	ldp	x27, x28, [sp, #112]
    4ea8:	add	sp, sp, #0x90
    4eac:	ret
    4eb0:	mov	w19, #0x7fffffff            	// #2147483647
    4eb4:	mov	w0, w19
    4eb8:	ldp	x29, x30, [sp, #32]
    4ebc:	ldp	x19, x20, [sp, #48]
    4ec0:	ldp	x21, x22, [sp, #64]
    4ec4:	ldp	x27, x28, [sp, #112]
    4ec8:	add	sp, sp, #0x90
    4ecc:	ret
    4ed0:	cmp	x21, #0x0
    4ed4:	add	x8, x22, #0xa8
    4ed8:	ccmp	x22, x21, #0x4, ne  // ne = any
    4edc:	mov	w0, #0x1                   	// #1
    4ee0:	b.ne	4e88 <omp_target_memcpy_rect+0x110>  // b.any
    4ee4:	ldaxr	w1, [x8]
    4ee8:	cbnz	w1, 4ef4 <omp_target_memcpy_rect+0x17c>
    4eec:	stxr	w3, w0, [x8]
    4ef0:	cbnz	w3, 4ee4 <omp_target_memcpy_rect+0x16c>
    4ef4:	cmp	w1, #0x0
    4ef8:	b.ne	4ff8 <omp_target_memcpy_rect+0x280>  // b.any
    4efc:	stp	x2, x21, [sp]
    4f00:	mov	x0, x19
    4f04:	mov	x7, x23
    4f08:	str	x22, [sp, #16]
    4f0c:	mov	x6, x24
    4f10:	mov	x5, x25
    4f14:	mov	x4, x26
    4f18:	mov	w3, w27
    4f1c:	mov	x1, x20
    4f20:	mov	x2, x28
    4f24:	str	x8, [sp, #128]
    4f28:	bl	0 <omp_target_memcpy_rect_worker>
    4f2c:	mov	w19, w0
    4f30:	ldr	x8, [sp, #128]
    4f34:	ldxr	w0, [x8]
    4f38:	stlxr	w1, wzr, [x8]
    4f3c:	cbnz	w1, 4f34 <omp_target_memcpy_rect+0x1bc>
    4f40:	tbnz	w0, #31, 4fe4 <omp_target_memcpy_rect+0x26c>
    4f44:	mov	w0, w19
    4f48:	ldp	x29, x30, [sp, #32]
    4f4c:	ldp	x19, x20, [sp, #48]
    4f50:	ldp	x21, x22, [sp, #64]
    4f54:	ldp	x23, x24, [sp, #80]
    4f58:	ldp	x25, x26, [sp, #96]
    4f5c:	ldp	x27, x28, [sp, #112]
    4f60:	add	sp, sp, #0x90
    4f64:	ret
    4f68:	cmn	w22, #0x2
    4f6c:	b.ne	4e0c <omp_target_memcpy_rect+0x94>  // b.any
    4f70:	add	x22, x21, #0xa8
    4f74:	mov	w0, #0x1                   	// #1
    4f78:	ldaxr	w1, [x22]
    4f7c:	cbnz	w1, 4f88 <omp_target_memcpy_rect+0x210>
    4f80:	stxr	w3, w0, [x22]
    4f84:	cbnz	w3, 4f78 <omp_target_memcpy_rect+0x200>
    4f88:	cmp	w1, #0x0
    4f8c:	b.ne	500c <omp_target_memcpy_rect+0x294>  // b.any
    4f90:	stp	x2, x21, [sp]
    4f94:	mov	x0, x19
    4f98:	mov	x7, x23
    4f9c:	str	xzr, [sp, #16]
    4fa0:	mov	x6, x24
    4fa4:	mov	x5, x25
    4fa8:	mov	x4, x26
    4fac:	mov	w3, w27
    4fb0:	mov	x1, x20
    4fb4:	mov	x2, x28
    4fb8:	bl	0 <omp_target_memcpy_rect_worker>
    4fbc:	mov	w19, w0
    4fc0:	ldxr	w0, [x22]
    4fc4:	stlxr	w1, wzr, [x22]
    4fc8:	cbnz	w1, 4fc0 <omp_target_memcpy_rect+0x248>
    4fcc:	tbz	w0, #31, 4f44 <omp_target_memcpy_rect+0x1cc>
    4fd0:	mov	x0, x22
    4fd4:	bl	0 <gomp_mutex_unlock_slow>
    4fd8:	ldp	x23, x24, [sp, #80]
    4fdc:	ldp	x25, x26, [sp, #96]
    4fe0:	b	4e94 <omp_target_memcpy_rect+0x11c>
    4fe4:	mov	x0, x8
    4fe8:	bl	0 <gomp_mutex_unlock_slow>
    4fec:	ldp	x23, x24, [sp, #80]
    4ff0:	ldp	x25, x26, [sp, #96]
    4ff4:	b	4e94 <omp_target_memcpy_rect+0x11c>
    4ff8:	mov	x0, x8
    4ffc:	stp	x8, x2, [sp, #128]
    5000:	bl	0 <gomp_mutex_lock_slow>
    5004:	ldp	x8, x2, [sp, #128]
    5008:	b	4efc <omp_target_memcpy_rect+0x184>
    500c:	mov	x0, x22
    5010:	str	x2, [sp, #128]
    5014:	bl	0 <gomp_mutex_lock_slow>
    5018:	ldr	x2, [sp, #128]
    501c:	b	4f90 <omp_target_memcpy_rect+0x218>

0000000000005020 <omp_target_associate_ptr>:
    5020:	stp	x29, x30, [sp, #-128]!
    5024:	mov	x29, sp
    5028:	stp	x19, x20, [sp, #16]
    502c:	tbnz	w4, #31, 50fc <omp_target_associate_ptr+0xdc>
    5030:	mov	x19, x0
    5034:	mov	x20, x2
    5038:	mov	w0, w4
    503c:	stp	x21, x22, [sp, #32]
    5040:	mov	x22, x3
    5044:	stp	x23, x24, [sp, #48]
    5048:	mov	x23, x1
    504c:	bl	3668 <resolve_device>
    5050:	mov	x21, x0
    5054:	cbz	x0, 50f4 <omp_target_associate_ptr+0xd4>
    5058:	ldr	w0, [x0, #8]
    505c:	mov	w1, #0x5                   	// #5
    5060:	and	w0, w0, w1
    5064:	cmp	w0, #0x4
    5068:	b.ne	50f4 <omp_target_associate_ptr+0xd4>  // b.any
    506c:	add	x24, x21, #0xa8
    5070:	mov	w0, #0x1                   	// #1
    5074:	ldaxr	w1, [x24]
    5078:	cbnz	w1, 5084 <omp_target_associate_ptr+0x64>
    507c:	stxr	w2, w0, [x24]
    5080:	cbnz	w2, 5074 <omp_target_associate_ptr+0x54>
    5084:	cmp	w1, #0x0
    5088:	b.ne	51ec <omp_target_associate_ptr+0x1cc>  // b.any
    508c:	add	x2, x19, x20
    5090:	stp	x19, x2, [sp, #72]
    5094:	cmp	x19, x2
    5098:	add	x22, x23, x22
    509c:	add	x20, x21, #0xa0
    50a0:	b.eq	5110 <omp_target_associate_ptr+0xf0>  // b.none
    50a4:	add	x1, sp, #0x48
    50a8:	mov	x0, x20
    50ac:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    50b0:	cbz	x0, 5184 <omp_target_associate_ptr+0x164>
    50b4:	ldp	x1, x2, [x0, #16]
    50b8:	mov	w19, #0x16                  	// #22
    50bc:	ldr	x1, [x1, #16]
    50c0:	add	x1, x1, x2
    50c4:	cmp	x1, x22
    50c8:	b.eq	5160 <omp_target_associate_ptr+0x140>  // b.none
    50cc:	ldxr	w0, [x24]
    50d0:	stlxr	w1, wzr, [x24]
    50d4:	cbnz	w1, 50cc <omp_target_associate_ptr+0xac>
    50d8:	tbnz	w0, #31, 51d8 <omp_target_associate_ptr+0x1b8>
    50dc:	mov	w0, w19
    50e0:	ldp	x19, x20, [sp, #16]
    50e4:	ldp	x21, x22, [sp, #32]
    50e8:	ldp	x23, x24, [sp, #48]
    50ec:	ldp	x29, x30, [sp], #128
    50f0:	ret
    50f4:	ldp	x21, x22, [sp, #32]
    50f8:	ldp	x23, x24, [sp, #48]
    50fc:	mov	w19, #0x16                  	// #22
    5100:	mov	w0, w19
    5104:	ldp	x19, x20, [sp, #16]
    5108:	ldp	x29, x30, [sp], #128
    510c:	ret
    5110:	add	x1, sp, #0x48
    5114:	add	x19, x19, #0x1
    5118:	mov	x0, x20
    511c:	str	x19, [sp, #80]
    5120:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5124:	ldr	x1, [sp, #80]
    5128:	sub	x1, x1, #0x1
    512c:	str	x1, [sp, #80]
    5130:	cbnz	x0, 50b4 <omp_target_associate_ptr+0x94>
    5134:	ldr	x2, [sp, #72]
    5138:	add	x1, sp, #0x48
    513c:	mov	x0, x20
    5140:	sub	x2, x2, #0x1
    5144:	str	x2, [sp, #72]
    5148:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    514c:	ldr	x1, [sp, #72]
    5150:	add	x1, x1, #0x1
    5154:	str	x1, [sp, #72]
    5158:	cbnz	x0, 50b4 <omp_target_associate_ptr+0x94>
    515c:	b	50a4 <omp_target_associate_ptr+0x84>
    5160:	ldr	x2, [x0]
    5164:	ldr	x1, [sp, #72]
    5168:	cmp	x2, x1
    516c:	b.hi	50cc <omp_target_associate_ptr+0xac>  // b.pmore
    5170:	ldr	x0, [x0, #8]
    5174:	ldr	x1, [sp, #80]
    5178:	cmp	x0, x1
    517c:	csel	w19, w19, wzr, cc  // cc = lo, ul, last
    5180:	b	50cc <omp_target_associate_ptr+0xac>
    5184:	mov	x0, #0x40                  	// #64
    5188:	bl	0 <gomp_malloc>
    518c:	mov	x23, x0
    5190:	mov	x0, #0x48                  	// #72
    5194:	bl	0 <gomp_malloc>
    5198:	mov	x1, x0
    519c:	ldp	x4, x3, [sp, #72]
    51a0:	mov	x5, #0x1                   	// #1
    51a4:	mov	x2, #0xffffffffffffffff    	// #-1
    51a8:	stp	x4, x3, [x1]
    51ac:	mov	x0, x20
    51b0:	stp	x5, x1, [x23]
    51b4:	mov	w19, #0x0                   	// #0
    51b8:	stp	x23, x22, [x1, #16]
    51bc:	stp	xzr, xzr, [x23, #16]
    51c0:	str	x2, [x1, #32]
    51c4:	stp	xzr, xzr, [x23, #32]
    51c8:	stp	xzr, x21, [x23, #48]
    51cc:	stp	xzr, xzr, [x1, #56]
    51d0:	bl	0 <splay_tree_prefix_splay_tree_insert>
    51d4:	b	50cc <omp_target_associate_ptr+0xac>
    51d8:	mov	x0, x24
    51dc:	bl	0 <gomp_mutex_unlock_slow>
    51e0:	ldp	x21, x22, [sp, #32]
    51e4:	ldp	x23, x24, [sp, #48]
    51e8:	b	5100 <omp_target_associate_ptr+0xe0>
    51ec:	mov	x0, x24
    51f0:	bl	0 <gomp_mutex_lock_slow>
    51f4:	b	508c <omp_target_associate_ptr+0x6c>

00000000000051f8 <omp_target_disassociate_ptr>:
    51f8:	stp	x29, x30, [sp, #-112]!
    51fc:	mov	x29, sp
    5200:	stp	x19, x20, [sp, #16]
    5204:	tbnz	w1, #31, 52ac <omp_target_disassociate_ptr+0xb4>
    5208:	mov	x20, x0
    520c:	mov	w0, w1
    5210:	bl	3668 <resolve_device>
    5214:	mov	x19, x0
    5218:	cbz	x0, 52ac <omp_target_disassociate_ptr+0xb4>
    521c:	ldr	w0, [x0, #8]
    5220:	tbz	w0, #2, 52ac <omp_target_disassociate_ptr+0xb4>
    5224:	str	x21, [sp, #32]
    5228:	add	x21, x19, #0xa8
    522c:	mov	w0, #0x1                   	// #1
    5230:	ldaxr	w1, [x21]
    5234:	cbnz	w1, 5240 <omp_target_disassociate_ptr+0x48>
    5238:	stxr	w2, w0, [x21]
    523c:	cbnz	w2, 5230 <omp_target_disassociate_ptr+0x38>
    5240:	cmp	w1, #0x0
    5244:	b.ne	5364 <omp_target_disassociate_ptr+0x16c>  // b.any
    5248:	add	x2, x20, #0x1
    524c:	add	x19, x19, #0xa0
    5250:	add	x1, sp, #0x38
    5254:	mov	x0, x19
    5258:	stp	x20, x2, [sp, #56]
    525c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5260:	ldr	x1, [sp, #64]
    5264:	mov	x20, x0
    5268:	sub	x1, x1, #0x1
    526c:	str	x1, [sp, #64]
    5270:	cbz	x0, 52c0 <omp_target_disassociate_ptr+0xc8>
    5274:	ldr	x0, [sp, #56]
    5278:	ldr	x1, [x20]
    527c:	cmp	x1, x0
    5280:	b.eq	5304 <omp_target_disassociate_ptr+0x10c>  // b.none
    5284:	mov	w19, #0x16                  	// #22
    5288:	ldxr	w0, [x21]
    528c:	stlxr	w1, wzr, [x21]
    5290:	cbnz	w1, 5288 <omp_target_disassociate_ptr+0x90>
    5294:	tbnz	w0, #31, 5354 <omp_target_disassociate_ptr+0x15c>
    5298:	mov	w0, w19
    529c:	ldp	x19, x20, [sp, #16]
    52a0:	ldr	x21, [sp, #32]
    52a4:	ldp	x29, x30, [sp], #112
    52a8:	ret
    52ac:	mov	w19, #0x16                  	// #22
    52b0:	mov	w0, w19
    52b4:	ldp	x19, x20, [sp, #16]
    52b8:	ldp	x29, x30, [sp], #112
    52bc:	ret
    52c0:	ldr	x2, [sp, #56]
    52c4:	add	x1, sp, #0x38
    52c8:	mov	x0, x19
    52cc:	sub	x2, x2, #0x1
    52d0:	str	x2, [sp, #56]
    52d4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    52d8:	mov	x20, x0
    52dc:	ldr	x1, [sp, #56]
    52e0:	add	x0, x1, #0x1
    52e4:	str	x0, [sp, #56]
    52e8:	cbnz	x20, 5278 <omp_target_disassociate_ptr+0x80>
    52ec:	add	x1, sp, #0x38
    52f0:	mov	x0, x19
    52f4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    52f8:	mov	x20, x0
    52fc:	cbz	x0, 5284 <omp_target_disassociate_ptr+0x8c>
    5300:	b	5274 <omp_target_disassociate_ptr+0x7c>
    5304:	ldr	x0, [x20, #32]
    5308:	cmn	x0, #0x1
    530c:	b.ne	5284 <omp_target_disassociate_ptr+0x8c>  // b.any
    5310:	ldr	x0, [x20, #16]
    5314:	ldr	x1, [x0, #16]
    5318:	cbnz	x1, 5284 <omp_target_disassociate_ptr+0x8c>
    531c:	ldr	x1, [x0, #32]
    5320:	cbnz	x1, 5284 <omp_target_disassociate_ptr+0x8c>
    5324:	ldr	x1, [x0]
    5328:	cmp	x1, #0x1
    532c:	b.ne	5284 <omp_target_disassociate_ptr+0x8c>  // b.any
    5330:	ldr	x0, [x0, #48]
    5334:	cbnz	x0, 5284 <omp_target_disassociate_ptr+0x8c>
    5338:	mov	x0, x19
    533c:	mov	x1, x20
    5340:	bl	0 <splay_tree_prefix_splay_tree_remove>
    5344:	mov	w19, #0x0                   	// #0
    5348:	ldr	x0, [x20, #16]
    534c:	bl	430 <gomp_unmap_tgt>
    5350:	b	5288 <omp_target_disassociate_ptr+0x90>
    5354:	mov	x0, x21
    5358:	bl	0 <gomp_mutex_unlock_slow>
    535c:	ldr	x21, [sp, #32]
    5360:	b	52b0 <omp_target_disassociate_ptr+0xb8>
    5364:	mov	x0, x21
    5368:	bl	0 <gomp_mutex_lock_slow>
    536c:	b	5248 <omp_target_disassociate_ptr+0x50>

0000000000005370 <gomp_ialias_omp_pause_resource>:
    5370:	cmn	w1, #0x2
    5374:	b.eq	53bc <gomp_ialias_omp_pause_resource+0x4c>  // b.none
    5378:	stp	x29, x30, [sp, #-32]!
    537c:	mov	x29, sp
    5380:	stp	x19, x20, [sp, #16]
    5384:	mov	w19, w1
    5388:	tbnz	w1, #31, 53c0 <gomp_ialias_omp_pause_resource+0x50>
    538c:	adrp	x20, 0 <omp_target_memcpy_rect_worker>
    5390:	add	x20, x20, #0x0
    5394:	add	x0, x20, #0x14
    5398:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    539c:	add	x1, x1, #0x0
    53a0:	bl	0 <pthread_once>
    53a4:	ldr	w0, [x20, #4]
    53a8:	cmp	w19, w0
    53ac:	csetm	w0, ge  // ge = tcont
    53b0:	ldp	x19, x20, [sp, #16]
    53b4:	ldp	x29, x30, [sp], #32
    53b8:	ret
    53bc:	b	0 <gomp_pause_host>
    53c0:	mov	w0, #0xffffffff            	// #-1
    53c4:	b	53b0 <gomp_ialias_omp_pause_resource+0x40>

00000000000053c8 <gomp_ialias_omp_pause_resource_all>:
    53c8:	stp	x29, x30, [sp, #-16]!
    53cc:	mov	x29, sp
    53d0:	bl	0 <gomp_pause_host>
    53d4:	cmp	w0, #0x0
    53d8:	csetm	w0, ne  // ne = any
    53dc:	ldp	x29, x30, [sp], #16
    53e0:	ret

splay-tree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <splay_tree_foreach_internal>:
   0:	cbz	x0, 54 <splay_tree_foreach_internal+0x54>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x2
  18:	str	x21, [sp, #32]
  1c:	mov	x21, x1
  20:	mov	x0, x19
  24:	mov	x1, x20
  28:	blr	x21
  2c:	ldr	x0, [x19, #56]
  30:	mov	x2, x20
  34:	mov	x1, x21
  38:	bl	0 <splay_tree_foreach_internal>
  3c:	ldr	x19, [x19, #64]
  40:	cbnz	x19, 20 <splay_tree_foreach_internal+0x20>
  44:	ldp	x19, x20, [sp, #16]
  48:	ldr	x21, [sp, #32]
  4c:	ldp	x29, x30, [sp], #48
  50:	ret
  54:	ret

0000000000000058 <splay_tree_splay.part.0>:
  58:	ldr	x2, [x0]
  5c:	ldp	x4, x3, [x1]
  60:	ldr	x5, [x2]
  64:	cmp	x4, x3
  68:	b.eq	cc <splay_tree_splay.part.0+0x74>  // b.none
  6c:	cmp	x3, x5
  70:	b.ls	e0 <splay_tree_splay.part.0+0x88>  // b.plast
  74:	ldr	x1, [x2, #8]
  78:	cmp	x4, x1
  7c:	b.cs	84 <splay_tree_splay.part.0+0x2c>  // b.hs, b.nlast
  80:	ret
  84:	ldr	x1, [x2, #64]
  88:	mov	w7, #0x1                   	// #1
  8c:	cbz	x1, 80 <splay_tree_splay.part.0+0x28>
  90:	cmp	x4, x3
  94:	ldr	x6, [x1]
  98:	b.eq	ec <splay_tree_splay.part.0+0x94>  // b.none
  9c:	cmp	x3, x6
  a0:	b.ls	100 <splay_tree_splay.part.0+0xa8>  // b.plast
  a4:	ldr	x6, [x1, #8]
  a8:	cmp	x4, x6
  ac:	b.cs	154 <splay_tree_splay.part.0+0xfc>  // b.hs, b.nlast
  b0:	cmn	w7, #0x1
  b4:	b.eq	190 <splay_tree_splay.part.0+0x138>  // b.none
  b8:	ldr	x3, [x1, #56]
  bc:	str	x2, [x1, #56]
  c0:	str	x3, [x2, #64]
  c4:	str	x1, [x0]
  c8:	ret
  cc:	ldr	x1, [x2, #8]
  d0:	cmp	x1, x5
  d4:	b.eq	80 <splay_tree_splay.part.0+0x28>  // b.none
  d8:	cmp	x3, x5
  dc:	b.hi	74 <splay_tree_splay.part.0+0x1c>  // b.pmore
  e0:	mov	w7, #0xffffffff            	// #-1
  e4:	ldr	x1, [x2, #56]
  e8:	b	8c <splay_tree_splay.part.0+0x34>
  ec:	ldr	x8, [x1, #8]
  f0:	cmp	x6, x8
  f4:	b.eq	b0 <splay_tree_splay.part.0+0x58>  // b.none
  f8:	cmp	x3, x6
  fc:	b.hi	a4 <splay_tree_splay.part.0+0x4c>  // b.pmore
 100:	ldr	x6, [x1, #56]
 104:	cbz	x6, b0 <splay_tree_splay.part.0+0x58>
 108:	cmn	w7, #0x1
 10c:	b.ne	13c <splay_tree_splay.part.0+0xe4>  // b.any
 110:	ldr	x5, [x6, #64]
 114:	str	x1, [x6, #64]
 118:	str	x5, [x1, #56]
 11c:	ldr	x5, [x6]
 120:	str	x6, [x2, #56]
 124:	ldr	x1, [x6, #64]
 128:	str	x2, [x6, #64]
 12c:	str	x1, [x2, #56]
 130:	mov	x2, x6
 134:	str	x6, [x0]
 138:	b	64 <splay_tree_splay.part.0+0xc>
 13c:	cmp	w7, #0x0
 140:	b.le	64 <splay_tree_splay.part.0+0xc>
 144:	ldr	x5, [x6, #64]
 148:	str	x1, [x6, #64]
 14c:	str	x5, [x1, #56]
 150:	b	170 <splay_tree_splay.part.0+0x118>
 154:	ldr	x6, [x1, #64]
 158:	cbz	x6, b0 <splay_tree_splay.part.0+0x58>
 15c:	cmp	w7, #0x1
 160:	b.ne	1a4 <splay_tree_splay.part.0+0x14c>  // b.any
 164:	ldr	x5, [x6, #56]
 168:	str	x1, [x6, #56]
 16c:	str	x5, [x1, #64]
 170:	ldr	x5, [x6]
 174:	str	x6, [x2, #64]
 178:	ldr	x1, [x6, #56]
 17c:	str	x2, [x6, #56]
 180:	str	x1, [x2, #64]
 184:	mov	x2, x6
 188:	str	x6, [x0]
 18c:	b	64 <splay_tree_splay.part.0+0xc>
 190:	ldr	x3, [x1, #64]
 194:	str	x2, [x1, #64]
 198:	str	x3, [x2, #56]
 19c:	str	x1, [x0]
 1a0:	ret
 1a4:	tbz	w7, #31, 64 <splay_tree_splay.part.0+0xc>
 1a8:	ldr	x5, [x6, #56]
 1ac:	str	x1, [x6, #56]
 1b0:	str	x5, [x1, #64]
 1b4:	b	11c <splay_tree_splay.part.0+0xc4>

00000000000001b8 <splay_tree_prefix_splay_tree_insert>:
 1b8:	ldr	x2, [x0]
 1bc:	mov	x10, x0
 1c0:	mov	x9, x1
 1c4:	cbz	x2, 260 <splay_tree_prefix_splay_tree_insert+0xa8>
 1c8:	stp	x29, x30, [sp, #-16]!
 1cc:	mov	x29, sp
 1d0:	bl	58 <splay_tree_splay.part.0>
 1d4:	ldr	x0, [x0]
 1d8:	cbz	x0, 250 <splay_tree_prefix_splay_tree_insert+0x98>
 1dc:	ldp	x2, x1, [x0]
 1e0:	ldr	x3, [x9]
 1e4:	cmp	x2, x1
 1e8:	b.eq	20c <splay_tree_prefix_splay_tree_insert+0x54>  // b.none
 1ec:	cmp	x1, x3
 1f0:	b.ls	220 <splay_tree_prefix_splay_tree_insert+0x68>  // b.plast
 1f4:	ldr	x1, [x9, #8]
 1f8:	cmp	x2, x1
 1fc:	b.cs	238 <splay_tree_prefix_splay_tree_insert+0x80>  // b.hs, b.nlast
 200:	adrp	x0, 0 <splay_tree_foreach_internal>
 204:	add	x0, x0, #0x0
 208:	bl	0 <gomp_fatal>
 20c:	ldr	x4, [x9, #8]
 210:	cmp	x3, x4
 214:	b.eq	200 <splay_tree_prefix_splay_tree_insert+0x48>  // b.none
 218:	cmp	x1, x3
 21c:	b.hi	1f4 <splay_tree_prefix_splay_tree_insert+0x3c>  // b.pmore
 220:	ldr	x1, [x0, #64]
 224:	stp	x0, x1, [x9, #56]
 228:	str	xzr, [x0, #64]
 22c:	str	x9, [x10]
 230:	ldp	x29, x30, [sp], #16
 234:	ret
 238:	ldr	x1, [x0, #56]
 23c:	stp	x1, x0, [x9, #56]
 240:	str	xzr, [x0, #56]
 244:	str	x9, [x10]
 248:	ldp	x29, x30, [sp], #16
 24c:	ret
 250:	stp	xzr, xzr, [x9, #56]
 254:	str	x9, [x10]
 258:	ldp	x29, x30, [sp], #16
 25c:	ret
 260:	stp	xzr, xzr, [x1, #56]
 264:	str	x1, [x10]
 268:	ret
 26c:	nop

0000000000000270 <splay_tree_prefix_splay_tree_remove>:
 270:	ldr	x2, [x0]
 274:	cbz	x2, 2f8 <splay_tree_prefix_splay_tree_remove+0x88>
 278:	mov	x9, x0
 27c:	mov	x10, x1
 280:	stp	x29, x30, [sp, #-16]!
 284:	mov	x29, sp
 288:	bl	58 <splay_tree_splay.part.0>
 28c:	ldr	x0, [x0]
 290:	cbz	x0, 2d8 <splay_tree_prefix_splay_tree_remove+0x68>
 294:	ldp	x2, x1, [x0]
 298:	ldr	x3, [x10]
 29c:	cmp	x2, x1
 2a0:	b.eq	2e0 <splay_tree_prefix_splay_tree_remove+0x70>  // b.none
 2a4:	cmp	x1, x3
 2a8:	b.ls	2d8 <splay_tree_prefix_splay_tree_remove+0x68>  // b.plast
 2ac:	ldr	x1, [x10, #8]
 2b0:	cmp	x2, x1
 2b4:	b.cs	2d8 <splay_tree_prefix_splay_tree_remove+0x68>  // b.hs, b.nlast
 2b8:	ldp	x1, x2, [x0, #56]
 2bc:	cbz	x1, 2fc <splay_tree_prefix_splay_tree_remove+0x8c>
 2c0:	str	x1, [x9]
 2c4:	cbz	x2, 2d8 <splay_tree_prefix_splay_tree_remove+0x68>
 2c8:	mov	x0, x1
 2cc:	ldr	x1, [x1, #64]
 2d0:	cbnz	x1, 2c8 <splay_tree_prefix_splay_tree_remove+0x58>
 2d4:	str	x2, [x0, #64]
 2d8:	ldp	x29, x30, [sp], #16
 2dc:	ret
 2e0:	ldr	x4, [x10, #8]
 2e4:	cmp	x3, x4
 2e8:	b.eq	2b8 <splay_tree_prefix_splay_tree_remove+0x48>  // b.none
 2ec:	cmp	x1, x3
 2f0:	b.hi	2ac <splay_tree_prefix_splay_tree_remove+0x3c>  // b.pmore
 2f4:	b	2d8 <splay_tree_prefix_splay_tree_remove+0x68>
 2f8:	ret
 2fc:	str	x2, [x9]
 300:	b	2d8 <splay_tree_prefix_splay_tree_remove+0x68>
 304:	nop

0000000000000308 <splay_tree_prefix_splay_tree_lookup>:
 308:	ldr	x2, [x0]
 30c:	cbz	x2, 370 <splay_tree_prefix_splay_tree_lookup+0x68>
 310:	mov	x10, x1
 314:	stp	x29, x30, [sp, #-16]!
 318:	mov	x29, sp
 31c:	bl	58 <splay_tree_splay.part.0>
 320:	ldr	x0, [x0]
 324:	cbz	x0, 354 <splay_tree_prefix_splay_tree_lookup+0x4c>
 328:	ldp	x2, x1, [x0]
 32c:	ldr	x3, [x10]
 330:	cmp	x2, x1
 334:	b.eq	360 <splay_tree_prefix_splay_tree_lookup+0x58>  // b.none
 338:	cmp	x1, x3
 33c:	b.ls	354 <splay_tree_prefix_splay_tree_lookup+0x4c>  // b.plast
 340:	ldr	x1, [x10, #8]
 344:	cmp	x2, x1
 348:	b.cs	354 <splay_tree_prefix_splay_tree_lookup+0x4c>  // b.hs, b.nlast
 34c:	ldp	x29, x30, [sp], #16
 350:	ret
 354:	mov	x0, #0x0                   	// #0
 358:	ldp	x29, x30, [sp], #16
 35c:	ret
 360:	ldr	x4, [x10, #8]
 364:	cmp	x3, x4
 368:	b.ne	338 <splay_tree_prefix_splay_tree_lookup+0x30>  // b.any
 36c:	b	34c <splay_tree_prefix_splay_tree_lookup+0x44>
 370:	mov	x0, #0x0                   	// #0
 374:	ret

0000000000000378 <splay_tree_prefix_splay_tree_foreach>:
 378:	ldr	x0, [x0]
 37c:	b	0 <splay_tree_foreach_internal>

libgomp-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_malloc>:
   0:	b	0 <gomp_malloc>
   4:	nop

0000000000000008 <GOMP_PLUGIN_malloc_cleared>:
   8:	b	0 <gomp_malloc_cleared>
   c:	nop

0000000000000010 <GOMP_PLUGIN_realloc>:
  10:	b	0 <gomp_realloc>
  14:	nop

0000000000000018 <GOMP_PLUGIN_debug>:
  18:	stp	x29, x30, [sp, #-256]!
  1c:	adrp	x8, 0 <gomp_debug_var>
  20:	mov	w10, #0xffffffd0            	// #-48
  24:	mov	x29, sp
  28:	ldr	w8, [x8]
  2c:	add	x11, sp, #0xd0
  30:	mov	w9, #0xffffff80            	// #-128
  34:	str	x11, [sp, #64]
  38:	stp	w10, w9, [sp, #72]
  3c:	str	q0, [sp, #80]
  40:	str	q1, [sp, #96]
  44:	str	q2, [sp, #112]
  48:	str	q3, [sp, #128]
  4c:	str	q4, [sp, #144]
  50:	str	q5, [sp, #160]
  54:	str	q6, [sp, #176]
  58:	str	q7, [sp, #192]
  5c:	stp	x2, x3, [sp, #208]
  60:	add	x2, sp, #0x100
  64:	stp	x2, x2, [sp, #48]
  68:	stp	x4, x5, [sp, #224]
  6c:	stp	x6, x7, [sp, #240]
  70:	cbnz	w8, 7c <GOMP_PLUGIN_debug+0x64>
  74:	ldp	x29, x30, [sp], #256
  78:	ret
  7c:	ldp	x6, x7, [sp, #48]
  80:	add	x2, sp, #0x10
  84:	ldp	x4, x5, [sp, #64]
  88:	stp	x6, x7, [sp, #16]
  8c:	stp	x4, x5, [sp, #32]
  90:	bl	0 <gomp_vdebug>
  94:	ldp	x29, x30, [sp], #256
  98:	ret
  9c:	nop

00000000000000a0 <GOMP_PLUGIN_error>:
  a0:	stp	x29, x30, [sp, #-272]!
  a4:	mov	w9, #0xffffffc8            	// #-56
  a8:	mov	w8, #0xffffff80            	// #-128
  ac:	mov	x29, sp
  b0:	add	x10, sp, #0xd0
  b4:	add	x11, sp, #0x110
  b8:	stp	x11, x11, [sp, #48]
  bc:	str	x10, [sp, #64]
  c0:	stp	w9, w8, [sp, #72]
  c4:	ldp	x10, x11, [sp, #48]
  c8:	stp	x10, x11, [sp, #16]
  cc:	ldp	x8, x9, [sp, #64]
  d0:	stp	x8, x9, [sp, #32]
  d4:	str	q0, [sp, #80]
  d8:	str	q1, [sp, #96]
  dc:	str	q2, [sp, #112]
  e0:	str	q3, [sp, #128]
  e4:	str	q4, [sp, #144]
  e8:	str	q5, [sp, #160]
  ec:	str	q6, [sp, #176]
  f0:	str	q7, [sp, #192]
  f4:	stp	x1, x2, [sp, #216]
  f8:	add	x1, sp, #0x10
  fc:	stp	x3, x4, [sp, #232]
 100:	stp	x5, x6, [sp, #248]
 104:	str	x7, [sp, #264]
 108:	bl	0 <gomp_verror>
 10c:	ldp	x29, x30, [sp], #272
 110:	ret
 114:	nop

0000000000000118 <GOMP_PLUGIN_fatal>:
 118:	stp	x29, x30, [sp, #-272]!
 11c:	mov	w9, #0xffffffc8            	// #-56
 120:	mov	w8, #0xffffff80            	// #-128
 124:	mov	x29, sp
 128:	add	x10, sp, #0xd0
 12c:	add	x11, sp, #0x110
 130:	stp	x11, x11, [sp, #48]
 134:	str	x10, [sp, #64]
 138:	stp	w9, w8, [sp, #72]
 13c:	ldp	x10, x11, [sp, #48]
 140:	stp	x10, x11, [sp, #16]
 144:	ldp	x8, x9, [sp, #64]
 148:	stp	x8, x9, [sp, #32]
 14c:	str	q0, [sp, #80]
 150:	str	q1, [sp, #96]
 154:	str	q2, [sp, #112]
 158:	str	q3, [sp, #128]
 15c:	str	q4, [sp, #144]
 160:	str	q5, [sp, #160]
 164:	str	q6, [sp, #176]
 168:	str	q7, [sp, #192]
 16c:	stp	x1, x2, [sp, #216]
 170:	add	x1, sp, #0x10
 174:	stp	x3, x4, [sp, #232]
 178:	stp	x5, x6, [sp, #248]
 17c:	str	x7, [sp, #264]
 180:	bl	0 <gomp_vfatal>

oacc-parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <goacc_wait>:
   0:	cbz	w1, f8 <goacc_wait+0xf8>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	w22, w0
  1c:	mov	w21, w1
  20:	b	6c <goacc_wait+0x6c>
  24:	add	x2, x1, #0xb
  28:	and	x2, x2, #0xfffffffffffffff8
  2c:	str	x2, [x20]
  30:	ldr	w19, [x1]
  34:	cmn	w19, #0x1
  38:	b.eq	a0 <goacc_wait+0xa0>  // b.none
  3c:	mov	w0, w19
  40:	bl	0 <acc_async_test>
  44:	cbnz	w0, 64 <goacc_wait+0x64>
  48:	cmn	w22, #0x2
  4c:	b.eq	c8 <goacc_wait+0xc8>  // b.none
  50:	cmp	w19, w22
  54:	b.eq	64 <goacc_wait+0x64>  // b.none
  58:	mov	w0, w19
  5c:	mov	w1, w22
  60:	bl	0 <acc_wait_async>
  64:	subs	w21, w21, #0x1
  68:	b.eq	d8 <goacc_wait+0xd8>  // b.none
  6c:	ldr	w2, [x20, #24]
  70:	ldr	x1, [x20]
  74:	tbz	w2, #31, 24 <goacc_wait+0x24>
  78:	add	w0, w2, #0x8
  7c:	str	w0, [x20, #24]
  80:	cmp	w0, #0x0
  84:	b.le	bc <goacc_wait+0xbc>
  88:	add	x0, x1, #0xb
  8c:	ldr	w19, [x1]
  90:	and	x0, x0, #0xfffffffffffffff8
  94:	str	x0, [x20]
  98:	cmn	w19, #0x1
  9c:	b.ne	3c <goacc_wait+0x3c>  // b.any
  a0:	cmn	w22, #0x2
  a4:	b.eq	e8 <goacc_wait+0xe8>  // b.none
  a8:	mov	w0, w22
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x29, x30, [sp], #48
  b8:	b	0 <acc_wait_all_async>
  bc:	ldr	x1, [x20, #8]
  c0:	add	x1, x1, w2, sxtw
  c4:	b	30 <goacc_wait+0x30>
  c8:	mov	w0, w19
  cc:	bl	0 <acc_wait>
  d0:	subs	w21, w21, #0x1
  d4:	b.ne	6c <goacc_wait+0x6c>  // b.any
  d8:	ldp	x19, x20, [sp, #16]
  dc:	ldp	x21, x22, [sp, #32]
  e0:	ldp	x29, x30, [sp], #48
  e4:	ret
  e8:	ldp	x19, x20, [sp, #16]
  ec:	ldp	x21, x22, [sp, #32]
  f0:	ldp	x29, x30, [sp], #48
  f4:	b	0 <acc_wait_all>
  f8:	ret
  fc:	nop

0000000000000100 <GOACC_parallel_keyed>:
 100:	stp	x29, x30, [sp, #-352]!
 104:	adrp	x8, 0 <gomp_debug_var>
 108:	mov	x29, sp
 10c:	ldr	w8, [x8]
 110:	stp	x19, x20, [sp, #16]
 114:	mvn	w19, w0
 118:	mov	x20, x5
 11c:	stp	x21, x22, [sp, #32]
 120:	mov	x22, x3
 124:	stp	x23, x24, [sp, #48]
 128:	mov	x23, x4
 12c:	stp	x25, x26, [sp, #64]
 130:	mov	x25, x1
 134:	mov	x26, x2
 138:	str	x27, [sp, #80]
 13c:	str	q0, [x29, #208]
 140:	str	q1, [x29, #224]
 144:	str	q2, [x29, #240]
 148:	str	q3, [x29, #256]
 14c:	str	q4, [x29, #272]
 150:	str	q5, [x29, #288]
 154:	str	q6, [x29, #304]
 158:	str	q7, [x29, #320]
 15c:	stp	x6, x7, [x29, #336]
 160:	cbnz	w8, 604 <GOACC_parallel_keyed+0x504>
 164:	bl	0 <goacc_lazy_initialize>
 168:	adrp	x0, 0 <goacc_tls_data>
 16c:	ldr	x0, [x0]
 170:	mrs	x3, tpidr_el0
 174:	sub	w5, w26, #0x1
 178:	mov	x2, #0x1                   	// #1
 17c:	mov	x1, #0x0                   	// #0
 180:	mov	x6, #0x8                   	// #8
 184:	ldr	x0, [x3, x0]
 188:	ldr	x24, [x0, #8]
 18c:	cbnz	x26, 1a4 <GOACC_parallel_keyed+0xa4>
 190:	b	1e0 <GOACC_parallel_keyed+0xe0>
 194:	add	x1, x1, #0x1
 198:	add	x2, x2, #0x1
 19c:	cmp	x26, x1
 1a0:	b.eq	1e0 <GOACC_parallel_keyed+0xe0>  // b.none
 1a4:	ldrh	w3, [x20, x1, lsl #1]
 1a8:	and	w0, w3, #0xff
 1ac:	cmp	w0, #0x8
 1b0:	b.ne	194 <GOACC_parallel_keyed+0x94>  // b.any
 1b4:	cmp	w5, w1
 1b8:	ldr	x0, [x23, x1, lsl #3]
 1bc:	b.gt	3f4 <GOACC_parallel_keyed+0x2f4>
 1c0:	cmp	x0, #0x8
 1c4:	b.eq	194 <GOACC_parallel_keyed+0x94>  // b.none
 1c8:	add	x0, x22, x1, lsl #3
 1cc:	str	xzr, [x0]
 1d0:	add	x1, x1, #0x1
 1d4:	add	x2, x2, #0x1
 1d8:	cmp	x26, x1
 1dc:	b.ne	1a4 <GOACC_parallel_keyed+0xa4>  // b.any
 1e0:	tbnz	w19, #0, 590 <GOACC_parallel_keyed+0x490>
 1e4:	ldr	w0, [x24, #16]
 1e8:	cmp	w0, #0x2
 1ec:	b.eq	5c4 <GOACC_parallel_keyed+0x4c4>  // b.none
 1f0:	mov	w2, #0xfffffff0            	// #-16
 1f4:	add	x21, x29, #0x68
 1f8:	mov	w1, w2
 1fc:	add	x4, x29, #0x150
 200:	add	x0, x29, #0x160
 204:	mov	w3, #0xffffff80            	// #-128
 208:	mov	w27, #0xfffffffe            	// #-2
 20c:	str	xzr, [x29, #104]
 210:	str	wzr, [x29, #112]
 214:	stp	x0, x0, [x29, #120]
 218:	str	x4, [x29, #136]
 21c:	stp	w2, w3, [x29, #144]
 220:	tbnz	w1, #31, 270 <GOACC_parallel_keyed+0x170>
 224:	ldr	w19, [x0]
 228:	add	x1, x0, #0xb
 22c:	and	x1, x1, #0xfffffffffffffff8
 230:	str	x1, [x29, #120]
 234:	cbz	w19, 290 <GOACC_parallel_keyed+0x190>
 238:	ubfx	x1, x19, #16, #12
 23c:	cbnz	w1, 63c <GOACC_parallel_keyed+0x53c>
 240:	lsr	w1, w19, #28
 244:	cmp	w1, #0x2
 248:	b.eq	450 <GOACC_parallel_keyed+0x350>  // b.none
 24c:	cmp	w1, #0x3
 250:	b.ne	43c <GOACC_parallel_keyed+0x33c>  // b.any
 254:	and	w1, w19, #0xffff
 258:	mov	w0, w27
 25c:	add	x2, x29, #0x78
 260:	bl	0 <goacc_wait>
 264:	ldr	w1, [x29, #144]
 268:	ldr	x0, [x29, #120]
 26c:	tbz	w1, #31, 224 <GOACC_parallel_keyed+0x124>
 270:	add	w2, w1, #0x8
 274:	str	w2, [x29, #144]
 278:	cmp	w2, #0x0
 27c:	b.gt	224 <GOACC_parallel_keyed+0x124>
 280:	ldr	x0, [x29, #128]
 284:	add	x0, x0, w1, sxtw
 288:	ldr	w19, [x0]
 28c:	cbnz	w19, 238 <GOACC_parallel_keyed+0x138>
 290:	ldr	x1, [x24, #248]
 294:	mov	w0, w27
 298:	blr	x1
 29c:	ldr	w0, [x24, #8]
 2a0:	tbnz	w0, #1, 2f4 <GOACC_parallel_keyed+0x1f4>
 2a4:	add	x0, x25, #0x1
 2a8:	add	x21, x24, #0xa8
 2ac:	stp	x25, x0, [x29, #152]
 2b0:	mov	w0, #0x1                   	// #1
 2b4:	ldaxr	w1, [x21]
 2b8:	cbnz	w1, 2c4 <GOACC_parallel_keyed+0x1c4>
 2bc:	stxr	w2, w0, [x21]
 2c0:	cbnz	w2, 2b4 <GOACC_parallel_keyed+0x1b4>
 2c4:	cmp	w1, #0x0
 2c8:	b.ne	654 <GOACC_parallel_keyed+0x554>  // b.any
 2cc:	add	x1, x29, #0x98
 2d0:	add	x0, x24, #0xa0
 2d4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
 2d8:	mov	x25, x0
 2dc:	ldxr	w0, [x21]
 2e0:	stlxr	w1, wzr, [x21]
 2e4:	cbnz	w1, 2dc <GOACC_parallel_keyed+0x1dc>
 2e8:	tbnz	w0, #31, 630 <GOACC_parallel_keyed+0x530>
 2ec:	cbz	x25, 648 <GOACC_parallel_keyed+0x548>
 2f0:	ldr	x25, [x25, #24]
 2f4:	mov	x5, x20
 2f8:	mov	x2, x22
 2fc:	mov	x1, x26
 300:	mov	x3, #0x0                   	// #0
 304:	mov	x4, x23
 308:	mov	x0, x24
 30c:	mov	w7, #0x0                   	// #0
 310:	mov	w6, #0x1                   	// #1
 314:	bl	0 <gomp_map_vars>
 318:	lsl	x1, x26, #3
 31c:	mov	x20, x0
 320:	add	x1, x1, #0xf
 324:	mov	x5, #0x0                   	// #0
 328:	and	x1, x1, #0xfffffffffffffff0
 32c:	mov	x2, #0x0                   	// #0
 330:	sub	sp, sp, x1
 334:	mov	x3, sp
 338:	cbz	x26, 374 <GOACC_parallel_keyed+0x274>
 33c:	nop
 340:	add	x4, x20, x2, lsl #5
 344:	add	w2, w19, #0x1
 348:	mov	x19, x2
 34c:	cmp	x2, x26
 350:	ldr	x7, [x4, #80]
 354:	ldr	x4, [x4, #64]
 358:	ldp	x8, x1, [x4, #16]
 35c:	ldr	x4, [x8, #16]
 360:	add	x1, x1, x7
 364:	add	x1, x1, x4
 368:	str	x1, [x3, x5, lsl #3]
 36c:	mov	x5, x2
 370:	b.cc	340 <GOACC_parallel_keyed+0x240>  // b.lo, b.ul, b.last
 374:	ldr	x7, [x24, #184]
 378:	mov	x0, x25
 37c:	mov	x2, x22
 380:	mov	x1, x26
 384:	mov	x6, x20
 388:	add	x5, x29, #0x68
 38c:	mov	w4, w27
 390:	blr	x7
 394:	add	w0, w27, #0x2
 398:	cmp	w27, #0x0
 39c:	ccmp	w0, #0x1, #0x0, lt  // lt = tstop
 3a0:	b.hi	558 <GOACC_parallel_keyed+0x458>  // b.pmore
 3a4:	cmn	w27, #0x2
 3a8:	b.eq	558 <GOACC_parallel_keyed+0x458>  // b.none
 3ac:	ldr	x3, [x20, #48]
 3b0:	add	x4, x20, #0x40
 3b4:	mov	x1, #0x0                   	// #0
 3b8:	cbz	x3, 3e4 <GOACC_parallel_keyed+0x2e4>
 3bc:	nop
 3c0:	lsl	x0, x1, #5
 3c4:	ldr	x2, [x4, x0]
 3c8:	cbz	x2, 3d8 <GOACC_parallel_keyed+0x2d8>
 3cc:	ldr	x0, [x2, #32]
 3d0:	cmp	x0, #0x1
 3d4:	b.eq	5ec <GOACC_parallel_keyed+0x4ec>  // b.none
 3d8:	add	x1, x1, #0x1
 3dc:	cmp	x1, x3
 3e0:	b.ne	3c0 <GOACC_parallel_keyed+0x2c0>  // b.any
 3e4:	mov	x0, x20
 3e8:	mov	w1, #0x0                   	// #0
 3ec:	bl	0 <gomp_unmap_vars>
 3f0:	b	564 <GOACC_parallel_keyed+0x464>
 3f4:	ldrh	w4, [x20, x2, lsl #1]
 3f8:	cmp	x0, #0x8
 3fc:	and	w4, w4, #0xff
 400:	b.eq	194 <GOACC_parallel_keyed+0x94>  // b.none
 404:	cmp	w4, #0x4
 408:	add	x0, x22, x1, lsl #3
 40c:	b.ne	1cc <GOACC_parallel_keyed+0xcc>  // b.any
 410:	ldr	x4, [x23, x2, lsl #3]
 414:	cbnz	x4, 1cc <GOACC_parallel_keyed+0xcc>
 418:	ldr	x4, [x22, x2, lsl #3]
 41c:	ldr	x7, [x22, x1, lsl #3]
 420:	ldr	x4, [x4]
 424:	cmp	x7, x4
 428:	b.ne	1cc <GOACC_parallel_keyed+0xcc>  // b.any
 42c:	strh	w3, [x20, x2, lsl #1]
 430:	str	x6, [x23, x2, lsl #3]
 434:	str	xzr, [x0]
 438:	b	1d0 <GOACC_parallel_keyed+0xd0>
 43c:	cmp	w1, #0x1
 440:	b.eq	484 <GOACC_parallel_keyed+0x384>  // b.none
 444:	adrp	x0, 0 <goacc_wait>
 448:	add	x0, x0, #0x0
 44c:	bl	0 <gomp_fatal>
 450:	mov	w0, #0xffff                	// #65535
 454:	ldr	w1, [x29, #144]
 458:	and	w27, w19, w0
 45c:	cmp	w0, w19, uxth
 460:	ldr	x0, [x29, #120]
 464:	b.ne	220 <GOACC_parallel_keyed+0x120>  // b.any
 468:	tbnz	w1, #31, 514 <GOACC_parallel_keyed+0x414>
 46c:	mov	x3, x0
 470:	add	x2, x0, #0xb
 474:	and	x0, x2, #0xfffffffffffffff8
 478:	str	x0, [x29, #120]
 47c:	ldr	w27, [x3]
 480:	b	220 <GOACC_parallel_keyed+0x120>
 484:	ldp	x5, x7, [x29, #120]
 488:	and	w19, w19, #0xffff
 48c:	ldr	w1, [x29, #144]
 490:	mov	x6, #0x0                   	// #0
 494:	mov	w2, #0x0                   	// #0
 498:	mov	x0, x5
 49c:	lsr	w3, w19, w6
 4a0:	tbz	w3, #0, 4c0 <GOACC_parallel_keyed+0x3c0>
 4a4:	tbnz	w1, #31, 4d8 <GOACC_parallel_keyed+0x3d8>
 4a8:	add	x4, x0, #0xb
 4ac:	mov	x3, x0
 4b0:	and	x0, x4, #0xfffffffffffffff8
 4b4:	mov	w2, #0x1                   	// #1
 4b8:	ldr	w3, [x3]
 4bc:	str	w3, [x21, x6, lsl #2]
 4c0:	add	x6, x6, #0x1
 4c4:	cmp	x6, #0x3
 4c8:	b.ne	49c <GOACC_parallel_keyed+0x39c>  // b.any
 4cc:	cbz	w2, 500 <GOACC_parallel_keyed+0x400>
 4d0:	str	x0, [x29, #120]
 4d4:	b	220 <GOACC_parallel_keyed+0x120>
 4d8:	add	w4, w1, #0x8
 4dc:	str	w4, [x29, #144]
 4e0:	cmp	w4, #0x0
 4e4:	b.le	508 <GOACC_parallel_keyed+0x408>
 4e8:	add	x8, x0, #0xb
 4ec:	mov	x3, x0
 4f0:	mov	w1, w4
 4f4:	and	x0, x8, #0xfffffffffffffff8
 4f8:	mov	w2, #0x1                   	// #1
 4fc:	b	4b8 <GOACC_parallel_keyed+0x3b8>
 500:	mov	x0, x5
 504:	b	220 <GOACC_parallel_keyed+0x120>
 508:	add	x3, x7, w1, sxtw
 50c:	mov	w1, w4
 510:	b	4b8 <GOACC_parallel_keyed+0x3b8>
 514:	add	w2, w1, #0x8
 518:	str	w2, [x29, #144]
 51c:	cmp	w2, #0x0
 520:	b.le	544 <GOACC_parallel_keyed+0x444>
 524:	add	x3, x0, #0xb
 528:	mov	w1, w2
 52c:	and	x2, x3, #0xfffffffffffffff8
 530:	mov	x3, x0
 534:	mov	x0, x2
 538:	str	x2, [x29, #120]
 53c:	ldr	w27, [x3]
 540:	b	220 <GOACC_parallel_keyed+0x120>
 544:	ldr	x3, [x29, #128]
 548:	add	x3, x3, w1, sxtw
 54c:	mov	w1, w2
 550:	ldr	w27, [x3]
 554:	b	220 <GOACC_parallel_keyed+0x120>
 558:	mov	x0, x20
 55c:	mov	w1, #0x1                   	// #1
 560:	bl	0 <gomp_unmap_vars>
 564:	ldr	x1, [x24, #248]
 568:	mov	w0, #0xfffffffe            	// #-2
 56c:	blr	x1
 570:	mov	sp, x29
 574:	ldp	x19, x20, [sp, #16]
 578:	ldp	x21, x22, [sp, #32]
 57c:	ldp	x23, x24, [sp, #48]
 580:	ldp	x25, x26, [sp, #64]
 584:	ldr	x27, [sp, #80]
 588:	ldp	x29, x30, [sp], #352
 58c:	ret
 590:	mov	w0, #0x2                   	// #2
 594:	bl	0 <goacc_save_and_set_bind>
 598:	mov	x0, x22
 59c:	blr	x25
 5a0:	bl	0 <goacc_restore_bind>
 5a4:	mov	sp, x29
 5a8:	ldp	x19, x20, [sp, #16]
 5ac:	ldp	x21, x22, [sp, #32]
 5b0:	ldp	x23, x24, [sp, #48]
 5b4:	ldp	x25, x26, [sp, #64]
 5b8:	ldr	x27, [sp, #80]
 5bc:	ldp	x29, x30, [sp], #352
 5c0:	ret
 5c4:	mov	x0, x22
 5c8:	blr	x25
 5cc:	mov	sp, x29
 5d0:	ldp	x19, x20, [sp, #16]
 5d4:	ldp	x21, x22, [sp, #32]
 5d8:	ldp	x23, x24, [sp, #48]
 5dc:	ldp	x25, x26, [sp, #64]
 5e0:	ldr	x27, [sp, #80]
 5e4:	ldp	x29, x30, [sp], #352
 5e8:	ret
 5ec:	ldr	x2, [x20, #56]
 5f0:	mov	w1, w27
 5f4:	mov	x0, x20
 5f8:	ldr	x2, [x2, #192]
 5fc:	blr	x2
 600:	b	564 <GOACC_parallel_keyed+0x464>
 604:	mov	x6, x5
 608:	adrp	x2, 0 <goacc_wait>
 60c:	mov	x5, x4
 610:	add	x2, x2, #0x0
 614:	mov	x4, x3
 618:	adrp	x1, 0 <goacc_wait>
 61c:	mov	x3, x26
 620:	add	x1, x1, #0x0
 624:	mov	w0, #0x0                   	// #0
 628:	bl	0 <gomp_debug>
 62c:	b	164 <GOACC_parallel_keyed+0x64>
 630:	mov	x0, x21
 634:	bl	0 <gomp_mutex_unlock_slow>
 638:	b	2ec <GOACC_parallel_keyed+0x1ec>
 63c:	adrp	x0, 0 <goacc_wait>
 640:	add	x0, x0, #0x0
 644:	bl	0 <gomp_fatal>
 648:	adrp	x0, 0 <goacc_wait>
 64c:	add	x0, x0, #0x0
 650:	bl	0 <gomp_fatal>
 654:	mov	x0, x21
 658:	bl	0 <gomp_mutex_lock_slow>
 65c:	b	2cc <GOACC_parallel_keyed+0x1cc>

0000000000000660 <GOACC_parallel>:
 660:	stp	x29, x30, [sp, #-32]!
 664:	mov	w0, #0x2                   	// #2
 668:	mov	x29, sp
 66c:	stp	x19, x20, [sp, #16]
 670:	mov	x20, x3
 674:	mov	x19, x1
 678:	bl	0 <goacc_save_and_set_bind>
 67c:	mov	x0, x20
 680:	blr	x19
 684:	bl	0 <goacc_restore_bind>
 688:	ldp	x19, x20, [sp, #16]
 68c:	ldp	x29, x30, [sp], #32
 690:	ret
 694:	nop

0000000000000698 <GOACC_data_start>:
 698:	stp	x29, x30, [sp, #-80]!
 69c:	mov	x29, sp
 6a0:	stp	x25, x26, [sp, #64]
 6a4:	adrp	x25, 0 <gomp_debug_var>
 6a8:	ldr	w5, [x25]
 6ac:	stp	x19, x20, [sp, #16]
 6b0:	mvn	w19, w0
 6b4:	stp	x21, x22, [sp, #32]
 6b8:	mov	x21, x1
 6bc:	mov	x22, x2
 6c0:	stp	x23, x24, [sp, #48]
 6c4:	mov	x23, x3
 6c8:	mov	x24, x4
 6cc:	cbnz	w5, 7d8 <GOACC_data_start+0x140>
 6d0:	bl	0 <goacc_lazy_initialize>
 6d4:	adrp	x0, 0 <goacc_tls_data>
 6d8:	ldr	x0, [x0]
 6dc:	mrs	x1, tpidr_el0
 6e0:	ldr	x20, [x1, x0]
 6e4:	ldr	x26, [x20, #8]
 6e8:	ldr	w0, [x26, #8]
 6ec:	orr	w19, w19, w0
 6f0:	tbnz	w19, #0, 750 <GOACC_data_start+0xb8>
 6f4:	ldr	w0, [x25]
 6f8:	cbnz	w0, 7b8 <GOACC_data_start+0x120>
 6fc:	mov	x1, x21
 700:	mov	x5, x24
 704:	mov	x4, x23
 708:	mov	x2, x22
 70c:	mov	x0, x26
 710:	mov	w7, #0x0                   	// #0
 714:	mov	w6, #0x1                   	// #1
 718:	mov	x3, #0x0                   	// #0
 71c:	bl	0 <gomp_map_vars>
 720:	mov	x19, x0
 724:	ldr	w1, [x25]
 728:	cbnz	w1, 798 <GOACC_data_start+0x100>
 72c:	ldr	x0, [x20, #24]
 730:	str	x0, [x19, #40]
 734:	str	x19, [x20, #24]
 738:	ldp	x19, x20, [sp, #16]
 73c:	ldp	x21, x22, [sp, #32]
 740:	ldp	x23, x24, [sp, #48]
 744:	ldp	x25, x26, [sp, #64]
 748:	ldp	x29, x30, [sp], #80
 74c:	ret
 750:	mov	w7, #0x0                   	// #0
 754:	mov	w6, #0x1                   	// #1
 758:	mov	x5, #0x0                   	// #0
 75c:	mov	x4, #0x0                   	// #0
 760:	mov	x3, #0x0                   	// #0
 764:	mov	x2, #0x0                   	// #0
 768:	mov	x1, #0x0                   	// #0
 76c:	mov	x0, #0x0                   	// #0
 770:	bl	0 <gomp_map_vars>
 774:	ldr	x1, [x20, #24]
 778:	str	x1, [x0, #40]
 77c:	str	x0, [x20, #24]
 780:	ldp	x19, x20, [sp, #16]
 784:	ldp	x21, x22, [sp, #32]
 788:	ldp	x23, x24, [sp, #48]
 78c:	ldp	x25, x26, [sp, #64]
 790:	ldp	x29, x30, [sp], #80
 794:	ret
 798:	adrp	x2, 0 <goacc_wait>
 79c:	add	x2, x2, #0x0
 7a0:	add	x2, x2, #0x18
 7a4:	adrp	x1, 0 <goacc_wait>
 7a8:	mov	w0, #0x0                   	// #0
 7ac:	add	x1, x1, #0x0
 7b0:	bl	0 <gomp_debug>
 7b4:	b	72c <GOACC_data_start+0x94>
 7b8:	adrp	x2, 0 <goacc_wait>
 7bc:	add	x2, x2, #0x0
 7c0:	add	x2, x2, #0x18
 7c4:	adrp	x1, 0 <goacc_wait>
 7c8:	mov	w0, #0x0                   	// #0
 7cc:	add	x1, x1, #0x0
 7d0:	bl	0 <gomp_debug>
 7d4:	b	6fc <GOACC_data_start+0x64>
 7d8:	adrp	x2, 0 <goacc_wait>
 7dc:	add	x2, x2, #0x0
 7e0:	mov	x6, x4
 7e4:	mov	x5, x3
 7e8:	add	x2, x2, #0x18
 7ec:	mov	x4, x22
 7f0:	mov	x3, x21
 7f4:	adrp	x1, 0 <goacc_wait>
 7f8:	mov	w0, #0x0                   	// #0
 7fc:	add	x1, x1, #0x0
 800:	bl	0 <gomp_debug>
 804:	b	6d0 <GOACC_data_start+0x38>

0000000000000808 <GOACC_data_end>:
 808:	stp	x29, x30, [sp, #-48]!
 80c:	mrs	x1, tpidr_el0
 810:	adrp	x0, 0 <goacc_tls_data>
 814:	ldr	x0, [x0]
 818:	mov	x29, sp
 81c:	stp	x19, x20, [sp, #16]
 820:	adrp	x19, 0 <gomp_debug_var>
 824:	ldr	w2, [x19]
 828:	str	x21, [sp, #32]
 82c:	ldr	x21, [x1, x0]
 830:	ldr	x20, [x21, #24]
 834:	cbnz	w2, 864 <GOACC_data_end+0x5c>
 838:	ldr	x0, [x20, #40]
 83c:	str	x0, [x21, #24]
 840:	mov	w1, #0x1                   	// #1
 844:	mov	x0, x20
 848:	bl	0 <gomp_unmap_vars>
 84c:	ldr	w0, [x19]
 850:	cbnz	w0, 89c <GOACC_data_end+0x94>
 854:	ldp	x19, x20, [sp, #16]
 858:	ldr	x21, [sp, #32]
 85c:	ldp	x29, x30, [sp], #48
 860:	ret
 864:	adrp	x2, 0 <goacc_wait>
 868:	add	x2, x2, #0x0
 86c:	add	x2, x2, #0x30
 870:	mov	w0, #0x0                   	// #0
 874:	adrp	x1, 0 <goacc_wait>
 878:	add	x1, x1, #0x0
 87c:	bl	0 <gomp_debug>
 880:	ldr	x0, [x20, #40]
 884:	str	x0, [x21, #24]
 888:	mov	w1, #0x1                   	// #1
 88c:	mov	x0, x20
 890:	bl	0 <gomp_unmap_vars>
 894:	ldr	w0, [x19]
 898:	cbz	w0, 854 <GOACC_data_end+0x4c>
 89c:	ldp	x19, x20, [sp, #16]
 8a0:	adrp	x2, 0 <goacc_wait>
 8a4:	ldr	x21, [sp, #32]
 8a8:	add	x2, x2, #0x0
 8ac:	ldp	x29, x30, [sp], #48
 8b0:	add	x2, x2, #0x30
 8b4:	adrp	x1, 0 <goacc_wait>
 8b8:	mov	w0, #0x0                   	// #0
 8bc:	add	x1, x1, #0x0
 8c0:	b	0 <gomp_debug>
 8c4:	nop

00000000000008c8 <GOACC_enter_exit_data>:
 8c8:	stp	x29, x30, [sp, #-256]!
 8cc:	mov	x29, sp
 8d0:	stp	x19, x20, [sp, #16]
 8d4:	mov	w19, w0
 8d8:	mov	x20, x1
 8dc:	stp	x21, x22, [sp, #32]
 8e0:	mov	x21, x2
 8e4:	mov	x22, x3
 8e8:	stp	x23, x24, [sp, #48]
 8ec:	mov	x24, x4
 8f0:	stp	x25, x26, [sp, #64]
 8f4:	mov	w25, w5
 8f8:	mov	w26, w6
 8fc:	str	q0, [sp, #112]
 900:	str	q1, [sp, #128]
 904:	str	q2, [sp, #144]
 908:	str	q3, [sp, #160]
 90c:	str	q4, [sp, #176]
 910:	str	q5, [sp, #192]
 914:	str	q6, [sp, #208]
 918:	str	q7, [sp, #224]
 91c:	str	x7, [sp, #248]
 920:	bl	0 <goacc_lazy_initialize>
 924:	adrp	x0, 0 <goacc_tls_data>
 928:	ldr	x0, [x0]
 92c:	mrs	x1, tpidr_el0
 930:	ldr	x0, [x1, x0]
 934:	ldr	x23, [x0, #8]
 938:	ldr	w0, [x23, #8]
 93c:	orn	w0, w0, w19
 940:	tbnz	w0, #0, 964 <GOACC_enter_exit_data+0x9c>
 944:	cbnz	w26, b24 <GOACC_enter_exit_data+0x25c>
 948:	ldr	x1, [x23, #248]
 94c:	cbnz	x20, 97c <GOACC_enter_exit_data+0xb4>
 950:	mov	w0, w25
 954:	blr	x1
 958:	ldr	x1, [x23, #248]
 95c:	mov	w0, #0xfffffffe            	// #-2
 960:	blr	x1
 964:	ldp	x19, x20, [sp, #16]
 968:	ldp	x21, x22, [sp, #32]
 96c:	ldp	x23, x24, [sp, #48]
 970:	ldp	x25, x26, [sp, #64]
 974:	ldp	x29, x30, [sp], #256
 978:	ret
 97c:	ldrh	w26, [x24]
 980:	mov	w0, w25
 984:	blr	x1
 988:	mov	x2, #0x0                   	// #0
 98c:	ldrh	w1, [x24, x2, lsl #1]
 990:	and	w1, w1, #0xff
 994:	sub	w0, w1, #0x4
 998:	and	w0, w0, #0xff
 99c:	cmp	w0, #0x1
 9a0:	b.ls	b70 <GOACC_enter_exit_data+0x2a8>  // b.plast
 9a4:	cmp	w1, #0x6
 9a8:	b.eq	b1c <GOACC_enter_exit_data+0x254>  // b.none
 9ac:	tst	w1, #0x7e
 9b0:	mov	x19, #0x0                   	// #0
 9b4:	b.eq	a88 <GOACC_enter_exit_data+0x1c0>  // b.none
 9b8:	and	w0, w1, #0xffffffef
 9bc:	cmp	w0, #0x7
 9c0:	b.ne	bc4 <GOACC_enter_exit_data+0x2fc>  // b.any
 9c4:	and	w0, w26, #0xff
 9c8:	mov	x19, #0x0                   	// #0
 9cc:	cmp	w0, #0x7
 9d0:	cset	w26, eq  // eq = none
 9d4:	cmp	w0, #0x82
 9d8:	csinc	w26, w26, wzr, ne  // ne = any
 9dc:	b	a04 <GOACC_enter_exit_data+0x13c>
 9e0:	ldr	x0, [x21, x19, lsl #3]
 9e4:	ldr	x1, [x22, x19, lsl #3]
 9e8:	cbz	w26, b68 <GOACC_enter_exit_data+0x2a0>
 9ec:	nop
 9f0:	bl	0 <acc_copyout_finalize>
 9f4:	nop
 9f8:	add	x19, x19, #0x1
 9fc:	cmp	x20, x19
 a00:	b.ls	958 <GOACC_enter_exit_data+0x90>  // b.plast
 a04:	ldrh	w1, [x24, x19, lsl #1]
 a08:	add	w0, w19, #0x1
 a0c:	and	w1, w1, #0xff
 a10:	cmp	x20, w0, sxtw
 a14:	b.ls	a30 <GOACC_enter_exit_data+0x168>  // b.plast
 a18:	add	x0, x24, w19, sxtw #1
 a1c:	ldrb	w0, [x0, #2]
 a20:	cmp	w0, #0x5
 a24:	b.eq	b88 <GOACC_enter_exit_data+0x2c0>  // b.none
 a28:	cmp	w0, #0x4
 a2c:	b.eq	bb8 <GOACC_enter_exit_data+0x2f0>  // b.none
 a30:	cmp	w1, #0x17
 a34:	b.eq	a4c <GOACC_enter_exit_data+0x184>  // b.none
 a38:	b.hi	b54 <GOACC_enter_exit_data+0x28c>  // b.pmore
 a3c:	cmp	w1, #0x2
 a40:	b.eq	9e0 <GOACC_enter_exit_data+0x118>  // b.none
 a44:	cmp	w1, #0x7
 a48:	b.ne	bd0 <GOACC_enter_exit_data+0x308>  // b.any
 a4c:	ldr	x1, [x22, x19, lsl #3]
 a50:	ldr	x0, [x21, x19, lsl #3]
 a54:	bl	0 <acc_is_present>
 a58:	cbz	w0, 9f8 <GOACC_enter_exit_data+0x130>
 a5c:	ldr	x0, [x21, x19, lsl #3]
 a60:	ldr	x1, [x22, x19, lsl #3]
 a64:	cbz	w26, b80 <GOACC_enter_exit_data+0x2b8>
 a68:	bl	0 <acc_delete_finalize>
 a6c:	b	9f8 <GOACC_enter_exit_data+0x130>
 a70:	ldr	x1, [x22, x19, lsl #3]
 a74:	ldr	x0, [x21, x19, lsl #3]
 a78:	bl	0 <acc_create>
 a7c:	add	x19, x19, #0x1
 a80:	cmp	x20, x19
 a84:	b.ls	958 <GOACC_enter_exit_data+0x90>  // b.plast
 a88:	lsl	x0, x19, #1
 a8c:	add	w5, w19, #0x1
 a90:	add	x3, x24, x0
 a94:	cmp	x20, w5, sxtw
 a98:	ldrb	w0, [x24, x0]
 a9c:	b.ls	ab8 <GOACC_enter_exit_data+0x1f0>  // b.plast
 aa0:	add	x1, x24, w19, sxtw #1
 aa4:	ldrb	w1, [x1, #2]
 aa8:	cmp	w1, #0x5
 aac:	b.eq	af0 <GOACC_enter_exit_data+0x228>  // b.none
 ab0:	cmp	w1, #0x4
 ab4:	b.eq	b10 <GOACC_enter_exit_data+0x248>  // b.none
 ab8:	cmp	w0, #0x80
 abc:	b.eq	a70 <GOACC_enter_exit_data+0x1a8>  // b.none
 ac0:	b.hi	ae0 <GOACC_enter_exit_data+0x218>  // b.pmore
 ac4:	cbz	w0, a70 <GOACC_enter_exit_data+0x1a8>
 ac8:	cmp	w0, #0x1
 acc:	b.ne	ae8 <GOACC_enter_exit_data+0x220>  // b.any
 ad0:	ldr	x1, [x22, x19, lsl #3]
 ad4:	ldr	x0, [x21, x19, lsl #3]
 ad8:	bl	0 <acc_copyin>
 adc:	b	a7c <GOACC_enter_exit_data+0x1b4>
 ae0:	cmp	w0, #0x81
 ae4:	b.eq	ad0 <GOACC_enter_exit_data+0x208>  // b.none
 ae8:	mov	w1, w0
 aec:	b	bd0 <GOACC_enter_exit_data+0x308>
 af0:	mov	x2, #0x2                   	// #2
 af4:	mov	x0, #0x3                   	// #3
 af8:	lsl	x1, x19, #3
 afc:	add	x19, x19, x2
 b00:	add	x2, x22, x1
 b04:	add	x1, x21, x1
 b08:	bl	0 <gomp_acc_insert_pointer>
 b0c:	b	a7c <GOACC_enter_exit_data+0x1b4>
 b10:	mov	x2, #0x1                   	// #1
 b14:	mov	x0, #0x2                   	// #2
 b18:	b	af8 <GOACC_enter_exit_data+0x230>
 b1c:	mov	x19, #0x0                   	// #0
 b20:	b	a88 <GOACC_enter_exit_data+0x1c0>
 b24:	add	x5, sp, #0xf0
 b28:	add	x6, sp, #0x100
 b2c:	mov	w4, #0xfffffff8            	// #-8
 b30:	mov	w3, #0xffffff80            	// #-128
 b34:	mov	w1, w26
 b38:	add	x2, sp, #0x50
 b3c:	mov	w0, w25
 b40:	stp	x6, x6, [sp, #80]
 b44:	str	x5, [sp, #96]
 b48:	stp	w4, w3, [sp, #104]
 b4c:	bl	0 <goacc_wait>
 b50:	b	948 <GOACC_enter_exit_data+0x80>
 b54:	cmp	w1, #0x82
 b58:	b.ne	bd0 <GOACC_enter_exit_data+0x308>  // b.any
 b5c:	ldr	x0, [x21, x19, lsl #3]
 b60:	ldr	x1, [x22, x19, lsl #3]
 b64:	cbnz	w26, 9f0 <GOACC_enter_exit_data+0x128>
 b68:	bl	0 <acc_copyout>
 b6c:	b	9f8 <GOACC_enter_exit_data+0x130>
 b70:	add	x2, x2, #0x1
 b74:	cmp	x20, x2
 b78:	b.ne	98c <GOACC_enter_exit_data+0xc4>  // b.any
 b7c:	b	9c4 <GOACC_enter_exit_data+0xfc>
 b80:	bl	0 <acc_delete>
 b84:	b	9f8 <GOACC_enter_exit_data+0x130>
 b88:	mov	x2, #0x2                   	// #2
 b8c:	mov	w5, #0x3                   	// #3
 b90:	and	w0, w1, #0x7f
 b94:	mov	w4, w26
 b98:	cmp	w0, #0x2
 b9c:	mov	w3, w25
 ba0:	ldr	x1, [x22, x19, lsl #3]
 ba4:	ldr	x0, [x21, x19, lsl #3]
 ba8:	add	x19, x19, x2
 bac:	cset	w2, eq  // eq = none
 bb0:	bl	0 <gomp_acc_remove_pointer>
 bb4:	b	9f8 <GOACC_enter_exit_data+0x130>
 bb8:	mov	x2, #0x1                   	// #1
 bbc:	mov	w5, #0x2                   	// #2
 bc0:	b	b90 <GOACC_enter_exit_data+0x2c8>
 bc4:	and	w0, w1, #0x7f
 bc8:	cmp	w0, #0x2
 bcc:	b.eq	9c4 <GOACC_enter_exit_data+0xfc>  // b.none
 bd0:	adrp	x0, 0 <goacc_wait>
 bd4:	add	x0, x0, #0x0
 bd8:	bl	0 <gomp_fatal>
 bdc:	nop

0000000000000be0 <GOACC_update>:
 be0:	stp	x29, x30, [sp, #-256]!
 be4:	mov	x29, sp
 be8:	stp	x19, x20, [sp, #16]
 bec:	mov	w19, w0
 bf0:	mov	x20, x2
 bf4:	stp	x21, x22, [sp, #32]
 bf8:	mov	x21, x1
 bfc:	mov	x22, x4
 c00:	stp	x23, x24, [sp, #48]
 c04:	mov	x23, x3
 c08:	stp	x25, x26, [sp, #64]
 c0c:	mov	w25, w5
 c10:	mov	w26, w6
 c14:	str	q0, [sp, #112]
 c18:	str	q1, [sp, #128]
 c1c:	str	q2, [sp, #144]
 c20:	str	q3, [sp, #160]
 c24:	str	q4, [sp, #176]
 c28:	str	q5, [sp, #192]
 c2c:	str	q6, [sp, #208]
 c30:	str	q7, [sp, #224]
 c34:	str	x7, [sp, #248]
 c38:	bl	0 <goacc_lazy_initialize>
 c3c:	adrp	x0, 0 <goacc_tls_data>
 c40:	ldr	x0, [x0]
 c44:	mrs	x1, tpidr_el0
 c48:	ldr	x0, [x1, x0]
 c4c:	ldr	x24, [x0, #8]
 c50:	ldr	w0, [x24, #8]
 c54:	orn	w0, w0, w19
 c58:	tbnz	w0, #0, cf4 <GOACC_update+0x114>
 c5c:	cbnz	w26, da0 <GOACC_update+0x1c0>
 c60:	ldr	x1, [x24, #248]
 c64:	mov	w0, w25
 c68:	mov	x19, #0x0                   	// #0
 c6c:	blr	x1
 c70:	mov	w1, #0x0                   	// #0
 c74:	cbnz	x21, ca8 <GOACC_update+0xc8>
 c78:	b	ce8 <GOACC_update+0x108>
 c7c:	cmp	w0, #0x2
 c80:	b.eq	d84 <GOACC_update+0x1a4>  // b.none
 c84:	b.ls	d0c <GOACC_update+0x12c>  // b.plast
 c88:	sub	w2, w0, #0x4
 c8c:	and	w2, w2, #0xff
 c90:	cmp	w2, #0x1
 c94:	b.hi	dd0 <GOACC_update+0x1f0>  // b.pmore
 c98:	add	x19, x19, #0x1
 c9c:	add	x20, x20, #0x8
 ca0:	cmp	x21, x19
 ca4:	b.eq	ce8 <GOACC_update+0x108>  // b.none
 ca8:	ldrh	w0, [x22, x19, lsl #1]
 cac:	and	w0, w0, #0xff
 cb0:	cmp	w0, #0x1d
 cb4:	b.eq	d50 <GOACC_update+0x170>  // b.none
 cb8:	b.ls	c7c <GOACC_update+0x9c>  // b.plast
 cbc:	cmp	w0, #0x81
 cc0:	b.ne	d30 <GOACC_update+0x150>  // b.any
 cc4:	add	x25, x23, x19, lsl #3
 cc8:	ldr	x0, [x20]
 ccc:	add	x19, x19, #0x1
 cd0:	ldr	x1, [x25]
 cd4:	add	x20, x20, #0x8
 cd8:	bl	0 <acc_update_device>
 cdc:	cmp	x21, x19
 ce0:	mov	w1, #0x1                   	// #1
 ce4:	b.ne	ca8 <GOACC_update+0xc8>  // b.any
 ce8:	ldr	x1, [x24, #248]
 cec:	mov	w0, #0xfffffffe            	// #-2
 cf0:	blr	x1
 cf4:	ldp	x19, x20, [sp, #16]
 cf8:	ldp	x21, x22, [sp, #32]
 cfc:	ldp	x23, x24, [sp, #48]
 d00:	ldp	x25, x26, [sp, #64]
 d04:	ldp	x29, x30, [sp], #256
 d08:	ret
 d0c:	cmp	w0, #0x1
 d10:	b.ne	dd0 <GOACC_update+0x1f0>  // b.any
 d14:	ldr	x1, [x23, x19, lsl #3]
 d18:	add	x25, x23, x19, lsl #3
 d1c:	ldr	x0, [x20]
 d20:	bl	0 <acc_is_present>
 d24:	cbnz	w0, cc8 <GOACC_update+0xe8>
 d28:	mov	w1, #0x0                   	// #0
 d2c:	b	c98 <GOACC_update+0xb8>
 d30:	cmp	w0, #0x82
 d34:	b.ne	dd0 <GOACC_update+0x1f0>  // b.any
 d38:	add	x25, x23, x19, lsl #3
 d3c:	ldr	x1, [x25]
 d40:	ldr	x0, [x20]
 d44:	bl	0 <acc_update_self>
 d48:	mov	w1, #0x0                   	// #0
 d4c:	b	c98 <GOACC_update+0xb8>
 d50:	cbz	w1, d28 <GOACC_update+0x148>
 d54:	ldur	x0, [x20, #-8]
 d58:	bl	0 <acc_deviceptr>
 d5c:	mov	x2, x0
 d60:	ldr	x0, [x20]
 d64:	mov	x1, #0x8                   	// #8
 d68:	ldr	x25, [x0]
 d6c:	str	x2, [x0]
 d70:	bl	0 <acc_update_device>
 d74:	ldr	x0, [x20]
 d78:	mov	w1, #0x0                   	// #0
 d7c:	str	x25, [x0]
 d80:	b	c98 <GOACC_update+0xb8>
 d84:	ldr	x1, [x23, x19, lsl #3]
 d88:	add	x25, x23, x19, lsl #3
 d8c:	ldr	x0, [x20]
 d90:	bl	0 <acc_is_present>
 d94:	cbnz	w0, d3c <GOACC_update+0x15c>
 d98:	mov	w1, #0x0                   	// #0
 d9c:	b	c98 <GOACC_update+0xb8>
 da0:	add	x5, sp, #0xf0
 da4:	add	x6, sp, #0x100
 da8:	mov	w4, #0xfffffff8            	// #-8
 dac:	mov	w3, #0xffffff80            	// #-128
 db0:	mov	w1, w26
 db4:	add	x2, sp, #0x50
 db8:	mov	w0, w25
 dbc:	stp	x6, x6, [sp, #80]
 dc0:	str	x5, [sp, #96]
 dc4:	stp	w4, w3, [sp, #104]
 dc8:	bl	0 <goacc_wait>
 dcc:	b	c60 <GOACC_update+0x80>
 dd0:	mov	w1, w0
 dd4:	adrp	x0, 0 <goacc_wait>
 dd8:	add	x0, x0, #0x0
 ddc:	bl	0 <gomp_fatal>

0000000000000de0 <GOACC_wait>:
 de0:	stp	x29, x30, [sp, #-224]!
 de4:	mov	x29, sp
 de8:	str	q0, [sp, #48]
 dec:	str	q1, [sp, #64]
 df0:	str	q2, [sp, #80]
 df4:	str	q3, [sp, #96]
 df8:	str	q4, [sp, #112]
 dfc:	str	q5, [sp, #128]
 e00:	str	q6, [sp, #144]
 e04:	str	q7, [sp, #160]
 e08:	stp	x2, x3, [sp, #176]
 e0c:	stp	x4, x5, [sp, #192]
 e10:	stp	x6, x7, [sp, #208]
 e14:	cbnz	w1, e38 <GOACC_wait+0x58>
 e18:	cmn	w0, #0x2
 e1c:	b.eq	e2c <GOACC_wait+0x4c>  // b.none
 e20:	bl	0 <acc_wait_all_async>
 e24:	ldp	x29, x30, [sp], #224
 e28:	ret
 e2c:	bl	0 <acc_wait_all>
 e30:	ldp	x29, x30, [sp], #224
 e34:	ret
 e38:	add	x5, sp, #0xb0
 e3c:	add	x6, sp, #0xe0
 e40:	mov	w4, #0xffffffd0            	// #-48
 e44:	mov	w3, #0xffffff80            	// #-128
 e48:	add	x2, sp, #0x10
 e4c:	stp	x6, x6, [sp, #16]
 e50:	str	x5, [sp, #32]
 e54:	stp	w4, w3, [sp, #40]
 e58:	bl	0 <goacc_wait>
 e5c:	ldp	x29, x30, [sp], #224
 e60:	ret
 e64:	nop

0000000000000e68 <GOACC_get_num_threads>:
 e68:	mov	w0, #0x1                   	// #1
 e6c:	ret

0000000000000e70 <GOACC_get_thread_num>:
 e70:	mov	w0, #0x0                   	// #0
 e74:	ret

0000000000000e78 <GOACC_declare>:
 e78:	cbz	x1, fd8 <GOACC_declare+0x160>
 e7c:	stp	x29, x30, [sp, #-80]!
 e80:	mov	x29, sp
 e84:	stp	x19, x20, [sp, #16]
 e88:	mov	x20, x1
 e8c:	mov	x19, #0x0                   	// #0
 e90:	stp	x21, x22, [sp, #32]
 e94:	mov	x21, x2
 e98:	mov	x22, x3
 e9c:	stp	x23, x24, [sp, #48]
 ea0:	mov	w23, w0
 ea4:	mov	x24, x4
 ea8:	stp	x25, x26, [sp, #64]
 eac:	b	ee4 <GOACC_declare+0x6c>
 eb0:	lsl	x2, x19, #3
 eb4:	mov	w6, #0x0                   	// #0
 eb8:	add	x3, x22, x2
 ebc:	add	x2, x21, x2
 ec0:	mov	x4, x24
 ec4:	mov	w0, w23
 ec8:	mov	w5, #0xfffffffe            	// #-2
 ecc:	mov	x1, #0x1                   	// #1
 ed0:	bl	8c8 <GOACC_enter_exit_data>
 ed4:	add	x19, x19, #0x1
 ed8:	add	x24, x24, #0x2
 edc:	cmp	x19, x20
 ee0:	b.eq	fc0 <GOACC_declare+0x148>  // b.none
 ee4:	ldrb	w5, [x24]
 ee8:	sub	w6, w5, #0x4
 eec:	and	w6, w6, #0xff
 ef0:	cmp	w6, #0x1
 ef4:	b.ls	ed4 <GOACC_declare+0x5c>  // b.plast
 ef8:	cmp	w5, #0x2
 efc:	b.eq	eb0 <GOACC_declare+0x38>  // b.none
 f00:	b.ls	f84 <GOACC_declare+0x10c>  // b.plast
 f04:	cmp	w5, #0x8
 f08:	b.eq	ed4 <GOACC_declare+0x5c>  // b.none
 f0c:	b.ls	f4c <GOACC_declare+0xd4>  // b.plast
 f10:	cmp	w5, #0x17
 f14:	b.eq	eb0 <GOACC_declare+0x38>  // b.none
 f18:	sub	w5, w5, #0x80
 f1c:	and	w5, w5, #0xff
 f20:	cmp	w5, #0x2
 f24:	b.ls	eb0 <GOACC_declare+0x38>  // b.plast
 f28:	adrp	x3, 0 <goacc_wait>
 f2c:	add	x3, x3, #0x0
 f30:	adrp	x1, 0 <goacc_wait>
 f34:	adrp	x0, 0 <goacc_wait>
 f38:	add	x3, x3, #0x40
 f3c:	add	x1, x1, #0x0
 f40:	add	x0, x0, #0x0
 f44:	mov	w2, #0x2cc                 	// #716
 f48:	bl	0 <__assert_fail>
 f4c:	cmp	w5, #0x6
 f50:	b.ne	fb4 <GOACC_declare+0x13c>  // b.any
 f54:	ldr	x1, [x22, x19, lsl #3]
 f58:	lsl	x2, x19, #3
 f5c:	ldr	x0, [x21, x19, lsl #3]
 f60:	add	x26, x21, x2
 f64:	add	x25, x22, x2
 f68:	bl	0 <acc_is_present>
 f6c:	cbnz	w0, ed4 <GOACC_declare+0x5c>
 f70:	ldr	x2, [x25]
 f74:	adrp	x0, 0 <goacc_wait>
 f78:	ldr	x1, [x26]
 f7c:	add	x0, x0, #0x0
 f80:	bl	0 <gomp_fatal>
 f84:	cbnz	w5, eb0 <GOACC_declare+0x38>
 f88:	ldr	x1, [x22, x19, lsl #3]
 f8c:	lsl	x3, x19, #3
 f90:	ldr	x0, [x21, x19, lsl #3]
 f94:	add	x26, x21, x3
 f98:	add	x25, x22, x3
 f9c:	bl	0 <acc_is_present>
 fa0:	cbnz	w0, ed4 <GOACC_declare+0x5c>
 fa4:	mov	x3, x25
 fa8:	mov	x2, x26
 fac:	mov	w6, #0x0                   	// #0
 fb0:	b	ec0 <GOACC_declare+0x48>
 fb4:	cmp	w5, #0x7
 fb8:	b.eq	eb0 <GOACC_declare+0x38>  // b.none
 fbc:	b	f28 <GOACC_declare+0xb0>
 fc0:	ldp	x19, x20, [sp, #16]
 fc4:	ldp	x21, x22, [sp, #32]
 fc8:	ldp	x23, x24, [sp, #48]
 fcc:	ldp	x25, x26, [sp, #64]
 fd0:	ldp	x29, x30, [sp], #80
 fd4:	ret
 fd8:	ret

oacc-host.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <host_get_name>:
   0:	adrp	x0, 0 <host_get_name>
   4:	ldr	x0, [x0]
   8:	ret
   c:	nop

0000000000000010 <host_get_caps>:
  10:	adrp	x0, 0 <host_get_name>
  14:	ldr	w0, [x0]
  18:	ret
  1c:	nop

0000000000000020 <host_get_type>:
  20:	adrp	x0, 0 <host_get_name>
  24:	ldr	w0, [x0]
  28:	ret
  2c:	nop

0000000000000030 <host_get_num_devices>:
  30:	mov	w0, #0x1                   	// #1
  34:	ret

0000000000000038 <host_init_device>:
  38:	mov	w0, #0x1                   	// #1
  3c:	ret

0000000000000040 <host_version>:
  40:	mov	w0, #0x1                   	// #1
  44:	ret

0000000000000048 <host_load_image>:
  48:	mov	w0, #0x0                   	// #0
  4c:	ret

0000000000000050 <host_unload_image>:
  50:	mov	w0, #0x1                   	// #1
  54:	ret

0000000000000058 <host_dev2host>:
  58:	mov	w0, #0x1                   	// #1
  5c:	ret

0000000000000060 <host_run>:
  60:	mov	x0, x2
  64:	mov	x16, x1
  68:	br	x16
  6c:	nop

0000000000000070 <host_openacc_exec>:
  70:	mov	x16, x0
  74:	mov	x0, x2
  78:	br	x16
  7c:	nop

0000000000000080 <host_openacc_register_async_cleanup>:
  80:	ret
  84:	nop

0000000000000088 <host_openacc_async_test>:
  88:	mov	w0, #0x1                   	// #1
  8c:	ret

0000000000000090 <host_openacc_async_wait>:
  90:	ret
  94:	nop

0000000000000098 <host_openacc_async_wait_async>:
  98:	ret
  9c:	nop

00000000000000a0 <host_openacc_async_wait_all>:
  a0:	ret
  a4:	nop

00000000000000a8 <host_openacc_create_thread_data>:
  a8:	mov	x0, #0x0                   	// #0
  ac:	ret

00000000000000b0 <host_openacc_destroy_thread_data>:
  b0:	ret
  b4:	nop

00000000000000b8 <host_free>:
  b8:	stp	x29, x30, [sp, #-16]!
  bc:	mov	x0, x1
  c0:	mov	x29, sp
  c4:	bl	0 <free>
  c8:	mov	w0, #0x1                   	// #1
  cc:	ldp	x29, x30, [sp], #16
  d0:	ret
  d4:	nop

00000000000000d8 <host_alloc>:
  d8:	mov	x0, x1
  dc:	b	0 <gomp_malloc>

00000000000000e0 <host_host2dev>:
  e0:	mov	w0, #0x1                   	// #1
  e4:	ret

00000000000000e8 <host_fini_device>:
  e8:	mov	w0, #0x1                   	// #1
  ec:	ret

00000000000000f0 <host_openacc_async_set_async>:
  f0:	ret
  f4:	nop

00000000000000f8 <host_openacc_async_test_all>:
  f8:	mov	w0, #0x1                   	// #1
  fc:	ret

0000000000000100 <host_openacc_async_wait_all_async>:
 100:	ret
 104:	nop

0000000000000108 <goacc_host_init>:
 108:	adrp	x0, 0 <host_get_name>
 10c:	add	x0, x0, #0x0
 110:	str	wzr, [x0, #168]
 114:	b	0 <goacc_register>

oacc-init.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_unlock>:
       0:	mov	x1, x0
       4:	ldxr	w2, [x1]
       8:	stlxr	w3, wzr, [x1]
       c:	cbnz	w3, 4 <gomp_mutex_unlock+0x4>
      10:	tbnz	w2, #31, 18 <gomp_mutex_unlock+0x18>
      14:	ret
      18:	b	0 <gomp_mutex_unlock_slow>
      1c:	nop

0000000000000020 <name_of_acc_device_t>:
      20:	cmp	w0, #0x2
      24:	b.eq	78 <name_of_acc_device_t+0x58>  // b.none
      28:	b.gt	44 <name_of_acc_device_t+0x24>
      2c:	cbz	w0, 60 <name_of_acc_device_t+0x40>
      30:	cmp	w0, #0x1
      34:	b.ne	84 <name_of_acc_device_t+0x64>  // b.any
      38:	adrp	x0, 0 <gomp_mutex_unlock>
      3c:	add	x0, x0, #0x0
      40:	ret
      44:	cmp	w0, #0x4
      48:	b.eq	6c <name_of_acc_device_t+0x4c>  // b.none
      4c:	cmp	w0, #0x5
      50:	b.ne	84 <name_of_acc_device_t+0x64>  // b.any
      54:	adrp	x0, 0 <gomp_mutex_unlock>
      58:	add	x0, x0, #0x0
      5c:	ret
      60:	adrp	x0, 0 <gomp_mutex_unlock>
      64:	add	x0, x0, #0x0
      68:	ret
      6c:	adrp	x0, 0 <gomp_mutex_unlock>
      70:	add	x0, x0, #0x0
      74:	ret
      78:	adrp	x0, 0 <gomp_mutex_unlock>
      7c:	add	x0, x0, #0x0
      80:	ret
      84:	stp	x29, x30, [sp, #-16]!
      88:	mov	w1, w0
      8c:	adrp	x0, 0 <gomp_mutex_unlock>
      90:	mov	x29, sp
      94:	add	x0, x0, #0x0
      98:	bl	0 <gomp_fatal>
      9c:	nop

00000000000000a0 <acc_dev_num_out_of_range>:
      a0:	stp	x29, x30, [sp, #-16]!
      a4:	mov	x29, sp
      a8:	cbnz	w2, c0 <acc_dev_num_out_of_range+0x20>
      ac:	bl	20 <name_of_acc_device_t>
      b0:	mov	x1, x0
      b4:	adrp	x0, 0 <gomp_mutex_unlock>
      b8:	add	x0, x0, #0x0
      bc:	bl	0 <gomp_fatal>
      c0:	adrp	x0, 0 <gomp_mutex_unlock>
      c4:	add	x0, x0, #0x0
      c8:	bl	0 <gomp_fatal>
      cc:	nop

00000000000000d0 <resolve_device>:
      d0:	stp	x29, x30, [sp, #-96]!
      d4:	cmp	w0, #0x2
      d8:	mov	x29, sp
      dc:	stp	x19, x20, [sp, #16]
      e0:	mov	w20, w0
      e4:	stp	x21, x22, [sp, #32]
      e8:	stp	x25, x26, [sp, #64]
      ec:	and	w25, w1, #0xff
      f0:	b.eq	13c <resolve_device+0x6c>  // b.none
      f4:	cmp	w0, #0x4
      f8:	b.eq	178 <resolve_device+0xa8>  // b.none
      fc:	cmp	w0, #0x1
     100:	b.eq	160 <resolve_device+0x90>  // b.none
     104:	cmp	w0, #0x6
     108:	b.le	130 <resolve_device+0x60>
     10c:	cbnz	w25, 2c0 <resolve_device+0x1f0>
     110:	mov	x0, #0x0                   	// #0
     114:	ldp	x19, x20, [sp, #16]
     118:	ldp	x21, x22, [sp, #32]
     11c:	ldp	x25, x26, [sp, #64]
     120:	ldp	x29, x30, [sp], #96
     124:	ret
     128:	ldp	x23, x24, [sp, #48]
     12c:	ldp	x27, x28, [sp, #80]
     130:	cmp	w20, #0x1
     134:	ccmp	w20, #0x4, #0x4, hi  // hi = pmore
     138:	b.eq	280 <resolve_device+0x1b0>  // b.none
     13c:	adrp	x22, 0 <gomp_mutex_unlock>
     140:	add	x22, x22, #0x0
     144:	ldr	x0, [x22, w20, sxtw #3]
     148:	cbz	x0, 244 <resolve_device+0x174>
     14c:	ldp	x19, x20, [sp, #16]
     150:	ldp	x21, x22, [sp, #32]
     154:	ldp	x25, x26, [sp, #64]
     158:	ldp	x29, x30, [sp], #96
     15c:	ret
     160:	stp	x27, x28, [sp, #80]
     164:	adrp	x27, 0 <goacc_device_type>
     168:	ldr	x0, [x27]
     16c:	cbnz	x0, 1c0 <resolve_device+0xf0>
     170:	ldp	x27, x28, [sp, #80]
     174:	nop
     178:	adrp	x22, 0 <gomp_mutex_unlock>
     17c:	add	x22, x22, #0x0
     180:	ldr	x0, [x22, #40]
     184:	cbz	x0, 198 <resolve_device+0xc8>
     188:	ldr	x0, [x0, #48]
     18c:	blr	x0
     190:	cmp	w0, #0x0
     194:	b.gt	270 <resolve_device+0x1a0>
     198:	cmp	w20, #0x1
     19c:	b.eq	278 <resolve_device+0x1a8>  // b.none
     1a0:	cbz	w25, 110 <resolve_device+0x40>
     1a4:	add	x0, x22, #0x30
     1a8:	stp	x23, x24, [sp, #48]
     1ac:	stp	x27, x28, [sp, #80]
     1b0:	bl	0 <gomp_mutex_unlock>
     1b4:	adrp	x0, 0 <gomp_mutex_unlock>
     1b8:	add	x0, x0, #0x0
     1bc:	bl	0 <gomp_fatal>
     1c0:	adrp	x22, 0 <gomp_mutex_unlock>
     1c4:	adrp	x26, 0 <gomp_mutex_unlock>
     1c8:	add	x22, x22, #0x0
     1cc:	add	x26, x26, #0x0
     1d0:	stp	x23, x24, [sp, #48]
     1d4:	adrp	x24, 0 <gomp_mutex_unlock>
     1d8:	add	x24, x24, #0x0
     1dc:	mov	x19, #0x2                   	// #2
     1e0:	ldr	x21, [x22, x19, lsl #3]
     1e4:	mov	w20, w19
     1e8:	cbz	x21, 224 <resolve_device+0x154>
     1ec:	ldr	x23, [x21]
     1f0:	mov	x1, x26
     1f4:	ldr	x28, [x27]
     1f8:	mov	x0, x23
     1fc:	bl	0 <strcmp>
     200:	cmp	w0, #0x0
     204:	csel	x1, x24, x23, eq  // eq = none
     208:	mov	x0, x28
     20c:	bl	0 <strcasecmp>
     210:	cbnz	w0, 224 <resolve_device+0x154>
     214:	ldr	x0, [x21, #48]
     218:	blr	x0
     21c:	cmp	w0, #0x0
     220:	b.gt	128 <resolve_device+0x58>
     224:	add	x19, x19, #0x1
     228:	cmp	x19, #0x6
     22c:	b.ne	1e0 <resolve_device+0x110>  // b.any
     230:	cbnz	w25, 2a8 <resolve_device+0x1d8>
     234:	mov	x0, #0x0                   	// #0
     238:	ldp	x23, x24, [sp, #48]
     23c:	ldp	x27, x28, [sp, #80]
     240:	b	114 <resolve_device+0x44>
     244:	cbz	w25, 110 <resolve_device+0x40>
     248:	add	x0, x22, #0x30
     24c:	stp	x23, x24, [sp, #48]
     250:	stp	x27, x28, [sp, #80]
     254:	bl	0 <gomp_mutex_unlock>
     258:	mov	w0, w20
     25c:	bl	20 <name_of_acc_device_t>
     260:	mov	x1, x0
     264:	adrp	x2, 0 <gomp_mutex_unlock>
     268:	add	x0, x2, #0x0
     26c:	bl	0 <gomp_fatal>
     270:	mov	w20, #0x5                   	// #5
     274:	b	144 <resolve_device+0x74>
     278:	mov	w20, #0x2                   	// #2
     27c:	b	144 <resolve_device+0x74>
     280:	adrp	x3, 0 <gomp_mutex_unlock>
     284:	adrp	x1, 0 <gomp_mutex_unlock>
     288:	adrp	x0, 0 <gomp_mutex_unlock>
     28c:	add	x3, x3, #0x0
     290:	add	x1, x1, #0x0
     294:	add	x0, x0, #0x0
     298:	mov	w2, #0xb6                  	// #182
     29c:	stp	x23, x24, [sp, #48]
     2a0:	stp	x27, x28, [sp, #80]
     2a4:	bl	0 <__assert_fail>
     2a8:	add	x0, x22, #0x30
     2ac:	bl	0 <gomp_mutex_unlock>
     2b0:	ldr	x1, [x27]
     2b4:	adrp	x0, 0 <gomp_mutex_unlock>
     2b8:	add	x0, x0, #0x0
     2bc:	bl	0 <gomp_fatal>
     2c0:	adrp	x22, 0 <gomp_mutex_unlock>
     2c4:	add	x22, x22, #0x0
     2c8:	b	248 <resolve_device+0x178>
     2cc:	nop

00000000000002d0 <goacc_destroy_thread>:
     2d0:	stp	x29, x30, [sp, #-32]!
     2d4:	mov	w2, #0x1                   	// #1
     2d8:	mov	x29, sp
     2dc:	stp	x19, x20, [sp, #16]
     2e0:	adrp	x20, 0 <gomp_mutex_unlock>
     2e4:	add	x20, x20, #0x0
     2e8:	mov	x19, x0
     2ec:	add	x0, x20, #0x34
     2f0:	ldaxr	w1, [x0]
     2f4:	cbnz	w1, 300 <goacc_destroy_thread+0x30>
     2f8:	stxr	w3, w2, [x0]
     2fc:	cbnz	w3, 2f0 <goacc_destroy_thread+0x20>
     300:	cmp	w1, #0x0
     304:	b.ne	3c4 <goacc_destroy_thread+0xf4>  // b.any
     308:	cbz	x19, 390 <goacc_destroy_thread+0xc0>
     30c:	ldr	x1, [x19, #8]
     310:	cbz	x1, 328 <goacc_destroy_thread+0x58>
     314:	ldr	x0, [x19, #40]
     318:	cbz	x0, 328 <goacc_destroy_thread+0x58>
     31c:	ldr	x1, [x1, #264]
     320:	blr	x1
     324:	str	xzr, [x19, #40]
     328:	ldr	x0, [x19, #24]
     32c:	cbnz	x0, 3cc <goacc_destroy_thread+0xfc>
     330:	ldr	x2, [x20, #56]
     334:	cbz	x2, 360 <goacc_destroy_thread+0x90>
     338:	cmp	x19, x2
     33c:	ldr	x1, [x2, #32]
     340:	b.eq	3b0 <goacc_destroy_thread+0xe0>  // b.none
     344:	cbz	x1, 360 <goacc_destroy_thread+0x90>
     348:	cmp	x1, x19
     34c:	ldr	x0, [x1, #32]
     350:	b.eq	384 <goacc_destroy_thread+0xb4>  // b.none
     354:	mov	x2, x1
     358:	mov	x1, x0
     35c:	cbnz	x1, 348 <goacc_destroy_thread+0x78>
     360:	adrp	x3, 0 <gomp_mutex_unlock>
     364:	add	x3, x3, #0x0
     368:	adrp	x1, 0 <gomp_mutex_unlock>
     36c:	adrp	x0, 0 <gomp_mutex_unlock>
     370:	add	x3, x3, #0x10
     374:	add	x1, x1, #0x0
     378:	add	x0, x0, #0x0
     37c:	mov	w2, #0x17c                 	// #380
     380:	bl	0 <__assert_fail>
     384:	str	x0, [x2, #32]
     388:	mov	x0, x19
     38c:	bl	0 <free>
     390:	add	x0, x20, #0x34
     394:	ldxr	w1, [x0]
     398:	stlxr	w2, wzr, [x0]
     39c:	cbnz	w2, 394 <goacc_destroy_thread+0xc4>
     3a0:	tbnz	w1, #31, 3b8 <goacc_destroy_thread+0xe8>
     3a4:	ldp	x19, x20, [sp, #16]
     3a8:	ldp	x29, x30, [sp], #32
     3ac:	ret
     3b0:	str	x1, [x20, #56]
     3b4:	b	388 <goacc_destroy_thread+0xb8>
     3b8:	ldp	x19, x20, [sp, #16]
     3bc:	ldp	x29, x30, [sp], #32
     3c0:	b	0 <gomp_mutex_unlock_slow>
     3c4:	bl	0 <gomp_mutex_lock_slow>
     3c8:	b	308 <goacc_destroy_thread+0x38>
     3cc:	adrp	x3, 0 <gomp_mutex_unlock>
     3d0:	add	x3, x3, #0x0
     3d4:	adrp	x1, 0 <gomp_mutex_unlock>
     3d8:	adrp	x0, 0 <gomp_mutex_unlock>
     3dc:	add	x3, x3, #0x10
     3e0:	add	x1, x1, #0x0
     3e4:	add	x0, x0, #0x0
     3e8:	mov	w2, #0x16b                 	// #363
     3ec:	bl	0 <__assert_fail>

00000000000003f0 <goacc_register>:
     3f0:	stp	x29, x30, [sp, #-32]!
     3f4:	mov	x29, sp
     3f8:	stp	x19, x20, [sp, #16]
     3fc:	mov	x20, x0
     400:	ldr	w0, [x0, #12]
     404:	cbnz	w0, 464 <goacc_register+0x74>
     408:	adrp	x19, 0 <gomp_mutex_unlock>
     40c:	add	x19, x19, #0x0
     410:	add	x0, x19, #0x30
     414:	mov	w2, #0x1                   	// #1
     418:	ldaxr	w1, [x0]
     41c:	cbnz	w1, 428 <goacc_register+0x38>
     420:	stxr	w3, w2, [x0]
     424:	cbnz	w3, 418 <goacc_register+0x28>
     428:	cmp	w1, #0x0
     42c:	b.ne	4c4 <goacc_register+0xd4>  // b.any
     430:	ldr	w0, [x20, #16]
     434:	cmp	w0, #0x4
     438:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     43c:	b.ls	47c <goacc_register+0x8c>  // b.plast
     440:	mov	w0, w0
     444:	ldr	x1, [x19, x0, lsl #3]
     448:	cbnz	x1, 4a0 <goacc_register+0xb0>
     44c:	str	x20, [x19, x0, lsl #3]
     450:	add	x0, x19, #0x30
     454:	ldxr	w1, [x0]
     458:	stlxr	w2, wzr, [x0]
     45c:	cbnz	w2, 454 <goacc_register+0x64>
     460:	tbnz	w1, #31, 470 <goacc_register+0x80>
     464:	ldp	x19, x20, [sp, #16]
     468:	ldp	x29, x30, [sp], #32
     46c:	ret
     470:	ldp	x19, x20, [sp, #16]
     474:	ldp	x29, x30, [sp], #32
     478:	b	0 <gomp_mutex_unlock_slow>
     47c:	adrp	x3, 0 <gomp_mutex_unlock>
     480:	add	x3, x3, #0x0
     484:	adrp	x1, 0 <gomp_mutex_unlock>
     488:	adrp	x0, 0 <gomp_mutex_unlock>
     48c:	add	x3, x3, #0x28
     490:	add	x1, x1, #0x0
     494:	add	x0, x0, #0x0
     498:	mov	w2, #0x4c                  	// #76
     49c:	bl	0 <__assert_fail>
     4a0:	adrp	x3, 0 <gomp_mutex_unlock>
     4a4:	add	x3, x3, #0x0
     4a8:	adrp	x1, 0 <gomp_mutex_unlock>
     4ac:	adrp	x0, 0 <gomp_mutex_unlock>
     4b0:	add	x3, x3, #0x28
     4b4:	add	x1, x1, #0x0
     4b8:	add	x0, x0, #0x0
     4bc:	mov	w2, #0x4f                  	// #79
     4c0:	bl	0 <__assert_fail>
     4c4:	bl	0 <gomp_mutex_lock_slow>
     4c8:	b	430 <goacc_register+0x40>
     4cc:	nop

00000000000004d0 <goacc_attach_host_thread_to_device>:
     4d0:	stp	x29, x30, [sp, #-64]!
     4d4:	mov	x29, sp
     4d8:	stp	x21, x22, [sp, #32]
     4dc:	mrs	x22, tpidr_el0
     4e0:	add	x1, x22, #0x0, lsl #12
     4e4:	add	x1, x1, #0x0
     4e8:	str	x23, [sp, #48]
     4ec:	stp	x19, x20, [sp, #16]
     4f0:	mov	w19, w0
     4f4:	ldr	x23, [x1]
     4f8:	cbz	x23, 630 <goacc_attach_host_thread_to_device+0x160>
     4fc:	ldr	x0, [x23, #8]
     500:	cbz	x0, 578 <goacc_attach_host_thread_to_device+0xa8>
     504:	ldr	w0, [x0, #12]
     508:	cmp	w19, #0x0
     50c:	ccmp	w0, w19, #0x4, ge  // ge = tcont
     510:	b.eq	644 <goacc_attach_host_thread_to_device+0x174>  // b.none
     514:	ldr	x20, [x23]
     518:	cbz	x20, 590 <goacc_attach_host_thread_to_device+0xc0>
     51c:	ldr	x0, [x20, #48]
     520:	blr	x0
     524:	mov	w2, w0
     528:	cmp	w19, #0x0
     52c:	csel	w0, w19, wzr, ge  // ge = tcont
     530:	cmp	w2, w0
     534:	b.le	658 <goacc_attach_host_thread_to_device+0x188>
     538:	mov	w1, #0x130                 	// #304
     53c:	mov	w0, w19
     540:	smaddl	x19, w19, w1, x20
     544:	ldr	x1, [x19, #256]
     548:	stp	x20, x19, [x23]
     54c:	stp	xzr, xzr, [x23, #16]
     550:	blr	x1
     554:	ldp	x21, x22, [sp, #32]
     558:	ldr	x1, [x19, #248]
     55c:	ldp	x19, x20, [sp, #16]
     560:	str	x0, [x23, #40]
     564:	ldr	x23, [sp, #48]
     568:	mov	x16, x1
     56c:	ldp	x29, x30, [sp], #64
     570:	mov	w0, #0xfffffffe            	// #-2
     574:	br	x16
     578:	adrp	x0, 0 <goacc_device_num>
     57c:	cmp	w19, #0x0
     580:	ldr	x20, [x23]
     584:	ldr	w0, [x0]
     588:	csel	w19, w0, w19, lt  // lt = tstop
     58c:	cbnz	x20, 51c <goacc_attach_host_thread_to_device+0x4c>
     590:	adrp	x21, 0 <gomp_mutex_unlock>
     594:	add	x21, x21, #0x0
     598:	ldr	x20, [x21, #64]
     59c:	cbz	x20, 664 <goacc_attach_host_thread_to_device+0x194>
     5a0:	ldr	x0, [x20, #48]
     5a4:	blr	x0
     5a8:	mov	w2, w0
     5ac:	cmp	w19, #0x0
     5b0:	csel	w0, w19, wzr, ge  // ge = tcont
     5b4:	cmp	w0, w2
     5b8:	b.ge	658 <goacc_attach_host_thread_to_device+0x188>  // b.tcont
     5bc:	cbnz	x23, 538 <goacc_attach_host_thread_to_device+0x68>
     5c0:	mov	x0, #0x30                  	// #48
     5c4:	bl	0 <gomp_malloc>
     5c8:	mov	x23, x0
     5cc:	mov	x1, x0
     5d0:	ldr	w0, [x21, #72]
     5d4:	add	x22, x22, #0x0, lsl #12
     5d8:	add	x22, x22, #0x0
     5dc:	str	x23, [x22]
     5e0:	bl	0 <pthread_setspecific>
     5e4:	add	x0, x21, #0x34
     5e8:	mov	w2, #0x1                   	// #1
     5ec:	ldaxr	w1, [x0]
     5f0:	cbnz	w1, 5fc <goacc_attach_host_thread_to_device+0x12c>
     5f4:	stxr	w3, w2, [x0]
     5f8:	cbnz	w3, 5ec <goacc_attach_host_thread_to_device+0x11c>
     5fc:	cmp	w1, #0x0
     600:	b.ne	688 <goacc_attach_host_thread_to_device+0x1b8>  // b.any
     604:	add	x21, x21, #0x34
     608:	ldur	x0, [x21, #4]
     60c:	stur	x23, [x21, #4]
     610:	str	x0, [x23, #32]
     614:	ldxr	w0, [x21]
     618:	stlxr	w1, wzr, [x21]
     61c:	cbnz	w1, 614 <goacc_attach_host_thread_to_device+0x144>
     620:	tbz	w0, #31, 538 <goacc_attach_host_thread_to_device+0x68>
     624:	mov	x0, x21
     628:	bl	0 <gomp_mutex_unlock_slow>
     62c:	b	538 <goacc_attach_host_thread_to_device+0x68>
     630:	adrp	x0, 0 <goacc_device_num>
     634:	cmp	w19, #0x0
     638:	ldr	w0, [x0]
     63c:	csel	w19, w0, w19, lt  // lt = tstop
     640:	b	590 <goacc_attach_host_thread_to_device+0xc0>
     644:	ldp	x19, x20, [sp, #16]
     648:	ldp	x21, x22, [sp, #32]
     64c:	ldr	x23, [sp, #48]
     650:	ldp	x29, x30, [sp], #64
     654:	ret
     658:	ldr	w0, [x20, #16]
     65c:	mov	w1, w19
     660:	bl	a0 <acc_dev_num_out_of_range>
     664:	adrp	x3, 0 <gomp_mutex_unlock>
     668:	add	x3, x3, #0x0
     66c:	adrp	x1, 0 <gomp_mutex_unlock>
     670:	adrp	x0, 0 <gomp_mutex_unlock>
     674:	add	x3, x3, #0x38
     678:	add	x1, x1, #0x0
     67c:	add	x0, x0, #0x0
     680:	mov	w2, #0x19a                 	// #410
     684:	bl	0 <__assert_fail>
     688:	bl	0 <gomp_mutex_lock_slow>
     68c:	b	604 <goacc_attach_host_thread_to_device+0x134>

0000000000000690 <acc_init>:
     690:	stp	x29, x30, [sp, #-48]!
     694:	mov	x29, sp
     698:	stp	x19, x20, [sp, #16]
     69c:	adrp	x19, 0 <gomp_mutex_unlock>
     6a0:	add	x19, x19, #0x0
     6a4:	stp	x21, x22, [sp, #32]
     6a8:	mov	w22, w0
     6ac:	bl	0 <gomp_init_targets_once>
     6b0:	add	x0, x19, #0x30
     6b4:	mov	w2, #0x1                   	// #1
     6b8:	ldaxr	w1, [x0]
     6bc:	cbnz	w1, 6c8 <acc_init+0x38>
     6c0:	stxr	w3, w2, [x0]
     6c4:	cbnz	w3, 6b8 <acc_init+0x28>
     6c8:	cmp	w1, #0x0
     6cc:	b.ne	7bc <acc_init+0x12c>  // b.any
     6d0:	mov	w1, #0x1                   	// #1
     6d4:	mov	w0, w22
     6d8:	bl	d0 <resolve_device>
     6dc:	mov	x21, x0
     6e0:	ldr	x0, [x0, #48]
     6e4:	blr	x0
     6e8:	cmp	w0, #0x0
     6ec:	adrp	x1, 0 <goacc_device_num>
     6f0:	b.le	78c <acc_init+0xfc>
     6f4:	ldr	w20, [x1]
     6f8:	cmp	w0, w20
     6fc:	b.le	78c <acc_init+0xfc>
     700:	mov	w1, #0x130                 	// #304
     704:	mov	w0, #0x1                   	// #1
     708:	smaddl	x20, w20, w1, x21
     70c:	add	x22, x20, #0xa8
     710:	ldaxr	w1, [x22]
     714:	cbnz	w1, 720 <acc_init+0x90>
     718:	stxr	w2, w0, [x22]
     71c:	cbnz	w2, 710 <acc_init+0x80>
     720:	cmp	w1, #0x0
     724:	b.ne	79c <acc_init+0x10c>  // b.any
     728:	ldr	w0, [x20, #172]
     72c:	cmp	w0, #0x1
     730:	b.eq	7a8 <acc_init+0x118>  // b.none
     734:	mov	x0, x20
     738:	bl	0 <gomp_init_device>
     73c:	ldxr	w0, [x22]
     740:	stlxr	w1, wzr, [x22]
     744:	cbnz	w1, 73c <acc_init+0xac>
     748:	tbnz	w0, #31, 778 <acc_init+0xe8>
     74c:	add	x0, x19, #0x30
     750:	str	x21, [x19, #64]
     754:	ldxr	w1, [x0]
     758:	stlxr	w2, wzr, [x0]
     75c:	cbnz	w2, 754 <acc_init+0xc4>
     760:	tbnz	w1, #31, 784 <acc_init+0xf4>
     764:	ldp	x19, x20, [sp, #16]
     768:	mov	w0, #0xffffffff            	// #-1
     76c:	ldp	x21, x22, [sp, #32]
     770:	ldp	x29, x30, [sp], #48
     774:	b	4d0 <goacc_attach_host_thread_to_device>
     778:	mov	x0, x22
     77c:	bl	0 <gomp_mutex_unlock_slow>
     780:	b	74c <acc_init+0xbc>
     784:	bl	0 <gomp_mutex_unlock_slow>
     788:	b	764 <acc_init+0xd4>
     78c:	ldr	w1, [x1]
     790:	mov	w2, w0
     794:	mov	w0, w22
     798:	bl	a0 <acc_dev_num_out_of_range>
     79c:	mov	x0, x22
     7a0:	bl	0 <gomp_mutex_lock_slow>
     7a4:	b	728 <acc_init+0x98>
     7a8:	mov	x0, x22
     7ac:	bl	0 <gomp_mutex_unlock>
     7b0:	adrp	x0, 0 <gomp_mutex_unlock>
     7b4:	add	x0, x0, #0x0
     7b8:	bl	0 <gomp_fatal>
     7bc:	bl	0 <gomp_mutex_lock_slow>
     7c0:	b	6d0 <acc_init+0x40>
     7c4:	nop

00000000000007c8 <acc_shutdown>:
     7c8:	stp	x29, x30, [sp, #-80]!
     7cc:	mov	x29, sp
     7d0:	stp	x19, x20, [sp, #16]
     7d4:	mov	w19, w0
     7d8:	stp	x21, x22, [sp, #32]
     7dc:	adrp	x21, 0 <gomp_mutex_unlock>
     7e0:	add	x21, x21, #0x0
     7e4:	stp	x23, x24, [sp, #48]
     7e8:	str	x25, [sp, #64]
     7ec:	bl	0 <gomp_init_targets_once>
     7f0:	add	x0, x21, #0x30
     7f4:	mov	w2, #0x1                   	// #1
     7f8:	ldaxr	w1, [x0]
     7fc:	cbnz	w1, 808 <acc_shutdown+0x40>
     800:	stxr	w3, w2, [x0]
     804:	cbnz	w3, 7f8 <acc_shutdown+0x30>
     808:	cmp	w1, #0x0
     80c:	b.ne	ac4 <acc_shutdown+0x2fc>  // b.any
     810:	mov	w1, #0x1                   	// #1
     814:	mov	w0, w19
     818:	bl	d0 <resolve_device>
     81c:	mov	x20, x0
     820:	ldr	x0, [x0, #48]
     824:	blr	x0
     828:	mov	w22, w0
     82c:	cmp	w0, #0x0
     830:	b.le	890 <acc_shutdown+0xc8>
     834:	sub	w23, w0, #0x1
     838:	add	x0, x20, #0x1d8
     83c:	mov	w1, #0x130                 	// #304
     840:	add	x19, x20, #0xa8
     844:	mov	w25, #0x1                   	// #1
     848:	umaddl	x23, w23, w1, x0
     84c:	nop
     850:	sub	x24, x19, #0xa8
     854:	ldaxr	w1, [x19]
     858:	cbnz	w1, 864 <acc_shutdown+0x9c>
     85c:	stxr	w0, w25, [x19]
     860:	cbnz	w0, 854 <acc_shutdown+0x8c>
     864:	cmp	w1, #0x0
     868:	b.ne	aa8 <acc_shutdown+0x2e0>  // b.any
     86c:	mov	x0, x24
     870:	bl	0 <gomp_unload_device>
     874:	ldxr	w0, [x19]
     878:	stlxr	w1, wzr, [x19]
     87c:	cbnz	w1, 874 <acc_shutdown+0xac>
     880:	tbnz	w0, #31, a1c <acc_shutdown+0x254>
     884:	add	x19, x19, #0x130
     888:	cmp	x19, x23
     88c:	b.ne	850 <acc_shutdown+0x88>  // b.any
     890:	add	x0, x21, #0x34
     894:	mov	w2, #0x1                   	// #1
     898:	ldaxr	w1, [x0]
     89c:	cbnz	w1, 8a8 <acc_shutdown+0xe0>
     8a0:	stxr	w3, w2, [x0]
     8a4:	cbnz	w3, 898 <acc_shutdown+0xd0>
     8a8:	cmp	w1, #0x0
     8ac:	b.ne	acc <acc_shutdown+0x304>  // b.any
     8b0:	ldr	x19, [x21, #56]
     8b4:	cbz	x19, 938 <acc_shutdown+0x170>
     8b8:	mov	w23, #0x1                   	// #1
     8bc:	nop
     8c0:	ldr	x0, [x19, #40]
     8c4:	cbz	x0, 8d0 <acc_shutdown+0x108>
     8c8:	ldr	x1, [x20, #264]
     8cc:	blr	x1
     8d0:	ldr	x0, [x19, #24]
     8d4:	str	xzr, [x19, #40]
     8d8:	cbnz	x0, a54 <acc_shutdown+0x28c>
     8dc:	ldr	x0, [x19, #16]
     8e0:	cbnz	x0, a74 <acc_shutdown+0x2ac>
     8e4:	ldr	x0, [x19, #8]
     8e8:	cbz	x0, 930 <acc_shutdown+0x168>
     8ec:	add	x0, x0, #0xa8
     8f0:	ldaxr	w1, [x0]
     8f4:	cbnz	w1, 900 <acc_shutdown+0x138>
     8f8:	stxr	w2, w23, [x0]
     8fc:	cbnz	w2, 8f0 <acc_shutdown+0x128>
     900:	cmp	w1, #0x0
     904:	b.ne	a94 <acc_shutdown+0x2cc>  // b.any
     908:	ldr	x0, [x19, #8]
     90c:	add	x0, x0, #0xa0
     910:	bl	0 <gomp_free_memmap>
     914:	ldr	x0, [x19, #8]
     918:	add	x0, x0, #0xa8
     91c:	ldxr	w1, [x0]
     920:	stlxr	w2, wzr, [x0]
     924:	cbnz	w2, 91c <acc_shutdown+0x154>
     928:	tbnz	w1, #31, a14 <acc_shutdown+0x24c>
     92c:	stp	xzr, xzr, [x19]
     930:	ldr	x19, [x19, #32]
     934:	cbnz	x19, 8c0 <acc_shutdown+0xf8>
     938:	add	x0, x21, #0x34
     93c:	ldxr	w1, [x0]
     940:	stlxr	w2, wzr, [x0]
     944:	cbnz	w2, 93c <acc_shutdown+0x174>
     948:	tbnz	w1, #31, a4c <acc_shutdown+0x284>
     94c:	cmp	w22, #0x0
     950:	b.le	a28 <acc_shutdown+0x260>
     954:	add	x19, x20, #0xa8
     958:	mov	w24, #0x0                   	// #0
     95c:	mov	w20, #0x1                   	// #1
     960:	mov	w23, #0x0                   	// #0
     964:	mov	w25, w20
     968:	b	97c <acc_shutdown+0x1b4>
     96c:	add	w23, w23, #0x1
     970:	add	x19, x19, #0x130
     974:	cmp	w22, w23
     978:	b.le	9e0 <acc_shutdown+0x218>
     97c:	ldaxr	w1, [x19]
     980:	cbnz	w1, 98c <acc_shutdown+0x1c4>
     984:	stxr	w0, w25, [x19]
     988:	cbnz	w0, 97c <acc_shutdown+0x1b4>
     98c:	cmp	w1, #0x0
     990:	b.ne	a9c <acc_shutdown+0x2d4>  // b.any
     994:	ldr	w1, [x19, #4]
     998:	cmp	w1, #0x1
     99c:	b.ne	9b8 <acc_shutdown+0x1f0>  // b.any
     9a0:	ldur	w0, [x19, #-156]
     9a4:	mov	w24, w1
     9a8:	ldur	x1, [x19, #-104]
     9ac:	blr	x1
     9b0:	and	w20, w20, w0
     9b4:	str	wzr, [x19, #4]
     9b8:	ldxr	w0, [x19]
     9bc:	stlxr	w1, wzr, [x19]
     9c0:	cbnz	w1, 9b8 <acc_shutdown+0x1f0>
     9c4:	tbz	w0, #31, 96c <acc_shutdown+0x1a4>
     9c8:	mov	x0, x19
     9cc:	add	w23, w23, #0x1
     9d0:	bl	0 <gomp_mutex_unlock_slow>
     9d4:	add	x19, x19, #0x130
     9d8:	cmp	w22, w23
     9dc:	b.gt	97c <acc_shutdown+0x1b4>
     9e0:	cbz	w20, ad4 <acc_shutdown+0x30c>
     9e4:	cbz	w24, a28 <acc_shutdown+0x260>
     9e8:	add	x0, x21, #0x30
     9ec:	ldxr	w1, [x0]
     9f0:	stlxr	w2, wzr, [x0]
     9f4:	cbnz	w2, 9ec <acc_shutdown+0x224>
     9f8:	tbnz	w1, #31, a34 <acc_shutdown+0x26c>
     9fc:	ldp	x19, x20, [sp, #16]
     a00:	ldp	x21, x22, [sp, #32]
     a04:	ldp	x23, x24, [sp, #48]
     a08:	ldr	x25, [sp, #64]
     a0c:	ldp	x29, x30, [sp], #80
     a10:	ret
     a14:	bl	0 <gomp_mutex_unlock_slow>
     a18:	b	92c <acc_shutdown+0x164>
     a1c:	mov	x0, x19
     a20:	bl	0 <gomp_mutex_unlock_slow>
     a24:	b	884 <acc_shutdown+0xbc>
     a28:	adrp	x0, 0 <gomp_mutex_unlock>
     a2c:	add	x0, x0, #0x0
     a30:	bl	0 <gomp_fatal>
     a34:	ldp	x19, x20, [sp, #16]
     a38:	ldp	x21, x22, [sp, #32]
     a3c:	ldp	x23, x24, [sp, #48]
     a40:	ldr	x25, [sp, #64]
     a44:	ldp	x29, x30, [sp], #80
     a48:	b	0 <gomp_mutex_unlock_slow>
     a4c:	bl	0 <gomp_mutex_unlock_slow>
     a50:	b	94c <acc_shutdown+0x184>
     a54:	add	x0, x21, #0x34
     a58:	ldxr	w1, [x0]
     a5c:	stlxr	w2, wzr, [x0]
     a60:	cbnz	w2, a58 <acc_shutdown+0x290>
     a64:	tbnz	w1, #31, ab4 <acc_shutdown+0x2ec>
     a68:	adrp	x0, 0 <gomp_mutex_unlock>
     a6c:	add	x0, x0, #0x0
     a70:	bl	0 <gomp_fatal>
     a74:	add	x0, x21, #0x34
     a78:	ldxr	w1, [x0]
     a7c:	stlxr	w2, wzr, [x0]
     a80:	cbnz	w2, a78 <acc_shutdown+0x2b0>
     a84:	tbnz	w1, #31, abc <acc_shutdown+0x2f4>
     a88:	adrp	x0, 0 <gomp_mutex_unlock>
     a8c:	add	x0, x0, #0x0
     a90:	bl	0 <gomp_fatal>
     a94:	bl	0 <gomp_mutex_lock_slow>
     a98:	b	908 <acc_shutdown+0x140>
     a9c:	mov	x0, x19
     aa0:	bl	0 <gomp_mutex_lock_slow>
     aa4:	b	994 <acc_shutdown+0x1cc>
     aa8:	mov	x0, x19
     aac:	bl	0 <gomp_mutex_lock_slow>
     ab0:	b	86c <acc_shutdown+0xa4>
     ab4:	bl	0 <gomp_mutex_unlock_slow>
     ab8:	b	a68 <acc_shutdown+0x2a0>
     abc:	bl	0 <gomp_mutex_unlock_slow>
     ac0:	b	a88 <acc_shutdown+0x2c0>
     ac4:	bl	0 <gomp_mutex_lock_slow>
     ac8:	b	810 <acc_shutdown+0x48>
     acc:	bl	0 <gomp_mutex_lock_slow>
     ad0:	b	8b0 <acc_shutdown+0xe8>
     ad4:	adrp	x0, 0 <gomp_mutex_unlock>
     ad8:	add	x0, x0, #0x0
     adc:	bl	0 <gomp_fatal>

0000000000000ae0 <acc_get_num_devices>:
     ae0:	cbnz	w0, aec <acc_get_num_devices+0xc>
     ae4:	mov	w0, #0x0                   	// #0
     ae8:	ret
     aec:	stp	x29, x30, [sp, #-32]!
     af0:	mov	x29, sp
     af4:	stp	x19, x20, [sp, #16]
     af8:	mov	w19, w0
     afc:	bl	0 <gomp_init_targets_once>
     b00:	adrp	x1, 0 <gomp_mutex_unlock>
     b04:	add	x20, x1, #0x0
     b08:	add	x0, x20, #0x30
     b0c:	mov	w2, #0x1                   	// #1
     b10:	ldaxr	w1, [x0]
     b14:	cbnz	w1, b20 <acc_get_num_devices+0x40>
     b18:	stxr	w3, w2, [x0]
     b1c:	cbnz	w3, b10 <acc_get_num_devices+0x30>
     b20:	cmp	w1, #0x0
     b24:	b.ne	b88 <acc_get_num_devices+0xa8>  // b.any
     b28:	mov	w0, w19
     b2c:	mov	w1, #0x0                   	// #0
     b30:	add	x20, x20, #0x30
     b34:	bl	d0 <resolve_device>
     b38:	mov	x19, x0
     b3c:	ldxr	w0, [x20]
     b40:	stlxr	w1, wzr, [x20]
     b44:	cbnz	w1, b3c <acc_get_num_devices+0x5c>
     b48:	tbnz	w0, #31, b7c <acc_get_num_devices+0x9c>
     b4c:	cbz	x19, b6c <acc_get_num_devices+0x8c>
     b50:	ldr	x0, [x19, #48]
     b54:	blr	x0
     b58:	cmp	w0, #0x0
     b5c:	csel	w0, w0, wzr, ge  // ge = tcont
     b60:	ldp	x19, x20, [sp, #16]
     b64:	ldp	x29, x30, [sp], #32
     b68:	ret
     b6c:	mov	w0, #0x0                   	// #0
     b70:	ldp	x19, x20, [sp, #16]
     b74:	ldp	x29, x30, [sp], #32
     b78:	ret
     b7c:	mov	x0, x20
     b80:	bl	0 <gomp_mutex_unlock_slow>
     b84:	b	b4c <acc_get_num_devices+0x6c>
     b88:	bl	0 <gomp_mutex_lock_slow>
     b8c:	b	b28 <acc_get_num_devices+0x48>

0000000000000b90 <acc_set_device_type>:
     b90:	mrs	x1, tpidr_el0
     b94:	stp	x29, x30, [sp, #-64]!
     b98:	add	x1, x1, #0x0, lsl #12
     b9c:	add	x1, x1, #0x0
     ba0:	mov	x29, sp
     ba4:	stp	x19, x20, [sp, #16]
     ba8:	mov	w20, w0
     bac:	adrp	x19, 0 <gomp_mutex_unlock>
     bb0:	add	x19, x19, #0x0
     bb4:	stp	x21, x22, [sp, #32]
     bb8:	str	x23, [sp, #48]
     bbc:	ldr	x23, [x1]
     bc0:	bl	0 <gomp_init_targets_once>
     bc4:	add	x0, x19, #0x30
     bc8:	mov	w2, #0x1                   	// #1
     bcc:	ldaxr	w1, [x0]
     bd0:	cbnz	w1, bdc <acc_set_device_type+0x4c>
     bd4:	stxr	w3, w2, [x0]
     bd8:	cbnz	w3, bcc <acc_set_device_type+0x3c>
     bdc:	cmp	w1, #0x0
     be0:	b.ne	cb8 <acc_set_device_type+0x128>  // b.any
     be4:	mov	w0, w20
     be8:	mov	w1, #0x1                   	// #1
     bec:	bl	d0 <resolve_device>
     bf0:	mov	x20, x0
     bf4:	adrp	x2, 0 <goacc_device_num>
     bf8:	mov	w1, #0x130                 	// #304
     bfc:	mov	w0, #0x1                   	// #1
     c00:	str	x20, [x19, #64]
     c04:	ldr	w21, [x2]
     c08:	smaddl	x21, w21, w1, x20
     c0c:	add	x22, x21, #0xa8
     c10:	ldaxr	w1, [x22]
     c14:	cbnz	w1, c20 <acc_set_device_type+0x90>
     c18:	stxr	w2, w0, [x22]
     c1c:	cbnz	w2, c10 <acc_set_device_type+0x80>
     c20:	cmp	w1, #0x0
     c24:	b.ne	cac <acc_set_device_type+0x11c>  // b.any
     c28:	ldr	w0, [x21, #172]
     c2c:	cbz	w0, c88 <acc_set_device_type+0xf8>
     c30:	ldxr	w0, [x22]
     c34:	stlxr	w1, wzr, [x22]
     c38:	cbnz	w1, c30 <acc_set_device_type+0xa0>
     c3c:	tbnz	w0, #31, ca0 <acc_set_device_type+0x110>
     c40:	add	x19, x19, #0x30
     c44:	ldxr	w0, [x19]
     c48:	stlxr	w1, wzr, [x19]
     c4c:	cbnz	w1, c44 <acc_set_device_type+0xb4>
     c50:	tbnz	w0, #31, c94 <acc_set_device_type+0x104>
     c54:	cbz	x23, c70 <acc_set_device_type+0xe0>
     c58:	ldr	x0, [x23]
     c5c:	cmp	x0, x20
     c60:	b.eq	c70 <acc_set_device_type+0xe0>  // b.none
     c64:	ldr	x0, [x23, #24]
     c68:	stp	xzr, xzr, [x23]
     c6c:	cbnz	x0, cc0 <acc_set_device_type+0x130>
     c70:	ldp	x19, x20, [sp, #16]
     c74:	mov	w0, #0xffffffff            	// #-1
     c78:	ldp	x21, x22, [sp, #32]
     c7c:	ldr	x23, [sp, #48]
     c80:	ldp	x29, x30, [sp], #64
     c84:	b	4d0 <goacc_attach_host_thread_to_device>
     c88:	mov	x0, x21
     c8c:	bl	0 <gomp_init_device>
     c90:	b	c30 <acc_set_device_type+0xa0>
     c94:	mov	x0, x19
     c98:	bl	0 <gomp_mutex_unlock_slow>
     c9c:	b	c54 <acc_set_device_type+0xc4>
     ca0:	mov	x0, x22
     ca4:	bl	0 <gomp_mutex_unlock_slow>
     ca8:	b	c40 <acc_set_device_type+0xb0>
     cac:	mov	x0, x22
     cb0:	bl	0 <gomp_mutex_lock_slow>
     cb4:	b	c28 <acc_set_device_type+0x98>
     cb8:	bl	0 <gomp_mutex_lock_slow>
     cbc:	b	be4 <acc_set_device_type+0x54>
     cc0:	adrp	x0, 0 <gomp_mutex_unlock>
     cc4:	add	x0, x0, #0x0
     cc8:	bl	0 <gomp_fatal>
     ccc:	nop

0000000000000cd0 <acc_get_device_type>:
     cd0:	mrs	x0, tpidr_el0
     cd4:	stp	x29, x30, [sp, #-32]!
     cd8:	add	x0, x0, #0x0, lsl #12
     cdc:	add	x0, x0, #0x0
     ce0:	mov	x29, sp
     ce4:	ldr	x0, [x0]
     ce8:	cbz	x0, d0c <acc_get_device_type+0x3c>
     cec:	ldr	x0, [x0]
     cf0:	cbz	x0, d0c <acc_get_device_type+0x3c>
     cf4:	ldr	w0, [x0, #16]
     cf8:	cmp	w0, #0x1
     cfc:	ccmp	w0, #0x4, #0x4, ne  // ne = any
     d00:	b.eq	d78 <acc_get_device_type+0xa8>  // b.none
     d04:	ldp	x29, x30, [sp], #32
     d08:	ret
     d0c:	stp	x19, x20, [sp, #16]
     d10:	bl	0 <gomp_init_targets_once>
     d14:	adrp	x1, 0 <gomp_mutex_unlock>
     d18:	add	x19, x1, #0x0
     d1c:	mov	w2, #0x1                   	// #1
     d20:	add	x0, x19, #0x30
     d24:	ldaxr	w1, [x0]
     d28:	cbnz	w1, d34 <acc_get_device_type+0x64>
     d2c:	stxr	w3, w2, [x0]
     d30:	cbnz	w3, d24 <acc_get_device_type+0x54>
     d34:	cmp	w1, #0x0
     d38:	b.ne	da0 <acc_get_device_type+0xd0>  // b.any
     d3c:	mov	w1, #0x1                   	// #1
     d40:	mov	w0, #0x1                   	// #1
     d44:	add	x19, x19, #0x30
     d48:	bl	d0 <resolve_device>
     d4c:	mov	x20, x0
     d50:	ldxr	w0, [x19]
     d54:	stlxr	w1, wzr, [x19]
     d58:	cbnz	w1, d50 <acc_get_device_type+0x80>
     d5c:	tbnz	w0, #31, d6c <acc_get_device_type+0x9c>
     d60:	ldr	w0, [x20, #16]
     d64:	ldp	x19, x20, [sp, #16]
     d68:	b	cf8 <acc_get_device_type+0x28>
     d6c:	mov	x0, x19
     d70:	bl	0 <gomp_mutex_unlock_slow>
     d74:	b	d60 <acc_get_device_type+0x90>
     d78:	adrp	x3, 0 <gomp_mutex_unlock>
     d7c:	add	x3, x3, #0x0
     d80:	adrp	x1, 0 <gomp_mutex_unlock>
     d84:	adrp	x0, 0 <gomp_mutex_unlock>
     d88:	add	x3, x3, #0x60
     d8c:	add	x1, x1, #0x0
     d90:	add	x0, x0, #0x0
     d94:	mov	w2, #0x226                 	// #550
     d98:	stp	x19, x20, [sp, #16]
     d9c:	bl	0 <__assert_fail>
     da0:	bl	0 <gomp_mutex_lock_slow>
     da4:	b	d3c <acc_get_device_type+0x6c>

0000000000000da8 <acc_get_device_num>:
     da8:	stp	x29, x30, [sp, #-48]!
     dac:	mrs	x1, tpidr_el0
     db0:	add	x1, x1, #0x0, lsl #12
     db4:	add	x1, x1, #0x0
     db8:	mov	x29, sp
     dbc:	stp	x19, x20, [sp, #16]
     dc0:	cmp	w0, #0x5
     dc4:	mov	w20, w0
     dc8:	str	x21, [sp, #32]
     dcc:	ldr	x21, [x1]
     dd0:	b.gt	e74 <acc_get_device_num+0xcc>
     dd4:	bl	0 <gomp_init_targets_once>
     dd8:	adrp	x1, 0 <gomp_mutex_unlock>
     ddc:	add	x19, x1, #0x0
     de0:	add	x0, x19, #0x30
     de4:	mov	w2, #0x1                   	// #1
     de8:	ldaxr	w1, [x0]
     dec:	cbnz	w1, df8 <acc_get_device_num+0x50>
     df0:	stxr	w3, w2, [x0]
     df4:	cbnz	w3, de8 <acc_get_device_num+0x40>
     df8:	cmp	w1, #0x0
     dfc:	b.ne	e84 <acc_get_device_num+0xdc>  // b.any
     e00:	mov	w0, w20
     e04:	mov	w1, #0x1                   	// #1
     e08:	add	x19, x19, #0x30
     e0c:	bl	d0 <resolve_device>
     e10:	mov	x20, x0
     e14:	ldxr	w0, [x19]
     e18:	stlxr	w1, wzr, [x19]
     e1c:	cbnz	w1, e14 <acc_get_device_num+0x6c>
     e20:	tbnz	w0, #31, e68 <acc_get_device_num+0xc0>
     e24:	cbz	x21, e34 <acc_get_device_num+0x8c>
     e28:	ldr	x0, [x21]
     e2c:	cmp	x0, x20
     e30:	b.eq	e4c <acc_get_device_num+0xa4>  // b.none
     e34:	adrp	x0, 0 <goacc_device_num>
     e38:	ldp	x19, x20, [sp, #16]
     e3c:	ldr	w0, [x0]
     e40:	ldr	x21, [sp, #32]
     e44:	ldp	x29, x30, [sp], #48
     e48:	ret
     e4c:	ldr	x0, [x21, #8]
     e50:	cbz	x0, e34 <acc_get_device_num+0x8c>
     e54:	ldr	w0, [x0, #12]
     e58:	ldp	x19, x20, [sp, #16]
     e5c:	ldr	x21, [sp, #32]
     e60:	ldp	x29, x30, [sp], #48
     e64:	ret
     e68:	mov	x0, x19
     e6c:	bl	0 <gomp_mutex_unlock_slow>
     e70:	b	e24 <acc_get_device_num+0x7c>
     e74:	mov	w1, w0
     e78:	adrp	x0, 0 <gomp_mutex_unlock>
     e7c:	add	x0, x0, #0x0
     e80:	bl	0 <gomp_fatal>
     e84:	bl	0 <gomp_mutex_lock_slow>
     e88:	b	e00 <acc_get_device_num+0x58>
     e8c:	nop

0000000000000e90 <acc_set_device_num>:
     e90:	stp	x29, x30, [sp, #-48]!
     e94:	mov	x29, sp
     e98:	stp	x19, x20, [sp, #16]
     e9c:	mov	w19, w0
     ea0:	stp	x21, x22, [sp, #32]
     ea4:	mov	w21, w1
     ea8:	bl	0 <gomp_init_targets_once>
     eac:	adrp	x0, 0 <goacc_device_num>
     eb0:	cmp	w19, #0x0
     eb4:	ldr	w0, [x0]
     eb8:	csel	w19, w0, w19, lt  // lt = tstop
     ebc:	cbz	w21, f68 <acc_set_device_num+0xd8>
     ec0:	adrp	x0, 0 <gomp_mutex_unlock>
     ec4:	add	x22, x0, #0x0
     ec8:	add	x0, x22, #0x30
     ecc:	mov	w2, #0x1                   	// #1
     ed0:	ldaxr	w1, [x0]
     ed4:	cbnz	w1, ee0 <acc_set_device_num+0x50>
     ed8:	stxr	w3, w2, [x0]
     edc:	cbnz	w3, ed0 <acc_set_device_num+0x40>
     ee0:	cmp	w1, #0x0
     ee4:	b.ne	fc4 <acc_set_device_num+0x134>  // b.any
     ee8:	mov	w1, #0x1                   	// #1
     eec:	mov	w0, w21
     ef0:	bl	d0 <resolve_device>
     ef4:	mov	x20, x0
     ef8:	ldr	x0, [x0, #48]
     efc:	str	x20, [x22, #64]
     f00:	blr	x0
     f04:	cmp	w19, #0x0
     f08:	csel	w1, w19, wzr, ge  // ge = tcont
     f0c:	cmp	w0, w1
     f10:	b.le	fb4 <acc_set_device_num+0x124>
     f14:	mov	w0, #0x130                 	// #304
     f18:	mov	w2, #0x1                   	// #1
     f1c:	smaddl	x20, w19, w0, x20
     f20:	add	x21, x20, #0xa8
     f24:	ldaxr	w1, [x21]
     f28:	cbnz	w1, f34 <acc_set_device_num+0xa4>
     f2c:	stxr	w0, w2, [x21]
     f30:	cbnz	w0, f24 <acc_set_device_num+0x94>
     f34:	cmp	w1, #0x0
     f38:	b.ne	fa8 <acc_set_device_num+0x118>  // b.any
     f3c:	ldr	w0, [x20, #172]
     f40:	cbz	w0, f88 <acc_set_device_num+0xf8>
     f44:	ldxr	w0, [x21]
     f48:	stlxr	w1, wzr, [x21]
     f4c:	cbnz	w1, f44 <acc_set_device_num+0xb4>
     f50:	tbnz	w0, #31, f94 <acc_set_device_num+0x104>
     f54:	add	x0, x22, #0x30
     f58:	ldxr	w1, [x0]
     f5c:	stlxr	w2, wzr, [x0]
     f60:	cbnz	w2, f58 <acc_set_device_num+0xc8>
     f64:	tbnz	w1, #31, fa0 <acc_set_device_num+0x110>
     f68:	mov	w0, w19
     f6c:	bl	4d0 <goacc_attach_host_thread_to_device>
     f70:	adrp	x0, 0 <goacc_device_num>
     f74:	ldp	x21, x22, [sp, #32]
     f78:	str	w19, [x0]
     f7c:	ldp	x19, x20, [sp, #16]
     f80:	ldp	x29, x30, [sp], #48
     f84:	ret
     f88:	mov	x0, x20
     f8c:	bl	0 <gomp_init_device>
     f90:	b	f44 <acc_set_device_num+0xb4>
     f94:	mov	x0, x21
     f98:	bl	0 <gomp_mutex_unlock_slow>
     f9c:	b	f54 <acc_set_device_num+0xc4>
     fa0:	bl	0 <gomp_mutex_unlock_slow>
     fa4:	b	f68 <acc_set_device_num+0xd8>
     fa8:	mov	x0, x21
     fac:	bl	0 <gomp_mutex_lock_slow>
     fb0:	b	f3c <acc_set_device_num+0xac>
     fb4:	mov	w2, w0
     fb8:	mov	w1, w19
     fbc:	mov	w0, w21
     fc0:	bl	a0 <acc_dev_num_out_of_range>
     fc4:	bl	0 <gomp_mutex_lock_slow>
     fc8:	b	ee8 <acc_set_device_num+0x58>
     fcc:	nop

0000000000000fd0 <acc_on_device>:
     fd0:	tst	w0, #0xfffffffd
     fd4:	cset	w0, eq  // eq = none
     fd8:	ret
     fdc:	nop

0000000000000fe0 <goacc_runtime_initialize>:
     fe0:	stp	x29, x30, [sp, #-32]!
     fe4:	adrp	x1, 0 <gomp_mutex_unlock>
     fe8:	add	x1, x1, #0x0
     fec:	mov	x29, sp
     ff0:	str	x19, [sp, #16]
     ff4:	adrp	x19, 0 <gomp_mutex_unlock>
     ff8:	add	x19, x19, #0x0
     ffc:	add	x0, x19, #0x48
    1000:	str	wzr, [x19, #48]
    1004:	bl	0 <pthread_key_create>
    1008:	str	wzr, [x19, #52]
    100c:	stp	xzr, xzr, [x19, #56]
    1010:	ldr	x19, [sp, #16]
    1014:	ldp	x29, x30, [sp], #32
    1018:	b	0 <goacc_host_init>
    101c:	nop

0000000000001020 <goacc_save_and_set_bind>:
    1020:	mrs	x1, tpidr_el0
    1024:	add	x1, x1, #0x0, lsl #12
    1028:	add	x1, x1, #0x0
    102c:	ldr	x1, [x1]
    1030:	ldr	x2, [x1, #16]
    1034:	cbnz	x2, 1054 <goacc_save_and_set_bind+0x34>
    1038:	adrp	x2, 0 <gomp_mutex_unlock>
    103c:	add	x2, x2, #0x0
    1040:	ldr	x3, [x1, #8]
    1044:	str	x3, [x1, #16]
    1048:	ldr	x0, [x2, w0, sxtw #3]
    104c:	str	x0, [x1, #8]
    1050:	ret
    1054:	stp	x29, x30, [sp, #-16]!
    1058:	adrp	x3, 0 <gomp_mutex_unlock>
    105c:	add	x3, x3, #0x0
    1060:	mov	x29, sp
    1064:	adrp	x1, 0 <gomp_mutex_unlock>
    1068:	adrp	x0, 0 <gomp_mutex_unlock>
    106c:	add	x3, x3, #0x78
    1070:	add	x1, x1, #0x0
    1074:	add	x0, x0, #0x0
    1078:	mov	w2, #0x29b                 	// #667
    107c:	bl	0 <__assert_fail>

0000000000001080 <goacc_restore_bind>:
    1080:	mrs	x0, tpidr_el0
    1084:	add	x0, x0, #0x0, lsl #12
    1088:	add	x0, x0, #0x0
    108c:	ldr	x0, [x0]
    1090:	ldr	x1, [x0, #16]
    1094:	stp	x1, xzr, [x0, #8]
    1098:	ret
    109c:	nop

00000000000010a0 <goacc_lazy_initialize>:
    10a0:	mrs	x0, tpidr_el0
    10a4:	add	x0, x0, #0x0, lsl #12
    10a8:	add	x0, x0, #0x0
    10ac:	ldr	x0, [x0]
    10b0:	cbz	x0, 10c0 <goacc_lazy_initialize+0x20>
    10b4:	ldr	x0, [x0, #8]
    10b8:	cbz	x0, 10c0 <goacc_lazy_initialize+0x20>
    10bc:	ret
    10c0:	adrp	x0, 0 <gomp_mutex_unlock>
    10c4:	ldr	x0, [x0]
    10c8:	cbz	x0, 10d4 <goacc_lazy_initialize+0x34>
    10cc:	mov	w0, #0xffffffff            	// #-1
    10d0:	b	4d0 <goacc_attach_host_thread_to_device>
    10d4:	mov	w0, #0x1                   	// #1
    10d8:	b	690 <acc_init>

oacc-mem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_unlock>:
       0:	mov	x1, x0
       4:	ldxr	w2, [x1]
       8:	stlxr	w3, wzr, [x1]
       c:	cbnz	w3, 4 <gomp_mutex_unlock+0x4>
      10:	tbnz	w2, #31, 18 <gomp_mutex_unlock+0x18>
      14:	ret
      18:	b	0 <gomp_mutex_unlock_slow>
      1c:	nop

0000000000000020 <memcpy_tofrom_device>:
      20:	adrp	x6, 0 <goacc_tls_data>
      24:	ldr	x6, [x6]
      28:	mrs	x7, tpidr_el0
      2c:	stp	x29, x30, [sp, #-80]!
      30:	mov	x29, sp
      34:	stp	x23, x24, [sp, #48]
      38:	ldr	x23, [x7, x6]
      3c:	stp	x19, x20, [sp, #16]
      40:	stp	x21, x22, [sp, #32]
      44:	str	x25, [sp, #64]
      48:	cbz	x23, 128 <memcpy_tofrom_device+0x108>
      4c:	ldr	x6, [x23, #8]
      50:	cbz	x6, 128 <memcpy_tofrom_device+0x108>
      54:	and	w25, w0, #0xff
      58:	ldr	w0, [x6, #8]
      5c:	mov	x20, x2
      60:	mov	x21, x3
      64:	mov	x22, x1
      68:	tbnz	w0, #0, fc <memcpy_tofrom_device+0xdc>
      6c:	mov	w19, w4
      70:	mov	x24, x5
      74:	cmn	w4, #0x1
      78:	b.lt	8c <memcpy_tofrom_device+0x6c>  // b.tstop
      7c:	ldr	x1, [x6, #248]
      80:	mov	w0, w4
      84:	blr	x1
      88:	ldr	x6, [x23, #8]
      8c:	ldr	w0, [x6, #12]
      90:	cbnz	w25, e0 <memcpy_tofrom_device+0xc0>
      94:	ldr	x4, [x6, #120]
      98:	mov	x2, x20
      9c:	mov	x3, x21
      a0:	mov	x1, x22
      a4:	blr	x4
      a8:	and	w20, w0, #0xff
      ac:	cmn	w19, #0x1
      b0:	b.lt	c4 <memcpy_tofrom_device+0xa4>  // b.tstop
      b4:	ldr	x1, [x23, #8]
      b8:	mov	w0, #0xfffffffe            	// #-2
      bc:	ldr	x1, [x1, #248]
      c0:	blr	x1
      c4:	cbz	w20, 148 <memcpy_tofrom_device+0x128>
      c8:	ldp	x19, x20, [sp, #16]
      cc:	ldp	x21, x22, [sp, #32]
      d0:	ldp	x23, x24, [sp, #48]
      d4:	ldr	x25, [sp, #64]
      d8:	ldp	x29, x30, [sp], #80
      dc:	ret
      e0:	ldr	x4, [x6, #112]
      e4:	mov	x1, x20
      e8:	mov	x3, x21
      ec:	mov	x2, x22
      f0:	blr	x4
      f4:	and	w20, w0, #0xff
      f8:	b	ac <memcpy_tofrom_device+0x8c>
      fc:	mov	x2, x3
     100:	mov	x0, x20
     104:	cbnz	w25, 110 <memcpy_tofrom_device+0xf0>
     108:	mov	x1, x20
     10c:	mov	x0, x22
     110:	ldp	x19, x20, [sp, #16]
     114:	ldp	x21, x22, [sp, #32]
     118:	ldp	x23, x24, [sp, #48]
     11c:	ldr	x25, [sp, #64]
     120:	ldp	x29, x30, [sp], #80
     124:	b	0 <memmove>
     128:	adrp	x3, 0 <gomp_mutex_unlock>
     12c:	adrp	x1, 0 <gomp_mutex_unlock>
     130:	adrp	x0, 0 <gomp_mutex_unlock>
     134:	add	x3, x3, #0x0
     138:	add	x1, x1, #0x0
     13c:	add	x0, x0, #0x0
     140:	mov	w2, #0xa4                  	// #164
     144:	bl	0 <__assert_fail>
     148:	adrp	x0, 0 <gomp_mutex_unlock>
     14c:	mov	x1, x24
     150:	add	x0, x0, #0x0
     154:	bl	0 <gomp_fatal>

0000000000000158 <lookup_dev.part.0>:
     158:	cbz	x0, 1c4 <lookup_dev.part.0+0x6c>
     15c:	add	x4, x1, x2
     160:	ldr	x3, [x0, #16]
     164:	cmp	x3, x1
     168:	b.hi	178 <lookup_dev.part.0+0x20>  // b.pmore
     16c:	ldr	x2, [x0, #24]
     170:	cmp	x2, x4
     174:	b.cs	184 <lookup_dev.part.0+0x2c>  // b.hs, b.nlast
     178:	ldr	x0, [x0, #40]
     17c:	cbnz	x0, 160 <lookup_dev.part.0+0x8>
     180:	ret
     184:	ldr	x7, [x0, #48]
     188:	cbz	x7, 1c4 <lookup_dev.part.0+0x6c>
     18c:	ldr	x0, [x0, #8]
     190:	mov	x4, #0x0                   	// #0
     194:	nop
     198:	ldp	x6, x5, [x0]
     19c:	add	x4, x4, #0x1
     1a0:	ldr	x2, [x0, #24]
     1a4:	add	x2, x2, x6
     1a8:	sub	x2, x2, x3
     1ac:	add	x2, x1, x2
     1b0:	cmp	x2, x5
     1b4:	b.ls	180 <lookup_dev.part.0+0x28>  // b.plast
     1b8:	add	x0, x0, #0x48
     1bc:	cmp	x7, x4
     1c0:	b.ne	198 <lookup_dev.part.0+0x40>  // b.any
     1c4:	mov	x0, #0x0                   	// #0
     1c8:	ret
     1cc:	nop

00000000000001d0 <acc_is_present.part.0>:
     1d0:	stp	x29, x30, [sp, #-128]!
     1d4:	mov	x29, sp
     1d8:	stp	x19, x20, [sp, #16]
     1dc:	mov	x19, x0
     1e0:	mov	x20, x1
     1e4:	stp	x21, x22, [sp, #32]
     1e8:	bl	0 <goacc_lazy_initialize>
     1ec:	adrp	x0, 0 <goacc_tls_data>
     1f0:	ldr	x0, [x0]
     1f4:	mrs	x1, tpidr_el0
     1f8:	ldr	x0, [x1, x0]
     1fc:	ldr	x22, [x0, #8]
     200:	ldr	w0, [x22, #8]
     204:	tbnz	w0, #0, 288 <acc_is_present.part.0+0xb8>
     208:	add	x21, x22, #0xa8
     20c:	mov	w0, #0x1                   	// #1
     210:	str	x23, [sp, #48]
     214:	ldaxr	w1, [x21]
     218:	cbnz	w1, 224 <acc_is_present.part.0+0x54>
     21c:	stxr	w2, w0, [x21]
     220:	cbnz	w2, 214 <acc_is_present.part.0+0x44>
     224:	cmp	w1, #0x0
     228:	b.ne	2c0 <acc_is_present.part.0+0xf0>  // b.any
     22c:	add	x0, x22, #0xa0
     230:	add	x23, x19, x20
     234:	add	x1, sp, #0x48
     238:	mov	w22, #0x0                   	// #0
     23c:	stp	x19, x23, [sp, #72]
     240:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     244:	cbz	x0, 260 <acc_is_present.part.0+0x90>
     248:	ldr	x1, [x0]
     24c:	cmp	x19, x1
     250:	b.cc	260 <acc_is_present.part.0+0x90>  // b.lo, b.ul, b.last
     254:	ldr	x0, [x0, #8]
     258:	cmp	x23, x0
     25c:	b.ls	2a0 <acc_is_present.part.0+0xd0>  // b.plast
     260:	ldxr	w0, [x21]
     264:	stlxr	w1, wzr, [x21]
     268:	cbnz	w1, 260 <acc_is_present.part.0+0x90>
     26c:	tbnz	w0, #31, 2b0 <acc_is_present.part.0+0xe0>
     270:	ldr	x23, [sp, #48]
     274:	mov	w0, w22
     278:	ldp	x19, x20, [sp, #16]
     27c:	ldp	x21, x22, [sp, #32]
     280:	ldp	x29, x30, [sp], #128
     284:	ret
     288:	mov	w22, #0x1                   	// #1
     28c:	mov	w0, w22
     290:	ldp	x19, x20, [sp, #16]
     294:	ldp	x21, x22, [sp, #32]
     298:	ldp	x29, x30, [sp], #128
     29c:	ret
     2a0:	sub	x1, x0, x1
     2a4:	cmp	x20, x1
     2a8:	cset	w22, ls  // ls = plast
     2ac:	b	260 <acc_is_present.part.0+0x90>
     2b0:	mov	x0, x21
     2b4:	bl	0 <gomp_mutex_unlock_slow>
     2b8:	ldr	x23, [sp, #48]
     2bc:	b	274 <acc_is_present.part.0+0xa4>
     2c0:	mov	x0, x21
     2c4:	bl	0 <gomp_mutex_lock_slow>
     2c8:	b	22c <acc_is_present.part.0+0x5c>
     2cc:	nop

00000000000002d0 <update_dev_host>:
     2d0:	stp	x29, x30, [sp, #-144]!
     2d4:	mov	x29, sp
     2d8:	stp	x19, x20, [sp, #16]
     2dc:	mov	x19, x1
     2e0:	stp	x21, x22, [sp, #32]
     2e4:	mov	x22, x2
     2e8:	mov	w21, w3
     2ec:	stp	x23, x24, [sp, #48]
     2f0:	mov	w23, w0
     2f4:	bl	0 <goacc_lazy_initialize>
     2f8:	adrp	x1, 0 <goacc_tls_data>
     2fc:	ldr	x1, [x1]
     300:	mrs	x0, tpidr_el0
     304:	ldr	x0, [x0, x1]
     308:	ldr	x20, [x0, #8]
     30c:	ldr	w0, [x20, #8]
     310:	tbnz	w0, #0, 3c0 <update_dev_host+0xf0>
     314:	add	x24, x20, #0xa8
     318:	mov	w0, #0x1                   	// #1
     31c:	str	x25, [sp, #64]
     320:	ldaxr	w1, [x24]
     324:	cbnz	w1, 330 <update_dev_host+0x60>
     328:	stxr	w2, w0, [x24]
     32c:	cbnz	w2, 320 <update_dev_host+0x50>
     330:	cmp	w1, #0x0
     334:	b.ne	3fc <update_dev_host+0x12c>  // b.any
     338:	add	x2, x22, x19
     33c:	add	x1, sp, #0x58
     340:	add	x0, x20, #0xa0
     344:	stp	x19, x2, [sp, #88]
     348:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     34c:	cbz	x0, 408 <update_dev_host+0x138>
     350:	ldp	x1, x25, [x0, #16]
     354:	cmn	w21, #0x1
     358:	ldr	x2, [x0]
     35c:	ldr	x1, [x1, #16]
     360:	add	x25, x19, x25
     364:	sub	x1, x1, x2
     368:	add	x25, x1, x25
     36c:	b.lt	37c <update_dev_host+0xac>  // b.tstop
     370:	ldr	x1, [x20, #248]
     374:	mov	w0, w21
     378:	blr	x1
     37c:	ldr	w0, [x20, #12]
     380:	cbnz	w23, 3d4 <update_dev_host+0x104>
     384:	ldr	x4, [x20, #112]
     388:	mov	x3, x22
     38c:	mov	x2, x25
     390:	mov	x1, x19
     394:	blr	x4
     398:	cmn	w21, #0x1
     39c:	b.lt	3ac <update_dev_host+0xdc>  // b.tstop
     3a0:	ldr	x1, [x20, #248]
     3a4:	mov	w0, #0xfffffffe            	// #-2
     3a8:	blr	x1
     3ac:	ldxr	w0, [x24]
     3b0:	stlxr	w1, wzr, [x24]
     3b4:	cbnz	w1, 3ac <update_dev_host+0xdc>
     3b8:	tbnz	w0, #31, 3ec <update_dev_host+0x11c>
     3bc:	ldr	x25, [sp, #64]
     3c0:	ldp	x19, x20, [sp, #16]
     3c4:	ldp	x21, x22, [sp, #32]
     3c8:	ldp	x23, x24, [sp, #48]
     3cc:	ldp	x29, x30, [sp], #144
     3d0:	ret
     3d4:	ldr	x4, [x20, #120]
     3d8:	mov	x3, x22
     3dc:	mov	x2, x19
     3e0:	mov	x1, x25
     3e4:	blr	x4
     3e8:	b	398 <update_dev_host+0xc8>
     3ec:	mov	x0, x24
     3f0:	bl	0 <gomp_mutex_unlock_slow>
     3f4:	ldr	x25, [sp, #64]
     3f8:	b	3c0 <update_dev_host+0xf0>
     3fc:	mov	x0, x24
     400:	bl	0 <gomp_mutex_lock_slow>
     404:	b	338 <update_dev_host+0x68>
     408:	mov	x0, x24
     40c:	bl	0 <gomp_mutex_unlock>
     410:	adrp	x0, 0 <gomp_mutex_unlock>
     414:	mov	w2, w22
     418:	mov	x1, x19
     41c:	add	x0, x0, #0x0
     420:	bl	0 <gomp_fatal>
     424:	nop

0000000000000428 <delete_copyout.isra.0>:
     428:	adrp	x5, 0 <goacc_tls_data>
     42c:	ldr	x5, [x5]
     430:	mrs	x6, tpidr_el0
     434:	stp	x29, x30, [sp, #-144]!
     438:	mov	x29, sp
     43c:	stp	x19, x20, [sp, #16]
     440:	mov	x20, x1
     444:	ldr	x1, [x6, x5]
     448:	stp	x25, x26, [sp, #64]
     44c:	ldr	x25, [x1, #8]
     450:	ldr	w1, [x25, #8]
     454:	tbnz	w1, #0, 530 <delete_copyout.isra.0+0x108>
     458:	mov	w26, w3
     45c:	stp	x21, x22, [sp, #32]
     460:	add	x21, x25, #0xa8
     464:	stp	x23, x24, [sp, #48]
     468:	mov	x24, x2
     46c:	mov	w23, w0
     470:	mov	w0, #0x1                   	// #1
     474:	ldaxr	w1, [x21]
     478:	cbnz	w1, 484 <delete_copyout.isra.0+0x5c>
     47c:	stxr	w2, w0, [x21]
     480:	cbnz	w2, 474 <delete_copyout.isra.0+0x4c>
     484:	cmp	w1, #0x0
     488:	b.ne	640 <delete_copyout.isra.0+0x218>  // b.any
     48c:	add	x2, x20, x24
     490:	add	x1, sp, #0x58
     494:	add	x0, x25, #0xa0
     498:	stp	x20, x2, [sp, #88]
     49c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     4a0:	mov	x19, x0
     4a4:	cbz	x0, 660 <delete_copyout.isra.0+0x238>
     4a8:	ldp	x7, x22, [x0]
     4ac:	ldp	x5, x1, [x0, #16]
     4b0:	cmp	x20, x7
     4b4:	sub	x22, x22, x7
     4b8:	ccmp	x24, x22, #0x0, eq  // eq = none
     4bc:	add	x6, x20, x1
     4c0:	ldr	x9, [x5, #16]
     4c4:	b.ne	61c <delete_copyout.isra.0+0x1f4>  // b.any
     4c8:	ldr	x1, [x0, #32]
     4cc:	cmn	x1, #0x1
     4d0:	mov	x0, x1
     4d4:	b.eq	540 <delete_copyout.isra.0+0x118>  // b.none
     4d8:	ldr	x8, [x19, #40]
     4dc:	cmp	x1, x8
     4e0:	b.cc	64c <delete_copyout.isra.0+0x224>  // b.lo, b.ul, b.last
     4e4:	tbnz	w23, #1, 554 <delete_copyout.isra.0+0x12c>
     4e8:	cbz	x8, 4f8 <delete_copyout.isra.0+0xd0>
     4ec:	sub	x8, x8, #0x1
     4f0:	sub	x1, x1, #0x1
     4f4:	stp	x1, x8, [x19, #32]
     4f8:	cbnz	x1, 518 <delete_copyout.isra.0+0xf0>
     4fc:	ldr	x0, [x5]
     500:	cmp	x0, #0x2
     504:	b.eq	5a4 <delete_copyout.isra.0+0x17c>  // b.none
     508:	tbnz	w23, #0, 560 <delete_copyout.isra.0+0x138>
     50c:	mov	x1, x19
     510:	mov	x0, x25
     514:	bl	0 <gomp_remove_var>
     518:	ldxr	w0, [x21]
     51c:	stlxr	w1, wzr, [x21]
     520:	cbnz	w1, 518 <delete_copyout.isra.0+0xf0>
     524:	tbnz	w0, #31, 5f0 <delete_copyout.isra.0+0x1c8>
     528:	ldp	x21, x22, [sp, #32]
     52c:	ldp	x23, x24, [sp, #48]
     530:	ldp	x19, x20, [sp, #16]
     534:	ldp	x25, x26, [sp, #64]
     538:	ldp	x29, x30, [sp], #144
     53c:	ret
     540:	stp	xzr, xzr, [x19, #32]
     544:	mov	x1, #0x0                   	// #0
     548:	tbz	w23, #1, 4f8 <delete_copyout.isra.0+0xd0>
     54c:	mov	x8, #0x0                   	// #0
     550:	mov	x0, #0x0                   	// #0
     554:	sub	x1, x0, x8
     558:	stp	x1, xzr, [x19, #32]
     55c:	b	4f8 <delete_copyout.isra.0+0xd0>
     560:	sub	x7, x9, x7
     564:	cmn	w26, #0x1
     568:	add	x22, x7, x6
     56c:	b.lt	5d4 <delete_copyout.isra.0+0x1ac>  // b.tstop
     570:	ldr	x1, [x25, #248]
     574:	mov	w0, w26
     578:	blr	x1
     57c:	ldr	w0, [x25, #12]
     580:	mov	x1, x20
     584:	ldr	x4, [x25, #112]
     588:	mov	x3, x24
     58c:	mov	x2, x22
     590:	blr	x4
     594:	ldr	x1, [x25, #248]
     598:	mov	w0, #0xfffffffe            	// #-2
     59c:	blr	x1
     5a0:	b	50c <delete_copyout.isra.0+0xe4>
     5a4:	ldr	x2, [x25, #176]
     5a8:	cbz	x2, 508 <delete_copyout.isra.0+0xe0>
     5ac:	cmp	x5, x2
     5b0:	ldr	x1, [x2, #40]
     5b4:	b.eq	604 <delete_copyout.isra.0+0x1dc>  // b.none
     5b8:	cbz	x1, 508 <delete_copyout.isra.0+0xe0>
     5bc:	cmp	x5, x1
     5c0:	ldr	x0, [x1, #40]
     5c4:	b.eq	610 <delete_copyout.isra.0+0x1e8>  // b.none
     5c8:	mov	x2, x1
     5cc:	mov	x1, x0
     5d0:	b	5b8 <delete_copyout.isra.0+0x190>
     5d4:	ldr	w0, [x25, #12]
     5d8:	mov	x3, x24
     5dc:	ldr	x4, [x25, #112]
     5e0:	mov	x2, x22
     5e4:	mov	x1, x20
     5e8:	blr	x4
     5ec:	b	50c <delete_copyout.isra.0+0xe4>
     5f0:	mov	x0, x21
     5f4:	bl	0 <gomp_mutex_unlock_slow>
     5f8:	ldp	x21, x22, [sp, #32]
     5fc:	ldp	x23, x24, [sp, #48]
     600:	b	530 <delete_copyout.isra.0+0x108>
     604:	str	x1, [x25, #176]
     608:	tbz	w23, #0, 50c <delete_copyout.isra.0+0xe4>
     60c:	b	560 <delete_copyout.isra.0+0x138>
     610:	str	x0, [x2, #40]
     614:	tbz	w23, #0, 50c <delete_copyout.isra.0+0xe4>
     618:	b	560 <delete_copyout.isra.0+0x138>
     61c:	mov	x0, x21
     620:	bl	0 <gomp_mutex_unlock>
     624:	ldr	x1, [x19]
     628:	adrp	x0, 0 <gomp_mutex_unlock>
     62c:	mov	w4, w24
     630:	mov	x3, x20
     634:	mov	w2, w22
     638:	add	x0, x0, #0x0
     63c:	bl	0 <gomp_fatal>
     640:	mov	x0, x21
     644:	bl	0 <gomp_mutex_lock_slow>
     648:	b	48c <delete_copyout.isra.0+0x64>
     64c:	mov	x0, x21
     650:	bl	0 <gomp_mutex_unlock>
     654:	adrp	x0, 0 <gomp_mutex_unlock>
     658:	add	x0, x0, #0x0
     65c:	bl	0 <gomp_fatal>
     660:	mov	x0, x21
     664:	bl	0 <gomp_mutex_unlock>
     668:	adrp	x0, 0 <gomp_mutex_unlock>
     66c:	mov	w2, w24
     670:	mov	x1, x20
     674:	add	x0, x0, #0x0
     678:	bl	0 <gomp_fatal>
     67c:	nop

0000000000000680 <present_create_copy>:
     680:	stp	x29, x30, [sp, #-144]!
     684:	cmp	x1, #0x0
     688:	ccmp	x2, #0x0, #0x4, ne  // ne = any
     68c:	mov	x29, sp
     690:	stp	x19, x20, [sp, #16]
     694:	stp	x21, x22, [sp, #32]
     698:	str	x2, [sp, #72]
     69c:	b.eq	894 <present_create_copy+0x214>  // b.none
     6a0:	mov	x19, x1
     6a4:	mov	w20, w0
     6a8:	mov	w22, w3
     6ac:	bl	0 <goacc_lazy_initialize>
     6b0:	adrp	x0, 0 <goacc_tls_data>
     6b4:	ldr	x0, [x0]
     6b8:	mrs	x1, tpidr_el0
     6bc:	ldr	x0, [x1, x0]
     6c0:	ldr	x21, [x0, #8]
     6c4:	ldr	w0, [x21, #8]
     6c8:	tbnz	w0, #0, 778 <present_create_copy+0xf8>
     6cc:	str	x23, [sp, #48]
     6d0:	add	x23, x21, #0xa8
     6d4:	mov	w0, #0x1                   	// #1
     6d8:	ldaxr	w1, [x23]
     6dc:	cbnz	w1, 6e8 <present_create_copy+0x68>
     6e0:	stxr	w2, w0, [x23]
     6e4:	cbnz	w2, 6d8 <present_create_copy+0x58>
     6e8:	cmp	w1, #0x0
     6ec:	b.ne	8a4 <present_create_copy+0x224>  // b.any
     6f0:	ldr	x2, [sp, #72]
     6f4:	add	x1, sp, #0x58
     6f8:	add	x0, x21, #0xa0
     6fc:	add	x2, x2, x19
     700:	stp	x19, x2, [sp, #88]
     704:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     708:	cbz	x0, 790 <present_create_copy+0x110>
     70c:	ldp	x1, x3, [x0, #16]
     710:	ldr	x22, [x1, #16]
     714:	add	x22, x22, x3
     718:	tbz	w20, #0, 8cc <present_create_copy+0x24c>
     71c:	ldr	x1, [sp, #72]
     720:	ldr	x2, [x0, #8]
     724:	add	x1, x19, x1
     728:	cmp	x1, x2
     72c:	b.hi	8b0 <present_create_copy+0x230>  // b.pmore
     730:	ldr	x1, [x0, #32]
     734:	cmn	x1, #0x1
     738:	b.eq	750 <present_create_copy+0xd0>  // b.none
     73c:	ldr	x2, [x0, #40]
     740:	add	x1, x1, #0x1
     744:	str	x1, [x0, #32]
     748:	add	x1, x2, #0x1
     74c:	str	x1, [x0, #40]
     750:	ldxr	w0, [x23]
     754:	stlxr	w1, wzr, [x23]
     758:	cbnz	w1, 750 <present_create_copy+0xd0>
     75c:	tbnz	w0, #31, 840 <present_create_copy+0x1c0>
     760:	ldr	x23, [sp, #48]
     764:	mov	x0, x22
     768:	ldp	x19, x20, [sp, #16]
     76c:	ldp	x21, x22, [sp, #32]
     770:	ldp	x29, x30, [sp], #144
     774:	ret
     778:	mov	x22, x19
     77c:	mov	x0, x22
     780:	ldp	x19, x20, [sp, #16]
     784:	ldp	x21, x22, [sp, #32]
     788:	ldp	x29, x30, [sp], #144
     78c:	ret
     790:	tbz	w20, #1, 8b0 <present_create_copy+0x230>
     794:	ubfx	x20, x20, #2, #1
     798:	strh	w20, [sp, #86]
     79c:	str	x19, [sp, #88]
     7a0:	ldxr	w0, [x23]
     7a4:	stlxr	w1, wzr, [x23]
     7a8:	cbnz	w1, 7a0 <present_create_copy+0x120>
     7ac:	tbnz	w0, #31, 888 <present_create_copy+0x208>
     7b0:	cmn	w22, #0x1
     7b4:	b.lt	850 <present_create_copy+0x1d0>  // b.tstop
     7b8:	ldr	x1, [x21, #248]
     7bc:	mov	w0, w22
     7c0:	blr	x1
     7c4:	add	x2, sp, #0x58
     7c8:	mov	x3, #0x0                   	// #0
     7cc:	mov	x1, #0x1                   	// #1
     7d0:	add	x5, sp, #0x56
     7d4:	add	x4, sp, #0x48
     7d8:	mov	x0, x21
     7dc:	mov	w7, #0x0                   	// #0
     7e0:	mov	w6, #0x1                   	// #1
     7e4:	bl	0 <gomp_map_vars>
     7e8:	mov	x19, x0
     7ec:	ldr	x1, [x21, #248]
     7f0:	mov	x3, #0x1                   	// #1
     7f4:	ldr	x2, [x19, #64]
     7f8:	mov	w0, #0xfffffffe            	// #-2
     7fc:	str	x3, [x2, #40]
     800:	blr	x1
     804:	mov	w0, #0x1                   	// #1
     808:	ldaxr	w1, [x23]
     80c:	cbnz	w1, 818 <present_create_copy+0x198>
     810:	stxr	w2, w0, [x23]
     814:	cbnz	w2, 808 <present_create_copy+0x188>
     818:	cmp	w1, #0x0
     81c:	b.ne	8f0 <present_create_copy+0x270>  // b.any
     820:	ldr	x0, [x21, #176]
     824:	str	x0, [x19, #40]
     828:	ldr	x22, [x19, #32]
     82c:	str	x19, [x21, #176]
     830:	ldxr	w0, [x23]
     834:	stlxr	w1, wzr, [x23]
     838:	cbnz	w1, 830 <present_create_copy+0x1b0>
     83c:	tbz	w0, #31, 760 <present_create_copy+0xe0>
     840:	mov	x0, x23
     844:	bl	0 <gomp_mutex_unlock_slow>
     848:	ldr	x23, [sp, #48]
     84c:	b	764 <present_create_copy+0xe4>
     850:	mov	x1, #0x1                   	// #1
     854:	add	x2, sp, #0x58
     858:	add	x5, sp, #0x56
     85c:	add	x4, sp, #0x48
     860:	mov	x0, x21
     864:	mov	w7, #0x0                   	// #0
     868:	mov	w6, #0x1                   	// #1
     86c:	mov	x3, #0x0                   	// #0
     870:	bl	0 <gomp_map_vars>
     874:	mov	x19, x0
     878:	ldr	x0, [x0, #64]
     87c:	mov	x1, #0x1                   	// #1
     880:	str	x1, [x0, #40]
     884:	b	804 <present_create_copy+0x184>
     888:	mov	x0, x23
     88c:	bl	0 <gomp_mutex_unlock_slow>
     890:	b	7b0 <present_create_copy+0x130>
     894:	adrp	x0, 0 <gomp_mutex_unlock>
     898:	add	x0, x0, #0x0
     89c:	str	x23, [sp, #48]
     8a0:	bl	0 <gomp_fatal>
     8a4:	mov	x0, x23
     8a8:	bl	0 <gomp_mutex_lock_slow>
     8ac:	b	6f0 <present_create_copy+0x70>
     8b0:	mov	x0, x23
     8b4:	bl	0 <gomp_mutex_unlock>
     8b8:	ldr	w2, [sp, #72]
     8bc:	adrp	x0, 0 <gomp_mutex_unlock>
     8c0:	mov	x1, x19
     8c4:	add	x0, x0, #0x0
     8c8:	bl	0 <gomp_fatal>
     8cc:	mov	x0, x23
     8d0:	bl	0 <gomp_mutex_unlock>
     8d4:	ldr	x2, [sp, #72]
     8d8:	adrp	x0, 0 <gomp_mutex_unlock>
     8dc:	mov	x3, x22
     8e0:	mov	x1, x19
     8e4:	add	x0, x0, #0x0
     8e8:	mov	w4, w2
     8ec:	bl	0 <gomp_fatal>
     8f0:	mov	x0, x23
     8f4:	bl	0 <gomp_mutex_lock_slow>
     8f8:	b	820 <present_create_copy+0x1a0>
     8fc:	nop

0000000000000900 <acc_malloc>:
     900:	cbz	x0, 954 <acc_malloc+0x54>
     904:	stp	x29, x30, [sp, #-32]!
     908:	mov	x29, sp
     90c:	str	x19, [sp, #16]
     910:	mov	x19, x0
     914:	bl	0 <goacc_lazy_initialize>
     918:	adrp	x0, 0 <goacc_tls_data>
     91c:	ldr	x0, [x0]
     920:	mrs	x1, tpidr_el0
     924:	ldr	x0, [x1, x0]
     928:	ldr	x2, [x0, #8]
     92c:	cbz	x2, 968 <acc_malloc+0x68>
     930:	ldr	w0, [x2, #8]
     934:	tbnz	w0, #0, 958 <acc_malloc+0x58>
     938:	mov	x1, x19
     93c:	ldr	w0, [x2, #12]
     940:	ldr	x19, [sp, #16]
     944:	ldp	x29, x30, [sp], #32
     948:	ldr	x2, [x2, #96]
     94c:	mov	x16, x2
     950:	br	x16
     954:	ret
     958:	mov	x0, x19
     95c:	ldr	x19, [sp, #16]
     960:	ldp	x29, x30, [sp], #32
     964:	b	0 <malloc>
     968:	adrp	x3, 0 <gomp_mutex_unlock>
     96c:	add	x3, x3, #0x0
     970:	adrp	x1, 0 <gomp_mutex_unlock>
     974:	adrp	x0, 0 <gomp_mutex_unlock>
     978:	add	x3, x3, #0x18
     97c:	add	x1, x1, #0x0
     980:	add	x0, x0, #0x0
     984:	mov	w2, #0x6a                  	// #106
     988:	bl	0 <__assert_fail>
     98c:	nop

0000000000000990 <acc_memcpy_to_device>:
     990:	mov	x4, x1
     994:	adrp	x5, 0 <gomp_mutex_unlock>
     998:	add	x5, x5, #0x0
     99c:	mov	x1, x0
     9a0:	mov	x3, x2
     9a4:	add	x5, x5, #0x28
     9a8:	mov	x2, x4
     9ac:	mov	w0, #0x0                   	// #0
     9b0:	mov	w4, #0xfffffffe            	// #-2
     9b4:	b	20 <memcpy_tofrom_device>

00000000000009b8 <acc_memcpy_to_device_async>:
     9b8:	mov	x4, x1
     9bc:	mov	x6, x2
     9c0:	adrp	x5, 0 <gomp_mutex_unlock>
     9c4:	add	x5, x5, #0x0
     9c8:	mov	x1, x0
     9cc:	mov	x2, x4
     9d0:	add	x5, x5, #0x40
     9d4:	mov	w4, w3
     9d8:	mov	w0, #0x0                   	// #0
     9dc:	mov	x3, x6
     9e0:	b	20 <memcpy_tofrom_device>
     9e4:	nop

00000000000009e8 <acc_memcpy_from_device>:
     9e8:	adrp	x5, 0 <gomp_mutex_unlock>
     9ec:	add	x5, x5, #0x0
     9f0:	mov	x3, x2
     9f4:	add	x5, x5, #0x60
     9f8:	mov	x2, x0
     9fc:	mov	w4, #0xfffffffe            	// #-2
     a00:	mov	w0, #0x1                   	// #1
     a04:	b	20 <memcpy_tofrom_device>

0000000000000a08 <acc_memcpy_from_device_async>:
     a08:	mov	x6, x2
     a0c:	adrp	x5, 0 <gomp_mutex_unlock>
     a10:	add	x5, x5, #0x0
     a14:	mov	x2, x0
     a18:	mov	w4, w3
     a1c:	add	x5, x5, #0x78
     a20:	mov	x3, x6
     a24:	mov	w0, #0x1                   	// #1
     a28:	b	20 <memcpy_tofrom_device>
     a2c:	nop

0000000000000a30 <acc_deviceptr>:
     a30:	stp	x29, x30, [sp, #-112]!
     a34:	mov	x29, sp
     a38:	stp	x19, x20, [sp, #16]
     a3c:	mov	x20, x0
     a40:	bl	0 <goacc_lazy_initialize>
     a44:	adrp	x0, 0 <goacc_tls_data>
     a48:	ldr	x0, [x0]
     a4c:	mrs	x1, tpidr_el0
     a50:	ldr	x0, [x1, x0]
     a54:	ldr	x19, [x0, #8]
     a58:	ldr	w0, [x19, #8]
     a5c:	tbnz	w0, #0, adc <acc_deviceptr+0xac>
     a60:	str	x21, [sp, #32]
     a64:	add	x21, x19, #0xa8
     a68:	mov	w0, #0x1                   	// #1
     a6c:	ldaxr	w1, [x21]
     a70:	cbnz	w1, a7c <acc_deviceptr+0x4c>
     a74:	stxr	w2, w0, [x21]
     a78:	cbnz	w2, a6c <acc_deviceptr+0x3c>
     a7c:	cmp	w1, #0x0
     a80:	b.ne	b10 <acc_deviceptr+0xe0>  // b.any
     a84:	add	x2, x20, #0x1
     a88:	add	x0, x19, #0xa0
     a8c:	add	x1, sp, #0x38
     a90:	stp	x20, x2, [sp, #56]
     a94:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     a98:	mov	x19, x0
     a9c:	cbz	x0, af0 <acc_deviceptr+0xc0>
     aa0:	ldr	x2, [x0]
     aa4:	ldp	x0, x1, [x0, #16]
     aa8:	ldr	x0, [x0, #16]
     aac:	sub	x19, x0, x2
     ab0:	add	x19, x19, x1
     ab4:	add	x19, x20, x19
     ab8:	ldxr	w0, [x21]
     abc:	stlxr	w1, wzr, [x21]
     ac0:	cbnz	w1, ab8 <acc_deviceptr+0x88>
     ac4:	tbnz	w0, #31, b00 <acc_deviceptr+0xd0>
     ac8:	ldr	x21, [sp, #32]
     acc:	mov	x0, x19
     ad0:	ldp	x19, x20, [sp, #16]
     ad4:	ldp	x29, x30, [sp], #112
     ad8:	ret
     adc:	mov	x19, x20
     ae0:	mov	x0, x19
     ae4:	ldp	x19, x20, [sp, #16]
     ae8:	ldp	x29, x30, [sp], #112
     aec:	ret
     af0:	ldxr	w0, [x21]
     af4:	stlxr	w1, wzr, [x21]
     af8:	cbnz	w1, af0 <acc_deviceptr+0xc0>
     afc:	tbz	w0, #31, ac8 <acc_deviceptr+0x98>
     b00:	mov	x0, x21
     b04:	bl	0 <gomp_mutex_unlock_slow>
     b08:	ldr	x21, [sp, #32]
     b0c:	b	acc <acc_deviceptr+0x9c>
     b10:	mov	x0, x21
     b14:	bl	0 <gomp_mutex_lock_slow>
     b18:	b	a84 <acc_deviceptr+0x54>
     b1c:	nop

0000000000000b20 <acc_hostptr>:
     b20:	stp	x29, x30, [sp, #-48]!
     b24:	mov	x29, sp
     b28:	stp	x19, x20, [sp, #16]
     b2c:	mov	x19, x0
     b30:	str	x21, [sp, #32]
     b34:	bl	0 <goacc_lazy_initialize>
     b38:	adrp	x0, 0 <goacc_tls_data>
     b3c:	ldr	x0, [x0]
     b40:	mrs	x1, tpidr_el0
     b44:	ldr	x0, [x1, x0]
     b48:	ldr	x21, [x0, #8]
     b4c:	ldr	w0, [x21, #8]
     b50:	tbnz	w0, #0, bb4 <acc_hostptr+0x94>
     b54:	add	x20, x21, #0xa8
     b58:	mov	w0, #0x1                   	// #1
     b5c:	ldaxr	w1, [x20]
     b60:	cbnz	w1, b6c <acc_hostptr+0x4c>
     b64:	stxr	w2, w0, [x20]
     b68:	cbnz	w2, b5c <acc_hostptr+0x3c>
     b6c:	cmp	w1, #0x0
     b70:	b.ne	be8 <acc_hostptr+0xc8>  // b.any
     b74:	ldr	x0, [x21, #176]
     b78:	cbz	x0, bc8 <acc_hostptr+0xa8>
     b7c:	mov	x1, x19
     b80:	mov	x2, #0x1                   	// #1
     b84:	bl	158 <lookup_dev.part.0>
     b88:	cbz	x0, bc8 <acc_hostptr+0xa8>
     b8c:	ldr	x2, [x0]
     b90:	ldp	x1, x0, [x0, #16]
     b94:	ldr	x1, [x1, #16]
     b98:	add	x0, x0, x2
     b9c:	sub	x0, x0, x1
     ba0:	add	x19, x19, x0
     ba4:	ldxr	w0, [x20]
     ba8:	stlxr	w1, wzr, [x20]
     bac:	cbnz	w1, ba4 <acc_hostptr+0x84>
     bb0:	tbnz	w0, #31, bdc <acc_hostptr+0xbc>
     bb4:	mov	x0, x19
     bb8:	ldp	x19, x20, [sp, #16]
     bbc:	ldr	x21, [sp, #32]
     bc0:	ldp	x29, x30, [sp], #48
     bc4:	ret
     bc8:	ldxr	w0, [x20]
     bcc:	stlxr	w1, wzr, [x20]
     bd0:	cbnz	w1, bc8 <acc_hostptr+0xa8>
     bd4:	mov	x19, #0x0                   	// #0
     bd8:	tbz	w0, #31, bb4 <acc_hostptr+0x94>
     bdc:	mov	x0, x20
     be0:	bl	0 <gomp_mutex_unlock_slow>
     be4:	b	bb4 <acc_hostptr+0x94>
     be8:	mov	x0, x20
     bec:	bl	0 <gomp_mutex_lock_slow>
     bf0:	b	b74 <acc_hostptr+0x54>
     bf4:	nop

0000000000000bf8 <acc_is_present>:
     bf8:	cmp	x1, #0x0
     bfc:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     c00:	b.ne	c0c <acc_is_present+0x14>  // b.any
     c04:	mov	w0, #0x0                   	// #0
     c08:	ret
     c0c:	b	1d0 <acc_is_present.part.0>

0000000000000c10 <acc_map_data>:
     c10:	stp	x29, x30, [sp, #-160]!
     c14:	mov	x29, sp
     c18:	stp	x19, x20, [sp, #16]
     c1c:	mov	x20, x0
     c20:	stp	x21, x22, [sp, #32]
     c24:	mov	x22, x2
     c28:	stp	x23, x24, [sp, #48]
     c2c:	mov	x23, x1
     c30:	strh	wzr, [sp, #78]
     c34:	stp	x0, x1, [sp, #80]
     c38:	str	x2, [sp, #96]
     c3c:	bl	0 <goacc_lazy_initialize>
     c40:	adrp	x0, 0 <goacc_tls_data>
     c44:	ldr	x0, [x0]
     c48:	mrs	x1, tpidr_el0
     c4c:	ldr	x24, [x1, x0]
     c50:	ldr	x21, [x24, #8]
     c54:	ldr	w0, [x21, #8]
     c58:	tbz	w0, #0, cb8 <acc_map_data+0xa8>
     c5c:	cmp	x20, x23
     c60:	b.ne	d8c <acc_map_data+0x17c>  // b.any
     c64:	add	x19, x21, #0xa8
     c68:	mov	x20, #0x0                   	// #0
     c6c:	mov	w0, #0x1                   	// #1
     c70:	ldaxr	w1, [x19]
     c74:	cbnz	w1, c80 <acc_map_data+0x70>
     c78:	stxr	w2, w0, [x19]
     c7c:	cbnz	w2, c70 <acc_map_data+0x60>
     c80:	cmp	w1, #0x0
     c84:	b.ne	da4 <acc_map_data+0x194>  // b.any
     c88:	ldr	x0, [x21, #176]
     c8c:	str	x0, [x20, #40]
     c90:	str	x20, [x21, #176]
     c94:	ldxr	w0, [x19]
     c98:	stlxr	w1, wzr, [x19]
     c9c:	cbnz	w1, c94 <acc_map_data+0x84>
     ca0:	tbnz	w0, #31, d64 <acc_map_data+0x154>
     ca4:	ldp	x19, x20, [sp, #16]
     ca8:	ldp	x21, x22, [sp, #32]
     cac:	ldp	x23, x24, [sp, #48]
     cb0:	ldp	x29, x30, [sp], #160
     cb4:	ret
     cb8:	cmp	x23, #0x0
     cbc:	ccmp	x22, #0x0, #0x4, ne  // ne = any
     cc0:	ccmp	x20, #0x0, #0x4, ne  // ne = any
     cc4:	b.eq	d70 <acc_map_data+0x160>  // b.none
     cc8:	add	x19, x21, #0xa8
     ccc:	mov	w0, #0x1                   	// #1
     cd0:	ldaxr	w1, [x19]
     cd4:	cbnz	w1, ce0 <acc_map_data+0xd0>
     cd8:	stxr	w2, w0, [x19]
     cdc:	cbnz	w2, cd0 <acc_map_data+0xc0>
     ce0:	cmp	w1, #0x0
     ce4:	b.ne	db0 <acc_map_data+0x1a0>  // b.any
     ce8:	add	x2, x22, x20
     cec:	add	x1, sp, #0x68
     cf0:	add	x0, x21, #0xa0
     cf4:	stp	x20, x2, [sp, #104]
     cf8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     cfc:	cbnz	x0, dbc <acc_map_data+0x1ac>
     d00:	ldr	x0, [x24, #8]
     d04:	ldr	x0, [x0, #176]
     d08:	cbz	x0, d1c <acc_map_data+0x10c>
     d0c:	mov	x2, x22
     d10:	mov	x1, x23
     d14:	bl	158 <lookup_dev.part.0>
     d18:	cbnz	x0, dd8 <acc_map_data+0x1c8>
     d1c:	ldxr	w0, [x19]
     d20:	stlxr	w1, wzr, [x19]
     d24:	cbnz	w1, d1c <acc_map_data+0x10c>
     d28:	tbnz	w0, #31, d98 <acc_map_data+0x188>
     d2c:	mov	x1, #0x1                   	// #1
     d30:	add	x5, sp, #0x4e
     d34:	add	x4, sp, #0x60
     d38:	add	x3, sp, #0x58
     d3c:	add	x2, sp, #0x50
     d40:	mov	x0, x21
     d44:	mov	w7, #0x0                   	// #0
     d48:	mov	w6, #0x1                   	// #1
     d4c:	bl	0 <gomp_map_vars>
     d50:	mov	x20, x0
     d54:	ldr	x0, [x0, #64]
     d58:	mov	x1, #0xffffffffffffffff    	// #-1
     d5c:	str	x1, [x0, #32]
     d60:	b	c6c <acc_map_data+0x5c>
     d64:	mov	x0, x19
     d68:	bl	0 <gomp_mutex_unlock_slow>
     d6c:	b	ca4 <acc_map_data+0x94>
     d70:	adrp	x0, 0 <gomp_mutex_unlock>
     d74:	mov	x3, x23
     d78:	mov	x1, x20
     d7c:	mov	w4, w22
     d80:	add	x0, x0, #0x0
     d84:	mov	w2, w22
     d88:	bl	0 <gomp_fatal>
     d8c:	adrp	x0, 0 <gomp_mutex_unlock>
     d90:	add	x0, x0, #0x0
     d94:	bl	0 <gomp_fatal>
     d98:	mov	x0, x19
     d9c:	bl	0 <gomp_mutex_unlock_slow>
     da0:	b	d2c <acc_map_data+0x11c>
     da4:	mov	x0, x19
     da8:	bl	0 <gomp_mutex_lock_slow>
     dac:	b	c88 <acc_map_data+0x78>
     db0:	mov	x0, x19
     db4:	bl	0 <gomp_mutex_lock_slow>
     db8:	b	ce8 <acc_map_data+0xd8>
     dbc:	mov	x0, x19
     dc0:	bl	0 <gomp_mutex_unlock>
     dc4:	adrp	x0, 0 <gomp_mutex_unlock>
     dc8:	mov	w2, w22
     dcc:	mov	x1, x20
     dd0:	add	x0, x0, #0x0
     dd4:	bl	0 <gomp_fatal>
     dd8:	mov	x0, x19
     ddc:	bl	0 <gomp_mutex_unlock>
     de0:	adrp	x0, 0 <gomp_mutex_unlock>
     de4:	mov	w2, w22
     de8:	mov	x1, x23
     dec:	add	x0, x0, #0x0
     df0:	bl	0 <gomp_fatal>
     df4:	nop

0000000000000df8 <acc_unmap_data>:
     df8:	adrp	x1, 0 <goacc_tls_data>
     dfc:	ldr	x1, [x1]
     e00:	mrs	x2, tpidr_el0
     e04:	stp	x29, x30, [sp, #-128]!
     e08:	mov	x29, sp
     e0c:	stp	x19, x20, [sp, #16]
     e10:	mov	x19, x0
     e14:	ldr	x0, [x2, x1]
     e18:	stp	x21, x22, [sp, #32]
     e1c:	ldr	x21, [x0, #8]
     e20:	ldr	w0, [x21, #8]
     e24:	tbnz	w0, #0, eac <acc_unmap_data+0xb4>
     e28:	add	x22, x21, #0xa8
     e2c:	mov	w0, #0x1                   	// #1
     e30:	str	x23, [sp, #48]
     e34:	ldaxr	w1, [x22]
     e38:	cbnz	w1, e44 <acc_unmap_data+0x4c>
     e3c:	stxr	w2, w0, [x22]
     e40:	cbnz	w2, e34 <acc_unmap_data+0x3c>
     e44:	cmp	w1, #0x0
     e48:	b.ne	f14 <acc_unmap_data+0x11c>  // b.any
     e4c:	add	x2, x19, #0x1
     e50:	add	x1, sp, #0x48
     e54:	add	x0, x21, #0xa0
     e58:	stp	x19, x2, [sp, #72]
     e5c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     e60:	mov	x20, x0
     e64:	cbz	x0, f44 <acc_unmap_data+0x14c>
     e68:	ldr	x23, [x0]
     e6c:	cmp	x23, x19
     e70:	b.ne	f20 <acc_unmap_data+0x128>  // b.any
     e74:	ldr	x19, [x20, #16]
     e78:	mov	x0, #0x1                   	// #1
     e7c:	str	x0, [x20, #32]
     e80:	ldr	x0, [x19]
     e84:	cmp	x0, #0x2
     e88:	b.eq	ebc <acc_unmap_data+0xc4>  // b.none
     e8c:	ldxr	w0, [x22]
     e90:	stlxr	w1, wzr, [x22]
     e94:	cbnz	w1, e8c <acc_unmap_data+0x94>
     e98:	tbnz	w0, #31, f00 <acc_unmap_data+0x108>
     e9c:	mov	x0, x19
     ea0:	mov	w1, #0x1                   	// #1
     ea4:	bl	0 <gomp_unmap_vars>
     ea8:	ldr	x23, [sp, #48]
     eac:	ldp	x19, x20, [sp, #16]
     eb0:	ldp	x21, x22, [sp, #32]
     eb4:	ldp	x29, x30, [sp], #128
     eb8:	ret
     ebc:	ldr	x2, [x21, #176]
     ec0:	stp	xzr, xzr, [x19, #24]
     ec4:	cbz	x2, ef0 <acc_unmap_data+0xf8>
     ec8:	cmp	x19, x2
     ecc:	ldr	x0, [x2, #40]
     ed0:	b.eq	f0c <acc_unmap_data+0x114>  // b.none
     ed4:	cbz	x0, ef0 <acc_unmap_data+0xf8>
     ed8:	cmp	x0, x19
     edc:	ldr	x1, [x0, #40]
     ee0:	b.eq	ef8 <acc_unmap_data+0x100>  // b.none
     ee4:	mov	x2, x0
     ee8:	mov	x0, x1
     eec:	cbnz	x0, ed8 <acc_unmap_data+0xe0>
     ef0:	mov	x19, #0x0                   	// #0
     ef4:	b	e8c <acc_unmap_data+0x94>
     ef8:	str	x1, [x2, #40]
     efc:	b	e8c <acc_unmap_data+0x94>
     f00:	mov	x0, x22
     f04:	bl	0 <gomp_mutex_unlock_slow>
     f08:	b	e9c <acc_unmap_data+0xa4>
     f0c:	str	x0, [x21, #176]
     f10:	b	e8c <acc_unmap_data+0x94>
     f14:	mov	x0, x22
     f18:	bl	0 <gomp_mutex_lock_slow>
     f1c:	b	e4c <acc_unmap_data+0x54>
     f20:	mov	x0, x22
     f24:	ldr	x21, [x20, #8]
     f28:	bl	0 <gomp_mutex_unlock>
     f2c:	ldr	x1, [x20]
     f30:	adrp	x0, 0 <gomp_mutex_unlock>
     f34:	sub	w2, w21, w23
     f38:	mov	x3, x19
     f3c:	add	x0, x0, #0x0
     f40:	bl	0 <gomp_fatal>
     f44:	mov	x0, x22
     f48:	bl	0 <gomp_mutex_unlock>
     f4c:	adrp	x0, 0 <gomp_mutex_unlock>
     f50:	mov	x1, x19
     f54:	add	x0, x0, #0x0
     f58:	bl	0 <gomp_fatal>
     f5c:	nop

0000000000000f60 <acc_free>:
     f60:	cbz	x0, 1054 <acc_free+0xf4>
     f64:	adrp	x1, 0 <goacc_tls_data>
     f68:	ldr	x1, [x1]
     f6c:	mrs	x2, tpidr_el0
     f70:	stp	x29, x30, [sp, #-64]!
     f74:	mov	x29, sp
     f78:	ldr	x1, [x2, x1]
     f7c:	stp	x19, x20, [sp, #16]
     f80:	cbz	x1, 1070 <acc_free+0x110>
     f84:	ldr	x20, [x1, #8]
     f88:	cbz	x20, 1070 <acc_free+0x110>
     f8c:	ldr	w1, [x20, #8]
     f90:	tbnz	w1, #0, 1048 <acc_free+0xe8>
     f94:	stp	x21, x22, [sp, #32]
     f98:	add	x22, x20, #0xa8
     f9c:	mov	x19, x0
     fa0:	mov	w0, #0x1                   	// #1
     fa4:	ldaxr	w1, [x22]
     fa8:	cbnz	w1, fb4 <acc_free+0x54>
     fac:	stxr	w2, w0, [x22]
     fb0:	cbnz	w2, fa4 <acc_free+0x44>
     fb4:	cmp	w1, #0x0
     fb8:	b.ne	10b8 <acc_free+0x158>  // b.any
     fbc:	ldr	x0, [x20, #176]
     fc0:	cbz	x0, 1010 <acc_free+0xb0>
     fc4:	mov	x1, x19
     fc8:	mov	x2, #0x1                   	// #1
     fcc:	bl	158 <lookup_dev.part.0>
     fd0:	mov	x21, x0
     fd4:	cbz	x0, 1010 <acc_free+0xb0>
     fd8:	stp	x23, x24, [sp, #48]
     fdc:	ldp	x0, x23, [x0, #16]
     fe0:	ldr	x24, [x0, #16]
     fe4:	ldxr	w0, [x22]
     fe8:	stlxr	w1, wzr, [x22]
     fec:	cbnz	w1, fe4 <acc_free+0x84>
     ff0:	tbnz	w0, #31, 1064 <acc_free+0x104>
     ff4:	ldr	x0, [x21]
     ff8:	add	x0, x23, x0
     ffc:	sub	x0, x0, x24
    1000:	add	x0, x19, x0
    1004:	bl	df8 <acc_unmap_data>
    1008:	ldp	x23, x24, [sp, #48]
    100c:	b	1020 <acc_free+0xc0>
    1010:	ldxr	w0, [x22]
    1014:	stlxr	w1, wzr, [x22]
    1018:	cbnz	w1, 1010 <acc_free+0xb0>
    101c:	tbnz	w0, #31, 1058 <acc_free+0xf8>
    1020:	ldr	w0, [x20, #12]
    1024:	mov	x1, x19
    1028:	ldr	x2, [x20, #104]
    102c:	blr	x2
    1030:	tst	w0, #0xff
    1034:	b.eq	109c <acc_free+0x13c>  // b.none
    1038:	ldp	x19, x20, [sp, #16]
    103c:	ldp	x21, x22, [sp, #32]
    1040:	ldp	x29, x30, [sp], #64
    1044:	ret
    1048:	ldp	x19, x20, [sp, #16]
    104c:	ldp	x29, x30, [sp], #64
    1050:	b	0 <free>
    1054:	ret
    1058:	mov	x0, x22
    105c:	bl	0 <gomp_mutex_unlock_slow>
    1060:	b	1020 <acc_free+0xc0>
    1064:	mov	x0, x22
    1068:	bl	0 <gomp_mutex_unlock_slow>
    106c:	b	ff4 <acc_free+0x94>
    1070:	adrp	x3, 0 <gomp_mutex_unlock>
    1074:	add	x3, x3, #0x0
    1078:	adrp	x1, 0 <gomp_mutex_unlock>
    107c:	adrp	x0, 0 <gomp_mutex_unlock>
    1080:	add	x3, x3, #0x98
    1084:	add	x1, x1, #0x0
    1088:	add	x0, x0, #0x0
    108c:	mov	w2, #0x7f                  	// #127
    1090:	stp	x21, x22, [sp, #32]
    1094:	stp	x23, x24, [sp, #48]
    1098:	bl	0 <__assert_fail>
    109c:	adrp	x1, 0 <gomp_mutex_unlock>
    10a0:	add	x1, x1, #0x0
    10a4:	adrp	x0, 0 <gomp_mutex_unlock>
    10a8:	add	x1, x1, #0xa8
    10ac:	add	x0, x0, #0x0
    10b0:	stp	x23, x24, [sp, #48]
    10b4:	bl	0 <gomp_fatal>
    10b8:	mov	x0, x22
    10bc:	bl	0 <gomp_mutex_lock_slow>
    10c0:	b	fbc <acc_free+0x5c>
    10c4:	nop

00000000000010c8 <acc_create>:
    10c8:	mov	x2, x1
    10cc:	mov	w3, #0xfffffffe            	// #-2
    10d0:	mov	x1, x0
    10d4:	mov	w0, #0x3                   	// #3
    10d8:	b	680 <present_create_copy>
    10dc:	nop

00000000000010e0 <acc_create_async>:
    10e0:	mov	x4, x1
    10e4:	mov	w3, w2
    10e8:	mov	x1, x0
    10ec:	mov	x2, x4
    10f0:	mov	w0, #0x3                   	// #3
    10f4:	b	680 <present_create_copy>

00000000000010f8 <acc_copyin>:
    10f8:	mov	x2, x1
    10fc:	mov	w3, #0xfffffffe            	// #-2
    1100:	mov	x1, x0
    1104:	mov	w0, #0x7                   	// #7
    1108:	b	680 <present_create_copy>
    110c:	nop

0000000000001110 <acc_copyin_async>:
    1110:	mov	x4, x1
    1114:	mov	w3, w2
    1118:	mov	x1, x0
    111c:	mov	x2, x4
    1120:	mov	w0, #0x7                   	// #7
    1124:	b	680 <present_create_copy>

0000000000001128 <acc_delete>:
    1128:	mov	x2, x1
    112c:	mov	w3, #0xfffffffe            	// #-2
    1130:	mov	x1, x0
    1134:	mov	w0, #0x0                   	// #0
    1138:	b	428 <delete_copyout.isra.0>
    113c:	nop

0000000000001140 <acc_delete_async>:
    1140:	mov	x4, x1
    1144:	mov	w3, w2
    1148:	mov	x1, x0
    114c:	mov	x2, x4
    1150:	mov	w0, #0x0                   	// #0
    1154:	b	428 <delete_copyout.isra.0>

0000000000001158 <acc_delete_finalize>:
    1158:	mov	x2, x1
    115c:	mov	w3, #0xfffffffe            	// #-2
    1160:	mov	x1, x0
    1164:	mov	w0, #0x2                   	// #2
    1168:	b	428 <delete_copyout.isra.0>
    116c:	nop

0000000000001170 <acc_delete_finalize_async>:
    1170:	mov	x4, x1
    1174:	mov	w3, w2
    1178:	mov	x1, x0
    117c:	mov	x2, x4
    1180:	mov	w0, #0x2                   	// #2
    1184:	b	428 <delete_copyout.isra.0>

0000000000001188 <acc_copyout>:
    1188:	mov	x2, x1
    118c:	mov	w3, #0xfffffffe            	// #-2
    1190:	mov	x1, x0
    1194:	mov	w0, #0x1                   	// #1
    1198:	b	428 <delete_copyout.isra.0>
    119c:	nop

00000000000011a0 <acc_copyout_async>:
    11a0:	mov	x4, x1
    11a4:	mov	w3, w2
    11a8:	mov	x1, x0
    11ac:	mov	x2, x4
    11b0:	mov	w0, #0x1                   	// #1
    11b4:	b	428 <delete_copyout.isra.0>

00000000000011b8 <acc_copyout_finalize>:
    11b8:	mov	x2, x1
    11bc:	mov	w3, #0xfffffffe            	// #-2
    11c0:	mov	x1, x0
    11c4:	mov	w0, #0x3                   	// #3
    11c8:	b	428 <delete_copyout.isra.0>
    11cc:	nop

00000000000011d0 <acc_copyout_finalize_async>:
    11d0:	mov	x4, x1
    11d4:	mov	w3, w2
    11d8:	mov	x1, x0
    11dc:	mov	x2, x4
    11e0:	mov	w0, #0x3                   	// #3
    11e4:	b	428 <delete_copyout.isra.0>

00000000000011e8 <acc_update_device>:
    11e8:	mov	x2, x1
    11ec:	mov	w3, #0xfffffffe            	// #-2
    11f0:	mov	x1, x0
    11f4:	mov	w0, #0x1                   	// #1
    11f8:	b	2d0 <update_dev_host>
    11fc:	nop

0000000000001200 <acc_update_device_async>:
    1200:	mov	x4, x1
    1204:	mov	w3, w2
    1208:	mov	x1, x0
    120c:	mov	x2, x4
    1210:	mov	w0, #0x1                   	// #1
    1214:	b	2d0 <update_dev_host>

0000000000001218 <acc_update_self>:
    1218:	mov	x2, x1
    121c:	mov	w3, #0xfffffffe            	// #-2
    1220:	mov	x1, x0
    1224:	mov	w0, #0x0                   	// #0
    1228:	b	2d0 <update_dev_host>
    122c:	nop

0000000000001230 <acc_update_self_async>:
    1230:	mov	x4, x1
    1234:	mov	w3, w2
    1238:	mov	x1, x0
    123c:	mov	x2, x4
    1240:	mov	w0, #0x0                   	// #0
    1244:	b	2d0 <update_dev_host>

0000000000001248 <gomp_acc_insert_pointer>:
    1248:	adrp	x6, 0 <goacc_tls_data>
    124c:	ldr	x6, [x6]
    1250:	mrs	x7, tpidr_el0
    1254:	stp	x29, x30, [sp, #-144]!
    1258:	mov	x29, sp
    125c:	stp	x21, x22, [sp, #32]
    1260:	mov	x21, x2
    1264:	mov	x22, x3
    1268:	ldr	x2, [x7, x6]
    126c:	stp	x19, x20, [sp, #16]
    1270:	mov	x19, x1
    1274:	ldr	x1, [x21]
    1278:	stp	x23, x24, [sp, #48]
    127c:	ldr	x24, [x2, #8]
    1280:	str	x25, [sp, #64]
    1284:	mov	x25, x0
    1288:	cmp	x1, #0x0
    128c:	ldr	x0, [x19]
    1290:	add	x20, x24, #0xa8
    1294:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    1298:	b.ne	1334 <gomp_acc_insert_pointer+0xec>  // b.any
    129c:	adrp	x23, 0 <gomp_debug_var>
    12a0:	ldr	w0, [x23]
    12a4:	cbnz	w0, 141c <gomp_acc_insert_pointer+0x1d4>
    12a8:	mov	x2, x19
    12ac:	mov	x1, x25
    12b0:	mov	x5, x22
    12b4:	mov	x4, x21
    12b8:	mov	x0, x24
    12bc:	mov	w7, #0x0                   	// #0
    12c0:	mov	w6, #0x1                   	// #1
    12c4:	mov	x3, #0x0                   	// #0
    12c8:	bl	0 <gomp_map_vars>
    12cc:	mov	x19, x0
    12d0:	ldr	w1, [x23]
    12d4:	cbnz	w1, 143c <gomp_acc_insert_pointer+0x1f4>
    12d8:	ldr	x1, [x19, #64]
    12dc:	mov	x0, #0x1                   	// #1
    12e0:	mov	w2, w0
    12e4:	str	x0, [x1, #40]
    12e8:	ldaxr	w1, [x20]
    12ec:	cbnz	w1, 12f8 <gomp_acc_insert_pointer+0xb0>
    12f0:	stxr	w0, w2, [x20]
    12f4:	cbnz	w0, 12e8 <gomp_acc_insert_pointer+0xa0>
    12f8:	cmp	w1, #0x0
    12fc:	b.ne	1474 <gomp_acc_insert_pointer+0x22c>  // b.any
    1300:	ldr	x0, [x24, #176]
    1304:	str	x0, [x19, #40]
    1308:	str	x19, [x24, #176]
    130c:	ldxr	w0, [x20]
    1310:	stlxr	w1, wzr, [x20]
    1314:	cbnz	w1, 130c <gomp_acc_insert_pointer+0xc4>
    1318:	tbnz	w0, #31, 1410 <gomp_acc_insert_pointer+0x1c8>
    131c:	ldp	x19, x20, [sp, #16]
    1320:	ldp	x21, x22, [sp, #32]
    1324:	ldp	x23, x24, [sp, #48]
    1328:	ldr	x25, [sp, #64]
    132c:	ldp	x29, x30, [sp], #144
    1330:	ret
    1334:	bl	1d0 <acc_is_present.part.0>
    1338:	cbz	w0, 129c <gomp_acc_insert_pointer+0x54>
    133c:	mov	w0, #0x1                   	// #1
    1340:	ldaxr	w1, [x20]
    1344:	cbnz	w1, 1350 <gomp_acc_insert_pointer+0x108>
    1348:	stxr	w2, w0, [x20]
    134c:	cbnz	w2, 1340 <gomp_acc_insert_pointer+0xf8>
    1350:	cmp	w1, #0x0
    1354:	b.ne	1480 <gomp_acc_insert_pointer+0x238>  // b.any
    1358:	ldr	x3, [x19]
    135c:	add	x0, x24, #0xa0
    1360:	ldr	x2, [x21]
    1364:	add	x1, sp, #0x58
    1368:	add	x2, x2, x3
    136c:	stp	x3, x2, [sp, #88]
    1370:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1374:	mov	x19, x0
    1378:	ldxr	w0, [x20]
    137c:	stlxr	w1, wzr, [x20]
    1380:	cbnz	w1, 1378 <gomp_acc_insert_pointer+0x130>
    1384:	tbnz	w0, #31, 145c <gomp_acc_insert_pointer+0x214>
    1388:	ldr	x4, [x19, #16]
    138c:	ldr	x3, [x4, #48]
    1390:	cbz	x3, 1468 <gomp_acc_insert_pointer+0x220>
    1394:	add	x4, x4, #0x40
    1398:	mov	x1, #0x0                   	// #0
    139c:	b	13ac <gomp_acc_insert_pointer+0x164>
    13a0:	add	x1, x1, #0x1
    13a4:	cmp	x3, x1
    13a8:	b.eq	1468 <gomp_acc_insert_pointer+0x220>  // b.none
    13ac:	lsl	x2, x1, #5
    13b0:	ldr	x2, [x4, x2]
    13b4:	cmp	x2, x19
    13b8:	b.ne	13a0 <gomp_acc_insert_pointer+0x158>  // b.any
    13bc:	add	x6, x25, x1
    13c0:	cbz	x25, 131c <gomp_acc_insert_pointer+0xd4>
    13c4:	nop
    13c8:	cmp	x3, x1
    13cc:	b.ls	13ec <gomp_acc_insert_pointer+0x1a4>  // b.plast
    13d0:	lsl	x0, x1, #5
    13d4:	ldr	x0, [x4, x0]
    13d8:	cbz	x0, 13ec <gomp_acc_insert_pointer+0x1a4>
    13dc:	ldp	x5, x2, [x0, #32]
    13e0:	add	x5, x5, #0x1
    13e4:	add	x2, x2, #0x1
    13e8:	stp	x5, x2, [x0, #32]
    13ec:	add	x1, x1, #0x1
    13f0:	cmp	x6, x1
    13f4:	b.ne	13c8 <gomp_acc_insert_pointer+0x180>  // b.any
    13f8:	ldp	x19, x20, [sp, #16]
    13fc:	ldp	x21, x22, [sp, #32]
    1400:	ldp	x23, x24, [sp, #48]
    1404:	ldr	x25, [sp, #64]
    1408:	ldp	x29, x30, [sp], #144
    140c:	ret
    1410:	mov	x0, x20
    1414:	bl	0 <gomp_mutex_unlock_slow>
    1418:	b	131c <gomp_acc_insert_pointer+0xd4>
    141c:	adrp	x2, 0 <gomp_mutex_unlock>
    1420:	add	x2, x2, #0x0
    1424:	add	x2, x2, #0xb8
    1428:	adrp	x1, 0 <gomp_mutex_unlock>
    142c:	mov	w0, #0x0                   	// #0
    1430:	add	x1, x1, #0x0
    1434:	bl	0 <gomp_debug>
    1438:	b	12a8 <gomp_acc_insert_pointer+0x60>
    143c:	adrp	x2, 0 <gomp_mutex_unlock>
    1440:	add	x2, x2, #0x0
    1444:	add	x2, x2, #0xb8
    1448:	adrp	x1, 0 <gomp_mutex_unlock>
    144c:	mov	w0, #0x0                   	// #0
    1450:	add	x1, x1, #0x0
    1454:	bl	0 <gomp_debug>
    1458:	b	12d8 <gomp_acc_insert_pointer+0x90>
    145c:	mov	x0, x20
    1460:	bl	0 <gomp_mutex_unlock_slow>
    1464:	b	1388 <gomp_acc_insert_pointer+0x140>
    1468:	adrp	x0, 0 <gomp_mutex_unlock>
    146c:	add	x0, x0, #0x0
    1470:	bl	0 <gomp_fatal>
    1474:	mov	x0, x20
    1478:	bl	0 <gomp_mutex_lock_slow>
    147c:	b	1300 <gomp_acc_insert_pointer+0xb8>
    1480:	mov	x0, x20
    1484:	bl	0 <gomp_mutex_lock_slow>
    1488:	b	1358 <gomp_acc_insert_pointer+0x110>
    148c:	nop

0000000000001490 <gomp_acc_remove_pointer>:
    1490:	cmp	w5, #0x1
    1494:	cset	w5, ne  // ne = any
    1498:	cmp	x1, #0x0
    149c:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    14a0:	b.ne	14a8 <gomp_acc_remove_pointer+0x18>  // b.any
    14a4:	ret
    14a8:	stp	x29, x30, [sp, #-176]!
    14ac:	mov	x29, sp
    14b0:	stp	x23, x24, [sp, #48]
    14b4:	and	w23, w2, #0xff
    14b8:	adrp	x2, 0 <goacc_tls_data>
    14bc:	ldr	x2, [x2]
    14c0:	stp	x21, x22, [sp, #32]
    14c4:	mov	w22, w3
    14c8:	mrs	x3, tpidr_el0
    14cc:	add	w24, w5, #0x2
    14d0:	stp	x19, x20, [sp, #16]
    14d4:	mov	x20, x0
    14d8:	ldr	x2, [x3, x2]
    14dc:	stp	x25, x26, [sp, #64]
    14e0:	mov	w25, w4
    14e4:	ldr	x26, [x2, #8]
    14e8:	bl	1d0 <acc_is_present.part.0>
    14ec:	cbz	w0, 1604 <gomp_acc_remove_pointer+0x174>
    14f0:	add	x21, x26, #0xa8
    14f4:	mov	w0, #0x1                   	// #1
    14f8:	str	x27, [sp, #80]
    14fc:	ldaxr	w1, [x21]
    1500:	cbnz	w1, 150c <gomp_acc_remove_pointer+0x7c>
    1504:	stxr	w2, w0, [x21]
    1508:	cbnz	w2, 14fc <gomp_acc_remove_pointer+0x6c>
    150c:	cmp	w1, #0x0
    1510:	b.ne	16e8 <gomp_acc_remove_pointer+0x258>  // b.any
    1514:	add	x2, x20, #0x1
    1518:	add	x1, sp, #0x78
    151c:	add	x0, x26, #0xa0
    1520:	stp	x20, x2, [sp, #120]
    1524:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1528:	str	x0, [sp, #104]
    152c:	mov	x19, x0
    1530:	cbz	x0, 16f4 <gomp_acc_remove_pointer+0x264>
    1534:	adrp	x27, 0 <gomp_debug_var>
    1538:	ldr	w0, [x27]
    153c:	cbnz	w0, 1670 <gomp_acc_remove_pointer+0x1e0>
    1540:	ldp	x0, x1, [x19, #32]
    1544:	ldr	x20, [x19, #16]
    1548:	cmp	x0, x1
    154c:	b.cc	16d4 <gomp_acc_remove_pointer+0x244>  // b.lo, b.ul, b.last
    1550:	cbnz	w25, 161c <gomp_acc_remove_pointer+0x18c>
    1554:	cbz	x1, 1564 <gomp_acc_remove_pointer+0xd4>
    1558:	sub	x1, x1, #0x1
    155c:	sub	x0, x0, #0x1
    1560:	stp	x0, x1, [x19, #32]
    1564:	ldxr	w0, [x21]
    1568:	stlxr	w1, wzr, [x21]
    156c:	cbnz	w1, 1564 <gomp_acc_remove_pointer+0xd4>
    1570:	tbnz	w0, #31, 169c <gomp_acc_remove_pointer+0x20c>
    1574:	ldr	x0, [x19, #32]
    1578:	cbnz	x0, 15e8 <gomp_acc_remove_pointer+0x158>
    157c:	ldr	x1, [x20]
    1580:	sxtw	x4, w24
    1584:	cmp	x1, w24, sxtw
    1588:	b.eq	1628 <gomp_acc_remove_pointer+0x198>  // b.none
    158c:	ldr	x2, [x20, #48]
    1590:	mov	x1, #0x1                   	// #1
    1594:	str	x1, [x19, #32]
    1598:	str	x4, [x20]
    159c:	cbz	x2, 15cc <gomp_acc_remove_pointer+0x13c>
    15a0:	add	x3, x20, #0x40
    15a4:	b	15b4 <gomp_acc_remove_pointer+0x124>
    15a8:	add	x0, x0, #0x1
    15ac:	cmp	x0, x2
    15b0:	b.eq	15cc <gomp_acc_remove_pointer+0x13c>  // b.none
    15b4:	lsl	x1, x0, #5
    15b8:	ldr	x1, [x3, x1]
    15bc:	cmp	x1, x19
    15c0:	b.ne	15a8 <gomp_acc_remove_pointer+0x118>  // b.any
    15c4:	add	x0, x20, x0, lsl #5
    15c8:	strb	w23, [x0, #72]
    15cc:	cmn	w22, #0x1
    15d0:	b.lt	1660 <gomp_acc_remove_pointer+0x1d0>  // b.tstop
    15d4:	ldr	x2, [x20, #56]
    15d8:	mov	w1, w22
    15dc:	mov	x0, x20
    15e0:	ldr	x2, [x2, #192]
    15e4:	blr	x2
    15e8:	ldxr	w0, [x21]
    15ec:	stlxr	w1, wzr, [x21]
    15f0:	cbnz	w1, 15e8 <gomp_acc_remove_pointer+0x158>
    15f4:	tbnz	w0, #31, 1690 <gomp_acc_remove_pointer+0x200>
    15f8:	ldr	w0, [x27]
    15fc:	cbnz	w0, 16a8 <gomp_acc_remove_pointer+0x218>
    1600:	ldr	x27, [sp, #80]
    1604:	ldp	x19, x20, [sp, #16]
    1608:	ldp	x21, x22, [sp, #32]
    160c:	ldp	x23, x24, [sp, #48]
    1610:	ldp	x25, x26, [sp, #64]
    1614:	ldp	x29, x30, [sp], #176
    1618:	ret
    161c:	sub	x0, x0, x1
    1620:	stp	x0, xzr, [x19, #32]
    1624:	b	1564 <gomp_acc_remove_pointer+0xd4>
    1628:	ldr	x1, [x26, #176]
    162c:	cbz	x1, 170c <gomp_acc_remove_pointer+0x27c>
    1630:	mov	x3, #0x0                   	// #0
    1634:	ldr	x20, [x19, #16]
    1638:	b	1648 <gomp_acc_remove_pointer+0x1b8>
    163c:	mov	x3, x1
    1640:	cbz	x2, 170c <gomp_acc_remove_pointer+0x27c>
    1644:	mov	x1, x2
    1648:	cmp	x1, x20
    164c:	ldr	x2, [x1, #40]
    1650:	b.ne	163c <gomp_acc_remove_pointer+0x1ac>  // b.any
    1654:	cbz	x3, 16cc <gomp_acc_remove_pointer+0x23c>
    1658:	str	x2, [x3, #40]
    165c:	b	158c <gomp_acc_remove_pointer+0xfc>
    1660:	mov	x0, x20
    1664:	mov	w1, #0x1                   	// #1
    1668:	bl	0 <gomp_unmap_vars>
    166c:	b	15e8 <gomp_acc_remove_pointer+0x158>
    1670:	adrp	x2, 0 <gomp_mutex_unlock>
    1674:	add	x2, x2, #0x0
    1678:	add	x2, x2, #0xd0
    167c:	adrp	x1, 0 <gomp_mutex_unlock>
    1680:	mov	w0, #0x0                   	// #0
    1684:	add	x1, x1, #0x0
    1688:	bl	0 <gomp_debug>
    168c:	b	1540 <gomp_acc_remove_pointer+0xb0>
    1690:	mov	x0, x21
    1694:	bl	0 <gomp_mutex_unlock_slow>
    1698:	b	15f8 <gomp_acc_remove_pointer+0x168>
    169c:	mov	x0, x21
    16a0:	bl	0 <gomp_mutex_unlock_slow>
    16a4:	b	1574 <gomp_acc_remove_pointer+0xe4>
    16a8:	adrp	x2, 0 <gomp_mutex_unlock>
    16ac:	add	x2, x2, #0x0
    16b0:	add	x2, x2, #0xd0
    16b4:	adrp	x1, 0 <gomp_mutex_unlock>
    16b8:	mov	w0, #0x0                   	// #0
    16bc:	add	x1, x1, #0x0
    16c0:	bl	0 <gomp_debug>
    16c4:	ldr	x27, [sp, #80]
    16c8:	b	1604 <gomp_acc_remove_pointer+0x174>
    16cc:	str	x2, [x26, #176]
    16d0:	b	158c <gomp_acc_remove_pointer+0xfc>
    16d4:	mov	x0, x21
    16d8:	bl	0 <gomp_mutex_unlock>
    16dc:	adrp	x0, 0 <gomp_mutex_unlock>
    16e0:	add	x0, x0, #0x0
    16e4:	bl	0 <gomp_fatal>
    16e8:	mov	x0, x21
    16ec:	bl	0 <gomp_mutex_lock_slow>
    16f0:	b	1514 <gomp_acc_remove_pointer+0x84>
    16f4:	mov	x0, x21
    16f8:	bl	0 <gomp_mutex_unlock>
    16fc:	adrp	x0, 0 <gomp_mutex_unlock>
    1700:	mov	x1, x20
    1704:	add	x0, x0, #0x0
    1708:	bl	0 <gomp_fatal>
    170c:	mov	x0, #0x0                   	// #0
    1710:	mov	x1, #0x1                   	// #1
    1714:	str	x1, [x19, #32]
    1718:	str	xzr, [x0]
    171c:	brk	#0x3e8

oacc-async.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_async_test>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	cmp	w0, #0x0
   8:	add	w2, w0, #0x2
   c:	mov	x29, sp
  10:	ccmp	w2, #0x1, #0x0, lt  // lt = tstop
  14:	b.hi	50 <acc_async_test+0x50>  // b.pmore
  18:	adrp	x1, 0 <goacc_tls_data>
  1c:	ldr	x1, [x1]
  20:	mrs	x2, tpidr_el0
  24:	ldr	x1, [x2, x1]
  28:	cbz	x1, 44 <acc_async_test+0x44>
  2c:	ldr	x1, [x1, #8]
  30:	cbz	x1, 44 <acc_async_test+0x44>
  34:	ldp	x29, x30, [sp], #16
  38:	ldr	x1, [x1, #200]
  3c:	mov	x16, x1
  40:	br	x16
  44:	adrp	x0, 0 <acc_async_test>
  48:	add	x0, x0, #0x0
  4c:	bl	0 <gomp_fatal>
  50:	mov	w1, w0
  54:	adrp	x0, 0 <acc_async_test>
  58:	add	x0, x0, #0x0
  5c:	bl	0 <gomp_fatal>

0000000000000060 <acc_async_test_all>:
  60:	adrp	x0, 0 <goacc_tls_data>
  64:	ldr	x0, [x0]
  68:	mrs	x1, tpidr_el0
  6c:	ldr	x0, [x1, x0]
  70:	cbz	x0, 88 <acc_async_test_all+0x28>
  74:	ldr	x0, [x0, #8]
  78:	cbz	x0, 88 <acc_async_test_all+0x28>
  7c:	ldr	x0, [x0, #208]
  80:	mov	x16, x0
  84:	br	x16
  88:	stp	x29, x30, [sp, #-16]!
  8c:	adrp	x0, 0 <acc_async_test>
  90:	add	x0, x0, #0x0
  94:	mov	x29, sp
  98:	bl	0 <gomp_fatal>
  9c:	nop

00000000000000a0 <acc_async_wait>:
  a0:	stp	x29, x30, [sp, #-16]!
  a4:	cmp	w0, #0x0
  a8:	add	w2, w0, #0x2
  ac:	mov	x29, sp
  b0:	ccmp	w2, #0x1, #0x0, lt  // lt = tstop
  b4:	b.hi	f0 <acc_async_wait+0x50>  // b.pmore
  b8:	adrp	x1, 0 <goacc_tls_data>
  bc:	ldr	x1, [x1]
  c0:	mrs	x2, tpidr_el0
  c4:	ldr	x1, [x2, x1]
  c8:	cbz	x1, e4 <acc_async_wait+0x44>
  cc:	ldr	x1, [x1, #8]
  d0:	cbz	x1, e4 <acc_async_wait+0x44>
  d4:	ldp	x29, x30, [sp], #16
  d8:	ldr	x1, [x1, #216]
  dc:	mov	x16, x1
  e0:	br	x16
  e4:	adrp	x0, 0 <acc_async_test>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <gomp_fatal>
  f0:	mov	w1, w0
  f4:	adrp	x0, 0 <acc_async_test>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <gomp_fatal>

0000000000000100 <acc_wait_async>:
 100:	adrp	x2, 0 <goacc_tls_data>
 104:	ldr	x2, [x2]
 108:	mrs	x3, tpidr_el0
 10c:	ldr	x2, [x3, x2]
 110:	cbz	x2, 128 <acc_wait_async+0x28>
 114:	ldr	x2, [x2, #8]
 118:	cbz	x2, 128 <acc_wait_async+0x28>
 11c:	ldr	x2, [x2, #224]
 120:	mov	x16, x2
 124:	br	x16
 128:	stp	x29, x30, [sp, #-16]!
 12c:	adrp	x0, 0 <acc_async_test>
 130:	add	x0, x0, #0x0
 134:	mov	x29, sp
 138:	bl	0 <gomp_fatal>
 13c:	nop

0000000000000140 <acc_async_wait_all>:
 140:	adrp	x0, 0 <goacc_tls_data>
 144:	ldr	x0, [x0]
 148:	mrs	x1, tpidr_el0
 14c:	ldr	x0, [x1, x0]
 150:	cbz	x0, 168 <acc_async_wait_all+0x28>
 154:	ldr	x0, [x0, #8]
 158:	cbz	x0, 168 <acc_async_wait_all+0x28>
 15c:	ldr	x0, [x0, #232]
 160:	mov	x16, x0
 164:	br	x16
 168:	stp	x29, x30, [sp, #-16]!
 16c:	adrp	x0, 0 <acc_async_test>
 170:	add	x0, x0, #0x0
 174:	mov	x29, sp
 178:	bl	0 <gomp_fatal>
 17c:	nop

0000000000000180 <acc_wait_all_async>:
 180:	stp	x29, x30, [sp, #-16]!
 184:	cmp	w0, #0x0
 188:	add	w2, w0, #0x2
 18c:	mov	x29, sp
 190:	ccmp	w2, #0x1, #0x0, lt  // lt = tstop
 194:	b.hi	1d0 <acc_wait_all_async+0x50>  // b.pmore
 198:	adrp	x1, 0 <goacc_tls_data>
 19c:	ldr	x1, [x1]
 1a0:	mrs	x2, tpidr_el0
 1a4:	ldr	x1, [x2, x1]
 1a8:	cbz	x1, 1c4 <acc_wait_all_async+0x44>
 1ac:	ldr	x1, [x1, #8]
 1b0:	cbz	x1, 1c4 <acc_wait_all_async+0x44>
 1b4:	ldp	x29, x30, [sp], #16
 1b8:	ldr	x1, [x1, #240]
 1bc:	mov	x16, x1
 1c0:	br	x16
 1c4:	adrp	x0, 0 <acc_async_test>
 1c8:	add	x0, x0, #0x0
 1cc:	bl	0 <gomp_fatal>
 1d0:	mov	w1, w0
 1d4:	adrp	x0, 0 <acc_async_test>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <gomp_fatal>

oacc-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_async_unmap_vars>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	w0, w1
  14:	ldr	x20, [x19, #56]
  18:	ldr	x1, [x20, #248]
  1c:	blr	x1
  20:	mov	x0, x19
  24:	mov	w1, #0x1                   	// #1
  28:	bl	0 <gomp_unmap_vars>
  2c:	ldr	x1, [x20, #248]
  30:	mov	w0, #0xfffffffe            	// #-2
  34:	ldp	x19, x20, [sp, #16]
  38:	mov	x16, x1
  3c:	ldp	x29, x30, [sp], #32
  40:	br	x16
  44:	nop

0000000000000048 <GOMP_PLUGIN_acc_thread>:
  48:	adrp	x0, 0 <goacc_tls_data>
  4c:	ldr	x0, [x0]
  50:	mrs	x1, tpidr_el0
  54:	ldr	x0, [x1, x0]
  58:	cbz	x0, 60 <GOMP_PLUGIN_acc_thread+0x18>
  5c:	ldr	x0, [x0, #40]
  60:	ret
  64:	nop

0000000000000068 <GOMP_PLUGIN_acc_default_dim>:
  68:	cmp	w0, #0x2
  6c:	b.hi	80 <GOMP_PLUGIN_acc_default_dim+0x18>  // b.pmore
  70:	adrp	x1, 0 <goacc_default_dims>
  74:	add	x1, x1, #0x0
  78:	ldr	w0, [x1, w0, uxtw #2]
  7c:	ret
  80:	stp	x29, x30, [sp, #-16]!
  84:	mov	w1, w0
  88:	adrp	x0, 0 <GOMP_PLUGIN_async_unmap_vars>
  8c:	mov	x29, sp
  90:	add	x0, x0, #0x0
  94:	bl	0 <gomp_fatal>

oacc-cuda.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_get_current_cuda_device>:
   0:	adrp	x0, 0 <goacc_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	ldr	x0, [x1, x0]
  10:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  14:	ldr	x0, [x0, #8]
  18:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  1c:	ldr	x0, [x0, #272]
  20:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  24:	mov	x16, x0
  28:	br	x16
  2c:	mov	x0, #0x0                   	// #0
  30:	ret
  34:	nop

0000000000000038 <acc_get_current_cuda_context>:
  38:	adrp	x0, 0 <goacc_tls_data>
  3c:	ldr	x0, [x0]
  40:	mrs	x1, tpidr_el0
  44:	ldr	x0, [x1, x0]
  48:	cbz	x0, 64 <acc_get_current_cuda_context+0x2c>
  4c:	ldr	x0, [x0, #8]
  50:	cbz	x0, 64 <acc_get_current_cuda_context+0x2c>
  54:	ldr	x0, [x0, #280]
  58:	cbz	x0, 64 <acc_get_current_cuda_context+0x2c>
  5c:	mov	x16, x0
  60:	br	x16
  64:	mov	x0, #0x0                   	// #0
  68:	ret
  6c:	nop

0000000000000070 <acc_get_cuda_stream>:
  70:	adrp	x2, 0 <goacc_tls_data>
  74:	ldr	x2, [x2]
  78:	mrs	x3, tpidr_el0
  7c:	add	w1, w0, #0x2
  80:	cmp	w0, #0x0
  84:	ccmp	w1, #0x1, #0x0, lt  // lt = tstop
  88:	ldr	x1, [x3, x2]
  8c:	b.hi	ac <acc_get_cuda_stream+0x3c>  // b.pmore
  90:	cbz	x1, ac <acc_get_cuda_stream+0x3c>
  94:	ldr	x1, [x1, #8]
  98:	cbz	x1, ac <acc_get_cuda_stream+0x3c>
  9c:	ldr	x1, [x1, #288]
  a0:	cbz	x1, ac <acc_get_cuda_stream+0x3c>
  a4:	mov	x16, x1
  a8:	br	x16
  ac:	mov	x0, #0x0                   	// #0
  b0:	ret
  b4:	nop

00000000000000b8 <acc_set_cuda_stream>:
  b8:	stp	x29, x30, [sp, #-32]!
  bc:	cmp	w0, #0x0
  c0:	mov	x29, sp
  c4:	stp	x19, x20, [sp, #16]
  c8:	mov	w19, w0
  cc:	add	w0, w0, #0x2
  d0:	ccmp	w0, #0x1, #0x0, lt  // lt = tstop
  d4:	b.hi	120 <acc_set_cuda_stream+0x68>  // b.pmore
  d8:	mov	x20, x1
  dc:	cbz	x1, 120 <acc_set_cuda_stream+0x68>
  e0:	bl	0 <goacc_lazy_initialize>
  e4:	adrp	x0, 0 <goacc_tls_data>
  e8:	ldr	x0, [x0]
  ec:	mrs	x1, tpidr_el0
  f0:	ldr	x0, [x1, x0]
  f4:	cbz	x0, 130 <acc_set_cuda_stream+0x78>
  f8:	ldr	x0, [x0, #8]
  fc:	cbz	x0, 130 <acc_set_cuda_stream+0x78>
 100:	ldr	x2, [x0, #296]
 104:	cbz	x2, 130 <acc_set_cuda_stream+0x78>
 108:	mov	x1, x20
 10c:	mov	w0, w19
 110:	ldp	x19, x20, [sp, #16]
 114:	mov	x16, x2
 118:	ldp	x29, x30, [sp], #32
 11c:	br	x16
 120:	mov	w0, #0x0                   	// #0
 124:	ldp	x19, x20, [sp, #16]
 128:	ldp	x29, x30, [sp], #32
 12c:	ret
 130:	mov	w0, #0xffffffff            	// #-1
 134:	b	124 <acc_set_cuda_stream+0x6c>

priority_queue.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <priority_tree_next_task_1>:
   0:	cbz	x1, 68 <priority_tree_next_task_1+0x68>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	sxtw	x20, w0
  14:	add	x20, x20, #0x6
  18:	mov	x19, x1
  1c:	str	x21, [sp, #32]
  20:	neg	x20, x20, lsl #4
  24:	mov	w21, w0
  28:	ldr	x1, [x19, #32]
  2c:	mov	w0, w21
  30:	bl	0 <priority_tree_next_task_1>
  34:	cbnz	x0, 58 <priority_tree_next_task_1+0x58>
  38:	ldr	x0, [x19, #8]
  3c:	add	x0, x0, x20
  40:	ldr	w1, [x0, #200]
  44:	cmp	w1, #0x2
  48:	b.eq	58 <priority_tree_next_task_1+0x58>  // b.none
  4c:	ldr	x19, [x19, #24]
  50:	cbnz	x19, 28 <priority_tree_next_task_1+0x28>
  54:	mov	x0, #0x0                   	// #0
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldr	x21, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	mov	x0, #0x0                   	// #0
  6c:	ret

0000000000000070 <splay_tree_foreach_internal>:
  70:	cbz	x0, c4 <splay_tree_foreach_internal+0x54>
  74:	stp	x29, x30, [sp, #-48]!
  78:	mov	x29, sp
  7c:	stp	x19, x20, [sp, #16]
  80:	mov	x19, x0
  84:	mov	x20, x2
  88:	str	x21, [sp, #32]
  8c:	mov	x21, x1
  90:	mov	x0, x19
  94:	mov	x1, x20
  98:	blr	x21
  9c:	ldr	x0, [x19, #24]
  a0:	mov	x2, x20
  a4:	mov	x1, x21
  a8:	bl	70 <splay_tree_foreach_internal>
  ac:	ldr	x19, [x19, #32]
  b0:	cbnz	x19, 90 <splay_tree_foreach_internal+0x20>
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldr	x21, [sp, #32]
  bc:	ldp	x29, x30, [sp], #48
  c0:	ret
  c4:	ret

00000000000000c8 <splay_tree_splay.part.0>:
  c8:	ldr	x2, [x0]
  cc:	ldr	w3, [x1]
  d0:	ldr	w4, [x2]
  d4:	cmp	w4, w3
  d8:	b.eq	148 <splay_tree_splay.part.0+0x80>  // b.none
  dc:	mov	w7, #0xffffffff            	// #-1
  e0:	mov	w6, #0x1                   	// #1
  e4:	ldp	x1, x5, [x2, #24]
  e8:	cmp	w3, w4
  ec:	csel	x1, x1, x5, lt  // lt = tstop
  f0:	csel	w5, w7, w6, lt  // lt = tstop
  f4:	cbz	x1, 148 <splay_tree_splay.part.0+0x80>
  f8:	ldr	w4, [x1]
  fc:	cmp	w4, w3
 100:	b.eq	190 <splay_tree_splay.part.0+0xc8>  // b.none
 104:	b.gt	14c <splay_tree_splay.part.0+0x84>
 108:	ldr	x4, [x1, #32]
 10c:	cbz	x4, 190 <splay_tree_splay.part.0+0xc8>
 110:	cmp	w5, #0x1
 114:	b.ne	1c4 <splay_tree_splay.part.0+0xfc>  // b.any
 118:	ldr	x5, [x4, #24]
 11c:	str	x1, [x4, #24]
 120:	str	x5, [x1, #32]
 124:	str	x4, [x2, #32]
 128:	ldr	x1, [x4, #24]
 12c:	str	x2, [x4, #24]
 130:	str	x1, [x2, #32]
 134:	mov	x2, x4
 138:	str	x4, [x0]
 13c:	ldr	w4, [x2]
 140:	cmp	w4, w3
 144:	b.ne	e4 <splay_tree_splay.part.0+0x1c>  // b.any
 148:	ret
 14c:	ldr	x4, [x1, #24]
 150:	cbz	x4, 190 <splay_tree_splay.part.0+0xc8>
 154:	cmn	w5, #0x1
 158:	b.ne	1ac <splay_tree_splay.part.0+0xe4>  // b.any
 15c:	ldr	x5, [x4, #32]
 160:	str	x1, [x4, #32]
 164:	str	x5, [x1, #24]
 168:	str	x4, [x2, #24]
 16c:	ldr	x1, [x4, #32]
 170:	str	x2, [x4, #32]
 174:	str	x1, [x2, #24]
 178:	mov	x2, x4
 17c:	str	x4, [x0]
 180:	ldr	w4, [x2]
 184:	cmp	w4, w3
 188:	b.ne	e4 <splay_tree_splay.part.0+0x1c>  // b.any
 18c:	ret
 190:	cmn	w5, #0x1
 194:	b.eq	1e0 <splay_tree_splay.part.0+0x118>  // b.none
 198:	ldr	x3, [x1, #24]
 19c:	str	x2, [x1, #24]
 1a0:	str	x3, [x2, #32]
 1a4:	str	x1, [x0]
 1a8:	ret
 1ac:	cmp	w5, #0x0
 1b0:	b.le	1d8 <splay_tree_splay.part.0+0x110>
 1b4:	ldr	x5, [x4, #32]
 1b8:	str	x1, [x4, #32]
 1bc:	str	x5, [x1, #24]
 1c0:	b	124 <splay_tree_splay.part.0+0x5c>
 1c4:	tbz	w5, #31, 1d8 <splay_tree_splay.part.0+0x110>
 1c8:	ldr	x5, [x4, #24]
 1cc:	str	x1, [x4, #24]
 1d0:	str	x5, [x1, #32]
 1d4:	b	168 <splay_tree_splay.part.0+0xa0>
 1d8:	ldr	x2, [x0]
 1dc:	b	180 <splay_tree_splay.part.0+0xb8>
 1e0:	ldr	x3, [x1, #32]
 1e4:	str	x2, [x1, #32]
 1e8:	str	x3, [x2, #24]
 1ec:	str	x1, [x0]
 1f0:	ret
 1f4:	nop

00000000000001f8 <priority_tree_next_task>:
 1f8:	stp	x29, x30, [sp, #-16]!
 1fc:	mov	x29, sp
 200:	ldr	x1, [x1]
 204:	bl	0 <priority_tree_next_task_1>
 208:	cmp	x0, #0x0
 20c:	mov	x5, x0
 210:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 214:	b.ne	22c <priority_tree_next_task+0x34>  // b.any
 218:	mov	w0, #0x1                   	// #1
 21c:	strb	w0, [x4]
 220:	ldp	x29, x30, [sp], #16
 224:	mov	x0, x5
 228:	ret
 22c:	ldr	x1, [x3]
 230:	mov	w0, w2
 234:	bl	0 <priority_tree_next_task_1>
 238:	cbz	x0, 218 <priority_tree_next_task+0x20>
 23c:	ldr	w1, [x0, #88]
 240:	ldr	w2, [x5, #88]
 244:	cmp	w2, w1
 248:	b.gt	218 <priority_tree_next_task+0x20>
 24c:	b.lt	260 <priority_tree_next_task+0x68>  // b.tstop
 250:	ldrb	w1, [x0, #207]
 254:	cbz	w1, 218 <priority_tree_next_task+0x20>
 258:	ldrb	w1, [x5, #207]
 25c:	cbnz	w1, 218 <priority_tree_next_task+0x20>
 260:	mov	x5, x0
 264:	strb	wzr, [x4]
 268:	mov	x0, x5
 26c:	ldp	x29, x30, [sp], #16
 270:	ret
 274:	nop

0000000000000278 <prio_splay_tree_insert>:
 278:	ldr	x2, [x0]
 27c:	mov	x9, x0
 280:	mov	x8, x1
 284:	cbz	x2, 2f0 <prio_splay_tree_insert+0x78>
 288:	stp	x29, x30, [sp, #-16]!
 28c:	mov	x29, sp
 290:	bl	c8 <splay_tree_splay.part.0>
 294:	ldr	x0, [x0]
 298:	cbz	x0, 2e0 <prio_splay_tree_insert+0x68>
 29c:	ldr	w2, [x0]
 2a0:	ldr	w1, [x8]
 2a4:	cmp	w2, w1
 2a8:	b.eq	2fc <prio_splay_tree_insert+0x84>  // b.none
 2ac:	b.lt	2c8 <prio_splay_tree_insert+0x50>  // b.tstop
 2b0:	ldr	x1, [x0, #24]
 2b4:	stp	x1, x0, [x8, #24]
 2b8:	str	xzr, [x0, #24]
 2bc:	str	x8, [x9]
 2c0:	ldp	x29, x30, [sp], #16
 2c4:	ret
 2c8:	ldr	x1, [x0, #32]
 2cc:	stp	x0, x1, [x8, #24]
 2d0:	str	xzr, [x0, #32]
 2d4:	str	x8, [x9]
 2d8:	ldp	x29, x30, [sp], #16
 2dc:	ret
 2e0:	stp	xzr, xzr, [x8, #24]
 2e4:	str	x8, [x9]
 2e8:	ldp	x29, x30, [sp], #16
 2ec:	ret
 2f0:	stp	xzr, xzr, [x1, #24]
 2f4:	str	x1, [x9]
 2f8:	ret
 2fc:	adrp	x0, 0 <priority_tree_next_task_1>
 300:	add	x0, x0, #0x0
 304:	bl	0 <gomp_fatal>

0000000000000308 <prio_splay_tree_remove>:
 308:	ldr	x2, [x0]
 30c:	cbz	x2, 344 <prio_splay_tree_remove+0x3c>
 310:	mov	x9, x1
 314:	mov	x8, x0
 318:	stp	x29, x30, [sp, #-16]!
 31c:	mov	x29, sp
 320:	bl	c8 <splay_tree_splay.part.0>
 324:	ldr	x1, [x0]
 328:	cbz	x1, 33c <prio_splay_tree_remove+0x34>
 32c:	ldr	w2, [x1]
 330:	ldr	w0, [x9]
 334:	cmp	w2, w0
 338:	b.eq	348 <prio_splay_tree_remove+0x40>  // b.none
 33c:	ldp	x29, x30, [sp], #16
 340:	ret
 344:	ret
 348:	ldp	x0, x2, [x1, #24]
 34c:	cbz	x0, 36c <prio_splay_tree_remove+0x64>
 350:	str	x0, [x8]
 354:	cbz	x2, 33c <prio_splay_tree_remove+0x34>
 358:	mov	x1, x0
 35c:	ldr	x0, [x0, #32]
 360:	cbnz	x0, 358 <prio_splay_tree_remove+0x50>
 364:	str	x2, [x1, #32]
 368:	b	33c <prio_splay_tree_remove+0x34>
 36c:	str	x2, [x8]
 370:	b	33c <prio_splay_tree_remove+0x34>
 374:	nop

0000000000000378 <prio_splay_tree_lookup>:
 378:	ldr	x2, [x0]
 37c:	cbz	x2, 3b4 <prio_splay_tree_lookup+0x3c>
 380:	mov	x9, x1
 384:	stp	x29, x30, [sp, #-16]!
 388:	mov	x29, sp
 38c:	bl	c8 <splay_tree_splay.part.0>
 390:	ldr	x0, [x0]
 394:	cbz	x0, 3a8 <prio_splay_tree_lookup+0x30>
 398:	ldr	w2, [x0]
 39c:	ldr	w1, [x9]
 3a0:	cmp	w2, w1
 3a4:	b.eq	3ac <prio_splay_tree_lookup+0x34>  // b.none
 3a8:	mov	x0, #0x0                   	// #0
 3ac:	ldp	x29, x30, [sp], #16
 3b0:	ret
 3b4:	mov	x0, #0x0                   	// #0
 3b8:	ret
 3bc:	nop

00000000000003c0 <priority_tree_remove>:
 3c0:	mov	x10, x1
 3c4:	sub	x0, x2, w0, sxtw #4
 3c8:	ldr	x1, [x1]
 3cc:	mov	x8, x2
 3d0:	ldur	w2, [x0, #-8]
 3d4:	cbz	x1, 444 <priority_tree_remove+0x84>
 3d8:	stp	x29, x30, [sp, #-48]!
 3dc:	mov	x0, x10
 3e0:	mov	x29, sp
 3e4:	add	x1, sp, #0x18
 3e8:	str	w2, [sp, #24]
 3ec:	bl	378 <prio_splay_tree_lookup>
 3f0:	mov	x11, x0
 3f4:	ldp	x0, x1, [x8]
 3f8:	ldr	x2, [x11, #8]
 3fc:	cmp	x8, x2
 400:	str	x0, [x1]
 404:	str	x1, [x0, #8]
 408:	b.eq	414 <priority_tree_remove+0x54>  // b.none
 40c:	ldp	x29, x30, [sp], #48
 410:	ret
 414:	cmp	x8, x0
 418:	b.eq	428 <priority_tree_remove+0x68>  // b.none
 41c:	str	x0, [x11, #8]
 420:	ldp	x29, x30, [sp], #48
 424:	ret
 428:	mov	x1, x11
 42c:	str	xzr, [x11, #8]
 430:	mov	x0, x10
 434:	bl	308 <prio_splay_tree_remove>
 438:	mov	x0, x11
 43c:	bl	0 <free>
 440:	b	40c <priority_tree_remove+0x4c>
 444:	ldp	x0, x2, [x8]
 448:	str	x0, [x2]
 44c:	str	x2, [x0, #8]
 450:	ldr	x0, [x1, #8]
 454:	brk	#0x3e8

0000000000000458 <prio_splay_tree_foreach>:
 458:	ldr	x0, [x0]
 45c:	b	70 <splay_tree_foreach_internal>

affinity-fmt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_display_repeat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	cmp	x1, #0x0
   8:	mov	x5, x1
   c:	mov	x29, sp
  10:	str	x21, [sp, #32]
  14:	ldr	x21, [x2]
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x19, x4
  20:	mov	x20, x2
  24:	ccmp	x21, x1, #0x2, ne  // ne = any
  28:	mov	x4, x21
  2c:	b.cc	50 <gomp_display_repeat+0x50>  // b.lo, b.ul, b.last
  30:	add	x4, x19, x4
  34:	str	x4, [x20]
  38:	cmp	x4, x21
  3c:	b.cc	7c <gomp_display_repeat+0x7c>  // b.lo, b.ul, b.last
  40:	ldp	x19, x20, [sp, #16]
  44:	ldr	x21, [sp, #32]
  48:	ldp	x29, x30, [sp], #48
  4c:	ret
  50:	sub	x5, x5, x21
  54:	and	w1, w3, #0xff
  58:	cmp	x5, x19
  5c:	add	x0, x0, x21
  60:	csel	x2, x5, x19, ls  // ls = plast
  64:	bl	0 <memset>
  68:	ldr	x4, [x20]
  6c:	add	x4, x19, x4
  70:	str	x4, [x20]
  74:	cmp	x4, x21
  78:	b.cs	40 <gomp_display_repeat+0x40>  // b.hs, b.nlast
  7c:	adrp	x0, 0 <gomp_display_repeat>
  80:	add	x0, x0, #0x0
  84:	bl	0 <gomp_fatal>

0000000000000088 <gomp_print_string>:
  88:	adrp	x3, 0 <stderr>
  8c:	mov	x2, x1
  90:	mov	x1, #0x1                   	// #1
  94:	ldr	x3, [x3]
  98:	b	0 <fwrite>
  9c:	nop

00000000000000a0 <gomp_set_affinity_format>:
  a0:	stp	x29, x30, [sp, #-64]!
  a4:	mov	x29, sp
  a8:	stp	x21, x22, [sp, #32]
  ac:	adrp	x21, 0 <gomp_affinity_format_len>
  b0:	stp	x19, x20, [sp, #16]
  b4:	mov	x19, x1
  b8:	mov	x20, x0
  bc:	ldr	x1, [x21]
  c0:	cmp	x1, x19
  c4:	b.hi	130 <gomp_set_affinity_format+0x90>  // b.pmore
  c8:	str	x23, [sp, #48]
  cc:	add	x22, x19, #0x1
  d0:	cbnz	x1, 118 <gomp_set_affinity_format+0x78>
  d4:	mov	x0, x22
  d8:	bl	0 <gomp_malloc>
  dc:	mov	x3, x0
  e0:	adrp	x23, 0 <gomp_affinity_format_var>
  e4:	mov	x1, x20
  e8:	mov	x2, x19
  ec:	mov	x0, x3
  f0:	bl	0 <memcpy>
  f4:	mov	x3, x0
  f8:	str	x0, [x23]
  fc:	str	x22, [x21]
 100:	ldr	x23, [sp, #48]
 104:	strb	wzr, [x3, x19]
 108:	ldp	x19, x20, [sp, #16]
 10c:	ldp	x21, x22, [sp, #32]
 110:	ldp	x29, x30, [sp], #64
 114:	ret
 118:	adrp	x23, 0 <gomp_affinity_format_var>
 11c:	mov	x1, x22
 120:	ldr	x0, [x23]
 124:	bl	0 <gomp_realloc>
 128:	mov	x3, x0
 12c:	b	e4 <gomp_set_affinity_format+0x44>
 130:	adrp	x21, 0 <gomp_affinity_format_var>
 134:	mov	x1, x0
 138:	mov	x2, x19
 13c:	ldr	x0, [x21]
 140:	bl	0 <memcpy>
 144:	ldr	x3, [x21]
 148:	strb	wzr, [x3, x19]
 14c:	ldp	x19, x20, [sp, #16]
 150:	ldp	x21, x22, [sp, #32]
 154:	ldp	x29, x30, [sp], #64
 158:	ret
 15c:	nop

0000000000000160 <omp_set_affinity_format>:
 160:	stp	x29, x30, [sp, #-32]!
 164:	mov	x29, sp
 168:	str	x19, [sp, #16]
 16c:	mov	x19, x0
 170:	bl	0 <strlen>
 174:	mov	x1, x0
 178:	mov	x0, x19
 17c:	ldr	x19, [sp, #16]
 180:	ldp	x29, x30, [sp], #32
 184:	b	a0 <gomp_set_affinity_format>

0000000000000188 <omp_get_affinity_format>:
 188:	stp	x29, x30, [sp, #-48]!
 18c:	adrp	x2, 0 <gomp_affinity_format_var>
 190:	mov	x29, sp
 194:	stp	x21, x22, [sp, #32]
 198:	mov	x21, x0
 19c:	ldr	x22, [x2]
 1a0:	stp	x19, x20, [sp, #16]
 1a4:	mov	x19, x1
 1a8:	mov	x0, x22
 1ac:	bl	0 <strlen>
 1b0:	mov	x20, x0
 1b4:	cbz	x19, 1d0 <omp_get_affinity_format+0x48>
 1b8:	cmp	x0, x19
 1bc:	b.cs	1e4 <omp_get_affinity_format+0x5c>  // b.hs, b.nlast
 1c0:	mov	x1, x22
 1c4:	mov	x0, x21
 1c8:	add	x2, x20, #0x1
 1cc:	bl	0 <memcpy>
 1d0:	mov	x0, x20
 1d4:	ldp	x19, x20, [sp, #16]
 1d8:	ldp	x21, x22, [sp, #32]
 1dc:	ldp	x29, x30, [sp], #48
 1e0:	ret
 1e4:	sub	x19, x19, #0x1
 1e8:	mov	x1, x22
 1ec:	mov	x2, x19
 1f0:	mov	x0, x21
 1f4:	bl	0 <memcpy>
 1f8:	strb	wzr, [x21, x19]
 1fc:	mov	x0, x20
 200:	ldp	x19, x20, [sp, #16]
 204:	ldp	x21, x22, [sp, #32]
 208:	ldp	x29, x30, [sp], #48
 20c:	ret

0000000000000210 <gomp_display_string>:
 210:	stp	x29, x30, [sp, #-48]!
 214:	cmp	x1, #0x0
 218:	mov	x29, sp
 21c:	str	x21, [sp, #32]
 220:	ldr	x21, [x2]
 224:	stp	x19, x20, [sp, #16]
 228:	mov	x19, x4
 22c:	mov	x20, x2
 230:	ccmp	x21, x1, #0x2, ne  // ne = any
 234:	mov	x4, x21
 238:	b.cc	25c <gomp_display_string+0x4c>  // b.lo, b.ul, b.last
 23c:	add	x4, x19, x4
 240:	str	x4, [x20]
 244:	cmp	x4, x21
 248:	b.cc	288 <gomp_display_string+0x78>  // b.lo, b.ul, b.last
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldr	x21, [sp, #32]
 254:	ldp	x29, x30, [sp], #48
 258:	ret
 25c:	sub	x5, x1, x21
 260:	add	x0, x0, x21
 264:	cmp	x5, x19
 268:	mov	x1, x3
 26c:	csel	x2, x5, x19, ls  // ls = plast
 270:	bl	0 <memcpy>
 274:	ldr	x4, [x20]
 278:	add	x4, x19, x4
 27c:	str	x4, [x20]
 280:	cmp	x4, x21
 284:	b.cs	24c <gomp_display_string+0x3c>  // b.hs, b.nlast
 288:	adrp	x0, 0 <gomp_display_repeat>
 28c:	add	x0, x0, #0x0
 290:	bl	0 <gomp_fatal>
 294:	nop

0000000000000298 <gomp_display_string_len>:
 298:	stp	x29, x30, [sp, #-64]!
 29c:	cmp	x4, x6
 2a0:	ccmn	x4, #0x1, #0x4, hi  // hi = pmore
 2a4:	mov	x29, sp
 2a8:	stp	x19, x20, [sp, #16]
 2ac:	mov	x20, x6
 2b0:	stp	x21, x22, [sp, #32]
 2b4:	mov	x21, x5
 2b8:	b.eq	340 <gomp_display_string_len+0xa8>  // b.none
 2bc:	stp	x23, x24, [sp, #48]
 2c0:	and	w3, w3, #0xff
 2c4:	mov	x22, x0
 2c8:	mov	x23, x1
 2cc:	mov	x24, x2
 2d0:	sub	x19, x4, x6
 2d4:	cbz	w3, 30c <gomp_display_string_len+0x74>
 2d8:	mov	x4, x19
 2dc:	mov	w3, #0x20                  	// #32
 2e0:	bl	0 <gomp_display_repeat>
 2e4:	mov	x4, x20
 2e8:	mov	x3, x21
 2ec:	mov	x2, x24
 2f0:	mov	x1, x23
 2f4:	mov	x0, x22
 2f8:	ldp	x19, x20, [sp, #16]
 2fc:	ldp	x21, x22, [sp, #32]
 300:	ldp	x23, x24, [sp, #48]
 304:	ldp	x29, x30, [sp], #64
 308:	b	210 <gomp_display_string>
 30c:	mov	x4, x6
 310:	mov	x3, x5
 314:	bl	210 <gomp_display_string>
 318:	mov	x4, x19
 31c:	mov	x2, x24
 320:	mov	x1, x23
 324:	mov	x0, x22
 328:	ldp	x19, x20, [sp, #16]
 32c:	mov	w3, #0x20                  	// #32
 330:	ldp	x21, x22, [sp, #32]
 334:	ldp	x23, x24, [sp, #48]
 338:	ldp	x29, x30, [sp], #64
 33c:	b	0 <gomp_display_repeat>
 340:	ldp	x19, x20, [sp, #16]
 344:	mov	x4, x6
 348:	ldp	x21, x22, [sp, #32]
 34c:	mov	x3, x5
 350:	ldp	x29, x30, [sp], #64
 354:	b	210 <gomp_display_string>

0000000000000358 <gomp_display_num>:
 358:	stp	x29, x30, [sp, #-80]!
 35c:	mov	x29, sp
 360:	stp	x19, x20, [sp, #16]
 364:	mov	x19, x5
 368:	mov	x20, x6
 36c:	stp	x21, x22, [sp, #32]
 370:	mov	x22, x0
 374:	mov	x0, x6
 378:	stp	x23, x24, [sp, #48]
 37c:	mov	x23, x1
 380:	mov	x24, x2
 384:	stp	x25, x26, [sp, #64]
 388:	and	w25, w3, #0xff
 38c:	and	w26, w4, #0xff
 390:	bl	0 <strlen>
 394:	cmp	x0, x19
 398:	mov	x21, x0
 39c:	ccmn	x19, #0x1, #0x4, cc  // cc = lo, ul, last
 3a0:	b.eq	400 <gomp_display_num+0xa8>  // b.none
 3a4:	sub	x19, x19, x0
 3a8:	cbz	w25, 42c <gomp_display_num+0xd4>
 3ac:	ldrb	w0, [x20]
 3b0:	mov	x4, #0x1                   	// #1
 3b4:	cmp	w0, #0x2d
 3b8:	b.eq	4a0 <gomp_display_num+0x148>  // b.none
 3bc:	cmp	w0, #0x30
 3c0:	b.eq	490 <gomp_display_num+0x138>  // b.none
 3c4:	mov	x0, x22
 3c8:	mov	x4, x19
 3cc:	mov	x2, x24
 3d0:	mov	x1, x23
 3d4:	mov	w3, #0x30                  	// #48
 3d8:	bl	0 <gomp_display_repeat>
 3dc:	ldrb	w0, [x20]
 3e0:	cmp	w0, #0x2d
 3e4:	b.eq	4b8 <gomp_display_num+0x160>  // b.none
 3e8:	cmp	w0, #0x30
 3ec:	b.ne	400 <gomp_display_num+0xa8>  // b.any
 3f0:	ldrb	w0, [x20, #1]
 3f4:	cmp	w0, #0x78
 3f8:	b.eq	4c4 <gomp_display_num+0x16c>  // b.none
 3fc:	nop
 400:	mov	x4, x21
 404:	mov	x3, x20
 408:	mov	x2, x24
 40c:	mov	x1, x23
 410:	mov	x0, x22
 414:	ldp	x19, x20, [sp, #16]
 418:	ldp	x21, x22, [sp, #32]
 41c:	ldp	x23, x24, [sp, #48]
 420:	ldp	x25, x26, [sp, #64]
 424:	ldp	x29, x30, [sp], #80
 428:	b	210 <gomp_display_string>
 42c:	cbz	w26, 44c <gomp_display_num+0xf4>
 430:	mov	x4, x19
 434:	mov	x2, x24
 438:	mov	x1, x23
 43c:	mov	x0, x22
 440:	mov	w3, #0x20                  	// #32
 444:	bl	0 <gomp_display_repeat>
 448:	b	400 <gomp_display_num+0xa8>
 44c:	mov	x4, x0
 450:	mov	x3, x20
 454:	mov	x2, x24
 458:	mov	x1, x23
 45c:	mov	x0, x22
 460:	bl	210 <gomp_display_string>
 464:	mov	x4, x19
 468:	mov	x2, x24
 46c:	mov	x1, x23
 470:	mov	x0, x22
 474:	ldp	x19, x20, [sp, #16]
 478:	mov	w3, #0x20                  	// #32
 47c:	ldp	x21, x22, [sp, #32]
 480:	ldp	x23, x24, [sp, #48]
 484:	ldp	x25, x26, [sp, #64]
 488:	ldp	x29, x30, [sp], #80
 48c:	b	0 <gomp_display_repeat>
 490:	ldrb	w0, [x20, #1]
 494:	cmp	w0, #0x78
 498:	b.ne	3c4 <gomp_display_num+0x6c>  // b.any
 49c:	mov	x4, #0x2                   	// #2
 4a0:	mov	x3, x20
 4a4:	mov	x2, x24
 4a8:	mov	x1, x23
 4ac:	mov	x0, x22
 4b0:	bl	210 <gomp_display_string>
 4b4:	b	3c4 <gomp_display_num+0x6c>
 4b8:	sub	x4, x21, #0x1
 4bc:	add	x3, x20, #0x1
 4c0:	b	408 <gomp_display_num+0xb0>
 4c4:	sub	x4, x21, #0x2
 4c8:	add	x3, x20, #0x2
 4cc:	b	408 <gomp_display_num+0xb0>

00000000000004d0 <gomp_display_affinity>:
 4d0:	stp	x29, x30, [sp, #-416]!
 4d4:	mov	x29, sp
 4d8:	stp	x19, x20, [sp, #16]
 4dc:	add	x20, sp, #0xa0
 4e0:	stp	x21, x22, [sp, #32]
 4e4:	mov	x22, x1
 4e8:	mov	x21, x2
 4ec:	stp	x23, x24, [sp, #48]
 4f0:	mov	x23, x0
 4f4:	sub	w0, w5, #0x1
 4f8:	stp	x25, x26, [sp, #64]
 4fc:	stp	x27, x28, [sp, #80]
 500:	adrp	x28, 0 <gomp_display_repeat>
 504:	str	x4, [sp, #112]
 508:	str	w0, [sp, #132]
 50c:	add	x0, x28, #0x0
 510:	str	x0, [sp, #104]
 514:	str	x3, [sp, #136]
 518:	str	xzr, [sp, #152]
 51c:	nop
 520:	mov	x0, x21
 524:	mov	w1, #0x25                  	// #37
 528:	bl	0 <strchr>
 52c:	mov	x19, x0
 530:	cbz	x0, 61c <gomp_display_affinity+0x14c>
 534:	nop
 538:	cmp	x21, x19
 53c:	b.eq	558 <gomp_display_affinity+0x88>  // b.none
 540:	sub	x4, x19, x21
 544:	mov	x3, x21
 548:	add	x2, sp, #0x98
 54c:	mov	x1, x22
 550:	mov	x0, x23
 554:	bl	210 <gomp_display_string>
 558:	ldrb	w0, [x19]
 55c:	cbz	w0, 98c <gomp_display_affinity+0x4bc>
 560:	ldrb	w1, [x19, #1]
 564:	cmp	w1, #0x25
 568:	b.eq	8cc <gomp_display_affinity+0x3fc>  // b.none
 56c:	cmp	w1, #0x30
 570:	b.eq	7c4 <gomp_display_affinity+0x2f4>  // b.none
 574:	add	x19, x19, #0x1
 578:	cmp	w1, #0x2e
 57c:	b.eq	890 <gomp_display_affinity+0x3c0>  // b.none
 580:	sub	w0, w1, #0x31
 584:	and	w0, w0, #0xff
 588:	cmp	w0, #0x8
 58c:	b.ls	a04 <gomp_display_affinity+0x534>  // b.plast
 590:	str	wzr, [sp, #128]
 594:	cmp	w1, #0x7b
 598:	mov	w24, #0x0                   	// #0
 59c:	mov	x21, #0xffffffffffffffff    	// #-1
 5a0:	b.eq	818 <gomp_display_affinity+0x348>  // b.none
 5a4:	cmp	w1, #0x54
 5a8:	b.eq	8c0 <gomp_display_affinity+0x3f0>  // b.none
 5ac:	b.hi	754 <gomp_display_affinity+0x284>  // b.pmore
 5b0:	cmp	w1, #0x4c
 5b4:	b.eq	8fc <gomp_display_affinity+0x42c>  // b.none
 5b8:	b.ls	640 <gomp_display_affinity+0x170>  // b.plast
 5bc:	cmp	w1, #0x4e
 5c0:	b.ne	62c <gomp_display_affinity+0x15c>  // b.any
 5c4:	ldr	x0, [sp, #112]
 5c8:	mov	w2, #0x1                   	// #1
 5cc:	ldr	x0, [x0]
 5d0:	cbz	x0, 5d8 <gomp_display_affinity+0x108>
 5d4:	ldr	w2, [x0]
 5d8:	ldr	x1, [sp, #104]
 5dc:	mov	x0, x20
 5e0:	bl	0 <sprintf>
 5e4:	ldrb	w4, [sp, #128]
 5e8:	mov	x6, x20
 5ec:	mov	x5, x21
 5f0:	mov	w3, w24
 5f4:	add	x2, sp, #0x98
 5f8:	mov	x1, x22
 5fc:	mov	x0, x23
 600:	bl	358 <gomp_display_num>
 604:	add	x21, x19, #0x1
 608:	mov	x0, x21
 60c:	mov	w1, #0x25                  	// #37
 610:	bl	0 <strchr>
 614:	mov	x19, x0
 618:	cbnz	x0, 538 <gomp_display_affinity+0x68>
 61c:	mov	x0, x21
 620:	bl	0 <strlen>
 624:	add	x19, x21, x0
 628:	b	538 <gomp_display_affinity+0x68>
 62c:	cmp	w1, #0x50
 630:	b.ne	9d8 <gomp_display_affinity+0x508>  // b.any
 634:	bl	0 <getpid>
 638:	mov	w2, w0
 63c:	b	5d8 <gomp_display_affinity+0x108>
 640:	cmp	w1, #0x41
 644:	b.ne	694 <gomp_display_affinity+0x1c4>  // b.any
 648:	cmn	x21, #0x1
 64c:	b.eq	678 <gomp_display_affinity+0x1a8>  // b.none
 650:	ldp	w0, w3, [sp, #128]
 654:	cbz	w0, 944 <gomp_display_affinity+0x474>
 658:	mov	x2, x20
 65c:	mov	x1, #0x0                   	// #0
 660:	mov	x0, #0x0                   	// #0
 664:	str	xzr, [sp, #160]
 668:	bl	0 <gomp_display_affinity_place>
 66c:	ldr	x4, [sp, #160]
 670:	cmp	x4, x21
 674:	b.cc	9ac <gomp_display_affinity+0x4dc>  // b.lo, b.ul, b.last
 678:	ldr	w3, [sp, #132]
 67c:	add	x2, sp, #0x98
 680:	mov	x1, x22
 684:	mov	x0, x23
 688:	add	x21, x19, #0x1
 68c:	bl	0 <gomp_display_affinity_place>
 690:	b	608 <gomp_display_affinity+0x138>
 694:	cmp	w1, #0x48
 698:	b.ne	9d8 <gomp_display_affinity+0x508>  // b.any
 69c:	mov	x24, x20
 6a0:	mov	x26, #0x100                 	// #256
 6a4:	sub	x27, x26, #0x1
 6a8:	mov	x0, x24
 6ac:	mov	x1, x27
 6b0:	strb	wzr, [x24, x27]
 6b4:	bl	0 <gethostname>
 6b8:	cbnz	w0, 6d0 <gomp_display_affinity+0x200>
 6bc:	mov	x0, x24
 6c0:	bl	0 <strlen>
 6c4:	cmp	x27, x0
 6c8:	b.hi	71c <gomp_display_affinity+0x24c>  // b.pmore
 6cc:	nop
 6d0:	cmp	x26, #0x100, lsl #12
 6d4:	b.eq	908 <gomp_display_affinity+0x438>  // b.none
 6d8:	lsl	x26, x26, #1
 6dc:	cmp	x26, #0x200
 6e0:	b.eq	7b4 <gomp_display_affinity+0x2e4>  // b.none
 6e4:	mov	x0, x24
 6e8:	mov	x1, x26
 6ec:	sub	x27, x26, #0x1
 6f0:	bl	0 <gomp_realloc>
 6f4:	mov	x24, x0
 6f8:	mov	x1, x27
 6fc:	mov	x0, x24
 700:	strb	wzr, [x24, x27]
 704:	bl	0 <gethostname>
 708:	cbnz	w0, 6d0 <gomp_display_affinity+0x200>
 70c:	mov	x0, x24
 710:	bl	0 <strlen>
 714:	cmp	x27, x0
 718:	b.ls	6d0 <gomp_display_affinity+0x200>  // b.plast
 71c:	ldrb	w3, [sp, #128]
 720:	mov	x6, x0
 724:	mov	x4, x21
 728:	mov	x5, x24
 72c:	add	x2, sp, #0x98
 730:	mov	x1, x22
 734:	mov	x0, x23
 738:	bl	298 <gomp_display_string_len>
 73c:	cmp	x24, x20
 740:	b.eq	604 <gomp_display_affinity+0x134>  // b.none
 744:	mov	x0, x24
 748:	add	x21, x19, #0x1
 74c:	bl	0 <free>
 750:	b	608 <gomp_display_affinity+0x138>
 754:	cmp	w1, #0x6e
 758:	b.eq	8f0 <gomp_display_affinity+0x420>  // b.none
 75c:	b.ls	774 <gomp_display_affinity+0x2a4>  // b.plast
 760:	cmp	w1, #0x74
 764:	b.ne	9d8 <gomp_display_affinity+0x508>  // b.any
 768:	bl	0 <omp_get_team_num>
 76c:	mov	w2, w0
 770:	b	5d8 <gomp_display_affinity+0x108>
 774:	cmp	w1, #0x61
 778:	b.ne	794 <gomp_display_affinity+0x2c4>  // b.any
 77c:	ldr	x0, [sp, #112]
 780:	mov	w2, #0xffffffff            	// #-1
 784:	ldr	x0, [x0]
 788:	cbz	x0, 5d8 <gomp_display_affinity+0x108>
 78c:	ldr	w2, [x0, #32]
 790:	b	5d8 <gomp_display_affinity+0x108>
 794:	cmp	w1, #0x69
 798:	b.ne	9d8 <gomp_display_affinity+0x508>  // b.any
 79c:	ldr	x2, [sp, #136]
 7a0:	mov	x0, x20
 7a4:	adrp	x1, 0 <gomp_display_repeat>
 7a8:	add	x1, x1, #0x0
 7ac:	bl	0 <sprintf>
 7b0:	b	5e4 <gomp_display_affinity+0x114>
 7b4:	mov	x0, x26
 7b8:	bl	0 <gomp_malloc>
 7bc:	mov	x24, x0
 7c0:	b	6a4 <gomp_display_affinity+0x1d4>
 7c4:	ldrb	w0, [x19, #2]
 7c8:	add	x19, x19, #0x2
 7cc:	cmp	w0, #0x2e
 7d0:	b.ne	9f0 <gomp_display_affinity+0x520>  // b.any
 7d4:	mov	w24, #0x1                   	// #1
 7d8:	ldrb	w1, [x19, #1]
 7dc:	add	x0, x19, #0x1
 7e0:	sub	w1, w1, #0x31
 7e4:	and	w1, w1, #0xff
 7e8:	cmp	w1, #0x8
 7ec:	b.hi	9e4 <gomp_display_affinity+0x514>  // b.pmore
 7f0:	mov	w1, #0x1                   	// #1
 7f4:	str	w1, [sp, #128]
 7f8:	mov	x1, x20
 7fc:	mov	w2, #0xa                   	// #10
 800:	bl	0 <strtoul>
 804:	mov	x21, x0
 808:	ldr	x19, [sp, #160]
 80c:	ldrb	w1, [x19]
 810:	cmp	w1, #0x7b
 814:	b.ne	5a4 <gomp_display_affinity+0xd4>  // b.any
 818:	adrp	x27, 0 <gomp_display_repeat>
 81c:	add	x0, x27, #0x0
 820:	mov	x28, x0
 824:	add	x26, x19, #0x1
 828:	mov	w27, #0x0                   	// #0
 82c:	str	x0, [sp, #120]
 830:	ldrb	w25, [x28, #18]
 834:	mov	x1, x28
 838:	mov	x0, x26
 83c:	mov	x2, x25
 840:	bl	0 <strncmp>
 844:	cbnz	w0, 85c <gomp_display_affinity+0x38c>
 848:	add	x2, x25, #0x1
 84c:	add	x4, x19, x2
 850:	ldrb	w0, [x19, x2]
 854:	cmp	w0, #0x7d
 858:	b.eq	898 <gomp_display_affinity+0x3c8>  // b.none
 85c:	add	w27, w27, #0x1
 860:	add	x28, x28, #0x14
 864:	cmp	w27, #0xa
 868:	b.ne	830 <gomp_display_affinity+0x360>  // b.any
 86c:	mov	x0, x26
 870:	mov	w1, #0x7d                  	// #125
 874:	bl	0 <strchr>
 878:	cbz	x0, 9c8 <gomp_display_affinity+0x4f8>
 87c:	sub	w1, w0, w26
 880:	mov	x2, x26
 884:	adrp	x0, 0 <gomp_display_repeat>
 888:	add	x0, x0, #0x0
 88c:	bl	0 <gomp_fatal>
 890:	mov	w24, #0x0                   	// #0
 894:	b	7d8 <gomp_display_affinity+0x308>
 898:	sbfiz	x0, x27, #2, #32
 89c:	add	x3, x0, w27, sxtw
 8a0:	ldr	x0, [sp, #120]
 8a4:	add	x27, x0, x3, lsl #2
 8a8:	ldrb	w1, [x27, #19]
 8ac:	cmp	w1, #0x7b
 8b0:	b.eq	9fc <gomp_display_affinity+0x52c>  // b.none
 8b4:	mov	x19, x4
 8b8:	cmp	w1, #0x54
 8bc:	b.ne	5ac <gomp_display_affinity+0xdc>  // b.any
 8c0:	bl	0 <omp_get_num_teams>
 8c4:	mov	w2, w0
 8c8:	b	5d8 <gomp_display_affinity+0x108>
 8cc:	add	x21, x19, #0x2
 8d0:	add	x2, sp, #0x98
 8d4:	mov	x1, x22
 8d8:	mov	x0, x23
 8dc:	adrp	x3, 0 <gomp_display_repeat>
 8e0:	mov	x4, #0x1                   	// #1
 8e4:	add	x3, x3, #0x0
 8e8:	bl	210 <gomp_display_string>
 8ec:	b	520 <gomp_display_affinity+0x50>
 8f0:	ldr	x0, [sp, #112]
 8f4:	ldr	w2, [x0, #24]
 8f8:	b	5d8 <gomp_display_affinity+0x108>
 8fc:	ldr	x0, [sp, #112]
 900:	ldr	w2, [x0, #28]
 904:	b	5d8 <gomp_display_affinity+0x108>
 908:	cmp	x24, x20
 90c:	b.eq	918 <gomp_display_affinity+0x448>  // b.none
 910:	mov	x0, x24
 914:	bl	0 <free>
 918:	ldrb	w3, [sp, #128]
 91c:	mov	x4, x21
 920:	add	x2, sp, #0x98
 924:	mov	x1, x22
 928:	mov	x0, x23
 92c:	adrp	x5, 0 <gomp_display_repeat>
 930:	mov	x6, #0x4                   	// #4
 934:	add	x5, x5, #0x0
 938:	add	x21, x19, #0x1
 93c:	bl	298 <gomp_display_string_len>
 940:	b	608 <gomp_display_affinity+0x138>
 944:	mov	x0, x23
 948:	add	x2, sp, #0x98
 94c:	mov	x1, x22
 950:	ldr	x24, [sp, #152]
 954:	bl	0 <gomp_display_affinity_place>
 958:	ldr	x4, [sp, #152]
 95c:	sub	x0, x4, x24
 960:	cmp	x0, x21
 964:	b.cs	604 <gomp_display_affinity+0x134>  // b.hs, b.nlast
 968:	sub	x4, x24, x4
 96c:	add	x2, sp, #0x98
 970:	add	x4, x4, x21
 974:	mov	x1, x22
 978:	mov	x0, x23
 97c:	mov	w3, #0x20                  	// #32
 980:	add	x21, x19, #0x1
 984:	bl	0 <gomp_display_repeat>
 988:	b	608 <gomp_display_affinity+0x138>
 98c:	ldp	x19, x20, [sp, #16]
 990:	ldp	x21, x22, [sp, #32]
 994:	ldp	x23, x24, [sp, #48]
 998:	ldp	x25, x26, [sp, #64]
 99c:	ldp	x27, x28, [sp, #80]
 9a0:	ldr	x0, [sp, #152]
 9a4:	ldp	x29, x30, [sp], #416
 9a8:	ret
 9ac:	sub	x4, x21, x4
 9b0:	add	x2, sp, #0x98
 9b4:	mov	x1, x22
 9b8:	mov	x0, x23
 9bc:	mov	w3, #0x20                  	// #32
 9c0:	bl	0 <gomp_display_repeat>
 9c4:	b	678 <gomp_display_affinity+0x1a8>
 9c8:	adrp	x0, 0 <gomp_display_repeat>
 9cc:	mov	x1, x26
 9d0:	add	x0, x0, #0x0
 9d4:	bl	0 <gomp_fatal>
 9d8:	adrp	x0, 0 <gomp_display_repeat>
 9dc:	add	x0, x0, #0x0
 9e0:	bl	0 <gomp_fatal>
 9e4:	adrp	x0, 0 <gomp_display_repeat>
 9e8:	add	x0, x0, #0x0
 9ec:	bl	0 <gomp_fatal>
 9f0:	adrp	x0, 0 <gomp_display_repeat>
 9f4:	add	x0, x0, #0x0
 9f8:	bl	0 <gomp_fatal>
 9fc:	add	x26, x4, #0x1
 a00:	b	86c <gomp_display_affinity+0x39c>
 a04:	mov	x0, x19
 a08:	mov	w24, #0x0                   	// #0
 a0c:	str	wzr, [sp, #128]
 a10:	b	7f8 <gomp_display_affinity+0x328>
 a14:	nop

0000000000000a18 <gomp_ialias_omp_capture_affinity>:
 a18:	stp	x29, x30, [sp, #-48]!
 a1c:	mov	x29, sp
 a20:	stp	x19, x20, [sp, #16]
 a24:	mov	x20, x1
 a28:	str	x21, [sp, #32]
 a2c:	mov	x21, x0
 a30:	cbz	x2, a94 <gomp_ialias_omp_capture_affinity+0x7c>
 a34:	ldrb	w0, [x2]
 a38:	mov	x19, x2
 a3c:	cbz	w0, a94 <gomp_ialias_omp_capture_affinity+0x7c>
 a40:	bl	0 <pthread_self>
 a44:	mov	x3, x0
 a48:	adrp	x5, 0 <gomp_tls_data>
 a4c:	ldr	x5, [x5]
 a50:	mrs	x4, tpidr_el0
 a54:	mov	x2, x19
 a58:	mov	x1, x20
 a5c:	add	x5, x4, x5
 a60:	mov	x0, x21
 a64:	add	x4, x5, #0x10
 a68:	ldr	w5, [x5, #92]
 a6c:	bl	4d0 <gomp_display_affinity>
 a70:	cbz	x20, a84 <gomp_ialias_omp_capture_affinity+0x6c>
 a74:	cmp	x20, x0
 a78:	b.hi	aa0 <gomp_ialias_omp_capture_affinity+0x88>  // b.pmore
 a7c:	add	x20, x21, x20
 a80:	sturb	wzr, [x20, #-1]
 a84:	ldp	x19, x20, [sp, #16]
 a88:	ldr	x21, [sp, #32]
 a8c:	ldp	x29, x30, [sp], #48
 a90:	ret
 a94:	adrp	x0, 0 <gomp_affinity_format_var>
 a98:	ldr	x19, [x0]
 a9c:	b	a40 <gomp_ialias_omp_capture_affinity+0x28>
 aa0:	strb	wzr, [x21, x0]
 aa4:	ldp	x19, x20, [sp, #16]
 aa8:	ldr	x21, [sp, #32]
 aac:	ldp	x29, x30, [sp], #48
 ab0:	ret
 ab4:	nop

0000000000000ab8 <omp_display_affinity>:
 ab8:	sub	sp, sp, #0x230
 abc:	mov	x1, #0x200                 	// #512
 ac0:	stp	x29, x30, [sp]
 ac4:	mov	x29, sp
 ac8:	stp	x19, x20, [sp, #16]
 acc:	mov	x20, x0
 ad0:	mov	x2, x20
 ad4:	add	x0, sp, #0x30
 ad8:	bl	a18 <gomp_ialias_omp_capture_affinity>
 adc:	mov	x19, x0
 ae0:	cmp	x0, #0x1ff
 ae4:	b.ls	b40 <omp_display_affinity+0x88>  // b.plast
 ae8:	str	x21, [sp, #32]
 aec:	add	x21, x0, #0x1
 af0:	mov	x0, x21
 af4:	bl	0 <gomp_malloc>
 af8:	mov	x2, x20
 afc:	mov	x1, x21
 b00:	mov	x20, x0
 b04:	bl	a18 <gomp_ialias_omp_capture_affinity>
 b08:	adrp	x0, 0 <stderr>
 b0c:	mov	w4, #0xa                   	// #10
 b10:	mov	x2, x21
 b14:	mov	x1, #0x1                   	// #1
 b18:	ldr	x3, [x0]
 b1c:	strb	w4, [x20, x19]
 b20:	mov	x0, x20
 b24:	bl	0 <fwrite>
 b28:	mov	x0, x20
 b2c:	ldp	x29, x30, [sp]
 b30:	ldp	x19, x20, [sp, #16]
 b34:	ldr	x21, [sp, #32]
 b38:	add	sp, sp, #0x230
 b3c:	b	0 <free>
 b40:	adrp	x1, 0 <stderr>
 b44:	add	x2, x0, #0x1
 b48:	add	x0, sp, #0x30
 b4c:	mov	w4, #0xa                   	// #10
 b50:	ldr	x3, [x1]
 b54:	mov	x1, #0x1                   	// #1
 b58:	strb	w4, [x0, x19]
 b5c:	bl	0 <fwrite>
 b60:	ldp	x29, x30, [sp]
 b64:	ldp	x19, x20, [sp, #16]
 b68:	add	sp, sp, #0x230
 b6c:	ret

Disassembly of section .text.unlikely:

0000000000000000 <gomp_display_affinity_thread>:
   0:	sub	sp, sp, #0x250
   4:	mov	x4, x1
   8:	mov	x3, x0
   c:	stp	x29, x30, [sp]
  10:	mov	x29, sp
  14:	stp	x23, x24, [sp, #48]
  18:	adrp	x24, 0 <gomp_affinity_format_var>
  1c:	mov	w23, w2
  20:	ldr	x2, [x24]
  24:	stp	x25, x26, [sp, #64]
  28:	add	x25, sp, #0x50
  2c:	mov	w5, w23
  30:	adrp	x26, 0 <stderr>
  34:	stp	x19, x20, [sp, #16]
  38:	mov	x20, x0
  3c:	mov	x0, x25
  40:	stp	x21, x22, [sp, #32]
  44:	mov	x22, x1
  48:	mov	x1, #0x200                 	// #512
  4c:	bl	4d0 <gomp_display_affinity>
  50:	mov	x19, x0
  54:	cmp	x0, #0x1ff
  58:	add	x21, x0, #0x1
  5c:	b.hi	98 <gomp_display_affinity_thread+0x98>  // b.pmore
  60:	ldr	x3, [x26]
  64:	mov	w4, #0xa                   	// #10
  68:	mov	x2, x21
  6c:	mov	x0, x25
  70:	mov	x1, #0x1                   	// #1
  74:	strb	w4, [x25, x19]
  78:	bl	0 <fwrite>
  7c:	ldp	x29, x30, [sp]
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x21, x22, [sp, #32]
  88:	ldp	x23, x24, [sp, #48]
  8c:	ldp	x25, x26, [sp, #64]
  90:	add	sp, sp, #0x250
  94:	ret
  98:	mov	x0, x21
  9c:	bl	0 <gomp_malloc>
  a0:	ldr	x2, [x24]
  a4:	mov	w5, w23
  a8:	mov	x4, x22
  ac:	mov	x3, x20
  b0:	mov	x1, x21
  b4:	mov	x20, x0
  b8:	bl	4d0 <gomp_display_affinity>
  bc:	ldr	x3, [x26]
  c0:	mov	w4, #0xa                   	// #10
  c4:	strb	w4, [x20, x19]
  c8:	mov	x2, x21
  cc:	mov	x0, x20
  d0:	mov	x1, #0x1                   	// #1
  d4:	bl	0 <fwrite>
  d8:	mov	x0, x20
  dc:	ldp	x29, x30, [sp]
  e0:	ldp	x19, x20, [sp, #16]
  e4:	ldp	x21, x22, [sp, #32]
  e8:	ldp	x23, x24, [sp, #48]
  ec:	ldp	x25, x26, [sp, #64]
  f0:	add	sp, sp, #0x250
  f4:	b	0 <free>

teams.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_teams_reg>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w20, w2
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	mov	x22, x1
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	w23, w3
  24:	str	x25, [sp, #64]
  28:	mov	w25, #0x0                   	// #0
  2c:	cbz	w3, 5c <GOMP_teams_reg+0x5c>
  30:	adrp	x0, 0 <gomp_tls_data>
  34:	ldr	x0, [x0]
  38:	mrs	x1, tpidr_el0
  3c:	add	x0, x1, x0
  40:	ldr	x0, [x0, #80]
  44:	cbz	x0, e4 <GOMP_teams_reg+0xe4>
  48:	add	x0, x0, #0x90
  4c:	cmp	w23, #0x0
  50:	ldr	w25, [x0, #20]
  54:	csinv	w1, w23, wzr, ge  // ge = tcont
  58:	str	w1, [x0, #20]
  5c:	adrp	x0, 0 <GOMP_teams_reg>
  60:	adrp	x24, 0 <GOMP_teams_reg>
  64:	cmp	w20, #0x0
  68:	add	x19, x0, #0x0
  6c:	mov	w1, #0x3                   	// #3
  70:	str	wzr, [x0]
  74:	csel	w20, w20, w1, ne  // ne = any
  78:	str	w20, [x24]
  7c:	nop
  80:	mov	x0, x22
  84:	blr	x21
  88:	ldr	w4, [x19]
  8c:	add	w4, w4, #0x1
  90:	str	w4, [x19]
  94:	cmp	w4, w20
  98:	b.cc	80 <GOMP_teams_reg+0x80>  // b.lo, b.ul, b.last
  9c:	mov	w0, #0x1                   	// #1
  a0:	str	w0, [x24]
  a4:	str	wzr, [x19]
  a8:	cbz	w23, cc <GOMP_teams_reg+0xcc>
  ac:	adrp	x0, 0 <gomp_tls_data>
  b0:	ldr	x0, [x0]
  b4:	mrs	x1, tpidr_el0
  b8:	add	x0, x1, x0
  bc:	ldr	x0, [x0, #80]
  c0:	cbz	x0, ec <GOMP_teams_reg+0xec>
  c4:	add	x0, x0, #0x90
  c8:	str	w25, [x0, #20]
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x23, x24, [sp, #48]
  d8:	ldr	x25, [sp, #64]
  dc:	ldp	x29, x30, [sp], #80
  e0:	ret
  e4:	bl	0 <gomp_new_icv>
  e8:	b	4c <GOMP_teams_reg+0x4c>
  ec:	bl	0 <gomp_new_icv>
  f0:	str	w25, [x0, #20]
  f4:	b	cc <GOMP_teams_reg+0xcc>

00000000000000f8 <gomp_ialias_omp_get_num_teams>:
  f8:	adrp	x0, 0 <GOMP_teams_reg>
  fc:	ldr	w0, [x0]
 100:	ret
 104:	nop

0000000000000108 <gomp_ialias_omp_get_team_num>:
 108:	adrp	x0, 0 <GOMP_teams_reg>
 10c:	ldr	w0, [x0]
 110:	ret
