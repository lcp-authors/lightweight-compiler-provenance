In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libss.a_gcc_-O2:

ss_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <initialize_ss_error_table_r>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	ldr	x1, [x0]
   c:	str	x19, [sp, #16]
  10:	cbz	x1, 78 <initialize_ss_error_table_r+0x78>
  14:	adrp	x2, 0 <initialize_ss_error_table_r>
  18:	add	x2, x2, #0x0
  1c:	b	2c <initialize_ss_error_table_r+0x2c>
  20:	ldr	x0, [x1]
  24:	cbz	x0, 48 <initialize_ss_error_table_r+0x48>
  28:	mov	x1, x0
  2c:	ldr	x0, [x1, #8]
  30:	ldr	x0, [x0]
  34:	cmp	x0, x2
  38:	b.ne	20 <initialize_ss_error_table_r+0x20>  // b.any
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	mov	x19, x1
  4c:	mov	x0, #0x10                  	// #16
  50:	bl	0 <malloc>
  54:	cbz	x0, 80 <initialize_ss_error_table_r+0x80>
  58:	adrp	x1, 0 <initialize_ss_error_table_r>
  5c:	add	x1, x1, #0x0
  60:	add	x1, x1, #0x68
  64:	stp	xzr, x1, [x0]
  68:	str	x0, [x19]
  6c:	ldr	x19, [sp, #16]
  70:	ldp	x29, x30, [sp], #32
  74:	ret
  78:	mov	x19, x0
  7c:	b	4c <initialize_ss_error_table_r+0x4c>
  80:	adrp	x0, 0 <initialize_ss_error_table_r>
  84:	add	x0, x0, #0x0
  88:	ldr	x1, [x0, #8]
  8c:	cbnz	x1, 3c <initialize_ss_error_table_r+0x3c>
  90:	b	58 <initialize_ss_error_table_r+0x58>
  94:	nop

0000000000000098 <initialize_ss_error_table>:
  98:	adrp	x0, 0 <_et_list>
  9c:	add	x0, x0, #0x0
  a0:	b	0 <initialize_ss_error_table_r>

std_rqs.o:     file format elf64-littleaarch64


invocation.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_create_invocation>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x25, x26, [sp, #64]
   c:	adrp	x25, 0 <_ss_table>
  10:	mov	x26, x4
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x0
  1c:	mov	x0, #0x90                  	// #144
  20:	ldr	x22, [x25]
  24:	stp	x19, x20, [sp, #16]
  28:	stp	x23, x24, [sp, #48]
  2c:	mov	x24, x1
  30:	mov	x23, x2
  34:	stp	x27, x28, [sp, #80]
  38:	str	wzr, [x4]
  3c:	str	x3, [sp, #96]
  40:	bl	0 <malloc>
  44:	mov	x19, x0
  48:	cbz	x22, 148 <ss_create_invocation+0x148>
  4c:	bl	0 <initialize_ss_error_table>
  50:	ldr	x0, [x22, #8]
  54:	cbz	x0, 168 <ss_create_invocation+0x168>
  58:	sub	x1, x22, #0x8
  5c:	mov	x5, #0x2                   	// #2
  60:	mov	x20, x5
  64:	mov	w27, w5
  68:	lsl	x28, x5, #3
  6c:	add	x5, x5, #0x1
  70:	ldr	x6, [x1, x5, lsl #3]
  74:	cbnz	x6, 60 <ss_create_invocation+0x60>
  78:	add	w1, w20, #0x2
  7c:	lsl	x1, x1, #3
  80:	mov	x0, x22
  84:	bl	0 <realloc>
  88:	mov	x3, x0
  8c:	cbz	x0, 17c <ss_create_invocation+0x17c>
  90:	add	x20, x20, #0x1
  94:	mov	x0, #0x8                   	// #8
  98:	str	x3, [sp, #104]
  9c:	str	xzr, [x3, x20, lsl #3]
  a0:	str	x19, [x3, x28]
  a4:	stp	x21, x24, [x19]
  a8:	stp	xzr, xzr, [x19, #24]
  ac:	bl	0 <malloc>
  b0:	mov	x1, x0
  b4:	mov	x0, x21
  b8:	stp	x1, x23, [x19, #40]
  bc:	str	xzr, [x1]
  c0:	bl	0 <strlen>
  c4:	mov	x20, x0
  c8:	add	w0, w0, #0x4
  cc:	bl	0 <malloc>
  d0:	mov	x2, x20
  d4:	mov	x23, x0
  d8:	mov	x1, x21
  dc:	str	x0, [x19, #56]
  e0:	bl	0 <memcpy>
  e4:	str	xzr, [x19, #72]
  e8:	ldrb	w2, [x19, #80]
  ec:	mov	w4, #0x203a                	// #8250
  f0:	movk	w4, #0x20, lsl #16
  f4:	str	w4, [x23, x20]
  f8:	and	w2, w2, #0xfffffffc
  fc:	mov	x1, #0x8                   	// #8
 100:	mov	x0, #0x2                   	// #2
 104:	strb	w2, [x19, #80]
 108:	bl	0 <calloc>
 10c:	str	x0, [x19, #64]
 110:	ldp	x1, x3, [sp, #96]
 114:	str	x3, [x25]
 118:	stp	x1, xzr, [x0]
 11c:	stp	xzr, xzr, [x19, #88]
 120:	stp	xzr, xzr, [x19, #104]
 124:	stp	xzr, xzr, [x19, #120]
 128:	mov	w0, w27
 12c:	ldp	x19, x20, [sp, #16]
 130:	ldp	x21, x22, [sp, #32]
 134:	ldp	x23, x24, [sp, #48]
 138:	ldp	x25, x26, [sp, #64]
 13c:	ldp	x27, x28, [sp, #80]
 140:	ldp	x29, x30, [sp], #112
 144:	ret
 148:	mov	x0, #0x10                  	// #16
 14c:	bl	0 <malloc>
 150:	mov	x22, x0
 154:	stp	xzr, xzr, [x0]
 158:	bl	0 <initialize_ss_error_table>
 15c:	ldr	x0, [x22, #8]
 160:	cbnz	x0, 58 <ss_create_invocation+0x58>
 164:	nop
 168:	mov	x1, #0x18                  	// #24
 16c:	mov	w27, #0x1                   	// #1
 170:	mov	x28, #0x8                   	// #8
 174:	mov	x20, #0x1                   	// #1
 178:	b	80 <ss_create_invocation+0x80>
 17c:	mov	w0, #0xc                   	// #12
 180:	str	w0, [x26]
 184:	mov	w27, #0x0                   	// #0
 188:	mov	x0, x19
 18c:	bl	0 <free>
 190:	b	128 <ss_create_invocation+0x128>
 194:	nop

0000000000000198 <ss_delete_invocation>:
 198:	stp	x29, x30, [sp, #-48]!
 19c:	adrp	x1, 0 <_ss_table>
 1a0:	mov	x29, sp
 1a4:	stp	x19, x20, [sp, #16]
 1a8:	mov	w20, w0
 1ac:	ldr	x0, [x1]
 1b0:	ldr	x19, [x0, w20, sxtw #3]
 1b4:	ldr	x0, [x19, #56]
 1b8:	bl	0 <free>
 1bc:	ldr	x0, [x19, #64]
 1c0:	bl	0 <free>
 1c4:	ldr	x0, [x19, #40]
 1c8:	ldr	x1, [x0]
 1cc:	cbz	x1, 1e8 <ss_delete_invocation+0x50>
 1d0:	mov	w0, w20
 1d4:	add	x2, sp, #0x2c
 1d8:	bl	0 <ss_delete_info_dir>
 1dc:	ldr	x0, [x19, #40]
 1e0:	ldr	x1, [x0]
 1e4:	cbnz	x1, 1d0 <ss_delete_invocation+0x38>
 1e8:	bl	0 <free>
 1ec:	mov	x0, x19
 1f0:	bl	0 <free>
 1f4:	ldp	x19, x20, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #48
 1fc:	ret

help.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_help>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	adrp	x4, 0 <_ss_table>
   8:	cmp	w0, #0x1
   c:	mov	x29, sp
  10:	ldr	x5, [x4]
  14:	stp	x25, x26, [sp, #64]
  18:	mov	w26, w2
  1c:	stp	x23, x24, [sp, #48]
  20:	ldr	x24, [x5, w26, sxtw #3]
  24:	b.eq	1ec <ss_help+0x1ec>  // b.none
  28:	cmp	w0, #0x2
  2c:	b.ne	13c <ss_help+0x13c>  // b.any
  30:	ldr	x0, [x24, #40]
  34:	cbz	x0, 26c <ss_help+0x26c>
  38:	stp	x19, x20, [sp, #16]
  3c:	ldr	x19, [x0]
  40:	cbz	x19, 268 <ss_help+0x268>
  44:	mov	x23, x1
  48:	mov	w25, #0x2f                  	// #47
  4c:	stp	x21, x22, [sp, #32]
  50:	adrp	x22, 0 <ss_help>
  54:	mov	x21, #0x8                   	// #8
  58:	add	x22, x22, #0x0
  5c:	str	x27, [sp, #80]
  60:	b	74 <ss_help+0x74>
  64:	ldr	x0, [x24, #40]
  68:	ldr	x19, [x0, x21]
  6c:	add	x21, x21, #0x8
  70:	cbz	x19, 1fc <ss_help+0x1fc>
  74:	mov	x0, x19
  78:	bl	0 <strlen>
  7c:	ldr	x27, [x23, #8]
  80:	mov	x20, x0
  84:	mov	x0, x27
  88:	bl	0 <strlen>
  8c:	add	x0, x20, x0
  90:	add	x0, x0, #0x7
  94:	bl	0 <malloc>
  98:	mov	x1, x19
  9c:	mov	x2, x20
  a0:	mov	x19, x0
  a4:	cbz	x0, 28c <ss_help+0x28c>
  a8:	bl	0 <memcpy>
  ac:	strb	w25, [x19, x20]
  b0:	add	x0, x20, #0x1
  b4:	mov	x1, x27
  b8:	add	x0, x19, x0
  bc:	bl	0 <stpcpy>
  c0:	mov	x3, x0
  c4:	ldrh	w2, [x22, #4]
  c8:	ldr	w4, [x22]
  cc:	mov	w1, #0x0                   	// #0
  d0:	mov	x0, x19
  d4:	str	w4, [x3]
  d8:	strh	w2, [x3, #4]
  dc:	bl	0 <open>
  e0:	mov	w20, w0
  e4:	mov	x0, x19
  e8:	bl	0 <free>
  ec:	tbnz	w20, #31, 64 <ss_help+0x64>
  f0:	bl	0 <fork>
  f4:	mov	w19, w0
  f8:	cmn	w0, #0x1
  fc:	b.eq	1b0 <ss_help+0x1b0>  // b.none
 100:	cbz	w0, 19c <ss_help+0x19c>
 104:	mov	w0, w20
 108:	bl	0 <close>
 10c:	nop
 110:	mov	x0, #0x0                   	// #0
 114:	bl	0 <wait>
 118:	cmp	w0, w19
 11c:	b.ne	110 <ss_help+0x110>  // b.any
 120:	ldp	x19, x20, [sp, #16]
 124:	ldp	x21, x22, [sp, #32]
 128:	ldp	x23, x24, [sp, #48]
 12c:	ldp	x25, x26, [sp, #64]
 130:	ldr	x27, [sp, #80]
 134:	ldp	x29, x30, [sp], #96
 138:	ret
 13c:	stp	x19, x20, [sp, #16]
 140:	ldr	x20, [x24, #32]
 144:	mov	x0, x20
 148:	bl	0 <strlen>
 14c:	add	x0, x0, #0x28
 150:	lsl	x0, x0, #1
 154:	bl	0 <malloc>
 158:	mov	x19, x0
 15c:	cbz	x0, 2b8 <ss_help+0x2b8>
 160:	mov	x3, x20
 164:	mov	x2, x20
 168:	adrp	x1, 0 <ss_help>
 16c:	add	x1, x1, #0x0
 170:	bl	0 <sprintf>
 174:	mov	x2, x19
 178:	mov	w0, w26
 17c:	mov	x1, #0x0                   	// #0
 180:	bl	0 <ss_perror>
 184:	mov	x0, x19
 188:	ldp	x19, x20, [sp, #16]
 18c:	ldp	x23, x24, [sp, #48]
 190:	ldp	x25, x26, [sp, #64]
 194:	ldp	x29, x30, [sp], #96
 198:	b	0 <free>
 19c:	mov	w1, #0x0                   	// #0
 1a0:	mov	w0, w20
 1a4:	bl	0 <dup2>
 1a8:	bl	0 <ss_page_stdin>
 1ac:	b	104 <ss_help+0x104>
 1b0:	bl	0 <__errno_location>
 1b4:	mov	x1, x0
 1b8:	adrp	x2, 0 <ss_help>
 1bc:	mov	w0, w26
 1c0:	add	x2, x2, #0x0
 1c4:	ldrsw	x1, [x1]
 1c8:	bl	0 <ss_perror>
 1cc:	mov	w0, w20
 1d0:	ldp	x19, x20, [sp, #16]
 1d4:	ldp	x21, x22, [sp, #32]
 1d8:	ldp	x23, x24, [sp, #48]
 1dc:	ldp	x25, x26, [sp, #64]
 1e0:	ldr	x27, [sp, #80]
 1e4:	ldp	x29, x30, [sp], #96
 1e8:	b	0 <close>
 1ec:	ldp	x23, x24, [sp, #48]
 1f0:	ldp	x25, x26, [sp, #64]
 1f4:	ldp	x29, x30, [sp], #96
 1f8:	b	0 <ss_list_requests>
 1fc:	ldr	x20, [x23, #8]
 200:	mov	x0, x20
 204:	bl	0 <strlen>
 208:	add	x0, x0, #0x13
 20c:	bl	0 <malloc>
 210:	adrp	x2, 0 <ss_help>
 214:	add	x2, x2, #0x0
 218:	mov	x19, x0
 21c:	mov	x1, x20
 220:	add	x0, x0, #0x12
 224:	ldp	x4, x5, [x2]
 228:	stp	x4, x5, [x19]
 22c:	ldrh	w2, [x2, #16]
 230:	strh	w2, [x19, #16]
 234:	bl	0 <strcpy>
 238:	mov	x2, x19
 23c:	mov	w0, w26
 240:	mov	x1, #0x0                   	// #0
 244:	bl	0 <ss_perror>
 248:	mov	x0, x19
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldp	x21, x22, [sp, #32]
 254:	ldp	x23, x24, [sp, #48]
 258:	ldp	x25, x26, [sp, #64]
 25c:	ldr	x27, [sp, #80]
 260:	ldp	x29, x30, [sp], #96
 264:	b	0 <free>
 268:	ldp	x19, x20, [sp, #16]
 26c:	mov	w0, w26
 270:	ldp	x23, x24, [sp, #48]
 274:	mov	x1, #0x6d03                	// #27907
 278:	ldp	x25, x26, [sp, #64]
 27c:	movk	x1, #0xb, lsl #16
 280:	ldp	x29, x30, [sp], #96
 284:	mov	x2, #0x0                   	// #0
 288:	b	0 <ss_perror>
 28c:	mov	w0, w26
 290:	adrp	x2, 0 <ss_help>
 294:	ldp	x19, x20, [sp, #16]
 298:	add	x2, x2, #0x0
 29c:	ldp	x21, x22, [sp, #32]
 2a0:	mov	x1, #0x0                   	// #0
 2a4:	ldp	x23, x24, [sp, #48]
 2a8:	ldp	x25, x26, [sp, #64]
 2ac:	ldr	x27, [sp, #80]
 2b0:	ldp	x29, x30, [sp], #96
 2b4:	b	0 <ss_perror>
 2b8:	mov	w0, w26
 2bc:	adrp	x2, 0 <ss_help>
 2c0:	ldp	x19, x20, [sp, #16]
 2c4:	add	x2, x2, #0x0
 2c8:	ldp	x23, x24, [sp, #48]
 2cc:	mov	x1, #0x0                   	// #0
 2d0:	ldp	x25, x26, [sp, #64]
 2d4:	ldp	x29, x30, [sp], #96
 2d8:	b	0 <ss_perror>
 2dc:	nop

00000000000002e0 <ss_add_info_dir>:
 2e0:	stp	x29, x30, [sp, #-64]!
 2e4:	mov	x29, sp
 2e8:	stp	x21, x22, [sp, #32]
 2ec:	mov	x21, x2
 2f0:	cbz	x1, 30c <ss_add_info_dir+0x2c>
 2f4:	stp	x19, x20, [sp, #16]
 2f8:	mov	w3, w0
 2fc:	mov	x19, x1
 300:	ldrb	w0, [x1]
 304:	cbnz	w0, 324 <ss_add_info_dir+0x44>
 308:	ldp	x19, x20, [sp, #16]
 30c:	mov	w0, #0x6d03                	// #27907
 310:	movk	w0, #0xb, lsl #16
 314:	str	w0, [x21]
 318:	ldp	x21, x22, [sp, #32]
 31c:	ldp	x29, x30, [sp], #64
 320:	ret
 324:	adrp	x1, 0 <_ss_table>
 328:	mov	x0, x19
 32c:	ldr	x1, [x1]
 330:	ldr	x22, [x1, w3, sxtw #3]
 334:	bl	0 <opendir>
 338:	cbz	x0, 3c0 <ss_add_info_dir+0xe0>
 33c:	stp	x23, x24, [sp, #48]
 340:	bl	0 <closedir>
 344:	ldr	x0, [x22, #40]
 348:	ldr	x1, [x0]
 34c:	cbz	x1, 3dc <ss_add_info_dir+0xfc>
 350:	sub	x4, x0, #0x8
 354:	mov	x3, #0x1                   	// #1
 358:	mov	x20, x3
 35c:	lsl	x23, x3, #3
 360:	add	x3, x3, #0x1
 364:	ldr	x1, [x4, x3, lsl #3]
 368:	cbnz	x1, 358 <ss_add_info_dir+0x78>
 36c:	add	w1, w20, #0x2
 370:	sbfiz	x1, x1, #3, #32
 374:	bl	0 <realloc>
 378:	mov	x24, x0
 37c:	cbz	x0, 3ec <ss_add_info_dir+0x10c>
 380:	add	x20, x20, #0x1
 384:	str	x24, [x22, #40]
 388:	mov	x0, x19
 38c:	str	xzr, [x24, x20, lsl #3]
 390:	bl	0 <strlen>
 394:	add	w0, w0, #0x1
 398:	bl	0 <malloc>
 39c:	str	x0, [x24, x23]
 3a0:	mov	x1, x19
 3a4:	bl	0 <strcpy>
 3a8:	ldp	x19, x20, [sp, #16]
 3ac:	ldp	x23, x24, [sp, #48]
 3b0:	str	wzr, [x21]
 3b4:	ldp	x21, x22, [sp, #32]
 3b8:	ldp	x29, x30, [sp], #64
 3bc:	ret
 3c0:	bl	0 <__errno_location>
 3c4:	ldr	w0, [x0]
 3c8:	ldp	x19, x20, [sp, #16]
 3cc:	str	w0, [x21]
 3d0:	ldp	x21, x22, [sp, #32]
 3d4:	ldp	x29, x30, [sp], #64
 3d8:	ret
 3dc:	mov	x1, #0x10                  	// #16
 3e0:	mov	x23, #0x0                   	// #0
 3e4:	mov	x20, #0x0                   	// #0
 3e8:	b	374 <ss_add_info_dir+0x94>
 3ec:	str	xzr, [x22, #40]
 3f0:	bl	0 <__errno_location>
 3f4:	ldr	w0, [x0]
 3f8:	ldp	x19, x20, [sp, #16]
 3fc:	ldp	x23, x24, [sp, #48]
 400:	str	w0, [x21]
 404:	b	318 <ss_add_info_dir+0x38>

0000000000000408 <ss_delete_info_dir>:
 408:	stp	x29, x30, [sp, #-48]!
 40c:	adrp	x3, 0 <_ss_table>
 410:	mov	x29, sp
 414:	ldr	x3, [x3]
 418:	stp	x19, x20, [sp, #16]
 41c:	ldr	x0, [x3, w0, sxtw #3]
 420:	ldr	x19, [x0, #40]
 424:	ldr	x0, [x19]
 428:	str	x21, [sp, #32]
 42c:	mov	x21, x2
 430:	cbz	x0, 478 <ss_delete_info_dir+0x70>
 434:	mov	x20, x1
 438:	b	444 <ss_delete_info_dir+0x3c>
 43c:	ldr	x0, [x19, #8]!
 440:	cbz	x0, 478 <ss_delete_info_dir+0x70>
 444:	mov	x1, x20
 448:	bl	0 <strcmp>
 44c:	cbnz	w0, 43c <ss_delete_info_dir+0x34>
 450:	ldr	x0, [x19]
 454:	cbz	x0, 464 <ss_delete_info_dir+0x5c>
 458:	ldr	x0, [x19, #8]
 45c:	str	x0, [x19], #8
 460:	cbnz	x0, 458 <ss_delete_info_dir+0x50>
 464:	str	wzr, [x21]
 468:	ldp	x19, x20, [sp, #16]
 46c:	ldr	x21, [sp, #32]
 470:	ldp	x29, x30, [sp], #48
 474:	ret
 478:	mov	w0, #0x6d03                	// #27907
 47c:	movk	w0, #0xb, lsl #16
 480:	str	w0, [x21]
 484:	ldp	x19, x20, [sp, #16]
 488:	ldr	x21, [sp, #32]
 48c:	ldp	x29, x30, [sp], #48
 490:	ret

execute_cmd.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <really_execute_command>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	adrp	x3, 0 <_ss_table>
   8:	mov	x29, sp
   c:	stp	x25, x26, [sp, #64]
  10:	mov	w25, w0
  14:	ldr	x0, [x3]
  18:	stp	x19, x20, [sp, #16]
  1c:	stp	x27, x28, [sp, #80]
  20:	ldr	x20, [x0, w25, sxtw #3]
  24:	stp	x21, x22, [sp, #32]
  28:	str	x2, [sp, #104]
  2c:	ldr	x28, [x20, #64]
  30:	ldr	x0, [x28]
  34:	cbz	x0, dc <really_execute_command+0xdc>
  38:	mov	w27, w1
  3c:	stp	x23, x24, [sp, #48]
  40:	ldr	x21, [x0, #8]
  44:	ldr	x0, [sp, #104]
  48:	ldr	x19, [x21]
  4c:	ldr	x24, [x0]
  50:	ldr	x26, [x24]
  54:	str	w27, [x20, #16]
  58:	str	x24, [x20, #24]
  5c:	cbz	x19, d0 <really_execute_command+0xd0>
  60:	ldr	x23, [x19]
  64:	mov	x0, x23
  68:	cbnz	x23, 78 <really_execute_command+0x78>
  6c:	b	c8 <really_execute_command+0xc8>
  70:	ldr	x0, [x19, #8]!
  74:	cbz	x0, c8 <really_execute_command+0xc8>
  78:	mov	x1, x26
  7c:	bl	0 <strcmp>
  80:	mov	w22, w0
  84:	cbnz	w0, 70 <really_execute_command+0x70>
  88:	ldr	x4, [x21, #8]
  8c:	str	x23, [x20, #32]
  90:	ldr	x3, [x20, #48]
  94:	mov	w2, w25
  98:	mov	x1, x24
  9c:	mov	w0, w27
  a0:	blr	x4
  a4:	ldp	x23, x24, [sp, #48]
  a8:	str	xzr, [x20, #32]
  ac:	mov	w0, w22
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldp	x21, x22, [sp, #32]
  b8:	ldp	x25, x26, [sp, #64]
  bc:	ldp	x27, x28, [sp, #80]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret
  c8:	ldr	x19, [x21, #32]!
  cc:	cbnz	x19, 60 <really_execute_command+0x60>
  d0:	ldr	x0, [x28, #8]!
  d4:	cbnz	x0, 40 <really_execute_command+0x40>
  d8:	ldp	x23, x24, [sp, #48]
  dc:	mov	w22, #0x6d04                	// #27908
  e0:	movk	w22, #0xb, lsl #16
  e4:	mov	w0, w22
  e8:	ldp	x19, x20, [sp, #16]
  ec:	ldp	x21, x22, [sp, #32]
  f0:	ldp	x25, x26, [sp, #64]
  f4:	ldp	x27, x28, [sp, #80]
  f8:	ldp	x29, x30, [sp], #112
  fc:	ret

0000000000000100 <ss_execute_command>:
 100:	stp	x29, x30, [sp, #-64]!
 104:	mov	x29, sp
 108:	stp	x19, x20, [sp, #16]
 10c:	ldr	x20, [x1]
 110:	stp	x21, x22, [sp, #32]
 114:	mov	x21, x1
 118:	mov	w22, w0
 11c:	cbz	x20, 19c <ss_execute_command+0x9c>
 120:	add	x2, x1, #0x8
 124:	mov	w19, #0x0                   	// #0
 128:	ldr	x3, [x2], #8
 12c:	mov	w4, w19
 130:	add	w19, w19, #0x1
 134:	cbnz	x3, 128 <ss_execute_command+0x28>
 138:	add	w4, w4, #0x2
 13c:	sbfiz	x0, x4, #3, #32
 140:	bl	0 <malloc>
 144:	str	x0, [sp, #56]
 148:	sxtw	x1, w19
 14c:	mov	x2, #0x0                   	// #0
 150:	b	15c <ss_execute_command+0x5c>
 154:	ldr	x20, [x21, x3, lsl #3]
 158:	mov	x2, x3
 15c:	str	x20, [x0, x2, lsl #3]
 160:	cmp	x1, x2
 164:	add	x3, x2, #0x1
 168:	b.ne	154 <ss_execute_command+0x54>  // b.any
 16c:	mov	w1, w19
 170:	add	x2, sp, #0x38
 174:	mov	w0, w22
 178:	bl	0 <really_execute_command>
 17c:	mov	w19, w0
 180:	ldr	x0, [sp, #56]
 184:	bl	0 <free>
 188:	mov	w0, w19
 18c:	ldp	x19, x20, [sp, #16]
 190:	ldp	x21, x22, [sp, #32]
 194:	ldp	x29, x30, [sp], #64
 198:	ret
 19c:	mov	x0, #0x8                   	// #8
 1a0:	mov	w19, #0x0                   	// #0
 1a4:	b	140 <ss_execute_command+0x40>

00000000000001a8 <ss_execute_line>:
 1a8:	stp	x29, x30, [sp, #-48]!
 1ac:	mov	x29, sp
 1b0:	stp	x19, x20, [sp, #16]
 1b4:	mov	w19, w0
 1b8:	ldrb	w2, [x1]
 1bc:	cmp	w2, #0x20
 1c0:	ccmp	w2, #0x9, #0x4, ne  // ne = any
 1c4:	b.ne	1d8 <ss_execute_line+0x30>  // b.any
 1c8:	ldrb	w2, [x1, #1]!
 1cc:	cmp	w2, #0x20
 1d0:	ccmp	w2, #0x9, #0x4, ne  // ne = any
 1d4:	b.eq	1c8 <ss_execute_line+0x20>  // b.none
 1d8:	cmp	w2, #0x21
 1dc:	b.ne	234 <ss_execute_line+0x8c>  // b.any
 1e0:	adrp	x0, 0 <_ss_table>
 1e4:	ldr	x0, [x0]
 1e8:	ldr	x0, [x0, w19, sxtw #3]
 1ec:	ldrb	w0, [x0, #80]
 1f0:	tbz	w0, #0, 20c <ss_execute_line+0x64>
 1f4:	mov	w20, #0x6d0a                	// #27914
 1f8:	movk	w20, #0xb, lsl #16
 1fc:	mov	w0, w20
 200:	ldp	x19, x20, [sp, #16]
 204:	ldp	x29, x30, [sp], #48
 208:	ret
 20c:	add	x0, x1, #0x1
 210:	mov	w20, #0x0                   	// #0
 214:	bl	0 <system>
 218:	tbz	w0, #31, 1fc <ss_execute_line+0x54>
 21c:	bl	0 <__errno_location>
 220:	ldr	w20, [x0]
 224:	mov	w0, w20
 228:	ldp	x19, x20, [sp, #16]
 22c:	ldp	x29, x30, [sp], #48
 230:	ret
 234:	add	x2, sp, #0x24
 238:	mov	w0, w19
 23c:	bl	0 <ss_parse>
 240:	ldr	w20, [sp, #36]
 244:	str	x0, [sp, #40]
 248:	cbz	w20, 264 <ss_execute_line+0xbc>
 24c:	mov	w1, w20
 250:	mov	w0, w19
 254:	add	x2, sp, #0x28
 258:	bl	0 <really_execute_command>
 25c:	mov	w20, w0
 260:	ldr	x0, [sp, #40]
 264:	bl	0 <free>
 268:	mov	w0, w20
 26c:	ldp	x19, x20, [sp, #16]
 270:	ldp	x29, x30, [sp], #48
 274:	ret

listen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <listen_int_handler>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <stdout>
   8:	mov	w0, #0xa                   	// #10
   c:	mov	x29, sp
  10:	ldr	x1, [x1]
  14:	bl	0 <putc>
  18:	adrp	x1, 0 <listen_int_handler>
  1c:	mov	w0, #0x2                   	// #2
  20:	add	x1, x1, #0x0
  24:	bl	0 <signal>
  28:	adrp	x0, 0 <listen_int_handler>
  2c:	mov	w1, #0x1                   	// #1
  30:	add	x0, x0, #0x0
  34:	bl	0 <longjmp>

0000000000000038 <print_prompt>:
  38:	adrp	x0, 0 <listen_int_handler>
  3c:	ldr	x1, [x0]
  40:	ldr	x0, [x1, #120]
  44:	cbz	x0, 50 <print_prompt+0x18>
  48:	mov	x16, x0
  4c:	br	x16
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x29, sp
  58:	ldr	x0, [x1, #56]
  5c:	str	x19, [sp, #16]
  60:	adrp	x19, 0 <stdout>
  64:	ldr	x1, [x19]
  68:	bl	0 <fputs>
  6c:	ldr	x0, [x19]
  70:	ldr	x19, [sp, #16]
  74:	ldp	x29, x30, [sp], #32
  78:	b	0 <fflush>
  7c:	nop

0000000000000080 <cmd_generator>:
  80:	stp	x29, x30, [sp, #-64]!
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	stp	x21, x22, [sp, #32]
  90:	mov	x22, x0
  94:	str	x23, [sp, #48]
  98:	cbz	w1, 180 <cmd_generator+0x100>
  9c:	adrp	x20, 0 <listen_int_handler>
  a0:	add	x20, x20, #0x0
  a4:	ldr	w23, [x20, #320]
  a8:	ldr	x19, [x20, #328]
  ac:	sxtw	x23, w23
  b0:	cbz	x19, e0 <cmd_generator+0x60>
  b4:	nop
  b8:	ldr	x21, [x19]
  bc:	cbz	x21, e0 <cmd_generator+0x60>
  c0:	add	x19, x19, #0x8
  c4:	mov	x2, x23
  c8:	mov	x1, x22
  cc:	mov	x0, x21
  d0:	bl	0 <strncmp>
  d4:	cbz	w0, 124 <cmd_generator+0xa4>
  d8:	str	x19, [x20, #328]
  dc:	cbnz	x19, b8 <cmd_generator+0x38>
  e0:	ldr	x4, [x20, #336]
  e4:	ldr	w3, [x20, #344]
  e8:	ldr	x1, [x4]
  ec:	sbfiz	x0, x3, #5, #32
  f0:	add	w3, w3, #0x1
  f4:	str	w3, [x20, #344]
  f8:	ldr	x1, [x1, #8]
  fc:	ldr	x19, [x1, x0]
 100:	str	x19, [x20, #328]
 104:	cbz	x19, 168 <cmd_generator+0xe8>
 108:	ldr	x21, [x19]
 10c:	mov	x2, x23
 110:	add	x19, x19, #0x8
 114:	mov	x1, x22
 118:	mov	x0, x21
 11c:	bl	0 <strncmp>
 120:	cbnz	w0, d8 <cmd_generator+0x58>
 124:	mov	x0, x21
 128:	bl	0 <strlen>
 12c:	add	x23, x0, #0x1
 130:	mov	x0, x23
 134:	bl	0 <malloc>
 138:	mov	x22, x0
 13c:	cbz	x0, 14c <cmd_generator+0xcc>
 140:	mov	x2, x23
 144:	mov	x1, x21
 148:	bl	0 <memcpy>
 14c:	mov	x0, x22
 150:	str	x19, [x20, #328]
 154:	ldp	x19, x20, [sp, #16]
 158:	ldp	x21, x22, [sp, #32]
 15c:	ldr	x23, [sp, #48]
 160:	ldp	x29, x30, [sp], #64
 164:	ret
 168:	ldr	x0, [x4, #8]
 16c:	add	x4, x4, #0x8
 170:	str	x4, [x20, #336]
 174:	cbz	x0, 1a4 <cmd_generator+0x124>
 178:	str	wzr, [x20, #344]
 17c:	b	e0 <cmd_generator+0x60>
 180:	adrp	x20, 0 <listen_int_handler>
 184:	add	x20, x20, #0x0
 188:	bl	0 <strlen>
 18c:	mov	w23, w0
 190:	ldr	x1, [x20, #312]
 194:	str	w0, [x20, #320]
 198:	ldr	x0, [x1, #64]
 19c:	str	x0, [x20, #336]
 1a0:	cbnz	x0, 1c0 <cmd_generator+0x140>
 1a4:	mov	x22, #0x0                   	// #0
 1a8:	mov	x0, x22
 1ac:	ldp	x19, x20, [sp, #16]
 1b0:	ldp	x21, x22, [sp, #32]
 1b4:	ldr	x23, [sp, #48]
 1b8:	ldp	x29, x30, [sp], #64
 1bc:	ret
 1c0:	ldr	x0, [x0]
 1c4:	cbz	x0, 1a4 <cmd_generator+0x124>
 1c8:	sxtw	x23, w23
 1cc:	mov	x19, #0x0                   	// #0
 1d0:	str	xzr, [x20, #328]
 1d4:	str	wzr, [x20, #344]
 1d8:	b	b0 <cmd_generator+0x30>
 1dc:	nop

00000000000001e0 <ss_listen>:
 1e0:	mov	x12, #0x22a0                	// #8864
 1e4:	sub	sp, sp, x12
 1e8:	adrp	x1, 0 <_ss_table>
 1ec:	mov	w2, w0
 1f0:	stp	x29, x30, [sp]
 1f4:	mov	x29, sp
 1f8:	ldr	x1, [x1]
 1fc:	stp	x19, x20, [sp, #16]
 200:	adrp	x19, 0 <listen_int_handler>
 204:	add	x19, x19, #0x0
 208:	stp	x21, x22, [sp, #32]
 20c:	ldr	x1, [x1, w2, sxtw #3]
 210:	stp	x23, x24, [sp, #48]
 214:	ldr	x2, [x19, #312]
 218:	str	wzr, [x1, #136]
 21c:	str	x1, [sp, #64]
 220:	str	w0, [sp, #76]
 224:	add	x0, sp, #0xe8
 228:	str	x2, [sp, #80]
 22c:	str	x1, [x19, #312]
 230:	str	xzr, [x19, #352]
 234:	bl	0 <sigemptyset>
 238:	add	x0, sp, #0xe8
 23c:	mov	w1, #0x2                   	// #2
 240:	bl	0 <sigaddset>
 244:	add	x0, sp, #0xe8
 248:	add	x2, sp, #0x68
 24c:	mov	x1, x0
 250:	mov	w0, #0x0                   	// #0
 254:	bl	0 <sigprocmask>
 258:	mov	x2, #0x138                 	// #312
 25c:	mov	x1, x19
 260:	add	x0, sp, #0x168
 264:	bl	0 <memcpy>
 268:	mov	w0, #0x2                   	// #2
 26c:	adrp	x1, 0 <listen_int_handler>
 270:	add	x1, x1, #0x0
 274:	bl	0 <signal>
 278:	mov	x1, x0
 27c:	mov	x0, x19
 280:	str	x1, [sp, #88]
 284:	bl	0 <_setjmp>
 288:	mov	x2, #0x0                   	// #0
 28c:	add	x1, sp, #0x68
 290:	mov	w0, #0x2                   	// #2
 294:	bl	0 <sigprocmask>
 298:	ldr	x1, [sp, #64]
 29c:	ldr	w0, [x1, #136]
 2a0:	cbnz	w0, 480 <ss_listen+0x2a0>
 2a4:	mov	w22, #0x6d04                	// #27908
 2a8:	adrp	x21, 0 <listen_int_handler>
 2ac:	adrp	x20, 0 <listen_int_handler>
 2b0:	add	x21, x21, #0x0
 2b4:	add	x20, x20, #0x0
 2b8:	add	x23, sp, #0x2a0
 2bc:	movk	w22, #0xb, lsl #16
 2c0:	b	348 <ss_listen+0x168>
 2c4:	ldr	x0, [x20, #312]
 2c8:	ldr	x0, [x0, #56]
 2cc:	blr	x1
 2d0:	mov	x19, x0
 2d4:	cbz	x0, 418 <ss_listen+0x238>
 2d8:	mov	x0, x19
 2dc:	mov	w1, #0xa                   	// #10
 2e0:	bl	0 <strchr>
 2e4:	cbz	x0, 2f4 <ss_listen+0x114>
 2e8:	strb	wzr, [x0]
 2ec:	cmp	x0, x19
 2f0:	b.eq	33c <ss_listen+0x15c>  // b.none
 2f4:	ldr	x1, [x20, #352]
 2f8:	mov	w0, #0x12                  	// #18
 2fc:	bl	0 <signal>
 300:	ldr	x0, [sp, #64]
 304:	ldr	x1, [x0, #112]
 308:	cbz	x1, 314 <ss_listen+0x134>
 30c:	mov	x0, x19
 310:	blr	x1
 314:	ldr	w0, [sp, #76]
 318:	mov	x1, x19
 31c:	bl	0 <ss_execute_line>
 320:	cmp	w0, w22
 324:	b.eq	3a4 <ss_listen+0x1c4>  // b.none
 328:	ldr	x0, [sp, #64]
 32c:	ldr	x0, [x0, #104]
 330:	cbz	x0, 33c <ss_listen+0x15c>
 334:	mov	x0, x19
 338:	bl	0 <free>
 33c:	ldr	x0, [sp, #64]
 340:	ldr	w0, [x0, #136]
 344:	cbnz	w0, 480 <ss_listen+0x2a0>
 348:	mov	x1, x21
 34c:	mov	w0, #0x12                  	// #18
 350:	bl	0 <signal>
 354:	cmp	x0, x21
 358:	b.eq	360 <ss_listen+0x180>  // b.none
 35c:	str	x0, [x20, #352]
 360:	ldr	x0, [sp, #64]
 364:	ldr	x1, [x0, #104]
 368:	cbnz	x1, 2c4 <ss_listen+0xe4>
 36c:	mov	w0, #0x0                   	// #0
 370:	bl	38 <print_prompt>
 374:	adrp	x2, 0 <stdin>
 378:	mov	x0, x23
 37c:	mov	w1, #0x2000                	// #8192
 380:	ldr	x2, [x2]
 384:	bl	0 <fgets>
 388:	cmp	x23, x0
 38c:	b.ne	40c <ss_listen+0x22c>  // b.any
 390:	mov	x0, #0x2020                	// #8224
 394:	add	x0, sp, x0
 398:	mov	x19, x23
 39c:	strb	wzr, [x0, #639]
 3a0:	b	2d8 <ss_listen+0xf8>
 3a4:	ldrb	w0, [x19]
 3a8:	mov	x24, x19
 3ac:	cmp	w0, #0x20
 3b0:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 3b4:	b.ne	3c8 <ss_listen+0x1e8>  // b.any
 3b8:	ldrb	w0, [x24, #1]!
 3bc:	cmp	w0, #0x20
 3c0:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 3c4:	b.eq	3b8 <ss_listen+0x1d8>  // b.none
 3c8:	mov	x0, x24
 3cc:	mov	w1, #0x20                  	// #32
 3d0:	bl	0 <strchr>
 3d4:	cbz	x0, 3dc <ss_listen+0x1fc>
 3d8:	strb	wzr, [x0]
 3dc:	mov	x0, x24
 3e0:	mov	w1, #0x9                   	// #9
 3e4:	bl	0 <strchr>
 3e8:	cbz	x0, 3f0 <ss_listen+0x210>
 3ec:	strb	wzr, [x0]
 3f0:	ldr	w0, [sp, #76]
 3f4:	mov	x3, x24
 3f8:	adrp	x2, 0 <listen_int_handler>
 3fc:	mov	x1, #0x0                   	// #0
 400:	add	x2, x2, #0x0
 404:	bl	0 <ss_error>
 408:	b	328 <ss_listen+0x148>
 40c:	mov	x1, #0x2020                	// #8224
 410:	add	x0, sp, x1
 414:	strb	wzr, [x0, #639]
 418:	adrp	x1, 0 <listen_int_handler>
 41c:	mov	w19, #0x6d06                	// #27910
 420:	mov	w0, #0x12                  	// #18
 424:	movk	w19, #0xb, lsl #16
 428:	ldr	x1, [x1]
 42c:	bl	0 <signal>
 430:	ldr	x1, [sp, #88]
 434:	mov	w0, #0x2                   	// #2
 438:	bl	0 <signal>
 43c:	adrp	x3, 0 <listen_int_handler>
 440:	add	x3, x3, #0x0
 444:	add	x1, sp, #0x168
 448:	mov	x0, x3
 44c:	mov	x2, #0x138                 	// #312
 450:	bl	0 <memcpy>
 454:	mov	x3, x0
 458:	ldr	x1, [sp, #80]
 45c:	mov	w0, w19
 460:	ldp	x29, x30, [sp]
 464:	mov	x12, #0x22a0                	// #8864
 468:	ldp	x19, x20, [sp, #16]
 46c:	ldp	x21, x22, [sp, #32]
 470:	ldp	x23, x24, [sp, #48]
 474:	str	x1, [x3, #312]
 478:	add	sp, sp, x12
 47c:	ret
 480:	mov	w19, #0x0                   	// #0
 484:	b	430 <ss_listen+0x250>

0000000000000488 <ss_abort_subsystem>:
 488:	adrp	x3, 0 <_ss_table>
 48c:	mov	w2, #0x1                   	// #1
 490:	ldr	x3, [x3]
 494:	ldr	x0, [x3, w0, sxtw #3]
 498:	stp	w2, w1, [x0, #136]
 49c:	ret

00000000000004a0 <ss_quit>:
 4a0:	adrp	x0, 0 <_ss_table>
 4a4:	mov	x1, #0x1                   	// #1
 4a8:	ldr	x0, [x0]
 4ac:	ldr	x0, [x0, w2, sxtw #3]
 4b0:	str	x1, [x0, #136]
 4b4:	ret

00000000000004b8 <ss_rl_completion>:
 4b8:	cbnz	w1, 4dc <ss_rl_completion+0x24>
 4bc:	adrp	x1, 0 <listen_int_handler>
 4c0:	ldr	x1, [x1]
 4c4:	ldr	x2, [x1, #128]
 4c8:	cbz	x2, 4dc <ss_rl_completion+0x24>
 4cc:	mov	x16, x2
 4d0:	adrp	x1, 0 <listen_int_handler>
 4d4:	add	x1, x1, #0x0
 4d8:	br	x16
 4dc:	mov	x0, #0x0                   	// #0
 4e0:	ret

parse.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_parse>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	stp	x21, x22, [sp, #32]
  14:	mov	w22, w0
  18:	mov	x21, x2
  1c:	mov	x0, #0x8                   	// #8
  20:	stp	x23, x24, [sp, #48]
  24:	bl	0 <malloc>
  28:	mov	x23, x0
  2c:	cbz	x0, 1a4 <ss_parse+0x1a4>
  30:	mov	x19, x20
  34:	mov	w24, #0x0                   	// #0
  38:	str	xzr, [x0]
  3c:	b	44 <ss_parse+0x44>
  40:	strb	wzr, [x3]
  44:	ldrb	w1, [x19]
  48:	cbz	w1, c0 <ss_parse+0xc0>
  4c:	cmp	w1, #0x20
  50:	ccmp	w1, #0x9, #0x4, ne  // ne = any
  54:	b.eq	148 <ss_parse+0x148>  // b.none
  58:	add	w20, w24, #0x2
  5c:	cmp	w1, #0x22
  60:	mov	x0, x23
  64:	sbfiz	x20, x20, #3, #32
  68:	mov	x1, x20
  6c:	b.eq	dc <ss_parse+0xdc>  // b.none
  70:	bl	0 <realloc>
  74:	cbz	x0, 17c <ss_parse+0x17c>
  78:	add	x20, x0, x20
  7c:	add	w24, w24, #0x1
  80:	mov	x23, x0
  84:	mov	x3, x19
  88:	stp	x19, xzr, [x20, #-16]
  8c:	ldrb	w1, [x19]
  90:	cbz	w1, bc <ss_parse+0xbc>
  94:	nop
  98:	cmp	w1, #0x20
  9c:	add	x19, x19, #0x1
  a0:	ccmp	w1, #0x9, #0x4, ne  // ne = any
  a4:	b.eq	40 <ss_parse+0x40>  // b.none
  a8:	cmp	w1, #0x22
  ac:	b.eq	100 <ss_parse+0x100>  // b.none
  b0:	strb	w1, [x3], #1
  b4:	ldrb	w1, [x19]
  b8:	cbnz	w1, 98 <ss_parse+0x98>
  bc:	strb	wzr, [x3]
  c0:	str	w24, [x21]
  c4:	mov	x0, x23
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x21, x22, [sp, #32]
  d0:	ldp	x23, x24, [sp, #48]
  d4:	ldp	x29, x30, [sp], #64
  d8:	ret
  dc:	bl	0 <realloc>
  e0:	add	x1, x19, #0x1
  e4:	cbz	x0, 17c <ss_parse+0x17c>
  e8:	add	x20, x0, x20
  ec:	mov	x3, x19
  f0:	add	w24, w24, #0x1
  f4:	mov	x23, x0
  f8:	stp	x19, xzr, [x20, #-16]
  fc:	mov	x19, x1
 100:	ldrb	w2, [x19]
 104:	cbz	w2, 168 <ss_parse+0x168>
 108:	mov	x4, x3
 10c:	b	124 <ss_parse+0x124>
 110:	mov	x19, x20
 114:	strb	w2, [x4]
 118:	add	x4, x4, #0x1
 11c:	ldrb	w2, [x19]
 120:	cbz	w2, 168 <ss_parse+0x168>
 124:	cmp	w2, #0x22
 128:	mov	x3, x4
 12c:	add	x20, x19, #0x1
 130:	b.ne	110 <ss_parse+0x110>  // b.any
 134:	ldrb	w0, [x19, #1]
 138:	cmp	w0, #0x22
 13c:	b.eq	154 <ss_parse+0x154>  // b.none
 140:	mov	x19, x20
 144:	b	8c <ss_parse+0x8c>
 148:	ldrb	w1, [x19, #1]!
 14c:	cbnz	w1, 4c <ss_parse+0x4c>
 150:	b	c0 <ss_parse+0xc0>
 154:	add	x19, x19, #0x2
 158:	strb	w2, [x4]
 15c:	add	x4, x4, #0x1
 160:	ldrb	w2, [x19]
 164:	cbnz	w2, 124 <ss_parse+0x124>
 168:	adrp	x2, 0 <ss_parse>
 16c:	mov	w0, w22
 170:	add	x2, x2, #0x0
 174:	mov	x1, #0x0                   	// #0
 178:	bl	0 <ss_error>
 17c:	mov	x0, x23
 180:	bl	0 <free>
 184:	str	wzr, [x21]
 188:	mov	x23, #0x0                   	// #0
 18c:	mov	x0, x23
 190:	ldp	x19, x20, [sp, #16]
 194:	ldp	x21, x22, [sp, #32]
 198:	ldp	x23, x24, [sp, #48]
 19c:	ldp	x29, x30, [sp], #64
 1a0:	ret
 1a4:	bl	0 <__errno_location>
 1a8:	mov	x1, x0
 1ac:	adrp	x2, 0 <ss_parse>
 1b0:	mov	w0, w22
 1b4:	add	x2, x2, #0x0
 1b8:	ldrsw	x1, [x1]
 1bc:	bl	0 <ss_error>
 1c0:	str	wzr, [x21]
 1c4:	b	c4 <ss_parse+0xc4>

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_name>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	adrp	x1, 0 <_ss_table>
   8:	mov	x29, sp
   c:	ldr	x1, [x1]
  10:	stp	x21, x22, [sp, #32]
  14:	stp	x19, x20, [sp, #16]
  18:	ldr	x22, [x1, w0, sxtw #3]
  1c:	ldr	x21, [x22, #32]
  20:	ldr	x19, [x22]
  24:	mov	x0, x19
  28:	bl	0 <strlen>
  2c:	mov	x20, x0
  30:	cbz	x21, a8 <ss_name+0xa8>
  34:	add	x20, x20, #0x4
  38:	mov	x0, x21
  3c:	bl	0 <strlen>
  40:	add	x0, x20, x0
  44:	bl	0 <malloc>
  48:	mov	x21, x0
  4c:	ldrb	w3, [x19]
  50:	mov	x2, x0
  54:	cbz	w3, 64 <ss_name+0x64>
  58:	strb	w3, [x2], #1
  5c:	ldrb	w3, [x19, #1]!
  60:	cbnz	w3, 58 <ss_name+0x58>
  64:	mov	x1, x2
  68:	mov	w0, #0x2820                	// #10272
  6c:	strh	w0, [x1], #2
  70:	ldr	x3, [x22, #32]
  74:	ldrb	w2, [x3]
  78:	cbz	w2, 8c <ss_name+0x8c>
  7c:	nop
  80:	strb	w2, [x1], #1
  84:	ldrb	w2, [x3, #1]!
  88:	cbnz	w2, 80 <ss_name+0x80>
  8c:	mov	w0, #0x29                  	// #41
  90:	strh	w0, [x1]
  94:	mov	x0, x21
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldp	x21, x22, [sp, #32]
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret
  a8:	add	w0, w0, #0x1
  ac:	bl	0 <malloc>
  b0:	mov	x21, x0
  b4:	cbz	x0, 94 <ss_name+0x94>
  b8:	add	x2, x20, #0x1
  bc:	mov	x1, x19
  c0:	bl	0 <memcpy>
  c4:	mov	x0, x21
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x21, x22, [sp, #32]
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret

00000000000000d8 <ss_error>:
  d8:	stp	x29, x30, [sp, #-272]!
  dc:	mov	x29, sp
  e0:	add	x8, sp, #0xe0
  e4:	stp	x3, x4, [sp, #232]
  e8:	add	x3, sp, #0x110
  ec:	stp	x19, x20, [sp, #16]
  f0:	mov	x19, x1
  f4:	mov	x20, x2
  f8:	mov	w1, #0xffffff80            	// #-128
  fc:	mov	w2, #0xffffffd8            	// #-40
 100:	stp	x3, x3, [sp, #64]
 104:	str	x8, [sp, #80]
 108:	stp	w2, w1, [sp, #88]
 10c:	str	q0, [sp, #96]
 110:	str	q1, [sp, #112]
 114:	str	q2, [sp, #128]
 118:	str	q3, [sp, #144]
 11c:	str	q4, [sp, #160]
 120:	str	q5, [sp, #176]
 124:	str	q6, [sp, #192]
 128:	str	q7, [sp, #208]
 12c:	stp	x5, x6, [sp, #248]
 130:	str	x7, [sp, #264]
 134:	bl	0 <ss_name>
 138:	ldp	x6, x7, [sp, #64]
 13c:	mov	x2, x20
 140:	ldp	x4, x5, [sp, #80]
 144:	mov	x1, x19
 148:	add	x3, sp, #0x20
 14c:	mov	x19, x0
 150:	stp	x6, x7, [sp, #32]
 154:	stp	x4, x5, [sp, #48]
 158:	bl	0 <com_err_va>
 15c:	mov	x0, x19
 160:	bl	0 <free>
 164:	ldp	x19, x20, [sp, #16]
 168:	ldp	x29, x30, [sp], #272
 16c:	ret

0000000000000170 <ss_perror>:
 170:	mov	x3, x2
 174:	adrp	x4, 0 <ss_name>
 178:	add	x2, x4, #0x0
 17c:	b	d8 <ss_error>

prompt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_set_prompt>:
   0:	adrp	x2, 0 <_ss_table>
   4:	ldr	x2, [x2]
   8:	ldr	x0, [x2, w0, sxtw #3]
   c:	str	x1, [x0, #56]
  10:	ret
  14:	nop

0000000000000018 <ss_get_prompt>:
  18:	adrp	x1, 0 <_ss_table>
  1c:	ldr	x1, [x1]
  20:	ldr	x0, [x1, w0, sxtw #3]
  24:	ldr	x0, [x0, #56]
  28:	ret

request_tbl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_add_request_table>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x4, 0 <_ss_table>
   8:	mov	x29, sp
   c:	ldr	x4, [x4]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x23, x1
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	w20, w2
  20:	ldr	x24, [x4, w0, sxtw #3]
  24:	stp	x21, x22, [sp, #32]
  28:	mov	x22, x3
  2c:	ldr	x0, [x24, #64]
  30:	ldr	x1, [x0]
  34:	cbz	x1, bc <ss_add_request_table+0xbc>
  38:	sub	x2, x0, #0x8
  3c:	mov	x4, #0x1                   	// #1
  40:	mov	w19, w4
  44:	add	x4, x4, #0x1
  48:	ldr	x5, [x2, x4, lsl #3]
  4c:	cbnz	x5, 40 <ss_add_request_table+0x40>
  50:	add	w21, w19, #0x2
  54:	sbfiz	x21, x21, #3, #32
  58:	mov	x1, x21
  5c:	bl	0 <realloc>
  60:	cbz	x0, e0 <ss_add_request_table+0xe0>
  64:	cmp	w20, w19
  68:	str	x0, [x24, #64]
  6c:	csel	w5, w20, w19, le
  70:	sub	x21, x21, #0x8
  74:	cmp	w5, w19
  78:	b.gt	9c <ss_add_request_table+0x9c>
  7c:	sxtw	x2, w19
  80:	add	x6, x0, #0x8
  84:	nop
  88:	ldr	x4, [x0, x2, lsl #3]
  8c:	str	x4, [x6, x2, lsl #3]
  90:	sub	x2, x2, #0x1
  94:	cmp	w5, w2
  98:	b.le	88 <ss_add_request_table+0x88>
  9c:	str	x23, [x0, w5, sxtw #3]
  a0:	str	xzr, [x0, x21]
  a4:	str	wzr, [x22]
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x21, x22, [sp, #32]
  b0:	ldp	x23, x24, [sp, #48]
  b4:	ldp	x29, x30, [sp], #64
  b8:	ret
  bc:	mov	x1, #0x10                  	// #16
  c0:	bl	0 <realloc>
  c4:	cbz	x0, e0 <ss_add_request_table+0xe0>
  c8:	cmp	w20, #0x0
  cc:	mov	x21, #0x8                   	// #8
  d0:	csel	w5, w20, wzr, le
  d4:	mov	w19, #0x0                   	// #0
  d8:	str	x0, [x24, #64]
  dc:	b	7c <ss_add_request_table+0x7c>
  e0:	bl	0 <__errno_location>
  e4:	ldr	w0, [x0]
  e8:	str	w0, [x22]
  ec:	b	a8 <ss_add_request_table+0xa8>

00000000000000f0 <ss_delete_request_table>:
  f0:	adrp	x4, 0 <_ss_table>
  f4:	mov	w3, #0x6d08                	// #27912
  f8:	movk	w3, #0xb, lsl #16
  fc:	ldr	x4, [x4]
 100:	ldr	x0, [x4, w0, sxtw #3]
 104:	ldr	x4, [x0, #64]
 108:	ldr	x0, [x4]
 10c:	str	w3, [x2]
 110:	cbz	x0, 138 <ss_delete_request_table+0x48>
 114:	mov	x5, x4
 118:	mov	x3, x4
 11c:	cmp	x1, x0
 120:	b.eq	130 <ss_delete_request_table+0x40>  // b.none
 124:	str	x0, [x3], #8
 128:	str	wzr, [x2]
 12c:	mov	x4, x3
 130:	ldr	x0, [x5, #8]!
 134:	cbnz	x0, 118 <ss_delete_request_table+0x28>
 138:	str	xzr, [x4]
 13c:	ret

list_rqs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_list_requests>:
   0:	stp	x29, x30, [sp, #-368]!
   4:	mov	x29, sp
   8:	add	x0, sp, #0xf0
   c:	stp	x19, x20, [sp, #16]
  10:	sxtw	x19, w2
  14:	stp	x25, x26, [sp, #64]
  18:	bl	0 <sigemptyset>
  1c:	mov	w1, #0x2                   	// #2
  20:	add	x0, sp, #0xf0
  24:	bl	0 <sigaddset>
  28:	add	x2, sp, #0x70
  2c:	add	x1, sp, #0xf0
  30:	mov	w0, #0x0                   	// #0
  34:	bl	0 <sigprocmask>
  38:	mov	x1, #0x1                   	// #1
  3c:	mov	w0, #0x2                   	// #2
  40:	bl	0 <signal>
  44:	mov	x26, x0
  48:	bl	0 <ss_pager_create>
  4c:	tbnz	w0, #31, 1d4 <ss_list_requests+0x1d4>
  50:	adrp	x1, 0 <ss_list_requests>
  54:	add	x1, x1, #0x0
  58:	stp	x21, x22, [sp, #32]
  5c:	adrp	x21, 0 <_ss_table>
  60:	stp	x23, x24, [sp, #48]
  64:	bl	0 <fdopen>
  68:	add	x1, sp, #0x70
  6c:	mov	x20, x0
  70:	mov	x2, #0x0                   	// #0
  74:	mov	w0, #0x2                   	// #2
  78:	bl	0 <sigprocmask>
  7c:	ldr	x2, [x21]
  80:	mov	x0, x20
  84:	adrp	x1, 0 <ss_list_requests>
  88:	add	x1, x1, #0x0
  8c:	adrp	x24, 0 <ss_list_requests>
  90:	add	x24, x24, #0x0
  94:	ldr	x2, [x2, x19, lsl #3]
  98:	ldr	x2, [x2]
  9c:	bl	0 <fprintf>
  a0:	ldr	x0, [x21]
  a4:	ldr	x0, [x0, x19, lsl #3]
  a8:	ldr	x25, [x0, #64]
  ac:	ldr	x0, [x25]
  b0:	cbz	x0, 184 <ss_list_requests+0x184>
  b4:	stp	x27, x28, [sp, #80]
  b8:	ldr	x23, [x0, #8]
  bc:	ldr	x28, [x23]
  c0:	cbnz	x28, d0 <ss_list_requests+0xd0>
  c4:	b	178 <ss_list_requests+0x178>
  c8:	ldr	x28, [x23, #32]!
  cc:	cbz	x28, 178 <ss_list_requests+0x178>
  d0:	ldr	w0, [x23, #24]
  d4:	and	w21, w0, #0x1
  d8:	tbnz	w0, #0, c8 <ss_list_requests+0xc8>
  dc:	ldr	x27, [x28]
  e0:	cbz	x27, 1cc <ss_list_requests+0x1cc>
  e4:	mov	w22, #0xfffffffe            	// #-2
  e8:	b	f8 <ss_list_requests+0xf8>
  ec:	bl	0 <fwrite>
  f0:	ldr	x27, [x28, #8]!
  f4:	cbz	x27, 130 <ss_list_requests+0x130>
  f8:	mov	x0, x27
  fc:	bl	0 <strlen>
 100:	mov	x1, x20
 104:	mov	x19, x0
 108:	mov	x0, x27
 10c:	bl	0 <fputs>
 110:	ldr	x4, [x28, #8]
 114:	add	w19, w19, #0x2
 118:	mov	x3, x20
 11c:	mov	x0, x24
 120:	add	w22, w22, w19
 124:	mov	x2, #0x2                   	// #2
 128:	mov	x1, #0x1                   	// #1
 12c:	cbnz	x4, ec <ss_list_requests+0xec>
 130:	cmp	w22, #0x17
 134:	b.gt	1b8 <ss_list_requests+0x1b8>
 138:	mov	w0, #0x19                  	// #25
 13c:	sub	w22, w0, w22
 140:	add	w21, w21, #0x1
 144:	mov	x1, x20
 148:	mov	w0, #0x20                  	// #32
 14c:	bl	0 <fputc>
 150:	cmp	w22, w21
 154:	b.ne	140 <ss_list_requests+0x140>  // b.any
 158:	ldr	x0, [x23, #16]
 15c:	mov	x1, x20
 160:	bl	0 <fputs>
 164:	mov	x1, x20
 168:	mov	w0, #0xa                   	// #10
 16c:	bl	0 <fputc>
 170:	ldr	x28, [x23, #32]!
 174:	cbnz	x28, d0 <ss_list_requests+0xd0>
 178:	ldr	x0, [x25, #8]!
 17c:	cbnz	x0, b8 <ss_list_requests+0xb8>
 180:	ldp	x27, x28, [sp, #80]
 184:	mov	x0, x20
 188:	bl	0 <fclose>
 18c:	add	x0, sp, #0x6c
 190:	bl	0 <wait>
 194:	mov	x1, x26
 198:	mov	w0, #0x2                   	// #2
 19c:	bl	0 <signal>
 1a0:	ldp	x19, x20, [sp, #16]
 1a4:	ldp	x21, x22, [sp, #32]
 1a8:	ldp	x23, x24, [sp, #48]
 1ac:	ldp	x25, x26, [sp, #64]
 1b0:	ldp	x29, x30, [sp], #368
 1b4:	ret
 1b8:	mov	x1, x20
 1bc:	mov	w22, #0x19                  	// #25
 1c0:	mov	w0, #0xa                   	// #10
 1c4:	bl	0 <fputc>
 1c8:	b	140 <ss_list_requests+0x140>
 1cc:	mov	w22, #0x1b                  	// #27
 1d0:	b	140 <ss_list_requests+0x140>
 1d4:	adrp	x0, 0 <ss_list_requests>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <perror>
 1e0:	mov	x1, x26
 1e4:	mov	w0, #0x2                   	// #2
 1e8:	bl	0 <signal>
 1ec:	ldp	x19, x20, [sp, #16]
 1f0:	ldp	x25, x26, [sp, #64]
 1f4:	ldp	x29, x30, [sp], #368
 1f8:	ret

pager.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_safe_getenv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	bl	0 <getuid>
  14:	mov	w19, w0
  18:	bl	0 <geteuid>
  1c:	cmp	w19, w0
  20:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  24:	bl	0 <getgid>
  28:	mov	w19, w0
  2c:	bl	0 <getegid>
  30:	cmp	w19, w0
  34:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  38:	mov	w4, #0x0                   	// #0
  3c:	mov	w3, #0x0                   	// #0
  40:	mov	w2, #0x0                   	// #0
  44:	mov	w1, #0x0                   	// #0
  48:	mov	w0, #0x3                   	// #3
  4c:	bl	0 <prctl>
  50:	cbz	w0, 64 <ss_safe_getenv+0x64>
  54:	mov	x0, x20
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	b	0 <secure_getenv>
  64:	mov	x0, #0x0                   	// #0
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x29, x30, [sp], #32
  70:	ret
  74:	nop

0000000000000078 <ss_page_stdin>:
  78:	stp	x29, x30, [sp, #-256]!
  7c:	mov	x29, sp
  80:	stp	x19, x20, [sp, #16]
  84:	mov	w19, #0x3                   	// #3
  88:	str	x21, [sp, #32]
  8c:	nop
  90:	mov	w0, w19
  94:	add	w19, w19, #0x1
  98:	bl	0 <close>
  9c:	cmp	w19, #0x20
  a0:	b.ne	90 <ss_page_stdin+0x18>  // b.any
  a4:	mov	x1, #0x0                   	// #0
  a8:	mov	w0, #0x2                   	// #2
  ac:	bl	0 <signal>
  b0:	adrp	x19, 0 <_ss_pager_name>
  b4:	add	x2, sp, #0x80
  b8:	mov	x1, #0x0                   	// #0
  bc:	mov	w0, #0x0                   	// #0
  c0:	bl	0 <sigprocmask>
  c4:	mov	w1, #0x2                   	// #2
  c8:	add	x0, sp, #0x80
  cc:	bl	0 <sigdelset>
  d0:	add	x1, sp, #0x80
  d4:	mov	x2, #0x0                   	// #0
  d8:	mov	w0, #0x2                   	// #2
  dc:	bl	0 <sigprocmask>
  e0:	ldr	x1, [x19]
  e4:	cbz	x1, 188 <ss_page_stdin+0x110>
  e8:	mov	x2, #0x0                   	// #0
  ec:	mov	x0, x1
  f0:	bl	0 <execlp>
  f4:	bl	0 <__errno_location>
  f8:	mov	x21, x0
  fc:	nop
 100:	add	x1, sp, #0x30
 104:	mov	x2, #0x50                  	// #80
 108:	mov	w0, #0x0                   	// #0
 10c:	bl	0 <read>
 110:	cmp	w0, #0x0
 114:	b.le	180 <ss_page_stdin+0x108>
 118:	sxtw	x19, w0
 11c:	add	x20, sp, #0x30
 120:	mov	x2, x19
 124:	mov	x1, x20
 128:	mov	w0, #0x1                   	// #1
 12c:	bl	0 <write>
 130:	tbnz	x0, #63, 154 <ss_page_stdin+0xdc>
 134:	add	x20, x20, x0
 138:	subs	x19, x19, x0
 13c:	b.eq	100 <ss_page_stdin+0x88>  // b.none
 140:	mov	x2, x19
 144:	mov	x1, x20
 148:	mov	w0, #0x1                   	// #1
 14c:	bl	0 <write>
 150:	tbz	x0, #63, 134 <ss_page_stdin+0xbc>
 154:	ldr	w1, [x21]
 158:	cmp	w1, #0xb
 15c:	ccmp	w1, #0x4, #0x4, ne  // ne = any
 160:	b.eq	120 <ss_page_stdin+0xa8>  // b.none
 164:	add	x1, sp, #0x30
 168:	mov	x2, #0x50                  	// #80
 16c:	mov	w0, #0x0                   	// #0
 170:	bl	0 <read>
 174:	cmp	w0, #0x0
 178:	b.gt	118 <ss_page_stdin+0xa0>
 17c:	nop
 180:	ldr	w0, [x21]
 184:	bl	0 <exit>
 188:	adrp	x0, 0 <ss_safe_getenv>
 18c:	add	x0, x0, #0x0
 190:	bl	0 <ss_safe_getenv>
 194:	mov	x1, x0
 198:	cbz	x0, 1a4 <ss_page_stdin+0x12c>
 19c:	str	x0, [x19]
 1a0:	b	e8 <ss_page_stdin+0x70>
 1a4:	adrp	x0, 0 <ss_safe_getenv>
 1a8:	add	x0, x0, #0x0
 1ac:	mov	x1, x0
 1b0:	str	x0, [x19]
 1b4:	b	e8 <ss_page_stdin+0x70>

00000000000001b8 <ss_pager_create>:
 1b8:	stp	x29, x30, [sp, #-32]!
 1bc:	mov	x29, sp
 1c0:	add	x0, sp, #0x18
 1c4:	bl	0 <pipe>
 1c8:	cbnz	w0, 1f4 <ss_pager_create+0x3c>
 1cc:	bl	0 <fork>
 1d0:	cmn	w0, #0x1
 1d4:	b.eq	1f8 <ss_pager_create+0x40>  // b.none
 1d8:	cbnz	w0, 200 <ss_pager_create+0x48>
 1dc:	ldr	w0, [sp, #24]
 1e0:	mov	w1, #0x0                   	// #0
 1e4:	bl	0 <dup2>
 1e8:	cmn	w0, #0x1
 1ec:	b.eq	214 <ss_pager_create+0x5c>  // b.none
 1f0:	bl	78 <ss_page_stdin>
 1f4:	mov	w0, #0xffffffff            	// #-1
 1f8:	ldp	x29, x30, [sp], #32
 1fc:	ret
 200:	ldr	w0, [sp, #24]
 204:	bl	0 <close>
 208:	ldr	w0, [sp, #28]
 20c:	ldp	x29, x30, [sp], #32
 210:	ret
 214:	mov	w0, #0x1                   	// #1
 218:	bl	0 <exit>

requests.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_self_identify>:
   0:	adrp	x1, 0 <_ss_table>
   4:	adrp	x0, 0 <ss_self_identify>
   8:	add	x0, x0, #0x0
   c:	ldr	x1, [x1]
  10:	ldr	x2, [x1, w2, sxtw #3]
  14:	ldp	x1, x2, [x2]
  18:	b	0 <printf>
  1c:	nop

0000000000000020 <ss_subsystem_name>:
  20:	adrp	x0, 0 <_ss_table>
  24:	ldr	x0, [x0]
  28:	ldr	x0, [x0, w2, sxtw #3]
  2c:	ldr	x0, [x0]
  30:	b	0 <puts>
  34:	nop

0000000000000038 <ss_subsystem_version>:
  38:	adrp	x0, 0 <_ss_table>
  3c:	ldr	x0, [x0]
  40:	ldr	x0, [x0, w2, sxtw #3]
  44:	ldr	x0, [x0, #8]
  48:	b	0 <puts>
  4c:	nop

0000000000000050 <ss_unimplemented>:
  50:	mov	x1, #0x6d0b                	// #27915
  54:	mov	w0, w2
  58:	movk	x1, #0xb, lsl #16
  5c:	adrp	x2, 0 <ss_self_identify>
  60:	add	x2, x2, #0x0
  64:	b	0 <ss_perror>

data.o:     file format elf64-littleaarch64


get_readline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_release_readline>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0, #88]
  14:	cbz	x0, 28 <ss_release_readline+0x28>
  18:	stp	xzr, xzr, [x19, #104]
  1c:	stp	xzr, xzr, [x19, #120]
  20:	bl	0 <dlclose>
  24:	str	xzr, [x19, #88]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	nop

0000000000000038 <ss_get_readline>:
  38:	stp	x29, x30, [sp, #-48]!
  3c:	adrp	x1, 0 <_ss_table>
  40:	mov	x29, sp
  44:	ldr	x1, [x1]
  48:	stp	x21, x22, [sp, #32]
  4c:	ldr	x21, [x1, w0, sxtw #3]
  50:	ldr	x0, [x21, #88]
  54:	cbz	x0, 64 <ss_get_readline+0x2c>
  58:	ldp	x21, x22, [sp, #32]
  5c:	ldp	x29, x30, [sp], #48
  60:	ret
  64:	adrp	x0, 0 <ss_release_readline>
  68:	add	x0, x0, #0x0
  6c:	stp	x19, x20, [sp, #16]
  70:	bl	0 <ss_safe_getenv>
  74:	mov	x19, x0
  78:	cbz	x0, a4 <ss_get_readline+0x6c>
  7c:	ldrb	w1, [x0]
  80:	cbz	w1, 94 <ss_get_readline+0x5c>
  84:	adrp	x1, 0 <ss_release_readline>
  88:	add	x1, x1, #0x0
  8c:	bl	0 <strcmp>
  90:	cbnz	w0, 1f4 <ss_get_readline+0x1bc>
  94:	ldp	x19, x20, [sp, #16]
  98:	ldp	x21, x22, [sp, #32]
  9c:	ldp	x29, x30, [sp], #48
  a0:	ret
  a4:	adrp	x19, 0 <ss_release_readline>
  a8:	add	x19, x19, #0x0
  ac:	mov	x0, #0x8b                  	// #139
  b0:	bl	0 <malloc>
  b4:	mov	x22, x0
  b8:	cbz	x0, 94 <ss_get_readline+0x5c>
  bc:	mov	x1, x19
  c0:	mov	x20, x0
  c4:	bl	0 <strcpy>
  c8:	mov	x0, x20
  cc:	mov	w1, #0x3a                  	// #58
  d0:	bl	0 <strchr>
  d4:	mov	x19, x0
  d8:	cbz	x0, 104 <ss_get_readline+0xcc>
  dc:	nop
  e0:	strb	wzr, [x19], #1
  e4:	ldrb	w0, [x20]
  e8:	cbnz	w0, 134 <ss_get_readline+0xfc>
  ec:	mov	x20, x19
  f0:	mov	w1, #0x3a                  	// #58
  f4:	mov	x0, x20
  f8:	bl	0 <strchr>
  fc:	mov	x19, x0
 100:	cbnz	x0, e0 <ss_get_readline+0xa8>
 104:	ldrb	w0, [x20]
 108:	cbz	w0, 120 <ss_get_readline+0xe8>
 10c:	mov	x0, x20
 110:	mov	w1, #0x2                   	// #2
 114:	bl	0 <dlopen>
 118:	mov	x20, x0
 11c:	cbnz	x0, 148 <ss_get_readline+0x110>
 120:	mov	x0, x22
 124:	ldp	x19, x20, [sp, #16]
 128:	ldp	x21, x22, [sp, #32]
 12c:	ldp	x29, x30, [sp], #48
 130:	b	0 <free>
 134:	mov	x0, x20
 138:	mov	w1, #0x2                   	// #2
 13c:	bl	0 <dlopen>
 140:	mov	x20, x0
 144:	cbz	x0, ec <ss_get_readline+0xb4>
 148:	mov	x0, x22
 14c:	bl	0 <free>
 150:	str	x20, [x21, #88]
 154:	mov	x0, x20
 158:	adrp	x1, 0 <ss_release_readline>
 15c:	add	x1, x1, #0x0
 160:	bl	0 <dlsym>
 164:	str	x0, [x21, #104]
 168:	adrp	x1, 0 <ss_release_readline>
 16c:	mov	x0, x20
 170:	add	x1, x1, #0x0
 174:	bl	0 <dlsym>
 178:	str	x0, [x21, #112]
 17c:	adrp	x1, 0 <ss_release_readline>
 180:	mov	x0, x20
 184:	add	x1, x1, #0x0
 188:	bl	0 <dlsym>
 18c:	str	x0, [x21, #120]
 190:	adrp	x1, 0 <ss_release_readline>
 194:	mov	x0, x20
 198:	add	x1, x1, #0x0
 19c:	bl	0 <dlsym>
 1a0:	str	x0, [x21, #128]
 1a4:	adrp	x1, 0 <ss_release_readline>
 1a8:	mov	x0, x20
 1ac:	add	x1, x1, #0x0
 1b0:	bl	0 <dlsym>
 1b4:	cbz	x0, 1c0 <ss_get_readline+0x188>
 1b8:	ldr	x1, [x21]
 1bc:	str	x1, [x0]
 1c0:	adrp	x1, 0 <ss_release_readline>
 1c4:	mov	x0, x20
 1c8:	add	x1, x1, #0x0
 1cc:	bl	0 <dlsym>
 1d0:	cbz	x0, 1e0 <ss_get_readline+0x1a8>
 1d4:	adrp	x1, 0 <ss_rl_completion>
 1d8:	add	x1, x1, #0x0
 1dc:	str	x1, [x0]
 1e0:	adrp	x0, 0 <ss_release_readline>
 1e4:	add	x0, x0, #0x0
 1e8:	ldp	x19, x20, [sp, #16]
 1ec:	str	x0, [x21, #96]
 1f0:	b	58 <ss_get_readline+0x20>
 1f4:	mov	x0, x19
 1f8:	bl	0 <strlen>
 1fc:	add	x0, x0, #0x1
 200:	b	b0 <ss_get_readline+0x78>
