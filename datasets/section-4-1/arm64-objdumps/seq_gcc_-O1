
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fc8 <_init>:
 fc8:	stp	x29, x30, [sp, #-16]!
 fcc:	mov	x29, sp
 fd0:	bl	11f0 <call_weak_fn>
 fd4:	ldp	x29, x30, [sp], #16
 fd8:	ret

Disassembly of section .plt:

0000000000000fe0 <.plt>:
     fe0:	stp	x16, x30, [sp, #-16]!
     fe4:	adrp	x16, 14000 <__FRAME_END__+0xfe0c>
     fe8:	ldr	x17, [x16, #4088]
     fec:	add	x16, x16, #0xff8
     ff0:	br	x17
     ff4:	nop
     ff8:	nop
     ffc:	nop

0000000000001000 <memcpy@plt>:
    1000:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16]
    1008:	add	x16, x16, #0x0
    100c:	br	x17

0000000000001010 <all_digits@plt>:
    1010:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #8]
    1018:	add	x16, x16, #0x8
    101c:	br	x17

0000000000001020 <fputs@plt>:
    1020:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #16]
    1028:	add	x16, x16, #0x10
    102c:	br	x17

0000000000001030 <builtin_error@plt>:
    1030:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #24]
    1038:	add	x16, x16, #0x18
    103c:	br	x17

0000000000001040 <builtin_warning@plt>:
    1040:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #32]
    1048:	add	x16, x16, #0x20
    104c:	br	x17

0000000000001050 <__cxa_finalize@plt>:
    1050:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #40]
    1058:	add	x16, x16, #0x28
    105c:	br	x17

0000000000001060 <sprintf@plt>:
    1060:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #48]
    1068:	add	x16, x16, #0x30
    106c:	br	x17

0000000000001070 <snprintf@plt>:
    1070:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #56]
    1078:	add	x16, x16, #0x38
    107c:	br	x17

0000000000001080 <locale_decpoint@plt>:
    1080:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #64]
    1088:	add	x16, x16, #0x40
    108c:	br	x17

0000000000001090 <print_intseq@plt>:
    1090:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #72]
    1098:	add	x16, x16, #0x48
    109c:	br	x17

00000000000010a0 <builtin_help@plt>:
    10a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #80]
    10a8:	add	x16, x16, #0x50
    10ac:	br	x17

00000000000010b0 <xmalloc@plt>:
    10b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #88]
    10b8:	add	x16, x16, #0x58
    10bc:	br	x17

00000000000010c0 <builtin_usage@plt>:
    10c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #96]
    10c8:	add	x16, x16, #0x60
    10cc:	br	x17

00000000000010d0 <strerror@plt>:
    10d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #104]
    10d8:	add	x16, x16, #0x68
    10dc:	br	x17

00000000000010e0 <__gmon_start__@plt>:
    10e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #112]
    10e8:	add	x16, x16, #0x70
    10ec:	br	x17

00000000000010f0 <__ctype_b_loc@plt>:
    10f0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #120]
    10f8:	add	x16, x16, #0x78
    10fc:	br	x17

0000000000001100 <strtold@plt>:
    1100:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #128]
    1108:	add	x16, x16, #0x80
    110c:	br	x17

0000000000001110 <print_fltseq@plt>:
    1110:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #136]
    1118:	add	x16, x16, #0x88
    111c:	br	x17

0000000000001120 <free@plt>:
    1120:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #144]
    1128:	add	x16, x16, #0x90
    112c:	br	x17

0000000000001130 <internal_getopt@plt>:
    1130:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #152]
    1138:	add	x16, x16, #0x98
    113c:	br	x17

0000000000001140 <reset_internal_getopt@plt>:
    1140:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #160]
    1148:	add	x16, x16, #0xa0
    114c:	br	x17

0000000000001150 <strspn@plt>:
    1150:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #168]
    1158:	add	x16, x16, #0xa8
    115c:	br	x17

0000000000001160 <strchr@plt>:
    1160:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #176]
    1168:	add	x16, x16, #0xb0
    116c:	br	x17

0000000000001170 <sh_chkwrite@plt>:
    1170:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #184]
    1178:	add	x16, x16, #0xb8
    117c:	br	x17

0000000000001180 <strcpy@plt>:
    1180:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #192]
    1188:	add	x16, x16, #0xc0
    118c:	br	x17

0000000000001190 <termsig_handler@plt>:
    1190:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #200]
    1198:	add	x16, x16, #0xc8
    119c:	br	x17

00000000000011a0 <width_needed@plt>:
    11a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #208]
    11a8:	add	x16, x16, #0xd0
    11ac:	br	x17

00000000000011b0 <throw_to_top_level@plt>:
    11b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #216]
    11b8:	add	x16, x16, #0xd8
    11bc:	br	x17

00000000000011c0 <printf@plt>:
    11c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #224]
    11c8:	add	x16, x16, #0xe0
    11cc:	br	x17

00000000000011d0 <__errno_location@plt>:
    11d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11d4:	ldr	x17, [x16, #232]
    11d8:	add	x16, x16, #0xe8
    11dc:	br	x17

00000000000011e0 <sh_invalidnum@plt>:
    11e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11e4:	ldr	x17, [x16, #240]
    11e8:	add	x16, x16, #0xf0
    11ec:	br	x17

Disassembly of section .text:

00000000000011f0 <call_weak_fn>:
    11f0:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    11f4:	ldr	x0, [x0, #4032]
    11f8:	cbz	x0, 1200 <call_weak_fn+0x10>
    11fc:	b	10e0 <__gmon_start__@plt>
    1200:	ret

0000000000001204 <deregister_tm_clones>:
    1204:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1208:	add	x0, x0, #0x1b0
    120c:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1210:	add	x1, x1, #0x1b0
    1214:	cmp	x0, x1
    1218:	b.eq	1244 <deregister_tm_clones+0x40>  // b.none
    121c:	adrp	x1, 14000 <__FRAME_END__+0xfe0c>
    1220:	ldr	x1, [x1, #3992]
    1224:	cbz	x1, 1244 <deregister_tm_clones+0x40>
    1228:	stp	x29, x30, [sp, #-16]!
    122c:	mov	x29, sp
    1230:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1234:	add	x0, x0, #0x1b0
    1238:	blr	x1
    123c:	ldp	x29, x30, [sp], #16
    1240:	ret
    1244:	ret

0000000000001248 <register_tm_clones>:
    1248:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    124c:	add	x0, x0, #0x1b0
    1250:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1254:	add	x1, x1, #0x1b0
    1258:	sub	x0, x0, x1
    125c:	lsr	x1, x0, #63
    1260:	add	x0, x1, x0, asr #3
    1264:	cmp	xzr, x0, asr #1
    1268:	b.eq	1298 <register_tm_clones+0x50>  // b.none
    126c:	asr	x1, x0, #1
    1270:	adrp	x2, 14000 <__FRAME_END__+0xfe0c>
    1274:	ldr	x2, [x2, #4064]
    1278:	cbz	x2, 1298 <register_tm_clones+0x50>
    127c:	stp	x29, x30, [sp, #-16]!
    1280:	mov	x29, sp
    1284:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1288:	add	x0, x0, #0x1b0
    128c:	blr	x2
    1290:	ldp	x29, x30, [sp], #16
    1294:	ret
    1298:	ret

000000000000129c <__do_global_dtors_aux>:
    129c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    12a0:	ldrb	w0, [x0, #432]
    12a4:	cbnz	w0, 12e0 <__do_global_dtors_aux+0x44>
    12a8:	stp	x29, x30, [sp, #-16]!
    12ac:	mov	x29, sp
    12b0:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    12b4:	ldr	x0, [x0, #4000]
    12b8:	cbz	x0, 12c8 <__do_global_dtors_aux+0x2c>
    12bc:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    12c0:	ldr	x0, [x0, #248]
    12c4:	bl	1050 <__cxa_finalize@plt>
    12c8:	bl	1204 <deregister_tm_clones>
    12cc:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    12d0:	mov	w1, #0x1                   	// #1
    12d4:	strb	w1, [x0, #432]
    12d8:	ldp	x29, x30, [sp], #16
    12dc:	ret
    12e0:	ret

00000000000012e4 <frame_dummy>:
    12e4:	stp	x29, x30, [sp, #-16]!
    12e8:	mov	x29, sp
    12ec:	bl	1248 <register_tm_clones>
    12f0:	ldp	x29, x30, [sp], #16
    12f4:	ret

00000000000012f8 <getfloatmax>:
    12f8:	stp	x29, x30, [sp, #-64]!
    12fc:	mov	x29, sp
    1300:	stp	x19, x20, [sp, #16]
    1304:	mov	x20, x0
    1308:	bl	11d0 <__errno_location@plt>
    130c:	mov	x19, x0
    1310:	str	wzr, [x0]
    1314:	add	x1, sp, #0x38
    1318:	mov	x0, x20
    131c:	bl	1100 <strtold@plt>
    1320:	str	q0, [sp, #32]
    1324:	ldr	x0, [sp, #56]
    1328:	ldrb	w0, [x0]
    132c:	cbnz	w0, 1360 <getfloatmax+0x68>
    1330:	ldr	w0, [x19]
    1334:	cmp	w0, #0x22
    1338:	b.eq	1378 <getfloatmax+0x80>  // b.none
    133c:	movi	v1.2d, #0x0
    1340:	ldr	q0, [sp, #32]
    1344:	bl	2bc8 <__eqtf2>
    1348:	cbnz	w0, 1350 <getfloatmax+0x58>
    134c:	stp	xzr, xzr, [sp, #32]
    1350:	ldr	q0, [sp, #32]
    1354:	ldp	x19, x20, [sp, #16]
    1358:	ldp	x29, x30, [sp], #64
    135c:	ret
    1360:	mov	x0, x20
    1364:	bl	11e0 <sh_invalidnum@plt>
    1368:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    136c:	mov	w1, #0x1                   	// #1
    1370:	str	w1, [x0, #440]
    1374:	b	133c <getfloatmax+0x44>
    1378:	bl	10d0 <strerror@plt>
    137c:	mov	x2, x0
    1380:	mov	x1, x20
    1384:	adrp	x0, 3000 <__multf3+0x4>
    1388:	add	x0, x0, #0x970
    138c:	bl	1030 <builtin_error@plt>
    1390:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1394:	mov	w1, #0x1                   	// #1
    1398:	str	w1, [x0, #440]
    139c:	b	133c <getfloatmax+0x44>

00000000000013a0 <getprec>:
    13a0:	stp	x29, x30, [sp, #-48]!
    13a4:	mov	x29, sp
    13a8:	stp	x21, x22, [sp, #32]
    13ac:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    13b0:	ldrb	w1, [x1, #444]
    13b4:	bl	1160 <strchr@plt>
    13b8:	mov	w22, #0x0                   	// #0
    13bc:	cbz	x0, 13fc <getprec+0x5c>
    13c0:	stp	x19, x20, [sp, #16]
    13c4:	add	x21, x0, #0x1
    13c8:	mov	x20, #0x0                   	// #0
    13cc:	mov	w22, w20
    13d0:	ldrb	w19, [x21, x20]
    13d4:	cbz	w19, 13f8 <getprec+0x58>
    13d8:	bl	10f0 <__ctype_b_loc@plt>
    13dc:	add	x20, x20, #0x1
    13e0:	and	x19, x19, #0xff
    13e4:	ldr	x0, [x0]
    13e8:	ldrh	w0, [x0, x19, lsl #1]
    13ec:	tbnz	w0, #11, 13cc <getprec+0x2c>
    13f0:	ldp	x19, x20, [sp, #16]
    13f4:	b	13fc <getprec+0x5c>
    13f8:	ldp	x19, x20, [sp, #16]
    13fc:	mov	w0, w22
    1400:	ldp	x21, x22, [sp, #32]
    1404:	ldp	x29, x30, [sp], #48
    1408:	ret

000000000000140c <print_fltseq>:
    140c:	stp	x29, x30, [sp, #-128]!
    1410:	mov	x29, sp
    1414:	stp	x19, x20, [sp, #16]
    1418:	stp	x21, x22, [sp, #32]
    141c:	stp	x23, x24, [sp, #48]
    1420:	mov	x22, x0
    1424:	str	q0, [sp, #112]
    1428:	str	q1, [sp, #96]
    142c:	str	q2, [sp, #80]
    1430:	str	q0, [sp, #64]
    1434:	adrp	x20, 3000 <__multf3+0x4>
    1438:	add	x20, x20, #0xb58
    143c:	mov	w19, #0x0                   	// #0
    1440:	adrp	x24, 14000 <__FRAME_END__+0xfe0c>
    1444:	ldr	x23, [x24, #4048]
    1448:	adrp	x21, 14000 <__FRAME_END__+0xfe0c>
    144c:	ldr	x21, [x21, #4024]
    1450:	b	14a4 <print_fltseq+0x98>
    1454:	ldr	x0, [x24, #4048]
    1458:	ldr	w0, [x0]
    145c:	bl	1190 <termsig_handler@plt>
    1460:	b	14d4 <print_fltseq+0xc8>
    1464:	bl	11b0 <throw_to_top_level@plt>
    1468:	b	14dc <print_fltseq+0xd0>
    146c:	ldr	q0, [sp, #64]
    1470:	mov	x0, x22
    1474:	bl	11c0 <printf@plt>
    1478:	tbnz	w0, #31, 150c <print_fltseq+0x100>
    147c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1480:	ldr	x20, [x0, #448]
    1484:	add	w19, w19, #0x1
    1488:	mov	w0, w19
    148c:	bl	3750 <__floatsitf>
    1490:	ldr	q1, [sp, #80]
    1494:	bl	2ffc <__multf3>
    1498:	ldr	q1, [sp, #112]
    149c:	bl	1f18 <__addtf3>
    14a0:	str	q0, [sp, #64]
    14a4:	movi	v1.2d, #0x0
    14a8:	ldr	q0, [sp, #80]
    14ac:	bl	2cec <__getf2>
    14b0:	tbnz	w0, #31, 1528 <print_fltseq+0x11c>
    14b4:	ldr	q1, [sp, #96]
    14b8:	ldr	q0, [sp, #64]
    14bc:	bl	2e74 <__letf2>
    14c0:	cmp	w0, #0x0
    14c4:	cset	w1, le
    14c8:	cbz	w1, 1540 <print_fltseq+0x134>
    14cc:	ldr	w0, [x23]
    14d0:	cbnz	w0, 1454 <print_fltseq+0x48>
    14d4:	ldr	w0, [x21]
    14d8:	cbnz	w0, 1464 <print_fltseq+0x58>
    14dc:	ldrb	w0, [x20]
    14e0:	cbz	w0, 146c <print_fltseq+0x60>
    14e4:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    14e8:	ldr	x0, [x0, #4016]
    14ec:	ldr	x1, [x0]
    14f0:	mov	x0, x20
    14f4:	bl	1020 <fputs@plt>
    14f8:	cmn	w0, #0x1
    14fc:	b.ne	146c <print_fltseq+0x60>  // b.any
    1500:	mov	w0, #0x1                   	// #1
    1504:	bl	1170 <sh_chkwrite@plt>
    1508:	b	1514 <print_fltseq+0x108>
    150c:	mov	w0, #0x1                   	// #1
    1510:	bl	1170 <sh_chkwrite@plt>
    1514:	ldp	x19, x20, [sp, #16]
    1518:	ldp	x21, x22, [sp, #32]
    151c:	ldp	x23, x24, [sp, #48]
    1520:	ldp	x29, x30, [sp], #128
    1524:	ret
    1528:	ldr	q1, [sp, #96]
    152c:	ldr	q0, [sp, #64]
    1530:	bl	2cec <__getf2>
    1534:	mvn	w1, w0
    1538:	lsr	w1, w1, #31
    153c:	b	14c8 <print_fltseq+0xbc>
    1540:	cmp	w19, #0x0
    1544:	b.le	1568 <print_fltseq+0x15c>
    1548:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    154c:	ldr	x0, [x0, #4016]
    1550:	ldr	x1, [x0]
    1554:	adrp	x0, 3000 <__multf3+0x4>
    1558:	add	x0, x0, #0xe70
    155c:	bl	1020 <fputs@plt>
    1560:	cmn	w0, #0x1
    1564:	b.eq	1574 <print_fltseq+0x168>  // b.none
    1568:	mov	w0, #0x0                   	// #0
    156c:	bl	1170 <sh_chkwrite@plt>
    1570:	b	1514 <print_fltseq+0x108>
    1574:	mov	w0, #0x1                   	// #1
    1578:	bl	1170 <sh_chkwrite@plt>
    157c:	b	1514 <print_fltseq+0x108>

0000000000001580 <width_needed>:
    1580:	mov	x2, x0
    1584:	lsr	x0, x0, #63
    1588:	cmp	x2, #0x0
    158c:	cneg	x2, x2, lt  // lt = tstop
    1590:	mov	x3, #0x6666666666666666    	// #7378697629483820646
    1594:	movk	x3, #0x6667
    1598:	add	w0, w0, #0x1
    159c:	smulh	x1, x2, x3
    15a0:	asr	x1, x1, #2
    15a4:	subs	x2, x1, x2, asr #63
    15a8:	b.ne	1598 <width_needed+0x18>  // b.any
    15ac:	ret

00000000000015b0 <print_intseq>:
    15b0:	stp	x29, x30, [sp, #-128]!
    15b4:	mov	x29, sp
    15b8:	stp	x19, x20, [sp, #16]
    15bc:	stp	x21, x22, [sp, #32]
    15c0:	stp	x23, x24, [sp, #48]
    15c4:	stp	x25, x26, [sp, #64]
    15c8:	str	x27, [sp, #80]
    15cc:	mov	x22, x0
    15d0:	mov	x20, x1
    15d4:	mov	x24, x2
    15d8:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    15dc:	ldr	w0, [x0, #456]
    15e0:	cbnz	w0, 1608 <print_intseq+0x58>
    15e4:	mov	x19, x22
    15e8:	adrp	x21, 3000 <__multf3+0x4>
    15ec:	add	x21, x21, #0xb58
    15f0:	adrp	x27, 14000 <__FRAME_END__+0xfe0c>
    15f4:	ldr	x26, [x27, #4048]
    15f8:	adrp	x23, 14000 <__FRAME_END__+0xfe0c>
    15fc:	ldr	x23, [x23, #4024]
    1600:	add	x25, sp, #0x68
    1604:	b	16c8 <print_intseq+0x118>
    1608:	mov	x0, x22
    160c:	bl	11a0 <width_needed@plt>
    1610:	mov	w19, w0
    1614:	mov	x0, x20
    1618:	bl	11a0 <width_needed@plt>
    161c:	cmp	w19, w0
    1620:	csel	w3, w19, w0, ge  // ge = tcont
    1624:	adrp	x2, 3000 <__multf3+0x4>
    1628:	add	x2, x2, #0x988
    162c:	mov	x1, #0x14                  	// #20
    1630:	add	x0, sp, #0x68
    1634:	bl	1070 <snprintf@plt>
    1638:	b	15e4 <print_intseq+0x34>
    163c:	ldr	x0, [x27, #4048]
    1640:	ldr	w0, [x0]
    1644:	bl	1190 <termsig_handler@plt>
    1648:	b	168c <print_intseq+0xdc>
    164c:	bl	11b0 <throw_to_top_level@plt>
    1650:	b	1694 <print_intseq+0xe4>
    1654:	mov	w0, #0x1                   	// #1
    1658:	bl	1170 <sh_chkwrite@plt>
    165c:	ldp	x19, x20, [sp, #16]
    1660:	ldp	x21, x22, [sp, #32]
    1664:	ldp	x23, x24, [sp, #48]
    1668:	ldp	x25, x26, [sp, #64]
    166c:	ldr	x27, [sp, #80]
    1670:	ldp	x29, x30, [sp], #128
    1674:	ret
    1678:	cmp	x19, x20
    167c:	cset	w0, ge  // ge = tcont
    1680:	cbz	w0, 16dc <print_intseq+0x12c>
    1684:	ldr	w0, [x26]
    1688:	cbnz	w0, 163c <print_intseq+0x8c>
    168c:	ldr	w0, [x23]
    1690:	cbnz	w0, 164c <print_intseq+0x9c>
    1694:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1698:	ldr	w1, [x0, #456]
    169c:	adrp	x0, 3000 <__multf3+0x4>
    16a0:	add	x0, x0, #0x980
    16a4:	cmp	w1, #0x0
    16a8:	mov	x2, x19
    16ac:	mov	x1, x21
    16b0:	csel	x0, x25, x0, ne  // ne = any
    16b4:	bl	11c0 <printf@plt>
    16b8:	tbnz	w0, #31, 1654 <print_intseq+0xa4>
    16bc:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    16c0:	ldr	x21, [x0, #448]
    16c4:	add	x19, x19, x24
    16c8:	cmp	x22, x20
    16cc:	b.gt	1678 <print_intseq+0xc8>
    16d0:	cmp	x19, x20
    16d4:	cset	w0, le
    16d8:	b	1680 <print_intseq+0xd0>
    16dc:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    16e0:	ldr	x0, [x0, #4016]
    16e4:	ldr	x1, [x0]
    16e8:	adrp	x0, 3000 <__multf3+0x4>
    16ec:	add	x0, x0, #0xe70
    16f0:	bl	1020 <fputs@plt>
    16f4:	cmn	w0, #0x1
    16f8:	b.eq	1708 <print_intseq+0x158>  // b.none
    16fc:	mov	w0, #0x0                   	// #0
    1700:	bl	1170 <sh_chkwrite@plt>
    1704:	b	165c <print_intseq+0xac>
    1708:	mov	w0, #0x1                   	// #1
    170c:	bl	1170 <sh_chkwrite@plt>
    1710:	b	165c <print_intseq+0xac>

0000000000001714 <seq_builtin>:
    1714:	stp	x29, x30, [sp, #-128]!
    1718:	mov	x29, sp
    171c:	stp	x19, x20, [sp, #16]
    1720:	stp	x21, x22, [sp, #32]
    1724:	stp	x23, x24, [sp, #48]
    1728:	mov	x20, x0
    172c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1730:	add	x0, x0, #0x1b8
    1734:	str	wzr, [x0, #16]
    1738:	adrp	x1, 3000 <__multf3+0x4>
    173c:	add	x1, x1, #0x9b0
    1740:	str	x1, [x0, #8]
    1744:	bl	1140 <reset_internal_getopt@plt>
    1748:	mov	x23, #0x0                   	// #0
    174c:	adrp	x21, 14000 <__FRAME_END__+0xfe0c>
    1750:	ldr	x21, [x21, #4008]
    1754:	adrp	x22, 3000 <__multf3+0x4>
    1758:	add	x22, x22, #0x9b8
    175c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1760:	add	x24, x0, #0x1b8
    1764:	ldr	x19, [x21]
    1768:	cbz	x19, 17cc <seq_builtin+0xb8>
    176c:	ldr	x0, [x19, #8]
    1770:	cbz	x0, 1788 <seq_builtin+0x74>
    1774:	ldr	x0, [x0]
    1778:	cbz	x0, 1788 <seq_builtin+0x74>
    177c:	ldrb	w1, [x0]
    1780:	cmp	w1, #0x2d
    1784:	b.eq	17d8 <seq_builtin+0xc4>  // b.none
    1788:	mov	x1, x22
    178c:	mov	x0, x20
    1790:	bl	1130 <internal_getopt@plt>
    1794:	cmn	w0, #0x1
    1798:	b.eq	1850 <seq_builtin+0x13c>  // b.none
    179c:	cmp	w0, #0x73
    17a0:	b.eq	1814 <seq_builtin+0x100>  // b.none
    17a4:	cmp	w0, #0x73
    17a8:	b.gt	1800 <seq_builtin+0xec>
    17ac:	cmn	w0, #0x63
    17b0:	b.eq	1828 <seq_builtin+0x114>  // b.none
    17b4:	cmp	w0, #0x66
    17b8:	b.ne	1844 <seq_builtin+0x130>  // b.any
    17bc:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    17c0:	ldr	x0, [x0, #4040]
    17c4:	ldr	x23, [x0]
    17c8:	b	1764 <seq_builtin+0x50>
    17cc:	cbz	x20, 1788 <seq_builtin+0x74>
    17d0:	mov	x19, x20
    17d4:	b	176c <seq_builtin+0x58>
    17d8:	ldrb	w1, [x0, #1]
    17dc:	sub	w0, w1, #0x30
    17e0:	and	w0, w0, #0xff
    17e4:	cmp	w1, #0x2e
    17e8:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    17ec:	b.hi	1788 <seq_builtin+0x74>  // b.pmore
    17f0:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    17f4:	ldr	x0, [x0, #4056]
    17f8:	str	x19, [x0]
    17fc:	b	1860 <seq_builtin+0x14c>
    1800:	cmp	w0, #0x77
    1804:	b.ne	1844 <seq_builtin+0x130>  // b.any
    1808:	mov	w0, #0x1                   	// #1
    180c:	str	w0, [x24, #16]
    1810:	b	1764 <seq_builtin+0x50>
    1814:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    1818:	ldr	x0, [x0, #4040]
    181c:	ldr	x0, [x0]
    1820:	str	x0, [x24, #8]
    1824:	b	1764 <seq_builtin+0x50>
    1828:	bl	10a0 <builtin_help@plt>
    182c:	mov	w0, #0x102                 	// #258
    1830:	ldp	x19, x20, [sp, #16]
    1834:	ldp	x21, x22, [sp, #32]
    1838:	ldp	x23, x24, [sp, #48]
    183c:	ldp	x29, x30, [sp], #128
    1840:	ret
    1844:	bl	10c0 <builtin_usage@plt>
    1848:	mov	w0, #0x102                 	// #258
    184c:	b	1830 <seq_builtin+0x11c>
    1850:	adrp	x0, 14000 <__FRAME_END__+0xfe0c>
    1854:	ldr	x0, [x0, #4056]
    1858:	ldr	x19, [x0]
    185c:	cbz	x19, 190c <seq_builtin+0x1f8>
    1860:	ldr	x20, [x19]
    1864:	mov	w22, #0x1                   	// #1
    1868:	cbz	x20, 1ed8 <seq_builtin+0x7c4>
    186c:	add	w22, w22, #0x1
    1870:	mov	x0, x20
    1874:	ldr	x20, [x20]
    1878:	cbnz	x20, 186c <seq_builtin+0x158>
    187c:	cmp	w22, #0x3
    1880:	b.gt	1918 <seq_builtin+0x204>
    1884:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    1888:	str	wzr, [x24, #440]
    188c:	ldr	x0, [x0, #8]
    1890:	ldr	x21, [x0]
    1894:	mov	x0, x21
    1898:	bl	12f8 <getfloatmax>
    189c:	str	q0, [sp, #80]
    18a0:	ldr	w1, [x24, #440]
    18a4:	mov	w0, #0x1                   	// #1
    18a8:	cbnz	w1, 1830 <seq_builtin+0x11c>
    18ac:	adrp	x0, 3000 <__multf3+0x4>
    18b0:	add	x0, x0, #0xe50
    18b4:	ldr	q0, [x0]
    18b8:	str	q0, [sp, #96]
    18bc:	cmp	w22, #0x1
    18c0:	b.gt	1924 <seq_builtin+0x210>
    18c4:	cmp	w22, #0x3
    18c8:	b.eq	1948 <seq_builtin+0x234>  // b.none
    18cc:	ldr	q1, [sp, #80]
    18d0:	ldr	q0, [sp, #96]
    18d4:	bl	2e74 <__letf2>
    18d8:	cmp	w0, #0x0
    18dc:	b.le	1a2c <seq_builtin+0x318>
    18e0:	ldr	q1, [sp, #80]
    18e4:	ldr	q0, [sp, #96]
    18e8:	bl	2e74 <__letf2>
    18ec:	tbnz	w0, #31, 1a7c <seq_builtin+0x368>
    18f0:	str	x25, [sp, #64]
    18f4:	mov	x22, #0x0                   	// #0
    18f8:	adrp	x0, 3000 <__multf3+0x4>
    18fc:	add	x0, x0, #0xe60
    1900:	ldr	q0, [x0]
    1904:	str	q0, [sp, #112]
    1908:	b	19bc <seq_builtin+0x2a8>
    190c:	bl	10c0 <builtin_usage@plt>
    1910:	mov	w0, #0x1                   	// #1
    1914:	b	1830 <seq_builtin+0x11c>
    1918:	bl	10c0 <builtin_usage@plt>
    191c:	mov	w0, #0x1                   	// #1
    1920:	b	1830 <seq_builtin+0x11c>
    1924:	ldr	x0, [x19, #8]
    1928:	ldr	x20, [x0]
    192c:	mov	x0, x20
    1930:	bl	12f8 <getfloatmax>
    1934:	str	q0, [sp, #96]
    1938:	ldr	w1, [x24, #440]
    193c:	mov	w0, #0x1                   	// #1
    1940:	cbz	w1, 18c4 <seq_builtin+0x1b0>
    1944:	b	1830 <seq_builtin+0x11c>
    1948:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    194c:	str	wzr, [x24, #440]
    1950:	ldr	x0, [x19]
    1954:	ldr	x0, [x0, #8]
    1958:	ldr	x22, [x0]
    195c:	mov	x0, x22
    1960:	bl	12f8 <getfloatmax>
    1964:	str	q0, [sp, #112]
    1968:	ldr	w1, [x24, #440]
    196c:	mov	w0, #0x1                   	// #1
    1970:	cbnz	w1, 1830 <seq_builtin+0x11c>
    1974:	movi	v1.2d, #0x0
    1978:	bl	2bc8 <__eqtf2>
    197c:	cbz	w0, 19d0 <seq_builtin+0x2bc>
    1980:	movi	v1.2d, #0x0
    1984:	ldr	q0, [sp, #112]
    1988:	bl	2e74 <__letf2>
    198c:	tbnz	w0, #31, 1a08 <seq_builtin+0x2f4>
    1990:	movi	v1.2d, #0x0
    1994:	ldr	q0, [sp, #112]
    1998:	bl	2cec <__getf2>
    199c:	cmp	w0, #0x0
    19a0:	b.le	1a24 <seq_builtin+0x310>
    19a4:	ldr	q1, [sp, #80]
    19a8:	ldr	q0, [sp, #96]
    19ac:	bl	2cec <__getf2>
    19b0:	cmp	w0, #0x0
    19b4:	b.gt	1a44 <seq_builtin+0x330>
    19b8:	str	x25, [sp, #64]
    19bc:	mov	x1, #0x0                   	// #0
    19c0:	cbz	x23, 1e94 <seq_builtin+0x780>
    19c4:	mov	x2, #0x1                   	// #1
    19c8:	mov	x4, #0x2                   	// #2
    19cc:	b	1ac0 <seq_builtin+0x3ac>
    19d0:	ldr	q1, [sp, #80]
    19d4:	ldr	q0, [sp, #96]
    19d8:	bl	2e74 <__letf2>
    19dc:	adrp	x1, 3000 <__multf3+0x4>
    19e0:	add	x1, x1, #0x9a0
    19e4:	adrp	x2, 3000 <__multf3+0x4>
    19e8:	add	x2, x2, #0x998
    19ec:	cmp	w0, #0x0
    19f0:	csel	x1, x2, x1, lt  // lt = tstop
    19f4:	adrp	x0, 3000 <__multf3+0x4>
    19f8:	add	x0, x0, #0x9c0
    19fc:	bl	1030 <builtin_error@plt>
    1a00:	mov	w0, #0x1                   	// #1
    1a04:	b	1830 <seq_builtin+0x11c>
    1a08:	ldr	q1, [sp, #80]
    1a0c:	ldr	q0, [sp, #96]
    1a10:	bl	2e74 <__letf2>
    1a14:	tbz	w0, #31, 1990 <seq_builtin+0x27c>
    1a18:	adrp	x1, 3000 <__multf3+0x4>
    1a1c:	add	x1, x1, #0x998
    1a20:	b	1a68 <seq_builtin+0x354>
    1a24:	str	x25, [sp, #64]
    1a28:	b	19bc <seq_builtin+0x2a8>
    1a2c:	mov	x22, #0x0                   	// #0
    1a30:	adrp	x0, 3000 <__multf3+0x4>
    1a34:	add	x0, x0, #0xe50
    1a38:	ldr	q0, [x0]
    1a3c:	str	q0, [sp, #112]
    1a40:	b	19a4 <seq_builtin+0x290>
    1a44:	ldr	q1, [sp, #80]
    1a48:	ldr	q0, [sp, #96]
    1a4c:	bl	2e74 <__letf2>
    1a50:	adrp	x1, 3000 <__multf3+0x4>
    1a54:	add	x2, x1, #0x9a0
    1a58:	adrp	x1, 3000 <__multf3+0x4>
    1a5c:	add	x1, x1, #0x998
    1a60:	cmp	w0, #0x0
    1a64:	csel	x1, x1, x2, lt  // lt = tstop
    1a68:	adrp	x0, 3000 <__multf3+0x4>
    1a6c:	add	x0, x0, #0x9d0
    1a70:	bl	1030 <builtin_error@plt>
    1a74:	mov	w0, #0x1                   	// #1
    1a78:	b	1830 <seq_builtin+0x11c>
    1a7c:	adrp	x1, 3000 <__multf3+0x4>
    1a80:	add	x1, x1, #0x998
    1a84:	b	1a68 <seq_builtin+0x354>
    1a88:	mov	x1, x23
    1a8c:	adrp	x0, 3000 <__multf3+0x4>
    1a90:	add	x0, x0, #0x9e8
    1a94:	bl	1030 <builtin_error@plt>
    1a98:	mov	w0, #0x1                   	// #1
    1a9c:	ldr	x25, [sp, #64]
    1aa0:	b	1830 <seq_builtin+0x11c>
    1aa4:	add	x19, x1, #0x1
    1aa8:	add	x0, x23, x19
    1aac:	ldrb	w3, [x23, x19]
    1ab0:	cmp	w3, #0x25
    1ab4:	b.ne	1ad8 <seq_builtin+0x3c4>  // b.any
    1ab8:	mov	x0, x4
    1abc:	add	x1, x1, x0
    1ac0:	ldrb	w0, [x23, x1]
    1ac4:	cmp	w0, #0x25
    1ac8:	b.eq	1aa4 <seq_builtin+0x390>  // b.none
    1acc:	cbz	w0, 1a88 <seq_builtin+0x374>
    1ad0:	mov	x0, x2
    1ad4:	b	1abc <seq_builtin+0x3a8>
    1ad8:	adrp	x1, 3000 <__multf3+0x4>
    1adc:	add	x1, x1, #0xa08
    1ae0:	bl	1150 <strspn@plt>
    1ae4:	add	x19, x19, x0
    1ae8:	adrp	x1, 3000 <__multf3+0x4>
    1aec:	add	x1, x1, #0xa10
    1af0:	add	x0, x23, x19
    1af4:	bl	1150 <strspn@plt>
    1af8:	add	x19, x19, x0
    1afc:	ldrb	w0, [x23, x19]
    1b00:	cmp	w0, #0x2e
    1b04:	b.eq	1b58 <seq_builtin+0x444>  // b.none
    1b08:	ldrb	w0, [x23, x19]
    1b0c:	cmp	w0, #0x4c
    1b10:	cinc	x3, x19, eq  // eq = none
    1b14:	add	x24, x23, x3
    1b18:	ldrb	w2, [x23, x3]
    1b1c:	cbz	w2, 1b74 <seq_builtin+0x460>
    1b20:	sub	w0, w2, #0x41
    1b24:	and	w1, w0, #0xff
    1b28:	cmp	w1, #0x26
    1b2c:	b.hi	1b88 <seq_builtin+0x474>  // b.pmore
    1b30:	mov	x0, #0x1                   	// #1
    1b34:	lsl	x0, x0, x1
    1b38:	mov	x1, #0x71                  	// #113
    1b3c:	movk	x1, #0x71, lsl #32
    1b40:	tst	x0, x1
    1b44:	b.eq	1b88 <seq_builtin+0x474>  // b.none
    1b48:	add	x0, x3, #0x1
    1b4c:	mov	x2, #0x1                   	// #1
    1b50:	mov	x3, #0x2                   	// #2
    1b54:	b	1bb4 <seq_builtin+0x4a0>
    1b58:	add	x19, x19, #0x1
    1b5c:	adrp	x1, 3000 <__multf3+0x4>
    1b60:	add	x1, x1, #0xa10
    1b64:	add	x0, x23, x19
    1b68:	bl	1150 <strspn@plt>
    1b6c:	add	x19, x19, x0
    1b70:	b	1b08 <seq_builtin+0x3f4>
    1b74:	mov	x1, x23
    1b78:	adrp	x0, 3000 <__multf3+0x4>
    1b7c:	add	x0, x0, #0xa20
    1b80:	bl	1030 <builtin_error@plt>
    1b84:	b	1a98 <seq_builtin+0x384>
    1b88:	mov	x1, x23
    1b8c:	adrp	x0, 3000 <__multf3+0x4>
    1b90:	add	x0, x0, #0xa38
    1b94:	bl	1030 <builtin_error@plt>
    1b98:	b	1a98 <seq_builtin+0x384>
    1b9c:	add	x1, x23, x0
    1ba0:	ldrb	w1, [x1, #1]
    1ba4:	cmp	w1, #0x25
    1ba8:	b.ne	1bcc <seq_builtin+0x4b8>  // b.any
    1bac:	mov	x1, x3
    1bb0:	add	x0, x0, x1
    1bb4:	ldrb	w1, [x23, x0]
    1bb8:	cmp	w1, #0x25
    1bbc:	b.eq	1b9c <seq_builtin+0x488>  // b.none
    1bc0:	cbz	w1, 1be0 <seq_builtin+0x4cc>
    1bc4:	mov	x1, x2
    1bc8:	b	1bb0 <seq_builtin+0x49c>
    1bcc:	mov	x1, x23
    1bd0:	adrp	x0, 3000 <__multf3+0x4>
    1bd4:	add	x0, x0, #0xa60
    1bd8:	bl	1030 <builtin_error@plt>
    1bdc:	b	1a98 <seq_builtin+0x384>
    1be0:	add	x0, x0, #0x2
    1be4:	bl	10b0 <xmalloc@plt>
    1be8:	mov	x25, x0
    1bec:	mov	x2, x19
    1bf0:	mov	x1, x23
    1bf4:	bl	1000 <memcpy@plt>
    1bf8:	mov	w0, #0x4c                  	// #76
    1bfc:	strb	w0, [x25, x19]
    1c00:	add	x0, x19, #0x1
    1c04:	mov	x1, x24
    1c08:	add	x0, x25, x0
    1c0c:	bl	1180 <strcpy@plt>
    1c10:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1c14:	ldr	w0, [x0, #456]
    1c18:	cbnz	w0, 1c64 <seq_builtin+0x550>
    1c1c:	cbz	x21, 1e68 <seq_builtin+0x754>
    1c20:	mov	x0, x21
    1c24:	bl	1010 <all_digits@plt>
    1c28:	cbnz	w0, 1c7c <seq_builtin+0x568>
    1c2c:	bl	1080 <locale_decpoint@plt>
    1c30:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1c34:	strb	w0, [x1, #444]
    1c38:	mov	w19, #0x1                   	// #1
    1c3c:	ldr	q2, [sp, #112]
    1c40:	ldr	q1, [sp, #80]
    1c44:	ldr	q0, [sp, #96]
    1c48:	mov	x0, x25
    1c4c:	bl	1110 <print_fltseq@plt>
    1c50:	cbnz	w19, 1e88 <seq_builtin+0x774>
    1c54:	mov	w0, #0x0                   	// #0
    1c58:	bl	1170 <sh_chkwrite@plt>
    1c5c:	ldr	x25, [sp, #64]
    1c60:	b	1830 <seq_builtin+0x11c>
    1c64:	adrp	x0, 3000 <__multf3+0x4>
    1c68:	add	x0, x0, #0xa88
    1c6c:	bl	1040 <builtin_warning@plt>
    1c70:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1c74:	str	wzr, [x0, #456]
    1c78:	b	1c1c <seq_builtin+0x508>
    1c7c:	mov	w19, #0x1                   	// #1
    1c80:	cbz	x20, 1c90 <seq_builtin+0x57c>
    1c84:	mov	x0, x20
    1c88:	bl	1010 <all_digits@plt>
    1c8c:	cbz	w0, 1ce8 <seq_builtin+0x5d4>
    1c90:	cbz	x22, 1ca0 <seq_builtin+0x58c>
    1c94:	mov	x0, x22
    1c98:	bl	1010 <all_digits@plt>
    1c9c:	cbz	w0, 1ce8 <seq_builtin+0x5d4>
    1ca0:	cbz	x25, 1cb4 <seq_builtin+0x5a0>
    1ca4:	bl	1080 <locale_decpoint@plt>
    1ca8:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1cac:	strb	w0, [x1, #444]
    1cb0:	b	1c3c <seq_builtin+0x528>
    1cb4:	ldr	q0, [sp, #112]
    1cb8:	bl	37ac <__fixtfdi>
    1cbc:	mov	x20, x0
    1cc0:	ldr	q0, [sp, #80]
    1cc4:	bl	37ac <__fixtfdi>
    1cc8:	mov	x19, x0
    1ccc:	ldr	q0, [sp, #96]
    1cd0:	bl	37ac <__fixtfdi>
    1cd4:	mov	x2, x20
    1cd8:	mov	x1, x19
    1cdc:	bl	1090 <print_intseq@plt>
    1ce0:	ldr	x25, [sp, #64]
    1ce4:	b	1830 <seq_builtin+0x11c>
    1ce8:	bl	1080 <locale_decpoint@plt>
    1cec:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1cf0:	strb	w0, [x1, #444]
    1cf4:	cbnz	x25, 1c3c <seq_builtin+0x528>
    1cf8:	b	1ec0 <seq_builtin+0x7ac>
    1cfc:	adrp	x23, 3000 <__multf3+0x4>
    1d00:	add	x23, x23, #0x9a8
    1d04:	adrp	x21, 15000 <memcpy@GLIBC_2.17>
    1d08:	add	x21, x21, #0x1b8
    1d0c:	add	x21, x21, #0x18
    1d10:	ldr	q0, [sp, #112]
    1d14:	mov	x2, x23
    1d18:	mov	x1, #0x1c                  	// #28
    1d1c:	mov	x0, x21
    1d20:	bl	1070 <snprintf@plt>
    1d24:	mov	x0, x21
    1d28:	bl	13a0 <getprec>
    1d2c:	mov	w20, w0
    1d30:	ldr	q0, [sp, #96]
    1d34:	mov	x2, x23
    1d38:	mov	x1, #0x1c                  	// #28
    1d3c:	mov	x0, x21
    1d40:	bl	1070 <snprintf@plt>
    1d44:	mov	w24, w0
    1d48:	mov	x0, x21
    1d4c:	bl	13a0 <getprec>
    1d50:	mov	w22, w0
    1d54:	cmp	w20, w0
    1d58:	csel	w20, w20, w0, ge  // ge = tcont
    1d5c:	ldr	q0, [sp, #80]
    1d60:	mov	x2, x23
    1d64:	mov	x1, #0x1c                  	// #28
    1d68:	mov	x0, x21
    1d6c:	bl	1070 <snprintf@plt>
    1d70:	mov	w23, w0
    1d74:	mov	x0, x21
    1d78:	bl	13a0 <getprec>
    1d7c:	mov	w1, w0
    1d80:	sub	w0, w20, w22
    1d84:	add	w0, w0, w24
    1d88:	sub	w2, w20, w1
    1d8c:	add	w2, w2, w23
    1d90:	cmp	w1, #0x0
    1d94:	ccmp	w20, #0x0, #0x0, ne  // ne = any
    1d98:	b.ne	1dd8 <seq_builtin+0x6c4>  // b.any
    1d9c:	sub	w2, w2, #0x1
    1da0:	cmp	w0, w2
    1da4:	csel	w2, w0, w2, ge  // ge = tcont
    1da8:	cbz	w2, 1e04 <seq_builtin+0x6f0>
    1dac:	adrp	x25, 15000 <memcpy@GLIBC_2.17>
    1db0:	add	x25, x25, #0x1b8
    1db4:	add	x25, x25, #0x18
    1db8:	adrp	x4, 3000 <__multf3+0x4>
    1dbc:	add	x4, x4, #0xab8
    1dc0:	mov	w3, w20
    1dc4:	adrp	x1, 3000 <__multf3+0x4>
    1dc8:	add	x1, x1, #0xac0
    1dcc:	mov	x0, x25
    1dd0:	bl	1060 <sprintf@plt>
    1dd4:	b	1c3c <seq_builtin+0x528>
    1dd8:	cmp	w20, #0x0
    1ddc:	cset	w3, ne  // ne = any
    1de0:	cmp	w1, #0x0
    1de4:	csel	w1, w3, wzr, eq  // eq = none
    1de8:	cbz	w1, 1df4 <seq_builtin+0x6e0>
    1dec:	add	w2, w2, #0x1
    1df0:	mov	w3, w1
    1df4:	cmp	w22, #0x0
    1df8:	ccmp	w3, #0x0, #0x4, eq  // eq = none
    1dfc:	cinc	w0, w0, ne  // ne = any
    1e00:	b	1da0 <seq_builtin+0x68c>
    1e04:	adrp	x25, 15000 <memcpy@GLIBC_2.17>
    1e08:	add	x25, x25, #0x1b8
    1e0c:	add	x25, x25, #0x18
    1e10:	adrp	x3, 3000 <__multf3+0x4>
    1e14:	add	x3, x3, #0xab8
    1e18:	mov	w2, w20
    1e1c:	adrp	x1, 3000 <__multf3+0x4>
    1e20:	add	x1, x1, #0xad0
    1e24:	mov	x0, x25
    1e28:	bl	1060 <sprintf@plt>
    1e2c:	b	1c3c <seq_builtin+0x528>
    1e30:	bl	1080 <locale_decpoint@plt>
    1e34:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1e38:	add	x1, x1, #0x1b8
    1e3c:	strb	w0, [x1, #4]
    1e40:	ldr	w0, [x1, #16]
    1e44:	mov	w19, #0x0                   	// #0
    1e48:	cbnz	w0, 1cfc <seq_builtin+0x5e8>
    1e4c:	ldr	q2, [sp, #112]
    1e50:	ldr	q1, [sp, #80]
    1e54:	ldr	q0, [sp, #96]
    1e58:	adrp	x0, 3000 <__multf3+0x4>
    1e5c:	add	x0, x0, #0x9a8
    1e60:	bl	1110 <print_fltseq@plt>
    1e64:	b	1c54 <seq_builtin+0x540>
    1e68:	bl	1080 <locale_decpoint@plt>
    1e6c:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1e70:	strb	w0, [x1, #444]
    1e74:	ldr	q2, [sp, #112]
    1e78:	ldr	q1, [sp, #80]
    1e7c:	ldr	q0, [sp, #96]
    1e80:	mov	x0, x25
    1e84:	bl	1110 <print_fltseq@plt>
    1e88:	mov	x0, x25
    1e8c:	bl	1120 <free@plt>
    1e90:	b	1c54 <seq_builtin+0x540>
    1e94:	cbz	x21, 1e30 <seq_builtin+0x71c>
    1e98:	mov	x0, x21
    1e9c:	bl	1010 <all_digits@plt>
    1ea0:	mov	w19, w0
    1ea4:	cbz	w0, 1eb4 <seq_builtin+0x7a0>
    1ea8:	mov	x25, x23
    1eac:	mov	w19, #0x0                   	// #0
    1eb0:	b	1c80 <seq_builtin+0x56c>
    1eb4:	bl	1080 <locale_decpoint@plt>
    1eb8:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1ebc:	strb	w0, [x1, #444]
    1ec0:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1ec4:	ldr	w0, [x0, #456]
    1ec8:	cbnz	w0, 1cfc <seq_builtin+0x5e8>
    1ecc:	adrp	x25, 3000 <__multf3+0x4>
    1ed0:	add	x25, x25, #0x9a8
    1ed4:	b	1c3c <seq_builtin+0x528>
    1ed8:	adrp	x22, 15000 <memcpy@GLIBC_2.17>
    1edc:	str	wzr, [x22, #440]
    1ee0:	ldr	x0, [x19, #8]
    1ee4:	ldr	x21, [x0]
    1ee8:	mov	x0, x21
    1eec:	bl	12f8 <getfloatmax>
    1ef0:	str	q0, [sp, #80]
    1ef4:	ldr	w1, [x22, #440]
    1ef8:	mov	w0, #0x1                   	// #1
    1efc:	cbnz	w1, 1830 <seq_builtin+0x11c>
    1f00:	mov	w22, w0
    1f04:	adrp	x0, 3000 <__multf3+0x4>
    1f08:	add	x0, x0, #0xe50
    1f0c:	ldr	q0, [x0]
    1f10:	str	q0, [sp, #96]
    1f14:	b	18c4 <seq_builtin+0x1b0>

0000000000001f18 <__addtf3>:
    1f18:	stp	x29, x30, [sp, #-32]!
    1f1c:	mov	x29, sp
    1f20:	str	q0, [sp, #16]
    1f24:	ldr	x6, [sp, #16]
    1f28:	ldr	x4, [sp, #24]
    1f2c:	str	q1, [sp, #16]
    1f30:	ldr	x7, [sp, #16]
    1f34:	ldr	x0, [sp, #24]
    1f38:	mrs	x11, fpcr
    1f3c:	ubfx	x5, x4, #48, #15
    1f40:	mov	x9, x5
    1f44:	lsr	x10, x4, #63
    1f48:	ubfiz	x1, x4, #3, #48
    1f4c:	orr	x1, x1, x6, lsr #61
    1f50:	lsl	x3, x6, #3
    1f54:	ubfx	x8, x0, #48, #15
    1f58:	mov	x13, x8
    1f5c:	lsr	x14, x0, #63
    1f60:	ubfiz	x0, x0, #3, #48
    1f64:	orr	x2, x0, x7, lsr #61
    1f68:	lsl	x12, x7, #3
    1f6c:	cmp	x14, x4, lsr #63
    1f70:	b.eq	1fb8 <__addtf3+0xa0>  // b.none
    1f74:	sub	w0, w5, w8
    1f78:	cmp	w0, #0x0
    1f7c:	b.le	2520 <__addtf3+0x608>
    1f80:	cbnz	x8, 2410 <__addtf3+0x4f8>
    1f84:	orr	x4, x2, x12
    1f88:	cbz	x4, 23d8 <__addtf3+0x4c0>
    1f8c:	subs	w0, w0, #0x1
    1f90:	b.eq	2400 <__addtf3+0x4e8>  // b.none
    1f94:	mov	x4, #0x7fff                	// #32767
    1f98:	cmp	x5, x4
    1f9c:	b.ne	2420 <__addtf3+0x508>  // b.any
    1fa0:	orr	x0, x1, x3
    1fa4:	cbz	x0, 2b20 <__addtf3+0xc08>
    1fa8:	lsr	x0, x1, #50
    1fac:	eor	x0, x0, #0x1
    1fb0:	and	w0, w0, #0x1
    1fb4:	b	29cc <__addtf3+0xab4>
    1fb8:	sub	w0, w5, w8
    1fbc:	cmp	w0, #0x0
    1fc0:	b.le	20fc <__addtf3+0x1e4>
    1fc4:	cbnz	x8, 2030 <__addtf3+0x118>
    1fc8:	orr	x4, x2, x12
    1fcc:	cbz	x4, 1ffc <__addtf3+0xe4>
    1fd0:	subs	w0, w0, #0x1
    1fd4:	b.eq	2024 <__addtf3+0x10c>  // b.none
    1fd8:	mov	x4, #0x7fff                	// #32767
    1fdc:	cmp	x5, x4
    1fe0:	b.ne	2040 <__addtf3+0x128>  // b.any
    1fe4:	orr	x0, x1, x3
    1fe8:	cbz	x0, 2a6c <__addtf3+0xb54>
    1fec:	lsr	x0, x1, #50
    1ff0:	eor	x0, x0, #0x1
    1ff4:	and	w0, w0, #0x1
    1ff8:	b	29cc <__addtf3+0xab4>
    1ffc:	mov	x4, x3
    2000:	mov	x0, #0x7fff                	// #32767
    2004:	cmp	x5, x0
    2008:	b.ne	2890 <__addtf3+0x978>  // b.any
    200c:	orr	x0, x1, x3
    2010:	cbz	x0, 2a5c <__addtf3+0xb44>
    2014:	lsr	x0, x1, #50
    2018:	eor	x0, x0, #0x1
    201c:	and	w0, w0, #0x1
    2020:	b	29cc <__addtf3+0xab4>
    2024:	adds	x4, x3, x12
    2028:	adc	x1, x2, x1
    202c:	b	2080 <__addtf3+0x168>
    2030:	orr	x2, x2, #0x8000000000000
    2034:	mov	x4, #0x7fff                	// #32767
    2038:	cmp	x5, x4
    203c:	b.eq	20b0 <__addtf3+0x198>  // b.none
    2040:	cmp	w0, #0x74
    2044:	b.gt	2a18 <__addtf3+0xb00>
    2048:	cmp	w0, #0x3f
    204c:	b.gt	20c8 <__addtf3+0x1b0>
    2050:	mov	w5, #0x40                  	// #64
    2054:	sub	w5, w5, w0
    2058:	lsl	x4, x2, x5
    205c:	lsr	x6, x12, x0
    2060:	orr	x4, x4, x6
    2064:	lsl	x5, x12, x5
    2068:	cmp	x5, #0x0
    206c:	cset	x5, ne  // ne = any
    2070:	orr	x4, x4, x5
    2074:	lsr	x0, x2, x0
    2078:	adds	x4, x4, x3
    207c:	adc	x1, x0, x1
    2080:	tbz	x1, #51, 2890 <__addtf3+0x978>
    2084:	add	x9, x9, #0x1
    2088:	mov	x0, #0x7fff                	// #32767
    208c:	cmp	x9, x0
    2090:	b.eq	23a0 <__addtf3+0x488>  // b.none
    2094:	and	x0, x1, #0xfff7ffffffffffff
    2098:	and	x3, x4, #0x1
    209c:	orr	x3, x3, x4, lsr #1
    20a0:	orr	x3, x3, x1, lsl #63
    20a4:	lsr	x1, x0, #1
    20a8:	mov	w0, #0x0                   	// #0
    20ac:	b	29cc <__addtf3+0xab4>
    20b0:	orr	x0, x1, x3
    20b4:	cbz	x0, 2a7c <__addtf3+0xb64>
    20b8:	lsr	x0, x1, #50
    20bc:	eor	x0, x0, #0x1
    20c0:	and	w0, w0, #0x1
    20c4:	b	29cc <__addtf3+0xab4>
    20c8:	sub	w4, w0, #0x40
    20cc:	lsr	x4, x2, x4
    20d0:	mov	w5, #0x80                  	// #128
    20d4:	sub	w5, w5, w0
    20d8:	lsl	x2, x2, x5
    20dc:	cmp	w0, #0x40
    20e0:	csel	x0, x2, xzr, ne  // ne = any
    20e4:	orr	x12, x0, x12
    20e8:	cmp	x12, #0x0
    20ec:	cset	x0, ne  // ne = any
    20f0:	orr	x4, x4, x0
    20f4:	mov	x0, #0x0                   	// #0
    20f8:	b	2078 <__addtf3+0x160>
    20fc:	tbnz	w0, #31, 2140 <__addtf3+0x228>
    2100:	add	x0, x5, #0x1
    2104:	tst	x0, #0x7ffe
    2108:	b.ne	2340 <__addtf3+0x428>  // b.any
    210c:	cbnz	x5, 228c <__addtf3+0x374>
    2110:	orr	x0, x1, x3
    2114:	cbz	x0, 2a0c <__addtf3+0xaf4>
    2118:	orr	x0, x2, x12
    211c:	cbz	x0, 2b80 <__addtf3+0xc68>
    2120:	adds	x4, x3, x12
    2124:	adc	x1, x2, x1
    2128:	tbz	x1, #51, 2894 <__addtf3+0x97c>
    212c:	and	x1, x1, #0xfff7ffffffffffff
    2130:	mov	x3, x4
    2134:	mov	x9, #0x1                   	// #1
    2138:	mov	w0, #0x0                   	// #0
    213c:	b	29cc <__addtf3+0xab4>
    2140:	cbnz	x5, 21d8 <__addtf3+0x2c0>
    2144:	orr	x4, x1, x3
    2148:	cbz	x4, 2188 <__addtf3+0x270>
    214c:	cmn	w0, #0x1
    2150:	b.eq	21c8 <__addtf3+0x2b0>  // b.none
    2154:	mvn	w0, w0
    2158:	mov	x4, #0x7fff                	// #32767
    215c:	cmp	x8, x4
    2160:	b.ne	21ec <__addtf3+0x2d4>  // b.any
    2164:	orr	x3, x2, x12
    2168:	cbz	x3, 2a98 <__addtf3+0xb80>
    216c:	lsr	x0, x2, #50
    2170:	eor	x0, x0, #0x1
    2174:	and	w0, w0, #0x1
    2178:	mov	x1, x2
    217c:	mov	x3, x12
    2180:	mov	x9, x8
    2184:	b	29cc <__addtf3+0xab4>
    2188:	mov	x0, #0x7fff                	// #32767
    218c:	cmp	x8, x0
    2190:	b.eq	21a4 <__addtf3+0x28c>  // b.none
    2194:	mov	x1, x2
    2198:	mov	x4, x12
    219c:	mov	x9, x8
    21a0:	b	2890 <__addtf3+0x978>
    21a4:	orr	x3, x2, x12
    21a8:	cbz	x3, 2a8c <__addtf3+0xb74>
    21ac:	lsr	x0, x2, #50
    21b0:	eor	x0, x0, #0x1
    21b4:	and	w0, w0, #0x1
    21b8:	mov	x1, x2
    21bc:	mov	x3, x12
    21c0:	mov	x9, x8
    21c4:	b	29cc <__addtf3+0xab4>
    21c8:	adds	x4, x3, x12
    21cc:	adc	x1, x2, x1
    21d0:	mov	x9, x8
    21d4:	b	2080 <__addtf3+0x168>
    21d8:	neg	w0, w0
    21dc:	orr	x1, x1, #0x8000000000000
    21e0:	mov	x4, #0x7fff                	// #32767
    21e4:	cmp	x8, x4
    21e8:	b.eq	2234 <__addtf3+0x31c>  // b.none
    21ec:	cmp	w0, #0x74
    21f0:	b.gt	2a24 <__addtf3+0xb0c>
    21f4:	cmp	w0, #0x3f
    21f8:	b.gt	2258 <__addtf3+0x340>
    21fc:	mov	w5, #0x40                  	// #64
    2200:	sub	w5, w5, w0
    2204:	lsl	x4, x1, x5
    2208:	lsr	x6, x3, x0
    220c:	orr	x4, x4, x6
    2210:	lsl	x3, x3, x5
    2214:	cmp	x3, #0x0
    2218:	cset	x3, ne  // ne = any
    221c:	orr	x4, x4, x3
    2220:	lsr	x1, x1, x0
    2224:	adds	x4, x4, x12
    2228:	adc	x1, x1, x2
    222c:	mov	x9, x13
    2230:	b	2080 <__addtf3+0x168>
    2234:	orr	x3, x2, x12
    2238:	cbz	x3, 2aa4 <__addtf3+0xb8c>
    223c:	lsr	x0, x2, #50
    2240:	eor	x0, x0, #0x1
    2244:	and	w0, w0, #0x1
    2248:	mov	x1, x2
    224c:	mov	x3, x12
    2250:	mov	x9, x8
    2254:	b	29cc <__addtf3+0xab4>
    2258:	sub	w4, w0, #0x40
    225c:	lsr	x4, x1, x4
    2260:	mov	w5, #0x80                  	// #128
    2264:	sub	w5, w5, w0
    2268:	lsl	x1, x1, x5
    226c:	cmp	w0, #0x40
    2270:	csel	x0, x1, xzr, ne  // ne = any
    2274:	orr	x3, x0, x3
    2278:	cmp	x3, #0x0
    227c:	cset	x0, ne  // ne = any
    2280:	orr	x4, x4, x0
    2284:	mov	x1, #0x0                   	// #0
    2288:	b	2224 <__addtf3+0x30c>
    228c:	mov	x0, #0x7fff                	// #32767
    2290:	cmp	x5, x0
    2294:	b.eq	22f0 <__addtf3+0x3d8>  // b.none
    2298:	mov	w0, #0x0                   	// #0
    229c:	mov	x4, #0x7fff                	// #32767
    22a0:	cmp	x8, x4
    22a4:	b.eq	2310 <__addtf3+0x3f8>  // b.none
    22a8:	orr	x4, x1, x3
    22ac:	cbz	x4, 29fc <__addtf3+0xae4>
    22b0:	orr	x12, x2, x12
    22b4:	mov	x9, #0x7fff                	// #32767
    22b8:	cbz	x12, 29cc <__addtf3+0xab4>
    22bc:	bfi	x6, x1, #61, #3
    22c0:	lsr	x3, x1, #3
    22c4:	tbz	x1, #50, 22e0 <__addtf3+0x3c8>
    22c8:	lsr	x1, x2, #3
    22cc:	tbnz	x2, #50, 22e0 <__addtf3+0x3c8>
    22d0:	mov	x6, x7
    22d4:	bfi	x6, x2, #61, #3
    22d8:	mov	x3, x1
    22dc:	mov	x10, x14
    22e0:	extr	x1, x3, x6, #61
    22e4:	lsl	x3, x6, #3
    22e8:	mov	x9, #0x7fff                	// #32767
    22ec:	b	29cc <__addtf3+0xab4>
    22f0:	orr	x0, x1, x3
    22f4:	cbz	x0, 2bac <__addtf3+0xc94>
    22f8:	lsr	x0, x1, #50
    22fc:	eor	x0, x0, #0x1
    2300:	and	w0, w0, #0x1
    2304:	mov	x4, #0x7fff                	// #32767
    2308:	cmp	x8, x4
    230c:	b.ne	22b0 <__addtf3+0x398>  // b.any
    2310:	orr	x4, x2, x12
    2314:	cbz	x4, 22a8 <__addtf3+0x390>
    2318:	tst	x2, #0x4000000000000
    231c:	csinc	w0, w0, wzr, ne  // ne = any
    2320:	orr	x3, x1, x3
    2324:	cbnz	x3, 22bc <__addtf3+0x3a4>
    2328:	mov	x1, x2
    232c:	mov	x3, x12
    2330:	mov	x9, #0x7fff                	// #32767
    2334:	b	29cc <__addtf3+0xab4>
    2338:	mov	w0, #0x0                   	// #0
    233c:	b	2310 <__addtf3+0x3f8>
    2340:	mov	x4, #0x7fff                	// #32767
    2344:	cmp	x0, x4
    2348:	b.eq	2368 <__addtf3+0x450>  // b.none
    234c:	adds	x3, x3, x12
    2350:	adc	x1, x2, x1
    2354:	extr	x3, x1, x3, #1
    2358:	lsr	x1, x1, #1
    235c:	mov	x9, x0
    2360:	mov	w0, #0x0                   	// #0
    2364:	b	29cc <__addtf3+0xab4>
    2368:	ands	x3, x11, #0xc00000
    236c:	b.eq	2ab0 <__addtf3+0xb98>  // b.none
    2370:	cmp	x3, #0x400, lsl #12
    2374:	ccmp	x10, #0x0, #0x0, eq  // eq = none
    2378:	b.eq	2abc <__addtf3+0xba4>  // b.none
    237c:	cmp	x3, #0x800, lsl #12
    2380:	ccmp	x10, #0x0, #0x4, eq  // eq = none
    2384:	b.ne	2ad0 <__addtf3+0xbb8>  // b.any
    2388:	mov	w4, #0x0                   	// #0
    238c:	mov	x1, #0xffffffffffffffff    	// #-1
    2390:	mov	x3, x1
    2394:	mov	x9, #0x7ffe                	// #32766
    2398:	mov	w0, #0x14                  	// #20
    239c:	b	29d8 <__addtf3+0xac0>
    23a0:	ands	x3, x11, #0xc00000
    23a4:	b.eq	2ae0 <__addtf3+0xbc8>  // b.none
    23a8:	cmp	x3, #0x400, lsl #12
    23ac:	ccmp	x10, #0x0, #0x0, eq  // eq = none
    23b0:	b.eq	2aec <__addtf3+0xbd4>  // b.none
    23b4:	cmp	x3, #0x800, lsl #12
    23b8:	ccmp	x10, #0x0, #0x4, eq  // eq = none
    23bc:	b.ne	2b00 <__addtf3+0xbe8>  // b.any
    23c0:	mov	w4, #0x0                   	// #0
    23c4:	mov	x1, #0xffffffffffffffff    	// #-1
    23c8:	mov	x3, x1
    23cc:	mov	x9, #0x7ffe                	// #32766
    23d0:	mov	w0, #0x14                  	// #20
    23d4:	b	29d8 <__addtf3+0xac0>
    23d8:	mov	x4, x3
    23dc:	mov	x0, #0x7fff                	// #32767
    23e0:	cmp	x5, x0
    23e4:	b.ne	2890 <__addtf3+0x978>  // b.any
    23e8:	orr	x0, x1, x3
    23ec:	cbz	x0, 2b10 <__addtf3+0xbf8>
    23f0:	lsr	x0, x1, #50
    23f4:	eor	x0, x0, #0x1
    23f8:	and	w0, w0, #0x1
    23fc:	b	29cc <__addtf3+0xab4>
    2400:	sub	x4, x3, x12
    2404:	cmp	x3, x4
    2408:	sbc	x1, x1, x2
    240c:	b	2464 <__addtf3+0x54c>
    2410:	orr	x2, x2, #0x8000000000000
    2414:	mov	x4, #0x7fff                	// #32767
    2418:	cmp	x5, x4
    241c:	b.eq	24d4 <__addtf3+0x5bc>  // b.none
    2420:	cmp	w0, #0x74
    2424:	b.gt	2a30 <__addtf3+0xb18>
    2428:	cmp	w0, #0x3f
    242c:	b.gt	24ec <__addtf3+0x5d4>
    2430:	mov	w5, #0x40                  	// #64
    2434:	sub	w5, w5, w0
    2438:	lsl	x4, x2, x5
    243c:	lsr	x6, x12, x0
    2440:	orr	x4, x4, x6
    2444:	lsl	x12, x12, x5
    2448:	cmp	x12, #0x0
    244c:	cset	x5, ne  // ne = any
    2450:	orr	x4, x4, x5
    2454:	lsr	x0, x2, x0
    2458:	sub	x4, x3, x4
    245c:	cmp	x3, x4
    2460:	sbc	x1, x1, x0
    2464:	tbz	x1, #51, 2890 <__addtf3+0x978>
    2468:	and	x5, x1, #0x7ffffffffffff
    246c:	cbz	x5, 2834 <__addtf3+0x91c>
    2470:	clz	x0, x5
    2474:	sub	w0, w0, #0xc
    2478:	lsl	x5, x5, x0
    247c:	neg	w1, w0
    2480:	lsr	x1, x4, x1
    2484:	orr	x1, x1, x5
    2488:	lsl	x5, x4, x0
    248c:	sxtw	x2, w0
    2490:	cmp	x9, w0, sxtw
    2494:	b.gt	2884 <__addtf3+0x96c>
    2498:	sub	w9, w0, w9
    249c:	add	w6, w9, #0x1
    24a0:	cmp	w6, #0x3f
    24a4:	b.gt	2850 <__addtf3+0x938>
    24a8:	mov	w0, #0x40                  	// #64
    24ac:	sub	w0, w0, w6
    24b0:	lsl	x4, x1, x0
    24b4:	lsr	x2, x5, x6
    24b8:	orr	x4, x4, x2
    24bc:	lsl	x5, x5, x0
    24c0:	cmp	x5, #0x0
    24c4:	cset	x3, ne  // ne = any
    24c8:	orr	x4, x4, x3
    24cc:	lsr	x1, x1, x6
    24d0:	b	2894 <__addtf3+0x97c>
    24d4:	orr	x0, x1, x3
    24d8:	cbz	x0, 2b30 <__addtf3+0xc18>
    24dc:	lsr	x0, x1, #50
    24e0:	eor	x0, x0, #0x1
    24e4:	and	w0, w0, #0x1
    24e8:	b	29cc <__addtf3+0xab4>
    24ec:	sub	w4, w0, #0x40
    24f0:	lsr	x4, x2, x4
    24f4:	mov	w5, #0x80                  	// #128
    24f8:	sub	w5, w5, w0
    24fc:	lsl	x2, x2, x5
    2500:	cmp	w0, #0x40
    2504:	csel	x2, x2, xzr, ne  // ne = any
    2508:	orr	x12, x2, x12
    250c:	cmp	x12, #0x0
    2510:	cset	x0, ne  // ne = any
    2514:	orr	x4, x4, x0
    2518:	mov	x0, #0x0                   	// #0
    251c:	b	2458 <__addtf3+0x540>
    2520:	tbnz	w0, #31, 2568 <__addtf3+0x650>
    2524:	add	x0, x5, #0x1
    2528:	ands	x4, x0, #0x7ffe
    252c:	b.ne	27f4 <__addtf3+0x8dc>  // b.any
    2530:	cbnz	x5, 270c <__addtf3+0x7f4>
    2534:	orr	x0, x1, x3
    2538:	cbz	x0, 26d4 <__addtf3+0x7bc>
    253c:	orr	x0, x2, x12
    2540:	cbz	x0, 2b80 <__addtf3+0xc68>
    2544:	sub	x0, x3, x12
    2548:	cmp	x3, x0
    254c:	sbc	x5, x1, x2
    2550:	tbz	x5, #51, 26f0 <__addtf3+0x7d8>
    2554:	sub	x4, x12, x3
    2558:	cmp	x12, x4
    255c:	sbc	x1, x2, x1
    2560:	mov	x10, x14
    2564:	b	2894 <__addtf3+0x97c>
    2568:	cbnz	x5, 2614 <__addtf3+0x6fc>
    256c:	orr	x4, x1, x3
    2570:	cbz	x4, 25b4 <__addtf3+0x69c>
    2574:	cmn	w0, #0x1
    2578:	b.eq	25fc <__addtf3+0x6e4>  // b.none
    257c:	mvn	w0, w0
    2580:	mov	x4, #0x7fff                	// #32767
    2584:	cmp	x8, x4
    2588:	b.ne	2628 <__addtf3+0x710>  // b.any
    258c:	orr	x3, x2, x12
    2590:	cbz	x3, 2b54 <__addtf3+0xc3c>
    2594:	lsr	x0, x2, #50
    2598:	eor	x0, x0, #0x1
    259c:	and	w0, w0, #0x1
    25a0:	mov	x1, x2
    25a4:	mov	x3, x12
    25a8:	mov	x9, x8
    25ac:	mov	x10, x14
    25b0:	b	29cc <__addtf3+0xab4>
    25b4:	mov	x0, #0x7fff                	// #32767
    25b8:	cmp	x8, x0
    25bc:	b.eq	25d4 <__addtf3+0x6bc>  // b.none
    25c0:	mov	x1, x2
    25c4:	mov	x4, x12
    25c8:	mov	x9, x8
    25cc:	mov	x10, x14
    25d0:	b	2890 <__addtf3+0x978>
    25d4:	orr	x3, x2, x12
    25d8:	cbz	x3, 2b44 <__addtf3+0xc2c>
    25dc:	lsr	x0, x2, #50
    25e0:	eor	x0, x0, #0x1
    25e4:	and	w0, w0, #0x1
    25e8:	mov	x1, x2
    25ec:	mov	x3, x12
    25f0:	mov	x9, x8
    25f4:	mov	x10, x14
    25f8:	b	29cc <__addtf3+0xab4>
    25fc:	sub	x4, x12, x3
    2600:	cmp	x12, x4
    2604:	sbc	x1, x2, x1
    2608:	mov	x9, x8
    260c:	mov	x10, x14
    2610:	b	2464 <__addtf3+0x54c>
    2614:	neg	w0, w0
    2618:	orr	x1, x1, #0x8000000000000
    261c:	mov	x4, #0x7fff                	// #32767
    2620:	cmp	x8, x4
    2624:	b.eq	2678 <__addtf3+0x760>  // b.none
    2628:	cmp	w0, #0x74
    262c:	b.gt	2a3c <__addtf3+0xb24>
    2630:	cmp	w0, #0x3f
    2634:	b.gt	26a0 <__addtf3+0x788>
    2638:	mov	w5, #0x40                  	// #64
    263c:	sub	w5, w5, w0
    2640:	lsl	x4, x1, x5
    2644:	lsr	x6, x3, x0
    2648:	orr	x4, x4, x6
    264c:	lsl	x3, x3, x5
    2650:	cmp	x3, #0x0
    2654:	cset	x3, ne  // ne = any
    2658:	orr	x4, x4, x3
    265c:	lsr	x1, x1, x0
    2660:	sub	x4, x12, x4
    2664:	cmp	x12, x4
    2668:	sbc	x1, x2, x1
    266c:	mov	x9, x13
    2670:	mov	x10, x14
    2674:	b	2464 <__addtf3+0x54c>
    2678:	orr	x3, x2, x12
    267c:	cbz	x3, 2b64 <__addtf3+0xc4c>
    2680:	lsr	x0, x2, #50
    2684:	eor	x0, x0, #0x1
    2688:	and	w0, w0, #0x1
    268c:	mov	x1, x2
    2690:	mov	x3, x12
    2694:	mov	x9, x8
    2698:	mov	x10, x14
    269c:	b	29cc <__addtf3+0xab4>
    26a0:	sub	w4, w0, #0x40
    26a4:	lsr	x4, x1, x4
    26a8:	mov	w5, #0x80                  	// #128
    26ac:	sub	w5, w5, w0
    26b0:	lsl	x1, x1, x5
    26b4:	cmp	w0, #0x40
    26b8:	csel	x0, x1, xzr, ne  // ne = any
    26bc:	orr	x3, x0, x3
    26c0:	cmp	x3, #0x0
    26c4:	cset	x0, ne  // ne = any
    26c8:	orr	x4, x4, x0
    26cc:	mov	x1, #0x0                   	// #0
    26d0:	b	2660 <__addtf3+0x748>
    26d4:	orr	x4, x2, x12
    26d8:	cbnz	x4, 2b74 <__addtf3+0xc5c>
    26dc:	and	x0, x11, #0xc00000
    26e0:	cmp	x0, #0x800, lsl #12
    26e4:	cset	x10, eq  // eq = none
    26e8:	mov	x1, x4
    26ec:	b	2894 <__addtf3+0x97c>
    26f0:	orr	x4, x0, x5
    26f4:	cbnz	x4, 2ba0 <__addtf3+0xc88>
    26f8:	and	x0, x11, #0xc00000
    26fc:	cmp	x0, #0x800, lsl #12
    2700:	cset	x10, eq  // eq = none
    2704:	mov	x1, x4
    2708:	b	2894 <__addtf3+0x97c>
    270c:	mov	x0, #0x7fff                	// #32767
    2710:	cmp	x5, x0
    2714:	b.eq	274c <__addtf3+0x834>  // b.none
    2718:	mov	w0, #0x0                   	// #0
    271c:	mov	x5, #0x7fff                	// #32767
    2720:	cmp	x8, x5
    2724:	b.eq	27a0 <__addtf3+0x888>  // b.none
    2728:	orr	x5, x1, x3
    272c:	cbnz	x5, 276c <__addtf3+0x854>
    2730:	orr	x1, x2, x12
    2734:	cbnz	x1, 27cc <__addtf3+0x8b4>
    2738:	mov	x10, x4
    273c:	mov	x1, #0x7ffffffffffff       	// #2251799813685247
    2740:	mov	x3, #0xfffffffffffffff8    	// #-8
    2744:	mov	w0, #0x1                   	// #1
    2748:	b	2b3c <__addtf3+0xc24>
    274c:	orr	x0, x1, x3
    2750:	cbz	x0, 2a48 <__addtf3+0xb30>
    2754:	lsr	x0, x1, #50
    2758:	eor	x0, x0, #0x1
    275c:	and	w0, w0, #0x1
    2760:	mov	x5, #0x7fff                	// #32767
    2764:	cmp	x8, x5
    2768:	b.eq	27a0 <__addtf3+0x888>  // b.none
    276c:	orr	x12, x2, x12
    2770:	mov	x9, #0x7fff                	// #32767
    2774:	cbz	x12, 29cc <__addtf3+0xab4>
    2778:	lsr	x3, x1, #3
    277c:	tbz	x1, #50, 27e0 <__addtf3+0x8c8>
    2780:	lsr	x4, x2, #3
    2784:	tbnz	x2, #50, 27e0 <__addtf3+0x8c8>
    2788:	mov	x6, x7
    278c:	bfi	x6, x2, #61, #3
    2790:	mov	x3, x4
    2794:	mov	x10, x14
    2798:	b	27e4 <__addtf3+0x8cc>
    279c:	mov	w0, #0x0                   	// #0
    27a0:	orr	x5, x2, x12
    27a4:	cbz	x5, 2728 <__addtf3+0x810>
    27a8:	tst	x2, #0x4000000000000
    27ac:	csinc	w0, w0, wzr, ne  // ne = any
    27b0:	orr	x4, x1, x3
    27b4:	cbnz	x4, 276c <__addtf3+0x854>
    27b8:	mov	x1, x2
    27bc:	mov	x3, x12
    27c0:	mov	x10, x14
    27c4:	mov	x9, #0x7fff                	// #32767
    27c8:	b	29cc <__addtf3+0xab4>
    27cc:	mov	x1, x2
    27d0:	mov	x3, x12
    27d4:	mov	x10, x14
    27d8:	mov	x9, #0x7fff                	// #32767
    27dc:	b	29cc <__addtf3+0xab4>
    27e0:	bfi	x6, x1, #61, #3
    27e4:	extr	x1, x3, x6, #61
    27e8:	lsl	x3, x6, #3
    27ec:	mov	x9, #0x7fff                	// #32767
    27f0:	b	29cc <__addtf3+0xab4>
    27f4:	sub	x4, x3, x12
    27f8:	cmp	x3, x4
    27fc:	sbc	x5, x1, x2
    2800:	tbnz	x5, #51, 2820 <__addtf3+0x908>
    2804:	orr	x1, x4, x5
    2808:	cbnz	x1, 246c <__addtf3+0x554>
    280c:	and	x0, x11, #0xc00000
    2810:	cmp	x0, #0x800, lsl #12
    2814:	cset	x10, eq  // eq = none
    2818:	mov	x4, x1
    281c:	b	2894 <__addtf3+0x97c>
    2820:	sub	x4, x12, x3
    2824:	cmp	x12, x4
    2828:	sbc	x5, x2, x1
    282c:	mov	x10, x14
    2830:	b	246c <__addtf3+0x554>
    2834:	clz	x1, x4
    2838:	add	w0, w1, #0x34
    283c:	cmp	w0, #0x3f
    2840:	b.le	2478 <__addtf3+0x560>
    2844:	sub	w1, w1, #0xc
    2848:	lsl	x1, x4, x1
    284c:	b	248c <__addtf3+0x574>
    2850:	sub	w9, w9, #0x3f
    2854:	lsr	x0, x1, x9
    2858:	mov	w2, #0x80                  	// #128
    285c:	sub	w2, w2, w6
    2860:	lsl	x1, x1, x2
    2864:	cmp	w6, #0x40
    2868:	csel	x2, x1, xzr, ne  // ne = any
    286c:	orr	x2, x5, x2
    2870:	cmp	x2, #0x0
    2874:	cset	x4, ne  // ne = any
    2878:	orr	x4, x0, x4
    287c:	mov	x1, #0x0                   	// #0
    2880:	b	2894 <__addtf3+0x97c>
    2884:	sub	x9, x9, x2
    2888:	and	x1, x1, #0xfff7ffffffffffff
    288c:	mov	x4, x5
    2890:	cbnz	x9, 29c4 <__addtf3+0xaac>
    2894:	orr	x3, x4, x1
    2898:	cbnz	x3, 2b84 <__addtf3+0xc6c>
    289c:	mov	x1, x3
    28a0:	mov	x9, #0x0                   	// #0
    28a4:	mov	w0, #0x0                   	// #0
    28a8:	b	28dc <__addtf3+0x9c4>
    28ac:	mov	x3, x4
    28b0:	mov	w4, #0x1                   	// #1
    28b4:	mov	x9, #0x0                   	// #0
    28b8:	mov	w0, #0x0                   	// #0
    28bc:	b	29d8 <__addtf3+0xac0>
    28c0:	and	x2, x3, #0xf
    28c4:	cmp	x2, #0x4
    28c8:	b.eq	28d4 <__addtf3+0x9bc>  // b.none
    28cc:	adds	x3, x3, #0x4
    28d0:	cinc	x1, x1, cs  // cs = hs, nlast
    28d4:	cbz	w4, 28dc <__addtf3+0x9c4>
    28d8:	orr	w0, w0, #0x8
    28dc:	tbz	x1, #51, 2988 <__addtf3+0xa70>
    28e0:	add	x9, x9, #0x1
    28e4:	mov	x2, #0x7fff                	// #32767
    28e8:	cmp	x9, x2
    28ec:	b.eq	2954 <__addtf3+0xa3c>  // b.none
    28f0:	and	x2, x1, #0xfff7ffffffffffff
    28f4:	extr	x4, x1, x3, #3
    28f8:	lsr	x1, x2, #3
    28fc:	mov	x3, #0x0                   	// #0
    2900:	mov	x2, x4
    2904:	bfxil	x3, x1, #0, #48
    2908:	bfi	x3, x9, #48, #15
    290c:	bfi	x3, x10, #63, #1
    2910:	stp	x2, x3, [sp, #16]
    2914:	cbnz	w0, 29bc <__addtf3+0xaa4>
    2918:	ldr	q0, [sp, #16]
    291c:	ldp	x29, x30, [sp], #32
    2920:	ret
    2924:	cbnz	x10, 28d4 <__addtf3+0x9bc>
    2928:	adds	x3, x3, #0x8
    292c:	cinc	x1, x1, cs  // cs = hs, nlast
    2930:	b	28d4 <__addtf3+0x9bc>
    2934:	cbz	x10, 28d4 <__addtf3+0x9bc>
    2938:	adds	x3, x3, #0x8
    293c:	cinc	x1, x1, cs  // cs = hs, nlast
    2940:	b	28d4 <__addtf3+0x9bc>
    2944:	mov	x3, x4
    2948:	mov	x9, #0x0                   	// #0
    294c:	mov	w0, #0x0                   	// #0
    2950:	b	28d8 <__addtf3+0x9c0>
    2954:	ands	x3, x11, #0xc00000
    2958:	b.eq	297c <__addtf3+0xa64>  // b.none
    295c:	cmp	x3, #0x400, lsl #12
    2960:	ccmp	x10, #0x0, #0x0, eq  // eq = none
    2964:	b.eq	29b4 <__addtf3+0xa9c>  // b.none
    2968:	cmp	x3, #0x800, lsl #12
    296c:	ccmp	x10, #0x0, #0x4, eq  // eq = none
    2970:	csetm	x3, eq  // eq = none
    2974:	mov	x1, #0x7ffe                	// #32766
    2978:	csel	x9, x9, x1, ne  // ne = any
    297c:	mov	w1, #0x14                  	// #20
    2980:	orr	w0, w0, w1
    2984:	mov	x1, x3
    2988:	extr	x4, x1, x3, #3
    298c:	lsr	x1, x1, #3
    2990:	mov	x2, #0x7fff                	// #32767
    2994:	cmp	x9, x2
    2998:	b.ne	28fc <__addtf3+0x9e4>  // b.any
    299c:	orr	x2, x4, x1
    29a0:	orr	x1, x1, #0x800000000000
    29a4:	cbnz	x2, 28fc <__addtf3+0x9e4>
    29a8:	mov	x4, x2
    29ac:	mov	x1, x2
    29b0:	b	28fc <__addtf3+0x9e4>
    29b4:	mov	x3, #0x0                   	// #0
    29b8:	b	297c <__addtf3+0xa64>
    29bc:	bl	38f0 <__sfp_handle_exceptions>
    29c0:	b	2918 <__addtf3+0xa00>
    29c4:	mov	x3, x4
    29c8:	mov	w0, #0x0                   	// #0
    29cc:	mov	w4, #0x0                   	// #0
    29d0:	tst	x3, #0x7
    29d4:	b.eq	28dc <__addtf3+0x9c4>  // b.none
    29d8:	orr	w0, w0, #0x10
    29dc:	and	x2, x11, #0xc00000
    29e0:	cmp	x2, #0x400, lsl #12
    29e4:	b.eq	2924 <__addtf3+0xa0c>  // b.none
    29e8:	cmp	x2, #0x800, lsl #12
    29ec:	b.eq	2934 <__addtf3+0xa1c>  // b.none
    29f0:	cbz	x2, 28c0 <__addtf3+0x9a8>
    29f4:	cbnz	w4, 28d8 <__addtf3+0x9c0>
    29f8:	b	28dc <__addtf3+0x9c4>
    29fc:	mov	x1, x2
    2a00:	mov	x3, x12
    2a04:	mov	x9, #0x7fff                	// #32767
    2a08:	b	29cc <__addtf3+0xab4>
    2a0c:	mov	x1, x2
    2a10:	mov	x4, x12
    2a14:	b	2894 <__addtf3+0x97c>
    2a18:	mov	x0, #0x0                   	// #0
    2a1c:	mov	x4, #0x1                   	// #1
    2a20:	b	2078 <__addtf3+0x160>
    2a24:	mov	x1, #0x0                   	// #0
    2a28:	mov	x4, #0x1                   	// #1
    2a2c:	b	2224 <__addtf3+0x30c>
    2a30:	mov	x0, #0x0                   	// #0
    2a34:	mov	x4, #0x1                   	// #1
    2a38:	b	2458 <__addtf3+0x540>
    2a3c:	mov	x1, #0x0                   	// #0
    2a40:	mov	x4, #0x1                   	// #1
    2a44:	b	2660 <__addtf3+0x748>
    2a48:	mov	x0, #0x7fff                	// #32767
    2a4c:	cmp	x8, x0
    2a50:	b.eq	279c <__addtf3+0x884>  // b.none
    2a54:	mov	w0, #0x0                   	// #0
    2a58:	b	2730 <__addtf3+0x818>
    2a5c:	mov	x1, x0
    2a60:	mov	x3, x0
    2a64:	mov	w0, #0x0                   	// #0
    2a68:	b	2b3c <__addtf3+0xc24>
    2a6c:	mov	x1, x0
    2a70:	mov	x3, x0
    2a74:	mov	w0, #0x0                   	// #0
    2a78:	b	2b3c <__addtf3+0xc24>
    2a7c:	mov	x1, x0
    2a80:	mov	x3, x0
    2a84:	mov	w0, #0x0                   	// #0
    2a88:	b	2b3c <__addtf3+0xc24>
    2a8c:	mov	x1, x3
    2a90:	mov	w0, #0x0                   	// #0
    2a94:	b	2b3c <__addtf3+0xc24>
    2a98:	mov	x1, x3
    2a9c:	mov	w0, #0x0                   	// #0
    2aa0:	b	2b3c <__addtf3+0xc24>
    2aa4:	mov	x1, x3
    2aa8:	mov	w0, #0x0                   	// #0
    2aac:	b	2b3c <__addtf3+0xc24>
    2ab0:	mov	x1, x3
    2ab4:	mov	w0, #0x14                  	// #20
    2ab8:	b	2b3c <__addtf3+0xc24>
    2abc:	mov	x1, #0x0                   	// #0
    2ac0:	mov	x3, #0x0                   	// #0
    2ac4:	mov	x10, #0x0                   	// #0
    2ac8:	mov	w0, #0x14                  	// #20
    2acc:	b	2b3c <__addtf3+0xc24>
    2ad0:	mov	x1, #0x0                   	// #0
    2ad4:	mov	x3, #0x0                   	// #0
    2ad8:	mov	w0, #0x14                  	// #20
    2adc:	b	2b3c <__addtf3+0xc24>
    2ae0:	mov	x1, x3
    2ae4:	mov	w0, #0x14                  	// #20
    2ae8:	b	2b3c <__addtf3+0xc24>
    2aec:	mov	x1, #0x0                   	// #0
    2af0:	mov	x3, #0x0                   	// #0
    2af4:	mov	x10, #0x0                   	// #0
    2af8:	mov	w0, #0x14                  	// #20
    2afc:	b	2b3c <__addtf3+0xc24>
    2b00:	mov	x1, #0x0                   	// #0
    2b04:	mov	x3, #0x0                   	// #0
    2b08:	mov	w0, #0x14                  	// #20
    2b0c:	b	2b3c <__addtf3+0xc24>
    2b10:	mov	x1, x0
    2b14:	mov	x3, x0
    2b18:	mov	w0, #0x0                   	// #0
    2b1c:	b	2b3c <__addtf3+0xc24>
    2b20:	mov	x1, x0
    2b24:	mov	x3, x0
    2b28:	mov	w0, #0x0                   	// #0
    2b2c:	b	2b3c <__addtf3+0xc24>
    2b30:	mov	x1, x0
    2b34:	mov	x3, x0
    2b38:	mov	w0, #0x0                   	// #0
    2b3c:	mov	x9, #0x7fff                	// #32767
    2b40:	b	28dc <__addtf3+0x9c4>
    2b44:	mov	x1, x3
    2b48:	mov	x10, x14
    2b4c:	mov	w0, #0x0                   	// #0
    2b50:	b	2b3c <__addtf3+0xc24>
    2b54:	mov	x1, x3
    2b58:	mov	x10, x14
    2b5c:	mov	w0, #0x0                   	// #0
    2b60:	b	2b3c <__addtf3+0xc24>
    2b64:	mov	x1, x3
    2b68:	mov	x10, x14
    2b6c:	mov	w0, #0x0                   	// #0
    2b70:	b	2b3c <__addtf3+0xc24>
    2b74:	mov	x1, x2
    2b78:	mov	x3, x12
    2b7c:	mov	x10, x14
    2b80:	mov	x4, x3
    2b84:	tst	x4, #0x7
    2b88:	b.ne	28ac <__addtf3+0x994>  // b.any
    2b8c:	tbnz	w11, #11, 2944 <__addtf3+0xa2c>
    2b90:	mov	x3, x4
    2b94:	mov	x9, #0x0                   	// #0
    2b98:	mov	w0, #0x0                   	// #0
    2b9c:	b	28dc <__addtf3+0x9c4>
    2ba0:	mov	x1, x5
    2ba4:	mov	x3, x0
    2ba8:	b	2b80 <__addtf3+0xc68>
    2bac:	mov	x0, #0x7fff                	// #32767
    2bb0:	cmp	x8, x0
    2bb4:	b.eq	2338 <__addtf3+0x420>  // b.none
    2bb8:	mov	x1, x2
    2bbc:	mov	x3, x12
    2bc0:	mov	w0, #0x0                   	// #0
    2bc4:	b	29cc <__addtf3+0xab4>

0000000000002bc8 <__eqtf2>:
    2bc8:	stp	x29, x30, [sp, #-32]!
    2bcc:	mov	x29, sp
    2bd0:	str	q0, [sp, #16]
    2bd4:	ldr	x5, [sp, #16]
    2bd8:	ldr	x0, [sp, #24]
    2bdc:	str	q1, [sp, #16]
    2be0:	ldr	x6, [sp, #16]
    2be4:	ldr	x2, [sp, #24]
    2be8:	mrs	x1, fpcr
    2bec:	mov	x10, x5
    2bf0:	ubfx	x7, x0, #0, #48
    2bf4:	ubfx	x3, x0, #48, #15
    2bf8:	lsr	x0, x0, #63
    2bfc:	and	w1, w0, #0xff
    2c00:	mov	x9, x6
    2c04:	ubfx	x8, x2, #0, #48
    2c08:	ubfx	x4, x2, #48, #15
    2c0c:	lsr	x0, x2, #63
    2c10:	and	w2, w0, #0xff
    2c14:	mov	x0, #0x7fff                	// #32767
    2c18:	cmp	x3, x0
    2c1c:	b.eq	2c40 <__eqtf2+0x78>  // b.none
    2c20:	mov	x0, #0x7fff                	// #32767
    2c24:	cmp	x4, x0
    2c28:	b.eq	2c5c <__eqtf2+0x94>  // b.none
    2c2c:	mov	w0, #0x1                   	// #1
    2c30:	cmp	x3, x4
    2c34:	b.eq	2c8c <__eqtf2+0xc4>  // b.none
    2c38:	ldp	x29, x30, [sp], #32
    2c3c:	ret
    2c40:	orr	x0, x7, x5
    2c44:	cbnz	x0, 2cc4 <__eqtf2+0xfc>
    2c48:	mov	x0, #0x7fff                	// #32767
    2c4c:	cmp	x4, x0
    2c50:	b.eq	2c5c <__eqtf2+0x94>  // b.none
    2c54:	mov	w0, #0x1                   	// #1
    2c58:	b	2c38 <__eqtf2+0x70>
    2c5c:	orr	x0, x8, x9
    2c60:	cbz	x0, 2c2c <__eqtf2+0x64>
    2c64:	mov	x0, #0x7fff                	// #32767
    2c68:	cmp	x3, x0
    2c6c:	b.eq	2cbc <__eqtf2+0xf4>  // b.none
    2c70:	mov	w0, #0x1                   	// #1
    2c74:	tst	x8, #0x800000000000
    2c78:	b.ne	2c38 <__eqtf2+0x70>  // b.any
    2c7c:	mov	w0, #0x1                   	// #1
    2c80:	bl	38f0 <__sfp_handle_exceptions>
    2c84:	mov	w0, #0x1                   	// #1
    2c88:	b	2c38 <__eqtf2+0x70>
    2c8c:	cmp	x7, x8
    2c90:	ccmp	x5, x6, #0x0, eq  // eq = none
    2c94:	b.ne	2c38 <__eqtf2+0x70>  // b.any
    2c98:	mov	w0, #0x0                   	// #0
    2c9c:	cmp	w1, w2
    2ca0:	b.eq	2c38 <__eqtf2+0x70>  // b.none
    2ca4:	mov	w0, #0x1                   	// #1
    2ca8:	cbnz	x3, 2c38 <__eqtf2+0x70>
    2cac:	orr	x7, x7, x10
    2cb0:	cmp	x7, #0x0
    2cb4:	cset	w0, ne  // ne = any
    2cb8:	b	2c38 <__eqtf2+0x70>
    2cbc:	orr	x10, x7, x10
    2cc0:	cbz	x10, 2cdc <__eqtf2+0x114>
    2cc4:	tst	x7, #0x800000000000
    2cc8:	b.eq	2c7c <__eqtf2+0xb4>  // b.none
    2ccc:	mov	w0, #0x1                   	// #1
    2cd0:	mov	x1, #0x7fff                	// #32767
    2cd4:	cmp	x4, x1
    2cd8:	b.ne	2c38 <__eqtf2+0x70>  // b.any
    2cdc:	orr	x9, x8, x9
    2ce0:	mov	w0, #0x1                   	// #1
    2ce4:	cbz	x9, 2c38 <__eqtf2+0x70>
    2ce8:	b	2c70 <__eqtf2+0xa8>

0000000000002cec <__getf2>:
    2cec:	stp	x29, x30, [sp, #-32]!
    2cf0:	mov	x29, sp
    2cf4:	str	q0, [sp, #16]
    2cf8:	ldr	x7, [sp, #16]
    2cfc:	ldr	x1, [sp, #24]
    2d00:	str	q1, [sp, #16]
    2d04:	ldr	x8, [sp, #16]
    2d08:	ldr	x0, [sp, #24]
    2d0c:	mrs	x2, fpcr
    2d10:	mov	x5, x7
    2d14:	ubfx	x9, x1, #0, #48
    2d18:	ubfx	x4, x1, #48, #15
    2d1c:	lsr	x1, x1, #63
    2d20:	and	w2, w1, #0xff
    2d24:	mov	x6, x8
    2d28:	ubfx	x10, x0, #0, #48
    2d2c:	ubfx	x3, x0, #48, #15
    2d30:	lsr	x0, x0, #63
    2d34:	and	w1, w0, #0xff
    2d38:	mov	x0, #0x7fff                	// #32767
    2d3c:	cmp	x4, x0
    2d40:	b.eq	2d80 <__getf2+0x94>  // b.none
    2d44:	mov	x0, #0x7fff                	// #32767
    2d48:	cmp	x3, x0
    2d4c:	b.eq	2d9c <__getf2+0xb0>  // b.none
    2d50:	mov	w0, #0x0                   	// #0
    2d54:	cbnz	x4, 2d64 <__getf2+0x78>
    2d58:	orr	x5, x5, x9
    2d5c:	cmp	x5, #0x0
    2d60:	cset	w0, eq  // eq = none
    2d64:	cbnz	x3, 2dac <__getf2+0xc0>
    2d68:	orr	x6, x10, x6
    2d6c:	cbnz	x6, 2dac <__getf2+0xc0>
    2d70:	cbz	w0, 2dc0 <__getf2+0xd4>
    2d74:	mov	w0, #0x0                   	// #0
    2d78:	ldp	x29, x30, [sp], #32
    2d7c:	ret
    2d80:	orr	x0, x7, x9
    2d84:	cbnz	x0, 2e48 <__getf2+0x15c>
    2d88:	mov	x0, #0x7fff                	// #32767
    2d8c:	cmp	x3, x0
    2d90:	b.eq	2d9c <__getf2+0xb0>  // b.none
    2d94:	mov	w0, #0x0                   	// #0
    2d98:	b	2d64 <__getf2+0x78>
    2d9c:	orr	x0, x10, x6
    2da0:	cbnz	x0, 2e48 <__getf2+0x15c>
    2da4:	mov	w0, #0x0                   	// #0
    2da8:	cbz	x4, 2d58 <__getf2+0x6c>
    2dac:	and	x1, x1, #0xff
    2db0:	cbz	w0, 2e58 <__getf2+0x16c>
    2db4:	cmp	x1, #0x0
    2db8:	csinv	w0, w0, wzr, ne  // ne = any
    2dbc:	b	2d78 <__getf2+0x8c>
    2dc0:	mov	w0, #0x1                   	// #1
    2dc4:	cmp	w2, #0x0
    2dc8:	cneg	w0, w0, ne  // ne = any
    2dcc:	b	2d78 <__getf2+0x8c>
    2dd0:	cmp	x4, x3
    2dd4:	b.le	2de8 <__getf2+0xfc>
    2dd8:	mov	w0, #0x1                   	// #1
    2ddc:	cmp	x5, #0x0
    2de0:	cneg	w0, w0, ne  // ne = any
    2de4:	b	2d78 <__getf2+0x8c>
    2de8:	b.ge	2dfc <__getf2+0x110>  // b.tcont
    2dec:	mov	w0, #0xffffffff            	// #-1
    2df0:	cmp	x5, #0x0
    2df4:	cneg	w0, w0, ne  // ne = any
    2df8:	b	2d78 <__getf2+0x8c>
    2dfc:	cmp	x9, x10
    2e00:	b.hi	2e14 <__getf2+0x128>  // b.pmore
    2e04:	cset	w1, eq  // eq = none
    2e08:	cmp	w1, #0x0
    2e0c:	ccmp	x7, x8, #0x0, ne  // ne = any
    2e10:	b.ls	2e24 <__getf2+0x138>  // b.plast
    2e14:	mov	w0, #0x1                   	// #1
    2e18:	cmp	x5, #0x0
    2e1c:	cneg	w0, w0, ne  // ne = any
    2e20:	b	2d78 <__getf2+0x8c>
    2e24:	cmp	x9, x10
    2e28:	b.cc	2e38 <__getf2+0x14c>  // b.lo, b.ul, b.last
    2e2c:	cmp	w1, #0x0
    2e30:	ccmp	x7, x8, #0x2, ne  // ne = any
    2e34:	b.cs	2d78 <__getf2+0x8c>  // b.hs, b.nlast
    2e38:	mov	w0, #0xffffffff            	// #-1
    2e3c:	cmp	x5, #0x0
    2e40:	cneg	w0, w0, ne  // ne = any
    2e44:	b	2d78 <__getf2+0x8c>
    2e48:	mov	w0, #0x1                   	// #1
    2e4c:	bl	38f0 <__sfp_handle_exceptions>
    2e50:	mov	w0, #0xfffffffe            	// #-2
    2e54:	b	2d78 <__getf2+0x8c>
    2e58:	and	x5, x2, #0xff
    2e5c:	cmp	x1, w2, uxtb
    2e60:	b.eq	2dd0 <__getf2+0xe4>  // b.none
    2e64:	mov	w0, #0x1                   	// #1
    2e68:	cmp	x5, #0x0
    2e6c:	cneg	w0, w0, ne  // ne = any
    2e70:	b	2d78 <__getf2+0x8c>

0000000000002e74 <__letf2>:
    2e74:	stp	x29, x30, [sp, #-32]!
    2e78:	mov	x29, sp
    2e7c:	str	q0, [sp, #16]
    2e80:	ldr	x7, [sp, #16]
    2e84:	ldr	x1, [sp, #24]
    2e88:	str	q1, [sp, #16]
    2e8c:	ldr	x8, [sp, #16]
    2e90:	ldr	x0, [sp, #24]
    2e94:	mrs	x2, fpcr
    2e98:	mov	x5, x7
    2e9c:	ubfx	x9, x1, #0, #48
    2ea0:	ubfx	x3, x1, #48, #15
    2ea4:	lsr	x1, x1, #63
    2ea8:	and	w2, w1, #0xff
    2eac:	mov	x6, x8
    2eb0:	ubfx	x10, x0, #0, #48
    2eb4:	ubfx	x4, x0, #48, #15
    2eb8:	lsr	x0, x0, #63
    2ebc:	and	w1, w0, #0xff
    2ec0:	mov	x0, #0x7fff                	// #32767
    2ec4:	cmp	x3, x0
    2ec8:	b.eq	2f08 <__letf2+0x94>  // b.none
    2ecc:	mov	x0, #0x7fff                	// #32767
    2ed0:	cmp	x4, x0
    2ed4:	b.eq	2f24 <__letf2+0xb0>  // b.none
    2ed8:	mov	w0, #0x0                   	// #0
    2edc:	cbnz	x3, 2eec <__letf2+0x78>
    2ee0:	orr	x5, x5, x9
    2ee4:	cmp	x5, #0x0
    2ee8:	cset	w0, eq  // eq = none
    2eec:	cbnz	x4, 2f34 <__letf2+0xc0>
    2ef0:	orr	x6, x10, x6
    2ef4:	cbnz	x6, 2f34 <__letf2+0xc0>
    2ef8:	cbz	w0, 2f48 <__letf2+0xd4>
    2efc:	mov	w0, #0x0                   	// #0
    2f00:	ldp	x29, x30, [sp], #32
    2f04:	ret
    2f08:	orr	x0, x7, x9
    2f0c:	cbnz	x0, 2fd0 <__letf2+0x15c>
    2f10:	mov	x0, #0x7fff                	// #32767
    2f14:	cmp	x4, x0
    2f18:	b.eq	2f24 <__letf2+0xb0>  // b.none
    2f1c:	mov	w0, #0x0                   	// #0
    2f20:	b	2eec <__letf2+0x78>
    2f24:	orr	x0, x10, x6
    2f28:	cbnz	x0, 2fd0 <__letf2+0x15c>
    2f2c:	mov	w0, #0x0                   	// #0
    2f30:	cbz	x3, 2ee0 <__letf2+0x6c>
    2f34:	and	x1, x1, #0xff
    2f38:	cbz	w0, 2fe0 <__letf2+0x16c>
    2f3c:	cmp	x1, #0x0
    2f40:	csinv	w0, w0, wzr, ne  // ne = any
    2f44:	b	2f00 <__letf2+0x8c>
    2f48:	mov	w0, #0x1                   	// #1
    2f4c:	cmp	w2, #0x0
    2f50:	cneg	w0, w0, ne  // ne = any
    2f54:	b	2f00 <__letf2+0x8c>
    2f58:	cmp	x3, x4
    2f5c:	b.le	2f70 <__letf2+0xfc>
    2f60:	mov	w0, #0x1                   	// #1
    2f64:	cmp	x5, #0x0
    2f68:	cneg	w0, w0, ne  // ne = any
    2f6c:	b	2f00 <__letf2+0x8c>
    2f70:	b.ge	2f84 <__letf2+0x110>  // b.tcont
    2f74:	mov	w0, #0xffffffff            	// #-1
    2f78:	cmp	x5, #0x0
    2f7c:	cneg	w0, w0, ne  // ne = any
    2f80:	b	2f00 <__letf2+0x8c>
    2f84:	cmp	x9, x10
    2f88:	b.hi	2f9c <__letf2+0x128>  // b.pmore
    2f8c:	cset	w1, eq  // eq = none
    2f90:	cmp	w1, #0x0
    2f94:	ccmp	x7, x8, #0x0, ne  // ne = any
    2f98:	b.ls	2fac <__letf2+0x138>  // b.plast
    2f9c:	mov	w0, #0x1                   	// #1
    2fa0:	cmp	x5, #0x0
    2fa4:	cneg	w0, w0, ne  // ne = any
    2fa8:	b	2f00 <__letf2+0x8c>
    2fac:	cmp	x9, x10
    2fb0:	b.cc	2fc0 <__letf2+0x14c>  // b.lo, b.ul, b.last
    2fb4:	cmp	w1, #0x0
    2fb8:	ccmp	x7, x8, #0x2, ne  // ne = any
    2fbc:	b.cs	2f00 <__letf2+0x8c>  // b.hs, b.nlast
    2fc0:	mov	w0, #0xffffffff            	// #-1
    2fc4:	cmp	x5, #0x0
    2fc8:	cneg	w0, w0, ne  // ne = any
    2fcc:	b	2f00 <__letf2+0x8c>
    2fd0:	mov	w0, #0x1                   	// #1
    2fd4:	bl	38f0 <__sfp_handle_exceptions>
    2fd8:	mov	w0, #0x2                   	// #2
    2fdc:	b	2f00 <__letf2+0x8c>
    2fe0:	and	x5, x2, #0xff
    2fe4:	cmp	x1, w2, uxtb
    2fe8:	b.eq	2f58 <__letf2+0xe4>  // b.none
    2fec:	mov	w0, #0x1                   	// #1
    2ff0:	cmp	x5, #0x0
    2ff4:	cneg	w0, w0, ne  // ne = any
    2ff8:	b	2f00 <__letf2+0x8c>

0000000000002ffc <__multf3>:
    2ffc:	stp	x29, x30, [sp, #-32]!
    3000:	mov	x29, sp
    3004:	str	q0, [sp, #16]
    3008:	ldr	x2, [sp, #16]
    300c:	ldr	x0, [sp, #24]
    3010:	str	q1, [sp, #16]
    3014:	ldr	x7, [sp, #16]
    3018:	ldr	x1, [sp, #24]
    301c:	mrs	x13, fpcr
    3020:	ubfx	x8, x0, #0, #48
    3024:	ubfx	x9, x0, #48, #15
    3028:	lsr	x0, x0, #63
    302c:	and	w11, w0, #0xff
    3030:	cbz	w9, 3118 <__multf3+0x11c>
    3034:	mov	x4, x8
    3038:	mov	w5, #0x7fff                	// #32767
    303c:	cmp	w9, w5
    3040:	b.eq	3180 <__multf3+0x184>  // b.none
    3044:	extr	x4, x8, x2, #61
    3048:	orr	x4, x4, #0x8000000000000
    304c:	lsl	x5, x2, #3
    3050:	and	x9, x9, #0xffff
    3054:	sub	x9, x9, #0x3, lsl #12
    3058:	sub	x9, x9, #0xfff
    305c:	mov	x6, #0x0                   	// #0
    3060:	mov	w8, #0x0                   	// #0
    3064:	ubfx	x14, x1, #0, #48
    3068:	ubfx	x12, x1, #48, #15
    306c:	lsr	x1, x1, #63
    3070:	and	w3, w1, #0xff
    3074:	cbz	w12, 31c8 <__multf3+0x1cc>
    3078:	mov	w10, #0x7fff                	// #32767
    307c:	cmp	w12, w10
    3080:	b.eq	322c <__multf3+0x230>  // b.none
    3084:	extr	x10, x14, x7, #61
    3088:	orr	x10, x10, #0x8000000000000
    308c:	lsl	x7, x7, #3
    3090:	and	x12, x12, #0xffff
    3094:	sub	x12, x12, #0x3, lsl #12
    3098:	sub	x12, x12, #0xfff
    309c:	mov	x14, #0x0                   	// #0
    30a0:	eor	w11, w11, w3
    30a4:	and	x11, x11, #0xff
    30a8:	add	x12, x9, x12
    30ac:	add	x9, x12, #0x1
    30b0:	orr	x3, x14, x6, lsl #2
    30b4:	cmp	x3, #0xa
    30b8:	b.le	32cc <__multf3+0x2d0>
    30bc:	cmp	x3, #0xc
    30c0:	csel	x1, x1, x0, lt  // lt = tstop
    30c4:	csel	x4, x10, x4, lt  // lt = tstop
    30c8:	csel	x5, x7, x5, lt  // lt = tstop
    30cc:	csel	x6, x14, x6, lt  // lt = tstop
    30d0:	cmp	x6, #0x2
    30d4:	b.eq	36b4 <__multf3+0x6b8>  // b.none
    30d8:	b.gt	3318 <__multf3+0x31c>
    30dc:	cbz	x6, 36d4 <__multf3+0x6d8>
    30e0:	cmp	x6, #0x1
    30e4:	csel	x4, x4, xzr, ne  // ne = any
    30e8:	csel	x5, x5, xzr, ne  // ne = any
    30ec:	csel	x9, x9, xzr, ne  // ne = any
    30f0:	mov	x3, #0x0                   	// #0
    30f4:	mov	x2, x5
    30f8:	bfxil	x3, x4, #0, #48
    30fc:	bfi	x3, x9, #48, #15
    3100:	bfi	x3, x1, #63, #1
    3104:	stp	x2, x3, [sp, #16]
    3108:	cbnz	w8, 3508 <__multf3+0x50c>
    310c:	ldr	q0, [sp, #16]
    3110:	ldp	x29, x30, [sp], #32
    3114:	ret
    3118:	orr	x5, x8, x2
    311c:	cbz	x5, 31a0 <__multf3+0x1a4>
    3120:	cbz	x8, 315c <__multf3+0x160>
    3124:	clz	x6, x8
    3128:	sub	x4, x6, #0xf
    312c:	add	w5, w4, #0x3
    3130:	lsl	x8, x8, x5
    3134:	mov	w3, #0x3d                  	// #61
    3138:	sub	w4, w3, w4
    313c:	lsr	x4, x2, x4
    3140:	orr	x4, x4, x8
    3144:	lsl	x5, x2, x5
    3148:	mov	x9, #0xffffffffffffc011    	// #-16367
    314c:	sub	x9, x9, x6
    3150:	mov	x6, #0x0                   	// #0
    3154:	mov	w8, #0x0                   	// #0
    3158:	b	3064 <__multf3+0x68>
    315c:	clz	x4, x2
    3160:	add	x6, x4, #0x40
    3164:	add	x4, x4, #0x31
    3168:	cmp	x4, #0x3c
    316c:	b.le	312c <__multf3+0x130>
    3170:	sub	w4, w4, #0x3d
    3174:	mov	x5, x8
    3178:	lsl	x4, x2, x4
    317c:	b	3148 <__multf3+0x14c>
    3180:	orr	x5, x8, x2
    3184:	cbz	x5, 31b4 <__multf3+0x1b8>
    3188:	lsr	x8, x8, #47
    318c:	eor	w8, w8, #0x1
    3190:	mov	x5, x2
    3194:	mov	x9, #0x7fff                	// #32767
    3198:	mov	x6, #0x3                   	// #3
    319c:	b	3064 <__multf3+0x68>
    31a0:	mov	x4, x5
    31a4:	mov	x9, #0x0                   	// #0
    31a8:	mov	x6, #0x1                   	// #1
    31ac:	mov	w8, #0x0                   	// #0
    31b0:	b	3064 <__multf3+0x68>
    31b4:	mov	x4, x5
    31b8:	mov	x9, #0x7fff                	// #32767
    31bc:	mov	x6, #0x2                   	// #2
    31c0:	mov	w8, #0x0                   	// #0
    31c4:	b	3064 <__multf3+0x68>
    31c8:	orr	x10, x14, x7
    31cc:	cbz	x10, 3740 <__multf3+0x744>
    31d0:	cbz	x14, 3208 <__multf3+0x20c>
    31d4:	clz	x15, x14
    31d8:	sub	x10, x15, #0xf
    31dc:	add	w12, w10, #0x3
    31e0:	lsl	x14, x14, x12
    31e4:	mov	w2, #0x3d                  	// #61
    31e8:	sub	w10, w2, w10
    31ec:	lsr	x10, x7, x10
    31f0:	orr	x10, x10, x14
    31f4:	lsl	x7, x7, x12
    31f8:	mov	x12, #0xffffffffffffc011    	// #-16367
    31fc:	sub	x12, x12, x15
    3200:	mov	x14, #0x0                   	// #0
    3204:	b	30a0 <__multf3+0xa4>
    3208:	clz	x10, x7
    320c:	add	x15, x10, #0x40
    3210:	add	x10, x10, #0x31
    3214:	cmp	x10, #0x3c
    3218:	b.le	31dc <__multf3+0x1e0>
    321c:	sub	w10, w10, #0x3d
    3220:	lsl	x10, x7, x10
    3224:	mov	x7, x14
    3228:	b	31f8 <__multf3+0x1fc>
    322c:	orr	x10, x14, x7
    3230:	cbz	x10, 32a0 <__multf3+0x2a4>
    3234:	tst	x14, #0x800000000000
    3238:	csinc	w8, w8, wzr, ne  // ne = any
    323c:	eor	w11, w11, w3
    3240:	and	x11, x11, #0xff
    3244:	add	x9, x9, #0x8, lsl #12
    3248:	lsl	x2, x6, #2
    324c:	orr	x3, x2, #0x3
    3250:	cmp	x3, #0xa
    3254:	b.gt	3324 <__multf3+0x328>
    3258:	mov	x10, x14
    325c:	mov	x14, #0x3                   	// #3
    3260:	mov	x2, #0x1                   	// #1
    3264:	lsl	x2, x2, x3
    3268:	mov	x0, #0x530                 	// #1328
    326c:	tst	x2, x0
    3270:	b.ne	3480 <__multf3+0x484>  // b.any
    3274:	mov	x0, #0x240                 	// #576
    3278:	ands	x2, x2, x0
    327c:	mov	x4, #0xffffffffffff        	// #281474976710655
    3280:	csel	x4, x10, x4, eq  // eq = none
    3284:	cmp	x2, #0x0
    3288:	csinv	x5, x7, xzr, eq  // eq = none
    328c:	csel	x1, x1, xzr, eq  // eq = none
    3290:	mov	x6, #0x3                   	// #3
    3294:	csel	x6, x14, x6, eq  // eq = none
    3298:	csinc	w8, w8, wzr, eq  // eq = none
    329c:	b	30d0 <__multf3+0xd4>
    32a0:	eor	w11, w11, w3
    32a4:	and	x11, x11, #0xff
    32a8:	add	x12, x9, #0x7, lsl #12
    32ac:	add	x12, x12, #0xfff
    32b0:	add	x9, x9, #0x8, lsl #12
    32b4:	lsl	x2, x6, #2
    32b8:	orr	x3, x2, #0x2
    32bc:	cmp	x3, #0xa
    32c0:	b.gt	32ec <__multf3+0x2f0>
    32c4:	mov	x7, x10
    32c8:	mov	x14, #0x2                   	// #2
    32cc:	cmp	x3, #0x2
    32d0:	b.gt	3260 <__multf3+0x264>
    32d4:	cbz	x3, 3330 <__multf3+0x334>
    32d8:	mov	x4, x10
    32dc:	mov	x5, x7
    32e0:	mov	x1, x11
    32e4:	mov	x6, x14
    32e8:	b	30d0 <__multf3+0xd4>
    32ec:	mov	x7, x10
    32f0:	mov	x14, #0x2                   	// #2
    32f4:	cmp	x3, #0xe
    32f8:	b.le	30bc <__multf3+0xc0>
    32fc:	tbz	x4, #47, 3314 <__multf3+0x318>
    3300:	ands	x2, x10, #0x800000000000
    3304:	csel	x4, x4, x10, ne  // ne = any
    3308:	cmp	x2, #0x0
    330c:	csel	x5, x5, x7, ne  // ne = any
    3310:	csel	x0, x0, x1, ne  // ne = any
    3314:	mov	x1, x0
    3318:	orr	x4, x4, #0x800000000000
    331c:	mov	x9, #0x7fff                	// #32767
    3320:	b	30f0 <__multf3+0xf4>
    3324:	mov	x10, x14
    3328:	mov	x14, #0x3                   	// #3
    332c:	b	32f4 <__multf3+0x2f8>
    3330:	lsr	x6, x5, #32
    3334:	lsr	x1, x7, #32
    3338:	and	x2, x5, #0xffffffff
    333c:	and	x7, x7, #0xffffffff
    3340:	mul	x14, x7, x2
    3344:	mul	x3, x6, x7
    3348:	mul	x5, x6, x1
    334c:	madd	x16, x1, x2, x3
    3350:	add	x16, x16, x14, lsr #32
    3354:	mov	x0, #0x100000000           	// #4294967296
    3358:	add	x0, x5, x0
    335c:	cmp	x3, x16
    3360:	csel	x5, x0, x5, hi  // hi = pmore
    3364:	and	x14, x14, #0xffffffff
    3368:	add	x14, x14, x16, lsl #32
    336c:	lsr	x0, x10, #32
    3370:	and	x10, x10, #0xffffffff
    3374:	mul	x3, x2, x10
    3378:	mul	x17, x6, x10
    337c:	mul	x6, x6, x0
    3380:	madd	x2, x0, x2, x17
    3384:	add	x2, x2, x3, lsr #32
    3388:	mov	x15, #0x100000000           	// #4294967296
    338c:	add	x15, x6, x15
    3390:	cmp	x17, x2
    3394:	csel	x6, x15, x6, hi  // hi = pmore
    3398:	add	x15, x6, x2, lsr #32
    339c:	and	x3, x3, #0xffffffff
    33a0:	add	x3, x3, x2, lsl #32
    33a4:	add	x16, x3, x16, lsr #32
    33a8:	lsr	x2, x4, #32
    33ac:	and	x4, x4, #0xffffffff
    33b0:	mul	x6, x7, x4
    33b4:	mul	x7, x2, x7
    33b8:	mul	x17, x1, x2
    33bc:	madd	x1, x1, x4, x7
    33c0:	add	x1, x1, x6, lsr #32
    33c4:	mov	x18, #0x100000000           	// #4294967296
    33c8:	add	x18, x17, x18
    33cc:	cmp	x7, x1
    33d0:	csel	x17, x18, x17, hi  // hi = pmore
    33d4:	add	x7, x17, x1, lsr #32
    33d8:	and	x6, x6, #0xffffffff
    33dc:	add	x1, x6, x1, lsl #32
    33e0:	mul	x6, x4, x10
    33e4:	mul	x10, x2, x10
    33e8:	mul	x2, x0, x2
    33ec:	madd	x0, x0, x4, x10
    33f0:	add	x0, x0, x6, lsr #32
    33f4:	mov	x4, #0x100000000           	// #4294967296
    33f8:	add	x4, x2, x4
    33fc:	cmp	x10, x0
    3400:	csel	x2, x4, x2, hi  // hi = pmore
    3404:	add	x5, x5, x16
    3408:	cmp	x5, x3
    340c:	cset	x16, cc  // cc = lo, ul, last
    3410:	and	x3, x6, #0xffffffff
    3414:	add	x3, x3, x0, lsl #32
    3418:	add	x3, x3, x15
    341c:	cinc	x10, x3, cc  // cc = lo, ul, last
    3420:	adds	x1, x5, x1
    3424:	cset	x5, cs  // cs = hs, nlast
    3428:	add	x4, x10, x7
    342c:	cinc	x6, x4, cs  // cs = hs, nlast
    3430:	cmp	x3, x15
    3434:	ccmp	x10, x16, #0x0, cs  // cs = hs, nlast
    3438:	lsr	x0, x0, #32
    343c:	cinc	x0, x0, cc  // cc = lo, ul, last
    3440:	cmp	x4, x7
    3444:	ccmp	x6, x5, #0x0, cs  // cs = hs, nlast
    3448:	cinc	x2, x2, cc  // cc = lo, ul, last
    344c:	add	x0, x0, x2
    3450:	extr	x4, x0, x6, #51
    3454:	orr	x14, x14, x1, lsl #13
    3458:	cmp	x14, #0x0
    345c:	cset	x5, ne  // ne = any
    3460:	extr	x1, x6, x1, #51
    3464:	orr	x5, x5, x1
    3468:	tbz	x0, #39, 36cc <__multf3+0x6d0>
    346c:	and	x0, x5, #0x1
    3470:	orr	x5, x0, x5, lsr #1
    3474:	orr	x5, x5, x4, lsl #63
    3478:	lsr	x4, x4, #1
    347c:	b	36d0 <__multf3+0x6d4>
    3480:	mov	x1, x11
    3484:	b	30d0 <__multf3+0xd4>
    3488:	and	x2, x5, #0xf
    348c:	cmp	x2, #0x4
    3490:	b.eq	3708 <__multf3+0x70c>  // b.none
    3494:	adds	x5, x5, #0x4
    3498:	cinc	x4, x4, cs  // cs = hs, nlast
    349c:	b	3708 <__multf3+0x70c>
    34a0:	cbnz	x1, 3708 <__multf3+0x70c>
    34a4:	adds	x5, x5, #0x8
    34a8:	cinc	x4, x4, cs  // cs = hs, nlast
    34ac:	b	3708 <__multf3+0x70c>
    34b0:	cbz	x1, 3708 <__multf3+0x70c>
    34b4:	adds	x5, x5, #0x8
    34b8:	cinc	x4, x4, cs  // cs = hs, nlast
    34bc:	b	3708 <__multf3+0x70c>
    34c0:	and	x5, x13, #0xc00000
    34c4:	cmp	x5, #0x400, lsl #12
    34c8:	b.eq	3514 <__multf3+0x518>  // b.none
    34cc:	cmp	x5, #0x800, lsl #12
    34d0:	b.eq	352c <__multf3+0x530>  // b.none
    34d4:	mov	x0, #0x7fff                	// #32767
    34d8:	cbz	x5, 34e4 <__multf3+0x4e8>
    34dc:	mov	x5, #0xffffffffffffffff    	// #-1
    34e0:	mov	x0, #0x7ffe                	// #32766
    34e4:	mov	w2, #0x14                  	// #20
    34e8:	orr	w8, w8, w2
    34ec:	mov	x4, x5
    34f0:	mov	x3, #0x0                   	// #0
    34f4:	mov	x2, x5
    34f8:	bfxil	x3, x4, #0, #48
    34fc:	bfi	x3, x0, #48, #15
    3500:	bfi	x3, x1, #63, #1
    3504:	stp	x2, x3, [sp, #16]
    3508:	mov	w0, w8
    350c:	bl	38f0 <__sfp_handle_exceptions>
    3510:	b	310c <__multf3+0x110>
    3514:	cmp	x1, #0x0
    3518:	csetm	x5, ne  // ne = any
    351c:	mov	x0, #0x7ffe                	// #32766
    3520:	mov	x2, #0x7fff                	// #32767
    3524:	csel	x0, x0, x2, ne  // ne = any
    3528:	b	34e4 <__multf3+0x4e8>
    352c:	cmp	x1, #0x0
    3530:	csetm	x5, eq  // eq = none
    3534:	mov	x0, #0x7ffe                	// #32766
    3538:	mov	x2, #0x7fff                	// #32767
    353c:	csel	x0, x0, x2, eq  // eq = none
    3540:	b	34e4 <__multf3+0x4e8>
    3544:	mov	x2, #0x1                   	// #1
    3548:	sub	x0, x2, x0
    354c:	cmp	x0, #0x74
    3550:	b.gt	3654 <__multf3+0x658>
    3554:	cmp	x0, #0x3f
    3558:	b.gt	359c <__multf3+0x5a0>
    355c:	mov	w3, #0x40                  	// #64
    3560:	sub	w3, w3, w0
    3564:	lsl	x2, x4, x3
    3568:	lsr	x6, x5, x0
    356c:	orr	x2, x2, x6
    3570:	lsl	x3, x5, x3
    3574:	cmp	x3, #0x0
    3578:	cset	x3, ne  // ne = any
    357c:	orr	x2, x2, x3
    3580:	lsr	x0, x4, x0
    3584:	tst	x2, #0x7
    3588:	b.ne	35e4 <__multf3+0x5e8>  // b.any
    358c:	tbnz	x0, #51, 3604 <__multf3+0x608>
    3590:	extr	x5, x0, x2, #3
    3594:	lsr	x4, x0, #3
    3598:	b	35d4 <__multf3+0x5d8>
    359c:	sub	w3, w0, #0x40
    35a0:	lsr	x3, x4, x3
    35a4:	mov	w2, #0x80                  	// #128
    35a8:	sub	w2, w2, w0
    35ac:	lsl	x4, x4, x2
    35b0:	cmp	x0, #0x40
    35b4:	csel	x0, x4, xzr, ne  // ne = any
    35b8:	orr	x5, x0, x5
    35bc:	cmp	x5, #0x0
    35c0:	cset	x2, ne  // ne = any
    35c4:	orr	x2, x3, x2
    35c8:	lsr	x5, x3, #3
    35cc:	ands	x4, x2, #0x7
    35d0:	b.ne	35e0 <__multf3+0x5e4>  // b.any
    35d4:	tbz	w13, #11, 36c4 <__multf3+0x6c8>
    35d8:	mov	x0, #0x0                   	// #0
    35dc:	b	3614 <__multf3+0x618>
    35e0:	mov	x0, #0x0                   	// #0
    35e4:	orr	w8, w8, #0x10
    35e8:	and	x13, x13, #0xc00000
    35ec:	cmp	x13, #0x400, lsl #12
    35f0:	b.eq	3634 <__multf3+0x638>  // b.none
    35f4:	cmp	x13, #0x800, lsl #12
    35f8:	b.eq	3644 <__multf3+0x648>  // b.none
    35fc:	cbz	x13, 361c <__multf3+0x620>
    3600:	tbz	x0, #51, 3730 <__multf3+0x734>
    3604:	orr	w8, w8, #0x10
    3608:	mov	x4, #0x0                   	// #0
    360c:	mov	x5, #0x0                   	// #0
    3610:	mov	x0, #0x1                   	// #1
    3614:	orr	w8, w8, #0x8
    3618:	b	34f0 <__multf3+0x4f4>
    361c:	and	x3, x2, #0xf
    3620:	cmp	x3, #0x4
    3624:	b.eq	3600 <__multf3+0x604>  // b.none
    3628:	adds	x2, x2, #0x4
    362c:	cinc	x0, x0, cs  // cs = hs, nlast
    3630:	b	3600 <__multf3+0x604>
    3634:	cbnz	x1, 3600 <__multf3+0x604>
    3638:	adds	x2, x2, #0x8
    363c:	cinc	x0, x0, cs  // cs = hs, nlast
    3640:	b	3600 <__multf3+0x604>
    3644:	cbz	x1, 3600 <__multf3+0x604>
    3648:	adds	x2, x2, #0x8
    364c:	cinc	x0, x0, cs  // cs = hs, nlast
    3650:	b	3600 <__multf3+0x604>
    3654:	orr	x5, x5, x4
    3658:	cbz	x5, 3684 <__multf3+0x688>
    365c:	orr	w8, w8, #0x10
    3660:	and	x13, x13, #0xc00000
    3664:	cmp	x13, #0x400, lsl #12
    3668:	b.eq	3694 <__multf3+0x698>  // b.none
    366c:	cmp	x13, #0x800, lsl #12
    3670:	b.eq	36a4 <__multf3+0x6a8>  // b.none
    3674:	cmp	x13, #0x0
    3678:	mov	x5, #0x5                   	// #5
    367c:	csinc	x5, x5, xzr, eq  // eq = none
    3680:	lsr	x5, x5, #3
    3684:	orr	w8, w8, #0x8
    3688:	mov	x4, #0x0                   	// #0
    368c:	mov	x0, #0x0                   	// #0
    3690:	b	34f0 <__multf3+0x4f4>
    3694:	cmp	x1, #0x0
    3698:	mov	x5, #0x9                   	// #9
    369c:	csinc	x5, x5, xzr, eq  // eq = none
    36a0:	b	3680 <__multf3+0x684>
    36a4:	cmp	x1, #0x0
    36a8:	mov	x5, #0x9                   	// #9
    36ac:	csinc	x5, x5, xzr, ne  // ne = any
    36b0:	b	3680 <__multf3+0x684>
    36b4:	mov	x4, #0x0                   	// #0
    36b8:	mov	x5, #0x0                   	// #0
    36bc:	mov	x9, #0x7fff                	// #32767
    36c0:	b	30f0 <__multf3+0xf4>
    36c4:	mov	x9, #0x0                   	// #0
    36c8:	b	30f0 <__multf3+0xf4>
    36cc:	mov	x9, x12
    36d0:	mov	x1, x11
    36d4:	add	x0, x9, #0x3, lsl #12
    36d8:	add	x0, x0, #0xfff
    36dc:	cmp	x0, #0x0
    36e0:	b.le	3544 <__multf3+0x548>
    36e4:	tst	x5, #0x7
    36e8:	b.eq	3708 <__multf3+0x70c>  // b.none
    36ec:	orr	w8, w8, #0x10
    36f0:	and	x2, x13, #0xc00000
    36f4:	cmp	x2, #0x400, lsl #12
    36f8:	b.eq	34a0 <__multf3+0x4a4>  // b.none
    36fc:	cmp	x2, #0x800, lsl #12
    3700:	b.eq	34b0 <__multf3+0x4b4>  // b.none
    3704:	cbz	x2, 3488 <__multf3+0x48c>
    3708:	tbz	x4, #52, 3714 <__multf3+0x718>
    370c:	and	x4, x4, #0xffefffffffffffff
    3710:	add	x0, x9, #0x4, lsl #12
    3714:	mov	x2, #0x7ffe                	// #32766
    3718:	cmp	x0, x2
    371c:	b.gt	34c0 <__multf3+0x4c4>
    3720:	extr	x5, x4, x5, #3
    3724:	lsr	x4, x4, #3
    3728:	mov	x9, x0
    372c:	b	30f0 <__multf3+0xf4>
    3730:	extr	x5, x0, x2, #3
    3734:	lsr	x4, x0, #3
    3738:	mov	x0, #0x0                   	// #0
    373c:	b	3614 <__multf3+0x618>
    3740:	mov	x7, x10
    3744:	mov	x12, #0x0                   	// #0
    3748:	mov	x14, #0x1                   	// #1
    374c:	b	30a0 <__multf3+0xa4>

0000000000003750 <__floatsitf>:
    3750:	cbz	w0, 379c <__floatsitf+0x4c>
    3754:	lsr	w4, w0, #31
    3758:	cmp	w0, #0x0
    375c:	cneg	w0, w0, lt  // lt = tstop
    3760:	clz	x2, x0
    3764:	mov	w1, #0x403e                	// #16446
    3768:	sub	w1, w1, w2
    376c:	sxtw	x5, w1
    3770:	mov	w2, #0x402f                	// #16431
    3774:	sub	w1, w2, w1
    3778:	lsl	x0, x0, x1
    377c:	mov	x2, #0x0                   	// #0
    3780:	mov	x3, #0x0                   	// #0
    3784:	bfxil	x3, x0, #0, #48
    3788:	bfi	x3, x5, #48, #15
    378c:	bfi	x3, x4, #63, #1
    3790:	fmov	d0, x2
    3794:	fmov	v0.d[1], x3
    3798:	ret
    379c:	mov	x0, #0x0                   	// #0
    37a0:	mov	x5, #0x0                   	// #0
    37a4:	mov	x4, #0x0                   	// #0
    37a8:	b	377c <__floatsitf+0x2c>

00000000000037ac <__fixtfdi>:
    37ac:	stp	x29, x30, [sp, #-48]!
    37b0:	mov	x29, sp
    37b4:	str	x19, [sp, #16]
    37b8:	str	q0, [sp, #32]
    37bc:	ldr	x19, [sp, #32]
    37c0:	ldr	x0, [sp, #40]
    37c4:	mrs	x1, fpcr
    37c8:	mov	x1, x19
    37cc:	ubfx	x3, x0, #0, #48
    37d0:	ubfx	x5, x0, #48, #15
    37d4:	mov	x4, #0x3ffe                	// #16382
    37d8:	cmp	x5, x4
    37dc:	b.gt	37fc <__fixtfdi+0x50>
    37e0:	cbnz	x5, 38c4 <__fixtfdi+0x118>
    37e4:	orr	x19, x19, x3
    37e8:	cbnz	x19, 38d4 <__fixtfdi+0x128>
    37ec:	mov	x0, x19
    37f0:	ldr	x19, [sp, #16]
    37f4:	ldp	x29, x30, [sp], #48
    37f8:	ret
    37fc:	lsr	x0, x0, #63
    3800:	and	w0, w0, #0xff
    3804:	and	x4, x0, #0xff
    3808:	mov	x6, #0x403d                	// #16445
    380c:	cmp	x5, x6
    3810:	b.le	3844 <__fixtfdi+0x98>
    3814:	mov	x19, #0x7fffffffffffffff    	// #9223372036854775807
    3818:	add	x19, x4, x19
    381c:	cmp	x4, #0x0
    3820:	mov	x0, #0x403e                	// #16446
    3824:	ccmp	x5, x0, #0x0, ne  // ne = any
    3828:	b.ne	38e0 <__fixtfdi+0x134>  // b.any
    382c:	extr	x3, x3, x1, #49
    3830:	cbnz	x3, 38e8 <__fixtfdi+0x13c>
    3834:	cmp	xzr, x1, lsl #15
    3838:	b.eq	37ec <__fixtfdi+0x40>  // b.none
    383c:	mov	w0, #0x10                  	// #16
    3840:	b	38cc <__fixtfdi+0x120>
    3844:	orr	x3, x3, #0x1000000000000
    3848:	mov	x0, #0x406f                	// #16495
    384c:	sub	x2, x0, x5
    3850:	cmp	x2, #0x3f
    3854:	b.gt	3894 <__fixtfdi+0xe8>
    3858:	sub	w2, w5, #0x4, lsl #12
    385c:	sub	w2, w2, #0x2f
    3860:	lsl	x0, x19, x2
    3864:	cmp	x0, #0x0
    3868:	cset	w0, ne  // ne = any
    386c:	mov	w19, #0x406f                	// #16495
    3870:	sub	w19, w19, w5
    3874:	lsr	x19, x1, x19
    3878:	lsl	x3, x3, x2
    387c:	orr	x19, x19, x3
    3880:	cmp	x4, #0x0
    3884:	cneg	x19, x19, ne  // ne = any
    3888:	cbz	w0, 37ec <__fixtfdi+0x40>
    388c:	mov	w0, #0x10                  	// #16
    3890:	b	38cc <__fixtfdi+0x120>
    3894:	sub	w19, w5, #0x3, lsl #12
    3898:	sub	w19, w19, #0xfef
    389c:	lsl	x19, x3, x19
    38a0:	cmp	x2, #0x40
    38a4:	csel	x19, x19, xzr, ne  // ne = any
    38a8:	orr	x19, x19, x1
    38ac:	cmp	x19, #0x0
    38b0:	cset	w0, ne  // ne = any
    38b4:	mov	w19, #0x402f                	// #16431
    38b8:	sub	w19, w19, w5
    38bc:	lsr	x19, x3, x19
    38c0:	b	3880 <__fixtfdi+0xd4>
    38c4:	mov	x19, #0x0                   	// #0
    38c8:	mov	w0, #0x10                  	// #16
    38cc:	bl	38f0 <__sfp_handle_exceptions>
    38d0:	b	37ec <__fixtfdi+0x40>
    38d4:	mov	x19, #0x0                   	// #0
    38d8:	mov	w0, #0x10                  	// #16
    38dc:	b	38cc <__fixtfdi+0x120>
    38e0:	mov	w0, #0x1                   	// #1
    38e4:	b	38cc <__fixtfdi+0x120>
    38e8:	mov	w0, #0x1                   	// #1
    38ec:	b	38cc <__fixtfdi+0x120>

00000000000038f0 <__sfp_handle_exceptions>:
    38f0:	tbz	w0, #0, 3900 <__sfp_handle_exceptions+0x10>
    38f4:	movi	v1.2s, #0x0
    38f8:	fdiv	s0, s1, s1
    38fc:	mrs	x1, fpsr
    3900:	tbz	w0, #1, 3914 <__sfp_handle_exceptions+0x24>
    3904:	fmov	s1, #1.000000000000000000e+00
    3908:	movi	v2.2s, #0x0
    390c:	fdiv	s0, s1, s2
    3910:	mrs	x1, fpsr
    3914:	tbz	w0, #2, 3934 <__sfp_handle_exceptions+0x44>
    3918:	mov	w1, #0x7f7fffff            	// #2139095039
    391c:	fmov	s1, w1
    3920:	mov	w1, #0xc5ae                	// #50606
    3924:	movk	w1, #0x749d, lsl #16
    3928:	fmov	s2, w1
    392c:	fadd	s0, s1, s2
    3930:	mrs	x1, fpsr
    3934:	tbz	w0, #3, 3944 <__sfp_handle_exceptions+0x54>
    3938:	movi	v1.2s, #0x80, lsl #16
    393c:	fmul	s0, s1, s1
    3940:	mrs	x1, fpsr
    3944:	tbz	w0, #4, 395c <__sfp_handle_exceptions+0x6c>
    3948:	mov	w0, #0x7f7fffff            	// #2139095039
    394c:	fmov	s1, w0
    3950:	fmov	s2, #1.000000000000000000e+00
    3954:	fsub	s0, s1, s2
    3958:	mrs	x0, fpsr
    395c:	ret

Disassembly of section .fini:

0000000000003960 <_fini>:
    3960:	stp	x29, x30, [sp, #-16]!
    3964:	mov	x29, sp
    3968:	ldp	x29, x30, [sp], #16
    396c:	ret
