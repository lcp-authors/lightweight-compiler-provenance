
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003058 <.init>:
    3058:	stp	x29, x30, [sp, #-16]!
    305c:	mov	x29, sp
    3060:	bl	3570 <pthread_cond_timedwait@plt+0x10>
    3064:	ldp	x29, x30, [sp], #16
    3068:	ret

Disassembly of section .plt:

0000000000003070 <memcpy@plt-0x20>:
    3070:	stp	x16, x30, [sp, #-16]!
    3074:	adrp	x16, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    3078:	ldr	x17, [x16, #4088]
    307c:	add	x16, x16, #0xff8
    3080:	br	x17
    3084:	nop
    3088:	nop
    308c:	nop

0000000000003090 <memcpy@plt>:
    3090:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16]
    3098:	add	x16, x16, #0x0
    309c:	br	x17

00000000000030a0 <lzma_index_iter_rewind@plt>:
    30a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #8]
    30a8:	add	x16, x16, #0x8
    30ac:	br	x17

00000000000030b0 <memmove@plt>:
    30b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #16]
    30b8:	add	x16, x16, #0x10
    30bc:	br	x17

00000000000030c0 <pthread_sigmask@plt>:
    30c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #24]
    30c8:	add	x16, x16, #0x18
    30cc:	br	x17

00000000000030d0 <lzma_block_buffer_encode@plt>:
    30d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #32]
    30d8:	add	x16, x16, #0x20
    30dc:	br	x17

00000000000030e0 <lzma_check_is_supported@plt>:
    30e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #40]
    30e8:	add	x16, x16, #0x28
    30ec:	br	x17

00000000000030f0 <lzma_filter_flags_size@plt>:
    30f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #48]
    30f8:	add	x16, x16, #0x30
    30fc:	br	x17

0000000000003100 <lzma_index_buffer_encode@plt>:
    3100:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #56]
    3108:	add	x16, x16, #0x38
    310c:	br	x17

0000000000003110 <lzma_stream_flags_compare@plt>:
    3110:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #64]
    3118:	add	x16, x16, #0x40
    311c:	br	x17

0000000000003120 <lzma_block_buffer_bound@plt>:
    3120:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #72]
    3128:	add	x16, x16, #0x48
    312c:	br	x17

0000000000003130 <lzma_index_hash_decode@plt>:
    3130:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #80]
    3138:	add	x16, x16, #0x50
    313c:	br	x17

0000000000003140 <__cxa_finalize@plt>:
    3140:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #88]
    3148:	add	x16, x16, #0x58
    314c:	br	x17

0000000000003150 <clock_gettime@plt>:
    3150:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #96]
    3158:	add	x16, x16, #0x60
    315c:	br	x17

0000000000003160 <lzma_block_header_size@plt>:
    3160:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #104]
    3168:	add	x16, x16, #0x68
    316c:	br	x17

0000000000003170 <sigfillset@plt>:
    3170:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #112]
    3178:	add	x16, x16, #0x70
    317c:	br	x17

0000000000003180 <lzma_index_memusage@plt>:
    3180:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #120]
    3188:	add	x16, x16, #0x78
    318c:	br	x17

0000000000003190 <lzma_block_unpadded_size@plt>:
    3190:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #128]
    3198:	add	x16, x16, #0x80
    319c:	br	x17

00000000000031a0 <malloc@plt>:
    31a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #136]
    31a8:	add	x16, x16, #0x88
    31ac:	br	x17

00000000000031b0 <lzma_index_hash_append@plt>:
    31b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #144]
    31b8:	add	x16, x16, #0x90
    31bc:	br	x17

00000000000031c0 <lzma_crc32@plt>:
    31c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #152]
    31c8:	add	x16, x16, #0x98
    31cc:	br	x17

00000000000031d0 <lzma_index_checks@plt>:
    31d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #160]
    31d8:	add	x16, x16, #0xa0
    31dc:	br	x17

00000000000031e0 <pthread_condattr_destroy@plt>:
    31e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #168]
    31e8:	add	x16, x16, #0xa8
    31ec:	br	x17

00000000000031f0 <lzma_stream_buffer_encode@plt>:
    31f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #176]
    31f8:	add	x16, x16, #0xb0
    31fc:	br	x17

0000000000003200 <pthread_cond_signal@plt>:
    3200:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #184]
    3208:	add	x16, x16, #0xb8
    320c:	br	x17

0000000000003210 <lzma_stream_footer_encode@plt>:
    3210:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #192]
    3218:	add	x16, x16, #0xc0
    321c:	br	x17

0000000000003220 <lzma_raw_encoder_memusage@plt>:
    3220:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #200]
    3228:	add	x16, x16, #0xc8
    322c:	br	x17

0000000000003230 <memset@plt>:
    3230:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #208]
    3238:	add	x16, x16, #0xd0
    323c:	br	x17

0000000000003240 <lzma_filters_copy@plt>:
    3240:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #216]
    3248:	add	x16, x16, #0xd8
    324c:	br	x17

0000000000003250 <lzma_properties_decode@plt>:
    3250:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #224]
    3258:	add	x16, x16, #0xe0
    325c:	br	x17

0000000000003260 <calloc@plt>:
    3260:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #232]
    3268:	add	x16, x16, #0xe8
    326c:	br	x17

0000000000003270 <lzma_check_size@plt>:
    3270:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #240]
    3278:	add	x16, x16, #0xf0
    327c:	br	x17

0000000000003280 <lzma_index_hash_init@plt>:
    3280:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #248]
    3288:	add	x16, x16, #0xf8
    328c:	br	x17

0000000000003290 <lzma_crc64@plt>:
    3290:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #256]
    3298:	add	x16, x16, #0x100
    329c:	br	x17

00000000000032a0 <pthread_mutex_init@plt>:
    32a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #264]
    32a8:	add	x16, x16, #0x108
    32ac:	br	x17

00000000000032b0 <pthread_create@plt>:
    32b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #272]
    32b8:	add	x16, x16, #0x110
    32bc:	br	x17

00000000000032c0 <__gmon_start__@plt>:
    32c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #280]
    32c8:	add	x16, x16, #0x118
    32cc:	br	x17

00000000000032d0 <pthread_join@plt>:
    32d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #288]
    32d8:	add	x16, x16, #0x120
    32dc:	br	x17

00000000000032e0 <lzma_raw_decoder_memusage@plt>:
    32e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #296]
    32e8:	add	x16, x16, #0x128
    32ec:	br	x17

00000000000032f0 <sched_getaffinity@plt>:
    32f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #304]
    32f8:	add	x16, x16, #0x130
    32fc:	br	x17

0000000000003300 <lzma_index_append@plt>:
    3300:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #312]
    3308:	add	x16, x16, #0x138
    330c:	br	x17

0000000000003310 <lzma_index_hash_end@plt>:
    3310:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #320]
    3318:	add	x16, x16, #0x140
    331c:	br	x17

0000000000003320 <lzma_end@plt>:
    3320:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #328]
    3328:	add	x16, x16, #0x148
    332c:	br	x17

0000000000003330 <memcmp@plt>:
    3330:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #336]
    3338:	add	x16, x16, #0x150
    333c:	br	x17

0000000000003340 <lzma_block_header_decode@plt>:
    3340:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #344]
    3348:	add	x16, x16, #0x158
    334c:	br	x17

0000000000003350 <lzma_filter_flags_encode@plt>:
    3350:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #352]
    3358:	add	x16, x16, #0x160
    335c:	br	x17

0000000000003360 <lzma_index_file_size@plt>:
    3360:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #360]
    3368:	add	x16, x16, #0x168
    336c:	br	x17

0000000000003370 <lzma_properties_size@plt>:
    3370:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #368]
    3378:	add	x16, x16, #0x170
    337c:	br	x17

0000000000003380 <free@plt>:
    3380:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #376]
    3388:	add	x16, x16, #0x178
    338c:	br	x17

0000000000003390 <lzma_stream_header_encode@plt>:
    3390:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #384]
    3398:	add	x16, x16, #0x180
    339c:	br	x17

00000000000033a0 <pthread_cond_wait@plt>:
    33a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #392]
    33a8:	add	x16, x16, #0x188
    33ac:	br	x17

00000000000033b0 <lzma_index_init@plt>:
    33b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #400]
    33b8:	add	x16, x16, #0x190
    33bc:	br	x17

00000000000033c0 <lzma_vli_decode@plt>:
    33c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #408]
    33c8:	add	x16, x16, #0x198
    33cc:	br	x17

00000000000033d0 <pthread_condattr_init@plt>:
    33d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #416]
    33d8:	add	x16, x16, #0x1a0
    33dc:	br	x17

00000000000033e0 <lzma_index_end@plt>:
    33e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #424]
    33e8:	add	x16, x16, #0x1a8
    33ec:	br	x17

00000000000033f0 <__sched_cpucount@plt>:
    33f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #432]
    33f8:	add	x16, x16, #0x1b0
    33fc:	br	x17

0000000000003400 <lzma_properties_encode@plt>:
    3400:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #440]
    3408:	add	x16, x16, #0x1b8
    340c:	br	x17

0000000000003410 <pthread_mutex_destroy@plt>:
    3410:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #448]
    3418:	add	x16, x16, #0x1c0
    341c:	br	x17

0000000000003420 <pthread_cond_init@plt>:
    3420:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #456]
    3428:	add	x16, x16, #0x1c8
    342c:	br	x17

0000000000003430 <lzma_stream_footer_decode@plt>:
    3430:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #464]
    3438:	add	x16, x16, #0x1d0
    343c:	br	x17

0000000000003440 <lzma_lzma_preset@plt>:
    3440:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #472]
    3448:	add	x16, x16, #0x1d8
    344c:	br	x17

0000000000003450 <lzma_vli_encode@plt>:
    3450:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #480]
    3458:	add	x16, x16, #0x1e0
    345c:	br	x17

0000000000003460 <lzma_index_iter_next@plt>:
    3460:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #488]
    3468:	add	x16, x16, #0x1e8
    346c:	br	x17

0000000000003470 <sysconf@plt>:
    3470:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #496]
    3478:	add	x16, x16, #0x1f0
    347c:	br	x17

0000000000003480 <lzma_vli_size@plt>:
    3480:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #504]
    3488:	add	x16, x16, #0x1f8
    348c:	br	x17

0000000000003490 <pthread_condattr_setclock@plt>:
    3490:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #512]
    3498:	add	x16, x16, #0x200
    349c:	br	x17

00000000000034a0 <lzma_stream_encoder@plt>:
    34a0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #520]
    34a8:	add	x16, x16, #0x208
    34ac:	br	x17

00000000000034b0 <lzma_index_iter_init@plt>:
    34b0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #528]
    34b8:	add	x16, x16, #0x210
    34bc:	br	x17

00000000000034c0 <lzma_block_uncomp_encode@plt>:
    34c0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #536]
    34c8:	add	x16, x16, #0x218
    34cc:	br	x17

00000000000034d0 <lzma_index_hash_size@plt>:
    34d0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #544]
    34d8:	add	x16, x16, #0x220
    34dc:	br	x17

00000000000034e0 <lzma_index_block_count@plt>:
    34e0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #552]
    34e8:	add	x16, x16, #0x228
    34ec:	br	x17

00000000000034f0 <lzma_stream_header_decode@plt>:
    34f0:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    34f4:	ldr	x17, [x16, #560]
    34f8:	add	x16, x16, #0x230
    34fc:	br	x17

0000000000003500 <lzma_filter_flags_decode@plt>:
    3500:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3504:	ldr	x17, [x16, #568]
    3508:	add	x16, x16, #0x238
    350c:	br	x17

0000000000003510 <lzma_index_size@plt>:
    3510:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3514:	ldr	x17, [x16, #576]
    3518:	add	x16, x16, #0x240
    351c:	br	x17

0000000000003520 <pthread_cond_destroy@plt>:
    3520:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3524:	ldr	x17, [x16, #584]
    3528:	add	x16, x16, #0x248
    352c:	br	x17

0000000000003530 <pthread_mutex_lock@plt>:
    3530:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3534:	ldr	x17, [x16, #592]
    3538:	add	x16, x16, #0x250
    353c:	br	x17

0000000000003540 <lzma_block_header_encode@plt>:
    3540:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3544:	ldr	x17, [x16, #600]
    3548:	add	x16, x16, #0x258
    354c:	br	x17

0000000000003550 <pthread_mutex_unlock@plt>:
    3550:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3554:	ldr	x17, [x16, #608]
    3558:	add	x16, x16, #0x260
    355c:	br	x17

0000000000003560 <pthread_cond_timedwait@plt>:
    3560:	adrp	x16, 30000 <memcpy@GLIBC_2.17>
    3564:	ldr	x17, [x16, #616]
    3568:	add	x16, x16, #0x268
    356c:	br	x17

Disassembly of section .text:

0000000000003570 <lzma_version_number@@XZ_5.0-0x154>:
    3570:	adrp	x0, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    3574:	ldr	x0, [x0, #3968]
    3578:	cbz	x0, 3580 <pthread_cond_timedwait@plt+0x20>
    357c:	b	32c0 <__gmon_start__@plt>
    3580:	ret
    3584:	nop
    3588:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x20ebc>
    358c:	add	x0, x0, #0x278
    3590:	adrp	x1, 30000 <lzma_mode_is_supported@@XZ_5.0+0x20ebc>
    3594:	add	x1, x1, #0x278
    3598:	cmp	x1, x0
    359c:	b.eq	35b4 <pthread_cond_timedwait@plt+0x54>  // b.none
    35a0:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    35a4:	ldr	x1, [x1, #3904]
    35a8:	cbz	x1, 35b4 <pthread_cond_timedwait@plt+0x54>
    35ac:	mov	x16, x1
    35b0:	br	x16
    35b4:	ret
    35b8:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x20ebc>
    35bc:	add	x0, x0, #0x278
    35c0:	adrp	x1, 30000 <lzma_mode_is_supported@@XZ_5.0+0x20ebc>
    35c4:	add	x1, x1, #0x278
    35c8:	sub	x1, x1, x0
    35cc:	lsr	x2, x1, #63
    35d0:	add	x1, x2, x1, asr #3
    35d4:	cmp	xzr, x1, asr #1
    35d8:	asr	x1, x1, #1
    35dc:	b.eq	35f4 <pthread_cond_timedwait@plt+0x94>  // b.none
    35e0:	adrp	x2, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    35e4:	ldr	x2, [x2, #4040]
    35e8:	cbz	x2, 35f4 <pthread_cond_timedwait@plt+0x94>
    35ec:	mov	x16, x2
    35f0:	br	x16
    35f4:	ret
    35f8:	stp	x29, x30, [sp, #-32]!
    35fc:	mov	x29, sp
    3600:	str	x19, [sp, #16]
    3604:	adrp	x19, 30000 <lzma_mode_is_supported@@XZ_5.0+0x20ebc>
    3608:	ldrb	w0, [x19, #632]
    360c:	cbnz	w0, 3634 <pthread_cond_timedwait@plt+0xd4>
    3610:	adrp	x0, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    3614:	ldr	x0, [x0, #3920]
    3618:	cbz	x0, 3628 <pthread_cond_timedwait@plt+0xc8>
    361c:	adrp	x0, 30000 <lzma_mode_is_supported@@XZ_5.0+0x20ebc>
    3620:	ldr	x0, [x0, #624]
    3624:	bl	3140 <__cxa_finalize@plt>
    3628:	bl	3588 <pthread_cond_timedwait@plt+0x28>
    362c:	mov	w0, #0x1                   	// #1
    3630:	strb	w0, [x19, #632]
    3634:	ldr	x19, [sp, #16]
    3638:	ldp	x29, x30, [sp], #32
    363c:	ret
    3640:	b	35b8 <pthread_cond_timedwait@plt+0x58>
    3644:	stp	x29, x30, [sp, #-32]!
    3648:	mov	w0, #0x1e                  	// #30
    364c:	mov	x29, sp
    3650:	str	x19, [sp, #16]
    3654:	bl	3470 <sysconf@plt>
    3658:	mov	x19, x0
    365c:	mov	w0, #0x55                  	// #85
    3660:	bl	3470 <sysconf@plt>
    3664:	cmn	x19, #0x1
    3668:	mul	x19, x19, x0
    366c:	ccmn	x0, #0x1, #0x4, ne  // ne = any
    3670:	csel	x0, x19, xzr, ne  // ne = any
    3674:	ldr	x19, [sp, #16]
    3678:	ldp	x29, x30, [sp], #32
    367c:	ret
    3680:	stp	x29, x30, [sp, #-160]!
    3684:	mov	x1, #0x80                  	// #128
    3688:	mov	w0, #0x0                   	// #0
    368c:	mov	x29, sp
    3690:	str	x19, [sp, #16]
    3694:	add	x19, sp, #0x20
    3698:	mov	x2, x19
    369c:	bl	32f0 <sched_getaffinity@plt>
    36a0:	cbnz	w0, 36bc <pthread_cond_timedwait@plt+0x15c>
    36a4:	mov	x1, x19
    36a8:	mov	x0, #0x80                  	// #128
    36ac:	bl	33f0 <__sched_cpucount@plt>
    36b0:	ldr	x19, [sp, #16]
    36b4:	ldp	x29, x30, [sp], #160
    36b8:	ret
    36bc:	mov	w0, #0x0                   	// #0
    36c0:	b	36b0 <pthread_cond_timedwait@plt+0x150>

00000000000036c4 <lzma_version_number@@XZ_5.0>:
    36c4:	mov	w0, #0x3eca                	// #16074
    36c8:	movk	w0, #0x2fb, lsl #16
    36cc:	ret

00000000000036d0 <lzma_version_string@@XZ_5.0>:
    36d0:	adrp	x0, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    36d4:	add	x0, x0, #0x638
    36d8:	ret
    36dc:	cmp	x0, #0x0
    36e0:	mov	x3, x1
    36e4:	mov	x1, #0x1                   	// #1
    36e8:	csel	x0, x0, x1, ne  // ne = any
    36ec:	cbz	x3, 3708 <lzma_version_string@@XZ_5.0+0x38>
    36f0:	ldr	x4, [x3]
    36f4:	cbz	x4, 3708 <lzma_version_string@@XZ_5.0+0x38>
    36f8:	mov	x2, x0
    36fc:	mov	x16, x4
    3700:	ldr	x0, [x3, #16]
    3704:	br	x16
    3708:	b	31a0 <malloc@plt>
    370c:	stp	x29, x30, [sp, #-32]!
    3710:	cmp	x0, #0x0
    3714:	mov	x3, x1
    3718:	mov	x29, sp
    371c:	stp	x19, x20, [sp, #16]
    3720:	mov	x1, #0x1                   	// #1
    3724:	csel	x19, x0, x1, ne  // ne = any
    3728:	cbz	x3, 3764 <lzma_version_string@@XZ_5.0+0x94>
    372c:	ldr	x4, [x3]
    3730:	cbz	x4, 3764 <lzma_version_string@@XZ_5.0+0x94>
    3734:	ldr	x0, [x3, #16]
    3738:	mov	x2, x19
    373c:	blr	x4
    3740:	mov	x20, x0
    3744:	cbz	x0, 3754 <lzma_version_string@@XZ_5.0+0x84>
    3748:	mov	x2, x19
    374c:	mov	w1, #0x0                   	// #0
    3750:	bl	3230 <memset@plt>
    3754:	mov	x0, x20
    3758:	ldp	x19, x20, [sp, #16]
    375c:	ldp	x29, x30, [sp], #32
    3760:	ret
    3764:	mov	x1, x19
    3768:	mov	x0, #0x1                   	// #1
    376c:	ldp	x19, x20, [sp, #16]
    3770:	ldp	x29, x30, [sp], #32
    3774:	b	3260 <calloc@plt>
    3778:	mov	x2, x1
    377c:	cbz	x1, 3798 <lzma_version_string@@XZ_5.0+0xc8>
    3780:	ldr	x3, [x1, #8]
    3784:	cbz	x3, 3798 <lzma_version_string@@XZ_5.0+0xc8>
    3788:	mov	x1, x0
    378c:	mov	x16, x3
    3790:	ldr	x0, [x2, #16]
    3794:	br	x16
    3798:	b	3380 <free@plt>
    379c:	stp	x29, x30, [sp, #-64]!
    37a0:	mov	x29, sp
    37a4:	stp	x19, x20, [sp, #16]
    37a8:	stp	x21, x22, [sp, #32]
    37ac:	mov	x22, x4
    37b0:	ldr	x20, [x4]
    37b4:	str	x23, [sp, #48]
    37b8:	ldr	x21, [x1]
    37bc:	sub	x19, x5, x20
    37c0:	mov	x23, x1
    37c4:	sub	x2, x2, x21
    37c8:	add	x1, x0, x21
    37cc:	cmp	x2, x19
    37d0:	add	x0, x3, x20
    37d4:	csel	x19, x2, x19, ls  // ls = plast
    37d8:	mov	x2, x19
    37dc:	add	x20, x20, x19
    37e0:	bl	3090 <memcpy@plt>
    37e4:	add	x21, x21, x19
    37e8:	mov	x0, x19
    37ec:	str	x20, [x22]
    37f0:	ldp	x19, x20, [sp, #16]
    37f4:	str	x21, [x23]
    37f8:	ldp	x21, x22, [sp, #32]
    37fc:	ldr	x23, [sp, #48]
    3800:	ldp	x29, x30, [sp], #64
    3804:	ret
    3808:	mov	x3, x2
    380c:	ldr	x2, [x2]
    3810:	ldr	x4, [x0, #8]
    3814:	cmp	x2, x4
    3818:	b.ne	3838 <lzma_version_string@@XZ_5.0+0x168>  // b.any
    381c:	cmn	x2, #0x1
    3820:	b.eq	3840 <lzma_version_string@@XZ_5.0+0x170>  // b.none
    3824:	ldr	x4, [x0, #64]
    3828:	mov	x2, #0x0                   	// #0
    382c:	ldr	x0, [x0]
    3830:	mov	x16, x4
    3834:	br	x16
    3838:	mov	w0, #0xb                   	// #11
    383c:	ret
    3840:	mov	w0, #0x0                   	// #0
    3844:	b	383c <lzma_version_string@@XZ_5.0+0x16c>
    3848:	stp	x29, x30, [sp, #-32]!
    384c:	mov	x29, sp
    3850:	str	x19, [sp, #16]
    3854:	mov	x19, x0
    3858:	ldr	x0, [x0, #16]
    385c:	cbz	x0, 3888 <lzma_version_string@@XZ_5.0+0x1b8>
    3860:	ldr	x2, [x19, #32]
    3864:	ldr	x0, [x19]
    3868:	cbz	x2, 3894 <lzma_version_string@@XZ_5.0+0x1c4>
    386c:	blr	x2
    3870:	mov	x0, #0xffffffffffffffff    	// #-1
    3874:	stp	xzr, x0, [x19]
    3878:	stp	xzr, xzr, [x19, #16]
    387c:	stp	xzr, xzr, [x19, #32]
    3880:	stp	xzr, xzr, [x19, #48]
    3884:	str	xzr, [x19, #64]
    3888:	ldr	x19, [sp, #16]
    388c:	ldp	x29, x30, [sp], #32
    3890:	ret
    3894:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    3898:	b	3870 <lzma_version_string@@XZ_5.0+0x1a0>
    389c:	stp	x29, x30, [sp, #-48]!
    38a0:	mov	x29, sp
    38a4:	stp	x19, x20, [sp, #16]
    38a8:	mov	x20, x2
    38ac:	mov	x19, x0
    38b0:	ldr	x3, [x2, #8]
    38b4:	ldr	x2, [x0, #16]
    38b8:	str	x21, [sp, #32]
    38bc:	mov	x21, x1
    38c0:	cmp	x3, x2
    38c4:	b.eq	38cc <lzma_version_string@@XZ_5.0+0x1fc>  // b.none
    38c8:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    38cc:	ldp	x0, x3, [x20]
    38d0:	stp	x0, x3, [x19, #8]
    38d4:	cbz	x3, 38f8 <lzma_version_string@@XZ_5.0+0x228>
    38d8:	mov	x2, x20
    38dc:	mov	x1, x21
    38e0:	mov	x0, x19
    38e4:	mov	x16, x3
    38e8:	ldp	x19, x20, [sp, #16]
    38ec:	ldr	x21, [sp, #32]
    38f0:	ldp	x29, x30, [sp], #48
    38f4:	br	x16
    38f8:	mov	w0, #0x0                   	// #0
    38fc:	ldp	x19, x20, [sp, #16]
    3900:	ldr	x21, [sp, #32]
    3904:	ldp	x29, x30, [sp], #48
    3908:	ret
    390c:	cbz	x0, 3984 <lzma_version_string@@XZ_5.0+0x2b4>
    3910:	stp	x29, x30, [sp, #-32]!
    3914:	mov	x29, sp
    3918:	str	x19, [sp, #16]
    391c:	mov	x19, x0
    3920:	ldr	x0, [x0, #56]
    3924:	cbnz	x0, 3954 <lzma_version_string@@XZ_5.0+0x284>
    3928:	ldr	x1, [x19, #48]
    392c:	mov	x0, #0x60                  	// #96
    3930:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    3934:	str	x0, [x19, #56]
    3938:	cbz	x0, 398c <lzma_version_string@@XZ_5.0+0x2bc>
    393c:	mov	x1, #0xffffffffffffffff    	// #-1
    3940:	stp	xzr, x1, [x0]
    3944:	stp	xzr, xzr, [x0, #16]
    3948:	stp	xzr, xzr, [x0, #32]
    394c:	stp	xzr, xzr, [x0, #48]
    3950:	str	xzr, [x0, #64]
    3954:	ldr	x0, [x19, #56]
    3958:	str	wzr, [x0, #88]
    395c:	strb	wzr, [x0, #92]
    3960:	ldr	x0, [x19, #56]
    3964:	str	wzr, [x0, #72]
    3968:	strb	wzr, [x0, #93]
    396c:	mov	w0, #0x0                   	// #0
    3970:	str	xzr, [x19, #16]
    3974:	str	xzr, [x19, #40]
    3978:	ldr	x19, [sp, #16]
    397c:	ldp	x29, x30, [sp], #32
    3980:	ret
    3984:	mov	w0, #0xb                   	// #11
    3988:	ret
    398c:	mov	w0, #0x5                   	// #5
    3990:	b	3978 <lzma_version_string@@XZ_5.0+0x2a8>

0000000000003994 <lzma_code@@XZ_5.0>:
    3994:	sub	sp, sp, #0x40
    3998:	stp	x29, x30, [sp, #16]
    399c:	add	x29, sp, #0x10
    39a0:	ldr	x2, [x0]
    39a4:	str	x19, [sp, #32]
    39a8:	mov	x19, x0
    39ac:	cbnz	x2, 39b8 <lzma_code@@XZ_5.0+0x24>
    39b0:	ldr	x0, [x0, #8]
    39b4:	cbnz	x0, 3b44 <lzma_code@@XZ_5.0+0x1b0>
    39b8:	ldr	x5, [x19, #24]
    39bc:	cbnz	x5, 39c8 <lzma_code@@XZ_5.0+0x34>
    39c0:	ldr	x0, [x19, #32]
    39c4:	cbnz	x0, 3b44 <lzma_code@@XZ_5.0+0x1b0>
    39c8:	ldr	x0, [x19, #56]
    39cc:	cbz	x0, 3b44 <lzma_code@@XZ_5.0+0x1b0>
    39d0:	ldr	x8, [x0, #24]
    39d4:	cbz	x8, 3b44 <lzma_code@@XZ_5.0+0x1b0>
    39d8:	cmp	w1, #0x4
    39dc:	b.hi	3b44 <lzma_code@@XZ_5.0+0x1b0>  // b.pmore
    39e0:	add	x3, x0, w1, uxtw
    39e4:	ldrb	w3, [x3, #88]
    39e8:	cbz	w3, 3b44 <lzma_code@@XZ_5.0+0x1b0>
    39ec:	ldr	x3, [x19, #64]
    39f0:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    39f4:	ldr	x3, [x19, #72]
    39f8:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    39fc:	ldr	x3, [x19, #80]
    3a00:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    3a04:	ldr	x3, [x19, #88]
    3a08:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    3a0c:	ldr	x3, [x19, #96]
    3a10:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    3a14:	ldr	x3, [x19, #104]
    3a18:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    3a1c:	ldr	x3, [x19, #112]
    3a20:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    3a24:	ldr	x3, [x19, #120]
    3a28:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    3a2c:	ldr	x3, [x19, #128]
    3a30:	cbnz	x3, 3bd0 <lzma_code@@XZ_5.0+0x23c>
    3a34:	ldr	w4, [x0, #72]
    3a38:	cmp	w4, #0x5
    3a3c:	b.hi	3b44 <lzma_code@@XZ_5.0+0x1b0>  // b.pmore
    3a40:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    3a44:	add	x3, x3, #0x640
    3a48:	ldrb	w3, [x3, w4, uxtw]
    3a4c:	adr	x4, 3a58 <lzma_code@@XZ_5.0+0xc4>
    3a50:	add	x3, x4, w3, sxtb #2
    3a54:	br	x3
    3a58:	sub	w4, w1, #0x1
    3a5c:	cmp	w4, #0x3
    3a60:	b.hi	3a84 <lzma_code@@XZ_5.0+0xf0>  // b.pmore
    3a64:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    3a68:	add	x3, x3, #0x648
    3a6c:	ldrb	w3, [x3, w4, uxtw]
    3a70:	adr	x4, 3a7c <lzma_code@@XZ_5.0+0xe8>
    3a74:	add	x3, x4, w3, sxtb #2
    3a78:	br	x3
    3a7c:	mov	w3, #0x1                   	// #1
    3a80:	str	w3, [x0, #72]
    3a84:	ldr	x4, [x19, #8]
    3a88:	stp	xzr, xzr, [sp, #48]
    3a8c:	add	x3, sp, #0x30
    3a90:	ldr	x7, [x19, #32]
    3a94:	str	w1, [sp]
    3a98:	add	x6, sp, #0x38
    3a9c:	ldr	x0, [x0]
    3aa0:	ldr	x1, [x19, #48]
    3aa4:	blr	x8
    3aa8:	cmp	w0, #0x6
    3aac:	ldp	x1, x4, [x19]
    3ab0:	ldp	x2, x3, [sp, #48]
    3ab4:	add	x1, x1, x2
    3ab8:	sub	x4, x4, x2
    3abc:	stp	x1, x4, [x19]
    3ac0:	ldr	x1, [x19, #16]
    3ac4:	add	x1, x1, x2
    3ac8:	str	x1, [x19, #16]
    3acc:	ldr	x1, [x19, #24]
    3ad0:	add	x1, x1, x3
    3ad4:	str	x1, [x19, #24]
    3ad8:	ldr	x1, [x19, #32]
    3adc:	sub	x1, x1, x3
    3ae0:	str	x1, [x19, #32]
    3ae4:	ldr	x1, [x19, #40]
    3ae8:	add	x1, x1, x3
    3aec:	str	x1, [x19, #40]
    3af0:	ldr	x1, [x19, #56]
    3af4:	str	x4, [x1, #80]
    3af8:	b.hi	3b64 <lzma_code@@XZ_5.0+0x1d0>  // b.pmore
    3afc:	adrp	x4, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    3b00:	add	x4, x4, #0x64c
    3b04:	ldrb	w4, [x4, w0, uxtw]
    3b08:	adr	x5, 3b14 <lzma_code@@XZ_5.0+0x180>
    3b0c:	add	x4, x5, w4, sxtb #2
    3b10:	br	x4
    3b14:	mov	w3, #0x2                   	// #2
    3b18:	b	3a80 <lzma_code@@XZ_5.0+0xec>
    3b1c:	mov	w3, #0x3                   	// #3
    3b20:	b	3a80 <lzma_code@@XZ_5.0+0xec>
    3b24:	mov	w3, #0x4                   	// #4
    3b28:	b	3a80 <lzma_code@@XZ_5.0+0xec>
    3b2c:	cmp	w1, #0x1
    3b30:	b.ne	3b44 <lzma_code@@XZ_5.0+0x1b0>  // b.any
    3b34:	ldr	x3, [x19, #8]
    3b38:	ldr	x4, [x0, #80]
    3b3c:	cmp	x4, x3
    3b40:	b.eq	3a84 <lzma_code@@XZ_5.0+0xf0>  // b.none
    3b44:	mov	w0, #0xb                   	// #11
    3b48:	b	3b90 <lzma_code@@XZ_5.0+0x1fc>
    3b4c:	cmp	w1, #0x2
    3b50:	b	3b30 <lzma_code@@XZ_5.0+0x19c>
    3b54:	cmp	w1, #0x3
    3b58:	b	3b30 <lzma_code@@XZ_5.0+0x19c>
    3b5c:	cmp	w1, #0x4
    3b60:	b	3b30 <lzma_code@@XZ_5.0+0x19c>
    3b64:	cmp	w0, #0x20
    3b68:	b.eq	3ba0 <lzma_code@@XZ_5.0+0x20c>  // b.none
    3b6c:	mov	w2, #0x6                   	// #6
    3b70:	str	w2, [x1, #72]
    3b74:	b	3b90 <lzma_code@@XZ_5.0+0x1fc>
    3b78:	orr	x2, x2, x3
    3b7c:	cbnz	x2, 3bc8 <lzma_code@@XZ_5.0+0x234>
    3b80:	ldrb	w2, [x1, #93]
    3b84:	cbnz	w2, 3be0 <lzma_code@@XZ_5.0+0x24c>
    3b88:	mov	w2, #0x1                   	// #1
    3b8c:	strb	w2, [x1, #93]
    3b90:	ldp	x29, x30, [sp, #16]
    3b94:	ldr	x19, [sp, #32]
    3b98:	add	sp, sp, #0x40
    3b9c:	ret
    3ba0:	mov	w0, #0x0                   	// #0
    3ba4:	strb	wzr, [x1, #93]
    3ba8:	b	3b90 <lzma_code@@XZ_5.0+0x1fc>
    3bac:	ldr	w2, [x1, #72]
    3bb0:	sub	w3, w2, #0x1
    3bb4:	cmp	w3, #0x1
    3bb8:	ccmp	w2, #0x4, #0x4, hi  // hi = pmore
    3bbc:	mov	w2, #0x5                   	// #5
    3bc0:	csel	w2, wzr, w2, eq  // eq = none
    3bc4:	str	w2, [x1, #72]
    3bc8:	strb	wzr, [x1, #93]
    3bcc:	b	3b90 <lzma_code@@XZ_5.0+0x1fc>
    3bd0:	mov	w0, #0x8                   	// #8
    3bd4:	b	3b90 <lzma_code@@XZ_5.0+0x1fc>
    3bd8:	mov	w0, #0x1                   	// #1
    3bdc:	b	3b90 <lzma_code@@XZ_5.0+0x1fc>
    3be0:	mov	w0, #0xa                   	// #10
    3be4:	b	3b90 <lzma_code@@XZ_5.0+0x1fc>

0000000000003be8 <lzma_end@@XZ_5.0>:
    3be8:	cbz	x0, 3c24 <lzma_end@@XZ_5.0+0x3c>
    3bec:	stp	x29, x30, [sp, #-32]!
    3bf0:	mov	x29, sp
    3bf4:	str	x19, [sp, #16]
    3bf8:	mov	x19, x0
    3bfc:	ldr	x0, [x0, #56]
    3c00:	cbz	x0, 3c18 <lzma_end@@XZ_5.0+0x30>
    3c04:	ldr	x1, [x19, #48]
    3c08:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    3c0c:	ldp	x1, x0, [x19, #48]
    3c10:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    3c14:	str	xzr, [x19, #56]
    3c18:	ldr	x19, [sp, #16]
    3c1c:	ldp	x29, x30, [sp], #32
    3c20:	ret
    3c24:	ret

0000000000003c28 <lzma_get_progress@@XZ_5.2>:
    3c28:	ldr	x6, [x0, #56]
    3c2c:	mov	x4, x1
    3c30:	ldr	x5, [x6, #40]
    3c34:	cbz	x5, 3c44 <lzma_get_progress@@XZ_5.2+0x1c>
    3c38:	ldr	x0, [x6]
    3c3c:	mov	x16, x5
    3c40:	br	x16
    3c44:	ldr	x1, [x0, #16]
    3c48:	str	x1, [x4]
    3c4c:	ldr	x0, [x0, #40]
    3c50:	str	x0, [x2]
    3c54:	ret

0000000000003c58 <lzma_get_check@@XZ_5.0>:
    3c58:	ldr	x0, [x0, #56]
    3c5c:	ldr	x1, [x0, #48]
    3c60:	cbz	x1, 3c70 <lzma_get_check@@XZ_5.0+0x18>
    3c64:	ldr	x0, [x0]
    3c68:	mov	x16, x1
    3c6c:	br	x16
    3c70:	mov	w0, #0x0                   	// #0
    3c74:	ret

0000000000003c78 <lzma_memusage@@XZ_5.0>:
    3c78:	cbnz	x0, 3c90 <lzma_memusage@@XZ_5.0+0x18>
    3c7c:	mov	x0, #0x0                   	// #0
    3c80:	ret
    3c84:	mov	x0, #0x0                   	// #0
    3c88:	ldp	x29, x30, [sp], #32
    3c8c:	ret
    3c90:	ldr	x0, [x0, #56]
    3c94:	cbz	x0, 3c7c <lzma_memusage@@XZ_5.0+0x4>
    3c98:	ldr	x4, [x0, #56]
    3c9c:	cbz	x4, 3c7c <lzma_memusage@@XZ_5.0+0x4>
    3ca0:	stp	x29, x30, [sp, #-32]!
    3ca4:	mov	x3, #0x0                   	// #0
    3ca8:	mov	x29, sp
    3cac:	ldr	x0, [x0]
    3cb0:	add	x2, sp, #0x18
    3cb4:	add	x1, sp, #0x10
    3cb8:	blr	x4
    3cbc:	cbnz	w0, 3c84 <lzma_memusage@@XZ_5.0+0xc>
    3cc0:	ldr	x0, [sp, #16]
    3cc4:	b	3c88 <lzma_memusage@@XZ_5.0+0x10>

0000000000003cc8 <lzma_memlimit_get@@XZ_5.0>:
    3cc8:	cbnz	x0, 3ce0 <lzma_memlimit_get@@XZ_5.0+0x18>
    3ccc:	mov	x0, #0x0                   	// #0
    3cd0:	ret
    3cd4:	mov	x0, #0x0                   	// #0
    3cd8:	ldp	x29, x30, [sp], #32
    3cdc:	ret
    3ce0:	ldr	x0, [x0, #56]
    3ce4:	cbz	x0, 3ccc <lzma_memlimit_get@@XZ_5.0+0x4>
    3ce8:	ldr	x4, [x0, #56]
    3cec:	cbz	x4, 3ccc <lzma_memlimit_get@@XZ_5.0+0x4>
    3cf0:	stp	x29, x30, [sp, #-32]!
    3cf4:	mov	x3, #0x0                   	// #0
    3cf8:	mov	x29, sp
    3cfc:	ldr	x0, [x0]
    3d00:	add	x2, sp, #0x10
    3d04:	add	x1, sp, #0x18
    3d08:	blr	x4
    3d0c:	cbnz	w0, 3cd4 <lzma_memlimit_get@@XZ_5.0+0xc>
    3d10:	ldr	x0, [sp, #16]
    3d14:	b	3cd8 <lzma_memlimit_get@@XZ_5.0+0x10>

0000000000003d18 <lzma_memlimit_set@@XZ_5.0>:
    3d18:	cbz	x0, 3d54 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3d1c:	ldr	x0, [x0, #56]
    3d20:	cbz	x0, 3d54 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3d24:	ldr	x4, [x0, #56]
    3d28:	cbz	x4, 3d54 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3d2c:	stp	x29, x30, [sp, #-32]!
    3d30:	cmp	x1, #0x0
    3d34:	csinc	x3, x1, xzr, ne  // ne = any
    3d38:	mov	x29, sp
    3d3c:	ldr	x0, [x0]
    3d40:	add	x2, sp, #0x10
    3d44:	add	x1, sp, #0x18
    3d48:	blr	x4
    3d4c:	ldp	x29, x30, [sp], #32
    3d50:	ret
    3d54:	mov	w0, #0xb                   	// #11
    3d58:	ret

0000000000003d5c <lzma_block_unpadded_size@@XZ_5.0>:
    3d5c:	cbz	x0, 3de8 <lzma_block_unpadded_size@@XZ_5.0+0x8c>
    3d60:	ldr	w1, [x0]
    3d64:	cmp	w1, #0x1
    3d68:	b.hi	3de8 <lzma_block_unpadded_size@@XZ_5.0+0x8c>  // b.pmore
    3d6c:	stp	x29, x30, [sp, #-32]!
    3d70:	mov	x29, sp
    3d74:	str	x19, [sp, #16]
    3d78:	ldr	w19, [x0, #4]
    3d7c:	sub	w1, w19, #0x8
    3d80:	cmp	w1, #0x3f8
    3d84:	b.hi	3df4 <lzma_block_unpadded_size@@XZ_5.0+0x98>  // b.pmore
    3d88:	tst	x19, #0x3
    3d8c:	b.ne	3df4 <lzma_block_unpadded_size@@XZ_5.0+0x98>  // b.any
    3d90:	ldr	x1, [x0, #16]
    3d94:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    3d98:	mov	x3, #0x7ffffffffffffffe    	// #9223372036854775806
    3d9c:	add	x2, x1, x2
    3da0:	cmp	x2, x3
    3da4:	b.ls	3df4 <lzma_block_unpadded_size@@XZ_5.0+0x98>  // b.plast
    3da8:	cbz	x1, 3dd8 <lzma_block_unpadded_size@@XZ_5.0+0x7c>
    3dac:	ldr	w0, [x0, #8]
    3db0:	cmp	w0, #0xf
    3db4:	b.hi	3df4 <lzma_block_unpadded_size@@XZ_5.0+0x98>  // b.pmore
    3db8:	cmn	x1, #0x1
    3dbc:	b.eq	3dd8 <lzma_block_unpadded_size@@XZ_5.0+0x7c>  // b.none
    3dc0:	add	x19, x1, w19, uxtw
    3dc4:	bl	3270 <lzma_check_size@plt>
    3dc8:	add	x1, x19, w0, uxtw
    3dcc:	mov	x0, #0x7ffffffffffffffc    	// #9223372036854775804
    3dd0:	cmp	x1, x0
    3dd4:	csel	x1, x1, xzr, ls  // ls = plast
    3dd8:	mov	x0, x1
    3ddc:	ldr	x19, [sp, #16]
    3de0:	ldp	x29, x30, [sp], #32
    3de4:	ret
    3de8:	mov	x1, #0x0                   	// #0
    3dec:	mov	x0, x1
    3df0:	ret
    3df4:	mov	x1, #0x0                   	// #0
    3df8:	b	3dd8 <lzma_block_unpadded_size@@XZ_5.0+0x7c>

0000000000003dfc <lzma_block_compressed_size@@XZ_5.0>:
    3dfc:	stp	x29, x30, [sp, #-32]!
    3e00:	mov	x29, sp
    3e04:	stp	x19, x20, [sp, #16]
    3e08:	mov	x20, x0
    3e0c:	mov	x19, x1
    3e10:	bl	3190 <lzma_block_unpadded_size@plt>
    3e14:	cbz	x0, 3e5c <lzma_block_compressed_size@@XZ_5.0+0x60>
    3e18:	ldr	w0, [x20, #8]
    3e1c:	bl	3270 <lzma_check_size@plt>
    3e20:	ldr	w1, [x20, #4]
    3e24:	add	w0, w0, w1
    3e28:	cmp	x0, x19
    3e2c:	b.cs	3e64 <lzma_block_compressed_size@@XZ_5.0+0x68>  // b.hs, b.nlast
    3e30:	sub	x19, x19, x0
    3e34:	ldr	x0, [x20, #16]
    3e38:	cmn	x0, #0x1
    3e3c:	b.eq	3e48 <lzma_block_compressed_size@@XZ_5.0+0x4c>  // b.none
    3e40:	cmp	x0, x19
    3e44:	b.ne	3e64 <lzma_block_compressed_size@@XZ_5.0+0x68>  // b.any
    3e48:	mov	w0, #0x0                   	// #0
    3e4c:	str	x19, [x20, #16]
    3e50:	ldp	x19, x20, [sp, #16]
    3e54:	ldp	x29, x30, [sp], #32
    3e58:	ret
    3e5c:	mov	w0, #0xb                   	// #11
    3e60:	b	3e50 <lzma_block_compressed_size@@XZ_5.0+0x54>
    3e64:	mov	w0, #0x9                   	// #9
    3e68:	b	3e50 <lzma_block_compressed_size@@XZ_5.0+0x54>

0000000000003e6c <lzma_block_total_size@@XZ_5.0>:
    3e6c:	stp	x29, x30, [sp, #-16]!
    3e70:	mov	x29, sp
    3e74:	bl	3190 <lzma_block_unpadded_size@plt>
    3e78:	cmn	x0, #0x1
    3e7c:	b.eq	3e88 <lzma_block_total_size@@XZ_5.0+0x1c>  // b.none
    3e80:	add	x0, x0, #0x3
    3e84:	and	x0, x0, #0xfffffffffffffffc
    3e88:	ldp	x29, x30, [sp], #16
    3e8c:	ret
    3e90:	stp	x29, x30, [sp, #-32]!
    3e94:	mov	x29, sp
    3e98:	stp	x19, x20, [sp, #16]
    3e9c:	add	x20, x0, #0x50
    3ea0:	mov	x19, x0
    3ea4:	mov	x0, x20
    3ea8:	bl	3440 <lzma_lzma_preset@plt>
    3eac:	tst	w0, #0xff
    3eb0:	b.ne	3ed4 <lzma_block_total_size@@XZ_5.0+0x68>  // b.any
    3eb4:	mov	x0, #0x21                  	// #33
    3eb8:	stp	x0, x20, [x19]
    3ebc:	mov	x0, #0xffffffffffffffff    	// #-1
    3ec0:	str	x0, [x19, #16]
    3ec4:	mov	w0, #0x0                   	// #0
    3ec8:	ldp	x19, x20, [sp, #16]
    3ecc:	ldp	x29, x30, [sp], #32
    3ed0:	ret
    3ed4:	mov	w0, #0x1                   	// #1
    3ed8:	b	3ec8 <lzma_block_total_size@@XZ_5.0+0x5c>
    3edc:	adrp	x5, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    3ee0:	add	x5, x5, #0x658
    3ee4:	mov	x3, #0x0                   	// #0
    3ee8:	mov	w8, #0x1                   	// #1
    3eec:	mov	x6, #0x0                   	// #0
    3ef0:	mov	x10, #0x18                  	// #24
    3ef4:	lsl	x4, x3, #4
    3ef8:	mov	x7, #0x0                   	// #0
    3efc:	ldr	x11, [x0, x4]
    3f00:	mul	x2, x7, x10
    3f04:	ldr	x9, [x2, x5]
    3f08:	cmp	x9, x11
    3f0c:	b.ne	3f68 <lzma_block_total_size@@XZ_5.0+0xfc>  // b.any
    3f10:	cbz	w8, 3f78 <lzma_block_total_size@@XZ_5.0+0x10c>
    3f14:	add	x4, x4, #0x10
    3f18:	add	x2, x5, x2
    3f1c:	add	x3, x3, #0x1
    3f20:	ldr	x4, [x0, x4]
    3f24:	ldrb	w7, [x2, #18]
    3f28:	ldrb	w8, [x2, #16]
    3f2c:	cmn	x4, #0x1
    3f30:	add	x6, x6, x7
    3f34:	b.ne	3ef4 <lzma_block_total_size@@XZ_5.0+0x88>  // b.any
    3f38:	ldrb	w0, [x2, #17]
    3f3c:	cmp	x3, #0x4
    3f40:	eor	w2, w0, #0x1
    3f44:	cset	w0, hi  // hi = pmore
    3f48:	orr	w0, w0, w2
    3f4c:	tst	w0, #0xff
    3f50:	b.ne	3f78 <lzma_block_total_size@@XZ_5.0+0x10c>  // b.any
    3f54:	cmp	x6, #0x3
    3f58:	b.hi	3f78 <lzma_block_total_size@@XZ_5.0+0x10c>  // b.pmore
    3f5c:	mov	w0, #0x0                   	// #0
    3f60:	str	x3, [x1]
    3f64:	ret
    3f68:	cmn	x9, #0x1
    3f6c:	b.eq	3f78 <lzma_block_total_size@@XZ_5.0+0x10c>  // b.none
    3f70:	add	x7, x7, #0x1
    3f74:	b	3f00 <lzma_block_total_size@@XZ_5.0+0x94>
    3f78:	mov	w0, #0x8                   	// #8
    3f7c:	b	3f64 <lzma_block_total_size@@XZ_5.0+0xf8>

0000000000003f80 <lzma_filters_copy@@XZ_5.0>:
    3f80:	stp	x29, x30, [sp, #-96]!
    3f84:	cmp	x0, #0x0
    3f88:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    3f8c:	mov	x29, sp
    3f90:	stp	x19, x20, [sp, #16]
    3f94:	stp	x21, x22, [sp, #32]
    3f98:	stp	x23, x24, [sp, #48]
    3f9c:	stp	x25, x26, [sp, #64]
    3fa0:	str	x27, [sp, #80]
    3fa4:	b.eq	40bc <lzma_filters_copy@@XZ_5.0+0x13c>  // b.none
    3fa8:	adrp	x25, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    3fac:	mov	x22, x0
    3fb0:	mov	x19, x1
    3fb4:	mov	x24, x2
    3fb8:	add	x25, x25, #0x658
    3fbc:	mov	x23, #0x8                   	// #8
    3fc0:	mov	x21, #0x0                   	// #0
    3fc4:	mov	x20, #0x0                   	// #0
    3fc8:	mov	x26, #0x18                  	// #24
    3fcc:	ldr	x0, [x22, x21]
    3fd0:	cmn	x0, #0x1
    3fd4:	b.ne	4008 <lzma_filters_copy@@XZ_5.0+0x88>  // b.any
    3fd8:	add	x1, x19, x21
    3fdc:	str	x0, [x19, x21]
    3fe0:	mov	w21, #0x0                   	// #0
    3fe4:	str	xzr, [x1, #8]
    3fe8:	mov	w0, w21
    3fec:	ldp	x19, x20, [sp, #16]
    3ff0:	ldp	x21, x22, [sp, #32]
    3ff4:	ldp	x23, x24, [sp, #48]
    3ff8:	ldp	x25, x26, [sp, #64]
    3ffc:	ldr	x27, [sp, #80]
    4000:	ldp	x29, x30, [sp], #96
    4004:	ret
    4008:	cmp	x20, #0x4
    400c:	b.eq	40a8 <lzma_filters_copy@@XZ_5.0+0x128>  // b.none
    4010:	str	x0, [x19, x21]
    4014:	ldr	x0, [x22, x23]
    4018:	cbz	x0, 4060 <lzma_filters_copy@@XZ_5.0+0xe0>
    401c:	ldr	x3, [x22, x21]
    4020:	mov	x1, #0x0                   	// #0
    4024:	mul	x0, x1, x26
    4028:	ldr	x2, [x0, x25]
    402c:	cmp	x3, x2
    4030:	b.ne	4074 <lzma_filters_copy@@XZ_5.0+0xf4>  // b.any
    4034:	add	x0, x25, x0
    4038:	mov	x1, x24
    403c:	ldr	x27, [x0, #8]
    4040:	mov	x0, x27
    4044:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4048:	str	x0, [x19, x23]
    404c:	cbz	x0, 40b4 <lzma_filters_copy@@XZ_5.0+0x134>
    4050:	ldr	x1, [x22, x23]
    4054:	mov	x2, x27
    4058:	bl	3090 <memcpy@plt>
    405c:	b	4064 <lzma_filters_copy@@XZ_5.0+0xe4>
    4060:	str	xzr, [x19, x23]
    4064:	add	x20, x20, #0x1
    4068:	add	x21, x21, #0x10
    406c:	add	x23, x23, #0x10
    4070:	b	3fcc <lzma_filters_copy@@XZ_5.0+0x4c>
    4074:	cmn	x2, #0x1
    4078:	b.eq	40a8 <lzma_filters_copy@@XZ_5.0+0x128>  // b.none
    407c:	add	x1, x1, #0x1
    4080:	b	4024 <lzma_filters_copy@@XZ_5.0+0xa4>
    4084:	ldur	x0, [x20, #-8]
    4088:	mov	x1, x24
    408c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    4090:	stur	xzr, [x20, #-8]
    4094:	mov	x20, x22
    4098:	sub	x22, x20, #0x10
    409c:	cmp	x20, x19
    40a0:	b.ne	4084 <lzma_filters_copy@@XZ_5.0+0x104>  // b.any
    40a4:	b	3fe8 <lzma_filters_copy@@XZ_5.0+0x68>
    40a8:	mov	w21, #0x8                   	// #8
    40ac:	add	x20, x19, x20, lsl #4
    40b0:	b	4098 <lzma_filters_copy@@XZ_5.0+0x118>
    40b4:	mov	w21, #0x5                   	// #5
    40b8:	b	40ac <lzma_filters_copy@@XZ_5.0+0x12c>
    40bc:	mov	w21, #0xb                   	// #11
    40c0:	b	3fe8 <lzma_filters_copy@@XZ_5.0+0x68>
    40c4:	stp	x29, x30, [sp, #-224]!
    40c8:	mov	x29, sp
    40cc:	stp	x19, x20, [sp, #16]
    40d0:	stp	x21, x22, [sp, #32]
    40d4:	stp	x23, x24, [sp, #48]
    40d8:	stp	x25, x26, [sp, #64]
    40dc:	stp	x27, x28, [sp, #80]
    40e0:	cbz	x2, 422c <lzma_filters_copy@@XZ_5.0+0x2ac>
    40e4:	mov	x20, x0
    40e8:	mov	x12, x2
    40ec:	ldr	x0, [x2]
    40f0:	cmn	x0, #0x1
    40f4:	b.eq	422c <lzma_filters_copy@@XZ_5.0+0x2ac>  // b.none
    40f8:	and	w13, w4, #0xff
    40fc:	mov	x21, x1
    4100:	mov	x22, x3
    4104:	add	x1, sp, #0x60
    4108:	mov	x0, x2
    410c:	bl	3edc <lzma_block_total_size@@XZ_5.0+0x70>
    4110:	mov	w19, w0
    4114:	cbnz	w0, 41e4 <lzma_filters_copy@@XZ_5.0+0x264>
    4118:	mov	x19, x12
    411c:	cbnz	w13, 4168 <lzma_filters_copy@@XZ_5.0+0x1e8>
    4120:	add	x23, sp, #0x68
    4124:	mov	x24, #0x0                   	// #0
    4128:	ldr	x0, [sp, #96]
    412c:	cmp	x0, x24
    4130:	b.ls	4188 <lzma_filters_copy@@XZ_5.0+0x208>  // b.plast
    4134:	ldr	x0, [x19]
    4138:	blr	x22
    413c:	cbz	x0, 41e0 <lzma_filters_copy@@XZ_5.0+0x260>
    4140:	ldr	x0, [x0, #8]
    4144:	cbz	x0, 41e0 <lzma_filters_copy@@XZ_5.0+0x260>
    4148:	ldr	x1, [x19]
    414c:	stp	x1, x0, [x23]
    4150:	add	x24, x24, #0x1
    4154:	ldr	x0, [x19, #8]
    4158:	add	x23, x23, #0x18
    415c:	add	x19, x19, #0x10
    4160:	stur	x0, [x23, #-8]
    4164:	b	4128 <lzma_filters_copy@@XZ_5.0+0x1a8>
    4168:	add	x26, sp, #0x68
    416c:	add	x27, sp, #0x70
    4170:	add	x28, sp, #0x78
    4174:	mov	x24, #0x0                   	// #0
    4178:	mov	x25, #0x18                  	// #24
    417c:	ldr	x2, [sp, #96]
    4180:	cmp	x2, x24
    4184:	b.hi	41cc <lzma_filters_copy@@XZ_5.0+0x24c>  // b.pmore
    4188:	ldr	x0, [sp, #96]
    418c:	mov	x1, #0x18                  	// #24
    4190:	add	x2, sp, #0x68
    4194:	mul	x0, x0, x1
    4198:	mov	x1, #0xffffffffffffffff    	// #-1
    419c:	str	x1, [x2, x0]
    41a0:	add	x1, sp, #0x70
    41a4:	str	xzr, [x1, x0]
    41a8:	mov	x1, x21
    41ac:	mov	x0, x20
    41b0:	bl	389c <lzma_version_string@@XZ_5.0+0x1cc>
    41b4:	mov	w19, w0
    41b8:	cbz	w0, 41e4 <lzma_filters_copy@@XZ_5.0+0x264>
    41bc:	mov	x1, x21
    41c0:	mov	x0, x20
    41c4:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    41c8:	b	41e4 <lzma_filters_copy@@XZ_5.0+0x264>
    41cc:	ldr	x0, [x19]
    41d0:	sub	x2, x2, #0x1
    41d4:	sub	x23, x2, x24
    41d8:	blr	x22
    41dc:	cbnz	x0, 4204 <lzma_filters_copy@@XZ_5.0+0x284>
    41e0:	mov	w19, #0x8                   	// #8
    41e4:	mov	w0, w19
    41e8:	ldp	x19, x20, [sp, #16]
    41ec:	ldp	x21, x22, [sp, #32]
    41f0:	ldp	x23, x24, [sp, #48]
    41f4:	ldp	x25, x26, [sp, #64]
    41f8:	ldp	x27, x28, [sp, #80]
    41fc:	ldp	x29, x30, [sp], #224
    4200:	ret
    4204:	ldr	x0, [x0, #8]
    4208:	cbz	x0, 41e0 <lzma_filters_copy@@XZ_5.0+0x260>
    420c:	mul	x2, x23, x25
    4210:	add	x24, x24, #0x1
    4214:	str	x0, [x27, x2]
    4218:	ldp	x1, x0, [x19]
    421c:	add	x19, x19, #0x10
    4220:	str	x1, [x26, x2]
    4224:	str	x0, [x28, x2]
    4228:	b	417c <lzma_filters_copy@@XZ_5.0+0x1fc>
    422c:	mov	w19, #0xb                   	// #11
    4230:	b	41e4 <lzma_filters_copy@@XZ_5.0+0x264>
    4234:	cbnz	x1, 4240 <lzma_filters_copy@@XZ_5.0+0x2c0>
    4238:	mov	x0, #0xffffffffffffffff    	// #-1
    423c:	ret
    4240:	stp	x29, x30, [sp, #-64]!
    4244:	mov	x29, sp
    4248:	str	x21, [sp, #32]
    424c:	mov	x21, x0
    4250:	ldr	x0, [x1]
    4254:	stp	x19, x20, [sp, #16]
    4258:	mov	x19, x1
    425c:	cmn	x0, #0x1
    4260:	b.eq	4284 <lzma_filters_copy@@XZ_5.0+0x304>  // b.none
    4264:	add	x1, sp, #0x38
    4268:	mov	x0, x19
    426c:	bl	3edc <lzma_block_total_size@@XZ_5.0+0x70>
    4270:	cbnz	w0, 4284 <lzma_filters_copy@@XZ_5.0+0x304>
    4274:	mov	x20, #0x0                   	// #0
    4278:	ldr	x0, [x19]
    427c:	blr	x21
    4280:	cbnz	x0, 4298 <lzma_filters_copy@@XZ_5.0+0x318>
    4284:	mov	x0, #0xffffffffffffffff    	// #-1
    4288:	ldp	x19, x20, [sp, #16]
    428c:	ldr	x21, [sp, #32]
    4290:	ldp	x29, x30, [sp], #64
    4294:	ret
    4298:	ldr	x1, [x0, #16]
    429c:	cbnz	x1, 42b8 <lzma_filters_copy@@XZ_5.0+0x338>
    42a0:	add	x20, x20, #0x400
    42a4:	ldr	x0, [x19, #16]!
    42a8:	cmn	x0, #0x1
    42ac:	b.ne	4278 <lzma_filters_copy@@XZ_5.0+0x2f8>  // b.any
    42b0:	add	x0, x20, #0x8, lsl #12
    42b4:	b	4288 <lzma_filters_copy@@XZ_5.0+0x308>
    42b8:	ldr	x0, [x19, #8]
    42bc:	blr	x1
    42c0:	cmn	x0, #0x1
    42c4:	b.eq	4284 <lzma_filters_copy@@XZ_5.0+0x304>  // b.none
    42c8:	add	x20, x20, x0
    42cc:	b	42a4 <lzma_filters_copy@@XZ_5.0+0x324>

00000000000042d0 <lzma_physmem@@XZ_5.0>:
    42d0:	b	3644 <pthread_cond_timedwait@plt+0xe4>
    42d4:	stp	x29, x30, [sp, #-48]!
    42d8:	mov	x29, sp
    42dc:	stp	x19, x20, [sp, #16]
    42e0:	mov	x19, x0
    42e4:	mov	x20, x1
    42e8:	ldr	x0, [x0, #24]
    42ec:	str	x2, [sp, #40]
    42f0:	cbz	x0, 42f8 <lzma_physmem@@XZ_5.0+0x28>
    42f4:	bl	42d4 <lzma_physmem@@XZ_5.0+0x4>
    42f8:	ldr	x0, [x19, #32]
    42fc:	cbz	x0, 430c <lzma_physmem@@XZ_5.0+0x3c>
    4300:	ldr	x2, [sp, #40]
    4304:	mov	x1, x20
    4308:	bl	42d4 <lzma_physmem@@XZ_5.0+0x4>
    430c:	mov	x1, x20
    4310:	mov	x0, x19
    4314:	ldp	x19, x20, [sp, #16]
    4318:	ldr	x16, [sp, #40]
    431c:	ldp	x29, x30, [sp], #48
    4320:	br	x16
    4324:	stp	x29, x30, [sp, #-16]!
    4328:	mov	x1, x0
    432c:	mov	x0, #0x50                  	// #80
    4330:	mov	x29, sp
    4334:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4338:	cbz	x0, 435c <lzma_physmem@@XZ_5.0+0x8c>
    433c:	mov	x1, #0x200                 	// #512
    4340:	stp	xzr, xzr, [x0]
    4344:	str	xzr, [x0, #16]
    4348:	str	wzr, [x0, #24]
    434c:	stp	xzr, xzr, [x0, #32]
    4350:	stp	xzr, xzr, [x0, #48]
    4354:	str	x1, [x0, #64]
    4358:	str	wzr, [x0, #72]
    435c:	ldp	x29, x30, [sp], #16
    4360:	ret
    4364:	stp	x29, x30, [sp, #-48]!
    4368:	mov	x29, sp
    436c:	stp	x19, x20, [sp, #16]
    4370:	mov	w20, w2
    4374:	mov	x19, x3
    4378:	stp	x21, x22, [sp, #32]
    437c:	mov	x21, x0
    4380:	mov	x22, x1
    4384:	mov	x0, #0xa8                  	// #168
    4388:	mov	x1, x4
    438c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4390:	cbz	x0, 43c0 <lzma_physmem@@XZ_5.0+0xf0>
    4394:	mov	w1, #0xffffffff            	// #-1
    4398:	stp	x22, x21, [x0]
    439c:	stp	xzr, xzr, [x0, #16]
    43a0:	str	xzr, [x0, #32]
    43a4:	str	w20, [x0, #40]
    43a8:	stp	x19, xzr, [x0, #48]
    43ac:	stp	xzr, xzr, [x0, #64]
    43b0:	str	wzr, [x0, #80]
    43b4:	stp	xzr, xzr, [x0, #88]
    43b8:	str	w1, [x0, #104]
    43bc:	str	xzr, [x0, #160]
    43c0:	ldp	x19, x20, [sp, #16]
    43c4:	ldp	x21, x22, [sp, #32]
    43c8:	ldp	x29, x30, [sp], #48
    43cc:	ret
    43d0:	ldr	w2, [x0, #24]
    43d4:	ldr	x4, [x0]
    43d8:	add	w2, w2, #0x1
    43dc:	ldr	x3, [x0, #16]
    43e0:	stp	x3, xzr, [x1, #16]
    43e4:	str	xzr, [x1, #32]
    43e8:	str	w2, [x0, #24]
    43ec:	cbnz	x4, 43fc <lzma_physmem@@XZ_5.0+0x12c>
    43f0:	stp	x1, x1, [x0]
    43f4:	str	x1, [x0, #16]
    43f8:	ret
    43fc:	str	x1, [x3, #32]
    4400:	clz	w3, w2
    4404:	eor	w4, w3, #0x1f
    4408:	str	x1, [x0, #16]
    440c:	mov	w3, #0x1                   	// #1
    4410:	lsl	w3, w3, w4
    4414:	cmp	w2, w3
    4418:	b.eq	43f8 <lzma_physmem@@XZ_5.0+0x128>  // b.none
    441c:	rbit	w2, w2
    4420:	clz	w2, w2
    4424:	add	w2, w2, #0x2
    4428:	subs	w2, w2, #0x1
    442c:	ldr	x1, [x1, #16]
    4430:	b.ne	4428 <lzma_physmem@@XZ_5.0+0x158>  // b.any
    4434:	ldr	x3, [x1, #16]
    4438:	ldr	x2, [x1, #32]
    443c:	cbnz	x3, 4464 <lzma_physmem@@XZ_5.0+0x194>
    4440:	str	x2, [x0]
    4444:	ldr	x0, [x2, #24]
    4448:	str	x3, [x2, #16]
    444c:	str	x0, [x1, #32]
    4450:	cbz	x0, 4458 <lzma_physmem@@XZ_5.0+0x188>
    4454:	str	x1, [x0, #16]
    4458:	str	x1, [x2, #24]
    445c:	str	x2, [x1, #16]
    4460:	b	43f8 <lzma_physmem@@XZ_5.0+0x128>
    4464:	str	x2, [x3, #32]
    4468:	b	4444 <lzma_physmem@@XZ_5.0+0x174>
    446c:	stp	x29, x30, [sp, #-48]!
    4470:	mov	x29, sp
    4474:	stp	x19, x20, [sp, #16]
    4478:	mov	x20, x0
    447c:	str	x21, [sp, #32]
    4480:	mov	x21, x1
    4484:	mov	x19, x21
    4488:	ldp	x1, x21, [x21, #24]
    448c:	cbz	x1, 4498 <lzma_physmem@@XZ_5.0+0x1c8>
    4490:	mov	x0, x20
    4494:	bl	446c <lzma_physmem@@XZ_5.0+0x19c>
    4498:	ldr	x1, [x20]
    449c:	ldr	x0, [x19]
    44a0:	add	x0, x0, x1
    44a4:	ldr	x1, [x20, #8]
    44a8:	str	x0, [x19]
    44ac:	ldr	x0, [x19, #8]
    44b0:	add	x0, x0, x1
    44b4:	ldr	w1, [x20, #24]
    44b8:	str	x0, [x19, #8]
    44bc:	ldr	w0, [x19, #40]
    44c0:	add	w0, w0, w1
    44c4:	ldr	x1, [x20, #16]
    44c8:	str	w0, [x19, #40]
    44cc:	ldr	x0, [x19, #48]
    44d0:	add	x0, x0, x1
    44d4:	str	x0, [x19, #48]
    44d8:	ldr	x0, [x20, #32]
    44dc:	mov	x1, x19
    44e0:	bl	43d0 <lzma_physmem@@XZ_5.0+0x100>
    44e4:	cbnz	x21, 4484 <lzma_physmem@@XZ_5.0+0x1b4>
    44e8:	ldp	x19, x20, [sp, #16]
    44ec:	ldr	x21, [sp, #32]
    44f0:	ldp	x29, x30, [sp], #48
    44f4:	ret
    44f8:	ldr	x1, [x0, #32]
    44fc:	cbz	x1, 4510 <lzma_physmem@@XZ_5.0+0x240>
    4500:	mov	x0, x1
    4504:	ldr	x1, [x1, #24]
    4508:	cbnz	x1, 4500 <lzma_physmem@@XZ_5.0+0x230>
    450c:	ret
    4510:	mov	x2, x0
    4514:	ldr	x0, [x0, #16]
    4518:	cbz	x0, 450c <lzma_physmem@@XZ_5.0+0x23c>
    451c:	ldr	x1, [x0, #32]
    4520:	cmp	x2, x1
    4524:	b.eq	4510 <lzma_physmem@@XZ_5.0+0x240>  // b.none
    4528:	b	450c <lzma_physmem@@XZ_5.0+0x23c>
    452c:	stp	x29, x30, [sp, #-32]!
    4530:	mov	x29, sp
    4534:	str	x19, [sp, #16]
    4538:	mov	x19, x1
    453c:	add	x19, x19, #0x7
    4540:	bl	3480 <lzma_vli_size@plt>
    4544:	add	w0, w0, #0x1
    4548:	add	x0, x0, x19
    454c:	and	x0, x0, #0xfffffffffffffffc
    4550:	ldr	x19, [sp, #16]
    4554:	ldp	x29, x30, [sp], #32
    4558:	ret
    455c:	stp	x29, x30, [sp, #-80]!
    4560:	mov	x29, sp
    4564:	stp	x19, x20, [sp, #16]
    4568:	mov	x19, x0
    456c:	stp	x21, x22, [sp, #32]
    4570:	ldp	x21, x20, [x0, #264]
    4574:	stp	x23, x24, [sp, #48]
    4578:	ldr	x24, [x21, #72]
    457c:	str	x25, [sp, #64]
    4580:	ldr	x25, [x0, #280]
    4584:	cbnz	x20, 465c <lzma_physmem@@XZ_5.0+0x38c>
    4588:	mov	x0, #0x2                   	// #2
    458c:	str	x0, [x19, #288]
    4590:	ldr	w0, [x21, #40]
    4594:	ldr	w1, [x21, #104]
    4598:	ldp	x22, x23, [x21]
    459c:	str	x0, [x19, #32]
    45a0:	ldr	x0, [x21, #88]
    45a4:	stp	x0, x23, [x19, #40]
    45a8:	cmn	w1, #0x1
    45ac:	str	x22, [x19, #56]
    45b0:	b.eq	46ac <lzma_physmem@@XZ_5.0+0x3dc>  // b.none
    45b4:	add	x1, x21, #0x68
    45b8:	str	x1, [x19]
    45bc:	ldr	x1, [x21, #160]
    45c0:	str	x1, [x19, #80]
    45c4:	cbnz	x24, 46b4 <lzma_physmem@@XZ_5.0+0x3e4>
    45c8:	mov	x1, #0x0                   	// #0
    45cc:	mov	x0, #0x0                   	// #0
    45d0:	bl	452c <lzma_physmem@@XZ_5.0+0x25c>
    45d4:	add	x0, x0, #0x18
    45d8:	stp	x0, xzr, [x19, #64]
    45dc:	cbz	x20, 4644 <lzma_physmem@@XZ_5.0+0x374>
    45e0:	ldr	x0, [x20, #40]
    45e4:	ldr	x1, [x21, #48]
    45e8:	add	x0, x25, x0
    45ec:	str	x0, [x19, #144]
    45f0:	add	x0, x1, x0
    45f4:	str	x0, [x19, #120]
    45f8:	lsl	x1, x25, #4
    45fc:	cbnz	x25, 46e4 <lzma_physmem@@XZ_5.0+0x414>
    4600:	ldp	x2, x0, [x20]
    4604:	add	x20, x20, x1
    4608:	add	x22, x22, x2
    460c:	ldr	x1, [x20, #64]
    4610:	sub	x1, x1, x2
    4614:	stp	x2, x1, [x19, #160]
    4618:	ldr	x1, [x20, #72]
    461c:	str	x22, [x19, #136]
    4620:	sub	x1, x1, x0
    4624:	add	x0, x0, #0xc
    4628:	str	x1, [x19, #176]
    462c:	add	x1, x1, #0x3
    4630:	and	x1, x1, #0xfffffffffffffffc
    4634:	str	x0, [x19, #152]
    4638:	add	x0, x23, x0
    463c:	str	x0, [x19, #128]
    4640:	str	x1, [x19, #184]
    4644:	ldp	x19, x20, [sp, #16]
    4648:	ldp	x21, x22, [sp, #32]
    464c:	ldp	x23, x24, [sp, #48]
    4650:	ldr	x25, [sp, #64]
    4654:	ldp	x29, x30, [sp], #80
    4658:	ret
    465c:	ldr	x0, [x0, #256]
    4660:	ldr	x0, [x0, #16]
    4664:	cmp	x0, x21
    4668:	b.ne	4674 <lzma_physmem@@XZ_5.0+0x3a4>  // b.any
    466c:	cmp	x20, x24
    4670:	b.eq	467c <lzma_physmem@@XZ_5.0+0x3ac>  // b.none
    4674:	str	xzr, [x19, #288]
    4678:	b	4590 <lzma_physmem@@XZ_5.0+0x2c0>
    467c:	ldr	x0, [x21, #64]
    4680:	cmp	x0, x20
    4684:	b.eq	469c <lzma_physmem@@XZ_5.0+0x3cc>  // b.none
    4688:	mov	x0, #0x1                   	// #1
    468c:	str	x0, [x19, #288]
    4690:	ldr	x0, [x20, #16]
    4694:	str	x0, [x19, #272]
    4698:	b	4590 <lzma_physmem@@XZ_5.0+0x2c0>
    469c:	mov	x0, #0x2                   	// #2
    46a0:	str	xzr, [x19, #272]
    46a4:	str	x0, [x19, #288]
    46a8:	b	4590 <lzma_physmem@@XZ_5.0+0x2c0>
    46ac:	mov	x1, #0x0                   	// #0
    46b0:	b	45b8 <lzma_physmem@@XZ_5.0+0x2e8>
    46b4:	ldr	x1, [x21, #96]
    46b8:	bl	452c <lzma_physmem@@XZ_5.0+0x25c>
    46bc:	ldr	x2, [x24, #56]
    46c0:	add	x2, x24, x2, lsl #4
    46c4:	ldr	x1, [x2, #72]
    46c8:	add	x1, x1, #0x3
    46cc:	and	x1, x1, #0xfffffffffffffffc
    46d0:	add	x1, x1, #0x18
    46d4:	add	x1, x1, x0
    46d8:	ldr	x0, [x2, #64]
    46dc:	stp	x1, x0, [x19, #64]
    46e0:	b	45dc <lzma_physmem@@XZ_5.0+0x30c>
    46e4:	add	x2, x20, x1
    46e8:	ldr	x0, [x2, #56]
    46ec:	ldr	x2, [x2, #48]
    46f0:	add	x0, x0, #0x3
    46f4:	and	x0, x0, #0xfffffffffffffffc
    46f8:	b	4604 <lzma_physmem@@XZ_5.0+0x334>
    46fc:	stp	x29, x30, [sp, #-32]!
    4700:	mov	x29, sp
    4704:	stp	x19, x20, [sp, #16]
    4708:	mov	x19, x0
    470c:	mov	x20, x1
    4710:	ldr	x0, [x0, #56]
    4714:	cbz	x0, 4724 <lzma_physmem@@XZ_5.0+0x454>
    4718:	adrp	x2, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    471c:	ldr	x2, [x2, #3992]
    4720:	bl	42d4 <lzma_physmem@@XZ_5.0+0x4>
    4724:	mov	x1, x20
    4728:	mov	x0, x19
    472c:	ldp	x19, x20, [sp, #16]
    4730:	ldp	x29, x30, [sp], #32
    4734:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>

0000000000004738 <lzma_index_init@@XZ_5.0>:
    4738:	stp	x29, x30, [sp, #-32]!
    473c:	mov	x29, sp
    4740:	stp	x19, x20, [sp, #16]
    4744:	mov	x20, x0
    4748:	bl	4324 <lzma_physmem@@XZ_5.0+0x54>
    474c:	mov	x19, x0
    4750:	cbz	x0, 4784 <lzma_index_init@@XZ_5.0+0x4c>
    4754:	mov	x1, #0x0                   	// #0
    4758:	mov	x4, x20
    475c:	mov	x3, #0x0                   	// #0
    4760:	mov	w2, #0x1                   	// #1
    4764:	mov	x0, #0x0                   	// #0
    4768:	bl	4364 <lzma_physmem@@XZ_5.0+0x94>
    476c:	mov	x1, x0
    4770:	cbnz	x0, 4794 <lzma_index_init@@XZ_5.0+0x5c>
    4774:	mov	x0, x19
    4778:	mov	x19, #0x0                   	// #0
    477c:	mov	x1, x20
    4780:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    4784:	mov	x0, x19
    4788:	ldp	x19, x20, [sp, #16]
    478c:	ldp	x29, x30, [sp], #32
    4790:	ret
    4794:	mov	x0, x19
    4798:	bl	43d0 <lzma_physmem@@XZ_5.0+0x100>
    479c:	b	4784 <lzma_index_init@@XZ_5.0+0x4c>

00000000000047a0 <lzma_index_end@@XZ_5.0>:
    47a0:	cbz	x0, 47e0 <lzma_index_end@@XZ_5.0+0x40>
    47a4:	stp	x29, x30, [sp, #-32]!
    47a8:	mov	x29, sp
    47ac:	stp	x19, x20, [sp, #16]
    47b0:	mov	x19, x0
    47b4:	mov	x20, x1
    47b8:	ldr	x0, [x0]
    47bc:	cbz	x0, 47cc <lzma_index_end@@XZ_5.0+0x2c>
    47c0:	adrp	x2, 4000 <lzma_filters_copy@@XZ_5.0+0x80>
    47c4:	add	x2, x2, #0x6fc
    47c8:	bl	42d4 <lzma_physmem@@XZ_5.0+0x4>
    47cc:	mov	x1, x20
    47d0:	mov	x0, x19
    47d4:	ldp	x19, x20, [sp, #16]
    47d8:	ldp	x29, x30, [sp], #32
    47dc:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    47e0:	ret
    47e4:	mov	x2, #0xffffffffffffffc     	// #1152921504606846972
    47e8:	cmp	x1, x2
    47ec:	mov	x2, #0xfffffffffffffffb    	// #-5
    47f0:	movk	x2, #0xfff, lsl #48
    47f4:	csel	x1, x1, x2, cc  // cc = lo, ul, last
    47f8:	str	x1, [x0, #64]
    47fc:	ret

0000000000004800 <lzma_index_memusage@@XZ_5.0>:
    4800:	sub	x3, x0, #0x1
    4804:	mov	x2, #0xfffffffe            	// #4294967294
    4808:	cmp	x3, x2
    480c:	b.hi	485c <lzma_index_memusage@@XZ_5.0+0x5c>  // b.pmore
    4810:	mov	x2, #0x800                 	// #2048
    4814:	movk	x2, #0xfd, lsl #16
    4818:	movk	x2, #0x8e55, lsl #32
    481c:	movk	x2, #0xfd0, lsl #48
    4820:	cmp	x1, x2
    4824:	b.hi	485c <lzma_index_memusage@@XZ_5.0+0x5c>  // b.pmore
    4828:	add	x1, x1, #0x1ff
    482c:	mov	x2, #0x128                 	// #296
    4830:	lsr	x1, x1, #9
    4834:	mul	x0, x0, x2
    4838:	mov	x2, #0x2060                	// #8288
    483c:	mul	x1, x1, x2
    4840:	mov	x2, #0xffffffffffffff8f    	// #-113
    4844:	sub	x2, x2, x0
    4848:	add	x0, x0, #0x70
    484c:	add	x0, x0, x1
    4850:	cmp	x2, x1
    4854:	csinv	x0, x0, xzr, cs  // cs = hs, nlast
    4858:	ret
    485c:	mov	x0, #0xffffffffffffffff    	// #-1
    4860:	b	4858 <lzma_index_memusage@@XZ_5.0+0x58>

0000000000004864 <lzma_index_memused@@XZ_5.0>:
    4864:	ldr	x1, [x0, #48]
    4868:	ldr	w0, [x0, #24]
    486c:	b	3180 <lzma_index_memusage@plt>

0000000000004870 <lzma_index_block_count@@XZ_5.0>:
    4870:	ldr	x0, [x0, #48]
    4874:	ret

0000000000004878 <lzma_index_stream_count@@XZ_5.0>:
    4878:	ldr	w0, [x0, #24]
    487c:	ret

0000000000004880 <lzma_index_size@@XZ_5.0>:
    4880:	ldr	x1, [x0, #56]
    4884:	ldr	x0, [x0, #48]
    4888:	b	452c <lzma_physmem@@XZ_5.0+0x25c>

000000000000488c <lzma_index_total_size@@XZ_5.0>:
    488c:	ldr	x0, [x0, #40]
    4890:	ret

0000000000004894 <lzma_index_stream_size@@XZ_5.0>:
    4894:	stp	x29, x30, [sp, #-32]!
    4898:	mov	x29, sp
    489c:	str	x19, [sp, #16]
    48a0:	mov	x19, x0
    48a4:	ldp	x0, x1, [x0, #48]
    48a8:	bl	452c <lzma_physmem@@XZ_5.0+0x25c>
    48ac:	ldr	x1, [x19, #40]
    48b0:	ldr	x19, [sp, #16]
    48b4:	add	x1, x1, #0x18
    48b8:	add	x0, x1, x0
    48bc:	ldp	x29, x30, [sp], #32
    48c0:	ret

00000000000048c4 <lzma_index_file_size@@XZ_5.0>:
    48c4:	stp	x29, x30, [sp, #-32]!
    48c8:	mov	x29, sp
    48cc:	ldr	x3, [x0, #16]
    48d0:	ldr	x1, [x3, #72]
    48d4:	ldr	x4, [x3, #8]
    48d8:	str	x19, [sp, #16]
    48dc:	cbz	x1, 4924 <lzma_index_file_size@@XZ_5.0+0x60>
    48e0:	ldr	x0, [x1, #56]
    48e4:	add	x0, x1, x0, lsl #4
    48e8:	ldr	x2, [x0, #72]
    48ec:	add	x19, x2, #0x3
    48f0:	ldr	x2, [x3, #160]
    48f4:	and	x19, x19, #0xfffffffffffffffc
    48f8:	add	x19, x19, #0x18
    48fc:	add	x2, x4, x2
    4900:	adds	x19, x19, x2
    4904:	ldp	x0, x1, [x3, #88]
    4908:	b.mi	492c <lzma_index_file_size@@XZ_5.0+0x68>  // b.first
    490c:	bl	452c <lzma_physmem@@XZ_5.0+0x25c>
    4910:	adds	x0, x19, x0
    4914:	csinv	x0, x0, xzr, pl  // pl = nfrst
    4918:	ldr	x19, [sp, #16]
    491c:	ldp	x29, x30, [sp], #32
    4920:	ret
    4924:	mov	x2, #0x0                   	// #0
    4928:	b	48ec <lzma_index_file_size@@XZ_5.0+0x28>
    492c:	mov	x0, #0xffffffffffffffff    	// #-1
    4930:	b	4918 <lzma_index_file_size@@XZ_5.0+0x54>

0000000000004934 <lzma_index_uncompressed_size@@XZ_5.0>:
    4934:	ldr	x0, [x0, #32]
    4938:	ret

000000000000493c <lzma_index_checks@@XZ_5.0>:
    493c:	mov	x1, x0
    4940:	ldr	w0, [x0, #72]
    4944:	ldr	x1, [x1, #16]
    4948:	ldr	w2, [x1, #104]
    494c:	cmn	w2, #0x1
    4950:	b.eq	4964 <lzma_index_checks@@XZ_5.0+0x28>  // b.none
    4954:	ldr	w2, [x1, #120]
    4958:	mov	w1, #0x1                   	// #1
    495c:	lsl	w1, w1, w2
    4960:	orr	w0, w0, w1
    4964:	ret
    4968:	stp	x29, x30, [sp, #-32]!
    496c:	mov	x29, sp
    4970:	str	x19, [sp, #16]
    4974:	mov	x19, x0
    4978:	ldr	x0, [x0, #48]
    497c:	bl	3480 <lzma_vli_size@plt>
    4980:	ldr	x1, [x19, #56]
    4984:	ldr	x19, [sp, #16]
    4988:	add	x1, x1, #0x4
    498c:	mvn	w1, w1
    4990:	sub	w0, w1, w0
    4994:	and	w0, w0, #0x3
    4998:	ldp	x29, x30, [sp], #32
    499c:	ret

00000000000049a0 <lzma_index_stream_flags@@XZ_5.0>:
    49a0:	stp	x29, x30, [sp, #-48]!
    49a4:	cmp	x0, #0x0
    49a8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    49ac:	mov	x29, sp
    49b0:	stp	x19, x20, [sp, #16]
    49b4:	str	x21, [sp, #32]
    49b8:	b.eq	49fc <lzma_index_stream_flags@@XZ_5.0+0x5c>  // b.none
    49bc:	mov	x21, x0
    49c0:	mov	x20, x1
    49c4:	mov	x0, x1
    49c8:	bl	3110 <lzma_stream_flags_compare@plt>
    49cc:	mov	w19, w0
    49d0:	cbnz	w0, 49e8 <lzma_index_stream_flags@@XZ_5.0+0x48>
    49d4:	ldr	x0, [x21, #16]
    49d8:	mov	x1, x20
    49dc:	mov	x2, #0x38                  	// #56
    49e0:	add	x0, x0, #0x68
    49e4:	bl	3090 <memcpy@plt>
    49e8:	mov	w0, w19
    49ec:	ldp	x19, x20, [sp, #16]
    49f0:	ldr	x21, [sp, #32]
    49f4:	ldp	x29, x30, [sp], #48
    49f8:	ret
    49fc:	mov	w19, #0xb                   	// #11
    4a00:	b	49e8 <lzma_index_stream_flags@@XZ_5.0+0x48>

0000000000004a04 <lzma_index_stream_padding@@XZ_5.0>:
    4a04:	cmp	x0, #0x0
    4a08:	ccmp	x1, #0x0, #0x1, ne  // ne = any
    4a0c:	b.lt	4a68 <lzma_index_stream_padding@@XZ_5.0+0x64>  // b.tstop
    4a10:	stp	x29, x30, [sp, #-48]!
    4a14:	tst	x1, #0x3
    4a18:	mov	x29, sp
    4a1c:	stp	x19, x20, [sp, #16]
    4a20:	mov	x19, x1
    4a24:	str	x21, [sp, #32]
    4a28:	b.ne	4a70 <lzma_index_stream_padding@@XZ_5.0+0x6c>  // b.any
    4a2c:	ldr	x20, [x0, #16]
    4a30:	ldr	x21, [x20, #160]
    4a34:	str	xzr, [x20, #160]
    4a38:	bl	3360 <lzma_index_file_size@plt>
    4a3c:	cmn	x0, x19
    4a40:	b.pl	4a5c <lzma_index_stream_padding@@XZ_5.0+0x58>  // b.nfrst
    4a44:	mov	w0, #0x9                   	// #9
    4a48:	str	x21, [x20, #160]
    4a4c:	ldp	x19, x20, [sp, #16]
    4a50:	ldr	x21, [sp, #32]
    4a54:	ldp	x29, x30, [sp], #48
    4a58:	ret
    4a5c:	mov	w0, #0x0                   	// #0
    4a60:	str	x19, [x20, #160]
    4a64:	b	4a4c <lzma_index_stream_padding@@XZ_5.0+0x48>
    4a68:	mov	w0, #0xb                   	// #11
    4a6c:	ret
    4a70:	mov	w0, #0xb                   	// #11
    4a74:	b	4a4c <lzma_index_stream_padding@@XZ_5.0+0x48>

0000000000004a78 <lzma_index_append@@XZ_5.0>:
    4a78:	stp	x29, x30, [sp, #-112]!
    4a7c:	cmp	x0, #0x0
    4a80:	mov	x29, sp
    4a84:	stp	x19, x20, [sp, #16]
    4a88:	mov	x20, x0
    4a8c:	mov	x0, #0xfffffffffffffff7    	// #-9
    4a90:	stp	x21, x22, [sp, #32]
    4a94:	movk	x0, #0x7fff, lsl #48
    4a98:	stp	x23, x24, [sp, #48]
    4a9c:	stp	x25, x26, [sp, #64]
    4aa0:	stp	x27, x28, [sp, #80]
    4aa4:	mov	x27, x1
    4aa8:	sub	x1, x2, #0x5
    4aac:	ccmp	x1, x0, #0x2, ne  // ne = any
    4ab0:	b.hi	4c48 <lzma_index_append@@XZ_5.0+0x1d0>  // b.pmore
    4ab4:	mov	x25, x3
    4ab8:	tbnz	x3, #63, 4c48 <lzma_index_append@@XZ_5.0+0x1d0>
    4abc:	ldr	x21, [x20, #16]
    4ac0:	mov	x22, x2
    4ac4:	ldr	x19, [x21, #72]
    4ac8:	cbz	x19, 4bf0 <lzma_index_append@@XZ_5.0+0x178>
    4acc:	ldr	x0, [x19, #56]
    4ad0:	add	x0, x19, x0, lsl #4
    4ad4:	ldp	x26, x24, [x0, #64]
    4ad8:	add	x24, x24, #0x3
    4adc:	and	x24, x24, #0xfffffffffffffffc
    4ae0:	mov	x0, x22
    4ae4:	bl	3480 <lzma_vli_size@plt>
    4ae8:	mov	w23, w0
    4aec:	mov	x0, x25
    4af0:	bl	3480 <lzma_vli_size@plt>
    4af4:	add	x28, x22, x24
    4af8:	add	w23, w23, w0
    4afc:	add	x2, x28, #0x3
    4b00:	ldr	x3, [x21, #8]
    4b04:	and	x2, x2, #0xfffffffffffffffc
    4b08:	ldp	x4, x1, [x21, #88]
    4b0c:	add	x2, x2, #0x18
    4b10:	ldr	x0, [x21, #160]
    4b14:	add	x3, x3, x0
    4b18:	adds	x2, x2, x3
    4b1c:	str	x2, [sp, #104]
    4b20:	add	x4, x4, #0x1
    4b24:	add	x1, x23, x1
    4b28:	b.mi	4c50 <lzma_index_append@@XZ_5.0+0x1d8>  // b.first
    4b2c:	mov	x0, x4
    4b30:	bl	452c <lzma_physmem@@XZ_5.0+0x25c>
    4b34:	ldr	x2, [sp, #104]
    4b38:	cmn	x2, x0
    4b3c:	b.mi	4c50 <lzma_index_append@@XZ_5.0+0x1d8>  // b.first
    4b40:	ldp	x0, x1, [x20, #48]
    4b44:	add	x1, x23, x1
    4b48:	add	x0, x0, #0x1
    4b4c:	bl	452c <lzma_physmem@@XZ_5.0+0x25c>
    4b50:	mov	x1, #0x400000000           	// #17179869184
    4b54:	cmp	x0, x1
    4b58:	b.hi	4c50 <lzma_index_append@@XZ_5.0+0x1d8>  // b.pmore
    4b5c:	cbz	x19, 4bfc <lzma_index_append@@XZ_5.0+0x184>
    4b60:	ldp	x1, x0, [x19, #48]
    4b64:	add	x0, x0, #0x1
    4b68:	cmp	x0, x1
    4b6c:	b.cs	4bfc <lzma_index_append@@XZ_5.0+0x184>  // b.hs, b.nlast
    4b70:	str	x0, [x19, #56]
    4b74:	ldr	x0, [x19, #56]
    4b78:	add	x26, x26, x25
    4b7c:	ldr	x3, [x20, #32]
    4b80:	add	x22, x22, #0x3
    4b84:	add	x19, x19, x0, lsl #4
    4b88:	and	x22, x22, #0xfffffffffffffffc
    4b8c:	ldr	x0, [x21, #88]
    4b90:	add	x25, x3, x25
    4b94:	stp	x26, x28, [x19, #64]
    4b98:	add	x0, x0, #0x1
    4b9c:	str	x0, [x21, #88]
    4ba0:	ldr	x0, [x21, #96]
    4ba4:	add	x0, x0, x23
    4ba8:	str	x0, [x21, #96]
    4bac:	ldr	x0, [x20, #40]
    4bb0:	add	x22, x0, x22
    4bb4:	stp	x25, x22, [x20, #32]
    4bb8:	ldr	x0, [x20, #48]
    4bbc:	add	x0, x0, #0x1
    4bc0:	str	x0, [x20, #48]
    4bc4:	ldr	x0, [x20, #56]
    4bc8:	add	x23, x0, x23
    4bcc:	mov	w0, #0x0                   	// #0
    4bd0:	str	x23, [x20, #56]
    4bd4:	ldp	x19, x20, [sp, #16]
    4bd8:	ldp	x21, x22, [sp, #32]
    4bdc:	ldp	x23, x24, [sp, #48]
    4be0:	ldp	x25, x26, [sp, #64]
    4be4:	ldp	x27, x28, [sp, #80]
    4be8:	ldp	x29, x30, [sp], #112
    4bec:	ret
    4bf0:	mov	x24, #0x0                   	// #0
    4bf4:	mov	x26, #0x0                   	// #0
    4bf8:	b	4ae0 <lzma_index_append@@XZ_5.0+0x68>
    4bfc:	ldr	x0, [x20, #64]
    4c00:	mov	x1, x27
    4c04:	add	x0, x0, #0x4
    4c08:	lsl	x0, x0, #4
    4c0c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4c10:	mov	x19, x0
    4c14:	cbz	x0, 4c58 <lzma_index_append@@XZ_5.0+0x1e0>
    4c18:	mov	x1, x0
    4c1c:	stp	x26, x24, [x19]
    4c20:	ldr	x0, [x20, #64]
    4c24:	stp	x0, xzr, [x19, #48]
    4c28:	mov	x0, #0x200                 	// #512
    4c2c:	str	x0, [x20, #64]
    4c30:	ldr	x0, [x21, #88]
    4c34:	add	x0, x0, #0x1
    4c38:	str	x0, [x19, #40]
    4c3c:	add	x0, x21, #0x38
    4c40:	bl	43d0 <lzma_physmem@@XZ_5.0+0x100>
    4c44:	b	4b74 <lzma_index_append@@XZ_5.0+0xfc>
    4c48:	mov	w0, #0xb                   	// #11
    4c4c:	b	4bd4 <lzma_index_append@@XZ_5.0+0x15c>
    4c50:	mov	w0, #0x9                   	// #9
    4c54:	b	4bd4 <lzma_index_append@@XZ_5.0+0x15c>
    4c58:	mov	w0, #0x5                   	// #5
    4c5c:	b	4bd4 <lzma_index_append@@XZ_5.0+0x15c>

0000000000004c60 <lzma_index_cat@@XZ_5.0>:
    4c60:	stp	x29, x30, [sp, #-128]!
    4c64:	mov	x29, sp
    4c68:	stp	x19, x20, [sp, #16]
    4c6c:	mov	x19, x0
    4c70:	stp	x21, x22, [sp, #32]
    4c74:	mov	x21, x1
    4c78:	stp	x23, x24, [sp, #48]
    4c7c:	mov	x23, x2
    4c80:	str	x25, [sp, #64]
    4c84:	bl	3360 <lzma_index_file_size@plt>
    4c88:	mov	x24, x0
    4c8c:	mov	x0, x21
    4c90:	bl	3360 <lzma_index_file_size@plt>
    4c94:	cmn	x0, x24
    4c98:	b.mi	4e38 <lzma_index_cat@@XZ_5.0+0x1d8>  // b.first
    4c9c:	ldr	x1, [x19, #32]
    4ca0:	ldr	x0, [x21, #32]
    4ca4:	cmn	x1, x0
    4ca8:	b.mi	4e38 <lzma_index_cat@@XZ_5.0+0x1d8>  // b.first
    4cac:	ldr	x0, [x19, #48]
    4cb0:	bl	3480 <lzma_vli_size@plt>
    4cb4:	add	w20, w0, #0x1
    4cb8:	ldr	x0, [x21, #48]
    4cbc:	bl	3480 <lzma_vli_size@plt>
    4cc0:	add	w1, w0, #0x1
    4cc4:	ldr	x0, [x21, #56]
    4cc8:	add	x1, x1, x20
    4ccc:	add	x0, x0, #0xb
    4cd0:	add	x1, x1, x0
    4cd4:	ldr	x0, [x19, #56]
    4cd8:	add	x1, x1, x0
    4cdc:	mov	x0, #0x400000000           	// #17179869184
    4ce0:	and	x1, x1, #0xfffffffffffffffc
    4ce4:	cmp	x1, x0
    4ce8:	b.hi	4e38 <lzma_index_cat@@XZ_5.0+0x1d8>  // b.pmore
    4cec:	ldr	x25, [x19, #16]
    4cf0:	ldr	x22, [x25, #72]
    4cf4:	cbz	x22, 4d94 <lzma_index_cat@@XZ_5.0+0x134>
    4cf8:	ldp	x1, x0, [x22, #48]
    4cfc:	add	x2, x0, #0x1
    4d00:	cmp	x2, x1
    4d04:	b.cs	4d94 <lzma_index_cat@@XZ_5.0+0x134>  // b.hs, b.nlast
    4d08:	add	x0, x0, #0x5
    4d0c:	mov	x1, x23
    4d10:	lsl	x0, x0, #4
    4d14:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4d18:	mov	x20, x0
    4d1c:	cbz	x0, 4e40 <lzma_index_cat@@XZ_5.0+0x1e0>
    4d20:	ldp	x0, x1, [x22]
    4d24:	stp	x0, x1, [x20]
    4d28:	ldp	x0, x1, [x22, #16]
    4d2c:	stp	x0, x1, [x20, #16]
    4d30:	ldr	x0, [x22, #32]
    4d34:	str	x0, [x20, #32]
    4d38:	add	x1, x22, #0x40
    4d3c:	ldr	x0, [x22, #56]
    4d40:	add	x2, x0, #0x1
    4d44:	stp	x2, x0, [x20, #48]
    4d48:	ldr	x0, [x22, #40]
    4d4c:	str	x0, [x20, #40]
    4d50:	lsl	x2, x2, #4
    4d54:	add	x0, x20, #0x40
    4d58:	bl	3090 <memcpy@plt>
    4d5c:	ldr	x0, [x22, #16]
    4d60:	cbz	x0, 4d68 <lzma_index_cat@@XZ_5.0+0x108>
    4d64:	str	x20, [x0, #32]
    4d68:	ldr	x0, [x25, #64]
    4d6c:	cmp	x0, x22
    4d70:	b.ne	4d78 <lzma_index_cat@@XZ_5.0+0x118>  // b.any
    4d74:	stp	x20, x20, [x25, #56]
    4d78:	ldr	x0, [x25, #72]
    4d7c:	cmp	x22, x0
    4d80:	b.ne	4d88 <lzma_index_cat@@XZ_5.0+0x128>  // b.any
    4d84:	str	x20, [x25, #72]
    4d88:	mov	x1, x23
    4d8c:	mov	x0, x22
    4d90:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    4d94:	ldr	x1, [x21]
    4d98:	str	x19, [sp, #120]
    4d9c:	ldr	x0, [x19, #32]
    4da0:	stp	x0, x24, [sp, #88]
    4da4:	ldr	x0, [x19, #48]
    4da8:	str	x0, [sp, #104]
    4dac:	ldr	w0, [x19, #24]
    4db0:	str	w0, [sp, #112]
    4db4:	add	x0, sp, #0x58
    4db8:	bl	446c <lzma_physmem@@XZ_5.0+0x19c>
    4dbc:	ldr	x0, [x19, #32]
    4dc0:	ldr	x1, [x21, #32]
    4dc4:	add	x0, x0, x1
    4dc8:	str	x0, [x19, #32]
    4dcc:	ldr	x1, [x21, #40]
    4dd0:	ldr	x0, [x19, #40]
    4dd4:	add	x0, x0, x1
    4dd8:	str	x0, [x19, #40]
    4ddc:	ldr	x1, [x21, #48]
    4de0:	ldr	x0, [x19, #48]
    4de4:	add	x0, x0, x1
    4de8:	str	x0, [x19, #48]
    4dec:	ldr	x1, [x21, #56]
    4df0:	ldr	x0, [x19, #56]
    4df4:	add	x0, x0, x1
    4df8:	str	x0, [x19, #56]
    4dfc:	mov	x0, x19
    4e00:	bl	31d0 <lzma_index_checks@plt>
    4e04:	ldr	w1, [x21, #72]
    4e08:	orr	w1, w1, w0
    4e0c:	str	w1, [x19, #72]
    4e10:	mov	x0, x21
    4e14:	mov	x1, x23
    4e18:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    4e1c:	mov	w0, #0x0                   	// #0
    4e20:	ldp	x19, x20, [sp, #16]
    4e24:	ldp	x21, x22, [sp, #32]
    4e28:	ldp	x23, x24, [sp, #48]
    4e2c:	ldr	x25, [sp, #64]
    4e30:	ldp	x29, x30, [sp], #128
    4e34:	ret
    4e38:	mov	w0, #0x9                   	// #9
    4e3c:	b	4e20 <lzma_index_cat@@XZ_5.0+0x1c0>
    4e40:	mov	w0, #0x5                   	// #5
    4e44:	b	4e20 <lzma_index_cat@@XZ_5.0+0x1c0>

0000000000004e48 <lzma_index_dup@@XZ_5.0>:
    4e48:	stp	x29, x30, [sp, #-96]!
    4e4c:	mov	x29, sp
    4e50:	stp	x19, x20, [sp, #16]
    4e54:	mov	x19, x0
    4e58:	mov	x0, x1
    4e5c:	stp	x21, x22, [sp, #32]
    4e60:	stp	x23, x24, [sp, #48]
    4e64:	mov	x24, x1
    4e68:	stp	x25, x26, [sp, #64]
    4e6c:	stp	x27, x28, [sp, #80]
    4e70:	bl	4324 <lzma_physmem@@XZ_5.0+0x54>
    4e74:	mov	x20, x0
    4e78:	cbz	x0, 4f2c <lzma_index_dup@@XZ_5.0+0xe4>
    4e7c:	ldr	x0, [x19, #32]
    4e80:	str	x0, [x20, #32]
    4e84:	ldr	x0, [x19, #40]
    4e88:	str	x0, [x20, #40]
    4e8c:	ldr	x0, [x19, #48]
    4e90:	str	x0, [x20, #48]
    4e94:	ldr	x0, [x19, #56]
    4e98:	mov	x25, #0xffffffffffffffc     	// #1152921504606846972
    4e9c:	mov	x26, #0x1                   	// #1
    4ea0:	ldr	x19, [x19, #8]
    4ea4:	str	x0, [x20, #56]
    4ea8:	ldr	x0, [x19, #88]
    4eac:	cmp	x0, x25
    4eb0:	b.cs	4f1c <lzma_index_dup@@XZ_5.0+0xd4>  // b.hs, b.nlast
    4eb4:	ldp	x1, x0, [x19]
    4eb8:	mov	x4, x24
    4ebc:	ldr	w2, [x19, #40]
    4ec0:	ldr	x3, [x19, #48]
    4ec4:	bl	4364 <lzma_physmem@@XZ_5.0+0x94>
    4ec8:	mov	x21, x0
    4ecc:	cbz	x0, 4f1c <lzma_index_dup@@XZ_5.0+0xd4>
    4ed0:	ldp	x22, x0, [x19, #88]
    4ed4:	stp	x22, x0, [x21, #88]
    4ed8:	add	x1, x19, #0x68
    4edc:	add	x0, x21, #0x68
    4ee0:	mov	x2, #0x38                  	// #56
    4ee4:	bl	3090 <memcpy@plt>
    4ee8:	ldr	x0, [x19, #160]
    4eec:	str	x0, [x21, #160]
    4ef0:	ldr	x0, [x19, #64]
    4ef4:	cbz	x0, 4fac <lzma_index_dup@@XZ_5.0+0x164>
    4ef8:	add	x0, x22, #0x4
    4efc:	mov	x1, x24
    4f00:	lsl	x0, x0, #4
    4f04:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    4f08:	mov	x22, x0
    4f0c:	cbnz	x0, 4f4c <lzma_index_dup@@XZ_5.0+0x104>
    4f10:	mov	x1, x24
    4f14:	mov	x0, x21
    4f18:	bl	46fc <lzma_physmem@@XZ_5.0+0x42c>
    4f1c:	mov	x0, x20
    4f20:	mov	x20, #0x0                   	// #0
    4f24:	mov	x1, x24
    4f28:	bl	33e0 <lzma_index_end@plt>
    4f2c:	mov	x0, x20
    4f30:	ldp	x19, x20, [sp, #16]
    4f34:	ldp	x21, x22, [sp, #32]
    4f38:	ldp	x23, x24, [sp, #48]
    4f3c:	ldp	x25, x26, [sp, #64]
    4f40:	ldp	x27, x28, [sp, #80]
    4f44:	ldp	x29, x30, [sp], #96
    4f48:	ret
    4f4c:	add	x28, x0, #0x40
    4f50:	mov	x27, #0x0                   	// #0
    4f54:	ldr	x0, [x19, #88]
    4f58:	ldr	x23, [x19, #64]
    4f5c:	stp	xzr, xzr, [x22]
    4f60:	stp	x26, x0, [x22, #40]
    4f64:	sub	x0, x0, #0x1
    4f68:	str	x0, [x22, #56]
    4f6c:	ldr	x2, [x23, #56]
    4f70:	add	x1, x23, #0x40
    4f74:	add	x0, x28, x27, lsl #4
    4f78:	add	x2, x2, #0x1
    4f7c:	lsl	x2, x2, #4
    4f80:	bl	3090 <memcpy@plt>
    4f84:	ldr	x0, [x23, #56]
    4f88:	add	x0, x0, #0x1
    4f8c:	add	x27, x27, x0
    4f90:	mov	x0, x23
    4f94:	bl	44f8 <lzma_physmem@@XZ_5.0+0x228>
    4f98:	mov	x23, x0
    4f9c:	cbnz	x0, 4f6c <lzma_index_dup@@XZ_5.0+0x124>
    4fa0:	mov	x1, x22
    4fa4:	add	x0, x21, #0x38
    4fa8:	bl	43d0 <lzma_physmem@@XZ_5.0+0x100>
    4fac:	mov	x1, x21
    4fb0:	mov	x0, x20
    4fb4:	bl	43d0 <lzma_physmem@@XZ_5.0+0x100>
    4fb8:	mov	x0, x19
    4fbc:	bl	44f8 <lzma_physmem@@XZ_5.0+0x228>
    4fc0:	mov	x19, x0
    4fc4:	cbnz	x0, 4ea8 <lzma_index_dup@@XZ_5.0+0x60>
    4fc8:	b	4f2c <lzma_index_dup@@XZ_5.0+0xe4>

0000000000004fcc <lzma_index_iter_rewind@@XZ_5.0>:
    4fcc:	stp	xzr, xzr, [x0, #264]
    4fd0:	stp	xzr, xzr, [x0, #280]
    4fd4:	ret

0000000000004fd8 <lzma_index_iter_init@@XZ_5.0>:
    4fd8:	str	x1, [x0, #256]
    4fdc:	b	30a0 <lzma_index_iter_rewind@plt>

0000000000004fe0 <lzma_index_iter_next@@XZ_5.0>:
    4fe0:	cmp	w1, #0x3
    4fe4:	b.hi	5118 <lzma_index_iter_next@@XZ_5.0+0x138>  // b.pmore
    4fe8:	stp	x29, x30, [sp, #-16]!
    4fec:	mov	x4, x0
    4ff0:	mov	w5, w1
    4ff4:	mov	x29, sp
    4ff8:	cmp	w1, #0x1
    4ffc:	ldp	x7, x3, [x0, #256]
    5000:	ldr	x6, [x0, #280]
    5004:	b.eq	5060 <lzma_index_iter_next@@XZ_5.0+0x80>  // b.none
    5008:	ldr	x0, [x0, #288]
    500c:	cmp	x0, #0x1
    5010:	b.eq	504c <lzma_index_iter_next@@XZ_5.0+0x6c>  // b.none
    5014:	cmp	x0, #0x2
    5018:	b.eq	5058 <lzma_index_iter_next@@XZ_5.0+0x78>  // b.none
    501c:	cbnz	x0, 5060 <lzma_index_iter_next@@XZ_5.0+0x80>
    5020:	ldr	x0, [x4, #272]
    5024:	cbnz	x3, 5080 <lzma_index_iter_next@@XZ_5.0+0xa0>
    5028:	cmp	w5, #0x1
    502c:	ldr	x3, [x7, #8]
    5030:	b.ls	503c <lzma_index_iter_next@@XZ_5.0+0x5c>  // b.plast
    5034:	ldr	x0, [x3, #64]
    5038:	cbz	x0, 5068 <lzma_index_iter_next@@XZ_5.0+0x88>
    503c:	ldr	x0, [x3, #64]
    5040:	cmp	w5, #0x3
    5044:	b.eq	50e8 <lzma_index_iter_next@@XZ_5.0+0x108>  // b.none
    5048:	b	50dc <lzma_index_iter_next@@XZ_5.0+0xfc>
    504c:	ldr	x0, [x4, #272]
    5050:	bl	44f8 <lzma_physmem@@XZ_5.0+0x228>
    5054:	b	5024 <lzma_index_iter_next@@XZ_5.0+0x44>
    5058:	ldr	x0, [x3, #64]
    505c:	b	5024 <lzma_index_iter_next@@XZ_5.0+0x44>
    5060:	mov	x0, #0x0                   	// #0
    5064:	b	5024 <lzma_index_iter_next@@XZ_5.0+0x44>
    5068:	mov	x0, x3
    506c:	bl	44f8 <lzma_physmem@@XZ_5.0+0x228>
    5070:	mov	x3, x0
    5074:	cbnz	x0, 5034 <lzma_index_iter_next@@XZ_5.0+0x54>
    5078:	mov	w0, #0x1                   	// #1
    507c:	b	50b0 <lzma_index_iter_next@@XZ_5.0+0xd0>
    5080:	cbz	x0, 50c0 <lzma_index_iter_next@@XZ_5.0+0xe0>
    5084:	ldr	x1, [x0, #56]
    5088:	cmp	x1, x6
    508c:	b.ls	50b8 <lzma_index_iter_next@@XZ_5.0+0xd8>  // b.plast
    5090:	add	x1, x6, #0x1
    5094:	cmp	w5, #0x3
    5098:	b.eq	50e4 <lzma_index_iter_next@@XZ_5.0+0x104>  // b.none
    509c:	stp	x3, x0, [x4, #264]
    50a0:	mov	x0, x4
    50a4:	str	x1, [x4, #280]
    50a8:	bl	455c <lzma_physmem@@XZ_5.0+0x28c>
    50ac:	mov	w0, #0x0                   	// #0
    50b0:	ldp	x29, x30, [sp], #16
    50b4:	ret
    50b8:	bl	44f8 <lzma_physmem@@XZ_5.0+0x228>
    50bc:	cbnz	x0, 5040 <lzma_index_iter_next@@XZ_5.0+0x60>
    50c0:	mov	x0, x3
    50c4:	bl	44f8 <lzma_physmem@@XZ_5.0+0x228>
    50c8:	mov	x3, x0
    50cc:	cbz	x0, 5078 <lzma_index_iter_next@@XZ_5.0+0x98>
    50d0:	cmp	w5, #0x1
    50d4:	ldr	x0, [x0, #64]
    50d8:	b.hi	50bc <lzma_index_iter_next@@XZ_5.0+0xdc>  // b.pmore
    50dc:	mov	x1, #0x0                   	// #0
    50e0:	b	509c <lzma_index_iter_next@@XZ_5.0+0xbc>
    50e4:	cbnz	x1, 5104 <lzma_index_iter_next@@XZ_5.0+0x124>
    50e8:	ldr	x2, [x0]
    50ec:	ldr	x1, [x0, #64]
    50f0:	cmp	x2, x1
    50f4:	mov	x1, #0x0                   	// #0
    50f8:	b.ne	509c <lzma_index_iter_next@@XZ_5.0+0xbc>  // b.any
    50fc:	mov	x6, x1
    5100:	b	5024 <lzma_index_iter_next@@XZ_5.0+0x44>
    5104:	add	x6, x0, x6, lsl #4
    5108:	ldr	x8, [x6, #64]
    510c:	ldr	x2, [x6, #80]
    5110:	cmp	x8, x2
    5114:	b	50f8 <lzma_index_iter_next@@XZ_5.0+0x118>
    5118:	mov	w0, #0x1                   	// #1
    511c:	ret

0000000000005120 <lzma_index_iter_locate@@XZ_5.0>:
    5120:	ldr	x2, [x0, #256]
    5124:	ldr	x3, [x2, #32]
    5128:	cmp	x3, x1
    512c:	b.ls	51d8 <lzma_index_iter_locate@@XZ_5.0+0xb8>  // b.plast
    5130:	stp	x29, x30, [sp, #-16]!
    5134:	mov	x4, #0x0                   	// #0
    5138:	mov	x29, sp
    513c:	ldr	x2, [x2]
    5140:	cbnz	x2, 5178 <lzma_index_iter_locate@@XZ_5.0+0x58>
    5144:	ldr	x3, [x4]
    5148:	sub	x1, x1, x3
    514c:	ldr	x3, [x4, #56]
    5150:	cbnz	x3, 5194 <lzma_index_iter_locate@@XZ_5.0+0x74>
    5154:	ldr	x6, [x2, #56]
    5158:	cmp	x6, x3
    515c:	b.hi	51b0 <lzma_index_iter_locate@@XZ_5.0+0x90>  // b.pmore
    5160:	stp	x4, x2, [x0, #264]
    5164:	str	x3, [x0, #280]
    5168:	bl	455c <lzma_physmem@@XZ_5.0+0x28c>
    516c:	mov	w0, #0x0                   	// #0
    5170:	ldp	x29, x30, [sp], #16
    5174:	ret
    5178:	ldp	x6, x3, [x2, #24]
    517c:	ldr	x5, [x2]
    5180:	cmp	x1, x5
    5184:	csel	x3, x3, x6, cs  // cs = hs, nlast
    5188:	csel	x4, x2, x4, cs  // cs = hs, nlast
    518c:	mov	x2, x3
    5190:	b	5140 <lzma_index_iter_locate@@XZ_5.0+0x20>
    5194:	ldp	x7, x5, [x3, #24]
    5198:	ldr	x6, [x3]
    519c:	cmp	x1, x6
    51a0:	csel	x5, x5, x7, cs  // cs = hs, nlast
    51a4:	csel	x2, x3, x2, cs  // cs = hs, nlast
    51a8:	mov	x3, x5
    51ac:	b	5150 <lzma_index_iter_locate@@XZ_5.0+0x30>
    51b0:	sub	x5, x6, x3
    51b4:	add	x5, x3, x5, lsr #1
    51b8:	add	x7, x2, x5, lsl #4
    51bc:	ldr	x7, [x7, #64]
    51c0:	cmp	x7, x1
    51c4:	b.hi	51d0 <lzma_index_iter_locate@@XZ_5.0+0xb0>  // b.pmore
    51c8:	add	x3, x5, #0x1
    51cc:	b	5158 <lzma_index_iter_locate@@XZ_5.0+0x38>
    51d0:	mov	x6, x5
    51d4:	b	5158 <lzma_index_iter_locate@@XZ_5.0+0x38>
    51d8:	mov	w0, #0x1                   	// #1
    51dc:	ret

00000000000051e0 <lzma_stream_flags_compare@@XZ_5.0>:
    51e0:	mov	x2, x0
    51e4:	ldr	w0, [x0]
    51e8:	cbnz	w0, 5264 <lzma_stream_flags_compare@@XZ_5.0+0x84>
    51ec:	ldr	w0, [x1]
    51f0:	cbnz	w0, 5264 <lzma_stream_flags_compare@@XZ_5.0+0x84>
    51f4:	ldr	w4, [x2, #16]
    51f8:	cmp	w4, #0xf
    51fc:	b.hi	5274 <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.pmore
    5200:	ldr	w3, [x1, #16]
    5204:	cmp	w3, #0xf
    5208:	b.hi	5274 <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.pmore
    520c:	cmp	w4, w3
    5210:	b.ne	526c <lzma_stream_flags_compare@@XZ_5.0+0x8c>  // b.any
    5214:	ldr	x2, [x2, #8]
    5218:	cmn	x2, #0x1
    521c:	b.eq	5260 <lzma_stream_flags_compare@@XZ_5.0+0x80>  // b.none
    5220:	ldr	x1, [x1, #8]
    5224:	cmn	x1, #0x1
    5228:	b.eq	5260 <lzma_stream_flags_compare@@XZ_5.0+0x80>  // b.none
    522c:	sub	x3, x2, #0x4
    5230:	mov	x0, #0x3fffffffc           	// #17179869180
    5234:	cmp	x3, x0
    5238:	b.hi	5274 <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.pmore
    523c:	sub	x3, x1, #0x4
    5240:	cmp	x3, x0
    5244:	b.hi	5274 <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.pmore
    5248:	orr	x0, x2, x1
    524c:	tst	x0, #0x3
    5250:	b.ne	5274 <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.any
    5254:	cmp	x2, x1
    5258:	mov	w0, #0x9                   	// #9
    525c:	csel	w0, wzr, w0, eq  // eq = none
    5260:	ret
    5264:	mov	w0, #0x8                   	// #8
    5268:	b	5260 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    526c:	mov	w0, #0x9                   	// #9
    5270:	b	5260 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    5274:	mov	w0, #0xb                   	// #11
    5278:	b	5260 <lzma_stream_flags_compare@@XZ_5.0+0x80>

000000000000527c <lzma_vli_size@@XZ_5.0>:
    527c:	mov	x1, x0
    5280:	mov	w0, #0x0                   	// #0
    5284:	tbnz	x1, #63, 5294 <lzma_vli_size@@XZ_5.0+0x18>
    5288:	lsr	x1, x1, #7
    528c:	add	w0, w0, #0x1
    5290:	cbnz	x1, 5288 <lzma_vli_size@@XZ_5.0+0xc>
    5294:	ret

0000000000005298 <lzma_cputhreads@@XZ_5.2>:
    5298:	b	3680 <pthread_cond_timedwait@plt+0x120>
    529c:	stp	x29, x30, [sp, #-96]!
    52a0:	mov	x29, sp
    52a4:	stp	x19, x20, [sp, #16]
    52a8:	mov	x20, x2
    52ac:	adrp	x19, 5000 <lzma_index_iter_next@@XZ_5.0+0x20>
    52b0:	ldr	x2, [x0, #16]
    52b4:	stp	x21, x22, [sp, #32]
    52b8:	add	x19, x19, #0x29c
    52bc:	mov	x22, x0
    52c0:	mov	x21, x1
    52c4:	cmp	x2, x19
    52c8:	b.eq	52d0 <lzma_cputhreads@@XZ_5.2+0x38>  // b.none
    52cc:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    52d0:	str	x19, [x22, #16]
    52d4:	ldr	x19, [x22]
    52d8:	cbnz	x19, 5328 <lzma_cputhreads@@XZ_5.2+0x90>
    52dc:	mov	x1, x21
    52e0:	mov	x0, #0x68                  	// #104
    52e4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    52e8:	mov	x19, x0
    52ec:	cbz	x0, 53b8 <lzma_cputhreads@@XZ_5.2+0x120>
    52f0:	adrp	x0, 5000 <lzma_index_iter_next@@XZ_5.0+0x20>
    52f4:	add	x0, x0, #0x3f4
    52f8:	str	x0, [x22, #24]
    52fc:	adrp	x0, 5000 <lzma_index_iter_next@@XZ_5.0+0x20>
    5300:	add	x0, x0, #0x3c8
    5304:	str	xzr, [x19]
    5308:	str	x19, [x22]
    530c:	stp	xzr, xzr, [x19, #16]
    5310:	str	x0, [x22, #32]
    5314:	mov	x0, #0xffffffffffffffff    	// #-1
    5318:	str	x0, [x19, #8]
    531c:	stp	xzr, xzr, [x19, #32]
    5320:	stp	xzr, xzr, [x19, #48]
    5324:	str	xzr, [x19, #64]
    5328:	str	wzr, [x19, #72]
    532c:	add	x1, x19, #0x58
    5330:	str	xzr, [x19, #80]
    5334:	mov	x0, x20
    5338:	bl	f0c0 <lzma_lzma_preset@@XZ_5.0+0x11dc>
    533c:	tst	w0, #0xff
    5340:	b.ne	53c0 <lzma_cputhreads@@XZ_5.2+0x128>  // b.any
    5344:	ldr	w3, [x20]
    5348:	cmp	w3, #0xfff
    534c:	b.ls	53c0 <lzma_cputhreads@@XZ_5.2+0x128>  // b.plast
    5350:	sub	w3, w3, #0x1
    5354:	orr	w3, w3, w3, lsr #2
    5358:	orr	w3, w3, w3, lsr #3
    535c:	orr	w3, w3, w3, lsr #4
    5360:	orr	w3, w3, w3, lsr #8
    5364:	orr	w3, w3, w3, lsr #16
    5368:	cmn	w3, #0x1
    536c:	b.eq	5374 <lzma_cputhreads@@XZ_5.2+0xdc>  // b.none
    5370:	add	w3, w3, #0x1
    5374:	mov	x0, #0xffffffffffffffff    	// #-1
    5378:	stur	x0, [x19, #93]
    537c:	adrp	x0, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    5380:	stur	w3, [x19, #89]
    5384:	stp	xzr, xzr, [sp, #48]
    5388:	add	x2, sp, #0x30
    538c:	mov	x1, x21
    5390:	ldr	x0, [x0, #4056]
    5394:	stp	xzr, xzr, [sp, #64]
    5398:	stp	x0, x20, [sp, #56]
    539c:	mov	x0, x19
    53a0:	stp	xzr, xzr, [sp, #80]
    53a4:	bl	389c <lzma_version_string@@XZ_5.0+0x1cc>
    53a8:	ldp	x19, x20, [sp, #16]
    53ac:	ldp	x21, x22, [sp, #32]
    53b0:	ldp	x29, x30, [sp], #96
    53b4:	ret
    53b8:	mov	w0, #0x5                   	// #5
    53bc:	b	53a8 <lzma_cputhreads@@XZ_5.2+0x110>
    53c0:	mov	w0, #0x8                   	// #8
    53c4:	b	53a8 <lzma_cputhreads@@XZ_5.2+0x110>
    53c8:	stp	x29, x30, [sp, #-32]!
    53cc:	mov	x29, sp
    53d0:	stp	x19, x20, [sp, #16]
    53d4:	mov	x19, x0
    53d8:	mov	x20, x1
    53dc:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    53e0:	mov	x1, x20
    53e4:	mov	x0, x19
    53e8:	ldp	x19, x20, [sp, #16]
    53ec:	ldp	x29, x30, [sp], #32
    53f0:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    53f4:	stp	x29, x30, [sp, #-112]!
    53f8:	mov	x29, sp
    53fc:	stp	x27, x28, [sp, #80]
    5400:	add	x28, x0, #0x50
    5404:	ldr	w27, [sp, #112]
    5408:	stp	x19, x20, [sp, #16]
    540c:	mov	x19, x0
    5410:	mov	x20, x7
    5414:	stp	x21, x22, [sp, #32]
    5418:	mov	x21, x6
    541c:	mov	x22, x5
    5420:	add	x6, x0, #0x58
    5424:	stp	x23, x24, [sp, #48]
    5428:	mov	x23, x1
    542c:	mov	x24, x2
    5430:	stp	x25, x26, [sp, #64]
    5434:	mov	x25, x3
    5438:	mov	x26, x4
    543c:	ldr	x0, [x21]
    5440:	cmp	x0, x20
    5444:	b.cs	54ac <lzma_cputhreads@@XZ_5.2+0x214>  // b.hs, b.nlast
    5448:	ldr	w0, [x19, #72]
    544c:	cbz	w0, 5478 <lzma_cputhreads@@XZ_5.2+0x1e0>
    5450:	cmp	w0, #0x1
    5454:	b.eq	54bc <lzma_cputhreads@@XZ_5.2+0x224>  // b.none
    5458:	mov	w0, #0xb                   	// #11
    545c:	ldp	x19, x20, [sp, #16]
    5460:	ldp	x21, x22, [sp, #32]
    5464:	ldp	x23, x24, [sp, #48]
    5468:	ldp	x25, x26, [sp, #64]
    546c:	ldp	x27, x28, [sp, #80]
    5470:	ldp	x29, x30, [sp], #112
    5474:	ret
    5478:	mov	x0, x6
    547c:	mov	x5, x20
    5480:	mov	x4, x21
    5484:	mov	x3, x22
    5488:	mov	x1, x28
    548c:	mov	x2, #0xd                   	// #13
    5490:	str	x6, [sp, #104]
    5494:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    5498:	ldr	x0, [x19, #80]
    549c:	mov	w7, #0x1                   	// #1
    54a0:	ldr	x6, [sp, #104]
    54a4:	cmp	x0, #0xc
    54a8:	b.hi	54b4 <lzma_cputhreads@@XZ_5.2+0x21c>  // b.pmore
    54ac:	mov	w0, #0x0                   	// #0
    54b0:	b	545c <lzma_cputhreads@@XZ_5.2+0x1c4>
    54b4:	str	w7, [x19, #72]
    54b8:	b	543c <lzma_cputhreads@@XZ_5.2+0x1a4>
    54bc:	ldr	x0, [x19]
    54c0:	mov	x7, x20
    54c4:	ldr	x8, [x19, #24]
    54c8:	str	w27, [sp, #112]
    54cc:	mov	x6, x21
    54d0:	mov	x5, x22
    54d4:	mov	x4, x26
    54d8:	mov	x3, x25
    54dc:	mov	x2, x24
    54e0:	mov	x1, x23
    54e4:	ldp	x19, x20, [sp, #16]
    54e8:	mov	x16, x8
    54ec:	ldp	x21, x22, [sp, #32]
    54f0:	ldp	x23, x24, [sp, #48]
    54f4:	ldp	x25, x26, [sp, #64]
    54f8:	ldp	x27, x28, [sp, #80]
    54fc:	ldp	x29, x30, [sp], #112
    5500:	br	x16

0000000000005504 <lzma_alone_encoder@@XZ_5.0>:
    5504:	stp	x29, x30, [sp, #-48]!
    5508:	mov	x29, sp
    550c:	stp	x19, x20, [sp, #16]
    5510:	mov	x20, x0
    5514:	str	x21, [sp, #32]
    5518:	mov	x21, x1
    551c:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    5520:	mov	w19, w0
    5524:	cbnz	w0, 5544 <lzma_alone_encoder@@XZ_5.0+0x40>
    5528:	ldp	x1, x0, [x20, #48]
    552c:	mov	x2, x21
    5530:	bl	529c <lzma_cputhreads@@XZ_5.2+0x4>
    5534:	mov	w19, w0
    5538:	cbz	w0, 5558 <lzma_alone_encoder@@XZ_5.0+0x54>
    553c:	mov	x0, x20
    5540:	bl	3320 <lzma_end@plt>
    5544:	mov	w0, w19
    5548:	ldp	x19, x20, [sp, #16]
    554c:	ldr	x21, [sp, #32]
    5550:	ldp	x29, x30, [sp], #48
    5554:	ret
    5558:	ldr	x0, [x20, #56]
    555c:	mov	w1, #0x1                   	// #1
    5560:	strb	w1, [x0, #88]
    5564:	strb	w1, [x0, #91]
    5568:	b	5544 <lzma_alone_encoder@@XZ_5.0+0x40>
    556c:	sub	sp, sp, #0x110
    5570:	stp	x29, x30, [sp, #16]
    5574:	add	x29, sp, #0x10
    5578:	stp	x19, x20, [sp, #32]
    557c:	stp	x21, x22, [sp, #48]
    5580:	stp	x23, x24, [sp, #64]
    5584:	stp	x25, x26, [sp, #80]
    5588:	stp	x27, x28, [sp, #96]
    558c:	cbz	x0, 5874 <lzma_alone_encoder@@XZ_5.0+0x370>
    5590:	cmp	x2, #0x0
    5594:	mov	x23, x2
    5598:	mov	x22, x3
    559c:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    55a0:	b.ne	5874 <lzma_alone_encoder@@XZ_5.0+0x370>  // b.any
    55a4:	cmp	x4, #0x0
    55a8:	mov	x21, x4
    55ac:	mov	x28, x5
    55b0:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    55b4:	b.eq	5874 <lzma_alone_encoder@@XZ_5.0+0x370>  // b.none
    55b8:	ldr	x26, [x5]
    55bc:	mov	x20, x6
    55c0:	cmp	x26, x6
    55c4:	b.hi	5874 <lzma_alone_encoder@@XZ_5.0+0x370>  // b.pmore
    55c8:	mov	x27, x0
    55cc:	ldr	w0, [x0]
    55d0:	cmp	w0, #0x1
    55d4:	b.hi	597c <lzma_alone_encoder@@XZ_5.0+0x478>  // b.pmore
    55d8:	ldr	w24, [x27, #8]
    55dc:	cmp	w24, #0xf
    55e0:	b.hi	5874 <lzma_alone_encoder@@XZ_5.0+0x370>  // b.pmore
    55e4:	mov	x25, x1
    55e8:	and	w19, w7, #0xff
    55ec:	cbz	w19, 55f8 <lzma_alone_encoder@@XZ_5.0+0xf4>
    55f0:	ldr	x0, [x27, #32]
    55f4:	cbz	x0, 5874 <lzma_alone_encoder@@XZ_5.0+0x370>
    55f8:	mov	w0, w24
    55fc:	bl	30e0 <lzma_check_is_supported@plt>
    5600:	tst	w0, #0xff
    5604:	b.eq	5984 <lzma_alone_encoder@@XZ_5.0+0x480>  // b.none
    5608:	sub	x6, x20, x26
    560c:	mov	w0, w24
    5610:	and	x6, x6, #0x3
    5614:	sub	x20, x20, x6
    5618:	sub	x26, x20, x26
    561c:	bl	3270 <lzma_check_size@plt>
    5620:	mov	w24, w0
    5624:	cmp	x26, w0, uxtw
    5628:	b.ls	58a4 <lzma_alone_encoder@@XZ_5.0+0x3a0>  // b.plast
    562c:	str	x22, [x27, #24]
    5630:	mov	x1, #0xfffffffffffffbbc    	// #-1092
    5634:	movk	x1, #0x7fff, lsl #48
    5638:	sub	x20, x20, x24
    563c:	cmp	x22, x1
    5640:	b.ls	5670 <lzma_alone_encoder@@XZ_5.0+0x16c>  // b.plast
    5644:	mov	w19, #0x9                   	// #9
    5648:	str	xzr, [x27, #16]
    564c:	mov	w0, w19
    5650:	ldp	x29, x30, [sp, #16]
    5654:	ldp	x19, x20, [sp, #32]
    5658:	ldp	x21, x22, [sp, #48]
    565c:	ldp	x23, x24, [sp, #64]
    5660:	ldp	x25, x26, [sp, #80]
    5664:	ldp	x27, x28, [sp, #96]
    5668:	add	sp, sp, #0x110
    566c:	ret
    5670:	mov	x0, #0xffff                	// #65535
    5674:	add	x0, x22, x0
    5678:	lsr	x0, x0, #16
    567c:	add	x0, x0, x0, lsl #1
    5680:	add	x0, x0, #0x1
    5684:	sub	x1, x1, x0
    5688:	cmp	x22, x1
    568c:	b.hi	5644 <lzma_alone_encoder@@XZ_5.0+0x140>  // b.pmore
    5690:	add	x0, x22, x0
    5694:	str	x0, [x27, #16]
    5698:	cbz	w19, 581c <lzma_alone_encoder@@XZ_5.0+0x318>
    569c:	mov	x0, x27
    56a0:	bl	3160 <lzma_block_header_size@plt>
    56a4:	mov	w19, w0
    56a8:	cbnz	w0, 5814 <lzma_alone_encoder@@XZ_5.0+0x310>
    56ac:	ldr	x26, [x28]
    56b0:	ldr	w7, [x27, #4]
    56b4:	sub	x0, x20, x26
    56b8:	cmp	x0, x7
    56bc:	b.ls	581c <lzma_alone_encoder@@XZ_5.0+0x318>  // b.plast
    56c0:	add	x7, x26, x7
    56c4:	add	x8, sp, #0xa0
    56c8:	ldr	x2, [x27, #32]
    56cc:	str	x7, [x28]
    56d0:	sub	x1, x20, x7
    56d4:	stp	xzr, xzr, [sp, #176]
    56d8:	ldr	x0, [x27, #16]
    56dc:	stp	xzr, xzr, [sp, #192]
    56e0:	cmp	x1, x0
    56e4:	add	x7, x7, x0
    56e8:	csel	x7, x7, x20, hi  // hi = pmore
    56ec:	mov	x0, #0xffffffffffffffff    	// #-1
    56f0:	mov	x1, x25
    56f4:	stp	x8, x7, [sp, #112]
    56f8:	stp	xzr, x0, [sp, #160]
    56fc:	mov	x0, x8
    5700:	stp	xzr, xzr, [sp, #208]
    5704:	str	xzr, [sp, #224]
    5708:	bl	62ac <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    570c:	mov	w19, w0
    5710:	ldr	x8, [sp, #112]
    5714:	cbnz	w0, 5754 <lzma_alone_encoder@@XZ_5.0+0x250>
    5718:	mov	w0, #0x3                   	// #3
    571c:	str	w0, [sp]
    5720:	ldr	x7, [sp, #120]
    5724:	str	xzr, [sp, #128]
    5728:	ldr	x0, [sp, #160]
    572c:	mov	x6, x28
    5730:	ldr	x9, [sp, #184]
    5734:	mov	x5, x21
    5738:	mov	x4, x22
    573c:	add	x3, sp, #0x80
    5740:	mov	x2, x23
    5744:	mov	x1, x25
    5748:	blr	x9
    574c:	mov	w19, w0
    5750:	ldr	x8, [sp, #112]
    5754:	mov	x1, x25
    5758:	mov	x0, x8
    575c:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    5760:	cmp	w19, #0x1
    5764:	b.ne	5804 <lzma_alone_encoder@@XZ_5.0+0x300>  // b.any
    5768:	ldr	x0, [x28]
    576c:	ldr	w1, [x27, #4]
    5770:	sub	x0, x0, x26
    5774:	sub	x0, x0, x1
    5778:	str	x0, [x27, #16]
    577c:	add	x1, x21, x26
    5780:	mov	x0, x27
    5784:	bl	3540 <lzma_block_header_encode@plt>
    5788:	cbnz	w0, 587c <lzma_alone_encoder@@XZ_5.0+0x378>
    578c:	ldr	x0, [x27, #16]
    5790:	tst	x0, #0x3
    5794:	b.ne	5964 <lzma_alone_encoder@@XZ_5.0+0x460>  // b.any
    5798:	cbz	x24, 57fc <lzma_alone_encoder@@XZ_5.0+0x2f8>
    579c:	ldr	w1, [x27, #8]
    57a0:	add	x19, sp, #0xa0
    57a4:	mov	x0, x19
    57a8:	bl	afa0 <lzma_check_size@@XZ_5.0+0x24>
    57ac:	ldr	w1, [x27, #8]
    57b0:	mov	x3, x22
    57b4:	mov	x2, x23
    57b8:	mov	x0, x19
    57bc:	bl	afcc <lzma_check_size@@XZ_5.0+0x50>
    57c0:	ldr	w1, [x27, #8]
    57c4:	mov	x0, x19
    57c8:	bl	b038 <lzma_check_size@@XZ_5.0+0xbc>
    57cc:	mov	x2, x24
    57d0:	mov	x1, x19
    57d4:	add	x0, x27, #0x28
    57d8:	bl	3090 <memcpy@plt>
    57dc:	ldr	x0, [x28]
    57e0:	mov	x2, x24
    57e4:	mov	x1, x19
    57e8:	add	x0, x21, x0
    57ec:	bl	3090 <memcpy@plt>
    57f0:	ldr	x0, [x28]
    57f4:	add	x24, x0, x24
    57f8:	str	x24, [x28]
    57fc:	mov	w19, #0x0                   	// #0
    5800:	b	564c <lzma_alone_encoder@@XZ_5.0+0x148>
    5804:	cmp	w19, #0x0
    5808:	mov	w0, #0xa                   	// #10
    580c:	csel	w19, w19, w0, ne  // ne = any
    5810:	str	x26, [x28]
    5814:	cmp	w19, #0xa
    5818:	b.ne	564c <lzma_alone_encoder@@XZ_5.0+0x148>  // b.any
    581c:	mov	w0, #0x1000                	// #4096
    5820:	stp	xzr, xzr, [sp, #160]
    5824:	str	w0, [sp, #160]
    5828:	mov	x0, #0x21                  	// #33
    582c:	str	x0, [sp, #128]
    5830:	add	x0, sp, #0xa0
    5834:	str	x0, [sp, #136]
    5838:	mov	x0, #0xffffffffffffffff    	// #-1
    583c:	str	x0, [sp, #144]
    5840:	add	x0, sp, #0x80
    5844:	ldr	x19, [x27, #32]
    5848:	str	x0, [x27, #32]
    584c:	mov	x0, x27
    5850:	stp	xzr, xzr, [sp, #176]
    5854:	stp	xzr, xzr, [sp, #192]
    5858:	stp	xzr, xzr, [sp, #208]
    585c:	stp	xzr, xzr, [sp, #224]
    5860:	stp	xzr, xzr, [sp, #240]
    5864:	stp	xzr, xzr, [sp, #256]
    5868:	bl	3160 <lzma_block_header_size@plt>
    586c:	cbz	w0, 5884 <lzma_alone_encoder@@XZ_5.0+0x380>
    5870:	str	x19, [x27, #32]
    5874:	mov	w19, #0xb                   	// #11
    5878:	b	564c <lzma_alone_encoder@@XZ_5.0+0x148>
    587c:	mov	w19, #0xb                   	// #11
    5880:	b	5810 <lzma_alone_encoder@@XZ_5.0+0x30c>
    5884:	ldr	x1, [x28]
    5888:	ldr	x2, [x27, #16]
    588c:	sub	x20, x20, x1
    5890:	ldr	w0, [x27, #4]
    5894:	add	x0, x0, x2
    5898:	cmp	x20, x0
    589c:	b.cs	58ac <lzma_alone_encoder@@XZ_5.0+0x3a8>  // b.hs, b.nlast
    58a0:	str	x19, [x27, #32]
    58a4:	mov	w19, #0xa                   	// #10
    58a8:	b	564c <lzma_alone_encoder@@XZ_5.0+0x148>
    58ac:	add	x1, x21, x1
    58b0:	mov	x0, x27
    58b4:	bl	3540 <lzma_block_header_encode@plt>
    58b8:	str	x19, [x27, #32]
    58bc:	cbnz	w0, 5874 <lzma_alone_encoder@@XZ_5.0+0x370>
    58c0:	ldr	x0, [x28]
    58c4:	mov	w2, #0x1                   	// #1
    58c8:	ldr	w1, [x27, #4]
    58cc:	mov	x20, #0x0                   	// #0
    58d0:	mov	x25, #0x10000               	// #65536
    58d4:	add	x0, x0, x1
    58d8:	str	x0, [x28]
    58dc:	ldr	x0, [x28]
    58e0:	cmp	x22, x20
    58e4:	add	x1, x0, #0x1
    58e8:	str	x1, [x28]
    58ec:	add	x3, x21, x0
    58f0:	b.hi	58fc <lzma_alone_encoder@@XZ_5.0+0x3f8>  // b.pmore
    58f4:	strb	wzr, [x3]
    58f8:	b	578c <lzma_alone_encoder@@XZ_5.0+0x288>
    58fc:	strb	w2, [x21, x0]
    5900:	sub	x19, x22, x20
    5904:	cmp	x19, #0x10, lsl #12
    5908:	ldr	x1, [x28]
    590c:	csel	x19, x19, x25, ls  // ls = plast
    5910:	mov	x2, x19
    5914:	add	x0, x1, #0x1
    5918:	str	x0, [x28]
    591c:	sub	x0, x19, #0x1
    5920:	lsr	x0, x0, #8
    5924:	strb	w0, [x21, x1]
    5928:	ldr	x0, [x28]
    592c:	add	x1, x0, #0x1
    5930:	str	x1, [x28]
    5934:	sub	w1, w19, #0x1
    5938:	strb	w1, [x21, x0]
    593c:	add	x1, x23, x20
    5940:	add	x20, x20, x19
    5944:	ldr	x0, [x28]
    5948:	add	x0, x21, x0
    594c:	bl	3090 <memcpy@plt>
    5950:	ldr	x2, [x28]
    5954:	add	x2, x2, x19
    5958:	str	x2, [x28]
    595c:	mov	w2, #0x2                   	// #2
    5960:	b	58dc <lzma_alone_encoder@@XZ_5.0+0x3d8>
    5964:	ldr	x1, [x28]
    5968:	add	x0, x0, #0x1
    596c:	add	x2, x1, #0x1
    5970:	str	x2, [x28]
    5974:	strb	wzr, [x21, x1]
    5978:	b	5790 <lzma_alone_encoder@@XZ_5.0+0x28c>
    597c:	mov	w19, #0x8                   	// #8
    5980:	b	564c <lzma_alone_encoder@@XZ_5.0+0x148>
    5984:	mov	w19, #0x3                   	// #3
    5988:	b	564c <lzma_alone_encoder@@XZ_5.0+0x148>
    598c:	mov	x3, #0xfffffffffffffbbc    	// #-1092
    5990:	movk	x3, #0x7fff, lsl #48
    5994:	cmp	x0, x3
    5998:	b.hi	59d0 <lzma_alone_encoder@@XZ_5.0+0x4cc>  // b.pmore
    599c:	mov	x1, #0xffff                	// #65535
    59a0:	add	x1, x0, x1
    59a4:	lsr	x1, x1, #16
    59a8:	add	x1, x1, x1, lsl #1
    59ac:	add	x2, x1, #0x1
    59b0:	add	x1, x0, #0x3
    59b4:	add	x1, x1, x2
    59b8:	sub	x3, x3, x2
    59bc:	and	x1, x1, #0xfffffffffffffffc
    59c0:	cmp	x0, x3
    59c4:	add	x1, x1, #0x5c
    59c8:	csel	x0, x1, xzr, ls  // ls = plast
    59cc:	ret
    59d0:	mov	x0, #0x0                   	// #0
    59d4:	b	59cc <lzma_alone_encoder@@XZ_5.0+0x4c8>

00000000000059d8 <lzma_block_buffer_bound@@XZ_5.0>:
    59d8:	b	598c <lzma_alone_encoder@@XZ_5.0+0x488>

00000000000059dc <lzma_block_buffer_encode@@XZ_5.0>:
    59dc:	mov	w7, #0x1                   	// #1
    59e0:	b	556c <lzma_alone_encoder@@XZ_5.0+0x68>

00000000000059e4 <lzma_block_uncomp_encode@@XZ_5.2>:
    59e4:	mov	x6, x5
    59e8:	mov	w7, #0x0                   	// #0
    59ec:	mov	x5, x4
    59f0:	mov	x4, x3
    59f4:	mov	x3, x2
    59f8:	mov	x2, x1
    59fc:	mov	x1, #0x0                   	// #0
    5a00:	b	556c <lzma_alone_encoder@@XZ_5.0+0x68>
    5a04:	mov	x2, x3
    5a08:	ldr	w3, [x0, #80]
    5a0c:	cbnz	w3, 5a14 <lzma_block_uncomp_encode@@XZ_5.2+0x30>
    5a10:	b	3808 <lzma_version_string@@XZ_5.0+0x138>
    5a14:	mov	w0, #0xb                   	// #11
    5a18:	ret
    5a1c:	stp	x29, x30, [sp, #-32]!
    5a20:	mov	x29, sp
    5a24:	stp	x19, x20, [sp, #16]
    5a28:	mov	x19, x0
    5a2c:	mov	x20, x1
    5a30:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    5a34:	mov	x1, x20
    5a38:	mov	x0, x19
    5a3c:	ldp	x19, x20, [sp, #16]
    5a40:	ldp	x29, x30, [sp], #32
    5a44:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    5a48:	sub	sp, sp, #0x70
    5a4c:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    5a50:	stp	x29, x30, [sp, #16]
    5a54:	add	x29, sp, #0x10
    5a58:	stp	x19, x20, [sp, #32]
    5a5c:	mov	x19, x0
    5a60:	stp	x25, x26, [sp, #80]
    5a64:	ldr	x26, [x3]
    5a68:	stp	x21, x22, [sp, #48]
    5a6c:	ldr	x0, [x0, #96]
    5a70:	stp	x23, x24, [sp, #64]
    5a74:	ldr	w24, [sp, #112]
    5a78:	stp	x27, x28, [sp, #96]
    5a7c:	sub	x8, x8, x0
    5a80:	sub	x0, x4, x26
    5a84:	cmp	x8, x0
    5a88:	b.cs	5ab4 <lzma_block_uncomp_encode@@XZ_5.2+0xd0>  // b.hs, b.nlast
    5a8c:	mov	w20, #0x9                   	// #9
    5a90:	mov	w0, w20
    5a94:	ldp	x29, x30, [sp, #16]
    5a98:	ldp	x19, x20, [sp, #32]
    5a9c:	ldp	x21, x22, [sp, #48]
    5aa0:	ldp	x23, x24, [sp, #64]
    5aa4:	ldp	x25, x26, [sp, #80]
    5aa8:	ldp	x27, x28, [sp, #96]
    5aac:	add	sp, sp, #0x70
    5ab0:	ret
    5ab4:	ldr	w0, [x19, #80]
    5ab8:	mov	x22, x5
    5abc:	mov	x21, x6
    5ac0:	mov	x23, x7
    5ac4:	cmp	w0, #0x1
    5ac8:	b.eq	5b70 <lzma_block_uncomp_encode@@XZ_5.2+0x18c>  // b.none
    5acc:	cmp	w0, #0x2
    5ad0:	b.eq	5b98 <lzma_block_uncomp_encode@@XZ_5.2+0x1b4>  // b.none
    5ad4:	cbnz	w0, 5c1c <lzma_block_uncomp_encode@@XZ_5.2+0x238>
    5ad8:	ldr	x0, [x19]
    5adc:	mov	x27, x2
    5ae0:	ldr	x8, [x19, #24]
    5ae4:	str	w24, [sp]
    5ae8:	mov	x25, x3
    5aec:	ldr	x28, [x6]
    5af0:	blr	x8
    5af4:	mov	w20, w0
    5af8:	mov	x2, #0xfffffffffffffbbc    	// #-1092
    5afc:	ldr	x0, [x21]
    5b00:	movk	x2, #0x7fff, lsl #48
    5b04:	sub	x1, x0, x28
    5b08:	ldr	x0, [x19, #88]
    5b0c:	sub	x2, x2, x0
    5b10:	cmp	x2, x1
    5b14:	b.cc	5a8c <lzma_block_uncomp_encode@@XZ_5.2+0xa8>  // b.lo, b.ul, b.last
    5b18:	add	x0, x0, x1
    5b1c:	str	x0, [x19, #88]
    5b20:	ldr	x3, [x25]
    5b24:	add	x2, x27, x26
    5b28:	ldr	x0, [x19, #96]
    5b2c:	sub	x3, x3, x26
    5b30:	add	x0, x0, x3
    5b34:	str	x0, [x19, #96]
    5b38:	ldr	x0, [x19, #72]
    5b3c:	ldr	w1, [x0, #8]
    5b40:	add	x0, x19, #0x70
    5b44:	bl	afcc <lzma_check_size@@XZ_5.0+0x50>
    5b48:	cmp	w20, #0x1
    5b4c:	ccmp	w24, #0x1, #0x4, eq  // eq = none
    5b50:	b.eq	5a90 <lzma_block_uncomp_encode@@XZ_5.2+0xac>  // b.none
    5b54:	ldr	x0, [x19, #72]
    5b58:	ldr	x1, [x19, #88]
    5b5c:	str	x1, [x0, #16]
    5b60:	ldr	x1, [x19, #96]
    5b64:	str	x1, [x0, #24]
    5b68:	mov	w0, #0x1                   	// #1
    5b6c:	str	w0, [x19, #80]
    5b70:	ldr	x1, [x19, #88]
    5b74:	tst	x1, #0x3
    5b78:	b.ne	5bf0 <lzma_block_uncomp_encode@@XZ_5.2+0x20c>  // b.any
    5b7c:	ldr	x0, [x19, #72]
    5b80:	ldr	w1, [x0, #8]
    5b84:	cbz	w1, 5be8 <lzma_block_uncomp_encode@@XZ_5.2+0x204>
    5b88:	add	x0, x19, #0x70
    5b8c:	bl	b038 <lzma_check_size@@XZ_5.0+0xbc>
    5b90:	mov	w0, #0x2                   	// #2
    5b94:	str	w0, [x19, #80]
    5b98:	ldr	x0, [x19, #72]
    5b9c:	add	x24, x19, #0x70
    5ba0:	ldr	w0, [x0, #8]
    5ba4:	bl	3270 <lzma_check_size@plt>
    5ba8:	mov	w20, w0
    5bac:	mov	x5, x23
    5bb0:	mov	x4, x21
    5bb4:	mov	x3, x22
    5bb8:	mov	x2, x20
    5bbc:	add	x1, x19, #0x68
    5bc0:	mov	x0, x24
    5bc4:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    5bc8:	ldr	x0, [x19, #104]
    5bcc:	cmp	x0, x20
    5bd0:	b.cc	5bfc <lzma_block_uncomp_encode@@XZ_5.2+0x218>  // b.lo, b.ul, b.last
    5bd4:	ldr	x0, [x19, #72]
    5bd8:	mov	x2, x20
    5bdc:	mov	x1, x24
    5be0:	add	x0, x0, #0x28
    5be4:	bl	3090 <memcpy@plt>
    5be8:	mov	w20, #0x1                   	// #1
    5bec:	b	5a90 <lzma_block_uncomp_encode@@XZ_5.2+0xac>
    5bf0:	ldr	x0, [x21]
    5bf4:	cmp	x0, x23
    5bf8:	b.cc	5c04 <lzma_block_uncomp_encode@@XZ_5.2+0x220>  // b.lo, b.ul, b.last
    5bfc:	mov	w20, #0x0                   	// #0
    5c00:	b	5a90 <lzma_block_uncomp_encode@@XZ_5.2+0xac>
    5c04:	add	x1, x1, #0x1
    5c08:	strb	wzr, [x22, x0]
    5c0c:	add	x0, x0, #0x1
    5c10:	str	x0, [x21]
    5c14:	str	x1, [x19, #88]
    5c18:	b	5b70 <lzma_block_uncomp_encode@@XZ_5.2+0x18c>
    5c1c:	mov	w20, #0xb                   	// #11
    5c20:	b	5a90 <lzma_block_uncomp_encode@@XZ_5.2+0xac>
    5c24:	stp	x29, x30, [sp, #-48]!
    5c28:	mov	x29, sp
    5c2c:	stp	x21, x22, [sp, #32]
    5c30:	mov	x21, x2
    5c34:	mov	x22, x1
    5c38:	ldr	x2, [x0, #16]
    5c3c:	stp	x19, x20, [sp, #16]
    5c40:	adrp	x19, 5000 <lzma_index_iter_next@@XZ_5.0+0x20>
    5c44:	add	x19, x19, #0xc24
    5c48:	mov	x20, x0
    5c4c:	cmp	x2, x19
    5c50:	b.eq	5c58 <lzma_block_uncomp_encode@@XZ_5.2+0x274>  // b.none
    5c54:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    5c58:	str	x19, [x20, #16]
    5c5c:	cbz	x21, 5d30 <lzma_block_uncomp_encode@@XZ_5.2+0x34c>
    5c60:	ldr	w0, [x21]
    5c64:	cmp	w0, #0x1
    5c68:	b.hi	5d1c <lzma_block_uncomp_encode@@XZ_5.2+0x338>  // b.pmore
    5c6c:	ldr	w0, [x21, #8]
    5c70:	cmp	w0, #0xf
    5c74:	b.hi	5d30 <lzma_block_uncomp_encode@@XZ_5.2+0x34c>  // b.pmore
    5c78:	bl	30e0 <lzma_check_is_supported@plt>
    5c7c:	tst	w0, #0xff
    5c80:	b.eq	5d38 <lzma_block_uncomp_encode@@XZ_5.2+0x354>  // b.none
    5c84:	ldr	x19, [x20]
    5c88:	cbnz	x19, 5ce4 <lzma_block_uncomp_encode@@XZ_5.2+0x300>
    5c8c:	mov	x1, x22
    5c90:	mov	x0, #0xd8                  	// #216
    5c94:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    5c98:	mov	x19, x0
    5c9c:	cbz	x0, 5d40 <lzma_block_uncomp_encode@@XZ_5.2+0x35c>
    5ca0:	adrp	x0, 5000 <lzma_index_iter_next@@XZ_5.0+0x20>
    5ca4:	add	x0, x0, #0xa48
    5ca8:	str	x0, [x20, #24]
    5cac:	adrp	x0, 5000 <lzma_index_iter_next@@XZ_5.0+0x20>
    5cb0:	add	x0, x0, #0xa1c
    5cb4:	str	x0, [x20, #32]
    5cb8:	adrp	x0, 5000 <lzma_index_iter_next@@XZ_5.0+0x20>
    5cbc:	add	x0, x0, #0xa04
    5cc0:	str	xzr, [x19]
    5cc4:	str	x19, [x20]
    5cc8:	stp	xzr, xzr, [x19, #16]
    5ccc:	stp	xzr, xzr, [x19, #32]
    5cd0:	stp	xzr, xzr, [x19, #48]
    5cd4:	str	x0, [x20, #64]
    5cd8:	mov	x0, #0xffffffffffffffff    	// #-1
    5cdc:	str	x0, [x19, #8]
    5ce0:	str	xzr, [x19, #64]
    5ce4:	ldr	w1, [x21, #8]
    5ce8:	add	x0, x19, #0x70
    5cec:	str	x21, [x19, #72]
    5cf0:	str	wzr, [x19, #80]
    5cf4:	stp	xzr, xzr, [x19, #88]
    5cf8:	str	xzr, [x19, #104]
    5cfc:	bl	afa0 <lzma_check_size@@XZ_5.0+0x24>
    5d00:	mov	x1, x22
    5d04:	mov	x0, x19
    5d08:	ldp	x19, x20, [sp, #16]
    5d0c:	ldr	x2, [x21, #32]
    5d10:	ldp	x21, x22, [sp, #32]
    5d14:	ldp	x29, x30, [sp], #48
    5d18:	b	62ac <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    5d1c:	mov	w0, #0x8                   	// #8
    5d20:	ldp	x19, x20, [sp, #16]
    5d24:	ldp	x21, x22, [sp, #32]
    5d28:	ldp	x29, x30, [sp], #48
    5d2c:	ret
    5d30:	mov	w0, #0xb                   	// #11
    5d34:	b	5d20 <lzma_block_uncomp_encode@@XZ_5.2+0x33c>
    5d38:	mov	w0, #0x3                   	// #3
    5d3c:	b	5d20 <lzma_block_uncomp_encode@@XZ_5.2+0x33c>
    5d40:	mov	w0, #0x5                   	// #5
    5d44:	b	5d20 <lzma_block_uncomp_encode@@XZ_5.2+0x33c>

0000000000005d48 <lzma_block_encoder@@XZ_5.0>:
    5d48:	stp	x29, x30, [sp, #-48]!
    5d4c:	mov	x29, sp
    5d50:	stp	x19, x20, [sp, #16]
    5d54:	mov	x20, x0
    5d58:	str	x21, [sp, #32]
    5d5c:	mov	x21, x1
    5d60:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    5d64:	mov	w19, w0
    5d68:	cbnz	w0, 5d88 <lzma_block_encoder@@XZ_5.0+0x40>
    5d6c:	ldp	x1, x0, [x20, #48]
    5d70:	mov	x2, x21
    5d74:	bl	5c24 <lzma_block_uncomp_encode@@XZ_5.2+0x240>
    5d78:	mov	w19, w0
    5d7c:	cbz	w0, 5d9c <lzma_block_encoder@@XZ_5.0+0x54>
    5d80:	mov	x0, x20
    5d84:	bl	3320 <lzma_end@plt>
    5d88:	mov	w0, w19
    5d8c:	ldp	x19, x20, [sp, #16]
    5d90:	ldr	x21, [sp, #32]
    5d94:	ldp	x29, x30, [sp], #48
    5d98:	ret
    5d9c:	ldr	x0, [x20, #56]
    5da0:	mov	w1, #0x1                   	// #1
    5da4:	strb	w1, [x0, #88]
    5da8:	strb	w1, [x0, #91]
    5dac:	b	5d88 <lzma_block_encoder@@XZ_5.0+0x40>

0000000000005db0 <lzma_block_header_size@@XZ_5.0>:
    5db0:	stp	x29, x30, [sp, #-64]!
    5db4:	mov	x29, sp
    5db8:	stp	x19, x20, [sp, #16]
    5dbc:	mov	x20, x0
    5dc0:	ldr	w0, [x0]
    5dc4:	stp	x21, x22, [sp, #32]
    5dc8:	cmp	w0, #0x1
    5dcc:	b.hi	5e84 <lzma_block_header_size@@XZ_5.0+0xd4>  // b.pmore
    5dd0:	ldr	x19, [x20, #16]
    5dd4:	cmn	x19, #0x1
    5dd8:	b.eq	5e58 <lzma_block_header_size@@XZ_5.0+0xa8>  // b.none
    5ddc:	mov	x0, x19
    5de0:	bl	3480 <lzma_vli_size@plt>
    5de4:	cbz	w0, 5e8c <lzma_block_header_size@@XZ_5.0+0xdc>
    5de8:	cbz	x19, 5e8c <lzma_block_header_size@@XZ_5.0+0xdc>
    5dec:	add	w19, w0, #0x6
    5df0:	ldr	x0, [x20, #24]
    5df4:	cmn	x0, #0x1
    5df8:	b.eq	5e08 <lzma_block_header_size@@XZ_5.0+0x58>  // b.none
    5dfc:	bl	3480 <lzma_vli_size@plt>
    5e00:	cbz	w0, 5e8c <lzma_block_header_size@@XZ_5.0+0xdc>
    5e04:	add	w19, w19, w0
    5e08:	ldr	x0, [x20, #32]
    5e0c:	cbz	x0, 5e8c <lzma_block_header_size@@XZ_5.0+0xdc>
    5e10:	ldr	x0, [x0]
    5e14:	cmn	x0, #0x1
    5e18:	b.eq	5e8c <lzma_block_header_size@@XZ_5.0+0xdc>  // b.none
    5e1c:	add	x22, sp, #0x3c
    5e20:	mov	x21, #0x0                   	// #0
    5e24:	ldr	x0, [x20, #32]
    5e28:	add	x1, x0, x21
    5e2c:	ldr	x0, [x0, x21]
    5e30:	cmn	x0, #0x1
    5e34:	b.ne	5e60 <lzma_block_header_size@@XZ_5.0+0xb0>  // b.any
    5e38:	add	w19, w19, #0x3
    5e3c:	mov	w0, #0x0                   	// #0
    5e40:	and	w19, w19, #0xfffffffc
    5e44:	str	w19, [x20, #4]
    5e48:	ldp	x19, x20, [sp, #16]
    5e4c:	ldp	x21, x22, [sp, #32]
    5e50:	ldp	x29, x30, [sp], #64
    5e54:	ret
    5e58:	mov	w19, #0x6                   	// #6
    5e5c:	b	5df0 <lzma_block_header_size@@XZ_5.0+0x40>
    5e60:	cmp	x21, #0x40
    5e64:	b.eq	5e8c <lzma_block_header_size@@XZ_5.0+0xdc>  // b.none
    5e68:	mov	x0, x22
    5e6c:	add	x21, x21, #0x10
    5e70:	bl	30f0 <lzma_filter_flags_size@plt>
    5e74:	cbnz	w0, 5e48 <lzma_block_header_size@@XZ_5.0+0x98>
    5e78:	ldr	w0, [sp, #60]
    5e7c:	add	w19, w19, w0
    5e80:	b	5e24 <lzma_block_header_size@@XZ_5.0+0x74>
    5e84:	mov	w0, #0x8                   	// #8
    5e88:	b	5e48 <lzma_block_header_size@@XZ_5.0+0x98>
    5e8c:	mov	w0, #0xb                   	// #11
    5e90:	b	5e48 <lzma_block_header_size@@XZ_5.0+0x98>

0000000000005e94 <lzma_block_header_encode@@XZ_5.0>:
    5e94:	stp	x29, x30, [sp, #-96]!
    5e98:	mov	x29, sp
    5e9c:	stp	x19, x20, [sp, #16]
    5ea0:	mov	x19, x1
    5ea4:	stp	x21, x22, [sp, #32]
    5ea8:	stp	x23, x24, [sp, #48]
    5eac:	mov	x23, x0
    5eb0:	str	x25, [sp, #64]
    5eb4:	bl	3190 <lzma_block_unpadded_size@plt>
    5eb8:	cbnz	x0, 5edc <lzma_block_header_encode@@XZ_5.0+0x48>
    5ebc:	mov	w20, #0xb                   	// #11
    5ec0:	mov	w0, w20
    5ec4:	ldp	x19, x20, [sp, #16]
    5ec8:	ldp	x21, x22, [sp, #32]
    5ecc:	ldp	x23, x24, [sp, #48]
    5ed0:	ldr	x25, [sp, #64]
    5ed4:	ldp	x29, x30, [sp], #96
    5ed8:	ret
    5edc:	ldr	x0, [x23, #24]
    5ee0:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    5ee4:	add	x0, x0, x1
    5ee8:	mov	x1, #0x7ffffffffffffffe    	// #9223372036854775806
    5eec:	cmp	x0, x1
    5ef0:	b.ls	5ebc <lzma_block_header_encode@@XZ_5.0+0x28>  // b.plast
    5ef4:	ldr	w22, [x23, #4]
    5ef8:	strb	wzr, [x19, #1]
    5efc:	sub	w22, w22, #0x4
    5f00:	lsr	x0, x22, #2
    5f04:	strb	w0, [x19]
    5f08:	mov	x0, #0x2                   	// #2
    5f0c:	str	x0, [sp, #88]
    5f10:	ldr	x0, [x23, #16]
    5f14:	cmn	x0, #0x1
    5f18:	b.eq	5f44 <lzma_block_header_encode@@XZ_5.0+0xb0>  // b.none
    5f1c:	mov	x4, x22
    5f20:	add	x3, sp, #0x58
    5f24:	mov	x2, x19
    5f28:	mov	x1, #0x0                   	// #0
    5f2c:	bl	3450 <lzma_vli_encode@plt>
    5f30:	mov	w20, w0
    5f34:	cbnz	w0, 5ec0 <lzma_block_header_encode@@XZ_5.0+0x2c>
    5f38:	ldrb	w0, [x19, #1]
    5f3c:	orr	w0, w0, #0x40
    5f40:	strb	w0, [x19, #1]
    5f44:	ldr	x0, [x23, #24]
    5f48:	cmn	x0, #0x1
    5f4c:	b.eq	5f78 <lzma_block_header_encode@@XZ_5.0+0xe4>  // b.none
    5f50:	mov	x4, x22
    5f54:	add	x3, sp, #0x58
    5f58:	mov	x2, x19
    5f5c:	mov	x1, #0x0                   	// #0
    5f60:	bl	3450 <lzma_vli_encode@plt>
    5f64:	mov	w20, w0
    5f68:	cbnz	w0, 5ec0 <lzma_block_header_encode@@XZ_5.0+0x2c>
    5f6c:	ldrb	w0, [x19, #1]
    5f70:	orr	w0, w0, #0xffffff80
    5f74:	strb	w0, [x19, #1]
    5f78:	ldr	x0, [x23, #32]
    5f7c:	cbz	x0, 5ebc <lzma_block_header_encode@@XZ_5.0+0x28>
    5f80:	ldr	x0, [x0]
    5f84:	cmn	x0, #0x1
    5f88:	b.eq	5ebc <lzma_block_header_encode@@XZ_5.0+0x28>  // b.none
    5f8c:	add	x25, sp, #0x58
    5f90:	mov	x21, #0x0                   	// #0
    5f94:	ldr	x0, [x23, #32]
    5f98:	mov	x3, x22
    5f9c:	mov	x2, x25
    5fa0:	mov	x1, x19
    5fa4:	lsl	x24, x21, #4
    5fa8:	add	x0, x0, x21, lsl #4
    5fac:	bl	3350 <lzma_filter_flags_encode@plt>
    5fb0:	mov	w20, w0
    5fb4:	cbnz	w0, 5ec0 <lzma_block_header_encode@@XZ_5.0+0x2c>
    5fb8:	ldr	x0, [x23, #32]
    5fbc:	add	x21, x21, #0x1
    5fc0:	add	x0, x0, x24
    5fc4:	ldr	x0, [x0, #16]
    5fc8:	cmn	x0, #0x1
    5fcc:	b.ne	600c <lzma_block_header_encode@@XZ_5.0+0x178>  // b.any
    5fd0:	ldrb	w0, [x19, #1]
    5fd4:	sub	w21, w21, #0x1
    5fd8:	mov	w1, #0x0                   	// #0
    5fdc:	orr	w21, w21, w0
    5fe0:	strb	w21, [x19, #1]
    5fe4:	ldr	x0, [sp, #88]
    5fe8:	sub	x2, x22, x0
    5fec:	add	x0, x19, x0
    5ff0:	bl	3230 <memset@plt>
    5ff4:	mov	x1, x22
    5ff8:	mov	x0, x19
    5ffc:	mov	w2, #0x0                   	// #0
    6000:	bl	31c0 <lzma_crc32@plt>
    6004:	str	w0, [x19, x22]
    6008:	b	5ec0 <lzma_block_header_encode@@XZ_5.0+0x2c>
    600c:	cmp	x21, #0x4
    6010:	b.ne	5f94 <lzma_block_header_encode@@XZ_5.0+0x100>  // b.any
    6014:	b	5ebc <lzma_block_header_encode@@XZ_5.0+0x28>

0000000000006018 <lzma_easy_buffer_encode@@XZ_5.0>:
    6018:	stp	x29, x30, [sp, #-272]!
    601c:	mov	x29, sp
    6020:	stp	x25, x26, [sp, #64]
    6024:	add	x26, sp, #0x50
    6028:	mov	x25, x7
    602c:	stp	x19, x20, [sp, #16]
    6030:	mov	w19, w1
    6034:	mov	x20, x2
    6038:	mov	w1, w0
    603c:	mov	x0, x26
    6040:	stp	x21, x22, [sp, #32]
    6044:	mov	x21, x3
    6048:	mov	x22, x4
    604c:	stp	x23, x24, [sp, #48]
    6050:	mov	x23, x5
    6054:	mov	x24, x6
    6058:	bl	3e90 <lzma_block_total_size@@XZ_5.0+0x24>
    605c:	tst	w0, #0xff
    6060:	b.ne	60a0 <lzma_easy_buffer_encode@@XZ_5.0+0x88>  // b.any
    6064:	mov	x7, x25
    6068:	mov	x6, x24
    606c:	mov	x5, x23
    6070:	mov	x4, x22
    6074:	mov	x3, x21
    6078:	mov	x2, x20
    607c:	mov	w1, w19
    6080:	mov	x0, x26
    6084:	bl	31f0 <lzma_stream_buffer_encode@plt>
    6088:	ldp	x19, x20, [sp, #16]
    608c:	ldp	x21, x22, [sp, #32]
    6090:	ldp	x23, x24, [sp, #48]
    6094:	ldp	x25, x26, [sp, #64]
    6098:	ldp	x29, x30, [sp], #272
    609c:	ret
    60a0:	mov	w0, #0x8                   	// #8
    60a4:	b	6088 <lzma_easy_buffer_encode@@XZ_5.0+0x70>

00000000000060a8 <lzma_easy_encoder@@XZ_5.0>:
    60a8:	stp	x29, x30, [sp, #-240]!
    60ac:	mov	x29, sp
    60b0:	str	x21, [sp, #32]
    60b4:	add	x21, sp, #0x30
    60b8:	stp	x19, x20, [sp, #16]
    60bc:	mov	x19, x0
    60c0:	mov	w20, w2
    60c4:	mov	x0, x21
    60c8:	bl	3e90 <lzma_block_total_size@@XZ_5.0+0x24>
    60cc:	tst	w0, #0xff
    60d0:	b.ne	60f4 <lzma_easy_encoder@@XZ_5.0+0x4c>  // b.any
    60d4:	mov	w2, w20
    60d8:	mov	x1, x21
    60dc:	mov	x0, x19
    60e0:	bl	34a0 <lzma_stream_encoder@plt>
    60e4:	ldp	x19, x20, [sp, #16]
    60e8:	ldr	x21, [sp, #32]
    60ec:	ldp	x29, x30, [sp], #240
    60f0:	ret
    60f4:	mov	w0, #0x8                   	// #8
    60f8:	b	60e4 <lzma_easy_encoder@@XZ_5.0+0x3c>

00000000000060fc <lzma_easy_encoder_memusage@@XZ_5.0>:
    60fc:	stp	x29, x30, [sp, #-224]!
    6100:	mov	w1, w0
    6104:	mov	x29, sp
    6108:	str	x19, [sp, #16]
    610c:	add	x19, sp, #0x20
    6110:	mov	x0, x19
    6114:	bl	3e90 <lzma_block_total_size@@XZ_5.0+0x24>
    6118:	tst	w0, #0xff
    611c:	b.ne	6134 <lzma_easy_encoder_memusage@@XZ_5.0+0x38>  // b.any
    6120:	mov	x0, x19
    6124:	bl	3220 <lzma_raw_encoder_memusage@plt>
    6128:	ldr	x19, [sp, #16]
    612c:	ldp	x29, x30, [sp], #224
    6130:	ret
    6134:	mov	x0, #0xffffffff            	// #4294967295
    6138:	b	6128 <lzma_easy_encoder_memusage@@XZ_5.0+0x2c>

000000000000613c <lzma_raw_buffer_encode@@XZ_5.0>:
    613c:	sub	sp, sp, #0xc0
    6140:	cmp	x2, #0x0
    6144:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    6148:	stp	x29, x30, [sp, #16]
    614c:	add	x29, sp, #0x10
    6150:	stp	x19, x20, [sp, #32]
    6154:	stp	x21, x22, [sp, #48]
    6158:	stp	x23, x24, [sp, #64]
    615c:	stp	x25, x26, [sp, #80]
    6160:	str	x27, [sp, #96]
    6164:	b.ne	624c <lzma_raw_buffer_encode@@XZ_5.0+0x110>  // b.any
    6168:	cmp	x4, #0x0
    616c:	mov	x24, x4
    6170:	mov	x20, x5
    6174:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    6178:	b.eq	624c <lzma_raw_buffer_encode@@XZ_5.0+0x110>  // b.none
    617c:	mov	x21, x2
    6180:	mov	x25, x6
    6184:	ldr	x2, [x5]
    6188:	cmp	x2, x6
    618c:	b.hi	624c <lzma_raw_buffer_encode@@XZ_5.0+0x110>  // b.pmore
    6190:	mov	x2, #0xffffffffffffffff    	// #-1
    6194:	add	x26, sp, #0x78
    6198:	mov	x22, x1
    619c:	mov	x23, x3
    61a0:	stp	xzr, x2, [sp, #120]
    61a4:	mov	x2, x0
    61a8:	mov	x0, x26
    61ac:	stp	xzr, xzr, [sp, #136]
    61b0:	stp	xzr, xzr, [sp, #152]
    61b4:	stp	xzr, xzr, [sp, #168]
    61b8:	str	xzr, [sp, #184]
    61bc:	bl	62ac <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    61c0:	mov	w19, w0
    61c4:	cbnz	w0, 6228 <lzma_raw_buffer_encode@@XZ_5.0+0xec>
    61c8:	mov	w0, #0x3                   	// #3
    61cc:	mov	x2, x21
    61d0:	ldr	x27, [x20]
    61d4:	str	w0, [sp]
    61d8:	ldr	x0, [sp, #120]
    61dc:	mov	x7, x25
    61e0:	ldr	x8, [sp, #144]
    61e4:	mov	x6, x20
    61e8:	mov	x5, x24
    61ec:	mov	x4, x23
    61f0:	add	x3, sp, #0x70
    61f4:	str	xzr, [sp, #112]
    61f8:	mov	x1, x22
    61fc:	blr	x8
    6200:	mov	w21, w0
    6204:	mov	x1, x22
    6208:	mov	x0, x26
    620c:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    6210:	cmp	w21, #0x1
    6214:	b.eq	6228 <lzma_raw_buffer_encode@@XZ_5.0+0xec>  // b.none
    6218:	cmp	w21, #0x0
    621c:	mov	w19, #0xa                   	// #10
    6220:	csel	w19, w21, w19, ne  // ne = any
    6224:	str	x27, [x20]
    6228:	mov	w0, w19
    622c:	ldp	x29, x30, [sp, #16]
    6230:	ldp	x19, x20, [sp, #32]
    6234:	ldp	x21, x22, [sp, #48]
    6238:	ldp	x23, x24, [sp, #64]
    623c:	ldp	x25, x26, [sp, #80]
    6240:	ldr	x27, [sp, #96]
    6244:	add	sp, sp, #0xc0
    6248:	ret
    624c:	mov	w19, #0xb                   	// #11
    6250:	b	6228 <lzma_raw_buffer_encode@@XZ_5.0+0xec>
    6254:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    6258:	add	x1, x1, #0xa00
    625c:	mov	x2, #0x0                   	// #0
    6260:	mov	x4, #0x38                  	// #56
    6264:	mul	x3, x2, x4
    6268:	ldr	x5, [x3, x1]
    626c:	cmp	x5, x0
    6270:	b.ne	627c <lzma_raw_buffer_encode@@XZ_5.0+0x140>  // b.any
    6274:	add	x0, x1, x3
    6278:	ret
    627c:	add	x2, x2, #0x1
    6280:	cmp	x2, #0x9
    6284:	b.ne	6264 <lzma_raw_buffer_encode@@XZ_5.0+0x128>  // b.any
    6288:	mov	x0, #0x0                   	// #0
    628c:	b	6278 <lzma_raw_buffer_encode@@XZ_5.0+0x13c>

0000000000006290 <lzma_filter_encoder_is_supported@@XZ_5.0>:
    6290:	stp	x29, x30, [sp, #-16]!
    6294:	mov	x29, sp
    6298:	bl	6254 <lzma_raw_buffer_encode@@XZ_5.0+0x118>
    629c:	cmp	x0, #0x0
    62a0:	cset	w0, ne  // ne = any
    62a4:	ldp	x29, x30, [sp], #16
    62a8:	ret
    62ac:	mov	w4, #0x1                   	// #1
    62b0:	adrp	x3, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    62b4:	add	x3, x3, #0x254
    62b8:	b	40c4 <lzma_filters_copy@@XZ_5.0+0x144>

00000000000062bc <lzma_raw_encoder@@XZ_5.0>:
    62bc:	stp	x29, x30, [sp, #-48]!
    62c0:	mov	x29, sp
    62c4:	stp	x19, x20, [sp, #16]
    62c8:	mov	x20, x0
    62cc:	str	x21, [sp, #32]
    62d0:	mov	x21, x1
    62d4:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    62d8:	mov	w19, w0
    62dc:	cbnz	w0, 6308 <lzma_raw_encoder@@XZ_5.0+0x4c>
    62e0:	ldp	x1, x0, [x20, #48]
    62e4:	mov	x2, x21
    62e8:	mov	w4, #0x1                   	// #1
    62ec:	adrp	x3, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    62f0:	add	x3, x3, #0x254
    62f4:	bl	40c4 <lzma_filters_copy@@XZ_5.0+0x144>
    62f8:	mov	w19, w0
    62fc:	cbz	w0, 631c <lzma_raw_encoder@@XZ_5.0+0x60>
    6300:	mov	x0, x20
    6304:	bl	3320 <lzma_end@plt>
    6308:	mov	w0, w19
    630c:	ldp	x19, x20, [sp, #16]
    6310:	ldr	x21, [sp, #32]
    6314:	ldp	x29, x30, [sp], #48
    6318:	ret
    631c:	ldr	x0, [x20, #56]
    6320:	mov	w1, #0x101                 	// #257
    6324:	strh	w1, [x0, #88]
    6328:	mov	w1, #0x1                   	// #1
    632c:	strb	w1, [x0, #91]
    6330:	b	6308 <lzma_raw_encoder@@XZ_5.0+0x4c>

0000000000006334 <lzma_raw_encoder_memusage@@XZ_5.0>:
    6334:	mov	x1, x0
    6338:	adrp	x0, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    633c:	add	x0, x0, #0x254
    6340:	b	4234 <lzma_filters_copy@@XZ_5.0+0x2b4>

0000000000006344 <lzma_filters_update@@XZ_5.0>:
    6344:	stp	x29, x30, [sp, #-128]!
    6348:	mov	x29, sp
    634c:	stp	x21, x22, [sp, #32]
    6350:	ldr	x22, [x0, #56]
    6354:	stp	x19, x20, [sp, #16]
    6358:	ldr	x21, [x22, #64]
    635c:	cbz	x21, 63dc <lzma_filters_update@@XZ_5.0+0x98>
    6360:	mov	x20, x0
    6364:	mov	x19, x1
    6368:	mov	x0, x1
    636c:	bl	3220 <lzma_raw_encoder_memusage@plt>
    6370:	cmn	x0, #0x1
    6374:	b.eq	63e4 <lzma_filters_update@@XZ_5.0+0xa0>  // b.none
    6378:	mov	x1, #0x1                   	// #1
    637c:	lsl	x0, x1, #4
    6380:	ldr	x2, [x19, x0]
    6384:	cmn	x2, #0x1
    6388:	b.ne	63d4 <lzma_filters_update@@XZ_5.0+0x90>  // b.any
    638c:	add	x3, sp, #0x30
    6390:	mov	x1, x19
    6394:	add	x2, x3, x0
    6398:	add	x4, x19, x0
    639c:	ldp	x6, x7, [x1], #16
    63a0:	stp	x6, x7, [x2, #-16]!
    63a4:	cmp	x1, x4
    63a8:	b.ne	639c <lzma_filters_update@@XZ_5.0+0x58>  // b.any
    63ac:	mov	x1, #0xffffffffffffffff    	// #-1
    63b0:	str	x1, [x3, x0]
    63b4:	ldr	x0, [x22]
    63b8:	mov	x2, x19
    63bc:	ldr	x1, [x20, #48]
    63c0:	blr	x21
    63c4:	ldp	x19, x20, [sp, #16]
    63c8:	ldp	x21, x22, [sp, #32]
    63cc:	ldp	x29, x30, [sp], #128
    63d0:	ret
    63d4:	add	x1, x1, #0x1
    63d8:	b	637c <lzma_filters_update@@XZ_5.0+0x38>
    63dc:	mov	w0, #0xb                   	// #11
    63e0:	b	63c4 <lzma_filters_update@@XZ_5.0+0x80>
    63e4:	mov	w0, #0x8                   	// #8
    63e8:	b	63c4 <lzma_filters_update@@XZ_5.0+0x80>
    63ec:	stp	x29, x30, [sp, #-32]!
    63f0:	mov	x29, sp
    63f4:	stp	x19, x20, [sp, #16]
    63f8:	mov	x19, x0
    63fc:	mov	x20, #0x0                   	// #0
    6400:	ldr	x0, [x19]
    6404:	cmn	x0, #0x1
    6408:	b.ne	641c <lzma_filters_update@@XZ_5.0+0xd8>  // b.any
    640c:	mov	x0, x20
    6410:	ldp	x19, x20, [sp, #16]
    6414:	ldp	x29, x30, [sp], #32
    6418:	ret
    641c:	bl	6254 <lzma_raw_buffer_encode@@XZ_5.0+0x118>
    6420:	ldr	x1, [x0, #24]
    6424:	cbz	x1, 643c <lzma_filters_update@@XZ_5.0+0xf8>
    6428:	ldr	x0, [x19, #8]
    642c:	blr	x1
    6430:	cbz	x0, 6410 <lzma_filters_update@@XZ_5.0+0xcc>
    6434:	cmp	x20, x0
    6438:	csel	x20, x20, x0, cs  // cs = hs, nlast
    643c:	add	x19, x19, #0x10
    6440:	b	6400 <lzma_filters_update@@XZ_5.0+0xbc>

0000000000006444 <lzma_properties_size@@XZ_5.0>:
    6444:	stp	x29, x30, [sp, #-16]!
    6448:	mov	x6, x0
    644c:	mov	x7, x1
    6450:	mov	x29, sp
    6454:	ldr	x8, [x1]
    6458:	mov	x0, x8
    645c:	bl	6254 <lzma_raw_buffer_encode@@XZ_5.0+0x118>
    6460:	cbnz	x0, 647c <lzma_properties_size@@XZ_5.0+0x38>
    6464:	cmp	x8, #0x0
    6468:	mov	w0, #0x8                   	// #8
    646c:	mov	w1, #0xb                   	// #11
    6470:	csel	w0, w0, w1, ge  // ge = tcont
    6474:	ldp	x29, x30, [sp], #16
    6478:	ret
    647c:	ldr	x2, [x0, #32]
    6480:	cbnz	x2, 6494 <lzma_properties_size@@XZ_5.0+0x50>
    6484:	ldr	w0, [x0, #40]
    6488:	str	w0, [x6]
    648c:	mov	w0, #0x0                   	// #0
    6490:	b	6474 <lzma_properties_size@@XZ_5.0+0x30>
    6494:	ldp	x29, x30, [sp], #16
    6498:	mov	x0, x6
    649c:	ldr	x1, [x7, #8]
    64a0:	mov	x16, x2
    64a4:	br	x16

00000000000064a8 <lzma_properties_encode@@XZ_5.0>:
    64a8:	stp	x29, x30, [sp, #-16]!
    64ac:	mov	x6, x0
    64b0:	mov	x7, x1
    64b4:	mov	x29, sp
    64b8:	ldr	x0, [x0]
    64bc:	bl	6254 <lzma_raw_buffer_encode@@XZ_5.0+0x118>
    64c0:	cbz	x0, 64e0 <lzma_properties_encode@@XZ_5.0+0x38>
    64c4:	ldr	x2, [x0, #48]
    64c8:	cbz	x2, 64ec <lzma_properties_encode@@XZ_5.0+0x44>
    64cc:	ldp	x29, x30, [sp], #16
    64d0:	mov	x1, x7
    64d4:	ldr	x0, [x6, #8]
    64d8:	mov	x16, x2
    64dc:	br	x16
    64e0:	mov	w0, #0xb                   	// #11
    64e4:	ldp	x29, x30, [sp], #16
    64e8:	ret
    64ec:	mov	w0, #0x0                   	// #0
    64f0:	b	64e4 <lzma_properties_encode@@XZ_5.0+0x3c>

00000000000064f4 <lzma_filter_flags_size@@XZ_5.0>:
    64f4:	stp	x29, x30, [sp, #-64]!
    64f8:	mov	x2, #0x3fffffffffffffff    	// #4611686018427387903
    64fc:	mov	x29, sp
    6500:	ldr	x3, [x1]
    6504:	stp	x19, x20, [sp, #16]
    6508:	stp	x21, x22, [sp, #32]
    650c:	cmp	x3, x2
    6510:	str	x23, [sp, #48]
    6514:	b.hi	6568 <lzma_filter_flags_size@@XZ_5.0+0x74>  // b.pmore
    6518:	mov	x21, x0
    651c:	mov	x22, x1
    6520:	bl	3370 <lzma_properties_size@plt>
    6524:	mov	w20, w0
    6528:	cbnz	w0, 6550 <lzma_filter_flags_size@@XZ_5.0+0x5c>
    652c:	ldr	x0, [x22]
    6530:	ldr	w23, [x21]
    6534:	bl	3480 <lzma_vli_size@plt>
    6538:	mov	w19, w0
    653c:	mov	w0, w23
    6540:	bl	3480 <lzma_vli_size@plt>
    6544:	add	w19, w19, w0
    6548:	add	w19, w19, w23
    654c:	str	w19, [x21]
    6550:	mov	w0, w20
    6554:	ldp	x19, x20, [sp, #16]
    6558:	ldp	x21, x22, [sp, #32]
    655c:	ldr	x23, [sp, #48]
    6560:	ldp	x29, x30, [sp], #64
    6564:	ret
    6568:	mov	w20, #0xb                   	// #11
    656c:	b	6550 <lzma_filter_flags_size@@XZ_5.0+0x5c>

0000000000006570 <lzma_filter_flags_encode@@XZ_5.0>:
    6570:	stp	x29, x30, [sp, #-64]!
    6574:	mov	x29, sp
    6578:	stp	x21, x22, [sp, #32]
    657c:	mov	x21, x0
    6580:	mov	x22, x1
    6584:	ldr	x0, [x0]
    6588:	stp	x19, x20, [sp, #16]
    658c:	mov	x1, #0x3fffffffffffffff    	// #4611686018427387903
    6590:	cmp	x0, x1
    6594:	b.ls	65ac <lzma_filter_flags_encode@@XZ_5.0+0x3c>  // b.plast
    6598:	mov	w0, #0xb                   	// #11
    659c:	ldp	x19, x20, [sp, #16]
    65a0:	ldp	x21, x22, [sp, #32]
    65a4:	ldp	x29, x30, [sp], #64
    65a8:	ret
    65ac:	mov	x19, x2
    65b0:	mov	x20, x3
    65b4:	mov	x4, x3
    65b8:	mov	x1, #0x0                   	// #0
    65bc:	mov	x3, x2
    65c0:	mov	x2, x22
    65c4:	bl	3450 <lzma_vli_encode@plt>
    65c8:	cbnz	w0, 659c <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    65cc:	mov	x1, x21
    65d0:	add	x0, sp, #0x3c
    65d4:	bl	3370 <lzma_properties_size@plt>
    65d8:	cbnz	w0, 659c <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    65dc:	ldr	w0, [sp, #60]
    65e0:	mov	x4, x20
    65e4:	mov	x3, x19
    65e8:	mov	x2, x22
    65ec:	mov	x1, #0x0                   	// #0
    65f0:	bl	3450 <lzma_vli_encode@plt>
    65f4:	cbnz	w0, 659c <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    65f8:	ldr	x1, [x19]
    65fc:	ldr	w0, [sp, #60]
    6600:	sub	x20, x20, x1
    6604:	cmp	x20, x0
    6608:	b.cc	6598 <lzma_filter_flags_encode@@XZ_5.0+0x28>  // b.lo, b.ul, b.last
    660c:	add	x1, x22, x1
    6610:	mov	x0, x21
    6614:	bl	3400 <lzma_properties_encode@plt>
    6618:	cbnz	w0, 659c <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    661c:	ldr	x1, [x19]
    6620:	ldr	w2, [sp, #60]
    6624:	add	x1, x1, x2
    6628:	str	x1, [x19]
    662c:	b	659c <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    6630:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    6634:	stp	x29, x30, [sp, #-96]!
    6638:	mov	x29, sp
    663c:	stp	x23, x24, [sp, #48]
    6640:	adrp	x24, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    6644:	add	x24, x24, #0x750
    6648:	ldr	x23, [x6]
    664c:	stp	x19, x20, [sp, #16]
    6650:	mov	x19, x0
    6654:	stp	x21, x22, [sp, #32]
    6658:	mov	x21, x5
    665c:	mov	x22, x7
    6660:	stp	x25, x26, [sp, #64]
    6664:	add	x25, x0, #0x140
    6668:	add	x26, x0, #0x10
    666c:	stp	x27, x28, [sp, #80]
    6670:	mov	x28, x6
    6674:	mov	w27, #0x2                   	// #2
    6678:	ldr	x1, [x28]
    667c:	cmp	x1, x22
    6680:	b.cc	66a4 <lzma_filter_flags_encode@@XZ_5.0+0x134>  // b.lo, b.ul, b.last
    6684:	mov	w20, #0x0                   	// #0
    6688:	ldr	w2, [x19, #328]
    668c:	add	x0, x21, x23
    6690:	ldr	x1, [x28]
    6694:	sub	x1, x1, x23
    6698:	bl	31c0 <lzma_crc32@plt>
    669c:	str	w0, [x19, #328]
    66a0:	b	67f4 <lzma_filter_flags_encode@@XZ_5.0+0x284>
    66a4:	ldr	w0, [x19]
    66a8:	cmp	w0, #0x6
    66ac:	b.hi	6814 <lzma_filter_flags_encode@@XZ_5.0+0x2a4>  // b.pmore
    66b0:	ldrb	w0, [x24, w0, uxtw]
    66b4:	adr	x2, 66c0 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    66b8:	add	x0, x2, w0, sxtb #2
    66bc:	br	x0
    66c0:	mov	w0, #0x1                   	// #1
    66c4:	strb	wzr, [x21, x1]
    66c8:	add	x1, x1, #0x1
    66cc:	str	x1, [x28]
    66d0:	str	w0, [x19]
    66d4:	b	6678 <lzma_filter_flags_encode@@XZ_5.0+0x108>
    66d8:	ldr	x0, [x19, #8]
    66dc:	bl	34e0 <lzma_index_block_count@plt>
    66e0:	mov	x4, x22
    66e4:	mov	x3, x28
    66e8:	mov	x2, x21
    66ec:	mov	x1, x25
    66f0:	bl	3450 <lzma_vli_encode@plt>
    66f4:	mov	w20, w0
    66f8:	cmp	w0, #0x1
    66fc:	b.ne	6688 <lzma_filter_flags_encode@@XZ_5.0+0x118>  // b.any
    6700:	mov	w0, #0x4                   	// #4
    6704:	str	xzr, [x19, #320]
    6708:	b	66d0 <lzma_filter_flags_encode@@XZ_5.0+0x160>
    670c:	mov	x0, x26
    6710:	mov	w1, #0x2                   	// #2
    6714:	bl	3460 <lzma_index_iter_next@plt>
    6718:	tst	w0, #0xff
    671c:	b.eq	6738 <lzma_filter_flags_encode@@XZ_5.0+0x1c8>  // b.none
    6720:	ldr	x0, [x19, #8]
    6724:	bl	4968 <lzma_index_checks@@XZ_5.0+0x2c>
    6728:	mov	w0, w0
    672c:	str	x0, [x19, #320]
    6730:	mov	w0, #0x5                   	// #5
    6734:	b	66d0 <lzma_filter_flags_encode@@XZ_5.0+0x160>
    6738:	str	w27, [x19]
    673c:	ldp	x0, x5, [x19, #184]
    6740:	mov	x4, x22
    6744:	ldr	w1, [x19]
    6748:	mov	x3, x28
    674c:	mov	x2, x21
    6750:	cmp	w1, #0x2
    6754:	mov	x1, x25
    6758:	csel	x0, x5, x0, eq  // eq = none
    675c:	bl	3450 <lzma_vli_encode@plt>
    6760:	mov	w20, w0
    6764:	cmp	w0, #0x1
    6768:	b.ne	6688 <lzma_filter_flags_encode@@XZ_5.0+0x118>  // b.any
    676c:	ldr	w0, [x19]
    6770:	str	xzr, [x19, #320]
    6774:	add	w0, w0, #0x1
    6778:	b	66d0 <lzma_filter_flags_encode@@XZ_5.0+0x160>
    677c:	ldr	x0, [x19, #320]
    6780:	cbz	x0, 679c <lzma_filter_flags_encode@@XZ_5.0+0x22c>
    6784:	sub	x0, x0, #0x1
    6788:	strb	wzr, [x21, x1]
    678c:	str	x0, [x19, #320]
    6790:	add	x0, x1, #0x1
    6794:	str	x0, [x28]
    6798:	b	6678 <lzma_filter_flags_encode@@XZ_5.0+0x108>
    679c:	ldr	w2, [x19, #328]
    67a0:	sub	x1, x1, x23
    67a4:	add	x0, x21, x23
    67a8:	bl	31c0 <lzma_crc32@plt>
    67ac:	str	w0, [x19, #328]
    67b0:	mov	w0, #0x6                   	// #6
    67b4:	str	w0, [x19]
    67b8:	ldr	x1, [x28]
    67bc:	cmp	x1, x22
    67c0:	b.eq	681c <lzma_filter_flags_encode@@XZ_5.0+0x2ac>  // b.none
    67c4:	ldr	x0, [x19, #320]
    67c8:	ldr	w2, [x19, #328]
    67cc:	lsl	w3, w0, #3
    67d0:	add	x0, x0, #0x1
    67d4:	str	x0, [x19, #320]
    67d8:	cmp	x0, #0x3
    67dc:	lsr	w2, w2, w3
    67e0:	strb	w2, [x21, x1]
    67e4:	add	x1, x1, #0x1
    67e8:	str	x1, [x28]
    67ec:	b.ls	67b8 <lzma_filter_flags_encode@@XZ_5.0+0x248>  // b.plast
    67f0:	mov	w20, #0x1                   	// #1
    67f4:	mov	w0, w20
    67f8:	ldp	x19, x20, [sp, #16]
    67fc:	ldp	x21, x22, [sp, #32]
    6800:	ldp	x23, x24, [sp, #48]
    6804:	ldp	x25, x26, [sp, #64]
    6808:	ldp	x27, x28, [sp, #80]
    680c:	ldp	x29, x30, [sp], #96
    6810:	ret
    6814:	mov	w20, #0xb                   	// #11
    6818:	b	67f4 <lzma_filter_flags_encode@@XZ_5.0+0x284>
    681c:	mov	w20, #0x0                   	// #0
    6820:	b	67f4 <lzma_filter_flags_encode@@XZ_5.0+0x284>
    6824:	stp	x29, x30, [sp, #-48]!
    6828:	mov	x29, sp
    682c:	stp	x19, x20, [sp, #16]
    6830:	mov	x20, x2
    6834:	mov	x19, x0
    6838:	ldr	x2, [x0, #16]
    683c:	stp	x21, x22, [sp, #32]
    6840:	adrp	x21, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    6844:	add	x21, x21, #0x824
    6848:	mov	x22, x1
    684c:	cmp	x2, x21
    6850:	b.eq	6858 <lzma_filter_flags_encode@@XZ_5.0+0x2e8>  // b.none
    6854:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    6858:	str	x21, [x19, #16]
    685c:	cbz	x20, 68c8 <lzma_filter_flags_encode@@XZ_5.0+0x358>
    6860:	ldr	x0, [x19]
    6864:	cbnz	x0, 6894 <lzma_filter_flags_encode@@XZ_5.0+0x324>
    6868:	mov	x1, x22
    686c:	mov	x0, #0x150                 	// #336
    6870:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    6874:	str	x0, [x19]
    6878:	cbz	x0, 68d0 <lzma_filter_flags_encode@@XZ_5.0+0x360>
    687c:	adrp	x0, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    6880:	add	x0, x0, #0x634
    6884:	str	x0, [x19, #24]
    6888:	adrp	x0, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    688c:	add	x0, x0, #0x630
    6890:	str	x0, [x19, #32]
    6894:	ldr	x19, [x19]
    6898:	mov	x1, x20
    689c:	add	x0, x19, #0x10
    68a0:	bl	34b0 <lzma_index_iter_init@plt>
    68a4:	mov	w0, #0x0                   	// #0
    68a8:	str	wzr, [x19]
    68ac:	str	x20, [x19, #8]
    68b0:	str	xzr, [x19, #320]
    68b4:	str	wzr, [x19, #328]
    68b8:	ldp	x19, x20, [sp, #16]
    68bc:	ldp	x21, x22, [sp, #32]
    68c0:	ldp	x29, x30, [sp], #48
    68c4:	ret
    68c8:	mov	w0, #0xb                   	// #11
    68cc:	b	68b8 <lzma_filter_flags_encode@@XZ_5.0+0x348>
    68d0:	mov	w0, #0x5                   	// #5
    68d4:	b	68b8 <lzma_filter_flags_encode@@XZ_5.0+0x348>

00000000000068d8 <lzma_index_encoder@@XZ_5.0>:
    68d8:	stp	x29, x30, [sp, #-48]!
    68dc:	mov	x29, sp
    68e0:	stp	x19, x20, [sp, #16]
    68e4:	mov	x20, x0
    68e8:	str	x21, [sp, #32]
    68ec:	mov	x21, x1
    68f0:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    68f4:	mov	w19, w0
    68f8:	cbnz	w0, 6918 <lzma_index_encoder@@XZ_5.0+0x40>
    68fc:	ldp	x1, x0, [x20, #48]
    6900:	mov	x2, x21
    6904:	bl	6824 <lzma_filter_flags_encode@@XZ_5.0+0x2b4>
    6908:	mov	w19, w0
    690c:	cbz	w0, 692c <lzma_index_encoder@@XZ_5.0+0x54>
    6910:	mov	x0, x20
    6914:	bl	3320 <lzma_end@plt>
    6918:	mov	w0, w19
    691c:	ldp	x19, x20, [sp, #16]
    6920:	ldr	x21, [sp, #32]
    6924:	ldp	x29, x30, [sp], #48
    6928:	ret
    692c:	ldr	x0, [x20, #56]
    6930:	mov	w1, #0x1                   	// #1
    6934:	strb	w1, [x0, #88]
    6938:	strb	w1, [x0, #91]
    693c:	b	6918 <lzma_index_encoder@@XZ_5.0+0x40>

0000000000006940 <lzma_index_buffer_encode@@XZ_5.0>:
    6940:	cmp	x0, #0x0
    6944:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    6948:	b.eq	6a08 <lzma_index_buffer_encode@@XZ_5.0+0xc8>  // b.none
    694c:	sub	sp, sp, #0x1a0
    6950:	stp	x29, x30, [sp, #16]
    6954:	add	x29, sp, #0x10
    6958:	stp	x19, x20, [sp, #32]
    695c:	mov	x19, x2
    6960:	stp	x21, x22, [sp, #48]
    6964:	str	x23, [sp, #64]
    6968:	cbz	x2, 69ec <lzma_index_buffer_encode@@XZ_5.0+0xac>
    696c:	mov	x23, x1
    6970:	mov	x20, x3
    6974:	ldr	x1, [x2]
    6978:	cmp	x1, x3
    697c:	b.hi	69ec <lzma_index_buffer_encode@@XZ_5.0+0xac>  // b.pmore
    6980:	sub	x22, x3, x1
    6984:	mov	x21, x0
    6988:	bl	3510 <lzma_index_size@plt>
    698c:	cmp	x22, x0
    6990:	b.cc	6a10 <lzma_index_buffer_encode@@XZ_5.0+0xd0>  // b.lo, b.ul, b.last
    6994:	mov	x1, x21
    6998:	add	x0, sp, #0x60
    699c:	bl	34b0 <lzma_index_iter_init@plt>
    69a0:	str	x21, [sp, #88]
    69a4:	ldr	x21, [x19]
    69a8:	str	wzr, [sp]
    69ac:	add	x22, sp, #0x50
    69b0:	mov	x7, x20
    69b4:	mov	x6, x19
    69b8:	mov	x5, x23
    69bc:	mov	x0, x22
    69c0:	mov	x4, #0x0                   	// #0
    69c4:	mov	x3, #0x0                   	// #0
    69c8:	mov	x2, #0x0                   	// #0
    69cc:	mov	x1, #0x0                   	// #0
    69d0:	str	wzr, [sp, #80]
    69d4:	str	xzr, [sp, #400]
    69d8:	str	wzr, [sp, #408]
    69dc:	bl	6634 <lzma_filter_flags_encode@@XZ_5.0+0xc4>
    69e0:	cmp	w0, #0x1
    69e4:	b.eq	6a18 <lzma_index_buffer_encode@@XZ_5.0+0xd8>  // b.none
    69e8:	str	x21, [x19]
    69ec:	mov	w0, #0xb                   	// #11
    69f0:	ldp	x29, x30, [sp, #16]
    69f4:	ldp	x19, x20, [sp, #32]
    69f8:	ldp	x21, x22, [sp, #48]
    69fc:	ldr	x23, [sp, #64]
    6a00:	add	sp, sp, #0x1a0
    6a04:	ret
    6a08:	mov	w0, #0xb                   	// #11
    6a0c:	ret
    6a10:	mov	w0, #0xa                   	// #10
    6a14:	b	69f0 <lzma_index_buffer_encode@@XZ_5.0+0xb0>
    6a18:	mov	w0, #0x0                   	// #0
    6a1c:	b	69f0 <lzma_index_buffer_encode@@XZ_5.0+0xb0>

0000000000006a20 <lzma_stream_buffer_bound@@XZ_5.0>:
    6a20:	stp	x29, x30, [sp, #-16]!
    6a24:	mov	x29, sp
    6a28:	bl	3120 <lzma_block_buffer_bound@plt>
    6a2c:	cbz	x0, 6a44 <lzma_stream_buffer_bound@@XZ_5.0+0x24>
    6a30:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
    6a34:	sub	x1, x1, x0
    6a38:	cmp	x1, #0x2f
    6a3c:	add	x0, x0, #0x30
    6a40:	csel	x0, x0, xzr, hi  // hi = pmore
    6a44:	ldp	x29, x30, [sp], #16
    6a48:	ret

0000000000006a4c <lzma_stream_buffer_encode@@XZ_5.0>:
    6a4c:	stp	x29, x30, [sp, #-368]!
    6a50:	cmp	x0, #0x0
    6a54:	ccmp	w1, #0xf, #0x2, ne  // ne = any
    6a58:	mov	x29, sp
    6a5c:	stp	x19, x20, [sp, #16]
    6a60:	stp	x21, x22, [sp, #32]
    6a64:	stp	x23, x24, [sp, #48]
    6a68:	stp	x25, x26, [sp, #64]
    6a6c:	stp	x27, x28, [sp, #80]
    6a70:	b.ls	6a98 <lzma_stream_buffer_encode@@XZ_5.0+0x4c>  // b.plast
    6a74:	mov	w19, #0xb                   	// #11
    6a78:	mov	w0, w19
    6a7c:	ldp	x19, x20, [sp, #16]
    6a80:	ldp	x21, x22, [sp, #32]
    6a84:	ldp	x23, x24, [sp, #48]
    6a88:	ldp	x25, x26, [sp, #64]
    6a8c:	ldp	x27, x28, [sp, #80]
    6a90:	ldp	x29, x30, [sp], #368
    6a94:	ret
    6a98:	cmp	x3, #0x0
    6a9c:	mov	x22, x3
    6aa0:	mov	x26, x4
    6aa4:	ccmp	x4, #0x0, #0x4, eq  // eq = none
    6aa8:	b.ne	6a74 <lzma_stream_buffer_encode@@XZ_5.0+0x28>  // b.any
    6aac:	cmp	x5, #0x0
    6ab0:	mov	x21, x5
    6ab4:	mov	x24, x6
    6ab8:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    6abc:	b.eq	6a74 <lzma_stream_buffer_encode@@XZ_5.0+0x28>  // b.none
    6ac0:	ldr	x28, [x6]
    6ac4:	mov	x20, x7
    6ac8:	cmp	x28, x7
    6acc:	b.hi	6a74 <lzma_stream_buffer_encode@@XZ_5.0+0x28>  // b.pmore
    6ad0:	mov	x27, x0
    6ad4:	mov	w19, w1
    6ad8:	mov	x23, x2
    6adc:	mov	w0, w1
    6ae0:	bl	30e0 <lzma_check_is_supported@plt>
    6ae4:	tst	w0, #0xff
    6ae8:	b.eq	6c20 <lzma_stream_buffer_encode@@XZ_5.0+0x1d4>  // b.none
    6aec:	str	x28, [sp, #96]
    6af0:	sub	x0, x20, x28
    6af4:	cmp	x0, #0x18
    6af8:	b.ls	6c28 <lzma_stream_buffer_encode@@XZ_5.0+0x1dc>  // b.plast
    6afc:	add	x25, sp, #0x68
    6b00:	stp	xzr, xzr, [sp, #120]
    6b04:	sub	x20, x20, #0xc
    6b08:	add	x1, x21, x28
    6b0c:	mov	x0, x25
    6b10:	stp	xzr, xzr, [sp, #104]
    6b14:	str	w19, [sp, #120]
    6b18:	stp	xzr, xzr, [sp, #136]
    6b1c:	str	xzr, [sp, #152]
    6b20:	bl	3390 <lzma_stream_header_encode@plt>
    6b24:	cbnz	w0, 6a74 <lzma_stream_buffer_encode@@XZ_5.0+0x28>
    6b28:	ldr	x0, [sp, #96]
    6b2c:	add	x28, sp, #0xa0
    6b30:	mov	x2, #0xd0                  	// #208
    6b34:	mov	w1, #0x0                   	// #0
    6b38:	add	x0, x0, #0xc
    6b3c:	str	x0, [sp, #96]
    6b40:	mov	x0, x28
    6b44:	bl	3230 <memset@plt>
    6b48:	str	w19, [sp, #168]
    6b4c:	str	x27, [sp, #192]
    6b50:	cbnz	x26, 6b6c <lzma_stream_buffer_encode@@XZ_5.0+0x120>
    6b54:	mov	x0, x23
    6b58:	bl	33b0 <lzma_index_init@plt>
    6b5c:	mov	x22, x0
    6b60:	cbnz	x0, 6b98 <lzma_stream_buffer_encode@@XZ_5.0+0x14c>
    6b64:	mov	w19, #0x5                   	// #5
    6b68:	b	6a78 <lzma_stream_buffer_encode@@XZ_5.0+0x2c>
    6b6c:	mov	x6, x20
    6b70:	add	x5, sp, #0x60
    6b74:	mov	x4, x21
    6b78:	mov	x3, x26
    6b7c:	mov	x2, x22
    6b80:	mov	x1, x23
    6b84:	mov	x0, x28
    6b88:	bl	30d0 <lzma_block_buffer_encode@plt>
    6b8c:	mov	w19, w0
    6b90:	cbz	w0, 6b54 <lzma_stream_buffer_encode@@XZ_5.0+0x108>
    6b94:	b	6a78 <lzma_stream_buffer_encode@@XZ_5.0+0x2c>
    6b98:	cbnz	x26, 6bf8 <lzma_stream_buffer_encode@@XZ_5.0+0x1ac>
    6b9c:	mov	x3, x20
    6ba0:	add	x2, sp, #0x60
    6ba4:	mov	x1, x21
    6ba8:	mov	x0, x22
    6bac:	bl	3100 <lzma_index_buffer_encode@plt>
    6bb0:	mov	w19, w0
    6bb4:	mov	x0, x22
    6bb8:	bl	3510 <lzma_index_size@plt>
    6bbc:	str	x0, [sp, #112]
    6bc0:	mov	x1, x23
    6bc4:	mov	x0, x22
    6bc8:	bl	33e0 <lzma_index_end@plt>
    6bcc:	cbnz	w19, 6a78 <lzma_stream_buffer_encode@@XZ_5.0+0x2c>
    6bd0:	ldr	x1, [sp, #96]
    6bd4:	mov	x0, x25
    6bd8:	add	x1, x21, x1
    6bdc:	bl	3210 <lzma_stream_footer_encode@plt>
    6be0:	mov	w19, w0
    6be4:	cbnz	w0, 6a74 <lzma_stream_buffer_encode@@XZ_5.0+0x28>
    6be8:	ldr	x0, [sp, #96]
    6bec:	add	x0, x0, #0xc
    6bf0:	str	x0, [x24]
    6bf4:	b	6a78 <lzma_stream_buffer_encode@@XZ_5.0+0x2c>
    6bf8:	mov	x0, x28
    6bfc:	bl	3190 <lzma_block_unpadded_size@plt>
    6c00:	ldr	x3, [sp, #184]
    6c04:	mov	x2, x0
    6c08:	mov	x1, x23
    6c0c:	mov	x0, x22
    6c10:	bl	3300 <lzma_index_append@plt>
    6c14:	mov	w19, w0
    6c18:	cbz	w0, 6b9c <lzma_stream_buffer_encode@@XZ_5.0+0x150>
    6c1c:	b	6bc0 <lzma_stream_buffer_encode@@XZ_5.0+0x174>
    6c20:	mov	w19, #0x3                   	// #3
    6c24:	b	6a78 <lzma_stream_buffer_encode@@XZ_5.0+0x2c>
    6c28:	mov	w19, #0xa                   	// #10
    6c2c:	b	6a78 <lzma_stream_buffer_encode@@XZ_5.0+0x2c>
    6c30:	stp	x29, x30, [sp, #-48]!
    6c34:	mov	x29, sp
    6c38:	stp	x19, x20, [sp, #16]
    6c3c:	mov	x19, x0
    6c40:	mov	x20, x1
    6c44:	add	x0, x0, #0x8
    6c48:	str	x21, [sp, #32]
    6c4c:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    6c50:	add	x21, x19, #0x120
    6c54:	mov	x1, x20
    6c58:	add	x0, x19, #0x170
    6c5c:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    6c60:	ldr	x0, [x19, #440]
    6c64:	mov	x1, x20
    6c68:	bl	33e0 <lzma_index_end@plt>
    6c6c:	ldr	x0, [x21], #16
    6c70:	mov	x1, x20
    6c74:	cmn	x0, #0x1
    6c78:	b.ne	6c90 <lzma_stream_buffer_encode@@XZ_5.0+0x244>  // b.any
    6c7c:	mov	x0, x19
    6c80:	ldp	x19, x20, [sp, #16]
    6c84:	ldr	x21, [sp, #32]
    6c88:	ldp	x29, x30, [sp], #48
    6c8c:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    6c90:	ldur	x0, [x21, #-8]
    6c94:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    6c98:	b	6c6c <lzma_stream_buffer_encode@@XZ_5.0+0x220>
    6c9c:	sub	sp, sp, #0xd0
    6ca0:	stp	x29, x30, [sp, #16]
    6ca4:	add	x29, sp, #0x10
    6ca8:	stp	x25, x26, [sp, #80]
    6cac:	mov	x26, x0
    6cb0:	ldr	w25, [sp, #208]
    6cb4:	adrp	x0, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    6cb8:	add	x0, x0, #0x758
    6cbc:	stp	x19, x20, [sp, #32]
    6cc0:	mov	x19, x1
    6cc4:	mov	x20, x7
    6cc8:	stp	x21, x22, [sp, #48]
    6ccc:	mov	x22, x5
    6cd0:	mov	x21, x6
    6cd4:	stp	x23, x24, [sp, #64]
    6cd8:	mov	x23, x3
    6cdc:	mov	x24, x4
    6ce0:	stp	x27, x28, [sp, #96]
    6ce4:	adrp	x27, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    6ce8:	add	x27, x27, #0x760
    6cec:	stp	x2, x0, [sp, #120]
    6cf0:	add	x0, sp, #0x98
    6cf4:	str	x0, [sp, #136]
    6cf8:	ldr	x0, [x21]
    6cfc:	cmp	x0, x20
    6d00:	b.cs	6d4c <lzma_stream_buffer_encode@@XZ_5.0+0x300>  // b.hs, b.nlast
    6d04:	ldr	w0, [x26]
    6d08:	cmp	w0, #0x5
    6d0c:	b.hi	6de8 <lzma_stream_buffer_encode@@XZ_5.0+0x39c>  // b.pmore
    6d10:	ldr	x1, [sp, #128]
    6d14:	ldrb	w0, [x1, w0, uxtw]
    6d18:	adr	x1, 6d24 <lzma_stream_buffer_encode@@XZ_5.0+0x2d8>
    6d1c:	add	x0, x1, w0, sxtb #2
    6d20:	br	x0
    6d24:	ldr	x2, [x26, #456]
    6d28:	add	x1, x26, #0x1c0
    6d2c:	mov	x5, x20
    6d30:	mov	x4, x21
    6d34:	mov	x3, x22
    6d38:	add	x0, x26, #0x1d0
    6d3c:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    6d40:	ldp	x1, x0, [x26, #448]
    6d44:	cmp	x1, x0
    6d48:	b.cs	6d70 <lzma_stream_buffer_encode@@XZ_5.0+0x324>  // b.hs, b.nlast
    6d4c:	mov	w0, #0x0                   	// #0
    6d50:	ldp	x29, x30, [sp, #16]
    6d54:	ldp	x19, x20, [sp, #32]
    6d58:	ldp	x21, x22, [sp, #48]
    6d5c:	ldp	x23, x24, [sp, #64]
    6d60:	ldp	x25, x26, [sp, #80]
    6d64:	ldp	x27, x28, [sp, #96]
    6d68:	add	sp, sp, #0xd0
    6d6c:	ret
    6d70:	ldr	w0, [x26]
    6d74:	cmp	w0, #0x5
    6d78:	b.eq	6f08 <lzma_stream_buffer_encode@@XZ_5.0+0x4bc>  // b.none
    6d7c:	add	w0, w0, #0x1
    6d80:	str	xzr, [x26, #448]
    6d84:	str	w0, [x26]
    6d88:	b	6cf8 <lzma_stream_buffer_encode@@XZ_5.0+0x2ac>
    6d8c:	ldr	x0, [x23]
    6d90:	cmp	x0, x24
    6d94:	b.ne	6dc8 <lzma_stream_buffer_encode@@XZ_5.0+0x37c>  // b.any
    6d98:	cmp	w25, #0x3
    6d9c:	b.eq	6dac <lzma_stream_buffer_encode@@XZ_5.0+0x360>  // b.none
    6da0:	cmp	w25, #0x0
    6da4:	cset	w0, ne  // ne = any
    6da8:	b	6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>
    6dac:	ldr	x2, [x26, #440]
    6db0:	mov	x1, x19
    6db4:	add	x0, x26, #0x170
    6db8:	bl	6824 <lzma_filter_flags_encode@@XZ_5.0+0x2b4>
    6dbc:	cbnz	w0, 6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>
    6dc0:	mov	w0, #0x4                   	// #4
    6dc4:	b	6d84 <lzma_stream_buffer_encode@@XZ_5.0+0x338>
    6dc8:	ldrb	w0, [x26, #4]
    6dcc:	add	x28, x26, #0x50
    6dd0:	cbz	w0, 6df0 <lzma_stream_buffer_encode@@XZ_5.0+0x3a4>
    6dd4:	strb	wzr, [x26, #4]
    6dd8:	add	x1, x26, #0x1d0
    6ddc:	mov	x0, x28
    6de0:	bl	3540 <lzma_block_header_encode@plt>
    6de4:	cbz	w0, 6e1c <lzma_stream_buffer_encode@@XZ_5.0+0x3d0>
    6de8:	mov	w0, #0xb                   	// #11
    6dec:	b	6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>
    6df0:	mov	x0, #0xffffffffffffffff    	// #-1
    6df4:	stp	x0, x0, [x26, #96]
    6df8:	mov	x0, x28
    6dfc:	bl	3160 <lzma_block_header_size@plt>
    6e00:	cbnz	w0, 6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>
    6e04:	mov	x2, x28
    6e08:	mov	x1, x19
    6e0c:	add	x0, x26, #0x8
    6e10:	bl	5c24 <lzma_block_uncomp_encode@@XZ_5.2+0x240>
    6e14:	cbz	w0, 6dd4 <lzma_stream_buffer_encode@@XZ_5.0+0x388>
    6e18:	b	6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>
    6e1c:	ldr	w0, [x26, #84]
    6e20:	str	x0, [x26, #456]
    6e24:	mov	w0, #0x2                   	// #2
    6e28:	b	6d84 <lzma_stream_buffer_encode@@XZ_5.0+0x338>
    6e2c:	ldr	w0, [x27, w25, uxtw #2]
    6e30:	mov	x7, x20
    6e34:	ldr	x9, [x26, #32]
    6e38:	str	w0, [sp]
    6e3c:	ldr	x2, [sp, #120]
    6e40:	mov	x6, x21
    6e44:	ldr	x0, [x26, #8]
    6e48:	mov	x5, x22
    6e4c:	mov	x4, x24
    6e50:	mov	x3, x23
    6e54:	mov	x1, x19
    6e58:	blr	x9
    6e5c:	cmp	w0, #0x1
    6e60:	ccmp	w25, #0x1, #0x4, eq  // eq = none
    6e64:	b.eq	6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>  // b.none
    6e68:	add	x0, x26, #0x50
    6e6c:	bl	3190 <lzma_block_unpadded_size@plt>
    6e70:	mov	x2, x0
    6e74:	mov	x1, x19
    6e78:	ldr	x3, [x26, #104]
    6e7c:	ldr	x0, [x26, #440]
    6e80:	bl	3300 <lzma_index_append@plt>
    6e84:	cbnz	w0, 6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>
    6e88:	mov	w0, #0x1                   	// #1
    6e8c:	b	6d84 <lzma_stream_buffer_encode@@XZ_5.0+0x338>
    6e90:	ldr	x0, [x26, #368]
    6e94:	mov	x7, x20
    6e98:	ldr	x9, [x26, #392]
    6e9c:	str	wzr, [sp]
    6ea0:	mov	x6, x21
    6ea4:	mov	x5, x22
    6ea8:	mov	x1, x19
    6eac:	mov	x4, #0x0                   	// #0
    6eb0:	mov	x3, #0x0                   	// #0
    6eb4:	mov	x2, #0x0                   	// #0
    6eb8:	blr	x9
    6ebc:	cmp	w0, #0x1
    6ec0:	b.ne	6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>  // b.any
    6ec4:	ldr	x0, [x26, #440]
    6ec8:	stp	xzr, xzr, [sp, #152]
    6ecc:	stp	xzr, xzr, [sp, #168]
    6ed0:	stp	xzr, xzr, [sp, #184]
    6ed4:	str	xzr, [sp, #200]
    6ed8:	bl	3510 <lzma_index_size@plt>
    6edc:	str	x0, [sp, #160]
    6ee0:	add	x1, x26, #0x1d0
    6ee4:	ldr	w0, [x26, #88]
    6ee8:	str	w0, [sp, #168]
    6eec:	ldr	x0, [sp, #136]
    6ef0:	bl	3210 <lzma_stream_footer_encode@plt>
    6ef4:	cbnz	w0, 6de8 <lzma_stream_buffer_encode@@XZ_5.0+0x39c>
    6ef8:	mov	x0, #0xc                   	// #12
    6efc:	str	x0, [x26, #456]
    6f00:	mov	w0, #0x5                   	// #5
    6f04:	b	6d84 <lzma_stream_buffer_encode@@XZ_5.0+0x338>
    6f08:	mov	w0, #0x1                   	// #1
    6f0c:	b	6d50 <lzma_stream_buffer_encode@@XZ_5.0+0x304>
    6f10:	stp	x29, x30, [sp, #-48]!
    6f14:	mov	x29, sp
    6f18:	stp	x19, x20, [sp, #16]
    6f1c:	mov	x19, x0
    6f20:	ldr	w0, [x0]
    6f24:	stp	x21, x22, [sp, #32]
    6f28:	mov	x20, x1
    6f2c:	mov	x21, x2
    6f30:	cmp	w0, #0x1
    6f34:	b.hi	6fbc <lzma_stream_buffer_encode@@XZ_5.0+0x570>  // b.pmore
    6f38:	mov	x0, #0xffffffffffffffff    	// #-1
    6f3c:	strb	wzr, [x19, #4]
    6f40:	stp	x0, x0, [x19, #96]
    6f44:	add	x22, x19, #0x50
    6f48:	mov	x0, x22
    6f4c:	str	x2, [x19, #112]
    6f50:	bl	3160 <lzma_block_header_size@plt>
    6f54:	cbnz	w0, 6f68 <lzma_stream_buffer_encode@@XZ_5.0+0x51c>
    6f58:	mov	x2, x22
    6f5c:	mov	x1, x20
    6f60:	add	x0, x19, #0x8
    6f64:	bl	5c24 <lzma_block_uncomp_encode@@XZ_5.2+0x240>
    6f68:	add	x1, x19, #0x120
    6f6c:	str	x1, [x19, #112]
    6f70:	cbnz	w0, 6fd4 <lzma_stream_buffer_encode@@XZ_5.0+0x588>
    6f74:	mov	w0, #0x1                   	// #1
    6f78:	strb	w0, [x19, #4]
    6f7c:	add	x19, x19, #0x120
    6f80:	mov	x22, x19
    6f84:	ldr	x0, [x19], #16
    6f88:	cmn	x0, #0x1
    6f8c:	b.ne	6fac <lzma_stream_buffer_encode@@XZ_5.0+0x560>  // b.any
    6f90:	mov	x2, x20
    6f94:	mov	x1, x22
    6f98:	mov	x0, x21
    6f9c:	ldp	x19, x20, [sp, #16]
    6fa0:	ldp	x21, x22, [sp, #32]
    6fa4:	ldp	x29, x30, [sp], #48
    6fa8:	b	3240 <lzma_filters_copy@plt>
    6fac:	ldur	x0, [x19, #-8]
    6fb0:	mov	x1, x20
    6fb4:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    6fb8:	b	6f84 <lzma_stream_buffer_encode@@XZ_5.0+0x538>
    6fbc:	cmp	w0, #0x3
    6fc0:	b.hi	6fe4 <lzma_stream_buffer_encode@@XZ_5.0+0x598>  // b.pmore
    6fc4:	ldr	x0, [x19, #8]
    6fc8:	ldr	x4, [x19, #72]
    6fcc:	blr	x4
    6fd0:	cbz	w0, 6f7c <lzma_stream_buffer_encode@@XZ_5.0+0x530>
    6fd4:	ldp	x19, x20, [sp, #16]
    6fd8:	ldp	x21, x22, [sp, #32]
    6fdc:	ldp	x29, x30, [sp], #48
    6fe0:	ret
    6fe4:	mov	w0, #0xb                   	// #11
    6fe8:	b	6fd4 <lzma_stream_buffer_encode@@XZ_5.0+0x588>
    6fec:	stp	x29, x30, [sp, #-128]!
    6ff0:	mov	x29, sp
    6ff4:	stp	x21, x22, [sp, #32]
    6ff8:	mov	x22, x2
    6ffc:	mov	x21, x1
    7000:	ldr	x2, [x0, #16]
    7004:	stp	x19, x20, [sp, #16]
    7008:	adrp	x19, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    700c:	str	x23, [sp, #48]
    7010:	add	x19, x19, #0xfec
    7014:	mov	x20, x0
    7018:	cmp	x2, x19
    701c:	mov	w23, w3
    7020:	b.eq	7028 <lzma_stream_buffer_encode@@XZ_5.0+0x5dc>  // b.none
    7024:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    7028:	str	x19, [x20, #16]
    702c:	cbz	x22, 7130 <lzma_stream_buffer_encode@@XZ_5.0+0x6e4>
    7030:	ldr	x19, [x20]
    7034:	cbnz	x19, 70c4 <lzma_stream_buffer_encode@@XZ_5.0+0x678>
    7038:	mov	x1, x21
    703c:	mov	x0, #0x5d0                 	// #1488
    7040:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    7044:	mov	x19, x0
    7048:	cbnz	x0, 7064 <lzma_stream_buffer_encode@@XZ_5.0+0x618>
    704c:	mov	w0, #0x5                   	// #5
    7050:	ldp	x19, x20, [sp, #16]
    7054:	ldp	x21, x22, [sp, #32]
    7058:	ldr	x23, [sp, #48]
    705c:	ldp	x29, x30, [sp], #128
    7060:	ret
    7064:	adrp	x0, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    7068:	add	x0, x0, #0xc9c
    706c:	str	x0, [x20, #24]
    7070:	adrp	x0, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    7074:	add	x0, x0, #0xc30
    7078:	str	x0, [x20, #32]
    707c:	adrp	x0, 6000 <lzma_block_header_encode@@XZ_5.0+0x16c>
    7080:	add	x0, x0, #0xf10
    7084:	str	x19, [x20]
    7088:	str	xzr, [x19, #8]
    708c:	stp	xzr, xzr, [x19, #24]
    7090:	stp	xzr, xzr, [x19, #40]
    7094:	stp	xzr, xzr, [x19, #56]
    7098:	str	x0, [x20, #64]
    709c:	mov	x0, #0xffffffffffffffff    	// #-1
    70a0:	str	x0, [x19, #16]
    70a4:	str	xzr, [x19, #72]
    70a8:	str	x0, [x19, #288]
    70ac:	str	xzr, [x19, #368]
    70b0:	str	x0, [x19, #376]
    70b4:	stp	xzr, xzr, [x19, #384]
    70b8:	stp	xzr, xzr, [x19, #400]
    70bc:	stp	xzr, xzr, [x19, #416]
    70c0:	stp	xzr, xzr, [x19, #432]
    70c4:	mov	x1, x21
    70c8:	ldr	x0, [x19, #440]
    70cc:	str	wzr, [x19]
    70d0:	str	wzr, [x19, #80]
    70d4:	str	w23, [x19, #88]
    70d8:	bl	33e0 <lzma_index_end@plt>
    70dc:	mov	x0, x21
    70e0:	bl	33b0 <lzma_index_init@plt>
    70e4:	str	x0, [x19, #440]
    70e8:	cbz	x0, 704c <lzma_stream_buffer_encode@@XZ_5.0+0x600>
    70ec:	stp	xzr, xzr, [sp, #88]
    70f0:	add	x1, x19, #0x1d0
    70f4:	add	x0, sp, #0x48
    70f8:	stp	xzr, xzr, [sp, #72]
    70fc:	str	w23, [sp, #88]
    7100:	stp	xzr, xzr, [sp, #104]
    7104:	str	xzr, [sp, #120]
    7108:	bl	3390 <lzma_stream_header_encode@plt>
    710c:	cbnz	w0, 7050 <lzma_stream_buffer_encode@@XZ_5.0+0x604>
    7110:	mov	x0, #0xc                   	// #12
    7114:	stp	xzr, x0, [x19, #448]
    7118:	mov	x2, x22
    711c:	mov	x1, x21
    7120:	mov	x0, x19
    7124:	mov	x3, #0x0                   	// #0
    7128:	bl	6f10 <lzma_stream_buffer_encode@@XZ_5.0+0x4c4>
    712c:	b	7050 <lzma_stream_buffer_encode@@XZ_5.0+0x604>
    7130:	mov	w0, #0xb                   	// #11
    7134:	b	7050 <lzma_stream_buffer_encode@@XZ_5.0+0x604>

0000000000007138 <lzma_stream_encoder@@XZ_5.0>:
    7138:	stp	x29, x30, [sp, #-48]!
    713c:	mov	x29, sp
    7140:	stp	x19, x20, [sp, #16]
    7144:	mov	x20, x0
    7148:	stp	x21, x22, [sp, #32]
    714c:	mov	x21, x1
    7150:	mov	w22, w2
    7154:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    7158:	mov	w19, w0
    715c:	cbnz	w0, 7180 <lzma_stream_encoder@@XZ_5.0+0x48>
    7160:	ldp	x1, x0, [x20, #48]
    7164:	mov	w3, w22
    7168:	mov	x2, x21
    716c:	bl	6fec <lzma_stream_buffer_encode@@XZ_5.0+0x5a0>
    7170:	mov	w19, w0
    7174:	cbz	w0, 7194 <lzma_stream_encoder@@XZ_5.0+0x5c>
    7178:	mov	x0, x20
    717c:	bl	3320 <lzma_end@plt>
    7180:	mov	w0, w19
    7184:	ldp	x19, x20, [sp, #16]
    7188:	ldp	x21, x22, [sp, #32]
    718c:	ldp	x29, x30, [sp], #48
    7190:	ret
    7194:	ldr	x0, [x20, #56]
    7198:	mov	w1, #0x1010101             	// #16843009
    719c:	str	w1, [x0, #88]
    71a0:	mov	w1, #0x1                   	// #1
    71a4:	strb	w1, [x0, #92]
    71a8:	b	7180 <lzma_stream_encoder@@XZ_5.0+0x48>

00000000000071ac <lzma_stream_header_encode@@XZ_5.0>:
    71ac:	stp	x29, x30, [sp, #-32]!
    71b0:	mov	x29, sp
    71b4:	stp	x19, x20, [sp, #16]
    71b8:	ldr	w20, [x0]
    71bc:	cbnz	w20, 7218 <lzma_stream_header_encode@@XZ_5.0+0x6c>
    71c0:	mov	x19, x1
    71c4:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    71c8:	ldr	x1, [x1, #3936]
    71cc:	ldr	w2, [x1]
    71d0:	ldrh	w1, [x1, #4]
    71d4:	str	w2, [x19]
    71d8:	strh	w1, [x19, #4]
    71dc:	ldr	w1, [x0, #16]
    71e0:	cmp	w1, #0xf
    71e4:	b.hi	7220 <lzma_stream_header_encode@@XZ_5.0+0x74>  // b.pmore
    71e8:	strb	wzr, [x19, #6]
    71ec:	mov	w2, #0x0                   	// #0
    71f0:	mov	x1, #0x2                   	// #2
    71f4:	ldr	w0, [x0, #16]
    71f8:	strb	w0, [x19, #7]
    71fc:	add	x0, x19, #0x6
    7200:	bl	31c0 <lzma_crc32@plt>
    7204:	str	w0, [x19, #8]
    7208:	mov	w0, w20
    720c:	ldp	x19, x20, [sp, #16]
    7210:	ldp	x29, x30, [sp], #32
    7214:	ret
    7218:	mov	w20, #0x8                   	// #8
    721c:	b	7208 <lzma_stream_header_encode@@XZ_5.0+0x5c>
    7220:	mov	w20, #0xb                   	// #11
    7224:	b	7208 <lzma_stream_header_encode@@XZ_5.0+0x5c>

0000000000007228 <lzma_stream_footer_encode@@XZ_5.0>:
    7228:	stp	x29, x30, [sp, #-32]!
    722c:	mov	x29, sp
    7230:	stp	x19, x20, [sp, #16]
    7234:	ldr	w20, [x0]
    7238:	cbnz	w20, 72bc <lzma_stream_footer_encode@@XZ_5.0+0x94>
    723c:	mov	x19, x1
    7240:	mov	x2, #0x3fffffffc           	// #17179869180
    7244:	ldr	x1, [x0, #8]
    7248:	sub	x3, x1, #0x4
    724c:	cmp	x3, x2
    7250:	b.ls	7268 <lzma_stream_footer_encode@@XZ_5.0+0x40>  // b.plast
    7254:	mov	w20, #0xb                   	// #11
    7258:	mov	w0, w20
    725c:	ldp	x19, x20, [sp, #16]
    7260:	ldp	x29, x30, [sp], #32
    7264:	ret
    7268:	tst	x1, #0x3
    726c:	b.ne	7254 <lzma_stream_footer_encode@@XZ_5.0+0x2c>  // b.any
    7270:	lsr	x1, x1, #2
    7274:	sub	w1, w1, #0x1
    7278:	str	w1, [x19, #4]
    727c:	ldr	w1, [x0, #16]
    7280:	cmp	w1, #0xf
    7284:	b.hi	7254 <lzma_stream_footer_encode@@XZ_5.0+0x2c>  // b.pmore
    7288:	strb	wzr, [x19, #8]
    728c:	mov	w2, #0x0                   	// #0
    7290:	mov	x1, #0x6                   	// #6
    7294:	ldr	w0, [x0, #16]
    7298:	strb	w0, [x19, #9]
    729c:	add	x0, x19, #0x4
    72a0:	bl	31c0 <lzma_crc32@plt>
    72a4:	str	w0, [x19]
    72a8:	adrp	x0, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    72ac:	ldr	x0, [x0, #3976]
    72b0:	ldrh	w0, [x0]
    72b4:	strh	w0, [x19, #10]
    72b8:	b	7258 <lzma_stream_footer_encode@@XZ_5.0+0x30>
    72bc:	mov	w20, #0x8                   	// #8
    72c0:	b	7258 <lzma_stream_footer_encode@@XZ_5.0+0x30>

00000000000072c4 <lzma_vli_encode@@XZ_5.0>:
    72c4:	sub	sp, sp, #0x10
    72c8:	ldr	x5, [x3]
    72cc:	str	xzr, [sp, #8]
    72d0:	cmp	x4, x5
    72d4:	cbnz	x1, 7338 <lzma_vli_encode@@XZ_5.0+0x74>
    72d8:	b.ls	736c <lzma_vli_encode@@XZ_5.0+0xa8>  // b.plast
    72dc:	add	x1, sp, #0x8
    72e0:	ldr	x5, [x1]
    72e4:	cmp	x5, #0x8
    72e8:	b.hi	736c <lzma_vli_encode@@XZ_5.0+0xa8>  // b.pmore
    72ec:	tbnz	x0, #63, 736c <lzma_vli_encode@@XZ_5.0+0xa8>
    72f0:	mov	w6, #0x7                   	// #7
    72f4:	mul	w5, w5, w6
    72f8:	lsr	x0, x0, x5
    72fc:	ldr	x8, [x3]
    7300:	and	w6, w0, #0xff
    7304:	ldr	x5, [x1]
    7308:	cmp	x0, #0x7f
    730c:	add	x9, x2, x8
    7310:	add	x7, x8, #0x1
    7314:	add	x5, x5, #0x1
    7318:	b.hi	7344 <lzma_vli_encode@@XZ_5.0+0x80>  // b.pmore
    731c:	add	x0, sp, #0x8
    7320:	strb	w6, [x9]
    7324:	cmp	x1, x0
    7328:	str	x5, [x1]
    732c:	cset	w0, ne  // ne = any
    7330:	str	x7, [x3]
    7334:	b	7370 <lzma_vli_encode@@XZ_5.0+0xac>
    7338:	b.hi	72e0 <lzma_vli_encode@@XZ_5.0+0x1c>  // b.pmore
    733c:	mov	w0, #0xa                   	// #10
    7340:	b	7370 <lzma_vli_encode@@XZ_5.0+0xac>
    7344:	orr	w6, w6, #0xffffff80
    7348:	str	x5, [x1]
    734c:	strb	w6, [x2, x8]
    7350:	lsr	x0, x0, #7
    7354:	str	x7, [x3]
    7358:	cmp	x7, x4
    735c:	b.ne	72fc <lzma_vli_encode@@XZ_5.0+0x38>  // b.any
    7360:	add	x0, sp, #0x8
    7364:	cmp	x1, x0
    7368:	b.ne	7378 <lzma_vli_encode@@XZ_5.0+0xb4>  // b.any
    736c:	mov	w0, #0xb                   	// #11
    7370:	add	sp, sp, #0x10
    7374:	ret
    7378:	mov	w0, #0x0                   	// #0
    737c:	b	7370 <lzma_vli_encode@@XZ_5.0+0xac>
    7380:	add	x2, x0, #0x28
    7384:	cmp	w1, #0x4, lsl #12
    7388:	lsl	w1, w1, #1
    738c:	mul	x1, x1, x2
    7390:	mov	x2, #0xffffffffffff        	// #281474976710655
    7394:	ccmp	x0, x2, #0x2, ls  // ls = plast
    7398:	add	x1, x1, #0x30
    739c:	csinv	x0, x1, xzr, ls  // ls = plast
    73a0:	ret
    73a4:	stp	x29, x30, [sp, #-32]!
    73a8:	mov	x29, sp
    73ac:	stp	x19, x20, [sp, #16]
    73b0:	mov	x19, x0
    73b4:	mov	x20, x1
    73b8:	ldr	x0, [x0]
    73bc:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    73c0:	str	xzr, [x19]
    73c4:	ldr	x0, [x19, #8]
    73c8:	mov	x1, x20
    73cc:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    73d0:	str	xzr, [x19, #8]
    73d4:	ldp	x19, x20, [sp, #16]
    73d8:	ldp	x29, x30, [sp], #32
    73dc:	ret
    73e0:	stp	x29, x30, [sp, #-48]!
    73e4:	cmp	w3, #0x4, lsl #12
    73e8:	mov	x29, sp
    73ec:	stp	x19, x20, [sp, #16]
    73f0:	mov	x19, x0
    73f4:	mov	x0, #0xffffffffffff        	// #281474976710655
    73f8:	stp	x21, x22, [sp, #32]
    73fc:	ccmp	x2, x0, #0x2, ls  // ls = plast
    7400:	b.hi	74a0 <lzma_vli_encode@@XZ_5.0+0x1dc>  // b.pmore
    7404:	ldr	x0, [x19, #16]
    7408:	mov	x22, x1
    740c:	mov	x21, x2
    7410:	lsl	w20, w3, #1
    7414:	cmp	x0, x2
    7418:	b.ne	7428 <lzma_vli_encode@@XZ_5.0+0x164>  // b.any
    741c:	ldr	w0, [x19, #24]
    7420:	cmp	w0, w20
    7424:	b.eq	7488 <lzma_vli_encode@@XZ_5.0+0x1c4>  // b.none
    7428:	mov	x1, x22
    742c:	mov	x0, x19
    7430:	bl	73a4 <lzma_vli_encode@@XZ_5.0+0xe0>
    7434:	mov	w0, #0x28                  	// #40
    7438:	mov	x1, x22
    743c:	umull	x0, w20, w0
    7440:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    7444:	str	x0, [x19]
    7448:	mov	w0, w20
    744c:	mov	x1, x22
    7450:	mul	x0, x0, x21
    7454:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    7458:	str	x0, [x19, #8]
    745c:	ldr	x1, [x19]
    7460:	cbz	x1, 7468 <lzma_vli_encode@@XZ_5.0+0x1a4>
    7464:	cbnz	x0, 7488 <lzma_vli_encode@@XZ_5.0+0x1c4>
    7468:	mov	x0, x19
    746c:	mov	x1, x22
    7470:	bl	73a4 <lzma_vli_encode@@XZ_5.0+0xe0>
    7474:	mov	w0, #0x5                   	// #5
    7478:	ldp	x19, x20, [sp, #16]
    747c:	ldp	x21, x22, [sp, #32]
    7480:	ldp	x29, x30, [sp], #48
    7484:	ret
    7488:	mov	w0, #0x0                   	// #0
    748c:	str	x21, [x19, #16]
    7490:	str	w20, [x19, #24]
    7494:	stur	xzr, [x19, #28]
    7498:	str	xzr, [x19, #40]
    749c:	b	7478 <lzma_vli_encode@@XZ_5.0+0x1b4>
    74a0:	mov	w0, #0x8                   	// #8
    74a4:	b	7478 <lzma_vli_encode@@XZ_5.0+0x1b4>
    74a8:	ldr	w2, [x0, #28]
    74ac:	mov	w3, #0x28                  	// #40
    74b0:	ldp	x5, x6, [x0]
    74b4:	mov	w4, w2
    74b8:	ldr	x7, [x0, #16]
    74bc:	umull	x3, w2, w3
    74c0:	mov	x1, x0
    74c4:	add	w2, w2, #0x1
    74c8:	madd	x4, x4, x7, x6
    74cc:	add	x0, x5, x3
    74d0:	str	x4, [x5, x3]
    74d4:	ldr	w3, [x1, #24]
    74d8:	str	xzr, [x0, #8]
    74dc:	cmp	w2, w3
    74e0:	strb	wzr, [x0, #32]
    74e4:	csel	w2, w2, wzr, ne  // ne = any
    74e8:	str	w2, [x1, #28]
    74ec:	ldr	w2, [x1, #32]
    74f0:	add	w2, w2, #0x1
    74f4:	str	w2, [x1, #32]
    74f8:	ret
    74fc:	ldp	w3, w2, [x0, #28]
    7500:	subs	w1, w3, w2
    7504:	b.cs	7510 <lzma_vli_encode@@XZ_5.0+0x24c>  // b.hs, b.nlast
    7508:	ldr	w2, [x0, #24]
    750c:	add	w1, w1, w2
    7510:	ldr	x0, [x0]
    7514:	mov	w2, #0x28                  	// #40
    7518:	umaddl	x1, w1, w2, x0
    751c:	ldrb	w0, [x1, #32]
    7520:	ret
    7524:	stp	x29, x30, [sp, #-48]!
    7528:	mov	x29, sp
    752c:	stp	x21, x22, [sp, #32]
    7530:	mov	x22, x4
    7534:	ldr	w4, [x0, #32]
    7538:	stp	x19, x20, [sp, #16]
    753c:	cbnz	w4, 7554 <lzma_vli_encode@@XZ_5.0+0x290>
    7540:	mov	w0, #0x0                   	// #0
    7544:	ldp	x19, x20, [sp, #16]
    7548:	ldp	x21, x22, [sp, #32]
    754c:	ldp	x29, x30, [sp], #48
    7550:	ret
    7554:	mov	x21, x5
    7558:	ldr	w5, [x0, #28]
    755c:	mov	x19, x0
    7560:	cmp	w4, w5
    7564:	sub	w0, w5, w4
    7568:	b.ls	7574 <lzma_vli_encode@@XZ_5.0+0x2b0>  // b.plast
    756c:	ldr	w4, [x19, #24]
    7570:	add	w0, w0, w4
    7574:	mov	w4, #0x28                  	// #40
    7578:	ldr	x6, [x19]
    757c:	umull	x0, w0, w4
    7580:	add	x20, x6, x0
    7584:	ldrb	w4, [x20, #32]
    7588:	cbz	w4, 7540 <lzma_vli_encode@@XZ_5.0+0x27c>
    758c:	mov	x4, x2
    7590:	mov	x5, x3
    7594:	ldr	x0, [x6, x0]
    7598:	mov	x3, x1
    759c:	ldr	x2, [x20, #8]
    75a0:	add	x1, x19, #0x28
    75a4:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    75a8:	ldr	x0, [x20, #8]
    75ac:	ldr	x1, [x19, #40]
    75b0:	cmp	x1, x0
    75b4:	b.cc	7540 <lzma_vli_encode@@XZ_5.0+0x27c>  // b.lo, b.ul, b.last
    75b8:	ldr	x0, [x20, #16]
    75bc:	str	x0, [x22]
    75c0:	ldr	x0, [x20, #24]
    75c4:	str	x0, [x21]
    75c8:	ldr	w0, [x19, #32]
    75cc:	str	xzr, [x19, #40]
    75d0:	sub	w0, w0, #0x1
    75d4:	str	w0, [x19, #32]
    75d8:	mov	w0, #0x1                   	// #1
    75dc:	b	7544 <lzma_vli_encode@@XZ_5.0+0x280>
    75e0:	stp	x29, x30, [sp, #-80]!
    75e4:	mov	x29, sp
    75e8:	stp	x19, x20, [sp, #16]
    75ec:	mov	x19, x0
    75f0:	mov	x20, x1
    75f4:	stp	x23, x24, [sp, #48]
    75f8:	add	x23, x0, #0x168
    75fc:	mov	x0, x23
    7600:	stp	x21, x22, [sp, #32]
    7604:	mov	x21, x2
    7608:	mov	x22, #0x0                   	// #0
    760c:	str	x25, [sp, #64]
    7610:	bl	3530 <pthread_mutex_lock@plt>
    7614:	ldr	x0, [x19, #344]
    7618:	str	x0, [x20]
    761c:	mov	x25, #0x1d0                 	// #464
    7620:	ldr	x0, [x19, #352]
    7624:	str	x0, [x21]
    7628:	ldr	w0, [x19, #324]
    762c:	cmp	x0, x22
    7630:	b.hi	7650 <lzma_vli_encode@@XZ_5.0+0x38c>  // b.pmore
    7634:	mov	x0, x23
    7638:	ldp	x19, x20, [sp, #16]
    763c:	ldp	x21, x22, [sp, #32]
    7640:	ldp	x23, x24, [sp, #48]
    7644:	ldr	x25, [sp, #64]
    7648:	ldp	x29, x30, [sp], #80
    764c:	b	3550 <pthread_mutex_unlock@plt>
    7650:	ldr	x0, [x19, #312]
    7654:	mul	x24, x22, x25
    7658:	add	x22, x22, #0x1
    765c:	add	x0, x0, x24
    7660:	add	x0, x0, #0x160
    7664:	bl	3530 <pthread_mutex_lock@plt>
    7668:	ldr	x0, [x19, #312]
    766c:	ldr	x1, [x20]
    7670:	add	x0, x0, x24
    7674:	ldr	x2, [x0, #48]
    7678:	add	x1, x1, x2
    767c:	str	x1, [x20]
    7680:	ldr	x1, [x21]
    7684:	ldr	x2, [x0, #56]
    7688:	add	x0, x0, #0x160
    768c:	add	x1, x1, x2
    7690:	str	x1, [x21]
    7694:	bl	3550 <pthread_mutex_unlock@plt>
    7698:	b	7628 <lzma_vli_encode@@XZ_5.0+0x364>
    769c:	stp	x29, x30, [sp, #-80]!
    76a0:	mov	x29, sp
    76a4:	add	x1, sp, #0x40
    76a8:	stp	x19, x20, [sp, #16]
    76ac:	mov	x20, x0
    76b0:	mov	w0, #0x1                   	// #1
    76b4:	str	x21, [sp, #32]
    76b8:	bl	3150 <clock_gettime@plt>
    76bc:	cbnz	w0, 771c <lzma_vli_encode@@XZ_5.0+0x458>
    76c0:	add	x21, sp, #0x38
    76c4:	mov	x0, x21
    76c8:	bl	33d0 <pthread_condattr_init@plt>
    76cc:	cbnz	w0, 771c <lzma_vli_encode@@XZ_5.0+0x458>
    76d0:	mov	x0, x21
    76d4:	mov	w1, #0x1                   	// #1
    76d8:	bl	3490 <pthread_condattr_setclock@plt>
    76dc:	mov	w19, w0
    76e0:	cbnz	w0, 76f4 <lzma_vli_encode@@XZ_5.0+0x430>
    76e4:	mov	x1, x21
    76e8:	mov	x0, x20
    76ec:	bl	3420 <pthread_cond_init@plt>
    76f0:	mov	w19, w0
    76f4:	mov	x0, x21
    76f8:	bl	31e0 <pthread_condattr_destroy@plt>
    76fc:	cbnz	w19, 771c <lzma_vli_encode@@XZ_5.0+0x458>
    7700:	mov	w0, #0x1                   	// #1
    7704:	str	w0, [x20, #48]
    7708:	mov	w0, w19
    770c:	ldp	x19, x20, [sp, #16]
    7710:	ldr	x21, [sp, #32]
    7714:	ldp	x29, x30, [sp], #80
    7718:	ret
    771c:	str	wzr, [x20, #48]
    7720:	mov	x0, x20
    7724:	mov	x1, #0x0                   	// #0
    7728:	bl	3420 <pthread_cond_init@plt>
    772c:	mov	w19, w0
    7730:	b	7708 <lzma_vli_encode@@XZ_5.0+0x444>
    7734:	stp	x29, x30, [sp, #-64]!
    7738:	mov	x29, sp
    773c:	stp	x19, x20, [sp, #16]
    7740:	mov	x19, x0
    7744:	mov	w20, #0x0                   	// #0
    7748:	stp	x21, x22, [sp, #32]
    774c:	mov	x22, x1
    7750:	stp	x23, x24, [sp, #48]
    7754:	mov	w24, #0x1d0                 	// #464
    7758:	mov	w23, #0x4                   	// #4
    775c:	ldr	w0, [x19, #324]
    7760:	cmp	w0, w20
    7764:	b.hi	7798 <lzma_vli_encode@@XZ_5.0+0x4d4>  // b.pmore
    7768:	mov	w20, #0x0                   	// #0
    776c:	mov	w21, #0x1d0                 	// #464
    7770:	ldr	w1, [x19, #324]
    7774:	ldr	x0, [x19, #312]
    7778:	cmp	w1, w20
    777c:	b.hi	77d8 <lzma_vli_encode@@XZ_5.0+0x514>  // b.pmore
    7780:	mov	x1, x22
    7784:	ldp	x19, x20, [sp, #16]
    7788:	ldp	x21, x22, [sp, #32]
    778c:	ldp	x23, x24, [sp, #48]
    7790:	ldp	x29, x30, [sp], #64
    7794:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    7798:	ldr	x0, [x19, #312]
    779c:	umull	x21, w20, w24
    77a0:	add	w20, w20, #0x1
    77a4:	add	x0, x0, x21
    77a8:	add	x0, x0, #0x160
    77ac:	bl	3530 <pthread_mutex_lock@plt>
    77b0:	ldr	x1, [x19, #312]
    77b4:	add	x0, x1, x21
    77b8:	str	w23, [x1, x21]
    77bc:	add	x0, x0, #0x190
    77c0:	bl	3200 <pthread_cond_signal@plt>
    77c4:	ldr	x0, [x19, #312]
    77c8:	add	x0, x0, x21
    77cc:	add	x0, x0, #0x160
    77d0:	bl	3550 <pthread_mutex_unlock@plt>
    77d4:	b	775c <lzma_vli_encode@@XZ_5.0+0x498>
    77d8:	umaddl	x0, w20, w21, x0
    77dc:	mov	x1, #0x0                   	// #0
    77e0:	add	w20, w20, #0x1
    77e4:	ldr	x0, [x0, #456]
    77e8:	bl	32d0 <pthread_join@plt>
    77ec:	b	7770 <lzma_vli_encode@@XZ_5.0+0x4ac>
    77f0:	stp	x29, x30, [sp, #-48]!
    77f4:	mov	x29, sp
    77f8:	stp	x19, x20, [sp, #16]
    77fc:	mov	x19, x0
    7800:	mov	x20, x1
    7804:	str	x21, [sp, #32]
    7808:	add	x21, x19, #0x10
    780c:	bl	7734 <lzma_vli_encode@@XZ_5.0+0x470>
    7810:	mov	x1, x20
    7814:	add	x0, x19, #0x100
    7818:	bl	73a4 <lzma_vli_encode@@XZ_5.0+0xe0>
    781c:	ldr	x0, [x21], #16
    7820:	mov	x1, x20
    7824:	cmn	x0, #0x1
    7828:	b.ne	7868 <lzma_vli_encode@@XZ_5.0+0x5a4>  // b.any
    782c:	add	x0, x19, #0x68
    7830:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    7834:	ldr	x0, [x19, #96]
    7838:	mov	x1, x20
    783c:	bl	33e0 <lzma_index_end@plt>
    7840:	add	x0, x19, #0x198
    7844:	bl	3520 <pthread_cond_destroy@plt>
    7848:	add	x0, x19, #0x168
    784c:	bl	3410 <pthread_mutex_destroy@plt>
    7850:	mov	x1, x20
    7854:	mov	x0, x19
    7858:	ldp	x19, x20, [sp, #16]
    785c:	ldr	x21, [sp, #32]
    7860:	ldp	x29, x30, [sp], #48
    7864:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    7868:	ldur	x0, [x21, #-8]
    786c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    7870:	b	781c <lzma_vli_encode@@XZ_5.0+0x558>
    7874:	stp	x29, x30, [sp, #-32]!
    7878:	mov	x29, sp
    787c:	stp	x19, x20, [sp, #16]
    7880:	mov	x19, x0
    7884:	mov	w20, w1
    7888:	ldr	x0, [x0]
    788c:	add	x0, x0, #0x168
    7890:	bl	3530 <pthread_mutex_lock@plt>
    7894:	ldr	x0, [x19]
    7898:	ldr	w1, [x0, #308]
    789c:	cbnz	w1, 78a4 <lzma_vli_encode@@XZ_5.0+0x5e0>
    78a0:	str	w20, [x0, #308]
    78a4:	add	x0, x0, #0x198
    78a8:	bl	3200 <pthread_cond_signal@plt>
    78ac:	ldr	x0, [x19]
    78b0:	ldp	x19, x20, [sp, #16]
    78b4:	add	x0, x0, #0x168
    78b8:	ldp	x29, x30, [sp], #32
    78bc:	b	3550 <pthread_mutex_unlock@plt>
    78c0:	sub	sp, sp, #0x80
    78c4:	stp	x29, x30, [sp, #16]
    78c8:	add	x29, sp, #0x10
    78cc:	stp	x19, x20, [sp, #32]
    78d0:	mov	x19, x0
    78d4:	stp	x21, x22, [sp, #48]
    78d8:	add	x21, x0, #0x160
    78dc:	stp	x25, x26, [sp, #80]
    78e0:	add	x25, sp, #0x78
    78e4:	stp	x23, x24, [sp, #64]
    78e8:	stp	x27, x28, [sp, #96]
    78ec:	add	x22, x19, #0x190
    78f0:	mov	x0, x21
    78f4:	bl	3530 <pthread_mutex_lock@plt>
    78f8:	ldr	w0, [x19]
    78fc:	cmp	w0, #0x3
    7900:	b.ne	7910 <lzma_vli_encode@@XZ_5.0+0x64c>  // b.any
    7904:	str	wzr, [x19]
    7908:	mov	x0, x22
    790c:	bl	3200 <pthread_cond_signal@plt>
    7910:	ldr	w20, [x19]
    7914:	cbnz	w20, 7928 <lzma_vli_encode@@XZ_5.0+0x664>
    7918:	mov	x1, x21
    791c:	mov	x0, x22
    7920:	bl	33a0 <pthread_cond_wait@plt>
    7924:	b	78f8 <lzma_vli_encode@@XZ_5.0+0x634>
    7928:	mov	x0, x21
    792c:	bl	3550 <pthread_mutex_unlock@plt>
    7930:	add	x26, x19, #0x40
    7934:	cmp	w20, #0x2
    7938:	b.hi	7bc0 <lzma_vli_encode@@XZ_5.0+0x8fc>  // b.pmore
    793c:	ldr	x20, [x19, #32]
    7940:	add	x23, x19, #0x88
    7944:	mov	w1, #0x0                   	// #0
    7948:	mov	x2, #0xd0                  	// #208
    794c:	mov	x0, x23
    7950:	add	x20, x20, #0x10
    7954:	ldr	w24, [x20, #176]
    7958:	ldur	x27, [x20, #-8]
    795c:	ldr	x28, [x20, #256]
    7960:	bl	3230 <memset@plt>
    7964:	str	w24, [x19, #144]
    7968:	mov	x0, x23
    796c:	stp	x28, x27, [x19, #152]
    7970:	str	x20, [x19, #168]
    7974:	bl	3160 <lzma_block_header_size@plt>
    7978:	mov	w1, w0
    797c:	cbz	w0, 7a1c <lzma_vli_encode@@XZ_5.0+0x758>
    7980:	mov	w20, #0x3                   	// #3
    7984:	add	x0, x19, #0x20
    7988:	bl	7874 <lzma_vli_encode@@XZ_5.0+0x5b0>
    798c:	mov	x0, x21
    7990:	bl	3530 <pthread_mutex_lock@plt>
    7994:	ldr	w0, [x19]
    7998:	cmp	w0, #0x4
    799c:	b.eq	79ac <lzma_vli_encode@@XZ_5.0+0x6e8>  // b.none
    79a0:	str	wzr, [x19]
    79a4:	mov	x0, x22
    79a8:	bl	3200 <pthread_cond_signal@plt>
    79ac:	mov	x0, x21
    79b0:	bl	3550 <pthread_mutex_unlock@plt>
    79b4:	ldr	x0, [x19, #32]
    79b8:	add	x0, x0, #0x168
    79bc:	bl	3530 <pthread_mutex_lock@plt>
    79c0:	ldr	x2, [x19, #24]
    79c4:	cmp	w20, #0x2
    79c8:	cset	w0, eq  // eq = none
    79cc:	strb	w0, [x2, #32]
    79d0:	ldr	x0, [x19, #32]
    79d4:	ldr	x3, [x2, #24]
    79d8:	add	x0, x0, #0x198
    79dc:	ldur	x1, [x0, #-64]
    79e0:	ldr	x2, [x2, #8]
    79e4:	add	x1, x1, x3
    79e8:	stur	x1, [x0, #-64]
    79ec:	ldur	x1, [x0, #-56]
    79f0:	add	x1, x1, x2
    79f4:	stur	x1, [x0, #-56]
    79f8:	ldur	x1, [x0, #-80]
    79fc:	stp	xzr, xzr, [x19, #48]
    7a00:	str	x1, [x19, #344]
    7a04:	stur	x19, [x0, #-80]
    7a08:	bl	3200 <pthread_cond_signal@plt>
    7a0c:	ldr	x0, [x19, #32]
    7a10:	add	x0, x0, #0x168
    7a14:	bl	3550 <pthread_mutex_unlock@plt>
    7a18:	b	78ec <lzma_vli_encode@@XZ_5.0+0x628>
    7a1c:	ldr	x1, [x19, #40]
    7a20:	mov	x2, x23
    7a24:	mov	x0, x26
    7a28:	bl	5c24 <lzma_block_uncomp_encode@@XZ_5.2+0x240>
    7a2c:	mov	w1, w0
    7a30:	cbnz	w0, 7980 <lzma_vli_encode@@XZ_5.0+0x6bc>
    7a34:	ldr	x0, [x19, #24]
    7a38:	mov	x28, #0x0                   	// #0
    7a3c:	ldr	w1, [x19, #140]
    7a40:	str	xzr, [sp, #120]
    7a44:	str	x1, [x0, #8]
    7a48:	ldr	x0, [x19, #32]
    7a4c:	ldr	x27, [x0, #272]
    7a50:	mov	x0, x21
    7a54:	bl	3530 <pthread_mutex_lock@plt>
    7a58:	ldr	x0, [sp, #120]
    7a5c:	str	x0, [x19, #48]
    7a60:	ldr	x0, [x19, #24]
    7a64:	ldr	x0, [x0, #8]
    7a68:	str	x0, [x19, #56]
    7a6c:	ldr	x24, [x19, #16]
    7a70:	ldr	w20, [x19]
    7a74:	cmp	x24, x28
    7a78:	b.ne	7a84 <lzma_vli_encode@@XZ_5.0+0x7c0>  // b.any
    7a7c:	cmp	w20, #0x1
    7a80:	b.eq	7b58 <lzma_vli_encode@@XZ_5.0+0x894>  // b.none
    7a84:	mov	x0, x21
    7a88:	bl	3550 <pthread_mutex_unlock@plt>
    7a8c:	cmp	w20, #0x2
    7a90:	b.hi	7bc0 <lzma_vli_encode@@XZ_5.0+0x8fc>  // b.pmore
    7a94:	ldr	x4, [sp, #120]
    7a98:	mov	w0, #0x3                   	// #3
    7a9c:	csel	w1, wzr, w0, ne  // ne = any
    7aa0:	sub	x0, x24, x4
    7aa4:	cmp	x0, #0x4, lsl #12
    7aa8:	b.ls	7b68 <lzma_vli_encode@@XZ_5.0+0x8a4>  // b.plast
    7aac:	add	x4, x4, #0x4, lsl #12
    7ab0:	mov	w1, #0x0                   	// #0
    7ab4:	ldr	x0, [x19, #24]
    7ab8:	mov	x7, x27
    7abc:	ldr	x2, [x19, #8]
    7ac0:	add	x6, x0, #0x8
    7ac4:	ldr	x9, [x19, #88]
    7ac8:	str	w1, [sp]
    7acc:	mov	x3, x25
    7ad0:	ldr	x5, [x0]
    7ad4:	ldr	x1, [x19, #40]
    7ad8:	ldr	x0, [x19, #64]
    7adc:	blr	x9
    7ae0:	mov	w1, w0
    7ae4:	cbnz	w0, 7b70 <lzma_vli_encode@@XZ_5.0+0x8ac>
    7ae8:	ldr	x0, [x19, #24]
    7aec:	ldr	x0, [x0, #8]
    7af0:	cmp	x27, x0
    7af4:	b.hi	7b50 <lzma_vli_encode@@XZ_5.0+0x88c>  // b.pmore
    7af8:	mov	x0, x21
    7afc:	bl	3530 <pthread_mutex_lock@plt>
    7b00:	ldr	w20, [x19]
    7b04:	cmp	w20, #0x1
    7b08:	b.eq	7bb0 <lzma_vli_encode@@XZ_5.0+0x8ec>  // b.none
    7b0c:	mov	x0, x21
    7b10:	ldr	x28, [x19, #16]
    7b14:	bl	3550 <pthread_mutex_unlock@plt>
    7b18:	cmp	w20, #0x2
    7b1c:	b.hi	7bc0 <lzma_vli_encode@@XZ_5.0+0x8fc>  // b.pmore
    7b20:	ldr	x0, [x19, #24]
    7b24:	mov	x5, x27
    7b28:	ldr	x1, [x19, #8]
    7b2c:	mov	x4, x0
    7b30:	ldr	x3, [x0]
    7b34:	mov	x2, x28
    7b38:	str	xzr, [x4, #8]!
    7b3c:	mov	x0, x23
    7b40:	bl	34c0 <lzma_block_uncomp_encode@plt>
    7b44:	cbz	w0, 7b90 <lzma_vli_encode@@XZ_5.0+0x8cc>
    7b48:	mov	w1, #0xb                   	// #11
    7b4c:	b	7980 <lzma_vli_encode@@XZ_5.0+0x6bc>
    7b50:	mov	x28, x24
    7b54:	b	7a50 <lzma_vli_encode@@XZ_5.0+0x78c>
    7b58:	mov	x1, x21
    7b5c:	mov	x0, x22
    7b60:	bl	33a0 <pthread_cond_wait@plt>
    7b64:	b	7a6c <lzma_vli_encode@@XZ_5.0+0x7a8>
    7b68:	mov	x4, x24
    7b6c:	b	7ab4 <lzma_vli_encode@@XZ_5.0+0x7f0>
    7b70:	cmp	w0, #0x1
    7b74:	b.ne	7980 <lzma_vli_encode@@XZ_5.0+0x6bc>  // b.any
    7b78:	ldr	x0, [x19, #24]
    7b7c:	ldr	x1, [x0]
    7b80:	mov	x0, x23
    7b84:	bl	3540 <lzma_block_header_encode@plt>
    7b88:	mov	w1, w0
    7b8c:	cbnz	w0, 7980 <lzma_vli_encode@@XZ_5.0+0x6bc>
    7b90:	mov	x0, x23
    7b94:	bl	3190 <lzma_block_unpadded_size@plt>
    7b98:	ldr	x20, [x19, #24]
    7b9c:	str	x0, [x20, #16]
    7ba0:	ldr	x0, [x19, #160]
    7ba4:	str	x0, [x20, #24]
    7ba8:	mov	w20, #0x2                   	// #2
    7bac:	b	798c <lzma_vli_encode@@XZ_5.0+0x6c8>
    7bb0:	mov	x1, x21
    7bb4:	mov	x0, x22
    7bb8:	bl	33a0 <pthread_cond_wait@plt>
    7bbc:	b	7b00 <lzma_vli_encode@@XZ_5.0+0x83c>
    7bc0:	cmp	w20, #0x4
    7bc4:	b.ne	798c <lzma_vli_encode@@XZ_5.0+0x6c8>  // b.any
    7bc8:	mov	x0, x21
    7bcc:	bl	3410 <pthread_mutex_destroy@plt>
    7bd0:	mov	x0, x22
    7bd4:	bl	3520 <pthread_cond_destroy@plt>
    7bd8:	ldr	x1, [x19, #40]
    7bdc:	mov	x0, x26
    7be0:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    7be4:	ldr	x0, [x19, #8]
    7be8:	ldr	x1, [x19, #40]
    7bec:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    7bf0:	mov	x0, #0x0                   	// #0
    7bf4:	ldp	x29, x30, [sp, #16]
    7bf8:	ldp	x19, x20, [sp, #32]
    7bfc:	ldp	x21, x22, [sp, #48]
    7c00:	ldp	x23, x24, [sp, #64]
    7c04:	ldp	x25, x26, [sp, #80]
    7c08:	ldp	x27, x28, [sp, #96]
    7c0c:	add	sp, sp, #0x80
    7c10:	ret
    7c14:	stp	x29, x30, [sp, #-64]!
    7c18:	mov	x29, sp
    7c1c:	stp	x19, x20, [sp, #16]
    7c20:	mov	x19, x0
    7c24:	mov	w20, #0x0                   	// #0
    7c28:	stp	x21, x22, [sp, #32]
    7c2c:	and	w22, w1, #0xff
    7c30:	stp	x23, x24, [sp, #48]
    7c34:	mov	w24, #0x1d0                 	// #464
    7c38:	mov	w23, #0x3                   	// #3
    7c3c:	ldr	w0, [x19, #324]
    7c40:	cmp	w0, w20
    7c44:	b.hi	7c60 <lzma_vli_encode@@XZ_5.0+0x99c>  // b.pmore
    7c48:	cbnz	w22, 7cec <lzma_vli_encode@@XZ_5.0+0xa28>
    7c4c:	ldp	x19, x20, [sp, #16]
    7c50:	ldp	x21, x22, [sp, #32]
    7c54:	ldp	x23, x24, [sp, #48]
    7c58:	ldp	x29, x30, [sp], #64
    7c5c:	ret
    7c60:	ldr	x0, [x19, #312]
    7c64:	umull	x21, w20, w24
    7c68:	add	w20, w20, #0x1
    7c6c:	add	x0, x0, x21
    7c70:	add	x0, x0, #0x160
    7c74:	bl	3530 <pthread_mutex_lock@plt>
    7c78:	ldr	x2, [x19, #312]
    7c7c:	add	x0, x2, x21
    7c80:	str	w23, [x2, x21]
    7c84:	add	x0, x0, #0x190
    7c88:	bl	3200 <pthread_cond_signal@plt>
    7c8c:	ldr	x0, [x19, #312]
    7c90:	add	x0, x0, x21
    7c94:	add	x0, x0, #0x160
    7c98:	bl	3550 <pthread_mutex_unlock@plt>
    7c9c:	b	7c3c <lzma_vli_encode@@XZ_5.0+0x978>
    7ca0:	add	x0, x0, #0x190
    7ca4:	bl	33a0 <pthread_cond_wait@plt>
    7ca8:	ldr	x2, [x19, #312]
    7cac:	add	x0, x2, x21
    7cb0:	ldr	w2, [x2, x21]
    7cb4:	add	x1, x0, #0x160
    7cb8:	cbnz	w2, 7ca0 <lzma_vli_encode@@XZ_5.0+0x9dc>
    7cbc:	add	w20, w20, #0x1
    7cc0:	mov	x0, x1
    7cc4:	bl	3550 <pthread_mutex_unlock@plt>
    7cc8:	ldr	w0, [x19, #324]
    7ccc:	cmp	w20, w0
    7cd0:	b.cs	7c4c <lzma_vli_encode@@XZ_5.0+0x988>  // b.hs, b.nlast
    7cd4:	ldr	x0, [x19, #312]
    7cd8:	umull	x21, w20, w22
    7cdc:	add	x0, x0, x21
    7ce0:	add	x0, x0, #0x160
    7ce4:	bl	3530 <pthread_mutex_lock@plt>
    7ce8:	b	7ca8 <lzma_vli_encode@@XZ_5.0+0x9e4>
    7cec:	mov	w20, #0x0                   	// #0
    7cf0:	mov	w22, #0x1d0                 	// #464
    7cf4:	b	7cc8 <lzma_vli_encode@@XZ_5.0+0xa04>
    7cf8:	cbz	x0, 7dc8 <lzma_vli_encode@@XZ_5.0+0xb04>
    7cfc:	stp	x29, x30, [sp, #-64]!
    7d00:	mov	x29, sp
    7d04:	stp	x19, x20, [sp, #16]
    7d08:	mov	x19, x0
    7d0c:	ldr	w0, [x0]
    7d10:	stp	x21, x22, [sp, #32]
    7d14:	str	x23, [sp, #48]
    7d18:	cbz	w0, 7d34 <lzma_vli_encode@@XZ_5.0+0xa70>
    7d1c:	mov	w0, #0x8                   	// #8
    7d20:	ldp	x19, x20, [sp, #16]
    7d24:	ldp	x21, x22, [sp, #32]
    7d28:	ldr	x23, [sp, #48]
    7d2c:	ldp	x29, x30, [sp], #64
    7d30:	ret
    7d34:	ldr	w0, [x19, #4]
    7d38:	mov	x22, x1
    7d3c:	mov	w1, #0x3fff                	// #16383
    7d40:	sub	w0, w0, #0x1
    7d44:	cmp	w0, w1
    7d48:	b.hi	7d1c <lzma_vli_encode@@XZ_5.0+0xa58>  // b.pmore
    7d4c:	ldr	x0, [x19, #24]
    7d50:	mov	x21, x2
    7d54:	mov	x20, x3
    7d58:	mov	x23, x4
    7d5c:	cbz	x0, 7d98 <lzma_vli_encode@@XZ_5.0+0xad4>
    7d60:	str	x0, [x2]
    7d64:	ldr	x0, [x19, #8]
    7d68:	cbz	x0, 7db4 <lzma_vli_encode@@XZ_5.0+0xaf0>
    7d6c:	mov	x1, #0x3ffffffffffff       	// #1125899906842623
    7d70:	cmp	x0, x1
    7d74:	b.hi	7d1c <lzma_vli_encode@@XZ_5.0+0xa58>  // b.pmore
    7d78:	str	x0, [x20]
    7d7c:	ldr	x0, [x20]
    7d80:	bl	598c <lzma_alone_encoder@@XZ_5.0+0x488>
    7d84:	cmp	x0, #0x0
    7d88:	str	x0, [x23]
    7d8c:	mov	w0, #0x5                   	// #5
    7d90:	csel	w0, wzr, w0, ne  // ne = any
    7d94:	b	7d20 <lzma_vli_encode@@XZ_5.0+0xa5c>
    7d98:	ldr	w1, [x19, #20]
    7d9c:	mov	x0, x22
    7da0:	bl	3e90 <lzma_block_total_size@@XZ_5.0+0x24>
    7da4:	tst	w0, #0xff
    7da8:	b.ne	7d1c <lzma_vli_encode@@XZ_5.0+0xa58>  // b.any
    7dac:	str	x22, [x21]
    7db0:	b	7d64 <lzma_vli_encode@@XZ_5.0+0xaa0>
    7db4:	ldr	x0, [x21]
    7db8:	bl	63ec <lzma_filters_update@@XZ_5.0+0xa8>
    7dbc:	str	x0, [x20]
    7dc0:	cbnz	x0, 7d7c <lzma_vli_encode@@XZ_5.0+0xab8>
    7dc4:	b	7d1c <lzma_vli_encode@@XZ_5.0+0xa58>
    7dc8:	mov	w0, #0xb                   	// #11
    7dcc:	ret
    7dd0:	stp	x29, x30, [sp, #-288]!
    7dd4:	mov	x29, sp
    7dd8:	stp	x21, x22, [sp, #32]
    7ddc:	mov	x22, x2
    7de0:	mov	x21, x0
    7de4:	ldr	x2, [x0, #16]
    7de8:	stp	x19, x20, [sp, #16]
    7dec:	adrp	x19, 7000 <lzma_stream_buffer_encode@@XZ_5.0+0x5b4>
    7df0:	str	x23, [sp, #48]
    7df4:	add	x19, x19, #0xdd0
    7df8:	mov	x20, x1
    7dfc:	cmp	x2, x19
    7e00:	b.eq	7e08 <lzma_vli_encode@@XZ_5.0+0xb44>  // b.none
    7e04:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    7e08:	str	x19, [x21, #16]
    7e0c:	add	x4, sp, #0x58
    7e10:	add	x3, sp, #0x50
    7e14:	add	x2, sp, #0x48
    7e18:	add	x1, sp, #0x60
    7e1c:	mov	x0, x22
    7e20:	bl	7cf8 <lzma_vli_encode@@XZ_5.0+0xa34>
    7e24:	cbnz	w0, 7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    7e28:	ldr	x0, [sp, #72]
    7e2c:	bl	3220 <lzma_raw_encoder_memusage@plt>
    7e30:	cmn	x0, #0x1
    7e34:	b.eq	8028 <lzma_vli_encode@@XZ_5.0+0xd64>  // b.none
    7e38:	ldr	w0, [x22, #32]
    7e3c:	cmp	w0, #0xf
    7e40:	b.hi	8030 <lzma_vli_encode@@XZ_5.0+0xd6c>  // b.pmore
    7e44:	bl	30e0 <lzma_check_is_supported@plt>
    7e48:	tst	w0, #0xff
    7e4c:	b.eq	8038 <lzma_vli_encode@@XZ_5.0+0xd74>  // b.none
    7e50:	ldr	x19, [x21]
    7e54:	cbnz	x19, 7f1c <lzma_vli_encode@@XZ_5.0+0xc58>
    7e58:	mov	x1, x20
    7e5c:	mov	x0, #0x1d0                 	// #464
    7e60:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    7e64:	mov	x19, x0
    7e68:	cbnz	x0, 7e84 <lzma_vli_encode@@XZ_5.0+0xbc0>
    7e6c:	mov	w0, #0x5                   	// #5
    7e70:	ldp	x19, x20, [sp, #16]
    7e74:	ldp	x21, x22, [sp, #32]
    7e78:	ldr	x23, [sp, #48]
    7e7c:	ldp	x29, x30, [sp], #288
    7e80:	ret
    7e84:	str	x19, [x21]
    7e88:	add	x23, x0, #0x168
    7e8c:	mov	x0, x23
    7e90:	mov	x1, #0x0                   	// #0
    7e94:	bl	32a0 <pthread_mutex_init@plt>
    7e98:	cbz	w0, 7eb0 <lzma_vli_encode@@XZ_5.0+0xbec>
    7e9c:	mov	x1, x20
    7ea0:	mov	x0, x19
    7ea4:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    7ea8:	str	xzr, [x21]
    7eac:	b	7e6c <lzma_vli_encode@@XZ_5.0+0xba8>
    7eb0:	add	x0, x19, #0x198
    7eb4:	bl	769c <lzma_vli_encode@@XZ_5.0+0x3d8>
    7eb8:	cbz	w0, 7ec8 <lzma_vli_encode@@XZ_5.0+0xc04>
    7ebc:	mov	x0, x23
    7ec0:	bl	3410 <pthread_mutex_destroy@plt>
    7ec4:	b	7e9c <lzma_vli_encode@@XZ_5.0+0xbd8>
    7ec8:	adrp	x0, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    7ecc:	add	x0, x0, #0x40
    7ed0:	str	x0, [x21, #24]
    7ed4:	adrp	x0, 7000 <lzma_stream_buffer_encode@@XZ_5.0+0x5b4>
    7ed8:	add	x0, x0, #0x7f0
    7edc:	str	x0, [x21, #32]
    7ee0:	adrp	x0, 7000 <lzma_stream_buffer_encode@@XZ_5.0+0x5b4>
    7ee4:	add	x0, x0, #0x5e0
    7ee8:	str	x0, [x21, #40]
    7eec:	mov	x0, #0xffffffffffffffff    	// #-1
    7ef0:	str	x0, [x19, #16]
    7ef4:	stp	xzr, xzr, [x19, #96]
    7ef8:	str	x0, [x19, #112]
    7efc:	stp	xzr, xzr, [x19, #120]
    7f00:	stp	xzr, xzr, [x19, #136]
    7f04:	stp	xzr, xzr, [x19, #152]
    7f08:	str	xzr, [x19, #168]
    7f0c:	stp	xzr, xzr, [x19, #256]
    7f10:	stp	xzr, xzr, [x19, #272]
    7f14:	stp	xzr, xzr, [x19, #288]
    7f18:	stp	xzr, xzr, [x19, #312]
    7f1c:	ldr	w1, [x19, #320]
    7f20:	ldr	x0, [sp, #80]
    7f24:	str	wzr, [x19]
    7f28:	str	x0, [x19, #8]
    7f2c:	ldr	w0, [x22, #4]
    7f30:	str	wzr, [x19, #308]
    7f34:	str	xzr, [x19, #336]
    7f38:	cmp	w1, w0
    7f3c:	b.eq	8008 <lzma_vli_encode@@XZ_5.0+0xd44>  // b.none
    7f40:	mov	x1, x20
    7f44:	mov	x0, x19
    7f48:	bl	7734 <lzma_vli_encode@@XZ_5.0+0x470>
    7f4c:	stp	xzr, xzr, [x19, #312]
    7f50:	mov	w0, #0x1d0                 	// #464
    7f54:	ldr	w2, [x22, #4]
    7f58:	mov	x1, x20
    7f5c:	str	xzr, [x19, #328]
    7f60:	umull	x0, w2, w0
    7f64:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    7f68:	str	x0, [x19, #312]
    7f6c:	cbz	x0, 7e6c <lzma_vli_encode@@XZ_5.0+0xba8>
    7f70:	ldr	w0, [x22, #4]
    7f74:	str	w0, [x19, #320]
    7f78:	ldr	w3, [x22, #4]
    7f7c:	mov	x1, x20
    7f80:	ldr	x2, [sp, #88]
    7f84:	add	x0, x19, #0x100
    7f88:	bl	73e0 <lzma_vli_encode@@XZ_5.0+0x11c>
    7f8c:	cbnz	w0, 7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    7f90:	add	x21, x19, #0x10
    7f94:	ldr	w0, [x22, #16]
    7f98:	mov	x23, x21
    7f9c:	str	w0, [x19, #304]
    7fa0:	ldr	x0, [x21], #16
    7fa4:	cmn	x0, #0x1
    7fa8:	b.ne	8018 <lzma_vli_encode@@XZ_5.0+0xd54>  // b.any
    7fac:	ldr	x0, [sp, #72]
    7fb0:	mov	x2, x20
    7fb4:	mov	x1, x23
    7fb8:	bl	3240 <lzma_filters_copy@plt>
    7fbc:	cbnz	w0, 7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    7fc0:	ldr	x0, [x19, #96]
    7fc4:	mov	x1, x20
    7fc8:	bl	33e0 <lzma_index_end@plt>
    7fcc:	mov	x0, x20
    7fd0:	bl	33b0 <lzma_index_init@plt>
    7fd4:	str	x0, [x19, #96]
    7fd8:	cbz	x0, 7e6c <lzma_vli_encode@@XZ_5.0+0xba8>
    7fdc:	ldr	w0, [x22, #32]
    7fe0:	add	x1, x19, #0xe8
    7fe4:	str	wzr, [x19, #176]
    7fe8:	str	w0, [x19, #192]
    7fec:	add	x0, x19, #0xb0
    7ff0:	bl	3390 <lzma_stream_header_encode@plt>
    7ff4:	cbnz	w0, 7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    7ff8:	mov	x1, #0xc                   	// #12
    7ffc:	str	xzr, [x19, #248]
    8000:	stp	xzr, x1, [x19, #344]
    8004:	b	7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    8008:	mov	x0, x19
    800c:	mov	w1, #0x1                   	// #1
    8010:	bl	7c14 <lzma_vli_encode@@XZ_5.0+0x950>
    8014:	b	7f78 <lzma_vli_encode@@XZ_5.0+0xcb4>
    8018:	ldur	x0, [x21, #-8]
    801c:	mov	x1, x20
    8020:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    8024:	b	7fa0 <lzma_vli_encode@@XZ_5.0+0xcdc>
    8028:	mov	w0, #0x8                   	// #8
    802c:	b	7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    8030:	mov	w0, #0xb                   	// #11
    8034:	b	7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    8038:	mov	w0, #0x3                   	// #3
    803c:	b	7e70 <lzma_vli_encode@@XZ_5.0+0xbac>
    8040:	sub	sp, sp, #0x1e0
    8044:	stp	x29, x30, [sp, #16]
    8048:	add	x29, sp, #0x10
    804c:	stp	x19, x20, [sp, #32]
    8050:	ldr	w19, [x0]
    8054:	stp	x21, x22, [sp, #48]
    8058:	cmp	w19, #0x3
    805c:	stp	x23, x24, [sp, #64]
    8060:	stp	x25, x26, [sp, #80]
    8064:	stp	x27, x28, [sp, #96]
    8068:	str	x4, [sp, #112]
    806c:	str	x2, [sp, #160]
    8070:	b.hi	8554 <lzma_vli_encode@@XZ_5.0+0x1290>  // b.pmore
    8074:	mov	x24, x0
    8078:	mov	x21, x1
    807c:	adrp	x0, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    8080:	mov	x25, x3
    8084:	mov	x26, x5
    8088:	mov	x22, x6
    808c:	mov	x23, x7
    8090:	add	x0, x0, #0x774
    8094:	ldrh	w0, [x0, w19, uxtw #1]
    8098:	adr	x1, 80a4 <lzma_vli_encode@@XZ_5.0+0xde0>
    809c:	add	x0, x1, w0, sxth #2
    80a0:	br	x0
    80a4:	mov	x5, x7
    80a8:	mov	x4, x6
    80ac:	mov	x3, x26
    80b0:	add	x1, x24, #0xf8
    80b4:	add	x0, x24, #0xe8
    80b8:	mov	x2, #0xc                   	// #12
    80bc:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    80c0:	ldr	x0, [x24, #248]
    80c4:	cmp	x0, #0xb
    80c8:	b.ls	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>  // b.plast
    80cc:	mov	w0, #0x1                   	// #1
    80d0:	str	w0, [x24]
    80d4:	str	xzr, [x24, #248]
    80d8:	add	x0, sp, #0xc8
    80dc:	str	x0, [sp, #168]
    80e0:	add	x0, sp, #0xe0
    80e4:	str	wzr, [sp, #132]
    80e8:	str	x0, [sp, #152]
    80ec:	add	x0, sp, #0xd0
    80f0:	str	x0, [sp, #176]
    80f4:	stp	xzr, xzr, [sp, #192]
    80f8:	add	x20, x24, #0x168
    80fc:	mov	x0, x20
    8100:	bl	3530 <pthread_mutex_lock@plt>
    8104:	ldr	w19, [x24, #308]
    8108:	cbnz	w19, 812c <lzma_vli_encode@@XZ_5.0+0xe68>
    810c:	ldr	x5, [sp, #168]
    8110:	add	x4, sp, #0xc0
    8114:	mov	x3, x23
    8118:	mov	x2, x22
    811c:	mov	x1, x26
    8120:	add	x0, x24, #0x100
    8124:	bl	7524 <lzma_vli_encode@@XZ_5.0+0x260>
    8128:	mov	w19, w0
    812c:	mov	x0, x20
    8130:	bl	3550 <pthread_mutex_unlock@plt>
    8134:	cmp	w19, #0x1
    8138:	b.ne	815c <lzma_vli_encode@@XZ_5.0+0xe98>  // b.any
    813c:	ldp	x2, x3, [sp, #192]
    8140:	mov	x1, x21
    8144:	ldr	x0, [x24, #96]
    8148:	bl	3300 <lzma_index_append@plt>
    814c:	mov	w19, w0
    8150:	ldr	x0, [x22]
    8154:	cmp	x0, x23
    8158:	b.cc	80f8 <lzma_vli_encode@@XZ_5.0+0xe34>  // b.lo, b.ul, b.last
    815c:	cbnz	w19, 82ac <lzma_vli_encode@@XZ_5.0+0xfe8>
    8160:	add	x27, x24, #0x100
    8164:	add	x0, sp, #0x160
    8168:	str	x0, [sp, #120]
    816c:	ldr	x1, [x25]
    8170:	ldr	x2, [sp, #112]
    8174:	ldr	x0, [x24, #336]
    8178:	cmp	x2, x1
    817c:	b.hi	82dc <lzma_vli_encode@@XZ_5.0+0x1018>  // b.pmore
    8180:	cbz	x0, 818c <lzma_vli_encode@@XZ_5.0+0xec8>
    8184:	ldr	w0, [sp, #480]
    8188:	cbnz	w0, 82e0 <lzma_vli_encode@@XZ_5.0+0x101c>
    818c:	ldr	x0, [x25]
    8190:	str	x0, [sp, #120]
    8194:	ldr	x1, [sp, #112]
    8198:	cmp	x0, x1
    819c:	b.ne	81cc <lzma_vli_encode@@XZ_5.0+0xf08>  // b.any
    81a0:	ldr	w0, [sp, #480]
    81a4:	cbz	w0, 8544 <lzma_vli_encode@@XZ_5.0+0x1280>
    81a8:	cmp	w0, #0x4
    81ac:	b.eq	854c <lzma_vli_encode@@XZ_5.0+0x1288>  // b.none
    81b0:	ldr	w0, [x24, #288]
    81b4:	cbnz	w0, 81cc <lzma_vli_encode@@XZ_5.0+0xf08>
    81b8:	ldr	w0, [sp, #480]
    81bc:	cmp	w0, #0x3
    81c0:	b.eq	8484 <lzma_vli_encode@@XZ_5.0+0x11c0>  // b.none
    81c4:	cmp	w0, #0x2
    81c8:	b.eq	854c <lzma_vli_encode@@XZ_5.0+0x1288>  // b.none
    81cc:	ldr	x0, [x22]
    81d0:	cmp	x0, x23
    81d4:	b.eq	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>  // b.none
    81d8:	ldr	w1, [x24, #304]
    81dc:	cbz	w1, 8244 <lzma_vli_encode@@XZ_5.0+0xf80>
    81e0:	ldr	w0, [sp, #132]
    81e4:	cbnz	w0, 8244 <lzma_vli_encode@@XZ_5.0+0xf80>
    81e8:	mov	w2, #0x3e8                 	// #1000
    81ec:	udiv	w3, w1, w2
    81f0:	msub	w0, w3, w2, w1
    81f4:	mov	w1, #0x4240                	// #16960
    81f8:	movk	w1, #0xf, lsl #16
    81fc:	mul	w0, w0, w1
    8200:	add	x1, sp, #0x160
    8204:	stp	x3, x0, [sp, #208]
    8208:	ldr	w0, [x24, #456]
    820c:	bl	3150 <clock_gettime@plt>
    8210:	ldp	x0, x2, [sp, #352]
    8214:	ldr	x1, [sp, #208]
    8218:	add	x1, x1, x0
    821c:	str	x1, [sp, #208]
    8220:	ldr	x0, [sp, #216]
    8224:	add	x0, x0, x2
    8228:	mov	x2, #0xc9ff                	// #51711
    822c:	movk	x2, #0x3b9a, lsl #16
    8230:	cmp	x0, x2
    8234:	b.gt	8438 <lzma_vli_encode@@XZ_5.0+0x1174>
    8238:	str	x0, [sp, #216]
    823c:	mov	w0, #0x1                   	// #1
    8240:	str	w0, [sp, #132]
    8244:	add	x28, x24, #0x100
    8248:	add	x19, x24, #0x198
    824c:	mov	w27, #0x0                   	// #0
    8250:	mov	x0, x20
    8254:	bl	3530 <pthread_mutex_lock@plt>
    8258:	ldp	x1, x0, [sp, #112]
    825c:	cmp	x0, x1
    8260:	b.cs	827c <lzma_vli_encode@@XZ_5.0+0xfb8>  // b.hs, b.nlast
    8264:	ldr	x0, [x24, #328]
    8268:	cbz	x0, 827c <lzma_vli_encode@@XZ_5.0+0xfb8>
    826c:	ldr	w0, [x28, #24]
    8270:	ldr	w1, [x28, #32]
    8274:	cmp	w1, w0
    8278:	b.cc	8298 <lzma_vli_encode@@XZ_5.0+0xfd4>  // b.lo, b.ul, b.last
    827c:	mov	x0, x28
    8280:	bl	74fc <lzma_vli_encode@@XZ_5.0+0x238>
    8284:	tst	w0, #0xff
    8288:	b.ne	8298 <lzma_vli_encode@@XZ_5.0+0xfd4>  // b.any
    828c:	ldr	w0, [x24, #308]
    8290:	cbnz	w0, 8298 <lzma_vli_encode@@XZ_5.0+0xfd4>
    8294:	cbz	w27, 8450 <lzma_vli_encode@@XZ_5.0+0x118c>
    8298:	mov	x0, x20
    829c:	bl	3550 <pthread_mutex_unlock@plt>
    82a0:	cbz	w27, 80f8 <lzma_vli_encode@@XZ_5.0+0xe34>
    82a4:	mov	w19, #0x20                  	// #32
    82a8:	b	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>
    82ac:	mov	x0, x24
    82b0:	mov	w1, #0x0                   	// #0
    82b4:	bl	7c14 <lzma_vli_encode@@XZ_5.0+0x950>
    82b8:	mov	w0, w19
    82bc:	ldp	x29, x30, [sp, #16]
    82c0:	ldp	x19, x20, [sp, #32]
    82c4:	ldp	x21, x22, [sp, #48]
    82c8:	ldp	x23, x24, [sp, #64]
    82cc:	ldp	x25, x26, [sp, #80]
    82d0:	ldp	x27, x28, [sp, #96]
    82d4:	add	sp, sp, #0x1e0
    82d8:	ret
    82dc:	cbz	x0, 8318 <lzma_vli_encode@@XZ_5.0+0x1054>
    82e0:	ldr	x0, [x24, #336]
    82e4:	ldp	x2, x4, [sp, #112]
    82e8:	ldp	x3, x1, [x0, #8]
    82ec:	str	x1, [sp, #352]
    82f0:	ldr	x5, [x24, #8]
    82f4:	mov	x1, x25
    82f8:	ldr	x0, [sp, #160]
    82fc:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    8300:	ldr	x1, [x24, #8]
    8304:	ldr	x0, [sp, #352]
    8308:	cmp	x1, x0
    830c:	b.ne	838c <lzma_vli_encode@@XZ_5.0+0x10c8>  // b.any
    8310:	mov	w0, #0x1                   	// #1
    8314:	b	83a8 <lzma_vli_encode@@XZ_5.0+0x10e4>
    8318:	ldr	w0, [x27, #24]
    831c:	ldr	w1, [x27, #32]
    8320:	cmp	w1, w0
    8324:	b.cc	855c <lzma_vli_encode@@XZ_5.0+0x1298>  // b.lo, b.ul, b.last
    8328:	mov	w2, #0x0                   	// #0
    832c:	b	868c <lzma_vli_encode@@XZ_5.0+0x13c8>
    8330:	ldr	w0, [x24, #324]
    8334:	str	x28, [x24, #336]
    8338:	add	w0, w0, #0x1
    833c:	str	w0, [x24, #324]
    8340:	ldr	x0, [x24, #336]
    8344:	add	x0, x0, #0x160
    8348:	bl	3530 <pthread_mutex_lock@plt>
    834c:	ldr	x1, [x24, #336]
    8350:	mov	w0, #0x1                   	// #1
    8354:	str	x1, [sp, #136]
    8358:	str	w0, [x1]
    835c:	mov	x0, x27
    8360:	str	xzr, [x1, #16]
    8364:	bl	74a8 <lzma_vli_encode@@XZ_5.0+0x1e4>
    8368:	ldr	x1, [sp, #136]
    836c:	str	x0, [x1, #24]
    8370:	ldr	x0, [x24, #336]
    8374:	add	x0, x0, #0x190
    8378:	bl	3200 <pthread_cond_signal@plt>
    837c:	ldr	x0, [x24, #336]
    8380:	add	x0, x0, #0x160
    8384:	bl	3550 <pthread_mutex_unlock@plt>
    8388:	b	8328 <lzma_vli_encode@@XZ_5.0+0x1064>
    838c:	ldr	x0, [x25]
    8390:	ldr	x1, [sp, #112]
    8394:	cmp	x1, x0
    8398:	b.ne	841c <lzma_vli_encode@@XZ_5.0+0x1158>  // b.any
    839c:	ldr	w0, [sp, #480]
    83a0:	cmp	w0, #0x0
    83a4:	cset	w0, ne  // ne = any
    83a8:	mov	w28, w0
    83ac:	ldr	x0, [x24, #336]
    83b0:	add	x0, x0, #0x160
    83b4:	bl	3530 <pthread_mutex_lock@plt>
    83b8:	ldr	x0, [x24, #336]
    83bc:	ldr	w1, [x0]
    83c0:	cbz	w1, 8424 <lzma_vli_encode@@XZ_5.0+0x1160>
    83c4:	ldr	x1, [sp, #352]
    83c8:	str	x1, [x0, #16]
    83cc:	cbz	w28, 83d8 <lzma_vli_encode@@XZ_5.0+0x1114>
    83d0:	mov	w1, #0x2                   	// #2
    83d4:	str	w1, [x0]
    83d8:	add	x0, x0, #0x190
    83dc:	bl	3200 <pthread_cond_signal@plt>
    83e0:	mov	w1, #0x0                   	// #0
    83e4:	ldr	x0, [x24, #336]
    83e8:	str	w1, [sp, #136]
    83ec:	add	x0, x0, #0x160
    83f0:	bl	3550 <pthread_mutex_unlock@plt>
    83f4:	ldr	w1, [sp, #136]
    83f8:	cbz	w1, 842c <lzma_vli_encode@@XZ_5.0+0x1168>
    83fc:	mov	x0, x20
    8400:	bl	3530 <pthread_mutex_lock@plt>
    8404:	ldr	w2, [x24, #308]
    8408:	mov	x0, x20
    840c:	str	w2, [sp, #120]
    8410:	bl	3550 <pthread_mutex_unlock@plt>
    8414:	ldr	w2, [sp, #120]
    8418:	b	8694 <lzma_vli_encode@@XZ_5.0+0x13d0>
    841c:	mov	w28, #0x0                   	// #0
    8420:	b	83ac <lzma_vli_encode@@XZ_5.0+0x10e8>
    8424:	mov	w1, #0x1                   	// #1
    8428:	b	83e4 <lzma_vli_encode@@XZ_5.0+0x1120>
    842c:	cbz	w28, 816c <lzma_vli_encode@@XZ_5.0+0xea8>
    8430:	str	xzr, [x24, #336]
    8434:	b	816c <lzma_vli_encode@@XZ_5.0+0xea8>
    8438:	mov	x2, #0xffffffffffff3600    	// #-51712
    843c:	add	x1, x1, #0x1
    8440:	movk	x2, #0xc465, lsl #16
    8444:	add	x0, x0, x2
    8448:	stp	x1, x0, [sp, #208]
    844c:	b	823c <lzma_vli_encode@@XZ_5.0+0xf78>
    8450:	ldr	w0, [x24, #304]
    8454:	cbz	w0, 8474 <lzma_vli_encode@@XZ_5.0+0x11b0>
    8458:	ldr	x2, [sp, #176]
    845c:	mov	x1, x20
    8460:	mov	x0, x19
    8464:	bl	3560 <pthread_cond_timedwait@plt>
    8468:	cmp	w0, #0x0
    846c:	cset	w27, ne  // ne = any
    8470:	b	8258 <lzma_vli_encode@@XZ_5.0+0xf94>
    8474:	mov	x1, x20
    8478:	mov	x0, x19
    847c:	bl	33a0 <pthread_cond_wait@plt>
    8480:	b	8258 <lzma_vli_encode@@XZ_5.0+0xf94>
    8484:	ldr	x2, [x24, #96]
    8488:	mov	x1, x21
    848c:	add	x0, x24, #0x68
    8490:	bl	6824 <lzma_filter_flags_encode@@XZ_5.0+0x2b4>
    8494:	mov	w19, w0
    8498:	cbnz	w0, 82b8 <lzma_vli_encode@@XZ_5.0+0xff4>
    849c:	mov	w0, #0x2                   	// #2
    84a0:	str	w0, [x24]
    84a4:	ldr	x0, [x24, #96]
    84a8:	bl	3510 <lzma_index_size@plt>
    84ac:	ldr	x1, [x24, #352]
    84b0:	add	x1, x1, #0xc
    84b4:	add	x1, x1, x0
    84b8:	str	x1, [x24, #352]
    84bc:	str	wzr, [sp]
    84c0:	mov	x7, x23
    84c4:	mov	x6, x22
    84c8:	mov	x5, x26
    84cc:	ldr	x0, [x24, #104]
    84d0:	mov	x1, x21
    84d4:	ldr	x9, [x24, #128]
    84d8:	mov	x4, #0x0                   	// #0
    84dc:	mov	x3, #0x0                   	// #0
    84e0:	mov	x2, #0x0                   	// #0
    84e4:	blr	x9
    84e8:	mov	w19, w0
    84ec:	cmp	w0, #0x1
    84f0:	b.ne	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>  // b.any
    84f4:	ldr	x0, [x24, #96]
    84f8:	bl	3510 <lzma_index_size@plt>
    84fc:	str	x0, [x24, #184]
    8500:	add	x1, x24, #0xe8
    8504:	add	x0, x24, #0xb0
    8508:	bl	3210 <lzma_stream_footer_encode@plt>
    850c:	cbnz	w0, 8554 <lzma_vli_encode@@XZ_5.0+0x1290>
    8510:	mov	w0, #0x3                   	// #3
    8514:	str	w0, [x24]
    8518:	mov	x5, x23
    851c:	mov	x4, x22
    8520:	mov	x3, x26
    8524:	add	x1, x24, #0xf8
    8528:	add	x0, x24, #0xe8
    852c:	mov	x2, #0xc                   	// #12
    8530:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    8534:	ldr	x0, [x24, #248]
    8538:	cmp	x0, #0xb
    853c:	cset	w19, hi  // hi = pmore
    8540:	b	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>
    8544:	mov	w19, #0x0                   	// #0
    8548:	b	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>
    854c:	mov	w19, #0x1                   	// #1
    8550:	b	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>
    8554:	mov	w19, #0xb                   	// #11
    8558:	b	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>
    855c:	mov	x0, x20
    8560:	bl	3530 <pthread_mutex_lock@plt>
    8564:	ldr	x0, [x24, #328]
    8568:	cbz	x0, 8578 <lzma_vli_encode@@XZ_5.0+0x12b4>
    856c:	str	x0, [x24, #336]
    8570:	ldr	x0, [x0, #344]
    8574:	str	x0, [x24, #328]
    8578:	mov	x0, x20
    857c:	bl	3550 <pthread_mutex_unlock@plt>
    8580:	ldr	x0, [x24, #336]
    8584:	cbnz	x0, 8340 <lzma_vli_encode@@XZ_5.0+0x107c>
    8588:	ldr	w1, [x24, #320]
    858c:	ldr	w0, [x24, #324]
    8590:	cmp	w0, w1
    8594:	b.eq	8328 <lzma_vli_encode@@XZ_5.0+0x1064>  // b.none
    8598:	mov	w1, #0x1d0                 	// #464
    859c:	umull	x0, w0, w1
    85a0:	str	x0, [sp, #136]
    85a4:	ldr	x0, [x24, #312]
    85a8:	str	x0, [sp, #144]
    85ac:	ldr	x1, [sp, #136]
    85b0:	add	x28, x0, x1
    85b4:	mov	x1, x21
    85b8:	ldr	x0, [x24, #8]
    85bc:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    85c0:	str	x0, [x28, #8]
    85c4:	cbz	x0, 8688 <lzma_vli_encode@@XZ_5.0+0x13c4>
    85c8:	add	x0, x28, #0x160
    85cc:	mov	x1, #0x0                   	// #0
    85d0:	str	x0, [sp, #184]
    85d4:	bl	32a0 <pthread_mutex_init@plt>
    85d8:	cbnz	w0, 867c <lzma_vli_encode@@XZ_5.0+0x13b8>
    85dc:	add	x5, x28, #0x190
    85e0:	str	x5, [sp, #184]
    85e4:	mov	x0, x5
    85e8:	bl	769c <lzma_vli_encode@@XZ_5.0+0x3d8>
    85ec:	cbnz	w0, 8674 <lzma_vli_encode@@XZ_5.0+0x13b0>
    85f0:	ldp	x1, x0, [sp, #136]
    85f4:	str	wzr, [x0, x1]
    85f8:	mov	x0, #0xffffffffffffffff    	// #-1
    85fc:	stp	xzr, x0, [x28, #64]
    8600:	ldr	x0, [sp, #120]
    8604:	stp	x24, x21, [x28, #32]
    8608:	stp	xzr, xzr, [x28, #48]
    860c:	stp	xzr, xzr, [x28, #80]
    8610:	stp	xzr, xzr, [x28, #96]
    8614:	stp	xzr, xzr, [x28, #112]
    8618:	str	xzr, [x28, #128]
    861c:	bl	3170 <sigfillset@plt>
    8620:	ldr	x1, [sp, #120]
    8624:	mov	w0, #0x2                   	// #2
    8628:	ldr	x2, [sp, #152]
    862c:	bl	30c0 <pthread_sigmask@plt>
    8630:	mov	x3, x28
    8634:	mov	x1, #0x0                   	// #0
    8638:	add	x0, x28, #0x1c8
    863c:	adrp	x2, 7000 <lzma_stream_buffer_encode@@XZ_5.0+0x5b4>
    8640:	add	x2, x2, #0x8c0
    8644:	bl	32b0 <pthread_create@plt>
    8648:	ldr	x1, [sp, #152]
    864c:	mov	w4, w0
    8650:	mov	x2, #0x0                   	// #0
    8654:	mov	w0, #0x2                   	// #2
    8658:	str	w4, [sp, #136]
    865c:	bl	30c0 <pthread_sigmask@plt>
    8660:	ldr	w4, [sp, #136]
    8664:	ldr	x5, [sp, #184]
    8668:	cbz	w4, 8330 <lzma_vli_encode@@XZ_5.0+0x106c>
    866c:	mov	x0, x5
    8670:	bl	3520 <pthread_cond_destroy@plt>
    8674:	add	x0, x28, #0x160
    8678:	bl	3410 <pthread_mutex_destroy@plt>
    867c:	ldr	x0, [x28, #8]
    8680:	mov	x1, x21
    8684:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    8688:	mov	w2, #0x5                   	// #5
    868c:	ldr	x0, [x24, #336]
    8690:	cbnz	x0, 82e0 <lzma_vli_encode@@XZ_5.0+0x101c>
    8694:	cbz	w2, 818c <lzma_vli_encode@@XZ_5.0+0xec8>
    8698:	mov	x0, x24
    869c:	mov	w1, #0x0                   	// #0
    86a0:	str	w2, [sp, #112]
    86a4:	bl	7c14 <lzma_vli_encode@@XZ_5.0+0x950>
    86a8:	ldr	w2, [sp, #112]
    86ac:	mov	w19, w2
    86b0:	b	82b8 <lzma_vli_encode@@XZ_5.0+0xff4>

00000000000086b4 <lzma_stream_encoder_mt@@XZ_5.2>:
    86b4:	stp	x29, x30, [sp, #-48]!
    86b8:	mov	x29, sp
    86bc:	stp	x19, x20, [sp, #16]
    86c0:	mov	x20, x0
    86c4:	str	x21, [sp, #32]
    86c8:	mov	x21, x1
    86cc:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    86d0:	mov	w19, w0
    86d4:	cbnz	w0, 86f4 <lzma_stream_encoder_mt@@XZ_5.2+0x40>
    86d8:	ldp	x1, x0, [x20, #48]
    86dc:	mov	x2, x21
    86e0:	bl	7dd0 <lzma_vli_encode@@XZ_5.0+0xb0c>
    86e4:	mov	w19, w0
    86e8:	cbz	w0, 8708 <lzma_stream_encoder_mt@@XZ_5.2+0x54>
    86ec:	mov	x0, x20
    86f0:	bl	3320 <lzma_end@plt>
    86f4:	mov	w0, w19
    86f8:	ldp	x19, x20, [sp, #16]
    86fc:	ldr	x21, [sp, #32]
    8700:	ldp	x29, x30, [sp], #48
    8704:	ret
    8708:	ldr	x0, [x20, #56]
    870c:	mov	w1, #0x1                   	// #1
    8710:	mov	w2, #0x101                 	// #257
    8714:	strb	w1, [x0, #88]
    8718:	strh	w2, [x0, #90]
    871c:	strb	w1, [x0, #92]
    8720:	b	86f4 <lzma_stream_encoder_mt@@XZ_5.2+0x40>

0000000000008724 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    8724:	stp	x29, x30, [sp, #-272]!
    8728:	mov	x29, sp
    872c:	add	x4, sp, #0x48
    8730:	add	x3, sp, #0x40
    8734:	add	x2, sp, #0x38
    8738:	add	x1, sp, #0x50
    873c:	stp	x19, x20, [sp, #16]
    8740:	stp	x21, x22, [sp, #32]
    8744:	mov	x22, x0
    8748:	bl	7cf8 <lzma_vli_encode@@XZ_5.0+0xa34>
    874c:	cbz	w0, 8764 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x40>
    8750:	mov	x0, #0xffffffffffffffff    	// #-1
    8754:	ldp	x19, x20, [sp, #16]
    8758:	ldp	x21, x22, [sp, #32]
    875c:	ldp	x29, x30, [sp], #272
    8760:	ret
    8764:	ldr	x0, [sp, #56]
    8768:	bl	3220 <lzma_raw_encoder_memusage@plt>
    876c:	mov	x21, x0
    8770:	cmn	x0, #0x1
    8774:	b.eq	8750 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2c>  // b.none
    8778:	ldp	x20, x0, [sp, #64]
    877c:	ldr	w19, [x22, #4]
    8780:	mov	w1, w19
    8784:	bl	7380 <lzma_vli_encode@@XZ_5.0+0xbc>
    8788:	cmn	x0, #0x1
    878c:	b.eq	8750 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2c>  // b.none
    8790:	ldr	w2, [x22, #4]
    8794:	mov	x3, #0x81d0                	// #33232
    8798:	mov	w19, w19
    879c:	mov	w4, #0x1d0                 	// #464
    87a0:	umaddl	x2, w2, w4, x3
    87a4:	mul	x1, x19, x20
    87a8:	mvn	x3, x2
    87ac:	cmp	x3, x1
    87b0:	b.cc	8750 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2c>  // b.lo, b.ul, b.last
    87b4:	mul	x19, x19, x21
    87b8:	add	x1, x1, x2
    87bc:	mvn	x2, x1
    87c0:	cmp	x2, x19
    87c4:	b.cc	8750 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2c>  // b.lo, b.ul, b.last
    87c8:	add	x19, x19, x1
    87cc:	mvn	x1, x19
    87d0:	cmp	x1, x0
    87d4:	b.cc	8750 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2c>  // b.lo, b.ul, b.last
    87d8:	add	x0, x0, x19
    87dc:	b	8754 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x30>
    87e0:	ldr	x4, [x0, #104]
    87e4:	str	x4, [x1]
    87e8:	ldr	x1, [x0, #96]
    87ec:	str	x1, [x2]
    87f0:	cbz	x3, 8804 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe0>
    87f4:	ldr	x1, [x0, #104]
    87f8:	cmp	x1, x3
    87fc:	b.hi	880c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe8>  // b.pmore
    8800:	str	x3, [x0, #96]
    8804:	mov	w0, #0x0                   	// #0
    8808:	ret
    880c:	mov	w0, #0x6                   	// #6
    8810:	b	8808 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe4>
    8814:	stp	x29, x30, [sp, #-64]!
    8818:	mov	x29, sp
    881c:	stp	x19, x20, [sp, #16]
    8820:	mov	x20, x2
    8824:	mov	x19, x0
    8828:	ldr	x2, [x0, #16]
    882c:	stp	x21, x22, [sp, #32]
    8830:	adrp	x21, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8834:	str	x23, [sp, #48]
    8838:	add	x21, x21, #0x814
    883c:	and	w22, w3, #0xff
    8840:	cmp	x2, x21
    8844:	mov	x23, x1
    8848:	b.eq	8850 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12c>  // b.none
    884c:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    8850:	ldr	x0, [x19]
    8854:	str	x21, [x19, #16]
    8858:	cbnz	x0, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x18c>
    885c:	mov	x1, x23
    8860:	mov	x0, #0xe0                  	// #224
    8864:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    8868:	cbz	x0, 88f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1cc>
    886c:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8870:	add	x1, x1, #0x924
    8874:	str	x1, [x19, #24]
    8878:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    887c:	add	x1, x1, #0x8f8
    8880:	str	x1, [x19, #32]
    8884:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8888:	add	x1, x1, #0x7e0
    888c:	str	xzr, [x0]
    8890:	str	x0, [x19]
    8894:	stp	xzr, xzr, [x0, #16]
    8898:	stp	xzr, xzr, [x0, #32]
    889c:	stp	xzr, xzr, [x0, #48]
    88a0:	str	x1, [x19, #56]
    88a4:	mov	x1, #0xffffffffffffffff    	// #-1
    88a8:	str	x1, [x0, #8]
    88ac:	str	xzr, [x0, #64]
    88b0:	cmp	x20, #0x0
    88b4:	mov	x1, #0x8000                	// #32768
    88b8:	csinc	x20, x20, xzr, ne  // ne = any
    88bc:	str	wzr, [x0, #72]
    88c0:	strb	w22, [x0, #76]
    88c4:	stp	xzr, xzr, [x0, #80]
    88c8:	stp	x20, x1, [x0, #96]
    88cc:	str	wzr, [x0, #112]
    88d0:	str	xzr, [x0, #120]
    88d4:	str	wzr, [x0, #128]
    88d8:	mov	w0, #0x0                   	// #0
    88dc:	ldp	x19, x20, [sp, #16]
    88e0:	ldp	x21, x22, [sp, #32]
    88e4:	ldr	x23, [sp, #48]
    88e8:	ldp	x29, x30, [sp], #64
    88ec:	ret
    88f0:	mov	w0, #0x5                   	// #5
    88f4:	b	88dc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1b8>
    88f8:	stp	x29, x30, [sp, #-32]!
    88fc:	mov	x29, sp
    8900:	stp	x19, x20, [sp, #16]
    8904:	mov	x19, x0
    8908:	mov	x20, x1
    890c:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    8910:	mov	x1, x20
    8914:	mov	x0, x19
    8918:	ldp	x19, x20, [sp, #16]
    891c:	ldp	x29, x30, [sp], #32
    8920:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    8924:	sub	sp, sp, #0xb0
    8928:	stp	x29, x30, [sp, #16]
    892c:	add	x29, sp, #0x10
    8930:	stp	x27, x28, [sp, #96]
    8934:	adrp	x27, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    8938:	add	x28, sp, #0x80
    893c:	ldr	x27, [x27, #3944]
    8940:	stp	x19, x20, [sp, #32]
    8944:	mov	x19, x0
    8948:	mov	x20, x2
    894c:	stp	x21, x22, [sp, #48]
    8950:	mov	x22, x1
    8954:	mov	x21, x4
    8958:	stp	x23, x24, [sp, #64]
    895c:	mov	x23, x6
    8960:	mov	x24, x7
    8964:	stp	x25, x26, [sp, #80]
    8968:	adrp	x26, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    896c:	mov	x25, x3
    8970:	add	x26, x26, #0x77c
    8974:	str	x5, [sp, #120]
    8978:	ldr	x0, [x23]
    897c:	cmp	x0, x24
    8980:	b.cs	899c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x278>  // b.hs, b.nlast
    8984:	ldr	w0, [x19, #72]
    8988:	cmp	w0, #0x4
    898c:	b.eq	8b44 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x420>  // b.none
    8990:	ldr	x1, [x25]
    8994:	cmp	x1, x21
    8998:	b.cc	89a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x280>  // b.lo, b.ul, b.last
    899c:	mov	w0, #0x0                   	// #0
    89a0:	b	89d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    89a4:	cmp	w0, #0x3
    89a8:	b.hi	8b78 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x454>  // b.pmore
    89ac:	ldrb	w0, [x26, w0, uxtw]
    89b0:	adr	x2, 89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x298>
    89b4:	add	x0, x2, w0, sxtb #2
    89b8:	br	x0
    89bc:	ldrb	w1, [x20, x1]
    89c0:	add	x0, x19, #0x70
    89c4:	bl	13a74 <lzma_mode_is_supported@@XZ_5.0+0x4930>
    89c8:	tst	w0, #0xff
    89cc:	b.eq	89f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d0>  // b.none
    89d0:	mov	w0, #0x7                   	// #7
    89d4:	ldp	x29, x30, [sp, #16]
    89d8:	ldp	x19, x20, [sp, #32]
    89dc:	ldp	x21, x22, [sp, #48]
    89e0:	ldp	x23, x24, [sp, #64]
    89e4:	ldp	x25, x26, [sp, #80]
    89e8:	ldp	x27, x28, [sp, #96]
    89ec:	add	sp, sp, #0xb0
    89f0:	ret
    89f4:	mov	w0, #0x1                   	// #1
    89f8:	str	w0, [x19, #72]
    89fc:	ldr	x0, [x25]
    8a00:	add	x0, x0, #0x1
    8a04:	str	x0, [x25]
    8a08:	b	8978 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x254>
    8a0c:	ldr	x0, [x19, #80]
    8a10:	ldrb	w2, [x20, x1]
    8a14:	lsl	w4, w0, #3
    8a18:	add	x0, x0, #0x1
    8a1c:	str	x0, [x19, #80]
    8a20:	cmp	x0, #0x4
    8a24:	lsl	x4, x2, x4
    8a28:	ldr	w2, [x19, #112]
    8a2c:	orr	w2, w2, w4
    8a30:	str	w2, [x19, #112]
    8a34:	b.ne	8a78 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x354>  // b.any
    8a38:	ldrb	w0, [x19, #76]
    8a3c:	cbz	w0, 8a6c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x348>
    8a40:	cmn	w2, #0x1
    8a44:	b.eq	8a6c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x348>  // b.none
    8a48:	sub	w0, w2, #0x1
    8a4c:	orr	w0, w0, w0, lsr #2
    8a50:	orr	w0, w0, w0, lsr #3
    8a54:	orr	w0, w0, w0, lsr #4
    8a58:	orr	w0, w0, w0, lsr #8
    8a5c:	orr	w0, w0, w0, lsr #16
    8a60:	add	w0, w0, #0x1
    8a64:	cmp	w2, w0
    8a68:	b.ne	89d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2ac>  // b.any
    8a6c:	mov	w0, #0x2                   	// #2
    8a70:	str	w0, [x19, #72]
    8a74:	str	xzr, [x19, #80]
    8a78:	add	x1, x1, #0x1
    8a7c:	str	x1, [x25]
    8a80:	b	8978 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x254>
    8a84:	ldr	x2, [x19, #80]
    8a88:	ldrb	w0, [x20, x1]
    8a8c:	add	x1, x1, #0x1
    8a90:	str	x1, [x25]
    8a94:	add	x1, x2, #0x1
    8a98:	lsl	w4, w2, #3
    8a9c:	str	x1, [x19, #80]
    8aa0:	cmp	x1, #0x7
    8aa4:	lsl	x0, x0, x4
    8aa8:	ldr	x4, [x19, #88]
    8aac:	orr	x0, x0, x4
    8ab0:	str	x0, [x19, #88]
    8ab4:	b.ls	8978 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x254>  // b.plast
    8ab8:	ldrb	w1, [x19, #76]
    8abc:	cbz	w1, 8ad4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3b0>
    8ac0:	mov	x1, #0xffffffc000000000    	// #-274877906944
    8ac4:	add	x0, x0, x1
    8ac8:	mov	x1, #0xffffffbfffffffff    	// #-274877906945
    8acc:	cmp	x0, x1
    8ad0:	b.cc	89d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2ac>  // b.lo, b.ul, b.last
    8ad4:	add	x0, x19, #0x70
    8ad8:	bl	13ae0 <lzma_mode_is_supported@@XZ_5.0+0x499c>
    8adc:	add	x0, x0, #0x8, lsl #12
    8ae0:	str	xzr, [x19, #80]
    8ae4:	str	x0, [x19, #104]
    8ae8:	mov	w0, #0x3                   	// #3
    8aec:	str	w0, [x19, #72]
    8af0:	ldp	x0, x1, [x19, #96]
    8af4:	cmp	x1, x0
    8af8:	b.hi	8b3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x418>  // b.pmore
    8afc:	add	x0, x19, #0x70
    8b00:	stp	xzr, xzr, [sp, #128]
    8b04:	mov	x2, x28
    8b08:	stp	xzr, xzr, [sp, #144]
    8b0c:	mov	x1, x22
    8b10:	stp	x27, x0, [sp, #136]
    8b14:	mov	x0, x19
    8b18:	stp	xzr, xzr, [sp, #160]
    8b1c:	bl	389c <lzma_version_string@@XZ_5.0+0x1cc>
    8b20:	cbnz	w0, 89d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    8b24:	ldr	x0, [x19]
    8b28:	ldr	x1, [x19, #88]
    8b2c:	bl	ded4 <lzma_mf_is_supported@@XZ_5.0+0x1518>
    8b30:	mov	w0, #0x4                   	// #4
    8b34:	str	w0, [x19, #72]
    8b38:	b	8978 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x254>
    8b3c:	mov	w0, #0x6                   	// #6
    8b40:	b	89d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    8b44:	ldr	w0, [sp, #176]
    8b48:	mov	x7, x24
    8b4c:	ldr	x8, [x19, #24]
    8b50:	str	w0, [sp]
    8b54:	ldr	x5, [sp, #120]
    8b58:	mov	x6, x23
    8b5c:	ldr	x0, [x19]
    8b60:	mov	x4, x21
    8b64:	mov	x3, x25
    8b68:	mov	x2, x20
    8b6c:	mov	x1, x22
    8b70:	blr	x8
    8b74:	b	89d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    8b78:	mov	w0, #0xb                   	// #11
    8b7c:	b	89d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>

0000000000008b80 <lzma_alone_decoder@@XZ_5.0>:
    8b80:	stp	x29, x30, [sp, #-48]!
    8b84:	mov	x29, sp
    8b88:	stp	x19, x20, [sp, #16]
    8b8c:	mov	x20, x0
    8b90:	str	x21, [sp, #32]
    8b94:	mov	x21, x1
    8b98:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    8b9c:	mov	w19, w0
    8ba0:	cbnz	w0, 8bc4 <lzma_alone_decoder@@XZ_5.0+0x44>
    8ba4:	ldp	x1, x0, [x20, #48]
    8ba8:	mov	x2, x21
    8bac:	mov	w3, #0x0                   	// #0
    8bb0:	bl	8814 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>
    8bb4:	mov	w19, w0
    8bb8:	cbz	w0, 8bd8 <lzma_alone_decoder@@XZ_5.0+0x58>
    8bbc:	mov	x0, x20
    8bc0:	bl	3320 <lzma_end@plt>
    8bc4:	mov	w0, w19
    8bc8:	ldp	x19, x20, [sp, #16]
    8bcc:	ldr	x21, [sp, #32]
    8bd0:	ldp	x29, x30, [sp], #48
    8bd4:	ret
    8bd8:	ldr	x0, [x20, #56]
    8bdc:	mov	w1, #0x1                   	// #1
    8be0:	strb	w1, [x0, #88]
    8be4:	strb	w1, [x0, #91]
    8be8:	b	8bc4 <lzma_alone_decoder@@XZ_5.0+0x44>
    8bec:	ldr	x1, [x0, #48]
    8bf0:	cbz	x1, 8c00 <lzma_alone_decoder@@XZ_5.0+0x80>
    8bf4:	ldr	x0, [x0]
    8bf8:	mov	x16, x1
    8bfc:	br	x16
    8c00:	mov	w0, #0x0                   	// #0
    8c04:	ret
    8c08:	stp	x29, x30, [sp, #-32]!
    8c0c:	mov	x29, sp
    8c10:	ldr	x5, [x0, #56]
    8c14:	stp	x19, x20, [sp, #16]
    8c18:	mov	x19, x0
    8c1c:	mov	x20, x3
    8c20:	cbz	x5, 8c48 <lzma_alone_decoder@@XZ_5.0+0xc8>
    8c24:	ldr	x0, [x0]
    8c28:	blr	x5
    8c2c:	cmp	w0, #0x0
    8c30:	ccmp	x20, #0x0, #0x4, eq  // eq = none
    8c34:	b.eq	8c3c <lzma_alone_decoder@@XZ_5.0+0xbc>  // b.none
    8c38:	str	x20, [x19, #72]
    8c3c:	ldp	x19, x20, [sp, #16]
    8c40:	ldp	x29, x30, [sp], #32
    8c44:	ret
    8c48:	mov	x0, x1
    8c4c:	mov	x1, #0x8000                	// #32768
    8c50:	str	x1, [x0]
    8c54:	ldr	x1, [x19, #72]
    8c58:	str	x1, [x2]
    8c5c:	cbz	x3, 8c74 <lzma_alone_decoder@@XZ_5.0+0xf4>
    8c60:	ldr	x0, [x0]
    8c64:	mov	w1, #0x6                   	// #6
    8c68:	cmp	x0, x3
    8c6c:	csel	w0, w1, wzr, hi  // hi = pmore
    8c70:	b	8c2c <lzma_alone_decoder@@XZ_5.0+0xac>
    8c74:	mov	w0, #0x0                   	// #0
    8c78:	b	8c2c <lzma_alone_decoder@@XZ_5.0+0xac>
    8c7c:	stp	x29, x30, [sp, #-64]!
    8c80:	mov	x29, sp
    8c84:	stp	x19, x20, [sp, #16]
    8c88:	mov	x20, x2
    8c8c:	mov	x19, x0
    8c90:	ldr	x2, [x0, #16]
    8c94:	stp	x21, x22, [sp, #32]
    8c98:	adrp	x22, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8c9c:	str	x23, [sp, #48]
    8ca0:	add	x22, x22, #0xc7c
    8ca4:	mov	w21, w3
    8ca8:	cmp	x2, x22
    8cac:	mov	x23, x1
    8cb0:	b.eq	8cb8 <lzma_alone_decoder@@XZ_5.0+0x138>  // b.none
    8cb4:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    8cb8:	str	x22, [x19, #16]
    8cbc:	ands	w22, w21, #0xffffffe0
    8cc0:	b.ne	8d54 <lzma_alone_decoder@@XZ_5.0+0x1d4>  // b.any
    8cc4:	ldr	x0, [x19]
    8cc8:	cbnz	x0, 8d2c <lzma_alone_decoder@@XZ_5.0+0x1ac>
    8ccc:	mov	x1, x23
    8cd0:	mov	x0, #0x58                  	// #88
    8cd4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    8cd8:	cbz	x0, 8d5c <lzma_alone_decoder@@XZ_5.0+0x1dc>
    8cdc:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8ce0:	add	x1, x1, #0xd90
    8ce4:	str	x1, [x19, #24]
    8ce8:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8cec:	add	x1, x1, #0xd64
    8cf0:	str	x1, [x19, #32]
    8cf4:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8cf8:	add	x1, x1, #0xbec
    8cfc:	str	x1, [x19, #48]
    8d00:	adrp	x1, 8000 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8d04:	add	x1, x1, #0xc08
    8d08:	str	xzr, [x0]
    8d0c:	str	x0, [x19]
    8d10:	stp	xzr, xzr, [x0, #16]
    8d14:	stp	xzr, xzr, [x0, #32]
    8d18:	stp	xzr, xzr, [x0, #48]
    8d1c:	str	x1, [x19, #56]
    8d20:	mov	x1, #0xffffffffffffffff    	// #-1
    8d24:	str	x1, [x0, #8]
    8d28:	str	xzr, [x0, #64]
    8d2c:	cmp	x20, #0x0
    8d30:	stp	w21, wzr, [x0, #80]
    8d34:	csinc	x20, x20, xzr, ne  // ne = any
    8d38:	str	x20, [x0, #72]
    8d3c:	mov	w0, w22
    8d40:	ldp	x19, x20, [sp, #16]
    8d44:	ldp	x21, x22, [sp, #32]
    8d48:	ldr	x23, [sp, #48]
    8d4c:	ldp	x29, x30, [sp], #64
    8d50:	ret
    8d54:	mov	w22, #0x8                   	// #8
    8d58:	b	8d3c <lzma_alone_decoder@@XZ_5.0+0x1bc>
    8d5c:	mov	w22, #0x5                   	// #5
    8d60:	b	8d3c <lzma_alone_decoder@@XZ_5.0+0x1bc>
    8d64:	stp	x29, x30, [sp, #-32]!
    8d68:	mov	x29, sp
    8d6c:	stp	x19, x20, [sp, #16]
    8d70:	mov	x19, x0
    8d74:	mov	x20, x1
    8d78:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    8d7c:	mov	x1, x20
    8d80:	mov	x0, x19
    8d84:	ldp	x19, x20, [sp, #16]
    8d88:	ldp	x29, x30, [sp], #32
    8d8c:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    8d90:	sub	sp, sp, #0x70
    8d94:	stp	x29, x30, [sp, #16]
    8d98:	add	x29, sp, #0x10
    8d9c:	ldr	w8, [x0, #84]
    8da0:	stp	x19, x20, [sp, #32]
    8da4:	mov	x20, x3
    8da8:	mov	x19, x4
    8dac:	stp	x21, x22, [sp, #48]
    8db0:	cmp	w8, #0x1
    8db4:	mov	x22, x1
    8db8:	stp	x23, x24, [sp, #64]
    8dbc:	mov	x21, x2
    8dc0:	mov	x23, x5
    8dc4:	stp	x25, x26, [sp, #80]
    8dc8:	mov	x24, x6
    8dcc:	ldr	w25, [sp, #112]
    8dd0:	str	x27, [sp, #96]
    8dd4:	mov	x26, x7
    8dd8:	mov	x27, x0
    8ddc:	b.eq	8e5c <lzma_alone_decoder@@XZ_5.0+0x2dc>  // b.none
    8de0:	cmp	w8, #0x2
    8de4:	b.eq	8ea4 <lzma_alone_decoder@@XZ_5.0+0x324>  // b.none
    8de8:	cbnz	w8, 8ebc <lzma_alone_decoder@@XZ_5.0+0x33c>
    8dec:	ldr	x4, [x3]
    8df0:	cmp	x4, x19
    8df4:	b.cs	8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>  // b.hs, b.nlast
    8df8:	ldrb	w4, [x2, x4]
    8dfc:	mov	w3, #0x1                   	// #1
    8e00:	str	w3, [x0, #84]
    8e04:	cmp	w4, #0xfd
    8e08:	ldr	x2, [x0, #72]
    8e0c:	b.ne	8e44 <lzma_alone_decoder@@XZ_5.0+0x2c4>  // b.any
    8e10:	ldr	w3, [x0, #80]
    8e14:	bl	ab3c <lzma_stream_buffer_decode@@XZ_5.0+0x5f8>
    8e18:	mov	w8, w0
    8e1c:	cbz	w0, 8e5c <lzma_alone_decoder@@XZ_5.0+0x2dc>
    8e20:	mov	w0, w8
    8e24:	ldp	x29, x30, [sp, #16]
    8e28:	ldp	x19, x20, [sp, #32]
    8e2c:	ldp	x21, x22, [sp, #48]
    8e30:	ldp	x23, x24, [sp, #64]
    8e34:	ldp	x25, x26, [sp, #80]
    8e38:	ldr	x27, [sp, #96]
    8e3c:	add	sp, sp, #0x70
    8e40:	ret
    8e44:	bl	8814 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf0>
    8e48:	mov	w8, w0
    8e4c:	cbnz	w0, 8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>
    8e50:	ldr	w0, [x27, #80]
    8e54:	tbnz	w0, #0, 8ec4 <lzma_alone_decoder@@XZ_5.0+0x344>
    8e58:	tbnz	w0, #2, 8ecc <lzma_alone_decoder@@XZ_5.0+0x34c>
    8e5c:	ldr	x0, [x27]
    8e60:	mov	x7, x26
    8e64:	ldr	x8, [x27, #24]
    8e68:	str	w25, [sp]
    8e6c:	mov	x6, x24
    8e70:	mov	x5, x23
    8e74:	mov	x4, x19
    8e78:	mov	x3, x20
    8e7c:	mov	x2, x21
    8e80:	mov	x1, x22
    8e84:	blr	x8
    8e88:	mov	w8, w0
    8e8c:	cmp	w0, #0x1
    8e90:	b.ne	8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>  // b.any
    8e94:	ldr	w0, [x27, #80]
    8e98:	tbz	w0, #3, 8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>
    8e9c:	mov	w0, #0x2                   	// #2
    8ea0:	str	w0, [x27, #84]
    8ea4:	ldr	x0, [x20]
    8ea8:	cmp	x0, x19
    8eac:	b.cc	8ed4 <lzma_alone_decoder@@XZ_5.0+0x354>  // b.lo, b.ul, b.last
    8eb0:	cmp	w25, #0x3
    8eb4:	cset	w8, eq  // eq = none
    8eb8:	b	8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>
    8ebc:	mov	w8, #0xb                   	// #11
    8ec0:	b	8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>
    8ec4:	mov	w8, #0x2                   	// #2
    8ec8:	b	8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>
    8ecc:	mov	w8, #0x4                   	// #4
    8ed0:	b	8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>
    8ed4:	mov	w8, #0x9                   	// #9
    8ed8:	b	8e20 <lzma_alone_decoder@@XZ_5.0+0x2a0>

0000000000008edc <lzma_auto_decoder@@XZ_5.0>:
    8edc:	stp	x29, x30, [sp, #-48]!
    8ee0:	mov	x29, sp
    8ee4:	stp	x19, x20, [sp, #16]
    8ee8:	mov	x20, x0
    8eec:	stp	x21, x22, [sp, #32]
    8ef0:	mov	x21, x1
    8ef4:	mov	w22, w2
    8ef8:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    8efc:	mov	w19, w0
    8f00:	cbnz	w0, 8f24 <lzma_auto_decoder@@XZ_5.0+0x48>
    8f04:	ldp	x1, x0, [x20, #48]
    8f08:	mov	w3, w22
    8f0c:	mov	x2, x21
    8f10:	bl	8c7c <lzma_alone_decoder@@XZ_5.0+0xfc>
    8f14:	mov	w19, w0
    8f18:	cbz	w0, 8f38 <lzma_auto_decoder@@XZ_5.0+0x5c>
    8f1c:	mov	x0, x20
    8f20:	bl	3320 <lzma_end@plt>
    8f24:	mov	w0, w19
    8f28:	ldp	x19, x20, [sp, #16]
    8f2c:	ldp	x21, x22, [sp, #32]
    8f30:	ldp	x29, x30, [sp], #48
    8f34:	ret
    8f38:	ldr	x0, [x20, #56]
    8f3c:	mov	w1, #0x1                   	// #1
    8f40:	strb	w1, [x0, #88]
    8f44:	strb	w1, [x0, #91]
    8f48:	b	8f24 <lzma_auto_decoder@@XZ_5.0+0x48>

0000000000008f4c <lzma_block_buffer_decode@@XZ_5.0>:
    8f4c:	sub	sp, sp, #0xd0
    8f50:	stp	x29, x30, [sp, #16]
    8f54:	add	x29, sp, #0x10
    8f58:	stp	x19, x20, [sp, #32]
    8f5c:	stp	x21, x22, [sp, #48]
    8f60:	stp	x23, x24, [sp, #64]
    8f64:	stp	x25, x26, [sp, #80]
    8f68:	stp	x27, x28, [sp, #96]
    8f6c:	cbz	x3, 8f9c <lzma_block_buffer_decode@@XZ_5.0+0x50>
    8f70:	mov	x23, x1
    8f74:	mov	x25, x2
    8f78:	ldr	x1, [x3]
    8f7c:	mov	x20, x3
    8f80:	mov	x22, x4
    8f84:	mov	x26, x5
    8f88:	mov	x21, x6
    8f8c:	mov	x24, x7
    8f90:	cmp	x4, x1
    8f94:	cbnz	x2, 8fa4 <lzma_block_buffer_decode@@XZ_5.0+0x58>
    8f98:	b.eq	8fa8 <lzma_block_buffer_decode@@XZ_5.0+0x5c>  // b.none
    8f9c:	mov	w19, #0xb                   	// #11
    8fa0:	b	9064 <lzma_block_buffer_decode@@XZ_5.0+0x118>
    8fa4:	b.cc	8f9c <lzma_block_buffer_decode@@XZ_5.0+0x50>  // b.lo, b.ul, b.last
    8fa8:	cbz	x21, 8f9c <lzma_block_buffer_decode@@XZ_5.0+0x50>
    8fac:	ldr	x1, [x21]
    8fb0:	cmp	x24, x1
    8fb4:	cbnz	x26, 9088 <lzma_block_buffer_decode@@XZ_5.0+0x13c>
    8fb8:	b.ne	8f9c <lzma_block_buffer_decode@@XZ_5.0+0x50>  // b.any
    8fbc:	mov	x1, #0xffffffffffffffff    	// #-1
    8fc0:	add	x27, sp, #0x88
    8fc4:	mov	x2, x0
    8fc8:	mov	x0, x27
    8fcc:	stp	xzr, x1, [sp, #136]
    8fd0:	mov	x1, x23
    8fd4:	stp	xzr, xzr, [sp, #152]
    8fd8:	stp	xzr, xzr, [sp, #168]
    8fdc:	stp	xzr, xzr, [sp, #184]
    8fe0:	str	xzr, [sp, #200]
    8fe4:	bl	90c0 <lzma_block_buffer_decode@@XZ_5.0+0x174>
    8fe8:	mov	w19, w0
    8fec:	cbnz	w0, 9058 <lzma_block_buffer_decode@@XZ_5.0+0x10c>
    8ff0:	mov	w0, #0x3                   	// #3
    8ff4:	mov	x7, x24
    8ff8:	ldr	x8, [x20]
    8ffc:	mov	x6, x21
    9000:	ldr	x28, [x21]
    9004:	str	w0, [sp]
    9008:	ldr	x0, [sp, #136]
    900c:	mov	x5, x26
    9010:	ldr	x9, [sp, #160]
    9014:	mov	x4, x22
    9018:	mov	x3, x20
    901c:	mov	x2, x25
    9020:	mov	x1, x23
    9024:	str	x8, [sp, #120]
    9028:	blr	x9
    902c:	cmp	w0, #0x1
    9030:	b.eq	9058 <lzma_block_buffer_decode@@XZ_5.0+0x10c>  // b.none
    9034:	ldr	x8, [sp, #120]
    9038:	cbnz	w0, 904c <lzma_block_buffer_decode@@XZ_5.0+0x100>
    903c:	ldr	x0, [x20]
    9040:	cmp	x0, x22
    9044:	cset	w0, ne  // ne = any
    9048:	add	w0, w0, #0x9
    904c:	mov	w19, w0
    9050:	str	x8, [x20]
    9054:	str	x28, [x21]
    9058:	mov	x1, x23
    905c:	mov	x0, x27
    9060:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    9064:	mov	w0, w19
    9068:	ldp	x29, x30, [sp, #16]
    906c:	ldp	x19, x20, [sp, #32]
    9070:	ldp	x21, x22, [sp, #48]
    9074:	ldp	x23, x24, [sp, #64]
    9078:	ldp	x25, x26, [sp, #80]
    907c:	ldp	x27, x28, [sp, #96]
    9080:	add	sp, sp, #0xd0
    9084:	ret
    9088:	b.cs	8fbc <lzma_block_buffer_decode@@XZ_5.0+0x70>  // b.hs, b.nlast
    908c:	b	8f9c <lzma_block_buffer_decode@@XZ_5.0+0x50>
    9090:	stp	x29, x30, [sp, #-32]!
    9094:	mov	x29, sp
    9098:	stp	x19, x20, [sp, #16]
    909c:	mov	x19, x0
    90a0:	mov	x20, x1
    90a4:	add	x0, x0, #0x8
    90a8:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    90ac:	mov	x1, x20
    90b0:	mov	x0, x19
    90b4:	ldp	x19, x20, [sp, #16]
    90b8:	ldp	x29, x30, [sp], #32
    90bc:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    90c0:	stp	x29, x30, [sp, #-48]!
    90c4:	mov	x29, sp
    90c8:	stp	x19, x20, [sp, #16]
    90cc:	mov	x20, x2
    90d0:	adrp	x19, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    90d4:	ldr	x2, [x0, #16]
    90d8:	stp	x21, x22, [sp, #32]
    90dc:	add	x19, x19, #0xc0
    90e0:	mov	x21, x0
    90e4:	mov	x22, x1
    90e8:	cmp	x2, x19
    90ec:	b.eq	90f4 <lzma_block_buffer_decode@@XZ_5.0+0x1a8>  // b.none
    90f0:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    90f4:	str	x19, [x21, #16]
    90f8:	mov	x0, x20
    90fc:	bl	3190 <lzma_block_unpadded_size@plt>
    9100:	cbz	x0, 91f0 <lzma_block_buffer_decode@@XZ_5.0+0x2a4>
    9104:	ldr	x0, [x20, #24]
    9108:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    910c:	add	x0, x0, x1
    9110:	mov	x1, #0x7ffffffffffffffe    	// #9223372036854775806
    9114:	cmp	x0, x1
    9118:	b.ls	91f0 <lzma_block_buffer_decode@@XZ_5.0+0x2a4>  // b.plast
    911c:	ldr	x19, [x21]
    9120:	cbnz	x19, 9170 <lzma_block_buffer_decode@@XZ_5.0+0x224>
    9124:	mov	x1, x22
    9128:	mov	x0, #0xe8                  	// #232
    912c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    9130:	mov	x19, x0
    9134:	cbz	x0, 9204 <lzma_block_buffer_decode@@XZ_5.0+0x2b8>
    9138:	adrp	x0, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    913c:	add	x0, x0, #0x20c
    9140:	str	x0, [x21, #24]
    9144:	adrp	x0, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    9148:	add	x0, x0, #0x90
    914c:	str	x19, [x21]
    9150:	str	xzr, [x19, #8]
    9154:	stp	xzr, xzr, [x19, #24]
    9158:	str	x0, [x21, #32]
    915c:	mov	x0, #0xffffffffffffffff    	// #-1
    9160:	str	x0, [x19, #16]
    9164:	stp	xzr, xzr, [x19, #40]
    9168:	stp	xzr, xzr, [x19, #56]
    916c:	str	xzr, [x19, #72]
    9170:	ldr	x0, [x20, #16]
    9174:	ldr	w21, [x20, #8]
    9178:	str	wzr, [x19]
    917c:	cmn	x0, #0x1
    9180:	stp	x20, xzr, [x19, #80]
    9184:	str	xzr, [x19, #96]
    9188:	b.ne	91a4 <lzma_block_buffer_decode@@XZ_5.0+0x258>  // b.any
    918c:	mov	w0, w21
    9190:	bl	3270 <lzma_check_size@plt>
    9194:	ldr	w1, [x20, #4]
    9198:	mov	x2, #0x7ffffffffffffffc    	// #9223372036854775804
    919c:	sub	x2, x2, x1
    91a0:	sub	x0, x2, w0, uxtw
    91a4:	stp	x0, xzr, [x19, #104]
    91a8:	mov	w1, w21
    91ac:	add	x0, x19, #0x78
    91b0:	bl	afa0 <lzma_check_size@@XZ_5.0+0x24>
    91b4:	ldr	w0, [x20]
    91b8:	cbz	w0, 91e8 <lzma_block_buffer_decode@@XZ_5.0+0x29c>
    91bc:	ldrb	w0, [x20, #200]
    91c0:	cmp	w0, #0x0
    91c4:	cset	w0, ne  // ne = any
    91c8:	strb	w0, [x19, #224]
    91cc:	mov	x1, x22
    91d0:	add	x0, x19, #0x8
    91d4:	ldp	x21, x22, [sp, #32]
    91d8:	ldr	x2, [x20, #32]
    91dc:	ldp	x19, x20, [sp, #16]
    91e0:	ldp	x29, x30, [sp], #48
    91e4:	b	98f4 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    91e8:	mov	w0, #0x0                   	// #0
    91ec:	b	91c8 <lzma_block_buffer_decode@@XZ_5.0+0x27c>
    91f0:	mov	w0, #0xb                   	// #11
    91f4:	ldp	x19, x20, [sp, #16]
    91f8:	ldp	x21, x22, [sp, #32]
    91fc:	ldp	x29, x30, [sp], #48
    9200:	ret
    9204:	mov	w0, #0x5                   	// #5
    9208:	b	91f4 <lzma_block_buffer_decode@@XZ_5.0+0x2a8>
    920c:	sub	sp, sp, #0x70
    9210:	stp	x29, x30, [sp, #16]
    9214:	add	x29, sp, #0x10
    9218:	stp	x19, x20, [sp, #32]
    921c:	mov	x19, x0
    9220:	ldr	w0, [x0]
    9224:	stp	x21, x22, [sp, #48]
    9228:	mov	x22, x2
    922c:	mov	x21, x3
    9230:	stp	x23, x24, [sp, #64]
    9234:	cmp	w0, #0x1
    9238:	mov	x23, x4
    923c:	stp	x25, x26, [sp, #80]
    9240:	str	x27, [sp, #96]
    9244:	b.eq	933c <lzma_block_buffer_decode@@XZ_5.0+0x3f0>  // b.none
    9248:	cmp	w0, #0x2
    924c:	b.eq	93c8 <lzma_block_buffer_decode@@XZ_5.0+0x47c>  // b.none
    9250:	cbnz	w0, 9434 <lzma_block_buffer_decode@@XZ_5.0+0x4e8>
    9254:	ldr	w0, [sp, #112]
    9258:	mov	x25, x5
    925c:	ldr	x27, [x3]
    9260:	mov	x24, x6
    9264:	ldr	x8, [x19, #32]
    9268:	str	w0, [sp]
    926c:	ldr	x26, [x6]
    9270:	ldr	x0, [x19, #8]
    9274:	blr	x8
    9278:	mov	w20, w0
    927c:	ldr	x0, [x19, #104]
    9280:	mov	x5, #0x7fffffffffffffff    	// #9223372036854775807
    9284:	ldr	x2, [x19, #88]
    9288:	cmp	x0, #0x0
    928c:	csel	x0, x0, x5, ge  // ge = tcont
    9290:	cmp	x2, x0
    9294:	b.hi	93a8 <lzma_block_buffer_decode@@XZ_5.0+0x45c>  // b.pmore
    9298:	ldr	x1, [x21]
    929c:	sub	x0, x0, x2
    92a0:	sub	x1, x1, x27
    92a4:	cmp	x1, x0
    92a8:	b.hi	93a8 <lzma_block_buffer_decode@@XZ_5.0+0x45c>  // b.pmore
    92ac:	ldr	x4, [x19, #80]
    92b0:	add	x1, x1, x2
    92b4:	str	x1, [x19, #88]
    92b8:	ldr	x1, [x19, #96]
    92bc:	ldr	x0, [x4, #24]
    92c0:	ldr	x3, [x24]
    92c4:	cmp	x0, #0x0
    92c8:	csel	x0, x0, x5, ge  // ge = tcont
    92cc:	cmp	x1, x0
    92d0:	b.hi	93a8 <lzma_block_buffer_decode@@XZ_5.0+0x45c>  // b.pmore
    92d4:	sub	x3, x3, x26
    92d8:	sub	x0, x0, x1
    92dc:	cmp	x3, x0
    92e0:	b.hi	93a8 <lzma_block_buffer_decode@@XZ_5.0+0x45c>  // b.pmore
    92e4:	ldrb	w0, [x19, #224]
    92e8:	add	x1, x3, x1
    92ec:	str	x1, [x19, #96]
    92f0:	cbnz	w0, 9304 <lzma_block_buffer_decode@@XZ_5.0+0x3b8>
    92f4:	ldr	w1, [x4, #8]
    92f8:	add	x2, x25, x26
    92fc:	add	x0, x19, #0x78
    9300:	bl	afcc <lzma_check_size@@XZ_5.0+0x50>
    9304:	cmp	w20, #0x1
    9308:	b.ne	936c <lzma_block_buffer_decode@@XZ_5.0+0x420>  // b.any
    930c:	ldp	x0, x2, [x19, #80]
    9310:	ldr	x1, [x0, #16]
    9314:	cmp	x2, x1
    9318:	ccmn	x1, #0x1, #0x4, ne  // ne = any
    931c:	b.ne	93a8 <lzma_block_buffer_decode@@XZ_5.0+0x45c>  // b.any
    9320:	ldr	x3, [x0, #24]
    9324:	ldr	x1, [x19, #96]
    9328:	cmp	x1, x3
    932c:	ccmn	x3, #0x1, #0x4, ne  // ne = any
    9330:	b.ne	93a8 <lzma_block_buffer_decode@@XZ_5.0+0x45c>  // b.any
    9334:	stp	x2, x1, [x0, #16]
    9338:	str	w20, [x19]
    933c:	ldr	x0, [x19, #88]
    9340:	tst	x0, #0x3
    9344:	b.ne	935c <lzma_block_buffer_decode@@XZ_5.0+0x410>  // b.any
    9348:	ldr	x0, [x19, #80]
    934c:	ldr	w1, [x0, #8]
    9350:	cbnz	w1, 93b0 <lzma_block_buffer_decode@@XZ_5.0+0x464>
    9354:	mov	w20, #0x1                   	// #1
    9358:	b	936c <lzma_block_buffer_decode@@XZ_5.0+0x420>
    935c:	ldr	x1, [x21]
    9360:	cmp	x1, x23
    9364:	b.cc	9390 <lzma_block_buffer_decode@@XZ_5.0+0x444>  // b.lo, b.ul, b.last
    9368:	mov	w20, #0x0                   	// #0
    936c:	mov	w0, w20
    9370:	ldp	x29, x30, [sp, #16]
    9374:	ldp	x19, x20, [sp, #32]
    9378:	ldp	x21, x22, [sp, #48]
    937c:	ldp	x23, x24, [sp, #64]
    9380:	ldp	x25, x26, [sp, #80]
    9384:	ldr	x27, [sp, #96]
    9388:	add	sp, sp, #0x70
    938c:	ret
    9390:	add	x0, x0, #0x1
    9394:	str	x0, [x19, #88]
    9398:	add	x0, x1, #0x1
    939c:	str	x0, [x21]
    93a0:	ldrb	w0, [x22, x1]
    93a4:	cbz	w0, 933c <lzma_block_buffer_decode@@XZ_5.0+0x3f0>
    93a8:	mov	w20, #0x9                   	// #9
    93ac:	b	936c <lzma_block_buffer_decode@@XZ_5.0+0x420>
    93b0:	ldrb	w0, [x19, #224]
    93b4:	cbnz	w0, 93c0 <lzma_block_buffer_decode@@XZ_5.0+0x474>
    93b8:	add	x0, x19, #0x78
    93bc:	bl	b038 <lzma_check_size@@XZ_5.0+0xbc>
    93c0:	mov	w0, #0x2                   	// #2
    93c4:	str	w0, [x19]
    93c8:	ldr	x24, [x19, #80]
    93cc:	ldr	w0, [x24, #8]
    93d0:	bl	3270 <lzma_check_size@plt>
    93d4:	mov	w20, w0
    93d8:	mov	x5, x20
    93dc:	add	x4, x19, #0x70
    93e0:	add	x3, x24, #0x28
    93e4:	mov	x2, x23
    93e8:	mov	x1, x21
    93ec:	mov	x0, x22
    93f0:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    93f4:	ldr	x0, [x19, #112]
    93f8:	cmp	x0, x20
    93fc:	b.cc	9368 <lzma_block_buffer_decode@@XZ_5.0+0x41c>  // b.lo, b.ul, b.last
    9400:	ldrb	w0, [x19, #224]
    9404:	cbnz	w0, 9354 <lzma_block_buffer_decode@@XZ_5.0+0x408>
    9408:	ldr	x21, [x19, #80]
    940c:	ldr	w0, [x21, #8]
    9410:	bl	30e0 <lzma_check_is_supported@plt>
    9414:	tst	w0, #0xff
    9418:	b.eq	9354 <lzma_block_buffer_decode@@XZ_5.0+0x408>  // b.none
    941c:	mov	x2, x20
    9420:	add	x1, x19, #0x78
    9424:	add	x0, x21, #0x28
    9428:	bl	3330 <memcmp@plt>
    942c:	cbz	w0, 9354 <lzma_block_buffer_decode@@XZ_5.0+0x408>
    9430:	b	93a8 <lzma_block_buffer_decode@@XZ_5.0+0x45c>
    9434:	mov	w20, #0xb                   	// #11
    9438:	b	936c <lzma_block_buffer_decode@@XZ_5.0+0x420>

000000000000943c <lzma_block_decoder@@XZ_5.0>:
    943c:	stp	x29, x30, [sp, #-48]!
    9440:	mov	x29, sp
    9444:	stp	x19, x20, [sp, #16]
    9448:	mov	x20, x0
    944c:	str	x21, [sp, #32]
    9450:	mov	x21, x1
    9454:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    9458:	mov	w19, w0
    945c:	cbnz	w0, 947c <lzma_block_decoder@@XZ_5.0+0x40>
    9460:	ldp	x1, x0, [x20, #48]
    9464:	mov	x2, x21
    9468:	bl	90c0 <lzma_block_buffer_decode@@XZ_5.0+0x174>
    946c:	mov	w19, w0
    9470:	cbz	w0, 9490 <lzma_block_decoder@@XZ_5.0+0x54>
    9474:	mov	x0, x20
    9478:	bl	3320 <lzma_end@plt>
    947c:	mov	w0, w19
    9480:	ldp	x19, x20, [sp, #16]
    9484:	ldr	x21, [sp, #32]
    9488:	ldp	x29, x30, [sp], #48
    948c:	ret
    9490:	ldr	x0, [x20, #56]
    9494:	mov	w1, #0x1                   	// #1
    9498:	strb	w1, [x0, #88]
    949c:	strb	w1, [x0, #91]
    94a0:	b	947c <lzma_block_decoder@@XZ_5.0+0x40>
    94a4:	stp	x29, x30, [sp, #-48]!
    94a8:	mov	x29, sp
    94ac:	stp	x19, x20, [sp, #16]
    94b0:	mov	x20, x0
    94b4:	mov	x19, #0x0                   	// #0
    94b8:	stp	x21, x22, [sp, #32]
    94bc:	mov	x21, x1
    94c0:	mov	x22, #0xffffffffffffffff    	// #-1
    94c4:	ldr	x0, [x20]
    94c8:	mov	x1, x21
    94cc:	add	x0, x0, x19
    94d0:	ldr	x0, [x0, #8]
    94d4:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    94d8:	ldr	x0, [x20]
    94dc:	add	x1, x0, x19
    94e0:	str	x22, [x0, x19]
    94e4:	add	x19, x19, #0x10
    94e8:	cmp	x19, #0x40
    94ec:	str	xzr, [x1, #8]
    94f0:	b.ne	94c4 <lzma_block_decoder@@XZ_5.0+0x88>  // b.any
    94f4:	ldp	x19, x20, [sp, #16]
    94f8:	ldp	x21, x22, [sp, #32]
    94fc:	ldp	x29, x30, [sp], #48
    9500:	ret

0000000000009504 <lzma_block_header_decode@@XZ_5.0>:
    9504:	stp	x29, x30, [sp, #-96]!
    9508:	mov	x29, sp
    950c:	stp	x19, x20, [sp, #16]
    9510:	mov	x20, x0
    9514:	ldr	x0, [x0, #32]
    9518:	stp	x23, x24, [sp, #48]
    951c:	mov	x23, x1
    9520:	add	x1, x0, #0x50
    9524:	stp	x21, x22, [sp, #32]
    9528:	mov	x21, x2
    952c:	mov	x2, #0xffffffffffffffff    	// #-1
    9530:	stp	x25, x26, [sp, #64]
    9534:	stp	x2, xzr, [x0]
    9538:	add	x0, x0, #0x10
    953c:	cmp	x0, x1
    9540:	b.ne	9534 <lzma_block_header_decode@@XZ_5.0+0x30>  // b.any
    9544:	ldr	w0, [x20]
    9548:	cmp	w0, #0x1
    954c:	b.ls	9558 <lzma_block_header_decode@@XZ_5.0+0x54>  // b.plast
    9550:	mov	w0, #0x1                   	// #1
    9554:	str	w0, [x20]
    9558:	strb	wzr, [x20, #200]
    955c:	ldr	w1, [x20, #4]
    9560:	ldrb	w0, [x21]
    9564:	add	w0, w0, #0x1
    9568:	lsl	w22, w0, #2
    956c:	cmp	w1, w0, lsl #2
    9570:	b.ne	96cc <lzma_block_header_decode@@XZ_5.0+0x1c8>  // b.any
    9574:	ldr	w0, [x20, #8]
    9578:	cmp	w0, #0xf
    957c:	b.hi	96cc <lzma_block_header_decode@@XZ_5.0+0x1c8>  // b.pmore
    9580:	sub	w22, w22, #0x4
    9584:	mov	x0, x21
    9588:	mov	x1, x22
    958c:	mov	w2, #0x0                   	// #0
    9590:	bl	31c0 <lzma_crc32@plt>
    9594:	ldr	w1, [x21, x22]
    9598:	cmp	w0, w1
    959c:	b.eq	95c0 <lzma_block_header_decode@@XZ_5.0+0xbc>  // b.none
    95a0:	mov	w19, #0x9                   	// #9
    95a4:	mov	w0, w19
    95a8:	ldp	x19, x20, [sp, #16]
    95ac:	ldp	x21, x22, [sp, #32]
    95b0:	ldp	x23, x24, [sp, #48]
    95b4:	ldp	x25, x26, [sp, #64]
    95b8:	ldp	x29, x30, [sp], #96
    95bc:	ret
    95c0:	ldrb	w0, [x21, #1]
    95c4:	tst	w0, #0x3c
    95c8:	b.ne	96c4 <lzma_block_header_decode@@XZ_5.0+0x1c0>  // b.any
    95cc:	mov	x1, #0x2                   	// #2
    95d0:	str	x1, [sp, #88]
    95d4:	add	x25, sp, #0x58
    95d8:	tbz	w0, #6, 9674 <lzma_block_header_decode@@XZ_5.0+0x170>
    95dc:	mov	x4, x22
    95e0:	mov	x3, x25
    95e4:	mov	x2, x21
    95e8:	add	x0, x20, #0x10
    95ec:	mov	x1, #0x0                   	// #0
    95f0:	bl	33c0 <lzma_vli_decode@plt>
    95f4:	mov	w19, w0
    95f8:	cbnz	w0, 95a4 <lzma_block_header_decode@@XZ_5.0+0xa0>
    95fc:	mov	x0, x20
    9600:	bl	3190 <lzma_block_unpadded_size@plt>
    9604:	cbz	x0, 95a0 <lzma_block_header_decode@@XZ_5.0+0x9c>
    9608:	ldrsb	w0, [x21, #1]
    960c:	tbz	w0, #31, 9680 <lzma_block_header_decode@@XZ_5.0+0x17c>
    9610:	mov	x4, x22
    9614:	mov	x3, x25
    9618:	mov	x2, x21
    961c:	add	x0, x20, #0x18
    9620:	mov	x1, #0x0                   	// #0
    9624:	bl	33c0 <lzma_vli_decode@plt>
    9628:	mov	w19, w0
    962c:	cbnz	w0, 95a4 <lzma_block_header_decode@@XZ_5.0+0xa0>
    9630:	ldrb	w24, [x21, #1]
    9634:	mov	x26, #0x0                   	// #0
    9638:	and	x24, x24, #0x3
    963c:	add	x24, x24, #0x1
    9640:	ldr	x0, [x20, #32]
    9644:	mov	x4, x22
    9648:	mov	x3, x25
    964c:	mov	x2, x21
    9650:	mov	x1, x23
    9654:	add	x0, x0, x26, lsl #4
    9658:	bl	3500 <lzma_filter_flags_decode@plt>
    965c:	mov	w19, w0
    9660:	cbz	w0, 968c <lzma_block_header_decode@@XZ_5.0+0x188>
    9664:	mov	x1, x23
    9668:	add	x0, x20, #0x20
    966c:	bl	94a4 <lzma_block_decoder@@XZ_5.0+0x68>
    9670:	b	95a4 <lzma_block_header_decode@@XZ_5.0+0xa0>
    9674:	mov	x0, #0xffffffffffffffff    	// #-1
    9678:	str	x0, [x20, #16]
    967c:	b	9608 <lzma_block_header_decode@@XZ_5.0+0x104>
    9680:	mov	x0, #0xffffffffffffffff    	// #-1
    9684:	str	x0, [x20, #24]
    9688:	b	9630 <lzma_block_header_decode@@XZ_5.0+0x12c>
    968c:	add	x26, x26, #0x1
    9690:	cmp	x24, x26
    9694:	b.hi	9640 <lzma_block_header_decode@@XZ_5.0+0x13c>  // b.pmore
    9698:	ldr	x0, [sp, #88]
    969c:	sub	x21, x21, #0x1
    96a0:	cmp	x22, x0
    96a4:	b.ls	95a4 <lzma_block_header_decode@@XZ_5.0+0xa0>  // b.plast
    96a8:	add	x0, x0, #0x1
    96ac:	ldrb	w1, [x21, x0]
    96b0:	cbz	w1, 96a0 <lzma_block_header_decode@@XZ_5.0+0x19c>
    96b4:	mov	x1, x23
    96b8:	str	x0, [sp, #88]
    96bc:	add	x0, x20, #0x20
    96c0:	bl	94a4 <lzma_block_decoder@@XZ_5.0+0x68>
    96c4:	mov	w19, #0x8                   	// #8
    96c8:	b	95a4 <lzma_block_header_decode@@XZ_5.0+0xa0>
    96cc:	mov	w19, #0xb                   	// #11
    96d0:	b	95a4 <lzma_block_header_decode@@XZ_5.0+0xa0>

00000000000096d4 <lzma_easy_decoder_memusage@@XZ_5.0>:
    96d4:	stp	x29, x30, [sp, #-224]!
    96d8:	mov	w1, w0
    96dc:	mov	x29, sp
    96e0:	str	x19, [sp, #16]
    96e4:	add	x19, sp, #0x20
    96e8:	mov	x0, x19
    96ec:	bl	3e90 <lzma_block_total_size@@XZ_5.0+0x24>
    96f0:	tst	w0, #0xff
    96f4:	b.ne	970c <lzma_easy_decoder_memusage@@XZ_5.0+0x38>  // b.any
    96f8:	mov	x0, x19
    96fc:	bl	32e0 <lzma_raw_decoder_memusage@plt>
    9700:	ldr	x19, [sp, #16]
    9704:	ldp	x29, x30, [sp], #224
    9708:	ret
    970c:	mov	x0, #0xffffffff            	// #4294967295
    9710:	b	9700 <lzma_easy_decoder_memusage@@XZ_5.0+0x2c>

0000000000009714 <lzma_raw_buffer_decode@@XZ_5.0>:
    9714:	sub	sp, sp, #0xe0
    9718:	cmp	x2, #0x0
    971c:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    9720:	stp	x29, x30, [sp, #16]
    9724:	add	x29, sp, #0x10
    9728:	stp	x19, x20, [sp, #32]
    972c:	stp	x21, x22, [sp, #48]
    9730:	stp	x23, x24, [sp, #64]
    9734:	stp	x25, x26, [sp, #80]
    9738:	stp	x27, x28, [sp, #96]
    973c:	b.eq	9898 <lzma_raw_buffer_decode@@XZ_5.0+0x184>  // b.none
    9740:	mov	x26, x2
    9744:	mov	x20, x3
    9748:	ldr	x2, [x3]
    974c:	mov	x28, x4
    9750:	cmp	x2, x4
    9754:	b.hi	9898 <lzma_raw_buffer_decode@@XZ_5.0+0x184>  // b.pmore
    9758:	str	x5, [sp, #120]
    975c:	cmp	x5, #0x0
    9760:	mov	x21, x6
    9764:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    9768:	b.eq	9898 <lzma_raw_buffer_decode@@XZ_5.0+0x184>  // b.none
    976c:	ldr	x2, [x6]
    9770:	mov	x27, x7
    9774:	cmp	x2, x7
    9778:	b.hi	9898 <lzma_raw_buffer_decode@@XZ_5.0+0x184>  // b.pmore
    977c:	mov	x2, #0xffffffffffffffff    	// #-1
    9780:	add	x23, sp, #0x98
    9784:	mov	x22, x1
    9788:	stp	xzr, x2, [sp, #152]
    978c:	mov	x2, x0
    9790:	mov	x0, x23
    9794:	stp	xzr, xzr, [sp, #168]
    9798:	stp	xzr, xzr, [sp, #184]
    979c:	stp	xzr, xzr, [sp, #200]
    97a0:	str	xzr, [sp, #216]
    97a4:	bl	98f4 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    97a8:	mov	w19, w0
    97ac:	cbnz	w0, 9864 <lzma_raw_buffer_decode@@XZ_5.0+0x150>
    97b0:	ldr	x5, [sp, #120]
    97b4:	mov	w8, #0x3                   	// #3
    97b8:	ldr	x0, [sp, #152]
    97bc:	mov	x7, x27
    97c0:	ldr	x9, [sp, #176]
    97c4:	mov	x6, x21
    97c8:	ldr	x25, [x20]
    97cc:	mov	x4, x28
    97d0:	ldr	x24, [x21]
    97d4:	str	w8, [sp]
    97d8:	mov	x3, x20
    97dc:	mov	x2, x26
    97e0:	mov	x1, x22
    97e4:	blr	x9
    97e8:	cmp	w0, #0x1
    97ec:	b.eq	9858 <lzma_raw_buffer_decode@@XZ_5.0+0x144>  // b.none
    97f0:	cbnz	w0, 984c <lzma_raw_buffer_decode@@XZ_5.0+0x138>
    97f4:	ldr	x4, [x20]
    97f8:	mov	w8, #0x3                   	// #3
    97fc:	cmp	x4, x28
    9800:	b.ne	9888 <lzma_raw_buffer_decode@@XZ_5.0+0x174>  // b.any
    9804:	ldr	x0, [x21]
    9808:	cmp	x0, x27
    980c:	b.ne	9890 <lzma_raw_buffer_decode@@XZ_5.0+0x17c>  // b.any
    9810:	str	w8, [sp]
    9814:	add	x6, sp, #0x90
    9818:	ldr	x0, [sp, #152]
    981c:	str	xzr, [sp, #144]
    9820:	ldr	x8, [sp, #176]
    9824:	add	x5, sp, #0x88
    9828:	mov	x3, x20
    982c:	mov	x2, x26
    9830:	mov	x1, x22
    9834:	mov	x7, #0x1                   	// #1
    9838:	blr	x8
    983c:	ldr	x0, [sp, #144]
    9840:	cmp	x0, #0x1
    9844:	cset	w0, eq  // eq = none
    9848:	add	w0, w0, #0x9
    984c:	mov	w19, w0
    9850:	str	x25, [x20]
    9854:	str	x24, [x21]
    9858:	mov	x1, x22
    985c:	mov	x0, x23
    9860:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    9864:	mov	w0, w19
    9868:	ldp	x29, x30, [sp, #16]
    986c:	ldp	x19, x20, [sp, #32]
    9870:	ldp	x21, x22, [sp, #48]
    9874:	ldp	x23, x24, [sp, #64]
    9878:	ldp	x25, x26, [sp, #80]
    987c:	ldp	x27, x28, [sp, #96]
    9880:	add	sp, sp, #0xe0
    9884:	ret
    9888:	mov	w0, #0xa                   	// #10
    988c:	b	984c <lzma_raw_buffer_decode@@XZ_5.0+0x138>
    9890:	mov	w0, #0x9                   	// #9
    9894:	b	984c <lzma_raw_buffer_decode@@XZ_5.0+0x138>
    9898:	mov	w19, #0xb                   	// #11
    989c:	b	9864 <lzma_raw_buffer_decode@@XZ_5.0+0x150>
    98a0:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    98a4:	add	x1, x1, #0xbf8
    98a8:	mov	x2, #0x0                   	// #0
    98ac:	lsl	x3, x2, #5
    98b0:	ldr	x4, [x3, x1]
    98b4:	cmp	x4, x0
    98b8:	b.ne	98c4 <lzma_raw_buffer_decode@@XZ_5.0+0x1b0>  // b.any
    98bc:	add	x0, x1, x3
    98c0:	ret
    98c4:	add	x2, x2, #0x1
    98c8:	cmp	x2, #0x9
    98cc:	b.ne	98ac <lzma_raw_buffer_decode@@XZ_5.0+0x198>  // b.any
    98d0:	mov	x0, #0x0                   	// #0
    98d4:	b	98c0 <lzma_raw_buffer_decode@@XZ_5.0+0x1ac>

00000000000098d8 <lzma_filter_decoder_is_supported@@XZ_5.0>:
    98d8:	stp	x29, x30, [sp, #-16]!
    98dc:	mov	x29, sp
    98e0:	bl	98a0 <lzma_raw_buffer_decode@@XZ_5.0+0x18c>
    98e4:	cmp	x0, #0x0
    98e8:	cset	w0, ne  // ne = any
    98ec:	ldp	x29, x30, [sp], #16
    98f0:	ret
    98f4:	mov	w4, #0x0                   	// #0
    98f8:	adrp	x3, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    98fc:	add	x3, x3, #0x8a0
    9900:	b	40c4 <lzma_filters_copy@@XZ_5.0+0x144>

0000000000009904 <lzma_raw_decoder@@XZ_5.0>:
    9904:	stp	x29, x30, [sp, #-48]!
    9908:	mov	x29, sp
    990c:	stp	x19, x20, [sp, #16]
    9910:	mov	x20, x0
    9914:	str	x21, [sp, #32]
    9918:	mov	x21, x1
    991c:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    9920:	mov	w19, w0
    9924:	cbnz	w0, 9944 <lzma_raw_decoder@@XZ_5.0+0x40>
    9928:	ldp	x1, x0, [x20, #48]
    992c:	mov	x2, x21
    9930:	bl	98f4 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    9934:	mov	w19, w0
    9938:	cbz	w0, 9958 <lzma_raw_decoder@@XZ_5.0+0x54>
    993c:	mov	x0, x20
    9940:	bl	3320 <lzma_end@plt>
    9944:	mov	w0, w19
    9948:	ldp	x19, x20, [sp, #16]
    994c:	ldr	x21, [sp, #32]
    9950:	ldp	x29, x30, [sp], #48
    9954:	ret
    9958:	ldr	x0, [x20, #56]
    995c:	mov	w1, #0x1                   	// #1
    9960:	strb	w1, [x0, #88]
    9964:	strb	w1, [x0, #91]
    9968:	b	9944 <lzma_raw_decoder@@XZ_5.0+0x40>

000000000000996c <lzma_raw_decoder_memusage@@XZ_5.0>:
    996c:	mov	x1, x0
    9970:	adrp	x0, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    9974:	add	x0, x0, #0x8a0
    9978:	b	4234 <lzma_filters_copy@@XZ_5.0+0x2b4>

000000000000997c <lzma_properties_decode@@XZ_5.0>:
    997c:	stp	x29, x30, [sp, #-16]!
    9980:	mov	x5, x0
    9984:	mov	x7, x1
    9988:	mov	x29, sp
    998c:	str	xzr, [x0, #8]
    9990:	mov	x8, x2
    9994:	ldr	x0, [x0]
    9998:	mov	x6, x3
    999c:	bl	98a0 <lzma_raw_buffer_decode@@XZ_5.0+0x18c>
    99a0:	cbz	x0, 99dc <lzma_properties_decode@@XZ_5.0+0x60>
    99a4:	ldr	x4, [x0, #24]
    99a8:	cbnz	x4, 99c0 <lzma_properties_decode@@XZ_5.0+0x44>
    99ac:	cmp	x6, #0x0
    99b0:	cset	w0, ne  // ne = any
    99b4:	lsl	w0, w0, #3
    99b8:	ldp	x29, x30, [sp], #16
    99bc:	ret
    99c0:	ldp	x29, x30, [sp], #16
    99c4:	mov	x3, x6
    99c8:	mov	x2, x8
    99cc:	mov	x1, x7
    99d0:	add	x0, x5, #0x8
    99d4:	mov	x16, x4
    99d8:	br	x16
    99dc:	mov	w0, #0x8                   	// #8
    99e0:	b	99b8 <lzma_properties_decode@@XZ_5.0+0x3c>

00000000000099e4 <lzma_filter_flags_decode@@XZ_5.0>:
    99e4:	stp	x29, x30, [sp, #-80]!
    99e8:	mov	x29, sp
    99ec:	stp	x19, x20, [sp, #16]
    99f0:	mov	x19, x3
    99f4:	mov	x20, x4
    99f8:	stp	x21, x22, [sp, #32]
    99fc:	mov	x21, x0
    9a00:	mov	x22, x2
    9a04:	str	x23, [sp, #48]
    9a08:	mov	x23, x1
    9a0c:	str	xzr, [x0, #8]
    9a10:	mov	x1, #0x0                   	// #0
    9a14:	bl	33c0 <lzma_vli_decode@plt>
    9a18:	cbnz	w0, 9a30 <lzma_filter_flags_decode@@XZ_5.0+0x4c>
    9a1c:	ldr	x1, [x21]
    9a20:	mov	x0, #0x3fffffffffffffff    	// #4611686018427387903
    9a24:	cmp	x1, x0
    9a28:	b.ls	9a44 <lzma_filter_flags_decode@@XZ_5.0+0x60>  // b.plast
    9a2c:	mov	w0, #0x9                   	// #9
    9a30:	ldp	x19, x20, [sp, #16]
    9a34:	ldp	x21, x22, [sp, #32]
    9a38:	ldr	x23, [sp, #48]
    9a3c:	ldp	x29, x30, [sp], #80
    9a40:	ret
    9a44:	mov	x4, x20
    9a48:	mov	x3, x19
    9a4c:	mov	x2, x22
    9a50:	add	x0, sp, #0x48
    9a54:	mov	x1, #0x0                   	// #0
    9a58:	bl	33c0 <lzma_vli_decode@plt>
    9a5c:	cbnz	w0, 9a30 <lzma_filter_flags_decode@@XZ_5.0+0x4c>
    9a60:	ldr	x2, [x19]
    9a64:	ldr	x3, [sp, #72]
    9a68:	sub	x20, x20, x2
    9a6c:	cmp	x20, x3
    9a70:	b.cc	9a2c <lzma_filter_flags_decode@@XZ_5.0+0x48>  // b.lo, b.ul, b.last
    9a74:	add	x2, x22, x2
    9a78:	mov	x1, x23
    9a7c:	mov	x0, x21
    9a80:	bl	3250 <lzma_properties_decode@plt>
    9a84:	ldr	x1, [x19]
    9a88:	ldr	x2, [sp, #72]
    9a8c:	add	x1, x1, x2
    9a90:	str	x1, [x19]
    9a94:	b	9a30 <lzma_filter_flags_decode@@XZ_5.0+0x4c>
    9a98:	stp	x29, x30, [sp, #-48]!
    9a9c:	mov	x29, sp
    9aa0:	stp	x21, x22, [sp, #32]
    9aa4:	mov	x21, x1
    9aa8:	mov	x22, x2
    9aac:	ldr	x1, [x0, #32]
    9ab0:	stp	x19, x20, [sp, #16]
    9ab4:	mov	x19, x0
    9ab8:	mov	x20, x3
    9abc:	mov	x0, #0x1                   	// #1
    9ac0:	bl	3180 <lzma_index_memusage@plt>
    9ac4:	str	x0, [x21]
    9ac8:	ldr	x0, [x19, #8]
    9acc:	str	x0, [x22]
    9ad0:	cbz	x20, 9ae4 <lzma_filter_flags_decode@@XZ_5.0+0x100>
    9ad4:	ldr	x0, [x21]
    9ad8:	cmp	x0, x20
    9adc:	b.hi	9af8 <lzma_filter_flags_decode@@XZ_5.0+0x114>  // b.pmore
    9ae0:	str	x20, [x19, #8]
    9ae4:	mov	w0, #0x0                   	// #0
    9ae8:	ldp	x19, x20, [sp, #16]
    9aec:	ldp	x21, x22, [sp, #32]
    9af0:	ldp	x29, x30, [sp], #48
    9af4:	ret
    9af8:	mov	w0, #0x6                   	// #6
    9afc:	b	9ae8 <lzma_filter_flags_decode@@XZ_5.0+0x104>
    9b00:	stp	x29, x30, [sp, #-32]!
    9b04:	mov	x29, sp
    9b08:	stp	x19, x20, [sp, #16]
    9b0c:	mov	x19, x0
    9b10:	mov	x20, x1
    9b14:	ldr	x0, [x0, #16]
    9b18:	bl	33e0 <lzma_index_end@plt>
    9b1c:	mov	x1, x20
    9b20:	mov	x0, x19
    9b24:	ldp	x19, x20, [sp, #16]
    9b28:	ldp	x29, x30, [sp], #32
    9b2c:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    9b30:	stp	x29, x30, [sp, #-112]!
    9b34:	mov	x29, sp
    9b38:	stp	x23, x24, [sp, #48]
    9b3c:	mov	x24, x1
    9b40:	ldr	x23, [x3]
    9b44:	stp	x19, x20, [sp, #16]
    9b48:	mov	x19, x0
    9b4c:	mov	x20, x3
    9b50:	stp	x21, x22, [sp, #32]
    9b54:	mov	x21, x2
    9b58:	mov	x22, x4
    9b5c:	stp	x25, x26, [sp, #64]
    9b60:	adrp	x25, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    9b64:	add	x25, x25, #0x780
    9b68:	stp	x27, x28, [sp, #80]
    9b6c:	add	x27, x0, #0x28
    9b70:	add	x28, x0, #0x30
    9b74:	mov	w26, #0x6                   	// #6
    9b78:	ldr	x0, [x20]
    9b7c:	cmp	x0, x22
    9b80:	b.cc	9bac <lzma_filter_flags_decode@@XZ_5.0+0x1c8>  // b.lo, b.ul, b.last
    9b84:	mov	w3, #0x0                   	// #0
    9b88:	ldr	w2, [x19, #64]
    9b8c:	add	x0, x21, x23
    9b90:	ldr	x1, [x20]
    9b94:	str	w3, [sp, #108]
    9b98:	sub	x1, x1, x23
    9b9c:	bl	31c0 <lzma_crc32@plt>
    9ba0:	ldr	w3, [sp, #108]
    9ba4:	str	w0, [x19, #64]
    9ba8:	b	9bdc <lzma_filter_flags_decode@@XZ_5.0+0x1f8>
    9bac:	ldr	w1, [x19]
    9bb0:	cmp	w1, #0x7
    9bb4:	b.hi	9db0 <lzma_filter_flags_decode@@XZ_5.0+0x3cc>  // b.pmore
    9bb8:	ldrb	w2, [x25, w1, uxtw]
    9bbc:	adr	x3, 9bc8 <lzma_filter_flags_decode@@XZ_5.0+0x1e4>
    9bc0:	add	x2, x3, w2, sxtb #2
    9bc4:	br	x2
    9bc8:	add	x1, x0, #0x1
    9bcc:	ldrb	w0, [x21, x0]
    9bd0:	str	x1, [x20]
    9bd4:	cbz	w0, 9bfc <lzma_filter_flags_decode@@XZ_5.0+0x218>
    9bd8:	mov	w3, #0x9                   	// #9
    9bdc:	mov	w0, w3
    9be0:	ldp	x19, x20, [sp, #16]
    9be4:	ldp	x21, x22, [sp, #32]
    9be8:	ldp	x23, x24, [sp, #48]
    9bec:	ldp	x25, x26, [sp, #64]
    9bf0:	ldp	x27, x28, [sp, #80]
    9bf4:	ldp	x29, x30, [sp], #112
    9bf8:	ret
    9bfc:	mov	w0, #0x1                   	// #1
    9c00:	str	w0, [x19]
    9c04:	b	9b78 <lzma_filter_flags_decode@@XZ_5.0+0x194>
    9c08:	mov	x3, x20
    9c0c:	mov	x4, x22
    9c10:	mov	x2, x21
    9c14:	add	x1, x19, #0x38
    9c18:	add	x0, x19, #0x20
    9c1c:	bl	33c0 <lzma_vli_decode@plt>
    9c20:	mov	w3, w0
    9c24:	cmp	w0, #0x1
    9c28:	b.ne	9b88 <lzma_filter_flags_decode@@XZ_5.0+0x1a4>  // b.any
    9c2c:	mov	w0, #0x2                   	// #2
    9c30:	str	w0, [x19]
    9c34:	str	xzr, [x19, #56]
    9c38:	ldr	x1, [x19, #32]
    9c3c:	mov	x0, #0x1                   	// #1
    9c40:	bl	3180 <lzma_index_memusage@plt>
    9c44:	ldr	x1, [x19, #8]
    9c48:	cmp	x0, x1
    9c4c:	b.hi	9da8 <lzma_filter_flags_decode@@XZ_5.0+0x3c4>  // b.pmore
    9c50:	ldr	x0, [x19, #16]
    9c54:	ldr	x1, [x19, #32]
    9c58:	bl	47e4 <lzma_index_end@@XZ_5.0+0x44>
    9c5c:	ldr	x0, [x19, #32]
    9c60:	mov	w1, #0x3                   	// #3
    9c64:	cmp	x0, #0x0
    9c68:	mov	w0, #0x5                   	// #5
    9c6c:	csel	w0, w0, w1, eq  // eq = none
    9c70:	b	9c00 <lzma_filter_flags_decode@@XZ_5.0+0x21c>
    9c74:	cmp	w1, #0x3
    9c78:	mov	x3, x20
    9c7c:	csel	x0, x28, x27, ne  // ne = any
    9c80:	mov	x4, x22
    9c84:	mov	x2, x21
    9c88:	add	x1, x19, #0x38
    9c8c:	bl	33c0 <lzma_vli_decode@plt>
    9c90:	mov	w3, w0
    9c94:	cmp	w0, #0x1
    9c98:	b.ne	9b88 <lzma_filter_flags_decode@@XZ_5.0+0x1a4>  // b.any
    9c9c:	ldr	w0, [x19]
    9ca0:	str	xzr, [x19, #56]
    9ca4:	cmp	w0, #0x3
    9ca8:	ldr	x2, [x19, #40]
    9cac:	b.ne	9cc8 <lzma_filter_flags_decode@@XZ_5.0+0x2e4>  // b.any
    9cb0:	sub	x2, x2, #0x5
    9cb4:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    9cb8:	cmp	x2, x0
    9cbc:	b.cs	9bd8 <lzma_filter_flags_decode@@XZ_5.0+0x1f4>  // b.hs, b.nlast
    9cc0:	mov	w0, #0x4                   	// #4
    9cc4:	b	9c00 <lzma_filter_flags_decode@@XZ_5.0+0x21c>
    9cc8:	ldr	x0, [x19, #16]
    9ccc:	mov	x1, x24
    9cd0:	ldr	x3, [x19, #48]
    9cd4:	bl	3300 <lzma_index_append@plt>
    9cd8:	mov	w3, w0
    9cdc:	cbnz	w0, 9bdc <lzma_filter_flags_decode@@XZ_5.0+0x1f8>
    9ce0:	ldr	x0, [x19, #32]
    9ce4:	mov	w1, #0x3                   	// #3
    9ce8:	subs	x0, x0, #0x1
    9cec:	str	x0, [x19, #32]
    9cf0:	mov	w0, #0x5                   	// #5
    9cf4:	csel	w0, w0, w1, eq  // eq = none
    9cf8:	b	9c00 <lzma_filter_flags_decode@@XZ_5.0+0x21c>
    9cfc:	ldr	x0, [x19, #16]
    9d00:	bl	4968 <lzma_index_checks@@XZ_5.0+0x2c>
    9d04:	mov	w0, w0
    9d08:	str	w26, [x19]
    9d0c:	str	x0, [x19, #56]
    9d10:	ldr	x0, [x19, #56]
    9d14:	ldr	x1, [x20]
    9d18:	cbz	x0, 9d38 <lzma_filter_flags_decode@@XZ_5.0+0x354>
    9d1c:	sub	x0, x0, #0x1
    9d20:	str	x0, [x19, #56]
    9d24:	add	x0, x1, #0x1
    9d28:	str	x0, [x20]
    9d2c:	ldrb	w0, [x21, x1]
    9d30:	cbz	w0, 9b78 <lzma_filter_flags_decode@@XZ_5.0+0x194>
    9d34:	b	9bd8 <lzma_filter_flags_decode@@XZ_5.0+0x1f4>
    9d38:	ldr	w2, [x19, #64]
    9d3c:	sub	x1, x1, x23
    9d40:	add	x0, x21, x23
    9d44:	bl	31c0 <lzma_crc32@plt>
    9d48:	str	w0, [x19, #64]
    9d4c:	mov	w0, #0x7                   	// #7
    9d50:	str	w0, [x19]
    9d54:	ldr	x2, [x20]
    9d58:	cmp	x2, x22
    9d5c:	b.eq	9db8 <lzma_filter_flags_decode@@XZ_5.0+0x3d4>  // b.none
    9d60:	ldr	x0, [x19, #56]
    9d64:	ldr	w1, [x19, #64]
    9d68:	lsl	w3, w0, #3
    9d6c:	lsr	w1, w1, w3
    9d70:	add	x3, x2, #0x1
    9d74:	ldrb	w2, [x21, x2]
    9d78:	str	x3, [x20]
    9d7c:	cmp	w2, w1, uxtb
    9d80:	b.ne	9bd8 <lzma_filter_flags_decode@@XZ_5.0+0x1f4>  // b.any
    9d84:	add	x0, x0, #0x1
    9d88:	str	x0, [x19, #56]
    9d8c:	cmp	x0, #0x3
    9d90:	b.ls	9d54 <lzma_filter_flags_decode@@XZ_5.0+0x370>  // b.plast
    9d94:	ldp	x1, x0, [x19, #16]
    9d98:	mov	w3, #0x1                   	// #1
    9d9c:	str	x1, [x0]
    9da0:	str	xzr, [x19, #16]
    9da4:	b	9bdc <lzma_filter_flags_decode@@XZ_5.0+0x1f8>
    9da8:	mov	w3, #0x6                   	// #6
    9dac:	b	9b88 <lzma_filter_flags_decode@@XZ_5.0+0x1a4>
    9db0:	mov	w3, #0xb                   	// #11
    9db4:	b	9bdc <lzma_filter_flags_decode@@XZ_5.0+0x1f8>
    9db8:	mov	w3, #0x0                   	// #0
    9dbc:	b	9bdc <lzma_filter_flags_decode@@XZ_5.0+0x1f8>
    9dc0:	stp	x29, x30, [sp, #-64]!
    9dc4:	mov	x29, sp
    9dc8:	str	x23, [sp, #48]
    9dcc:	mov	x23, x2
    9dd0:	ldr	x2, [x0, #16]
    9dd4:	stp	x19, x20, [sp, #16]
    9dd8:	adrp	x19, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    9ddc:	stp	x21, x22, [sp, #32]
    9de0:	add	x19, x19, #0xdc0
    9de4:	mov	x20, x0
    9de8:	mov	x22, x1
    9dec:	mov	x21, x3
    9df0:	cmp	x2, x19
    9df4:	b.eq	9dfc <lzma_filter_flags_decode@@XZ_5.0+0x418>  // b.none
    9df8:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    9dfc:	str	x19, [x20, #16]
    9e00:	cbz	x23, 9eac <lzma_filter_flags_decode@@XZ_5.0+0x4c8>
    9e04:	ldr	x19, [x20]
    9e08:	mov	x1, x22
    9e0c:	cbnz	x19, 9ea0 <lzma_filter_flags_decode@@XZ_5.0+0x4bc>
    9e10:	mov	x0, #0x48                  	// #72
    9e14:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    9e18:	mov	x19, x0
    9e1c:	cbnz	x0, 9e38 <lzma_filter_flags_decode@@XZ_5.0+0x454>
    9e20:	mov	w0, #0x5                   	// #5
    9e24:	ldp	x19, x20, [sp, #16]
    9e28:	ldp	x21, x22, [sp, #32]
    9e2c:	ldr	x23, [sp, #48]
    9e30:	ldp	x29, x30, [sp], #64
    9e34:	ret
    9e38:	adrp	x0, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    9e3c:	add	x0, x0, #0xb30
    9e40:	str	x0, [x20, #24]
    9e44:	adrp	x0, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    9e48:	add	x0, x0, #0xb00
    9e4c:	str	x19, [x20]
    9e50:	str	xzr, [x19, #16]
    9e54:	str	x0, [x20, #32]
    9e58:	adrp	x0, 9000 <lzma_block_buffer_decode@@XZ_5.0+0xb4>
    9e5c:	add	x0, x0, #0xa98
    9e60:	str	x0, [x20, #56]
    9e64:	str	x23, [x19, #24]
    9e68:	mov	x0, x22
    9e6c:	str	xzr, [x23]
    9e70:	bl	33b0 <lzma_index_init@plt>
    9e74:	str	x0, [x19, #16]
    9e78:	cbz	x0, 9e20 <lzma_filter_flags_decode@@XZ_5.0+0x43c>
    9e7c:	cmp	x21, #0x0
    9e80:	mov	w0, #0x0                   	// #0
    9e84:	csinc	x21, x21, xzr, ne  // ne = any
    9e88:	str	wzr, [x19]
    9e8c:	str	x21, [x19, #8]
    9e90:	str	xzr, [x19, #32]
    9e94:	str	xzr, [x19, #56]
    9e98:	str	wzr, [x19, #64]
    9e9c:	b	9e24 <lzma_filter_flags_decode@@XZ_5.0+0x440>
    9ea0:	ldr	x0, [x19, #16]
    9ea4:	bl	33e0 <lzma_index_end@plt>
    9ea8:	b	9e64 <lzma_filter_flags_decode@@XZ_5.0+0x480>
    9eac:	mov	w0, #0xb                   	// #11
    9eb0:	b	9e24 <lzma_filter_flags_decode@@XZ_5.0+0x440>

0000000000009eb4 <lzma_index_decoder@@XZ_5.0>:
    9eb4:	stp	x29, x30, [sp, #-48]!
    9eb8:	mov	x29, sp
    9ebc:	stp	x19, x20, [sp, #16]
    9ec0:	mov	x20, x0
    9ec4:	stp	x21, x22, [sp, #32]
    9ec8:	mov	x21, x1
    9ecc:	mov	x22, x2
    9ed0:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    9ed4:	mov	w19, w0
    9ed8:	cbnz	w0, 9efc <lzma_index_decoder@@XZ_5.0+0x48>
    9edc:	ldp	x1, x0, [x20, #48]
    9ee0:	mov	x3, x22
    9ee4:	mov	x2, x21
    9ee8:	bl	9dc0 <lzma_filter_flags_decode@@XZ_5.0+0x3dc>
    9eec:	mov	w19, w0
    9ef0:	cbz	w0, 9f10 <lzma_index_decoder@@XZ_5.0+0x5c>
    9ef4:	mov	x0, x20
    9ef8:	bl	3320 <lzma_end@plt>
    9efc:	mov	w0, w19
    9f00:	ldp	x19, x20, [sp, #16]
    9f04:	ldp	x21, x22, [sp, #32]
    9f08:	ldp	x29, x30, [sp], #48
    9f0c:	ret
    9f10:	ldr	x0, [x20, #56]
    9f14:	mov	w1, #0x1                   	// #1
    9f18:	strb	w1, [x0, #88]
    9f1c:	strb	w1, [x0, #91]
    9f20:	b	9efc <lzma_index_decoder@@XZ_5.0+0x48>

0000000000009f24 <lzma_index_buffer_decode@@XZ_5.0>:
    9f24:	sub	sp, sp, #0xb0
    9f28:	cmp	x0, #0x0
    9f2c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    9f30:	stp	x29, x30, [sp, #16]
    9f34:	add	x29, sp, #0x10
    9f38:	stp	x19, x20, [sp, #32]
    9f3c:	stp	x21, x22, [sp, #48]
    9f40:	stp	x23, x24, [sp, #64]
    9f44:	str	x25, [sp, #80]
    9f48:	b.eq	a038 <lzma_index_buffer_decode@@XZ_5.0+0x114>  // b.none
    9f4c:	cmp	x3, #0x0
    9f50:	mov	x19, x3
    9f54:	mov	x20, x4
    9f58:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    9f5c:	b.eq	a038 <lzma_index_buffer_decode@@XZ_5.0+0x114>  // b.none
    9f60:	mov	x21, x1
    9f64:	mov	x23, x5
    9f68:	ldr	x1, [x4]
    9f6c:	cmp	x1, x5
    9f70:	b.hi	a038 <lzma_index_buffer_decode@@XZ_5.0+0x114>  // b.pmore
    9f74:	ldr	x24, [x21]
    9f78:	str	xzr, [x0]
    9f7c:	mov	x22, x2
    9f80:	str	x0, [sp, #128]
    9f84:	mov	x0, x2
    9f88:	bl	33b0 <lzma_index_init@plt>
    9f8c:	str	x0, [sp, #120]
    9f90:	cbz	x0, a040 <lzma_index_buffer_decode@@XZ_5.0+0x11c>
    9f94:	cmp	x24, #0x0
    9f98:	mov	x25, #0x1                   	// #1
    9f9c:	csel	x24, x24, x25, ne  // ne = any
    9fa0:	str	x24, [sp, #112]
    9fa4:	ldr	x24, [x20]
    9fa8:	str	wzr, [sp]
    9fac:	mov	x2, x19
    9fb0:	mov	x4, x23
    9fb4:	mov	x3, x20
    9fb8:	mov	x1, x22
    9fbc:	add	x0, sp, #0x68
    9fc0:	mov	x7, #0x0                   	// #0
    9fc4:	mov	x6, #0x0                   	// #0
    9fc8:	mov	x5, #0x0                   	// #0
    9fcc:	str	wzr, [sp, #104]
    9fd0:	str	xzr, [sp, #136]
    9fd4:	str	xzr, [sp, #160]
    9fd8:	str	wzr, [sp, #168]
    9fdc:	bl	9b30 <lzma_filter_flags_decode@@XZ_5.0+0x14c>
    9fe0:	mov	w19, w0
    9fe4:	cmp	w0, #0x1
    9fe8:	b.eq	a048 <lzma_index_buffer_decode@@XZ_5.0+0x124>  // b.none
    9fec:	ldr	x0, [sp, #120]
    9ff0:	mov	x1, x22
    9ff4:	bl	33e0 <lzma_index_end@plt>
    9ff8:	str	x24, [x20]
    9ffc:	cbz	w19, a050 <lzma_index_buffer_decode@@XZ_5.0+0x12c>
    a000:	cmp	w19, #0x6
    a004:	b.ne	a018 <lzma_index_buffer_decode@@XZ_5.0+0xf4>  // b.any
    a008:	ldr	x1, [sp, #136]
    a00c:	mov	x0, x25
    a010:	bl	3180 <lzma_index_memusage@plt>
    a014:	str	x0, [x21]
    a018:	mov	w0, w19
    a01c:	ldp	x29, x30, [sp, #16]
    a020:	ldp	x19, x20, [sp, #32]
    a024:	ldp	x21, x22, [sp, #48]
    a028:	ldp	x23, x24, [sp, #64]
    a02c:	ldr	x25, [sp, #80]
    a030:	add	sp, sp, #0xb0
    a034:	ret
    a038:	mov	w19, #0xb                   	// #11
    a03c:	b	a018 <lzma_index_buffer_decode@@XZ_5.0+0xf4>
    a040:	mov	w19, #0x5                   	// #5
    a044:	b	a018 <lzma_index_buffer_decode@@XZ_5.0+0xf4>
    a048:	mov	w19, #0x0                   	// #0
    a04c:	b	a018 <lzma_index_buffer_decode@@XZ_5.0+0xf4>
    a050:	mov	w19, #0x9                   	// #9
    a054:	b	a018 <lzma_index_buffer_decode@@XZ_5.0+0xf4>
    a058:	stp	x29, x30, [sp, #-64]!
    a05c:	mov	x29, sp
    a060:	stp	x19, x20, [sp, #16]
    a064:	mov	x19, x0
    a068:	add	x0, x1, #0x3
    a06c:	stp	x21, x22, [sp, #32]
    a070:	mov	x21, x1
    a074:	and	x1, x0, #0xfffffffffffffffc
    a078:	ldr	x0, [x19]
    a07c:	mov	x20, x2
    a080:	add	x0, x0, x1
    a084:	str	x0, [x19]
    a088:	ldr	x0, [x19, #8]
    a08c:	add	x0, x0, x2
    a090:	str	x0, [x19, #8]
    a094:	mov	x0, x21
    a098:	bl	3480 <lzma_vli_size@plt>
    a09c:	mov	w22, w0
    a0a0:	mov	x0, x20
    a0a4:	bl	3480 <lzma_vli_size@plt>
    a0a8:	add	w22, w22, w0
    a0ac:	add	x2, sp, #0x30
    a0b0:	ldr	x0, [x19, #24]
    a0b4:	mov	x3, #0x10                  	// #16
    a0b8:	mov	w1, #0xa                   	// #10
    a0bc:	stp	x21, x20, [sp, #48]
    a0c0:	add	x22, x0, x22
    a0c4:	ldr	x0, [x19, #16]
    a0c8:	add	x0, x0, #0x1
    a0cc:	stp	x0, x22, [x19, #16]
    a0d0:	add	x0, x19, #0x20
    a0d4:	bl	afcc <lzma_check_size@@XZ_5.0+0x50>
    a0d8:	mov	w0, #0x0                   	// #0
    a0dc:	ldp	x19, x20, [sp, #16]
    a0e0:	ldp	x21, x22, [sp, #32]
    a0e4:	ldp	x29, x30, [sp], #64
    a0e8:	ret

000000000000a0ec <lzma_index_hash_init@@XZ_5.0>:
    a0ec:	stp	x29, x30, [sp, #-32]!
    a0f0:	mov	x29, sp
    a0f4:	str	x19, [sp, #16]
    a0f8:	cbnz	x0, a154 <lzma_index_hash_init@@XZ_5.0+0x68>
    a0fc:	mov	x0, #0x140                 	// #320
    a100:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    a104:	mov	x19, x0
    a108:	cbz	x0, a144 <lzma_index_hash_init@@XZ_5.0+0x58>
    a10c:	str	wzr, [x19]
    a110:	add	x0, x19, #0x28
    a114:	stp	xzr, xzr, [x19, #8]
    a118:	mov	w1, #0xa                   	// #10
    a11c:	stp	xzr, xzr, [x19, #24]
    a120:	stp	xzr, xzr, [x19, #144]
    a124:	stp	xzr, xzr, [x19, #160]
    a128:	stp	xzr, xzr, [x19, #288]
    a12c:	str	xzr, [x19, #304]
    a130:	str	wzr, [x19, #312]
    a134:	bl	afa0 <lzma_check_size@@XZ_5.0+0x24>
    a138:	add	x0, x19, #0xb0
    a13c:	mov	w1, #0xa                   	// #10
    a140:	bl	afa0 <lzma_check_size@@XZ_5.0+0x24>
    a144:	mov	x0, x19
    a148:	ldr	x19, [sp, #16]
    a14c:	ldp	x29, x30, [sp], #32
    a150:	ret
    a154:	mov	x19, x0
    a158:	b	a10c <lzma_index_hash_init@@XZ_5.0+0x20>

000000000000a15c <lzma_index_hash_end@@XZ_5.0>:
    a15c:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>

000000000000a160 <lzma_index_hash_size@@XZ_5.0>:
    a160:	stp	x29, x30, [sp, #-32]!
    a164:	mov	x29, sp
    a168:	str	x19, [sp, #16]
    a16c:	mov	x19, x0
    a170:	ldr	x0, [x0, #24]
    a174:	bl	3480 <lzma_vli_size@plt>
    a178:	add	w0, w0, #0x1
    a17c:	ldr	x1, [x19, #32]
    a180:	ldr	x19, [sp, #16]
    a184:	add	x1, x1, #0x7
    a188:	add	x0, x1, x0
    a18c:	and	x0, x0, #0xfffffffffffffffc
    a190:	ldp	x29, x30, [sp], #32
    a194:	ret

000000000000a198 <lzma_index_hash_append@@XZ_5.0>:
    a198:	stp	x29, x30, [sp, #-32]!
    a19c:	mov	x29, sp
    a1a0:	ldr	w4, [x0]
    a1a4:	stp	x19, x20, [sp, #16]
    a1a8:	mov	x19, x0
    a1ac:	cbnz	w4, a224 <lzma_index_hash_append@@XZ_5.0+0x8c>
    a1b0:	sub	x0, x1, #0x5
    a1b4:	mov	x4, #0x7ffffffffffffff8    	// #9223372036854775800
    a1b8:	cmp	x0, x4
    a1bc:	b.cs	a224 <lzma_index_hash_append@@XZ_5.0+0x8c>  // b.hs, b.nlast
    a1c0:	tbnz	x2, #63, a224 <lzma_index_hash_append@@XZ_5.0+0x8c>
    a1c4:	add	x0, x19, #0x8
    a1c8:	bl	a058 <lzma_index_buffer_decode@@XZ_5.0+0x134>
    a1cc:	cbnz	w0, a218 <lzma_index_hash_append@@XZ_5.0+0x80>
    a1d0:	ldr	x20, [x19, #8]
    a1d4:	tbnz	x20, #63, a22c <lzma_index_hash_append@@XZ_5.0+0x94>
    a1d8:	ldr	x0, [x19, #16]
    a1dc:	tbnz	x0, #63, a22c <lzma_index_hash_append@@XZ_5.0+0x94>
    a1e0:	ldr	x0, [x19, #24]
    a1e4:	bl	3480 <lzma_vli_size@plt>
    a1e8:	add	w0, w0, #0x1
    a1ec:	ldr	x1, [x19, #32]
    a1f0:	add	x1, x1, #0x7
    a1f4:	add	x0, x1, x0
    a1f8:	mov	x1, #0x400000000           	// #17179869184
    a1fc:	and	x0, x0, #0xfffffffffffffffc
    a200:	cmp	x0, x1
    a204:	b.hi	a22c <lzma_index_hash_append@@XZ_5.0+0x94>  // b.pmore
    a208:	add	x20, x20, #0x18
    a20c:	cmn	x20, x0
    a210:	mov	w0, #0x9                   	// #9
    a214:	csel	w0, wzr, w0, pl  // pl = nfrst
    a218:	ldp	x19, x20, [sp, #16]
    a21c:	ldp	x29, x30, [sp], #32
    a220:	ret
    a224:	mov	w0, #0xb                   	// #11
    a228:	b	a218 <lzma_index_hash_append@@XZ_5.0+0x80>
    a22c:	mov	w0, #0x9                   	// #9
    a230:	b	a218 <lzma_index_hash_append@@XZ_5.0+0x80>

000000000000a234 <lzma_index_hash_decode@@XZ_5.0>:
    a234:	stp	x29, x30, [sp, #-96]!
    a238:	mov	x29, sp
    a23c:	stp	x23, x24, [sp, #48]
    a240:	ldr	x23, [x2]
    a244:	stp	x19, x20, [sp, #16]
    a248:	stp	x21, x22, [sp, #32]
    a24c:	cmp	x23, x3
    a250:	stp	x25, x26, [sp, #64]
    a254:	stp	x27, x28, [sp, #80]
    a258:	b.cs	a52c <lzma_index_hash_decode@@XZ_5.0+0x2f8>  // b.hs, b.nlast
    a25c:	adrp	x24, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    a260:	mov	x19, x0
    a264:	mov	x21, x1
    a268:	mov	x28, x2
    a26c:	mov	x22, x3
    a270:	add	x24, x24, #0x788
    a274:	add	x26, x0, #0x120
    a278:	add	x27, x0, #0x128
    a27c:	mov	w25, #0x5                   	// #5
    a280:	ldr	x0, [x28]
    a284:	cmp	x0, x22
    a288:	b.cc	a2ac <lzma_index_hash_decode@@XZ_5.0+0x78>  // b.lo, b.ul, b.last
    a28c:	mov	w20, #0x0                   	// #0
    a290:	ldr	w2, [x19, #312]
    a294:	add	x0, x21, x23
    a298:	ldr	x1, [x28]
    a29c:	sub	x1, x1, x23
    a2a0:	bl	31c0 <lzma_crc32@plt>
    a2a4:	str	w0, [x19, #312]
    a2a8:	b	a2dc <lzma_index_hash_decode@@XZ_5.0+0xa8>
    a2ac:	ldr	w1, [x19]
    a2b0:	cmp	w1, #0x6
    a2b4:	b.hi	a534 <lzma_index_hash_decode@@XZ_5.0+0x300>  // b.pmore
    a2b8:	ldrh	w2, [x24, w1, uxtw #1]
    a2bc:	adr	x3, a2c8 <lzma_index_hash_decode@@XZ_5.0+0x94>
    a2c0:	add	x2, x3, w2, sxth #2
    a2c4:	br	x2
    a2c8:	add	x1, x0, #0x1
    a2cc:	str	x1, [x28]
    a2d0:	ldrb	w0, [x21, x0]
    a2d4:	cbz	w0, a2fc <lzma_index_hash_decode@@XZ_5.0+0xc8>
    a2d8:	mov	w20, #0x9                   	// #9
    a2dc:	mov	w0, w20
    a2e0:	ldp	x19, x20, [sp, #16]
    a2e4:	ldp	x21, x22, [sp, #32]
    a2e8:	ldp	x23, x24, [sp, #48]
    a2ec:	ldp	x25, x26, [sp, #64]
    a2f0:	ldp	x27, x28, [sp, #80]
    a2f4:	ldp	x29, x30, [sp], #96
    a2f8:	ret
    a2fc:	mov	w0, #0x1                   	// #1
    a300:	str	w0, [x19]
    a304:	b	a280 <lzma_index_hash_decode@@XZ_5.0+0x4c>
    a308:	mov	x4, x22
    a30c:	mov	x3, x28
    a310:	mov	x2, x21
    a314:	add	x1, x19, #0x130
    a318:	add	x0, x19, #0x118
    a31c:	bl	33c0 <lzma_vli_decode@plt>
    a320:	mov	w20, w0
    a324:	cmp	w0, #0x1
    a328:	b.ne	a290 <lzma_index_hash_decode@@XZ_5.0+0x5c>  // b.any
    a32c:	ldr	x1, [x19, #24]
    a330:	ldr	x0, [x19, #280]
    a334:	cmp	x0, x1
    a338:	b.ne	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.any
    a33c:	cmp	x0, #0x0
    a340:	mov	w1, #0x2                   	// #2
    a344:	mov	w0, #0x4                   	// #4
    a348:	csel	w0, w0, w1, eq  // eq = none
    a34c:	str	xzr, [x19, #304]
    a350:	b	a300 <lzma_index_hash_decode@@XZ_5.0+0xcc>
    a354:	cmp	w1, #0x2
    a358:	mov	x4, x22
    a35c:	csel	x0, x27, x26, ne  // ne = any
    a360:	mov	x3, x28
    a364:	mov	x2, x21
    a368:	add	x1, x19, #0x130
    a36c:	bl	33c0 <lzma_vli_decode@plt>
    a370:	mov	w20, w0
    a374:	cmp	w0, #0x1
    a378:	b.ne	a290 <lzma_index_hash_decode@@XZ_5.0+0x5c>  // b.any
    a37c:	ldr	w0, [x19]
    a380:	str	xzr, [x19, #304]
    a384:	cmp	w0, #0x2
    a388:	ldr	x1, [x19, #288]
    a38c:	b.ne	a3a8 <lzma_index_hash_decode@@XZ_5.0+0x174>  // b.any
    a390:	sub	x1, x1, #0x5
    a394:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    a398:	cmp	x1, x0
    a39c:	b.cs	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.hs, b.nlast
    a3a0:	mov	w0, #0x3                   	// #3
    a3a4:	b	a300 <lzma_index_hash_decode@@XZ_5.0+0xcc>
    a3a8:	ldr	x2, [x19, #296]
    a3ac:	add	x0, x19, #0x90
    a3b0:	bl	a058 <lzma_index_buffer_decode@@XZ_5.0+0x134>
    a3b4:	mov	w20, w0
    a3b8:	cbnz	w0, a2dc <lzma_index_hash_decode@@XZ_5.0+0xa8>
    a3bc:	ldr	x1, [x19, #8]
    a3c0:	ldr	x0, [x19, #144]
    a3c4:	cmp	x1, x0
    a3c8:	b.cc	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.lo, b.ul, b.last
    a3cc:	ldr	x1, [x19, #16]
    a3d0:	ldr	x0, [x19, #152]
    a3d4:	cmp	x1, x0
    a3d8:	b.cc	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.lo, b.ul, b.last
    a3dc:	ldr	x1, [x19, #32]
    a3e0:	ldr	x0, [x19, #168]
    a3e4:	cmp	x1, x0
    a3e8:	b.cc	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.lo, b.ul, b.last
    a3ec:	ldr	x0, [x19, #280]
    a3f0:	mov	w1, #0x2                   	// #2
    a3f4:	subs	x0, x0, #0x1
    a3f8:	str	x0, [x19, #280]
    a3fc:	mov	w0, #0x4                   	// #4
    a400:	csel	w0, w0, w1, eq  // eq = none
    a404:	b	a300 <lzma_index_hash_decode@@XZ_5.0+0xcc>
    a408:	ldr	x0, [x19, #160]
    a40c:	bl	3480 <lzma_vli_size@plt>
    a410:	add	w0, w0, #0x1
    a414:	ldr	x1, [x19, #168]
    a418:	str	w25, [x19]
    a41c:	add	x0, x0, x1
    a420:	neg	x0, x0
    a424:	and	x0, x0, #0x3
    a428:	str	x0, [x19, #304]
    a42c:	ldr	x0, [x19, #304]
    a430:	cbz	x0, a454 <lzma_index_hash_decode@@XZ_5.0+0x220>
    a434:	sub	x0, x0, #0x1
    a438:	str	x0, [x19, #304]
    a43c:	ldr	x0, [x28]
    a440:	add	x1, x0, #0x1
    a444:	str	x1, [x28]
    a448:	ldrb	w0, [x21, x0]
    a44c:	cbz	w0, a280 <lzma_index_hash_decode@@XZ_5.0+0x4c>
    a450:	b	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>
    a454:	ldr	x1, [x19, #8]
    a458:	ldr	x0, [x19, #144]
    a45c:	cmp	x1, x0
    a460:	b.ne	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.any
    a464:	ldr	x1, [x19, #16]
    a468:	ldr	x0, [x19, #152]
    a46c:	cmp	x1, x0
    a470:	b.ne	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.any
    a474:	ldr	x1, [x19, #32]
    a478:	ldr	x0, [x19, #168]
    a47c:	cmp	x1, x0
    a480:	b.ne	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.any
    a484:	add	x20, x19, #0x28
    a488:	mov	w1, #0xa                   	// #10
    a48c:	mov	x0, x20
    a490:	bl	b038 <lzma_check_size@@XZ_5.0+0xbc>
    a494:	mov	w1, #0xa                   	// #10
    a498:	add	x24, x19, #0xb0
    a49c:	mov	x0, x24
    a4a0:	bl	b038 <lzma_check_size@@XZ_5.0+0xbc>
    a4a4:	mov	w0, #0xa                   	// #10
    a4a8:	bl	3270 <lzma_check_size@plt>
    a4ac:	mov	x1, x24
    a4b0:	mov	w2, w0
    a4b4:	mov	x0, x20
    a4b8:	bl	3330 <memcmp@plt>
    a4bc:	cbnz	w0, a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>
    a4c0:	ldr	w2, [x19, #312]
    a4c4:	add	x0, x21, x23
    a4c8:	ldr	x1, [x28]
    a4cc:	sub	x1, x1, x23
    a4d0:	bl	31c0 <lzma_crc32@plt>
    a4d4:	str	w0, [x19, #312]
    a4d8:	mov	w0, #0x6                   	// #6
    a4dc:	str	w0, [x19]
    a4e0:	ldr	x1, [x28]
    a4e4:	cmp	x1, x22
    a4e8:	b.eq	a53c <lzma_index_hash_decode@@XZ_5.0+0x308>  // b.none
    a4ec:	ldr	x0, [x19, #304]
    a4f0:	lsl	w2, w0, #3
    a4f4:	ldr	w0, [x19, #312]
    a4f8:	lsr	w0, w0, w2
    a4fc:	add	x2, x1, #0x1
    a500:	str	x2, [x28]
    a504:	ldrb	w1, [x21, x1]
    a508:	cmp	w1, w0, uxtb
    a50c:	b.ne	a2d8 <lzma_index_hash_decode@@XZ_5.0+0xa4>  // b.any
    a510:	ldr	x0, [x19, #304]
    a514:	add	x0, x0, #0x1
    a518:	str	x0, [x19, #304]
    a51c:	cmp	x0, #0x3
    a520:	b.ls	a4e0 <lzma_index_hash_decode@@XZ_5.0+0x2ac>  // b.plast
    a524:	mov	w20, #0x1                   	// #1
    a528:	b	a2dc <lzma_index_hash_decode@@XZ_5.0+0xa8>
    a52c:	mov	w20, #0xa                   	// #10
    a530:	b	a2dc <lzma_index_hash_decode@@XZ_5.0+0xa8>
    a534:	mov	w20, #0xb                   	// #11
    a538:	b	a2dc <lzma_index_hash_decode@@XZ_5.0+0xa8>
    a53c:	mov	w20, #0x0                   	// #0
    a540:	b	a2dc <lzma_index_hash_decode@@XZ_5.0+0xa8>

000000000000a544 <lzma_stream_buffer_decode@@XZ_5.0>:
    a544:	sub	sp, sp, #0xd0
    a548:	stp	x29, x30, [sp, #16]
    a54c:	add	x29, sp, #0x10
    a550:	stp	x19, x20, [sp, #32]
    a554:	stp	x21, x22, [sp, #48]
    a558:	stp	x23, x24, [sp, #64]
    a55c:	stp	x25, x26, [sp, #80]
    a560:	stp	x27, x28, [sp, #96]
    a564:	ldr	x28, [sp, #208]
    a568:	cbz	x4, a598 <lzma_stream_buffer_decode@@XZ_5.0+0x54>
    a56c:	mov	x26, x0
    a570:	mov	x24, x2
    a574:	ldr	x0, [x4]
    a578:	mov	x21, x3
    a57c:	mov	x20, x4
    a580:	mov	x23, x5
    a584:	mov	x27, x6
    a588:	mov	x22, x7
    a58c:	cmp	x5, x0
    a590:	cbnz	x3, a5a0 <lzma_stream_buffer_decode@@XZ_5.0+0x5c>
    a594:	b.eq	a5a4 <lzma_stream_buffer_decode@@XZ_5.0+0x60>  // b.none
    a598:	mov	w19, #0xb                   	// #11
    a59c:	b	a668 <lzma_stream_buffer_decode@@XZ_5.0+0x124>
    a5a0:	b.cc	a598 <lzma_stream_buffer_decode@@XZ_5.0+0x54>  // b.lo, b.ul, b.last
    a5a4:	cbz	x22, a598 <lzma_stream_buffer_decode@@XZ_5.0+0x54>
    a5a8:	ldr	x0, [x22]
    a5ac:	cmp	x28, x0
    a5b0:	cbnz	x27, a68c <lzma_stream_buffer_decode@@XZ_5.0+0x148>
    a5b4:	b.ne	a598 <lzma_stream_buffer_decode@@XZ_5.0+0x54>  // b.any
    a5b8:	tbnz	w1, #2, a598 <lzma_stream_buffer_decode@@XZ_5.0+0x54>
    a5bc:	ldr	x2, [x26]
    a5c0:	mov	x0, #0xffffffffffffffff    	// #-1
    a5c4:	add	x25, sp, #0x88
    a5c8:	mov	w3, w1
    a5cc:	mov	x1, x24
    a5d0:	stp	xzr, x0, [sp, #136]
    a5d4:	mov	x0, x25
    a5d8:	stp	xzr, xzr, [sp, #152]
    a5dc:	stp	xzr, xzr, [sp, #168]
    a5e0:	stp	xzr, xzr, [sp, #184]
    a5e4:	str	xzr, [sp, #200]
    a5e8:	bl	ab3c <lzma_stream_buffer_decode@@XZ_5.0+0x5f8>
    a5ec:	mov	w19, w0
    a5f0:	cbnz	w0, a65c <lzma_stream_buffer_decode@@XZ_5.0+0x118>
    a5f4:	mov	w0, #0x3                   	// #3
    a5f8:	mov	x2, x21
    a5fc:	ldr	x9, [x20]
    a600:	mov	x7, x28
    a604:	ldr	x8, [x22]
    a608:	str	w0, [sp]
    a60c:	ldr	x0, [sp, #136]
    a610:	mov	x6, x22
    a614:	ldr	x10, [sp, #160]
    a618:	mov	x5, x27
    a61c:	mov	x4, x23
    a620:	mov	x3, x20
    a624:	mov	x1, x24
    a628:	stp	x8, x9, [sp, #112]
    a62c:	blr	x10
    a630:	mov	w21, w0
    a634:	cmp	w0, #0x1
    a638:	b.eq	a65c <lzma_stream_buffer_decode@@XZ_5.0+0x118>  // b.none
    a63c:	ldp	x8, x9, [sp, #112]
    a640:	str	x9, [x20]
    a644:	str	x8, [x22]
    a648:	cbnz	w0, a694 <lzma_stream_buffer_decode@@XZ_5.0+0x150>
    a64c:	ldr	x0, [x20]
    a650:	cmp	x0, x23
    a654:	cset	w19, ne  // ne = any
    a658:	add	w19, w19, #0x9
    a65c:	mov	x1, x24
    a660:	mov	x0, x25
    a664:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    a668:	mov	w0, w19
    a66c:	ldp	x29, x30, [sp, #16]
    a670:	ldp	x19, x20, [sp, #32]
    a674:	ldp	x21, x22, [sp, #48]
    a678:	ldp	x23, x24, [sp, #64]
    a67c:	ldp	x25, x26, [sp, #80]
    a680:	ldp	x27, x28, [sp, #96]
    a684:	add	sp, sp, #0xd0
    a688:	ret
    a68c:	b.cs	a5b8 <lzma_stream_buffer_decode@@XZ_5.0+0x74>  // b.hs, b.nlast
    a690:	b	a598 <lzma_stream_buffer_decode@@XZ_5.0+0x54>
    a694:	cmp	w0, #0x6
    a698:	b.ne	a6b4 <lzma_stream_buffer_decode@@XZ_5.0+0x170>  // b.any
    a69c:	ldr	x0, [sp, #136]
    a6a0:	add	x2, sp, #0x80
    a6a4:	ldr	x4, [sp, #192]
    a6a8:	mov	x1, x26
    a6ac:	mov	x3, #0x0                   	// #0
    a6b0:	blr	x4
    a6b4:	mov	w19, w21
    a6b8:	b	a65c <lzma_stream_buffer_decode@@XZ_5.0+0x118>
    a6bc:	ldr	w0, [x0, #304]
    a6c0:	ret
    a6c4:	ldr	x4, [x0, #360]
    a6c8:	str	x4, [x1]
    a6cc:	ldr	x1, [x0, #352]
    a6d0:	str	x1, [x2]
    a6d4:	cbz	x3, a6e8 <lzma_stream_buffer_decode@@XZ_5.0+0x1a4>
    a6d8:	ldr	x1, [x0, #360]
    a6dc:	cmp	x1, x3
    a6e0:	b.hi	a6f0 <lzma_stream_buffer_decode@@XZ_5.0+0x1ac>  // b.pmore
    a6e4:	str	x3, [x0, #352]
    a6e8:	mov	w0, #0x0                   	// #0
    a6ec:	ret
    a6f0:	mov	w0, #0x6                   	// #6
    a6f4:	b	a6ec <lzma_stream_buffer_decode@@XZ_5.0+0x1a8>
    a6f8:	stp	x29, x30, [sp, #-32]!
    a6fc:	mov	x29, sp
    a700:	stp	x19, x20, [sp, #16]
    a704:	mov	x19, x0
    a708:	mov	x20, x1
    a70c:	add	x0, x0, #0x8
    a710:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    a714:	ldr	x0, [x19, #344]
    a718:	mov	x1, x20
    a71c:	bl	3310 <lzma_index_hash_end@plt>
    a720:	mov	x1, x20
    a724:	mov	x0, x19
    a728:	ldp	x19, x20, [sp, #16]
    a72c:	ldp	x29, x30, [sp], #32
    a730:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    a734:	sub	sp, sp, #0xf0
    a738:	stp	x29, x30, [sp, #16]
    a73c:	add	x29, sp, #0x10
    a740:	stp	x25, x26, [sp, #80]
    a744:	mov	x25, x0
    a748:	adrp	x0, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    a74c:	stp	x19, x20, [sp, #32]
    a750:	mov	x19, x3
    a754:	mov	x20, x4
    a758:	stp	x21, x22, [sp, #48]
    a75c:	mov	x22, x1
    a760:	mov	x21, x2
    a764:	stp	x23, x24, [sp, #64]
    a768:	add	x23, x25, #0x180
    a76c:	add	x24, sp, #0xa0
    a770:	stp	x27, x28, [sp, #96]
    a774:	mov	x27, x7
    a778:	add	x28, x25, #0x178
    a77c:	add	x0, x0, #0x798
    a780:	stp	x5, x6, [sp, #120]
    a784:	str	x0, [sp, #136]
    a788:	ldr	w0, [x25]
    a78c:	cmp	w0, #0x5
    a790:	b.hi	ab14 <lzma_stream_buffer_decode@@XZ_5.0+0x5d0>  // b.pmore
    a794:	ldr	x1, [sp, #136]
    a798:	ldrh	w0, [x1, w0, uxtw #1]
    a79c:	adr	x1, a7a8 <lzma_stream_buffer_decode@@XZ_5.0+0x264>
    a7a0:	add	x0, x1, w0, sxth #2
    a7a4:	br	x0
    a7a8:	mov	x4, x28
    a7ac:	mov	x3, x23
    a7b0:	mov	x2, x20
    a7b4:	mov	x1, x19
    a7b8:	mov	x0, x21
    a7bc:	mov	x5, #0xc                   	// #12
    a7c0:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    a7c4:	ldr	x0, [x25, #376]
    a7c8:	cmp	x0, #0xb
    a7cc:	b.hi	a7d8 <lzma_stream_buffer_decode@@XZ_5.0+0x294>  // b.pmore
    a7d0:	mov	w2, #0x0                   	// #0
    a7d4:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    a7d8:	str	xzr, [x25, #376]
    a7dc:	mov	x1, x23
    a7e0:	add	x0, x25, #0x120
    a7e4:	bl	34f0 <lzma_stream_header_decode@plt>
    a7e8:	mov	w2, w0
    a7ec:	cbz	w0, a808 <lzma_stream_buffer_decode@@XZ_5.0+0x2c4>
    a7f0:	cmp	w0, #0x7
    a7f4:	b.ne	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>  // b.any
    a7f8:	ldrb	w0, [x25, #373]
    a7fc:	cbnz	w0, aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    a800:	mov	w2, #0x9                   	// #9
    a804:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    a808:	mov	w1, #0x1                   	// #1
    a80c:	str	w1, [x25]
    a810:	ldrb	w1, [x25, #368]
    a814:	ldr	w0, [x25, #304]
    a818:	str	w0, [x25, #88]
    a81c:	strb	wzr, [x25, #373]
    a820:	cbz	w1, a828 <lzma_stream_buffer_decode@@XZ_5.0+0x2e4>
    a824:	cbz	w0, ab1c <lzma_stream_buffer_decode@@XZ_5.0+0x5d8>
    a828:	ldrb	w1, [x25, #369]
    a82c:	cbz	w1, a83c <lzma_stream_buffer_decode@@XZ_5.0+0x2f8>
    a830:	bl	30e0 <lzma_check_is_supported@plt>
    a834:	tst	w0, #0xff
    a838:	b.eq	ab24 <lzma_stream_buffer_decode@@XZ_5.0+0x5e0>  // b.none
    a83c:	ldrb	w0, [x25, #370]
    a840:	cbnz	w0, ab2c <lzma_stream_buffer_decode@@XZ_5.0+0x5e8>
    a844:	ldr	x0, [x19]
    a848:	cmp	x0, x20
    a84c:	b.cs	a7d0 <lzma_stream_buffer_decode@@XZ_5.0+0x28c>  // b.hs, b.nlast
    a850:	ldr	x1, [x25, #376]
    a854:	cbnz	x1, a878 <lzma_stream_buffer_decode@@XZ_5.0+0x334>
    a858:	ldrb	w0, [x21, x0]
    a85c:	cbnz	w0, a86c <lzma_stream_buffer_decode@@XZ_5.0+0x328>
    a860:	mov	w0, #0x3                   	// #3
    a864:	str	w0, [x25]
    a868:	b	a788 <lzma_stream_buffer_decode@@XZ_5.0+0x244>
    a86c:	add	w0, w0, #0x1
    a870:	lsl	w0, w0, #2
    a874:	str	w0, [x25, #84]
    a878:	ldr	w5, [x25, #84]
    a87c:	mov	x1, x19
    a880:	mov	x4, x28
    a884:	mov	x3, x23
    a888:	mov	x2, x20
    a88c:	mov	x0, x21
    a890:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    a894:	ldr	x1, [x25, #376]
    a898:	ldr	w0, [x25, #84]
    a89c:	cmp	x1, x0
    a8a0:	b.cc	a7d0 <lzma_stream_buffer_decode@@XZ_5.0+0x28c>  // b.lo, b.ul, b.last
    a8a4:	mov	w0, #0x1                   	// #1
    a8a8:	str	w0, [x25, #80]
    a8ac:	str	x24, [x25, #112]
    a8b0:	mov	x2, x23
    a8b4:	str	xzr, [x25, #376]
    a8b8:	add	x26, x25, #0x50
    a8bc:	mov	x1, x22
    a8c0:	mov	x0, x26
    a8c4:	bl	3340 <lzma_block_header_decode@plt>
    a8c8:	mov	w2, w0
    a8cc:	cbnz	w0, aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    a8d0:	ldrb	w0, [x25, #371]
    a8d4:	strb	w0, [x25, #280]
    a8d8:	mov	x0, x24
    a8dc:	bl	32e0 <lzma_raw_decoder_memusage@plt>
    a8e0:	cmn	x0, #0x1
    a8e4:	b.eq	a9ac <lzma_stream_buffer_decode@@XZ_5.0+0x468>  // b.none
    a8e8:	ldr	x1, [x25, #352]
    a8ec:	str	x0, [x25, #360]
    a8f0:	cmp	x1, x0
    a8f4:	b.cc	a9b4 <lzma_stream_buffer_decode@@XZ_5.0+0x470>  // b.lo, b.ul, b.last
    a8f8:	mov	x2, x26
    a8fc:	mov	x1, x22
    a900:	add	x0, x25, #0x8
    a904:	bl	90c0 <lzma_block_buffer_decode@@XZ_5.0+0x174>
    a908:	mov	w2, w0
    a90c:	mov	x3, #0x0                   	// #0
    a910:	add	x0, x24, x3
    a914:	mov	x1, x22
    a918:	str	x3, [sp, #144]
    a91c:	str	w2, [sp, #156]
    a920:	ldr	x0, [x0, #8]
    a924:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    a928:	ldr	x3, [sp, #144]
    a92c:	ldr	w2, [sp, #156]
    a930:	add	x3, x3, #0x10
    a934:	cmp	x3, #0x40
    a938:	b.ne	a910 <lzma_stream_buffer_decode@@XZ_5.0+0x3cc>  // b.any
    a93c:	str	xzr, [x25, #112]
    a940:	cbnz	w2, aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    a944:	mov	w0, #0x2                   	// #2
    a948:	str	w0, [x25]
    a94c:	ldr	w0, [sp, #240]
    a950:	mov	x2, x21
    a954:	ldr	x9, [x25, #32]
    a958:	str	w0, [sp]
    a95c:	ldp	x5, x6, [sp, #120]
    a960:	mov	x7, x27
    a964:	ldr	x0, [x25, #8]
    a968:	mov	x4, x20
    a96c:	mov	x3, x19
    a970:	mov	x1, x22
    a974:	blr	x9
    a978:	mov	w2, w0
    a97c:	cmp	w0, #0x1
    a980:	b.ne	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>  // b.any
    a984:	add	x0, x25, #0x50
    a988:	bl	3190 <lzma_block_unpadded_size@plt>
    a98c:	mov	x1, x0
    a990:	ldr	x2, [x25, #104]
    a994:	ldr	x0, [x25, #344]
    a998:	bl	31b0 <lzma_index_hash_append@plt>
    a99c:	mov	w2, w0
    a9a0:	cbnz	w0, aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    a9a4:	mov	w0, #0x1                   	// #1
    a9a8:	b	a864 <lzma_stream_buffer_decode@@XZ_5.0+0x320>
    a9ac:	mov	w2, #0x8                   	// #8
    a9b0:	b	a90c <lzma_stream_buffer_decode@@XZ_5.0+0x3c8>
    a9b4:	mov	w2, #0x6                   	// #6
    a9b8:	b	a90c <lzma_stream_buffer_decode@@XZ_5.0+0x3c8>
    a9bc:	ldr	x0, [x19]
    a9c0:	cmp	x0, x20
    a9c4:	b.cs	a7d0 <lzma_stream_buffer_decode@@XZ_5.0+0x28c>  // b.hs, b.nlast
    a9c8:	ldr	x0, [x25, #344]
    a9cc:	mov	x2, x19
    a9d0:	mov	x3, x20
    a9d4:	mov	x1, x21
    a9d8:	bl	3130 <lzma_index_hash_decode@plt>
    a9dc:	mov	w2, w0
    a9e0:	cmp	w0, #0x1
    a9e4:	b.ne	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>  // b.any
    a9e8:	mov	w0, #0x4                   	// #4
    a9ec:	str	w0, [x25]
    a9f0:	mov	x4, x28
    a9f4:	mov	x3, x23
    a9f8:	mov	x2, x20
    a9fc:	mov	x1, x19
    aa00:	mov	x0, x21
    aa04:	mov	x5, #0xc                   	// #12
    aa08:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    aa0c:	ldr	x0, [x25, #376]
    aa10:	cmp	x0, #0xb
    aa14:	b.ls	a7d0 <lzma_stream_buffer_decode@@XZ_5.0+0x28c>  // b.plast
    aa18:	str	xzr, [x25, #376]
    aa1c:	mov	x1, x23
    aa20:	mov	x0, x24
    aa24:	bl	3430 <lzma_stream_footer_decode@plt>
    aa28:	mov	w2, w0
    aa2c:	cbz	w0, aa60 <lzma_stream_buffer_decode@@XZ_5.0+0x51c>
    aa30:	cmp	w0, #0x7
    aa34:	mov	w0, #0x9                   	// #9
    aa38:	csel	w2, w2, w0, ne  // ne = any
    aa3c:	mov	w0, w2
    aa40:	ldp	x29, x30, [sp, #16]
    aa44:	ldp	x19, x20, [sp, #32]
    aa48:	ldp	x21, x22, [sp, #48]
    aa4c:	ldp	x23, x24, [sp, #64]
    aa50:	ldp	x25, x26, [sp, #80]
    aa54:	ldp	x27, x28, [sp, #96]
    aa58:	add	sp, sp, #0xf0
    aa5c:	ret
    aa60:	ldr	x0, [x25, #344]
    aa64:	bl	34d0 <lzma_index_hash_size@plt>
    aa68:	ldr	x1, [sp, #168]
    aa6c:	cmp	x0, x1
    aa70:	b.ne	a800 <lzma_stream_buffer_decode@@XZ_5.0+0x2bc>  // b.any
    aa74:	mov	x1, x24
    aa78:	add	x0, x25, #0x120
    aa7c:	bl	3110 <lzma_stream_flags_compare@plt>
    aa80:	mov	w2, w0
    aa84:	cbnz	w0, aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    aa88:	ldrb	w0, [x25, #372]
    aa8c:	cbz	w0, aab8 <lzma_stream_buffer_decode@@XZ_5.0+0x574>
    aa90:	mov	w0, #0x5                   	// #5
    aa94:	str	w0, [x25]
    aa98:	ldr	x0, [x19]
    aa9c:	cmp	x0, x20
    aaa0:	b.cc	aac0 <lzma_stream_buffer_decode@@XZ_5.0+0x57c>  // b.lo, b.ul, b.last
    aaa4:	ldr	w0, [sp, #240]
    aaa8:	cmp	w0, #0x3
    aaac:	b.ne	a7d0 <lzma_stream_buffer_decode@@XZ_5.0+0x28c>  // b.any
    aab0:	ldr	x0, [x25, #376]
    aab4:	cbnz	x0, a800 <lzma_stream_buffer_decode@@XZ_5.0+0x2bc>
    aab8:	mov	w2, #0x1                   	// #1
    aabc:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    aac0:	ldrb	w2, [x21, x0]
    aac4:	ldr	x1, [x25, #376]
    aac8:	cbnz	w2, aae4 <lzma_stream_buffer_decode@@XZ_5.0+0x5a0>
    aacc:	add	x1, x1, #0x1
    aad0:	add	x0, x0, #0x1
    aad4:	and	x1, x1, #0x3
    aad8:	str	x0, [x19]
    aadc:	str	x1, [x25, #376]
    aae0:	b	aa98 <lzma_stream_buffer_decode@@XZ_5.0+0x554>
    aae4:	cbz	x1, aaf4 <lzma_stream_buffer_decode@@XZ_5.0+0x5b0>
    aae8:	add	x0, x0, #0x1
    aaec:	str	x0, [x19]
    aaf0:	b	a800 <lzma_stream_buffer_decode@@XZ_5.0+0x2bc>
    aaf4:	ldr	x0, [x25, #344]
    aaf8:	mov	x1, x22
    aafc:	bl	3280 <lzma_index_hash_init@plt>
    ab00:	str	x0, [x25, #344]
    ab04:	cbz	x0, ab34 <lzma_stream_buffer_decode@@XZ_5.0+0x5f0>
    ab08:	str	wzr, [x25]
    ab0c:	str	xzr, [x25, #376]
    ab10:	b	a788 <lzma_stream_buffer_decode@@XZ_5.0+0x244>
    ab14:	mov	w2, #0xb                   	// #11
    ab18:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    ab1c:	mov	w2, #0x2                   	// #2
    ab20:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    ab24:	mov	w2, #0x3                   	// #3
    ab28:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    ab2c:	mov	w2, #0x4                   	// #4
    ab30:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    ab34:	mov	w2, #0x5                   	// #5
    ab38:	b	aa3c <lzma_stream_buffer_decode@@XZ_5.0+0x4f8>
    ab3c:	stp	x29, x30, [sp, #-64]!
    ab40:	mov	x29, sp
    ab44:	stp	x21, x22, [sp, #32]
    ab48:	mov	x22, x2
    ab4c:	mov	x21, x0
    ab50:	ldr	x2, [x0, #16]
    ab54:	stp	x19, x20, [sp, #16]
    ab58:	adrp	x19, a000 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    ab5c:	stp	x23, x24, [sp, #48]
    ab60:	add	x19, x19, #0xb3c
    ab64:	mov	x23, x1
    ab68:	mov	w20, w3
    ab6c:	cmp	x2, x19
    ab70:	b.eq	ab78 <lzma_stream_buffer_decode@@XZ_5.0+0x634>  // b.none
    ab74:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    ab78:	str	x19, [x21, #16]
    ab7c:	ands	w24, w20, #0xffffffe0
    ab80:	b.ne	ac70 <lzma_stream_buffer_decode@@XZ_5.0+0x72c>  // b.any
    ab84:	ldr	x19, [x21]
    ab88:	cbnz	x19, ac10 <lzma_stream_buffer_decode@@XZ_5.0+0x6cc>
    ab8c:	mov	x1, x23
    ab90:	mov	x0, #0x580                 	// #1408
    ab94:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    ab98:	mov	x19, x0
    ab9c:	cbnz	x0, abbc <lzma_stream_buffer_decode@@XZ_5.0+0x678>
    aba0:	mov	w24, #0x5                   	// #5
    aba4:	mov	w0, w24
    aba8:	ldp	x19, x20, [sp, #16]
    abac:	ldp	x21, x22, [sp, #32]
    abb0:	ldp	x23, x24, [sp, #48]
    abb4:	ldp	x29, x30, [sp], #64
    abb8:	ret
    abbc:	adrp	x0, a000 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    abc0:	add	x0, x0, #0x734
    abc4:	str	x0, [x21, #24]
    abc8:	adrp	x0, a000 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    abcc:	add	x0, x0, #0x6f8
    abd0:	str	x0, [x21, #32]
    abd4:	adrp	x0, a000 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    abd8:	add	x0, x0, #0x6bc
    abdc:	str	x0, [x21, #48]
    abe0:	adrp	x0, a000 <lzma_index_buffer_decode@@XZ_5.0+0xdc>
    abe4:	add	x0, x0, #0x6c4
    abe8:	str	x19, [x21]
    abec:	str	xzr, [x19, #8]
    abf0:	stp	xzr, xzr, [x19, #24]
    abf4:	stp	xzr, xzr, [x19, #40]
    abf8:	str	x0, [x21, #56]
    abfc:	mov	x0, #0xffffffffffffffff    	// #-1
    ac00:	str	x0, [x19, #16]
    ac04:	stp	xzr, xzr, [x19, #56]
    ac08:	str	xzr, [x19, #72]
    ac0c:	str	xzr, [x19, #344]
    ac10:	cmp	x22, #0x0
    ac14:	mov	x1, #0x8000                	// #32768
    ac18:	mov	x0, #0x1                   	// #1
    ac1c:	csel	x22, x22, x0, ne  // ne = any
    ac20:	stp	x22, x1, [x19, #352]
    ac24:	and	w1, w20, #0x1
    ac28:	strb	w1, [x19, #368]
    ac2c:	ubfx	x1, x20, #1, #1
    ac30:	strb	w0, [x19, #373]
    ac34:	ldr	x0, [x19, #344]
    ac38:	strb	w1, [x19, #369]
    ac3c:	ubfx	x1, x20, #2, #1
    ac40:	strb	w1, [x19, #370]
    ac44:	ubfx	x1, x20, #4, #1
    ac48:	ubfx	x20, x20, #3, #1
    ac4c:	strb	w1, [x19, #371]
    ac50:	mov	x1, x23
    ac54:	strb	w20, [x19, #372]
    ac58:	bl	3280 <lzma_index_hash_init@plt>
    ac5c:	str	x0, [x19, #344]
    ac60:	cbz	x0, aba0 <lzma_stream_buffer_decode@@XZ_5.0+0x65c>
    ac64:	str	wzr, [x19]
    ac68:	str	xzr, [x19, #376]
    ac6c:	b	aba4 <lzma_stream_buffer_decode@@XZ_5.0+0x660>
    ac70:	mov	w24, #0x8                   	// #8
    ac74:	b	aba4 <lzma_stream_buffer_decode@@XZ_5.0+0x660>

000000000000ac78 <lzma_stream_decoder@@XZ_5.0>:
    ac78:	stp	x29, x30, [sp, #-48]!
    ac7c:	mov	x29, sp
    ac80:	stp	x19, x20, [sp, #16]
    ac84:	mov	x20, x0
    ac88:	stp	x21, x22, [sp, #32]
    ac8c:	mov	x21, x1
    ac90:	mov	w22, w2
    ac94:	bl	390c <lzma_version_string@@XZ_5.0+0x23c>
    ac98:	mov	w19, w0
    ac9c:	cbnz	w0, acc0 <lzma_stream_decoder@@XZ_5.0+0x48>
    aca0:	ldp	x1, x0, [x20, #48]
    aca4:	mov	w3, w22
    aca8:	mov	x2, x21
    acac:	bl	ab3c <lzma_stream_buffer_decode@@XZ_5.0+0x5f8>
    acb0:	mov	w19, w0
    acb4:	cbz	w0, acd4 <lzma_stream_decoder@@XZ_5.0+0x5c>
    acb8:	mov	x0, x20
    acbc:	bl	3320 <lzma_end@plt>
    acc0:	mov	w0, w19
    acc4:	ldp	x19, x20, [sp, #16]
    acc8:	ldp	x21, x22, [sp, #32]
    accc:	ldp	x29, x30, [sp], #48
    acd0:	ret
    acd4:	ldr	x0, [x20, #56]
    acd8:	mov	w1, #0x1                   	// #1
    acdc:	strb	w1, [x0, #88]
    ace0:	strb	w1, [x0, #91]
    ace4:	b	acc0 <lzma_stream_decoder@@XZ_5.0+0x48>
    ace8:	ldr	w0, [x0]
    acec:	ret

000000000000acf0 <lzma_stream_header_decode@@XZ_5.0>:
    acf0:	stp	x29, x30, [sp, #-32]!
    acf4:	mov	x2, #0x6                   	// #6
    acf8:	mov	x29, sp
    acfc:	stp	x19, x20, [sp, #16]
    ad00:	mov	x19, x1
    ad04:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    ad08:	mov	x20, x0
    ad0c:	mov	x0, x19
    ad10:	ldr	x1, [x1, #3936]
    ad14:	bl	3330 <memcmp@plt>
    ad18:	cbnz	w0, ad7c <lzma_stream_header_decode@@XZ_5.0+0x8c>
    ad1c:	mov	x1, #0x2                   	// #2
    ad20:	mov	w2, #0x0                   	// #0
    ad24:	add	x0, x19, #0x6
    ad28:	bl	31c0 <lzma_crc32@plt>
    ad2c:	mov	w1, w0
    ad30:	add	x0, x19, #0x8
    ad34:	bl	ace8 <lzma_stream_decoder@@XZ_5.0+0x70>
    ad38:	cmp	w0, w1
    ad3c:	b.ne	ad84 <lzma_stream_header_decode@@XZ_5.0+0x94>  // b.any
    ad40:	ldrb	w0, [x19, #6]
    ad44:	cbnz	w0, ad8c <lzma_stream_header_decode@@XZ_5.0+0x9c>
    ad48:	ldrb	w0, [x19, #7]
    ad4c:	tst	w0, #0xf0
    ad50:	b.ne	ad8c <lzma_stream_header_decode@@XZ_5.0+0x9c>  // b.any
    ad54:	str	wzr, [x20]
    ad58:	ldrb	w0, [x19, #7]
    ad5c:	and	w0, w0, #0xf
    ad60:	str	w0, [x20, #16]
    ad64:	mov	x0, #0xffffffffffffffff    	// #-1
    ad68:	str	x0, [x20, #8]
    ad6c:	mov	w0, #0x0                   	// #0
    ad70:	ldp	x19, x20, [sp, #16]
    ad74:	ldp	x29, x30, [sp], #32
    ad78:	ret
    ad7c:	mov	w0, #0x7                   	// #7
    ad80:	b	ad70 <lzma_stream_header_decode@@XZ_5.0+0x80>
    ad84:	mov	w0, #0x9                   	// #9
    ad88:	b	ad70 <lzma_stream_header_decode@@XZ_5.0+0x80>
    ad8c:	mov	w0, #0x8                   	// #8
    ad90:	b	ad70 <lzma_stream_header_decode@@XZ_5.0+0x80>

000000000000ad94 <lzma_stream_footer_decode@@XZ_5.0>:
    ad94:	stp	x29, x30, [sp, #-48]!
    ad98:	mov	x2, #0x2                   	// #2
    ad9c:	mov	x29, sp
    ada0:	stp	x19, x20, [sp, #16]
    ada4:	mov	x19, x1
    ada8:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    adac:	mov	x20, x0
    adb0:	add	x0, x19, #0xa
    adb4:	ldr	x1, [x1, #3976]
    adb8:	str	x21, [sp, #32]
    adbc:	bl	3330 <memcmp@plt>
    adc0:	cbnz	w0, ae38 <lzma_stream_footer_decode@@XZ_5.0+0xa4>
    adc4:	mov	x1, #0x6                   	// #6
    adc8:	add	x21, x19, #0x4
    adcc:	mov	w2, #0x0                   	// #0
    add0:	mov	x0, x21
    add4:	bl	31c0 <lzma_crc32@plt>
    add8:	mov	w1, w0
    addc:	mov	x0, x19
    ade0:	bl	ace8 <lzma_stream_decoder@@XZ_5.0+0x70>
    ade4:	cmp	w0, w1
    ade8:	b.ne	ae40 <lzma_stream_footer_decode@@XZ_5.0+0xac>  // b.any
    adec:	ldrb	w0, [x19, #8]
    adf0:	cbnz	w0, ae48 <lzma_stream_footer_decode@@XZ_5.0+0xb4>
    adf4:	ldrb	w0, [x19, #9]
    adf8:	tst	w0, #0xf0
    adfc:	b.ne	ae48 <lzma_stream_footer_decode@@XZ_5.0+0xb4>  // b.any
    ae00:	str	wzr, [x20]
    ae04:	ldrb	w0, [x19, #9]
    ae08:	and	w0, w0, #0xf
    ae0c:	str	w0, [x20, #16]
    ae10:	mov	x0, x21
    ae14:	bl	ace8 <lzma_stream_decoder@@XZ_5.0+0x70>
    ae18:	ubfiz	x0, x0, #2, #32
    ae1c:	add	x0, x0, #0x4
    ae20:	str	x0, [x20, #8]
    ae24:	mov	w0, #0x0                   	// #0
    ae28:	ldp	x19, x20, [sp, #16]
    ae2c:	ldr	x21, [sp, #32]
    ae30:	ldp	x29, x30, [sp], #48
    ae34:	ret
    ae38:	mov	w0, #0x7                   	// #7
    ae3c:	b	ae28 <lzma_stream_footer_decode@@XZ_5.0+0x94>
    ae40:	mov	w0, #0x9                   	// #9
    ae44:	b	ae28 <lzma_stream_footer_decode@@XZ_5.0+0x94>
    ae48:	mov	w0, #0x8                   	// #8
    ae4c:	b	ae28 <lzma_stream_footer_decode@@XZ_5.0+0x94>

000000000000ae50 <lzma_vli_decode@@XZ_5.0>:
    ae50:	sub	sp, sp, #0x10
    ae54:	mov	x5, x0
    ae58:	str	xzr, [sp, #8]
    ae5c:	cbnz	x1, aed0 <lzma_vli_decode@@XZ_5.0+0x80>
    ae60:	ldr	x0, [x3]
    ae64:	str	xzr, [x5]
    ae68:	cmp	x0, x4
    ae6c:	b.cs	af4c <lzma_vli_decode@@XZ_5.0+0xfc>  // b.hs, b.nlast
    ae70:	add	x1, sp, #0x8
    ae74:	ldr	x0, [x1]
    ae78:	mov	w10, #0x7                   	// #7
    ae7c:	ldr	x6, [x3]
    ae80:	ldr	x7, [x5]
    ae84:	mul	w11, w0, w10
    ae88:	ldrb	w8, [x2, x6]
    ae8c:	add	x0, x0, #0x1
    ae90:	add	x6, x6, #0x1
    ae94:	and	x9, x8, #0x7f
    ae98:	lsl	x9, x9, x11
    ae9c:	add	x7, x7, x9
    aea0:	tbnz	w8, #7, af14 <lzma_vli_decode@@XZ_5.0+0xc4>
    aea4:	str	x0, [x1]
    aea8:	str	x6, [x3]
    aeac:	str	x7, [x5]
    aeb0:	cbnz	w8, aebc <lzma_vli_decode@@XZ_5.0+0x6c>
    aeb4:	cmp	x0, #0x1
    aeb8:	b.hi	af4c <lzma_vli_decode@@XZ_5.0+0xfc>  // b.pmore
    aebc:	add	x0, sp, #0x8
    aec0:	cmp	x1, x0
    aec4:	cset	w0, ne  // ne = any
    aec8:	add	sp, sp, #0x10
    aecc:	ret
    aed0:	ldr	x0, [x1]
    aed4:	cbnz	x0, aef0 <lzma_vli_decode@@XZ_5.0+0xa0>
    aed8:	str	xzr, [x5]
    aedc:	ldr	x0, [x3]
    aee0:	cmp	x0, x4
    aee4:	b.cc	ae74 <lzma_vli_decode@@XZ_5.0+0x24>  // b.lo, b.ul, b.last
    aee8:	mov	w0, #0xa                   	// #10
    aeec:	b	aec8 <lzma_vli_decode@@XZ_5.0+0x78>
    aef0:	cmp	x0, #0x8
    aef4:	b.hi	af0c <lzma_vli_decode@@XZ_5.0+0xbc>  // b.pmore
    aef8:	mov	w6, #0x7                   	// #7
    aefc:	mul	w0, w0, w6
    af00:	ldr	x6, [x5]
    af04:	lsr	x0, x6, x0
    af08:	cbz	x0, aedc <lzma_vli_decode@@XZ_5.0+0x8c>
    af0c:	mov	w0, #0xb                   	// #11
    af10:	b	aec8 <lzma_vli_decode@@XZ_5.0+0x78>
    af14:	cmp	x0, #0x9
    af18:	b.ne	af2c <lzma_vli_decode@@XZ_5.0+0xdc>  // b.any
    af1c:	str	x0, [x1]
    af20:	str	x6, [x3]
    af24:	str	x7, [x5]
    af28:	b	aec8 <lzma_vli_decode@@XZ_5.0+0x78>
    af2c:	cmp	x6, x4
    af30:	b.cc	ae84 <lzma_vli_decode@@XZ_5.0+0x34>  // b.lo, b.ul, b.last
    af34:	str	x0, [x1]
    af38:	add	x0, sp, #0x8
    af3c:	str	x6, [x3]
    af40:	cmp	x1, x0
    af44:	str	x7, [x5]
    af48:	b.ne	af54 <lzma_vli_decode@@XZ_5.0+0x104>  // b.any
    af4c:	mov	w0, #0x9                   	// #9
    af50:	b	aec8 <lzma_vli_decode@@XZ_5.0+0x78>
    af54:	mov	w0, #0x0                   	// #0
    af58:	b	aec8 <lzma_vli_decode@@XZ_5.0+0x78>

000000000000af5c <lzma_check_is_supported@@XZ_5.0>:
    af5c:	cmp	w0, #0xf
    af60:	b.hi	af74 <lzma_check_is_supported@@XZ_5.0+0x18>  // b.pmore
    af64:	adrp	x1, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    af68:	add	x1, x1, #0x7a4
    af6c:	ldrb	w0, [x1, w0, uxtw]
    af70:	ret
    af74:	mov	w0, #0x0                   	// #0
    af78:	b	af70 <lzma_check_is_supported@@XZ_5.0+0x14>

000000000000af7c <lzma_check_size@@XZ_5.0>:
    af7c:	cmp	w0, #0xf
    af80:	b.hi	af98 <lzma_check_size@@XZ_5.0+0x1c>  // b.pmore
    af84:	adrp	x1, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
    af88:	add	x1, x1, #0x7a4
    af8c:	add	x0, x1, w0, uxtw
    af90:	ldrb	w0, [x0, #16]
    af94:	ret
    af98:	mov	w0, #0xffffffff            	// #-1
    af9c:	b	af94 <lzma_check_size@@XZ_5.0+0x18>
    afa0:	cmp	w1, #0x4
    afa4:	b.eq	afc0 <lzma_check_size@@XZ_5.0+0x44>  // b.none
    afa8:	cmp	w1, #0xa
    afac:	b.eq	afc8 <lzma_check_size@@XZ_5.0+0x4c>  // b.none
    afb0:	cmp	w1, #0x1
    afb4:	b.ne	afbc <lzma_check_size@@XZ_5.0+0x40>  // b.any
    afb8:	str	wzr, [x0, #64]
    afbc:	ret
    afc0:	str	xzr, [x0, #64]
    afc4:	b	afbc <lzma_check_size@@XZ_5.0+0x40>
    afc8:	b	c0d8 <lzma_crc64@@XZ_5.0+0xf30>
    afcc:	stp	x29, x30, [sp, #-32]!
    afd0:	mov	w4, w1
    afd4:	cmp	w4, #0x4
    afd8:	mov	x29, sp
    afdc:	str	x19, [sp, #16]
    afe0:	mov	x1, x3
    afe4:	mov	x19, x0
    afe8:	mov	x0, x2
    afec:	b.eq	b018 <lzma_check_size@@XZ_5.0+0x9c>  // b.none
    aff0:	cmp	w4, #0xa
    aff4:	b.eq	b028 <lzma_check_size@@XZ_5.0+0xac>  // b.none
    aff8:	cmp	w4, #0x1
    affc:	b.ne	b00c <lzma_check_size@@XZ_5.0+0x90>  // b.any
    b000:	ldr	w2, [x19, #64]
    b004:	bl	31c0 <lzma_crc32@plt>
    b008:	str	w0, [x19, #64]
    b00c:	ldr	x19, [sp, #16]
    b010:	ldp	x29, x30, [sp], #32
    b014:	ret
    b018:	ldr	x2, [x19, #64]
    b01c:	bl	3290 <lzma_crc64@plt>
    b020:	str	x0, [x19, #64]
    b024:	b	b00c <lzma_check_size@@XZ_5.0+0x90>
    b028:	mov	x2, x19
    b02c:	ldr	x19, [sp, #16]
    b030:	ldp	x29, x30, [sp], #32
    b034:	b	c0f8 <lzma_crc64@@XZ_5.0+0xf50>
    b038:	mov	x2, x0
    b03c:	cmp	w1, #0x4
    b040:	b.eq	b060 <lzma_check_size@@XZ_5.0+0xe4>  // b.none
    b044:	cmp	w1, #0xa
    b048:	b.eq	b06c <lzma_check_size@@XZ_5.0+0xf0>  // b.none
    b04c:	cmp	w1, #0x1
    b050:	b.ne	b05c <lzma_check_size@@XZ_5.0+0xe0>  // b.any
    b054:	ldr	w0, [x0, #64]
    b058:	str	w0, [x2]
    b05c:	ret
    b060:	ldr	x0, [x0, #64]
    b064:	str	x0, [x2]
    b068:	b	b05c <lzma_check_size@@XZ_5.0+0xe0>
    b06c:	b	c188 <lzma_crc64@@XZ_5.0+0xfe0>

000000000000b070 <lzma_crc32@@XZ_5.0>:
    b070:	mvn	w2, w2
    b074:	cmp	x1, #0x8
    b078:	b.hi	b0f8 <lzma_crc32@@XZ_5.0+0x88>  // b.pmore
    b07c:	adrp	x5, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    b080:	mov	x4, #0x0                   	// #0
    b084:	ldr	x5, [x5, #3952]
    b088:	cmp	x1, x4
    b08c:	b.ne	b18c <lzma_crc32@@XZ_5.0+0x11c>  // b.any
    b090:	mvn	w0, w2
    b094:	ret
    b098:	ldrb	w3, [x0], #1
    b09c:	eor	x3, x2, x3
    b0a0:	and	x3, x3, #0xff
    b0a4:	ldr	w1, [x4, x3, lsl #2]
    b0a8:	eor	w2, w1, w2, lsr #8
    b0ac:	sub	x1, x5, x0
    b0b0:	tst	x0, #0x7
    b0b4:	b.ne	b098 <lzma_crc32@@XZ_5.0+0x28>  // b.any
    b0b8:	adrp	x3, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    b0bc:	and	x6, x1, #0xfffffffffffffff8
    b0c0:	add	x6, x0, x6
    b0c4:	and	x1, x1, #0x7
    b0c8:	ldr	x3, [x3, #3952]
    b0cc:	mov	x7, x0
    b0d0:	cmp	x7, x6
    b0d4:	b.cc	b108 <lzma_crc32@@XZ_5.0+0x98>  // b.lo, b.ul, b.last
    b0d8:	sub	x3, x6, x0
    b0dc:	sub	x4, x0, #0x7
    b0e0:	add	x3, x3, #0x7
    b0e4:	cmp	x4, x6
    b0e8:	and	x3, x3, #0xfffffffffffffff8
    b0ec:	csel	x3, x3, xzr, ls  // ls = plast
    b0f0:	add	x0, x0, x3
    b0f4:	b	b07c <lzma_crc32@@XZ_5.0+0xc>
    b0f8:	adrp	x4, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    b0fc:	add	x5, x0, x1
    b100:	ldr	x4, [x4, #3952]
    b104:	b	b0ac <lzma_crc32@@XZ_5.0+0x3c>
    b108:	ldr	w4, [x7]
    b10c:	add	x7, x7, #0x8
    b110:	eor	w2, w2, w4
    b114:	ubfx	x5, x2, #8, #8
    b118:	ubfx	x4, x2, #16, #8
    b11c:	add	x5, x5, #0x600
    b120:	add	x4, x4, #0x500
    b124:	ldr	w8, [x3, x5, lsl #2]
    b128:	ldr	w4, [x3, x4, lsl #2]
    b12c:	eor	w8, w8, w4
    b130:	ldur	w4, [x7, #-4]
    b134:	add	x5, x3, w4, uxtb #2
    b138:	lsr	w9, w4, #24
    b13c:	ldr	w5, [x5, #3072]
    b140:	ldr	w9, [x3, x9, lsl #2]
    b144:	eor	w5, w5, w9
    b148:	add	x9, x3, w2, uxtb #2
    b14c:	lsr	w2, w2, #24
    b150:	add	x2, x2, #0x400
    b154:	ldr	w9, [x9, #7168]
    b158:	ldr	w2, [x3, x2, lsl #2]
    b15c:	eor	w2, w9, w2
    b160:	eor	w2, w5, w2
    b164:	ubfx	x5, x4, #8, #8
    b168:	ubfx	x4, x4, #16, #8
    b16c:	add	x5, x5, #0x200
    b170:	add	x4, x4, #0x100
    b174:	ldr	w5, [x3, x5, lsl #2]
    b178:	ldr	w4, [x3, x4, lsl #2]
    b17c:	eor	w4, w5, w4
    b180:	eor	w2, w2, w4
    b184:	eor	w2, w2, w8
    b188:	b	b0d0 <lzma_crc32@@XZ_5.0+0x60>
    b18c:	ldrb	w3, [x0, x4]
    b190:	add	x4, x4, #0x1
    b194:	eor	x3, x2, x3
    b198:	and	x3, x3, #0xff
    b19c:	ldr	w3, [x5, x3, lsl #2]
    b1a0:	eor	w2, w3, w2, lsr #8
    b1a4:	b	b088 <lzma_crc32@@XZ_5.0+0x18>

000000000000b1a8 <lzma_crc64@@XZ_5.0>:
    b1a8:	mvn	x2, x2
    b1ac:	cmp	x1, #0x4
    b1b0:	b.hi	b230 <lzma_crc64@@XZ_5.0+0x88>  // b.pmore
    b1b4:	adrp	x4, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    b1b8:	mov	x3, #0x0                   	// #0
    b1bc:	ldr	x4, [x4, #3984]
    b1c0:	cmp	x1, x3
    b1c4:	b.ne	b284 <lzma_crc64@@XZ_5.0+0xdc>  // b.any
    b1c8:	mvn	x0, x2
    b1cc:	ret
    b1d0:	ldrb	w4, [x0], #1
    b1d4:	and	x1, x2, #0xff
    b1d8:	eor	x4, x4, x1
    b1dc:	ldr	x1, [x3, x4, lsl #3]
    b1e0:	eor	x2, x1, x2, lsr #8
    b1e4:	sub	x1, x5, x0
    b1e8:	tst	x0, #0x3
    b1ec:	b.ne	b1d0 <lzma_crc64@@XZ_5.0+0x28>  // b.any
    b1f0:	adrp	x4, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    b1f4:	and	x5, x1, #0xfffffffffffffffc
    b1f8:	add	x5, x0, x5
    b1fc:	and	x1, x1, #0x3
    b200:	ldr	x4, [x4, #3984]
    b204:	mov	x7, x0
    b208:	cmp	x7, x5
    b20c:	b.cc	b240 <lzma_crc64@@XZ_5.0+0x98>  // b.lo, b.ul, b.last
    b210:	sub	x3, x5, x0
    b214:	sub	x4, x0, #0x3
    b218:	add	x3, x3, #0x3
    b21c:	cmp	x4, x5
    b220:	and	x3, x3, #0xfffffffffffffffc
    b224:	csel	x3, x3, xzr, ls  // ls = plast
    b228:	add	x0, x0, x3
    b22c:	b	b1b4 <lzma_crc64@@XZ_5.0+0xc>
    b230:	adrp	x3, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    b234:	add	x5, x0, x1
    b238:	ldr	x3, [x3, #3984]
    b23c:	b	b1e4 <lzma_crc64@@XZ_5.0+0x3c>
    b240:	ldr	w3, [x7], #4
    b244:	eor	w3, w3, w2
    b248:	ubfx	x6, x3, #8, #8
    b24c:	ubfx	x8, x3, #16, #8
    b250:	add	x6, x6, #0x200
    b254:	add	x8, x8, #0x100
    b258:	ldr	x6, [x4, x6, lsl #3]
    b25c:	ldr	x8, [x4, x8, lsl #3]
    b260:	eor	x6, x6, x8
    b264:	add	x8, x4, w3, uxtb #3
    b268:	lsr	w3, w3, #24
    b26c:	ldr	x8, [x8, #6144]
    b270:	ldr	x3, [x4, x3, lsl #3]
    b274:	eor	x3, x8, x3
    b278:	eor	x3, x6, x3
    b27c:	eor	x2, x3, x2, lsr #32
    b280:	b	b208 <lzma_crc64@@XZ_5.0+0x60>
    b284:	ldrb	w5, [x0, x3]
    b288:	and	x6, x2, #0xff
    b28c:	add	x3, x3, #0x1
    b290:	eor	x5, x5, x6
    b294:	ldr	x5, [x4, x5, lsl #3]
    b298:	eor	x2, x5, x2, lsr #8
    b29c:	b	b1c0 <lzma_crc64@@XZ_5.0+0x18>
    b2a0:	stp	x29, x30, [sp, #-128]!
    b2a4:	mov	x29, sp
    b2a8:	ldp	x2, x3, [x0]
    b2ac:	stp	x2, x3, [sp, #96]
    b2b0:	ldp	x7, x2, [x0, #16]
    b2b4:	stp	x7, x2, [sp, #112]
    b2b8:	ldr	w10, [sp, #108]
    b2bc:	ldp	w4, w5, [sp, #116]
    b2c0:	mov	w2, #0x2f98                	// #12184
    b2c4:	movk	w2, #0x428a, lsl #16
    b2c8:	ldr	w8, [sp, #100]
    b2cc:	eor	w12, w7, w7, ror #14
    b2d0:	eor	w6, w5, w4
    b2d4:	and	w6, w6, w7
    b2d8:	stp	x19, x20, [sp, #16]
    b2dc:	eor	w12, w7, w12, ror #5
    b2e0:	eor	w6, w6, w5
    b2e4:	eor	w11, w7, w4
    b2e8:	ror	w12, w12, #6
    b2ec:	add	w12, w12, w6
    b2f0:	ldr	w6, [sp, #124]
    b2f4:	ldp	w9, w15, [x1]
    b2f8:	add	w6, w6, w2
    b2fc:	ldr	w2, [sp, #96]
    b300:	add	w12, w12, w6
    b304:	rev	w9, w9
    b308:	rev	w15, w15
    b30c:	add	w12, w12, w9
    b310:	stp	x21, x22, [sp, #32]
    b314:	eor	w6, w2, w2, ror #9
    b318:	add	w19, w12, w10
    b31c:	ldr	w10, [sp, #104]
    b320:	eor	w6, w2, w6, ror #11
    b324:	and	w11, w11, w19
    b328:	and	w3, w8, w10
    b32c:	eor	w11, w11, w4
    b330:	add	w11, w11, w15
    b334:	ror	w6, w6, #2
    b338:	add	w12, w6, w12
    b33c:	eor	w6, w8, w10
    b340:	and	w6, w6, w2
    b344:	stp	x23, x24, [sp, #48]
    b348:	add	w6, w6, w3
    b34c:	mov	w3, #0x4491                	// #17553
    b350:	add	w6, w12, w6
    b354:	movk	w3, #0x7137, lsl #16
    b358:	add	w5, w5, w3
    b35c:	add	w11, w11, w5
    b360:	eor	w5, w19, w19, ror #14
    b364:	ldp	w14, w13, [x1, #8]
    b368:	eor	w5, w19, w5, ror #5
    b36c:	and	w3, w2, w8
    b370:	stp	x25, x26, [sp, #64]
    b374:	ror	w5, w5, #6
    b378:	add	w11, w11, w5
    b37c:	eor	w5, w6, w6, ror #9
    b380:	add	w18, w10, w11
    b384:	rev	w14, w14
    b388:	eor	w5, w6, w5, ror #11
    b38c:	mov	w10, #0xfbcf                	// #64463
    b390:	movk	w10, #0xb5c0, lsl #16
    b394:	add	w4, w4, w10
    b398:	and	w10, w2, w6
    b39c:	ror	w5, w5, #2
    b3a0:	add	w11, w5, w11
    b3a4:	eor	w5, w2, w8
    b3a8:	and	w5, w5, w6
    b3ac:	rev	w13, w13
    b3b0:	add	w5, w5, w3
    b3b4:	eor	w3, w7, w19
    b3b8:	and	w3, w3, w18
    b3bc:	add	w5, w11, w5
    b3c0:	eor	w3, w3, w7
    b3c4:	stp	x27, x28, [sp, #80]
    b3c8:	add	w3, w3, w14
    b3cc:	add	w3, w3, w4
    b3d0:	eor	w4, w18, w18, ror #14
    b3d4:	ldp	w12, w11, [x1, #16]
    b3d8:	eor	w4, w18, w4, ror #5
    b3dc:	mov	w28, #0x10                  	// #16
    b3e0:	rev	w12, w12
    b3e4:	ror	w4, w4, #6
    b3e8:	add	w3, w3, w4
    b3ec:	eor	w4, w5, w5, ror #9
    b3f0:	add	w8, w8, w3
    b3f4:	rev	w11, w11
    b3f8:	eor	w4, w5, w4, ror #11
    b3fc:	ror	w4, w4, #2
    b400:	add	w3, w4, w3
    b404:	eor	w4, w2, w6
    b408:	and	w4, w4, w5
    b40c:	add	w4, w4, w10
    b410:	mov	w10, #0xdba5                	// #56229
    b414:	add	w4, w3, w4
    b418:	eor	w3, w19, w18
    b41c:	and	w3, w3, w8
    b420:	movk	w10, #0xe9b5, lsl #16
    b424:	eor	w3, w3, w19
    b428:	add	w7, w7, w10
    b42c:	add	w3, w3, w13
    b430:	and	w10, w6, w5
    b434:	add	w7, w3, w7
    b438:	eor	w3, w8, w8, ror #14
    b43c:	eor	w3, w8, w3, ror #5
    b440:	ror	w3, w3, #6
    b444:	add	w7, w7, w3
    b448:	eor	w3, w4, w4, ror #9
    b44c:	add	w2, w2, w7
    b450:	eor	w3, w4, w3, ror #11
    b454:	ror	w3, w3, #2
    b458:	add	w7, w3, w7
    b45c:	eor	w3, w6, w5
    b460:	and	w3, w3, w4
    b464:	add	w3, w3, w10
    b468:	eor	w10, w18, w8
    b46c:	and	w10, w10, w2
    b470:	add	w3, w7, w3
    b474:	eor	w10, w10, w18
    b478:	add	w10, w10, w19
    b47c:	mov	w19, #0xc25b                	// #49755
    b480:	movk	w19, #0x3956, lsl #16
    b484:	add	w19, w12, w19
    b488:	add	w10, w10, w19
    b48c:	eor	w19, w2, w2, ror #14
    b490:	eor	w19, w2, w19, ror #5
    b494:	ror	w19, w19, #6
    b498:	add	w10, w10, w19
    b49c:	eor	w19, w3, w3, ror #9
    b4a0:	add	w7, w6, w10
    b4a4:	and	w6, w5, w4
    b4a8:	eor	w19, w3, w19, ror #11
    b4ac:	eor	w17, w2, w7
    b4b0:	ror	w19, w19, #2
    b4b4:	add	w10, w19, w10
    b4b8:	eor	w19, w5, w4
    b4bc:	and	w19, w19, w3
    b4c0:	add	w19, w19, w6
    b4c4:	add	w19, w10, w19
    b4c8:	eor	w10, w8, w2
    b4cc:	and	w10, w10, w7
    b4d0:	eor	w10, w10, w8
    b4d4:	add	w10, w10, w18
    b4d8:	mov	w18, #0x11f1                	// #4593
    b4dc:	movk	w18, #0x59f1, lsl #16
    b4e0:	add	w18, w11, w18
    b4e4:	add	w10, w10, w18
    b4e8:	eor	w18, w7, w7, ror #14
    b4ec:	eor	w18, w7, w18, ror #5
    b4f0:	ror	w18, w18, #6
    b4f4:	add	w10, w10, w18
    b4f8:	eor	w18, w19, w19, ror #9
    b4fc:	add	w6, w5, w10
    b500:	and	w5, w4, w3
    b504:	eor	w18, w19, w18, ror #11
    b508:	and	w17, w17, w6
    b50c:	eor	w17, w17, w2
    b510:	add	w8, w17, w8
    b514:	ror	w18, w18, #2
    b518:	add	w10, w18, w10
    b51c:	eor	w18, w4, w3
    b520:	and	w18, w18, w19
    b524:	mov	w17, #0x82a4                	// #33444
    b528:	add	w18, w18, w5
    b52c:	movk	w17, #0x923f, lsl #16
    b530:	add	w18, w10, w18
    b534:	and	w5, w3, w19
    b538:	ldp	w10, w30, [x1, #24]
    b53c:	ldp	w16, w22, [x1, #32]
    b540:	rev	w10, w10
    b544:	add	w17, w10, w17
    b548:	rev	w30, w30
    b54c:	add	w8, w8, w17
    b550:	eor	w17, w6, w6, ror #14
    b554:	rev	w16, w16
    b558:	rev	w22, w22
    b55c:	eor	w17, w6, w17, ror #5
    b560:	ldp	w21, w20, [x1, #40]
    b564:	ror	w17, w17, #6
    b568:	add	w8, w8, w17
    b56c:	eor	w17, w18, w18, ror #9
    b570:	add	w4, w4, w8
    b574:	rev	w21, w21
    b578:	eor	w17, w18, w17, ror #11
    b57c:	rev	w20, w20
    b580:	ror	w17, w17, #2
    b584:	add	w8, w17, w8
    b588:	eor	w17, w3, w19
    b58c:	and	w17, w17, w18
    b590:	add	w17, w17, w5
    b594:	add	w17, w8, w17
    b598:	eor	w8, w7, w6
    b59c:	and	w8, w8, w4
    b5a0:	eor	w8, w8, w7
    b5a4:	add	w2, w8, w2
    b5a8:	mov	w8, #0x5ed5                	// #24277
    b5ac:	movk	w8, #0xab1c, lsl #16
    b5b0:	add	w8, w30, w8
    b5b4:	add	w2, w2, w8
    b5b8:	eor	w8, w4, w4, ror #14
    b5bc:	eor	w8, w4, w8, ror #5
    b5c0:	ror	w8, w8, #6
    b5c4:	add	w2, w2, w8
    b5c8:	eor	w8, w17, w17, ror #9
    b5cc:	add	w5, w3, w2
    b5d0:	and	w3, w19, w18
    b5d4:	eor	w8, w17, w8, ror #11
    b5d8:	eor	w25, w4, w5
    b5dc:	ror	w8, w8, #2
    b5e0:	add	w2, w8, w2
    b5e4:	eor	w8, w19, w18
    b5e8:	and	w8, w8, w17
    b5ec:	add	w8, w8, w3
    b5f0:	eor	w3, w18, w17
    b5f4:	add	w8, w2, w8
    b5f8:	eor	w2, w6, w4
    b5fc:	and	w2, w2, w5
    b600:	and	w3, w3, w8
    b604:	eor	w2, w2, w6
    b608:	add	w7, w2, w7
    b60c:	mov	w2, #0xaa98                	// #43672
    b610:	movk	w2, #0xd807, lsl #16
    b614:	add	w2, w16, w2
    b618:	add	w7, w7, w2
    b61c:	eor	w2, w5, w5, ror #14
    b620:	eor	w2, w5, w2, ror #5
    b624:	ror	w2, w2, #6
    b628:	add	w7, w7, w2
    b62c:	eor	w2, w8, w8, ror #9
    b630:	add	w24, w19, w7
    b634:	and	w25, w25, w24
    b638:	eor	w2, w8, w2, ror #11
    b63c:	eor	w25, w25, w4
    b640:	add	w6, w25, w6
    b644:	mov	w25, #0x5b01                	// #23297
    b648:	movk	w25, #0x1283, lsl #16
    b64c:	add	w25, w22, w25
    b650:	add	w6, w6, w25
    b654:	ror	w2, w2, #2
    b658:	eor	w25, w24, w24, ror #14
    b65c:	add	w2, w2, w7
    b660:	and	w7, w18, w17
    b664:	add	w3, w3, w7
    b668:	eor	w25, w24, w25, ror #5
    b66c:	add	w2, w2, w3
    b670:	eor	w3, w17, w8
    b674:	and	w3, w3, w2
    b678:	ror	w25, w25, #6
    b67c:	add	w6, w6, w25
    b680:	eor	w25, w2, w2, ror #9
    b684:	add	w18, w18, w6
    b688:	eor	w25, w2, w25, ror #11
    b68c:	ror	w25, w25, #2
    b690:	add	w6, w25, w6
    b694:	and	w25, w17, w8
    b698:	add	w3, w3, w25
    b69c:	add	w25, w6, w3
    b6a0:	eor	w3, w5, w24
    b6a4:	and	w3, w3, w18
    b6a8:	and	w6, w8, w2
    b6ac:	eor	w3, w3, w5
    b6b0:	add	w4, w3, w4
    b6b4:	mov	w3, #0x85be                	// #34238
    b6b8:	movk	w3, #0x2431, lsl #16
    b6bc:	add	w3, w21, w3
    b6c0:	add	w4, w4, w3
    b6c4:	eor	w3, w18, w18, ror #14
    b6c8:	eor	w3, w18, w3, ror #5
    b6cc:	ror	w3, w3, #6
    b6d0:	add	w3, w4, w3
    b6d4:	eor	w4, w25, w25, ror #9
    b6d8:	add	w23, w17, w3
    b6dc:	eor	w4, w25, w4, ror #11
    b6e0:	eor	w26, w23, w23, ror #14
    b6e4:	ror	w4, w4, #2
    b6e8:	add	w4, w4, w3
    b6ec:	eor	w3, w8, w2
    b6f0:	and	w3, w3, w25
    b6f4:	eor	w26, w23, w26, ror #5
    b6f8:	add	w3, w3, w6
    b6fc:	add	w4, w4, w3
    b700:	eor	w3, w24, w18
    b704:	and	w3, w3, w23
    b708:	ror	w26, w26, #6
    b70c:	eor	w3, w3, w24
    b710:	add	w3, w3, w5
    b714:	mov	w5, #0x7dc3                	// #32195
    b718:	movk	w5, #0x550c, lsl #16
    b71c:	add	w5, w20, w5
    b720:	add	w3, w3, w5
    b724:	and	w5, w2, w25
    b728:	add	w3, w3, w26
    b72c:	eor	w26, w4, w4, ror #9
    b730:	add	w7, w8, w3
    b734:	eor	w26, w4, w26, ror #11
    b738:	eor	w6, w23, w7
    b73c:	ldp	w19, w17, [x1, #48]
    b740:	ror	w26, w26, #2
    b744:	add	w3, w26, w3
    b748:	eor	w26, w2, w25
    b74c:	and	w26, w26, w4
    b750:	rev	w19, w19
    b754:	add	w26, w26, w5
    b758:	eor	w5, w18, w23
    b75c:	and	w5, w5, w7
    b760:	add	w26, w3, w26
    b764:	eor	w5, w5, w18
    b768:	rev	w17, w17
    b76c:	add	w24, w5, w24
    b770:	mov	w5, #0x5d74                	// #23924
    b774:	movk	w5, #0x72be, lsl #16
    b778:	add	w5, w19, w5
    b77c:	add	w24, w24, w5
    b780:	eor	w5, w7, w7, ror #14
    b784:	and	w3, w25, w4
    b788:	and	w8, w4, w26
    b78c:	eor	w5, w7, w5, ror #5
    b790:	ror	w5, w5, #6
    b794:	add	w24, w24, w5
    b798:	eor	w5, w26, w26, ror #9
    b79c:	add	w2, w2, w24
    b7a0:	and	w6, w6, w2
    b7a4:	eor	w5, w26, w5, ror #11
    b7a8:	eor	w6, w6, w23
    b7ac:	add	w18, w6, w18
    b7b0:	mov	w6, #0xb1fe                	// #45566
    b7b4:	movk	w6, #0x80de, lsl #16
    b7b8:	ror	w5, w5, #2
    b7bc:	add	w6, w17, w6
    b7c0:	add	w24, w5, w24
    b7c4:	add	w18, w18, w6
    b7c8:	eor	w5, w25, w4
    b7cc:	eor	w6, w2, w2, ror #14
    b7d0:	and	w5, w5, w26
    b7d4:	add	w5, w5, w3
    b7d8:	eor	w6, w2, w6, ror #5
    b7dc:	add	w5, w24, w5
    b7e0:	eor	w24, w7, w2
    b7e4:	ror	w6, w6, #6
    b7e8:	add	w18, w18, w6
    b7ec:	eor	w6, w5, w5, ror #9
    b7f0:	add	w3, w25, w18
    b7f4:	eor	w6, w5, w6, ror #11
    b7f8:	and	w24, w24, w3
    b7fc:	eor	w24, w24, w7
    b800:	eor	w25, w2, w3
    b804:	add	w23, w24, w23
    b808:	ror	w6, w6, #2
    b80c:	add	w18, w6, w18
    b810:	eor	w6, w4, w26
    b814:	and	w6, w6, w5
    b818:	mov	w24, #0x6a7                 	// #1703
    b81c:	add	w6, w6, w8
    b820:	movk	w24, #0x9bdc, lsl #16
    b824:	add	w6, w18, w6
    b828:	ldr	w18, [x1, #56]
    b82c:	and	w8, w26, w5
    b830:	rev	w18, w18
    b834:	add	w24, w18, w24
    b838:	add	w23, w23, w24
    b83c:	eor	w24, w3, w3, ror #14
    b840:	eor	w24, w3, w24, ror #5
    b844:	ror	w24, w24, #6
    b848:	add	w23, w23, w24
    b84c:	eor	w24, w6, w6, ror #9
    b850:	add	w4, w4, w23
    b854:	eor	w24, w6, w24, ror #11
    b858:	and	w25, w25, w4
    b85c:	eor	w25, w25, w2
    b860:	add	w7, w25, w7
    b864:	ror	w24, w24, #2
    b868:	add	w23, w24, w23
    b86c:	eor	w24, w26, w5
    b870:	and	w24, w24, w6
    b874:	mov	w25, #0xf174                	// #61812
    b878:	add	w24, w24, w8
    b87c:	ldr	w8, [x1, #60]
    b880:	movk	w25, #0xc19b, lsl #16
    b884:	add	w24, w23, w24
    b888:	rev	w8, w8
    b88c:	and	w23, w5, w6
    b890:	add	w25, w8, w25
    b894:	add	w7, w7, w25
    b898:	eor	w25, w4, w4, ror #14
    b89c:	eor	w25, w4, w25, ror #5
    b8a0:	ror	w25, w25, #6
    b8a4:	add	w7, w7, w25
    b8a8:	eor	w25, w24, w24, ror #9
    b8ac:	add	w1, w26, w7
    b8b0:	eor	w25, w24, w25, ror #11
    b8b4:	ror	w25, w25, #2
    b8b8:	add	w7, w25, w7
    b8bc:	eor	w25, w5, w6
    b8c0:	and	w25, w25, w24
    b8c4:	add	w25, w25, w23
    b8c8:	add	w25, w7, w25
    b8cc:	adrp	x7, 19000 <lzma_mode_is_supported@@XZ_5.0+0x9ebc>
    b8d0:	add	x7, x7, #0x7c8
    b8d4:	eor	w26, w18, w18, ror #2
    b8d8:	lsr	w23, w18, #10
    b8dc:	lsr	w27, w15, #3
    b8e0:	add	w9, w22, w9
    b8e4:	eor	w23, w23, w26, ror #17
    b8e8:	eor	w26, w15, w15, ror #11
    b8ec:	add	w15, w21, w15
    b8f0:	add	w28, w28, #0x10
    b8f4:	eor	w26, w27, w26, ror #7
    b8f8:	ldr	w27, [x7, #64]
    b8fc:	add	w23, w23, w26
    b900:	eor	w26, w3, w4
    b904:	add	w9, w23, w9
    b908:	eor	w23, w1, w1, ror #14
    b90c:	and	w26, w26, w1
    b910:	cmp	w28, #0x40
    b914:	eor	w23, w1, w23, ror #5
    b918:	eor	w26, w26, w3
    b91c:	add	w26, w26, w27
    b920:	lsr	w27, w14, #3
    b924:	add	x7, x7, #0x40
    b928:	ror	w23, w23, #6
    b92c:	add	w23, w23, w9
    b930:	add	w23, w23, w26
    b934:	and	w26, w24, w6
    b938:	add	w23, w23, w2
    b93c:	eor	w2, w25, w25, ror #9
    b940:	add	w5, w23, w5
    b944:	eor	w2, w25, w2, ror #11
    b948:	ror	w2, w2, #2
    b94c:	add	w2, w2, w23
    b950:	eor	w23, w24, w6
    b954:	and	w23, w23, w25
    b958:	add	w23, w23, w26
    b95c:	eor	w26, w8, w8, ror #2
    b960:	add	w2, w2, w23
    b964:	lsr	w23, w8, #10
    b968:	eor	w23, w23, w26, ror #17
    b96c:	eor	w26, w14, w14, ror #11
    b970:	add	w14, w20, w14
    b974:	eor	w26, w27, w26, ror #7
    b978:	lsr	w27, w13, #3
    b97c:	add	w23, w23, w26
    b980:	eor	w26, w1, w4
    b984:	add	w15, w23, w15
    b988:	and	w26, w26, w5
    b98c:	ldr	w23, [x7, #4]
    b990:	eor	w26, w26, w4
    b994:	add	w26, w26, w15
    b998:	add	w3, w3, w23
    b99c:	and	w23, w25, w24
    b9a0:	add	w3, w26, w3
    b9a4:	eor	w26, w5, w5, ror #14
    b9a8:	eor	w26, w5, w26, ror #5
    b9ac:	ror	w26, w26, #6
    b9b0:	add	w3, w3, w26
    b9b4:	eor	w26, w2, w2, ror #9
    b9b8:	add	w6, w3, w6
    b9bc:	eor	w26, w2, w26, ror #11
    b9c0:	ror	w26, w26, #2
    b9c4:	add	w3, w26, w3
    b9c8:	eor	w26, w25, w24
    b9cc:	and	w26, w26, w2
    b9d0:	add	w26, w26, w23
    b9d4:	eor	w23, w9, w9, ror #2
    b9d8:	add	w26, w3, w26
    b9dc:	lsr	w3, w9, #10
    b9e0:	eor	w3, w3, w23, ror #17
    b9e4:	eor	w23, w13, w13, ror #11
    b9e8:	add	w13, w19, w13
    b9ec:	eor	w23, w27, w23, ror #7
    b9f0:	lsr	w27, w12, #3
    b9f4:	add	w3, w3, w23
    b9f8:	eor	w23, w1, w5
    b9fc:	add	w14, w3, w14
    ba00:	and	w23, w23, w6
    ba04:	ldr	w3, [x7, #8]
    ba08:	eor	w23, w23, w1
    ba0c:	add	w23, w23, w14
    ba10:	add	w4, w4, w3
    ba14:	and	w3, w25, w2
    ba18:	add	w4, w23, w4
    ba1c:	eor	w23, w6, w6, ror #14
    ba20:	eor	w23, w6, w23, ror #5
    ba24:	ror	w23, w23, #6
    ba28:	add	w4, w4, w23
    ba2c:	eor	w23, w26, w26, ror #9
    ba30:	add	w24, w24, w4
    ba34:	eor	w23, w26, w23, ror #11
    ba38:	ror	w23, w23, #2
    ba3c:	add	w4, w23, w4
    ba40:	eor	w23, w25, w2
    ba44:	and	w23, w23, w26
    ba48:	add	w23, w23, w3
    ba4c:	lsr	w3, w15, #10
    ba50:	add	w23, w4, w23
    ba54:	eor	w4, w15, w15, ror #2
    ba58:	eor	w3, w3, w4, ror #17
    ba5c:	eor	w4, w12, w12, ror #11
    ba60:	add	w12, w17, w12
    ba64:	eor	w4, w27, w4, ror #7
    ba68:	lsr	w27, w11, #3
    ba6c:	add	w3, w3, w4
    ba70:	eor	w4, w5, w6
    ba74:	add	w13, w3, w13
    ba78:	and	w4, w4, w24
    ba7c:	ldr	w3, [x7, #12]
    ba80:	eor	w4, w4, w5
    ba84:	add	w4, w4, w13
    ba88:	add	w1, w1, w3
    ba8c:	and	w3, w2, w26
    ba90:	add	w1, w4, w1
    ba94:	eor	w4, w24, w24, ror #14
    ba98:	eor	w4, w24, w4, ror #5
    ba9c:	ror	w4, w4, #6
    baa0:	add	w1, w1, w4
    baa4:	eor	w4, w23, w23, ror #9
    baa8:	add	w25, w25, w1
    baac:	eor	w4, w23, w4, ror #11
    bab0:	ror	w4, w4, #2
    bab4:	add	w1, w4, w1
    bab8:	eor	w4, w2, w26
    babc:	and	w4, w4, w23
    bac0:	add	w4, w4, w3
    bac4:	eor	w3, w14, w14, ror #2
    bac8:	add	w4, w1, w4
    bacc:	lsr	w1, w14, #10
    bad0:	eor	w1, w1, w3, ror #17
    bad4:	eor	w3, w11, w11, ror #11
    bad8:	add	w11, w18, w11
    badc:	eor	w3, w27, w3, ror #7
    bae0:	lsr	w27, w10, #3
    bae4:	add	w1, w1, w3
    bae8:	eor	w3, w6, w24
    baec:	add	w12, w1, w12
    baf0:	and	w3, w3, w25
    baf4:	ldr	w1, [x7, #16]
    baf8:	eor	w3, w3, w6
    bafc:	add	w3, w3, w12
    bb00:	add	w5, w5, w1
    bb04:	and	w1, w26, w23
    bb08:	add	w5, w3, w5
    bb0c:	eor	w3, w25, w25, ror #14
    bb10:	eor	w3, w25, w3, ror #5
    bb14:	ror	w3, w3, #6
    bb18:	add	w5, w5, w3
    bb1c:	eor	w3, w4, w4, ror #9
    bb20:	add	w2, w2, w5
    bb24:	eor	w3, w4, w3, ror #11
    bb28:	ror	w3, w3, #2
    bb2c:	add	w5, w3, w5
    bb30:	eor	w3, w26, w23
    bb34:	and	w3, w3, w4
    bb38:	add	w3, w3, w1
    bb3c:	lsr	w1, w13, #10
    bb40:	add	w3, w5, w3
    bb44:	eor	w5, w13, w13, ror #2
    bb48:	eor	w1, w1, w5, ror #17
    bb4c:	eor	w5, w10, w10, ror #11
    bb50:	add	w10, w8, w10
    bb54:	eor	w5, w27, w5, ror #7
    bb58:	lsr	w27, w30, #3
    bb5c:	add	w1, w1, w5
    bb60:	ldr	w5, [x7, #20]
    bb64:	add	w11, w1, w11
    bb68:	eor	w1, w24, w25
    bb6c:	and	w1, w1, w2
    bb70:	add	w6, w6, w5
    bb74:	eor	w1, w1, w24
    bb78:	and	w5, w23, w4
    bb7c:	add	w1, w1, w11
    bb80:	add	w6, w1, w6
    bb84:	eor	w1, w2, w2, ror #14
    bb88:	eor	w1, w2, w1, ror #5
    bb8c:	ror	w1, w1, #6
    bb90:	add	w6, w6, w1
    bb94:	eor	w1, w3, w3, ror #9
    bb98:	add	w26, w26, w6
    bb9c:	eor	w1, w3, w1, ror #11
    bba0:	ror	w1, w1, #2
    bba4:	add	w6, w1, w6
    bba8:	eor	w1, w23, w4
    bbac:	and	w1, w1, w3
    bbb0:	add	w1, w1, w5
    bbb4:	lsr	w5, w12, #10
    bbb8:	add	w1, w6, w1
    bbbc:	eor	w6, w12, w12, ror #2
    bbc0:	eor	w5, w5, w6, ror #17
    bbc4:	eor	w6, w30, w30, ror #11
    bbc8:	eor	w6, w27, w6, ror #7
    bbcc:	lsr	w27, w16, #3
    bbd0:	add	w5, w5, w6
    bbd4:	ldr	w6, [x7, #24]
    bbd8:	add	w10, w5, w10
    bbdc:	eor	w5, w25, w2
    bbe0:	and	w5, w5, w26
    bbe4:	add	w24, w24, w6
    bbe8:	eor	w5, w5, w25
    bbec:	and	w6, w4, w3
    bbf0:	add	w5, w5, w10
    bbf4:	add	w24, w5, w24
    bbf8:	eor	w5, w26, w26, ror #14
    bbfc:	eor	w5, w26, w5, ror #5
    bc00:	ror	w5, w5, #6
    bc04:	add	w24, w24, w5
    bc08:	eor	w5, w1, w1, ror #9
    bc0c:	add	w23, w23, w24
    bc10:	eor	w5, w1, w5, ror #11
    bc14:	ror	w5, w5, #2
    bc18:	add	w24, w5, w24
    bc1c:	eor	w5, w4, w3
    bc20:	and	w5, w5, w1
    bc24:	add	w5, w5, w6
    bc28:	eor	w6, w11, w11, ror #2
    bc2c:	add	w24, w24, w5
    bc30:	lsr	w5, w11, #10
    bc34:	eor	w6, w5, w6, ror #17
    bc38:	eor	w5, w16, w16, ror #11
    bc3c:	add	w6, w6, w9
    bc40:	eor	w5, w27, w5, ror #7
    bc44:	add	w30, w5, w30
    bc48:	eor	w5, w2, w26
    bc4c:	and	w5, w5, w23
    bc50:	add	w30, w6, w30
    bc54:	eor	w5, w5, w2
    bc58:	lsr	w6, w22, #3
    bc5c:	add	w25, w5, w25
    bc60:	ldr	w5, [x7, #28]
    bc64:	add	w5, w30, w5
    bc68:	add	w25, w25, w5
    bc6c:	eor	w5, w23, w23, ror #14
    bc70:	eor	w5, w23, w5, ror #5
    bc74:	ror	w5, w5, #6
    bc78:	add	w25, w25, w5
    bc7c:	and	w5, w3, w1
    bc80:	add	w27, w4, w25
    bc84:	eor	w4, w24, w24, ror #9
    bc88:	eor	w4, w24, w4, ror #11
    bc8c:	ror	w4, w4, #2
    bc90:	add	w25, w4, w25
    bc94:	eor	w4, w3, w1
    bc98:	and	w4, w4, w24
    bc9c:	add	w4, w4, w5
    bca0:	eor	w5, w10, w10, ror #2
    bca4:	add	w25, w25, w4
    bca8:	lsr	w4, w10, #10
    bcac:	eor	w5, w4, w5, ror #17
    bcb0:	eor	w4, w22, w22, ror #11
    bcb4:	add	w5, w5, w15
    bcb8:	eor	w4, w6, w4, ror #7
    bcbc:	lsr	w6, w21, #3
    bcc0:	add	w16, w4, w16
    bcc4:	eor	w4, w26, w23
    bcc8:	and	w4, w4, w27
    bccc:	add	w16, w5, w16
    bcd0:	eor	w4, w4, w26
    bcd4:	add	w2, w4, w2
    bcd8:	ldr	w4, [x7, #32]
    bcdc:	add	w4, w16, w4
    bce0:	add	w2, w2, w4
    bce4:	eor	w4, w27, w27, ror #14
    bce8:	eor	w4, w27, w4, ror #5
    bcec:	ror	w4, w4, #6
    bcf0:	add	w4, w2, w4
    bcf4:	eor	w2, w25, w25, ror #9
    bcf8:	add	w5, w3, w4
    bcfc:	eor	w3, w1, w24
    bd00:	eor	w2, w25, w2, ror #11
    bd04:	and	w3, w3, w25
    bd08:	ror	w2, w2, #2
    bd0c:	add	w2, w2, w4
    bd10:	and	w4, w1, w24
    bd14:	add	w3, w3, w4
    bd18:	eor	w4, w30, w30, ror #2
    bd1c:	add	w2, w2, w3
    bd20:	lsr	w3, w30, #10
    bd24:	eor	w4, w3, w4, ror #17
    bd28:	eor	w3, w21, w21, ror #11
    bd2c:	add	w4, w4, w14
    bd30:	eor	w3, w6, w3, ror #7
    bd34:	add	w22, w3, w22
    bd38:	eor	w3, w23, w27
    bd3c:	and	w3, w3, w5
    bd40:	add	w22, w4, w22
    bd44:	eor	w3, w3, w23
    bd48:	and	w4, w24, w25
    bd4c:	add	w26, w3, w26
    bd50:	ldr	w3, [x7, #36]
    bd54:	add	w3, w22, w3
    bd58:	add	w26, w26, w3
    bd5c:	eor	w3, w5, w5, ror #14
    bd60:	eor	w3, w5, w3, ror #5
    bd64:	ror	w3, w3, #6
    bd68:	add	w26, w26, w3
    bd6c:	eor	w3, w2, w2, ror #9
    bd70:	add	w6, w1, w26
    bd74:	eor	w1, w24, w25
    bd78:	eor	w3, w2, w3, ror #11
    bd7c:	and	w1, w1, w2
    bd80:	add	w1, w1, w4
    bd84:	eor	w4, w16, w16, ror #2
    bd88:	ror	w3, w3, #2
    bd8c:	add	w3, w3, w26
    bd90:	lsr	w26, w20, #3
    bd94:	add	w3, w3, w1
    bd98:	lsr	w1, w16, #10
    bd9c:	eor	w4, w1, w4, ror #17
    bda0:	eor	w1, w20, w20, ror #11
    bda4:	add	w4, w4, w13
    bda8:	eor	w1, w26, w1, ror #7
    bdac:	eor	w26, w27, w5
    bdb0:	and	w26, w26, w6
    bdb4:	add	w21, w1, w21
    bdb8:	eor	w26, w26, w27
    bdbc:	add	w21, w4, w21
    bdc0:	add	w23, w26, w23
    bdc4:	ldr	w26, [x7, #40]
    bdc8:	eor	w4, w25, w2
    bdcc:	lsr	w1, w22, #10
    bdd0:	add	w26, w21, w26
    bdd4:	and	w4, w4, w3
    bdd8:	add	w23, w23, w26
    bddc:	eor	w26, w6, w6, ror #14
    bde0:	eor	w26, w6, w26, ror #5
    bde4:	ror	w26, w26, #6
    bde8:	add	w23, w23, w26
    bdec:	eor	w26, w3, w3, ror #9
    bdf0:	add	w24, w24, w23
    bdf4:	eor	w26, w3, w26, ror #11
    bdf8:	ror	w26, w26, #2
    bdfc:	add	w23, w26, w23
    be00:	and	w26, w25, w2
    be04:	add	w4, w4, w26
    be08:	add	w26, w23, w4
    be0c:	eor	w4, w22, w22, ror #2
    be10:	lsr	w23, w19, #3
    be14:	eor	w4, w1, w4, ror #17
    be18:	eor	w1, w19, w19, ror #11
    be1c:	add	w4, w4, w12
    be20:	eor	w1, w23, w1, ror #7
    be24:	eor	w23, w24, w24, ror #14
    be28:	add	w20, w1, w20
    be2c:	eor	w1, w2, w3
    be30:	add	w20, w4, w20
    be34:	eor	w4, w5, w6
    be38:	and	w4, w4, w24
    be3c:	eor	w23, w24, w23, ror #5
    be40:	eor	w4, w4, w5
    be44:	and	w1, w1, w26
    be48:	add	w4, w4, w27
    be4c:	ldr	w27, [x7, #44]
    be50:	ror	w23, w23, #6
    be54:	add	w27, w20, w27
    be58:	add	w4, w4, w27
    be5c:	lsr	w27, w17, #3
    be60:	add	w4, w4, w23
    be64:	eor	w23, w26, w26, ror #9
    be68:	add	w25, w25, w4
    be6c:	eor	w23, w26, w23, ror #11
    be70:	ror	w23, w23, #2
    be74:	add	w4, w23, w4
    be78:	and	w23, w2, w3
    be7c:	add	w1, w1, w23
    be80:	add	w23, w4, w1
    be84:	eor	w4, w21, w21, ror #2
    be88:	lsr	w1, w21, #10
    be8c:	eor	w4, w1, w4, ror #17
    be90:	eor	w1, w17, w17, ror #11
    be94:	add	w4, w4, w11
    be98:	eor	w1, w27, w1, ror #7
    be9c:	lsr	w27, w18, #3
    bea0:	add	w19, w1, w19
    bea4:	eor	w1, w6, w24
    bea8:	and	w1, w1, w25
    beac:	add	w19, w4, w19
    beb0:	eor	w1, w1, w6
    beb4:	and	w4, w3, w26
    beb8:	add	w5, w1, w5
    bebc:	ldr	w1, [x7, #48]
    bec0:	add	w1, w19, w1
    bec4:	add	w5, w5, w1
    bec8:	eor	w1, w25, w25, ror #14
    becc:	eor	w1, w25, w1, ror #5
    bed0:	ror	w1, w1, #6
    bed4:	add	w1, w5, w1
    bed8:	eor	w5, w23, w23, ror #9
    bedc:	add	w2, w2, w1
    bee0:	eor	w5, w23, w5, ror #11
    bee4:	ror	w5, w5, #2
    bee8:	add	w1, w5, w1
    beec:	eor	w5, w3, w26
    bef0:	and	w5, w5, w23
    bef4:	add	w5, w5, w4
    bef8:	eor	w4, w20, w20, ror #2
    befc:	add	w5, w1, w5
    bf00:	lsr	w1, w20, #10
    bf04:	eor	w4, w1, w4, ror #17
    bf08:	eor	w1, w18, w18, ror #11
    bf0c:	add	w4, w4, w10
    bf10:	eor	w1, w27, w1, ror #7
    bf14:	lsr	w27, w8, #3
    bf18:	add	w17, w1, w17
    bf1c:	eor	w1, w24, w25
    bf20:	and	w1, w1, w2
    bf24:	add	w17, w4, w17
    bf28:	eor	w1, w1, w24
    bf2c:	and	w4, w26, w23
    bf30:	add	w1, w1, w6
    bf34:	ldr	w6, [x7, #52]
    bf38:	add	w6, w17, w6
    bf3c:	add	w1, w1, w6
    bf40:	eor	w6, w2, w2, ror #14
    bf44:	eor	w6, w2, w6, ror #5
    bf48:	ror	w6, w6, #6
    bf4c:	add	w1, w1, w6
    bf50:	eor	w6, w5, w5, ror #9
    bf54:	add	w3, w3, w1
    bf58:	eor	w6, w5, w6, ror #11
    bf5c:	ror	w6, w6, #2
    bf60:	add	w1, w6, w1
    bf64:	eor	w6, w26, w23
    bf68:	and	w6, w6, w5
    bf6c:	add	w6, w6, w4
    bf70:	eor	w4, w19, w19, ror #2
    bf74:	add	w6, w1, w6
    bf78:	lsr	w1, w19, #10
    bf7c:	eor	w4, w1, w4, ror #17
    bf80:	eor	w1, w8, w8, ror #11
    bf84:	add	w4, w4, w30
    bf88:	eor	w1, w27, w1, ror #7
    bf8c:	add	w18, w1, w18
    bf90:	eor	w1, w25, w2
    bf94:	and	w1, w1, w3
    bf98:	add	w18, w4, w18
    bf9c:	eor	w1, w1, w25
    bfa0:	add	w24, w1, w24
    bfa4:	ldr	w1, [x7, #56]
    bfa8:	add	w1, w18, w1
    bfac:	add	w24, w24, w1
    bfb0:	eor	w1, w3, w3, ror #14
    bfb4:	eor	w1, w3, w1, ror #5
    bfb8:	ror	w1, w1, #6
    bfbc:	add	w24, w24, w1
    bfc0:	eor	w1, w6, w6, ror #9
    bfc4:	add	w4, w26, w24
    bfc8:	and	w26, w23, w5
    bfcc:	eor	w1, w6, w1, ror #11
    bfd0:	ror	w1, w1, #2
    bfd4:	add	w24, w1, w24
    bfd8:	eor	w1, w23, w5
    bfdc:	and	w1, w1, w6
    bfe0:	add	w1, w1, w26
    bfe4:	lsr	w26, w9, #3
    bfe8:	add	w24, w24, w1
    bfec:	eor	w1, w9, w9, ror #11
    bff0:	eor	w1, w26, w1, ror #7
    bff4:	lsr	w26, w17, #10
    bff8:	add	w1, w1, w8
    bffc:	eor	w8, w17, w17, ror #2
    c000:	eor	w8, w26, w8, ror #17
    c004:	and	w26, w5, w6
    c008:	add	w8, w8, w16
    c00c:	add	w8, w1, w8
    c010:	eor	w1, w2, w3
    c014:	and	w1, w1, w4
    c018:	eor	w1, w1, w2
    c01c:	add	w25, w1, w25
    c020:	ldr	w1, [x7, #60]
    c024:	add	w1, w8, w1
    c028:	add	w25, w25, w1
    c02c:	eor	w1, w4, w4, ror #14
    c030:	eor	w1, w4, w1, ror #5
    c034:	ror	w1, w1, #6
    c038:	add	w25, w25, w1
    c03c:	add	w1, w23, w25
    c040:	eor	w23, w24, w24, ror #9
    c044:	eor	w23, w24, w23, ror #11
    c048:	ror	w23, w23, #2
    c04c:	add	w25, w23, w25
    c050:	eor	w23, w5, w6
    c054:	and	w23, w23, w24
    c058:	add	w23, w23, w26
    c05c:	add	w25, w25, w23
    c060:	b.ne	b8d4 <lzma_crc64@@XZ_5.0+0x72c>  // b.any
    c064:	ldr	w7, [x0]
    c068:	ldp	x19, x20, [sp, #16]
    c06c:	add	w25, w7, w25
    c070:	ldr	w7, [x0, #4]
    c074:	ldp	x21, x22, [sp, #32]
    c078:	add	w24, w7, w24
    c07c:	ldr	w7, [x0, #8]
    c080:	stp	w25, w24, [x0]
    c084:	add	w6, w7, w6
    c088:	str	w6, [x0, #8]
    c08c:	ldr	w6, [x0, #12]
    c090:	ldp	x23, x24, [sp, #48]
    c094:	add	w5, w6, w5
    c098:	str	w5, [x0, #12]
    c09c:	ldr	w5, [x0, #16]
    c0a0:	ldp	x25, x26, [sp, #64]
    c0a4:	add	w1, w5, w1
    c0a8:	str	w1, [x0, #16]
    c0ac:	ldr	w1, [x0, #20]
    c0b0:	ldp	x27, x28, [sp, #80]
    c0b4:	add	w4, w1, w4
    c0b8:	ldr	w1, [x0, #24]
    c0bc:	add	w3, w1, w3
    c0c0:	ldr	w1, [x0, #28]
    c0c4:	stp	w4, w3, [x0, #20]
    c0c8:	add	w2, w1, w2
    c0cc:	str	w2, [x0, #28]
    c0d0:	ldp	x29, x30, [sp], #128
    c0d4:	ret
    c0d8:	adrp	x1, 19000 <lzma_mode_is_supported@@XZ_5.0+0x9ebc>
    c0dc:	add	x1, x1, #0x7c8
    c0e0:	str	xzr, [x0, #96]
    c0e4:	ldp	x2, x3, [x1, #256]
    c0e8:	stp	x2, x3, [x0, #64]
    c0ec:	ldp	x2, x3, [x1, #272]
    c0f0:	stp	x2, x3, [x0, #80]
    c0f4:	ret
    c0f8:	stp	x29, x30, [sp, #-64]!
    c0fc:	mov	x29, sp
    c100:	stp	x19, x20, [sp, #16]
    c104:	mov	x20, x2
    c108:	stp	x21, x22, [sp, #32]
    c10c:	mov	x22, x0
    c110:	mov	x21, x1
    c114:	stp	x23, x24, [sp, #48]
    c118:	mov	x23, #0x40                  	// #64
    c11c:	add	x24, x2, x23
    c120:	cbnz	x21, c138 <lzma_crc64@@XZ_5.0+0xf90>
    c124:	ldp	x19, x20, [sp, #16]
    c128:	ldp	x21, x22, [sp, #32]
    c12c:	ldp	x23, x24, [sp, #48]
    c130:	ldp	x29, x30, [sp], #64
    c134:	ret
    c138:	ldr	x0, [x20, #96]
    c13c:	mov	x1, x22
    c140:	and	x0, x0, #0x3f
    c144:	sub	x19, x23, x0
    c148:	add	x0, x20, x0
    c14c:	cmp	x21, x19
    c150:	csel	x19, x21, x19, ls  // ls = plast
    c154:	mov	x2, x19
    c158:	add	x22, x22, x19
    c15c:	bl	3090 <memcpy@plt>
    c160:	sub	x21, x21, x19
    c164:	ldr	x2, [x20, #96]
    c168:	add	x19, x19, x2
    c16c:	str	x19, [x20, #96]
    c170:	tst	x19, #0x3f
    c174:	b.ne	c120 <lzma_crc64@@XZ_5.0+0xf78>  // b.any
    c178:	mov	x1, x20
    c17c:	mov	x0, x24
    c180:	bl	b2a0 <lzma_crc64@@XZ_5.0+0xf8>
    c184:	b	c120 <lzma_crc64@@XZ_5.0+0xf78>
    c188:	stp	x29, x30, [sp, #-32]!
    c18c:	mov	w2, #0xffffff80            	// #-128
    c190:	mov	x29, sp
    c194:	str	x19, [sp, #16]
    c198:	mov	x19, x0
    c19c:	ldr	x0, [x0, #96]
    c1a0:	and	x0, x0, #0x3f
    c1a4:	add	x1, x0, #0x1
    c1a8:	strb	w2, [x19, x0]
    c1ac:	add	x0, x19, #0x40
    c1b0:	cmp	x1, #0x38
    c1b4:	b.ne	c1f8 <lzma_crc64@@XZ_5.0+0x1050>  // b.any
    c1b8:	ldr	x1, [x19, #96]
    c1bc:	lsl	x1, x1, #3
    c1c0:	str	x1, [x19, #96]
    c1c4:	rev	x1, x1
    c1c8:	str	x1, [x19, #56]
    c1cc:	mov	x1, x19
    c1d0:	bl	b2a0 <lzma_crc64@@XZ_5.0+0xf8>
    c1d4:	add	x1, x19, #0x20
    c1d8:	ldr	w0, [x19, #64]
    c1dc:	rev	w0, w0
    c1e0:	str	w0, [x19], #4
    c1e4:	cmp	x19, x1
    c1e8:	b.ne	c1d8 <lzma_crc64@@XZ_5.0+0x1030>  // b.any
    c1ec:	ldr	x19, [sp, #16]
    c1f0:	ldp	x29, x30, [sp], #32
    c1f4:	ret
    c1f8:	cmp	x1, #0x40
    c1fc:	b.ne	c20c <lzma_crc64@@XZ_5.0+0x1064>  // b.any
    c200:	mov	x1, x19
    c204:	bl	b2a0 <lzma_crc64@@XZ_5.0+0xf8>
    c208:	mov	x1, #0x0                   	// #0
    c20c:	strb	wzr, [x19, x1]
    c210:	add	x1, x1, #0x1
    c214:	b	c1b0 <lzma_crc64@@XZ_5.0+0x1008>
    c218:	stp	x29, x30, [sp, #-32]!
    c21c:	mov	x29, sp
    c220:	stp	x19, x20, [sp, #16]
    c224:	mov	x19, x0
    c228:	mov	x20, x1
    c22c:	add	x0, x0, #0x98
    c230:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    c234:	ldr	x0, [x19, #104]
    c238:	mov	x1, x20
    c23c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c240:	ldr	x0, [x19, #96]
    c244:	mov	x1, x20
    c248:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c24c:	ldr	x0, [x19, #32]
    c250:	mov	x1, x20
    c254:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c258:	ldr	x2, [x19, #16]
    c25c:	mov	x1, x20
    c260:	ldr	x0, [x19]
    c264:	cbz	x2, c280 <lzma_crc64@@XZ_5.0+0x10d8>
    c268:	blr	x2
    c26c:	mov	x1, x20
    c270:	mov	x0, x19
    c274:	ldp	x19, x20, [sp, #16]
    c278:	ldp	x29, x30, [sp], #32
    c27c:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c280:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c284:	b	c26c <lzma_crc64@@XZ_5.0+0x10c4>
    c288:	sub	sp, sp, #0x90
    c28c:	stp	x29, x30, [sp, #16]
    c290:	add	x29, sp, #0x10
    c294:	stp	x21, x22, [sp, #48]
    c298:	mov	x21, x4
    c29c:	ldr	w22, [sp, #144]
    c2a0:	stp	x19, x20, [sp, #32]
    c2a4:	mov	x19, x0
    c2a8:	mov	x20, x3
    c2ac:	stp	x23, x24, [sp, #64]
    c2b0:	mov	x23, x2
    c2b4:	mov	x24, x6
    c2b8:	stp	x25, x26, [sp, #80]
    c2bc:	mov	x25, x7
    c2c0:	add	x26, x0, #0x20
    c2c4:	stp	x27, x28, [sp, #96]
    c2c8:	mov	x27, x5
    c2cc:	add	x28, sp, #0x88
    c2d0:	str	x1, [sp, #112]
    c2d4:	ldr	x0, [x24]
    c2d8:	cmp	x0, x25
    c2dc:	b.cs	c2f0 <lzma_crc64@@XZ_5.0+0x1148>  // b.hs, b.nlast
    c2e0:	ldr	x0, [x20]
    c2e4:	cmp	x0, x21
    c2e8:	b.cc	c2f8 <lzma_crc64@@XZ_5.0+0x1150>  // b.lo, b.ul, b.last
    c2ec:	cbnz	w22, c2f8 <lzma_crc64@@XZ_5.0+0x1150>
    c2f0:	mov	w2, #0x0                   	// #0
    c2f4:	b	c438 <lzma_crc64@@XZ_5.0+0x1290>
    c2f8:	ldr	w0, [x19, #136]
    c2fc:	cbz	w0, c328 <lzma_crc64@@XZ_5.0+0x1180>
    c300:	ldp	x0, x5, [x19]
    c304:	mov	x2, x27
    c308:	mov	x4, x25
    c30c:	mov	x3, x24
    c310:	mov	x1, x26
    c314:	blr	x5
    c318:	mov	w2, w0
    c31c:	cbz	w0, c2d4 <lzma_crc64@@XZ_5.0+0x112c>
    c320:	str	wzr, [x19, #136]
    c324:	b	c438 <lzma_crc64@@XZ_5.0+0x1290>
    c328:	ldr	w3, [x19, #56]
    c32c:	ldr	w0, [x19, #64]
    c330:	cmp	w3, w0
    c334:	b.cc	c300 <lzma_crc64@@XZ_5.0+0x1158>  // b.lo, b.ul, b.last
    c338:	ldr	w0, [x19, #40]
    c33c:	ldr	w1, [x19, #48]
    c340:	sub	w0, w0, w1
    c344:	cmp	w3, w0
    c348:	b.cc	c3a4 <lzma_crc64@@XZ_5.0+0x11fc>  // b.lo, b.ul, b.last
    c34c:	ldr	w1, [x26, #12]
    c350:	ldr	x0, [x26]
    c354:	sub	w3, w3, w1
    c358:	and	w3, w3, #0xfffffff0
    c35c:	ldr	w2, [x26, #36]
    c360:	str	w3, [sp, #124]
    c364:	sub	w2, w2, w3
    c368:	add	x1, x0, w3, uxtw
    c36c:	bl	30b0 <memmove@plt>
    c370:	ldr	w3, [sp, #124]
    c374:	ldr	w0, [x26, #20]
    c378:	add	w0, w0, w3
    c37c:	str	w0, [x26, #20]
    c380:	ldr	w0, [x26, #24]
    c384:	sub	w0, w0, w3
    c388:	str	w0, [x26, #24]
    c38c:	ldr	w0, [x26, #32]
    c390:	sub	w0, w0, w3
    c394:	str	w0, [x26, #32]
    c398:	ldr	w0, [x26, #36]
    c39c:	sub	w3, w0, w3
    c3a0:	str	w3, [x26, #36]
    c3a4:	ldr	x9, [x19, #176]
    c3a8:	ldr	w0, [x19, #68]
    c3ac:	str	x0, [sp, #136]
    c3b0:	ldr	w5, [x19, #40]
    c3b4:	ldr	x3, [x19, #32]
    c3b8:	cbnz	x9, c464 <lzma_crc64@@XZ_5.0+0x12bc>
    c3bc:	mov	x4, x28
    c3c0:	mov	x2, x21
    c3c4:	mov	x1, x20
    c3c8:	mov	x0, x23
    c3cc:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
    c3d0:	cbz	w22, c45c <lzma_crc64@@XZ_5.0+0x12b4>
    c3d4:	ldr	x0, [x20]
    c3d8:	cmp	x0, x21
    c3dc:	cset	w2, eq  // eq = none
    c3e0:	ldr	x0, [sp, #136]
    c3e4:	str	w0, [x19, #68]
    c3e8:	cmp	w2, #0x1
    c3ec:	b.ne	c494 <lzma_crc64@@XZ_5.0+0x12ec>  // b.any
    c3f0:	mov	w2, #0x0                   	// #0
    c3f4:	str	w0, [x19, #64]
    c3f8:	str	w22, [x19, #136]
    c3fc:	ldr	w1, [x19, #72]
    c400:	cbz	w1, c434 <lzma_crc64@@XZ_5.0+0x128c>
    c404:	ldr	w0, [x19, #56]
    c408:	ldr	w3, [x19, #64]
    c40c:	cmp	w0, w3
    c410:	b.cs	c434 <lzma_crc64@@XZ_5.0+0x128c>  // b.hs, b.nlast
    c414:	ldr	x3, [x19, #88]
    c418:	sub	w0, w0, w1
    c41c:	str	w0, [x19, #56]
    c420:	mov	x0, x26
    c424:	str	wzr, [x19, #72]
    c428:	str	w2, [sp, #124]
    c42c:	blr	x3
    c430:	ldr	w2, [sp, #124]
    c434:	cbz	w2, c300 <lzma_crc64@@XZ_5.0+0x1158>
    c438:	mov	w0, w2
    c43c:	ldp	x29, x30, [sp, #16]
    c440:	ldp	x19, x20, [sp, #32]
    c444:	ldp	x21, x22, [sp, #48]
    c448:	ldp	x23, x24, [sp, #64]
    c44c:	ldp	x25, x26, [sp, #80]
    c450:	ldp	x27, x28, [sp, #96]
    c454:	add	sp, sp, #0x90
    c458:	ret
    c45c:	mov	w2, #0x0                   	// #0
    c460:	b	c3e0 <lzma_crc64@@XZ_5.0+0x1238>
    c464:	ldr	x1, [sp, #112]
    c468:	mov	x2, x23
    c46c:	ldr	x0, [x19, #152]
    c470:	str	w22, [sp]
    c474:	mov	x7, x5
    c478:	mov	x6, x28
    c47c:	mov	x5, x3
    c480:	mov	x4, x21
    c484:	mov	x3, x20
    c488:	blr	x9
    c48c:	mov	w2, w0
    c490:	b	c3e0 <lzma_crc64@@XZ_5.0+0x1238>
    c494:	ldr	w1, [x19, #48]
    c498:	cmp	w0, w1
    c49c:	b.ls	c3fc <lzma_crc64@@XZ_5.0+0x1254>  // b.plast
    c4a0:	sub	w0, w0, w1
    c4a4:	str	w0, [x19, #64]
    c4a8:	b	c3fc <lzma_crc64@@XZ_5.0+0x1254>
    c4ac:	stp	x29, x30, [sp, #-48]!
    c4b0:	mov	x29, sp
    c4b4:	stp	x19, x20, [sp, #16]
    c4b8:	mov	x19, x0
    c4bc:	mov	x20, x2
    c4c0:	ldr	x0, [x2, #8]
    c4c4:	stp	x21, x22, [sp, #32]
    c4c8:	mov	x2, #0xf000                	// #61440
    c4cc:	sub	x3, x0, #0x1, lsl #12
    c4d0:	movk	x2, #0x5fff, lsl #16
    c4d4:	cmp	x3, x2
    c4d8:	b.ls	c4f0 <lzma_crc64@@XZ_5.0+0x1348>  // b.plast
    c4dc:	mov	w0, #0x1                   	// #1
    c4e0:	ldp	x19, x20, [sp, #16]
    c4e4:	ldp	x21, x22, [sp, #32]
    c4e8:	ldp	x29, x30, [sp], #48
    c4ec:	ret
    c4f0:	ldp	x3, x2, [x20, #24]
    c4f4:	cmp	x2, x3
    c4f8:	b.hi	c4dc <lzma_crc64@@XZ_5.0+0x1334>  // b.pmore
    c4fc:	ldr	x6, [x20]
    c500:	lsr	x2, x0, #1
    c504:	ldr	x5, [x20, #16]
    c508:	add	w4, w6, w0
    c50c:	add	w2, w2, #0x80, lsl #12
    c510:	ldr	w8, [x19, #8]
    c514:	add	w7, w5, w3
    c518:	add	x3, x3, x6
    c51c:	add	x3, x3, x5
    c520:	stp	w4, w7, [x19, #12]
    c524:	add	w4, w4, w7
    c528:	mov	x21, x1
    c52c:	ldr	x0, [x19]
    c530:	lsr	x3, x3, #1
    c534:	add	w2, w2, w4
    c538:	add	w2, w2, w3
    c53c:	str	w2, [x19, #8]
    c540:	cbz	x0, c554 <lzma_crc64@@XZ_5.0+0x13ac>
    c544:	cmp	w2, w8
    c548:	b.eq	c554 <lzma_crc64@@XZ_5.0+0x13ac>  // b.none
    c54c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c550:	str	xzr, [x19]
    c554:	ldp	x0, x4, [x20, #24]
    c558:	ldr	w2, [x20, #40]
    c55c:	stp	w4, w0, [x19, #96]
    c560:	ldr	x0, [x20, #8]
    c564:	cmp	w2, #0x12
    c568:	add	w3, w0, #0x1
    c56c:	str	w3, [x19, #84]
    c570:	b.eq	c6b8 <lzma_crc64@@XZ_5.0+0x1510>  // b.none
    c574:	b.hi	c5a0 <lzma_crc64@@XZ_5.0+0x13f8>  // b.pmore
    c578:	cmp	w2, #0x3
    c57c:	b.eq	c5c8 <lzma_crc64@@XZ_5.0+0x1420>  // b.none
    c580:	cmp	w2, #0x4
    c584:	b.ne	c4dc <lzma_crc64@@XZ_5.0+0x1334>  // b.any
    c588:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c58c:	ldr	x1, [x1, #4064]
    c590:	str	x1, [x19, #48]
    c594:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c598:	ldr	x1, [x1, #4024]
    c59c:	b	c5dc <lzma_crc64@@XZ_5.0+0x1434>
    c5a0:	cmp	w2, #0x13
    c5a4:	b.eq	c6d0 <lzma_crc64@@XZ_5.0+0x1528>  // b.none
    c5a8:	cmp	w2, #0x14
    c5ac:	b.ne	c4dc <lzma_crc64@@XZ_5.0+0x1334>  // b.any
    c5b0:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c5b4:	ldr	x1, [x1, #4016]
    c5b8:	str	x1, [x19, #48]
    c5bc:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c5c0:	ldr	x1, [x1, #4000]
    c5c4:	b	c5dc <lzma_crc64@@XZ_5.0+0x1434>
    c5c8:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c5cc:	ldr	x1, [x1, #3896]
    c5d0:	str	x1, [x19, #48]
    c5d4:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c5d8:	ldr	x1, [x1, #3912]
    c5dc:	str	x1, [x19, #56]
    c5e0:	and	w1, w2, #0xf
    c5e4:	cmp	w4, w1
    c5e8:	b.cc	c4dc <lzma_crc64@@XZ_5.0+0x1334>  // b.lo, b.ul, b.last
    c5ec:	and	w22, w2, #0x10
    c5f0:	cmp	w1, #0x2
    c5f4:	b.eq	c6e8 <lzma_crc64@@XZ_5.0+0x1540>  // b.none
    c5f8:	sub	w0, w0, #0x1
    c5fc:	mov	w4, #0x1000000             	// #16777216
    c600:	orr	w0, w0, w0, lsr #1
    c604:	orr	w0, w0, w0, lsr #2
    c608:	orr	w0, w0, w0, lsr #4
    c60c:	orr	w0, w0, w0, lsr #8
    c610:	lsr	w0, w0, #1
    c614:	orr	w0, w0, #0xffff
    c618:	cmp	w0, w4
    c61c:	b.ls	c630 <lzma_crc64@@XZ_5.0+0x1488>  // b.plast
    c620:	lsr	w0, w0, #1
    c624:	cmp	w1, #0x3
    c628:	mov	w4, #0xffffff              	// #16777215
    c62c:	csel	w0, w0, w4, ne  // ne = any
    c630:	str	w0, [x19, #88]
    c634:	cmp	w1, #0x2
    c638:	add	w4, w0, #0x401
    c63c:	csinc	w0, w4, w0, hi  // hi = pmore
    c640:	tst	w2, #0xc
    c644:	b.eq	c64c <lzma_crc64@@XZ_5.0+0x14a4>  // b.none
    c648:	add	w0, w0, #0x10, lsl #12
    c64c:	ldp	w2, w1, [x19, #108]
    c650:	cmp	w22, #0x0
    c654:	lsl	w4, w3, #1
    c658:	csel	w3, w3, w4, eq  // eq = none
    c65c:	stp	w0, w3, [x19, #108]
    c660:	cmp	w2, w0
    c664:	b.ne	c670 <lzma_crc64@@XZ_5.0+0x14c8>  // b.any
    c668:	cmp	w1, w3
    c66c:	b.eq	c690 <lzma_crc64@@XZ_5.0+0x14e8>  // b.none
    c670:	ldr	x0, [x19, #64]
    c674:	mov	x1, x21
    c678:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c67c:	str	xzr, [x19, #64]
    c680:	ldr	x0, [x19, #72]
    c684:	mov	x1, x21
    c688:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c68c:	str	xzr, [x19, #72]
    c690:	ldr	w0, [x20, #44]
    c694:	str	w0, [x19, #92]
    c698:	cbnz	w0, c6b0 <lzma_crc64@@XZ_5.0+0x1508>
    c69c:	ldr	w0, [x19, #96]
    c6a0:	cbz	w22, c6f0 <lzma_crc64@@XZ_5.0+0x1548>
    c6a4:	lsr	w0, w0, #1
    c6a8:	add	w0, w0, #0x10
    c6ac:	str	w0, [x19, #92]
    c6b0:	mov	w0, #0x0                   	// #0
    c6b4:	b	c4e0 <lzma_crc64@@XZ_5.0+0x1338>
    c6b8:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c6bc:	ldr	x1, [x1, #4048]
    c6c0:	str	x1, [x19, #48]
    c6c4:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c6c8:	ldr	x1, [x1, #4032]
    c6cc:	b	c5dc <lzma_crc64@@XZ_5.0+0x1434>
    c6d0:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c6d4:	ldr	x1, [x1, #3888]
    c6d8:	str	x1, [x19, #48]
    c6dc:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    c6e0:	ldr	x1, [x1, #3928]
    c6e4:	b	c5dc <lzma_crc64@@XZ_5.0+0x1434>
    c6e8:	mov	w0, #0xffff                	// #65535
    c6ec:	b	c630 <lzma_crc64@@XZ_5.0+0x1488>
    c6f0:	lsr	w0, w0, #2
    c6f4:	add	w0, w0, #0x4
    c6f8:	b	c6ac <lzma_crc64@@XZ_5.0+0x1504>
    c6fc:	ldr	x2, [x0, #24]
    c700:	cbz	x2, c74c <lzma_crc64@@XZ_5.0+0x15a4>
    c704:	stp	x29, x30, [sp, #-48]!
    c708:	mov	x29, sp
    c70c:	stp	x19, x20, [sp, #16]
    c710:	mov	x19, x0
    c714:	mov	x20, x3
    c718:	ldr	x0, [x0]
    c71c:	str	x21, [sp, #32]
    c720:	mov	x21, x1
    c724:	mov	x1, x3
    c728:	blr	x2
    c72c:	cbnz	w0, c754 <lzma_crc64@@XZ_5.0+0x15ac>
    c730:	add	x2, x20, #0x10
    c734:	mov	x1, x21
    c738:	add	x0, x19, #0x98
    c73c:	ldp	x19, x20, [sp, #16]
    c740:	ldr	x21, [sp, #32]
    c744:	ldp	x29, x30, [sp], #48
    c748:	b	3808 <lzma_version_string@@XZ_5.0+0x138>
    c74c:	mov	w0, #0xb                   	// #11
    c750:	ret
    c754:	ldp	x19, x20, [sp, #16]
    c758:	ldr	x21, [sp, #32]
    c75c:	ldp	x29, x30, [sp], #48
    c760:	ret
    c764:	stp	x29, x30, [sp, #-160]!
    c768:	mov	x2, #0x78                  	// #120
    c76c:	mov	w1, #0x0                   	// #0
    c770:	add	x3, sp, #0x28
    c774:	mov	x29, sp
    c778:	str	x19, [sp, #16]
    c77c:	mov	x19, x0
    c780:	mov	x0, x3
    c784:	bl	3230 <memset@plt>
    c788:	mov	x2, x19
    c78c:	mov	x1, #0x0                   	// #0
    c790:	bl	c4ac <lzma_crc64@@XZ_5.0+0x1304>
    c794:	tst	w0, #0xff
    c798:	b.ne	c7bc <lzma_crc64@@XZ_5.0+0x1614>  // b.any
    c79c:	ldp	w0, w1, [sp, #148]
    c7a0:	add	x0, x0, x1
    c7a4:	ldr	w1, [sp, #48]
    c7a8:	add	x1, x1, #0xe0
    c7ac:	add	x0, x1, x0, lsl #2
    c7b0:	ldr	x19, [sp, #16]
    c7b4:	ldp	x29, x30, [sp], #160
    c7b8:	ret
    c7bc:	mov	x0, #0xffffffffffffffff    	// #-1
    c7c0:	b	c7b0 <lzma_crc64@@XZ_5.0+0x1608>
    c7c4:	stp	x29, x30, [sp, #-128]!
    c7c8:	mov	x29, sp
    c7cc:	stp	x19, x20, [sp, #16]
    c7d0:	ldr	x19, [x0]
    c7d4:	stp	x21, x22, [sp, #32]
    c7d8:	mov	x21, x1
    c7dc:	stp	x23, x24, [sp, #48]
    c7e0:	mov	x22, x2
    c7e4:	mov	x23, x3
    c7e8:	cbnz	x19, c874 <lzma_crc64@@XZ_5.0+0x16cc>
    c7ec:	mov	x20, x0
    c7f0:	mov	x0, #0xe0                  	// #224
    c7f4:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    c7f8:	mov	x19, x0
    c7fc:	cbnz	x0, c818 <lzma_crc64@@XZ_5.0+0x1670>
    c800:	mov	w0, #0x5                   	// #5
    c804:	ldp	x19, x20, [sp, #16]
    c808:	ldp	x21, x22, [sp, #32]
    c80c:	ldp	x23, x24, [sp, #48]
    c810:	ldp	x29, x30, [sp], #128
    c814:	ret
    c818:	adrp	x0, c000 <lzma_crc64@@XZ_5.0+0xe58>
    c81c:	add	x0, x0, #0x288
    c820:	str	x0, [x20, #24]
    c824:	adrp	x0, c000 <lzma_crc64@@XZ_5.0+0xe58>
    c828:	add	x0, x0, #0x218
    c82c:	str	x0, [x20, #32]
    c830:	adrp	x0, c000 <lzma_crc64@@XZ_5.0+0xe58>
    c834:	add	x0, x0, #0x6fc
    c838:	stp	xzr, xzr, [x19]
    c83c:	str	x19, [x20]
    c840:	str	xzr, [x19, #16]
    c844:	str	xzr, [x19, #32]
    c848:	str	wzr, [x19, #40]
    c84c:	str	x0, [x20, #64]
    c850:	mov	x0, #0xffffffffffffffff    	// #-1
    c854:	stp	xzr, xzr, [x19, #96]
    c858:	stur	xzr, [x19, #140]
    c85c:	str	xzr, [x19, #152]
    c860:	str	x0, [x19, #160]
    c864:	stp	xzr, xzr, [x19, #168]
    c868:	stp	xzr, xzr, [x19, #184]
    c86c:	stp	xzr, xzr, [x19, #200]
    c870:	str	xzr, [x19, #216]
    c874:	ldr	x2, [x22, #16]
    c878:	add	x24, sp, #0x40
    c87c:	mov	x3, x24
    c880:	mov	x1, x21
    c884:	mov	x0, x19
    c888:	blr	x23
    c88c:	cbnz	w0, c804 <lzma_crc64@@XZ_5.0+0x165c>
    c890:	add	x20, x19, #0x20
    c894:	mov	x2, x24
    c898:	mov	x1, x21
    c89c:	mov	x0, x20
    c8a0:	bl	c4ac <lzma_crc64@@XZ_5.0+0x1304>
    c8a4:	tst	w0, #0xff
    c8a8:	b.ne	c9b4 <lzma_crc64@@XZ_5.0+0x180c>  // b.any
    c8ac:	ldr	x0, [x19, #32]
    c8b0:	cbz	x0, c928 <lzma_crc64@@XZ_5.0+0x1780>
    c8b4:	ldr	w0, [x20, #84]
    c8b8:	str	w0, [x20, #20]
    c8bc:	ldr	x0, [x20, #64]
    c8c0:	stp	xzr, xzr, [x19, #56]
    c8c4:	ldr	w2, [x20, #108]
    c8c8:	str	wzr, [x20, #40]
    c8cc:	lsl	x2, x2, #2
    c8d0:	cbnz	x0, c940 <lzma_crc64@@XZ_5.0+0x1798>
    c8d4:	mov	x1, x21
    c8d8:	mov	x0, x2
    c8dc:	bl	370c <lzma_version_string@@XZ_5.0+0x3c>
    c8e0:	str	x0, [x20, #64]
    c8e4:	ldr	w0, [x20, #112]
    c8e8:	mov	x1, x21
    c8ec:	lsl	x0, x0, #2
    c8f0:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    c8f4:	mov	x1, x0
    c8f8:	str	x1, [x20, #72]
    c8fc:	ldr	x0, [x20, #64]
    c900:	cbz	x0, c908 <lzma_crc64@@XZ_5.0+0x1760>
    c904:	cbnz	x1, c948 <lzma_crc64@@XZ_5.0+0x17a0>
    c908:	mov	x1, x21
    c90c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c910:	ldr	x0, [x20, #72]
    c914:	str	xzr, [x20, #64]
    c918:	mov	x1, x21
    c91c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    c920:	str	xzr, [x20, #72]
    c924:	b	c800 <lzma_crc64@@XZ_5.0+0x1658>
    c928:	ldr	w0, [x20, #8]
    c92c:	mov	x1, x21
    c930:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    c934:	str	x0, [x20]
    c938:	cbnz	x0, c8b4 <lzma_crc64@@XZ_5.0+0x170c>
    c93c:	b	c800 <lzma_crc64@@XZ_5.0+0x1658>
    c940:	mov	w1, #0x0                   	// #0
    c944:	bl	3230 <memset@plt>
    c948:	ldr	x1, [sp, #112]
    c94c:	str	wzr, [x20, #80]
    c950:	cbz	x1, c99c <lzma_crc64@@XZ_5.0+0x17f4>
    c954:	ldr	w0, [sp, #120]
    c958:	cbz	w0, c99c <lzma_crc64@@XZ_5.0+0x17f4>
    c95c:	ldr	w2, [x20, #8]
    c960:	cmp	w2, w0
    c964:	csel	w2, w2, w0, ls  // ls = plast
    c968:	mov	w0, w0
    c96c:	str	w2, [x20, #36]
    c970:	sub	x0, x0, w2, uxtw
    c974:	mov	w2, w2
    c978:	add	x1, x1, x0
    c97c:	ldr	x0, [x20]
    c980:	bl	3090 <memcpy@plt>
    c984:	ldr	w1, [x20, #36]
    c988:	mov	w0, #0x1                   	// #1
    c98c:	ldr	x2, [x20, #56]
    c990:	str	w0, [x20, #104]
    c994:	mov	x0, x20
    c998:	blr	x2
    c99c:	str	wzr, [x20, #104]
    c9a0:	add	x2, x22, #0x18
    c9a4:	mov	x1, x21
    c9a8:	add	x0, x19, #0x98
    c9ac:	bl	389c <lzma_version_string@@XZ_5.0+0x1cc>
    c9b0:	b	c804 <lzma_crc64@@XZ_5.0+0x165c>
    c9b4:	mov	w0, #0x8                   	// #8
    c9b8:	b	c804 <lzma_crc64@@XZ_5.0+0x165c>

000000000000c9bc <lzma_mf_is_supported@@XZ_5.0>:
    c9bc:	mov	w1, w0
    c9c0:	mov	w0, #0x1                   	// #1
    c9c4:	cmp	w1, #0x3
    c9c8:	b.eq	c9ec <lzma_mf_is_supported@@XZ_5.0+0x30>  // b.none
    c9cc:	cmp	w1, #0x4
    c9d0:	b.eq	c9ec <lzma_mf_is_supported@@XZ_5.0+0x30>  // b.none
    c9d4:	cmp	w1, #0x12
    c9d8:	b.eq	c9ec <lzma_mf_is_supported@@XZ_5.0+0x30>  // b.none
    c9dc:	cmp	w1, #0x13
    c9e0:	b.eq	c9ec <lzma_mf_is_supported@@XZ_5.0+0x30>  // b.none
    c9e4:	cmp	w1, #0x14
    c9e8:	cset	w0, eq  // eq = none
    c9ec:	ret
    c9f0:	ldr	w1, [x0, #24]
    c9f4:	add	w1, w1, #0x1
    c9f8:	str	w1, [x0, #24]
    c9fc:	ldr	w1, [x0, #40]
    ca00:	add	w1, w1, #0x1
    ca04:	str	w1, [x0, #40]
    ca08:	ret
    ca0c:	mov	w11, w0
    ca10:	ldr	w12, [sp, #8]
    ca14:	ldr	x0, [sp]
    ca18:	sub	w14, w6, w1
    ca1c:	sub	x15, x2, #0x1
    ca20:	str	w3, [x5, w6, uxtw #2]
    ca24:	sub	w8, w1, w3
    ca28:	cbz	w4, ca98 <lzma_mf_is_supported@@XZ_5.0+0xdc>
    ca2c:	cmp	w8, w7
    ca30:	b.cs	ca98 <lzma_mf_is_supported@@XZ_5.0+0xdc>  // b.hs, b.nlast
    ca34:	cmp	w6, w8
    ca38:	sub	x13, x2, w8, uxtw
    ca3c:	csel	w9, w7, wzr, cc  // cc = lo, ul, last
    ca40:	add	w3, w3, w9
    ca44:	ldrb	w9, [x2, w12, uxtw]
    ca48:	add	w3, w3, w14
    ca4c:	ldrb	w10, [x13, w12, uxtw]
    ca50:	cmp	w10, w9
    ca54:	ldr	w3, [x5, x3, lsl #2]
    ca58:	b.ne	caa0 <lzma_mf_is_supported@@XZ_5.0+0xe4>  // b.any
    ca5c:	ldrb	w10, [x13]
    ca60:	ldrb	w9, [x2]
    ca64:	cmp	w10, w9
    ca68:	b.ne	caa0 <lzma_mf_is_supported@@XZ_5.0+0xe4>  // b.any
    ca6c:	mov	x9, #0x1                   	// #1
    ca70:	mov	w10, w9
    ca74:	cmp	w11, w9
    ca78:	b.hi	caa8 <lzma_mf_is_supported@@XZ_5.0+0xec>  // b.pmore
    ca7c:	cmp	w12, w10
    ca80:	b.cs	caa0 <lzma_mf_is_supported@@XZ_5.0+0xe4>  // b.hs, b.nlast
    ca84:	sub	w8, w8, #0x1
    ca88:	stp	w10, w8, [x0]
    ca8c:	cmp	w11, w10
    ca90:	add	x0, x0, #0x8
    ca94:	b.ne	ca9c <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.any
    ca98:	ret
    ca9c:	mov	w12, w10
    caa0:	sub	w4, w4, #0x1
    caa4:	b	ca24 <lzma_mf_is_supported@@XZ_5.0+0x68>
    caa8:	ldrb	w16, [x13, x9]
    caac:	add	x9, x9, #0x1
    cab0:	ldrb	w17, [x15, x9]
    cab4:	cmp	w17, w16
    cab8:	b.eq	ca70 <lzma_mf_is_supported@@XZ_5.0+0xb4>  // b.none
    cabc:	b	ca7c <lzma_mf_is_supported@@XZ_5.0+0xc0>
    cac0:	stp	x29, x30, [sp, #-48]!
    cac4:	ubfiz	x8, x6, #3, #31
    cac8:	add	x8, x8, #0x4
    cacc:	mov	x29, sp
    cad0:	mov	w17, w0
    cad4:	add	x14, x5, x8
    cad8:	ldr	w30, [sp, #56]
    cadc:	sub	x8, x8, #0x4
    cae0:	ldr	x0, [sp, #48]
    cae4:	add	x8, x5, x8
    cae8:	stp	x19, x20, [sp, #16]
    caec:	sub	w19, w6, w1
    caf0:	sub	x20, x2, #0x1
    caf4:	mov	w16, #0x0                   	// #0
    caf8:	mov	w15, #0x0                   	// #0
    cafc:	stp	x21, x22, [sp, #32]
    cb00:	sub	w12, w1, w3
    cb04:	cbnz	w4, cb20 <lzma_mf_is_supported@@XZ_5.0+0x164>
    cb08:	str	wzr, [x14]
    cb0c:	str	wzr, [x8]
    cb10:	ldp	x19, x20, [sp, #16]
    cb14:	ldp	x21, x22, [sp, #32]
    cb18:	ldp	x29, x30, [sp], #48
    cb1c:	ret
    cb20:	cmp	w12, w7
    cb24:	b.cs	cb08 <lzma_mf_is_supported@@XZ_5.0+0x14c>  // b.hs, b.nlast
    cb28:	cmp	w6, w12
    cb2c:	sub	x18, x2, w12, uxtw
    cb30:	csel	w10, w7, wzr, cc  // cc = lo, ul, last
    cb34:	cmp	w15, w16
    cb38:	csel	w13, w15, w16, ls  // ls = plast
    cb3c:	add	w10, w3, w10
    cb40:	add	w10, w10, w19
    cb44:	csel	w9, w15, w16, ls  // ls = plast
    cb48:	ldrb	w21, [x18, x13]
    cb4c:	ubfiz	x10, x10, #3, #31
    cb50:	ldrb	w13, [x2, x13]
    cb54:	add	x11, x5, x10
    cb58:	cmp	w21, w13
    cb5c:	b.ne	cb78 <lzma_mf_is_supported@@XZ_5.0+0x1bc>  // b.any
    cb60:	add	w13, w9, #0x1
    cb64:	mov	w9, w13
    cb68:	cmp	w17, w13
    cb6c:	b.hi	cbb0 <lzma_mf_is_supported@@XZ_5.0+0x1f4>  // b.pmore
    cb70:	cmp	w30, w9
    cb74:	b.cc	cbc8 <lzma_mf_is_supported@@XZ_5.0+0x20c>  // b.lo, b.ul, b.last
    cb78:	ldrb	w13, [x18, w9, uxtw]
    cb7c:	ldrb	w12, [x2, w9, uxtw]
    cb80:	cmp	w13, w12
    cb84:	b.cs	cbf8 <lzma_mf_is_supported@@XZ_5.0+0x23c>  // b.hs, b.nlast
    cb88:	str	w3, [x8]
    cb8c:	mov	w16, w9
    cb90:	add	x8, x11, #0x4
    cb94:	mov	w9, w15
    cb98:	ldr	w3, [x11, #4]
    cb9c:	mov	x11, x14
    cba0:	sub	w4, w4, #0x1
    cba4:	mov	w15, w9
    cba8:	mov	x14, x11
    cbac:	b	cb00 <lzma_mf_is_supported@@XZ_5.0+0x144>
    cbb0:	ldrb	w21, [x18, x13]
    cbb4:	add	x13, x13, #0x1
    cbb8:	ldrb	w22, [x20, x13]
    cbbc:	cmp	w22, w21
    cbc0:	b.eq	cb64 <lzma_mf_is_supported@@XZ_5.0+0x1a8>  // b.none
    cbc4:	b	cb70 <lzma_mf_is_supported@@XZ_5.0+0x1b4>
    cbc8:	sub	w12, w12, #0x1
    cbcc:	stp	w9, w12, [x0]
    cbd0:	cmp	w17, w9
    cbd4:	add	x0, x0, #0x8
    cbd8:	b.ne	cbf0 <lzma_mf_is_supported@@XZ_5.0+0x234>  // b.any
    cbdc:	ldr	w1, [x11]
    cbe0:	str	w1, [x8]
    cbe4:	ldr	w1, [x11, #4]
    cbe8:	str	w1, [x14]
    cbec:	b	cb10 <lzma_mf_is_supported@@XZ_5.0+0x154>
    cbf0:	mov	w30, w9
    cbf4:	b	cb78 <lzma_mf_is_supported@@XZ_5.0+0x1bc>
    cbf8:	str	w3, [x14]
    cbfc:	ldr	w3, [x5, x10]
    cc00:	b	cba0 <lzma_mf_is_supported@@XZ_5.0+0x1e4>
    cc04:	ubfiz	x8, x6, #3, #31
    cc08:	sub	w17, w6, w1
    cc0c:	add	x8, x8, #0x4
    cc10:	sub	x18, x2, #0x1
    cc14:	add	x14, x5, x8
    cc18:	sub	x8, x8, #0x4
    cc1c:	add	x8, x5, x8
    cc20:	sub	w11, w1, w3
    cc24:	mov	w16, #0x0                   	// #0
    cc28:	mov	w15, #0x0                   	// #0
    cc2c:	cbnz	w4, cd18 <lzma_mf_is_supported@@XZ_5.0+0x35c>
    cc30:	str	wzr, [x14]
    cc34:	str	wzr, [x8]
    cc38:	ret
    cc3c:	cmp	w11, w7
    cc40:	b.cs	ccdc <lzma_mf_is_supported@@XZ_5.0+0x320>  // b.hs, b.nlast
    cc44:	cmp	w6, w11
    cc48:	sub	x11, x2, w11, uxtw
    cc4c:	csel	w9, w7, wzr, cc  // cc = lo, ul, last
    cc50:	cmp	w15, w16
    cc54:	csel	w13, w15, w16, ls  // ls = plast
    cc58:	add	w9, w3, w9
    cc5c:	add	w9, w9, w17
    cc60:	csel	w10, w15, w16, ls  // ls = plast
    cc64:	ldrb	w19, [x11, x13]
    cc68:	ubfiz	x9, x9, #3, #31
    cc6c:	ldrb	w13, [x2, x13]
    cc70:	add	x12, x5, x9
    cc74:	cmp	w19, w13
    cc78:	b.ne	cca0 <lzma_mf_is_supported@@XZ_5.0+0x2e4>  // b.any
    cc7c:	add	w13, w10, #0x1
    cc80:	mov	w10, w13
    cc84:	cmp	w0, w13
    cc88:	b.ls	ccf0 <lzma_mf_is_supported@@XZ_5.0+0x334>  // b.plast
    cc8c:	ldrb	w30, [x11, x13]
    cc90:	add	x13, x13, #0x1
    cc94:	ldrb	w19, [x18, x13]
    cc98:	cmp	w19, w30
    cc9c:	b.eq	cc80 <lzma_mf_is_supported@@XZ_5.0+0x2c4>  // b.none
    cca0:	ldrb	w13, [x11, w10, uxtw]
    cca4:	ldrb	w11, [x2, w10, uxtw]
    cca8:	cmp	w13, w11
    ccac:	b.cs	cd0c <lzma_mf_is_supported@@XZ_5.0+0x350>  // b.hs, b.nlast
    ccb0:	str	w3, [x8]
    ccb4:	mov	w16, w10
    ccb8:	add	x8, x12, #0x4
    ccbc:	mov	w10, w15
    ccc0:	ldr	w3, [x12, #4]
    ccc4:	mov	x12, x14
    ccc8:	sub	w4, w4, #0x1
    cccc:	mov	w15, w10
    ccd0:	mov	x14, x12
    ccd4:	sub	w11, w1, w3
    ccd8:	cbnz	w4, cc3c <lzma_mf_is_supported@@XZ_5.0+0x280>
    ccdc:	str	wzr, [x14]
    cce0:	str	wzr, [x8]
    cce4:	ldr	x19, [sp, #16]
    cce8:	ldp	x29, x30, [sp], #32
    ccec:	ret
    ccf0:	cmp	w0, w13
    ccf4:	b.ne	cca0 <lzma_mf_is_supported@@XZ_5.0+0x2e4>  // b.any
    ccf8:	ldr	w0, [x12]
    ccfc:	str	w0, [x8]
    cd00:	ldr	w0, [x12, #4]
    cd04:	str	w0, [x14]
    cd08:	b	cce4 <lzma_mf_is_supported@@XZ_5.0+0x328>
    cd0c:	str	w3, [x14]
    cd10:	ldr	w3, [x5, x9]
    cd14:	b	ccc8 <lzma_mf_is_supported@@XZ_5.0+0x30c>
    cd18:	cmp	w11, w7
    cd1c:	b.cs	cc30 <lzma_mf_is_supported@@XZ_5.0+0x274>  // b.hs, b.nlast
    cd20:	stp	x29, x30, [sp, #-32]!
    cd24:	mov	x29, sp
    cd28:	str	x19, [sp, #16]
    cd2c:	b	cc44 <lzma_mf_is_supported@@XZ_5.0+0x288>
    cd30:	ldp	w2, w1, [x0, #80]
    cd34:	ldr	w3, [x0, #20]
    cd38:	add	w2, w2, #0x1
    cd3c:	cmp	w2, w1
    cd40:	csel	w2, w2, wzr, ne  // ne = any
    cd44:	str	w2, [x0, #80]
    cd48:	ldr	w2, [x0, #24]
    cd4c:	add	w2, w2, #0x1
    cd50:	str	w2, [x0, #24]
    cd54:	add	w2, w2, w3
    cd58:	cmn	w2, #0x1
    cd5c:	b.ne	cd90 <lzma_mf_is_supported@@XZ_5.0+0x3d4>  // b.any
    cd60:	mvn	w1, w1
    cd64:	mov	w2, #0x0                   	// #0
    cd68:	ldr	w3, [x0, #108]
    cd6c:	cmp	w2, w3
    cd70:	b.cc	cd94 <lzma_mf_is_supported@@XZ_5.0+0x3d8>  // b.lo, b.ul, b.last
    cd74:	mov	w2, #0x0                   	// #0
    cd78:	ldr	w3, [x0, #112]
    cd7c:	cmp	w2, w3
    cd80:	b.cc	cdb8 <lzma_mf_is_supported@@XZ_5.0+0x3fc>  // b.lo, b.ul, b.last
    cd84:	ldr	w2, [x0, #20]
    cd88:	sub	w1, w2, w1
    cd8c:	str	w1, [x0, #20]
    cd90:	ret
    cd94:	ldr	x5, [x0, #64]
    cd98:	ubfiz	x4, x2, #2, #32
    cd9c:	add	w2, w2, #0x1
    cda0:	ldr	w6, [x5, x4]
    cda4:	sub	w3, w6, w1
    cda8:	cmp	w1, w6
    cdac:	csel	w3, w3, wzr, cc  // cc = lo, ul, last
    cdb0:	str	w3, [x5, x4]
    cdb4:	b	cd68 <lzma_mf_is_supported@@XZ_5.0+0x3ac>
    cdb8:	ldr	x5, [x0, #72]
    cdbc:	ubfiz	x4, x2, #2, #32
    cdc0:	add	w2, w2, #0x1
    cdc4:	ldr	w6, [x5, x4]
    cdc8:	sub	w3, w6, w1
    cdcc:	cmp	w1, w6
    cdd0:	csel	w3, w3, wzr, cc  // cc = lo, ul, last
    cdd4:	str	w3, [x5, x4]
    cdd8:	b	cd78 <lzma_mf_is_supported@@XZ_5.0+0x3bc>
    cddc:	stp	x29, x30, [sp, #-48]!
    cde0:	mov	x29, sp
    cde4:	stp	x19, x20, [sp, #16]
    cde8:	mov	x20, x2
    cdec:	mov	x19, x0
    cdf0:	ldr	x2, [x0, #48]
    cdf4:	str	x21, [sp, #32]
    cdf8:	mov	x21, x1
    cdfc:	mov	x1, x20
    ce00:	blr	x2
    ce04:	mov	w4, w0
    ce08:	cbz	w0, cea4 <lzma_mf_is_supported@@XZ_5.0+0x4e8>
    ce0c:	sub	w0, w0, #0x1
    ce10:	lsl	x1, x0, #3
    ce14:	add	x6, x20, x0, lsl #3
    ce18:	ldr	w0, [x20, x1]
    ce1c:	ldr	w1, [x19, #96]
    ce20:	cmp	w1, w0
    ce24:	b.ne	ce7c <lzma_mf_is_supported@@XZ_5.0+0x4c0>  // b.any
    ce28:	ldr	w3, [x19, #36]
    ce2c:	ldr	w2, [x19, #24]
    ce30:	ldr	w5, [x19, #100]
    ce34:	add	w3, w3, #0x1
    ce38:	sub	w3, w3, w2
    ce3c:	mov	w2, w2
    ce40:	cmp	w5, w3
    ce44:	sub	x2, x2, #0x1
    ce48:	csel	w3, w5, w3, ls  // ls = plast
    ce4c:	ldr	w5, [x6, #4]
    ce50:	ldr	x6, [x19]
    ce54:	add	x2, x2, w0, uxtw
    ce58:	mvn	x5, x5
    ce5c:	sub	x5, x5, #0x1
    ce60:	add	x2, x6, x2
    ce64:	cmp	w3, w0
    ce68:	b.ls	ce7c <lzma_mf_is_supported@@XZ_5.0+0x4c0>  // b.plast
    ce6c:	ldrb	w1, [x2], #1
    ce70:	ldrb	w6, [x2, x5]
    ce74:	cmp	w6, w1
    ce78:	b.eq	ce9c <lzma_mf_is_supported@@XZ_5.0+0x4e0>  // b.none
    ce7c:	str	w4, [x21]
    ce80:	ldr	x21, [sp, #32]
    ce84:	ldr	w1, [x19, #28]
    ce88:	add	w1, w1, #0x1
    ce8c:	str	w1, [x19, #28]
    ce90:	ldp	x19, x20, [sp, #16]
    ce94:	ldp	x29, x30, [sp], #48
    ce98:	ret
    ce9c:	add	w0, w0, #0x1
    cea0:	b	ce64 <lzma_mf_is_supported@@XZ_5.0+0x4a8>
    cea4:	mov	w0, #0x0                   	// #0
    cea8:	b	ce7c <lzma_mf_is_supported@@XZ_5.0+0x4c0>
    ceac:	sub	sp, sp, #0x30
    ceb0:	mov	x18, x0
    ceb4:	stp	x29, x30, [sp, #16]
    ceb8:	add	x29, sp, #0x10
    cebc:	ldr	w3, [x0, #24]
    cec0:	ldr	w9, [x0, #96]
    cec4:	str	x19, [sp, #32]
    cec8:	mov	x19, x1
    cecc:	ldr	w1, [x0, #36]
    ced0:	sub	w1, w1, w3
    ced4:	cmp	w9, w1
    ced8:	b.ls	cf04 <lzma_mf_is_supported@@XZ_5.0+0x548>  // b.plast
    cedc:	cmp	w1, #0x2
    cee0:	b.hi	cf00 <lzma_mf_is_supported@@XZ_5.0+0x544>  // b.pmore
    cee4:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    cee8:	mov	w8, #0x0                   	// #0
    ceec:	mov	w0, w8
    cef0:	ldp	x29, x30, [sp, #16]
    cef4:	ldr	x19, [sp, #32]
    cef8:	add	sp, sp, #0x30
    cefc:	ret
    cf00:	mov	w9, w1
    cf04:	ldr	x6, [x18]
    cf08:	mov	w10, w3
    cf0c:	ldr	w1, [x18, #20]
    cf10:	ldr	x5, [x18, #64]
    cf14:	add	w1, w3, w1
    cf18:	ldrb	w4, [x6, w3, uxtw]
    cf1c:	add	x2, x6, w3, uxtw
    cf20:	adrp	x3, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    cf24:	ldr	x3, [x3, #3952]
    cf28:	ldrb	w0, [x2, #1]
    cf2c:	ldr	w3, [x3, x4, lsl #2]
    cf30:	eor	w3, w0, w3
    cf34:	ldrb	w0, [x2, #2]
    cf38:	ubfiz	x7, x3, #2, #10
    cf3c:	eor	w0, w3, w0, lsl #8
    cf40:	ldr	w3, [x18, #88]
    cf44:	and	w0, w0, w3
    cf48:	ldr	w4, [x5, x7]
    cf4c:	add	w0, w0, #0x400
    cf50:	sub	w4, w1, w4
    cf54:	lsl	x0, x0, #2
    cf58:	ldr	w3, [x5, x0]
    cf5c:	str	w1, [x5, x7]
    cf60:	str	w1, [x5, x0]
    cf64:	ldr	w7, [x18, #84]
    cf68:	cmp	w7, w4
    cf6c:	b.ls	cfdc <lzma_mf_is_supported@@XZ_5.0+0x620>  // b.plast
    cf70:	mov	w5, w4
    cf74:	ldrb	w0, [x6, x10]
    cf78:	neg	x5, x5
    cf7c:	ldrb	w8, [x2, x5]
    cf80:	cmp	w8, w0
    cf84:	b.ne	cfdc <lzma_mf_is_supported@@XZ_5.0+0x620>  // b.any
    cf88:	add	x6, x2, #0x2
    cf8c:	mov	w0, #0x2                   	// #2
    cf90:	cmp	w9, w0
    cf94:	b.ls	cfa8 <lzma_mf_is_supported@@XZ_5.0+0x5ec>  // b.plast
    cf98:	ldrb	w8, [x6, x5]
    cf9c:	ldrb	w10, [x6], #1
    cfa0:	cmp	w10, w8
    cfa4:	b.eq	cfd4 <lzma_mf_is_supported@@XZ_5.0+0x618>  // b.none
    cfa8:	sub	w4, w4, #0x1
    cfac:	stp	w0, w4, [x19]
    cfb0:	cmp	w9, w0
    cfb4:	mov	w8, #0x1                   	// #1
    cfb8:	b.ne	cfe4 <lzma_mf_is_supported@@XZ_5.0+0x628>  // b.any
    cfbc:	ldr	w1, [x18, #80]
    cfc0:	ldr	x0, [x18, #72]
    cfc4:	str	w3, [x0, x1, lsl #2]
    cfc8:	mov	x0, x18
    cfcc:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    cfd0:	b	ceec <lzma_mf_is_supported@@XZ_5.0+0x530>
    cfd4:	add	w0, w0, #0x1
    cfd8:	b	cf90 <lzma_mf_is_supported@@XZ_5.0+0x5d4>
    cfdc:	mov	w0, #0x2                   	// #2
    cfe0:	mov	w8, #0x0                   	// #0
    cfe4:	mov	w4, w8
    cfe8:	ldr	w6, [x18, #80]
    cfec:	ldr	x5, [x18, #72]
    cff0:	add	x4, x19, x4, lsl #3
    cff4:	str	x4, [sp]
    cff8:	str	w0, [sp, #8]
    cffc:	mov	w0, w9
    d000:	ldr	w4, [x18, #92]
    d004:	bl	ca0c <lzma_mf_is_supported@@XZ_5.0+0x50>
    d008:	sub	x8, x0, x19
    d00c:	ubfx	x8, x8, #3, #32
    d010:	b	cfc8 <lzma_mf_is_supported@@XZ_5.0+0x60c>
    d014:	stp	x29, x30, [sp, #-16]!
    d018:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    d01c:	mov	w7, w1
    d020:	mov	x29, sp
    d024:	ldr	x8, [x8, #3952]
    d028:	ldr	w2, [x0, #24]
    d02c:	ldr	w1, [x0, #36]
    d030:	sub	w1, w1, w2
    d034:	cmp	w1, #0x2
    d038:	b.hi	d050 <lzma_mf_is_supported@@XZ_5.0+0x694>  // b.pmore
    d03c:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d040:	subs	w7, w7, #0x1
    d044:	b.ne	d028 <lzma_mf_is_supported@@XZ_5.0+0x66c>  // b.any
    d048:	ldp	x29, x30, [sp], #16
    d04c:	ret
    d050:	ldr	x3, [x0]
    d054:	ldr	w1, [x0, #20]
    d058:	ldr	x4, [x0, #64]
    d05c:	add	w1, w2, w1
    d060:	add	x5, x3, w2, uxtw
    d064:	ldrb	w2, [x3, w2, uxtw]
    d068:	ldrb	w3, [x5, #1]
    d06c:	ldr	w2, [x8, x2, lsl #2]
    d070:	eor	w3, w3, w2
    d074:	ldrb	w2, [x5, #2]
    d078:	ldr	w5, [x0, #88]
    d07c:	eor	w2, w3, w2, lsl #8
    d080:	ubfiz	x3, x3, #2, #10
    d084:	and	w2, w2, w5
    d088:	add	w2, w2, #0x400
    d08c:	lsl	x2, x2, #2
    d090:	ldr	w5, [x4, x2]
    d094:	str	w1, [x4, x3]
    d098:	str	w1, [x4, x2]
    d09c:	ldr	x1, [x0, #72]
    d0a0:	ldr	w2, [x0, #80]
    d0a4:	str	w5, [x1, x2, lsl #2]
    d0a8:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d0ac:	b	d040 <lzma_mf_is_supported@@XZ_5.0+0x684>
    d0b0:	sub	sp, sp, #0x30
    d0b4:	mov	x18, x0
    d0b8:	stp	x29, x30, [sp, #16]
    d0bc:	add	x29, sp, #0x10
    d0c0:	ldr	w3, [x0, #24]
    d0c4:	ldr	w9, [x0, #96]
    d0c8:	str	x19, [sp, #32]
    d0cc:	mov	x19, x1
    d0d0:	ldr	w1, [x0, #36]
    d0d4:	sub	w1, w1, w3
    d0d8:	cmp	w9, w1
    d0dc:	b.ls	d108 <lzma_mf_is_supported@@XZ_5.0+0x74c>  // b.plast
    d0e0:	cmp	w1, #0x3
    d0e4:	b.hi	d104 <lzma_mf_is_supported@@XZ_5.0+0x748>  // b.pmore
    d0e8:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d0ec:	mov	w8, #0x0                   	// #0
    d0f0:	mov	w0, w8
    d0f4:	ldp	x29, x30, [sp, #16]
    d0f8:	ldr	x19, [sp, #32]
    d0fc:	add	sp, sp, #0x30
    d100:	ret
    d104:	mov	w9, w1
    d108:	ldr	x13, [x18]
    d10c:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    d110:	ldr	w1, [x18, #20]
    d114:	mov	w14, w3
    d118:	ldr	x8, [x8, #3952]
    d11c:	add	w1, w3, w1
    d120:	add	x2, x13, w3, uxtw
    d124:	ldrb	w3, [x13, w3, uxtw]
    d128:	ldr	x6, [x18, #64]
    d12c:	ldrb	w4, [x2, #2]
    d130:	ldrb	w0, [x2, #1]
    d134:	ldr	w3, [x8, x3, lsl #2]
    d138:	eor	w0, w0, w3
    d13c:	eor	w3, w0, w4, lsl #8
    d140:	ldrb	w4, [x2, #3]
    d144:	ubfiz	x0, x0, #2, #10
    d148:	ubfiz	x7, x3, #2, #16
    d14c:	add	x7, x7, #0x1, lsl #12
    d150:	ldr	w4, [x8, x4, lsl #2]
    d154:	ldr	w11, [x6, x0]
    d158:	ldr	w10, [x6, x7]
    d15c:	eor	w4, w3, w4, lsl #5
    d160:	ldr	w3, [x18, #88]
    d164:	sub	w5, w1, w11
    d168:	sub	w12, w1, w10
    d16c:	and	w4, w4, w3
    d170:	add	w4, w4, #0x10, lsl #12
    d174:	add	w4, w4, #0x400
    d178:	lsl	x4, x4, #2
    d17c:	ldr	w3, [x6, x4]
    d180:	str	w1, [x6, x0]
    d184:	str	w1, [x6, x7]
    d188:	str	w1, [x6, x4]
    d18c:	ldr	w7, [x18, #84]
    d190:	cmp	w7, w5
    d194:	b.ls	d28c <lzma_mf_is_supported@@XZ_5.0+0x8d0>  // b.plast
    d198:	sub	x0, x2, w5, uxtw
    d19c:	ldrb	w4, [x0]
    d1a0:	ldrb	w0, [x13, x14]
    d1a4:	cmp	w4, w0
    d1a8:	b.ne	d28c <lzma_mf_is_supported@@XZ_5.0+0x8d0>  // b.any
    d1ac:	sub	w0, w5, #0x1
    d1b0:	mov	w4, #0x2                   	// #2
    d1b4:	stp	w4, w0, [x19]
    d1b8:	cmp	w11, w10
    d1bc:	b.ne	d2a8 <lzma_mf_is_supported@@XZ_5.0+0x8ec>  // b.any
    d1c0:	mov	w8, #0x1                   	// #1
    d1c4:	b	d1fc <lzma_mf_is_supported@@XZ_5.0+0x840>
    d1c8:	mov	w4, #0x1                   	// #1
    d1cc:	mov	w8, #0x0                   	// #0
    d1d0:	sub	x0, x2, w12, uxtw
    d1d4:	ldrb	w6, [x0]
    d1d8:	ldrb	w0, [x13, x14]
    d1dc:	cmp	w6, w0
    d1e0:	b.ne	d248 <lzma_mf_is_supported@@XZ_5.0+0x88c>  // b.any
    d1e4:	add	x0, x19, w8, uxtw #3
    d1e8:	sub	w4, w12, #0x1
    d1ec:	mov	w5, w12
    d1f0:	add	w8, w8, #0x1
    d1f4:	str	w4, [x0, #4]
    d1f8:	mov	w4, #0x3                   	// #3
    d1fc:	add	x0, x2, w4, uxtw
    d200:	neg	x5, x5
    d204:	cmp	w9, w4
    d208:	b.ls	d21c <lzma_mf_is_supported@@XZ_5.0+0x860>  // b.plast
    d20c:	ldrb	w6, [x0, x5]
    d210:	ldrb	w10, [x0], #1
    d214:	cmp	w10, w6
    d218:	b.eq	d284 <lzma_mf_is_supported@@XZ_5.0+0x8c8>  // b.none
    d21c:	sub	w0, w8, #0x1
    d220:	cmp	w9, w4
    d224:	lsl	x0, x0, #3
    d228:	str	w4, [x19, x0]
    d22c:	b.ne	d24c <lzma_mf_is_supported@@XZ_5.0+0x890>  // b.any
    d230:	ldr	w1, [x18, #80]
    d234:	ldr	x0, [x18, #72]
    d238:	str	w3, [x0, x1, lsl #2]
    d23c:	mov	x0, x18
    d240:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d244:	b	d0f0 <lzma_mf_is_supported@@XZ_5.0+0x734>
    d248:	cbnz	w8, d1fc <lzma_mf_is_supported@@XZ_5.0+0x840>
    d24c:	cmp	w4, #0x3
    d250:	ldr	w6, [x18, #80]
    d254:	add	x8, x19, w8, uxtw #3
    d258:	mov	w0, #0x3                   	// #3
    d25c:	csel	w4, w4, w0, cs  // cs = hs, nlast
    d260:	mov	w0, w9
    d264:	ldr	x5, [x18, #72]
    d268:	str	x8, [sp]
    d26c:	str	w4, [sp, #8]
    d270:	ldr	w4, [x18, #92]
    d274:	bl	ca0c <lzma_mf_is_supported@@XZ_5.0+0x50>
    d278:	sub	x8, x0, x19
    d27c:	ubfx	x8, x8, #3, #32
    d280:	b	d23c <lzma_mf_is_supported@@XZ_5.0+0x880>
    d284:	add	w4, w4, #0x1
    d288:	b	d204 <lzma_mf_is_supported@@XZ_5.0+0x848>
    d28c:	cmp	w11, w10
    d290:	b.eq	d29c <lzma_mf_is_supported@@XZ_5.0+0x8e0>  // b.none
    d294:	cmp	w7, w12
    d298:	b.hi	d1c8 <lzma_mf_is_supported@@XZ_5.0+0x80c>  // b.pmore
    d29c:	mov	w8, #0x0                   	// #0
    d2a0:	mov	w4, #0x1                   	// #1
    d2a4:	b	d24c <lzma_mf_is_supported@@XZ_5.0+0x890>
    d2a8:	cmp	w7, w12
    d2ac:	b.ls	d1c0 <lzma_mf_is_supported@@XZ_5.0+0x804>  // b.plast
    d2b0:	mov	w8, #0x1                   	// #1
    d2b4:	b	d1d0 <lzma_mf_is_supported@@XZ_5.0+0x814>
    d2b8:	stp	x29, x30, [sp, #-16]!
    d2bc:	adrp	x8, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    d2c0:	mov	w9, #0x400                 	// #1024
    d2c4:	mov	x29, sp
    d2c8:	ldr	x8, [x8, #3952]
    d2cc:	mov	w7, w1
    d2d0:	movk	w9, #0x1, lsl #16
    d2d4:	ldr	w2, [x0, #24]
    d2d8:	ldr	w1, [x0, #36]
    d2dc:	sub	w1, w1, w2
    d2e0:	cmp	w1, #0x3
    d2e4:	b.hi	d2fc <lzma_mf_is_supported@@XZ_5.0+0x940>  // b.pmore
    d2e8:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d2ec:	subs	w7, w7, #0x1
    d2f0:	b.ne	d2d4 <lzma_mf_is_supported@@XZ_5.0+0x918>  // b.any
    d2f4:	ldp	x29, x30, [sp], #16
    d2f8:	ret
    d2fc:	ldr	x3, [x0]
    d300:	ldr	w1, [x0, #20]
    d304:	ldr	x5, [x0, #64]
    d308:	add	w1, w2, w1
    d30c:	add	x6, x3, w2, uxtw
    d310:	ldrb	w2, [x3, w2, uxtw]
    d314:	ldrb	w4, [x6, #1]
    d318:	ldr	w2, [x8, x2, lsl #2]
    d31c:	ldrb	w3, [x6, #2]
    d320:	eor	w4, w4, w2
    d324:	ldrb	w2, [x6, #3]
    d328:	ldr	w6, [x0, #88]
    d32c:	eor	w3, w4, w3, lsl #8
    d330:	ubfiz	x4, x4, #2, #10
    d334:	ldr	w2, [x8, x2, lsl #2]
    d338:	eor	w2, w3, w2, lsl #5
    d33c:	add	x3, x5, w3, uxth #2
    d340:	and	w2, w2, w6
    d344:	add	w2, w2, w9
    d348:	lsl	x2, x2, #2
    d34c:	ldr	w6, [x5, x2]
    d350:	str	w1, [x5, x4]
    d354:	str	w1, [x3, #4096]
    d358:	str	w1, [x5, x2]
    d35c:	ldr	x1, [x0, #72]
    d360:	ldr	w2, [x0, #80]
    d364:	str	w6, [x1, x2, lsl #2]
    d368:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d36c:	b	d2ec <lzma_mf_is_supported@@XZ_5.0+0x930>
    d370:	sub	sp, sp, #0x30
    d374:	stp	x29, x30, [sp, #16]
    d378:	add	x29, sp, #0x10
    d37c:	ldr	w2, [x0, #24]
    d380:	ldr	w3, [x0, #36]
    d384:	stp	x19, x20, [sp, #32]
    d388:	mov	x19, x0
    d38c:	ldr	w0, [x0, #96]
    d390:	sub	w3, w3, w2
    d394:	mov	x20, x1
    d398:	cmp	w0, w3
    d39c:	b.ls	d3d8 <lzma_mf_is_supported@@XZ_5.0+0xa1c>  // b.plast
    d3a0:	cmp	w3, #0x1
    d3a4:	b.ls	d3b4 <lzma_mf_is_supported@@XZ_5.0+0x9f8>  // b.plast
    d3a8:	ldr	w0, [x19, #104]
    d3ac:	cmp	w0, #0x1
    d3b0:	b.ne	d3d4 <lzma_mf_is_supported@@XZ_5.0+0xa18>  // b.any
    d3b4:	mov	x0, x19
    d3b8:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d3bc:	mov	w7, #0x0                   	// #0
    d3c0:	mov	w0, w7
    d3c4:	ldp	x29, x30, [sp, #16]
    d3c8:	ldp	x19, x20, [sp, #32]
    d3cc:	add	sp, sp, #0x30
    d3d0:	ret
    d3d4:	mov	w0, w3
    d3d8:	ldr	x8, [x19]
    d3dc:	ldr	x5, [x19, #64]
    d3e0:	ldrh	w4, [x8, w2, uxtw]
    d3e4:	ldr	w1, [x19, #20]
    d3e8:	lsl	x4, x4, #2
    d3ec:	add	w1, w2, w1
    d3f0:	add	x2, x8, w2, uxtw
    d3f4:	ldr	w3, [x5, x4]
    d3f8:	str	w1, [x5, x4]
    d3fc:	mov	w4, #0x1                   	// #1
    d400:	ldr	x5, [x19, #72]
    d404:	ldp	w6, w7, [x19, #80]
    d408:	str	x20, [sp]
    d40c:	str	w4, [sp, #8]
    d410:	ldr	w4, [x19, #92]
    d414:	bl	cac0 <lzma_mf_is_supported@@XZ_5.0+0x104>
    d418:	sub	x7, x0, x20
    d41c:	mov	x0, x19
    d420:	ubfx	x7, x7, #3, #32
    d424:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d428:	b	d3c0 <lzma_mf_is_supported@@XZ_5.0+0xa04>
    d42c:	stp	x29, x30, [sp, #-32]!
    d430:	mov	x29, sp
    d434:	stp	x19, x20, [sp, #16]
    d438:	mov	x19, x0
    d43c:	mov	w20, w1
    d440:	ldr	w2, [x19, #24]
    d444:	ldr	w1, [x19, #36]
    d448:	ldr	w0, [x19, #96]
    d44c:	sub	w1, w1, w2
    d450:	cmp	w0, w1
    d454:	b.ls	d48c <lzma_mf_is_supported@@XZ_5.0+0xad0>  // b.plast
    d458:	cmp	w1, #0x1
    d45c:	b.ls	d46c <lzma_mf_is_supported@@XZ_5.0+0xab0>  // b.plast
    d460:	ldr	w0, [x19, #104]
    d464:	cmp	w0, #0x1
    d468:	b.ne	d488 <lzma_mf_is_supported@@XZ_5.0+0xacc>  // b.any
    d46c:	mov	x0, x19
    d470:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d474:	subs	w20, w20, #0x1
    d478:	b.ne	d440 <lzma_mf_is_supported@@XZ_5.0+0xa84>  // b.any
    d47c:	ldp	x19, x20, [sp, #16]
    d480:	ldp	x29, x30, [sp], #32
    d484:	ret
    d488:	mov	w0, w1
    d48c:	ldr	x8, [x19]
    d490:	ldr	x5, [x19, #64]
    d494:	ldrh	w4, [x8, w2, uxtw]
    d498:	ldr	w1, [x19, #20]
    d49c:	lsl	x4, x4, #2
    d4a0:	add	w1, w2, w1
    d4a4:	add	x2, x8, w2, uxtw
    d4a8:	ldr	w3, [x5, x4]
    d4ac:	str	w1, [x5, x4]
    d4b0:	ldr	x5, [x19, #72]
    d4b4:	ldp	w6, w7, [x19, #80]
    d4b8:	ldr	w4, [x19, #92]
    d4bc:	bl	cc04 <lzma_mf_is_supported@@XZ_5.0+0x248>
    d4c0:	mov	x0, x19
    d4c4:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d4c8:	b	d474 <lzma_mf_is_supported@@XZ_5.0+0xab8>
    d4cc:	sub	sp, sp, #0x40
    d4d0:	stp	x29, x30, [sp, #16]
    d4d4:	add	x29, sp, #0x10
    d4d8:	ldr	w3, [x0, #24]
    d4dc:	str	x21, [sp, #48]
    d4e0:	mov	x21, x1
    d4e4:	ldr	w1, [x0, #36]
    d4e8:	stp	x19, x20, [sp, #32]
    d4ec:	mov	x19, x0
    d4f0:	ldr	w0, [x0, #96]
    d4f4:	sub	w1, w1, w3
    d4f8:	cmp	w0, w1
    d4fc:	b.ls	d53c <lzma_mf_is_supported@@XZ_5.0+0xb80>  // b.plast
    d500:	cmp	w1, #0x2
    d504:	b.ls	d514 <lzma_mf_is_supported@@XZ_5.0+0xb58>  // b.plast
    d508:	ldr	w0, [x19, #104]
    d50c:	cmp	w0, #0x1
    d510:	b.ne	d538 <lzma_mf_is_supported@@XZ_5.0+0xb7c>  // b.any
    d514:	mov	w20, #0x0                   	// #0
    d518:	mov	x0, x19
    d51c:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d520:	mov	w0, w20
    d524:	ldp	x29, x30, [sp, #16]
    d528:	ldp	x19, x20, [sp, #32]
    d52c:	ldr	x21, [sp, #48]
    d530:	add	sp, sp, #0x40
    d534:	ret
    d538:	mov	w0, w1
    d53c:	ldr	x8, [x19]
    d540:	mov	w10, w3
    d544:	ldr	w1, [x19, #20]
    d548:	ldr	x6, [x19, #64]
    d54c:	add	w1, w3, w1
    d550:	ldrb	w5, [x8, w3, uxtw]
    d554:	add	x2, x8, w3, uxtw
    d558:	adrp	x3, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    d55c:	ldr	x3, [x3, #3952]
    d560:	ldrb	w4, [x2, #1]
    d564:	ldr	w3, [x3, x5, lsl #2]
    d568:	eor	w3, w4, w3
    d56c:	ldrb	w4, [x2, #2]
    d570:	ubfiz	x7, x3, #2, #10
    d574:	eor	w4, w3, w4, lsl #8
    d578:	ldr	w3, [x19, #88]
    d57c:	and	w4, w4, w3
    d580:	ldr	w5, [x6, x7]
    d584:	add	w4, w4, #0x400
    d588:	sub	w5, w1, w5
    d58c:	lsl	x4, x4, #2
    d590:	ldr	w3, [x6, x4]
    d594:	str	w1, [x6, x7]
    d598:	str	w1, [x6, x4]
    d59c:	ldr	w7, [x19, #84]
    d5a0:	cmp	w7, w5
    d5a4:	b.ls	d61c <lzma_mf_is_supported@@XZ_5.0+0xc60>  // b.plast
    d5a8:	sub	x4, x2, w5, uxtw
    d5ac:	mov	w6, w5
    d5b0:	ldrb	w9, [x4]
    d5b4:	ldrb	w4, [x8, x10]
    d5b8:	cmp	w9, w4
    d5bc:	b.ne	d61c <lzma_mf_is_supported@@XZ_5.0+0xc60>  // b.any
    d5c0:	add	x8, x2, #0x2
    d5c4:	mvn	x6, x6
    d5c8:	mov	w4, #0x2                   	// #2
    d5cc:	cmp	w0, w4
    d5d0:	b.ls	d5e4 <lzma_mf_is_supported@@XZ_5.0+0xc28>  // b.plast
    d5d4:	ldrb	w9, [x8], #1
    d5d8:	ldrb	w10, [x8, x6]
    d5dc:	cmp	w10, w9
    d5e0:	b.eq	d614 <lzma_mf_is_supported@@XZ_5.0+0xc58>  // b.none
    d5e4:	sub	w5, w5, #0x1
    d5e8:	stp	w4, w5, [x21]
    d5ec:	cmp	w0, w4
    d5f0:	mov	w20, #0x1                   	// #1
    d5f4:	b.ne	d624 <lzma_mf_is_supported@@XZ_5.0+0xc68>  // b.any
    d5f8:	ldr	w6, [x19, #80]
    d5fc:	ldr	w4, [x19, #92]
    d600:	ldr	x5, [x19, #72]
    d604:	bl	cc04 <lzma_mf_is_supported@@XZ_5.0+0x248>
    d608:	mov	x0, x19
    d60c:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d610:	b	d520 <lzma_mf_is_supported@@XZ_5.0+0xb64>
    d614:	add	w4, w4, #0x1
    d618:	b	d5cc <lzma_mf_is_supported@@XZ_5.0+0xc10>
    d61c:	mov	w4, #0x2                   	// #2
    d620:	mov	w20, #0x0                   	// #0
    d624:	ldr	w6, [x19, #80]
    d628:	ldr	x5, [x19, #72]
    d62c:	str	w4, [sp, #8]
    d630:	mov	w4, w20
    d634:	add	x4, x21, x4, lsl #3
    d638:	str	x4, [sp]
    d63c:	ldr	w4, [x19, #92]
    d640:	bl	cac0 <lzma_mf_is_supported@@XZ_5.0+0x104>
    d644:	sub	x20, x0, x21
    d648:	ubfx	x20, x20, #3, #32
    d64c:	b	d608 <lzma_mf_is_supported@@XZ_5.0+0xc4c>
    d650:	stp	x29, x30, [sp, #-48]!
    d654:	mov	x29, sp
    d658:	str	x21, [sp, #32]
    d65c:	adrp	x21, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    d660:	stp	x19, x20, [sp, #16]
    d664:	mov	x19, x0
    d668:	mov	w20, w1
    d66c:	ldr	x21, [x21, #3952]
    d670:	ldr	w3, [x19, #24]
    d674:	ldr	w1, [x19, #36]
    d678:	ldr	w0, [x19, #96]
    d67c:	sub	w1, w1, w3
    d680:	cmp	w0, w1
    d684:	b.ls	d6c0 <lzma_mf_is_supported@@XZ_5.0+0xd04>  // b.plast
    d688:	cmp	w1, #0x2
    d68c:	b.ls	d69c <lzma_mf_is_supported@@XZ_5.0+0xce0>  // b.plast
    d690:	ldr	w0, [x19, #104]
    d694:	cmp	w0, #0x1
    d698:	b.ne	d6bc <lzma_mf_is_supported@@XZ_5.0+0xd00>  // b.any
    d69c:	mov	x0, x19
    d6a0:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d6a4:	subs	w20, w20, #0x1
    d6a8:	b.ne	d670 <lzma_mf_is_supported@@XZ_5.0+0xcb4>  // b.any
    d6ac:	ldp	x19, x20, [sp, #16]
    d6b0:	ldr	x21, [sp, #32]
    d6b4:	ldp	x29, x30, [sp], #48
    d6b8:	ret
    d6bc:	mov	w0, w1
    d6c0:	ldr	x4, [x19]
    d6c4:	ldr	w1, [x19, #20]
    d6c8:	ldr	x6, [x19, #64]
    d6cc:	add	w1, w3, w1
    d6d0:	add	x2, x4, w3, uxtw
    d6d4:	ldrb	w3, [x4, w3, uxtw]
    d6d8:	ldrb	w5, [x2, #1]
    d6dc:	ldrb	w4, [x2, #2]
    d6e0:	ldr	w3, [x21, x3, lsl #2]
    d6e4:	eor	w5, w5, w3
    d6e8:	ldr	w3, [x19, #88]
    d6ec:	eor	w4, w5, w4, lsl #8
    d6f0:	and	w4, w4, w3
    d6f4:	ubfiz	x5, x5, #2, #10
    d6f8:	add	w4, w4, #0x400
    d6fc:	lsl	x4, x4, #2
    d700:	ldr	w3, [x6, x4]
    d704:	str	w1, [x6, x5]
    d708:	str	w1, [x6, x4]
    d70c:	ldr	x5, [x19, #72]
    d710:	ldp	w6, w7, [x19, #80]
    d714:	ldr	w4, [x19, #92]
    d718:	bl	cc04 <lzma_mf_is_supported@@XZ_5.0+0x248>
    d71c:	mov	x0, x19
    d720:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d724:	b	d6a4 <lzma_mf_is_supported@@XZ_5.0+0xce8>
    d728:	sub	sp, sp, #0x40
    d72c:	stp	x29, x30, [sp, #16]
    d730:	add	x29, sp, #0x10
    d734:	ldr	w3, [x0, #24]
    d738:	str	x21, [sp, #48]
    d73c:	mov	x21, x1
    d740:	ldr	w1, [x0, #36]
    d744:	stp	x19, x20, [sp, #32]
    d748:	mov	x20, x0
    d74c:	ldr	w0, [x0, #96]
    d750:	sub	w1, w1, w3
    d754:	cmp	w0, w1
    d758:	b.ls	d798 <lzma_mf_is_supported@@XZ_5.0+0xddc>  // b.plast
    d75c:	cmp	w1, #0x3
    d760:	b.ls	d770 <lzma_mf_is_supported@@XZ_5.0+0xdb4>  // b.plast
    d764:	ldr	w0, [x20, #104]
    d768:	cmp	w0, #0x1
    d76c:	b.ne	d794 <lzma_mf_is_supported@@XZ_5.0+0xdd8>  // b.any
    d770:	mov	w19, #0x0                   	// #0
    d774:	mov	x0, x20
    d778:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d77c:	mov	w0, w19
    d780:	ldp	x29, x30, [sp, #16]
    d784:	ldp	x19, x20, [sp, #32]
    d788:	ldr	x21, [sp, #48]
    d78c:	add	sp, sp, #0x40
    d790:	ret
    d794:	mov	w0, w1
    d798:	ldr	x12, [x20]
    d79c:	adrp	x9, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    d7a0:	ldr	w1, [x20, #20]
    d7a4:	mov	w13, w3
    d7a8:	ldr	x9, [x9, #3952]
    d7ac:	add	w1, w3, w1
    d7b0:	add	x2, x12, w3, uxtw
    d7b4:	ldrb	w3, [x12, w3, uxtw]
    d7b8:	ldr	x7, [x20, #64]
    d7bc:	ldrb	w4, [x2, #2]
    d7c0:	ldrb	w6, [x2, #1]
    d7c4:	ldr	w3, [x9, x3, lsl #2]
    d7c8:	eor	w6, w6, w3
    d7cc:	eor	w3, w6, w4, lsl #8
    d7d0:	ldrb	w4, [x2, #3]
    d7d4:	ubfiz	x6, x6, #2, #10
    d7d8:	ubfiz	x8, x3, #2, #16
    d7dc:	add	x8, x8, #0x1, lsl #12
    d7e0:	ldr	w4, [x9, x4, lsl #2]
    d7e4:	ldr	w11, [x7, x6]
    d7e8:	ldr	w10, [x7, x8]
    d7ec:	eor	w4, w3, w4, lsl #5
    d7f0:	ldr	w3, [x20, #88]
    d7f4:	sub	w5, w1, w11
    d7f8:	sub	w14, w1, w10
    d7fc:	and	w4, w4, w3
    d800:	add	w4, w4, #0x10, lsl #12
    d804:	add	w4, w4, #0x400
    d808:	lsl	x4, x4, #2
    d80c:	ldr	w3, [x7, x4]
    d810:	str	w1, [x7, x6]
    d814:	str	w1, [x7, x8]
    d818:	str	w1, [x7, x4]
    d81c:	ldr	w7, [x20, #84]
    d820:	cmp	w7, w5
    d824:	b.ls	d898 <lzma_mf_is_supported@@XZ_5.0+0xedc>  // b.plast
    d828:	sub	x4, x2, w5, uxtw
    d82c:	ldrb	w6, [x4]
    d830:	ldrb	w4, [x12, x13]
    d834:	cmp	w6, w4
    d838:	b.ne	d898 <lzma_mf_is_supported@@XZ_5.0+0xedc>  // b.any
    d83c:	sub	w6, w5, #0x1
    d840:	mov	w4, #0x2                   	// #2
    d844:	stp	w4, w6, [x21]
    d848:	cmp	w11, w10
    d84c:	b.ne	d8ac <lzma_mf_is_supported@@XZ_5.0+0xef0>  // b.any
    d850:	mov	w19, #0x1                   	// #1
    d854:	b	d8e4 <lzma_mf_is_supported@@XZ_5.0+0xf28>
    d858:	cbnz	w19, d8e4 <lzma_mf_is_supported@@XZ_5.0+0xf28>
    d85c:	cmp	w4, #0x3
    d860:	mov	w5, #0x3                   	// #3
    d864:	ldr	w6, [x20, #80]
    d868:	csel	w4, w4, w5, cs  // cs = hs, nlast
    d86c:	add	x19, x21, w19, uxtw #3
    d870:	ldr	x5, [x20, #72]
    d874:	str	x19, [sp]
    d878:	str	w4, [sp, #8]
    d87c:	ldr	w4, [x20, #92]
    d880:	bl	cac0 <lzma_mf_is_supported@@XZ_5.0+0x104>
    d884:	sub	x19, x0, x21
    d888:	ubfx	x19, x19, #3, #32
    d88c:	b	d928 <lzma_mf_is_supported@@XZ_5.0+0xf6c>
    d890:	add	w4, w4, #0x1
    d894:	b	d8ec <lzma_mf_is_supported@@XZ_5.0+0xf30>
    d898:	cmp	w11, w10
    d89c:	b.ne	d934 <lzma_mf_is_supported@@XZ_5.0+0xf78>  // b.any
    d8a0:	mov	w19, #0x0                   	// #0
    d8a4:	mov	w4, #0x1                   	// #1
    d8a8:	b	d85c <lzma_mf_is_supported@@XZ_5.0+0xea0>
    d8ac:	cmp	w7, w14
    d8b0:	b.ls	d850 <lzma_mf_is_supported@@XZ_5.0+0xe94>  // b.plast
    d8b4:	mov	w19, #0x1                   	// #1
    d8b8:	sub	x6, x2, w14, uxtw
    d8bc:	ldrb	w8, [x6]
    d8c0:	ldrb	w6, [x12, x13]
    d8c4:	cmp	w8, w6
    d8c8:	b.ne	d858 <lzma_mf_is_supported@@XZ_5.0+0xe9c>  // b.any
    d8cc:	add	x4, x21, w19, uxtw #3
    d8d0:	sub	w5, w14, #0x1
    d8d4:	add	w19, w19, #0x1
    d8d8:	str	w5, [x4, #4]
    d8dc:	mov	w5, w14
    d8e0:	mov	w4, #0x3                   	// #3
    d8e4:	add	x6, x2, w4, uxtw
    d8e8:	mvn	x5, x5
    d8ec:	cmp	w0, w4
    d8f0:	b.ls	d904 <lzma_mf_is_supported@@XZ_5.0+0xf48>  // b.plast
    d8f4:	ldrb	w8, [x6], #1
    d8f8:	ldrb	w9, [x6, x5]
    d8fc:	cmp	w9, w8
    d900:	b.eq	d890 <lzma_mf_is_supported@@XZ_5.0+0xed4>  // b.none
    d904:	sub	w5, w19, #0x1
    d908:	cmp	w0, w4
    d90c:	lsl	x5, x5, #3
    d910:	str	w4, [x21, x5]
    d914:	b.ne	d85c <lzma_mf_is_supported@@XZ_5.0+0xea0>  // b.any
    d918:	ldr	w6, [x20, #80]
    d91c:	ldr	w4, [x20, #92]
    d920:	ldr	x5, [x20, #72]
    d924:	bl	cc04 <lzma_mf_is_supported@@XZ_5.0+0x248>
    d928:	mov	x0, x20
    d92c:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    d930:	b	d77c <lzma_mf_is_supported@@XZ_5.0+0xdc0>
    d934:	cmp	w7, w14
    d938:	b.ls	d8a0 <lzma_mf_is_supported@@XZ_5.0+0xee4>  // b.plast
    d93c:	mov	w4, #0x1                   	// #1
    d940:	mov	w19, #0x0                   	// #0
    d944:	b	d8b8 <lzma_mf_is_supported@@XZ_5.0+0xefc>
    d948:	stp	x29, x30, [sp, #-48]!
    d94c:	mov	x29, sp
    d950:	stp	x21, x22, [sp, #32]
    d954:	adrp	x21, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    d958:	mov	w22, #0x400                 	// #1024
    d95c:	ldr	x21, [x21, #3952]
    d960:	stp	x19, x20, [sp, #16]
    d964:	mov	x19, x0
    d968:	mov	w20, w1
    d96c:	movk	w22, #0x1, lsl #16
    d970:	ldr	w3, [x19, #24]
    d974:	ldr	w1, [x19, #36]
    d978:	ldr	w0, [x19, #96]
    d97c:	sub	w1, w1, w3
    d980:	cmp	w0, w1
    d984:	b.ls	d9c0 <lzma_mf_is_supported@@XZ_5.0+0x1004>  // b.plast
    d988:	cmp	w1, #0x3
    d98c:	b.ls	d99c <lzma_mf_is_supported@@XZ_5.0+0xfe0>  // b.plast
    d990:	ldr	w0, [x19, #104]
    d994:	cmp	w0, #0x1
    d998:	b.ne	d9bc <lzma_mf_is_supported@@XZ_5.0+0x1000>  // b.any
    d99c:	mov	x0, x19
    d9a0:	bl	c9f0 <lzma_mf_is_supported@@XZ_5.0+0x34>
    d9a4:	subs	w20, w20, #0x1
    d9a8:	b.ne	d970 <lzma_mf_is_supported@@XZ_5.0+0xfb4>  // b.any
    d9ac:	ldp	x19, x20, [sp, #16]
    d9b0:	ldp	x21, x22, [sp, #32]
    d9b4:	ldp	x29, x30, [sp], #48
    d9b8:	ret
    d9bc:	mov	w0, w1
    d9c0:	ldr	x4, [x19]
    d9c4:	ldr	w1, [x19, #20]
    d9c8:	ldr	x7, [x19, #64]
    d9cc:	add	x2, x4, w3, uxtw
    d9d0:	add	w1, w3, w1
    d9d4:	ldrb	w3, [x4, w3, uxtw]
    d9d8:	ldrb	w6, [x2, #1]
    d9dc:	ldrb	w5, [x2, #2]
    d9e0:	ldr	w3, [x21, x3, lsl #2]
    d9e4:	eor	w6, w6, w3
    d9e8:	ldrb	w3, [x2, #3]
    d9ec:	eor	w5, w6, w5, lsl #8
    d9f0:	ubfiz	x6, x6, #2, #10
    d9f4:	ldr	w4, [x21, x3, lsl #2]
    d9f8:	ldr	w3, [x19, #88]
    d9fc:	eor	w4, w5, w4, lsl #5
    da00:	add	x5, x7, w5, uxth #2
    da04:	and	w4, w4, w3
    da08:	add	w4, w4, w22
    da0c:	lsl	x4, x4, #2
    da10:	ldr	w3, [x7, x4]
    da14:	str	w1, [x7, x6]
    da18:	str	w1, [x5, #4096]
    da1c:	str	w1, [x7, x4]
    da20:	ldr	x5, [x19, #72]
    da24:	ldp	w6, w7, [x19, #80]
    da28:	ldr	w4, [x19, #92]
    da2c:	bl	cc04 <lzma_mf_is_supported@@XZ_5.0+0x248>
    da30:	mov	x0, x19
    da34:	bl	cd30 <lzma_mf_is_supported@@XZ_5.0+0x374>
    da38:	b	d9a4 <lzma_mf_is_supported@@XZ_5.0+0xfe8>
    da3c:	stp	x29, x30, [sp, #-32]!
    da40:	mov	x29, sp
    da44:	stp	x19, x20, [sp, #16]
    da48:	mov	x19, x0
    da4c:	mov	x20, x1
    da50:	add	x0, x0, #0x58
    da54:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
    da58:	ldr	x0, [x19]
    da5c:	mov	x1, x20
    da60:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    da64:	ldr	x2, [x19, #80]
    da68:	mov	x1, x20
    da6c:	ldr	x0, [x19, #48]
    da70:	cbz	x2, da8c <lzma_mf_is_supported@@XZ_5.0+0x10d0>
    da74:	blr	x2
    da78:	mov	x1, x20
    da7c:	mov	x0, x19
    da80:	ldp	x19, x20, [sp, #16]
    da84:	ldp	x29, x30, [sp], #32
    da88:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
    da8c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    da90:	b	da78 <lzma_mf_is_supported@@XZ_5.0+0x10bc>
    da94:	stp	x29, x30, [sp, #-112]!
    da98:	mov	x7, x3
    da9c:	mov	x29, sp
    daa0:	stp	x19, x20, [sp, #16]
    daa4:	mov	x19, x0
    daa8:	stp	x21, x22, [sp, #32]
    daac:	mov	x22, x4
    dab0:	stp	x23, x24, [sp, #48]
    dab4:	mov	x23, x5
    dab8:	mov	x24, x6
    dabc:	stp	x27, x28, [sp, #80]
    dac0:	mov	x27, x1
    dac4:	mov	x28, x2
    dac8:	stp	x25, x26, [sp, #64]
    dacc:	ldr	x0, [x19, #8]
    dad0:	ldr	x4, [x19, #32]
    dad4:	cmp	x0, x4
    dad8:	b.ne	dae0 <lzma_mf_is_supported@@XZ_5.0+0x1124>  // b.any
    dadc:	str	xzr, [x19, #8]
    dae0:	ldr	x0, [x23]
    dae4:	mov	x3, x28
    dae8:	ldr	x26, [x19, #8]
    daec:	sub	x0, x24, x0
    daf0:	ldr	x5, [x19, #56]
    daf4:	sub	x4, x4, x26
    daf8:	cmp	x0, x4
    dafc:	mov	x2, x27
    db00:	csel	x0, x0, x4, ls  // ls = plast
    db04:	mov	x1, x19
    db08:	add	x0, x0, x26
    db0c:	str	x0, [x19, #24]
    db10:	ldr	x0, [x19, #48]
    db14:	mov	x4, x7
    db18:	str	x7, [sp, #104]
    db1c:	blr	x5
    db20:	mov	w20, w0
    db24:	ldp	x1, x0, [x19]
    db28:	ldr	x21, [x23]
    db2c:	sub	x25, x0, x26
    db30:	add	x1, x1, x26
    db34:	mov	x2, x25
    db38:	add	x0, x22, x21
    db3c:	bl	3090 <memcpy@plt>
    db40:	ldrb	w1, [x19, #40]
    db44:	add	x0, x21, x25
    db48:	str	x0, [x23]
    db4c:	ldr	x7, [sp, #104]
    db50:	cbz	w1, db9c <lzma_mf_is_supported@@XZ_5.0+0x11e0>
    db54:	ldr	x1, [x19]
    db58:	stp	xzr, xzr, [x19, #8]
    db5c:	ldr	x2, [x19, #32]
    db60:	add	x1, x1, x2
    db64:	sturb	wzr, [x1, #-1]
    db68:	strb	wzr, [x19, #40]
    db6c:	cbnz	w20, db7c <lzma_mf_is_supported@@XZ_5.0+0x11c0>
    db70:	cmp	x0, x24
    db74:	b.ne	dacc <lzma_mf_is_supported@@XZ_5.0+0x1110>  // b.any
    db78:	mov	w20, #0x0                   	// #0
    db7c:	mov	w0, w20
    db80:	ldp	x19, x20, [sp, #16]
    db84:	ldp	x21, x22, [sp, #32]
    db88:	ldp	x23, x24, [sp, #48]
    db8c:	ldp	x25, x26, [sp, #64]
    db90:	ldp	x27, x28, [sp, #80]
    db94:	ldp	x29, x30, [sp], #112
    db98:	ret
    db9c:	cbnz	w20, db7c <lzma_mf_is_supported@@XZ_5.0+0x11c0>
    dba0:	cmp	x0, x24
    dba4:	b.eq	db78 <lzma_mf_is_supported@@XZ_5.0+0x11bc>  // b.none
    dba8:	ldr	x1, [x19, #8]
    dbac:	ldr	x0, [x19, #32]
    dbb0:	cmp	x1, x0
    dbb4:	b.cs	dacc <lzma_mf_is_supported@@XZ_5.0+0x1110>  // b.hs, b.nlast
    dbb8:	b	db78 <lzma_mf_is_supported@@XZ_5.0+0x11bc>
    dbbc:	sub	sp, sp, #0x80
    dbc0:	stp	x29, x30, [sp, #16]
    dbc4:	add	x29, sp, #0x10
    dbc8:	str	x1, [sp, #112]
    dbcc:	ldr	w1, [sp, #128]
    dbd0:	str	w1, [sp, #124]
    dbd4:	ldr	x1, [x0, #112]
    dbd8:	stp	x19, x20, [sp, #32]
    dbdc:	mov	x20, x7
    dbe0:	stp	x21, x22, [sp, #48]
    dbe4:	mov	x21, x6
    dbe8:	stp	x23, x24, [sp, #64]
    dbec:	mov	x23, x5
    dbf0:	stp	x25, x26, [sp, #80]
    dbf4:	mov	x26, x2
    dbf8:	stp	x27, x28, [sp, #96]
    dbfc:	mov	x27, x3
    dc00:	mov	x28, x4
    dc04:	cbz	x1, dc90 <lzma_mf_is_supported@@XZ_5.0+0x12d4>
    dc08:	mov	x19, x0
    dc0c:	add	x24, x0, #0xb0
    dc10:	add	x22, x0, #0xb8
    dc14:	add	x25, x0, #0xa8
    dc18:	ldr	x0, [x21]
    dc1c:	cmp	x20, x0
    dc20:	b.ls	dcd4 <lzma_mf_is_supported@@XZ_5.0+0x1318>  // b.plast
    dc24:	ldrb	w0, [x19, #160]
    dc28:	cbnz	w0, dc78 <lzma_mf_is_supported@@XZ_5.0+0x12bc>
    dc2c:	ldp	x1, x0, [x19, #168]
    dc30:	cmp	x1, x0
    dc34:	b.ne	dc78 <lzma_mf_is_supported@@XZ_5.0+0x12bc>  // b.any
    dc38:	ldr	w0, [sp, #124]
    dc3c:	mov	x6, x24
    dc40:	stp	xzr, xzr, [x19, #168]
    dc44:	mov	x5, x22
    dc48:	mov	x4, x28
    dc4c:	str	w0, [sp]
    dc50:	mov	x3, x27
    dc54:	ldr	x1, [sp, #112]
    dc58:	mov	x2, x26
    dc5c:	ldr	x0, [x19, #88]
    dc60:	mov	x7, #0x1000                	// #4096
    dc64:	ldr	x10, [x19, #112]
    dc68:	blr	x10
    dc6c:	cmp	w0, #0x1
    dc70:	b.ne	dcc8 <lzma_mf_is_supported@@XZ_5.0+0x130c>  // b.any
    dc74:	strb	w0, [x19, #160]
    dc78:	ldrb	w0, [x19, #161]
    dc7c:	ldr	x3, [x19, #176]
    dc80:	cbz	w0, dd00 <lzma_mf_is_supported@@XZ_5.0+0x1344>
    dc84:	cbz	x3, dcf8 <lzma_mf_is_supported@@XZ_5.0+0x133c>
    dc88:	mov	w0, #0x9                   	// #9
    dc8c:	b	dcd8 <lzma_mf_is_supported@@XZ_5.0+0x131c>
    dc90:	mov	x5, x21
    dc94:	mov	x4, x23
    dc98:	mov	x3, x28
    dc9c:	mov	x2, x27
    dca0:	mov	x1, x26
    dca4:	mov	x6, x7
    dca8:	ldp	x29, x30, [sp, #16]
    dcac:	ldp	x19, x20, [sp, #32]
    dcb0:	ldp	x21, x22, [sp, #48]
    dcb4:	ldp	x23, x24, [sp, #64]
    dcb8:	ldp	x25, x26, [sp, #80]
    dcbc:	ldp	x27, x28, [sp, #96]
    dcc0:	add	sp, sp, #0x80
    dcc4:	b	da94 <lzma_mf_is_supported@@XZ_5.0+0x10d8>
    dcc8:	cbnz	w0, dcd8 <lzma_mf_is_supported@@XZ_5.0+0x131c>
    dccc:	ldr	x0, [x19, #176]
    dcd0:	cbnz	x0, dc78 <lzma_mf_is_supported@@XZ_5.0+0x12bc>
    dcd4:	mov	w0, #0x0                   	// #0
    dcd8:	ldp	x29, x30, [sp, #16]
    dcdc:	ldp	x19, x20, [sp, #32]
    dce0:	ldp	x21, x22, [sp, #48]
    dce4:	ldp	x23, x24, [sp, #64]
    dce8:	ldp	x25, x26, [sp, #80]
    dcec:	ldp	x27, x28, [sp, #96]
    dcf0:	add	sp, sp, #0x80
    dcf4:	ret
    dcf8:	ldrb	w0, [x19, #160]
    dcfc:	b	dcd8 <lzma_mf_is_supported@@XZ_5.0+0x131c>
    dd00:	mov	x6, x20
    dd04:	mov	x5, x21
    dd08:	mov	x4, x23
    dd0c:	mov	x2, x25
    dd10:	mov	x1, x22
    dd14:	mov	x0, x19
    dd18:	bl	da94 <lzma_mf_is_supported@@XZ_5.0+0x10d8>
    dd1c:	cmp	w0, #0x1
    dd20:	b.ne	dd2c <lzma_mf_is_supported@@XZ_5.0+0x1370>  // b.any
    dd24:	strb	w0, [x19, #161]
    dd28:	b	dc18 <lzma_mf_is_supported@@XZ_5.0+0x125c>
    dd2c:	cbnz	w0, dcd8 <lzma_mf_is_supported@@XZ_5.0+0x131c>
    dd30:	ldrb	w0, [x19, #160]
    dd34:	cbz	w0, dc18 <lzma_mf_is_supported@@XZ_5.0+0x125c>
    dd38:	ldr	x0, [x21]
    dd3c:	cmp	x20, x0
    dd40:	b.ls	dc18 <lzma_mf_is_supported@@XZ_5.0+0x125c>  // b.plast
    dd44:	b	dc88 <lzma_mf_is_supported@@XZ_5.0+0x12cc>
    dd48:	stp	x29, x30, [sp, #-96]!
    dd4c:	mov	x29, sp
    dd50:	stp	x19, x20, [sp, #16]
    dd54:	mov	x20, x0
    dd58:	ldr	x19, [x0]
    dd5c:	stp	x21, x22, [sp, #32]
    dd60:	mov	x21, x1
    dd64:	str	x23, [sp, #48]
    dd68:	mov	x22, x2
    dd6c:	mov	x23, x3
    dd70:	cbnz	x19, dde4 <lzma_mf_is_supported@@XZ_5.0+0x1428>
    dd74:	mov	x0, #0x10b8                	// #4280
    dd78:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    dd7c:	mov	x19, x0
    dd80:	cbnz	x0, dd9c <lzma_mf_is_supported@@XZ_5.0+0x13e0>
    dd84:	mov	w0, #0x5                   	// #5
    dd88:	ldp	x19, x20, [sp, #16]
    dd8c:	ldp	x21, x22, [sp, #32]
    dd90:	ldr	x23, [sp, #48]
    dd94:	ldp	x29, x30, [sp], #96
    dd98:	ret
    dd9c:	adrp	x0, d000 <lzma_mf_is_supported@@XZ_5.0+0x644>
    dda0:	add	x0, x0, #0xbbc
    dda4:	str	x0, [x20, #24]
    dda8:	adrp	x0, d000 <lzma_mf_is_supported@@XZ_5.0+0x644>
    ddac:	add	x0, x0, #0xa3c
    ddb0:	str	xzr, [x19]
    ddb4:	str	x19, [x20]
    ddb8:	str	x0, [x20, #32]
    ddbc:	mov	x0, #0xffffffffffffffff    	// #-1
    ddc0:	str	xzr, [x19, #32]
    ddc4:	stp	xzr, xzr, [x19, #48]
    ddc8:	stp	xzr, xzr, [x19, #64]
    ddcc:	stp	xzr, xzr, [x19, #80]
    ddd0:	str	x0, [x19, #96]
    ddd4:	stp	xzr, xzr, [x19, #104]
    ddd8:	stp	xzr, xzr, [x19, #120]
    dddc:	stp	xzr, xzr, [x19, #136]
    dde0:	str	xzr, [x19, #152]
    dde4:	ldr	x2, [x22, #16]
    dde8:	add	x3, sp, #0x48
    ddec:	mov	x1, x21
    ddf0:	add	x0, x19, #0x30
    ddf4:	blr	x23
    ddf8:	cbnz	w0, dd88 <lzma_mf_is_supported@@XZ_5.0+0x13cc>
    ddfc:	ldr	x0, [sp, #72]
    de00:	cmp	x0, #0xfff
    de04:	b.hi	de10 <lzma_mf_is_supported@@XZ_5.0+0x1454>  // b.pmore
    de08:	mov	x0, #0x1000                	// #4096
    de0c:	str	x0, [sp, #72]
    de10:	ldr	x0, [sp, #72]
    de14:	cmn	x0, #0x10
    de18:	b.hi	dd84 <lzma_mf_is_supported@@XZ_5.0+0x13c8>  // b.pmore
    de1c:	add	x0, x0, #0xf
    de20:	ldr	x1, [x19, #32]
    de24:	and	x0, x0, #0xfffffffffffffff0
    de28:	str	x0, [sp, #72]
    de2c:	cmp	x0, x1
    de30:	b.eq	de5c <lzma_mf_is_supported@@XZ_5.0+0x14a0>  // b.none
    de34:	ldr	x0, [x19]
    de38:	mov	x1, x21
    de3c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
    de40:	ldr	x0, [sp, #72]
    de44:	mov	x1, x21
    de48:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    de4c:	str	x0, [x19]
    de50:	cbz	x0, dd84 <lzma_mf_is_supported@@XZ_5.0+0x13c8>
    de54:	ldr	x0, [sp, #72]
    de58:	str	x0, [x19, #32]
    de5c:	ldr	x0, [x20]
    de60:	ldr	x1, [x0]
    de64:	stp	xzr, xzr, [x0, #8]
    de68:	ldr	x2, [x0, #32]
    de6c:	add	x1, x1, x2
    de70:	sturb	wzr, [x1, #-1]
    de74:	strb	wzr, [x0, #40]
    de78:	ldr	x1, [sp, #80]
    de7c:	cbz	x1, deac <lzma_mf_is_supported@@XZ_5.0+0x14f0>
    de80:	ldr	x0, [sp, #88]
    de84:	cbz	x0, deac <lzma_mf_is_supported@@XZ_5.0+0x14f0>
    de88:	ldr	x20, [sp, #72]
    de8c:	cmp	x20, x0
    de90:	csel	x20, x20, x0, ls  // ls = plast
    de94:	sub	x0, x0, x20
    de98:	mov	x2, x20
    de9c:	add	x1, x1, x0
    dea0:	ldr	x0, [x19]
    dea4:	bl	3090 <memcpy@plt>
    dea8:	stp	x20, x20, [x19, #8]
    deac:	add	x2, x22, #0x18
    deb0:	strh	wzr, [x19, #160]
    deb4:	mov	x1, x21
    deb8:	stp	xzr, xzr, [x19, #168]
    debc:	add	x0, x19, #0x58
    dec0:	bl	389c <lzma_version_string@@XZ_5.0+0x1cc>
    dec4:	b	dd88 <lzma_mf_is_supported@@XZ_5.0+0x13cc>
    dec8:	mov	x1, #0x10b8                	// #4280
    decc:	add	x0, x0, x1
    ded0:	ret
    ded4:	ldr	x2, [x0, #72]
    ded8:	ldr	x0, [x0, #48]
    dedc:	mov	x16, x2
    dee0:	br	x16

000000000000dee4 <lzma_lzma_preset@@XZ_5.0>:
    dee4:	and	w2, w1, #0x1f
    dee8:	cmp	w2, #0x9
    deec:	b.hi	dfe0 <lzma_lzma_preset@@XZ_5.0+0xfc>  // b.pmore
    def0:	tst	w1, #0x7fffffe0
    def4:	b.ne	dfe0 <lzma_lzma_preset@@XZ_5.0+0xfc>  // b.any
    def8:	mov	x3, #0x300000000           	// #12884901888
    defc:	stp	xzr, x3, [x0, #8]
    df00:	mov	x3, #0x200000000           	// #8589934592
    df04:	mov	w5, w2
    df08:	str	x3, [x0, #24]
    df0c:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x9ebc>
    df10:	add	x3, x3, #0x8e8
    df14:	mov	w6, #0x1                   	// #1
    df18:	tst	w1, #0x1c
    df1c:	ldrb	w4, [x3, x5]
    df20:	lsl	w4, w6, w4
    df24:	str	w4, [x0]
    df28:	b.ne	df90 <lzma_lzma_preset@@XZ_5.0+0xac>  // b.any
    df2c:	add	x3, x3, x5
    df30:	cmp	w2, #0x0
    df34:	cset	w4, ne  // ne = any
    df38:	tst	w1, #0x1e
    df3c:	add	w4, w4, #0x3
    df40:	str	w6, [x0, #32]
    df44:	ldrb	w3, [x3, #10]
    df48:	mov	w6, #0x80                  	// #128
    df4c:	stp	w4, w3, [x0, #40]
    df50:	mov	w4, #0x111                 	// #273
    df54:	csel	w4, w4, w6, ne  // ne = any
    df58:	str	w4, [x0, #36]
    df5c:	tbz	w1, #31, df88 <lzma_lzma_preset@@XZ_5.0+0xa4>
    df60:	mov	w1, #0x2                   	// #2
    df64:	str	w1, [x0, #32]
    df68:	mov	w1, #0x14                  	// #20
    df6c:	str	w1, [x0, #40]
    df70:	cmp	w2, #0x3
    df74:	ccmp	w2, #0x5, #0x4, ne  // ne = any
    df78:	b.ne	dfcc <lzma_lzma_preset@@XZ_5.0+0xe8>  // b.any
    df7c:	mov	w1, #0xc0                  	// #192
    df80:	str	w1, [x0, #36]
    df84:	str	wzr, [x0, #44]
    df88:	mov	w0, #0x0                   	// #0
    df8c:	b	dfe4 <lzma_lzma_preset@@XZ_5.0+0x100>
    df90:	mov	w3, #0x2                   	// #2
    df94:	str	w3, [x0, #32]
    df98:	mov	w3, #0x14                  	// #20
    df9c:	str	w3, [x0, #40]
    dfa0:	cmp	w2, #0x4
    dfa4:	b.eq	dfc4 <lzma_lzma_preset@@XZ_5.0+0xe0>  // b.none
    dfa8:	cmp	w2, #0x5
    dfac:	mov	w3, #0x20                  	// #32
    dfb0:	mov	w4, #0x40                  	// #64
    dfb4:	csel	w3, w3, w4, eq  // eq = none
    dfb8:	str	w3, [x0, #36]
    dfbc:	str	wzr, [x0, #44]
    dfc0:	b	df5c <lzma_lzma_preset@@XZ_5.0+0x78>
    dfc4:	mov	w3, #0x10                  	// #16
    dfc8:	b	dfb8 <lzma_lzma_preset@@XZ_5.0+0xd4>
    dfcc:	mov	w1, #0x111                 	// #273
    dfd0:	str	w1, [x0, #36]
    dfd4:	mov	w1, #0x200                 	// #512
    dfd8:	str	w1, [x0, #44]
    dfdc:	b	df88 <lzma_lzma_preset@@XZ_5.0+0xa4>
    dfe0:	mov	w0, #0x1                   	// #1
    dfe4:	ret
    dfe8:	adrp	x4, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    dfec:	mov	w3, #0x1                   	// #1
    dff0:	lsl	w3, w3, w1
    dff4:	add	w2, w3, w2
    dff8:	ldr	x4, [x4, #3960]
    dffc:	mov	x5, x0
    e000:	mov	w0, #0x0                   	// #0
    e004:	and	w3, w2, #0x1
    e008:	lsr	w2, w2, #1
    e00c:	neg	w3, w3
    e010:	cmp	w2, #0x1
    e014:	lsl	w1, w2, #1
    e018:	and	w3, w3, #0x7ff
    e01c:	ldrh	w1, [x5, x1]
    e020:	eor	w1, w1, w3
    e024:	ubfx	x1, x1, #4, #12
    e028:	ldrb	w1, [x4, x1]
    e02c:	add	w0, w0, w1
    e030:	b.ne	e004 <lzma_lzma_preset@@XZ_5.0+0x120>  // b.any
    e034:	ret
    e038:	ldr	x4, [x0, #24]
    e03c:	mov	w5, w2
    e040:	neg	x11, x0
    e044:	mov	w8, #0x1                   	// #1
    e048:	add	x6, x0, x4, lsl #2
    e04c:	add	x9, x11, x6, lsl #1
    e050:	sub	w5, w5, #0x1
    e054:	add	x10, x1, w8, uxtw #1
    e058:	add	x6, x6, #0x4
    e05c:	lsr	w7, w3, w5
    e060:	and	w7, w7, #0x1
    e064:	str	w7, [x6, #36]
    e068:	add	w8, w7, w8, lsl #1
    e06c:	str	x10, [x9, #272]
    e070:	cbnz	w5, e04c <lzma_lzma_preset@@XZ_5.0+0x168>
    e074:	sub	w2, w2, #0x1
    e078:	add	x4, x4, #0x1
    e07c:	add	x4, x4, x2
    e080:	str	x4, [x0, #24]
    e084:	ret
    e088:	ldr	w1, [x0, #20]
    e08c:	cmp	w1, #0x4
    e090:	b.hi	e0bc <lzma_lzma_preset@@XZ_5.0+0x1d8>  // b.pmore
    e094:	ldr	w2, [x0, #24]
    e098:	cmp	w2, #0x4
    e09c:	b.hi	e0bc <lzma_lzma_preset@@XZ_5.0+0x1d8>  // b.pmore
    e0a0:	add	w1, w1, w2
    e0a4:	cmp	w1, #0x4
    e0a8:	b.hi	e0bc <lzma_lzma_preset@@XZ_5.0+0x1d8>  // b.pmore
    e0ac:	ldr	w0, [x0, #28]
    e0b0:	cmp	w0, #0x4
    e0b4:	cset	w0, ls  // ls = plast
    e0b8:	ret
    e0bc:	mov	w0, #0x0                   	// #0
    e0c0:	b	e0b8 <lzma_lzma_preset@@XZ_5.0+0x1d4>
    e0c4:	mov	x6, x0
    e0c8:	add	x0, x0, #0x4, lsl #12
    e0cc:	stp	x29, x30, [sp, #-16]!
    e0d0:	mov	w10, #0x440                 	// #1088
    e0d4:	ubfiz	x7, x1, #4, #32
    e0d8:	mov	x29, sp
    e0dc:	ldr	w11, [x0, #2052]
    e0e0:	ubfiz	x0, x1, #2, #32
    e0e4:	umaddl	x10, w1, w10, x6
    e0e8:	mov	x1, #0x4800                	// #18432
    e0ec:	add	x0, x0, x1
    e0f0:	adrp	x2, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    e0f4:	add	x0, x6, x0
    e0f8:	add	x14, x7, #0x4
    e0fc:	ldr	x2, [x2, #3960]
    e100:	add	x10, x10, #0x404
    e104:	str	w11, [x0, #8]
    e108:	add	x14, x6, x14
    e10c:	ldrh	w0, [x6]
    e110:	mov	x8, #0x0                   	// #0
    e114:	ubfx	x3, x0, #4, #12
    e118:	eor	x0, x3, #0x7f
    e11c:	ldrb	w15, [x2, x3]
    e120:	ldrb	w3, [x2, x0]
    e124:	ldrh	w0, [x6, #2]
    e128:	ubfx	x4, x0, #4, #12
    e12c:	eor	x0, x4, #0x7f
    e130:	ldrb	w13, [x2, x4]
    e134:	ldrb	w12, [x2, x0]
    e138:	add	w13, w13, w3
    e13c:	add	w12, w12, w3
    e140:	cmp	w11, w8
    e144:	mov	w9, w8
    e148:	ccmp	w8, #0x7, #0x2, hi  // hi = pmore
    e14c:	b.ls	e180 <lzma_lzma_preset@@XZ_5.0+0x29c>  // b.plast
    e150:	add	x7, x7, #0x104
    e154:	add	x8, x10, w8, uxtw #2
    e158:	add	x7, x6, x7
    e15c:	cmp	w9, w11
    e160:	ccmp	w9, #0xf, #0x2, cc  // cc = lo, ul, last
    e164:	b.ls	e1a0 <lzma_lzma_preset@@XZ_5.0+0x2bc>  // b.plast
    e168:	add	x10, x10, w9, uxtw #2
    e16c:	add	x6, x6, #0x204
    e170:	cmp	w9, w11
    e174:	b.cc	e1c0 <lzma_lzma_preset@@XZ_5.0+0x2dc>  // b.lo, b.ul, b.last
    e178:	ldp	x29, x30, [sp], #16
    e17c:	ret
    e180:	mov	w2, w8
    e184:	mov	x0, x14
    e188:	mov	w1, #0x3                   	// #3
    e18c:	bl	dfe8 <lzma_lzma_preset@@XZ_5.0+0x104>
    e190:	add	w0, w0, w15
    e194:	str	w0, [x10, x8, lsl #2]
    e198:	add	x8, x8, #0x1
    e19c:	b	e140 <lzma_lzma_preset@@XZ_5.0+0x25c>
    e1a0:	sub	w2, w9, #0x8
    e1a4:	mov	x0, x7
    e1a8:	mov	w1, #0x3                   	// #3
    e1ac:	bl	dfe8 <lzma_lzma_preset@@XZ_5.0+0x104>
    e1b0:	add	w0, w0, w13
    e1b4:	add	w9, w9, #0x1
    e1b8:	str	w0, [x8], #4
    e1bc:	b	e15c <lzma_lzma_preset@@XZ_5.0+0x278>
    e1c0:	sub	w2, w9, #0x10
    e1c4:	mov	x0, x6
    e1c8:	mov	w1, #0x8                   	// #8
    e1cc:	bl	dfe8 <lzma_lzma_preset@@XZ_5.0+0x104>
    e1d0:	add	w0, w0, w12
    e1d4:	add	w9, w9, #0x1
    e1d8:	str	w0, [x10], #4
    e1dc:	b	e170 <lzma_lzma_preset@@XZ_5.0+0x28c>
    e1e0:	mov	x3, x0
    e1e4:	stp	x29, x30, [sp, #-16]!
    e1e8:	mov	x29, sp
    e1ec:	bl	e088 <lzma_lzma_preset@@XZ_5.0+0x1a4>
    e1f0:	tst	w0, #0xff
    e1f4:	b.eq	e220 <lzma_lzma_preset@@XZ_5.0+0x33c>  // b.none
    e1f8:	ldr	w0, [x3, #36]
    e1fc:	sub	w0, w0, #0x2
    e200:	cmp	w0, #0x10f
    e204:	b.hi	e220 <lzma_lzma_preset@@XZ_5.0+0x33c>  // b.pmore
    e208:	ldr	w0, [x3, #32]
    e20c:	sub	w0, w0, #0x1
    e210:	cmp	w0, #0x1
    e214:	cset	w0, ls  // ls = plast
    e218:	ldp	x29, x30, [sp], #16
    e21c:	ret
    e220:	mov	w0, #0x0                   	// #0
    e224:	b	e218 <lzma_lzma_preset@@XZ_5.0+0x334>
    e228:	ldr	x4, [x0]
    e22c:	mov	w5, #0xfeffffff            	// #-16777217
    e230:	cmp	w4, w5
    e234:	b.ls	e240 <lzma_lzma_preset@@XZ_5.0+0x35c>  // b.plast
    e238:	cmp	xzr, x4, lsr #32
    e23c:	b.eq	e28c <lzma_lzma_preset@@XZ_5.0+0x3a8>  // b.none
    e240:	mov	w6, #0xffffffff            	// #-1
    e244:	ldr	x5, [x2]
    e248:	cmp	x5, x3
    e24c:	b.eq	e2ac <lzma_lzma_preset@@XZ_5.0+0x3c8>  // b.none
    e250:	ldrb	w4, [x0, #20]
    e254:	ldr	w7, [x0, #4]
    e258:	add	w4, w4, w7
    e25c:	strb	w4, [x1, x5]
    e260:	ldr	x4, [x2]
    e264:	add	x4, x4, #0x1
    e268:	str	x4, [x2]
    e26c:	strb	w6, [x0, #20]
    e270:	ldr	x4, [x0, #8]
    e274:	sub	x4, x4, #0x1
    e278:	str	x4, [x0, #8]
    e27c:	cbnz	x4, e244 <lzma_lzma_preset@@XZ_5.0+0x360>
    e280:	ldr	x1, [x0]
    e284:	lsr	x1, x1, #24
    e288:	strb	w1, [x0, #20]
    e28c:	ldr	x1, [x0, #8]
    e290:	add	x1, x1, #0x1
    e294:	str	x1, [x0, #8]
    e298:	ldr	x1, [x0]
    e29c:	lsl	w1, w1, #8
    e2a0:	str	x1, [x0]
    e2a4:	mov	w0, #0x0                   	// #0
    e2a8:	ret
    e2ac:	mov	w0, #0x1                   	// #1
    e2b0:	b	e2a8 <lzma_lzma_preset@@XZ_5.0+0x3c4>
    e2b4:	stp	x29, x30, [sp, #-16]!
    e2b8:	and	w14, w4, #0xff
    e2bc:	mov	x12, x1
    e2c0:	mov	x29, sp
    e2c4:	ldr	x4, [x0, #24]
    e2c8:	mov	w1, w3
    e2cc:	sub	w3, w3, #0x2
    e2d0:	mov	w13, w2
    e2d4:	cmp	w3, #0x7
    e2d8:	add	x7, x4, #0x1
    e2dc:	b.hi	e334 <lzma_lzma_preset@@XZ_5.0+0x450>  // b.pmore
    e2e0:	add	x1, x0, x4, lsl #2
    e2e4:	add	x4, x4, #0x22
    e2e8:	str	wzr, [x1, #40]
    e2ec:	mov	x1, #0x4                   	// #4
    e2f0:	add	x1, x1, w2, uxtw #4
    e2f4:	str	x12, [x0, x4, lsl #3]
    e2f8:	str	x7, [x0, #24]
    e2fc:	add	x1, x12, x1
    e300:	mov	w2, #0x3                   	// #3
    e304:	bl	e038 <lzma_lzma_preset@@XZ_5.0+0x154>
    e308:	cbnz	w14, e394 <lzma_lzma_preset@@XZ_5.0+0x4b0>
    e30c:	add	x1, x12, w13, uxtw #2
    e310:	add	x1, x1, #0x4, lsl #12
    e314:	ldr	w0, [x1, #2056]
    e318:	sub	w0, w0, #0x1
    e31c:	str	w0, [x1, #2056]
    e320:	cbnz	w0, e394 <lzma_lzma_preset@@XZ_5.0+0x4b0>
    e324:	ldp	x29, x30, [sp], #16
    e328:	mov	w1, w13
    e32c:	mov	x0, x12
    e330:	b	e0c4 <lzma_lzma_preset@@XZ_5.0+0x1e0>
    e334:	add	x6, x0, x4, lsl #2
    e338:	add	x2, x0, x4, lsl #3
    e33c:	mov	w8, #0x1                   	// #1
    e340:	sub	w3, w1, #0xa
    e344:	add	x4, x4, #0x2
    e348:	cmp	w3, #0x7
    e34c:	str	w8, [x6, #40]
    e350:	str	x12, [x2, #272]
    e354:	str	x7, [x0, #24]
    e358:	add	x7, x12, #0x2
    e35c:	b.hi	e378 <lzma_lzma_preset@@XZ_5.0+0x494>  // b.pmore
    e360:	str	wzr, [x6, #44]
    e364:	ubfiz	x1, x13, #4, #32
    e368:	str	x7, [x2, #280]
    e36c:	add	x1, x1, #0x104
    e370:	str	x4, [x0, #24]
    e374:	b	e2fc <lzma_lzma_preset@@XZ_5.0+0x418>
    e378:	str	w8, [x6, #44]
    e37c:	sub	w3, w1, #0x12
    e380:	str	x7, [x2, #280]
    e384:	add	x1, x12, #0x204
    e388:	mov	w2, #0x8                   	// #8
    e38c:	str	x4, [x0, #24]
    e390:	b	e304 <lzma_lzma_preset@@XZ_5.0+0x420>
    e394:	ldp	x29, x30, [sp], #16
    e398:	ret
    e39c:	stp	x29, x30, [sp, #-32]!
    e3a0:	mov	x18, x0
    e3a4:	mov	w0, #0x4000400             	// #67109888
    e3a8:	mov	x29, sp
    e3ac:	stp	x19, x20, [sp, #16]
    e3b0:	and	w2, w2, #0xff
    e3b4:	mov	w20, w1
    e3b8:	mov	x3, x18
    e3bc:	str	w0, [x18]
    e3c0:	add	x0, x18, w1, uxtw #4
    e3c4:	mov	w4, #0x400                 	// #1024
    e3c8:	cmp	x3, x0
    e3cc:	b.ne	e3f8 <lzma_lzma_preset@@XZ_5.0+0x514>  // b.any
    e3d0:	add	x0, x18, #0x204
    e3d4:	add	x1, x18, #0x404
    e3d8:	mov	w3, #0x400                 	// #1024
    e3dc:	strh	w3, [x0], #2
    e3e0:	cmp	x1, x0
    e3e4:	b.ne	e3dc <lzma_lzma_preset@@XZ_5.0+0x4f8>  // b.any
    e3e8:	cbz	w2, e45c <lzma_lzma_preset@@XZ_5.0+0x578>
    e3ec:	ldp	x19, x20, [sp, #16]
    e3f0:	ldp	x29, x30, [sp], #32
    e3f4:	ret
    e3f8:	add	x3, x3, #0x10
    e3fc:	sturh	w4, [x3, #-12]
    e400:	sturh	w4, [x3, #-10]
    e404:	sturh	w4, [x3, #-8]
    e408:	sturh	w4, [x3, #-6]
    e40c:	sturh	w4, [x3, #-4]
    e410:	sturh	w4, [x3, #-2]
    e414:	strh	w4, [x3]
    e418:	strh	w4, [x3, #2]
    e41c:	strh	w4, [x3, #244]
    e420:	strh	w4, [x3, #246]
    e424:	strh	w4, [x3, #248]
    e428:	strh	w4, [x3, #250]
    e42c:	strh	w4, [x3, #252]
    e430:	strh	w4, [x3, #254]
    e434:	strh	w4, [x3, #256]
    e438:	strh	w4, [x3, #258]
    e43c:	b	e3c8 <lzma_lzma_preset@@XZ_5.0+0x4e4>
    e440:	mov	w1, w19
    e444:	add	w19, w19, #0x1
    e448:	mov	x0, x18
    e44c:	bl	e0c4 <lzma_lzma_preset@@XZ_5.0+0x1e0>
    e450:	cmp	w20, w19
    e454:	b.ne	e440 <lzma_lzma_preset@@XZ_5.0+0x55c>  // b.any
    e458:	b	e3ec <lzma_lzma_preset@@XZ_5.0+0x508>
    e45c:	mov	w19, #0x0                   	// #0
    e460:	b	e450 <lzma_lzma_preset@@XZ_5.0+0x56c>
    e464:	mov	x8, x0
    e468:	mov	x9, x1
    e46c:	ldp	x0, x1, [x0, #24]
    e470:	adrp	x10, 19000 <lzma_mode_is_supported@@XZ_5.0+0x9ebc>
    e474:	mov	w11, #0xffffff              	// #16777215
    e478:	add	x10, x10, #0x8f8
    e47c:	mov	w12, #0x800                 	// #2048
    e480:	cmp	x1, x0
    e484:	b.cc	e5bc <lzma_lzma_preset@@XZ_5.0+0x6d8>  // b.lo, b.ul, b.last
    e488:	mov	w0, #0x0                   	// #0
    e48c:	stp	xzr, xzr, [x8, #24]
    e490:	ret
    e494:	ldr	w0, [x8, #16]
    e498:	lsl	w0, w0, #8
    e49c:	str	w0, [x8, #16]
    e4a0:	ldr	x0, [x8, #32]
    e4a4:	add	x1, x8, x0, lsl #2
    e4a8:	ldr	w1, [x1, #40]
    e4ac:	cmp	w1, #0x4
    e4b0:	b.hi	e4ec <lzma_lzma_preset@@XZ_5.0+0x608>  // b.pmore
    e4b4:	ldrb	w1, [x10, w1, uxtw]
    e4b8:	adr	x4, e4c4 <lzma_lzma_preset@@XZ_5.0+0x5e0>
    e4bc:	add	x1, x4, w1, sxtb #2
    e4c0:	br	x1
    e4c4:	add	x1, x0, #0x22
    e4c8:	ldr	w4, [x8, #16]
    e4cc:	ldr	x6, [x8, x1, lsl #3]
    e4d0:	lsr	w4, w4, #11
    e4d4:	ldrh	w5, [x6]
    e4d8:	sub	w1, w12, w5
    e4dc:	mul	w4, w4, w5
    e4e0:	add	w1, w5, w1, lsr #5
    e4e4:	str	w4, [x8, #16]
    e4e8:	strh	w1, [x6]
    e4ec:	add	x0, x0, #0x1
    e4f0:	str	x0, [x8, #32]
    e4f4:	ldp	x0, x1, [x8, #24]
    e4f8:	cmp	x1, x0
    e4fc:	b.cc	e5c4 <lzma_lzma_preset@@XZ_5.0+0x6e0>  // b.lo, b.ul, b.last
    e500:	mov	w0, #0x0                   	// #0
    e504:	stp	xzr, xzr, [x8, #24]
    e508:	b	e5e8 <lzma_lzma_preset@@XZ_5.0+0x704>
    e50c:	add	x1, x0, #0x22
    e510:	ldr	x6, [x8]
    e514:	ldr	x7, [x8, x1, lsl #3]
    e518:	ldr	w1, [x8, #16]
    e51c:	ldrh	w4, [x7]
    e520:	lsr	w5, w1, #11
    e524:	mul	w5, w5, w4
    e528:	sub	w4, w4, w4, lsr #5
    e52c:	sub	w1, w1, w5
    e530:	str	w1, [x8, #16]
    e534:	add	x6, x6, w5, uxtw
    e538:	str	x6, [x8]
    e53c:	strh	w4, [x7]
    e540:	b	e4ec <lzma_lzma_preset@@XZ_5.0+0x608>
    e544:	ldr	w1, [x8, #16]
    e548:	lsr	w1, w1, #1
    e54c:	str	w1, [x8, #16]
    e550:	b	e4ec <lzma_lzma_preset@@XZ_5.0+0x608>
    e554:	ldr	w4, [x8, #16]
    e558:	ldr	x1, [x8]
    e55c:	lsr	w4, w4, #1
    e560:	str	w4, [x8, #16]
    e564:	add	x4, x1, x4
    e568:	str	x4, [x8]
    e56c:	b	e4ec <lzma_lzma_preset@@XZ_5.0+0x608>
    e570:	mov	w0, #0xffffffff            	// #-1
    e574:	str	w0, [x8, #16]
    e578:	mov	x1, x9
    e57c:	mov	x0, x8
    e580:	bl	e228 <lzma_lzma_preset@@XZ_5.0+0x344>
    e584:	ands	w0, w0, #0xff
    e588:	b.ne	e5e4 <lzma_lzma_preset@@XZ_5.0+0x700>  // b.any
    e58c:	ldp	x4, x1, [x8, #24]
    e590:	add	x1, x1, #0x1
    e594:	str	x1, [x8, #32]
    e598:	cmp	x1, x4
    e59c:	b.cc	e578 <lzma_lzma_preset@@XZ_5.0+0x694>  // b.lo, b.ul, b.last
    e5a0:	mov	x1, #0x1                   	// #1
    e5a4:	stp	xzr, x1, [x8]
    e5a8:	mov	w1, #0xffffffff            	// #-1
    e5ac:	str	w1, [x8, #16]
    e5b0:	strb	wzr, [x8, #20]
    e5b4:	stp	xzr, xzr, [x8, #24]
    e5b8:	b	e5e8 <lzma_lzma_preset@@XZ_5.0+0x704>
    e5bc:	stp	x29, x30, [sp, #-16]!
    e5c0:	mov	x29, sp
    e5c4:	ldr	w0, [x8, #16]
    e5c8:	cmp	w0, w11
    e5cc:	b.hi	e4a0 <lzma_lzma_preset@@XZ_5.0+0x5bc>  // b.pmore
    e5d0:	mov	x1, x9
    e5d4:	mov	x0, x8
    e5d8:	bl	e228 <lzma_lzma_preset@@XZ_5.0+0x344>
    e5dc:	tst	w0, #0xff
    e5e0:	b.eq	e494 <lzma_lzma_preset@@XZ_5.0+0x5b0>  // b.none
    e5e4:	mov	w0, #0x1                   	// #1
    e5e8:	ldp	x29, x30, [sp], #16
    e5ec:	ret
    e5f0:	stp	x29, x30, [sp, #-32]!
    e5f4:	mov	w4, #0xa                   	// #10
    e5f8:	mov	x18, x0
    e5fc:	mov	x29, sp
    e600:	stp	x19, x20, [sp, #16]
    e604:	mov	w20, w2
    e608:	ldr	w2, [x0, #736]
    e60c:	mov	x9, #0x7200                	// #29184
    e610:	mov	w19, w3
    e614:	cmp	w2, #0x7
    e618:	mov	w2, #0x7                   	// #7
    e61c:	csel	w2, w2, w4, cc  // cc = lo, ul, last
    e620:	ldrb	w4, [x0, #2956]
    e624:	str	w2, [x0, #736]
    e628:	mov	w2, w1
    e62c:	add	x1, x0, x9
    e630:	bl	e2b4 <lzma_lzma_preset@@XZ_5.0+0x3d0>
    e634:	mov	w0, #0x1fff                	// #8191
    e638:	cmp	w20, w0
    e63c:	adrp	x0, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    e640:	b.hi	e73c <lzma_lzma_preset@@XZ_5.0+0x858>  // b.pmore
    e644:	ldr	x0, [x0, #4008]
    e648:	ldrb	w3, [x0, w20, uxtw]
    e64c:	cmp	w19, #0x5
    e650:	mov	w1, #0x5                   	// #5
    e654:	csel	w1, w19, w1, ls  // ls = plast
    e658:	mov	x8, #0x6efc                	// #28412
    e65c:	sub	w1, w1, #0x2
    e660:	mov	x0, x18
    e664:	mov	w2, #0x6                   	// #6
    e668:	ubfiz	x1, x1, #7, #32
    e66c:	add	x1, x1, x8
    e670:	add	x1, x18, x1
    e674:	bl	e038 <lzma_lzma_preset@@XZ_5.0+0x154>
    e678:	cmp	w3, #0x3
    e67c:	b.ls	e704 <lzma_lzma_preset@@XZ_5.0+0x820>  // b.plast
    e680:	ldr	x5, [x18, #24]
    e684:	lsr	w0, w3, #1
    e688:	and	w1, w3, #0x1
    e68c:	sub	w6, w0, #0x1
    e690:	orr	w1, w1, #0x2
    e694:	cmp	w3, #0xd
    e698:	lsl	x2, x5, #2
    e69c:	lsl	w1, w1, w6
    e6a0:	sub	w4, w20, w1
    e6a4:	b.hi	e76c <lzma_lzma_preset@@XZ_5.0+0x888>  // b.pmore
    e6a8:	sub	x1, x1, x3
    e6ac:	mov	x7, #0x70fc                	// #28924
    e6b0:	add	x2, x18, x2
    e6b4:	neg	x11, x18
    e6b8:	lsl	x1, x1, #1
    e6bc:	add	x10, x18, x7
    e6c0:	sub	x1, x1, #0x2
    e6c4:	mov	w7, #0x1                   	// #1
    e6c8:	add	x9, x11, x2, lsl #1
    e6cc:	and	w3, w4, #0x1
    e6d0:	add	x8, x1, w7, uxtw #1
    e6d4:	str	w3, [x2, #40]
    e6d8:	add	x8, x10, x8
    e6dc:	lsr	w4, w4, #1
    e6e0:	str	x8, [x9, #272]
    e6e4:	add	w7, w3, w7, lsl #1
    e6e8:	subs	w6, w6, #0x1
    e6ec:	add	x2, x2, #0x4
    e6f0:	b.ne	e6c8 <lzma_lzma_preset@@XZ_5.0+0x7e4>  // b.any
    e6f4:	add	x5, x5, #0x1
    e6f8:	sub	w0, w0, #0x2
    e6fc:	add	x0, x5, x0
    e700:	str	x0, [x18, #24]
    e704:	ldr	w0, [x18, #748]
    e708:	str	w0, [x18, #752]
    e70c:	ldr	w0, [x18, #744]
    e710:	str	w0, [x18, #748]
    e714:	ldr	w0, [x18, #740]
    e718:	str	w20, [x18, #740]
    e71c:	str	w0, [x18, #744]
    e720:	add	x18, x18, #0x10, lsl #12
    e724:	ldp	x19, x20, [sp, #16]
    e728:	ldr	w0, [x18, #3732]
    e72c:	add	w0, w0, #0x1
    e730:	str	w0, [x18, #3732]
    e734:	ldp	x29, x30, [sp], #32
    e738:	ret
    e73c:	mov	w1, #0x1ffffff             	// #33554431
    e740:	cmp	w20, w1
    e744:	ldr	x0, [x0, #4008]
    e748:	b.hi	e75c <lzma_lzma_preset@@XZ_5.0+0x878>  // b.pmore
    e74c:	lsr	w1, w20, #12
    e750:	ldrb	w1, [x0, x1]
    e754:	add	w3, w1, #0x18
    e758:	b	e64c <lzma_lzma_preset@@XZ_5.0+0x768>
    e75c:	lsr	w1, w20, #24
    e760:	ldrb	w1, [x0, x1]
    e764:	add	w3, w1, #0x30
    e768:	b	e64c <lzma_lzma_preset@@XZ_5.0+0x768>
    e76c:	lsr	w6, w4, #4
    e770:	sub	w3, w0, #0x5
    e774:	add	x2, x18, x2
    e778:	sub	w3, w3, #0x1
    e77c:	add	x2, x2, #0x4
    e780:	lsr	w1, w6, w3
    e784:	and	w1, w1, #0x1
    e788:	add	w1, w1, #0x2
    e78c:	str	w1, [x2, #36]
    e790:	cbnz	w3, e778 <lzma_lzma_preset@@XZ_5.0+0x894>
    e794:	sub	w0, w0, #0x6
    e798:	mov	x1, #0x71e0                	// #29152
    e79c:	add	x0, x0, x5
    e7a0:	add	x8, x18, x1
    e7a4:	and	w4, w4, #0xf
    e7a8:	add	x1, x0, #0x2
    e7ac:	add	x5, x0, #0x6
    e7b0:	add	x9, x18, #0x24
    e7b4:	add	x6, x18, #0x108
    e7b8:	mov	w3, #0x1                   	// #1
    e7bc:	and	w2, w4, #0x1
    e7c0:	str	w2, [x9, x1, lsl #2]
    e7c4:	add	x7, x8, w3, uxtw #1
    e7c8:	str	x7, [x6, x1, lsl #3]
    e7cc:	add	x1, x1, #0x1
    e7d0:	lsr	w4, w4, #1
    e7d4:	add	w3, w2, w3, lsl #1
    e7d8:	cmp	x5, x1
    e7dc:	b.ne	e7bc <lzma_lzma_preset@@XZ_5.0+0x8d8>  // b.any
    e7e0:	add	x1, x18, #0x10, lsl #12
    e7e4:	add	x0, x0, #0x5
    e7e8:	str	x0, [x18, #24]
    e7ec:	ldr	w0, [x1, #3800]
    e7f0:	add	w0, w0, #0x1
    e7f4:	str	w0, [x1, #3800]
    e7f8:	b	e704 <lzma_lzma_preset@@XZ_5.0+0x820>
    e7fc:	stp	x29, x30, [sp, #-128]!
    e800:	mov	x29, sp
    e804:	stp	x19, x20, [sp, #16]
    e808:	mov	x19, x0
    e80c:	ldrb	w0, [x0, #2957]
    e810:	stp	x21, x22, [sp, #32]
    e814:	mov	x22, x3
    e818:	mov	w21, w5
    e81c:	stp	x23, x24, [sp, #48]
    e820:	mov	x23, x2
    e824:	mov	x24, x4
    e828:	stp	x25, x26, [sp, #64]
    e82c:	stp	x27, x28, [sp, #80]
    e830:	mov	x27, x1
    e834:	cbnz	w0, e8c8 <lzma_lzma_preset@@XZ_5.0+0x9e4>
    e838:	ldr	w0, [x1, #24]
    e83c:	ldr	w1, [x1, #32]
    e840:	cmp	w1, w0
    e844:	b.ne	e870 <lzma_lzma_preset@@XZ_5.0+0x98c>  // b.any
    e848:	ldr	w0, [x27, #104]
    e84c:	cbnz	w0, e8c0 <lzma_lzma_preset@@XZ_5.0+0x9dc>
    e850:	mov	w0, #0x0                   	// #0
    e854:	ldp	x19, x20, [sp, #16]
    e858:	ldp	x21, x22, [sp, #32]
    e85c:	ldp	x23, x24, [sp, #48]
    e860:	ldp	x25, x26, [sp, #64]
    e864:	ldp	x27, x28, [sp, #80]
    e868:	ldp	x29, x30, [sp], #128
    e86c:	ret
    e870:	ldr	x2, [x27, #56]
    e874:	mov	x0, x27
    e878:	mov	w1, #0x1                   	// #1
    e87c:	blr	x2
    e880:	str	wzr, [x27, #28]
    e884:	ldr	x0, [x19, #24]
    e888:	mov	x16, #0x6b9c                	// #27548
    e88c:	add	x2, x19, x16
    e890:	add	x1, x19, x0, lsl #2
    e894:	str	wzr, [x1, #40]
    e898:	add	x1, x0, #0x22
    e89c:	add	x0, x0, #0x1
    e8a0:	str	x2, [x19, x1, lsl #3]
    e8a4:	add	x1, x19, #0xb9c
    e8a8:	str	x0, [x19, #24]
    e8ac:	mov	w2, #0x8                   	// #8
    e8b0:	ldr	x0, [x27]
    e8b4:	ldrb	w3, [x0]
    e8b8:	mov	x0, x19
    e8bc:	bl	e038 <lzma_lzma_preset@@XZ_5.0+0x154>
    e8c0:	mov	w0, #0x1                   	// #1
    e8c4:	strb	w0, [x19, #2957]
    e8c8:	ldp	w20, w0, [x27, #24]
    e8cc:	add	x25, sp, #0x78
    e8d0:	add	x26, sp, #0x7c
    e8d4:	mov	x15, #0xba48                	// #47688
    e8d8:	sub	w20, w20, w0
    e8dc:	add	x0, x19, x15
    e8e0:	str	x0, [sp, #104]
    e8e4:	mov	x3, x24
    e8e8:	mov	x2, x22
    e8ec:	mov	x1, x23
    e8f0:	mov	x0, x19
    e8f4:	bl	e464 <lzma_lzma_preset@@XZ_5.0+0x580>
    e8f8:	tst	w0, #0xff
    e8fc:	b.ne	e850 <lzma_lzma_preset@@XZ_5.0+0x96c>  // b.any
    e900:	ldr	w1, [x27, #24]
    e904:	cmn	w21, #0x1
    e908:	b.eq	e938 <lzma_lzma_preset@@XZ_5.0+0xa54>  // b.none
    e90c:	ldr	w0, [x27, #28]
    e910:	sub	w0, w1, w0
    e914:	cmp	w0, w21
    e918:	b.cs	ec44 <lzma_lzma_preset@@XZ_5.0+0xd60>  // b.hs, b.nlast
    e91c:	ldr	x0, [x22]
    e920:	ldr	x2, [x19, #8]
    e924:	add	x0, x0, #0x4
    e928:	add	x0, x0, x2
    e92c:	mov	x2, #0xeffe                	// #61438
    e930:	cmp	x0, x2
    e934:	b.hi	ec44 <lzma_lzma_preset@@XZ_5.0+0xd60>  // b.pmore
    e938:	ldr	w0, [x27, #32]
    e93c:	cmp	w0, w1
    e940:	b.hi	e954 <lzma_lzma_preset@@XZ_5.0+0xa70>  // b.pmore
    e944:	ldr	w0, [x27, #104]
    e948:	cbz	w0, e850 <lzma_lzma_preset@@XZ_5.0+0x96c>
    e94c:	ldr	w0, [x27, #28]
    e950:	cbz	w0, ec44 <lzma_lzma_preset@@XZ_5.0+0xd60>
    e954:	ldrb	w0, [x19, #2956]
    e958:	cbz	w0, ea58 <lzma_lzma_preset@@XZ_5.0+0xb74>
    e95c:	mov	x3, x25
    e960:	mov	x2, x26
    e964:	mov	x1, x27
    e968:	mov	x0, x19
    e96c:	bl	f190 <lzma_mode_is_supported@@XZ_5.0+0x4c>
    e970:	ldr	w8, [x19, #736]
    e974:	mov	x14, #0x35ce                	// #13774
    e978:	ldr	w0, [x19, #2960]
    e97c:	ldp	w28, w2, [sp, #120]
    e980:	and	w1, w20, w0
    e984:	ubfiz	x4, x8, #4, #32
    e988:	and	w0, w20, w0
    e98c:	add	x4, x4, x0
    e990:	mov	w7, w8
    e994:	ldr	x0, [x19, #24]
    e998:	add	x4, x4, x14
    e99c:	cmn	w2, #0x1
    e9a0:	lsl	x10, x4, #1
    e9a4:	add	x12, x0, #0x1
    e9a8:	add	x4, x19, x4, lsl #1
    e9ac:	b.ne	eae8 <lzma_lzma_preset@@XZ_5.0+0xc04>  // b.any
    e9b0:	add	x1, x19, x0, lsl #2
    e9b4:	ldr	w11, [x19, #2964]
    e9b8:	ldr	x10, [x27]
    e9bc:	cmp	w8, #0x6
    e9c0:	str	wzr, [x1, #40]
    e9c4:	add	x1, x0, #0x22
    e9c8:	str	x4, [x19, x1, lsl #3]
    e9cc:	ldp	w1, w4, [x27, #24]
    e9d0:	str	x12, [x19, #24]
    e9d4:	sub	w2, w1, w4
    e9d8:	sub	w9, w1, #0x1
    e9dc:	sub	w2, w2, #0x1
    e9e0:	sub	w1, w1, w4
    e9e4:	ldrb	w3, [x10, x1]
    e9e8:	ldrb	w1, [x10, x2]
    e9ec:	mov	w2, #0x8                   	// #8
    e9f0:	sub	w7, w2, w11
    e9f4:	asr	w1, w1, w7
    e9f8:	ldr	w7, [x19, #2968]
    e9fc:	and	w7, w20, w7
    ea00:	lsl	w7, w7, w11
    ea04:	add	w1, w1, w7
    ea08:	mov	w7, #0x600                 	// #1536
    ea0c:	umaddl	x1, w1, w7, x19
    ea10:	add	x1, x1, #0xb9c
    ea14:	b.hi	ea74 <lzma_lzma_preset@@XZ_5.0+0xb90>  // b.pmore
    ea18:	mov	x0, x19
    ea1c:	bl	e038 <lzma_lzma_preset@@XZ_5.0+0x154>
    ea20:	ldr	w1, [x19, #736]
    ea24:	cmp	w1, #0x3
    ea28:	b.ls	eae0 <lzma_lzma_preset@@XZ_5.0+0xbfc>  // b.plast
    ea2c:	sub	w2, w1, #0x3
    ea30:	sub	w0, w1, #0x6
    ea34:	cmp	w1, #0x9
    ea38:	csel	w0, w0, w2, hi  // hi = pmore
    ea3c:	str	w0, [x19, #736]
    ea40:	ldr	w0, [x27, #28]
    ea44:	sub	w5, w0, w28
    ea48:	ldr	w0, [sp, #120]
    ea4c:	str	w5, [x27, #28]
    ea50:	add	w20, w20, w0
    ea54:	b	e8e4 <lzma_lzma_preset@@XZ_5.0+0xa00>
    ea58:	mov	w4, w20
    ea5c:	mov	x3, x25
    ea60:	mov	x2, x26
    ea64:	mov	x1, x27
    ea68:	mov	x0, x19
    ea6c:	bl	f6fc <lzma_mode_is_supported@@XZ_5.0+0x5b8>
    ea70:	b	e970 <lzma_lzma_preset@@XZ_5.0+0xa8c>
    ea74:	ldr	w2, [x19, #740]
    ea78:	add	w3, w3, #0x100
    ea7c:	add	x0, x0, #0x2
    ea80:	mov	w8, #0xffff                	// #65535
    ea84:	add	w4, w4, w2
    ea88:	sub	w4, w9, w4
    ea8c:	add	x9, x19, #0x108
    ea90:	ldrb	w7, [x10, x4]
    ea94:	add	x10, x19, #0x24
    ea98:	mov	w4, #0x100                 	// #256
    ea9c:	ubfx	x2, x3, #7, #1
    eaa0:	lsl	w7, w7, #1
    eaa4:	str	w2, [x10, x0, lsl #2]
    eaa8:	and	w2, w7, w4
    eaac:	add	w2, w2, w3, lsr #8
    eab0:	lsl	w3, w3, #1
    eab4:	add	w2, w2, w4
    eab8:	cmp	w3, w8
    eabc:	add	x2, x1, x2, lsl #1
    eac0:	str	x2, [x9, x0, lsl #3]
    eac4:	eon	w2, w7, w3
    eac8:	and	w4, w4, w2
    eacc:	mov	x2, x0
    ead0:	add	x0, x0, #0x1
    ead4:	b.ls	ea9c <lzma_lzma_preset@@XZ_5.0+0xbb8>  // b.plast
    ead8:	str	x2, [x19, #24]
    eadc:	b	ea20 <lzma_lzma_preset@@XZ_5.0+0xb3c>
    eae0:	mov	w0, #0x0                   	// #0
    eae4:	b	ea3c <lzma_lzma_preset@@XZ_5.0+0xb58>
    eae8:	add	x3, x19, x0, lsl #2
    eaec:	add	x9, x19, x0, lsl #3
    eaf0:	mov	w11, #0x1                   	// #1
    eaf4:	mov	x13, #0x368e                	// #13966
    eaf8:	cmp	w2, #0x3
    eafc:	str	w11, [x3, #40]
    eb00:	str	x4, [x9, #272]
    eb04:	add	x4, x7, x13
    eb08:	str	x12, [x19, #24]
    eb0c:	add	x12, x0, #0x2
    eb10:	lsl	x7, x4, #1
    eb14:	add	x4, x19, x4, lsl #1
    eb18:	b.hi	ec24 <lzma_lzma_preset@@XZ_5.0+0xd40>  // b.pmore
    eb1c:	str	w11, [x3, #44]
    eb20:	add	x13, x0, #0x3
    eb24:	str	x4, [x9, #280]
    eb28:	add	x4, x7, #0x18
    eb2c:	str	x12, [x19, #24]
    eb30:	add	x4, x19, x4
    eb34:	add	x12, x0, #0x4
    eb38:	cbnz	w2, eb7c <lzma_lzma_preset@@XZ_5.0+0xc98>
    eb3c:	str	wzr, [x3, #48]
    eb40:	cmp	w28, w11
    eb44:	str	x4, [x9, #288]
    eb48:	cset	w0, ne  // ne = any
    eb4c:	add	x10, x10, #0x1e0
    eb50:	str	w0, [x3, #52]
    eb54:	add	x10, x19, x10
    eb58:	str	x10, [x9, #296]
    eb5c:	str	x12, [x19, #24]
    eb60:	cmp	w28, #0x1
    eb64:	b.ne	ebfc <lzma_lzma_preset@@XZ_5.0+0xd18>  // b.any
    eb68:	cmp	w8, #0x7
    eb6c:	mov	w0, #0x9                   	// #9
    eb70:	mov	w1, #0xb                   	// #11
    eb74:	csel	w0, w0, w1, cc  // cc = lo, ul, last
    eb78:	b	ea3c <lzma_lzma_preset@@XZ_5.0+0xb58>
    eb7c:	add	x10, x19, w2, uxtw #2
    eb80:	cmp	w2, #0x1
    eb84:	ldr	w10, [x10, #740]
    eb88:	str	w11, [x3, #48]
    eb8c:	str	x4, [x9, #288]
    eb90:	add	x4, x7, #0x30
    eb94:	str	x13, [x19, #24]
    eb98:	add	x4, x19, x4
    eb9c:	b.ne	ebbc <lzma_lzma_preset@@XZ_5.0+0xcd8>  // b.any
    eba0:	str	wzr, [x3, #52]
    eba4:	str	x4, [x9, #296]
    eba8:	str	x12, [x19, #24]
    ebac:	ldr	w0, [x19, #740]
    ebb0:	str	w10, [x19, #740]
    ebb4:	str	w0, [x19, #744]
    ebb8:	b	eb60 <lzma_lzma_preset@@XZ_5.0+0xc7c>
    ebbc:	str	w11, [x3, #52]
    ebc0:	add	x7, x7, #0x48
    ebc4:	str	x4, [x9, #296]
    ebc8:	sub	w4, w2, #0x2
    ebcc:	str	w4, [x3, #56]
    ebd0:	add	x7, x19, x7
    ebd4:	str	x7, [x9, #304]
    ebd8:	add	x0, x0, #0x5
    ebdc:	str	x0, [x19, #24]
    ebe0:	cmp	w2, #0x3
    ebe4:	b.ne	ebf0 <lzma_lzma_preset@@XZ_5.0+0xd0c>  // b.any
    ebe8:	ldr	w0, [x19, #748]
    ebec:	str	w0, [x19, #752]
    ebf0:	ldr	w0, [x19, #744]
    ebf4:	str	w0, [x19, #748]
    ebf8:	b	ebac <lzma_lzma_preset@@XZ_5.0+0xcc8>
    ebfc:	mov	w2, w1
    ec00:	ldrb	w4, [x19, #2956]
    ec04:	ldr	x1, [sp, #104]
    ec08:	mov	x0, x19
    ec0c:	mov	w3, w28
    ec10:	bl	e2b4 <lzma_lzma_preset@@XZ_5.0+0x3d0>
    ec14:	ldr	w0, [x19, #736]
    ec18:	cmp	w0, #0x7
    ec1c:	mov	w0, #0x8                   	// #8
    ec20:	b	eb70 <lzma_lzma_preset@@XZ_5.0+0xc8c>
    ec24:	str	wzr, [x3, #44]
    ec28:	sub	w2, w2, #0x4
    ec2c:	str	x4, [x9, #280]
    ec30:	mov	x0, x19
    ec34:	str	x12, [x19, #24]
    ec38:	mov	w3, w28
    ec3c:	bl	e5f0 <lzma_lzma_preset@@XZ_5.0+0x70c>
    ec40:	b	ea40 <lzma_lzma_preset@@XZ_5.0+0xb5c>
    ec44:	ldrb	w0, [x19, #2958]
    ec48:	cbz	w0, ec58 <lzma_lzma_preset@@XZ_5.0+0xd74>
    ec4c:	mov	w0, #0x1                   	// #1
    ec50:	strb	wzr, [x19, #2958]
    ec54:	b	e854 <lzma_lzma_preset@@XZ_5.0+0x970>
    ec58:	mov	w0, #0x1                   	// #1
    ec5c:	strb	w0, [x19, #2958]
    ec60:	cmn	w21, #0x1
    ec64:	b.ne	eccc <lzma_lzma_preset@@XZ_5.0+0xde8>  // b.any
    ec68:	ldr	x3, [x19, #24]
    ec6c:	mov	w0, #0x1                   	// #1
    ec70:	ldr	w2, [x19, #736]
    ec74:	ldr	w1, [x19, #2960]
    ec78:	add	x5, x19, x3, lsl #2
    ec7c:	add	x4, x19, x3, lsl #3
    ec80:	and	w6, w20, w1
    ec84:	add	x3, x3, #0x2
    ec88:	and	w1, w20, w1
    ec8c:	str	w0, [x5, #40]
    ec90:	mov	x0, #0x35ce                	// #13774
    ec94:	add	x0, x0, x2, lsl #4
    ec98:	add	x0, x0, x6
    ec9c:	mov	x6, #0x368e                	// #13966
    eca0:	add	x2, x2, x6
    eca4:	add	x0, x19, x0, lsl #1
    eca8:	str	x0, [x4, #272]
    ecac:	str	wzr, [x5, #44]
    ecb0:	add	x2, x19, x2, lsl #1
    ecb4:	str	x2, [x4, #280]
    ecb8:	mov	x0, x19
    ecbc:	str	x3, [x19, #24]
    ecc0:	mov	w2, w21
    ecc4:	mov	w3, #0x2                   	// #2
    ecc8:	bl	e5f0 <lzma_lzma_preset@@XZ_5.0+0x70c>
    eccc:	ldr	x0, [x19, #24]
    ecd0:	mov	x2, #0x400000004           	// #17179869188
    ecd4:	mov	x3, x24
    ecd8:	add	x1, x19, x0, lsl #2
    ecdc:	add	x0, x0, #0x5
    ece0:	stp	x2, x2, [x1, #40]
    ece4:	mov	w2, #0x4                   	// #4
    ece8:	str	w2, [x1, #56]
    ecec:	mov	x2, x22
    ecf0:	str	x0, [x19, #24]
    ecf4:	mov	x1, x23
    ecf8:	mov	x0, x19
    ecfc:	bl	e464 <lzma_lzma_preset@@XZ_5.0+0x580>
    ed00:	tst	w0, #0xff
    ed04:	b.eq	ec4c <lzma_lzma_preset@@XZ_5.0+0xd68>  // b.none
    ed08:	b	e850 <lzma_lzma_preset@@XZ_5.0+0x96c>
    ed0c:	ldr	w5, [x1, #104]
    ed10:	cmp	w5, #0x1
    ed14:	b.eq	ed20 <lzma_lzma_preset@@XZ_5.0+0xe3c>  // b.none
    ed18:	mov	w5, #0xffffffff            	// #-1
    ed1c:	b	e7fc <lzma_lzma_preset@@XZ_5.0+0x918>
    ed20:	mov	w0, #0x8                   	// #8
    ed24:	ret
    ed28:	stp	x29, x30, [sp, #-32]!
    ed2c:	mov	x29, sp
    ed30:	stp	x19, x20, [sp, #16]
    ed34:	mov	x19, x0
    ed38:	mov	x20, x1
    ed3c:	mov	x0, x1
    ed40:	bl	e1e0 <lzma_lzma_preset@@XZ_5.0+0x2fc>
    ed44:	tst	w0, #0xff
    ed48:	b.eq	eeec <lzma_lzma_preset@@XZ_5.0+0x1008>  // b.none
    ed4c:	ldp	w2, w5, [x20, #20]
    ed50:	mov	w0, #0x1                   	// #1
    ed54:	ldr	w1, [x20, #28]
    ed58:	mov	w6, #0x400                 	// #1024
    ed5c:	str	w2, [x19, #2964]
    ed60:	add	w2, w2, w5
    ed64:	lsl	w4, w0, w5
    ed68:	sub	w4, w4, #0x1
    ed6c:	str	w4, [x19, #2968]
    ed70:	mov	x4, #0x1                   	// #1
    ed74:	add	x5, x19, #0xb9c
    ed78:	str	x4, [x19, #8]
    ed7c:	mov	w4, #0xffffffff            	// #-1
    ed80:	lsl	w1, w0, w1
    ed84:	lsl	w0, w0, w2
    ed88:	sub	w3, w1, #0x1
    ed8c:	str	xzr, [x19]
    ed90:	str	w4, [x19, #16]
    ed94:	mov	w4, #0x0                   	// #0
    ed98:	strb	wzr, [x19, #20]
    ed9c:	stp	xzr, xzr, [x19, #24]
    eda0:	str	xzr, [x19, #736]
    eda4:	str	xzr, [x19, #744]
    eda8:	str	wzr, [x19, #752]
    edac:	str	w3, [x19, #2960]
    edb0:	cmp	w0, w4
    edb4:	b.ne	eecc <lzma_lzma_preset@@XZ_5.0+0xfe8>  // b.any
    edb8:	mov	x7, #0x6d1c                	// #27932
    edbc:	mov	x8, #0x6b9c                	// #27548
    edc0:	add	x0, x19, x7
    edc4:	mov	x9, #0x6d34                	// #27956
    edc8:	add	x6, x19, x8
    edcc:	add	x7, x19, x9
    edd0:	mov	w4, w3
    edd4:	mov	w2, #0x400                 	// #1024
    edd8:	mov	x3, x6
    eddc:	mov	x5, #0x0                   	// #0
    ede0:	strh	w2, [x3]
    ede4:	add	x5, x5, #0x1
    ede8:	strh	w2, [x3, #480]
    edec:	cmp	x5, x4
    edf0:	add	x3, x3, #0x2
    edf4:	b.ls	ede0 <lzma_lzma_preset@@XZ_5.0+0xefc>  // b.plast
    edf8:	strh	w2, [x0]
    edfc:	add	x0, x0, #0x2
    ee00:	strh	w2, [x0, #22]
    ee04:	add	x6, x6, #0x20
    ee08:	strh	w2, [x0, #46]
    ee0c:	strh	w2, [x0, #70]
    ee10:	cmp	x0, x7
    ee14:	b.ne	edd8 <lzma_lzma_preset@@XZ_5.0+0xef4>  // b.any
    ee18:	mov	x5, #0x70fc                	// #28924
    ee1c:	add	x0, x19, x5
    ee20:	mov	x6, #0x71e0                	// #29152
    ee24:	mov	x5, x0
    ee28:	add	x2, x19, x6
    ee2c:	mov	w3, #0x400                 	// #1024
    ee30:	strh	w3, [x0], #2
    ee34:	cmp	x2, x0
    ee38:	b.ne	ee30 <lzma_lzma_preset@@XZ_5.0+0xf4c>  // b.any
    ee3c:	mov	x4, #0x6efc                	// #28412
    ee40:	add	x3, x19, x4
    ee44:	mov	w4, #0x400                 	// #1024
    ee48:	mov	x0, #0x0                   	// #0
    ee4c:	strh	w4, [x3, x0, lsl #1]
    ee50:	add	x0, x0, #0x1
    ee54:	cmp	x0, #0x40
    ee58:	b.ne	ee4c <lzma_lzma_preset@@XZ_5.0+0xf68>  // b.any
    ee5c:	add	x3, x3, #0x80
    ee60:	cmp	x5, x3
    ee64:	b.ne	ee48 <lzma_lzma_preset@@XZ_5.0+0xf64>  // b.any
    ee68:	mov	x3, #0x7200                	// #29184
    ee6c:	add	x0, x19, x3
    ee70:	mov	w3, #0x400                 	// #1024
    ee74:	strh	w3, [x2], #2
    ee78:	cmp	x0, x2
    ee7c:	b.ne	ee74 <lzma_lzma_preset@@XZ_5.0+0xf90>  // b.any
    ee80:	ldrb	w2, [x19, #2956]
    ee84:	bl	e39c <lzma_lzma_preset@@XZ_5.0+0x4b8>
    ee88:	ldr	w0, [x20, #28]
    ee8c:	mov	w1, #0x1                   	// #1
    ee90:	ldrb	w2, [x19, #2956]
    ee94:	lsl	w1, w1, w0
    ee98:	mov	x0, #0xba48                	// #47688
    ee9c:	add	x0, x19, x0
    eea0:	add	x19, x19, #0x10, lsl #12
    eea4:	bl	e39c <lzma_lzma_preset@@XZ_5.0+0x4b8>
    eea8:	mov	w0, #0x7fffffff            	// #2147483647
    eeac:	str	w0, [x19, #3732]
    eeb0:	mov	x0, #0x7fffffff            	// #2147483647
    eeb4:	str	x0, [x19, #3800]
    eeb8:	mov	w0, #0x0                   	// #0
    eebc:	str	wzr, [x19, #3808]
    eec0:	ldp	x19, x20, [sp, #16]
    eec4:	ldp	x29, x30, [sp], #32
    eec8:	ret
    eecc:	mov	x2, #0x0                   	// #0
    eed0:	strh	w6, [x5, x2, lsl #1]
    eed4:	add	x2, x2, #0x1
    eed8:	cmp	x2, #0x300
    eedc:	b.ne	eed0 <lzma_lzma_preset@@XZ_5.0+0xfec>  // b.any
    eee0:	add	w4, w4, #0x1
    eee4:	add	x5, x5, #0x600
    eee8:	b	edb0 <lzma_lzma_preset@@XZ_5.0+0xecc>
    eeec:	mov	w0, #0x8                   	// #8
    eef0:	b	eec0 <lzma_lzma_preset@@XZ_5.0+0xfdc>
    eef4:	stp	x29, x30, [sp, #-48]!
    eef8:	mov	x29, sp
    eefc:	str	x21, [sp, #32]
    ef00:	mov	x21, x0
    ef04:	ldr	x0, [x0]
    ef08:	stp	x19, x20, [sp, #16]
    ef0c:	mov	x19, x2
    ef10:	mov	x20, x3
    ef14:	cbz	x0, ef44 <lzma_lzma_preset@@XZ_5.0+0x1060>
    ef18:	ldr	w1, [x19, #32]
    ef1c:	ldr	x0, [x21]
    ef20:	cmp	w1, #0x1
    ef24:	b.eq	ef60 <lzma_lzma_preset@@XZ_5.0+0x107c>  // b.none
    ef28:	cmp	w1, #0x2
    ef2c:	b.eq	efd4 <lzma_lzma_preset@@XZ_5.0+0x10f0>  // b.none
    ef30:	mov	w0, #0x8                   	// #8
    ef34:	ldp	x19, x20, [sp, #16]
    ef38:	ldr	x21, [sp, #32]
    ef3c:	ldp	x29, x30, [sp], #48
    ef40:	ret
    ef44:	mov	x0, #0xcee8                	// #52968
    ef48:	movk	x0, #0x3, lsl #16
    ef4c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
    ef50:	str	x0, [x21]
    ef54:	cbnz	x0, ef18 <lzma_lzma_preset@@XZ_5.0+0x1034>
    ef58:	mov	w0, #0x5                   	// #5
    ef5c:	b	ef34 <lzma_lzma_preset@@XZ_5.0+0x1050>
    ef60:	strb	w1, [x0, #2956]
    ef64:	ldr	x2, [x19, #8]
    ef68:	ldr	w1, [x19, #16]
    ef6c:	cbz	x2, f01c <lzma_lzma_preset@@XZ_5.0+0x1138>
    ef70:	cmp	w1, #0x0
    ef74:	cset	w3, ne  // ne = any
    ef78:	strb	w3, [x0, #2957]
    ef7c:	mov	x3, #0x1000                	// #4096
    ef80:	strb	wzr, [x0, #2958]
    ef84:	ldr	x21, [sp, #32]
    ef88:	str	x3, [x20]
    ef8c:	ldr	w3, [x19]
    ef90:	str	x3, [x20, #8]
    ef94:	mov	x3, #0x1001                	// #4097
    ef98:	str	x3, [x20, #16]
    ef9c:	mov	x3, #0x111                 	// #273
    efa0:	str	x3, [x20, #24]
    efa4:	ldr	w3, [x19, #36]
    efa8:	str	x3, [x20, #32]
    efac:	ldr	w3, [x19, #40]
    efb0:	str	w3, [x20, #40]
    efb4:	ldr	w3, [x19, #44]
    efb8:	str	w3, [x20, #44]
    efbc:	str	x2, [x20, #48]
    efc0:	str	w1, [x20, #56]
    efc4:	mov	x1, x19
    efc8:	ldp	x19, x20, [sp, #16]
    efcc:	ldp	x29, x30, [sp], #48
    efd0:	b	ed28 <lzma_lzma_preset@@XZ_5.0+0xe44>
    efd4:	ldr	w2, [x19]
    efd8:	mov	w1, #0x0                   	// #0
    efdc:	mov	w4, #0x1                   	// #1
    efe0:	strb	wzr, [x0, #2956]
    efe4:	lsl	w3, w4, w1
    efe8:	cmp	w3, w2
    efec:	b.cc	f014 <lzma_lzma_preset@@XZ_5.0+0x1130>  // b.lo, b.ul, b.last
    eff0:	add	x2, x0, #0x10, lsl #12
    eff4:	lsl	w1, w1, #1
    eff8:	add	x3, x0, #0x8, lsl #12
    effc:	str	w1, [x2, #3728]
    f000:	ldr	w1, [x19, #36]
    f004:	sub	w1, w1, #0x1
    f008:	str	w1, [x3, #14852]
    f00c:	str	w1, [x2, #588]
    f010:	b	ef64 <lzma_lzma_preset@@XZ_5.0+0x1080>
    f014:	add	w1, w1, #0x1
    f018:	b	efe4 <lzma_lzma_preset@@XZ_5.0+0x1100>
    f01c:	mov	w3, #0x0                   	// #0
    f020:	b	ef78 <lzma_lzma_preset@@XZ_5.0+0x1094>
    f024:	adrp	x4, e000 <lzma_lzma_preset@@XZ_5.0+0x11c>
    f028:	add	x4, x4, #0xd0c
    f02c:	str	x4, [x0, #8]
    f030:	b	eef4 <lzma_lzma_preset@@XZ_5.0+0x1010>
    f034:	adrp	x3, f000 <lzma_lzma_preset@@XZ_5.0+0x111c>
    f038:	add	x3, x3, #0x24
    f03c:	b	c7c4 <lzma_crc64@@XZ_5.0+0x161c>
    f040:	mov	x4, x0
    f044:	stp	x29, x30, [sp, #-80]!
    f048:	mov	x29, sp
    f04c:	bl	e1e0 <lzma_lzma_preset@@XZ_5.0+0x2fc>
    f050:	tst	w0, #0xff
    f054:	b.ne	f064 <lzma_lzma_preset@@XZ_5.0+0x1180>  // b.any
    f058:	mov	x0, #0xffffffffffffffff    	// #-1
    f05c:	ldp	x29, x30, [sp], #80
    f060:	ret
    f064:	mov	x0, #0x1000                	// #4096
    f068:	str	x0, [sp, #16]
    f06c:	ldr	w0, [x4]
    f070:	str	x0, [sp, #24]
    f074:	mov	x0, #0x1001                	// #4097
    f078:	str	x0, [sp, #32]
    f07c:	mov	x0, #0x111                 	// #273
    f080:	str	x0, [sp, #40]
    f084:	ldr	w0, [x4, #36]
    f088:	str	x0, [sp, #48]
    f08c:	ldr	x0, [x4, #40]
    f090:	str	x0, [sp, #56]
    f094:	ldr	x0, [x4, #8]
    f098:	str	x0, [sp, #64]
    f09c:	ldr	w0, [x4, #16]
    f0a0:	str	w0, [sp, #72]
    f0a4:	add	x0, sp, #0x10
    f0a8:	bl	c764 <lzma_crc64@@XZ_5.0+0x15bc>
    f0ac:	cmn	x0, #0x1
    f0b0:	b.eq	f058 <lzma_lzma_preset@@XZ_5.0+0x1174>  // b.none
    f0b4:	add	x0, x0, #0x3c, lsl #12
    f0b8:	add	x0, x0, #0xee8
    f0bc:	b	f05c <lzma_lzma_preset@@XZ_5.0+0x1178>
    f0c0:	mov	x3, x0
    f0c4:	mov	x4, x1
    f0c8:	stp	x29, x30, [sp, #-16]!
    f0cc:	mov	x29, sp
    f0d0:	bl	e088 <lzma_lzma_preset@@XZ_5.0+0x1a4>
    f0d4:	tst	w0, #0xff
    f0d8:	b.eq	f104 <lzma_lzma_preset@@XZ_5.0+0x1220>  // b.none
    f0dc:	ldp	w0, w2, [x3, #24]
    f0e0:	add	w2, w2, w2, lsl #2
    f0e4:	add	w2, w2, w0
    f0e8:	ldr	w0, [x3, #20]
    f0ec:	add	w2, w2, w2, lsl #3
    f0f0:	add	w2, w2, w0
    f0f4:	mov	w0, #0x0                   	// #0
    f0f8:	strb	w2, [x4]
    f0fc:	ldp	x29, x30, [sp], #16
    f100:	ret
    f104:	mov	w0, #0x1                   	// #1
    f108:	b	f0fc <lzma_lzma_preset@@XZ_5.0+0x1218>
    f10c:	mov	x6, x0
    f110:	mov	x5, x1
    f114:	stp	x29, x30, [sp, #-16]!
    f118:	mov	x29, sp
    f11c:	bl	f0c0 <lzma_lzma_preset@@XZ_5.0+0x11dc>
    f120:	tst	w0, #0xff
    f124:	b.ne	f13c <lzma_lzma_preset@@XZ_5.0+0x1258>  // b.any
    f128:	ldr	w0, [x6]
    f12c:	stur	w0, [x5, #1]
    f130:	mov	w0, #0x0                   	// #0
    f134:	ldp	x29, x30, [sp], #16
    f138:	ret
    f13c:	mov	w0, #0xb                   	// #11
    f140:	b	f134 <lzma_lzma_preset@@XZ_5.0+0x1250>

000000000000f144 <lzma_mode_is_supported@@XZ_5.0>:
    f144:	sub	w0, w0, #0x1
    f148:	cmp	w0, #0x1
    f14c:	cset	w0, ls  // ls = plast
    f150:	ret
    f154:	cbz	w1, f18c <lzma_mode_is_supported@@XZ_5.0+0x48>
    f158:	stp	x29, x30, [sp, #-32]!
    f15c:	mov	x29, sp
    f160:	ldr	x2, [x0, #56]
    f164:	stp	x19, x20, [sp, #16]
    f168:	mov	x19, x0
    f16c:	mov	w20, w1
    f170:	blr	x2
    f174:	ldr	w1, [x19, #28]
    f178:	add	w20, w1, w20
    f17c:	str	w20, [x19, #28]
    f180:	ldp	x19, x20, [sp, #16]
    f184:	ldp	x29, x30, [sp], #32
    f188:	ret
    f18c:	ret
    f190:	stp	x29, x30, [sp, #-112]!
    f194:	mov	x29, sp
    f198:	stp	x19, x20, [sp, #16]
    f19c:	mov	x20, x0
    f1a0:	ldr	w0, [x1, #28]
    f1a4:	stp	x21, x22, [sp, #32]
    f1a8:	mov	x21, x1
    f1ac:	ldr	w22, [x1, #96]
    f1b0:	stp	x23, x24, [sp, #48]
    f1b4:	mov	x23, x2
    f1b8:	mov	x24, x3
    f1bc:	stp	x25, x26, [sp, #64]
    f1c0:	str	x27, [sp, #80]
    f1c4:	cbnz	w0, f234 <lzma_mode_is_supported@@XZ_5.0+0xf0>
    f1c8:	add	x2, x20, #0x2f4
    f1cc:	add	x1, sp, #0x6c
    f1d0:	mov	x0, x21
    f1d4:	bl	cddc <lzma_mf_is_supported@@XZ_5.0+0x420>
    f1d8:	mov	w19, w0
    f1dc:	ldr	x27, [x21]
    f1e0:	ldr	w0, [x21, #24]
    f1e4:	ldr	w4, [x21, #36]
    f1e8:	add	w4, w4, #0x1
    f1ec:	add	x27, x27, w0, uxtw
    f1f0:	sub	w4, w4, w0
    f1f4:	sub	x6, x27, #0x1
    f1f8:	cmp	w4, #0x110
    f1fc:	b.hi	f28c <lzma_mode_is_supported@@XZ_5.0+0x148>  // b.pmore
    f200:	cmp	w4, #0x1
    f204:	b.hi	f290 <lzma_mode_is_supported@@XZ_5.0+0x14c>  // b.pmore
    f208:	mov	w0, #0xffffffff            	// #-1
    f20c:	str	w0, [x23]
    f210:	mov	w0, #0x1                   	// #1
    f214:	str	w0, [x24]
    f218:	ldp	x19, x20, [sp, #16]
    f21c:	ldp	x21, x22, [sp, #32]
    f220:	ldp	x23, x24, [sp, #48]
    f224:	ldp	x25, x26, [sp, #64]
    f228:	ldr	x27, [sp, #80]
    f22c:	ldp	x29, x30, [sp], #112
    f230:	ret
    f234:	ldr	w0, [x20, #2948]
    f238:	ldr	w19, [x20, #2952]
    f23c:	str	w0, [sp, #108]
    f240:	b	f1dc <lzma_mode_is_supported@@XZ_5.0+0x98>
    f244:	cmp	w1, w0
    f248:	b.ls	f254 <lzma_mode_is_supported@@XZ_5.0+0x110>  // b.plast
    f24c:	mov	w7, w8
    f250:	mov	w0, w1
    f254:	add	x3, x3, #0x1
    f258:	cmp	x3, #0x4
    f25c:	b.ne	f2a4 <lzma_mode_is_supported@@XZ_5.0+0x160>  // b.any
    f260:	cmp	w19, w22
    f264:	b.cc	f318 <lzma_mode_is_supported@@XZ_5.0+0x1d4>  // b.lo, b.ul, b.last
    f268:	ldr	w0, [sp, #108]
    f26c:	sub	w1, w19, #0x1
    f270:	str	w19, [x24]
    f274:	sub	w0, w0, #0x1
    f278:	add	x20, x20, x0, lsl #3
    f27c:	ldr	w0, [x20, #760]
    f280:	add	w0, w0, #0x4
    f284:	str	w0, [x23]
    f288:	b	f30c <lzma_mode_is_supported@@XZ_5.0+0x1c8>
    f28c:	mov	w4, #0x111                 	// #273
    f290:	ldurb	w9, [x27, #-1]
    f294:	add	x26, x20, #0x2e4
    f298:	mov	x3, #0x0                   	// #0
    f29c:	mov	w7, #0x0                   	// #0
    f2a0:	mov	w0, #0x0                   	// #0
    f2a4:	ldr	w2, [x26, x3, lsl #2]
    f2a8:	mov	w8, w3
    f2ac:	mvn	x2, x2
    f2b0:	add	x1, x6, x2
    f2b4:	ldrb	w2, [x6, x2]
    f2b8:	cmp	w2, w9
    f2bc:	b.ne	f254 <lzma_mode_is_supported@@XZ_5.0+0x110>  // b.any
    f2c0:	ldrb	w5, [x27]
    f2c4:	ldrb	w2, [x1, #1]
    f2c8:	cmp	w5, w2
    f2cc:	b.ne	f254 <lzma_mode_is_supported@@XZ_5.0+0x110>  // b.any
    f2d0:	sub	x5, x1, #0x1
    f2d4:	mov	x2, #0x2                   	// #2
    f2d8:	mov	w1, w2
    f2dc:	cmp	w4, w2
    f2e0:	b.ls	f2f8 <lzma_mode_is_supported@@XZ_5.0+0x1b4>  // b.plast
    f2e4:	ldrb	w10, [x6, x2]
    f2e8:	add	x2, x2, #0x1
    f2ec:	ldrb	w11, [x5, x2]
    f2f0:	cmp	w11, w10
    f2f4:	b.eq	f2d8 <lzma_mode_is_supported@@XZ_5.0+0x194>  // b.none
    f2f8:	cmp	w22, w1
    f2fc:	b.hi	f244 <lzma_mode_is_supported@@XZ_5.0+0x100>  // b.pmore
    f300:	str	w1, [x24]
    f304:	sub	w1, w1, #0x1
    f308:	str	w8, [x23]
    f30c:	mov	x0, x21
    f310:	bl	f154 <lzma_mode_is_supported@@XZ_5.0+0x10>
    f314:	b	f218 <lzma_mode_is_supported@@XZ_5.0+0xd4>
    f318:	cmp	w19, #0x1
    f31c:	b.ls	f3d8 <lzma_mode_is_supported@@XZ_5.0+0x294>  // b.plast
    f320:	ldr	w1, [sp, #108]
    f324:	sub	w2, w1, #0x1
    f328:	add	x2, x20, x2, lsl #3
    f32c:	ldr	w22, [x2, #760]
    f330:	mov	w2, #0x0                   	// #0
    f334:	cmp	w1, #0x1
    f338:	b.ls	f364 <lzma_mode_is_supported@@XZ_5.0+0x220>  // b.plast
    f33c:	sub	w3, w1, #0x2
    f340:	add	x3, x20, x3, lsl #3
    f344:	ldr	w5, [x3, #756]
    f348:	add	w6, w5, #0x1
    f34c:	cmp	w6, w19
    f350:	b.ne	f364 <lzma_mode_is_supported@@XZ_5.0+0x220>  // b.any
    f354:	ldr	w3, [x3, #760]
    f358:	sub	w6, w1, #0x1
    f35c:	cmp	w3, w22, lsr #7
    f360:	b.cc	f3c4 <lzma_mode_is_supported@@XZ_5.0+0x280>  // b.lo, b.ul, b.last
    f364:	cbz	w2, f36c <lzma_mode_is_supported@@XZ_5.0+0x228>
    f368:	str	w1, [sp, #108]
    f36c:	cmp	w22, #0x7f
    f370:	ccmp	w19, #0x2, #0x0, hi  // hi = pmore
    f374:	b.eq	f4b4 <lzma_mode_is_supported@@XZ_5.0+0x370>  // b.none
    f378:	cmp	w0, #0x1
    f37c:	b.ls	f3e0 <lzma_mode_is_supported@@XZ_5.0+0x29c>  // b.plast
    f380:	add	w1, w0, #0x1
    f384:	cmp	w1, w19
    f388:	b.cs	f3b4 <lzma_mode_is_supported@@XZ_5.0+0x270>  // b.hs, b.nlast
    f38c:	add	w1, w0, #0x2
    f390:	cmp	w1, w19
    f394:	b.cc	f3a0 <lzma_mode_is_supported@@XZ_5.0+0x25c>  // b.lo, b.ul, b.last
    f398:	cmp	w22, #0x200
    f39c:	b.hi	f3b4 <lzma_mode_is_supported@@XZ_5.0+0x270>  // b.pmore
    f3a0:	add	w1, w0, #0x3
    f3a4:	cmp	w1, w19
    f3a8:	b.cc	f3e0 <lzma_mode_is_supported@@XZ_5.0+0x29c>  // b.lo, b.ul, b.last
    f3ac:	cmp	w22, #0x8, lsl #12
    f3b0:	b.ls	f3e0 <lzma_mode_is_supported@@XZ_5.0+0x29c>  // b.plast
    f3b4:	sub	w1, w0, #0x1
    f3b8:	str	w7, [x23]
    f3bc:	str	w0, [x24]
    f3c0:	b	f30c <lzma_mode_is_supported@@XZ_5.0+0x1c8>
    f3c4:	mov	w1, w6
    f3c8:	mov	w22, w3
    f3cc:	mov	w19, w5
    f3d0:	mov	w2, #0x1                   	// #1
    f3d4:	b	f334 <lzma_mode_is_supported@@XZ_5.0+0x1f0>
    f3d8:	mov	w22, #0x0                   	// #0
    f3dc:	b	f378 <lzma_mode_is_supported@@XZ_5.0+0x234>
    f3e0:	cmp	w19, #0x1
    f3e4:	ccmp	w4, #0x2, #0x0, hi  // hi = pmore
    f3e8:	b.ls	f208 <lzma_mode_is_supported@@XZ_5.0+0xc4>  // b.plast
    f3ec:	add	x25, x20, #0x2f4
    f3f0:	add	x1, x20, #0xb84
    f3f4:	mov	x2, x25
    f3f8:	mov	x0, x21
    f3fc:	bl	cddc <lzma_mf_is_supported@@XZ_5.0+0x420>
    f400:	str	w0, [x20, #2952]
    f404:	cmp	w0, #0x1
    f408:	b.ls	f45c <lzma_mode_is_supported@@XZ_5.0+0x318>  // b.plast
    f40c:	ldr	w1, [x20, #2948]
    f410:	cmp	w0, w19
    f414:	sub	w1, w1, #0x1
    f418:	add	x20, x20, x1, lsl #3
    f41c:	ldr	w1, [x20, #760]
    f420:	b.cc	f42c <lzma_mode_is_supported@@XZ_5.0+0x2e8>  // b.lo, b.ul, b.last
    f424:	cmp	w22, w1
    f428:	b.hi	f208 <lzma_mode_is_supported@@XZ_5.0+0xc4>  // b.pmore
    f42c:	add	w2, w19, #0x1
    f430:	cmp	w0, w2
    f434:	b.ne	f4ac <lzma_mode_is_supported@@XZ_5.0+0x368>  // b.any
    f438:	cmp	w22, w1, lsr #7
    f43c:	b.cs	f208 <lzma_mode_is_supported@@XZ_5.0+0xc4>  // b.hs, b.nlast
    f440:	add	w0, w0, #0x1
    f444:	cmp	w0, w19
    f448:	b.cc	f45c <lzma_mode_is_supported@@XZ_5.0+0x318>  // b.lo, b.ul, b.last
    f44c:	cmp	w19, #0x2
    f450:	b.eq	f45c <lzma_mode_is_supported@@XZ_5.0+0x318>  // b.none
    f454:	cmp	w1, w22, lsr #7
    f458:	b.cc	f208 <lzma_mode_is_supported@@XZ_5.0+0xc4>  // b.lo, b.ul, b.last
    f45c:	sub	w2, w19, #0x1
    f460:	mov	x20, x26
    f464:	cmp	w2, #0x2
    f468:	mov	w26, #0x2                   	// #2
    f46c:	csel	w26, w2, w26, cs  // cs = hs, nlast
    f470:	ldr	w1, [x20]
    f474:	mov	x2, x26
    f478:	mov	x0, x27
    f47c:	mvn	x1, x1
    f480:	add	x1, x27, x1
    f484:	bl	3330 <memcmp@plt>
    f488:	cbz	w0, f208 <lzma_mode_is_supported@@XZ_5.0+0xc4>
    f48c:	add	x20, x20, #0x4
    f490:	cmp	x25, x20
    f494:	b.ne	f470 <lzma_mode_is_supported@@XZ_5.0+0x32c>  // b.any
    f498:	add	w22, w22, #0x4
    f49c:	sub	w1, w19, #0x2
    f4a0:	str	w22, [x23]
    f4a4:	str	w19, [x24]
    f4a8:	b	f30c <lzma_mode_is_supported@@XZ_5.0+0x1c8>
    f4ac:	b.ls	f440 <lzma_mode_is_supported@@XZ_5.0+0x2fc>  // b.plast
    f4b0:	b	f208 <lzma_mode_is_supported@@XZ_5.0+0xc4>
    f4b4:	cmp	w0, #0x1
    f4b8:	b.hi	f3b4 <lzma_mode_is_supported@@XZ_5.0+0x270>  // b.pmore
    f4bc:	b	f208 <lzma_mode_is_supported@@XZ_5.0+0xc4>
    f4c0:	mov	w1, #0x7ffff               	// #524287
    f4c4:	cmp	w0, w1
    f4c8:	adrp	x1, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    f4cc:	ldr	x1, [x1, #4008]
    f4d0:	b.hi	f4e4 <lzma_mode_is_supported@@XZ_5.0+0x3a0>  // b.pmore
    f4d4:	lsr	w0, w0, #6
    f4d8:	ldrb	w0, [x1, x0]
    f4dc:	add	w0, w0, #0xc
    f4e0:	ret
    f4e4:	tbnz	w0, #31, f4f8 <lzma_mode_is_supported@@XZ_5.0+0x3b4>
    f4e8:	lsr	w0, w0, #18
    f4ec:	ldrb	w0, [x1, x0]
    f4f0:	add	w0, w0, #0x24
    f4f4:	b	f4e0 <lzma_mode_is_supported@@XZ_5.0+0x39c>
    f4f8:	lsr	w0, w0, #30
    f4fc:	ldrb	w0, [x1, x0]
    f500:	add	w0, w0, #0x3c
    f504:	b	f4e0 <lzma_mode_is_supported@@XZ_5.0+0x39c>
    f508:	cbz	w1, f540 <lzma_mode_is_supported@@XZ_5.0+0x3fc>
    f50c:	stp	x29, x30, [sp, #-32]!
    f510:	mov	x29, sp
    f514:	ldr	x2, [x0, #56]
    f518:	stp	x19, x20, [sp, #16]
    f51c:	mov	x19, x0
    f520:	mov	w20, w1
    f524:	blr	x2
    f528:	ldr	w1, [x19, #28]
    f52c:	add	w20, w1, w20
    f530:	str	w20, [x19, #28]
    f534:	ldp	x19, x20, [sp, #16]
    f538:	ldp	x29, x30, [sp], #32
    f53c:	ret
    f540:	ret
    f544:	mov	w6, w2
    f548:	add	x2, x0, w2, uxtw #1
    f54c:	add	x2, x2, #0x6, lsl #12
    f550:	adrp	x4, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    f554:	ldrh	w5, [x2, #3380]
    f558:	lsr	w5, w5, #4
    f55c:	cbnz	w1, f594 <lzma_mode_is_supported@@XZ_5.0+0x450>
    f560:	lsl	x6, x6, #4
    f564:	mov	x1, #0x36b8                	// #14008
    f568:	add	x3, x6, w3, uxtw
    f56c:	add	x3, x3, x1
    f570:	ldr	x4, [x4, #3960]
    f574:	add	x3, x0, x3, lsl #1
    f578:	ldrh	w0, [x3, #12]
    f57c:	ldrb	w1, [x4, w5, sxtw]
    f580:	ubfx	x0, x0, #4, #12
    f584:	eor	x0, x0, #0x7f
    f588:	ldrb	w0, [x4, x0]
    f58c:	add	w0, w0, w1
    f590:	ret
    f594:	ldr	x3, [x4, #3960]
    f598:	eor	w5, w5, #0x7f
    f59c:	ldrh	w4, [x2, #3404]
    f5a0:	cmp	w1, #0x1
    f5a4:	ldrb	w5, [x3, x5]
    f5a8:	lsr	w4, w4, #4
    f5ac:	b.ne	f5bc <lzma_mode_is_supported@@XZ_5.0+0x478>  // b.any
    f5b0:	ldrb	w0, [x3, w4, sxtw]
    f5b4:	add	w0, w0, w5
    f5b8:	b	f590 <lzma_mode_is_supported@@XZ_5.0+0x44c>
    f5bc:	eor	w4, w4, #0x7f
    f5c0:	ldrb	w0, [x3, x4]
    f5c4:	mov	w4, #0x2                   	// #2
    f5c8:	sub	w1, w4, w1
    f5cc:	add	w5, w0, w5
    f5d0:	ldrh	w0, [x2, #3428]
    f5d4:	and	w1, w1, #0x7ff
    f5d8:	eor	w1, w1, w0
    f5dc:	ubfx	x1, x1, #4, #12
    f5e0:	ldrb	w0, [x3, x1]
    f5e4:	b	f5b4 <lzma_mode_is_supported@@XZ_5.0+0x470>
    f5e8:	adrp	x6, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    f5ec:	mov	x8, x0
    f5f0:	mov	w5, #0x1                   	// #1
    f5f4:	mov	w0, #0x0                   	// #0
    f5f8:	ldr	x6, [x6, #3960]
    f5fc:	and	w4, w2, #0x1
    f600:	ldrh	w3, [x8, w5, uxtw #1]
    f604:	neg	w7, w4
    f608:	and	w7, w7, #0x7ff
    f60c:	lsr	w2, w2, #1
    f610:	eor	w3, w3, w7
    f614:	add	w5, w4, w5, lsl #1
    f618:	subs	w1, w1, #0x1
    f61c:	ubfx	x3, x3, #4, #12
    f620:	ldrb	w3, [x6, x3]
    f624:	add	w0, w0, w3
    f628:	b.ne	f5fc <lzma_mode_is_supported@@XZ_5.0+0x4b8>  // b.any
    f62c:	ret
    f630:	ldr	w7, [x0, #2964]
    f634:	add	w5, w5, #0x100
    f638:	ldr	w6, [x0, #2968]
    f63c:	tst	w3, #0xff
    f640:	and	w1, w1, w6
    f644:	mov	w6, #0x8                   	// #8
    f648:	sub	w6, w6, w7
    f64c:	lsl	w1, w1, w7
    f650:	lsr	w2, w2, w6
    f654:	add	w1, w1, w2
    f658:	mov	w2, #0x600                 	// #1536
    f65c:	umaddl	x1, w1, w2, x0
    f660:	adrp	x2, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    f664:	add	x1, x1, #0xb9c
    f668:	b.ne	f6a8 <lzma_mode_is_supported@@XZ_5.0+0x564>  // b.any
    f66c:	ldr	x2, [x2, #3960]
    f670:	mov	w0, #0x0                   	// #0
    f674:	and	w4, w5, #0x1
    f678:	lsr	w5, w5, #1
    f67c:	neg	w4, w4
    f680:	cmp	w5, #0x1
    f684:	lsl	w3, w5, #1
    f688:	and	w4, w4, #0x7ff
    f68c:	ldrh	w3, [x1, x3]
    f690:	eor	w3, w3, w4
    f694:	ubfx	x3, x3, #4, #12
    f698:	ldrb	w3, [x2, x3]
    f69c:	add	w0, w0, w3
    f6a0:	b.ne	f674 <lzma_mode_is_supported@@XZ_5.0+0x530>  // b.any
    f6a4:	ret
    f6a8:	ldr	x2, [x2, #3960]
    f6ac:	mov	w6, #0x100                 	// #256
    f6b0:	mov	w0, #0x0                   	// #0
    f6b4:	mov	w8, #0xffff                	// #65535
    f6b8:	lsl	w4, w4, #1
    f6bc:	sbfx	x7, x5, #7, #1
    f6c0:	and	w3, w6, w4
    f6c4:	and	w7, w7, #0x7ff
    f6c8:	add	w3, w3, w5, lsr #8
    f6cc:	lsl	w5, w5, #1
    f6d0:	add	w3, w3, w6
    f6d4:	cmp	w5, w8
    f6d8:	ldrh	w3, [x1, x3, lsl #1]
    f6dc:	eor	w3, w3, w7
    f6e0:	ubfx	x3, x3, #4, #12
    f6e4:	ldrb	w3, [x2, x3]
    f6e8:	add	w0, w0, w3
    f6ec:	eon	w3, w4, w5
    f6f0:	and	w6, w6, w3
    f6f4:	b.ls	f6b8 <lzma_mode_is_supported@@XZ_5.0+0x574>  // b.plast
    f6f8:	b	f6a4 <lzma_mode_is_supported@@XZ_5.0+0x560>
    f6fc:	stp	x29, x30, [sp, #-256]!
    f700:	mov	x29, sp
    f704:	stp	x21, x22, [sp, #32]
    f708:	add	x21, x0, #0x10, lsl #12
    f70c:	mov	x22, x1
    f710:	stp	x19, x20, [sp, #16]
    f714:	mov	x19, x0
    f718:	ldr	w1, [x21, #3808]
    f71c:	ldr	w0, [x21, #3804]
    f720:	stp	x23, x24, [sp, #48]
    f724:	cmp	w0, w1
    f728:	stp	x25, x26, [sp, #64]
    f72c:	stp	x27, x28, [sp, #80]
    f730:	stp	x2, x3, [sp, #112]
    f734:	str	w4, [sp, #144]
    f738:	b.eq	f784 <lzma_mode_is_supported@@XZ_5.0+0x640>  // b.none
    f73c:	mov	w0, w1
    f740:	mov	x2, #0x2c                  	// #44
    f744:	madd	x19, x0, x2, x19
    f748:	ldr	x2, [sp, #112]
    f74c:	add	x19, x19, #0x10, lsl #12
    f750:	ldr	w0, [x19, #3832]
    f754:	sub	w1, w0, w1
    f758:	str	w1, [x3]
    f75c:	ldr	w1, [x19, #3836]
    f760:	str	w1, [x2]
    f764:	str	w0, [x21, #3808]
    f768:	ldp	x19, x20, [sp, #16]
    f76c:	ldp	x21, x22, [sp, #32]
    f770:	ldp	x23, x24, [sp, #48]
    f774:	ldp	x25, x26, [sp, #64]
    f778:	ldp	x27, x28, [sp, #80]
    f77c:	ldp	x29, x30, [sp], #256
    f780:	ret
    f784:	ldr	w10, [x22, #28]
    f788:	cbnz	w10, f8e8 <lzma_mode_is_supported@@XZ_5.0+0x7a4>
    f78c:	ldr	w0, [x21, #3732]
    f790:	cmp	w0, #0x7f
    f794:	b.ls	f8a4 <lzma_mode_is_supported@@XZ_5.0+0x760>  // b.plast
    f798:	adrp	x7, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    f79c:	add	x1, x19, #0x10, lsl #12
    f7a0:	add	x0, x19, #0x10, lsl #12
    f7a4:	add	x1, x1, #0x690
    f7a8:	ldr	x7, [x7, #3960]
    f7ac:	mov	x20, #0x6efc                	// #28412
    f7b0:	add	x0, x0, #0x290
    f7b4:	add	x6, x19, x20
    f7b8:	mov	x9, x1
    f7bc:	mov	w2, #0x0                   	// #0
    f7c0:	ldr	w3, [x21, #3728]
    f7c4:	cmp	w2, w3
    f7c8:	b.cc	f940 <lzma_mode_is_supported@@XZ_5.0+0x7fc>  // b.lo, b.ul, b.last
    f7cc:	mov	w2, #0xe                   	// #14
    f7d0:	ldr	w3, [x21, #3728]
    f7d4:	cmp	w2, w3
    f7d8:	b.cc	f988 <lzma_mode_is_supported@@XZ_5.0+0x844>  // b.lo, b.ul, b.last
    f7dc:	ldr	w2, [x0]
    f7e0:	add	x0, x0, #0x100
    f7e4:	str	w2, [x1]
    f7e8:	add	x6, x6, #0x80
    f7ec:	ldur	w2, [x0, #-252]
    f7f0:	str	w2, [x1, #4]
    f7f4:	ldur	w2, [x0, #-248]
    f7f8:	str	w2, [x1, #8]
    f7fc:	ldur	w2, [x0, #-244]
    f800:	cmp	x9, x0
    f804:	str	w2, [x1, #12]
    f808:	add	x1, x1, #0x200
    f80c:	b.ne	f7bc <lzma_mode_is_supported@@XZ_5.0+0x678>  // b.any
    f810:	adrp	x13, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    f814:	add	x12, x19, #0x10, lsl #12
    f818:	mov	x18, #0x70fc                	// #28924
    f81c:	mov	x15, #0x290                 	// #656
    f820:	ldr	x13, [x13, #4008]
    f824:	add	x12, x12, #0x6a0
    f828:	add	x14, x19, x18
    f82c:	mov	x11, #0x4                   	// #4
    f830:	movk	x15, #0x1, lsl #16
    f834:	ldrb	w9, [x11, x13]
    f838:	and	w0, w9, #0x1
    f83c:	lsr	w1, w9, #1
    f840:	orr	w0, w0, #0x2
    f844:	sub	w1, w1, #0x1
    f848:	lsl	w2, w0, w1
    f84c:	sub	w2, w11, w2
    f850:	lsl	w0, w0, w1
    f854:	sub	x0, x0, w9, uxtb
    f858:	add	x0, x14, x0, lsl #1
    f85c:	sub	x0, x0, #0x2
    f860:	bl	f5e8 <lzma_mode_is_supported@@XZ_5.0+0x4a4>
    f864:	add	x9, x15, w9, uxtb #2
    f868:	mov	x1, #0x0                   	// #0
    f86c:	add	x9, x19, x9
    f870:	lsl	x2, x1, #8
    f874:	lsl	x3, x1, #9
    f878:	add	x1, x1, #0x1
    f87c:	cmp	x1, #0x4
    f880:	ldr	w2, [x9, x2]
    f884:	add	w2, w2, w0
    f888:	str	w2, [x12, x3]
    f88c:	b.ne	f870 <lzma_mode_is_supported@@XZ_5.0+0x72c>  // b.any
    f890:	add	x11, x11, #0x1
    f894:	add	x12, x12, #0x4
    f898:	cmp	x11, #0x80
    f89c:	b.ne	f834 <lzma_mode_is_supported@@XZ_5.0+0x6f0>  // b.any
    f8a0:	str	wzr, [x21, #3732]
    f8a4:	ldr	w0, [x21, #3800]
    f8a8:	cmp	w0, #0xf
    f8ac:	b.ls	f8e8 <lzma_mode_is_supported@@XZ_5.0+0x7a4>  // b.plast
    f8b0:	add	x11, x19, #0x10, lsl #12
    f8b4:	mov	x17, #0x71e0                	// #29152
    f8b8:	add	x11, x11, #0xe98
    f8bc:	add	x12, x19, x17
    f8c0:	mov	x9, #0x0                   	// #0
    f8c4:	mov	w2, w9
    f8c8:	mov	x0, x12
    f8cc:	mov	w1, #0x4                   	// #4
    f8d0:	bl	f5e8 <lzma_mode_is_supported@@XZ_5.0+0x4a4>
    f8d4:	str	w0, [x11, x9, lsl #2]
    f8d8:	add	x9, x9, #0x1
    f8dc:	cmp	x9, #0x10
    f8e0:	b.ne	f8c4 <lzma_mode_is_supported@@XZ_5.0+0x780>  // b.any
    f8e4:	str	wzr, [x21, #3800]
    f8e8:	ldr	w23, [x22, #96]
    f8ec:	cbnz	w10, f9a8 <lzma_mode_is_supported@@XZ_5.0+0x864>
    f8f0:	add	x2, x19, #0x2f4
    f8f4:	add	x1, sp, #0xec
    f8f8:	mov	x0, x22
    f8fc:	bl	cddc <lzma_mf_is_supported@@XZ_5.0+0x420>
    f900:	mov	w9, w0
    f904:	ldr	w0, [x22, #36]
    f908:	ldr	w6, [x22, #24]
    f90c:	add	w0, w0, #0x1
    f910:	sub	w0, w0, w6
    f914:	cmp	w0, #0x110
    f918:	b.hi	f9b8 <lzma_mode_is_supported@@XZ_5.0+0x874>  // b.pmore
    f91c:	cmp	w0, #0x1
    f920:	b.hi	f9bc <lzma_mode_is_supported@@XZ_5.0+0x878>  // b.pmore
    f924:	mov	w0, #0xffffffff            	// #-1
    f928:	ldr	x1, [sp, #112]
    f92c:	str	w0, [x1]
    f930:	mov	w0, #0x1                   	// #1
    f934:	ldr	x1, [sp, #120]
    f938:	str	w0, [x1]
    f93c:	b	f768 <lzma_mode_is_supported@@XZ_5.0+0x624>
    f940:	add	x11, x0, w2, uxtw #2
    f944:	add	w3, w2, #0x40
    f948:	mov	w8, #0x0                   	// #0
    f94c:	and	w5, w3, #0x1
    f950:	lsr	w3, w3, #1
    f954:	neg	w5, w5
    f958:	cmp	w3, #0x1
    f95c:	lsl	w4, w3, #1
    f960:	and	w5, w5, #0x7ff
    f964:	ldrh	w4, [x6, x4]
    f968:	eor	w4, w4, w5
    f96c:	ubfx	x4, x4, #4, #12
    f970:	ldrb	w4, [x7, x4]
    f974:	add	w8, w8, w4
    f978:	b.ne	f94c <lzma_mode_is_supported@@XZ_5.0+0x808>  // b.any
    f97c:	add	w2, w2, #0x1
    f980:	str	w8, [x11]
    f984:	b	f7c0 <lzma_mode_is_supported@@XZ_5.0+0x67c>
    f988:	ubfiz	x4, x2, #2, #32
    f98c:	lsr	w3, w2, #1
    f990:	sub	w3, w3, #0x5
    f994:	add	w2, w2, #0x1
    f998:	ldr	w5, [x0, x4]
    f99c:	add	w3, w5, w3, lsl #4
    f9a0:	str	w3, [x0, x4]
    f9a4:	b	f7d0 <lzma_mode_is_supported@@XZ_5.0+0x68c>
    f9a8:	ldr	w0, [x19, #2948]
    f9ac:	ldr	w9, [x19, #2952]
    f9b0:	str	w0, [sp, #236]
    f9b4:	b	f904 <lzma_mode_is_supported@@XZ_5.0+0x7c0>
    f9b8:	mov	w0, #0x111                 	// #273
    f9bc:	ldr	x1, [x22]
    f9c0:	add	x14, x19, #0x2e4
    f9c4:	add	x4, sp, #0xf0
    f9c8:	mov	w5, #0x0                   	// #0
    f9cc:	add	x6, x1, w6, uxtw
    f9d0:	mov	x1, #0x0                   	// #0
    f9d4:	sub	x7, x6, #0x1
    f9d8:	ldurb	w26, [x6, #-1]
    f9dc:	ldr	w2, [x14, x1, lsl #2]
    f9e0:	mov	w10, w1
    f9e4:	mvn	x2, x2
    f9e8:	add	x3, x7, x2
    f9ec:	ldrb	w2, [x7, x2]
    f9f0:	cmp	w2, w26
    f9f4:	b.ne	fa08 <lzma_mode_is_supported@@XZ_5.0+0x8c4>  // b.any
    f9f8:	ldrb	w8, [x6]
    f9fc:	ldrb	w2, [x3, #1]
    fa00:	cmp	w8, w2
    fa04:	b.eq	fa48 <lzma_mode_is_supported@@XZ_5.0+0x904>  // b.none
    fa08:	str	wzr, [x4, x1, lsl #2]
    fa0c:	add	x1, x1, #0x1
    fa10:	cmp	x1, #0x4
    fa14:	b.ne	f9dc <lzma_mode_is_supported@@XZ_5.0+0x898>  // b.any
    fa18:	add	x15, sp, #0xf0
    fa1c:	ldr	w20, [x15, w5, uxtw #2]
    fa20:	cmp	w23, w20
    fa24:	b.hi	fa84 <lzma_mode_is_supported@@XZ_5.0+0x940>  // b.pmore
    fa28:	ldr	x0, [sp, #112]
    fa2c:	sub	w1, w20, #0x1
    fa30:	str	w5, [x0]
    fa34:	ldr	x0, [sp, #120]
    fa38:	str	w20, [x0]
    fa3c:	mov	x0, x22
    fa40:	bl	f508 <lzma_mode_is_supported@@XZ_5.0+0x3c4>
    fa44:	b	f768 <lzma_mode_is_supported@@XZ_5.0+0x624>
    fa48:	sub	x3, x3, #0x1
    fa4c:	mov	x2, #0x2                   	// #2
    fa50:	mov	w8, w2
    fa54:	cmp	w0, w2
    fa58:	b.ls	fa70 <lzma_mode_is_supported@@XZ_5.0+0x92c>  // b.plast
    fa5c:	ldrb	w11, [x7, x2]
    fa60:	add	x2, x2, #0x1
    fa64:	ldrb	w12, [x3, x2]
    fa68:	cmp	w12, w11
    fa6c:	b.eq	fa50 <lzma_mode_is_supported@@XZ_5.0+0x90c>  // b.none
    fa70:	str	w8, [x4, x1, lsl #2]
    fa74:	ldr	w2, [x4, w5, uxtw #2]
    fa78:	cmp	w8, w2
    fa7c:	csel	w5, w5, w10, ls  // ls = plast
    fa80:	b	fa0c <lzma_mode_is_supported@@XZ_5.0+0x8c8>
    fa84:	cmp	w23, w9
    fa88:	b.hi	fab8 <lzma_mode_is_supported@@XZ_5.0+0x974>  // b.pmore
    fa8c:	ldr	w0, [sp, #236]
    fa90:	ldr	x1, [sp, #112]
    fa94:	sub	w0, w0, #0x1
    fa98:	add	x19, x19, x0, lsl #3
    fa9c:	ldr	w0, [x19, #760]
    faa0:	add	w0, w0, #0x4
    faa4:	str	w0, [x1]
    faa8:	ldr	x0, [sp, #120]
    faac:	sub	w1, w9, #0x1
    fab0:	str	w9, [x0]
    fab4:	b	fa3c <lzma_mode_is_supported@@XZ_5.0+0x8f8>
    fab8:	ldr	w25, [x19, #740]
    fabc:	cmp	w9, #0x1
    fac0:	mov	w0, w25
    fac4:	mvn	x0, x0
    fac8:	ldrb	w27, [x7, x0]
    facc:	ccmp	w26, w27, #0x4, ls  // ls = plast
    fad0:	b.eq	fadc <lzma_mode_is_supported@@XZ_5.0+0x998>  // b.none
    fad4:	cmp	w20, #0x1
    fad8:	b.ls	f924 <lzma_mode_is_supported@@XZ_5.0+0x7e0>  // b.plast
    fadc:	ldr	w11, [x19, #736]
    fae0:	mov	w4, w27
    fae4:	ldr	w10, [x19, #2960]
    fae8:	mov	w5, w26
    faec:	ldr	w0, [sp, #144]
    faf0:	mov	w13, w11
    faf4:	ubfiz	x24, x11, #4, #32
    faf8:	str	w11, [x21, #3812]
    fafc:	and	w18, w0, w10
    fb00:	and	w10, w0, w10
    fb04:	add	x24, x24, x10
    fb08:	ldurb	w2, [x6, #-2]
    fb0c:	cmp	w11, #0x6
    fb10:	mov	x1, x0
    fb14:	add	x24, x19, x24, lsl #1
    fb18:	cset	w3, hi  // hi = pmore
    fb1c:	add	x24, x24, #0x6, lsl #12
    fb20:	mov	x0, x19
    fb24:	ldrh	w12, [x24, #2972]
    fb28:	lsr	w12, w12, #4
    fb2c:	bl	f630 <lzma_mode_is_supported@@XZ_5.0+0x4ec>
    fb30:	adrp	x7, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    fb34:	add	x2, x19, #0x11, lsl #12
    fb38:	cmp	w26, w27
    fb3c:	ldr	x3, [x7, #3960]
    fb40:	ldrb	w1, [x3, w12, sxtw]
    fb44:	eor	w12, w12, #0x7f
    fb48:	add	w0, w1, w0
    fb4c:	mov	w1, #0xffffffff            	// #-1
    fb50:	str	w0, [x21, #3872]
    fb54:	stur	w1, [x2, #-216]
    fb58:	add	x1, x19, x13, lsl #1
    fb5c:	add	x1, x1, #0x6, lsl #12
    fb60:	sturb	wzr, [x2, #-236]
    fb64:	ldrb	w23, [x3, x12]
    fb68:	ldrh	w12, [x1, #3356]
    fb6c:	lsr	w12, w12, #4
    fb70:	eor	w4, w12, #0x7f
    fb74:	ldrb	w13, [x3, x4]
    fb78:	add	w13, w13, w23
    fb7c:	b.ne	fbb0 <lzma_mode_is_supported@@XZ_5.0+0xa6c>  // b.any
    fb80:	ldrh	w1, [x1, #3380]
    fb84:	ldrh	w4, [x24, #3452]
    fb88:	ubfx	x1, x1, #4, #12
    fb8c:	ubfx	x4, x4, #4, #12
    fb90:	ldrb	w1, [x3, x1]
    fb94:	ldrb	w3, [x3, x4]
    fb98:	add	w1, w1, w3
    fb9c:	add	w1, w1, w13
    fba0:	cmp	w0, w1
    fba4:	b.ls	fbb0 <lzma_mode_is_supported@@XZ_5.0+0xa6c>  // b.plast
    fba8:	str	w1, [x21, #3872]
    fbac:	stur	wzr, [x2, #-216]
    fbb0:	cmp	w20, w9
    fbb4:	csel	w20, w20, w9, cs  // cs = hs, nlast
    fbb8:	cmp	w20, #0x1
    fbbc:	b.hi	fbc8 <lzma_mode_is_supported@@XZ_5.0+0xa84>  // b.pmore
    fbc0:	ldr	w0, [x21, #3880]
    fbc4:	b	f928 <lzma_mode_is_supported@@XZ_5.0+0x7e4>
    fbc8:	ldr	w0, [x19, #744]
    fbcc:	mov	w1, w20
    fbd0:	str	w0, [x21, #3844]
    fbd4:	add	x0, x19, #0x200
    fbd8:	str	w25, [x21, #3840]
    fbdc:	mov	w2, #0x40000000            	// #1073741824
    fbe0:	str	wzr, [x21, #3876]
    fbe4:	ldur	x0, [x0, #236]
    fbe8:	str	x0, [x21, #3848]
    fbec:	mov	w0, #0x2c                  	// #44
    fbf0:	umaddl	x0, w20, w0, x19
    fbf4:	add	x0, x0, #0x10, lsl #12
    fbf8:	add	x0, x0, #0xef4
    fbfc:	str	w2, [x0], #-44
    fc00:	sub	w1, w1, #0x1
    fc04:	cmp	w1, #0x1
    fc08:	b.ne	fbfc <lzma_mode_is_supported@@XZ_5.0+0xab8>  // b.any
    fc0c:	mov	x21, #0x110                 	// #272
    fc10:	mov	x25, #0xee8                 	// #3816
    fc14:	mov	x16, #0xba48                	// #47688
    fc18:	add	x26, x19, x16
    fc1c:	mul	x21, x10, x21
    fc20:	mov	x8, #0x0                   	// #0
    fc24:	mov	w24, #0x2c                  	// #44
    fc28:	movk	x25, #0x1, lsl #16
    fc2c:	ldr	w28, [x15, x8, lsl #2]
    fc30:	mov	w27, w8
    fc34:	cmp	w28, #0x1
    fc38:	b.hi	fd44 <lzma_mode_is_supported@@XZ_5.0+0xc00>  // b.pmore
    fc3c:	add	x8, x8, #0x1
    fc40:	cmp	x8, #0x4
    fc44:	b.ne	fc2c <lzma_mode_is_supported@@XZ_5.0+0xae8>  // b.any
    fc48:	ldr	w2, [sp, #240]
    fc4c:	cmp	w2, #0x0
    fc50:	csinc	w2, w2, wzr, ne  // ne = any
    fc54:	add	w2, w2, #0x1
    fc58:	cmp	w9, w2
    fc5c:	b.cc	fdd4 <lzma_mode_is_supported@@XZ_5.0+0xc90>  // b.lo, b.ul, b.last
    fc60:	add	x3, x19, #0x2f4
    fc64:	mov	x0, #0x0                   	// #0
    fc68:	lsl	x1, x0, #3
    fc6c:	mov	w5, w0
    fc70:	add	x0, x0, #0x1
    fc74:	ldr	w1, [x3, x1]
    fc78:	cmp	w2, w1
    fc7c:	b.hi	fc68 <lzma_mode_is_supported@@XZ_5.0+0xb24>  // b.pmore
    fc80:	ldr	x7, [x7, #3960]
    fc84:	mov	x1, #0x110                 	// #272
    fc88:	ldr	w6, [sp, #236]
    fc8c:	mov	x13, #0x7200                	// #29184
    fc90:	mul	x10, x10, x1
    fc94:	add	x8, x19, x13
    fc98:	ldrb	w0, [x7, w12, sxtw]
    fc9c:	mov	x9, #0x43a4                	// #17316
    fca0:	mov	w7, #0x5                   	// #5
    fca4:	mov	x11, #0x40a4                	// #16548
    fca8:	add	w23, w0, w23
    fcac:	mov	x12, #0x41a4                	// #16804
    fcb0:	mov	x15, #0x2c                  	// #44
    fcb4:	add	x13, x19, w5, uxtw #3
    fcb8:	cmp	w2, #0x5
    fcbc:	csel	w3, w2, w7, ls  // ls = plast
    fcc0:	sub	w3, w3, #0x2
    fcc4:	ldr	w4, [x13, #760]
    fcc8:	cmp	w4, #0x7f
    fccc:	b.hi	fda4 <lzma_mode_is_supported@@XZ_5.0+0xc60>  // b.pmore
    fcd0:	lsl	x3, x3, #7
    fcd4:	add	x3, x3, w4, uxtw
    fcd8:	add	x3, x3, x12
    fcdc:	ldr	w1, [x19, x3, lsl #2]
    fce0:	sub	w0, w2, #0x2
    fce4:	add	x0, x10, x0
    fce8:	add	x0, x8, x0, lsl #2
    fcec:	ldr	w0, [x0, #1028]
    fcf0:	add	w1, w1, w0
    fcf4:	mov	w0, w2
    fcf8:	add	w1, w1, w23
    fcfc:	madd	x0, x0, x15, x19
    fd00:	add	x0, x0, #0x10, lsl #12
    fd04:	ldr	w3, [x0, #3828]
    fd08:	cmp	w1, w3
    fd0c:	b.cs	fd24 <lzma_mode_is_supported@@XZ_5.0+0xbe0>  // b.hs, b.nlast
    fd10:	add	w4, w4, #0x4
    fd14:	strb	wzr, [x0, #3816]
    fd18:	str	w1, [x0, #3828]
    fd1c:	str	wzr, [x0, #3832]
    fd20:	str	w4, [x0, #3836]
    fd24:	ldr	w0, [x13, #756]
    fd28:	cmp	w2, w0
    fd2c:	b.ne	fd3c <lzma_mode_is_supported@@XZ_5.0+0xbf8>  // b.any
    fd30:	add	w5, w5, #0x1
    fd34:	cmp	w6, w5
    fd38:	b.eq	fdd4 <lzma_mode_is_supported@@XZ_5.0+0xc90>  // b.none
    fd3c:	add	w2, w2, #0x1
    fd40:	b	fcb4 <lzma_mode_is_supported@@XZ_5.0+0xb70>
    fd44:	mov	w3, w18
    fd48:	mov	w1, w8
    fd4c:	mov	w2, w11
    fd50:	mov	x0, x19
    fd54:	bl	f544 <lzma_mode_is_supported@@XZ_5.0+0x400>
    fd58:	add	w0, w13, w0
    fd5c:	umaddl	x1, w28, w24, x25
    fd60:	sub	w3, w28, #0x2
    fd64:	add	x1, x19, x1
    fd68:	add	x2, x21, w3, uxtw
    fd6c:	ldr	w4, [x1, #12]
    fd70:	add	x2, x26, x2, lsl #2
    fd74:	ldr	w2, [x2, #1028]
    fd78:	add	w2, w0, w2
    fd7c:	cmp	w2, w4
    fd80:	b.cs	fd90 <lzma_mode_is_supported@@XZ_5.0+0xc4c>  // b.hs, b.nlast
    fd84:	strb	wzr, [x1]
    fd88:	stp	w2, wzr, [x1, #12]
    fd8c:	str	w27, [x1, #20]
    fd90:	sub	w3, w3, #0x1
    fd94:	sub	x1, x1, #0x2c
    fd98:	cmn	w3, #0x1
    fd9c:	b.ne	fd68 <lzma_mode_is_supported@@XZ_5.0+0xc24>  // b.any
    fda0:	b	fc3c <lzma_mode_is_supported@@XZ_5.0+0xaf8>
    fda4:	mov	w0, w4
    fda8:	bl	f4c0 <lzma_mode_is_supported@@XZ_5.0+0x37c>
    fdac:	and	x1, x4, #0xf
    fdb0:	lsl	x3, x3, #6
    fdb4:	add	x1, x1, x9
    fdb8:	add	x3, x3, w0, uxtw
    fdbc:	add	x3, x3, x11
    fdc0:	add	x1, x19, x1, lsl #2
    fdc4:	ldr	w0, [x19, x3, lsl #2]
    fdc8:	ldr	w1, [x1, #8]
    fdcc:	add	w1, w1, w0
    fdd0:	b	fce0 <lzma_mode_is_supported@@XZ_5.0+0xb9c>
    fdd4:	cmn	w20, #0x1
    fdd8:	b.eq	f768 <lzma_mode_is_supported@@XZ_5.0+0x624>  // b.none
    fddc:	ldp	x0, x1, [x14]
    fde0:	adrp	x23, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
    fde4:	stp	x0, x1, [sp, #240]
    fde8:	mov	x11, #0x7200                	// #29184
    fdec:	add	x0, sp, #0xf0
    fdf0:	str	x0, [sp, #176]
    fdf4:	mov	x12, #0xba48                	// #47688
    fdf8:	ldr	x0, [x23, #3960]
    fdfc:	str	x0, [sp, #192]
    fe00:	add	x0, x19, x11
    fe04:	mov	w21, #0x1                   	// #1
    fe08:	str	x0, [sp, #200]
    fe0c:	add	x0, x19, x12
    fe10:	str	x0, [sp, #136]
    fe14:	add	x2, x19, #0x2f4
    fe18:	add	x1, x19, #0xb84
    fe1c:	mov	x0, x22
    fe20:	bl	cddc <lzma_mf_is_supported@@XZ_5.0+0x420>
    fe24:	mov	w15, w0
    fe28:	ldr	w0, [x22, #96]
    fe2c:	str	w0, [sp, #108]
    fe30:	str	w15, [x19, #2952]
    fe34:	mov	w0, w0
    fe38:	cmp	w15, w0
    fe3c:	b.cs	10b00 <lzma_mode_is_supported@@XZ_5.0+0x19bc>  // b.hs, b.nlast
    fe40:	mov	w2, w21
    fe44:	mov	x6, #0x2c                  	// #44
    fe48:	ldr	w11, [x22, #36]
    fe4c:	ldr	w0, [x22, #24]
    fe50:	madd	x4, x2, x6, x19
    fe54:	add	w11, w11, #0x1
    fe58:	sub	w11, w11, w0
    fe5c:	mov	w25, w0
    fe60:	add	x4, x4, #0x10, lsl #12
    fe64:	mov	w0, #0xfff                 	// #4095
    fe68:	sub	w0, w0, w21
    fe6c:	ldr	w1, [sp, #144]
    fe70:	cmp	w11, w0
    fe74:	sub	x3, x25, #0x1
    fe78:	ldrb	w5, [x4, #3816]
    fe7c:	csel	w11, w11, w0, ls  // ls = plast
    fe80:	ldr	w0, [x19, #2948]
    fe84:	add	w1, w1, w21
    fe88:	ldr	x18, [x22]
    fe8c:	stp	w0, w1, [sp, #128]
    fe90:	ldr	w1, [x4, #3832]
    fe94:	add	x13, x18, x3
    fe98:	cbz	w5, 10310 <lzma_mode_is_supported@@XZ_5.0+0x11cc>
    fe9c:	ldrb	w0, [x4, #3817]
    fea0:	sub	w1, w1, #0x1
    fea4:	cbz	w0, fef0 <lzma_mode_is_supported@@XZ_5.0+0xdac>
    fea8:	ldr	w0, [x4, #3820]
    feac:	ldr	w4, [x4, #3824]
    feb0:	cmp	w4, #0x3
    feb4:	madd	x0, x0, x6, x19
    feb8:	add	x0, x0, #0x10, lsl #12
    febc:	ldr	w0, [x0, #3812]
    fec0:	b.hi	fee0 <lzma_mode_is_supported@@XZ_5.0+0xd9c>  // b.pmore
    fec4:	cmp	w0, #0x6
    fec8:	b.ls	10300 <lzma_mode_is_supported@@XZ_5.0+0x11bc>  // b.plast
    fecc:	mov	w0, #0xb                   	// #11
    fed0:	sub	w0, w0, #0x6
    fed4:	b	ff14 <lzma_mode_is_supported@@XZ_5.0+0xdd0>
    fed8:	ldr	w21, [sp, #104]
    fedc:	b	fe14 <lzma_mode_is_supported@@XZ_5.0+0xcd0>
    fee0:	cmp	w0, #0x6
    fee4:	b.ls	10308 <lzma_mode_is_supported@@XZ_5.0+0x11c4>  // b.plast
    fee8:	mov	w0, #0xa                   	// #10
    feec:	b	fed0 <lzma_mode_is_supported@@XZ_5.0+0xd8c>
    fef0:	mov	w0, w1
    fef4:	madd	x0, x0, x6, x19
    fef8:	add	x0, x0, #0x10, lsl #12
    fefc:	ldr	w0, [x0, #3812]
    ff00:	cmp	w0, #0x3
    ff04:	b.ls	10324 <lzma_mode_is_supported@@XZ_5.0+0x11e0>  // b.plast
    ff08:	cmp	w0, #0x9
    ff0c:	b.hi	fed0 <lzma_mode_is_supported@@XZ_5.0+0xd8c>  // b.pmore
    ff10:	sub	w0, w0, #0x3
    ff14:	sub	w4, w21, #0x1
    ff18:	cmp	w1, w4
    ff1c:	mov	x4, #0x2c                  	// #44
    ff20:	b.ne	10348 <lzma_mode_is_supported@@XZ_5.0+0x1204>  // b.any
    ff24:	madd	x4, x2, x4, x19
    ff28:	add	x4, x4, #0x10, lsl #12
    ff2c:	ldr	w1, [x4, #3836]
    ff30:	cbnz	w1, 1032c <lzma_mode_is_supported@@XZ_5.0+0x11e8>
    ff34:	cmp	w0, #0x7
    ff38:	mov	w9, #0x9                   	// #9
    ff3c:	mov	w0, #0xb                   	// #11
    ff40:	csel	w9, w9, w0, cc  // cc = lo, ul, last
    ff44:	mov	x27, #0x2c                  	// #44
    ff48:	ubfiz	x10, x9, #4, #32
    ff4c:	ldp	w12, w1, [sp, #240]
    ff50:	madd	x0, x2, x27, x19
    ff54:	cmp	w9, #0x6
    ff58:	mov	w24, w9
    ff5c:	add	x0, x0, #0x10, lsl #12
    ff60:	str	w1, [x0, #3844]
    ff64:	ldr	w1, [sp, #248]
    ff68:	str	w1, [x0, #3848]
    ff6c:	ldr	w1, [sp, #252]
    ff70:	ldr	w26, [x0, #3828]
    ff74:	str	w9, [x0, #3812]
    ff78:	str	w12, [x0, #3840]
    ff7c:	mov	w12, w12
    ff80:	str	w1, [x0, #3852]
    ff84:	mvn	x12, x12
    ff88:	ldr	w0, [x19, #2960]
    ff8c:	ldr	w1, [sp, #132]
    ff90:	str	w0, [sp, #100]
    ff94:	mov	w0, w0
    ff98:	and	w0, w0, w1
    ff9c:	str	w0, [sp, #148]
    ffa0:	ldr	w0, [sp, #100]
    ffa4:	ldrb	w5, [x18, x3]
    ffa8:	cset	w3, hi  // hi = pmore
    ffac:	and	w0, w0, w1
    ffb0:	ldurb	w2, [x13, #-1]
    ffb4:	add	x10, x10, x0
    ffb8:	ldrb	w28, [x13, x12]
    ffbc:	str	w5, [sp, #152]
    ffc0:	add	x10, x19, x10, lsl #1
    ffc4:	mov	w4, w28
    ffc8:	add	x0, x10, #0x6, lsl #12
    ffcc:	ldrh	w14, [x0, #2972]
    ffd0:	mov	x0, x19
    ffd4:	lsr	w14, w14, #4
    ffd8:	bl	f630 <lzma_mode_is_supported@@XZ_5.0+0x4ec>
    ffdc:	add	w0, w26, w0
    ffe0:	ldr	x1, [sp, #192]
    ffe4:	ldr	w5, [sp, #152]
    ffe8:	ldrb	w1, [x1, w14, sxtw]
    ffec:	add	w0, w1, w0
    fff0:	add	w1, w21, #0x1
    fff4:	str	w1, [sp, #104]
    fff8:	add	w1, w21, #0x1
    fffc:	madd	x27, x1, x27, x19
   10000:	add	x27, x27, #0x10, lsl #12
   10004:	ldr	w1, [x27, #3828]
   10008:	cmp	w0, w1
   1000c:	b.cs	10494 <lzma_mode_is_supported@@XZ_5.0+0x1350>  // b.hs, b.nlast
   10010:	mov	w1, #0xffffffff            	// #-1
   10014:	mov	w2, #0x1                   	// #1
   10018:	strb	wzr, [x27, #3816]
   1001c:	str	w0, [x27, #3828]
   10020:	str	w21, [x27, #3832]
   10024:	str	w1, [x27, #3836]
   10028:	ldr	x1, [x23, #3960]
   1002c:	eor	w14, w14, #0x7f
   10030:	add	x24, x19, x24, lsl #1
   10034:	cmp	w5, w28
   10038:	add	x24, x24, #0x6, lsl #12
   1003c:	ldrb	w3, [x1, x14]
   10040:	add	w3, w3, w26
   10044:	str	w3, [sp, #152]
   10048:	ldrh	w3, [x24, #3356]
   1004c:	lsr	w3, w3, #4
   10050:	str	w3, [sp, #156]
   10054:	eor	w3, w3, #0x7f
   10058:	ldrb	w1, [x1, x3]
   1005c:	ldr	w3, [sp, #152]
   10060:	add	w1, w1, w3
   10064:	str	w1, [sp, #184]
   10068:	b.ne	100ec <lzma_mode_is_supported@@XZ_5.0+0xfa8>  // b.any
   1006c:	ldr	w1, [sp, #104]
   10070:	mov	x3, #0x2c                  	// #44
   10074:	madd	x1, x1, x3, x19
   10078:	add	x1, x1, #0x10, lsl #12
   1007c:	ldr	w3, [x1, #3832]
   10080:	cmp	w3, w21
   10084:	b.cs	10090 <lzma_mode_is_supported@@XZ_5.0+0xf4c>  // b.hs, b.nlast
   10088:	ldr	w1, [x1, #3836]
   1008c:	cbz	w1, 100ec <lzma_mode_is_supported@@XZ_5.0+0xfa8>
   10090:	add	x10, x10, #0x6, lsl #12
   10094:	ldrh	w1, [x24, #3380]
   10098:	ldr	x4, [x23, #3960]
   1009c:	ldrh	w3, [x10, #3452]
   100a0:	ubfx	x1, x1, #4, #12
   100a4:	ubfx	x3, x3, #4, #12
   100a8:	ldrb	w1, [x4, x1]
   100ac:	ldrb	w3, [x4, x3]
   100b0:	mov	x4, #0x2c                  	// #44
   100b4:	add	w1, w1, w3
   100b8:	ldr	w3, [sp, #184]
   100bc:	add	w3, w1, w3
   100c0:	ldr	w1, [sp, #104]
   100c4:	madd	x1, x1, x4, x19
   100c8:	add	x1, x1, #0x10, lsl #12
   100cc:	ldr	w4, [x1, #3828]
   100d0:	cmp	w3, w4
   100d4:	b.hi	100ec <lzma_mode_is_supported@@XZ_5.0+0xfa8>  // b.pmore
   100d8:	mov	w2, #0x1                   	// #1
   100dc:	strb	wzr, [x1, #3816]
   100e0:	str	w3, [x1, #3828]
   100e4:	str	w21, [x1, #3832]
   100e8:	str	wzr, [x1, #3836]
   100ec:	cmp	w11, #0x1
   100f0:	b.ls	10af0 <lzma_mode_is_supported@@XZ_5.0+0x19ac>  // b.plast
   100f4:	ldr	w1, [sp, #108]
   100f8:	eor	w2, w2, #0x1
   100fc:	cmp	w1, w11
   10100:	csel	w27, w1, w11, ls  // ls = plast
   10104:	cmp	w5, w28
   10108:	csel	w2, w2, wzr, ne  // ne = any
   1010c:	cbz	w2, 10254 <lzma_mode_is_supported@@XZ_5.0+0x1110>
   10110:	add	w1, w1, #0x1
   10114:	add	x18, x18, x25
   10118:	cmp	w1, w11
   1011c:	sub	x12, x12, #0x1
   10120:	csel	w1, w1, w11, ls  // ls = plast
   10124:	mov	w5, #0x1                   	// #1
   10128:	cmp	w1, w5
   1012c:	b.ls	10140 <lzma_mode_is_supported@@XZ_5.0+0xffc>  // b.plast
   10130:	ldrb	w2, [x18], #1
   10134:	ldrb	w3, [x18, x12]
   10138:	cmp	w3, w2
   1013c:	b.eq	1049c <lzma_mode_is_supported@@XZ_5.0+0x1358>  // b.none
   10140:	sub	w1, w5, #0x1
   10144:	cmp	w1, #0x1
   10148:	b.ls	10254 <lzma_mode_is_supported@@XZ_5.0+0x1110>  // b.plast
   1014c:	cmp	w9, #0x3
   10150:	b.ls	104a4 <lzma_mode_is_supported@@XZ_5.0+0x1360>  // b.plast
   10154:	sub	w2, w9, #0x3
   10158:	sub	w3, w9, #0x6
   1015c:	cmp	w9, #0x9
   10160:	csel	w2, w3, w2, hi  // hi = pmore
   10164:	ldp	w6, w4, [sp, #100]
   10168:	mov	x10, #0x2c                  	// #44
   1016c:	ldr	w3, [sp, #144]
   10170:	mov	w12, #0x40000000            	// #1073741824
   10174:	add	w3, w3, w4
   10178:	ubfiz	x4, x2, #4, #32
   1017c:	and	w3, w3, w6
   10180:	add	x2, x19, w2, uxtw #1
   10184:	add	x4, x4, x3
   10188:	add	x2, x2, #0x6, lsl #12
   1018c:	ldr	x6, [x23, #3960]
   10190:	add	x4, x19, x4, lsl #1
   10194:	add	x4, x4, #0x6, lsl #12
   10198:	ldrh	w7, [x4, #2972]
   1019c:	ubfx	x7, x7, #4, #12
   101a0:	eor	x7, x7, #0x7f
   101a4:	ldrb	w8, [x6, x7]
   101a8:	ldrh	w7, [x2, #3356]
   101ac:	ubfx	x7, x7, #4, #12
   101b0:	eor	x7, x7, #0x7f
   101b4:	ldrb	w6, [x6, x7]
   101b8:	mov	w7, w20
   101bc:	add	w8, w8, w6
   101c0:	ldr	w6, [sp, #104]
   101c4:	add	w1, w6, w1
   101c8:	cmp	w1, w7
   101cc:	b.hi	104ac <lzma_mode_is_supported@@XZ_5.0+0x1368>  // b.pmore
   101d0:	ldrh	w4, [x4, #3452]
   101d4:	subs	w6, w1, w20
   101d8:	csel	w6, w6, wzr, cs  // cs = hs, nlast
   101dc:	sub	w5, w5, #0x3
   101e0:	add	w20, w20, w6
   101e4:	ubfx	x4, x4, #4, #12
   101e8:	ldr	x6, [x23, #3960]
   101ec:	eor	x4, x4, #0x7f
   101f0:	ldrb	w7, [x6, x4]
   101f4:	ldrh	w4, [x2, #3380]
   101f8:	ubfx	x4, x4, #4, #12
   101fc:	ldrb	w2, [x6, x4]
   10200:	mov	x4, #0x110                 	// #272
   10204:	madd	x5, x3, x4, x5
   10208:	add	w2, w7, w2
   1020c:	ldr	x3, [sp, #136]
   10210:	add	x5, x3, x5, lsl #2
   10214:	ldr	w3, [x5, #1028]
   10218:	add	w0, w0, w3
   1021c:	add	w8, w0, w8
   10220:	mov	x0, #0x2c                  	// #44
   10224:	add	w8, w2, w8
   10228:	madd	x1, x1, x0, x19
   1022c:	add	x1, x1, #0x10, lsl #12
   10230:	ldr	w0, [x1, #3828]
   10234:	cmp	w8, w0
   10238:	b.cs	10254 <lzma_mode_is_supported@@XZ_5.0+0x1110>  // b.hs, b.nlast
   1023c:	ldr	w0, [sp, #104]
   10240:	str	w8, [x1, #3828]
   10244:	str	w0, [x1, #3832]
   10248:	mov	w0, #0x1                   	// #1
   1024c:	strh	w0, [x1, #3816]
   10250:	str	wzr, [x1, #3836]
   10254:	cmp	w9, #0x6
   10258:	mov	w0, #0xb                   	// #11
   1025c:	mov	w24, #0x8                   	// #8
   10260:	csel	w24, w24, w0, ls  // ls = plast
   10264:	sub	w1, w24, #0x3
   10268:	sub	w0, w24, #0x6
   1026c:	cmp	w24, #0x9
   10270:	mov	x18, #0x0                   	// #0
   10274:	csel	w0, w1, w0, ls  // ls = plast
   10278:	str	x0, [sp, #160]
   1027c:	mov	w12, #0x2                   	// #2
   10280:	add	x0, x19, x0, lsl #1
   10284:	add	x0, x0, #0x6, lsl #12
   10288:	str	x0, [sp, #168]
   1028c:	ldr	x0, [sp, #176]
   10290:	mov	w6, w18
   10294:	ldrb	w1, [x13]
   10298:	ldr	w0, [x0, x18, lsl #2]
   1029c:	mvn	x0, x0
   102a0:	add	x4, x13, x0
   102a4:	ldrb	w0, [x13, x0]
   102a8:	cmp	w1, w0
   102ac:	b.ne	1074c <lzma_mode_is_supported@@XZ_5.0+0x1608>  // b.any
   102b0:	ldrb	w1, [x13, #1]
   102b4:	ldrb	w0, [x4, #1]
   102b8:	cmp	w1, w0
   102bc:	b.ne	1074c <lzma_mode_is_supported@@XZ_5.0+0x1608>  // b.any
   102c0:	sub	x3, x4, #0x1
   102c4:	mov	x7, #0x2                   	// #2
   102c8:	mov	w14, w7
   102cc:	add	w8, w7, #0x1
   102d0:	cmp	w27, w7
   102d4:	b.ls	102ec <lzma_mode_is_supported@@XZ_5.0+0x11a8>  // b.plast
   102d8:	add	x0, x7, #0x1
   102dc:	ldrb	w2, [x13, x7]
   102e0:	ldrb	w1, [x3, x0]
   102e4:	cmp	w2, w1
   102e8:	b.eq	104c4 <lzma_mode_is_supported@@XZ_5.0+0x1380>  // b.none
   102ec:	mov	w0, w20
   102f0:	add	w2, w14, w21
   102f4:	mov	x3, #0x2c                  	// #44
   102f8:	mov	w5, #0x40000000            	// #1073741824
   102fc:	b	104e0 <lzma_mode_is_supported@@XZ_5.0+0x139c>
   10300:	mov	w0, #0x8                   	// #8
   10304:	b	ff10 <lzma_mode_is_supported@@XZ_5.0+0xdcc>
   10308:	mov	w0, #0x7                   	// #7
   1030c:	b	ff10 <lzma_mode_is_supported@@XZ_5.0+0xdcc>
   10310:	mov	w0, w1
   10314:	madd	x0, x0, x6, x19
   10318:	add	x0, x0, #0x10, lsl #12
   1031c:	ldr	w0, [x0, #3812]
   10320:	b	ff14 <lzma_mode_is_supported@@XZ_5.0+0xdd0>
   10324:	mov	w0, #0x0                   	// #0
   10328:	b	ff14 <lzma_mode_is_supported@@XZ_5.0+0xdd0>
   1032c:	cmp	w0, #0x3
   10330:	b.ls	1048c <lzma_mode_is_supported@@XZ_5.0+0x1348>  // b.plast
   10334:	sub	w1, w0, #0x3
   10338:	sub	w9, w0, #0x6
   1033c:	cmp	w0, #0x9
   10340:	csel	w9, w9, w1, hi  // hi = pmore
   10344:	b	ff44 <lzma_mode_is_supported@@XZ_5.0+0xe00>
   10348:	cbz	w5, 103dc <lzma_mode_is_supported@@XZ_5.0+0x1298>
   1034c:	madd	x4, x2, x4, x19
   10350:	add	x4, x4, #0x10, lsl #12
   10354:	ldrb	w5, [x4, #3817]
   10358:	cbz	w5, 103dc <lzma_mode_is_supported@@XZ_5.0+0x1298>
   1035c:	ldr	w1, [x4, #3820]
   10360:	cmp	w0, #0x7
   10364:	ldr	w4, [x4, #3824]
   10368:	mov	w9, #0x8                   	// #8
   1036c:	mov	w0, #0xb                   	// #11
   10370:	csel	w9, w9, w0, cc  // cc = lo, ul, last
   10374:	cmp	w4, #0x3
   10378:	b.hi	10418 <lzma_mode_is_supported@@XZ_5.0+0x12d4>  // b.pmore
   1037c:	mov	w1, w1
   10380:	mov	x0, #0xb                   	// #11
   10384:	mov	x10, #0x43bc                	// #17340
   10388:	mul	x0, x1, x0
   1038c:	add	x0, x0, w4, uxtw
   10390:	add	x0, x0, x10
   10394:	add	x0, x19, x0, lsl #2
   10398:	ldr	w0, [x0, #16]
   1039c:	str	w0, [sp, #240]
   103a0:	cbnz	w4, 10454 <lzma_mode_is_supported@@XZ_5.0+0x1310>
   103a4:	mov	x0, #0x1                   	// #1
   103a8:	mov	x4, #0xb                   	// #11
   103ac:	mov	x5, #0x43bc                	// #17340
   103b0:	mul	x1, x1, x4
   103b4:	add	x4, x1, w0, uxtw
   103b8:	add	x4, x4, x5
   103bc:	ldr	x6, [sp, #176]
   103c0:	add	x4, x19, x4, lsl #2
   103c4:	ldr	w4, [x4, #16]
   103c8:	str	w4, [x6, x0, lsl #2]
   103cc:	add	x0, x0, #0x1
   103d0:	cmp	w0, #0x4
   103d4:	b.ne	103b4 <lzma_mode_is_supported@@XZ_5.0+0x1270>  // b.any
   103d8:	b	ff44 <lzma_mode_is_supported@@XZ_5.0+0xe00>
   103dc:	mov	x4, #0x2c                  	// #44
   103e0:	madd	x4, x2, x4, x19
   103e4:	add	x4, x4, #0x10, lsl #12
   103e8:	ldr	w4, [x4, #3836]
   103ec:	cmp	w4, #0x3
   103f0:	b.hi	10408 <lzma_mode_is_supported@@XZ_5.0+0x12c4>  // b.pmore
   103f4:	cmp	w0, #0x7
   103f8:	mov	w9, #0x8                   	// #8
   103fc:	mov	w0, #0xb                   	// #11
   10400:	csel	w9, w9, w0, cc  // cc = lo, ul, last
   10404:	b	1037c <lzma_mode_is_supported@@XZ_5.0+0x1238>
   10408:	cmp	w0, #0x7
   1040c:	mov	w9, #0x7                   	// #7
   10410:	mov	w0, #0xa                   	// #10
   10414:	csel	w9, w9, w0, cc  // cc = lo, ul, last
   10418:	mov	w1, w1
   1041c:	mov	x0, #0x2c                  	// #44
   10420:	sub	w4, w4, #0x4
   10424:	madd	x1, x1, x0, x19
   10428:	add	x1, x1, #0x10, lsl #12
   1042c:	ldr	w0, [x1, #3840]
   10430:	stp	w4, w0, [sp, #240]
   10434:	ldr	w0, [x1, #3844]
   10438:	str	w0, [sp, #248]
   1043c:	ldr	w0, [x1, #3848]
   10440:	b	10484 <lzma_mode_is_supported@@XZ_5.0+0x1340>
   10444:	mov	x0, #0x2                   	// #2
   10448:	b	103a8 <lzma_mode_is_supported@@XZ_5.0+0x1264>
   1044c:	mov	x0, #0x3                   	// #3
   10450:	b	103a8 <lzma_mode_is_supported@@XZ_5.0+0x1264>
   10454:	mov	x0, #0x2c                  	// #44
   10458:	cmp	w4, #0x1
   1045c:	madd	x0, x1, x0, x19
   10460:	add	x0, x0, #0x10, lsl #12
   10464:	ldr	w5, [x0, #3840]
   10468:	str	w5, [sp, #244]
   1046c:	b.eq	10444 <lzma_mode_is_supported@@XZ_5.0+0x1300>  // b.none
   10470:	ldr	w5, [x0, #3844]
   10474:	cmp	w4, #0x3
   10478:	str	w5, [sp, #248]
   1047c:	b.ne	1044c <lzma_mode_is_supported@@XZ_5.0+0x1308>  // b.any
   10480:	ldr	w0, [x0, #3848]
   10484:	str	w0, [sp, #252]
   10488:	b	ff44 <lzma_mode_is_supported@@XZ_5.0+0xe00>
   1048c:	mov	w9, #0x0                   	// #0
   10490:	b	ff44 <lzma_mode_is_supported@@XZ_5.0+0xe00>
   10494:	mov	w2, #0x0                   	// #0
   10498:	b	10028 <lzma_mode_is_supported@@XZ_5.0+0xee4>
   1049c:	add	w5, w5, #0x1
   104a0:	b	10128 <lzma_mode_is_supported@@XZ_5.0+0xfe4>
   104a4:	mov	w2, #0x0                   	// #0
   104a8:	b	10164 <lzma_mode_is_supported@@XZ_5.0+0x1020>
   104ac:	add	w6, w7, #0x1
   104b0:	mov	x7, x6
   104b4:	madd	x6, x6, x10, x19
   104b8:	add	x6, x6, #0x10, lsl #12
   104bc:	str	w12, [x6, #3828]
   104c0:	b	101c8 <lzma_mode_is_supported@@XZ_5.0+0x1084>
   104c4:	mov	x7, x0
   104c8:	b	102c8 <lzma_mode_is_supported@@XZ_5.0+0x1184>
   104cc:	add	w1, w0, #0x1
   104d0:	mov	x0, x1
   104d4:	madd	x1, x1, x3, x19
   104d8:	add	x1, x1, #0x10, lsl #12
   104dc:	str	w5, [x1, #3828]
   104e0:	cmp	w0, w2
   104e4:	b.cc	104cc <lzma_mode_is_supported@@XZ_5.0+0x1388>  // b.lo, b.ul, b.last
   104e8:	ldr	w3, [sp, #148]
   104ec:	subs	w0, w2, w20
   104f0:	csel	w0, w0, wzr, cs  // cs = hs, nlast
   104f4:	mov	w1, w6
   104f8:	add	w20, w20, w0
   104fc:	add	w0, w21, #0x1
   10500:	mov	w2, w9
   10504:	str	w0, [sp, #188]
   10508:	mov	x0, x19
   1050c:	str	x4, [sp, #208]
   10510:	str	w6, [sp, #216]
   10514:	bl	f544 <lzma_mode_is_supported@@XZ_5.0+0x400>
   10518:	ldr	w1, [sp, #184]
   1051c:	mov	x3, #0x2c                  	// #44
   10520:	ldr	w2, [sp, #148]
   10524:	add	w25, w1, w0
   10528:	mov	x0, #0x110                 	// #272
   1052c:	ldr	w6, [sp, #216]
   10530:	mov	w1, w14
   10534:	ldr	x4, [sp, #208]
   10538:	mul	x2, x2, x0
   1053c:	ldr	x5, [sp, #136]
   10540:	sub	w0, w1, #0x2
   10544:	add	x0, x2, x0
   10548:	add	x0, x5, x0, lsl #2
   1054c:	ldr	w5, [x0, #1028]
   10550:	add	w0, w1, w21
   10554:	add	w5, w25, w5
   10558:	madd	x0, x0, x3, x19
   1055c:	add	x0, x0, #0x10, lsl #12
   10560:	ldr	w10, [x0, #3828]
   10564:	cmp	w5, w10
   10568:	b.cs	1057c <lzma_mode_is_supported@@XZ_5.0+0x1438>  // b.hs, b.nlast
   1056c:	strb	wzr, [x0, #3816]
   10570:	str	w5, [x0, #3828]
   10574:	str	w21, [x0, #3832]
   10578:	str	w6, [x0, #3836]
   1057c:	sub	w1, w1, #0x1
   10580:	cmp	w1, #0x1
   10584:	b.ne	1053c <lzma_mode_is_supported@@XZ_5.0+0x13f8>  // b.any
   10588:	ldr	w0, [sp, #108]
   1058c:	cmp	x18, #0x0
   10590:	csel	w12, w12, w8, ne  // ne = any
   10594:	sub	x5, x4, #0x1
   10598:	add	w0, w0, w8
   1059c:	cmp	w0, w11
   105a0:	csel	w1, w0, w11, ls  // ls = plast
   105a4:	mov	w0, w8
   105a8:	mov	w26, w0
   105ac:	cmp	w0, w1
   105b0:	b.cs	105c8 <lzma_mode_is_supported@@XZ_5.0+0x1484>  // b.hs, b.nlast
   105b4:	ldrb	w2, [x13, x0]
   105b8:	add	x0, x0, #0x1
   105bc:	ldrb	w3, [x5, x0]
   105c0:	cmp	w3, w2
   105c4:	b.eq	105a8 <lzma_mode_is_supported@@XZ_5.0+0x1464>  // b.none
   105c8:	sub	w26, w26, w14
   105cc:	sub	w10, w26, #0x1
   105d0:	cmp	w10, #0x1
   105d4:	b.ls	1074c <lzma_mode_is_supported@@XZ_5.0+0x1608>  // b.plast
   105d8:	ldr	w0, [sp, #132]
   105dc:	mov	x8, #0x35c8                	// #13768
   105e0:	ldr	x28, [x23, #3960]
   105e4:	add	w1, w14, w0
   105e8:	ldr	w0, [sp, #100]
   105ec:	mov	x3, #0x110                 	// #272
   105f0:	ldrb	w5, [x13, x7]
   105f4:	and	w2, w0, w1
   105f8:	mov	w0, w24
   105fc:	ldrb	w4, [x4, x7]
   10600:	add	x0, x2, x0, lsl #4
   10604:	sub	w2, w14, #0x2
   10608:	add	x0, x0, x8
   1060c:	stp	w1, w6, [sp, #216]
   10610:	add	x0, x19, x0, lsl #1
   10614:	ldrh	w0, [x0, #12]
   10618:	ubfx	x0, x0, #4, #12
   1061c:	ldrb	w8, [x28, x0]
   10620:	ldr	w0, [sp, #148]
   10624:	madd	x0, x0, x3, x2
   10628:	mov	w3, #0x1                   	// #1
   1062c:	ldr	x2, [sp, #136]
   10630:	add	x0, x2, x0, lsl #2
   10634:	ldr	w0, [x0, #1028]
   10638:	add	w8, w8, w0
   1063c:	sub	w0, w14, #0x1
   10640:	str	w8, [sp, #208]
   10644:	ldrb	w2, [x13, x0]
   10648:	mov	x0, x19
   1064c:	bl	f630 <lzma_mode_is_supported@@XZ_5.0+0x4ec>
   10650:	ldp	w1, w6, [sp, #216]
   10654:	mov	w4, w20
   10658:	ldr	w2, [sp, #100]
   1065c:	mov	x16, #0x2c                  	// #44
   10660:	add	w1, w1, #0x1
   10664:	ldr	w8, [sp, #208]
   10668:	and	w1, w1, w2
   1066c:	mov	w17, #0x40000000            	// #1073741824
   10670:	ldr	x2, [sp, #160]
   10674:	add	x2, x1, x2, lsl #4
   10678:	add	x2, x19, x2, lsl #1
   1067c:	add	x2, x2, #0x6, lsl #12
   10680:	ldrh	w3, [x2, #2972]
   10684:	ubfx	x3, x3, #4, #12
   10688:	eor	x3, x3, #0x7f
   1068c:	ldrb	w5, [x28, x3]
   10690:	ldr	x3, [sp, #168]
   10694:	ldrh	w3, [x3, #3356]
   10698:	ubfx	x3, x3, #4, #12
   1069c:	eor	x3, x3, #0x7f
   106a0:	ldrb	w7, [x28, x3]
   106a4:	ldr	w3, [sp, #188]
   106a8:	add	w14, w3, w14
   106ac:	add	w10, w14, w10
   106b0:	cmp	w10, w4
   106b4:	b.hi	10a70 <lzma_mode_is_supported@@XZ_5.0+0x192c>  // b.pmore
   106b8:	ldr	x4, [sp, #168]
   106bc:	subs	w3, w10, w20
   106c0:	csel	w3, w3, wzr, cs  // cs = hs, nlast
   106c4:	ldrh	w2, [x2, #3452]
   106c8:	add	w20, w20, w3
   106cc:	sub	w26, w26, #0x3
   106d0:	ldrh	w4, [x4, #3380]
   106d4:	ldr	x3, [x23, #3960]
   106d8:	ubfx	x2, x2, #4, #12
   106dc:	ubfx	x4, x4, #4, #12
   106e0:	eor	x2, x2, #0x7f
   106e4:	ldrb	w4, [x3, x4]
   106e8:	add	w7, w4, w7
   106ec:	add	w8, w7, w8
   106f0:	ldrb	w7, [x3, x2]
   106f4:	mov	x2, #0x110                 	// #272
   106f8:	add	w5, w7, w5
   106fc:	madd	x1, x1, x2, x26
   10700:	add	w5, w8, w5
   10704:	ldr	x2, [sp, #136]
   10708:	add	x1, x2, x1, lsl #2
   1070c:	ldr	w8, [x1, #1028]
   10710:	mov	x1, #0x2c                  	// #44
   10714:	madd	x10, x10, x1, x19
   10718:	add	w25, w25, w8
   1071c:	add	w25, w5, w25
   10720:	add	x10, x10, #0x10, lsl #12
   10724:	add	w0, w25, w0
   10728:	ldr	w1, [x10, #3828]
   1072c:	cmp	w0, w1
   10730:	b.cs	1074c <lzma_mode_is_supported@@XZ_5.0+0x1608>  // b.hs, b.nlast
   10734:	add	x7, x10, #0xef4
   10738:	stp	w21, w6, [x7, #-8]
   1073c:	stp	w0, w14, [x7]
   10740:	mov	w0, #0x101                 	// #257
   10744:	strh	w0, [x10, #3816]
   10748:	str	wzr, [x10, #3836]
   1074c:	add	x18, x18, #0x1
   10750:	cmp	x18, #0x4
   10754:	b.ne	1028c <lzma_mode_is_supported@@XZ_5.0+0x1148>  // b.any
   10758:	cmp	w15, w27
   1075c:	b.ls	1078c <lzma_mode_is_supported@@XZ_5.0+0x1648>  // b.plast
   10760:	add	x1, x19, #0x2f4
   10764:	str	wzr, [sp, #128]
   10768:	ldr	w0, [sp, #128]
   1076c:	ldr	w2, [x1], #8
   10770:	add	w3, w0, #0x1
   10774:	str	w3, [sp, #128]
   10778:	cmp	w27, w2
   1077c:	b.hi	10768 <lzma_mode_is_supported@@XZ_5.0+0x1624>  // b.pmore
   10780:	add	x0, x19, w0, uxtw #3
   10784:	mov	w15, w27
   10788:	str	w27, [x0, #756]
   1078c:	cmp	w15, w12
   10790:	b.cc	10af0 <lzma_mode_is_supported@@XZ_5.0+0x19ac>  // b.lo, b.ul, b.last
   10794:	ldr	w1, [sp, #156]
   10798:	add	w2, w15, w21
   1079c:	ldr	x0, [x23, #3960]
   107a0:	mov	x3, #0x2c                  	// #44
   107a4:	mov	w4, #0x40000000            	// #1073741824
   107a8:	ldrb	w0, [x0, w1, sxtw]
   107ac:	ldr	w1, [sp, #152]
   107b0:	add	w0, w0, w1
   107b4:	mov	w1, w20
   107b8:	str	w0, [sp, #152]
   107bc:	cmp	w1, w2
   107c0:	b.cc	10a88 <lzma_mode_is_supported@@XZ_5.0+0x1944>  // b.lo, b.ul, b.last
   107c4:	sub	w0, w21, w20
   107c8:	cmp	w2, w20
   107cc:	add	w15, w0, w15
   107d0:	add	x2, x19, #0x2f4
   107d4:	csel	w15, w15, wzr, cs  // cs = hs, nlast
   107d8:	mov	x0, #0x0                   	// #0
   107dc:	add	w20, w20, w15
   107e0:	lsl	x1, x0, #3
   107e4:	mov	w28, w0
   107e8:	add	x0, x0, #0x1
   107ec:	ldr	w1, [x2, x1]
   107f0:	cmp	w1, w12
   107f4:	b.cc	107e0 <lzma_mode_is_supported@@XZ_5.0+0x169c>  // b.lo, b.ul, b.last
   107f8:	cmp	w9, #0x6
   107fc:	mov	w0, #0xa                   	// #10
   10800:	mov	w24, #0x7                   	// #7
   10804:	csel	w24, w24, w0, ls  // ls = plast
   10808:	cmp	w24, w0
   1080c:	sub	w25, w24, #0x3
   10810:	mov	w0, #0x4                   	// #4
   10814:	csel	w25, w25, w0, ne  // ne = any
   10818:	add	x26, x19, x25, lsl #1
   1081c:	add	x26, x26, #0x6, lsl #12
   10820:	add	x2, x19, w28, uxtw #3
   10824:	cmp	w12, #0x5
   10828:	mov	w3, #0x5                   	// #5
   1082c:	csel	w3, w12, w3, ls  // ls = plast
   10830:	sub	w3, w3, #0x2
   10834:	ldr	w14, [x2, #760]
   10838:	cmp	w14, #0x7f
   1083c:	b.hi	10aa0 <lzma_mode_is_supported@@XZ_5.0+0x195c>  // b.pmore
   10840:	lsl	x3, x3, #7
   10844:	mov	x6, #0x41a4                	// #16804
   10848:	add	x3, x3, w14, uxtw
   1084c:	add	x3, x3, x6
   10850:	ldr	w1, [x19, x3, lsl #2]
   10854:	ldr	w0, [sp, #148]
   10858:	sub	w3, w12, #0x2
   1085c:	mov	x4, #0x110                 	// #272
   10860:	madd	x0, x0, x4, x3
   10864:	ldr	x3, [sp, #200]
   10868:	add	x0, x3, x0, lsl #2
   1086c:	ldr	w6, [x0, #1028]
   10870:	ldr	w0, [sp, #152]
   10874:	add	w6, w0, w6
   10878:	add	w0, w12, w21
   1087c:	add	w3, w6, w1
   10880:	mov	x1, #0x2c                  	// #44
   10884:	madd	x0, x0, x1, x19
   10888:	add	x0, x0, #0x10, lsl #12
   1088c:	ldr	w1, [x0, #3828]
   10890:	cmp	w3, w1
   10894:	b.cs	108ac <lzma_mode_is_supported@@XZ_5.0+0x1768>  // b.hs, b.nlast
   10898:	add	w1, w14, #0x4
   1089c:	strb	wzr, [x0, #3816]
   108a0:	str	w3, [x0, #3828]
   108a4:	str	w21, [x0, #3832]
   108a8:	str	w1, [x0, #3836]
   108ac:	ldr	w0, [x2, #756]
   108b0:	add	w18, w12, #0x1
   108b4:	cmp	w12, w0
   108b8:	b.ne	10a68 <lzma_mode_is_supported@@XZ_5.0+0x1924>  // b.any
   108bc:	ldr	w0, [sp, #108]
   108c0:	mov	w2, w14
   108c4:	mvn	x2, x2
   108c8:	add	w0, w0, w18
   108cc:	add	x2, x13, x2
   108d0:	cmp	w0, w11
   108d4:	sub	x6, x2, #0x1
   108d8:	csel	w1, w0, w11, ls  // ls = plast
   108dc:	mov	w0, w18
   108e0:	mov	w15, w0
   108e4:	cmp	w1, w0
   108e8:	b.ls	10900 <lzma_mode_is_supported@@XZ_5.0+0x17bc>  // b.plast
   108ec:	ldrb	w4, [x13, x0]
   108f0:	add	x0, x0, #0x1
   108f4:	ldrb	w5, [x6, x0]
   108f8:	cmp	w5, w4
   108fc:	b.eq	108e0 <lzma_mode_is_supported@@XZ_5.0+0x179c>  // b.none
   10900:	sub	w15, w15, w12
   10904:	sub	w9, w15, #0x1
   10908:	cmp	w9, #0x1
   1090c:	b.ls	10a58 <lzma_mode_is_supported@@XZ_5.0+0x1914>  // b.plast
   10910:	ldr	w0, [sp, #132]
   10914:	ldr	x27, [x23, #3960]
   10918:	sub	w1, w0, #0x1
   1091c:	ldr	w0, [sp, #100]
   10920:	add	w1, w1, w18
   10924:	ldrb	w5, [x13, w12, uxtw]
   10928:	and	w4, w0, w1
   1092c:	and	w10, w0, w1
   10930:	ubfiz	x0, x24, #4, #4
   10934:	add	x0, x0, x4
   10938:	mov	x4, #0x35c8                	// #13768
   1093c:	add	x0, x0, x4
   10940:	ldrb	w4, [x2, w12, uxtw]
   10944:	add	x0, x19, x0, lsl #1
   10948:	ldrh	w0, [x0, #12]
   1094c:	ubfx	x0, x0, #4, #12
   10950:	ldrb	w6, [x27, x0]
   10954:	sub	w0, w12, #0x1
   10958:	add	w6, w6, w3
   1095c:	mov	w3, #0x1                   	// #1
   10960:	ldrb	w2, [x13, x0]
   10964:	mov	x0, x19
   10968:	str	w6, [sp, #156]
   1096c:	bl	f630 <lzma_mode_is_supported@@XZ_5.0+0x4ec>
   10970:	add	w10, w10, #0x1
   10974:	ldr	w1, [sp, #100]
   10978:	add	w4, w21, w18
   1097c:	ldr	w6, [sp, #156]
   10980:	add	w9, w9, w4
   10984:	and	w10, w1, w10
   10988:	mov	w3, w20
   1098c:	add	x1, x10, x25, lsl #4
   10990:	mov	x8, #0x2c                  	// #44
   10994:	mov	w12, #0x40000000            	// #1073741824
   10998:	add	x1, x19, x1, lsl #1
   1099c:	add	x1, x1, #0x6, lsl #12
   109a0:	ldrh	w2, [x1, #2972]
   109a4:	ubfx	x2, x2, #4, #12
   109a8:	eor	x2, x2, #0x7f
   109ac:	ldrb	w7, [x27, x2]
   109b0:	ldrh	w2, [x26, #3356]
   109b4:	ubfx	x2, x2, #4, #12
   109b8:	eor	x2, x2, #0x7f
   109bc:	ldrb	w5, [x27, x2]
   109c0:	cmp	w9, w3
   109c4:	b.hi	10ad8 <lzma_mode_is_supported@@XZ_5.0+0x1994>  // b.pmore
   109c8:	ldrh	w1, [x1, #3452]
   109cc:	subs	w2, w9, w20
   109d0:	csel	w2, w2, wzr, cs  // cs = hs, nlast
   109d4:	sub	w15, w15, #0x3
   109d8:	add	w20, w20, w2
   109dc:	ubfx	x1, x1, #4, #12
   109e0:	ldr	x2, [x23, #3960]
   109e4:	eor	x1, x1, #0x7f
   109e8:	ldrb	w1, [x2, x1]
   109ec:	add	w7, w1, w7
   109f0:	ldrh	w1, [x26, #3380]
   109f4:	ubfx	x1, x1, #4, #12
   109f8:	ldrb	w1, [x2, x1]
   109fc:	add	w5, w1, w5
   10a00:	mov	x1, #0x110                 	// #272
   10a04:	add	w5, w7, w5
   10a08:	madd	x10, x10, x1, x15
   10a0c:	add	w6, w5, w6
   10a10:	ldr	x1, [sp, #136]
   10a14:	add	x10, x1, x10, lsl #2
   10a18:	ldr	w1, [x10, #1028]
   10a1c:	add	w0, w0, w1
   10a20:	mov	x1, #0x2c                  	// #44
   10a24:	add	w0, w6, w0
   10a28:	madd	x9, x9, x1, x19
   10a2c:	add	x9, x9, #0x10, lsl #12
   10a30:	ldr	w1, [x9, #3828]
   10a34:	cmp	w0, w1
   10a38:	b.cs	10a58 <lzma_mode_is_supported@@XZ_5.0+0x1914>  // b.hs, b.nlast
   10a3c:	add	x1, x9, #0xef4
   10a40:	add	w14, w14, #0x4
   10a44:	stp	w21, w14, [x1, #-8]
   10a48:	stp	w0, w4, [x1]
   10a4c:	mov	w0, #0x101                 	// #257
   10a50:	strh	w0, [x9, #3816]
   10a54:	str	wzr, [x9, #3836]
   10a58:	ldr	w0, [sp, #128]
   10a5c:	add	w28, w28, #0x1
   10a60:	cmp	w28, w0
   10a64:	b.eq	10af0 <lzma_mode_is_supported@@XZ_5.0+0x19ac>  // b.none
   10a68:	mov	w12, w18
   10a6c:	b	10820 <lzma_mode_is_supported@@XZ_5.0+0x16dc>
   10a70:	add	w3, w4, #0x1
   10a74:	mov	x4, x3
   10a78:	madd	x3, x3, x16, x19
   10a7c:	add	x3, x3, #0x10, lsl #12
   10a80:	str	w17, [x3, #3828]
   10a84:	b	106b0 <lzma_mode_is_supported@@XZ_5.0+0x156c>
   10a88:	add	w0, w1, #0x1
   10a8c:	mov	x1, x0
   10a90:	madd	x0, x0, x3, x19
   10a94:	add	x0, x0, #0x10, lsl #12
   10a98:	str	w4, [x0, #3828]
   10a9c:	b	107bc <lzma_mode_is_supported@@XZ_5.0+0x1678>
   10aa0:	mov	w0, w14
   10aa4:	bl	f4c0 <lzma_mode_is_supported@@XZ_5.0+0x37c>
   10aa8:	ubfiz	x1, x14, #2, #4
   10aac:	lsl	x3, x3, #6
   10ab0:	add	x1, x1, #0x10, lsl #12
   10ab4:	add	x0, x3, w0, uxtw
   10ab8:	add	x1, x1, #0xe90
   10abc:	mov	x5, #0x40a4                	// #16548
   10ac0:	add	x1, x19, x1
   10ac4:	add	x0, x0, x5
   10ac8:	ldr	w3, [x1, #8]
   10acc:	ldr	w0, [x19, x0, lsl #2]
   10ad0:	add	w1, w3, w0
   10ad4:	b	10854 <lzma_mode_is_supported@@XZ_5.0+0x1710>
   10ad8:	add	w2, w3, #0x1
   10adc:	mov	x3, x2
   10ae0:	madd	x2, x2, x8, x19
   10ae4:	add	x2, x2, #0x10, lsl #12
   10ae8:	str	w12, [x2, #3828]
   10aec:	b	109c0 <lzma_mode_is_supported@@XZ_5.0+0x187c>
   10af0:	ldr	w0, [sp, #104]
   10af4:	cmp	w0, w20
   10af8:	b.cc	fed8 <lzma_mode_is_supported@@XZ_5.0+0xd94>  // b.lo, b.ul, b.last
   10afc:	mov	x21, x0
   10b00:	mov	w0, w21
   10b04:	mov	x3, #0x2c                  	// #44
   10b08:	add	x6, x19, #0x10, lsl #12
   10b0c:	mov	w8, #0xffffffff            	// #-1
   10b10:	madd	x0, x0, x3, x19
   10b14:	add	x0, x0, #0x10, lsl #12
   10b18:	ldr	w5, [x0, #3832]
   10b1c:	ldr	w7, [x0, #3836]
   10b20:	str	w21, [x6, #3804]
   10b24:	mov	w2, w21
   10b28:	mov	w1, w5
   10b2c:	madd	x2, x2, x3, x19
   10b30:	add	x2, x2, #0x10, lsl #12
   10b34:	ldrb	w0, [x2, #3816]
   10b38:	cbz	w0, 10b78 <lzma_mode_is_supported@@XZ_5.0+0x1a34>
   10b3c:	madd	x4, x1, x3, x19
   10b40:	sub	w0, w5, #0x1
   10b44:	add	x4, x4, #0x10, lsl #12
   10b48:	strb	wzr, [x4, #3816]
   10b4c:	str	w8, [x4, #3836]
   10b50:	str	w0, [x4, #3832]
   10b54:	ldrb	w4, [x2, #3817]
   10b58:	cbz	w4, 10b78 <lzma_mode_is_supported@@XZ_5.0+0x1a34>
   10b5c:	madd	x0, x0, x3, x19
   10b60:	ldr	w4, [x2, #3820]
   10b64:	add	x0, x0, #0x10, lsl #12
   10b68:	str	w4, [x0, #3832]
   10b6c:	strb	wzr, [x0, #3816]
   10b70:	ldr	w2, [x2, #3824]
   10b74:	str	w2, [x0, #3836]
   10b78:	madd	x0, x1, x3, x19
   10b7c:	add	x0, x0, #0x10, lsl #12
   10b80:	ldr	w1, [x0, #3832]
   10b84:	ldr	w2, [x0, #3836]
   10b88:	str	w21, [x0, #3832]
   10b8c:	mov	w21, w5
   10b90:	str	w7, [x0, #3836]
   10b94:	cbnz	w5, 10bb4 <lzma_mode_is_supported@@XZ_5.0+0x1a70>
   10b98:	ldr	x1, [sp, #120]
   10b9c:	ldr	w0, [x6, #3832]
   10ba0:	str	w0, [x6, #3808]
   10ba4:	str	w0, [x1]
   10ba8:	ldr	w0, [x6, #3836]
   10bac:	ldr	x1, [sp, #112]
   10bb0:	b	f938 <lzma_mode_is_supported@@XZ_5.0+0x7f4>
   10bb4:	mov	w7, w2
   10bb8:	mov	w5, w1
   10bbc:	b	10b24 <lzma_mode_is_supported@@XZ_5.0+0x19e0>
   10bc0:	ldp	x2, x3, [x0]
   10bc4:	sub	x4, x3, w1, uxtw
   10bc8:	cmp	x3, w1, uxtw
   10bcc:	b.hi	10be4 <lzma_mode_is_supported@@XZ_5.0+0x1aa0>  // b.pmore
   10bd0:	ldr	x0, [x0, #32]
   10bd4:	add	x2, x2, x0
   10bd8:	add	x2, x2, x4
   10bdc:	ldurb	w0, [x2, #-1]
   10be0:	ret
   10be4:	mov	x0, #0x0                   	// #0
   10be8:	b	10bd4 <lzma_mode_is_supported@@XZ_5.0+0x1a90>
   10bec:	ldr	w1, [x0, #20]
   10bf0:	cmp	w1, #0x4
   10bf4:	b.hi	10c20 <lzma_mode_is_supported@@XZ_5.0+0x1adc>  // b.pmore
   10bf8:	ldr	w2, [x0, #24]
   10bfc:	cmp	w2, #0x4
   10c00:	b.hi	10c20 <lzma_mode_is_supported@@XZ_5.0+0x1adc>  // b.pmore
   10c04:	add	w1, w1, w2
   10c08:	cmp	w1, #0x4
   10c0c:	b.hi	10c20 <lzma_mode_is_supported@@XZ_5.0+0x1adc>  // b.pmore
   10c10:	ldr	w0, [x0, #28]
   10c14:	cmp	w0, #0x4
   10c18:	cset	w0, ls  // ls = plast
   10c1c:	ret
   10c20:	mov	w0, #0x0                   	// #0
   10c24:	b	10c1c <lzma_mode_is_supported@@XZ_5.0+0x1ad8>
   10c28:	str	x1, [x0, #28312]
   10c2c:	ret
   10c30:	ldp	w9, w8, [x1, #20]
   10c34:	add	x3, x0, #0x4, lsl #12
   10c38:	ldr	w4, [x1, #28]
   10c3c:	mov	w2, #0x1                   	// #1
   10c40:	add	w5, w9, w8
   10c44:	mov	w10, #0x400                 	// #1024
   10c48:	mov	x1, #0x600                 	// #1536
   10c4c:	lsl	w4, w2, w4
   10c50:	sub	w7, w4, #0x1
   10c54:	lsl	w5, w2, w5
   10c58:	mov	x2, #0x0                   	// #0
   10c5c:	str	w7, [x3, #11916]
   10c60:	cmp	w5, w2
   10c64:	b.hi	10e64 <lzma_mode_is_supported@@XZ_5.0+0x1d20>  // b.pmore
   10c68:	mov	w1, #0x1                   	// #1
   10c6c:	mov	x12, #0x6e00                	// #28160
   10c70:	lsl	w1, w1, w8
   10c74:	sub	w1, w1, #0x1
   10c78:	str	w1, [x3, #11924]
   10c7c:	add	x1, x0, x12
   10c80:	mov	x2, #0xffffffff            	// #4294967295
   10c84:	str	w7, [x3, #11916]
   10c88:	str	w9, [x3, #11920]
   10c8c:	mov	x11, #0x6198                	// #24984
   10c90:	mov	x13, #0x6180                	// #24960
   10c94:	add	x8, x0, x11
   10c98:	add	x7, x0, #0x6, lsl #12
   10c9c:	stur	x2, [x1, #108]
   10ca0:	mov	x2, #0x5                   	// #5
   10ca4:	stur	x2, [x1, #116]
   10ca8:	stur	xzr, [x1, #124]
   10cac:	mov	w2, #0x400                 	// #1024
   10cb0:	stur	xzr, [x1, #132]
   10cb4:	add	x1, x0, x13
   10cb8:	mov	x5, x7
   10cbc:	mov	w6, #0x0                   	// #0
   10cc0:	strh	w2, [x5]
   10cc4:	add	w6, w6, #0x1
   10cc8:	strh	w2, [x5, #480]
   10ccc:	cmp	w4, w6
   10cd0:	add	x5, x5, #0x2
   10cd4:	b.ne	10cc0 <lzma_mode_is_supported@@XZ_5.0+0x1b7c>  // b.any
   10cd8:	strh	w2, [x1]
   10cdc:	add	x1, x1, #0x2
   10ce0:	strh	w2, [x1, #22]
   10ce4:	add	x7, x7, #0x20
   10ce8:	strh	w2, [x1, #46]
   10cec:	strh	w2, [x1, #70]
   10cf0:	cmp	x8, x1
   10cf4:	b.ne	10cb8 <lzma_mode_is_supported@@XZ_5.0+0x1b74>  // b.any
   10cf8:	mov	x9, #0x6360                	// #25440
   10cfc:	mov	x10, #0x6560                	// #25952
   10d00:	add	x1, x0, x9
   10d04:	add	x5, x0, x10
   10d08:	mov	w6, #0x400                 	// #1024
   10d0c:	mov	x2, #0x0                   	// #0
   10d10:	strh	w6, [x1, x2, lsl #1]
   10d14:	add	x2, x2, #0x1
   10d18:	cmp	x2, #0x40
   10d1c:	b.ne	10d10 <lzma_mode_is_supported@@XZ_5.0+0x1bcc>  // b.any
   10d20:	add	x1, x1, #0x80
   10d24:	cmp	x1, x5
   10d28:	b.ne	10d0c <lzma_mode_is_supported@@XZ_5.0+0x1bc8>  // b.any
   10d2c:	mov	x8, #0x6644                	// #26180
   10d30:	add	x2, x0, x8
   10d34:	mov	w5, #0x400                 	// #1024
   10d38:	strh	w5, [x1], #2
   10d3c:	cmp	x2, x1
   10d40:	b.ne	10d38 <lzma_mode_is_supported@@XZ_5.0+0x1bf4>  // b.any
   10d44:	mov	x1, x2
   10d48:	mov	x7, #0x6664                	// #26212
   10d4c:	add	x2, x0, x7
   10d50:	mov	w5, #0x400                 	// #1024
   10d54:	strh	w5, [x1], #2
   10d58:	cmp	x1, x2
   10d5c:	b.ne	10d54 <lzma_mode_is_supported@@XZ_5.0+0x1c10>  // b.any
   10d60:	mov	w1, #0x4000400             	// #67109888
   10d64:	mov	x6, #0x6668                	// #26216
   10d68:	str	w1, [x3, #9828]
   10d6c:	mov	w5, #0x0                   	// #0
   10d70:	str	w1, [x3, #10856]
   10d74:	add	x1, x0, x6
   10d78:	mov	w2, #0x400                 	// #1024
   10d7c:	strh	w2, [x1]
   10d80:	add	w5, w5, #0x1
   10d84:	strh	w2, [x1, #2]
   10d88:	cmp	w4, w5
   10d8c:	strh	w2, [x1, #4]
   10d90:	add	x1, x1, #0x10
   10d94:	sturh	w2, [x1, #-10]
   10d98:	sturh	w2, [x1, #-8]
   10d9c:	sturh	w2, [x1, #-6]
   10da0:	sturh	w2, [x1, #-4]
   10da4:	sturh	w2, [x1, #-2]
   10da8:	strh	w2, [x1, #240]
   10dac:	strh	w2, [x1, #242]
   10db0:	strh	w2, [x1, #244]
   10db4:	strh	w2, [x1, #246]
   10db8:	strh	w2, [x1, #248]
   10dbc:	strh	w2, [x1, #250]
   10dc0:	strh	w2, [x1, #252]
   10dc4:	strh	w2, [x1, #254]
   10dc8:	strh	w2, [x1, #1012]
   10dcc:	strh	w2, [x1, #1014]
   10dd0:	strh	w2, [x1, #1016]
   10dd4:	strh	w2, [x1, #1018]
   10dd8:	strh	w2, [x1, #1020]
   10ddc:	strh	w2, [x1, #1022]
   10de0:	strh	w2, [x1, #1024]
   10de4:	strh	w2, [x1, #1026]
   10de8:	strh	w2, [x1, #1268]
   10dec:	strh	w2, [x1, #1270]
   10df0:	strh	w2, [x1, #1272]
   10df4:	strh	w2, [x1, #1274]
   10df8:	strh	w2, [x1, #1276]
   10dfc:	strh	w2, [x1, #1278]
   10e00:	strh	w2, [x1, #1280]
   10e04:	strh	w2, [x1, #1282]
   10e08:	b.ne	10d7c <lzma_mode_is_supported@@XZ_5.0+0x1c38>  // b.any
   10e0c:	mov	x4, #0x6868                	// #26728
   10e10:	mov	x5, #0x6a68                	// #27240
   10e14:	add	x2, x0, x5
   10e18:	add	x1, x0, x4
   10e1c:	mov	w4, #0x400                 	// #1024
   10e20:	strh	w4, [x1], #2
   10e24:	cmp	x1, x2
   10e28:	b.ne	10e20 <lzma_mode_is_supported@@XZ_5.0+0x1cdc>  // b.any
   10e2c:	mov	x1, #0x6c6c                	// #27756
   10e30:	mov	x2, #0x6e6c                	// #28268
   10e34:	add	x1, x0, x1
   10e38:	add	x2, x0, x2
   10e3c:	mov	w4, #0x400                 	// #1024
   10e40:	strh	w4, [x1], #2
   10e44:	cmp	x1, x2
   10e48:	b.ne	10e40 <lzma_mode_is_supported@@XZ_5.0+0x1cfc>  // b.any
   10e4c:	mov	w1, #0x1                   	// #1
   10e50:	str	w1, [x3, #11936]
   10e54:	str	xzr, [x0, #28328]
   10e58:	str	xzr, [x0, #28336]
   10e5c:	str	xzr, [x0, #28344]
   10e60:	ret
   10e64:	madd	x11, x2, x1, x0
   10e68:	mov	x6, #0x0                   	// #0
   10e6c:	strh	w10, [x11, x6, lsl #1]
   10e70:	add	x6, x6, #0x1
   10e74:	cmp	x6, #0x300
   10e78:	b.ne	10e6c <lzma_mode_is_supported@@XZ_5.0+0x1d28>  // b.any
   10e7c:	add	x2, x2, #0x1
   10e80:	b	10c60 <lzma_mode_is_supported@@XZ_5.0+0x1b1c>
   10e84:	stp	x29, x30, [sp, #-272]!
   10e88:	mov	x17, #0x6e6c                	// #28268
   10e8c:	mov	x5, x2
   10e90:	mov	x29, sp
   10e94:	stp	x23, x24, [sp, #48]
   10e98:	mov	x23, x0
   10e9c:	add	x0, x0, x17
   10ea0:	stp	x19, x20, [sp, #16]
   10ea4:	stp	x21, x22, [sp, #32]
   10ea8:	stp	x25, x26, [sp, #64]
   10eac:	stp	x27, x28, [sp, #80]
   10eb0:	str	x1, [sp, #96]
   10eb4:	str	x3, [sp, #120]
   10eb8:	ldr	w28, [x0, #8]
   10ebc:	ldr	x1, [sp, #120]
   10ec0:	ldr	x22, [x1]
   10ec4:	cbnz	w28, 10fa8 <lzma_mode_is_supported@@XZ_5.0+0x1e64>
   10ec8:	ldr	x0, [sp, #96]
   10ecc:	add	x8, x23, #0x4, lsl #12
   10ed0:	ldr	x24, [x23, #28328]
   10ed4:	ldp	x0, x1, [x0]
   10ed8:	stp	x0, x1, [sp, #224]
   10edc:	ldr	w19, [x8, #11884]
   10ee0:	ldr	x0, [sp, #96]
   10ee4:	ldr	w20, [x8, #11888]
   10ee8:	ldr	w27, [x8, #11896]
   10eec:	ldp	x0, x1, [x0, #16]
   10ef0:	stp	x0, x1, [sp, #240]
   10ef4:	ldr	w25, [x8, #11900]
   10ef8:	ldr	x0, [sp, #96]
   10efc:	ldr	w26, [x8, #11904]
   10f00:	ldr	w14, [x8, #11908]
   10f04:	ldp	x0, x1, [x0, #32]
   10f08:	stp	x0, x1, [sp, #256]
   10f0c:	ldr	w21, [x8, #11952]
   10f10:	ldr	x0, [sp, #232]
   10f14:	str	x0, [sp, #104]
   10f18:	ldr	w0, [x8, #11912]
   10f1c:	str	w0, [sp, #128]
   10f20:	ldr	w0, [x8, #11916]
   10f24:	str	w0, [sp, #132]
   10f28:	ldr	w0, [x8, #11924]
   10f2c:	str	w0, [sp, #140]
   10f30:	ldr	w0, [x8, #11920]
   10f34:	ldr	w1, [sp, #104]
   10f38:	str	w0, [sp, #136]
   10f3c:	ldr	w0, [sp, #132]
   10f40:	ldr	w10, [x8, #11956]
   10f44:	ldr	w6, [x8, #11960]
   10f48:	and	w0, w0, w1
   10f4c:	ldr	w7, [x8, #11964]
   10f50:	ldr	x1, [x23, #28312]
   10f54:	str	x1, [sp, #112]
   10f58:	cmn	x1, #0x1
   10f5c:	b.eq	10f84 <lzma_mode_is_supported@@XZ_5.0+0x1e40>  // b.none
   10f60:	ldr	x2, [sp, #104]
   10f64:	ldr	x1, [sp, #248]
   10f68:	sub	x1, x1, x2
   10f6c:	ldr	x2, [sp, #112]
   10f70:	cmp	x2, x1
   10f74:	b.cs	10f84 <lzma_mode_is_supported@@XZ_5.0+0x1e40>  // b.hs, b.nlast
   10f78:	ldr	x1, [sp, #104]
   10f7c:	add	x1, x1, x2
   10f80:	str	x1, [sp, #248]
   10f84:	ldr	w2, [x8, #11936]
   10f88:	cmp	w2, #0x46
   10f8c:	b.hi	1391c <lzma_mode_is_supported@@XZ_5.0+0x47d8>  // b.pmore
   10f90:	adrp	x1, 1b000 <lzma_mode_is_supported@@XZ_5.0+0xbebc>
   10f94:	add	x1, x1, #0x900
   10f98:	ldrh	w1, [x1, w2, uxtw #1]
   10f9c:	adr	x2, 10fa8 <lzma_mode_is_supported@@XZ_5.0+0x1e64>
   10fa0:	add	x1, x2, w1, sxth #2
   10fa4:	br	x1
   10fa8:	cmp	x4, x22
   10fac:	b.eq	1395c <lzma_mode_is_supported@@XZ_5.0+0x4818>  // b.none
   10fb0:	ldrb	w2, [x5, x22]
   10fb4:	cmp	w28, #0x5
   10fb8:	b.ne	10fc0 <lzma_mode_is_supported@@XZ_5.0+0x1e7c>  // b.any
   10fbc:	cbnz	w2, 13964 <lzma_mode_is_supported@@XZ_5.0+0x4820>
   10fc0:	ldr	w1, [x0, #4]
   10fc4:	sub	w9, w28, #0x1
   10fc8:	add	x22, x22, #0x1
   10fcc:	orr	w1, w2, w1, lsl #8
   10fd0:	stp	w1, w9, [x0, #4]
   10fd4:	ldr	x1, [sp, #120]
   10fd8:	str	x22, [x1]
   10fdc:	b	10eb8 <lzma_mode_is_supported@@XZ_5.0+0x1d74>
   10fe0:	ldrb	w1, [x5, x22]
   10fe4:	lsl	w19, w19, #8
   10fe8:	add	x22, x22, #0x1
   10fec:	orr	w20, w1, w20, lsl #8
   10ff0:	mov	w1, w0
   10ff4:	lsr	w13, w19, #11
   10ff8:	add	x1, x1, w27, uxtw #4
   10ffc:	add	x1, x23, x1, lsl #1
   11000:	add	x1, x1, #0x6, lsl #12
   11004:	ldrh	w2, [x1]
   11008:	mul	w13, w13, w2
   1100c:	cmp	w13, w20
   11010:	b.ls	11ab8 <lzma_mode_is_supported@@XZ_5.0+0x2974>  // b.plast
   11014:	mov	w0, #0x800                 	// #2048
   11018:	sub	w0, w0, w2
   1101c:	ldr	x24, [sp, #232]
   11020:	add	w2, w2, w0, lsr #5
   11024:	ldr	w0, [sp, #140]
   11028:	add	x15, sp, #0xe0
   1102c:	strh	w2, [x1]
   11030:	mov	w1, #0x0                   	// #0
   11034:	and	w24, w0, w24
   11038:	ldrb	w0, [sp, #136]
   1103c:	str	w14, [sp, #144]
   11040:	str	w6, [sp, #152]
   11044:	lsl	x18, x24, x0
   11048:	mov	x0, x15
   1104c:	str	w7, [sp, #160]
   11050:	stp	x5, x4, [sp, #168]
   11054:	str	x8, [sp, #184]
   11058:	str	w10, [sp, #208]
   1105c:	bl	10bc0 <lzma_mode_is_supported@@XZ_5.0+0x1a7c>
   11060:	ldr	w1, [sp, #136]
   11064:	and	w24, w0, #0xff
   11068:	mov	w0, #0x8                   	// #8
   1106c:	ldr	w14, [sp, #144]
   11070:	sub	w0, w0, w1
   11074:	ldr	w10, [sp, #208]
   11078:	cmp	w27, #0x6
   1107c:	asr	w24, w24, w0
   11080:	mov	x0, #0x600                 	// #1536
   11084:	add	x24, x18, w24, sxtw
   11088:	ldp	x5, x4, [sp, #168]
   1108c:	madd	x24, x24, x0, x23
   11090:	ldr	x8, [sp, #184]
   11094:	b.hi	11560 <lzma_mode_is_supported@@XZ_5.0+0x241c>  // b.pmore
   11098:	ldr	w6, [sp, #152]
   1109c:	mov	w19, w13
   110a0:	ldr	w7, [sp, #160]
   110a4:	mov	w21, #0x1                   	// #1
   110a8:	mov	w0, #0xffffff              	// #16777215
   110ac:	cmp	w19, w0
   110b0:	b.hi	111a4 <lzma_mode_is_supported@@XZ_5.0+0x2060>  // b.pmore
   110b4:	cmp	x4, x22
   110b8:	b.ne	11194 <lzma_mode_is_supported@@XZ_5.0+0x2050>  // b.any
   110bc:	add	x0, x23, #0x4, lsl #12
   110c0:	mov	w1, #0x2                   	// #2
   110c4:	str	w1, [x0, #11936]
   110c8:	ldr	x1, [sp, #96]
   110cc:	str	w19, [x8, #11884]
   110d0:	ldr	x2, [sp, #96]
   110d4:	str	w20, [x8, #11888]
   110d8:	ldr	x0, [sp, #232]
   110dc:	str	x0, [x1, #8]
   110e0:	ldr	x1, [sp, #240]
   110e4:	str	x1, [x2, #16]
   110e8:	ldr	x1, [sp, #120]
   110ec:	str	wzr, [x8, #11892]
   110f0:	str	w27, [x8, #11896]
   110f4:	str	w25, [x8, #11900]
   110f8:	str	x22, [x1]
   110fc:	ldr	w1, [sp, #128]
   11100:	str	w26, [x8, #11904]
   11104:	str	w14, [x8, #11908]
   11108:	str	w1, [x8, #11912]
   1110c:	str	x24, [x23, #28328]
   11110:	ldr	x1, [x23, #28312]
   11114:	str	w21, [x8, #11952]
   11118:	str	w10, [x8, #11956]
   1111c:	str	w6, [x8, #11960]
   11120:	cmn	x1, #0x1
   11124:	str	w7, [x8, #11964]
   11128:	b.eq	13950 <lzma_mode_is_supported@@XZ_5.0+0x480c>  // b.none
   1112c:	ldr	x2, [sp, #104]
   11130:	sub	x27, x2, x0
   11134:	add	x27, x27, x1
   11138:	str	x27, [x23, #28312]
   1113c:	cbnz	x27, 13950 <lzma_mode_is_supported@@XZ_5.0+0x480c>
   11140:	cbnz	w28, 13950 <lzma_mode_is_supported@@XZ_5.0+0x480c>
   11144:	ldr	w28, [x8, #11936]
   11148:	cbz	w28, 11174 <lzma_mode_is_supported@@XZ_5.0+0x2030>
   1114c:	cmp	w28, #0x1
   11150:	b.ne	13964 <lzma_mode_is_supported@@XZ_5.0+0x4820>  // b.any
   11154:	add	x0, x23, #0x4, lsl #12
   11158:	cmp	w20, #0x0
   1115c:	mov	w9, #0x9                   	// #9
   11160:	mov	w1, #0xffffffff            	// #-1
   11164:	csinc	w28, w9, wzr, ne  // ne = any
   11168:	str	w1, [x0, #11884]
   1116c:	mov	x0, #0x500000000           	// #21474836480
   11170:	str	x0, [x23, #28272]
   11174:	mov	w0, w28
   11178:	ldp	x19, x20, [sp, #16]
   1117c:	ldp	x21, x22, [sp, #32]
   11180:	ldp	x23, x24, [sp, #48]
   11184:	ldp	x25, x26, [sp, #64]
   11188:	ldp	x27, x28, [sp, #80]
   1118c:	ldp	x29, x30, [sp], #272
   11190:	ret
   11194:	ldrb	w0, [x5, x22]
   11198:	lsl	w19, w19, #8
   1119c:	add	x22, x22, #0x1
   111a0:	orr	w20, w0, w20, lsl #8
   111a4:	ldrh	w0, [x24, w21, uxtw #1]
   111a8:	lsr	w1, w19, #11
   111ac:	ubfiz	x2, x21, #1, #32
   111b0:	lsl	w21, w21, #1
   111b4:	mul	w1, w1, w0
   111b8:	cmp	w1, w20
   111bc:	b.ls	111f4 <lzma_mode_is_supported@@XZ_5.0+0x20b0>  // b.plast
   111c0:	mov	w13, #0x800                 	// #2048
   111c4:	sub	w13, w13, w0
   111c8:	mov	w19, w1
   111cc:	add	w0, w0, w13, lsr #5
   111d0:	strh	w0, [x24, x2]
   111d4:	mov	w0, #0xffffff              	// #16777215
   111d8:	cmp	w19, w0
   111dc:	b.hi	1121c <lzma_mode_is_supported@@XZ_5.0+0x20d8>  // b.pmore
   111e0:	cmp	x4, x22
   111e4:	b.ne	1120c <lzma_mode_is_supported@@XZ_5.0+0x20c8>  // b.any
   111e8:	add	x0, x23, #0x4, lsl #12
   111ec:	mov	w1, #0x3                   	// #3
   111f0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   111f4:	sub	w0, w0, w0, lsr #5
   111f8:	sub	w19, w19, w1
   111fc:	sub	w20, w20, w1
   11200:	add	w21, w21, #0x1
   11204:	strh	w0, [x24, x2]
   11208:	b	111d4 <lzma_mode_is_supported@@XZ_5.0+0x2090>
   1120c:	ldrb	w0, [x5, x22]
   11210:	lsl	w19, w19, #8
   11214:	add	x22, x22, #0x1
   11218:	orr	w20, w0, w20, lsl #8
   1121c:	ldrh	w0, [x24, w21, uxtw #1]
   11220:	lsr	w1, w19, #11
   11224:	ubfiz	x2, x21, #1, #32
   11228:	lsl	w21, w21, #1
   1122c:	mul	w1, w1, w0
   11230:	cmp	w1, w20
   11234:	b.ls	1126c <lzma_mode_is_supported@@XZ_5.0+0x2128>  // b.plast
   11238:	mov	w13, #0x800                 	// #2048
   1123c:	sub	w13, w13, w0
   11240:	mov	w19, w1
   11244:	add	w0, w0, w13, lsr #5
   11248:	strh	w0, [x24, x2]
   1124c:	mov	w0, #0xffffff              	// #16777215
   11250:	cmp	w19, w0
   11254:	b.hi	11294 <lzma_mode_is_supported@@XZ_5.0+0x2150>  // b.pmore
   11258:	cmp	x4, x22
   1125c:	b.ne	11284 <lzma_mode_is_supported@@XZ_5.0+0x2140>  // b.any
   11260:	add	x0, x23, #0x4, lsl #12
   11264:	mov	w1, #0x4                   	// #4
   11268:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   1126c:	sub	w0, w0, w0, lsr #5
   11270:	sub	w19, w19, w1
   11274:	sub	w20, w20, w1
   11278:	add	w21, w21, #0x1
   1127c:	strh	w0, [x24, x2]
   11280:	b	1124c <lzma_mode_is_supported@@XZ_5.0+0x2108>
   11284:	ldrb	w0, [x5, x22]
   11288:	lsl	w19, w19, #8
   1128c:	add	x22, x22, #0x1
   11290:	orr	w20, w0, w20, lsl #8
   11294:	ldrh	w0, [x24, w21, uxtw #1]
   11298:	lsr	w1, w19, #11
   1129c:	ubfiz	x2, x21, #1, #32
   112a0:	lsl	w21, w21, #1
   112a4:	mul	w1, w1, w0
   112a8:	cmp	w1, w20
   112ac:	b.ls	112e4 <lzma_mode_is_supported@@XZ_5.0+0x21a0>  // b.plast
   112b0:	mov	w13, #0x800                 	// #2048
   112b4:	sub	w13, w13, w0
   112b8:	mov	w19, w1
   112bc:	add	w0, w0, w13, lsr #5
   112c0:	strh	w0, [x24, x2]
   112c4:	mov	w0, #0xffffff              	// #16777215
   112c8:	cmp	w19, w0
   112cc:	b.hi	1130c <lzma_mode_is_supported@@XZ_5.0+0x21c8>  // b.pmore
   112d0:	cmp	x4, x22
   112d4:	b.ne	112fc <lzma_mode_is_supported@@XZ_5.0+0x21b8>  // b.any
   112d8:	add	x0, x23, #0x4, lsl #12
   112dc:	mov	w1, #0x5                   	// #5
   112e0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   112e4:	sub	w0, w0, w0, lsr #5
   112e8:	sub	w19, w19, w1
   112ec:	sub	w20, w20, w1
   112f0:	add	w21, w21, #0x1
   112f4:	strh	w0, [x24, x2]
   112f8:	b	112c4 <lzma_mode_is_supported@@XZ_5.0+0x2180>
   112fc:	ldrb	w0, [x5, x22]
   11300:	lsl	w19, w19, #8
   11304:	add	x22, x22, #0x1
   11308:	orr	w20, w0, w20, lsl #8
   1130c:	ldrh	w0, [x24, w21, uxtw #1]
   11310:	lsr	w1, w19, #11
   11314:	ubfiz	x2, x21, #1, #32
   11318:	lsl	w21, w21, #1
   1131c:	mul	w1, w1, w0
   11320:	cmp	w1, w20
   11324:	b.ls	1135c <lzma_mode_is_supported@@XZ_5.0+0x2218>  // b.plast
   11328:	mov	w13, #0x800                 	// #2048
   1132c:	sub	w13, w13, w0
   11330:	mov	w19, w1
   11334:	add	w0, w0, w13, lsr #5
   11338:	strh	w0, [x24, x2]
   1133c:	mov	w0, #0xffffff              	// #16777215
   11340:	cmp	w19, w0
   11344:	b.hi	11384 <lzma_mode_is_supported@@XZ_5.0+0x2240>  // b.pmore
   11348:	cmp	x4, x22
   1134c:	b.ne	11374 <lzma_mode_is_supported@@XZ_5.0+0x2230>  // b.any
   11350:	add	x0, x23, #0x4, lsl #12
   11354:	mov	w1, #0x6                   	// #6
   11358:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   1135c:	sub	w0, w0, w0, lsr #5
   11360:	sub	w19, w19, w1
   11364:	sub	w20, w20, w1
   11368:	add	w21, w21, #0x1
   1136c:	strh	w0, [x24, x2]
   11370:	b	1133c <lzma_mode_is_supported@@XZ_5.0+0x21f8>
   11374:	ldrb	w0, [x5, x22]
   11378:	lsl	w19, w19, #8
   1137c:	add	x22, x22, #0x1
   11380:	orr	w20, w0, w20, lsl #8
   11384:	ldrh	w0, [x24, w21, uxtw #1]
   11388:	lsr	w1, w19, #11
   1138c:	ubfiz	x2, x21, #1, #32
   11390:	lsl	w21, w21, #1
   11394:	mul	w1, w1, w0
   11398:	cmp	w1, w20
   1139c:	b.ls	113d4 <lzma_mode_is_supported@@XZ_5.0+0x2290>  // b.plast
   113a0:	mov	w13, #0x800                 	// #2048
   113a4:	sub	w13, w13, w0
   113a8:	mov	w19, w1
   113ac:	add	w0, w0, w13, lsr #5
   113b0:	strh	w0, [x24, x2]
   113b4:	mov	w0, #0xffffff              	// #16777215
   113b8:	cmp	w19, w0
   113bc:	b.hi	113fc <lzma_mode_is_supported@@XZ_5.0+0x22b8>  // b.pmore
   113c0:	cmp	x4, x22
   113c4:	b.ne	113ec <lzma_mode_is_supported@@XZ_5.0+0x22a8>  // b.any
   113c8:	add	x0, x23, #0x4, lsl #12
   113cc:	mov	w1, #0x7                   	// #7
   113d0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   113d4:	sub	w0, w0, w0, lsr #5
   113d8:	sub	w19, w19, w1
   113dc:	sub	w20, w20, w1
   113e0:	add	w21, w21, #0x1
   113e4:	strh	w0, [x24, x2]
   113e8:	b	113b4 <lzma_mode_is_supported@@XZ_5.0+0x2270>
   113ec:	ldrb	w0, [x5, x22]
   113f0:	lsl	w19, w19, #8
   113f4:	add	x22, x22, #0x1
   113f8:	orr	w20, w0, w20, lsl #8
   113fc:	ldrh	w0, [x24, w21, uxtw #1]
   11400:	lsr	w1, w19, #11
   11404:	ubfiz	x2, x21, #1, #32
   11408:	lsl	w21, w21, #1
   1140c:	mul	w1, w1, w0
   11410:	cmp	w1, w20
   11414:	b.ls	1144c <lzma_mode_is_supported@@XZ_5.0+0x2308>  // b.plast
   11418:	mov	w13, #0x800                 	// #2048
   1141c:	sub	w13, w13, w0
   11420:	mov	w19, w1
   11424:	add	w0, w0, w13, lsr #5
   11428:	strh	w0, [x24, x2]
   1142c:	mov	w0, #0xffffff              	// #16777215
   11430:	cmp	w19, w0
   11434:	b.hi	11474 <lzma_mode_is_supported@@XZ_5.0+0x2330>  // b.pmore
   11438:	cmp	x4, x22
   1143c:	b.ne	11464 <lzma_mode_is_supported@@XZ_5.0+0x2320>  // b.any
   11440:	add	x0, x23, #0x4, lsl #12
   11444:	mov	w1, #0x8                   	// #8
   11448:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   1144c:	sub	w0, w0, w0, lsr #5
   11450:	sub	w19, w19, w1
   11454:	sub	w20, w20, w1
   11458:	add	w21, w21, #0x1
   1145c:	strh	w0, [x24, x2]
   11460:	b	1142c <lzma_mode_is_supported@@XZ_5.0+0x22e8>
   11464:	ldrb	w0, [x5, x22]
   11468:	lsl	w19, w19, #8
   1146c:	add	x22, x22, #0x1
   11470:	orr	w20, w0, w20, lsl #8
   11474:	ldrh	w0, [x24, w21, uxtw #1]
   11478:	lsr	w1, w19, #11
   1147c:	ubfiz	x2, x21, #1, #32
   11480:	lsl	w21, w21, #1
   11484:	mul	w1, w1, w0
   11488:	cmp	w1, w20
   1148c:	b.ls	114c4 <lzma_mode_is_supported@@XZ_5.0+0x2380>  // b.plast
   11490:	mov	w13, #0x800                 	// #2048
   11494:	sub	w13, w13, w0
   11498:	mov	w19, w1
   1149c:	add	w0, w0, w13, lsr #5
   114a0:	strh	w0, [x24, x2]
   114a4:	mov	w0, #0xffffff              	// #16777215
   114a8:	cmp	w19, w0
   114ac:	b.hi	114ec <lzma_mode_is_supported@@XZ_5.0+0x23a8>  // b.pmore
   114b0:	cmp	x4, x22
   114b4:	b.ne	114dc <lzma_mode_is_supported@@XZ_5.0+0x2398>  // b.any
   114b8:	add	x0, x23, #0x4, lsl #12
   114bc:	mov	w1, #0x9                   	// #9
   114c0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   114c4:	sub	w0, w0, w0, lsr #5
   114c8:	sub	w19, w19, w1
   114cc:	sub	w20, w20, w1
   114d0:	add	w21, w21, #0x1
   114d4:	strh	w0, [x24, x2]
   114d8:	b	114a4 <lzma_mode_is_supported@@XZ_5.0+0x2360>
   114dc:	ldrb	w0, [x5, x22]
   114e0:	lsl	w19, w19, #8
   114e4:	add	x22, x22, #0x1
   114e8:	orr	w20, w0, w20, lsl #8
   114ec:	ldrh	w1, [x24, w21, uxtw #1]
   114f0:	lsr	w0, w19, #11
   114f4:	ubfiz	x13, x21, #1, #32
   114f8:	lsl	w21, w21, #1
   114fc:	mul	w0, w0, w1
   11500:	cmp	w0, w20
   11504:	b.ls	11548 <lzma_mode_is_supported@@XZ_5.0+0x2404>  // b.plast
   11508:	mov	w2, #0x800                 	// #2048
   1150c:	sub	w2, w2, w1
   11510:	add	w1, w1, w2, lsr #5
   11514:	strh	w1, [x24, x13]
   11518:	adrp	x1, 1b000 <lzma_mode_is_supported@@XZ_5.0+0xbebc>
   1151c:	add	x1, x1, #0x99c
   11520:	mov	w19, w0
   11524:	ldr	w27, [x1, w27, uxtw #2]
   11528:	ldr	x0, [sp, #232]
   1152c:	and	w2, w21, #0xff
   11530:	ldr	x1, [sp, #248]
   11534:	cmp	x0, x1
   11538:	b.ne	11a50 <lzma_mode_is_supported@@XZ_5.0+0x290c>  // b.any
   1153c:	add	x0, x23, #0x4, lsl #12
   11540:	mov	w1, #0x12                  	// #18
   11544:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11548:	sub	w20, w20, w0
   1154c:	sub	w1, w1, w1, lsr #5
   11550:	add	w21, w21, #0x1
   11554:	sub	w0, w19, w0
   11558:	strh	w1, [x24, x13]
   1155c:	b	11518 <lzma_mode_is_supported@@XZ_5.0+0x23d4>
   11560:	mov	w1, w25
   11564:	mov	x0, x15
   11568:	str	w14, [sp, #144]
   1156c:	mov	w21, #0x1                   	// #1
   11570:	stp	x5, x4, [sp, #152]
   11574:	str	x8, [sp, #168]
   11578:	str	w10, [sp, #208]
   1157c:	bl	10bc0 <lzma_mode_is_supported@@XZ_5.0+0x1a7c>
   11580:	ldp	x5, x4, [sp, #152]
   11584:	ubfiz	w7, w0, #1, #8
   11588:	ldr	w14, [sp, #144]
   1158c:	mov	w19, w13
   11590:	ldr	w10, [sp, #208]
   11594:	mov	w6, #0x100                 	// #256
   11598:	ldr	x8, [sp, #168]
   1159c:	and	w2, w6, w7
   115a0:	add	w0, w6, w21
   115a4:	mov	w1, #0xffffff              	// #16777215
   115a8:	add	w0, w0, w2
   115ac:	cmp	w19, w1
   115b0:	b.hi	115d8 <lzma_mode_is_supported@@XZ_5.0+0x2494>  // b.pmore
   115b4:	cmp	x4, x22
   115b8:	b.ne	115c8 <lzma_mode_is_supported@@XZ_5.0+0x2484>  // b.any
   115bc:	add	x0, x23, #0x4, lsl #12
   115c0:	mov	w1, #0xa                   	// #10
   115c4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   115c8:	ldrb	w1, [x5, x22]
   115cc:	lsl	w19, w19, #8
   115d0:	add	x22, x22, #0x1
   115d4:	orr	w20, w1, w20, lsl #8
   115d8:	ubfiz	x0, x0, #1, #32
   115dc:	lsr	w1, w19, #11
   115e0:	add	x13, x24, x0
   115e4:	lsl	w21, w21, #1
   115e8:	ldrh	w0, [x24, x0]
   115ec:	mul	w1, w1, w0
   115f0:	cmp	w1, w20
   115f4:	b.ls	11648 <lzma_mode_is_supported@@XZ_5.0+0x2504>  // b.plast
   115f8:	mov	w15, #0x800                 	// #2048
   115fc:	sub	w15, w15, w0
   11600:	bic	w2, w6, w2
   11604:	add	w0, w0, w15, lsr #5
   11608:	and	w0, w0, #0xffff
   1160c:	lsl	w7, w7, #1
   11610:	mov	w19, w1
   11614:	mov	w6, w2
   11618:	strh	w0, [x13]
   1161c:	and	w2, w6, w7
   11620:	add	w0, w6, w21
   11624:	mov	w1, #0xffffff              	// #16777215
   11628:	add	w0, w0, w2
   1162c:	cmp	w19, w1
   11630:	b.hi	11670 <lzma_mode_is_supported@@XZ_5.0+0x252c>  // b.pmore
   11634:	cmp	x4, x22
   11638:	b.ne	11660 <lzma_mode_is_supported@@XZ_5.0+0x251c>  // b.any
   1163c:	add	x0, x23, #0x4, lsl #12
   11640:	mov	w1, #0xb                   	// #11
   11644:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11648:	sub	w0, w0, w0, lsr #5
   1164c:	sub	w20, w20, w1
   11650:	and	w0, w0, #0xffff
   11654:	add	w21, w21, #0x1
   11658:	sub	w1, w19, w1
   1165c:	b	1160c <lzma_mode_is_supported@@XZ_5.0+0x24c8>
   11660:	ldrb	w1, [x5, x22]
   11664:	lsl	w19, w19, #8
   11668:	add	x22, x22, #0x1
   1166c:	orr	w20, w1, w20, lsl #8
   11670:	ubfiz	x0, x0, #1, #32
   11674:	lsr	w1, w19, #11
   11678:	add	x13, x24, x0
   1167c:	lsl	w21, w21, #1
   11680:	ldrh	w0, [x24, x0]
   11684:	mul	w1, w1, w0
   11688:	cmp	w1, w20
   1168c:	b.ls	116e0 <lzma_mode_is_supported@@XZ_5.0+0x259c>  // b.plast
   11690:	mov	w15, #0x800                 	// #2048
   11694:	sub	w15, w15, w0
   11698:	bic	w2, w6, w2
   1169c:	add	w0, w0, w15, lsr #5
   116a0:	and	w0, w0, #0xffff
   116a4:	lsl	w7, w7, #1
   116a8:	mov	w19, w1
   116ac:	mov	w6, w2
   116b0:	strh	w0, [x13]
   116b4:	and	w2, w6, w7
   116b8:	add	w0, w6, w21
   116bc:	mov	w1, #0xffffff              	// #16777215
   116c0:	add	w0, w0, w2
   116c4:	cmp	w19, w1
   116c8:	b.hi	11708 <lzma_mode_is_supported@@XZ_5.0+0x25c4>  // b.pmore
   116cc:	cmp	x4, x22
   116d0:	b.ne	116f8 <lzma_mode_is_supported@@XZ_5.0+0x25b4>  // b.any
   116d4:	add	x0, x23, #0x4, lsl #12
   116d8:	mov	w1, #0xc                   	// #12
   116dc:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   116e0:	sub	w0, w0, w0, lsr #5
   116e4:	sub	w20, w20, w1
   116e8:	and	w0, w0, #0xffff
   116ec:	add	w21, w21, #0x1
   116f0:	sub	w1, w19, w1
   116f4:	b	116a4 <lzma_mode_is_supported@@XZ_5.0+0x2560>
   116f8:	ldrb	w1, [x5, x22]
   116fc:	lsl	w19, w19, #8
   11700:	add	x22, x22, #0x1
   11704:	orr	w20, w1, w20, lsl #8
   11708:	ubfiz	x0, x0, #1, #32
   1170c:	lsr	w1, w19, #11
   11710:	add	x13, x24, x0
   11714:	lsl	w21, w21, #1
   11718:	ldrh	w0, [x24, x0]
   1171c:	mul	w1, w1, w0
   11720:	cmp	w1, w20
   11724:	b.ls	11778 <lzma_mode_is_supported@@XZ_5.0+0x2634>  // b.plast
   11728:	mov	w15, #0x800                 	// #2048
   1172c:	sub	w15, w15, w0
   11730:	bic	w2, w6, w2
   11734:	add	w0, w0, w15, lsr #5
   11738:	and	w0, w0, #0xffff
   1173c:	lsl	w7, w7, #1
   11740:	mov	w19, w1
   11744:	mov	w6, w2
   11748:	strh	w0, [x13]
   1174c:	and	w2, w6, w7
   11750:	add	w0, w6, w21
   11754:	mov	w1, #0xffffff              	// #16777215
   11758:	add	w0, w0, w2
   1175c:	cmp	w19, w1
   11760:	b.hi	117a0 <lzma_mode_is_supported@@XZ_5.0+0x265c>  // b.pmore
   11764:	cmp	x4, x22
   11768:	b.ne	11790 <lzma_mode_is_supported@@XZ_5.0+0x264c>  // b.any
   1176c:	add	x0, x23, #0x4, lsl #12
   11770:	mov	w1, #0xd                   	// #13
   11774:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11778:	sub	w0, w0, w0, lsr #5
   1177c:	sub	w20, w20, w1
   11780:	and	w0, w0, #0xffff
   11784:	add	w21, w21, #0x1
   11788:	sub	w1, w19, w1
   1178c:	b	1173c <lzma_mode_is_supported@@XZ_5.0+0x25f8>
   11790:	ldrb	w1, [x5, x22]
   11794:	lsl	w19, w19, #8
   11798:	add	x22, x22, #0x1
   1179c:	orr	w20, w1, w20, lsl #8
   117a0:	ubfiz	x0, x0, #1, #32
   117a4:	lsr	w1, w19, #11
   117a8:	add	x13, x24, x0
   117ac:	lsl	w21, w21, #1
   117b0:	ldrh	w0, [x24, x0]
   117b4:	mul	w1, w1, w0
   117b8:	cmp	w1, w20
   117bc:	b.ls	11810 <lzma_mode_is_supported@@XZ_5.0+0x26cc>  // b.plast
   117c0:	mov	w15, #0x800                 	// #2048
   117c4:	sub	w15, w15, w0
   117c8:	bic	w2, w6, w2
   117cc:	add	w0, w0, w15, lsr #5
   117d0:	and	w0, w0, #0xffff
   117d4:	lsl	w7, w7, #1
   117d8:	mov	w19, w1
   117dc:	mov	w6, w2
   117e0:	strh	w0, [x13]
   117e4:	and	w2, w6, w7
   117e8:	add	w0, w6, w21
   117ec:	mov	w1, #0xffffff              	// #16777215
   117f0:	add	w0, w0, w2
   117f4:	cmp	w19, w1
   117f8:	b.hi	11838 <lzma_mode_is_supported@@XZ_5.0+0x26f4>  // b.pmore
   117fc:	cmp	x4, x22
   11800:	b.ne	11828 <lzma_mode_is_supported@@XZ_5.0+0x26e4>  // b.any
   11804:	add	x0, x23, #0x4, lsl #12
   11808:	mov	w1, #0xe                   	// #14
   1180c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11810:	sub	w0, w0, w0, lsr #5
   11814:	sub	w20, w20, w1
   11818:	and	w0, w0, #0xffff
   1181c:	add	w21, w21, #0x1
   11820:	sub	w1, w19, w1
   11824:	b	117d4 <lzma_mode_is_supported@@XZ_5.0+0x2690>
   11828:	ldrb	w1, [x5, x22]
   1182c:	lsl	w19, w19, #8
   11830:	add	x22, x22, #0x1
   11834:	orr	w20, w1, w20, lsl #8
   11838:	ubfiz	x0, x0, #1, #32
   1183c:	lsr	w1, w19, #11
   11840:	add	x13, x24, x0
   11844:	lsl	w21, w21, #1
   11848:	ldrh	w0, [x24, x0]
   1184c:	mul	w1, w1, w0
   11850:	cmp	w1, w20
   11854:	b.ls	118a8 <lzma_mode_is_supported@@XZ_5.0+0x2764>  // b.plast
   11858:	mov	w15, #0x800                 	// #2048
   1185c:	sub	w15, w15, w0
   11860:	bic	w2, w6, w2
   11864:	add	w0, w0, w15, lsr #5
   11868:	and	w0, w0, #0xffff
   1186c:	lsl	w7, w7, #1
   11870:	mov	w19, w1
   11874:	mov	w6, w2
   11878:	strh	w0, [x13]
   1187c:	and	w2, w6, w7
   11880:	add	w0, w6, w21
   11884:	mov	w1, #0xffffff              	// #16777215
   11888:	add	w0, w0, w2
   1188c:	cmp	w19, w1
   11890:	b.hi	118d0 <lzma_mode_is_supported@@XZ_5.0+0x278c>  // b.pmore
   11894:	cmp	x4, x22
   11898:	b.ne	118c0 <lzma_mode_is_supported@@XZ_5.0+0x277c>  // b.any
   1189c:	add	x0, x23, #0x4, lsl #12
   118a0:	mov	w1, #0xf                   	// #15
   118a4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   118a8:	sub	w0, w0, w0, lsr #5
   118ac:	sub	w20, w20, w1
   118b0:	and	w0, w0, #0xffff
   118b4:	add	w21, w21, #0x1
   118b8:	sub	w1, w19, w1
   118bc:	b	1186c <lzma_mode_is_supported@@XZ_5.0+0x2728>
   118c0:	ldrb	w1, [x5, x22]
   118c4:	lsl	w19, w19, #8
   118c8:	add	x22, x22, #0x1
   118cc:	orr	w20, w1, w20, lsl #8
   118d0:	ubfiz	x0, x0, #1, #32
   118d4:	lsr	w1, w19, #11
   118d8:	add	x13, x24, x0
   118dc:	lsl	w21, w21, #1
   118e0:	ldrh	w0, [x24, x0]
   118e4:	mul	w1, w1, w0
   118e8:	cmp	w1, w20
   118ec:	b.ls	11940 <lzma_mode_is_supported@@XZ_5.0+0x27fc>  // b.plast
   118f0:	mov	w15, #0x800                 	// #2048
   118f4:	sub	w15, w15, w0
   118f8:	bic	w2, w6, w2
   118fc:	add	w0, w0, w15, lsr #5
   11900:	and	w0, w0, #0xffff
   11904:	lsl	w7, w7, #1
   11908:	mov	w19, w1
   1190c:	mov	w6, w2
   11910:	strh	w0, [x13]
   11914:	and	w2, w6, w7
   11918:	add	w0, w6, w21
   1191c:	mov	w1, #0xffffff              	// #16777215
   11920:	add	w0, w0, w2
   11924:	cmp	w19, w1
   11928:	b.hi	11968 <lzma_mode_is_supported@@XZ_5.0+0x2824>  // b.pmore
   1192c:	cmp	x4, x22
   11930:	b.ne	11958 <lzma_mode_is_supported@@XZ_5.0+0x2814>  // b.any
   11934:	add	x0, x23, #0x4, lsl #12
   11938:	mov	w1, #0x10                  	// #16
   1193c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11940:	sub	w0, w0, w0, lsr #5
   11944:	sub	w20, w20, w1
   11948:	and	w0, w0, #0xffff
   1194c:	add	w21, w21, #0x1
   11950:	sub	w1, w19, w1
   11954:	b	11904 <lzma_mode_is_supported@@XZ_5.0+0x27c0>
   11958:	ldrb	w1, [x5, x22]
   1195c:	lsl	w19, w19, #8
   11960:	add	x22, x22, #0x1
   11964:	orr	w20, w1, w20, lsl #8
   11968:	ubfiz	x0, x0, #1, #32
   1196c:	lsr	w1, w19, #11
   11970:	add	x13, x24, x0
   11974:	lsl	w21, w21, #1
   11978:	ldrh	w0, [x24, x0]
   1197c:	mul	w1, w1, w0
   11980:	cmp	w1, w20
   11984:	b.ls	119d8 <lzma_mode_is_supported@@XZ_5.0+0x2894>  // b.plast
   11988:	mov	w15, #0x800                 	// #2048
   1198c:	sub	w15, w15, w0
   11990:	bic	w2, w6, w2
   11994:	add	w0, w0, w15, lsr #5
   11998:	and	w0, w0, #0xffff
   1199c:	lsl	w7, w7, #1
   119a0:	mov	w19, w1
   119a4:	mov	w6, w2
   119a8:	strh	w0, [x13]
   119ac:	and	w2, w6, w7
   119b0:	add	w0, w6, w21
   119b4:	mov	w1, #0xffffff              	// #16777215
   119b8:	add	w0, w0, w2
   119bc:	cmp	w19, w1
   119c0:	b.hi	11a00 <lzma_mode_is_supported@@XZ_5.0+0x28bc>  // b.pmore
   119c4:	cmp	x4, x22
   119c8:	b.ne	119f0 <lzma_mode_is_supported@@XZ_5.0+0x28ac>  // b.any
   119cc:	add	x0, x23, #0x4, lsl #12
   119d0:	mov	w1, #0x11                  	// #17
   119d4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   119d8:	sub	w0, w0, w0, lsr #5
   119dc:	sub	w20, w20, w1
   119e0:	and	w0, w0, #0xffff
   119e4:	add	w21, w21, #0x1
   119e8:	sub	w1, w19, w1
   119ec:	b	1199c <lzma_mode_is_supported@@XZ_5.0+0x2858>
   119f0:	ldrb	w1, [x5, x22]
   119f4:	lsl	w19, w19, #8
   119f8:	add	x22, x22, #0x1
   119fc:	orr	w20, w1, w20, lsl #8
   11a00:	ldrh	w1, [x24, w0, uxtw #1]
   11a04:	ubfiz	x13, x0, #1, #32
   11a08:	lsr	w0, w19, #11
   11a0c:	lsl	w21, w21, #1
   11a10:	mul	w0, w0, w1
   11a14:	cmp	w0, w20
   11a18:	b.ls	11a34 <lzma_mode_is_supported@@XZ_5.0+0x28f0>  // b.plast
   11a1c:	mov	w15, #0x800                 	// #2048
   11a20:	sub	w15, w15, w1
   11a24:	bic	w6, w6, w2
   11a28:	add	w1, w1, w15, lsr #5
   11a2c:	strh	w1, [x24, x13]
   11a30:	b	11518 <lzma_mode_is_supported@@XZ_5.0+0x23d4>
   11a34:	sub	w20, w20, w0
   11a38:	sub	w1, w1, w1, lsr #5
   11a3c:	add	w21, w21, #0x1
   11a40:	sub	w0, w19, w0
   11a44:	mov	w6, w2
   11a48:	strh	w1, [x24, x13]
   11a4c:	b	11518 <lzma_mode_is_supported@@XZ_5.0+0x23d4>
   11a50:	add	x1, x0, #0x1
   11a54:	str	x1, [sp, #232]
   11a58:	ldr	x1, [sp, #224]
   11a5c:	strb	w2, [x1, x0]
   11a60:	ldp	x0, x1, [sp, #232]
   11a64:	cmp	x0, x1
   11a68:	b.ls	11a70 <lzma_mode_is_supported@@XZ_5.0+0x292c>  // b.plast
   11a6c:	str	x0, [sp, #240]
   11a70:	ldr	x0, [sp, #232]
   11a74:	ldr	w1, [sp, #132]
   11a78:	and	w0, w1, w0
   11a7c:	ldr	x1, [sp, #112]
   11a80:	cmn	x1, #0x1
   11a84:	b.eq	11a98 <lzma_mode_is_supported@@XZ_5.0+0x2954>  // b.none
   11a88:	ldr	x2, [sp, #232]
   11a8c:	ldr	x1, [sp, #248]
   11a90:	cmp	x2, x1
   11a94:	b.eq	1391c <lzma_mode_is_supported@@XZ_5.0+0x47d8>  // b.none
   11a98:	mov	w1, #0xffffff              	// #16777215
   11a9c:	cmp	w19, w1
   11aa0:	b.hi	10ff0 <lzma_mode_is_supported@@XZ_5.0+0x1eac>  // b.pmore
   11aa4:	cmp	x4, x22
   11aa8:	b.ne	10fe0 <lzma_mode_is_supported@@XZ_5.0+0x1e9c>  // b.any
   11aac:	add	x0, x23, #0x4, lsl #12
   11ab0:	mov	w1, #0x1                   	// #1
   11ab4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11ab8:	sub	w19, w19, w13
   11abc:	sub	w20, w20, w13
   11ac0:	sub	w2, w2, w2, lsr #5
   11ac4:	strh	w2, [x1]
   11ac8:	mov	w1, #0xffffff              	// #16777215
   11acc:	cmp	w19, w1
   11ad0:	b.hi	11b68 <lzma_mode_is_supported@@XZ_5.0+0x2a24>  // b.pmore
   11ad4:	cmp	x4, x22
   11ad8:	b.ne	11ae8 <lzma_mode_is_supported@@XZ_5.0+0x29a4>  // b.any
   11adc:	add	x0, x23, #0x4, lsl #12
   11ae0:	mov	w1, #0x13                  	// #19
   11ae4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11ae8:	ldrb	w1, [x5, x22]
   11aec:	lsl	w2, w19, #8
   11af0:	add	x22, x22, #0x1
   11af4:	orr	w20, w1, w20, lsl #8
   11af8:	add	x13, x23, w27, uxtw #1
   11afc:	lsr	w19, w2, #11
   11b00:	add	x13, x13, #0x6, lsl #12
   11b04:	ldrh	w1, [x13, #384]
   11b08:	mul	w19, w19, w1
   11b0c:	cmp	w19, w20
   11b10:	b.ls	12c74 <lzma_mode_is_supported@@XZ_5.0+0x3b30>  // b.plast
   11b14:	mov	w2, #0x800                 	// #2048
   11b18:	sub	w2, w2, w1
   11b1c:	cmp	w27, #0x6
   11b20:	mov	w21, #0x1                   	// #1
   11b24:	add	w1, w1, w2, lsr #5
   11b28:	strh	w1, [x13, #384]
   11b2c:	mov	w13, w25
   11b30:	b.ls	11b80 <lzma_mode_is_supported@@XZ_5.0+0x2a3c>  // b.plast
   11b34:	mov	w27, #0xa                   	// #10
   11b38:	mov	w1, #0xffffff              	// #16777215
   11b3c:	cmp	w19, w1
   11b40:	b.hi	11b98 <lzma_mode_is_supported@@XZ_5.0+0x2a54>  // b.pmore
   11b44:	cmp	x4, x22
   11b48:	b.ne	11b88 <lzma_mode_is_supported@@XZ_5.0+0x2a44>  // b.any
   11b4c:	add	x0, x23, #0x4, lsl #12
   11b50:	mov	w1, #0x14                  	// #20
   11b54:	str	w14, [sp, #128]
   11b58:	mov	w14, w26
   11b5c:	mov	w26, w13
   11b60:	str	w1, [x0, #11936]
   11b64:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   11b68:	mov	w2, w19
   11b6c:	b	11af8 <lzma_mode_is_supported@@XZ_5.0+0x29b4>
   11b70:	mov	w13, w26
   11b74:	mov	w26, w14
   11b78:	ldr	w14, [sp, #128]
   11b7c:	b	11b38 <lzma_mode_is_supported@@XZ_5.0+0x29f4>
   11b80:	mov	w27, #0x7                   	// #7
   11b84:	b	11b38 <lzma_mode_is_supported@@XZ_5.0+0x29f4>
   11b88:	ldrb	w1, [x5, x22]
   11b8c:	lsl	w19, w19, #8
   11b90:	add	x22, x22, #0x1
   11b94:	orr	w20, w1, w20, lsl #8
   11b98:	add	x15, x23, #0x6, lsl #12
   11b9c:	lsr	w2, w19, #11
   11ba0:	ldrh	w1, [x15, #1636]
   11ba4:	mul	w2, w2, w1
   11ba8:	cmp	w2, w20
   11bac:	b.ls	11da8 <lzma_mode_is_supported@@XZ_5.0+0x2c64>  // b.plast
   11bb0:	mov	w16, #0x800                 	// #2048
   11bb4:	sub	w16, w16, w1
   11bb8:	mov	w19, w2
   11bbc:	str	w14, [sp, #128]
   11bc0:	mov	w14, w26
   11bc4:	mov	w26, w13
   11bc8:	add	w1, w1, w16, lsr #5
   11bcc:	strh	w1, [x15, #1636]
   11bd0:	mov	w1, #0xffffff              	// #16777215
   11bd4:	cmp	w19, w1
   11bd8:	b.hi	11c00 <lzma_mode_is_supported@@XZ_5.0+0x2abc>  // b.pmore
   11bdc:	cmp	x4, x22
   11be0:	b.ne	11bf0 <lzma_mode_is_supported@@XZ_5.0+0x2aac>  // b.any
   11be4:	add	x0, x23, #0x4, lsl #12
   11be8:	mov	w1, #0x15                  	// #21
   11bec:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11bf0:	ldrb	w1, [x5, x22]
   11bf4:	lsl	w19, w19, #8
   11bf8:	add	x22, x22, #0x1
   11bfc:	orr	w20, w1, w20, lsl #8
   11c00:	mov	w1, w21
   11c04:	lsr	w13, w19, #11
   11c08:	add	x1, x1, w0, uxtw #3
   11c0c:	lsl	w21, w21, #1
   11c10:	add	x1, x23, x1, lsl #1
   11c14:	add	x1, x1, #0x6, lsl #12
   11c18:	ldrh	w2, [x1, #1640]
   11c1c:	mul	w13, w13, w2
   11c20:	cmp	w13, w20
   11c24:	b.ls	11c5c <lzma_mode_is_supported@@XZ_5.0+0x2b18>  // b.plast
   11c28:	mov	w15, #0x800                 	// #2048
   11c2c:	sub	w15, w15, w2
   11c30:	mov	w19, w13
   11c34:	add	w2, w2, w15, lsr #5
   11c38:	strh	w2, [x1, #1640]
   11c3c:	mov	w1, #0xffffff              	// #16777215
   11c40:	cmp	w19, w1
   11c44:	b.hi	11c84 <lzma_mode_is_supported@@XZ_5.0+0x2b40>  // b.pmore
   11c48:	cmp	x4, x22
   11c4c:	b.ne	11c74 <lzma_mode_is_supported@@XZ_5.0+0x2b30>  // b.any
   11c50:	add	x0, x23, #0x4, lsl #12
   11c54:	mov	w1, #0x16                  	// #22
   11c58:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11c5c:	sub	w2, w2, w2, lsr #5
   11c60:	sub	w19, w19, w13
   11c64:	sub	w20, w20, w13
   11c68:	add	w21, w21, #0x1
   11c6c:	strh	w2, [x1, #1640]
   11c70:	b	11c3c <lzma_mode_is_supported@@XZ_5.0+0x2af8>
   11c74:	ldrb	w1, [x5, x22]
   11c78:	lsl	w19, w19, #8
   11c7c:	add	x22, x22, #0x1
   11c80:	orr	w20, w1, w20, lsl #8
   11c84:	mov	w1, w21
   11c88:	lsr	w13, w19, #11
   11c8c:	add	x1, x1, w0, uxtw #3
   11c90:	lsl	w21, w21, #1
   11c94:	add	x1, x23, x1, lsl #1
   11c98:	add	x1, x1, #0x6, lsl #12
   11c9c:	ldrh	w2, [x1, #1640]
   11ca0:	mul	w13, w13, w2
   11ca4:	cmp	w13, w20
   11ca8:	b.ls	11ce0 <lzma_mode_is_supported@@XZ_5.0+0x2b9c>  // b.plast
   11cac:	mov	w15, #0x800                 	// #2048
   11cb0:	sub	w15, w15, w2
   11cb4:	mov	w19, w13
   11cb8:	add	w2, w2, w15, lsr #5
   11cbc:	strh	w2, [x1, #1640]
   11cc0:	mov	w1, #0xffffff              	// #16777215
   11cc4:	cmp	w19, w1
   11cc8:	b.hi	11d08 <lzma_mode_is_supported@@XZ_5.0+0x2bc4>  // b.pmore
   11ccc:	cmp	x4, x22
   11cd0:	b.ne	11cf8 <lzma_mode_is_supported@@XZ_5.0+0x2bb4>  // b.any
   11cd4:	add	x0, x23, #0x4, lsl #12
   11cd8:	mov	w1, #0x17                  	// #23
   11cdc:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11ce0:	sub	w2, w2, w2, lsr #5
   11ce4:	sub	w19, w19, w13
   11ce8:	sub	w20, w20, w13
   11cec:	add	w21, w21, #0x1
   11cf0:	strh	w2, [x1, #1640]
   11cf4:	b	11cc0 <lzma_mode_is_supported@@XZ_5.0+0x2b7c>
   11cf8:	ldrb	w1, [x5, x22]
   11cfc:	lsl	w19, w19, #8
   11d00:	add	x22, x22, #0x1
   11d04:	orr	w20, w1, w20, lsl #8
   11d08:	mov	w2, w21
   11d0c:	lsr	w13, w19, #11
   11d10:	add	x2, x2, w0, uxtw #3
   11d14:	lsl	w21, w21, #1
   11d18:	add	x2, x23, x2, lsl #1
   11d1c:	add	x2, x2, #0x6, lsl #12
   11d20:	ldrh	w1, [x2, #1640]
   11d24:	mul	w13, w13, w1
   11d28:	cmp	w13, w20
   11d2c:	b.ls	11d90 <lzma_mode_is_supported@@XZ_5.0+0x2c4c>  // b.plast
   11d30:	mov	w15, #0x800                 	// #2048
   11d34:	sub	w15, w15, w1
   11d38:	add	w1, w1, w15, lsr #5
   11d3c:	and	w1, w1, #0xffff
   11d40:	sub	w7, w21, #0x6
   11d44:	strh	w1, [x2, #1640]
   11d48:	mov	w19, w13
   11d4c:	cmp	w7, #0x5
   11d50:	mov	w24, #0x5                   	// #5
   11d54:	csel	w24, w7, w24, ls  // ls = plast
   11d58:	mov	x16, #0x6360                	// #25440
   11d5c:	sub	w24, w24, #0x2
   11d60:	mov	w21, #0x1                   	// #1
   11d64:	ubfiz	x24, x24, #7, #32
   11d68:	add	x24, x24, x16
   11d6c:	add	x24, x23, x24
   11d70:	mov	w0, #0xffffff              	// #16777215
   11d74:	cmp	w19, w0
   11d78:	b.hi	123c0 <lzma_mode_is_supported@@XZ_5.0+0x327c>  // b.pmore
   11d7c:	cmp	x4, x22
   11d80:	b.ne	123b0 <lzma_mode_is_supported@@XZ_5.0+0x326c>  // b.any
   11d84:	add	x0, x23, #0x4, lsl #12
   11d88:	mov	w1, #0x24                  	// #36
   11d8c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11d90:	sub	w1, w1, w1, lsr #5
   11d94:	sub	w20, w20, w13
   11d98:	and	w1, w1, #0xffff
   11d9c:	add	w21, w21, #0x1
   11da0:	sub	w13, w19, w13
   11da4:	b	11d40 <lzma_mode_is_supported@@XZ_5.0+0x2bfc>
   11da8:	sub	w19, w19, w2
   11dac:	sub	w20, w20, w2
   11db0:	str	w14, [sp, #128]
   11db4:	mov	w14, w26
   11db8:	mov	w26, w13
   11dbc:	sub	w1, w1, w1, lsr #5
   11dc0:	strh	w1, [x15, #1636]
   11dc4:	mov	w1, #0xffffff              	// #16777215
   11dc8:	cmp	w19, w1
   11dcc:	b.hi	11df4 <lzma_mode_is_supported@@XZ_5.0+0x2cb0>  // b.pmore
   11dd0:	cmp	x4, x22
   11dd4:	b.ne	11de4 <lzma_mode_is_supported@@XZ_5.0+0x2ca0>  // b.any
   11dd8:	add	x0, x23, #0x4, lsl #12
   11ddc:	mov	w1, #0x18                  	// #24
   11de0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11de4:	ldrb	w1, [x5, x22]
   11de8:	lsl	w19, w19, #8
   11dec:	add	x22, x22, #0x1
   11df0:	orr	w20, w1, w20, lsl #8
   11df4:	add	x13, x23, #0x6, lsl #12
   11df8:	lsr	w2, w19, #11
   11dfc:	ldrh	w1, [x13, #1638]
   11e00:	mul	w2, w2, w1
   11e04:	cmp	w2, w20
   11e08:	b.ls	11fb4 <lzma_mode_is_supported@@XZ_5.0+0x2e70>  // b.plast
   11e0c:	mov	w15, #0x800                 	// #2048
   11e10:	sub	w15, w15, w1
   11e14:	mov	w19, w2
   11e18:	add	w1, w1, w15, lsr #5
   11e1c:	strh	w1, [x13, #1638]
   11e20:	mov	w1, #0xffffff              	// #16777215
   11e24:	cmp	w19, w1
   11e28:	b.hi	11e50 <lzma_mode_is_supported@@XZ_5.0+0x2d0c>  // b.pmore
   11e2c:	cmp	x4, x22
   11e30:	b.ne	11e40 <lzma_mode_is_supported@@XZ_5.0+0x2cfc>  // b.any
   11e34:	add	x0, x23, #0x4, lsl #12
   11e38:	mov	w1, #0x19                  	// #25
   11e3c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11e40:	ldrb	w1, [x5, x22]
   11e44:	lsl	w19, w19, #8
   11e48:	add	x22, x22, #0x1
   11e4c:	orr	w20, w1, w20, lsl #8
   11e50:	mov	w1, w21
   11e54:	lsr	w13, w19, #11
   11e58:	add	x1, x1, w0, uxtw #3
   11e5c:	lsl	w21, w21, #1
   11e60:	add	x1, x23, x1, lsl #1
   11e64:	add	x1, x1, #0x6, lsl #12
   11e68:	ldrh	w2, [x1, #1896]
   11e6c:	mul	w13, w13, w2
   11e70:	cmp	w13, w20
   11e74:	b.ls	11eac <lzma_mode_is_supported@@XZ_5.0+0x2d68>  // b.plast
   11e78:	mov	w15, #0x800                 	// #2048
   11e7c:	sub	w15, w15, w2
   11e80:	mov	w19, w13
   11e84:	add	w2, w2, w15, lsr #5
   11e88:	strh	w2, [x1, #1896]
   11e8c:	mov	w1, #0xffffff              	// #16777215
   11e90:	cmp	w19, w1
   11e94:	b.hi	11ed4 <lzma_mode_is_supported@@XZ_5.0+0x2d90>  // b.pmore
   11e98:	cmp	x4, x22
   11e9c:	b.ne	11ec4 <lzma_mode_is_supported@@XZ_5.0+0x2d80>  // b.any
   11ea0:	add	x0, x23, #0x4, lsl #12
   11ea4:	mov	w1, #0x1a                  	// #26
   11ea8:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11eac:	sub	w2, w2, w2, lsr #5
   11eb0:	sub	w19, w19, w13
   11eb4:	sub	w20, w20, w13
   11eb8:	add	w21, w21, #0x1
   11ebc:	strh	w2, [x1, #1896]
   11ec0:	b	11e8c <lzma_mode_is_supported@@XZ_5.0+0x2d48>
   11ec4:	ldrb	w1, [x5, x22]
   11ec8:	lsl	w19, w19, #8
   11ecc:	add	x22, x22, #0x1
   11ed0:	orr	w20, w1, w20, lsl #8
   11ed4:	mov	w1, w21
   11ed8:	lsr	w13, w19, #11
   11edc:	add	x1, x1, w0, uxtw #3
   11ee0:	lsl	w21, w21, #1
   11ee4:	add	x1, x23, x1, lsl #1
   11ee8:	add	x1, x1, #0x6, lsl #12
   11eec:	ldrh	w2, [x1, #1896]
   11ef0:	mul	w13, w13, w2
   11ef4:	cmp	w13, w20
   11ef8:	b.ls	11f30 <lzma_mode_is_supported@@XZ_5.0+0x2dec>  // b.plast
   11efc:	mov	w15, #0x800                 	// #2048
   11f00:	sub	w15, w15, w2
   11f04:	mov	w19, w13
   11f08:	add	w2, w2, w15, lsr #5
   11f0c:	strh	w2, [x1, #1896]
   11f10:	mov	w1, #0xffffff              	// #16777215
   11f14:	cmp	w19, w1
   11f18:	b.hi	11f58 <lzma_mode_is_supported@@XZ_5.0+0x2e14>  // b.pmore
   11f1c:	cmp	x4, x22
   11f20:	b.ne	11f48 <lzma_mode_is_supported@@XZ_5.0+0x2e04>  // b.any
   11f24:	add	x0, x23, #0x4, lsl #12
   11f28:	mov	w1, #0x1b                  	// #27
   11f2c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11f30:	sub	w2, w2, w2, lsr #5
   11f34:	sub	w19, w19, w13
   11f38:	sub	w20, w20, w13
   11f3c:	add	w21, w21, #0x1
   11f40:	strh	w2, [x1, #1896]
   11f44:	b	11f10 <lzma_mode_is_supported@@XZ_5.0+0x2dcc>
   11f48:	ldrb	w1, [x5, x22]
   11f4c:	lsl	w19, w19, #8
   11f50:	add	x22, x22, #0x1
   11f54:	orr	w20, w1, w20, lsl #8
   11f58:	mov	w2, w21
   11f5c:	lsr	w13, w19, #11
   11f60:	add	x2, x2, w0, uxtw #3
   11f64:	lsl	w21, w21, #1
   11f68:	add	x2, x23, x2, lsl #1
   11f6c:	add	x2, x2, #0x6, lsl #12
   11f70:	ldrh	w1, [x2, #1896]
   11f74:	mul	w13, w13, w1
   11f78:	cmp	w13, w20
   11f7c:	b.ls	11f9c <lzma_mode_is_supported@@XZ_5.0+0x2e58>  // b.plast
   11f80:	mov	w15, #0x800                 	// #2048
   11f84:	sub	w15, w15, w1
   11f88:	add	w1, w1, w15, lsr #5
   11f8c:	and	w1, w1, #0xffff
   11f90:	add	w7, w21, #0x2
   11f94:	strh	w1, [x2, #1896]
   11f98:	b	11d48 <lzma_mode_is_supported@@XZ_5.0+0x2c04>
   11f9c:	sub	w1, w1, w1, lsr #5
   11fa0:	sub	w20, w20, w13
   11fa4:	and	w1, w1, #0xffff
   11fa8:	add	w21, w21, #0x1
   11fac:	sub	w13, w19, w13
   11fb0:	b	11f90 <lzma_mode_is_supported@@XZ_5.0+0x2e4c>
   11fb4:	sub	w19, w19, w2
   11fb8:	sub	w20, w20, w2
   11fbc:	sub	w1, w1, w1, lsr #5
   11fc0:	strh	w1, [x13, #1638]
   11fc4:	mov	w0, #0xffffff              	// #16777215
   11fc8:	cmp	w19, w0
   11fcc:	b.hi	11ff4 <lzma_mode_is_supported@@XZ_5.0+0x2eb0>  // b.pmore
   11fd0:	cmp	x4, x22
   11fd4:	b.ne	11fe4 <lzma_mode_is_supported@@XZ_5.0+0x2ea0>  // b.any
   11fd8:	add	x0, x23, #0x4, lsl #12
   11fdc:	mov	w1, #0x1c                  	// #28
   11fe0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   11fe4:	ldrb	w0, [x5, x22]
   11fe8:	lsl	w19, w19, #8
   11fec:	add	x22, x22, #0x1
   11ff0:	orr	w20, w0, w20, lsl #8
   11ff4:	add	x2, x23, w21, uxtw #1
   11ff8:	lsr	w1, w19, #11
   11ffc:	add	x2, x2, #0x6, lsl #12
   12000:	lsl	w21, w21, #1
   12004:	ldrh	w0, [x2, #2152]
   12008:	mul	w1, w1, w0
   1200c:	cmp	w1, w20
   12010:	b.ls	12048 <lzma_mode_is_supported@@XZ_5.0+0x2f04>  // b.plast
   12014:	mov	w13, #0x800                 	// #2048
   12018:	sub	w13, w13, w0
   1201c:	mov	w19, w1
   12020:	add	w0, w0, w13, lsr #5
   12024:	strh	w0, [x2, #2152]
   12028:	mov	w0, #0xffffff              	// #16777215
   1202c:	cmp	w19, w0
   12030:	b.hi	12070 <lzma_mode_is_supported@@XZ_5.0+0x2f2c>  // b.pmore
   12034:	cmp	x4, x22
   12038:	b.ne	12060 <lzma_mode_is_supported@@XZ_5.0+0x2f1c>  // b.any
   1203c:	add	x0, x23, #0x4, lsl #12
   12040:	mov	w1, #0x1d                  	// #29
   12044:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12048:	sub	w0, w0, w0, lsr #5
   1204c:	sub	w19, w19, w1
   12050:	sub	w20, w20, w1
   12054:	add	w21, w21, #0x1
   12058:	strh	w0, [x2, #2152]
   1205c:	b	12028 <lzma_mode_is_supported@@XZ_5.0+0x2ee4>
   12060:	ldrb	w0, [x5, x22]
   12064:	lsl	w19, w19, #8
   12068:	add	x22, x22, #0x1
   1206c:	orr	w20, w0, w20, lsl #8
   12070:	add	x2, x23, w21, uxtw #1
   12074:	lsr	w1, w19, #11
   12078:	add	x2, x2, #0x6, lsl #12
   1207c:	lsl	w21, w21, #1
   12080:	ldrh	w0, [x2, #2152]
   12084:	mul	w1, w1, w0
   12088:	cmp	w1, w20
   1208c:	b.ls	120c4 <lzma_mode_is_supported@@XZ_5.0+0x2f80>  // b.plast
   12090:	mov	w13, #0x800                 	// #2048
   12094:	sub	w13, w13, w0
   12098:	mov	w19, w1
   1209c:	add	w0, w0, w13, lsr #5
   120a0:	strh	w0, [x2, #2152]
   120a4:	mov	w0, #0xffffff              	// #16777215
   120a8:	cmp	w19, w0
   120ac:	b.hi	120ec <lzma_mode_is_supported@@XZ_5.0+0x2fa8>  // b.pmore
   120b0:	cmp	x4, x22
   120b4:	b.ne	120dc <lzma_mode_is_supported@@XZ_5.0+0x2f98>  // b.any
   120b8:	add	x0, x23, #0x4, lsl #12
   120bc:	mov	w1, #0x1e                  	// #30
   120c0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   120c4:	sub	w0, w0, w0, lsr #5
   120c8:	sub	w19, w19, w1
   120cc:	sub	w20, w20, w1
   120d0:	add	w21, w21, #0x1
   120d4:	strh	w0, [x2, #2152]
   120d8:	b	120a4 <lzma_mode_is_supported@@XZ_5.0+0x2f60>
   120dc:	ldrb	w0, [x5, x22]
   120e0:	lsl	w19, w19, #8
   120e4:	add	x22, x22, #0x1
   120e8:	orr	w20, w0, w20, lsl #8
   120ec:	add	x2, x23, w21, uxtw #1
   120f0:	lsr	w1, w19, #11
   120f4:	add	x2, x2, #0x6, lsl #12
   120f8:	lsl	w21, w21, #1
   120fc:	ldrh	w0, [x2, #2152]
   12100:	mul	w1, w1, w0
   12104:	cmp	w1, w20
   12108:	b.ls	12140 <lzma_mode_is_supported@@XZ_5.0+0x2ffc>  // b.plast
   1210c:	mov	w13, #0x800                 	// #2048
   12110:	sub	w13, w13, w0
   12114:	mov	w19, w1
   12118:	add	w0, w0, w13, lsr #5
   1211c:	strh	w0, [x2, #2152]
   12120:	mov	w0, #0xffffff              	// #16777215
   12124:	cmp	w19, w0
   12128:	b.hi	12168 <lzma_mode_is_supported@@XZ_5.0+0x3024>  // b.pmore
   1212c:	cmp	x4, x22
   12130:	b.ne	12158 <lzma_mode_is_supported@@XZ_5.0+0x3014>  // b.any
   12134:	add	x0, x23, #0x4, lsl #12
   12138:	mov	w1, #0x1f                  	// #31
   1213c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12140:	sub	w0, w0, w0, lsr #5
   12144:	sub	w19, w19, w1
   12148:	sub	w20, w20, w1
   1214c:	add	w21, w21, #0x1
   12150:	strh	w0, [x2, #2152]
   12154:	b	12120 <lzma_mode_is_supported@@XZ_5.0+0x2fdc>
   12158:	ldrb	w0, [x5, x22]
   1215c:	lsl	w19, w19, #8
   12160:	add	x22, x22, #0x1
   12164:	orr	w20, w0, w20, lsl #8
   12168:	add	x2, x23, w21, uxtw #1
   1216c:	lsr	w1, w19, #11
   12170:	add	x2, x2, #0x6, lsl #12
   12174:	lsl	w21, w21, #1
   12178:	ldrh	w0, [x2, #2152]
   1217c:	mul	w1, w1, w0
   12180:	cmp	w1, w20
   12184:	b.ls	121bc <lzma_mode_is_supported@@XZ_5.0+0x3078>  // b.plast
   12188:	mov	w13, #0x800                 	// #2048
   1218c:	sub	w13, w13, w0
   12190:	mov	w19, w1
   12194:	add	w0, w0, w13, lsr #5
   12198:	strh	w0, [x2, #2152]
   1219c:	mov	w0, #0xffffff              	// #16777215
   121a0:	cmp	w19, w0
   121a4:	b.hi	121e4 <lzma_mode_is_supported@@XZ_5.0+0x30a0>  // b.pmore
   121a8:	cmp	x4, x22
   121ac:	b.ne	121d4 <lzma_mode_is_supported@@XZ_5.0+0x3090>  // b.any
   121b0:	add	x0, x23, #0x4, lsl #12
   121b4:	mov	w1, #0x20                  	// #32
   121b8:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   121bc:	sub	w0, w0, w0, lsr #5
   121c0:	sub	w19, w19, w1
   121c4:	sub	w20, w20, w1
   121c8:	add	w21, w21, #0x1
   121cc:	strh	w0, [x2, #2152]
   121d0:	b	1219c <lzma_mode_is_supported@@XZ_5.0+0x3058>
   121d4:	ldrb	w0, [x5, x22]
   121d8:	lsl	w19, w19, #8
   121dc:	add	x22, x22, #0x1
   121e0:	orr	w20, w0, w20, lsl #8
   121e4:	add	x2, x23, w21, uxtw #1
   121e8:	lsr	w1, w19, #11
   121ec:	add	x2, x2, #0x6, lsl #12
   121f0:	lsl	w21, w21, #1
   121f4:	ldrh	w0, [x2, #2152]
   121f8:	mul	w1, w1, w0
   121fc:	cmp	w1, w20
   12200:	b.ls	12238 <lzma_mode_is_supported@@XZ_5.0+0x30f4>  // b.plast
   12204:	mov	w13, #0x800                 	// #2048
   12208:	sub	w13, w13, w0
   1220c:	mov	w19, w1
   12210:	add	w0, w0, w13, lsr #5
   12214:	strh	w0, [x2, #2152]
   12218:	mov	w0, #0xffffff              	// #16777215
   1221c:	cmp	w19, w0
   12220:	b.hi	12260 <lzma_mode_is_supported@@XZ_5.0+0x311c>  // b.pmore
   12224:	cmp	x4, x22
   12228:	b.ne	12250 <lzma_mode_is_supported@@XZ_5.0+0x310c>  // b.any
   1222c:	add	x0, x23, #0x4, lsl #12
   12230:	mov	w1, #0x21                  	// #33
   12234:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12238:	sub	w0, w0, w0, lsr #5
   1223c:	sub	w19, w19, w1
   12240:	sub	w20, w20, w1
   12244:	add	w21, w21, #0x1
   12248:	strh	w0, [x2, #2152]
   1224c:	b	12218 <lzma_mode_is_supported@@XZ_5.0+0x30d4>
   12250:	ldrb	w0, [x5, x22]
   12254:	lsl	w19, w19, #8
   12258:	add	x22, x22, #0x1
   1225c:	orr	w20, w0, w20, lsl #8
   12260:	add	x2, x23, w21, uxtw #1
   12264:	lsr	w1, w19, #11
   12268:	add	x2, x2, #0x6, lsl #12
   1226c:	lsl	w21, w21, #1
   12270:	ldrh	w0, [x2, #2152]
   12274:	mul	w1, w1, w0
   12278:	cmp	w1, w20
   1227c:	b.ls	122b4 <lzma_mode_is_supported@@XZ_5.0+0x3170>  // b.plast
   12280:	mov	w13, #0x800                 	// #2048
   12284:	sub	w13, w13, w0
   12288:	mov	w19, w1
   1228c:	add	w0, w0, w13, lsr #5
   12290:	strh	w0, [x2, #2152]
   12294:	mov	w0, #0xffffff              	// #16777215
   12298:	cmp	w19, w0
   1229c:	b.hi	122dc <lzma_mode_is_supported@@XZ_5.0+0x3198>  // b.pmore
   122a0:	cmp	x4, x22
   122a4:	b.ne	122cc <lzma_mode_is_supported@@XZ_5.0+0x3188>  // b.any
   122a8:	add	x0, x23, #0x4, lsl #12
   122ac:	mov	w1, #0x22                  	// #34
   122b0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   122b4:	sub	w0, w0, w0, lsr #5
   122b8:	sub	w19, w19, w1
   122bc:	sub	w20, w20, w1
   122c0:	add	w21, w21, #0x1
   122c4:	strh	w0, [x2, #2152]
   122c8:	b	12294 <lzma_mode_is_supported@@XZ_5.0+0x3150>
   122cc:	ldrb	w0, [x5, x22]
   122d0:	lsl	w19, w19, #8
   122d4:	add	x22, x22, #0x1
   122d8:	orr	w20, w0, w20, lsl #8
   122dc:	add	x2, x23, w21, uxtw #1
   122e0:	lsr	w1, w19, #11
   122e4:	add	x2, x2, #0x6, lsl #12
   122e8:	lsl	w21, w21, #1
   122ec:	ldrh	w0, [x2, #2152]
   122f0:	mul	w1, w1, w0
   122f4:	cmp	w1, w20
   122f8:	b.ls	12330 <lzma_mode_is_supported@@XZ_5.0+0x31ec>  // b.plast
   122fc:	mov	w13, #0x800                 	// #2048
   12300:	sub	w13, w13, w0
   12304:	mov	w19, w1
   12308:	add	w0, w0, w13, lsr #5
   1230c:	strh	w0, [x2, #2152]
   12310:	mov	w0, #0xffffff              	// #16777215
   12314:	cmp	w19, w0
   12318:	b.hi	12358 <lzma_mode_is_supported@@XZ_5.0+0x3214>  // b.pmore
   1231c:	cmp	x4, x22
   12320:	b.ne	12348 <lzma_mode_is_supported@@XZ_5.0+0x3204>  // b.any
   12324:	add	x0, x23, #0x4, lsl #12
   12328:	mov	w1, #0x23                  	// #35
   1232c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12330:	sub	w0, w0, w0, lsr #5
   12334:	sub	w19, w19, w1
   12338:	sub	w20, w20, w1
   1233c:	add	w21, w21, #0x1
   12340:	strh	w0, [x2, #2152]
   12344:	b	12310 <lzma_mode_is_supported@@XZ_5.0+0x31cc>
   12348:	ldrb	w0, [x5, x22]
   1234c:	lsl	w19, w19, #8
   12350:	add	x22, x22, #0x1
   12354:	orr	w20, w0, w20, lsl #8
   12358:	add	x15, x23, w21, uxtw #1
   1235c:	lsr	w2, w19, #11
   12360:	add	x15, x15, #0x6, lsl #12
   12364:	lsl	w21, w21, #1
   12368:	ldrh	w1, [x15, #2152]
   1236c:	mul	w2, w2, w1
   12370:	cmp	w2, w20
   12374:	b.ls	12398 <lzma_mode_is_supported@@XZ_5.0+0x3254>  // b.plast
   12378:	mov	w13, #0x800                 	// #2048
   1237c:	sub	w13, w13, w1
   12380:	add	w1, w1, w13, lsr #5
   12384:	and	w1, w1, #0xffff
   12388:	sub	w7, w21, #0xee
   1238c:	mov	w19, w2
   12390:	strh	w1, [x15, #2152]
   12394:	b	11d4c <lzma_mode_is_supported@@XZ_5.0+0x2c08>
   12398:	sub	w1, w1, w1, lsr #5
   1239c:	sub	w20, w20, w2
   123a0:	and	w1, w1, #0xffff
   123a4:	add	w21, w21, #0x1
   123a8:	sub	w2, w19, w2
   123ac:	b	12388 <lzma_mode_is_supported@@XZ_5.0+0x3244>
   123b0:	ldrb	w0, [x5, x22]
   123b4:	lsl	w19, w19, #8
   123b8:	add	x22, x22, #0x1
   123bc:	orr	w20, w0, w20, lsl #8
   123c0:	ldrh	w0, [x24, w21, uxtw #1]
   123c4:	lsr	w1, w19, #11
   123c8:	ubfiz	x2, x21, #1, #32
   123cc:	lsl	w21, w21, #1
   123d0:	mul	w1, w1, w0
   123d4:	cmp	w1, w20
   123d8:	b.ls	12410 <lzma_mode_is_supported@@XZ_5.0+0x32cc>  // b.plast
   123dc:	mov	w13, #0x800                 	// #2048
   123e0:	sub	w13, w13, w0
   123e4:	mov	w19, w1
   123e8:	add	w0, w0, w13, lsr #5
   123ec:	strh	w0, [x24, x2]
   123f0:	mov	w0, #0xffffff              	// #16777215
   123f4:	cmp	w19, w0
   123f8:	b.hi	12438 <lzma_mode_is_supported@@XZ_5.0+0x32f4>  // b.pmore
   123fc:	cmp	x4, x22
   12400:	b.ne	12428 <lzma_mode_is_supported@@XZ_5.0+0x32e4>  // b.any
   12404:	add	x0, x23, #0x4, lsl #12
   12408:	mov	w1, #0x25                  	// #37
   1240c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12410:	sub	w0, w0, w0, lsr #5
   12414:	sub	w19, w19, w1
   12418:	sub	w20, w20, w1
   1241c:	add	w21, w21, #0x1
   12420:	strh	w0, [x24, x2]
   12424:	b	123f0 <lzma_mode_is_supported@@XZ_5.0+0x32ac>
   12428:	ldrb	w0, [x5, x22]
   1242c:	lsl	w19, w19, #8
   12430:	add	x22, x22, #0x1
   12434:	orr	w20, w0, w20, lsl #8
   12438:	ldrh	w0, [x24, w21, uxtw #1]
   1243c:	lsr	w1, w19, #11
   12440:	ubfiz	x2, x21, #1, #32
   12444:	lsl	w21, w21, #1
   12448:	mul	w1, w1, w0
   1244c:	cmp	w1, w20
   12450:	b.ls	12488 <lzma_mode_is_supported@@XZ_5.0+0x3344>  // b.plast
   12454:	mov	w13, #0x800                 	// #2048
   12458:	sub	w13, w13, w0
   1245c:	mov	w19, w1
   12460:	add	w0, w0, w13, lsr #5
   12464:	strh	w0, [x24, x2]
   12468:	mov	w0, #0xffffff              	// #16777215
   1246c:	cmp	w19, w0
   12470:	b.hi	124b0 <lzma_mode_is_supported@@XZ_5.0+0x336c>  // b.pmore
   12474:	cmp	x4, x22
   12478:	b.ne	124a0 <lzma_mode_is_supported@@XZ_5.0+0x335c>  // b.any
   1247c:	add	x0, x23, #0x4, lsl #12
   12480:	mov	w1, #0x26                  	// #38
   12484:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12488:	sub	w0, w0, w0, lsr #5
   1248c:	sub	w19, w19, w1
   12490:	sub	w20, w20, w1
   12494:	add	w21, w21, #0x1
   12498:	strh	w0, [x24, x2]
   1249c:	b	12468 <lzma_mode_is_supported@@XZ_5.0+0x3324>
   124a0:	ldrb	w0, [x5, x22]
   124a4:	lsl	w19, w19, #8
   124a8:	add	x22, x22, #0x1
   124ac:	orr	w20, w0, w20, lsl #8
   124b0:	ldrh	w0, [x24, w21, uxtw #1]
   124b4:	lsr	w1, w19, #11
   124b8:	ubfiz	x2, x21, #1, #32
   124bc:	lsl	w21, w21, #1
   124c0:	mul	w1, w1, w0
   124c4:	cmp	w1, w20
   124c8:	b.ls	12500 <lzma_mode_is_supported@@XZ_5.0+0x33bc>  // b.plast
   124cc:	mov	w13, #0x800                 	// #2048
   124d0:	sub	w13, w13, w0
   124d4:	mov	w19, w1
   124d8:	add	w0, w0, w13, lsr #5
   124dc:	strh	w0, [x24, x2]
   124e0:	mov	w0, #0xffffff              	// #16777215
   124e4:	cmp	w19, w0
   124e8:	b.hi	12528 <lzma_mode_is_supported@@XZ_5.0+0x33e4>  // b.pmore
   124ec:	cmp	x4, x22
   124f0:	b.ne	12518 <lzma_mode_is_supported@@XZ_5.0+0x33d4>  // b.any
   124f4:	add	x0, x23, #0x4, lsl #12
   124f8:	mov	w1, #0x27                  	// #39
   124fc:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12500:	sub	w0, w0, w0, lsr #5
   12504:	sub	w19, w19, w1
   12508:	sub	w20, w20, w1
   1250c:	add	w21, w21, #0x1
   12510:	strh	w0, [x24, x2]
   12514:	b	124e0 <lzma_mode_is_supported@@XZ_5.0+0x339c>
   12518:	ldrb	w0, [x5, x22]
   1251c:	lsl	w19, w19, #8
   12520:	add	x22, x22, #0x1
   12524:	orr	w20, w0, w20, lsl #8
   12528:	ldrh	w0, [x24, w21, uxtw #1]
   1252c:	lsr	w1, w19, #11
   12530:	ubfiz	x2, x21, #1, #32
   12534:	lsl	w21, w21, #1
   12538:	mul	w1, w1, w0
   1253c:	cmp	w1, w20
   12540:	b.ls	12578 <lzma_mode_is_supported@@XZ_5.0+0x3434>  // b.plast
   12544:	mov	w13, #0x800                 	// #2048
   12548:	sub	w13, w13, w0
   1254c:	mov	w19, w1
   12550:	add	w0, w0, w13, lsr #5
   12554:	strh	w0, [x24, x2]
   12558:	mov	w0, #0xffffff              	// #16777215
   1255c:	cmp	w19, w0
   12560:	b.hi	125a0 <lzma_mode_is_supported@@XZ_5.0+0x345c>  // b.pmore
   12564:	cmp	x4, x22
   12568:	b.ne	12590 <lzma_mode_is_supported@@XZ_5.0+0x344c>  // b.any
   1256c:	add	x0, x23, #0x4, lsl #12
   12570:	mov	w1, #0x28                  	// #40
   12574:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12578:	sub	w0, w0, w0, lsr #5
   1257c:	sub	w19, w19, w1
   12580:	sub	w20, w20, w1
   12584:	add	w21, w21, #0x1
   12588:	strh	w0, [x24, x2]
   1258c:	b	12558 <lzma_mode_is_supported@@XZ_5.0+0x3414>
   12590:	ldrb	w0, [x5, x22]
   12594:	lsl	w19, w19, #8
   12598:	add	x22, x22, #0x1
   1259c:	orr	w20, w0, w20, lsl #8
   125a0:	ldrh	w0, [x24, w21, uxtw #1]
   125a4:	lsr	w1, w19, #11
   125a8:	ubfiz	x2, x21, #1, #32
   125ac:	lsl	w21, w21, #1
   125b0:	mul	w1, w1, w0
   125b4:	cmp	w1, w20
   125b8:	b.ls	125f0 <lzma_mode_is_supported@@XZ_5.0+0x34ac>  // b.plast
   125bc:	mov	w13, #0x800                 	// #2048
   125c0:	sub	w13, w13, w0
   125c4:	mov	w19, w1
   125c8:	add	w0, w0, w13, lsr #5
   125cc:	strh	w0, [x24, x2]
   125d0:	mov	w0, #0xffffff              	// #16777215
   125d4:	cmp	w19, w0
   125d8:	b.hi	12618 <lzma_mode_is_supported@@XZ_5.0+0x34d4>  // b.pmore
   125dc:	cmp	x4, x22
   125e0:	b.ne	12608 <lzma_mode_is_supported@@XZ_5.0+0x34c4>  // b.any
   125e4:	add	x0, x23, #0x4, lsl #12
   125e8:	mov	w1, #0x29                  	// #41
   125ec:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   125f0:	sub	w0, w0, w0, lsr #5
   125f4:	sub	w19, w19, w1
   125f8:	sub	w20, w20, w1
   125fc:	add	w21, w21, #0x1
   12600:	strh	w0, [x24, x2]
   12604:	b	125d0 <lzma_mode_is_supported@@XZ_5.0+0x348c>
   12608:	ldrb	w0, [x5, x22]
   1260c:	lsl	w19, w19, #8
   12610:	add	x22, x22, #0x1
   12614:	orr	w20, w0, w20, lsl #8
   12618:	ubfiz	x0, x21, #1, #32
   1261c:	lsr	w1, w19, #11
   12620:	add	x2, x24, x0
   12624:	lsl	w21, w21, #1
   12628:	ldrh	w0, [x24, x0]
   1262c:	mul	w1, w1, w0
   12630:	cmp	w1, w20
   12634:	b.ls	126b8 <lzma_mode_is_supported@@XZ_5.0+0x3574>  // b.plast
   12638:	mov	w3, #0x800                 	// #2048
   1263c:	sub	w3, w3, w0
   12640:	mov	w19, w1
   12644:	add	w0, w0, w3, lsr #5
   12648:	and	w0, w0, #0xffff
   1264c:	strh	w0, [x2]
   12650:	sub	w25, w21, #0x40
   12654:	cmp	w25, #0x3
   12658:	b.ls	12c6c <lzma_mode_is_supported@@XZ_5.0+0x3b28>  // b.plast
   1265c:	and	w0, w25, #0x1
   12660:	lsr	w10, w25, #1
   12664:	add	w0, w0, #0x2
   12668:	cmp	w25, #0xd
   1266c:	b.hi	129bc <lzma_mode_is_supported@@XZ_5.0+0x3878>  // b.pmore
   12670:	sub	w10, w10, #0x1
   12674:	mov	x15, #0x655e                	// #25950
   12678:	mov	w6, #0x0                   	// #0
   1267c:	mov	w21, #0x1                   	// #1
   12680:	lsl	w24, w0, w10
   12684:	sub	x24, x24, w25, uxtw
   12688:	lsl	w25, w0, w10
   1268c:	add	x24, x23, x24, lsl #1
   12690:	add	x24, x24, x15
   12694:	sub	w1, w10, #0x1
   12698:	cmp	w1, #0x4
   1269c:	b.hi	12988 <lzma_mode_is_supported@@XZ_5.0+0x3844>  // b.pmore
   126a0:	adrp	x0, 1b000 <lzma_mode_is_supported@@XZ_5.0+0xbebc>
   126a4:	add	x0, x0, #0x990
   126a8:	ldrh	w0, [x0, w1, uxtw #1]
   126ac:	adr	x1, 126b8 <lzma_mode_is_supported@@XZ_5.0+0x3574>
   126b0:	add	x0, x1, w0, sxth #2
   126b4:	br	x0
   126b8:	sub	w0, w0, w0, lsr #5
   126bc:	sub	w19, w19, w1
   126c0:	sub	w20, w20, w1
   126c4:	and	w0, w0, #0xffff
   126c8:	add	w21, w21, #0x1
   126cc:	b	1264c <lzma_mode_is_supported@@XZ_5.0+0x3508>
   126d0:	mov	w0, #0xffffff              	// #16777215
   126d4:	cmp	w19, w0
   126d8:	b.hi	12700 <lzma_mode_is_supported@@XZ_5.0+0x35bc>  // b.pmore
   126dc:	cmp	x4, x22
   126e0:	b.ne	126f0 <lzma_mode_is_supported@@XZ_5.0+0x35ac>  // b.any
   126e4:	add	x0, x23, #0x4, lsl #12
   126e8:	mov	w1, #0x2a                  	// #42
   126ec:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   126f0:	ldrb	w0, [x5, x22]
   126f4:	lsl	w19, w19, #8
   126f8:	add	x22, x22, #0x1
   126fc:	orr	w20, w0, w20, lsl #8
   12700:	ubfiz	x0, x21, #1, #32
   12704:	lsr	w1, w19, #11
   12708:	add	x2, x24, x0
   1270c:	lsl	w21, w21, #1
   12710:	ldrh	w0, [x24, x0]
   12714:	mul	w1, w1, w0
   12718:	cmp	w1, w20
   1271c:	b.ls	12764 <lzma_mode_is_supported@@XZ_5.0+0x3620>  // b.plast
   12720:	mov	w10, #0x800                 	// #2048
   12724:	sub	w10, w10, w0
   12728:	add	w0, w0, w10, lsr #5
   1272c:	and	w0, w0, #0xffff
   12730:	add	w6, w6, #0x1
   12734:	mov	w19, w1
   12738:	strh	w0, [x2]
   1273c:	mov	w0, #0xffffff              	// #16777215
   12740:	cmp	w19, w0
   12744:	b.hi	12790 <lzma_mode_is_supported@@XZ_5.0+0x364c>  // b.pmore
   12748:	cmp	x4, x22
   1274c:	b.ne	12780 <lzma_mode_is_supported@@XZ_5.0+0x363c>  // b.any
   12750:	add	x0, x23, #0x4, lsl #12
   12754:	mov	w1, #0x2a                  	// #42
   12758:	mov	w10, #0x4                   	// #4
   1275c:	str	w1, [x0, #11936]
   12760:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   12764:	sub	w0, w0, w0, lsr #5
   12768:	sub	w20, w20, w1
   1276c:	and	w0, w0, #0xffff
   12770:	add	w21, w21, #0x1
   12774:	add	w25, w25, #0x1
   12778:	sub	w1, w19, w1
   1277c:	b	12730 <lzma_mode_is_supported@@XZ_5.0+0x35ec>
   12780:	ldrb	w0, [x5, x22]
   12784:	lsl	w19, w19, #8
   12788:	add	x22, x22, #0x1
   1278c:	orr	w20, w0, w20, lsl #8
   12790:	ubfiz	x0, x21, #1, #32
   12794:	lsr	w1, w19, #11
   12798:	add	x2, x24, x0
   1279c:	lsl	w21, w21, #1
   127a0:	ldrh	w0, [x24, x0]
   127a4:	mul	w1, w1, w0
   127a8:	cmp	w1, w20
   127ac:	b.ls	127f4 <lzma_mode_is_supported@@XZ_5.0+0x36b0>  // b.plast
   127b0:	mov	w10, #0x800                 	// #2048
   127b4:	sub	w10, w10, w0
   127b8:	add	w0, w0, w10, lsr #5
   127bc:	and	w0, w0, #0xffff
   127c0:	add	w6, w6, #0x1
   127c4:	mov	w19, w1
   127c8:	strh	w0, [x2]
   127cc:	mov	w0, #0xffffff              	// #16777215
   127d0:	cmp	w19, w0
   127d4:	b.hi	12828 <lzma_mode_is_supported@@XZ_5.0+0x36e4>  // b.pmore
   127d8:	cmp	x4, x22
   127dc:	b.ne	12818 <lzma_mode_is_supported@@XZ_5.0+0x36d4>  // b.any
   127e0:	add	x0, x23, #0x4, lsl #12
   127e4:	mov	w1, #0x2a                  	// #42
   127e8:	mov	w10, #0x3                   	// #3
   127ec:	str	w1, [x0, #11936]
   127f0:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   127f4:	sub	w0, w0, w0, lsr #5
   127f8:	mov	w10, #0x1                   	// #1
   127fc:	sub	w20, w20, w1
   12800:	lsl	w10, w10, w6
   12804:	and	w0, w0, #0xffff
   12808:	add	w21, w21, #0x1
   1280c:	add	w25, w25, w10
   12810:	sub	w1, w19, w1
   12814:	b	127c0 <lzma_mode_is_supported@@XZ_5.0+0x367c>
   12818:	ldrb	w0, [x5, x22]
   1281c:	lsl	w19, w19, #8
   12820:	add	x22, x22, #0x1
   12824:	orr	w20, w0, w20, lsl #8
   12828:	ubfiz	x0, x21, #1, #32
   1282c:	lsr	w1, w19, #11
   12830:	add	x2, x24, x0
   12834:	lsl	w21, w21, #1
   12838:	ldrh	w0, [x24, x0]
   1283c:	mul	w1, w1, w0
   12840:	cmp	w1, w20
   12844:	b.ls	1288c <lzma_mode_is_supported@@XZ_5.0+0x3748>  // b.plast
   12848:	mov	w10, #0x800                 	// #2048
   1284c:	sub	w10, w10, w0
   12850:	add	w0, w0, w10, lsr #5
   12854:	and	w0, w0, #0xffff
   12858:	add	w6, w6, #0x1
   1285c:	mov	w19, w1
   12860:	strh	w0, [x2]
   12864:	mov	w0, #0xffffff              	// #16777215
   12868:	cmp	w19, w0
   1286c:	b.hi	128c0 <lzma_mode_is_supported@@XZ_5.0+0x377c>  // b.pmore
   12870:	cmp	x4, x22
   12874:	b.ne	128b0 <lzma_mode_is_supported@@XZ_5.0+0x376c>  // b.any
   12878:	add	x0, x23, #0x4, lsl #12
   1287c:	mov	w1, #0x2a                  	// #42
   12880:	mov	w10, #0x2                   	// #2
   12884:	str	w1, [x0, #11936]
   12888:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   1288c:	sub	w0, w0, w0, lsr #5
   12890:	mov	w10, #0x1                   	// #1
   12894:	sub	w20, w20, w1
   12898:	lsl	w10, w10, w6
   1289c:	and	w0, w0, #0xffff
   128a0:	add	w21, w21, #0x1
   128a4:	add	w25, w25, w10
   128a8:	sub	w1, w19, w1
   128ac:	b	12858 <lzma_mode_is_supported@@XZ_5.0+0x3714>
   128b0:	ldrb	w0, [x5, x22]
   128b4:	lsl	w19, w19, #8
   128b8:	add	x22, x22, #0x1
   128bc:	orr	w20, w0, w20, lsl #8
   128c0:	ubfiz	x0, x21, #1, #32
   128c4:	lsr	w1, w19, #11
   128c8:	add	x2, x24, x0
   128cc:	lsl	w21, w21, #1
   128d0:	ldrh	w0, [x24, x0]
   128d4:	mul	w1, w1, w0
   128d8:	cmp	w1, w20
   128dc:	b.ls	12924 <lzma_mode_is_supported@@XZ_5.0+0x37e0>  // b.plast
   128e0:	mov	w10, #0x800                 	// #2048
   128e4:	sub	w10, w10, w0
   128e8:	add	w0, w0, w10, lsr #5
   128ec:	and	w0, w0, #0xffff
   128f0:	add	w6, w6, #0x1
   128f4:	mov	w19, w1
   128f8:	strh	w0, [x2]
   128fc:	mov	w0, #0xffffff              	// #16777215
   12900:	cmp	w19, w0
   12904:	b.hi	12958 <lzma_mode_is_supported@@XZ_5.0+0x3814>  // b.pmore
   12908:	cmp	x4, x22
   1290c:	b.ne	12948 <lzma_mode_is_supported@@XZ_5.0+0x3804>  // b.any
   12910:	add	x0, x23, #0x4, lsl #12
   12914:	mov	w1, #0x2a                  	// #42
   12918:	mov	w10, #0x1                   	// #1
   1291c:	str	w1, [x0, #11936]
   12920:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   12924:	sub	w0, w0, w0, lsr #5
   12928:	mov	w10, #0x1                   	// #1
   1292c:	sub	w20, w20, w1
   12930:	lsl	w10, w10, w6
   12934:	and	w0, w0, #0xffff
   12938:	add	w21, w21, #0x1
   1293c:	add	w25, w25, w10
   12940:	sub	w1, w19, w1
   12944:	b	128f0 <lzma_mode_is_supported@@XZ_5.0+0x37ac>
   12948:	ldrb	w0, [x5, x22]
   1294c:	lsl	w19, w19, #8
   12950:	add	x22, x22, #0x1
   12954:	orr	w20, w0, w20, lsl #8
   12958:	ldrh	w0, [x24, w21, uxtw #1]
   1295c:	lsr	w1, w19, #11
   12960:	ubfiz	x2, x21, #1, #32
   12964:	mul	w1, w1, w0
   12968:	cmp	w1, w20
   1296c:	b.ls	1299c <lzma_mode_is_supported@@XZ_5.0+0x3858>  // b.plast
   12970:	mov	w10, #0x800                 	// #2048
   12974:	sub	w10, w10, w0
   12978:	mov	w19, w1
   1297c:	add	w0, w0, w10, lsr #5
   12980:	mov	w10, #0x1                   	// #1
   12984:	strh	w0, [x24, x2]
   12988:	ldr	x0, [sp, #240]
   1298c:	cmp	x0, w25, uxtw
   12990:	b.hi	13100 <lzma_mode_is_supported@@XZ_5.0+0x3fbc>  // b.pmore
   12994:	mov	w28, #0x9                   	// #9
   12998:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   1299c:	sub	w0, w0, w0, lsr #5
   129a0:	mov	w10, #0x1                   	// #1
   129a4:	sub	w19, w19, w1
   129a8:	sub	w20, w20, w1
   129ac:	strh	w0, [x24, x2]
   129b0:	lsl	w0, w10, w6
   129b4:	add	w25, w25, w0
   129b8:	b	12988 <lzma_mode_is_supported@@XZ_5.0+0x3844>
   129bc:	mov	w21, w25
   129c0:	sub	w10, w10, #0x5
   129c4:	mov	w25, w0
   129c8:	mov	w1, #0xffffff              	// #16777215
   129cc:	cmp	w19, w1
   129d0:	b.hi	129f8 <lzma_mode_is_supported@@XZ_5.0+0x38b4>  // b.pmore
   129d4:	cmp	x4, x22
   129d8:	b.ne	129e8 <lzma_mode_is_supported@@XZ_5.0+0x38a4>  // b.any
   129dc:	add	x0, x23, #0x4, lsl #12
   129e0:	mov	w1, #0x2b                  	// #43
   129e4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   129e8:	ldrb	w0, [x5, x22]
   129ec:	lsl	w19, w19, #8
   129f0:	add	x22, x22, #0x1
   129f4:	orr	w20, w0, w20, lsl #8
   129f8:	lsr	w19, w19, #1
   129fc:	lsl	w3, w25, #1
   12a00:	sub	w0, w20, w19
   12a04:	add	w3, w3, #0x1
   12a08:	subs	w10, w10, #0x1
   12a0c:	and	w20, w19, w0, asr #31
   12a10:	add	w25, w3, w0, asr #31
   12a14:	add	w20, w20, w0
   12a18:	b.ne	129cc <lzma_mode_is_supported@@XZ_5.0+0x3888>  // b.any
   12a1c:	lsl	w25, w25, #4
   12a20:	mov	w21, #0x1                   	// #1
   12a24:	mov	w0, #0xffffff              	// #16777215
   12a28:	cmp	w19, w0
   12a2c:	b.hi	12a54 <lzma_mode_is_supported@@XZ_5.0+0x3910>  // b.pmore
   12a30:	cmp	x4, x22
   12a34:	b.ne	12a44 <lzma_mode_is_supported@@XZ_5.0+0x3900>  // b.any
   12a38:	add	x0, x23, #0x4, lsl #12
   12a3c:	mov	w1, #0x2c                  	// #44
   12a40:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12a44:	ldrb	w0, [x5, x22]
   12a48:	lsl	w19, w19, #8
   12a4c:	add	x22, x22, #0x1
   12a50:	orr	w20, w0, w20, lsl #8
   12a54:	add	x2, x23, w21, uxtw #1
   12a58:	lsr	w1, w19, #11
   12a5c:	add	x2, x2, #0x6, lsl #12
   12a60:	lsl	w21, w21, #1
   12a64:	ldrh	w0, [x2, #1604]
   12a68:	mul	w1, w1, w0
   12a6c:	cmp	w1, w20
   12a70:	b.ls	12aa8 <lzma_mode_is_supported@@XZ_5.0+0x3964>  // b.plast
   12a74:	mov	w13, #0x800                 	// #2048
   12a78:	sub	w13, w13, w0
   12a7c:	mov	w19, w1
   12a80:	add	w0, w0, w13, lsr #5
   12a84:	strh	w0, [x2, #1604]
   12a88:	mov	w0, #0xffffff              	// #16777215
   12a8c:	cmp	w19, w0
   12a90:	b.hi	12ad4 <lzma_mode_is_supported@@XZ_5.0+0x3990>  // b.pmore
   12a94:	cmp	x4, x22
   12a98:	b.ne	12ac4 <lzma_mode_is_supported@@XZ_5.0+0x3980>  // b.any
   12a9c:	add	x0, x23, #0x4, lsl #12
   12aa0:	mov	w1, #0x2d                  	// #45
   12aa4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12aa8:	sub	w0, w0, w0, lsr #5
   12aac:	sub	w19, w19, w1
   12ab0:	sub	w20, w20, w1
   12ab4:	add	w21, w21, #0x1
   12ab8:	add	w25, w25, #0x1
   12abc:	strh	w0, [x2, #1604]
   12ac0:	b	12a88 <lzma_mode_is_supported@@XZ_5.0+0x3944>
   12ac4:	ldrb	w0, [x5, x22]
   12ac8:	lsl	w19, w19, #8
   12acc:	add	x22, x22, #0x1
   12ad0:	orr	w20, w0, w20, lsl #8
   12ad4:	add	x2, x23, w21, uxtw #1
   12ad8:	lsr	w1, w19, #11
   12adc:	add	x2, x2, #0x6, lsl #12
   12ae0:	lsl	w21, w21, #1
   12ae4:	ldrh	w0, [x2, #1604]
   12ae8:	mul	w1, w1, w0
   12aec:	cmp	w1, w20
   12af0:	b.ls	12b28 <lzma_mode_is_supported@@XZ_5.0+0x39e4>  // b.plast
   12af4:	mov	w13, #0x800                 	// #2048
   12af8:	sub	w13, w13, w0
   12afc:	mov	w19, w1
   12b00:	add	w0, w0, w13, lsr #5
   12b04:	strh	w0, [x2, #1604]
   12b08:	mov	w0, #0xffffff              	// #16777215
   12b0c:	cmp	w19, w0
   12b10:	b.hi	12b54 <lzma_mode_is_supported@@XZ_5.0+0x3a10>  // b.pmore
   12b14:	cmp	x4, x22
   12b18:	b.ne	12b44 <lzma_mode_is_supported@@XZ_5.0+0x3a00>  // b.any
   12b1c:	add	x0, x23, #0x4, lsl #12
   12b20:	mov	w1, #0x2e                  	// #46
   12b24:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12b28:	sub	w0, w0, w0, lsr #5
   12b2c:	sub	w19, w19, w1
   12b30:	sub	w20, w20, w1
   12b34:	add	w21, w21, #0x1
   12b38:	add	w25, w25, #0x2
   12b3c:	strh	w0, [x2, #1604]
   12b40:	b	12b08 <lzma_mode_is_supported@@XZ_5.0+0x39c4>
   12b44:	ldrb	w0, [x5, x22]
   12b48:	lsl	w19, w19, #8
   12b4c:	add	x22, x22, #0x1
   12b50:	orr	w20, w0, w20, lsl #8
   12b54:	add	x2, x23, w21, uxtw #1
   12b58:	lsr	w1, w19, #11
   12b5c:	add	x2, x2, #0x6, lsl #12
   12b60:	lsl	w21, w21, #1
   12b64:	ldrh	w0, [x2, #1604]
   12b68:	mul	w1, w1, w0
   12b6c:	cmp	w1, w20
   12b70:	b.ls	12ba8 <lzma_mode_is_supported@@XZ_5.0+0x3a64>  // b.plast
   12b74:	mov	w13, #0x800                 	// #2048
   12b78:	sub	w13, w13, w0
   12b7c:	mov	w19, w1
   12b80:	add	w0, w0, w13, lsr #5
   12b84:	strh	w0, [x2, #1604]
   12b88:	mov	w0, #0xffffff              	// #16777215
   12b8c:	cmp	w19, w0
   12b90:	b.hi	12bd4 <lzma_mode_is_supported@@XZ_5.0+0x3a90>  // b.pmore
   12b94:	cmp	x4, x22
   12b98:	b.ne	12bc4 <lzma_mode_is_supported@@XZ_5.0+0x3a80>  // b.any
   12b9c:	add	x0, x23, #0x4, lsl #12
   12ba0:	mov	w1, #0x2f                  	// #47
   12ba4:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12ba8:	sub	w0, w0, w0, lsr #5
   12bac:	sub	w19, w19, w1
   12bb0:	sub	w20, w20, w1
   12bb4:	add	w21, w21, #0x1
   12bb8:	add	w25, w25, #0x4
   12bbc:	strh	w0, [x2, #1604]
   12bc0:	b	12b88 <lzma_mode_is_supported@@XZ_5.0+0x3a44>
   12bc4:	ldrb	w0, [x5, x22]
   12bc8:	lsl	w19, w19, #8
   12bcc:	add	x22, x22, #0x1
   12bd0:	orr	w20, w0, w20, lsl #8
   12bd4:	add	x2, x23, w21, uxtw #1
   12bd8:	lsr	w1, w19, #11
   12bdc:	add	x2, x2, #0x6, lsl #12
   12be0:	ldrh	w0, [x2, #1604]
   12be4:	mul	w1, w1, w0
   12be8:	cmp	w1, w20
   12bec:	b.ls	12c3c <lzma_mode_is_supported@@XZ_5.0+0x3af8>  // b.plast
   12bf0:	mov	w13, #0x800                 	// #2048
   12bf4:	sub	w13, w13, w0
   12bf8:	mov	w19, w1
   12bfc:	add	w0, w0, w13, lsr #5
   12c00:	and	w0, w0, #0xffff
   12c04:	strh	w0, [x2, #1604]
   12c08:	cmn	w25, #0x1
   12c0c:	b.ne	12988 <lzma_mode_is_supported@@XZ_5.0+0x3844>  // b.any
   12c10:	ldr	x0, [x23, #28312]
   12c14:	cmn	x0, #0x1
   12c18:	b.ne	12994 <lzma_mode_is_supported@@XZ_5.0+0x3850>  // b.any
   12c1c:	mov	w0, #0xffffff              	// #16777215
   12c20:	cmp	w19, w0
   12c24:	b.hi	12c64 <lzma_mode_is_supported@@XZ_5.0+0x3b20>  // b.pmore
   12c28:	cmp	x4, x22
   12c2c:	b.ne	12c54 <lzma_mode_is_supported@@XZ_5.0+0x3b10>  // b.any
   12c30:	add	x0, x23, #0x4, lsl #12
   12c34:	mov	w1, #0x30                  	// #48
   12c38:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12c3c:	sub	w0, w0, w0, lsr #5
   12c40:	sub	w19, w19, w1
   12c44:	sub	w20, w20, w1
   12c48:	and	w0, w0, #0xffff
   12c4c:	add	w25, w25, #0x8
   12c50:	b	12c04 <lzma_mode_is_supported@@XZ_5.0+0x3ac0>
   12c54:	ldrb	w0, [x5, x22]
   12c58:	lsl	w19, w19, #8
   12c5c:	add	x22, x22, #0x1
   12c60:	orr	w20, w0, w20, lsl #8
   12c64:	mov	w28, #0x1                   	// #1
   12c68:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   12c6c:	mov	w21, w25
   12c70:	b	12988 <lzma_mode_is_supported@@XZ_5.0+0x3844>
   12c74:	sub	w1, w1, w1, lsr #5
   12c78:	strh	w1, [x13, #384]
   12c7c:	ldr	x1, [sp, #240]
   12c80:	sub	w2, w2, w19
   12c84:	sub	w20, w20, w19
   12c88:	mov	w19, w2
   12c8c:	cbz	x1, 12994 <lzma_mode_is_supported@@XZ_5.0+0x3850>
   12c90:	mov	w1, #0xffffff              	// #16777215
   12c94:	cmp	w19, w1
   12c98:	b.hi	12cc0 <lzma_mode_is_supported@@XZ_5.0+0x3b7c>  // b.pmore
   12c9c:	cmp	x4, x22
   12ca0:	b.ne	12cb0 <lzma_mode_is_supported@@XZ_5.0+0x3b6c>  // b.any
   12ca4:	add	x0, x23, #0x4, lsl #12
   12ca8:	mov	w1, #0x31                  	// #49
   12cac:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12cb0:	ldrb	w1, [x5, x22]
   12cb4:	lsl	w19, w19, #8
   12cb8:	add	x22, x22, #0x1
   12cbc:	orr	w20, w1, w20, lsl #8
   12cc0:	add	x13, x23, w27, uxtw #1
   12cc4:	lsr	w2, w19, #11
   12cc8:	add	x13, x13, #0x6, lsl #12
   12ccc:	ldrh	w1, [x13, #408]
   12cd0:	mul	w2, w2, w1
   12cd4:	cmp	w2, w20
   12cd8:	b.ls	12e20 <lzma_mode_is_supported@@XZ_5.0+0x3cdc>  // b.plast
   12cdc:	mov	w15, #0x800                 	// #2048
   12ce0:	sub	w15, w15, w1
   12ce4:	mov	w19, w2
   12ce8:	add	w1, w1, w15, lsr #5
   12cec:	strh	w1, [x13, #408]
   12cf0:	mov	w1, #0xffffff              	// #16777215
   12cf4:	cmp	w19, w1
   12cf8:	b.hi	12dcc <lzma_mode_is_supported@@XZ_5.0+0x3c88>  // b.pmore
   12cfc:	cmp	x4, x22
   12d00:	b.ne	12d10 <lzma_mode_is_supported@@XZ_5.0+0x3bcc>  // b.any
   12d04:	add	x0, x23, #0x4, lsl #12
   12d08:	mov	w1, #0x33                  	// #51
   12d0c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12d10:	ldrb	w1, [x5, x22]
   12d14:	lsl	w13, w19, #8
   12d18:	add	x22, x22, #0x1
   12d1c:	orr	w20, w1, w20, lsl #8
   12d20:	mov	w1, w0
   12d24:	lsr	w19, w13, #11
   12d28:	add	x1, x1, w27, uxtw #4
   12d2c:	add	x1, x23, x1, lsl #1
   12d30:	add	x1, x1, #0x6, lsl #12
   12d34:	ldrh	w2, [x1, #480]
   12d38:	mul	w19, w19, w2
   12d3c:	cmp	w19, w20
   12d40:	b.ls	12de0 <lzma_mode_is_supported@@XZ_5.0+0x3c9c>  // b.plast
   12d44:	mov	w0, #0x800                 	// #2048
   12d48:	sub	w0, w0, w2
   12d4c:	cmp	w27, #0x7
   12d50:	mov	w11, #0x9                   	// #9
   12d54:	add	w2, w2, w0, lsr #5
   12d58:	mov	w0, #0xb                   	// #11
   12d5c:	csel	w27, w11, w0, cc  // cc = lo, ul, last
   12d60:	strh	w2, [x1, #480]
   12d64:	mov	w1, w25
   12d68:	add	x0, sp, #0xe0
   12d6c:	str	w14, [sp, #144]
   12d70:	str	w6, [sp, #152]
   12d74:	str	w7, [sp, #160]
   12d78:	stp	x5, x4, [sp, #168]
   12d7c:	str	x8, [sp, #184]
   12d80:	str	w10, [sp, #208]
   12d84:	bl	10bc0 <lzma_mode_is_supported@@XZ_5.0+0x1a7c>
   12d88:	ldr	x1, [sp, #232]
   12d8c:	ldr	x2, [sp, #248]
   12d90:	ldr	w14, [sp, #144]
   12d94:	ldr	w6, [sp, #152]
   12d98:	cmp	x1, x2
   12d9c:	ldr	w7, [sp, #160]
   12da0:	ldr	w10, [sp, #208]
   12da4:	ldr	x8, [sp, #184]
   12da8:	b.eq	12dd4 <lzma_mode_is_supported@@XZ_5.0+0x3c90>  // b.none
   12dac:	add	x2, x1, #0x1
   12db0:	str	x2, [sp, #232]
   12db4:	ldr	x2, [sp, #224]
   12db8:	ldp	x5, x4, [sp, #168]
   12dbc:	strb	w0, [x2, x1]
   12dc0:	ldp	x0, x1, [sp, #232]
   12dc4:	cmp	x0, x1
   12dc8:	b	11a68 <lzma_mode_is_supported@@XZ_5.0+0x2924>
   12dcc:	mov	w13, w19
   12dd0:	b	12d20 <lzma_mode_is_supported@@XZ_5.0+0x3bdc>
   12dd4:	add	x0, x23, #0x4, lsl #12
   12dd8:	mov	w1, #0x32                  	// #50
   12ddc:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12de0:	sub	w20, w20, w19
   12de4:	sub	w19, w13, w19
   12de8:	sub	w2, w2, w2, lsr #5
   12dec:	strh	w2, [x1, #480]
   12df0:	cmp	w27, #0x6
   12df4:	mov	w21, #0x1                   	// #1
   12df8:	b.ls	12f40 <lzma_mode_is_supported@@XZ_5.0+0x3dfc>  // b.plast
   12dfc:	mov	w27, #0xb                   	// #11
   12e00:	mov	w1, #0xffffff              	// #16777215
   12e04:	cmp	w19, w1
   12e08:	b.hi	12f58 <lzma_mode_is_supported@@XZ_5.0+0x3e14>  // b.pmore
   12e0c:	cmp	x4, x22
   12e10:	b.ne	12f48 <lzma_mode_is_supported@@XZ_5.0+0x3e04>  // b.any
   12e14:	add	x0, x23, #0x4, lsl #12
   12e18:	mov	w1, #0x36                  	// #54
   12e1c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12e20:	sub	w19, w19, w2
   12e24:	sub	w20, w20, w2
   12e28:	sub	w1, w1, w1, lsr #5
   12e2c:	strh	w1, [x13, #408]
   12e30:	mov	w1, #0xffffff              	// #16777215
   12e34:	cmp	w19, w1
   12e38:	b.hi	12e60 <lzma_mode_is_supported@@XZ_5.0+0x3d1c>  // b.pmore
   12e3c:	cmp	x4, x22
   12e40:	b.ne	12e50 <lzma_mode_is_supported@@XZ_5.0+0x3d0c>  // b.any
   12e44:	add	x0, x23, #0x4, lsl #12
   12e48:	mov	w1, #0x34                  	// #52
   12e4c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12e50:	ldrb	w1, [x5, x22]
   12e54:	lsl	w19, w19, #8
   12e58:	add	x22, x22, #0x1
   12e5c:	orr	w20, w1, w20, lsl #8
   12e60:	add	x13, x23, w27, uxtw #1
   12e64:	lsr	w2, w19, #11
   12e68:	add	x13, x13, #0x6, lsl #12
   12e6c:	ldrh	w1, [x13, #432]
   12e70:	mul	w2, w2, w1
   12e74:	cmp	w2, w20
   12e78:	b.ls	12ea0 <lzma_mode_is_supported@@XZ_5.0+0x3d5c>  // b.plast
   12e7c:	mov	w15, #0x800                 	// #2048
   12e80:	sub	w15, w15, w1
   12e84:	mov	w19, w2
   12e88:	add	w1, w1, w15, lsr #5
   12e8c:	strh	w1, [x13, #432]
   12e90:	mov	w1, w25
   12e94:	mov	w25, w26
   12e98:	mov	w26, w1
   12e9c:	b	12df0 <lzma_mode_is_supported@@XZ_5.0+0x3cac>
   12ea0:	sub	w19, w19, w2
   12ea4:	sub	w20, w20, w2
   12ea8:	sub	w1, w1, w1, lsr #5
   12eac:	strh	w1, [x13, #432]
   12eb0:	mov	w1, #0xffffff              	// #16777215
   12eb4:	cmp	w19, w1
   12eb8:	b.hi	12ee0 <lzma_mode_is_supported@@XZ_5.0+0x3d9c>  // b.pmore
   12ebc:	cmp	x4, x22
   12ec0:	b.ne	12ed0 <lzma_mode_is_supported@@XZ_5.0+0x3d8c>  // b.any
   12ec4:	add	x0, x23, #0x4, lsl #12
   12ec8:	mov	w1, #0x35                  	// #53
   12ecc:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12ed0:	ldrb	w1, [x5, x22]
   12ed4:	lsl	w19, w19, #8
   12ed8:	add	x22, x22, #0x1
   12edc:	orr	w20, w1, w20, lsl #8
   12ee0:	add	x13, x23, w27, uxtw #1
   12ee4:	lsr	w2, w19, #11
   12ee8:	add	x13, x13, #0x6, lsl #12
   12eec:	ldrh	w1, [x13, #456]
   12ef0:	mul	w2, w2, w1
   12ef4:	cmp	w2, w20
   12ef8:	b.ls	12f20 <lzma_mode_is_supported@@XZ_5.0+0x3ddc>  // b.plast
   12efc:	mov	w15, #0x800                 	// #2048
   12f00:	sub	w15, w15, w1
   12f04:	mov	w19, w2
   12f08:	add	w1, w1, w15, lsr #5
   12f0c:	strh	w1, [x13, #456]
   12f10:	mov	w1, w25
   12f14:	mov	w25, w14
   12f18:	mov	w14, w26
   12f1c:	b	12e98 <lzma_mode_is_supported@@XZ_5.0+0x3d54>
   12f20:	sub	w1, w1, w1, lsr #5
   12f24:	sub	w19, w19, w2
   12f28:	sub	w20, w20, w2
   12f2c:	strh	w1, [x13, #456]
   12f30:	mov	w1, w25
   12f34:	ldr	w25, [sp, #128]
   12f38:	str	w14, [sp, #128]
   12f3c:	b	12f18 <lzma_mode_is_supported@@XZ_5.0+0x3dd4>
   12f40:	mov	w27, #0x8                   	// #8
   12f44:	b	12e00 <lzma_mode_is_supported@@XZ_5.0+0x3cbc>
   12f48:	ldrb	w1, [x5, x22]
   12f4c:	lsl	w19, w19, #8
   12f50:	add	x22, x22, #0x1
   12f54:	orr	w20, w1, w20, lsl #8
   12f58:	add	x13, x23, #0x6, lsl #12
   12f5c:	lsr	w2, w19, #11
   12f60:	ldrh	w1, [x13, #2664]
   12f64:	mul	w2, w2, w1
   12f68:	cmp	w2, w20
   12f6c:	b.ls	131bc <lzma_mode_is_supported@@XZ_5.0+0x4078>  // b.plast
   12f70:	mov	w15, #0x800                 	// #2048
   12f74:	sub	w15, w15, w1
   12f78:	mov	w19, w2
   12f7c:	add	w1, w1, w15, lsr #5
   12f80:	strh	w1, [x13, #2664]
   12f84:	mov	w1, #0xffffff              	// #16777215
   12f88:	cmp	w19, w1
   12f8c:	b.hi	12fb4 <lzma_mode_is_supported@@XZ_5.0+0x3e70>  // b.pmore
   12f90:	cmp	x4, x22
   12f94:	b.ne	12fa4 <lzma_mode_is_supported@@XZ_5.0+0x3e60>  // b.any
   12f98:	add	x0, x23, #0x4, lsl #12
   12f9c:	mov	w1, #0x37                  	// #55
   12fa0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   12fa4:	ldrb	w1, [x5, x22]
   12fa8:	lsl	w19, w19, #8
   12fac:	add	x22, x22, #0x1
   12fb0:	orr	w20, w1, w20, lsl #8
   12fb4:	mov	w1, w21
   12fb8:	lsr	w13, w19, #11
   12fbc:	add	x1, x1, w0, uxtw #3
   12fc0:	lsl	w21, w21, #1
   12fc4:	add	x1, x23, x1, lsl #1
   12fc8:	add	x1, x1, #0x6, lsl #12
   12fcc:	ldrh	w2, [x1, #2668]
   12fd0:	mul	w13, w13, w2
   12fd4:	cmp	w13, w20
   12fd8:	b.ls	13010 <lzma_mode_is_supported@@XZ_5.0+0x3ecc>  // b.plast
   12fdc:	mov	w15, #0x800                 	// #2048
   12fe0:	sub	w15, w15, w2
   12fe4:	mov	w19, w13
   12fe8:	add	w2, w2, w15, lsr #5
   12fec:	strh	w2, [x1, #2668]
   12ff0:	mov	w1, #0xffffff              	// #16777215
   12ff4:	cmp	w19, w1
   12ff8:	b.hi	13038 <lzma_mode_is_supported@@XZ_5.0+0x3ef4>  // b.pmore
   12ffc:	cmp	x4, x22
   13000:	b.ne	13028 <lzma_mode_is_supported@@XZ_5.0+0x3ee4>  // b.any
   13004:	add	x0, x23, #0x4, lsl #12
   13008:	mov	w1, #0x38                  	// #56
   1300c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13010:	sub	w2, w2, w2, lsr #5
   13014:	sub	w19, w19, w13
   13018:	sub	w20, w20, w13
   1301c:	add	w21, w21, #0x1
   13020:	strh	w2, [x1, #2668]
   13024:	b	12ff0 <lzma_mode_is_supported@@XZ_5.0+0x3eac>
   13028:	ldrb	w1, [x5, x22]
   1302c:	lsl	w19, w19, #8
   13030:	add	x22, x22, #0x1
   13034:	orr	w20, w1, w20, lsl #8
   13038:	mov	w1, w21
   1303c:	lsr	w13, w19, #11
   13040:	add	x1, x1, w0, uxtw #3
   13044:	lsl	w21, w21, #1
   13048:	add	x1, x23, x1, lsl #1
   1304c:	add	x1, x1, #0x6, lsl #12
   13050:	ldrh	w2, [x1, #2668]
   13054:	mul	w13, w13, w2
   13058:	cmp	w13, w20
   1305c:	b.ls	13094 <lzma_mode_is_supported@@XZ_5.0+0x3f50>  // b.plast
   13060:	mov	w15, #0x800                 	// #2048
   13064:	sub	w15, w15, w2
   13068:	mov	w19, w13
   1306c:	add	w2, w2, w15, lsr #5
   13070:	strh	w2, [x1, #2668]
   13074:	mov	w1, #0xffffff              	// #16777215
   13078:	cmp	w19, w1
   1307c:	b.hi	130bc <lzma_mode_is_supported@@XZ_5.0+0x3f78>  // b.pmore
   13080:	cmp	x4, x22
   13084:	b.ne	130ac <lzma_mode_is_supported@@XZ_5.0+0x3f68>  // b.any
   13088:	add	x0, x23, #0x4, lsl #12
   1308c:	mov	w1, #0x39                  	// #57
   13090:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13094:	sub	w2, w2, w2, lsr #5
   13098:	sub	w19, w19, w13
   1309c:	sub	w20, w20, w13
   130a0:	add	w21, w21, #0x1
   130a4:	strh	w2, [x1, #2668]
   130a8:	b	13074 <lzma_mode_is_supported@@XZ_5.0+0x3f30>
   130ac:	ldrb	w1, [x5, x22]
   130b0:	lsl	w19, w19, #8
   130b4:	add	x22, x22, #0x1
   130b8:	orr	w20, w1, w20, lsl #8
   130bc:	mov	w1, w21
   130c0:	lsr	w2, w19, #11
   130c4:	add	x0, x1, w0, uxtw #3
   130c8:	lsl	w21, w21, #1
   130cc:	add	x0, x23, x0, lsl #1
   130d0:	add	x0, x0, #0x6, lsl #12
   130d4:	ldrh	w1, [x0, #2668]
   130d8:	mul	w2, w2, w1
   130dc:	cmp	w2, w20
   130e0:	b.ls	131a4 <lzma_mode_is_supported@@XZ_5.0+0x4060>  // b.plast
   130e4:	mov	w7, #0x800                 	// #2048
   130e8:	sub	w7, w7, w1
   130ec:	add	w1, w1, w7, lsr #5
   130f0:	and	w1, w1, #0xffff
   130f4:	sub	w7, w21, #0x6
   130f8:	strh	w1, [x0, #2668]
   130fc:	mov	w19, w2
   13100:	ldr	x16, [sp, #232]
   13104:	mov	w2, w7
   13108:	ldr	x13, [sp, #248]
   1310c:	sub	x13, x13, x16
   13110:	cmp	x13, w7, uxtw
   13114:	csel	x13, x13, x2, ls  // ls = plast
   13118:	mov	w18, w13
   1311c:	sub	w7, w7, w13
   13120:	cmp	w25, w13
   13124:	b.cs	137b8 <lzma_mode_is_supported@@XZ_5.0+0x4674>  // b.hs, b.nlast
   13128:	add	x13, sp, #0xe0
   1312c:	mov	w1, w25
   13130:	mov	x0, x13
   13134:	str	w14, [sp, #144]
   13138:	str	w6, [sp, #152]
   1313c:	str	w7, [sp, #160]
   13140:	stp	x5, x4, [sp, #168]
   13144:	str	x8, [sp, #184]
   13148:	str	w10, [sp, #208]
   1314c:	bl	10bc0 <lzma_mode_is_supported@@XZ_5.0+0x1a7c>
   13150:	ldp	x2, x1, [sp, #224]
   13154:	subs	w18, w18, #0x1
   13158:	ldr	w14, [sp, #144]
   1315c:	ldr	w6, [sp, #152]
   13160:	ldr	w7, [sp, #160]
   13164:	ldr	w10, [sp, #208]
   13168:	strb	w0, [x2, x1]
   1316c:	ldp	x5, x4, [sp, #168]
   13170:	ldr	x0, [sp, #232]
   13174:	ldr	x8, [sp, #184]
   13178:	add	x0, x0, #0x1
   1317c:	str	x0, [sp, #232]
   13180:	b.ne	1312c <lzma_mode_is_supported@@XZ_5.0+0x3fe8>  // b.any
   13184:	ldp	x0, x1, [sp, #232]
   13188:	cmp	x1, x0
   1318c:	b.cs	13194 <lzma_mode_is_supported@@XZ_5.0+0x4050>  // b.hs, b.nlast
   13190:	str	x0, [sp, #240]
   13194:	cbz	w7, 11a70 <lzma_mode_is_supported@@XZ_5.0+0x292c>
   13198:	add	x0, x23, #0x4, lsl #12
   1319c:	mov	w1, #0x46                  	// #70
   131a0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   131a4:	sub	w1, w1, w1, lsr #5
   131a8:	sub	w20, w20, w2
   131ac:	and	w1, w1, #0xffff
   131b0:	add	w21, w21, #0x1
   131b4:	sub	w2, w19, w2
   131b8:	b	130f4 <lzma_mode_is_supported@@XZ_5.0+0x3fb0>
   131bc:	sub	w19, w19, w2
   131c0:	sub	w20, w20, w2
   131c4:	sub	w1, w1, w1, lsr #5
   131c8:	strh	w1, [x13, #2664]
   131cc:	mov	w1, #0xffffff              	// #16777215
   131d0:	cmp	w19, w1
   131d4:	b.hi	131fc <lzma_mode_is_supported@@XZ_5.0+0x40b8>  // b.pmore
   131d8:	cmp	x4, x22
   131dc:	b.ne	131ec <lzma_mode_is_supported@@XZ_5.0+0x40a8>  // b.any
   131e0:	add	x0, x23, #0x4, lsl #12
   131e4:	mov	w1, #0x3a                  	// #58
   131e8:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   131ec:	ldrb	w1, [x5, x22]
   131f0:	lsl	w19, w19, #8
   131f4:	add	x22, x22, #0x1
   131f8:	orr	w20, w1, w20, lsl #8
   131fc:	add	x13, x23, #0x6, lsl #12
   13200:	lsr	w2, w19, #11
   13204:	ldrh	w1, [x13, #2666]
   13208:	mul	w2, w2, w1
   1320c:	cmp	w2, w20
   13210:	b.ls	133bc <lzma_mode_is_supported@@XZ_5.0+0x4278>  // b.plast
   13214:	mov	w15, #0x800                 	// #2048
   13218:	sub	w15, w15, w1
   1321c:	mov	w19, w2
   13220:	add	w1, w1, w15, lsr #5
   13224:	strh	w1, [x13, #2666]
   13228:	mov	w1, #0xffffff              	// #16777215
   1322c:	cmp	w19, w1
   13230:	b.hi	13258 <lzma_mode_is_supported@@XZ_5.0+0x4114>  // b.pmore
   13234:	cmp	x4, x22
   13238:	b.ne	13248 <lzma_mode_is_supported@@XZ_5.0+0x4104>  // b.any
   1323c:	add	x0, x23, #0x4, lsl #12
   13240:	mov	w1, #0x3b                  	// #59
   13244:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13248:	ldrb	w1, [x5, x22]
   1324c:	lsl	w19, w19, #8
   13250:	add	x22, x22, #0x1
   13254:	orr	w20, w1, w20, lsl #8
   13258:	mov	w1, w21
   1325c:	lsr	w13, w19, #11
   13260:	add	x1, x1, w0, uxtw #3
   13264:	lsl	w21, w21, #1
   13268:	add	x1, x23, x1, lsl #1
   1326c:	add	x1, x1, #0x6, lsl #12
   13270:	ldrh	w2, [x1, #2924]
   13274:	mul	w13, w13, w2
   13278:	cmp	w13, w20
   1327c:	b.ls	132b4 <lzma_mode_is_supported@@XZ_5.0+0x4170>  // b.plast
   13280:	mov	w15, #0x800                 	// #2048
   13284:	sub	w15, w15, w2
   13288:	mov	w19, w13
   1328c:	add	w2, w2, w15, lsr #5
   13290:	strh	w2, [x1, #2924]
   13294:	mov	w1, #0xffffff              	// #16777215
   13298:	cmp	w19, w1
   1329c:	b.hi	132dc <lzma_mode_is_supported@@XZ_5.0+0x4198>  // b.pmore
   132a0:	cmp	x4, x22
   132a4:	b.ne	132cc <lzma_mode_is_supported@@XZ_5.0+0x4188>  // b.any
   132a8:	add	x0, x23, #0x4, lsl #12
   132ac:	mov	w1, #0x3c                  	// #60
   132b0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   132b4:	sub	w2, w2, w2, lsr #5
   132b8:	sub	w19, w19, w13
   132bc:	sub	w20, w20, w13
   132c0:	add	w21, w21, #0x1
   132c4:	strh	w2, [x1, #2924]
   132c8:	b	13294 <lzma_mode_is_supported@@XZ_5.0+0x4150>
   132cc:	ldrb	w1, [x5, x22]
   132d0:	lsl	w19, w19, #8
   132d4:	add	x22, x22, #0x1
   132d8:	orr	w20, w1, w20, lsl #8
   132dc:	mov	w1, w21
   132e0:	lsr	w13, w19, #11
   132e4:	add	x1, x1, w0, uxtw #3
   132e8:	lsl	w21, w21, #1
   132ec:	add	x1, x23, x1, lsl #1
   132f0:	add	x1, x1, #0x6, lsl #12
   132f4:	ldrh	w2, [x1, #2924]
   132f8:	mul	w13, w13, w2
   132fc:	cmp	w13, w20
   13300:	b.ls	13338 <lzma_mode_is_supported@@XZ_5.0+0x41f4>  // b.plast
   13304:	mov	w15, #0x800                 	// #2048
   13308:	sub	w15, w15, w2
   1330c:	mov	w19, w13
   13310:	add	w2, w2, w15, lsr #5
   13314:	strh	w2, [x1, #2924]
   13318:	mov	w1, #0xffffff              	// #16777215
   1331c:	cmp	w19, w1
   13320:	b.hi	13360 <lzma_mode_is_supported@@XZ_5.0+0x421c>  // b.pmore
   13324:	cmp	x4, x22
   13328:	b.ne	13350 <lzma_mode_is_supported@@XZ_5.0+0x420c>  // b.any
   1332c:	add	x0, x23, #0x4, lsl #12
   13330:	mov	w1, #0x3d                  	// #61
   13334:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13338:	sub	w2, w2, w2, lsr #5
   1333c:	sub	w19, w19, w13
   13340:	sub	w20, w20, w13
   13344:	add	w21, w21, #0x1
   13348:	strh	w2, [x1, #2924]
   1334c:	b	13318 <lzma_mode_is_supported@@XZ_5.0+0x41d4>
   13350:	ldrb	w1, [x5, x22]
   13354:	lsl	w19, w19, #8
   13358:	add	x22, x22, #0x1
   1335c:	orr	w20, w1, w20, lsl #8
   13360:	mov	w1, w21
   13364:	lsr	w2, w19, #11
   13368:	add	x0, x1, w0, uxtw #3
   1336c:	lsl	w21, w21, #1
   13370:	add	x0, x23, x0, lsl #1
   13374:	add	x0, x0, #0x6, lsl #12
   13378:	ldrh	w1, [x0, #2924]
   1337c:	mul	w2, w2, w1
   13380:	cmp	w2, w20
   13384:	b.ls	133a4 <lzma_mode_is_supported@@XZ_5.0+0x4260>  // b.plast
   13388:	mov	w7, #0x800                 	// #2048
   1338c:	sub	w7, w7, w1
   13390:	add	w1, w1, w7, lsr #5
   13394:	and	w1, w1, #0xffff
   13398:	add	w7, w21, #0x2
   1339c:	strh	w1, [x0, #2924]
   133a0:	b	130fc <lzma_mode_is_supported@@XZ_5.0+0x3fb8>
   133a4:	sub	w1, w1, w1, lsr #5
   133a8:	sub	w20, w20, w2
   133ac:	and	w1, w1, #0xffff
   133b0:	add	w21, w21, #0x1
   133b4:	sub	w2, w19, w2
   133b8:	b	13398 <lzma_mode_is_supported@@XZ_5.0+0x4254>
   133bc:	sub	w19, w19, w2
   133c0:	sub	w20, w20, w2
   133c4:	sub	w1, w1, w1, lsr #5
   133c8:	strh	w1, [x13, #2666]
   133cc:	mov	w0, #0xffffff              	// #16777215
   133d0:	cmp	w19, w0
   133d4:	b.hi	133fc <lzma_mode_is_supported@@XZ_5.0+0x42b8>  // b.pmore
   133d8:	cmp	x4, x22
   133dc:	b.ne	133ec <lzma_mode_is_supported@@XZ_5.0+0x42a8>  // b.any
   133e0:	add	x0, x23, #0x4, lsl #12
   133e4:	mov	w1, #0x3e                  	// #62
   133e8:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   133ec:	ldrb	w0, [x5, x22]
   133f0:	lsl	w19, w19, #8
   133f4:	add	x22, x22, #0x1
   133f8:	orr	w20, w0, w20, lsl #8
   133fc:	add	x2, x23, w21, uxtw #1
   13400:	lsr	w1, w19, #11
   13404:	add	x2, x2, #0x6, lsl #12
   13408:	lsl	w21, w21, #1
   1340c:	ldrh	w0, [x2, #3180]
   13410:	mul	w1, w1, w0
   13414:	cmp	w1, w20
   13418:	b.ls	13450 <lzma_mode_is_supported@@XZ_5.0+0x430c>  // b.plast
   1341c:	mov	w13, #0x800                 	// #2048
   13420:	sub	w13, w13, w0
   13424:	mov	w19, w1
   13428:	add	w0, w0, w13, lsr #5
   1342c:	strh	w0, [x2, #3180]
   13430:	mov	w0, #0xffffff              	// #16777215
   13434:	cmp	w19, w0
   13438:	b.hi	13478 <lzma_mode_is_supported@@XZ_5.0+0x4334>  // b.pmore
   1343c:	cmp	x4, x22
   13440:	b.ne	13468 <lzma_mode_is_supported@@XZ_5.0+0x4324>  // b.any
   13444:	add	x0, x23, #0x4, lsl #12
   13448:	mov	w1, #0x3f                  	// #63
   1344c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13450:	sub	w0, w0, w0, lsr #5
   13454:	sub	w19, w19, w1
   13458:	sub	w20, w20, w1
   1345c:	add	w21, w21, #0x1
   13460:	strh	w0, [x2, #3180]
   13464:	b	13430 <lzma_mode_is_supported@@XZ_5.0+0x42ec>
   13468:	ldrb	w0, [x5, x22]
   1346c:	lsl	w19, w19, #8
   13470:	add	x22, x22, #0x1
   13474:	orr	w20, w0, w20, lsl #8
   13478:	add	x2, x23, w21, uxtw #1
   1347c:	lsr	w1, w19, #11
   13480:	add	x2, x2, #0x6, lsl #12
   13484:	lsl	w21, w21, #1
   13488:	ldrh	w0, [x2, #3180]
   1348c:	mul	w1, w1, w0
   13490:	cmp	w1, w20
   13494:	b.ls	134cc <lzma_mode_is_supported@@XZ_5.0+0x4388>  // b.plast
   13498:	mov	w13, #0x800                 	// #2048
   1349c:	sub	w13, w13, w0
   134a0:	mov	w19, w1
   134a4:	add	w0, w0, w13, lsr #5
   134a8:	strh	w0, [x2, #3180]
   134ac:	mov	w0, #0xffffff              	// #16777215
   134b0:	cmp	w19, w0
   134b4:	b.hi	134f4 <lzma_mode_is_supported@@XZ_5.0+0x43b0>  // b.pmore
   134b8:	cmp	x4, x22
   134bc:	b.ne	134e4 <lzma_mode_is_supported@@XZ_5.0+0x43a0>  // b.any
   134c0:	add	x0, x23, #0x4, lsl #12
   134c4:	mov	w1, #0x40                  	// #64
   134c8:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   134cc:	sub	w0, w0, w0, lsr #5
   134d0:	sub	w19, w19, w1
   134d4:	sub	w20, w20, w1
   134d8:	add	w21, w21, #0x1
   134dc:	strh	w0, [x2, #3180]
   134e0:	b	134ac <lzma_mode_is_supported@@XZ_5.0+0x4368>
   134e4:	ldrb	w0, [x5, x22]
   134e8:	lsl	w19, w19, #8
   134ec:	add	x22, x22, #0x1
   134f0:	orr	w20, w0, w20, lsl #8
   134f4:	add	x2, x23, w21, uxtw #1
   134f8:	lsr	w1, w19, #11
   134fc:	add	x2, x2, #0x6, lsl #12
   13500:	lsl	w21, w21, #1
   13504:	ldrh	w0, [x2, #3180]
   13508:	mul	w1, w1, w0
   1350c:	cmp	w1, w20
   13510:	b.ls	13548 <lzma_mode_is_supported@@XZ_5.0+0x4404>  // b.plast
   13514:	mov	w13, #0x800                 	// #2048
   13518:	sub	w13, w13, w0
   1351c:	mov	w19, w1
   13520:	add	w0, w0, w13, lsr #5
   13524:	strh	w0, [x2, #3180]
   13528:	mov	w0, #0xffffff              	// #16777215
   1352c:	cmp	w19, w0
   13530:	b.hi	13570 <lzma_mode_is_supported@@XZ_5.0+0x442c>  // b.pmore
   13534:	cmp	x4, x22
   13538:	b.ne	13560 <lzma_mode_is_supported@@XZ_5.0+0x441c>  // b.any
   1353c:	add	x0, x23, #0x4, lsl #12
   13540:	mov	w1, #0x41                  	// #65
   13544:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13548:	sub	w0, w0, w0, lsr #5
   1354c:	sub	w19, w19, w1
   13550:	sub	w20, w20, w1
   13554:	add	w21, w21, #0x1
   13558:	strh	w0, [x2, #3180]
   1355c:	b	13528 <lzma_mode_is_supported@@XZ_5.0+0x43e4>
   13560:	ldrb	w0, [x5, x22]
   13564:	lsl	w19, w19, #8
   13568:	add	x22, x22, #0x1
   1356c:	orr	w20, w0, w20, lsl #8
   13570:	add	x2, x23, w21, uxtw #1
   13574:	lsr	w1, w19, #11
   13578:	add	x2, x2, #0x6, lsl #12
   1357c:	lsl	w21, w21, #1
   13580:	ldrh	w0, [x2, #3180]
   13584:	mul	w1, w1, w0
   13588:	cmp	w1, w20
   1358c:	b.ls	135c4 <lzma_mode_is_supported@@XZ_5.0+0x4480>  // b.plast
   13590:	mov	w13, #0x800                 	// #2048
   13594:	sub	w13, w13, w0
   13598:	mov	w19, w1
   1359c:	add	w0, w0, w13, lsr #5
   135a0:	strh	w0, [x2, #3180]
   135a4:	mov	w0, #0xffffff              	// #16777215
   135a8:	cmp	w19, w0
   135ac:	b.hi	135ec <lzma_mode_is_supported@@XZ_5.0+0x44a8>  // b.pmore
   135b0:	cmp	x4, x22
   135b4:	b.ne	135dc <lzma_mode_is_supported@@XZ_5.0+0x4498>  // b.any
   135b8:	add	x0, x23, #0x4, lsl #12
   135bc:	mov	w1, #0x42                  	// #66
   135c0:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   135c4:	sub	w0, w0, w0, lsr #5
   135c8:	sub	w19, w19, w1
   135cc:	sub	w20, w20, w1
   135d0:	add	w21, w21, #0x1
   135d4:	strh	w0, [x2, #3180]
   135d8:	b	135a4 <lzma_mode_is_supported@@XZ_5.0+0x4460>
   135dc:	ldrb	w0, [x5, x22]
   135e0:	lsl	w19, w19, #8
   135e4:	add	x22, x22, #0x1
   135e8:	orr	w20, w0, w20, lsl #8
   135ec:	add	x2, x23, w21, uxtw #1
   135f0:	lsr	w1, w19, #11
   135f4:	add	x2, x2, #0x6, lsl #12
   135f8:	lsl	w21, w21, #1
   135fc:	ldrh	w0, [x2, #3180]
   13600:	mul	w1, w1, w0
   13604:	cmp	w1, w20
   13608:	b.ls	13640 <lzma_mode_is_supported@@XZ_5.0+0x44fc>  // b.plast
   1360c:	mov	w13, #0x800                 	// #2048
   13610:	sub	w13, w13, w0
   13614:	mov	w19, w1
   13618:	add	w0, w0, w13, lsr #5
   1361c:	strh	w0, [x2, #3180]
   13620:	mov	w0, #0xffffff              	// #16777215
   13624:	cmp	w19, w0
   13628:	b.hi	13668 <lzma_mode_is_supported@@XZ_5.0+0x4524>  // b.pmore
   1362c:	cmp	x4, x22
   13630:	b.ne	13658 <lzma_mode_is_supported@@XZ_5.0+0x4514>  // b.any
   13634:	add	x0, x23, #0x4, lsl #12
   13638:	mov	w1, #0x43                  	// #67
   1363c:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13640:	sub	w0, w0, w0, lsr #5
   13644:	sub	w19, w19, w1
   13648:	sub	w20, w20, w1
   1364c:	add	w21, w21, #0x1
   13650:	strh	w0, [x2, #3180]
   13654:	b	13620 <lzma_mode_is_supported@@XZ_5.0+0x44dc>
   13658:	ldrb	w0, [x5, x22]
   1365c:	lsl	w19, w19, #8
   13660:	add	x22, x22, #0x1
   13664:	orr	w20, w0, w20, lsl #8
   13668:	add	x2, x23, w21, uxtw #1
   1366c:	lsr	w1, w19, #11
   13670:	add	x2, x2, #0x6, lsl #12
   13674:	lsl	w21, w21, #1
   13678:	ldrh	w0, [x2, #3180]
   1367c:	mul	w1, w1, w0
   13680:	cmp	w1, w20
   13684:	b.ls	136bc <lzma_mode_is_supported@@XZ_5.0+0x4578>  // b.plast
   13688:	mov	w13, #0x800                 	// #2048
   1368c:	sub	w13, w13, w0
   13690:	mov	w19, w1
   13694:	add	w0, w0, w13, lsr #5
   13698:	strh	w0, [x2, #3180]
   1369c:	mov	w0, #0xffffff              	// #16777215
   136a0:	cmp	w19, w0
   136a4:	b.hi	136e4 <lzma_mode_is_supported@@XZ_5.0+0x45a0>  // b.pmore
   136a8:	cmp	x4, x22
   136ac:	b.ne	136d4 <lzma_mode_is_supported@@XZ_5.0+0x4590>  // b.any
   136b0:	add	x0, x23, #0x4, lsl #12
   136b4:	mov	w1, #0x44                  	// #68
   136b8:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   136bc:	sub	w0, w0, w0, lsr #5
   136c0:	sub	w19, w19, w1
   136c4:	sub	w20, w20, w1
   136c8:	add	w21, w21, #0x1
   136cc:	strh	w0, [x2, #3180]
   136d0:	b	1369c <lzma_mode_is_supported@@XZ_5.0+0x4558>
   136d4:	ldrb	w0, [x5, x22]
   136d8:	lsl	w19, w19, #8
   136dc:	add	x22, x22, #0x1
   136e0:	orr	w20, w0, w20, lsl #8
   136e4:	add	x2, x23, w21, uxtw #1
   136e8:	lsr	w1, w19, #11
   136ec:	add	x2, x2, #0x6, lsl #12
   136f0:	lsl	w21, w21, #1
   136f4:	ldrh	w0, [x2, #3180]
   136f8:	mul	w1, w1, w0
   136fc:	cmp	w1, w20
   13700:	b.ls	13738 <lzma_mode_is_supported@@XZ_5.0+0x45f4>  // b.plast
   13704:	mov	w13, #0x800                 	// #2048
   13708:	sub	w13, w13, w0
   1370c:	mov	w19, w1
   13710:	add	w0, w0, w13, lsr #5
   13714:	strh	w0, [x2, #3180]
   13718:	mov	w0, #0xffffff              	// #16777215
   1371c:	cmp	w19, w0
   13720:	b.hi	13760 <lzma_mode_is_supported@@XZ_5.0+0x461c>  // b.pmore
   13724:	cmp	x4, x22
   13728:	b.ne	13750 <lzma_mode_is_supported@@XZ_5.0+0x460c>  // b.any
   1372c:	add	x0, x23, #0x4, lsl #12
   13730:	mov	w1, #0x45                  	// #69
   13734:	b	110c4 <lzma_mode_is_supported@@XZ_5.0+0x1f80>
   13738:	sub	w0, w0, w0, lsr #5
   1373c:	sub	w19, w19, w1
   13740:	sub	w20, w20, w1
   13744:	add	w21, w21, #0x1
   13748:	strh	w0, [x2, #3180]
   1374c:	b	13718 <lzma_mode_is_supported@@XZ_5.0+0x45d4>
   13750:	ldrb	w0, [x5, x22]
   13754:	lsl	w19, w19, #8
   13758:	add	x22, x22, #0x1
   1375c:	orr	w20, w0, w20, lsl #8
   13760:	add	x2, x23, w21, uxtw #1
   13764:	lsr	w1, w19, #11
   13768:	add	x2, x2, #0x6, lsl #12
   1376c:	lsl	w21, w21, #1
   13770:	ldrh	w0, [x2, #3180]
   13774:	mul	w1, w1, w0
   13778:	cmp	w1, w20
   1377c:	b.ls	137a0 <lzma_mode_is_supported@@XZ_5.0+0x465c>  // b.plast
   13780:	mov	w7, #0x800                 	// #2048
   13784:	sub	w7, w7, w0
   13788:	add	w0, w0, w7, lsr #5
   1378c:	and	w0, w0, #0xffff
   13790:	sub	w7, w21, #0xee
   13794:	mov	w19, w1
   13798:	strh	w0, [x2, #3180]
   1379c:	b	13100 <lzma_mode_is_supported@@XZ_5.0+0x3fbc>
   137a0:	sub	w0, w0, w0, lsr #5
   137a4:	sub	w20, w20, w1
   137a8:	and	w0, w0, #0xffff
   137ac:	add	w21, w21, #0x1
   137b0:	sub	w1, w19, w1
   137b4:	b	13790 <lzma_mode_is_supported@@XZ_5.0+0x464c>
   137b8:	ldr	x1, [sp, #224]
   137bc:	mov	w15, w25
   137c0:	cmp	x16, w25, uxtw
   137c4:	add	x0, x1, x16
   137c8:	b.ls	13828 <lzma_mode_is_supported@@XZ_5.0+0x46e4>  // b.plast
   137cc:	sub	x16, x16, #0x1
   137d0:	mov	x2, x13
   137d4:	sub	x16, x16, x15
   137d8:	str	x13, [sp, #144]
   137dc:	add	x1, x1, x16
   137e0:	str	w10, [sp, #152]
   137e4:	str	w6, [sp, #160]
   137e8:	str	w7, [sp, #168]
   137ec:	stp	x5, x4, [sp, #176]
   137f0:	str	x8, [sp, #192]
   137f4:	str	w14, [sp, #208]
   137f8:	bl	3090 <memcpy@plt>
   137fc:	ldr	x13, [sp, #144]
   13800:	ldr	x2, [sp, #232]
   13804:	ldr	w10, [sp, #152]
   13808:	add	x13, x2, x13
   1380c:	ldr	w6, [sp, #160]
   13810:	ldr	w7, [sp, #168]
   13814:	ldr	w14, [sp, #208]
   13818:	str	x13, [sp, #232]
   1381c:	ldp	x5, x4, [sp, #176]
   13820:	ldr	x8, [sp, #192]
   13824:	b	13184 <lzma_mode_is_supported@@XZ_5.0+0x4040>
   13828:	ldr	x18, [sp, #256]
   1382c:	mvn	w15, w25
   13830:	str	x18, [sp, #216]
   13834:	add	w16, w16, w18
   13838:	add	w15, w15, w16
   1383c:	str	w15, [sp, #212]
   13840:	sub	w2, w18, w15
   13844:	add	x1, x1, w15, uxtw
   13848:	cmp	w13, w2
   1384c:	b.ls	138cc <lzma_mode_is_supported@@XZ_5.0+0x4788>  // b.plast
   13850:	str	x2, [sp, #144]
   13854:	str	w10, [sp, #152]
   13858:	str	w6, [sp, #160]
   1385c:	str	w7, [sp, #168]
   13860:	stp	x13, x5, [sp, #176]
   13864:	stp	x4, x8, [sp, #192]
   13868:	str	w14, [sp, #208]
   1386c:	bl	30b0 <memmove@plt>
   13870:	ldp	x18, x1, [sp, #216]
   13874:	ldr	w15, [sp, #212]
   13878:	ldr	x2, [sp, #144]
   1387c:	ldr	x13, [sp, #176]
   13880:	sub	w15, w15, w18
   13884:	ldr	x0, [sp, #232]
   13888:	add	x0, x2, x0
   1388c:	add	w2, w15, w13
   13890:	str	x2, [sp, #144]
   13894:	str	x0, [sp, #232]
   13898:	add	x0, x1, x0
   1389c:	bl	3090 <memcpy@plt>
   138a0:	ldr	x2, [sp, #144]
   138a4:	ldr	x18, [sp, #232]
   138a8:	ldr	w10, [sp, #152]
   138ac:	add	x2, x18, x2
   138b0:	ldr	w6, [sp, #160]
   138b4:	ldr	w7, [sp, #168]
   138b8:	ldr	w14, [sp, #208]
   138bc:	str	x2, [sp, #232]
   138c0:	ldp	x5, x4, [sp, #184]
   138c4:	ldr	x8, [sp, #200]
   138c8:	b	13184 <lzma_mode_is_supported@@XZ_5.0+0x4040>
   138cc:	mov	x2, x13
   138d0:	str	x13, [sp, #144]
   138d4:	str	w10, [sp, #152]
   138d8:	str	w6, [sp, #160]
   138dc:	str	w7, [sp, #168]
   138e0:	stp	x5, x4, [sp, #176]
   138e4:	str	x8, [sp, #192]
   138e8:	str	w14, [sp, #208]
   138ec:	bl	30b0 <memmove@plt>
   138f0:	ldr	x13, [sp, #144]
   138f4:	ldr	x2, [sp, #232]
   138f8:	ldr	w10, [sp, #152]
   138fc:	add	x13, x2, x13
   13900:	ldr	w6, [sp, #160]
   13904:	ldr	w7, [sp, #168]
   13908:	ldr	w14, [sp, #208]
   1390c:	str	x13, [sp, #232]
   13910:	ldp	x5, x4, [sp, #176]
   13914:	ldr	x8, [sp, #192]
   13918:	b	13184 <lzma_mode_is_supported@@XZ_5.0+0x4040>
   1391c:	mov	w0, #0xffffff              	// #16777215
   13920:	cmp	w19, w0
   13924:	add	x0, x23, #0x4, lsl #12
   13928:	b.hi	11ab0 <lzma_mode_is_supported@@XZ_5.0+0x296c>  // b.pmore
   1392c:	cmp	x4, x22
   13930:	b.ne	1393c <lzma_mode_is_supported@@XZ_5.0+0x47f8>  // b.any
   13934:	str	wzr, [x0, #11936]
   13938:	b	110c8 <lzma_mode_is_supported@@XZ_5.0+0x1f84>
   1393c:	ldrb	w1, [x5, x22]
   13940:	lsl	w19, w19, #8
   13944:	add	x22, x22, #0x1
   13948:	orr	w20, w1, w20, lsl #8
   1394c:	b	11ab0 <lzma_mode_is_supported@@XZ_5.0+0x296c>
   13950:	cmp	w28, #0x1
   13954:	b.ne	11174 <lzma_mode_is_supported@@XZ_5.0+0x2030>  // b.any
   13958:	b	11154 <lzma_mode_is_supported@@XZ_5.0+0x2010>
   1395c:	mov	w28, #0x0                   	// #0
   13960:	b	11174 <lzma_mode_is_supported@@XZ_5.0+0x2030>
   13964:	mov	w28, #0x9                   	// #9
   13968:	b	11174 <lzma_mode_is_supported@@XZ_5.0+0x2030>
   1396c:	stp	x29, x30, [sp, #-48]!
   13970:	mov	x29, sp
   13974:	stp	x19, x20, [sp, #16]
   13978:	mov	x19, x0
   1397c:	mov	x20, x3
   13980:	ldr	x0, [x0]
   13984:	str	x21, [sp, #32]
   13988:	mov	x21, x2
   1398c:	cbnz	x0, 139c4 <lzma_mode_is_supported@@XZ_5.0+0x4880>
   13990:	mov	x0, #0x6ec0                	// #28352
   13994:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   13998:	str	x0, [x19]
   1399c:	cbz	x0, 139f0 <lzma_mode_is_supported@@XZ_5.0+0x48ac>
   139a0:	adrp	x0, 10000 <lzma_mode_is_supported@@XZ_5.0+0xebc>
   139a4:	add	x0, x0, #0xe84
   139a8:	str	x0, [x19, #8]
   139ac:	adrp	x0, 10000 <lzma_mode_is_supported@@XZ_5.0+0xebc>
   139b0:	add	x0, x0, #0xc30
   139b4:	str	x0, [x19, #16]
   139b8:	adrp	x0, 10000 <lzma_mode_is_supported@@XZ_5.0+0xebc>
   139bc:	add	x0, x0, #0xc28
   139c0:	str	x0, [x19, #24]
   139c4:	ldr	w0, [x21]
   139c8:	str	x0, [x20]
   139cc:	ldr	x0, [x21, #8]
   139d0:	str	x0, [x20, #8]
   139d4:	ldr	w0, [x21, #16]
   139d8:	str	x0, [x20, #16]
   139dc:	mov	w0, #0x0                   	// #0
   139e0:	ldp	x19, x20, [sp, #16]
   139e4:	ldr	x21, [sp, #32]
   139e8:	ldp	x29, x30, [sp], #48
   139ec:	ret
   139f0:	mov	w0, #0x5                   	// #5
   139f4:	b	139e0 <lzma_mode_is_supported@@XZ_5.0+0x489c>
   139f8:	stp	x29, x30, [sp, #-32]!
   139fc:	mov	x4, x1
   13a00:	mov	x29, sp
   13a04:	stp	x19, x20, [sp, #16]
   13a08:	mov	x19, x0
   13a0c:	mov	x20, x2
   13a10:	mov	x0, x2
   13a14:	bl	10bec <lzma_mode_is_supported@@XZ_5.0+0x1aa8>
   13a18:	tst	w0, #0xff
   13a1c:	b.eq	13a60 <lzma_mode_is_supported@@XZ_5.0+0x491c>  // b.none
   13a20:	mov	x2, x20
   13a24:	mov	x1, x4
   13a28:	mov	x0, x19
   13a2c:	bl	1396c <lzma_mode_is_supported@@XZ_5.0+0x4828>
   13a30:	mov	w14, w0
   13a34:	cbnz	w0, 13a50 <lzma_mode_is_supported@@XZ_5.0+0x490c>
   13a38:	ldr	x0, [x19]
   13a3c:	mov	x1, x20
   13a40:	bl	10c30 <lzma_mode_is_supported@@XZ_5.0+0x1aec>
   13a44:	ldr	x0, [x19]
   13a48:	mov	x1, #0xffffffffffffffff    	// #-1
   13a4c:	str	x1, [x0, #28312]
   13a50:	mov	w0, w14
   13a54:	ldp	x19, x20, [sp, #16]
   13a58:	ldp	x29, x30, [sp], #32
   13a5c:	ret
   13a60:	mov	w14, #0xb                   	// #11
   13a64:	b	13a50 <lzma_mode_is_supported@@XZ_5.0+0x490c>
   13a68:	adrp	x3, 13000 <lzma_mode_is_supported@@XZ_5.0+0x3ebc>
   13a6c:	add	x3, x3, #0x9f8
   13a70:	b	dd48 <lzma_mf_is_supported@@XZ_5.0+0x138c>
   13a74:	and	w1, w1, #0xff
   13a78:	cmp	w1, #0xe0
   13a7c:	b.hi	13ab8 <lzma_mode_is_supported@@XZ_5.0+0x4974>  // b.pmore
   13a80:	mov	w3, #0x2d                  	// #45
   13a84:	udiv	w2, w1, w3
   13a88:	str	w2, [x0, #28]
   13a8c:	msub	w2, w2, w3, w1
   13a90:	mov	w1, #0x9                   	// #9
   13a94:	and	w2, w2, #0xff
   13a98:	udiv	w1, w2, w1
   13a9c:	add	w3, w1, w1, lsl #3
   13aa0:	sub	w2, w2, w3
   13aa4:	stp	w2, w1, [x0, #20]
   13aa8:	add	w2, w1, w2
   13aac:	cmp	w2, #0x4
   13ab0:	cset	w0, hi  // hi = pmore
   13ab4:	ret
   13ab8:	mov	w0, #0x1                   	// #1
   13abc:	b	13ab4 <lzma_mode_is_supported@@XZ_5.0+0x4970>
   13ac0:	stp	x29, x30, [sp, #-16]!
   13ac4:	mov	x29, sp
   13ac8:	ldr	w0, [x0]
   13acc:	bl	dec8 <lzma_mf_is_supported@@XZ_5.0+0x150c>
   13ad0:	mov	x1, #0x6ec0                	// #28352
   13ad4:	add	x0, x0, x1
   13ad8:	ldp	x29, x30, [sp], #16
   13adc:	ret
   13ae0:	mov	x3, x0
   13ae4:	stp	x29, x30, [sp, #-16]!
   13ae8:	mov	x29, sp
   13aec:	bl	10bec <lzma_mode_is_supported@@XZ_5.0+0x1aa8>
   13af0:	tst	w0, #0xff
   13af4:	b.eq	13b04 <lzma_mode_is_supported@@XZ_5.0+0x49c0>  // b.none
   13af8:	ldp	x29, x30, [sp], #16
   13afc:	mov	x0, x3
   13b00:	b	13ac0 <lzma_mode_is_supported@@XZ_5.0+0x497c>
   13b04:	mov	x0, #0xffffffffffffffff    	// #-1
   13b08:	ldp	x29, x30, [sp], #16
   13b0c:	ret
   13b10:	cmp	x3, #0x5
   13b14:	b.ne	13b94 <lzma_mode_is_supported@@XZ_5.0+0x4a50>  // b.any
   13b18:	stp	x29, x30, [sp, #-48]!
   13b1c:	mov	x29, sp
   13b20:	stp	x19, x20, [sp, #16]
   13b24:	mov	x20, x2
   13b28:	mov	x19, x3
   13b2c:	stp	x21, x22, [sp, #32]
   13b30:	mov	x21, x0
   13b34:	mov	x22, x1
   13b38:	mov	x0, #0x70                  	// #112
   13b3c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   13b40:	mov	x4, x0
   13b44:	cbz	x0, 13b9c <lzma_mode_is_supported@@XZ_5.0+0x4a58>
   13b48:	ldrb	w1, [x20]
   13b4c:	bl	13a74 <lzma_mode_is_supported@@XZ_5.0+0x4930>
   13b50:	tst	w0, #0xff
   13b54:	b.eq	13b78 <lzma_mode_is_supported@@XZ_5.0+0x4a34>  // b.none
   13b58:	mov	x0, x4
   13b5c:	mov	x1, x22
   13b60:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
   13b64:	mov	w0, #0x8                   	// #8
   13b68:	ldp	x19, x20, [sp, #16]
   13b6c:	ldp	x21, x22, [sp, #32]
   13b70:	ldp	x29, x30, [sp], #48
   13b74:	ret
   13b78:	ldur	w0, [x20, #1]
   13b7c:	str	w0, [x4]
   13b80:	mov	w0, #0x0                   	// #0
   13b84:	str	x4, [x21]
   13b88:	str	xzr, [x4, #8]
   13b8c:	str	wzr, [x4, #16]
   13b90:	b	13b68 <lzma_mode_is_supported@@XZ_5.0+0x4a24>
   13b94:	mov	w0, #0x8                   	// #8
   13b98:	ret
   13b9c:	mov	w0, w19
   13ba0:	b	13b68 <lzma_mode_is_supported@@XZ_5.0+0x4a24>
   13ba4:	ldr	x1, [x1, #8]
   13ba8:	mov	x2, x0
   13bac:	cbz	x1, 13c18 <lzma_mode_is_supported@@XZ_5.0+0x4ad4>
   13bb0:	ldr	w0, [x0]
   13bb4:	cbnz	w0, 13c18 <lzma_mode_is_supported@@XZ_5.0+0x4ad4>
   13bb8:	ldr	w3, [x1, #20]
   13bbc:	ldr	w4, [x2, #36]
   13bc0:	cmp	w4, w3
   13bc4:	b.ne	13bd8 <lzma_mode_is_supported@@XZ_5.0+0x4a94>  // b.any
   13bc8:	ldr	x4, [x1, #24]
   13bcc:	ldr	x5, [x2, #40]
   13bd0:	cmp	x5, x4
   13bd4:	b.eq	13c14 <lzma_mode_is_supported@@XZ_5.0+0x4ad0>  // b.none
   13bd8:	cmp	w3, #0x4
   13bdc:	b.hi	13c20 <lzma_mode_is_supported@@XZ_5.0+0x4adc>  // b.pmore
   13be0:	ldr	w4, [x1, #24]
   13be4:	cmp	w4, #0x4
   13be8:	b.hi	13c20 <lzma_mode_is_supported@@XZ_5.0+0x4adc>  // b.pmore
   13bec:	add	w5, w3, w4
   13bf0:	cmp	w5, #0x4
   13bf4:	b.hi	13c20 <lzma_mode_is_supported@@XZ_5.0+0x4adc>  // b.pmore
   13bf8:	ldr	w1, [x1, #28]
   13bfc:	cmp	w1, #0x4
   13c00:	b.hi	13c20 <lzma_mode_is_supported@@XZ_5.0+0x4adc>  // b.pmore
   13c04:	stp	w3, w4, [x2, #36]
   13c08:	str	w1, [x2, #44]
   13c0c:	mov	w1, #0x101                 	// #257
   13c10:	strh	w1, [x2, #128]
   13c14:	ret
   13c18:	mov	w0, #0xb                   	// #11
   13c1c:	b	13c14 <lzma_mode_is_supported@@XZ_5.0+0x4ad0>
   13c20:	mov	w0, #0x8                   	// #8
   13c24:	b	13c14 <lzma_mode_is_supported@@XZ_5.0+0x4ad0>
   13c28:	cbz	x2, 13d24 <lzma_mode_is_supported@@XZ_5.0+0x4be0>
   13c2c:	stp	x29, x30, [sp, #-64]!
   13c30:	mov	x29, sp
   13c34:	stp	x19, x20, [sp, #16]
   13c38:	mov	x20, x0
   13c3c:	ldr	x19, [x0]
   13c40:	stp	x21, x22, [sp, #32]
   13c44:	mov	x22, x2
   13c48:	str	x23, [sp, #48]
   13c4c:	mov	x21, x3
   13c50:	mov	x23, x1
   13c54:	cbnz	x19, 13c94 <lzma_mode_is_supported@@XZ_5.0+0x4b50>
   13c58:	mov	x0, #0xa8                  	// #168
   13c5c:	movk	x0, #0x1, lsl #16
   13c60:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   13c64:	mov	x19, x0
   13c68:	cbz	x0, 13d2c <lzma_mode_is_supported@@XZ_5.0+0x4be8>
   13c6c:	adrp	x0, 13000 <lzma_mode_is_supported@@XZ_5.0+0x3ebc>
   13c70:	add	x0, x0, #0xd64
   13c74:	stp	x19, x0, [x20]
   13c78:	adrp	x0, 13000 <lzma_mode_is_supported@@XZ_5.0+0x3ebc>
   13c7c:	add	x0, x0, #0xd34
   13c80:	str	xzr, [x19, #8]
   13c84:	str	x0, [x20, #16]
   13c88:	adrp	x0, 13000 <lzma_mode_is_supported@@XZ_5.0+0x3ebc>
   13c8c:	add	x0, x0, #0xba4
   13c90:	str	x0, [x20, #24]
   13c94:	add	x4, x19, #0x10
   13c98:	mov	x1, x22
   13c9c:	mov	x0, x4
   13ca0:	mov	x2, #0x70                  	// #112
   13ca4:	bl	3090 <memcpy@plt>
   13ca8:	mov	x4, x0
   13cac:	mov	w0, #0x1                   	// #1
   13cb0:	strh	w0, [x19, #128]
   13cb4:	ldr	x0, [x19, #24]
   13cb8:	str	wzr, [x19]
   13cbc:	cbz	x0, 13d1c <lzma_mode_is_supported@@XZ_5.0+0x4bd8>
   13cc0:	ldr	w0, [x19, #32]
   13cc4:	cmp	w0, #0x0
   13cc8:	cset	w0, eq  // eq = none
   13ccc:	strb	w0, [x19, #130]
   13cd0:	mov	x3, x21
   13cd4:	mov	x2, x4
   13cd8:	mov	x1, x23
   13cdc:	add	x0, x19, #0x8
   13ce0:	bl	eef4 <lzma_lzma_preset@@XZ_5.0+0x1010>
   13ce4:	cbnz	w0, 13d08 <lzma_mode_is_supported@@XZ_5.0+0x4bc4>
   13ce8:	ldp	x2, x3, [x21]
   13cec:	mov	x1, #0xffff                	// #65535
   13cf0:	add	x2, x3, x2
   13cf4:	cmp	x2, x1
   13cf8:	b.hi	13d08 <lzma_mode_is_supported@@XZ_5.0+0x4bc4>  // b.pmore
   13cfc:	mov	x1, #0x10000               	// #65536
   13d00:	sub	x1, x1, x3
   13d04:	str	x1, [x21]
   13d08:	ldp	x19, x20, [sp, #16]
   13d0c:	ldp	x21, x22, [sp, #32]
   13d10:	ldr	x23, [sp, #48]
   13d14:	ldp	x29, x30, [sp], #64
   13d18:	ret
   13d1c:	mov	w0, #0x1                   	// #1
   13d20:	b	13ccc <lzma_mode_is_supported@@XZ_5.0+0x4b88>
   13d24:	mov	w0, #0xb                   	// #11
   13d28:	ret
   13d2c:	mov	w0, #0x5                   	// #5
   13d30:	b	13d08 <lzma_mode_is_supported@@XZ_5.0+0x4bc4>
   13d34:	stp	x29, x30, [sp, #-32]!
   13d38:	mov	x29, sp
   13d3c:	stp	x19, x20, [sp, #16]
   13d40:	mov	x19, x0
   13d44:	mov	x20, x1
   13d48:	ldr	x0, [x0, #8]
   13d4c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
   13d50:	mov	x1, x20
   13d54:	mov	x0, x19
   13d58:	ldp	x19, x20, [sp, #16]
   13d5c:	ldp	x29, x30, [sp], #32
   13d60:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
   13d64:	stp	x29, x30, [sp, #-96]!
   13d68:	mov	x29, sp
   13d6c:	stp	x19, x20, [sp, #16]
   13d70:	mov	x19, x0
   13d74:	mov	x20, x1
   13d78:	stp	x21, x22, [sp, #32]
   13d7c:	mov	x21, x3
   13d80:	mov	x22, x4
   13d84:	stp	x23, x24, [sp, #48]
   13d88:	adrp	x24, 1b000 <lzma_mode_is_supported@@XZ_5.0+0xbebc>
   13d8c:	mov	x23, x2
   13d90:	add	x24, x24, #0x9cc
   13d94:	stp	x25, x26, [sp, #64]
   13d98:	add	x26, x0, #0x98
   13d9c:	add	x25, x0, #0xa0
   13da0:	stp	x27, x28, [sp, #80]
   13da4:	ldr	x0, [x21]
   13da8:	cmp	x0, x22
   13dac:	b.cs	13e98 <lzma_mode_is_supported@@XZ_5.0+0x4d54>  // b.hs, b.nlast
   13db0:	ldr	w1, [x19]
   13db4:	cmp	w1, #0x4
   13db8:	b.hi	13da8 <lzma_mode_is_supported@@XZ_5.0+0x4c64>  // b.pmore
   13dbc:	ldrh	w1, [x24, w1, uxtw #1]
   13dc0:	adr	x2, 13dcc <lzma_mode_is_supported@@XZ_5.0+0x4c88>
   13dc4:	add	x1, x2, w1, sxth #2
   13dc8:	br	x1
   13dcc:	ldr	w2, [x20, #28]
   13dd0:	ldr	w1, [x20, #36]
   13dd4:	add	w1, w1, w2
   13dd8:	ldr	w2, [x20, #24]
   13ddc:	cmp	w2, w1
   13de0:	b.ne	13e20 <lzma_mode_is_supported@@XZ_5.0+0x4cdc>  // b.any
   13de4:	ldr	w1, [x20, #104]
   13de8:	cmp	w1, #0x3
   13dec:	b.ne	13dfc <lzma_mode_is_supported@@XZ_5.0+0x4cb8>  // b.any
   13df0:	add	x2, x0, #0x1
   13df4:	strb	wzr, [x23, x0]
   13df8:	str	x2, [x21]
   13dfc:	cmp	w1, #0x0
   13e00:	cset	w0, ne  // ne = any
   13e04:	ldp	x19, x20, [sp, #16]
   13e08:	ldp	x21, x22, [sp, #32]
   13e0c:	ldp	x23, x24, [sp, #48]
   13e10:	ldp	x25, x26, [sp, #64]
   13e14:	ldp	x27, x28, [sp, #80]
   13e18:	ldp	x29, x30, [sp], #96
   13e1c:	ret
   13e20:	ldrb	w0, [x19, #129]
   13e24:	cbnz	w0, 13ea0 <lzma_mode_is_supported@@XZ_5.0+0x4d5c>
   13e28:	mov	w0, #0x1                   	// #1
   13e2c:	str	w0, [x19]
   13e30:	stp	xzr, xzr, [x19, #136]
   13e34:	mov	w0, #0x200000              	// #2097152
   13e38:	ldr	x1, [x19, #136]
   13e3c:	add	x3, x19, #0x90
   13e40:	ldp	w28, w27, [x20, #24]
   13e44:	sub	w0, w0, w1
   13e48:	ldr	w1, [x20, #100]
   13e4c:	mov	x4, #0x10000               	// #65536
   13e50:	add	w5, w28, w0
   13e54:	cmp	w1, w0
   13e58:	add	w2, w1, w27
   13e5c:	ldr	x0, [x19, #8]
   13e60:	sub	w5, w5, w2
   13e64:	csel	w5, w5, wzr, ls  // ls = plast
   13e68:	add	x2, x19, #0xa6
   13e6c:	mov	x1, x20
   13e70:	bl	e7fc <lzma_lzma_preset@@XZ_5.0+0x918>
   13e74:	cmp	w0, #0x1
   13e78:	ldp	w5, w1, [x20, #24]
   13e7c:	ldr	x2, [x19, #136]
   13e80:	add	w5, w27, w5
   13e84:	add	w28, w28, w1
   13e88:	sub	w5, w5, w28
   13e8c:	add	x5, x5, x2
   13e90:	str	x5, [x19, #136]
   13e94:	b.eq	13eb4 <lzma_mode_is_supported@@XZ_5.0+0x4d70>  // b.none
   13e98:	mov	w0, #0x0                   	// #0
   13e9c:	b	13e04 <lzma_mode_is_supported@@XZ_5.0+0x4cc0>
   13ea0:	ldr	x0, [x19, #8]
   13ea4:	add	x1, x19, #0x10
   13ea8:	bl	ed28 <lzma_lzma_preset@@XZ_5.0+0xe44>
   13eac:	cbz	w0, 13e28 <lzma_mode_is_supported@@XZ_5.0+0x4ce4>
   13eb0:	b	13e04 <lzma_mode_is_supported@@XZ_5.0+0x4cc0>
   13eb4:	ldr	x2, [x19, #144]
   13eb8:	cmp	x5, x2
   13ebc:	b.hi	13f08 <lzma_mode_is_supported@@XZ_5.0+0x4dc4>  // b.pmore
   13ec0:	add	x5, x5, w1, uxtw
   13ec4:	ldrb	w1, [x19, #130]
   13ec8:	str	wzr, [x20, #28]
   13ecc:	cmp	w1, #0x0
   13ed0:	sturh	w0, [x19, #129]
   13ed4:	cset	w1, eq  // eq = none
   13ed8:	mov	w0, #0x3                   	// #3
   13edc:	add	w1, w1, #0x1
   13ee0:	strb	w1, [x19, #160]
   13ee4:	sub	x1, x5, #0x1
   13ee8:	str	w0, [x19]
   13eec:	str	x5, [x19, #136]
   13ef0:	sub	w5, w5, #0x1
   13ef4:	lsr	x1, x1, #8
   13ef8:	str	xzr, [x19, #152]
   13efc:	strb	w1, [x19, #161]
   13f00:	strb	w5, [x19, #162]
   13f04:	b	13da4 <lzma_mode_is_supported@@XZ_5.0+0x4c60>
   13f08:	ldrb	w4, [x19, #128]
   13f0c:	cbz	w4, 13fc4 <lzma_mode_is_supported@@XZ_5.0+0x4e80>
   13f10:	ldrb	w0, [x19, #130]
   13f14:	cbz	w0, 13fbc <lzma_mode_is_supported@@XZ_5.0+0x4e78>
   13f18:	mov	w0, #0xffffffe0            	// #-32
   13f1c:	mov	x1, #0x0                   	// #0
   13f20:	strb	w0, [x19, #160]
   13f24:	add	x0, x19, x1
   13f28:	str	x1, [x19, #152]
   13f2c:	sub	x5, x5, #0x1
   13f30:	sub	x2, x2, #0x1
   13f34:	ldrb	w3, [x0, #160]
   13f38:	lsr	x6, x5, #16
   13f3c:	strb	w5, [x0, #162]
   13f40:	add	w3, w3, w6
   13f44:	strb	w3, [x0, #160]
   13f48:	lsr	x3, x5, #8
   13f4c:	strb	w3, [x0, #161]
   13f50:	lsr	x3, x2, #8
   13f54:	strb	w3, [x0, #163]
   13f58:	strb	w2, [x0, #164]
   13f5c:	cbz	w4, 13f70 <lzma_mode_is_supported@@XZ_5.0+0x4e2c>
   13f60:	add	x1, x1, #0x5
   13f64:	add	x0, x19, #0x10
   13f68:	add	x1, x25, x1
   13f6c:	bl	f0c0 <lzma_lzma_preset@@XZ_5.0+0x11dc>
   13f70:	ldr	x0, [x19, #144]
   13f74:	strh	wzr, [x19, #128]
   13f78:	strb	wzr, [x19, #130]
   13f7c:	add	x0, x0, #0x6
   13f80:	str	x0, [x19, #144]
   13f84:	mov	w0, #0x2                   	// #2
   13f88:	str	w0, [x19]
   13f8c:	ldr	x2, [x19, #144]
   13f90:	mov	x1, x26
   13f94:	mov	x5, x22
   13f98:	mov	x4, x21
   13f9c:	mov	x3, x23
   13fa0:	mov	x0, x25
   13fa4:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
   13fa8:	ldp	x0, x1, [x19, #144]
   13fac:	cmp	x1, x0
   13fb0:	b.ne	13e98 <lzma_mode_is_supported@@XZ_5.0+0x4d54>  // b.any
   13fb4:	str	wzr, [x19]
   13fb8:	b	13da4 <lzma_mode_is_supported@@XZ_5.0+0x4c60>
   13fbc:	mov	w0, #0xffffffc0            	// #-64
   13fc0:	b	13f1c <lzma_mode_is_supported@@XZ_5.0+0x4dd8>
   13fc4:	ldrb	w0, [x19, #129]
   13fc8:	cbz	w0, 13fdc <lzma_mode_is_supported@@XZ_5.0+0x4e98>
   13fcc:	mov	w0, #0xffffffa0            	// #-96
   13fd0:	mov	x1, #0x1                   	// #1
   13fd4:	strb	w0, [x19, #161]
   13fd8:	b	13f24 <lzma_mode_is_supported@@XZ_5.0+0x4de0>
   13fdc:	mov	w0, #0xffffff80            	// #-128
   13fe0:	b	13fd0 <lzma_mode_is_supported@@XZ_5.0+0x4e8c>
   13fe4:	mov	x5, x22
   13fe8:	mov	x4, x21
   13fec:	mov	x3, x23
   13ff0:	mov	x1, x26
   13ff4:	mov	x0, x25
   13ff8:	mov	x2, #0x3                   	// #3
   13ffc:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
   14000:	ldr	x0, [x19, #152]
   14004:	cmp	x0, #0x3
   14008:	b.ne	13e98 <lzma_mode_is_supported@@XZ_5.0+0x4d54>  // b.any
   1400c:	mov	w0, #0x4                   	// #4
   14010:	str	w0, [x19]
   14014:	ldr	x28, [x21]
   14018:	ldr	x1, [x19, #136]
   1401c:	sub	x27, x22, x28
   14020:	ldr	w0, [x20, #24]
   14024:	cmp	x27, x1
   14028:	csel	x27, x27, x1, ls  // ls = plast
   1402c:	sub	x0, x0, x1
   14030:	ldr	x1, [x20]
   14034:	mov	x2, x27
   14038:	add	x1, x1, x0
   1403c:	add	x0, x23, x28
   14040:	bl	3090 <memcpy@plt>
   14044:	add	x28, x28, x27
   14048:	ldr	x2, [x19, #136]
   1404c:	str	x28, [x21]
   14050:	sub	x27, x2, x27
   14054:	str	x27, [x19, #136]
   14058:	cbz	x27, 13fb4 <lzma_mode_is_supported@@XZ_5.0+0x4e70>
   1405c:	b	13e98 <lzma_mode_is_supported@@XZ_5.0+0x4d54>
   14060:	adrp	x3, 13000 <lzma_mode_is_supported@@XZ_5.0+0x3ebc>
   14064:	add	x3, x3, #0xc28
   14068:	b	c7c4 <lzma_crc64@@XZ_5.0+0x161c>
   1406c:	stp	x29, x30, [sp, #-16]!
   14070:	mov	x29, sp
   14074:	bl	f040 <lzma_lzma_preset@@XZ_5.0+0x115c>
   14078:	cmn	x0, #0x1
   1407c:	b.eq	14088 <lzma_mode_is_supported@@XZ_5.0+0x4f44>  // b.none
   14080:	add	x0, x0, #0x10, lsl #12
   14084:	add	x0, x0, #0xa8
   14088:	ldp	x29, x30, [sp], #16
   1408c:	ret
   14090:	ldr	w0, [x0]
   14094:	mov	w2, #0x1000                	// #4096
   14098:	cmp	w0, #0x1, lsl #12
   1409c:	csel	w0, w0, w2, cs  // cs = hs, nlast
   140a0:	sub	w0, w0, #0x1
   140a4:	orr	w0, w0, w0, lsr #2
   140a8:	orr	w0, w0, w0, lsr #3
   140ac:	orr	w0, w0, w0, lsr #4
   140b0:	orr	w0, w0, w0, lsr #8
   140b4:	orr	w0, w0, w0, lsr #16
   140b8:	cmn	w0, #0x1
   140bc:	b.ne	140d0 <lzma_mode_is_supported@@XZ_5.0+0x4f8c>  // b.any
   140c0:	mov	w0, #0x28                  	// #40
   140c4:	strb	w0, [x1]
   140c8:	mov	w0, #0x0                   	// #0
   140cc:	ret
   140d0:	mov	w2, #0x1fff                	// #8191
   140d4:	add	w0, w0, #0x1
   140d8:	cmp	w0, w2
   140dc:	adrp	x2, 2f000 <lzma_mode_is_supported@@XZ_5.0+0x1febc>
   140e0:	b.hi	140f4 <lzma_mode_is_supported@@XZ_5.0+0x4fb0>  // b.pmore
   140e4:	ldr	x2, [x2, #4008]
   140e8:	ldrb	w0, [x2, w0, uxtw]
   140ec:	sub	w0, w0, #0x18
   140f0:	b	140c4 <lzma_mode_is_supported@@XZ_5.0+0x4f80>
   140f4:	mov	w3, #0x1ffffff             	// #33554431
   140f8:	cmp	w0, w3
   140fc:	ldr	x2, [x2, #4008]
   14100:	b.hi	14114 <lzma_mode_is_supported@@XZ_5.0+0x4fd0>  // b.pmore
   14104:	lsr	w0, w0, #12
   14108:	ldrb	w0, [x2, x0]
   1410c:	add	w0, w0, #0x18
   14110:	b	140ec <lzma_mode_is_supported@@XZ_5.0+0x4fa8>
   14114:	lsr	w0, w0, #24
   14118:	ldrb	w0, [x2, x0]
   1411c:	add	w0, w0, #0x30
   14120:	b	140ec <lzma_mode_is_supported@@XZ_5.0+0x4fa8>
   14124:	ldr	w0, [x0]
   14128:	mov	w1, #0x3                   	// #3
   1412c:	umull	x0, w0, w1
   14130:	mov	x1, #0x100000              	// #1048576
   14134:	cmp	x0, #0x100, lsl #12
   14138:	csel	x0, x0, x1, cs  // cs = hs, nlast
   1413c:	ret
   14140:	stp	x29, x30, [sp, #-48]!
   14144:	mov	x29, sp
   14148:	stp	x19, x20, [sp, #16]
   1414c:	mov	x19, x0
   14150:	mov	x20, x2
   14154:	ldr	x0, [x0]
   14158:	stp	x21, x22, [sp, #32]
   1415c:	mov	x21, x1
   14160:	mov	x22, x3
   14164:	cbnz	x0, 14198 <lzma_mode_is_supported@@XZ_5.0+0x5054>
   14168:	mov	x0, #0xb8                  	// #184
   1416c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   14170:	cbz	x0, 141e4 <lzma_mode_is_supported@@XZ_5.0+0x50a0>
   14174:	adrp	x1, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   14178:	add	x1, x1, #0x228
   1417c:	stp	x0, x1, [x19]
   14180:	adrp	x1, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   14184:	add	x1, x1, #0x1f8
   14188:	stp	xzr, xzr, [x0, #8]
   1418c:	stp	xzr, xzr, [x0, #24]
   14190:	str	x1, [x19, #32]
   14194:	str	xzr, [x0, #40]
   14198:	mov	w1, #0x1                   	// #1
   1419c:	strb	w1, [x0, #64]
   141a0:	ldr	x1, [x20, #8]
   141a4:	str	wzr, [x0]
   141a8:	cbz	x1, 141dc <lzma_mode_is_supported@@XZ_5.0+0x5098>
   141ac:	ldr	w1, [x20, #16]
   141b0:	cmp	w1, #0x0
   141b4:	cset	w1, eq  // eq = none
   141b8:	strb	w1, [x0, #65]
   141bc:	mov	x3, x22
   141c0:	mov	x2, x20
   141c4:	mov	x1, x21
   141c8:	ldp	x19, x20, [sp, #16]
   141cc:	add	x0, x0, #0x8
   141d0:	ldp	x21, x22, [sp, #32]
   141d4:	ldp	x29, x30, [sp], #48
   141d8:	b	1396c <lzma_mode_is_supported@@XZ_5.0+0x4828>
   141dc:	mov	w1, #0x1                   	// #1
   141e0:	b	141b8 <lzma_mode_is_supported@@XZ_5.0+0x5074>
   141e4:	mov	w0, #0x5                   	// #5
   141e8:	ldp	x19, x20, [sp, #16]
   141ec:	ldp	x21, x22, [sp, #32]
   141f0:	ldp	x29, x30, [sp], #48
   141f4:	ret
   141f8:	stp	x29, x30, [sp, #-32]!
   141fc:	mov	x29, sp
   14200:	stp	x19, x20, [sp, #16]
   14204:	mov	x19, x0
   14208:	mov	x20, x1
   1420c:	ldr	x0, [x0, #8]
   14210:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
   14214:	mov	x1, x20
   14218:	mov	x0, x19
   1421c:	ldp	x19, x20, [sp, #16]
   14220:	ldp	x29, x30, [sp], #32
   14224:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
   14228:	stp	x29, x30, [sp, #-96]!
   1422c:	mov	x29, sp
   14230:	stp	x19, x20, [sp, #16]
   14234:	mov	x19, x0
   14238:	stp	x21, x22, [sp, #32]
   1423c:	mov	x22, x1
   14240:	stp	x23, x24, [sp, #48]
   14244:	mov	x23, x2
   14248:	mov	x24, x4
   1424c:	stp	x25, x26, [sp, #64]
   14250:	adrp	x25, 1b000 <lzma_mode_is_supported@@XZ_5.0+0xbebc>
   14254:	add	x26, x0, #0x48
   14258:	add	x25, x25, #0x9d8
   1425c:	stp	x27, x28, [sp, #80]
   14260:	mov	x28, x3
   14264:	add	x27, x1, #0x8
   14268:	ldr	x20, [x28]
   1426c:	ldr	w21, [x19]
   14270:	cmp	x20, x24
   14274:	b.cc	142d0 <lzma_mode_is_supported@@XZ_5.0+0x518c>  // b.lo, b.ul, b.last
   14278:	cmp	w21, #0x6
   1427c:	b.ne	144dc <lzma_mode_is_supported@@XZ_5.0+0x5398>  // b.any
   14280:	ldp	x0, x5, [x19, #8]
   14284:	mov	x2, x23
   14288:	mov	x1, x22
   1428c:	mov	x4, x24
   14290:	mov	x3, x28
   14294:	blr	x5
   14298:	mov	w21, w0
   1429c:	ldr	x2, [x28]
   142a0:	ldr	x0, [x19, #56]
   142a4:	sub	x1, x2, x20
   142a8:	cmp	x0, x1
   142ac:	b.cc	14358 <lzma_mode_is_supported@@XZ_5.0+0x5214>  // b.lo, b.ul, b.last
   142b0:	sub	x20, x20, x2
   142b4:	cmp	w21, #0x1
   142b8:	add	x20, x20, x0
   142bc:	str	x20, [x19, #56]
   142c0:	b.ne	1435c <lzma_mode_is_supported@@XZ_5.0+0x5218>  // b.any
   142c4:	cbnz	x20, 14358 <lzma_mode_is_supported@@XZ_5.0+0x5214>
   142c8:	str	wzr, [x19]
   142cc:	b	14268 <lzma_mode_is_supported@@XZ_5.0+0x5124>
   142d0:	cmp	w21, #0x7
   142d4:	b.hi	144e4 <lzma_mode_is_supported@@XZ_5.0+0x53a0>  // b.pmore
   142d8:	ldrb	w0, [x25, w21, uxtw]
   142dc:	adr	x1, 142e8 <lzma_mode_is_supported@@XZ_5.0+0x51a4>
   142e0:	add	x0, x1, w0, sxtb #2
   142e4:	br	x0
   142e8:	ldrb	w0, [x23, x20]
   142ec:	add	x20, x20, #0x1
   142f0:	str	x20, [x28]
   142f4:	cbz	w0, 144ec <lzma_mode_is_supported@@XZ_5.0+0x53a8>
   142f8:	cmp	w0, #0xdf
   142fc:	ccmp	w0, #0x1, #0x4, ls  // ls = plast
   14300:	b.ne	14350 <lzma_mode_is_supported@@XZ_5.0+0x520c>  // b.any
   14304:	mov	w1, #0x101                 	// #257
   14308:	strh	w1, [x19, #64]
   1430c:	cmp	w0, #0x7f
   14310:	b.ls	143a8 <lzma_mode_is_supported@@XZ_5.0+0x5264>  // b.plast
   14314:	ubfiz	x1, x0, #16, #5
   14318:	str	x1, [x19, #48]
   1431c:	mov	w1, #0x1                   	// #1
   14320:	str	w1, [x19]
   14324:	cmp	w0, #0xbf
   14328:	b.ls	1437c <lzma_mode_is_supported@@XZ_5.0+0x5238>  // b.plast
   1432c:	mov	w0, #0x5                   	// #5
   14330:	str	w0, [x19, #4]
   14334:	strb	wzr, [x19, #64]
   14338:	ldrb	w0, [x19, #65]
   1433c:	cbz	w0, 14268 <lzma_mode_is_supported@@XZ_5.0+0x5124>
   14340:	mov	w0, #0x1                   	// #1
   14344:	strb	w0, [x22, #40]
   14348:	strb	wzr, [x19, #65]
   1434c:	b	1435c <lzma_mode_is_supported@@XZ_5.0+0x5218>
   14350:	ldrb	w1, [x19, #65]
   14354:	cbz	w1, 1430c <lzma_mode_is_supported@@XZ_5.0+0x51c8>
   14358:	mov	w21, #0x9                   	// #9
   1435c:	mov	w0, w21
   14360:	ldp	x19, x20, [sp, #16]
   14364:	ldp	x21, x22, [sp, #32]
   14368:	ldp	x23, x24, [sp, #48]
   1436c:	ldp	x25, x26, [sp, #64]
   14370:	ldp	x27, x28, [sp, #80]
   14374:	ldp	x29, x30, [sp], #96
   14378:	ret
   1437c:	ldrb	w1, [x19, #64]
   14380:	cbnz	w1, 14358 <lzma_mode_is_supported@@XZ_5.0+0x5214>
   14384:	mov	w1, #0x6                   	// #6
   14388:	str	w1, [x19, #4]
   1438c:	cmp	w0, #0x9f
   14390:	b.ls	14338 <lzma_mode_is_supported@@XZ_5.0+0x51f4>  // b.plast
   14394:	ldr	x0, [x19, #8]
   14398:	mov	x1, x26
   1439c:	ldr	x2, [x19, #24]
   143a0:	blr	x2
   143a4:	b	14338 <lzma_mode_is_supported@@XZ_5.0+0x51f4>
   143a8:	cmp	w0, #0x2
   143ac:	b.hi	14358 <lzma_mode_is_supported@@XZ_5.0+0x5214>  // b.pmore
   143b0:	mov	x0, #0x3                   	// #3
   143b4:	movk	x0, #0x7, lsl #32
   143b8:	str	x0, [x19]
   143bc:	b	14338 <lzma_mode_is_supported@@XZ_5.0+0x51f4>
   143c0:	add	x0, x20, #0x1
   143c4:	str	x0, [x28]
   143c8:	ldrb	w0, [x23, x20]
   143cc:	ubfiz	x1, x0, #8, #8
   143d0:	ldr	x0, [x19, #48]
   143d4:	add	x0, x0, x1
   143d8:	str	x0, [x19, #48]
   143dc:	mov	w0, #0x2                   	// #2
   143e0:	str	w0, [x19]
   143e4:	b	14268 <lzma_mode_is_supported@@XZ_5.0+0x5124>
   143e8:	add	x0, x20, #0x1
   143ec:	ldrb	w1, [x23, x20]
   143f0:	str	x0, [x28]
   143f4:	ldr	x0, [x19, #48]
   143f8:	add	x1, x1, #0x1
   143fc:	ldr	x2, [x19, #32]
   14400:	add	x1, x1, x0
   14404:	mov	w0, #0x3                   	// #3
   14408:	str	w0, [x19]
   1440c:	ldr	x0, [x19, #8]
   14410:	str	x1, [x19, #48]
   14414:	blr	x2
   14418:	b	14268 <lzma_mode_is_supported@@XZ_5.0+0x5124>
   1441c:	add	x0, x20, #0x1
   14420:	str	x0, [x28]
   14424:	ldrb	w0, [x23, x20]
   14428:	ubfiz	x0, x0, #8, #8
   1442c:	str	x0, [x19, #56]
   14430:	mov	w0, #0x4                   	// #4
   14434:	b	143e0 <lzma_mode_is_supported@@XZ_5.0+0x529c>
   14438:	add	x0, x20, #0x1
   1443c:	str	x0, [x28]
   14440:	ldrb	w0, [x23, x20]
   14444:	add	x1, x0, #0x1
   14448:	ldr	x0, [x19, #56]
   1444c:	add	x0, x0, x1
   14450:	str	x0, [x19, #56]
   14454:	ldr	w0, [x19, #4]
   14458:	b	143e0 <lzma_mode_is_supported@@XZ_5.0+0x529c>
   1445c:	ldrb	w1, [x23, x20]
   14460:	add	x0, x20, #0x1
   14464:	str	x0, [x28]
   14468:	mov	x0, x26
   1446c:	bl	13a74 <lzma_mode_is_supported@@XZ_5.0+0x4930>
   14470:	tst	w0, #0xff
   14474:	b.ne	14358 <lzma_mode_is_supported@@XZ_5.0+0x5214>  // b.any
   14478:	ldr	x0, [x19, #8]
   1447c:	mov	x1, x26
   14480:	ldr	x2, [x19, #24]
   14484:	blr	x2
   14488:	mov	w0, #0x6                   	// #6
   1448c:	b	143e0 <lzma_mode_is_supported@@XZ_5.0+0x529c>
   14490:	ldr	x0, [x19, #56]
   14494:	sub	x1, x24, x20
   14498:	ldr	x3, [x22]
   1449c:	cmp	x1, x0
   144a0:	ldr	x5, [x22, #24]
   144a4:	add	x2, x20, x0
   144a8:	csel	x2, x2, x24, hi  // hi = pmore
   144ac:	mov	x1, x28
   144b0:	mov	x4, x27
   144b4:	mov	x0, x23
   144b8:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
   144bc:	ldr	x1, [x19, #56]
   144c0:	sub	x0, x1, x0
   144c4:	str	x0, [x19, #56]
   144c8:	ldp	x1, x2, [x22, #8]
   144cc:	cmp	x1, x2
   144d0:	b.ls	144d8 <lzma_mode_is_supported@@XZ_5.0+0x5394>  // b.plast
   144d4:	str	x1, [x22, #16]
   144d8:	cbz	x0, 142c8 <lzma_mode_is_supported@@XZ_5.0+0x5184>
   144dc:	mov	w21, #0x0                   	// #0
   144e0:	b	1435c <lzma_mode_is_supported@@XZ_5.0+0x5218>
   144e4:	mov	w21, #0xb                   	// #11
   144e8:	b	1435c <lzma_mode_is_supported@@XZ_5.0+0x5218>
   144ec:	mov	w21, #0x1                   	// #1
   144f0:	b	1435c <lzma_mode_is_supported@@XZ_5.0+0x5218>
   144f4:	adrp	x3, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   144f8:	add	x3, x3, #0x140
   144fc:	b	dd48 <lzma_mf_is_supported@@XZ_5.0+0x138c>
   14500:	stp	x29, x30, [sp, #-16]!
   14504:	mov	x29, sp
   14508:	bl	13ac0 <lzma_mode_is_supported@@XZ_5.0+0x497c>
   1450c:	add	x0, x0, #0xb8
   14510:	ldp	x29, x30, [sp], #16
   14514:	ret
   14518:	cmp	x3, #0x1
   1451c:	b.ne	14594 <lzma_mode_is_supported@@XZ_5.0+0x5450>  // b.any
   14520:	stp	x29, x30, [sp, #-32]!
   14524:	mov	x29, sp
   14528:	stp	x19, x20, [sp, #16]
   1452c:	mov	x20, x0
   14530:	mov	x19, x2
   14534:	ldrb	w0, [x2]
   14538:	tst	w0, #0xc0
   1453c:	b.ne	1459c <lzma_mode_is_supported@@XZ_5.0+0x5458>  // b.any
   14540:	cmp	w0, #0x28
   14544:	b.hi	1459c <lzma_mode_is_supported@@XZ_5.0+0x5458>  // b.pmore
   14548:	mov	x0, #0x70                  	// #112
   1454c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   14550:	cbz	x0, 145a4 <lzma_mode_is_supported@@XZ_5.0+0x5460>
   14554:	ldrb	w2, [x19]
   14558:	str	x0, [x20]
   1455c:	and	w1, w2, #0x1
   14560:	cmp	w2, #0x28
   14564:	lsr	w3, w2, #1
   14568:	orr	w1, w1, #0x2
   1456c:	add	w3, w3, #0xb
   14570:	str	xzr, [x0, #8]
   14574:	str	wzr, [x0, #16]
   14578:	lsl	w1, w1, w3
   1457c:	csinv	w1, w1, wzr, ne  // ne = any
   14580:	str	w1, [x0]
   14584:	mov	w0, #0x0                   	// #0
   14588:	ldp	x19, x20, [sp, #16]
   1458c:	ldp	x29, x30, [sp], #32
   14590:	ret
   14594:	mov	w0, #0x8                   	// #8
   14598:	ret
   1459c:	mov	w0, #0x8                   	// #8
   145a0:	b	14588 <lzma_mode_is_supported@@XZ_5.0+0x5444>
   145a4:	mov	w0, #0x5                   	// #5
   145a8:	b	14588 <lzma_mode_is_supported@@XZ_5.0+0x5444>
   145ac:	stp	x29, x30, [sp, #-32]!
   145b0:	mov	x29, sp
   145b4:	stp	x19, x20, [sp, #16]
   145b8:	mov	x19, x0
   145bc:	mov	x20, x1
   145c0:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
   145c4:	mov	x1, x20
   145c8:	mov	x0, x19
   145cc:	ldp	x19, x20, [sp, #16]
   145d0:	ldp	x29, x30, [sp], #32
   145d4:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
   145d8:	cbz	x0, 145fc <lzma_mode_is_supported@@XZ_5.0+0x54b8>
   145dc:	ldr	w1, [x0]
   145e0:	cbnz	w1, 145fc <lzma_mode_is_supported@@XZ_5.0+0x54b8>
   145e4:	ldr	w0, [x0, #4]
   145e8:	sub	w0, w0, #0x1
   145ec:	cmp	w0, #0xff
   145f0:	mov	x0, #0x158                 	// #344
   145f4:	csinv	x0, x0, xzr, ls  // ls = plast
   145f8:	ret
   145fc:	mov	x0, #0xffffffffffffffff    	// #-1
   14600:	b	145f8 <lzma_mode_is_supported@@XZ_5.0+0x54b4>
   14604:	stp	x29, x30, [sp, #-48]!
   14608:	mov	x29, sp
   1460c:	stp	x19, x20, [sp, #16]
   14610:	ldr	x19, [x0]
   14614:	stp	x21, x22, [sp, #32]
   14618:	mov	x22, x1
   1461c:	mov	x21, x2
   14620:	cbnz	x19, 14664 <lzma_mode_is_supported@@XZ_5.0+0x5520>
   14624:	mov	x20, x0
   14628:	mov	x0, #0x158                 	// #344
   1462c:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   14630:	mov	x19, x0
   14634:	cbz	x0, 146b0 <lzma_mode_is_supported@@XZ_5.0+0x556c>
   14638:	adrp	x0, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   1463c:	add	x0, x0, #0x5ac
   14640:	str	xzr, [x19]
   14644:	str	x19, [x20]
   14648:	stp	xzr, xzr, [x19, #16]
   1464c:	str	x0, [x20, #32]
   14650:	mov	x0, #0xffffffffffffffff    	// #-1
   14654:	str	x0, [x19, #8]
   14658:	stp	xzr, xzr, [x19, #32]
   1465c:	stp	xzr, xzr, [x19, #48]
   14660:	str	xzr, [x19, #64]
   14664:	ldr	x2, [x21, #16]
   14668:	mov	x0, x2
   1466c:	bl	145d8 <lzma_mode_is_supported@@XZ_5.0+0x5494>
   14670:	cmn	x0, #0x1
   14674:	b.eq	146c4 <lzma_mode_is_supported@@XZ_5.0+0x5580>  // b.none
   14678:	ldr	w0, [x2, #4]
   1467c:	mov	w1, #0x0                   	// #0
   14680:	str	x0, [x19, #72]
   14684:	mov	x2, #0x100                 	// #256
   14688:	strb	wzr, [x19, #80]
   1468c:	add	x0, x19, #0x51
   14690:	bl	3230 <memset@plt>
   14694:	add	x2, x21, #0x18
   14698:	mov	x1, x22
   1469c:	mov	x0, x19
   146a0:	ldp	x19, x20, [sp, #16]
   146a4:	ldp	x21, x22, [sp, #32]
   146a8:	ldp	x29, x30, [sp], #48
   146ac:	b	389c <lzma_version_string@@XZ_5.0+0x1cc>
   146b0:	mov	w0, #0x5                   	// #5
   146b4:	ldp	x19, x20, [sp, #16]
   146b8:	ldp	x21, x22, [sp, #32]
   146bc:	ldp	x29, x30, [sp], #48
   146c0:	ret
   146c4:	mov	w0, #0x8                   	// #8
   146c8:	b	146b4 <lzma_mode_is_supported@@XZ_5.0+0x5570>
   146cc:	add	x2, x3, #0x10
   146d0:	b	3808 <lzma_version_string@@XZ_5.0+0x138>
   146d4:	sub	sp, sp, #0x40
   146d8:	stp	x29, x30, [sp, #16]
   146dc:	add	x29, sp, #0x10
   146e0:	ldr	x13, [x0, #24]
   146e4:	stp	x19, x20, [sp, #32]
   146e8:	ldr	w12, [sp, #64]
   146ec:	stp	x21, x22, [sp, #48]
   146f0:	mov	x19, x0
   146f4:	mov	x21, x5
   146f8:	mov	x22, x6
   146fc:	ldr	x20, [x6]
   14700:	cbnz	x13, 147b4 <lzma_mode_is_supported@@XZ_5.0+0x5670>
   14704:	mov	x10, x2
   14708:	sub	x7, x7, x20
   1470c:	ldr	x2, [x3]
   14710:	mov	x11, x4
   14714:	mov	x9, x3
   14718:	add	x1, x5, x20
   1471c:	sub	x0, x4, x2
   14720:	add	x10, x10, x2
   14724:	ldr	x4, [x19, #72]
   14728:	cmp	x0, x7
   1472c:	csel	x7, x0, x7, ls  // ls = plast
   14730:	mov	x0, #0x0                   	// #0
   14734:	cmp	x7, x0
   14738:	b.ne	14774 <lzma_mode_is_supported@@XZ_5.0+0x5630>  // b.any
   1473c:	ldr	x0, [x9]
   14740:	ldr	x1, [x22]
   14744:	add	x0, x7, x0
   14748:	str	x0, [x9]
   1474c:	add	x7, x1, x7
   14750:	str	x7, [x22]
   14754:	cbz	w12, 147ac <lzma_mode_is_supported@@XZ_5.0+0x5668>
   14758:	cmp	x11, x0
   1475c:	cset	w0, eq  // eq = none
   14760:	ldp	x29, x30, [sp, #16]
   14764:	ldp	x19, x20, [sp, #32]
   14768:	ldp	x21, x22, [sp, #48]
   1476c:	add	sp, sp, #0x40
   14770:	ret
   14774:	ldrb	w2, [x19, #80]
   14778:	ldrb	w3, [x19, #80]
   1477c:	add	x2, x2, x4
   14780:	add	x2, x19, w2, uxtb
   14784:	ldrb	w5, [x2, #81]
   14788:	sub	w2, w3, #0x1
   1478c:	add	x3, x19, w3, sxtw
   14790:	strb	w2, [x19, #80]
   14794:	ldrb	w2, [x10, x0]
   14798:	strb	w2, [x3, #81]
   1479c:	sub	w2, w2, w5
   147a0:	strb	w2, [x1, x0]
   147a4:	add	x0, x0, #0x1
   147a8:	b	14734 <lzma_mode_is_supported@@XZ_5.0+0x55f0>
   147ac:	mov	w0, #0x0                   	// #0
   147b0:	b	14760 <lzma_mode_is_supported@@XZ_5.0+0x561c>
   147b4:	ldr	x0, [x0]
   147b8:	str	w12, [sp]
   147bc:	blr	x13
   147c0:	add	x1, x21, x20
   147c4:	ldr	x20, [x22]
   147c8:	ldr	x4, [x19, #72]
   147cc:	add	x21, x21, x20
   147d0:	cmp	x1, x21
   147d4:	b.eq	14760 <lzma_mode_is_supported@@XZ_5.0+0x561c>  // b.none
   147d8:	ldrb	w2, [x19, #80]
   147dc:	ldrb	w3, [x19, #80]
   147e0:	add	x2, x2, x4
   147e4:	add	x2, x19, w2, uxtb
   147e8:	ldrb	w5, [x2, #81]
   147ec:	sub	w2, w3, #0x1
   147f0:	add	x3, x19, w3, sxtw
   147f4:	strb	w2, [x19, #80]
   147f8:	ldrb	w2, [x1]
   147fc:	strb	w2, [x3, #81]
   14800:	sub	w2, w2, w5
   14804:	strb	w2, [x1], #1
   14808:	b	147d0 <lzma_mode_is_supported@@XZ_5.0+0x568c>
   1480c:	adrp	x4, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   14810:	add	x4, x4, #0x6d4
   14814:	str	x4, [x0, #24]
   14818:	adrp	x4, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   1481c:	add	x4, x4, #0x6cc
   14820:	str	x4, [x0, #64]
   14824:	b	14604 <lzma_mode_is_supported@@XZ_5.0+0x54c0>
   14828:	stp	x29, x30, [sp, #-32]!
   1482c:	mov	x29, sp
   14830:	stp	x19, x20, [sp, #16]
   14834:	mov	x20, x0
   14838:	mov	x19, x1
   1483c:	bl	145d8 <lzma_mode_is_supported@@XZ_5.0+0x5494>
   14840:	cmn	x0, #0x1
   14844:	b.eq	14864 <lzma_mode_is_supported@@XZ_5.0+0x5720>  // b.none
   14848:	ldr	w0, [x20, #4]
   1484c:	sub	w0, w0, #0x1
   14850:	strb	w0, [x19]
   14854:	mov	w0, #0x0                   	// #0
   14858:	ldp	x19, x20, [sp, #16]
   1485c:	ldp	x29, x30, [sp], #32
   14860:	ret
   14864:	mov	w0, #0xb                   	// #11
   14868:	b	14858 <lzma_mode_is_supported@@XZ_5.0+0x5714>
   1486c:	sub	sp, sp, #0x40
   14870:	stp	x29, x30, [sp, #16]
   14874:	add	x29, sp, #0x10
   14878:	stp	x19, x20, [sp, #32]
   1487c:	mov	x19, x0
   14880:	ldr	w0, [sp, #64]
   14884:	stp	x21, x22, [sp, #48]
   14888:	mov	x22, x6
   1488c:	mov	x20, x5
   14890:	ldr	x8, [x19, #24]
   14894:	str	w0, [sp]
   14898:	ldr	x21, [x6]
   1489c:	ldr	x0, [x19]
   148a0:	blr	x8
   148a4:	ldr	x5, [x22]
   148a8:	add	x1, x20, x21
   148ac:	ldr	x4, [x19, #72]
   148b0:	add	x20, x20, x5
   148b4:	cmp	x1, x20
   148b8:	b.ne	148d0 <lzma_mode_is_supported@@XZ_5.0+0x578c>  // b.any
   148bc:	ldp	x29, x30, [sp, #16]
   148c0:	ldp	x19, x20, [sp, #32]
   148c4:	ldp	x21, x22, [sp, #48]
   148c8:	add	sp, sp, #0x40
   148cc:	ret
   148d0:	ldrb	w2, [x19, #80]
   148d4:	ldrb	w3, [x19, #80]
   148d8:	add	x2, x2, x4
   148dc:	ldrb	w5, [x1]
   148e0:	add	x2, x19, w2, uxtb
   148e4:	ldrb	w2, [x2, #81]
   148e8:	add	w2, w2, w5
   148ec:	sub	w5, w3, #0x1
   148f0:	add	x3, x19, w3, sxtw
   148f4:	and	w2, w2, #0xff
   148f8:	strb	w2, [x1], #1
   148fc:	strb	w5, [x19, #80]
   14900:	strb	w2, [x3, #81]
   14904:	b	148b4 <lzma_mode_is_supported@@XZ_5.0+0x5770>
   14908:	adrp	x3, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   1490c:	add	x3, x3, #0x86c
   14910:	str	x3, [x0, #24]
   14914:	b	14604 <lzma_mode_is_supported@@XZ_5.0+0x54c0>
   14918:	cmp	x3, #0x1
   1491c:	b.ne	14960 <lzma_mode_is_supported@@XZ_5.0+0x581c>  // b.any
   14920:	stp	x29, x30, [sp, #-32]!
   14924:	mov	x29, sp
   14928:	stp	x19, x20, [sp, #16]
   1492c:	mov	x19, x0
   14930:	mov	x20, x2
   14934:	mov	x0, #0x28                  	// #40
   14938:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   1493c:	cbz	x0, 14968 <lzma_mode_is_supported@@XZ_5.0+0x5824>
   14940:	ldrb	w1, [x20]
   14944:	str	x0, [x19]
   14948:	add	w1, w1, #0x1
   1494c:	stp	wzr, w1, [x0]
   14950:	mov	w0, #0x0                   	// #0
   14954:	ldp	x19, x20, [sp, #16]
   14958:	ldp	x29, x30, [sp], #32
   1495c:	ret
   14960:	mov	w0, #0x8                   	// #8
   14964:	ret
   14968:	mov	w0, #0x5                   	// #5
   1496c:	b	14954 <lzma_mode_is_supported@@XZ_5.0+0x5810>
   14970:	add	x2, x3, #0x10
   14974:	b	3808 <lzma_version_string@@XZ_5.0+0x138>
   14978:	stp	x29, x30, [sp, #-32]!
   1497c:	mov	x29, sp
   14980:	stp	x19, x20, [sp, #16]
   14984:	mov	x19, x0
   14988:	mov	x20, x1
   1498c:	bl	3848 <lzma_version_string@@XZ_5.0+0x178>
   14990:	ldr	x0, [x19, #88]
   14994:	mov	x1, x20
   14998:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
   1499c:	mov	x1, x20
   149a0:	mov	x0, x19
   149a4:	ldp	x19, x20, [sp, #16]
   149a8:	ldp	x29, x30, [sp], #32
   149ac:	b	3778 <lzma_version_string@@XZ_5.0+0xa8>
   149b0:	sub	sp, sp, #0x40
   149b4:	stp	x29, x30, [sp, #16]
   149b8:	add	x29, sp, #0x10
   149bc:	ldr	x11, [x0, #24]
   149c0:	stp	x19, x20, [sp, #32]
   149c4:	mov	x19, x0
   149c8:	stp	x21, x22, [sp, #48]
   149cc:	ldr	w22, [sp, #64]
   149d0:	cbnz	x11, 14a28 <lzma_mode_is_supported@@XZ_5.0+0x58e4>
   149d4:	mov	x8, x5
   149d8:	mov	x21, x3
   149dc:	mov	x20, x4
   149e0:	mov	x0, x2
   149e4:	mov	x5, x7
   149e8:	mov	x4, x6
   149ec:	mov	x3, x8
   149f0:	mov	x2, x20
   149f4:	mov	x1, x21
   149f8:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
   149fc:	ldrb	w0, [x19, #73]
   14a00:	cbz	w0, 14a20 <lzma_mode_is_supported@@XZ_5.0+0x58dc>
   14a04:	cmp	w22, #0x3
   14a08:	b.ne	14a20 <lzma_mode_is_supported@@XZ_5.0+0x58dc>  // b.any
   14a0c:	ldr	x0, [x21]
   14a10:	cmp	x20, x0
   14a14:	b.ne	14a20 <lzma_mode_is_supported@@XZ_5.0+0x58dc>  // b.any
   14a18:	mov	w0, #0x1                   	// #1
   14a1c:	strb	w0, [x19, #72]
   14a20:	mov	w0, #0x0                   	// #0
   14a24:	b	14a3c <lzma_mode_is_supported@@XZ_5.0+0x58f8>
   14a28:	ldr	x0, [x0]
   14a2c:	str	w22, [sp]
   14a30:	blr	x11
   14a34:	cmp	w0, #0x1
   14a38:	b.eq	14a1c <lzma_mode_is_supported@@XZ_5.0+0x58d8>  // b.none
   14a3c:	ldp	x29, x30, [sp, #16]
   14a40:	ldp	x19, x20, [sp, #32]
   14a44:	ldp	x21, x22, [sp, #48]
   14a48:	add	sp, sp, #0x40
   14a4c:	ret
   14a50:	sub	sp, sp, #0x90
   14a54:	stp	x29, x30, [sp, #16]
   14a58:	add	x29, sp, #0x10
   14a5c:	stp	x19, x20, [sp, #32]
   14a60:	mov	x19, x0
   14a64:	ldr	w0, [sp, #144]
   14a68:	stp	x21, x22, [sp, #48]
   14a6c:	cmp	w0, #0x1
   14a70:	stp	x23, x24, [sp, #64]
   14a74:	stp	x25, x26, [sp, #80]
   14a78:	stp	x27, x28, [sp, #96]
   14a7c:	str	x1, [sp, #120]
   14a80:	b.eq	14ca8 <lzma_mode_is_supported@@XZ_5.0+0x5b64>  // b.none
   14a84:	mov	x25, x2
   14a88:	mov	x26, x3
   14a8c:	ldp	x0, x2, [x19, #112]
   14a90:	mov	x27, x4
   14a94:	mov	x22, x5
   14a98:	mov	x20, x6
   14a9c:	mov	x23, x7
   14aa0:	add	x21, x19, #0x88
   14aa4:	cmp	x0, x2
   14aa8:	b.cc	14b7c <lzma_mode_is_supported@@XZ_5.0+0x5a38>  // b.lo, b.ul, b.last
   14aac:	ldr	x24, [x20]
   14ab0:	str	xzr, [x19, #120]
   14ab4:	ldr	x1, [x19, #112]
   14ab8:	sub	x0, x23, x24
   14abc:	ldr	x2, [x19, #128]
   14ac0:	subs	x28, x2, x1
   14ac4:	ccmp	x0, x28, #0x2, ne  // ne = any
   14ac8:	b.ls	14c88 <lzma_mode_is_supported@@XZ_5.0+0x5b44>  // b.plast
   14acc:	add	x9, x22, x24
   14ad0:	mov	x2, x28
   14ad4:	add	x1, x21, x1
   14ad8:	mov	x0, x9
   14adc:	str	x9, [sp, #136]
   14ae0:	bl	3090 <memcpy@plt>
   14ae4:	ldr	x1, [sp, #120]
   14ae8:	add	x2, x24, x28
   14aec:	ldr	w0, [sp, #144]
   14af0:	mov	x7, x23
   14af4:	str	x2, [x20]
   14af8:	mov	x6, x20
   14afc:	str	w0, [sp]
   14b00:	mov	x5, x22
   14b04:	mov	x4, x27
   14b08:	mov	x3, x26
   14b0c:	mov	x2, x25
   14b10:	mov	x0, x19
   14b14:	bl	149b0 <lzma_mode_is_supported@@XZ_5.0+0x586c>
   14b18:	cbnz	w0, 14ba4 <lzma_mode_is_supported@@XZ_5.0+0x5a60>
   14b1c:	ldp	x6, x0, [x19, #80]
   14b20:	ldrb	w2, [x19, #73]
   14b24:	ldr	w1, [x19, #96]
   14b28:	ldr	x9, [sp, #136]
   14b2c:	ldr	x28, [x20]
   14b30:	mov	x3, x9
   14b34:	sub	x4, x28, x24
   14b38:	str	x4, [sp, #128]
   14b3c:	blr	x6
   14b40:	str	xzr, [x19, #112]
   14b44:	ldr	w1, [x19, #96]
   14b48:	ldr	x4, [sp, #128]
   14b4c:	add	w1, w1, w0
   14b50:	str	w1, [x19, #96]
   14b54:	ldrb	w1, [x19, #72]
   14b58:	sub	x2, x4, x0
   14b5c:	str	x2, [x19, #128]
   14b60:	cbz	w1, 14bd4 <lzma_mode_is_supported@@XZ_5.0+0x5a90>
   14b64:	str	xzr, [x19, #128]
   14b68:	ldr	x1, [x19, #112]
   14b6c:	ldr	x0, [x19, #128]
   14b70:	cmp	x1, x0
   14b74:	cset	w0, eq  // eq = none
   14b78:	b	14ba4 <lzma_mode_is_supported@@XZ_5.0+0x5a60>
   14b7c:	add	x1, x19, #0x70
   14b80:	mov	x5, x7
   14b84:	mov	x4, x6
   14b88:	mov	x3, x22
   14b8c:	mov	x0, x21
   14b90:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
   14b94:	ldp	x1, x0, [x19, #112]
   14b98:	cmp	x1, x0
   14b9c:	b.cs	14bc4 <lzma_mode_is_supported@@XZ_5.0+0x5a80>  // b.hs, b.nlast
   14ba0:	mov	w0, #0x0                   	// #0
   14ba4:	ldp	x29, x30, [sp, #16]
   14ba8:	ldp	x19, x20, [sp, #32]
   14bac:	ldp	x21, x22, [sp, #48]
   14bb0:	ldp	x23, x24, [sp, #64]
   14bb4:	ldp	x25, x26, [sp, #80]
   14bb8:	ldp	x27, x28, [sp, #96]
   14bbc:	add	sp, sp, #0x90
   14bc0:	ret
   14bc4:	ldrb	w0, [x19, #72]
   14bc8:	cbz	w0, 14aac <lzma_mode_is_supported@@XZ_5.0+0x5968>
   14bcc:	mov	w0, #0x1                   	// #1
   14bd0:	b	14ba4 <lzma_mode_is_supported@@XZ_5.0+0x5a60>
   14bd4:	cbz	x2, 14ba0 <lzma_mode_is_supported@@XZ_5.0+0x5a5c>
   14bd8:	ldr	x1, [x20]
   14bdc:	add	x8, x24, x1
   14be0:	sub	x1, x0, x28
   14be4:	add	x1, x8, x1
   14be8:	str	x1, [x20]
   14bec:	mov	x0, x21
   14bf0:	add	x1, x22, x1
   14bf4:	bl	3090 <memcpy@plt>
   14bf8:	ldr	x7, [x19, #104]
   14bfc:	add	x6, x19, #0x80
   14c00:	ldr	x1, [sp, #120]
   14c04:	mov	x5, x21
   14c08:	ldr	w0, [sp, #144]
   14c0c:	mov	x4, x27
   14c10:	str	w0, [sp]
   14c14:	mov	x3, x26
   14c18:	mov	x2, x25
   14c1c:	mov	x0, x19
   14c20:	bl	149b0 <lzma_mode_is_supported@@XZ_5.0+0x586c>
   14c24:	cbnz	w0, 14ba4 <lzma_mode_is_supported@@XZ_5.0+0x5a60>
   14c28:	ldp	x5, x0, [x19, #80]
   14c2c:	mov	x3, x21
   14c30:	ldr	w1, [x19, #96]
   14c34:	ldrb	w2, [x19, #73]
   14c38:	ldr	x4, [x19, #128]
   14c3c:	blr	x5
   14c40:	str	x0, [x19, #120]
   14c44:	ldr	w1, [x19, #96]
   14c48:	add	w1, w1, w0
   14c4c:	ldrb	w0, [x19, #72]
   14c50:	str	w1, [x19, #96]
   14c54:	cbz	w0, 14c60 <lzma_mode_is_supported@@XZ_5.0+0x5b1c>
   14c58:	ldr	x0, [x19, #128]
   14c5c:	str	x0, [x19, #120]
   14c60:	ldr	x2, [x19, #120]
   14c64:	mov	x5, x23
   14c68:	mov	x4, x20
   14c6c:	mov	x3, x22
   14c70:	add	x1, x19, #0x70
   14c74:	mov	x0, x21
   14c78:	bl	379c <lzma_version_string@@XZ_5.0+0xcc>
   14c7c:	ldrb	w0, [x19, #72]
   14c80:	cbz	w0, 14ba0 <lzma_mode_is_supported@@XZ_5.0+0x5a5c>
   14c84:	b	14b68 <lzma_mode_is_supported@@XZ_5.0+0x5a24>
   14c88:	cbz	x1, 14bf8 <lzma_mode_is_supported@@XZ_5.0+0x5ab4>
   14c8c:	mov	x2, x28
   14c90:	add	x1, x21, x1
   14c94:	mov	x0, x21
   14c98:	bl	30b0 <memmove@plt>
   14c9c:	str	xzr, [x19, #112]
   14ca0:	str	x28, [x19, #128]
   14ca4:	b	14bf8 <lzma_mode_is_supported@@XZ_5.0+0x5ab4>
   14ca8:	mov	w0, #0x8                   	// #8
   14cac:	b	14ba4 <lzma_mode_is_supported@@XZ_5.0+0x5a60>
   14cb0:	stp	x29, x30, [sp, #-96]!
   14cb4:	mov	x29, sp
   14cb8:	stp	x19, x20, [sp, #16]
   14cbc:	ldr	x19, [x0]
   14cc0:	stp	x21, x22, [sp, #32]
   14cc4:	mov	w22, w6
   14cc8:	stp	x23, x24, [sp, #48]
   14ccc:	mov	x23, x2
   14cd0:	and	w24, w7, #0xff
   14cd4:	stp	x25, x26, [sp, #64]
   14cd8:	mov	x25, x1
   14cdc:	str	x27, [sp, #80]
   14ce0:	cbnz	x19, 14d90 <lzma_mode_is_supported@@XZ_5.0+0x5c4c>
   14ce4:	add	x5, x5, #0x44
   14ce8:	mov	x21, x0
   14cec:	mov	x27, x3
   14cf0:	mov	x26, x4
   14cf4:	lsl	x20, x5, #1
   14cf8:	mov	x0, x20
   14cfc:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   14d00:	mov	x19, x0
   14d04:	cbnz	x0, 14d28 <lzma_mode_is_supported@@XZ_5.0+0x5be4>
   14d08:	mov	w0, #0x5                   	// #5
   14d0c:	ldp	x19, x20, [sp, #16]
   14d10:	ldp	x21, x22, [sp, #32]
   14d14:	ldp	x23, x24, [sp, #48]
   14d18:	ldp	x25, x26, [sp, #64]
   14d1c:	ldr	x27, [sp, #80]
   14d20:	ldp	x29, x30, [sp], #96
   14d24:	ret
   14d28:	adrp	x0, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   14d2c:	add	x0, x0, #0xa50
   14d30:	str	x0, [x21, #24]
   14d34:	adrp	x0, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   14d38:	add	x0, x0, #0x978
   14d3c:	str	x0, [x21, #32]
   14d40:	adrp	x0, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   14d44:	add	x0, x0, #0x970
   14d48:	sub	x20, x20, #0x88
   14d4c:	str	xzr, [x19]
   14d50:	str	x19, [x21]
   14d54:	stp	xzr, xzr, [x19, #16]
   14d58:	stp	xzr, xzr, [x19, #32]
   14d5c:	stp	xzr, xzr, [x19, #48]
   14d60:	str	x0, [x21, #64]
   14d64:	mov	x0, #0xffffffffffffffff    	// #-1
   14d68:	str	x0, [x19, #8]
   14d6c:	str	xzr, [x19, #64]
   14d70:	str	x27, [x19, #80]
   14d74:	str	x20, [x19, #104]
   14d78:	cbz	x26, 14db4 <lzma_mode_is_supported@@XZ_5.0+0x5c70>
   14d7c:	mov	x1, x25
   14d80:	mov	x0, x26
   14d84:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   14d88:	str	x0, [x19, #88]
   14d8c:	cbz	x0, 14d08 <lzma_mode_is_supported@@XZ_5.0+0x5bc4>
   14d90:	ldr	x0, [x23, #16]
   14d94:	cbz	x0, 14dbc <lzma_mode_is_supported@@XZ_5.0+0x5c78>
   14d98:	ldr	w0, [x0]
   14d9c:	sub	w22, w22, #0x1
   14da0:	str	w0, [x19, #96]
   14da4:	tst	w22, w0
   14da8:	b.eq	14dc0 <lzma_mode_is_supported@@XZ_5.0+0x5c7c>  // b.none
   14dac:	mov	w0, #0x8                   	// #8
   14db0:	b	14d0c <lzma_mode_is_supported@@XZ_5.0+0x5bc8>
   14db4:	str	xzr, [x19, #88]
   14db8:	b	14d90 <lzma_mode_is_supported@@XZ_5.0+0x5c4c>
   14dbc:	str	wzr, [x19, #96]
   14dc0:	add	x2, x23, #0x18
   14dc4:	mov	x1, x25
   14dc8:	strb	wzr, [x19, #72]
   14dcc:	mov	x0, x19
   14dd0:	strb	w24, [x19, #73]
   14dd4:	ldp	x21, x22, [sp, #32]
   14dd8:	ldp	x23, x24, [sp, #48]
   14ddc:	ldp	x25, x26, [sp, #64]
   14de0:	ldr	x27, [sp, #80]
   14de4:	stp	xzr, xzr, [x19, #112]
   14de8:	str	xzr, [x19, #128]
   14dec:	ldp	x19, x20, [sp, #16]
   14df0:	ldp	x29, x30, [sp], #96
   14df4:	b	389c <lzma_version_string@@XZ_5.0+0x1cc>
   14df8:	cbz	x1, 14e18 <lzma_mode_is_supported@@XZ_5.0+0x5cd4>
   14dfc:	ldr	w1, [x1]
   14e00:	mov	w2, #0x4                   	// #4
   14e04:	cmp	w1, #0x0
   14e08:	csel	w1, w1, w2, eq  // eq = none
   14e0c:	str	w1, [x0]
   14e10:	mov	w0, #0x0                   	// #0
   14e14:	ret
   14e18:	mov	w1, #0x0                   	// #0
   14e1c:	b	14e0c <lzma_mode_is_supported@@XZ_5.0+0x5cc8>
   14e20:	cbz	x0, 14e30 <lzma_mode_is_supported@@XZ_5.0+0x5cec>
   14e24:	ldr	w0, [x0]
   14e28:	cbz	w0, 14e30 <lzma_mode_is_supported@@XZ_5.0+0x5cec>
   14e2c:	str	w0, [x1]
   14e30:	mov	w0, #0x0                   	// #0
   14e34:	ret
   14e38:	stp	x29, x30, [sp, #-48]!
   14e3c:	mov	x29, sp
   14e40:	stp	x19, x20, [sp, #16]
   14e44:	str	x21, [sp, #32]
   14e48:	cbz	x3, 14e98 <lzma_mode_is_supported@@XZ_5.0+0x5d54>
   14e4c:	mov	x20, x0
   14e50:	cmp	x3, #0x4
   14e54:	mov	x0, x3
   14e58:	b.ne	14ea0 <lzma_mode_is_supported@@XZ_5.0+0x5d5c>  // b.any
   14e5c:	mov	x21, x1
   14e60:	mov	x19, x2
   14e64:	bl	36dc <lzma_version_string@@XZ_5.0+0xc>
   14e68:	cbz	x0, 14ea8 <lzma_mode_is_supported@@XZ_5.0+0x5d64>
   14e6c:	ldr	w19, [x19]
   14e70:	str	w19, [x0]
   14e74:	cbnz	w19, 14e94 <lzma_mode_is_supported@@XZ_5.0+0x5d50>
   14e78:	mov	x1, x21
   14e7c:	bl	3778 <lzma_version_string@@XZ_5.0+0xa8>
   14e80:	mov	w0, w19
   14e84:	ldp	x19, x20, [sp, #16]
   14e88:	ldr	x21, [sp, #32]
   14e8c:	ldp	x29, x30, [sp], #48
   14e90:	ret
   14e94:	str	x0, [x20]
   14e98:	mov	w19, #0x0                   	// #0
   14e9c:	b	14e80 <lzma_mode_is_supported@@XZ_5.0+0x5d3c>
   14ea0:	mov	w19, #0x8                   	// #8
   14ea4:	b	14e80 <lzma_mode_is_supported@@XZ_5.0+0x5d3c>
   14ea8:	mov	w19, #0x5                   	// #5
   14eac:	b	14e80 <lzma_mode_is_supported@@XZ_5.0+0x5d3c>
   14eb0:	cmp	x4, #0x4
   14eb4:	b.ls	1507c <lzma_mode_is_supported@@XZ_5.0+0x5f38>  // b.plast
   14eb8:	stp	x29, x30, [sp, #-80]!
   14ebc:	mov	x9, x0
   14ec0:	and	w2, w2, #0xff
   14ec4:	mov	x29, sp
   14ec8:	ldr	w5, [x0, #4]
   14ecc:	stp	x19, x20, [sp, #16]
   14ed0:	sub	w0, w1, w5
   14ed4:	stp	x21, x22, [sp, #32]
   14ed8:	cmp	w0, #0x5
   14edc:	stp	x23, x24, [sp, #48]
   14ee0:	str	x25, [sp, #64]
   14ee4:	b.ls	14eec <lzma_mode_is_supported@@XZ_5.0+0x5da8>  // b.plast
   14ee8:	sub	w5, w1, #0x5
   14eec:	adrp	x11, 1b000 <lzma_mode_is_supported@@XZ_5.0+0xbebc>
   14ef0:	ldr	w7, [x9]
   14ef4:	add	x11, x11, #0xa60
   14ef8:	sub	x4, x4, #0x5
   14efc:	add	x16, x11, #0x8
   14f00:	mov	x8, #0x0                   	// #0
   14f04:	mov	w14, #0x11                  	// #17
   14f08:	mov	w15, #0xfffffffb            	// #-5
   14f0c:	mov	w17, #0x3                   	// #3
   14f10:	mov	w18, #0x4                   	// #4
   14f14:	mov	w30, #0x1                   	// #1
   14f18:	mov	w19, #0xee                  	// #238
   14f1c:	ldrb	w6, [x3, x8]
   14f20:	add	x0, x8, #0x1
   14f24:	add	w6, w6, #0x18
   14f28:	and	w6, w6, #0xff
   14f2c:	cmp	w6, #0x1
   14f30:	b.hi	15044 <lzma_mode_is_supported@@XZ_5.0+0x5f00>  // b.pmore
   14f34:	add	w10, w1, w8
   14f38:	sub	w5, w10, w5
   14f3c:	cmp	w5, #0x5
   14f40:	b.hi	15014 <lzma_mode_is_supported@@XZ_5.0+0x5ed0>  // b.pmore
   14f44:	mov	w6, #0x0                   	// #0
   14f48:	cmp	w6, w5
   14f4c:	b.ne	15008 <lzma_mode_is_supported@@XZ_5.0+0x5ec4>  // b.any
   14f50:	add	x20, x8, #0x4
   14f54:	ldrb	w6, [x3, x20]
   14f58:	sub	w5, w6, #0x1
   14f5c:	and	w5, w5, #0xff
   14f60:	cmp	w5, #0xfd
   14f64:	b.ls	15068 <lzma_mode_is_supported@@XZ_5.0+0x5f24>  // b.plast
   14f68:	ubfx	x5, x7, #1, #3
   14f6c:	lsr	w24, w7, #1
   14f70:	ldrb	w5, [x11, x5]
   14f74:	cbz	w5, 15074 <lzma_mode_is_supported@@XZ_5.0+0x5f30>
   14f78:	cmp	w24, #0xf
   14f7c:	b.hi	15074 <lzma_mode_is_supported@@XZ_5.0+0x5f30>  // b.pmore
   14f80:	add	x12, x8, #0x2
   14f84:	add	x13, x8, #0x3
   14f88:	add	x21, x3, x0
   14f8c:	ldrb	w0, [x3, x0]
   14f90:	lsl	w6, w6, #24
   14f94:	add	w22, w10, #0x5
   14f98:	ldrb	w5, [x3, x12]
   14f9c:	sub	w23, w15, w10
   14fa0:	orr	w5, w0, w5, lsl #8
   14fa4:	ldrb	w0, [x3, x13]
   14fa8:	orr	w6, w6, w0, lsl #16
   14fac:	mov	w0, w24
   14fb0:	orr	w5, w5, w6
   14fb4:	add	w25, w22, w5
   14fb8:	cmp	w2, #0x0
   14fbc:	add	w5, w23, w5
   14fc0:	csel	w25, w5, w25, eq  // eq = none
   14fc4:	cbz	w7, 1501c <lzma_mode_is_supported@@XZ_5.0+0x5ed8>
   14fc8:	ldr	w6, [x16, x0, lsl #2]
   14fcc:	sub	w24, w17, w6
   14fd0:	lsl	w24, w24, #3
   14fd4:	lsr	w24, w25, w24
   14fd8:	sub	w24, w24, #0x1
   14fdc:	and	w24, w24, #0xff
   14fe0:	cmp	w24, #0xfd
   14fe4:	b.ls	1501c <lzma_mode_is_supported@@XZ_5.0+0x5ed8>  // b.plast
   14fe8:	sub	w5, w18, w6
   14fec:	lsl	w5, w5, #3
   14ff0:	lsl	w5, w30, w5
   14ff4:	sub	w5, w5, #0x1
   14ff8:	eor	w5, w5, w25
   14ffc:	b	14fb4 <lzma_mode_is_supported@@XZ_5.0+0x5e70>
   15000:	mov	x8, x0
   15004:	b	14f1c <lzma_mode_is_supported@@XZ_5.0+0x5dd8>
   15008:	and	w7, w19, w7, lsl #1
   1500c:	add	w6, w6, #0x1
   15010:	b	14f48 <lzma_mode_is_supported@@XZ_5.0+0x5e04>
   15014:	mov	w7, #0x0                   	// #0
   15018:	b	14f50 <lzma_mode_is_supported@@XZ_5.0+0x5e0c>
   1501c:	sbfx	x0, x25, #24, #1
   15020:	strb	w0, [x3, x20]
   15024:	lsr	w0, w25, #16
   15028:	strb	w0, [x3, x13]
   1502c:	lsr	w0, w25, #8
   15030:	mov	w5, w10
   15034:	strb	w0, [x3, x12]
   15038:	add	x0, x8, #0x5
   1503c:	mov	w7, #0x0                   	// #0
   15040:	strb	w25, [x21]
   15044:	cmp	x4, x0
   15048:	b.cs	15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>  // b.hs, b.nlast
   1504c:	ldp	x19, x20, [sp, #16]
   15050:	ldp	x21, x22, [sp, #32]
   15054:	ldp	x23, x24, [sp, #48]
   15058:	ldr	x25, [sp, #64]
   1505c:	stp	w7, w5, [x9]
   15060:	ldp	x29, x30, [sp], #80
   15064:	ret
   15068:	orr	w7, w7, #0x1
   1506c:	mov	w5, w10
   15070:	b	15044 <lzma_mode_is_supported@@XZ_5.0+0x5f00>
   15074:	orr	w7, w7, w14
   15078:	b	1506c <lzma_mode_is_supported@@XZ_5.0+0x5f28>
   1507c:	mov	x0, #0x0                   	// #0
   15080:	ret
   15084:	stp	x29, x30, [sp, #-32]!
   15088:	mov	w7, w3
   1508c:	mov	w6, #0x1                   	// #1
   15090:	mov	x29, sp
   15094:	adrp	x3, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4ebc>
   15098:	mov	x5, #0x5                   	// #5
   1509c:	add	x3, x3, #0xeb0
   150a0:	mov	x4, #0x8                   	// #8
   150a4:	str	x19, [sp, #16]
   150a8:	mov	x19, x0
   150ac:	bl	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   150b0:	cbnz	w0, 150c8 <lzma_mode_is_supported@@XZ_5.0+0x5f84>
   150b4:	ldr	x1, [x19]
   150b8:	mov	x2, #0xfffb00000000        	// #281453501874176
   150bc:	movk	x2, #0xffff, lsl #48
   150c0:	ldr	x1, [x1, #88]
   150c4:	str	x2, [x1]
   150c8:	ldr	x19, [sp, #16]
   150cc:	ldp	x29, x30, [sp], #32
   150d0:	ret
   150d4:	mov	w3, #0x1                   	// #1
   150d8:	b	15084 <lzma_mode_is_supported@@XZ_5.0+0x5f40>
   150dc:	mov	w3, #0x0                   	// #0
   150e0:	b	15084 <lzma_mode_is_supported@@XZ_5.0+0x5f40>
   150e4:	and	w2, w2, #0xff
   150e8:	sub	w1, w1, #0x4
   150ec:	mov	x0, #0x0                   	// #0
   150f0:	mov	w9, #0x48                  	// #72
   150f4:	add	x7, x0, #0x4
   150f8:	cmp	x7, x4
   150fc:	b.ls	15104 <lzma_mode_is_supported@@XZ_5.0+0x5fc0>  // b.plast
   15100:	ret
   15104:	ldrb	w6, [x3]
   15108:	lsr	w0, w6, #2
   1510c:	cmp	w0, #0x12
   15110:	b.ne	1517c <lzma_mode_is_supported@@XZ_5.0+0x6038>  // b.any
   15114:	ldrb	w0, [x3, #3]
   15118:	and	w5, w0, #0x3
   1511c:	cmp	w5, #0x1
   15120:	b.ne	1517c <lzma_mode_is_supported@@XZ_5.0+0x6038>  // b.any
   15124:	ldrb	w8, [x3, #2]
   15128:	ubfiz	w6, w6, #24, #2
   1512c:	ldrb	w5, [x3, #1]
   15130:	and	w0, w0, #0xfffffffc
   15134:	orr	w0, w6, w0
   15138:	cmp	w2, #0x0
   1513c:	lsl	w8, w8, #8
   15140:	orr	w5, w8, w5, lsl #16
   15144:	orr	w5, w5, w0
   15148:	add	w0, w1, w7
   1514c:	add	w6, w5, w0
   15150:	sub	w0, w5, w0
   15154:	csel	w0, w0, w6, eq  // eq = none
   15158:	ubfx	x5, x0, #24, #2
   1515c:	orr	w5, w5, w9
   15160:	strb	w5, [x3]
   15164:	lsr	w5, w0, #16
   15168:	strb	w5, [x3, #1]
   1516c:	lsr	w5, w0, #8
   15170:	orr	w0, w0, #0x1
   15174:	strb	w5, [x3, #2]
   15178:	strb	w0, [x3, #3]
   1517c:	add	x3, x3, #0x4
   15180:	mov	x0, x7
   15184:	b	150f4 <lzma_mode_is_supported@@XZ_5.0+0x5fb0>
   15188:	mov	w7, #0x1                   	// #1
   1518c:	mov	w6, #0x4                   	// #4
   15190:	mov	x5, #0x4                   	// #4
   15194:	mov	x4, #0x0                   	// #0
   15198:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   1519c:	add	x3, x3, #0xe4
   151a0:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   151a4:	mov	w7, #0x0                   	// #0
   151a8:	mov	w6, #0x4                   	// #4
   151ac:	mov	x5, #0x4                   	// #4
   151b0:	mov	x4, #0x0                   	// #0
   151b4:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   151b8:	add	x3, x3, #0xe4
   151bc:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   151c0:	adrp	x13, 1b000 <lzma_mode_is_supported@@XZ_5.0+0xbebc>
   151c4:	mov	x16, #0xffff000000001fff    	// #-281474976702465
   151c8:	and	w2, w2, #0xff
   151cc:	add	x13, x13, #0xa88
   151d0:	mov	x12, #0x0                   	// #0
   151d4:	mov	w15, #0x29                  	// #41
   151d8:	movk	x16, #0xffee, lsl #32
   151dc:	mov	w17, #0x1                   	// #1
   151e0:	mov	x0, x12
   151e4:	add	x12, x12, #0x10
   151e8:	cmp	x4, x12
   151ec:	b.cs	15240 <lzma_mode_is_supported@@XZ_5.0+0x60fc>  // b.hs, b.nlast
   151f0:	ret
   151f4:	ldrb	w5, [x3, x0]
   151f8:	add	w14, w1, w0
   151fc:	mov	x10, #0x0                   	// #0
   15200:	and	x5, x5, #0x1f
   15204:	ldr	w18, [x13, x5, lsl #2]
   15208:	mul	w5, w15, w10
   1520c:	lsr	w6, w18, w10
   15210:	add	w5, w5, #0x5
   15214:	tbnz	w6, #0, 15280 <lzma_mode_is_supported@@XZ_5.0+0x613c>
   15218:	add	x10, x10, #0x1
   1521c:	cmp	x10, #0x3
   15220:	b.ne	15208 <lzma_mode_is_supported@@XZ_5.0+0x60c4>  // b.any
   15224:	mov	x0, x12
   15228:	add	x12, x12, #0x10
   1522c:	cmp	x4, x12
   15230:	b.cs	151f4 <lzma_mode_is_supported@@XZ_5.0+0x60b0>  // b.hs, b.nlast
   15234:	ldr	x19, [sp, #16]
   15238:	ldp	x29, x30, [sp], #32
   1523c:	ret
   15240:	ldrb	w5, [x3, x0]
   15244:	add	w14, w1, w0
   15248:	mov	x10, #0x0                   	// #0
   1524c:	and	x5, x5, #0x1f
   15250:	ldr	w18, [x13, x5, lsl #2]
   15254:	mul	w5, w15, w10
   15258:	lsr	w6, w18, w10
   1525c:	add	w5, w5, #0x5
   15260:	tbnz	w6, #0, 15274 <lzma_mode_is_supported@@XZ_5.0+0x6130>
   15264:	add	x10, x10, #0x1
   15268:	cmp	x10, #0x3
   1526c:	b.ne	15254 <lzma_mode_is_supported@@XZ_5.0+0x6110>  // b.any
   15270:	b	151e0 <lzma_mode_is_supported@@XZ_5.0+0x609c>
   15274:	stp	x29, x30, [sp, #-32]!
   15278:	mov	x29, sp
   1527c:	str	x19, [sp, #16]
   15280:	lsr	w9, w5, #3
   15284:	and	w7, w5, #0x7
   15288:	add	x9, x9, x0
   1528c:	mov	x5, #0x0                   	// #0
   15290:	add	x9, x3, x9
   15294:	mov	x19, #0x0                   	// #0
   15298:	ldrb	w6, [x9, x5]
   1529c:	lsl	w8, w5, #3
   152a0:	add	x5, x5, #0x1
   152a4:	cmp	x5, #0x6
   152a8:	lsl	x6, x6, x8
   152ac:	add	x19, x19, x6
   152b0:	b.ne	15298 <lzma_mode_is_supported@@XZ_5.0+0x6154>  // b.any
   152b4:	lsr	x6, x19, x7
   152b8:	ubfx	x5, x6, #37, #4
   152bc:	cmp	x5, #0x5
   152c0:	b.ne	15218 <lzma_mode_is_supported@@XZ_5.0+0x60d4>  // b.any
   152c4:	ubfx	x11, x6, #9, #3
   152c8:	tst	x6, #0xe00
   152cc:	b.ne	15218 <lzma_mode_is_supported@@XZ_5.0+0x60d4>  // b.any
   152d0:	lsr	x8, x6, #36
   152d4:	ubfx	x5, x6, #13, #20
   152d8:	cmp	w2, #0x0
   152dc:	lsl	w30, w17, w7
   152e0:	ubfiz	w8, w8, #20, #1
   152e4:	sub	w30, w30, #0x1
   152e8:	orr	w8, w8, w5
   152ec:	sxtw	x30, w30
   152f0:	lsl	w5, w8, #4
   152f4:	add	w8, w14, w8, lsl #4
   152f8:	sub	w5, w5, w14
   152fc:	and	x30, x30, x19
   15300:	csel	w5, w5, w8, eq  // eq = none
   15304:	and	x8, x6, x16
   15308:	lsr	w5, w5, #4
   1530c:	ubfiz	x6, x5, #13, #20
   15310:	lsl	x5, x5, #16
   15314:	and	x5, x5, #0x1000000000
   15318:	orr	x5, x6, x5
   1531c:	orr	x5, x5, x8
   15320:	lsl	x5, x5, x7
   15324:	orr	x5, x5, x30
   15328:	lsl	w6, w11, #3
   1532c:	lsr	x6, x5, x6
   15330:	strb	w6, [x9, x11]
   15334:	add	x11, x11, #0x1
   15338:	cmp	x11, #0x6
   1533c:	b.ne	15328 <lzma_mode_is_supported@@XZ_5.0+0x61e4>  // b.any
   15340:	b	15218 <lzma_mode_is_supported@@XZ_5.0+0x60d4>
   15344:	mov	w7, #0x1                   	// #1
   15348:	mov	w6, #0x10                  	// #16
   1534c:	mov	x5, #0x10                  	// #16
   15350:	mov	x4, #0x0                   	// #0
   15354:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   15358:	add	x3, x3, #0x1c0
   1535c:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   15360:	mov	w7, #0x0                   	// #0
   15364:	mov	w6, #0x10                  	// #16
   15368:	mov	x5, #0x10                  	// #16
   1536c:	mov	x4, #0x0                   	// #0
   15370:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   15374:	add	x3, x3, #0x1c0
   15378:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   1537c:	add	w8, w1, #0x8
   15380:	mov	w5, #0xfffffff8            	// #-8
   15384:	and	w2, w2, #0xff
   15388:	sub	w1, w5, w1
   1538c:	mov	x0, #0x0                   	// #0
   15390:	add	x6, x0, #0x4
   15394:	cmp	x6, x4
   15398:	b.ls	153a0 <lzma_mode_is_supported@@XZ_5.0+0x625c>  // b.plast
   1539c:	ret
   153a0:	ldrb	w0, [x3, #3]
   153a4:	cmp	w0, #0xeb
   153a8:	b.ne	153fc <lzma_mode_is_supported@@XZ_5.0+0x62b8>  // b.any
   153ac:	ldrb	w0, [x3, #1]
   153b0:	sub	w7, w6, #0x4
   153b4:	ldrb	w5, [x3, #2]
   153b8:	add	w9, w8, w7
   153bc:	cmp	w2, #0x0
   153c0:	lsl	w0, w0, #8
   153c4:	orr	w5, w0, w5, lsl #16
   153c8:	ldrb	w0, [x3]
   153cc:	orr	w5, w5, w0
   153d0:	lsl	w0, w5, #2
   153d4:	add	w5, w9, w5, lsl #2
   153d8:	sub	w0, w0, w7
   153dc:	add	w0, w1, w0
   153e0:	csel	w0, w0, w5, eq  // eq = none
   153e4:	lsr	w5, w0, #18
   153e8:	strb	w5, [x3, #2]
   153ec:	lsr	w5, w0, #10
   153f0:	lsr	w0, w0, #2
   153f4:	strb	w0, [x3]
   153f8:	strb	w5, [x3, #1]
   153fc:	add	x3, x3, #0x4
   15400:	mov	x0, x6
   15404:	b	15390 <lzma_mode_is_supported@@XZ_5.0+0x624c>
   15408:	mov	w7, #0x1                   	// #1
   1540c:	mov	w6, #0x4                   	// #4
   15410:	mov	x5, #0x4                   	// #4
   15414:	mov	x4, #0x0                   	// #0
   15418:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   1541c:	add	x3, x3, #0x37c
   15420:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   15424:	mov	w7, #0x0                   	// #0
   15428:	mov	w6, #0x4                   	// #4
   1542c:	mov	x5, #0x4                   	// #4
   15430:	mov	x4, #0x0                   	// #0
   15434:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   15438:	add	x3, x3, #0x37c
   1543c:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   15440:	add	w11, w1, #0x4
   15444:	mov	w5, #0xfffffffc            	// #-4
   15448:	and	w2, w2, #0xff
   1544c:	sub	w1, w5, w1
   15450:	mov	x0, #0x0                   	// #0
   15454:	add	x5, x0, #0x4
   15458:	cmp	x5, x4
   1545c:	b.ls	15464 <lzma_mode_is_supported@@XZ_5.0+0x6320>  // b.plast
   15460:	ret
   15464:	add	x10, x0, #0x1
   15468:	ldrb	w5, [x3, x10]
   1546c:	and	w6, w5, #0xf8
   15470:	cmp	w6, #0xf0
   15474:	b.ne	154f0 <lzma_mode_is_supported@@XZ_5.0+0x63ac>  // b.any
   15478:	add	x9, x0, #0x3
   1547c:	ldrb	w7, [x3, x9]
   15480:	and	w6, w7, #0xf8
   15484:	cmp	w6, #0xf8
   15488:	b.ne	154f0 <lzma_mode_is_supported@@XZ_5.0+0x63ac>  // b.any
   1548c:	add	x8, x0, #0x2
   15490:	ubfiz	w6, w5, #19, #3
   15494:	ubfiz	w7, w7, #8, #3
   15498:	ldrb	w5, [x3, x0]
   1549c:	orr	w6, w6, w7
   154a0:	cmp	w2, #0x0
   154a4:	ldrb	w7, [x3, x8]
   154a8:	orr	w5, w7, w5, lsl #11
   154ac:	orr	w6, w6, w5
   154b0:	add	w5, w11, w0
   154b4:	add	w7, w5, w6, lsl #1
   154b8:	add	w5, w1, w6, lsl #1
   154bc:	sub	w5, w5, w0
   154c0:	csel	w5, w5, w7, eq  // eq = none
   154c4:	ubfx	x6, x5, #20, #3
   154c8:	orr	w6, w6, #0xfffffff0
   154cc:	strb	w6, [x3, x10]
   154d0:	lsr	w6, w5, #12
   154d4:	strb	w6, [x3, x0]
   154d8:	lsr	w0, w5, #9
   154dc:	lsr	w5, w5, #1
   154e0:	orr	w0, w0, #0xfffffff8
   154e4:	strb	w0, [x3, x9]
   154e8:	mov	x0, x8
   154ec:	strb	w5, [x3, x8]
   154f0:	add	x0, x0, #0x2
   154f4:	b	15454 <lzma_mode_is_supported@@XZ_5.0+0x6310>
   154f8:	mov	w7, #0x1                   	// #1
   154fc:	mov	w6, #0x2                   	// #2
   15500:	mov	x5, #0x4                   	// #4
   15504:	mov	x4, #0x0                   	// #0
   15508:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   1550c:	add	x3, x3, #0x440
   15510:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   15514:	mov	w7, #0x0                   	// #0
   15518:	mov	w6, #0x2                   	// #2
   1551c:	mov	x5, #0x4                   	// #4
   15520:	mov	x4, #0x0                   	// #0
   15524:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   15528:	add	x3, x3, #0x440
   1552c:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   15530:	and	w2, w2, #0xff
   15534:	sub	w1, w1, #0x4
   15538:	mov	x0, #0x0                   	// #0
   1553c:	add	x6, x0, #0x4
   15540:	cmp	x6, x4
   15544:	b.ls	1554c <lzma_mode_is_supported@@XZ_5.0+0x6408>  // b.plast
   15548:	ret
   1554c:	ldrb	w5, [x3]
   15550:	cmp	w5, #0x40
   15554:	b.ne	15570 <lzma_mode_is_supported@@XZ_5.0+0x642c>  // b.any
   15558:	ldrb	w0, [x3, #1]
   1555c:	tst	w0, #0xc0
   15560:	b.eq	15588 <lzma_mode_is_supported@@XZ_5.0+0x6444>  // b.none
   15564:	add	x3, x3, #0x4
   15568:	mov	x0, x6
   1556c:	b	1553c <lzma_mode_is_supported@@XZ_5.0+0x63f8>
   15570:	cmp	w5, #0x7f
   15574:	b.ne	15564 <lzma_mode_is_supported@@XZ_5.0+0x6420>  // b.any
   15578:	ldrb	w0, [x3, #1]
   1557c:	and	w0, w0, #0xc0
   15580:	cmp	w0, #0xc0
   15584:	b.ne	15564 <lzma_mode_is_supported@@XZ_5.0+0x6420>  // b.any
   15588:	ldrb	w0, [x3, #1]
   1558c:	lsl	w5, w5, #24
   15590:	ldrb	w7, [x3, #3]
   15594:	cmp	w2, #0x0
   15598:	orr	w0, w5, w0, lsl #16
   1559c:	ldrb	w5, [x3, #2]
   155a0:	orr	w5, w7, w5, lsl #8
   155a4:	add	w7, w1, w6
   155a8:	orr	w0, w0, w5
   155ac:	lsl	w5, w0, #2
   155b0:	add	w0, w7, w0, lsl #2
   155b4:	sub	w5, w5, w7
   155b8:	csel	w5, w5, w0, eq  // eq = none
   155bc:	sbfx	x0, x5, #24, #1
   155c0:	ubfx	x5, x5, #2, #22
   155c4:	ubfiz	w0, w0, #22, #8
   155c8:	orr	w0, w0, w5
   155cc:	orr	w0, w0, #0x40000000
   155d0:	strb	w0, [x3, #3]
   155d4:	lsr	w5, w0, #24
   155d8:	strb	w5, [x3]
   155dc:	lsr	w5, w0, #16
   155e0:	strb	w5, [x3, #1]
   155e4:	lsr	w5, w0, #8
   155e8:	strb	w5, [x3, #2]
   155ec:	b	15564 <lzma_mode_is_supported@@XZ_5.0+0x6420>
   155f0:	mov	w7, #0x1                   	// #1
   155f4:	mov	w6, #0x4                   	// #4
   155f8:	mov	x5, #0x4                   	// #4
   155fc:	mov	x4, #0x0                   	// #0
   15600:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   15604:	add	x3, x3, #0x530
   15608:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>
   1560c:	mov	w7, #0x0                   	// #0
   15610:	mov	w6, #0x4                   	// #4
   15614:	mov	x5, #0x4                   	// #4
   15618:	mov	x4, #0x0                   	// #0
   1561c:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>
   15620:	add	x3, x3, #0x530
   15624:	b	14cb0 <lzma_mode_is_supported@@XZ_5.0+0x5b6c>

Disassembly of section .fini:

0000000000015628 <.fini>:
   15628:	stp	x29, x30, [sp, #-16]!
   1562c:	mov	x29, sp
   15630:	ldp	x29, x30, [sp], #16
   15634:	ret
