
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-rfkill_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000401150 <_init>:
  401150:	stp	x29, x30, [sp, #-16]!
  401154:	mov	x29, sp
  401158:	bl	401460 <call_weak_fn>
  40115c:	ldp	x29, x30, [sp], #16
  401160:	ret

Disassembly of section .plt:

0000000000401170 <.plt>:
  401170:	stp	x16, x30, [sp, #-16]!
  401174:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401178:	ldr	x17, [x16, #3752]
  40117c:	add	x16, x16, #0xea8
  401180:	br	x17
  401184:	nop
  401188:	nop
  40118c:	nop

0000000000401190 <sd_device_get_property_value@plt>:
  401190:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401194:	ldr	x17, [x16, #3760]
  401198:	add	x16, x16, #0xeb0
  40119c:	br	x17

00000000004011a0 <__libc_start_main@plt>:
  4011a0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4011a4:	ldr	x17, [x16, #3768]
  4011a8:	add	x16, x16, #0xeb8
  4011ac:	br	x17

00000000004011b0 <parse_boolean@plt>:
  4011b0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4011b4:	ldr	x17, [x16, #3776]
  4011b8:	add	x16, x16, #0xec0
  4011bc:	br	x17

00000000004011c0 <__gmon_start__@plt>:
  4011c0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4011c4:	ldr	x17, [x16, #3784]
  4011c8:	add	x16, x16, #0xec8
  4011cc:	br	x17

00000000004011d0 <cescape@plt>:
  4011d0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4011d4:	ldr	x17, [x16, #3792]
  4011d8:	add	x16, x16, #0xed0
  4011dc:	br	x17

00000000004011e0 <write_string_file_ts@plt>:
  4011e0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4011e4:	ldr	x17, [x16, #3800]
  4011e8:	add	x16, x16, #0xed8
  4011ec:	br	x17

00000000004011f0 <polkit_agent_close@plt>:
  4011f0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4011f4:	ldr	x17, [x16, #3808]
  4011f8:	add	x16, x16, #0xee0
  4011fc:	br	x17

0000000000401200 <device_wait_for_initialization@plt>:
  401200:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401204:	ldr	x17, [x16, #3816]
  401208:	add	x16, x16, #0xee8
  40120c:	br	x17

0000000000401210 <fd_nonblock@plt>:
  401210:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401214:	ldr	x17, [x16, #3824]
  401218:	add	x16, x16, #0xef0
  40121c:	br	x17

0000000000401220 <sd_device_new_from_subsystem_sysname@plt>:
  401220:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401224:	ldr	x17, [x16, #3832]
  401228:	add	x16, x16, #0xef8
  40122c:	br	x17

0000000000401230 <log_setup_service@plt>:
  401230:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401234:	ldr	x17, [x16, #3840]
  401238:	add	x16, x16, #0xf00
  40123c:	br	x17

0000000000401240 <strjoin_real@plt>:
  401240:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401244:	ldr	x17, [x16, #3848]
  401248:	add	x16, x16, #0xf08
  40124c:	br	x17

0000000000401250 <safe_close@plt>:
  401250:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401254:	ldr	x17, [x16, #3856]
  401258:	add	x16, x16, #0xf10
  40125c:	br	x17

0000000000401260 <sd_device_get_sysname@plt>:
  401260:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401264:	ldr	x17, [x16, #3864]
  401268:	add	x16, x16, #0xf18
  40126c:	br	x17

0000000000401270 <log_assert_failed_realm@plt>:
  401270:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401274:	ldr	x17, [x16, #3872]
  401278:	add	x16, x16, #0xf20
  40127c:	br	x17

0000000000401280 <sd_listen_fds@plt>:
  401280:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401284:	ldr	x17, [x16, #3880]
  401288:	add	x16, x16, #0xf28
  40128c:	br	x17

0000000000401290 <umask@plt>:
  401290:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401294:	ldr	x17, [x16, #3888]
  401298:	add	x16, x16, #0xf30
  40129c:	br	x17

00000000004012a0 <abort@plt>:
  4012a0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4012a4:	ldr	x17, [x16, #3896]
  4012a8:	add	x16, x16, #0xf38
  4012ac:	br	x17

00000000004012b0 <log_object_internal@plt>:
  4012b0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4012b4:	ldr	x17, [x16, #3904]
  4012b8:	add	x16, x16, #0xf40
  4012bc:	br	x17

00000000004012c0 <__errno_location@plt>:
  4012c0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4012c4:	ldr	x17, [x16, #3912]
  4012c8:	add	x16, x16, #0xf48
  4012cc:	br	x17

00000000004012d0 <read@plt>:
  4012d0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4012d4:	ldr	x17, [x16, #3920]
  4012d8:	add	x16, x16, #0xf50
  4012dc:	br	x17

00000000004012e0 <read_one_line_file@plt>:
  4012e0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4012e4:	ldr	x17, [x16, #3928]
  4012e8:	add	x16, x16, #0xf58
  4012ec:	br	x17

00000000004012f0 <shall_restore_state@plt>:
  4012f0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4012f4:	ldr	x17, [x16, #3936]
  4012f8:	add	x16, x16, #0xf60
  4012fc:	br	x17

0000000000401300 <__stack_chk_fail@plt>:
  401300:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401304:	ldr	x17, [x16, #3944]
  401308:	add	x16, x16, #0xf68
  40130c:	br	x17

0000000000401310 <write@plt>:
  401310:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401314:	ldr	x17, [x16, #3952]
  401318:	add	x16, x16, #0xf70
  40131c:	br	x17

0000000000401320 <ask_password_agent_close@plt>:
  401320:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401324:	ldr	x17, [x16, #3960]
  401328:	add	x16, x16, #0xf78
  40132c:	br	x17

0000000000401330 <pager_close@plt>:
  401330:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401334:	ldr	x17, [x16, #3968]
  401338:	add	x16, x16, #0xf80
  40133c:	br	x17

0000000000401340 <sd_notify@plt>:
  401340:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401344:	ldr	x17, [x16, #3976]
  401348:	add	x16, x16, #0xf88
  40134c:	br	x17

0000000000401350 <log_internal_realm@plt>:
  401350:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401354:	ldr	x17, [x16, #3984]
  401358:	add	x16, x16, #0xf90
  40135c:	br	x17

0000000000401360 <strcmp@plt>:
  401360:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401364:	ldr	x17, [x16, #3992]
  401368:	add	x16, x16, #0xf98
  40136c:	br	x17

0000000000401370 <calloc@plt>:
  401370:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401374:	ldr	x17, [x16, #4000]
  401378:	add	x16, x16, #0xfa0
  40137c:	br	x17

0000000000401380 <sd_device_get_sysattr_value@plt>:
  401380:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401384:	ldr	x17, [x16, #4008]
  401388:	add	x16, x16, #0xfa8
  40138c:	br	x17

0000000000401390 <asprintf@plt>:
  401390:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401394:	ldr	x17, [x16, #4016]
  401398:	add	x16, x16, #0xfb0
  40139c:	br	x17

00000000004013a0 <free@plt>:
  4013a0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4013a4:	ldr	x17, [x16, #4024]
  4013a8:	add	x16, x16, #0xfb8
  4013ac:	br	x17

00000000004013b0 <sd_device_unref@plt>:
  4013b0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4013b4:	ldr	x17, [x16, #4032]
  4013b8:	add	x16, x16, #0xfc0
  4013bc:	br	x17

00000000004013c0 <mac_selinux_finish@plt>:
  4013c0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4013c4:	ldr	x17, [x16, #4040]
  4013c8:	add	x16, x16, #0xfc8
  4013cc:	br	x17

00000000004013d0 <open64@plt>:
  4013d0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4013d4:	ldr	x17, [x16, #4048]
  4013d8:	add	x16, x16, #0xfd0
  4013dc:	br	x17

00000000004013e0 <log_oom_internal@plt>:
  4013e0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4013e4:	ldr	x17, [x16, #4056]
  4013e8:	add	x16, x16, #0xfd8
  4013ec:	br	x17

00000000004013f0 <fd_wait_for_event@plt>:
  4013f0:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  4013f4:	ldr	x17, [x16, #4064]
  4013f8:	add	x16, x16, #0xfe0
  4013fc:	br	x17

0000000000401400 <log_get_max_level_realm@plt>:
  401400:	adrp	x16, 414000 <__FRAME_END__+0xf8e0>
  401404:	ldr	x17, [x16, #4072]
  401408:	add	x16, x16, #0xfe8
  40140c:	br	x17

Disassembly of section .text:

0000000000401410 <_start>:
  401410:	mov	x29, #0x0                   	// #0
  401414:	mov	x30, #0x0                   	// #0
  401418:	mov	x5, x0
  40141c:	ldr	x1, [sp]
  401420:	add	x2, sp, #0x8
  401424:	mov	x6, sp
  401428:	movz	x0, #0x0, lsl #48
  40142c:	movk	x0, #0x0, lsl #32
  401430:	movk	x0, #0x40, lsl #16
  401434:	movk	x0, #0x3a50
  401438:	movz	x3, #0x0, lsl #48
  40143c:	movk	x3, #0x0, lsl #32
  401440:	movk	x3, #0x40, lsl #16
  401444:	movk	x3, #0x3aa0
  401448:	movz	x4, #0x0, lsl #48
  40144c:	movk	x4, #0x0, lsl #32
  401450:	movk	x4, #0x40, lsl #16
  401454:	movk	x4, #0x3b20
  401458:	bl	4011a0 <__libc_start_main@plt>
  40145c:	bl	4012a0 <abort@plt>

0000000000401460 <call_weak_fn>:
  401460:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  401464:	ldr	x0, [x0, #4088]
  401468:	cbz	x0, 401470 <call_weak_fn+0x10>
  40146c:	b	4011c0 <__gmon_start__@plt>
  401470:	ret

0000000000401474 <deregister_tm_clones>:
  401474:	stp	x29, x30, [sp, #-32]!
  401478:	mov	x29, sp
  40147c:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  401480:	add	x0, x0, #0x0
  401484:	str	x0, [sp, #24]
  401488:	ldr	x0, [sp, #24]
  40148c:	str	x0, [sp, #24]
  401490:	ldr	x1, [sp, #24]
  401494:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  401498:	add	x0, x0, #0x0
  40149c:	cmp	x1, x0
  4014a0:	b.eq	4014dc <deregister_tm_clones+0x68>  // b.none
  4014a4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4014a8:	add	x0, x0, #0xb38
  4014ac:	ldr	x0, [x0]
  4014b0:	str	x0, [sp, #16]
  4014b4:	ldr	x0, [sp, #16]
  4014b8:	str	x0, [sp, #16]
  4014bc:	ldr	x0, [sp, #16]
  4014c0:	cmp	x0, #0x0
  4014c4:	b.eq	4014e0 <deregister_tm_clones+0x6c>  // b.none
  4014c8:	ldr	x1, [sp, #16]
  4014cc:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  4014d0:	add	x0, x0, #0x0
  4014d4:	blr	x1
  4014d8:	b	4014e0 <deregister_tm_clones+0x6c>
  4014dc:	nop
  4014e0:	ldp	x29, x30, [sp], #32
  4014e4:	ret

00000000004014e8 <register_tm_clones>:
  4014e8:	stp	x29, x30, [sp, #-48]!
  4014ec:	mov	x29, sp
  4014f0:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  4014f4:	add	x0, x0, #0x0
  4014f8:	str	x0, [sp, #40]
  4014fc:	ldr	x0, [sp, #40]
  401500:	str	x0, [sp, #40]
  401504:	ldr	x1, [sp, #40]
  401508:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  40150c:	add	x0, x0, #0x0
  401510:	sub	x0, x1, x0
  401514:	asr	x0, x0, #3
  401518:	lsr	x1, x0, #63
  40151c:	add	x0, x1, x0
  401520:	asr	x0, x0, #1
  401524:	str	x0, [sp, #32]
  401528:	ldr	x0, [sp, #32]
  40152c:	cmp	x0, #0x0
  401530:	b.eq	401570 <register_tm_clones+0x88>  // b.none
  401534:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401538:	add	x0, x0, #0xb40
  40153c:	ldr	x0, [x0]
  401540:	str	x0, [sp, #24]
  401544:	ldr	x0, [sp, #24]
  401548:	str	x0, [sp, #24]
  40154c:	ldr	x0, [sp, #24]
  401550:	cmp	x0, #0x0
  401554:	b.eq	401574 <register_tm_clones+0x8c>  // b.none
  401558:	ldr	x2, [sp, #24]
  40155c:	ldr	x1, [sp, #32]
  401560:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  401564:	add	x0, x0, #0x0
  401568:	blr	x2
  40156c:	b	401574 <register_tm_clones+0x8c>
  401570:	nop
  401574:	ldp	x29, x30, [sp], #48
  401578:	ret

000000000040157c <__do_global_dtors_aux>:
  40157c:	stp	x29, x30, [sp, #-16]!
  401580:	mov	x29, sp
  401584:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  401588:	add	x0, x0, #0xc
  40158c:	ldrb	w0, [x0]
  401590:	and	x0, x0, #0xff
  401594:	cmp	x0, #0x0
  401598:	b.ne	4015b4 <__do_global_dtors_aux+0x38>  // b.any
  40159c:	bl	401474 <deregister_tm_clones>
  4015a0:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  4015a4:	add	x0, x0, #0xc
  4015a8:	mov	w1, #0x1                   	// #1
  4015ac:	strb	w1, [x0]
  4015b0:	b	4015b8 <__do_global_dtors_aux+0x3c>
  4015b4:	nop
  4015b8:	ldp	x29, x30, [sp], #16
  4015bc:	ret

00000000004015c0 <frame_dummy>:
  4015c0:	stp	x29, x30, [sp, #-16]!
  4015c4:	mov	x29, sp
  4015c8:	bl	4014e8 <register_tm_clones>
  4015cc:	nop
  4015d0:	ldp	x29, x30, [sp], #16
  4015d4:	ret

00000000004015d8 <sd_device_unrefp>:
  4015d8:	stp	x29, x30, [sp, #-32]!
  4015dc:	mov	x29, sp
  4015e0:	str	x0, [sp, #24]
  4015e4:	ldr	x0, [sp, #24]
  4015e8:	ldr	x0, [x0]
  4015ec:	cmp	x0, #0x0
  4015f0:	b.eq	401600 <sd_device_unrefp+0x28>  // b.none
  4015f4:	ldr	x0, [sp, #24]
  4015f8:	ldr	x0, [x0]
  4015fc:	bl	4013b0 <sd_device_unref@plt>
  401600:	nop
  401604:	ldp	x29, x30, [sp], #32
  401608:	ret

000000000040160c <ALIGN_TO>:
  40160c:	sub	sp, sp, #0x10
  401610:	str	x0, [sp, #8]
  401614:	str	x1, [sp]
  401618:	ldr	x1, [sp, #8]
  40161c:	ldr	x0, [sp]
  401620:	add	x0, x1, x0
  401624:	sub	x1, x0, #0x1
  401628:	ldr	x0, [sp]
  40162c:	neg	x0, x0
  401630:	and	x0, x1, x0
  401634:	add	sp, sp, #0x10
  401638:	ret

000000000040163c <mfree>:
  40163c:	stp	x29, x30, [sp, #-32]!
  401640:	mov	x29, sp
  401644:	str	x0, [sp, #24]
  401648:	ldr	x0, [sp, #24]
  40164c:	bl	4013a0 <free@plt>
  401650:	mov	x0, #0x0                   	// #0
  401654:	ldp	x29, x30, [sp], #32
  401658:	ret

000000000040165c <freep>:
  40165c:	stp	x29, x30, [sp, #-32]!
  401660:	mov	x29, sp
  401664:	str	x0, [sp, #24]
  401668:	ldr	x0, [sp, #24]
  40166c:	ldr	x0, [x0]
  401670:	bl	4013a0 <free@plt>
  401674:	nop
  401678:	ldp	x29, x30, [sp], #32
  40167c:	ret

0000000000401680 <one_zero>:
  401680:	sub	sp, sp, #0x10
  401684:	strb	w0, [sp, #15]
  401688:	ldrb	w0, [sp, #15]
  40168c:	cmp	w0, #0x0
  401690:	b.eq	4016a0 <one_zero+0x20>  // b.none
  401694:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401698:	add	x0, x0, #0xb48
  40169c:	b	4016a8 <one_zero+0x28>
  4016a0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4016a4:	add	x0, x0, #0xb50
  4016a8:	add	sp, sp, #0x10
  4016ac:	ret

00000000004016b0 <write_string_file>:
  4016b0:	stp	x29, x30, [sp, #-48]!
  4016b4:	mov	x29, sp
  4016b8:	str	x0, [sp, #40]
  4016bc:	str	x1, [sp, #32]
  4016c0:	str	w2, [sp, #28]
  4016c4:	mov	x3, #0x0                   	// #0
  4016c8:	ldr	w2, [sp, #28]
  4016cc:	ldr	x1, [sp, #32]
  4016d0:	ldr	x0, [sp, #40]
  4016d4:	bl	4011e0 <write_string_file_ts@plt>
  4016d8:	ldp	x29, x30, [sp], #48
  4016dc:	ret

00000000004016e0 <save_argc_argv>:
  4016e0:	sub	sp, sp, #0x10
  4016e4:	str	w0, [sp, #12]
  4016e8:	str	x1, [sp]
  4016ec:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  4016f0:	add	x0, x0, #0x8
  4016f4:	ldr	w1, [sp, #12]
  4016f8:	str	w1, [x0]
  4016fc:	adrp	x0, 415000 <saved_argv@@SD_SHARED>
  401700:	add	x0, x0, #0x0
  401704:	ldr	x1, [sp]
  401708:	str	x1, [x0]
  40170c:	nop
  401710:	add	sp, sp, #0x10
  401714:	ret

0000000000401718 <static_destruct>:
  401718:	stp	x29, x30, [sp, #-32]!
  40171c:	mov	x29, sp
  401720:	adrp	x0, 404000 <_fini+0x4dc>
  401724:	add	x0, x0, #0x170
  401728:	ldr	x0, [x0]
  40172c:	cmp	x0, #0x0
  401730:	b.eq	401794 <static_destruct+0x7c>  // b.none
  401734:	adrp	x0, 404000 <_fini+0x4dc>
  401738:	add	x0, x0, #0x170
  40173c:	ldr	x0, [x0]
  401740:	mov	x1, #0x8                   	// #8
  401744:	bl	40160c <ALIGN_TO>
  401748:	str	x0, [sp, #24]
  40174c:	b	401778 <static_destruct+0x60>
  401750:	ldr	x0, [sp, #24]
  401754:	ldr	x1, [x0, #8]
  401758:	ldr	x0, [sp, #24]
  40175c:	ldr	x0, [x0]
  401760:	blr	x1
  401764:	ldr	x0, [sp, #24]
  401768:	add	x0, x0, #0x10
  40176c:	mov	x1, #0x8                   	// #8
  401770:	bl	40160c <ALIGN_TO>
  401774:	str	x0, [sp, #24]
  401778:	ldr	x1, [sp, #24]
  40177c:	adrp	x0, 404000 <_fini+0x4dc>
  401780:	add	x0, x0, #0x178
  401784:	ldr	x0, [x0]
  401788:	cmp	x1, x0
  40178c:	b.cc	401750 <static_destruct+0x38>  // b.lo, b.ul, b.last
  401790:	b	401798 <static_destruct+0x80>
  401794:	nop
  401798:	ldp	x29, x30, [sp], #32
  40179c:	ret

00000000004017a0 <write_queue_item_free>:
  4017a0:	stp	x29, x30, [sp, #-32]!
  4017a4:	mov	x29, sp
  4017a8:	str	x0, [sp, #24]
  4017ac:	ldr	x0, [sp, #24]
  4017b0:	cmp	x0, #0x0
  4017b4:	b.ne	4017c0 <write_queue_item_free+0x20>  // b.any
  4017b8:	mov	x0, #0x0                   	// #0
  4017bc:	b	4017d4 <write_queue_item_free+0x34>
  4017c0:	ldr	x0, [sp, #24]
  4017c4:	ldr	x0, [x0, #24]
  4017c8:	bl	4013a0 <free@plt>
  4017cc:	ldr	x0, [sp, #24]
  4017d0:	bl	40163c <mfree>
  4017d4:	ldp	x29, x30, [sp], #32
  4017d8:	ret

00000000004017dc <rfkill_type_to_string>:
  4017dc:	sub	sp, sp, #0x10
  4017e0:	str	w0, [sp, #12]
  4017e4:	ldr	w0, [sp, #12]
  4017e8:	cmp	w0, #0x0
  4017ec:	b.lt	4017fc <rfkill_type_to_string+0x20>  // b.tstop
  4017f0:	ldr	w0, [sp, #12]
  4017f4:	cmp	w0, #0x8
  4017f8:	b.le	401804 <rfkill_type_to_string+0x28>
  4017fc:	mov	x0, #0x0                   	// #0
  401800:	b	401814 <rfkill_type_to_string+0x38>
  401804:	adrp	x0, 404000 <_fini+0x4dc>
  401808:	add	x0, x0, #0x180
  40180c:	ldrsw	x1, [sp, #12]
  401810:	ldr	x0, [x0, x1, lsl #3]
  401814:	add	sp, sp, #0x10
  401818:	ret

000000000040181c <find_device>:
  40181c:	sub	sp, sp, #0xc0
  401820:	stp	x29, x30, [sp, #32]
  401824:	add	x29, sp, #0x20
  401828:	str	x19, [sp, #48]
  40182c:	str	x0, [sp, #72]
  401830:	str	x1, [sp, #64]
  401834:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  401838:	add	x0, x0, #0xc60
  40183c:	ldr	x1, [x0]
  401840:	str	x1, [sp, #184]
  401844:	mov	x1, #0x0                   	// #0
  401848:	str	xzr, [sp, #128]
  40184c:	str	xzr, [sp, #136]
  401850:	ldr	x0, [sp, #72]
  401854:	cmp	x0, #0x0
  401858:	cset	w0, eq  // eq = none
  40185c:	and	w0, w0, #0xff
  401860:	and	x0, x0, #0xff
  401864:	cmp	x0, #0x0
  401868:	b.eq	401894 <find_device+0x78>  // b.none
  40186c:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401870:	add	x1, x0, #0xbab
  401874:	adrp	x0, 404000 <_fini+0x4dc>
  401878:	add	x4, x0, #0x1c8
  40187c:	mov	w3, #0x4b                  	// #75
  401880:	mov	x2, x1
  401884:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401888:	add	x1, x0, #0xbc0
  40188c:	mov	w0, #0x0                   	// #0
  401890:	bl	401270 <log_assert_failed_realm@plt>
  401894:	ldr	x0, [sp, #64]
  401898:	cmp	x0, #0x0
  40189c:	cset	w0, eq  // eq = none
  4018a0:	and	w0, w0, #0xff
  4018a4:	and	x0, x0, #0xff
  4018a8:	cmp	x0, #0x0
  4018ac:	b.eq	4018d8 <find_device+0xbc>  // b.none
  4018b0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4018b4:	add	x1, x0, #0xbab
  4018b8:	adrp	x0, 404000 <_fini+0x4dc>
  4018bc:	add	x4, x0, #0x1c8
  4018c0:	mov	w3, #0x4c                  	// #76
  4018c4:	mov	x2, x1
  4018c8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4018cc:	add	x1, x0, #0xbc8
  4018d0:	mov	w0, #0x0                   	// #0
  4018d4:	bl	401270 <log_assert_failed_realm@plt>
  4018d8:	ldr	x0, [sp, #72]
  4018dc:	ldr	w0, [x0]
  4018e0:	add	x3, sp, #0x88
  4018e4:	mov	w2, w0
  4018e8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4018ec:	add	x1, x0, #0xbd0
  4018f0:	mov	x0, x3
  4018f4:	bl	401390 <asprintf@plt>
  4018f8:	cmp	w0, #0x0
  4018fc:	b.ge	401924 <find_device+0x108>  // b.tcont
  401900:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401904:	add	x1, x0, #0xbab
  401908:	adrp	x0, 404000 <_fini+0x4dc>
  40190c:	add	x3, x0, #0x1d8
  401910:	mov	w2, #0x4f                  	// #79
  401914:	mov	w0, #0x0                   	// #0
  401918:	bl	4013e0 <log_oom_internal@plt>
  40191c:	mov	w19, w0
  401920:	b	401c18 <find_device+0x3fc>
  401924:	ldr	x0, [sp, #136]
  401928:	add	x3, sp, #0x80
  40192c:	mov	x2, x0
  401930:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401934:	add	x1, x0, #0xbe0
  401938:	mov	x0, x3
  40193c:	bl	401220 <sd_device_new_from_subsystem_sysname@plt>
  401940:	str	w0, [sp, #96]
  401944:	ldr	w0, [sp, #96]
  401948:	cmp	w0, #0x0
  40194c:	b.ge	401a4c <find_device+0x230>  // b.tcont
  401950:	strb	wzr, [sp, #95]
  401954:	ldr	w0, [sp, #96]
  401958:	add	w0, w0, #0x13
  40195c:	cmp	w0, #0x11
  401960:	cset	w1, hi  // hi = pmore
  401964:	and	w1, w1, #0xff
  401968:	cmp	w1, #0x0
  40196c:	b.ne	4019a0 <find_device+0x184>  // b.any
  401970:	mov	x1, #0x1                   	// #1
  401974:	lsl	x1, x1, x0
  401978:	mov	x0, #0x2001                	// #8193
  40197c:	movk	x0, #0x2, lsl #16
  401980:	and	x0, x1, x0
  401984:	cmp	x0, #0x0
  401988:	cset	w0, ne  // ne = any
  40198c:	and	w0, w0, #0xff
  401990:	cmp	w0, #0x0
  401994:	b.eq	4019a0 <find_device+0x184>  // b.none
  401998:	mov	w0, #0x1                   	// #1
  40199c:	strb	w0, [sp, #95]
  4019a0:	nop
  4019a4:	ldrb	w0, [sp, #95]
  4019a8:	cmp	w0, #0x0
  4019ac:	b.eq	4019b8 <find_device+0x19c>  // b.none
  4019b0:	mov	w0, #0x7                   	// #7
  4019b4:	b	4019bc <find_device+0x1a0>
  4019b8:	mov	w0, #0x3                   	// #3
  4019bc:	str	w0, [sp, #116]
  4019c0:	ldr	w0, [sp, #96]
  4019c4:	str	w0, [sp, #120]
  4019c8:	str	wzr, [sp, #124]
  4019cc:	ldr	w0, [sp, #124]
  4019d0:	bl	401400 <log_get_max_level_realm@plt>
  4019d4:	mov	w1, w0
  4019d8:	ldr	w0, [sp, #116]
  4019dc:	and	w0, w0, #0x7
  4019e0:	cmp	w1, w0
  4019e4:	b.lt	401a34 <find_device+0x218>  // b.tstop
  4019e8:	ldr	w0, [sp, #124]
  4019ec:	lsl	w1, w0, #10
  4019f0:	ldr	w0, [sp, #116]
  4019f4:	orr	w7, w1, w0
  4019f8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4019fc:	add	x1, x0, #0xbab
  401a00:	ldr	x0, [sp, #136]
  401a04:	mov	x6, x0
  401a08:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401a0c:	add	x5, x0, #0xbe8
  401a10:	adrp	x0, 404000 <_fini+0x4dc>
  401a14:	add	x4, x0, #0x1d8
  401a18:	mov	w3, #0x53                  	// #83
  401a1c:	mov	x2, x1
  401a20:	ldr	w1, [sp, #120]
  401a24:	mov	w0, w7
  401a28:	bl	401350 <log_internal_realm@plt>
  401a2c:	mov	w19, w0
  401a30:	b	401c18 <find_device+0x3fc>
  401a34:	ldr	w0, [sp, #120]
  401a38:	cmp	w0, #0x0
  401a3c:	cneg	w0, w0, lt  // lt = tstop
  401a40:	and	w0, w0, #0xff
  401a44:	neg	w19, w0
  401a48:	b	401c18 <find_device+0x3fc>
  401a4c:	ldr	x3, [sp, #128]
  401a50:	add	x0, sp, #0x90
  401a54:	mov	x2, x0
  401a58:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401a5c:	add	x1, x0, #0xc08
  401a60:	mov	x0, x3
  401a64:	bl	401380 <sd_device_get_sysattr_value@plt>
  401a68:	str	w0, [sp, #96]
  401a6c:	ldr	w0, [sp, #96]
  401a70:	cmp	w0, #0x0
  401a74:	b.ge	401b3c <find_device+0x320>  // b.tcont
  401a78:	str	xzr, [sp, #152]
  401a7c:	ldr	x0, [sp, #128]
  401a80:	str	x0, [sp, #176]
  401a84:	mov	w0, #0x7                   	// #7
  401a88:	str	w0, [sp, #108]
  401a8c:	ldr	w0, [sp, #96]
  401a90:	str	w0, [sp, #112]
  401a94:	ldr	x0, [sp, #176]
  401a98:	cmp	x0, #0x0
  401a9c:	b.eq	401ad8 <find_device+0x2bc>  // b.none
  401aa0:	mov	w0, #0x0                   	// #0
  401aa4:	bl	401400 <log_get_max_level_realm@plt>
  401aa8:	mov	w1, w0
  401aac:	ldr	w0, [sp, #108]
  401ab0:	cmp	w0, w1
  401ab4:	cset	w0, le
  401ab8:	and	w0, w0, #0xff
  401abc:	and	x0, x0, #0xff
  401ac0:	cmp	x0, #0x0
  401ac4:	b.eq	401ad8 <find_device+0x2bc>  // b.none
  401ac8:	add	x0, sp, #0x98
  401acc:	mov	x1, x0
  401ad0:	ldr	x0, [sp, #176]
  401ad4:	bl	401260 <sd_device_get_sysname@plt>
  401ad8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401adc:	add	x2, x0, #0xbab
  401ae0:	ldr	x0, [sp, #152]
  401ae4:	cmp	x0, #0x0
  401ae8:	b.eq	401af8 <find_device+0x2dc>  // b.none
  401aec:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401af0:	add	x0, x0, #0xc10
  401af4:	b	401afc <find_device+0x2e0>
  401af8:	mov	x0, #0x0                   	// #0
  401afc:	ldr	x3, [sp, #152]
  401b00:	adrp	x1, 403000 <context_save_and_clear+0x18c>
  401b04:	add	x1, x1, #0xc18
  401b08:	str	x1, [sp, #8]
  401b0c:	str	xzr, [sp]
  401b10:	mov	x7, #0x0                   	// #0
  401b14:	mov	x6, x3
  401b18:	mov	x5, x0
  401b1c:	adrp	x0, 404000 <_fini+0x4dc>
  401b20:	add	x4, x0, #0x1d8
  401b24:	mov	w3, #0x58                  	// #88
  401b28:	ldr	w1, [sp, #112]
  401b2c:	ldr	w0, [sp, #108]
  401b30:	bl	4012b0 <log_object_internal@plt>
  401b34:	mov	w19, w0
  401b38:	b	401c18 <find_device+0x3fc>
  401b3c:	str	xzr, [sp, #152]
  401b40:	ldr	x0, [sp, #128]
  401b44:	str	x0, [sp, #160]
  401b48:	mov	w0, #0x7                   	// #7
  401b4c:	str	w0, [sp, #100]
  401b50:	str	wzr, [sp, #104]
  401b54:	ldr	x0, [sp, #160]
  401b58:	cmp	x0, #0x0
  401b5c:	b.eq	401b98 <find_device+0x37c>  // b.none
  401b60:	mov	w0, #0x0                   	// #0
  401b64:	bl	401400 <log_get_max_level_realm@plt>
  401b68:	mov	w1, w0
  401b6c:	ldr	w0, [sp, #100]
  401b70:	cmp	w0, w1
  401b74:	cset	w0, le
  401b78:	and	w0, w0, #0xff
  401b7c:	and	x0, x0, #0xff
  401b80:	cmp	x0, #0x0
  401b84:	b.eq	401b98 <find_device+0x37c>  // b.none
  401b88:	add	x0, sp, #0x98
  401b8c:	mov	x1, x0
  401b90:	ldr	x0, [sp, #160]
  401b94:	bl	401260 <sd_device_get_sysname@plt>
  401b98:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401b9c:	add	x2, x0, #0xbab
  401ba0:	ldr	x0, [sp, #152]
  401ba4:	cmp	x0, #0x0
  401ba8:	b.eq	401bb8 <find_device+0x39c>  // b.none
  401bac:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401bb0:	add	x0, x0, #0xc10
  401bb4:	b	401bbc <find_device+0x3a0>
  401bb8:	mov	x0, #0x0                   	// #0
  401bbc:	ldr	x3, [sp, #152]
  401bc0:	ldr	x1, [sp, #144]
  401bc4:	str	x1, [sp, #16]
  401bc8:	adrp	x1, 403000 <context_save_and_clear+0x18c>
  401bcc:	add	x1, x1, #0xc40
  401bd0:	str	x1, [sp, #8]
  401bd4:	str	xzr, [sp]
  401bd8:	mov	x7, #0x0                   	// #0
  401bdc:	mov	x6, x3
  401be0:	mov	x5, x0
  401be4:	adrp	x0, 404000 <_fini+0x4dc>
  401be8:	add	x4, x0, #0x1d8
  401bec:	mov	w3, #0x5a                  	// #90
  401bf0:	ldr	w1, [sp, #104]
  401bf4:	ldr	w0, [sp, #100]
  401bf8:	bl	4012b0 <log_object_internal@plt>
  401bfc:	ldr	x0, [sp, #128]
  401c00:	str	x0, [sp, #168]
  401c04:	str	xzr, [sp, #128]
  401c08:	ldr	x1, [sp, #168]
  401c0c:	ldr	x0, [sp, #64]
  401c10:	str	x1, [x0]
  401c14:	mov	w19, #0x0                   	// #0
  401c18:	add	x0, sp, #0x88
  401c1c:	bl	40165c <freep>
  401c20:	add	x0, sp, #0x80
  401c24:	bl	4015d8 <sd_device_unrefp>
  401c28:	mov	w1, w19
  401c2c:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  401c30:	add	x0, x0, #0xc60
  401c34:	ldr	x2, [sp, #184]
  401c38:	ldr	x0, [x0]
  401c3c:	eor	x0, x2, x0
  401c40:	cmp	x0, #0x0
  401c44:	b.eq	401c4c <find_device+0x430>  // b.none
  401c48:	bl	401300 <__stack_chk_fail@plt>
  401c4c:	mov	w0, w1
  401c50:	ldr	x19, [sp, #48]
  401c54:	ldp	x29, x30, [sp, #32]
  401c58:	add	sp, sp, #0xc0
  401c5c:	ret

0000000000401c60 <determine_state_file>:
  401c60:	stp	x29, x30, [sp, #-112]!
  401c64:	mov	x29, sp
  401c68:	stp	x19, x20, [sp, #16]
  401c6c:	str	x0, [sp, #40]
  401c70:	str	x1, [sp, #32]
  401c74:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  401c78:	add	x0, x0, #0xc60
  401c7c:	ldr	x1, [x0]
  401c80:	str	x1, [sp, #104]
  401c84:	mov	x1, #0x0                   	// #0
  401c88:	str	xzr, [sp, #56]
  401c8c:	str	xzr, [sp, #64]
  401c90:	ldr	x0, [sp, #40]
  401c94:	cmp	x0, #0x0
  401c98:	cset	w0, eq  // eq = none
  401c9c:	and	w0, w0, #0xff
  401ca0:	and	x0, x0, #0xff
  401ca4:	cmp	x0, #0x0
  401ca8:	b.eq	401cd4 <determine_state_file+0x74>  // b.none
  401cac:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401cb0:	add	x1, x0, #0xbab
  401cb4:	adrp	x0, 404000 <_fini+0x4dc>
  401cb8:	add	x4, x0, #0x1e8
  401cbc:	mov	w3, #0x69                  	// #105
  401cc0:	mov	x2, x1
  401cc4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401cc8:	add	x1, x0, #0xbc0
  401ccc:	mov	w0, #0x0                   	// #0
  401cd0:	bl	401270 <log_assert_failed_realm@plt>
  401cd4:	ldr	x0, [sp, #32]
  401cd8:	cmp	x0, #0x0
  401cdc:	cset	w0, eq  // eq = none
  401ce0:	and	w0, w0, #0xff
  401ce4:	and	x0, x0, #0xff
  401ce8:	cmp	x0, #0x0
  401cec:	b.eq	401d18 <determine_state_file+0xb8>  // b.none
  401cf0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401cf4:	add	x1, x0, #0xbab
  401cf8:	adrp	x0, 404000 <_fini+0x4dc>
  401cfc:	add	x4, x0, #0x1e8
  401d00:	mov	w3, #0x6a                  	// #106
  401d04:	mov	x2, x1
  401d08:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401d0c:	add	x1, x0, #0xbc8
  401d10:	mov	w0, #0x0                   	// #0
  401d14:	bl	401270 <log_assert_failed_realm@plt>
  401d18:	add	x0, sp, #0x38
  401d1c:	mov	x1, x0
  401d20:	ldr	x0, [sp, #40]
  401d24:	bl	40181c <find_device>
  401d28:	str	w0, [sp, #52]
  401d2c:	ldr	w0, [sp, #52]
  401d30:	cmp	w0, #0x0
  401d34:	b.ge	401d40 <determine_state_file+0xe0>  // b.tcont
  401d38:	ldr	w19, [sp, #52]
  401d3c:	b	401ec8 <determine_state_file+0x268>
  401d40:	ldr	x4, [sp, #56]
  401d44:	add	x0, sp, #0x40
  401d48:	mov	x3, x0
  401d4c:	mov	x2, #0xffffffffffffffff    	// #-1
  401d50:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401d54:	add	x1, x0, #0xbe0
  401d58:	mov	x0, x4
  401d5c:	bl	401200 <device_wait_for_initialization@plt>
  401d60:	str	w0, [sp, #52]
  401d64:	ldr	w0, [sp, #52]
  401d68:	cmp	w0, #0x0
  401d6c:	b.ge	401d78 <determine_state_file+0x118>  // b.tcont
  401d70:	ldr	w19, [sp, #52]
  401d74:	b	401ec8 <determine_state_file+0x268>
  401d78:	ldr	x0, [sp, #40]
  401d7c:	ldrb	w0, [x0, #4]
  401d80:	bl	4017dc <rfkill_type_to_string>
  401d84:	str	x0, [sp, #96]
  401d88:	ldr	x0, [sp, #96]
  401d8c:	cmp	x0, #0x0
  401d90:	cset	w0, eq  // eq = none
  401d94:	and	w0, w0, #0xff
  401d98:	and	x0, x0, #0xff
  401d9c:	cmp	x0, #0x0
  401da0:	b.eq	401dcc <determine_state_file+0x16c>  // b.none
  401da4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401da8:	add	x1, x0, #0xbab
  401dac:	adrp	x0, 404000 <_fini+0x4dc>
  401db0:	add	x4, x0, #0x1e8
  401db4:	mov	w3, #0x74                  	// #116
  401db8:	mov	x2, x1
  401dbc:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401dc0:	add	x1, x0, #0xc68
  401dc4:	mov	w0, #0x0                   	// #0
  401dc8:	bl	401270 <log_assert_failed_realm@plt>
  401dcc:	ldr	x3, [sp, #64]
  401dd0:	add	x0, sp, #0x48
  401dd4:	mov	x2, x0
  401dd8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401ddc:	add	x1, x0, #0xc98
  401de0:	mov	x0, x3
  401de4:	bl	401190 <sd_device_get_property_value@plt>
  401de8:	cmp	w0, #0x0
  401dec:	b.lt	401e70 <determine_state_file+0x210>  // b.tstop
  401df0:	str	xzr, [sp, #80]
  401df4:	ldr	x0, [sp, #72]
  401df8:	bl	4011d0 <cescape@plt>
  401dfc:	str	x0, [sp, #80]
  401e00:	ldr	x0, [sp, #80]
  401e04:	cmp	x0, #0x0
  401e08:	b.ne	401e34 <determine_state_file+0x1d4>  // b.any
  401e0c:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401e10:	add	x1, x0, #0xbab
  401e14:	adrp	x0, 404000 <_fini+0x4dc>
  401e18:	add	x3, x0, #0x200
  401e1c:	mov	w2, #0x7b                  	// #123
  401e20:	mov	w0, #0x0                   	// #0
  401e24:	bl	4013e0 <log_oom_internal@plt>
  401e28:	mov	w19, w0
  401e2c:	mov	w20, #0x0                   	// #0
  401e30:	b	401e5c <determine_state_file+0x1fc>
  401e34:	ldr	x1, [sp, #80]
  401e38:	mov	x4, #0x0                   	// #0
  401e3c:	ldr	x3, [sp, #96]
  401e40:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401e44:	add	x2, x0, #0xca0
  401e48:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401e4c:	add	x0, x0, #0xca8
  401e50:	bl	401240 <strjoin_real@plt>
  401e54:	str	x0, [sp, #88]
  401e58:	mov	w20, #0x1                   	// #1
  401e5c:	add	x0, sp, #0x50
  401e60:	bl	40165c <freep>
  401e64:	cmp	w20, #0x1
  401e68:	b.ne	401ec8 <determine_state_file+0x268>  // b.any
  401e6c:	b	401e88 <determine_state_file+0x228>
  401e70:	mov	x2, #0x0                   	// #0
  401e74:	ldr	x1, [sp, #96]
  401e78:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401e7c:	add	x0, x0, #0xca8
  401e80:	bl	401240 <strjoin_real@plt>
  401e84:	str	x0, [sp, #88]
  401e88:	ldr	x0, [sp, #88]
  401e8c:	cmp	x0, #0x0
  401e90:	b.ne	401eb8 <determine_state_file+0x258>  // b.any
  401e94:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401e98:	add	x1, x0, #0xbab
  401e9c:	adrp	x0, 404000 <_fini+0x4dc>
  401ea0:	add	x3, x0, #0x200
  401ea4:	mov	w2, #0x82                  	// #130
  401ea8:	mov	w0, #0x0                   	// #0
  401eac:	bl	4013e0 <log_oom_internal@plt>
  401eb0:	mov	w19, w0
  401eb4:	b	401ec8 <determine_state_file+0x268>
  401eb8:	ldr	x0, [sp, #32]
  401ebc:	ldr	x1, [sp, #88]
  401ec0:	str	x1, [x0]
  401ec4:	mov	w19, #0x0                   	// #0
  401ec8:	add	x0, sp, #0x40
  401ecc:	bl	4015d8 <sd_device_unrefp>
  401ed0:	add	x0, sp, #0x38
  401ed4:	bl	4015d8 <sd_device_unrefp>
  401ed8:	mov	w1, w19
  401edc:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  401ee0:	add	x0, x0, #0xc60
  401ee4:	ldr	x2, [sp, #104]
  401ee8:	ldr	x0, [x0]
  401eec:	eor	x0, x2, x0
  401ef0:	cmp	x0, #0x0
  401ef4:	b.eq	401efc <determine_state_file+0x29c>  // b.none
  401ef8:	bl	401300 <__stack_chk_fail@plt>
  401efc:	mov	w0, w1
  401f00:	ldp	x19, x20, [sp, #16]
  401f04:	ldp	x29, x30, [sp], #112
  401f08:	ret

0000000000401f0c <load_state>:
  401f0c:	stp	x29, x30, [sp, #-192]!
  401f10:	mov	x29, sp
  401f14:	stp	x19, x20, [sp, #16]
  401f18:	str	x0, [sp, #40]
  401f1c:	str	x1, [sp, #32]
  401f20:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  401f24:	add	x0, x0, #0xc60
  401f28:	ldr	x1, [x0]
  401f2c:	str	x1, [sp, #184]
  401f30:	mov	x1, #0x0                   	// #0
  401f34:	str	xzr, [sp, #152]
  401f38:	str	xzr, [sp, #160]
  401f3c:	ldr	x0, [sp, #40]
  401f40:	cmp	x0, #0x0
  401f44:	cset	w0, eq  // eq = none
  401f48:	and	w0, w0, #0xff
  401f4c:	and	x0, x0, #0xff
  401f50:	cmp	x0, #0x0
  401f54:	b.eq	401f80 <load_state+0x74>  // b.none
  401f58:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401f5c:	add	x1, x0, #0xbab
  401f60:	adrp	x0, 404000 <_fini+0x4dc>
  401f64:	add	x4, x0, #0x218
  401f68:	mov	w3, #0x8e                  	// #142
  401f6c:	mov	x2, x1
  401f70:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401f74:	add	x1, x0, #0xcc8
  401f78:	mov	w0, #0x0                   	// #0
  401f7c:	bl	401270 <log_assert_failed_realm@plt>
  401f80:	ldr	x0, [sp, #40]
  401f84:	ldr	w0, [x0, #8]
  401f88:	lsr	w0, w0, #31
  401f8c:	and	w0, w0, #0xff
  401f90:	and	x0, x0, #0xff
  401f94:	cmp	x0, #0x0
  401f98:	b.eq	401fc4 <load_state+0xb8>  // b.none
  401f9c:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401fa0:	add	x1, x0, #0xbab
  401fa4:	adrp	x0, 404000 <_fini+0x4dc>
  401fa8:	add	x4, x0, #0x218
  401fac:	mov	w3, #0x8f                  	// #143
  401fb0:	mov	x2, x1
  401fb4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401fb8:	add	x1, x0, #0xcd0
  401fbc:	mov	w0, #0x0                   	// #0
  401fc0:	bl	401270 <log_assert_failed_realm@plt>
  401fc4:	ldr	x0, [sp, #32]
  401fc8:	cmp	x0, #0x0
  401fcc:	cset	w0, eq  // eq = none
  401fd0:	and	w0, w0, #0xff
  401fd4:	and	x0, x0, #0xff
  401fd8:	cmp	x0, #0x0
  401fdc:	b.eq	402008 <load_state+0xfc>  // b.none
  401fe0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401fe4:	add	x1, x0, #0xbab
  401fe8:	adrp	x0, 404000 <_fini+0x4dc>
  401fec:	add	x4, x0, #0x218
  401ff0:	mov	w3, #0x90                  	// #144
  401ff4:	mov	x2, x1
  401ff8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  401ffc:	add	x1, x0, #0xbc0
  402000:	mov	w0, #0x0                   	// #0
  402004:	bl	401270 <log_assert_failed_realm@plt>
  402008:	bl	4012f0 <shall_restore_state@plt>
  40200c:	cmp	w0, #0x0
  402010:	b.ne	40201c <load_state+0x110>  // b.any
  402014:	mov	w19, #0x0                   	// #0
  402018:	b	402568 <load_state+0x65c>
  40201c:	add	x0, sp, #0x98
  402020:	mov	x1, x0
  402024:	ldr	x0, [sp, #32]
  402028:	bl	401c60 <determine_state_file>
  40202c:	str	w0, [sp, #60]
  402030:	ldr	w0, [sp, #60]
  402034:	cmp	w0, #0x0
  402038:	b.ge	402044 <load_state+0x138>  // b.tcont
  40203c:	ldr	w19, [sp, #60]
  402040:	b	402568 <load_state+0x65c>
  402044:	ldr	x0, [sp, #152]
  402048:	add	x1, sp, #0xa0
  40204c:	bl	4012e0 <read_one_line_file@plt>
  402050:	str	w0, [sp, #60]
  402054:	strb	wzr, [sp, #59]
  402058:	ldr	w0, [sp, #60]
  40205c:	cmn	w0, #0x2
  402060:	b.eq	402070 <load_state+0x164>  // b.none
  402064:	ldr	w0, [sp, #60]
  402068:	cmp	w0, #0x0
  40206c:	b.ne	402078 <load_state+0x16c>  // b.any
  402070:	mov	w0, #0x1                   	// #1
  402074:	strb	w0, [sp, #59]
  402078:	nop
  40207c:	ldrb	w0, [sp, #59]
  402080:	cmp	w0, #0x0
  402084:	b.eq	4021fc <load_state+0x2f0>  // b.none
  402088:	ldr	x19, [sp, #152]
  40208c:	ldr	x0, [sp, #32]
  402090:	ldrb	w0, [x0, #6]
  402094:	cmp	w0, #0x0
  402098:	cset	w0, ne  // ne = any
  40209c:	and	w0, w0, #0xff
  4020a0:	bl	401680 <one_zero>
  4020a4:	mov	w2, #0x83                  	// #131
  4020a8:	mov	x1, x0
  4020ac:	mov	x0, x19
  4020b0:	bl	4016b0 <write_string_file>
  4020b4:	str	w0, [sp, #60]
  4020b8:	ldr	w0, [sp, #60]
  4020bc:	cmp	w0, #0x0
  4020c0:	b.ge	402158 <load_state+0x24c>  // b.tcont
  4020c4:	mov	w0, #0x3                   	// #3
  4020c8:	str	w0, [sp, #140]
  4020cc:	ldr	w0, [sp, #60]
  4020d0:	str	w0, [sp, #144]
  4020d4:	str	wzr, [sp, #148]
  4020d8:	ldr	w0, [sp, #148]
  4020dc:	bl	401400 <log_get_max_level_realm@plt>
  4020e0:	mov	w1, w0
  4020e4:	ldr	w0, [sp, #140]
  4020e8:	and	w0, w0, #0x7
  4020ec:	cmp	w1, w0
  4020f0:	b.lt	402140 <load_state+0x234>  // b.tstop
  4020f4:	ldr	w0, [sp, #148]
  4020f8:	lsl	w1, w0, #10
  4020fc:	ldr	w0, [sp, #140]
  402100:	orr	w7, w1, w0
  402104:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402108:	add	x1, x0, #0xbab
  40210c:	ldr	x0, [sp, #152]
  402110:	mov	x6, x0
  402114:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402118:	add	x5, x0, #0xce8
  40211c:	adrp	x0, 404000 <_fini+0x4dc>
  402120:	add	x4, x0, #0x228
  402124:	mov	w3, #0x9f                  	// #159
  402128:	mov	x2, x1
  40212c:	ldr	w1, [sp, #144]
  402130:	mov	w0, w7
  402134:	bl	401350 <log_internal_realm@plt>
  402138:	mov	w19, w0
  40213c:	b	402568 <load_state+0x65c>
  402140:	ldr	w0, [sp, #144]
  402144:	cmp	w0, #0x0
  402148:	cneg	w0, w0, lt  // lt = tstop
  40214c:	and	w0, w0, #0xff
  402150:	neg	w19, w0
  402154:	b	402568 <load_state+0x65c>
  402158:	mov	w0, #0x7                   	// #7
  40215c:	str	w0, [sp, #128]
  402160:	str	wzr, [sp, #132]
  402164:	str	wzr, [sp, #136]
  402168:	ldr	w0, [sp, #136]
  40216c:	bl	401400 <log_get_max_level_realm@plt>
  402170:	mov	w1, w0
  402174:	ldr	w0, [sp, #128]
  402178:	and	w0, w0, #0x7
  40217c:	cmp	w1, w0
  402180:	b.lt	4021ec <load_state+0x2e0>  // b.tstop
  402184:	ldr	w0, [sp, #136]
  402188:	lsl	w1, w0, #10
  40218c:	ldr	w0, [sp, #128]
  402190:	orr	w19, w1, w0
  402194:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402198:	add	x20, x0, #0xbab
  40219c:	ldr	x0, [sp, #32]
  4021a0:	ldrb	w0, [x0, #6]
  4021a4:	cmp	w0, #0x0
  4021a8:	cset	w0, ne  // ne = any
  4021ac:	and	w0, w0, #0xff
  4021b0:	bl	401680 <one_zero>
  4021b4:	mov	x1, x0
  4021b8:	ldr	x0, [sp, #152]
  4021bc:	mov	x7, x0
  4021c0:	mov	x6, x1
  4021c4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4021c8:	add	x5, x0, #0xd10
  4021cc:	adrp	x0, 404000 <_fini+0x4dc>
  4021d0:	add	x4, x0, #0x228
  4021d4:	mov	w3, #0xa1                  	// #161
  4021d8:	mov	x2, x20
  4021dc:	ldr	w1, [sp, #132]
  4021e0:	mov	w0, w19
  4021e4:	bl	401350 <log_internal_realm@plt>
  4021e8:	b	4021f4 <load_state+0x2e8>
  4021ec:	ldr	w0, [sp, #132]
  4021f0:	cmp	w0, #0x0
  4021f4:	mov	w19, #0x0                   	// #0
  4021f8:	b	402568 <load_state+0x65c>
  4021fc:	ldr	w0, [sp, #60]
  402200:	cmp	w0, #0x0
  402204:	b.ge	40229c <load_state+0x390>  // b.tcont
  402208:	mov	w0, #0x3                   	// #3
  40220c:	str	w0, [sp, #116]
  402210:	ldr	w0, [sp, #60]
  402214:	str	w0, [sp, #120]
  402218:	str	wzr, [sp, #124]
  40221c:	ldr	w0, [sp, #124]
  402220:	bl	401400 <log_get_max_level_realm@plt>
  402224:	mov	w1, w0
  402228:	ldr	w0, [sp, #116]
  40222c:	and	w0, w0, #0x7
  402230:	cmp	w1, w0
  402234:	b.lt	402284 <load_state+0x378>  // b.tstop
  402238:	ldr	w0, [sp, #124]
  40223c:	lsl	w1, w0, #10
  402240:	ldr	w0, [sp, #116]
  402244:	orr	w7, w1, w0
  402248:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40224c:	add	x1, x0, #0xbab
  402250:	ldr	x0, [sp, #152]
  402254:	mov	x6, x0
  402258:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40225c:	add	x5, x0, #0xd28
  402260:	adrp	x0, 404000 <_fini+0x4dc>
  402264:	add	x4, x0, #0x228
  402268:	mov	w3, #0xa5                  	// #165
  40226c:	mov	x2, x1
  402270:	ldr	w1, [sp, #120]
  402274:	mov	w0, w7
  402278:	bl	401350 <log_internal_realm@plt>
  40227c:	mov	w19, w0
  402280:	b	402568 <load_state+0x65c>
  402284:	ldr	w0, [sp, #120]
  402288:	cmp	w0, #0x0
  40228c:	cneg	w0, w0, lt  // lt = tstop
  402290:	and	w0, w0, #0xff
  402294:	neg	w19, w0
  402298:	b	402568 <load_state+0x65c>
  40229c:	ldr	x0, [sp, #160]
  4022a0:	bl	4011b0 <parse_boolean@plt>
  4022a4:	str	w0, [sp, #64]
  4022a8:	ldr	w0, [sp, #64]
  4022ac:	cmp	w0, #0x0
  4022b0:	b.ge	402348 <load_state+0x43c>  // b.tcont
  4022b4:	mov	w0, #0x3                   	// #3
  4022b8:	str	w0, [sp, #104]
  4022bc:	ldr	w0, [sp, #64]
  4022c0:	str	w0, [sp, #108]
  4022c4:	str	wzr, [sp, #112]
  4022c8:	ldr	w0, [sp, #112]
  4022cc:	bl	401400 <log_get_max_level_realm@plt>
  4022d0:	mov	w1, w0
  4022d4:	ldr	w0, [sp, #104]
  4022d8:	and	w0, w0, #0x7
  4022dc:	cmp	w1, w0
  4022e0:	b.lt	402330 <load_state+0x424>  // b.tstop
  4022e4:	ldr	w0, [sp, #112]
  4022e8:	lsl	w1, w0, #10
  4022ec:	ldr	w0, [sp, #104]
  4022f0:	orr	w7, w1, w0
  4022f4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4022f8:	add	x1, x0, #0xbab
  4022fc:	ldr	x0, [sp, #152]
  402300:	mov	x6, x0
  402304:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402308:	add	x5, x0, #0xd50
  40230c:	adrp	x0, 404000 <_fini+0x4dc>
  402310:	add	x4, x0, #0x228
  402314:	mov	w3, #0xa9                  	// #169
  402318:	mov	x2, x1
  40231c:	ldr	w1, [sp, #108]
  402320:	mov	w0, w7
  402324:	bl	401350 <log_internal_realm@plt>
  402328:	mov	w19, w0
  40232c:	b	402568 <load_state+0x65c>
  402330:	ldr	w0, [sp, #108]
  402334:	cmp	w0, #0x0
  402338:	cneg	w0, w0, lt  // lt = tstop
  40233c:	and	w0, w0, #0xff
  402340:	neg	w19, w0
  402344:	b	402568 <load_state+0x65c>
  402348:	ldr	x0, [sp, #32]
  40234c:	ldr	w0, [x0]
  402350:	ldr	w1, [sp, #64]
  402354:	and	w1, w1, #0xff
  402358:	str	xzr, [sp, #168]
  40235c:	str	w0, [sp, #168]
  402360:	mov	w0, #0x2                   	// #2
  402364:	strb	w0, [sp, #173]
  402368:	mov	w0, w1
  40236c:	strb	w0, [sp, #174]
  402370:	ldr	x0, [sp, #40]
  402374:	ldr	w0, [x0, #8]
  402378:	add	x1, sp, #0xa8
  40237c:	mov	x2, #0x8                   	// #8
  402380:	bl	401310 <write@plt>
  402384:	str	x0, [sp, #176]
  402388:	ldr	x0, [sp, #176]
  40238c:	cmp	x0, #0x0
  402390:	b.ge	402430 <load_state+0x524>  // b.tcont
  402394:	mov	w0, #0x3                   	// #3
  402398:	str	w0, [sp, #92]
  40239c:	bl	4012c0 <__errno_location@plt>
  4023a0:	ldr	w0, [x0]
  4023a4:	str	w0, [sp, #96]
  4023a8:	str	wzr, [sp, #100]
  4023ac:	ldr	w0, [sp, #100]
  4023b0:	bl	401400 <log_get_max_level_realm@plt>
  4023b4:	mov	w1, w0
  4023b8:	ldr	w0, [sp, #92]
  4023bc:	and	w0, w0, #0x7
  4023c0:	cmp	w1, w0
  4023c4:	b.lt	402418 <load_state+0x50c>  // b.tstop
  4023c8:	ldr	w0, [sp, #100]
  4023cc:	lsl	w1, w0, #10
  4023d0:	ldr	w0, [sp, #92]
  4023d4:	orr	w7, w1, w0
  4023d8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4023dc:	add	x1, x0, #0xbab
  4023e0:	ldr	x0, [sp, #32]
  4023e4:	ldr	w0, [x0]
  4023e8:	mov	w6, w0
  4023ec:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4023f0:	add	x5, x0, #0xd78
  4023f4:	adrp	x0, 404000 <_fini+0x4dc>
  4023f8:	add	x4, x0, #0x228
  4023fc:	mov	w3, #0xb3                  	// #179
  402400:	mov	x2, x1
  402404:	ldr	w1, [sp, #96]
  402408:	mov	w0, w7
  40240c:	bl	401350 <log_internal_realm@plt>
  402410:	mov	w19, w0
  402414:	b	402568 <load_state+0x65c>
  402418:	ldr	w0, [sp, #96]
  40241c:	cmp	w0, #0x0
  402420:	cneg	w0, w0, lt  // lt = tstop
  402424:	and	w0, w0, #0xff
  402428:	neg	w19, w0
  40242c:	b	402568 <load_state+0x65c>
  402430:	ldr	x0, [sp, #176]
  402434:	cmp	x0, #0x8
  402438:	b.eq	4024cc <load_state+0x5c0>  // b.none
  40243c:	mov	w0, #0x3                   	// #3
  402440:	str	w0, [sp, #80]
  402444:	mov	w0, #0x5                   	// #5
  402448:	movk	w0, #0x4000, lsl #16
  40244c:	str	w0, [sp, #84]
  402450:	str	wzr, [sp, #88]
  402454:	ldr	w0, [sp, #88]
  402458:	bl	401400 <log_get_max_level_realm@plt>
  40245c:	mov	w1, w0
  402460:	ldr	w0, [sp, #80]
  402464:	and	w0, w0, #0x7
  402468:	cmp	w1, w0
  40246c:	b.lt	4024b4 <load_state+0x5a8>  // b.tstop
  402470:	ldr	w0, [sp, #88]
  402474:	lsl	w1, w0, #10
  402478:	ldr	w0, [sp, #80]
  40247c:	orr	w6, w1, w0
  402480:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402484:	add	x1, x0, #0xbab
  402488:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40248c:	add	x5, x0, #0xda8
  402490:	adrp	x0, 404000 <_fini+0x4dc>
  402494:	add	x4, x0, #0x228
  402498:	mov	w3, #0xb5                  	// #181
  40249c:	mov	x2, x1
  4024a0:	ldr	w1, [sp, #84]
  4024a4:	mov	w0, w6
  4024a8:	bl	401350 <log_internal_realm@plt>
  4024ac:	mov	w19, w0
  4024b0:	b	402568 <load_state+0x65c>
  4024b4:	ldr	w0, [sp, #84]
  4024b8:	cmp	w0, #0x0
  4024bc:	cneg	w0, w0, lt  // lt = tstop
  4024c0:	and	w0, w0, #0xff
  4024c4:	neg	w19, w0
  4024c8:	b	402568 <load_state+0x65c>
  4024cc:	mov	w0, #0x7                   	// #7
  4024d0:	str	w0, [sp, #68]
  4024d4:	str	wzr, [sp, #72]
  4024d8:	str	wzr, [sp, #76]
  4024dc:	ldr	w0, [sp, #76]
  4024e0:	bl	401400 <log_get_max_level_realm@plt>
  4024e4:	mov	w1, w0
  4024e8:	ldr	w0, [sp, #68]
  4024ec:	and	w0, w0, #0x7
  4024f0:	cmp	w1, w0
  4024f4:	b.lt	40255c <load_state+0x650>  // b.tstop
  4024f8:	ldr	w0, [sp, #76]
  4024fc:	lsl	w1, w0, #10
  402500:	ldr	w0, [sp, #68]
  402504:	orr	w19, w1, w0
  402508:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40250c:	add	x20, x0, #0xbab
  402510:	ldr	w0, [sp, #64]
  402514:	cmp	w0, #0x0
  402518:	cset	w0, ne  // ne = any
  40251c:	and	w0, w0, #0xff
  402520:	bl	401680 <one_zero>
  402524:	mov	x1, x0
  402528:	ldr	x0, [sp, #152]
  40252c:	mov	x7, x0
  402530:	mov	x6, x1
  402534:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402538:	add	x5, x0, #0xde0
  40253c:	adrp	x0, 404000 <_fini+0x4dc>
  402540:	add	x4, x0, #0x228
  402544:	mov	w3, #0xb8                  	// #184
  402548:	mov	x2, x20
  40254c:	ldr	w1, [sp, #72]
  402550:	mov	w0, w19
  402554:	bl	401350 <log_internal_realm@plt>
  402558:	b	402564 <load_state+0x658>
  40255c:	ldr	w0, [sp, #72]
  402560:	cmp	w0, #0x0
  402564:	mov	w19, #0x0                   	// #0
  402568:	add	x0, sp, #0xa0
  40256c:	bl	40165c <freep>
  402570:	add	x0, sp, #0x98
  402574:	bl	40165c <freep>
  402578:	mov	w1, w19
  40257c:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  402580:	add	x0, x0, #0xc60
  402584:	ldr	x2, [sp, #184]
  402588:	ldr	x0, [x0]
  40258c:	eor	x0, x2, x0
  402590:	cmp	x0, #0x0
  402594:	b.eq	40259c <load_state+0x690>  // b.none
  402598:	bl	401300 <__stack_chk_fail@plt>
  40259c:	mov	w0, w1
  4025a0:	ldp	x19, x20, [sp, #16]
  4025a4:	ldp	x29, x30, [sp], #192
  4025a8:	ret

00000000004025ac <save_state_queue_remove>:
  4025ac:	stp	x29, x30, [sp, #-112]!
  4025b0:	mov	x29, sp
  4025b4:	stp	x19, x20, [sp, #16]
  4025b8:	str	x0, [sp, #56]
  4025bc:	str	w1, [sp, #52]
  4025c0:	str	x2, [sp, #40]
  4025c4:	ldr	x0, [sp, #56]
  4025c8:	cmp	x0, #0x0
  4025cc:	cset	w0, eq  // eq = none
  4025d0:	and	w0, w0, #0xff
  4025d4:	and	x0, x0, #0xff
  4025d8:	cmp	x0, #0x0
  4025dc:	b.eq	402608 <save_state_queue_remove+0x5c>  // b.none
  4025e0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4025e4:	add	x1, x0, #0xbab
  4025e8:	adrp	x0, 404000 <_fini+0x4dc>
  4025ec:	add	x4, x0, #0x238
  4025f0:	mov	w3, #0xbf                  	// #191
  4025f4:	mov	x2, x1
  4025f8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4025fc:	add	x1, x0, #0xcc8
  402600:	mov	w0, #0x0                   	// #0
  402604:	bl	401270 <log_assert_failed_realm@plt>
  402608:	ldr	x0, [sp, #56]
  40260c:	ldr	x0, [x0]
  402610:	str	x0, [sp, #80]
  402614:	b	402808 <save_state_queue_remove+0x25c>
  402618:	ldr	x0, [sp, #80]
  40261c:	ldr	x0, [x0, #24]
  402620:	ldr	x1, [sp, #40]
  402624:	bl	401360 <strcmp@plt>
  402628:	cmp	w0, #0x0
  40262c:	b.eq	402644 <save_state_queue_remove+0x98>  // b.none
  402630:	ldr	x0, [sp, #80]
  402634:	ldr	w0, [x0, #16]
  402638:	ldr	w1, [sp, #52]
  40263c:	cmp	w1, w0
  402640:	b.ne	402800 <save_state_queue_remove+0x254>  // b.any
  402644:	mov	w0, #0x7                   	// #7
  402648:	str	w0, [sp, #68]
  40264c:	str	wzr, [sp, #72]
  402650:	str	wzr, [sp, #76]
  402654:	ldr	w0, [sp, #76]
  402658:	bl	401400 <log_get_max_level_realm@plt>
  40265c:	mov	w1, w0
  402660:	ldr	w0, [sp, #68]
  402664:	and	w0, w0, #0x7
  402668:	cmp	w1, w0
  40266c:	b.lt	4026dc <save_state_queue_remove+0x130>  // b.tstop
  402670:	ldr	w0, [sp, #76]
  402674:	lsl	w1, w0, #10
  402678:	ldr	w0, [sp, #68]
  40267c:	orr	w19, w1, w0
  402680:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402684:	add	x20, x0, #0xbab
  402688:	ldr	x0, [sp, #80]
  40268c:	ldr	w0, [x0, #32]
  402690:	cmp	w0, #0x0
  402694:	cset	w0, ne  // ne = any
  402698:	and	w0, w0, #0xff
  40269c:	bl	401680 <one_zero>
  4026a0:	mov	x1, x0
  4026a4:	ldr	x0, [sp, #80]
  4026a8:	ldr	x0, [x0, #24]
  4026ac:	mov	x7, x0
  4026b0:	mov	x6, x1
  4026b4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4026b8:	add	x5, x0, #0xe00
  4026bc:	adrp	x0, 404000 <_fini+0x4dc>
  4026c0:	add	x4, x0, #0x250
  4026c4:	mov	w3, #0xc3                  	// #195
  4026c8:	mov	x2, x20
  4026cc:	ldr	w1, [sp, #72]
  4026d0:	mov	w0, w19
  4026d4:	bl	401350 <log_internal_realm@plt>
  4026d8:	b	4026e4 <save_state_queue_remove+0x138>
  4026dc:	ldr	w0, [sp, #72]
  4026e0:	cmp	w0, #0x0
  4026e4:	ldr	x0, [sp, #56]
  4026e8:	str	x0, [sp, #96]
  4026ec:	ldr	x0, [sp, #80]
  4026f0:	str	x0, [sp, #104]
  4026f4:	ldr	x0, [sp, #104]
  4026f8:	cmp	x0, #0x0
  4026fc:	cset	w0, eq  // eq = none
  402700:	and	w0, w0, #0xff
  402704:	and	x0, x0, #0xff
  402708:	cmp	x0, #0x0
  40270c:	b.eq	402738 <save_state_queue_remove+0x18c>  // b.none
  402710:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402714:	add	x1, x0, #0xbab
  402718:	adrp	x0, 404000 <_fini+0x4dc>
  40271c:	add	x4, x0, #0x238
  402720:	mov	w3, #0xc4                  	// #196
  402724:	mov	x2, x1
  402728:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40272c:	add	x1, x0, #0xe30
  402730:	mov	w0, #0x0                   	// #0
  402734:	bl	401270 <log_assert_failed_realm@plt>
  402738:	ldr	x0, [sp, #104]
  40273c:	ldr	x0, [x0]
  402740:	cmp	x0, #0x0
  402744:	b.eq	40275c <save_state_queue_remove+0x1b0>  // b.none
  402748:	ldr	x0, [sp, #104]
  40274c:	ldr	x0, [x0]
  402750:	ldr	x1, [sp, #104]
  402754:	ldr	x1, [x1, #8]
  402758:	str	x1, [x0, #8]
  40275c:	ldr	x0, [sp, #104]
  402760:	ldr	x0, [x0, #8]
  402764:	cmp	x0, #0x0
  402768:	b.eq	402784 <save_state_queue_remove+0x1d8>  // b.none
  40276c:	ldr	x0, [sp, #104]
  402770:	ldr	x0, [x0, #8]
  402774:	ldr	x1, [sp, #104]
  402778:	ldr	x1, [x1]
  40277c:	str	x1, [x0]
  402780:	b	4027e0 <save_state_queue_remove+0x234>
  402784:	ldr	x0, [sp, #96]
  402788:	ldr	x0, [x0]
  40278c:	ldr	x1, [sp, #104]
  402790:	cmp	x1, x0
  402794:	cset	w0, ne  // ne = any
  402798:	and	w0, w0, #0xff
  40279c:	and	x0, x0, #0xff
  4027a0:	cmp	x0, #0x0
  4027a4:	b.eq	4027d0 <save_state_queue_remove+0x224>  // b.none
  4027a8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4027ac:	add	x1, x0, #0xbab
  4027b0:	adrp	x0, 404000 <_fini+0x4dc>
  4027b4:	add	x4, x0, #0x238
  4027b8:	mov	w3, #0xc4                  	// #196
  4027bc:	mov	x2, x1
  4027c0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4027c4:	add	x1, x0, #0xe38
  4027c8:	mov	w0, #0x0                   	// #0
  4027cc:	bl	401270 <log_assert_failed_realm@plt>
  4027d0:	ldr	x0, [sp, #104]
  4027d4:	ldr	x1, [x0]
  4027d8:	ldr	x0, [sp, #96]
  4027dc:	str	x1, [x0]
  4027e0:	ldr	x0, [sp, #104]
  4027e4:	str	xzr, [x0, #8]
  4027e8:	ldr	x0, [sp, #104]
  4027ec:	ldr	x1, [x0, #8]
  4027f0:	ldr	x0, [sp, #104]
  4027f4:	str	x1, [x0]
  4027f8:	ldr	x0, [sp, #80]
  4027fc:	bl	4017a0 <write_queue_item_free>
  402800:	ldr	x0, [sp, #88]
  402804:	str	x0, [sp, #80]
  402808:	ldr	x0, [sp, #80]
  40280c:	cmp	x0, #0x0
  402810:	b.eq	402830 <save_state_queue_remove+0x284>  // b.none
  402814:	ldr	x0, [sp, #80]
  402818:	ldr	x0, [x0]
  40281c:	str	x0, [sp, #88]
  402820:	ldr	x0, [sp, #40]
  402824:	cmp	x0, #0x0
  402828:	b.eq	402630 <save_state_queue_remove+0x84>  // b.none
  40282c:	b	402618 <save_state_queue_remove+0x6c>
  402830:	nop
  402834:	ldp	x19, x20, [sp, #16]
  402838:	ldp	x29, x30, [sp], #112
  40283c:	ret

0000000000402840 <save_state_queue>:
  402840:	stp	x29, x30, [sp, #-144]!
  402844:	mov	x29, sp
  402848:	str	x19, [sp, #16]
  40284c:	str	x0, [sp, #40]
  402850:	str	x1, [sp, #32]
  402854:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  402858:	add	x0, x0, #0xc60
  40285c:	ldr	x1, [x0]
  402860:	str	x1, [sp, #136]
  402864:	mov	x1, #0x0                   	// #0
  402868:	str	xzr, [sp, #64]
  40286c:	ldr	x0, [sp, #40]
  402870:	cmp	x0, #0x0
  402874:	cset	w0, eq  // eq = none
  402878:	and	w0, w0, #0xff
  40287c:	and	x0, x0, #0xff
  402880:	cmp	x0, #0x0
  402884:	b.eq	4028b0 <save_state_queue+0x70>  // b.none
  402888:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40288c:	add	x1, x0, #0xbab
  402890:	adrp	x0, 404000 <_fini+0x4dc>
  402894:	add	x4, x0, #0x268
  402898:	mov	w3, #0xcf                  	// #207
  40289c:	mov	x2, x1
  4028a0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4028a4:	add	x1, x0, #0xcc8
  4028a8:	mov	w0, #0x0                   	// #0
  4028ac:	bl	401270 <log_assert_failed_realm@plt>
  4028b0:	ldr	x0, [sp, #40]
  4028b4:	ldr	w0, [x0, #8]
  4028b8:	lsr	w0, w0, #31
  4028bc:	and	w0, w0, #0xff
  4028c0:	and	x0, x0, #0xff
  4028c4:	cmp	x0, #0x0
  4028c8:	b.eq	4028f4 <save_state_queue+0xb4>  // b.none
  4028cc:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4028d0:	add	x1, x0, #0xbab
  4028d4:	adrp	x0, 404000 <_fini+0x4dc>
  4028d8:	add	x4, x0, #0x268
  4028dc:	mov	w3, #0xd0                  	// #208
  4028e0:	mov	x2, x1
  4028e4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4028e8:	add	x1, x0, #0xcd0
  4028ec:	mov	w0, #0x0                   	// #0
  4028f0:	bl	401270 <log_assert_failed_realm@plt>
  4028f4:	ldr	x0, [sp, #32]
  4028f8:	cmp	x0, #0x0
  4028fc:	cset	w0, eq  // eq = none
  402900:	and	w0, w0, #0xff
  402904:	and	x0, x0, #0xff
  402908:	cmp	x0, #0x0
  40290c:	b.eq	402938 <save_state_queue+0xf8>  // b.none
  402910:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402914:	add	x1, x0, #0xbab
  402918:	adrp	x0, 404000 <_fini+0x4dc>
  40291c:	add	x4, x0, #0x268
  402920:	mov	w3, #0xd1                  	// #209
  402924:	mov	x2, x1
  402928:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40292c:	add	x1, x0, #0xbc0
  402930:	mov	w0, #0x0                   	// #0
  402934:	bl	401270 <log_assert_failed_realm@plt>
  402938:	add	x0, sp, #0x40
  40293c:	mov	x1, x0
  402940:	ldr	x0, [sp, #32]
  402944:	bl	401c60 <determine_state_file>
  402948:	str	w0, [sp, #60]
  40294c:	ldr	w0, [sp, #60]
  402950:	cmp	w0, #0x0
  402954:	b.ge	402960 <save_state_queue+0x120>  // b.tcont
  402958:	ldr	w19, [sp, #60]
  40295c:	b	402b28 <save_state_queue+0x2e8>
  402960:	ldr	x0, [sp, #32]
  402964:	ldr	w0, [x0]
  402968:	mov	w1, w0
  40296c:	ldr	x0, [sp, #64]
  402970:	mov	x2, x0
  402974:	ldr	x0, [sp, #40]
  402978:	bl	4025ac <save_state_queue_remove>
  40297c:	mov	x1, #0x28                  	// #40
  402980:	mov	x0, #0x1                   	// #1
  402984:	bl	401370 <calloc@plt>
  402988:	str	x0, [sp, #88]
  40298c:	ldr	x0, [sp, #88]
  402990:	cmp	x0, #0x0
  402994:	b.ne	4029a0 <save_state_queue+0x160>  // b.any
  402998:	mov	w19, #0xfffffff4            	// #-12
  40299c:	b	402b28 <save_state_queue+0x2e8>
  4029a0:	ldr	x0, [sp, #64]
  4029a4:	str	x0, [sp, #96]
  4029a8:	str	xzr, [sp, #64]
  4029ac:	ldr	x1, [sp, #96]
  4029b0:	ldr	x0, [sp, #88]
  4029b4:	str	x1, [x0, #24]
  4029b8:	ldr	x0, [sp, #32]
  4029bc:	ldr	w0, [x0]
  4029c0:	mov	w1, w0
  4029c4:	ldr	x0, [sp, #88]
  4029c8:	str	w1, [x0, #16]
  4029cc:	ldr	x0, [sp, #32]
  4029d0:	ldrb	w0, [x0, #6]
  4029d4:	mov	w1, w0
  4029d8:	ldr	x0, [sp, #88]
  4029dc:	str	w1, [x0, #32]
  4029e0:	ldr	x0, [sp, #40]
  4029e4:	str	x0, [sp, #104]
  4029e8:	ldr	x0, [sp, #104]
  4029ec:	ldr	x0, [x0]
  4029f0:	str	x0, [sp, #80]
  4029f4:	ldr	x0, [sp, #80]
  4029f8:	cmp	x0, #0x0
  4029fc:	b.ne	402a14 <save_state_queue+0x1d4>  // b.any
  402a00:	str	xzr, [sp, #72]
  402a04:	b	402a2c <save_state_queue+0x1ec>
  402a08:	ldr	x0, [sp, #80]
  402a0c:	ldr	x0, [x0]
  402a10:	str	x0, [sp, #80]
  402a14:	ldr	x0, [sp, #80]
  402a18:	ldr	x0, [x0]
  402a1c:	cmp	x0, #0x0
  402a20:	b.ne	402a08 <save_state_queue+0x1c8>  // b.any
  402a24:	ldr	x0, [sp, #80]
  402a28:	str	x0, [sp, #72]
  402a2c:	ldr	x0, [sp, #104]
  402a30:	str	x0, [sp, #112]
  402a34:	ldr	x0, [sp, #72]
  402a38:	str	x0, [sp, #120]
  402a3c:	ldr	x0, [sp, #88]
  402a40:	str	x0, [sp, #128]
  402a44:	ldr	x0, [sp, #128]
  402a48:	cmp	x0, #0x0
  402a4c:	cset	w0, eq  // eq = none
  402a50:	and	w0, w0, #0xff
  402a54:	and	x0, x0, #0xff
  402a58:	cmp	x0, #0x0
  402a5c:	b.eq	402a88 <save_state_queue+0x248>  // b.none
  402a60:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402a64:	add	x1, x0, #0xbab
  402a68:	adrp	x0, 404000 <_fini+0x4dc>
  402a6c:	add	x4, x0, #0x268
  402a70:	mov	w3, #0xe1                  	// #225
  402a74:	mov	x2, x1
  402a78:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402a7c:	add	x1, x0, #0xe48
  402a80:	mov	w0, #0x0                   	// #0
  402a84:	bl	401270 <log_assert_failed_realm@plt>
  402a88:	ldr	x0, [sp, #120]
  402a8c:	cmp	x0, #0x0
  402a90:	b.ne	402adc <save_state_queue+0x29c>  // b.any
  402a94:	ldr	x0, [sp, #112]
  402a98:	ldr	x1, [x0]
  402a9c:	ldr	x0, [sp, #128]
  402aa0:	str	x1, [x0]
  402aa4:	ldr	x0, [sp, #128]
  402aa8:	ldr	x0, [x0]
  402aac:	cmp	x0, #0x0
  402ab0:	b.eq	402ac4 <save_state_queue+0x284>  // b.none
  402ab4:	ldr	x0, [sp, #128]
  402ab8:	ldr	x0, [x0]
  402abc:	ldr	x1, [sp, #128]
  402ac0:	str	x1, [x0, #8]
  402ac4:	ldr	x0, [sp, #128]
  402ac8:	str	xzr, [x0, #8]
  402acc:	ldr	x0, [sp, #112]
  402ad0:	ldr	x1, [sp, #128]
  402ad4:	str	x1, [x0]
  402ad8:	b	402b24 <save_state_queue+0x2e4>
  402adc:	ldr	x0, [sp, #120]
  402ae0:	ldr	x1, [x0]
  402ae4:	ldr	x0, [sp, #128]
  402ae8:	str	x1, [x0]
  402aec:	ldr	x0, [sp, #128]
  402af0:	ldr	x0, [x0]
  402af4:	cmp	x0, #0x0
  402af8:	b.eq	402b0c <save_state_queue+0x2cc>  // b.none
  402afc:	ldr	x0, [sp, #128]
  402b00:	ldr	x0, [x0]
  402b04:	ldr	x1, [sp, #128]
  402b08:	str	x1, [x0, #8]
  402b0c:	ldr	x0, [sp, #128]
  402b10:	ldr	x1, [sp, #120]
  402b14:	str	x1, [x0, #8]
  402b18:	ldr	x0, [sp, #120]
  402b1c:	ldr	x1, [sp, #128]
  402b20:	str	x1, [x0]
  402b24:	mov	w19, #0x0                   	// #0
  402b28:	add	x0, sp, #0x40
  402b2c:	bl	40165c <freep>
  402b30:	mov	w1, w19
  402b34:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  402b38:	add	x0, x0, #0xc60
  402b3c:	ldr	x2, [sp, #136]
  402b40:	ldr	x0, [x0]
  402b44:	eor	x0, x2, x0
  402b48:	cmp	x0, #0x0
  402b4c:	b.eq	402b54 <save_state_queue+0x314>  // b.none
  402b50:	bl	401300 <__stack_chk_fail@plt>
  402b54:	mov	w0, w1
  402b58:	ldr	x19, [sp, #16]
  402b5c:	ldp	x29, x30, [sp], #144
  402b60:	ret

0000000000402b64 <save_state_cancel>:
  402b64:	stp	x29, x30, [sp, #-80]!
  402b68:	mov	x29, sp
  402b6c:	str	x19, [sp, #16]
  402b70:	str	x0, [sp, #40]
  402b74:	str	x1, [sp, #32]
  402b78:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  402b7c:	add	x0, x0, #0xc60
  402b80:	ldr	x1, [x0]
  402b84:	str	x1, [sp, #72]
  402b88:	mov	x1, #0x0                   	// #0
  402b8c:	str	xzr, [sp, #64]
  402b90:	ldr	x0, [sp, #40]
  402b94:	cmp	x0, #0x0
  402b98:	cset	w0, eq  // eq = none
  402b9c:	and	w0, w0, #0xff
  402ba0:	and	x0, x0, #0xff
  402ba4:	cmp	x0, #0x0
  402ba8:	b.eq	402bd4 <save_state_cancel+0x70>  // b.none
  402bac:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402bb0:	add	x1, x0, #0xbab
  402bb4:	adrp	x0, 404000 <_fini+0x4dc>
  402bb8:	add	x4, x0, #0x280
  402bbc:	mov	w3, #0xea                  	// #234
  402bc0:	mov	x2, x1
  402bc4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402bc8:	add	x1, x0, #0xcc8
  402bcc:	mov	w0, #0x0                   	// #0
  402bd0:	bl	401270 <log_assert_failed_realm@plt>
  402bd4:	ldr	x0, [sp, #40]
  402bd8:	ldr	w0, [x0, #8]
  402bdc:	lsr	w0, w0, #31
  402be0:	and	w0, w0, #0xff
  402be4:	and	x0, x0, #0xff
  402be8:	cmp	x0, #0x0
  402bec:	b.eq	402c18 <save_state_cancel+0xb4>  // b.none
  402bf0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402bf4:	add	x1, x0, #0xbab
  402bf8:	adrp	x0, 404000 <_fini+0x4dc>
  402bfc:	add	x4, x0, #0x280
  402c00:	mov	w3, #0xeb                  	// #235
  402c04:	mov	x2, x1
  402c08:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402c0c:	add	x1, x0, #0xcd0
  402c10:	mov	w0, #0x0                   	// #0
  402c14:	bl	401270 <log_assert_failed_realm@plt>
  402c18:	ldr	x0, [sp, #32]
  402c1c:	cmp	x0, #0x0
  402c20:	cset	w0, eq  // eq = none
  402c24:	and	w0, w0, #0xff
  402c28:	and	x0, x0, #0xff
  402c2c:	cmp	x0, #0x0
  402c30:	b.eq	402c5c <save_state_cancel+0xf8>  // b.none
  402c34:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402c38:	add	x1, x0, #0xbab
  402c3c:	adrp	x0, 404000 <_fini+0x4dc>
  402c40:	add	x4, x0, #0x280
  402c44:	mov	w3, #0xec                  	// #236
  402c48:	mov	x2, x1
  402c4c:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402c50:	add	x1, x0, #0xbc0
  402c54:	mov	w0, #0x0                   	// #0
  402c58:	bl	401270 <log_assert_failed_realm@plt>
  402c5c:	add	x0, sp, #0x40
  402c60:	mov	x1, x0
  402c64:	ldr	x0, [sp, #32]
  402c68:	bl	401c60 <determine_state_file>
  402c6c:	str	w0, [sp, #60]
  402c70:	ldr	x0, [sp, #32]
  402c74:	ldr	w0, [x0]
  402c78:	mov	w1, w0
  402c7c:	ldr	x0, [sp, #64]
  402c80:	mov	x2, x0
  402c84:	ldr	x0, [sp, #40]
  402c88:	bl	4025ac <save_state_queue_remove>
  402c8c:	ldr	w0, [sp, #60]
  402c90:	cmp	w0, #0x0
  402c94:	b.ge	402ca0 <save_state_cancel+0x13c>  // b.tcont
  402c98:	ldr	w19, [sp, #60]
  402c9c:	b	402ca4 <save_state_cancel+0x140>
  402ca0:	mov	w19, #0x0                   	// #0
  402ca4:	add	x0, sp, #0x40
  402ca8:	bl	40165c <freep>
  402cac:	mov	w1, w19
  402cb0:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  402cb4:	add	x0, x0, #0xc60
  402cb8:	ldr	x2, [sp, #72]
  402cbc:	ldr	x0, [x0]
  402cc0:	eor	x0, x2, x0
  402cc4:	cmp	x0, #0x0
  402cc8:	b.eq	402cd0 <save_state_cancel+0x16c>  // b.none
  402ccc:	bl	401300 <__stack_chk_fail@plt>
  402cd0:	mov	w0, w1
  402cd4:	ldr	x19, [sp, #16]
  402cd8:	ldp	x29, x30, [sp], #80
  402cdc:	ret

0000000000402ce0 <save_state_write_one>:
  402ce0:	stp	x29, x30, [sp, #-80]!
  402ce4:	mov	x29, sp
  402ce8:	stp	x19, x20, [sp, #16]
  402cec:	str	x0, [sp, #40]
  402cf0:	ldr	x0, [sp, #40]
  402cf4:	ldr	x19, [x0, #24]
  402cf8:	ldr	x0, [sp, #40]
  402cfc:	ldr	w0, [x0, #32]
  402d00:	cmp	w0, #0x0
  402d04:	cset	w0, ne  // ne = any
  402d08:	and	w0, w0, #0xff
  402d0c:	bl	401680 <one_zero>
  402d10:	mov	w2, #0x83                  	// #131
  402d14:	mov	x1, x0
  402d18:	mov	x0, x19
  402d1c:	bl	4016b0 <write_string_file>
  402d20:	str	w0, [sp, #52]
  402d24:	ldr	w0, [sp, #52]
  402d28:	cmp	w0, #0x0
  402d2c:	b.ge	402dc4 <save_state_write_one+0xe4>  // b.tcont
  402d30:	mov	w0, #0x3                   	// #3
  402d34:	str	w0, [sp, #68]
  402d38:	ldr	w0, [sp, #52]
  402d3c:	str	w0, [sp, #72]
  402d40:	str	wzr, [sp, #76]
  402d44:	ldr	w0, [sp, #76]
  402d48:	bl	401400 <log_get_max_level_realm@plt>
  402d4c:	mov	w1, w0
  402d50:	ldr	w0, [sp, #68]
  402d54:	and	w0, w0, #0x7
  402d58:	cmp	w1, w0
  402d5c:	b.lt	402dac <save_state_write_one+0xcc>  // b.tstop
  402d60:	ldr	w0, [sp, #76]
  402d64:	lsl	w1, w0, #10
  402d68:	ldr	w0, [sp, #68]
  402d6c:	orr	w7, w1, w0
  402d70:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402d74:	add	x1, x0, #0xbab
  402d78:	ldr	x0, [sp, #40]
  402d7c:	ldr	x0, [x0, #24]
  402d80:	mov	x6, x0
  402d84:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402d88:	add	x5, x0, #0xce8
  402d8c:	adrp	x0, 404000 <_fini+0x4dc>
  402d90:	add	x4, x0, #0x298
  402d94:	mov	w3, #0xfb                  	// #251
  402d98:	mov	x2, x1
  402d9c:	ldr	w1, [sp, #72]
  402da0:	mov	w0, w7
  402da4:	bl	401350 <log_internal_realm@plt>
  402da8:	b	402e68 <save_state_write_one+0x188>
  402dac:	ldr	w0, [sp, #72]
  402db0:	cmp	w0, #0x0
  402db4:	cneg	w0, w0, lt  // lt = tstop
  402db8:	and	w0, w0, #0xff
  402dbc:	neg	w0, w0
  402dc0:	b	402e68 <save_state_write_one+0x188>
  402dc4:	mov	w0, #0x7                   	// #7
  402dc8:	str	w0, [sp, #56]
  402dcc:	str	wzr, [sp, #60]
  402dd0:	str	wzr, [sp, #64]
  402dd4:	ldr	w0, [sp, #64]
  402dd8:	bl	401400 <log_get_max_level_realm@plt>
  402ddc:	mov	w1, w0
  402de0:	ldr	w0, [sp, #56]
  402de4:	and	w0, w0, #0x7
  402de8:	cmp	w1, w0
  402dec:	b.lt	402e5c <save_state_write_one+0x17c>  // b.tstop
  402df0:	ldr	w0, [sp, #64]
  402df4:	lsl	w1, w0, #10
  402df8:	ldr	w0, [sp, #56]
  402dfc:	orr	w19, w1, w0
  402e00:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402e04:	add	x20, x0, #0xbab
  402e08:	ldr	x0, [sp, #40]
  402e0c:	ldr	w0, [x0, #32]
  402e10:	cmp	w0, #0x0
  402e14:	cset	w0, ne  // ne = any
  402e18:	and	w0, w0, #0xff
  402e1c:	bl	401680 <one_zero>
  402e20:	mov	x1, x0
  402e24:	ldr	x0, [sp, #40]
  402e28:	ldr	x0, [x0, #24]
  402e2c:	mov	x7, x0
  402e30:	mov	x6, x1
  402e34:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402e38:	add	x5, x0, #0xd10
  402e3c:	adrp	x0, 404000 <_fini+0x4dc>
  402e40:	add	x4, x0, #0x298
  402e44:	mov	w3, #0xfd                  	// #253
  402e48:	mov	x2, x20
  402e4c:	ldr	w1, [sp, #60]
  402e50:	mov	w0, w19
  402e54:	bl	401350 <log_internal_realm@plt>
  402e58:	b	402e64 <save_state_write_one+0x184>
  402e5c:	ldr	w0, [sp, #60]
  402e60:	cmp	w0, #0x0
  402e64:	mov	w0, #0x0                   	// #0
  402e68:	ldp	x19, x20, [sp, #16]
  402e6c:	ldp	x29, x30, [sp], #80
  402e70:	ret

0000000000402e74 <context_save_and_clear>:
  402e74:	stp	x29, x30, [sp, #-64]!
  402e78:	mov	x29, sp
  402e7c:	str	x0, [sp, #24]
  402e80:	ldr	x0, [sp, #24]
  402e84:	cmp	x0, #0x0
  402e88:	cset	w0, eq  // eq = none
  402e8c:	and	w0, w0, #0xff
  402e90:	and	x0, x0, #0xff
  402e94:	cmp	x0, #0x0
  402e98:	b.eq	402fe8 <context_save_and_clear+0x174>  // b.none
  402e9c:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402ea0:	add	x1, x0, #0xbab
  402ea4:	adrp	x0, 404000 <_fini+0x4dc>
  402ea8:	add	x4, x0, #0x2b0
  402eac:	mov	w3, #0x104                 	// #260
  402eb0:	mov	x2, x1
  402eb4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402eb8:	add	x1, x0, #0xcc8
  402ebc:	mov	w0, #0x0                   	// #0
  402ec0:	bl	401270 <log_assert_failed_realm@plt>
  402ec4:	ldr	x0, [sp, #24]
  402ec8:	str	x0, [sp, #48]
  402ecc:	ldr	x0, [sp, #40]
  402ed0:	str	x0, [sp, #56]
  402ed4:	ldr	x0, [sp, #56]
  402ed8:	cmp	x0, #0x0
  402edc:	cset	w0, eq  // eq = none
  402ee0:	and	w0, w0, #0xff
  402ee4:	and	x0, x0, #0xff
  402ee8:	cmp	x0, #0x0
  402eec:	b.eq	402f18 <context_save_and_clear+0xa4>  // b.none
  402ef0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402ef4:	add	x1, x0, #0xbab
  402ef8:	adrp	x0, 404000 <_fini+0x4dc>
  402efc:	add	x4, x0, #0x2b0
  402f00:	mov	w3, #0x107                 	// #263
  402f04:	mov	x2, x1
  402f08:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402f0c:	add	x1, x0, #0xe30
  402f10:	mov	w0, #0x0                   	// #0
  402f14:	bl	401270 <log_assert_failed_realm@plt>
  402f18:	ldr	x0, [sp, #56]
  402f1c:	ldr	x0, [x0]
  402f20:	cmp	x0, #0x0
  402f24:	b.eq	402f3c <context_save_and_clear+0xc8>  // b.none
  402f28:	ldr	x0, [sp, #56]
  402f2c:	ldr	x0, [x0]
  402f30:	ldr	x1, [sp, #56]
  402f34:	ldr	x1, [x1, #8]
  402f38:	str	x1, [x0, #8]
  402f3c:	ldr	x0, [sp, #56]
  402f40:	ldr	x0, [x0, #8]
  402f44:	cmp	x0, #0x0
  402f48:	b.eq	402f64 <context_save_and_clear+0xf0>  // b.none
  402f4c:	ldr	x0, [sp, #56]
  402f50:	ldr	x0, [x0, #8]
  402f54:	ldr	x1, [sp, #56]
  402f58:	ldr	x1, [x1]
  402f5c:	str	x1, [x0]
  402f60:	b	402fc0 <context_save_and_clear+0x14c>
  402f64:	ldr	x0, [sp, #48]
  402f68:	ldr	x0, [x0]
  402f6c:	ldr	x1, [sp, #56]
  402f70:	cmp	x1, x0
  402f74:	cset	w0, ne  // ne = any
  402f78:	and	w0, w0, #0xff
  402f7c:	and	x0, x0, #0xff
  402f80:	cmp	x0, #0x0
  402f84:	b.eq	402fb0 <context_save_and_clear+0x13c>  // b.none
  402f88:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402f8c:	add	x1, x0, #0xbab
  402f90:	adrp	x0, 404000 <_fini+0x4dc>
  402f94:	add	x4, x0, #0x2b0
  402f98:	mov	w3, #0x107                 	// #263
  402f9c:	mov	x2, x1
  402fa0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  402fa4:	add	x1, x0, #0xe38
  402fa8:	mov	w0, #0x0                   	// #0
  402fac:	bl	401270 <log_assert_failed_realm@plt>
  402fb0:	ldr	x0, [sp, #56]
  402fb4:	ldr	x1, [x0]
  402fb8:	ldr	x0, [sp, #48]
  402fbc:	str	x1, [x0]
  402fc0:	ldr	x0, [sp, #56]
  402fc4:	str	xzr, [x0, #8]
  402fc8:	ldr	x0, [sp, #56]
  402fcc:	ldr	x1, [x0, #8]
  402fd0:	ldr	x0, [sp, #56]
  402fd4:	str	x1, [x0]
  402fd8:	ldr	x0, [sp, #40]
  402fdc:	bl	402ce0 <save_state_write_one>
  402fe0:	ldr	x0, [sp, #40]
  402fe4:	bl	4017a0 <write_queue_item_free>
  402fe8:	ldr	x0, [sp, #24]
  402fec:	ldr	x0, [x0]
  402ff0:	str	x0, [sp, #40]
  402ff4:	ldr	x0, [sp, #40]
  402ff8:	cmp	x0, #0x0
  402ffc:	b.ne	402ec4 <context_save_and_clear+0x50>  // b.any
  403000:	ldr	x0, [sp, #24]
  403004:	ldr	w0, [x0, #8]
  403008:	bl	401250 <safe_close@plt>
  40300c:	nop
  403010:	ldp	x29, x30, [sp], #64
  403014:	ret

0000000000403018 <run>:
  403018:	sub	sp, sp, #0x130
  40301c:	stp	x29, x30, [sp, #16]
  403020:	add	x29, sp, #0x10
  403024:	str	x19, [sp, #32]
  403028:	str	w0, [sp, #60]
  40302c:	str	x1, [sp, #48]
  403030:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  403034:	add	x0, x0, #0xc60
  403038:	ldr	x1, [x0]
  40303c:	str	x1, [sp, #296]
  403040:	mov	x1, #0x0                   	// #0
  403044:	add	x0, sp, #0x200
  403048:	stp	xzr, xzr, [x0, #-232]
  40304c:	mov	w0, #0xffffffff            	// #-1
  403050:	str	w0, [sp, #288]
  403054:	strb	wzr, [sp, #67]
  403058:	ldr	w0, [sp, #60]
  40305c:	cmp	w0, #0x1
  403060:	b.le	4030f4 <run+0xdc>
  403064:	mov	w0, #0x3                   	// #3
  403068:	str	w0, [sp, #244]
  40306c:	mov	w0, #0x16                  	// #22
  403070:	movk	w0, #0x4000, lsl #16
  403074:	str	w0, [sp, #248]
  403078:	str	wzr, [sp, #252]
  40307c:	ldr	w0, [sp, #252]
  403080:	bl	401400 <log_get_max_level_realm@plt>
  403084:	mov	w1, w0
  403088:	ldr	w0, [sp, #244]
  40308c:	and	w0, w0, #0x7
  403090:	cmp	w1, w0
  403094:	b.lt	4030dc <run+0xc4>  // b.tstop
  403098:	ldr	w0, [sp, #252]
  40309c:	lsl	w1, w0, #10
  4030a0:	ldr	w0, [sp, #244]
  4030a4:	orr	w6, w1, w0
  4030a8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4030ac:	add	x1, x0, #0xbab
  4030b0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4030b4:	add	x5, x0, #0xe50
  4030b8:	adrp	x0, 404000 <_fini+0x4dc>
  4030bc:	add	x4, x0, #0x2c8
  4030c0:	mov	w3, #0x115                 	// #277
  4030c4:	mov	x2, x1
  4030c8:	ldr	w1, [sp, #248]
  4030cc:	mov	w0, w6
  4030d0:	bl	401350 <log_internal_realm@plt>
  4030d4:	mov	w19, w0
  4030d8:	b	403a10 <run+0x9f8>
  4030dc:	ldr	w0, [sp, #248]
  4030e0:	cmp	w0, #0x0
  4030e4:	cneg	w0, w0, lt  // lt = tstop
  4030e8:	and	w0, w0, #0xff
  4030ec:	neg	w19, w0
  4030f0:	b	403a10 <run+0x9f8>
  4030f4:	bl	401230 <log_setup_service@plt>
  4030f8:	mov	w0, #0x12                  	// #18
  4030fc:	bl	401290 <umask@plt>
  403100:	mov	w0, #0x0                   	// #0
  403104:	bl	401280 <sd_listen_fds@plt>
  403108:	str	w0, [sp, #68]
  40310c:	ldr	w0, [sp, #68]
  403110:	cmp	w0, #0x0
  403114:	b.ge	4031a4 <run+0x18c>  // b.tcont
  403118:	mov	w0, #0x3                   	// #3
  40311c:	str	w0, [sp, #232]
  403120:	ldr	w0, [sp, #68]
  403124:	str	w0, [sp, #236]
  403128:	str	wzr, [sp, #240]
  40312c:	ldr	w0, [sp, #240]
  403130:	bl	401400 <log_get_max_level_realm@plt>
  403134:	mov	w1, w0
  403138:	ldr	w0, [sp, #232]
  40313c:	and	w0, w0, #0x7
  403140:	cmp	w1, w0
  403144:	b.lt	40318c <run+0x174>  // b.tstop
  403148:	ldr	w0, [sp, #240]
  40314c:	lsl	w1, w0, #10
  403150:	ldr	w0, [sp, #232]
  403154:	orr	w6, w1, w0
  403158:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40315c:	add	x1, x0, #0xbab
  403160:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403164:	add	x5, x0, #0xe78
  403168:	adrp	x0, 404000 <_fini+0x4dc>
  40316c:	add	x4, x0, #0x2c8
  403170:	mov	w3, #0x11d                 	// #285
  403174:	mov	x2, x1
  403178:	ldr	w1, [sp, #236]
  40317c:	mov	w0, w6
  403180:	bl	401350 <log_internal_realm@plt>
  403184:	mov	w19, w0
  403188:	b	403a10 <run+0x9f8>
  40318c:	ldr	w0, [sp, #236]
  403190:	cmp	w0, #0x0
  403194:	cneg	w0, w0, lt  // lt = tstop
  403198:	and	w0, w0, #0xff
  40319c:	neg	w19, w0
  4031a0:	b	403a10 <run+0x9f8>
  4031a4:	ldr	w0, [sp, #68]
  4031a8:	cmp	w0, #0x1
  4031ac:	b.le	403240 <run+0x228>
  4031b0:	mov	w0, #0x3                   	// #3
  4031b4:	str	w0, [sp, #220]
  4031b8:	mov	w0, #0x16                  	// #22
  4031bc:	movk	w0, #0x4000, lsl #16
  4031c0:	str	w0, [sp, #224]
  4031c4:	str	wzr, [sp, #228]
  4031c8:	ldr	w0, [sp, #228]
  4031cc:	bl	401400 <log_get_max_level_realm@plt>
  4031d0:	mov	w1, w0
  4031d4:	ldr	w0, [sp, #220]
  4031d8:	and	w0, w0, #0x7
  4031dc:	cmp	w1, w0
  4031e0:	b.lt	403228 <run+0x210>  // b.tstop
  4031e4:	ldr	w0, [sp, #228]
  4031e8:	lsl	w1, w0, #10
  4031ec:	ldr	w0, [sp, #220]
  4031f0:	orr	w6, w1, w0
  4031f4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4031f8:	add	x1, x0, #0xbab
  4031fc:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403200:	add	x5, x0, #0xec0
  403204:	adrp	x0, 404000 <_fini+0x4dc>
  403208:	add	x4, x0, #0x2c8
  40320c:	mov	w3, #0x11f                 	// #287
  403210:	mov	x2, x1
  403214:	ldr	w1, [sp, #224]
  403218:	mov	w0, w6
  40321c:	bl	401350 <log_internal_realm@plt>
  403220:	mov	w19, w0
  403224:	b	403a10 <run+0x9f8>
  403228:	ldr	w0, [sp, #224]
  40322c:	cmp	w0, #0x0
  403230:	cneg	w0, w0, lt  // lt = tstop
  403234:	and	w0, w0, #0xff
  403238:	neg	w19, w0
  40323c:	b	403a10 <run+0x9f8>
  403240:	ldr	w0, [sp, #68]
  403244:	cmp	w0, #0x0
  403248:	b.ne	403394 <run+0x37c>  // b.any
  40324c:	mov	w1, #0x902                 	// #2306
  403250:	movk	w1, #0x8, lsl #16
  403254:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403258:	add	x0, x0, #0xee0
  40325c:	bl	4013d0 <open64@plt>
  403260:	str	w0, [sp, #288]
  403264:	ldr	w0, [sp, #288]
  403268:	cmp	w0, #0x0
  40326c:	b.ge	403444 <run+0x42c>  // b.tcont
  403270:	bl	4012c0 <__errno_location@plt>
  403274:	ldr	w0, [x0]
  403278:	cmp	w0, #0x2
  40327c:	b.ne	403304 <run+0x2ec>  // b.any
  403280:	mov	w0, #0x7                   	// #7
  403284:	str	w0, [sp, #100]
  403288:	bl	4012c0 <__errno_location@plt>
  40328c:	ldr	w0, [x0]
  403290:	str	w0, [sp, #104]
  403294:	str	wzr, [sp, #108]
  403298:	ldr	w0, [sp, #108]
  40329c:	bl	401400 <log_get_max_level_realm@plt>
  4032a0:	mov	w1, w0
  4032a4:	ldr	w0, [sp, #100]
  4032a8:	and	w0, w0, #0x7
  4032ac:	cmp	w1, w0
  4032b0:	b.lt	4032f4 <run+0x2dc>  // b.tstop
  4032b4:	ldr	w0, [sp, #108]
  4032b8:	lsl	w1, w0, #10
  4032bc:	ldr	w0, [sp, #100]
  4032c0:	orr	w6, w1, w0
  4032c4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4032c8:	add	x1, x0, #0xbab
  4032cc:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4032d0:	add	x5, x0, #0xef0
  4032d4:	adrp	x0, 404000 <_fini+0x4dc>
  4032d8:	add	x4, x0, #0x2c8
  4032dc:	mov	w3, #0x125                 	// #293
  4032e0:	mov	x2, x1
  4032e4:	ldr	w1, [sp, #104]
  4032e8:	mov	w0, w6
  4032ec:	bl	401350 <log_internal_realm@plt>
  4032f0:	b	4032fc <run+0x2e4>
  4032f4:	ldr	w0, [sp, #104]
  4032f8:	cmp	w0, #0x0
  4032fc:	mov	w19, #0x0                   	// #0
  403300:	b	403a10 <run+0x9f8>
  403304:	mov	w0, #0x3                   	// #3
  403308:	str	w0, [sp, #88]
  40330c:	bl	4012c0 <__errno_location@plt>
  403310:	ldr	w0, [x0]
  403314:	str	w0, [sp, #92]
  403318:	str	wzr, [sp, #96]
  40331c:	ldr	w0, [sp, #96]
  403320:	bl	401400 <log_get_max_level_realm@plt>
  403324:	mov	w1, w0
  403328:	ldr	w0, [sp, #88]
  40332c:	and	w0, w0, #0x7
  403330:	cmp	w1, w0
  403334:	b.lt	40337c <run+0x364>  // b.tstop
  403338:	ldr	w0, [sp, #96]
  40333c:	lsl	w1, w0, #10
  403340:	ldr	w0, [sp, #88]
  403344:	orr	w6, w1, w0
  403348:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40334c:	add	x1, x0, #0xbab
  403350:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403354:	add	x5, x0, #0xf30
  403358:	adrp	x0, 404000 <_fini+0x4dc>
  40335c:	add	x4, x0, #0x2c8
  403360:	mov	w3, #0x129                 	// #297
  403364:	mov	x2, x1
  403368:	ldr	w1, [sp, #92]
  40336c:	mov	w0, w6
  403370:	bl	401350 <log_internal_realm@plt>
  403374:	mov	w19, w0
  403378:	b	403a10 <run+0x9f8>
  40337c:	ldr	w0, [sp, #92]
  403380:	cmp	w0, #0x0
  403384:	cneg	w0, w0, lt  // lt = tstop
  403388:	and	w0, w0, #0xff
  40338c:	neg	w19, w0
  403390:	b	403a10 <run+0x9f8>
  403394:	mov	w0, #0x3                   	// #3
  403398:	str	w0, [sp, #288]
  40339c:	ldr	w0, [sp, #288]
  4033a0:	mov	w1, #0x1                   	// #1
  4033a4:	bl	401210 <fd_nonblock@plt>
  4033a8:	str	w0, [sp, #72]
  4033ac:	ldr	w0, [sp, #72]
  4033b0:	cmp	w0, #0x0
  4033b4:	b.ge	403444 <run+0x42c>  // b.tcont
  4033b8:	mov	w0, #0x3                   	// #3
  4033bc:	str	w0, [sp, #76]
  4033c0:	ldr	w0, [sp, #72]
  4033c4:	str	w0, [sp, #80]
  4033c8:	str	wzr, [sp, #84]
  4033cc:	ldr	w0, [sp, #84]
  4033d0:	bl	401400 <log_get_max_level_realm@plt>
  4033d4:	mov	w1, w0
  4033d8:	ldr	w0, [sp, #76]
  4033dc:	and	w0, w0, #0x7
  4033e0:	cmp	w1, w0
  4033e4:	b.lt	40342c <run+0x414>  // b.tstop
  4033e8:	ldr	w0, [sp, #84]
  4033ec:	lsl	w1, w0, #10
  4033f0:	ldr	w0, [sp, #76]
  4033f4:	orr	w6, w1, w0
  4033f8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4033fc:	add	x1, x0, #0xbab
  403400:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403404:	add	x5, x0, #0xf50
  403408:	adrp	x0, 404000 <_fini+0x4dc>
  40340c:	add	x4, x0, #0x2c8
  403410:	mov	w3, #0x130                 	// #304
  403414:	mov	x2, x1
  403418:	ldr	w1, [sp, #80]
  40341c:	mov	w0, w6
  403420:	bl	401350 <log_internal_realm@plt>
  403424:	mov	w19, w0
  403428:	b	403a10 <run+0x9f8>
  40342c:	ldr	w0, [sp, #80]
  403430:	cmp	w0, #0x0
  403434:	cneg	w0, w0, lt  // lt = tstop
  403438:	and	w0, w0, #0xff
  40343c:	neg	w19, w0
  403440:	b	403a10 <run+0x9f8>
  403444:	ldr	w0, [sp, #288]
  403448:	add	x1, sp, #0x100
  40344c:	mov	x2, #0x8                   	// #8
  403450:	bl	4012d0 <read@plt>
  403454:	str	x0, [sp, #264]
  403458:	ldr	x0, [sp, #264]
  40345c:	cmp	x0, #0x0
  403460:	b.ge	403660 <run+0x648>  // b.tcont
  403464:	bl	4012c0 <__errno_location@plt>
  403468:	ldr	w0, [x0]
  40346c:	cmp	w0, #0xb
  403470:	b.ne	4035e4 <run+0x5cc>  // b.any
  403474:	ldrb	w0, [sp, #67]
  403478:	eor	w0, w0, #0x1
  40347c:	and	w0, w0, #0xff
  403480:	cmp	w0, #0x0
  403484:	b.eq	4034a0 <run+0x488>  // b.none
  403488:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40348c:	add	x1, x0, #0xf88
  403490:	mov	w0, #0x0                   	// #0
  403494:	bl	401340 <sd_notify@plt>
  403498:	mov	w0, #0x1                   	// #1
  40349c:	strb	w0, [sp, #67]
  4034a0:	ldr	w0, [sp, #288]
  4034a4:	mov	x2, #0x4b40                	// #19264
  4034a8:	movk	x2, #0x4c, lsl #16
  4034ac:	mov	w1, #0x1                   	// #1
  4034b0:	bl	4013f0 <fd_wait_for_event@plt>
  4034b4:	str	w0, [sp, #72]
  4034b8:	ldr	w0, [sp, #72]
  4034bc:	cmn	w0, #0x4
  4034c0:	b.eq	403a00 <run+0x9e8>  // b.none
  4034c4:	ldr	w0, [sp, #72]
  4034c8:	cmp	w0, #0x0
  4034cc:	b.ge	40355c <run+0x544>  // b.tcont
  4034d0:	mov	w0, #0x3                   	// #3
  4034d4:	str	w0, [sp, #136]
  4034d8:	ldr	w0, [sp, #72]
  4034dc:	str	w0, [sp, #140]
  4034e0:	str	wzr, [sp, #144]
  4034e4:	ldr	w0, [sp, #144]
  4034e8:	bl	401400 <log_get_max_level_realm@plt>
  4034ec:	mov	w1, w0
  4034f0:	ldr	w0, [sp, #136]
  4034f4:	and	w0, w0, #0x7
  4034f8:	cmp	w1, w0
  4034fc:	b.lt	403544 <run+0x52c>  // b.tstop
  403500:	ldr	w0, [sp, #144]
  403504:	lsl	w1, w0, #10
  403508:	ldr	w0, [sp, #136]
  40350c:	orr	w6, w1, w0
  403510:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403514:	add	x1, x0, #0xbab
  403518:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40351c:	add	x5, x0, #0xf90
  403520:	adrp	x0, 404000 <_fini+0x4dc>
  403524:	add	x4, x0, #0x2c8
  403528:	mov	w3, #0x14b                 	// #331
  40352c:	mov	x2, x1
  403530:	ldr	w1, [sp, #140]
  403534:	mov	w0, w6
  403538:	bl	401350 <log_internal_realm@plt>
  40353c:	mov	w19, w0
  403540:	b	403a10 <run+0x9f8>
  403544:	ldr	w0, [sp, #140]
  403548:	cmp	w0, #0x0
  40354c:	cneg	w0, w0, lt  // lt = tstop
  403550:	and	w0, w0, #0xff
  403554:	neg	w19, w0
  403558:	b	403a10 <run+0x9f8>
  40355c:	ldr	w0, [sp, #72]
  403560:	cmp	w0, #0x0
  403564:	b.gt	403a08 <run+0x9f0>
  403568:	mov	w0, #0x7                   	// #7
  40356c:	str	w0, [sp, #124]
  403570:	str	wzr, [sp, #128]
  403574:	str	wzr, [sp, #132]
  403578:	ldr	w0, [sp, #132]
  40357c:	bl	401400 <log_get_max_level_realm@plt>
  403580:	mov	w1, w0
  403584:	ldr	w0, [sp, #124]
  403588:	and	w0, w0, #0x7
  40358c:	cmp	w1, w0
  403590:	b.lt	4035d4 <run+0x5bc>  // b.tstop
  403594:	ldr	w0, [sp, #132]
  403598:	lsl	w1, w0, #10
  40359c:	ldr	w0, [sp, #124]
  4035a0:	orr	w6, w1, w0
  4035a4:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4035a8:	add	x1, x0, #0xbab
  4035ac:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4035b0:	add	x5, x0, #0xfb0
  4035b4:	adrp	x0, 404000 <_fini+0x4dc>
  4035b8:	add	x4, x0, #0x2c8
  4035bc:	mov	w3, #0x14f                 	// #335
  4035c0:	mov	x2, x1
  4035c4:	ldr	w1, [sp, #128]
  4035c8:	mov	w0, w6
  4035cc:	bl	401350 <log_internal_realm@plt>
  4035d0:	b	4035dc <run+0x5c4>
  4035d4:	ldr	w0, [sp, #128]
  4035d8:	cmp	w0, #0x0
  4035dc:	mov	w19, #0x0                   	// #0
  4035e0:	b	403a10 <run+0x9f8>
  4035e4:	mov	w0, #0x3                   	// #3
  4035e8:	str	w0, [sp, #112]
  4035ec:	bl	4012c0 <__errno_location@plt>
  4035f0:	ldr	w0, [x0]
  4035f4:	str	w0, [sp, #116]
  4035f8:	str	wzr, [sp, #120]
  4035fc:	ldr	w0, [sp, #120]
  403600:	bl	401400 <log_get_max_level_realm@plt>
  403604:	mov	w1, w0
  403608:	ldr	w0, [sp, #112]
  40360c:	and	w0, w0, #0x7
  403610:	cmp	w1, w0
  403614:	b.lt	403658 <run+0x640>  // b.tstop
  403618:	ldr	w0, [sp, #120]
  40361c:	lsl	w1, w0, #10
  403620:	ldr	w0, [sp, #112]
  403624:	orr	w6, w1, w0
  403628:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40362c:	add	x1, x0, #0xbab
  403630:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403634:	add	x5, x0, #0xfd8
  403638:	adrp	x0, 404000 <_fini+0x4dc>
  40363c:	add	x4, x0, #0x2c8
  403640:	mov	w3, #0x153                 	// #339
  403644:	mov	x2, x1
  403648:	ldr	w1, [sp, #116]
  40364c:	mov	w0, w6
  403650:	bl	401350 <log_internal_realm@plt>
  403654:	b	403660 <run+0x648>
  403658:	ldr	w0, [sp, #116]
  40365c:	cmp	w0, #0x0
  403660:	ldr	x0, [sp, #264]
  403664:	cmp	x0, #0x8
  403668:	b.eq	4036fc <run+0x6e4>  // b.none
  40366c:	mov	w0, #0x3                   	// #3
  403670:	str	w0, [sp, #208]
  403674:	mov	w0, #0x5                   	// #5
  403678:	movk	w0, #0x4000, lsl #16
  40367c:	str	w0, [sp, #212]
  403680:	str	wzr, [sp, #216]
  403684:	ldr	w0, [sp, #216]
  403688:	bl	401400 <log_get_max_level_realm@plt>
  40368c:	mov	w1, w0
  403690:	ldr	w0, [sp, #208]
  403694:	and	w0, w0, #0x7
  403698:	cmp	w1, w0
  40369c:	b.lt	4036e4 <run+0x6cc>  // b.tstop
  4036a0:	ldr	w0, [sp, #216]
  4036a4:	lsl	w1, w0, #10
  4036a8:	ldr	w0, [sp, #208]
  4036ac:	orr	w6, w1, w0
  4036b0:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4036b4:	add	x1, x0, #0xbab
  4036b8:	adrp	x0, 404000 <_fini+0x4dc>
  4036bc:	add	x5, x0, #0x0
  4036c0:	adrp	x0, 404000 <_fini+0x4dc>
  4036c4:	add	x4, x0, #0x2c8
  4036c8:	mov	w3, #0x157                 	// #343
  4036cc:	mov	x2, x1
  4036d0:	ldr	w1, [sp, #212]
  4036d4:	mov	w0, w6
  4036d8:	bl	401350 <log_internal_realm@plt>
  4036dc:	mov	w19, w0
  4036e0:	b	403a10 <run+0x9f8>
  4036e4:	ldr	w0, [sp, #212]
  4036e8:	cmp	w0, #0x0
  4036ec:	cneg	w0, w0, lt  // lt = tstop
  4036f0:	and	w0, w0, #0xff
  4036f4:	neg	w19, w0
  4036f8:	b	403a10 <run+0x9f8>
  4036fc:	ldrb	w0, [sp, #260]
  403700:	bl	4017dc <rfkill_type_to_string>
  403704:	str	x0, [sp, #272]
  403708:	ldr	x0, [sp, #272]
  40370c:	cmp	x0, #0x0
  403710:	b.ne	403794 <run+0x77c>  // b.any
  403714:	mov	w0, #0x7                   	// #7
  403718:	str	w0, [sp, #196]
  40371c:	str	wzr, [sp, #200]
  403720:	str	wzr, [sp, #204]
  403724:	ldr	w0, [sp, #204]
  403728:	bl	401400 <log_get_max_level_realm@plt>
  40372c:	mov	w1, w0
  403730:	ldr	w0, [sp, #196]
  403734:	and	w0, w0, #0x7
  403738:	cmp	w1, w0
  40373c:	b.lt	403788 <run+0x770>  // b.tstop
  403740:	ldr	w0, [sp, #204]
  403744:	lsl	w1, w0, #10
  403748:	ldr	w0, [sp, #196]
  40374c:	orr	w7, w1, w0
  403750:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  403754:	add	x1, x0, #0xbab
  403758:	ldrb	w0, [sp, #260]
  40375c:	mov	w6, w0
  403760:	adrp	x0, 404000 <_fini+0x4dc>
  403764:	add	x5, x0, #0x28
  403768:	adrp	x0, 404000 <_fini+0x4dc>
  40376c:	add	x4, x0, #0x2c8
  403770:	mov	w3, #0x15b                 	// #347
  403774:	mov	x2, x1
  403778:	ldr	w1, [sp, #200]
  40377c:	mov	w0, w7
  403780:	bl	401350 <log_internal_realm@plt>
  403784:	b	403a0c <run+0x9f4>
  403788:	ldr	w0, [sp, #200]
  40378c:	cmp	w0, #0x0
  403790:	b	403a0c <run+0x9f4>
  403794:	ldrb	w0, [sp, #261]
  403798:	cmp	w0, #0x2
  40379c:	b.eq	4038dc <run+0x8c4>  // b.none
  4037a0:	cmp	w0, #0x2
  4037a4:	b.gt	40396c <run+0x954>
  4037a8:	cmp	w0, #0x0
  4037ac:	b.eq	4037bc <run+0x7a4>  // b.none
  4037b0:	cmp	w0, #0x1
  4037b4:	b.eq	40384c <run+0x834>  // b.none
  4037b8:	b	40396c <run+0x954>
  4037bc:	mov	w0, #0x7                   	// #7
  4037c0:	str	w0, [sp, #172]
  4037c4:	str	wzr, [sp, #176]
  4037c8:	str	wzr, [sp, #180]
  4037cc:	ldr	w0, [sp, #180]
  4037d0:	bl	401400 <log_get_max_level_realm@plt>
  4037d4:	mov	w1, w0
  4037d8:	ldr	w0, [sp, #172]
  4037dc:	and	w0, w0, #0x7
  4037e0:	cmp	w1, w0
  4037e4:	b.lt	403834 <run+0x81c>  // b.tstop
  4037e8:	ldr	w0, [sp, #180]
  4037ec:	lsl	w1, w0, #10
  4037f0:	ldr	w0, [sp, #172]
  4037f4:	orr	w8, w1, w0
  4037f8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4037fc:	add	x1, x0, #0xbab
  403800:	ldr	w0, [sp, #256]
  403804:	ldr	x7, [sp, #272]
  403808:	mov	w6, w0
  40380c:	adrp	x0, 404000 <_fini+0x4dc>
  403810:	add	x5, x0, #0x68
  403814:	adrp	x0, 404000 <_fini+0x4dc>
  403818:	add	x4, x0, #0x2c8
  40381c:	mov	w3, #0x162                 	// #354
  403820:	mov	x2, x1
  403824:	ldr	w1, [sp, #176]
  403828:	mov	w0, w8
  40382c:	bl	401350 <log_internal_realm@plt>
  403830:	b	40383c <run+0x824>
  403834:	ldr	w0, [sp, #176]
  403838:	cmp	w0, #0x0
  40383c:	add	x1, sp, #0x100
  403840:	add	x0, sp, #0x118
  403844:	bl	401f0c <load_state>
  403848:	b	403a0c <run+0x9f4>
  40384c:	mov	w0, #0x7                   	// #7
  403850:	str	w0, [sp, #160]
  403854:	str	wzr, [sp, #164]
  403858:	str	wzr, [sp, #168]
  40385c:	ldr	w0, [sp, #168]
  403860:	bl	401400 <log_get_max_level_realm@plt>
  403864:	mov	w1, w0
  403868:	ldr	w0, [sp, #160]
  40386c:	and	w0, w0, #0x7
  403870:	cmp	w1, w0
  403874:	b.lt	4038c4 <run+0x8ac>  // b.tstop
  403878:	ldr	w0, [sp, #168]
  40387c:	lsl	w1, w0, #10
  403880:	ldr	w0, [sp, #160]
  403884:	orr	w8, w1, w0
  403888:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40388c:	add	x1, x0, #0xbab
  403890:	ldr	w0, [sp, #256]
  403894:	ldr	x7, [sp, #272]
  403898:	mov	w6, w0
  40389c:	adrp	x0, 404000 <_fini+0x4dc>
  4038a0:	add	x5, x0, #0xa8
  4038a4:	adrp	x0, 404000 <_fini+0x4dc>
  4038a8:	add	x4, x0, #0x2c8
  4038ac:	mov	w3, #0x167                 	// #359
  4038b0:	mov	x2, x1
  4038b4:	ldr	w1, [sp, #164]
  4038b8:	mov	w0, w8
  4038bc:	bl	401350 <log_internal_realm@plt>
  4038c0:	b	4038cc <run+0x8b4>
  4038c4:	ldr	w0, [sp, #164]
  4038c8:	cmp	w0, #0x0
  4038cc:	add	x1, sp, #0x100
  4038d0:	add	x0, sp, #0x118
  4038d4:	bl	402b64 <save_state_cancel>
  4038d8:	b	403a0c <run+0x9f4>
  4038dc:	mov	w0, #0x7                   	// #7
  4038e0:	str	w0, [sp, #148]
  4038e4:	str	wzr, [sp, #152]
  4038e8:	str	wzr, [sp, #156]
  4038ec:	ldr	w0, [sp, #156]
  4038f0:	bl	401400 <log_get_max_level_realm@plt>
  4038f4:	mov	w1, w0
  4038f8:	ldr	w0, [sp, #148]
  4038fc:	and	w0, w0, #0x7
  403900:	cmp	w1, w0
  403904:	b.lt	403954 <run+0x93c>  // b.tstop
  403908:	ldr	w0, [sp, #156]
  40390c:	lsl	w1, w0, #10
  403910:	ldr	w0, [sp, #148]
  403914:	orr	w8, w1, w0
  403918:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  40391c:	add	x1, x0, #0xbab
  403920:	ldr	w0, [sp, #256]
  403924:	ldr	x7, [sp, #272]
  403928:	mov	w6, w0
  40392c:	adrp	x0, 404000 <_fini+0x4dc>
  403930:	add	x5, x0, #0xe8
  403934:	adrp	x0, 404000 <_fini+0x4dc>
  403938:	add	x4, x0, #0x2c8
  40393c:	mov	w3, #0x16c                 	// #364
  403940:	mov	x2, x1
  403944:	ldr	w1, [sp, #152]
  403948:	mov	w0, w8
  40394c:	bl	401350 <log_internal_realm@plt>
  403950:	b	40395c <run+0x944>
  403954:	ldr	w0, [sp, #152]
  403958:	cmp	w0, #0x0
  40395c:	add	x1, sp, #0x100
  403960:	add	x0, sp, #0x118
  403964:	bl	402840 <save_state_queue>
  403968:	b	403a0c <run+0x9f4>
  40396c:	mov	w0, #0x7                   	// #7
  403970:	str	w0, [sp, #184]
  403974:	str	wzr, [sp, #188]
  403978:	str	wzr, [sp, #192]
  40397c:	ldr	w0, [sp, #192]
  403980:	bl	401400 <log_get_max_level_realm@plt>
  403984:	mov	w1, w0
  403988:	ldr	w0, [sp, #184]
  40398c:	and	w0, w0, #0x7
  403990:	cmp	w1, w0
  403994:	b.lt	4039f4 <run+0x9dc>  // b.tstop
  403998:	ldr	w0, [sp, #192]
  40399c:	lsl	w1, w0, #10
  4039a0:	ldr	w0, [sp, #184]
  4039a4:	orr	w8, w1, w0
  4039a8:	adrp	x0, 403000 <context_save_and_clear+0x18c>
  4039ac:	add	x1, x0, #0xbab
  4039b0:	ldrb	w0, [sp, #261]
  4039b4:	mov	w3, w0
  4039b8:	ldr	w2, [sp, #256]
  4039bc:	ldr	x0, [sp, #272]
  4039c0:	str	x0, [sp]
  4039c4:	mov	w7, w2
  4039c8:	mov	w6, w3
  4039cc:	adrp	x0, 404000 <_fini+0x4dc>
  4039d0:	add	x5, x0, #0x128
  4039d4:	adrp	x0, 404000 <_fini+0x4dc>
  4039d8:	add	x4, x0, #0x2c8
  4039dc:	mov	w3, #0x171                 	// #369
  4039e0:	mov	x2, x1
  4039e4:	ldr	w1, [sp, #188]
  4039e8:	mov	w0, w8
  4039ec:	bl	401350 <log_internal_realm@plt>
  4039f0:	b	403a0c <run+0x9f4>
  4039f4:	ldr	w0, [sp, #188]
  4039f8:	cmp	w0, #0x0
  4039fc:	b	403a0c <run+0x9f4>
  403a00:	nop
  403a04:	b	403444 <run+0x42c>
  403a08:	nop
  403a0c:	b	403444 <run+0x42c>
  403a10:	add	x0, sp, #0x118
  403a14:	bl	402e74 <context_save_and_clear>
  403a18:	mov	w1, w19
  403a1c:	adrp	x0, 414000 <__FRAME_END__+0xf8e0>
  403a20:	add	x0, x0, #0xc60
  403a24:	ldr	x2, [sp, #296]
  403a28:	ldr	x0, [x0]
  403a2c:	eor	x0, x2, x0
  403a30:	cmp	x0, #0x0
  403a34:	b.eq	403a3c <run+0xa24>  // b.none
  403a38:	bl	401300 <__stack_chk_fail@plt>
  403a3c:	mov	w0, w1
  403a40:	ldr	x19, [sp, #32]
  403a44:	ldp	x29, x30, [sp, #16]
  403a48:	add	sp, sp, #0x130
  403a4c:	ret

0000000000403a50 <main>:
  403a50:	stp	x29, x30, [sp, #-48]!
  403a54:	mov	x29, sp
  403a58:	str	w0, [sp, #28]
  403a5c:	str	x1, [sp, #16]
  403a60:	ldr	x1, [sp, #16]
  403a64:	ldr	w0, [sp, #28]
  403a68:	bl	4016e0 <save_argc_argv>
  403a6c:	ldr	x1, [sp, #16]
  403a70:	ldr	w0, [sp, #28]
  403a74:	bl	403018 <run>
  403a78:	str	w0, [sp, #44]
  403a7c:	bl	401320 <ask_password_agent_close@plt>
  403a80:	bl	4011f0 <polkit_agent_close@plt>
  403a84:	bl	401330 <pager_close@plt>
  403a88:	bl	4013c0 <mac_selinux_finish@plt>
  403a8c:	bl	401718 <static_destruct>
  403a90:	ldr	w0, [sp, #44]
  403a94:	lsr	w0, w0, #31
  403a98:	ldp	x29, x30, [sp], #48
  403a9c:	ret

0000000000403aa0 <__libc_csu_init>:
  403aa0:	stp	x29, x30, [sp, #-64]!
  403aa4:	mov	x29, sp
  403aa8:	stp	x19, x20, [sp, #16]
  403aac:	adrp	x20, 414000 <__FRAME_END__+0xf8e0>
  403ab0:	add	x20, x20, #0xc58
  403ab4:	stp	x21, x22, [sp, #32]
  403ab8:	adrp	x21, 414000 <__FRAME_END__+0xf8e0>
  403abc:	add	x21, x21, #0xc50
  403ac0:	sub	x20, x20, x21
  403ac4:	mov	w22, w0
  403ac8:	stp	x23, x24, [sp, #48]
  403acc:	mov	x23, x1
  403ad0:	mov	x24, x2
  403ad4:	bl	401150 <_init>
  403ad8:	cmp	xzr, x20, asr #3
  403adc:	b.eq	403b08 <__libc_csu_init+0x68>  // b.none
  403ae0:	asr	x20, x20, #3
  403ae4:	mov	x19, #0x0                   	// #0
  403ae8:	ldr	x3, [x21, x19, lsl #3]
  403aec:	mov	x2, x24
  403af0:	add	x19, x19, #0x1
  403af4:	mov	x1, x23
  403af8:	mov	w0, w22
  403afc:	blr	x3
  403b00:	cmp	x20, x19
  403b04:	b.ne	403ae8 <__libc_csu_init+0x48>  // b.any
  403b08:	ldp	x19, x20, [sp, #16]
  403b0c:	ldp	x21, x22, [sp, #32]
  403b10:	ldp	x23, x24, [sp, #48]
  403b14:	ldp	x29, x30, [sp], #64
  403b18:	ret
  403b1c:	nop

0000000000403b20 <__libc_csu_fini>:
  403b20:	ret

Disassembly of section .fini:

0000000000403b24 <_fini>:
  403b24:	stp	x29, x30, [sp, #-16]!
  403b28:	mov	x29, sp
  403b2c:	ldp	x29, x30, [sp], #16
  403b30:	ret
