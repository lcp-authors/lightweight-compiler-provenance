
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_hashlib.cpython-38-aarch64-linux-gnu.so_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000024e0 <.init>:
    24e0:	stp	x29, x30, [sp, #-16]!
    24e4:	mov	x29, sp
    24e8:	bl	29d0 <PyThread_acquire_lock@plt+0x10>
    24ec:	ldp	x29, x30, [sp], #16
    24f0:	ret

Disassembly of section .plt:

0000000000002500 <PyModule_AddObject@plt-0x20>:
    2500:	stp	x16, x30, [sp, #-16]!
    2504:	adrp	x16, 16000 <PyInit__hashlib@@Base+0x11368>
    2508:	ldr	x17, [x16, #4088]
    250c:	add	x16, x16, #0xff8
    2510:	br	x17
    2514:	nop
    2518:	nop
    251c:	nop

0000000000002520 <PyModule_AddObject@plt>:
    2520:	adrp	x16, 17000 <PyModule_AddObject>
    2524:	ldr	x17, [x16]
    2528:	add	x16, x16, #0x0
    252c:	br	x17

0000000000002530 <EVP_MD_type@plt>:
    2530:	adrp	x16, 17000 <PyModule_AddObject>
    2534:	ldr	x17, [x16, #8]
    2538:	add	x16, x16, #0x8
    253c:	br	x17

0000000000002540 <PKCS5_PBKDF2_HMAC@plt>:
    2540:	adrp	x16, 17000 <PyModule_AddObject>
    2544:	ldr	x17, [x16, #16]
    2548:	add	x16, x16, #0x10
    254c:	br	x17

0000000000002550 <EVP_DigestInit_ex@plt>:
    2550:	adrp	x16, 17000 <PyModule_AddObject>
    2554:	ldr	x17, [x16, #24]
    2558:	add	x16, x16, #0x18
    255c:	br	x17

0000000000002560 <ERR_reason_error_string@plt>:
    2560:	adrp	x16, 17000 <PyModule_AddObject>
    2564:	ldr	x17, [x16, #32]
    2568:	add	x16, x16, #0x20
    256c:	br	x17

0000000000002570 <EVP_sha512_224@plt>:
    2570:	adrp	x16, 17000 <PyModule_AddObject>
    2574:	ldr	x17, [x16, #40]
    2578:	add	x16, x16, #0x28
    257c:	br	x17

0000000000002580 <EVP_blake2s256@plt>:
    2580:	adrp	x16, 17000 <PyModule_AddObject>
    2584:	ldr	x17, [x16, #48]
    2588:	add	x16, x16, #0x30
    258c:	br	x17

0000000000002590 <EVP_MD_CTX_md@plt>:
    2590:	adrp	x16, 17000 <PyModule_AddObject>
    2594:	ldr	x17, [x16, #56]
    2598:	add	x16, x16, #0x38
    259c:	br	x17

00000000000025a0 <PyType_Ready@plt>:
    25a0:	adrp	x16, 17000 <PyModule_AddObject>
    25a4:	ldr	x17, [x16, #64]
    25a8:	add	x16, x16, #0x40
    25ac:	br	x17

00000000000025b0 <EVP_shake256@plt>:
    25b0:	adrp	x16, 17000 <PyModule_AddObject>
    25b4:	ldr	x17, [x16, #72]
    25b8:	add	x16, x16, #0x48
    25bc:	br	x17

00000000000025c0 <EVP_sha384@plt>:
    25c0:	adrp	x16, 17000 <PyModule_AddObject>
    25c4:	ldr	x17, [x16, #80]
    25c8:	add	x16, x16, #0x50
    25cc:	br	x17

00000000000025d0 <__gmon_start__@plt>:
    25d0:	adrp	x16, 17000 <PyModule_AddObject>
    25d4:	ldr	x17, [x16, #88]
    25d8:	add	x16, x16, #0x58
    25dc:	br	x17

00000000000025e0 <ERR_func_error_string@plt>:
    25e0:	adrp	x16, 17000 <PyModule_AddObject>
    25e4:	ldr	x17, [x16, #96]
    25e8:	add	x16, x16, #0x60
    25ec:	br	x17

00000000000025f0 <EVP_sha3_512@plt>:
    25f0:	adrp	x16, 17000 <PyModule_AddObject>
    25f4:	ldr	x17, [x16, #104]
    25f8:	add	x16, x16, #0x68
    25fc:	br	x17

0000000000002600 <OBJ_nid2ln@plt>:
    2600:	adrp	x16, 17000 <PyModule_AddObject>
    2604:	ldr	x17, [x16, #112]
    2608:	add	x16, x16, #0x70
    260c:	br	x17

0000000000002610 <ERR_clear_error@plt>:
    2610:	adrp	x16, 17000 <PyModule_AddObject>
    2614:	ldr	x17, [x16, #120]
    2618:	add	x16, x16, #0x78
    261c:	br	x17

0000000000002620 <PyUnicode_FromString@plt>:
    2620:	adrp	x16, 17000 <PyModule_AddObject>
    2624:	ldr	x17, [x16, #128]
    2628:	add	x16, x16, #0x80
    262c:	br	x17

0000000000002630 <PyErr_NoMemory@plt>:
    2630:	adrp	x16, 17000 <PyModule_AddObject>
    2634:	ldr	x17, [x16, #136]
    2638:	add	x16, x16, #0x88
    263c:	br	x17

0000000000002640 <EVP_get_digestbyname@plt>:
    2640:	adrp	x16, 17000 <PyModule_AddObject>
    2644:	ldr	x17, [x16, #144]
    2648:	add	x16, x16, #0x90
    264c:	br	x17

0000000000002650 <PyThread_free_lock@plt>:
    2650:	adrp	x16, 17000 <PyModule_AddObject>
    2654:	ldr	x17, [x16, #152]
    2658:	add	x16, x16, #0x98
    265c:	br	x17

0000000000002660 <_PyObject_New@plt>:
    2660:	adrp	x16, 17000 <PyModule_AddObject>
    2664:	ldr	x17, [x16, #160]
    2668:	add	x16, x16, #0xa0
    266c:	br	x17

0000000000002670 <PyUnicode_AsUTF8AndSize@plt>:
    2670:	adrp	x16, 17000 <PyModule_AddObject>
    2674:	ldr	x17, [x16, #168]
    2678:	add	x16, x16, #0xa8
    267c:	br	x17

0000000000002680 <EVP_shake128@plt>:
    2680:	adrp	x16, 17000 <PyModule_AddObject>
    2684:	ldr	x17, [x16, #176]
    2688:	add	x16, x16, #0xb0
    268c:	br	x17

0000000000002690 <EVP_md5@plt>:
    2690:	adrp	x16, 17000 <PyModule_AddObject>
    2694:	ldr	x17, [x16, #184]
    2698:	add	x16, x16, #0xb8
    269c:	br	x17

00000000000026a0 <PyUnicode_FromFormat@plt>:
    26a0:	adrp	x16, 17000 <PyModule_AddObject>
    26a4:	ldr	x17, [x16, #192]
    26a8:	add	x16, x16, #0xc0
    26ac:	br	x17

00000000000026b0 <PyThread_allocate_lock@plt>:
    26b0:	adrp	x16, 17000 <PyModule_AddObject>
    26b4:	ldr	x17, [x16, #200]
    26b8:	add	x16, x16, #0xc8
    26bc:	br	x17

00000000000026c0 <EVP_MD_size@plt>:
    26c0:	adrp	x16, 17000 <PyModule_AddObject>
    26c4:	ldr	x17, [x16, #208]
    26c8:	add	x16, x16, #0xd0
    26cc:	br	x17

00000000000026d0 <PyLong_AsLong@plt>:
    26d0:	adrp	x16, 17000 <PyModule_AddObject>
    26d4:	ldr	x17, [x16, #216]
    26d8:	add	x16, x16, #0xd8
    26dc:	br	x17

00000000000026e0 <__cxa_finalize@plt>:
    26e0:	adrp	x16, 17000 <PyModule_AddObject>
    26e4:	ldr	x17, [x16, #224]
    26e8:	add	x16, x16, #0xe0
    26ec:	br	x17

00000000000026f0 <PyErr_Format@plt>:
    26f0:	adrp	x16, 17000 <PyModule_AddObject>
    26f4:	ldr	x17, [x16, #232]
    26f8:	add	x16, x16, #0xe8
    26fc:	br	x17

0000000000002700 <EVP_DigestUpdate@plt>:
    2700:	adrp	x16, 17000 <PyModule_AddObject>
    2704:	ldr	x17, [x16, #240]
    2708:	add	x16, x16, #0xf0
    270c:	br	x17

0000000000002710 <EVP_MD_do_all@plt>:
    2710:	adrp	x16, 17000 <PyModule_AddObject>
    2714:	ldr	x17, [x16, #248]
    2718:	add	x16, x16, #0xf8
    271c:	br	x17

0000000000002720 <PyErr_Occurred@plt>:
    2720:	adrp	x16, 17000 <PyModule_AddObject>
    2724:	ldr	x17, [x16, #256]
    2728:	add	x16, x16, #0x100
    272c:	br	x17

0000000000002730 <EVP_MD_block_size@plt>:
    2730:	adrp	x16, 17000 <PyModule_AddObject>
    2734:	ldr	x17, [x16, #264]
    2738:	add	x16, x16, #0x108
    273c:	br	x17

0000000000002740 <PyThread_release_lock@plt>:
    2740:	adrp	x16, 17000 <PyModule_AddObject>
    2744:	ldr	x17, [x16, #272]
    2748:	add	x16, x16, #0x110
    274c:	br	x17

0000000000002750 <PyObject_GetBuffer@plt>:
    2750:	adrp	x16, 17000 <PyModule_AddObject>
    2754:	ldr	x17, [x16, #280]
    2758:	add	x16, x16, #0x118
    275c:	br	x17

0000000000002760 <EVP_DigestFinal@plt>:
    2760:	adrp	x16, 17000 <PyModule_AddObject>
    2764:	ldr	x17, [x16, #288]
    2768:	add	x16, x16, #0x120
    276c:	br	x17

0000000000002770 <PyEval_RestoreThread@plt>:
    2770:	adrp	x16, 17000 <PyModule_AddObject>
    2774:	ldr	x17, [x16, #296]
    2778:	add	x16, x16, #0x128
    277c:	br	x17

0000000000002780 <EVP_MD_CTX_copy@plt>:
    2780:	adrp	x16, 17000 <PyModule_AddObject>
    2784:	ldr	x17, [x16, #304]
    2788:	add	x16, x16, #0x130
    278c:	br	x17

0000000000002790 <EVP_sha3_384@plt>:
    2790:	adrp	x16, 17000 <PyModule_AddObject>
    2794:	ldr	x17, [x16, #312]
    2798:	add	x16, x16, #0x138
    279c:	br	x17

00000000000027a0 <PyFrozenSet_New@plt>:
    27a0:	adrp	x16, 17000 <PyModule_AddObject>
    27a4:	ldr	x17, [x16, #320]
    27a8:	add	x16, x16, #0x140
    27ac:	br	x17

00000000000027b0 <PyEval_SaveThread@plt>:
    27b0:	adrp	x16, 17000 <PyModule_AddObject>
    27b4:	ldr	x17, [x16, #328]
    27b8:	add	x16, x16, #0x148
    27bc:	br	x17

00000000000027c0 <EVP_sha224@plt>:
    27c0:	adrp	x16, 17000 <PyModule_AddObject>
    27c4:	ldr	x17, [x16, #336]
    27c8:	add	x16, x16, #0x150
    27cc:	br	x17

00000000000027d0 <EVP_sha3_256@plt>:
    27d0:	adrp	x16, 17000 <PyModule_AddObject>
    27d4:	ldr	x17, [x16, #344]
    27d8:	add	x16, x16, #0x158
    27dc:	br	x17

00000000000027e0 <EVP_MD_CTX_new@plt>:
    27e0:	adrp	x16, 17000 <PyModule_AddObject>
    27e4:	ldr	x17, [x16, #352]
    27e8:	add	x16, x16, #0x160
    27ec:	br	x17

00000000000027f0 <PyBuffer_IsContiguous@plt>:
    27f0:	adrp	x16, 17000 <PyModule_AddObject>
    27f4:	ldr	x17, [x16, #360]
    27f8:	add	x16, x16, #0x168
    27fc:	br	x17

0000000000002800 <PyType_IsSubtype@plt>:
    2800:	adrp	x16, 17000 <PyModule_AddObject>
    2804:	ldr	x17, [x16, #368]
    2808:	add	x16, x16, #0x170
    280c:	br	x17

0000000000002810 <_Py_strhex@plt>:
    2810:	adrp	x16, 17000 <PyModule_AddObject>
    2814:	ldr	x17, [x16, #376]
    2818:	add	x16, x16, #0x178
    281c:	br	x17

0000000000002820 <EVP_sha1@plt>:
    2820:	adrp	x16, 17000 <PyModule_AddObject>
    2824:	ldr	x17, [x16, #384]
    2828:	add	x16, x16, #0x180
    282c:	br	x17

0000000000002830 <EVP_PBE_scrypt@plt>:
    2830:	adrp	x16, 17000 <PyModule_AddObject>
    2834:	ldr	x17, [x16, #392]
    2838:	add	x16, x16, #0x188
    283c:	br	x17

0000000000002840 <ERR_peek_last_error@plt>:
    2840:	adrp	x16, 17000 <PyModule_AddObject>
    2844:	ldr	x17, [x16, #400]
    2848:	add	x16, x16, #0x190
    284c:	br	x17

0000000000002850 <PySet_Add@plt>:
    2850:	adrp	x16, 17000 <PyModule_AddObject>
    2854:	ldr	x17, [x16, #408]
    2858:	add	x16, x16, #0x198
    285c:	br	x17

0000000000002860 <HMAC@plt>:
    2860:	adrp	x16, 17000 <PyModule_AddObject>
    2864:	ldr	x17, [x16, #416]
    2868:	add	x16, x16, #0x1a0
    286c:	br	x17

0000000000002870 <PyBytes_FromStringAndSize@plt>:
    2870:	adrp	x16, 17000 <PyModule_AddObject>
    2874:	ldr	x17, [x16, #424]
    2878:	add	x16, x16, #0x1a8
    287c:	br	x17

0000000000002880 <_PyArg_Parse_SizeT@plt>:
    2880:	adrp	x16, 17000 <PyModule_AddObject>
    2884:	ldr	x17, [x16, #432]
    2888:	add	x16, x16, #0x1b0
    288c:	br	x17

0000000000002890 <PyLong_FromLong@plt>:
    2890:	adrp	x16, 17000 <PyModule_AddObject>
    2894:	ldr	x17, [x16, #440]
    2898:	add	x16, x16, #0x1b8
    289c:	br	x17

00000000000028a0 <strcmp@plt>:
    28a0:	adrp	x16, 17000 <PyModule_AddObject>
    28a4:	ldr	x17, [x16, #448]
    28a8:	add	x16, x16, #0x1c0
    28ac:	br	x17

00000000000028b0 <EVP_blake2b512@plt>:
    28b0:	adrp	x16, 17000 <PyModule_AddObject>
    28b4:	ldr	x17, [x16, #456]
    28b8:	add	x16, x16, #0x1c8
    28bc:	br	x17

00000000000028c0 <_PyArg_UnpackKeywords@plt>:
    28c0:	adrp	x16, 17000 <PyModule_AddObject>
    28c4:	ldr	x17, [x16, #464]
    28c8:	add	x16, x16, #0x1d0
    28cc:	br	x17

00000000000028d0 <EVP_MD_CTX_free@plt>:
    28d0:	adrp	x16, 17000 <PyModule_AddObject>
    28d4:	ldr	x17, [x16, #472]
    28d8:	add	x16, x16, #0x1d8
    28dc:	br	x17

00000000000028e0 <_Py_Dealloc@plt>:
    28e0:	adrp	x16, 17000 <PyModule_AddObject>
    28e4:	ldr	x17, [x16, #480]
    28e8:	add	x16, x16, #0x1e0
    28ec:	br	x17

00000000000028f0 <PyObject_Free@plt>:
    28f0:	adrp	x16, 17000 <PyModule_AddObject>
    28f4:	ldr	x17, [x16, #488]
    28f8:	add	x16, x16, #0x1e8
    28fc:	br	x17

0000000000002900 <EVP_sha3_224@plt>:
    2900:	adrp	x16, 17000 <PyModule_AddObject>
    2904:	ldr	x17, [x16, #496]
    2908:	add	x16, x16, #0x1f0
    290c:	br	x17

0000000000002910 <PyModule_Create2@plt>:
    2910:	adrp	x16, 17000 <PyModule_AddObject>
    2914:	ldr	x17, [x16, #504]
    2918:	add	x16, x16, #0x1f8
    291c:	br	x17

0000000000002920 <PyErr_SetString@plt>:
    2920:	adrp	x16, 17000 <PyModule_AddObject>
    2924:	ldr	x17, [x16, #512]
    2928:	add	x16, x16, #0x200
    292c:	br	x17

0000000000002930 <OBJ_nid2sn@plt>:
    2930:	adrp	x16, 17000 <PyModule_AddObject>
    2934:	ldr	x17, [x16, #520]
    2938:	add	x16, x16, #0x208
    293c:	br	x17

0000000000002940 <EVP_sha512@plt>:
    2940:	adrp	x16, 17000 <PyModule_AddObject>
    2944:	ldr	x17, [x16, #528]
    2948:	add	x16, x16, #0x210
    294c:	br	x17

0000000000002950 <EVP_sha256@plt>:
    2950:	adrp	x16, 17000 <PyModule_AddObject>
    2954:	ldr	x17, [x16, #536]
    2958:	add	x16, x16, #0x218
    295c:	br	x17

0000000000002960 <EVP_sha512_256@plt>:
    2960:	adrp	x16, 17000 <PyModule_AddObject>
    2964:	ldr	x17, [x16, #544]
    2968:	add	x16, x16, #0x220
    296c:	br	x17

0000000000002970 <PyBuffer_Release@plt>:
    2970:	adrp	x16, 17000 <PyModule_AddObject>
    2974:	ldr	x17, [x16, #552]
    2978:	add	x16, x16, #0x228
    297c:	br	x17

0000000000002980 <strlen@plt>:
    2980:	adrp	x16, 17000 <PyModule_AddObject>
    2984:	ldr	x17, [x16, #560]
    2988:	add	x16, x16, #0x230
    298c:	br	x17

0000000000002990 <ERR_lib_error_string@plt>:
    2990:	adrp	x16, 17000 <PyModule_AddObject>
    2994:	ldr	x17, [x16, #568]
    2998:	add	x16, x16, #0x238
    299c:	br	x17

00000000000029a0 <PyLong_AsUnsignedLong@plt>:
    29a0:	adrp	x16, 17000 <PyModule_AddObject>
    29a4:	ldr	x17, [x16, #576]
    29a8:	add	x16, x16, #0x240
    29ac:	br	x17

00000000000029b0 <_PyArg_BadArgument@plt>:
    29b0:	adrp	x16, 17000 <PyModule_AddObject>
    29b4:	ldr	x17, [x16, #584]
    29b8:	add	x16, x16, #0x248
    29bc:	br	x17

00000000000029c0 <PyThread_acquire_lock@plt>:
    29c0:	adrp	x16, 17000 <PyModule_AddObject>
    29c4:	ldr	x17, [x16, #592]
    29c8:	add	x16, x16, #0x250
    29cc:	br	x17

Disassembly of section .text:

00000000000029d0 <PyInit__hashlib@@Base-0x22c8>:
    29d0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    29d4:	ldr	x0, [x0, #3992]
    29d8:	cbz	x0, 29e0 <PyThread_acquire_lock@plt+0x20>
    29dc:	b	25d0 <__gmon_start__@plt>
    29e0:	ret
    29e4:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    29e8:	add	x0, x0, #0x988
    29ec:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x12368>
    29f0:	add	x1, x1, #0x988
    29f4:	cmp	x0, x1
    29f8:	b.eq	2a24 <PyThread_acquire_lock@plt+0x64>  // b.none
    29fc:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    2a00:	ldr	x1, [x1, #4016]
    2a04:	cbz	x1, 2a24 <PyThread_acquire_lock@plt+0x64>
    2a08:	stp	x29, x30, [sp, #-16]!
    2a0c:	mov	x29, sp
    2a10:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    2a14:	add	x0, x0, #0x988
    2a18:	blr	x1
    2a1c:	ldp	x29, x30, [sp], #16
    2a20:	ret
    2a24:	ret
    2a28:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    2a2c:	add	x0, x0, #0x988
    2a30:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x12368>
    2a34:	add	x1, x1, #0x988
    2a38:	sub	x0, x0, x1
    2a3c:	lsr	x1, x0, #63
    2a40:	add	x0, x1, x0, asr #3
    2a44:	cmp	xzr, x0, asr #1
    2a48:	b.eq	2a78 <PyThread_acquire_lock@plt+0xb8>  // b.none
    2a4c:	asr	x1, x0, #1
    2a50:	adrp	x2, 16000 <PyInit__hashlib@@Base+0x11368>
    2a54:	ldr	x2, [x2, #4032]
    2a58:	cbz	x2, 2a78 <PyThread_acquire_lock@plt+0xb8>
    2a5c:	stp	x29, x30, [sp, #-16]!
    2a60:	mov	x29, sp
    2a64:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    2a68:	add	x0, x0, #0x988
    2a6c:	blr	x2
    2a70:	ldp	x29, x30, [sp], #16
    2a74:	ret
    2a78:	ret
    2a7c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    2a80:	ldrb	w0, [x0, #2440]
    2a84:	cbnz	w0, 2ac0 <PyThread_acquire_lock@plt+0x100>
    2a88:	stp	x29, x30, [sp, #-16]!
    2a8c:	mov	x29, sp
    2a90:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    2a94:	ldr	x0, [x0, #4008]
    2a98:	cbz	x0, 2aa8 <PyThread_acquire_lock@plt+0xe8>
    2a9c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    2aa0:	ldr	x0, [x0, #600]
    2aa4:	bl	26e0 <__cxa_finalize@plt>
    2aa8:	bl	29e4 <PyThread_acquire_lock@plt+0x24>
    2aac:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    2ab0:	mov	w1, #0x1                   	// #1
    2ab4:	strb	w1, [x0, #2440]
    2ab8:	ldp	x29, x30, [sp], #16
    2abc:	ret
    2ac0:	ret
    2ac4:	stp	x29, x30, [sp, #-16]!
    2ac8:	mov	x29, sp
    2acc:	bl	2a28 <PyThread_acquire_lock@plt+0x68>
    2ad0:	ldp	x29, x30, [sp], #16
    2ad4:	ret
    2ad8:	stp	x29, x30, [sp, #-48]!
    2adc:	mov	x29, sp
    2ae0:	stp	x21, x22, [sp, #32]
    2ae4:	mov	x22, x0
    2ae8:	bl	2840 <ERR_peek_last_error@plt>
    2aec:	cbz	x0, 2b4c <PyThread_acquire_lock@plt+0x18c>
    2af0:	stp	x19, x20, [sp, #16]
    2af4:	mov	x19, x0
    2af8:	bl	2610 <ERR_clear_error@plt>
    2afc:	mov	x0, x19
    2b00:	bl	2990 <ERR_lib_error_string@plt>
    2b04:	mov	x20, x0
    2b08:	mov	x0, x19
    2b0c:	bl	25e0 <ERR_func_error_string@plt>
    2b10:	mov	x21, x0
    2b14:	mov	x0, x19
    2b18:	bl	2560 <ERR_reason_error_string@plt>
    2b1c:	cmp	x20, #0x0
    2b20:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    2b24:	b.ne	2b6c <PyThread_acquire_lock@plt+0x1ac>  // b.any
    2b28:	cbz	x20, 2b90 <PyThread_acquire_lock@plt+0x1d0>
    2b2c:	mov	x3, x0
    2b30:	mov	x2, x20
    2b34:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b38:	add	x1, x1, #0xe00
    2b3c:	mov	x0, x22
    2b40:	bl	26f0 <PyErr_Format@plt>
    2b44:	ldp	x19, x20, [sp, #16]
    2b48:	b	2b5c <PyThread_acquire_lock@plt+0x19c>
    2b4c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b50:	add	x1, x1, #0xde0
    2b54:	mov	x0, x22
    2b58:	bl	2920 <PyErr_SetString@plt>
    2b5c:	mov	x0, #0x0                   	// #0
    2b60:	ldp	x21, x22, [sp, #32]
    2b64:	ldp	x29, x30, [sp], #48
    2b68:	ret
    2b6c:	mov	x4, x0
    2b70:	mov	x3, x21
    2b74:	mov	x2, x20
    2b78:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b7c:	add	x1, x1, #0xdf0
    2b80:	mov	x0, x22
    2b84:	bl	26f0 <PyErr_Format@plt>
    2b88:	ldp	x19, x20, [sp, #16]
    2b8c:	b	2b5c <PyThread_acquire_lock@plt+0x19c>
    2b90:	mov	x1, x0
    2b94:	mov	x0, x22
    2b98:	bl	2920 <PyErr_SetString@plt>
    2b9c:	ldp	x19, x20, [sp, #16]
    2ba0:	b	2b5c <PyThread_acquire_lock@plt+0x19c>
    2ba4:	cmp	x2, #0x0
    2ba8:	b.le	2c30 <PyThread_acquire_lock@plt+0x270>
    2bac:	stp	x29, x30, [sp, #-64]!
    2bb0:	mov	x29, sp
    2bb4:	stp	x19, x20, [sp, #16]
    2bb8:	stp	x21, x22, [sp, #32]
    2bbc:	str	x23, [sp, #48]
    2bc0:	mov	x23, x0
    2bc4:	mov	x21, x1
    2bc8:	mov	x20, x2
    2bcc:	mov	x22, #0x7fffffff            	// #2147483647
    2bd0:	cmp	x20, x22
    2bd4:	csel	x19, x20, x22, le
    2bd8:	and	x19, x19, #0xffffffff
    2bdc:	mov	x2, x19
    2be0:	mov	x1, x21
    2be4:	ldr	x0, [x23, #16]
    2be8:	bl	2700 <EVP_DigestUpdate@plt>
    2bec:	cbz	w0, 2c08 <PyThread_acquire_lock@plt+0x248>
    2bf0:	sub	x20, x20, x19
    2bf4:	add	x21, x21, x19
    2bf8:	cmp	x20, #0x0
    2bfc:	b.gt	2bd0 <PyThread_acquire_lock@plt+0x210>
    2c00:	mov	w0, #0x0                   	// #0
    2c04:	b	2c1c <PyThread_acquire_lock@plt+0x25c>
    2c08:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    2c0c:	ldr	x0, [x0, #3984]
    2c10:	ldr	x0, [x0]
    2c14:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    2c18:	mov	w0, #0xffffffff            	// #-1
    2c1c:	ldp	x19, x20, [sp, #16]
    2c20:	ldp	x21, x22, [sp, #32]
    2c24:	ldr	x23, [sp, #48]
    2c28:	ldp	x29, x30, [sp], #64
    2c2c:	ret
    2c30:	mov	w0, #0x0                   	// #0
    2c34:	ret
    2c38:	sub	sp, sp, #0x140
    2c3c:	stp	x29, x30, [sp, #16]
    2c40:	add	x29, sp, #0x10
    2c44:	stp	x19, x20, [sp, #32]
    2c48:	mov	x19, x1
    2c4c:	mov	x1, x2
    2c50:	stp	xzr, xzr, [sp, #216]
    2c54:	stp	xzr, xzr, [sp, #232]
    2c58:	stp	xzr, xzr, [sp, #248]
    2c5c:	add	x0, sp, #0x200
    2c60:	stp	xzr, xzr, [x0, #-248]
    2c64:	stp	xzr, xzr, [x0, #-232]
    2c68:	stp	xzr, xzr, [sp, #136]
    2c6c:	stp	xzr, xzr, [sp, #152]
    2c70:	stp	xzr, xzr, [sp, #168]
    2c74:	stp	xzr, xzr, [sp, #184]
    2c78:	stp	xzr, xzr, [sp, #200]
    2c7c:	cmp	x3, #0x0
    2c80:	ccmp	x2, #0x3, #0x0, eq  // eq = none
    2c84:	b.ne	2c8c <PyThread_acquire_lock@plt+0x2cc>  // b.any
    2c88:	cbnz	x19, 2cc0 <PyThread_acquire_lock@plt+0x300>
    2c8c:	add	x0, sp, #0x128
    2c90:	str	x0, [sp]
    2c94:	mov	w7, #0x0                   	// #0
    2c98:	mov	w6, #0x3                   	// #3
    2c9c:	mov	w5, w6
    2ca0:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    2ca4:	add	x4, x4, #0x260
    2ca8:	mov	x2, #0x0                   	// #0
    2cac:	mov	x0, x19
    2cb0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    2cb4:	mov	x19, x0
    2cb8:	mov	x20, x0
    2cbc:	cbz	x0, 2dcc <PyThread_acquire_lock@plt+0x40c>
    2cc0:	mov	w2, #0x0                   	// #0
    2cc4:	add	x1, sp, #0xd8
    2cc8:	ldr	x0, [x19]
    2ccc:	bl	2750 <PyObject_GetBuffer@plt>
    2cd0:	mov	x20, #0x0                   	// #0
    2cd4:	cbnz	w0, 2dcc <PyThread_acquire_lock@plt+0x40c>
    2cd8:	mov	w1, #0x43                  	// #67
    2cdc:	add	x0, sp, #0xd8
    2ce0:	bl	27f0 <PyBuffer_IsContiguous@plt>
    2ce4:	cbz	w0, 2e00 <PyThread_acquire_lock@plt+0x440>
    2ce8:	mov	w2, #0x0                   	// #0
    2cec:	add	x1, sp, #0x88
    2cf0:	ldr	x0, [x19, #8]
    2cf4:	bl	2750 <PyObject_GetBuffer@plt>
    2cf8:	mov	x20, #0x0                   	// #0
    2cfc:	cbnz	w0, 2dcc <PyThread_acquire_lock@plt+0x40c>
    2d00:	mov	w1, #0x43                  	// #67
    2d04:	add	x0, sp, #0x88
    2d08:	bl	27f0 <PyBuffer_IsContiguous@plt>
    2d0c:	cbz	w0, 2e24 <PyThread_acquire_lock@plt+0x464>
    2d10:	ldr	x0, [x19, #16]
    2d14:	ldr	x1, [x0, #8]
    2d18:	ldr	x1, [x1, #168]
    2d1c:	tbz	w1, #28, 2e48 <PyThread_acquire_lock@plt+0x488>
    2d20:	add	x1, sp, #0x80
    2d24:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    2d28:	mov	x20, x0
    2d2c:	cbz	x0, 2dcc <PyThread_acquire_lock@plt+0x40c>
    2d30:	bl	2980 <strlen@plt>
    2d34:	ldr	x1, [sp, #128]
    2d38:	cmp	x0, x1
    2d3c:	b.ne	2e70 <PyThread_acquire_lock@plt+0x4b0>  // b.any
    2d40:	stp	xzr, xzr, [sp, #64]
    2d44:	stp	xzr, xzr, [sp, #80]
    2d48:	stp	xzr, xzr, [sp, #96]
    2d4c:	stp	xzr, xzr, [sp, #112]
    2d50:	str	wzr, [sp, #60]
    2d54:	mov	x0, x20
    2d58:	bl	2640 <EVP_get_digestbyname@plt>
    2d5c:	mov	x20, x0
    2d60:	cbz	x0, 2e90 <PyThread_acquire_lock@plt+0x4d0>
    2d64:	ldr	x1, [sp, #232]
    2d68:	mov	x0, #0x7fffffff            	// #2147483647
    2d6c:	cmp	x1, x0
    2d70:	b.gt	2eac <PyThread_acquire_lock@plt+0x4ec>
    2d74:	ldr	x1, [sp, #152]
    2d78:	mov	x0, #0x7fffffff            	// #2147483647
    2d7c:	cmp	x1, x0
    2d80:	b.gt	2ecc <PyThread_acquire_lock@plt+0x50c>
    2d84:	bl	27b0 <PyEval_SaveThread@plt>
    2d88:	mov	x19, x0
    2d8c:	add	x6, sp, #0x3c
    2d90:	add	x5, sp, #0x40
    2d94:	ldrsw	x4, [sp, #152]
    2d98:	ldr	x3, [sp, #136]
    2d9c:	ldr	w2, [sp, #232]
    2da0:	ldr	x1, [sp, #216]
    2da4:	mov	x0, x20
    2da8:	bl	2860 <HMAC@plt>
    2dac:	mov	x20, x0
    2db0:	mov	x0, x19
    2db4:	bl	2770 <PyEval_RestoreThread@plt>
    2db8:	cbz	x20, 2eec <PyThread_acquire_lock@plt+0x52c>
    2dbc:	ldr	w1, [sp, #60]
    2dc0:	add	x0, sp, #0x40
    2dc4:	bl	2870 <PyBytes_FromStringAndSize@plt>
    2dc8:	mov	x20, x0
    2dcc:	ldr	x0, [sp, #224]
    2dd0:	cbz	x0, 2ddc <PyThread_acquire_lock@plt+0x41c>
    2dd4:	add	x0, sp, #0xd8
    2dd8:	bl	2970 <PyBuffer_Release@plt>
    2ddc:	ldr	x0, [sp, #144]
    2de0:	cbz	x0, 2dec <PyThread_acquire_lock@plt+0x42c>
    2de4:	add	x0, sp, #0x88
    2de8:	bl	2970 <PyBuffer_Release@plt>
    2dec:	mov	x0, x20
    2df0:	ldp	x19, x20, [sp, #32]
    2df4:	ldp	x29, x30, [sp, #16]
    2df8:	add	sp, sp, #0x140
    2dfc:	ret
    2e00:	ldr	x3, [x19]
    2e04:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e08:	add	x2, x2, #0xe08
    2e0c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e10:	add	x1, x1, #0xe20
    2e14:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e18:	add	x0, x0, #0xe30
    2e1c:	bl	29b0 <_PyArg_BadArgument@plt>
    2e20:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2e24:	ldr	x3, [x19, #8]
    2e28:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e2c:	add	x2, x2, #0xe08
    2e30:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e34:	add	x1, x1, #0xe40
    2e38:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e3c:	add	x0, x0, #0xe30
    2e40:	bl	29b0 <_PyArg_BadArgument@plt>
    2e44:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2e48:	mov	x3, x0
    2e4c:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e50:	add	x2, x2, #0xe50
    2e54:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e58:	add	x1, x1, #0xe58
    2e5c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e60:	add	x0, x0, #0xe30
    2e64:	bl	29b0 <_PyArg_BadArgument@plt>
    2e68:	mov	x20, #0x0                   	// #0
    2e6c:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2e70:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e74:	add	x1, x1, #0xe70
    2e78:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    2e7c:	ldr	x0, [x0, #3984]
    2e80:	ldr	x0, [x0]
    2e84:	bl	2920 <PyErr_SetString@plt>
    2e88:	mov	x20, #0x0                   	// #0
    2e8c:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2e90:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e94:	add	x1, x1, #0xe88
    2e98:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    2e9c:	ldr	x0, [x0, #3984]
    2ea0:	ldr	x0, [x0]
    2ea4:	bl	2920 <PyErr_SetString@plt>
    2ea8:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2eac:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2eb0:	add	x1, x1, #0xea0
    2eb4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    2eb8:	ldr	x0, [x0, #4064]
    2ebc:	ldr	x0, [x0]
    2ec0:	bl	2920 <PyErr_SetString@plt>
    2ec4:	mov	x20, #0x0                   	// #0
    2ec8:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2ecc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2ed0:	add	x1, x1, #0xeb8
    2ed4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    2ed8:	ldr	x0, [x0, #4064]
    2edc:	ldr	x0, [x0]
    2ee0:	bl	2920 <PyErr_SetString@plt>
    2ee4:	mov	x20, #0x0                   	// #0
    2ee8:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2eec:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    2ef0:	ldr	x0, [x0, #3984]
    2ef4:	ldr	x0, [x0]
    2ef8:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    2efc:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2f00:	stp	x29, x30, [sp, #-32]!
    2f04:	mov	x29, sp
    2f08:	bl	2530 <EVP_MD_type@plt>
    2f0c:	cmp	w0, #0x446
    2f10:	b.eq	3050 <PyThread_acquire_lock@plt+0x690>  // b.none
    2f14:	str	x19, [sp, #16]
    2f18:	mov	w19, w0
    2f1c:	b.gt	2fb0 <PyThread_acquire_lock@plt+0x5f0>
    2f20:	cmp	w0, #0x2a2
    2f24:	b.eq	305c <PyThread_acquire_lock@plt+0x69c>  // b.none
    2f28:	b.le	2f4c <PyThread_acquire_lock@plt+0x58c>
    2f2c:	cmp	w0, #0x420
    2f30:	b.eq	308c <PyThread_acquire_lock@plt+0x6cc>  // b.none
    2f34:	cmp	w0, #0x421
    2f38:	b.ne	2f98 <PyThread_acquire_lock@plt+0x5d8>  // b.any
    2f3c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2f40:	add	x0, x0, #0xed0
    2f44:	ldr	x19, [sp, #16]
    2f48:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    2f4c:	cmp	w0, #0x2a0
    2f50:	b.eq	306c <PyThread_acquire_lock@plt+0x6ac>  // b.none
    2f54:	b.le	2f70 <PyThread_acquire_lock@plt+0x5b0>
    2f58:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    2f5c:	add	x0, x1, #0x420
    2f60:	cmp	w19, #0x2a1
    2f64:	b.ne	302c <PyThread_acquire_lock@plt+0x66c>  // b.any
    2f68:	ldr	x19, [sp, #16]
    2f6c:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    2f70:	cmp	w0, #0x4
    2f74:	b.eq	307c <PyThread_acquire_lock@plt+0x6bc>  // b.none
    2f78:	cmp	w0, #0x40
    2f7c:	b.ne	302c <PyThread_acquire_lock@plt+0x66c>  // b.any
    2f80:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    2f84:	add	x0, x0, #0x3f0
    2f88:	ldr	x19, [sp, #16]
    2f8c:	bl	2620 <PyUnicode_FromString@plt>
    2f90:	ldp	x29, x30, [sp], #32
    2f94:	ret
    2f98:	cmp	w0, #0x2a3
    2f9c:	b.ne	302c <PyThread_acquire_lock@plt+0x66c>  // b.any
    2fa0:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    2fa4:	add	x0, x0, #0x400
    2fa8:	ldr	x19, [sp, #16]
    2fac:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    2fb0:	cmp	w0, #0x44a
    2fb4:	b.eq	309c <PyThread_acquire_lock@plt+0x6dc>  // b.none
    2fb8:	b.le	2fdc <PyThread_acquire_lock@plt+0x61c>
    2fbc:	cmp	w0, #0x44c
    2fc0:	b.eq	30bc <PyThread_acquire_lock@plt+0x6fc>  // b.none
    2fc4:	cmp	w0, #0x44d
    2fc8:	b.ne	3014 <PyThread_acquire_lock@plt+0x654>  // b.any
    2fcc:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2fd0:	add	x0, x0, #0xf28
    2fd4:	ldr	x19, [sp, #16]
    2fd8:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    2fdc:	cmp	w0, #0x448
    2fe0:	b.eq	30ac <PyThread_acquire_lock@plt+0x6ec>  // b.none
    2fe4:	cmp	w0, #0x449
    2fe8:	b.ne	2ffc <PyThread_acquire_lock@plt+0x63c>  // b.any
    2fec:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2ff0:	add	x0, x0, #0xef8
    2ff4:	ldr	x19, [sp, #16]
    2ff8:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    2ffc:	cmp	w0, #0x447
    3000:	b.ne	302c <PyThread_acquire_lock@plt+0x66c>  // b.any
    3004:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    3008:	add	x0, x0, #0xf38
    300c:	ldr	x19, [sp, #16]
    3010:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    3014:	cmp	w0, #0x44b
    3018:	b.ne	302c <PyThread_acquire_lock@plt+0x66c>  // b.any
    301c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    3020:	add	x0, x0, #0xee8
    3024:	ldr	x19, [sp, #16]
    3028:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    302c:	mov	w0, w19
    3030:	bl	2600 <OBJ_nid2ln@plt>
    3034:	cbz	x0, 3040 <PyThread_acquire_lock@plt+0x680>
    3038:	ldr	x19, [sp, #16]
    303c:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    3040:	mov	w0, w19
    3044:	bl	2930 <OBJ_nid2sn@plt>
    3048:	ldr	x19, [sp, #16]
    304c:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    3050:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    3054:	add	x0, x0, #0xed8
    3058:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    305c:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    3060:	add	x0, x0, #0x430
    3064:	ldr	x19, [sp, #16]
    3068:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    306c:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    3070:	add	x0, x0, #0x410
    3074:	ldr	x19, [sp, #16]
    3078:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    307c:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    3080:	add	x0, x0, #0x3e0
    3084:	ldr	x19, [sp, #16]
    3088:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    308c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    3090:	add	x0, x0, #0xf58
    3094:	ldr	x19, [sp, #16]
    3098:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    309c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    30a0:	add	x0, x0, #0xf08
    30a4:	ldr	x19, [sp, #16]
    30a8:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    30ac:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    30b0:	add	x0, x0, #0xf18
    30b4:	ldr	x19, [sp, #16]
    30b8:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    30bc:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    30c0:	add	x0, x0, #0xf48
    30c4:	ldr	x19, [sp, #16]
    30c8:	b	2f8c <PyThread_acquire_lock@plt+0x5cc>
    30cc:	stp	x29, x30, [sp, #-16]!
    30d0:	mov	x29, sp
    30d4:	ldr	x0, [x0, #16]
    30d8:	bl	2590 <EVP_MD_CTX_md@plt>
    30dc:	bl	2f00 <PyThread_acquire_lock@plt+0x540>
    30e0:	ldp	x29, x30, [sp], #16
    30e4:	ret
    30e8:	stp	x29, x30, [sp, #-16]!
    30ec:	mov	x29, sp
    30f0:	ldr	x0, [x0, #16]
    30f4:	bl	2590 <EVP_MD_CTX_md@plt>
    30f8:	bl	2730 <EVP_MD_block_size@plt>
    30fc:	sxtw	x0, w0
    3100:	bl	2890 <PyLong_FromLong@plt>
    3104:	ldp	x29, x30, [sp], #16
    3108:	ret
    310c:	stp	x29, x30, [sp, #-16]!
    3110:	mov	x29, sp
    3114:	ldr	x0, [x0, #16]
    3118:	bl	2590 <EVP_MD_CTX_md@plt>
    311c:	bl	26c0 <EVP_MD_size@plt>
    3120:	sxtw	x0, w0
    3124:	bl	2890 <PyLong_FromLong@plt>
    3128:	ldp	x29, x30, [sp], #16
    312c:	ret
    3130:	stp	x29, x30, [sp, #-48]!
    3134:	mov	x29, sp
    3138:	stp	x19, x20, [sp, #16]
    313c:	mov	x20, x0
    3140:	mov	x19, x1
    3144:	ldr	x0, [x1, #24]
    3148:	cbz	x0, 3158 <PyThread_acquire_lock@plt+0x798>
    314c:	mov	w1, #0x0                   	// #0
    3150:	bl	29c0 <PyThread_acquire_lock@plt>
    3154:	cbz	w0, 3184 <PyThread_acquire_lock@plt+0x7c4>
    3158:	ldr	x1, [x19, #16]
    315c:	mov	x0, x20
    3160:	bl	2780 <EVP_MD_CTX_copy@plt>
    3164:	mov	w20, w0
    3168:	ldr	x0, [x19, #24]
    316c:	cbz	x0, 3174 <PyThread_acquire_lock@plt+0x7b4>
    3170:	bl	2740 <PyThread_release_lock@plt>
    3174:	mov	w0, w20
    3178:	ldp	x19, x20, [sp, #16]
    317c:	ldp	x29, x30, [sp], #48
    3180:	ret
    3184:	str	x21, [sp, #32]
    3188:	bl	27b0 <PyEval_SaveThread@plt>
    318c:	mov	x21, x0
    3190:	mov	w1, #0x1                   	// #1
    3194:	ldr	x0, [x19, #24]
    3198:	bl	29c0 <PyThread_acquire_lock@plt>
    319c:	mov	x0, x21
    31a0:	bl	2770 <PyEval_RestoreThread@plt>
    31a4:	ldr	x21, [sp, #32]
    31a8:	b	3158 <PyThread_acquire_lock@plt+0x798>
    31ac:	stp	x29, x30, [sp, #-96]!
    31b0:	mov	x29, sp
    31b4:	stp	x19, x20, [sp, #16]
    31b8:	mov	x20, x0
    31bc:	bl	27e0 <EVP_MD_CTX_new@plt>
    31c0:	mov	x19, x0
    31c4:	cbz	x0, 3220 <PyThread_acquire_lock@plt+0x860>
    31c8:	mov	x1, x20
    31cc:	bl	3130 <PyThread_acquire_lock@plt+0x770>
    31d0:	cbz	w0, 322c <PyThread_acquire_lock@plt+0x86c>
    31d4:	mov	x0, x19
    31d8:	bl	2590 <EVP_MD_CTX_md@plt>
    31dc:	bl	26c0 <EVP_MD_size@plt>
    31e0:	mov	w20, w0
    31e4:	mov	x2, #0x0                   	// #0
    31e8:	add	x1, sp, #0x20
    31ec:	mov	x0, x19
    31f0:	bl	2760 <EVP_DigestFinal@plt>
    31f4:	cbz	w0, 3244 <PyThread_acquire_lock@plt+0x884>
    31f8:	mov	w1, w20
    31fc:	add	x0, sp, #0x20
    3200:	bl	2870 <PyBytes_FromStringAndSize@plt>
    3204:	mov	x20, x0
    3208:	mov	x0, x19
    320c:	bl	28d0 <EVP_MD_CTX_free@plt>
    3210:	mov	x0, x20
    3214:	ldp	x19, x20, [sp, #16]
    3218:	ldp	x29, x30, [sp], #96
    321c:	ret
    3220:	bl	2630 <PyErr_NoMemory@plt>
    3224:	mov	x20, x19
    3228:	b	3210 <PyThread_acquire_lock@plt+0x850>
    322c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3230:	ldr	x0, [x0, #3984]
    3234:	ldr	x0, [x0]
    3238:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    323c:	mov	x20, x0
    3240:	b	3210 <PyThread_acquire_lock@plt+0x850>
    3244:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3248:	ldr	x0, [x0, #3984]
    324c:	ldr	x0, [x0]
    3250:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    3254:	mov	x20, #0x0                   	// #0
    3258:	b	3210 <PyThread_acquire_lock@plt+0x850>
    325c:	stp	x29, x30, [sp, #-96]!
    3260:	mov	x29, sp
    3264:	stp	x19, x20, [sp, #16]
    3268:	mov	x20, x0
    326c:	bl	27e0 <EVP_MD_CTX_new@plt>
    3270:	mov	x19, x0
    3274:	cbz	x0, 32d0 <PyThread_acquire_lock@plt+0x910>
    3278:	mov	x1, x20
    327c:	bl	3130 <PyThread_acquire_lock@plt+0x770>
    3280:	cbz	w0, 32d8 <PyThread_acquire_lock@plt+0x918>
    3284:	mov	x0, x19
    3288:	bl	2590 <EVP_MD_CTX_md@plt>
    328c:	bl	26c0 <EVP_MD_size@plt>
    3290:	mov	w20, w0
    3294:	mov	x2, #0x0                   	// #0
    3298:	add	x1, sp, #0x20
    329c:	mov	x0, x19
    32a0:	bl	2760 <EVP_DigestFinal@plt>
    32a4:	cbz	w0, 32f0 <PyThread_acquire_lock@plt+0x930>
    32a8:	mov	x0, x19
    32ac:	bl	28d0 <EVP_MD_CTX_free@plt>
    32b0:	mov	w1, w20
    32b4:	add	x0, sp, #0x20
    32b8:	bl	2810 <_Py_strhex@plt>
    32bc:	mov	x19, x0
    32c0:	mov	x0, x19
    32c4:	ldp	x19, x20, [sp, #16]
    32c8:	ldp	x29, x30, [sp], #96
    32cc:	ret
    32d0:	bl	2630 <PyErr_NoMemory@plt>
    32d4:	b	32c0 <PyThread_acquire_lock@plt+0x900>
    32d8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    32dc:	ldr	x0, [x0, #3984]
    32e0:	ldr	x0, [x0]
    32e4:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    32e8:	mov	x19, x0
    32ec:	b	32c0 <PyThread_acquire_lock@plt+0x900>
    32f0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    32f4:	ldr	x0, [x0, #3984]
    32f8:	ldr	x0, [x0]
    32fc:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    3300:	mov	x19, #0x0                   	// #0
    3304:	b	32c0 <PyThread_acquire_lock@plt+0x900>
    3308:	stp	x29, x30, [sp, #-128]!
    330c:	mov	x29, sp
    3310:	stp	x19, x20, [sp, #16]
    3314:	mov	x19, x0
    3318:	mov	x0, x1
    331c:	ldr	x1, [x1, #8]
    3320:	ldr	x2, [x1, #168]
    3324:	tbnz	w2, #28, 33d0 <PyThread_acquire_lock@plt+0xa10>
    3328:	ldr	x1, [x1, #160]
    332c:	cbz	x1, 33f0 <PyThread_acquire_lock@plt+0xa30>
    3330:	ldr	x1, [x1]
    3334:	cbz	x1, 33f0 <PyThread_acquire_lock@plt+0xa30>
    3338:	mov	w2, #0x0                   	// #0
    333c:	add	x1, sp, #0x30
    3340:	bl	2750 <PyObject_GetBuffer@plt>
    3344:	cmn	w0, #0x1
    3348:	b.eq	346c <PyThread_acquire_lock@plt+0xaac>  // b.none
    334c:	ldr	w0, [sp, #84]
    3350:	cmp	w0, #0x1
    3354:	b.gt	3410 <PyThread_acquire_lock@plt+0xa50>
    3358:	ldr	x0, [x19, #24]
    335c:	cbz	x0, 3438 <PyThread_acquire_lock@plt+0xa78>
    3360:	str	x21, [sp, #32]
    3364:	bl	27b0 <PyEval_SaveThread@plt>
    3368:	mov	x21, x0
    336c:	mov	w1, #0x1                   	// #1
    3370:	ldr	x0, [x19, #24]
    3374:	bl	29c0 <PyThread_acquire_lock@plt>
    3378:	ldr	x2, [sp, #64]
    337c:	ldr	x1, [sp, #48]
    3380:	mov	x0, x19
    3384:	bl	2ba4 <PyThread_acquire_lock@plt+0x1e4>
    3388:	mov	w20, w0
    338c:	ldr	x0, [x19, #24]
    3390:	bl	2740 <PyThread_release_lock@plt>
    3394:	mov	x0, x21
    3398:	bl	2770 <PyEval_RestoreThread@plt>
    339c:	ldr	x21, [sp, #32]
    33a0:	add	x0, sp, #0x30
    33a4:	bl	2970 <PyBuffer_Release@plt>
    33a8:	cmn	w20, #0x1
    33ac:	b.eq	3474 <PyThread_acquire_lock@plt+0xab4>  // b.none
    33b0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    33b4:	ldr	x0, [x0, #4056]
    33b8:	ldr	x1, [x0]
    33bc:	add	x1, x1, #0x1
    33c0:	str	x1, [x0]
    33c4:	ldp	x19, x20, [sp, #16]
    33c8:	ldp	x29, x30, [sp], #128
    33cc:	ret
    33d0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    33d4:	add	x1, x1, #0xf60
    33d8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    33dc:	ldr	x0, [x0, #4000]
    33e0:	ldr	x0, [x0]
    33e4:	bl	2920 <PyErr_SetString@plt>
    33e8:	mov	x0, #0x0                   	// #0
    33ec:	b	33c4 <PyThread_acquire_lock@plt+0xa04>
    33f0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    33f4:	add	x1, x1, #0xf90
    33f8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    33fc:	ldr	x0, [x0, #4000]
    3400:	ldr	x0, [x0]
    3404:	bl	2920 <PyErr_SetString@plt>
    3408:	mov	x0, #0x0                   	// #0
    340c:	b	33c4 <PyThread_acquire_lock@plt+0xa04>
    3410:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3414:	add	x1, x1, #0xfc0
    3418:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    341c:	ldr	x0, [x0, #4024]
    3420:	ldr	x0, [x0]
    3424:	bl	2920 <PyErr_SetString@plt>
    3428:	add	x0, sp, #0x30
    342c:	bl	2970 <PyBuffer_Release@plt>
    3430:	mov	x0, #0x0                   	// #0
    3434:	b	33c4 <PyThread_acquire_lock@plt+0xa04>
    3438:	ldr	x0, [sp, #64]
    343c:	cmp	x0, #0x7ff
    3440:	b.gt	345c <PyThread_acquire_lock@plt+0xa9c>
    3444:	ldr	x2, [sp, #64]
    3448:	ldr	x1, [sp, #48]
    344c:	mov	x0, x19
    3450:	bl	2ba4 <PyThread_acquire_lock@plt+0x1e4>
    3454:	mov	w20, w0
    3458:	b	33a0 <PyThread_acquire_lock@plt+0x9e0>
    345c:	bl	26b0 <PyThread_allocate_lock@plt>
    3460:	str	x0, [x19, #24]
    3464:	cbz	x0, 3444 <PyThread_acquire_lock@plt+0xa84>
    3468:	b	3360 <PyThread_acquire_lock@plt+0x9a0>
    346c:	mov	x0, #0x0                   	// #0
    3470:	b	33c4 <PyThread_acquire_lock@plt+0xa04>
    3474:	mov	x0, #0x0                   	// #0
    3478:	b	33c4 <PyThread_acquire_lock@plt+0xa04>
    347c:	stp	x29, x30, [sp, #-32]!
    3480:	mov	x29, sp
    3484:	str	x19, [sp, #16]
    3488:	mov	x19, x0
    348c:	ldr	x0, [x0, #24]
    3490:	cbz	x0, 3498 <PyThread_acquire_lock@plt+0xad8>
    3494:	bl	2650 <PyThread_free_lock@plt>
    3498:	ldr	x0, [x19, #16]
    349c:	bl	28d0 <EVP_MD_CTX_free@plt>
    34a0:	mov	x0, x19
    34a4:	bl	28f0 <PyObject_Free@plt>
    34a8:	ldr	x19, [sp, #16]
    34ac:	ldp	x29, x30, [sp], #32
    34b0:	ret
    34b4:	stp	x29, x30, [sp, #-32]!
    34b8:	mov	x29, sp
    34bc:	stp	x19, x20, [sp, #16]
    34c0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    34c4:	add	x0, x0, #0x260
    34c8:	add	x0, x0, #0x40
    34cc:	bl	2660 <_PyObject_New@plt>
    34d0:	mov	x19, x0
    34d4:	cbz	x0, 34ec <PyThread_acquire_lock@plt+0xb2c>
    34d8:	str	xzr, [x0, #24]
    34dc:	bl	27e0 <EVP_MD_CTX_new@plt>
    34e0:	mov	x20, x0
    34e4:	str	x0, [x19, #16]
    34e8:	cbz	x0, 34fc <PyThread_acquire_lock@plt+0xb3c>
    34ec:	mov	x0, x19
    34f0:	ldp	x19, x20, [sp, #16]
    34f4:	ldp	x29, x30, [sp], #32
    34f8:	ret
    34fc:	ldr	x0, [x19]
    3500:	sub	x0, x0, #0x1
    3504:	str	x0, [x19]
    3508:	cbz	x0, 3518 <PyThread_acquire_lock@plt+0xb58>
    350c:	bl	2630 <PyErr_NoMemory@plt>
    3510:	mov	x19, x20
    3514:	b	34ec <PyThread_acquire_lock@plt+0xb2c>
    3518:	mov	x0, x19
    351c:	bl	28e0 <_Py_Dealloc@plt>
    3520:	b	350c <PyThread_acquire_lock@plt+0xb4c>
    3524:	stp	x29, x30, [sp, #-64]!
    3528:	mov	x29, sp
    352c:	stp	x19, x20, [sp, #16]
    3530:	mov	x20, x0
    3534:	cbz	x0, 35b4 <PyThread_acquire_lock@plt+0xbf4>
    3538:	stp	x21, x22, [sp, #32]
    353c:	mov	x22, x1
    3540:	mov	x21, x2
    3544:	bl	34b4 <PyThread_acquire_lock@plt+0xaf4>
    3548:	mov	x19, x0
    354c:	cbz	x0, 365c <PyThread_acquire_lock@plt+0xc9c>
    3550:	mov	x2, #0x0                   	// #0
    3554:	mov	x1, x20
    3558:	ldr	x0, [x0, #16]
    355c:	bl	2550 <EVP_DigestInit_ex@plt>
    3560:	cbz	w0, 35d4 <PyThread_acquire_lock@plt+0xc14>
    3564:	cmp	x22, #0x0
    3568:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    356c:	b.eq	3664 <PyThread_acquire_lock@plt+0xca4>  // b.none
    3570:	cmp	x21, #0x7ff
    3574:	b.le	3614 <PyThread_acquire_lock@plt+0xc54>
    3578:	str	x23, [sp, #48]
    357c:	bl	27b0 <PyEval_SaveThread@plt>
    3580:	mov	x23, x0
    3584:	mov	x2, x21
    3588:	mov	x1, x22
    358c:	mov	x0, x19
    3590:	bl	2ba4 <PyThread_acquire_lock@plt+0x1e4>
    3594:	mov	w20, w0
    3598:	mov	x0, x23
    359c:	bl	2770 <PyEval_RestoreThread@plt>
    35a0:	ldr	x23, [sp, #48]
    35a4:	cmn	w20, #0x1
    35a8:	b.eq	362c <PyThread_acquire_lock@plt+0xc6c>  // b.none
    35ac:	ldp	x21, x22, [sp, #32]
    35b0:	b	3668 <PyThread_acquire_lock@plt+0xca8>
    35b4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    35b8:	add	x1, x1, #0xe88
    35bc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    35c0:	ldr	x0, [x0, #3984]
    35c4:	ldr	x0, [x0]
    35c8:	bl	2920 <PyErr_SetString@plt>
    35cc:	mov	x19, x20
    35d0:	b	3668 <PyThread_acquire_lock@plt+0xca8>
    35d4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    35d8:	ldr	x0, [x0, #3984]
    35dc:	ldr	x0, [x0]
    35e0:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    35e4:	ldr	x0, [x19]
    35e8:	sub	x0, x0, #0x1
    35ec:	str	x0, [x19]
    35f0:	cbz	x0, 3600 <PyThread_acquire_lock@plt+0xc40>
    35f4:	mov	x19, #0x0                   	// #0
    35f8:	ldp	x21, x22, [sp, #32]
    35fc:	b	3668 <PyThread_acquire_lock@plt+0xca8>
    3600:	mov	x0, x19
    3604:	bl	28e0 <_Py_Dealloc@plt>
    3608:	mov	x19, #0x0                   	// #0
    360c:	ldp	x21, x22, [sp, #32]
    3610:	b	3668 <PyThread_acquire_lock@plt+0xca8>
    3614:	mov	x2, x21
    3618:	mov	x1, x22
    361c:	mov	x0, x19
    3620:	bl	2ba4 <PyThread_acquire_lock@plt+0x1e4>
    3624:	mov	w20, w0
    3628:	b	35a4 <PyThread_acquire_lock@plt+0xbe4>
    362c:	ldr	x0, [x19]
    3630:	sub	x0, x0, #0x1
    3634:	str	x0, [x19]
    3638:	cbz	x0, 3648 <PyThread_acquire_lock@plt+0xc88>
    363c:	mov	x19, #0x0                   	// #0
    3640:	ldp	x21, x22, [sp, #32]
    3644:	b	3668 <PyThread_acquire_lock@plt+0xca8>
    3648:	mov	x0, x19
    364c:	bl	28e0 <_Py_Dealloc@plt>
    3650:	mov	x19, #0x0                   	// #0
    3654:	ldp	x21, x22, [sp, #32]
    3658:	b	3668 <PyThread_acquire_lock@plt+0xca8>
    365c:	ldp	x21, x22, [sp, #32]
    3660:	b	3668 <PyThread_acquire_lock@plt+0xca8>
    3664:	ldp	x21, x22, [sp, #32]
    3668:	mov	x0, x19
    366c:	ldp	x19, x20, [sp, #16]
    3670:	ldp	x29, x30, [sp], #64
    3674:	ret
    3678:	stp	x29, x30, [sp, #-112]!
    367c:	mov	x29, sp
    3680:	str	x19, [sp, #16]
    3684:	mov	x19, x2
    3688:	stp	xzr, xzr, [sp, #32]
    368c:	stp	xzr, xzr, [sp, #48]
    3690:	stp	xzr, xzr, [sp, #64]
    3694:	stp	xzr, xzr, [sp, #80]
    3698:	stp	xzr, xzr, [sp, #96]
    369c:	cbz	x1, 377c <PyThread_acquire_lock@plt+0xdbc>
    36a0:	mov	x0, x1
    36a4:	ldr	x1, [x1, #8]
    36a8:	ldr	x2, [x1, #168]
    36ac:	tbnz	w2, #28, 370c <PyThread_acquire_lock@plt+0xd4c>
    36b0:	ldr	x1, [x1, #160]
    36b4:	cbz	x1, 372c <PyThread_acquire_lock@plt+0xd6c>
    36b8:	ldr	x1, [x1]
    36bc:	cbz	x1, 372c <PyThread_acquire_lock@plt+0xd6c>
    36c0:	mov	w2, #0x0                   	// #0
    36c4:	add	x1, sp, #0x20
    36c8:	bl	2750 <PyObject_GetBuffer@plt>
    36cc:	cmn	w0, #0x1
    36d0:	b.eq	3774 <PyThread_acquire_lock@plt+0xdb4>  // b.none
    36d4:	ldr	w0, [sp, #68]
    36d8:	cmp	w0, #0x1
    36dc:	b.gt	374c <PyThread_acquire_lock@plt+0xd8c>
    36e0:	ldr	x2, [sp, #48]
    36e4:	ldr	x1, [sp, #32]
    36e8:	mov	x0, x19
    36ec:	bl	3524 <PyThread_acquire_lock@plt+0xb64>
    36f0:	mov	x19, x0
    36f4:	add	x0, sp, #0x20
    36f8:	bl	2970 <PyBuffer_Release@plt>
    36fc:	mov	x0, x19
    3700:	ldr	x19, [sp, #16]
    3704:	ldp	x29, x30, [sp], #112
    3708:	ret
    370c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3710:	add	x1, x1, #0xf60
    3714:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3718:	ldr	x0, [x0, #4000]
    371c:	ldr	x0, [x0]
    3720:	bl	2920 <PyErr_SetString@plt>
    3724:	mov	x19, #0x0                   	// #0
    3728:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    372c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3730:	add	x1, x1, #0xf90
    3734:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3738:	ldr	x0, [x0, #4000]
    373c:	ldr	x0, [x0]
    3740:	bl	2920 <PyErr_SetString@plt>
    3744:	mov	x19, #0x0                   	// #0
    3748:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    374c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3750:	add	x1, x1, #0xfc0
    3754:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3758:	ldr	x0, [x0, #4024]
    375c:	ldr	x0, [x0]
    3760:	bl	2920 <PyErr_SetString@plt>
    3764:	add	x0, sp, #0x20
    3768:	bl	2970 <PyBuffer_Release@plt>
    376c:	mov	x19, #0x0                   	// #0
    3770:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    3774:	mov	x19, #0x0                   	// #0
    3778:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    377c:	ldr	x2, [sp, #48]
    3780:	ldr	x1, [sp, #32]
    3784:	mov	x0, x19
    3788:	bl	3524 <PyThread_acquire_lock@plt+0xb64>
    378c:	mov	x19, x0
    3790:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    3794:	sub	sp, sp, #0x50
    3798:	stp	x29, x30, [sp, #16]
    379c:	add	x29, sp, #0x10
    37a0:	stp	x19, x20, [sp, #32]
    37a4:	mov	x19, x0
    37a8:	mov	x0, x1
    37ac:	mov	x1, x2
    37b0:	cbz	x3, 3820 <PyThread_acquire_lock@plt+0xe60>
    37b4:	ldr	x20, [x3, #16]
    37b8:	add	x20, x2, x20
    37bc:	add	x2, sp, #0x48
    37c0:	str	x2, [sp]
    37c4:	mov	w7, #0x0                   	// #0
    37c8:	mov	w6, #0x1                   	// #1
    37cc:	mov	w5, #0x0                   	// #0
    37d0:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    37d4:	add	x4, x4, #0x260
    37d8:	add	x4, x4, #0x1e0
    37dc:	mov	x2, #0x0                   	// #0
    37e0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    37e4:	cbz	x0, 3810 <PyThread_acquire_lock@plt+0xe50>
    37e8:	str	x21, [sp, #48]
    37ec:	mov	x21, #0x0                   	// #0
    37f0:	cbz	x20, 37f8 <PyThread_acquire_lock@plt+0xe38>
    37f4:	ldr	x21, [x0]
    37f8:	bl	2940 <EVP_sha512@plt>
    37fc:	mov	x2, x0
    3800:	mov	x1, x21
    3804:	mov	x0, x19
    3808:	bl	3678 <PyThread_acquire_lock@plt+0xcb8>
    380c:	ldr	x21, [sp, #48]
    3810:	ldp	x19, x20, [sp, #32]
    3814:	ldp	x29, x30, [sp, #16]
    3818:	add	sp, sp, #0x50
    381c:	ret
    3820:	cmp	x0, #0x0
    3824:	ccmp	x2, #0x1, #0x2, ne  // ne = any
    3828:	b.ls	3834 <PyThread_acquire_lock@plt+0xe74>  // b.plast
    382c:	mov	x20, x2
    3830:	b	37bc <PyThread_acquire_lock@plt+0xdfc>
    3834:	str	x21, [sp, #48]
    3838:	mov	x20, x2
    383c:	b	37ec <PyThread_acquire_lock@plt+0xe2c>
    3840:	sub	sp, sp, #0x50
    3844:	stp	x29, x30, [sp, #16]
    3848:	add	x29, sp, #0x10
    384c:	stp	x19, x20, [sp, #32]
    3850:	mov	x19, x0
    3854:	mov	x0, x1
    3858:	mov	x1, x2
    385c:	cbz	x3, 38cc <PyThread_acquire_lock@plt+0xf0c>
    3860:	ldr	x20, [x3, #16]
    3864:	add	x20, x2, x20
    3868:	add	x2, sp, #0x48
    386c:	str	x2, [sp]
    3870:	mov	w7, #0x0                   	// #0
    3874:	mov	w6, #0x1                   	// #1
    3878:	mov	w5, #0x0                   	// #0
    387c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    3880:	add	x4, x4, #0x260
    3884:	add	x4, x4, #0x220
    3888:	mov	x2, #0x0                   	// #0
    388c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3890:	cbz	x0, 38bc <PyThread_acquire_lock@plt+0xefc>
    3894:	str	x21, [sp, #48]
    3898:	mov	x21, #0x0                   	// #0
    389c:	cbz	x20, 38a4 <PyThread_acquire_lock@plt+0xee4>
    38a0:	ldr	x21, [x0]
    38a4:	bl	25c0 <EVP_sha384@plt>
    38a8:	mov	x2, x0
    38ac:	mov	x1, x21
    38b0:	mov	x0, x19
    38b4:	bl	3678 <PyThread_acquire_lock@plt+0xcb8>
    38b8:	ldr	x21, [sp, #48]
    38bc:	ldp	x19, x20, [sp, #32]
    38c0:	ldp	x29, x30, [sp, #16]
    38c4:	add	sp, sp, #0x50
    38c8:	ret
    38cc:	cmp	x0, #0x0
    38d0:	ccmp	x2, #0x1, #0x2, ne  // ne = any
    38d4:	b.ls	38e0 <PyThread_acquire_lock@plt+0xf20>  // b.plast
    38d8:	mov	x20, x2
    38dc:	b	3868 <PyThread_acquire_lock@plt+0xea8>
    38e0:	str	x21, [sp, #48]
    38e4:	mov	x20, x2
    38e8:	b	3898 <PyThread_acquire_lock@plt+0xed8>
    38ec:	sub	sp, sp, #0x50
    38f0:	stp	x29, x30, [sp, #16]
    38f4:	add	x29, sp, #0x10
    38f8:	stp	x19, x20, [sp, #32]
    38fc:	mov	x19, x0
    3900:	mov	x0, x1
    3904:	mov	x1, x2
    3908:	cbz	x3, 3978 <PyThread_acquire_lock@plt+0xfb8>
    390c:	ldr	x20, [x3, #16]
    3910:	add	x20, x2, x20
    3914:	add	x2, sp, #0x48
    3918:	str	x2, [sp]
    391c:	mov	w7, #0x0                   	// #0
    3920:	mov	w6, #0x1                   	// #1
    3924:	mov	w5, #0x0                   	// #0
    3928:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    392c:	add	x4, x4, #0x260
    3930:	add	x4, x4, #0x260
    3934:	mov	x2, #0x0                   	// #0
    3938:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    393c:	cbz	x0, 3968 <PyThread_acquire_lock@plt+0xfa8>
    3940:	str	x21, [sp, #48]
    3944:	mov	x21, #0x0                   	// #0
    3948:	cbz	x20, 3950 <PyThread_acquire_lock@plt+0xf90>
    394c:	ldr	x21, [x0]
    3950:	bl	2950 <EVP_sha256@plt>
    3954:	mov	x2, x0
    3958:	mov	x1, x21
    395c:	mov	x0, x19
    3960:	bl	3678 <PyThread_acquire_lock@plt+0xcb8>
    3964:	ldr	x21, [sp, #48]
    3968:	ldp	x19, x20, [sp, #32]
    396c:	ldp	x29, x30, [sp, #16]
    3970:	add	sp, sp, #0x50
    3974:	ret
    3978:	cmp	x0, #0x0
    397c:	ccmp	x2, #0x1, #0x2, ne  // ne = any
    3980:	b.ls	398c <PyThread_acquire_lock@plt+0xfcc>  // b.plast
    3984:	mov	x20, x2
    3988:	b	3914 <PyThread_acquire_lock@plt+0xf54>
    398c:	str	x21, [sp, #48]
    3990:	mov	x20, x2
    3994:	b	3944 <PyThread_acquire_lock@plt+0xf84>
    3998:	sub	sp, sp, #0x50
    399c:	stp	x29, x30, [sp, #16]
    39a0:	add	x29, sp, #0x10
    39a4:	stp	x19, x20, [sp, #32]
    39a8:	mov	x19, x0
    39ac:	mov	x0, x1
    39b0:	mov	x1, x2
    39b4:	cbz	x3, 3a24 <PyThread_acquire_lock@plt+0x1064>
    39b8:	ldr	x20, [x3, #16]
    39bc:	add	x20, x2, x20
    39c0:	add	x2, sp, #0x48
    39c4:	str	x2, [sp]
    39c8:	mov	w7, #0x0                   	// #0
    39cc:	mov	w6, #0x1                   	// #1
    39d0:	mov	w5, #0x0                   	// #0
    39d4:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    39d8:	add	x4, x4, #0x260
    39dc:	add	x4, x4, #0x2a0
    39e0:	mov	x2, #0x0                   	// #0
    39e4:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    39e8:	cbz	x0, 3a14 <PyThread_acquire_lock@plt+0x1054>
    39ec:	str	x21, [sp, #48]
    39f0:	mov	x21, #0x0                   	// #0
    39f4:	cbz	x20, 39fc <PyThread_acquire_lock@plt+0x103c>
    39f8:	ldr	x21, [x0]
    39fc:	bl	27c0 <EVP_sha224@plt>
    3a00:	mov	x2, x0
    3a04:	mov	x1, x21
    3a08:	mov	x0, x19
    3a0c:	bl	3678 <PyThread_acquire_lock@plt+0xcb8>
    3a10:	ldr	x21, [sp, #48]
    3a14:	ldp	x19, x20, [sp, #32]
    3a18:	ldp	x29, x30, [sp, #16]
    3a1c:	add	sp, sp, #0x50
    3a20:	ret
    3a24:	cmp	x0, #0x0
    3a28:	ccmp	x2, #0x1, #0x2, ne  // ne = any
    3a2c:	b.ls	3a38 <PyThread_acquire_lock@plt+0x1078>  // b.plast
    3a30:	mov	x20, x2
    3a34:	b	39c0 <PyThread_acquire_lock@plt+0x1000>
    3a38:	str	x21, [sp, #48]
    3a3c:	mov	x20, x2
    3a40:	b	39f0 <PyThread_acquire_lock@plt+0x1030>
    3a44:	sub	sp, sp, #0x50
    3a48:	stp	x29, x30, [sp, #16]
    3a4c:	add	x29, sp, #0x10
    3a50:	stp	x19, x20, [sp, #32]
    3a54:	mov	x19, x0
    3a58:	mov	x0, x1
    3a5c:	mov	x1, x2
    3a60:	cbz	x3, 3ad0 <PyThread_acquire_lock@plt+0x1110>
    3a64:	ldr	x20, [x3, #16]
    3a68:	add	x20, x2, x20
    3a6c:	add	x2, sp, #0x48
    3a70:	str	x2, [sp]
    3a74:	mov	w7, #0x0                   	// #0
    3a78:	mov	w6, #0x1                   	// #1
    3a7c:	mov	w5, #0x0                   	// #0
    3a80:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    3a84:	add	x4, x4, #0x260
    3a88:	add	x4, x4, #0x2e0
    3a8c:	mov	x2, #0x0                   	// #0
    3a90:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3a94:	cbz	x0, 3ac0 <PyThread_acquire_lock@plt+0x1100>
    3a98:	str	x21, [sp, #48]
    3a9c:	mov	x21, #0x0                   	// #0
    3aa0:	cbz	x20, 3aa8 <PyThread_acquire_lock@plt+0x10e8>
    3aa4:	ldr	x21, [x0]
    3aa8:	bl	2820 <EVP_sha1@plt>
    3aac:	mov	x2, x0
    3ab0:	mov	x1, x21
    3ab4:	mov	x0, x19
    3ab8:	bl	3678 <PyThread_acquire_lock@plt+0xcb8>
    3abc:	ldr	x21, [sp, #48]
    3ac0:	ldp	x19, x20, [sp, #32]
    3ac4:	ldp	x29, x30, [sp, #16]
    3ac8:	add	sp, sp, #0x50
    3acc:	ret
    3ad0:	cmp	x0, #0x0
    3ad4:	ccmp	x2, #0x1, #0x2, ne  // ne = any
    3ad8:	b.ls	3ae4 <PyThread_acquire_lock@plt+0x1124>  // b.plast
    3adc:	mov	x20, x2
    3ae0:	b	3a6c <PyThread_acquire_lock@plt+0x10ac>
    3ae4:	str	x21, [sp, #48]
    3ae8:	mov	x20, x2
    3aec:	b	3a9c <PyThread_acquire_lock@plt+0x10dc>
    3af0:	sub	sp, sp, #0x50
    3af4:	stp	x29, x30, [sp, #16]
    3af8:	add	x29, sp, #0x10
    3afc:	stp	x19, x20, [sp, #32]
    3b00:	mov	x19, x0
    3b04:	mov	x0, x1
    3b08:	mov	x1, x2
    3b0c:	cbz	x3, 3b7c <PyThread_acquire_lock@plt+0x11bc>
    3b10:	ldr	x20, [x3, #16]
    3b14:	add	x20, x2, x20
    3b18:	add	x2, sp, #0x48
    3b1c:	str	x2, [sp]
    3b20:	mov	w7, #0x0                   	// #0
    3b24:	mov	w6, #0x1                   	// #1
    3b28:	mov	w5, #0x0                   	// #0
    3b2c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    3b30:	add	x4, x4, #0x260
    3b34:	add	x4, x4, #0x320
    3b38:	mov	x2, #0x0                   	// #0
    3b3c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3b40:	cbz	x0, 3b6c <PyThread_acquire_lock@plt+0x11ac>
    3b44:	str	x21, [sp, #48]
    3b48:	mov	x21, #0x0                   	// #0
    3b4c:	cbz	x20, 3b54 <PyThread_acquire_lock@plt+0x1194>
    3b50:	ldr	x21, [x0]
    3b54:	bl	2690 <EVP_md5@plt>
    3b58:	mov	x2, x0
    3b5c:	mov	x1, x21
    3b60:	mov	x0, x19
    3b64:	bl	3678 <PyThread_acquire_lock@plt+0xcb8>
    3b68:	ldr	x21, [sp, #48]
    3b6c:	ldp	x19, x20, [sp, #32]
    3b70:	ldp	x29, x30, [sp, #16]
    3b74:	add	sp, sp, #0x50
    3b78:	ret
    3b7c:	cmp	x0, #0x0
    3b80:	ccmp	x2, #0x1, #0x2, ne  // ne = any
    3b84:	b.ls	3b90 <PyThread_acquire_lock@plt+0x11d0>  // b.plast
    3b88:	mov	x20, x2
    3b8c:	b	3b18 <PyThread_acquire_lock@plt+0x1158>
    3b90:	str	x21, [sp, #48]
    3b94:	mov	x20, x2
    3b98:	b	3b48 <PyThread_acquire_lock@plt+0x1188>
    3b9c:	sub	sp, sp, #0xa0
    3ba0:	stp	x29, x30, [sp, #16]
    3ba4:	add	x29, sp, #0x10
    3ba8:	stp	x19, x20, [sp, #32]
    3bac:	mov	x8, x1
    3bb0:	mov	x1, x2
    3bb4:	cbz	x3, 3cac <PyThread_acquire_lock@plt+0x12ec>
    3bb8:	ldr	x19, [x3, #16]
    3bbc:	add	x19, x2, x19
    3bc0:	add	x0, sp, #0x90
    3bc4:	str	x0, [sp]
    3bc8:	mov	w7, #0x0                   	// #0
    3bcc:	mov	w6, #0x2                   	// #2
    3bd0:	mov	w5, #0x1                   	// #1
    3bd4:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    3bd8:	add	x4, x4, #0x260
    3bdc:	add	x4, x4, #0x360
    3be0:	mov	x2, #0x0                   	// #0
    3be4:	mov	x0, x8
    3be8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3bec:	mov	x8, x0
    3bf0:	cbz	x0, 3eb8 <PyThread_acquire_lock@plt+0x14f8>
    3bf4:	ldr	x0, [x8]
    3bf8:	cmp	x19, #0x1
    3bfc:	b.eq	3ec0 <PyThread_acquire_lock@plt+0x1500>  // b.none
    3c00:	ldr	x20, [x8, #8]
    3c04:	stp	xzr, xzr, [sp, #64]
    3c08:	stp	xzr, xzr, [sp, #80]
    3c0c:	stp	xzr, xzr, [sp, #96]
    3c10:	stp	xzr, xzr, [sp, #112]
    3c14:	stp	xzr, xzr, [sp, #128]
    3c18:	add	x2, sp, #0x38
    3c1c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3c20:	add	x1, x1, #0xfe0
    3c24:	bl	2880 <_PyArg_Parse_SizeT@plt>
    3c28:	cbz	w0, 3ccc <PyThread_acquire_lock@plt+0x130c>
    3c2c:	cbz	x20, 3eec <PyThread_acquire_lock@plt+0x152c>
    3c30:	ldr	x0, [x20, #8]
    3c34:	ldr	x1, [x0, #168]
    3c38:	tbnz	w1, #28, 3cec <PyThread_acquire_lock@plt+0x132c>
    3c3c:	ldr	x0, [x0, #160]
    3c40:	cbz	x0, 3d0c <PyThread_acquire_lock@plt+0x134c>
    3c44:	ldr	x0, [x0]
    3c48:	cbz	x0, 3d0c <PyThread_acquire_lock@plt+0x134c>
    3c4c:	mov	w2, #0x0                   	// #0
    3c50:	add	x1, sp, #0x40
    3c54:	mov	x0, x20
    3c58:	bl	2750 <PyObject_GetBuffer@plt>
    3c5c:	cmn	w0, #0x1
    3c60:	b.eq	3eb0 <PyThread_acquire_lock@plt+0x14f0>  // b.none
    3c64:	ldr	w0, [sp, #100]
    3c68:	cmp	w0, #0x1
    3c6c:	b.gt	3d2c <PyThread_acquire_lock@plt+0x136c>
    3c70:	ldr	x19, [sp, #56]
    3c74:	mov	x0, x19
    3c78:	bl	2640 <EVP_get_digestbyname@plt>
    3c7c:	cbz	x0, 3d54 <PyThread_acquire_lock@plt+0x1394>
    3c80:	ldr	x2, [sp, #80]
    3c84:	ldr	x1, [sp, #64]
    3c88:	bl	3524 <PyThread_acquire_lock@plt+0xb64>
    3c8c:	mov	x19, x0
    3c90:	add	x0, sp, #0x40
    3c94:	bl	2970 <PyBuffer_Release@plt>
    3c98:	mov	x0, x19
    3c9c:	ldp	x19, x20, [sp, #32]
    3ca0:	ldp	x29, x30, [sp, #16]
    3ca4:	add	sp, sp, #0xa0
    3ca8:	ret
    3cac:	sub	x0, x2, #0x1
    3cb0:	cmp	x0, #0x1
    3cb4:	b.hi	3cc4 <PyThread_acquire_lock@plt+0x1304>  // b.pmore
    3cb8:	mov	x19, x2
    3cbc:	cbz	x8, 3bc0 <PyThread_acquire_lock@plt+0x1200>
    3cc0:	b	3bf4 <PyThread_acquire_lock@plt+0x1234>
    3cc4:	mov	x19, x2
    3cc8:	b	3bc0 <PyThread_acquire_lock@plt+0x1200>
    3ccc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3cd0:	add	x1, x1, #0xfe8
    3cd4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3cd8:	ldr	x0, [x0, #4000]
    3cdc:	ldr	x0, [x0]
    3ce0:	bl	2920 <PyErr_SetString@plt>
    3ce4:	mov	x19, #0x0                   	// #0
    3ce8:	b	3c98 <PyThread_acquire_lock@plt+0x12d8>
    3cec:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3cf0:	add	x1, x1, #0xf60
    3cf4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3cf8:	ldr	x0, [x0, #4000]
    3cfc:	ldr	x0, [x0]
    3d00:	bl	2920 <PyErr_SetString@plt>
    3d04:	mov	x19, #0x0                   	// #0
    3d08:	b	3c98 <PyThread_acquire_lock@plt+0x12d8>
    3d0c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3d10:	add	x1, x1, #0xf90
    3d14:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3d18:	ldr	x0, [x0, #4000]
    3d1c:	ldr	x0, [x0]
    3d20:	bl	2920 <PyErr_SetString@plt>
    3d24:	mov	x19, #0x0                   	// #0
    3d28:	b	3c98 <PyThread_acquire_lock@plt+0x12d8>
    3d2c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3d30:	add	x1, x1, #0xfc0
    3d34:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    3d38:	ldr	x0, [x0, #4024]
    3d3c:	ldr	x0, [x0]
    3d40:	bl	2920 <PyErr_SetString@plt>
    3d44:	add	x0, sp, #0x40
    3d48:	bl	2970 <PyBuffer_Release@plt>
    3d4c:	mov	x19, #0x0                   	// #0
    3d50:	b	3c98 <PyThread_acquire_lock@plt+0x12d8>
    3d54:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3d58:	add	x1, x1, #0xed8
    3d5c:	mov	x0, x19
    3d60:	bl	28a0 <strcmp@plt>
    3d64:	cbz	w0, 3d7c <PyThread_acquire_lock@plt+0x13bc>
    3d68:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    3d6c:	add	x1, x1, #0x0
    3d70:	mov	x0, x19
    3d74:	bl	28a0 <strcmp@plt>
    3d78:	cbnz	w0, 3d98 <PyThread_acquire_lock@plt+0x13d8>
    3d7c:	bl	2570 <EVP_sha512_224@plt>
    3d80:	ldr	x2, [sp, #80]
    3d84:	ldr	x1, [sp, #64]
    3d88:	bl	3524 <PyThread_acquire_lock@plt+0xb64>
    3d8c:	mov	x19, x0
    3d90:	cbz	x20, 3c98 <PyThread_acquire_lock@plt+0x12d8>
    3d94:	b	3c90 <PyThread_acquire_lock@plt+0x12d0>
    3d98:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3d9c:	add	x1, x1, #0xf38
    3da0:	mov	x0, x19
    3da4:	bl	28a0 <strcmp@plt>
    3da8:	cbz	w0, 3dc0 <PyThread_acquire_lock@plt+0x1400>
    3dac:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    3db0:	add	x1, x1, #0x10
    3db4:	mov	x0, x19
    3db8:	bl	28a0 <strcmp@plt>
    3dbc:	cbnz	w0, 3dc8 <PyThread_acquire_lock@plt+0x1408>
    3dc0:	bl	2960 <EVP_sha512_256@plt>
    3dc4:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3dc8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3dcc:	add	x1, x1, #0xf18
    3dd0:	mov	x0, x19
    3dd4:	bl	28a0 <strcmp@plt>
    3dd8:	cbz	w0, 3e78 <PyThread_acquire_lock@plt+0x14b8>
    3ddc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3de0:	add	x1, x1, #0xef8
    3de4:	mov	x0, x19
    3de8:	bl	28a0 <strcmp@plt>
    3dec:	cbz	w0, 3e80 <PyThread_acquire_lock@plt+0x14c0>
    3df0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3df4:	add	x1, x1, #0xf08
    3df8:	mov	x0, x19
    3dfc:	bl	28a0 <strcmp@plt>
    3e00:	cbz	w0, 3e88 <PyThread_acquire_lock@plt+0x14c8>
    3e04:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e08:	add	x1, x1, #0xee8
    3e0c:	mov	x0, x19
    3e10:	bl	28a0 <strcmp@plt>
    3e14:	cbz	w0, 3e90 <PyThread_acquire_lock@plt+0x14d0>
    3e18:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e1c:	add	x1, x1, #0xf48
    3e20:	mov	x0, x19
    3e24:	bl	28a0 <strcmp@plt>
    3e28:	cbz	w0, 3e98 <PyThread_acquire_lock@plt+0x14d8>
    3e2c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e30:	add	x1, x1, #0xf28
    3e34:	mov	x0, x19
    3e38:	bl	28a0 <strcmp@plt>
    3e3c:	cbz	w0, 3ea0 <PyThread_acquire_lock@plt+0x14e0>
    3e40:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    3e44:	add	x1, x1, #0x20
    3e48:	mov	x0, x19
    3e4c:	bl	28a0 <strcmp@plt>
    3e50:	cbz	w0, 3ea8 <PyThread_acquire_lock@plt+0x14e8>
    3e54:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    3e58:	add	x1, x1, #0x30
    3e5c:	mov	x0, x19
    3e60:	bl	28a0 <strcmp@plt>
    3e64:	mov	w1, w0
    3e68:	mov	x0, #0x0                   	// #0
    3e6c:	cbnz	w1, 3d80 <PyThread_acquire_lock@plt+0x13c0>
    3e70:	bl	28b0 <EVP_blake2b512@plt>
    3e74:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3e78:	bl	2900 <EVP_sha3_224@plt>
    3e7c:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3e80:	bl	27d0 <EVP_sha3_256@plt>
    3e84:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3e88:	bl	2790 <EVP_sha3_384@plt>
    3e8c:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3e90:	bl	25f0 <EVP_sha3_512@plt>
    3e94:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3e98:	bl	2680 <EVP_shake128@plt>
    3e9c:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3ea0:	bl	25b0 <EVP_shake256@plt>
    3ea4:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3ea8:	bl	2580 <EVP_blake2s256@plt>
    3eac:	b	3d80 <PyThread_acquire_lock@plt+0x13c0>
    3eb0:	mov	x19, #0x0                   	// #0
    3eb4:	b	3c98 <PyThread_acquire_lock@plt+0x12d8>
    3eb8:	mov	x19, x0
    3ebc:	b	3c98 <PyThread_acquire_lock@plt+0x12d8>
    3ec0:	stp	xzr, xzr, [sp, #64]
    3ec4:	stp	xzr, xzr, [sp, #80]
    3ec8:	stp	xzr, xzr, [sp, #96]
    3ecc:	stp	xzr, xzr, [sp, #112]
    3ed0:	stp	xzr, xzr, [sp, #128]
    3ed4:	add	x2, sp, #0x38
    3ed8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3edc:	add	x1, x1, #0xfe0
    3ee0:	bl	2880 <_PyArg_Parse_SizeT@plt>
    3ee4:	mov	x20, #0x0                   	// #0
    3ee8:	cbz	w0, 3ccc <PyThread_acquire_lock@plt+0x130c>
    3eec:	ldr	x19, [sp, #56]
    3ef0:	mov	x0, x19
    3ef4:	bl	2640 <EVP_get_digestbyname@plt>
    3ef8:	cbz	x0, 3d54 <PyThread_acquire_lock@plt+0x1394>
    3efc:	ldr	x2, [sp, #80]
    3f00:	ldr	x1, [sp, #64]
    3f04:	bl	3524 <PyThread_acquire_lock@plt+0xb64>
    3f08:	mov	x19, x0
    3f0c:	b	3c98 <PyThread_acquire_lock@plt+0x12d8>
    3f10:	sub	sp, sp, #0x140
    3f14:	stp	x29, x30, [sp, #16]
    3f18:	add	x29, sp, #0x10
    3f1c:	stp	x19, x20, [sp, #32]
    3f20:	stp	x21, x22, [sp, #48]
    3f24:	mov	x19, x1
    3f28:	mov	x1, x2
    3f2c:	cbz	x3, 40f8 <PyThread_acquire_lock@plt+0x1738>
    3f30:	ldr	x22, [x3, #16]
    3f34:	add	x22, x2, x22
    3f38:	sub	x21, x22, #0x1
    3f3c:	stp	xzr, xzr, [sp, #184]
    3f40:	stp	xzr, xzr, [sp, #200]
    3f44:	stp	xzr, xzr, [sp, #216]
    3f48:	stp	xzr, xzr, [sp, #232]
    3f4c:	stp	xzr, xzr, [sp, #248]
    3f50:	stp	xzr, xzr, [sp, #104]
    3f54:	stp	xzr, xzr, [sp, #120]
    3f58:	stp	xzr, xzr, [sp, #136]
    3f5c:	stp	xzr, xzr, [sp, #152]
    3f60:	stp	xzr, xzr, [sp, #168]
    3f64:	add	x0, sp, #0x108
    3f68:	str	x0, [sp]
    3f6c:	mov	w7, #0x0                   	// #0
    3f70:	mov	w6, #0x1                   	// #1
    3f74:	mov	w5, w6
    3f78:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    3f7c:	add	x4, x4, #0x260
    3f80:	add	x4, x4, #0x3a0
    3f84:	mov	x2, #0x0                   	// #0
    3f88:	mov	x0, x19
    3f8c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3f90:	mov	x19, x0
    3f94:	mov	x20, x0
    3f98:	cbz	x0, 44f8 <PyThread_acquire_lock@plt+0x1b38>
    3f9c:	mov	w2, #0x0                   	// #0
    3fa0:	add	x1, sp, #0xb8
    3fa4:	ldr	x0, [x19]
    3fa8:	bl	2750 <PyObject_GetBuffer@plt>
    3fac:	mov	x20, #0x0                   	// #0
    3fb0:	cbnz	w0, 44f8 <PyThread_acquire_lock@plt+0x1b38>
    3fb4:	mov	w1, #0x43                  	// #67
    3fb8:	add	x0, sp, #0xb8
    3fbc:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3fc0:	cbz	w0, 4150 <PyThread_acquire_lock@plt+0x1790>
    3fc4:	stp	x23, x24, [sp, #64]
    3fc8:	str	x25, [sp, #80]
    3fcc:	cbz	x21, 42c4 <PyThread_acquire_lock@plt+0x1904>
    3fd0:	ldr	x0, [x19, #8]
    3fd4:	cbz	x0, 4004 <PyThread_acquire_lock@plt+0x1644>
    3fd8:	mov	w2, #0x0                   	// #0
    3fdc:	add	x1, sp, #0x68
    3fe0:	bl	2750 <PyObject_GetBuffer@plt>
    3fe4:	mov	x20, #0x0                   	// #0
    3fe8:	cbnz	w0, 4674 <PyThread_acquire_lock@plt+0x1cb4>
    3fec:	mov	w1, #0x43                  	// #67
    3ff0:	add	x0, sp, #0x68
    3ff4:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3ff8:	cbz	w0, 4174 <PyThread_acquire_lock@plt+0x17b4>
    3ffc:	subs	x21, x22, #0x2
    4000:	b.eq	4408 <PyThread_acquire_lock@plt+0x1a48>  // b.none
    4004:	ldr	x23, [x19, #16]
    4008:	cbz	x23, 41d0 <PyThread_acquire_lock@plt+0x1810>
    400c:	ldr	x0, [x23, #8]
    4010:	ldr	x0, [x0, #168]
    4014:	tbz	w0, #24, 41a0 <PyThread_acquire_lock@plt+0x17e0>
    4018:	subs	x21, x21, #0x1
    401c:	b.eq	4420 <PyThread_acquire_lock@plt+0x1a60>  // b.none
    4020:	ldr	x24, [x19, #24]
    4024:	cbz	x24, 420c <PyThread_acquire_lock@plt+0x184c>
    4028:	ldr	x0, [x24, #8]
    402c:	ldr	x0, [x0, #168]
    4030:	tbz	w0, #24, 41dc <PyThread_acquire_lock@plt+0x181c>
    4034:	subs	x21, x21, #0x1
    4038:	b.eq	4434 <PyThread_acquire_lock@plt+0x1a74>  // b.none
    403c:	ldr	x22, [x19, #32]
    4040:	cbz	x22, 4248 <PyThread_acquire_lock@plt+0x1888>
    4044:	ldr	x0, [x22, #8]
    4048:	ldr	x0, [x0, #168]
    404c:	tbz	w0, #24, 4218 <PyThread_acquire_lock@plt+0x1858>
    4050:	subs	x21, x21, #0x1
    4054:	b.eq	4444 <PyThread_acquire_lock@plt+0x1a84>  // b.none
    4058:	ldr	x0, [x19, #40]
    405c:	cbz	x0, 4294 <PyThread_acquire_lock@plt+0x18d4>
    4060:	ldr	x0, [x0, #8]
    4064:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    4068:	ldr	x1, [x1, #4040]
    406c:	cmp	x0, x1
    4070:	b.eq	4254 <PyThread_acquire_lock@plt+0x1894>  // b.none
    4074:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    4078:	ldr	x1, [x1, #4040]
    407c:	bl	2800 <PyType_IsSubtype@plt>
    4080:	cbnz	w0, 4254 <PyThread_acquire_lock@plt+0x1894>
    4084:	ldr	x0, [x19, #40]
    4088:	bl	26d0 <PyLong_AsLong@plt>
    408c:	mov	x25, x0
    4090:	cmn	x0, #0x1
    4094:	b.eq	427c <PyThread_acquire_lock@plt+0x18bc>  // b.none
    4098:	cmp	x21, #0x1
    409c:	b.eq	444c <PyThread_acquire_lock@plt+0x1a8c>  // b.none
    40a0:	mov	x21, x25
    40a4:	ldr	x0, [x19, #48]
    40a8:	ldr	x0, [x0, #8]
    40ac:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    40b0:	ldr	x1, [x1, #4040]
    40b4:	cmp	x0, x1
    40b8:	b.eq	429c <PyThread_acquire_lock@plt+0x18dc>  // b.none
    40bc:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    40c0:	ldr	x1, [x1, #4040]
    40c4:	bl	2800 <PyType_IsSubtype@plt>
    40c8:	cbnz	w0, 429c <PyThread_acquire_lock@plt+0x18dc>
    40cc:	ldr	x0, [x19, #48]
    40d0:	bl	26d0 <PyLong_AsLong@plt>
    40d4:	mov	x25, x0
    40d8:	cmn	x0, #0x1
    40dc:	b.ne	42d8 <PyThread_acquire_lock@plt+0x1918>  // b.any
    40e0:	bl	2720 <PyErr_Occurred@plt>
    40e4:	mov	x20, #0x0                   	// #0
    40e8:	cbz	x0, 42d8 <PyThread_acquire_lock@plt+0x1918>
    40ec:	ldp	x23, x24, [sp, #64]
    40f0:	ldr	x25, [sp, #80]
    40f4:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    40f8:	sub	x21, x2, #0x1
    40fc:	stp	xzr, xzr, [sp, #184]
    4100:	stp	xzr, xzr, [sp, #200]
    4104:	stp	xzr, xzr, [sp, #216]
    4108:	stp	xzr, xzr, [sp, #232]
    410c:	stp	xzr, xzr, [sp, #248]
    4110:	stp	xzr, xzr, [sp, #104]
    4114:	stp	xzr, xzr, [sp, #120]
    4118:	stp	xzr, xzr, [sp, #136]
    411c:	stp	xzr, xzr, [sp, #152]
    4120:	stp	xzr, xzr, [sp, #168]
    4124:	cmp	x2, #0x1
    4128:	b.ne	413c <PyThread_acquire_lock@plt+0x177c>  // b.any
    412c:	cbnz	x19, 4144 <PyThread_acquire_lock@plt+0x1784>
    4130:	mov	x22, x2
    4134:	mov	x21, #0x0                   	// #0
    4138:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    413c:	mov	x22, x2
    4140:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    4144:	mov	x22, x2
    4148:	mov	x21, #0x0                   	// #0
    414c:	b	3f9c <PyThread_acquire_lock@plt+0x15dc>
    4150:	ldr	x3, [x19]
    4154:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    4158:	add	x2, x2, #0xe08
    415c:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4160:	add	x1, x1, #0x40
    4164:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    4168:	add	x0, x0, #0x58
    416c:	bl	29b0 <_PyArg_BadArgument@plt>
    4170:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4174:	ldr	x3, [x19, #8]
    4178:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    417c:	add	x2, x2, #0xe08
    4180:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4184:	add	x1, x1, #0x60
    4188:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    418c:	add	x0, x0, #0x58
    4190:	bl	29b0 <_PyArg_BadArgument@plt>
    4194:	ldp	x23, x24, [sp, #64]
    4198:	ldr	x25, [sp, #80]
    419c:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    41a0:	mov	x3, x23
    41a4:	adrp	x2, 5000 <PyInit__hashlib@@Base+0x368>
    41a8:	add	x2, x2, #0x70
    41ac:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    41b0:	add	x1, x1, #0x78
    41b4:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    41b8:	add	x0, x0, #0x58
    41bc:	bl	29b0 <_PyArg_BadArgument@plt>
    41c0:	mov	x20, #0x0                   	// #0
    41c4:	ldp	x23, x24, [sp, #64]
    41c8:	ldr	x25, [sp, #80]
    41cc:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    41d0:	adrp	x23, 16000 <PyInit__hashlib@@Base+0x11368>
    41d4:	ldr	x23, [x23, #4056]
    41d8:	b	4020 <PyThread_acquire_lock@plt+0x1660>
    41dc:	mov	x3, x24
    41e0:	adrp	x2, 5000 <PyInit__hashlib@@Base+0x368>
    41e4:	add	x2, x2, #0x70
    41e8:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    41ec:	add	x1, x1, #0x88
    41f0:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    41f4:	add	x0, x0, #0x58
    41f8:	bl	29b0 <_PyArg_BadArgument@plt>
    41fc:	mov	x20, #0x0                   	// #0
    4200:	ldp	x23, x24, [sp, #64]
    4204:	ldr	x25, [sp, #80]
    4208:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    420c:	adrp	x24, 16000 <PyInit__hashlib@@Base+0x11368>
    4210:	ldr	x24, [x24, #4056]
    4214:	b	403c <PyThread_acquire_lock@plt+0x167c>
    4218:	mov	x3, x22
    421c:	adrp	x2, 5000 <PyInit__hashlib@@Base+0x368>
    4220:	add	x2, x2, #0x70
    4224:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4228:	add	x1, x1, #0x98
    422c:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    4230:	add	x0, x0, #0x58
    4234:	bl	29b0 <_PyArg_BadArgument@plt>
    4238:	mov	x20, #0x0                   	// #0
    423c:	ldp	x23, x24, [sp, #64]
    4240:	ldr	x25, [sp, #80]
    4244:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4248:	adrp	x22, 16000 <PyInit__hashlib@@Base+0x11368>
    424c:	ldr	x22, [x22, #4056]
    4250:	b	4058 <PyThread_acquire_lock@plt+0x1698>
    4254:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4258:	add	x1, x1, #0xa8
    425c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4260:	ldr	x0, [x0, #4000]
    4264:	ldr	x0, [x0]
    4268:	bl	2920 <PyErr_SetString@plt>
    426c:	mov	x20, #0x0                   	// #0
    4270:	ldp	x23, x24, [sp, #64]
    4274:	ldr	x25, [sp, #80]
    4278:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    427c:	bl	2720 <PyErr_Occurred@plt>
    4280:	mov	x20, #0x0                   	// #0
    4284:	cbz	x0, 4098 <PyThread_acquire_lock@plt+0x16d8>
    4288:	ldp	x23, x24, [sp, #64]
    428c:	ldr	x25, [sp, #80]
    4290:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4294:	mov	x21, #0x0                   	// #0
    4298:	b	40a4 <PyThread_acquire_lock@plt+0x16e4>
    429c:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    42a0:	add	x1, x1, #0xa8
    42a4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    42a8:	ldr	x0, [x0, #4000]
    42ac:	ldr	x0, [x0]
    42b0:	bl	2920 <PyErr_SetString@plt>
    42b4:	mov	x20, #0x0                   	// #0
    42b8:	ldp	x23, x24, [sp, #64]
    42bc:	ldr	x25, [sp, #80]
    42c0:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    42c4:	mov	x25, #0x40                  	// #64
    42c8:	adrp	x22, 16000 <PyInit__hashlib@@Base+0x11368>
    42cc:	ldr	x22, [x22, #4056]
    42d0:	mov	x24, x22
    42d4:	mov	x23, x22
    42d8:	ldr	x1, [sp, #200]
    42dc:	mov	x0, #0x7fffffff            	// #2147483647
    42e0:	cmp	x1, x0
    42e4:	b.gt	4458 <PyThread_acquire_lock@plt+0x1a98>
    42e8:	ldr	x20, [sp, #104]
    42ec:	cbz	x20, 4480 <PyThread_acquire_lock@plt+0x1ac0>
    42f0:	ldr	x1, [sp, #120]
    42f4:	mov	x0, #0x7fffffff            	// #2147483647
    42f8:	cmp	x1, x0
    42fc:	b.gt	44a4 <PyThread_acquire_lock@plt+0x1ae4>
    4300:	mov	x0, x23
    4304:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    4308:	mov	x19, x0
    430c:	cmn	x0, #0x1
    4310:	b.eq	44cc <PyThread_acquire_lock@plt+0x1b0c>  // b.none
    4314:	cmp	x0, #0x1
    4318:	b.ls	44d4 <PyThread_acquire_lock@plt+0x1b14>  // b.plast
    431c:	sub	x0, x0, #0x1
    4320:	tst	x0, x19
    4324:	b.ne	44d4 <PyThread_acquire_lock@plt+0x1b14>  // b.any
    4328:	mov	x0, x24
    432c:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    4330:	mov	x23, x0
    4334:	cmn	x0, #0x1
    4338:	b.eq	4558 <PyThread_acquire_lock@plt+0x1b98>  // b.none
    433c:	mov	x0, x22
    4340:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    4344:	mov	x22, x0
    4348:	cmn	x0, #0x1
    434c:	b.eq	4588 <PyThread_acquire_lock@plt+0x1bc8>  // b.none
    4350:	mov	x24, x21
    4354:	mov	x0, #0x7fffffff            	// #2147483647
    4358:	cmp	x21, x0
    435c:	b.hi	45b8 <PyThread_acquire_lock@plt+0x1bf8>  // b.pmore
    4360:	sub	x1, x25, #0x1
    4364:	mov	x0, #0x7ffffffe            	// #2147483646
    4368:	cmp	x1, x0
    436c:	b.hi	45e4 <PyThread_acquire_lock@plt+0x1c24>  // b.pmore
    4370:	str	xzr, [sp, #8]
    4374:	str	xzr, [sp]
    4378:	mov	x7, x21
    437c:	mov	x6, x22
    4380:	mov	x5, x23
    4384:	mov	x4, x19
    4388:	mov	x3, #0x0                   	// #0
    438c:	mov	x2, #0x0                   	// #0
    4390:	mov	x1, #0x0                   	// #0
    4394:	mov	x0, #0x0                   	// #0
    4398:	bl	2830 <EVP_PBE_scrypt@plt>
    439c:	cbz	w0, 4610 <PyThread_acquire_lock@plt+0x1c50>
    43a0:	mov	x1, x25
    43a4:	mov	x0, #0x0                   	// #0
    43a8:	bl	2870 <PyBytes_FromStringAndSize@plt>
    43ac:	mov	x20, x0
    43b0:	cbz	x0, 4680 <PyThread_acquire_lock@plt+0x1cc0>
    43b4:	bl	27b0 <PyEval_SaveThread@plt>
    43b8:	mov	x21, x0
    43bc:	str	x25, [sp, #8]
    43c0:	add	x0, x20, #0x20
    43c4:	str	x0, [sp]
    43c8:	mov	x7, x24
    43cc:	mov	x6, x22
    43d0:	mov	x5, x23
    43d4:	mov	x4, x19
    43d8:	ldr	x3, [sp, #120]
    43dc:	ldr	x2, [sp, #104]
    43e0:	ldr	x1, [sp, #200]
    43e4:	ldr	x0, [sp, #184]
    43e8:	bl	2830 <EVP_PBE_scrypt@plt>
    43ec:	mov	w19, w0
    43f0:	mov	x0, x21
    43f4:	bl	2770 <PyEval_RestoreThread@plt>
    43f8:	cbz	w19, 4638 <PyThread_acquire_lock@plt+0x1c78>
    43fc:	ldp	x23, x24, [sp, #64]
    4400:	ldr	x25, [sp, #80]
    4404:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4408:	mov	x25, #0x40                  	// #64
    440c:	adrp	x22, 16000 <PyInit__hashlib@@Base+0x11368>
    4410:	ldr	x22, [x22, #4056]
    4414:	mov	x24, x22
    4418:	mov	x23, x22
    441c:	b	42d8 <PyThread_acquire_lock@plt+0x1918>
    4420:	mov	x25, #0x40                  	// #64
    4424:	adrp	x22, 16000 <PyInit__hashlib@@Base+0x11368>
    4428:	ldr	x22, [x22, #4056]
    442c:	mov	x24, x22
    4430:	b	42d8 <PyThread_acquire_lock@plt+0x1918>
    4434:	mov	x25, #0x40                  	// #64
    4438:	adrp	x22, 16000 <PyInit__hashlib@@Base+0x11368>
    443c:	ldr	x22, [x22, #4056]
    4440:	b	42d8 <PyThread_acquire_lock@plt+0x1918>
    4444:	mov	x25, #0x40                  	// #64
    4448:	b	42d8 <PyThread_acquire_lock@plt+0x1918>
    444c:	mov	x21, x25
    4450:	mov	x25, #0x40                  	// #64
    4454:	b	42d8 <PyThread_acquire_lock@plt+0x1918>
    4458:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    445c:	add	x1, x1, #0xd0
    4460:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4464:	ldr	x0, [x0, #4064]
    4468:	ldr	x0, [x0]
    446c:	bl	2920 <PyErr_SetString@plt>
    4470:	mov	x20, #0x0                   	// #0
    4474:	ldp	x23, x24, [sp, #64]
    4478:	ldr	x25, [sp, #80]
    447c:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4480:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4484:	add	x1, x1, #0xe8
    4488:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    448c:	ldr	x0, [x0, #4000]
    4490:	ldr	x0, [x0]
    4494:	bl	2920 <PyErr_SetString@plt>
    4498:	ldp	x23, x24, [sp, #64]
    449c:	ldr	x25, [sp, #80]
    44a0:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    44a4:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    44a8:	add	x1, x1, #0x100
    44ac:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    44b0:	ldr	x0, [x0, #4064]
    44b4:	ldr	x0, [x0]
    44b8:	bl	2920 <PyErr_SetString@plt>
    44bc:	mov	x20, #0x0                   	// #0
    44c0:	ldp	x23, x24, [sp, #64]
    44c4:	ldr	x25, [sp, #80]
    44c8:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    44cc:	bl	2720 <PyErr_Occurred@plt>
    44d0:	cbnz	x0, 4530 <PyThread_acquire_lock@plt+0x1b70>
    44d4:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    44d8:	add	x1, x1, #0x148
    44dc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    44e0:	ldr	x0, [x0, #3984]
    44e4:	ldr	x0, [x0]
    44e8:	bl	2920 <PyErr_SetString@plt>
    44ec:	mov	x20, #0x0                   	// #0
    44f0:	ldp	x23, x24, [sp, #64]
    44f4:	ldr	x25, [sp, #80]
    44f8:	ldr	x0, [sp, #192]
    44fc:	cbz	x0, 4508 <PyThread_acquire_lock@plt+0x1b48>
    4500:	add	x0, sp, #0xb8
    4504:	bl	2970 <PyBuffer_Release@plt>
    4508:	ldr	x0, [sp, #112]
    450c:	cbz	x0, 4518 <PyThread_acquire_lock@plt+0x1b58>
    4510:	add	x0, sp, #0x68
    4514:	bl	2970 <PyBuffer_Release@plt>
    4518:	mov	x0, x20
    451c:	ldp	x19, x20, [sp, #32]
    4520:	ldp	x21, x22, [sp, #48]
    4524:	ldp	x29, x30, [sp, #16]
    4528:	add	sp, sp, #0x140
    452c:	ret
    4530:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4534:	add	x1, x1, #0x118
    4538:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    453c:	ldr	x0, [x0, #4000]
    4540:	ldr	x0, [x0]
    4544:	bl	2920 <PyErr_SetString@plt>
    4548:	mov	x20, #0x0                   	// #0
    454c:	ldp	x23, x24, [sp, #64]
    4550:	ldr	x25, [sp, #80]
    4554:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4558:	bl	2720 <PyErr_Occurred@plt>
    455c:	cbz	x0, 433c <PyThread_acquire_lock@plt+0x197c>
    4560:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4564:	add	x1, x1, #0x160
    4568:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    456c:	ldr	x0, [x0, #4000]
    4570:	ldr	x0, [x0]
    4574:	bl	2920 <PyErr_SetString@plt>
    4578:	mov	x20, #0x0                   	// #0
    457c:	ldp	x23, x24, [sp, #64]
    4580:	ldr	x25, [sp, #80]
    4584:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4588:	bl	2720 <PyErr_Occurred@plt>
    458c:	cbz	x0, 4350 <PyThread_acquire_lock@plt+0x1990>
    4590:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4594:	add	x1, x1, #0x190
    4598:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    459c:	ldr	x0, [x0, #4000]
    45a0:	ldr	x0, [x0]
    45a4:	bl	2920 <PyErr_SetString@plt>
    45a8:	mov	x20, #0x0                   	// #0
    45ac:	ldp	x23, x24, [sp, #64]
    45b0:	ldr	x25, [sp, #80]
    45b4:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    45b8:	mov	w2, #0x7fffffff            	// #2147483647
    45bc:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    45c0:	add	x1, x1, #0x1c0
    45c4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    45c8:	ldr	x0, [x0, #3984]
    45cc:	ldr	x0, [x0]
    45d0:	bl	26f0 <PyErr_Format@plt>
    45d4:	mov	x20, #0x0                   	// #0
    45d8:	ldp	x23, x24, [sp, #64]
    45dc:	ldr	x25, [sp, #80]
    45e0:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    45e4:	mov	w2, #0x7fffffff            	// #2147483647
    45e8:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    45ec:	add	x1, x1, #0x1f0
    45f0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    45f4:	ldr	x0, [x0, #3984]
    45f8:	ldr	x0, [x0]
    45fc:	bl	26f0 <PyErr_Format@plt>
    4600:	mov	x20, #0x0                   	// #0
    4604:	ldp	x23, x24, [sp, #64]
    4608:	ldr	x25, [sp, #80]
    460c:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4610:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4614:	add	x1, x1, #0x228
    4618:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    461c:	ldr	x0, [x0, #3984]
    4620:	ldr	x0, [x0]
    4624:	bl	2920 <PyErr_SetString@plt>
    4628:	mov	x20, #0x0                   	// #0
    462c:	ldp	x23, x24, [sp, #64]
    4630:	ldr	x25, [sp, #80]
    4634:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4638:	ldr	x0, [x20]
    463c:	sub	x0, x0, #0x1
    4640:	str	x0, [x20]
    4644:	cbz	x0, 4668 <PyThread_acquire_lock@plt+0x1ca8>
    4648:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    464c:	ldr	x0, [x0, #3984]
    4650:	ldr	x0, [x0]
    4654:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    4658:	mov	x20, #0x0                   	// #0
    465c:	ldp	x23, x24, [sp, #64]
    4660:	ldr	x25, [sp, #80]
    4664:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4668:	mov	x0, x20
    466c:	bl	28e0 <_Py_Dealloc@plt>
    4670:	b	4648 <PyThread_acquire_lock@plt+0x1c88>
    4674:	ldp	x23, x24, [sp, #64]
    4678:	ldr	x25, [sp, #80]
    467c:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4680:	ldp	x23, x24, [sp, #64]
    4684:	ldr	x25, [sp, #80]
    4688:	b	44f8 <PyThread_acquire_lock@plt+0x1b38>
    468c:	sub	sp, sp, #0x120
    4690:	stp	x29, x30, [sp, #16]
    4694:	add	x29, sp, #0x10
    4698:	stp	x19, x20, [sp, #32]
    469c:	stp	x21, x22, [sp, #48]
    46a0:	mov	x19, x1
    46a4:	mov	x1, x2
    46a8:	cbz	x3, 48a8 <PyThread_acquire_lock@plt+0x1ee8>
    46ac:	ldr	x21, [x3, #16]
    46b0:	add	x21, x2, x21
    46b4:	stp	xzr, xzr, [sp, #168]
    46b8:	stp	xzr, xzr, [sp, #184]
    46bc:	stp	xzr, xzr, [sp, #200]
    46c0:	stp	xzr, xzr, [sp, #216]
    46c4:	stp	xzr, xzr, [sp, #232]
    46c8:	stp	xzr, xzr, [sp, #88]
    46cc:	stp	xzr, xzr, [sp, #104]
    46d0:	stp	xzr, xzr, [sp, #120]
    46d4:	stp	xzr, xzr, [sp, #136]
    46d8:	stp	xzr, xzr, [sp, #152]
    46dc:	add	x0, sp, #0xf8
    46e0:	str	x0, [sp]
    46e4:	mov	w7, #0x0                   	// #0
    46e8:	mov	w6, #0x5                   	// #5
    46ec:	mov	w5, #0x4                   	// #4
    46f0:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12368>
    46f4:	add	x4, x4, #0x260
    46f8:	add	x4, x4, #0x3e0
    46fc:	mov	x2, #0x0                   	// #0
    4700:	mov	x0, x19
    4704:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4708:	mov	x19, x0
    470c:	cbz	x0, 4b34 <PyThread_acquire_lock@plt+0x2174>
    4710:	ldr	x0, [x19]
    4714:	ldr	x1, [x0, #8]
    4718:	ldr	x1, [x1, #168]
    471c:	tbz	w1, #28, 48f0 <PyThread_acquire_lock@plt+0x1f30>
    4720:	add	x1, sp, #0x50
    4724:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    4728:	mov	x20, x0
    472c:	cbz	x0, 4934 <PyThread_acquire_lock@plt+0x1f74>
    4730:	bl	2980 <strlen@plt>
    4734:	ldr	x1, [sp, #80]
    4738:	cmp	x0, x1
    473c:	b.ne	4918 <PyThread_acquire_lock@plt+0x1f58>  // b.any
    4740:	mov	w2, #0x0                   	// #0
    4744:	add	x1, sp, #0xa8
    4748:	ldr	x0, [x19, #8]
    474c:	bl	2750 <PyObject_GetBuffer@plt>
    4750:	cbnz	w0, 4b3c <PyThread_acquire_lock@plt+0x217c>
    4754:	mov	w1, #0x43                  	// #67
    4758:	add	x0, sp, #0xa8
    475c:	bl	27f0 <PyBuffer_IsContiguous@plt>
    4760:	cbz	w0, 496c <PyThread_acquire_lock@plt+0x1fac>
    4764:	mov	w2, #0x0                   	// #0
    4768:	add	x1, sp, #0x58
    476c:	ldr	x0, [x19, #16]
    4770:	bl	2750 <PyObject_GetBuffer@plt>
    4774:	cbnz	w0, 4b44 <PyThread_acquire_lock@plt+0x2184>
    4778:	mov	w1, #0x43                  	// #67
    477c:	add	x0, sp, #0x58
    4780:	bl	27f0 <PyBuffer_IsContiguous@plt>
    4784:	cbz	w0, 4994 <PyThread_acquire_lock@plt+0x1fd4>
    4788:	ldr	x0, [x19, #24]
    478c:	ldr	x0, [x0, #8]
    4790:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    4794:	ldr	x1, [x1, #4040]
    4798:	cmp	x0, x1
    479c:	b.eq	49bc <PyThread_acquire_lock@plt+0x1ffc>  // b.none
    47a0:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    47a4:	ldr	x1, [x1, #4040]
    47a8:	bl	2800 <PyType_IsSubtype@plt>
    47ac:	cbnz	w0, 49bc <PyThread_acquire_lock@plt+0x1ffc>
    47b0:	ldr	x0, [x19, #24]
    47b4:	bl	26d0 <PyLong_AsLong@plt>
    47b8:	mov	x22, x0
    47bc:	cmn	x0, #0x1
    47c0:	b.eq	49dc <PyThread_acquire_lock@plt+0x201c>  // b.none
    47c4:	cmp	x21, #0x4
    47c8:	b.eq	49ec <PyThread_acquire_lock@plt+0x202c>  // b.none
    47cc:	ldr	x21, [x19, #32]
    47d0:	mov	x0, x20
    47d4:	bl	2640 <EVP_get_digestbyname@plt>
    47d8:	mov	x19, x0
    47dc:	cbz	x0, 49f8 <PyThread_acquire_lock@plt+0x2038>
    47e0:	ldr	x1, [sp, #184]
    47e4:	mov	x0, #0x7fffffff            	// #2147483647
    47e8:	cmp	x1, x0
    47ec:	b.gt	4a18 <PyThread_acquire_lock@plt+0x2058>
    47f0:	ldr	x1, [sp, #104]
    47f4:	mov	x0, #0x7fffffff            	// #2147483647
    47f8:	cmp	x1, x0
    47fc:	b.gt	4a38 <PyThread_acquire_lock@plt+0x2078>
    4800:	cmp	x22, #0x0
    4804:	b.le	4a58 <PyThread_acquire_lock@plt+0x2098>
    4808:	mov	x0, #0x7fffffff            	// #2147483647
    480c:	cmp	x22, x0
    4810:	b.gt	4a78 <PyThread_acquire_lock@plt+0x20b8>
    4814:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4818:	ldr	x0, [x0, #4056]
    481c:	cmp	x21, x0
    4820:	b.eq	4a98 <PyThread_acquire_lock@plt+0x20d8>  // b.none
    4824:	mov	x0, x21
    4828:	bl	26d0 <PyLong_AsLong@plt>
    482c:	mov	x21, x0
    4830:	cmn	x0, #0x1
    4834:	b.eq	4ab0 <PyThread_acquire_lock@plt+0x20f0>  // b.none
    4838:	cmp	x0, #0x0
    483c:	b.le	4abc <PyThread_acquire_lock@plt+0x20fc>
    4840:	mov	x0, #0x7fffffff            	// #2147483647
    4844:	cmp	x21, x0
    4848:	b.gt	4adc <PyThread_acquire_lock@plt+0x211c>
    484c:	mov	x1, x21
    4850:	mov	x0, #0x0                   	// #0
    4854:	bl	2870 <PyBytes_FromStringAndSize@plt>
    4858:	mov	x20, x0
    485c:	cbz	x0, 4934 <PyThread_acquire_lock@plt+0x1f74>
    4860:	str	x23, [sp, #64]
    4864:	bl	27b0 <PyEval_SaveThread@plt>
    4868:	mov	x23, x0
    486c:	add	x7, x20, #0x20
    4870:	mov	w6, w21
    4874:	mov	x5, x19
    4878:	mov	w4, w22
    487c:	ldr	w3, [sp, #104]
    4880:	ldr	x2, [sp, #88]
    4884:	ldr	w1, [sp, #184]
    4888:	ldr	x0, [sp, #168]
    488c:	bl	2540 <PKCS5_PBKDF2_HMAC@plt>
    4890:	mov	w19, w0
    4894:	mov	x0, x23
    4898:	bl	2770 <PyEval_RestoreThread@plt>
    489c:	cbz	w19, 4afc <PyThread_acquire_lock@plt+0x213c>
    48a0:	ldr	x23, [sp, #64]
    48a4:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    48a8:	stp	xzr, xzr, [sp, #168]
    48ac:	stp	xzr, xzr, [sp, #184]
    48b0:	stp	xzr, xzr, [sp, #200]
    48b4:	stp	xzr, xzr, [sp, #216]
    48b8:	stp	xzr, xzr, [sp, #232]
    48bc:	stp	xzr, xzr, [sp, #88]
    48c0:	stp	xzr, xzr, [sp, #104]
    48c4:	stp	xzr, xzr, [sp, #120]
    48c8:	stp	xzr, xzr, [sp, #136]
    48cc:	stp	xzr, xzr, [sp, #152]
    48d0:	sub	x0, x2, #0x4
    48d4:	cmp	x0, #0x1
    48d8:	b.hi	48e8 <PyThread_acquire_lock@plt+0x1f28>  // b.pmore
    48dc:	mov	x21, x2
    48e0:	cbz	x19, 46dc <PyThread_acquire_lock@plt+0x1d1c>
    48e4:	b	4710 <PyThread_acquire_lock@plt+0x1d50>
    48e8:	mov	x21, x2
    48ec:	b	46dc <PyThread_acquire_lock@plt+0x1d1c>
    48f0:	mov	x3, x0
    48f4:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    48f8:	add	x2, x2, #0xe50
    48fc:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4900:	add	x1, x1, #0x260
    4904:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    4908:	add	x0, x0, #0x278
    490c:	bl	29b0 <_PyArg_BadArgument@plt>
    4910:	mov	x20, #0x0                   	// #0
    4914:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4918:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    491c:	add	x1, x1, #0xe70
    4920:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4924:	ldr	x0, [x0, #3984]
    4928:	ldr	x0, [x0]
    492c:	bl	2920 <PyErr_SetString@plt>
    4930:	mov	x20, #0x0                   	// #0
    4934:	ldr	x0, [sp, #176]
    4938:	cbz	x0, 4944 <PyThread_acquire_lock@plt+0x1f84>
    493c:	add	x0, sp, #0xa8
    4940:	bl	2970 <PyBuffer_Release@plt>
    4944:	ldr	x0, [sp, #96]
    4948:	cbz	x0, 4954 <PyThread_acquire_lock@plt+0x1f94>
    494c:	add	x0, sp, #0x58
    4950:	bl	2970 <PyBuffer_Release@plt>
    4954:	mov	x0, x20
    4958:	ldp	x19, x20, [sp, #32]
    495c:	ldp	x21, x22, [sp, #48]
    4960:	ldp	x29, x30, [sp, #16]
    4964:	add	sp, sp, #0x120
    4968:	ret
    496c:	ldr	x3, [x19, #8]
    4970:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    4974:	add	x2, x2, #0xe08
    4978:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    497c:	add	x1, x1, #0x40
    4980:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    4984:	add	x0, x0, #0x278
    4988:	bl	29b0 <_PyArg_BadArgument@plt>
    498c:	mov	x20, #0x0                   	// #0
    4990:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4994:	ldr	x3, [x19, #16]
    4998:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    499c:	add	x2, x2, #0xe08
    49a0:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    49a4:	add	x1, x1, #0x60
    49a8:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    49ac:	add	x0, x0, #0x278
    49b0:	bl	29b0 <_PyArg_BadArgument@plt>
    49b4:	mov	x20, #0x0                   	// #0
    49b8:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    49bc:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    49c0:	add	x1, x1, #0xa8
    49c4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    49c8:	ldr	x0, [x0, #4000]
    49cc:	ldr	x0, [x0]
    49d0:	bl	2920 <PyErr_SetString@plt>
    49d4:	mov	x20, #0x0                   	// #0
    49d8:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    49dc:	bl	2720 <PyErr_Occurred@plt>
    49e0:	cbz	x0, 47c4 <PyThread_acquire_lock@plt+0x1e04>
    49e4:	mov	x20, #0x0                   	// #0
    49e8:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    49ec:	adrp	x21, 16000 <PyInit__hashlib@@Base+0x11368>
    49f0:	ldr	x21, [x21, #4056]
    49f4:	b	47d0 <PyThread_acquire_lock@plt+0x1e10>
    49f8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    49fc:	add	x1, x1, #0xe88
    4a00:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4a04:	ldr	x0, [x0, #3984]
    4a08:	ldr	x0, [x0]
    4a0c:	bl	2920 <PyErr_SetString@plt>
    4a10:	mov	x20, x19
    4a14:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4a18:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4a1c:	add	x1, x1, #0xd0
    4a20:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4a24:	ldr	x0, [x0, #4064]
    4a28:	ldr	x0, [x0]
    4a2c:	bl	2920 <PyErr_SetString@plt>
    4a30:	mov	x20, #0x0                   	// #0
    4a34:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4a38:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4a3c:	add	x1, x1, #0x100
    4a40:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4a44:	ldr	x0, [x0, #4064]
    4a48:	ldr	x0, [x0]
    4a4c:	bl	2920 <PyErr_SetString@plt>
    4a50:	mov	x20, #0x0                   	// #0
    4a54:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4a58:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4a5c:	add	x1, x1, #0x288
    4a60:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4a64:	ldr	x0, [x0, #3984]
    4a68:	ldr	x0, [x0]
    4a6c:	bl	2920 <PyErr_SetString@plt>
    4a70:	mov	x20, #0x0                   	// #0
    4a74:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4a78:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4a7c:	add	x1, x1, #0x2b0
    4a80:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4a84:	ldr	x0, [x0, #4064]
    4a88:	ldr	x0, [x0]
    4a8c:	bl	2920 <PyErr_SetString@plt>
    4a90:	mov	x20, #0x0                   	// #0
    4a94:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4a98:	mov	x0, x19
    4a9c:	bl	26c0 <EVP_MD_size@plt>
    4aa0:	sxtw	x21, w0
    4aa4:	cmp	x21, #0x0
    4aa8:	b.gt	484c <PyThread_acquire_lock@plt+0x1e8c>
    4aac:	b	4abc <PyThread_acquire_lock@plt+0x20fc>
    4ab0:	bl	2720 <PyErr_Occurred@plt>
    4ab4:	mov	x20, #0x0                   	// #0
    4ab8:	cbnz	x0, 4934 <PyThread_acquire_lock@plt+0x1f74>
    4abc:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4ac0:	add	x1, x1, #0x2d0
    4ac4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4ac8:	ldr	x0, [x0, #3984]
    4acc:	ldr	x0, [x0]
    4ad0:	bl	2920 <PyErr_SetString@plt>
    4ad4:	mov	x20, #0x0                   	// #0
    4ad8:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4adc:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4ae0:	add	x1, x1, #0x2f8
    4ae4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4ae8:	ldr	x0, [x0, #4064]
    4aec:	ldr	x0, [x0]
    4af0:	bl	2920 <PyErr_SetString@plt>
    4af4:	mov	x20, #0x0                   	// #0
    4af8:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4afc:	ldr	x0, [x20]
    4b00:	sub	x0, x0, #0x1
    4b04:	str	x0, [x20]
    4b08:	cbz	x0, 4b28 <PyThread_acquire_lock@plt+0x2168>
    4b0c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4b10:	ldr	x0, [x0, #3984]
    4b14:	ldr	x0, [x0]
    4b18:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    4b1c:	mov	x20, #0x0                   	// #0
    4b20:	ldr	x23, [sp, #64]
    4b24:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4b28:	mov	x0, x20
    4b2c:	bl	28e0 <_Py_Dealloc@plt>
    4b30:	b	4b0c <PyThread_acquire_lock@plt+0x214c>
    4b34:	mov	x20, x0
    4b38:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4b3c:	mov	x20, #0x0                   	// #0
    4b40:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4b44:	mov	x20, #0x0                   	// #0
    4b48:	b	4934 <PyThread_acquire_lock@plt+0x1f74>
    4b4c:	stp	x29, x30, [sp, #-32]!
    4b50:	mov	x29, sp
    4b54:	stp	x19, x20, [sp, #16]
    4b58:	mov	x20, x0
    4b5c:	bl	34b4 <PyThread_acquire_lock@plt+0xaf4>
    4b60:	mov	x19, x0
    4b64:	cbz	x0, 4b78 <PyThread_acquire_lock@plt+0x21b8>
    4b68:	mov	x1, x20
    4b6c:	ldr	x0, [x0, #16]
    4b70:	bl	3130 <PyThread_acquire_lock@plt+0x770>
    4b74:	cbz	w0, 4b88 <PyThread_acquire_lock@plt+0x21c8>
    4b78:	mov	x0, x19
    4b7c:	ldp	x19, x20, [sp, #16]
    4b80:	ldp	x29, x30, [sp], #32
    4b84:	ret
    4b88:	ldr	x0, [x19]
    4b8c:	sub	x0, x0, #0x1
    4b90:	str	x0, [x19]
    4b94:	cbz	x0, 4bb0 <PyThread_acquire_lock@plt+0x21f0>
    4b98:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11368>
    4b9c:	ldr	x0, [x0, #3984]
    4ba0:	ldr	x0, [x0]
    4ba4:	bl	2ad8 <PyThread_acquire_lock@plt+0x118>
    4ba8:	mov	x19, x0
    4bac:	b	4b78 <PyThread_acquire_lock@plt+0x21b8>
    4bb0:	mov	x0, x19
    4bb4:	bl	28e0 <_Py_Dealloc@plt>
    4bb8:	b	4b98 <PyThread_acquire_lock@plt+0x21d8>
    4bbc:	stp	x29, x30, [sp, #-32]!
    4bc0:	mov	x29, sp
    4bc4:	stp	x19, x20, [sp, #16]
    4bc8:	mov	x20, x0
    4bcc:	ldr	x0, [x0, #16]
    4bd0:	bl	2590 <EVP_MD_CTX_md@plt>
    4bd4:	bl	2f00 <PyThread_acquire_lock@plt+0x540>
    4bd8:	mov	x19, x0
    4bdc:	cbz	x0, 4c24 <PyThread_acquire_lock@plt+0x2264>
    4be0:	mov	x2, x20
    4be4:	mov	x1, x0
    4be8:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x368>
    4bec:	add	x0, x0, #0x318
    4bf0:	bl	26a0 <PyUnicode_FromFormat@plt>
    4bf4:	mov	x20, x0
    4bf8:	ldr	x1, [x19]
    4bfc:	sub	x1, x1, #0x1
    4c00:	str	x1, [x19]
    4c04:	cbz	x1, 4c18 <PyThread_acquire_lock@plt+0x2258>
    4c08:	mov	x0, x20
    4c0c:	ldp	x19, x20, [sp, #16]
    4c10:	ldp	x29, x30, [sp], #32
    4c14:	ret
    4c18:	mov	x0, x19
    4c1c:	bl	28e0 <_Py_Dealloc@plt>
    4c20:	b	4c08 <PyThread_acquire_lock@plt+0x2248>
    4c24:	mov	x20, x0
    4c28:	b	4c08 <PyThread_acquire_lock@plt+0x2248>
    4c2c:	cbz	x0, 4c94 <PyThread_acquire_lock@plt+0x22d4>
    4c30:	stp	x29, x30, [sp, #-32]!
    4c34:	mov	x29, sp
    4c38:	stp	x19, x20, [sp, #16]
    4c3c:	mov	x20, x3
    4c40:	bl	2f00 <PyThread_acquire_lock@plt+0x540>
    4c44:	mov	x19, x0
    4c48:	cbz	x0, 4c80 <PyThread_acquire_lock@plt+0x22c0>
    4c4c:	mov	x1, x0
    4c50:	ldr	x0, [x20]
    4c54:	bl	2850 <PySet_Add@plt>
    4c58:	cbz	w0, 4c64 <PyThread_acquire_lock@plt+0x22a4>
    4c5c:	mov	w0, #0x1                   	// #1
    4c60:	str	w0, [x20, #8]
    4c64:	ldr	x0, [x19]
    4c68:	sub	x0, x0, #0x1
    4c6c:	str	x0, [x19]
    4c70:	cbnz	x0, 4c88 <PyThread_acquire_lock@plt+0x22c8>
    4c74:	mov	x0, x19
    4c78:	bl	28e0 <_Py_Dealloc@plt>
    4c7c:	b	4c88 <PyThread_acquire_lock@plt+0x22c8>
    4c80:	mov	w0, #0x1                   	// #1
    4c84:	str	w0, [x20, #8]
    4c88:	ldp	x19, x20, [sp, #16]
    4c8c:	ldp	x29, x30, [sp], #32
    4c90:	ret
    4c94:	ret

0000000000004c98 <PyInit__hashlib@@Base>:
    4c98:	stp	x29, x30, [sp, #-48]!
    4c9c:	mov	x29, sp
    4ca0:	str	x19, [sp, #16]
    4ca4:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    4ca8:	add	x0, x0, #0x260
    4cac:	add	x0, x0, #0x40
    4cb0:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11368>
    4cb4:	ldr	x1, [x1, #4048]
    4cb8:	str	x1, [x0, #8]
    4cbc:	bl	25a0 <PyType_Ready@plt>
    4cc0:	mov	x19, #0x0                   	// #0
    4cc4:	tbnz	w0, #31, 4d54 <PyInit__hashlib@@Base+0xbc>
    4cc8:	mov	w1, #0x3f5                 	// #1013
    4ccc:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12368>
    4cd0:	add	x0, x0, #0x260
    4cd4:	add	x0, x0, #0x420
    4cd8:	bl	2910 <PyModule_Create2@plt>
    4cdc:	mov	x19, x0
    4ce0:	cbz	x0, 4d54 <PyInit__hashlib@@Base+0xbc>
    4ce4:	mov	x0, #0x0                   	// #0
    4ce8:	bl	27a0 <PyFrozenSet_New@plt>
    4cec:	str	x0, [sp, #32]
    4cf0:	cbz	x0, 4d78 <PyInit__hashlib@@Base+0xe0>
    4cf4:	str	wzr, [sp, #40]
    4cf8:	add	x1, sp, #0x20
    4cfc:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    4d00:	add	x0, x0, #0xc2c
    4d04:	bl	2710 <EVP_MD_do_all@plt>
    4d08:	ldr	w0, [sp, #40]
    4d0c:	cbnz	w0, 4d64 <PyInit__hashlib@@Base+0xcc>
    4d10:	ldr	x2, [sp, #32]
    4d14:	cbz	x2, 4d78 <PyInit__hashlib@@Base+0xe0>
    4d18:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4d1c:	add	x1, x1, #0x330
    4d20:	mov	x0, x19
    4d24:	bl	2520 <PyModule_AddObject@plt>
    4d28:	cbnz	w0, 4da8 <PyInit__hashlib@@Base+0x110>
    4d2c:	adrp	x2, 17000 <PyInit__hashlib@@Base+0x12368>
    4d30:	add	x2, x2, #0x260
    4d34:	ldr	x0, [x2, #64]
    4d38:	add	x0, x0, #0x1
    4d3c:	str	x0, [x2, #64]
    4d40:	add	x2, x2, #0x40
    4d44:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x368>
    4d48:	add	x1, x1, #0x348
    4d4c:	mov	x0, x19
    4d50:	bl	2520 <PyModule_AddObject@plt>
    4d54:	mov	x0, x19
    4d58:	ldr	x19, [sp, #16]
    4d5c:	ldp	x29, x30, [sp], #48
    4d60:	ret
    4d64:	ldr	x0, [sp, #32]
    4d68:	ldr	x1, [x0]
    4d6c:	sub	x1, x1, #0x1
    4d70:	str	x1, [x0]
    4d74:	cbz	x1, 4d90 <PyInit__hashlib@@Base+0xf8>
    4d78:	ldr	x0, [x19]
    4d7c:	sub	x0, x0, #0x1
    4d80:	str	x0, [x19]
    4d84:	cbz	x0, 4d98 <PyInit__hashlib@@Base+0x100>
    4d88:	mov	x19, #0x0                   	// #0
    4d8c:	b	4d54 <PyInit__hashlib@@Base+0xbc>
    4d90:	bl	28e0 <_Py_Dealloc@plt>
    4d94:	b	4d78 <PyInit__hashlib@@Base+0xe0>
    4d98:	mov	x0, x19
    4d9c:	bl	28e0 <_Py_Dealloc@plt>
    4da0:	mov	x19, #0x0                   	// #0
    4da4:	b	4d54 <PyInit__hashlib@@Base+0xbc>
    4da8:	ldr	x0, [x19]
    4dac:	sub	x0, x0, #0x1
    4db0:	str	x0, [x19]
    4db4:	cbz	x0, 4dc0 <PyInit__hashlib@@Base+0x128>
    4db8:	mov	x19, #0x0                   	// #0
    4dbc:	b	4d54 <PyInit__hashlib@@Base+0xbc>
    4dc0:	mov	x0, x19
    4dc4:	bl	28e0 <_Py_Dealloc@plt>
    4dc8:	mov	x19, #0x0                   	// #0
    4dcc:	b	4d54 <PyInit__hashlib@@Base+0xbc>

Disassembly of section .fini:

0000000000004dd0 <.fini>:
    4dd0:	stp	x29, x30, [sp, #-16]!
    4dd4:	mov	x29, sp
    4dd8:	ldp	x29, x30, [sp], #16
    4ddc:	ret
