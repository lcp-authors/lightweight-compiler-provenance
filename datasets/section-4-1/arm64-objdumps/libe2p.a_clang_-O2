In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libe2p.a_clang_-O2:

feature.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_feature2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	adrp	x19, 0 <e2p_feature2string>
   c:	adrp	x8, 0 <e2p_feature2string>
  10:	add	x19, x19, #0x0
  14:	add	x8, x8, #0x0
  18:	mov	x29, sp
  1c:	b	2c <e2p_feature2string+0x2c>
  20:	ldur	x19, [x8, #20]
  24:	add	x8, x8, #0x10
  28:	cbz	x19, 48 <e2p_feature2string+0x48>
  2c:	ldur	w9, [x8, #-4]
  30:	cmp	w9, w0
  34:	b.ne	20 <e2p_feature2string+0x20>  // b.any
  38:	ldr	w9, [x8]
  3c:	cmp	w9, w1
  40:	b.ne	20 <e2p_feature2string+0x20>  // b.any
  44:	b	8c <e2p_feature2string+0x8c>
  48:	cmp	w0, #0x2
  4c:	b.hi	60 <e2p_feature2string+0x60>  // b.pmore
  50:	adrp	x8, 0 <e2p_feature2string>
  54:	add	x8, x8, #0x0
  58:	ldr	w2, [x8, w0, sxtw #2]
  5c:	b	64 <e2p_feature2string+0x64>
  60:	mov	w2, #0x3f                  	// #63
  64:	lsr	w8, w1, #1
  68:	adrp	x19, 0 <e2p_feature2string>
  6c:	clz	w8, w8
  70:	mov	w9, #0x20                  	// #32
  74:	add	x19, x19, #0x0
  78:	adrp	x1, 0 <e2p_feature2string>
  7c:	sub	w3, w9, w8
  80:	add	x1, x1, #0x0
  84:	mov	x0, x19
  88:	bl	0 <sprintf>
  8c:	mov	x0, x19
  90:	ldr	x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret

000000000000009c <e2p_string2feature>:
  9c:	sub	sp, sp, #0x40
  a0:	stp	x22, x21, [sp, #32]
  a4:	mov	x21, x1
  a8:	adrp	x22, 0 <e2p_feature2string>
  ac:	adrp	x1, 0 <e2p_feature2string>
  b0:	stp	x20, x19, [sp, #48]
  b4:	mov	x19, x2
  b8:	mov	x20, x0
  bc:	add	x22, x22, #0x0
  c0:	add	x1, x1, #0x0
  c4:	stp	x29, x30, [sp, #16]
  c8:	add	x29, sp, #0x10
  cc:	mov	x0, x20
  d0:	bl	0 <strcasecmp>
  d4:	cbz	w0, 104 <e2p_string2feature+0x68>
  d8:	ldr	x1, [x22, #24]
  dc:	add	x22, x22, #0x10
  e0:	cbnz	x1, cc <e2p_string2feature+0x30>
  e4:	adrp	x1, 0 <e2p_feature2string>
  e8:	add	x1, x1, #0x0
  ec:	mov	w2, #0x8                   	// #8
  f0:	mov	x0, x20
  f4:	bl	0 <strncasecmp>
  f8:	cbz	w0, 128 <e2p_string2feature+0x8c>
  fc:	mov	w0, #0x1                   	// #1
 100:	b	114 <e2p_string2feature+0x78>
 104:	ldr	w8, [x22]
 108:	str	w8, [x21]
 10c:	ldr	w8, [x22, #4]
 110:	str	w8, [x19]
 114:	ldp	x20, x19, [sp, #48]
 118:	ldp	x22, x21, [sp, #32]
 11c:	ldp	x29, x30, [sp, #16]
 120:	add	sp, sp, #0x40
 124:	ret
 128:	ldrb	w8, [x20, #8]
 12c:	mov	w0, #0x1                   	// #1
 130:	sub	w8, w8, #0x43
 134:	cmp	w8, #0x2f
 138:	b.hi	114 <e2p_string2feature+0x78>  // b.pmore
 13c:	mov	w9, #0x1                   	// #1
 140:	lsl	x9, x9, x8
 144:	tst	x9, #0x100000001
 148:	b.ne	174 <e2p_string2feature+0xd8>  // b.any
 14c:	mov	w9, #0x1                   	// #1
 150:	lsl	x9, x9, x8
 154:	tst	x9, #0x4000000040
 158:	b.ne	17c <e2p_string2feature+0xe0>  // b.any
 15c:	mov	w9, #0x1                   	// #1
 160:	lsl	x8, x9, x8
 164:	tst	x8, #0x800000008000
 168:	b.eq	114 <e2p_string2feature+0x78>  // b.none
 16c:	mov	w8, #0x2                   	// #2
 170:	b	180 <e2p_string2feature+0xe4>
 174:	mov	w8, wzr
 178:	b	180 <e2p_string2feature+0xe4>
 17c:	mov	w8, #0x1                   	// #1
 180:	str	w8, [x21]
 184:	ldrb	w8, [x20, #9]!
 188:	cbz	w8, fc <e2p_string2feature+0x60>
 18c:	add	x1, sp, #0x8
 190:	mov	w2, #0xa                   	// #10
 194:	mov	x0, x20
 198:	bl	0 <strtol>
 19c:	mov	x8, x0
 1a0:	cmp	w8, #0x1f
 1a4:	b.hi	fc <e2p_string2feature+0x60>  // b.pmore
 1a8:	ldr	x9, [sp, #8]
 1ac:	mov	w0, #0x1                   	// #1
 1b0:	ldrb	w9, [x9]
 1b4:	cbnz	w9, 114 <e2p_string2feature+0x78>
 1b8:	lsl	w8, w0, w8
 1bc:	mov	w0, wzr
 1c0:	b	110 <e2p_string2feature+0x74>

00000000000001c4 <e2p_jrnl_feature2string>:
 1c4:	stp	x29, x30, [sp, #-32]!
 1c8:	cmp	w0, #0x2
 1cc:	str	x19, [sp, #16]
 1d0:	mov	x29, sp
 1d4:	b.eq	1f8 <e2p_jrnl_feature2string+0x34>  // b.none
 1d8:	cmp	w0, #0x1
 1dc:	b.eq	200 <e2p_jrnl_feature2string+0x3c>  // b.none
 1e0:	cbnz	w0, 23c <e2p_jrnl_feature2string+0x78>
 1e4:	cmp	w1, #0x1
 1e8:	b.ne	244 <e2p_jrnl_feature2string+0x80>  // b.any
 1ec:	adrp	x19, 0 <e2p_feature2string>
 1f0:	add	x19, x19, #0x0
 1f4:	b	270 <e2p_jrnl_feature2string+0xac>
 1f8:	mov	w2, #0x52                  	// #82
 1fc:	b	248 <e2p_jrnl_feature2string+0x84>
 200:	sub	w8, w1, #0x1
 204:	cmp	w8, #0xf
 208:	mov	w2, #0x49                  	// #73
 20c:	b.hi	248 <e2p_jrnl_feature2string+0x84>  // b.pmore
 210:	adrp	x9, 0 <e2p_feature2string>
 214:	add	x9, x9, #0x0
 218:	adr	x10, 230 <e2p_jrnl_feature2string+0x6c>
 21c:	ldrb	w11, [x9, x8]
 220:	add	x10, x10, x11, lsl #2
 224:	adrp	x19, 0 <e2p_feature2string>
 228:	add	x19, x19, #0x0
 22c:	br	x10
 230:	adrp	x19, 0 <e2p_feature2string>
 234:	add	x19, x19, #0x0
 238:	b	270 <e2p_jrnl_feature2string+0xac>
 23c:	mov	w2, #0x3f                  	// #63
 240:	b	248 <e2p_jrnl_feature2string+0x84>
 244:	mov	w2, #0x43                  	// #67
 248:	lsr	w8, w1, #1
 24c:	adrp	x19, 0 <e2p_feature2string>
 250:	clz	w8, w8
 254:	mov	w9, #0x20                  	// #32
 258:	add	x19, x19, #0x0
 25c:	adrp	x1, 0 <e2p_feature2string>
 260:	sub	w3, w9, w8
 264:	add	x1, x1, #0x0
 268:	mov	x0, x19
 26c:	bl	0 <sprintf>
 270:	mov	x0, x19
 274:	ldr	x19, [sp, #16]
 278:	ldp	x29, x30, [sp], #32
 27c:	ret
 280:	adrp	x19, 0 <e2p_feature2string>
 284:	add	x19, x19, #0x0
 288:	b	270 <e2p_jrnl_feature2string+0xac>
 28c:	adrp	x19, 0 <e2p_feature2string>
 290:	add	x19, x19, #0x0
 294:	b	270 <e2p_jrnl_feature2string+0xac>
 298:	adrp	x19, 0 <e2p_feature2string>
 29c:	add	x19, x19, #0x0
 2a0:	b	270 <e2p_jrnl_feature2string+0xac>

00000000000002a4 <e2p_jrnl_string2feature>:
 2a4:	stp	x29, x30, [sp, #-48]!
 2a8:	stp	x20, x19, [sp, #32]
 2ac:	mov	x20, x1
 2b0:	adrp	x1, 0 <e2p_feature2string>
 2b4:	add	x1, x1, #0x0
 2b8:	str	x21, [sp, #16]
 2bc:	mov	x29, sp
 2c0:	mov	x19, x2
 2c4:	mov	x21, x0
 2c8:	bl	0 <strcasecmp>
 2cc:	cbz	w0, 354 <e2p_jrnl_string2feature+0xb0>
 2d0:	adrp	x1, 0 <e2p_feature2string>
 2d4:	add	x1, x1, #0x0
 2d8:	mov	x0, x21
 2dc:	bl	0 <strcasecmp>
 2e0:	cbz	w0, 360 <e2p_jrnl_string2feature+0xbc>
 2e4:	adrp	x1, 0 <e2p_feature2string>
 2e8:	add	x1, x1, #0x0
 2ec:	mov	x0, x21
 2f0:	bl	0 <strcasecmp>
 2f4:	cbz	w0, 36c <e2p_jrnl_string2feature+0xc8>
 2f8:	adrp	x1, 0 <e2p_feature2string>
 2fc:	add	x1, x1, #0x0
 300:	mov	x0, x21
 304:	bl	0 <strcasecmp>
 308:	cbz	w0, 378 <e2p_jrnl_string2feature+0xd4>
 30c:	adrp	x1, 0 <e2p_feature2string>
 310:	add	x1, x1, #0x0
 314:	mov	x0, x21
 318:	bl	0 <strcasecmp>
 31c:	cbz	w0, 384 <e2p_jrnl_string2feature+0xe0>
 320:	adrp	x1, 0 <e2p_feature2string>
 324:	add	x1, x1, #0x0
 328:	mov	x0, x21
 32c:	bl	0 <strcasecmp>
 330:	cbz	w0, 390 <e2p_jrnl_string2feature+0xec>
 334:	adrp	x1, 0 <e2p_feature2string>
 338:	add	x1, x1, #0x0
 33c:	mov	w2, #0x8                   	// #8
 340:	mov	x0, x21
 344:	bl	0 <strncasecmp>
 348:	cbz	w0, 3bc <e2p_jrnl_string2feature+0x118>
 34c:	mov	w0, #0x1                   	// #1
 350:	b	3ac <e2p_jrnl_string2feature+0x108>
 354:	adrp	x8, 0 <e2p_feature2string>
 358:	add	x8, x8, #0x0
 35c:	b	398 <e2p_jrnl_string2feature+0xf4>
 360:	adrp	x8, 0 <e2p_feature2string>
 364:	add	x8, x8, #0x0
 368:	b	398 <e2p_jrnl_string2feature+0xf4>
 36c:	adrp	x8, 0 <e2p_feature2string>
 370:	add	x8, x8, #0x0
 374:	b	398 <e2p_jrnl_string2feature+0xf4>
 378:	adrp	x8, 0 <e2p_feature2string>
 37c:	add	x8, x8, #0x0
 380:	b	398 <e2p_jrnl_string2feature+0xf4>
 384:	adrp	x8, 0 <e2p_feature2string>
 388:	add	x8, x8, #0x0
 38c:	b	398 <e2p_jrnl_string2feature+0xf4>
 390:	adrp	x8, 0 <e2p_feature2string>
 394:	add	x8, x8, #0x0
 398:	ldr	w9, [x8]
 39c:	mov	w0, wzr
 3a0:	str	w9, [x20]
 3a4:	ldr	w8, [x8, #4]
 3a8:	str	w8, [x19]
 3ac:	ldp	x20, x19, [sp, #32]
 3b0:	ldr	x21, [sp, #16]
 3b4:	ldp	x29, x30, [sp], #48
 3b8:	ret
 3bc:	ldrb	w8, [x21, #8]
 3c0:	mov	w0, #0x1                   	// #1
 3c4:	sub	w8, w8, #0x43
 3c8:	cmp	w8, #0x2f
 3cc:	b.hi	3ac <e2p_jrnl_string2feature+0x108>  // b.pmore
 3d0:	mov	w9, #0x1                   	// #1
 3d4:	lsl	x9, x9, x8
 3d8:	tst	x9, #0x100000001
 3dc:	b.ne	408 <e2p_jrnl_string2feature+0x164>  // b.any
 3e0:	mov	w9, #0x1                   	// #1
 3e4:	lsl	x9, x9, x8
 3e8:	tst	x9, #0x4000000040
 3ec:	b.ne	410 <e2p_jrnl_string2feature+0x16c>  // b.any
 3f0:	mov	w9, #0x1                   	// #1
 3f4:	lsl	x8, x9, x8
 3f8:	tst	x8, #0x800000008000
 3fc:	b.eq	3ac <e2p_jrnl_string2feature+0x108>  // b.none
 400:	mov	w8, #0x2                   	// #2
 404:	b	414 <e2p_jrnl_string2feature+0x170>
 408:	mov	w8, wzr
 40c:	b	414 <e2p_jrnl_string2feature+0x170>
 410:	mov	w8, #0x1                   	// #1
 414:	str	w8, [x20]
 418:	ldrb	w8, [x21, #9]!
 41c:	cbz	w8, 34c <e2p_jrnl_string2feature+0xa8>
 420:	add	x1, x29, #0x18
 424:	mov	w2, #0xa                   	// #10
 428:	mov	x0, x21
 42c:	bl	0 <strtol>
 430:	mov	x8, x0
 434:	cmp	w8, #0x1f
 438:	b.hi	34c <e2p_jrnl_string2feature+0xa8>  // b.pmore
 43c:	ldr	x9, [x29, #24]
 440:	mov	w0, #0x1                   	// #1
 444:	ldrb	w9, [x9]
 448:	cbnz	w9, 3ac <e2p_jrnl_string2feature+0x108>
 44c:	lsl	w8, w0, w8
 450:	mov	w0, wzr
 454:	b	3a8 <e2p_jrnl_string2feature+0x104>

0000000000000458 <e2p_edit_feature2>:
 458:	sub	sp, sp, #0x80
 45c:	cmp	x3, #0x0
 460:	stp	x26, x25, [sp, #64]
 464:	stp	x24, x23, [sp, #80]
 468:	stp	x20, x19, [sp, #112]
 46c:	mov	x20, x5
 470:	mov	x24, x1
 474:	mov	x25, x0
 478:	csel	x23, x2, x3, eq  // eq = none
 47c:	stp	x29, x30, [sp, #32]
 480:	stp	x28, x27, [sp, #48]
 484:	stp	x22, x21, [sp, #96]
 488:	add	x29, sp, #0x20
 48c:	str	x2, [sp, #16]
 490:	cbz	x4, 498 <e2p_edit_feature2+0x40>
 494:	str	wzr, [x4]
 498:	str	x4, [sp, #8]
 49c:	cbz	x20, 4a4 <e2p_edit_feature2+0x4c>
 4a0:	str	wzr, [x20]
 4a4:	mov	x0, x25
 4a8:	bl	0 <strlen>
 4ac:	add	x0, x0, #0x1
 4b0:	bl	0 <malloc>
 4b4:	mov	w22, #0x1                   	// #1
 4b8:	cbz	x0, 6f4 <e2p_edit_feature2+0x29c>
 4bc:	mov	x1, x25
 4c0:	mov	x19, x0
 4c4:	str	x20, [sp]
 4c8:	bl	0 <strcpy>
 4cc:	adrp	x25, 0 <e2p_feature2string>
 4d0:	add	x25, x25, #0x0
 4d4:	mov	x28, x0
 4d8:	b	4ec <e2p_edit_feature2+0x94>
 4dc:	str	xzr, [x24]
 4e0:	str	wzr, [x24, #8]
 4e4:	add	x28, x20, #0x1
 4e8:	cbz	x20, 6b4 <e2p_edit_feature2+0x25c>
 4ec:	ldrb	w20, [x28]
 4f0:	cbz	w20, 6b4 <e2p_edit_feature2+0x25c>
 4f4:	bl	0 <__ctype_b_loc>
 4f8:	ldr	x8, [x0]
 4fc:	and	x9, x20, #0xff
 500:	ldrh	w9, [x8, x9, lsl #1]
 504:	tbz	w9, #13, 518 <e2p_edit_feature2+0xc0>
 508:	ldrb	w20, [x28, #1]!
 50c:	cbnz	w20, 4fc <e2p_edit_feature2+0xa4>
 510:	mov	x20, xzr
 514:	b	550 <e2p_edit_feature2+0xf8>
 518:	and	w10, w20, #0xff
 51c:	cmp	w10, #0x2c
 520:	mov	x20, x28
 524:	b.eq	54c <e2p_edit_feature2+0xf4>  // b.none
 528:	mov	x20, x28
 52c:	tbnz	w9, #13, 54c <e2p_edit_feature2+0xf4>
 530:	mov	x20, x28
 534:	ldrb	w9, [x20, #1]!
 538:	cbz	x9, 510 <e2p_edit_feature2+0xb8>
 53c:	cmp	w9, #0x2c
 540:	b.eq	54c <e2p_edit_feature2+0xf4>  // b.none
 544:	ldrh	w9, [x8, x9, lsl #1]
 548:	tbz	w9, #13, 534 <e2p_edit_feature2+0xdc>
 54c:	strb	wzr, [x20]
 550:	mov	x0, x28
 554:	mov	x1, x25
 558:	bl	0 <strcasecmp>
 55c:	cbz	w0, 4dc <e2p_edit_feature2+0x84>
 560:	adrp	x1, 0 <e2p_feature2string>
 564:	mov	x0, x28
 568:	add	x1, x1, #0x0
 56c:	bl	0 <strcasecmp>
 570:	cbz	w0, 4dc <e2p_edit_feature2+0x84>
 574:	ldrb	w8, [x28]
 578:	mov	w26, wzr
 57c:	cmp	w8, #0x2b
 580:	b.eq	598 <e2p_edit_feature2+0x140>  // b.none
 584:	cmp	w8, #0x5e
 588:	b.eq	594 <e2p_edit_feature2+0x13c>  // b.none
 58c:	cmp	w8, #0x2d
 590:	b.ne	59c <e2p_edit_feature2+0x144>  // b.any
 594:	mov	w26, #0x1                   	// #1
 598:	add	x28, x28, #0x1
 59c:	adrp	x1, 0 <e2p_feature2string>
 5a0:	adrp	x27, 0 <e2p_feature2string>
 5a4:	add	x1, x1, #0x0
 5a8:	add	x27, x27, #0x0
 5ac:	mov	x0, x28
 5b0:	bl	0 <strcasecmp>
 5b4:	cbz	w0, 618 <e2p_edit_feature2+0x1c0>
 5b8:	ldr	x1, [x27, #24]
 5bc:	add	x27, x27, #0x10
 5c0:	cbnz	x1, 5ac <e2p_edit_feature2+0x154>
 5c4:	adrp	x1, 0 <e2p_feature2string>
 5c8:	mov	w2, #0x8                   	// #8
 5cc:	mov	x0, x28
 5d0:	add	x1, x1, #0x0
 5d4:	bl	0 <strncasecmp>
 5d8:	cbnz	w0, 6e8 <e2p_edit_feature2+0x290>
 5dc:	ldrb	w8, [x28, #8]
 5e0:	sub	w8, w8, #0x43
 5e4:	cmp	w8, #0x2f
 5e8:	b.hi	6e8 <e2p_edit_feature2+0x290>  // b.pmore
 5ec:	lsl	x9, x22, x8
 5f0:	tst	x9, #0x100000001
 5f4:	b.ne	644 <e2p_edit_feature2+0x1ec>  // b.any
 5f8:	lsl	x9, x22, x8
 5fc:	tst	x9, #0x4000000040
 600:	b.ne	64c <e2p_edit_feature2+0x1f4>  // b.any
 604:	lsl	x8, x22, x8
 608:	tst	x8, #0x800000008000
 60c:	b.eq	6e8 <e2p_edit_feature2+0x290>  // b.none
 610:	mov	w21, #0x2                   	// #2
 614:	b	650 <e2p_edit_feature2+0x1f8>
 618:	ldp	w21, w8, [x27]
 61c:	sxtw	x9, w21
 620:	cbz	w26, 688 <e2p_edit_feature2+0x230>
 624:	cbz	x23, 634 <e2p_edit_feature2+0x1dc>
 628:	ldr	w10, [x23, x9, lsl #2]
 62c:	tst	w10, w8
 630:	b.eq	6bc <e2p_edit_feature2+0x264>  // b.none
 634:	lsl	x9, x9, #2
 638:	ldr	w10, [x24, x9]
 63c:	bic	w8, w10, w8
 640:	b	6a8 <e2p_edit_feature2+0x250>
 644:	mov	w21, wzr
 648:	b	650 <e2p_edit_feature2+0x1f8>
 64c:	mov	w21, #0x1                   	// #1
 650:	ldrb	w8, [x28, #9]!
 654:	cbz	w8, 6e8 <e2p_edit_feature2+0x290>
 658:	sub	x1, x29, #0x8
 65c:	mov	w2, #0xa                   	// #10
 660:	mov	x0, x28
 664:	bl	0 <strtol>
 668:	cmp	w0, #0x1f
 66c:	b.hi	6e8 <e2p_edit_feature2+0x290>  // b.pmore
 670:	ldur	x8, [x29, #-8]
 674:	ldrb	w8, [x8]
 678:	cbnz	w8, 6e8 <e2p_edit_feature2+0x290>
 67c:	lsl	w8, w22, w0
 680:	sxtw	x9, w21
 684:	cbnz	w26, 624 <e2p_edit_feature2+0x1cc>
 688:	ldr	x10, [sp, #16]
 68c:	cbz	x10, 69c <e2p_edit_feature2+0x244>
 690:	ldr	w10, [x10, x9, lsl #2]
 694:	tst	w10, w8
 698:	b.eq	6d0 <e2p_edit_feature2+0x278>  // b.none
 69c:	lsl	x9, x9, #2
 6a0:	ldr	w10, [x24, x9]
 6a4:	orr	w8, w10, w8
 6a8:	str	w8, [x24, x9]
 6ac:	add	x28, x20, #0x1
 6b0:	cbnz	x20, 4ec <e2p_edit_feature2+0x94>
 6b4:	mov	w22, wzr
 6b8:	b	6ec <e2p_edit_feature2+0x294>
 6bc:	ldr	x10, [sp, #8]
 6c0:	cbz	x10, 6dc <e2p_edit_feature2+0x284>
 6c4:	orr	w9, w21, #0x80
 6c8:	str	w9, [x10]
 6cc:	b	6dc <e2p_edit_feature2+0x284>
 6d0:	ldr	x9, [sp, #8]
 6d4:	cbz	x9, 6dc <e2p_edit_feature2+0x284>
 6d8:	str	w21, [x9]
 6dc:	ldr	x9, [sp]
 6e0:	cbz	x9, 6e8 <e2p_edit_feature2+0x290>
 6e4:	str	w8, [x9]
 6e8:	mov	w22, #0x1                   	// #1
 6ec:	mov	x0, x19
 6f0:	bl	0 <free>
 6f4:	mov	w0, w22
 6f8:	ldp	x20, x19, [sp, #112]
 6fc:	ldp	x22, x21, [sp, #96]
 700:	ldp	x24, x23, [sp, #80]
 704:	ldp	x26, x25, [sp, #64]
 708:	ldp	x28, x27, [sp, #48]
 70c:	ldp	x29, x30, [sp, #32]
 710:	add	sp, sp, #0x80
 714:	ret

0000000000000718 <e2p_edit_feature>:
 718:	mov	x3, xzr
 71c:	mov	x4, xzr
 720:	mov	x5, xzr
 724:	b	458 <e2p_edit_feature2>

fgetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetflags>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x20, x19, [sp, #176]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	add	x2, sp, #0x10
  14:	mov	w0, wzr
  18:	mov	x1, x20
  1c:	stp	x29, x30, [sp, #144]
  20:	stp	x22, x21, [sp, #160]
  24:	add	x29, sp, #0x90
  28:	bl	0 <__lxstat>
  2c:	cbz	w0, 6c <fgetflags+0x6c>
  30:	mov	w1, #0x800                 	// #2048
  34:	mov	x0, x20
  38:	bl	0 <open>
  3c:	cmn	w0, #0x1
  40:	b.eq	90 <fgetflags+0x90>  // b.none
  44:	mov	w1, #0x6601                	// #26113
  48:	add	x2, sp, #0xc
  4c:	movk	w1, #0x8008, lsl #16
  50:	mov	w21, w0
  54:	bl	0 <ioctl>
  58:	mov	w20, w0
  5c:	cmn	w0, #0x1
  60:	b.eq	98 <fgetflags+0x98>  // b.none
  64:	mov	w22, wzr
  68:	b	a0 <fgetflags+0xa0>
  6c:	ldr	w8, [sp, #32]
  70:	and	w8, w8, #0xf000
  74:	cmp	w8, #0x8, lsl #12
  78:	b.eq	30 <fgetflags+0x30>  // b.none
  7c:	cmp	w8, #0x4, lsl #12
  80:	b.eq	30 <fgetflags+0x30>  // b.none
  84:	bl	0 <__errno_location>
  88:	mov	w8, #0x5f                  	// #95
  8c:	str	w8, [x0]
  90:	mov	w20, #0xffffffff            	// #-1
  94:	b	bc <fgetflags+0xbc>
  98:	bl	0 <__errno_location>
  9c:	ldr	w22, [x0]
  a0:	ldrsw	x8, [sp, #12]
  a4:	mov	w0, w21
  a8:	str	x8, [x19]
  ac:	bl	0 <close>
  b0:	cbz	w22, bc <fgetflags+0xbc>
  b4:	bl	0 <__errno_location>
  b8:	str	w22, [x0]
  bc:	mov	w0, w20
  c0:	ldp	x20, x19, [sp, #176]
  c4:	ldp	x22, x21, [sp, #160]
  c8:	ldp	x29, x30, [sp, #144]
  cc:	add	sp, sp, #0xc0
  d0:	ret

fsetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	mov	x2, sp
  14:	mov	w0, wzr
  18:	mov	x1, x20
  1c:	stp	x29, x30, [sp, #128]
  20:	str	x21, [sp, #144]
  24:	add	x29, sp, #0x80
  28:	bl	0 <__lxstat>
  2c:	cbz	w0, 74 <fsetflags+0x74>
  30:	mov	w1, #0x800                 	// #2048
  34:	mov	x0, x20
  38:	bl	0 <open>
  3c:	cmn	w0, #0x1
  40:	b.eq	b8 <fsetflags+0xb8>  // b.none
  44:	mov	w1, #0x6602                	// #26114
  48:	add	x2, x29, #0x1c
  4c:	movk	w1, #0x4008, lsl #16
  50:	mov	w20, w0
  54:	str	w19, [x29, #28]
  58:	bl	0 <ioctl>
  5c:	cmn	w0, #0x1
  60:	b.eq	9c <fsetflags+0x9c>  // b.none
  64:	mov	w19, w0
  68:	mov	w0, w20
  6c:	bl	0 <close>
  70:	b	bc <fsetflags+0xbc>
  74:	ldr	w8, [sp, #16]
  78:	and	w8, w8, #0xf000
  7c:	cmp	w8, #0x8, lsl #12
  80:	b.eq	30 <fsetflags+0x30>  // b.none
  84:	cmp	w8, #0x4, lsl #12
  88:	b.eq	30 <fsetflags+0x30>  // b.none
  8c:	bl	0 <__errno_location>
  90:	mov	w8, #0x5f                  	// #95
  94:	str	w8, [x0]
  98:	b	b8 <fsetflags+0xb8>
  9c:	bl	0 <__errno_location>
  a0:	ldr	w21, [x0]
  a4:	mov	x19, x0
  a8:	mov	w0, w20
  ac:	bl	0 <close>
  b0:	cbz	w21, b8 <fsetflags+0xb8>
  b4:	str	w21, [x19]
  b8:	mov	w19, #0xffffffff            	// #-1
  bc:	mov	w0, w19
  c0:	ldp	x20, x19, [sp, #160]
  c4:	ldr	x21, [sp, #144]
  c8:	ldp	x29, x30, [sp, #128]
  cc:	add	sp, sp, #0xb0
  d0:	ret

fgetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x29, sp
   c:	mov	x20, x1
  10:	mov	w19, #0xffffffff            	// #-1
  14:	mov	w1, #0x800                 	// #2048
  18:	str	x21, [sp, #16]
  1c:	str	w19, [x29, #28]
  20:	bl	0 <open>
  24:	cmn	w0, #0x1
  28:	b.eq	80 <fgetversion+0x80>  // b.none
  2c:	mov	w1, #0x7601                	// #30209
  30:	add	x2, x29, #0x1c
  34:	movk	w1, #0x8008, lsl #16
  38:	mov	w21, w0
  3c:	bl	0 <ioctl>
  40:	cmn	w0, #0x1
  44:	b.eq	64 <fgetversion+0x64>  // b.none
  48:	mov	w19, w0
  4c:	mov	w0, w21
  50:	bl	0 <close>
  54:	cbnz	w19, 80 <fgetversion+0x80>
  58:	ldr	w8, [x29, #28]
  5c:	str	x8, [x20]
  60:	b	80 <fgetversion+0x80>
  64:	bl	0 <__errno_location>
  68:	ldr	w20, [x0]
  6c:	mov	x19, x0
  70:	mov	w0, w21
  74:	bl	0 <close>
  78:	str	w20, [x19]
  7c:	mov	w19, #0xffffffff            	// #-1
  80:	mov	w0, w19
  84:	ldp	x20, x19, [sp, #32]
  88:	ldr	x21, [sp, #16]
  8c:	ldp	x29, x30, [sp], #48
  90:	ret

fsetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x20, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	str	x21, [sp, #16]
  14:	mov	x29, sp
  18:	bl	0 <open>
  1c:	cmn	w0, #0x1
  20:	b.eq	70 <fsetversion+0x70>  // b.none
  24:	mov	w1, #0x7602                	// #30210
  28:	add	x2, x29, #0x1c
  2c:	movk	w1, #0x4008, lsl #16
  30:	mov	w19, w0
  34:	str	w20, [x29, #28]
  38:	bl	0 <ioctl>
  3c:	cmn	w0, #0x1
  40:	b.eq	54 <fsetversion+0x54>  // b.none
  44:	mov	w20, w0
  48:	mov	w0, w19
  4c:	bl	0 <close>
  50:	b	74 <fsetversion+0x74>
  54:	bl	0 <__errno_location>
  58:	ldr	w21, [x0]
  5c:	mov	x20, x0
  60:	mov	w0, w19
  64:	bl	0 <close>
  68:	cbz	w21, 70 <fsetversion+0x70>
  6c:	str	w21, [x20]
  70:	mov	w20, #0xffffffff            	// #-1
  74:	mov	w0, w20
  78:	ldp	x20, x19, [sp, #32]
  7c:	ldr	x21, [sp, #16]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

getflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	w20, w0
   c:	mov	x19, x1
  10:	add	x2, sp, #0x10
  14:	mov	w0, wzr
  18:	mov	w1, w20
  1c:	stp	x29, x30, [sp, #144]
  20:	add	x29, sp, #0x90
  24:	bl	0 <__fxstat>
  28:	cbz	w0, 58 <getflags+0x58>
  2c:	mov	w1, #0x6601                	// #26113
  30:	add	x2, sp, #0xc
  34:	movk	w1, #0x8008, lsl #16
  38:	mov	w0, w20
  3c:	bl	0 <ioctl>
  40:	ldrsw	x8, [sp, #12]
  44:	str	x8, [x19]
  48:	ldp	x20, x19, [sp, #160]
  4c:	ldp	x29, x30, [sp, #144]
  50:	add	sp, sp, #0xb0
  54:	ret
  58:	ldr	w8, [sp, #32]
  5c:	and	w8, w8, #0xf000
  60:	cmp	w8, #0x8, lsl #12
  64:	b.eq	2c <getflags+0x2c>  // b.none
  68:	cmp	w8, #0x4, lsl #12
  6c:	b.eq	2c <getflags+0x2c>  // b.none
  70:	bl	0 <__errno_location>
  74:	mov	w8, #0x5f                  	// #95
  78:	str	w8, [x0]
  7c:	mov	w0, #0xffffffff            	// #-1
  80:	b	48 <getflags+0x48>

getversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getversion>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	mov	x19, x1
  10:	mov	w1, #0x7601                	// #30209
  14:	add	x2, x29, #0x1c
  18:	movk	w1, #0x8008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldrsw	x8, [x29, #28]
  24:	str	x8, [x19]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

hashstr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_hash2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w2, w0
   8:	cmp	w0, #0x2
   c:	str	x19, [sp, #16]
  10:	mov	x29, sp
  14:	b.hi	28 <e2p_hash2string+0x28>  // b.pmore
  18:	adrp	x8, 0 <e2p_hash2string>
  1c:	add	x8, x8, #0x0
  20:	ldr	x0, [x8, w2, sxtw #3]
  24:	b	44 <e2p_hash2string+0x44>
  28:	adrp	x19, 0 <e2p_hash2string>
  2c:	add	x19, x19, #0x0
  30:	adrp	x1, 0 <e2p_hash2string>
  34:	add	x1, x1, #0x0
  38:	mov	x0, x19
  3c:	bl	0 <sprintf>
  40:	mov	x0, x19
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret

0000000000000050 <e2p_string2hash>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	adrp	x1, 0 <e2p_hash2string>
  58:	add	x1, x1, #0x0
  5c:	str	x19, [sp, #16]
  60:	mov	x29, sp
  64:	mov	x19, x0
  68:	bl	0 <strcasecmp>
  6c:	cbz	w0, b8 <e2p_string2hash+0x68>
  70:	adrp	x1, 0 <e2p_hash2string>
  74:	add	x1, x1, #0x0
  78:	mov	x0, x19
  7c:	bl	0 <strcasecmp>
  80:	cbz	w0, c4 <e2p_string2hash+0x74>
  84:	adrp	x1, 0 <e2p_hash2string>
  88:	add	x1, x1, #0x0
  8c:	mov	x0, x19
  90:	bl	0 <strcasecmp>
  94:	cbz	w0, d0 <e2p_string2hash+0x80>
  98:	adrp	x1, 0 <e2p_hash2string>
  9c:	add	x1, x1, #0x0
  a0:	mov	w2, #0x8                   	// #8
  a4:	mov	x0, x19
  a8:	bl	0 <strncasecmp>
  ac:	cbz	w0, e8 <e2p_string2hash+0x98>
  b0:	mov	w0, #0xffffffff            	// #-1
  b4:	b	dc <e2p_string2hash+0x8c>
  b8:	adrp	x8, 0 <e2p_hash2string>
  bc:	add	x8, x8, #0x0
  c0:	b	d8 <e2p_string2hash+0x88>
  c4:	adrp	x8, 0 <e2p_hash2string>
  c8:	add	x8, x8, #0x0
  cc:	b	d8 <e2p_string2hash+0x88>
  d0:	adrp	x8, 0 <e2p_hash2string>
  d4:	add	x8, x8, #0x0
  d8:	ldr	w0, [x8]
  dc:	ldr	x19, [sp, #16]
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret
  e8:	ldrb	w8, [x19, #8]!
  ec:	cbz	w8, b0 <e2p_string2hash+0x60>
  f0:	add	x1, x29, #0x18
  f4:	mov	w2, #0xa                   	// #10
  f8:	mov	x0, x19
  fc:	bl	0 <strtol>
 100:	cmp	w0, #0xff
 104:	b.hi	b0 <e2p_string2hash+0x60>  // b.pmore
 108:	ldr	x8, [x29, #24]
 10c:	ldrb	w8, [x8]
 110:	cmp	w8, #0x0
 114:	csinv	w0, w0, wzr, eq  // eq = none
 118:	b	dc <e2p_string2hash+0x8c>

iod.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <iterate_on_dir>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x20, x19, [sp, #64]
   8:	mov	x20, x1
   c:	mov	w1, #0x3                   	// #3
  10:	str	x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	mov	x29, sp
  20:	mov	x19, x2
  24:	mov	x21, x0
  28:	bl	0 <pathconf>
  2c:	add	w8, w0, #0x118
  30:	cmn	w0, #0x1
  34:	mov	w9, #0x126                 	// #294
  38:	csel	w25, w9, w8, eq  // eq = none
  3c:	add	w8, w25, #0x1
  40:	sxtw	x23, w8
  44:	mov	x0, x23
  48:	bl	0 <malloc>
  4c:	cbz	x0, c4 <iterate_on_dir+0xc4>
  50:	mov	w1, wzr
  54:	mov	x2, x23
  58:	mov	x22, x0
  5c:	bl	0 <memset>
  60:	mov	x0, x21
  64:	bl	0 <opendir>
  68:	cbz	x0, cc <iterate_on_dir+0xcc>
  6c:	mov	x23, x0
  70:	bl	0 <readdir>
  74:	cbz	x0, dc <iterate_on_dir+0xdc>
  78:	mov	x1, x0
  7c:	mov	w24, wzr
  80:	ldrh	w8, [x1, #16]
  84:	mov	x0, x22
  88:	cmp	w25, w8
  8c:	csel	w8, w25, w8, lt  // lt = tstop
  90:	sxtw	x2, w8
  94:	bl	0 <memcpy>
  98:	mov	x0, x21
  9c:	mov	x1, x22
  a0:	mov	x2, x19
  a4:	blr	x20
  a8:	cmp	w0, #0x0
  ac:	mov	x0, x23
  b0:	cinc	w24, w24, ne  // ne = any
  b4:	bl	0 <readdir>
  b8:	mov	x1, x0
  bc:	cbnz	x0, 80 <iterate_on_dir+0x80>
  c0:	b	e0 <iterate_on_dir+0xe0>
  c4:	mov	w24, #0xffffffff            	// #-1
  c8:	b	f0 <iterate_on_dir+0xf0>
  cc:	mov	x0, x22
  d0:	bl	0 <free>
  d4:	mov	w24, #0xffffffff            	// #-1
  d8:	b	f0 <iterate_on_dir+0xf0>
  dc:	mov	w24, wzr
  e0:	mov	x0, x22
  e4:	bl	0 <free>
  e8:	mov	x0, x23
  ec:	bl	0 <closedir>
  f0:	mov	w0, w24
  f4:	ldp	x20, x19, [sp, #64]
  f8:	ldp	x22, x21, [sp, #48]
  fc:	ldp	x24, x23, [sp, #32]
 100:	ldr	x25, [sp, #16]
 104:	ldp	x29, x30, [sp], #80
 108:	ret

ls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <list_super2>:
       0:	sub	sp, sp, #0xc0
       4:	stp	x29, x30, [sp, #96]
       8:	stp	x26, x25, [sp, #128]
       c:	stp	x24, x23, [sp, #144]
      10:	stp	x22, x21, [sp, #160]
      14:	stp	x20, x19, [sp, #176]
      18:	ldr	w9, [x0, #76]
      1c:	ldr	w8, [x0, #40]
      20:	mov	x20, x0
      24:	mov	x19, x1
      28:	str	x27, [sp, #112]
      2c:	add	x29, sp, #0x60
      30:	cbz	w9, 3c <list_super2+0x3c>
      34:	ldrh	w9, [x20, #88]
      38:	b	40 <list_super2+0x40>
      3c:	mov	w9, #0x80                  	// #128
      40:	mov	x1, x20
      44:	ldrb	w10, [x1, #120]!
      48:	mov	w11, #0x400                 	// #1024
      4c:	ldur	w22, [x1, #-96]
      50:	lsl	w11, w11, w22
      54:	madd	w21, w9, w8, w11
      58:	cbz	w10, 7c <list_super2+0x7c>
      5c:	movi	v0.2d, #0x0
      60:	add	x0, sp, #0x10
      64:	mov	w2, #0x10                  	// #16
      68:	stp	q0, q0, [sp, #64]
      6c:	stp	q0, q0, [sp, #32]
      70:	str	q0, [sp, #16]
      74:	bl	0 <strncpy>
      78:	b	94 <list_super2+0x94>
      7c:	mov	w8, #0x656e                	// #25966
      80:	mov	w9, #0x6e3c                	// #28220
      84:	movk	w8, #0x3e, lsl #16
      88:	movk	w9, #0x6e6f, lsl #16
      8c:	stur	w8, [sp, #19]
      90:	str	w9, [sp, #16]
      94:	adrp	x1, 0 <list_super2>
      98:	add	x1, x1, #0x0
      9c:	add	x2, sp, #0x10
      a0:	mov	x0, x19
      a4:	sub	w21, w21, #0x1
      a8:	add	w22, w22, #0xa
      ac:	bl	0 <fprintf>
      b0:	mov	x1, x20
      b4:	ldrb	w8, [x1, #136]!
      b8:	cbz	w8, dc <list_super2+0xdc>
      bc:	movi	v0.2d, #0x0
      c0:	add	x0, sp, #0x10
      c4:	mov	w2, #0x40                  	// #64
      c8:	stp	q0, q0, [sp, #64]
      cc:	stp	q0, q0, [sp, #32]
      d0:	str	q0, [sp, #16]
      d4:	bl	0 <strncpy>
      d8:	b	ec <list_super2+0xec>
      dc:	adrp	x8, 0 <list_super2>
      e0:	add	x8, x8, #0x0
      e4:	ldr	q0, [x8]
      e8:	str	q0, [sp, #16]
      ec:	adrp	x1, 0 <list_super2>
      f0:	add	x1, x1, #0x0
      f4:	add	x2, sp, #0x10
      f8:	mov	x0, x19
      fc:	lsr	w21, w21, w22
     100:	bl	0 <fprintf>
     104:	add	x0, x20, #0x68
     108:	bl	0 <e2p_uuid2str>
     10c:	adrp	x1, 0 <list_super2>
     110:	mov	x2, x0
     114:	add	x1, x1, #0x0
     118:	mov	x0, x19
     11c:	bl	0 <fprintf>
     120:	ldrh	w2, [x20, #56]
     124:	adrp	x1, 0 <list_super2>
     128:	add	x1, x1, #0x0
     12c:	mov	x0, x19
     130:	bl	0 <fprintf>
     134:	ldr	w2, [x20, #76]
     138:	adrp	x1, 0 <list_super2>
     13c:	add	x1, x1, #0x0
     140:	mov	x0, x19
     144:	bl	0 <fprintf>
     148:	ldr	w8, [x20, #76]
     14c:	cmp	w8, #0x1
     150:	b.eq	168 <list_super2+0x168>  // b.none
     154:	cbnz	w8, 174 <list_super2+0x174>
     158:	adrp	x0, 0 <list_super2>
     15c:	add	x0, x0, #0x0
     160:	mov	w1, #0xc                   	// #12
     164:	b	180 <list_super2+0x180>
     168:	adrp	x0, 0 <list_super2>
     16c:	add	x0, x0, #0x0
     170:	b	17c <list_super2+0x17c>
     174:	adrp	x0, 0 <list_super2>
     178:	add	x0, x0, #0x0
     17c:	mov	w1, #0xb                   	// #11
     180:	mov	w2, #0x1                   	// #1
     184:	mov	x3, x19
     188:	bl	0 <fwrite>
     18c:	adrp	x0, 0 <list_super2>
     190:	add	x0, x0, #0x0
     194:	mov	w1, #0x19                  	// #25
     198:	mov	w2, #0x1                   	// #1
     19c:	mov	x3, x19
     1a0:	mov	w22, #0x1                   	// #1
     1a4:	bl	0 <fwrite>
     1a8:	adrp	x23, 0 <list_super2>
     1ac:	mov	w24, wzr
     1b0:	mov	w25, #0x20                  	// #32
     1b4:	add	x23, x23, #0x0
     1b8:	b	1c8 <list_super2+0x1c8>
     1bc:	subs	w25, w25, #0x1
     1c0:	lsl	w22, w22, #1
     1c4:	b.eq	1f8 <list_super2+0x1f8>  // b.none
     1c8:	ldr	w8, [x20, #92]
     1cc:	tst	w8, w22
     1d0:	b.eq	1bc <list_super2+0x1bc>  // b.none
     1d4:	mov	w0, wzr
     1d8:	mov	w1, w22
     1dc:	bl	0 <e2p_feature2string>
     1e0:	mov	x2, x0
     1e4:	mov	x0, x19
     1e8:	mov	x1, x23
     1ec:	bl	0 <fprintf>
     1f0:	add	w24, w24, #0x1
     1f4:	b	1bc <list_super2+0x1bc>
     1f8:	adrp	x23, 0 <list_super2>
     1fc:	mov	w22, #0x1                   	// #1
     200:	mov	w25, #0x20                  	// #32
     204:	add	x23, x23, #0x0
     208:	b	218 <list_super2+0x218>
     20c:	subs	w25, w25, #0x1
     210:	lsl	w22, w22, #1
     214:	b.eq	248 <list_super2+0x248>  // b.none
     218:	ldr	w8, [x20, #96]
     21c:	tst	w8, w22
     220:	b.eq	20c <list_super2+0x20c>  // b.none
     224:	mov	w0, #0x1                   	// #1
     228:	mov	w1, w22
     22c:	bl	0 <e2p_feature2string>
     230:	mov	x2, x0
     234:	mov	x0, x19
     238:	mov	x1, x23
     23c:	bl	0 <fprintf>
     240:	add	w24, w24, #0x1
     244:	b	20c <list_super2+0x20c>
     248:	adrp	x23, 0 <list_super2>
     24c:	mov	w22, #0x1                   	// #1
     250:	mov	w25, #0x20                  	// #32
     254:	add	x23, x23, #0x0
     258:	b	268 <list_super2+0x268>
     25c:	subs	w25, w25, #0x1
     260:	lsl	w22, w22, #1
     264:	b.eq	298 <list_super2+0x298>  // b.none
     268:	ldr	w8, [x20, #100]
     26c:	tst	w8, w22
     270:	b.eq	25c <list_super2+0x25c>  // b.none
     274:	mov	w0, #0x2                   	// #2
     278:	mov	w1, w22
     27c:	bl	0 <e2p_feature2string>
     280:	mov	x2, x0
     284:	mov	x0, x19
     288:	mov	x1, x23
     28c:	bl	0 <fprintf>
     290:	add	w24, w24, #0x1
     294:	b	25c <list_super2+0x25c>
     298:	cbnz	w24, 2b4 <list_super2+0x2b4>
     29c:	adrp	x0, 0 <list_super2>
     2a0:	add	x0, x0, #0x0
     2a4:	mov	w1, #0x7                   	// #7
     2a8:	mov	w2, #0x1                   	// #1
     2ac:	mov	x3, x19
     2b0:	bl	0 <fwrite>
     2b4:	mov	w0, #0xa                   	// #10
     2b8:	mov	x1, x19
     2bc:	bl	0 <fputc>
     2c0:	ldr	w8, [x20, #352]
     2c4:	cbz	w8, 380 <list_super2+0x380>
     2c8:	adrp	x0, 0 <list_super2>
     2cc:	add	x0, x0, #0x0
     2d0:	mov	w1, #0x1a                  	// #26
     2d4:	mov	w2, #0x1                   	// #1
     2d8:	mov	x3, x19
     2dc:	bl	0 <fwrite>
     2e0:	ldr	w8, [x20, #352]
     2e4:	tbnz	w8, #0, 2f4 <list_super2+0x2f4>
     2e8:	mov	w22, wzr
     2ec:	tbnz	w8, #1, 318 <list_super2+0x318>
     2f0:	b	338 <list_super2+0x338>
     2f4:	adrp	x0, 0 <list_super2>
     2f8:	add	x0, x0, #0x0
     2fc:	mov	w1, #0x16                  	// #22
     300:	mov	w2, #0x1                   	// #1
     304:	mov	x3, x19
     308:	mov	w22, #0x1                   	// #1
     30c:	bl	0 <fwrite>
     310:	ldr	w8, [x20, #352]
     314:	tbz	w8, #1, 338 <list_super2+0x338>
     318:	adrp	x0, 0 <list_super2>
     31c:	add	x0, x0, #0x0
     320:	mov	w1, #0x18                  	// #24
     324:	mov	w2, #0x1                   	// #1
     328:	mov	x3, x19
     32c:	mov	w22, #0x1                   	// #1
     330:	bl	0 <fwrite>
     334:	ldr	w8, [x20, #352]
     338:	tbnz	w8, #2, 35c <list_super2+0x35c>
     33c:	cbnz	w22, 374 <list_super2+0x374>
     340:	adrp	x0, 0 <list_super2>
     344:	add	x0, x0, #0x0
     348:	mov	w1, #0x7                   	// #7
     34c:	mov	w2, #0x1                   	// #1
     350:	mov	x3, x19
     354:	bl	0 <fwrite>
     358:	b	380 <list_super2+0x380>
     35c:	adrp	x0, 0 <list_super2>
     360:	add	x0, x0, #0x0
     364:	mov	w1, #0x10                  	// #16
     368:	mov	w2, #0x1                   	// #1
     36c:	mov	x3, x19
     370:	bl	0 <fwrite>
     374:	mov	w0, #0xa                   	// #10
     378:	mov	x1, x19
     37c:	bl	0 <fputc>
     380:	ldr	w24, [x20, #256]
     384:	adrp	x0, 0 <list_super2>
     388:	add	x0, x0, #0x0
     38c:	mov	w1, #0x19                  	// #25
     390:	mov	w2, #0x1                   	// #1
     394:	mov	x3, x19
     398:	bl	0 <fwrite>
     39c:	ands	w0, w24, #0x60
     3a0:	b.eq	3c4 <list_super2+0x3c4>  // b.none
     3a4:	bl	0 <e2p_mntopt2string>
     3a8:	adrp	x1, 0 <list_super2>
     3ac:	mov	x2, x0
     3b0:	add	x1, x1, #0x0
     3b4:	mov	x0, x19
     3b8:	bl	0 <fprintf>
     3bc:	mov	w25, #0x1                   	// #1
     3c0:	b	3c8 <list_super2+0x3c8>
     3c4:	mov	w25, wzr
     3c8:	adrp	x23, 0 <list_super2>
     3cc:	mov	w22, #0x1                   	// #1
     3d0:	mov	w26, #0x20                  	// #32
     3d4:	add	x23, x23, #0x0
     3d8:	b	3e8 <list_super2+0x3e8>
     3dc:	subs	w26, w26, #0x1
     3e0:	lsl	w22, w22, #1
     3e4:	b.eq	418 <list_super2+0x418>  // b.none
     3e8:	tst	w22, #0x60
     3ec:	b.ne	3dc <list_super2+0x3dc>  // b.any
     3f0:	and	w8, w22, w24
     3f4:	cbz	w8, 3dc <list_super2+0x3dc>
     3f8:	mov	w0, w22
     3fc:	bl	0 <e2p_mntopt2string>
     400:	mov	x2, x0
     404:	mov	x0, x19
     408:	mov	x1, x23
     40c:	bl	0 <fprintf>
     410:	add	w25, w25, #0x1
     414:	b	3dc <list_super2+0x3dc>
     418:	cbnz	w25, 434 <list_super2+0x434>
     41c:	adrp	x0, 0 <list_super2>
     420:	add	x0, x0, #0x0
     424:	mov	w1, #0x7                   	// #7
     428:	mov	w2, #0x1                   	// #1
     42c:	mov	x3, x19
     430:	bl	0 <fwrite>
     434:	mov	w0, #0xa                   	// #10
     438:	mov	x1, x19
     43c:	bl	0 <fputc>
     440:	ldrb	w8, [x20, #512]
     444:	cbz	w8, 45c <list_super2+0x45c>
     448:	adrp	x1, 0 <list_super2>
     44c:	add	x2, x20, #0x200
     450:	add	x1, x1, #0x0
     454:	mov	x0, x19
     458:	bl	0 <fprintf>
     45c:	adrp	x0, 0 <list_super2>
     460:	add	x0, x0, #0x0
     464:	mov	w1, #0x19                  	// #25
     468:	mov	w2, #0x1                   	// #1
     46c:	mov	x3, x19
     470:	bl	0 <fwrite>
     474:	ldrh	w1, [x20, #58]
     478:	mov	x0, x19
     47c:	bl	0 <print_fs_state>
     480:	mov	w0, #0xa                   	// #10
     484:	mov	x1, x19
     488:	bl	0 <fputc>
     48c:	adrp	x0, 0 <list_super2>
     490:	add	x0, x0, #0x0
     494:	mov	w1, #0x1a                  	// #26
     498:	mov	w2, #0x1                   	// #1
     49c:	mov	x3, x19
     4a0:	bl	0 <fwrite>
     4a4:	ldrh	w1, [x20, #60]
     4a8:	mov	x0, x19
     4ac:	bl	0 <print_fs_errors>
     4b0:	mov	w0, #0xa                   	// #10
     4b4:	mov	x1, x19
     4b8:	bl	0 <fputc>
     4bc:	ldr	w0, [x20, #72]
     4c0:	bl	0 <e2p_os2string>
     4c4:	mov	x22, x0
     4c8:	adrp	x1, 0 <list_super2>
     4cc:	add	x1, x1, #0x0
     4d0:	mov	x0, x19
     4d4:	mov	x2, x22
     4d8:	bl	0 <fprintf>
     4dc:	mov	x0, x22
     4e0:	bl	0 <free>
     4e4:	ldr	w2, [x20]
     4e8:	adrp	x1, 0 <list_super2>
     4ec:	add	x1, x1, #0x0
     4f0:	mov	x0, x19
     4f4:	bl	0 <fprintf>
     4f8:	ldrb	w9, [x20, #96]
     4fc:	ldr	w8, [x20, #4]
     500:	tbnz	w9, #7, 50c <list_super2+0x50c>
     504:	mov	x9, xzr
     508:	b	514 <list_super2+0x514>
     50c:	ldr	w9, [x20, #336]
     510:	lsl	x9, x9, #32
     514:	adrp	x1, 0 <list_super2>
     518:	orr	x2, x9, x8
     51c:	add	x1, x1, #0x0
     520:	mov	x0, x19
     524:	bl	0 <fprintf>
     528:	ldrb	w9, [x20, #96]
     52c:	ldr	w8, [x20, #8]
     530:	tbnz	w9, #7, 53c <list_super2+0x53c>
     534:	mov	x9, xzr
     538:	b	544 <list_super2+0x544>
     53c:	ldr	w9, [x20, #340]
     540:	lsl	x9, x9, #32
     544:	adrp	x1, 0 <list_super2>
     548:	orr	x2, x9, x8
     54c:	add	x1, x1, #0x0
     550:	mov	x0, x19
     554:	bl	0 <fprintf>
     558:	ldr	w2, [x20, #584]
     55c:	cbz	w2, 570 <list_super2+0x570>
     560:	adrp	x1, 0 <list_super2>
     564:	add	x1, x1, #0x0
     568:	mov	x0, x19
     56c:	bl	0 <fprintf>
     570:	ldrb	w9, [x20, #96]
     574:	ldr	w8, [x20, #12]
     578:	tbnz	w9, #7, 584 <list_super2+0x584>
     57c:	mov	x9, xzr
     580:	b	58c <list_super2+0x58c>
     584:	ldr	w9, [x20, #344]
     588:	lsl	x9, x9, #32
     58c:	adrp	x1, 0 <list_super2>
     590:	orr	x2, x9, x8
     594:	add	x1, x1, #0x0
     598:	mov	x0, x19
     59c:	bl	0 <fprintf>
     5a0:	ldr	w2, [x20, #16]
     5a4:	adrp	x1, 0 <list_super2>
     5a8:	add	x1, x1, #0x0
     5ac:	mov	x0, x19
     5b0:	bl	0 <fprintf>
     5b4:	ldr	w2, [x20, #20]
     5b8:	adrp	x1, 0 <list_super2>
     5bc:	add	x1, x1, #0x0
     5c0:	mov	x0, x19
     5c4:	bl	0 <fprintf>
     5c8:	ldr	w8, [x20, #24]
     5cc:	mov	w22, #0x400                 	// #1024
     5d0:	adrp	x1, 0 <list_super2>
     5d4:	add	x1, x1, #0x0
     5d8:	lsl	w2, w22, w8
     5dc:	mov	x0, x19
     5e0:	bl	0 <fprintf>
     5e4:	ldr	w9, [x20, #100]
     5e8:	ldr	w8, [x20, #28]
     5ec:	adrp	x10, 0 <list_super2>
     5f0:	adrp	x11, 0 <list_super2>
     5f4:	add	x10, x10, #0x0
     5f8:	add	x11, x11, #0x0
     5fc:	tst	w9, #0x200
     600:	lsl	w2, w22, w8
     604:	csel	x1, x11, x10, eq  // eq = none
     608:	mov	x0, x19
     60c:	bl	0 <fprintf>
     610:	ldrb	w8, [x20, #96]
     614:	tbz	w8, #7, 62c <list_super2+0x62c>
     618:	ldrh	w2, [x20, #254]
     61c:	adrp	x1, 0 <list_super2>
     620:	add	x1, x1, #0x0
     624:	mov	x0, x19
     628:	bl	0 <fprintf>
     62c:	ldrh	w2, [x20, #206]
     630:	cbz	w2, 644 <list_super2+0x644>
     634:	adrp	x1, 0 <list_super2>
     638:	add	x1, x1, #0x0
     63c:	mov	x0, x19
     640:	bl	0 <fprintf>
     644:	ldr	w2, [x20, #32]
     648:	adrp	x1, 0 <list_super2>
     64c:	add	x1, x1, #0x0
     650:	mov	x0, x19
     654:	bl	0 <fprintf>
     658:	ldr	w8, [x20, #100]
     65c:	ldr	w2, [x20, #36]
     660:	adrp	x9, 0 <list_super2>
     664:	adrp	x10, 0 <list_super2>
     668:	add	x9, x9, #0x0
     66c:	add	x10, x10, #0x0
     670:	tst	w8, #0x200
     674:	csel	x1, x10, x9, eq  // eq = none
     678:	mov	x0, x19
     67c:	bl	0 <fprintf>
     680:	ldr	w2, [x20, #40]
     684:	adrp	x1, 0 <list_super2>
     688:	add	x1, x1, #0x0
     68c:	mov	x0, x19
     690:	bl	0 <fprintf>
     694:	adrp	x1, 0 <list_super2>
     698:	add	x1, x1, #0x0
     69c:	mov	x0, x19
     6a0:	mov	w2, w21
     6a4:	bl	0 <fprintf>
     6a8:	ldrh	w2, [x20, #356]
     6ac:	cbz	w2, 6c0 <list_super2+0x6c0>
     6b0:	adrp	x1, 0 <list_super2>
     6b4:	add	x1, x1, #0x0
     6b8:	mov	x0, x19
     6bc:	bl	0 <fprintf>
     6c0:	ldr	w2, [x20, #368]
     6c4:	cbz	w2, 6d8 <list_super2+0x6d8>
     6c8:	adrp	x1, 0 <list_super2>
     6cc:	add	x1, x1, #0x0
     6d0:	mov	x0, x19
     6d4:	bl	0 <fprintf>
     6d8:	ldr	w2, [x20, #260]
     6dc:	cbz	w2, 6f0 <list_super2+0x6f0>
     6e0:	adrp	x1, 0 <list_super2>
     6e4:	add	x1, x1, #0x0
     6e8:	mov	x0, x19
     6ec:	bl	0 <fprintf>
     6f0:	ldrb	w8, [x20, #372]
     6f4:	cbz	w8, 710 <list_super2+0x710>
     6f8:	mov	w9, #0x1                   	// #1
     6fc:	adrp	x1, 0 <list_super2>
     700:	lsl	w2, w9, w8
     704:	add	x1, x1, #0x0
     708:	mov	x0, x19
     70c:	bl	0 <fprintf>
     710:	ldr	w8, [x20, #264]
     714:	cbz	w8, 738 <list_super2+0x738>
     718:	add	x0, x29, #0x18
     71c:	str	x8, [x29, #24]
     720:	bl	0 <ctime>
     724:	adrp	x1, 0 <list_super2>
     728:	mov	x2, x0
     72c:	add	x1, x1, #0x0
     730:	mov	x0, x19
     734:	bl	0 <fprintf>
     738:	ldr	w8, [x20, #44]
     73c:	str	x8, [x29, #24]
     740:	cbz	w8, 754 <list_super2+0x754>
     744:	add	x0, x29, #0x18
     748:	bl	0 <ctime>
     74c:	mov	x2, x0
     750:	b	75c <list_super2+0x75c>
     754:	adrp	x2, 0 <list_super2>
     758:	add	x2, x2, #0x0
     75c:	adrp	x1, 0 <list_super2>
     760:	add	x1, x1, #0x0
     764:	mov	x0, x19
     768:	bl	0 <fprintf>
     76c:	ldr	w8, [x20, #48]
     770:	add	x0, x29, #0x18
     774:	str	x8, [x29, #24]
     778:	bl	0 <ctime>
     77c:	adrp	x1, 0 <list_super2>
     780:	mov	x2, x0
     784:	add	x1, x1, #0x0
     788:	mov	x0, x19
     78c:	bl	0 <fprintf>
     790:	ldrh	w2, [x20, #52]
     794:	adrp	x1, 0 <list_super2>
     798:	add	x1, x1, #0x0
     79c:	mov	x0, x19
     7a0:	bl	0 <fprintf>
     7a4:	ldrsh	w2, [x20, #54]
     7a8:	adrp	x1, 0 <list_super2>
     7ac:	add	x1, x1, #0x0
     7b0:	mov	x0, x19
     7b4:	bl	0 <fprintf>
     7b8:	ldr	w8, [x20, #64]
     7bc:	add	x0, x29, #0x18
     7c0:	str	x8, [x29, #24]
     7c4:	bl	0 <ctime>
     7c8:	adrp	x1, 0 <list_super2>
     7cc:	mov	x2, x0
     7d0:	add	x1, x1, #0x0
     7d4:	mov	x0, x19
     7d8:	bl	0 <fprintf>
     7dc:	ldr	w21, [x20, #68]
     7e0:	adrp	x8, 0 <list_super2>
     7e4:	strb	wzr, [x8]
     7e8:	cbz	w21, 998 <list_super2+0x998>
     7ec:	mov	w8, #0x8cff                	// #36095
     7f0:	movk	w8, #0x27, lsl #16
     7f4:	adrp	x24, 0 <list_super2>
     7f8:	adrp	x26, 0 <list_super2>
     7fc:	cmp	w21, w8
     800:	add	x24, x24, #0x0
     804:	add	x26, x26, #0x0
     808:	mov	w23, w21
     80c:	b.ls	848 <list_super2+0x848>  // b.plast
     810:	mov	w10, #0x19ff                	// #6655
     814:	movk	w10, #0x4f, lsl #16
     818:	add	w8, w8, #0x1
     81c:	mov	w9, #0x7300                	// #29440
     820:	cmp	w21, w10
     824:	adrp	x0, 0 <list_super2>
     828:	adrp	x1, 0 <list_super2>
     82c:	movk	w9, #0xffd8, lsl #16
     830:	udiv	w2, w21, w8
     834:	csel	x3, x26, x24, hi  // hi = pmore
     838:	add	x0, x0, #0x0
     83c:	add	x1, x1, #0x0
     840:	madd	w23, w2, w9, w21
     844:	bl	0 <sprintf>
     848:	mov	w8, #0x3a7f                	// #14975
     84c:	movk	w8, #0x9, lsl #16
     850:	adrp	x22, 0 <list_super2>
     854:	adrp	x25, 0 <list_super2>
     858:	cmp	w23, w8
     85c:	add	x22, x22, #0x0
     860:	add	x25, x25, #0x0
     864:	b.ls	8c0 <list_super2+0x8c0>  // b.plast
     868:	ldrb	w10, [x22]
     86c:	add	w8, w8, #0x1
     870:	mov	w9, #0xc580                	// #50560
     874:	mov	w11, #0x74ff                	// #29951
     878:	movk	w9, #0xfff6, lsl #16
     87c:	movk	w11, #0x12, lsl #16
     880:	udiv	w3, w23, w8
     884:	cmp	w10, #0x0
     888:	madd	w27, w3, w9, w23
     88c:	csel	x2, x24, x25, eq  // eq = none
     890:	cmp	w23, w11
     894:	adrp	x23, 0 <list_super2>
     898:	add	x23, x23, #0x0
     89c:	adrp	x1, 0 <list_super2>
     8a0:	csel	x4, x26, x24, hi  // hi = pmore
     8a4:	add	x1, x1, #0x0
     8a8:	mov	x0, x23
     8ac:	bl	0 <sprintf>
     8b0:	mov	x0, x22
     8b4:	mov	x1, x23
     8b8:	bl	0 <strcat>
     8bc:	mov	w23, w27
     8c0:	lsr	w8, w23, #7
     8c4:	cmp	w8, #0x2a3
     8c8:	b.cc	928 <list_super2+0x928>  // b.lo, b.ul, b.last
     8cc:	mov	w8, #0x517f                	// #20863
     8d0:	ldrb	w10, [x22]
     8d4:	movk	w8, #0x1, lsl #16
     8d8:	mov	w9, #0xae80                	// #44672
     8dc:	add	w8, w8, #0x1
     8e0:	movk	w9, #0xfffe, lsl #16
     8e4:	udiv	w3, w23, w8
     8e8:	lsr	w11, w23, #8
     8ec:	madd	w27, w3, w9, w23
     8f0:	cmp	w10, #0x0
     8f4:	adrp	x23, 0 <list_super2>
     8f8:	csel	x2, x24, x25, eq  // eq = none
     8fc:	cmp	w11, #0x2a2
     900:	add	x23, x23, #0x0
     904:	adrp	x1, 0 <list_super2>
     908:	csel	x4, x26, x24, hi  // hi = pmore
     90c:	add	x1, x1, #0x0
     910:	mov	x0, x23
     914:	bl	0 <sprintf>
     918:	mov	x0, x22
     91c:	mov	x1, x23
     920:	bl	0 <strcat>
     924:	mov	w23, w27
     928:	adrp	x22, 0 <list_super2>
     92c:	add	x22, x22, #0x0
     930:	cbz	w23, 9a0 <list_super2+0x9a0>
     934:	mov	w8, #0xb3c5                	// #46021
     938:	movk	w8, #0x91a2, lsl #16
     93c:	ldrb	w12, [x22]
     940:	umull	x8, w23, w8
     944:	mov	w9, #0xfffff1f0            	// #-3600
     948:	mov	w10, #0x8889                	// #34953
     94c:	lsr	x3, x8, #43
     950:	movk	w10, #0x8888, lsl #16
     954:	madd	w8, w3, w9, w23
     958:	umull	x9, w8, w10
     95c:	adrp	x23, 0 <list_super2>
     960:	mov	w11, #0xffffffc4            	// #-60
     964:	cmp	w12, #0x0
     968:	lsr	x4, x9, #37
     96c:	add	x23, x23, #0x0
     970:	adrp	x1, 0 <list_super2>
     974:	madd	w5, w4, w11, w8
     978:	csel	x2, x24, x25, eq  // eq = none
     97c:	add	x1, x1, #0x0
     980:	mov	x0, x23
     984:	bl	0 <sprintf>
     988:	mov	x0, x22
     98c:	mov	x1, x23
     990:	bl	0 <strcat>
     994:	b	9a0 <list_super2+0x9a0>
     998:	adrp	x22, 0 <list_super2>
     99c:	add	x22, x22, #0x0
     9a0:	adrp	x1, 0 <list_super2>
     9a4:	add	x1, x1, #0x0
     9a8:	mov	x0, x19
     9ac:	mov	w2, w21
     9b0:	mov	x3, x22
     9b4:	bl	0 <fprintf>
     9b8:	ldr	w8, [x20, #68]
     9bc:	cbz	w8, 9e8 <list_super2+0x9e8>
     9c0:	ldr	w9, [x20, #64]
     9c4:	add	x0, sp, #0x8
     9c8:	add	w8, w9, w8
     9cc:	str	x8, [sp, #8]
     9d0:	bl	0 <ctime>
     9d4:	adrp	x1, 0 <list_super2>
     9d8:	mov	x2, x0
     9dc:	add	x1, x1, #0x0
     9e0:	mov	x0, x19
     9e4:	bl	0 <fprintf>
     9e8:	ldr	x8, [x20, #376]
     9ec:	cbz	x8, a94 <list_super2+0xa94>
     9f0:	adrp	x0, 0 <list_super2>
     9f4:	add	x0, x0, #0x0
     9f8:	mov	w1, #0x1a                  	// #26
     9fc:	mov	w2, #0x1                   	// #1
     a00:	mov	x3, x19
     a04:	bl	0 <fwrite>
     a08:	ldr	x2, [x20, #376]
     a0c:	lsr	x8, x2, #13
     a10:	cbnz	x8, a20 <list_super2+0xa20>
     a14:	adrp	x1, 0 <list_super2>
     a18:	add	x1, x1, #0x0
     a1c:	b	a8c <list_super2+0xa8c>
     a20:	lsr	x8, x2, #23
     a24:	cbnz	x8, a3c <list_super2+0xa3c>
     a28:	add	x8, x2, #0x200
     a2c:	adrp	x1, 0 <list_super2>
     a30:	lsr	x2, x8, #10
     a34:	add	x1, x1, #0x0
     a38:	b	a8c <list_super2+0xa8c>
     a3c:	lsr	x8, x2, #33
     a40:	cbnz	x8, a58 <list_super2+0xa58>
     a44:	add	x8, x2, #0x80, lsl #12
     a48:	adrp	x1, 0 <list_super2>
     a4c:	lsr	x2, x8, #20
     a50:	add	x1, x1, #0x0
     a54:	b	a8c <list_super2+0xa8c>
     a58:	lsr	x8, x2, #43
     a5c:	cbnz	x8, a78 <list_super2+0xa78>
     a60:	mov	w8, #0x20000000            	// #536870912
     a64:	add	x8, x2, x8
     a68:	adrp	x1, 0 <list_super2>
     a6c:	lsr	x2, x8, #30
     a70:	add	x1, x1, #0x0
     a74:	b	a8c <list_super2+0xa8c>
     a78:	mov	x8, #0x8000000000          	// #549755813888
     a7c:	add	x8, x2, x8
     a80:	adrp	x1, 0 <list_super2>
     a84:	lsr	x2, x8, #40
     a88:	add	x1, x1, #0x0
     a8c:	mov	x0, x19
     a90:	bl	0 <fprintf>
     a94:	adrp	x0, 0 <list_super2>
     a98:	add	x0, x0, #0x0
     a9c:	mov	w1, #0x1a                  	// #26
     aa0:	mov	w2, #0x1                   	// #1
     aa4:	mov	x3, x19
     aa8:	bl	0 <fwrite>
     aac:	ldrh	w21, [x20, #80]
     ab0:	adrp	x1, 0 <list_super2>
     ab4:	add	x1, x1, #0x0
     ab8:	mov	x0, x19
     abc:	mov	w2, w21
     ac0:	bl	0 <fprintf>
     ac4:	mov	w0, w21
     ac8:	bl	0 <getpwuid>
     acc:	cbz	x0, ae8 <list_super2+0xae8>
     ad0:	ldr	x2, [x0]
     ad4:	adrp	x1, 0 <list_super2>
     ad8:	add	x1, x1, #0x0
     adc:	mov	x0, x19
     ae0:	bl	0 <fprintf>
     ae4:	b	b00 <list_super2+0xb00>
     ae8:	adrp	x0, 0 <list_super2>
     aec:	add	x0, x0, #0x0
     af0:	mov	w1, #0xf                   	// #15
     af4:	mov	w2, #0x1                   	// #1
     af8:	mov	x3, x19
     afc:	bl	0 <fwrite>
     b00:	adrp	x0, 0 <list_super2>
     b04:	add	x0, x0, #0x0
     b08:	mov	w1, #0x1a                  	// #26
     b0c:	mov	w2, #0x1                   	// #1
     b10:	mov	x3, x19
     b14:	bl	0 <fwrite>
     b18:	ldrh	w21, [x20, #82]
     b1c:	adrp	x1, 0 <list_super2>
     b20:	add	x1, x1, #0x0
     b24:	mov	x0, x19
     b28:	mov	w2, w21
     b2c:	bl	0 <fprintf>
     b30:	mov	w0, w21
     b34:	bl	0 <getgrgid>
     b38:	cbz	x0, b5c <list_super2+0xb5c>
     b3c:	ldr	x2, [x0]
     b40:	adrp	x1, 0 <list_super2>
     b44:	add	x1, x1, #0x0
     b48:	mov	x0, x19
     b4c:	bl	0 <fprintf>
     b50:	ldr	w8, [x20, #76]
     b54:	cbnz	w8, b7c <list_super2+0xb7c>
     b58:	b	bd4 <list_super2+0xbd4>
     b5c:	adrp	x0, 0 <list_super2>
     b60:	add	x0, x0, #0x0
     b64:	mov	w1, #0x10                  	// #16
     b68:	mov	w2, #0x1                   	// #1
     b6c:	mov	x3, x19
     b70:	bl	0 <fwrite>
     b74:	ldr	w8, [x20, #76]
     b78:	cbz	w8, bd4 <list_super2+0xbd4>
     b7c:	ldr	w2, [x20, #84]
     b80:	adrp	x1, 0 <list_super2>
     b84:	add	x1, x1, #0x0
     b88:	mov	x0, x19
     b8c:	bl	0 <fprintf>
     b90:	ldrh	w2, [x20, #88]
     b94:	adrp	x1, 0 <list_super2>
     b98:	add	x1, x1, #0x0
     b9c:	mov	x0, x19
     ba0:	bl	0 <fprintf>
     ba4:	ldrh	w2, [x20, #348]
     ba8:	cbz	w2, bbc <list_super2+0xbbc>
     bac:	adrp	x1, 0 <list_super2>
     bb0:	add	x1, x1, #0x0
     bb4:	mov	x0, x19
     bb8:	bl	0 <fprintf>
     bbc:	ldrh	w2, [x20, #350]
     bc0:	cbz	w2, bd4 <list_super2+0xbd4>
     bc4:	adrp	x1, 0 <list_super2>
     bc8:	add	x1, x1, #0x0
     bcc:	mov	x0, x19
     bd0:	bl	0 <fprintf>
     bd4:	add	x21, x20, #0xd0
     bd8:	mov	x0, x21
     bdc:	bl	0 <e2p_is_null_uuid>
     be0:	cbnz	w0, c00 <list_super2+0xc00>
     be4:	mov	x0, x21
     be8:	bl	0 <e2p_uuid2str>
     bec:	adrp	x1, 0 <list_super2>
     bf0:	mov	x2, x0
     bf4:	add	x1, x1, #0x0
     bf8:	mov	x0, x19
     bfc:	bl	0 <fprintf>
     c00:	ldr	w2, [x20, #224]
     c04:	cbz	w2, c18 <list_super2+0xc18>
     c08:	adrp	x1, 0 <list_super2>
     c0c:	add	x1, x1, #0x0
     c10:	mov	x0, x19
     c14:	bl	0 <fprintf>
     c18:	ldr	w2, [x20, #228]
     c1c:	cbz	w2, c30 <list_super2+0xc30>
     c20:	adrp	x1, 0 <list_super2>
     c24:	add	x1, x1, #0x0
     c28:	mov	x0, x19
     c2c:	bl	0 <fprintf>
     c30:	ldr	w2, [x20, #232]
     c34:	cbz	w2, c48 <list_super2+0xc48>
     c38:	adrp	x1, 0 <list_super2>
     c3c:	add	x1, x1, #0x0
     c40:	mov	x0, x19
     c44:	bl	0 <fprintf>
     c48:	ldrb	w8, [x20, #92]
     c4c:	ldrb	w0, [x20, #252]
     c50:	tbnz	w8, #5, c58 <list_super2+0xc58>
     c54:	cbz	w0, c70 <list_super2+0xc70>
     c58:	bl	0 <e2p_hash2string>
     c5c:	adrp	x1, 0 <list_super2>
     c60:	mov	x2, x0
     c64:	add	x1, x1, #0x0
     c68:	mov	x0, x19
     c6c:	bl	0 <fprintf>
     c70:	add	x21, x20, #0xec
     c74:	mov	x0, x21
     c78:	bl	0 <e2p_is_null_uuid>
     c7c:	cbnz	w0, c9c <list_super2+0xc9c>
     c80:	mov	x0, x21
     c84:	bl	0 <e2p_uuid2str>
     c88:	adrp	x1, 0 <list_super2>
     c8c:	mov	x2, x0
     c90:	add	x1, x1, #0x0
     c94:	mov	x0, x19
     c98:	bl	0 <fprintf>
     c9c:	ldrb	w8, [x20, #253]
     ca0:	cbz	w8, ce0 <list_super2+0xce0>
     ca4:	adrp	x0, 0 <list_super2>
     ca8:	add	x0, x0, #0x0
     cac:	mov	w1, #0x1a                  	// #26
     cb0:	mov	w2, #0x1                   	// #1
     cb4:	mov	x3, x19
     cb8:	bl	0 <fwrite>
     cbc:	ldrb	w2, [x20, #253]
     cc0:	cmp	w2, #0x1
     cc4:	b.ne	cec <list_super2+0xcec>  // b.any
     cc8:	adrp	x0, 0 <list_super2>
     ccc:	add	x0, x0, #0x0
     cd0:	mov	w1, #0xd                   	// #13
     cd4:	mov	w2, #0x1                   	// #1
     cd8:	mov	x3, x19
     cdc:	bl	0 <fwrite>
     ce0:	ldr	w8, [x20, #588]
     ce4:	cbnz	w8, d0c <list_super2+0xd0c>
     ce8:	b	d04 <list_super2+0xd04>
     cec:	adrp	x1, 0 <list_super2>
     cf0:	add	x1, x1, #0x0
     cf4:	mov	x0, x19
     cf8:	bl	0 <fprintf>
     cfc:	ldr	w8, [x20, #588]
     d00:	cbnz	w8, d0c <list_super2+0xd0c>
     d04:	ldr	w8, [x20, #592]
     d08:	cbz	w8, d60 <list_super2+0xd60>
     d0c:	adrp	x0, 0 <list_super2>
     d10:	add	x0, x0, #0x0
     d14:	mov	w1, #0x1a                  	// #26
     d18:	mov	w2, #0x1                   	// #1
     d1c:	mov	x3, x19
     d20:	bl	0 <fwrite>
     d24:	ldr	w2, [x20, #588]
     d28:	cbz	w2, d3c <list_super2+0xd3c>
     d2c:	adrp	x1, 0 <list_super2>
     d30:	add	x1, x1, #0x0
     d34:	mov	x0, x19
     d38:	bl	0 <fprintf>
     d3c:	ldr	w2, [x20, #592]
     d40:	cbz	w2, d54 <list_super2+0xd54>
     d44:	adrp	x1, 0 <list_super2>
     d48:	add	x1, x1, #0x0
     d4c:	mov	x0, x19
     d50:	bl	0 <fprintf>
     d54:	mov	w0, #0xa                   	// #10
     d58:	mov	x1, x19
     d5c:	bl	0 <fputc>
     d60:	ldr	w2, [x20, #384]
     d64:	cbz	w2, da0 <list_super2+0xda0>
     d68:	adrp	x1, 0 <list_super2>
     d6c:	add	x1, x1, #0x0
     d70:	mov	x0, x19
     d74:	bl	0 <fprintf>
     d78:	ldr	w2, [x20, #388]
     d7c:	adrp	x1, 0 <list_super2>
     d80:	add	x1, x1, #0x0
     d84:	mov	x0, x19
     d88:	bl	0 <fprintf>
     d8c:	ldr	x2, [x20, #392]
     d90:	adrp	x1, 0 <list_super2>
     d94:	add	x1, x1, #0x0
     d98:	mov	x0, x19
     d9c:	bl	0 <fprintf>
     da0:	ldr	w2, [x20, #400]
     da4:	cbz	w2, db8 <list_super2+0xdb8>
     da8:	adrp	x1, 0 <list_super2>
     dac:	add	x1, x1, #0x0
     db0:	mov	x0, x19
     db4:	bl	0 <fprintf>
     db8:	ldr	w2, [x20, #404]
     dbc:	cbz	w2, dd0 <list_super2+0xdd0>
     dc0:	adrp	x1, 0 <list_super2>
     dc4:	add	x1, x1, #0x0
     dc8:	mov	x0, x19
     dcc:	bl	0 <fprintf>
     dd0:	ldr	w8, [x20, #408]
     dd4:	cbz	w8, e68 <list_super2+0xe68>
     dd8:	add	x0, x29, #0x18
     ddc:	str	x8, [x29, #24]
     de0:	bl	0 <ctime>
     de4:	adrp	x1, 0 <list_super2>
     de8:	mov	x2, x0
     dec:	add	x1, x1, #0x0
     df0:	mov	x0, x19
     df4:	bl	0 <fprintf>
     df8:	movi	v0.2d, #0x0
     dfc:	add	x1, x20, #0x1a8
     e00:	add	x0, sp, #0x10
     e04:	mov	w2, #0x20                  	// #32
     e08:	stp	q0, q0, [sp, #16]
     e0c:	stp	q0, q0, [sp, #48]
     e10:	str	q0, [sp, #80]
     e14:	bl	0 <strncpy>
     e18:	adrp	x1, 0 <list_super2>
     e1c:	add	x1, x1, #0x0
     e20:	add	x2, sp, #0x10
     e24:	mov	x0, x19
     e28:	bl	0 <fprintf>
     e2c:	ldr	w2, [x20, #456]
     e30:	adrp	x1, 0 <list_super2>
     e34:	add	x1, x1, #0x0
     e38:	mov	x0, x19
     e3c:	bl	0 <fprintf>
     e40:	ldr	w2, [x20, #412]
     e44:	adrp	x1, 0 <list_super2>
     e48:	add	x1, x1, #0x0
     e4c:	mov	x0, x19
     e50:	bl	0 <fprintf>
     e54:	ldr	x2, [x20, #416]
     e58:	adrp	x1, 0 <list_super2>
     e5c:	add	x1, x1, #0x0
     e60:	mov	x0, x19
     e64:	bl	0 <fprintf>
     e68:	ldr	w8, [x20, #460]
     e6c:	cbz	w8, f00 <list_super2+0xf00>
     e70:	add	x0, x29, #0x18
     e74:	str	x8, [x29, #24]
     e78:	bl	0 <ctime>
     e7c:	adrp	x1, 0 <list_super2>
     e80:	mov	x2, x0
     e84:	add	x1, x1, #0x0
     e88:	mov	x0, x19
     e8c:	bl	0 <fprintf>
     e90:	movi	v0.2d, #0x0
     e94:	add	x1, x20, #0x1e0
     e98:	add	x0, sp, #0x10
     e9c:	mov	w2, #0x20                  	// #32
     ea0:	stp	q0, q0, [sp, #16]
     ea4:	stp	q0, q0, [sp, #48]
     ea8:	str	q0, [sp, #80]
     eac:	bl	0 <strncpy>
     eb0:	adrp	x1, 0 <list_super2>
     eb4:	add	x1, x1, #0x0
     eb8:	add	x2, sp, #0x10
     ebc:	mov	x0, x19
     ec0:	bl	0 <fprintf>
     ec4:	ldr	w2, [x20, #468]
     ec8:	adrp	x1, 0 <list_super2>
     ecc:	add	x1, x1, #0x0
     ed0:	mov	x0, x19
     ed4:	bl	0 <fprintf>
     ed8:	ldr	w2, [x20, #464]
     edc:	adrp	x1, 0 <list_super2>
     ee0:	add	x1, x1, #0x0
     ee4:	mov	x0, x19
     ee8:	bl	0 <fprintf>
     eec:	ldr	x2, [x20, #472]
     ef0:	adrp	x1, 0 <list_super2>
     ef4:	add	x1, x1, #0x0
     ef8:	mov	x0, x19
     efc:	bl	0 <fprintf>
     f00:	ldrb	w8, [x20, #97]
     f04:	tbz	w8, #0, f30 <list_super2+0xf30>
     f08:	ldr	x2, [x20, #360]
     f0c:	adrp	x1, 0 <list_super2>
     f10:	add	x1, x1, #0x0
     f14:	mov	x0, x19
     f18:	bl	0 <fprintf>
     f1c:	ldrh	w2, [x20, #358]
     f20:	adrp	x1, 0 <list_super2>
     f24:	add	x1, x1, #0x0
     f28:	mov	x0, x19
     f2c:	bl	0 <fprintf>
     f30:	ldr	w8, [x20, #576]
     f34:	cbz	w8, f54 <list_super2+0xf54>
     f38:	ldr	w3, [x20, #576]
     f3c:	adrp	x1, 0 <list_super2>
     f40:	adrp	x2, 0 <list_super2>
     f44:	add	x1, x1, #0x0
     f48:	add	x2, x2, #0x0
     f4c:	mov	x0, x19
     f50:	bl	0 <fprintf>
     f54:	ldr	w8, [x20, #580]
     f58:	cbz	w8, f78 <list_super2+0xf78>
     f5c:	ldr	w3, [x20, #580]
     f60:	adrp	x1, 0 <list_super2>
     f64:	adrp	x2, 0 <list_super2>
     f68:	add	x1, x1, #0x0
     f6c:	add	x2, x2, #0x0
     f70:	mov	x0, x19
     f74:	bl	0 <fprintf>
     f78:	ldr	w8, [x20, #620]
     f7c:	cbz	w8, f9c <list_super2+0xf9c>
     f80:	ldr	w3, [x20, #620]
     f84:	adrp	x1, 0 <list_super2>
     f88:	adrp	x2, 0 <list_super2>
     f8c:	add	x1, x1, #0x0
     f90:	add	x2, x2, #0x0
     f94:	mov	x0, x19
     f98:	bl	0 <fprintf>
     f9c:	ldrb	w8, [x20, #101]
     fa0:	tbz	w8, #2, fe4 <list_super2+0xfe4>
     fa4:	ldrb	w8, [x20, #373]
     fa8:	adrp	x9, 0 <list_super2>
     fac:	adrp	x10, 0 <list_super2>
     fb0:	add	x9, x9, #0x0
     fb4:	add	x10, x10, #0x0
     fb8:	cmp	w8, #0x1
     fbc:	adrp	x1, 0 <list_super2>
     fc0:	csel	x2, x10, x9, eq  // eq = none
     fc4:	add	x1, x1, #0x0
     fc8:	mov	x0, x19
     fcc:	bl	0 <fprintf>
     fd0:	ldr	w2, [x20, #1020]
     fd4:	adrp	x1, 0 <list_super2>
     fd8:	add	x1, x1, #0x0
     fdc:	mov	x0, x19
     fe0:	bl	0 <fprintf>
     fe4:	add	x21, x20, #0x258
     fe8:	mov	x0, x21
     fec:	bl	0 <e2p_is_null_uuid>
     ff0:	cbz	w0, 103c <list_super2+0x103c>
     ff4:	ldr	w8, [x20, #96]
     ff8:	tbnz	w8, #13, 1060 <list_super2+0x1060>
     ffc:	tbz	w8, #17, 101c <list_super2+0x101c>
    1000:	ldrh	w0, [x20, #636]
    1004:	bl	0 <e2p_encoding2str>
    1008:	adrp	x1, 0 <list_super2>
    100c:	mov	x2, x0
    1010:	add	x1, x1, #0x0
    1014:	mov	x0, x19
    1018:	bl	0 <fprintf>
    101c:	ldp	x20, x19, [sp, #176]
    1020:	ldp	x22, x21, [sp, #160]
    1024:	ldp	x24, x23, [sp, #144]
    1028:	ldp	x26, x25, [sp, #128]
    102c:	ldr	x27, [sp, #112]
    1030:	ldp	x29, x30, [sp, #96]
    1034:	add	sp, sp, #0xc0
    1038:	ret
    103c:	mov	x0, x21
    1040:	bl	0 <e2p_uuid2str>
    1044:	adrp	x1, 0 <list_super2>
    1048:	mov	x2, x0
    104c:	add	x1, x1, #0x0
    1050:	mov	x0, x19
    1054:	bl	0 <fprintf>
    1058:	ldr	w8, [x20, #96]
    105c:	tbz	w8, #13, ffc <list_super2+0xffc>
    1060:	ldr	w2, [x20, #624]
    1064:	adrp	x1, 0 <list_super2>
    1068:	add	x1, x1, #0x0
    106c:	mov	x0, x19
    1070:	bl	0 <fprintf>
    1074:	ldr	w8, [x20, #96]
    1078:	tbnz	w8, #17, 1000 <list_super2+0x1000>
    107c:	b	101c <list_super2+0x101c>

0000000000001080 <list_super>:
    1080:	adrp	x8, 0 <stdout>
    1084:	ldr	x1, [x8]
    1088:	b	0 <list_super2>

ljs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_list_journal_super>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x20, x19, [sp, #80]
   8:	mov	x19, x0
   c:	adrp	x0, 0 <e2p_list_journal_super>
  10:	stp	x22, x21, [sp, #64]
  14:	mov	w21, w2
  18:	mov	x20, x1
  1c:	add	x0, x0, #0x0
  20:	mov	w1, #0x19                  	// #25
  24:	mov	w2, #0x1                   	// #1
  28:	mov	x3, x19
  2c:	str	x27, [sp, #16]
  30:	stp	x26, x25, [sp, #32]
  34:	stp	x24, x23, [sp, #48]
  38:	mov	x29, sp
  3c:	mov	w22, #0x1                   	// #1
  40:	bl	0 <fwrite>
  44:	ldr	w8, [x20, #36]
  48:	adrp	x23, 0 <e2p_list_journal_super>
  4c:	mov	w24, wzr
  50:	mov	w25, #0x20                  	// #32
  54:	rev	w26, w8
  58:	add	x23, x23, #0x0
  5c:	b	6c <e2p_list_journal_super+0x6c>
  60:	subs	w25, w25, #0x1
  64:	lsl	w22, w22, #1
  68:	b.eq	98 <e2p_list_journal_super+0x98>  // b.none
  6c:	tst	w22, w26
  70:	b.eq	60 <e2p_list_journal_super+0x60>  // b.none
  74:	mov	w0, wzr
  78:	mov	w1, w22
  7c:	bl	0 <e2p_jrnl_feature2string>
  80:	mov	x2, x0
  84:	mov	x0, x19
  88:	mov	x1, x23
  8c:	bl	0 <fprintf>
  90:	add	w24, w24, #0x1
  94:	b	60 <e2p_list_journal_super+0x60>
  98:	ldr	w8, [x20, #40]
  9c:	adrp	x23, 0 <e2p_list_journal_super>
  a0:	mov	w22, #0x1                   	// #1
  a4:	mov	w25, #0x20                  	// #32
  a8:	rev	w26, w8
  ac:	add	x23, x23, #0x0
  b0:	b	c0 <e2p_list_journal_super+0xc0>
  b4:	subs	w25, w25, #0x1
  b8:	lsl	w22, w22, #1
  bc:	b.eq	ec <e2p_list_journal_super+0xec>  // b.none
  c0:	tst	w22, w26
  c4:	b.eq	b4 <e2p_list_journal_super+0xb4>  // b.none
  c8:	mov	w0, #0x1                   	// #1
  cc:	mov	w1, w22
  d0:	bl	0 <e2p_jrnl_feature2string>
  d4:	mov	x2, x0
  d8:	mov	x0, x19
  dc:	mov	x1, x23
  e0:	bl	0 <fprintf>
  e4:	add	w24, w24, #0x1
  e8:	b	b4 <e2p_list_journal_super+0xb4>
  ec:	ldr	w8, [x20, #44]
  f0:	adrp	x23, 0 <e2p_list_journal_super>
  f4:	mov	w22, #0x1                   	// #1
  f8:	mov	w25, #0x20                  	// #32
  fc:	rev	w26, w8
 100:	add	x23, x23, #0x0
 104:	b	114 <e2p_list_journal_super+0x114>
 108:	subs	w25, w25, #0x1
 10c:	lsl	w22, w22, #1
 110:	b.eq	140 <e2p_list_journal_super+0x140>  // b.none
 114:	tst	w22, w26
 118:	b.eq	108 <e2p_list_journal_super+0x108>  // b.none
 11c:	mov	w0, #0x2                   	// #2
 120:	mov	w1, w22
 124:	bl	0 <e2p_jrnl_feature2string>
 128:	mov	x2, x0
 12c:	mov	x0, x19
 130:	mov	x1, x23
 134:	bl	0 <fprintf>
 138:	add	w24, w24, #0x1
 13c:	b	108 <e2p_list_journal_super+0x108>
 140:	cbnz	w24, 15c <e2p_list_journal_super+0x15c>
 144:	adrp	x0, 0 <e2p_list_journal_super>
 148:	add	x0, x0, #0x0
 14c:	mov	w1, #0x7                   	// #7
 150:	mov	w2, #0x1                   	// #1
 154:	mov	x3, x19
 158:	bl	0 <fwrite>
 15c:	mov	w0, #0xa                   	// #10
 160:	mov	x1, x19
 164:	bl	0 <fputc>
 168:	adrp	x0, 0 <e2p_list_journal_super>
 16c:	add	x0, x0, #0x0
 170:	mov	w1, #0x1a                  	// #26
 174:	mov	w2, #0x1                   	// #1
 178:	mov	x3, x19
 17c:	bl	0 <fwrite>
 180:	ldp	w8, w9, [x20, #12]
 184:	rev	w8, w8
 188:	lsr	w8, w8, #10
 18c:	rev	w9, w9
 190:	mul	w2, w8, w9
 194:	lsr	w8, w2, #13
 198:	cbnz	w8, 1a8 <e2p_list_journal_super+0x1a8>
 19c:	adrp	x1, 0 <e2p_list_journal_super>
 1a0:	add	x1, x1, #0x0
 1a4:	b	1b4 <e2p_list_journal_super+0x1b4>
 1a8:	adrp	x1, 0 <e2p_list_journal_super>
 1ac:	lsr	w2, w2, #10
 1b0:	add	x1, x1, #0x0
 1b4:	mov	x0, x19
 1b8:	bl	0 <fprintf>
 1bc:	ldr	w8, [x20, #12]
 1c0:	ldr	w22, [x20, #64]
 1c4:	rev	w2, w8
 1c8:	cmp	w2, w21
 1cc:	b.eq	1e0 <e2p_list_journal_super+0x1e0>  // b.none
 1d0:	adrp	x1, 0 <e2p_list_journal_super>
 1d4:	add	x1, x1, #0x0
 1d8:	mov	x0, x19
 1dc:	bl	0 <fprintf>
 1e0:	ldr	w8, [x20, #16]
 1e4:	adrp	x1, 0 <e2p_list_journal_super>
 1e8:	add	x1, x1, #0x0
 1ec:	mov	x0, x19
 1f0:	rev	w2, w8
 1f4:	bl	0 <fprintf>
 1f8:	ldr	w8, [x20, #20]
 1fc:	mov	w23, #0x1000000             	// #16777216
 200:	cmp	w8, w23
 204:	b.eq	21c <e2p_list_journal_super+0x21c>  // b.none
 208:	adrp	x1, 0 <e2p_list_journal_super>
 20c:	rev	w2, w8
 210:	add	x1, x1, #0x0
 214:	mov	x0, x19
 218:	bl	0 <fprintf>
 21c:	ldp	w8, w9, [x20, #24]
 220:	adrp	x1, 0 <e2p_list_journal_super>
 224:	add	x1, x1, #0x0
 228:	mov	x0, x19
 22c:	rev	w2, w8
 230:	rev	w3, w9
 234:	rev	w21, w22
 238:	bl	0 <fprintf>
 23c:	cmp	w22, w23
 240:	b.eq	258 <e2p_list_journal_super+0x258>  // b.none
 244:	adrp	x1, 0 <e2p_list_journal_super>
 248:	add	x1, x1, #0x0
 24c:	mov	x0, x19
 250:	mov	w2, w21
 254:	bl	0 <fprintf>
 258:	ldrb	w8, [x20, #39]
 25c:	tbz	w8, #0, 278 <e2p_list_journal_super+0x278>
 260:	adrp	x0, 0 <e2p_list_journal_super>
 264:	add	x0, x0, #0x0
 268:	mov	w1, #0x20                  	// #32
 26c:	mov	w2, #0x1                   	// #1
 270:	mov	x3, x19
 274:	bl	0 <fwrite>
 278:	ldrb	w8, [x20, #43]
 27c:	tst	w8, #0x18
 280:	b.eq	2b8 <e2p_list_journal_super+0x2b8>  // b.none
 284:	ldrb	w8, [x20, #80]
 288:	ldr	w10, [x20, #252]
 28c:	adrp	x9, 0 <e2p_list_journal_super>
 290:	adrp	x11, 0 <e2p_list_journal_super>
 294:	add	x9, x9, #0x0
 298:	add	x11, x11, #0x0
 29c:	cmp	w8, #0x4
 2a0:	adrp	x1, 0 <e2p_list_journal_super>
 2a4:	csel	x2, x11, x9, eq  // eq = none
 2a8:	rev	w3, w10
 2ac:	add	x1, x1, #0x0
 2b0:	mov	x0, x19
 2b4:	bl	0 <fprintf>
 2b8:	cmp	w21, #0x1
 2bc:	b.hi	2d8 <e2p_list_journal_super+0x2d8>  // b.pmore
 2c0:	add	x0, x20, #0x100
 2c4:	bl	0 <e2p_is_null_uuid>
 2c8:	cbnz	w0, 330 <e2p_list_journal_super+0x330>
 2cc:	mov	w8, #0x1000000             	// #16777216
 2d0:	cmp	w22, w8
 2d4:	b.ne	330 <e2p_list_journal_super+0x330>  // b.any
 2d8:	adrp	x26, 0 <e2p_list_journal_super>
 2dc:	adrp	x27, 0 <e2p_list_journal_super>
 2e0:	mov	x22, xzr
 2e4:	mov	x25, xzr
 2e8:	add	x23, x20, #0x100
 2ec:	mov	w24, w21
 2f0:	add	x26, x26, #0x0
 2f4:	add	x27, x27, #0x0
 2f8:	cmp	x22, #0x0
 2fc:	add	x0, x23, x22
 300:	csel	x21, x27, x26, eq  // eq = none
 304:	bl	0 <e2p_uuid2str>
 308:	mov	x1, x0
 30c:	mov	x0, x21
 310:	bl	0 <printf>
 314:	add	x8, x25, #0x1
 318:	cmp	x8, x24
 31c:	b.cs	330 <e2p_list_journal_super+0x330>  // b.hs, b.nlast
 320:	cmp	x25, #0x2f
 324:	add	x22, x22, #0x10
 328:	mov	x25, x8
 32c:	b.cc	2f8 <e2p_list_journal_super+0x2f8>  // b.lo, b.ul, b.last
 330:	ldr	w8, [x20, #32]
 334:	cbz	w8, 364 <e2p_list_journal_super+0x364>
 338:	mov	x0, x19
 33c:	ldp	x20, x19, [sp, #80]
 340:	ldp	x22, x21, [sp, #64]
 344:	ldp	x24, x23, [sp, #48]
 348:	ldp	x26, x25, [sp, #32]
 34c:	ldr	x27, [sp, #16]
 350:	adrp	x1, 0 <e2p_list_journal_super>
 354:	rev	w2, w8
 358:	add	x1, x1, #0x0
 35c:	ldp	x29, x30, [sp], #96
 360:	b	0 <fprintf>
 364:	ldp	x20, x19, [sp, #80]
 368:	ldp	x22, x21, [sp, #64]
 36c:	ldp	x24, x23, [sp, #48]
 370:	ldp	x26, x25, [sp, #32]
 374:	ldr	x27, [sp, #16]
 378:	ldp	x29, x30, [sp], #96
 37c:	ret

mntopts.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_mntopt2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x5f
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.gt	4c <e2p_mntopt2string+0x4c>
  14:	sub	w8, w0, #0x1
  18:	cmp	w8, #0x3f
  1c:	b.hi	f4 <e2p_mntopt2string+0xf4>  // b.pmore
  20:	adrp	x9, 0 <e2p_mntopt2string>
  24:	add	x9, x9, #0x0
  28:	adr	x10, 40 <e2p_mntopt2string+0x40>
  2c:	ldrb	w11, [x9, x8]
  30:	add	x10, x10, x11, lsl #2
  34:	adrp	x19, 0 <e2p_mntopt2string>
  38:	add	x19, x19, #0x0
  3c:	br	x10
  40:	adrp	x19, 0 <e2p_mntopt2string>
  44:	add	x19, x19, #0x0
  48:	b	11c <e2p_mntopt2string+0x11c>
  4c:	cmp	w0, #0x1ff
  50:	b.le	78 <e2p_mntopt2string+0x78>
  54:	cmp	w0, #0x200
  58:	b.eq	d0 <e2p_mntopt2string+0xd0>  // b.none
  5c:	cmp	w0, #0x400
  60:	b.eq	dc <e2p_mntopt2string+0xdc>  // b.none
  64:	cmp	w0, #0x800
  68:	b.ne	f4 <e2p_mntopt2string+0xf4>  // b.any
  6c:	adrp	x19, 0 <e2p_mntopt2string>
  70:	add	x19, x19, #0x0
  74:	b	11c <e2p_mntopt2string+0x11c>
  78:	cmp	w0, #0x60
  7c:	b.eq	e8 <e2p_mntopt2string+0xe8>  // b.none
  80:	cmp	w0, #0x100
  84:	b.ne	f4 <e2p_mntopt2string+0xf4>  // b.any
  88:	adrp	x19, 0 <e2p_mntopt2string>
  8c:	add	x19, x19, #0x0
  90:	b	11c <e2p_mntopt2string+0x11c>
  94:	adrp	x19, 0 <e2p_mntopt2string>
  98:	add	x19, x19, #0x0
  9c:	b	11c <e2p_mntopt2string+0x11c>
  a0:	adrp	x19, 0 <e2p_mntopt2string>
  a4:	add	x19, x19, #0x0
  a8:	b	11c <e2p_mntopt2string+0x11c>
  ac:	adrp	x19, 0 <e2p_mntopt2string>
  b0:	add	x19, x19, #0x0
  b4:	b	11c <e2p_mntopt2string+0x11c>
  b8:	adrp	x19, 0 <e2p_mntopt2string>
  bc:	add	x19, x19, #0x0
  c0:	b	11c <e2p_mntopt2string+0x11c>
  c4:	adrp	x19, 0 <e2p_mntopt2string>
  c8:	add	x19, x19, #0x0
  cc:	b	11c <e2p_mntopt2string+0x11c>
  d0:	adrp	x19, 0 <e2p_mntopt2string>
  d4:	add	x19, x19, #0x0
  d8:	b	11c <e2p_mntopt2string+0x11c>
  dc:	adrp	x19, 0 <e2p_mntopt2string>
  e0:	add	x19, x19, #0x0
  e4:	b	11c <e2p_mntopt2string+0x11c>
  e8:	adrp	x19, 0 <e2p_mntopt2string>
  ec:	add	x19, x19, #0x0
  f0:	b	11c <e2p_mntopt2string+0x11c>
  f4:	lsr	w8, w0, #1
  f8:	adrp	x19, 0 <e2p_mntopt2string>
  fc:	clz	w8, w8
 100:	mov	w9, #0x20                  	// #32
 104:	add	x19, x19, #0x0
 108:	adrp	x1, 0 <e2p_mntopt2string>
 10c:	sub	w2, w9, w8
 110:	add	x1, x1, #0x0
 114:	mov	x0, x19
 118:	bl	0 <sprintf>
 11c:	mov	x0, x19
 120:	ldr	x19, [sp, #16]
 124:	ldp	x29, x30, [sp], #32
 128:	ret

000000000000012c <e2p_string2mntopt>:
 12c:	sub	sp, sp, #0x30
 130:	stp	x20, x19, [sp, #32]
 134:	mov	x19, x1
 138:	adrp	x1, 0 <e2p_mntopt2string>
 13c:	add	x1, x1, #0x0
 140:	stp	x29, x30, [sp, #16]
 144:	add	x29, sp, #0x10
 148:	mov	x20, x0
 14c:	bl	0 <strcasecmp>
 150:	cbz	w0, 250 <e2p_string2mntopt+0x124>
 154:	adrp	x1, 0 <e2p_mntopt2string>
 158:	add	x1, x1, #0x0
 15c:	mov	x0, x20
 160:	bl	0 <strcasecmp>
 164:	cbz	w0, 25c <e2p_string2mntopt+0x130>
 168:	adrp	x1, 0 <e2p_mntopt2string>
 16c:	add	x1, x1, #0x0
 170:	mov	x0, x20
 174:	bl	0 <strcasecmp>
 178:	cbz	w0, 268 <e2p_string2mntopt+0x13c>
 17c:	adrp	x1, 0 <e2p_mntopt2string>
 180:	add	x1, x1, #0x0
 184:	mov	x0, x20
 188:	bl	0 <strcasecmp>
 18c:	cbz	w0, 274 <e2p_string2mntopt+0x148>
 190:	adrp	x1, 0 <e2p_mntopt2string>
 194:	add	x1, x1, #0x0
 198:	mov	x0, x20
 19c:	bl	0 <strcasecmp>
 1a0:	cbz	w0, 280 <e2p_string2mntopt+0x154>
 1a4:	adrp	x1, 0 <e2p_mntopt2string>
 1a8:	add	x1, x1, #0x0
 1ac:	mov	x0, x20
 1b0:	bl	0 <strcasecmp>
 1b4:	cbz	w0, 28c <e2p_string2mntopt+0x160>
 1b8:	adrp	x1, 0 <e2p_mntopt2string>
 1bc:	add	x1, x1, #0x0
 1c0:	mov	x0, x20
 1c4:	bl	0 <strcasecmp>
 1c8:	cbz	w0, 298 <e2p_string2mntopt+0x16c>
 1cc:	adrp	x1, 0 <e2p_mntopt2string>
 1d0:	add	x1, x1, #0x0
 1d4:	mov	x0, x20
 1d8:	bl	0 <strcasecmp>
 1dc:	cbz	w0, 2a4 <e2p_string2mntopt+0x178>
 1e0:	adrp	x1, 0 <e2p_mntopt2string>
 1e4:	add	x1, x1, #0x0
 1e8:	mov	x0, x20
 1ec:	bl	0 <strcasecmp>
 1f0:	cbz	w0, 2b0 <e2p_string2mntopt+0x184>
 1f4:	adrp	x1, 0 <e2p_mntopt2string>
 1f8:	add	x1, x1, #0x0
 1fc:	mov	x0, x20
 200:	bl	0 <strcasecmp>
 204:	cbz	w0, 2bc <e2p_string2mntopt+0x190>
 208:	adrp	x1, 0 <e2p_mntopt2string>
 20c:	add	x1, x1, #0x0
 210:	mov	x0, x20
 214:	bl	0 <strcasecmp>
 218:	cbz	w0, 2c8 <e2p_string2mntopt+0x19c>
 21c:	adrp	x1, 0 <e2p_mntopt2string>
 220:	add	x1, x1, #0x0
 224:	mov	x0, x20
 228:	bl	0 <strcasecmp>
 22c:	cbz	w0, 2d4 <e2p_string2mntopt+0x1a8>
 230:	adrp	x1, 0 <e2p_mntopt2string>
 234:	add	x1, x1, #0x0
 238:	mov	w2, #0x7                   	// #7
 23c:	mov	x0, x20
 240:	bl	0 <strncasecmp>
 244:	cbz	w0, 2f8 <e2p_string2mntopt+0x1cc>
 248:	mov	w0, #0x1                   	// #1
 24c:	b	2e8 <e2p_string2mntopt+0x1bc>
 250:	adrp	x8, 0 <e2p_mntopt2string>
 254:	add	x8, x8, #0x0
 258:	b	2dc <e2p_string2mntopt+0x1b0>
 25c:	adrp	x8, 0 <e2p_mntopt2string>
 260:	add	x8, x8, #0x0
 264:	b	2dc <e2p_string2mntopt+0x1b0>
 268:	adrp	x8, 0 <e2p_mntopt2string>
 26c:	add	x8, x8, #0x0
 270:	b	2dc <e2p_string2mntopt+0x1b0>
 274:	adrp	x8, 0 <e2p_mntopt2string>
 278:	add	x8, x8, #0x0
 27c:	b	2dc <e2p_string2mntopt+0x1b0>
 280:	adrp	x8, 0 <e2p_mntopt2string>
 284:	add	x8, x8, #0x0
 288:	b	2dc <e2p_string2mntopt+0x1b0>
 28c:	adrp	x8, 0 <e2p_mntopt2string>
 290:	add	x8, x8, #0x0
 294:	b	2dc <e2p_string2mntopt+0x1b0>
 298:	adrp	x8, 0 <e2p_mntopt2string>
 29c:	add	x8, x8, #0x0
 2a0:	b	2dc <e2p_string2mntopt+0x1b0>
 2a4:	adrp	x8, 0 <e2p_mntopt2string>
 2a8:	add	x8, x8, #0x0
 2ac:	b	2dc <e2p_string2mntopt+0x1b0>
 2b0:	adrp	x8, 0 <e2p_mntopt2string>
 2b4:	add	x8, x8, #0x0
 2b8:	b	2dc <e2p_string2mntopt+0x1b0>
 2bc:	adrp	x8, 0 <e2p_mntopt2string>
 2c0:	add	x8, x8, #0x0
 2c4:	b	2dc <e2p_string2mntopt+0x1b0>
 2c8:	adrp	x8, 0 <e2p_mntopt2string>
 2cc:	add	x8, x8, #0x0
 2d0:	b	2dc <e2p_string2mntopt+0x1b0>
 2d4:	adrp	x8, 0 <e2p_mntopt2string>
 2d8:	add	x8, x8, #0x0
 2dc:	ldr	w8, [x8]
 2e0:	mov	w0, wzr
 2e4:	str	w8, [x19]
 2e8:	ldp	x20, x19, [sp, #32]
 2ec:	ldp	x29, x30, [sp, #16]
 2f0:	add	sp, sp, #0x30
 2f4:	ret
 2f8:	ldrb	w8, [x20, #8]!
 2fc:	cbz	w8, 248 <e2p_string2mntopt+0x11c>
 300:	add	x1, sp, #0x8
 304:	mov	w2, #0xa                   	// #10
 308:	mov	x0, x20
 30c:	bl	0 <strtol>
 310:	mov	x8, x0
 314:	cmp	w8, #0x1f
 318:	b.hi	248 <e2p_string2mntopt+0x11c>  // b.pmore
 31c:	ldr	x9, [sp, #8]
 320:	mov	w0, #0x1                   	// #1
 324:	ldrb	w9, [x9]
 328:	cbnz	w9, 2e8 <e2p_string2mntopt+0x1bc>
 32c:	lsl	w8, w0, w8
 330:	b	2e0 <e2p_string2mntopt+0x1b4>

0000000000000334 <e2p_edit_mntopts>:
 334:	sub	sp, sp, #0x50
 338:	stp	x29, x30, [sp, #16]
 33c:	stp	x24, x23, [sp, #32]
 340:	stp	x22, x21, [sp, #48]
 344:	stp	x20, x19, [sp, #64]
 348:	add	x29, sp, #0x10
 34c:	mov	w20, w2
 350:	mov	x21, x1
 354:	mov	x22, x0
 358:	bl	0 <strlen>
 35c:	add	x0, x0, #0x1
 360:	bl	0 <malloc>
 364:	cbz	x0, 480 <e2p_edit_mntopts+0x14c>
 368:	mov	x1, x22
 36c:	mov	x19, x0
 370:	bl	0 <strcpy>
 374:	mov	x24, x0
 378:	b	390 <e2p_edit_mntopts+0x5c>
 37c:	ldr	w9, [x21]
 380:	orr	w8, w9, w8
 384:	add	x24, x22, #0x1
 388:	str	w8, [x21]
 38c:	cbz	x22, 488 <e2p_edit_mntopts+0x154>
 390:	ldrb	w23, [x24]
 394:	cbz	w23, 488 <e2p_edit_mntopts+0x154>
 398:	bl	0 <__ctype_b_loc>
 39c:	ldr	x9, [x0]
 3a0:	add	x0, x24, #0x1
 3a4:	and	x8, x23, #0xff
 3a8:	ldrh	w10, [x9, x8, lsl #1]
 3ac:	tbz	w10, #13, 3c4 <e2p_edit_mntopts+0x90>
 3b0:	ldrb	w23, [x0], #1
 3b4:	cbnz	w23, 3a4 <e2p_edit_mntopts+0x70>
 3b8:	mov	x22, xzr
 3bc:	sub	x0, x0, #0x1
 3c0:	b	440 <e2p_edit_mntopts+0x10c>
 3c4:	and	w11, w23, #0xff
 3c8:	sub	x8, x0, #0x1
 3cc:	cmp	w11, #0x2c
 3d0:	mov	x22, x8
 3d4:	b.eq	3fc <e2p_edit_mntopts+0xc8>  // b.none
 3d8:	mov	x22, x8
 3dc:	tbnz	w10, #13, 3fc <e2p_edit_mntopts+0xc8>
 3e0:	mov	x22, x8
 3e4:	ldrb	w10, [x22, #1]!
 3e8:	cbz	x10, 408 <e2p_edit_mntopts+0xd4>
 3ec:	cmp	w10, #0x2c
 3f0:	b.eq	3fc <e2p_edit_mntopts+0xc8>  // b.none
 3f4:	ldrh	w10, [x9, x10, lsl #1]
 3f8:	tbz	w10, #13, 3e4 <e2p_edit_mntopts+0xb0>
 3fc:	strb	wzr, [x22]
 400:	ldrb	w23, [x8]
 404:	b	40c <e2p_edit_mntopts+0xd8>
 408:	mov	x22, xzr
 40c:	and	w9, w23, #0xff
 410:	cmp	w9, #0x2b
 414:	b.eq	430 <e2p_edit_mntopts+0xfc>  // b.none
 418:	cmp	w9, #0x2d
 41c:	b.eq	428 <e2p_edit_mntopts+0xf4>  // b.none
 420:	cmp	w9, #0x5e
 424:	b.ne	438 <e2p_edit_mntopts+0x104>  // b.any
 428:	mov	w23, #0x1                   	// #1
 42c:	b	440 <e2p_edit_mntopts+0x10c>
 430:	mov	w23, wzr
 434:	b	440 <e2p_edit_mntopts+0x10c>
 438:	mov	w23, wzr
 43c:	mov	x0, x8
 440:	sub	x1, x29, #0x4
 444:	bl	12c <e2p_string2mntopt>
 448:	cbnz	w0, 490 <e2p_edit_mntopts+0x15c>
 44c:	ldur	w8, [x29, #-4]
 450:	cbz	w20, 45c <e2p_edit_mntopts+0x128>
 454:	and	w9, w8, w20
 458:	cbz	w9, 490 <e2p_edit_mntopts+0x15c>
 45c:	tst	w8, #0x60
 460:	b.eq	470 <e2p_edit_mntopts+0x13c>  // b.none
 464:	ldr	w9, [x21]
 468:	and	w9, w9, #0xffffff9f
 46c:	str	w9, [x21]
 470:	cbz	w23, 37c <e2p_edit_mntopts+0x48>
 474:	ldr	w9, [x21]
 478:	bic	w8, w9, w8
 47c:	b	384 <e2p_edit_mntopts+0x50>
 480:	mov	w20, #0x1                   	// #1
 484:	b	49c <e2p_edit_mntopts+0x168>
 488:	mov	w20, wzr
 48c:	b	494 <e2p_edit_mntopts+0x160>
 490:	mov	w20, #0x1                   	// #1
 494:	mov	x0, x19
 498:	bl	0 <free>
 49c:	mov	w0, w20
 4a0:	ldp	x20, x19, [sp, #64]
 4a4:	ldp	x22, x21, [sp, #48]
 4a8:	ldp	x24, x23, [sp, #32]
 4ac:	ldp	x29, x30, [sp, #16]
 4b0:	add	sp, sp, #0x50
 4b4:	ret

parse_num.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_num_blocks2>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w1
  10:	add	x1, x29, #0x18
  14:	mov	w2, wzr
  18:	bl	0 <strtoull>
  1c:	ldr	x9, [x29, #24]
  20:	ldrb	w8, [x9]
  24:	cbz	w8, 38 <parse_num_blocks2+0x38>
  28:	ldrb	w9, [x9, #1]
  2c:	cbz	w9, 40 <parse_num_blocks2+0x40>
  30:	mov	x8, xzr
  34:	b	84 <parse_num_blocks2+0x84>
  38:	mov	x8, x0
  3c:	b	84 <parse_num_blocks2+0x84>
  40:	sub	w9, w8, #0x47
  44:	cmp	w9, #0x2d
  48:	mov	x8, xzr
  4c:	b.hi	84 <parse_num_blocks2+0x84>  // b.pmore
  50:	adrp	x10, 0 <parse_num_blocks2>
  54:	add	x10, x10, #0x0
  58:	adr	x11, 68 <parse_num_blocks2+0x68>
  5c:	ldrb	w12, [x10, x9]
  60:	add	x11, x11, x12, lsl #2
  64:	br	x11
  68:	lsl	x0, x0, #10
  6c:	lsl	x0, x0, #10
  70:	lsl	x0, x0, #10
  74:	tbnz	w19, #31, 80 <parse_num_blocks2+0x80>
  78:	lsr	x8, x0, x19
  7c:	b	84 <parse_num_blocks2+0x84>
  80:	lsl	x8, x0, #10
  84:	ldr	x19, [sp, #16]
  88:	mov	x0, x8
  8c:	ldp	x29, x30, [sp], #32
  90:	ret
  94:	tbnz	w19, #31, a4 <parse_num_blocks2+0xa4>
  98:	add	w8, w19, #0x1
  9c:	lsr	x8, x0, x8
  a0:	b	84 <parse_num_blocks2+0x84>
  a4:	lsl	x8, x0, #9
  a8:	b	84 <parse_num_blocks2+0x84>

00000000000000ac <parse_num_blocks>:
  ac:	b	0 <parse_num_blocks2>

pe.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_errors>:
   0:	and	w8, w1, #0xffff
   4:	cmp	w8, #0x3
   8:	mov	x3, x0
   c:	b.eq	34 <print_fs_errors+0x34>  // b.none
  10:	cmp	w8, #0x2
  14:	b.eq	48 <print_fs_errors+0x48>  // b.none
  18:	cmp	w8, #0x1
  1c:	b.ne	5c <print_fs_errors+0x5c>  // b.any
  20:	adrp	x0, 0 <print_fs_errors>
  24:	add	x0, x0, #0x0
  28:	mov	w1, #0x8                   	// #8
  2c:	mov	w2, #0x1                   	// #1
  30:	b	0 <fwrite>
  34:	adrp	x0, 0 <print_fs_errors>
  38:	add	x0, x0, #0x0
  3c:	mov	w1, #0x5                   	// #5
  40:	mov	w2, #0x1                   	// #1
  44:	b	0 <fwrite>
  48:	adrp	x0, 0 <print_fs_errors>
  4c:	add	x0, x0, #0x0
  50:	mov	w1, #0x11                  	// #17
  54:	mov	w2, #0x1                   	// #1
  58:	b	0 <fwrite>
  5c:	adrp	x0, 0 <print_fs_errors>
  60:	add	x0, x0, #0x0
  64:	mov	w1, #0x12                  	// #18
  68:	mov	w2, #0x1                   	// #1
  6c:	b	0 <fwrite>

pf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_flags>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	stp	x24, x23, [sp, #16]
   8:	stp	x22, x21, [sp, #32]
   c:	adrp	x23, 0 <print_flags>
  10:	adrp	x22, 0 <print_flags>
  14:	stp	x20, x19, [sp, #48]
  18:	mov	w20, w2
  1c:	mov	x21, x1
  20:	mov	x19, x0
  24:	mov	w8, #0x1                   	// #1
  28:	add	x23, x23, #0x0
  2c:	add	x22, x22, #0x0
  30:	mov	w24, #0x1                   	// #1
  34:	mov	x29, sp
  38:	b	50 <print_flags+0x50>
  3c:	ldur	x0, [x23, #-16]
  40:	mov	x1, x19
  44:	bl	0 <fputs>
  48:	ldr	x8, [x23], #24
  4c:	cbz	x8, 9c <print_flags+0x9c>
  50:	tst	x8, x21
  54:	b.eq	88 <print_flags+0x88>  // b.none
  58:	tbz	w20, #0, 3c <print_flags+0x3c>
  5c:	cbnz	w24, 74 <print_flags+0x74>
  60:	mov	w1, #0x2                   	// #2
  64:	mov	w2, #0x1                   	// #1
  68:	mov	x0, x22
  6c:	mov	x3, x19
  70:	bl	0 <fwrite>
  74:	ldur	x0, [x23, #-8]
  78:	mov	x1, x19
  7c:	bl	0 <fputs>
  80:	mov	w24, wzr
  84:	b	48 <print_flags+0x48>
  88:	tbnz	w20, #0, 48 <print_flags+0x48>
  8c:	mov	w0, #0x2d                  	// #45
  90:	mov	x1, x19
  94:	bl	0 <fputc>
  98:	b	48 <print_flags+0x48>
  9c:	tbz	w20, #0, cc <print_flags+0xcc>
  a0:	cbz	w24, cc <print_flags+0xcc>
  a4:	mov	x3, x19
  a8:	ldp	x20, x19, [sp, #48]
  ac:	ldp	x22, x21, [sp, #32]
  b0:	ldp	x24, x23, [sp, #16]
  b4:	adrp	x0, 0 <print_flags>
  b8:	add	x0, x0, #0x0
  bc:	mov	w1, #0x3                   	// #3
  c0:	mov	w2, #0x1                   	// #1
  c4:	ldp	x29, x30, [sp], #64
  c8:	b	0 <fwrite>
  cc:	ldp	x20, x19, [sp, #48]
  d0:	ldp	x22, x21, [sp, #32]
  d4:	ldp	x24, x23, [sp, #16]
  d8:	ldp	x29, x30, [sp], #64
  dc:	ret

ps.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_state>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	and	w20, w1, #0xffff
  10:	mov	x29, sp
  14:	tbnz	w1, #0, 28 <print_fs_state+0x28>
  18:	adrp	x0, 0 <print_fs_state>
  1c:	add	x0, x0, #0x0
  20:	mov	w1, #0xa                   	// #10
  24:	b	34 <print_fs_state+0x34>
  28:	adrp	x0, 0 <print_fs_state>
  2c:	add	x0, x0, #0x0
  30:	mov	w1, #0x6                   	// #6
  34:	mov	w2, #0x1                   	// #1
  38:	mov	x3, x19
  3c:	bl	0 <fwrite>
  40:	tbnz	w20, #1, 50 <print_fs_state+0x50>
  44:	ldp	x20, x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	mov	x3, x19
  54:	ldp	x20, x19, [sp, #16]
  58:	adrp	x0, 0 <print_fs_state>
  5c:	add	x0, x0, #0x0
  60:	mov	w1, #0xc                   	// #12
  64:	mov	w2, #0x1                   	// #1
  68:	ldp	x29, x30, [sp], #32
  6c:	b	0 <fwrite>

setflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	w19, w0
   c:	mov	x20, x1
  10:	add	x2, sp, #0x10
  14:	mov	w0, wzr
  18:	mov	w1, w19
  1c:	stp	x29, x30, [sp, #144]
  20:	add	x29, sp, #0x90
  24:	bl	0 <__fxstat>
  28:	cbz	w0, 54 <setflags+0x54>
  2c:	mov	w1, #0x6602                	// #26114
  30:	add	x2, sp, #0xc
  34:	movk	w1, #0x4008, lsl #16
  38:	mov	w0, w19
  3c:	str	w20, [sp, #12]
  40:	bl	0 <ioctl>
  44:	ldp	x20, x19, [sp, #160]
  48:	ldp	x29, x30, [sp, #144]
  4c:	add	sp, sp, #0xb0
  50:	ret
  54:	ldr	w8, [sp, #32]
  58:	and	w8, w8, #0xf000
  5c:	cmp	w8, #0x4, lsl #12
  60:	b.eq	2c <setflags+0x2c>  // b.none
  64:	cmp	w8, #0x8, lsl #12
  68:	b.eq	2c <setflags+0x2c>  // b.none
  6c:	bl	0 <__errno_location>
  70:	mov	w8, #0x5f                  	// #95
  74:	str	w8, [x0]
  78:	mov	w0, #0xffffffff            	// #-1
  7c:	b	44 <setflags+0x44>

setversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setversion>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	stur	w1, [x29, #-4]
  10:	mov	w1, #0x7602                	// #30210
  14:	sub	x2, x29, #0x4
  18:	movk	w1, #0x4008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldp	x29, x30, [sp, #16]
  24:	add	sp, sp, #0x20
  28:	ret

uuid.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_is_null_uuid>:
   0:	ldrb	w8, [x0]
   4:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
   8:	ldrb	w8, [x0, #1]
   c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  10:	ldrb	w8, [x0, #2]
  14:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  18:	ldrb	w8, [x0, #3]
  1c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  20:	ldrb	w8, [x0, #4]
  24:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  28:	ldrb	w8, [x0, #5]
  2c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  30:	ldrb	w8, [x0, #6]
  34:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  38:	ldrb	w8, [x0, #7]
  3c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  40:	ldrb	w8, [x0, #8]
  44:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  48:	ldrb	w8, [x0, #9]
  4c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  50:	ldrb	w8, [x0, #10]
  54:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  58:	ldrb	w8, [x0, #11]
  5c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  60:	ldrb	w8, [x0, #12]
  64:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  68:	ldrb	w8, [x0, #13]
  6c:	cbnz	w8, 78 <e2p_is_null_uuid+0x78>
  70:	ldrb	w8, [x0, #14]
  74:	cbz	w8, 80 <e2p_is_null_uuid+0x80>
  78:	mov	w0, wzr
  7c:	ret
  80:	ldrb	w8, [x0, #15]
  84:	cmp	w8, #0x0
  88:	cset	w0, eq  // eq = none
  8c:	ret

0000000000000090 <e2p_uuid_to_str>:
  90:	sub	sp, sp, #0x40
  94:	stp	x29, x30, [sp, #48]
  98:	ldr	w9, [x0]
  9c:	ldrh	w10, [x0, #4]
  a0:	ldrh	w11, [x0, #6]
  a4:	ldrb	w5, [x0, #8]
  a8:	ldrb	w6, [x0, #9]
  ac:	ldrb	w7, [x0, #10]
  b0:	ldrb	w12, [x0, #11]
  b4:	ldrb	w13, [x0, #12]
  b8:	ldrb	w14, [x0, #13]
  bc:	ldrb	w15, [x0, #14]
  c0:	ldrb	w16, [x0, #15]
  c4:	mov	x8, x1
  c8:	rev	w2, w9
  cc:	lsl	w9, w10, #16
  d0:	lsl	w10, w11, #16
  d4:	adrp	x1, 0 <e2p_is_null_uuid>
  d8:	rev	w3, w9
  dc:	rev	w4, w10
  e0:	add	x1, x1, #0x0
  e4:	mov	x0, x8
  e8:	add	x29, sp, #0x30
  ec:	str	w16, [sp, #32]
  f0:	str	w15, [sp, #24]
  f4:	str	w14, [sp, #16]
  f8:	str	w13, [sp, #8]
  fc:	str	w12, [sp]
 100:	bl	0 <sprintf>
 104:	ldp	x29, x30, [sp, #48]
 108:	add	sp, sp, #0x40
 10c:	ret

0000000000000110 <e2p_uuid2str>:
 110:	sub	sp, sp, #0x50
 114:	stp	x29, x30, [sp, #48]
 118:	ldrb	w8, [x0]
 11c:	ldrb	w9, [x0, #1]
 120:	str	x19, [sp, #64]
 124:	add	x29, sp, #0x30
 128:	orr	w10, w8, w9
 12c:	cbnz	w10, 1a4 <e2p_uuid2str+0x94>
 130:	ldrb	w9, [x0, #2]
 134:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 138:	ldrb	w9, [x0, #3]
 13c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 140:	ldrb	w9, [x0, #4]
 144:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 148:	ldrb	w9, [x0, #5]
 14c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 150:	ldrb	w9, [x0, #6]
 154:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 158:	ldrb	w9, [x0, #7]
 15c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 160:	ldrb	w9, [x0, #8]
 164:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 168:	ldrb	w9, [x0, #9]
 16c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 170:	ldrb	w9, [x0, #10]
 174:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 178:	ldrb	w9, [x0, #11]
 17c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 180:	ldrb	w9, [x0, #12]
 184:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 188:	ldrb	w9, [x0, #13]
 18c:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 190:	ldrb	w9, [x0, #14]
 194:	cbnz	w9, 1a0 <e2p_uuid2str+0x90>
 198:	ldrb	w9, [x0, #15]
 19c:	cbz	w9, 234 <e2p_uuid2str+0x124>
 1a0:	mov	w9, wzr
 1a4:	ldrb	w10, [x0, #2]
 1a8:	ldrb	w2, [x0, #3]
 1ac:	lsl	w8, w8, #16
 1b0:	ldrh	w11, [x0, #4]
 1b4:	ldrh	w12, [x0, #6]
 1b8:	bfi	w8, w9, #8, #8
 1bc:	orr	w8, w8, w10
 1c0:	ldrb	w5, [x0, #8]
 1c4:	ldrb	w6, [x0, #9]
 1c8:	ldrb	w7, [x0, #10]
 1cc:	ldrb	w13, [x0, #11]
 1d0:	ldrb	w9, [x0, #12]
 1d4:	ldrb	w10, [x0, #13]
 1d8:	bfi	w2, w8, #8, #24
 1dc:	ldrb	w8, [x0, #14]
 1e0:	ldrb	w14, [x0, #15]
 1e4:	adrp	x19, 0 <e2p_is_null_uuid>
 1e8:	lsl	w11, w11, #16
 1ec:	lsl	w12, w12, #16
 1f0:	add	x19, x19, #0x0
 1f4:	adrp	x1, 0 <e2p_is_null_uuid>
 1f8:	rev	w3, w11
 1fc:	rev	w4, w12
 200:	add	x1, x1, #0x0
 204:	mov	x0, x19
 208:	str	w14, [sp, #32]
 20c:	str	w8, [sp, #24]
 210:	str	w10, [sp, #16]
 214:	str	w9, [sp, #8]
 218:	str	w13, [sp]
 21c:	bl	0 <sprintf>
 220:	mov	x0, x19
 224:	ldr	x19, [sp, #64]
 228:	ldp	x29, x30, [sp, #48]
 22c:	add	sp, sp, #0x50
 230:	ret
 234:	adrp	x19, 0 <e2p_is_null_uuid>
 238:	add	x19, x19, #0x0
 23c:	b	220 <e2p_uuid2str+0x110>

ostype.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_os2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x4
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.hi	24 <e2p_os2string+0x24>  // b.pmore
  14:	adrp	x8, 0 <e2p_os2string>
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8, w0, uxtw #3]
  20:	b	2c <e2p_os2string+0x2c>
  24:	adrp	x19, 0 <e2p_os2string>
  28:	add	x19, x19, #0x0
  2c:	mov	x0, x19
  30:	bl	0 <strlen>
  34:	add	x0, x0, #0x1
  38:	bl	0 <malloc>
  3c:	cbz	x0, 48 <e2p_os2string+0x48>
  40:	mov	x1, x19
  44:	bl	0 <strcpy>
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret

0000000000000054 <e2p_string2os>:
  54:	stp	x29, x30, [sp, #-32]!
  58:	adrp	x1, 0 <e2p_os2string>
  5c:	add	x1, x1, #0x0
  60:	str	x19, [sp, #16]
  64:	mov	x29, sp
  68:	mov	x19, x0
  6c:	bl	0 <strcasecmp>
  70:	cbz	w0, e4 <e2p_string2os+0x90>
  74:	adrp	x1, 0 <e2p_os2string>
  78:	add	x1, x1, #0x0
  7c:	mov	x0, x19
  80:	bl	0 <strcasecmp>
  84:	cbz	w0, d0 <e2p_string2os+0x7c>
  88:	adrp	x1, 0 <e2p_os2string>
  8c:	add	x1, x1, #0x0
  90:	mov	x0, x19
  94:	bl	0 <strcasecmp>
  98:	cbz	w0, d8 <e2p_string2os+0x84>
  9c:	adrp	x1, 0 <e2p_os2string>
  a0:	add	x1, x1, #0x0
  a4:	mov	x0, x19
  a8:	bl	0 <strcasecmp>
  ac:	cbz	w0, e0 <e2p_string2os+0x8c>
  b0:	adrp	x1, 0 <e2p_os2string>
  b4:	add	x1, x1, #0x0
  b8:	mov	x0, x19
  bc:	bl	0 <strcasecmp>
  c0:	cmp	w0, #0x0
  c4:	mov	w8, #0x4                   	// #4
  c8:	csinv	w0, w8, wzr, eq  // eq = none
  cc:	b	e4 <e2p_string2os+0x90>
  d0:	mov	w0, #0x1                   	// #1
  d4:	b	e4 <e2p_string2os+0x90>
  d8:	mov	w0, #0x2                   	// #2
  dc:	b	e4 <e2p_string2os+0x90>
  e0:	mov	w0, #0x3                   	// #3
  e4:	ldr	x19, [sp, #16]
  e8:	ldp	x29, x30, [sp], #32
  ec:	ret

percent.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_percent>:
   0:	cbz	w0, 54 <e2p_percent+0x54>
   4:	mov	w8, #0x64                  	// #100
   8:	sdiv	w8, w8, w0
   c:	mul	w9, w8, w0
  10:	cmp	w9, #0x64
  14:	b.eq	38 <e2p_percent+0x38>  // b.none
  18:	lsr	w8, w1, #24
  1c:	cbz	w8, 40 <e2p_percent+0x40>
  20:	mov	w8, #0x851f                	// #34079
  24:	movk	w8, #0x51eb, lsl #16
  28:	umull	x8, w1, w8
  2c:	lsr	x8, x8, #37
  30:	mul	w0, w8, w0
  34:	ret
  38:	udiv	w0, w1, w8
  3c:	ret
  40:	mov	w9, #0x851f                	// #34079
  44:	mul	w8, w1, w0
  48:	movk	w9, #0x51eb, lsl #16
  4c:	umull	x8, w8, w9
  50:	lsr	x0, x8, #37
  54:	ret

crypto_mode.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_encmode2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w2, w0
   8:	cmp	w0, #0x3
   c:	str	x19, [sp, #16]
  10:	mov	x29, sp
  14:	b.hi	28 <e2p_encmode2string+0x28>  // b.pmore
  18:	adrp	x8, 0 <e2p_encmode2string>
  1c:	add	x8, x8, #0x0
  20:	ldr	x0, [x8, w2, sxtw #3]
  24:	b	44 <e2p_encmode2string+0x44>
  28:	adrp	x19, 0 <e2p_encmode2string>
  2c:	add	x19, x19, #0x0
  30:	adrp	x1, 0 <e2p_encmode2string>
  34:	add	x1, x1, #0x0
  38:	mov	x0, x19
  3c:	bl	0 <sprintf>
  40:	mov	x0, x19
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret

0000000000000050 <e2p_string2encmode>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	adrp	x1, 0 <e2p_encmode2string>
  58:	add	x1, x1, #0x0
  5c:	str	x19, [sp, #16]
  60:	mov	x29, sp
  64:	mov	x19, x0
  68:	bl	0 <strcasecmp>
  6c:	cbz	w0, cc <e2p_string2encmode+0x7c>
  70:	adrp	x1, 0 <e2p_encmode2string>
  74:	add	x1, x1, #0x0
  78:	mov	x0, x19
  7c:	bl	0 <strcasecmp>
  80:	cbz	w0, d8 <e2p_string2encmode+0x88>
  84:	adrp	x1, 0 <e2p_encmode2string>
  88:	add	x1, x1, #0x0
  8c:	mov	x0, x19
  90:	bl	0 <strcasecmp>
  94:	cbz	w0, e4 <e2p_string2encmode+0x94>
  98:	adrp	x1, 0 <e2p_encmode2string>
  9c:	add	x1, x1, #0x0
  a0:	mov	x0, x19
  a4:	bl	0 <strcasecmp>
  a8:	cbz	w0, f0 <e2p_string2encmode+0xa0>
  ac:	adrp	x1, 0 <e2p_encmode2string>
  b0:	add	x1, x1, #0x0
  b4:	mov	w2, #0x9                   	// #9
  b8:	mov	x0, x19
  bc:	bl	0 <strncasecmp>
  c0:	cbz	w0, 108 <e2p_string2encmode+0xb8>
  c4:	mov	w0, #0xffffffff            	// #-1
  c8:	b	fc <e2p_string2encmode+0xac>
  cc:	adrp	x8, 0 <e2p_encmode2string>
  d0:	add	x8, x8, #0x0
  d4:	b	f8 <e2p_string2encmode+0xa8>
  d8:	adrp	x8, 0 <e2p_encmode2string>
  dc:	add	x8, x8, #0x0
  e0:	b	f8 <e2p_string2encmode+0xa8>
  e4:	adrp	x8, 0 <e2p_encmode2string>
  e8:	add	x8, x8, #0x0
  ec:	b	f8 <e2p_string2encmode+0xa8>
  f0:	adrp	x8, 0 <e2p_encmode2string>
  f4:	add	x8, x8, #0x0
  f8:	ldr	w0, [x8]
  fc:	ldr	x19, [sp, #16]
 100:	ldp	x29, x30, [sp], #32
 104:	ret
 108:	ldrb	w8, [x19, #9]!
 10c:	cbz	w8, c4 <e2p_string2encmode+0x74>
 110:	add	x1, x29, #0x18
 114:	mov	w2, #0xa                   	// #10
 118:	mov	x0, x19
 11c:	bl	0 <strtol>
 120:	cmp	w0, #0xff
 124:	b.hi	c4 <e2p_string2encmode+0x74>  // b.pmore
 128:	ldr	x8, [x29, #24]
 12c:	ldrb	w8, [x8]
 130:	cmp	w8, #0x0
 134:	csinv	w0, w0, wzr, eq  // eq = none
 138:	b	fc <e2p_string2encmode+0xac>

fgetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetproject>:
   0:	sub	sp, sp, #0x50
   4:	stp	x22, x21, [sp, #48]
   8:	mov	x21, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	stp	x20, x19, [sp, #64]
  18:	add	x29, sp, #0x20
  1c:	bl	0 <open>
  20:	cmn	w0, #0x1
  24:	b.eq	6c <fgetproject+0x6c>  // b.none
  28:	mov	w1, #0x581f                	// #22559
  2c:	mov	x2, sp
  30:	movk	w1, #0x801c, lsl #16
  34:	mov	w20, w0
  38:	bl	0 <ioctl>
  3c:	mov	w19, w0
  40:	cbnz	w0, 4c <fgetproject+0x4c>
  44:	ldr	w8, [sp, #12]
  48:	str	x8, [x21]
  4c:	bl	0 <__errno_location>
  50:	ldr	w22, [x0]
  54:	mov	x21, x0
  58:	mov	w0, w20
  5c:	bl	0 <close>
  60:	cbz	w22, 70 <fgetproject+0x70>
  64:	str	w22, [x21]
  68:	b	70 <fgetproject+0x70>
  6c:	mov	w19, #0xffffffff            	// #-1
  70:	mov	w0, w19
  74:	ldp	x20, x19, [sp, #64]
  78:	ldp	x22, x21, [sp, #48]
  7c:	ldp	x29, x30, [sp, #32]
  80:	add	sp, sp, #0x50
  84:	ret

fsetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetproject>:
   0:	sub	sp, sp, #0x40
   4:	stp	x20, x19, [sp, #48]
   8:	mov	x20, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	add	x29, sp, #0x20
  18:	bl	0 <open>
  1c:	cmn	w0, #0x1
  20:	b.eq	8c <fsetproject+0x8c>  // b.none
  24:	mov	w1, #0x581f                	// #22559
  28:	mov	x2, sp
  2c:	movk	w1, #0x801c, lsl #16
  30:	mov	w19, w0
  34:	bl	0 <ioctl>
  38:	cmn	w0, #0x1
  3c:	b.eq	70 <fsetproject+0x70>  // b.none
  40:	mov	w1, #0x5820                	// #22560
  44:	mov	x2, sp
  48:	movk	w1, #0x401c, lsl #16
  4c:	mov	w0, w19
  50:	str	w20, [sp, #12]
  54:	bl	0 <ioctl>
  58:	cmn	w0, #0x1
  5c:	b.eq	70 <fsetproject+0x70>  // b.none
  60:	mov	w20, w0
  64:	mov	w0, w19
  68:	bl	0 <close>
  6c:	b	90 <fsetproject+0x90>
  70:	bl	0 <__errno_location>
  74:	ldr	w20, [x0]
  78:	mov	w0, w19
  7c:	bl	0 <close>
  80:	cbz	w20, 8c <fsetproject+0x8c>
  84:	bl	0 <__errno_location>
  88:	str	w20, [x0]
  8c:	mov	w20, #0xffffffff            	// #-1
  90:	mov	w0, w20
  94:	ldp	x20, x19, [sp, #48]
  98:	ldp	x29, x30, [sp, #32]
  9c:	add	sp, sp, #0x40
  a0:	ret

encoding.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_str2encoding>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <e2p_str2encoding>
   8:	add	x1, x1, #0x0
   c:	str	x19, [sp, #16]
  10:	mov	x29, sp
  14:	mov	x19, x0
  18:	bl	0 <strcmp>
  1c:	cbz	w0, 3c <e2p_str2encoding+0x3c>
  20:	adrp	x1, 0 <e2p_str2encoding>
  24:	add	x1, x1, #0x0
  28:	mov	x0, x19
  2c:	bl	0 <strcmp>
  30:	cbz	w0, 44 <e2p_str2encoding+0x44>
  34:	mov	w0, #0xffffffea            	// #-22
  38:	b	58 <e2p_str2encoding+0x58>
  3c:	mov	x8, xzr
  40:	b	48 <e2p_str2encoding+0x48>
  44:	mov	w8, #0x1                   	// #1
  48:	adrp	x9, 0 <e2p_str2encoding>
  4c:	add	x9, x9, #0x0
  50:	add	x8, x9, x8, lsl #4
  54:	ldrh	w0, [x8, #8]
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret

0000000000000064 <e2p_encoding2str>:
  64:	stp	x29, x30, [sp, #-32]!
  68:	cmp	w0, #0x1
  6c:	str	x19, [sp, #16]
  70:	mov	x29, sp
  74:	b.ne	84 <e2p_encoding2str+0x20>  // b.any
  78:	adrp	x19, 0 <e2p_str2encoding>
  7c:	add	x19, x19, #0x0
  80:	b	a0 <e2p_encoding2str+0x3c>
  84:	adrp	x19, 0 <e2p_str2encoding>
  88:	add	x19, x19, #0x0
  8c:	adrp	x1, 0 <e2p_str2encoding>
  90:	mov	w2, w0
  94:	add	x1, x1, #0x0
  98:	mov	x0, x19
  9c:	bl	0 <sprintf>
  a0:	mov	x0, x19
  a4:	ldr	x19, [sp, #16]
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret

00000000000000b0 <e2p_get_encoding_flags>:
  b0:	mov	w0, wzr
  b4:	ret

00000000000000b8 <e2p_str2encoding_flags>:
  b8:	stp	x29, x30, [sp, #-64]!
  bc:	mov	x8, x1
  c0:	adrp	x1, 0 <e2p_str2encoding>
  c4:	stp	x20, x19, [sp, #48]
  c8:	mov	w20, w0
  cc:	add	x1, x1, #0x0
  d0:	mov	x0, x8
  d4:	stp	x24, x23, [sp, #16]
  d8:	stp	x22, x21, [sp, #32]
  dc:	mov	x29, sp
  e0:	mov	x19, x2
  e4:	bl	0 <strtok>
  e8:	cmp	w20, #0x1
  ec:	b.ne	16c <e2p_str2encoding_flags+0xb4>  // b.any
  f0:	mov	x23, x0
  f4:	cbz	x0, 174 <e2p_str2encoding_flags+0xbc>
  f8:	adrp	x20, 0 <e2p_str2encoding>
  fc:	adrp	x21, 0 <e2p_str2encoding>
 100:	adrp	x22, 0 <e2p_str2encoding>
 104:	add	x20, x20, #0x0
 108:	add	x21, x21, #0x0
 10c:	add	x22, x22, #0x0
 110:	mov	w2, #0x2                   	// #2
 114:	mov	x0, x20
 118:	mov	x1, x23
 11c:	bl	0 <strncmp>
 120:	add	x8, x23, #0x2
 124:	cmp	w0, #0x0
 128:	mov	w24, w0
 12c:	csel	x1, x8, x23, eq  // eq = none
 130:	mov	x0, x21
 134:	bl	0 <strcmp>
 138:	cbnz	w0, 16c <e2p_str2encoding_flags+0xb4>
 13c:	ldrh	w8, [x19]
 140:	cmp	w24, #0x0
 144:	mov	x0, xzr
 148:	mov	x1, x22
 14c:	orr	w9, w8, #0x1
 150:	and	w8, w8, #0xfffe
 154:	csel	w8, w8, w9, eq  // eq = none
 158:	strh	w8, [x19]
 15c:	bl	0 <strtok>
 160:	mov	x23, x0
 164:	cbnz	x0, 110 <e2p_str2encoding_flags+0x58>
 168:	b	178 <e2p_str2encoding_flags+0xc0>
 16c:	mov	w0, #0xffffffea            	// #-22
 170:	b	178 <e2p_str2encoding_flags+0xc0>
 174:	mov	w0, wzr
 178:	ldp	x20, x19, [sp, #48]
 17c:	ldp	x22, x21, [sp, #32]
 180:	ldp	x24, x23, [sp, #16]
 184:	ldp	x29, x30, [sp], #64
 188:	ret
