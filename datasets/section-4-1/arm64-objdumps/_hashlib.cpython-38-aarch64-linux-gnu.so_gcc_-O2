
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_hashlib.cpython-38-aarch64-linux-gnu.so_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000024e0 <.init>:
    24e0:	stp	x29, x30, [sp, #-16]!
    24e4:	mov	x29, sp
    24e8:	bl	29d0 <PyThread_acquire_lock@plt+0x10>
    24ec:	ldp	x29, x30, [sp], #16
    24f0:	ret

Disassembly of section .plt:

0000000000002500 <PyModule_AddObject@plt-0x20>:
    2500:	stp	x16, x30, [sp, #-16]!
    2504:	adrp	x16, 16000 <PyInit__hashlib@@Base+0x11350>
    2508:	ldr	x17, [x16, #4088]
    250c:	add	x16, x16, #0xff8
    2510:	br	x17
    2514:	nop
    2518:	nop
    251c:	nop

0000000000002520 <PyModule_AddObject@plt>:
    2520:	adrp	x16, 17000 <PyModule_AddObject>
    2524:	ldr	x17, [x16]
    2528:	add	x16, x16, #0x0
    252c:	br	x17

0000000000002530 <EVP_MD_type@plt>:
    2530:	adrp	x16, 17000 <PyModule_AddObject>
    2534:	ldr	x17, [x16, #8]
    2538:	add	x16, x16, #0x8
    253c:	br	x17

0000000000002540 <PKCS5_PBKDF2_HMAC@plt>:
    2540:	adrp	x16, 17000 <PyModule_AddObject>
    2544:	ldr	x17, [x16, #16]
    2548:	add	x16, x16, #0x10
    254c:	br	x17

0000000000002550 <EVP_DigestInit_ex@plt>:
    2550:	adrp	x16, 17000 <PyModule_AddObject>
    2554:	ldr	x17, [x16, #24]
    2558:	add	x16, x16, #0x18
    255c:	br	x17

0000000000002560 <ERR_reason_error_string@plt>:
    2560:	adrp	x16, 17000 <PyModule_AddObject>
    2564:	ldr	x17, [x16, #32]
    2568:	add	x16, x16, #0x20
    256c:	br	x17

0000000000002570 <EVP_sha512_224@plt>:
    2570:	adrp	x16, 17000 <PyModule_AddObject>
    2574:	ldr	x17, [x16, #40]
    2578:	add	x16, x16, #0x28
    257c:	br	x17

0000000000002580 <EVP_blake2s256@plt>:
    2580:	adrp	x16, 17000 <PyModule_AddObject>
    2584:	ldr	x17, [x16, #48]
    2588:	add	x16, x16, #0x30
    258c:	br	x17

0000000000002590 <EVP_MD_CTX_md@plt>:
    2590:	adrp	x16, 17000 <PyModule_AddObject>
    2594:	ldr	x17, [x16, #56]
    2598:	add	x16, x16, #0x38
    259c:	br	x17

00000000000025a0 <PyType_Ready@plt>:
    25a0:	adrp	x16, 17000 <PyModule_AddObject>
    25a4:	ldr	x17, [x16, #64]
    25a8:	add	x16, x16, #0x40
    25ac:	br	x17

00000000000025b0 <EVP_shake256@plt>:
    25b0:	adrp	x16, 17000 <PyModule_AddObject>
    25b4:	ldr	x17, [x16, #72]
    25b8:	add	x16, x16, #0x48
    25bc:	br	x17

00000000000025c0 <EVP_sha384@plt>:
    25c0:	adrp	x16, 17000 <PyModule_AddObject>
    25c4:	ldr	x17, [x16, #80]
    25c8:	add	x16, x16, #0x50
    25cc:	br	x17

00000000000025d0 <__gmon_start__@plt>:
    25d0:	adrp	x16, 17000 <PyModule_AddObject>
    25d4:	ldr	x17, [x16, #88]
    25d8:	add	x16, x16, #0x58
    25dc:	br	x17

00000000000025e0 <ERR_func_error_string@plt>:
    25e0:	adrp	x16, 17000 <PyModule_AddObject>
    25e4:	ldr	x17, [x16, #96]
    25e8:	add	x16, x16, #0x60
    25ec:	br	x17

00000000000025f0 <EVP_sha3_512@plt>:
    25f0:	adrp	x16, 17000 <PyModule_AddObject>
    25f4:	ldr	x17, [x16, #104]
    25f8:	add	x16, x16, #0x68
    25fc:	br	x17

0000000000002600 <OBJ_nid2ln@plt>:
    2600:	adrp	x16, 17000 <PyModule_AddObject>
    2604:	ldr	x17, [x16, #112]
    2608:	add	x16, x16, #0x70
    260c:	br	x17

0000000000002610 <ERR_clear_error@plt>:
    2610:	adrp	x16, 17000 <PyModule_AddObject>
    2614:	ldr	x17, [x16, #120]
    2618:	add	x16, x16, #0x78
    261c:	br	x17

0000000000002620 <PyUnicode_FromString@plt>:
    2620:	adrp	x16, 17000 <PyModule_AddObject>
    2624:	ldr	x17, [x16, #128]
    2628:	add	x16, x16, #0x80
    262c:	br	x17

0000000000002630 <PyErr_NoMemory@plt>:
    2630:	adrp	x16, 17000 <PyModule_AddObject>
    2634:	ldr	x17, [x16, #136]
    2638:	add	x16, x16, #0x88
    263c:	br	x17

0000000000002640 <EVP_get_digestbyname@plt>:
    2640:	adrp	x16, 17000 <PyModule_AddObject>
    2644:	ldr	x17, [x16, #144]
    2648:	add	x16, x16, #0x90
    264c:	br	x17

0000000000002650 <PyThread_free_lock@plt>:
    2650:	adrp	x16, 17000 <PyModule_AddObject>
    2654:	ldr	x17, [x16, #152]
    2658:	add	x16, x16, #0x98
    265c:	br	x17

0000000000002660 <_PyObject_New@plt>:
    2660:	adrp	x16, 17000 <PyModule_AddObject>
    2664:	ldr	x17, [x16, #160]
    2668:	add	x16, x16, #0xa0
    266c:	br	x17

0000000000002670 <PyUnicode_AsUTF8AndSize@plt>:
    2670:	adrp	x16, 17000 <PyModule_AddObject>
    2674:	ldr	x17, [x16, #168]
    2678:	add	x16, x16, #0xa8
    267c:	br	x17

0000000000002680 <EVP_shake128@plt>:
    2680:	adrp	x16, 17000 <PyModule_AddObject>
    2684:	ldr	x17, [x16, #176]
    2688:	add	x16, x16, #0xb0
    268c:	br	x17

0000000000002690 <EVP_md5@plt>:
    2690:	adrp	x16, 17000 <PyModule_AddObject>
    2694:	ldr	x17, [x16, #184]
    2698:	add	x16, x16, #0xb8
    269c:	br	x17

00000000000026a0 <PyUnicode_FromFormat@plt>:
    26a0:	adrp	x16, 17000 <PyModule_AddObject>
    26a4:	ldr	x17, [x16, #192]
    26a8:	add	x16, x16, #0xc0
    26ac:	br	x17

00000000000026b0 <PyThread_allocate_lock@plt>:
    26b0:	adrp	x16, 17000 <PyModule_AddObject>
    26b4:	ldr	x17, [x16, #200]
    26b8:	add	x16, x16, #0xc8
    26bc:	br	x17

00000000000026c0 <EVP_MD_size@plt>:
    26c0:	adrp	x16, 17000 <PyModule_AddObject>
    26c4:	ldr	x17, [x16, #208]
    26c8:	add	x16, x16, #0xd0
    26cc:	br	x17

00000000000026d0 <PyLong_AsLong@plt>:
    26d0:	adrp	x16, 17000 <PyModule_AddObject>
    26d4:	ldr	x17, [x16, #216]
    26d8:	add	x16, x16, #0xd8
    26dc:	br	x17

00000000000026e0 <__cxa_finalize@plt>:
    26e0:	adrp	x16, 17000 <PyModule_AddObject>
    26e4:	ldr	x17, [x16, #224]
    26e8:	add	x16, x16, #0xe0
    26ec:	br	x17

00000000000026f0 <PyErr_Format@plt>:
    26f0:	adrp	x16, 17000 <PyModule_AddObject>
    26f4:	ldr	x17, [x16, #232]
    26f8:	add	x16, x16, #0xe8
    26fc:	br	x17

0000000000002700 <EVP_DigestUpdate@plt>:
    2700:	adrp	x16, 17000 <PyModule_AddObject>
    2704:	ldr	x17, [x16, #240]
    2708:	add	x16, x16, #0xf0
    270c:	br	x17

0000000000002710 <EVP_MD_do_all@plt>:
    2710:	adrp	x16, 17000 <PyModule_AddObject>
    2714:	ldr	x17, [x16, #248]
    2718:	add	x16, x16, #0xf8
    271c:	br	x17

0000000000002720 <PyErr_Occurred@plt>:
    2720:	adrp	x16, 17000 <PyModule_AddObject>
    2724:	ldr	x17, [x16, #256]
    2728:	add	x16, x16, #0x100
    272c:	br	x17

0000000000002730 <EVP_MD_block_size@plt>:
    2730:	adrp	x16, 17000 <PyModule_AddObject>
    2734:	ldr	x17, [x16, #264]
    2738:	add	x16, x16, #0x108
    273c:	br	x17

0000000000002740 <PyThread_release_lock@plt>:
    2740:	adrp	x16, 17000 <PyModule_AddObject>
    2744:	ldr	x17, [x16, #272]
    2748:	add	x16, x16, #0x110
    274c:	br	x17

0000000000002750 <PyObject_GetBuffer@plt>:
    2750:	adrp	x16, 17000 <PyModule_AddObject>
    2754:	ldr	x17, [x16, #280]
    2758:	add	x16, x16, #0x118
    275c:	br	x17

0000000000002760 <EVP_DigestFinal@plt>:
    2760:	adrp	x16, 17000 <PyModule_AddObject>
    2764:	ldr	x17, [x16, #288]
    2768:	add	x16, x16, #0x120
    276c:	br	x17

0000000000002770 <PyEval_RestoreThread@plt>:
    2770:	adrp	x16, 17000 <PyModule_AddObject>
    2774:	ldr	x17, [x16, #296]
    2778:	add	x16, x16, #0x128
    277c:	br	x17

0000000000002780 <EVP_MD_CTX_copy@plt>:
    2780:	adrp	x16, 17000 <PyModule_AddObject>
    2784:	ldr	x17, [x16, #304]
    2788:	add	x16, x16, #0x130
    278c:	br	x17

0000000000002790 <EVP_sha3_384@plt>:
    2790:	adrp	x16, 17000 <PyModule_AddObject>
    2794:	ldr	x17, [x16, #312]
    2798:	add	x16, x16, #0x138
    279c:	br	x17

00000000000027a0 <PyFrozenSet_New@plt>:
    27a0:	adrp	x16, 17000 <PyModule_AddObject>
    27a4:	ldr	x17, [x16, #320]
    27a8:	add	x16, x16, #0x140
    27ac:	br	x17

00000000000027b0 <PyEval_SaveThread@plt>:
    27b0:	adrp	x16, 17000 <PyModule_AddObject>
    27b4:	ldr	x17, [x16, #328]
    27b8:	add	x16, x16, #0x148
    27bc:	br	x17

00000000000027c0 <EVP_sha224@plt>:
    27c0:	adrp	x16, 17000 <PyModule_AddObject>
    27c4:	ldr	x17, [x16, #336]
    27c8:	add	x16, x16, #0x150
    27cc:	br	x17

00000000000027d0 <EVP_sha3_256@plt>:
    27d0:	adrp	x16, 17000 <PyModule_AddObject>
    27d4:	ldr	x17, [x16, #344]
    27d8:	add	x16, x16, #0x158
    27dc:	br	x17

00000000000027e0 <EVP_MD_CTX_new@plt>:
    27e0:	adrp	x16, 17000 <PyModule_AddObject>
    27e4:	ldr	x17, [x16, #352]
    27e8:	add	x16, x16, #0x160
    27ec:	br	x17

00000000000027f0 <PyBuffer_IsContiguous@plt>:
    27f0:	adrp	x16, 17000 <PyModule_AddObject>
    27f4:	ldr	x17, [x16, #360]
    27f8:	add	x16, x16, #0x168
    27fc:	br	x17

0000000000002800 <PyType_IsSubtype@plt>:
    2800:	adrp	x16, 17000 <PyModule_AddObject>
    2804:	ldr	x17, [x16, #368]
    2808:	add	x16, x16, #0x170
    280c:	br	x17

0000000000002810 <_Py_strhex@plt>:
    2810:	adrp	x16, 17000 <PyModule_AddObject>
    2814:	ldr	x17, [x16, #376]
    2818:	add	x16, x16, #0x178
    281c:	br	x17

0000000000002820 <EVP_sha1@plt>:
    2820:	adrp	x16, 17000 <PyModule_AddObject>
    2824:	ldr	x17, [x16, #384]
    2828:	add	x16, x16, #0x180
    282c:	br	x17

0000000000002830 <EVP_PBE_scrypt@plt>:
    2830:	adrp	x16, 17000 <PyModule_AddObject>
    2834:	ldr	x17, [x16, #392]
    2838:	add	x16, x16, #0x188
    283c:	br	x17

0000000000002840 <ERR_peek_last_error@plt>:
    2840:	adrp	x16, 17000 <PyModule_AddObject>
    2844:	ldr	x17, [x16, #400]
    2848:	add	x16, x16, #0x190
    284c:	br	x17

0000000000002850 <PySet_Add@plt>:
    2850:	adrp	x16, 17000 <PyModule_AddObject>
    2854:	ldr	x17, [x16, #408]
    2858:	add	x16, x16, #0x198
    285c:	br	x17

0000000000002860 <HMAC@plt>:
    2860:	adrp	x16, 17000 <PyModule_AddObject>
    2864:	ldr	x17, [x16, #416]
    2868:	add	x16, x16, #0x1a0
    286c:	br	x17

0000000000002870 <PyBytes_FromStringAndSize@plt>:
    2870:	adrp	x16, 17000 <PyModule_AddObject>
    2874:	ldr	x17, [x16, #424]
    2878:	add	x16, x16, #0x1a8
    287c:	br	x17

0000000000002880 <_PyArg_Parse_SizeT@plt>:
    2880:	adrp	x16, 17000 <PyModule_AddObject>
    2884:	ldr	x17, [x16, #432]
    2888:	add	x16, x16, #0x1b0
    288c:	br	x17

0000000000002890 <PyLong_FromLong@plt>:
    2890:	adrp	x16, 17000 <PyModule_AddObject>
    2894:	ldr	x17, [x16, #440]
    2898:	add	x16, x16, #0x1b8
    289c:	br	x17

00000000000028a0 <strcmp@plt>:
    28a0:	adrp	x16, 17000 <PyModule_AddObject>
    28a4:	ldr	x17, [x16, #448]
    28a8:	add	x16, x16, #0x1c0
    28ac:	br	x17

00000000000028b0 <EVP_blake2b512@plt>:
    28b0:	adrp	x16, 17000 <PyModule_AddObject>
    28b4:	ldr	x17, [x16, #456]
    28b8:	add	x16, x16, #0x1c8
    28bc:	br	x17

00000000000028c0 <_PyArg_UnpackKeywords@plt>:
    28c0:	adrp	x16, 17000 <PyModule_AddObject>
    28c4:	ldr	x17, [x16, #464]
    28c8:	add	x16, x16, #0x1d0
    28cc:	br	x17

00000000000028d0 <EVP_MD_CTX_free@plt>:
    28d0:	adrp	x16, 17000 <PyModule_AddObject>
    28d4:	ldr	x17, [x16, #472]
    28d8:	add	x16, x16, #0x1d8
    28dc:	br	x17

00000000000028e0 <_Py_Dealloc@plt>:
    28e0:	adrp	x16, 17000 <PyModule_AddObject>
    28e4:	ldr	x17, [x16, #480]
    28e8:	add	x16, x16, #0x1e0
    28ec:	br	x17

00000000000028f0 <PyObject_Free@plt>:
    28f0:	adrp	x16, 17000 <PyModule_AddObject>
    28f4:	ldr	x17, [x16, #488]
    28f8:	add	x16, x16, #0x1e8
    28fc:	br	x17

0000000000002900 <EVP_sha3_224@plt>:
    2900:	adrp	x16, 17000 <PyModule_AddObject>
    2904:	ldr	x17, [x16, #496]
    2908:	add	x16, x16, #0x1f0
    290c:	br	x17

0000000000002910 <PyModule_Create2@plt>:
    2910:	adrp	x16, 17000 <PyModule_AddObject>
    2914:	ldr	x17, [x16, #504]
    2918:	add	x16, x16, #0x1f8
    291c:	br	x17

0000000000002920 <PyErr_SetString@plt>:
    2920:	adrp	x16, 17000 <PyModule_AddObject>
    2924:	ldr	x17, [x16, #512]
    2928:	add	x16, x16, #0x200
    292c:	br	x17

0000000000002930 <OBJ_nid2sn@plt>:
    2930:	adrp	x16, 17000 <PyModule_AddObject>
    2934:	ldr	x17, [x16, #520]
    2938:	add	x16, x16, #0x208
    293c:	br	x17

0000000000002940 <EVP_sha512@plt>:
    2940:	adrp	x16, 17000 <PyModule_AddObject>
    2944:	ldr	x17, [x16, #528]
    2948:	add	x16, x16, #0x210
    294c:	br	x17

0000000000002950 <EVP_sha256@plt>:
    2950:	adrp	x16, 17000 <PyModule_AddObject>
    2954:	ldr	x17, [x16, #536]
    2958:	add	x16, x16, #0x218
    295c:	br	x17

0000000000002960 <EVP_sha512_256@plt>:
    2960:	adrp	x16, 17000 <PyModule_AddObject>
    2964:	ldr	x17, [x16, #544]
    2968:	add	x16, x16, #0x220
    296c:	br	x17

0000000000002970 <PyBuffer_Release@plt>:
    2970:	adrp	x16, 17000 <PyModule_AddObject>
    2974:	ldr	x17, [x16, #552]
    2978:	add	x16, x16, #0x228
    297c:	br	x17

0000000000002980 <strlen@plt>:
    2980:	adrp	x16, 17000 <PyModule_AddObject>
    2984:	ldr	x17, [x16, #560]
    2988:	add	x16, x16, #0x230
    298c:	br	x17

0000000000002990 <ERR_lib_error_string@plt>:
    2990:	adrp	x16, 17000 <PyModule_AddObject>
    2994:	ldr	x17, [x16, #568]
    2998:	add	x16, x16, #0x238
    299c:	br	x17

00000000000029a0 <PyLong_AsUnsignedLong@plt>:
    29a0:	adrp	x16, 17000 <PyModule_AddObject>
    29a4:	ldr	x17, [x16, #576]
    29a8:	add	x16, x16, #0x240
    29ac:	br	x17

00000000000029b0 <_PyArg_BadArgument@plt>:
    29b0:	adrp	x16, 17000 <PyModule_AddObject>
    29b4:	ldr	x17, [x16, #584]
    29b8:	add	x16, x16, #0x248
    29bc:	br	x17

00000000000029c0 <PyThread_acquire_lock@plt>:
    29c0:	adrp	x16, 17000 <PyModule_AddObject>
    29c4:	ldr	x17, [x16, #592]
    29c8:	add	x16, x16, #0x250
    29cc:	br	x17

Disassembly of section .text:

00000000000029d0 <PyInit__hashlib@@Base-0x22e0>:
    29d0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    29d4:	ldr	x0, [x0, #3992]
    29d8:	cbz	x0, 29e0 <PyThread_acquire_lock@plt+0x20>
    29dc:	b	25d0 <__gmon_start__@plt>
    29e0:	ret
    29e4:	nop
    29e8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12350>
    29ec:	add	x0, x0, #0x988
    29f0:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x12350>
    29f4:	add	x1, x1, #0x988
    29f8:	cmp	x1, x0
    29fc:	b.eq	2a14 <PyThread_acquire_lock@plt+0x54>  // b.none
    2a00:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11350>
    2a04:	ldr	x1, [x1, #4016]
    2a08:	cbz	x1, 2a14 <PyThread_acquire_lock@plt+0x54>
    2a0c:	mov	x16, x1
    2a10:	br	x16
    2a14:	ret
    2a18:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12350>
    2a1c:	add	x0, x0, #0x988
    2a20:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x12350>
    2a24:	add	x1, x1, #0x988
    2a28:	sub	x1, x1, x0
    2a2c:	lsr	x2, x1, #63
    2a30:	add	x1, x2, x1, asr #3
    2a34:	cmp	xzr, x1, asr #1
    2a38:	asr	x1, x1, #1
    2a3c:	b.eq	2a54 <PyThread_acquire_lock@plt+0x94>  // b.none
    2a40:	adrp	x2, 16000 <PyInit__hashlib@@Base+0x11350>
    2a44:	ldr	x2, [x2, #4032]
    2a48:	cbz	x2, 2a54 <PyThread_acquire_lock@plt+0x94>
    2a4c:	mov	x16, x2
    2a50:	br	x16
    2a54:	ret
    2a58:	stp	x29, x30, [sp, #-32]!
    2a5c:	mov	x29, sp
    2a60:	str	x19, [sp, #16]
    2a64:	adrp	x19, 17000 <PyInit__hashlib@@Base+0x12350>
    2a68:	ldrb	w0, [x19, #2440]
    2a6c:	cbnz	w0, 2a94 <PyThread_acquire_lock@plt+0xd4>
    2a70:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    2a74:	ldr	x0, [x0, #4008]
    2a78:	cbz	x0, 2a88 <PyThread_acquire_lock@plt+0xc8>
    2a7c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12350>
    2a80:	ldr	x0, [x0, #600]
    2a84:	bl	26e0 <__cxa_finalize@plt>
    2a88:	bl	29e8 <PyThread_acquire_lock@plt+0x28>
    2a8c:	mov	w0, #0x1                   	// #1
    2a90:	strb	w0, [x19, #2440]
    2a94:	ldr	x19, [sp, #16]
    2a98:	ldp	x29, x30, [sp], #32
    2a9c:	ret
    2aa0:	b	2a18 <PyThread_acquire_lock@plt+0x58>
    2aa4:	nop
    2aa8:	stp	x29, x30, [sp, #-48]!
    2aac:	mov	x29, sp
    2ab0:	stp	x19, x20, [sp, #16]
    2ab4:	mov	x20, x0
    2ab8:	bl	2840 <ERR_peek_last_error@plt>
    2abc:	cbz	x0, 2b58 <PyThread_acquire_lock@plt+0x198>
    2ac0:	mov	x19, x0
    2ac4:	stp	x21, x22, [sp, #32]
    2ac8:	bl	2610 <ERR_clear_error@plt>
    2acc:	mov	x0, x19
    2ad0:	bl	2990 <ERR_lib_error_string@plt>
    2ad4:	mov	x21, x0
    2ad8:	mov	x0, x19
    2adc:	bl	25e0 <ERR_func_error_string@plt>
    2ae0:	mov	x22, x0
    2ae4:	mov	x0, x19
    2ae8:	bl	2560 <ERR_reason_error_string@plt>
    2aec:	cmp	x21, #0x0
    2af0:	ccmp	x22, #0x0, #0x4, ne  // ne = any
    2af4:	b.ne	2b28 <PyThread_acquire_lock@plt+0x168>  // b.any
    2af8:	cbz	x21, 2b78 <PyThread_acquire_lock@plt+0x1b8>
    2afc:	mov	x3, x0
    2b00:	mov	x2, x21
    2b04:	mov	x0, x20
    2b08:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b0c:	add	x1, x1, #0xdf0
    2b10:	bl	26f0 <PyErr_Format@plt>
    2b14:	mov	x0, #0x0                   	// #0
    2b18:	ldp	x19, x20, [sp, #16]
    2b1c:	ldp	x21, x22, [sp, #32]
    2b20:	ldp	x29, x30, [sp], #48
    2b24:	ret
    2b28:	mov	x4, x0
    2b2c:	mov	x3, x22
    2b30:	mov	x2, x21
    2b34:	mov	x0, x20
    2b38:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b3c:	add	x1, x1, #0xde0
    2b40:	bl	26f0 <PyErr_Format@plt>
    2b44:	mov	x0, #0x0                   	// #0
    2b48:	ldp	x19, x20, [sp, #16]
    2b4c:	ldp	x21, x22, [sp, #32]
    2b50:	ldp	x29, x30, [sp], #48
    2b54:	ret
    2b58:	mov	x0, x20
    2b5c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b60:	add	x1, x1, #0xdd0
    2b64:	bl	2920 <PyErr_SetString@plt>
    2b68:	mov	x0, #0x0                   	// #0
    2b6c:	ldp	x19, x20, [sp, #16]
    2b70:	ldp	x29, x30, [sp], #48
    2b74:	ret
    2b78:	mov	x1, x0
    2b7c:	mov	x0, x20
    2b80:	bl	2920 <PyErr_SetString@plt>
    2b84:	mov	x0, #0x0                   	// #0
    2b88:	ldp	x19, x20, [sp, #16]
    2b8c:	ldp	x21, x22, [sp, #32]
    2b90:	ldp	x29, x30, [sp], #48
    2b94:	ret
    2b98:	stp	x29, x30, [sp, #-32]!
    2b9c:	mov	x29, sp
    2ba0:	bl	2530 <EVP_MD_type@plt>
    2ba4:	cmp	w0, #0x446
    2ba8:	b.eq	2d50 <PyThread_acquire_lock@plt+0x390>  // b.none
    2bac:	str	x19, [sp, #16]
    2bb0:	mov	w19, w0
    2bb4:	b.gt	2be8 <PyThread_acquire_lock@plt+0x228>
    2bb8:	cmp	w0, #0x2a2
    2bbc:	b.eq	2d40 <PyThread_acquire_lock@plt+0x380>  // b.none
    2bc0:	b.le	2c30 <PyThread_acquire_lock@plt+0x270>
    2bc4:	cmp	w0, #0x420
    2bc8:	b.eq	2cf4 <PyThread_acquire_lock@plt+0x334>  // b.none
    2bcc:	cmp	w0, #0x421
    2bd0:	b.ne	2c18 <PyThread_acquire_lock@plt+0x258>  // b.any
    2bd4:	ldr	x19, [sp, #16]
    2bd8:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2bdc:	add	x0, x0, #0xdf8
    2be0:	ldp	x29, x30, [sp], #32
    2be4:	b	2620 <PyUnicode_FromString@plt>
    2be8:	cmp	w0, #0x44a
    2bec:	b.eq	2d30 <PyThread_acquire_lock@plt+0x370>  // b.none
    2bf0:	b.le	2c8c <PyThread_acquire_lock@plt+0x2cc>
    2bf4:	cmp	w0, #0x44c
    2bf8:	b.eq	2ce4 <PyThread_acquire_lock@plt+0x324>  // b.none
    2bfc:	cmp	w0, #0x44d
    2c00:	b.ne	2c74 <PyThread_acquire_lock@plt+0x2b4>  // b.any
    2c04:	ldr	x19, [sp, #16]
    2c08:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c0c:	ldp	x29, x30, [sp], #32
    2c10:	add	x0, x0, #0xe50
    2c14:	b	2620 <PyUnicode_FromString@plt>
    2c18:	cmp	w0, #0x2a3
    2c1c:	b.ne	2d14 <PyThread_acquire_lock@plt+0x354>  // b.any
    2c20:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    2c24:	add	x0, x0, #0x3f0
    2c28:	ldr	x19, [sp, #16]
    2c2c:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2c30:	cmp	w0, #0x2a0
    2c34:	b.eq	2d04 <PyThread_acquire_lock@plt+0x344>  // b.none
    2c38:	b.le	2c54 <PyThread_acquire_lock@plt+0x294>
    2c3c:	cmp	w0, #0x2a1
    2c40:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    2c44:	add	x0, x1, #0x410
    2c48:	b.ne	2d14 <PyThread_acquire_lock@plt+0x354>  // b.any
    2c4c:	ldr	x19, [sp, #16]
    2c50:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2c54:	cmp	w0, #0x4
    2c58:	b.eq	2cc4 <PyThread_acquire_lock@plt+0x304>  // b.none
    2c5c:	cmp	w0, #0x40
    2c60:	b.ne	2d14 <PyThread_acquire_lock@plt+0x354>  // b.any
    2c64:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    2c68:	add	x0, x0, #0x3e0
    2c6c:	ldr	x19, [sp, #16]
    2c70:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2c74:	cmp	w0, #0x44b
    2c78:	b.ne	2d14 <PyThread_acquire_lock@plt+0x354>  // b.any
    2c7c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c80:	add	x0, x0, #0xe10
    2c84:	ldr	x19, [sp, #16]
    2c88:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2c8c:	cmp	w0, #0x448
    2c90:	b.eq	2cd4 <PyThread_acquire_lock@plt+0x314>  // b.none
    2c94:	cmp	w0, #0x449
    2c98:	b.ne	2cac <PyThread_acquire_lock@plt+0x2ec>  // b.any
    2c9c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2ca0:	add	x0, x0, #0xe20
    2ca4:	ldr	x19, [sp, #16]
    2ca8:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2cac:	cmp	w0, #0x447
    2cb0:	b.ne	2d14 <PyThread_acquire_lock@plt+0x354>  // b.any
    2cb4:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2cb8:	add	x0, x0, #0xe60
    2cbc:	ldr	x19, [sp, #16]
    2cc0:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2cc4:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    2cc8:	add	x0, x0, #0x3d0
    2ccc:	ldr	x19, [sp, #16]
    2cd0:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2cd4:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2cd8:	add	x0, x0, #0xe40
    2cdc:	ldr	x19, [sp, #16]
    2ce0:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2ce4:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2ce8:	add	x0, x0, #0xe70
    2cec:	ldr	x19, [sp, #16]
    2cf0:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2cf4:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2cf8:	add	x0, x0, #0xe80
    2cfc:	ldr	x19, [sp, #16]
    2d00:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2d04:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    2d08:	add	x0, x0, #0x400
    2d0c:	ldr	x19, [sp, #16]
    2d10:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2d14:	mov	w0, w19
    2d18:	bl	2600 <OBJ_nid2ln@plt>
    2d1c:	cbnz	x0, 2c4c <PyThread_acquire_lock@plt+0x28c>
    2d20:	mov	w0, w19
    2d24:	bl	2930 <OBJ_nid2sn@plt>
    2d28:	ldr	x19, [sp, #16]
    2d2c:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2d30:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2d34:	add	x0, x0, #0xe30
    2d38:	ldr	x19, [sp, #16]
    2d3c:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2d40:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    2d44:	add	x0, x0, #0x420
    2d48:	ldr	x19, [sp, #16]
    2d4c:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2d50:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2d54:	add	x0, x0, #0xe00
    2d58:	b	2be0 <PyThread_acquire_lock@plt+0x220>
    2d5c:	nop
    2d60:	stp	x29, x30, [sp, #-16]!
    2d64:	mov	x29, sp
    2d68:	ldr	x0, [x0, #16]
    2d6c:	bl	2590 <EVP_MD_CTX_md@plt>
    2d70:	ldp	x29, x30, [sp], #16
    2d74:	b	2b98 <PyThread_acquire_lock@plt+0x1d8>
    2d78:	stp	x29, x30, [sp, #-16]!
    2d7c:	mov	x29, sp
    2d80:	ldr	x0, [x0, #16]
    2d84:	bl	2590 <EVP_MD_CTX_md@plt>
    2d88:	bl	2730 <EVP_MD_block_size@plt>
    2d8c:	sxtw	x0, w0
    2d90:	ldp	x29, x30, [sp], #16
    2d94:	b	2890 <PyLong_FromLong@plt>
    2d98:	stp	x29, x30, [sp, #-16]!
    2d9c:	mov	x29, sp
    2da0:	ldr	x0, [x0, #16]
    2da4:	bl	2590 <EVP_MD_CTX_md@plt>
    2da8:	bl	26c0 <EVP_MD_size@plt>
    2dac:	sxtw	x0, w0
    2db0:	ldp	x29, x30, [sp], #16
    2db4:	b	2890 <PyLong_FromLong@plt>
    2db8:	stp	x29, x30, [sp, #-32]!
    2dbc:	mov	x29, sp
    2dc0:	str	x19, [sp, #16]
    2dc4:	mov	x19, x0
    2dc8:	ldr	x0, [x0, #24]
    2dcc:	cbz	x0, 2dd4 <PyThread_acquire_lock@plt+0x414>
    2dd0:	bl	2650 <PyThread_free_lock@plt>
    2dd4:	ldr	x0, [x19, #16]
    2dd8:	bl	28d0 <EVP_MD_CTX_free@plt>
    2ddc:	mov	x0, x19
    2de0:	ldr	x19, [sp, #16]
    2de4:	ldp	x29, x30, [sp], #32
    2de8:	b	28f0 <PyObject_Free@plt>
    2dec:	nop
    2df0:	stp	x29, x30, [sp, #-32]!
    2df4:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x12350>
    2df8:	add	x0, x0, #0x260
    2dfc:	mov	x29, sp
    2e00:	str	x19, [sp, #16]
    2e04:	bl	2660 <_PyObject_New@plt>
    2e08:	mov	x19, x0
    2e0c:	cbz	x0, 2e20 <PyThread_acquire_lock@plt+0x460>
    2e10:	str	xzr, [x0, #24]
    2e14:	bl	27e0 <EVP_MD_CTX_new@plt>
    2e18:	str	x0, [x19, #16]
    2e1c:	cbz	x0, 2e30 <PyThread_acquire_lock@plt+0x470>
    2e20:	mov	x0, x19
    2e24:	ldr	x19, [sp, #16]
    2e28:	ldp	x29, x30, [sp], #32
    2e2c:	ret
    2e30:	ldr	x0, [x19]
    2e34:	sub	x0, x0, #0x1
    2e38:	str	x0, [x19]
    2e3c:	cbz	x0, 2e4c <PyThread_acquire_lock@plt+0x48c>
    2e40:	mov	x19, #0x0                   	// #0
    2e44:	bl	2630 <PyErr_NoMemory@plt>
    2e48:	b	2e20 <PyThread_acquire_lock@plt+0x460>
    2e4c:	mov	x0, x19
    2e50:	bl	28e0 <_Py_Dealloc@plt>
    2e54:	b	2e40 <PyThread_acquire_lock@plt+0x480>
    2e58:	stp	x29, x30, [sp, #-32]!
    2e5c:	mov	x29, sp
    2e60:	stp	x19, x20, [sp, #16]
    2e64:	mov	x20, x0
    2e68:	ldr	x0, [x0, #16]
    2e6c:	bl	2590 <EVP_MD_CTX_md@plt>
    2e70:	bl	2b98 <PyThread_acquire_lock@plt+0x1d8>
    2e74:	cbz	x0, 2ecc <PyThread_acquire_lock@plt+0x50c>
    2e78:	mov	x19, x0
    2e7c:	mov	x2, x20
    2e80:	mov	x1, x19
    2e84:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2e88:	add	x0, x0, #0xe88
    2e8c:	bl	26a0 <PyUnicode_FromFormat@plt>
    2e90:	ldr	x1, [x19]
    2e94:	mov	x20, x0
    2e98:	sub	x1, x1, #0x1
    2e9c:	str	x1, [x19]
    2ea0:	cbz	x1, 2eb4 <PyThread_acquire_lock@plt+0x4f4>
    2ea4:	mov	x0, x20
    2ea8:	ldp	x19, x20, [sp, #16]
    2eac:	ldp	x29, x30, [sp], #32
    2eb0:	ret
    2eb4:	mov	x0, x19
    2eb8:	bl	28e0 <_Py_Dealloc@plt>
    2ebc:	mov	x0, x20
    2ec0:	ldp	x19, x20, [sp, #16]
    2ec4:	ldp	x29, x30, [sp], #32
    2ec8:	ret
    2ecc:	mov	x20, #0x0                   	// #0
    2ed0:	mov	x0, x20
    2ed4:	ldp	x19, x20, [sp, #16]
    2ed8:	ldp	x29, x30, [sp], #32
    2edc:	ret
    2ee0:	cmp	x2, #0x0
    2ee4:	b.le	2f7c <PyThread_acquire_lock@plt+0x5bc>
    2ee8:	stp	x29, x30, [sp, #-64]!
    2eec:	mov	x29, sp
    2ef0:	stp	x19, x20, [sp, #16]
    2ef4:	mov	x19, x2
    2ef8:	stp	x21, x22, [sp, #32]
    2efc:	mov	x21, x1
    2f00:	mov	x22, #0x7fffffff            	// #2147483647
    2f04:	str	x23, [sp, #48]
    2f08:	mov	x23, x0
    2f0c:	b	2f1c <PyThread_acquire_lock@plt+0x55c>
    2f10:	add	x21, x21, x20
    2f14:	cmp	x19, #0x0
    2f18:	b.le	2f64 <PyThread_acquire_lock@plt+0x5a4>
    2f1c:	ldr	x0, [x23]
    2f20:	cmp	x19, x22
    2f24:	csel	x20, x19, x22, le
    2f28:	mov	x1, x21
    2f2c:	sub	x19, x19, x20
    2f30:	mov	x2, x20
    2f34:	bl	2700 <EVP_DigestUpdate@plt>
    2f38:	cbnz	w0, 2f10 <PyThread_acquire_lock@plt+0x550>
    2f3c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    2f40:	ldr	x0, [x0, #3984]
    2f44:	ldr	x0, [x0]
    2f48:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    2f4c:	mov	w0, #0xffffffff            	// #-1
    2f50:	ldp	x19, x20, [sp, #16]
    2f54:	ldp	x21, x22, [sp, #32]
    2f58:	ldr	x23, [sp, #48]
    2f5c:	ldp	x29, x30, [sp], #64
    2f60:	ret
    2f64:	mov	w0, #0x0                   	// #0
    2f68:	ldp	x19, x20, [sp, #16]
    2f6c:	ldp	x21, x22, [sp, #32]
    2f70:	ldr	x23, [sp, #48]
    2f74:	ldp	x29, x30, [sp], #64
    2f78:	ret
    2f7c:	mov	w0, #0x0                   	// #0
    2f80:	ret
    2f84:	nop
    2f88:	stp	x29, x30, [sp, #-128]!
    2f8c:	mov	x29, sp
    2f90:	stp	x19, x20, [sp, #16]
    2f94:	mov	x19, x0
    2f98:	ldr	x0, [x1, #8]
    2f9c:	ldr	x2, [x0, #168]
    2fa0:	tbnz	w2, #28, 30d4 <PyThread_acquire_lock@plt+0x714>
    2fa4:	ldr	x0, [x0, #160]
    2fa8:	cbz	x0, 30ac <PyThread_acquire_lock@plt+0x6ec>
    2fac:	ldr	x0, [x0]
    2fb0:	cbz	x0, 30ac <PyThread_acquire_lock@plt+0x6ec>
    2fb4:	add	x20, sp, #0x30
    2fb8:	mov	x0, x1
    2fbc:	mov	w2, #0x0                   	// #0
    2fc0:	mov	x1, x20
    2fc4:	bl	2750 <PyObject_GetBuffer@plt>
    2fc8:	cmn	w0, #0x1
    2fcc:	b.eq	307c <PyThread_acquire_lock@plt+0x6bc>  // b.none
    2fd0:	ldr	w0, [sp, #84]
    2fd4:	cmp	w0, #0x1
    2fd8:	b.gt	305c <PyThread_acquire_lock@plt+0x69c>
    2fdc:	ldr	x0, [x19, #24]
    2fe0:	cbz	x0, 308c <PyThread_acquire_lock@plt+0x6cc>
    2fe4:	str	x21, [sp, #32]
    2fe8:	bl	27b0 <PyEval_SaveThread@plt>
    2fec:	mov	x21, x0
    2ff0:	mov	w1, #0x1                   	// #1
    2ff4:	ldr	x0, [x19, #24]
    2ff8:	bl	29c0 <PyThread_acquire_lock@plt>
    2ffc:	ldr	x1, [sp, #48]
    3000:	add	x0, x19, #0x10
    3004:	ldr	x2, [sp, #64]
    3008:	bl	2ee0 <PyThread_acquire_lock@plt+0x520>
    300c:	mov	w1, w0
    3010:	ldr	x0, [x19, #24]
    3014:	mov	w19, w1
    3018:	bl	2740 <PyThread_release_lock@plt>
    301c:	mov	x0, x21
    3020:	bl	2770 <PyEval_RestoreThread@plt>
    3024:	ldr	x21, [sp, #32]
    3028:	mov	x0, x20
    302c:	bl	2970 <PyBuffer_Release@plt>
    3030:	cmn	w19, #0x1
    3034:	b.eq	307c <PyThread_acquire_lock@plt+0x6bc>  // b.none
    3038:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11350>
    303c:	ldr	x1, [x1, #4056]
    3040:	mov	x0, x1
    3044:	ldr	x2, [x1]
    3048:	add	x2, x2, #0x1
    304c:	str	x2, [x1]
    3050:	ldp	x19, x20, [sp, #16]
    3054:	ldp	x29, x30, [sp], #128
    3058:	ret
    305c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    3060:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3064:	add	x1, x1, #0xf00
    3068:	ldr	x0, [x0, #4024]
    306c:	ldr	x0, [x0]
    3070:	bl	2920 <PyErr_SetString@plt>
    3074:	mov	x0, x20
    3078:	bl	2970 <PyBuffer_Release@plt>
    307c:	mov	x0, #0x0                   	// #0
    3080:	ldp	x19, x20, [sp, #16]
    3084:	ldp	x29, x30, [sp], #128
    3088:	ret
    308c:	ldr	x2, [sp, #64]
    3090:	cmp	x2, #0x7ff
    3094:	b.gt	30f4 <PyThread_acquire_lock@plt+0x734>
    3098:	ldr	x1, [sp, #48]
    309c:	add	x0, x19, #0x10
    30a0:	bl	2ee0 <PyThread_acquire_lock@plt+0x520>
    30a4:	mov	w19, w0
    30a8:	b	3028 <PyThread_acquire_lock@plt+0x668>
    30ac:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    30b0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    30b4:	add	x1, x1, #0xed0
    30b8:	ldr	x0, [x0, #4000]
    30bc:	ldr	x0, [x0]
    30c0:	bl	2920 <PyErr_SetString@plt>
    30c4:	mov	x0, #0x0                   	// #0
    30c8:	ldp	x19, x20, [sp, #16]
    30cc:	ldp	x29, x30, [sp], #128
    30d0:	ret
    30d4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    30d8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    30dc:	add	x1, x1, #0xea0
    30e0:	ldr	x0, [x0, #4000]
    30e4:	ldr	x0, [x0]
    30e8:	bl	2920 <PyErr_SetString@plt>
    30ec:	mov	x0, #0x0                   	// #0
    30f0:	b	3050 <PyThread_acquire_lock@plt+0x690>
    30f4:	bl	26b0 <PyThread_allocate_lock@plt>
    30f8:	str	x0, [x19, #24]
    30fc:	cbnz	x0, 2fe4 <PyThread_acquire_lock@plt+0x624>
    3100:	ldr	x2, [sp, #64]
    3104:	b	3098 <PyThread_acquire_lock@plt+0x6d8>
    3108:	stp	x29, x30, [sp, #-48]!
    310c:	mov	x29, sp
    3110:	stp	x19, x20, [sp, #16]
    3114:	cbz	x0, 3214 <PyThread_acquire_lock@plt+0x854>
    3118:	mov	x20, x0
    311c:	stp	x21, x22, [sp, #32]
    3120:	mov	x22, x1
    3124:	mov	x21, x2
    3128:	bl	2df0 <PyThread_acquire_lock@plt+0x430>
    312c:	mov	x19, x0
    3130:	cbz	x0, 31d4 <PyThread_acquire_lock@plt+0x814>
    3134:	ldr	x0, [x0, #16]
    3138:	mov	x1, x20
    313c:	mov	x2, #0x0                   	// #0
    3140:	bl	2550 <EVP_DigestInit_ex@plt>
    3144:	cbz	w0, 31b4 <PyThread_acquire_lock@plt+0x7f4>
    3148:	cmp	x22, #0x0
    314c:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    3150:	b.ne	3168 <PyThread_acquire_lock@plt+0x7a8>  // b.any
    3154:	ldp	x21, x22, [sp, #32]
    3158:	mov	x0, x19
    315c:	ldp	x19, x20, [sp, #16]
    3160:	ldp	x29, x30, [sp], #48
    3164:	ret
    3168:	cmp	x21, #0x7ff
    316c:	add	x20, x19, #0x10
    3170:	b.gt	31ec <PyThread_acquire_lock@plt+0x82c>
    3174:	mov	x0, x20
    3178:	mov	x2, x21
    317c:	mov	x1, x22
    3180:	bl	2ee0 <PyThread_acquire_lock@plt+0x520>
    3184:	mov	w20, w0
    3188:	cmn	w20, #0x1
    318c:	b.ne	3154 <PyThread_acquire_lock@plt+0x794>  // b.any
    3190:	ldr	x0, [x19]
    3194:	sub	x0, x0, #0x1
    3198:	str	x0, [x19]
    319c:	cbnz	x0, 31d4 <PyThread_acquire_lock@plt+0x814>
    31a0:	mov	x0, x19
    31a4:	mov	x19, #0x0                   	// #0
    31a8:	bl	28e0 <_Py_Dealloc@plt>
    31ac:	ldp	x21, x22, [sp, #32]
    31b0:	b	3158 <PyThread_acquire_lock@plt+0x798>
    31b4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    31b8:	ldr	x0, [x0, #3984]
    31bc:	ldr	x0, [x0]
    31c0:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    31c4:	ldr	x0, [x19]
    31c8:	sub	x0, x0, #0x1
    31cc:	str	x0, [x19]
    31d0:	cbz	x0, 31a0 <PyThread_acquire_lock@plt+0x7e0>
    31d4:	mov	x19, #0x0                   	// #0
    31d8:	mov	x0, x19
    31dc:	ldp	x19, x20, [sp, #16]
    31e0:	ldp	x21, x22, [sp, #32]
    31e4:	ldp	x29, x30, [sp], #48
    31e8:	ret
    31ec:	bl	27b0 <PyEval_SaveThread@plt>
    31f0:	mov	x2, x21
    31f4:	mov	x1, x22
    31f8:	mov	x21, x0
    31fc:	mov	x0, x20
    3200:	bl	2ee0 <PyThread_acquire_lock@plt+0x520>
    3204:	mov	w20, w0
    3208:	mov	x0, x21
    320c:	bl	2770 <PyEval_RestoreThread@plt>
    3210:	b	3188 <PyThread_acquire_lock@plt+0x7c8>
    3214:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    3218:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    321c:	mov	x19, #0x0                   	// #0
    3220:	add	x1, x1, #0xf20
    3224:	ldr	x0, [x0, #3984]
    3228:	ldr	x0, [x0]
    322c:	bl	2920 <PyErr_SetString@plt>
    3230:	b	3158 <PyThread_acquire_lock@plt+0x798>
    3234:	nop
    3238:	sub	sp, sp, #0x150
    323c:	cmp	x3, #0x0
    3240:	ccmp	x2, #0x3, #0x0, eq  // eq = none
    3244:	stp	x29, x30, [sp, #16]
    3248:	add	x29, sp, #0x10
    324c:	stp	x19, x20, [sp, #32]
    3250:	mov	x19, x1
    3254:	stp	xzr, xzr, [sp, #176]
    3258:	stp	xzr, xzr, [sp, #192]
    325c:	stp	xzr, xzr, [sp, #208]
    3260:	stp	xzr, xzr, [sp, #224]
    3264:	stp	xzr, xzr, [sp, #240]
    3268:	stp	xzr, xzr, [sp, #256]
    326c:	stp	xzr, xzr, [sp, #272]
    3270:	stp	xzr, xzr, [sp, #288]
    3274:	stp	xzr, xzr, [sp, #304]
    3278:	stp	xzr, xzr, [sp, #320]
    327c:	b.ne	339c <PyThread_acquire_lock@plt+0x9dc>  // b.any
    3280:	cbz	x1, 339c <PyThread_acquire_lock@plt+0x9dc>
    3284:	ldr	x0, [x19]
    3288:	add	x20, sp, #0xb0
    328c:	mov	x1, x20
    3290:	mov	w2, #0x0                   	// #0
    3294:	bl	2750 <PyObject_GetBuffer@plt>
    3298:	cbnz	w0, 33d4 <PyThread_acquire_lock@plt+0xa14>
    329c:	mov	x0, x20
    32a0:	mov	w1, #0x43                  	// #67
    32a4:	bl	27f0 <PyBuffer_IsContiguous@plt>
    32a8:	cbz	w0, 340c <PyThread_acquire_lock@plt+0xa4c>
    32ac:	ldr	x0, [x19, #8]
    32b0:	add	x20, sp, #0x100
    32b4:	mov	x1, x20
    32b8:	mov	w2, #0x0                   	// #0
    32bc:	bl	2750 <PyObject_GetBuffer@plt>
    32c0:	cbnz	w0, 33d4 <PyThread_acquire_lock@plt+0xa14>
    32c4:	mov	x0, x20
    32c8:	mov	w1, #0x43                  	// #67
    32cc:	bl	27f0 <PyBuffer_IsContiguous@plt>
    32d0:	cbz	w0, 347c <PyThread_acquire_lock@plt+0xabc>
    32d4:	ldr	x0, [x19, #16]
    32d8:	ldr	x1, [x0, #8]
    32dc:	ldr	x1, [x1, #168]
    32e0:	tbz	w1, #28, 3454 <PyThread_acquire_lock@plt+0xa94>
    32e4:	add	x1, sp, #0x50
    32e8:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    32ec:	mov	x19, x0
    32f0:	cbz	x0, 33d4 <PyThread_acquire_lock@plt+0xa14>
    32f4:	bl	2980 <strlen@plt>
    32f8:	ldr	x1, [sp, #80]
    32fc:	cmp	x0, x1
    3300:	b.ne	3434 <PyThread_acquire_lock@plt+0xa74>  // b.any
    3304:	mov	x0, x19
    3308:	str	wzr, [sp, #76]
    330c:	stp	xzr, xzr, [sp, #112]
    3310:	stp	xzr, xzr, [sp, #128]
    3314:	stp	xzr, xzr, [sp, #144]
    3318:	stp	xzr, xzr, [sp, #160]
    331c:	bl	2640 <EVP_get_digestbyname@plt>
    3320:	mov	x19, x0
    3324:	cbz	x0, 34fc <PyThread_acquire_lock@plt+0xb3c>
    3328:	ldr	x1, [sp, #192]
    332c:	mov	x0, #0x7fffffff            	// #2147483647
    3330:	cmp	x1, x0
    3334:	b.gt	34c4 <PyThread_acquire_lock@plt+0xb04>
    3338:	ldr	x1, [sp, #272]
    333c:	cmp	x1, x0
    3340:	b.gt	34a4 <PyThread_acquire_lock@plt+0xae4>
    3344:	str	x21, [sp, #48]
    3348:	bl	27b0 <PyEval_SaveThread@plt>
    334c:	ldrsw	x4, [sp, #272]
    3350:	add	x21, sp, #0x70
    3354:	ldr	w2, [sp, #192]
    3358:	mov	x5, x21
    335c:	ldr	x1, [sp, #176]
    3360:	add	x6, sp, #0x4c
    3364:	ldr	x3, [sp, #256]
    3368:	mov	x20, x0
    336c:	mov	x0, x19
    3370:	bl	2860 <HMAC@plt>
    3374:	mov	x19, x0
    3378:	mov	x0, x20
    337c:	bl	2770 <PyEval_RestoreThread@plt>
    3380:	cbz	x19, 34e4 <PyThread_acquire_lock@plt+0xb24>
    3384:	ldr	w1, [sp, #76]
    3388:	mov	x0, x21
    338c:	bl	2870 <PyBytes_FromStringAndSize@plt>
    3390:	mov	x19, x0
    3394:	ldr	x21, [sp, #48]
    3398:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    339c:	add	x0, sp, #0x58
    33a0:	str	x0, [sp]
    33a4:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    33a8:	add	x4, x4, #0x260
    33ac:	mov	x1, x2
    33b0:	mov	x0, x19
    33b4:	mov	w6, #0x3                   	// #3
    33b8:	add	x4, x4, #0x1a0
    33bc:	mov	w5, w6
    33c0:	mov	w7, #0x0                   	// #0
    33c4:	mov	x2, #0x0                   	// #0
    33c8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    33cc:	mov	x19, x0
    33d0:	cbnz	x0, 3284 <PyThread_acquire_lock@plt+0x8c4>
    33d4:	mov	x19, #0x0                   	// #0
    33d8:	ldr	x0, [sp, #184]
    33dc:	cbz	x0, 33e8 <PyThread_acquire_lock@plt+0xa28>
    33e0:	add	x0, sp, #0xb0
    33e4:	bl	2970 <PyBuffer_Release@plt>
    33e8:	ldr	x0, [sp, #264]
    33ec:	cbz	x0, 33f8 <PyThread_acquire_lock@plt+0xa38>
    33f0:	add	x0, sp, #0x100
    33f4:	bl	2970 <PyBuffer_Release@plt>
    33f8:	mov	x0, x19
    33fc:	ldp	x29, x30, [sp, #16]
    3400:	ldp	x19, x20, [sp, #32]
    3404:	add	sp, sp, #0x150
    3408:	ret
    340c:	ldr	x3, [x19]
    3410:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3414:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3418:	add	x2, x2, #0xf38
    341c:	add	x1, x1, #0xf50
    3420:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    3424:	mov	x19, #0x0                   	// #0
    3428:	add	x0, x0, #0xf60
    342c:	bl	29b0 <_PyArg_BadArgument@plt>
    3430:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    3434:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    3438:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    343c:	mov	x19, #0x0                   	// #0
    3440:	add	x1, x1, #0xfa0
    3444:	ldr	x0, [x0, #3984]
    3448:	ldr	x0, [x0]
    344c:	bl	2920 <PyErr_SetString@plt>
    3450:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    3454:	mov	x3, x0
    3458:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    345c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3460:	add	x2, x2, #0xf80
    3464:	add	x1, x1, #0xf88
    3468:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    346c:	mov	x19, #0x0                   	// #0
    3470:	add	x0, x0, #0xf60
    3474:	bl	29b0 <_PyArg_BadArgument@plt>
    3478:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    347c:	ldr	x3, [x19, #8]
    3480:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3484:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3488:	add	x2, x2, #0xf38
    348c:	add	x1, x1, #0xf70
    3490:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    3494:	mov	x19, #0x0                   	// #0
    3498:	add	x0, x0, #0xf60
    349c:	bl	29b0 <_PyArg_BadArgument@plt>
    34a0:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    34a4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    34a8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    34ac:	mov	x19, #0x0                   	// #0
    34b0:	add	x1, x1, #0xfd0
    34b4:	ldr	x0, [x0, #4064]
    34b8:	ldr	x0, [x0]
    34bc:	bl	2920 <PyErr_SetString@plt>
    34c0:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    34c4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    34c8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    34cc:	mov	x19, #0x0                   	// #0
    34d0:	add	x1, x1, #0xfb8
    34d4:	ldr	x0, [x0, #4064]
    34d8:	ldr	x0, [x0]
    34dc:	bl	2920 <PyErr_SetString@plt>
    34e0:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    34e4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    34e8:	ldr	x0, [x0, #3984]
    34ec:	ldr	x0, [x0]
    34f0:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    34f4:	ldr	x21, [sp, #48]
    34f8:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    34fc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    3500:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3504:	add	x1, x1, #0xf20
    3508:	ldr	x0, [x0, #3984]
    350c:	ldr	x0, [x0]
    3510:	bl	2920 <PyErr_SetString@plt>
    3514:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    3518:	stp	x29, x30, [sp, #-48]!
    351c:	mov	x29, sp
    3520:	stp	x19, x20, [sp, #16]
    3524:	mov	x20, x0
    3528:	mov	x19, x2
    352c:	ldr	x0, [x2]
    3530:	stp	x21, x22, [sp, #32]
    3534:	mov	x21, x1
    3538:	cbz	x0, 3548 <PyThread_acquire_lock@plt+0xb88>
    353c:	mov	w1, #0x0                   	// #0
    3540:	bl	29c0 <PyThread_acquire_lock@plt>
    3544:	cbz	w0, 357c <PyThread_acquire_lock@plt+0xbbc>
    3548:	ldr	x1, [x21]
    354c:	mov	x0, x20
    3550:	bl	2780 <EVP_MD_CTX_copy@plt>
    3554:	ldr	x1, [x19]
    3558:	mov	w19, w0
    355c:	cbz	x1, 3568 <PyThread_acquire_lock@plt+0xba8>
    3560:	mov	x0, x1
    3564:	bl	2740 <PyThread_release_lock@plt>
    3568:	mov	w0, w19
    356c:	ldp	x19, x20, [sp, #16]
    3570:	ldp	x21, x22, [sp, #32]
    3574:	ldp	x29, x30, [sp], #48
    3578:	ret
    357c:	bl	27b0 <PyEval_SaveThread@plt>
    3580:	mov	x22, x0
    3584:	ldr	x0, [x19]
    3588:	mov	w1, #0x1                   	// #1
    358c:	bl	29c0 <PyThread_acquire_lock@plt>
    3590:	mov	x0, x22
    3594:	bl	2770 <PyEval_RestoreThread@plt>
    3598:	b	3548 <PyThread_acquire_lock@plt+0xb88>
    359c:	nop
    35a0:	stp	x29, x30, [sp, #-112]!
    35a4:	mov	x29, sp
    35a8:	stp	x19, x20, [sp, #16]
    35ac:	mov	x20, x0
    35b0:	bl	27e0 <EVP_MD_CTX_new@plt>
    35b4:	cbz	x0, 3670 <PyThread_acquire_lock@plt+0xcb0>
    35b8:	mov	x19, x0
    35bc:	add	x2, x20, #0x18
    35c0:	add	x1, x20, #0x10
    35c4:	bl	3518 <PyThread_acquire_lock@plt+0xb58>
    35c8:	cbz	w0, 3624 <PyThread_acquire_lock@plt+0xc64>
    35cc:	mov	x0, x19
    35d0:	str	x21, [sp, #32]
    35d4:	bl	2590 <EVP_MD_CTX_md@plt>
    35d8:	add	x21, sp, #0x30
    35dc:	bl	26c0 <EVP_MD_size@plt>
    35e0:	mov	w20, w0
    35e4:	mov	x1, x21
    35e8:	mov	x0, x19
    35ec:	mov	x2, #0x0                   	// #0
    35f0:	bl	2760 <EVP_DigestFinal@plt>
    35f4:	cbz	w0, 3648 <PyThread_acquire_lock@plt+0xc88>
    35f8:	mov	w1, w20
    35fc:	mov	x0, x21
    3600:	bl	2870 <PyBytes_FromStringAndSize@plt>
    3604:	mov	x20, x0
    3608:	mov	x0, x19
    360c:	bl	28d0 <EVP_MD_CTX_free@plt>
    3610:	ldr	x21, [sp, #32]
    3614:	mov	x0, x20
    3618:	ldp	x19, x20, [sp, #16]
    361c:	ldp	x29, x30, [sp], #112
    3620:	ret
    3624:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    3628:	ldr	x0, [x0, #3984]
    362c:	ldr	x0, [x0]
    3630:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3634:	mov	x20, x0
    3638:	mov	x0, x20
    363c:	ldp	x19, x20, [sp, #16]
    3640:	ldp	x29, x30, [sp], #112
    3644:	ret
    3648:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    364c:	mov	x20, #0x0                   	// #0
    3650:	ldr	x0, [x0, #3984]
    3654:	ldr	x0, [x0]
    3658:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    365c:	mov	x0, x20
    3660:	ldp	x19, x20, [sp, #16]
    3664:	ldr	x21, [sp, #32]
    3668:	ldp	x29, x30, [sp], #112
    366c:	ret
    3670:	mov	x20, #0x0                   	// #0
    3674:	bl	2630 <PyErr_NoMemory@plt>
    3678:	b	3614 <PyThread_acquire_lock@plt+0xc54>
    367c:	nop
    3680:	stp	x29, x30, [sp, #-112]!
    3684:	mov	x29, sp
    3688:	stp	x19, x20, [sp, #16]
    368c:	mov	x20, x0
    3690:	bl	27e0 <EVP_MD_CTX_new@plt>
    3694:	mov	x19, x0
    3698:	cbz	x0, 3750 <PyThread_acquire_lock@plt+0xd90>
    369c:	add	x2, x20, #0x18
    36a0:	add	x1, x20, #0x10
    36a4:	bl	3518 <PyThread_acquire_lock@plt+0xb58>
    36a8:	cbz	w0, 3704 <PyThread_acquire_lock@plt+0xd44>
    36ac:	mov	x0, x19
    36b0:	str	x21, [sp, #32]
    36b4:	bl	2590 <EVP_MD_CTX_md@plt>
    36b8:	add	x21, sp, #0x30
    36bc:	bl	26c0 <EVP_MD_size@plt>
    36c0:	mov	w20, w0
    36c4:	mov	x1, x21
    36c8:	mov	x0, x19
    36cc:	mov	x2, #0x0                   	// #0
    36d0:	bl	2760 <EVP_DigestFinal@plt>
    36d4:	cbz	w0, 3728 <PyThread_acquire_lock@plt+0xd68>
    36d8:	mov	x0, x19
    36dc:	bl	28d0 <EVP_MD_CTX_free@plt>
    36e0:	mov	x0, x21
    36e4:	mov	w1, w20
    36e8:	bl	2810 <_Py_strhex@plt>
    36ec:	mov	x19, x0
    36f0:	ldr	x21, [sp, #32]
    36f4:	mov	x0, x19
    36f8:	ldp	x19, x20, [sp, #16]
    36fc:	ldp	x29, x30, [sp], #112
    3700:	ret
    3704:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    3708:	ldr	x0, [x0, #3984]
    370c:	ldr	x0, [x0]
    3710:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3714:	mov	x19, x0
    3718:	mov	x0, x19
    371c:	ldp	x19, x20, [sp, #16]
    3720:	ldp	x29, x30, [sp], #112
    3724:	ret
    3728:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    372c:	mov	x19, #0x0                   	// #0
    3730:	ldr	x0, [x0, #3984]
    3734:	ldr	x0, [x0]
    3738:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    373c:	mov	x0, x19
    3740:	ldp	x19, x20, [sp, #16]
    3744:	ldr	x21, [sp, #32]
    3748:	ldp	x29, x30, [sp], #112
    374c:	ret
    3750:	bl	2630 <PyErr_NoMemory@plt>
    3754:	b	36f4 <PyThread_acquire_lock@plt+0xd34>
    3758:	stp	x29, x30, [sp, #-32]!
    375c:	mov	x29, sp
    3760:	stp	x19, x20, [sp, #16]
    3764:	mov	x20, x0
    3768:	bl	2df0 <PyThread_acquire_lock@plt+0x430>
    376c:	mov	x19, x0
    3770:	cbz	x0, 3788 <PyThread_acquire_lock@plt+0xdc8>
    3774:	ldr	x0, [x0, #16]
    3778:	add	x2, x20, #0x18
    377c:	add	x1, x20, #0x10
    3780:	bl	3518 <PyThread_acquire_lock@plt+0xb58>
    3784:	cbz	w0, 3798 <PyThread_acquire_lock@plt+0xdd8>
    3788:	mov	x0, x19
    378c:	ldp	x19, x20, [sp, #16]
    3790:	ldp	x29, x30, [sp], #32
    3794:	ret
    3798:	ldr	x0, [x19]
    379c:	sub	x0, x0, #0x1
    37a0:	str	x0, [x19]
    37a4:	cbz	x0, 37c0 <PyThread_acquire_lock@plt+0xe00>
    37a8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    37ac:	ldp	x19, x20, [sp, #16]
    37b0:	ldr	x0, [x0, #3984]
    37b4:	ldp	x29, x30, [sp], #32
    37b8:	ldr	x0, [x0]
    37bc:	b	2aa8 <PyThread_acquire_lock@plt+0xe8>
    37c0:	mov	x0, x19
    37c4:	bl	28e0 <_Py_Dealloc@plt>
    37c8:	b	37a8 <PyThread_acquire_lock@plt+0xde8>
    37cc:	nop
    37d0:	stp	x29, x30, [sp, #-112]!
    37d4:	mov	x29, sp
    37d8:	stp	x19, x20, [sp, #16]
    37dc:	mov	x19, x1
    37e0:	stp	xzr, xzr, [sp, #32]
    37e4:	stp	xzr, xzr, [sp, #48]
    37e8:	stp	xzr, xzr, [sp, #64]
    37ec:	stp	xzr, xzr, [sp, #80]
    37f0:	stp	xzr, xzr, [sp, #96]
    37f4:	cbz	x0, 388c <PyThread_acquire_lock@plt+0xecc>
    37f8:	ldr	x1, [x0, #8]
    37fc:	ldr	x2, [x1, #168]
    3800:	tbnz	w2, #28, 38dc <PyThread_acquire_lock@plt+0xf1c>
    3804:	ldr	x1, [x1, #160]
    3808:	cbz	x1, 38b0 <PyThread_acquire_lock@plt+0xef0>
    380c:	ldr	x1, [x1]
    3810:	cbz	x1, 38b0 <PyThread_acquire_lock@plt+0xef0>
    3814:	add	x20, sp, #0x20
    3818:	mov	w2, #0x0                   	// #0
    381c:	mov	x1, x20
    3820:	bl	2750 <PyObject_GetBuffer@plt>
    3824:	cmn	w0, #0x1
    3828:	b.eq	38fc <PyThread_acquire_lock@plt+0xf3c>  // b.none
    382c:	ldr	w0, [sp, #68]
    3830:	cmp	w0, #0x1
    3834:	b.gt	3864 <PyThread_acquire_lock@plt+0xea4>
    3838:	ldr	x1, [sp, #32]
    383c:	mov	x0, x19
    3840:	ldr	x2, [sp, #48]
    3844:	bl	3108 <PyThread_acquire_lock@plt+0x748>
    3848:	mov	x19, x0
    384c:	mov	x0, x20
    3850:	bl	2970 <PyBuffer_Release@plt>
    3854:	mov	x0, x19
    3858:	ldp	x19, x20, [sp, #16]
    385c:	ldp	x29, x30, [sp], #112
    3860:	ret
    3864:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    3868:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    386c:	add	x1, x1, #0xf00
    3870:	mov	x19, #0x0                   	// #0
    3874:	ldr	x0, [x0, #4024]
    3878:	ldr	x0, [x0]
    387c:	bl	2920 <PyErr_SetString@plt>
    3880:	mov	x0, x20
    3884:	bl	2970 <PyBuffer_Release@plt>
    3888:	b	3854 <PyThread_acquire_lock@plt+0xe94>
    388c:	mov	x0, x1
    3890:	mov	x2, #0x0                   	// #0
    3894:	mov	x1, #0x0                   	// #0
    3898:	bl	3108 <PyThread_acquire_lock@plt+0x748>
    389c:	mov	x19, x0
    38a0:	mov	x0, x19
    38a4:	ldp	x19, x20, [sp, #16]
    38a8:	ldp	x29, x30, [sp], #112
    38ac:	ret
    38b0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    38b4:	mov	x19, #0x0                   	// #0
    38b8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    38bc:	add	x1, x1, #0xed0
    38c0:	ldr	x0, [x0, #4000]
    38c4:	ldr	x0, [x0]
    38c8:	bl	2920 <PyErr_SetString@plt>
    38cc:	mov	x0, x19
    38d0:	ldp	x19, x20, [sp, #16]
    38d4:	ldp	x29, x30, [sp], #112
    38d8:	ret
    38dc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    38e0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    38e4:	mov	x19, #0x0                   	// #0
    38e8:	add	x1, x1, #0xea0
    38ec:	ldr	x0, [x0, #4000]
    38f0:	ldr	x0, [x0]
    38f4:	bl	2920 <PyErr_SetString@plt>
    38f8:	b	3854 <PyThread_acquire_lock@plt+0xe94>
    38fc:	mov	x19, #0x0                   	// #0
    3900:	b	3854 <PyThread_acquire_lock@plt+0xe94>
    3904:	nop
    3908:	sub	sp, sp, #0x40
    390c:	mov	x0, x1
    3910:	mov	x1, x2
    3914:	mov	x2, x3
    3918:	stp	x29, x30, [sp, #16]
    391c:	add	x29, sp, #0x10
    3920:	stp	x19, x20, [sp, #32]
    3924:	cbz	x3, 398c <PyThread_acquire_lock@plt+0xfcc>
    3928:	ldr	x19, [x3, #16]
    392c:	add	x19, x1, x19
    3930:	add	x3, sp, #0x38
    3934:	str	x3, [sp]
    3938:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    393c:	add	x4, x4, #0x260
    3940:	mov	x3, x2
    3944:	add	x4, x4, #0x1e0
    3948:	mov	w7, #0x0                   	// #0
    394c:	mov	w6, #0x1                   	// #1
    3950:	mov	w5, #0x0                   	// #0
    3954:	mov	x2, #0x0                   	// #0
    3958:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    395c:	cbz	x0, 39d0 <PyThread_acquire_lock@plt+0x1010>
    3960:	mov	x20, #0x0                   	// #0
    3964:	cbz	x19, 396c <PyThread_acquire_lock@plt+0xfac>
    3968:	ldr	x20, [x0]
    396c:	bl	2940 <EVP_sha512@plt>
    3970:	mov	x1, x0
    3974:	mov	x0, x20
    3978:	bl	37d0 <PyThread_acquire_lock@plt+0xe10>
    397c:	ldp	x29, x30, [sp, #16]
    3980:	ldp	x19, x20, [sp, #32]
    3984:	add	sp, sp, #0x40
    3988:	ret
    398c:	tbnz	x1, #63, 39a4 <PyThread_acquire_lock@plt+0xfe4>
    3990:	cmp	x0, #0x0
    3994:	mov	x19, x1
    3998:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    399c:	b.le	3960 <PyThread_acquire_lock@plt+0xfa0>
    39a0:	b	3930 <PyThread_acquire_lock@plt+0xf70>
    39a4:	add	x2, sp, #0x38
    39a8:	str	x2, [sp]
    39ac:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    39b0:	add	x4, x4, #0x260
    39b4:	add	x4, x4, #0x1e0
    39b8:	mov	w7, #0x0                   	// #0
    39bc:	mov	w6, #0x1                   	// #1
    39c0:	mov	w5, #0x0                   	// #0
    39c4:	mov	x2, #0x0                   	// #0
    39c8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    39cc:	cbnz	x0, 3968 <PyThread_acquire_lock@plt+0xfa8>
    39d0:	mov	x0, #0x0                   	// #0
    39d4:	b	397c <PyThread_acquire_lock@plt+0xfbc>
    39d8:	sub	sp, sp, #0x40
    39dc:	mov	x0, x1
    39e0:	mov	x1, x2
    39e4:	mov	x2, x3
    39e8:	stp	x29, x30, [sp, #16]
    39ec:	add	x29, sp, #0x10
    39f0:	stp	x19, x20, [sp, #32]
    39f4:	cbz	x3, 3a5c <PyThread_acquire_lock@plt+0x109c>
    39f8:	ldr	x19, [x3, #16]
    39fc:	add	x19, x1, x19
    3a00:	add	x3, sp, #0x38
    3a04:	str	x3, [sp]
    3a08:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3a0c:	add	x4, x4, #0x260
    3a10:	mov	x3, x2
    3a14:	add	x4, x4, #0x220
    3a18:	mov	w7, #0x0                   	// #0
    3a1c:	mov	w6, #0x1                   	// #1
    3a20:	mov	w5, #0x0                   	// #0
    3a24:	mov	x2, #0x0                   	// #0
    3a28:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3a2c:	cbz	x0, 3aa0 <PyThread_acquire_lock@plt+0x10e0>
    3a30:	mov	x20, #0x0                   	// #0
    3a34:	cbz	x19, 3a3c <PyThread_acquire_lock@plt+0x107c>
    3a38:	ldr	x20, [x0]
    3a3c:	bl	25c0 <EVP_sha384@plt>
    3a40:	mov	x1, x0
    3a44:	mov	x0, x20
    3a48:	bl	37d0 <PyThread_acquire_lock@plt+0xe10>
    3a4c:	ldp	x29, x30, [sp, #16]
    3a50:	ldp	x19, x20, [sp, #32]
    3a54:	add	sp, sp, #0x40
    3a58:	ret
    3a5c:	tbnz	x1, #63, 3a74 <PyThread_acquire_lock@plt+0x10b4>
    3a60:	cmp	x0, #0x0
    3a64:	mov	x19, x1
    3a68:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    3a6c:	b.le	3a30 <PyThread_acquire_lock@plt+0x1070>
    3a70:	b	3a00 <PyThread_acquire_lock@plt+0x1040>
    3a74:	add	x2, sp, #0x38
    3a78:	str	x2, [sp]
    3a7c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3a80:	add	x4, x4, #0x260
    3a84:	add	x4, x4, #0x220
    3a88:	mov	w7, #0x0                   	// #0
    3a8c:	mov	w6, #0x1                   	// #1
    3a90:	mov	w5, #0x0                   	// #0
    3a94:	mov	x2, #0x0                   	// #0
    3a98:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3a9c:	cbnz	x0, 3a38 <PyThread_acquire_lock@plt+0x1078>
    3aa0:	mov	x0, #0x0                   	// #0
    3aa4:	b	3a4c <PyThread_acquire_lock@plt+0x108c>
    3aa8:	sub	sp, sp, #0x40
    3aac:	mov	x0, x1
    3ab0:	mov	x1, x2
    3ab4:	mov	x2, x3
    3ab8:	stp	x29, x30, [sp, #16]
    3abc:	add	x29, sp, #0x10
    3ac0:	stp	x19, x20, [sp, #32]
    3ac4:	cbz	x3, 3b2c <PyThread_acquire_lock@plt+0x116c>
    3ac8:	ldr	x19, [x3, #16]
    3acc:	add	x19, x1, x19
    3ad0:	add	x3, sp, #0x38
    3ad4:	str	x3, [sp]
    3ad8:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3adc:	add	x4, x4, #0x260
    3ae0:	mov	x3, x2
    3ae4:	add	x4, x4, #0x260
    3ae8:	mov	w7, #0x0                   	// #0
    3aec:	mov	w6, #0x1                   	// #1
    3af0:	mov	w5, #0x0                   	// #0
    3af4:	mov	x2, #0x0                   	// #0
    3af8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3afc:	cbz	x0, 3b70 <PyThread_acquire_lock@plt+0x11b0>
    3b00:	mov	x20, #0x0                   	// #0
    3b04:	cbz	x19, 3b0c <PyThread_acquire_lock@plt+0x114c>
    3b08:	ldr	x20, [x0]
    3b0c:	bl	2950 <EVP_sha256@plt>
    3b10:	mov	x1, x0
    3b14:	mov	x0, x20
    3b18:	bl	37d0 <PyThread_acquire_lock@plt+0xe10>
    3b1c:	ldp	x29, x30, [sp, #16]
    3b20:	ldp	x19, x20, [sp, #32]
    3b24:	add	sp, sp, #0x40
    3b28:	ret
    3b2c:	tbnz	x1, #63, 3b44 <PyThread_acquire_lock@plt+0x1184>
    3b30:	cmp	x0, #0x0
    3b34:	mov	x19, x1
    3b38:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    3b3c:	b.le	3b00 <PyThread_acquire_lock@plt+0x1140>
    3b40:	b	3ad0 <PyThread_acquire_lock@plt+0x1110>
    3b44:	add	x2, sp, #0x38
    3b48:	str	x2, [sp]
    3b4c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3b50:	add	x4, x4, #0x260
    3b54:	add	x4, x4, #0x260
    3b58:	mov	w7, #0x0                   	// #0
    3b5c:	mov	w6, #0x1                   	// #1
    3b60:	mov	w5, #0x0                   	// #0
    3b64:	mov	x2, #0x0                   	// #0
    3b68:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3b6c:	cbnz	x0, 3b08 <PyThread_acquire_lock@plt+0x1148>
    3b70:	mov	x0, #0x0                   	// #0
    3b74:	b	3b1c <PyThread_acquire_lock@plt+0x115c>
    3b78:	sub	sp, sp, #0x40
    3b7c:	mov	x0, x1
    3b80:	mov	x1, x2
    3b84:	mov	x2, x3
    3b88:	stp	x29, x30, [sp, #16]
    3b8c:	add	x29, sp, #0x10
    3b90:	stp	x19, x20, [sp, #32]
    3b94:	cbz	x3, 3bfc <PyThread_acquire_lock@plt+0x123c>
    3b98:	ldr	x19, [x3, #16]
    3b9c:	add	x19, x1, x19
    3ba0:	add	x3, sp, #0x38
    3ba4:	str	x3, [sp]
    3ba8:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3bac:	add	x4, x4, #0x260
    3bb0:	mov	x3, x2
    3bb4:	add	x4, x4, #0x2a0
    3bb8:	mov	w7, #0x0                   	// #0
    3bbc:	mov	w6, #0x1                   	// #1
    3bc0:	mov	w5, #0x0                   	// #0
    3bc4:	mov	x2, #0x0                   	// #0
    3bc8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3bcc:	cbz	x0, 3c40 <PyThread_acquire_lock@plt+0x1280>
    3bd0:	mov	x20, #0x0                   	// #0
    3bd4:	cbz	x19, 3bdc <PyThread_acquire_lock@plt+0x121c>
    3bd8:	ldr	x20, [x0]
    3bdc:	bl	27c0 <EVP_sha224@plt>
    3be0:	mov	x1, x0
    3be4:	mov	x0, x20
    3be8:	bl	37d0 <PyThread_acquire_lock@plt+0xe10>
    3bec:	ldp	x29, x30, [sp, #16]
    3bf0:	ldp	x19, x20, [sp, #32]
    3bf4:	add	sp, sp, #0x40
    3bf8:	ret
    3bfc:	tbnz	x1, #63, 3c14 <PyThread_acquire_lock@plt+0x1254>
    3c00:	cmp	x0, #0x0
    3c04:	mov	x19, x1
    3c08:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    3c0c:	b.le	3bd0 <PyThread_acquire_lock@plt+0x1210>
    3c10:	b	3ba0 <PyThread_acquire_lock@plt+0x11e0>
    3c14:	add	x2, sp, #0x38
    3c18:	str	x2, [sp]
    3c1c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3c20:	add	x4, x4, #0x260
    3c24:	add	x4, x4, #0x2a0
    3c28:	mov	w7, #0x0                   	// #0
    3c2c:	mov	w6, #0x1                   	// #1
    3c30:	mov	w5, #0x0                   	// #0
    3c34:	mov	x2, #0x0                   	// #0
    3c38:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3c3c:	cbnz	x0, 3bd8 <PyThread_acquire_lock@plt+0x1218>
    3c40:	mov	x0, #0x0                   	// #0
    3c44:	b	3bec <PyThread_acquire_lock@plt+0x122c>
    3c48:	sub	sp, sp, #0x40
    3c4c:	mov	x0, x1
    3c50:	mov	x1, x2
    3c54:	mov	x2, x3
    3c58:	stp	x29, x30, [sp, #16]
    3c5c:	add	x29, sp, #0x10
    3c60:	stp	x19, x20, [sp, #32]
    3c64:	cbz	x3, 3ccc <PyThread_acquire_lock@plt+0x130c>
    3c68:	ldr	x19, [x3, #16]
    3c6c:	add	x19, x1, x19
    3c70:	add	x3, sp, #0x38
    3c74:	str	x3, [sp]
    3c78:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3c7c:	add	x4, x4, #0x260
    3c80:	mov	x3, x2
    3c84:	add	x4, x4, #0x2e0
    3c88:	mov	w7, #0x0                   	// #0
    3c8c:	mov	w6, #0x1                   	// #1
    3c90:	mov	w5, #0x0                   	// #0
    3c94:	mov	x2, #0x0                   	// #0
    3c98:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3c9c:	cbz	x0, 3d10 <PyThread_acquire_lock@plt+0x1350>
    3ca0:	mov	x20, #0x0                   	// #0
    3ca4:	cbz	x19, 3cac <PyThread_acquire_lock@plt+0x12ec>
    3ca8:	ldr	x20, [x0]
    3cac:	bl	2820 <EVP_sha1@plt>
    3cb0:	mov	x1, x0
    3cb4:	mov	x0, x20
    3cb8:	bl	37d0 <PyThread_acquire_lock@plt+0xe10>
    3cbc:	ldp	x29, x30, [sp, #16]
    3cc0:	ldp	x19, x20, [sp, #32]
    3cc4:	add	sp, sp, #0x40
    3cc8:	ret
    3ccc:	tbnz	x1, #63, 3ce4 <PyThread_acquire_lock@plt+0x1324>
    3cd0:	cmp	x0, #0x0
    3cd4:	mov	x19, x1
    3cd8:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    3cdc:	b.le	3ca0 <PyThread_acquire_lock@plt+0x12e0>
    3ce0:	b	3c70 <PyThread_acquire_lock@plt+0x12b0>
    3ce4:	add	x2, sp, #0x38
    3ce8:	str	x2, [sp]
    3cec:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3cf0:	add	x4, x4, #0x260
    3cf4:	add	x4, x4, #0x2e0
    3cf8:	mov	w7, #0x0                   	// #0
    3cfc:	mov	w6, #0x1                   	// #1
    3d00:	mov	w5, #0x0                   	// #0
    3d04:	mov	x2, #0x0                   	// #0
    3d08:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3d0c:	cbnz	x0, 3ca8 <PyThread_acquire_lock@plt+0x12e8>
    3d10:	mov	x0, #0x0                   	// #0
    3d14:	b	3cbc <PyThread_acquire_lock@plt+0x12fc>
    3d18:	sub	sp, sp, #0x40
    3d1c:	mov	x0, x1
    3d20:	mov	x1, x2
    3d24:	mov	x2, x3
    3d28:	stp	x29, x30, [sp, #16]
    3d2c:	add	x29, sp, #0x10
    3d30:	stp	x19, x20, [sp, #32]
    3d34:	cbz	x3, 3d9c <PyThread_acquire_lock@plt+0x13dc>
    3d38:	ldr	x19, [x3, #16]
    3d3c:	add	x19, x1, x19
    3d40:	add	x3, sp, #0x38
    3d44:	str	x3, [sp]
    3d48:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3d4c:	add	x4, x4, #0x260
    3d50:	mov	x3, x2
    3d54:	add	x4, x4, #0x320
    3d58:	mov	w7, #0x0                   	// #0
    3d5c:	mov	w6, #0x1                   	// #1
    3d60:	mov	w5, #0x0                   	// #0
    3d64:	mov	x2, #0x0                   	// #0
    3d68:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3d6c:	cbz	x0, 3de0 <PyThread_acquire_lock@plt+0x1420>
    3d70:	mov	x20, #0x0                   	// #0
    3d74:	cbz	x19, 3d7c <PyThread_acquire_lock@plt+0x13bc>
    3d78:	ldr	x20, [x0]
    3d7c:	bl	2690 <EVP_md5@plt>
    3d80:	mov	x1, x0
    3d84:	mov	x0, x20
    3d88:	bl	37d0 <PyThread_acquire_lock@plt+0xe10>
    3d8c:	ldp	x29, x30, [sp, #16]
    3d90:	ldp	x19, x20, [sp, #32]
    3d94:	add	sp, sp, #0x40
    3d98:	ret
    3d9c:	tbnz	x1, #63, 3db4 <PyThread_acquire_lock@plt+0x13f4>
    3da0:	cmp	x0, #0x0
    3da4:	mov	x19, x1
    3da8:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    3dac:	b.le	3d70 <PyThread_acquire_lock@plt+0x13b0>
    3db0:	b	3d40 <PyThread_acquire_lock@plt+0x1380>
    3db4:	add	x2, sp, #0x38
    3db8:	str	x2, [sp]
    3dbc:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3dc0:	add	x4, x4, #0x260
    3dc4:	add	x4, x4, #0x320
    3dc8:	mov	w7, #0x0                   	// #0
    3dcc:	mov	w6, #0x1                   	// #1
    3dd0:	mov	w5, #0x0                   	// #0
    3dd4:	mov	x2, #0x0                   	// #0
    3dd8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3ddc:	cbnz	x0, 3d78 <PyThread_acquire_lock@plt+0x13b8>
    3de0:	mov	x0, #0x0                   	// #0
    3de4:	b	3d8c <PyThread_acquire_lock@plt+0x13cc>
    3de8:	sub	sp, sp, #0xb0
    3dec:	mov	x5, x1
    3df0:	mov	x1, x2
    3df4:	stp	x29, x30, [sp, #16]
    3df8:	add	x29, sp, #0x10
    3dfc:	stp	x19, x20, [sp, #32]
    3e00:	cbz	x3, 3f04 <PyThread_acquire_lock@plt+0x1544>
    3e04:	ldr	x19, [x3, #16]
    3e08:	add	x19, x2, x19
    3e0c:	add	x0, sp, #0x50
    3e10:	str	x0, [sp]
    3e14:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    3e18:	mov	x0, x5
    3e1c:	add	x4, x4, #0x260
    3e20:	mov	w5, #0x1                   	// #1
    3e24:	add	x4, x4, #0x360
    3e28:	mov	w7, #0x0                   	// #0
    3e2c:	mov	w6, #0x2                   	// #2
    3e30:	mov	x2, #0x0                   	// #0
    3e34:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3e38:	mov	x5, x0
    3e3c:	cbz	x0, 40fc <PyThread_acquire_lock@plt+0x173c>
    3e40:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e44:	add	x2, sp, #0x48
    3e48:	add	x1, x1, #0xfe8
    3e4c:	cmp	x19, #0x1
    3e50:	ldr	x0, [x5]
    3e54:	b.eq	3f30 <PyThread_acquire_lock@plt+0x1570>  // b.none
    3e58:	ldr	x19, [x5, #8]
    3e5c:	stp	xzr, xzr, [sp, #96]
    3e60:	stp	xzr, xzr, [sp, #112]
    3e64:	stp	xzr, xzr, [sp, #128]
    3e68:	stp	xzr, xzr, [sp, #144]
    3e6c:	stp	xzr, xzr, [sp, #160]
    3e70:	bl	2880 <_PyArg_Parse_SizeT@plt>
    3e74:	cbz	w0, 40dc <PyThread_acquire_lock@plt+0x171c>
    3e78:	cbz	x19, 3f4c <PyThread_acquire_lock@plt+0x158c>
    3e7c:	ldr	x0, [x19, #8]
    3e80:	ldr	x1, [x0, #168]
    3e84:	tbnz	w1, #28, 4104 <PyThread_acquire_lock@plt+0x1744>
    3e88:	ldr	x0, [x0, #160]
    3e8c:	cbz	x0, 4088 <PyThread_acquire_lock@plt+0x16c8>
    3e90:	ldr	x0, [x0]
    3e94:	cbz	x0, 4088 <PyThread_acquire_lock@plt+0x16c8>
    3e98:	str	x21, [sp, #48]
    3e9c:	add	x21, sp, #0x60
    3ea0:	mov	x0, x19
    3ea4:	mov	x1, x21
    3ea8:	mov	w2, #0x0                   	// #0
    3eac:	bl	2750 <PyObject_GetBuffer@plt>
    3eb0:	cmn	w0, #0x1
    3eb4:	b.eq	4150 <PyThread_acquire_lock@plt+0x1790>  // b.none
    3eb8:	ldr	w0, [sp, #132]
    3ebc:	cmp	w0, #0x1
    3ec0:	b.gt	4124 <PyThread_acquire_lock@plt+0x1764>
    3ec4:	ldr	x20, [sp, #72]
    3ec8:	mov	x0, x20
    3ecc:	bl	2640 <EVP_get_digestbyname@plt>
    3ed0:	cbz	x0, 3f84 <PyThread_acquire_lock@plt+0x15c4>
    3ed4:	ldr	x1, [sp, #96]
    3ed8:	ldr	x2, [sp, #112]
    3edc:	bl	3108 <PyThread_acquire_lock@plt+0x748>
    3ee0:	mov	x20, x0
    3ee4:	mov	x0, x21
    3ee8:	bl	2970 <PyBuffer_Release@plt>
    3eec:	ldr	x21, [sp, #48]
    3ef0:	mov	x0, x20
    3ef4:	ldp	x29, x30, [sp, #16]
    3ef8:	ldp	x19, x20, [sp, #32]
    3efc:	add	sp, sp, #0xb0
    3f00:	ret
    3f04:	sub	x0, x2, #0x1
    3f08:	mov	x19, x2
    3f0c:	cmp	x0, #0x1
    3f10:	b.hi	3e0c <PyThread_acquire_lock@plt+0x144c>  // b.pmore
    3f14:	cbz	x5, 3e0c <PyThread_acquire_lock@plt+0x144c>
    3f18:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3f1c:	add	x2, sp, #0x48
    3f20:	add	x1, x1, #0xfe8
    3f24:	cmp	x19, #0x1
    3f28:	ldr	x0, [x5]
    3f2c:	b.ne	3e58 <PyThread_acquire_lock@plt+0x1498>  // b.any
    3f30:	stp	xzr, xzr, [sp, #96]
    3f34:	stp	xzr, xzr, [sp, #112]
    3f38:	stp	xzr, xzr, [sp, #128]
    3f3c:	stp	xzr, xzr, [sp, #144]
    3f40:	stp	xzr, xzr, [sp, #160]
    3f44:	bl	2880 <_PyArg_Parse_SizeT@plt>
    3f48:	cbz	w0, 40dc <PyThread_acquire_lock@plt+0x171c>
    3f4c:	ldr	x20, [sp, #72]
    3f50:	mov	x0, x20
    3f54:	bl	2640 <EVP_get_digestbyname@plt>
    3f58:	mov	x19, x0
    3f5c:	cbz	x0, 3f88 <PyThread_acquire_lock@plt+0x15c8>
    3f60:	ldr	x1, [sp, #96]
    3f64:	ldr	x2, [sp, #112]
    3f68:	bl	3108 <PyThread_acquire_lock@plt+0x748>
    3f6c:	mov	x20, x0
    3f70:	mov	x0, x20
    3f74:	ldp	x29, x30, [sp, #16]
    3f78:	ldp	x19, x20, [sp, #32]
    3f7c:	add	sp, sp, #0xb0
    3f80:	ret
    3f84:	ldr	x21, [sp, #48]
    3f88:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3f8c:	mov	x0, x20
    3f90:	add	x1, x1, #0xe00
    3f94:	bl	28a0 <strcmp@plt>
    3f98:	cbz	w0, 40b8 <PyThread_acquire_lock@plt+0x16f8>
    3f9c:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    3fa0:	mov	x0, x20
    3fa4:	add	x1, x1, #0x8
    3fa8:	bl	28a0 <strcmp@plt>
    3fac:	cbz	w0, 40b8 <PyThread_acquire_lock@plt+0x16f8>
    3fb0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3fb4:	mov	x0, x20
    3fb8:	add	x1, x1, #0xe60
    3fbc:	bl	28a0 <strcmp@plt>
    3fc0:	cbz	w0, 415c <PyThread_acquire_lock@plt+0x179c>
    3fc4:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    3fc8:	mov	x0, x20
    3fcc:	add	x1, x1, #0x18
    3fd0:	bl	28a0 <strcmp@plt>
    3fd4:	cbz	w0, 415c <PyThread_acquire_lock@plt+0x179c>
    3fd8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3fdc:	mov	x0, x20
    3fe0:	add	x1, x1, #0xe40
    3fe4:	bl	28a0 <strcmp@plt>
    3fe8:	cbz	w0, 4164 <PyThread_acquire_lock@plt+0x17a4>
    3fec:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3ff0:	mov	x0, x20
    3ff4:	add	x1, x1, #0xe20
    3ff8:	bl	28a0 <strcmp@plt>
    3ffc:	cbz	w0, 416c <PyThread_acquire_lock@plt+0x17ac>
    4000:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4004:	mov	x0, x20
    4008:	add	x1, x1, #0xe30
    400c:	bl	28a0 <strcmp@plt>
    4010:	cbz	w0, 4174 <PyThread_acquire_lock@plt+0x17b4>
    4014:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4018:	mov	x0, x20
    401c:	add	x1, x1, #0xe10
    4020:	bl	28a0 <strcmp@plt>
    4024:	cbz	w0, 417c <PyThread_acquire_lock@plt+0x17bc>
    4028:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    402c:	mov	x0, x20
    4030:	add	x1, x1, #0xe70
    4034:	bl	28a0 <strcmp@plt>
    4038:	cbz	w0, 4184 <PyThread_acquire_lock@plt+0x17c4>
    403c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4040:	mov	x0, x20
    4044:	add	x1, x1, #0xe50
    4048:	bl	28a0 <strcmp@plt>
    404c:	cbz	w0, 418c <PyThread_acquire_lock@plt+0x17cc>
    4050:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4054:	mov	x0, x20
    4058:	add	x1, x1, #0x28
    405c:	bl	28a0 <strcmp@plt>
    4060:	cbz	w0, 4194 <PyThread_acquire_lock@plt+0x17d4>
    4064:	mov	x0, x20
    4068:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    406c:	add	x1, x1, #0x38
    4070:	bl	28a0 <strcmp@plt>
    4074:	mov	w1, w0
    4078:	mov	x0, #0x0                   	// #0
    407c:	cbnz	w1, 40bc <PyThread_acquire_lock@plt+0x16fc>
    4080:	bl	28b0 <EVP_blake2b512@plt>
    4084:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    4088:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    408c:	mov	x20, #0x0                   	// #0
    4090:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4094:	add	x1, x1, #0xed0
    4098:	ldr	x0, [x0, #4000]
    409c:	ldr	x0, [x0]
    40a0:	bl	2920 <PyErr_SetString@plt>
    40a4:	mov	x0, x20
    40a8:	ldp	x29, x30, [sp, #16]
    40ac:	ldp	x19, x20, [sp, #32]
    40b0:	add	sp, sp, #0xb0
    40b4:	ret
    40b8:	bl	2570 <EVP_sha512_224@plt>
    40bc:	ldr	x1, [sp, #96]
    40c0:	ldr	x2, [sp, #112]
    40c4:	bl	3108 <PyThread_acquire_lock@plt+0x748>
    40c8:	mov	x20, x0
    40cc:	cbz	x19, 3ef0 <PyThread_acquire_lock@plt+0x1530>
    40d0:	str	x21, [sp, #48]
    40d4:	add	x21, sp, #0x60
    40d8:	b	3ee4 <PyThread_acquire_lock@plt+0x1524>
    40dc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    40e0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    40e4:	mov	x20, #0x0                   	// #0
    40e8:	add	x1, x1, #0xff0
    40ec:	ldr	x0, [x0, #4000]
    40f0:	ldr	x0, [x0]
    40f4:	bl	2920 <PyErr_SetString@plt>
    40f8:	b	3ef0 <PyThread_acquire_lock@plt+0x1530>
    40fc:	mov	x20, #0x0                   	// #0
    4100:	b	3ef0 <PyThread_acquire_lock@plt+0x1530>
    4104:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4108:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    410c:	mov	x20, #0x0                   	// #0
    4110:	add	x1, x1, #0xea0
    4114:	ldr	x0, [x0, #4000]
    4118:	ldr	x0, [x0]
    411c:	bl	2920 <PyErr_SetString@plt>
    4120:	b	3ef0 <PyThread_acquire_lock@plt+0x1530>
    4124:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4128:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    412c:	add	x1, x1, #0xf00
    4130:	mov	x20, #0x0                   	// #0
    4134:	ldr	x0, [x0, #4024]
    4138:	ldr	x0, [x0]
    413c:	bl	2920 <PyErr_SetString@plt>
    4140:	mov	x0, x21
    4144:	bl	2970 <PyBuffer_Release@plt>
    4148:	ldr	x21, [sp, #48]
    414c:	b	3ef0 <PyThread_acquire_lock@plt+0x1530>
    4150:	mov	x20, #0x0                   	// #0
    4154:	ldr	x21, [sp, #48]
    4158:	b	3ef0 <PyThread_acquire_lock@plt+0x1530>
    415c:	bl	2960 <EVP_sha512_256@plt>
    4160:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    4164:	bl	2900 <EVP_sha3_224@plt>
    4168:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    416c:	bl	27d0 <EVP_sha3_256@plt>
    4170:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    4174:	bl	2790 <EVP_sha3_384@plt>
    4178:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    417c:	bl	25f0 <EVP_sha3_512@plt>
    4180:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    4184:	bl	2680 <EVP_shake128@plt>
    4188:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    418c:	bl	25b0 <EVP_shake256@plt>
    4190:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    4194:	bl	2580 <EVP_blake2s256@plt>
    4198:	b	40bc <PyThread_acquire_lock@plt+0x16fc>
    419c:	nop
    41a0:	sub	sp, sp, #0x140
    41a4:	stp	x29, x30, [sp, #16]
    41a8:	add	x29, sp, #0x10
    41ac:	stp	x19, x20, [sp, #32]
    41b0:	mov	x19, x1
    41b4:	mov	x1, x2
    41b8:	stp	x21, x22, [sp, #48]
    41bc:	cbz	x3, 43a4 <PyThread_acquire_lock@plt+0x19e4>
    41c0:	ldr	x0, [x3, #16]
    41c4:	stp	xzr, xzr, [sp, #160]
    41c8:	add	x22, x2, x0
    41cc:	stp	xzr, xzr, [sp, #176]
    41d0:	sub	x21, x22, #0x1
    41d4:	stp	xzr, xzr, [sp, #192]
    41d8:	stp	xzr, xzr, [sp, #208]
    41dc:	stp	xzr, xzr, [sp, #224]
    41e0:	stp	xzr, xzr, [sp, #240]
    41e4:	stp	xzr, xzr, [sp, #256]
    41e8:	stp	xzr, xzr, [sp, #272]
    41ec:	stp	xzr, xzr, [sp, #288]
    41f0:	stp	xzr, xzr, [sp, #304]
    41f4:	add	x0, sp, #0x68
    41f8:	str	x0, [sp]
    41fc:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    4200:	add	x4, x4, #0x260
    4204:	mov	x0, x19
    4208:	mov	w6, #0x1                   	// #1
    420c:	add	x4, x4, #0x3a0
    4210:	mov	w5, w6
    4214:	mov	w7, #0x0                   	// #0
    4218:	mov	x2, #0x0                   	// #0
    421c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4220:	mov	x19, x0
    4224:	cbz	x0, 4368 <PyThread_acquire_lock@plt+0x19a8>
    4228:	ldr	x0, [x19]
    422c:	add	x20, sp, #0xa0
    4230:	mov	x1, x20
    4234:	mov	w2, #0x0                   	// #0
    4238:	bl	2750 <PyObject_GetBuffer@plt>
    423c:	cbnz	w0, 4368 <PyThread_acquire_lock@plt+0x19a8>
    4240:	mov	x0, x20
    4244:	mov	w1, #0x43                  	// #67
    4248:	bl	27f0 <PyBuffer_IsContiguous@plt>
    424c:	cbz	w0, 459c <PyThread_acquire_lock@plt+0x1bdc>
    4250:	stp	x23, x24, [sp, #64]
    4254:	str	x25, [sp, #80]
    4258:	cbz	x21, 43e4 <PyThread_acquire_lock@plt+0x1a24>
    425c:	ldr	x0, [x19, #8]
    4260:	cbz	x0, 4290 <PyThread_acquire_lock@plt+0x18d0>
    4264:	add	x20, sp, #0xf0
    4268:	mov	w2, #0x0                   	// #0
    426c:	mov	x1, x20
    4270:	bl	2750 <PyObject_GetBuffer@plt>
    4274:	cbnz	w0, 4360 <PyThread_acquire_lock@plt+0x19a0>
    4278:	mov	x0, x20
    427c:	mov	w1, #0x43                  	// #67
    4280:	bl	27f0 <PyBuffer_IsContiguous@plt>
    4284:	cbz	w0, 4754 <PyThread_acquire_lock@plt+0x1d94>
    4288:	subs	x21, x22, #0x2
    428c:	b.eq	43e4 <PyThread_acquire_lock@plt+0x1a24>  // b.none
    4290:	ldr	x22, [x19, #16]
    4294:	cbz	x22, 451c <PyThread_acquire_lock@plt+0x1b5c>
    4298:	ldr	x0, [x22, #8]
    429c:	ldr	x0, [x0, #168]
    42a0:	tbz	w0, #24, 46bc <PyThread_acquire_lock@plt+0x1cfc>
    42a4:	subs	x21, x21, #0x1
    42a8:	b.eq	45c4 <PyThread_acquire_lock@plt+0x1c04>  // b.none
    42ac:	ldr	x25, [x19, #24]
    42b0:	cbz	x25, 45d8 <PyThread_acquire_lock@plt+0x1c18>
    42b4:	ldr	x0, [x25, #8]
    42b8:	ldr	x0, [x0, #168]
    42bc:	tbz	w0, #24, 476c <PyThread_acquire_lock@plt+0x1dac>
    42c0:	subs	x21, x21, #0x1
    42c4:	b.eq	462c <PyThread_acquire_lock@plt+0x1c6c>  // b.none
    42c8:	ldr	x20, [x19, #32]
    42cc:	cbz	x20, 4620 <PyThread_acquire_lock@plt+0x1c60>
    42d0:	ldr	x0, [x20, #8]
    42d4:	ldr	x0, [x0, #168]
    42d8:	tbz	w0, #24, 4784 <PyThread_acquire_lock@plt+0x1dc4>
    42dc:	subs	x21, x21, #0x1
    42e0:	b.eq	4650 <PyThread_acquire_lock@plt+0x1c90>  // b.none
    42e4:	ldr	x0, [x19, #40]
    42e8:	cbz	x0, 4674 <PyThread_acquire_lock@plt+0x1cb4>
    42ec:	adrp	x24, 16000 <PyInit__hashlib@@Base+0x11350>
    42f0:	ldr	x0, [x0, #8]
    42f4:	ldr	x1, [x24, #4040]
    42f8:	cmp	x0, x1
    42fc:	b.eq	45e4 <PyThread_acquire_lock@plt+0x1c24>  // b.none
    4300:	bl	2800 <PyType_IsSubtype@plt>
    4304:	cbnz	w0, 45e4 <PyThread_acquire_lock@plt+0x1c24>
    4308:	ldr	x0, [x19, #40]
    430c:	bl	26d0 <PyLong_AsLong@plt>
    4310:	mov	x23, x0
    4314:	cmn	x0, #0x1
    4318:	b.eq	479c <PyThread_acquire_lock@plt+0x1ddc>  // b.none
    431c:	cmp	x21, #0x1
    4320:	mov	x21, x23
    4324:	b.eq	4650 <PyThread_acquire_lock@plt+0x1c90>  // b.none
    4328:	ldr	x0, [x19, #48]
    432c:	ldr	x1, [x24, #4040]
    4330:	ldr	x0, [x0, #8]
    4334:	cmp	x0, x1
    4338:	b.eq	45e4 <PyThread_acquire_lock@plt+0x1c24>  // b.none
    433c:	bl	2800 <PyType_IsSubtype@plt>
    4340:	cbnz	w0, 45e4 <PyThread_acquire_lock@plt+0x1c24>
    4344:	ldr	x0, [x19, #48]
    4348:	bl	26d0 <PyLong_AsLong@plt>
    434c:	mov	x23, x0
    4350:	cmn	x0, #0x1
    4354:	b.ne	43fc <PyThread_acquire_lock@plt+0x1a3c>  // b.any
    4358:	bl	2720 <PyErr_Occurred@plt>
    435c:	cbz	x0, 43fc <PyThread_acquire_lock@plt+0x1a3c>
    4360:	ldp	x23, x24, [sp, #64]
    4364:	ldr	x25, [sp, #80]
    4368:	mov	x19, #0x0                   	// #0
    436c:	ldr	x0, [sp, #168]
    4370:	cbz	x0, 437c <PyThread_acquire_lock@plt+0x19bc>
    4374:	add	x0, sp, #0xa0
    4378:	bl	2970 <PyBuffer_Release@plt>
    437c:	ldr	x0, [sp, #248]
    4380:	cbz	x0, 438c <PyThread_acquire_lock@plt+0x19cc>
    4384:	add	x0, sp, #0xf0
    4388:	bl	2970 <PyBuffer_Release@plt>
    438c:	mov	x0, x19
    4390:	ldp	x29, x30, [sp, #16]
    4394:	ldp	x19, x20, [sp, #32]
    4398:	ldp	x21, x22, [sp, #48]
    439c:	add	sp, sp, #0x140
    43a0:	ret
    43a4:	stp	xzr, xzr, [sp, #160]
    43a8:	mov	x22, x2
    43ac:	subs	x21, x2, #0x1
    43b0:	stp	xzr, xzr, [sp, #176]
    43b4:	stp	xzr, xzr, [sp, #192]
    43b8:	stp	xzr, xzr, [sp, #208]
    43bc:	stp	xzr, xzr, [sp, #224]
    43c0:	stp	xzr, xzr, [sp, #240]
    43c4:	stp	xzr, xzr, [sp, #256]
    43c8:	stp	xzr, xzr, [sp, #272]
    43cc:	stp	xzr, xzr, [sp, #288]
    43d0:	stp	xzr, xzr, [sp, #304]
    43d4:	b.ne	41f4 <PyThread_acquire_lock@plt+0x1834>  // b.any
    43d8:	mov	x21, #0x0                   	// #0
    43dc:	cbnz	x19, 4228 <PyThread_acquire_lock@plt+0x1868>
    43e0:	b	41f4 <PyThread_acquire_lock@plt+0x1834>
    43e4:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x11350>
    43e8:	mov	x23, #0x40                  	// #64
    43ec:	mov	x21, #0x0                   	// #0
    43f0:	ldr	x20, [x20, #4056]
    43f4:	mov	x25, x20
    43f8:	mov	x22, x20
    43fc:	ldr	x0, [sp, #176]
    4400:	mov	x1, #0x7fffffff            	// #2147483647
    4404:	cmp	x0, x1
    4408:	b.gt	463c <PyThread_acquire_lock@plt+0x1c7c>
    440c:	ldr	x19, [sp, #240]
    4410:	cbz	x19, 46ec <PyThread_acquire_lock@plt+0x1d2c>
    4414:	ldr	x0, [sp, #256]
    4418:	cmp	x0, x1
    441c:	b.gt	4574 <PyThread_acquire_lock@plt+0x1bb4>
    4420:	mov	x0, x22
    4424:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    4428:	mov	x22, x0
    442c:	cmn	x0, #0x1
    4430:	b.eq	4528 <PyThread_acquire_lock@plt+0x1b68>  // b.none
    4434:	cmp	x0, #0x1
    4438:	b.ls	4530 <PyThread_acquire_lock@plt+0x1b70>  // b.plast
    443c:	sub	x0, x0, #0x1
    4440:	tst	x0, x22
    4444:	b.ne	4530 <PyThread_acquire_lock@plt+0x1b70>  // b.any
    4448:	mov	x0, x25
    444c:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    4450:	mov	x24, x0
    4454:	cmn	x0, #0x1
    4458:	b.eq	4558 <PyThread_acquire_lock@plt+0x1b98>  // b.none
    445c:	mov	x0, x20
    4460:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    4464:	mov	x20, x0
    4468:	cmn	x0, #0x1
    446c:	b.eq	4658 <PyThread_acquire_lock@plt+0x1c98>  // b.none
    4470:	mov	x2, #0x7fffffff            	// #2147483647
    4474:	cmp	x21, x2
    4478:	b.hi	46fc <PyThread_acquire_lock@plt+0x1d3c>  // b.pmore
    447c:	sub	x1, x23, #0x1
    4480:	mov	x0, #0x7ffffffe            	// #2147483646
    4484:	cmp	x1, x0
    4488:	b.hi	4680 <PyThread_acquire_lock@plt+0x1cc0>  // b.pmore
    448c:	stp	xzr, xzr, [sp]
    4490:	mov	x7, x21
    4494:	mov	x6, x20
    4498:	mov	x5, x24
    449c:	mov	x4, x22
    44a0:	mov	x3, #0x0                   	// #0
    44a4:	mov	x2, #0x0                   	// #0
    44a8:	mov	x1, #0x0                   	// #0
    44ac:	mov	x0, #0x0                   	// #0
    44b0:	bl	2830 <EVP_PBE_scrypt@plt>
    44b4:	cbz	w0, 46a8 <PyThread_acquire_lock@plt+0x1ce8>
    44b8:	mov	x1, x23
    44bc:	mov	x0, #0x0                   	// #0
    44c0:	bl	2870 <PyBytes_FromStringAndSize@plt>
    44c4:	mov	x19, x0
    44c8:	cbz	x0, 4360 <PyThread_acquire_lock@plt+0x19a0>
    44cc:	bl	27b0 <PyEval_SaveThread@plt>
    44d0:	mov	x7, x21
    44d4:	mov	x21, x0
    44d8:	ldr	x0, [sp, #160]
    44dc:	add	x9, x19, #0x20
    44e0:	ldr	x1, [sp, #176]
    44e4:	mov	x6, x20
    44e8:	ldr	x2, [sp, #240]
    44ec:	mov	x5, x24
    44f0:	ldr	x3, [sp, #256]
    44f4:	mov	x4, x22
    44f8:	stp	x9, x23, [sp]
    44fc:	bl	2830 <EVP_PBE_scrypt@plt>
    4500:	mov	w20, w0
    4504:	mov	x0, x21
    4508:	bl	2770 <PyEval_RestoreThread@plt>
    450c:	cbz	w20, 4724 <PyThread_acquire_lock@plt+0x1d64>
    4510:	ldp	x23, x24, [sp, #64]
    4514:	ldr	x25, [sp, #80]
    4518:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    451c:	adrp	x22, 16000 <PyInit__hashlib@@Base+0x11350>
    4520:	ldr	x22, [x22, #4056]
    4524:	b	42ac <PyThread_acquire_lock@plt+0x18ec>
    4528:	bl	2720 <PyErr_Occurred@plt>
    452c:	cbnz	x0, 460c <PyThread_acquire_lock@plt+0x1c4c>
    4530:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4534:	add	x1, x1, #0x120
    4538:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    453c:	mov	x19, #0x0                   	// #0
    4540:	ldr	x0, [x0, #3984]
    4544:	ldr	x0, [x0]
    4548:	bl	2920 <PyErr_SetString@plt>
    454c:	ldp	x23, x24, [sp, #64]
    4550:	ldr	x25, [sp, #80]
    4554:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    4558:	bl	2720 <PyErr_Occurred@plt>
    455c:	cbz	x0, 445c <PyThread_acquire_lock@plt+0x1a9c>
    4560:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4564:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4568:	add	x1, x1, #0x168
    456c:	mov	x19, #0x0                   	// #0
    4570:	b	45f4 <PyThread_acquire_lock@plt+0x1c34>
    4574:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4578:	add	x1, x1, #0x108
    457c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4580:	mov	x19, #0x0                   	// #0
    4584:	ldr	x0, [x0, #4064]
    4588:	ldr	x0, [x0]
    458c:	bl	2920 <PyErr_SetString@plt>
    4590:	ldp	x23, x24, [sp, #64]
    4594:	ldr	x25, [sp, #80]
    4598:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    459c:	ldr	x3, [x19]
    45a0:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    45a4:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    45a8:	add	x2, x2, #0xf38
    45ac:	add	x1, x1, #0x48
    45b0:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    45b4:	mov	x19, #0x0                   	// #0
    45b8:	add	x0, x0, #0x60
    45bc:	bl	29b0 <_PyArg_BadArgument@plt>
    45c0:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    45c4:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x11350>
    45c8:	mov	x23, #0x40                  	// #64
    45cc:	ldr	x20, [x20, #4056]
    45d0:	mov	x25, x20
    45d4:	b	43fc <PyThread_acquire_lock@plt+0x1a3c>
    45d8:	adrp	x25, 16000 <PyInit__hashlib@@Base+0x11350>
    45dc:	ldr	x25, [x25, #4056]
    45e0:	b	42c8 <PyThread_acquire_lock@plt+0x1908>
    45e4:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    45e8:	add	x1, x1, #0xb0
    45ec:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    45f0:	mov	x19, #0x0                   	// #0
    45f4:	ldr	x0, [x0, #4000]
    45f8:	ldr	x0, [x0]
    45fc:	bl	2920 <PyErr_SetString@plt>
    4600:	ldp	x23, x24, [sp, #64]
    4604:	ldr	x25, [sp, #80]
    4608:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    460c:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4610:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4614:	add	x1, x1, #0x138
    4618:	mov	x19, #0x0                   	// #0
    461c:	b	45f4 <PyThread_acquire_lock@plt+0x1c34>
    4620:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x11350>
    4624:	ldr	x20, [x20, #4056]
    4628:	b	42e4 <PyThread_acquire_lock@plt+0x1924>
    462c:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x11350>
    4630:	mov	x23, #0x40                  	// #64
    4634:	ldr	x20, [x20, #4056]
    4638:	b	43fc <PyThread_acquire_lock@plt+0x1a3c>
    463c:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4640:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4644:	add	x1, x1, #0xd8
    4648:	mov	x19, #0x0                   	// #0
    464c:	b	4584 <PyThread_acquire_lock@plt+0x1bc4>
    4650:	mov	x23, #0x40                  	// #64
    4654:	b	43fc <PyThread_acquire_lock@plt+0x1a3c>
    4658:	bl	2720 <PyErr_Occurred@plt>
    465c:	cbz	x0, 4470 <PyThread_acquire_lock@plt+0x1ab0>
    4660:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4664:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4668:	add	x1, x1, #0x198
    466c:	mov	x19, #0x0                   	// #0
    4670:	b	45f4 <PyThread_acquire_lock@plt+0x1c34>
    4674:	mov	x21, #0x0                   	// #0
    4678:	adrp	x24, 16000 <PyInit__hashlib@@Base+0x11350>
    467c:	b	4328 <PyThread_acquire_lock@plt+0x1968>
    4680:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4684:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4688:	mov	x19, #0x0                   	// #0
    468c:	add	x1, x1, #0x1f8
    4690:	ldr	x0, [x0, #3984]
    4694:	ldr	x0, [x0]
    4698:	bl	26f0 <PyErr_Format@plt>
    469c:	ldp	x23, x24, [sp, #64]
    46a0:	ldr	x25, [sp, #80]
    46a4:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    46a8:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    46ac:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    46b0:	add	x1, x1, #0x230
    46b4:	mov	x19, #0x0                   	// #0
    46b8:	b	4540 <PyThread_acquire_lock@plt+0x1b80>
    46bc:	adrp	x2, 5000 <PyInit__hashlib@@Base+0x350>
    46c0:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    46c4:	mov	x3, x22
    46c8:	add	x2, x2, #0x78
    46cc:	add	x1, x1, #0x80
    46d0:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    46d4:	mov	x19, #0x0                   	// #0
    46d8:	add	x0, x0, #0x60
    46dc:	bl	29b0 <_PyArg_BadArgument@plt>
    46e0:	ldp	x23, x24, [sp, #64]
    46e4:	ldr	x25, [sp, #80]
    46e8:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    46ec:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    46f0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    46f4:	add	x1, x1, #0xf0
    46f8:	b	45f4 <PyThread_acquire_lock@plt+0x1c34>
    46fc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4700:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4704:	mov	x19, #0x0                   	// #0
    4708:	add	x1, x1, #0x1c8
    470c:	ldr	x0, [x0, #3984]
    4710:	ldr	x0, [x0]
    4714:	bl	26f0 <PyErr_Format@plt>
    4718:	ldp	x23, x24, [sp, #64]
    471c:	ldr	x25, [sp, #80]
    4720:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    4724:	ldr	x0, [x19]
    4728:	sub	x0, x0, #0x1
    472c:	str	x0, [x19]
    4730:	cbz	x0, 47a8 <PyThread_acquire_lock@plt+0x1de8>
    4734:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4738:	mov	x19, #0x0                   	// #0
    473c:	ldr	x0, [x0, #3984]
    4740:	ldr	x0, [x0]
    4744:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    4748:	ldp	x23, x24, [sp, #64]
    474c:	ldr	x25, [sp, #80]
    4750:	b	436c <PyThread_acquire_lock@plt+0x19ac>
    4754:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    4758:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    475c:	add	x2, x2, #0xf38
    4760:	add	x1, x1, #0x68
    4764:	ldr	x3, [x19, #8]
    4768:	b	46d0 <PyThread_acquire_lock@plt+0x1d10>
    476c:	adrp	x2, 5000 <PyInit__hashlib@@Base+0x350>
    4770:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4774:	mov	x3, x25
    4778:	add	x2, x2, #0x78
    477c:	add	x1, x1, #0x90
    4780:	b	46d0 <PyThread_acquire_lock@plt+0x1d10>
    4784:	adrp	x2, 5000 <PyInit__hashlib@@Base+0x350>
    4788:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    478c:	mov	x3, x20
    4790:	add	x2, x2, #0x78
    4794:	add	x1, x1, #0xa0
    4798:	b	46d0 <PyThread_acquire_lock@plt+0x1d10>
    479c:	bl	2720 <PyErr_Occurred@plt>
    47a0:	cbz	x0, 431c <PyThread_acquire_lock@plt+0x195c>
    47a4:	b	4360 <PyThread_acquire_lock@plt+0x19a0>
    47a8:	mov	x0, x19
    47ac:	bl	28e0 <_Py_Dealloc@plt>
    47b0:	b	4734 <PyThread_acquire_lock@plt+0x1d74>
    47b4:	nop
    47b8:	sub	sp, sp, #0x120
    47bc:	stp	x29, x30, [sp, #16]
    47c0:	add	x29, sp, #0x10
    47c4:	stp	x19, x20, [sp, #32]
    47c8:	mov	x19, x1
    47cc:	mov	x1, x2
    47d0:	cbz	x3, 49cc <PyThread_acquire_lock@plt+0x200c>
    47d4:	ldr	x20, [x3, #16]
    47d8:	stp	xzr, xzr, [sp, #128]
    47dc:	add	x20, x2, x20
    47e0:	stp	xzr, xzr, [sp, #144]
    47e4:	stp	xzr, xzr, [sp, #160]
    47e8:	stp	xzr, xzr, [sp, #176]
    47ec:	stp	xzr, xzr, [sp, #192]
    47f0:	stp	xzr, xzr, [sp, #208]
    47f4:	stp	xzr, xzr, [sp, #224]
    47f8:	stp	xzr, xzr, [sp, #240]
    47fc:	stp	xzr, xzr, [sp, #256]
    4800:	stp	xzr, xzr, [sp, #272]
    4804:	add	x0, sp, #0x58
    4808:	str	x0, [sp]
    480c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x12350>
    4810:	add	x4, x4, #0x260
    4814:	mov	x0, x19
    4818:	add	x4, x4, #0x3e0
    481c:	mov	w7, #0x0                   	// #0
    4820:	mov	w6, #0x5                   	// #5
    4824:	mov	w5, #0x4                   	// #4
    4828:	mov	x2, #0x0                   	// #0
    482c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4830:	mov	x19, x0
    4834:	cbz	x0, 4aa0 <PyThread_acquire_lock@plt+0x20e0>
    4838:	ldr	x0, [x19]
    483c:	ldr	x1, [x0, #8]
    4840:	ldr	x1, [x1, #168]
    4844:	tbz	w1, #28, 4a18 <PyThread_acquire_lock@plt+0x2058>
    4848:	add	x1, sp, #0x50
    484c:	stp	x21, x22, [sp, #48]
    4850:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    4854:	mov	x22, x0
    4858:	cbz	x0, 4ab0 <PyThread_acquire_lock@plt+0x20f0>
    485c:	bl	2980 <strlen@plt>
    4860:	ldr	x1, [sp, #80]
    4864:	cmp	x0, x1
    4868:	b.ne	4a40 <PyThread_acquire_lock@plt+0x2080>  // b.any
    486c:	ldr	x0, [x19, #8]
    4870:	add	x21, sp, #0x80
    4874:	mov	x1, x21
    4878:	mov	w2, #0x0                   	// #0
    487c:	bl	2750 <PyObject_GetBuffer@plt>
    4880:	cbnz	w0, 4ab0 <PyThread_acquire_lock@plt+0x20f0>
    4884:	mov	x0, x21
    4888:	mov	w1, #0x43                  	// #67
    488c:	bl	27f0 <PyBuffer_IsContiguous@plt>
    4890:	cbz	w0, 4ae0 <PyThread_acquire_lock@plt+0x2120>
    4894:	ldr	x0, [x19, #16]
    4898:	add	x21, sp, #0xd0
    489c:	mov	x1, x21
    48a0:	mov	w2, #0x0                   	// #0
    48a4:	bl	2750 <PyObject_GetBuffer@plt>
    48a8:	cbnz	w0, 4ab0 <PyThread_acquire_lock@plt+0x20f0>
    48ac:	mov	x0, x21
    48b0:	mov	w1, #0x43                  	// #67
    48b4:	bl	27f0 <PyBuffer_IsContiguous@plt>
    48b8:	cbz	w0, 4b0c <PyThread_acquire_lock@plt+0x214c>
    48bc:	ldr	x0, [x19, #24]
    48c0:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11350>
    48c4:	ldr	x1, [x1, #4040]
    48c8:	ldr	x0, [x0, #8]
    48cc:	cmp	x0, x1
    48d0:	b.eq	4abc <PyThread_acquire_lock@plt+0x20fc>  // b.none
    48d4:	bl	2800 <PyType_IsSubtype@plt>
    48d8:	cbnz	w0, 4abc <PyThread_acquire_lock@plt+0x20fc>
    48dc:	ldr	x0, [x19, #24]
    48e0:	bl	26d0 <PyLong_AsLong@plt>
    48e4:	mov	x21, x0
    48e8:	cmn	x0, #0x1
    48ec:	b.eq	4aa8 <PyThread_acquire_lock@plt+0x20e8>  // b.none
    48f0:	str	x23, [sp, #64]
    48f4:	cmp	x20, #0x4
    48f8:	b.eq	4b54 <PyThread_acquire_lock@plt+0x2194>  // b.none
    48fc:	ldr	x23, [x19, #32]
    4900:	mov	x0, x22
    4904:	bl	2640 <EVP_get_digestbyname@plt>
    4908:	mov	x20, x0
    490c:	cbz	x0, 4c1c <PyThread_acquire_lock@plt+0x225c>
    4910:	ldr	x1, [sp, #144]
    4914:	mov	x19, #0x7fffffff            	// #2147483647
    4918:	cmp	x1, x19
    491c:	b.gt	4b9c <PyThread_acquire_lock@plt+0x21dc>
    4920:	ldr	x1, [sp, #224]
    4924:	cmp	x1, x19
    4928:	b.gt	4bb0 <PyThread_acquire_lock@plt+0x21f0>
    492c:	cmp	x21, #0x0
    4930:	b.le	4c08 <PyThread_acquire_lock@plt+0x2248>
    4934:	cmp	x21, x19
    4938:	b.gt	4bf4 <PyThread_acquire_lock@plt+0x2234>
    493c:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11350>
    4940:	ldr	x1, [x1, #4056]
    4944:	cmp	x23, x1
    4948:	b.eq	4b60 <PyThread_acquire_lock@plt+0x21a0>  // b.none
    494c:	mov	x0, x23
    4950:	bl	26d0 <PyLong_AsLong@plt>
    4954:	mov	x22, x0
    4958:	cmn	x0, #0x1
    495c:	b.eq	4b24 <PyThread_acquire_lock@plt+0x2164>  // b.none
    4960:	cmp	x0, #0x0
    4964:	b.le	4b2c <PyThread_acquire_lock@plt+0x216c>
    4968:	cmp	x0, x19
    496c:	b.gt	4b74 <PyThread_acquire_lock@plt+0x21b4>
    4970:	mov	x1, x22
    4974:	mov	x0, #0x0                   	// #0
    4978:	bl	2870 <PyBytes_FromStringAndSize@plt>
    497c:	mov	x19, x0
    4980:	cbz	x0, 4a94 <PyThread_acquire_lock@plt+0x20d4>
    4984:	bl	27b0 <PyEval_SaveThread@plt>
    4988:	mov	w4, w21
    498c:	ldr	w1, [sp, #144]
    4990:	mov	x21, x0
    4994:	ldr	w3, [sp, #224]
    4998:	ldr	x0, [sp, #128]
    499c:	mov	x5, x20
    49a0:	ldr	x2, [sp, #208]
    49a4:	mov	w6, w22
    49a8:	add	x7, x19, #0x20
    49ac:	bl	2540 <PKCS5_PBKDF2_HMAC@plt>
    49b0:	mov	w20, w0
    49b4:	mov	x0, x21
    49b8:	bl	2770 <PyEval_RestoreThread@plt>
    49bc:	cbz	w20, 4bc4 <PyThread_acquire_lock@plt+0x2204>
    49c0:	ldp	x21, x22, [sp, #48]
    49c4:	ldr	x23, [sp, #64]
    49c8:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    49cc:	stp	xzr, xzr, [sp, #128]
    49d0:	sub	x0, x2, #0x4
    49d4:	mov	x20, x2
    49d8:	stp	xzr, xzr, [sp, #144]
    49dc:	cmp	x0, #0x1
    49e0:	stp	xzr, xzr, [sp, #160]
    49e4:	stp	xzr, xzr, [sp, #176]
    49e8:	stp	xzr, xzr, [sp, #192]
    49ec:	stp	xzr, xzr, [sp, #208]
    49f0:	stp	xzr, xzr, [sp, #224]
    49f4:	stp	xzr, xzr, [sp, #240]
    49f8:	stp	xzr, xzr, [sp, #256]
    49fc:	stp	xzr, xzr, [sp, #272]
    4a00:	b.hi	4804 <PyThread_acquire_lock@plt+0x1e44>  // b.pmore
    4a04:	cbz	x19, 4804 <PyThread_acquire_lock@plt+0x1e44>
    4a08:	ldr	x0, [x19]
    4a0c:	ldr	x1, [x0, #8]
    4a10:	ldr	x1, [x1, #168]
    4a14:	tbnz	w1, #28, 4848 <PyThread_acquire_lock@plt+0x1e88>
    4a18:	mov	x3, x0
    4a1c:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    4a20:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4a24:	add	x2, x2, #0xf80
    4a28:	add	x1, x1, #0x268
    4a2c:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    4a30:	mov	x19, #0x0                   	// #0
    4a34:	add	x0, x0, #0x280
    4a38:	bl	29b0 <_PyArg_BadArgument@plt>
    4a3c:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4a40:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4a44:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4a48:	add	x1, x1, #0xfa0
    4a4c:	mov	x19, #0x0                   	// #0
    4a50:	ldr	x0, [x0, #3984]
    4a54:	ldr	x0, [x0]
    4a58:	bl	2920 <PyErr_SetString@plt>
    4a5c:	ldp	x21, x22, [sp, #48]
    4a60:	ldr	x0, [sp, #136]
    4a64:	cbz	x0, 4a70 <PyThread_acquire_lock@plt+0x20b0>
    4a68:	add	x0, sp, #0x80
    4a6c:	bl	2970 <PyBuffer_Release@plt>
    4a70:	ldr	x0, [sp, #216]
    4a74:	cbz	x0, 4a80 <PyThread_acquire_lock@plt+0x20c0>
    4a78:	add	x0, sp, #0xd0
    4a7c:	bl	2970 <PyBuffer_Release@plt>
    4a80:	mov	x0, x19
    4a84:	ldp	x29, x30, [sp, #16]
    4a88:	ldp	x19, x20, [sp, #32]
    4a8c:	add	sp, sp, #0x120
    4a90:	ret
    4a94:	ldp	x21, x22, [sp, #48]
    4a98:	ldr	x23, [sp, #64]
    4a9c:	nop
    4aa0:	mov	x19, #0x0                   	// #0
    4aa4:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4aa8:	bl	2720 <PyErr_Occurred@plt>
    4aac:	cbz	x0, 48f0 <PyThread_acquire_lock@plt+0x1f30>
    4ab0:	mov	x19, #0x0                   	// #0
    4ab4:	ldp	x21, x22, [sp, #48]
    4ab8:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4abc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4ac0:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4ac4:	mov	x19, #0x0                   	// #0
    4ac8:	add	x1, x1, #0xb0
    4acc:	ldr	x0, [x0, #4000]
    4ad0:	ldr	x0, [x0]
    4ad4:	bl	2920 <PyErr_SetString@plt>
    4ad8:	ldp	x21, x22, [sp, #48]
    4adc:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4ae0:	ldr	x3, [x19, #8]
    4ae4:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    4ae8:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4aec:	add	x2, x2, #0xf38
    4af0:	add	x1, x1, #0x48
    4af4:	adrp	x0, 5000 <PyInit__hashlib@@Base+0x350>
    4af8:	mov	x19, #0x0                   	// #0
    4afc:	add	x0, x0, #0x280
    4b00:	bl	29b0 <_PyArg_BadArgument@plt>
    4b04:	ldp	x21, x22, [sp, #48]
    4b08:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4b0c:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    4b10:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4b14:	add	x2, x2, #0xf38
    4b18:	add	x1, x1, #0x68
    4b1c:	ldr	x3, [x19, #16]
    4b20:	b	4af4 <PyThread_acquire_lock@plt+0x2134>
    4b24:	bl	2720 <PyErr_Occurred@plt>
    4b28:	cbnz	x0, 4a94 <PyThread_acquire_lock@plt+0x20d4>
    4b2c:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4b30:	add	x1, x1, #0x2d8
    4b34:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4b38:	mov	x19, #0x0                   	// #0
    4b3c:	ldr	x0, [x0, #3984]
    4b40:	ldr	x0, [x0]
    4b44:	bl	2920 <PyErr_SetString@plt>
    4b48:	ldp	x21, x22, [sp, #48]
    4b4c:	ldr	x23, [sp, #64]
    4b50:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4b54:	adrp	x23, 16000 <PyInit__hashlib@@Base+0x11350>
    4b58:	ldr	x23, [x23, #4056]
    4b5c:	b	4900 <PyThread_acquire_lock@plt+0x1f40>
    4b60:	bl	26c0 <EVP_MD_size@plt>
    4b64:	sxtw	x22, w0
    4b68:	cmp	x22, #0x0
    4b6c:	b.gt	4970 <PyThread_acquire_lock@plt+0x1fb0>
    4b70:	b	4b2c <PyThread_acquire_lock@plt+0x216c>
    4b74:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4b78:	add	x1, x1, #0x300
    4b7c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4b80:	mov	x19, #0x0                   	// #0
    4b84:	ldr	x0, [x0, #4064]
    4b88:	ldr	x0, [x0]
    4b8c:	bl	2920 <PyErr_SetString@plt>
    4b90:	ldp	x21, x22, [sp, #48]
    4b94:	ldr	x23, [sp, #64]
    4b98:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4b9c:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4ba0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4ba4:	add	x1, x1, #0xd8
    4ba8:	mov	x19, #0x0                   	// #0
    4bac:	b	4b84 <PyThread_acquire_lock@plt+0x21c4>
    4bb0:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4bb4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4bb8:	add	x1, x1, #0x108
    4bbc:	mov	x19, #0x0                   	// #0
    4bc0:	b	4b84 <PyThread_acquire_lock@plt+0x21c4>
    4bc4:	ldr	x0, [x19]
    4bc8:	sub	x0, x0, #0x1
    4bcc:	str	x0, [x19]
    4bd0:	cbz	x0, 4c30 <PyThread_acquire_lock@plt+0x2270>
    4bd4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4bd8:	mov	x19, #0x0                   	// #0
    4bdc:	ldr	x0, [x0, #3984]
    4be0:	ldr	x0, [x0]
    4be4:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    4be8:	ldp	x21, x22, [sp, #48]
    4bec:	ldr	x23, [sp, #64]
    4bf0:	b	4a60 <PyThread_acquire_lock@plt+0x20a0>
    4bf4:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4bf8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4bfc:	add	x1, x1, #0x2b8
    4c00:	mov	x19, #0x0                   	// #0
    4c04:	b	4b84 <PyThread_acquire_lock@plt+0x21c4>
    4c08:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4c0c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4c10:	add	x1, x1, #0x290
    4c14:	mov	x19, #0x0                   	// #0
    4c18:	b	4b3c <PyThread_acquire_lock@plt+0x217c>
    4c1c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4c20:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x11350>
    4c24:	add	x1, x1, #0xf20
    4c28:	mov	x19, #0x0                   	// #0
    4c2c:	b	4b3c <PyThread_acquire_lock@plt+0x217c>
    4c30:	mov	x0, x19
    4c34:	bl	28e0 <_Py_Dealloc@plt>
    4c38:	b	4bd4 <PyThread_acquire_lock@plt+0x2214>
    4c3c:	nop
    4c40:	cbz	x0, 4cac <PyThread_acquire_lock@plt+0x22ec>
    4c44:	stp	x29, x30, [sp, #-32]!
    4c48:	mov	x29, sp
    4c4c:	stp	x19, x20, [sp, #16]
    4c50:	mov	x20, x3
    4c54:	bl	2b98 <PyThread_acquire_lock@plt+0x1d8>
    4c58:	mov	x19, x0
    4c5c:	cbz	x0, 4c98 <PyThread_acquire_lock@plt+0x22d8>
    4c60:	mov	x1, x0
    4c64:	ldr	x0, [x20]
    4c68:	bl	2850 <PySet_Add@plt>
    4c6c:	cbz	w0, 4c78 <PyThread_acquire_lock@plt+0x22b8>
    4c70:	mov	w0, #0x1                   	// #1
    4c74:	str	w0, [x20, #8]
    4c78:	ldr	x0, [x19]
    4c7c:	sub	x0, x0, #0x1
    4c80:	str	x0, [x19]
    4c84:	cbnz	x0, 4ca0 <PyThread_acquire_lock@plt+0x22e0>
    4c88:	mov	x0, x19
    4c8c:	ldp	x19, x20, [sp, #16]
    4c90:	ldp	x29, x30, [sp], #32
    4c94:	b	28e0 <_Py_Dealloc@plt>
    4c98:	mov	w0, #0x1                   	// #1
    4c9c:	str	w0, [x20, #8]
    4ca0:	ldp	x19, x20, [sp, #16]
    4ca4:	ldp	x29, x30, [sp], #32
    4ca8:	ret
    4cac:	ret

0000000000004cb0 <PyInit__hashlib@@Base>:
    4cb0:	stp	x29, x30, [sp, #-64]!
    4cb4:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x11350>
    4cb8:	mov	x29, sp
    4cbc:	ldr	x1, [x1, #4048]
    4cc0:	stp	x19, x20, [sp, #16]
    4cc4:	str	x21, [sp, #32]
    4cc8:	adrp	x21, 17000 <PyInit__hashlib@@Base+0x12350>
    4ccc:	add	x20, x21, #0x260
    4cd0:	mov	x0, x20
    4cd4:	str	x1, [x20, #8]
    4cd8:	bl	25a0 <PyType_Ready@plt>
    4cdc:	tbnz	w0, #31, 4d98 <PyInit__hashlib@@Base+0xe8>
    4ce0:	add	x0, x20, #0x420
    4ce4:	mov	w1, #0x3f5                 	// #1013
    4ce8:	bl	2910 <PyModule_Create2@plt>
    4cec:	mov	x19, x0
    4cf0:	cbz	x0, 4d98 <PyInit__hashlib@@Base+0xe8>
    4cf4:	mov	x0, #0x0                   	// #0
    4cf8:	bl	27a0 <PyFrozenSet_New@plt>
    4cfc:	str	x0, [sp, #48]
    4d00:	cbz	x0, 4d88 <PyInit__hashlib@@Base+0xd8>
    4d04:	add	x1, sp, #0x30
    4d08:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    4d0c:	add	x0, x0, #0xc40
    4d10:	str	wzr, [sp, #56]
    4d14:	bl	2710 <EVP_MD_do_all@plt>
    4d18:	ldr	w0, [sp, #56]
    4d1c:	cbnz	w0, 4d70 <PyInit__hashlib@@Base+0xc0>
    4d20:	ldr	x2, [sp, #48]
    4d24:	cbz	x2, 4d88 <PyInit__hashlib@@Base+0xd8>
    4d28:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4d2c:	mov	x0, x19
    4d30:	add	x1, x1, #0x320
    4d34:	bl	2520 <PyModule_AddObject@plt>
    4d38:	cbnz	w0, 4d88 <PyInit__hashlib@@Base+0xd8>
    4d3c:	ldr	x3, [x21, #608]
    4d40:	mov	x2, x20
    4d44:	mov	x0, x19
    4d48:	adrp	x1, 5000 <PyInit__hashlib@@Base+0x350>
    4d4c:	add	x3, x3, #0x1
    4d50:	add	x1, x1, #0x338
    4d54:	str	x3, [x21, #608]
    4d58:	bl	2520 <PyModule_AddObject@plt>
    4d5c:	mov	x0, x19
    4d60:	ldp	x19, x20, [sp, #16]
    4d64:	ldr	x21, [sp, #32]
    4d68:	ldp	x29, x30, [sp], #64
    4d6c:	ret
    4d70:	ldr	x0, [sp, #48]
    4d74:	ldr	x1, [x0]
    4d78:	sub	x1, x1, #0x1
    4d7c:	str	x1, [x0]
    4d80:	cbnz	x1, 4d88 <PyInit__hashlib@@Base+0xd8>
    4d84:	bl	28e0 <_Py_Dealloc@plt>
    4d88:	ldr	x0, [x19]
    4d8c:	sub	x0, x0, #0x1
    4d90:	str	x0, [x19]
    4d94:	cbz	x0, 4db0 <PyInit__hashlib@@Base+0x100>
    4d98:	mov	x19, #0x0                   	// #0
    4d9c:	mov	x0, x19
    4da0:	ldp	x19, x20, [sp, #16]
    4da4:	ldr	x21, [sp, #32]
    4da8:	ldp	x29, x30, [sp], #64
    4dac:	ret
    4db0:	mov	x0, x19
    4db4:	mov	x19, #0x0                   	// #0
    4db8:	bl	28e0 <_Py_Dealloc@plt>
    4dbc:	b	4d9c <PyInit__hashlib@@Base+0xec>

Disassembly of section .fini:

0000000000004dc0 <.fini>:
    4dc0:	stp	x29, x30, [sp, #-16]!
    4dc4:	mov	x29, sp
    4dc8:	ldp	x29, x30, [sp], #16
    4dcc:	ret
