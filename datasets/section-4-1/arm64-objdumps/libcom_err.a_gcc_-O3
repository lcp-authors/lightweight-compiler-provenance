In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_gcc_-O3:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_debug>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <init_debug>
  10:	ldr	w19, [x20]
  14:	tbz	w19, #15, 24 <init_debug+0x24>
  18:	ldp	x19, x20, [sp, #16]
  1c:	ldp	x29, x30, [sp], #64
  20:	ret
  24:	adrp	x0, 0 <init_debug>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <getenv>
  30:	cbz	x0, 70 <init_debug+0x70>
  34:	add	x1, sp, #0x38
  38:	mov	w2, #0x0                   	// #0
  3c:	bl	0 <strtoul>
  40:	mov	w19, w0
  44:	ldr	x1, [sp, #56]
  48:	ldrb	w0, [x1]
  4c:	cbz	w0, 64 <init_debug+0x64>
  50:	mov	w0, #0x8000                	// #32768
  54:	str	w0, [x20]
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	bl	0 <__errno_location>
  68:	ldr	w0, [x0]
  6c:	cbnz	w0, 50 <init_debug+0x50>
  70:	orr	w19, w19, #0x8000
  74:	str	w19, [x20]
  78:	str	x21, [sp, #32]
  7c:	cmp	w19, #0x8, lsl #12
  80:	add	x21, x20, #0x0
  84:	b.eq	fc <init_debug+0xfc>  // b.none
  88:	bl	0 <getuid>
  8c:	mov	w19, w0
  90:	bl	0 <geteuid>
  94:	cmp	w19, w0
  98:	b.ne	10c <init_debug+0x10c>  // b.any
  9c:	bl	0 <getgid>
  a0:	mov	w19, w0
  a4:	bl	0 <getegid>
  a8:	cmp	w19, w0
  ac:	b.ne	10c <init_debug+0x10c>  // b.any
  b0:	mov	w4, #0x0                   	// #0
  b4:	mov	w3, #0x0                   	// #0
  b8:	mov	w2, #0x0                   	// #0
  bc:	mov	w1, #0x0                   	// #0
  c0:	mov	w0, #0x3                   	// #3
  c4:	bl	0 <prctl>
  c8:	cbz	w0, 10c <init_debug+0x10c>
  cc:	adrp	x0, 0 <init_debug>
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <secure_getenv>
  d8:	cbz	x0, 10c <init_debug+0x10c>
  dc:	adrp	x1, 0 <init_debug>
  e0:	add	x1, x1, #0x0
  e4:	bl	0 <fopen>
  e8:	str	x0, [x21, #8]
  ec:	cbz	x0, 17c <init_debug+0x17c>
  f0:	bl	0 <fileno>
  f4:	mov	w19, w0
  f8:	tbz	w0, #31, 114 <init_debug+0x114>
  fc:	ldr	x21, [sp, #32]
 100:	ldp	x19, x20, [sp, #16]
 104:	ldp	x29, x30, [sp], #64
 108:	ret
 10c:	ldr	x0, [x21, #8]
 110:	b	ec <init_debug+0xec>
 114:	mov	w1, #0x1                   	// #1
 118:	bl	0 <fcntl>
 11c:	tbz	w0, #31, 160 <init_debug+0x160>
 120:	bl	0 <__errno_location>
 124:	ldr	w0, [x0]
 128:	ldr	x19, [x21, #8]
 12c:	bl	0 <strerror>
 130:	mov	x2, x0
 134:	adrp	x1, 0 <init_debug>
 138:	mov	x0, x19
 13c:	add	x1, x1, #0x0
 140:	bl	0 <fprintf>
 144:	ldr	x0, [x21, #8]
 148:	bl	0 <fclose>
 14c:	str	xzr, [x21, #8]
 150:	mov	w0, #0x8000                	// #32768
 154:	str	w0, [x20]
 158:	ldr	x21, [sp, #32]
 15c:	b	18 <init_debug+0x18>
 160:	orr	w2, w0, #0x1
 164:	mov	w1, #0x2                   	// #2
 168:	mov	w0, w19
 16c:	bl	0 <fcntl>
 170:	tbnz	w0, #31, 120 <init_debug+0x120>
 174:	ldr	x21, [sp, #32]
 178:	b	100 <init_debug+0x100>
 17c:	adrp	x1, 0 <init_debug>
 180:	adrp	x0, 0 <init_debug>
 184:	add	x1, x1, #0x0
 188:	add	x0, x0, #0x0
 18c:	bl	0 <fopen>
 190:	str	x0, [x21, #8]
 194:	cbnz	x0, f0 <init_debug+0xf0>
 198:	mov	w0, #0x8000                	// #32768
 19c:	str	w0, [x20]
 1a0:	ldp	x19, x20, [sp, #16]
 1a4:	ldr	x21, [sp, #32]
 1a8:	ldp	x29, x30, [sp], #64
 1ac:	ret

00000000000001b0 <et_list_lock>:
 1b0:	stp	x29, x30, [sp, #-32]!
 1b4:	mov	x29, sp
 1b8:	str	x19, [sp, #16]
 1bc:	adrp	x19, 0 <init_debug>
 1c0:	add	x19, x19, #0x0
 1c4:	ldr	w0, [x19, #48]
 1c8:	cbz	w0, 1dc <et_list_lock+0x2c>
 1cc:	add	x0, x19, #0x10
 1d0:	ldr	x19, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #32
 1d8:	b	0 <sem_wait>
 1dc:	bl	0 <init_debug>
 1e0:	add	x0, x19, #0x10
 1e4:	ldr	x19, [sp, #16]
 1e8:	ldp	x29, x30, [sp], #32
 1ec:	b	0 <sem_wait>

00000000000001f0 <et_list_unlock>:
 1f0:	adrp	x0, 0 <init_debug>
 1f4:	add	x0, x0, #0x0
 1f8:	ldr	w1, [x0, #48]
 1fc:	cbnz	w1, 208 <et_list_unlock+0x18>
 200:	mov	w0, #0x0                   	// #0
 204:	ret
 208:	add	x0, x0, #0x10
 20c:	b	0 <sem_post>

0000000000000210 <set_com_err_gettext>:
 210:	adrp	x1, 0 <init_debug>
 214:	add	x1, x1, #0x0
 218:	mov	x2, x0
 21c:	ldr	x0, [x1, #56]
 220:	str	x2, [x1, #56]
 224:	ret

0000000000000228 <error_message>:
 228:	stp	x29, x30, [sp, #-48]!
 22c:	mov	x29, sp
 230:	stp	x19, x20, [sp, #16]
 234:	ands	x19, x0, #0xffffffffffffff00
 238:	stp	x21, x22, [sp, #32]
 23c:	and	w21, w0, #0xff
 240:	b.ne	268 <error_message+0x40>  // b.any
 244:	mov	w0, w21
 248:	bl	0 <strerror>
 24c:	mov	x20, x0
 250:	cbz	x0, 41c <error_message+0x1f4>
 254:	mov	x0, x20
 258:	ldp	x19, x20, [sp, #16]
 25c:	ldp	x21, x22, [sp, #32]
 260:	ldp	x29, x30, [sp], #48
 264:	ret
 268:	adrp	x22, 0 <init_debug>
 26c:	add	x22, x22, #0x0
 270:	and	x20, x0, #0xff
 274:	ldr	w0, [x22, #48]
 278:	cbz	w0, 404 <error_message+0x1dc>
 27c:	add	x0, x22, #0x10
 280:	bl	0 <sem_wait>
 284:	ldr	x0, [x22, #64]
 288:	cbnz	x0, 3a8 <error_message+0x180>
 28c:	nop
 290:	ldr	w3, [x22, #48]
 294:	ldr	x0, [x22, #72]
 298:	cbnz	x0, 2a8 <error_message+0x80>
 29c:	b	2c8 <error_message+0xa0>
 2a0:	ldr	x0, [x0]
 2a4:	cbz	x0, 2c8 <error_message+0xa0>
 2a8:	ldr	x2, [x0, #8]
 2ac:	ldr	x1, [x2, #8]
 2b0:	eor	x1, x19, x1
 2b4:	tst	x1, #0xffffff
 2b8:	b.ne	2a0 <error_message+0x78>  // b.any
 2bc:	ldr	w0, [x2, #16]
 2c0:	cmp	w0, w21
 2c4:	b.gt	3cc <error_message+0x1a4>
 2c8:	cbnz	w3, 444 <error_message+0x21c>
 2cc:	mrs	x20, tpidr_el0
 2d0:	adrp	x1, 0 <init_debug>
 2d4:	add	x1, x1, #0x0
 2d8:	add	x22, x20, #0x0, lsl #12
 2dc:	add	x22, x22, #0x0
 2e0:	mov	x0, x19
 2e4:	ldr	x2, [x1]
 2e8:	str	x2, [x22]
 2ec:	ldur	x1, [x1, #6]
 2f0:	stur	x1, [x22, #6]
 2f4:	bl	0 <error_table_name>
 2f8:	mov	x19, x0
 2fc:	mov	x0, x22
 300:	bl	0 <strlen>
 304:	mov	x1, x19
 308:	add	x0, x22, x0
 30c:	bl	0 <stpcpy>
 310:	mov	w1, #0x20                  	// #32
 314:	strh	w1, [x0]
 318:	add	x1, x20, #0x0, lsl #12
 31c:	add	x1, x1, #0x0
 320:	ldrb	w0, [x1]
 324:	cbz	w0, 330 <error_message+0x108>
 328:	ldrb	w2, [x1, #1]!
 32c:	cbnz	w2, 328 <error_message+0x100>
 330:	cmp	w21, #0x63
 334:	b.le	3f8 <error_message+0x1d0>
 338:	mov	w0, #0x851f                	// #34079
 33c:	mov	w2, #0x64                  	// #100
 340:	movk	w0, #0x51eb, lsl #16
 344:	umull	x0, w21, w0
 348:	lsr	x0, x0, #37
 34c:	add	w3, w0, #0x30
 350:	strb	w3, [x1], #1
 354:	msub	w21, w0, w2, w21
 358:	mov	w0, #0xcccd                	// #52429
 35c:	movk	w0, #0xcccc, lsl #16
 360:	umull	x0, w21, w0
 364:	lsr	x0, x0, #35
 368:	add	w2, w0, #0x30
 36c:	strb	w2, [x1], #1
 370:	add	w0, w0, w0, lsl #2
 374:	sub	w21, w21, w0, lsl #1
 378:	add	w21, w21, #0x30
 37c:	strb	w21, [x1]
 380:	strb	wzr, [x1, #1]
 384:	add	x20, x20, #0x0, lsl #12
 388:	add	x20, x20, #0x0
 38c:	mov	x0, x20
 390:	ldp	x19, x20, [sp, #16]
 394:	ldp	x21, x22, [sp, #32]
 398:	ldp	x29, x30, [sp], #48
 39c:	ret
 3a0:	ldr	x0, [x0]
 3a4:	cbz	x0, 290 <error_message+0x68>
 3a8:	ldr	x2, [x0, #8]
 3ac:	ldr	x1, [x2, #8]
 3b0:	eor	x1, x19, x1
 3b4:	tst	x1, #0xffffff
 3b8:	b.ne	3a0 <error_message+0x178>  // b.any
 3bc:	ldr	w0, [x2, #16]
 3c0:	ldr	w3, [x22, #48]
 3c4:	cmp	w0, w21
 3c8:	b.le	294 <error_message+0x6c>
 3cc:	ldr	x0, [x2]
 3d0:	ldr	x20, [x0, x20, lsl #3]
 3d4:	cbnz	w3, 450 <error_message+0x228>
 3d8:	ldr	x1, [x22, #56]
 3dc:	cbz	x1, 254 <error_message+0x2c>
 3e0:	mov	x0, x20
 3e4:	mov	x16, x1
 3e8:	ldp	x19, x20, [sp, #16]
 3ec:	ldp	x21, x22, [sp, #32]
 3f0:	ldp	x29, x30, [sp], #48
 3f4:	br	x16
 3f8:	cmp	w21, #0x9
 3fc:	b.le	378 <error_message+0x150>
 400:	b	358 <error_message+0x130>
 404:	bl	0 <init_debug>
 408:	add	x0, x22, #0x10
 40c:	bl	0 <sem_wait>
 410:	ldr	x0, [x22, #64]
 414:	cbnz	x0, 3a8 <error_message+0x180>
 418:	b	290 <error_message+0x68>
 41c:	mrs	x20, tpidr_el0
 420:	adrp	x0, 0 <init_debug>
 424:	add	x0, x0, #0x0
 428:	add	x1, x20, #0x0, lsl #12
 42c:	add	x1, x1, #0x0
 430:	ldr	x2, [x0]
 434:	str	x2, [x1]
 438:	ldur	x0, [x0, #6]
 43c:	stur	x0, [x1, #6]
 440:	b	318 <error_message+0xf0>
 444:	add	x0, x22, #0x10
 448:	bl	0 <sem_post>
 44c:	b	2cc <error_message+0xa4>
 450:	add	x0, x22, #0x10
 454:	bl	0 <sem_post>
 458:	b	3d8 <error_message+0x1b0>
 45c:	nop

0000000000000460 <add_error_table>:
 460:	stp	x29, x30, [sp, #-48]!
 464:	mov	x29, sp
 468:	stp	x19, x20, [sp, #16]
 46c:	stp	x21, x22, [sp, #32]
 470:	mov	x21, x0
 474:	mov	x0, #0x10                  	// #16
 478:	bl	0 <malloc>
 47c:	cbz	x0, 550 <add_error_table+0xf0>
 480:	adrp	x22, 0 <init_debug>
 484:	add	x20, x22, #0x0
 488:	mov	x19, x0
 48c:	ldr	w0, [x20, #48]
 490:	cbz	w0, 548 <add_error_table+0xe8>
 494:	add	x0, x20, #0x10
 498:	bl	0 <sem_wait>
 49c:	cbnz	w0, 524 <add_error_table+0xc4>
 4a0:	ldr	x0, [x20, #72]
 4a4:	stp	x0, x21, [x19]
 4a8:	str	x19, [x20, #72]
 4ac:	bl	0 <init_debug>
 4b0:	ldr	w0, [x22]
 4b4:	tbnz	w0, #0, 4d8 <add_error_table+0x78>
 4b8:	ldr	w0, [x20, #48]
 4bc:	mov	x19, #0x0                   	// #0
 4c0:	cbnz	w0, 508 <add_error_table+0xa8>
 4c4:	mov	x0, x19
 4c8:	ldp	x19, x20, [sp, #16]
 4cc:	ldp	x21, x22, [sp, #32]
 4d0:	ldp	x29, x30, [sp], #48
 4d4:	ret
 4d8:	ldr	x0, [x21, #8]
 4dc:	ldr	x19, [x20, #8]
 4e0:	bl	0 <error_table_name>
 4e4:	mov	x2, x0
 4e8:	mov	x3, x21
 4ec:	mov	x0, x19
 4f0:	adrp	x1, 0 <init_debug>
 4f4:	add	x1, x1, #0x0
 4f8:	bl	0 <fprintf>
 4fc:	mov	x19, #0x0                   	// #0
 500:	ldr	w0, [x20, #48]
 504:	cbz	w0, 4c4 <add_error_table+0x64>
 508:	add	x0, x20, #0x10
 50c:	bl	0 <sem_post>
 510:	mov	x0, x19
 514:	ldp	x19, x20, [sp, #16]
 518:	ldp	x21, x22, [sp, #32]
 51c:	ldp	x29, x30, [sp], #48
 520:	ret
 524:	mov	x0, x19
 528:	bl	0 <free>
 52c:	bl	0 <__errno_location>
 530:	ldrsw	x19, [x0]
 534:	ldp	x21, x22, [sp, #32]
 538:	mov	x0, x19
 53c:	ldp	x19, x20, [sp, #16]
 540:	ldp	x29, x30, [sp], #48
 544:	ret
 548:	bl	0 <init_debug>
 54c:	b	494 <add_error_table+0x34>
 550:	mov	x19, #0xc                   	// #12
 554:	b	4c4 <add_error_table+0x64>

0000000000000558 <remove_error_table>:
 558:	stp	x29, x30, [sp, #-48]!
 55c:	mov	x29, sp
 560:	stp	x19, x20, [sp, #16]
 564:	stp	x21, x22, [sp, #32]
 568:	adrp	x22, 0 <init_debug>
 56c:	add	x20, x22, #0x0
 570:	mov	x21, x0
 574:	ldr	w0, [x20, #48]
 578:	cbz	w0, 61c <remove_error_table+0xc4>
 57c:	add	x0, x20, #0x10
 580:	bl	0 <sem_wait>
 584:	cbnz	w0, 604 <remove_error_table+0xac>
 588:	ldr	x19, [x20, #72]
 58c:	bl	0 <init_debug>
 590:	cbz	x19, 5f4 <remove_error_table+0x9c>
 594:	mov	x3, #0x0                   	// #0
 598:	ldr	x4, [x21, #8]
 59c:	b	5ac <remove_error_table+0x54>
 5a0:	mov	x3, x19
 5a4:	mov	x19, x1
 5a8:	cbz	x1, 5f4 <remove_error_table+0x9c>
 5ac:	ldp	x1, x2, [x19]
 5b0:	ldr	x2, [x2, #8]
 5b4:	cmp	x2, x4
 5b8:	b.ne	5a0 <remove_error_table+0x48>  // b.any
 5bc:	cbz	x3, 694 <remove_error_table+0x13c>
 5c0:	str	x1, [x3]
 5c4:	mov	x0, x19
 5c8:	bl	0 <free>
 5cc:	ldr	w0, [x22]
 5d0:	tbnz	w0, #0, 66c <remove_error_table+0x114>
 5d4:	ldr	w0, [x20, #48]
 5d8:	mov	x19, #0x0                   	// #0
 5dc:	cbnz	w0, 628 <remove_error_table+0xd0>
 5e0:	mov	x0, x19
 5e4:	ldp	x19, x20, [sp, #16]
 5e8:	ldp	x21, x22, [sp, #32]
 5ec:	ldp	x29, x30, [sp], #48
 5f0:	ret
 5f4:	ldr	w0, [x22]
 5f8:	tbnz	w0, #0, 644 <remove_error_table+0xec>
 5fc:	ldr	w0, [x20, #48]
 600:	cbnz	w0, 624 <remove_error_table+0xcc>
 604:	mov	x19, #0x2                   	// #2
 608:	mov	x0, x19
 60c:	ldp	x19, x20, [sp, #16]
 610:	ldp	x21, x22, [sp, #32]
 614:	ldp	x29, x30, [sp], #48
 618:	ret
 61c:	bl	0 <init_debug>
 620:	b	57c <remove_error_table+0x24>
 624:	mov	x19, #0x2                   	// #2
 628:	add	x0, x20, #0x10
 62c:	bl	0 <sem_post>
 630:	mov	x0, x19
 634:	ldp	x19, x20, [sp, #16]
 638:	ldp	x21, x22, [sp, #32]
 63c:	ldp	x29, x30, [sp], #48
 640:	ret
 644:	ldr	x0, [x21, #8]
 648:	ldr	x19, [x20, #8]
 64c:	bl	0 <error_table_name>
 650:	mov	x2, x0
 654:	mov	x3, x21
 658:	mov	x0, x19
 65c:	adrp	x1, 0 <init_debug>
 660:	add	x1, x1, #0x0
 664:	bl	0 <fprintf>
 668:	b	5fc <remove_error_table+0xa4>
 66c:	ldr	x0, [x21, #8]
 670:	ldr	x19, [x20, #8]
 674:	bl	0 <error_table_name>
 678:	mov	x2, x0
 67c:	mov	x3, x21
 680:	mov	x0, x19
 684:	adrp	x1, 0 <init_debug>
 688:	add	x1, x1, #0x0
 68c:	bl	0 <fprintf>
 690:	b	5d4 <remove_error_table+0x7c>
 694:	str	x1, [x20, #72]
 698:	b	5c4 <remove_error_table+0x6c>
 69c:	nop

00000000000006a0 <add_to_error_table>:
 6a0:	stp	x29, x30, [sp, #-48]!
 6a4:	mov	x1, x0
 6a8:	mov	x0, #0x10                  	// #16
 6ac:	mov	x29, sp
 6b0:	stp	x21, x22, [sp, #32]
 6b4:	ldr	x22, [x1, #8]
 6b8:	bl	0 <malloc>
 6bc:	cbz	x0, 708 <add_to_error_table+0x68>
 6c0:	adrp	x21, 0 <init_debug>
 6c4:	stp	x19, x20, [sp, #16]
 6c8:	add	x20, x21, #0x0
 6cc:	mov	x19, x0
 6d0:	ldr	w0, [x20, #48]
 6d4:	cbz	w0, 768 <add_to_error_table+0xc8>
 6d8:	add	x0, x20, #0x10
 6dc:	bl	0 <sem_wait>
 6e0:	cbnz	w0, 754 <add_to_error_table+0xb4>
 6e4:	ldr	x0, [x20, #72]
 6e8:	stp	x0, x22, [x19]
 6ec:	str	x19, [x20, #72]
 6f0:	bl	0 <init_debug>
 6f4:	ldr	w0, [x21]
 6f8:	tbnz	w0, #0, 714 <add_to_error_table+0x74>
 6fc:	ldr	w0, [x20, #48]
 700:	cbnz	w0, 740 <add_to_error_table+0xa0>
 704:	ldp	x19, x20, [sp, #16]
 708:	ldp	x21, x22, [sp, #32]
 70c:	ldp	x29, x30, [sp], #48
 710:	ret
 714:	ldr	x0, [x22, #8]
 718:	ldr	x19, [x20, #8]
 71c:	bl	0 <error_table_name>
 720:	mov	x2, x0
 724:	mov	x3, x22
 728:	mov	x0, x19
 72c:	adrp	x1, 0 <init_debug>
 730:	add	x1, x1, #0x0
 734:	bl	0 <fprintf>
 738:	ldr	w0, [x20, #48]
 73c:	cbz	w0, 704 <add_to_error_table+0x64>
 740:	add	x0, x20, #0x10
 744:	ldp	x19, x20, [sp, #16]
 748:	ldp	x21, x22, [sp, #32]
 74c:	ldp	x29, x30, [sp], #48
 750:	b	0 <sem_post>
 754:	mov	x0, x19
 758:	ldp	x19, x20, [sp, #16]
 75c:	ldp	x21, x22, [sp, #32]
 760:	ldp	x29, x30, [sp], #48
 764:	b	0 <free>
 768:	bl	0 <init_debug>
 76c:	b	6d8 <add_to_error_table+0x38>

Disassembly of section .text.startup:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w2, #0x1                   	// #1
   8:	mov	w1, #0x0                   	// #0
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	adrp	x19, 0 <setup_et_lock>
  18:	add	x19, x19, #0x0
  1c:	add	x0, x19, #0x10
  20:	bl	0 <sem_init>
  24:	mov	w0, #0x1                   	// #1
  28:	str	w0, [x19, #48]
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret

Disassembly of section .text.exit:

0000000000000000 <fini_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x19, 0 <fini_et_lock>
  10:	add	x19, x19, #0x0
  14:	add	x0, x19, #0x10
  18:	bl	0 <sem_destroy>
  1c:	str	wzr, [x19, #48]
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	cmp	wzr, w0, lsr #26
   4:	lsr	w2, w0, #8
   8:	lsr	w0, w0, #26
   c:	b.eq	94 <error_table_name+0x94>  // b.none
  10:	sub	w3, w0, #0x1
  14:	adrp	x5, 0 <error_table_name>
  18:	add	x5, x5, #0x0
  1c:	adrp	x4, 0 <error_table_name>
  20:	add	x0, x4, #0x0
  24:	add	x1, x0, #0x1
  28:	ldrb	w3, [x5, w3, sxtw]
  2c:	strb	w3, [x4]
  30:	tst	w2, #0x3f000
  34:	ubfx	w3, w2, #12, #6
  38:	b.eq	50 <error_table_name+0x50>  // b.none
  3c:	sub	w3, w3, #0x1
  40:	adrp	x4, 0 <error_table_name>
  44:	add	x4, x4, #0x0
  48:	ldrb	w3, [x4, w3, sxtw]
  4c:	strb	w3, [x1], #1
  50:	tst	w2, #0xfc0
  54:	ubfx	w3, w2, #6, #6
  58:	b.eq	70 <error_table_name+0x70>  // b.none
  5c:	sub	w3, w3, #0x1
  60:	adrp	x4, 0 <error_table_name>
  64:	add	x4, x4, #0x0
  68:	ldrb	w3, [x4, w3, sxtw]
  6c:	strb	w3, [x1], #1
  70:	ands	w2, w2, #0x3f
  74:	b.eq	8c <error_table_name+0x8c>  // b.none
  78:	sub	w2, w2, #0x1
  7c:	adrp	x3, 0 <error_table_name>
  80:	add	x3, x3, #0x0
  84:	ldrb	w2, [x3, w2, sxtw]
  88:	strb	w2, [x1], #1
  8c:	strb	wzr, [x1]
  90:	ret
  94:	adrp	x4, 0 <error_table_name>
  98:	add	x0, x4, #0x0
  9c:	mov	x1, x0
  a0:	b	30 <error_table_name+0x30>

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	cmp	w2, #0x0
   4:	ccmp	x0, #0x0, #0x4, ne  // ne = any
   8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   c:	b.ne	18 <init_error_table+0x18>  // b.any
  10:	mov	w0, #0x0                   	// #0
  14:	ret
  18:	stp	x29, x30, [sp, #-48]!
  1c:	mov	x29, sp
  20:	stp	x19, x20, [sp, #16]
  24:	mov	w19, w2
  28:	mov	x20, x1
  2c:	str	x21, [sp, #32]
  30:	mov	x21, x0
  34:	mov	x0, #0x28                  	// #40
  38:	bl	0 <malloc>
  3c:	mov	x3, x0
  40:	cbz	x0, 78 <init_error_table+0x78>
  44:	adrp	x1, 0 <_et_dynamic_list>
  48:	add	x2, x0, #0x10
  4c:	stp	x2, x21, [x3, #8]
  50:	mov	w0, #0x0                   	// #0
  54:	ldr	x2, [x1]
  58:	str	x3, [x1]
  5c:	str	x2, [x3]
  60:	str	x20, [x3, #24]
  64:	str	w19, [x3, #32]
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldr	x21, [sp, #32]
  70:	ldp	x29, x30, [sp], #48
  74:	ret
  78:	mov	w0, #0xc                   	// #12
  7c:	b	68 <init_error_table+0x68>

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <stderr>
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x0
  1c:	ldr	x0, [x19]
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x1
  28:	mov	x24, x3
  2c:	bl	0 <fileno>
  30:	mov	w22, w0
  34:	cbz	x21, 5c <default_com_err_proc+0x5c>
  38:	ldr	x1, [x19]
  3c:	mov	x0, x21
  40:	bl	0 <fputs>
  44:	ldr	x3, [x19]
  48:	adrp	x0, 0 <default_com_err_proc>
  4c:	mov	x2, #0x2                   	// #2
  50:	add	x0, x0, #0x0
  54:	mov	x1, #0x1                   	// #1
  58:	bl	0 <fwrite>
  5c:	cbnz	x23, b8 <default_com_err_proc+0xb8>
  60:	cbz	x20, 84 <default_com_err_proc+0x84>
  64:	ldp	x6, x7, [x24]
  68:	mov	x1, x20
  6c:	ldp	x4, x5, [x24, #16]
  70:	add	x2, sp, #0x40
  74:	ldr	x0, [x19]
  78:	stp	x6, x7, [sp, #64]
  7c:	stp	x4, x5, [sp, #80]
  80:	bl	0 <vfprintf>
  84:	mov	w0, w22
  88:	bl	0 <isatty>
  8c:	cbnz	w0, d8 <default_com_err_proc+0xd8>
  90:	ldr	x1, [x19]
  94:	mov	w0, #0xa                   	// #10
  98:	bl	0 <fputc>
  9c:	ldr	x0, [x19]
  a0:	bl	0 <fflush>
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldp	x21, x22, [sp, #32]
  ac:	ldp	x23, x24, [sp, #48]
  b0:	ldp	x29, x30, [sp], #160
  b4:	ret
  b8:	mov	x0, x23
  bc:	bl	0 <error_message>
  c0:	ldr	x1, [x19]
  c4:	bl	0 <fputs>
  c8:	ldr	x1, [x19]
  cc:	mov	w0, #0x20                  	// #32
  d0:	bl	0 <fputc>
  d4:	b	60 <default_com_err_proc+0x60>
  d8:	mov	w0, w22
  dc:	add	x1, sp, #0x60
  e0:	bl	0 <tcgetattr>
  e4:	cbnz	w0, fc <default_com_err_proc+0xfc>
  e8:	ldr	w0, [sp, #100]
  ec:	mov	w1, #0x5                   	// #5
  f0:	and	w0, w0, w1
  f4:	cmp	w0, w1
  f8:	b.eq	90 <default_com_err_proc+0x90>  // b.none
  fc:	ldr	x1, [x19]
 100:	mov	w0, #0xd                   	// #13
 104:	bl	0 <fputc>
 108:	b	90 <default_com_err_proc+0x90>
 10c:	nop

0000000000000110 <com_err_va>:
 110:	mov	x4, x3
 114:	stp	x29, x30, [sp, #-48]!
 118:	adrp	x5, 0 <default_com_err_proc>
 11c:	mov	x29, sp
 120:	ldp	x6, x7, [x4]
 124:	stp	x6, x7, [sp, #16]
 128:	add	x3, sp, #0x10
 12c:	ldp	x6, x7, [x4, #16]
 130:	stp	x6, x7, [sp, #32]
 134:	ldr	x5, [x5]
 138:	blr	x5
 13c:	ldp	x29, x30, [sp], #48
 140:	ret
 144:	nop

0000000000000148 <com_err>:
 148:	stp	x29, x30, [sp, #-288]!
 14c:	adrp	x8, 0 <default_com_err_proc>
 150:	mov	x29, sp
 154:	ldr	x9, [x8]
 158:	str	q0, [sp, #112]
 15c:	str	q1, [sp, #128]
 160:	str	q2, [sp, #144]
 164:	str	q3, [sp, #160]
 168:	str	q4, [sp, #176]
 16c:	str	q5, [sp, #192]
 170:	str	q6, [sp, #208]
 174:	str	q7, [sp, #224]
 178:	stp	x3, x4, [sp, #248]
 17c:	stp	x5, x6, [sp, #264]
 180:	str	x7, [sp, #280]
 184:	cbz	x9, 1d0 <com_err+0x88>
 188:	add	x5, sp, #0xf0
 18c:	add	x6, sp, #0x120
 190:	mov	w4, #0xffffffd8            	// #-40
 194:	mov	w3, #0xffffff80            	// #-128
 198:	stp	x6, x6, [sp, #48]
 19c:	str	x5, [sp, #64]
 1a0:	stp	w4, w3, [sp, #72]
 1a4:	add	x3, sp, #0x10
 1a8:	ldp	x6, x7, [sp, #48]
 1ac:	stp	x6, x7, [sp, #16]
 1b0:	ldp	x4, x5, [sp, #64]
 1b4:	stp	x4, x5, [sp, #32]
 1b8:	ldr	x8, [x8]
 1bc:	stp	x6, x7, [sp, #80]
 1c0:	stp	x4, x5, [sp, #96]
 1c4:	blr	x8
 1c8:	ldp	x29, x30, [sp], #288
 1cc:	ret
 1d0:	adrp	x3, 0 <default_com_err_proc>
 1d4:	add	x3, x3, #0x0
 1d8:	str	x3, [x8]
 1dc:	b	188 <com_err+0x40>

00000000000001e0 <set_com_err_hook>:
 1e0:	mov	x1, x0
 1e4:	adrp	x3, 0 <default_com_err_proc>
 1e8:	cmp	x1, #0x0
 1ec:	adrp	x2, 0 <default_com_err_proc>
 1f0:	add	x2, x2, #0x0
 1f4:	ldr	x0, [x3]
 1f8:	csel	x1, x2, x1, eq  // eq = none
 1fc:	str	x1, [x3]
 200:	ret
 204:	nop

0000000000000208 <reset_com_err_hook>:
 208:	adrp	x2, 0 <default_com_err_proc>
 20c:	adrp	x1, 0 <default_com_err_proc>
 210:	add	x1, x1, #0x0
 214:	ldr	x0, [x2]
 218:	str	x1, [x2]
 21c:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbz	x0, 30 <com_right+0x30>
   4:	nop
   8:	ldr	x3, [x0, #8]
   c:	ldr	x2, [x3, #8]
  10:	cmp	x2, x1
  14:	b.gt	28 <com_right+0x28>
  18:	ldrsw	x4, [x3, #16]
  1c:	add	x4, x4, x2
  20:	cmp	x4, x1
  24:	b.gt	34 <com_right+0x34>
  28:	ldr	x0, [x0]
  2c:	cbnz	x0, 8 <com_right+0x8>
  30:	ret
  34:	ldr	x0, [x3]
  38:	sub	x1, x1, x2
  3c:	ldr	x0, [x0, x1, lsl #3]
  40:	ret
  44:	nop

0000000000000048 <com_right_r>:
  48:	cbz	x0, c0 <com_right_r+0x78>
  4c:	stp	x29, x30, [sp, #-32]!
  50:	mov	x7, x2
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	mov	x19, x3
  60:	ldr	x5, [x0, #8]
  64:	ldr	x4, [x5, #8]
  68:	cmp	x4, x1
  6c:	b.gt	80 <com_right_r+0x38>
  70:	ldrsw	x6, [x5, #16]
  74:	add	x6, x6, x4
  78:	cmp	x6, x1
  7c:	b.gt	94 <com_right_r+0x4c>
  80:	ldr	x0, [x0]
  84:	cbnz	x0, 60 <com_right_r+0x18>
  88:	ldr	x19, [sp, #16]
  8c:	ldp	x29, x30, [sp], #32
  90:	ret
  94:	ldr	x3, [x5]
  98:	sub	x1, x1, x4
  9c:	mov	x2, x19
  a0:	mov	x0, x7
  a4:	ldr	x1, [x3, x1, lsl #3]
  a8:	bl	0 <strncpy>
  ac:	add	x3, x0, x19
  b0:	sturb	wzr, [x3, #-1]
  b4:	ldr	x19, [sp, #16]
  b8:	ldp	x29, x30, [sp], #32
  bc:	ret
  c0:	ret
  c4:	nop

00000000000000c8 <initialize_error_table_r>:
  c8:	stp	x29, x30, [sp, #-48]!
  cc:	mov	x29, sp
  d0:	ldr	x4, [x0]
  d4:	stp	x19, x20, [sp, #16]
  d8:	mov	x19, x1
  dc:	stp	x21, x22, [sp, #32]
  e0:	mov	x20, x0
  e4:	mov	w21, w2
  e8:	mov	x22, x3
  ec:	cbnz	x4, 100 <initialize_error_table_r+0x38>
  f0:	b	124 <initialize_error_table_r+0x5c>
  f4:	ldr	x0, [x4]
  f8:	cbz	x0, 120 <initialize_error_table_r+0x58>
  fc:	mov	x4, x0
 100:	ldr	x0, [x4, #8]
 104:	ldr	x0, [x0]
 108:	cmp	x0, x19
 10c:	b.ne	f4 <initialize_error_table_r+0x2c>  // b.any
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x21, x22, [sp, #32]
 118:	ldp	x29, x30, [sp], #48
 11c:	ret
 120:	mov	x20, x4
 124:	mov	x0, #0x28                  	// #40
 128:	bl	0 <malloc>
 12c:	cbz	x0, 110 <initialize_error_table_r+0x48>
 130:	add	x1, x0, #0x10
 134:	stp	xzr, x1, [x0]
 138:	stp	x19, x22, [x0, #16]
 13c:	str	w21, [x0, #32]
 140:	str	x0, [x20]
 144:	ldp	x19, x20, [sp, #16]
 148:	ldp	x21, x22, [sp, #32]
 14c:	ldp	x29, x30, [sp], #48
 150:	ret
 154:	nop

0000000000000158 <free_error_table>:
 158:	cbz	x0, 18c <free_error_table+0x34>
 15c:	stp	x29, x30, [sp, #-32]!
 160:	mov	x29, sp
 164:	str	x19, [sp, #16]
 168:	mov	x19, x0
 16c:	nop
 170:	mov	x0, x19
 174:	ldr	x19, [x19]
 178:	bl	0 <free>
 17c:	cbnz	x19, 170 <free_error_table+0x18>
 180:	ldr	x19, [sp, #16]
 184:	ldp	x29, x30, [sp], #32
 188:	ret
 18c:	ret
