
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libffi.so.7.1.0_clang_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000018e0 <.init>:
    18e0:	stp	x29, x30, [sp, #-16]!
    18e4:	mov	x29, sp
    18e8:	bl	1b60 <unlink@plt+0x10>
    18ec:	ldp	x29, x30, [sp], #16
    18f0:	ret

Disassembly of section .plt:

0000000000001900 <memcpy@plt-0x20>:
    1900:	stp	x16, x30, [sp, #-16]!
    1904:	adrp	x16, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xff80>
    1908:	ldr	x17, [x16, #4088]
    190c:	add	x16, x16, #0xff8
    1910:	br	x17
    1914:	nop
    1918:	nop
    191c:	nop

0000000000001920 <memcpy@plt>:
    1920:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1924:	ldr	x17, [x16]
    1928:	add	x16, x16, #0x0
    192c:	br	x17

0000000000001930 <ffi_prep_closure_loc@plt>:
    1930:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1934:	ldr	x17, [x16, #8]
    1938:	add	x16, x16, #0x8
    193c:	br	x17

0000000000001940 <strlen@plt>:
    1940:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1944:	ldr	x17, [x16, #16]
    1948:	add	x16, x16, #0x10
    194c:	br	x17

0000000000001950 <__cxa_finalize@plt>:
    1950:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1954:	ldr	x17, [x16, #24]
    1958:	add	x16, x16, #0x18
    195c:	br	x17

0000000000001960 <statfs@plt>:
    1960:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1964:	ldr	x17, [x16, #32]
    1968:	add	x16, x16, #0x20
    196c:	br	x17

0000000000001970 <fclose@plt>:
    1970:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1974:	ldr	x17, [x16, #40]
    1978:	add	x16, x16, #0x28
    197c:	br	x17

0000000000001980 <fopen@plt>:
    1980:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1984:	ldr	x17, [x16, #48]
    1988:	add	x16, x16, #0x30
    198c:	br	x17

0000000000001990 <open@plt>:
    1990:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1994:	ldr	x17, [x16, #56]
    1998:	add	x16, x16, #0x38
    199c:	br	x17

00000000000019a0 <strncmp@plt>:
    19a0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19a4:	ldr	x17, [x16, #64]
    19a8:	add	x16, x16, #0x40
    19ac:	br	x17

00000000000019b0 <memset@plt>:
    19b0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19b4:	ldr	x17, [x16, #72]
    19b8:	add	x16, x16, #0x48
    19bc:	br	x17

00000000000019c0 <setmntent@plt>:
    19c0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19c4:	ldr	x17, [x16, #80]
    19c8:	add	x16, x16, #0x50
    19cc:	br	x17

00000000000019d0 <endmntent@plt>:
    19d0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19d4:	ldr	x17, [x16, #88]
    19d8:	add	x16, x16, #0x58
    19dc:	br	x17

00000000000019e0 <pthread_mutex_init@plt>:
    19e0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19e4:	ldr	x17, [x16, #96]
    19e8:	add	x16, x16, #0x60
    19ec:	br	x17

00000000000019f0 <close@plt>:
    19f0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    19f4:	ldr	x17, [x16, #104]
    19f8:	add	x16, x16, #0x68
    19fc:	br	x17

0000000000001a00 <__gmon_start__@plt>:
    1a00:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a04:	ldr	x17, [x16, #112]
    1a08:	add	x16, x16, #0x70
    1a0c:	br	x17

0000000000001a10 <write@plt>:
    1a10:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a14:	ldr	x17, [x16, #120]
    1a18:	add	x16, x16, #0x78
    1a1c:	br	x17

0000000000001a20 <abort@plt>:
    1a20:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a24:	ldr	x17, [x16, #128]
    1a28:	add	x16, x16, #0x80
    1a2c:	br	x17

0000000000001a30 <mkostemp@plt>:
    1a30:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a34:	ldr	x17, [x16, #136]
    1a38:	add	x16, x16, #0x88
    1a3c:	br	x17

0000000000001a40 <access@plt>:
    1a40:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a44:	ldr	x17, [x16, #144]
    1a48:	add	x16, x16, #0x90
    1a4c:	br	x17

0000000000001a50 <mmap@plt>:
    1a50:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a54:	ldr	x17, [x16, #152]
    1a58:	add	x16, x16, #0x98
    1a5c:	br	x17

0000000000001a60 <free@plt>:
    1a60:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a64:	ldr	x17, [x16, #160]
    1a68:	add	x16, x16, #0xa0
    1a6c:	br	x17

0000000000001a70 <ffi_ptrarray_to_raw@plt>:
    1a70:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a74:	ldr	x17, [x16, #168]
    1a78:	add	x16, x16, #0xa8
    1a7c:	br	x17

0000000000001a80 <hasmntopt@plt>:
    1a80:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a84:	ldr	x17, [x16, #176]
    1a88:	add	x16, x16, #0xb0
    1a8c:	br	x17

0000000000001a90 <strchr@plt>:
    1a90:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1a94:	ldr	x17, [x16, #184]
    1a98:	add	x16, x16, #0xb8
    1a9c:	br	x17

0000000000001aa0 <munmap@plt>:
    1aa0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1aa4:	ldr	x17, [x16, #192]
    1aa8:	add	x16, x16, #0xc0
    1aac:	br	x17

0000000000001ab0 <ffi_call@plt>:
    1ab0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ab4:	ldr	x17, [x16, #200]
    1ab8:	add	x16, x16, #0xc8
    1abc:	br	x17

0000000000001ac0 <sysconf@plt>:
    1ac0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ac4:	ldr	x17, [x16, #208]
    1ac8:	add	x16, x16, #0xd0
    1acc:	br	x17

0000000000001ad0 <getmntent_r@plt>:
    1ad0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ad4:	ldr	x17, [x16, #216]
    1ad8:	add	x16, x16, #0xd8
    1adc:	br	x17

0000000000001ae0 <ftruncate@plt>:
    1ae0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1ae4:	ldr	x17, [x16, #224]
    1ae8:	add	x16, x16, #0xe0
    1aec:	br	x17

0000000000001af0 <__errno_location@plt>:
    1af0:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1af4:	ldr	x17, [x16, #232]
    1af8:	add	x16, x16, #0xe8
    1afc:	br	x17

0000000000001b00 <getenv@plt>:
    1b00:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b04:	ldr	x17, [x16, #240]
    1b08:	add	x16, x16, #0xf0
    1b0c:	br	x17

0000000000001b10 <ffi_java_ptrarray_to_raw@plt>:
    1b10:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b14:	ldr	x17, [x16, #248]
    1b18:	add	x16, x16, #0xf8
    1b1c:	br	x17

0000000000001b20 <pthread_mutex_lock@plt>:
    1b20:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b24:	ldr	x17, [x16, #256]
    1b28:	add	x16, x16, #0x100
    1b2c:	br	x17

0000000000001b30 <__getdelim@plt>:
    1b30:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b34:	ldr	x17, [x16, #264]
    1b38:	add	x16, x16, #0x108
    1b3c:	br	x17

0000000000001b40 <pthread_mutex_unlock@plt>:
    1b40:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b44:	ldr	x17, [x16, #272]
    1b48:	add	x16, x16, #0x110
    1b4c:	br	x17

0000000000001b50 <unlink@plt>:
    1b50:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    1b54:	ldr	x17, [x16, #280]
    1b58:	add	x16, x16, #0x118
    1b5c:	br	x17

Disassembly of section .text:

0000000000001b60 <ffi_prep_cif@@LIBFFI_BASE_7.0-0x2b0>:
    1b60:	adrp	x0, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xff80>
    1b64:	ldr	x0, [x0, #4056]
    1b68:	cbz	x0, 1b70 <unlink@plt+0x20>
    1b6c:	b	1a00 <__gmon_start__@plt>
    1b70:	ret
    1b74:	nop
    1b78:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1b7c:	add	x0, x0, #0x160
    1b80:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    1b84:	add	x1, x1, #0x160
    1b88:	cmp	x1, x0
    1b8c:	b.eq	1ba4 <unlink@plt+0x54>  // b.none
    1b90:	adrp	x1, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xff80>
    1b94:	ldr	x1, [x1, #4040]
    1b98:	cbz	x1, 1ba4 <unlink@plt+0x54>
    1b9c:	mov	x16, x1
    1ba0:	br	x16
    1ba4:	ret
    1ba8:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1bac:	add	x0, x0, #0x160
    1bb0:	adrp	x1, 17000 <memcpy@GLIBC_2.17>
    1bb4:	add	x1, x1, #0x160
    1bb8:	sub	x1, x1, x0
    1bbc:	lsr	x2, x1, #63
    1bc0:	add	x1, x2, x1, asr #3
    1bc4:	cmp	xzr, x1, asr #1
    1bc8:	asr	x1, x1, #1
    1bcc:	b.eq	1be4 <unlink@plt+0x94>  // b.none
    1bd0:	adrp	x2, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xff80>
    1bd4:	ldr	x2, [x2, #4064]
    1bd8:	cbz	x2, 1be4 <unlink@plt+0x94>
    1bdc:	mov	x16, x2
    1be0:	br	x16
    1be4:	ret
    1be8:	stp	x29, x30, [sp, #-32]!
    1bec:	mov	x29, sp
    1bf0:	str	x19, [sp, #16]
    1bf4:	adrp	x19, 17000 <memcpy@GLIBC_2.17>
    1bf8:	ldrb	w0, [x19, #352]
    1bfc:	cbnz	w0, 1c24 <unlink@plt+0xd4>
    1c00:	adrp	x0, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xff80>
    1c04:	ldr	x0, [x0, #4048]
    1c08:	cbz	x0, 1c18 <unlink@plt+0xc8>
    1c0c:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    1c10:	ldr	x0, [x0, #288]
    1c14:	bl	1950 <__cxa_finalize@plt>
    1c18:	bl	1b78 <unlink@plt+0x28>
    1c1c:	mov	w0, #0x1                   	// #1
    1c20:	strb	w0, [x19, #352]
    1c24:	ldr	x19, [sp, #16]
    1c28:	ldp	x29, x30, [sp], #32
    1c2c:	ret
    1c30:	b	1ba8 <unlink@plt+0x58>
    1c34:	stp	x29, x30, [sp, #-48]!
    1c38:	stp	x22, x21, [sp, #16]
    1c3c:	stp	x20, x19, [sp, #32]
    1c40:	mov	x29, sp
    1c44:	cmp	w1, #0x1
    1c48:	b.ne	1cf4 <unlink@plt+0x1a4>  // b.any
    1c4c:	mov	w8, #0x1                   	// #1
    1c50:	stp	x6, x5, [x0, #8]
    1c54:	stp	w8, w4, [x0]
    1c58:	str	wzr, [x0, #28]
    1c5c:	ldr	x8, [x5]
    1c60:	mov	x20, x6
    1c64:	mov	w21, w4
    1c68:	mov	x19, x0
    1c6c:	cbz	x8, 1cfc <unlink@plt+0x1ac>
    1c70:	ldrh	w8, [x5, #10]
    1c74:	cmp	w8, #0xd
    1c78:	cset	w8, eq  // eq = none
    1c7c:	lsl	w22, w8, #3
    1c80:	cbnz	w21, 1cd0 <unlink@plt+0x180>
    1c84:	str	w22, [x19, #24]
    1c88:	mov	x0, x19
    1c8c:	ldp	x20, x19, [sp, #32]
    1c90:	ldp	x22, x21, [sp, #16]
    1c94:	ldp	x29, x30, [sp], #48
    1c98:	b	510c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13ec>
    1c9c:	ldrh	w9, [x0, #8]
    1ca0:	sub	w10, w22, #0x1
    1ca4:	sub	w8, w8, #0x1
    1ca8:	orr	w8, w8, #0x7
    1cac:	sub	w9, w9, #0x1
    1cb0:	orr	w10, w9, w10
    1cb4:	tst	w9, w22
    1cb8:	csinc	w9, w22, w10, eq  // eq = none
    1cbc:	add	w8, w8, w9
    1cc0:	subs	w21, w21, #0x1
    1cc4:	add	w22, w8, #0x1
    1cc8:	add	x20, x20, #0x8
    1ccc:	b.eq	1c84 <unlink@plt+0x134>  // b.none
    1cd0:	ldr	x0, [x20]
    1cd4:	ldr	x8, [x0]
    1cd8:	cbnz	x8, 1c9c <unlink@plt+0x14c>
    1cdc:	mov	x1, xzr
    1ce0:	bl	1d2c <unlink@plt+0x1dc>
    1ce4:	cbnz	w0, 1d0c <unlink@plt+0x1bc>
    1ce8:	ldr	x0, [x20]
    1cec:	ldr	x8, [x0]
    1cf0:	b	1c9c <unlink@plt+0x14c>
    1cf4:	mov	w0, #0x2                   	// #2
    1cf8:	b	1d10 <unlink@plt+0x1c0>
    1cfc:	mov	x0, x5
    1d00:	mov	x1, xzr
    1d04:	bl	1d2c <unlink@plt+0x1dc>
    1d08:	cbz	w0, 1d20 <unlink@plt+0x1d0>
    1d0c:	mov	w0, #0x1                   	// #1
    1d10:	ldp	x20, x19, [sp, #32]
    1d14:	ldp	x22, x21, [sp, #16]
    1d18:	ldp	x29, x30, [sp], #48
    1d1c:	ret
    1d20:	ldp	x20, x5, [x19, #8]
    1d24:	ldr	w21, [x19, #4]
    1d28:	b	1c70 <unlink@plt+0x120>
    1d2c:	stp	x29, x30, [sp, #-48]!
    1d30:	str	x21, [sp, #16]
    1d34:	stp	x20, x19, [sp, #32]
    1d38:	mov	x29, sp
    1d3c:	cbz	x0, 1e08 <unlink@plt+0x2b8>
    1d40:	ldr	x9, [x0, #16]
    1d44:	mov	x19, x0
    1d48:	cbz	x9, 1e08 <unlink@plt+0x2b8>
    1d4c:	str	xzr, [x19]
    1d50:	strh	wzr, [x19, #8]
    1d54:	ldr	x0, [x9]
    1d58:	cbz	x0, 1de0 <unlink@plt+0x290>
    1d5c:	mov	x20, x1
    1d60:	mov	x8, xzr
    1d64:	add	x21, x9, #0x8
    1d68:	b	1d90 <unlink@plt+0x240>
    1d6c:	ldrh	w11, [x19, #8]
    1d70:	ldr	x10, [x0]
    1d74:	cmp	w11, w9
    1d78:	add	x8, x8, x10
    1d7c:	csel	w9, w11, w9, hi  // hi = pmore
    1d80:	str	x8, [x19]
    1d84:	strh	w9, [x19, #8]
    1d88:	ldr	x0, [x21], #8
    1d8c:	cbz	x0, 1dd4 <unlink@plt+0x284>
    1d90:	ldr	x9, [x0]
    1d94:	cbnz	x9, 1dac <unlink@plt+0x25c>
    1d98:	mov	x1, xzr
    1d9c:	bl	1d2c <unlink@plt+0x1dc>
    1da0:	cbnz	w0, 1e08 <unlink@plt+0x2b8>
    1da4:	ldr	x8, [x19]
    1da8:	ldur	x0, [x21, #-8]
    1dac:	ldrh	w9, [x0, #8]
    1db0:	sub	x8, x8, #0x1
    1db4:	sub	x10, x9, #0x1
    1db8:	orr	x8, x10, x8
    1dbc:	add	x8, x8, #0x1
    1dc0:	str	x8, [x19]
    1dc4:	cbz	x20, 1d6c <unlink@plt+0x21c>
    1dc8:	str	x8, [x20], #8
    1dcc:	ldr	x8, [x19]
    1dd0:	b	1d6c <unlink@plt+0x21c>
    1dd4:	sub	x10, x8, #0x1
    1dd8:	sub	x8, x9, #0x1
    1ddc:	b	1de8 <unlink@plt+0x298>
    1de0:	mov	x8, #0xffffffffffffffff    	// #-1
    1de4:	mov	x10, #0xffffffffffffffff    	// #-1
    1de8:	orr	x8, x8, x10
    1dec:	adds	x8, x8, #0x1
    1df0:	cset	w0, cs  // cs = hs, nlast
    1df4:	str	x8, [x19]
    1df8:	ldp	x20, x19, [sp, #32]
    1dfc:	ldr	x21, [sp, #16]
    1e00:	ldp	x29, x30, [sp], #48
    1e04:	ret
    1e08:	mov	w0, #0x1                   	// #1
    1e0c:	b	1df8 <unlink@plt+0x2a8>

0000000000001e10 <ffi_prep_cif@@LIBFFI_BASE_7.0>:
    1e10:	mov	x6, x4
    1e14:	mov	w4, w2
    1e18:	mov	x5, x3
    1e1c:	b	1c34 <unlink@plt+0xe4>

0000000000001e20 <ffi_prep_cif_var@@LIBFFI_BASE_7.0>:
    1e20:	mov	x6, x5
    1e24:	mov	x5, x4
    1e28:	mov	w4, w3
    1e2c:	b	1c34 <unlink@plt+0xe4>

0000000000001e30 <ffi_prep_closure@@LIBFFI_CLOSURE_7.0>:
    1e30:	mov	x4, x0
    1e34:	b	1930 <ffi_prep_closure_loc@plt>

0000000000001e38 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1>:
    1e38:	cmp	w0, #0x1
    1e3c:	b.ne	1e58 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x20>  // b.any
    1e40:	ldrh	w8, [x1, #10]
    1e44:	cmp	w8, #0xd
    1e48:	b.ne	1e60 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x28>  // b.any
    1e4c:	mov	x0, x1
    1e50:	mov	x1, x2
    1e54:	b	1d2c <unlink@plt+0x1dc>
    1e58:	mov	w0, #0x2                   	// #2
    1e5c:	ret
    1e60:	mov	w0, #0x1                   	// #1
    1e64:	ret

0000000000001e68 <ffi_raw_size@@LIBFFI_BASE_7.0>:
    1e68:	ldr	w8, [x0, #4]
    1e6c:	subs	w8, w8, #0x1
    1e70:	b.mi	1f18 <ffi_raw_size@@LIBFFI_BASE_7.0+0xb0>  // b.first
    1e74:	ldr	x14, [x0, #8]
    1e78:	cbz	w8, 1f20 <ffi_raw_size@@LIBFFI_BASE_7.0+0xb8>
    1e7c:	mov	w9, w8
    1e80:	add	x12, x9, #0x1
    1e84:	and	x13, x12, #0x1fffffffe
    1e88:	mov	x10, xzr
    1e8c:	mov	x11, xzr
    1e90:	sub	w8, w8, w13
    1e94:	add	x9, x14, x13, lsl #3
    1e98:	add	x14, x14, #0x8
    1e9c:	mov	x15, x13
    1ea0:	b	1ee0 <ffi_raw_size@@LIBFFI_BASE_7.0+0x78>
    1ea4:	sub	x18, x0, #0x1
    1ea8:	sub	x0, x1, #0x1
    1eac:	cmp	w17, #0xd
    1eb0:	orr	x17, x18, #0x7
    1eb4:	add	x1, x10, #0x8
    1eb8:	orr	x18, x0, #0x7
    1ebc:	add	x10, x10, x17
    1ec0:	add	x2, x11, #0x8
    1ec4:	add	x11, x11, x18
    1ec8:	csinc	x10, x1, x10, eq  // eq = none
    1ecc:	cmp	w16, #0xd
    1ed0:	csinc	x11, x2, x11, eq  // eq = none
    1ed4:	subs	x15, x15, #0x2
    1ed8:	add	x14, x14, #0x10
    1edc:	b.eq	1f08 <ffi_raw_size@@LIBFFI_BASE_7.0+0xa0>  // b.none
    1ee0:	ldp	x1, x18, [x14, #-8]
    1ee4:	ldrh	w17, [x1, #10]
    1ee8:	ldrh	w16, [x18, #10]
    1eec:	cmp	w17, #0xd
    1ef0:	b.eq	1ef8 <ffi_raw_size@@LIBFFI_BASE_7.0+0x90>  // b.none
    1ef4:	ldr	x0, [x1]
    1ef8:	cmp	w16, #0xd
    1efc:	b.eq	1ea4 <ffi_raw_size@@LIBFFI_BASE_7.0+0x3c>  // b.none
    1f00:	ldr	x1, [x18]
    1f04:	b	1ea4 <ffi_raw_size@@LIBFFI_BASE_7.0+0x3c>
    1f08:	cmp	x12, x13
    1f0c:	add	x0, x11, x10
    1f10:	b.ne	1f4c <ffi_raw_size@@LIBFFI_BASE_7.0+0xe4>  // b.any
    1f14:	ret
    1f18:	mov	x0, xzr
    1f1c:	ret
    1f20:	mov	x0, xzr
    1f24:	mov	x9, x14
    1f28:	b	1f4c <ffi_raw_size@@LIBFFI_BASE_7.0+0xe4>
    1f2c:	ldr	x10, [x10]
    1f30:	sub	x10, x10, #0x1
    1f34:	orr	x10, x10, #0x7
    1f38:	add	x10, x0, x10
    1f3c:	add	x0, x10, #0x1
    1f40:	subs	w8, w8, #0x1
    1f44:	add	x9, x9, #0x8
    1f48:	b.mi	1f14 <ffi_raw_size@@LIBFFI_BASE_7.0+0xac>  // b.first
    1f4c:	ldr	x10, [x9]
    1f50:	ldrh	w11, [x10, #10]
    1f54:	cmp	w11, #0xd
    1f58:	b.ne	1f2c <ffi_raw_size@@LIBFFI_BASE_7.0+0xc4>  // b.any
    1f5c:	add	x0, x0, #0x8
    1f60:	b	1f40 <ffi_raw_size@@LIBFFI_BASE_7.0+0xd8>

0000000000001f64 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    1f64:	ldr	w8, [x0, #4]
    1f68:	cbz	w8, 1fc8 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x64>
    1f6c:	ldr	x9, [x0, #8]
    1f70:	mov	x10, xzr
    1f74:	b	1f90 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x2c>
    1f78:	ldr	x11, [x1], #8
    1f7c:	str	x11, [x2]
    1f80:	add	x10, x10, #0x1
    1f84:	cmp	w10, w8
    1f88:	add	x2, x2, #0x8
    1f8c:	b.cs	1fc8 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x64>  // b.hs, b.nlast
    1f90:	ldr	x11, [x9, x10, lsl #3]
    1f94:	ldrh	w11, [x11, #10]
    1f98:	cmp	w11, #0xf
    1f9c:	b.eq	1f78 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.none
    1fa0:	cmp	w11, #0xd
    1fa4:	b.eq	1f78 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.none
    1fa8:	str	x1, [x2]
    1fac:	ldr	x11, [x9, x10, lsl #3]
    1fb0:	ldr	x11, [x11]
    1fb4:	sub	x11, x11, #0x1
    1fb8:	orr	x11, x11, #0x7
    1fbc:	add	x11, x11, x1
    1fc0:	add	x1, x11, #0x1
    1fc4:	b	1f80 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x1c>
    1fc8:	ret

0000000000001fcc <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    1fcc:	stp	x29, x30, [sp, #-64]!
    1fd0:	stp	x24, x23, [sp, #16]
    1fd4:	stp	x22, x21, [sp, #32]
    1fd8:	stp	x20, x19, [sp, #48]
    1fdc:	ldr	w8, [x0, #4]
    1fe0:	mov	x29, sp
    1fe4:	cbz	w8, 20e4 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x118>
    1fe8:	ldr	x23, [x0, #8]
    1fec:	adrp	x24, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    1ff0:	mov	x19, x2
    1ff4:	mov	x20, x0
    1ff8:	mov	x21, x1
    1ffc:	mov	x22, xzr
    2000:	add	x24, x24, #0x98
    2004:	b	2044 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x78>
    2008:	ldr	x1, [x21]
    200c:	ldr	x2, [x8]
    2010:	mov	x0, x19
    2014:	bl	1920 <memcpy@plt>
    2018:	ldr	x8, [x23, x22, lsl #3]
    201c:	ldr	x8, [x8]
    2020:	sub	x8, x8, #0x1
    2024:	orr	x8, x8, #0x7
    2028:	add	x8, x8, x19
    202c:	add	x19, x8, #0x1
    2030:	ldr	w8, [x20, #4]
    2034:	add	x22, x22, #0x1
    2038:	add	x21, x21, #0x8
    203c:	cmp	w22, w8
    2040:	b.cs	20e4 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x118>  // b.hs, b.nlast
    2044:	ldr	x8, [x23, x22, lsl #3]
    2048:	ldrh	w9, [x8, #10]
    204c:	sub	w9, w9, #0x5
    2050:	cmp	w9, #0xa
    2054:	b.hi	2008 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>  // b.pmore
    2058:	adr	x10, 2008 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x3c>
    205c:	ldrb	w11, [x24, x9]
    2060:	add	x10, x10, x11, lsl #2
    2064:	br	x10
    2068:	ldr	x8, [x21]
    206c:	str	x8, [x19], #8
    2070:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    2074:	ldr	x8, [x21]
    2078:	ldrb	w8, [x8]
    207c:	str	x8, [x19], #8
    2080:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    2084:	ldr	x8, [x21]
    2088:	ldrsb	x8, [x8]
    208c:	str	x8, [x19], #8
    2090:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    2094:	ldr	x8, [x21]
    2098:	ldrh	w8, [x8]
    209c:	str	x8, [x19], #8
    20a0:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20a4:	ldr	x8, [x21]
    20a8:	ldrsh	x8, [x8]
    20ac:	str	x8, [x19], #8
    20b0:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20b4:	ldr	x8, [x21]
    20b8:	ldr	w8, [x8]
    20bc:	str	x8, [x19], #8
    20c0:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20c4:	ldr	x8, [x21]
    20c8:	ldrsw	x8, [x8]
    20cc:	str	x8, [x19], #8
    20d0:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20d4:	ldr	x8, [x21]
    20d8:	ldr	x8, [x8]
    20dc:	str	x8, [x19], #8
    20e0:	b	2030 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x64>
    20e4:	ldp	x20, x19, [sp, #48]
    20e8:	ldp	x22, x21, [sp, #32]
    20ec:	ldp	x24, x23, [sp, #16]
    20f0:	ldp	x29, x30, [sp], #64
    20f4:	ret

00000000000020f8 <ffi_raw_call@@LIBFFI_BASE_7.0>:
    20f8:	stp	x29, x30, [sp, #-16]!
    20fc:	mov	x29, sp
    2100:	ldr	w9, [x0, #4]
    2104:	mov	x8, sp
    2108:	lsl	x10, x9, #3
    210c:	add	x10, x10, #0xf
    2110:	and	x10, x10, #0xffffffff0
    2114:	sub	x8, x8, x10
    2118:	mov	sp, x8
    211c:	cbz	w9, 217c <ffi_raw_call@@LIBFFI_BASE_7.0+0x84>
    2120:	ldr	x10, [x0, #8]
    2124:	mov	x11, x8
    2128:	b	2144 <ffi_raw_call@@LIBFFI_BASE_7.0+0x4c>
    212c:	ldr	x12, [x3], #8
    2130:	str	x12, [x11]
    2134:	add	x10, x10, #0x8
    2138:	subs	w9, w9, #0x1
    213c:	add	x11, x11, #0x8
    2140:	b.eq	217c <ffi_raw_call@@LIBFFI_BASE_7.0+0x84>  // b.none
    2144:	ldr	x12, [x10]
    2148:	ldrh	w12, [x12, #10]
    214c:	cmp	w12, #0xf
    2150:	b.eq	212c <ffi_raw_call@@LIBFFI_BASE_7.0+0x34>  // b.none
    2154:	cmp	w12, #0xd
    2158:	b.eq	212c <ffi_raw_call@@LIBFFI_BASE_7.0+0x34>  // b.none
    215c:	str	x3, [x11]
    2160:	ldr	x12, [x10]
    2164:	ldr	x12, [x12]
    2168:	sub	x12, x12, #0x1
    216c:	orr	x12, x12, #0x7
    2170:	add	x12, x12, x3
    2174:	add	x3, x12, #0x1
    2178:	b	2134 <ffi_raw_call@@LIBFFI_BASE_7.0+0x3c>
    217c:	mov	x3, x8
    2180:	bl	1ab0 <ffi_call@plt>
    2184:	mov	sp, x29
    2188:	ldp	x29, x30, [sp], #16
    218c:	ret

0000000000002190 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    2190:	stp	x29, x30, [sp, #-48]!
    2194:	str	x21, [sp, #16]
    2198:	stp	x20, x19, [sp, #32]
    219c:	mov	x29, sp
    21a0:	mov	x20, x2
    21a4:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x34>
    21a8:	mov	x19, x3
    21ac:	add	x2, x2, #0x1d4
    21b0:	mov	x3, x4
    21b4:	mov	x21, x0
    21b8:	bl	1930 <ffi_prep_closure_loc@plt>
    21bc:	cbnz	w0, 21c4 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x34>
    21c0:	stp	x20, x19, [x21, #48]
    21c4:	ldp	x20, x19, [sp, #32]
    21c8:	ldr	x21, [sp, #16]
    21cc:	ldp	x29, x30, [sp], #48
    21d0:	ret
    21d4:	stp	x29, x30, [sp, #-48]!
    21d8:	stp	x22, x21, [sp, #16]
    21dc:	stp	x20, x19, [sp, #32]
    21e0:	mov	x29, sp
    21e4:	ldr	w8, [x0, #4]
    21e8:	mov	x19, x3
    21ec:	mov	x20, x0
    21f0:	mov	x21, x1
    21f4:	subs	w8, w8, #0x1
    21f8:	b.mi	22a0 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x110>  // b.first
    21fc:	ldr	x14, [x20, #8]
    2200:	mov	x10, xzr
    2204:	cbz	w8, 22f0 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x160>
    2208:	mov	w9, w8
    220c:	add	x12, x9, #0x1
    2210:	and	x13, x12, #0x1fffffffe
    2214:	mov	x11, xzr
    2218:	sub	w8, w8, w13
    221c:	add	x9, x14, x13, lsl #3
    2220:	add	x14, x14, #0x8
    2224:	mov	x15, x13
    2228:	b	2268 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xd8>
    222c:	sub	x18, x0, #0x1
    2230:	sub	x0, x1, #0x1
    2234:	cmp	w17, #0xd
    2238:	orr	x17, x18, #0x7
    223c:	add	x1, x10, #0x8
    2240:	orr	x18, x0, #0x7
    2244:	add	x10, x10, x17
    2248:	add	x3, x11, #0x8
    224c:	add	x11, x11, x18
    2250:	csinc	x10, x1, x10, eq  // eq = none
    2254:	cmp	w16, #0xd
    2258:	csinc	x11, x3, x11, eq  // eq = none
    225c:	subs	x15, x15, #0x2
    2260:	add	x14, x14, #0x10
    2264:	b.eq	2290 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x100>  // b.none
    2268:	ldp	x1, x18, [x14, #-8]
    226c:	ldrh	w17, [x1, #10]
    2270:	ldrh	w16, [x18, #10]
    2274:	cmp	w17, #0xd
    2278:	b.eq	2280 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xf0>  // b.none
    227c:	ldr	x0, [x1]
    2280:	cmp	w16, #0xd
    2284:	b.eq	222c <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x9c>  // b.none
    2288:	ldr	x1, [x18]
    228c:	b	222c <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x9c>
    2290:	cmp	x12, x13
    2294:	add	x10, x11, x10
    2298:	b.ne	2318 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x188>  // b.any
    229c:	b	22a4 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x114>
    22a0:	mov	x10, xzr
    22a4:	add	x9, x10, #0xf
    22a8:	mov	x8, sp
    22ac:	and	x9, x9, #0xfffffffffffffff0
    22b0:	sub	x22, x8, x9
    22b4:	mov	sp, x22
    22b8:	mov	x0, x20
    22bc:	mov	x1, x2
    22c0:	mov	x2, x22
    22c4:	bl	1a70 <ffi_ptrarray_to_raw@plt>
    22c8:	ldp	x8, x3, [x19, #48]
    22cc:	mov	x0, x20
    22d0:	mov	x1, x21
    22d4:	mov	x2, x22
    22d8:	blr	x8
    22dc:	mov	sp, x29
    22e0:	ldp	x20, x19, [sp, #32]
    22e4:	ldp	x22, x21, [sp, #16]
    22e8:	ldp	x29, x30, [sp], #48
    22ec:	ret
    22f0:	mov	x9, x14
    22f4:	b	2318 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x188>
    22f8:	ldr	x11, [x11]
    22fc:	sub	x11, x11, #0x1
    2300:	orr	x11, x11, #0x7
    2304:	add	x10, x10, x11
    2308:	add	x10, x10, #0x1
    230c:	subs	w8, w8, #0x1
    2310:	add	x9, x9, #0x8
    2314:	b.mi	22a4 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x114>  // b.first
    2318:	ldr	x11, [x9]
    231c:	ldrh	w12, [x11, #10]
    2320:	cmp	w12, #0xd
    2324:	b.ne	22f8 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x168>  // b.any
    2328:	add	x10, x10, #0x8
    232c:	b	230c <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x17c>

0000000000002330 <ffi_prep_raw_closure@@LIBFFI_CLOSURE_7.0>:
    2330:	stp	x29, x30, [sp, #-48]!
    2334:	str	x21, [sp, #16]
    2338:	stp	x20, x19, [sp, #32]
    233c:	mov	x29, sp
    2340:	mov	x20, x2
    2344:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x34>
    2348:	mov	x19, x3
    234c:	add	x2, x2, #0x1d4
    2350:	mov	x3, x0
    2354:	mov	x4, x0
    2358:	mov	x21, x0
    235c:	bl	1930 <ffi_prep_closure_loc@plt>
    2360:	cbnz	w0, 2368 <ffi_prep_raw_closure@@LIBFFI_CLOSURE_7.0+0x38>
    2364:	stp	x20, x19, [x21, #48]
    2368:	ldp	x20, x19, [sp, #32]
    236c:	ldr	x21, [sp, #16]
    2370:	ldp	x29, x30, [sp], #48
    2374:	ret

0000000000002378 <ffi_java_raw_size@@LIBFFI_BASE_7.0>:
    2378:	stp	x29, x30, [sp, #-16]!
    237c:	ldr	w9, [x0, #4]
    2380:	mov	x29, sp
    2384:	subs	w9, w9, #0x1
    2388:	b.mi	23ec <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x74>  // b.first
    238c:	mov	x8, x0
    2390:	ldr	x8, [x8, #8]
    2394:	adrp	x10, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    2398:	mov	x0, xzr
    239c:	add	x10, x10, #0xa3
    23a0:	b	23b8 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x40>
    23a4:	mov	w11, #0x8                   	// #8
    23a8:	add	x0, x0, x11
    23ac:	subs	w9, w9, #0x1
    23b0:	add	x8, x8, #0x8
    23b4:	b.mi	23e4 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x6c>  // b.first
    23b8:	ldr	x11, [x8]
    23bc:	ldrh	w11, [x11, #10]
    23c0:	sub	w11, w11, #0x3
    23c4:	cmp	w11, #0xc
    23c8:	b.hi	23a4 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x2c>  // b.pmore
    23cc:	adr	x12, 23a4 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x2c>
    23d0:	ldrb	w13, [x10, x11]
    23d4:	add	x12, x12, x13, lsl #2
    23d8:	mov	w11, #0x10                  	// #16
    23dc:	br	x12
    23e0:	bl	1a20 <abort@plt>
    23e4:	ldp	x29, x30, [sp], #16
    23e8:	ret
    23ec:	mov	x0, xzr
    23f0:	ldp	x29, x30, [sp], #16
    23f4:	ret

00000000000023f8 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    23f8:	stp	x29, x30, [sp, #-16]!
    23fc:	ldr	w8, [x0, #4]
    2400:	mov	x29, sp
    2404:	cbz	w8, 2458 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x60>
    2408:	ldr	x9, [x0, #8]
    240c:	mov	x10, xzr
    2410:	b	2428 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x30>
    2414:	str	x1, [x2, x10, lsl #3]
    2418:	add	x1, x1, #0x10
    241c:	add	x10, x10, #0x1
    2420:	cmp	w10, w8
    2424:	b.cs	2458 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x60>  // b.hs, b.nlast
    2428:	ldr	x11, [x9, x10, lsl #3]
    242c:	ldrh	w11, [x11, #10]
    2430:	sub	w12, w11, #0xb
    2434:	cmp	w12, #0x2
    2438:	ccmp	w11, #0x3, #0x4, cs  // cs = hs, nlast
    243c:	b.eq	2414 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x1c>  // b.none
    2440:	cmp	w11, #0xf
    2444:	b.eq	2460 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>  // b.none
    2448:	add	x11, x1, #0x8
    244c:	str	x1, [x2, x10, lsl #3]
    2450:	mov	x1, x11
    2454:	b	241c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x24>
    2458:	ldp	x29, x30, [sp], #16
    245c:	ret
    2460:	bl	1a20 <abort@plt>

0000000000002464 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    2464:	ldr	w8, [x0, #4]
    2468:	cbz	w8, 2528 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc4>
    246c:	ldr	x9, [x0, #8]
    2470:	adrp	x10, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    2474:	mov	x8, xzr
    2478:	add	x10, x10, #0xb0
    247c:	b	249c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2480:	ldr	x11, [x1, x8, lsl #3]
    2484:	ldr	x11, [x11]
    2488:	str	x11, [x2], #8
    248c:	ldr	w11, [x0, #4]
    2490:	add	x8, x8, #0x1
    2494:	cmp	w8, w11
    2498:	b.cs	2528 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc4>  // b.hs, b.nlast
    249c:	ldr	x11, [x9, x8, lsl #3]
    24a0:	ldrh	w11, [x11, #10]
    24a4:	sub	w11, w11, #0x2
    24a8:	cmp	w11, #0xc
    24ac:	b.hi	248c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x28>  // b.pmore
    24b0:	adr	x12, 2480 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x1c>
    24b4:	ldrb	w13, [x10, x11]
    24b8:	add	x12, x12, x13, lsl #2
    24bc:	br	x12
    24c0:	ldr	x11, [x1, x8, lsl #3]
    24c4:	ldr	x11, [x11]
    24c8:	str	x11, [x2], #16
    24cc:	b	248c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x28>
    24d0:	ldr	x11, [x1, x8, lsl #3]
    24d4:	ldr	w11, [x11]
    24d8:	str	w11, [x2], #8
    24dc:	b	248c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x28>
    24e0:	ldr	x11, [x1, x8, lsl #3]
    24e4:	ldrb	w11, [x11]
    24e8:	b	2488 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    24ec:	ldr	x11, [x1, x8, lsl #3]
    24f0:	ldrsb	x11, [x11]
    24f4:	b	2488 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    24f8:	ldr	x11, [x1, x8, lsl #3]
    24fc:	ldrh	w11, [x11]
    2500:	b	2488 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2504:	ldr	x11, [x1, x8, lsl #3]
    2508:	ldrsh	x11, [x11]
    250c:	b	2488 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2510:	ldr	x11, [x1, x8, lsl #3]
    2514:	ldr	w11, [x11]
    2518:	b	2488 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    251c:	ldr	x11, [x1, x8, lsl #3]
    2520:	ldrsw	x11, [x11]
    2524:	b	2488 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x24>
    2528:	ret

000000000000252c <ffi_java_raw_call@@LIBFFI_BASE_7.0>:
    252c:	stp	x29, x30, [sp, #-16]!
    2530:	mov	x29, sp
    2534:	ldr	w9, [x0, #4]
    2538:	mov	x8, sp
    253c:	lsl	x10, x9, #3
    2540:	add	x10, x10, #0xf
    2544:	and	x10, x10, #0xffffffff0
    2548:	sub	x8, x8, x10
    254c:	mov	sp, x8
    2550:	cbz	w9, 25a8 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x7c>
    2554:	ldr	x10, [x0, #8]
    2558:	mov	x11, x8
    255c:	b	2578 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x4c>
    2560:	str	x3, [x11]
    2564:	add	x3, x3, #0x10
    2568:	add	x10, x10, #0x8
    256c:	subs	w9, w9, #0x1
    2570:	add	x11, x11, #0x8
    2574:	b.eq	25a8 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x7c>  // b.none
    2578:	ldr	x12, [x10]
    257c:	ldrh	w12, [x12, #10]
    2580:	sub	w13, w12, #0xb
    2584:	cmp	w13, #0x2
    2588:	ccmp	w12, #0x3, #0x4, cs  // cs = hs, nlast
    258c:	b.eq	2560 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x34>  // b.none
    2590:	cmp	w12, #0xf
    2594:	b.eq	25bc <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x90>  // b.none
    2598:	add	x12, x3, #0x8
    259c:	str	x3, [x11]
    25a0:	mov	x3, x12
    25a4:	b	2568 <ffi_java_raw_call@@LIBFFI_BASE_7.0+0x3c>
    25a8:	mov	x3, x8
    25ac:	bl	1ab0 <ffi_call@plt>
    25b0:	mov	sp, x29
    25b4:	ldp	x29, x30, [sp], #16
    25b8:	ret
    25bc:	bl	1a20 <abort@plt>

00000000000025c0 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    25c0:	stp	x29, x30, [sp, #-48]!
    25c4:	str	x21, [sp, #16]
    25c8:	stp	x20, x19, [sp, #32]
    25cc:	mov	x29, sp
    25d0:	mov	x20, x2
    25d4:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x34>
    25d8:	mov	x19, x3
    25dc:	add	x2, x2, #0x604
    25e0:	mov	x3, x4
    25e4:	mov	x21, x0
    25e8:	bl	1930 <ffi_prep_closure_loc@plt>
    25ec:	cbnz	w0, 25f4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x34>
    25f0:	stp	x20, x19, [x21, #48]
    25f4:	ldp	x20, x19, [sp, #32]
    25f8:	ldr	x21, [sp, #16]
    25fc:	ldp	x29, x30, [sp], #48
    2600:	ret
    2604:	stp	x29, x30, [sp, #-48]!
    2608:	stp	x22, x21, [sp, #16]
    260c:	stp	x20, x19, [sp, #32]
    2610:	mov	x29, sp
    2614:	ldr	w8, [x0, #4]
    2618:	mov	x19, x3
    261c:	mov	x20, x0
    2620:	mov	x21, x1
    2624:	subs	w9, w8, #0x1
    2628:	mov	x8, xzr
    262c:	b.mi	2680 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xc0>  // b.first
    2630:	ldr	x10, [x20, #8]
    2634:	adrp	x11, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    2638:	add	x11, x11, #0xbd
    263c:	b	2654 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x94>
    2640:	mov	w12, #0x8                   	// #8
    2644:	add	x8, x8, x12
    2648:	subs	w9, w9, #0x1
    264c:	add	x10, x10, #0x8
    2650:	b.mi	2680 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0xc0>  // b.first
    2654:	ldr	x12, [x10]
    2658:	ldrh	w12, [x12, #10]
    265c:	sub	w12, w12, #0x3
    2660:	cmp	w12, #0xc
    2664:	b.hi	2640 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x80>  // b.pmore
    2668:	adr	x13, 2640 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x80>
    266c:	ldrb	w14, [x11, x12]
    2670:	add	x13, x13, x14, lsl #2
    2674:	mov	w12, #0x10                  	// #16
    2678:	br	x13
    267c:	bl	1a20 <abort@plt>
    2680:	add	x8, x8, #0xf
    2684:	mov	x9, sp
    2688:	and	x8, x8, #0xfffffffffffffff0
    268c:	sub	x22, x9, x8
    2690:	mov	sp, x22
    2694:	mov	x0, x20
    2698:	mov	x1, x2
    269c:	mov	x2, x22
    26a0:	bl	1b10 <ffi_java_ptrarray_to_raw@plt>
    26a4:	ldp	x8, x3, [x19, #48]
    26a8:	mov	x0, x20
    26ac:	mov	x1, x21
    26b0:	mov	x2, x22
    26b4:	blr	x8
    26b8:	mov	sp, x29
    26bc:	ldp	x20, x19, [sp, #32]
    26c0:	ldp	x22, x21, [sp, #16]
    26c4:	ldp	x29, x30, [sp], #48
    26c8:	ret

00000000000026cc <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0>:
    26cc:	stp	x29, x30, [sp, #-48]!
    26d0:	str	x21, [sp, #16]
    26d4:	stp	x20, x19, [sp, #32]
    26d8:	mov	x29, sp
    26dc:	mov	x20, x2
    26e0:	adrp	x2, 2000 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x34>
    26e4:	mov	x19, x3
    26e8:	add	x2, x2, #0x604
    26ec:	mov	x3, x0
    26f0:	mov	x4, x0
    26f4:	mov	x21, x0
    26f8:	bl	1930 <ffi_prep_closure_loc@plt>
    26fc:	cbnz	w0, 2704 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x38>
    2700:	stp	x20, x19, [x21, #48]
    2704:	ldp	x20, x19, [sp, #32]
    2708:	ldr	x21, [sp, #16]
    270c:	ldp	x29, x30, [sp], #48
    2710:	ret

0000000000002714 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0>:
    2714:	stp	x29, x30, [sp, #-64]!
    2718:	stp	x24, x23, [sp, #16]
    271c:	stp	x22, x21, [sp, #32]
    2720:	stp	x20, x19, [sp, #48]
    2724:	mov	x29, sp
    2728:	cbz	x1, 2760 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c>
    272c:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2730:	ldr	x8, [x8, #1456]
    2734:	mov	x19, x1
    2738:	mov	x20, x0
    273c:	cbnz	x8, 2744 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x30>
    2740:	bl	49bc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc9c>
    2744:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    2748:	ldrb	w8, [x21, #1224]
    274c:	tbz	w8, #1, 2768 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x54>
    2750:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    2754:	add	x0, x0, #0x4d0
    2758:	bl	1b20 <pthread_mutex_lock@plt>
    275c:	cbz	w0, 2768 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x54>
    2760:	mov	x20, xzr
    2764:	b	3974 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1260>
    2768:	cmp	x20, #0xf0
    276c:	b.hi	27e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd4>  // b.pmore
    2770:	add	x9, x20, #0xf
    2774:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2778:	and	x10, x9, #0xfffffffffffffff8
    277c:	ldr	w9, [x8, #360]
    2780:	cmp	x20, #0x17
    2784:	mov	w11, #0x20                  	// #32
    2788:	csel	x22, x11, x10, cc  // cc = lo, ul, last
    278c:	lsr	x11, x22, #3
    2790:	lsr	x12, x9, x11
    2794:	tst	w12, #0x3
    2798:	b.eq	2828 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x114>  // b.none
    279c:	mvn	w10, w12
    27a0:	and	x10, x10, #0x1
    27a4:	add	x10, x11, x10
    27a8:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    27ac:	add	x11, x11, #0x168
    27b0:	add	x13, x11, x10, lsl #4
    27b4:	ldr	x11, [x13, #80]
    27b8:	add	x13, x13, #0x40
    27bc:	mov	x20, x11
    27c0:	ldr	x12, [x20, #16]!
    27c4:	cmp	x12, x13
    27c8:	b.eq	28b0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x19c>  // b.none
    27cc:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    27d0:	ldr	x8, [x8, #384]
    27d4:	cmp	x8, x12
    27d8:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    27dc:	str	x12, [x13, #16]
    27e0:	str	x13, [x12, #24]
    27e4:	b	28c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1ac>
    27e8:	cmn	x20, #0x81
    27ec:	b.ls	27f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe4>  // b.plast
    27f0:	mov	x22, #0xffffffffffffffff    	// #-1
    27f4:	b	2b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x454>
    27f8:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    27fc:	ldr	w13, [x10, #364]
    2800:	add	x8, x20, #0xf
    2804:	and	x22, x8, #0xfffffffffffffff8
    2808:	cbz	w13, 2b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x454>
    280c:	lsr	x8, x8, #8
    2810:	neg	x9, x22
    2814:	cbz	x8, 28e0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1cc>
    2818:	lsr	x11, x22, #24
    281c:	cbz	x11, 28e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1d4>
    2820:	mov	w14, #0x1f                  	// #31
    2824:	b	2940 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x22c>
    2828:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    282c:	ldr	x10, [x10, #368]
    2830:	cmp	x22, x10
    2834:	b.ls	2b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x454>  // b.plast
    2838:	cbz	w12, 2aac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x398>
    283c:	mov	w13, #0x2                   	// #2
    2840:	lsl	w12, w12, w11
    2844:	lsl	w11, w13, w11
    2848:	neg	w13, w11
    284c:	orr	w11, w11, w13
    2850:	and	w11, w12, w11
    2854:	neg	w12, w11
    2858:	and	w13, w11, w12
    285c:	tst	w11, w12
    2860:	rbit	w11, w13
    2864:	clz	w11, w11
    2868:	csinv	w12, w11, wzr, ne  // ne = any
    286c:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    2870:	add	x11, x11, #0x168
    2874:	add	x15, x11, w12, sxtw #4
    2878:	ldr	x13, [x15, #80]
    287c:	add	x15, x15, #0x40
    2880:	sxtw	x12, w12
    2884:	mov	x20, x13
    2888:	ldr	x14, [x20, #16]!
    288c:	cmp	x14, x15
    2890:	b.eq	2d74 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x660>  // b.none
    2894:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    2898:	ldr	x16, [x16, #384]
    289c:	cmp	x16, x14
    28a0:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    28a4:	str	x14, [x15, #16]
    28a8:	str	x15, [x14, #24]
    28ac:	b	2d84 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x670>
    28b0:	mov	w12, #0x1                   	// #1
    28b4:	lsl	w12, w12, w10
    28b8:	bic	w9, w9, w12
    28bc:	str	w9, [x8, #360]
    28c0:	mov	w8, #0x3                   	// #3
    28c4:	bfi	x8, x10, #3, #61
    28c8:	str	x8, [x11, #8]
    28cc:	add	x8, x11, x10, lsl #3
    28d0:	ldr	x9, [x8, #8]
    28d4:	orr	x9, x9, #0x1
    28d8:	str	x9, [x8, #8]
    28dc:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    28e0:	mov	x14, xzr
    28e4:	b	2940 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x22c>
    28e8:	mov	w11, #0xfff00               	// #1048320
    28ec:	add	w11, w8, w11
    28f0:	lsr	w11, w11, #16
    28f4:	and	w11, w11, #0x8
    28f8:	lsl	w8, w8, w11
    28fc:	add	w12, w8, #0x7f, lsl #12
    2900:	lsr	w12, w12, #16
    2904:	and	w12, w12, #0x4
    2908:	lsl	w8, w8, w12
    290c:	orr	w11, w12, w11
    2910:	add	w12, w8, #0x3c, lsl #12
    2914:	lsr	w12, w12, #16
    2918:	and	w12, w12, #0x2
    291c:	lsl	w8, w8, w12
    2920:	orr	w11, w11, w12
    2924:	lsr	w8, w8, #15
    2928:	sub	w8, w8, w11
    292c:	lsl	w11, w8, #1
    2930:	add	w8, w8, #0x15
    2934:	add	w14, w11, #0x1c
    2938:	lsr	x8, x22, x8
    293c:	bfxil	x14, x8, #0, #1
    2940:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    2944:	add	x11, x11, #0x168
    2948:	add	x8, x11, x14, lsl #3
    294c:	ldr	x12, [x8, #592]
    2950:	cbz	x12, 29cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2b8>
    2954:	mov	w16, #0x39                  	// #57
    2958:	sub	x16, x16, x14, lsr #1
    295c:	cmp	x14, #0x1f
    2960:	csel	x16, xzr, x16, eq  // eq = none
    2964:	mov	x15, xzr
    2968:	mov	x8, xzr
    296c:	lsl	x16, x22, x16
    2970:	b	29a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x290>
    2974:	lsr	x17, x16, #60
    2978:	and	x17, x17, #0x8
    297c:	ldr	x18, [x12, #40]
    2980:	add	x12, x12, x17
    2984:	ldr	x12, [x12, #32]
    2988:	cmp	x18, x12
    298c:	ccmp	x18, #0x0, #0x4, ne  // ne = any
    2990:	csel	x15, x15, x18, eq  // eq = none
    2994:	cmp	x12, #0x0
    2998:	cset	w17, ne  // ne = any
    299c:	lsl	x16, x16, x17
    29a0:	cbz	x12, 29d4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c0>
    29a4:	ldr	x17, [x12, #8]
    29a8:	and	x17, x17, #0xfffffffffffffffc
    29ac:	sub	x17, x17, x22
    29b0:	cmp	x17, x9
    29b4:	b.cs	2974 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x260>  // b.hs, b.nlast
    29b8:	mov	x9, x17
    29bc:	mov	x8, x12
    29c0:	cbnz	x17, 2974 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x260>
    29c4:	mov	x8, x12
    29c8:	b	2a84 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x370>
    29cc:	mov	x15, xzr
    29d0:	mov	x8, xzr
    29d4:	orr	x12, x15, x8
    29d8:	cbnz	x12, 2a14 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x300>
    29dc:	mov	w12, #0x2                   	// #2
    29e0:	lsl	w12, w12, w14
    29e4:	neg	w14, w12
    29e8:	orr	w12, w12, w14
    29ec:	ands	w12, w12, w13
    29f0:	b.eq	2b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x454>  // b.none
    29f4:	neg	w14, w12
    29f8:	and	w15, w12, w14
    29fc:	rbit	w15, w15
    2a00:	clz	w15, w15
    2a04:	tst	w12, w14
    2a08:	csinv	w12, w15, wzr, ne  // ne = any
    2a0c:	add	x12, x11, w12, sxtw #3
    2a10:	ldr	x15, [x12, #592]
    2a14:	mov	x12, x15
    2a18:	cbnz	x15, 2a84 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x370>
    2a1c:	cbz	x8, 2b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x454>
    2a20:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    2a24:	ldr	x12, [x12, #368]
    2a28:	sub	x12, x12, x22
    2a2c:	cmp	x9, x12
    2a30:	b.cs	2b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x454>  // b.hs, b.nlast
    2a34:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    2a38:	ldr	x15, [x14, #384]
    2a3c:	cmp	x15, x8
    2a40:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    2a44:	add	x12, x8, x22
    2a48:	cmp	x12, x8
    2a4c:	b.ls	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.plast
    2a50:	ldr	x17, [x8, #24]
    2a54:	ldr	x16, [x8, #48]
    2a58:	cmp	x17, x8
    2a5c:	b.eq	2df8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6e4>  // b.none
    2a60:	ldr	x18, [x8, #16]
    2a64:	cmp	x15, x18
    2a68:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    2a6c:	str	x17, [x18, #24]
    2a70:	str	x18, [x17, #16]
    2a74:	cbnz	x16, 2e40 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x72c>
    2a78:	b	3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe10>
    2a7c:	mov	x12, x14
    2a80:	cbz	x14, 2a1c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x308>
    2a84:	ldr	x15, [x12, #8]
    2a88:	ldr	x14, [x12, #32]
    2a8c:	and	x15, x15, #0xfffffffffffffffc
    2a90:	sub	x15, x15, x22
    2a94:	cmp	x15, x9
    2a98:	csel	x9, x15, x9, cc  // cc = lo, ul, last
    2a9c:	csel	x8, x12, x8, cc  // cc = lo, ul, last
    2aa0:	cbnz	x14, 2a7c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x368>
    2aa4:	ldr	x14, [x12, #40]
    2aa8:	b	2a7c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x368>
    2aac:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    2ab0:	ldr	w17, [x16, #364]
    2ab4:	cbz	w17, 2b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x454>
    2ab8:	neg	w11, w17
    2abc:	and	w12, w17, w11
    2ac0:	tst	w17, w11
    2ac4:	rbit	w11, w12
    2ac8:	clz	w11, w11
    2acc:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    2ad0:	csinv	w11, w11, wzr, ne  // ne = any
    2ad4:	add	x13, x13, #0x168
    2ad8:	add	x11, x13, w11, sxtw #3
    2adc:	ldr	x11, [x11, #592]
    2ae0:	ldr	x12, [x11, #8]
    2ae4:	mov	x15, x11
    2ae8:	and	x12, x12, #0xfffffffffffffffc
    2aec:	sub	x12, x12, x22
    2af0:	b	2b10 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3fc>
    2af4:	ldr	x15, [x14, #8]
    2af8:	and	x15, x15, #0xfffffffffffffffc
    2afc:	sub	x15, x15, x22
    2b00:	cmp	x15, x12
    2b04:	csel	x12, x15, x12, cc  // cc = lo, ul, last
    2b08:	csel	x11, x14, x11, cc  // cc = lo, ul, last
    2b0c:	mov	x15, x14
    2b10:	ldr	x14, [x15, #32]
    2b14:	cbnz	x14, 2af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3e0>
    2b18:	ldr	x14, [x15, #40]
    2b1c:	cbnz	x14, 2af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3e0>
    2b20:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    2b24:	ldr	x18, [x15, #384]
    2b28:	cmp	x18, x11
    2b2c:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    2b30:	add	x14, x11, x22
    2b34:	cmp	x14, x11
    2b38:	b.ls	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.plast
    2b3c:	ldr	x1, [x11, #24]
    2b40:	ldr	x0, [x11, #48]
    2b44:	cmp	x1, x11
    2b48:	b.eq	33fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xce8>  // b.none
    2b4c:	ldr	x2, [x11, #16]
    2b50:	cmp	x18, x2
    2b54:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    2b58:	str	x1, [x2, #24]
    2b5c:	str	x2, [x1, #16]
    2b60:	cbnz	x0, 3444 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd30>
    2b64:	b	3744 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1030>
    2b68:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2b6c:	ldr	x9, [x8, #368]
    2b70:	subs	x10, x9, x22
    2b74:	b.cs	2bb8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4a4>  // b.hs, b.nlast
    2b78:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    2b7c:	ldr	x8, [x23, #376]
    2b80:	subs	x8, x8, x22
    2b84:	b.ls	2bf4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4e0>  // b.plast
    2b88:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    2b8c:	add	x9, x9, #0x178
    2b90:	ldr	x10, [x9, #24]
    2b94:	orr	x11, x8, #0x1
    2b98:	orr	x12, x22, #0x3
    2b9c:	str	x8, [x9]
    2ba0:	add	x8, x10, x22
    2ba4:	str	x8, [x9, #24]
    2ba8:	str	x11, [x8, #8]
    2bac:	str	x12, [x10, #8]
    2bb0:	add	x20, x10, #0x10
    2bb4:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    2bb8:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2bbc:	ldr	x8, [x8, #392]
    2bc0:	cmp	x10, #0x20
    2bc4:	b.cc	2cbc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5a8>  // b.lo, b.ul, b.last
    2bc8:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    2bcc:	add	x11, x8, x22
    2bd0:	add	x12, x12, #0x170
    2bd4:	orr	x13, x10, #0x1
    2bd8:	orr	x14, x22, #0x3
    2bdc:	str	x11, [x12, #24]
    2be0:	str	x10, [x12]
    2be4:	str	x13, [x11, #8]
    2be8:	str	x10, [x8, x9]
    2bec:	str	x14, [x8, #8]
    2bf0:	b	2ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d0>
    2bf4:	bl	49bc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc9c>
    2bf8:	ldrb	w8, [x21, #1224]
    2bfc:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    2c00:	tbz	w8, #0, 2cec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d8>
    2c04:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2c08:	ldrb	w8, [x8, #1472]
    2c0c:	sbfx	x8, x8, #0, #1
    2c10:	cmp	x22, x8
    2c14:	b.cc	2cec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d8>  // b.lo, b.ul, b.last
    2c18:	ldr	x8, [x24, #1464]
    2c1c:	add	x9, x22, x8
    2c20:	add	x9, x9, #0x37
    2c24:	neg	x8, x8
    2c28:	and	x20, x9, x8
    2c2c:	cmp	x20, x22
    2c30:	b.ls	2cec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d8>  // b.plast
    2c34:	mov	x0, x20
    2c38:	bl	4aa4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd84>
    2c3c:	cmn	x0, #0x1
    2c40:	b.eq	2cec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d8>  // b.none
    2c44:	add	x8, x0, #0x10
    2c48:	neg	w10, w8
    2c4c:	adrp	x9, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    2c50:	tst	x8, #0x7
    2c54:	and	x8, x10, #0x7
    2c58:	ldr	q0, [x9, #208]
    2c5c:	csel	x9, xzr, x8, eq  // eq = none
    2c60:	sub	x10, x20, x9
    2c64:	add	x8, x0, x9
    2c68:	sub	x10, x10, #0x20
    2c6c:	orr	x9, x9, #0x1
    2c70:	orr	x11, x10, #0x2
    2c74:	add	x10, x8, x10
    2c78:	stp	x9, x11, [x8]
    2c7c:	stur	q0, [x10, #8]
    2c80:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    2c84:	ldr	x10, [x9, #384]
    2c88:	cmp	x0, x10
    2c8c:	b.cs	2c94 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x580>  // b.hs, b.nlast
    2c90:	str	x0, [x9, #384]
    2c94:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2c98:	add	x10, x10, #0x4b8
    2c9c:	ldp	x9, x11, [x10]
    2ca0:	add	x9, x9, x20
    2ca4:	cmp	x9, x11
    2ca8:	str	x9, [x10]
    2cac:	b.ls	2ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d0>  // b.plast
    2cb0:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2cb4:	str	x9, [x10, #1216]
    2cb8:	b	2ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d0>
    2cbc:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2cc0:	add	x10, x10, #0x170
    2cc4:	orr	x11, x9, #0x3
    2cc8:	str	xzr, [x10]
    2ccc:	str	xzr, [x10, #24]
    2cd0:	str	x11, [x8, #8]
    2cd4:	add	x9, x8, x9
    2cd8:	ldr	x10, [x9, #8]
    2cdc:	orr	x10, x10, #0x1
    2ce0:	str	x10, [x9, #8]
    2ce4:	add	x20, x8, #0x10
    2ce8:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    2cec:	ldr	x8, [x24, #1464]
    2cf0:	add	x9, x22, x8
    2cf4:	add	x9, x9, #0x49
    2cf8:	neg	x8, x8
    2cfc:	and	x20, x9, x8
    2d00:	cmp	x20, x22
    2d04:	b.ls	3914 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1200>  // b.plast
    2d08:	mov	x0, x20
    2d0c:	bl	4aa4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd84>
    2d10:	cmn	x0, #0x1
    2d14:	cset	w12, ne  // ne = any
    2d18:	csel	x9, xzr, x20, eq  // eq = none
    2d1c:	b.eq	3914 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1200>  // b.none
    2d20:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2d24:	add	x10, x10, #0x4b8
    2d28:	ldp	x8, x11, [x10]
    2d2c:	add	x8, x8, x9
    2d30:	cmp	x8, x11
    2d34:	str	x8, [x10]
    2d38:	b.ls	2d44 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x630>  // b.plast
    2d3c:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2d40:	str	x8, [x10, #1216]
    2d44:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2d48:	ldr	x11, [x8, #400]
    2d4c:	cbz	x11, 2e7c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x768>
    2d50:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2d54:	add	x8, x8, #0x500
    2d58:	ldp	x13, x10, [x8]
    2d5c:	add	x14, x13, x10
    2d60:	cmp	x0, x14
    2d64:	b.eq	3088 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x974>  // b.none
    2d68:	ldr	x8, [x8, #16]
    2d6c:	cbnz	x8, 2d58 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x644>
    2d70:	b	3124 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa10>
    2d74:	mov	w14, #0x1                   	// #1
    2d78:	lsl	w14, w14, w12
    2d7c:	bic	w9, w9, w14
    2d80:	str	w9, [x8, #360]
    2d84:	lsl	x15, x12, #3
    2d88:	sub	x12, x15, x22
    2d8c:	cmp	x12, #0x1f
    2d90:	b.hi	2da4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x690>  // b.pmore
    2d94:	orr	x8, x15, #0x3
    2d98:	str	x8, [x13, #8]
    2d9c:	add	x8, x13, x15
    2da0:	b	28d0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1bc>
    2da4:	orr	x16, x22, #0x3
    2da8:	add	x14, x13, x22
    2dac:	orr	x17, x12, #0x1
    2db0:	str	x16, [x13, #8]
    2db4:	str	x17, [x14, #8]
    2db8:	str	x12, [x13, x15]
    2dbc:	cbz	x10, 3498 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd84>
    2dc0:	ldr	x13, [x11, #32]
    2dc4:	lsr	x10, x10, #3
    2dc8:	mov	w15, #0x1                   	// #1
    2dcc:	add	x16, x11, x10, lsl #4
    2dd0:	lsl	w11, w15, w10
    2dd4:	tst	w9, w11
    2dd8:	add	x10, x16, #0x40
    2ddc:	b.eq	3480 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd6c>  // b.none
    2de0:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    2de4:	ldr	x8, [x10, #16]
    2de8:	ldr	x9, [x9, #384]
    2dec:	cmp	x9, x8
    2df0:	b.ls	348c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd78>  // b.plast
    2df4:	b	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>
    2df8:	mov	x18, x8
    2dfc:	ldr	x0, [x18, #40]!
    2e00:	cbnz	x0, 2e10 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6fc>
    2e04:	mov	x18, x8
    2e08:	ldr	x0, [x18, #32]!
    2e0c:	cbz	x0, 36e0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfcc>
    2e10:	mov	x1, x18
    2e14:	mov	x18, x0
    2e18:	mov	x17, x0
    2e1c:	ldr	x0, [x18, #40]!
    2e20:	cbnz	x0, 2e10 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6fc>
    2e24:	mov	x18, x17
    2e28:	ldr	x0, [x18, #32]!
    2e2c:	cbnz	x0, 2e10 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6fc>
    2e30:	cmp	x15, x1
    2e34:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    2e38:	str	xzr, [x1]
    2e3c:	cbz	x16, 3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe10>
    2e40:	ldr	x18, [x8, #56]
    2e44:	add	x0, x11, x18, lsl #3
    2e48:	ldr	x1, [x0, #592]
    2e4c:	cmp	x8, x1
    2e50:	b.eq	33ac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc98>  // b.none
    2e54:	cmp	x15, x16
    2e58:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    2e5c:	ldr	x13, [x16, #32]
    2e60:	mov	w18, #0x28                  	// #40
    2e64:	cmp	x13, x8
    2e68:	mov	w13, #0x20                  	// #32
    2e6c:	csel	x13, x13, x18, eq  // eq = none
    2e70:	str	x17, [x16, x13]
    2e74:	cbnz	x17, 33bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xca8>
    2e78:	b	3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe10>
    2e7c:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2e80:	add	x10, x10, #0x180
    2e84:	add	x8, x0, x9
    2e88:	str	x0, [x10]
    2e8c:	str	x0, [x10, #896]
    2e90:	str	x9, [x10, #904]
    2e94:	ldur	x11, [x8, #-8]
    2e98:	str	x11, [x10, #920]
    2e9c:	add	x10, x0, x11
    2ea0:	add	x10, x10, x9
    2ea4:	ldur	x10, [x10, #-8]
    2ea8:	cmp	x10, x11
    2eac:	b.ne	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.any
    2eb0:	stur	xzr, [x8, #-8]
    2eb4:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    2eb8:	add	x8, x8, #0x178
    2ebc:	add	x11, x8, #0x30
    2ec0:	dup	v1.2d, x11
    2ec4:	add	x11, x8, #0x100
    2ec8:	dup	v0.2d, x11
    2ecc:	add	x11, x8, #0x120
    2ed0:	dup	v2.2d, x11
    2ed4:	add	x11, x8, #0x110
    2ed8:	dup	v3.2d, x11
    2edc:	add	x11, x8, #0x140
    2ee0:	dup	v4.2d, x11
    2ee4:	add	x11, x8, #0x130
    2ee8:	dup	v5.2d, x11
    2eec:	add	x11, x8, #0x160
    2ef0:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    2ef4:	dup	v6.2d, x11
    2ef8:	add	x11, x8, #0x150
    2efc:	ldrb	w10, [x10, #1448]
    2f00:	dup	v7.2d, x11
    2f04:	add	x11, x8, #0x180
    2f08:	dup	v16.2d, x11
    2f0c:	add	x11, x8, #0x170
    2f10:	dup	v17.2d, x11
    2f14:	add	x11, x8, #0x1a0
    2f18:	dup	v18.2d, x11
    2f1c:	mov	w11, #0x5858                	// #22616
    2f20:	movk	w11, #0x5858, lsl #16
    2f24:	cmp	w10, #0x0
    2f28:	mov	x10, x8
    2f2c:	csel	x11, x11, xzr, ne  // ne = any
    2f30:	str	x11, [x8, #40]
    2f34:	str	q1, [x10, #64]!
    2f38:	mov	x11, x8
    2f3c:	dup	v1.2d, x10
    2f40:	str	q1, [x11, #80]!
    2f44:	mov	x10, x8
    2f48:	dup	v1.2d, x11
    2f4c:	str	q1, [x10, #96]!
    2f50:	mov	x11, x8
    2f54:	dup	v1.2d, x10
    2f58:	str	q1, [x11, #112]!
    2f5c:	mov	x10, x8
    2f60:	dup	v1.2d, x11
    2f64:	str	q1, [x10, #128]!
    2f68:	mov	x11, x8
    2f6c:	dup	v1.2d, x10
    2f70:	str	q1, [x11, #144]!
    2f74:	mov	x10, x8
    2f78:	dup	v1.2d, x11
    2f7c:	str	q1, [x10, #160]!
    2f80:	mov	x11, x8
    2f84:	dup	v1.2d, x10
    2f88:	str	q1, [x11, #176]!
    2f8c:	mov	x10, x8
    2f90:	dup	v1.2d, x11
    2f94:	str	q1, [x10, #192]!
    2f98:	mov	x11, x8
    2f9c:	dup	v1.2d, x10
    2fa0:	str	q1, [x11, #208]!
    2fa4:	mov	x10, x8
    2fa8:	dup	v1.2d, x11
    2fac:	str	q1, [x10, #224]!
    2fb0:	mov	x11, x8
    2fb4:	dup	v1.2d, x10
    2fb8:	add	x10, x8, #0x190
    2fbc:	str	q1, [x11, #240]!
    2fc0:	dup	v1.2d, x10
    2fc4:	add	x10, x8, #0x1c0
    2fc8:	stp	q3, q2, [x8, #288]
    2fcc:	dup	v2.2d, x10
    2fd0:	add	x10, x8, #0x1b0
    2fd4:	dup	v3.2d, x10
    2fd8:	add	x10, x8, #0x1e0
    2fdc:	stp	q5, q4, [x8, #320]
    2fe0:	dup	v4.2d, x10
    2fe4:	add	x10, x8, #0x1d0
    2fe8:	dup	v5.2d, x10
    2fec:	add	x10, x8, #0x200
    2ff0:	stp	q1, q18, [x8, #416]
    2ff4:	dup	v1.2d, x10
    2ff8:	add	x10, x8, #0x1f0
    2ffc:	stp	q3, q2, [x8, #448]
    3000:	dup	v2.2d, x10
    3004:	add	x10, x8, #0x220
    3008:	dup	v3.2d, x10
    300c:	add	x10, x8, #0x210
    3010:	stp	q2, q1, [x8, #512]
    3014:	dup	v1.2d, x10
    3018:	add	x10, x0, #0x10
    301c:	tst	x10, #0x7
    3020:	neg	w10, w10
    3024:	and	x10, x10, #0x7
    3028:	sub	x9, x9, #0x48
    302c:	csel	x10, xzr, x10, eq  // eq = none
    3030:	stp	q1, q3, [x8, #544]
    3034:	dup	v1.2d, x11
    3038:	add	x11, x0, x10
    303c:	sub	x10, x9, x10
    3040:	str	x10, [x8]
    3044:	orr	x10, x10, #0x1
    3048:	stp	q7, q6, [x8, #352]
    304c:	stp	q17, q16, [x8, #384]
    3050:	stp	q5, q4, [x8, #480]
    3054:	str	x11, [x8, #24]
    3058:	stp	q1, q0, [x8, #256]
    305c:	str	x10, [x11, #8]
    3060:	mov	w10, #0x48                  	// #72
    3064:	add	x9, x0, x9
    3068:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    306c:	str	x10, [x9, #8]
    3070:	ldrb	w9, [x11, #1480]
    3074:	cmp	w9, #0x0
    3078:	mov	w9, #0x200000              	// #2097152
    307c:	csel	x9, x9, xzr, ne  // ne = any
    3080:	str	x9, [x8, #32]
    3084:	b	3908 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f4>
    3088:	add	x14, x0, x9
    308c:	ldr	x15, [x8, #24]
    3090:	ldur	x14, [x14, #-8]
    3094:	cmp	x14, x15
    3098:	cset	w14, ne  // ne = any
    309c:	eor	w15, w12, #0x1
    30a0:	orr	w14, w14, w15
    30a4:	tbnz	w14, #0, 3124 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa10>
    30a8:	cmp	x0, x11
    30ac:	b.ls	3124 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa10>  // b.plast
    30b0:	cmp	x13, x11
    30b4:	b.hi	3124 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa10>  // b.pmore
    30b8:	add	x10, x10, x9
    30bc:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    30c0:	add	x12, x12, #0x178
    30c4:	str	x10, [x8, #8]
    30c8:	ldr	x10, [x12]
    30cc:	add	x8, x11, #0x10
    30d0:	tst	x8, #0x7
    30d4:	neg	w8, w8
    30d8:	and	x8, x8, #0x7
    30dc:	csel	x8, xzr, x8, eq  // eq = none
    30e0:	add	x9, x10, x9
    30e4:	add	x10, x11, x8
    30e8:	sub	x8, x9, x8
    30ec:	str	x8, [x12]
    30f0:	orr	x8, x8, #0x1
    30f4:	str	x10, [x12, #24]
    30f8:	str	x8, [x10, #8]
    30fc:	mov	w8, #0x48                  	// #72
    3100:	add	x9, x11, x9
    3104:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    3108:	str	x8, [x9, #8]
    310c:	ldrb	w8, [x10, #1480]
    3110:	cmp	w8, #0x0
    3114:	mov	w8, #0x200000              	// #2097152
    3118:	csel	x8, x8, xzr, ne  // ne = any
    311c:	str	x8, [x12, #32]
    3120:	b	3908 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f4>
    3124:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3128:	ldr	x14, [x8, #384]
    312c:	cmp	x0, x14
    3130:	b.cs	313c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa28>  // b.hs, b.nlast
    3134:	mov	x14, x0
    3138:	str	x0, [x8, #384]
    313c:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    3140:	add	x10, x0, x9
    3144:	add	x13, x13, #0x500
    3148:	ldr	x15, [x13]
    314c:	cmp	x15, x10
    3150:	b.eq	3160 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa4c>  // b.none
    3154:	ldr	x13, [x13, #16]
    3158:	cbnz	x13, 3148 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa34>
    315c:	b	323c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb28>
    3160:	ldur	x15, [x10, #-8]
    3164:	ldr	x16, [x13, #24]
    3168:	cmp	x15, x16
    316c:	cset	w15, eq  // eq = none
    3170:	and	w12, w15, w12
    3174:	tbz	w12, #0, 323c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb28>
    3178:	ldr	x12, [x13, #8]
    317c:	add	x9, x12, x9
    3180:	add	x12, x0, #0x10
    3184:	tst	x12, #0x7
    3188:	neg	w12, w12
    318c:	stp	x0, x9, [x13]
    3190:	add	x9, x10, #0x10
    3194:	and	x12, x12, #0x7
    3198:	csel	x12, xzr, x12, eq  // eq = none
    319c:	tst	x9, #0x7
    31a0:	neg	w9, w9
    31a4:	and	x15, x9, #0x7
    31a8:	add	x9, x0, x12
    31ac:	csel	x12, xzr, x15, eq  // eq = none
    31b0:	add	x12, x10, x12
    31b4:	sub	x15, x12, x9
    31b8:	orr	x13, x22, #0x3
    31bc:	add	x10, x9, x22
    31c0:	cmp	x11, x12
    31c4:	sub	x11, x15, x22
    31c8:	str	x13, [x9, #8]
    31cc:	b.eq	36ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfd8>  // b.none
    31d0:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x13, [x13, #392]
    31d8:	cmp	x13, x12
    31dc:	b.eq	398c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1278>  // b.none
    31e0:	ldr	x13, [x12, #8]
    31e4:	tbnz	w13, #1, 3b0c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13f8>
    31e8:	cmp	x13, #0xff
    31ec:	b.hi	39c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12b0>  // b.pmore
    31f0:	ldp	x15, x16, [x12, #16]
    31f4:	lsr	x17, x13, #3
    31f8:	cmp	x15, x16
    31fc:	b.eq	39f0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12dc>  // b.none
    3200:	adrp	x18, 17000 <memcpy@GLIBC_2.17>
    3204:	add	x18, x18, #0x168
    3208:	add	x17, x18, x17, lsl #4
    320c:	add	x17, x17, #0x40
    3210:	cmp	x15, x17
    3214:	b.eq	3220 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb0c>  // b.none
    3218:	cmp	x14, x15
    321c:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3220:	cmp	x16, x17
    3224:	b.eq	3230 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb1c>  // b.none
    3228:	cmp	x14, x16
    322c:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3230:	str	x16, [x15, #24]
    3234:	str	x15, [x16, #16]
    3238:	b	3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    323c:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3240:	add	x12, x12, #0x500
    3244:	b	324c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb38>
    3248:	ldr	x12, [x12, #16]
    324c:	ldr	x13, [x12]
    3250:	cmp	x13, x11
    3254:	b.hi	3248 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb34>  // b.pmore
    3258:	ldr	x14, [x12, #8]
    325c:	add	x13, x13, x14
    3260:	cmp	x13, x11
    3264:	b.ls	3248 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb34>  // b.plast
    3268:	sub	x14, x13, #0x3f
    326c:	add	x16, x0, #0x10
    3270:	neg	w18, w14
    3274:	tst	x14, #0x7
    3278:	neg	w14, w16
    327c:	and	x18, x18, #0x7
    3280:	and	x1, x14, #0x7
    3284:	csel	x14, xzr, x18, eq  // eq = none
    3288:	add	x14, x13, x14
    328c:	add	x12, x11, #0x20
    3290:	sub	x14, x14, #0x4f
    3294:	cmp	x14, x12
    3298:	csel	x14, x11, x14, cc  // cc = lo, ul, last
    329c:	tst	x16, #0x7
    32a0:	sub	x15, x9, #0x48
    32a4:	adrp	x17, 17000 <memcpy@GLIBC_2.17>
    32a8:	csel	x16, xzr, x1, eq  // eq = none
    32ac:	add	x17, x17, #0x178
    32b0:	add	x18, x0, x16
    32b4:	sub	x16, x15, x16
    32b8:	str	x16, [x17]
    32bc:	orr	x16, x16, #0x1
    32c0:	str	x18, [x17, #24]
    32c4:	str	x16, [x18, #8]
    32c8:	mov	w16, #0x48                  	// #72
    32cc:	add	x15, x0, x15
    32d0:	adrp	x18, 17000 <memcpy@GLIBC_2.17>
    32d4:	str	x16, [x15, #8]
    32d8:	ldrb	w15, [x18, #1480]
    32dc:	mov	w16, #0x200000              	// #2097152
    32e0:	mov	w18, #0x2b                  	// #43
    32e4:	cmp	w15, #0x0
    32e8:	csel	x16, x16, xzr, ne  // ne = any
    32ec:	add	x15, x17, #0x388
    32f0:	str	x16, [x17, #32]
    32f4:	str	x18, [x14, #8]
    32f8:	ldp	q1, q0, [x15]
    32fc:	stp	q1, q0, [x14, #16]
    3300:	str	x0, [x17, #904]
    3304:	str	x9, [x17, #912]
    3308:	ldur	x15, [x10, #-8]
    330c:	add	x16, x0, x15
    3310:	str	x15, [x17, #928]
    3314:	add	x9, x16, x9
    3318:	ldur	x9, [x9, #-8]
    331c:	cmp	x9, x15
    3320:	b.ne	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.any
    3324:	add	x15, x14, #0x10
    3328:	stur	xzr, [x10, #-8]
    332c:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    3330:	add	x9, x14, #0x30
    3334:	str	x15, [x10, #1296]
    3338:	mov	w10, #0xb                   	// #11
    333c:	str	x10, [x9], #8
    3340:	cmp	x13, x9
    3344:	b.hi	333c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc28>  // b.pmore
    3348:	subs	x9, x14, x11
    334c:	b.eq	3908 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f4>  // b.none
    3350:	ldr	x10, [x14, #8]
    3354:	orr	x13, x9, #0x1
    3358:	cmp	x9, #0xff
    335c:	and	x10, x10, #0xfffffffffffffffe
    3360:	str	x10, [x14, #8]
    3364:	str	x13, [x11, #8]
    3368:	str	x9, [x14]
    336c:	b.hi	34ac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd98>  // b.pmore
    3370:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3374:	add	x12, x12, #0x168
    3378:	ldr	w10, [x12]
    337c:	lsr	x9, x9, #3
    3380:	add	x13, x12, x9, lsl #4
    3384:	mov	w12, #0x1                   	// #1
    3388:	lsl	w12, w12, w9
    338c:	tst	w10, w12
    3390:	add	x9, x13, #0x40
    3394:	b.eq	3714 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1000>  // b.none
    3398:	ldr	x10, [x9, #16]
    339c:	ldr	x8, [x8, #384]
    33a0:	cmp	x8, x10
    33a4:	b.ls	3724 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1010>  // b.plast
    33a8:	b	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>
    33ac:	add	x15, x0, #0x250
    33b0:	str	x17, [x15]
    33b4:	cbz	x17, 3514 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe00>
    33b8:	ldr	x15, [x14, #384]
    33bc:	cmp	x15, x17
    33c0:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    33c4:	str	x16, [x17, #48]
    33c8:	ldr	x13, [x8, #32]
    33cc:	cbz	x13, 33e0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xccc>
    33d0:	cmp	x15, x13
    33d4:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    33d8:	str	x13, [x17, #32]
    33dc:	str	x17, [x13, #48]
    33e0:	ldr	x13, [x8, #40]
    33e4:	cbz	x13, 3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe10>
    33e8:	cmp	x15, x13
    33ec:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    33f0:	str	x13, [x17, #40]
    33f4:	str	x17, [x13, #48]
    33f8:	b	3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe10>
    33fc:	mov	x2, x11
    3400:	ldr	x3, [x2, #40]!
    3404:	cbnz	x3, 3414 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd00>
    3408:	mov	x2, x11
    340c:	ldr	x3, [x2, #32]!
    3410:	cbz	x3, 39b8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12a4>
    3414:	mov	x4, x2
    3418:	mov	x2, x3
    341c:	mov	x1, x3
    3420:	ldr	x3, [x2, #40]!
    3424:	cbnz	x3, 3414 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd00>
    3428:	mov	x2, x1
    342c:	ldr	x3, [x2, #32]!
    3430:	cbnz	x3, 3414 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd00>
    3434:	cmp	x18, x4
    3438:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    343c:	str	xzr, [x4]
    3440:	cbz	x0, 3744 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1030>
    3444:	ldr	x2, [x11, #56]
    3448:	add	x3, x13, x2, lsl #3
    344c:	ldr	x4, [x3, #592]
    3450:	cmp	x11, x4
    3454:	b.eq	34c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdb0>  // b.none
    3458:	cmp	x18, x0
    345c:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3460:	ldr	x16, [x0, #32]
    3464:	mov	w17, #0x28                  	// #40
    3468:	cmp	x16, x11
    346c:	mov	w16, #0x20                  	// #32
    3470:	csel	x16, x16, x17, eq  // eq = none
    3474:	str	x1, [x0, x16]
    3478:	cbnz	x1, 34d4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdc0>
    347c:	b	3744 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1030>
    3480:	orr	w9, w9, w11
    3484:	str	w9, [x8, #360]
    3488:	mov	x8, x10
    348c:	str	x13, [x10, #16]
    3490:	str	x13, [x8, #24]
    3494:	stp	x8, x10, [x13, #16]
    3498:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    349c:	add	x8, x8, #0x170
    34a0:	str	x12, [x8]
    34a4:	str	x14, [x8, #24]
    34a8:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    34ac:	lsr	x10, x9, #8
    34b0:	cbz	x10, 383c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1128>
    34b4:	lsr	x13, x9, #24
    34b8:	cbz	x13, 37e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10d0>
    34bc:	mov	w10, #0x1f                  	// #31
    34c0:	b	383c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1128>
    34c4:	add	x18, x3, #0x250
    34c8:	str	x1, [x18]
    34cc:	cbz	x1, 3734 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1020>
    34d0:	ldr	x18, [x15, #384]
    34d4:	cmp	x18, x1
    34d8:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    34dc:	str	x0, [x1, #48]
    34e0:	ldr	x16, [x11, #32]
    34e4:	cbz	x16, 34f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xde4>
    34e8:	cmp	x18, x16
    34ec:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    34f0:	str	x16, [x1, #32]
    34f4:	str	x1, [x16, #48]
    34f8:	ldr	x16, [x11, #40]
    34fc:	cbz	x16, 3744 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1030>
    3500:	cmp	x18, x16
    3504:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3508:	str	x16, [x1, #40]
    350c:	str	x1, [x16, #48]
    3510:	b	3744 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1030>
    3514:	mov	w15, #0x1                   	// #1
    3518:	lsl	w15, w15, w18
    351c:	bic	w13, w13, w15
    3520:	str	w13, [x10, #364]
    3524:	cmp	x9, #0x1f
    3528:	b.hi	353c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe28>  // b.pmore
    352c:	add	x9, x9, x22
    3530:	orr	x10, x9, #0x3
    3534:	str	x10, [x8, #8]
    3538:	b	2cd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5c0>
    353c:	orr	x13, x22, #0x3
    3540:	orr	x15, x9, #0x1
    3544:	cmp	x9, #0xff
    3548:	str	x13, [x8, #8]
    354c:	str	x15, [x12, #8]
    3550:	str	x9, [x12, x9]
    3554:	b.hi	358c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe78>  // b.pmore
    3558:	ldr	w10, [x11]
    355c:	lsr	x9, x9, #3
    3560:	add	x13, x11, x9, lsl #4
    3564:	mov	w11, #0x1                   	// #1
    3568:	lsl	w11, w11, w9
    356c:	tst	w10, w11
    3570:	add	x9, x13, #0x40
    3574:	b.eq	35a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe90>  // b.none
    3578:	ldr	x10, [x9, #16]
    357c:	ldr	x11, [x14, #384]
    3580:	cmp	x11, x10
    3584:	b.ls	35b4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xea0>  // b.plast
    3588:	b	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>
    358c:	lsr	x13, x9, #8
    3590:	cbz	x13, 361c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf08>
    3594:	lsr	x15, x9, #24
    3598:	cbz	x15, 35c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xeb0>
    359c:	mov	w13, #0x1f                  	// #31
    35a0:	b	361c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf08>
    35a4:	orr	w10, w10, w11
    35a8:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    35ac:	str	w10, [x11, #360]
    35b0:	mov	x10, x9
    35b4:	str	x12, [x9, #16]
    35b8:	str	x12, [x10, #24]
    35bc:	stp	x10, x9, [x12, #16]
    35c0:	b	2ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d0>
    35c4:	mov	w15, #0xfff00               	// #1048320
    35c8:	add	w15, w13, w15
    35cc:	lsr	w15, w15, #16
    35d0:	and	w15, w15, #0x8
    35d4:	lsl	w13, w13, w15
    35d8:	add	w16, w13, #0x7f, lsl #12
    35dc:	lsr	w16, w16, #16
    35e0:	and	w16, w16, #0x4
    35e4:	lsl	w13, w13, w16
    35e8:	orr	w15, w16, w15
    35ec:	add	w16, w13, #0x3c, lsl #12
    35f0:	lsr	w16, w16, #16
    35f4:	and	w16, w16, #0x2
    35f8:	lsl	w13, w13, w16
    35fc:	orr	w15, w15, w16
    3600:	lsr	w13, w13, #15
    3604:	sub	w13, w13, w15
    3608:	lsl	w15, w13, #1
    360c:	add	w16, w13, #0x15
    3610:	add	w13, w15, #0x1c
    3614:	lsr	x15, x9, x16
    3618:	bfxil	x13, x15, #0, #1
    361c:	str	x13, [x12, #56]
    3620:	stp	xzr, xzr, [x12, #32]
    3624:	ldr	w15, [x11, #4]
    3628:	mov	w16, #0x1                   	// #1
    362c:	add	x11, x11, x13, lsl #3
    3630:	lsl	w16, w16, w13
    3634:	tst	w15, w16
    3638:	add	x11, x11, #0x250
    363c:	b.eq	369c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf88>  // b.none
    3640:	ldr	x15, [x11]
    3644:	mov	w10, #0x39                  	// #57
    3648:	sub	x10, x10, x13, lsr #1
    364c:	cmp	x13, #0x1f
    3650:	csel	x10, xzr, x10, eq  // eq = none
    3654:	lsl	x11, x9, x10
    3658:	ldr	x13, [x15, #8]
    365c:	mov	x10, x15
    3660:	and	x13, x13, #0xfffffffffffffffc
    3664:	cmp	x13, x9
    3668:	b.eq	36b4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfa0>  // b.none
    366c:	lsr	x13, x11, #60
    3670:	and	x13, x13, #0x8
    3674:	add	x13, x10, x13
    3678:	ldr	x15, [x13, #32]!
    367c:	lsl	x11, x11, #1
    3680:	cbnz	x15, 3658 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf44>
    3684:	ldr	x9, [x14, #384]
    3688:	cmp	x9, x13
    368c:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3690:	str	x12, [x13]
    3694:	str	x10, [x12, #48]
    3698:	b	36ac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf98>
    369c:	orr	w9, w15, w16
    36a0:	str	w9, [x10, #364]
    36a4:	str	x12, [x11]
    36a8:	str	x11, [x12, #48]
    36ac:	stp	x12, x12, [x12, #16]
    36b0:	b	2ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d0>
    36b4:	ldr	x9, [x10, #16]
    36b8:	ldr	x11, [x14, #384]
    36bc:	cmp	x11, x9
    36c0:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    36c4:	cmp	x11, x10
    36c8:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    36cc:	str	x12, [x9, #24]
    36d0:	str	x12, [x10, #16]
    36d4:	stp	x9, x10, [x12, #16]
    36d8:	str	xzr, [x12, #48]
    36dc:	b	2ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5d0>
    36e0:	mov	x17, xzr
    36e4:	cbnz	x16, 2e40 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x72c>
    36e8:	b	3524 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe10>
    36ec:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    36f0:	add	x8, x8, #0x178
    36f4:	ldr	x12, [x8]
    36f8:	str	x10, [x8, #24]
    36fc:	add	x20, x9, #0x10
    3700:	add	x11, x12, x11
    3704:	str	x11, [x8]
    3708:	orr	x8, x11, #0x1
    370c:	str	x8, [x10, #8]
    3710:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    3714:	orr	w8, w10, w12
    3718:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    371c:	str	w8, [x10, #360]
    3720:	mov	x10, x9
    3724:	str	x11, [x9, #16]
    3728:	str	x11, [x10, #24]
    372c:	stp	x10, x9, [x11, #16]
    3730:	b	3908 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f4>
    3734:	mov	w18, #0x1                   	// #1
    3738:	lsl	w18, w18, w2
    373c:	bic	w17, w17, w18
    3740:	str	w17, [x16, #364]
    3744:	cmp	x12, #0x1f
    3748:	b.hi	3768 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1054>  // b.pmore
    374c:	add	x8, x12, x22
    3750:	orr	x9, x8, #0x3
    3754:	str	x9, [x11, #8]
    3758:	add	x8, x11, x8
    375c:	ldr	x9, [x8, #8]
    3760:	add	x20, x11, #0x10
    3764:	b	28d4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1c0>
    3768:	orr	x16, x22, #0x3
    376c:	orr	x17, x12, #0x1
    3770:	str	x16, [x11, #8]
    3774:	str	x17, [x14, #8]
    3778:	str	x12, [x14, x12]
    377c:	cbz	x10, 37cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10b8>
    3780:	ldr	x16, [x13, #32]
    3784:	lsr	x10, x10, #3
    3788:	mov	w17, #0x1                   	// #1
    378c:	add	x18, x13, x10, lsl #4
    3790:	lsl	w13, w17, w10
    3794:	tst	w13, w9
    3798:	add	x10, x18, #0x40
    379c:	b.eq	37b4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10a0>  // b.none
    37a0:	ldr	x8, [x10, #16]
    37a4:	ldr	x9, [x15, #384]
    37a8:	cmp	x9, x8
    37ac:	b.ls	37c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10ac>  // b.plast
    37b0:	b	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>
    37b4:	orr	w9, w13, w9
    37b8:	str	w9, [x8, #360]
    37bc:	mov	x8, x10
    37c0:	str	x16, [x10, #16]
    37c4:	str	x16, [x8, #24]
    37c8:	stp	x8, x10, [x16, #16]
    37cc:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    37d0:	add	x8, x8, #0x170
    37d4:	str	x12, [x8]
    37d8:	str	x14, [x8, #24]
    37dc:	add	x20, x11, #0x10
    37e0:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    37e4:	mov	w13, #0xfff00               	// #1048320
    37e8:	add	w13, w10, w13
    37ec:	lsr	w13, w13, #16
    37f0:	and	w13, w13, #0x8
    37f4:	lsl	w10, w10, w13
    37f8:	add	w14, w10, #0x7f, lsl #12
    37fc:	lsr	w14, w14, #16
    3800:	and	w14, w14, #0x4
    3804:	lsl	w10, w10, w14
    3808:	orr	w13, w14, w13
    380c:	add	w14, w10, #0x3c, lsl #12
    3810:	lsr	w14, w14, #16
    3814:	and	w14, w14, #0x2
    3818:	lsl	w10, w10, w14
    381c:	orr	w13, w13, w14
    3820:	lsr	w10, w10, #15
    3824:	sub	w10, w10, w13
    3828:	lsl	w13, w10, #1
    382c:	add	w14, w10, #0x15
    3830:	add	w10, w13, #0x1c
    3834:	lsr	x13, x9, x14
    3838:	bfxil	x10, x13, #0, #1
    383c:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    3840:	add	x14, x14, #0x168
    3844:	str	x10, [x11, #56]
    3848:	stp	xzr, xzr, [x12]
    384c:	ldr	w13, [x14, #4]
    3850:	add	x12, x14, x10, lsl #3
    3854:	mov	w14, #0x1                   	// #1
    3858:	lsl	w14, w14, w10
    385c:	tst	w13, w14
    3860:	add	x12, x12, #0x250
    3864:	b.eq	38c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11b0>  // b.none
    3868:	ldr	x13, [x12]
    386c:	mov	w12, #0x39                  	// #57
    3870:	sub	x12, x12, x10, lsr #1
    3874:	cmp	x10, #0x1f
    3878:	csel	x10, xzr, x12, eq  // eq = none
    387c:	lsl	x12, x9, x10
    3880:	mov	x10, x13
    3884:	ldr	x13, [x13, #8]
    3888:	and	x13, x13, #0xfffffffffffffffc
    388c:	cmp	x13, x9
    3890:	b.eq	38e0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11cc>  // b.none
    3894:	lsr	x13, x12, #60
    3898:	and	x13, x13, #0x8
    389c:	add	x14, x10, x13
    38a0:	ldr	x13, [x14, #32]!
    38a4:	lsl	x12, x12, #1
    38a8:	cbnz	x13, 3880 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x116c>
    38ac:	ldr	x8, [x8, #384]
    38b0:	cmp	x8, x14
    38b4:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    38b8:	str	x11, [x14]
    38bc:	str	x10, [x11, #48]
    38c0:	b	38d8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11c4>
    38c4:	orr	w8, w13, w14
    38c8:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    38cc:	str	w8, [x9, #364]
    38d0:	str	x11, [x12]
    38d4:	str	x12, [x11, #48]
    38d8:	stp	x11, x11, [x11, #16]
    38dc:	b	3908 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11f4>
    38e0:	ldr	x9, [x10, #16]
    38e4:	ldr	x8, [x8, #384]
    38e8:	cmp	x8, x9
    38ec:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    38f0:	cmp	x8, x10
    38f4:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    38f8:	str	x11, [x9, #24]
    38fc:	str	x11, [x10, #16]
    3900:	stp	x9, x10, [x11, #16]
    3904:	str	xzr, [x11, #48]
    3908:	ldr	x8, [x23, #376]
    390c:	subs	x8, x8, x22
    3910:	b.hi	2b88 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x474>  // b.pmore
    3914:	bl	1af0 <__errno_location@plt>
    3918:	mov	w8, #0xc                   	// #12
    391c:	mov	x20, xzr
    3920:	str	w8, [x0]
    3924:	ldrb	w8, [x21, #1224]
    3928:	tbz	w8, #1, 3938 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1224>
    392c:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    3930:	add	x0, x0, #0x4d0
    3934:	bl	1b40 <pthread_mutex_unlock@plt>
    3938:	cbz	x20, 3974 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1260>
    393c:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3940:	add	x8, x8, #0x500
    3944:	b	394c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1238>
    3948:	ldr	x8, [x8, #16]
    394c:	ldr	x9, [x8]
    3950:	cmp	x9, x20
    3954:	b.hi	3948 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1234>  // b.pmore
    3958:	ldr	x10, [x8, #8]
    395c:	add	x9, x9, x10
    3960:	cmp	x9, x20
    3964:	b.ls	3948 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1234>  // b.plast
    3968:	ldr	x8, [x8, #24]
    396c:	add	x8, x20, x8
    3970:	str	x8, [x19]
    3974:	mov	x0, x20
    3978:	ldp	x20, x19, [sp, #48]
    397c:	ldp	x22, x21, [sp, #32]
    3980:	ldp	x24, x23, [sp, #16]
    3984:	ldp	x29, x30, [sp], #64
    3988:	ret
    398c:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3990:	add	x8, x8, #0x170
    3994:	ldr	x12, [x8]
    3998:	str	x10, [x8, #24]
    399c:	add	x20, x9, #0x10
    39a0:	add	x11, x12, x11
    39a4:	str	x11, [x8]
    39a8:	orr	x8, x11, #0x1
    39ac:	str	x8, [x10, #8]
    39b0:	str	x11, [x10, x11]
    39b4:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    39b8:	mov	x1, xzr
    39bc:	cbnz	x0, 3444 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd30>
    39c0:	b	3744 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1030>
    39c4:	ldr	x16, [x12, #24]
    39c8:	ldr	x15, [x12, #48]
    39cc:	cmp	x16, x12
    39d0:	b.eq	3a0c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12f8>  // b.none
    39d4:	ldr	x17, [x12, #16]
    39d8:	cmp	x14, x17
    39dc:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    39e0:	str	x16, [x17, #24]
    39e4:	str	x17, [x16, #16]
    39e8:	cbnz	x15, 3a50 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x133c>
    39ec:	b	3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    39f0:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    39f4:	ldr	w15, [x14, #360]
    39f8:	mov	w16, #0x1                   	// #1
    39fc:	lsl	w16, w16, w17
    3a00:	bic	w15, w15, w16
    3a04:	str	w15, [x14, #360]
    3a08:	b	3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    3a0c:	mov	x17, x12
    3a10:	ldr	x18, [x17, #40]!
    3a14:	cbnz	x18, 3a20 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x130c>
    3a18:	ldr	x18, [x17, #-8]!
    3a1c:	cbz	x18, 3cd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15c0>
    3a20:	mov	x0, x17
    3a24:	mov	x17, x18
    3a28:	mov	x16, x18
    3a2c:	ldr	x18, [x17, #40]!
    3a30:	cbnz	x18, 3a20 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x130c>
    3a34:	mov	x17, x16
    3a38:	ldr	x18, [x17, #32]!
    3a3c:	cbnz	x18, 3a20 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x130c>
    3a40:	cmp	x14, x0
    3a44:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3a48:	str	xzr, [x0]
    3a4c:	cbz	x15, 3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    3a50:	ldr	x14, [x12, #56]
    3a54:	adrp	x17, 17000 <memcpy@GLIBC_2.17>
    3a58:	add	x17, x17, #0x168
    3a5c:	add	x17, x17, x14, lsl #3
    3a60:	ldr	x18, [x17, #592]
    3a64:	cmp	x18, x12
    3a68:	b.eq	3a98 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1384>  // b.none
    3a6c:	ldr	x14, [x8, #384]
    3a70:	cmp	x14, x15
    3a74:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3a78:	ldr	x17, [x15, #32]
    3a7c:	mov	w18, #0x28                  	// #40
    3a80:	cmp	x17, x12
    3a84:	mov	w17, #0x20                  	// #32
    3a88:	csel	x17, x17, x18, eq  // eq = none
    3a8c:	str	x16, [x15, x17]
    3a90:	cbnz	x16, 3aa8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1394>
    3a94:	b	3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    3a98:	add	x17, x17, #0x250
    3a9c:	str	x16, [x17]
    3aa0:	cbz	x16, 3ae8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13d4>
    3aa4:	ldr	x14, [x8, #384]
    3aa8:	cmp	x14, x16
    3aac:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3ab0:	str	x15, [x16, #48]
    3ab4:	ldr	x15, [x12, #32]
    3ab8:	cbz	x15, 3acc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13b8>
    3abc:	cmp	x14, x15
    3ac0:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3ac4:	str	x15, [x16, #32]
    3ac8:	str	x16, [x15, #48]
    3acc:	ldr	x15, [x12, #40]
    3ad0:	cbz	x15, 3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    3ad4:	cmp	x14, x15
    3ad8:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3adc:	str	x15, [x16, #40]
    3ae0:	str	x16, [x15, #48]
    3ae4:	b	3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    3ae8:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    3aec:	ldr	w16, [x15, #364]
    3af0:	mov	w17, #0x1                   	// #1
    3af4:	lsl	w14, w17, w14
    3af8:	bic	w14, w16, w14
    3afc:	str	w14, [x15, #364]
    3b00:	and	x13, x13, #0xfffffffffffffffc
    3b04:	add	x12, x12, x13
    3b08:	add	x11, x13, x11
    3b0c:	ldr	x13, [x12, #8]
    3b10:	orr	x14, x11, #0x1
    3b14:	cmp	x11, #0xff
    3b18:	and	x13, x13, #0xfffffffffffffffe
    3b1c:	str	x13, [x12, #8]
    3b20:	str	x14, [x10, #8]
    3b24:	str	x11, [x10, x11]
    3b28:	b.hi	3b68 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1454>  // b.pmore
    3b2c:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    3b30:	add	x13, x13, #0x168
    3b34:	ldr	w12, [x13]
    3b38:	lsr	x11, x11, #3
    3b3c:	add	x14, x13, x11, lsl #4
    3b40:	mov	w13, #0x1                   	// #1
    3b44:	lsl	w13, w13, w11
    3b48:	tst	w12, w13
    3b4c:	add	x11, x14, #0x40
    3b50:	b.eq	3b80 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x146c>  // b.none
    3b54:	ldr	x12, [x11, #16]
    3b58:	ldr	x8, [x8, #384]
    3b5c:	cmp	x8, x12
    3b60:	b.ls	3b90 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x147c>  // b.plast
    3b64:	b	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>
    3b68:	lsr	x12, x11, #8
    3b6c:	cbz	x12, 3bfc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14e8>
    3b70:	lsr	x13, x11, #24
    3b74:	cbz	x13, 3ba4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1490>
    3b78:	mov	w12, #0x1f                  	// #31
    3b7c:	b	3bfc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14e8>
    3b80:	orr	w8, w12, w13
    3b84:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3b88:	str	w8, [x12, #360]
    3b8c:	mov	x12, x11
    3b90:	str	x10, [x11, #16]
    3b94:	str	x10, [x12, #24]
    3b98:	stp	x12, x11, [x10, #16]
    3b9c:	add	x20, x9, #0x10
    3ba0:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    3ba4:	mov	w13, #0xfff00               	// #1048320
    3ba8:	add	w13, w12, w13
    3bac:	lsr	w13, w13, #16
    3bb0:	and	w13, w13, #0x8
    3bb4:	lsl	w12, w12, w13
    3bb8:	add	w14, w12, #0x7f, lsl #12
    3bbc:	lsr	w14, w14, #16
    3bc0:	and	w14, w14, #0x4
    3bc4:	lsl	w12, w12, w14
    3bc8:	orr	w13, w14, w13
    3bcc:	add	w14, w12, #0x3c, lsl #12
    3bd0:	lsr	w14, w14, #16
    3bd4:	and	w14, w14, #0x2
    3bd8:	lsl	w12, w12, w14
    3bdc:	orr	w13, w13, w14
    3be0:	lsr	w12, w12, #15
    3be4:	sub	w12, w12, w13
    3be8:	lsl	w13, w12, #1
    3bec:	add	w14, w12, #0x15
    3bf0:	add	w12, w13, #0x1c
    3bf4:	lsr	x13, x11, x14
    3bf8:	bfxil	x12, x13, #0, #1
    3bfc:	adrp	x13, 17000 <memcpy@GLIBC_2.17>
    3c00:	add	x13, x13, #0x168
    3c04:	str	x12, [x10, #56]
    3c08:	stp	xzr, xzr, [x10, #32]
    3c0c:	ldr	w14, [x13, #4]
    3c10:	mov	w15, #0x1                   	// #1
    3c14:	add	x13, x13, x12, lsl #3
    3c18:	lsl	w15, w15, w12
    3c1c:	tst	w14, w15
    3c20:	add	x13, x13, #0x250
    3c24:	b.eq	3c84 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1570>  // b.none
    3c28:	ldr	x14, [x13]
    3c2c:	mov	w13, #0x39                  	// #57
    3c30:	sub	x13, x13, x12, lsr #1
    3c34:	cmp	x12, #0x1f
    3c38:	csel	x12, xzr, x13, eq  // eq = none
    3c3c:	lsl	x13, x11, x12
    3c40:	mov	x12, x14
    3c44:	ldr	x14, [x14, #8]
    3c48:	and	x14, x14, #0xfffffffffffffffc
    3c4c:	cmp	x14, x11
    3c50:	b.eq	3ca4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1590>  // b.none
    3c54:	lsr	x14, x13, #60
    3c58:	and	x14, x14, #0x8
    3c5c:	add	x15, x12, x14
    3c60:	ldr	x14, [x15, #32]!
    3c64:	lsl	x13, x13, #1
    3c68:	cbnz	x14, 3c40 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x152c>
    3c6c:	ldr	x8, [x8, #384]
    3c70:	cmp	x8, x15
    3c74:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3c78:	str	x10, [x15]
    3c7c:	str	x12, [x10, #48]
    3c80:	b	3c98 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1584>
    3c84:	orr	w8, w14, w15
    3c88:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3c8c:	str	w8, [x11, #364]
    3c90:	str	x10, [x13]
    3c94:	str	x13, [x10, #48]
    3c98:	stp	x10, x10, [x10, #16]
    3c9c:	add	x20, x9, #0x10
    3ca0:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    3ca4:	ldr	x11, [x12, #16]
    3ca8:	ldr	x8, [x8, #384]
    3cac:	cmp	x8, x11
    3cb0:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3cb4:	cmp	x8, x12
    3cb8:	b.hi	3ce0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15cc>  // b.pmore
    3cbc:	str	x10, [x11, #24]
    3cc0:	str	x10, [x12, #16]
    3cc4:	stp	x11, x12, [x10, #16]
    3cc8:	str	xzr, [x10, #48]
    3ccc:	add	x20, x9, #0x10
    3cd0:	b	3924 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>
    3cd4:	mov	x16, xzr
    3cd8:	cbnz	x15, 3a50 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x133c>
    3cdc:	b	3b00 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13ec>
    3ce0:	bl	1a20 <abort@plt>
    3ce4:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3ce8:	add	x8, x8, #0x500
    3cec:	b	3cf8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15e4>
    3cf0:	ldr	x8, [x8, #16]
    3cf4:	cbz	x8, 3d1c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1608>
    3cf8:	ldr	x9, [x8]
    3cfc:	cmp	x9, x0
    3d00:	b.hi	3cf0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15dc>  // b.pmore
    3d04:	ldr	x10, [x8, #8]
    3d08:	add	x9, x9, x10
    3d0c:	cmp	x9, x0
    3d10:	b.ls	3cf0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15dc>  // b.plast
    3d14:	ldr	x8, [x8, #24]
    3d18:	add	x0, x0, x8
    3d1c:	ret

0000000000003d20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0>:
    3d20:	sub	sp, sp, #0x70
    3d24:	stp	x29, x30, [sp, #16]
    3d28:	stp	x28, x27, [sp, #32]
    3d2c:	stp	x26, x25, [sp, #48]
    3d30:	stp	x24, x23, [sp, #64]
    3d34:	stp	x22, x21, [sp, #80]
    3d38:	stp	x20, x19, [sp, #96]
    3d3c:	add	x29, sp, #0x10
    3d40:	cbz	x0, 4958 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc38>
    3d44:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3d48:	ldr	x8, [x8, #1456]
    3d4c:	mov	x19, x0
    3d50:	cbnz	x8, 3d58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x38>
    3d54:	bl	49bc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc9c>
    3d58:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    3d5c:	ldrb	w8, [x21, #1224]
    3d60:	tbz	w8, #1, 3d74 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x54>
    3d64:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    3d68:	add	x0, x0, #0x4d0
    3d6c:	bl	1b20 <pthread_mutex_lock@plt>
    3d70:	cbnz	w0, 4958 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc38>
    3d74:	adrp	x22, 17000 <memcpy@GLIBC_2.17>
    3d78:	ldr	x12, [x22, #384]
    3d7c:	sub	x8, x19, #0x10
    3d80:	cmp	x8, x12
    3d84:	b.cc	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.lo, b.ul, b.last
    3d88:	ldur	x11, [x19, #-8]
    3d8c:	tbz	w11, #1, 49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>
    3d90:	and	x9, x11, #0xfffffffffffffffc
    3d94:	add	x10, x8, x9
    3d98:	tbnz	w11, #0, 4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3d9c:	ldr	x14, [x8]
    3da0:	tbnz	w14, #0, 3e18 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf8>
    3da4:	sub	x8, x8, x14
    3da8:	cmp	x8, x12
    3dac:	b.cc	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.lo, b.ul, b.last
    3db0:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3db4:	ldr	x11, [x11, #392]
    3db8:	add	x9, x14, x9
    3dbc:	cmp	x11, x8
    3dc0:	b.eq	3e94 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x174>  // b.none
    3dc4:	cmp	x14, #0xff
    3dc8:	b.hi	3ec4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1a4>  // b.pmore
    3dcc:	ldp	x11, x13, [x8, #16]
    3dd0:	lsr	x14, x14, #3
    3dd4:	cmp	x11, x13
    3dd8:	b.eq	3ef0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1d0>  // b.none
    3ddc:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    3de0:	add	x15, x15, #0x168
    3de4:	add	x14, x15, x14, lsl #4
    3de8:	add	x14, x14, #0x40
    3dec:	cmp	x11, x14
    3df0:	b.eq	3dfc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdc>  // b.none
    3df4:	cmp	x12, x11
    3df8:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3dfc:	cmp	x13, x14
    3e00:	b.eq	3e0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xec>  // b.none
    3e04:	cmp	x12, x13
    3e08:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3e0c:	str	x13, [x11, #24]
    3e10:	str	x11, [x13, #16]
    3e14:	b	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3e18:	and	x10, x14, #0xfffffffffffffffe
    3e1c:	add	x9, x9, x10
    3e20:	sub	x20, x8, x10
    3e24:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3e28:	add	x19, x9, #0x20
    3e2c:	add	x8, x8, #0x500
    3e30:	b	3e3c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11c>
    3e34:	ldr	x8, [x8, #16]
    3e38:	cbz	x8, 3e70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x150>
    3e3c:	ldr	x9, [x8]
    3e40:	cmp	x9, x20
    3e44:	b.hi	3e34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x114>  // b.pmore
    3e48:	ldr	x10, [x8, #8]
    3e4c:	add	x9, x9, x10
    3e50:	cmp	x9, x20
    3e54:	b.ls	3e34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x114>  // b.plast
    3e58:	ldr	x8, [x8, #24]
    3e5c:	cbz	x8, 3e70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x150>
    3e60:	add	x0, x20, x8
    3e64:	mov	x1, x19
    3e68:	bl	1aa0 <munmap@plt>
    3e6c:	cbnz	w0, 4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    3e70:	mov	x0, x20
    3e74:	mov	x1, x19
    3e78:	bl	1aa0 <munmap@plt>
    3e7c:	cbnz	w0, 4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    3e80:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    3e84:	ldr	x9, [x8, #1208]
    3e88:	sub	x9, x9, x19
    3e8c:	str	x9, [x8, #1208]
    3e90:	b	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    3e94:	ldr	x11, [x10, #8]
    3e98:	mvn	w12, w11
    3e9c:	tst	x12, #0x3
    3ea0:	b.ne	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>  // b.any
    3ea4:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    3ea8:	and	x11, x11, #0xfffffffffffffffe
    3eac:	orr	x13, x9, #0x1
    3eb0:	str	x9, [x12, #368]
    3eb4:	str	x11, [x10, #8]
    3eb8:	str	x13, [x8, #8]
    3ebc:	str	x9, [x8, x9]
    3ec0:	b	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    3ec4:	ldr	x13, [x8, #24]
    3ec8:	ldr	x11, [x8, #48]
    3ecc:	cmp	x13, x8
    3ed0:	b.eq	3f0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1ec>  // b.none
    3ed4:	ldr	x14, [x8, #16]
    3ed8:	cmp	x12, x14
    3edc:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3ee0:	str	x13, [x14, #24]
    3ee4:	str	x14, [x13, #16]
    3ee8:	cbnz	x11, 3f50 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x230>
    3eec:	b	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3ef0:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3ef4:	ldr	w12, [x11, #360]
    3ef8:	mov	w13, #0x1                   	// #1
    3efc:	lsl	w13, w13, w14
    3f00:	bic	w12, w12, w13
    3f04:	str	w12, [x11, #360]
    3f08:	b	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3f0c:	mov	x14, x8
    3f10:	ldr	x15, [x14, #40]!
    3f14:	cbnz	x15, 3f20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x200>
    3f18:	ldr	x15, [x14, #-8]!
    3f1c:	cbz	x15, 49a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc80>
    3f20:	mov	x16, x14
    3f24:	mov	x14, x15
    3f28:	mov	x13, x15
    3f2c:	ldr	x15, [x14, #40]!
    3f30:	cbnz	x15, 3f20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x200>
    3f34:	mov	x14, x13
    3f38:	ldr	x15, [x14, #32]!
    3f3c:	cbnz	x15, 3f20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x200>
    3f40:	cmp	x12, x16
    3f44:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3f48:	str	xzr, [x16]
    3f4c:	cbz	x11, 4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3f50:	ldr	x12, [x8, #56]
    3f54:	adrp	x14, 17000 <memcpy@GLIBC_2.17>
    3f58:	add	x14, x14, #0x168
    3f5c:	add	x14, x14, x12, lsl #3
    3f60:	ldr	x15, [x14, #592]
    3f64:	cmp	x15, x8
    3f68:	b.eq	3f98 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x278>  // b.none
    3f6c:	ldr	x12, [x22, #384]
    3f70:	cmp	x12, x11
    3f74:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3f78:	ldr	x14, [x11, #32]
    3f7c:	mov	w15, #0x28                  	// #40
    3f80:	cmp	x14, x8
    3f84:	mov	w14, #0x20                  	// #32
    3f88:	csel	x14, x14, x15, eq  // eq = none
    3f8c:	str	x13, [x11, x14]
    3f90:	cbnz	x13, 3fa8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x288>
    3f94:	b	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3f98:	add	x14, x14, #0x250
    3f9c:	str	x13, [x14]
    3fa0:	cbz	x13, 3fe8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2c8>
    3fa4:	ldr	x12, [x22, #384]
    3fa8:	cmp	x12, x13
    3fac:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3fb0:	str	x11, [x13, #48]
    3fb4:	ldr	x11, [x8, #32]
    3fb8:	cbz	x11, 3fcc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2ac>
    3fbc:	cmp	x12, x11
    3fc0:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3fc4:	str	x11, [x13, #32]
    3fc8:	str	x13, [x11, #48]
    3fcc:	ldr	x11, [x8, #40]
    3fd0:	cbz	x11, 4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3fd4:	cmp	x12, x11
    3fd8:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    3fdc:	str	x11, [x13, #40]
    3fe0:	str	x13, [x11, #48]
    3fe4:	b	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    3fe8:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    3fec:	ldr	w13, [x11, #364]
    3ff0:	mov	w14, #0x1                   	// #1
    3ff4:	lsl	w12, w14, w12
    3ff8:	bic	w12, w13, w12
    3ffc:	str	w12, [x11, #364]
    4000:	cmp	x10, x8
    4004:	b.ls	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.plast
    4008:	ldr	x11, [x10, #8]
    400c:	tbz	w11, #0, 49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>
    4010:	tbnz	w11, #1, 4074 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x354>
    4014:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    4018:	ldr	x12, [x12, #400]
    401c:	cmp	x12, x10
    4020:	b.eq	40e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3c4>  // b.none
    4024:	adrp	x12, 17000 <memcpy@GLIBC_2.17>
    4028:	ldr	x13, [x12, #392]
    402c:	cmp	x13, x10
    4030:	b.eq	4188 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x468>  // b.none
    4034:	cmp	x11, #0xff
    4038:	b.hi	41d0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4b0>  // b.pmore
    403c:	ldp	x13, x10, [x10, #16]
    4040:	lsr	x14, x11, #3
    4044:	cmp	x13, x10
    4048:	b.eq	4328 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x608>  // b.none
    404c:	adrp	x15, 17000 <memcpy@GLIBC_2.17>
    4050:	add	x15, x15, #0x168
    4054:	add	x14, x15, x14, lsl #4
    4058:	add	x14, x14, #0x40
    405c:	cmp	x13, x14
    4060:	b.eq	47c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xaa0>  // b.none
    4064:	ldr	x15, [x22, #384]
    4068:	cmp	x15, x13
    406c:	b.ls	47c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xaa4>  // b.plast
    4070:	b	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>
    4074:	and	x11, x11, #0xfffffffffffffffe
    4078:	orr	x12, x9, #0x1
    407c:	str	x11, [x10, #8]
    4080:	str	x12, [x8, #8]
    4084:	str	x9, [x8, x9]
    4088:	cmp	x9, #0xff
    408c:	b.hi	40cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3ac>  // b.pmore
    4090:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    4094:	add	x11, x11, #0x168
    4098:	ldr	w10, [x11]
    409c:	lsr	x9, x9, #3
    40a0:	add	x12, x11, x9, lsl #4
    40a4:	mov	w11, #0x1                   	// #1
    40a8:	lsl	w11, w11, w9
    40ac:	tst	w10, w11
    40b0:	add	x9, x12, #0x40
    40b4:	b.eq	41b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x490>  // b.none
    40b8:	ldr	x10, [x9, #16]
    40bc:	ldr	x11, [x22, #384]
    40c0:	cmp	x11, x10
    40c4:	b.ls	41c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4a0>  // b.plast
    40c8:	b	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>
    40cc:	lsr	x10, x9, #8
    40d0:	cbz	x10, 4258 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x538>
    40d4:	lsr	x11, x9, #24
    40d8:	cbz	x11, 4200 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4e0>
    40dc:	mov	w10, #0x1f                  	// #31
    40e0:	b	4258 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x538>
    40e4:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    40e8:	add	x23, x23, #0x178
    40ec:	ldr	x10, [x23]
    40f0:	str	x8, [x23, #24]
    40f4:	add	x9, x10, x9
    40f8:	orr	x10, x9, #0x1
    40fc:	str	x9, [x23]
    4100:	str	x10, [x8, #8]
    4104:	ldr	x10, [x23, #16]
    4108:	cmp	x8, x10
    410c:	b.ne	4120 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x400>  // b.any
    4110:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4114:	add	x10, x10, #0x170
    4118:	str	xzr, [x10, #24]
    411c:	str	xzr, [x10]
    4120:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4124:	ldr	x10, [x10, #408]
    4128:	cmp	x9, x10
    412c:	b.ls	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>  // b.plast
    4130:	cmp	x9, #0x49
    4134:	b.cc	4410 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6f0>  // b.lo, b.ul, b.last
    4138:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    413c:	ldr	x10, [x10, #1464]
    4140:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    4144:	add	x24, x24, #0x500
    4148:	add	x9, x9, x10
    414c:	sub	x9, x9, #0x49
    4150:	udiv	x9, x9, x10
    4154:	sub	x9, x9, #0x1
    4158:	mul	x19, x9, x10
    415c:	b	4168 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x448>
    4160:	ldr	x24, [x24, #16]
    4164:	cbz	x24, 43d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6b4>
    4168:	ldr	x10, [x24]
    416c:	cmp	x10, x8
    4170:	b.hi	4160 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x440>  // b.pmore
    4174:	ldr	x9, [x24, #8]
    4178:	add	x10, x10, x9
    417c:	cmp	x10, x8
    4180:	b.ls	4160 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x440>  // b.plast
    4184:	b	43dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6bc>
    4188:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    418c:	add	x10, x10, #0x170
    4190:	ldr	x11, [x10]
    4194:	str	x8, [x10, #24]
    4198:	add	x9, x11, x9
    419c:	str	x9, [x10]
    41a0:	orr	x10, x9, #0x1
    41a4:	str	x10, [x8, #8]
    41a8:	str	x9, [x8, x9]
    41ac:	b	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    41b0:	orr	w10, w10, w11
    41b4:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    41b8:	str	w10, [x11, #360]
    41bc:	mov	x10, x9
    41c0:	str	x8, [x9, #16]
    41c4:	str	x8, [x10, #24]
    41c8:	stp	x10, x9, [x8, #16]
    41cc:	b	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    41d0:	ldr	x14, [x10, #24]
    41d4:	ldr	x13, [x10, #48]
    41d8:	cmp	x14, x10
    41dc:	b.eq	4344 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x624>  // b.none
    41e0:	ldr	x15, [x10, #16]
    41e4:	ldr	x16, [x22, #384]
    41e8:	cmp	x16, x15
    41ec:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    41f0:	str	x14, [x15, #24]
    41f4:	str	x15, [x14, #16]
    41f8:	cbnz	x13, 438c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x66c>
    41fc:	b	4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    4200:	mov	w11, #0xfff00               	// #1048320
    4204:	add	w11, w10, w11
    4208:	lsr	w11, w11, #16
    420c:	and	w11, w11, #0x8
    4210:	lsl	w10, w10, w11
    4214:	add	w12, w10, #0x7f, lsl #12
    4218:	lsr	w12, w12, #16
    421c:	and	w12, w12, #0x4
    4220:	lsl	w10, w10, w12
    4224:	orr	w11, w12, w11
    4228:	add	w12, w10, #0x3c, lsl #12
    422c:	lsr	w12, w12, #16
    4230:	and	w12, w12, #0x2
    4234:	lsl	w10, w10, w12
    4238:	orr	w11, w11, w12
    423c:	lsr	w10, w10, #15
    4240:	sub	w10, w10, w11
    4244:	lsl	w11, w10, #1
    4248:	add	w12, w10, #0x15
    424c:	add	w10, w11, #0x1c
    4250:	lsr	x11, x9, x12
    4254:	bfxil	x10, x11, #0, #1
    4258:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    425c:	add	x11, x11, #0x168
    4260:	str	x10, [x8, #56]
    4264:	stp	xzr, xzr, [x8, #32]
    4268:	ldr	w12, [x11, #4]
    426c:	mov	w13, #0x1                   	// #1
    4270:	add	x11, x11, x10, lsl #3
    4274:	lsl	w13, w13, w10
    4278:	tst	w12, w13
    427c:	add	x11, x11, #0x250
    4280:	b.eq	42e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5c0>  // b.none
    4284:	ldr	x12, [x11]
    4288:	mov	w11, #0x39                  	// #57
    428c:	sub	x11, x11, x10, lsr #1
    4290:	cmp	x10, #0x1f
    4294:	csel	x10, xzr, x11, eq  // eq = none
    4298:	lsl	x11, x9, x10
    429c:	mov	x10, x12
    42a0:	ldr	x12, [x12, #8]
    42a4:	and	x12, x12, #0xfffffffffffffffc
    42a8:	cmp	x12, x9
    42ac:	b.eq	42fc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5dc>  // b.none
    42b0:	lsr	x12, x11, #60
    42b4:	and	x12, x12, #0x8
    42b8:	add	x13, x10, x12
    42bc:	ldr	x12, [x13, #32]!
    42c0:	lsl	x11, x11, #1
    42c4:	cbnz	x12, 429c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x57c>
    42c8:	ldr	x9, [x22, #384]
    42cc:	cmp	x9, x13
    42d0:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    42d4:	str	x8, [x13]
    42d8:	str	x10, [x8, #48]
    42dc:	b	42f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5d4>
    42e0:	orr	w9, w12, w13
    42e4:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    42e8:	str	w9, [x10, #364]
    42ec:	str	x8, [x11]
    42f0:	str	x11, [x8, #48]
    42f4:	stp	x8, x8, [x8, #16]
    42f8:	b	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    42fc:	ldr	x9, [x10, #16]
    4300:	ldr	x11, [x22, #384]
    4304:	cmp	x11, x9
    4308:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    430c:	cmp	x11, x10
    4310:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4314:	str	x8, [x9, #24]
    4318:	str	x8, [x10, #16]
    431c:	stp	x9, x10, [x8, #16]
    4320:	str	xzr, [x8, #48]
    4324:	b	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    4328:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    432c:	ldr	w13, [x10, #360]
    4330:	mov	w15, #0x1                   	// #1
    4334:	lsl	w14, w15, w14
    4338:	bic	w13, w13, w14
    433c:	str	w13, [x10, #360]
    4340:	b	4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    4344:	mov	x15, x10
    4348:	ldr	x16, [x15, #40]!
    434c:	cbnz	x16, 4358 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x638>
    4350:	ldr	x16, [x15, #-8]!
    4354:	cbz	x16, 49ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc8c>
    4358:	mov	x17, x15
    435c:	mov	x15, x16
    4360:	mov	x14, x16
    4364:	ldr	x16, [x15, #40]!
    4368:	cbnz	x16, 4358 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x638>
    436c:	mov	x15, x14
    4370:	ldr	x16, [x15, #32]!
    4374:	cbnz	x16, 4358 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x638>
    4378:	ldr	x15, [x22, #384]
    437c:	cmp	x15, x17
    4380:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4384:	str	xzr, [x17]
    4388:	cbz	x13, 4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    438c:	ldr	x15, [x10, #56]
    4390:	adrp	x16, 17000 <memcpy@GLIBC_2.17>
    4394:	add	x16, x16, #0x168
    4398:	add	x16, x16, x15, lsl #3
    439c:	ldr	x17, [x16, #592]
    43a0:	cmp	x17, x10
    43a4:	b.eq	47e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xac0>  // b.none
    43a8:	ldr	x15, [x22, #384]
    43ac:	cmp	x15, x13
    43b0:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    43b4:	ldr	x16, [x13, #32]
    43b8:	mov	w17, #0x28                  	// #40
    43bc:	cmp	x16, x10
    43c0:	mov	w16, #0x20                  	// #32
    43c4:	csel	x16, x16, x17, eq  // eq = none
    43c8:	str	x14, [x13, x16]
    43cc:	cbnz	x14, 47f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xad0>
    43d0:	b	4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    43d4:	mov	w8, #0x8                   	// #8
    43d8:	ldr	x9, [x8]
    43dc:	subs	x8, x9, x19
    43e0:	b.cc	4410 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6f0>  // b.lo, b.ul, b.last
    43e4:	ldr	x10, [x24]
    43e8:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    43ec:	add	x11, x11, #0x500
    43f0:	add	x9, x10, x9
    43f4:	b	4400 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6e0>
    43f8:	ldr	x11, [x11, #16]
    43fc:	cbz	x11, 4830 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb10>
    4400:	cmp	x10, x11
    4404:	b.hi	43f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6d8>  // b.pmore
    4408:	cmp	x9, x11
    440c:	b.ls	43f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6d8>  // b.plast
    4410:	mov	x8, xzr
    4414:	str	x8, [sp]
    4418:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    441c:	ldr	x28, [x8, #1296]
    4420:	cbz	x28, 47a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa80>
    4424:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    4428:	add	x24, x24, #0x500
    442c:	str	xzr, [sp, #8]
    4430:	ldr	x19, [x28]
    4434:	mov	x23, x28
    4438:	ldr	x28, [x28, #16]
    443c:	add	x8, x19, #0x10
    4440:	neg	w9, w8
    4444:	and	x9, x9, #0x7
    4448:	tst	x8, #0x7
    444c:	csel	x8, xzr, x9, eq  // eq = none
    4450:	add	x27, x19, x8
    4454:	ldr	x25, [x27, #8]
    4458:	tbnz	w25, #1, 4754 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa34>
    445c:	ldr	x20, [x23, #8]
    4460:	and	x26, x25, #0xfffffffffffffffc
    4464:	add	x8, x27, x26
    4468:	add	x9, x19, x20
    446c:	sub	x9, x9, #0x48
    4470:	cmp	x8, x9
    4474:	b.cc	4754 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa34>  // b.lo, b.ul, b.last
    4478:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    447c:	ldr	x8, [x8, #392]
    4480:	cmp	x8, x27
    4484:	b.eq	44b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x798>  // b.none
    4488:	ldr	x9, [x27, #24]
    448c:	ldr	x8, [x27, #48]
    4490:	cmp	x9, x27
    4494:	b.eq	44cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7ac>  // b.none
    4498:	ldr	x10, [x27, #16]
    449c:	ldr	x11, [x22, #384]
    44a0:	cmp	x11, x10
    44a4:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    44a8:	str	x9, [x10, #24]
    44ac:	str	x10, [x9, #16]
    44b0:	cbnz	x8, 4514 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7f4>
    44b4:	b	45c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8a4>
    44b8:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    44bc:	add	x8, x8, #0x170
    44c0:	str	xzr, [x8, #24]
    44c4:	str	xzr, [x8]
    44c8:	b	45c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8a4>
    44cc:	mov	x10, x27
    44d0:	ldr	x11, [x10, #40]!
    44d4:	cbnz	x11, 44e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c0>
    44d8:	ldr	x11, [x10, #-8]!
    44dc:	cbz	x11, 4794 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa74>
    44e0:	mov	x12, x10
    44e4:	mov	x10, x11
    44e8:	mov	x9, x11
    44ec:	ldr	x11, [x10, #40]!
    44f0:	cbnz	x11, 44e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c0>
    44f4:	mov	x10, x9
    44f8:	ldr	x11, [x10, #32]!
    44fc:	cbnz	x11, 44e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7c0>
    4500:	ldr	x10, [x22, #384]
    4504:	cmp	x10, x12
    4508:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    450c:	str	xzr, [x12]
    4510:	cbz	x8, 45c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8a4>
    4514:	ldr	x10, [x27, #56]
    4518:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    451c:	add	x11, x11, #0x168
    4520:	add	x11, x11, x10, lsl #3
    4524:	ldr	x12, [x11, #592]
    4528:	cmp	x12, x27
    452c:	b.eq	455c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x83c>  // b.none
    4530:	ldr	x10, [x22, #384]
    4534:	cmp	x10, x8
    4538:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    453c:	ldr	x11, [x8, #32]
    4540:	mov	w12, #0x20                  	// #32
    4544:	cmp	x11, x27
    4548:	mov	w11, #0x28                  	// #40
    454c:	csel	x11, x12, x11, eq  // eq = none
    4550:	str	x9, [x8, x11]
    4554:	cbnz	x9, 456c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x84c>
    4558:	b	45c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8a4>
    455c:	add	x11, x11, #0x250
    4560:	str	x9, [x11]
    4564:	cbz	x9, 45ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x88c>
    4568:	ldr	x10, [x22, #384]
    456c:	cmp	x10, x9
    4570:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4574:	str	x8, [x9, #48]
    4578:	ldr	x8, [x27, #32]
    457c:	cbz	x8, 4590 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x870>
    4580:	cmp	x10, x8
    4584:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4588:	str	x8, [x9, #32]
    458c:	str	x9, [x8, #48]
    4590:	ldr	x8, [x27, #40]
    4594:	cbz	x8, 45c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8a4>
    4598:	cmp	x10, x8
    459c:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    45a0:	str	x8, [x9, #40]
    45a4:	str	x9, [x8, #48]
    45a8:	b	45c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8a4>
    45ac:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    45b0:	ldr	w8, [x11, #364]
    45b4:	mov	w9, #0x1                   	// #1
    45b8:	lsl	w9, w9, w10
    45bc:	bic	w8, w8, w9
    45c0:	str	w8, [x11, #364]
    45c4:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    45c8:	add	x8, x8, #0x500
    45cc:	b	45d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b8>
    45d0:	ldr	x8, [x8, #16]
    45d4:	cbz	x8, 460c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8ec>
    45d8:	ldr	x9, [x8]
    45dc:	cmp	x9, x19
    45e0:	b.hi	45d0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b0>  // b.pmore
    45e4:	ldr	x10, [x8, #8]
    45e8:	add	x9, x9, x10
    45ec:	cmp	x9, x19
    45f0:	b.ls	45d0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b0>  // b.plast
    45f4:	ldr	x8, [x8, #24]
    45f8:	cbz	x8, 460c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8ec>
    45fc:	add	x0, x19, x8
    4600:	mov	x1, x20
    4604:	bl	1aa0 <munmap@plt>
    4608:	cbnz	w0, 461c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8fc>
    460c:	mov	x0, x19
    4610:	mov	x1, x20
    4614:	bl	1aa0 <munmap@plt>
    4618:	cbz	w0, 4634 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x914>
    461c:	lsr	x8, x25, #8
    4620:	cbz	x8, 46b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x994>
    4624:	lsr	x9, x25, #24
    4628:	cbz	x9, 465c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x93c>
    462c:	mov	w8, #0x1f                  	// #31
    4630:	b	46b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x994>
    4634:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4638:	ldr	x8, [x10, #1208]
    463c:	ldr	x9, [sp, #8]
    4640:	sub	x8, x8, x20
    4644:	add	x9, x20, x9
    4648:	str	x9, [sp, #8]
    464c:	str	x8, [x10, #1208]
    4650:	str	x28, [x24, #16]
    4654:	cbnz	x28, 4430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x710>
    4658:	b	47a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa84>
    465c:	mov	w9, #0xfff00               	// #1048320
    4660:	add	w9, w8, w9
    4664:	lsr	w9, w9, #16
    4668:	and	w9, w9, #0x8
    466c:	lsl	w8, w8, w9
    4670:	add	w10, w8, #0x7f, lsl #12
    4674:	lsr	w10, w10, #16
    4678:	and	w10, w10, #0x4
    467c:	lsl	w8, w8, w10
    4680:	orr	w9, w10, w9
    4684:	add	w10, w8, #0x3c, lsl #12
    4688:	lsr	w10, w10, #16
    468c:	and	w10, w10, #0x2
    4690:	lsl	w8, w8, w10
    4694:	orr	w9, w9, w10
    4698:	lsr	w8, w8, #15
    469c:	sub	w8, w8, w9
    46a0:	lsl	w9, w8, #1
    46a4:	add	w10, w8, #0x15
    46a8:	add	w8, w9, #0x1c
    46ac:	lsr	x9, x26, x10
    46b0:	bfxil	x8, x9, #0, #1
    46b4:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    46b8:	str	x8, [x27, #56]
    46bc:	stp	xzr, xzr, [x27, #32]
    46c0:	add	x9, x9, #0x168
    46c4:	ldr	w10, [x9, #4]
    46c8:	mov	w11, #0x1                   	// #1
    46cc:	add	x9, x9, x8, lsl #3
    46d0:	lsl	w11, w11, w8
    46d4:	tst	w10, w11
    46d8:	add	x9, x9, #0x250
    46dc:	b.eq	473c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa1c>  // b.none
    46e0:	ldr	x10, [x9]
    46e4:	mov	w9, #0x39                  	// #57
    46e8:	sub	x9, x9, x8, lsr #1
    46ec:	cmp	x8, #0x1f
    46f0:	csel	x8, xzr, x9, eq  // eq = none
    46f4:	lsl	x9, x26, x8
    46f8:	mov	x8, x10
    46fc:	ldr	x10, [x10, #8]
    4700:	and	x10, x10, #0xfffffffffffffffc
    4704:	cmp	x10, x26
    4708:	b.eq	4760 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa40>  // b.none
    470c:	lsr	x10, x9, #60
    4710:	and	x10, x10, #0x8
    4714:	add	x11, x8, x10
    4718:	ldr	x10, [x11, #32]!
    471c:	lsl	x9, x9, #1
    4720:	cbnz	x10, 46f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9d8>
    4724:	ldr	x9, [x22, #384]
    4728:	cmp	x9, x11
    472c:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4730:	str	x27, [x11]
    4734:	str	x8, [x27, #48]
    4738:	b	4750 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa30>
    473c:	orr	w8, w10, w11
    4740:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4744:	str	w8, [x10, #364]
    4748:	str	x27, [x9]
    474c:	str	x9, [x27, #48]
    4750:	stp	x27, x27, [x27, #16]
    4754:	mov	x24, x23
    4758:	cbnz	x28, 4430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x710>
    475c:	b	47a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa84>
    4760:	ldr	x9, [x8, #16]
    4764:	ldr	x10, [x22, #384]
    4768:	cmp	x10, x9
    476c:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4770:	cmp	x10, x8
    4774:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4778:	str	x27, [x9, #24]
    477c:	str	x27, [x8, #16]
    4780:	stp	x9, x8, [x27, #16]
    4784:	str	xzr, [x27, #48]
    4788:	mov	x24, x23
    478c:	cbnz	x28, 4430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x710>
    4790:	b	47a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa84>
    4794:	mov	x9, xzr
    4798:	cbnz	x8, 4514 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7f4>
    479c:	b	45c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8a4>
    47a0:	str	xzr, [sp, #8]
    47a4:	ldp	x8, x9, [sp]
    47a8:	cmn	x8, x9
    47ac:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    47b0:	b.ne	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>  // b.any
    47b4:	mov	x8, #0xffffffffffffffff    	// #-1
    47b8:	str	x8, [x9, #408]
    47bc:	b	4950 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc30>
    47c0:	ldr	x15, [x22, #384]
    47c4:	cmp	x10, x14
    47c8:	b.eq	47d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xab4>  // b.none
    47cc:	cmp	x15, x10
    47d0:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    47d4:	str	x10, [x13, #24]
    47d8:	str	x13, [x10, #16]
    47dc:	b	4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    47e0:	add	x16, x16, #0x250
    47e4:	str	x14, [x16]
    47e8:	cbz	x14, 4910 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbf0>
    47ec:	ldr	x15, [x22, #384]
    47f0:	cmp	x15, x14
    47f4:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    47f8:	str	x13, [x14, #48]
    47fc:	ldr	x13, [x10, #32]
    4800:	cbz	x13, 4814 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xaf4>
    4804:	cmp	x15, x13
    4808:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    480c:	str	x13, [x14, #32]
    4810:	str	x14, [x13, #48]
    4814:	ldr	x10, [x10, #40]
    4818:	cbz	x10, 4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    481c:	cmp	x15, x10
    4820:	b.hi	49b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc98>  // b.pmore
    4824:	str	x10, [x14, #40]
    4828:	str	x14, [x10, #48]
    482c:	b	4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    4830:	add	x20, x10, x8
    4834:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4838:	add	x8, x8, #0x500
    483c:	b	4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb28>
    4840:	ldr	x8, [x8, #16]
    4844:	cbz	x8, 487c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb5c>
    4848:	ldr	x9, [x8]
    484c:	cmp	x9, x20
    4850:	b.hi	4840 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb20>  // b.pmore
    4854:	ldr	x10, [x8, #8]
    4858:	add	x9, x9, x10
    485c:	cmp	x9, x20
    4860:	b.ls	4840 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb20>  // b.plast
    4864:	ldr	x8, [x8, #24]
    4868:	cbz	x8, 487c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb5c>
    486c:	add	x0, x20, x8
    4870:	mov	x1, x19
    4874:	bl	1aa0 <munmap@plt>
    4878:	cbnz	w0, 4410 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6f0>
    487c:	mov	x0, x20
    4880:	mov	x1, x19
    4884:	bl	1aa0 <munmap@plt>
    4888:	mov	x8, xzr
    488c:	cbz	x19, 4414 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6f4>
    4890:	cbnz	w0, 4414 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6f4>
    4894:	ldr	x8, [x24, #8]
    4898:	sub	x8, x8, x19
    489c:	str	x8, [x24, #8]
    48a0:	ldr	x8, [x23, #832]
    48a4:	ldr	x10, [x23, #24]
    48a8:	ldr	x9, [x23]
    48ac:	sub	x8, x8, x19
    48b0:	add	x11, x10, #0x10
    48b4:	str	x8, [x23, #832]
    48b8:	neg	w8, w11
    48bc:	tst	x11, #0x7
    48c0:	and	x8, x8, #0x7
    48c4:	sub	x9, x9, x19
    48c8:	csel	x8, xzr, x8, eq  // eq = none
    48cc:	add	x11, x10, x8
    48d0:	sub	x8, x9, x8
    48d4:	str	x8, [x23]
    48d8:	orr	x8, x8, #0x1
    48dc:	str	x11, [x23, #24]
    48e0:	str	x8, [x11, #8]
    48e4:	mov	w8, #0x48                  	// #72
    48e8:	add	x9, x10, x9
    48ec:	adrp	x11, 17000 <memcpy@GLIBC_2.17>
    48f0:	str	x8, [x9, #8]
    48f4:	ldrb	w8, [x11, #1480]
    48f8:	cmp	w8, #0x0
    48fc:	mov	w8, #0x200000              	// #2097152
    4900:	csel	x8, x8, xzr, ne  // ne = any
    4904:	str	x8, [x23, #32]
    4908:	mov	x8, x19
    490c:	b	4414 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6f4>
    4910:	adrp	x10, 17000 <memcpy@GLIBC_2.17>
    4914:	ldr	w13, [x10, #364]
    4918:	mov	w14, #0x1                   	// #1
    491c:	lsl	w14, w14, w15
    4920:	bic	w13, w13, w14
    4924:	str	w13, [x10, #364]
    4928:	and	x10, x11, #0xfffffffffffffffc
    492c:	add	x9, x10, x9
    4930:	orr	x10, x9, #0x1
    4934:	str	x10, [x8, #8]
    4938:	str	x9, [x8, x9]
    493c:	ldr	x10, [x12, #392]
    4940:	cmp	x8, x10
    4944:	b.ne	4088 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x368>  // b.any
    4948:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    494c:	str	x9, [x8, #368]
    4950:	ldrb	w8, [x21, #1224]
    4954:	tbnz	w8, #1, 4978 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc58>
    4958:	ldp	x20, x19, [sp, #96]
    495c:	ldp	x22, x21, [sp, #80]
    4960:	ldp	x24, x23, [sp, #64]
    4964:	ldp	x26, x25, [sp, #48]
    4968:	ldp	x28, x27, [sp, #32]
    496c:	ldp	x29, x30, [sp, #16]
    4970:	add	sp, sp, #0x70
    4974:	ret
    4978:	ldp	x20, x19, [sp, #96]
    497c:	ldp	x22, x21, [sp, #80]
    4980:	ldp	x24, x23, [sp, #64]
    4984:	ldp	x26, x25, [sp, #48]
    4988:	ldp	x28, x27, [sp, #32]
    498c:	ldp	x29, x30, [sp, #16]
    4990:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    4994:	add	x0, x0, #0x4d0
    4998:	add	sp, sp, #0x70
    499c:	b	1b40 <pthread_mutex_unlock@plt>
    49a0:	mov	x13, xzr
    49a4:	cbnz	x11, 3f50 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x230>
    49a8:	b	4000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e0>
    49ac:	mov	x14, xzr
    49b0:	cbnz	x13, 438c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x66c>
    49b4:	b	4928 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc08>
    49b8:	bl	1a20 <abort@plt>
    49bc:	stp	x29, x30, [sp, #-48]!
    49c0:	stp	x20, x19, [sp, #32]
    49c4:	adrp	x19, 17000 <memcpy@GLIBC_2.17>
    49c8:	ldr	x8, [x19, #1456]
    49cc:	str	x21, [sp, #16]
    49d0:	mov	x29, sp
    49d4:	cbnz	x8, 4a90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd70>
    49d8:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    49dc:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    49e0:	mov	w21, #0x1                   	// #1
    49e4:	adrp	x9, 17000 <memcpy@GLIBC_2.17>
    49e8:	adrp	x20, 17000 <memcpy@GLIBC_2.17>
    49ec:	add	x0, x0, #0x520
    49f0:	strb	w21, [x8, #1472]
    49f4:	strb	w21, [x9, #1480]
    49f8:	strb	w21, [x20, #1488]
    49fc:	bl	1b20 <pthread_mutex_lock@plt>
    4a00:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4a04:	ldrb	w9, [x8, #1448]
    4a08:	tbnz	w9, #0, 4a38 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd18>
    4a0c:	strb	w21, [x8, #1448]
    4a10:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    4a14:	add	x21, x21, #0x4c8
    4a18:	add	x0, x21, #0x8
    4a1c:	mov	x1, xzr
    4a20:	bl	19e0 <pthread_mutex_init@plt>
    4a24:	ldrb	w8, [x20, #1488]
    4a28:	cmp	w8, #0x0
    4a2c:	mov	w8, #0x7                   	// #7
    4a30:	csel	w8, w8, wzr, ne  // ne = any
    4a34:	str	w8, [x21]
    4a38:	adrp	x0, 17000 <memcpy@GLIBC_2.17>
    4a3c:	add	x0, x0, #0x520
    4a40:	bl	1b40 <pthread_mutex_unlock@plt>
    4a44:	mov	w0, #0x1e                  	// #30
    4a48:	bl	1ac0 <sysconf@plt>
    4a4c:	str	x0, [x19, #1456]
    4a50:	mov	w0, #0x1e                  	// #30
    4a54:	bl	1ac0 <sysconf@plt>
    4a58:	cbz	x0, 4a68 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd48>
    4a5c:	mov	w0, #0x1e                  	// #30
    4a60:	bl	1ac0 <sysconf@plt>
    4a64:	b	4a6c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd4c>
    4a68:	ldr	x0, [x19, #1456]
    4a6c:	sub	x9, x0, #0x1
    4a70:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4a74:	tst	x0, x9
    4a78:	str	x0, [x8, #1464]
    4a7c:	b.ne	4aa0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd80>  // b.any
    4a80:	ldr	x8, [x19, #1456]
    4a84:	sub	x9, x8, #0x1
    4a88:	tst	x8, x9
    4a8c:	b.ne	4aa0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd80>  // b.any
    4a90:	ldp	x20, x19, [sp, #32]
    4a94:	ldr	x21, [sp, #16]
    4a98:	ldp	x29, x30, [sp], #48
    4a9c:	ret
    4aa0:	bl	1a20 <abort@plt>
    4aa4:	sub	sp, sp, #0xd0
    4aa8:	stp	x29, x30, [sp, #144]
    4aac:	stp	x24, x23, [sp, #160]
    4ab0:	stp	x22, x21, [sp, #176]
    4ab4:	stp	x20, x19, [sp, #192]
    4ab8:	add	x29, sp, #0x90
    4abc:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    4ac0:	ldr	w8, [x23, #344]
    4ac4:	mov	x19, x0
    4ac8:	cmn	w8, #0x1
    4acc:	b.eq	4b38 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe18>  // b.none
    4ad0:	adrp	x8, 17000 <memcpy@GLIBC_2.17>
    4ad4:	ldr	x8, [x8, #1360]
    4ad8:	cbz	x8, 4af8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdd8>
    4adc:	ldr	w8, [x23, #344]
    4ae0:	cmn	w8, #0x1
    4ae4:	b.eq	4af8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdd8>  // b.none
    4ae8:	mov	x0, x19
    4aec:	bl	4c70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf50>
    4af0:	mov	x20, x0
    4af4:	b	4b1c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdfc>
    4af8:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    4afc:	add	x21, x21, #0x558
    4b00:	mov	x0, x21
    4b04:	bl	1b20 <pthread_mutex_lock@plt>
    4b08:	mov	x0, x19
    4b0c:	bl	4c70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf50>
    4b10:	mov	x20, x0
    4b14:	mov	x0, x21
    4b18:	bl	1b40 <pthread_mutex_unlock@plt>
    4b1c:	mov	x0, x20
    4b20:	ldp	x20, x19, [sp, #192]
    4b24:	ldp	x22, x21, [sp, #176]
    4b28:	ldp	x24, x23, [sp, #160]
    4b2c:	ldp	x29, x30, [sp, #144]
    4b30:	add	sp, sp, #0xd0
    4b34:	ret
    4b38:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    4b3c:	ldr	w8, [x24, #348]
    4b40:	tbnz	w8, #31, 4b4c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe2c>
    4b44:	cbnz	w8, 4ad0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb0>
    4b48:	b	4c28 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf08>
    4b4c:	adrp	x0, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    4b50:	add	x0, x0, #0xe0
    4b54:	add	x1, sp, #0x18
    4b58:	stp	xzr, xzr, [sp, #8]
    4b5c:	bl	1960 <statfs@plt>
    4b60:	tbnz	w0, #31, 4b80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe60>
    4b64:	ldr	w8, [sp, #24]
    4b68:	mov	w9, #0xff8c                	// #65420
    4b6c:	movk	w9, #0xf97c, lsl #16
    4b70:	cmp	w8, w9
    4b74:	b.ne	4b80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe60>  // b.any
    4b78:	mov	w8, #0x1                   	// #1
    4b7c:	b	4c20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf00>
    4b80:	adrp	x0, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    4b84:	adrp	x1, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    4b88:	add	x0, x0, #0xe9
    4b8c:	add	x1, x1, #0xf6
    4b90:	bl	1980 <fopen@plt>
    4b94:	cbz	x0, 4c1c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xefc>
    4b98:	adrp	x21, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    4b9c:	mov	x20, x0
    4ba0:	add	x21, x21, #0xf8
    4ba4:	add	x0, sp, #0x10
    4ba8:	add	x1, sp, #0x8
    4bac:	mov	w2, #0xa                   	// #10
    4bb0:	mov	x3, x20
    4bb4:	bl	1b30 <__getdelim@plt>
    4bb8:	ldr	x22, [sp, #16]
    4bbc:	tbnz	x0, #63, 4c0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeec>
    4bc0:	mov	w1, #0x20                  	// #32
    4bc4:	mov	x0, x22
    4bc8:	bl	1a90 <strchr@plt>
    4bcc:	cbz	x0, 4c0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeec>
    4bd0:	add	x0, x0, #0x1
    4bd4:	mov	w1, #0x20                  	// #32
    4bd8:	bl	1a90 <strchr@plt>
    4bdc:	cbz	x0, 4c0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeec>
    4be0:	add	x0, x0, #0x1
    4be4:	mov	w2, #0xa                   	// #10
    4be8:	mov	x1, x21
    4bec:	bl	19a0 <strncmp@plt>
    4bf0:	cbnz	w0, 4ba4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe84>
    4bf4:	mov	x0, x22
    4bf8:	bl	1a60 <free@plt>
    4bfc:	mov	x0, x20
    4c00:	bl	1970 <fclose@plt>
    4c04:	mov	w8, #0x1                   	// #1
    4c08:	b	4c20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf00>
    4c0c:	mov	x0, x22
    4c10:	bl	1a60 <free@plt>
    4c14:	mov	x0, x20
    4c18:	bl	1970 <fclose@plt>
    4c1c:	mov	w8, wzr
    4c20:	str	w8, [x24, #348]
    4c24:	cbnz	w8, 4ad0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb0>
    4c28:	mov	w2, #0x7                   	// #7
    4c2c:	mov	w3, #0x22                  	// #34
    4c30:	mov	w4, #0xffffffff            	// #-1
    4c34:	mov	x0, xzr
    4c38:	mov	x1, x19
    4c3c:	mov	x5, xzr
    4c40:	bl	1a50 <mmap@plt>
    4c44:	mov	x20, x0
    4c48:	cmn	x0, #0x1
    4c4c:	b.ne	4b1c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdfc>  // b.any
    4c50:	bl	1af0 <__errno_location@plt>
    4c54:	ldr	w8, [x0]
    4c58:	cmp	w8, #0xd
    4c5c:	b.eq	4ad0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb0>  // b.none
    4c60:	cmp	w8, #0x1
    4c64:	b.eq	4ad0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb0>  // b.none
    4c68:	mov	x20, #0xffffffffffffffff    	// #-1
    4c6c:	b	4b1c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdfc>
    4c70:	stp	x29, x30, [sp, #-80]!
    4c74:	stp	x26, x25, [sp, #16]
    4c78:	stp	x24, x23, [sp, #32]
    4c7c:	stp	x22, x21, [sp, #48]
    4c80:	stp	x20, x19, [sp, #64]
    4c84:	mov	x29, sp
    4c88:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    4c8c:	ldr	w22, [x23, #344]
    4c90:	adrp	x25, 16000 <ffi_type_longdouble@@LIBFFI_BASE_7.0+0xff80>
    4c94:	mov	x19, x0
    4c98:	add	x25, x25, #0xd18
    4c9c:	cmn	w22, #0x1
    4ca0:	adrp	x24, 17000 <memcpy@GLIBC_2.17>
    4ca4:	b.eq	4cb0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf90>  // b.none
    4ca8:	mov	w20, #0x22                  	// #34
    4cac:	b	4d38 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1018>
    4cb0:	mov	w8, wzr
    4cb4:	mov	w20, #0x22                  	// #34
    4cb8:	str	wzr, [x24, #1416]
    4cbc:	mov	w21, #0x18                  	// #24
    4cc0:	smaddl	x8, w8, w21, x25
    4cc4:	ldp	x9, x0, [x8]
    4cc8:	blr	x9
    4ccc:	ldr	w8, [x24, #1416]
    4cd0:	mov	w22, w0
    4cd4:	cmn	w0, #0x1
    4cd8:	sxtw	x9, w8
    4cdc:	sub	x10, x9, #0x5
    4ce0:	b.eq	4cec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfcc>  // b.none
    4ce4:	cmp	x10, #0x1
    4ce8:	b.ls	4d34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1014>  // b.plast
    4cec:	cmp	x10, #0x1
    4cf0:	b.hi	4d08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfe8>  // b.pmore
    4cf4:	mul	x8, x9, x21
    4cf8:	ldr	x8, [x25, x8]
    4cfc:	mov	x0, xzr
    4d00:	blr	x8
    4d04:	ldr	w8, [x24, #1416]
    4d08:	add	w9, w8, #0x1
    4d0c:	cmp	w9, #0x7
    4d10:	csinc	w8, wzr, w8, eq  // eq = none
    4d14:	str	w8, [x24, #1416]
    4d18:	b.eq	4d24 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1004>  // b.none
    4d1c:	cmn	w22, #0x1
    4d20:	b.eq	4cc0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfa0>  // b.none
    4d24:	cmn	w22, #0x1
    4d28:	str	w22, [x23, #344]
    4d2c:	b.ne	4d38 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1018>  // b.any
    4d30:	b	4e2c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x110c>
    4d34:	str	w22, [x23, #344]
    4d38:	adrp	x26, 17000 <memcpy@GLIBC_2.17>
    4d3c:	ldr	x21, [x26, #1360]
    4d40:	mov	w0, w22
    4d44:	mov	x1, x19
    4d48:	bl	4e48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1128>
    4d4c:	cbnz	w0, 4e2c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x110c>
    4d50:	ldr	w4, [x23, #344]
    4d54:	mov	w8, #0xffffffdc            	// #-36
    4d58:	and	w8, w20, w8
    4d5c:	orr	w20, w8, #0x1
    4d60:	mov	w2, #0x5                   	// #5
    4d64:	mov	x0, xzr
    4d68:	mov	x1, x19
    4d6c:	mov	w3, w20
    4d70:	mov	x5, x21
    4d74:	bl	1a50 <mmap@plt>
    4d78:	cmn	x0, #0x1
    4d7c:	b.ne	4d94 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1074>  // b.any
    4d80:	ldr	w0, [x23, #344]
    4d84:	cbnz	x21, 4e24 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1104>
    4d88:	bl	19f0 <close@plt>
    4d8c:	ldr	w8, [x24, #1416]
    4d90:	b	4cbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf9c>
    4d94:	mov	x22, x0
    4d98:	cbnz	x21, 4dd4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10b4>
    4d9c:	ldrsw	x8, [x24, #1416]
    4da0:	sub	x9, x8, #0x5
    4da4:	cmp	x9, #0x1
    4da8:	b.hi	4dd4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10b4>  // b.pmore
    4dac:	mov	w9, #0x18                  	// #24
    4db0:	mul	x8, x8, x9
    4db4:	ldr	x8, [x25, x8]
    4db8:	mov	x0, xzr
    4dbc:	blr	x8
    4dc0:	ldr	w8, [x24, #1416]
    4dc4:	add	w9, w8, #0x1
    4dc8:	cmp	w9, #0x7
    4dcc:	csinc	w8, wzr, w8, eq  // eq = none
    4dd0:	str	w8, [x24, #1416]
    4dd4:	ldr	w4, [x23, #344]
    4dd8:	mov	w2, #0x3                   	// #3
    4ddc:	mov	x0, xzr
    4de0:	mov	x1, x19
    4de4:	mov	w3, w20
    4de8:	mov	x5, x21
    4dec:	bl	1a50 <mmap@plt>
    4df0:	cmn	x0, #0x1
    4df4:	b.eq	4e14 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10f4>  // b.none
    4df8:	sub	x8, x22, x0
    4dfc:	add	x9, x0, x19
    4e00:	stur	x8, [x9, #-8]
    4e04:	ldr	x8, [x26, #1360]
    4e08:	add	x8, x8, x19
    4e0c:	str	x8, [x26, #1360]
    4e10:	b	4e30 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1110>
    4e14:	mov	x0, x22
    4e18:	mov	x1, x19
    4e1c:	bl	1aa0 <munmap@plt>
    4e20:	ldr	w0, [x23, #344]
    4e24:	mov	x1, x21
    4e28:	bl	1ae0 <ftruncate@plt>
    4e2c:	mov	x0, #0xffffffffffffffff    	// #-1
    4e30:	ldp	x20, x19, [sp, #64]
    4e34:	ldp	x22, x21, [sp, #48]
    4e38:	ldp	x24, x23, [sp, #32]
    4e3c:	ldp	x26, x25, [sp, #16]
    4e40:	ldp	x29, x30, [sp], #80
    4e44:	ret
    4e48:	stp	x29, x30, [sp, #-64]!
    4e4c:	str	x23, [sp, #16]
    4e50:	stp	x22, x21, [sp, #32]
    4e54:	stp	x20, x19, [sp, #48]
    4e58:	mov	x29, sp
    4e5c:	adrp	x23, 17000 <memcpy@GLIBC_2.17>
    4e60:	ldr	x2, [x23, #1424]
    4e64:	mov	x19, x1
    4e68:	mov	w20, w0
    4e6c:	cbnz	x2, 4e80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1160>
    4e70:	mov	w0, #0x1e                  	// #30
    4e74:	bl	1ac0 <sysconf@plt>
    4e78:	mov	x2, x0
    4e7c:	str	x0, [x23, #1424]
    4e80:	add	x9, x2, #0xf
    4e84:	mov	x8, sp
    4e88:	and	x9, x9, #0xfffffffffffffff0
    4e8c:	sub	x21, x8, x9
    4e90:	mov	sp, x21
    4e94:	mov	x0, x21
    4e98:	mov	w1, wzr
    4e9c:	bl	19b0 <memset@plt>
    4ea0:	cmp	x19, #0x1
    4ea4:	b.lt	4ee0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11c0>  // b.tstop
    4ea8:	ldr	x8, [x23, #1424]
    4eac:	mov	w0, w20
    4eb0:	mov	x1, x21
    4eb4:	cmp	x19, x8
    4eb8:	csel	x22, x19, x8, cc  // cc = lo, ul, last
    4ebc:	mov	x2, x22
    4ec0:	bl	1a10 <write@plt>
    4ec4:	cmp	x0, x22
    4ec8:	csel	x8, xzr, x22, lt  // lt = tstop
    4ecc:	cmp	x0, x22
    4ed0:	sub	x19, x19, x8
    4ed4:	b.ge	4ea0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1180>  // b.tcont
    4ed8:	mov	w0, #0xffffffff            	// #-1
    4edc:	b	4ee4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11c4>
    4ee0:	mov	w0, wzr
    4ee4:	mov	sp, x29
    4ee8:	ldp	x20, x19, [sp, #48]
    4eec:	ldp	x22, x21, [sp, #32]
    4ef0:	ldr	x23, [sp, #16]
    4ef4:	ldp	x29, x30, [sp], #64
    4ef8:	ret
    4efc:	stp	x29, x30, [sp, #-16]!
    4f00:	mov	x29, sp
    4f04:	bl	1b00 <getenv@plt>
    4f08:	cbz	x0, 4f14 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11f4>
    4f0c:	ldp	x29, x30, [sp], #16
    4f10:	b	4f20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1200>
    4f14:	mov	w0, #0xffffffff            	// #-1
    4f18:	ldp	x29, x30, [sp], #16
    4f1c:	ret
    4f20:	stp	x29, x30, [sp, #-48]!
    4f24:	str	x21, [sp, #16]
    4f28:	stp	x20, x19, [sp, #32]
    4f2c:	mov	x29, sp
    4f30:	mov	w1, #0x4082                	// #16514
    4f34:	movk	w1, #0x48, lsl #16
    4f38:	mov	w2, #0x1c0                 	// #448
    4f3c:	mov	x19, x0
    4f40:	bl	1990 <open@plt>
    4f44:	mov	w21, w0
    4f48:	cmn	w0, #0x1
    4f4c:	b.ne	4fe8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12c8>  // b.any
    4f50:	bl	1af0 <__errno_location@plt>
    4f54:	ldr	w8, [x0]
    4f58:	sub	w9, w8, #0x15
    4f5c:	cmp	w9, #0x2
    4f60:	b.cc	4f6c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x124c>  // b.lo, b.ul, b.last
    4f64:	cmp	w8, #0x5f
    4f68:	b.ne	4fe4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12c4>  // b.any
    4f6c:	str	wzr, [x0]
    4f70:	mov	x0, x19
    4f74:	bl	1940 <strlen@plt>
    4f78:	sxtw	x21, w0
    4f7c:	add	x9, x21, #0x1a
    4f80:	mov	x8, sp
    4f84:	and	x9, x9, #0xfffffffffffffff0
    4f88:	sub	x20, x8, x9
    4f8c:	mov	sp, x20
    4f90:	mov	x0, x20
    4f94:	mov	x1, x19
    4f98:	mov	x2, x21
    4f9c:	bl	1920 <memcpy@plt>
    4fa0:	adrp	x8, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    4fa4:	add	x8, x8, #0x12b
    4fa8:	ldr	x8, [x8]
    4fac:	mov	w10, #0x5858                	// #22616
    4fb0:	add	x9, x20, x21
    4fb4:	movk	w10, #0x58, lsl #16
    4fb8:	mov	w1, #0x80000               	// #524288
    4fbc:	mov	x0, x20
    4fc0:	stur	w10, [x9, #7]
    4fc4:	str	x8, [x9]
    4fc8:	bl	1a30 <mkostemp@plt>
    4fcc:	mov	w21, w0
    4fd0:	cmn	w0, #0x1
    4fd4:	b.eq	4fe8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12c8>  // b.none
    4fd8:	mov	x0, x20
    4fdc:	bl	1b50 <unlink@plt>
    4fe0:	b	4fe8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12c8>
    4fe4:	mov	w21, #0xffffffff            	// #-1
    4fe8:	mov	w0, w21
    4fec:	mov	sp, x29
    4ff0:	ldp	x20, x19, [sp, #32]
    4ff4:	ldr	x21, [sp, #16]
    4ff8:	ldp	x29, x30, [sp], #48
    4ffc:	ret
    5000:	stp	x29, x30, [sp, #-48]!
    5004:	stp	x28, x21, [sp, #16]
    5008:	stp	x20, x19, [sp, #32]
    500c:	mov	x29, sp
    5010:	sub	sp, sp, #0x3, lsl #12
    5014:	sub	sp, sp, #0x30
    5018:	adrp	x20, 17000 <memcpy@GLIBC_2.17>
    501c:	ldr	x9, [x20, #1432]
    5020:	adrp	x21, 17000 <memcpy@GLIBC_2.17>
    5024:	ldr	x8, [x21, #1440]
    5028:	cmp	x9, x0
    502c:	b.eq	5060 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1340>  // b.none
    5030:	mov	x19, x0
    5034:	cbz	x8, 5040 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1320>
    5038:	mov	x0, x8
    503c:	bl	19d0 <endmntent@plt>
    5040:	str	x19, [x20, #1432]
    5044:	cbz	x19, 50ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13cc>
    5048:	adrp	x1, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    504c:	add	x1, x1, #0xf6
    5050:	mov	x0, x19
    5054:	bl	19c0 <setmntent@plt>
    5058:	mov	x8, x0
    505c:	str	x0, [x21, #1440]
    5060:	cbz	x8, 50f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13d0>
    5064:	sub	x1, x29, #0x28
    5068:	add	x2, sp, #0x8
    506c:	mov	w3, #0x3000                	// #12288
    5070:	mov	x0, x8
    5074:	bl	1ad0 <getmntent_r@plt>
    5078:	cbz	x0, 50f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13d0>
    507c:	adrp	x19, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    5080:	adrp	x20, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    5084:	add	x19, x19, #0x136
    5088:	add	x20, x20, #0x139
    508c:	b	50a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1388>
    5090:	ldr	x0, [x21, #1440]
    5094:	sub	x1, x29, #0x28
    5098:	add	x2, sp, #0x8
    509c:	mov	w3, #0x3000                	// #12288
    50a0:	bl	1ad0 <getmntent_r@plt>
    50a4:	cbz	x0, 50f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13d0>
    50a8:	sub	x0, x29, #0x28
    50ac:	mov	x1, x19
    50b0:	bl	1a80 <hasmntopt@plt>
    50b4:	cbnz	x0, 5090 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1370>
    50b8:	sub	x0, x29, #0x28
    50bc:	mov	x1, x20
    50c0:	bl	1a80 <hasmntopt@plt>
    50c4:	cbnz	x0, 5090 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1370>
    50c8:	ldur	x0, [x29, #-32]
    50cc:	mov	w1, #0x2                   	// #2
    50d0:	bl	1a40 <access@plt>
    50d4:	cbnz	w0, 5090 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1370>
    50d8:	ldur	x0, [x29, #-32]
    50dc:	bl	4f20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1200>
    50e0:	cmn	w0, #0x1
    50e4:	b.eq	5090 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1370>  // b.none
    50e8:	b	50f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13d4>
    50ec:	str	xzr, [x21, #1440]
    50f0:	mov	w0, #0xffffffff            	// #-1
    50f4:	add	sp, sp, #0x3, lsl #12
    50f8:	add	sp, sp, #0x30
    50fc:	ldp	x20, x19, [sp, #32]
    5100:	ldp	x28, x21, [sp, #16]
    5104:	ldp	x29, x30, [sp], #48
    5108:	ret
    510c:	stp	x29, x30, [sp, #-64]!
    5110:	stp	x22, x21, [sp, #32]
    5114:	stp	x20, x19, [sp, #48]
    5118:	ldr	x21, [x0, #16]
    511c:	str	x23, [sp, #16]
    5120:	mov	x29, sp
    5124:	ldrh	w8, [x21, #10]
    5128:	cmp	w8, #0xf
    512c:	b.hi	522c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x150c>  // b.pmore
    5130:	ldr	w22, [x0, #24]
    5134:	adrp	x9, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    5138:	add	x9, x9, #0x140
    513c:	adr	x10, 5154 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1434>
    5140:	ldrb	w11, [x9, x8]
    5144:	add	x10, x10, x11, lsl #2
    5148:	mov	x19, x0
    514c:	mov	w20, wzr
    5150:	br	x10
    5154:	mov	x0, x21
    5158:	bl	5230 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1510>
    515c:	cbz	w0, 5170 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1450>
    5160:	mov	w20, w0
    5164:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    5168:	mov	w20, #0x1e                  	// #30
    516c:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    5170:	ldr	x8, [x21]
    5174:	cmp	x8, #0x11
    5178:	b.cc	51b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1490>  // b.lo, b.ul, b.last
    517c:	add	w22, w22, #0x8
    5180:	mov	w20, #0x20                  	// #32
    5184:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    5188:	mov	w20, #0x1c                  	// #28
    518c:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    5190:	mov	w20, #0x1a                  	// #26
    5194:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    5198:	mov	w20, #0x18                  	// #24
    519c:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    51a0:	mov	w20, #0x14                  	// #20
    51a4:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    51a8:	mov	w20, #0x16                  	// #22
    51ac:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    51b0:	cmp	x8, #0x10
    51b4:	b.eq	521c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14fc>  // b.none
    51b8:	cmp	x8, #0x8
    51bc:	b.ne	5224 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1504>  // b.any
    51c0:	mov	w20, #0x1                   	// #1
    51c4:	ldr	w21, [x19, #4]
    51c8:	cmp	w21, #0x1
    51cc:	b.lt	51f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14d4>  // b.tstop
    51d0:	ldr	x23, [x19, #8]
    51d4:	ldr	x0, [x23]
    51d8:	bl	5230 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1510>
    51dc:	cbnz	w0, 51f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14d0>
    51e0:	subs	x21, x21, #0x1
    51e4:	add	x23, x23, #0x8
    51e8:	b.ne	51d4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14b4>  // b.any
    51ec:	b	51f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14d4>
    51f0:	orr	w20, w20, #0x80
    51f4:	sub	w8, w22, #0x1
    51f8:	orr	w8, w8, #0xf
    51fc:	add	w8, w8, #0x1
    5200:	stp	w8, w20, [x19, #24]
    5204:	ldp	x20, x19, [sp, #48]
    5208:	ldp	x22, x21, [sp, #32]
    520c:	ldr	x23, [sp, #16]
    5210:	mov	w0, wzr
    5214:	ldp	x29, x30, [sp], #64
    5218:	ret
    521c:	mov	w20, #0x2                   	// #2
    5220:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    5224:	mov	w20, #0x42                  	// #66
    5228:	b	51c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a4>
    522c:	bl	1a20 <abort@plt>
    5230:	stp	x29, x30, [sp, #-64]!
    5234:	stp	x24, x23, [sp, #16]
    5238:	stp	x22, x21, [sp, #32]
    523c:	stp	x20, x19, [sp, #48]
    5240:	ldrh	w19, [x0, #10]
    5244:	mov	x29, sp
    5248:	sub	w8, w19, #0x2
    524c:	cmp	w8, #0x3
    5250:	b.cs	5268 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1548>  // b.hs, b.nlast
    5254:	mov	w23, #0x1                   	// #1
    5258:	lsl	w8, w19, #2
    525c:	sub	w8, w8, w23
    5260:	add	w0, w8, #0x4
    5264:	b	5338 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1618>
    5268:	cmp	w19, #0xd
    526c:	b.eq	5298 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1578>  // b.none
    5270:	cmp	w19, #0xf
    5274:	b.ne	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.any
    5278:	ldr	x8, [x0, #16]
    527c:	ldr	x8, [x8]
    5280:	ldrh	w19, [x8, #10]
    5284:	sub	w8, w19, #0x2
    5288:	cmp	w8, #0x3
    528c:	b.cs	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.hs, b.nlast
    5290:	mov	w23, #0x2                   	// #2
    5294:	b	5258 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1538>
    5298:	ldr	x23, [x0]
    529c:	sub	x8, x23, #0x4
    52a0:	cmp	x8, #0x3c
    52a4:	b.hi	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.pmore
    52a8:	ldr	x22, [x0, #16]
    52ac:	ldr	x20, [x22]
    52b0:	ldrh	w21, [x20, #10]
    52b4:	orr	w8, w21, #0x2
    52b8:	cmp	w8, #0xf
    52bc:	mov	w19, w21
    52c0:	b.ne	52e8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15c8>  // b.any
    52c4:	mov	x0, x20
    52c8:	bl	5acc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x30c>
    52cc:	mov	w19, w0
    52d0:	tbz	w0, #31, 52e8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15c8>
    52d4:	add	x24, x22, #0x8
    52d8:	ldr	x0, [x24], #8
    52dc:	bl	5acc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x30c>
    52e0:	tbnz	w0, #31, 52d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15b8>
    52e4:	mov	w19, w0
    52e8:	cmp	w19, #0x4
    52ec:	b.eq	5310 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15f0>  // b.none
    52f0:	cmp	w19, #0x3
    52f4:	b.eq	5320 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1600>  // b.none
    52f8:	cmp	w19, #0x2
    52fc:	b.ne	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.any
    5300:	tst	x23, #0x3
    5304:	b.ne	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.any
    5308:	lsr	x23, x23, #2
    530c:	b	532c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x160c>
    5310:	tst	x23, #0xf
    5314:	b.ne	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.any
    5318:	lsr	x23, x23, #4
    531c:	b	532c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x160c>
    5320:	tst	x23, #0x7
    5324:	b.ne	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.any
    5328:	lsr	x23, x23, #3
    532c:	cmp	x23, #0x4
    5330:	b.ls	534c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x162c>  // b.plast
    5334:	mov	w0, wzr
    5338:	ldp	x20, x19, [sp, #48]
    533c:	ldp	x22, x21, [sp, #32]
    5340:	ldp	x24, x23, [sp, #16]
    5344:	ldp	x29, x30, [sp], #64
    5348:	ret
    534c:	cbz	x20, 5258 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1538>
    5350:	orr	w8, w21, #0x2
    5354:	and	w8, w8, #0xffff
    5358:	add	x22, x22, #0x8
    535c:	cmp	w8, #0xf
    5360:	b.ne	5378 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1658>  // b.any
    5364:	mov	x0, x20
    5368:	mov	w1, w19
    536c:	bl	5b24 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x364>
    5370:	cbnz	w0, 5380 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1660>
    5374:	b	5338 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1618>
    5378:	cmp	w19, w21, uxth
    537c:	b.ne	5334 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1614>  // b.any
    5380:	ldr	x20, [x22]
    5384:	cbz	x20, 5258 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1538>
    5388:	ldrh	w21, [x20, #10]
    538c:	b	5350 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1630>

0000000000005390 <ffi_call@@LIBFFI_BASE_7.0>:
    5390:	mov	x4, xzr
    5394:	b	5398 <ffi_call@@LIBFFI_BASE_7.0+0x8>
    5398:	stp	x29, x30, [sp, #-96]!
    539c:	stp	x28, x27, [sp, #16]
    53a0:	stp	x26, x25, [sp, #32]
    53a4:	stp	x24, x23, [sp, #48]
    53a8:	stp	x22, x21, [sp, #64]
    53ac:	stp	x20, x19, [sp, #80]
    53b0:	mov	x29, sp
    53b4:	sub	sp, sp, #0x60
    53b8:	ldr	x8, [x0, #16]
    53bc:	mov	x23, x3
    53c0:	mov	x25, x0
    53c4:	ldr	x9, [x8]
    53c8:	ldp	w8, w10, [x0, #24]
    53cc:	stur	x4, [x29, #-40]
    53d0:	stur	x1, [x29, #-56]
    53d4:	stur	x9, [x29, #-88]
    53d8:	tbnz	w10, #5, 53ec <ffi_call@@LIBFFI_BASE_7.0+0x5c>
    53dc:	cbz	x2, 53fc <ffi_call@@LIBFFI_BASE_7.0+0x6c>
    53e0:	lsr	x9, x10, #2
    53e4:	and	x9, x9, #0x10
    53e8:	b	5404 <ffi_call@@LIBFFI_BASE_7.0+0x74>
    53ec:	cmp	x2, #0x0
    53f0:	stur	x10, [x29, #-48]
    53f4:	csel	x9, x9, xzr, eq  // eq = none
    53f8:	b	5408 <ffi_call@@LIBFFI_BASE_7.0+0x78>
    53fc:	and	w10, w10, #0x80
    5400:	mov	x9, xzr
    5404:	stur	x10, [x29, #-48]
    5408:	add	x10, x8, x9
    540c:	add	x10, x10, #0xef
    5410:	and	x10, x10, #0xfffffffffffffff0
    5414:	mov	x11, sp
    5418:	sub	x10, x11, x10
    541c:	mov	sp, x10
    5420:	stur	x10, [x29, #-32]
    5424:	add	x11, x10, #0xc0
    5428:	ldr	w10, [x25, #4]
    542c:	add	x8, x11, x8
    5430:	stp	x2, x8, [x29, #-80]
    5434:	add	x8, x8, #0x20
    5438:	cmp	x9, #0x0
    543c:	csel	x8, x2, x8, eq  // eq = none
    5440:	cmp	w10, #0x1
    5444:	stur	x11, [x29, #-8]
    5448:	stur	x8, [x29, #-64]
    544c:	b.lt	56d8 <ffi_call@@LIBFFI_BASE_7.0+0x348>  // b.tstop
    5450:	ldur	x8, [x29, #-32]
    5454:	adrp	x26, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    5458:	mov	x19, xzr
    545c:	mov	x28, xzr
    5460:	mov	w27, wzr
    5464:	add	x8, x8, #0x80
    5468:	lsl	x22, x10, #3
    546c:	add	x26, x26, #0x150
    5470:	stp	x8, xzr, [x29, #-24]
    5474:	b	54b0 <ffi_call@@LIBFFI_BASE_7.0+0x120>
    5478:	ldrh	w9, [x24, #8]
    547c:	mov	w27, #0x8                   	// #8
    5480:	sub	x10, x28, #0x1
    5484:	cmp	w9, #0x8
    5488:	csel	x9, x9, x27, hi  // hi = pmore
    548c:	sub	x9, x9, #0x1
    5490:	orr	x9, x9, x10
    5494:	ldur	x10, [x29, #-8]
    5498:	add	x9, x9, #0x1
    549c:	add	x28, x9, x20
    54a0:	str	x8, [x10, x9]
    54a4:	add	x19, x19, #0x8
    54a8:	cmp	x22, x19
    54ac:	b.eq	56d8 <ffi_call@@LIBFFI_BASE_7.0+0x348>  // b.none
    54b0:	ldr	x8, [x25, #8]
    54b4:	ldr	x24, [x8, x19]
    54b8:	ldrh	w8, [x24, #10]
    54bc:	cmp	w8, #0xf
    54c0:	b.hi	5720 <ffi_call@@LIBFFI_BASE_7.0+0x390>  // b.pmore
    54c4:	ldr	x20, [x24]
    54c8:	ldr	x21, [x23, x19]
    54cc:	adr	x9, 54a4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    54d0:	ldrb	w10, [x26, x8]
    54d4:	add	x9, x9, x10, lsl #2
    54d8:	br	x9
    54dc:	mov	x0, x24
    54e0:	bl	5230 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1510>
    54e4:	cbz	w0, 55d4 <ffi_call@@LIBFFI_BASE_7.0+0x244>
    54e8:	ldur	x10, [x29, #-16]
    54ec:	and	w8, w0, #0x3
    54f0:	sub	w8, w10, w8
    54f4:	add	w8, w8, #0x4
    54f8:	cmp	w8, #0x9
    54fc:	b.cs	55f4 <ffi_call@@LIBFFI_BASE_7.0+0x264>  // b.hs, b.nlast
    5500:	ldur	x9, [x29, #-32]
    5504:	mov	w11, #0xc                   	// #12
    5508:	add	x9, x9, w10, uxtw #4
    550c:	sub	w10, w0, #0x8
    5510:	smull	x10, w10, w11
    5514:	adr	x11, 5520 <ffi_call@@LIBFFI_BASE_7.0+0x190>
    5518:	add	x11, x11, x10
    551c:	br	x11
    5520:	ldp	s16, s17, [x21]
    5524:	ldp	s18, s19, [x21, #8]
    5528:	b	55ac <ffi_call@@LIBFFI_BASE_7.0+0x21c>
    552c:	ldp	s16, s17, [x21]
    5530:	ldr	s18, [x21, #8]
    5534:	b	55b0 <ffi_call@@LIBFFI_BASE_7.0+0x220>
    5538:	ldp	s16, s17, [x21]
    553c:	b	55b4 <ffi_call@@LIBFFI_BASE_7.0+0x224>
    5540:	nop
    5544:	ldr	s16, [x21]
    5548:	b	55b8 <ffi_call@@LIBFFI_BASE_7.0+0x228>
    554c:	nop
    5550:	ldp	d16, d17, [x21]
    5554:	ldp	d18, d19, [x21, #16]
    5558:	b	55ac <ffi_call@@LIBFFI_BASE_7.0+0x21c>
    555c:	ldp	d16, d17, [x21]
    5560:	ldr	d18, [x21, #16]
    5564:	b	55b0 <ffi_call@@LIBFFI_BASE_7.0+0x220>
    5568:	ldp	d16, d17, [x21]
    556c:	b	55b4 <ffi_call@@LIBFFI_BASE_7.0+0x224>
    5570:	nop
    5574:	ldr	d16, [x21]
    5578:	b	55b8 <ffi_call@@LIBFFI_BASE_7.0+0x228>
    557c:	nop
    5580:	ldp	q16, q17, [x21]
    5584:	ldp	q18, q19, [x21, #32]
    5588:	b	55ac <ffi_call@@LIBFFI_BASE_7.0+0x21c>
    558c:	ldp	q16, q17, [x21]
    5590:	ldr	q18, [x21, #32]
    5594:	b	55b0 <ffi_call@@LIBFFI_BASE_7.0+0x220>
    5598:	ldp	q16, q17, [x21]
    559c:	b	55b4 <ffi_call@@LIBFFI_BASE_7.0+0x224>
    55a0:	nop
    55a4:	ldr	q16, [x21]
    55a8:	b	55b8 <ffi_call@@LIBFFI_BASE_7.0+0x228>
    55ac:	str	q19, [x9, #48]
    55b0:	str	q18, [x9, #32]
    55b4:	str	q17, [x9, #16]
    55b8:	str	q16, [x9]
    55bc:	stur	x8, [x29, #-16]
    55c0:	b	54a4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    55c4:	ldrsw	x8, [x21]
    55c8:	cmp	w27, #0x7
    55cc:	b.ls	5660 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>  // b.plast
    55d0:	b	5478 <ffi_call@@LIBFFI_BASE_7.0+0xe8>
    55d4:	cmp	x20, #0x10
    55d8:	b.ls	5674 <ffi_call@@LIBFFI_BASE_7.0+0x2e4>  // b.plast
    55dc:	add	x21, x23, x19
    55e0:	mov	w20, #0x8                   	// #8
    55e4:	ldr	x8, [x21]
    55e8:	cmp	w27, #0x7
    55ec:	b.hi	5478 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    55f0:	b	5660 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    55f4:	ldrh	w8, [x24, #8]
    55f8:	mov	w11, #0x8                   	// #8
    55fc:	mov	w10, #0x8                   	// #8
    5600:	sub	x9, x28, #0x1
    5604:	cmp	w8, #0x8
    5608:	stur	x10, [x29, #-16]
    560c:	csel	x8, x8, x11, hi  // hi = pmore
    5610:	b	56b0 <ffi_call@@LIBFFI_BASE_7.0+0x320>
    5614:	ldrsh	x8, [x21]
    5618:	cmp	w27, #0x7
    561c:	b.hi	5478 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5620:	b	5660 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5624:	ldrb	w8, [x21]
    5628:	cmp	w27, #0x7
    562c:	b.hi	5478 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5630:	b	5660 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5634:	ldrsb	x8, [x21]
    5638:	cmp	w27, #0x7
    563c:	b.hi	5478 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5640:	b	5660 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5644:	ldr	w8, [x21]
    5648:	cmp	w27, #0x7
    564c:	b.hi	5478 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5650:	b	5660 <ffi_call@@LIBFFI_BASE_7.0+0x2d0>
    5654:	ldrh	w8, [x21]
    5658:	cmp	w27, #0x7
    565c:	b.hi	5478 <ffi_call@@LIBFFI_BASE_7.0+0xe8>  // b.pmore
    5660:	ldur	x10, [x29, #-24]
    5664:	add	w9, w27, #0x1
    5668:	str	x8, [x10, w27, uxtw #3]
    566c:	mov	w27, w9
    5670:	b	54a4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    5674:	add	x9, x20, #0x7
    5678:	mov	w8, w27
    567c:	add	x10, x8, x9, lsr #3
    5680:	cmp	x10, #0x8
    5684:	b.hi	569c <ffi_call@@LIBFFI_BASE_7.0+0x30c>  // b.pmore
    5688:	ldur	x10, [x29, #-24]
    568c:	lsr	x9, x9, #3
    5690:	add	w27, w27, w9
    5694:	add	x0, x10, x8, lsl #3
    5698:	b	56c8 <ffi_call@@LIBFFI_BASE_7.0+0x338>
    569c:	ldrh	w8, [x24, #8]
    56a0:	mov	w27, #0x8                   	// #8
    56a4:	sub	x9, x28, #0x1
    56a8:	cmp	w8, #0x8
    56ac:	csel	x8, x8, x27, hi  // hi = pmore
    56b0:	sub	x8, x8, #0x1
    56b4:	orr	x8, x8, x9
    56b8:	ldur	x9, [x29, #-8]
    56bc:	add	x8, x8, #0x1
    56c0:	add	x28, x8, x20
    56c4:	add	x0, x9, x8
    56c8:	mov	x1, x21
    56cc:	mov	x2, x20
    56d0:	bl	1920 <memcpy@plt>
    56d4:	b	54a4 <ffi_call@@LIBFFI_BASE_7.0+0x114>
    56d8:	ldp	x1, x20, [x29, #-72]
    56dc:	ldp	x2, x19, [x29, #-56]
    56e0:	ldp	x5, x0, [x29, #-40]
    56e4:	mov	x3, x20
    56e8:	mov	w4, w19
    56ec:	bl	5b90 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3d0>
    56f0:	tbz	w19, #6, 5700 <ffi_call@@LIBFFI_BASE_7.0+0x370>
    56f4:	ldp	x2, x0, [x29, #-88]
    56f8:	mov	x1, x20
    56fc:	bl	1920 <memcpy@plt>
    5700:	mov	sp, x29
    5704:	ldp	x20, x19, [sp, #80]
    5708:	ldp	x22, x21, [sp, #64]
    570c:	ldp	x24, x23, [sp, #48]
    5710:	ldp	x26, x25, [sp, #32]
    5714:	ldp	x28, x27, [sp, #16]
    5718:	ldp	x29, x30, [sp], #96
    571c:	ret
    5720:	bl	1a20 <abort@plt>

0000000000005724 <ffi_call_go@@LIBFFI_GO_CLOSURE_7.0>:
    5724:	b	5398 <ffi_call@@LIBFFI_BASE_7.0+0x8>

0000000000005728 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0>:
    5728:	stp	x29, x30, [sp, #-48]!
    572c:	stp	x22, x21, [sp, #16]
    5730:	stp	x20, x19, [sp, #32]
    5734:	mov	x29, sp
    5738:	ldr	w8, [x1]
    573c:	cmp	w8, #0x1
    5740:	b.ne	57ac <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0+0x84>  // b.any
    5744:	ldr	w8, [x1, #28]
    5748:	adrp	x10, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    574c:	add	x10, x10, #0x167
    5750:	ldr	q0, [x10]
    5754:	adrp	x9, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12e0>
    5758:	adrp	x10, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12e0>
    575c:	add	x9, x9, #0xd00
    5760:	add	x10, x10, #0xd20
    5764:	tst	w8, #0x80
    5768:	mov	x21, x1
    576c:	csel	x8, x10, x9, eq  // eq = none
    5770:	add	x1, x0, #0x18
    5774:	mov	x19, x3
    5778:	mov	x20, x2
    577c:	mov	x22, x0
    5780:	str	q0, [x0]
    5784:	str	x8, [x0, #16]
    5788:	bl	5eb8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f8>
    578c:	mov	x0, x22
    5790:	bl	3ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15d0>
    5794:	add	x1, x0, #0x18
    5798:	bl	5eb8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6f8>
    579c:	mov	w0, wzr
    57a0:	stp	x21, x20, [x22, #24]
    57a4:	str	x19, [x22, #40]
    57a8:	b	57b0 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0+0x88>
    57ac:	mov	w0, #0x2                   	// #2
    57b0:	ldp	x20, x19, [sp, #32]
    57b4:	ldp	x22, x21, [sp, #16]
    57b8:	ldp	x29, x30, [sp], #48
    57bc:	ret

00000000000057c0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0>:
    57c0:	ldr	w8, [x1]
    57c4:	cmp	w8, #0x1
    57c8:	b.ne	57fc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c>  // b.any
    57cc:	ldr	w9, [x1, #28]
    57d0:	adrp	x10, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12e0>
    57d4:	adrp	x11, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12e0>
    57d8:	add	x10, x10, #0xe70
    57dc:	add	x11, x11, #0xe90
    57e0:	tst	w9, #0x80
    57e4:	mov	x8, x0
    57e8:	mov	w0, wzr
    57ec:	csel	x9, x11, x10, eq  // eq = none
    57f0:	stp	x9, x1, [x8]
    57f4:	str	x2, [x8, #16]
    57f8:	ret
    57fc:	mov	w0, #0x2                   	// #2
    5800:	ret
    5804:	stp	x29, x30, [sp, #-96]!
    5808:	stp	x28, x27, [sp, #16]
    580c:	stp	x26, x25, [sp, #32]
    5810:	stp	x24, x23, [sp, #48]
    5814:	stp	x22, x21, [sp, #64]
    5818:	stp	x20, x19, [sp, #80]
    581c:	mov	x29, sp
    5820:	sub	sp, sp, #0x30
    5824:	stp	x5, x6, [x29, #-40]
    5828:	stp	x3, x4, [x29, #-16]
    582c:	ldr	w8, [x0, #4]
    5830:	mov	x9, sp
    5834:	mov	x23, x0
    5838:	stur	x2, [x29, #-24]
    583c:	lsl	x28, x8, #3
    5840:	add	x10, x28, #0xf
    5844:	and	x10, x10, #0xffffffff0
    5848:	sub	x26, x9, x10
    584c:	stur	x1, [x29, #-48]
    5850:	mov	sp, x26
    5854:	cmp	w8, #0x1
    5858:	b.lt	5a80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2c0>  // b.tstop
    585c:	mov	x19, xzr
    5860:	mov	x24, xzr
    5864:	mov	w22, wzr
    5868:	mov	w25, wzr
    586c:	mov	w10, #0x1                   	// #1
    5870:	mov	w21, #0x5fe2                	// #24546
    5874:	b	589c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xdc>
    5878:	ldur	x8, [x29, #-16]
    587c:	add	w9, w25, #0x1
    5880:	add	x8, x8, w25, uxtw #3
    5884:	add	x8, x8, #0x80
    5888:	str	x8, [x26, x19]
    588c:	mov	w25, w9
    5890:	add	x19, x19, #0x8
    5894:	cmp	x28, x19
    5898:	b.eq	5a80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2c0>  // b.none
    589c:	ldr	x8, [x23, #8]
    58a0:	ldr	x27, [x8, x19]
    58a4:	ldrh	w8, [x27, #10]
    58a8:	cmp	w8, #0xf
    58ac:	b.hi	5ac8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x308>  // b.pmore
    58b0:	ldr	x20, [x27]
    58b4:	lsl	w8, w10, w8
    58b8:	tst	w8, w21
    58bc:	b.eq	58f8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x138>  // b.none
    58c0:	cmp	w25, #0x7
    58c4:	b.ls	5878 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xb8>  // b.plast
    58c8:	cmp	x20, #0x8
    58cc:	mov	w25, #0x8                   	// #8
    58d0:	csel	x9, x20, x25, hi  // hi = pmore
    58d4:	sub	x8, x24, #0x1
    58d8:	sub	x9, x9, #0x1
    58dc:	orr	x8, x9, x8
    58e0:	ldur	x9, [x29, #-8]
    58e4:	add	x8, x8, #0x1
    58e8:	add	x24, x8, x20
    58ec:	add	x8, x9, x8
    58f0:	str	x8, [x26, x19]
    58f4:	b	5890 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xd0>
    58f8:	mov	w9, #0xa01c                	// #40988
    58fc:	tst	w8, w9
    5900:	b.eq	5890 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xd0>  // b.none
    5904:	mov	x0, x27
    5908:	bl	5230 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1510>
    590c:	cbz	w0, 596c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1ac>
    5910:	and	w8, w0, #0x3
    5914:	mov	w9, #0x4                   	// #4
    5918:	sub	w9, w9, w8
    591c:	mov	w8, w22
    5920:	add	x10, x9, x8
    5924:	cmp	x10, #0x8
    5928:	b.hi	5994 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d4>  // b.pmore
    592c:	ldur	x10, [x29, #-16]
    5930:	add	w22, w9, w22
    5934:	add	x8, x10, x8, lsl #4
    5938:	sub	w10, w0, #0x8
    593c:	cmp	w10, #0x6
    5940:	b.hi	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>  // b.pmore
    5944:	adrp	x12, 6000 <ffi_type_sint32@@LIBFFI_BASE_7.0+0x10>
    5948:	add	x12, x12, #0x160
    594c:	adr	x9, 595c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x19c>
    5950:	ldrb	w11, [x12, x10]
    5954:	add	x9, x9, x11, lsl #2
    5958:	br	x9
    595c:	ldp	q16, q17, [x8]
    5960:	ldp	q18, q19, [x8, #32]
    5964:	st4	{v16.s-v19.s}[0], [x8]
    5968:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>
    596c:	cmp	x20, #0x11
    5970:	b.cc	59ac <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1ec>  // b.lo, b.ul, b.last
    5974:	cmp	w25, #0x7
    5978:	b.hi	59d8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x218>  // b.pmore
    597c:	ldur	x8, [x29, #-16]
    5980:	add	w9, w25, #0x1
    5984:	add	x8, x8, w25, uxtw #3
    5988:	add	x8, x8, #0x80
    598c:	mov	w25, w9
    5990:	b	59f4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x234>
    5994:	ldrh	w8, [x27, #8]
    5998:	mov	w22, #0x8                   	// #8
    599c:	sub	x9, x24, #0x1
    59a0:	cmp	w8, #0x8
    59a4:	csel	x8, x8, x22, hi  // hi = pmore
    59a8:	b	5a14 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x254>
    59ac:	add	x9, x20, #0x7
    59b0:	mov	w8, w25
    59b4:	add	x10, x8, x9, lsr #3
    59b8:	cmp	x10, #0x8
    59bc:	b.hi	5a00 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x240>  // b.pmore
    59c0:	ldur	x10, [x29, #-16]
    59c4:	lsr	x9, x9, #3
    59c8:	add	w25, w25, w9
    59cc:	add	x8, x10, x8, lsl #3
    59d0:	add	x8, x8, #0x80
    59d4:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>
    59d8:	ldur	x9, [x29, #-8]
    59dc:	sub	x8, x24, #0x1
    59e0:	orr	x8, x8, #0x7
    59e4:	add	x24, x8, #0x9
    59e8:	add	x9, x8, x9
    59ec:	add	x8, x9, #0x1
    59f0:	mov	w25, #0x8                   	// #8
    59f4:	ldr	x8, [x8]
    59f8:	mov	w10, #0x1                   	// #1
    59fc:	b	58f0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x130>
    5a00:	ldrh	w8, [x27, #8]
    5a04:	mov	w25, #0x8                   	// #8
    5a08:	sub	x9, x24, #0x1
    5a0c:	cmp	w8, #0x8
    5a10:	csel	x8, x8, x25, hi  // hi = pmore
    5a14:	sub	x8, x8, #0x1
    5a18:	orr	x8, x8, x9
    5a1c:	ldur	x9, [x29, #-8]
    5a20:	add	x8, x8, #0x1
    5a24:	add	x24, x8, x20
    5a28:	add	x8, x9, x8
    5a2c:	str	x8, [x26, x19]
    5a30:	mov	w10, #0x1                   	// #1
    5a34:	b	5890 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xd0>
    5a38:	ldp	q16, q17, [x8]
    5a3c:	st2	{v16.s, v17.s}[0], [x8]
    5a40:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>
    5a44:	ldp	q16, q17, [x8]
    5a48:	ldr	q18, [x8, #32]
    5a4c:	st3	{v16.s-v18.s}[0], [x8]
    5a50:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>
    5a54:	ldp	q16, q17, [x8]
    5a58:	ldp	q18, q19, [x8, #32]
    5a5c:	st4	{v16.d-v19.d}[0], [x8]
    5a60:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>
    5a64:	ldp	q16, q17, [x8]
    5a68:	ldr	q18, [x8, #32]
    5a6c:	st3	{v16.d-v18.d}[0], [x8]
    5a70:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>
    5a74:	ldp	q16, q17, [x8]
    5a78:	st2	{v16.d, v17.d}[0], [x8]
    5a7c:	b	5a2c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x26c>
    5a80:	ldr	w24, [x23, #28]
    5a84:	ldp	x9, x8, [x29, #-40]
    5a88:	ldur	x3, [x29, #-24]
    5a8c:	mov	x0, x23
    5a90:	tst	w24, #0x20
    5a94:	csel	x1, x9, x8, eq  // eq = none
    5a98:	ldur	x8, [x29, #-48]
    5a9c:	mov	x2, x26
    5aa0:	blr	x8
    5aa4:	mov	w0, w24
    5aa8:	mov	sp, x29
    5aac:	ldp	x20, x19, [sp, #80]
    5ab0:	ldp	x22, x21, [sp, #64]
    5ab4:	ldp	x24, x23, [sp, #48]
    5ab8:	ldp	x26, x25, [sp, #32]
    5abc:	ldp	x28, x27, [sp, #16]
    5ac0:	ldp	x29, x30, [sp], #96
    5ac4:	ret
    5ac8:	bl	1a20 <abort@plt>
    5acc:	stp	x29, x30, [sp, #-32]!
    5ad0:	ldr	x9, [x0, #16]
    5ad4:	str	x19, [sp, #16]
    5ad8:	mov	x29, sp
    5adc:	cbz	x9, 5b14 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x354>
    5ae0:	ldr	x8, [x9]
    5ae4:	cbz	x8, 5b14 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x354>
    5ae8:	add	x19, x9, #0x8
    5aec:	ldrh	w0, [x8, #10]
    5af0:	orr	w9, w0, #0x2
    5af4:	cmp	w9, #0xf
    5af8:	b.ne	5b18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x358>  // b.any
    5afc:	mov	x0, x8
    5b00:	bl	5acc <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x30c>
    5b04:	tbz	w0, #31, 5b18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x358>
    5b08:	ldr	x8, [x19], #8
    5b0c:	cbnz	x8, 5aec <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x32c>
    5b10:	b	5b18 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x358>
    5b14:	mov	w0, #0xffffffff            	// #-1
    5b18:	ldr	x19, [sp, #16]
    5b1c:	ldp	x29, x30, [sp], #32
    5b20:	ret
    5b24:	stp	x29, x30, [sp, #-32]!
    5b28:	stp	x20, x19, [sp, #16]
    5b2c:	ldr	x8, [x0, #16]
    5b30:	mov	x29, sp
    5b34:	cbz	x8, 5b80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c0>
    5b38:	ldr	x0, [x8]
    5b3c:	cbz	x0, 5b80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c0>
    5b40:	mov	w19, w1
    5b44:	add	x20, x8, #0x8
    5b48:	b	5b60 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3a0>
    5b4c:	mov	w1, w19
    5b50:	bl	5b24 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x364>
    5b54:	cbz	w0, 5b84 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c4>
    5b58:	ldr	x0, [x20], #8
    5b5c:	cbz	x0, 5b80 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c0>
    5b60:	ldrh	w8, [x0, #10]
    5b64:	orr	w9, w8, #0x2
    5b68:	cmp	w9, #0xf
    5b6c:	b.eq	5b4c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x38c>  // b.none
    5b70:	cmp	w8, w19
    5b74:	b.eq	5b58 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x398>  // b.none
    5b78:	mov	w0, wzr
    5b7c:	b	5b84 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c4>
    5b80:	mov	w0, #0x1                   	// #1
    5b84:	ldp	x20, x19, [sp, #16]
    5b88:	ldp	x29, x30, [sp], #32
    5b8c:	ret
    5b90:	stp	x29, x30, [x1]
    5b94:	mov	x29, x1
    5b98:	mov	sp, x0
    5b9c:	mov	x9, x2
    5ba0:	mov	x8, x3
    5ba4:	mov	x18, x5
    5ba8:	stp	x3, x4, [x29, #16]
    5bac:	tbz	w4, #7, 5bc0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x400>
    5bb0:	ldp	q0, q1, [sp]
    5bb4:	ldp	q2, q3, [sp, #32]
    5bb8:	ldp	q4, q5, [sp, #64]
    5bbc:	ldp	q6, q7, [sp, #96]
    5bc0:	ldp	x0, x1, [sp, #128]
    5bc4:	ldp	x2, x3, [sp, #144]
    5bc8:	ldp	x4, x5, [sp, #160]
    5bcc:	ldp	x6, x7, [sp, #176]
    5bd0:	add	sp, sp, #0xc0
    5bd4:	blr	x9
    5bd8:	ldp	x3, x4, [x29, #16]
    5bdc:	mov	sp, x29
    5be0:	ldp	x29, x30, [x29]
    5be4:	adr	x5, 5c00 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x440>
    5be8:	and	w4, w4, #0x1f
    5bec:	add	x5, x5, x4, lsl #3
    5bf0:	br	x5
    5bf4:	nop
    5bf8:	nop
    5bfc:	nop
    5c00:	ret
    5c04:	nop
    5c08:	str	x0, [x3]
    5c0c:	ret
    5c10:	stp	x0, x1, [x3]
    5c14:	ret
    5c18:	brk	#0x3e8
    5c1c:	ret
    5c20:	brk	#0x3e8
    5c24:	ret
    5c28:	brk	#0x3e8
    5c2c:	ret
    5c30:	brk	#0x3e8
    5c34:	ret
    5c38:	brk	#0x3e8
    5c3c:	ret
    5c40:	st4	{v0.s-v3.s}[0], [x3]
    5c44:	ret
    5c48:	st3	{v0.s-v2.s}[0], [x3]
    5c4c:	ret
    5c50:	stp	s0, s1, [x3]
    5c54:	ret
    5c58:	str	s0, [x3]
    5c5c:	ret
    5c60:	st4	{v0.d-v3.d}[0], [x3]
    5c64:	ret
    5c68:	st3	{v0.d-v2.d}[0], [x3]
    5c6c:	ret
    5c70:	stp	d0, d1, [x3]
    5c74:	ret
    5c78:	str	d0, [x3]
    5c7c:	ret
    5c80:	str	q3, [x3, #48]
    5c84:	nop
    5c88:	str	q2, [x3, #32]
    5c8c:	nop
    5c90:	stp	q0, q1, [x3]
    5c94:	ret
    5c98:	str	q0, [x3]
    5c9c:	ret
    5ca0:	uxtb	w0, w0
    5ca4:	str	x0, [x3]
    5ca8:	ret
    5cac:	nop
    5cb0:	uxth	w0, w0
    5cb4:	str	x0, [x3]
    5cb8:	ret
    5cbc:	nop
    5cc0:	mov	w0, w0
    5cc4:	str	x0, [x3]
    5cc8:	ret
    5ccc:	nop
    5cd0:	sxtb	x0, w0
    5cd4:	str	x0, [x3]
    5cd8:	ret
    5cdc:	nop
    5ce0:	sxth	x0, w0
    5ce4:	str	x0, [x3]
    5ce8:	ret
    5cec:	nop
    5cf0:	sxtw	x0, w0
    5cf4:	str	x0, [x3]
    5cf8:	ret
    5cfc:	nop
    5d00:	stp	x29, x30, [sp, #-272]!
    5d04:	stp	q0, q1, [sp, #16]
    5d08:	stp	q2, q3, [sp, #48]
    5d0c:	stp	q4, q5, [sp, #80]
    5d10:	stp	q6, q7, [sp, #112]
    5d14:	b	5d24 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x564>
    5d18:	nop
    5d1c:	nop
    5d20:	stp	x29, x30, [sp, #-272]!
    5d24:	mov	x29, sp
    5d28:	stp	x0, x1, [sp, #144]
    5d2c:	stp	x2, x3, [sp, #160]
    5d30:	stp	x4, x5, [sp, #176]
    5d34:	stp	x6, x7, [sp, #192]
    5d38:	ldp	x0, x1, [x17, #24]
    5d3c:	ldr	x2, [x17, #40]
    5d40:	add	x3, sp, #0x10
    5d44:	add	x4, sp, #0x110
    5d48:	add	x5, sp, #0xd0
    5d4c:	mov	x6, x8
    5d50:	bl	5804 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x44>
    5d54:	adr	x1, 5d70 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x5b0>
    5d58:	and	w0, w0, #0x1f
    5d5c:	add	x1, x1, x0, lsl #3
    5d60:	add	x3, sp, #0xd0
    5d64:	br	x1
    5d68:	nop
    5d6c:	nop
    5d70:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5d74:	nop
    5d78:	ldr	x0, [x3]
    5d7c:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5d80:	ldp	x0, x1, [x3]
    5d84:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5d88:	brk	#0x3e8
    5d8c:	nop
    5d90:	brk	#0x3e8
    5d94:	nop
    5d98:	brk	#0x3e8
    5d9c:	nop
    5da0:	brk	#0x3e8
    5da4:	nop
    5da8:	brk	#0x3e8
    5dac:	nop
    5db0:	ldr	s3, [x3, #12]
    5db4:	nop
    5db8:	ldr	s2, [x3, #8]
    5dbc:	nop
    5dc0:	ldp	s0, s1, [x3]
    5dc4:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5dc8:	ldr	s0, [x3]
    5dcc:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5dd0:	ldr	d3, [x3, #24]
    5dd4:	nop
    5dd8:	ldr	d2, [x3, #16]
    5ddc:	nop
    5de0:	ldp	d0, d1, [x3]
    5de4:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5de8:	ldr	d0, [x3]
    5dec:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5df0:	ldr	q3, [x3, #48]
    5df4:	nop
    5df8:	ldr	q2, [x3, #32]
    5dfc:	nop
    5e00:	ldp	q0, q1, [x3]
    5e04:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5e08:	ldr	q0, [x3]
    5e0c:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5e10:	ldrb	w0, [x3]
    5e14:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5e18:	brk	#0x3e8
    5e1c:	nop
    5e20:	ldrh	w0, [x3]
    5e24:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5e28:	brk	#0x3e8
    5e2c:	nop
    5e30:	ldr	w0, [x3]
    5e34:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5e38:	brk	#0x3e8
    5e3c:	nop
    5e40:	ldrsb	x0, [x3]
    5e44:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5e48:	brk	#0x3e8
    5e4c:	nop
    5e50:	ldrsh	x0, [x3]
    5e54:	b	5e68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>
    5e58:	brk	#0x3e8
    5e5c:	nop
    5e60:	ldrsw	x0, [x3]
    5e64:	nop
    5e68:	ldp	x29, x30, [sp], #272
    5e6c:	ret
    5e70:	stp	x29, x30, [sp, #-272]!
    5e74:	stp	q0, q1, [sp, #16]
    5e78:	stp	q2, q3, [sp, #48]
    5e7c:	stp	q4, q5, [sp, #80]
    5e80:	stp	q6, q7, [sp, #112]
    5e84:	b	5e94 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6d4>
    5e88:	nop
    5e8c:	nop
    5e90:	stp	x29, x30, [sp, #-272]!
    5e94:	mov	x29, sp
    5e98:	stp	x0, x1, [sp, #144]
    5e9c:	stp	x2, x3, [sp, #160]
    5ea0:	stp	x4, x5, [sp, #176]
    5ea4:	stp	x6, x7, [sp, #192]
    5ea8:	ldp	x0, x1, [x18, #8]
    5eac:	mov	x2, x18
    5eb0:	b	5d40 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x580>
    5eb4:	nop
    5eb8:	b	5ec0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x700>
    5ebc:	nop
    5ec0:	adrp	x3, 17000 <memcpy@GLIBC_2.17>
    5ec4:	ldr	w2, [x3, #1492]
    5ec8:	cbnz	w2, 5ed8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x718>
    5ecc:	mrs	x4, ctr_el0
    5ed0:	mov	w2, w4
    5ed4:	str	w4, [x3, #1492]
    5ed8:	ubfx	x4, x2, #16, #4
    5edc:	mov	w3, #0x4                   	// #4
    5ee0:	and	w5, w2, #0xf
    5ee4:	lsl	w4, w3, w4
    5ee8:	sub	w2, w4, #0x1
    5eec:	bic	x2, x0, x2
    5ef0:	sxtw	x4, w4
    5ef4:	cmp	x2, x1
    5ef8:	lsl	w3, w3, w5
    5efc:	b.cs	5f10 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x750>  // b.hs, b.nlast
    5f00:	dc	cvau, x2
    5f04:	add	x2, x2, x4
    5f08:	cmp	x1, x2
    5f0c:	b.hi	5f00 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x740>  // b.pmore
    5f10:	dsb	ish
    5f14:	sub	w2, w3, #0x1
    5f18:	sxtw	x3, w3
    5f1c:	bic	x0, x0, x2
    5f20:	cmp	x1, x0
    5f24:	b.ls	5f38 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x778>  // b.plast
    5f28:	ic	ivau, x0
    5f2c:	add	x0, x0, x3
    5f30:	cmp	x1, x0
    5f34:	b.hi	5f28 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x768>  // b.pmore
    5f38:	dsb	ish
    5f3c:	isb
    5f40:	ret

Disassembly of section .fini:

0000000000005f44 <.fini>:
    5f44:	stp	x29, x30, [sp, #-16]!
    5f48:	mov	x29, sp
    5f4c:	ldp	x29, x30, [sp], #16
    5f50:	ret
