
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//cldr-plurals_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

00000000004012b0 <_init>:
  4012b0:	stp	x29, x30, [sp, #-16]!
  4012b4:	mov	x29, sp
  4012b8:	bl	401e98 <call_weak_fn>
  4012bc:	ldp	x29, x30, [sp], #16
  4012c0:	ret

Disassembly of section .plt:

00000000004012d0 <.plt>:
  4012d0:	stp	x16, x30, [sp, #-16]!
  4012d4:	adrp	x16, 414000 <__FRAME_END__+0xf564>
  4012d8:	ldr	x17, [x16, #4088]
  4012dc:	add	x16, x16, #0xff8
  4012e0:	br	x17
  4012e4:	nop
  4012e8:	nop
  4012ec:	nop

00000000004012f0 <memcpy@plt>:
  4012f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4012f4:	ldr	x17, [x16]
  4012f8:	add	x16, x16, #0x0
  4012fc:	br	x17

0000000000401300 <strlen@plt>:
  401300:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401304:	ldr	x17, [x16, #8]
  401308:	add	x16, x16, #0x8
  40130c:	br	x17

0000000000401310 <fputs@plt>:
  401310:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401314:	ldr	x17, [x16, #16]
  401318:	add	x16, x16, #0x10
  40131c:	br	x17

0000000000401320 <exit@plt>:
  401320:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401324:	ldr	x17, [x16, #24]
  401328:	add	x16, x16, #0x18
  40132c:	br	x17

0000000000401330 <error@plt>:
  401330:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401334:	ldr	x17, [x16, #32]
  401338:	add	x16, x16, #0x20
  40133c:	br	x17

0000000000401340 <set_program_name@plt>:
  401340:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401344:	ldr	x17, [x16, #40]
  401348:	add	x16, x16, #0x28
  40134c:	br	x17

0000000000401350 <xmlHasProp@plt>:
  401350:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401354:	ldr	x17, [x16, #48]
  401358:	add	x16, x16, #0x30
  40135c:	br	x17

0000000000401360 <sprintf@plt>:
  401360:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401364:	ldr	x17, [x16, #56]
  401368:	add	x16, x16, #0x38
  40136c:	br	x17

0000000000401370 <xmlFreeDoc@plt>:
  401370:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401374:	ldr	x17, [x16, #64]
  401378:	add	x16, x16, #0x40
  40137c:	br	x17

0000000000401380 <__cxa_atexit@plt>:
  401380:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401384:	ldr	x17, [x16, #72]
  401388:	add	x16, x16, #0x48
  40138c:	br	x17

0000000000401390 <fputc@plt>:
  401390:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401394:	ldr	x17, [x16, #80]
  401398:	add	x16, x16, #0x50
  40139c:	br	x17

00000000004013a0 <fileno@plt>:
  4013a0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013a4:	ldr	x17, [x16, #88]
  4013a8:	add	x16, x16, #0x58
  4013ac:	br	x17

00000000004013b0 <fclose@plt>:
  4013b0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013b4:	ldr	x17, [x16, #96]
  4013b8:	add	x16, x16, #0x60
  4013bc:	br	x17

00000000004013c0 <fopen@plt>:
  4013c0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013c4:	ldr	x17, [x16, #104]
  4013c8:	add	x16, x16, #0x68
  4013cc:	br	x17

00000000004013d0 <malloc@plt>:
  4013d0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013d4:	ldr	x17, [x16, #112]
  4013d8:	add	x16, x16, #0x70
  4013dc:	br	x17

00000000004013e0 <xrealloc@plt>:
  4013e0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013e4:	ldr	x17, [x16, #120]
  4013e8:	add	x16, x16, #0x78
  4013ec:	br	x17

00000000004013f0 <xmlGetProp@plt>:
  4013f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013f4:	ldr	x17, [x16, #128]
  4013f8:	add	x16, x16, #0x80
  4013fc:	br	x17

0000000000401400 <xmlCheckVersion@plt>:
  401400:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401404:	ldr	x17, [x16, #136]
  401408:	add	x16, x16, #0x88
  40140c:	br	x17

0000000000401410 <strncmp@plt>:
  401410:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401414:	ldr	x17, [x16, #144]
  401418:	add	x16, x16, #0x90
  40141c:	br	x17

0000000000401420 <bindtextdomain@plt>:
  401420:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401424:	ldr	x17, [x16, #152]
  401428:	add	x16, x16, #0x98
  40142c:	br	x17

0000000000401430 <__libc_start_main@plt>:
  401430:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401434:	ldr	x17, [x16, #160]
  401438:	add	x16, x16, #0xa0
  40143c:	br	x17

0000000000401440 <memset@plt>:
  401440:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401444:	ldr	x17, [x16, #168]
  401448:	add	x16, x16, #0xa8
  40144c:	br	x17

0000000000401450 <xmalloc@plt>:
  401450:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401454:	ldr	x17, [x16, #176]
  401458:	add	x16, x16, #0xb0
  40145c:	br	x17

0000000000401460 <xstrdup@plt>:
  401460:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401464:	ldr	x17, [x16, #184]
  401468:	add	x16, x16, #0xb8
  40146c:	br	x17

0000000000401470 <xmlStrlen@plt>:
  401470:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401474:	ldr	x17, [x16, #192]
  401478:	add	x16, x16, #0xc0
  40147c:	br	x17

0000000000401480 <close_stdout@plt>:
  401480:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401484:	ldr	x17, [x16, #200]
  401488:	add	x16, x16, #0xc8
  40148c:	br	x17

0000000000401490 <xmlNodeGetContent@plt>:
  401490:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401494:	ldr	x17, [x16, #208]
  401498:	add	x16, x16, #0xd0
  40149c:	br	x17

00000000004014a0 <xmlReadFd@plt>:
  4014a0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014a4:	ldr	x17, [x16, #216]
  4014a8:	add	x16, x16, #0xd8
  4014ac:	br	x17

00000000004014b0 <strrchr@plt>:
  4014b0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014b4:	ldr	x17, [x16, #224]
  4014b8:	add	x16, x16, #0xe0
  4014bc:	br	x17

00000000004014c0 <__gmon_start__@plt>:
  4014c0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014c4:	ldr	x17, [x16, #232]
  4014c8:	add	x16, x16, #0xe8
  4014cc:	br	x17

00000000004014d0 <abort@plt>:
  4014d0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014d4:	ldr	x17, [x16, #240]
  4014d8:	add	x16, x16, #0xf0
  4014dc:	br	x17

00000000004014e0 <u8_mbtouc_aux@plt>:
  4014e0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014e4:	ldr	x17, [x16, #248]
  4014e8:	add	x16, x16, #0xf8
  4014ec:	br	x17

00000000004014f0 <puts@plt>:
  4014f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014f4:	ldr	x17, [x16, #256]
  4014f8:	add	x16, x16, #0x100
  4014fc:	br	x17

0000000000401500 <textdomain@plt>:
  401500:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401504:	ldr	x17, [x16, #264]
  401508:	add	x16, x16, #0x108
  40150c:	br	x17

0000000000401510 <getopt_long@plt>:
  401510:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401514:	ldr	x17, [x16, #272]
  401518:	add	x16, x16, #0x110
  40151c:	br	x17

0000000000401520 <strcmp@plt>:
  401520:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401524:	ldr	x17, [x16, #280]
  401528:	add	x16, x16, #0x118
  40152c:	br	x17

0000000000401530 <basename@plt>:
  401530:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401534:	ldr	x17, [x16, #288]
  401538:	add	x16, x16, #0x120
  40153c:	br	x17

0000000000401540 <getline@plt>:
  401540:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401544:	ldr	x17, [x16, #296]
  401548:	add	x16, x16, #0x128
  40154c:	br	x17

0000000000401550 <proper_name@plt>:
  401550:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401554:	ldr	x17, [x16, #304]
  401558:	add	x16, x16, #0x130
  40155c:	br	x17

0000000000401560 <free@plt>:
  401560:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401564:	ldr	x17, [x16, #312]
  401568:	add	x16, x16, #0x138
  40156c:	br	x17

0000000000401570 <xmlGetLineNo@plt>:
  401570:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401574:	ldr	x17, [x16, #320]
  401578:	add	x16, x16, #0x140
  40157c:	br	x17

0000000000401580 <c_isspace@plt>:
  401580:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401584:	ldr	x17, [x16, #328]
  401588:	add	x16, x16, #0x148
  40158c:	br	x17

0000000000401590 <dcgettext@plt>:
  401590:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401594:	ldr	x17, [x16, #336]
  401598:	add	x16, x16, #0x150
  40159c:	br	x17

00000000004015a0 <xmlStrncmp@plt>:
  4015a0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015a4:	ldr	x17, [x16, #344]
  4015a8:	add	x16, x16, #0x158
  4015ac:	br	x17

00000000004015b0 <printf@plt>:
  4015b0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015b4:	ldr	x17, [x16, #352]
  4015b8:	add	x16, x16, #0x160
  4015bc:	br	x17

00000000004015c0 <xmlStrEqual@plt>:
  4015c0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015c4:	ldr	x17, [x16, #360]
  4015c8:	add	x16, x16, #0x168
  4015cc:	br	x17

00000000004015d0 <xmlDocGetRootElement@plt>:
  4015d0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015d4:	ldr	x17, [x16, #368]
  4015d8:	add	x16, x16, #0x170
  4015dc:	br	x17

00000000004015e0 <putchar@plt>:
  4015e0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015e4:	ldr	x17, [x16, #376]
  4015e8:	add	x16, x16, #0x178
  4015ec:	br	x17

00000000004015f0 <error_at_line@plt>:
  4015f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015f4:	ldr	x17, [x16, #384]
  4015f8:	add	x16, x16, #0x180
  4015fc:	br	x17

0000000000401600 <fprintf@plt>:
  401600:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401604:	ldr	x17, [x16, #392]
  401608:	add	x16, x16, #0x188
  40160c:	br	x17

0000000000401610 <setlocale@plt>:
  401610:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401614:	ldr	x17, [x16, #400]
  401618:	add	x16, x16, #0x190
  40161c:	br	x17

Disassembly of section .text:

0000000000401620 <main>:
  401620:	stp	x29, x30, [sp, #-176]!
  401624:	mov	x29, sp
  401628:	stp	x19, x20, [sp, #16]
  40162c:	mov	w20, w0
  401630:	mov	x19, x1
  401634:	ldr	x0, [x1]
  401638:	stp	x21, x22, [sp, #32]
  40163c:	adrp	x22, 403000 <print_condition+0x1f0>
  401640:	stp	x23, x24, [sp, #48]
  401644:	add	x22, x22, #0xf4e
  401648:	adrp	x21, 403000 <print_condition+0x1f0>
  40164c:	stp	x25, x26, [sp, #64]
  401650:	add	x21, x21, #0xf60
  401654:	adrp	x23, 404000 <yystos+0x209>
  401658:	stp	x27, x28, [sp, #80]
  40165c:	bl	401340 <set_program_name@plt>
  401660:	adrp	x1, 404000 <yystos+0x209>
  401664:	mov	w0, #0x6                   	// #6
  401668:	add	x1, x1, #0xf9
  40166c:	bl	401610 <setlocale@plt>
  401670:	add	x23, x23, #0x4f8
  401674:	mov	x1, x22
  401678:	mov	x0, x21
  40167c:	bl	401420 <bindtextdomain@plt>
  401680:	mov	w25, #0x0                   	// #0
  401684:	mov	x1, x22
  401688:	adrp	x0, 403000 <print_condition+0x1f0>
  40168c:	add	x0, x0, #0xe58
  401690:	bl	401420 <bindtextdomain@plt>
  401694:	mov	x0, x21
  401698:	adrp	x22, 403000 <print_condition+0x1f0>
  40169c:	bl	401500 <textdomain@plt>
  4016a0:	add	x22, x22, #0xf95
  4016a4:	adrp	x0, 401000 <_init-0x2b0>
  4016a8:	mov	w24, #0x0                   	// #0
  4016ac:	add	x0, x0, #0x480
  4016b0:	bl	403b10 <atexit>
  4016b4:	str	wzr, [sp, #152]
  4016b8:	mov	x3, x23
  4016bc:	mov	x2, x22
  4016c0:	mov	x1, x19
  4016c4:	mov	w0, w20
  4016c8:	mov	x4, #0x0                   	// #0
  4016cc:	bl	401510 <getopt_long@plt>
  4016d0:	cmn	w0, #0x1
  4016d4:	b.ne	401764 <main+0x144>  // b.any
  4016d8:	cbz	w25, 4017d8 <main+0x1b8>
  4016dc:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  4016e0:	ldr	x0, [x0, #456]
  4016e4:	bl	401530 <basename@plt>
  4016e8:	mov	x1, x0
  4016ec:	adrp	x3, 403000 <print_condition+0x1f0>
  4016f0:	add	x3, x3, #0xf99
  4016f4:	mov	x2, x21
  4016f8:	adrp	x0, 403000 <print_condition+0x1f0>
  4016fc:	add	x0, x0, #0xfa0
  401700:	bl	4015b0 <printf@plt>
  401704:	mov	w2, #0x5                   	// #5
  401708:	adrp	x1, 403000 <print_condition+0x1f0>
  40170c:	mov	x0, #0x0                   	// #0
  401710:	add	x1, x1, #0xfb0
  401714:	bl	401590 <dcgettext@plt>
  401718:	adrp	x2, 404000 <yystos+0x209>
  40171c:	adrp	x1, 404000 <yystos+0x209>
  401720:	add	x2, x2, #0x8a
  401724:	add	x1, x1, #0xac
  401728:	bl	4015b0 <printf@plt>
  40172c:	adrp	x1, 404000 <yystos+0x209>
  401730:	add	x1, x1, #0xb6
  401734:	mov	w2, #0x5                   	// #5
  401738:	mov	x0, #0x0                   	// #0
  40173c:	bl	401590 <dcgettext@plt>
  401740:	mov	x19, x0
  401744:	adrp	x0, 404000 <yystos+0x209>
  401748:	add	x0, x0, #0xc6
  40174c:	bl	401550 <proper_name@plt>
  401750:	mov	x1, x0
  401754:	mov	x0, x19
  401758:	bl	4015b0 <printf@plt>
  40175c:	mov	w0, #0x0                   	// #0
  401760:	b	4017b0 <main+0x190>
  401764:	cmp	w0, #0x63
  401768:	b.eq	4017c4 <main+0x1a4>  // b.none
  40176c:	b.gt	4017b4 <main+0x194>
  401770:	cbz	w0, 4016b8 <main+0x98>
  401774:	cmp	w0, #0x56
  401778:	b.eq	4017d0 <main+0x1b0>  // b.none
  40177c:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401780:	mov	w2, #0x5                   	// #5
  401784:	adrp	x1, 403000 <print_condition+0x1f0>
  401788:	add	x1, x1, #0xf6e
  40178c:	ldr	x19, [x0, #424]
  401790:	mov	x0, #0x0                   	// #0
  401794:	bl	401590 <dcgettext@plt>
  401798:	adrp	x1, 415000 <memcpy@GLIBC_2.17>
  40179c:	ldr	x2, [x1, #456]
  4017a0:	mov	x1, x0
  4017a4:	mov	x0, x19
  4017a8:	bl	401600 <fprintf@plt>
  4017ac:	mov	w0, #0x1                   	// #1
  4017b0:	bl	401320 <exit@plt>
  4017b4:	cmp	w0, #0x68
  4017b8:	b.ne	40177c <main+0x15c>  // b.any
  4017bc:	mov	w24, #0x1                   	// #1
  4017c0:	b	4016b8 <main+0x98>
  4017c4:	mov	w0, #0x1                   	// #1
  4017c8:	str	w0, [sp, #152]
  4017cc:	b	4016b8 <main+0x98>
  4017d0:	mov	w25, #0x1                   	// #1
  4017d4:	b	4016b8 <main+0x98>
  4017d8:	cbz	w24, 4018c0 <main+0x2a0>
  4017dc:	mov	w2, #0x5                   	// #5
  4017e0:	adrp	x1, 404000 <yystos+0x209>
  4017e4:	mov	x0, #0x0                   	// #0
  4017e8:	add	x1, x1, #0xd1
  4017ec:	bl	401590 <dcgettext@plt>
  4017f0:	adrp	x1, 415000 <memcpy@GLIBC_2.17>
  4017f4:	ldr	x1, [x1, #456]
  4017f8:	bl	4015b0 <printf@plt>
  4017fc:	mov	w0, #0xa                   	// #10
  401800:	bl	4015e0 <putchar@plt>
  401804:	adrp	x1, 404000 <yystos+0x209>
  401808:	add	x1, x1, #0xfa
  40180c:	mov	w2, #0x5                   	// #5
  401810:	mov	x0, #0x0                   	// #0
  401814:	bl	401590 <dcgettext@plt>
  401818:	bl	4015b0 <printf@plt>
  40181c:	mov	w0, #0xa                   	// #10
  401820:	bl	4015e0 <putchar@plt>
  401824:	adrp	x1, 404000 <yystos+0x209>
  401828:	add	x1, x1, #0x203
  40182c:	mov	w2, #0x5                   	// #5
  401830:	mov	x0, #0x0                   	// #0
  401834:	bl	401590 <dcgettext@plt>
  401838:	bl	4015b0 <printf@plt>
  40183c:	mov	w0, #0xa                   	// #10
  401840:	bl	4015e0 <putchar@plt>
  401844:	adrp	x1, 404000 <yystos+0x209>
  401848:	add	x1, x1, #0x26f
  40184c:	mov	w2, #0x5                   	// #5
  401850:	mov	x0, #0x0                   	// #0
  401854:	bl	401590 <dcgettext@plt>
  401858:	bl	4015b0 <printf@plt>
  40185c:	adrp	x1, 404000 <yystos+0x209>
  401860:	add	x1, x1, #0x2b4
  401864:	mov	w2, #0x5                   	// #5
  401868:	mov	x0, #0x0                   	// #0
  40186c:	bl	401590 <dcgettext@plt>
  401870:	bl	4015b0 <printf@plt>
  401874:	adrp	x1, 404000 <yystos+0x209>
  401878:	add	x1, x1, #0x2ee
  40187c:	mov	w2, #0x5                   	// #5
  401880:	mov	x0, #0x0                   	// #0
  401884:	bl	401590 <dcgettext@plt>
  401888:	bl	4015b0 <printf@plt>
  40188c:	mov	w0, #0xa                   	// #10
  401890:	bl	4015e0 <putchar@plt>
  401894:	mov	w2, #0x5                   	// #5
  401898:	adrp	x1, 404000 <yystos+0x209>
  40189c:	mov	x0, #0x0                   	// #0
  4018a0:	add	x1, x1, #0x331
  4018a4:	bl	401590 <dcgettext@plt>
  4018a8:	adrp	x2, 404000 <yystos+0x209>
  4018ac:	adrp	x1, 404000 <yystos+0x209>
  4018b0:	add	x2, x2, #0x36e
  4018b4:	add	x1, x1, #0x382
  4018b8:	bl	4015b0 <printf@plt>
  4018bc:	b	40175c <main+0x13c>
  4018c0:	adrp	x21, 415000 <memcpy@GLIBC_2.17>
  4018c4:	ldr	w2, [x21, #432]
  4018c8:	add	w0, w2, #0x2
  4018cc:	cmp	w0, w20
  4018d0:	b.ne	401da0 <main+0x780>  // b.any
  4018d4:	sbfiz	x2, x2, #3, #32
  4018d8:	mov	w0, #0x51ad                	// #20909
  4018dc:	ldr	x28, [x19, x2]
  4018e0:	add	x2, x19, x2
  4018e4:	ldr	x22, [x2, #8]
  4018e8:	bl	401400 <xmlCheckVersion@plt>
  4018ec:	adrp	x1, 404000 <yystos+0x209>
  4018f0:	add	x1, x1, #0x4e8
  4018f4:	mov	x0, x22
  4018f8:	bl	4013c0 <fopen@plt>
  4018fc:	str	x0, [sp, #104]
  401900:	cbnz	x0, 401928 <main+0x308>
  401904:	mov	w2, #0x5                   	// #5
  401908:	adrp	x1, 404000 <yystos+0x209>
  40190c:	add	x1, x1, #0x3ac
  401910:	bl	401590 <dcgettext@plt>
  401914:	mov	x3, x22
  401918:	mov	x2, x0
  40191c:	mov	w1, #0x0                   	// #0
  401920:	mov	w0, #0x1                   	// #1
  401924:	bl	401330 <error@plt>
  401928:	ldr	x0, [sp, #104]
  40192c:	bl	4013a0 <fileno@plt>
  401930:	mov	x1, x22
  401934:	mov	w3, #0x940                 	// #2368
  401938:	mov	x2, #0x0                   	// #0
  40193c:	bl	4014a0 <xmlReadFd@plt>
  401940:	mov	x24, x0
  401944:	cbnz	x0, 40196c <main+0x34c>
  401948:	mov	w2, #0x5                   	// #5
  40194c:	adrp	x1, 404000 <yystos+0x209>
  401950:	add	x1, x1, #0x3be
  401954:	bl	401590 <dcgettext@plt>
  401958:	mov	x3, x22
  40195c:	mov	x2, x0
  401960:	mov	w1, #0x0                   	// #0
  401964:	mov	w0, #0x1                   	// #1
  401968:	bl	401330 <error@plt>
  40196c:	mov	x0, x24
  401970:	adrp	x20, 404000 <yystos+0x209>
  401974:	bl	4015d0 <xmlDocGetRootElement@plt>
  401978:	add	x20, x20, #0x3fb
  40197c:	mov	x19, x0
  401980:	cbnz	x0, 401a38 <main+0x418>
  401984:	mov	x0, x19
  401988:	bl	401570 <xmlGetLineNo@plt>
  40198c:	mov	w2, #0x5                   	// #5
  401990:	mov	x19, x0
  401994:	adrp	x1, 404000 <yystos+0x209>
  401998:	mov	x0, #0x0                   	// #0
  40199c:	add	x1, x1, #0x3dd
  4019a0:	bl	401590 <dcgettext@plt>
  4019a4:	mov	w3, w19
  4019a8:	mov	x19, #0x0                   	// #0
  4019ac:	mov	x4, x0
  4019b0:	mov	x5, x20
  4019b4:	mov	x2, x22
  4019b8:	mov	w1, #0x0                   	// #0
  4019bc:	mov	w0, #0x0                   	// #0
  4019c0:	bl	4015f0 <error_at_line@plt>
  4019c4:	mov	x0, x24
  4019c8:	bl	401370 <xmlFreeDoc@plt>
  4019cc:	ldr	x0, [sp, #104]
  4019d0:	bl	4013b0 <fclose@plt>
  4019d4:	cbnz	x19, 401a00 <main+0x3e0>
  4019d8:	mov	w2, #0x5                   	// #5
  4019dc:	adrp	x1, 404000 <yystos+0x209>
  4019e0:	mov	x0, #0x0                   	// #0
  4019e4:	add	x1, x1, #0x470
  4019e8:	bl	401590 <dcgettext@plt>
  4019ec:	mov	x2, x0
  4019f0:	mov	x3, x28
  4019f4:	mov	w1, #0x0                   	// #0
  4019f8:	mov	w0, #0x1                   	// #1
  4019fc:	bl	401330 <error@plt>
  401a00:	ldr	w0, [sp, #152]
  401a04:	cbz	w0, 401d54 <main+0x734>
  401a08:	mov	x0, x19
  401a0c:	bl	4014f0 <puts@plt>
  401a10:	mov	x0, x19
  401a14:	bl	401560 <free@plt>
  401a18:	mov	w0, #0x0                   	// #0
  401a1c:	ldp	x19, x20, [sp, #16]
  401a20:	ldp	x21, x22, [sp, #32]
  401a24:	ldp	x23, x24, [sp, #48]
  401a28:	ldp	x25, x26, [sp, #64]
  401a2c:	ldp	x27, x28, [sp, #80]
  401a30:	ldp	x29, x30, [sp], #176
  401a34:	ret
  401a38:	ldr	x0, [x0, #16]
  401a3c:	mov	x1, x20
  401a40:	bl	4015c0 <xmlStrEqual@plt>
  401a44:	cbz	w0, 401984 <main+0x364>
  401a48:	ldr	x19, [x19, #24]
  401a4c:	adrp	x21, 404000 <yystos+0x209>
  401a50:	add	x21, x21, #0x40c
  401a54:	cbnz	x19, 401a8c <main+0x46c>
  401a58:	mov	w2, #0x5                   	// #5
  401a5c:	adrp	x1, 404000 <yystos+0x209>
  401a60:	mov	x0, #0x0                   	// #0
  401a64:	add	x1, x1, #0x4b4
  401a68:	bl	401590 <dcgettext@plt>
  401a6c:	mov	x2, x0
  401a70:	mov	x3, x20
  401a74:	adrp	x4, 404000 <yystos+0x209>
  401a78:	mov	w1, #0x0                   	// #0
  401a7c:	add	x4, x4, #0x40c
  401a80:	mov	w0, #0x0                   	// #0
  401a84:	bl	401330 <error@plt>
  401a88:	b	4019c4 <main+0x3a4>
  401a8c:	ldr	w0, [x19, #8]
  401a90:	cmp	w0, #0x1
  401a94:	b.eq	401aa0 <main+0x480>  // b.none
  401a98:	ldr	x19, [x19, #48]
  401a9c:	b	401a54 <main+0x434>
  401aa0:	ldr	x0, [x19, #16]
  401aa4:	mov	x1, x21
  401aa8:	bl	4015c0 <xmlStrEqual@plt>
  401aac:	cbz	w0, 401a98 <main+0x478>
  401ab0:	mov	x0, x28
  401ab4:	bl	401300 <strlen@plt>
  401ab8:	stp	xzr, x0, [sp, #112]
  401abc:	adrp	x0, 404000 <yystos+0x209>
  401ac0:	add	x0, x0, #0x414
  401ac4:	mov	x21, #0x0                   	// #0
  401ac8:	str	x0, [sp, #136]
  401acc:	adrp	x0, 404000 <yystos+0x209>
  401ad0:	add	x0, x0, #0x456
  401ad4:	str	x0, [sp, #144]
  401ad8:	ldr	x20, [x19, #24]
  401adc:	mov	x19, #0x0                   	// #0
  401ae0:	b	401b5c <main+0x53c>
  401ae4:	ldr	w0, [x20, #8]
  401ae8:	cmp	w0, #0x1
  401aec:	b.ne	401b58 <main+0x538>  // b.any
  401af0:	ldr	x0, [x20, #16]
  401af4:	ldr	x1, [sp, #136]
  401af8:	bl	4015c0 <xmlStrEqual@plt>
  401afc:	cbz	w0, 401b58 <main+0x538>
  401b00:	adrp	x25, 404000 <yystos+0x209>
  401b04:	add	x25, x25, #0x420
  401b08:	mov	x1, x25
  401b0c:	mov	x0, x20
  401b10:	bl	401350 <xmlHasProp@plt>
  401b14:	cbnz	x0, 401b7c <main+0x55c>
  401b18:	mov	x0, x20
  401b1c:	bl	401570 <xmlGetLineNo@plt>
  401b20:	mov	w2, #0x5                   	// #5
  401b24:	mov	x26, x0
  401b28:	adrp	x1, 404000 <yystos+0x209>
  401b2c:	mov	x0, #0x0                   	// #0
  401b30:	add	x1, x1, #0x428
  401b34:	bl	401590 <dcgettext@plt>
  401b38:	ldr	x5, [sp, #136]
  401b3c:	mov	x6, x25
  401b40:	mov	x4, x0
  401b44:	mov	w3, w26
  401b48:	mov	x2, x22
  401b4c:	mov	w1, #0x0                   	// #0
  401b50:	mov	w0, #0x0                   	// #0
  401b54:	bl	4015f0 <error_at_line@plt>
  401b58:	ldr	x20, [x20, #48]
  401b5c:	cbnz	x20, 401ae4 <main+0x4c4>
  401b60:	cbz	x19, 4019c4 <main+0x3a4>
  401b64:	mov	x0, x19
  401b68:	mov	w1, #0x3b                  	// #59
  401b6c:	bl	4014b0 <strrchr@plt>
  401b70:	cbz	x0, 4019c4 <main+0x3a4>
  401b74:	strb	wzr, [x0]
  401b78:	b	4019c4 <main+0x3a4>
  401b7c:	mov	x1, x25
  401b80:	mov	x0, x20
  401b84:	bl	4013f0 <xmlGetProp@plt>
  401b88:	mov	x25, x0
  401b8c:	mov	x26, x0
  401b90:	ldrb	w0, [x26]
  401b94:	cbnz	w0, 401ba4 <main+0x584>
  401b98:	mov	w27, #0x0                   	// #0
  401b9c:	b	401be0 <main+0x5c0>
  401ba0:	add	x26, x26, #0x1
  401ba4:	ldrb	w0, [x26]
  401ba8:	bl	401580 <c_isspace@plt>
  401bac:	tst	w0, #0xff
  401bb0:	b.ne	401ba0 <main+0x580>  // b.any
  401bb4:	ldr	w2, [sp, #120]
  401bb8:	mov	x1, x28
  401bbc:	mov	x0, x26
  401bc0:	bl	4015a0 <xmlStrncmp@plt>
  401bc4:	cbnz	w0, 401c6c <main+0x64c>
  401bc8:	ldr	x0, [sp, #120]
  401bcc:	ldrb	w0, [x26, x0]
  401bd0:	cbz	w0, 401c84 <main+0x664>
  401bd4:	bl	401580 <c_isspace@plt>
  401bd8:	ands	w27, w0, #0xff
  401bdc:	b.eq	401c6c <main+0x64c>  // b.none
  401be0:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401be4:	ldr	x1, [x0, #464]
  401be8:	mov	x0, x25
  401bec:	blr	x1
  401bf0:	cbz	w27, 401b58 <main+0x538>
  401bf4:	ldr	x23, [x20, #24]
  401bf8:	adrp	x25, 404000 <yystos+0x209>
  401bfc:	add	x25, x25, #0x461
  401c00:	ldr	x0, [sp, #112]
  401c04:	add	x0, x0, #0x4
  401c08:	str	x0, [sp, #128]
  401c0c:	cbz	x23, 401b58 <main+0x538>
  401c10:	ldr	w0, [x23, #8]
  401c14:	cmp	w0, #0x1
  401c18:	b.ne	401d4c <main+0x72c>  // b.any
  401c1c:	ldr	x0, [x23, #16]
  401c20:	ldr	x1, [sp, #144]
  401c24:	bl	4015c0 <xmlStrEqual@plt>
  401c28:	cbz	w0, 401d4c <main+0x72c>
  401c2c:	mov	x1, x25
  401c30:	mov	x0, x23
  401c34:	bl	401350 <xmlHasProp@plt>
  401c38:	cbnz	x0, 401c8c <main+0x66c>
  401c3c:	mov	x0, x23
  401c40:	bl	401570 <xmlGetLineNo@plt>
  401c44:	mov	w2, #0x5                   	// #5
  401c48:	mov	x26, x0
  401c4c:	adrp	x1, 404000 <yystos+0x209>
  401c50:	mov	x0, #0x0                   	// #0
  401c54:	add	x1, x1, #0x428
  401c58:	bl	401590 <dcgettext@plt>
  401c5c:	mov	x6, x25
  401c60:	ldr	x5, [sp, #144]
  401c64:	b	401b40 <main+0x520>
  401c68:	add	x26, x26, #0x1
  401c6c:	ldrb	w0, [x26]
  401c70:	cbz	w0, 401b90 <main+0x570>
  401c74:	bl	401580 <c_isspace@plt>
  401c78:	tst	w0, #0xff
  401c7c:	b.eq	401c68 <main+0x648>  // b.none
  401c80:	b	401b90 <main+0x570>
  401c84:	mov	w27, #0x1                   	// #1
  401c88:	b	401be0 <main+0x5c0>
  401c8c:	mov	x1, x25
  401c90:	mov	x0, x23
  401c94:	bl	4013f0 <xmlGetProp@plt>
  401c98:	mov	x27, x0
  401c9c:	mov	x0, x23
  401ca0:	bl	401490 <xmlNodeGetContent@plt>
  401ca4:	mov	x26, x0
  401ca8:	mov	x0, x27
  401cac:	bl	401470 <xmlStrlen@plt>
  401cb0:	mov	w1, w0
  401cb4:	mov	x0, x26
  401cb8:	str	w1, [sp, #156]
  401cbc:	bl	401470 <xmlStrlen@plt>
  401cc0:	sxtw	x0, w0
  401cc4:	ldr	w1, [sp, #156]
  401cc8:	add	x1, x0, w1, sxtw
  401ccc:	ldr	x0, [sp, #128]
  401cd0:	add	x0, x1, x0
  401cd4:	str	x0, [sp, #128]
  401cd8:	add	x0, x0, #0x1
  401cdc:	cmp	x0, x21
  401ce0:	b.ls	401d00 <main+0x6e0>  // b.plast
  401ce4:	lsl	x21, x21, #1
  401ce8:	cmp	x0, x21
  401cec:	csel	x21, x0, x21, cs  // cs = hs, nlast
  401cf0:	mov	x0, x19
  401cf4:	mov	x1, x21
  401cf8:	bl	4013e0 <xrealloc@plt>
  401cfc:	mov	x19, x0
  401d00:	adrp	x0, 404000 <yystos+0x209>
  401d04:	add	x1, x0, #0x467
  401d08:	ldr	x0, [sp, #112]
  401d0c:	mov	x3, x26
  401d10:	mov	x2, x27
  401d14:	add	x0, x19, x0
  401d18:	bl	401360 <sprintf@plt>
  401d1c:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401d20:	add	x0, x0, #0x1d0
  401d24:	ldr	x1, [x0]
  401d28:	mov	x0, x27
  401d2c:	blr	x1
  401d30:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401d34:	add	x0, x0, #0x1d0
  401d38:	ldr	x1, [x0]
  401d3c:	mov	x0, x26
  401d40:	blr	x1
  401d44:	ldr	x0, [sp, #128]
  401d48:	str	x0, [sp, #112]
  401d4c:	ldr	x23, [x23, #48]
  401d50:	b	401c00 <main+0x5e0>
  401d54:	mov	x0, x19
  401d58:	bl	4036ec <cldr_plural_parse>
  401d5c:	mov	x20, x0
  401d60:	cbnz	x0, 401d84 <main+0x764>
  401d64:	mov	w2, #0x5                   	// #5
  401d68:	adrp	x1, 404000 <yystos+0x209>
  401d6c:	add	x1, x1, #0x48c
  401d70:	bl	401590 <dcgettext@plt>
  401d74:	mov	w1, #0x0                   	// #0
  401d78:	mov	x2, x0
  401d7c:	mov	w0, #0x1                   	// #1
  401d80:	bl	401330 <error@plt>
  401d84:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401d88:	ldr	x1, [x0, #440]
  401d8c:	mov	x0, x20
  401d90:	bl	403744 <cldr_plural_rule_list_print>
  401d94:	mov	x0, x20
  401d98:	bl	403698 <cldr_plural_rule_list_free>
  401d9c:	b	401a10 <main+0x3f0>
  401da0:	cmp	w2, w20
  401da4:	b.ne	401e18 <main+0x7f8>  // b.any
  401da8:	adrp	x21, 415000 <memcpy@GLIBC_2.17>
  401dac:	adrp	x20, 415000 <memcpy@GLIBC_2.17>
  401db0:	stp	xzr, xzr, [sp, #160]
  401db4:	add	x1, sp, #0xa8
  401db8:	ldr	x2, [x21, #448]
  401dbc:	add	x0, sp, #0xa0
  401dc0:	bl	401540 <getline@plt>
  401dc4:	cmp	w0, #0x0
  401dc8:	b.lt	401e10 <main+0x7f0>  // b.tstop
  401dcc:	b.eq	401dec <main+0x7cc>  // b.none
  401dd0:	ldr	x1, [sp, #160]
  401dd4:	add	x2, x1, w0, sxtw
  401dd8:	ldurb	w2, [x2, #-1]
  401ddc:	cmp	w2, #0xa
  401de0:	b.ne	401dec <main+0x7cc>  // b.any
  401de4:	sub	w0, w0, #0x1
  401de8:	strb	wzr, [x1, w0, sxtw]
  401dec:	ldr	x0, [sp, #160]
  401df0:	bl	4036ec <cldr_plural_parse>
  401df4:	mov	x19, x0
  401df8:	cbz	x0, 401db4 <main+0x794>
  401dfc:	ldr	x1, [x20, #440]
  401e00:	bl	403744 <cldr_plural_rule_list_print>
  401e04:	mov	x0, x19
  401e08:	bl	403698 <cldr_plural_rule_list_free>
  401e0c:	b	401db4 <main+0x794>
  401e10:	ldr	x0, [sp, #160]
  401e14:	b	401a14 <main+0x3f4>
  401e18:	mov	w2, #0x5                   	// #5
  401e1c:	adrp	x1, 404000 <yystos+0x209>
  401e20:	mov	x0, #0x0                   	// #0
  401e24:	add	x1, x1, #0x4a3
  401e28:	bl	401590 <dcgettext@plt>
  401e2c:	mov	x2, x0
  401e30:	ldrsw	x1, [x21, #432]
  401e34:	mov	w0, #0x1                   	// #1
  401e38:	ldr	x3, [x19, x1, lsl #3]
  401e3c:	mov	w1, #0x0                   	// #0
  401e40:	bl	401330 <error@plt>
  401e44:	b	401a18 <main+0x3f8>

0000000000401e48 <_start>:
  401e48:	mov	x29, #0x0                   	// #0
  401e4c:	mov	x30, #0x0                   	// #0
  401e50:	mov	x5, x0
  401e54:	ldr	x1, [sp]
  401e58:	add	x2, sp, #0x8
  401e5c:	mov	x6, sp
  401e60:	movz	x0, #0x0, lsl #48
  401e64:	movk	x0, #0x0, lsl #32
  401e68:	movk	x0, #0x40, lsl #16
  401e6c:	movk	x0, #0x1620
  401e70:	movz	x3, #0x0, lsl #48
  401e74:	movk	x3, #0x0, lsl #32
  401e78:	movk	x3, #0x40, lsl #16
  401e7c:	movk	x3, #0x3a88
  401e80:	movz	x4, #0x0, lsl #48
  401e84:	movk	x4, #0x0, lsl #32
  401e88:	movk	x4, #0x40, lsl #16
  401e8c:	movk	x4, #0x3b08
  401e90:	bl	401430 <__libc_start_main@plt>
  401e94:	bl	4014d0 <abort@plt>

0000000000401e98 <call_weak_fn>:
  401e98:	adrp	x0, 414000 <__FRAME_END__+0xf564>
  401e9c:	ldr	x0, [x0, #4064]
  401ea0:	cbz	x0, 401ea8 <call_weak_fn+0x10>
  401ea4:	b	4014c0 <__gmon_start__@plt>
  401ea8:	ret

0000000000401eac <deregister_tm_clones>:
  401eac:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401eb0:	add	x1, x0, #0x1a8
  401eb4:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401eb8:	add	x0, x0, #0x1a8
  401ebc:	cmp	x1, x0
  401ec0:	b.eq	401eec <deregister_tm_clones+0x40>  // b.none
  401ec4:	sub	sp, sp, #0x10
  401ec8:	adrp	x1, 403000 <print_condition+0x1f0>
  401ecc:	ldr	x1, [x1, #2872]
  401ed0:	str	x1, [sp, #8]
  401ed4:	cbz	x1, 401ee4 <deregister_tm_clones+0x38>
  401ed8:	mov	x16, x1
  401edc:	add	sp, sp, #0x10
  401ee0:	br	x16
  401ee4:	add	sp, sp, #0x10
  401ee8:	ret
  401eec:	ret

0000000000401ef0 <register_tm_clones>:
  401ef0:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401ef4:	add	x1, x0, #0x1a8
  401ef8:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  401efc:	add	x0, x0, #0x1a8
  401f00:	sub	x1, x1, x0
  401f04:	mov	x2, #0x2                   	// #2
  401f08:	asr	x1, x1, #3
  401f0c:	sdiv	x1, x1, x2
  401f10:	cbz	x1, 401f3c <register_tm_clones+0x4c>
  401f14:	sub	sp, sp, #0x10
  401f18:	adrp	x2, 403000 <print_condition+0x1f0>
  401f1c:	ldr	x2, [x2, #2880]
  401f20:	str	x2, [sp, #8]
  401f24:	cbz	x2, 401f34 <register_tm_clones+0x44>
  401f28:	mov	x16, x2
  401f2c:	add	sp, sp, #0x10
  401f30:	br	x16
  401f34:	add	sp, sp, #0x10
  401f38:	ret
  401f3c:	ret

0000000000401f40 <__do_global_dtors_aux>:
  401f40:	stp	x29, x30, [sp, #-32]!
  401f44:	mov	x29, sp
  401f48:	str	x19, [sp, #16]
  401f4c:	adrp	x19, 415000 <memcpy@GLIBC_2.17>
  401f50:	ldrb	w0, [x19, #472]
  401f54:	cbnz	w0, 401f64 <__do_global_dtors_aux+0x24>
  401f58:	bl	401eac <deregister_tm_clones>
  401f5c:	mov	w0, #0x1                   	// #1
  401f60:	strb	w0, [x19, #472]
  401f64:	ldr	x19, [sp, #16]
  401f68:	ldp	x29, x30, [sp], #32
  401f6c:	ret

0000000000401f70 <frame_dummy>:
  401f70:	b	401ef0 <register_tm_clones>

0000000000401f74 <add_range>:
  401f74:	stp	x29, x30, [sp, #-32]!
  401f78:	mov	x29, sp
  401f7c:	stp	x19, x20, [sp, #16]
  401f80:	mov	x19, x0
  401f84:	mov	x20, x1
  401f88:	ldr	x1, [x0, #16]
  401f8c:	ldr	x0, [x0, #8]
  401f90:	cmp	x0, x1
  401f94:	b.ne	401fb4 <add_range+0x40>  // b.any
  401f98:	lsl	x0, x0, #1
  401f9c:	add	x0, x0, #0x1
  401fa0:	str	x0, [x19, #16]
  401fa4:	lsl	x1, x0, #3
  401fa8:	ldr	x0, [x19]
  401fac:	bl	4013e0 <xrealloc@plt>
  401fb0:	str	x0, [x19]
  401fb4:	ldp	x1, x0, [x19]
  401fb8:	add	x2, x0, #0x1
  401fbc:	str	x2, [x19, #8]
  401fc0:	str	x20, [x1, x0, lsl #3]
  401fc4:	mov	x0, x19
  401fc8:	ldp	x19, x20, [sp, #16]
  401fcc:	ldp	x29, x30, [sp], #32
  401fd0:	ret

0000000000401fd4 <yydestruct.isra.0>:
  401fd4:	sub	w0, w0, #0xa
  401fd8:	cmp	w0, #0x14
  401fdc:	b.hi	402020 <yydestruct.isra.0+0x4c>  // b.pmore
  401fe0:	adrp	x2, 403000 <print_condition+0x1f0>
  401fe4:	add	x2, x2, #0xb48
  401fe8:	ldrb	w0, [x2, w0, uxtw]
  401fec:	adr	x2, 401ff8 <yydestruct.isra.0+0x24>
  401ff0:	add	x0, x2, w0, sxtb #2
  401ff4:	br	x0
  401ff8:	ldr	x0, [x1]
  401ffc:	b	401560 <free@plt>
  402000:	ldr	x0, [x1]
  402004:	b	403338 <cldr_plural_condition_free>
  402008:	ldr	x0, [x1]
  40200c:	b	403308 <cldr_plural_relation_free>
  402010:	ldr	x0, [x1]
  402014:	b	4032c8 <cldr_plural_range_list_free>
  402018:	ldr	x0, [x1]
  40201c:	b	40328c <cldr_plural_range_free>
  402020:	ret

0000000000402024 <yyparse>:
  402024:	sub	sp, sp, #0x870
  402028:	stp	x29, x30, [sp]
  40202c:	mov	x29, sp
  402030:	stp	x21, x22, [sp, #32]
  402034:	add	x21, sp, #0xa0
  402038:	adrp	x22, 403000 <print_condition+0x1f0>
  40203c:	add	x22, x22, #0xbae
  402040:	stp	x23, x24, [sp, #48]
  402044:	mov	x24, x21
  402048:	mov	x23, x0
  40204c:	add	x0, x22, #0x249
  402050:	stp	x19, x20, [sp, #16]
  402054:	add	x20, sp, #0x230
  402058:	mov	w19, #0xfffffffe            	// #-2
  40205c:	stp	x25, x26, [sp, #64]
  402060:	mov	x25, #0xc8                  	// #200
  402064:	mov	w26, #0x0                   	// #0
  402068:	stp	x27, x28, [sp, #80]
  40206c:	str	wzr, [sp, #100]
  402070:	str	x20, [sp, #112]
  402074:	str	x0, [sp, #128]
  402078:	lsl	x0, x25, #1
  40207c:	strh	w26, [x21]
  402080:	sub	x1, x0, #0x2
  402084:	add	x1, x24, x1
  402088:	cmp	x21, x1
  40208c:	b.cc	402158 <yyparse+0x134>  // b.lo, b.ul, b.last
  402090:	sub	x1, x21, x24
  402094:	str	x1, [sp, #104]
  402098:	asr	x2, x1, #1
  40209c:	add	x1, x2, #0x1
  4020a0:	str	x1, [sp, #120]
  4020a4:	mov	x1, #0x270f                	// #9999
  4020a8:	cmp	x25, x1
  4020ac:	b.hi	402980 <yyparse+0x95c>  // b.pmore
  4020b0:	mov	x25, #0x2710                	// #10000
  4020b4:	cmp	x0, x25
  4020b8:	csel	x25, x0, x25, ls  // ls = plast
  4020bc:	mov	x0, #0xa                   	// #10
  4020c0:	mul	x0, x25, x0
  4020c4:	add	x0, x0, #0x7
  4020c8:	bl	4013d0 <malloc@plt>
  4020cc:	mov	x27, x0
  4020d0:	cbz	x0, 402980 <yyparse+0x95c>
  4020d4:	ldr	x1, [sp, #104]
  4020d8:	mov	x28, x0
  4020dc:	add	x2, x1, #0x2
  4020e0:	mov	x1, x24
  4020e4:	bl	4012f0 <memcpy@plt>
  4020e8:	lsl	x0, x25, #1
  4020ec:	str	x0, [sp, #136]
  4020f0:	ldr	x0, [sp, #120]
  4020f4:	add	x5, x27, x25, lsl #1
  4020f8:	ldr	x1, [sp, #112]
  4020fc:	lsl	x20, x0, #3
  402100:	mov	x0, x5
  402104:	mov	x2, x20
  402108:	bl	4012f0 <memcpy@plt>
  40210c:	mov	x5, x0
  402110:	add	x0, sp, #0xa0
  402114:	cmp	x24, x0
  402118:	b.eq	40212c <yyparse+0x108>  // b.none
  40211c:	mov	x0, x24
  402120:	str	x5, [sp, #112]
  402124:	bl	401560 <free@plt>
  402128:	ldr	x5, [sp, #112]
  40212c:	sub	x20, x20, #0x8
  402130:	ldr	x0, [sp, #104]
  402134:	add	x20, x5, x20
  402138:	add	x21, x27, x0
  40213c:	lsl	x0, x25, #1
  402140:	sub	x0, x0, #0x2
  402144:	add	x0, x27, x0
  402148:	cmp	x21, x0
  40214c:	b.cs	402a3c <yyparse+0xa18>  // b.hs, b.nlast
  402150:	mov	x24, x27
  402154:	str	x5, [sp, #112]
  402158:	cmp	w26, #0x7
  40215c:	b.eq	402a2c <yyparse+0xa08>  // b.none
  402160:	sxtw	x0, w26
  402164:	str	x0, [sp, #120]
  402168:	ldrsb	w0, [x22, w26, sxtw]
  40216c:	str	w0, [sp, #104]
  402170:	cmn	w0, #0x14
  402174:	b.eq	402570 <yyparse+0x54c>  // b.none
  402178:	cmn	w19, #0x2
  40217c:	b.ne	402338 <yyparse+0x314>  // b.any
  402180:	ldr	x27, [x23]
  402184:	ldrb	w0, [x27]
  402188:	cbnz	w0, 40219c <yyparse+0x178>
  40218c:	str	x27, [x23]
  402190:	mov	w1, #0x0                   	// #0
  402194:	mov	w19, #0x0                   	// #0
  402198:	b	402210 <yyparse+0x1ec>
  40219c:	cmp	w0, #0x20
  4021a0:	ccmp	w0, #0x9, #0x4, ne  // ne = any
  4021a4:	b.ne	4021b0 <yyparse+0x18c>  // b.any
  4021a8:	add	x27, x27, #0x1
  4021ac:	b	402184 <yyparse+0x160>
  4021b0:	tbnz	w0, #7, 4021d8 <yyparse+0x1b4>
  4021b4:	str	w0, [sp, #148]
  4021b8:	adrp	x0, 403000 <print_condition+0x1f0>
  4021bc:	mov	x1, x27
  4021c0:	add	x0, x0, #0xe2b
  4021c4:	mov	x2, #0x3                   	// #3
  4021c8:	bl	401410 <strncmp@plt>
  4021cc:	cbnz	w0, 402274 <yyparse+0x250>
  4021d0:	add	x1, x27, #0x3
  4021d4:	b	402200 <yyparse+0x1dc>
  4021d8:	ldr	x2, [x23, #8]
  4021dc:	mov	x1, x27
  4021e0:	add	x0, sp, #0x94
  4021e4:	sub	x2, x2, x27
  4021e8:	bl	4014e0 <u8_mbtouc_aux@plt>
  4021ec:	ldr	w3, [sp, #148]
  4021f0:	mov	w2, #0x2026                	// #8230
  4021f4:	cmp	w3, w2
  4021f8:	b.ne	4021b8 <yyparse+0x194>  // b.any
  4021fc:	add	x1, x27, w0, sxtw
  402200:	mov	w19, #0x105                 	// #261
  402204:	str	x1, [x23]
  402208:	add	x0, x22, #0x34
  40220c:	ldrb	w1, [x0, w19, sxtw]
  402210:	ldr	w0, [sp, #104]
  402214:	add	w0, w1, w0
  402218:	cmp	w0, #0x37
  40221c:	b.hi	402570 <yyparse+0x54c>  // b.pmore
  402220:	add	x2, x22, #0x141
  402224:	sxtw	x3, w0
  402228:	ldrsb	w0, [x2, w0, sxtw]
  40222c:	cmp	w0, w1
  402230:	b.ne	402570 <yyparse+0x54c>  // b.any
  402234:	add	x0, x22, #0x179
  402238:	ldrb	w0, [x0, x3]
  40223c:	cbz	w0, 402628 <yyparse+0x604>
  402240:	ldr	w1, [sp, #100]
  402244:	add	x20, x20, #0x8
  402248:	ldr	w2, [sp, #100]
  40224c:	mov	w19, #0xfffffffe            	// #-2
  402250:	cmp	w1, #0x0
  402254:	cset	w1, ne  // ne = any
  402258:	sub	w1, w2, w1
  40225c:	str	w1, [sp, #100]
  402260:	ldr	x1, [sp, #152]
  402264:	str	x1, [x20]
  402268:	add	x21, x21, #0x2
  40226c:	mov	w26, w0
  402270:	b	402078 <yyparse+0x54>
  402274:	adrp	x0, 403000 <print_condition+0x1f0>
  402278:	mov	x1, x27
  40227c:	add	x0, x0, #0xe2c
  402280:	mov	x2, #0x2                   	// #2
  402284:	bl	401410 <strncmp@plt>
  402288:	cbnz	w0, 40229c <yyparse+0x278>
  40228c:	add	x1, x27, #0x2
  402290:	mov	w19, #0x104                 	// #260
  402294:	str	x1, [x23]
  402298:	b	402208 <yyparse+0x1e4>
  40229c:	adrp	x0, 403000 <print_condition+0x1f0>
  4022a0:	mov	x1, x27
  4022a4:	add	x0, x0, #0xe2f
  4022a8:	mov	x2, #0x5                   	// #5
  4022ac:	bl	401410 <strncmp@plt>
  4022b0:	cbnz	w0, 4022c4 <yyparse+0x2a0>
  4022b4:	add	x1, x27, #0x5
  4022b8:	mov	w19, #0x106                 	// #262
  4022bc:	str	x1, [x23]
  4022c0:	b	402208 <yyparse+0x1e4>
  4022c4:	adrp	x0, 403000 <print_condition+0x1f0>
  4022c8:	mov	x1, x27
  4022cc:	add	x0, x0, #0xe35
  4022d0:	mov	x2, #0x8                   	// #8
  4022d4:	bl	401410 <strncmp@plt>
  4022d8:	cbnz	w0, 4022ec <yyparse+0x2c8>
  4022dc:	add	x1, x27, #0x8
  4022e0:	mov	w19, #0x107                 	// #263
  4022e4:	str	x1, [x23]
  4022e8:	b	402208 <yyparse+0x1e4>
  4022ec:	adrp	x0, 403000 <print_condition+0x1f0>
  4022f0:	mov	x1, x27
  4022f4:	add	x0, x0, #0xe3e
  4022f8:	mov	x2, #0x8                   	// #8
  4022fc:	bl	401410 <strncmp@plt>
  402300:	cbnz	w0, 402314 <yyparse+0x2f0>
  402304:	add	x1, x27, #0x8
  402308:	mov	w19, #0x108                 	// #264
  40230c:	str	x1, [x23]
  402310:	b	402208 <yyparse+0x1e4>
  402314:	mov	x28, x27
  402318:	ldrb	w19, [x28], #1
  40231c:	cmp	w19, #0x39
  402320:	b.hi	402344 <yyparse+0x320>  // b.pmore
  402324:	cmp	w19, #0x2f
  402328:	b.hi	4023c0 <yyparse+0x39c>  // b.pmore
  40232c:	cmp	w19, #0x21
  402330:	b.eq	402554 <yyparse+0x530>  // b.none
  402334:	str	x28, [x23]
  402338:	cmp	w19, #0x0
  40233c:	b.gt	402208 <yyparse+0x1e4>
  402340:	b	402190 <yyparse+0x16c>
  402344:	sub	w0, w19, #0x61
  402348:	and	w0, w0, #0xff
  40234c:	cmp	w0, #0x19
  402350:	b.hi	402334 <yyparse+0x310>  // b.pmore
  402354:	adrp	x6, 415000 <memcpy@GLIBC_2.17>
  402358:	add	x3, x6, #0x1e0
  40235c:	mov	x5, #0x0                   	// #0
  402360:	ldr	x1, [x3]
  402364:	cmp	x1, x5
  402368:	b.hi	402398 <yyparse+0x374>  // b.pmore
  40236c:	ldr	x0, [x3, #8]
  402370:	add	x1, x1, #0x5
  402374:	str	x5, [sp, #136]
  402378:	lsl	x1, x1, #1
  40237c:	str	x1, [x3]
  402380:	bl	4013e0 <xrealloc@plt>
  402384:	adrp	x1, 415000 <memcpy@GLIBC_2.17>
  402388:	add	x3, x1, #0x1e0
  40238c:	ldr	x5, [sp, #136]
  402390:	mov	x6, x1
  402394:	str	x0, [x3, #8]
  402398:	ldr	x0, [x3, #8]
  40239c:	add	x27, x5, #0x1
  4023a0:	strb	w19, [x0, x5]
  4023a4:	ldrb	w19, [x28]
  4023a8:	sub	w1, w19, #0x61
  4023ac:	cmp	w1, #0x19
  4023b0:	b.hi	40248c <yyparse+0x468>  // b.pmore
  4023b4:	add	x28, x28, #0x1
  4023b8:	mov	x5, x27
  4023bc:	b	402360 <yyparse+0x33c>
  4023c0:	sub	w19, w19, #0x30
  4023c4:	mov	x3, #0xa                   	// #10
  4023c8:	sxtw	x19, w19
  4023cc:	ldrb	w0, [x28]
  4023d0:	sub	w0, w0, #0x30
  4023d4:	and	w1, w0, #0xff
  4023d8:	cmp	w1, #0x9
  4023dc:	b.ls	40244c <yyparse+0x428>  // b.plast
  4023e0:	mov	x0, #0x18                  	// #24
  4023e4:	bl	401450 <xmalloc@plt>
  4023e8:	str	x0, [sp, #152]
  4023ec:	ldrb	w1, [x28]
  4023f0:	cmp	w1, #0x2e
  4023f4:	b.ne	40247c <yyparse+0x458>  // b.any
  4023f8:	ldrb	w1, [x28, #1]
  4023fc:	sub	w1, w1, #0x30
  402400:	and	w1, w1, #0xff
  402404:	cmp	w1, #0x9
  402408:	b.hi	40247c <yyparse+0x458>  // b.pmore
  40240c:	ucvtf	d0, x19
  402410:	mov	w3, #0xa                   	// #10
  402414:	add	x28, x28, #0x1
  402418:	mov	w6, w3
  40241c:	mov	w4, #0x0                   	// #0
  402420:	ldrb	w1, [x28]
  402424:	sub	w1, w1, #0x30
  402428:	and	w5, w1, #0xff
  40242c:	cmp	w5, #0x9
  402430:	b.ls	40245c <yyparse+0x438>  // b.plast
  402434:	mov	w1, #0x1                   	// #1
  402438:	mov	w19, #0x10b                 	// #267
  40243c:	str	w1, [x0]
  402440:	str	d0, [x0, #8]
  402444:	str	w4, [x0, #16]
  402448:	b	402334 <yyparse+0x310>
  40244c:	sxtw	x0, w0
  402450:	add	x28, x28, #0x1
  402454:	madd	x19, x19, x3, x0
  402458:	b	4023cc <yyparse+0x3a8>
  40245c:	scvtf	d2, w3
  402460:	scvtf	d1, w1
  402464:	mul	w3, w3, w6
  402468:	add	w4, w4, #0x1
  40246c:	add	x28, x28, #0x1
  402470:	fdiv	d1, d1, d2
  402474:	fadd	d0, d0, d1
  402478:	b	402420 <yyparse+0x3fc>
  40247c:	str	wzr, [x0]
  402480:	str	w19, [x0, #8]
  402484:	mov	w19, #0x10a                 	// #266
  402488:	b	402334 <yyparse+0x310>
  40248c:	ldr	x1, [x6, #480]
  402490:	cmp	x27, x1
  402494:	b.cc	4024b4 <yyparse+0x490>  // b.lo, b.ul, b.last
  402498:	add	x1, x1, #0x5
  40249c:	lsl	x1, x1, #1
  4024a0:	str	x1, [x6, #480]
  4024a4:	bl	4013e0 <xrealloc@plt>
  4024a8:	adrp	x1, 415000 <memcpy@GLIBC_2.17>
  4024ac:	add	x3, x1, #0x1e0
  4024b0:	str	x0, [x3, #8]
  4024b4:	ldr	x19, [x3, #8]
  4024b8:	cmp	x27, #0x1
  4024bc:	strb	wzr, [x19, x27]
  4024c0:	b.ne	402500 <yyparse+0x4dc>  // b.any
  4024c4:	ldrb	w0, [x19]
  4024c8:	sub	w0, w0, #0x66
  4024cc:	cmp	w0, #0x11
  4024d0:	b.hi	402500 <yyparse+0x4dc>  // b.pmore
  4024d4:	adrp	x1, 403000 <print_condition+0x1f0>
  4024d8:	add	x1, x1, #0xb60
  4024dc:	ldrb	w0, [x1, w0, uxtw]
  4024e0:	adr	x1, 4024ec <yyparse+0x4c8>
  4024e4:	add	x0, x1, w0, sxtb #2
  4024e8:	br	x0
  4024ec:	str	x28, [x23]
  4024f0:	ldrb	w0, [x19]
  4024f4:	mov	w19, #0x10c                 	// #268
  4024f8:	str	w0, [sp, #152]
  4024fc:	b	402208 <yyparse+0x1e4>
  402500:	adrp	x1, 403000 <print_condition+0x1f0>
  402504:	mov	x0, x19
  402508:	add	x1, x1, #0xe47
  40250c:	bl	401520 <strcmp@plt>
  402510:	cbnz	w0, 402520 <yyparse+0x4fc>
  402514:	mov	w19, #0x102                 	// #258
  402518:	str	x28, [x23]
  40251c:	b	402208 <yyparse+0x1e4>
  402520:	adrp	x1, 403000 <print_condition+0x1f0>
  402524:	mov	x0, x19
  402528:	add	x1, x1, #0xe55
  40252c:	bl	401520 <strcmp@plt>
  402530:	cbnz	w0, 402540 <yyparse+0x51c>
  402534:	mov	w19, #0x103                 	// #259
  402538:	str	x28, [x23]
  40253c:	b	402208 <yyparse+0x1e4>
  402540:	mov	x0, x19
  402544:	mov	w19, #0x109                 	// #265
  402548:	bl	401460 <xstrdup@plt>
  40254c:	str	x0, [sp, #152]
  402550:	b	402334 <yyparse+0x310>
  402554:	ldrb	w0, [x27, #1]
  402558:	cmp	w0, #0x3d
  40255c:	b.ne	402568 <yyparse+0x544>  // b.any
  402560:	add	x28, x27, #0x2
  402564:	b	402334 <yyparse+0x310>
  402568:	mov	w19, #0x100                 	// #256
  40256c:	b	402334 <yyparse+0x310>
  402570:	ldr	x1, [sp, #120]
  402574:	add	x0, x22, #0x1b1
  402578:	ldrb	w0, [x0, x1]
  40257c:	cbnz	w0, 402628 <yyparse+0x604>
  402580:	cmn	w19, #0x2
  402584:	b.ne	402914 <yyparse+0x8f0>  // b.any
  402588:	mov	w0, w19
  40258c:	ldr	w1, [sp, #100]
  402590:	cbnz	w1, 402930 <yyparse+0x90c>
  402594:	mov	w2, #0x5                   	// #5
  402598:	adrp	x1, 403000 <print_condition+0x1f0>
  40259c:	adrp	x0, 403000 <print_condition+0x1f0>
  4025a0:	add	x1, x1, #0xe4b
  4025a4:	add	x0, x0, #0xe58
  4025a8:	bl	401590 <dcgettext@plt>
  4025ac:	mov	x2, x0
  4025b0:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  4025b4:	adrp	x1, 403000 <print_condition+0x1f0>
  4025b8:	add	x1, x1, #0xfac
  4025bc:	ldr	x0, [x0, #424]
  4025c0:	bl	401600 <fprintf@plt>
  4025c4:	mov	x28, x21
  4025c8:	add	x27, x22, #0x179
  4025cc:	add	x21, x22, #0x141
  4025d0:	ldrsb	w0, [x22, w26, sxtw]
  4025d4:	sxtw	x2, w26
  4025d8:	cmn	w0, #0x14
  4025dc:	b.eq	402604 <yyparse+0x5e0>  // b.none
  4025e0:	add	w0, w0, #0x1
  4025e4:	cmp	w0, #0x37
  4025e8:	b.hi	402604 <yyparse+0x5e0>  // b.pmore
  4025ec:	sxtw	x1, w0
  4025f0:	ldrsb	w0, [x21, w0, sxtw]
  4025f4:	cmp	w0, #0x1
  4025f8:	b.ne	402604 <yyparse+0x5e0>  // b.any
  4025fc:	ldrb	w0, [x27, x1]
  402600:	cbnz	w0, 402964 <yyparse+0x940>
  402604:	cmp	x24, x28
  402608:	b.eq	402a38 <yyparse+0xa14>  // b.none
  40260c:	ldr	x0, [sp, #128]
  402610:	mov	x1, x20
  402614:	sub	x20, x20, #0x8
  402618:	ldrb	w0, [x0, x2]
  40261c:	bl	401fd4 <yydestruct.isra.0>
  402620:	ldrsh	w26, [x28, #-2]!
  402624:	b	4025d0 <yyparse+0x5ac>
  402628:	add	x1, x22, #0x1e5
  40262c:	sxtw	x27, w0
  402630:	ldrb	w26, [x1, w0, sxtw]
  402634:	mov	w1, #0x1                   	// #1
  402638:	sub	w0, w0, #0x4
  40263c:	sub	w1, w1, w26
  402640:	cmp	w0, #0x1c
  402644:	ldr	x28, [x20, w1, sxtw #3]
  402648:	b.hi	4026d8 <yyparse+0x6b4>  // b.pmore
  40264c:	adrp	x1, 403000 <print_condition+0x1f0>
  402650:	add	x1, x1, #0xb74
  402654:	ldrh	w0, [x1, w0, uxtw #1]
  402658:	adr	x1, 402664 <yyparse+0x640>
  40265c:	add	x0, x1, w0, sxth #2
  402660:	br	x0
  402664:	ldur	x3, [x20, #-24]
  402668:	mov	x0, #0x10                  	// #16
  40266c:	ldur	x1, [x20, #-8]
  402670:	str	x1, [sp, #104]
  402674:	str	x3, [sp, #120]
  402678:	bl	401450 <xmalloc@plt>
  40267c:	mov	x4, x0
  402680:	ldr	x1, [sp, #104]
  402684:	ldr	x3, [sp, #120]
  402688:	stp	x3, x1, [x0]
  40268c:	ldr	x3, [x23, #16]
  402690:	ldp	x1, x0, [x3, #8]
  402694:	cmp	x1, x0
  402698:	b.ne	4026c8 <yyparse+0x6a4>  // b.any
  40269c:	ldr	x0, [x3]
  4026a0:	lsl	x1, x1, #1
  4026a4:	add	x1, x1, #0x1
  4026a8:	str	x1, [x3, #16]
  4026ac:	str	x3, [sp, #104]
  4026b0:	lsl	x1, x1, #3
  4026b4:	str	x4, [sp, #120]
  4026b8:	bl	4013e0 <xrealloc@plt>
  4026bc:	ldr	x3, [sp, #104]
  4026c0:	ldr	x4, [sp, #120]
  4026c4:	str	x0, [x3]
  4026c8:	ldp	x1, x0, [x3]
  4026cc:	add	x5, x0, #0x1
  4026d0:	str	x5, [x3, #8]
  4026d4:	str	x4, [x1, x0, lsl #3]
  4026d8:	sub	x0, x20, w26, uxtb #3
  4026dc:	sub	x21, x21, w26, uxtb #1
  4026e0:	add	x20, x0, #0x8
  4026e4:	add	x1, x22, #0x227
  4026e8:	ldrsh	w2, [x21]
  4026ec:	str	x28, [x0, #8]
  4026f0:	add	x0, x22, #0x206
  4026f4:	ldrb	w0, [x0, x27]
  4026f8:	sub	w0, w0, #0x15
  4026fc:	sxtw	x3, w0
  402700:	ldrsb	w0, [x1, w0, sxtw]
  402704:	add	w0, w0, w2
  402708:	cmp	w0, #0x37
  40270c:	b.hi	402908 <yyparse+0x8e4>  // b.pmore
  402710:	add	x1, x22, #0x141
  402714:	sxtw	x4, w0
  402718:	ldrsb	w0, [x1, w0, sxtw]
  40271c:	cmp	w0, w2
  402720:	b.ne	402908 <yyparse+0x8e4>  // b.any
  402724:	add	x0, x22, #0x179
  402728:	ldrb	w0, [x0, x4]
  40272c:	b	402268 <yyparse+0x244>
  402730:	ldur	x3, [x20, #-16]
  402734:	mov	x0, #0x18                  	// #24
  402738:	ldr	x1, [x20]
  40273c:	str	x1, [sp, #104]
  402740:	str	x3, [sp, #120]
  402744:	bl	401450 <xmalloc@plt>
  402748:	mov	x28, x0
  40274c:	mov	w0, #0x1                   	// #1
  402750:	str	w0, [x28]
  402754:	ldr	x3, [sp, #120]
  402758:	str	x3, [x28, #8]
  40275c:	ldr	x1, [sp, #104]
  402760:	str	x1, [x28, #16]
  402764:	b	4026d8 <yyparse+0x6b4>
  402768:	ldr	x1, [x20]
  40276c:	mov	x0, #0x18                  	// #24
  402770:	str	x1, [sp, #104]
  402774:	bl	401450 <xmalloc@plt>
  402778:	mov	x28, x0
  40277c:	mov	w0, #0x2                   	// #2
  402780:	str	w0, [x28]
  402784:	ldr	x1, [sp, #104]
  402788:	b	4028c4 <yyparse+0x8a0>
  40278c:	ldur	x3, [x20, #-16]
  402790:	mov	x0, #0x18                  	// #24
  402794:	str	x3, [sp, #120]
  402798:	ldr	x28, [x20]
  40279c:	bl	401450 <xmalloc@plt>
  4027a0:	mov	x1, x0
  4027a4:	mov	w0, #0x2                   	// #2
  4027a8:	str	x1, [sp, #104]
  4027ac:	str	w0, [x1]
  4027b0:	mov	x0, #0x18                  	// #24
  4027b4:	str	x28, [x1, #8]
  4027b8:	bl	401450 <xmalloc@plt>
  4027bc:	mov	x28, x0
  4027c0:	str	wzr, [x0]
  4027c4:	b	402754 <yyparse+0x730>
  4027c8:	ldur	x3, [x20, #-16]
  4027cc:	mov	x0, #0x18                  	// #24
  4027d0:	ldr	x1, [x20]
  4027d4:	str	x1, [sp, #104]
  4027d8:	str	x3, [sp, #120]
  4027dc:	bl	401450 <xmalloc@plt>
  4027e0:	mov	x28, x0
  4027e4:	ldr	x3, [sp, #120]
  4027e8:	str	x3, [x0]
  4027ec:	str	wzr, [x0, #8]
  4027f0:	b	40275c <yyparse+0x738>
  4027f4:	ldur	x3, [x20, #-16]
  4027f8:	mov	x0, #0x18                  	// #24
  4027fc:	ldr	x1, [x20]
  402800:	str	x1, [sp, #104]
  402804:	str	x3, [sp, #120]
  402808:	bl	401450 <xmalloc@plt>
  40280c:	mov	x28, x0
  402810:	ldr	x3, [sp, #120]
  402814:	mov	w0, #0x1                   	// #1
  402818:	str	x3, [x28]
  40281c:	str	w0, [x28, #8]
  402820:	b	40275c <yyparse+0x738>
  402824:	ldr	w1, [x20]
  402828:	mov	x0, #0x8                   	// #8
  40282c:	str	w1, [sp, #104]
  402830:	bl	401450 <xmalloc@plt>
  402834:	mov	x28, x0
  402838:	ldr	w1, [sp, #104]
  40283c:	stp	w1, wzr, [x0]
  402840:	b	4026d8 <yyparse+0x6b4>
  402844:	ldr	x0, [x20]
  402848:	ldur	w3, [x20, #-16]
  40284c:	str	w3, [sp, #120]
  402850:	ldr	w1, [x0, #8]
  402854:	mov	x0, #0x8                   	// #8
  402858:	str	w1, [sp, #104]
  40285c:	bl	401450 <xmalloc@plt>
  402860:	mov	x28, x0
  402864:	ldr	w1, [sp, #104]
  402868:	ldr	w3, [sp, #120]
  40286c:	stp	w3, w1, [x0]
  402870:	b	4026d8 <yyparse+0x6b4>
  402874:	mov	x0, #0x18                  	// #24
  402878:	bl	401450 <xmalloc@plt>
  40287c:	stp	xzr, xzr, [x0]
  402880:	str	xzr, [x0, #16]
  402884:	ldr	x1, [x20]
  402888:	bl	401f74 <add_range>
  40288c:	mov	x28, x0
  402890:	b	4026d8 <yyparse+0x6b4>
  402894:	ldur	x0, [x20, #-16]
  402898:	ldr	x1, [x20]
  40289c:	b	402888 <yyparse+0x864>
  4028a0:	ldr	x28, [x20]
  4028a4:	b	4026d8 <yyparse+0x6b4>
  4028a8:	ldr	x1, [x20]
  4028ac:	mov	x0, #0x10                  	// #16
  4028b0:	str	x1, [sp, #104]
  4028b4:	bl	401450 <xmalloc@plt>
  4028b8:	mov	x28, x0
  4028bc:	ldr	x1, [sp, #104]
  4028c0:	str	x1, [x0]
  4028c4:	str	x1, [x28, #8]
  4028c8:	b	4026d8 <yyparse+0x6b4>
  4028cc:	ldur	x3, [x20, #-16]
  4028d0:	mov	x0, #0x10                  	// #16
  4028d4:	ldr	x1, [x20]
  4028d8:	str	x1, [sp, #104]
  4028dc:	str	x3, [sp, #120]
  4028e0:	bl	401450 <xmalloc@plt>
  4028e4:	mov	x28, x0
  4028e8:	ldr	x3, [sp, #120]
  4028ec:	str	x3, [x0]
  4028f0:	b	402784 <yyparse+0x760>
  4028f4:	ldur	x0, [x20, #-16]
  4028f8:	bl	401560 <free@plt>
  4028fc:	ldr	x0, [x20]
  402900:	bl	401560 <free@plt>
  402904:	b	4026d8 <yyparse+0x6b4>
  402908:	add	x0, x22, #0x238
  40290c:	ldrsb	w0, [x0, x3]
  402910:	b	402268 <yyparse+0x244>
  402914:	cmp	w19, #0x10c
  402918:	b.hi	402928 <yyparse+0x904>  // b.pmore
  40291c:	add	x0, x22, #0x34
  402920:	ldrb	w0, [x0, w19, sxtw]
  402924:	b	40258c <yyparse+0x568>
  402928:	mov	w0, #0x2                   	// #2
  40292c:	b	40258c <yyparse+0x568>
  402930:	ldr	w1, [sp, #100]
  402934:	cmp	w1, #0x3
  402938:	b.ne	4025c4 <yyparse+0x5a0>  // b.any
  40293c:	cmp	w19, #0x0
  402940:	b.gt	402954 <yyparse+0x930>
  402944:	b.ne	4025c4 <yyparse+0x5a0>  // b.any
  402948:	mov	x28, x24
  40294c:	mov	w22, #0x1                   	// #1
  402950:	b	4029c8 <yyparse+0x9a4>
  402954:	add	x1, sp, #0x98
  402958:	mov	w19, #0xfffffffe            	// #-2
  40295c:	bl	401fd4 <yydestruct.isra.0>
  402960:	b	4025c4 <yyparse+0x5a0>
  402964:	ldr	x1, [sp, #152]
  402968:	mov	x21, x28
  40296c:	add	x20, x20, #0x8
  402970:	str	x1, [x20]
  402974:	mov	w1, #0x3                   	// #3
  402978:	str	w1, [sp, #100]
  40297c:	b	402268 <yyparse+0x244>
  402980:	mov	w2, #0x5                   	// #5
  402984:	adrp	x1, 403000 <print_condition+0x1f0>
  402988:	adrp	x0, 403000 <print_condition+0x1f0>
  40298c:	add	x1, x1, #0xe66
  402990:	add	x0, x0, #0xe58
  402994:	bl	401590 <dcgettext@plt>
  402998:	mov	x2, x0
  40299c:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  4029a0:	mov	x28, x24
  4029a4:	mov	w22, #0x2                   	// #2
  4029a8:	ldr	x0, [x0, #424]
  4029ac:	adrp	x1, 403000 <print_condition+0x1f0>
  4029b0:	add	x1, x1, #0xfac
  4029b4:	bl	401600 <fprintf@plt>
  4029b8:	cmn	w19, #0x2
  4029bc:	b.eq	4029e0 <yyparse+0x9bc>  // b.none
  4029c0:	cmp	w19, #0x10c
  4029c4:	b.hi	402a44 <yyparse+0xa20>  // b.pmore
  4029c8:	adrp	x0, 403000 <print_condition+0x1f0>
  4029cc:	add	x0, x0, #0xbae
  4029d0:	add	x0, x0, #0x34
  4029d4:	ldrb	w0, [x0, w19, sxtw]
  4029d8:	add	x1, sp, #0x98
  4029dc:	bl	401fd4 <yydestruct.isra.0>
  4029e0:	adrp	x19, 403000 <print_condition+0x1f0>
  4029e4:	add	x19, x19, #0xbae
  4029e8:	add	x19, x19, #0x249
  4029ec:	cmp	x21, x28
  4029f0:	b.ne	402a4c <yyparse+0xa28>  // b.any
  4029f4:	add	x0, sp, #0xa0
  4029f8:	cmp	x21, x0
  4029fc:	b.eq	402a08 <yyparse+0x9e4>  // b.none
  402a00:	mov	x0, x21
  402a04:	bl	401560 <free@plt>
  402a08:	mov	w0, w22
  402a0c:	ldp	x29, x30, [sp]
  402a10:	ldp	x19, x20, [sp, #16]
  402a14:	ldp	x21, x22, [sp, #32]
  402a18:	ldp	x23, x24, [sp, #48]
  402a1c:	ldp	x25, x26, [sp, #64]
  402a20:	ldp	x27, x28, [sp, #80]
  402a24:	add	sp, sp, #0x870
  402a28:	ret
  402a2c:	mov	x28, x24
  402a30:	mov	w22, #0x0                   	// #0
  402a34:	b	4029b8 <yyparse+0x994>
  402a38:	mov	x21, x28
  402a3c:	mov	w22, #0x1                   	// #1
  402a40:	b	4029b8 <yyparse+0x994>
  402a44:	mov	w0, #0x2                   	// #2
  402a48:	b	4029d8 <yyparse+0x9b4>
  402a4c:	ldrsh	x0, [x21], #-2
  402a50:	mov	x1, x20
  402a54:	sub	x20, x20, #0x8
  402a58:	ldrb	w0, [x19, x0]
  402a5c:	bl	401fd4 <yydestruct.isra.0>
  402a60:	b	4029ec <yyparse+0x9c8>

0000000000402a64 <find_largest_modulus>:
  402a64:	stp	x29, x30, [sp, #-32]!
  402a68:	mov	x29, sp
  402a6c:	stp	x19, x20, [sp, #16]
  402a70:	mov	x20, x0
  402a74:	ldr	w0, [x0]
  402a78:	cmp	w0, #0x1
  402a7c:	b.hi	402aa8 <find_largest_modulus+0x44>  // b.pmore
  402a80:	ldr	x0, [x20, #8]
  402a84:	bl	402a64 <find_largest_modulus>
  402a88:	mov	w19, w0
  402a8c:	ldr	x0, [x20, #16]
  402a90:	bl	402a64 <find_largest_modulus>
  402a94:	cmp	w19, w0
  402a98:	csel	w0, w19, w0, ge  // ge = tcont
  402a9c:	ldp	x19, x20, [sp, #16]
  402aa0:	ldp	x29, x30, [sp], #32
  402aa4:	ret
  402aa8:	cmp	w0, #0x2
  402aac:	b.ne	402ac0 <find_largest_modulus+0x5c>  // b.any
  402ab0:	ldr	x0, [x20, #8]
  402ab4:	ldr	x0, [x0]
  402ab8:	ldr	w0, [x0, #4]
  402abc:	b	402a9c <find_largest_modulus+0x38>
  402ac0:	mov	w0, #0x0                   	// #0
  402ac4:	b	402a9c <find_largest_modulus+0x38>

0000000000402ac8 <find_largest_number>:
  402ac8:	stp	x29, x30, [sp, #-32]!
  402acc:	mov	x29, sp
  402ad0:	stp	x19, x20, [sp, #16]
  402ad4:	mov	x20, x0
  402ad8:	ldr	w0, [x0]
  402adc:	cmp	w0, #0x1
  402ae0:	b.hi	402b0c <find_largest_number+0x44>  // b.pmore
  402ae4:	ldr	x0, [x20, #8]
  402ae8:	bl	402ac8 <find_largest_number>
  402aec:	mov	w19, w0
  402af0:	ldr	x0, [x20, #16]
  402af4:	bl	402ac8 <find_largest_number>
  402af8:	cmp	w19, w0
  402afc:	csel	w0, w19, w0, ge  // ge = tcont
  402b00:	ldp	x19, x20, [sp, #16]
  402b04:	ldp	x29, x30, [sp], #32
  402b08:	ret
  402b0c:	cmp	w0, #0x2
  402b10:	b.ne	402b78 <find_largest_number+0xb0>  // b.any
  402b14:	ldr	x0, [x20, #8]
  402b18:	mov	x1, #0x0                   	// #0
  402b1c:	ldr	x3, [x0, #16]
  402b20:	mov	w0, #0x0                   	// #0
  402b24:	ldr	x5, [x3, #8]
  402b28:	cmp	x5, x1
  402b2c:	b.eq	402b00 <find_largest_number+0x38>  // b.none
  402b30:	ldr	x2, [x3]
  402b34:	ldr	x2, [x2, x1, lsl #3]
  402b38:	ldr	x2, [x2, #8]
  402b3c:	ldr	w4, [x2]
  402b40:	cbnz	w4, 402b58 <find_largest_number+0x90>
  402b44:	ldr	w2, [x2, #8]
  402b48:	cmp	w0, w2
  402b4c:	csel	w0, w0, w2, ge  // ge = tcont
  402b50:	add	x1, x1, #0x1
  402b54:	b	402b28 <find_largest_number+0x60>
  402b58:	cmp	w4, #0x1
  402b5c:	b.ne	402b50 <find_largest_number+0x88>  // b.any
  402b60:	scvtf	d1, w0
  402b64:	ldr	d0, [x2, #8]
  402b68:	fcmpe	d0, d1
  402b6c:	b.le	402b50 <find_largest_number+0x88>
  402b70:	fcvtzs	w0, d0
  402b74:	b	402b50 <find_largest_number+0x88>
  402b78:	mov	w0, #0x0                   	// #0
  402b7c:	b	402b00 <find_largest_number+0x38>

0000000000402b80 <apply_condition>:
  402b80:	stp	x29, x30, [sp, #-48]!
  402b84:	mov	x29, sp
  402b88:	stp	x19, x20, [sp, #16]
  402b8c:	mov	w20, w1
  402b90:	ldr	w19, [x0]
  402b94:	str	x21, [sp, #32]
  402b98:	mov	x21, x0
  402b9c:	cbnz	w19, 402bdc <apply_condition+0x5c>
  402ba0:	ldr	x0, [x0, #8]
  402ba4:	bl	402b80 <apply_condition>
  402ba8:	tst	w0, #0xff
  402bac:	b.eq	402bd4 <apply_condition+0x54>  // b.none
  402bb0:	ldr	x0, [x21, #16]
  402bb4:	mov	w1, w20
  402bb8:	bl	402b80 <apply_condition>
  402bbc:	and	w0, w0, #0xff
  402bc0:	and	w0, w0, #0x1
  402bc4:	ldp	x19, x20, [sp, #16]
  402bc8:	ldr	x21, [sp, #32]
  402bcc:	ldp	x29, x30, [sp], #48
  402bd0:	ret
  402bd4:	mov	w0, #0x0                   	// #0
  402bd8:	b	402bc0 <apply_condition+0x40>
  402bdc:	cmp	w19, #0x1
  402be0:	b.ne	402c0c <apply_condition+0x8c>  // b.any
  402be4:	ldr	x0, [x0, #8]
  402be8:	bl	402b80 <apply_condition>
  402bec:	tst	w0, #0xff
  402bf0:	b.ne	402c04 <apply_condition+0x84>  // b.any
  402bf4:	ldr	x0, [x21, #16]
  402bf8:	mov	w1, w20
  402bfc:	bl	402b80 <apply_condition>
  402c00:	and	w19, w0, #0xff
  402c04:	and	w0, w19, #0x1
  402c08:	b	402bc4 <apply_condition+0x44>
  402c0c:	cmp	w19, #0x2
  402c10:	b.ne	402c94 <apply_condition+0x114>  // b.any
  402c14:	ldr	x0, [x0, #8]
  402c18:	ldr	x1, [x0]
  402c1c:	ldr	w1, [x1, #4]
  402c20:	cmp	w1, #0x0
  402c24:	b.le	402c30 <apply_condition+0xb0>
  402c28:	sdiv	w2, w20, w1
  402c2c:	msub	w20, w2, w1, w20
  402c30:	ldr	x2, [x0, #16]
  402c34:	mov	x1, #0x0                   	// #0
  402c38:	ldr	x4, [x2, #8]
  402c3c:	cmp	x4, x1
  402c40:	b.ne	402c54 <apply_condition+0xd4>  // b.any
  402c44:	ldr	w0, [x0, #8]
  402c48:	cmp	w0, #0x0
  402c4c:	cset	w0, ne  // ne = any
  402c50:	b	402bc4 <apply_condition+0x44>
  402c54:	ldr	x3, [x2]
  402c58:	ldr	x3, [x3, x1, lsl #3]
  402c5c:	ldr	x5, [x3]
  402c60:	ldr	w5, [x5, #8]
  402c64:	cmp	w5, w20
  402c68:	b.gt	402c8c <apply_condition+0x10c>
  402c6c:	ldr	x3, [x3, #8]
  402c70:	ldr	w3, [x3, #8]
  402c74:	cmp	w3, w20
  402c78:	b.lt	402c8c <apply_condition+0x10c>  // b.tstop
  402c7c:	ldr	w0, [x0, #8]
  402c80:	cmp	w0, #0x0
  402c84:	cset	w0, eq  // eq = none
  402c88:	b	402bc4 <apply_condition+0x44>
  402c8c:	add	x1, x1, #0x1
  402c90:	b	402c3c <apply_condition+0xbc>
  402c94:	mov	w0, #0x0                   	// #0
  402c98:	b	402bc4 <apply_condition+0x44>

0000000000402c9c <print_condition_greater>:
  402c9c:	mov	x2, x0
  402ca0:	mov	x0, x1
  402ca4:	ldr	w1, [x2]
  402ca8:	cmp	w1, #0x2
  402cac:	b.ne	402d40 <print_condition_greater+0xa4>  // b.any
  402cb0:	ldr	x1, [x2, #8]
  402cb4:	ldr	w2, [x1, #8]
  402cb8:	cbnz	w2, 402d40 <print_condition_greater+0xa4>
  402cbc:	ldr	x4, [x1, #16]
  402cc0:	mov	x2, #0x0                   	// #0
  402cc4:	mov	w3, #0xffffffff            	// #-1
  402cc8:	ldr	x6, [x4, #8]
  402ccc:	cmp	x2, x6
  402cd0:	ldr	x1, [x4]
  402cd4:	b.ne	402d08 <print_condition_greater+0x6c>  // b.any
  402cd8:	add	x2, x1, x2, lsl #3
  402cdc:	stp	x29, x30, [sp, #-16]!
  402ce0:	mov	x29, sp
  402ce4:	ldur	x1, [x2, #-8]
  402ce8:	ldr	x1, [x1, #8]
  402cec:	ldr	w2, [x1, #8]
  402cf0:	adrp	x1, 403000 <print_condition+0x1f0>
  402cf4:	add	x1, x1, #0xe77
  402cf8:	bl	401600 <fprintf@plt>
  402cfc:	mov	w0, #0x1                   	// #1
  402d00:	ldp	x29, x30, [sp], #16
  402d04:	ret
  402d08:	ldr	x1, [x1, x2, lsl #3]
  402d0c:	ldr	x5, [x1]
  402d10:	ldr	w7, [x5]
  402d14:	cbnz	w7, 402d40 <print_condition_greater+0xa4>
  402d18:	ldr	x1, [x1, #8]
  402d1c:	ldr	w7, [x1]
  402d20:	cbnz	w7, 402d40 <print_condition_greater+0xa4>
  402d24:	ldr	w5, [x5, #8]
  402d28:	add	w3, w3, #0x1
  402d2c:	cmp	w5, w3
  402d30:	b.ne	402d40 <print_condition_greater+0xa4>  // b.any
  402d34:	ldr	w3, [x1, #8]
  402d38:	add	x2, x2, #0x1
  402d3c:	b	402ccc <print_condition_greater+0x30>
  402d40:	mov	w0, #0x0                   	// #0
  402d44:	ret

0000000000402d48 <print_condition_negation>:
  402d48:	mov	x2, x0
  402d4c:	mov	x0, x1
  402d50:	ldr	w1, [x2]
  402d54:	cmp	w1, #0x2
  402d58:	b.ne	402dc0 <print_condition_negation+0x78>  // b.any
  402d5c:	ldr	x1, [x2, #8]
  402d60:	ldr	w2, [x1, #8]
  402d64:	cbnz	w2, 402dc0 <print_condition_negation+0x78>
  402d68:	stp	x29, x30, [sp, #-32]!
  402d6c:	mov	x29, sp
  402d70:	ldr	x1, [x1, #16]
  402d74:	str	x19, [sp, #16]
  402d78:	ldr	x19, [x1, #8]
  402d7c:	cmp	x19, #0x1
  402d80:	b.ne	402dcc <print_condition_negation+0x84>  // b.any
  402d84:	ldr	x1, [x1]
  402d88:	ldr	x2, [x1]
  402d8c:	ldp	x1, x3, [x2]
  402d90:	mov	w2, #0x0                   	// #0
  402d94:	cmp	x1, x3
  402d98:	b.ne	402db0 <print_condition_negation+0x68>  // b.any
  402d9c:	ldr	w2, [x1, #8]
  402da0:	adrp	x1, 403000 <print_condition+0x1f0>
  402da4:	add	x1, x1, #0xe95
  402da8:	bl	401600 <fprintf@plt>
  402dac:	mov	w2, w19
  402db0:	mov	w0, w2
  402db4:	ldr	x19, [sp, #16]
  402db8:	ldp	x29, x30, [sp], #32
  402dbc:	ret
  402dc0:	mov	w2, #0x0                   	// #0
  402dc4:	mov	w0, w2
  402dc8:	ret
  402dcc:	mov	w2, #0x0                   	// #0
  402dd0:	b	402db0 <print_condition_negation+0x68>

0000000000402dd4 <print_expression.isra.0>:
  402dd4:	mov	w3, w0
  402dd8:	and	w1, w1, #0xff
  402ddc:	mov	x0, x2
  402de0:	cbnz	w3, 402df0 <print_expression.isra.0+0x1c>
  402de4:	mov	x1, x2
  402de8:	mov	w0, #0x6e                  	// #110
  402dec:	b	401390 <fputc@plt>
  402df0:	cmp	w1, #0x0
  402df4:	adrp	x5, 403000 <print_condition+0x1f0>
  402df8:	adrp	x4, 403000 <print_condition+0x1f0>
  402dfc:	add	x1, x5, #0xeb4
  402e00:	add	x4, x4, #0xebc
  402e04:	mov	w2, w3
  402e08:	csel	x1, x1, x4, ne  // ne = any
  402e0c:	b	401600 <fprintf@plt>

0000000000402e10 <print_condition>:
  402e10:	stp	x29, x30, [sp, #-96]!
  402e14:	mov	x29, sp
  402e18:	stp	x21, x22, [sp, #32]
  402e1c:	mov	w21, w1
  402e20:	ldr	w1, [x0]
  402e24:	stp	x19, x20, [sp, #16]
  402e28:	mov	x20, x0
  402e2c:	mov	x19, x3
  402e30:	stp	x23, x24, [sp, #48]
  402e34:	stp	x25, x26, [sp, #64]
  402e38:	str	x27, [sp, #80]
  402e3c:	cbnz	w1, 402eb4 <print_condition+0xa4>
  402e40:	cmp	w21, #0x1
  402e44:	b.ne	402e54 <print_condition+0x44>  // b.any
  402e48:	mov	x1, x3
  402e4c:	mov	w0, #0x28                  	// #40
  402e50:	bl	401390 <fputc@plt>
  402e54:	ldr	x0, [x20, #8]
  402e58:	mov	x3, x19
  402e5c:	mov	w2, #0x0                   	// #0
  402e60:	mov	w1, #0x0                   	// #0
  402e64:	bl	402e10 <print_condition>
  402e68:	mov	x1, x19
  402e6c:	adrp	x0, 403000 <print_condition+0x1f0>
  402e70:	add	x0, x0, #0xeda
  402e74:	bl	401310 <fputs@plt>
  402e78:	ldr	x0, [x20, #16]
  402e7c:	mov	x3, x19
  402e80:	mov	w2, #0x0                   	// #0
  402e84:	mov	w1, #0x0                   	// #0
  402e88:	bl	402e10 <print_condition>
  402e8c:	cmp	w21, #0x1
  402e90:	b.eq	402f08 <print_condition+0xf8>  // b.none
  402e94:	mov	w0, #0x1                   	// #1
  402e98:	ldp	x19, x20, [sp, #16]
  402e9c:	ldp	x21, x22, [sp, #32]
  402ea0:	ldp	x23, x24, [sp, #48]
  402ea4:	ldp	x25, x26, [sp, #64]
  402ea8:	ldr	x27, [sp, #80]
  402eac:	ldp	x29, x30, [sp], #96
  402eb0:	ret
  402eb4:	cmp	w1, #0x1
  402eb8:	b.ne	402f18 <print_condition+0x108>  // b.any
  402ebc:	cbnz	w21, 402ecc <print_condition+0xbc>
  402ec0:	mov	x1, x3
  402ec4:	mov	w0, #0x28                  	// #40
  402ec8:	bl	401390 <fputc@plt>
  402ecc:	ldr	x0, [x20, #8]
  402ed0:	mov	x3, x19
  402ed4:	mov	w2, #0x0                   	// #0
  402ed8:	mov	w1, #0x1                   	// #1
  402edc:	bl	402e10 <print_condition>
  402ee0:	mov	x1, x19
  402ee4:	adrp	x0, 403000 <print_condition+0x1f0>
  402ee8:	add	x0, x0, #0xedf
  402eec:	bl	401310 <fputs@plt>
  402ef0:	ldr	x0, [x20, #16]
  402ef4:	mov	x3, x19
  402ef8:	mov	w2, #0x0                   	// #0
  402efc:	mov	w1, #0x1                   	// #1
  402f00:	bl	402e10 <print_condition>
  402f04:	cbnz	w21, 402e94 <print_condition+0x84>
  402f08:	mov	x1, x19
  402f0c:	mov	w0, #0x29                  	// #41
  402f10:	bl	401390 <fputc@plt>
  402f14:	b	402e94 <print_condition+0x84>
  402f18:	cmp	w1, #0x2
  402f1c:	mov	w0, #0x0                   	// #0
  402f20:	b.ne	402e98 <print_condition+0x88>  // b.any
  402f24:	ldr	x20, [x20, #8]
  402f28:	and	w24, w2, #0xff
  402f2c:	ldr	w1, [x20, #8]
  402f30:	ldr	x0, [x20, #16]
  402f34:	ldr	x0, [x0, #8]
  402f38:	cbnz	w1, 4030e8 <print_condition+0x2d8>
  402f3c:	cbnz	w21, 402f54 <print_condition+0x144>
  402f40:	cmp	x0, #0x1
  402f44:	b.ls	402f54 <print_condition+0x144>  // b.plast
  402f48:	mov	x1, x3
  402f4c:	mov	w0, #0x28                  	// #40
  402f50:	bl	401390 <fputc@plt>
  402f54:	adrp	x26, 403000 <print_condition+0x1f0>
  402f58:	adrp	x25, 403000 <print_condition+0x1f0>
  402f5c:	add	x26, x26, #0xedf
  402f60:	add	x25, x25, #0xee4
  402f64:	mov	x23, #0x0                   	// #0
  402f68:	adrp	x27, 403000 <print_condition+0x1f0>
  402f6c:	ldr	x1, [x20, #16]
  402f70:	ldr	x0, [x1, #8]
  402f74:	cmp	x23, x0
  402f78:	b.cc	402f8c <print_condition+0x17c>  // b.lo, b.ul, b.last
  402f7c:	cbnz	w21, 402e94 <print_condition+0x84>
  402f80:	cmp	x0, #0x1
  402f84:	b.ls	402e94 <print_condition+0x84>  // b.plast
  402f88:	b	402f08 <print_condition+0xf8>
  402f8c:	ldr	x0, [x1]
  402f90:	ldr	x22, [x0, x23, lsl #3]
  402f94:	cbz	x23, 402fa4 <print_condition+0x194>
  402f98:	mov	x1, x19
  402f9c:	mov	x0, x26
  402fa0:	bl	401310 <fputs@plt>
  402fa4:	ldp	x0, x1, [x22]
  402fa8:	ldr	w0, [x0, #8]
  402fac:	ldr	w1, [x1, #8]
  402fb0:	cmp	w0, w1
  402fb4:	b.ne	403014 <print_condition+0x204>  // b.any
  402fb8:	ldr	x0, [x20]
  402fbc:	mov	x2, x19
  402fc0:	mov	w1, w24
  402fc4:	ldr	w0, [x0, #4]
  402fc8:	bl	402dd4 <print_expression.isra.0>
  402fcc:	cbz	w24, 403008 <print_condition+0x1f8>
  402fd0:	ldr	x0, [x20, #16]
  402fd4:	adrp	x1, 403000 <print_condition+0x1f0>
  402fd8:	add	x1, x1, #0xec2
  402fdc:	ldr	x2, [x0, #8]
  402fe0:	adrp	x0, 403000 <print_condition+0x1f0>
  402fe4:	add	x0, x0, #0xec7
  402fe8:	cmp	x2, #0x1
  402fec:	csel	x1, x1, x0, ne  // ne = any
  402ff0:	ldr	x0, [x22]
  402ff4:	ldr	w2, [x0, #8]
  402ff8:	mov	x0, x19
  402ffc:	bl	401600 <fprintf@plt>
  403000:	add	x23, x23, #0x1
  403004:	b	402f6c <print_condition+0x15c>
  403008:	adrp	x1, 403000 <print_condition+0x1f0>
  40300c:	add	x1, x1, #0xec2
  403010:	b	402ff0 <print_condition+0x1e0>
  403014:	cbnz	w0, 40303c <print_condition+0x22c>
  403018:	ldr	x0, [x20]
  40301c:	mov	x2, x19
  403020:	mov	w1, #0x0                   	// #0
  403024:	ldr	w0, [x0, #4]
  403028:	bl	402dd4 <print_expression.isra.0>
  40302c:	ldr	x0, [x22, #8]
  403030:	mov	x1, x25
  403034:	ldr	w2, [x0, #8]
  403038:	b	402ff8 <print_condition+0x1e8>
  40303c:	cmp	w21, #0x1
  403040:	b.eq	403054 <print_condition+0x244>  // b.none
  403044:	ldr	x0, [x20, #16]
  403048:	ldr	x0, [x0, #8]
  40304c:	cmp	x0, #0x1
  403050:	b.ls	403060 <print_condition+0x250>  // b.plast
  403054:	mov	x1, x19
  403058:	mov	w0, #0x28                  	// #40
  40305c:	bl	401390 <fputc@plt>
  403060:	ldr	x0, [x20]
  403064:	mov	x2, x19
  403068:	mov	w1, #0x0                   	// #0
  40306c:	ldr	w0, [x0, #4]
  403070:	bl	402dd4 <print_expression.isra.0>
  403074:	ldr	x0, [x22]
  403078:	add	x1, x27, #0xee9
  40307c:	ldr	w2, [x0, #8]
  403080:	mov	x0, x19
  403084:	bl	401600 <fprintf@plt>
  403088:	mov	x1, x19
  40308c:	adrp	x0, 403000 <print_condition+0x1f0>
  403090:	add	x0, x0, #0xeda
  403094:	bl	401310 <fputs@plt>
  403098:	ldr	x0, [x20]
  40309c:	mov	x2, x19
  4030a0:	mov	w1, #0x0                   	// #0
  4030a4:	ldr	w0, [x0, #4]
  4030a8:	bl	402dd4 <print_expression.isra.0>
  4030ac:	ldr	x0, [x22, #8]
  4030b0:	mov	x1, x25
  4030b4:	ldr	w2, [x0, #8]
  4030b8:	mov	x0, x19
  4030bc:	bl	401600 <fprintf@plt>
  4030c0:	cmp	w21, #0x1
  4030c4:	b.eq	4030d8 <print_condition+0x2c8>  // b.none
  4030c8:	ldr	x0, [x20, #16]
  4030cc:	ldr	x0, [x0, #8]
  4030d0:	cmp	x0, #0x1
  4030d4:	b.ls	403000 <print_condition+0x1f0>  // b.plast
  4030d8:	mov	x1, x19
  4030dc:	mov	w0, #0x29                  	// #41
  4030e0:	bl	401390 <fputc@plt>
  4030e4:	b	403000 <print_condition+0x1f0>
  4030e8:	cmp	w21, #0x1
  4030ec:	b.ne	403104 <print_condition+0x2f4>  // b.any
  4030f0:	cmp	x0, #0x1
  4030f4:	b.ls	403104 <print_condition+0x2f4>  // b.plast
  4030f8:	mov	x1, x3
  4030fc:	mov	w0, #0x28                  	// #40
  403100:	bl	401390 <fputc@plt>
  403104:	adrp	x26, 403000 <print_condition+0x1f0>
  403108:	adrp	x25, 403000 <print_condition+0x1f0>
  40310c:	add	x26, x26, #0xeda
  403110:	add	x25, x25, #0xeee
  403114:	mov	x23, #0x0                   	// #0
  403118:	adrp	x27, 403000 <print_condition+0x1f0>
  40311c:	ldr	x1, [x20, #16]
  403120:	ldr	x0, [x1, #8]
  403124:	cmp	x23, x0
  403128:	b.cc	403138 <print_condition+0x328>  // b.lo, b.ul, b.last
  40312c:	cmp	w21, #0x1
  403130:	b.ne	402e94 <print_condition+0x84>  // b.any
  403134:	b	402f80 <print_condition+0x170>
  403138:	ldr	x0, [x1]
  40313c:	ldr	x22, [x0, x23, lsl #3]
  403140:	cbz	x23, 403150 <print_condition+0x340>
  403144:	mov	x1, x19
  403148:	mov	x0, x26
  40314c:	bl	401310 <fputs@plt>
  403150:	ldp	x0, x1, [x22]
  403154:	ldr	w0, [x0, #8]
  403158:	ldr	w1, [x1, #8]
  40315c:	cmp	w0, w1
  403160:	b.ne	4031c0 <print_condition+0x3b0>  // b.any
  403164:	ldr	x0, [x20]
  403168:	mov	x2, x19
  40316c:	mov	w1, w24
  403170:	ldr	w0, [x0, #4]
  403174:	bl	402dd4 <print_expression.isra.0>
  403178:	cbz	w24, 4031b4 <print_condition+0x3a4>
  40317c:	ldr	x0, [x20, #16]
  403180:	adrp	x1, 403000 <print_condition+0x1f0>
  403184:	add	x1, x1, #0xece
  403188:	ldr	x2, [x0, #8]
  40318c:	adrp	x0, 403000 <print_condition+0x1f0>
  403190:	add	x0, x0, #0xed3
  403194:	cmp	x2, #0x1
  403198:	csel	x1, x1, x0, ne  // ne = any
  40319c:	ldr	x0, [x22]
  4031a0:	ldr	w2, [x0, #8]
  4031a4:	mov	x0, x19
  4031a8:	bl	401600 <fprintf@plt>
  4031ac:	add	x23, x23, #0x1
  4031b0:	b	40311c <print_condition+0x30c>
  4031b4:	adrp	x1, 403000 <print_condition+0x1f0>
  4031b8:	add	x1, x1, #0xece
  4031bc:	b	40319c <print_condition+0x38c>
  4031c0:	cbnz	w0, 4031e8 <print_condition+0x3d8>
  4031c4:	ldr	x0, [x20]
  4031c8:	mov	x2, x19
  4031cc:	mov	w1, #0x0                   	// #0
  4031d0:	ldr	w0, [x0, #4]
  4031d4:	bl	402dd4 <print_expression.isra.0>
  4031d8:	ldr	x0, [x22, #8]
  4031dc:	mov	x1, x25
  4031e0:	ldr	w2, [x0, #8]
  4031e4:	b	4031a4 <print_condition+0x394>
  4031e8:	cbz	w21, 4031fc <print_condition+0x3ec>
  4031ec:	ldr	x0, [x20, #16]
  4031f0:	ldr	x0, [x0, #8]
  4031f4:	cmp	x0, #0x1
  4031f8:	b.ls	403208 <print_condition+0x3f8>  // b.plast
  4031fc:	mov	x1, x19
  403200:	mov	w0, #0x28                  	// #40
  403204:	bl	401390 <fputc@plt>
  403208:	ldr	x0, [x20]
  40320c:	mov	x2, x19
  403210:	mov	w1, #0x0                   	// #0
  403214:	ldr	w0, [x0, #4]
  403218:	bl	402dd4 <print_expression.isra.0>
  40321c:	ldr	x0, [x22]
  403220:	add	x1, x27, #0xef2
  403224:	ldr	w2, [x0, #8]
  403228:	mov	x0, x19
  40322c:	bl	401600 <fprintf@plt>
  403230:	mov	x1, x19
  403234:	adrp	x0, 403000 <print_condition+0x1f0>
  403238:	add	x0, x0, #0xedf
  40323c:	bl	401310 <fputs@plt>
  403240:	ldr	x0, [x20]
  403244:	mov	x2, x19
  403248:	mov	w1, #0x0                   	// #0
  40324c:	ldr	w0, [x0, #4]
  403250:	bl	402dd4 <print_expression.isra.0>
  403254:	ldr	x0, [x22, #8]
  403258:	mov	x1, x25
  40325c:	ldr	w2, [x0, #8]
  403260:	mov	x0, x19
  403264:	bl	401600 <fprintf@plt>
  403268:	cbz	w21, 40327c <print_condition+0x46c>
  40326c:	ldr	x0, [x20, #16]
  403270:	ldr	x0, [x0, #8]
  403274:	cmp	x0, #0x1
  403278:	b.ls	4031ac <print_condition+0x39c>  // b.plast
  40327c:	mov	x1, x19
  403280:	mov	w0, #0x29                  	// #41
  403284:	bl	401390 <fputc@plt>
  403288:	b	4031ac <print_condition+0x39c>

000000000040328c <cldr_plural_range_free>:
  40328c:	stp	x29, x30, [sp, #-32]!
  403290:	mov	x29, sp
  403294:	str	x19, [sp, #16]
  403298:	mov	x19, x0
  40329c:	ldr	x0, [x0]
  4032a0:	ldr	x1, [x19, #8]
  4032a4:	cmp	x0, x1
  4032a8:	b.eq	4032b0 <cldr_plural_range_free+0x24>  // b.none
  4032ac:	bl	401560 <free@plt>
  4032b0:	ldr	x0, [x19, #8]
  4032b4:	bl	401560 <free@plt>
  4032b8:	mov	x0, x19
  4032bc:	ldr	x19, [sp, #16]
  4032c0:	ldp	x29, x30, [sp], #32
  4032c4:	b	401560 <free@plt>

00000000004032c8 <cldr_plural_range_list_free>:
  4032c8:	stp	x29, x30, [sp, #-32]!
  4032cc:	mov	x29, sp
  4032d0:	str	x19, [sp, #16]
  4032d4:	mov	x19, x0
  4032d8:	ldp	x0, x1, [x19]
  4032dc:	sub	x2, x1, #0x1
  4032e0:	str	x2, [x19, #8]
  4032e4:	cbnz	x1, 4032fc <cldr_plural_range_list_free+0x34>
  4032e8:	bl	401560 <free@plt>
  4032ec:	mov	x0, x19
  4032f0:	ldr	x19, [sp, #16]
  4032f4:	ldp	x29, x30, [sp], #32
  4032f8:	b	401560 <free@plt>
  4032fc:	ldr	x0, [x0, x2, lsl #3]
  403300:	bl	40328c <cldr_plural_range_free>
  403304:	b	4032d8 <cldr_plural_range_list_free+0x10>

0000000000403308 <cldr_plural_relation_free>:
  403308:	stp	x29, x30, [sp, #-32]!
  40330c:	mov	x29, sp
  403310:	str	x19, [sp, #16]
  403314:	mov	x19, x0
  403318:	ldr	x0, [x0]
  40331c:	bl	401560 <free@plt>
  403320:	ldr	x0, [x19, #16]
  403324:	bl	4032c8 <cldr_plural_range_list_free>
  403328:	mov	x0, x19
  40332c:	ldr	x19, [sp, #16]
  403330:	ldp	x29, x30, [sp], #32
  403334:	b	401560 <free@plt>

0000000000403338 <cldr_plural_condition_free>:
  403338:	stp	x29, x30, [sp, #-32]!
  40333c:	mov	x29, sp
  403340:	str	x19, [sp, #16]
  403344:	mov	x19, x0
  403348:	ldr	w0, [x0]
  40334c:	cmp	w0, #0x1
  403350:	b.hi	403374 <cldr_plural_condition_free+0x3c>  // b.pmore
  403354:	ldr	x0, [x19, #8]
  403358:	bl	403338 <cldr_plural_condition_free>
  40335c:	ldr	x0, [x19, #16]
  403360:	bl	403338 <cldr_plural_condition_free>
  403364:	mov	x0, x19
  403368:	ldr	x19, [sp, #16]
  40336c:	ldp	x29, x30, [sp], #32
  403370:	b	401560 <free@plt>
  403374:	cmp	w0, #0x2
  403378:	b.ne	403364 <cldr_plural_condition_free+0x2c>  // b.any
  40337c:	ldr	x0, [x19, #8]
  403380:	bl	403308 <cldr_plural_relation_free>
  403384:	b	403364 <cldr_plural_condition_free+0x2c>

0000000000403388 <eval_condition>:
  403388:	stp	x29, x30, [sp, #-48]!
  40338c:	mov	x29, sp
  403390:	ldr	w1, [x0]
  403394:	stp	x19, x20, [sp, #16]
  403398:	mov	x19, x0
  40339c:	stp	x21, x22, [sp, #32]
  4033a0:	ldr	x0, [x0, #8]
  4033a4:	cbnz	w1, 403450 <eval_condition+0xc8>
  4033a8:	bl	403388 <eval_condition>
  4033ac:	ldr	x0, [x19, #16]
  4033b0:	bl	403388 <eval_condition>
  4033b4:	ldr	x20, [x19, #8]
  4033b8:	ldr	w0, [x20]
  4033bc:	cmp	w0, #0x4
  4033c0:	b.eq	4033d4 <eval_condition+0x4c>  // b.none
  4033c4:	ldr	x22, [x19, #16]
  4033c8:	ldr	w21, [x22]
  4033cc:	cmp	w21, #0x4
  4033d0:	b.ne	4033fc <eval_condition+0x74>  // b.any
  4033d4:	mov	x0, x20
  4033d8:	bl	403338 <cldr_plural_condition_free>
  4033dc:	ldr	x0, [x19, #16]
  4033e0:	bl	403338 <cldr_plural_condition_free>
  4033e4:	mov	w0, #0x4                   	// #4
  4033e8:	str	w0, [x19]
  4033ec:	ldp	x19, x20, [sp, #16]
  4033f0:	ldp	x21, x22, [sp, #32]
  4033f4:	ldp	x29, x30, [sp], #48
  4033f8:	ret
  4033fc:	cmp	w0, #0x3
  403400:	b.ne	403424 <eval_condition+0x9c>  // b.any
  403404:	mov	x0, x20
  403408:	cmp	w21, #0x3
  40340c:	b.ne	4034b0 <eval_condition+0x128>  // b.any
  403410:	bl	403338 <cldr_plural_condition_free>
  403414:	ldr	x0, [x19, #16]
  403418:	bl	403338 <cldr_plural_condition_free>
  40341c:	str	w21, [x19]
  403420:	b	4033ec <eval_condition+0x64>
  403424:	cmp	w21, #0x3
  403428:	b.ne	4033ec <eval_condition+0x64>  // b.any
  40342c:	mov	x0, x22
  403430:	bl	403338 <cldr_plural_condition_free>
  403434:	ldr	x0, [x19, #8]
  403438:	ldr	w1, [x0]
  40343c:	str	w1, [x19]
  403440:	ldp	x0, x1, [x0, #8]
  403444:	stp	x0, x1, [x19, #8]
  403448:	mov	x0, x20
  40344c:	b	4034cc <eval_condition+0x144>
  403450:	cmp	w1, #0x1
  403454:	b.ne	4034e4 <eval_condition+0x15c>  // b.any
  403458:	bl	403388 <eval_condition>
  40345c:	ldr	x0, [x19, #16]
  403460:	bl	403388 <eval_condition>
  403464:	ldr	x20, [x19, #8]
  403468:	ldr	w0, [x20]
  40346c:	cmp	w0, #0x3
  403470:	b.eq	403484 <eval_condition+0xfc>  // b.none
  403474:	ldr	x22, [x19, #16]
  403478:	ldr	w21, [x22]
  40347c:	cmp	w21, #0x3
  403480:	b.ne	40349c <eval_condition+0x114>  // b.any
  403484:	mov	x0, x20
  403488:	bl	403338 <cldr_plural_condition_free>
  40348c:	ldr	x0, [x19, #16]
  403490:	bl	403338 <cldr_plural_condition_free>
  403494:	mov	w0, #0x3                   	// #3
  403498:	b	4033e8 <eval_condition+0x60>
  40349c:	cmp	w0, #0x4
  4034a0:	b.ne	4034dc <eval_condition+0x154>  // b.any
  4034a4:	mov	x0, x20
  4034a8:	cmp	w21, #0x4
  4034ac:	b	40340c <eval_condition+0x84>
  4034b0:	bl	403338 <cldr_plural_condition_free>
  4034b4:	ldr	x0, [x19, #16]
  4034b8:	ldr	w1, [x0]
  4034bc:	str	w1, [x19]
  4034c0:	ldp	x0, x1, [x0, #8]
  4034c4:	stp	x0, x1, [x19, #8]
  4034c8:	mov	x0, x22
  4034cc:	ldp	x19, x20, [sp, #16]
  4034d0:	ldp	x21, x22, [sp, #32]
  4034d4:	ldp	x29, x30, [sp], #48
  4034d8:	b	401560 <free@plt>
  4034dc:	cmp	w21, #0x4
  4034e0:	b	403428 <eval_condition+0xa0>
  4034e4:	ldr	x4, [x0]
  4034e8:	ldr	w1, [x4]
  4034ec:	sub	w1, w1, #0x66
  4034f0:	cmp	w1, #0x11
  4034f4:	b.hi	40352c <eval_condition+0x1a4>  // b.pmore
  4034f8:	adrp	x2, 403000 <print_condition+0x1f0>
  4034fc:	add	x2, x2, #0xf3c
  403500:	ldrb	w1, [x2, w1, uxtw]
  403504:	adr	x2, 403510 <eval_condition+0x188>
  403508:	add	x1, x2, w1, sxtb #2
  40350c:	br	x1
  403510:	ldr	x5, [x0, #16]
  403514:	mov	x1, #0x0                   	// #0
  403518:	ldr	x7, [x5, #8]
  40351c:	cmp	x1, x7
  403520:	b.ne	403564 <eval_condition+0x1dc>  // b.any
  403524:	mov	w1, #0x69                  	// #105
  403528:	str	w1, [x4]
  40352c:	mov	w20, #0x2                   	// #2
  403530:	b	40354c <eval_condition+0x1c4>
  403534:	ldr	x4, [x0, #16]
  403538:	mov	x1, #0x0                   	// #0
  40353c:	ldr	x6, [x4, #8]
  403540:	cmp	x1, x6
  403544:	b.ne	4035c0 <eval_condition+0x238>  // b.any
  403548:	mov	w20, #0x3                   	// #3
  40354c:	sub	w1, w20, #0x3
  403550:	cmp	w1, #0x1
  403554:	b.hi	4033ec <eval_condition+0x64>  // b.pmore
  403558:	bl	403308 <cldr_plural_relation_free>
  40355c:	str	w20, [x19]
  403560:	b	4033ec <eval_condition+0x64>
  403564:	ldr	x2, [x5]
  403568:	ldr	x6, [x2, x1, lsl #3]
  40356c:	ldr	x2, [x6]
  403570:	ldr	w3, [x2]
  403574:	cmp	w3, #0x1
  403578:	b.ne	403598 <eval_condition+0x210>  // b.any
  40357c:	ldr	d0, [x2, #8]
  403580:	str	wzr, [x2]
  403584:	fcvtzs	w3, d0
  403588:	scvtf	d1, w3
  40358c:	fcmp	d0, d1
  403590:	cinc	w3, w3, ne  // ne = any
  403594:	str	w3, [x2, #8]
  403598:	ldr	x2, [x6, #8]
  40359c:	ldr	w3, [x2]
  4035a0:	cmp	w3, #0x1
  4035a4:	b.ne	4035b8 <eval_condition+0x230>  // b.any
  4035a8:	ldr	d0, [x2, #8]
  4035ac:	str	wzr, [x2]
  4035b0:	fcvtzs	w3, d0
  4035b4:	str	w3, [x2, #8]
  4035b8:	add	x1, x1, #0x1
  4035bc:	b	40351c <eval_condition+0x194>
  4035c0:	ldr	w3, [x0, #8]
  4035c4:	ldr	x2, [x4]
  4035c8:	ldr	x2, [x2, x1, lsl #3]
  4035cc:	cbnz	w3, 403634 <eval_condition+0x2ac>
  4035d0:	ldr	x3, [x2]
  4035d4:	ldr	w5, [x3]
  4035d8:	cbnz	w5, 403600 <eval_condition+0x278>
  4035dc:	ldr	w3, [x3, #8]
  4035e0:	cbnz	w3, 403614 <eval_condition+0x28c>
  4035e4:	ldr	x2, [x2, #8]
  4035e8:	ldr	w3, [x2]
  4035ec:	cbnz	w3, 40361c <eval_condition+0x294>
  4035f0:	ldr	w2, [x2, #8]
  4035f4:	cbnz	w2, 403614 <eval_condition+0x28c>
  4035f8:	add	x1, x1, #0x1
  4035fc:	b	403540 <eval_condition+0x1b8>
  403600:	cmp	w5, #0x1
  403604:	b.ne	403614 <eval_condition+0x28c>  // b.any
  403608:	ldr	d0, [x3, #8]
  40360c:	fcmp	d0, #0.0
  403610:	b.eq	4035e4 <eval_condition+0x25c>  // b.none
  403614:	mov	w20, #0x4                   	// #4
  403618:	b	40354c <eval_condition+0x1c4>
  40361c:	cmp	w3, #0x1
  403620:	b.ne	403614 <eval_condition+0x28c>  // b.any
  403624:	ldr	d0, [x2, #8]
  403628:	fcmp	d0, #0.0
  40362c:	b.eq	4035f8 <eval_condition+0x270>  // b.none
  403630:	b	403614 <eval_condition+0x28c>
  403634:	cmp	w3, #0x1
  403638:	b.ne	4035f8 <eval_condition+0x270>  // b.any
  40363c:	ldr	x3, [x2]
  403640:	ldr	w5, [x3]
  403644:	cbnz	w5, 403668 <eval_condition+0x2e0>
  403648:	ldr	w3, [x3, #8]
  40364c:	cbz	w3, 403614 <eval_condition+0x28c>
  403650:	ldr	x2, [x2, #8]
  403654:	ldr	w3, [x2]
  403658:	cbnz	w3, 403680 <eval_condition+0x2f8>
  40365c:	ldr	w2, [x2, #8]
  403660:	cbnz	w2, 4035f8 <eval_condition+0x270>
  403664:	b	403614 <eval_condition+0x28c>
  403668:	cmp	w5, #0x1
  40366c:	b.ne	403650 <eval_condition+0x2c8>  // b.any
  403670:	ldr	d0, [x3, #8]
  403674:	fcmp	d0, #0.0
  403678:	b.ne	403650 <eval_condition+0x2c8>  // b.any
  40367c:	b	403614 <eval_condition+0x28c>
  403680:	cmp	w3, #0x1
  403684:	b.ne	4035f8 <eval_condition+0x270>  // b.any
  403688:	ldr	d0, [x2, #8]
  40368c:	fcmp	d0, #0.0
  403690:	b.ne	4035f8 <eval_condition+0x270>  // b.any
  403694:	b	403614 <eval_condition+0x28c>

0000000000403698 <cldr_plural_rule_list_free>:
  403698:	stp	x29, x30, [sp, #-32]!
  40369c:	mov	x29, sp
  4036a0:	stp	x19, x20, [sp, #16]
  4036a4:	mov	x19, x0
  4036a8:	ldp	x0, x1, [x19]
  4036ac:	sub	x2, x1, #0x1
  4036b0:	str	x2, [x19, #8]
  4036b4:	cbnz	x1, 4036cc <cldr_plural_rule_list_free+0x34>
  4036b8:	bl	401560 <free@plt>
  4036bc:	mov	x0, x19
  4036c0:	ldp	x19, x20, [sp, #16]
  4036c4:	ldp	x29, x30, [sp], #32
  4036c8:	b	401560 <free@plt>
  4036cc:	ldr	x20, [x0, x2, lsl #3]
  4036d0:	ldr	x0, [x20]
  4036d4:	bl	401560 <free@plt>
  4036d8:	ldr	x0, [x20, #8]
  4036dc:	bl	403338 <cldr_plural_condition_free>
  4036e0:	mov	x0, x20
  4036e4:	bl	401560 <free@plt>
  4036e8:	b	4036a8 <cldr_plural_rule_list_free+0x10>

00000000004036ec <cldr_plural_parse>:
  4036ec:	stp	x29, x30, [sp, #-64]!
  4036f0:	mov	x29, sp
  4036f4:	str	x19, [sp, #16]
  4036f8:	mov	x19, x0
  4036fc:	str	x0, [sp, #40]
  403700:	stp	xzr, xzr, [sp, #48]
  403704:	bl	401300 <strlen@plt>
  403708:	add	x19, x19, x0
  40370c:	mov	x0, #0x18                  	// #24
  403710:	str	x19, [sp, #48]
  403714:	bl	401450 <xmalloc@plt>
  403718:	str	x0, [sp, #56]
  40371c:	stp	xzr, xzr, [x0]
  403720:	str	xzr, [x0, #16]
  403724:	add	x0, sp, #0x28
  403728:	bl	402024 <yyparse>
  40372c:	cmp	w0, #0x0
  403730:	ldr	x0, [sp, #56]
  403734:	ldr	x19, [sp, #16]
  403738:	csel	x0, x0, xzr, eq  // eq = none
  40373c:	ldp	x29, x30, [sp], #64
  403740:	ret

0000000000403744 <cldr_plural_rule_list_print>:
  403744:	stp	x29, x30, [sp, #-80]!
  403748:	mov	x29, sp
  40374c:	stp	x19, x20, [sp, #16]
  403750:	mov	x19, x0
  403754:	mov	x20, x1
  403758:	stp	x21, x22, [sp, #32]
  40375c:	mov	x21, #0x0                   	// #0
  403760:	stp	x23, x24, [sp, #48]
  403764:	str	x25, [sp, #64]
  403768:	ldr	x8, [x19, #8]
  40376c:	cmp	x8, x21
  403770:	b.hi	4037cc <cldr_plural_rule_list_print+0x88>  // b.pmore
  403774:	mov	w21, #0x0                   	// #0
  403778:	mov	x7, #0x0                   	// #0
  40377c:	cmp	x8, x7
  403780:	b.ne	4037e4 <cldr_plural_rule_list_print+0xa0>  // b.any
  403784:	cmp	w21, #0x0
  403788:	b.gt	403818 <cldr_plural_rule_list_print+0xd4>
  40378c:	ldr	x2, [x19, #8]
  403790:	mov	x21, #0x1                   	// #1
  403794:	mov	x0, #0x0                   	// #0
  403798:	cmp	x2, x0
  40379c:	b.ne	4038e8 <cldr_plural_rule_list_print+0x1a4>  // b.any
  4037a0:	cmp	x21, #0x1
  4037a4:	b.ne	403910 <cldr_plural_rule_list_print+0x1cc>  // b.any
  4037a8:	adrp	x0, 403000 <print_condition+0x1f0>
  4037ac:	mov	x1, x20
  4037b0:	add	x0, x0, #0xef6
  4037b4:	ldp	x19, x20, [sp, #16]
  4037b8:	ldp	x21, x22, [sp, #32]
  4037bc:	ldp	x23, x24, [sp, #48]
  4037c0:	ldr	x25, [sp, #64]
  4037c4:	ldp	x29, x30, [sp], #80
  4037c8:	b	401310 <fputs@plt>
  4037cc:	ldr	x0, [x19]
  4037d0:	ldr	x0, [x0, x21, lsl #3]
  4037d4:	add	x21, x21, #0x1
  4037d8:	ldr	x0, [x0, #8]
  4037dc:	bl	403388 <eval_condition>
  4037e0:	b	403768 <cldr_plural_rule_list_print+0x24>
  4037e4:	ldr	x0, [x19]
  4037e8:	ldr	x0, [x0, x7, lsl #3]
  4037ec:	ldr	x1, [x0, #8]
  4037f0:	mov	x0, x1
  4037f4:	bl	402a64 <find_largest_modulus>
  4037f8:	mov	w6, w0
  4037fc:	mov	x0, x1
  403800:	bl	402ac8 <find_largest_number>
  403804:	cmp	w6, w0
  403808:	ccmp	w21, w6, #0x0, ge  // ge = tcont
  40380c:	add	x7, x7, #0x1
  403810:	csel	w21, w6, w21, lt  // lt = tstop
  403814:	b	40377c <cldr_plural_rule_list_print+0x38>
  403818:	sxtw	x22, w21
  40381c:	mov	x0, x22
  403820:	bl	401450 <xmalloc@plt>
  403824:	mov	x2, x22
  403828:	mov	x23, x0
  40382c:	mov	w1, #0x0                   	// #0
  403830:	bl	401440 <memset@plt>
  403834:	ldr	x7, [x19, #8]
  403838:	mov	x22, #0x0                   	// #0
  40383c:	mov	w8, #0x1                   	// #1
  403840:	cmp	x7, x22
  403844:	b.eq	4038a4 <cldr_plural_rule_list_print+0x160>  // b.none
  403848:	ldr	x0, [x19]
  40384c:	mov	x6, #0x0                   	// #0
  403850:	ldr	x0, [x0, x22, lsl #3]
  403854:	ldr	x9, [x0, #8]
  403858:	add	w1, w6, #0x1
  40385c:	mov	x0, x9
  403860:	bl	402b80 <apply_condition>
  403864:	tst	w0, #0xff
  403868:	b.eq	403870 <cldr_plural_rule_list_print+0x12c>  // b.none
  40386c:	strb	w8, [x23, x6]
  403870:	add	x6, x6, #0x1
  403874:	cmp	w21, w6
  403878:	b.gt	403858 <cldr_plural_rule_list_print+0x114>
  40387c:	mov	x1, #0x0                   	// #0
  403880:	ldrb	w2, [x23, x1]
  403884:	mov	w0, w1
  403888:	cbz	w2, 40389c <cldr_plural_rule_list_print+0x158>
  40388c:	add	w0, w1, #0x1
  403890:	add	x1, x1, #0x1
  403894:	cmp	w21, w1
  403898:	b.gt	403880 <cldr_plural_rule_list_print+0x13c>
  40389c:	cmp	w21, w0
  4038a0:	b.ne	4038e0 <cldr_plural_rule_list_print+0x19c>  // b.any
  4038a4:	mov	x0, x23
  4038a8:	bl	401560 <free@plt>
  4038ac:	ldr	x0, [x19, #8]
  4038b0:	cmp	x0, x22
  4038b4:	b.ls	40378c <cldr_plural_rule_list_print+0x48>  // b.plast
  4038b8:	ldr	x1, [x19]
  4038bc:	sub	x0, x0, #0x1
  4038c0:	ldr	x21, [x1, x0, lsl #3]
  4038c4:	str	x0, [x19, #8]
  4038c8:	ldr	x0, [x21]
  4038cc:	bl	401560 <free@plt>
  4038d0:	ldr	x0, [x21, #8]
  4038d4:	bl	403338 <cldr_plural_condition_free>
  4038d8:	mov	x0, x21
  4038dc:	b	4038a8 <cldr_plural_rule_list_print+0x164>
  4038e0:	add	x22, x22, #0x1
  4038e4:	b	403840 <cldr_plural_rule_list_print+0xfc>
  4038e8:	ldr	x1, [x19]
  4038ec:	ldr	x1, [x1, x0, lsl #3]
  4038f0:	ldr	x1, [x1, #8]
  4038f4:	ldr	w1, [x1]
  4038f8:	sub	w1, w1, #0x3
  4038fc:	cmp	w1, #0x1
  403900:	b.ls	403908 <cldr_plural_rule_list_print+0x1c4>  // b.plast
  403904:	add	x21, x21, #0x1
  403908:	add	x0, x0, #0x1
  40390c:	b	403798 <cldr_plural_rule_list_print+0x54>
  403910:	cmp	x21, #0x2
  403914:	b.ne	403970 <cldr_plural_rule_list_print+0x22c>  // b.any
  403918:	ldr	x3, [x19]
  40391c:	mov	x1, #0x0                   	// #0
  403920:	ldr	x2, [x3, x1, lsl #3]
  403924:	cmp	x0, x1
  403928:	ldr	x22, [x2, #8]
  40392c:	b.ne	4039d0 <cldr_plural_rule_list_print+0x28c>  // b.any
  403930:	mov	x1, x20
  403934:	mov	x0, x22
  403938:	bl	402d48 <print_condition_negation>
  40393c:	tst	w0, #0xff
  403940:	b.ne	403958 <cldr_plural_rule_list_print+0x214>  // b.any
  403944:	mov	x1, x20
  403948:	mov	x0, x22
  40394c:	bl	402c9c <print_condition_greater>
  403950:	tst	w0, #0xff
  403954:	b.eq	403970 <cldr_plural_rule_list_print+0x22c>  // b.none
  403958:	ldp	x19, x20, [sp, #16]
  40395c:	ldp	x21, x22, [sp, #32]
  403960:	ldp	x23, x24, [sp, #48]
  403964:	ldr	x25, [sp, #64]
  403968:	ldp	x29, x30, [sp], #80
  40396c:	ret
  403970:	adrp	x24, 403000 <print_condition+0x1f0>
  403974:	add	x24, x24, #0xf24
  403978:	mov	x22, #0x0                   	// #0
  40397c:	mov	x23, #0x0                   	// #0
  403980:	mov	x2, x21
  403984:	mov	x0, x20
  403988:	adrp	x1, 403000 <print_condition+0x1f0>
  40398c:	add	x1, x1, #0xf0d
  403990:	bl	401600 <fprintf@plt>
  403994:	ldr	x0, [x19, #8]
  403998:	cmp	x0, x23
  40399c:	b.hi	4039e8 <cldr_plural_rule_list_print+0x2a4>  // b.pmore
  4039a0:	cmp	x0, #0x1
  4039a4:	b.ls	4039c0 <cldr_plural_rule_list_print+0x27c>  // b.plast
  4039a8:	adrp	x1, 403000 <print_condition+0x1f0>
  4039ac:	add	x3, x22, #0x1
  4039b0:	mov	x2, x22
  4039b4:	add	x1, x1, #0xf2e
  4039b8:	mov	x0, x20
  4039bc:	bl	401600 <fprintf@plt>
  4039c0:	adrp	x0, 403000 <print_condition+0x1f0>
  4039c4:	mov	x1, x20
  4039c8:	add	x0, x0, #0xeb0
  4039cc:	b	4037b4 <cldr_plural_rule_list_print+0x70>
  4039d0:	ldr	w2, [x22]
  4039d4:	sub	w2, w2, #0x3
  4039d8:	cmp	w2, #0x1
  4039dc:	b.hi	403930 <cldr_plural_rule_list_print+0x1ec>  // b.pmore
  4039e0:	add	x1, x1, #0x1
  4039e4:	b	403920 <cldr_plural_rule_list_print+0x1dc>
  4039e8:	ldr	x0, [x19]
  4039ec:	cmp	x21, #0x2
  4039f0:	cset	w2, eq  // eq = none
  4039f4:	mov	x3, x20
  4039f8:	mov	w1, #0x4                   	// #4
  4039fc:	add	x25, x23, #0x1
  403a00:	ldr	x0, [x0, x23, lsl #3]
  403a04:	ldr	x0, [x0, #8]
  403a08:	bl	402e10 <print_condition>
  403a0c:	ands	w0, w0, #0xff
  403a10:	b.eq	403a7c <cldr_plural_rule_list_print+0x338>  // b.none
  403a14:	ldr	x1, [x19, #8]
  403a18:	cmp	x1, #0x1
  403a1c:	b.ls	403a7c <cldr_plural_rule_list_print+0x338>  // b.plast
  403a20:	mov	x2, x25
  403a24:	mov	w3, #0x0                   	// #0
  403a28:	b	403a4c <cldr_plural_rule_list_print+0x308>
  403a2c:	ldr	x4, [x19]
  403a30:	ldr	x4, [x4, x2, lsl #3]
  403a34:	add	x2, x2, #0x1
  403a38:	ldr	x4, [x4, #8]
  403a3c:	ldr	w4, [x4]
  403a40:	sub	w4, w4, #0x3
  403a44:	cmp	w4, #0x2
  403a48:	csel	w3, w3, w0, cc  // cc = lo, ul, last
  403a4c:	cmp	x1, x2
  403a50:	b.hi	403a2c <cldr_plural_rule_list_print+0x2e8>  // b.pmore
  403a54:	sub	x1, x1, #0x1
  403a58:	cmp	x1, x23
  403a5c:	b.ls	403a7c <cldr_plural_rule_list_print+0x338>  // b.plast
  403a60:	cbz	w3, 403a7c <cldr_plural_rule_list_print+0x338>
  403a64:	add	x23, x22, #0x1
  403a68:	mov	x2, x22
  403a6c:	mov	x22, x23
  403a70:	mov	x1, x24
  403a74:	mov	x0, x20
  403a78:	bl	401600 <fprintf@plt>
  403a7c:	mov	x23, x25
  403a80:	b	403994 <cldr_plural_rule_list_print+0x250>
  403a84:	nop

0000000000403a88 <__libc_csu_init>:
  403a88:	stp	x29, x30, [sp, #-64]!
  403a8c:	mov	x29, sp
  403a90:	stp	x19, x20, [sp, #16]
  403a94:	adrp	x20, 414000 <__FRAME_END__+0xf564>
  403a98:	add	x20, x20, #0xd80
  403a9c:	stp	x21, x22, [sp, #32]
  403aa0:	adrp	x21, 414000 <__FRAME_END__+0xf564>
  403aa4:	add	x21, x21, #0xd78
  403aa8:	sub	x20, x20, x21
  403aac:	mov	w22, w0
  403ab0:	stp	x23, x24, [sp, #48]
  403ab4:	mov	x23, x1
  403ab8:	mov	x24, x2
  403abc:	bl	4012b0 <_init>
  403ac0:	cmp	xzr, x20, asr #3
  403ac4:	b.eq	403af0 <__libc_csu_init+0x68>  // b.none
  403ac8:	asr	x20, x20, #3
  403acc:	mov	x19, #0x0                   	// #0
  403ad0:	ldr	x3, [x21, x19, lsl #3]
  403ad4:	mov	x2, x24
  403ad8:	add	x19, x19, #0x1
  403adc:	mov	x1, x23
  403ae0:	mov	w0, w22
  403ae4:	blr	x3
  403ae8:	cmp	x20, x19
  403aec:	b.ne	403ad0 <__libc_csu_init+0x48>  // b.any
  403af0:	ldp	x19, x20, [sp, #16]
  403af4:	ldp	x21, x22, [sp, #32]
  403af8:	ldp	x23, x24, [sp, #48]
  403afc:	ldp	x29, x30, [sp], #64
  403b00:	ret
  403b04:	nop

0000000000403b08 <__libc_csu_fini>:
  403b08:	ret
  403b0c:	nop

0000000000403b10 <atexit>:
  403b10:	adrp	x2, 415000 <memcpy@GLIBC_2.17>
  403b14:	mov	x1, #0x0                   	// #0
  403b18:	ldr	x2, [x2, #416]
  403b1c:	b	401380 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000403b20 <_fini>:
  403b20:	stp	x29, x30, [sp, #-16]!
  403b24:	mov	x29, sp
  403b28:	ldp	x29, x30, [sp], #16
  403b2c:	ret
