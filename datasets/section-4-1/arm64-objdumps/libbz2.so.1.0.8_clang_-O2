
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.so.1.0.8_clang_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000013d0 <.init>:
    13d0:	stp	x29, x30, [sp, #-16]!
    13d4:	mov	x29, sp
    13d8:	bl	1630 <ferror@plt+0x10>
    13dc:	ldp	x29, x30, [sp], #16
    13e0:	ret

Disassembly of section .plt:

00000000000013f0 <memcpy@plt-0x20>:
    13f0:	stp	x16, x30, [sp, #-16]!
    13f4:	adrp	x16, 1e000 <BZ2_bzerror@@Base+0x1092c>
    13f8:	ldr	x17, [x16, #4088]
    13fc:	add	x16, x16, #0xff8
    1400:	br	x17
    1404:	nop
    1408:	nop
    140c:	nop

0000000000001410 <memcpy@plt>:
    1410:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1414:	ldr	x17, [x16]
    1418:	add	x16, x16, #0x0
    141c:	br	x17

0000000000001420 <strlen@plt>:
    1420:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1424:	ldr	x17, [x16, #8]
    1428:	add	x16, x16, #0x8
    142c:	br	x17

0000000000001430 <BZ2_hbMakeCodeLengths@plt>:
    1430:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1434:	ldr	x17, [x16, #16]
    1438:	add	x16, x16, #0x10
    143c:	br	x17

0000000000001440 <exit@plt>:
    1440:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1444:	ldr	x17, [x16, #24]
    1448:	add	x16, x16, #0x18
    144c:	br	x17

0000000000001450 <__cxa_finalize@plt>:
    1450:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1454:	ldr	x17, [x16, #32]
    1458:	add	x16, x16, #0x20
    145c:	br	x17

0000000000001460 <fputc@plt>:
    1460:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1464:	ldr	x17, [x16, #40]
    1468:	add	x16, x16, #0x28
    146c:	br	x17

0000000000001470 <fclose@plt>:
    1470:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1474:	ldr	x17, [x16, #48]
    1478:	add	x16, x16, #0x30
    147c:	br	x17

0000000000001480 <malloc@plt>:
    1480:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1484:	ldr	x17, [x16, #56]
    1488:	add	x16, x16, #0x38
    148c:	br	x17

0000000000001490 <fgetc@plt>:
    1490:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1494:	ldr	x17, [x16, #64]
    1498:	add	x16, x16, #0x40
    149c:	br	x17

00000000000014a0 <memset@plt>:
    14a0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    14a4:	ldr	x17, [x16, #72]
    14a8:	add	x16, x16, #0x48
    14ac:	br	x17

00000000000014b0 <fdopen@plt>:
    14b0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    14b4:	ldr	x17, [x16, #80]
    14b8:	add	x16, x16, #0x50
    14bc:	br	x17

00000000000014c0 <BZ2_bzCompressInit@plt>:
    14c0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    14c4:	ldr	x17, [x16, #88]
    14c8:	add	x16, x16, #0x58
    14cc:	br	x17

00000000000014d0 <BZ2_hbCreateDecodeTables@plt>:
    14d0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    14d4:	ldr	x17, [x16, #96]
    14d8:	add	x16, x16, #0x60
    14dc:	br	x17

00000000000014e0 <__gmon_start__@plt>:
    14e0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    14e4:	ldr	x17, [x16, #104]
    14e8:	add	x16, x16, #0x68
    14ec:	br	x17

00000000000014f0 <BZ2_decompress@plt>:
    14f0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    14f4:	ldr	x17, [x16, #112]
    14f8:	add	x16, x16, #0x70
    14fc:	br	x17

0000000000001500 <BZ2_bzWrite@plt>:
    1500:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1504:	ldr	x17, [x16, #120]
    1508:	add	x16, x16, #0x78
    150c:	br	x17

0000000000001510 <__ctype_b_loc@plt>:
    1510:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1514:	ldr	x17, [x16, #128]
    1518:	add	x16, x16, #0x80
    151c:	br	x17

0000000000001520 <BZ2_compressBlock@plt>:
    1520:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1524:	ldr	x17, [x16, #136]
    1528:	add	x16, x16, #0x88
    152c:	br	x17

0000000000001530 <fread@plt>:
    1530:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1534:	ldr	x17, [x16, #144]
    1538:	add	x16, x16, #0x90
    153c:	br	x17

0000000000001540 <free@plt>:
    1540:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1544:	ldr	x17, [x16, #152]
    1548:	add	x16, x16, #0x98
    154c:	br	x17

0000000000001550 <ungetc@plt>:
    1550:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1554:	ldr	x17, [x16, #160]
    1558:	add	x16, x16, #0xa0
    155c:	br	x17

0000000000001560 <BZ2_bzDecompress@plt>:
    1560:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1564:	ldr	x17, [x16, #168]
    1568:	add	x16, x16, #0xa8
    156c:	br	x17

0000000000001570 <BZ2_blockSort@plt>:
    1570:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1574:	ldr	x17, [x16, #176]
    1578:	add	x16, x16, #0xb0
    157c:	br	x17

0000000000001580 <BZ2_bzWriteClose64@plt>:
    1580:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1584:	ldr	x17, [x16, #184]
    1588:	add	x16, x16, #0xb8
    158c:	br	x17

0000000000001590 <BZ2_indexIntoF@plt>:
    1590:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1594:	ldr	x17, [x16, #192]
    1598:	add	x16, x16, #0xc0
    159c:	br	x17

00000000000015a0 <BZ2_hbAssignCodes@plt>:
    15a0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    15a4:	ldr	x17, [x16, #200]
    15a8:	add	x16, x16, #0xc8
    15ac:	br	x17

00000000000015b0 <fwrite@plt>:
    15b0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    15b4:	ldr	x17, [x16, #208]
    15b8:	add	x16, x16, #0xd0
    15bc:	br	x17

00000000000015c0 <fflush@plt>:
    15c0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    15c4:	ldr	x17, [x16, #216]
    15c8:	add	x16, x16, #0xd8
    15cc:	br	x17

00000000000015d0 <fopen64@plt>:
    15d0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    15d4:	ldr	x17, [x16, #224]
    15d8:	add	x16, x16, #0xe0
    15dc:	br	x17

00000000000015e0 <BZ2_bzReadOpen@plt>:
    15e0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    15e4:	ldr	x17, [x16, #232]
    15e8:	add	x16, x16, #0xe8
    15ec:	br	x17

00000000000015f0 <BZ2_bzRead@plt>:
    15f0:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    15f4:	ldr	x17, [x16, #240]
    15f8:	add	x16, x16, #0xf0
    15fc:	br	x17

0000000000001600 <BZ2_bz__AssertH__fail@plt>:
    1600:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1604:	ldr	x17, [x16, #248]
    1608:	add	x16, x16, #0xf8
    160c:	br	x17

0000000000001610 <fprintf@plt>:
    1610:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1614:	ldr	x17, [x16, #256]
    1618:	add	x16, x16, #0x100
    161c:	br	x17

0000000000001620 <ferror@plt>:
    1620:	adrp	x16, 1f000 <memcpy@GLIBC_2.17>
    1624:	ldr	x17, [x16, #264]
    1628:	add	x16, x16, #0x108
    162c:	br	x17

Disassembly of section .text:

0000000000001630 <BZ2_blockSort@@Base-0xd4>:
    1630:	adrp	x0, 1e000 <BZ2_bzerror@@Base+0x1092c>
    1634:	ldr	x0, [x0, #4056]
    1638:	cbz	x0, 1640 <ferror@plt+0x20>
    163c:	b	14e0 <__gmon_start__@plt>
    1640:	ret
    1644:	nop
    1648:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x1192c>
    164c:	add	x0, x0, #0xd18
    1650:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x1192c>
    1654:	add	x1, x1, #0xd18
    1658:	cmp	x1, x0
    165c:	b.eq	1674 <ferror@plt+0x54>  // b.none
    1660:	adrp	x1, 1e000 <BZ2_bzerror@@Base+0x1092c>
    1664:	ldr	x1, [x1, #4000]
    1668:	cbz	x1, 1674 <ferror@plt+0x54>
    166c:	mov	x16, x1
    1670:	br	x16
    1674:	ret
    1678:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x1192c>
    167c:	add	x0, x0, #0xd18
    1680:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x1192c>
    1684:	add	x1, x1, #0xd18
    1688:	sub	x1, x1, x0
    168c:	lsr	x2, x1, #63
    1690:	add	x1, x2, x1, asr #3
    1694:	cmp	xzr, x1, asr #1
    1698:	asr	x1, x1, #1
    169c:	b.eq	16b4 <ferror@plt+0x94>  // b.none
    16a0:	adrp	x2, 1e000 <BZ2_bzerror@@Base+0x1092c>
    16a4:	ldr	x2, [x2, #4064]
    16a8:	cbz	x2, 16b4 <ferror@plt+0x94>
    16ac:	mov	x16, x2
    16b0:	br	x16
    16b4:	ret
    16b8:	stp	x29, x30, [sp, #-32]!
    16bc:	mov	x29, sp
    16c0:	str	x19, [sp, #16]
    16c4:	adrp	x19, 1f000 <BZ2_bzerror@@Base+0x1192c>
    16c8:	ldrb	w0, [x19, #3352]
    16cc:	cbnz	w0, 16f4 <ferror@plt+0xd4>
    16d0:	adrp	x0, 1e000 <BZ2_bzerror@@Base+0x1092c>
    16d4:	ldr	x0, [x0, #4008]
    16d8:	cbz	x0, 16e8 <ferror@plt+0xc8>
    16dc:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x1192c>
    16e0:	ldr	x0, [x0, #272]
    16e4:	bl	1450 <__cxa_finalize@plt>
    16e8:	bl	1648 <ferror@plt+0x28>
    16ec:	mov	w0, #0x1                   	// #1
    16f0:	strb	w0, [x19, #3352]
    16f4:	ldr	x19, [sp, #16]
    16f8:	ldp	x29, x30, [sp], #32
    16fc:	ret
    1700:	b	1678 <ferror@plt+0x58>

0000000000001704 <BZ2_blockSort@@Base>:
    1704:	stp	x29, x30, [sp, #-96]!
    1708:	stp	x28, x27, [sp, #16]
    170c:	stp	x26, x25, [sp, #32]
    1710:	stp	x24, x23, [sp, #48]
    1714:	stp	x22, x21, [sp, #64]
    1718:	stp	x20, x19, [sp, #80]
    171c:	mov	x29, sp
    1720:	sub	sp, sp, #0x1, lsl #12
    1724:	sub	sp, sp, #0x2b0
    1728:	ldrsw	x9, [x0, #108]
    172c:	ldr	x19, [x0, #56]
    1730:	ldr	x21, [x0, #40]
    1734:	ldr	w26, [x0, #656]
    1738:	mov	w8, #0x2710                	// #10000
    173c:	mov	x20, x0
    1740:	cmp	w9, w8
    1744:	and	x27, x9, #0xffffffff
    1748:	b.lt	272c <BZ2_blockSort@@Base+0x1028>  // b.tstop
    174c:	ldr	w8, [x20, #88]
    1750:	str	x9, [sp, #16]
    1754:	add	w9, w27, #0x22
    1758:	add	w10, w27, #0x23
    175c:	tst	w9, #0x1
    1760:	csel	w9, w9, w10, eq  // eq = none
    1764:	cmp	w8, #0x1
    1768:	csinc	w8, w8, wzr, gt
    176c:	mov	w11, #0x64                  	// #100
    1770:	cmp	w8, #0x64
    1774:	mov	w10, #0x5556                	// #21846
    1778:	csel	w8, w8, w11, lt  // lt = tstop
    177c:	ldr	x24, [x20, #64]
    1780:	movk	w10, #0x5555, lsl #16
    1784:	sub	w8, w8, #0x1
    1788:	smull	x8, w8, w10
    178c:	str	x20, [sp]
    1790:	sxtw	x20, w9
    1794:	lsr	x9, x8, #63
    1798:	lsr	x8, x8, #32
    179c:	add	w8, w8, w9
    17a0:	add	x23, x24, x20
    17a4:	cmp	w26, #0x4
    17a8:	mul	w8, w8, w27
    17ac:	str	w8, [sp, #12]
    17b0:	str	w8, [sp, #236]
    17b4:	b.ge	2800 <BZ2_blockSort@@Base+0x10fc>  // b.tcont
    17b8:	mov	w2, #0x40004               	// #262148
    17bc:	mov	x0, x21
    17c0:	mov	w1, wzr
    17c4:	add	x22, sp, #0x8f0
    17c8:	bl	14a0 <memset@plt>
    17cc:	ldrb	w10, [x24]
    17d0:	sub	w12, w27, #0x4
    17d4:	sub	w13, w27, #0x3
    17d8:	sub	w14, w27, #0x2
    17dc:	sub	w9, w27, #0x1
    17e0:	add	x15, x20, w12, sxtw #1
    17e4:	add	x16, x20, w13, sxtw #1
    17e8:	add	x17, x20, w14, sxtw #1
    17ec:	mov	x8, xzr
    17f0:	str	w9, [sp, #36]
    17f4:	sub	w9, w27, #0x1
    17f8:	add	x11, x24, w12, sxtw
    17fc:	add	x12, x24, w13, sxtw
    1800:	add	x13, x24, w14, sxtw
    1804:	add	x14, x24, x15
    1808:	add	x15, x24, x16
    180c:	lsl	w10, w10, #8
    1810:	add	x16, x24, x17
    1814:	add	w17, w9, w8
    1818:	strh	wzr, [x23, w17, uxtw #1]
    181c:	ldrb	w17, [x24, x17]
    1820:	lsl	x0, x8, #1
    1824:	lsl	w17, w17, #8
    1828:	orr	w10, w17, w10, asr #8
    182c:	sbfiz	x17, x10, #2, #32
    1830:	ldr	w18, [x21, x17]
    1834:	add	w18, w18, #0x1
    1838:	str	w18, [x21, x17]
    183c:	strh	wzr, [x16, x0]
    1840:	ldrb	w17, [x13, x8]
    1844:	lsl	w17, w17, #8
    1848:	orr	w10, w17, w10, asr #8
    184c:	sbfiz	x17, x10, #2, #32
    1850:	ldr	w18, [x21, x17]
    1854:	add	w18, w18, #0x1
    1858:	str	w18, [x21, x17]
    185c:	strh	wzr, [x15, x0]
    1860:	ldrb	w17, [x12, x8]
    1864:	lsl	w17, w17, #8
    1868:	orr	w10, w17, w10, asr #8
    186c:	sbfiz	x17, x10, #2, #32
    1870:	ldr	w18, [x21, x17]
    1874:	add	w18, w18, #0x1
    1878:	str	w18, [x21, x17]
    187c:	strh	wzr, [x14, x0]
    1880:	ldrb	w17, [x11, x8]
    1884:	sub	x8, x8, #0x4
    1888:	add	w0, w27, w8
    188c:	add	w0, w0, #0x3
    1890:	lsl	w17, w17, #8
    1894:	orr	w10, w17, w10, asr #8
    1898:	sbfiz	x17, x10, #2, #32
    189c:	ldr	w18, [x21, x17]
    18a0:	cmp	w0, #0x6
    18a4:	add	w18, w18, #0x1
    18a8:	str	w18, [x21, x17]
    18ac:	b.gt	1814 <BZ2_blockSort@@Base+0x110>
    18b0:	ldr	x16, [sp, #16]
    18b4:	add	w9, w27, w8
    18b8:	add	w9, w9, #0x3
    18bc:	cmp	w9, #0x4
    18c0:	b.lt	1900 <BZ2_blockSort@@Base+0x1fc>  // b.tstop
    18c4:	sub	w9, w16, #0x1
    18c8:	add	x8, x9, x8
    18cc:	and	x8, x8, #0xffffffff
    18d0:	add	x9, x24, x20
    18d4:	strh	wzr, [x9, x8, lsl #1]
    18d8:	ldrb	w11, [x24, x8]
    18dc:	cmp	x8, #0x0
    18e0:	sub	x8, x8, #0x1
    18e4:	lsl	w11, w11, #8
    18e8:	orr	w10, w11, w10, asr #8
    18ec:	sbfiz	x11, x10, #2, #32
    18f0:	ldr	w12, [x21, x11]
    18f4:	add	w12, w12, #0x1
    18f8:	str	w12, [x21, x11]
    18fc:	b.gt	18d4 <BZ2_blockSort@@Base+0x1d0>
    1900:	add	x9, x20, x16, lsl #1
    1904:	add	x9, x24, x9
    1908:	add	x8, x24, x16
    190c:	add	x14, x9, #0x44
    1910:	add	x13, x8, #0x22
    1914:	cmp	x8, x14
    1918:	add	x12, x24, #0x22
    191c:	cset	w11, cc  // cc = lo, ul, last
    1920:	cmp	x9, x13
    1924:	cset	w15, cc  // cc = lo, ul, last
    1928:	cmp	x8, x12
    192c:	and	w15, w11, w15
    1930:	cset	w11, cc  // cc = lo, ul, last
    1934:	cmp	x24, x13
    1938:	cset	w13, cc  // cc = lo, ul, last
    193c:	cmp	x9, x12
    1940:	cset	w12, cc  // cc = lo, ul, last
    1944:	cmp	x24, x14
    1948:	mov	x10, xzr
    194c:	cset	w14, cc  // cc = lo, ul, last
    1950:	tbnz	w15, #0, 19b8 <BZ2_blockSort@@Base+0x2b4>
    1954:	and	w11, w11, w13
    1958:	tbnz	w11, #0, 19b8 <BZ2_blockSort@@Base+0x2b4>
    195c:	and	w11, w12, w14
    1960:	cbnz	w11, 19b8 <BZ2_blockSort@@Base+0x2b4>
    1964:	ldr	x10, [x24]
    1968:	lsl	x11, x16, #1
    196c:	movi	v0.2d, #0x0
    1970:	str	x10, [x24, x16]
    1974:	str	q0, [x23, x11]
    1978:	ldr	x10, [x24, #8]
    197c:	add	x11, x16, #0x8
    1980:	str	x10, [x24, x11]
    1984:	lsl	x10, x11, #1
    1988:	str	q0, [x23, x10]
    198c:	ldr	x10, [x24, #16]
    1990:	add	x11, x16, #0x10
    1994:	str	x10, [x24, x11]
    1998:	lsl	x10, x11, #1
    199c:	str	q0, [x23, x10]
    19a0:	ldr	x10, [x24, #24]
    19a4:	add	x11, x16, #0x18
    19a8:	str	x10, [x24, x11]
    19ac:	lsl	x10, x11, #1
    19b0:	str	q0, [x23, x10]
    19b4:	mov	w10, #0x20                  	// #32
    19b8:	ldrb	w11, [x24, x10]
    19bc:	strb	w11, [x8, x10]
    19c0:	strh	wzr, [x9, x10, lsl #1]
    19c4:	add	x10, x10, #0x1
    19c8:	cmp	x10, #0x22
    19cc:	b.ne	19b8 <BZ2_blockSort@@Base+0x2b4>  // b.any
    19d0:	cmp	w26, #0x4
    19d4:	b.ge	2824 <BZ2_blockSort@@Base+0x1120>  // b.tcont
    19d8:	mov	x8, x21
    19dc:	ldr	w9, [x8], #4
    19e0:	mov	x10, xzr
    19e4:	ldr	w11, [x8, x10]
    19e8:	add	w9, w11, w9
    19ec:	str	w9, [x8, x10]
    19f0:	add	x10, x10, #0x4
    19f4:	cmp	x10, #0x40, lsl #12
    19f8:	b.ne	19e4 <BZ2_blockSort@@Base+0x2e0>  // b.any
    19fc:	ldrb	w9, [x24]
    1a00:	sub	w11, w27, #0x4
    1a04:	sub	w12, w27, #0x3
    1a08:	sub	w13, w27, #0x2
    1a0c:	mov	x8, xzr
    1a10:	sub	w10, w16, #0x1
    1a14:	add	x14, x24, w11, sxtw
    1a18:	add	x15, x24, w12, sxtw
    1a1c:	lsl	w9, w9, #8
    1a20:	add	x16, x24, w13, sxtw
    1a24:	add	x17, x10, x8
    1a28:	ldrb	w18, [x24, w17, uxtw]
    1a2c:	ubfx	w9, w9, #8, #8
    1a30:	bfi	w9, w18, #8, #8
    1a34:	lsl	x9, x9, #2
    1a38:	ldr	w0, [x21, x9]
    1a3c:	sub	w0, w0, #0x1
    1a40:	str	w0, [x21, x9]
    1a44:	str	w17, [x19, w0, sxtw #2]
    1a48:	ldrb	w17, [x16, x8]
    1a4c:	lsl	x9, x18, #2
    1a50:	add	w0, w13, w8
    1a54:	bfi	x9, x17, #10, #8
    1a58:	ldr	w18, [x21, x9]
    1a5c:	lsl	x17, x17, #2
    1a60:	sub	w18, w18, #0x1
    1a64:	str	w18, [x21, x9]
    1a68:	str	w0, [x19, w18, sxtw #2]
    1a6c:	ldrb	w9, [x15, x8]
    1a70:	add	w0, w12, w8
    1a74:	bfi	x17, x9, #10, #8
    1a78:	ldr	w18, [x21, x17]
    1a7c:	sub	w18, w18, #0x1
    1a80:	str	w18, [x21, x17]
    1a84:	str	w0, [x19, w18, sxtw #2]
    1a88:	ldrb	w17, [x14, x8]
    1a8c:	add	w18, w11, w8
    1a90:	sub	x8, x8, #0x4
    1a94:	add	w1, w27, w8
    1a98:	bfi	w9, w17, #8, #24
    1a9c:	and	x17, x9, #0xffff
    1aa0:	lsl	x17, x17, #2
    1aa4:	ldr	w0, [x21, x17]
    1aa8:	add	w1, w1, #0x3
    1aac:	cmp	w1, #0x6
    1ab0:	sub	w0, w0, #0x1
    1ab4:	str	w0, [x21, x17]
    1ab8:	str	w18, [x19, w0, sxtw #2]
    1abc:	b.gt	1a24 <BZ2_blockSort@@Base+0x320>
    1ac0:	add	w10, w27, w8
    1ac4:	add	w10, w10, #0x3
    1ac8:	cmp	w10, #0x4
    1acc:	b.lt	1b10 <BZ2_blockSort@@Base+0x40c>  // b.tstop
    1ad0:	sub	w10, w27, #0x1
    1ad4:	add	x8, x10, x8
    1ad8:	and	x10, x8, #0xffffffff
    1adc:	ldrb	w11, [x24, x10]
    1ae0:	ubfx	w9, w9, #8, #8
    1ae4:	cmp	x10, #0x0
    1ae8:	sub	x10, x10, #0x1
    1aec:	bfi	w9, w11, #8, #24
    1af0:	and	x11, x9, #0xffff
    1af4:	lsl	x11, x11, #2
    1af8:	ldr	w12, [x21, x11]
    1afc:	sub	w12, w12, #0x1
    1b00:	str	w12, [x21, x11]
    1b04:	str	w8, [x19, w12, sxtw #2]
    1b08:	sub	w8, w8, #0x1
    1b0c:	b.gt	1adc <BZ2_blockSort@@Base+0x3d8>
    1b10:	movi	v0.2d, #0x0
    1b14:	adrp	x9, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    1b18:	stp	q0, q0, [x22, #224]
    1b1c:	stp	q0, q0, [x22, #192]
    1b20:	stp	q0, q0, [x22, #160]
    1b24:	stp	q0, q0, [x22, #128]
    1b28:	stp	q0, q0, [x22, #96]
    1b2c:	stp	q0, q0, [x22, #64]
    1b30:	stp	q0, q0, [x22, #32]
    1b34:	stp	q0, q0, [x22]
    1b38:	ldr	q0, [x9, #2144]
    1b3c:	mov	x8, xzr
    1b40:	movi	v1.4s, #0x4
    1b44:	add	x9, sp, #0x9f0
    1b48:	movi	v2.4s, #0x8
    1b4c:	add	v3.4s, v0.4s, v1.4s
    1b50:	add	x10, x9, x8
    1b54:	add	x8, x8, #0x20
    1b58:	stp	q0, q3, [x10]
    1b5c:	cmp	x8, #0x400
    1b60:	add	v0.4s, v0.4s, v2.4s
    1b64:	b.ne	1b4c <BZ2_blockSort@@Base+0x448>  // b.any
    1b68:	mov	w8, #0x5556                	// #21846
    1b6c:	mov	w9, #0x16c                 	// #364
    1b70:	movk	w8, #0x5555, lsl #16
    1b74:	add	x10, sp, #0x9f0
    1b78:	str	w26, [sp, #100]
    1b7c:	b	1b90 <BZ2_blockSort@@Base+0x48c>
    1b80:	sub	w9, w9, #0x3
    1b84:	cmp	w9, #0x2
    1b88:	mov	w9, w11
    1b8c:	b.ls	1c24 <BZ2_blockSort@@Base+0x520>  // b.plast
    1b90:	smull	x11, w9, w8
    1b94:	lsr	x12, x11, #63
    1b98:	lsr	x11, x11, #32
    1b9c:	cmp	w9, #0x2ff
    1ba0:	add	w11, w11, w12
    1ba4:	b.gt	1b80 <BZ2_blockSort@@Base+0x47c>
    1ba8:	mov	w12, wzr
    1bac:	sxtw	x13, w11
    1bb0:	b	1bcc <BZ2_blockSort@@Base+0x4c8>
    1bb4:	mov	x18, x0
    1bb8:	cmp	x13, #0xff
    1bbc:	add	x13, x13, #0x1
    1bc0:	add	w12, w12, #0x1
    1bc4:	str	w14, [x10, x18, lsl #2]
    1bc8:	b.ge	1b80 <BZ2_blockSort@@Base+0x47c>  // b.tcont
    1bcc:	ldr	w14, [x10, x13, lsl #2]
    1bd0:	lsl	w15, w14, #8
    1bd4:	add	w16, w15, #0x100
    1bd8:	ldr	w16, [x21, w16, sxtw #2]
    1bdc:	ldr	w15, [x21, w15, sxtw #2]
    1be0:	sub	w15, w16, w15
    1be4:	mov	w16, w12
    1be8:	ldr	w17, [x10, w16, sxtw #2]
    1bec:	add	w1, w11, w16
    1bf0:	lsl	w18, w17, #8
    1bf4:	add	w0, w18, #0x100
    1bf8:	ldr	w0, [x21, w0, sxtw #2]
    1bfc:	ldr	w18, [x21, w18, sxtw #2]
    1c00:	sub	w18, w0, w18
    1c04:	cmp	w18, w15
    1c08:	sxtw	x0, w1
    1c0c:	b.ls	1bb4 <BZ2_blockSort@@Base+0x4b0>  // b.plast
    1c10:	sxtw	x18, w16
    1c14:	subs	w16, w18, w11
    1c18:	str	w17, [x10, x0, lsl #2]
    1c1c:	b.ge	1be8 <BZ2_blockSort@@Base+0x4e4>  // b.tcont
    1c20:	b	1bb8 <BZ2_blockSort@@Base+0x4b4>
    1c24:	add	x8, x19, #0x8
    1c28:	stp	x8, x21, [sp, #72]
    1c2c:	add	x8, x19, #0x10
    1c30:	str	x8, [sp, #64]
    1c34:	add	x8, x19, #0x14
    1c38:	ldr	w25, [sp, #12]
    1c3c:	str	x8, [sp, #48]
    1c40:	add	x8, x21, #0x4
    1c44:	str	x8, [sp, #40]
    1c48:	sub	x8, x19, #0x4
    1c4c:	add	x3, sp, #0x1, lsl #12
    1c50:	mov	w22, wzr
    1c54:	add	x20, x19, #0x4
    1c58:	str	x8, [sp, #24]
    1c5c:	add	x26, sp, #0x8f0
    1c60:	add	x3, x3, #0x110
    1c64:	add	x4, sp, #0xf80
    1c68:	add	x5, sp, #0xdf0
    1c6c:	mov	x8, xzr
    1c70:	mov	x9, xzr
    1c74:	str	w25, [sp, #216]
    1c78:	str	x20, [sp, #104]
    1c7c:	str	x23, [sp, #224]
    1c80:	b	1c94 <BZ2_blockSort@@Base+0x590>
    1c84:	ldr	x8, [sp, #56]
    1c88:	add	x8, x8, #0x1
    1c8c:	cmp	x8, #0x100
    1c90:	b.eq	27a0 <BZ2_blockSort@@Base+0x109c>  // b.none
    1c94:	add	x9, sp, #0x9f0
    1c98:	ldr	w9, [x9, x8, lsl #2]
    1c9c:	str	x8, [sp, #56]
    1ca0:	mov	x11, xzr
    1ca4:	sxtw	x8, w9
    1ca8:	str	x8, [sp, #128]
    1cac:	lsl	w8, w9, #8
    1cb0:	sxtw	x10, w8
    1cb4:	mov	x8, xzr
    1cb8:	str	x10, [sp, #120]
    1cbc:	str	x9, [sp, #168]
    1cc0:	b	1cec <BZ2_blockSort@@Base+0x5e8>
    1cc4:	ldr	x11, [sp, #152]
    1cc8:	mov	w8, w25
    1ccc:	orr	w9, w9, #0x200000
    1cd0:	str	w9, [x21, x11, lsl #2]
    1cd4:	mov	w25, w8
    1cd8:	ldr	x8, [sp, #192]
    1cdc:	ldr	x9, [sp, #168]
    1ce0:	add	x8, x8, #0x1
    1ce4:	cmp	x8, #0x100
    1ce8:	b.eq	24c0 <BZ2_blockSort@@Base+0xdbc>  // b.none
    1cec:	cmp	x8, x9
    1cf0:	b.eq	1ce0 <BZ2_blockSort@@Base+0x5dc>  // b.none
    1cf4:	add	x11, x8, x10
    1cf8:	ldr	w9, [x21, x11, lsl #2]
    1cfc:	str	x8, [sp, #192]
    1d00:	tbnz	w9, #21, 1cc8 <BZ2_blockSort@@Base+0x5c4>
    1d04:	add	x8, x21, x11, lsl #2
    1d08:	ldr	w8, [x8, #4]
    1d0c:	str	x11, [sp, #152]
    1d10:	and	w11, w9, #0xffdfffff
    1d14:	and	w8, w8, #0xffdfffff
    1d18:	sub	w8, w8, #0x1
    1d1c:	stp	w8, w11, [sp, #144]
    1d20:	subs	w8, w8, w11
    1d24:	b.le	1cc4 <BZ2_blockSort@@Base+0x5c0>
    1d28:	ldr	w9, [sp, #100]
    1d2c:	cmp	w9, #0x4
    1d30:	b.ge	2484 <BZ2_blockSort@@Base+0xd80>  // b.tcont
    1d34:	ldr	w8, [sp, #148]
    1d38:	mov	w1, #0x1                   	// #1
    1d3c:	str	w8, [sp, #4368]
    1d40:	ldr	w8, [sp, #144]
    1d44:	str	w8, [sp, #3968]
    1d48:	mov	w8, #0x2                   	// #2
    1d4c:	str	w8, [sp, #3568]
    1d50:	b	1d94 <BZ2_blockSort@@Base+0x690>
    1d54:	ldr	w25, [sp, #236]
    1d58:	ldp	x21, x1, [sp, #80]
    1d5c:	mov	x27, x22
    1d60:	ldr	w22, [sp, #116]
    1d64:	ldr	x20, [sp, #104]
    1d68:	add	x3, sp, #0x1, lsl #12
    1d6c:	add	x3, x3, #0x110
    1d70:	add	x4, sp, #0xf80
    1d74:	add	x5, sp, #0xdf0
    1d78:	str	w25, [sp, #216]
    1d7c:	mov	w8, w25
    1d80:	mov	w9, w25
    1d84:	tbnz	w25, #31, 2458 <BZ2_blockSort@@Base+0xd54>
    1d88:	ldr	w8, [sp, #216]
    1d8c:	cmp	w1, #0x0
    1d90:	b.le	2458 <BZ2_blockSort@@Base+0xd54>
    1d94:	sxtw	x23, w1
    1d98:	sub	x1, x23, #0x1
    1d9c:	cmp	w23, #0x62
    1da0:	b.lt	1dc4 <BZ2_blockSort@@Base+0x6c0>  // b.tstop
    1da4:	mov	w0, #0x3e9                 	// #1001
    1da8:	mov	x26, x1
    1dac:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    1db0:	add	x3, sp, #0x1, lsl #12
    1db4:	mov	x1, x26
    1db8:	add	x5, sp, #0xdf0
    1dbc:	add	x4, sp, #0xf80
    1dc0:	add	x3, x3, #0x110
    1dc4:	lsl	x8, x1, #2
    1dc8:	ldr	w6, [x3, x8]
    1dcc:	ldr	w9, [x4, x8]
    1dd0:	ldr	w26, [x5, x8]
    1dd4:	sub	w10, w9, w6
    1dd8:	cmp	w10, #0x14
    1ddc:	sxtw	x28, w9
    1de0:	b.lt	1f5c <BZ2_blockSort@@Base+0x858>  // b.tstop
    1de4:	cmp	w26, #0xf
    1de8:	b.ge	1f5c <BZ2_blockSort@@Base+0x858>  // b.tcont
    1dec:	sxtw	x14, w6
    1df0:	ldr	w10, [x19, x28, lsl #2]
    1df4:	add	w11, w9, w6
    1df8:	ldr	w12, [x19, x14, lsl #2]
    1dfc:	asr	w11, w11, #1
    1e00:	ldr	w11, [x19, w11, sxtw #2]
    1e04:	add	w10, w10, w26
    1e08:	add	w12, w12, w26
    1e0c:	ldrb	w10, [x24, w10, uxtw]
    1e10:	ldrb	w12, [x24, w12, uxtw]
    1e14:	add	w11, w11, w26
    1e18:	ldrb	w11, [x24, w11, uxtw]
    1e1c:	cmp	w12, w10
    1e20:	csel	w13, w12, w10, hi  // hi = pmore
    1e24:	csel	w10, w10, w12, hi  // hi = pmore
    1e28:	cmp	w10, w11
    1e2c:	csel	w10, w10, w11, hi  // hi = pmore
    1e30:	cmp	w13, w11
    1e34:	csel	w15, w10, w13, hi  // hi = pmore
    1e38:	mov	w12, w9
    1e3c:	mov	w10, w6
    1e40:	mov	w13, w9
    1e44:	mov	w11, w6
    1e48:	cmp	w11, w13
    1e4c:	b.gt	1eb8 <BZ2_blockSort@@Base+0x7b4>
    1e50:	sxtw	x16, w13
    1e54:	sxtw	x10, w10
    1e58:	sxtw	x17, w11
    1e5c:	ldr	w11, [x19, x17, lsl #2]
    1e60:	add	w18, w11, w26
    1e64:	ldrb	w18, [x24, w18, uxtw]
    1e68:	subs	w18, w18, w15
    1e6c:	b.eq	1e8c <BZ2_blockSort@@Base+0x788>  // b.none
    1e70:	cmp	w18, #0x0
    1e74:	b.gt	1eb4 <BZ2_blockSort@@Base+0x7b0>
    1e78:	add	x11, x17, #0x1
    1e7c:	cmp	x17, x16
    1e80:	mov	x17, x11
    1e84:	b.lt	1e5c <BZ2_blockSort@@Base+0x758>  // b.tstop
    1e88:	b	1eb8 <BZ2_blockSort@@Base+0x7b4>
    1e8c:	lsl	x18, x10, #2
    1e90:	ldr	w0, [x19, x18]
    1e94:	add	x10, x10, #0x1
    1e98:	cmp	w13, w17
    1e9c:	str	w0, [x19, x17, lsl #2]
    1ea0:	str	w11, [x19, x18]
    1ea4:	add	w11, w17, #0x1
    1ea8:	b.gt	1e58 <BZ2_blockSort@@Base+0x754>
    1eac:	add	w11, w17, #0x1
    1eb0:	b	1eb8 <BZ2_blockSort@@Base+0x7b4>
    1eb4:	mov	w11, w17
    1eb8:	cmp	w11, w13
    1ebc:	b.gt	1f40 <BZ2_blockSort@@Base+0x83c>
    1ec0:	sxtw	x16, w11
    1ec4:	sxtw	x12, w12
    1ec8:	sxtw	x17, w13
    1ecc:	ldr	w13, [x19, x17, lsl #2]
    1ed0:	add	w18, w13, w26
    1ed4:	ldrb	w18, [x24, w18, uxtw]
    1ed8:	subs	w18, w18, w15
    1edc:	b.eq	1ef8 <BZ2_blockSort@@Base+0x7f4>  // b.none
    1ee0:	tbnz	w18, #31, 1f1c <BZ2_blockSort@@Base+0x818>
    1ee4:	sub	x13, x17, #0x1
    1ee8:	cmp	x17, x16
    1eec:	mov	x17, x13
    1ef0:	b.gt	1ecc <BZ2_blockSort@@Base+0x7c8>
    1ef4:	b	1f40 <BZ2_blockSort@@Base+0x83c>
    1ef8:	lsl	x18, x12, #2
    1efc:	ldr	w0, [x19, x18]
    1f00:	sub	x12, x12, #0x1
    1f04:	cmp	w11, w17
    1f08:	str	w0, [x19, x17, lsl #2]
    1f0c:	str	w13, [x19, x18]
    1f10:	sub	w13, w17, #0x1
    1f14:	b.lt	1ec8 <BZ2_blockSort@@Base+0x7c4>  // b.tstop
    1f18:	b	1f40 <BZ2_blockSort@@Base+0x83c>
    1f1c:	lsl	x16, x16, #2
    1f20:	ldr	w18, [x19, x16]
    1f24:	add	w11, w11, #0x1
    1f28:	str	w13, [x19, x16]
    1f2c:	sub	w13, w17, #0x1
    1f30:	str	w18, [x19, x17, lsl #2]
    1f34:	cmp	w11, w13
    1f38:	b.le	1e50 <BZ2_blockSort@@Base+0x74c>
    1f3c:	b	1eb8 <BZ2_blockSort@@Base+0x7b4>
    1f40:	cmp	w12, w10
    1f44:	b.ge	1fb4 <BZ2_blockSort@@Base+0x8b0>  // b.tcont
    1f48:	add	w8, w26, #0x1
    1f4c:	str	w8, [x5, x1, lsl #2]
    1f50:	cmp	w23, #0x62
    1f54:	b.ge	1da4 <BZ2_blockSort@@Base+0x6a0>  // b.tcont
    1f58:	b	1dc4 <BZ2_blockSort@@Base+0x6c0>
    1f5c:	cmp	w10, #0x1
    1f60:	b.lt	1d7c <BZ2_blockSort@@Base+0x678>  // b.tstop
    1f64:	adrp	x11, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    1f68:	mov	x8, xzr
    1f6c:	add	x11, x11, #0x9b8
    1f70:	ldr	w9, [x11, x8, lsl #2]
    1f74:	add	x8, x8, #0x1
    1f78:	cmp	w9, w10
    1f7c:	b.le	1f70 <BZ2_blockSort@@Base+0x86c>
    1f80:	cmp	w8, #0x1
    1f84:	b.eq	1d7c <BZ2_blockSort@@Base+0x678>  // b.none
    1f88:	sub	x8, x8, #0x1
    1f8c:	add	w9, w6, #0x1
    1f90:	str	w22, [sp, #116]
    1f94:	mov	x22, x27
    1f98:	str	w9, [sp, #164]
    1f9c:	and	x8, x8, #0xffffffff
    1fa0:	add	w9, w6, #0x2
    1fa4:	str	x1, [sp, #88]
    1fa8:	str	w9, [sp, #160]
    1fac:	str	x6, [sp, #136]
    1fb0:	b	2260 <BZ2_blockSort@@Base+0xb5c>
    1fb4:	sub	w18, w10, w6
    1fb8:	sub	w0, w11, w10
    1fbc:	cmp	w18, w0
    1fc0:	csel	w15, w18, w0, lt  // lt = tstop
    1fc4:	cmp	w15, #0x1
    1fc8:	b.lt	20a4 <BZ2_blockSort@@Base+0x9a0>  // b.tstop
    1fcc:	cmp	w18, w0
    1fd0:	csel	w17, w18, w0, lt  // lt = tstop
    1fd4:	cmp	w17, #0x1
    1fd8:	csinc	w17, w17, wzr, lt  // lt = tstop
    1fdc:	sub	w16, w11, w15
    1fe0:	sub	w17, w15, w17
    1fe4:	cmp	w17, #0x7
    1fe8:	sxtw	x16, w16
    1fec:	b.cc	207c <BZ2_blockSort@@Base+0x978>  // b.lo, b.ul, b.last
    1ff0:	cmp	w18, w0
    1ff4:	csel	w18, w18, w0, lt  // lt = tstop
    1ff8:	cmp	w18, #0x1
    1ffc:	csinc	w18, w18, wzr, lt  // lt = tstop
    2000:	sub	w18, w15, w18
    2004:	add	x0, x16, x18
    2008:	add	x1, x19, x14, lsl #2
    200c:	add	x0, x20, x0, lsl #2
    2010:	cmp	x1, x0
    2014:	b.cs	202c <BZ2_blockSort@@Base+0x928>  // b.hs, b.nlast
    2018:	add	x18, x14, x18
    201c:	add	x18, x20, x18, lsl #2
    2020:	add	x0, x19, x16, lsl #2
    2024:	cmp	x0, x18
    2028:	b.cc	207c <BZ2_blockSort@@Base+0x978>  // b.lo, b.ul, b.last
    202c:	ldr	x2, [sp, #64]
    2030:	add	x17, x17, #0x1
    2034:	and	x0, x17, #0x1fffffff8
    2038:	add	x18, x0, x14
    203c:	add	x1, x2, x16, lsl #2
    2040:	add	x16, x0, x16
    2044:	sub	w15, w15, w0
    2048:	add	x14, x2, x14, lsl #2
    204c:	mov	x2, x0
    2050:	ldp	q0, q3, [x14, #-16]
    2054:	ldp	q1, q2, [x1, #-16]
    2058:	subs	x2, x2, #0x8
    205c:	stp	q1, q2, [x14, #-16]
    2060:	stp	q0, q3, [x1, #-16]
    2064:	add	x1, x1, #0x20
    2068:	add	x14, x14, #0x20
    206c:	b.ne	2050 <BZ2_blockSort@@Base+0x94c>  // b.any
    2070:	cmp	x17, x0
    2074:	mov	x14, x18
    2078:	b.eq	20a4 <BZ2_blockSort@@Base+0x9a0>  // b.none
    207c:	add	x14, x19, x14, lsl #2
    2080:	add	x16, x19, x16, lsl #2
    2084:	add	w15, w15, #0x1
    2088:	ldr	w17, [x16]
    208c:	ldr	w18, [x14]
    2090:	sub	w15, w15, #0x1
    2094:	cmp	w15, #0x1
    2098:	str	w17, [x14], #4
    209c:	str	w18, [x16], #4
    20a0:	b.gt	2088 <BZ2_blockSort@@Base+0x984>
    20a4:	sub	w17, w9, w12
    20a8:	sub	w12, w12, w13
    20ac:	cmp	w17, w12
    20b0:	csel	w13, w17, w12, lt  // lt = tstop
    20b4:	cmp	w13, #0x1
    20b8:	b.lt	21a0 <BZ2_blockSort@@Base+0xa9c>  // b.tstop
    20bc:	cmp	w17, w12
    20c0:	csel	w15, w17, w12, lt  // lt = tstop
    20c4:	cmp	w15, #0x1
    20c8:	csinc	w15, w15, wzr, lt  // lt = tstop
    20cc:	sub	w14, w9, w13
    20d0:	sub	w16, w13, w15
    20d4:	sxtw	x14, w14
    20d8:	cmp	w16, #0x7
    20dc:	sxtw	x15, w11
    20e0:	b.cc	2178 <BZ2_blockSort@@Base+0xa74>  // b.lo, b.ul, b.last
    20e4:	cmp	w17, w12
    20e8:	csel	w17, w17, w12, lt  // lt = tstop
    20ec:	cmp	w17, #0x1
    20f0:	ldr	x1, [sp, #72]
    20f4:	csinc	w17, w17, wzr, lt  // lt = tstop
    20f8:	sub	w17, w13, w17
    20fc:	add	x0, x14, x17
    2100:	add	x18, x19, x15, lsl #2
    2104:	add	x0, x1, x0, lsl #2
    2108:	cmp	x18, x0
    210c:	b.cs	2124 <BZ2_blockSort@@Base+0xa20>  // b.hs, b.nlast
    2110:	add	x17, x15, x17
    2114:	add	x17, x20, x17, lsl #2
    2118:	add	x18, x20, x14, lsl #2
    211c:	cmp	x18, x17
    2120:	b.cc	2178 <BZ2_blockSort@@Base+0xa74>  // b.lo, b.ul, b.last
    2124:	ldr	x17, [sp, #48]
    2128:	ldr	x1, [sp, #64]
    212c:	add	x16, x16, #0x1
    2130:	and	x18, x16, #0x1fffffff8
    2134:	add	x0, x17, x14, lsl #2
    2138:	add	x17, x18, x15
    213c:	add	x14, x18, x14
    2140:	sub	w13, w13, w18
    2144:	add	x15, x1, x15, lsl #2
    2148:	mov	x1, x18
    214c:	ldp	q0, q3, [x15, #-16]
    2150:	ldp	q1, q2, [x0, #-16]
    2154:	subs	x1, x1, #0x8
    2158:	stp	q1, q2, [x15, #-16]
    215c:	stp	q0, q3, [x0, #-16]
    2160:	add	x0, x0, #0x20
    2164:	add	x15, x15, #0x20
    2168:	b.ne	214c <BZ2_blockSort@@Base+0xa48>  // b.any
    216c:	cmp	x16, x18
    2170:	mov	x15, x17
    2174:	b.eq	21a0 <BZ2_blockSort@@Base+0xa9c>  // b.none
    2178:	add	x15, x19, x15, lsl #2
    217c:	add	x14, x20, x14, lsl #2
    2180:	add	w13, w13, #0x1
    2184:	ldr	w16, [x14]
    2188:	ldr	w17, [x15]
    218c:	sub	w13, w13, #0x1
    2190:	cmp	w13, #0x1
    2194:	str	w16, [x15], #4
    2198:	str	w17, [x14], #4
    219c:	b.gt	2184 <BZ2_blockSort@@Base+0xa80>
    21a0:	sub	w10, w6, w10
    21a4:	sub	w12, w9, w12
    21a8:	add	w10, w10, w11
    21ac:	add	w11, w12, #0x1
    21b0:	sub	w13, w10, #0x1
    21b4:	sub	w11, w9, w11
    21b8:	sub	w15, w13, w6
    21bc:	cmp	w15, w11
    21c0:	csinc	w11, w6, w12, lt  // lt = tstop
    21c4:	csel	w16, w13, w9, lt  // lt = tstop
    21c8:	sub	w14, w12, w10
    21cc:	csel	w9, w9, w13, lt  // lt = tstop
    21d0:	sub	w13, w16, w11
    21d4:	csinc	w15, w6, w12, ge  // ge = tcont
    21d8:	cmp	w13, w14
    21dc:	csel	w13, w10, w11, lt  // lt = tstop
    21e0:	csel	w14, w16, w12, lt  // lt = tstop
    21e4:	csel	w12, w12, w16, lt  // lt = tstop
    21e8:	sub	w17, w9, w15
    21ec:	csel	w10, w11, w10, lt  // lt = tstop
    21f0:	sub	w11, w12, w13
    21f4:	cinc	w16, w26, ge  // ge = tcont
    21f8:	cinc	w18, w26, lt  // lt = tstop
    21fc:	cmp	w17, w11
    2200:	lsl	x11, x23, #2
    2204:	csel	w17, w15, w13, lt  // lt = tstop
    2208:	csel	w13, w13, w15, lt  // lt = tstop
    220c:	csel	w15, w9, w12, lt  // lt = tstop
    2210:	csel	w9, w12, w9, lt  // lt = tstop
    2214:	csel	w12, w26, w18, lt  // lt = tstop
    2218:	csel	w18, w18, w26, lt  // lt = tstop
    221c:	add	x0, x11, #0x4
    2220:	str	w13, [x3, x8]
    2224:	str	w9, [x4, x8]
    2228:	str	w18, [x5, x8]
    222c:	str	w17, [x3, x11]
    2230:	str	w15, [x4, x11]
    2234:	str	w12, [x5, x11]
    2238:	str	w10, [x3, x0]
    223c:	str	w14, [x4, x0]
    2240:	str	w16, [x5, x0]
    2244:	add	w1, w23, #0x2
    2248:	b	1d88 <BZ2_blockSort@@Base+0x684>
    224c:	ldr	x8, [sp, #176]
    2250:	ldr	x6, [sp, #136]
    2254:	cmp	x8, #0x1
    2258:	ldr	x8, [sp, #184]
    225c:	b.le	1d54 <BZ2_blockSort@@Base+0x650>
    2260:	str	x8, [sp, #176]
    2264:	sub	x9, x8, #0x1
    2268:	adrp	x8, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    226c:	add	x8, x8, #0x9b8
    2270:	ldr	w27, [x8, x9, lsl #2]
    2274:	str	x9, [sp, #184]
    2278:	add	w8, w27, w6
    227c:	sxtw	x20, w8
    2280:	ldr	w8, [sp, #160]
    2284:	mov	x10, x20
    2288:	str	w8, [sp, #204]
    228c:	ldr	w8, [sp, #164]
    2290:	stp	w8, w6, [sp, #208]
    2294:	mov	w8, w6
    2298:	b	22e0 <BZ2_blockSort@@Base+0xbdc>
    229c:	add	w8, w27, w21
    22a0:	sxtw	x21, w8
    22a4:	ldr	w9, [sp, #212]
    22a8:	ldr	w8, [sp, #200]
    22ac:	ldr	x10, [sp, #216]
    22b0:	add	w9, w9, #0x3
    22b4:	str	w9, [sp, #212]
    22b8:	ldr	w9, [sp, #208]
    22bc:	str	w8, [x19, x21, lsl #2]
    22c0:	ldr	w8, [sp, #236]
    22c4:	add	x10, x10, #0x3
    22c8:	add	w9, w9, #0x3
    22cc:	str	w9, [sp, #208]
    22d0:	ldr	w9, [sp, #204]
    22d4:	add	w9, w9, #0x3
    22d8:	str	w9, [sp, #204]
    22dc:	tbnz	w8, #31, 2434 <BZ2_blockSort@@Base+0xd30>
    22e0:	cmp	x10, x28
    22e4:	b.gt	224c <BZ2_blockSort@@Base+0xb48>
    22e8:	ldr	w8, [x19, x10, lsl #2]
    22ec:	ldr	w25, [sp, #212]
    22f0:	str	x10, [sp, #216]
    22f4:	add	w23, w8, w26
    22f8:	str	w8, [sp, #200]
    22fc:	ldr	w8, [x19, w25, sxtw #2]
    2300:	ldr	x3, [sp, #224]
    2304:	add	x5, sp, #0xec
    2308:	mov	w1, w23
    230c:	add	w0, w8, w26
    2310:	mov	x2, x24
    2314:	mov	w4, w22
    2318:	sxtw	x21, w25
    231c:	bl	328c <BZ2_blockSort@@Base+0x1b88>
    2320:	tst	w0, #0xff
    2324:	b.eq	2344 <BZ2_blockSort@@Base+0xc40>  // b.none
    2328:	ldr	w8, [x19, x21, lsl #2]
    232c:	add	w9, w27, w25
    2330:	cmp	w21, w20
    2334:	sub	w25, w21, w27
    2338:	str	w8, [x19, w9, sxtw #2]
    233c:	b.ge	22fc <BZ2_blockSort@@Base+0xbf8>  // b.tcont
    2340:	b	234c <BZ2_blockSort@@Base+0xc48>
    2344:	add	w8, w27, w21
    2348:	sxtw	x21, w8
    234c:	ldr	x8, [sp, #216]
    2350:	ldr	w9, [sp, #200]
    2354:	cmp	x8, x28
    2358:	str	w9, [x19, x21, lsl #2]
    235c:	b.ge	224c <BZ2_blockSort@@Base+0xb48>  // b.tcont
    2360:	add	x8, x8, #0x1
    2364:	ldr	w8, [x19, x8, lsl #2]
    2368:	ldr	w25, [sp, #208]
    236c:	add	w23, w8, w26
    2370:	str	w8, [sp, #200]
    2374:	ldr	w8, [x19, w25, sxtw #2]
    2378:	ldr	x3, [sp, #224]
    237c:	add	x5, sp, #0xec
    2380:	mov	w1, w23
    2384:	add	w0, w8, w26
    2388:	mov	x2, x24
    238c:	mov	w4, w22
    2390:	sxtw	x21, w25
    2394:	bl	328c <BZ2_blockSort@@Base+0x1b88>
    2398:	tst	w0, #0xff
    239c:	b.eq	23bc <BZ2_blockSort@@Base+0xcb8>  // b.none
    23a0:	ldr	w8, [x19, x21, lsl #2]
    23a4:	add	w9, w27, w25
    23a8:	cmp	w21, w20
    23ac:	sub	w25, w21, w27
    23b0:	str	w8, [x19, w9, sxtw #2]
    23b4:	b.ge	2374 <BZ2_blockSort@@Base+0xc70>  // b.tcont
    23b8:	b	23c4 <BZ2_blockSort@@Base+0xcc0>
    23bc:	add	w8, w27, w21
    23c0:	sxtw	x21, w8
    23c4:	ldr	x8, [sp, #216]
    23c8:	ldr	w9, [sp, #200]
    23cc:	add	x8, x8, #0x2
    23d0:	cmp	x8, x28
    23d4:	str	w9, [x19, x21, lsl #2]
    23d8:	b.gt	224c <BZ2_blockSort@@Base+0xb48>
    23dc:	ldr	w8, [x19, x8, lsl #2]
    23e0:	ldr	w25, [sp, #204]
    23e4:	add	w23, w8, w26
    23e8:	str	w8, [sp, #200]
    23ec:	ldr	w8, [x19, w25, sxtw #2]
    23f0:	ldr	x3, [sp, #224]
    23f4:	add	x5, sp, #0xec
    23f8:	mov	w1, w23
    23fc:	add	w0, w8, w26
    2400:	mov	x2, x24
    2404:	mov	w4, w22
    2408:	sxtw	x21, w25
    240c:	bl	328c <BZ2_blockSort@@Base+0x1b88>
    2410:	tst	w0, #0xff
    2414:	b.eq	229c <BZ2_blockSort@@Base+0xb98>  // b.none
    2418:	ldr	w8, [x19, x21, lsl #2]
    241c:	add	w9, w27, w25
    2420:	cmp	w21, w20
    2424:	sub	w25, w21, w27
    2428:	str	w8, [x19, w9, sxtw #2]
    242c:	b.ge	23ec <BZ2_blockSort@@Base+0xce8>  // b.tcont
    2430:	b	22a4 <BZ2_blockSort@@Base+0xba0>
    2434:	ldr	x21, [sp, #80]
    2438:	mov	x27, x22
    243c:	ldr	w22, [sp, #116]
    2440:	ldr	x20, [sp, #104]
    2444:	add	x3, sp, #0x1, lsl #12
    2448:	str	w8, [sp, #216]
    244c:	add	x3, x3, #0x110
    2450:	add	x4, sp, #0xf80
    2454:	add	x5, sp, #0xdf0
    2458:	tbnz	w8, #31, 270c <BZ2_blockSort@@Base+0x1008>
    245c:	ldp	w12, w10, [sp, #144]
    2460:	ldr	x11, [sp, #152]
    2464:	ldr	x23, [sp, #224]
    2468:	add	x26, sp, #0x8f0
    246c:	sub	w10, w22, w10
    2470:	add	w10, w10, w12
    2474:	ldr	w9, [x21, x11, lsl #2]
    2478:	add	w22, w10, #0x1
    247c:	ldr	x10, [sp, #120]
    2480:	b	1ccc <BZ2_blockSort@@Base+0x5c8>
    2484:	adrp	x9, 1e000 <BZ2_bzerror@@Base+0x1092c>
    2488:	ldr	x9, [x9, #4016]
    248c:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    2490:	add	w5, w8, #0x1
    2494:	add	x1, x1, #0x95b
    2498:	ldr	x0, [x9]
    249c:	ldr	x2, [sp, #168]
    24a0:	ldr	x3, [sp, #192]
    24a4:	mov	w4, w22
    24a8:	bl	1610 <fprintf@plt>
    24ac:	add	x3, sp, #0x1, lsl #12
    24b0:	add	x5, sp, #0xdf0
    24b4:	add	x4, sp, #0xf80
    24b8:	add	x3, x3, #0x110
    24bc:	b	1d34 <BZ2_blockSort@@Base+0x630>
    24c0:	ldr	x20, [sp, #128]
    24c4:	ldrb	w8, [x26, x20]
    24c8:	cbz	w8, 24e4 <BZ2_blockSort@@Base+0xde0>
    24cc:	mov	w0, #0x3ee                 	// #1006
    24d0:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    24d4:	add	x3, sp, #0x1, lsl #12
    24d8:	add	x5, sp, #0xdf0
    24dc:	add	x4, sp, #0xf80
    24e0:	add	x3, x3, #0x110
    24e4:	ldr	x9, [sp, #40]
    24e8:	mov	x8, xzr
    24ec:	add	x13, sp, #0x4f0
    24f0:	add	x11, sp, #0xf0
    24f4:	add	x9, x9, x20, lsl #2
    24f8:	ldur	w10, [x9, #-4]
    24fc:	and	w10, w10, #0xffdfffff
    2500:	str	w10, [x13, x8]
    2504:	ldr	w10, [x9]
    2508:	add	x9, x9, #0x400
    250c:	and	w10, w10, #0xffdfffff
    2510:	sub	w10, w10, #0x1
    2514:	str	w10, [x11, x8]
    2518:	add	x8, x8, #0x4
    251c:	cmp	x8, #0x400
    2520:	b.ne	24f8 <BZ2_blockSort@@Base+0xdf4>  // b.any
    2524:	ldr	x8, [sp, #120]
    2528:	add	x14, sp, #0xf0
    252c:	ldrsw	x9, [x21, x8, lsl #2]
    2530:	ldr	w8, [x13, x20, lsl #2]
    2534:	and	x9, x9, #0xffffffffffdfffff
    2538:	cmp	w9, w8
    253c:	b.lt	25b0 <BZ2_blockSort@@Base+0xeac>  // b.tstop
    2540:	ldr	x10, [sp, #120]
    2544:	mov	x9, x20
    2548:	ldr	w9, [x14, x9, lsl #2]
    254c:	add	w20, w10, #0x100
    2550:	ldr	w10, [x21, w20, sxtw #2]
    2554:	and	w10, w10, #0xffdfffff
    2558:	sub	w10, w10, #0x1
    255c:	cmp	w10, w9
    2560:	b.le	25e8 <BZ2_blockSort@@Base+0xee4>
    2564:	ldr	w11, [x19, w10, sxtw #2]
    2568:	sub	w11, w11, #0x1
    256c:	and	w12, w27, w11, asr #31
    2570:	add	w11, w12, w11
    2574:	ldrb	w12, [x24, w11, sxtw]
    2578:	ldrb	w13, [x26, x12]
    257c:	cbnz	w13, 2558 <BZ2_blockSort@@Base+0xe54>
    2580:	lsl	x9, x12, #2
    2584:	add	x14, sp, #0xf0
    2588:	ldrsw	x12, [x14, x9]
    258c:	sub	w13, w12, #0x1
    2590:	str	w13, [x14, x9]
    2594:	ldr	x9, [sp, #128]
    2598:	str	w11, [x19, x12, lsl #2]
    259c:	ldr	w9, [x14, x9, lsl #2]
    25a0:	b	2558 <BZ2_blockSort@@Base+0xe54>
    25a4:	add	x9, x9, #0x1
    25a8:	cmp	x9, w8, sxtw
    25ac:	b.ge	2540 <BZ2_blockSort@@Base+0xe3c>  // b.tcont
    25b0:	ldr	w10, [x19, x9, lsl #2]
    25b4:	sub	w10, w10, #0x1
    25b8:	and	w11, w27, w10, asr #31
    25bc:	add	w10, w11, w10
    25c0:	ldrb	w11, [x24, w10, sxtw]
    25c4:	ldrb	w12, [x26, x11]
    25c8:	cbnz	w12, 25a4 <BZ2_blockSort@@Base+0xea0>
    25cc:	lsl	x8, x11, #2
    25d0:	ldrsw	x11, [x13, x8]
    25d4:	add	w12, w11, #0x1
    25d8:	str	w12, [x13, x8]
    25dc:	str	w10, [x19, x11, lsl #2]
    25e0:	ldr	w8, [x13, x20, lsl #2]
    25e4:	b	25a4 <BZ2_blockSort@@Base+0xea0>
    25e8:	sub	w10, w8, #0x1
    25ec:	cmp	w10, w9
    25f0:	b.eq	261c <BZ2_blockSort@@Base+0xf18>  // b.none
    25f4:	cbnz	w8, 2604 <BZ2_blockSort@@Base+0xf00>
    25f8:	ldr	w8, [sp, #36]
    25fc:	cmp	w9, w8
    2600:	b.eq	261c <BZ2_blockSort@@Base+0xf18>  // b.none
    2604:	mov	w0, #0x3ef                 	// #1007
    2608:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    260c:	add	x3, sp, #0x1, lsl #12
    2610:	add	x5, sp, #0xdf0
    2614:	add	x4, sp, #0xf80
    2618:	add	x3, x3, #0x110
    261c:	ldr	x14, [sp, #128]
    2620:	mov	x9, xzr
    2624:	sxtw	x8, w20
    2628:	add	x10, x21, x14, lsl #2
    262c:	add	x11, x10, x9
    2630:	ldr	w12, [x11]
    2634:	ldr	w13, [x11, #1024]
    2638:	add	x9, x9, #0x800
    263c:	cmp	x9, #0x40, lsl #12
    2640:	orr	w12, w12, #0x200000
    2644:	orr	w13, w13, #0x200000
    2648:	str	w12, [x11]
    264c:	str	w13, [x11, #1024]
    2650:	b.ne	262c <BZ2_blockSort@@Base+0xf28>  // b.any
    2654:	ldr	x9, [sp, #56]
    2658:	ldr	x20, [sp, #104]
    265c:	cmp	x9, #0xfe
    2660:	mov	w9, #0x1                   	// #1
    2664:	strb	w9, [x26, x14]
    2668:	b.hi	1c84 <BZ2_blockSort@@Base+0x580>  // b.pmore
    266c:	ldr	x9, [sp, #120]
    2670:	ldr	w8, [x21, x8, lsl #2]
    2674:	mov	w12, #0xfffe                	// #65534
    2678:	ldrsw	x9, [x21, x9, lsl #2]
    267c:	and	w8, w8, #0xffdfffff
    2680:	and	x10, x9, #0xffffffffffdfffff
    2684:	sub	w11, w8, w10
    2688:	mov	w8, #0xffffffff            	// #-1
    268c:	add	w8, w8, #0x1
    2690:	asr	w9, w11, w8
    2694:	cmp	w9, w12
    2698:	b.gt	268c <BZ2_blockSort@@Base+0xf88>
    269c:	subs	w9, w11, #0x1
    26a0:	b.lt	26e4 <BZ2_blockSort@@Base+0xfe0>  // b.tstop
    26a4:	ldr	x12, [sp, #24]
    26a8:	mov	w11, w11
    26ac:	add	x10, x12, x10, lsl #2
    26b0:	b	26c0 <BZ2_blockSort@@Base+0xfbc>
    26b4:	add	x12, x11, #0x1
    26b8:	cmp	x12, #0x1
    26bc:	b.le	26e4 <BZ2_blockSort@@Base+0xfe0>
    26c0:	ldrsw	x12, [x10, x11, lsl #2]
    26c4:	sub	x11, x11, #0x1
    26c8:	lsr	w13, w11, w8
    26cc:	cmp	w12, #0x21
    26d0:	strh	w13, [x23, x12, lsl #1]
    26d4:	b.gt	26b4 <BZ2_blockSort@@Base+0xfb0>
    26d8:	add	w12, w12, w27
    26dc:	strh	w13, [x23, w12, sxtw #1]
    26e0:	b	26b4 <BZ2_blockSort@@Base+0xfb0>
    26e4:	asr	w8, w9, w8
    26e8:	cmp	w8, #0x10, lsl #12
    26ec:	b.lt	1c84 <BZ2_blockSort@@Base+0x580>  // b.tstop
    26f0:	mov	w0, #0x3ea                 	// #1002
    26f4:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    26f8:	add	x3, sp, #0x1, lsl #12
    26fc:	add	x5, sp, #0xdf0
    2700:	add	x4, sp, #0xf80
    2704:	add	x3, x3, #0x110
    2708:	b	1c84 <BZ2_blockSort@@Base+0x580>
    270c:	ldr	x20, [sp]
    2710:	ldr	w25, [sp, #216]
    2714:	ldr	w26, [sp, #100]
    2718:	cmp	w26, #0x3
    271c:	b.ge	27bc <BZ2_blockSort@@Base+0x10b8>  // b.tcont
    2720:	tbz	w25, #31, 2740 <BZ2_blockSort@@Base+0x103c>
    2724:	cmp	w26, #0x2
    2728:	b.ge	284c <BZ2_blockSort@@Base+0x1148>  // b.tcont
    272c:	ldp	x0, x1, [x20, #24]
    2730:	mov	x2, x21
    2734:	mov	w3, w27
    2738:	mov	w4, w26
    273c:	bl	2898 <BZ2_blockSort@@Base+0x1194>
    2740:	ldrsw	x8, [x20, #108]
    2744:	mov	w9, #0xffffffff            	// #-1
    2748:	str	w9, [x20, #48]
    274c:	cmp	w8, #0x1
    2750:	b.lt	276c <BZ2_blockSort@@Base+0x1068>  // b.tstop
    2754:	mov	x9, xzr
    2758:	ldr	w10, [x19, x9, lsl #2]
    275c:	cbz	w10, 2778 <BZ2_blockSort@@Base+0x1074>
    2760:	add	x9, x9, #0x1
    2764:	cmp	x9, x8
    2768:	b.lt	2758 <BZ2_blockSort@@Base+0x1054>  // b.tstop
    276c:	mov	w0, #0x3eb                 	// #1003
    2770:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    2774:	b	277c <BZ2_blockSort@@Base+0x1078>
    2778:	str	w9, [x20, #48]
    277c:	add	sp, sp, #0x1, lsl #12
    2780:	add	sp, sp, #0x2b0
    2784:	ldp	x20, x19, [sp, #80]
    2788:	ldp	x22, x21, [sp, #64]
    278c:	ldp	x24, x23, [sp, #48]
    2790:	ldp	x26, x25, [sp, #32]
    2794:	ldp	x28, x27, [sp, #16]
    2798:	ldp	x29, x30, [sp], #96
    279c:	ret
    27a0:	ldr	w26, [sp, #100]
    27a4:	cmp	w26, #0x3
    27a8:	b.gt	2870 <BZ2_blockSort@@Base+0x116c>
    27ac:	ldr	x20, [sp]
    27b0:	ldr	w25, [sp, #216]
    27b4:	cmp	w26, #0x3
    27b8:	b.lt	2720 <BZ2_blockSort@@Base+0x101c>  // b.tstop
    27bc:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    27c0:	ldr	x8, [x8, #4016]
    27c4:	cmp	w27, #0x0
    27c8:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    27cc:	add	x1, x1, #0x870
    27d0:	ldr	x0, [x8]
    27d4:	ldr	w8, [sp, #12]
    27d8:	ldr	x3, [sp, #16]
    27dc:	sub	w2, w8, w25
    27e0:	csinc	w8, w27, wzr, ne  // ne = any
    27e4:	scvtf	s0, w2
    27e8:	scvtf	s1, w8
    27ec:	fdiv	s0, s0, s1
    27f0:	fcvt	d0, s0
    27f4:	bl	1610 <fprintf@plt>
    27f8:	tbz	w25, #31, 2740 <BZ2_blockSort@@Base+0x103c>
    27fc:	b	2724 <BZ2_blockSort@@Base+0x1020>
    2800:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    2804:	ldr	x8, [x8, #4016]
    2808:	adrp	x0, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    280c:	add	x0, x0, #0x939
    2810:	mov	w1, #0x21                  	// #33
    2814:	ldr	x3, [x8]
    2818:	mov	w2, #0x1                   	// #1
    281c:	bl	15b0 <fwrite@plt>
    2820:	b	17b8 <BZ2_blockSort@@Base+0xb4>
    2824:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    2828:	ldr	x8, [x8, #4016]
    282c:	adrp	x0, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    2830:	add	x0, x0, #0x8cc
    2834:	mov	w1, #0x1b                  	// #27
    2838:	ldr	x3, [x8]
    283c:	mov	w2, #0x1                   	// #1
    2840:	bl	15b0 <fwrite@plt>
    2844:	ldr	x16, [sp, #16]
    2848:	b	19d8 <BZ2_blockSort@@Base+0x2d4>
    284c:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    2850:	ldr	x8, [x8, #4016]
    2854:	adrp	x0, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    2858:	add	x0, x0, #0x896
    285c:	mov	w1, #0x35                  	// #53
    2860:	ldr	x3, [x8]
    2864:	mov	w2, #0x1                   	// #1
    2868:	bl	15b0 <fwrite@plt>
    286c:	b	272c <BZ2_blockSort@@Base+0x1028>
    2870:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    2874:	ldr	x8, [x8, #4016]
    2878:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    287c:	sub	w4, w27, w22
    2880:	add	x1, x1, #0x98b
    2884:	ldr	x0, [x8]
    2888:	ldr	x2, [sp, #16]
    288c:	mov	w3, w22
    2890:	bl	1610 <fprintf@plt>
    2894:	b	27ac <BZ2_blockSort@@Base+0x10a8>
    2898:	stp	x29, x30, [sp, #-96]!
    289c:	stp	x28, x27, [sp, #16]
    28a0:	stp	x26, x25, [sp, #32]
    28a4:	stp	x24, x23, [sp, #48]
    28a8:	stp	x22, x21, [sp, #64]
    28ac:	stp	x20, x19, [sp, #80]
    28b0:	mov	x29, sp
    28b4:	sub	sp, sp, #0xb60
    28b8:	mov	w25, w4
    28bc:	mov	w21, w3
    28c0:	mov	x23, x2
    28c4:	mov	x19, x1
    28c8:	mov	x20, x0
    28cc:	cmp	w4, #0x4
    28d0:	b.ge	323c <BZ2_blockSort@@Base+0x1b38>  // b.tcont
    28d4:	add	x0, sp, #0x434
    28d8:	mov	w2, #0x404                 	// #1028
    28dc:	mov	w1, wzr
    28e0:	mov	w28, w21
    28e4:	mov	w22, w21
    28e8:	add	x21, sp, #0x434
    28ec:	bl	14a0 <memset@plt>
    28f0:	cmp	w22, #0x1
    28f4:	str	w22, [sp, #32]
    28f8:	b.lt	2928 <BZ2_blockSort@@Base+0x1224>  // b.tstop
    28fc:	mov	x8, x28
    2900:	mov	x9, x19
    2904:	ldrb	w10, [x9], #1
    2908:	subs	x8, x8, #0x1
    290c:	lsl	x10, x10, #2
    2910:	ldr	w11, [x21, x10]
    2914:	add	w11, w11, #0x1
    2918:	str	w11, [x21, x10]
    291c:	b.ne	2904 <BZ2_blockSort@@Base+0x1200>  // b.any
    2920:	ldr	w22, [sp, #1076]
    2924:	b	292c <BZ2_blockSort@@Base+0x1228>
    2928:	mov	w22, wzr
    292c:	add	x0, sp, #0x34
    2930:	add	x1, sp, #0x434
    2934:	mov	w2, #0x400                 	// #1024
    2938:	bl	1410 <memcpy@plt>
    293c:	mov	x8, xzr
    2940:	add	x9, x21, #0x4
    2944:	ldr	w10, [x9, x8]
    2948:	add	w22, w10, w22
    294c:	str	w22, [x9, x8]
    2950:	add	x8, x8, #0x4
    2954:	cmp	x8, #0x400
    2958:	b.ne	2944 <BZ2_blockSort@@Base+0x1240>  // b.any
    295c:	ldr	w21, [sp, #32]
    2960:	cmp	w21, #0x1
    2964:	b.lt	2994 <BZ2_blockSort@@Base+0x1290>  // b.tstop
    2968:	mov	x8, xzr
    296c:	add	x9, sp, #0x434
    2970:	ldrb	w10, [x19, x8]
    2974:	lsl	x10, x10, #2
    2978:	ldrsw	x11, [x9, x10]
    297c:	sub	x11, x11, #0x1
    2980:	str	w11, [x9, x10]
    2984:	str	w8, [x20, x11, lsl #2]
    2988:	add	x8, x8, #0x1
    298c:	cmp	x28, x8
    2990:	b.ne	2970 <BZ2_blockSort@@Base+0x126c>  // b.any
    2994:	cmn	w21, #0x3f
    2998:	b.lt	29c8 <BZ2_blockSort@@Base+0x12c4>  // b.tstop
    299c:	add	w8, w21, #0x1f
    29a0:	cmp	w21, #0x0
    29a4:	csel	w8, w8, w21, lt  // lt = tstop
    29a8:	asr	w8, w8, #5
    29ac:	cmn	w21, #0x20
    29b0:	csinc	w8, wzr, w8, le
    29b4:	lsl	x8, x8, #2
    29b8:	add	x2, x8, #0x4
    29bc:	mov	x0, x23
    29c0:	mov	w1, wzr
    29c4:	bl	14a0 <memset@plt>
    29c8:	mov	x8, xzr
    29cc:	add	x9, sp, #0x434
    29d0:	mov	w10, #0x1                   	// #1
    29d4:	ldr	w11, [x9, x8]
    29d8:	add	x8, x8, #0x4
    29dc:	cmp	x8, #0x400
    29e0:	asr	w12, w11, #5
    29e4:	sbfiz	x12, x12, #2, #32
    29e8:	ldr	w13, [x23, x12]
    29ec:	lsl	w11, w10, w11
    29f0:	orr	w11, w11, w13
    29f4:	str	w11, [x23, x12]
    29f8:	b.ne	29d4 <BZ2_blockSort@@Base+0x12d0>  // b.any
    29fc:	mov	w8, wzr
    2a00:	mov	w9, #0x1                   	// #1
    2a04:	add	w10, w21, w8
    2a08:	asr	w11, w10, #5
    2a0c:	sbfiz	x11, x11, #2, #32
    2a10:	ldr	w12, [x23, x11]
    2a14:	lsl	w13, w9, w10
    2a18:	add	w10, w10, #0x1
    2a1c:	add	w8, w8, #0x2
    2a20:	orr	w12, w12, w13
    2a24:	asr	w13, w10, #5
    2a28:	sbfiz	x13, x13, #2, #32
    2a2c:	str	w12, [x23, x11]
    2a30:	ldr	w11, [x23, x13]
    2a34:	lsl	w10, w9, w10
    2a38:	cmp	w8, #0x40
    2a3c:	bic	w10, w11, w10
    2a40:	str	w10, [x23, x13]
    2a44:	b.ne	2a04 <BZ2_blockSort@@Base+0x1300>  // b.any
    2a48:	add	x8, x20, #0x4
    2a4c:	str	x8, [sp, #24]
    2a50:	add	x8, x20, #0x8
    2a54:	str	x8, [sp, #16]
    2a58:	add	x8, x20, #0x10
    2a5c:	str	x8, [sp, #8]
    2a60:	add	x8, x20, #0x14
    2a64:	mov	w24, #0x1                   	// #1
    2a68:	add	x4, sp, #0x9c8
    2a6c:	add	x5, sp, #0x838
    2a70:	mov	w22, #0x1                   	// #1
    2a74:	str	x8, [sp]
    2a78:	str	w25, [sp, #36]
    2a7c:	cmp	w25, #0x4
    2a80:	b.ge	315c <BZ2_blockSort@@Base+0x1a58>  // b.tcont
    2a84:	cmp	w21, #0x1
    2a88:	b.lt	2ac8 <BZ2_blockSort@@Base+0x13c4>  // b.tstop
    2a8c:	mov	x8, xzr
    2a90:	mov	w9, wzr
    2a94:	ubfx	x10, x8, #5, #27
    2a98:	ldr	w10, [x23, x10, lsl #2]
    2a9c:	ldr	w11, [x20, x8, lsl #2]
    2aa0:	lsr	w10, w10, w8
    2aa4:	sub	w11, w11, w22
    2aa8:	tst	w10, #0x1
    2aac:	and	w12, w28, w11, asr #31
    2ab0:	csel	w9, w9, w8, eq  // eq = none
    2ab4:	add	x8, x8, #0x1
    2ab8:	add	w10, w12, w11
    2abc:	cmp	x28, x8
    2ac0:	str	w9, [x19, w10, sxtw #2]
    2ac4:	b.ne	2a94 <BZ2_blockSort@@Base+0x1390>  // b.any
    2ac8:	stp	w22, wzr, [sp, #44]
    2acc:	mov	w22, #0xffffffff            	// #-1
    2ad0:	add	w27, w22, #0x1
    2ad4:	asr	w9, w27, #5
    2ad8:	ldr	w9, [x23, w9, sxtw #2]
    2adc:	lsl	w10, w24, w27
    2ae0:	mov	w8, w22
    2ae4:	tst	w27, #0x1f
    2ae8:	and	w9, w10, w9
    2aec:	b.eq	2af8 <BZ2_blockSort@@Base+0x13f4>  // b.none
    2af0:	mov	w22, w27
    2af4:	cbnz	w9, 2ad0 <BZ2_blockSort@@Base+0x13cc>
    2af8:	cbz	w9, 2b30 <BZ2_blockSort@@Base+0x142c>
    2afc:	sub	w9, w8, #0x1f
    2b00:	add	w9, w9, #0x20
    2b04:	asr	w10, w9, #5
    2b08:	ldr	w10, [x23, w10, sxtw #2]
    2b0c:	mov	w27, w8
    2b10:	add	w8, w8, #0x20
    2b14:	cmn	w10, #0x1
    2b18:	b.eq	2b00 <BZ2_blockSort@@Base+0x13fc>  // b.none
    2b1c:	add	w27, w27, #0x1
    2b20:	asr	w8, w27, #5
    2b24:	ldr	w8, [x23, w8, sxtw #2]
    2b28:	lsr	w8, w8, w27
    2b2c:	tbnz	w8, #0, 2b1c <BZ2_blockSort@@Base+0x1418>
    2b30:	cmp	w27, w21
    2b34:	b.gt	3134 <BZ2_blockSort@@Base+0x1a30>
    2b38:	sub	w25, w27, #0x1
    2b3c:	sub	w11, w27, #0x20
    2b40:	mov	w13, w25
    2b44:	mov	w10, w27
    2b48:	asr	w8, w10, #5
    2b4c:	ldr	w12, [x23, w8, sxtw #2]
    2b50:	mov	w8, w11
    2b54:	lsl	w11, w24, w10
    2b58:	mov	w9, w13
    2b5c:	tst	w10, #0x1f
    2b60:	and	w12, w11, w12
    2b64:	add	w10, w10, #0x1
    2b68:	b.eq	2b78 <BZ2_blockSort@@Base+0x1474>  // b.none
    2b6c:	add	w11, w8, #0x1
    2b70:	add	w13, w9, #0x1
    2b74:	cbz	w12, 2b48 <BZ2_blockSort@@Base+0x1444>
    2b78:	cbz	w12, 2b84 <BZ2_blockSort@@Base+0x1480>
    2b7c:	sub	w26, w10, #0x1
    2b80:	b	2bb0 <BZ2_blockSort@@Base+0x14ac>
    2b84:	add	w8, w8, #0x20
    2b88:	asr	w10, w8, #5
    2b8c:	ldr	w10, [x23, w10, sxtw #2]
    2b90:	mov	w26, w9
    2b94:	add	w9, w9, #0x20
    2b98:	cbz	w10, 2b84 <BZ2_blockSort@@Base+0x1480>
    2b9c:	add	w26, w26, #0x1
    2ba0:	asr	w8, w26, #5
    2ba4:	ldr	w8, [x23, w8, sxtw #2]
    2ba8:	lsr	w8, w8, w26
    2bac:	tbz	w8, #0, 2b9c <BZ2_blockSort@@Base+0x1498>
    2bb0:	cmp	w26, w21
    2bb4:	b.gt	3134 <BZ2_blockSort@@Base+0x1a30>
    2bb8:	cmp	w26, w27
    2bbc:	sub	w22, w26, #0x1
    2bc0:	b.le	2ad0 <BZ2_blockSort@@Base+0x13cc>
    2bc4:	ldr	w8, [sp, #48]
    2bc8:	str	wzr, [sp, #40]
    2bcc:	str	w25, [sp, #2504]
    2bd0:	str	w22, [sp, #2104]
    2bd4:	sub	w8, w8, w27
    2bd8:	add	w8, w8, w22
    2bdc:	add	w8, w8, #0x2
    2be0:	str	w8, [sp, #48]
    2be4:	mov	w8, #0x1                   	// #1
    2be8:	mov	w8, w8
    2bec:	b	2bf8 <BZ2_blockSort@@Base+0x14f4>
    2bf0:	cmp	x21, #0x1
    2bf4:	b.le	30dc <BZ2_blockSort@@Base+0x19d8>
    2bf8:	mov	x21, x8
    2bfc:	cmp	x8, #0x63
    2c00:	b.lt	2c14 <BZ2_blockSort@@Base+0x1510>  // b.tstop
    2c04:	mov	w0, #0x3ec                 	// #1004
    2c08:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    2c0c:	add	x5, sp, #0x838
    2c10:	add	x4, sp, #0x9c8
    2c14:	sub	x8, x21, #0x1
    2c18:	lsl	x9, x8, #2
    2c1c:	ldr	w10, [x4, x9]
    2c20:	ldr	w9, [x5, x9]
    2c24:	sxtw	x12, w10
    2c28:	sub	w11, w9, w10
    2c2c:	cmp	w11, #0x9
    2c30:	b.gt	2d34 <BZ2_blockSort@@Base+0x1630>
    2c34:	cmp	w9, w10
    2c38:	b.eq	2bf0 <BZ2_blockSort@@Base+0x14ec>  // b.none
    2c3c:	cmp	w11, #0x4
    2c40:	sxtw	x11, w9
    2c44:	b.lt	2c54 <BZ2_blockSort@@Base+0x1550>  // b.tstop
    2c48:	sub	w13, w9, #0x4
    2c4c:	cmp	w13, w10
    2c50:	b.ge	2ccc <BZ2_blockSort@@Base+0x15c8>  // b.tcont
    2c54:	cmp	w9, w10
    2c58:	b.le	2bf0 <BZ2_blockSort@@Base+0x14ec>
    2c5c:	add	x10, x20, x11, lsl #2
    2c60:	mov	x15, x11
    2c64:	b	2c80 <BZ2_blockSort@@Base+0x157c>
    2c68:	sub	w16, w15, #0x1
    2c6c:	cmp	x13, x12
    2c70:	sub	x10, x10, #0x4
    2c74:	mov	x15, x13
    2c78:	str	w14, [x20, w16, sxtw #2]
    2c7c:	b.le	2bf0 <BZ2_blockSort@@Base+0x14ec>
    2c80:	sub	x13, x15, #0x1
    2c84:	ldrsw	x14, [x20, x13, lsl #2]
    2c88:	cmp	w15, w9
    2c8c:	mov	w16, w13
    2c90:	b.gt	2c6c <BZ2_blockSort@@Base+0x1568>
    2c94:	ldr	w16, [x19, x14, lsl #2]
    2c98:	mov	x17, x10
    2c9c:	ldr	w18, [x17]
    2ca0:	ldr	w0, [x19, x18, lsl #2]
    2ca4:	cmp	w16, w0
    2ca8:	b.ls	2c68 <BZ2_blockSort@@Base+0x1564>  // b.plast
    2cac:	stur	w18, [x17, #-4]
    2cb0:	add	x18, x15, #0x1
    2cb4:	cmp	x15, x11
    2cb8:	add	x17, x17, #0x4
    2cbc:	mov	x15, x18
    2cc0:	b.lt	2c9c <BZ2_blockSort@@Base+0x1598>  // b.tstop
    2cc4:	mov	w15, w18
    2cc8:	b	2c68 <BZ2_blockSort@@Base+0x1564>
    2ccc:	sxtw	x13, w13
    2cd0:	mov	w14, w9
    2cd4:	b	2cf0 <BZ2_blockSort@@Base+0x15ec>
    2cd8:	mov	w16, w13
    2cdc:	cmp	x13, x12
    2ce0:	sub	x13, x13, #0x1
    2ce4:	sub	w14, w14, #0x1
    2ce8:	str	w15, [x20, w16, sxtw #2]
    2cec:	b.le	2c54 <BZ2_blockSort@@Base+0x1550>
    2cf0:	ldrsw	x15, [x20, x13, lsl #2]
    2cf4:	add	x16, x13, #0x4
    2cf8:	cmp	x16, x11
    2cfc:	b.gt	2cd8 <BZ2_blockSort@@Base+0x15d4>
    2d00:	ldr	w17, [x19, x15, lsl #2]
    2d04:	sxtw	x18, w14
    2d08:	mov	w16, w13
    2d0c:	ldr	w0, [x20, x18, lsl #2]
    2d10:	ldr	w1, [x19, x0, lsl #2]
    2d14:	cmp	w17, w1
    2d18:	b.ls	2cdc <BZ2_blockSort@@Base+0x15d8>  // b.plast
    2d1c:	add	x18, x18, #0x4
    2d20:	str	w0, [x20, w16, sxtw #2]
    2d24:	cmp	x18, x11
    2d28:	add	w16, w16, #0x4
    2d2c:	b.le	2d0c <BZ2_blockSort@@Base+0x1608>
    2d30:	b	2cdc <BZ2_blockSort@@Base+0x15d8>
    2d34:	ldr	w14, [sp, #40]
    2d38:	mov	w11, #0x1dc5                	// #7621
    2d3c:	orr	w13, wzr, #0x1
    2d40:	madd	w11, w14, w11, w13
    2d44:	and	w13, w11, #0x7fff
    2d48:	mov	w11, #0xaaab                	// #43691
    2d4c:	movk	w11, #0xaaaa, lsl #16
    2d50:	umull	x11, w13, w11
    2d54:	lsr	x11, x11, #33
    2d58:	add	w11, w11, w11, lsl #1
    2d5c:	str	w13, [sp, #40]
    2d60:	subs	w13, w13, w11
    2d64:	mov	w11, w10
    2d68:	b.eq	2d84 <BZ2_blockSort@@Base+0x1680>  // b.none
    2d6c:	cmp	w13, #0x1
    2d70:	b.ne	2d80 <BZ2_blockSort@@Base+0x167c>  // b.any
    2d74:	add	w11, w9, w10
    2d78:	asr	w11, w11, #1
    2d7c:	b	2d84 <BZ2_blockSort@@Base+0x1680>
    2d80:	mov	w11, w9
    2d84:	ldr	w11, [x20, w11, sxtw #2]
    2d88:	mov	w14, w9
    2d8c:	mov	w15, w9
    2d90:	mov	w13, w10
    2d94:	ldr	w16, [x19, x11, lsl #2]
    2d98:	mov	w11, w10
    2d9c:	cmp	w13, w15
    2da0:	b.gt	2e08 <BZ2_blockSort@@Base+0x1704>
    2da4:	sxtw	x17, w15
    2da8:	sxtw	x11, w11
    2dac:	sxtw	x18, w13
    2db0:	ldr	w13, [x20, x18, lsl #2]
    2db4:	ldr	w0, [x19, x13, lsl #2]
    2db8:	subs	w0, w0, w16
    2dbc:	b.eq	2ddc <BZ2_blockSort@@Base+0x16d8>  // b.none
    2dc0:	cmp	w0, #0x0
    2dc4:	b.gt	2e04 <BZ2_blockSort@@Base+0x1700>
    2dc8:	add	x13, x18, #0x1
    2dcc:	cmp	x18, x17
    2dd0:	mov	x18, x13
    2dd4:	b.lt	2db0 <BZ2_blockSort@@Base+0x16ac>  // b.tstop
    2dd8:	b	2e08 <BZ2_blockSort@@Base+0x1704>
    2ddc:	lsl	x0, x11, #2
    2de0:	ldr	w1, [x20, x0]
    2de4:	add	x11, x11, #0x1
    2de8:	cmp	w15, w18
    2dec:	str	w1, [x20, x18, lsl #2]
    2df0:	str	w13, [x20, x0]
    2df4:	add	w13, w18, #0x1
    2df8:	b.gt	2dac <BZ2_blockSort@@Base+0x16a8>
    2dfc:	add	w13, w18, #0x1
    2e00:	b	2e08 <BZ2_blockSort@@Base+0x1704>
    2e04:	mov	w13, w18
    2e08:	cmp	w13, w15
    2e0c:	b.gt	2e8c <BZ2_blockSort@@Base+0x1788>
    2e10:	sxtw	x17, w13
    2e14:	sxtw	x14, w14
    2e18:	sxtw	x18, w15
    2e1c:	ldr	w15, [x20, x18, lsl #2]
    2e20:	ldr	w0, [x19, x15, lsl #2]
    2e24:	subs	w0, w0, w16
    2e28:	b.eq	2e44 <BZ2_blockSort@@Base+0x1740>  // b.none
    2e2c:	tbnz	w0, #31, 2e68 <BZ2_blockSort@@Base+0x1764>
    2e30:	sub	x15, x18, #0x1
    2e34:	cmp	x18, x17
    2e38:	mov	x18, x15
    2e3c:	b.gt	2e1c <BZ2_blockSort@@Base+0x1718>
    2e40:	b	2e8c <BZ2_blockSort@@Base+0x1788>
    2e44:	lsl	x0, x14, #2
    2e48:	ldr	w1, [x20, x0]
    2e4c:	sub	x14, x14, #0x1
    2e50:	cmp	w13, w18
    2e54:	str	w1, [x20, x18, lsl #2]
    2e58:	str	w15, [x20, x0]
    2e5c:	sub	w15, w18, #0x1
    2e60:	b.lt	2e18 <BZ2_blockSort@@Base+0x1714>  // b.tstop
    2e64:	b	2e8c <BZ2_blockSort@@Base+0x1788>
    2e68:	lsl	x17, x17, #2
    2e6c:	ldr	w0, [x20, x17]
    2e70:	add	w13, w13, #0x1
    2e74:	str	w15, [x20, x17]
    2e78:	sub	w15, w18, #0x1
    2e7c:	str	w0, [x20, x18, lsl #2]
    2e80:	cmp	w13, w15
    2e84:	b.le	2da4 <BZ2_blockSort@@Base+0x16a0>
    2e88:	b	2e08 <BZ2_blockSort@@Base+0x1704>
    2e8c:	cmp	w14, w11
    2e90:	b.lt	30d4 <BZ2_blockSort@@Base+0x19d0>  // b.tstop
    2e94:	sub	w0, w11, w10
    2e98:	sub	w1, w13, w11
    2e9c:	cmp	w0, w1
    2ea0:	csel	w16, w0, w1, lt  // lt = tstop
    2ea4:	cmp	w16, #0x1
    2ea8:	b.lt	2f8c <BZ2_blockSort@@Base+0x1888>  // b.tstop
    2eac:	cmp	w0, w1
    2eb0:	csel	w18, w0, w1, lt  // lt = tstop
    2eb4:	cmp	w18, #0x1
    2eb8:	csinc	w18, w18, wzr, lt  // lt = tstop
    2ebc:	sub	w17, w13, w16
    2ec0:	sub	w18, w16, w18
    2ec4:	cmp	w18, #0x7
    2ec8:	sxtw	x17, w17
    2ecc:	b.cc	2f64 <BZ2_blockSort@@Base+0x1860>  // b.lo, b.ul, b.last
    2ed0:	cmp	w0, w1
    2ed4:	csel	w0, w0, w1, lt  // lt = tstop
    2ed8:	cmp	w0, #0x1
    2edc:	ldr	x3, [sp, #24]
    2ee0:	csinc	w0, w0, wzr, lt  // lt = tstop
    2ee4:	sub	w0, w16, w0
    2ee8:	add	x1, x17, x0
    2eec:	add	x2, x20, x12, lsl #2
    2ef0:	add	x1, x3, x1, lsl #2
    2ef4:	cmp	x2, x1
    2ef8:	b.cs	2f14 <BZ2_blockSort@@Base+0x1810>  // b.hs, b.nlast
    2efc:	ldr	x1, [sp, #24]
    2f00:	add	x0, x12, x0
    2f04:	add	x0, x1, x0, lsl #2
    2f08:	add	x1, x20, x17, lsl #2
    2f0c:	cmp	x1, x0
    2f10:	b.cc	2f64 <BZ2_blockSort@@Base+0x1860>  // b.lo, b.ul, b.last
    2f14:	ldr	x3, [sp, #8]
    2f18:	add	x18, x18, #0x1
    2f1c:	and	x1, x18, #0x1fffffff8
    2f20:	add	x0, x1, x12
    2f24:	add	x2, x3, x17, lsl #2
    2f28:	add	x17, x1, x17
    2f2c:	sub	w16, w16, w1
    2f30:	add	x12, x3, x12, lsl #2
    2f34:	mov	x3, x1
    2f38:	ldp	q0, q3, [x12, #-16]
    2f3c:	ldp	q1, q2, [x2, #-16]
    2f40:	subs	x3, x3, #0x8
    2f44:	stp	q1, q2, [x12, #-16]
    2f48:	stp	q0, q3, [x2, #-16]
    2f4c:	add	x2, x2, #0x20
    2f50:	add	x12, x12, #0x20
    2f54:	b.ne	2f38 <BZ2_blockSort@@Base+0x1834>  // b.any
    2f58:	cmp	x18, x1
    2f5c:	mov	x12, x0
    2f60:	b.eq	2f8c <BZ2_blockSort@@Base+0x1888>  // b.none
    2f64:	add	x12, x20, x12, lsl #2
    2f68:	add	x17, x20, x17, lsl #2
    2f6c:	add	w16, w16, #0x1
    2f70:	ldr	w18, [x17]
    2f74:	ldr	w0, [x12]
    2f78:	sub	w16, w16, #0x1
    2f7c:	cmp	w16, #0x1
    2f80:	str	w18, [x12], #4
    2f84:	str	w0, [x17], #4
    2f88:	b.gt	2f70 <BZ2_blockSort@@Base+0x186c>
    2f8c:	sub	w18, w9, w14
    2f90:	sub	w12, w14, w15
    2f94:	cmp	w18, w12
    2f98:	csel	w14, w18, w12, lt  // lt = tstop
    2f9c:	cmp	w14, #0x1
    2fa0:	b.lt	308c <BZ2_blockSort@@Base+0x1988>  // b.tstop
    2fa4:	cmp	w12, w18
    2fa8:	csel	w16, w12, w18, lt  // lt = tstop
    2fac:	cmp	w16, #0x1
    2fb0:	csinc	w16, w16, wzr, lt  // lt = tstop
    2fb4:	sub	w15, w9, w14
    2fb8:	sub	w17, w14, w16
    2fbc:	sxtw	x15, w15
    2fc0:	cmp	w17, #0x7
    2fc4:	sxtw	x16, w13
    2fc8:	b.cc	3060 <BZ2_blockSort@@Base+0x195c>  // b.lo, b.ul, b.last
    2fcc:	cmp	w12, w18
    2fd0:	csel	w18, w12, w18, lt  // lt = tstop
    2fd4:	cmp	w18, #0x1
    2fd8:	ldr	x2, [sp, #16]
    2fdc:	csinc	w18, w18, wzr, lt  // lt = tstop
    2fe0:	sub	w18, w14, w18
    2fe4:	add	x1, x15, x18
    2fe8:	add	x0, x20, x16, lsl #2
    2fec:	add	x1, x2, x1, lsl #2
    2ff0:	cmp	x0, x1
    2ff4:	b.cs	3010 <BZ2_blockSort@@Base+0x190c>  // b.hs, b.nlast
    2ff8:	ldr	x0, [sp, #24]
    2ffc:	add	x18, x16, x18
    3000:	add	x18, x0, x18, lsl #2
    3004:	add	x0, x0, x15, lsl #2
    3008:	cmp	x0, x18
    300c:	b.cc	3060 <BZ2_blockSort@@Base+0x195c>  // b.lo, b.ul, b.last
    3010:	ldp	x18, x2, [sp]
    3014:	add	x17, x17, #0x1
    3018:	and	x0, x17, #0x1fffffff8
    301c:	sub	w14, w14, w0
    3020:	add	x1, x18, x15, lsl #2
    3024:	add	x18, x0, x16
    3028:	add	x15, x0, x15
    302c:	add	x16, x2, x16, lsl #2
    3030:	mov	x2, x0
    3034:	ldp	q0, q3, [x16, #-16]
    3038:	ldp	q1, q2, [x1, #-16]
    303c:	subs	x2, x2, #0x8
    3040:	stp	q1, q2, [x16, #-16]
    3044:	stp	q0, q3, [x1, #-16]
    3048:	add	x1, x1, #0x20
    304c:	add	x16, x16, #0x20
    3050:	b.ne	3034 <BZ2_blockSort@@Base+0x1930>  // b.any
    3054:	cmp	x17, x0
    3058:	mov	x16, x18
    305c:	b.eq	308c <BZ2_blockSort@@Base+0x1988>  // b.none
    3060:	ldr	x17, [sp, #24]
    3064:	add	x16, x20, x16, lsl #2
    3068:	add	w14, w14, #0x1
    306c:	add	x15, x17, x15, lsl #2
    3070:	ldr	w17, [x15]
    3074:	ldr	w18, [x16]
    3078:	sub	w14, w14, #0x1
    307c:	cmp	w14, #0x1
    3080:	str	w17, [x16], #4
    3084:	str	w18, [x15], #4
    3088:	b.gt	3070 <BZ2_blockSort@@Base+0x196c>
    308c:	mvn	w11, w11
    3090:	sub	w12, w9, w12
    3094:	add	w14, w10, w11
    3098:	add	w11, w12, #0x1
    309c:	add	w12, w14, w13
    30a0:	sub	w13, w12, w10
    30a4:	sub	w14, w9, w11
    30a8:	cmp	w13, w14
    30ac:	b.le	30b8 <BZ2_blockSort@@Base+0x19b4>
    30b0:	str	w12, [x5, x8, lsl #2]
    30b4:	b	30c4 <BZ2_blockSort@@Base+0x19c0>
    30b8:	str	w11, [x4, x8, lsl #2]
    30bc:	mov	w11, w10
    30c0:	mov	w9, w12
    30c4:	sbfiz	x8, x21, #2, #32
    30c8:	str	w11, [x4, x8]
    30cc:	str	w9, [x5, x8]
    30d0:	add	w8, w21, #0x1
    30d4:	cmp	w8, #0x0
    30d8:	b.gt	2be8 <BZ2_blockSort@@Base+0x14e4>
    30dc:	ldr	w21, [sp, #32]
    30e0:	cmp	w27, w26
    30e4:	b.gt	2ad0 <BZ2_blockSort@@Base+0x13cc>
    30e8:	sxtw	x8, w25
    30ec:	sxtw	x9, w26
    30f0:	mov	w10, #0xffffffff            	// #-1
    30f4:	b	3104 <BZ2_blockSort@@Base+0x1a00>
    30f8:	add	x8, x8, #0x1
    30fc:	cmp	x8, x9
    3100:	b.ge	2ad0 <BZ2_blockSort@@Base+0x13cc>  // b.tcont
    3104:	ldr	w11, [x20, x8, lsl #2]
    3108:	ldr	w11, [x19, x11, lsl #2]
    310c:	cmp	w10, w11
    3110:	b.eq	30f8 <BZ2_blockSort@@Base+0x19f4>  // b.none
    3114:	asr	w10, w8, #5
    3118:	sbfiz	x10, x10, #2, #32
    311c:	ldr	w12, [x23, x10]
    3120:	lsl	w13, w24, w8
    3124:	orr	w12, w12, w13
    3128:	str	w12, [x23, x10]
    312c:	mov	w10, w11
    3130:	b	30f8 <BZ2_blockSort@@Base+0x19f4>
    3134:	ldr	w25, [sp, #36]
    3138:	ldr	w26, [sp, #48]
    313c:	cmp	w25, #0x4
    3140:	b.ge	318c <BZ2_blockSort@@Base+0x1a88>  // b.tcont
    3144:	ldr	w22, [sp, #44]
    3148:	lsl	w22, w22, #1
    314c:	cmp	w22, w21
    3150:	b.gt	31b4 <BZ2_blockSort@@Base+0x1ab0>
    3154:	cbnz	w26, 2a7c <BZ2_blockSort@@Base+0x1378>
    3158:	b	31b4 <BZ2_blockSort@@Base+0x1ab0>
    315c:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    3160:	ldr	x8, [x8, #4016]
    3164:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    3168:	add	x1, x1, #0x8e8
    316c:	mov	w2, w22
    3170:	ldr	x0, [x8]
    3174:	bl	1610 <fprintf@plt>
    3178:	add	x5, sp, #0x838
    317c:	add	x4, sp, #0x9c8
    3180:	cmp	w21, #0x1
    3184:	b.ge	2a8c <BZ2_blockSort@@Base+0x1388>  // b.tcont
    3188:	b	2ac8 <BZ2_blockSort@@Base+0x13c4>
    318c:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    3190:	ldr	x8, [x8, #4016]
    3194:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    3198:	add	x1, x1, #0x8ff
    319c:	mov	w2, w26
    31a0:	ldr	x0, [x8]
    31a4:	bl	1610 <fprintf@plt>
    31a8:	add	x5, sp, #0x838
    31ac:	add	x4, sp, #0x9c8
    31b0:	b	3144 <BZ2_blockSort@@Base+0x1a40>
    31b4:	cmp	w25, #0x4
    31b8:	b.ge	3260 <BZ2_blockSort@@Base+0x1b5c>  // b.tcont
    31bc:	cmp	w21, #0x1
    31c0:	b.lt	321c <BZ2_blockSort@@Base+0x1b18>  // b.tstop
    31c4:	mov	x8, xzr
    31c8:	mov	x11, xzr
    31cc:	add	x9, sp, #0x34
    31d0:	sxtw	x11, w11
    31d4:	sub	w10, w11, #0x1
    31d8:	ldr	w12, [x9, x11, lsl #2]
    31dc:	add	x11, x11, #0x1
    31e0:	add	w10, w10, #0x1
    31e4:	cbz	w12, 31d8 <BZ2_blockSort@@Base+0x1ad4>
    31e8:	add	x13, x9, x11, lsl #2
    31ec:	sub	w12, w12, #0x1
    31f0:	stur	w12, [x13, #-4]
    31f4:	ldr	w12, [x20, x8, lsl #2]
    31f8:	add	x8, x8, #0x1
    31fc:	sub	x11, x11, #0x1
    3200:	cmp	x8, x28
    3204:	strb	w11, [x19, x12]
    3208:	b.ne	31d0 <BZ2_blockSort@@Base+0x1acc>  // b.any
    320c:	cmp	w10, #0x100
    3210:	b.lt	321c <BZ2_blockSort@@Base+0x1b18>  // b.tstop
    3214:	mov	w0, #0x3ed                 	// #1005
    3218:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    321c:	add	sp, sp, #0xb60
    3220:	ldp	x20, x19, [sp, #80]
    3224:	ldp	x22, x21, [sp, #64]
    3228:	ldp	x24, x23, [sp, #48]
    322c:	ldp	x26, x25, [sp, #32]
    3230:	ldp	x28, x27, [sp, #16]
    3234:	ldp	x29, x30, [sp], #96
    3238:	ret
    323c:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    3240:	ldr	x8, [x8, #4016]
    3244:	adrp	x0, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    3248:	add	x0, x0, #0x8cc
    324c:	mov	w1, #0x1b                  	// #27
    3250:	ldr	x3, [x8]
    3254:	mov	w2, #0x1                   	// #1
    3258:	bl	15b0 <fwrite@plt>
    325c:	b	28d4 <BZ2_blockSort@@Base+0x11d0>
    3260:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    3264:	ldr	x8, [x8, #4016]
    3268:	adrp	x0, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    326c:	add	x0, x0, #0x917
    3270:	mov	w1, #0x21                  	// #33
    3274:	ldr	x3, [x8]
    3278:	mov	w2, #0x1                   	// #1
    327c:	bl	15b0 <fwrite@plt>
    3280:	cmp	w21, #0x1
    3284:	b.ge	31c4 <BZ2_blockSort@@Base+0x1ac0>  // b.tcont
    3288:	b	321c <BZ2_blockSort@@Base+0x1b18>
    328c:	ldrb	w8, [x2, w0, uxtw]
    3290:	ldrb	w9, [x2, w1, uxtw]
    3294:	cmp	w8, w9
    3298:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    329c:	add	w8, w0, #0x1
    32a0:	add	w9, w1, #0x1
    32a4:	ldrb	w8, [x2, w8, uxtw]
    32a8:	ldrb	w9, [x2, w9, uxtw]
    32ac:	cmp	w8, w9
    32b0:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    32b4:	add	w8, w0, #0x2
    32b8:	add	w9, w1, #0x2
    32bc:	ldrb	w8, [x2, w8, uxtw]
    32c0:	ldrb	w9, [x2, w9, uxtw]
    32c4:	cmp	w8, w9
    32c8:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    32cc:	add	w8, w0, #0x3
    32d0:	add	w9, w1, #0x3
    32d4:	ldrb	w8, [x2, w8, uxtw]
    32d8:	ldrb	w9, [x2, w9, uxtw]
    32dc:	cmp	w8, w9
    32e0:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    32e4:	add	w8, w0, #0x4
    32e8:	add	w9, w1, #0x4
    32ec:	ldrb	w8, [x2, w8, uxtw]
    32f0:	ldrb	w9, [x2, w9, uxtw]
    32f4:	cmp	w8, w9
    32f8:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    32fc:	add	w8, w0, #0x5
    3300:	add	w9, w1, #0x5
    3304:	ldrb	w8, [x2, w8, uxtw]
    3308:	ldrb	w9, [x2, w9, uxtw]
    330c:	cmp	w8, w9
    3310:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3314:	add	w8, w0, #0x6
    3318:	add	w9, w1, #0x6
    331c:	ldrb	w8, [x2, w8, uxtw]
    3320:	ldrb	w9, [x2, w9, uxtw]
    3324:	cmp	w8, w9
    3328:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    332c:	add	w8, w0, #0x7
    3330:	add	w9, w1, #0x7
    3334:	ldrb	w8, [x2, w8, uxtw]
    3338:	ldrb	w9, [x2, w9, uxtw]
    333c:	cmp	w8, w9
    3340:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3344:	add	w8, w0, #0x8
    3348:	add	w9, w1, #0x8
    334c:	ldrb	w8, [x2, w8, uxtw]
    3350:	ldrb	w9, [x2, w9, uxtw]
    3354:	cmp	w8, w9
    3358:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    335c:	add	w8, w0, #0x9
    3360:	add	w9, w1, #0x9
    3364:	ldrb	w8, [x2, w8, uxtw]
    3368:	ldrb	w9, [x2, w9, uxtw]
    336c:	cmp	w8, w9
    3370:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3374:	add	w8, w0, #0xa
    3378:	add	w9, w1, #0xa
    337c:	ldrb	w8, [x2, w8, uxtw]
    3380:	ldrb	w9, [x2, w9, uxtw]
    3384:	cmp	w8, w9
    3388:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    338c:	add	w8, w0, #0xb
    3390:	add	w9, w1, #0xb
    3394:	ldrb	w8, [x2, w8, uxtw]
    3398:	ldrb	w9, [x2, w9, uxtw]
    339c:	cmp	w8, w9
    33a0:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    33a4:	add	w9, w0, #0xc
    33a8:	add	w10, w1, #0xc
    33ac:	add	w8, w4, #0x10
    33b0:	mov	w9, w9
    33b4:	mov	w10, w10
    33b8:	ldrb	w11, [x2, x9]
    33bc:	ldrb	w12, [x2, x10]
    33c0:	cmp	w11, w12
    33c4:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    33c8:	ldrh	w11, [x3, x9, lsl #1]
    33cc:	ldrh	w12, [x3, x10, lsl #1]
    33d0:	cmp	w11, w12
    33d4:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    33d8:	add	w11, w9, #0x1
    33dc:	add	w12, w10, #0x1
    33e0:	ldrb	w13, [x2, x11]
    33e4:	ldrb	w14, [x2, x12]
    33e8:	cmp	w13, w14
    33ec:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    33f0:	ldrh	w11, [x3, x11, lsl #1]
    33f4:	ldrh	w12, [x3, x12, lsl #1]
    33f8:	cmp	w11, w12
    33fc:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3400:	add	w11, w9, #0x2
    3404:	add	w12, w10, #0x2
    3408:	ldrb	w13, [x2, x11]
    340c:	ldrb	w14, [x2, x12]
    3410:	cmp	w13, w14
    3414:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3418:	ldrh	w11, [x3, x11, lsl #1]
    341c:	ldrh	w12, [x3, x12, lsl #1]
    3420:	cmp	w11, w12
    3424:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3428:	add	w11, w9, #0x3
    342c:	add	w12, w10, #0x3
    3430:	ldrb	w13, [x2, x11]
    3434:	ldrb	w14, [x2, x12]
    3438:	cmp	w13, w14
    343c:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3440:	ldrh	w11, [x3, x11, lsl #1]
    3444:	ldrh	w12, [x3, x12, lsl #1]
    3448:	cmp	w11, w12
    344c:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3450:	add	w11, w9, #0x4
    3454:	add	w12, w10, #0x4
    3458:	ldrb	w13, [x2, x11]
    345c:	ldrb	w14, [x2, x12]
    3460:	cmp	w13, w14
    3464:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3468:	ldrh	w11, [x3, x11, lsl #1]
    346c:	ldrh	w12, [x3, x12, lsl #1]
    3470:	cmp	w11, w12
    3474:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3478:	add	w11, w9, #0x5
    347c:	add	w12, w10, #0x5
    3480:	ldrb	w13, [x2, x11]
    3484:	ldrb	w14, [x2, x12]
    3488:	cmp	w13, w14
    348c:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    3490:	ldrh	w11, [x3, x11, lsl #1]
    3494:	ldrh	w12, [x3, x12, lsl #1]
    3498:	cmp	w11, w12
    349c:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    34a0:	add	w11, w9, #0x6
    34a4:	add	w12, w10, #0x6
    34a8:	ldrb	w13, [x2, x11]
    34ac:	ldrb	w14, [x2, x12]
    34b0:	cmp	w13, w14
    34b4:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    34b8:	ldrh	w11, [x3, x11, lsl #1]
    34bc:	ldrh	w12, [x3, x12, lsl #1]
    34c0:	cmp	w11, w12
    34c4:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    34c8:	add	w11, w9, #0x7
    34cc:	add	w12, w10, #0x7
    34d0:	ldrb	w13, [x2, x11]
    34d4:	ldrb	w14, [x2, x12]
    34d8:	cmp	w13, w14
    34dc:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    34e0:	ldrh	w11, [x3, x11, lsl #1]
    34e4:	ldrh	w12, [x3, x12, lsl #1]
    34e8:	cmp	w11, w12
    34ec:	b.ne	3530 <BZ2_blockSort@@Base+0x1e2c>  // b.any
    34f0:	add	w9, w9, #0x8
    34f4:	ldr	w11, [x5]
    34f8:	add	w10, w10, #0x8
    34fc:	cmp	w9, w4
    3500:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    3504:	cmp	w10, w4
    3508:	sub	w8, w8, #0x8
    350c:	sub	w9, w9, w12
    3510:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    3514:	mov	w0, wzr
    3518:	sub	w10, w10, w12
    351c:	sub	w11, w11, #0x1
    3520:	cmp	w8, #0x7
    3524:	str	w11, [x5]
    3528:	b.gt	33b0 <BZ2_blockSort@@Base+0x1cac>
    352c:	ret
    3530:	cset	w0, hi  // hi = pmore
    3534:	ret

0000000000003538 <BZ2_hbMakeCodeLengths@@Base>:
    3538:	stp	x29, x30, [sp, #-96]!
    353c:	stp	x28, x27, [sp, #16]
    3540:	stp	x26, x25, [sp, #32]
    3544:	stp	x24, x23, [sp, #48]
    3548:	stp	x22, x21, [sp, #64]
    354c:	stp	x20, x19, [sp, #80]
    3550:	mov	x29, sp
    3554:	sub	sp, sp, #0x1, lsl #12
    3558:	sub	sp, sp, #0x460
    355c:	mov	w19, w3
    3560:	mov	w20, w2
    3564:	cmp	w2, #0x1
    3568:	mov	x21, x0
    356c:	b.lt	35f8 <BZ2_hbMakeCodeLengths@@Base+0xc0>  // b.tstop
    3570:	cmp	w20, #0x3
    3574:	mov	w8, w20
    3578:	b.hi	3584 <BZ2_hbMakeCodeLengths@@Base+0x4c>  // b.pmore
    357c:	mov	x9, xzr
    3580:	b	35c0 <BZ2_hbMakeCodeLengths@@Base+0x88>
    3584:	and	x9, x8, #0xfffffffc
    3588:	add	x10, sp, #0x838
    358c:	add	x10, x10, #0x4
    3590:	movi	v0.4s, #0x1, lsl #8
    3594:	mov	x11, x9
    3598:	mov	x12, x1
    359c:	ldr	q1, [x12], #16
    35a0:	subs	x11, x11, #0x4
    35a4:	cmeq	v2.4s, v1.4s, #0
    35a8:	shl	v1.4s, v1.4s, #8
    35ac:	bsl	v2.16b, v0.16b, v1.16b
    35b0:	str	q2, [x10], #16
    35b4:	b.ne	359c <BZ2_hbMakeCodeLengths@@Base+0x64>  // b.any
    35b8:	cmp	x9, x8
    35bc:	b.eq	35f8 <BZ2_hbMakeCodeLengths@@Base+0xc0>  // b.none
    35c0:	lsl	x10, x9, #2
    35c4:	add	x11, sp, #0x838
    35c8:	sub	x8, x8, x9
    35cc:	add	x9, x1, x10
    35d0:	add	x10, x10, x11
    35d4:	add	x10, x10, #0x4
    35d8:	mov	w11, #0x100                 	// #256
    35dc:	ldr	w12, [x9], #4
    35e0:	lsl	w13, w12, #8
    35e4:	cmp	w12, #0x0
    35e8:	csel	w12, w11, w13, eq  // eq = none
    35ec:	subs	x8, x8, #0x1
    35f0:	str	w12, [x10], #4
    35f4:	b.ne	35dc <BZ2_hbMakeCodeLengths@@Base+0xa4>  // b.any
    35f8:	mov	w8, #0xfffffffe            	// #-2
    35fc:	cmp	w20, #0x1
    3600:	str	wzr, [sp, #4168]
    3604:	str	wzr, [sp, #2104]
    3608:	str	w8, [sp, #40]
    360c:	b.lt	39b8 <BZ2_hbMakeCodeLengths@@Base+0x480>  // b.tstop
    3610:	add	w24, w20, #0x1
    3614:	add	x26, sp, #0x838
    3618:	sub	x22, x24, #0x1
    361c:	add	x10, x26, #0x4
    3620:	str	x10, [sp, #16]
    3624:	and	x10, x22, #0xfffffffffffffffc
    3628:	sxtw	x9, w20
    362c:	add	x23, sp, #0x1, lsl #12
    3630:	str	x10, [sp, #32]
    3634:	orr	x10, x10, #0x1
    3638:	mov	x8, xzr
    363c:	str	x9, [sp, #24]
    3640:	mov	w25, w20
    3644:	mov	w9, #0x1                   	// #1
    3648:	add	x27, sp, #0x28
    364c:	mov	w28, #0xffffffff            	// #-1
    3650:	add	x23, x23, #0x48
    3654:	str	x10, [sp, #8]
    3658:	b	367c <BZ2_hbMakeCodeLengths@@Base+0x144>
    365c:	mov	w9, #0xfffffffe            	// #-2
    3660:	mov	x8, xzr
    3664:	str	w9, [sp, #40]
    3668:	cmp	w20, #0x1
    366c:	mov	w9, #0x1                   	// #1
    3670:	str	wzr, [sp, #4168]
    3674:	str	wzr, [sp, #2104]
    3678:	b.lt	39b8 <BZ2_hbMakeCodeLengths@@Base+0x480>  // b.tstop
    367c:	add	x8, x8, #0x1
    3680:	add	x10, x23, x8, lsl #2
    3684:	str	w9, [x10]
    3688:	ubfx	x12, x8, #1, #31
    368c:	ldrsw	x13, [x23, w12, uxtw #2]
    3690:	lsl	x14, x9, #2
    3694:	ldr	w11, [x26, x14]
    3698:	str	w28, [x27, x14]
    369c:	ldr	w15, [x26, x13, lsl #2]
    36a0:	cmp	w11, w15
    36a4:	b.ge	36c8 <BZ2_hbMakeCodeLengths@@Base+0x190>  // b.tcont
    36a8:	str	w13, [x10]
    36ac:	asr	w14, w12, #1
    36b0:	ldrsw	x13, [x23, w14, sxtw #2]
    36b4:	ldr	w10, [x26, x13, lsl #2]
    36b8:	cmp	w11, w10
    36bc:	add	x10, x23, w12, sxtw #2
    36c0:	mov	w12, w14
    36c4:	b.lt	36a8 <BZ2_hbMakeCodeLengths@@Base+0x170>  // b.tstop
    36c8:	str	w9, [x10]
    36cc:	cmp	x8, x25
    36d0:	add	x9, x9, #0x1
    36d4:	b.ne	367c <BZ2_hbMakeCodeLengths@@Base+0x144>  // b.any
    36d8:	cmp	w20, #0x104
    36dc:	b.cc	36e8 <BZ2_hbMakeCodeLengths@@Base+0x1b0>  // b.lo, b.ul, b.last
    36e0:	mov	w0, #0x7d1                 	// #2001
    36e4:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    36e8:	cmp	w20, #0x2
    36ec:	mov	w8, w20
    36f0:	b.lt	38c4 <BZ2_hbMakeCodeLengths@@Base+0x38c>  // b.tstop
    36f4:	ldr	x8, [sp, #24]
    36f8:	mov	x9, x25
    36fc:	b	3710 <BZ2_hbMakeCodeLengths@@Base+0x1d8>
    3700:	cmp	x9, #0x2
    3704:	mov	x9, x10
    3708:	str	w8, [x12]
    370c:	b.le	38c4 <BZ2_hbMakeCodeLengths@@Base+0x38c>
    3710:	ldr	w12, [x23, x9, lsl #2]
    3714:	ldrsw	x11, [sp, #4172]
    3718:	cmp	x9, #0x3
    371c:	sub	x10, x9, #0x1
    3720:	str	w12, [sp, #4172]
    3724:	b.lt	3794 <BZ2_hbMakeCodeLengths@@Base+0x25c>  // b.tstop
    3728:	sxtw	x13, w12
    372c:	ldr	w13, [x26, x13, lsl #2]
    3730:	mov	w14, #0x1                   	// #1
    3734:	mov	w16, #0x2                   	// #2
    3738:	sxtw	x17, w16
    373c:	cmp	x10, x17
    3740:	b.le	3768 <BZ2_hbMakeCodeLengths@@Base+0x230>
    3744:	orr	x15, x17, #0x1
    3748:	ldrsw	x18, [x23, x15, lsl #2]
    374c:	ldrsw	x17, [x23, x17, lsl #2]
    3750:	ldr	w18, [x26, x18, lsl #2]
    3754:	ldr	w17, [x26, x17, lsl #2]
    3758:	cmp	w18, w17
    375c:	csel	w15, w15, w16, lt  // lt = tstop
    3760:	sxtw	x17, w15
    3764:	b	376c <BZ2_hbMakeCodeLengths@@Base+0x234>
    3768:	mov	w15, w16
    376c:	ldrsw	x17, [x23, x17, lsl #2]
    3770:	ldr	w16, [x26, x17, lsl #2]
    3774:	cmp	w13, w16
    3778:	b.lt	379c <BZ2_hbMakeCodeLengths@@Base+0x264>  // b.tstop
    377c:	lsl	w16, w15, #1
    3780:	cmp	x9, w16, sxtw
    3784:	str	w17, [x23, w14, sxtw #2]
    3788:	mov	w14, w15
    378c:	b.gt	3738 <BZ2_hbMakeCodeLengths@@Base+0x200>
    3790:	b	37a0 <BZ2_hbMakeCodeLengths@@Base+0x268>
    3794:	mov	w15, #0x1                   	// #1
    3798:	b	37a0 <BZ2_hbMakeCodeLengths@@Base+0x268>
    379c:	mov	w15, w14
    37a0:	str	w12, [x23, w15, sxtw #2]
    37a4:	add	x12, x23, x10, lsl #2
    37a8:	ldr	w14, [x12]
    37ac:	ldrsw	x13, [sp, #4172]
    37b0:	cmp	x9, #0x3
    37b4:	str	w14, [sp, #4172]
    37b8:	b.gt	37c4 <BZ2_hbMakeCodeLengths@@Base+0x28c>
    37bc:	mov	w18, #0x1                   	// #1
    37c0:	b	3838 <BZ2_hbMakeCodeLengths@@Base+0x300>
    37c4:	sxtw	x15, w14
    37c8:	ldr	w15, [x26, x15, lsl #2]
    37cc:	sub	x16, x9, #0x2
    37d0:	mov	w17, #0x1                   	// #1
    37d4:	mov	w0, #0x2                   	// #2
    37d8:	sxtw	x1, w0
    37dc:	cmp	x16, x1
    37e0:	b.le	3808 <BZ2_hbMakeCodeLengths@@Base+0x2d0>
    37e4:	orr	x18, x1, #0x1
    37e8:	ldrsw	x2, [x23, x18, lsl #2]
    37ec:	ldrsw	x1, [x23, x1, lsl #2]
    37f0:	ldr	w2, [x26, x2, lsl #2]
    37f4:	ldr	w1, [x26, x1, lsl #2]
    37f8:	cmp	w2, w1
    37fc:	csel	w18, w18, w0, lt  // lt = tstop
    3800:	sxtw	x1, w18
    3804:	b	380c <BZ2_hbMakeCodeLengths@@Base+0x2d4>
    3808:	mov	w18, w0
    380c:	ldrsw	x1, [x23, x1, lsl #2]
    3810:	ldr	w0, [x26, x1, lsl #2]
    3814:	cmp	w15, w0
    3818:	b.lt	3834 <BZ2_hbMakeCodeLengths@@Base+0x2fc>  // b.tstop
    381c:	lsl	w0, w18, #1
    3820:	cmp	x16, w0, sxtw
    3824:	str	w1, [x23, w17, sxtw #2]
    3828:	mov	w17, w18
    382c:	b.ge	37d8 <BZ2_hbMakeCodeLengths@@Base+0x2a0>  // b.tcont
    3830:	b	3838 <BZ2_hbMakeCodeLengths@@Base+0x300>
    3834:	mov	w18, w17
    3838:	lsl	x15, x13, #2
    383c:	lsl	x16, x11, #2
    3840:	ldr	w13, [x26, x16]
    3844:	ldr	w17, [x26, x15]
    3848:	str	w14, [x23, w18, sxtw #2]
    384c:	add	x8, x8, #0x1
    3850:	and	w14, w13, #0xffffff00
    3854:	and	w18, w17, #0xffffff00
    3858:	and	w13, w13, #0xff
    385c:	and	w17, w17, #0xff
    3860:	asr	w11, w10, #1
    3864:	str	w8, [x23, x10, lsl #2]
    3868:	cmp	w13, w17
    386c:	add	w18, w18, w14
    3870:	ldrsw	x14, [x23, w11, sxtw #2]
    3874:	csel	w13, w13, w17, hi  // hi = pmore
    3878:	add	w13, w13, #0x1
    387c:	orr	w13, w13, w18
    3880:	lsl	x17, x8, #2
    3884:	str	w13, [x26, x17]
    3888:	ldr	w18, [x26, x14, lsl #2]
    388c:	str	w8, [x27, x15]
    3890:	str	w8, [x27, x16]
    3894:	str	w28, [x27, x17]
    3898:	cmp	w13, w18
    389c:	b.ge	3700 <BZ2_hbMakeCodeLengths@@Base+0x1c8>  // b.tcont
    38a0:	str	w14, [x12]
    38a4:	asr	w15, w11, #1
    38a8:	ldrsw	x14, [x23, w15, sxtw #2]
    38ac:	ldr	w12, [x26, x14, lsl #2]
    38b0:	cmp	w13, w12
    38b4:	add	x12, x23, w11, sxtw #2
    38b8:	mov	w11, w15
    38bc:	b.lt	38a0 <BZ2_hbMakeCodeLengths@@Base+0x368>  // b.tstop
    38c0:	b	3700 <BZ2_hbMakeCodeLengths@@Base+0x1c8>
    38c4:	cmp	w8, #0x204
    38c8:	b.lt	38d4 <BZ2_hbMakeCodeLengths@@Base+0x39c>  // b.tstop
    38cc:	mov	w0, #0x7d2                 	// #2002
    38d0:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    38d4:	cmp	w20, #0x1
    38d8:	movi	v2.4s, #0x1, lsl #8
    38dc:	b.lt	39b8 <BZ2_hbMakeCodeLengths@@Base+0x480>  // b.tstop
    38e0:	mov	w8, wzr
    38e4:	mov	w9, #0x1                   	// #1
    38e8:	mov	w10, #0xffffffff            	// #-1
    38ec:	mov	w11, w9
    38f0:	ldr	w11, [x27, w11, sxtw #2]
    38f4:	add	w10, w10, #0x1
    38f8:	tbz	w11, #31, 38f0 <BZ2_hbMakeCodeLengths@@Base+0x3b8>
    38fc:	add	x11, x9, x21
    3900:	cmp	w10, w19
    3904:	add	x9, x9, #0x1
    3908:	csinc	w8, w8, wzr, le
    390c:	cmp	x9, x24
    3910:	sturb	w10, [x11, #-1]
    3914:	b.ne	38e8 <BZ2_hbMakeCodeLengths@@Base+0x3b0>  // b.any
    3918:	tst	w8, #0xff
    391c:	b.eq	39b8 <BZ2_hbMakeCodeLengths@@Base+0x480>  // b.none
    3920:	cmp	w20, #0x1
    3924:	b.lt	39a8 <BZ2_hbMakeCodeLengths@@Base+0x470>  // b.tstop
    3928:	cmp	x22, #0x4
    392c:	b.cs	3938 <BZ2_hbMakeCodeLengths@@Base+0x400>  // b.hs, b.nlast
    3930:	mov	w9, #0x1                   	// #1
    3934:	b	3974 <BZ2_hbMakeCodeLengths@@Base+0x43c>
    3938:	ldr	x8, [sp, #32]
    393c:	ldr	x9, [sp, #16]
    3940:	ldr	q0, [x9]
    3944:	subs	x8, x8, #0x4
    3948:	sshr	v1.4s, v0.4s, #8
    394c:	usra	v1.4s, v0.4s, #31
    3950:	shl	v0.4s, v1.4s, #7
    3954:	bic	v0.4s, #0xff
    3958:	add	v0.4s, v0.4s, v2.4s
    395c:	str	q0, [x9], #16
    3960:	b.ne	3940 <BZ2_hbMakeCodeLengths@@Base+0x408>  // b.any
    3964:	ldr	x8, [sp, #32]
    3968:	ldr	x9, [sp, #8]
    396c:	cmp	x22, x8
    3970:	b.eq	365c <BZ2_hbMakeCodeLengths@@Base+0x124>  // b.none
    3974:	add	x8, x26, x9, lsl #2
    3978:	sub	x9, x24, x9
    397c:	ldr	w10, [x8]
    3980:	asr	w10, w10, #8
    3984:	cmp	w10, #0x0
    3988:	cinc	w10, w10, lt  // lt = tstop
    398c:	lsl	w10, w10, #7
    3990:	and	w10, w10, #0xffffff00
    3994:	add	w10, w10, #0x100
    3998:	subs	x9, x9, #0x1
    399c:	str	w10, [x8], #4
    39a0:	b.ne	397c <BZ2_hbMakeCodeLengths@@Base+0x444>  // b.any
    39a4:	b	365c <BZ2_hbMakeCodeLengths@@Base+0x124>
    39a8:	mov	w8, #0xfffffffe            	// #-2
    39ac:	str	wzr, [sp, #4168]
    39b0:	str	wzr, [sp, #2104]
    39b4:	str	w8, [sp, #40]
    39b8:	add	sp, sp, #0x1, lsl #12
    39bc:	add	sp, sp, #0x460
    39c0:	ldp	x20, x19, [sp, #80]
    39c4:	ldp	x22, x21, [sp, #64]
    39c8:	ldp	x24, x23, [sp, #48]
    39cc:	ldp	x26, x25, [sp, #32]
    39d0:	ldp	x28, x27, [sp, #16]
    39d4:	ldp	x29, x30, [sp], #96
    39d8:	ret

00000000000039dc <BZ2_hbAssignCodes@@Base>:
    39dc:	cmp	w2, w3
    39e0:	b.le	39e8 <BZ2_hbAssignCodes@@Base+0xc>
    39e4:	ret
    39e8:	mov	w8, wzr
    39ec:	mov	w9, w4
    39f0:	b	3a04 <BZ2_hbAssignCodes@@Base+0x28>
    39f4:	cmp	w2, w3
    39f8:	add	w2, w2, #0x1
    39fc:	lsl	w8, w8, #1
    3a00:	b.ge	39e4 <BZ2_hbAssignCodes@@Base+0x8>  // b.tcont
    3a04:	cmp	w4, #0x1
    3a08:	b.lt	39f4 <BZ2_hbAssignCodes@@Base+0x18>  // b.tstop
    3a0c:	mov	x10, x9
    3a10:	mov	x11, x1
    3a14:	mov	x12, x0
    3a18:	b	3a2c <BZ2_hbAssignCodes@@Base+0x50>
    3a1c:	add	x12, x12, #0x4
    3a20:	subs	x10, x10, #0x1
    3a24:	add	x11, x11, #0x1
    3a28:	b.eq	39f4 <BZ2_hbAssignCodes@@Base+0x18>  // b.none
    3a2c:	ldrb	w13, [x11]
    3a30:	cmp	w2, w13
    3a34:	b.ne	3a1c <BZ2_hbAssignCodes@@Base+0x40>  // b.any
    3a38:	str	w8, [x12]
    3a3c:	add	w8, w8, #0x1
    3a40:	b	3a1c <BZ2_hbAssignCodes@@Base+0x40>

0000000000003a44 <BZ2_hbCreateDecodeTables@@Base>:
    3a44:	str	x25, [sp, #-64]!
    3a48:	stp	x24, x23, [sp, #16]
    3a4c:	stp	x22, x21, [sp, #32]
    3a50:	stp	x20, x19, [sp, #48]
    3a54:	cmp	w4, w5
    3a58:	b.le	3ac8 <BZ2_hbCreateDecodeTables@@Base+0x84>
    3a5c:	movi	v0.2d, #0x0
    3a60:	cmp	w6, #0x0
    3a64:	stur	q0, [x1, #76]
    3a68:	stp	q0, q0, [x1, #48]
    3a6c:	stp	q0, q0, [x1, #16]
    3a70:	str	q0, [x1]
    3a74:	b.le	3b18 <BZ2_hbCreateDecodeTables@@Base+0xd4>
    3a78:	mov	w8, w6
    3a7c:	ldrb	w9, [x3], #1
    3a80:	subs	x8, x8, #0x1
    3a84:	add	x9, x1, x9, lsl #2
    3a88:	ldr	w10, [x9, #4]
    3a8c:	add	w10, w10, #0x1
    3a90:	str	w10, [x9, #4]
    3a94:	b.ne	3a7c <BZ2_hbCreateDecodeTables@@Base+0x38>  // b.any
    3a98:	ldp	w8, w25, [x1, #4]
    3a9c:	ldp	w18, w24, [x1, #12]
    3aa0:	ldp	w17, w23, [x1, #20]
    3aa4:	ldp	w16, w22, [x1, #28]
    3aa8:	ldp	w15, w21, [x1, #36]
    3aac:	ldp	w14, w20, [x1, #44]
    3ab0:	ldp	w13, w19, [x1, #52]
    3ab4:	ldp	w12, w7, [x1, #60]
    3ab8:	ldp	w11, w6, [x1, #68]
    3abc:	ldp	w10, w3, [x1, #76]
    3ac0:	ldp	w9, w2, [x1, #84]
    3ac4:	b	3b70 <BZ2_hbCreateDecodeTables@@Base+0x12c>
    3ac8:	mov	w8, wzr
    3acc:	mov	w9, w6
    3ad0:	mov	w10, w4
    3ad4:	b	3ae4 <BZ2_hbCreateDecodeTables@@Base+0xa0>
    3ad8:	cmp	w10, w5
    3adc:	add	w10, w10, #0x1
    3ae0:	b.ge	3a5c <BZ2_hbCreateDecodeTables@@Base+0x18>  // b.tcont
    3ae4:	cmp	w6, #0x1
    3ae8:	b.lt	3ad8 <BZ2_hbCreateDecodeTables@@Base+0x94>  // b.tstop
    3aec:	mov	x11, xzr
    3af0:	b	3b00 <BZ2_hbCreateDecodeTables@@Base+0xbc>
    3af4:	add	x11, x11, #0x1
    3af8:	cmp	x9, x11
    3afc:	b.eq	3ad8 <BZ2_hbCreateDecodeTables@@Base+0x94>  // b.none
    3b00:	ldrb	w12, [x3, x11]
    3b04:	cmp	w10, w12
    3b08:	b.ne	3af4 <BZ2_hbCreateDecodeTables@@Base+0xb0>  // b.any
    3b0c:	str	w11, [x2, w8, sxtw #2]
    3b10:	add	w8, w8, #0x1
    3b14:	b	3af4 <BZ2_hbCreateDecodeTables@@Base+0xb0>
    3b18:	mov	w2, wzr
    3b1c:	mov	w9, wzr
    3b20:	mov	w3, wzr
    3b24:	mov	w10, wzr
    3b28:	mov	w6, wzr
    3b2c:	mov	w11, wzr
    3b30:	mov	w7, wzr
    3b34:	mov	w12, wzr
    3b38:	mov	w19, wzr
    3b3c:	mov	w13, wzr
    3b40:	mov	w20, wzr
    3b44:	mov	w14, wzr
    3b48:	mov	w21, wzr
    3b4c:	mov	w15, wzr
    3b50:	mov	w22, wzr
    3b54:	mov	w16, wzr
    3b58:	mov	w23, wzr
    3b5c:	mov	w17, wzr
    3b60:	mov	w24, wzr
    3b64:	mov	w18, wzr
    3b68:	mov	w25, wzr
    3b6c:	mov	w8, wzr
    3b70:	add	w25, w25, w8
    3b74:	stp	w8, w25, [x1, #4]
    3b78:	add	w8, w18, w25
    3b7c:	add	w18, w24, w8
    3b80:	stp	w8, w18, [x1, #12]
    3b84:	add	w8, w17, w18
    3b88:	add	w17, w23, w8
    3b8c:	stp	w8, w17, [x1, #20]
    3b90:	add	w8, w16, w17
    3b94:	add	w16, w22, w8
    3b98:	stp	w8, w16, [x1, #28]
    3b9c:	add	w8, w15, w16
    3ba0:	add	w15, w21, w8
    3ba4:	stp	w8, w15, [x1, #36]
    3ba8:	add	w8, w14, w15
    3bac:	add	w14, w20, w8
    3bb0:	stp	w8, w14, [x1, #44]
    3bb4:	add	w8, w13, w14
    3bb8:	add	w13, w19, w8
    3bbc:	stp	w8, w13, [x1, #52]
    3bc0:	add	w8, w12, w13
    3bc4:	add	w12, w7, w8
    3bc8:	stp	w8, w12, [x1, #60]
    3bcc:	add	w8, w11, w12
    3bd0:	add	w11, w6, w8
    3bd4:	stp	w8, w11, [x1, #68]
    3bd8:	add	w8, w10, w11
    3bdc:	add	w10, w3, w8
    3be0:	stp	w8, w10, [x1, #76]
    3be4:	add	w8, w9, w10
    3be8:	cmp	w4, w5
    3bec:	add	w9, w2, w8
    3bf0:	stp	w8, w9, [x1, #84]
    3bf4:	stur	q0, [x0, #76]
    3bf8:	stp	q0, q0, [x0, #48]
    3bfc:	stp	q0, q0, [x0, #16]
    3c00:	str	q0, [x0]
    3c04:	b.gt	3c40 <BZ2_hbCreateDecodeTables@@Base+0x1fc>
    3c08:	mov	w8, wzr
    3c0c:	sxtw	x10, w4
    3c10:	sxtw	x9, w5
    3c14:	lsl	x11, x10, #2
    3c18:	add	x12, x1, x11
    3c1c:	ldp	w12, w13, [x12]
    3c20:	cmp	x10, x9
    3c24:	add	x10, x10, #0x1
    3c28:	sub	w12, w13, w12
    3c2c:	add	w8, w12, w8
    3c30:	sub	w12, w8, #0x1
    3c34:	lsl	w8, w8, #1
    3c38:	str	w12, [x0, x11]
    3c3c:	b.lt	3c14 <BZ2_hbCreateDecodeTables@@Base+0x1d0>  // b.tstop
    3c40:	cmp	w4, w5
    3c44:	b.ge	3d18 <BZ2_hbCreateDecodeTables@@Base+0x2d4>  // b.tcont
    3c48:	sxtw	x8, w4
    3c4c:	sxtw	x9, w5
    3c50:	sub	x10, x9, x8
    3c54:	cmp	x10, #0x7
    3c58:	b.ls	3ce4 <BZ2_hbCreateDecodeTables@@Base+0x2a0>  // b.plast
    3c5c:	lsl	x13, x8, #2
    3c60:	lsl	x11, x9, #2
    3c64:	add	x12, x13, x1
    3c68:	add	x14, x12, #0x4
    3c6c:	add	x15, x0, x11
    3c70:	cmp	x14, x15
    3c74:	b.cs	3c8c <BZ2_hbCreateDecodeTables@@Base+0x248>  // b.hs, b.nlast
    3c78:	add	x11, x11, x1
    3c7c:	add	x11, x11, #0x4
    3c80:	add	x14, x0, x13
    3c84:	cmp	x14, x11
    3c88:	b.cc	3ce4 <BZ2_hbCreateDecodeTables@@Base+0x2a0>  // b.lo, b.ul, b.last
    3c8c:	and	x11, x10, #0xfffffffffffffff8
    3c90:	add	x13, x13, x0
    3c94:	add	x12, x12, #0x14
    3c98:	add	x8, x11, x8
    3c9c:	add	x13, x13, #0x10
    3ca0:	movi	v0.4s, #0x2
    3ca4:	mov	x14, x11
    3ca8:	ldp	q1, q2, [x13, #-16]
    3cac:	ldp	q3, q4, [x12, #-16]
    3cb0:	subs	x14, x14, #0x8
    3cb4:	add	x13, x13, #0x20
    3cb8:	shl	v1.4s, v1.4s, #1
    3cbc:	shl	v2.4s, v2.4s, #1
    3cc0:	sub	v1.4s, v1.4s, v3.4s
    3cc4:	sub	v2.4s, v2.4s, v4.4s
    3cc8:	add	v1.4s, v1.4s, v0.4s
    3ccc:	add	v2.4s, v2.4s, v0.4s
    3cd0:	stp	q1, q2, [x12, #-16]
    3cd4:	add	x12, x12, #0x20
    3cd8:	b.ne	3ca8 <BZ2_hbCreateDecodeTables@@Base+0x264>  // b.any
    3cdc:	cmp	x10, x11
    3ce0:	b.eq	3d18 <BZ2_hbCreateDecodeTables@@Base+0x2d4>  // b.none
    3ce4:	lsl	x10, x8, #2
    3ce8:	sub	x8, x9, x8
    3cec:	add	x9, x0, x10
    3cf0:	add	x10, x10, x1
    3cf4:	add	x10, x10, #0x4
    3cf8:	ldr	w11, [x9], #4
    3cfc:	ldr	w12, [x10]
    3d00:	subs	x8, x8, #0x1
    3d04:	lsl	w11, w11, #1
    3d08:	sub	w11, w11, w12
    3d0c:	add	w11, w11, #0x2
    3d10:	str	w11, [x10], #4
    3d14:	b.ne	3cf8 <BZ2_hbCreateDecodeTables@@Base+0x2b4>  // b.any
    3d18:	ldp	x20, x19, [sp, #48]
    3d1c:	ldp	x22, x21, [sp, #32]
    3d20:	ldp	x24, x23, [sp, #16]
    3d24:	ldr	x25, [sp], #64
    3d28:	ret

0000000000003d2c <BZ2_bsInitWrite@@Base>:
    3d2c:	movi	v0.2d, #0x0
    3d30:	str	d0, [x0, #640]
    3d34:	ret

0000000000003d38 <BZ2_compressBlock@@Base>:
    3d38:	sub	sp, sp, #0x150
    3d3c:	stp	x29, x30, [sp, #256]
    3d40:	stp	x28, x25, [sp, #272]
    3d44:	stp	x24, x23, [sp, #288]
    3d48:	stp	x22, x21, [sp, #304]
    3d4c:	stp	x20, x19, [sp, #320]
    3d50:	add	x29, sp, #0x100
    3d54:	ldr	w5, [x0, #108]
    3d58:	mov	x19, x0
    3d5c:	mov	w20, w1
    3d60:	cmp	w5, #0x1
    3d64:	b.lt	3da8 <BZ2_compressBlock@@Base+0x70>  // b.tstop
    3d68:	ldr	w8, [x19, #648]
    3d6c:	ldr	w9, [x19, #652]
    3d70:	ldr	w2, [x19, #660]
    3d74:	mvn	w3, w8
    3d78:	eon	w4, w8, w9, ror #31
    3d7c:	cmp	w2, #0x2
    3d80:	str	w3, [x19, #648]
    3d84:	str	w4, [x19, #652]
    3d88:	b.lt	3d90 <BZ2_compressBlock@@Base+0x58>  // b.tstop
    3d8c:	str	wzr, [x19, #116]
    3d90:	ldr	w8, [x19, #656]
    3d94:	cmp	w8, #0x2
    3d98:	b.ge	4790 <BZ2_compressBlock@@Base+0xa58>  // b.tcont
    3d9c:	mov	x0, x19
    3da0:	bl	1570 <BZ2_blockSort@plt>
    3da4:	ldr	w5, [x19, #108]
    3da8:	ldr	x8, [x19, #32]
    3dac:	ldr	w9, [x19, #660]
    3db0:	add	x8, x8, w5, sxtw
    3db4:	cmp	w9, #0x1
    3db8:	str	x8, [x19, #80]
    3dbc:	b.ne	3f18 <BZ2_compressBlock@@Base+0x1e0>  // b.any
    3dc0:	adrp	x9, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    3dc4:	ldr	d0, [x9, #2544]
    3dc8:	ldrsw	x9, [x19, #116]
    3dcc:	mov	w10, #0x42                  	// #66
    3dd0:	str	d0, [x19, #640]
    3dd4:	strb	w10, [x8, x9]
    3dd8:	ldr	w8, [x19, #116]
    3ddc:	ldr	w10, [x19, #640]
    3de0:	ldr	w9, [x19, #644]
    3de4:	add	w8, w8, #0x1
    3de8:	lsl	w10, w10, #8
    3dec:	sub	w11, w9, #0x8
    3df0:	cmp	w9, #0x10
    3df4:	str	w8, [x19, #116]
    3df8:	str	w10, [x19, #640]
    3dfc:	str	w11, [x19, #644]
    3e00:	b.lt	3e3c <BZ2_compressBlock@@Base+0x104>  // b.tstop
    3e04:	ldr	x9, [x19, #80]
    3e08:	lsr	w10, w10, #24
    3e0c:	strb	w10, [x9, w8, sxtw]
    3e10:	ldr	w8, [x19, #116]
    3e14:	ldr	w10, [x19, #640]
    3e18:	ldr	w9, [x19, #644]
    3e1c:	add	w8, w8, #0x1
    3e20:	lsl	w10, w10, #8
    3e24:	sub	w11, w9, #0x8
    3e28:	cmp	w9, #0xf
    3e2c:	str	w8, [x19, #116]
    3e30:	str	w10, [x19, #640]
    3e34:	str	w11, [x19, #644]
    3e38:	b.gt	3e04 <BZ2_compressBlock@@Base+0xcc>
    3e3c:	neg	w11, w9
    3e40:	mov	w12, #0x5a                  	// #90
    3e44:	lsl	w11, w12, w11
    3e48:	cmp	w9, #0x8
    3e4c:	orr	w11, w11, w10
    3e50:	str	w11, [x19, #640]
    3e54:	str	w9, [x19, #644]
    3e58:	b.lt	3e94 <BZ2_compressBlock@@Base+0x15c>  // b.tstop
    3e5c:	ldr	x9, [x19, #80]
    3e60:	lsr	w10, w11, #24
    3e64:	strb	w10, [x9, w8, sxtw]
    3e68:	ldr	w8, [x19, #116]
    3e6c:	ldr	w9, [x19, #640]
    3e70:	ldr	w10, [x19, #644]
    3e74:	add	w8, w8, #0x1
    3e78:	lsl	w11, w9, #8
    3e7c:	sub	w9, w10, #0x8
    3e80:	cmp	w10, #0xf
    3e84:	str	w8, [x19, #116]
    3e88:	str	w11, [x19, #640]
    3e8c:	str	w9, [x19, #644]
    3e90:	b.gt	3e5c <BZ2_compressBlock@@Base+0x124>
    3e94:	ldr	w14, [x19, #664]
    3e98:	mov	w10, #0x18                  	// #24
    3e9c:	mov	w12, #0x68                  	// #104
    3ea0:	sub	w15, w10, w9
    3ea4:	lsl	w12, w12, w15
    3ea8:	orr	w12, w12, w11
    3eac:	add	w11, w14, #0x30
    3eb0:	add	w13, w9, #0x8
    3eb4:	and	w11, w11, #0xff
    3eb8:	str	w13, [x19, #644]
    3ebc:	str	w12, [x19, #640]
    3ec0:	tbnz	w9, #31, 3efc <BZ2_compressBlock@@Base+0x1c4>
    3ec4:	ldr	x9, [x19, #80]
    3ec8:	lsr	w12, w12, #24
    3ecc:	strb	w12, [x9, w8, sxtw]
    3ed0:	ldr	w8, [x19, #116]
    3ed4:	ldr	w9, [x19, #640]
    3ed8:	ldr	w14, [x19, #644]
    3edc:	add	w8, w8, #0x1
    3ee0:	lsl	w12, w9, #8
    3ee4:	sub	w13, w14, #0x8
    3ee8:	cmp	w14, #0xf
    3eec:	str	w8, [x19, #116]
    3ef0:	str	w12, [x19, #640]
    3ef4:	str	w13, [x19, #644]
    3ef8:	b.gt	3ec4 <BZ2_compressBlock@@Base+0x18c>
    3efc:	ldr	w5, [x19, #108]
    3f00:	sub	w8, w10, w13
    3f04:	lsl	w8, w11, w8
    3f08:	add	w9, w13, #0x8
    3f0c:	orr	w8, w8, w12
    3f10:	str	w8, [x19, #640]
    3f14:	str	w9, [x19, #644]
    3f18:	cmp	w5, #0x1
    3f1c:	b.lt	44c4 <BZ2_compressBlock@@Base+0x78c>  // b.tstop
    3f20:	ldr	w10, [x19, #644]
    3f24:	cmp	w10, #0x7
    3f28:	b.le	3f70 <BZ2_compressBlock@@Base+0x238>
    3f2c:	ldr	w9, [x19, #640]
    3f30:	ldr	w8, [x19, #116]
    3f34:	ldr	x10, [x19, #80]
    3f38:	lsr	w9, w9, #24
    3f3c:	strb	w9, [x10, w8, sxtw]
    3f40:	ldr	w8, [x19, #116]
    3f44:	ldr	w9, [x19, #640]
    3f48:	ldr	w11, [x19, #644]
    3f4c:	add	w8, w8, #0x1
    3f50:	lsl	w9, w9, #8
    3f54:	sub	w10, w11, #0x8
    3f58:	cmp	w11, #0xf
    3f5c:	str	w8, [x19, #116]
    3f60:	str	w9, [x19, #640]
    3f64:	str	w10, [x19, #644]
    3f68:	b.gt	3f34 <BZ2_compressBlock@@Base+0x1fc>
    3f6c:	b	3f74 <BZ2_compressBlock@@Base+0x23c>
    3f70:	ldr	w9, [x19, #640]
    3f74:	mov	w8, #0x18                  	// #24
    3f78:	mov	w12, #0x31                  	// #49
    3f7c:	sub	w13, w8, w10
    3f80:	lsl	w12, w12, w13
    3f84:	add	w11, w10, #0x8
    3f88:	orr	w9, w12, w9
    3f8c:	str	w9, [x19, #640]
    3f90:	str	w11, [x19, #644]
    3f94:	tbnz	w10, #31, 3fd4 <BZ2_compressBlock@@Base+0x29c>
    3f98:	ldr	w10, [x19, #116]
    3f9c:	ldr	x11, [x19, #80]
    3fa0:	lsr	w9, w9, #24
    3fa4:	strb	w9, [x11, w10, sxtw]
    3fa8:	ldr	w9, [x19, #116]
    3fac:	ldr	w11, [x19, #640]
    3fb0:	ldr	w12, [x19, #644]
    3fb4:	add	w10, w9, #0x1
    3fb8:	lsl	w9, w11, #8
    3fbc:	sub	w11, w12, #0x8
    3fc0:	cmp	w12, #0xf
    3fc4:	str	w10, [x19, #116]
    3fc8:	str	w9, [x19, #640]
    3fcc:	str	w11, [x19, #644]
    3fd0:	b.gt	3f9c <BZ2_compressBlock@@Base+0x264>
    3fd4:	sub	w8, w8, w11
    3fd8:	mov	w12, #0x41                  	// #65
    3fdc:	lsl	w8, w12, w8
    3fe0:	add	w10, w11, #0x8
    3fe4:	orr	w9, w8, w9
    3fe8:	str	w9, [x19, #640]
    3fec:	str	w10, [x19, #644]
    3ff0:	tbnz	w11, #31, 4030 <BZ2_compressBlock@@Base+0x2f8>
    3ff4:	ldr	w8, [x19, #116]
    3ff8:	ldr	x10, [x19, #80]
    3ffc:	lsr	w9, w9, #24
    4000:	strb	w9, [x10, w8, sxtw]
    4004:	ldr	w8, [x19, #116]
    4008:	ldr	w9, [x19, #640]
    400c:	ldr	w11, [x19, #644]
    4010:	add	w8, w8, #0x1
    4014:	lsl	w9, w9, #8
    4018:	sub	w10, w11, #0x8
    401c:	cmp	w11, #0xf
    4020:	str	w8, [x19, #116]
    4024:	str	w9, [x19, #640]
    4028:	str	w10, [x19, #644]
    402c:	b.gt	3ff8 <BZ2_compressBlock@@Base+0x2c0>
    4030:	mov	w8, #0x18                  	// #24
    4034:	mov	w12, #0x59                  	// #89
    4038:	sub	w13, w8, w10
    403c:	lsl	w12, w12, w13
    4040:	add	w11, w10, #0x8
    4044:	orr	w9, w12, w9
    4048:	str	w9, [x19, #640]
    404c:	str	w11, [x19, #644]
    4050:	tbnz	w10, #31, 4090 <BZ2_compressBlock@@Base+0x358>
    4054:	ldr	w10, [x19, #116]
    4058:	ldr	x11, [x19, #80]
    405c:	lsr	w9, w9, #24
    4060:	strb	w9, [x11, w10, sxtw]
    4064:	ldr	w9, [x19, #116]
    4068:	ldr	w11, [x19, #640]
    406c:	ldr	w12, [x19, #644]
    4070:	add	w10, w9, #0x1
    4074:	lsl	w9, w11, #8
    4078:	sub	w11, w12, #0x8
    407c:	cmp	w12, #0xf
    4080:	str	w10, [x19, #116]
    4084:	str	w9, [x19, #640]
    4088:	str	w11, [x19, #644]
    408c:	b.gt	4058 <BZ2_compressBlock@@Base+0x320>
    4090:	sub	w8, w8, w11
    4094:	mov	w12, #0x26                  	// #38
    4098:	lsl	w8, w12, w8
    409c:	add	w10, w11, #0x8
    40a0:	orr	w9, w8, w9
    40a4:	str	w9, [x19, #640]
    40a8:	str	w10, [x19, #644]
    40ac:	tbnz	w11, #31, 40ec <BZ2_compressBlock@@Base+0x3b4>
    40b0:	ldr	w8, [x19, #116]
    40b4:	ldr	x10, [x19, #80]
    40b8:	lsr	w9, w9, #24
    40bc:	strb	w9, [x10, w8, sxtw]
    40c0:	ldr	w8, [x19, #116]
    40c4:	ldr	w9, [x19, #640]
    40c8:	ldr	w11, [x19, #644]
    40cc:	add	w8, w8, #0x1
    40d0:	lsl	w9, w9, #8
    40d4:	sub	w10, w11, #0x8
    40d8:	cmp	w11, #0xf
    40dc:	str	w8, [x19, #116]
    40e0:	str	w9, [x19, #640]
    40e4:	str	w10, [x19, #644]
    40e8:	b.gt	40b4 <BZ2_compressBlock@@Base+0x37c>
    40ec:	mov	w8, #0x18                  	// #24
    40f0:	mov	w12, #0x53                  	// #83
    40f4:	sub	w13, w8, w10
    40f8:	lsl	w12, w12, w13
    40fc:	add	w11, w10, #0x8
    4100:	orr	w9, w12, w9
    4104:	str	w9, [x19, #640]
    4108:	str	w11, [x19, #644]
    410c:	tbnz	w10, #31, 414c <BZ2_compressBlock@@Base+0x414>
    4110:	ldr	w10, [x19, #116]
    4114:	ldr	x11, [x19, #80]
    4118:	lsr	w9, w9, #24
    411c:	strb	w9, [x11, w10, sxtw]
    4120:	ldr	w9, [x19, #116]
    4124:	ldr	w11, [x19, #640]
    4128:	ldr	w12, [x19, #644]
    412c:	add	w10, w9, #0x1
    4130:	lsl	w9, w11, #8
    4134:	sub	w11, w12, #0x8
    4138:	cmp	w12, #0xf
    413c:	str	w10, [x19, #116]
    4140:	str	w9, [x19, #640]
    4144:	str	w11, [x19, #644]
    4148:	b.gt	4114 <BZ2_compressBlock@@Base+0x3dc>
    414c:	ldr	w1, [x19, #648]
    4150:	sub	w8, w8, w11
    4154:	mov	w10, #0x59                  	// #89
    4158:	lsl	w8, w10, w8
    415c:	add	w11, w11, #0x8
    4160:	orr	w8, w8, w9
    4164:	mov	x0, x19
    4168:	str	w8, [x19, #640]
    416c:	str	w11, [x19, #644]
    4170:	bl	47cc <BZ2_compressBlock@@Base+0xa94>
    4174:	ldr	w10, [x19, #644]
    4178:	cmp	w10, #0x7
    417c:	b.le	41c4 <BZ2_compressBlock@@Base+0x48c>
    4180:	ldr	w8, [x19, #640]
    4184:	ldr	w9, [x19, #116]
    4188:	ldr	x10, [x19, #80]
    418c:	lsr	w8, w8, #24
    4190:	strb	w8, [x10, w9, sxtw]
    4194:	ldr	w8, [x19, #116]
    4198:	ldr	w10, [x19, #640]
    419c:	ldr	w11, [x19, #644]
    41a0:	add	w9, w8, #0x1
    41a4:	lsl	w8, w10, #8
    41a8:	sub	w10, w11, #0x8
    41ac:	cmp	w11, #0xf
    41b0:	str	w9, [x19, #116]
    41b4:	str	w8, [x19, #640]
    41b8:	str	w10, [x19, #644]
    41bc:	b.gt	4188 <BZ2_compressBlock@@Base+0x450>
    41c0:	b	41c8 <BZ2_compressBlock@@Base+0x490>
    41c4:	ldr	w8, [x19, #640]
    41c8:	ldr	w9, [x19, #48]
    41cc:	add	w11, w10, #0x1
    41d0:	cmp	w10, #0x7
    41d4:	str	w8, [x19, #640]
    41d8:	str	w11, [x19, #644]
    41dc:	b.lt	421c <BZ2_compressBlock@@Base+0x4e4>  // b.tstop
    41e0:	ldr	w10, [x19, #116]
    41e4:	ldr	x11, [x19, #80]
    41e8:	lsr	w8, w8, #24
    41ec:	strb	w8, [x11, w10, sxtw]
    41f0:	ldr	w8, [x19, #116]
    41f4:	ldr	w11, [x19, #640]
    41f8:	ldr	w12, [x19, #644]
    41fc:	add	w10, w8, #0x1
    4200:	lsl	w8, w11, #8
    4204:	sub	w11, w12, #0x8
    4208:	cmp	w12, #0xf
    420c:	str	w10, [x19, #116]
    4210:	str	w8, [x19, #640]
    4214:	str	w11, [x19, #644]
    4218:	b.gt	41e4 <BZ2_compressBlock@@Base+0x4ac>
    421c:	mov	w12, #0x8                   	// #8
    4220:	ldp	x23, x24, [x19, #56]
    4224:	ldr	x21, [x19, #72]
    4228:	add	w13, w11, #0x18
    422c:	sub	w11, w12, w11
    4230:	lsl	w9, w9, w11
    4234:	mov	w25, wzr
    4238:	mov	x10, xzr
    423c:	orr	w8, w9, w8
    4240:	str	w13, [x19, #644]
    4244:	str	w8, [x19, #640]
    4248:	str	wzr, [x19, #124]
    424c:	b	425c <BZ2_compressBlock@@Base+0x524>
    4250:	add	x10, x10, #0x1
    4254:	cmp	x10, #0x100
    4258:	b.eq	4278 <BZ2_compressBlock@@Base+0x540>  // b.none
    425c:	add	x8, x19, x10
    4260:	ldrb	w9, [x8, #128]
    4264:	cbz	w9, 4250 <BZ2_compressBlock@@Base+0x518>
    4268:	strb	w25, [x8, #384]
    426c:	add	w25, w25, #0x1
    4270:	str	w25, [x19, #124]
    4274:	b	4250 <BZ2_compressBlock@@Base+0x518>
    4278:	cmn	w25, #0x1
    427c:	add	w22, w25, #0x1
    4280:	b.lt	42fc <BZ2_compressBlock@@Base+0x5c4>  // b.tstop
    4284:	mov	w8, w22
    4288:	lsl	x8, x8, #2
    428c:	add	x0, x19, #0x2a0
    4290:	add	x2, x8, #0x4
    4294:	mov	w1, wzr
    4298:	bl	14a0 <memset@plt>
    429c:	cmp	w25, #0x1
    42a0:	b.lt	42fc <BZ2_compressBlock@@Base+0x5c4>  // b.tstop
    42a4:	cmp	w25, #0xf
    42a8:	mov	w8, w25
    42ac:	b.hi	42b8 <BZ2_compressBlock@@Base+0x580>  // b.pmore
    42b0:	mov	x9, xzr
    42b4:	b	42e8 <BZ2_compressBlock@@Base+0x5b0>
    42b8:	adrp	x9, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    42bc:	ldr	q0, [x9, #2560]
    42c0:	and	x9, x8, #0xfffffff0
    42c4:	mov	x10, sp
    42c8:	movi	v1.16b, #0x10
    42cc:	mov	x11, x9
    42d0:	str	q0, [x10], #16
    42d4:	subs	x11, x11, #0x10
    42d8:	add	v0.16b, v0.16b, v1.16b
    42dc:	b.ne	42d0 <BZ2_compressBlock@@Base+0x598>  // b.any
    42e0:	cmp	x9, x8
    42e4:	b.eq	42fc <BZ2_compressBlock@@Base+0x5c4>  // b.none
    42e8:	mov	x10, sp
    42ec:	strb	w9, [x10, x9]
    42f0:	add	x9, x9, #0x1
    42f4:	cmp	x8, x9
    42f8:	b.ne	42ec <BZ2_compressBlock@@Base+0x5b4>  // b.any
    42fc:	ldr	w15, [x19, #108]
    4300:	cmp	w15, #0x1
    4304:	b.lt	449c <BZ2_compressBlock@@Base+0x764>  // b.tstop
    4308:	mov	x10, sp
    430c:	mov	x9, xzr
    4310:	mov	w13, wzr
    4314:	mov	w8, wzr
    4318:	orr	x11, x10, #0x1
    431c:	mov	w12, #0x1                   	// #1
    4320:	b	435c <BZ2_compressBlock@@Base+0x624>
    4324:	strb	w14, [sp]
    4328:	sub	w14, w15, w10
    432c:	sxtw	x14, w14
    4330:	add	x14, x14, #0x1
    4334:	strh	w14, [x21, w8, sxtw #1]
    4338:	add	x14, x19, x14, lsl #2
    433c:	ldr	w15, [x14, #672]
    4340:	add	w8, w8, #0x1
    4344:	add	w15, w15, #0x1
    4348:	str	w15, [x14, #672]
    434c:	ldr	w15, [x19, #108]
    4350:	add	x9, x9, #0x1
    4354:	cmp	x9, w15, sxtw
    4358:	b.ge	4430 <BZ2_compressBlock@@Base+0x6f8>  // b.tcont
    435c:	ldr	w14, [x23, x9, lsl #2]
    4360:	sub	w14, w14, #0x1
    4364:	and	w16, w15, w14, asr #31
    4368:	add	w14, w16, w14
    436c:	ldrb	w14, [x24, w14, sxtw]
    4370:	ldrb	w16, [sp]
    4374:	add	x14, x19, x14
    4378:	ldrb	w14, [x14, #384]
    437c:	cmp	w16, w14
    4380:	b.ne	438c <BZ2_compressBlock@@Base+0x654>  // b.any
    4384:	add	w13, w13, #0x1
    4388:	b	4350 <BZ2_compressBlock@@Base+0x618>
    438c:	subs	w15, w13, #0x1
    4390:	b.lt	4400 <BZ2_compressBlock@@Base+0x6c8>  // b.tstop
    4394:	add	w16, w8, #0x1
    4398:	add	x13, x21, w8, sxtw #1
    439c:	mov	w8, w16
    43a0:	tbnz	w15, #0, 43c0 <BZ2_compressBlock@@Base+0x688>
    43a4:	strh	wzr, [x13]
    43a8:	ldr	w16, [x19, #672]
    43ac:	add	w16, w16, #0x1
    43b0:	str	w16, [x19, #672]
    43b4:	subs	w16, w15, #0x2
    43b8:	b.ge	43d8 <BZ2_compressBlock@@Base+0x6a0>  // b.tcont
    43bc:	b	43f8 <BZ2_compressBlock@@Base+0x6c0>
    43c0:	strh	w12, [x13]
    43c4:	ldr	w16, [x19, #676]
    43c8:	add	w16, w16, #0x1
    43cc:	str	w16, [x19, #676]
    43d0:	subs	w16, w15, #0x2
    43d4:	b.lt	43f8 <BZ2_compressBlock@@Base+0x6c0>  // b.tstop
    43d8:	sub	w15, w15, #0x1
    43dc:	cmp	w16, #0x0
    43e0:	csel	w15, w15, w16, lt  // lt = tstop
    43e4:	add	w8, w8, #0x1
    43e8:	asr	w15, w15, #1
    43ec:	add	x13, x13, #0x2
    43f0:	tbnz	w15, #0, 43c0 <BZ2_compressBlock@@Base+0x688>
    43f4:	b	43a4 <BZ2_compressBlock@@Base+0x66c>
    43f8:	ldrb	w16, [sp]
    43fc:	mov	w13, wzr
    4400:	ldrb	w17, [sp, #1]
    4404:	mov	x15, x11
    4408:	strb	w16, [sp, #1]
    440c:	cmp	w14, w17
    4410:	b.eq	4324 <BZ2_compressBlock@@Base+0x5ec>  // b.none
    4414:	mov	x15, x11
    4418:	ldrb	w16, [x15, #1]!
    441c:	cmp	w14, w16
    4420:	strb	w17, [x15]
    4424:	mov	w17, w16
    4428:	b.ne	4418 <BZ2_compressBlock@@Base+0x6e0>  // b.any
    442c:	b	4324 <BZ2_compressBlock@@Base+0x5ec>
    4430:	subs	w9, w13, #0x1
    4434:	b.lt	44a0 <BZ2_compressBlock@@Base+0x768>  // b.tstop
    4438:	add	x10, x21, w8, sxtw #1
    443c:	add	w8, w8, #0x1
    4440:	mov	w11, #0x1                   	// #1
    4444:	tbnz	w9, #0, 4464 <BZ2_compressBlock@@Base+0x72c>
    4448:	strh	wzr, [x10]
    444c:	ldr	w12, [x19, #672]
    4450:	add	w12, w12, #0x1
    4454:	str	w12, [x19, #672]
    4458:	subs	w12, w9, #0x2
    445c:	b.ge	447c <BZ2_compressBlock@@Base+0x744>  // b.tcont
    4460:	b	44a0 <BZ2_compressBlock@@Base+0x768>
    4464:	strh	w11, [x10]
    4468:	ldr	w12, [x19, #676]
    446c:	add	w12, w12, #0x1
    4470:	str	w12, [x19, #676]
    4474:	subs	w12, w9, #0x2
    4478:	b.lt	44a0 <BZ2_compressBlock@@Base+0x768>  // b.tstop
    447c:	sub	w9, w9, #0x1
    4480:	cmp	w12, #0x0
    4484:	csel	w9, w9, w12, lt  // lt = tstop
    4488:	add	w8, w8, #0x1
    448c:	asr	w9, w9, #1
    4490:	add	x10, x10, #0x2
    4494:	tbnz	w9, #0, 4464 <BZ2_compressBlock@@Base+0x72c>
    4498:	b	4448 <BZ2_compressBlock@@Base+0x710>
    449c:	mov	w8, wzr
    44a0:	strh	w22, [x21, w8, sxtw #1]
    44a4:	add	x9, x19, w22, sxtw #2
    44a8:	ldr	w10, [x9, #672]
    44ac:	add	w8, w8, #0x1
    44b0:	mov	x0, x19
    44b4:	add	w10, w10, #0x1
    44b8:	str	w10, [x9, #672]
    44bc:	str	w8, [x19, #668]
    44c0:	bl	495c <BZ2_compressBlock@@Base+0xc24>
    44c4:	tst	w20, #0xff
    44c8:	b.eq	4774 <BZ2_compressBlock@@Base+0xa3c>  // b.none
    44cc:	ldr	w10, [x19, #644]
    44d0:	cmp	w10, #0x7
    44d4:	b.le	451c <BZ2_compressBlock@@Base+0x7e4>
    44d8:	ldr	w9, [x19, #640]
    44dc:	ldr	w8, [x19, #116]
    44e0:	ldr	x10, [x19, #80]
    44e4:	lsr	w9, w9, #24
    44e8:	strb	w9, [x10, w8, sxtw]
    44ec:	ldr	w8, [x19, #116]
    44f0:	ldr	w9, [x19, #640]
    44f4:	ldr	w11, [x19, #644]
    44f8:	add	w8, w8, #0x1
    44fc:	lsl	w9, w9, #8
    4500:	sub	w10, w11, #0x8
    4504:	cmp	w11, #0xf
    4508:	str	w8, [x19, #116]
    450c:	str	w9, [x19, #640]
    4510:	str	w10, [x19, #644]
    4514:	b.gt	44e0 <BZ2_compressBlock@@Base+0x7a8>
    4518:	b	4520 <BZ2_compressBlock@@Base+0x7e8>
    451c:	ldr	w9, [x19, #640]
    4520:	mov	w8, #0x18                  	// #24
    4524:	mov	w12, #0x17                  	// #23
    4528:	sub	w13, w8, w10
    452c:	lsl	w12, w12, w13
    4530:	add	w11, w10, #0x8
    4534:	orr	w9, w12, w9
    4538:	str	w9, [x19, #640]
    453c:	str	w11, [x19, #644]
    4540:	tbnz	w10, #31, 4580 <BZ2_compressBlock@@Base+0x848>
    4544:	ldr	w10, [x19, #116]
    4548:	ldr	x11, [x19, #80]
    454c:	lsr	w9, w9, #24
    4550:	strb	w9, [x11, w10, sxtw]
    4554:	ldr	w9, [x19, #116]
    4558:	ldr	w11, [x19, #640]
    455c:	ldr	w12, [x19, #644]
    4560:	add	w10, w9, #0x1
    4564:	lsl	w9, w11, #8
    4568:	sub	w11, w12, #0x8
    456c:	cmp	w12, #0xf
    4570:	str	w10, [x19, #116]
    4574:	str	w9, [x19, #640]
    4578:	str	w11, [x19, #644]
    457c:	b.gt	4548 <BZ2_compressBlock@@Base+0x810>
    4580:	sub	w8, w8, w11
    4584:	mov	w12, #0x72                  	// #114
    4588:	lsl	w8, w12, w8
    458c:	add	w10, w11, #0x8
    4590:	orr	w9, w8, w9
    4594:	str	w9, [x19, #640]
    4598:	str	w10, [x19, #644]
    459c:	tbnz	w11, #31, 45dc <BZ2_compressBlock@@Base+0x8a4>
    45a0:	ldr	w8, [x19, #116]
    45a4:	ldr	x10, [x19, #80]
    45a8:	lsr	w9, w9, #24
    45ac:	strb	w9, [x10, w8, sxtw]
    45b0:	ldr	w8, [x19, #116]
    45b4:	ldr	w9, [x19, #640]
    45b8:	ldr	w11, [x19, #644]
    45bc:	add	w8, w8, #0x1
    45c0:	lsl	w9, w9, #8
    45c4:	sub	w10, w11, #0x8
    45c8:	cmp	w11, #0xf
    45cc:	str	w8, [x19, #116]
    45d0:	str	w9, [x19, #640]
    45d4:	str	w10, [x19, #644]
    45d8:	b.gt	45a4 <BZ2_compressBlock@@Base+0x86c>
    45dc:	mov	w8, #0x18                  	// #24
    45e0:	mov	w12, #0x45                  	// #69
    45e4:	sub	w13, w8, w10
    45e8:	lsl	w12, w12, w13
    45ec:	add	w11, w10, #0x8
    45f0:	orr	w9, w12, w9
    45f4:	str	w9, [x19, #640]
    45f8:	str	w11, [x19, #644]
    45fc:	tbnz	w10, #31, 463c <BZ2_compressBlock@@Base+0x904>
    4600:	ldr	w10, [x19, #116]
    4604:	ldr	x11, [x19, #80]
    4608:	lsr	w9, w9, #24
    460c:	strb	w9, [x11, w10, sxtw]
    4610:	ldr	w9, [x19, #116]
    4614:	ldr	w11, [x19, #640]
    4618:	ldr	w12, [x19, #644]
    461c:	add	w10, w9, #0x1
    4620:	lsl	w9, w11, #8
    4624:	sub	w11, w12, #0x8
    4628:	cmp	w12, #0xf
    462c:	str	w10, [x19, #116]
    4630:	str	w9, [x19, #640]
    4634:	str	w11, [x19, #644]
    4638:	b.gt	4604 <BZ2_compressBlock@@Base+0x8cc>
    463c:	sub	w8, w8, w11
    4640:	mov	w12, #0x38                  	// #56
    4644:	lsl	w8, w12, w8
    4648:	add	w10, w11, #0x8
    464c:	orr	w9, w8, w9
    4650:	str	w9, [x19, #640]
    4654:	str	w10, [x19, #644]
    4658:	tbnz	w11, #31, 4698 <BZ2_compressBlock@@Base+0x960>
    465c:	ldr	w8, [x19, #116]
    4660:	ldr	x10, [x19, #80]
    4664:	lsr	w9, w9, #24
    4668:	strb	w9, [x10, w8, sxtw]
    466c:	ldr	w8, [x19, #116]
    4670:	ldr	w9, [x19, #640]
    4674:	ldr	w11, [x19, #644]
    4678:	add	w8, w8, #0x1
    467c:	lsl	w9, w9, #8
    4680:	sub	w10, w11, #0x8
    4684:	cmp	w11, #0xf
    4688:	str	w8, [x19, #116]
    468c:	str	w9, [x19, #640]
    4690:	str	w10, [x19, #644]
    4694:	b.gt	4660 <BZ2_compressBlock@@Base+0x928>
    4698:	mov	w8, #0x18                  	// #24
    469c:	mov	w12, #0x50                  	// #80
    46a0:	sub	w13, w8, w10
    46a4:	lsl	w12, w12, w13
    46a8:	add	w11, w10, #0x8
    46ac:	orr	w9, w12, w9
    46b0:	str	w9, [x19, #640]
    46b4:	str	w11, [x19, #644]
    46b8:	tbnz	w10, #31, 46f8 <BZ2_compressBlock@@Base+0x9c0>
    46bc:	ldr	w10, [x19, #116]
    46c0:	ldr	x11, [x19, #80]
    46c4:	lsr	w9, w9, #24
    46c8:	strb	w9, [x11, w10, sxtw]
    46cc:	ldr	w9, [x19, #116]
    46d0:	ldr	w11, [x19, #640]
    46d4:	ldr	w12, [x19, #644]
    46d8:	add	w10, w9, #0x1
    46dc:	lsl	w9, w11, #8
    46e0:	sub	w11, w12, #0x8
    46e4:	cmp	w12, #0xf
    46e8:	str	w10, [x19, #116]
    46ec:	str	w9, [x19, #640]
    46f0:	str	w11, [x19, #644]
    46f4:	b.gt	46c0 <BZ2_compressBlock@@Base+0x988>
    46f8:	ldr	w1, [x19, #652]
    46fc:	sub	w8, w8, w11
    4700:	mov	w10, #0x90                  	// #144
    4704:	lsl	w8, w10, w8
    4708:	add	w11, w11, #0x8
    470c:	orr	w8, w8, w9
    4710:	mov	x0, x19
    4714:	str	w8, [x19, #640]
    4718:	str	w11, [x19, #644]
    471c:	bl	47cc <BZ2_compressBlock@@Base+0xa94>
    4720:	ldr	w8, [x19, #656]
    4724:	cmp	w8, #0x1
    4728:	b.gt	47ac <BZ2_compressBlock@@Base+0xa74>
    472c:	ldr	w8, [x19, #644]
    4730:	cmp	w8, #0x1
    4734:	b.lt	4774 <BZ2_compressBlock@@Base+0xa3c>  // b.tstop
    4738:	ldr	w8, [x19, #640]
    473c:	ldr	w9, [x19, #116]
    4740:	ldr	x10, [x19, #80]
    4744:	lsr	w8, w8, #24
    4748:	strb	w8, [x10, w9, sxtw]
    474c:	ldr	w8, [x19, #116]
    4750:	ldr	w10, [x19, #640]
    4754:	ldr	w11, [x19, #644]
    4758:	add	w9, w8, #0x1
    475c:	lsl	w8, w10, #8
    4760:	subs	w10, w11, #0x8
    4764:	str	w9, [x19, #116]
    4768:	str	w8, [x19, #640]
    476c:	str	w10, [x19, #644]
    4770:	b.gt	4740 <BZ2_compressBlock@@Base+0xa08>
    4774:	ldp	x20, x19, [sp, #320]
    4778:	ldp	x22, x21, [sp, #304]
    477c:	ldp	x24, x23, [sp, #288]
    4780:	ldp	x28, x25, [sp, #272]
    4784:	ldp	x29, x30, [sp, #256]
    4788:	add	sp, sp, #0x150
    478c:	ret
    4790:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    4794:	ldr	x8, [x8, #4016]
    4798:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    479c:	add	x1, x1, #0xa30
    47a0:	ldr	x0, [x8]
    47a4:	bl	1610 <fprintf@plt>
    47a8:	b	3d9c <BZ2_compressBlock@@Base+0x64>
    47ac:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    47b0:	ldr	x8, [x8, #4016]
    47b4:	ldr	w2, [x19, #652]
    47b8:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    47bc:	add	x1, x1, #0xa6e
    47c0:	ldr	x0, [x8]
    47c4:	bl	1610 <fprintf@plt>
    47c8:	b	472c <BZ2_compressBlock@@Base+0x9f4>
    47cc:	ldr	w11, [x0, #644]
    47d0:	lsr	w8, w1, #24
    47d4:	cmp	w11, #0x7
    47d8:	b.le	4820 <BZ2_compressBlock@@Base+0xae8>
    47dc:	ldr	w10, [x0, #640]
    47e0:	ldr	w9, [x0, #116]
    47e4:	ldr	x11, [x0, #80]
    47e8:	lsr	w10, w10, #24
    47ec:	strb	w10, [x11, w9, sxtw]
    47f0:	ldr	w9, [x0, #116]
    47f4:	ldr	w10, [x0, #640]
    47f8:	ldr	w12, [x0, #644]
    47fc:	add	w9, w9, #0x1
    4800:	lsl	w10, w10, #8
    4804:	sub	w11, w12, #0x8
    4808:	cmp	w12, #0xf
    480c:	str	w9, [x0, #116]
    4810:	str	w10, [x0, #640]
    4814:	str	w11, [x0, #644]
    4818:	b.gt	47e4 <BZ2_compressBlock@@Base+0xaac>
    481c:	b	4824 <BZ2_compressBlock@@Base+0xaec>
    4820:	ldr	w10, [x0, #640]
    4824:	mov	w9, #0x18                  	// #24
    4828:	sub	w13, w9, w11
    482c:	lsl	w8, w8, w13
    4830:	add	w12, w11, #0x8
    4834:	orr	w10, w8, w10
    4838:	ubfx	w8, w1, #16, #8
    483c:	str	w12, [x0, #644]
    4840:	str	w10, [x0, #640]
    4844:	tbnz	w11, #31, 4884 <BZ2_compressBlock@@Base+0xb4c>
    4848:	ldr	w11, [x0, #116]
    484c:	ldr	x12, [x0, #80]
    4850:	lsr	w10, w10, #24
    4854:	strb	w10, [x12, w11, sxtw]
    4858:	ldr	w10, [x0, #116]
    485c:	ldr	w12, [x0, #640]
    4860:	ldr	w13, [x0, #644]
    4864:	add	w11, w10, #0x1
    4868:	lsl	w10, w12, #8
    486c:	sub	w12, w13, #0x8
    4870:	cmp	w13, #0xf
    4874:	str	w11, [x0, #116]
    4878:	str	w10, [x0, #640]
    487c:	str	w12, [x0, #644]
    4880:	b.gt	484c <BZ2_compressBlock@@Base+0xb14>
    4884:	sub	w9, w9, w12
    4888:	lsl	w8, w8, w9
    488c:	add	w11, w12, #0x8
    4890:	orr	w10, w8, w10
    4894:	ubfx	w9, w1, #8, #8
    4898:	str	w11, [x0, #644]
    489c:	str	w10, [x0, #640]
    48a0:	tbnz	w12, #31, 48e0 <BZ2_compressBlock@@Base+0xba8>
    48a4:	ldr	w8, [x0, #116]
    48a8:	ldr	x11, [x0, #80]
    48ac:	lsr	w10, w10, #24
    48b0:	strb	w10, [x11, w8, sxtw]
    48b4:	ldr	w8, [x0, #116]
    48b8:	ldr	w10, [x0, #640]
    48bc:	ldr	w12, [x0, #644]
    48c0:	add	w8, w8, #0x1
    48c4:	lsl	w10, w10, #8
    48c8:	sub	w11, w12, #0x8
    48cc:	cmp	w12, #0xf
    48d0:	str	w8, [x0, #116]
    48d4:	str	w10, [x0, #640]
    48d8:	str	w11, [x0, #644]
    48dc:	b.gt	48a8 <BZ2_compressBlock@@Base+0xb70>
    48e0:	mov	w8, #0x18                  	// #24
    48e4:	sub	w13, w8, w11
    48e8:	lsl	w9, w9, w13
    48ec:	add	w12, w11, #0x8
    48f0:	orr	w10, w9, w10
    48f4:	and	w9, w1, #0xff
    48f8:	str	w12, [x0, #644]
    48fc:	str	w10, [x0, #640]
    4900:	tbnz	w11, #31, 4940 <BZ2_compressBlock@@Base+0xc08>
    4904:	ldr	w11, [x0, #116]
    4908:	ldr	x12, [x0, #80]
    490c:	lsr	w10, w10, #24
    4910:	strb	w10, [x12, w11, sxtw]
    4914:	ldr	w10, [x0, #116]
    4918:	ldr	w12, [x0, #640]
    491c:	ldr	w13, [x0, #644]
    4920:	add	w11, w10, #0x1
    4924:	lsl	w10, w12, #8
    4928:	sub	w12, w13, #0x8
    492c:	cmp	w13, #0xf
    4930:	str	w11, [x0, #116]
    4934:	str	w10, [x0, #640]
    4938:	str	w12, [x0, #644]
    493c:	b.gt	4908 <BZ2_compressBlock@@Base+0xbd0>
    4940:	sub	w8, w8, w12
    4944:	lsl	w8, w9, w8
    4948:	add	w11, w12, #0x8
    494c:	orr	w8, w8, w10
    4950:	str	w8, [x0, #640]
    4954:	str	w11, [x0, #644]
    4958:	ret
    495c:	sub	sp, sp, #0x140
    4960:	str	d8, [sp, #208]
    4964:	stp	x29, x30, [sp, #224]
    4968:	stp	x28, x27, [sp, #240]
    496c:	stp	x26, x25, [sp, #256]
    4970:	stp	x24, x23, [sp, #272]
    4974:	stp	x22, x21, [sp, #288]
    4978:	stp	x20, x19, [sp, #304]
    497c:	add	x29, sp, #0xd0
    4980:	ldr	w8, [x0, #656]
    4984:	ldr	x9, [x0, #72]
    4988:	mov	x28, x0
    498c:	cmp	w8, #0x3
    4990:	stur	x9, [x29, #-96]
    4994:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    4998:	ldr	x8, [x8, #4016]
    499c:	b.ge	7c04 <BZ2_compressBlock@@Base+0x3ecc>  // b.tcont
    49a0:	ldrsw	x13, [x28, #124]
    49a4:	add	w19, w13, #0x2
    49a8:	cmp	w19, #0x1
    49ac:	csinc	w20, w19, wzr, gt
    49b0:	cmn	w13, #0x2
    49b4:	str	x13, [sp, #80]
    49b8:	b.le	4a38 <BZ2_compressBlock@@Base+0xd00>
    49bc:	mov	w8, #0x934c                	// #37708
    49c0:	add	x0, x28, x8
    49c4:	mov	w1, #0xf                   	// #15
    49c8:	mov	x2, x20
    49cc:	bl	14a0 <memset@plt>
    49d0:	mov	w8, #0x944e                	// #37966
    49d4:	add	x0, x28, x8
    49d8:	mov	w1, #0xf                   	// #15
    49dc:	mov	x2, x20
    49e0:	bl	14a0 <memset@plt>
    49e4:	mov	w8, #0x9550                	// #38224
    49e8:	add	x0, x28, x8
    49ec:	mov	w1, #0xf                   	// #15
    49f0:	mov	x2, x20
    49f4:	bl	14a0 <memset@plt>
    49f8:	mov	w8, #0x9652                	// #38482
    49fc:	add	x0, x28, x8
    4a00:	mov	w1, #0xf                   	// #15
    4a04:	mov	x2, x20
    4a08:	bl	14a0 <memset@plt>
    4a0c:	mov	w8, #0x9754                	// #38740
    4a10:	add	x0, x28, x8
    4a14:	mov	w1, #0xf                   	// #15
    4a18:	mov	x2, x20
    4a1c:	bl	14a0 <memset@plt>
    4a20:	mov	w8, #0x9856                	// #38998
    4a24:	add	x0, x28, x8
    4a28:	mov	w1, #0xf                   	// #15
    4a2c:	mov	x2, x20
    4a30:	bl	14a0 <memset@plt>
    4a34:	ldr	x13, [sp, #80]
    4a38:	ldr	w14, [x28, #668]
    4a3c:	cmp	w14, #0x0
    4a40:	b.gt	4a54 <BZ2_compressBlock@@Base+0xd1c>
    4a44:	mov	w0, #0xbb9                 	// #3001
    4a48:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    4a4c:	ldr	x13, [sp, #80]
    4a50:	ldr	w14, [x28, #668]
    4a54:	cmp	w14, #0xc8
    4a58:	str	x20, [sp, #16]
    4a5c:	b.ge	4a68 <BZ2_compressBlock@@Base+0xd30>  // b.tcont
    4a60:	mov	w8, #0x2                   	// #2
    4a64:	b	4a94 <BZ2_compressBlock@@Base+0xd5c>
    4a68:	cmp	w14, #0x258
    4a6c:	b.ge	4a78 <BZ2_compressBlock@@Base+0xd40>  // b.tcont
    4a70:	mov	w8, #0x3                   	// #3
    4a74:	b	4a94 <BZ2_compressBlock@@Base+0xd5c>
    4a78:	cmp	w14, #0x4b0
    4a7c:	b.ge	4a88 <BZ2_compressBlock@@Base+0xd50>  // b.tcont
    4a80:	mov	w8, #0x4                   	// #4
    4a84:	b	4a94 <BZ2_compressBlock@@Base+0xd5c>
    4a88:	cmp	w14, #0x960
    4a8c:	mov	w8, #0x5                   	// #5
    4a90:	cinc	w8, w8, ge  // ge = tcont
    4a94:	mov	w9, #0x102                 	// #258
    4a98:	mov	w23, w8
    4a9c:	adrp	x11, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    4aa0:	umaddl	x8, w8, w9, x28
    4aa4:	adrp	x9, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    4aa8:	str	x19, [sp, #64]
    4aac:	sxtw	x19, w19
    4ab0:	ldr	q16, [x11, #2576]
    4ab4:	ldr	q17, [x9, #2592]
    4ab8:	mov	w10, #0x924a                	// #37450
    4abc:	cmp	x19, #0x1
    4ac0:	csinc	x15, x19, xzr, gt
    4ac4:	add	x20, x8, x10
    4ac8:	mov	w8, #0x4                   	// #4
    4acc:	mov	w25, wzr
    4ad0:	add	x21, x28, #0x2a4
    4ad4:	mov	w22, #0xf                   	// #15
    4ad8:	movi	v8.4h, #0xf
    4adc:	and	x16, x15, #0x7ffffffffffffffc
    4ae0:	dup	v18.2d, x8
    4ae4:	mov	x27, x23
    4ae8:	stur	q16, [x29, #-80]
    4aec:	str	q17, [sp, #96]
    4af0:	str	x15, [sp, #72]
    4af4:	str	x16, [sp, #56]
    4af8:	str	q18, [sp, #32]
    4afc:	b	4b18 <BZ2_compressBlock@@Base+0xde0>
    4b00:	add	w25, w26, #0x1
    4b04:	sub	w14, w14, w24
    4b08:	cmp	x27, #0x1
    4b0c:	sub	x20, x20, #0x102
    4b10:	mov	x27, x8
    4b14:	b.le	4cac <BZ2_compressBlock@@Base+0xf74>
    4b18:	sdiv	w8, w14, w27
    4b1c:	mov	w24, wzr
    4b20:	cmp	w8, #0x1
    4b24:	sub	w26, w25, #0x1
    4b28:	b.lt	4b5c <BZ2_compressBlock@@Base+0xe24>  // b.tstop
    4b2c:	cmp	w26, w13
    4b30:	b.gt	4b5c <BZ2_compressBlock@@Base+0xe24>
    4b34:	mov	w24, wzr
    4b38:	sxtw	x9, w26
    4b3c:	ldr	w10, [x21, x9, lsl #2]
    4b40:	add	x26, x9, #0x1
    4b44:	add	w24, w10, w24
    4b48:	cmp	w24, w8
    4b4c:	b.ge	4b5c <BZ2_compressBlock@@Base+0xe24>  // b.tcont
    4b50:	cmp	x9, x13
    4b54:	mov	x9, x26
    4b58:	b.lt	4b3c <BZ2_compressBlock@@Base+0xe04>  // b.tstop
    4b5c:	cmp	w26, w25
    4b60:	b.le	4b8c <BZ2_compressBlock@@Base+0xe54>
    4b64:	cmp	x27, x23
    4b68:	b.eq	4b8c <BZ2_compressBlock@@Base+0xe54>  // b.none
    4b6c:	cmp	x27, #0x1
    4b70:	b.eq	4b8c <BZ2_compressBlock@@Base+0xe54>  // b.none
    4b74:	sub	w8, w23, w27
    4b78:	tbz	w8, #0, 4b8c <BZ2_compressBlock@@Base+0xe54>
    4b7c:	add	x8, x28, w26, sxtw #2
    4b80:	ldr	w8, [x8, #672]
    4b84:	sub	w26, w26, #0x1
    4b88:	sub	w24, w24, w8
    4b8c:	ldr	w8, [x28, #656]
    4b90:	cmp	w8, #0x3
    4b94:	b.ge	4c40 <BZ2_compressBlock@@Base+0xf08>  // b.tcont
    4b98:	cmn	w13, #0x1
    4b9c:	sub	x8, x27, #0x1
    4ba0:	b.lt	4b00 <BZ2_compressBlock@@Base+0xdc8>  // b.tstop
    4ba4:	sxtw	x9, w26
    4ba8:	cmp	x15, #0x4
    4bac:	sxtw	x10, w25
    4bb0:	b.cs	4bbc <BZ2_compressBlock@@Base+0xe84>  // b.hs, b.nlast
    4bb4:	mov	x11, xzr
    4bb8:	b	4c20 <BZ2_compressBlock@@Base+0xee8>
    4bbc:	dup	v0.2d, x10
    4bc0:	dup	v1.2d, x9
    4bc4:	mov	x11, x16
    4bc8:	mov	x12, x20
    4bcc:	mov	v2.16b, v17.16b
    4bd0:	mov	v3.16b, v16.16b
    4bd4:	cmgt	v4.2d, v0.2d, v2.2d
    4bd8:	cmgt	v6.2d, v2.2d, v1.2d
    4bdc:	cmgt	v5.2d, v0.2d, v3.2d
    4be0:	cmgt	v7.2d, v3.2d, v1.2d
    4be4:	orr	v4.16b, v4.16b, v6.16b
    4be8:	orr	v5.16b, v5.16b, v7.16b
    4bec:	xtn	v4.2s, v4.2d
    4bf0:	xtn2	v4.4s, v5.2d
    4bf4:	xtn	v4.4h, v4.4s
    4bf8:	and	v4.8b, v4.8b, v8.8b
    4bfc:	xtn	v4.8b, v4.8h
    4c00:	add	v3.2d, v3.2d, v18.2d
    4c04:	subs	x11, x11, #0x4
    4c08:	st1	{v4.s}[0], [x12], #4
    4c0c:	add	v2.2d, v2.2d, v18.2d
    4c10:	b.ne	4bd4 <BZ2_compressBlock@@Base+0xe9c>  // b.any
    4c14:	cmp	x15, x16
    4c18:	mov	x11, x16
    4c1c:	b.eq	4b00 <BZ2_compressBlock@@Base+0xdc8>  // b.none
    4c20:	cmp	x11, x9
    4c24:	ccmp	x11, x10, #0x8, le
    4c28:	csel	w12, w22, wzr, lt  // lt = tstop
    4c2c:	strb	w12, [x20, x11]
    4c30:	add	x11, x11, #0x1
    4c34:	cmp	x11, x19
    4c38:	b.lt	4c20 <BZ2_compressBlock@@Base+0xee8>  // b.tstop
    4c3c:	b	4b00 <BZ2_compressBlock@@Base+0xdc8>
    4c40:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    4c44:	ldr	x8, [x8, #4016]
    4c48:	ldr	s0, [x28, #668]
    4c4c:	scvtf	s1, w24
    4c50:	fcvt	d1, s1
    4c54:	ldr	x0, [x8]
    4c58:	mov	x8, #0x4059000000000000    	// #4636737291354636288
    4c5c:	fmov	d2, x8
    4c60:	scvtf	s0, s0
    4c64:	fmul	d1, d1, d2
    4c68:	fcvt	d0, s0
    4c6c:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    4c70:	fdiv	d0, d1, d0
    4c74:	add	x1, x1, #0xad2
    4c78:	mov	w2, w27
    4c7c:	mov	w3, w25
    4c80:	mov	w4, w26
    4c84:	mov	w5, w24
    4c88:	str	w14, [x29, #8]
    4c8c:	bl	1610 <fprintf@plt>
    4c90:	ldr	q18, [sp, #32]
    4c94:	ldr	x16, [sp, #56]
    4c98:	ldp	x15, x13, [sp, #72]
    4c9c:	ldr	q17, [sp, #96]
    4ca0:	ldur	q16, [x29, #-80]
    4ca4:	ldr	w14, [x29, #8]
    4ca8:	b	4b98 <BZ2_compressBlock@@Base+0xe60>
    4cac:	lsl	x8, x23, #2
    4cb0:	stp	x8, x19, [sp, #24]
    4cb4:	ldr	x8, [sp, #16]
    4cb8:	cmp	w23, #0x6
    4cbc:	cset	w10, ne  // ne = any
    4cc0:	cmn	w13, #0x1
    4cc4:	lsl	x8, x8, #2
    4cc8:	str	x8, [sp, #16]
    4ccc:	lsl	x8, x23, #1
    4cd0:	str	x8, [sp, #96]
    4cd4:	mov	w8, #0x934c                	// #37708
    4cd8:	mov	w21, #0xb188                	// #45448
    4cdc:	mov	w9, #0xc9b8                	// #51640
    4ce0:	add	x25, x28, x8
    4ce4:	cset	w8, lt  // lt = tstop
    4ce8:	sub	x22, x29, #0x14
    4cec:	add	x11, x28, x21
    4cf0:	add	x20, x28, x9
    4cf4:	orr	w8, w8, w10
    4cf8:	str	wzr, [sp, #72]
    4cfc:	str	x11, [sp, #56]
    4d00:	str	w8, [sp, #12]
    4d04:	stur	x28, [x29, #-88]
    4d08:	str	x23, [sp, #88]
    4d0c:	ldr	x2, [sp, #24]
    4d10:	sub	x0, x29, #0x2c
    4d14:	mov	w1, wzr
    4d18:	bl	14a0 <memset@plt>
    4d1c:	ldr	x26, [sp, #56]
    4d20:	ldr	x8, [sp, #80]
    4d24:	ldr	x24, [sp, #16]
    4d28:	mov	x19, x23
    4d2c:	b	4d3c <BZ2_compressBlock@@Base+0x1004>
    4d30:	subs	x19, x19, #0x1
    4d34:	add	x26, x26, #0x408
    4d38:	b.eq	4d5c <BZ2_compressBlock@@Base+0x1024>  // b.none
    4d3c:	cmn	w8, #0x1
    4d40:	b.lt	4d30 <BZ2_compressBlock@@Base+0xff8>  // b.tstop
    4d44:	mov	x0, x26
    4d48:	mov	w1, wzr
    4d4c:	mov	x2, x24
    4d50:	bl	14a0 <memset@plt>
    4d54:	ldr	x8, [sp, #80]
    4d58:	b	4d30 <BZ2_compressBlock@@Base+0xff8>
    4d5c:	ldr	x14, [sp, #32]
    4d60:	ldr	w8, [sp, #12]
    4d64:	tbnz	w8, #0, 4db8 <BZ2_compressBlock@@Base+0x1080>
    4d68:	mov	x8, xzr
    4d6c:	mov	x9, xzr
    4d70:	add	x10, x25, x9
    4d74:	ldrb	w11, [x10, #258]
    4d78:	ldrb	w12, [x10]
    4d7c:	add	x13, x25, x8
    4d80:	add	x9, x9, #0x1
    4d84:	cmp	x9, x14
    4d88:	bfi	w12, w11, #16, #8
    4d8c:	str	w12, [x13, #13932]
    4d90:	ldrb	w11, [x10, #774]
    4d94:	ldrb	w12, [x10, #516]
    4d98:	add	x8, x8, #0x10
    4d9c:	bfi	w12, w11, #16, #8
    4da0:	str	w12, [x13, #13936]
    4da4:	ldrb	w11, [x10, #1290]
    4da8:	ldrb	w10, [x10, #1032]
    4dac:	bfi	w10, w11, #16, #8
    4db0:	str	w10, [x13, #13940]
    4db4:	b.lt	4d70 <BZ2_compressBlock@@Base+0x1038>  // b.tstop
    4db8:	ldr	w19, [x28, #668]
    4dbc:	cmp	w19, #0x1
    4dc0:	b.lt	58c4 <BZ2_compressBlock@@Base+0x1b8c>  // b.tstop
    4dc4:	mov	x24, xzr
    4dc8:	mov	w28, wzr
    4dcc:	mov	w1, wzr
    4dd0:	b	51dc <BZ2_compressBlock@@Base+0x14a4>
    4dd4:	add	x10, x18, x26, lsl #1
    4dd8:	ldrh	w12, [x10]
    4ddc:	mov	w9, #0x408                 	// #1032
    4de0:	madd	x9, x11, x9, x17
    4de4:	add	x9, x9, x21
    4de8:	lsl	x11, x12, #2
    4dec:	ldr	w12, [x9, x11]
    4df0:	add	w12, w12, #0x1
    4df4:	str	w12, [x9, x11]
    4df8:	ldrh	w11, [x10, #2]
    4dfc:	lsl	x11, x11, #2
    4e00:	ldr	w12, [x9, x11]
    4e04:	add	w12, w12, #0x1
    4e08:	str	w12, [x9, x11]
    4e0c:	ldrh	w11, [x10, #4]
    4e10:	lsl	x11, x11, #2
    4e14:	ldr	w12, [x9, x11]
    4e18:	add	w12, w12, #0x1
    4e1c:	str	w12, [x9, x11]
    4e20:	ldrh	w11, [x10, #6]
    4e24:	lsl	x11, x11, #2
    4e28:	ldr	w12, [x9, x11]
    4e2c:	add	w12, w12, #0x1
    4e30:	str	w12, [x9, x11]
    4e34:	ldrh	w11, [x10, #8]
    4e38:	lsl	x11, x11, #2
    4e3c:	ldr	w12, [x9, x11]
    4e40:	add	w12, w12, #0x1
    4e44:	str	w12, [x9, x11]
    4e48:	ldrh	w11, [x10, #10]
    4e4c:	lsl	x11, x11, #2
    4e50:	ldr	w12, [x9, x11]
    4e54:	add	w12, w12, #0x1
    4e58:	str	w12, [x9, x11]
    4e5c:	ldrh	w11, [x10, #12]
    4e60:	lsl	x11, x11, #2
    4e64:	ldr	w12, [x9, x11]
    4e68:	add	w12, w12, #0x1
    4e6c:	str	w12, [x9, x11]
    4e70:	ldrh	w11, [x10, #14]
    4e74:	lsl	x11, x11, #2
    4e78:	ldr	w12, [x9, x11]
    4e7c:	add	w12, w12, #0x1
    4e80:	str	w12, [x9, x11]
    4e84:	ldrh	w11, [x10, #16]
    4e88:	lsl	x11, x11, #2
    4e8c:	ldr	w12, [x9, x11]
    4e90:	add	w12, w12, #0x1
    4e94:	str	w12, [x9, x11]
    4e98:	ldrh	w11, [x10, #18]
    4e9c:	lsl	x11, x11, #2
    4ea0:	ldr	w12, [x9, x11]
    4ea4:	add	w12, w12, #0x1
    4ea8:	str	w12, [x9, x11]
    4eac:	ldrh	w11, [x10, #20]
    4eb0:	lsl	x11, x11, #2
    4eb4:	ldr	w12, [x9, x11]
    4eb8:	add	w12, w12, #0x1
    4ebc:	str	w12, [x9, x11]
    4ec0:	ldrh	w11, [x10, #22]
    4ec4:	lsl	x11, x11, #2
    4ec8:	ldr	w12, [x9, x11]
    4ecc:	add	w12, w12, #0x1
    4ed0:	str	w12, [x9, x11]
    4ed4:	ldrh	w11, [x10, #24]
    4ed8:	lsl	x11, x11, #2
    4edc:	ldr	w12, [x9, x11]
    4ee0:	add	w12, w12, #0x1
    4ee4:	str	w12, [x9, x11]
    4ee8:	ldrh	w11, [x10, #26]
    4eec:	lsl	x11, x11, #2
    4ef0:	ldr	w12, [x9, x11]
    4ef4:	add	w12, w12, #0x1
    4ef8:	str	w12, [x9, x11]
    4efc:	ldrh	w11, [x10, #28]
    4f00:	lsl	x11, x11, #2
    4f04:	ldr	w12, [x9, x11]
    4f08:	add	w12, w12, #0x1
    4f0c:	str	w12, [x9, x11]
    4f10:	ldrh	w11, [x10, #30]
    4f14:	lsl	x11, x11, #2
    4f18:	ldr	w12, [x9, x11]
    4f1c:	add	w12, w12, #0x1
    4f20:	str	w12, [x9, x11]
    4f24:	ldrh	w11, [x10, #32]
    4f28:	lsl	x11, x11, #2
    4f2c:	ldr	w12, [x9, x11]
    4f30:	add	w12, w12, #0x1
    4f34:	str	w12, [x9, x11]
    4f38:	ldrh	w11, [x10, #34]
    4f3c:	lsl	x11, x11, #2
    4f40:	ldr	w12, [x9, x11]
    4f44:	add	w12, w12, #0x1
    4f48:	str	w12, [x9, x11]
    4f4c:	ldrh	w11, [x10, #36]
    4f50:	lsl	x11, x11, #2
    4f54:	ldr	w12, [x9, x11]
    4f58:	add	w12, w12, #0x1
    4f5c:	str	w12, [x9, x11]
    4f60:	ldrh	w11, [x10, #38]
    4f64:	lsl	x11, x11, #2
    4f68:	ldr	w12, [x9, x11]
    4f6c:	add	w12, w12, #0x1
    4f70:	str	w12, [x9, x11]
    4f74:	ldrh	w11, [x10, #40]
    4f78:	lsl	x11, x11, #2
    4f7c:	ldr	w12, [x9, x11]
    4f80:	add	w12, w12, #0x1
    4f84:	str	w12, [x9, x11]
    4f88:	ldrh	w11, [x10, #42]
    4f8c:	lsl	x11, x11, #2
    4f90:	ldr	w12, [x9, x11]
    4f94:	add	w12, w12, #0x1
    4f98:	str	w12, [x9, x11]
    4f9c:	ldrh	w11, [x10, #44]
    4fa0:	lsl	x11, x11, #2
    4fa4:	ldr	w12, [x9, x11]
    4fa8:	add	w12, w12, #0x1
    4fac:	str	w12, [x9, x11]
    4fb0:	ldrh	w11, [x10, #46]
    4fb4:	lsl	x11, x11, #2
    4fb8:	ldr	w12, [x9, x11]
    4fbc:	add	w12, w12, #0x1
    4fc0:	str	w12, [x9, x11]
    4fc4:	ldrh	w11, [x10, #48]
    4fc8:	lsl	x11, x11, #2
    4fcc:	ldr	w12, [x9, x11]
    4fd0:	add	w12, w12, #0x1
    4fd4:	str	w12, [x9, x11]
    4fd8:	ldrh	w11, [x10, #50]
    4fdc:	lsl	x11, x11, #2
    4fe0:	ldr	w12, [x9, x11]
    4fe4:	add	w12, w12, #0x1
    4fe8:	str	w12, [x9, x11]
    4fec:	ldrh	w11, [x10, #52]
    4ff0:	lsl	x11, x11, #2
    4ff4:	ldr	w12, [x9, x11]
    4ff8:	add	w12, w12, #0x1
    4ffc:	str	w12, [x9, x11]
    5000:	ldrh	w11, [x10, #54]
    5004:	lsl	x11, x11, #2
    5008:	ldr	w12, [x9, x11]
    500c:	add	w12, w12, #0x1
    5010:	str	w12, [x9, x11]
    5014:	ldrh	w11, [x10, #56]
    5018:	lsl	x11, x11, #2
    501c:	ldr	w12, [x9, x11]
    5020:	add	w12, w12, #0x1
    5024:	str	w12, [x9, x11]
    5028:	ldrh	w11, [x10, #58]
    502c:	lsl	x11, x11, #2
    5030:	ldr	w12, [x9, x11]
    5034:	add	w12, w12, #0x1
    5038:	str	w12, [x9, x11]
    503c:	ldrh	w11, [x10, #60]
    5040:	lsl	x11, x11, #2
    5044:	ldr	w12, [x9, x11]
    5048:	add	w12, w12, #0x1
    504c:	str	w12, [x9, x11]
    5050:	ldrh	w11, [x10, #62]
    5054:	lsl	x11, x11, #2
    5058:	ldr	w12, [x9, x11]
    505c:	add	w12, w12, #0x1
    5060:	str	w12, [x9, x11]
    5064:	ldrh	w11, [x10, #64]
    5068:	lsl	x11, x11, #2
    506c:	ldr	w12, [x9, x11]
    5070:	add	w12, w12, #0x1
    5074:	str	w12, [x9, x11]
    5078:	ldrh	w11, [x10, #66]
    507c:	lsl	x11, x11, #2
    5080:	ldr	w12, [x9, x11]
    5084:	add	w12, w12, #0x1
    5088:	str	w12, [x9, x11]
    508c:	ldrh	w11, [x10, #68]
    5090:	lsl	x11, x11, #2
    5094:	ldr	w12, [x9, x11]
    5098:	add	w12, w12, #0x1
    509c:	str	w12, [x9, x11]
    50a0:	ldrh	w11, [x10, #70]
    50a4:	lsl	x11, x11, #2
    50a8:	ldr	w12, [x9, x11]
    50ac:	add	w12, w12, #0x1
    50b0:	str	w12, [x9, x11]
    50b4:	ldrh	w11, [x10, #72]
    50b8:	lsl	x11, x11, #2
    50bc:	ldr	w12, [x9, x11]
    50c0:	add	w12, w12, #0x1
    50c4:	str	w12, [x9, x11]
    50c8:	ldrh	w11, [x10, #74]
    50cc:	lsl	x11, x11, #2
    50d0:	ldr	w12, [x9, x11]
    50d4:	add	w12, w12, #0x1
    50d8:	str	w12, [x9, x11]
    50dc:	ldrh	w11, [x10, #76]
    50e0:	lsl	x11, x11, #2
    50e4:	ldr	w12, [x9, x11]
    50e8:	add	w12, w12, #0x1
    50ec:	str	w12, [x9, x11]
    50f0:	ldrh	w11, [x10, #78]
    50f4:	lsl	x11, x11, #2
    50f8:	ldr	w12, [x9, x11]
    50fc:	add	w12, w12, #0x1
    5100:	str	w12, [x9, x11]
    5104:	ldrh	w11, [x10, #80]
    5108:	lsl	x11, x11, #2
    510c:	ldr	w12, [x9, x11]
    5110:	add	w12, w12, #0x1
    5114:	str	w12, [x9, x11]
    5118:	ldrh	w11, [x10, #82]
    511c:	lsl	x11, x11, #2
    5120:	ldr	w12, [x9, x11]
    5124:	add	w12, w12, #0x1
    5128:	str	w12, [x9, x11]
    512c:	ldrh	w11, [x10, #84]
    5130:	lsl	x11, x11, #2
    5134:	ldr	w12, [x9, x11]
    5138:	add	w12, w12, #0x1
    513c:	str	w12, [x9, x11]
    5140:	ldrh	w11, [x10, #86]
    5144:	lsl	x11, x11, #2
    5148:	ldr	w12, [x9, x11]
    514c:	add	w12, w12, #0x1
    5150:	str	w12, [x9, x11]
    5154:	ldrh	w11, [x10, #88]
    5158:	lsl	x11, x11, #2
    515c:	ldr	w12, [x9, x11]
    5160:	add	w12, w12, #0x1
    5164:	str	w12, [x9, x11]
    5168:	ldrh	w11, [x10, #90]
    516c:	lsl	x11, x11, #2
    5170:	ldr	w12, [x9, x11]
    5174:	add	w12, w12, #0x1
    5178:	str	w12, [x9, x11]
    517c:	ldrh	w11, [x10, #92]
    5180:	lsl	x11, x11, #2
    5184:	ldr	w12, [x9, x11]
    5188:	add	w12, w12, #0x1
    518c:	str	w12, [x9, x11]
    5190:	ldrh	w11, [x10, #94]
    5194:	lsl	x11, x11, #2
    5198:	ldr	w12, [x9, x11]
    519c:	add	w12, w12, #0x1
    51a0:	str	w12, [x9, x11]
    51a4:	ldrh	w10, [x10, #96]
    51a8:	lsl	x10, x10, #2
    51ac:	ldr	w11, [x9, x10]
    51b0:	add	w11, w11, #0x1
    51b4:	str	w11, [x9, x10]
    51b8:	ldrh	w10, [x18, w0, sxtw #1]
    51bc:	lsl	x10, x10, #2
    51c0:	ldr	w11, [x9, x10]
    51c4:	add	w11, w11, #0x1
    51c8:	str	w11, [x9, x10]
    51cc:	ldr	w19, [x17, #668]
    51d0:	add	w28, w8, #0x1
    51d4:	cmp	w28, w19
    51d8:	b.ge	58bc <BZ2_compressBlock@@Base+0x1b84>  // b.tcont
    51dc:	ldr	x2, [sp, #96]
    51e0:	stur	w1, [x29, #-80]
    51e4:	cmp	w23, #0x6
    51e8:	sxtw	x26, w28
    51ec:	sub	x0, x29, #0x14
    51f0:	mov	w1, wzr
    51f4:	str	x24, [x29, #8]
    51f8:	cset	w24, eq  // eq = none
    51fc:	add	x23, x26, #0x31
    5200:	sub	w27, w19, #0x1
    5204:	bl	14a0 <memset@plt>
    5208:	mov	x0, x23
    520c:	cmp	w0, w19
    5210:	csel	w8, w0, w27, lt  // lt = tstop
    5214:	sub	w9, w8, w28
    5218:	cmp	w9, #0x31
    521c:	cset	w9, eq  // eq = none
    5220:	and	w9, w24, w9
    5224:	tbz	w9, #0, 57d4 <BZ2_compressBlock@@Base+0x1a9c>
    5228:	ldur	x18, [x29, #-96]
    522c:	ldr	x24, [x29, #8]
    5230:	ldur	w1, [x29, #-80]
    5234:	ldr	x23, [sp, #88]
    5238:	add	x10, x18, x26, lsl #1
    523c:	ldrh	w11, [x10]
    5240:	ldrh	w12, [x10, #2]
    5244:	ldrh	w15, [x10, #4]
    5248:	add	x11, x20, x11, lsl #4
    524c:	add	x12, x20, x12, lsl #4
    5250:	ldp	w13, w17, [x12]
    5254:	ldp	w14, w16, [x11]
    5258:	ldr	w11, [x11, #8]
    525c:	ldr	w12, [x12, #8]
    5260:	add	x15, x20, x15, lsl #4
    5264:	add	w13, w13, w14
    5268:	ldrh	w14, [x10, #6]
    526c:	add	w16, w17, w16
    5270:	add	w11, w12, w11
    5274:	ldp	w17, w12, [x15]
    5278:	ldr	w15, [x15, #8]
    527c:	add	x14, x20, x14, lsl #4
    5280:	add	w13, w13, w17
    5284:	ldrh	w17, [x10, #8]
    5288:	add	w12, w16, w12
    528c:	add	w11, w11, w15
    5290:	ldp	w15, w16, [x14]
    5294:	ldr	w14, [x14, #8]
    5298:	add	x17, x20, x17, lsl #4
    529c:	add	w13, w13, w15
    52a0:	add	w12, w12, w16
    52a4:	ldrh	w16, [x10, #10]
    52a8:	add	w11, w11, w14
    52ac:	ldp	w15, w14, [x17]
    52b0:	ldr	w17, [x17, #8]
    52b4:	add	x16, x20, x16, lsl #4
    52b8:	add	w13, w13, w15
    52bc:	ldrh	w15, [x10, #12]
    52c0:	add	w12, w12, w14
    52c4:	add	w11, w11, w17
    52c8:	ldp	w14, w17, [x16]
    52cc:	ldr	w16, [x16, #8]
    52d0:	add	x15, x20, x15, lsl #4
    52d4:	add	w13, w13, w14
    52d8:	ldrh	w14, [x10, #14]
    52dc:	add	w12, w12, w17
    52e0:	add	w11, w11, w16
    52e4:	ldp	w16, w17, [x15]
    52e8:	ldr	w15, [x15, #8]
    52ec:	add	x14, x20, x14, lsl #4
    52f0:	add	w12, w12, w17
    52f4:	ldrh	w17, [x10, #16]
    52f8:	add	w13, w13, w16
    52fc:	add	w11, w11, w15
    5300:	ldp	w16, w15, [x14]
    5304:	ldr	w14, [x14, #8]
    5308:	add	x17, x20, x17, lsl #4
    530c:	add	w13, w13, w16
    5310:	ldrh	w16, [x10, #18]
    5314:	add	w12, w12, w15
    5318:	add	w11, w11, w14
    531c:	ldp	w15, w14, [x17]
    5320:	ldr	w17, [x17, #8]
    5324:	add	x16, x20, x16, lsl #4
    5328:	add	w13, w13, w15
    532c:	ldrh	w15, [x10, #20]
    5330:	add	w12, w12, w14
    5334:	add	w11, w11, w17
    5338:	ldp	w14, w17, [x16]
    533c:	ldr	w16, [x16, #8]
    5340:	add	x15, x20, x15, lsl #4
    5344:	add	w13, w13, w14
    5348:	add	w12, w12, w17
    534c:	ldrh	w17, [x10, #22]
    5350:	add	w11, w11, w16
    5354:	ldp	w14, w16, [x15]
    5358:	ldr	w15, [x15, #8]
    535c:	add	x17, x20, x17, lsl #4
    5360:	add	w13, w13, w14
    5364:	ldrh	w14, [x10, #24]
    5368:	add	w12, w12, w16
    536c:	add	w11, w11, w15
    5370:	ldp	w16, w15, [x17]
    5374:	ldr	w17, [x17, #8]
    5378:	add	x14, x20, x14, lsl #4
    537c:	add	w13, w13, w16
    5380:	ldrh	w16, [x10, #26]
    5384:	add	w12, w12, w15
    5388:	add	w11, w11, w17
    538c:	ldp	w15, w17, [x14]
    5390:	ldr	w14, [x14, #8]
    5394:	add	x16, x20, x16, lsl #4
    5398:	add	w12, w12, w17
    539c:	ldrh	w17, [x10, #28]
    53a0:	add	w13, w13, w15
    53a4:	add	w11, w11, w14
    53a8:	ldp	w15, w14, [x16]
    53ac:	ldr	w16, [x16, #8]
    53b0:	add	x17, x20, x17, lsl #4
    53b4:	add	w13, w13, w15
    53b8:	ldrh	w15, [x10, #30]
    53bc:	add	w12, w12, w14
    53c0:	add	w11, w11, w16
    53c4:	ldp	w14, w16, [x17]
    53c8:	ldr	w17, [x17, #8]
    53cc:	add	x15, x20, x15, lsl #4
    53d0:	add	w13, w13, w14
    53d4:	ldrh	w14, [x10, #32]
    53d8:	add	w12, w12, w16
    53dc:	add	w11, w11, w17
    53e0:	ldp	w16, w17, [x15]
    53e4:	ldr	w15, [x15, #8]
    53e8:	add	x14, x20, x14, lsl #4
    53ec:	add	w13, w13, w16
    53f0:	add	w12, w12, w17
    53f4:	ldrh	w17, [x10, #34]
    53f8:	add	w11, w11, w15
    53fc:	ldp	w16, w15, [x14]
    5400:	ldr	w14, [x14, #8]
    5404:	add	x17, x20, x17, lsl #4
    5408:	add	w13, w13, w16
    540c:	ldrh	w16, [x10, #36]
    5410:	add	w12, w12, w15
    5414:	add	w11, w11, w14
    5418:	ldp	w15, w14, [x17]
    541c:	ldr	w17, [x17, #8]
    5420:	add	x16, x20, x16, lsl #4
    5424:	add	w13, w13, w15
    5428:	ldrh	w15, [x10, #38]
    542c:	add	w12, w12, w14
    5430:	add	w11, w11, w17
    5434:	ldp	w14, w17, [x16]
    5438:	ldr	w16, [x16, #8]
    543c:	add	x15, x20, x15, lsl #4
    5440:	add	w12, w12, w17
    5444:	ldrh	w17, [x10, #40]
    5448:	add	w13, w13, w14
    544c:	add	w11, w11, w16
    5450:	ldp	w14, w16, [x15]
    5454:	ldr	w15, [x15, #8]
    5458:	add	x17, x20, x17, lsl #4
    545c:	add	w13, w13, w14
    5460:	ldrh	w14, [x10, #42]
    5464:	add	w12, w12, w16
    5468:	add	w11, w11, w15
    546c:	ldp	w16, w15, [x17]
    5470:	ldr	w17, [x17, #8]
    5474:	add	x14, x20, x14, lsl #4
    5478:	add	w13, w13, w16
    547c:	ldrh	w16, [x10, #44]
    5480:	add	w12, w12, w15
    5484:	add	w11, w11, w17
    5488:	ldp	w15, w17, [x14]
    548c:	ldr	w14, [x14, #8]
    5490:	add	x16, x20, x16, lsl #4
    5494:	add	w13, w13, w15
    5498:	add	w12, w12, w17
    549c:	ldrh	w17, [x10, #46]
    54a0:	add	w11, w11, w14
    54a4:	ldp	w15, w14, [x16]
    54a8:	ldr	w16, [x16, #8]
    54ac:	add	x17, x20, x17, lsl #4
    54b0:	add	w13, w13, w15
    54b4:	ldrh	w15, [x10, #48]
    54b8:	add	w12, w12, w14
    54bc:	add	w11, w11, w16
    54c0:	ldp	w14, w16, [x17]
    54c4:	ldr	w17, [x17, #8]
    54c8:	add	x15, x20, x15, lsl #4
    54cc:	add	w13, w13, w14
    54d0:	ldrh	w14, [x10, #50]
    54d4:	add	w12, w12, w16
    54d8:	add	w11, w11, w17
    54dc:	ldp	w16, w17, [x15]
    54e0:	ldr	w15, [x15, #8]
    54e4:	add	x14, x20, x14, lsl #4
    54e8:	add	w12, w12, w17
    54ec:	ldrh	w17, [x10, #52]
    54f0:	add	w13, w13, w16
    54f4:	add	w11, w11, w15
    54f8:	ldp	w16, w15, [x14]
    54fc:	ldr	w14, [x14, #8]
    5500:	add	x17, x20, x17, lsl #4
    5504:	add	w13, w13, w16
    5508:	ldrh	w16, [x10, #54]
    550c:	add	w12, w12, w15
    5510:	add	w11, w11, w14
    5514:	ldp	w15, w14, [x17]
    5518:	ldr	w17, [x17, #8]
    551c:	add	x16, x20, x16, lsl #4
    5520:	add	w13, w13, w15
    5524:	ldrh	w15, [x10, #56]
    5528:	add	w12, w12, w14
    552c:	add	w11, w11, w17
    5530:	ldp	w14, w17, [x16]
    5534:	ldr	w16, [x16, #8]
    5538:	add	x15, x20, x15, lsl #4
    553c:	add	w13, w13, w14
    5540:	add	w12, w12, w17
    5544:	ldrh	w17, [x10, #58]
    5548:	add	w11, w11, w16
    554c:	ldp	w14, w16, [x15]
    5550:	ldr	w15, [x15, #8]
    5554:	add	x17, x20, x17, lsl #4
    5558:	add	w13, w13, w14
    555c:	ldrh	w14, [x10, #60]
    5560:	add	w12, w12, w16
    5564:	add	w11, w11, w15
    5568:	ldp	w16, w15, [x17]
    556c:	ldr	w17, [x17, #8]
    5570:	add	x14, x20, x14, lsl #4
    5574:	add	w13, w13, w16
    5578:	ldrh	w16, [x10, #62]
    557c:	add	w12, w12, w15
    5580:	add	w11, w11, w17
    5584:	ldp	w15, w17, [x14]
    5588:	ldr	w14, [x14, #8]
    558c:	add	x16, x20, x16, lsl #4
    5590:	add	w12, w12, w17
    5594:	ldrh	w17, [x10, #64]
    5598:	add	w13, w13, w15
    559c:	add	w11, w11, w14
    55a0:	ldp	w15, w14, [x16]
    55a4:	ldr	w16, [x16, #8]
    55a8:	add	x17, x20, x17, lsl #4
    55ac:	add	w13, w13, w15
    55b0:	ldrh	w15, [x10, #66]
    55b4:	add	w12, w12, w14
    55b8:	add	w11, w11, w16
    55bc:	ldp	w14, w16, [x17]
    55c0:	ldr	w17, [x17, #8]
    55c4:	add	x15, x20, x15, lsl #4
    55c8:	add	w13, w13, w14
    55cc:	ldrh	w14, [x10, #68]
    55d0:	add	w12, w12, w16
    55d4:	add	w11, w11, w17
    55d8:	ldp	w16, w17, [x15]
    55dc:	ldr	w15, [x15, #8]
    55e0:	add	x14, x20, x14, lsl #4
    55e4:	add	w13, w13, w16
    55e8:	add	w12, w12, w17
    55ec:	ldrh	w17, [x10, #70]
    55f0:	add	w11, w11, w15
    55f4:	ldp	w16, w15, [x14]
    55f8:	ldr	w14, [x14, #8]
    55fc:	add	x17, x20, x17, lsl #4
    5600:	add	w13, w13, w16
    5604:	ldrh	w16, [x10, #72]
    5608:	add	w12, w12, w15
    560c:	add	w11, w11, w14
    5610:	ldp	w15, w14, [x17]
    5614:	ldr	w17, [x17, #8]
    5618:	add	x16, x20, x16, lsl #4
    561c:	add	w13, w13, w15
    5620:	ldrh	w15, [x10, #74]
    5624:	add	w12, w12, w14
    5628:	add	w11, w11, w17
    562c:	ldp	w14, w17, [x16]
    5630:	ldr	w16, [x16, #8]
    5634:	add	x15, x20, x15, lsl #4
    5638:	add	w12, w12, w17
    563c:	ldrh	w17, [x10, #76]
    5640:	add	w13, w13, w14
    5644:	add	w11, w11, w16
    5648:	ldp	w14, w16, [x15]
    564c:	ldr	w15, [x15, #8]
    5650:	add	x17, x20, x17, lsl #4
    5654:	add	w13, w13, w14
    5658:	ldrh	w14, [x10, #78]
    565c:	add	w12, w12, w16
    5660:	add	w11, w11, w15
    5664:	ldp	w16, w15, [x17]
    5668:	ldr	w17, [x17, #8]
    566c:	add	x14, x20, x14, lsl #4
    5670:	add	w13, w13, w16
    5674:	ldrh	w16, [x10, #80]
    5678:	add	w12, w12, w15
    567c:	add	w11, w11, w17
    5680:	ldp	w15, w17, [x14]
    5684:	ldr	w14, [x14, #8]
    5688:	add	x16, x20, x16, lsl #4
    568c:	add	w13, w13, w15
    5690:	add	w12, w12, w17
    5694:	ldrh	w17, [x10, #82]
    5698:	add	w11, w11, w14
    569c:	ldp	w15, w14, [x16]
    56a0:	ldr	w16, [x16, #8]
    56a4:	add	x17, x20, x17, lsl #4
    56a8:	add	w13, w13, w15
    56ac:	ldrh	w15, [x10, #84]
    56b0:	add	w12, w12, w14
    56b4:	add	w11, w11, w16
    56b8:	ldp	w14, w16, [x17]
    56bc:	ldr	w17, [x17, #8]
    56c0:	add	x15, x20, x15, lsl #4
    56c4:	add	w13, w13, w14
    56c8:	ldrh	w14, [x10, #86]
    56cc:	add	w12, w12, w16
    56d0:	add	w11, w11, w17
    56d4:	ldp	w16, w17, [x15]
    56d8:	ldr	w15, [x15, #8]
    56dc:	add	x14, x20, x14, lsl #4
    56e0:	add	w12, w12, w17
    56e4:	ldrh	w17, [x10, #88]
    56e8:	add	w13, w13, w16
    56ec:	add	w11, w11, w15
    56f0:	ldp	w16, w15, [x14]
    56f4:	ldr	w14, [x14, #8]
    56f8:	add	x17, x20, x17, lsl #4
    56fc:	add	w13, w13, w16
    5700:	ldrh	w16, [x10, #90]
    5704:	add	w12, w12, w15
    5708:	add	w11, w11, w14
    570c:	ldp	w15, w14, [x17]
    5710:	ldr	w17, [x17, #8]
    5714:	add	x16, x20, x16, lsl #4
    5718:	add	w13, w13, w15
    571c:	ldrh	w15, [x10, #92]
    5720:	add	w12, w12, w14
    5724:	add	w11, w11, w17
    5728:	ldp	w14, w17, [x16]
    572c:	ldr	w16, [x16, #8]
    5730:	add	x15, x20, x15, lsl #4
    5734:	add	w13, w13, w14
    5738:	add	w11, w11, w16
    573c:	ldp	w14, w16, [x15]
    5740:	add	w12, w12, w17
    5744:	ldrh	w17, [x10, #94]
    5748:	ldrh	w10, [x10, #96]
    574c:	add	w13, w13, w14
    5750:	ldr	w14, [x15, #8]
    5754:	add	x15, x20, x17, lsl #4
    5758:	add	w12, w12, w16
    575c:	add	x10, x20, x10, lsl #4
    5760:	add	w11, w11, w14
    5764:	ldp	w16, w14, [x15]
    5768:	ldr	w15, [x15, #8]
    576c:	ldur	x17, [x29, #-88]
    5770:	add	w13, w13, w16
    5774:	ldrh	w16, [x18, x0, lsl #1]
    5778:	add	w12, w12, w14
    577c:	add	w11, w11, w15
    5780:	ldp	w14, w15, [x10]
    5784:	add	x16, x20, x16, lsl #4
    5788:	ldr	w10, [x10, #8]
    578c:	add	w13, w13, w14
    5790:	add	w12, w12, w15
    5794:	ldp	w14, w15, [x16]
    5798:	ldr	w16, [x16, #8]
    579c:	add	w10, w11, w10
    57a0:	add	w11, w13, w14
    57a4:	add	w12, w12, w15
    57a8:	add	w10, w10, w16
    57ac:	sturh	w11, [x29, #-20]
    57b0:	lsr	w11, w11, #16
    57b4:	sturh	w12, [x29, #-16]
    57b8:	lsr	w12, w12, #16
    57bc:	sturh	w10, [x29, #-12]
    57c0:	lsr	w10, w10, #16
    57c4:	sturh	w11, [x29, #-18]
    57c8:	sturh	w12, [x29, #-14]
    57cc:	sturh	w10, [x29, #-10]
    57d0:	b	582c <BZ2_compressBlock@@Base+0x1af4>
    57d4:	ldp	x18, x17, [x29, #-96]
    57d8:	ldr	x24, [x29, #8]
    57dc:	ldur	w1, [x29, #-80]
    57e0:	ldr	x23, [sp, #88]
    57e4:	cmp	w8, w26
    57e8:	b.lt	582c <BZ2_compressBlock@@Base+0x1af4>  // b.tstop
    57ec:	sxtw	x10, w8
    57f0:	mov	x11, x26
    57f4:	ldrh	w12, [x18, x11, lsl #1]
    57f8:	sub	x13, x29, #0x14
    57fc:	mov	x14, x23
    5800:	add	x12, x25, x12
    5804:	ldrb	w15, [x12]
    5808:	ldrh	w16, [x13]
    580c:	subs	x14, x14, #0x1
    5810:	add	x12, x12, #0x102
    5814:	add	w15, w16, w15
    5818:	strh	w15, [x13], #2
    581c:	b.ne	5804 <BZ2_compressBlock@@Base+0x1acc>  // b.any
    5820:	cmp	x11, x10
    5824:	add	x11, x11, #0x1
    5828:	b.lt	57f4 <BZ2_compressBlock@@Base+0x1abc>  // b.tstop
    582c:	mov	w11, #0xc9ff                	// #51711
    5830:	mov	x12, xzr
    5834:	movk	w11, #0x3b9a, lsl #16
    5838:	mov	w10, #0xffffffff            	// #-1
    583c:	ldrh	w13, [x22, x12, lsl #1]
    5840:	cmp	w11, w13
    5844:	csel	w10, w12, w10, gt
    5848:	add	x12, x12, #0x1
    584c:	csel	w11, w13, w11, gt
    5850:	cmp	x23, x12
    5854:	b.ne	583c <BZ2_compressBlock@@Base+0x1b04>  // b.any
    5858:	sbfiz	x12, x10, #2, #32
    585c:	sub	x15, x29, #0x2c
    5860:	ldr	w13, [x15, x12]
    5864:	add	w1, w11, w1
    5868:	sxtw	x11, w10
    586c:	add	x14, x17, x24
    5870:	add	w13, w13, #0x1
    5874:	add	x24, x24, #0x1
    5878:	str	w13, [x15, x12]
    587c:	strb	w10, [x14, #1704]
    5880:	tbnz	w9, #0, 4dd4 <BZ2_compressBlock@@Base+0x109c>
    5884:	cmp	w8, w26
    5888:	mov	w13, #0x408                 	// #1032
    588c:	b.lt	51cc <BZ2_compressBlock@@Base+0x1494>  // b.tstop
    5890:	sxtw	x9, w8
    5894:	ldrh	w10, [x18, x26, lsl #1]
    5898:	madd	x12, x11, x13, x17
    589c:	cmp	x26, x9
    58a0:	add	x26, x26, #0x1
    58a4:	add	x10, x12, x10, lsl #2
    58a8:	ldr	w12, [x10, x21]
    58ac:	add	w12, w12, #0x1
    58b0:	str	w12, [x10, x21]
    58b4:	b.lt	5894 <BZ2_compressBlock@@Base+0x1b5c>  // b.tstop
    58b8:	b	51cc <BZ2_compressBlock@@Base+0x1494>
    58bc:	ldur	x28, [x29, #-88]
    58c0:	b	58cc <BZ2_compressBlock@@Base+0x1b94>
    58c4:	mov	w24, wzr
    58c8:	mov	w1, wzr
    58cc:	ldr	w8, [x28, #656]
    58d0:	cmp	w8, #0x3
    58d4:	b.ge	5924 <BZ2_compressBlock@@Base+0x1bec>  // b.tcont
    58d8:	ldp	x26, x28, [sp, #56]
    58dc:	mov	x19, x23
    58e0:	mov	x27, x25
    58e4:	mov	w3, #0x11                  	// #17
    58e8:	mov	x0, x27
    58ec:	mov	x1, x26
    58f0:	mov	w2, w28
    58f4:	bl	1430 <BZ2_hbMakeCodeLengths@plt>
    58f8:	add	x27, x27, #0x102
    58fc:	subs	x19, x19, #0x1
    5900:	add	x26, x26, #0x408
    5904:	b.ne	58e4 <BZ2_compressBlock@@Base+0x1bac>  // b.any
    5908:	ldr	w8, [sp, #72]
    590c:	ldur	x28, [x29, #-88]
    5910:	add	w8, w8, #0x1
    5914:	cmp	w8, #0x4
    5918:	str	w8, [sp, #72]
    591c:	b.ne	4d0c <BZ2_compressBlock@@Base+0xfd4>  // b.any
    5920:	b	5998 <BZ2_compressBlock@@Base+0x1c60>
    5924:	str	x24, [x29, #8]
    5928:	adrp	x24, 1e000 <BZ2_bzerror@@Base+0x1092c>
    592c:	ldr	x24, [x24, #4016]
    5930:	ldr	w8, [sp, #72]
    5934:	cmp	w1, #0x0
    5938:	ldr	x0, [x24]
    593c:	add	w2, w8, #0x1
    5940:	add	w8, w1, #0x7
    5944:	csel	w8, w8, w1, lt  // lt = tstop
    5948:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    594c:	asr	w3, w8, #3
    5950:	add	x1, x1, #0xb0d
    5954:	bl	1610 <fprintf@plt>
    5958:	ldr	x1, [x24]
    595c:	adrp	x27, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    5960:	sub	x19, x29, #0x2c
    5964:	mov	x26, x23
    5968:	add	x27, x27, #0xb36
    596c:	ldr	w2, [x19], #4
    5970:	mov	x0, x1
    5974:	mov	x1, x27
    5978:	bl	1610 <fprintf@plt>
    597c:	ldr	x1, [x24]
    5980:	subs	x26, x26, #0x1
    5984:	b.ne	596c <BZ2_compressBlock@@Base+0x1c34>  // b.any
    5988:	mov	w0, #0xa                   	// #10
    598c:	bl	1460 <fputc@plt>
    5990:	ldr	x24, [x29, #8]
    5994:	b	58d8 <BZ2_compressBlock@@Base+0x1ba0>
    5998:	mov	w8, #0x4653                	// #18003
    599c:	cmp	w24, w8
    59a0:	b.lt	59ac <BZ2_compressBlock@@Base+0x1c74>  // b.tstop
    59a4:	mov	w0, #0xbbb                 	// #3003
    59a8:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    59ac:	ldr	x19, [sp, #32]
    59b0:	mov	x8, xzr
    59b4:	sub	x9, x29, #0x3c
    59b8:	strb	w8, [x9, x8]
    59bc:	add	x8, x8, #0x1
    59c0:	cmp	x23, x8
    59c4:	b.ne	59b8 <BZ2_compressBlock@@Base+0x1c80>  // b.any
    59c8:	ldr	x5, [sp, #80]
    59cc:	cmp	w24, #0x1
    59d0:	b.lt	5a3c <BZ2_compressBlock@@Base+0x1d04>  // b.tstop
    59d4:	ldurb	w11, [x29, #-60]
    59d8:	sub	x10, x29, #0x3c
    59dc:	mov	x8, xzr
    59e0:	mov	w9, w24
    59e4:	orr	x10, x10, #0x1
    59e8:	mov	w12, #0x4cfa                	// #19706
    59ec:	b	5a04 <BZ2_compressBlock@@Base+0x1ccc>
    59f0:	mov	w15, wzr
    59f4:	add	x8, x8, #0x1
    59f8:	cmp	x8, x9
    59fc:	strb	w15, [x13, x12]
    5a00:	b.eq	5a38 <BZ2_compressBlock@@Base+0x1d00>  // b.none
    5a04:	add	x13, x28, x8
    5a08:	ldrb	w14, [x13, #1704]
    5a0c:	cmp	w14, w11, uxtb
    5a10:	b.eq	59f0 <BZ2_compressBlock@@Base+0x1cb8>  // b.none
    5a14:	mov	x15, xzr
    5a18:	ldrb	w16, [x10, x15]
    5a1c:	strb	w11, [x10, x15]
    5a20:	add	x15, x15, #0x1
    5a24:	cmp	w14, w16
    5a28:	mov	w11, w16
    5a2c:	b.ne	5a18 <BZ2_compressBlock@@Base+0x1ce0>  // b.any
    5a30:	mov	w11, w14
    5a34:	b	59f4 <BZ2_compressBlock@@Base+0x1cbc>
    5a38:	sturb	w11, [x29, #-60]
    5a3c:	cmp	x19, #0x1
    5a40:	mov	w8, #0x934d                	// #37709
    5a44:	mov	w9, #0x934c                	// #37708
    5a48:	csinc	x27, x19, xzr, gt
    5a4c:	str	x24, [x29, #8]
    5a50:	mov	x20, xzr
    5a54:	add	x24, x28, x8
    5a58:	add	x25, x28, x9
    5a5c:	and	x26, x27, #0x7ffffffffffffffe
    5a60:	b	5ab4 <BZ2_compressBlock@@Base+0x1d7c>
    5a64:	mov	w21, wzr
    5a68:	mov	w22, #0x20                  	// #32
    5a6c:	mov	w8, #0x408                 	// #1032
    5a70:	madd	x8, x20, x8, x28
    5a74:	mov	w9, #0x102                 	// #258
    5a78:	mov	w10, #0x9958                	// #39256
    5a7c:	madd	x9, x20, x9, x28
    5a80:	add	x0, x8, x10
    5a84:	mov	w8, #0x934c                	// #37708
    5a88:	add	x1, x9, x8
    5a8c:	mov	w2, w22
    5a90:	mov	w3, w21
    5a94:	ldr	x4, [sp, #64]
    5a98:	bl	15a0 <BZ2_hbAssignCodes@plt>
    5a9c:	ldr	x5, [sp, #80]
    5aa0:	add	x20, x20, #0x1
    5aa4:	add	x24, x24, #0x102
    5aa8:	cmp	x20, x23
    5aac:	add	x25, x25, #0x102
    5ab0:	b.eq	5b7c <BZ2_compressBlock@@Base+0x1e44>  // b.none
    5ab4:	cmn	w5, #0x1
    5ab8:	b.lt	5a64 <BZ2_compressBlock@@Base+0x1d2c>  // b.tstop
    5abc:	cmp	x27, #0x2
    5ac0:	b.cs	5ad4 <BZ2_compressBlock@@Base+0x1d9c>  // b.hs, b.nlast
    5ac4:	mov	x8, xzr
    5ac8:	mov	w21, wzr
    5acc:	mov	w22, #0x20                  	// #32
    5ad0:	b	5b38 <BZ2_compressBlock@@Base+0x1e00>
    5ad4:	mov	w9, wzr
    5ad8:	mov	w10, wzr
    5adc:	mov	w8, #0x20                  	// #32
    5ae0:	mov	x12, x26
    5ae4:	mov	x13, x24
    5ae8:	mov	w11, #0x20                  	// #32
    5aec:	ldurb	w14, [x13, #-1]
    5af0:	ldrb	w15, [x13], #2
    5af4:	cmp	w9, w14
    5af8:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    5afc:	cmp	w10, w15
    5b00:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    5b04:	cmp	w8, w14
    5b08:	csel	w8, w14, w8, gt
    5b0c:	cmp	w11, w15
    5b10:	csel	w11, w15, w11, gt
    5b14:	subs	x12, x12, #0x2
    5b18:	b.ne	5aec <BZ2_compressBlock@@Base+0x1db4>  // b.any
    5b1c:	cmp	w9, w10
    5b20:	csel	w21, w9, w10, hi  // hi = pmore
    5b24:	cmp	w8, w11
    5b28:	csel	w22, w8, w11, lt  // lt = tstop
    5b2c:	cmp	x27, x26
    5b30:	mov	x8, x26
    5b34:	b.eq	5b58 <BZ2_compressBlock@@Base+0x1e20>  // b.none
    5b38:	ldrb	w9, [x25, x8]
    5b3c:	add	x8, x8, #0x1
    5b40:	cmp	w21, w9
    5b44:	csel	w21, w9, w21, cc  // cc = lo, ul, last
    5b48:	cmp	w22, w9
    5b4c:	csel	w22, w9, w22, gt
    5b50:	cmp	x8, x19
    5b54:	b.lt	5b38 <BZ2_compressBlock@@Base+0x1e00>  // b.tstop
    5b58:	cmp	w21, #0x12
    5b5c:	b.lt	5b68 <BZ2_compressBlock@@Base+0x1e30>  // b.tstop
    5b60:	mov	w0, #0xbbc                 	// #3004
    5b64:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    5b68:	cmp	w22, #0x0
    5b6c:	b.gt	5a6c <BZ2_compressBlock@@Base+0x1d34>
    5b70:	mov	w0, #0xbbd                 	// #3005
    5b74:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    5b78:	b	5a6c <BZ2_compressBlock@@Base+0x1d34>
    5b7c:	mov	x8, xzr
    5b80:	add	x9, x28, #0x8f
    5b84:	sub	x10, x29, #0x3c
    5b88:	strb	wzr, [x10, x8]
    5b8c:	ldurb	w11, [x9, #-15]
    5b90:	cmp	w11, #0x0
    5b94:	cset	w12, ne  // ne = any
    5b98:	strb	w12, [x10, x8]
    5b9c:	ldurb	w12, [x9, #-14]
    5ba0:	orr	w11, w11, w12
    5ba4:	tst	w11, #0xff
    5ba8:	cset	w12, ne  // ne = any
    5bac:	strb	w12, [x10, x8]
    5bb0:	ldurb	w12, [x9, #-13]
    5bb4:	orr	w11, w11, w12
    5bb8:	tst	w11, #0xff
    5bbc:	cset	w12, ne  // ne = any
    5bc0:	strb	w12, [x10, x8]
    5bc4:	ldurb	w12, [x9, #-12]
    5bc8:	orr	w11, w11, w12
    5bcc:	tst	w11, #0xff
    5bd0:	cset	w12, ne  // ne = any
    5bd4:	strb	w12, [x10, x8]
    5bd8:	ldurb	w12, [x9, #-11]
    5bdc:	orr	w11, w11, w12
    5be0:	tst	w11, #0xff
    5be4:	cset	w12, ne  // ne = any
    5be8:	strb	w12, [x10, x8]
    5bec:	ldurb	w12, [x9, #-10]
    5bf0:	orr	w11, w11, w12
    5bf4:	tst	w11, #0xff
    5bf8:	cset	w12, ne  // ne = any
    5bfc:	strb	w12, [x10, x8]
    5c00:	ldurb	w12, [x9, #-9]
    5c04:	orr	w11, w11, w12
    5c08:	tst	w11, #0xff
    5c0c:	cset	w12, ne  // ne = any
    5c10:	strb	w12, [x10, x8]
    5c14:	ldurb	w12, [x9, #-8]
    5c18:	orr	w11, w11, w12
    5c1c:	tst	w11, #0xff
    5c20:	cset	w12, ne  // ne = any
    5c24:	strb	w12, [x10, x8]
    5c28:	ldurb	w12, [x9, #-7]
    5c2c:	orr	w11, w11, w12
    5c30:	tst	w11, #0xff
    5c34:	cset	w12, ne  // ne = any
    5c38:	strb	w12, [x10, x8]
    5c3c:	ldurb	w12, [x9, #-6]
    5c40:	orr	w11, w11, w12
    5c44:	tst	w11, #0xff
    5c48:	cset	w12, ne  // ne = any
    5c4c:	strb	w12, [x10, x8]
    5c50:	ldurb	w12, [x9, #-5]
    5c54:	orr	w11, w11, w12
    5c58:	tst	w11, #0xff
    5c5c:	cset	w12, ne  // ne = any
    5c60:	strb	w12, [x10, x8]
    5c64:	ldurb	w12, [x9, #-4]
    5c68:	orr	w11, w11, w12
    5c6c:	tst	w11, #0xff
    5c70:	cset	w12, ne  // ne = any
    5c74:	strb	w12, [x10, x8]
    5c78:	ldurb	w12, [x9, #-3]
    5c7c:	orr	w11, w11, w12
    5c80:	tst	w11, #0xff
    5c84:	cset	w12, ne  // ne = any
    5c88:	strb	w12, [x10, x8]
    5c8c:	ldurb	w12, [x9, #-2]
    5c90:	orr	w11, w11, w12
    5c94:	tst	w11, #0xff
    5c98:	cset	w12, ne  // ne = any
    5c9c:	strb	w12, [x10, x8]
    5ca0:	ldurb	w12, [x9, #-1]
    5ca4:	orr	w11, w11, w12
    5ca8:	tst	w11, #0xff
    5cac:	cset	w12, ne  // ne = any
    5cb0:	strb	w12, [x10, x8]
    5cb4:	ldrb	w12, [x9], #16
    5cb8:	orr	w11, w11, w12
    5cbc:	tst	w11, #0xff
    5cc0:	cset	w11, ne  // ne = any
    5cc4:	strb	w11, [x10, x8]
    5cc8:	add	x8, x8, #0x1
    5ccc:	cmp	x8, #0x10
    5cd0:	b.ne	5b88 <BZ2_compressBlock@@Base+0x1e50>  // b.any
    5cd4:	mov	x20, x28
    5cd8:	ldr	w8, [x20, #116]!
    5cdc:	mov	x12, xzr
    5ce0:	sub	x13, x29, #0x3c
    5ce4:	mov	w14, #0x80000000            	// #-2147483648
    5ce8:	ldr	w10, [x20, #528]
    5cec:	ldr	w11, [x20, #524]
    5cf0:	add	x21, x20, #0x210
    5cf4:	add	x22, x20, #0x20c
    5cf8:	sub	x24, x20, #0x24
    5cfc:	mov	w9, w8
    5d00:	b	5d24 <BZ2_compressBlock@@Base+0x1fec>
    5d04:	lsr	w15, w14, w10
    5d08:	orr	w11, w15, w11
    5d0c:	add	x12, x12, #0x1
    5d10:	add	w10, w10, #0x1
    5d14:	cmp	x12, #0x10
    5d18:	str	w11, [x22]
    5d1c:	str	w10, [x21]
    5d20:	b.eq	5db4 <BZ2_compressBlock@@Base+0x207c>  // b.none
    5d24:	ldrb	w15, [x13, x12]
    5d28:	cbz	w15, 5d70 <BZ2_compressBlock@@Base+0x2038>
    5d2c:	cmp	w10, #0x8
    5d30:	b.lt	5d04 <BZ2_compressBlock@@Base+0x1fcc>  // b.tstop
    5d34:	ldr	x10, [x24]
    5d38:	lsr	w11, w11, #24
    5d3c:	strb	w11, [x10, w9, sxtw]
    5d40:	ldr	w9, [x20]
    5d44:	add	w9, w9, #0x1
    5d48:	str	w9, [x20]
    5d4c:	ldr	w10, [x22]
    5d50:	lsl	w11, w10, #8
    5d54:	str	w11, [x22]
    5d58:	ldr	w15, [x21]
    5d5c:	sub	w10, w15, #0x8
    5d60:	cmp	w15, #0xf
    5d64:	str	w10, [x21]
    5d68:	b.gt	5d34 <BZ2_compressBlock@@Base+0x1ffc>
    5d6c:	b	5d04 <BZ2_compressBlock@@Base+0x1fcc>
    5d70:	cmp	w10, #0x8
    5d74:	b.lt	5d0c <BZ2_compressBlock@@Base+0x1fd4>  // b.tstop
    5d78:	ldr	x10, [x24]
    5d7c:	lsr	w11, w11, #24
    5d80:	strb	w11, [x10, w9, sxtw]
    5d84:	ldr	w9, [x20]
    5d88:	add	w9, w9, #0x1
    5d8c:	str	w9, [x20]
    5d90:	ldr	w10, [x22]
    5d94:	lsl	w11, w10, #8
    5d98:	str	w11, [x22]
    5d9c:	ldr	w15, [x21]
    5da0:	sub	w10, w15, #0x8
    5da4:	cmp	w15, #0xf
    5da8:	str	w10, [x21]
    5dac:	b.gt	5d78 <BZ2_compressBlock@@Base+0x2040>
    5db0:	b	5d0c <BZ2_compressBlock@@Base+0x1fd4>
    5db4:	mov	x12, xzr
    5db8:	sub	x13, x29, #0x3c
    5dbc:	mov	w14, #0x80000000            	// #-2147483648
    5dc0:	b	5dd0 <BZ2_compressBlock@@Base+0x2098>
    5dc4:	add	x12, x12, #0x1
    5dc8:	cmp	x12, #0x10
    5dcc:	b.eq	5e9c <BZ2_compressBlock@@Base+0x2164>  // b.none
    5dd0:	ldrb	w15, [x13, x12]
    5dd4:	cbz	w15, 5dc4 <BZ2_compressBlock@@Base+0x208c>
    5dd8:	mov	x15, xzr
    5ddc:	lsl	x16, x12, #4
    5de0:	b	5e04 <BZ2_compressBlock@@Base+0x20cc>
    5de4:	lsr	w17, w14, w10
    5de8:	orr	w11, w17, w11
    5dec:	add	x15, x15, #0x1
    5df0:	add	w10, w10, #0x1
    5df4:	cmp	x15, #0x10
    5df8:	str	w11, [x22]
    5dfc:	str	w10, [x21]
    5e00:	b.eq	5dc4 <BZ2_compressBlock@@Base+0x208c>  // b.none
    5e04:	add	x17, x15, x16
    5e08:	add	x17, x28, x17
    5e0c:	ldrb	w17, [x17, #128]
    5e10:	cbz	w17, 5e58 <BZ2_compressBlock@@Base+0x2120>
    5e14:	cmp	w10, #0x8
    5e18:	b.lt	5de4 <BZ2_compressBlock@@Base+0x20ac>  // b.tstop
    5e1c:	ldr	x10, [x24]
    5e20:	lsr	w11, w11, #24
    5e24:	strb	w11, [x10, w9, sxtw]
    5e28:	ldr	w9, [x20]
    5e2c:	add	w9, w9, #0x1
    5e30:	str	w9, [x20]
    5e34:	ldr	w10, [x22]
    5e38:	lsl	w11, w10, #8
    5e3c:	str	w11, [x22]
    5e40:	ldr	w17, [x21]
    5e44:	sub	w10, w17, #0x8
    5e48:	cmp	w17, #0xf
    5e4c:	str	w10, [x21]
    5e50:	b.gt	5e1c <BZ2_compressBlock@@Base+0x20e4>
    5e54:	b	5de4 <BZ2_compressBlock@@Base+0x20ac>
    5e58:	cmp	w10, #0x8
    5e5c:	b.lt	5dec <BZ2_compressBlock@@Base+0x20b4>  // b.tstop
    5e60:	ldr	x10, [x24]
    5e64:	lsr	w11, w11, #24
    5e68:	strb	w11, [x10, w9, sxtw]
    5e6c:	ldr	w9, [x20]
    5e70:	add	w9, w9, #0x1
    5e74:	str	w9, [x20]
    5e78:	ldr	w10, [x22]
    5e7c:	lsl	w11, w10, #8
    5e80:	str	w11, [x22]
    5e84:	ldr	w17, [x21]
    5e88:	sub	w10, w17, #0x8
    5e8c:	cmp	w17, #0xf
    5e90:	str	w10, [x21]
    5e94:	b.gt	5e60 <BZ2_compressBlock@@Base+0x2128>
    5e98:	b	5dec <BZ2_compressBlock@@Base+0x20b4>
    5e9c:	ldr	w11, [x28, #656]
    5ea0:	cmp	w11, #0x3
    5ea4:	b.ge	7c24 <BZ2_compressBlock@@Base+0x3eec>  // b.tcont
    5ea8:	ldr	w11, [x22]
    5eac:	mov	w8, w9
    5eb0:	cmp	w10, #0x8
    5eb4:	b.lt	5ef0 <BZ2_compressBlock@@Base+0x21b8>  // b.tstop
    5eb8:	ldr	x10, [x24]
    5ebc:	lsr	w11, w11, #24
    5ec0:	strb	w11, [x10, w8, sxtw]
    5ec4:	ldr	w8, [x20]
    5ec8:	add	w8, w8, #0x1
    5ecc:	str	w8, [x20]
    5ed0:	ldr	w10, [x22]
    5ed4:	lsl	w11, w10, #8
    5ed8:	str	w11, [x22]
    5edc:	ldr	w12, [x21]
    5ee0:	sub	w10, w12, #0x8
    5ee4:	cmp	w12, #0xf
    5ee8:	str	w10, [x21]
    5eec:	b.gt	5eb8 <BZ2_compressBlock@@Base+0x2180>
    5ef0:	mov	w13, #0x1d                  	// #29
    5ef4:	add	w12, w10, #0x3
    5ef8:	cmp	w10, #0x5
    5efc:	sub	w10, w13, w10
    5f00:	lsl	w10, w23, w10
    5f04:	orr	w10, w10, w11
    5f08:	str	w10, [x22]
    5f0c:	str	w12, [x21]
    5f10:	b.lt	5f4c <BZ2_compressBlock@@Base+0x2214>  // b.tstop
    5f14:	ldr	x11, [x24]
    5f18:	lsr	w10, w10, #24
    5f1c:	strb	w10, [x11, w8, sxtw]
    5f20:	ldr	w8, [x20]
    5f24:	add	w8, w8, #0x1
    5f28:	str	w8, [x20]
    5f2c:	ldr	w10, [x22]
    5f30:	lsl	w10, w10, #8
    5f34:	str	w10, [x22]
    5f38:	ldr	w11, [x21]
    5f3c:	sub	w12, w11, #0x8
    5f40:	cmp	w11, #0xf
    5f44:	str	w12, [x21]
    5f48:	b.gt	5f14 <BZ2_compressBlock@@Base+0x21dc>
    5f4c:	ldr	x14, [x29, #8]
    5f50:	mov	w13, #0x11                  	// #17
    5f54:	add	w11, w12, #0xf
    5f58:	sub	w12, w13, w12
    5f5c:	lsl	w12, w14, w12
    5f60:	cmp	w14, #0x1
    5f64:	orr	w10, w12, w10
    5f68:	str	w10, [x22]
    5f6c:	str	w11, [x21]
    5f70:	b.lt	6074 <BZ2_compressBlock@@Base+0x233c>  // b.tstop
    5f74:	mov	x12, xzr
    5f78:	mov	w13, w14
    5f7c:	mov	w14, #0x4cfa                	// #19706
    5f80:	mov	w15, #0x80000000            	// #-2147483648
    5f84:	b	5fa0 <BZ2_compressBlock@@Base+0x2268>
    5f88:	add	x12, x12, #0x1
    5f8c:	add	w11, w18, #0x1
    5f90:	cmp	x12, x13
    5f94:	str	w10, [x22]
    5f98:	str	w11, [x21]
    5f9c:	b.eq	6074 <BZ2_compressBlock@@Base+0x233c>  // b.none
    5fa0:	add	x16, x28, x12
    5fa4:	add	x16, x16, x14
    5fa8:	ldrb	w17, [x16]
    5fac:	cmp	w11, #0x7
    5fb0:	cset	w0, gt
    5fb4:	cbz	w17, 6030 <BZ2_compressBlock@@Base+0x22f8>
    5fb8:	mov	w17, wzr
    5fbc:	b	5ff0 <BZ2_compressBlock@@Base+0x22b8>
    5fc0:	lsr	w0, w15, w11
    5fc4:	add	w18, w11, #0x1
    5fc8:	orr	w10, w0, w10
    5fcc:	str	w10, [x22]
    5fd0:	str	w18, [x21]
    5fd4:	ldrb	w1, [x16]
    5fd8:	add	w17, w17, #0x1
    5fdc:	cmp	w11, #0x6
    5fe0:	cset	w0, gt
    5fe4:	cmp	w17, w1
    5fe8:	mov	w11, w18
    5fec:	b.cs	6034 <BZ2_compressBlock@@Base+0x22fc>  // b.hs, b.nlast
    5ff0:	tbz	w0, #0, 5fc0 <BZ2_compressBlock@@Base+0x2288>
    5ff4:	ldr	x11, [x24]
    5ff8:	lsr	w10, w10, #24
    5ffc:	strb	w10, [x11, w8, sxtw]
    6000:	ldr	w8, [x20]
    6004:	add	w8, w8, #0x1
    6008:	str	w8, [x20]
    600c:	ldr	w10, [x22]
    6010:	lsl	w10, w10, #8
    6014:	str	w10, [x22]
    6018:	ldr	w18, [x21]
    601c:	sub	w11, w18, #0x8
    6020:	cmp	w18, #0xf
    6024:	str	w11, [x21]
    6028:	b.gt	5ff4 <BZ2_compressBlock@@Base+0x22bc>
    602c:	b	5fc0 <BZ2_compressBlock@@Base+0x2288>
    6030:	mov	w18, w11
    6034:	cbz	w0, 5f88 <BZ2_compressBlock@@Base+0x2250>
    6038:	ldr	x11, [x24]
    603c:	lsr	w10, w10, #24
    6040:	strb	w10, [x11, w8, sxtw]
    6044:	ldr	w8, [x20]
    6048:	add	w8, w8, #0x1
    604c:	str	w8, [x20]
    6050:	ldr	w10, [x22]
    6054:	lsl	w10, w10, #8
    6058:	str	w10, [x22]
    605c:	ldr	w11, [x21]
    6060:	sub	w18, w11, #0x8
    6064:	cmp	w11, #0xf
    6068:	str	w18, [x21]
    606c:	b.gt	6038 <BZ2_compressBlock@@Base+0x2300>
    6070:	b	5f88 <BZ2_compressBlock@@Base+0x2250>
    6074:	ldr	w12, [x28, #656]
    6078:	cmp	w12, #0x3
    607c:	b.ge	7c50 <BZ2_compressBlock@@Base+0x3f18>  // b.tcont
    6080:	mov	x9, xzr
    6084:	mov	w12, #0x102                 	// #258
    6088:	mov	w13, #0x934c                	// #37708
    608c:	mov	w14, #0x1b                  	// #27
    6090:	mov	w15, #0x1e                  	// #30
    6094:	mov	w16, #0x2                   	// #2
    6098:	mov	w17, #0x3                   	// #3
    609c:	mov	w26, w8
    60a0:	b	60b0 <BZ2_compressBlock@@Base+0x2378>
    60a4:	add	x9, x9, #0x1
    60a8:	cmp	x9, x23
    60ac:	b.eq	627c <BZ2_compressBlock@@Base+0x2544>  // b.none
    60b0:	madd	x18, x9, x12, x28
    60b4:	ldrb	w18, [x18, x13]
    60b8:	cmp	w11, #0x8
    60bc:	b.lt	60f8 <BZ2_compressBlock@@Base+0x23c0>  // b.tstop
    60c0:	ldr	x11, [x24]
    60c4:	lsr	w10, w10, #24
    60c8:	strb	w10, [x11, w26, sxtw]
    60cc:	ldr	w10, [x20]
    60d0:	add	w26, w10, #0x1
    60d4:	str	w26, [x20]
    60d8:	ldr	w10, [x22]
    60dc:	lsl	w10, w10, #8
    60e0:	str	w10, [x22]
    60e4:	ldr	w0, [x21]
    60e8:	sub	w11, w0, #0x8
    60ec:	cmp	w0, #0xf
    60f0:	str	w11, [x21]
    60f4:	b.gt	60c0 <BZ2_compressBlock@@Base+0x2388>
    60f8:	sub	w0, w14, w11
    60fc:	lsl	w0, w18, w0
    6100:	add	w11, w11, #0x5
    6104:	cmn	w5, #0x1
    6108:	orr	w10, w0, w10
    610c:	str	w10, [x22]
    6110:	str	w11, [x21]
    6114:	b.lt	60a4 <BZ2_compressBlock@@Base+0x236c>  // b.tstop
    6118:	mov	x0, xzr
    611c:	b	6138 <BZ2_compressBlock@@Base+0x2400>
    6120:	add	x0, x0, #0x1
    6124:	add	w11, w11, #0x1
    6128:	cmp	x0, x19
    612c:	str	w10, [x22]
    6130:	str	w11, [x21]
    6134:	b.ge	60a4 <BZ2_compressBlock@@Base+0x236c>  // b.tcont
    6138:	madd	x1, x9, x12, x28
    613c:	add	x1, x1, x0
    6140:	add	x1, x1, x13
    6144:	ldrb	w2, [x1]
    6148:	b	616c <BZ2_compressBlock@@Base+0x2434>
    614c:	sub	w2, w15, w11
    6150:	lsl	w2, w16, w2
    6154:	add	w11, w11, #0x2
    6158:	orr	w10, w2, w10
    615c:	str	w10, [x22]
    6160:	str	w11, [x21]
    6164:	ldrb	w2, [x1]
    6168:	add	w18, w18, #0x1
    616c:	cmp	w18, w2
    6170:	b.ge	61b8 <BZ2_compressBlock@@Base+0x2480>  // b.tcont
    6174:	cmp	w11, #0x8
    6178:	b.lt	614c <BZ2_compressBlock@@Base+0x2414>  // b.tstop
    617c:	ldr	x11, [x24]
    6180:	lsr	w10, w10, #24
    6184:	strb	w10, [x11, w26, sxtw]
    6188:	ldr	w10, [x20]
    618c:	add	w26, w10, #0x1
    6190:	str	w26, [x20]
    6194:	ldr	w10, [x22]
    6198:	lsl	w10, w10, #8
    619c:	str	w10, [x22]
    61a0:	ldr	w2, [x21]
    61a4:	sub	w11, w2, #0x8
    61a8:	cmp	w2, #0xf
    61ac:	str	w11, [x21]
    61b0:	b.gt	617c <BZ2_compressBlock@@Base+0x2444>
    61b4:	b	614c <BZ2_compressBlock@@Base+0x2414>
    61b8:	cmp	w11, #0x7
    61bc:	cset	w3, gt
    61c0:	cmp	w18, w2
    61c4:	b.gt	623c <BZ2_compressBlock@@Base+0x2504>
    61c8:	cbz	w3, 6120 <BZ2_compressBlock@@Base+0x23e8>
    61cc:	ldr	x11, [x24]
    61d0:	lsr	w10, w10, #24
    61d4:	strb	w10, [x11, w26, sxtw]
    61d8:	ldr	w10, [x20]
    61dc:	add	w26, w10, #0x1
    61e0:	str	w26, [x20]
    61e4:	ldr	w10, [x22]
    61e8:	lsl	w10, w10, #8
    61ec:	str	w10, [x22]
    61f0:	ldr	w1, [x21]
    61f4:	sub	w11, w1, #0x8
    61f8:	cmp	w1, #0xf
    61fc:	str	w11, [x21]
    6200:	b.gt	61cc <BZ2_compressBlock@@Base+0x2494>
    6204:	b	6120 <BZ2_compressBlock@@Base+0x23e8>
    6208:	sub	w2, w15, w11
    620c:	lsl	w2, w17, w2
    6210:	add	w4, w11, #0x2
    6214:	orr	w10, w2, w10
    6218:	str	w10, [x22]
    621c:	str	w4, [x21]
    6220:	ldrb	w2, [x1]
    6224:	cmp	w11, #0x5
    6228:	sub	w18, w18, #0x1
    622c:	cset	w3, gt
    6230:	cmp	w18, w2
    6234:	mov	w11, w4
    6238:	b.le	61c8 <BZ2_compressBlock@@Base+0x2490>
    623c:	tbz	w3, #0, 6208 <BZ2_compressBlock@@Base+0x24d0>
    6240:	ldr	x11, [x24]
    6244:	lsr	w10, w10, #24
    6248:	strb	w10, [x11, w26, sxtw]
    624c:	ldr	w10, [x20]
    6250:	add	w26, w10, #0x1
    6254:	str	w26, [x20]
    6258:	ldr	w10, [x22]
    625c:	lsl	w10, w10, #8
    6260:	str	w10, [x22]
    6264:	ldr	w2, [x21]
    6268:	sub	w11, w2, #0x8
    626c:	cmp	w2, #0xf
    6270:	str	w11, [x21]
    6274:	b.gt	6240 <BZ2_compressBlock@@Base+0x2508>
    6278:	b	6208 <BZ2_compressBlock@@Base+0x24d0>
    627c:	ldr	w9, [x28, #656]
    6280:	cmp	w9, #0x3
    6284:	b.ge	7c80 <BZ2_compressBlock@@Base+0x3f48>  // b.tcont
    6288:	ldr	w8, [x28, #668]
    628c:	ldur	x16, [x29, #-96]
    6290:	cmp	w8, #0x1
    6294:	b.lt	7bbc <BZ2_compressBlock@@Base+0x3e84>  // b.tstop
    6298:	mov	x3, xzr
    629c:	mov	w9, wzr
    62a0:	mov	w17, #0x102                 	// #258
    62a4:	mov	w18, #0x934c                	// #37708
    62a8:	mov	w0, #0x408                 	// #1032
    62ac:	mov	w1, #0x9958                	// #39256
    62b0:	b	62e0 <BZ2_compressBlock@@Base+0x25a8>
    62b4:	add	w10, w11, w10
    62b8:	neg	w11, w10
    62bc:	lsl	w8, w8, w11
    62c0:	orr	w8, w8, w9
    62c4:	str	w8, [x22]
    62c8:	str	w10, [x21]
    62cc:	ldr	w8, [x28, #668]
    62d0:	add	w9, w25, #0x1
    62d4:	add	x3, x3, #0x1
    62d8:	cmp	w9, w8
    62dc:	b.ge	7bc0 <BZ2_compressBlock@@Base+0x3e88>  // b.tcont
    62e0:	add	x19, x28, x3
    62e4:	sxtw	x27, w9
    62e8:	ldrb	w9, [x19, #1704]
    62ec:	add	x4, x27, #0x31
    62f0:	sub	w10, w8, #0x1
    62f4:	cmp	w4, w8
    62f8:	csel	w25, w4, w10, lt  // lt = tstop
    62fc:	cmp	w23, w9
    6300:	b.hi	6338 <BZ2_compressBlock@@Base+0x2600>  // b.pmore
    6304:	mov	w0, #0xbbe                 	// #3006
    6308:	stur	x3, [x29, #-80]
    630c:	str	x27, [sp, #96]
    6310:	mov	x27, x4
    6314:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    6318:	mov	x4, x27
    631c:	ldr	x27, [sp, #96]
    6320:	ldur	x3, [x29, #-80]
    6324:	ldur	x16, [x29, #-96]
    6328:	mov	w1, #0x9958                	// #39256
    632c:	mov	w0, #0x408                 	// #1032
    6330:	mov	w18, #0x934c                	// #37708
    6334:	mov	w17, #0x102                 	// #258
    6338:	cmp	w23, #0x6
    633c:	add	x8, x19, #0x6a8
    6340:	b.ne	7b18 <BZ2_compressBlock@@Base+0x3de0>  // b.any
    6344:	sub	w9, w25, w27
    6348:	cmp	w9, #0x31
    634c:	b.ne	7b18 <BZ2_compressBlock@@Base+0x3de0>  // b.any
    6350:	ldrb	w8, [x8]
    6354:	ldrh	w9, [x16, x27, lsl #1]
    6358:	ldr	w12, [x28, #644]
    635c:	madd	x10, x8, x17, x28
    6360:	madd	x11, x8, x0, x28
    6364:	add	x10, x10, x9
    6368:	add	x11, x11, x9, lsl #2
    636c:	ldrb	w9, [x10, x18]
    6370:	ldr	w10, [x11, x1]
    6374:	ldr	w11, [x28, #640]
    6378:	cmp	w12, #0x8
    637c:	b.lt	63bc <BZ2_compressBlock@@Base+0x2684>  // b.tstop
    6380:	ldr	w13, [x20]
    6384:	ldr	x12, [x24]
    6388:	lsr	w11, w11, #24
    638c:	strb	w11, [x12, w13, sxtw]
    6390:	ldr	w11, [x20]
    6394:	add	w13, w11, #0x1
    6398:	str	w13, [x20]
    639c:	ldr	w11, [x22]
    63a0:	lsl	w11, w11, #8
    63a4:	str	w11, [x22]
    63a8:	ldr	w14, [x21]
    63ac:	sub	w12, w14, #0x8
    63b0:	cmp	w14, #0xf
    63b4:	str	w12, [x21]
    63b8:	b.gt	6384 <BZ2_compressBlock@@Base+0x264c>
    63bc:	add	w13, w12, w9
    63c0:	neg	w12, w13
    63c4:	lsl	w10, w10, w12
    63c8:	orr	w10, w10, w11
    63cc:	add	x9, x16, x27, lsl #1
    63d0:	str	w13, [x28, #644]
    63d4:	str	w10, [x28, #640]
    63d8:	ldrh	w11, [x9, #2]
    63dc:	madd	x12, x8, x17, x28
    63e0:	madd	x14, x8, x0, x28
    63e4:	cmp	w13, #0x8
    63e8:	add	x12, x12, x11
    63ec:	add	x11, x14, x11, lsl #2
    63f0:	ldrb	w12, [x12, x18]
    63f4:	ldr	w11, [x11, x1]
    63f8:	b.lt	6438 <BZ2_compressBlock@@Base+0x2700>  // b.tstop
    63fc:	ldr	w14, [x20]
    6400:	ldr	x13, [x24]
    6404:	lsr	w10, w10, #24
    6408:	strb	w10, [x13, w14, sxtw]
    640c:	ldr	w10, [x20]
    6410:	add	w14, w10, #0x1
    6414:	str	w14, [x20]
    6418:	ldr	w10, [x22]
    641c:	lsl	w10, w10, #8
    6420:	str	w10, [x22]
    6424:	ldr	w15, [x21]
    6428:	sub	w13, w15, #0x8
    642c:	cmp	w15, #0xf
    6430:	str	w13, [x21]
    6434:	b.gt	6400 <BZ2_compressBlock@@Base+0x26c8>
    6438:	add	w12, w13, w12
    643c:	neg	w13, w12
    6440:	lsl	w11, w11, w13
    6444:	orr	w10, w11, w10
    6448:	str	w12, [x28, #644]
    644c:	str	w10, [x28, #640]
    6450:	ldrh	w9, [x9, #4]
    6454:	madd	x11, x8, x17, x28
    6458:	madd	x13, x8, x0, x28
    645c:	cmp	w12, #0x8
    6460:	add	x11, x11, x9
    6464:	add	x13, x13, x9, lsl #2
    6468:	ldrb	w9, [x11, x18]
    646c:	ldr	w11, [x13, x1]
    6470:	b.lt	64b0 <BZ2_compressBlock@@Base+0x2778>  // b.tstop
    6474:	ldr	w13, [x20]
    6478:	ldr	x12, [x24]
    647c:	lsr	w10, w10, #24
    6480:	strb	w10, [x12, w13, sxtw]
    6484:	ldr	w10, [x20]
    6488:	add	w13, w10, #0x1
    648c:	str	w13, [x20]
    6490:	ldr	w10, [x22]
    6494:	lsl	w10, w10, #8
    6498:	str	w10, [x22]
    649c:	ldr	w14, [x21]
    64a0:	sub	w12, w14, #0x8
    64a4:	cmp	w14, #0xf
    64a8:	str	w12, [x21]
    64ac:	b.gt	6478 <BZ2_compressBlock@@Base+0x2740>
    64b0:	add	w13, w12, w9
    64b4:	neg	w12, w13
    64b8:	lsl	w11, w11, w12
    64bc:	orr	w10, w11, w10
    64c0:	add	x9, x16, x27, lsl #1
    64c4:	str	w13, [x28, #644]
    64c8:	str	w10, [x28, #640]
    64cc:	ldrh	w11, [x9, #6]
    64d0:	madd	x12, x8, x17, x28
    64d4:	madd	x14, x8, x0, x28
    64d8:	cmp	w13, #0x8
    64dc:	add	x12, x12, x11
    64e0:	add	x11, x14, x11, lsl #2
    64e4:	ldrb	w12, [x12, x18]
    64e8:	ldr	w11, [x11, x1]
    64ec:	b.lt	652c <BZ2_compressBlock@@Base+0x27f4>  // b.tstop
    64f0:	ldr	w14, [x20]
    64f4:	ldr	x13, [x24]
    64f8:	lsr	w10, w10, #24
    64fc:	strb	w10, [x13, w14, sxtw]
    6500:	ldr	w10, [x20]
    6504:	add	w14, w10, #0x1
    6508:	str	w14, [x20]
    650c:	ldr	w10, [x22]
    6510:	lsl	w10, w10, #8
    6514:	str	w10, [x22]
    6518:	ldr	w15, [x21]
    651c:	sub	w13, w15, #0x8
    6520:	cmp	w15, #0xf
    6524:	str	w13, [x21]
    6528:	b.gt	64f4 <BZ2_compressBlock@@Base+0x27bc>
    652c:	add	w12, w13, w12
    6530:	neg	w13, w12
    6534:	lsl	w11, w11, w13
    6538:	orr	w10, w11, w10
    653c:	str	w12, [x28, #644]
    6540:	str	w10, [x28, #640]
    6544:	ldrh	w9, [x9, #8]
    6548:	madd	x11, x8, x17, x28
    654c:	madd	x13, x8, x0, x28
    6550:	cmp	w12, #0x8
    6554:	add	x11, x11, x9
    6558:	add	x13, x13, x9, lsl #2
    655c:	ldrb	w9, [x11, x18]
    6560:	ldr	w11, [x13, x1]
    6564:	b.lt	65a4 <BZ2_compressBlock@@Base+0x286c>  // b.tstop
    6568:	ldr	w13, [x20]
    656c:	ldr	x12, [x24]
    6570:	lsr	w10, w10, #24
    6574:	strb	w10, [x12, w13, sxtw]
    6578:	ldr	w10, [x20]
    657c:	add	w13, w10, #0x1
    6580:	str	w13, [x20]
    6584:	ldr	w10, [x22]
    6588:	lsl	w10, w10, #8
    658c:	str	w10, [x22]
    6590:	ldr	w14, [x21]
    6594:	sub	w12, w14, #0x8
    6598:	cmp	w14, #0xf
    659c:	str	w12, [x21]
    65a0:	b.gt	656c <BZ2_compressBlock@@Base+0x2834>
    65a4:	add	w13, w12, w9
    65a8:	neg	w12, w13
    65ac:	lsl	w11, w11, w12
    65b0:	orr	w10, w11, w10
    65b4:	add	x9, x16, x27, lsl #1
    65b8:	str	w13, [x28, #644]
    65bc:	str	w10, [x28, #640]
    65c0:	ldrh	w11, [x9, #10]
    65c4:	madd	x12, x8, x17, x28
    65c8:	madd	x14, x8, x0, x28
    65cc:	cmp	w13, #0x8
    65d0:	add	x12, x12, x11
    65d4:	add	x11, x14, x11, lsl #2
    65d8:	ldrb	w12, [x12, x18]
    65dc:	ldr	w11, [x11, x1]
    65e0:	b.lt	6620 <BZ2_compressBlock@@Base+0x28e8>  // b.tstop
    65e4:	ldr	w14, [x20]
    65e8:	ldr	x13, [x24]
    65ec:	lsr	w10, w10, #24
    65f0:	strb	w10, [x13, w14, sxtw]
    65f4:	ldr	w10, [x20]
    65f8:	add	w14, w10, #0x1
    65fc:	str	w14, [x20]
    6600:	ldr	w10, [x22]
    6604:	lsl	w10, w10, #8
    6608:	str	w10, [x22]
    660c:	ldr	w15, [x21]
    6610:	sub	w13, w15, #0x8
    6614:	cmp	w15, #0xf
    6618:	str	w13, [x21]
    661c:	b.gt	65e8 <BZ2_compressBlock@@Base+0x28b0>
    6620:	add	w12, w13, w12
    6624:	neg	w13, w12
    6628:	lsl	w11, w11, w13
    662c:	orr	w10, w11, w10
    6630:	str	w12, [x28, #644]
    6634:	str	w10, [x28, #640]
    6638:	ldrh	w9, [x9, #12]
    663c:	madd	x11, x8, x17, x28
    6640:	madd	x13, x8, x0, x28
    6644:	cmp	w12, #0x8
    6648:	add	x11, x11, x9
    664c:	add	x13, x13, x9, lsl #2
    6650:	ldrb	w9, [x11, x18]
    6654:	ldr	w11, [x13, x1]
    6658:	b.lt	6698 <BZ2_compressBlock@@Base+0x2960>  // b.tstop
    665c:	ldr	w13, [x20]
    6660:	ldr	x12, [x24]
    6664:	lsr	w10, w10, #24
    6668:	strb	w10, [x12, w13, sxtw]
    666c:	ldr	w10, [x20]
    6670:	add	w13, w10, #0x1
    6674:	str	w13, [x20]
    6678:	ldr	w10, [x22]
    667c:	lsl	w10, w10, #8
    6680:	str	w10, [x22]
    6684:	ldr	w14, [x21]
    6688:	sub	w12, w14, #0x8
    668c:	cmp	w14, #0xf
    6690:	str	w12, [x21]
    6694:	b.gt	6660 <BZ2_compressBlock@@Base+0x2928>
    6698:	add	w13, w12, w9
    669c:	neg	w12, w13
    66a0:	lsl	w11, w11, w12
    66a4:	orr	w10, w11, w10
    66a8:	add	x9, x16, x27, lsl #1
    66ac:	str	w13, [x28, #644]
    66b0:	str	w10, [x28, #640]
    66b4:	ldrh	w11, [x9, #14]
    66b8:	madd	x12, x8, x17, x28
    66bc:	madd	x14, x8, x0, x28
    66c0:	cmp	w13, #0x8
    66c4:	add	x12, x12, x11
    66c8:	add	x11, x14, x11, lsl #2
    66cc:	ldrb	w12, [x12, x18]
    66d0:	ldr	w11, [x11, x1]
    66d4:	b.lt	6714 <BZ2_compressBlock@@Base+0x29dc>  // b.tstop
    66d8:	ldr	w14, [x20]
    66dc:	ldr	x13, [x24]
    66e0:	lsr	w10, w10, #24
    66e4:	strb	w10, [x13, w14, sxtw]
    66e8:	ldr	w10, [x20]
    66ec:	add	w14, w10, #0x1
    66f0:	str	w14, [x20]
    66f4:	ldr	w10, [x22]
    66f8:	lsl	w10, w10, #8
    66fc:	str	w10, [x22]
    6700:	ldr	w15, [x21]
    6704:	sub	w13, w15, #0x8
    6708:	cmp	w15, #0xf
    670c:	str	w13, [x21]
    6710:	b.gt	66dc <BZ2_compressBlock@@Base+0x29a4>
    6714:	add	w12, w13, w12
    6718:	neg	w13, w12
    671c:	lsl	w11, w11, w13
    6720:	orr	w10, w11, w10
    6724:	str	w12, [x28, #644]
    6728:	str	w10, [x28, #640]
    672c:	ldrh	w9, [x9, #16]
    6730:	madd	x11, x8, x17, x28
    6734:	madd	x13, x8, x0, x28
    6738:	cmp	w12, #0x8
    673c:	add	x11, x11, x9
    6740:	add	x13, x13, x9, lsl #2
    6744:	ldrb	w9, [x11, x18]
    6748:	ldr	w11, [x13, x1]
    674c:	b.lt	678c <BZ2_compressBlock@@Base+0x2a54>  // b.tstop
    6750:	ldr	w13, [x20]
    6754:	ldr	x12, [x24]
    6758:	lsr	w10, w10, #24
    675c:	strb	w10, [x12, w13, sxtw]
    6760:	ldr	w10, [x20]
    6764:	add	w13, w10, #0x1
    6768:	str	w13, [x20]
    676c:	ldr	w10, [x22]
    6770:	lsl	w10, w10, #8
    6774:	str	w10, [x22]
    6778:	ldr	w14, [x21]
    677c:	sub	w12, w14, #0x8
    6780:	cmp	w14, #0xf
    6784:	str	w12, [x21]
    6788:	b.gt	6754 <BZ2_compressBlock@@Base+0x2a1c>
    678c:	add	w13, w12, w9
    6790:	neg	w12, w13
    6794:	lsl	w11, w11, w12
    6798:	orr	w10, w11, w10
    679c:	add	x9, x16, x27, lsl #1
    67a0:	str	w13, [x28, #644]
    67a4:	str	w10, [x28, #640]
    67a8:	ldrh	w11, [x9, #18]
    67ac:	madd	x12, x8, x17, x28
    67b0:	madd	x14, x8, x0, x28
    67b4:	cmp	w13, #0x8
    67b8:	add	x12, x12, x11
    67bc:	add	x11, x14, x11, lsl #2
    67c0:	ldrb	w12, [x12, x18]
    67c4:	ldr	w11, [x11, x1]
    67c8:	b.lt	6808 <BZ2_compressBlock@@Base+0x2ad0>  // b.tstop
    67cc:	ldr	w14, [x20]
    67d0:	ldr	x13, [x24]
    67d4:	lsr	w10, w10, #24
    67d8:	strb	w10, [x13, w14, sxtw]
    67dc:	ldr	w10, [x20]
    67e0:	add	w14, w10, #0x1
    67e4:	str	w14, [x20]
    67e8:	ldr	w10, [x22]
    67ec:	lsl	w10, w10, #8
    67f0:	str	w10, [x22]
    67f4:	ldr	w15, [x21]
    67f8:	sub	w13, w15, #0x8
    67fc:	cmp	w15, #0xf
    6800:	str	w13, [x21]
    6804:	b.gt	67d0 <BZ2_compressBlock@@Base+0x2a98>
    6808:	add	w12, w13, w12
    680c:	neg	w13, w12
    6810:	lsl	w11, w11, w13
    6814:	orr	w10, w11, w10
    6818:	str	w12, [x28, #644]
    681c:	str	w10, [x28, #640]
    6820:	ldrh	w9, [x9, #20]
    6824:	madd	x11, x8, x17, x28
    6828:	madd	x13, x8, x0, x28
    682c:	cmp	w12, #0x8
    6830:	add	x11, x11, x9
    6834:	add	x13, x13, x9, lsl #2
    6838:	ldrb	w9, [x11, x18]
    683c:	ldr	w11, [x13, x1]
    6840:	b.lt	6880 <BZ2_compressBlock@@Base+0x2b48>  // b.tstop
    6844:	ldr	w13, [x20]
    6848:	ldr	x12, [x24]
    684c:	lsr	w10, w10, #24
    6850:	strb	w10, [x12, w13, sxtw]
    6854:	ldr	w10, [x20]
    6858:	add	w13, w10, #0x1
    685c:	str	w13, [x20]
    6860:	ldr	w10, [x22]
    6864:	lsl	w10, w10, #8
    6868:	str	w10, [x22]
    686c:	ldr	w14, [x21]
    6870:	sub	w12, w14, #0x8
    6874:	cmp	w14, #0xf
    6878:	str	w12, [x21]
    687c:	b.gt	6848 <BZ2_compressBlock@@Base+0x2b10>
    6880:	add	w13, w12, w9
    6884:	neg	w12, w13
    6888:	lsl	w11, w11, w12
    688c:	orr	w10, w11, w10
    6890:	add	x9, x16, x27, lsl #1
    6894:	str	w13, [x28, #644]
    6898:	str	w10, [x28, #640]
    689c:	ldrh	w11, [x9, #22]
    68a0:	madd	x12, x8, x17, x28
    68a4:	madd	x14, x8, x0, x28
    68a8:	cmp	w13, #0x8
    68ac:	add	x12, x12, x11
    68b0:	add	x11, x14, x11, lsl #2
    68b4:	ldrb	w12, [x12, x18]
    68b8:	ldr	w11, [x11, x1]
    68bc:	b.lt	68fc <BZ2_compressBlock@@Base+0x2bc4>  // b.tstop
    68c0:	ldr	w14, [x20]
    68c4:	ldr	x13, [x24]
    68c8:	lsr	w10, w10, #24
    68cc:	strb	w10, [x13, w14, sxtw]
    68d0:	ldr	w10, [x20]
    68d4:	add	w14, w10, #0x1
    68d8:	str	w14, [x20]
    68dc:	ldr	w10, [x22]
    68e0:	lsl	w10, w10, #8
    68e4:	str	w10, [x22]
    68e8:	ldr	w15, [x21]
    68ec:	sub	w13, w15, #0x8
    68f0:	cmp	w15, #0xf
    68f4:	str	w13, [x21]
    68f8:	b.gt	68c4 <BZ2_compressBlock@@Base+0x2b8c>
    68fc:	add	w12, w13, w12
    6900:	neg	w13, w12
    6904:	lsl	w11, w11, w13
    6908:	orr	w10, w11, w10
    690c:	str	w12, [x28, #644]
    6910:	str	w10, [x28, #640]
    6914:	ldrh	w9, [x9, #24]
    6918:	madd	x11, x8, x17, x28
    691c:	madd	x13, x8, x0, x28
    6920:	cmp	w12, #0x8
    6924:	add	x11, x11, x9
    6928:	add	x13, x13, x9, lsl #2
    692c:	ldrb	w9, [x11, x18]
    6930:	ldr	w11, [x13, x1]
    6934:	b.lt	6974 <BZ2_compressBlock@@Base+0x2c3c>  // b.tstop
    6938:	ldr	w13, [x20]
    693c:	ldr	x12, [x24]
    6940:	lsr	w10, w10, #24
    6944:	strb	w10, [x12, w13, sxtw]
    6948:	ldr	w10, [x20]
    694c:	add	w13, w10, #0x1
    6950:	str	w13, [x20]
    6954:	ldr	w10, [x22]
    6958:	lsl	w10, w10, #8
    695c:	str	w10, [x22]
    6960:	ldr	w14, [x21]
    6964:	sub	w12, w14, #0x8
    6968:	cmp	w14, #0xf
    696c:	str	w12, [x21]
    6970:	b.gt	693c <BZ2_compressBlock@@Base+0x2c04>
    6974:	add	w13, w12, w9
    6978:	neg	w12, w13
    697c:	lsl	w11, w11, w12
    6980:	orr	w10, w11, w10
    6984:	add	x9, x16, x27, lsl #1
    6988:	str	w13, [x28, #644]
    698c:	str	w10, [x28, #640]
    6990:	ldrh	w11, [x9, #26]
    6994:	madd	x12, x8, x17, x28
    6998:	madd	x14, x8, x0, x28
    699c:	cmp	w13, #0x8
    69a0:	add	x12, x12, x11
    69a4:	add	x11, x14, x11, lsl #2
    69a8:	ldrb	w12, [x12, x18]
    69ac:	ldr	w11, [x11, x1]
    69b0:	b.lt	69f0 <BZ2_compressBlock@@Base+0x2cb8>  // b.tstop
    69b4:	ldr	w14, [x20]
    69b8:	ldr	x13, [x24]
    69bc:	lsr	w10, w10, #24
    69c0:	strb	w10, [x13, w14, sxtw]
    69c4:	ldr	w10, [x20]
    69c8:	add	w14, w10, #0x1
    69cc:	str	w14, [x20]
    69d0:	ldr	w10, [x22]
    69d4:	lsl	w10, w10, #8
    69d8:	str	w10, [x22]
    69dc:	ldr	w15, [x21]
    69e0:	sub	w13, w15, #0x8
    69e4:	cmp	w15, #0xf
    69e8:	str	w13, [x21]
    69ec:	b.gt	69b8 <BZ2_compressBlock@@Base+0x2c80>
    69f0:	add	w12, w13, w12
    69f4:	neg	w13, w12
    69f8:	lsl	w11, w11, w13
    69fc:	orr	w10, w11, w10
    6a00:	str	w12, [x28, #644]
    6a04:	str	w10, [x28, #640]
    6a08:	ldrh	w9, [x9, #28]
    6a0c:	madd	x11, x8, x17, x28
    6a10:	madd	x13, x8, x0, x28
    6a14:	cmp	w12, #0x8
    6a18:	add	x11, x11, x9
    6a1c:	add	x13, x13, x9, lsl #2
    6a20:	ldrb	w9, [x11, x18]
    6a24:	ldr	w11, [x13, x1]
    6a28:	b.lt	6a68 <BZ2_compressBlock@@Base+0x2d30>  // b.tstop
    6a2c:	ldr	w13, [x20]
    6a30:	ldr	x12, [x24]
    6a34:	lsr	w10, w10, #24
    6a38:	strb	w10, [x12, w13, sxtw]
    6a3c:	ldr	w10, [x20]
    6a40:	add	w13, w10, #0x1
    6a44:	str	w13, [x20]
    6a48:	ldr	w10, [x22]
    6a4c:	lsl	w10, w10, #8
    6a50:	str	w10, [x22]
    6a54:	ldr	w14, [x21]
    6a58:	sub	w12, w14, #0x8
    6a5c:	cmp	w14, #0xf
    6a60:	str	w12, [x21]
    6a64:	b.gt	6a30 <BZ2_compressBlock@@Base+0x2cf8>
    6a68:	add	w13, w12, w9
    6a6c:	neg	w12, w13
    6a70:	lsl	w11, w11, w12
    6a74:	orr	w10, w11, w10
    6a78:	add	x9, x16, x27, lsl #1
    6a7c:	str	w13, [x28, #644]
    6a80:	str	w10, [x28, #640]
    6a84:	ldrh	w11, [x9, #30]
    6a88:	madd	x12, x8, x17, x28
    6a8c:	madd	x14, x8, x0, x28
    6a90:	cmp	w13, #0x8
    6a94:	add	x12, x12, x11
    6a98:	add	x11, x14, x11, lsl #2
    6a9c:	ldrb	w12, [x12, x18]
    6aa0:	ldr	w11, [x11, x1]
    6aa4:	b.lt	6ae4 <BZ2_compressBlock@@Base+0x2dac>  // b.tstop
    6aa8:	ldr	w14, [x20]
    6aac:	ldr	x13, [x24]
    6ab0:	lsr	w10, w10, #24
    6ab4:	strb	w10, [x13, w14, sxtw]
    6ab8:	ldr	w10, [x20]
    6abc:	add	w14, w10, #0x1
    6ac0:	str	w14, [x20]
    6ac4:	ldr	w10, [x22]
    6ac8:	lsl	w10, w10, #8
    6acc:	str	w10, [x22]
    6ad0:	ldr	w15, [x21]
    6ad4:	sub	w13, w15, #0x8
    6ad8:	cmp	w15, #0xf
    6adc:	str	w13, [x21]
    6ae0:	b.gt	6aac <BZ2_compressBlock@@Base+0x2d74>
    6ae4:	add	w12, w13, w12
    6ae8:	neg	w13, w12
    6aec:	lsl	w11, w11, w13
    6af0:	orr	w10, w11, w10
    6af4:	str	w12, [x28, #644]
    6af8:	str	w10, [x28, #640]
    6afc:	ldrh	w9, [x9, #32]
    6b00:	madd	x11, x8, x17, x28
    6b04:	madd	x13, x8, x0, x28
    6b08:	cmp	w12, #0x8
    6b0c:	add	x11, x11, x9
    6b10:	add	x13, x13, x9, lsl #2
    6b14:	ldrb	w9, [x11, x18]
    6b18:	ldr	w11, [x13, x1]
    6b1c:	b.lt	6b5c <BZ2_compressBlock@@Base+0x2e24>  // b.tstop
    6b20:	ldr	w13, [x20]
    6b24:	ldr	x12, [x24]
    6b28:	lsr	w10, w10, #24
    6b2c:	strb	w10, [x12, w13, sxtw]
    6b30:	ldr	w10, [x20]
    6b34:	add	w13, w10, #0x1
    6b38:	str	w13, [x20]
    6b3c:	ldr	w10, [x22]
    6b40:	lsl	w10, w10, #8
    6b44:	str	w10, [x22]
    6b48:	ldr	w14, [x21]
    6b4c:	sub	w12, w14, #0x8
    6b50:	cmp	w14, #0xf
    6b54:	str	w12, [x21]
    6b58:	b.gt	6b24 <BZ2_compressBlock@@Base+0x2dec>
    6b5c:	add	w13, w12, w9
    6b60:	neg	w12, w13
    6b64:	lsl	w11, w11, w12
    6b68:	orr	w10, w11, w10
    6b6c:	add	x9, x16, x27, lsl #1
    6b70:	str	w13, [x28, #644]
    6b74:	str	w10, [x28, #640]
    6b78:	ldrh	w11, [x9, #34]
    6b7c:	madd	x12, x8, x17, x28
    6b80:	madd	x14, x8, x0, x28
    6b84:	cmp	w13, #0x8
    6b88:	add	x12, x12, x11
    6b8c:	add	x11, x14, x11, lsl #2
    6b90:	ldrb	w12, [x12, x18]
    6b94:	ldr	w11, [x11, x1]
    6b98:	b.lt	6bd8 <BZ2_compressBlock@@Base+0x2ea0>  // b.tstop
    6b9c:	ldr	w14, [x20]
    6ba0:	ldr	x13, [x24]
    6ba4:	lsr	w10, w10, #24
    6ba8:	strb	w10, [x13, w14, sxtw]
    6bac:	ldr	w10, [x20]
    6bb0:	add	w14, w10, #0x1
    6bb4:	str	w14, [x20]
    6bb8:	ldr	w10, [x22]
    6bbc:	lsl	w10, w10, #8
    6bc0:	str	w10, [x22]
    6bc4:	ldr	w15, [x21]
    6bc8:	sub	w13, w15, #0x8
    6bcc:	cmp	w15, #0xf
    6bd0:	str	w13, [x21]
    6bd4:	b.gt	6ba0 <BZ2_compressBlock@@Base+0x2e68>
    6bd8:	add	w12, w13, w12
    6bdc:	neg	w13, w12
    6be0:	lsl	w11, w11, w13
    6be4:	orr	w10, w11, w10
    6be8:	str	w12, [x28, #644]
    6bec:	str	w10, [x28, #640]
    6bf0:	ldrh	w9, [x9, #36]
    6bf4:	madd	x11, x8, x17, x28
    6bf8:	madd	x13, x8, x0, x28
    6bfc:	cmp	w12, #0x8
    6c00:	add	x11, x11, x9
    6c04:	add	x13, x13, x9, lsl #2
    6c08:	ldrb	w9, [x11, x18]
    6c0c:	ldr	w11, [x13, x1]
    6c10:	b.lt	6c50 <BZ2_compressBlock@@Base+0x2f18>  // b.tstop
    6c14:	ldr	w13, [x20]
    6c18:	ldr	x12, [x24]
    6c1c:	lsr	w10, w10, #24
    6c20:	strb	w10, [x12, w13, sxtw]
    6c24:	ldr	w10, [x20]
    6c28:	add	w13, w10, #0x1
    6c2c:	str	w13, [x20]
    6c30:	ldr	w10, [x22]
    6c34:	lsl	w10, w10, #8
    6c38:	str	w10, [x22]
    6c3c:	ldr	w14, [x21]
    6c40:	sub	w12, w14, #0x8
    6c44:	cmp	w14, #0xf
    6c48:	str	w12, [x21]
    6c4c:	b.gt	6c18 <BZ2_compressBlock@@Base+0x2ee0>
    6c50:	add	w13, w12, w9
    6c54:	neg	w12, w13
    6c58:	lsl	w11, w11, w12
    6c5c:	orr	w10, w11, w10
    6c60:	add	x9, x16, x27, lsl #1
    6c64:	str	w13, [x28, #644]
    6c68:	str	w10, [x28, #640]
    6c6c:	ldrh	w11, [x9, #38]
    6c70:	madd	x12, x8, x17, x28
    6c74:	madd	x14, x8, x0, x28
    6c78:	cmp	w13, #0x8
    6c7c:	add	x12, x12, x11
    6c80:	add	x11, x14, x11, lsl #2
    6c84:	ldrb	w12, [x12, x18]
    6c88:	ldr	w11, [x11, x1]
    6c8c:	b.lt	6ccc <BZ2_compressBlock@@Base+0x2f94>  // b.tstop
    6c90:	ldr	w14, [x20]
    6c94:	ldr	x13, [x24]
    6c98:	lsr	w10, w10, #24
    6c9c:	strb	w10, [x13, w14, sxtw]
    6ca0:	ldr	w10, [x20]
    6ca4:	add	w14, w10, #0x1
    6ca8:	str	w14, [x20]
    6cac:	ldr	w10, [x22]
    6cb0:	lsl	w10, w10, #8
    6cb4:	str	w10, [x22]
    6cb8:	ldr	w15, [x21]
    6cbc:	sub	w13, w15, #0x8
    6cc0:	cmp	w15, #0xf
    6cc4:	str	w13, [x21]
    6cc8:	b.gt	6c94 <BZ2_compressBlock@@Base+0x2f5c>
    6ccc:	add	w12, w13, w12
    6cd0:	neg	w13, w12
    6cd4:	lsl	w11, w11, w13
    6cd8:	orr	w10, w11, w10
    6cdc:	str	w12, [x28, #644]
    6ce0:	str	w10, [x28, #640]
    6ce4:	ldrh	w9, [x9, #40]
    6ce8:	madd	x11, x8, x17, x28
    6cec:	madd	x13, x8, x0, x28
    6cf0:	cmp	w12, #0x8
    6cf4:	add	x11, x11, x9
    6cf8:	add	x13, x13, x9, lsl #2
    6cfc:	ldrb	w9, [x11, x18]
    6d00:	ldr	w11, [x13, x1]
    6d04:	b.lt	6d44 <BZ2_compressBlock@@Base+0x300c>  // b.tstop
    6d08:	ldr	w13, [x20]
    6d0c:	ldr	x12, [x24]
    6d10:	lsr	w10, w10, #24
    6d14:	strb	w10, [x12, w13, sxtw]
    6d18:	ldr	w10, [x20]
    6d1c:	add	w13, w10, #0x1
    6d20:	str	w13, [x20]
    6d24:	ldr	w10, [x22]
    6d28:	lsl	w10, w10, #8
    6d2c:	str	w10, [x22]
    6d30:	ldr	w14, [x21]
    6d34:	sub	w12, w14, #0x8
    6d38:	cmp	w14, #0xf
    6d3c:	str	w12, [x21]
    6d40:	b.gt	6d0c <BZ2_compressBlock@@Base+0x2fd4>
    6d44:	add	w13, w12, w9
    6d48:	neg	w12, w13
    6d4c:	lsl	w11, w11, w12
    6d50:	orr	w10, w11, w10
    6d54:	add	x9, x16, x27, lsl #1
    6d58:	str	w13, [x28, #644]
    6d5c:	str	w10, [x28, #640]
    6d60:	ldrh	w11, [x9, #42]
    6d64:	madd	x12, x8, x17, x28
    6d68:	madd	x14, x8, x0, x28
    6d6c:	cmp	w13, #0x8
    6d70:	add	x12, x12, x11
    6d74:	add	x11, x14, x11, lsl #2
    6d78:	ldrb	w12, [x12, x18]
    6d7c:	ldr	w11, [x11, x1]
    6d80:	b.lt	6dc0 <BZ2_compressBlock@@Base+0x3088>  // b.tstop
    6d84:	ldr	w14, [x20]
    6d88:	ldr	x13, [x24]
    6d8c:	lsr	w10, w10, #24
    6d90:	strb	w10, [x13, w14, sxtw]
    6d94:	ldr	w10, [x20]
    6d98:	add	w14, w10, #0x1
    6d9c:	str	w14, [x20]
    6da0:	ldr	w10, [x22]
    6da4:	lsl	w10, w10, #8
    6da8:	str	w10, [x22]
    6dac:	ldr	w15, [x21]
    6db0:	sub	w13, w15, #0x8
    6db4:	cmp	w15, #0xf
    6db8:	str	w13, [x21]
    6dbc:	b.gt	6d88 <BZ2_compressBlock@@Base+0x3050>
    6dc0:	add	w12, w13, w12
    6dc4:	neg	w13, w12
    6dc8:	lsl	w11, w11, w13
    6dcc:	orr	w10, w11, w10
    6dd0:	str	w12, [x28, #644]
    6dd4:	str	w10, [x28, #640]
    6dd8:	ldrh	w9, [x9, #44]
    6ddc:	madd	x11, x8, x17, x28
    6de0:	madd	x13, x8, x0, x28
    6de4:	cmp	w12, #0x8
    6de8:	add	x11, x11, x9
    6dec:	add	x13, x13, x9, lsl #2
    6df0:	ldrb	w9, [x11, x18]
    6df4:	ldr	w11, [x13, x1]
    6df8:	b.lt	6e38 <BZ2_compressBlock@@Base+0x3100>  // b.tstop
    6dfc:	ldr	w13, [x20]
    6e00:	ldr	x12, [x24]
    6e04:	lsr	w10, w10, #24
    6e08:	strb	w10, [x12, w13, sxtw]
    6e0c:	ldr	w10, [x20]
    6e10:	add	w13, w10, #0x1
    6e14:	str	w13, [x20]
    6e18:	ldr	w10, [x22]
    6e1c:	lsl	w10, w10, #8
    6e20:	str	w10, [x22]
    6e24:	ldr	w14, [x21]
    6e28:	sub	w12, w14, #0x8
    6e2c:	cmp	w14, #0xf
    6e30:	str	w12, [x21]
    6e34:	b.gt	6e00 <BZ2_compressBlock@@Base+0x30c8>
    6e38:	add	w13, w12, w9
    6e3c:	neg	w12, w13
    6e40:	lsl	w11, w11, w12
    6e44:	orr	w10, w11, w10
    6e48:	add	x9, x16, x27, lsl #1
    6e4c:	str	w13, [x28, #644]
    6e50:	str	w10, [x28, #640]
    6e54:	ldrh	w11, [x9, #46]
    6e58:	madd	x12, x8, x17, x28
    6e5c:	madd	x14, x8, x0, x28
    6e60:	cmp	w13, #0x8
    6e64:	add	x12, x12, x11
    6e68:	add	x11, x14, x11, lsl #2
    6e6c:	ldrb	w12, [x12, x18]
    6e70:	ldr	w11, [x11, x1]
    6e74:	b.lt	6eb4 <BZ2_compressBlock@@Base+0x317c>  // b.tstop
    6e78:	ldr	w14, [x20]
    6e7c:	ldr	x13, [x24]
    6e80:	lsr	w10, w10, #24
    6e84:	strb	w10, [x13, w14, sxtw]
    6e88:	ldr	w10, [x20]
    6e8c:	add	w14, w10, #0x1
    6e90:	str	w14, [x20]
    6e94:	ldr	w10, [x22]
    6e98:	lsl	w10, w10, #8
    6e9c:	str	w10, [x22]
    6ea0:	ldr	w15, [x21]
    6ea4:	sub	w13, w15, #0x8
    6ea8:	cmp	w15, #0xf
    6eac:	str	w13, [x21]
    6eb0:	b.gt	6e7c <BZ2_compressBlock@@Base+0x3144>
    6eb4:	add	w12, w13, w12
    6eb8:	neg	w13, w12
    6ebc:	lsl	w11, w11, w13
    6ec0:	orr	w10, w11, w10
    6ec4:	str	w12, [x28, #644]
    6ec8:	str	w10, [x28, #640]
    6ecc:	ldrh	w9, [x9, #48]
    6ed0:	madd	x11, x8, x17, x28
    6ed4:	madd	x13, x8, x0, x28
    6ed8:	cmp	w12, #0x8
    6edc:	add	x11, x11, x9
    6ee0:	add	x13, x13, x9, lsl #2
    6ee4:	ldrb	w9, [x11, x18]
    6ee8:	ldr	w11, [x13, x1]
    6eec:	b.lt	6f2c <BZ2_compressBlock@@Base+0x31f4>  // b.tstop
    6ef0:	ldr	w13, [x20]
    6ef4:	ldr	x12, [x24]
    6ef8:	lsr	w10, w10, #24
    6efc:	strb	w10, [x12, w13, sxtw]
    6f00:	ldr	w10, [x20]
    6f04:	add	w13, w10, #0x1
    6f08:	str	w13, [x20]
    6f0c:	ldr	w10, [x22]
    6f10:	lsl	w10, w10, #8
    6f14:	str	w10, [x22]
    6f18:	ldr	w14, [x21]
    6f1c:	sub	w12, w14, #0x8
    6f20:	cmp	w14, #0xf
    6f24:	str	w12, [x21]
    6f28:	b.gt	6ef4 <BZ2_compressBlock@@Base+0x31bc>
    6f2c:	add	w13, w12, w9
    6f30:	neg	w12, w13
    6f34:	lsl	w11, w11, w12
    6f38:	orr	w10, w11, w10
    6f3c:	add	x9, x16, x27, lsl #1
    6f40:	str	w13, [x28, #644]
    6f44:	str	w10, [x28, #640]
    6f48:	ldrh	w11, [x9, #50]
    6f4c:	madd	x12, x8, x17, x28
    6f50:	madd	x14, x8, x0, x28
    6f54:	cmp	w13, #0x8
    6f58:	add	x12, x12, x11
    6f5c:	add	x11, x14, x11, lsl #2
    6f60:	ldrb	w12, [x12, x18]
    6f64:	ldr	w11, [x11, x1]
    6f68:	b.lt	6fa8 <BZ2_compressBlock@@Base+0x3270>  // b.tstop
    6f6c:	ldr	w14, [x20]
    6f70:	ldr	x13, [x24]
    6f74:	lsr	w10, w10, #24
    6f78:	strb	w10, [x13, w14, sxtw]
    6f7c:	ldr	w10, [x20]
    6f80:	add	w14, w10, #0x1
    6f84:	str	w14, [x20]
    6f88:	ldr	w10, [x22]
    6f8c:	lsl	w10, w10, #8
    6f90:	str	w10, [x22]
    6f94:	ldr	w15, [x21]
    6f98:	sub	w13, w15, #0x8
    6f9c:	cmp	w15, #0xf
    6fa0:	str	w13, [x21]
    6fa4:	b.gt	6f70 <BZ2_compressBlock@@Base+0x3238>
    6fa8:	add	w12, w13, w12
    6fac:	neg	w13, w12
    6fb0:	lsl	w11, w11, w13
    6fb4:	orr	w10, w11, w10
    6fb8:	str	w12, [x28, #644]
    6fbc:	str	w10, [x28, #640]
    6fc0:	ldrh	w9, [x9, #52]
    6fc4:	madd	x11, x8, x17, x28
    6fc8:	madd	x13, x8, x0, x28
    6fcc:	cmp	w12, #0x8
    6fd0:	add	x11, x11, x9
    6fd4:	add	x13, x13, x9, lsl #2
    6fd8:	ldrb	w9, [x11, x18]
    6fdc:	ldr	w11, [x13, x1]
    6fe0:	b.lt	7020 <BZ2_compressBlock@@Base+0x32e8>  // b.tstop
    6fe4:	ldr	w13, [x20]
    6fe8:	ldr	x12, [x24]
    6fec:	lsr	w10, w10, #24
    6ff0:	strb	w10, [x12, w13, sxtw]
    6ff4:	ldr	w10, [x20]
    6ff8:	add	w13, w10, #0x1
    6ffc:	str	w13, [x20]
    7000:	ldr	w10, [x22]
    7004:	lsl	w10, w10, #8
    7008:	str	w10, [x22]
    700c:	ldr	w14, [x21]
    7010:	sub	w12, w14, #0x8
    7014:	cmp	w14, #0xf
    7018:	str	w12, [x21]
    701c:	b.gt	6fe8 <BZ2_compressBlock@@Base+0x32b0>
    7020:	add	w13, w12, w9
    7024:	neg	w12, w13
    7028:	lsl	w11, w11, w12
    702c:	orr	w10, w11, w10
    7030:	add	x9, x16, x27, lsl #1
    7034:	str	w13, [x28, #644]
    7038:	str	w10, [x28, #640]
    703c:	ldrh	w11, [x9, #54]
    7040:	madd	x12, x8, x17, x28
    7044:	madd	x14, x8, x0, x28
    7048:	cmp	w13, #0x8
    704c:	add	x12, x12, x11
    7050:	add	x11, x14, x11, lsl #2
    7054:	ldrb	w12, [x12, x18]
    7058:	ldr	w11, [x11, x1]
    705c:	b.lt	709c <BZ2_compressBlock@@Base+0x3364>  // b.tstop
    7060:	ldr	w14, [x20]
    7064:	ldr	x13, [x24]
    7068:	lsr	w10, w10, #24
    706c:	strb	w10, [x13, w14, sxtw]
    7070:	ldr	w10, [x20]
    7074:	add	w14, w10, #0x1
    7078:	str	w14, [x20]
    707c:	ldr	w10, [x22]
    7080:	lsl	w10, w10, #8
    7084:	str	w10, [x22]
    7088:	ldr	w15, [x21]
    708c:	sub	w13, w15, #0x8
    7090:	cmp	w15, #0xf
    7094:	str	w13, [x21]
    7098:	b.gt	7064 <BZ2_compressBlock@@Base+0x332c>
    709c:	add	w12, w13, w12
    70a0:	neg	w13, w12
    70a4:	lsl	w11, w11, w13
    70a8:	orr	w10, w11, w10
    70ac:	str	w12, [x28, #644]
    70b0:	str	w10, [x28, #640]
    70b4:	ldrh	w9, [x9, #56]
    70b8:	madd	x11, x8, x17, x28
    70bc:	madd	x13, x8, x0, x28
    70c0:	cmp	w12, #0x8
    70c4:	add	x11, x11, x9
    70c8:	add	x13, x13, x9, lsl #2
    70cc:	ldrb	w9, [x11, x18]
    70d0:	ldr	w11, [x13, x1]
    70d4:	b.lt	7114 <BZ2_compressBlock@@Base+0x33dc>  // b.tstop
    70d8:	ldr	w13, [x20]
    70dc:	ldr	x12, [x24]
    70e0:	lsr	w10, w10, #24
    70e4:	strb	w10, [x12, w13, sxtw]
    70e8:	ldr	w10, [x20]
    70ec:	add	w13, w10, #0x1
    70f0:	str	w13, [x20]
    70f4:	ldr	w10, [x22]
    70f8:	lsl	w10, w10, #8
    70fc:	str	w10, [x22]
    7100:	ldr	w14, [x21]
    7104:	sub	w12, w14, #0x8
    7108:	cmp	w14, #0xf
    710c:	str	w12, [x21]
    7110:	b.gt	70dc <BZ2_compressBlock@@Base+0x33a4>
    7114:	add	w13, w12, w9
    7118:	neg	w12, w13
    711c:	lsl	w11, w11, w12
    7120:	orr	w10, w11, w10
    7124:	add	x9, x16, x27, lsl #1
    7128:	str	w13, [x28, #644]
    712c:	str	w10, [x28, #640]
    7130:	ldrh	w11, [x9, #58]
    7134:	madd	x12, x8, x17, x28
    7138:	madd	x14, x8, x0, x28
    713c:	cmp	w13, #0x8
    7140:	add	x12, x12, x11
    7144:	add	x11, x14, x11, lsl #2
    7148:	ldrb	w12, [x12, x18]
    714c:	ldr	w11, [x11, x1]
    7150:	b.lt	7190 <BZ2_compressBlock@@Base+0x3458>  // b.tstop
    7154:	ldr	w14, [x20]
    7158:	ldr	x13, [x24]
    715c:	lsr	w10, w10, #24
    7160:	strb	w10, [x13, w14, sxtw]
    7164:	ldr	w10, [x20]
    7168:	add	w14, w10, #0x1
    716c:	str	w14, [x20]
    7170:	ldr	w10, [x22]
    7174:	lsl	w10, w10, #8
    7178:	str	w10, [x22]
    717c:	ldr	w15, [x21]
    7180:	sub	w13, w15, #0x8
    7184:	cmp	w15, #0xf
    7188:	str	w13, [x21]
    718c:	b.gt	7158 <BZ2_compressBlock@@Base+0x3420>
    7190:	add	w12, w13, w12
    7194:	neg	w13, w12
    7198:	lsl	w11, w11, w13
    719c:	orr	w10, w11, w10
    71a0:	str	w12, [x28, #644]
    71a4:	str	w10, [x28, #640]
    71a8:	ldrh	w9, [x9, #60]
    71ac:	madd	x11, x8, x17, x28
    71b0:	madd	x13, x8, x0, x28
    71b4:	cmp	w12, #0x8
    71b8:	add	x11, x11, x9
    71bc:	add	x13, x13, x9, lsl #2
    71c0:	ldrb	w9, [x11, x18]
    71c4:	ldr	w11, [x13, x1]
    71c8:	b.lt	7208 <BZ2_compressBlock@@Base+0x34d0>  // b.tstop
    71cc:	ldr	w13, [x20]
    71d0:	ldr	x12, [x24]
    71d4:	lsr	w10, w10, #24
    71d8:	strb	w10, [x12, w13, sxtw]
    71dc:	ldr	w10, [x20]
    71e0:	add	w13, w10, #0x1
    71e4:	str	w13, [x20]
    71e8:	ldr	w10, [x22]
    71ec:	lsl	w10, w10, #8
    71f0:	str	w10, [x22]
    71f4:	ldr	w14, [x21]
    71f8:	sub	w12, w14, #0x8
    71fc:	cmp	w14, #0xf
    7200:	str	w12, [x21]
    7204:	b.gt	71d0 <BZ2_compressBlock@@Base+0x3498>
    7208:	add	w13, w12, w9
    720c:	neg	w12, w13
    7210:	lsl	w11, w11, w12
    7214:	orr	w10, w11, w10
    7218:	add	x9, x16, x27, lsl #1
    721c:	str	w13, [x28, #644]
    7220:	str	w10, [x28, #640]
    7224:	ldrh	w11, [x9, #62]
    7228:	madd	x12, x8, x17, x28
    722c:	madd	x14, x8, x0, x28
    7230:	cmp	w13, #0x8
    7234:	add	x12, x12, x11
    7238:	add	x11, x14, x11, lsl #2
    723c:	ldrb	w12, [x12, x18]
    7240:	ldr	w11, [x11, x1]
    7244:	b.lt	7284 <BZ2_compressBlock@@Base+0x354c>  // b.tstop
    7248:	ldr	w14, [x20]
    724c:	ldr	x13, [x24]
    7250:	lsr	w10, w10, #24
    7254:	strb	w10, [x13, w14, sxtw]
    7258:	ldr	w10, [x20]
    725c:	add	w14, w10, #0x1
    7260:	str	w14, [x20]
    7264:	ldr	w10, [x22]
    7268:	lsl	w10, w10, #8
    726c:	str	w10, [x22]
    7270:	ldr	w15, [x21]
    7274:	sub	w13, w15, #0x8
    7278:	cmp	w15, #0xf
    727c:	str	w13, [x21]
    7280:	b.gt	724c <BZ2_compressBlock@@Base+0x3514>
    7284:	add	w12, w13, w12
    7288:	neg	w13, w12
    728c:	lsl	w11, w11, w13
    7290:	orr	w10, w11, w10
    7294:	str	w12, [x28, #644]
    7298:	str	w10, [x28, #640]
    729c:	ldrh	w9, [x9, #64]
    72a0:	madd	x11, x8, x17, x28
    72a4:	madd	x13, x8, x0, x28
    72a8:	cmp	w12, #0x8
    72ac:	add	x11, x11, x9
    72b0:	add	x13, x13, x9, lsl #2
    72b4:	ldrb	w9, [x11, x18]
    72b8:	ldr	w11, [x13, x1]
    72bc:	b.lt	72fc <BZ2_compressBlock@@Base+0x35c4>  // b.tstop
    72c0:	ldr	w13, [x20]
    72c4:	ldr	x12, [x24]
    72c8:	lsr	w10, w10, #24
    72cc:	strb	w10, [x12, w13, sxtw]
    72d0:	ldr	w10, [x20]
    72d4:	add	w13, w10, #0x1
    72d8:	str	w13, [x20]
    72dc:	ldr	w10, [x22]
    72e0:	lsl	w10, w10, #8
    72e4:	str	w10, [x22]
    72e8:	ldr	w14, [x21]
    72ec:	sub	w12, w14, #0x8
    72f0:	cmp	w14, #0xf
    72f4:	str	w12, [x21]
    72f8:	b.gt	72c4 <BZ2_compressBlock@@Base+0x358c>
    72fc:	add	w13, w12, w9
    7300:	neg	w12, w13
    7304:	lsl	w11, w11, w12
    7308:	orr	w10, w11, w10
    730c:	add	x9, x16, x27, lsl #1
    7310:	str	w13, [x28, #644]
    7314:	str	w10, [x28, #640]
    7318:	ldrh	w11, [x9, #66]
    731c:	madd	x12, x8, x17, x28
    7320:	madd	x14, x8, x0, x28
    7324:	cmp	w13, #0x8
    7328:	add	x12, x12, x11
    732c:	add	x11, x14, x11, lsl #2
    7330:	ldrb	w12, [x12, x18]
    7334:	ldr	w11, [x11, x1]
    7338:	b.lt	7378 <BZ2_compressBlock@@Base+0x3640>  // b.tstop
    733c:	ldr	w14, [x20]
    7340:	ldr	x13, [x24]
    7344:	lsr	w10, w10, #24
    7348:	strb	w10, [x13, w14, sxtw]
    734c:	ldr	w10, [x20]
    7350:	add	w14, w10, #0x1
    7354:	str	w14, [x20]
    7358:	ldr	w10, [x22]
    735c:	lsl	w10, w10, #8
    7360:	str	w10, [x22]
    7364:	ldr	w15, [x21]
    7368:	sub	w13, w15, #0x8
    736c:	cmp	w15, #0xf
    7370:	str	w13, [x21]
    7374:	b.gt	7340 <BZ2_compressBlock@@Base+0x3608>
    7378:	add	w12, w13, w12
    737c:	neg	w13, w12
    7380:	lsl	w11, w11, w13
    7384:	orr	w10, w11, w10
    7388:	str	w12, [x28, #644]
    738c:	str	w10, [x28, #640]
    7390:	ldrh	w9, [x9, #68]
    7394:	madd	x11, x8, x17, x28
    7398:	madd	x13, x8, x0, x28
    739c:	cmp	w12, #0x8
    73a0:	add	x11, x11, x9
    73a4:	add	x13, x13, x9, lsl #2
    73a8:	ldrb	w9, [x11, x18]
    73ac:	ldr	w11, [x13, x1]
    73b0:	b.lt	73f0 <BZ2_compressBlock@@Base+0x36b8>  // b.tstop
    73b4:	ldr	w13, [x20]
    73b8:	ldr	x12, [x24]
    73bc:	lsr	w10, w10, #24
    73c0:	strb	w10, [x12, w13, sxtw]
    73c4:	ldr	w10, [x20]
    73c8:	add	w13, w10, #0x1
    73cc:	str	w13, [x20]
    73d0:	ldr	w10, [x22]
    73d4:	lsl	w10, w10, #8
    73d8:	str	w10, [x22]
    73dc:	ldr	w14, [x21]
    73e0:	sub	w12, w14, #0x8
    73e4:	cmp	w14, #0xf
    73e8:	str	w12, [x21]
    73ec:	b.gt	73b8 <BZ2_compressBlock@@Base+0x3680>
    73f0:	add	w13, w12, w9
    73f4:	neg	w12, w13
    73f8:	lsl	w11, w11, w12
    73fc:	orr	w10, w11, w10
    7400:	add	x9, x16, x27, lsl #1
    7404:	str	w13, [x28, #644]
    7408:	str	w10, [x28, #640]
    740c:	ldrh	w11, [x9, #70]
    7410:	madd	x12, x8, x17, x28
    7414:	madd	x14, x8, x0, x28
    7418:	cmp	w13, #0x8
    741c:	add	x12, x12, x11
    7420:	add	x11, x14, x11, lsl #2
    7424:	ldrb	w12, [x12, x18]
    7428:	ldr	w11, [x11, x1]
    742c:	b.lt	746c <BZ2_compressBlock@@Base+0x3734>  // b.tstop
    7430:	ldr	w14, [x20]
    7434:	ldr	x13, [x24]
    7438:	lsr	w10, w10, #24
    743c:	strb	w10, [x13, w14, sxtw]
    7440:	ldr	w10, [x20]
    7444:	add	w14, w10, #0x1
    7448:	str	w14, [x20]
    744c:	ldr	w10, [x22]
    7450:	lsl	w10, w10, #8
    7454:	str	w10, [x22]
    7458:	ldr	w15, [x21]
    745c:	sub	w13, w15, #0x8
    7460:	cmp	w15, #0xf
    7464:	str	w13, [x21]
    7468:	b.gt	7434 <BZ2_compressBlock@@Base+0x36fc>
    746c:	add	w12, w13, w12
    7470:	neg	w13, w12
    7474:	lsl	w11, w11, w13
    7478:	orr	w10, w11, w10
    747c:	str	w12, [x28, #644]
    7480:	str	w10, [x28, #640]
    7484:	ldrh	w9, [x9, #72]
    7488:	madd	x11, x8, x17, x28
    748c:	madd	x13, x8, x0, x28
    7490:	cmp	w12, #0x8
    7494:	add	x11, x11, x9
    7498:	add	x13, x13, x9, lsl #2
    749c:	ldrb	w9, [x11, x18]
    74a0:	ldr	w11, [x13, x1]
    74a4:	b.lt	74e4 <BZ2_compressBlock@@Base+0x37ac>  // b.tstop
    74a8:	ldr	w13, [x20]
    74ac:	ldr	x12, [x24]
    74b0:	lsr	w10, w10, #24
    74b4:	strb	w10, [x12, w13, sxtw]
    74b8:	ldr	w10, [x20]
    74bc:	add	w13, w10, #0x1
    74c0:	str	w13, [x20]
    74c4:	ldr	w10, [x22]
    74c8:	lsl	w10, w10, #8
    74cc:	str	w10, [x22]
    74d0:	ldr	w14, [x21]
    74d4:	sub	w12, w14, #0x8
    74d8:	cmp	w14, #0xf
    74dc:	str	w12, [x21]
    74e0:	b.gt	74ac <BZ2_compressBlock@@Base+0x3774>
    74e4:	add	w13, w12, w9
    74e8:	neg	w12, w13
    74ec:	lsl	w11, w11, w12
    74f0:	orr	w10, w11, w10
    74f4:	add	x9, x16, x27, lsl #1
    74f8:	str	w13, [x28, #644]
    74fc:	str	w10, [x28, #640]
    7500:	ldrh	w11, [x9, #74]
    7504:	madd	x12, x8, x17, x28
    7508:	madd	x14, x8, x0, x28
    750c:	cmp	w13, #0x8
    7510:	add	x12, x12, x11
    7514:	add	x11, x14, x11, lsl #2
    7518:	ldrb	w12, [x12, x18]
    751c:	ldr	w11, [x11, x1]
    7520:	b.lt	7560 <BZ2_compressBlock@@Base+0x3828>  // b.tstop
    7524:	ldr	w14, [x20]
    7528:	ldr	x13, [x24]
    752c:	lsr	w10, w10, #24
    7530:	strb	w10, [x13, w14, sxtw]
    7534:	ldr	w10, [x20]
    7538:	add	w14, w10, #0x1
    753c:	str	w14, [x20]
    7540:	ldr	w10, [x22]
    7544:	lsl	w10, w10, #8
    7548:	str	w10, [x22]
    754c:	ldr	w15, [x21]
    7550:	sub	w13, w15, #0x8
    7554:	cmp	w15, #0xf
    7558:	str	w13, [x21]
    755c:	b.gt	7528 <BZ2_compressBlock@@Base+0x37f0>
    7560:	add	w12, w13, w12
    7564:	neg	w13, w12
    7568:	lsl	w11, w11, w13
    756c:	orr	w10, w11, w10
    7570:	str	w12, [x28, #644]
    7574:	str	w10, [x28, #640]
    7578:	ldrh	w9, [x9, #76]
    757c:	madd	x11, x8, x17, x28
    7580:	madd	x13, x8, x0, x28
    7584:	cmp	w12, #0x8
    7588:	add	x11, x11, x9
    758c:	add	x13, x13, x9, lsl #2
    7590:	ldrb	w9, [x11, x18]
    7594:	ldr	w11, [x13, x1]
    7598:	b.lt	75d8 <BZ2_compressBlock@@Base+0x38a0>  // b.tstop
    759c:	ldr	w13, [x20]
    75a0:	ldr	x12, [x24]
    75a4:	lsr	w10, w10, #24
    75a8:	strb	w10, [x12, w13, sxtw]
    75ac:	ldr	w10, [x20]
    75b0:	add	w13, w10, #0x1
    75b4:	str	w13, [x20]
    75b8:	ldr	w10, [x22]
    75bc:	lsl	w10, w10, #8
    75c0:	str	w10, [x22]
    75c4:	ldr	w14, [x21]
    75c8:	sub	w12, w14, #0x8
    75cc:	cmp	w14, #0xf
    75d0:	str	w12, [x21]
    75d4:	b.gt	75a0 <BZ2_compressBlock@@Base+0x3868>
    75d8:	add	w13, w12, w9
    75dc:	neg	w12, w13
    75e0:	lsl	w11, w11, w12
    75e4:	orr	w10, w11, w10
    75e8:	add	x9, x16, x27, lsl #1
    75ec:	str	w13, [x28, #644]
    75f0:	str	w10, [x28, #640]
    75f4:	ldrh	w11, [x9, #78]
    75f8:	madd	x12, x8, x17, x28
    75fc:	madd	x14, x8, x0, x28
    7600:	cmp	w13, #0x8
    7604:	add	x12, x12, x11
    7608:	add	x11, x14, x11, lsl #2
    760c:	ldrb	w12, [x12, x18]
    7610:	ldr	w11, [x11, x1]
    7614:	b.lt	7654 <BZ2_compressBlock@@Base+0x391c>  // b.tstop
    7618:	ldr	w14, [x20]
    761c:	ldr	x13, [x24]
    7620:	lsr	w10, w10, #24
    7624:	strb	w10, [x13, w14, sxtw]
    7628:	ldr	w10, [x20]
    762c:	add	w14, w10, #0x1
    7630:	str	w14, [x20]
    7634:	ldr	w10, [x22]
    7638:	lsl	w10, w10, #8
    763c:	str	w10, [x22]
    7640:	ldr	w15, [x21]
    7644:	sub	w13, w15, #0x8
    7648:	cmp	w15, #0xf
    764c:	str	w13, [x21]
    7650:	b.gt	761c <BZ2_compressBlock@@Base+0x38e4>
    7654:	add	w12, w13, w12
    7658:	neg	w13, w12
    765c:	lsl	w11, w11, w13
    7660:	orr	w10, w11, w10
    7664:	str	w12, [x28, #644]
    7668:	str	w10, [x28, #640]
    766c:	ldrh	w9, [x9, #80]
    7670:	madd	x11, x8, x17, x28
    7674:	madd	x13, x8, x0, x28
    7678:	cmp	w12, #0x8
    767c:	add	x11, x11, x9
    7680:	add	x13, x13, x9, lsl #2
    7684:	ldrb	w9, [x11, x18]
    7688:	ldr	w11, [x13, x1]
    768c:	b.lt	76cc <BZ2_compressBlock@@Base+0x3994>  // b.tstop
    7690:	ldr	w13, [x20]
    7694:	ldr	x12, [x24]
    7698:	lsr	w10, w10, #24
    769c:	strb	w10, [x12, w13, sxtw]
    76a0:	ldr	w10, [x20]
    76a4:	add	w13, w10, #0x1
    76a8:	str	w13, [x20]
    76ac:	ldr	w10, [x22]
    76b0:	lsl	w10, w10, #8
    76b4:	str	w10, [x22]
    76b8:	ldr	w14, [x21]
    76bc:	sub	w12, w14, #0x8
    76c0:	cmp	w14, #0xf
    76c4:	str	w12, [x21]
    76c8:	b.gt	7694 <BZ2_compressBlock@@Base+0x395c>
    76cc:	add	w13, w12, w9
    76d0:	neg	w12, w13
    76d4:	lsl	w11, w11, w12
    76d8:	orr	w10, w11, w10
    76dc:	add	x9, x16, x27, lsl #1
    76e0:	str	w13, [x28, #644]
    76e4:	str	w10, [x28, #640]
    76e8:	ldrh	w11, [x9, #82]
    76ec:	madd	x12, x8, x17, x28
    76f0:	madd	x14, x8, x0, x28
    76f4:	cmp	w13, #0x8
    76f8:	add	x12, x12, x11
    76fc:	add	x11, x14, x11, lsl #2
    7700:	ldrb	w12, [x12, x18]
    7704:	ldr	w11, [x11, x1]
    7708:	b.lt	7748 <BZ2_compressBlock@@Base+0x3a10>  // b.tstop
    770c:	ldr	w14, [x20]
    7710:	ldr	x13, [x24]
    7714:	lsr	w10, w10, #24
    7718:	strb	w10, [x13, w14, sxtw]
    771c:	ldr	w10, [x20]
    7720:	add	w14, w10, #0x1
    7724:	str	w14, [x20]
    7728:	ldr	w10, [x22]
    772c:	lsl	w10, w10, #8
    7730:	str	w10, [x22]
    7734:	ldr	w15, [x21]
    7738:	sub	w13, w15, #0x8
    773c:	cmp	w15, #0xf
    7740:	str	w13, [x21]
    7744:	b.gt	7710 <BZ2_compressBlock@@Base+0x39d8>
    7748:	add	w12, w13, w12
    774c:	neg	w13, w12
    7750:	lsl	w11, w11, w13
    7754:	orr	w10, w11, w10
    7758:	str	w12, [x28, #644]
    775c:	str	w10, [x28, #640]
    7760:	ldrh	w9, [x9, #84]
    7764:	madd	x11, x8, x17, x28
    7768:	madd	x13, x8, x0, x28
    776c:	cmp	w12, #0x8
    7770:	add	x11, x11, x9
    7774:	add	x13, x13, x9, lsl #2
    7778:	ldrb	w9, [x11, x18]
    777c:	ldr	w11, [x13, x1]
    7780:	b.lt	77c0 <BZ2_compressBlock@@Base+0x3a88>  // b.tstop
    7784:	ldr	w13, [x20]
    7788:	ldr	x12, [x24]
    778c:	lsr	w10, w10, #24
    7790:	strb	w10, [x12, w13, sxtw]
    7794:	ldr	w10, [x20]
    7798:	add	w13, w10, #0x1
    779c:	str	w13, [x20]
    77a0:	ldr	w10, [x22]
    77a4:	lsl	w10, w10, #8
    77a8:	str	w10, [x22]
    77ac:	ldr	w14, [x21]
    77b0:	sub	w12, w14, #0x8
    77b4:	cmp	w14, #0xf
    77b8:	str	w12, [x21]
    77bc:	b.gt	7788 <BZ2_compressBlock@@Base+0x3a50>
    77c0:	add	w13, w12, w9
    77c4:	neg	w12, w13
    77c8:	lsl	w11, w11, w12
    77cc:	orr	w10, w11, w10
    77d0:	add	x9, x16, x27, lsl #1
    77d4:	str	w13, [x28, #644]
    77d8:	str	w10, [x28, #640]
    77dc:	ldrh	w11, [x9, #86]
    77e0:	madd	x12, x8, x17, x28
    77e4:	madd	x14, x8, x0, x28
    77e8:	cmp	w13, #0x8
    77ec:	add	x12, x12, x11
    77f0:	add	x11, x14, x11, lsl #2
    77f4:	ldrb	w12, [x12, x18]
    77f8:	ldr	w11, [x11, x1]
    77fc:	b.lt	783c <BZ2_compressBlock@@Base+0x3b04>  // b.tstop
    7800:	ldr	w14, [x20]
    7804:	ldr	x13, [x24]
    7808:	lsr	w10, w10, #24
    780c:	strb	w10, [x13, w14, sxtw]
    7810:	ldr	w10, [x20]
    7814:	add	w14, w10, #0x1
    7818:	str	w14, [x20]
    781c:	ldr	w10, [x22]
    7820:	lsl	w10, w10, #8
    7824:	str	w10, [x22]
    7828:	ldr	w15, [x21]
    782c:	sub	w13, w15, #0x8
    7830:	cmp	w15, #0xf
    7834:	str	w13, [x21]
    7838:	b.gt	7804 <BZ2_compressBlock@@Base+0x3acc>
    783c:	add	w12, w13, w12
    7840:	neg	w13, w12
    7844:	lsl	w11, w11, w13
    7848:	orr	w10, w11, w10
    784c:	str	w12, [x28, #644]
    7850:	str	w10, [x28, #640]
    7854:	ldrh	w9, [x9, #88]
    7858:	madd	x11, x8, x17, x28
    785c:	madd	x13, x8, x0, x28
    7860:	cmp	w12, #0x8
    7864:	add	x11, x11, x9
    7868:	add	x13, x13, x9, lsl #2
    786c:	ldrb	w9, [x11, x18]
    7870:	ldr	w11, [x13, x1]
    7874:	b.lt	78b4 <BZ2_compressBlock@@Base+0x3b7c>  // b.tstop
    7878:	ldr	w13, [x20]
    787c:	ldr	x12, [x24]
    7880:	lsr	w10, w10, #24
    7884:	strb	w10, [x12, w13, sxtw]
    7888:	ldr	w10, [x20]
    788c:	add	w13, w10, #0x1
    7890:	str	w13, [x20]
    7894:	ldr	w10, [x22]
    7898:	lsl	w10, w10, #8
    789c:	str	w10, [x22]
    78a0:	ldr	w14, [x21]
    78a4:	sub	w12, w14, #0x8
    78a8:	cmp	w14, #0xf
    78ac:	str	w12, [x21]
    78b0:	b.gt	787c <BZ2_compressBlock@@Base+0x3b44>
    78b4:	add	w13, w12, w9
    78b8:	neg	w12, w13
    78bc:	lsl	w11, w11, w12
    78c0:	orr	w10, w11, w10
    78c4:	add	x9, x16, x27, lsl #1
    78c8:	str	w13, [x28, #644]
    78cc:	str	w10, [x28, #640]
    78d0:	ldrh	w11, [x9, #90]
    78d4:	madd	x12, x8, x17, x28
    78d8:	madd	x14, x8, x0, x28
    78dc:	cmp	w13, #0x8
    78e0:	add	x12, x12, x11
    78e4:	add	x11, x14, x11, lsl #2
    78e8:	ldrb	w12, [x12, x18]
    78ec:	ldr	w11, [x11, x1]
    78f0:	b.lt	7930 <BZ2_compressBlock@@Base+0x3bf8>  // b.tstop
    78f4:	ldr	w14, [x20]
    78f8:	ldr	x13, [x24]
    78fc:	lsr	w10, w10, #24
    7900:	strb	w10, [x13, w14, sxtw]
    7904:	ldr	w10, [x20]
    7908:	add	w14, w10, #0x1
    790c:	str	w14, [x20]
    7910:	ldr	w10, [x22]
    7914:	lsl	w10, w10, #8
    7918:	str	w10, [x22]
    791c:	ldr	w15, [x21]
    7920:	sub	w13, w15, #0x8
    7924:	cmp	w15, #0xf
    7928:	str	w13, [x21]
    792c:	b.gt	78f8 <BZ2_compressBlock@@Base+0x3bc0>
    7930:	add	w12, w13, w12
    7934:	neg	w13, w12
    7938:	lsl	w11, w11, w13
    793c:	orr	w10, w11, w10
    7940:	str	w12, [x28, #644]
    7944:	str	w10, [x28, #640]
    7948:	ldrh	w9, [x9, #92]
    794c:	madd	x11, x8, x17, x28
    7950:	madd	x13, x8, x0, x28
    7954:	cmp	w12, #0x8
    7958:	add	x11, x11, x9
    795c:	add	x13, x13, x9, lsl #2
    7960:	ldrb	w9, [x11, x18]
    7964:	ldr	w11, [x13, x1]
    7968:	b.lt	79a8 <BZ2_compressBlock@@Base+0x3c70>  // b.tstop
    796c:	ldr	w13, [x20]
    7970:	ldr	x12, [x24]
    7974:	lsr	w10, w10, #24
    7978:	strb	w10, [x12, w13, sxtw]
    797c:	ldr	w10, [x20]
    7980:	add	w13, w10, #0x1
    7984:	str	w13, [x20]
    7988:	ldr	w10, [x22]
    798c:	lsl	w10, w10, #8
    7990:	str	w10, [x22]
    7994:	ldr	w14, [x21]
    7998:	sub	w12, w14, #0x8
    799c:	cmp	w14, #0xf
    79a0:	str	w12, [x21]
    79a4:	b.gt	7970 <BZ2_compressBlock@@Base+0x3c38>
    79a8:	add	w13, w12, w9
    79ac:	neg	w12, w13
    79b0:	lsl	w11, w11, w12
    79b4:	orr	w10, w11, w10
    79b8:	add	x9, x16, x27, lsl #1
    79bc:	str	w13, [x28, #644]
    79c0:	str	w10, [x28, #640]
    79c4:	ldrh	w11, [x9, #94]
    79c8:	madd	x12, x8, x17, x28
    79cc:	madd	x14, x8, x0, x28
    79d0:	cmp	w13, #0x8
    79d4:	add	x12, x12, x11
    79d8:	add	x11, x14, x11, lsl #2
    79dc:	ldrb	w12, [x12, x18]
    79e0:	ldr	w11, [x11, x1]
    79e4:	b.lt	7a24 <BZ2_compressBlock@@Base+0x3cec>  // b.tstop
    79e8:	ldr	w14, [x20]
    79ec:	ldr	x13, [x24]
    79f0:	lsr	w10, w10, #24
    79f4:	strb	w10, [x13, w14, sxtw]
    79f8:	ldr	w10, [x20]
    79fc:	add	w14, w10, #0x1
    7a00:	str	w14, [x20]
    7a04:	ldr	w10, [x22]
    7a08:	lsl	w10, w10, #8
    7a0c:	str	w10, [x22]
    7a10:	ldr	w15, [x21]
    7a14:	sub	w13, w15, #0x8
    7a18:	cmp	w15, #0xf
    7a1c:	str	w13, [x21]
    7a20:	b.gt	79ec <BZ2_compressBlock@@Base+0x3cb4>
    7a24:	add	w12, w13, w12
    7a28:	neg	w13, w12
    7a2c:	lsl	w11, w11, w13
    7a30:	orr	w10, w11, w10
    7a34:	str	w12, [x28, #644]
    7a38:	str	w10, [x28, #640]
    7a3c:	ldrh	w9, [x9, #96]
    7a40:	madd	x11, x8, x17, x28
    7a44:	madd	x13, x8, x0, x28
    7a48:	cmp	w12, #0x8
    7a4c:	add	x11, x11, x9
    7a50:	add	x9, x13, x9, lsl #2
    7a54:	ldrb	w11, [x11, x18]
    7a58:	ldr	w9, [x9, x1]
    7a5c:	b.lt	7a9c <BZ2_compressBlock@@Base+0x3d64>  // b.tstop
    7a60:	ldr	w13, [x20]
    7a64:	ldr	x12, [x24]
    7a68:	lsr	w10, w10, #24
    7a6c:	strb	w10, [x12, w13, sxtw]
    7a70:	ldr	w10, [x20]
    7a74:	add	w13, w10, #0x1
    7a78:	str	w13, [x20]
    7a7c:	ldr	w10, [x22]
    7a80:	lsl	w10, w10, #8
    7a84:	str	w10, [x22]
    7a88:	ldr	w14, [x21]
    7a8c:	sub	w12, w14, #0x8
    7a90:	cmp	w14, #0xf
    7a94:	str	w12, [x21]
    7a98:	b.gt	7a64 <BZ2_compressBlock@@Base+0x3d2c>
    7a9c:	add	w11, w12, w11
    7aa0:	neg	w12, w11
    7aa4:	lsl	w9, w9, w12
    7aa8:	orr	w9, w9, w10
    7aac:	str	w11, [x28, #644]
    7ab0:	str	w9, [x28, #640]
    7ab4:	ldrh	w10, [x16, x4, lsl #1]
    7ab8:	madd	x12, x8, x17, x28
    7abc:	madd	x8, x8, x0, x28
    7ac0:	cmp	w11, #0x8
    7ac4:	add	x12, x12, x10
    7ac8:	add	x8, x8, x10, lsl #2
    7acc:	ldrb	w10, [x12, x18]
    7ad0:	ldr	w8, [x8, x1]
    7ad4:	b.lt	62b4 <BZ2_compressBlock@@Base+0x257c>  // b.tstop
    7ad8:	ldr	w12, [x20]
    7adc:	ldr	x11, [x24]
    7ae0:	lsr	w9, w9, #24
    7ae4:	strb	w9, [x11, w12, sxtw]
    7ae8:	ldr	w9, [x20]
    7aec:	add	w12, w9, #0x1
    7af0:	str	w12, [x20]
    7af4:	ldr	w9, [x22]
    7af8:	lsl	w9, w9, #8
    7afc:	str	w9, [x22]
    7b00:	ldr	w13, [x21]
    7b04:	sub	w11, w13, #0x8
    7b08:	cmp	w13, #0xf
    7b0c:	str	w11, [x21]
    7b10:	b.gt	7adc <BZ2_compressBlock@@Base+0x3da4>
    7b14:	b	62b4 <BZ2_compressBlock@@Base+0x257c>
    7b18:	cmp	w25, w27
    7b1c:	b.lt	62cc <BZ2_compressBlock@@Base+0x2594>  // b.tstop
    7b20:	ldr	w11, [x21]
    7b24:	ldr	w10, [x22]
    7b28:	sxtw	x9, w25
    7b2c:	b	7b54 <BZ2_compressBlock@@Base+0x3e1c>
    7b30:	add	w11, w11, w13
    7b34:	neg	w13, w11
    7b38:	lsl	w12, w12, w13
    7b3c:	cmp	x27, x9
    7b40:	add	x27, x27, #0x1
    7b44:	orr	w10, w12, w10
    7b48:	str	w10, [x22]
    7b4c:	str	w11, [x21]
    7b50:	b.ge	62cc <BZ2_compressBlock@@Base+0x2594>  // b.tcont
    7b54:	ldrb	w12, [x8]
    7b58:	ldrh	w13, [x16, x27, lsl #1]
    7b5c:	cmp	w11, #0x8
    7b60:	madd	x14, x12, x17, x28
    7b64:	madd	x12, x12, x0, x28
    7b68:	add	x14, x14, x13
    7b6c:	add	x12, x12, x13, lsl #2
    7b70:	ldrb	w13, [x14, x18]
    7b74:	ldr	w12, [x12, x1]
    7b78:	b.lt	7b30 <BZ2_compressBlock@@Base+0x3df8>  // b.tstop
    7b7c:	ldr	w14, [x20]
    7b80:	ldr	x11, [x24]
    7b84:	lsr	w10, w10, #24
    7b88:	strb	w10, [x11, w14, sxtw]
    7b8c:	ldr	w10, [x20]
    7b90:	add	w14, w10, #0x1
    7b94:	str	w14, [x20]
    7b98:	ldr	w10, [x22]
    7b9c:	lsl	w10, w10, #8
    7ba0:	str	w10, [x22]
    7ba4:	ldr	w15, [x21]
    7ba8:	sub	w11, w15, #0x8
    7bac:	cmp	w15, #0xf
    7bb0:	str	w11, [x21]
    7bb4:	b.gt	7b80 <BZ2_compressBlock@@Base+0x3e48>
    7bb8:	b	7b30 <BZ2_compressBlock@@Base+0x3df8>
    7bbc:	mov	w3, wzr
    7bc0:	ldr	x8, [x29, #8]
    7bc4:	cmp	w3, w8
    7bc8:	b.eq	7bd4 <BZ2_compressBlock@@Base+0x3e9c>  // b.none
    7bcc:	mov	w0, #0xbbf                 	// #3007
    7bd0:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    7bd4:	ldr	w8, [x28, #656]
    7bd8:	cmp	w8, #0x3
    7bdc:	b.ge	7ca4 <BZ2_compressBlock@@Base+0x3f6c>  // b.tcont
    7be0:	ldp	x20, x19, [sp, #304]
    7be4:	ldp	x22, x21, [sp, #288]
    7be8:	ldp	x24, x23, [sp, #272]
    7bec:	ldp	x26, x25, [sp, #256]
    7bf0:	ldp	x28, x27, [sp, #240]
    7bf4:	ldp	x29, x30, [sp, #224]
    7bf8:	ldr	d8, [sp, #208]
    7bfc:	add	sp, sp, #0x140
    7c00:	ret
    7c04:	ldr	x0, [x8]
    7c08:	ldr	w2, [x28, #108]
    7c0c:	ldr	w3, [x28, #668]
    7c10:	ldr	w4, [x28, #124]
    7c14:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    7c18:	add	x1, x1, #0xa92
    7c1c:	bl	1610 <fprintf@plt>
    7c20:	b	49a0 <BZ2_compressBlock@@Base+0xc68>
    7c24:	adrp	x10, 1e000 <BZ2_bzerror@@Base+0x1092c>
    7c28:	ldr	x10, [x10, #4016]
    7c2c:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    7c30:	sub	w2, w9, w8
    7c34:	add	x1, x1, #0xb3a
    7c38:	ldr	x0, [x10]
    7c3c:	bl	1610 <fprintf@plt>
    7c40:	ldr	x5, [sp, #80]
    7c44:	ldr	w9, [x20]
    7c48:	ldr	w10, [x21]
    7c4c:	b	5ea8 <BZ2_compressBlock@@Base+0x2170>
    7c50:	adrp	x10, 1e000 <BZ2_bzerror@@Base+0x1092c>
    7c54:	ldr	x10, [x10, #4016]
    7c58:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    7c5c:	sub	w2, w8, w9
    7c60:	add	x1, x1, #0xb54
    7c64:	ldr	x0, [x10]
    7c68:	bl	1610 <fprintf@plt>
    7c6c:	ldr	x5, [sp, #80]
    7c70:	ldr	w8, [x20]
    7c74:	ldr	w11, [x21]
    7c78:	ldr	w10, [x22]
    7c7c:	b	6080 <BZ2_compressBlock@@Base+0x2348>
    7c80:	adrp	x9, 1e000 <BZ2_bzerror@@Base+0x1092c>
    7c84:	ldr	x9, [x9, #4016]
    7c88:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    7c8c:	sub	w2, w26, w8
    7c90:	add	x1, x1, #0xb63
    7c94:	ldr	x0, [x9]
    7c98:	bl	1610 <fprintf@plt>
    7c9c:	ldr	w26, [x20]
    7ca0:	b	6288 <BZ2_compressBlock@@Base+0x2550>
    7ca4:	adrp	x9, 1e000 <BZ2_bzerror@@Base+0x1092c>
    7ca8:	ldr	w8, [x20]
    7cac:	ldr	x9, [x9, #4016]
    7cb0:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    7cb4:	add	x1, x1, #0xb75
    7cb8:	sub	w2, w8, w26
    7cbc:	ldr	x0, [x9]
    7cc0:	bl	1610 <fprintf@plt>
    7cc4:	b	7be0 <BZ2_compressBlock@@Base+0x3ea8>

0000000000007cc8 <BZ2_decompress@@Base>:
    7cc8:	sub	sp, sp, #0xe0
    7ccc:	stp	x29, x30, [sp, #128]
    7cd0:	stp	x28, x27, [sp, #144]
    7cd4:	stp	x26, x25, [sp, #160]
    7cd8:	stp	x24, x23, [sp, #176]
    7cdc:	stp	x22, x21, [sp, #192]
    7ce0:	stp	x20, x19, [sp, #208]
    7ce4:	add	x29, sp, #0x80
    7ce8:	ldr	w8, [x0, #8]
    7cec:	ldr	x27, [x0]
    7cf0:	mov	w9, #0xfa24                	// #64036
    7cf4:	mov	x21, x0
    7cf8:	subs	w8, w8, #0xa
    7cfc:	add	x22, x0, x9
    7d00:	b.ne	7d78 <BZ2_decompress@@Base+0xb0>  // b.any
    7d04:	mov	x7, xzr
    7d08:	mov	x23, xzr
    7d0c:	mov	w24, wzr
    7d10:	mov	w28, wzr
    7d14:	mov	w14, wzr
    7d18:	mov	w30, wzr
    7d1c:	mov	w16, wzr
    7d20:	mov	w25, wzr
    7d24:	mov	w3, wzr
    7d28:	mov	w26, wzr
    7d2c:	mov	w17, wzr
    7d30:	mov	w19, wzr
    7d34:	mov	w4, wzr
    7d38:	mov	w2, wzr
    7d3c:	mov	w18, wzr
    7d40:	mov	w15, wzr
    7d44:	mov	w5, wzr
    7d48:	mov	w6, wzr
    7d4c:	mov	w1, wzr
    7d50:	mov	w20, wzr
    7d54:	mov	w10, wzr
    7d58:	movi	v0.2d, #0x0
    7d5c:	stur	xzr, [x29, #-24]
    7d60:	stur	xzr, [x29, #-36]
    7d64:	stur	q0, [x22, #92]
    7d68:	stp	q0, q0, [x22, #64]
    7d6c:	stp	q0, q0, [x22, #32]
    7d70:	stp	q0, q0, [x22]
    7d74:	b	7dbc <BZ2_decompress@@Base+0xf4>
    7d78:	ldp	w9, w18, [x22, #24]
    7d7c:	ldp	w10, w20, [x22]
    7d80:	ldp	w1, w6, [x22, #8]
    7d84:	ldp	w5, w15, [x22, #16]
    7d88:	stur	w9, [x29, #-32]
    7d8c:	ldp	w25, w9, [x22, #56]
    7d90:	ldp	w2, w4, [x22, #32]
    7d94:	ldp	w19, w17, [x22, #40]
    7d98:	ldp	w26, w3, [x22, #48]
    7d9c:	stur	w9, [x29, #-36]
    7da0:	ldur	x9, [x22, #84]
    7da4:	ldp	w16, w30, [x22, #64]
    7da8:	ldp	w14, w28, [x22, #72]
    7dac:	ldr	w24, [x22, #80]
    7db0:	ldur	x23, [x22, #92]
    7db4:	ldur	x7, [x22, #100]
    7db8:	stur	x9, [x29, #-24]
    7dbc:	cmp	w8, #0x28
    7dc0:	stur	x10, [x29, #-16]
    7dc4:	b.hi	7e14 <BZ2_decompress@@Base+0x14c>  // b.pmore
    7dc8:	adrp	x10, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    7dcc:	add	x10, x10, #0xb88
    7dd0:	adr	x9, 7de0 <BZ2_decompress@@Base+0x118>
    7dd4:	ldrh	w11, [x10, x8, lsl #1]
    7dd8:	add	x9, x9, x11, lsl #2
    7ddc:	br	x9
    7de0:	ldr	w8, [x21, #36]
    7de4:	mov	w9, #0xa                   	// #10
    7de8:	str	w9, [x21, #8]
    7dec:	cmp	w8, #0x8
    7df0:	b.lt	82bc <BZ2_decompress@@Base+0x5f4>  // b.tstop
    7df4:	ldr	w9, [x21, #32]
    7df8:	sub	w8, w8, #0x8
    7dfc:	lsr	w9, w9, w8
    7e00:	and	w9, w9, #0xff
    7e04:	cmp	w9, #0x42
    7e08:	str	w8, [x21, #36]
    7e0c:	b.eq	7eb4 <BZ2_decompress@@Base+0x1ec>  // b.none
    7e10:	b	7f4c <BZ2_decompress@@Base+0x284>
    7e14:	mov	w0, #0xfa1                 	// #4001
    7e18:	str	w6, [sp, #32]
    7e1c:	stur	w4, [x29, #-56]
    7e20:	str	w24, [sp, #52]
    7e24:	stp	w14, w15, [x29, #-44]
    7e28:	stur	w26, [x29, #-48]
    7e2c:	str	x28, [sp, #40]
    7e30:	stur	w25, [x29, #-60]
    7e34:	mov	w25, w5
    7e38:	stur	w20, [x29, #-52]
    7e3c:	str	x19, [sp, #56]
    7e40:	mov	x19, x7
    7e44:	str	w3, [sp, #36]
    7e48:	mov	w21, w30
    7e4c:	mov	x26, x16
    7e50:	mov	x27, x17
    7e54:	mov	x20, x18
    7e58:	mov	w24, w1
    7e5c:	mov	w28, w2
    7e60:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    7e64:	mov	w0, #0xfa2                 	// #4002
    7e68:	bl	1600 <BZ2_bz__AssertH__fail@plt>
    7e6c:	mov	w2, w28
    7e70:	mov	w1, w24
    7e74:	mov	x18, x20
    7e78:	mov	x16, x26
    7e7c:	ldp	w6, w3, [sp, #32]
    7e80:	mov	x7, x19
    7e84:	ldr	x19, [sp, #56]
    7e88:	ldp	w20, w26, [x29, #-52]
    7e8c:	mov	w5, w25
    7e90:	ldp	w25, w4, [x29, #-60]
    7e94:	ldr	x28, [sp, #40]
    7e98:	ldp	w14, w15, [x29, #-44]
    7e9c:	ldr	w24, [sp, #52]
    7ea0:	mov	x17, x27
    7ea4:	mov	w30, w21
    7ea8:	mov	w0, wzr
    7eac:	b	9418 <BZ2_decompress@@Base+0x1750>
    7eb0:	ldr	w8, [x21, #36]
    7eb4:	mov	w9, #0xb                   	// #11
    7eb8:	cmp	w8, #0x8
    7ebc:	str	w9, [x21, #8]
    7ec0:	b.lt	8114 <BZ2_decompress@@Base+0x44c>  // b.tstop
    7ec4:	ldr	w9, [x21, #32]
    7ec8:	sub	w8, w8, #0x8
    7ecc:	lsr	w9, w9, w8
    7ed0:	and	w9, w9, #0xff
    7ed4:	cmp	w9, #0x5a
    7ed8:	str	w8, [x21, #36]
    7edc:	b.eq	7ee8 <BZ2_decompress@@Base+0x220>  // b.none
    7ee0:	b	7f4c <BZ2_decompress@@Base+0x284>
    7ee4:	ldr	w8, [x21, #36]
    7ee8:	mov	w9, #0xc                   	// #12
    7eec:	cmp	w8, #0x8
    7ef0:	str	w9, [x21, #8]
    7ef4:	b.lt	80b8 <BZ2_decompress@@Base+0x3f0>  // b.tstop
    7ef8:	ldr	w9, [x21, #32]
    7efc:	sub	w8, w8, #0x8
    7f00:	lsr	w9, w9, w8
    7f04:	and	w9, w9, #0xff
    7f08:	cmp	w9, #0x68
    7f0c:	str	w8, [x21, #36]
    7f10:	b.eq	7f1c <BZ2_decompress@@Base+0x254>  // b.none
    7f14:	b	7f4c <BZ2_decompress@@Base+0x284>
    7f18:	ldr	w8, [x21, #36]
    7f1c:	mov	w9, #0xd                   	// #13
    7f20:	cmp	w8, #0x8
    7f24:	str	w9, [x21, #8]
    7f28:	b.lt	805c <BZ2_decompress@@Base+0x394>  // b.tstop
    7f2c:	ldr	w9, [x21, #32]
    7f30:	sub	w10, w8, #0x8
    7f34:	lsr	w8, w9, w10
    7f38:	and	w8, w8, #0xff
    7f3c:	sub	w9, w8, #0x31
    7f40:	cmp	w9, #0x8
    7f44:	stp	w10, w8, [x21, #36]
    7f48:	b.ls	81d4 <BZ2_decompress@@Base+0x50c>  // b.plast
    7f4c:	mov	w0, #0xfffffffb            	// #-5
    7f50:	b	9418 <BZ2_decompress@@Base+0x1750>
    7f54:	ldr	w8, [x21, #36]
    7f58:	b	83a0 <BZ2_decompress@@Base+0x6d8>
    7f5c:	ldr	w8, [x21, #36]
    7f60:	b	83cc <BZ2_decompress@@Base+0x704>
    7f64:	ldr	w8, [x21, #36]
    7f68:	b	83f8 <BZ2_decompress@@Base+0x730>
    7f6c:	ldr	w8, [x21, #36]
    7f70:	b	8424 <BZ2_decompress@@Base+0x75c>
    7f74:	ldr	w8, [x21, #36]
    7f78:	b	8450 <BZ2_decompress@@Base+0x788>
    7f7c:	ldr	w8, [x21, #36]
    7f80:	b	84cc <BZ2_decompress@@Base+0x804>
    7f84:	ldr	w8, [x21, #36]
    7f88:	b	84f8 <BZ2_decompress@@Base+0x830>
    7f8c:	ldr	w8, [x21, #36]
    7f90:	b	8524 <BZ2_decompress@@Base+0x85c>
    7f94:	ldr	w8, [x21, #36]
    7f98:	b	8550 <BZ2_decompress@@Base+0x888>
    7f9c:	ldr	w8, [x21, #36]
    7fa0:	b	857c <BZ2_decompress@@Base+0x8b4>
    7fa4:	ldr	w8, [x21, #36]
    7fa8:	b	85a8 <BZ2_decompress@@Base+0x8e0>
    7fac:	ldr	w8, [x21, #36]
    7fb0:	b	85d4 <BZ2_decompress@@Base+0x90c>
    7fb4:	ldr	w8, [x21, #36]
    7fb8:	mov	w9, #0x1f                  	// #31
    7fbc:	cmp	w8, #0xf
    7fc0:	str	w9, [x21, #8]
    7fc4:	b.lt	8170 <BZ2_decompress@@Base+0x4a8>  // b.tstop
    7fc8:	ldr	w10, [x21, #32]
    7fcc:	sub	w8, w8, #0xf
    7fd0:	lsr	w10, w10, w8
    7fd4:	mov	w9, wzr
    7fd8:	ands	w15, w10, #0x7fff
    7fdc:	str	w8, [x21, #36]
    7fe0:	b.ne	9654 <BZ2_decompress@@Base+0x198c>  // b.any
    7fe4:	mov	w0, #0xfffffffc            	// #-4
    7fe8:	mov	w15, w9
    7fec:	b	9418 <BZ2_decompress@@Base+0x1750>
    7ff0:	ldr	w8, [x21, #36]
    7ff4:	ldur	x0, [x29, #-16]
    7ff8:	b	9d94 <BZ2_decompress@@Base+0x20cc>
    7ffc:	ldr	w8, [x21, #36]
    8000:	b	9230 <BZ2_decompress@@Base+0x1568>
    8004:	ldr	w8, [x21, #36]
    8008:	b	92e0 <BZ2_decompress@@Base+0x1618>
    800c:	ldr	w8, [x21, #36]
    8010:	b	9374 <BZ2_decompress@@Base+0x16ac>
    8014:	ldr	w8, [x21, #36]
    8018:	b	87ac <BZ2_decompress@@Base+0xae4>
    801c:	ldr	w8, [x21, #36]
    8020:	b	87d8 <BZ2_decompress@@Base+0xb10>
    8024:	ldr	w8, [x21, #36]
    8028:	b	8804 <BZ2_decompress@@Base+0xb3c>
    802c:	ldr	w8, [x21, #36]
    8030:	b	8830 <BZ2_decompress@@Base+0xb68>
    8034:	ldr	w8, [x21, #36]
    8038:	b	885c <BZ2_decompress@@Base+0xb94>
    803c:	ldr	w8, [x21, #36]
    8040:	b	888c <BZ2_decompress@@Base+0xbc4>
    8044:	ldr	w8, [x21, #36]
    8048:	b	88b8 <BZ2_decompress@@Base+0xbf0>
    804c:	ldr	w8, [x21, #36]
    8050:	b	88e4 <BZ2_decompress@@Base+0xc1c>
    8054:	ldr	w8, [x21, #36]
    8058:	b	8910 <BZ2_decompress@@Base+0xc48>
    805c:	ldr	w9, [x27, #8]
    8060:	sub	w10, w9, #0x1
    8064:	b	8074 <BZ2_decompress@@Base+0x3ac>
    8068:	cmp	w8, #0x8
    806c:	sub	w10, w10, #0x1
    8070:	b.pl	7f30 <BZ2_decompress@@Base+0x268>  // b.nfrst
    8074:	cmn	w10, #0x1
    8078:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    807c:	ldr	x11, [x27]
    8080:	ldr	w12, [x21, #32]
    8084:	add	w8, w8, #0x8
    8088:	ldrb	w9, [x11], #1
    808c:	bfi	w9, w12, #8, #24
    8090:	stp	w9, w8, [x21, #32]
    8094:	ldr	w12, [x27, #12]
    8098:	str	x11, [x27]
    809c:	adds	w11, w12, #0x1
    80a0:	stp	w10, w11, [x27, #8]
    80a4:	b.cc	8068 <BZ2_decompress@@Base+0x3a0>  // b.lo, b.ul, b.last
    80a8:	ldr	w11, [x27, #16]
    80ac:	add	w11, w11, #0x1
    80b0:	str	w11, [x27, #16]
    80b4:	b	8068 <BZ2_decompress@@Base+0x3a0>
    80b8:	ldr	w9, [x27, #8]
    80bc:	sub	w10, w9, #0x1
    80c0:	b	80d0 <BZ2_decompress@@Base+0x408>
    80c4:	cmp	w8, #0x8
    80c8:	sub	w10, w10, #0x1
    80cc:	b.pl	7efc <BZ2_decompress@@Base+0x234>  // b.nfrst
    80d0:	cmn	w10, #0x1
    80d4:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    80d8:	ldr	x11, [x27]
    80dc:	ldr	w12, [x21, #32]
    80e0:	add	w8, w8, #0x8
    80e4:	ldrb	w9, [x11], #1
    80e8:	bfi	w9, w12, #8, #24
    80ec:	stp	w9, w8, [x21, #32]
    80f0:	ldr	w12, [x27, #12]
    80f4:	str	x11, [x27]
    80f8:	adds	w11, w12, #0x1
    80fc:	stp	w10, w11, [x27, #8]
    8100:	b.cc	80c4 <BZ2_decompress@@Base+0x3fc>  // b.lo, b.ul, b.last
    8104:	ldr	w11, [x27, #16]
    8108:	add	w11, w11, #0x1
    810c:	str	w11, [x27, #16]
    8110:	b	80c4 <BZ2_decompress@@Base+0x3fc>
    8114:	ldr	w9, [x27, #8]
    8118:	sub	w10, w9, #0x1
    811c:	b	812c <BZ2_decompress@@Base+0x464>
    8120:	cmp	w8, #0x8
    8124:	sub	w10, w10, #0x1
    8128:	b.pl	7ec8 <BZ2_decompress@@Base+0x200>  // b.nfrst
    812c:	cmn	w10, #0x1
    8130:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8134:	ldr	x11, [x27]
    8138:	ldr	w12, [x21, #32]
    813c:	add	w8, w8, #0x8
    8140:	ldrb	w9, [x11], #1
    8144:	bfi	w9, w12, #8, #24
    8148:	stp	w9, w8, [x21, #32]
    814c:	ldr	w12, [x27, #12]
    8150:	str	x11, [x27]
    8154:	adds	w11, w12, #0x1
    8158:	stp	w10, w11, [x27, #8]
    815c:	b.cc	8120 <BZ2_decompress@@Base+0x458>  // b.lo, b.ul, b.last
    8160:	ldr	w11, [x27, #16]
    8164:	add	w11, w11, #0x1
    8168:	str	w11, [x27, #16]
    816c:	b	8120 <BZ2_decompress@@Base+0x458>
    8170:	ldr	x9, [x21]
    8174:	ldr	w10, [x9, #8]
    8178:	sub	w11, w10, #0x1
    817c:	b	8190 <BZ2_decompress@@Base+0x4c8>
    8180:	sub	w12, w8, #0x8
    8184:	cmp	w12, #0x6
    8188:	sub	w11, w11, #0x1
    818c:	b.gt	7fcc <BZ2_decompress@@Base+0x304>
    8190:	cmn	w11, #0x1
    8194:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8198:	ldr	x12, [x9]
    819c:	ldr	w13, [x21, #32]
    81a0:	add	w8, w8, #0x8
    81a4:	ldrb	w10, [x12], #1
    81a8:	bfi	w10, w13, #8, #24
    81ac:	stp	w10, w8, [x21, #32]
    81b0:	ldr	w13, [x9, #12]
    81b4:	str	x12, [x9]
    81b8:	adds	w12, w13, #0x1
    81bc:	stp	w11, w12, [x9, #8]
    81c0:	b.cc	8180 <BZ2_decompress@@Base+0x4b8>  // b.lo, b.ul, b.last
    81c4:	ldr	w12, [x9, #16]
    81c8:	add	w12, w12, #0x1
    81cc:	str	w12, [x9, #16]
    81d0:	b	8180 <BZ2_decompress@@Base+0x4b8>
    81d4:	sub	w9, w8, #0x30
    81d8:	stp	w20, w26, [x29, #-52]
    81dc:	str	w9, [x21, #40]
    81e0:	ldrb	w10, [x21, #44]
    81e4:	ldr	x8, [x27, #56]
    81e8:	ldr	x0, [x27, #72]
    81ec:	str	x19, [sp, #56]
    81f0:	mov	x19, x16
    81f4:	mov	w26, w30
    81f8:	str	x23, [sp, #24]
    81fc:	mov	x20, x7
    8200:	stur	w25, [x29, #-60]
    8204:	mov	w23, w3
    8208:	mov	w25, w6
    820c:	stur	w14, [x29, #-44]
    8210:	str	w2, [sp, #52]
    8214:	str	w1, [sp, #36]
    8218:	str	x18, [sp, #40]
    821c:	str	x17, [sp, #16]
    8220:	stur	w15, [x29, #-40]
    8224:	str	w5, [sp, #32]
    8228:	stur	w4, [x29, #-56]
    822c:	cbz	w10, 8318 <BZ2_decompress@@Base+0x650>
    8230:	mov	w10, #0xd40                 	// #3392
    8234:	movk	w10, #0x3, lsl #16
    8238:	mul	w1, w9, w10
    823c:	mov	w2, #0x1                   	// #1
    8240:	blr	x8
    8244:	ldr	w8, [x21, #40]
    8248:	str	x0, [x21, #3160]
    824c:	ldr	x9, [x27, #56]
    8250:	ldr	x0, [x27, #72]
    8254:	mov	w10, #0x86a0                	// #34464
    8258:	movk	w10, #0x1, lsl #16
    825c:	mul	w8, w8, w10
    8260:	asr	w1, w8, #1
    8264:	mov	w2, #0x1                   	// #1
    8268:	blr	x9
    826c:	mov	x8, x0
    8270:	str	x0, [x21, #3168]
    8274:	mov	w0, #0xfffffffd            	// #-3
    8278:	cbz	x8, 9070 <BZ2_decompress@@Base+0x13a8>
    827c:	ldr	x8, [x21, #3160]
    8280:	mov	w6, w25
    8284:	mov	w3, w23
    8288:	ldp	w25, w4, [x29, #-60]
    828c:	ldp	w5, w1, [sp, #32]
    8290:	mov	x7, x20
    8294:	ldp	x17, x23, [sp, #16]
    8298:	mov	w30, w26
    829c:	ldp	w14, w15, [x29, #-44]
    82a0:	ldp	w20, w26, [x29, #-52]
    82a4:	mov	x16, x19
    82a8:	ldr	x19, [sp, #56]
    82ac:	ldr	x18, [sp, #40]
    82b0:	ldr	w2, [sp, #52]
    82b4:	cbnz	x8, 8368 <BZ2_decompress@@Base+0x6a0>
    82b8:	b	9418 <BZ2_decompress@@Base+0x1750>
    82bc:	ldr	w9, [x27, #8]
    82c0:	sub	w10, w9, #0x1
    82c4:	b	82d4 <BZ2_decompress@@Base+0x60c>
    82c8:	cmp	w8, #0x8
    82cc:	sub	w10, w10, #0x1
    82d0:	b.pl	7df8 <BZ2_decompress@@Base+0x130>  // b.nfrst
    82d4:	cmn	w10, #0x1
    82d8:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    82dc:	ldr	x11, [x27]
    82e0:	ldr	w12, [x21, #32]
    82e4:	add	w8, w8, #0x8
    82e8:	ldrb	w9, [x11], #1
    82ec:	bfi	w9, w12, #8, #24
    82f0:	stp	w9, w8, [x21, #32]
    82f4:	ldr	w12, [x27, #12]
    82f8:	str	x11, [x27]
    82fc:	adds	w11, w12, #0x1
    8300:	stp	w10, w11, [x27, #8]
    8304:	b.cc	82c8 <BZ2_decompress@@Base+0x600>  // b.lo, b.ul, b.last
    8308:	ldr	w11, [x27, #16]
    830c:	add	w11, w11, #0x1
    8310:	str	w11, [x27, #16]
    8314:	b	82c8 <BZ2_decompress@@Base+0x600>
    8318:	mov	w10, #0x1a80                	// #6784
    831c:	movk	w10, #0x6, lsl #16
    8320:	mul	w1, w9, w10
    8324:	mov	w2, #0x1                   	// #1
    8328:	blr	x8
    832c:	str	x0, [x21, #3152]
    8330:	mov	w6, w25
    8334:	mov	w3, w23
    8338:	ldp	w25, w4, [x29, #-60]
    833c:	ldp	w5, w1, [sp, #32]
    8340:	mov	x7, x20
    8344:	ldp	x17, x23, [sp, #16]
    8348:	mov	w30, w26
    834c:	ldp	w14, w15, [x29, #-44]
    8350:	ldp	w20, w26, [x29, #-52]
    8354:	mov	x16, x19
    8358:	ldr	x19, [sp, #56]
    835c:	ldr	x18, [sp, #40]
    8360:	ldr	w2, [sp, #52]
    8364:	cbz	x0, 90ac <BZ2_decompress@@Base+0x13e4>
    8368:	ldr	w8, [x21, #36]
    836c:	mov	w9, #0xe                   	// #14
    8370:	str	w9, [x21, #8]
    8374:	cmp	w8, #0x8
    8378:	b.lt	9010 <BZ2_decompress@@Base+0x1348>  // b.tstop
    837c:	ldr	w10, [x21, #32]
    8380:	sub	w8, w8, #0x8
    8384:	lsr	w9, w10, w8
    8388:	and	w9, w9, #0xff
    838c:	cmp	w9, #0x17
    8390:	str	w8, [x21, #36]
    8394:	b.eq	87ac <BZ2_decompress@@Base+0xae4>  // b.none
    8398:	cmp	w9, #0x31
    839c:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    83a0:	mov	w9, #0xf                   	// #15
    83a4:	cmp	w8, #0x8
    83a8:	str	w9, [x21, #8]
    83ac:	b.lt	8f50 <BZ2_decompress@@Base+0x1288>  // b.tstop
    83b0:	ldr	w10, [x21, #32]
    83b4:	sub	w8, w8, #0x8
    83b8:	lsr	w9, w10, w8
    83bc:	and	w9, w9, #0xff
    83c0:	cmp	w9, #0x41
    83c4:	str	w8, [x21, #36]
    83c8:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    83cc:	mov	w9, #0x10                  	// #16
    83d0:	cmp	w8, #0x8
    83d4:	str	w9, [x21, #8]
    83d8:	b.lt	8e90 <BZ2_decompress@@Base+0x11c8>  // b.tstop
    83dc:	ldr	w10, [x21, #32]
    83e0:	sub	w8, w8, #0x8
    83e4:	lsr	w9, w10, w8
    83e8:	and	w9, w9, #0xff
    83ec:	cmp	w9, #0x59
    83f0:	str	w8, [x21, #36]
    83f4:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    83f8:	mov	w9, #0x11                  	// #17
    83fc:	cmp	w8, #0x8
    8400:	str	w9, [x21, #8]
    8404:	b.lt	8dd0 <BZ2_decompress@@Base+0x1108>  // b.tstop
    8408:	ldr	w10, [x21, #32]
    840c:	sub	w8, w8, #0x8
    8410:	lsr	w9, w10, w8
    8414:	and	w9, w9, #0xff
    8418:	cmp	w9, #0x26
    841c:	str	w8, [x21, #36]
    8420:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    8424:	mov	w9, #0x12                  	// #18
    8428:	cmp	w8, #0x8
    842c:	str	w9, [x21, #8]
    8430:	b.lt	8d10 <BZ2_decompress@@Base+0x1048>  // b.tstop
    8434:	ldr	w10, [x21, #32]
    8438:	sub	w8, w8, #0x8
    843c:	lsr	w9, w10, w8
    8440:	and	w9, w9, #0xff
    8444:	cmp	w9, #0x53
    8448:	str	w8, [x21, #36]
    844c:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    8450:	mov	w9, #0x13                  	// #19
    8454:	cmp	w8, #0x8
    8458:	str	w9, [x21, #8]
    845c:	b.lt	8c50 <BZ2_decompress@@Base+0xf88>  // b.tstop
    8460:	ldr	w10, [x21, #32]
    8464:	sub	w8, w8, #0x8
    8468:	lsr	w9, w10, w8
    846c:	and	w9, w9, #0xff
    8470:	cmp	w9, #0x59
    8474:	str	w8, [x21, #36]
    8478:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    847c:	ldp	w8, w9, [x21, #48]
    8480:	mov	w27, w2
    8484:	add	w2, w8, #0x1
    8488:	cmp	w9, #0x2
    848c:	str	w2, [x21, #48]
    8490:	b.ge	90b4 <BZ2_decompress@@Base+0x13ec>  // b.tcont
    8494:	mov	w2, w27
    8498:	str	wzr, [x21, #3176]
    849c:	ldr	w8, [x21, #36]
    84a0:	mov	w9, #0x14                  	// #20
    84a4:	str	w9, [x21, #8]
    84a8:	cmp	w8, #0x8
    84ac:	b.lt	8b90 <BZ2_decompress@@Base+0xec8>  // b.tstop
    84b0:	ldr	w9, [x21, #32]
    84b4:	ldr	w10, [x21, #3176]
    84b8:	sub	w8, w8, #0x8
    84bc:	lsr	w9, w9, w8
    84c0:	str	w8, [x21, #36]
    84c4:	bfi	w9, w10, #8, #24
    84c8:	str	w9, [x21, #3176]
    84cc:	mov	w9, #0x15                  	// #21
    84d0:	cmp	w8, #0x8
    84d4:	str	w9, [x21, #8]
    84d8:	b.lt	8ad0 <BZ2_decompress@@Base+0xe08>  // b.tstop
    84dc:	ldr	w9, [x21, #32]
    84e0:	ldr	w10, [x21, #3176]
    84e4:	sub	w8, w8, #0x8
    84e8:	lsr	w9, w9, w8
    84ec:	str	w8, [x21, #36]
    84f0:	bfi	w9, w10, #8, #24
    84f4:	str	w9, [x21, #3176]
    84f8:	mov	w9, #0x16                  	// #22
    84fc:	cmp	w8, #0x8
    8500:	str	w9, [x21, #8]
    8504:	b.lt	89ac <BZ2_decompress@@Base+0xce4>  // b.tstop
    8508:	ldr	w9, [x21, #32]
    850c:	ldr	w10, [x21, #3176]
    8510:	sub	w8, w8, #0x8
    8514:	lsr	w9, w9, w8
    8518:	str	w8, [x21, #36]
    851c:	bfi	w9, w10, #8, #24
    8520:	str	w9, [x21, #3176]
    8524:	mov	w9, #0x17                  	// #23
    8528:	cmp	w8, #0x8
    852c:	str	w9, [x21, #8]
    8530:	b.lt	874c <BZ2_decompress@@Base+0xa84>  // b.tstop
    8534:	ldr	w9, [x21, #32]
    8538:	ldr	w10, [x21, #3176]
    853c:	sub	w8, w8, #0x8
    8540:	lsr	w9, w9, w8
    8544:	str	w8, [x21, #36]
    8548:	bfi	w9, w10, #8, #24
    854c:	str	w9, [x21, #3176]
    8550:	mov	w9, #0x18                  	// #24
    8554:	cmp	w8, #0x1
    8558:	str	w9, [x21, #8]
    855c:	b.lt	8a6c <BZ2_decompress@@Base+0xda4>  // b.tstop
    8560:	ldr	w10, [x21, #32]
    8564:	sub	w8, w8, #0x1
    8568:	lsr	w9, w10, w8
    856c:	and	w9, w9, #0x1
    8570:	str	w8, [x21, #36]
    8574:	strb	w9, [x21, #20]
    8578:	str	wzr, [x21, #56]
    857c:	mov	w9, #0x19                  	// #25
    8580:	cmp	w8, #0x8
    8584:	str	w9, [x21, #8]
    8588:	b.lt	86ec <BZ2_decompress@@Base+0xa24>  // b.tstop
    858c:	ldr	w9, [x21, #32]
    8590:	ldr	w10, [x21, #56]
    8594:	sub	w8, w8, #0x8
    8598:	lsr	w9, w9, w8
    859c:	str	w8, [x21, #36]
    85a0:	bfi	w9, w10, #8, #24
    85a4:	str	w9, [x21, #56]
    85a8:	mov	w9, #0x1a                  	// #26
    85ac:	cmp	w8, #0x8
    85b0:	str	w9, [x21, #8]
    85b4:	b.lt	868c <BZ2_decompress@@Base+0x9c4>  // b.tstop
    85b8:	ldr	w9, [x21, #32]
    85bc:	ldr	w10, [x21, #56]
    85c0:	sub	w8, w8, #0x8
    85c4:	lsr	w9, w9, w8
    85c8:	str	w8, [x21, #36]
    85cc:	bfi	w9, w10, #8, #24
    85d0:	str	w9, [x21, #56]
    85d4:	mov	w9, #0x1b                  	// #27
    85d8:	cmp	w8, #0x8
    85dc:	str	w9, [x21, #8]
    85e0:	b.lt	862c <BZ2_decompress@@Base+0x964>  // b.tstop
    85e4:	ldr	w10, [x21, #32]
    85e8:	ldr	w9, [x21, #56]
    85ec:	sub	w11, w8, #0x8
    85f0:	lsr	w8, w10, w11
    85f4:	str	w11, [x21, #36]
    85f8:	bfi	w8, w9, #8, #24
    85fc:	str	w8, [x21, #56]
    8600:	tbnz	w8, #31, 9414 <BZ2_decompress@@Base+0x174c>
    8604:	ldr	w9, [x21, #40]
    8608:	mov	w10, #0x86a0                	// #34464
    860c:	movk	w10, #0x1, lsl #16
    8610:	mul	w9, w9, w10
    8614:	mov	w10, #0xa                   	// #10
    8618:	orr	w9, w9, w10
    861c:	cmp	w8, w9
    8620:	b.gt	9414 <BZ2_decompress@@Base+0x174c>
    8624:	mov	w0, wzr
    8628:	b	9150 <BZ2_decompress@@Base+0x1488>
    862c:	ldr	x9, [x21]
    8630:	ldr	w10, [x9, #8]
    8634:	sub	w11, w10, #0x1
    8638:	b	8648 <BZ2_decompress@@Base+0x980>
    863c:	cmp	w8, #0x8
    8640:	sub	w11, w11, #0x1
    8644:	b.pl	85e8 <BZ2_decompress@@Base+0x920>  // b.nfrst
    8648:	cmn	w11, #0x1
    864c:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8650:	ldr	x12, [x9]
    8654:	ldr	w13, [x21, #32]
    8658:	add	w8, w8, #0x8
    865c:	ldrb	w10, [x12], #1
    8660:	bfi	w10, w13, #8, #24
    8664:	stp	w10, w8, [x21, #32]
    8668:	ldr	w13, [x9, #12]
    866c:	str	x12, [x9]
    8670:	adds	w12, w13, #0x1
    8674:	stp	w11, w12, [x9, #8]
    8678:	b.cc	863c <BZ2_decompress@@Base+0x974>  // b.lo, b.ul, b.last
    867c:	ldr	w12, [x9, #16]
    8680:	add	w12, w12, #0x1
    8684:	str	w12, [x9, #16]
    8688:	b	863c <BZ2_decompress@@Base+0x974>
    868c:	ldr	x10, [x21]
    8690:	ldr	w9, [x10, #8]
    8694:	sub	w11, w9, #0x1
    8698:	b	86a8 <BZ2_decompress@@Base+0x9e0>
    869c:	cmp	w8, #0x8
    86a0:	sub	w11, w11, #0x1
    86a4:	b.pl	85bc <BZ2_decompress@@Base+0x8f4>  // b.nfrst
    86a8:	cmn	w11, #0x1
    86ac:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    86b0:	ldr	x12, [x10]
    86b4:	ldr	w13, [x21, #32]
    86b8:	add	w8, w8, #0x8
    86bc:	ldrb	w9, [x12], #1
    86c0:	bfi	w9, w13, #8, #24
    86c4:	stp	w9, w8, [x21, #32]
    86c8:	ldr	w13, [x10, #12]
    86cc:	str	x12, [x10]
    86d0:	adds	w12, w13, #0x1
    86d4:	stp	w11, w12, [x10, #8]
    86d8:	b.cc	869c <BZ2_decompress@@Base+0x9d4>  // b.lo, b.ul, b.last
    86dc:	ldr	w12, [x10, #16]
    86e0:	add	w12, w12, #0x1
    86e4:	str	w12, [x10, #16]
    86e8:	b	869c <BZ2_decompress@@Base+0x9d4>
    86ec:	ldr	x10, [x21]
    86f0:	ldr	w9, [x10, #8]
    86f4:	sub	w11, w9, #0x1
    86f8:	b	8708 <BZ2_decompress@@Base+0xa40>
    86fc:	cmp	w8, #0x8
    8700:	sub	w11, w11, #0x1
    8704:	b.pl	8590 <BZ2_decompress@@Base+0x8c8>  // b.nfrst
    8708:	cmn	w11, #0x1
    870c:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8710:	ldr	x12, [x10]
    8714:	ldr	w13, [x21, #32]
    8718:	add	w8, w8, #0x8
    871c:	ldrb	w9, [x12], #1
    8720:	bfi	w9, w13, #8, #24
    8724:	stp	w9, w8, [x21, #32]
    8728:	ldr	w13, [x10, #12]
    872c:	str	x12, [x10]
    8730:	adds	w12, w13, #0x1
    8734:	stp	w11, w12, [x10, #8]
    8738:	b.cc	86fc <BZ2_decompress@@Base+0xa34>  // b.lo, b.ul, b.last
    873c:	ldr	w12, [x10, #16]
    8740:	add	w12, w12, #0x1
    8744:	str	w12, [x10, #16]
    8748:	b	86fc <BZ2_decompress@@Base+0xa34>
    874c:	ldr	x10, [x21]
    8750:	ldr	w9, [x10, #8]
    8754:	sub	w11, w9, #0x1
    8758:	b	8768 <BZ2_decompress@@Base+0xaa0>
    875c:	cmp	w8, #0x8
    8760:	sub	w11, w11, #0x1
    8764:	b.pl	8538 <BZ2_decompress@@Base+0x870>  // b.nfrst
    8768:	cmn	w11, #0x1
    876c:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8770:	ldr	x12, [x10]
    8774:	ldr	w13, [x21, #32]
    8778:	add	w8, w8, #0x8
    877c:	ldrb	w9, [x12], #1
    8780:	bfi	w9, w13, #8, #24
    8784:	stp	w9, w8, [x21, #32]
    8788:	ldr	w13, [x10, #12]
    878c:	str	x12, [x10]
    8790:	adds	w12, w13, #0x1
    8794:	stp	w11, w12, [x10, #8]
    8798:	b.cc	875c <BZ2_decompress@@Base+0xa94>  // b.lo, b.ul, b.last
    879c:	ldr	w12, [x10, #16]
    87a0:	add	w12, w12, #0x1
    87a4:	str	w12, [x10, #16]
    87a8:	b	875c <BZ2_decompress@@Base+0xa94>
    87ac:	mov	w9, #0x2a                  	// #42
    87b0:	cmp	w8, #0x8
    87b4:	str	w9, [x21, #8]
    87b8:	b.lt	8fb0 <BZ2_decompress@@Base+0x12e8>  // b.tstop
    87bc:	ldr	w10, [x21, #32]
    87c0:	sub	w8, w8, #0x8
    87c4:	lsr	w9, w10, w8
    87c8:	and	w9, w9, #0xff
    87cc:	cmp	w9, #0x72
    87d0:	str	w8, [x21, #36]
    87d4:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    87d8:	mov	w9, #0x2b                  	// #43
    87dc:	cmp	w8, #0x8
    87e0:	str	w9, [x21, #8]
    87e4:	b.lt	8ef0 <BZ2_decompress@@Base+0x1228>  // b.tstop
    87e8:	ldr	w10, [x21, #32]
    87ec:	sub	w8, w8, #0x8
    87f0:	lsr	w9, w10, w8
    87f4:	and	w9, w9, #0xff
    87f8:	cmp	w9, #0x45
    87fc:	str	w8, [x21, #36]
    8800:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    8804:	mov	w9, #0x2c                  	// #44
    8808:	cmp	w8, #0x8
    880c:	str	w9, [x21, #8]
    8810:	b.lt	8e30 <BZ2_decompress@@Base+0x1168>  // b.tstop
    8814:	ldr	w10, [x21, #32]
    8818:	sub	w8, w8, #0x8
    881c:	lsr	w9, w10, w8
    8820:	and	w9, w9, #0xff
    8824:	cmp	w9, #0x38
    8828:	str	w8, [x21, #36]
    882c:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    8830:	mov	w9, #0x2d                  	// #45
    8834:	cmp	w8, #0x8
    8838:	str	w9, [x21, #8]
    883c:	b.lt	8d70 <BZ2_decompress@@Base+0x10a8>  // b.tstop
    8840:	ldr	w10, [x21, #32]
    8844:	sub	w8, w8, #0x8
    8848:	lsr	w9, w10, w8
    884c:	and	w9, w9, #0xff
    8850:	cmp	w9, #0x50
    8854:	str	w8, [x21, #36]
    8858:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    885c:	mov	w9, #0x2e                  	// #46
    8860:	cmp	w8, #0x8
    8864:	str	w9, [x21, #8]
    8868:	b.lt	8cb0 <BZ2_decompress@@Base+0xfe8>  // b.tstop
    886c:	ldr	w10, [x21, #32]
    8870:	sub	w8, w8, #0x8
    8874:	lsr	w9, w10, w8
    8878:	and	w9, w9, #0xff
    887c:	cmp	w9, #0x90
    8880:	str	w8, [x21, #36]
    8884:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    8888:	str	wzr, [x21, #3180]
    888c:	mov	w9, #0x2f                  	// #47
    8890:	cmp	w8, #0x8
    8894:	str	w9, [x21, #8]
    8898:	b.lt	8bf0 <BZ2_decompress@@Base+0xf28>  // b.tstop
    889c:	ldr	w9, [x21, #32]
    88a0:	ldr	w10, [x21, #3180]
    88a4:	sub	w8, w8, #0x8
    88a8:	lsr	w9, w9, w8
    88ac:	str	w8, [x21, #36]
    88b0:	bfi	w9, w10, #8, #24
    88b4:	str	w9, [x21, #3180]
    88b8:	mov	w9, #0x30                  	// #48
    88bc:	cmp	w8, #0x8
    88c0:	str	w9, [x21, #8]
    88c4:	b.lt	8b30 <BZ2_decompress@@Base+0xe68>  // b.tstop
    88c8:	ldr	w9, [x21, #32]
    88cc:	ldr	w10, [x21, #3180]
    88d0:	sub	w8, w8, #0x8
    88d4:	lsr	w9, w9, w8
    88d8:	str	w8, [x21, #36]
    88dc:	bfi	w9, w10, #8, #24
    88e0:	str	w9, [x21, #3180]
    88e4:	mov	w9, #0x31                  	// #49
    88e8:	cmp	w8, #0x8
    88ec:	str	w9, [x21, #8]
    88f0:	b.lt	8a0c <BZ2_decompress@@Base+0xd44>  // b.tstop
    88f4:	ldr	w9, [x21, #32]
    88f8:	ldr	w10, [x21, #3180]
    88fc:	sub	w8, w8, #0x8
    8900:	lsr	w9, w9, w8
    8904:	str	w8, [x21, #36]
    8908:	bfi	w9, w10, #8, #24
    890c:	str	w9, [x21, #3180]
    8910:	mov	w9, #0x32                  	// #50
    8914:	cmp	w8, #0x8
    8918:	str	w9, [x21, #8]
    891c:	b.lt	894c <BZ2_decompress@@Base+0xc84>  // b.tstop
    8920:	ldr	w9, [x21, #32]
    8924:	ldr	w10, [x21, #3180]
    8928:	sub	w8, w8, #0x8
    892c:	lsr	w9, w9, w8
    8930:	mov	w11, #0x1                   	// #1
    8934:	bfi	w9, w10, #8, #24
    8938:	str	w8, [x21, #36]
    893c:	str	w11, [x21, #8]
    8940:	str	w9, [x21, #3180]
    8944:	mov	w0, #0x4                   	// #4
    8948:	b	9418 <BZ2_decompress@@Base+0x1750>
    894c:	ldr	x10, [x21]
    8950:	ldr	w9, [x10, #8]
    8954:	sub	w11, w9, #0x1
    8958:	b	8968 <BZ2_decompress@@Base+0xca0>
    895c:	cmp	w8, #0x8
    8960:	sub	w11, w11, #0x1
    8964:	b.pl	8924 <BZ2_decompress@@Base+0xc5c>  // b.nfrst
    8968:	cmn	w11, #0x1
    896c:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8970:	ldr	x12, [x10]
    8974:	ldr	w13, [x21, #32]
    8978:	add	w8, w8, #0x8
    897c:	ldrb	w9, [x12], #1
    8980:	bfi	w9, w13, #8, #24
    8984:	stp	w9, w8, [x21, #32]
    8988:	ldr	w13, [x10, #12]
    898c:	str	x12, [x10]
    8990:	adds	w12, w13, #0x1
    8994:	stp	w11, w12, [x10, #8]
    8998:	b.cc	895c <BZ2_decompress@@Base+0xc94>  // b.lo, b.ul, b.last
    899c:	ldr	w12, [x10, #16]
    89a0:	add	w12, w12, #0x1
    89a4:	str	w12, [x10, #16]
    89a8:	b	895c <BZ2_decompress@@Base+0xc94>
    89ac:	ldr	x10, [x21]
    89b0:	ldr	w9, [x10, #8]
    89b4:	sub	w11, w9, #0x1
    89b8:	b	89c8 <BZ2_decompress@@Base+0xd00>
    89bc:	cmp	w8, #0x8
    89c0:	sub	w11, w11, #0x1
    89c4:	b.pl	850c <BZ2_decompress@@Base+0x844>  // b.nfrst
    89c8:	cmn	w11, #0x1
    89cc:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    89d0:	ldr	x12, [x10]
    89d4:	ldr	w13, [x21, #32]
    89d8:	add	w8, w8, #0x8
    89dc:	ldrb	w9, [x12], #1
    89e0:	bfi	w9, w13, #8, #24
    89e4:	stp	w9, w8, [x21, #32]
    89e8:	ldr	w13, [x10, #12]
    89ec:	str	x12, [x10]
    89f0:	adds	w12, w13, #0x1
    89f4:	stp	w11, w12, [x10, #8]
    89f8:	b.cc	89bc <BZ2_decompress@@Base+0xcf4>  // b.lo, b.ul, b.last
    89fc:	ldr	w12, [x10, #16]
    8a00:	add	w12, w12, #0x1
    8a04:	str	w12, [x10, #16]
    8a08:	b	89bc <BZ2_decompress@@Base+0xcf4>
    8a0c:	ldr	x10, [x21]
    8a10:	ldr	w9, [x10, #8]
    8a14:	sub	w11, w9, #0x1
    8a18:	b	8a28 <BZ2_decompress@@Base+0xd60>
    8a1c:	cmp	w8, #0x8
    8a20:	sub	w11, w11, #0x1
    8a24:	b.pl	88f8 <BZ2_decompress@@Base+0xc30>  // b.nfrst
    8a28:	cmn	w11, #0x1
    8a2c:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8a30:	ldr	x12, [x10]
    8a34:	ldr	w13, [x21, #32]
    8a38:	add	w8, w8, #0x8
    8a3c:	ldrb	w9, [x12], #1
    8a40:	bfi	w9, w13, #8, #24
    8a44:	stp	w9, w8, [x21, #32]
    8a48:	ldr	w13, [x10, #12]
    8a4c:	str	x12, [x10]
    8a50:	adds	w12, w13, #0x1
    8a54:	stp	w11, w12, [x10, #8]
    8a58:	b.cc	8a1c <BZ2_decompress@@Base+0xd54>  // b.lo, b.ul, b.last
    8a5c:	ldr	w12, [x10, #16]
    8a60:	add	w12, w12, #0x1
    8a64:	str	w12, [x10, #16]
    8a68:	b	8a1c <BZ2_decompress@@Base+0xd54>
    8a6c:	ldr	x9, [x21]
    8a70:	ldr	w10, [x9, #8]
    8a74:	sub	w11, w10, #0x1
    8a78:	b	8a8c <BZ2_decompress@@Base+0xdc4>
    8a7c:	sub	w12, w8, #0x8
    8a80:	cmn	w12, #0x8
    8a84:	sub	w11, w11, #0x1
    8a88:	b.gt	8564 <BZ2_decompress@@Base+0x89c>
    8a8c:	cmn	w11, #0x1
    8a90:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8a94:	ldr	x12, [x9]
    8a98:	ldr	w13, [x21, #32]
    8a9c:	add	w8, w8, #0x8
    8aa0:	ldrb	w10, [x12], #1
    8aa4:	bfi	w10, w13, #8, #24
    8aa8:	stp	w10, w8, [x21, #32]
    8aac:	ldr	w13, [x9, #12]
    8ab0:	str	x12, [x9]
    8ab4:	adds	w12, w13, #0x1
    8ab8:	stp	w11, w12, [x9, #8]
    8abc:	b.cc	8a7c <BZ2_decompress@@Base+0xdb4>  // b.lo, b.ul, b.last
    8ac0:	ldr	w12, [x9, #16]
    8ac4:	add	w12, w12, #0x1
    8ac8:	str	w12, [x9, #16]
    8acc:	b	8a7c <BZ2_decompress@@Base+0xdb4>
    8ad0:	ldr	x10, [x21]
    8ad4:	ldr	w9, [x10, #8]
    8ad8:	sub	w11, w9, #0x1
    8adc:	b	8aec <BZ2_decompress@@Base+0xe24>
    8ae0:	cmp	w8, #0x8
    8ae4:	sub	w11, w11, #0x1
    8ae8:	b.pl	84e0 <BZ2_decompress@@Base+0x818>  // b.nfrst
    8aec:	cmn	w11, #0x1
    8af0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8af4:	ldr	x12, [x10]
    8af8:	ldr	w13, [x21, #32]
    8afc:	add	w8, w8, #0x8
    8b00:	ldrb	w9, [x12], #1
    8b04:	bfi	w9, w13, #8, #24
    8b08:	stp	w9, w8, [x21, #32]
    8b0c:	ldr	w13, [x10, #12]
    8b10:	str	x12, [x10]
    8b14:	adds	w12, w13, #0x1
    8b18:	stp	w11, w12, [x10, #8]
    8b1c:	b.cc	8ae0 <BZ2_decompress@@Base+0xe18>  // b.lo, b.ul, b.last
    8b20:	ldr	w12, [x10, #16]
    8b24:	add	w12, w12, #0x1
    8b28:	str	w12, [x10, #16]
    8b2c:	b	8ae0 <BZ2_decompress@@Base+0xe18>
    8b30:	ldr	x10, [x21]
    8b34:	ldr	w9, [x10, #8]
    8b38:	sub	w11, w9, #0x1
    8b3c:	b	8b4c <BZ2_decompress@@Base+0xe84>
    8b40:	cmp	w8, #0x8
    8b44:	sub	w11, w11, #0x1
    8b48:	b.pl	88cc <BZ2_decompress@@Base+0xc04>  // b.nfrst
    8b4c:	cmn	w11, #0x1
    8b50:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8b54:	ldr	x12, [x10]
    8b58:	ldr	w13, [x21, #32]
    8b5c:	add	w8, w8, #0x8
    8b60:	ldrb	w9, [x12], #1
    8b64:	bfi	w9, w13, #8, #24
    8b68:	stp	w9, w8, [x21, #32]
    8b6c:	ldr	w13, [x10, #12]
    8b70:	str	x12, [x10]
    8b74:	adds	w12, w13, #0x1
    8b78:	stp	w11, w12, [x10, #8]
    8b7c:	b.cc	8b40 <BZ2_decompress@@Base+0xe78>  // b.lo, b.ul, b.last
    8b80:	ldr	w12, [x10, #16]
    8b84:	add	w12, w12, #0x1
    8b88:	str	w12, [x10, #16]
    8b8c:	b	8b40 <BZ2_decompress@@Base+0xe78>
    8b90:	ldr	x10, [x21]
    8b94:	ldr	w9, [x10, #8]
    8b98:	sub	w11, w9, #0x1
    8b9c:	b	8bac <BZ2_decompress@@Base+0xee4>
    8ba0:	cmp	w8, #0x8
    8ba4:	sub	w11, w11, #0x1
    8ba8:	b.pl	84b4 <BZ2_decompress@@Base+0x7ec>  // b.nfrst
    8bac:	cmn	w11, #0x1
    8bb0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8bb4:	ldr	x12, [x10]
    8bb8:	ldr	w13, [x21, #32]
    8bbc:	add	w8, w8, #0x8
    8bc0:	ldrb	w9, [x12], #1
    8bc4:	bfi	w9, w13, #8, #24
    8bc8:	stp	w9, w8, [x21, #32]
    8bcc:	ldr	w13, [x10, #12]
    8bd0:	str	x12, [x10]
    8bd4:	adds	w12, w13, #0x1
    8bd8:	stp	w11, w12, [x10, #8]
    8bdc:	b.cc	8ba0 <BZ2_decompress@@Base+0xed8>  // b.lo, b.ul, b.last
    8be0:	ldr	w12, [x10, #16]
    8be4:	add	w12, w12, #0x1
    8be8:	str	w12, [x10, #16]
    8bec:	b	8ba0 <BZ2_decompress@@Base+0xed8>
    8bf0:	ldr	x10, [x21]
    8bf4:	ldr	w9, [x10, #8]
    8bf8:	sub	w11, w9, #0x1
    8bfc:	b	8c0c <BZ2_decompress@@Base+0xf44>
    8c00:	cmp	w8, #0x8
    8c04:	sub	w11, w11, #0x1
    8c08:	b.pl	88a0 <BZ2_decompress@@Base+0xbd8>  // b.nfrst
    8c0c:	cmn	w11, #0x1
    8c10:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8c14:	ldr	x12, [x10]
    8c18:	ldr	w13, [x21, #32]
    8c1c:	add	w8, w8, #0x8
    8c20:	ldrb	w9, [x12], #1
    8c24:	bfi	w9, w13, #8, #24
    8c28:	stp	w9, w8, [x21, #32]
    8c2c:	ldr	w13, [x10, #12]
    8c30:	str	x12, [x10]
    8c34:	adds	w12, w13, #0x1
    8c38:	stp	w11, w12, [x10, #8]
    8c3c:	b.cc	8c00 <BZ2_decompress@@Base+0xf38>  // b.lo, b.ul, b.last
    8c40:	ldr	w12, [x10, #16]
    8c44:	add	w12, w12, #0x1
    8c48:	str	w12, [x10, #16]
    8c4c:	b	8c00 <BZ2_decompress@@Base+0xf38>
    8c50:	ldr	x9, [x21]
    8c54:	ldr	w10, [x9, #8]
    8c58:	sub	w11, w10, #0x1
    8c5c:	b	8c6c <BZ2_decompress@@Base+0xfa4>
    8c60:	cmp	w8, #0x8
    8c64:	sub	w11, w11, #0x1
    8c68:	b.pl	8464 <BZ2_decompress@@Base+0x79c>  // b.nfrst
    8c6c:	cmn	w11, #0x1
    8c70:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8c74:	ldr	x12, [x9]
    8c78:	ldr	w13, [x21, #32]
    8c7c:	add	w8, w8, #0x8
    8c80:	ldrb	w10, [x12], #1
    8c84:	bfi	w10, w13, #8, #24
    8c88:	stp	w10, w8, [x21, #32]
    8c8c:	ldr	w13, [x9, #12]
    8c90:	str	x12, [x9]
    8c94:	adds	w12, w13, #0x1
    8c98:	stp	w11, w12, [x9, #8]
    8c9c:	b.cc	8c60 <BZ2_decompress@@Base+0xf98>  // b.lo, b.ul, b.last
    8ca0:	ldr	w12, [x9, #16]
    8ca4:	add	w12, w12, #0x1
    8ca8:	str	w12, [x9, #16]
    8cac:	b	8c60 <BZ2_decompress@@Base+0xf98>
    8cb0:	ldr	x9, [x21]
    8cb4:	ldr	w10, [x9, #8]
    8cb8:	sub	w11, w10, #0x1
    8cbc:	b	8ccc <BZ2_decompress@@Base+0x1004>
    8cc0:	cmp	w8, #0x8
    8cc4:	sub	w11, w11, #0x1
    8cc8:	b.pl	8870 <BZ2_decompress@@Base+0xba8>  // b.nfrst
    8ccc:	cmn	w11, #0x1
    8cd0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8cd4:	ldr	x12, [x9]
    8cd8:	ldr	w13, [x21, #32]
    8cdc:	add	w8, w8, #0x8
    8ce0:	ldrb	w10, [x12], #1
    8ce4:	bfi	w10, w13, #8, #24
    8ce8:	stp	w10, w8, [x21, #32]
    8cec:	ldr	w13, [x9, #12]
    8cf0:	str	x12, [x9]
    8cf4:	adds	w12, w13, #0x1
    8cf8:	stp	w11, w12, [x9, #8]
    8cfc:	b.cc	8cc0 <BZ2_decompress@@Base+0xff8>  // b.lo, b.ul, b.last
    8d00:	ldr	w12, [x9, #16]
    8d04:	add	w12, w12, #0x1
    8d08:	str	w12, [x9, #16]
    8d0c:	b	8cc0 <BZ2_decompress@@Base+0xff8>
    8d10:	ldr	x9, [x21]
    8d14:	ldr	w10, [x9, #8]
    8d18:	sub	w11, w10, #0x1
    8d1c:	b	8d2c <BZ2_decompress@@Base+0x1064>
    8d20:	cmp	w8, #0x8
    8d24:	sub	w11, w11, #0x1
    8d28:	b.pl	8438 <BZ2_decompress@@Base+0x770>  // b.nfrst
    8d2c:	cmn	w11, #0x1
    8d30:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8d34:	ldr	x12, [x9]
    8d38:	ldr	w13, [x21, #32]
    8d3c:	add	w8, w8, #0x8
    8d40:	ldrb	w10, [x12], #1
    8d44:	bfi	w10, w13, #8, #24
    8d48:	stp	w10, w8, [x21, #32]
    8d4c:	ldr	w13, [x9, #12]
    8d50:	str	x12, [x9]
    8d54:	adds	w12, w13, #0x1
    8d58:	stp	w11, w12, [x9, #8]
    8d5c:	b.cc	8d20 <BZ2_decompress@@Base+0x1058>  // b.lo, b.ul, b.last
    8d60:	ldr	w12, [x9, #16]
    8d64:	add	w12, w12, #0x1
    8d68:	str	w12, [x9, #16]
    8d6c:	b	8d20 <BZ2_decompress@@Base+0x1058>
    8d70:	ldr	x9, [x21]
    8d74:	ldr	w10, [x9, #8]
    8d78:	sub	w11, w10, #0x1
    8d7c:	b	8d8c <BZ2_decompress@@Base+0x10c4>
    8d80:	cmp	w8, #0x8
    8d84:	sub	w11, w11, #0x1
    8d88:	b.pl	8844 <BZ2_decompress@@Base+0xb7c>  // b.nfrst
    8d8c:	cmn	w11, #0x1
    8d90:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8d94:	ldr	x12, [x9]
    8d98:	ldr	w13, [x21, #32]
    8d9c:	add	w8, w8, #0x8
    8da0:	ldrb	w10, [x12], #1
    8da4:	bfi	w10, w13, #8, #24
    8da8:	stp	w10, w8, [x21, #32]
    8dac:	ldr	w13, [x9, #12]
    8db0:	str	x12, [x9]
    8db4:	adds	w12, w13, #0x1
    8db8:	stp	w11, w12, [x9, #8]
    8dbc:	b.cc	8d80 <BZ2_decompress@@Base+0x10b8>  // b.lo, b.ul, b.last
    8dc0:	ldr	w12, [x9, #16]
    8dc4:	add	w12, w12, #0x1
    8dc8:	str	w12, [x9, #16]
    8dcc:	b	8d80 <BZ2_decompress@@Base+0x10b8>
    8dd0:	ldr	x9, [x21]
    8dd4:	ldr	w10, [x9, #8]
    8dd8:	sub	w11, w10, #0x1
    8ddc:	b	8dec <BZ2_decompress@@Base+0x1124>
    8de0:	cmp	w8, #0x8
    8de4:	sub	w11, w11, #0x1
    8de8:	b.pl	840c <BZ2_decompress@@Base+0x744>  // b.nfrst
    8dec:	cmn	w11, #0x1
    8df0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8df4:	ldr	x12, [x9]
    8df8:	ldr	w13, [x21, #32]
    8dfc:	add	w8, w8, #0x8
    8e00:	ldrb	w10, [x12], #1
    8e04:	bfi	w10, w13, #8, #24
    8e08:	stp	w10, w8, [x21, #32]
    8e0c:	ldr	w13, [x9, #12]
    8e10:	str	x12, [x9]
    8e14:	adds	w12, w13, #0x1
    8e18:	stp	w11, w12, [x9, #8]
    8e1c:	b.cc	8de0 <BZ2_decompress@@Base+0x1118>  // b.lo, b.ul, b.last
    8e20:	ldr	w12, [x9, #16]
    8e24:	add	w12, w12, #0x1
    8e28:	str	w12, [x9, #16]
    8e2c:	b	8de0 <BZ2_decompress@@Base+0x1118>
    8e30:	ldr	x9, [x21]
    8e34:	ldr	w10, [x9, #8]
    8e38:	sub	w11, w10, #0x1
    8e3c:	b	8e4c <BZ2_decompress@@Base+0x1184>
    8e40:	cmp	w8, #0x8
    8e44:	sub	w11, w11, #0x1
    8e48:	b.pl	8818 <BZ2_decompress@@Base+0xb50>  // b.nfrst
    8e4c:	cmn	w11, #0x1
    8e50:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8e54:	ldr	x12, [x9]
    8e58:	ldr	w13, [x21, #32]
    8e5c:	add	w8, w8, #0x8
    8e60:	ldrb	w10, [x12], #1
    8e64:	bfi	w10, w13, #8, #24
    8e68:	stp	w10, w8, [x21, #32]
    8e6c:	ldr	w13, [x9, #12]
    8e70:	str	x12, [x9]
    8e74:	adds	w12, w13, #0x1
    8e78:	stp	w11, w12, [x9, #8]
    8e7c:	b.cc	8e40 <BZ2_decompress@@Base+0x1178>  // b.lo, b.ul, b.last
    8e80:	ldr	w12, [x9, #16]
    8e84:	add	w12, w12, #0x1
    8e88:	str	w12, [x9, #16]
    8e8c:	b	8e40 <BZ2_decompress@@Base+0x1178>
    8e90:	ldr	x9, [x21]
    8e94:	ldr	w10, [x9, #8]
    8e98:	sub	w11, w10, #0x1
    8e9c:	b	8eac <BZ2_decompress@@Base+0x11e4>
    8ea0:	cmp	w8, #0x8
    8ea4:	sub	w11, w11, #0x1
    8ea8:	b.pl	83e0 <BZ2_decompress@@Base+0x718>  // b.nfrst
    8eac:	cmn	w11, #0x1
    8eb0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8eb4:	ldr	x12, [x9]
    8eb8:	ldr	w13, [x21, #32]
    8ebc:	add	w8, w8, #0x8
    8ec0:	ldrb	w10, [x12], #1
    8ec4:	bfi	w10, w13, #8, #24
    8ec8:	stp	w10, w8, [x21, #32]
    8ecc:	ldr	w13, [x9, #12]
    8ed0:	str	x12, [x9]
    8ed4:	adds	w12, w13, #0x1
    8ed8:	stp	w11, w12, [x9, #8]
    8edc:	b.cc	8ea0 <BZ2_decompress@@Base+0x11d8>  // b.lo, b.ul, b.last
    8ee0:	ldr	w12, [x9, #16]
    8ee4:	add	w12, w12, #0x1
    8ee8:	str	w12, [x9, #16]
    8eec:	b	8ea0 <BZ2_decompress@@Base+0x11d8>
    8ef0:	ldr	x9, [x21]
    8ef4:	ldr	w10, [x9, #8]
    8ef8:	sub	w11, w10, #0x1
    8efc:	b	8f0c <BZ2_decompress@@Base+0x1244>
    8f00:	cmp	w8, #0x8
    8f04:	sub	w11, w11, #0x1
    8f08:	b.pl	87ec <BZ2_decompress@@Base+0xb24>  // b.nfrst
    8f0c:	cmn	w11, #0x1
    8f10:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8f14:	ldr	x12, [x9]
    8f18:	ldr	w13, [x21, #32]
    8f1c:	add	w8, w8, #0x8
    8f20:	ldrb	w10, [x12], #1
    8f24:	bfi	w10, w13, #8, #24
    8f28:	stp	w10, w8, [x21, #32]
    8f2c:	ldr	w13, [x9, #12]
    8f30:	str	x12, [x9]
    8f34:	adds	w12, w13, #0x1
    8f38:	stp	w11, w12, [x9, #8]
    8f3c:	b.cc	8f00 <BZ2_decompress@@Base+0x1238>  // b.lo, b.ul, b.last
    8f40:	ldr	w12, [x9, #16]
    8f44:	add	w12, w12, #0x1
    8f48:	str	w12, [x9, #16]
    8f4c:	b	8f00 <BZ2_decompress@@Base+0x1238>
    8f50:	ldr	x9, [x21]
    8f54:	ldr	w10, [x9, #8]
    8f58:	sub	w11, w10, #0x1
    8f5c:	b	8f6c <BZ2_decompress@@Base+0x12a4>
    8f60:	cmp	w8, #0x8
    8f64:	sub	w11, w11, #0x1
    8f68:	b.pl	83b4 <BZ2_decompress@@Base+0x6ec>  // b.nfrst
    8f6c:	cmn	w11, #0x1
    8f70:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8f74:	ldr	x12, [x9]
    8f78:	ldr	w13, [x21, #32]
    8f7c:	add	w8, w8, #0x8
    8f80:	ldrb	w10, [x12], #1
    8f84:	bfi	w10, w13, #8, #24
    8f88:	stp	w10, w8, [x21, #32]
    8f8c:	ldr	w13, [x9, #12]
    8f90:	str	x12, [x9]
    8f94:	adds	w12, w13, #0x1
    8f98:	stp	w11, w12, [x9, #8]
    8f9c:	b.cc	8f60 <BZ2_decompress@@Base+0x1298>  // b.lo, b.ul, b.last
    8fa0:	ldr	w12, [x9, #16]
    8fa4:	add	w12, w12, #0x1
    8fa8:	str	w12, [x9, #16]
    8fac:	b	8f60 <BZ2_decompress@@Base+0x1298>
    8fb0:	ldr	x9, [x21]
    8fb4:	ldr	w10, [x9, #8]
    8fb8:	sub	w11, w10, #0x1
    8fbc:	b	8fcc <BZ2_decompress@@Base+0x1304>
    8fc0:	cmp	w8, #0x8
    8fc4:	sub	w11, w11, #0x1
    8fc8:	b.pl	87c0 <BZ2_decompress@@Base+0xaf8>  // b.nfrst
    8fcc:	cmn	w11, #0x1
    8fd0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    8fd4:	ldr	x12, [x9]
    8fd8:	ldr	w13, [x21, #32]
    8fdc:	add	w8, w8, #0x8
    8fe0:	ldrb	w10, [x12], #1
    8fe4:	bfi	w10, w13, #8, #24
    8fe8:	stp	w10, w8, [x21, #32]
    8fec:	ldr	w13, [x9, #12]
    8ff0:	str	x12, [x9]
    8ff4:	adds	w12, w13, #0x1
    8ff8:	stp	w11, w12, [x9, #8]
    8ffc:	b.cc	8fc0 <BZ2_decompress@@Base+0x12f8>  // b.lo, b.ul, b.last
    9000:	ldr	w12, [x9, #16]
    9004:	add	w12, w12, #0x1
    9008:	str	w12, [x9, #16]
    900c:	b	8fc0 <BZ2_decompress@@Base+0x12f8>
    9010:	ldr	x9, [x21]
    9014:	ldr	w10, [x9, #8]
    9018:	sub	w11, w10, #0x1
    901c:	b	902c <BZ2_decompress@@Base+0x1364>
    9020:	cmp	w8, #0x8
    9024:	sub	w11, w11, #0x1
    9028:	b.pl	8380 <BZ2_decompress@@Base+0x6b8>  // b.nfrst
    902c:	cmn	w11, #0x1
    9030:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    9034:	ldr	x12, [x9]
    9038:	ldr	w13, [x21, #32]
    903c:	add	w8, w8, #0x8
    9040:	ldrb	w10, [x12], #1
    9044:	bfi	w10, w13, #8, #24
    9048:	stp	w10, w8, [x21, #32]
    904c:	ldr	w13, [x9, #12]
    9050:	str	x12, [x9]
    9054:	adds	w12, w13, #0x1
    9058:	stp	w11, w12, [x9, #8]
    905c:	b.cc	9020 <BZ2_decompress@@Base+0x1358>  // b.lo, b.ul, b.last
    9060:	ldr	w12, [x9, #16]
    9064:	add	w12, w12, #0x1
    9068:	str	w12, [x9, #16]
    906c:	b	9020 <BZ2_decompress@@Base+0x1358>
    9070:	mov	w6, w25
    9074:	ldp	w15, w9, [x29, #-40]
    9078:	mov	w3, w23
    907c:	ldp	w25, w4, [x29, #-60]
    9080:	ldp	w5, w1, [sp, #32]
    9084:	mov	x7, x20
    9088:	ldp	x17, x23, [sp, #16]
    908c:	mov	w30, w26
    9090:	ldp	w20, w26, [x29, #-52]
    9094:	mov	x16, x19
    9098:	ldr	x19, [sp, #56]
    909c:	ldr	x18, [sp, #40]
    90a0:	ldr	w2, [sp, #52]
    90a4:	ldur	w14, [x29, #-44]
    90a8:	b	941c <BZ2_decompress@@Base+0x1754>
    90ac:	mov	w0, #0xfffffffd            	// #-3
    90b0:	b	9418 <BZ2_decompress@@Base+0x1750>
    90b4:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    90b8:	ldr	x8, [x8, #4016]
    90bc:	str	w1, [sp, #36]
    90c0:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    90c4:	add	x1, x1, #0xbda
    90c8:	ldr	x0, [x8]
    90cc:	str	w24, [sp, #52]
    90d0:	stur	w14, [x29, #-44]
    90d4:	str	x28, [sp, #40]
    90d8:	stp	w25, w4, [x29, #-60]
    90dc:	mov	w25, w6
    90e0:	str	w5, [sp, #32]
    90e4:	stur	w15, [x29, #-40]
    90e8:	stp	w20, w26, [x29, #-52]
    90ec:	str	x19, [sp, #56]
    90f0:	str	x7, [sp, #8]
    90f4:	mov	x24, x23
    90f8:	mov	w23, w3
    90fc:	mov	w28, w30
    9100:	mov	x26, x16
    9104:	mov	x20, x17
    9108:	mov	x19, x18
    910c:	bl	1610 <fprintf@plt>
    9110:	ldp	w5, w1, [sp, #32]
    9114:	mov	x18, x19
    9118:	mov	x17, x20
    911c:	mov	x16, x26
    9120:	mov	w30, w28
    9124:	mov	w3, w23
    9128:	mov	x23, x24
    912c:	ldr	x7, [sp, #8]
    9130:	ldr	x19, [sp, #56]
    9134:	ldp	w20, w26, [x29, #-52]
    9138:	ldp	w14, w15, [x29, #-44]
    913c:	mov	w6, w25
    9140:	ldp	w25, w4, [x29, #-60]
    9144:	ldr	x28, [sp, #40]
    9148:	ldr	w24, [sp, #52]
    914c:	b	8494 <BZ2_decompress@@Base+0x7cc>
    9150:	cmp	w0, #0x10
    9154:	stur	x0, [x29, #-16]
    9158:	b.ge	9200 <BZ2_decompress@@Base+0x1538>  // b.tcont
    915c:	ldr	w8, [x21, #36]
    9160:	mov	w9, #0x1c                  	// #28
    9164:	str	w9, [x21, #8]
    9168:	cmp	w8, #0x1
    916c:	b.lt	9198 <BZ2_decompress@@Base+0x14d0>  // b.tstop
    9170:	ldr	w9, [x21, #32]
    9174:	ldur	x0, [x29, #-16]
    9178:	sub	w8, w8, #0x1
    917c:	str	w8, [x21, #36]
    9180:	lsr	w8, w9, w8
    9184:	add	x10, x21, w0, sxtw
    9188:	and	w8, w8, #0x1
    918c:	strb	w8, [x10, #3452]
    9190:	add	w0, w0, #0x1
    9194:	b	9150 <BZ2_decompress@@Base+0x1488>
    9198:	ldr	x10, [x21]
    919c:	ldur	x0, [x29, #-16]
    91a0:	ldr	w9, [x10, #8]
    91a4:	sub	w11, w9, #0x1
    91a8:	b	91bc <BZ2_decompress@@Base+0x14f4>
    91ac:	sub	w12, w8, #0x8
    91b0:	cmn	w12, #0x8
    91b4:	sub	w11, w11, #0x1
    91b8:	b.gt	9178 <BZ2_decompress@@Base+0x14b0>
    91bc:	cmn	w11, #0x1
    91c0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    91c4:	ldr	x12, [x10]
    91c8:	ldr	w13, [x21, #32]
    91cc:	add	w8, w8, #0x8
    91d0:	ldrb	w9, [x12], #1
    91d4:	bfi	w9, w13, #8, #24
    91d8:	stp	w9, w8, [x21, #32]
    91dc:	ldr	w13, [x10, #12]
    91e0:	str	x12, [x10]
    91e4:	adds	w12, w13, #0x1
    91e8:	stp	w11, w12, [x10, #8]
    91ec:	b.cc	91ac <BZ2_decompress@@Base+0x14e4>  // b.lo, b.ul, b.last
    91f0:	ldr	w12, [x10, #16]
    91f4:	add	w12, w12, #0x1
    91f8:	str	w12, [x10, #16]
    91fc:	b	91ac <BZ2_decompress@@Base+0x14e4>
    9200:	add	x8, x21, #0xc7c
    9204:	movi	v0.2d, #0x0
    9208:	mov	w12, wzr
    920c:	stp	q0, q0, [x8, #224]
    9210:	stp	q0, q0, [x8, #192]
    9214:	stp	q0, q0, [x8, #160]
    9218:	stp	q0, q0, [x8, #128]
    921c:	stp	q0, q0, [x8, #96]
    9220:	stp	q0, q0, [x8, #64]
    9224:	stp	q0, q0, [x8, #32]
    9228:	stp	q0, q0, [x8]
    922c:	b	9488 <BZ2_decompress@@Base+0x17c0>
    9230:	mov	w9, #0x25                  	// #37
    9234:	cmp	w8, #0x1
    9238:	str	w9, [x21, #8]
    923c:	b.lt	927c <BZ2_decompress@@Base+0x15b4>  // b.tstop
    9240:	ldr	w10, [x21, #32]
    9244:	sub	w8, w8, #0x1
    9248:	lsr	w9, w10, w8
    924c:	and	w14, w9, #0x1
    9250:	bfi	w9, w30, #1, #31
    9254:	str	w8, [x21, #36]
    9258:	mov	w30, w9
    925c:	cmp	w16, #0x14
    9260:	b.gt	9414 <BZ2_decompress@@Base+0x174c>
    9264:	ldur	x9, [x29, #-24]
    9268:	ldr	w9, [x9, w16, sxtw #2]
    926c:	cmp	w30, w9
    9270:	b.le	9e9c <BZ2_decompress@@Base+0x21d4>
    9274:	add	w16, w16, #0x1
    9278:	b	9230 <BZ2_decompress@@Base+0x1568>
    927c:	ldr	x9, [x21]
    9280:	ldr	w10, [x9, #8]
    9284:	sub	w11, w10, #0x1
    9288:	b	929c <BZ2_decompress@@Base+0x15d4>
    928c:	sub	w12, w8, #0x8
    9290:	cmn	w12, #0x8
    9294:	sub	w11, w11, #0x1
    9298:	b.gt	9244 <BZ2_decompress@@Base+0x157c>
    929c:	cmn	w11, #0x1
    92a0:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    92a4:	ldr	x12, [x9]
    92a8:	ldr	w13, [x21, #32]
    92ac:	add	w8, w8, #0x8
    92b0:	ldrb	w10, [x12], #1
    92b4:	bfi	w10, w13, #8, #24
    92b8:	stp	w10, w8, [x21, #32]
    92bc:	ldr	w13, [x9, #12]
    92c0:	str	x12, [x9]
    92c4:	adds	w12, w13, #0x1
    92c8:	stp	w11, w12, [x9, #8]
    92cc:	b.cc	928c <BZ2_decompress@@Base+0x15c4>  // b.lo, b.ul, b.last
    92d0:	ldr	w12, [x9, #16]
    92d4:	add	w12, w12, #0x1
    92d8:	str	w12, [x9, #16]
    92dc:	b	928c <BZ2_decompress@@Base+0x15c4>
    92e0:	mov	w9, #0x27                  	// #39
    92e4:	cmp	w8, #0x1
    92e8:	str	w9, [x21, #8]
    92ec:	b.lt	9310 <BZ2_decompress@@Base+0x1648>  // b.tstop
    92f0:	ldr	w10, [x21, #32]
    92f4:	sub	w8, w8, #0x1
    92f8:	lsr	w9, w10, w8
    92fc:	and	w14, w9, #0x1
    9300:	bfi	w9, w30, #1, #31
    9304:	str	w8, [x21, #36]
    9308:	mov	w30, w9
    930c:	b	a960 <BZ2_decompress@@Base+0x2c98>
    9310:	ldr	x9, [x21]
    9314:	ldr	w10, [x9, #8]
    9318:	sub	w11, w10, #0x1
    931c:	b	9330 <BZ2_decompress@@Base+0x1668>
    9320:	sub	w12, w8, #0x8
    9324:	cmn	w12, #0x8
    9328:	sub	w11, w11, #0x1
    932c:	b.gt	92f4 <BZ2_decompress@@Base+0x162c>
    9330:	cmn	w11, #0x1
    9334:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    9338:	ldr	x12, [x9]
    933c:	ldr	w13, [x21, #32]
    9340:	add	w8, w8, #0x8
    9344:	ldrb	w10, [x12], #1
    9348:	bfi	w10, w13, #8, #24
    934c:	stp	w10, w8, [x21, #32]
    9350:	ldr	w13, [x9, #12]
    9354:	str	x12, [x9]
    9358:	adds	w12, w13, #0x1
    935c:	stp	w11, w12, [x9, #8]
    9360:	b.cc	9320 <BZ2_decompress@@Base+0x1658>  // b.lo, b.ul, b.last
    9364:	ldr	w12, [x9, #16]
    9368:	add	w12, w12, #0x1
    936c:	str	w12, [x9, #16]
    9370:	b	9320 <BZ2_decompress@@Base+0x1658>
    9374:	mov	w9, #0x29                  	// #41
    9378:	cmp	w8, #0x1
    937c:	str	w9, [x21, #8]
    9380:	b.lt	93a4 <BZ2_decompress@@Base+0x16dc>  // b.tstop
    9384:	ldr	w10, [x21, #32]
    9388:	sub	w8, w8, #0x1
    938c:	lsr	w9, w10, w8
    9390:	and	w14, w9, #0x1
    9394:	bfi	w9, w30, #1, #31
    9398:	str	w8, [x21, #36]
    939c:	mov	w30, w9
    93a0:	b	a288 <BZ2_decompress@@Base+0x25c0>
    93a4:	ldr	x9, [x21]
    93a8:	ldr	w10, [x9, #8]
    93ac:	sub	w11, w10, #0x1
    93b0:	b	93c4 <BZ2_decompress@@Base+0x16fc>
    93b4:	sub	w12, w8, #0x8
    93b8:	cmn	w12, #0x8
    93bc:	sub	w11, w11, #0x1
    93c0:	b.gt	9388 <BZ2_decompress@@Base+0x16c0>
    93c4:	cmn	w11, #0x1
    93c8:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    93cc:	ldr	x12, [x9]
    93d0:	ldr	w13, [x21, #32]
    93d4:	add	w8, w8, #0x8
    93d8:	ldrb	w10, [x12], #1
    93dc:	bfi	w10, w13, #8, #24
    93e0:	stp	w10, w8, [x21, #32]
    93e4:	ldr	w13, [x9, #12]
    93e8:	str	x12, [x9]
    93ec:	adds	w12, w13, #0x1
    93f0:	stp	w11, w12, [x9, #8]
    93f4:	b.cc	93b4 <BZ2_decompress@@Base+0x16ec>  // b.lo, b.ul, b.last
    93f8:	ldr	w12, [x9, #16]
    93fc:	add	w12, w12, #0x1
    9400:	str	w12, [x9, #16]
    9404:	b	93b4 <BZ2_decompress@@Base+0x16ec>
    9408:	mov	w0, wzr
    940c:	b	9418 <BZ2_decompress@@Base+0x1750>
    9410:	stur	x0, [x29, #-16]
    9414:	mov	w0, #0xfffffffc            	// #-4
    9418:	ldur	w9, [x29, #-36]
    941c:	ldur	x8, [x29, #-16]
    9420:	stp	w1, w6, [x22, #8]
    9424:	stp	w5, w15, [x22, #16]
    9428:	str	w24, [x22, #80]
    942c:	stp	w8, w20, [x22]
    9430:	ldur	w8, [x29, #-32]
    9434:	stp	w2, w4, [x22, #32]
    9438:	stp	w19, w17, [x22, #40]
    943c:	stp	w26, w3, [x22, #48]
    9440:	stp	w8, w18, [x22, #24]
    9444:	stp	w25, w9, [x22, #56]
    9448:	stp	w16, w30, [x22, #64]
    944c:	stp	w14, w28, [x22, #72]
    9450:	ldur	x8, [x29, #-24]
    9454:	stur	x23, [x22, #92]
    9458:	stur	x7, [x22, #100]
    945c:	stur	x8, [x22, #84]
    9460:	ldp	x20, x19, [sp, #208]
    9464:	ldp	x22, x21, [sp, #192]
    9468:	ldp	x24, x23, [sp, #176]
    946c:	ldp	x26, x25, [sp, #160]
    9470:	ldp	x28, x27, [sp, #144]
    9474:	ldp	x29, x30, [sp, #128]
    9478:	add	sp, sp, #0xe0
    947c:	ret
    9480:	ldur	x12, [x29, #-16]
    9484:	add	w12, w12, #0x1
    9488:	cmp	w12, #0xf
    948c:	stur	x12, [x29, #-16]
    9490:	b.gt	94b0 <BZ2_decompress@@Base+0x17e8>
    9494:	add	x8, x21, w12, sxtw
    9498:	ldrb	w8, [x8, #3452]
    949c:	cbz	w8, 9480 <BZ2_decompress@@Base+0x17b8>
    94a0:	mov	w20, wzr
    94a4:	cmp	w20, #0xf
    94a8:	b.gt	9480 <BZ2_decompress@@Base+0x17b8>
    94ac:	b	95a4 <BZ2_decompress@@Base+0x18dc>
    94b0:	mov	w9, wzr
    94b4:	mov	x8, xzr
    94b8:	add	x10, x21, #0xc7c
    94bc:	str	wzr, [x21, #3192]
    94c0:	b	94d0 <BZ2_decompress@@Base+0x1808>
    94c4:	add	x8, x8, #0x1
    94c8:	cmp	x8, #0x100
    94cc:	b.eq	94f0 <BZ2_decompress@@Base+0x1828>  // b.none
    94d0:	ldrb	w11, [x10, x8]
    94d4:	cbz	w11, 94c4 <BZ2_decompress@@Base+0x17fc>
    94d8:	add	x9, x21, w9, sxtw
    94dc:	strb	w8, [x9, #3468]
    94e0:	ldr	w9, [x21, #3192]
    94e4:	add	w9, w9, #0x1
    94e8:	str	w9, [x21, #3192]
    94ec:	b	94c4 <BZ2_decompress@@Base+0x17fc>
    94f0:	cbz	w9, 9414 <BZ2_decompress@@Base+0x174c>
    94f4:	add	w6, w9, #0x2
    94f8:	ldr	w8, [x21, #36]
    94fc:	mov	w9, #0x1e                  	// #30
    9500:	str	w9, [x21, #8]
    9504:	cmp	w8, #0x3
    9508:	b.lt	9540 <BZ2_decompress@@Base+0x1878>  // b.tstop
    950c:	ldr	w10, [x21, #32]
    9510:	sub	w8, w8, #0x3
    9514:	lsr	w9, w10, w8
    9518:	and	w5, w9, #0x7
    951c:	cmp	w5, #0x7
    9520:	str	w8, [x21, #36]
    9524:	b.hi	7fb8 <BZ2_decompress@@Base+0x2f0>  // b.pmore
    9528:	mov	w9, #0x1                   	// #1
    952c:	lsl	w9, w9, w5
    9530:	mov	w10, #0x83                  	// #131
    9534:	tst	w9, w10
    9538:	b.ne	9414 <BZ2_decompress@@Base+0x174c>  // b.any
    953c:	b	7fb8 <BZ2_decompress@@Base+0x2f0>
    9540:	ldr	x9, [x21]
    9544:	ldr	w10, [x9, #8]
    9548:	sub	w11, w10, #0x1
    954c:	b	9560 <BZ2_decompress@@Base+0x1898>
    9550:	sub	w12, w8, #0x8
    9554:	cmn	w12, #0x6
    9558:	sub	w11, w11, #0x1
    955c:	b.gt	9510 <BZ2_decompress@@Base+0x1848>
    9560:	cmn	w11, #0x1
    9564:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    9568:	ldr	x12, [x9]
    956c:	ldr	w13, [x21, #32]
    9570:	add	w8, w8, #0x8
    9574:	ldrb	w10, [x12], #1
    9578:	bfi	w10, w13, #8, #24
    957c:	stp	w10, w8, [x21, #32]
    9580:	ldr	w13, [x9, #12]
    9584:	str	x12, [x9]
    9588:	adds	w12, w13, #0x1
    958c:	stp	w11, w12, [x9, #8]
    9590:	b.cc	9550 <BZ2_decompress@@Base+0x1888>  // b.lo, b.ul, b.last
    9594:	ldr	w12, [x9, #16]
    9598:	add	w12, w12, #0x1
    959c:	str	w12, [x9, #16]
    95a0:	b	9550 <BZ2_decompress@@Base+0x1888>
    95a4:	ldr	w8, [x21, #36]
    95a8:	mov	w9, #0x1d                  	// #29
    95ac:	str	w9, [x21, #8]
    95b0:	cmp	w8, #0x1
    95b4:	b.lt	95f0 <BZ2_decompress@@Base+0x1928>  // b.tstop
    95b8:	ldr	w10, [x21, #32]
    95bc:	sub	w8, w8, #0x1
    95c0:	lsr	w9, w10, w8
    95c4:	str	w8, [x21, #36]
    95c8:	ldur	x8, [x29, #-16]
    95cc:	tbz	w9, #0, 95e0 <BZ2_decompress@@Base+0x1918>
    95d0:	add	w8, w20, w8, lsl #4
    95d4:	add	x8, x21, w8, sxtw
    95d8:	mov	w9, #0x1                   	// #1
    95dc:	strb	w9, [x8, #3196]
    95e0:	add	w20, w20, #0x1
    95e4:	cmp	w20, #0xf
    95e8:	b.gt	9480 <BZ2_decompress@@Base+0x17b8>
    95ec:	b	95a4 <BZ2_decompress@@Base+0x18dc>
    95f0:	ldr	x9, [x21]
    95f4:	ldr	w10, [x9, #8]
    95f8:	sub	w11, w10, #0x1
    95fc:	b	9610 <BZ2_decompress@@Base+0x1948>
    9600:	sub	w12, w8, #0x8
    9604:	cmn	w12, #0x8
    9608:	sub	w11, w11, #0x1
    960c:	b.gt	95bc <BZ2_decompress@@Base+0x18f4>
    9610:	cmn	w11, #0x1
    9614:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    9618:	ldr	x12, [x9]
    961c:	ldr	w13, [x21, #32]
    9620:	add	w8, w8, #0x8
    9624:	ldrb	w10, [x12], #1
    9628:	bfi	w10, w13, #8, #24
    962c:	stp	w10, w8, [x21, #32]
    9630:	ldr	w13, [x9, #12]
    9634:	str	x12, [x9]
    9638:	adds	w12, w13, #0x1
    963c:	stp	w11, w12, [x9, #8]
    9640:	b.cc	9600 <BZ2_decompress@@Base+0x1938>  // b.lo, b.ul, b.last
    9644:	ldr	w12, [x9, #16]
    9648:	add	w12, w12, #0x1
    964c:	str	w12, [x9, #16]
    9650:	b	9600 <BZ2_decompress@@Base+0x1938>
    9654:	cmp	w9, w15
    9658:	b.ge	9748 <BZ2_decompress@@Base+0x1a80>  // b.tcont
    965c:	mov	w20, wzr
    9660:	mov	w8, w9
    9664:	stur	x8, [x29, #-16]
    9668:	mov	w8, #0x20                  	// #32
    966c:	ldr	w9, [x21, #36]
    9670:	str	w8, [x21, #8]
    9674:	cmp	w9, #0x1
    9678:	b.lt	9688 <BZ2_decompress@@Base+0x19c0>  // b.tstop
    967c:	ldr	w11, [x21, #32]
    9680:	ldur	x0, [x29, #-16]
    9684:	b	96f8 <BZ2_decompress@@Base+0x1a30>
    9688:	ldr	x10, [x21]
    968c:	ldur	x0, [x29, #-16]
    9690:	mov	w27, w14
    9694:	ldr	w11, [x10, #8]
    9698:	sub	w12, w11, #0x1
    969c:	b	96b0 <BZ2_decompress@@Base+0x19e8>
    96a0:	sub	w13, w9, #0x8
    96a4:	cmn	w13, #0x8
    96a8:	sub	w12, w12, #0x1
    96ac:	b.gt	96f4 <BZ2_decompress@@Base+0x1a2c>
    96b0:	cmn	w12, #0x1
    96b4:	b.eq	971c <BZ2_decompress@@Base+0x1a54>  // b.none
    96b8:	ldr	x13, [x10]
    96bc:	ldr	w14, [x21, #32]
    96c0:	add	w9, w9, #0x8
    96c4:	ldrb	w11, [x13], #1
    96c8:	bfi	w11, w14, #8, #24
    96cc:	stp	w11, w9, [x21, #32]
    96d0:	ldr	w14, [x10, #12]
    96d4:	str	x13, [x10]
    96d8:	adds	w13, w14, #0x1
    96dc:	stp	w12, w13, [x10, #8]
    96e0:	b.cc	96a0 <BZ2_decompress@@Base+0x19d8>  // b.lo, b.ul, b.last
    96e4:	ldr	w13, [x10, #16]
    96e8:	add	w13, w13, #0x1
    96ec:	str	w13, [x10, #16]
    96f0:	b	96a0 <BZ2_decompress@@Base+0x19d8>
    96f4:	mov	w14, w27
    96f8:	sub	w9, w9, #0x1
    96fc:	lsr	w10, w11, w9
    9700:	str	w9, [x21, #36]
    9704:	tbz	w10, #0, 9728 <BZ2_decompress@@Base+0x1a60>
    9708:	add	w20, w20, #0x1
    970c:	cmp	w20, w5
    9710:	mov	w0, #0xfffffffc            	// #-4
    9714:	b.lt	966c <BZ2_decompress@@Base+0x19a4>  // b.tstop
    9718:	b	9418 <BZ2_decompress@@Base+0x1750>
    971c:	mov	w0, wzr
    9720:	mov	w14, w27
    9724:	b	9418 <BZ2_decompress@@Base+0x1750>
    9728:	mov	w8, #0x4651                	// #18001
    972c:	cmp	w0, w8
    9730:	b.gt	9740 <BZ2_decompress@@Base+0x1a78>
    9734:	add	x8, x21, w0, sxtw
    9738:	mov	w9, #0x651e                	// #25886
    973c:	strb	w20, [x8, x9]
    9740:	add	w9, w0, #0x1
    9744:	b	9654 <BZ2_decompress@@Base+0x198c>
    9748:	mov	w8, #0x4652                	// #18002
    974c:	cmp	w15, w8
    9750:	csel	w8, w15, w8, lt  // lt = tstop
    9754:	subs	w10, w5, #0x1
    9758:	b.lt	9780 <BZ2_decompress@@Base+0x1ab8>  // b.tstop
    975c:	cmp	w5, #0x1f
    9760:	b.hi	9834 <BZ2_decompress@@Base+0x1b6c>  // b.pmore
    9764:	mov	w9, wzr
    9768:	sub	x10, x29, #0x8
    976c:	and	x11, x9, #0xff
    9770:	strb	w9, [x10, x11]
    9774:	add	w9, w9, #0x1
    9778:	cmp	w5, w9, uxtb
    977c:	b.gt	976c <BZ2_decompress@@Base+0x1aa4>
    9780:	cmp	w15, #0x1
    9784:	b.lt	9824 <BZ2_decompress@@Base+0x1b5c>  // b.tstop
    9788:	str	w2, [sp, #52]
    978c:	mov	x2, x18
    9790:	mov	x1, x17
    9794:	mov	x0, x16
    9798:	mov	x15, xzr
    979c:	mov	x27, x8
    97a0:	sxtw	x9, w8
    97a4:	mov	w10, #0x651e                	// #25886
    97a8:	sub	x11, x29, #0x8
    97ac:	mov	w12, #0x1ecc                	// #7884
    97b0:	stur	w14, [x29, #-44]
    97b4:	b	97d0 <BZ2_decompress@@Base+0x1b08>
    97b8:	mov	x15, x8
    97bc:	add	x15, x8, #0x1
    97c0:	cmp	x15, x9
    97c4:	sturb	w14, [x29, #-8]
    97c8:	strb	w14, [x13, x12]
    97cc:	b.ge	9804 <BZ2_decompress@@Base+0x1b3c>  // b.tcont
    97d0:	add	x13, x21, x15
    97d4:	mov	x8, x15
    97d8:	ldrb	w15, [x13, x10]
    97dc:	ldrb	w14, [x11, x15]
    97e0:	cbz	x15, 97b8 <BZ2_decompress@@Base+0x1af0>
    97e4:	add	x16, x11, x15
    97e8:	ldurb	w17, [x16, #-1]
    97ec:	and	w18, w15, #0xff
    97f0:	sub	x15, x15, #0x1
    97f4:	cmp	w18, #0x1
    97f8:	strb	w17, [x16]
    97fc:	b.ne	97e4 <BZ2_decompress@@Base+0x1b1c>  // b.any
    9800:	b	97b8 <BZ2_decompress@@Base+0x1af0>
    9804:	mov	x18, x2
    9808:	ldr	w2, [sp, #52]
    980c:	ldur	w14, [x29, #-44]
    9810:	mov	x16, x0
    9814:	mov	x17, x1
    9818:	mov	x8, x27
    981c:	stur	x15, [x29, #-16]
    9820:	b	9828 <BZ2_decompress@@Base+0x1b60>
    9824:	stur	xzr, [x29, #-16]
    9828:	mov	w1, wzr
    982c:	mov	w15, w8
    9830:	b	9894 <BZ2_decompress@@Base+0x1bcc>
    9834:	neg	w9, w5
    9838:	tst	w9, #0xff
    983c:	mov	w9, wzr
    9840:	b.eq	9768 <BZ2_decompress@@Base+0x1aa0>  // b.none
    9844:	cmp	w10, #0xff
    9848:	b.hi	9768 <BZ2_decompress@@Base+0x1aa0>  // b.pmore
    984c:	adrp	x9, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    9850:	ldr	q0, [x9, #2560]
    9854:	mov	w10, wzr
    9858:	and	w9, w5, #0xffffffe0
    985c:	movi	v1.16b, #0x10
    9860:	sub	x11, x29, #0x8
    9864:	movi	v2.16b, #0x20
    9868:	and	x12, x10, #0xe0
    986c:	add	v3.16b, v0.16b, v1.16b
    9870:	add	w10, w10, #0x20
    9874:	add	x12, x11, x12
    9878:	cmp	w9, w10
    987c:	stp	q0, q3, [x12]
    9880:	add	v0.16b, v0.16b, v2.16b
    9884:	b.ne	9868 <BZ2_decompress@@Base+0x1ba0>  // b.any
    9888:	cmp	w5, w9
    988c:	b.ne	9768 <BZ2_decompress@@Base+0x1aa0>  // b.any
    9890:	b	9780 <BZ2_decompress@@Base+0x1ab8>
    9894:	cmp	w1, w5
    9898:	b.ge	9938 <BZ2_decompress@@Base+0x1c70>  // b.tcont
    989c:	ldr	w8, [x21, #36]
    98a0:	mov	w9, #0x21                  	// #33
    98a4:	str	w9, [x21, #8]
    98a8:	cmp	w8, #0x5
    98ac:	b.lt	98d4 <BZ2_decompress@@Base+0x1c0c>  // b.tstop
    98b0:	ldr	w10, [x21, #32]
    98b4:	sub	w8, w8, #0x5
    98b8:	lsr	w9, w10, w8
    98bc:	mov	w0, wzr
    98c0:	and	w25, w9, #0x1f
    98c4:	str	w8, [x21, #36]
    98c8:	cmp	w0, w6
    98cc:	b.ge	9d88 <BZ2_decompress@@Base+0x20c0>  // b.tcont
    98d0:	b	9d2c <BZ2_decompress@@Base+0x2064>
    98d4:	ldr	x9, [x21]
    98d8:	ldr	w10, [x9, #8]
    98dc:	sub	w11, w10, #0x1
    98e0:	b	98f4 <BZ2_decompress@@Base+0x1c2c>
    98e4:	sub	w12, w8, #0x8
    98e8:	cmn	w12, #0x4
    98ec:	sub	w11, w11, #0x1
    98f0:	b.gt	98b4 <BZ2_decompress@@Base+0x1bec>
    98f4:	cmn	w11, #0x1
    98f8:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    98fc:	ldr	x12, [x9]
    9900:	ldr	w13, [x21, #32]
    9904:	add	w8, w8, #0x8
    9908:	ldrb	w10, [x12], #1
    990c:	bfi	w10, w13, #8, #24
    9910:	stp	w10, w8, [x21, #32]
    9914:	ldr	w13, [x9, #12]
    9918:	str	x12, [x9]
    991c:	adds	w12, w13, #0x1
    9920:	stp	w11, w12, [x9, #8]
    9924:	b.cc	98e4 <BZ2_decompress@@Base+0x1c1c>  // b.lo, b.ul, b.last
    9928:	ldr	w12, [x9, #16]
    992c:	add	w12, w12, #0x1
    9930:	str	w12, [x9, #16]
    9934:	b	98e4 <BZ2_decompress@@Base+0x1c1c>
    9938:	mov	w8, #0x1ecc                	// #7884
    993c:	cmp	w5, #0x1
    9940:	add	x8, x21, x8
    9944:	str	w24, [sp, #52]
    9948:	str	x8, [sp, #16]
    994c:	stp	w4, w20, [x29, #-56]
    9950:	stur	w14, [x29, #-44]
    9954:	str	w5, [sp, #32]
    9958:	str	x7, [sp, #8]
    995c:	str	x23, [sp, #24]
    9960:	stur	w15, [x29, #-40]
    9964:	stur	w26, [x29, #-48]
    9968:	str	x16, [sp]
    996c:	b.lt	9b14 <BZ2_decompress@@Base+0x1e4c>  // b.tstop
    9970:	mov	w8, w5
    9974:	stur	x8, [x29, #-16]
    9978:	mov	w9, w6
    997c:	mov	w8, #0xab71                	// #43889
    9980:	mov	w10, #0xab70                	// #43888
    9984:	str	x28, [sp, #40]
    9988:	stur	w25, [x29, #-60]
    998c:	mov	x24, xzr
    9990:	stur	x9, [x29, #-32]
    9994:	and	x9, x9, #0xfffffffe
    9998:	add	x25, x21, x8
    999c:	add	x28, x21, x10
    99a0:	str	x9, [sp, #56]
    99a4:	b	9a2c <BZ2_decompress@@Base+0x1d64>
    99a8:	mov	x19, x16
    99ac:	mov	w26, w30
    99b0:	mov	w23, w3
    99b4:	mov	w5, wzr
    99b8:	mov	w20, #0x20                  	// #32
    99bc:	mov	w8, #0x408                 	// #1032
    99c0:	madd	x8, x24, x8, x21
    99c4:	mov	w10, #0xb17c                	// #45436
    99c8:	add	x0, x8, x10
    99cc:	mov	w10, #0xc9ac                	// #51628
    99d0:	mov	w9, #0x102                 	// #258
    99d4:	add	x1, x8, x10
    99d8:	mov	w10, #0xe1dc                	// #57820
    99dc:	madd	x9, x24, x9, x21
    99e0:	add	x2, x8, x10
    99e4:	mov	w8, #0xab70                	// #43888
    99e8:	add	x3, x9, x8
    99ec:	mov	w4, w20
    99f0:	mov	w27, w6
    99f4:	bl	14d0 <BZ2_hbCreateDecodeTables@plt>
    99f8:	add	x8, x21, x24, lsl #2
    99fc:	mov	w9, #0xfa0c                	// #64012
    9a00:	str	w20, [x8, x9]
    9a04:	ldur	x8, [x29, #-16]
    9a08:	add	x24, x24, #0x1
    9a0c:	mov	w6, w27
    9a10:	add	x25, x25, #0x102
    9a14:	cmp	x24, x8
    9a18:	add	x28, x28, #0x102
    9a1c:	mov	w3, w23
    9a20:	mov	w30, w26
    9a24:	mov	x16, x19
    9a28:	b.eq	9af8 <BZ2_decompress@@Base+0x1e30>  // b.none
    9a2c:	cmp	w6, #0x1
    9a30:	b.lt	99a8 <BZ2_decompress@@Base+0x1ce0>  // b.tstop
    9a34:	cmp	w6, #0x1
    9a38:	b.ne	9a58 <BZ2_decompress@@Base+0x1d90>  // b.any
    9a3c:	mov	x19, x16
    9a40:	mov	w26, w30
    9a44:	mov	w23, w3
    9a48:	mov	x9, xzr
    9a4c:	mov	w5, wzr
    9a50:	mov	w20, #0x20                  	// #32
    9a54:	b	9acc <BZ2_decompress@@Base+0x1e04>
    9a58:	ldr	x12, [sp, #56]
    9a5c:	mov	w9, wzr
    9a60:	mov	w10, wzr
    9a64:	mov	w8, #0x20                  	// #32
    9a68:	mov	x13, x25
    9a6c:	mov	w11, #0x20                  	// #32
    9a70:	ldurb	w14, [x13, #-1]
    9a74:	ldrb	w15, [x13], #2
    9a78:	cmp	w9, w14
    9a7c:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    9a80:	cmp	w10, w15
    9a84:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    9a88:	cmp	w8, w14
    9a8c:	csel	w8, w14, w8, gt
    9a90:	cmp	w11, w15
    9a94:	csel	w11, w15, w11, gt
    9a98:	subs	x12, x12, #0x2
    9a9c:	b.ne	9a70 <BZ2_decompress@@Base+0x1da8>  // b.any
    9aa0:	cmp	w9, w10
    9aa4:	csel	w5, w9, w10, hi  // hi = pmore
    9aa8:	cmp	w8, w11
    9aac:	csel	w20, w8, w11, lt  // lt = tstop
    9ab0:	ldur	x8, [x29, #-32]
    9ab4:	ldr	x9, [sp, #56]
    9ab8:	mov	x19, x16
    9abc:	mov	w26, w30
    9ac0:	mov	w23, w3
    9ac4:	cmp	x9, x8
    9ac8:	b.eq	99bc <BZ2_decompress@@Base+0x1cf4>  // b.none
    9acc:	ldur	x10, [x29, #-32]
    9ad0:	add	x8, x28, x9
    9ad4:	sub	x9, x10, x9
    9ad8:	ldrb	w10, [x8], #1
    9adc:	cmp	w5, w10
    9ae0:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    9ae4:	cmp	w20, w10
    9ae8:	csel	w20, w10, w20, gt
    9aec:	subs	x9, x9, #0x1
    9af0:	b.ne	9ad8 <BZ2_decompress@@Base+0x1e10>  // b.any
    9af4:	b	99bc <BZ2_decompress@@Base+0x1cf4>
    9af8:	ldr	w8, [sp, #32]
    9afc:	ldur	w25, [x29, #-60]
    9b00:	ldr	x28, [sp, #40]
    9b04:	mov	w26, w30
    9b08:	mov	w23, w3
    9b0c:	str	w8, [sp, #36]
    9b10:	b	9b24 <BZ2_decompress@@Base+0x1e5c>
    9b14:	mov	w26, w30
    9b18:	mov	w23, w3
    9b1c:	mov	w27, w6
    9b20:	str	wzr, [sp, #36]
    9b24:	ldr	w20, [x21, #3192]
    9b28:	ldr	w24, [x21, #40]
    9b2c:	add	x0, x21, #0x44
    9b30:	mov	w2, #0x400                 	// #1024
    9b34:	mov	w1, wzr
    9b38:	bl	14a0 <memset@plt>
    9b3c:	adrp	x13, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    9b40:	ldr	d0, [x13, #2944]
    9b44:	mov	w11, #0x86a0                	// #34464
    9b48:	add	w10, w20, #0x1
    9b4c:	movk	w11, #0x1, lsl #16
    9b50:	mov	w12, #0x1ec8                	// #7880
    9b54:	mov	x8, xzr
    9b58:	mov	x9, xzr
    9b5c:	stur	w10, [x29, #-32]
    9b60:	mov	w10, #0xd                   	// #13
    9b64:	mul	w19, w24, w11
    9b68:	add	x11, x21, x12
    9b6c:	mov	w12, #0xb                   	// #11
    9b70:	mov	w13, #0xa                   	// #10
    9b74:	mov	w14, #0x9                   	// #9
    9b78:	sub	w15, w9, #0x10
    9b7c:	add	x16, x11, x9
    9b80:	orr	w17, w15, #0xf
    9b84:	sturb	w17, [x16, #-61]
    9b88:	orr	w17, w15, #0xe
    9b8c:	sturb	w17, [x16, #-62]
    9b90:	orr	w17, w15, w10
    9b94:	sturb	w17, [x16, #-63]
    9b98:	orr	w17, w15, #0xc
    9b9c:	sturb	w17, [x16, #-64]
    9ba0:	orr	w17, w15, w12
    9ba4:	sturb	w17, [x16, #-65]
    9ba8:	orr	w17, w15, w13
    9bac:	dup	v1.8b, w15
    9bb0:	sturb	w17, [x16, #-66]
    9bb4:	add	w17, w9, #0xff0
    9bb8:	sub	x9, x9, #0x10
    9bbc:	sturb	w15, [x16, #-76]
    9bc0:	orr	w15, w15, w14
    9bc4:	orr	v1.8b, v1.8b, v0.8b
    9bc8:	cmn	x9, #0x100
    9bcc:	sturb	w15, [x16, #-67]
    9bd0:	stur	d1, [x16, #-75]
    9bd4:	str	w17, [x11, x8]
    9bd8:	sub	x8, x8, #0x4
    9bdc:	b.ne	9b78 <BZ2_decompress@@Base+0x1eb0>  // b.any
    9be0:	ldur	w8, [x29, #-40]
    9be4:	ldr	w24, [sp, #52]
    9be8:	ldur	w20, [x29, #-52]
    9bec:	mov	w6, w27
    9bf0:	cmp	w8, #0x1
    9bf4:	mov	w3, w23
    9bf8:	mov	w30, w26
    9bfc:	mov	w17, wzr
    9c00:	b.lt	9cfc <BZ2_decompress@@Base+0x2034>  // b.tstop
    9c04:	ldr	x8, [sp, #16]
    9c08:	mov	w9, #0x408                 	// #1032
    9c0c:	ldur	w4, [x29, #-56]
    9c10:	ldp	w5, w1, [sp, #32]
    9c14:	ldrb	w28, [x8]
    9c18:	mov	w8, #0xfa0c                	// #64012
    9c1c:	ldp	w14, w15, [x29, #-44]
    9c20:	ldur	w26, [x29, #-48]
    9c24:	add	x12, x21, w28, uxtw #2
    9c28:	ldr	w24, [x12, x8]
    9c2c:	umaddl	x9, w28, w9, x21
    9c30:	mov	w8, #0xb17c                	// #45436
    9c34:	mov	w10, #0xc9ac                	// #51628
    9c38:	mov	w11, #0xe1dc                	// #57820
    9c3c:	add	x8, x9, x8
    9c40:	mov	w18, wzr
    9c44:	add	x23, x9, x10
    9c48:	add	x7, x9, x11
    9c4c:	stur	x8, [x29, #-24]
    9c50:	mov	w8, #0x100                 	// #256
    9c54:	mov	w2, #0x31                  	// #49
    9c58:	mov	w16, w24
    9c5c:	stur	x8, [x29, #-16]
    9c60:	ldr	w8, [x21, #36]
    9c64:	mov	w9, #0x24                  	// #36
    9c68:	str	w9, [x21, #8]
    9c6c:	cmp	w8, w16
    9c70:	b.ge	9cd4 <BZ2_decompress@@Base+0x200c>  // b.tcont
    9c74:	ldr	x9, [x21]
    9c78:	ldr	w10, [x9, #8]
    9c7c:	sub	w11, w10, #0x1
    9c80:	b	9c90 <BZ2_decompress@@Base+0x1fc8>
    9c84:	cmp	w8, w16
    9c88:	sub	w11, w11, #0x1
    9c8c:	b.ge	9cd8 <BZ2_decompress@@Base+0x2010>  // b.tcont
    9c90:	cmn	w11, #0x1
    9c94:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    9c98:	ldr	x12, [x9]
    9c9c:	ldr	w13, [x21, #32]
    9ca0:	add	w8, w8, #0x8
    9ca4:	ldrb	w10, [x12], #1
    9ca8:	bfi	w10, w13, #8, #24
    9cac:	stp	w10, w8, [x21, #32]
    9cb0:	ldr	w13, [x9, #12]
    9cb4:	str	x12, [x9]
    9cb8:	adds	w12, w13, #0x1
    9cbc:	stp	w11, w12, [x9, #8]
    9cc0:	b.cc	9c84 <BZ2_decompress@@Base+0x1fbc>  // b.lo, b.ul, b.last
    9cc4:	ldr	w12, [x9, #16]
    9cc8:	add	w12, w12, #0x1
    9ccc:	str	w12, [x9, #16]
    9cd0:	b	9c84 <BZ2_decompress@@Base+0x1fbc>
    9cd4:	ldr	w10, [x21, #32]
    9cd8:	sub	w8, w8, w16
    9cdc:	mov	w9, #0xffffffff            	// #-1
    9ce0:	lsr	w10, w10, w8
    9ce4:	lsl	w9, w9, w16
    9ce8:	bic	w30, w10, w9
    9cec:	str	w8, [x21, #36]
    9cf0:	cmp	w16, #0x14
    9cf4:	b.le	9264 <BZ2_decompress@@Base+0x159c>
    9cf8:	b	9414 <BZ2_decompress@@Base+0x174c>
    9cfc:	ldur	w4, [x29, #-56]
    9d00:	ldp	w5, w1, [sp, #32]
    9d04:	ldp	x16, x7, [sp]
    9d08:	ldr	x23, [sp, #24]
    9d0c:	ldp	w14, w15, [x29, #-44]
    9d10:	ldur	w26, [x29, #-48]
    9d14:	mov	w8, #0x100                 	// #256
    9d18:	mov	w2, wzr
    9d1c:	mov	w18, wzr
    9d20:	mov	w0, #0xfffffffc            	// #-4
    9d24:	stur	x8, [x29, #-16]
    9d28:	b	9418 <BZ2_decompress@@Base+0x1750>
    9d2c:	sub	w8, w25, #0x1
    9d30:	cmp	w8, #0x13
    9d34:	b.hi	9410 <BZ2_decompress@@Base+0x1748>  // b.pmore
    9d38:	stur	x0, [x29, #-16]
    9d3c:	ldr	w8, [x21, #36]
    9d40:	mov	w9, #0x22                  	// #34
    9d44:	str	w9, [x21, #8]
    9d48:	cmp	w8, #0x1
    9d4c:	b.lt	9dc8 <BZ2_decompress@@Base+0x2100>  // b.tstop
    9d50:	ldr	w10, [x21, #32]
    9d54:	ldur	x0, [x29, #-16]
    9d58:	sub	w8, w8, #0x1
    9d5c:	lsr	w9, w10, w8
    9d60:	str	w8, [x21, #36]
    9d64:	tbnz	w9, #0, 9d94 <BZ2_decompress@@Base+0x20cc>
    9d68:	mov	w8, #0x102                 	// #258
    9d6c:	smaddl	x8, w1, w8, x21
    9d70:	mov	w9, #0xab70                	// #43888
    9d74:	add	x8, x8, w0, sxtw
    9d78:	strb	w25, [x8, x9]
    9d7c:	add	w0, w0, #0x1
    9d80:	cmp	w0, w6
    9d84:	b.lt	9d2c <BZ2_decompress@@Base+0x2064>  // b.tstop
    9d88:	stur	x0, [x29, #-16]
    9d8c:	add	w1, w1, #0x1
    9d90:	b	9894 <BZ2_decompress@@Base+0x1bcc>
    9d94:	mov	w9, #0x23                  	// #35
    9d98:	cmp	w8, #0x1
    9d9c:	str	w9, [x21, #8]
    9da0:	b.lt	9e2c <BZ2_decompress@@Base+0x2164>  // b.tstop
    9da4:	ldr	w10, [x21, #32]
    9da8:	sub	w8, w8, #0x1
    9dac:	str	w8, [x21, #36]
    9db0:	lsr	w8, w10, w8
    9db4:	tst	w8, #0x1
    9db8:	mov	w8, #0x1                   	// #1
    9dbc:	cneg	w8, w8, ne  // ne = any
    9dc0:	add	w25, w8, w25
    9dc4:	b	9d2c <BZ2_decompress@@Base+0x2064>
    9dc8:	ldr	x9, [x21]
    9dcc:	ldr	w10, [x9, #8]
    9dd0:	sub	w11, w10, #0x1
    9dd4:	b	9de8 <BZ2_decompress@@Base+0x2120>
    9dd8:	sub	w12, w8, #0x8
    9ddc:	cmn	w12, #0x8
    9de0:	sub	w11, w11, #0x1
    9de4:	b.gt	9d54 <BZ2_decompress@@Base+0x208c>
    9de8:	cmn	w11, #0x1
    9dec:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    9df0:	ldr	x12, [x9]
    9df4:	ldr	w13, [x21, #32]
    9df8:	add	w8, w8, #0x8
    9dfc:	ldrb	w10, [x12], #1
    9e00:	bfi	w10, w13, #8, #24
    9e04:	stp	w10, w8, [x21, #32]
    9e08:	ldr	w13, [x9, #12]
    9e0c:	str	x12, [x9]
    9e10:	adds	w12, w13, #0x1
    9e14:	stp	w11, w12, [x9, #8]
    9e18:	b.cc	9dd8 <BZ2_decompress@@Base+0x2110>  // b.lo, b.ul, b.last
    9e1c:	ldr	w12, [x9, #16]
    9e20:	add	w12, w12, #0x1
    9e24:	str	w12, [x9, #16]
    9e28:	b	9dd8 <BZ2_decompress@@Base+0x2110>
    9e2c:	ldr	x9, [x21]
    9e30:	ldr	w10, [x9, #8]
    9e34:	sub	w11, w10, #0x1
    9e38:	b	9e4c <BZ2_decompress@@Base+0x2184>
    9e3c:	sub	w12, w8, #0x8
    9e40:	cmn	w12, #0x8
    9e44:	sub	w11, w11, #0x1
    9e48:	b.gt	9da8 <BZ2_decompress@@Base+0x20e0>
    9e4c:	cmn	w11, #0x1
    9e50:	b.eq	9e90 <BZ2_decompress@@Base+0x21c8>  // b.none
    9e54:	ldr	x12, [x9]
    9e58:	ldr	w13, [x21, #32]
    9e5c:	add	w8, w8, #0x8
    9e60:	ldrb	w10, [x12], #1
    9e64:	bfi	w10, w13, #8, #24
    9e68:	stp	w10, w8, [x21, #32]
    9e6c:	ldr	w13, [x9, #12]
    9e70:	str	x12, [x9]
    9e74:	adds	w12, w13, #0x1
    9e78:	stp	w11, w12, [x9, #8]
    9e7c:	b.cc	9e3c <BZ2_decompress@@Base+0x2174>  // b.lo, b.ul, b.last
    9e80:	ldr	w12, [x9, #16]
    9e84:	add	w12, w12, #0x1
    9e88:	str	w12, [x9, #16]
    9e8c:	b	9e3c <BZ2_decompress@@Base+0x2174>
    9e90:	stur	x0, [x29, #-16]
    9e94:	mov	w0, wzr
    9e98:	b	9418 <BZ2_decompress@@Base+0x1750>
    9e9c:	sxtw	x8, w16
    9ea0:	ldr	w8, [x23, x8, lsl #2]
    9ea4:	sub	w8, w30, w8
    9ea8:	cmp	w8, #0x101
    9eac:	b.hi	9414 <BZ2_decompress@@Base+0x174c>  // b.pmore
    9eb0:	ldr	w4, [x7, w8, uxtw #2]
    9eb4:	ldur	w8, [x29, #-32]
    9eb8:	cmp	w4, w8
    9ebc:	b.eq	a2a8 <BZ2_decompress@@Base+0x25e0>  // b.none
    9ec0:	subs	w11, w4, #0x1
    9ec4:	b.hi	9ed4 <BZ2_decompress@@Base+0x220c>  // b.pmore
    9ec8:	mov	w26, #0xffffffff            	// #-1
    9ecc:	mov	w3, #0x1                   	// #1
    9ed0:	b	a848 <BZ2_decompress@@Base+0x2b80>
    9ed4:	cmp	w17, w19
    9ed8:	b.ge	9414 <BZ2_decompress@@Base+0x174c>  // b.tcont
    9edc:	cmp	w11, #0xf
    9ee0:	b.hi	9f68 <BZ2_decompress@@Base+0x22a0>  // b.pmore
    9ee4:	ldrsw	x9, [x21, #7820]
    9ee8:	mov	w0, w14
    9eec:	cmp	w11, #0x4
    9ef0:	add	w8, w9, w11
    9ef4:	add	x8, x21, x8
    9ef8:	ldrb	w8, [x8, #3724]
    9efc:	b.cc	9f38 <BZ2_decompress@@Base+0x2270>  // b.lo, b.ul, b.last
    9f00:	mov	w10, w4
    9f04:	add	w11, w9, w10
    9f08:	add	x12, x21, #0xe8c
    9f0c:	sub	w13, w11, #0x4
    9f10:	sub	w11, w11, #0x5
    9f14:	ldr	w14, [x12, w11, sxtw]
    9f18:	sub	w11, w10, #0x4
    9f1c:	sub	w10, w10, #0x5
    9f20:	cmp	w10, #0x3
    9f24:	mov	w10, w11
    9f28:	str	w14, [x12, w13, sxtw]
    9f2c:	b.hi	9f04 <BZ2_decompress@@Base+0x223c>  // b.pmore
    9f30:	subs	w11, w11, #0x1
    9f34:	b.eq	9f5c <BZ2_decompress@@Base+0x2294>  // b.none
    9f38:	neg	w10, w11
    9f3c:	add	w11, w11, w9
    9f40:	sub	w12, w11, #0x1
    9f44:	add	x13, x21, #0xe8c
    9f48:	ldrb	w14, [x13, w12, uxtw]
    9f4c:	adds	w10, w10, #0x1
    9f50:	strb	w14, [x13, w11, uxtw]
    9f54:	mov	w11, w12
    9f58:	b.cc	9f40 <BZ2_decompress@@Base+0x2278>  // b.lo, b.ul, b.last
    9f5c:	add	x9, x21, x9
    9f60:	strb	w8, [x9, #3724]
    9f64:	b	a154 <BZ2_decompress@@Base+0x248c>
    9f68:	lsr	w10, w11, #4
    9f6c:	add	x9, x21, w10, uxtw #2
    9f70:	ldr	w13, [x9, #7820]
    9f74:	ands	w8, w11, #0xf
    9f78:	mov	w11, #0x1e8c                	// #7820
    9f7c:	add	x11, x9, x11
    9f80:	add	w8, w13, w8
    9f84:	sxtw	x12, w8
    9f88:	add	x8, x21, x12
    9f8c:	ldrb	w8, [x8, #3724]
    9f90:	b.eq	9fc8 <BZ2_decompress@@Base+0x2300>  // b.none
    9f94:	mov	w0, w14
    9f98:	add	x13, x21, x12
    9f9c:	ldrb	w14, [x13, #3723]
    9fa0:	sub	x12, x12, #0x1
    9fa4:	strb	w14, [x13, #3724]
    9fa8:	ldrsw	x13, [x11]
    9fac:	cmp	x12, x13
    9fb0:	b.gt	9f98 <BZ2_decompress@@Base+0x22d0>
    9fb4:	add	w12, w13, #0x1
    9fb8:	mov	w14, w0
    9fbc:	str	w12, [x11]
    9fc0:	cbnz	w10, 9fd0 <BZ2_decompress@@Base+0x2308>
    9fc4:	b	a008 <BZ2_decompress@@Base+0x2340>
    9fc8:	add	w12, w13, #0x1
    9fcc:	str	w12, [x11]
    9fd0:	mov	w11, #0x1e8c                	// #7820
    9fd4:	add	x10, x10, #0x1
    9fd8:	add	x9, x9, x11
    9fdc:	ldrsw	x11, [x9]
    9fe0:	add	x13, x21, #0xe8c
    9fe4:	sub	x10, x10, #0x1
    9fe8:	cmp	x10, #0x1
    9fec:	sub	x11, x11, #0x1
    9ff0:	str	w11, [x9], #-4
    9ff4:	ldrsw	x12, [x9]
    9ff8:	add	x12, x12, x13
    9ffc:	ldrb	w12, [x12, #15]
    a000:	strb	w12, [x13, x11]
    a004:	b.gt	9fdc <BZ2_decompress@@Base+0x2314>
    a008:	ldrsw	x9, [x21, #7820]
    a00c:	sub	x9, x9, #0x1
    a010:	str	w9, [x21, #7820]
    a014:	add	x9, x21, x9
    a018:	strb	w8, [x9, #3724]
    a01c:	ldr	w9, [x21, #7820]
    a020:	cbnz	w9, a158 <BZ2_decompress@@Base+0x2490>
    a024:	mov	w10, #0x1ec8                	// #7880
    a028:	mov	w11, #0x1e83                	// #7811
    a02c:	mov	w0, w14
    a030:	mov	x9, xzr
    a034:	add	x10, x21, x10
    a038:	add	x11, x21, x11
    a03c:	ldrsw	x12, [x10]
    a040:	add	x13, x21, #0xe8c
    a044:	add	x12, x12, x13
    a048:	ldrb	w14, [x12, #15]
    a04c:	add	x12, x11, x9
    a050:	strb	w14, [x12, #8]
    a054:	ldrsw	x14, [x10]
    a058:	add	x14, x14, x13
    a05c:	ldrb	w14, [x14, #14]
    a060:	strb	w14, [x12, #7]
    a064:	ldrsw	x14, [x10]
    a068:	add	x14, x14, x13
    a06c:	ldrb	w14, [x14, #13]
    a070:	strb	w14, [x12, #6]
    a074:	ldrsw	x14, [x10]
    a078:	add	x14, x14, x13
    a07c:	ldrb	w14, [x14, #12]
    a080:	strb	w14, [x12, #5]
    a084:	ldrsw	x14, [x10]
    a088:	add	x14, x14, x13
    a08c:	ldrb	w14, [x14, #11]
    a090:	strb	w14, [x12, #4]
    a094:	ldrsw	x14, [x10]
    a098:	add	x14, x14, x13
    a09c:	ldrb	w14, [x14, #10]
    a0a0:	strb	w14, [x12, #3]
    a0a4:	ldrsw	x14, [x10]
    a0a8:	add	x14, x14, x13
    a0ac:	ldrb	w14, [x14, #9]
    a0b0:	strb	w14, [x12, #2]
    a0b4:	ldrsw	x14, [x10]
    a0b8:	add	x14, x14, x13
    a0bc:	ldrb	w14, [x14, #8]
    a0c0:	strb	w14, [x12, #1]
    a0c4:	ldrsw	x14, [x10]
    a0c8:	add	x14, x14, x13
    a0cc:	ldrb	w14, [x14, #7]
    a0d0:	strb	w14, [x12]
    a0d4:	ldrsw	x14, [x10]
    a0d8:	add	x14, x14, x13
    a0dc:	ldrb	w14, [x14, #6]
    a0e0:	sturb	w14, [x12, #-1]
    a0e4:	ldrsw	x14, [x10]
    a0e8:	add	x14, x14, x13
    a0ec:	ldrb	w14, [x14, #5]
    a0f0:	sturb	w14, [x12, #-2]
    a0f4:	ldrsw	x14, [x10]
    a0f8:	add	x14, x14, x13
    a0fc:	ldrb	w14, [x14, #4]
    a100:	sturb	w14, [x12, #-3]
    a104:	ldrsw	x14, [x10]
    a108:	add	x14, x14, x13
    a10c:	ldrb	w14, [x14, #3]
    a110:	sturb	w14, [x12, #-4]
    a114:	ldrsw	x14, [x10]
    a118:	add	x14, x14, x13
    a11c:	ldrb	w14, [x14, #2]
    a120:	sturb	w14, [x12, #-5]
    a124:	ldrsw	x14, [x10]
    a128:	add	x14, x14, x13
    a12c:	ldrb	w14, [x14, #1]
    a130:	sturb	w14, [x12, #-6]
    a134:	ldrsw	x14, [x10]
    a138:	ldrb	w13, [x13, x14]
    a13c:	add	w14, w9, #0xff0
    a140:	sub	x9, x9, #0x10
    a144:	cmn	x9, #0x100
    a148:	sturb	w13, [x12, #-7]
    a14c:	str	w14, [x10], #-4
    a150:	b.ne	a03c <BZ2_decompress@@Base+0x2374>  // b.any
    a154:	mov	w14, w0
    a158:	add	x8, x21, x8
    a15c:	ldrb	w9, [x8, #3468]
    a160:	add	x9, x21, x9, lsl #2
    a164:	ldr	w10, [x9, #68]
    a168:	add	w10, w10, #0x1
    a16c:	str	w10, [x9, #68]
    a170:	ldrb	w9, [x21, #44]
    a174:	ldrb	w8, [x8, #3468]
    a178:	cbz	w9, a190 <BZ2_decompress@@Base+0x24c8>
    a17c:	ldr	x9, [x21, #3160]
    a180:	strh	w8, [x9, w17, sxtw #1]
    a184:	add	w17, w17, #0x1
    a188:	cbnz	w2, a1f0 <BZ2_decompress@@Base+0x2528>
    a18c:	b	a1a0 <BZ2_decompress@@Base+0x24d8>
    a190:	ldr	x9, [x21, #3152]
    a194:	str	w8, [x9, w17, sxtw #2]
    a198:	add	w17, w17, #0x1
    a19c:	cbnz	w2, a1f0 <BZ2_decompress@@Base+0x2528>
    a1a0:	sxtw	x8, w18
    a1a4:	add	x18, x8, #0x1
    a1a8:	cmp	w18, w15
    a1ac:	b.ge	aa38 <BZ2_decompress@@Base+0x2d70>  // b.tcont
    a1b0:	add	x8, x21, x18
    a1b4:	mov	w9, #0x1ecc                	// #7884
    a1b8:	ldrb	w28, [x8, x9]
    a1bc:	mov	w10, #0xfa0c                	// #64012
    a1c0:	mov	w8, #0x408                 	// #1032
    a1c4:	mov	w9, #0xb17c                	// #45436
    a1c8:	add	x12, x21, x28, lsl #2
    a1cc:	madd	x8, x28, x8, x21
    a1d0:	ldr	w24, [x12, x10]
    a1d4:	add	x9, x8, x9
    a1d8:	mov	w11, #0xe1dc                	// #57820
    a1dc:	stur	x9, [x29, #-24]
    a1e0:	mov	w9, #0xc9ac                	// #51628
    a1e4:	add	x7, x8, x11
    a1e8:	add	x23, x8, x9
    a1ec:	mov	w2, #0x32                  	// #50
    a1f0:	sub	w2, w2, #0x1
    a1f4:	mov	w16, w24
    a1f8:	ldr	w8, [x21, #36]
    a1fc:	mov	w9, #0x28                  	// #40
    a200:	str	w9, [x21, #8]
    a204:	cmp	w8, w16
    a208:	b.ge	a26c <BZ2_decompress@@Base+0x25a4>  // b.tcont
    a20c:	ldr	x9, [x21]
    a210:	ldr	w10, [x9, #8]
    a214:	sub	w11, w10, #0x1
    a218:	b	a228 <BZ2_decompress@@Base+0x2560>
    a21c:	cmp	w8, w16
    a220:	sub	w11, w11, #0x1
    a224:	b.ge	a270 <BZ2_decompress@@Base+0x25a8>  // b.tcont
    a228:	cmn	w11, #0x1
    a22c:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    a230:	ldr	x12, [x9]
    a234:	ldr	w13, [x21, #32]
    a238:	add	w8, w8, #0x8
    a23c:	ldrb	w10, [x12], #1
    a240:	bfi	w10, w13, #8, #24
    a244:	stp	w10, w8, [x21, #32]
    a248:	ldr	w13, [x9, #12]
    a24c:	str	x12, [x9]
    a250:	adds	w12, w13, #0x1
    a254:	stp	w11, w12, [x9, #8]
    a258:	b.cc	a21c <BZ2_decompress@@Base+0x2554>  // b.lo, b.ul, b.last
    a25c:	ldr	w12, [x9, #16]
    a260:	add	w12, w12, #0x1
    a264:	str	w12, [x9, #16]
    a268:	b	a21c <BZ2_decompress@@Base+0x2554>
    a26c:	ldr	w10, [x21, #32]
    a270:	sub	w8, w8, w16
    a274:	mov	w9, #0xffffffff            	// #-1
    a278:	lsr	w10, w10, w8
    a27c:	lsl	w9, w9, w16
    a280:	bic	w30, w10, w9
    a284:	str	w8, [x21, #36]
    a288:	cmp	w16, #0x14
    a28c:	b.gt	9414 <BZ2_decompress@@Base+0x174c>
    a290:	ldur	x9, [x29, #-24]
    a294:	ldr	w9, [x9, w16, sxtw #2]
    a298:	cmp	w30, w9
    a29c:	b.le	9e9c <BZ2_decompress@@Base+0x21d4>
    a2a0:	add	w16, w16, #0x1
    a2a4:	b	9374 <BZ2_decompress@@Base+0x16ac>
    a2a8:	ldr	w8, [x21, #56]
    a2ac:	mov	w0, #0xfffffffc            	// #-4
    a2b0:	tbnz	w8, #31, a488 <BZ2_decompress@@Base+0x27c0>
    a2b4:	cmp	w8, w17
    a2b8:	b.ge	a488 <BZ2_decompress@@Base+0x27c0>  // b.tcont
    a2bc:	mov	x10, xzr
    a2c0:	add	x8, x21, #0x44
    a2c4:	ldr	w9, [x8, x10, lsl #2]
    a2c8:	tbnz	w9, #31, a480 <BZ2_decompress@@Base+0x27b8>
    a2cc:	cmp	w9, w17
    a2d0:	b.gt	a480 <BZ2_decompress@@Base+0x27b8>
    a2d4:	add	x10, x10, #0x1
    a2d8:	cmp	x10, #0x100
    a2dc:	b.ne	a2c4 <BZ2_decompress@@Base+0x25fc>  // b.any
    a2e0:	mov	w27, w1
    a2e4:	mov	x8, xzr
    a2e8:	add	x1, x21, #0x448
    a2ec:	str	wzr, [x21, #1096]
    a2f0:	add	x9, x21, x8
    a2f4:	ldur	q0, [x9, #68]
    a2f8:	add	x8, x8, #0x10
    a2fc:	add	x9, x9, #0x44c
    a300:	cmp	x8, #0x400
    a304:	str	q0, [x9]
    a308:	b.ne	a2f0 <BZ2_decompress@@Base+0x2628>  // b.any
    a30c:	ldr	w9, [x21, #1096]
    a310:	mov	x8, xzr
    a314:	add	x10, x21, #0x44c
    a318:	ldr	w11, [x10, x8]
    a31c:	add	w9, w11, w9
    a320:	str	w9, [x10, x8]
    a324:	add	x8, x8, #0x4
    a328:	cmp	x8, #0x400
    a32c:	b.ne	a318 <BZ2_decompress@@Base+0x2650>  // b.any
    a330:	mov	x10, xzr
    a334:	add	x8, x21, #0x448
    a338:	ldr	w9, [x8, x10, lsl #2]
    a33c:	tbnz	w9, #31, a490 <BZ2_decompress@@Base+0x27c8>
    a340:	cmp	w9, w17
    a344:	b.gt	a490 <BZ2_decompress@@Base+0x27c8>
    a348:	add	x10, x10, #0x1
    a34c:	cmp	x10, #0x101
    a350:	b.ne	a338 <BZ2_decompress@@Base+0x2670>  // b.any
    a354:	ldr	w10, [x21, #1096]
    a358:	mov	x8, xzr
    a35c:	add	x9, x21, #0x44c
    a360:	ldr	w11, [x9, x8, lsl #2]
    a364:	cmp	w10, w11
    a368:	b.gt	a498 <BZ2_decompress@@Base+0x27d0>
    a36c:	add	x8, x8, #0x1
    a370:	cmp	x8, #0x100
    a374:	mov	w10, w11
    a378:	b.ne	a360 <BZ2_decompress@@Base+0x2698>  // b.any
    a37c:	ldr	w8, [x21, #52]
    a380:	mov	w9, #0xffffffff            	// #-1
    a384:	str	w9, [x21, #3184]
    a388:	mov	w9, #0x2                   	// #2
    a38c:	cmp	w8, #0x2
    a390:	str	wzr, [x21, #16]
    a394:	strb	wzr, [x21, #12]
    a398:	str	w9, [x21, #8]
    a39c:	str	w5, [sp, #32]
    a3a0:	stur	w25, [x29, #-60]
    a3a4:	str	x7, [sp, #8]
    a3a8:	str	x23, [sp, #24]
    a3ac:	stur	w15, [x29, #-40]
    a3b0:	stur	w26, [x29, #-48]
    a3b4:	str	x19, [sp, #56]
    a3b8:	str	x18, [sp, #40]
    a3bc:	b.ge	a7d8 <BZ2_decompress@@Base+0x2b10>  // b.tcont
    a3c0:	ldur	w25, [x29, #-36]
    a3c4:	ldrb	w8, [x21, #44]
    a3c8:	cbz	w8, a5f4 <BZ2_decompress@@Base+0x292c>
    a3cc:	mov	w26, w14
    a3d0:	mov	w23, w4
    a3d4:	mov	w19, w6
    a3d8:	mov	w8, #0x448                 	// #1096
    a3dc:	str	w2, [sp, #52]
    a3e0:	str	x16, [sp]
    a3e4:	stur	w30, [x29, #-44]
    a3e8:	str	w3, [sp, #36]
    a3ec:	add	x9, x21, x8
    a3f0:	ldr	q0, [x9]
    a3f4:	add	x8, x8, #0x10
    a3f8:	add	x9, x9, #0x404
    a3fc:	cmp	x8, #0x848
    a400:	str	q0, [x9]
    a404:	b.ne	a3ec <BZ2_decompress@@Base+0x2724>  // b.any
    a408:	ldr	w8, [x21, #2120]
    a40c:	cmp	w17, #0x0
    a410:	str	w8, [x21, #3148]
    a414:	b.le	a4b0 <BZ2_decompress@@Base+0x27e8>
    a418:	mov	x8, xzr
    a41c:	mov	w9, w17
    a420:	b	a448 <BZ2_decompress@@Base+0x2780>
    a424:	asr	w14, w14, #16
    a428:	bfi	w13, w14, #4, #28
    a42c:	strb	w13, [x11, x12]
    a430:	ldr	w11, [x10]
    a434:	add	x8, x8, #0x1
    a438:	cmp	x9, x8
    a43c:	add	w11, w11, #0x1
    a440:	str	w11, [x10]
    a444:	b.eq	a4b0 <BZ2_decompress@@Base+0x27e8>  // b.none
    a448:	ldr	x10, [x21, #3160]
    a44c:	lsl	x11, x8, #1
    a450:	ldrb	w12, [x10, x11]
    a454:	add	x15, x21, x12, lsl #2
    a458:	ldr	w14, [x15, #2124]
    a45c:	ubfx	x12, x8, #1, #31
    a460:	strh	w14, [x10, x11]
    a464:	ldr	x11, [x21, #3168]
    a468:	add	x10, x15, #0x84c
    a46c:	ldrb	w13, [x11, x12]
    a470:	tbnz	w8, #0, a424 <BZ2_decompress@@Base+0x275c>
    a474:	and	w13, w13, #0xf0
    a478:	orr	w13, w13, w14, asr #16
    a47c:	b	a42c <BZ2_decompress@@Base+0x2764>
    a480:	mov	w0, #0xfffffffc            	// #-4
    a484:	stur	x10, [x29, #-16]
    a488:	stur	w4, [x29, #-32]
    a48c:	b	9418 <BZ2_decompress@@Base+0x1750>
    a490:	stur	x10, [x29, #-16]
    a494:	b	a4a0 <BZ2_decompress@@Base+0x27d8>
    a498:	add	w8, w8, #0x1
    a49c:	stur	x8, [x29, #-16]
    a4a0:	mov	w0, #0xfffffffc            	// #-4
    a4a4:	stur	w4, [x29, #-32]
    a4a8:	mov	w1, w27
    a4ac:	b	9418 <BZ2_decompress@@Base+0x1750>
    a4b0:	ldrsw	x9, [x21, #56]
    a4b4:	ldr	x8, [x21, #3168]
    a4b8:	ldr	x10, [x21, #3160]
    a4bc:	str	x17, [sp, #16]
    a4c0:	asr	w11, w9, #1
    a4c4:	ldrb	w11, [x8, w11, sxtw]
    a4c8:	ldrh	w20, [x10, x9, lsl #1]
    a4cc:	ubfiz	w12, w9, #2, #1
    a4d0:	lsr	w11, w11, w12
    a4d4:	bfi	w20, w11, #16, #4
    a4d8:	mov	w14, w20
    a4dc:	sbfx	x11, x14, #1, #31
    a4e0:	sbfiz	x12, x14, #1, #32
    a4e4:	ldrb	w13, [x8, x11]
    a4e8:	ldrh	w20, [x10, x12]
    a4ec:	strh	w9, [x10, x12]
    a4f0:	ldrb	w10, [x8, x11]
    a4f4:	ubfiz	w12, w14, #2, #1
    a4f8:	lsr	w12, w13, w12
    a4fc:	bfi	w20, w12, #16, #4
    a500:	tbnz	w14, #0, a510 <BZ2_decompress@@Base+0x2848>
    a504:	and	w10, w10, #0xf0
    a508:	orr	w10, w10, w9, asr #16
    a50c:	b	a518 <BZ2_decompress@@Base+0x2850>
    a510:	asr	w9, w9, #16
    a514:	bfi	w10, w9, #4, #28
    a518:	strb	w10, [x8, x11]
    a51c:	ldr	w8, [x21, #56]
    a520:	cmp	w14, w8
    a524:	b.eq	a538 <BZ2_decompress@@Base+0x2870>  // b.none
    a528:	ldr	x10, [x21, #3160]
    a52c:	ldr	x8, [x21, #3168]
    a530:	mov	w9, w14
    a534:	b	a4d8 <BZ2_decompress@@Base+0x2810>
    a538:	ldrb	w9, [x21, #20]
    a53c:	mov	w8, #0x86a0                	// #34464
    a540:	movk	w8, #0x1, lsl #16
    a544:	str	w14, [x21, #60]
    a548:	str	wzr, [x21, #1092]
    a54c:	stur	x14, [x29, #-16]
    a550:	cbz	w9, a658 <BZ2_decompress@@Base+0x2990>
    a554:	ldr	w9, [x21, #40]
    a558:	str	xzr, [x21, #24]
    a55c:	mul	w8, w9, w8
    a560:	cmp	w14, w8
    a564:	b.cs	a6f0 <BZ2_decompress@@Base+0x2a28>  // b.hs, b.nlast
    a568:	ldur	x0, [x29, #-16]
    a56c:	bl	1590 <BZ2_indexIntoF@plt>
    a570:	ldr	w9, [x21, #60]
    a574:	ldr	x10, [x21, #3168]
    a578:	str	w0, [x21, #64]
    a57c:	ldr	x11, [x21, #3160]
    a580:	lsr	x12, x9, #1
    a584:	ldrb	w10, [x10, x12]
    a588:	ldr	w12, [x21, #1092]
    a58c:	ldrh	w11, [x11, x9, lsl #1]
    a590:	ubfiz	w9, w9, #2, #1
    a594:	lsr	w10, w10, w9
    a598:	ldr	w9, [x21, #24]
    a59c:	mov	w8, w0
    a5a0:	add	w12, w12, #0x1
    a5a4:	bfi	w11, w10, #16, #4
    a5a8:	str	w11, [x21, #60]
    a5ac:	str	w12, [x21, #1092]
    a5b0:	cbnz	w9, a5d4 <BZ2_decompress@@Base+0x290c>
    a5b4:	adrp	x9, 1e000 <BZ2_bzerror@@Base+0x1092c>
    a5b8:	ldrsw	x10, [x21, #28]
    a5bc:	ldr	x9, [x9, #4048]
    a5c0:	add	w11, w10, #0x1
    a5c4:	ldr	w9, [x9, x10, lsl #2]
    a5c8:	cmp	w11, #0x200
    a5cc:	csinc	w10, wzr, w10, eq  // eq = none
    a5d0:	stp	w9, w10, [x21, #24]
    a5d4:	sub	w9, w9, #0x1
    a5d8:	cmp	w9, #0x1
    a5dc:	str	w9, [x21, #24]
    a5e0:	cset	w9, eq  // eq = none
    a5e4:	mov	w0, wzr
    a5e8:	eor	w8, w8, w9
    a5ec:	str	w8, [x21, #64]
    a5f0:	b	a6b0 <BZ2_decompress@@Base+0x29e8>
    a5f4:	ldr	x8, [x21, #3152]
    a5f8:	mov	w26, w14
    a5fc:	mov	x18, x17
    a600:	cmp	w17, #0x1
    a604:	b.lt	a6f8 <BZ2_decompress@@Base+0x2a30>  // b.tstop
    a608:	mov	w10, w18
    a60c:	mov	x9, xzr
    a610:	lsl	x10, x10, #8
    a614:	mov	x11, x8
    a618:	ldrb	w12, [x11], #4
    a61c:	add	x12, x21, x12, lsl #2
    a620:	ldrsw	x13, [x12, #1096]
    a624:	lsl	x13, x13, #2
    a628:	ldr	w14, [x8, x13]
    a62c:	orr	w14, w14, w9
    a630:	str	w14, [x8, x13]
    a634:	ldr	w13, [x12, #1096]
    a638:	add	x9, x9, #0x100
    a63c:	cmp	x10, x9
    a640:	add	w13, w13, #0x1
    a644:	str	w13, [x12, #1096]
    a648:	b.ne	a618 <BZ2_decompress@@Base+0x2950>  // b.any
    a64c:	mov	w9, w18
    a650:	stur	x9, [x29, #-16]
    a654:	b	a6fc <BZ2_decompress@@Base+0x2a34>
    a658:	ldr	w9, [x21, #40]
    a65c:	mul	w8, w9, w8
    a660:	cmp	w14, w8
    a664:	b.cs	a6f0 <BZ2_decompress@@Base+0x2a28>  // b.hs, b.nlast
    a668:	ldur	x0, [x29, #-16]
    a66c:	bl	1590 <BZ2_indexIntoF@plt>
    a670:	ldr	w9, [x21, #60]
    a674:	mov	w8, w0
    a678:	ldr	x10, [x21, #3168]
    a67c:	str	w8, [x21, #64]
    a680:	ldr	x8, [x21, #3160]
    a684:	lsr	x11, x9, #1
    a688:	ldrb	w10, [x10, x11]
    a68c:	ldr	w11, [x21, #1092]
    a690:	ldrh	w8, [x8, x9, lsl #1]
    a694:	ubfiz	w9, w9, #2, #1
    a698:	lsr	w9, w10, w9
    a69c:	add	w10, w11, #0x1
    a6a0:	bfi	w8, w9, #16, #4
    a6a4:	mov	w0, wzr
    a6a8:	str	w8, [x21, #60]
    a6ac:	str	w10, [x21, #1092]
    a6b0:	mov	w4, w23
    a6b4:	stur	w23, [x29, #-32]
    a6b8:	mov	w6, w19
    a6bc:	mov	w9, w25
    a6c0:	ldp	w5, w3, [sp, #32]
    a6c4:	ldur	w25, [x29, #-60]
    a6c8:	mov	w14, w26
    a6cc:	ldp	x16, x7, [sp]
    a6d0:	ldp	x17, x23, [sp, #16]
    a6d4:	ldp	w30, w15, [x29, #-44]
    a6d8:	ldur	w26, [x29, #-48]
    a6dc:	ldr	x19, [sp, #56]
    a6e0:	ldr	x18, [sp, #40]
    a6e4:	ldr	w2, [sp, #52]
    a6e8:	mov	w1, w27
    a6ec:	b	941c <BZ2_decompress@@Base+0x1754>
    a6f0:	mov	w0, #0x1                   	// #1
    a6f4:	b	9460 <BZ2_decompress@@Base+0x1798>
    a6f8:	stur	xzr, [x29, #-16]
    a6fc:	ldrsw	x9, [x21, #56]
    a700:	ldrb	w11, [x21, #20]
    a704:	mov	w10, #0x86a0                	// #34464
    a708:	movk	w10, #0x1, lsl #16
    a70c:	ldr	w9, [x8, x9, lsl #2]
    a710:	str	wzr, [x21, #1092]
    a714:	lsr	x9, x9, #8
    a718:	str	w9, [x21, #60]
    a71c:	cbz	w11, a774 <BZ2_decompress@@Base+0x2aac>
    a720:	ldr	w11, [x21, #40]
    a724:	mov	w0, #0x1                   	// #1
    a728:	str	xzr, [x21, #24]
    a72c:	mul	w10, w11, w10
    a730:	cmp	w9, w10
    a734:	b.cs	9460 <BZ2_decompress@@Base+0x1798>  // b.hs, b.nlast
    a738:	ldr	w8, [x8, x9, lsl #2]
    a73c:	str	w0, [x21, #1092]
    a740:	lsr	w9, w8, #8
    a744:	str	w9, [x21, #60]
    a748:	adrp	x9, 1e000 <BZ2_bzerror@@Base+0x1092c>
    a74c:	ldr	x9, [x9, #4048]
    a750:	and	w8, w8, #0xff
    a754:	ldr	w9, [x9]
    a758:	sub	w9, w9, #0x1
    a75c:	cmp	w9, #0x1
    a760:	stp	w9, w0, [x21, #24]
    a764:	cset	w9, eq  // eq = none
    a768:	eor	w8, w8, w9
    a76c:	str	w8, [x21, #64]
    a770:	b	a79c <BZ2_decompress@@Base+0x2ad4>
    a774:	ldr	w11, [x21, #40]
    a778:	mov	w0, #0x1                   	// #1
    a77c:	mul	w10, w11, w10
    a780:	cmp	w9, w10
    a784:	b.cs	9460 <BZ2_decompress@@Base+0x1798>  // b.hs, b.nlast
    a788:	ldr	w8, [x8, w9, uxtw #2]
    a78c:	str	w0, [x21, #1092]
    a790:	and	w9, w8, #0xff
    a794:	lsr	w8, w8, #8
    a798:	stp	w8, w9, [x21, #60]
    a79c:	mov	w9, w25
    a7a0:	ldr	w5, [sp, #32]
    a7a4:	ldur	w25, [x29, #-60]
    a7a8:	mov	w14, w26
    a7ac:	ldr	x7, [sp, #8]
    a7b0:	ldr	x23, [sp, #24]
    a7b4:	ldur	w15, [x29, #-40]
    a7b8:	ldur	w26, [x29, #-48]
    a7bc:	ldr	x19, [sp, #56]
    a7c0:	mov	x17, x18
    a7c4:	ldr	x18, [sp, #40]
    a7c8:	stur	w4, [x29, #-32]
    a7cc:	mov	w0, wzr
    a7d0:	mov	w1, w27
    a7d4:	b	941c <BZ2_decompress@@Base+0x1754>
    a7d8:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    a7dc:	ldr	x8, [x8, #4016]
    a7e0:	str	w3, [sp, #36]
    a7e4:	adrp	x0, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    a7e8:	add	x0, x0, #0xbee
    a7ec:	ldr	x3, [x8]
    a7f0:	stur	x1, [x29, #-16]
    a7f4:	mov	w1, #0x6                   	// #6
    a7f8:	str	w2, [sp, #52]
    a7fc:	mov	w2, #0x1                   	// #1
    a800:	stur	w4, [x29, #-56]
    a804:	stur	w20, [x29, #-52]
    a808:	mov	w25, w6
    a80c:	mov	w26, w30
    a810:	mov	x19, x16
    a814:	mov	x23, x17
    a818:	stur	w14, [x29, #-44]
    a81c:	bl	15b0 <fwrite@plt>
    a820:	ldur	w14, [x29, #-44]
    a824:	ldr	w2, [sp, #52]
    a828:	ldr	w3, [sp, #36]
    a82c:	ldp	w4, w20, [x29, #-56]
    a830:	ldur	x1, [x29, #-16]
    a834:	mov	x17, x23
    a838:	mov	x16, x19
    a83c:	mov	w30, w26
    a840:	mov	w6, w25
    a844:	b	a3c0 <BZ2_decompress@@Base+0x26f8>
    a848:	cmp	w3, #0x200, lsl #12
    a84c:	b.ge	9414 <BZ2_decompress@@Base+0x174c>  // b.tcont
    a850:	cmp	w4, #0x1
    a854:	b.eq	a86c <BZ2_decompress@@Base+0x2ba4>  // b.none
    a858:	cbnz	w4, a860 <BZ2_decompress@@Base+0x2b98>
    a85c:	add	w26, w26, w3
    a860:	lsl	w3, w3, #1
    a864:	cbnz	w2, a8c8 <BZ2_decompress@@Base+0x2c00>
    a868:	b	a878 <BZ2_decompress@@Base+0x2bb0>
    a86c:	add	w26, w26, w3, lsl #1
    a870:	lsl	w3, w3, #1
    a874:	cbnz	w2, a8c8 <BZ2_decompress@@Base+0x2c00>
    a878:	sxtw	x8, w18
    a87c:	add	x18, x8, #0x1
    a880:	cmp	w18, w15
    a884:	b.ge	aa38 <BZ2_decompress@@Base+0x2d70>  // b.tcont
    a888:	add	x8, x21, x18
    a88c:	mov	w9, #0x1ecc                	// #7884
    a890:	ldrb	w28, [x8, x9]
    a894:	mov	w10, #0xfa0c                	// #64012
    a898:	mov	w8, #0x408                 	// #1032
    a89c:	mov	w9, #0xb17c                	// #45436
    a8a0:	add	x12, x21, x28, lsl #2
    a8a4:	madd	x8, x28, x8, x21
    a8a8:	ldr	w24, [x12, x10]
    a8ac:	add	x9, x8, x9
    a8b0:	mov	w11, #0xe1dc                	// #57820
    a8b4:	stur	x9, [x29, #-24]
    a8b8:	mov	w9, #0xc9ac                	// #51628
    a8bc:	add	x7, x8, x11
    a8c0:	add	x23, x8, x9
    a8c4:	mov	w2, #0x32                  	// #50
    a8c8:	sub	w2, w2, #0x1
    a8cc:	mov	w16, w24
    a8d0:	ldr	w8, [x21, #36]
    a8d4:	mov	w9, #0x26                  	// #38
    a8d8:	str	w9, [x21, #8]
    a8dc:	cmp	w8, w16
    a8e0:	b.ge	a944 <BZ2_decompress@@Base+0x2c7c>  // b.tcont
    a8e4:	ldr	x9, [x21]
    a8e8:	ldr	w10, [x9, #8]
    a8ec:	sub	w11, w10, #0x1
    a8f0:	b	a900 <BZ2_decompress@@Base+0x2c38>
    a8f4:	cmp	w8, w16
    a8f8:	sub	w11, w11, #0x1
    a8fc:	b.ge	a948 <BZ2_decompress@@Base+0x2c80>  // b.tcont
    a900:	cmn	w11, #0x1
    a904:	b.eq	9408 <BZ2_decompress@@Base+0x1740>  // b.none
    a908:	ldr	x12, [x9]
    a90c:	ldr	w13, [x21, #32]
    a910:	add	w8, w8, #0x8
    a914:	ldrb	w10, [x12], #1
    a918:	bfi	w10, w13, #8, #24
    a91c:	stp	w10, w8, [x21, #32]
    a920:	ldr	w13, [x9, #12]
    a924:	str	x12, [x9]
    a928:	adds	w12, w13, #0x1
    a92c:	stp	w11, w12, [x9, #8]
    a930:	b.cc	a8f4 <BZ2_decompress@@Base+0x2c2c>  // b.lo, b.ul, b.last
    a934:	ldr	w12, [x9, #16]
    a938:	add	w12, w12, #0x1
    a93c:	str	w12, [x9, #16]
    a940:	b	a8f4 <BZ2_decompress@@Base+0x2c2c>
    a944:	ldr	w10, [x21, #32]
    a948:	sub	w8, w8, w16
    a94c:	mov	w9, #0xffffffff            	// #-1
    a950:	lsr	w10, w10, w8
    a954:	lsl	w9, w9, w16
    a958:	bic	w30, w10, w9
    a95c:	str	w8, [x21, #36]
    a960:	cmp	w16, #0x14
    a964:	b.gt	9414 <BZ2_decompress@@Base+0x174c>
    a968:	ldur	x9, [x29, #-24]
    a96c:	ldr	w9, [x9, w16, sxtw #2]
    a970:	cmp	w30, w9
    a974:	b.le	a980 <BZ2_decompress@@Base+0x2cb8>
    a978:	add	w16, w16, #0x1
    a97c:	b	92e0 <BZ2_decompress@@Base+0x1618>
    a980:	sxtw	x8, w16
    a984:	ldr	w8, [x23, x8, lsl #2]
    a988:	sub	w8, w30, w8
    a98c:	cmp	w8, #0x101
    a990:	b.hi	9414 <BZ2_decompress@@Base+0x174c>  // b.pmore
    a994:	ldr	w4, [x7, w8, uxtw #2]
    a998:	cmp	w4, #0x2
    a99c:	b.cc	a848 <BZ2_decompress@@Base+0x2b80>  // b.lo, b.ul, b.last
    a9a0:	ldrsw	x8, [x21, #7820]
    a9a4:	add	x8, x21, x8
    a9a8:	ldrb	w8, [x8, #3724]
    a9ac:	add	x8, x21, x8
    a9b0:	ldrb	w9, [x8, #3468]
    a9b4:	add	w8, w26, #0x1
    a9b8:	add	x10, x21, x9, lsl #2
    a9bc:	ldr	w11, [x10, #68]
    a9c0:	add	w11, w11, w8
    a9c4:	str	w11, [x10, #68]
    a9c8:	ldrb	w10, [x21, #44]
    a9cc:	cbz	w10, a9fc <BZ2_decompress@@Base+0x2d34>
    a9d0:	tbnz	w26, #31, aa24 <BZ2_decompress@@Base+0x2d5c>
    a9d4:	sxtw	x17, w17
    a9d8:	sxtw	x10, w19
    a9dc:	cmp	x17, x10
    a9e0:	b.ge	aa2c <BZ2_decompress@@Base+0x2d64>  // b.tcont
    a9e4:	ldr	x11, [x21, #3160]
    a9e8:	subs	w8, w8, #0x1
    a9ec:	strh	w9, [x11, x17, lsl #1]
    a9f0:	add	x17, x17, #0x1
    a9f4:	b.gt	a9dc <BZ2_decompress@@Base+0x2d14>
    a9f8:	b	aa24 <BZ2_decompress@@Base+0x2d5c>
    a9fc:	tbnz	w26, #31, aa24 <BZ2_decompress@@Base+0x2d5c>
    aa00:	sxtw	x17, w17
    aa04:	sxtw	x10, w19
    aa08:	cmp	x17, x10
    aa0c:	b.ge	aa2c <BZ2_decompress@@Base+0x2d64>  // b.tcont
    aa10:	ldr	x11, [x21, #3152]
    aa14:	subs	w8, w8, #0x1
    aa18:	str	w9, [x11, x17, lsl #2]
    aa1c:	add	x17, x17, #0x1
    aa20:	b.gt	aa08 <BZ2_decompress@@Base+0x2d40>
    aa24:	mov	w26, w8
    aa28:	b	9eb4 <BZ2_decompress@@Base+0x21ec>
    aa2c:	mov	w0, #0xfffffffc            	// #-4
    aa30:	mov	w26, w8
    aa34:	b	9418 <BZ2_decompress@@Base+0x1750>
    aa38:	mov	w2, wzr
    aa3c:	b	9414 <BZ2_decompress@@Base+0x174c>

000000000000aa40 <BZ2_bz__AssertH__fail@@Base>:
    aa40:	stp	x29, x30, [sp, #-32]!
    aa44:	stp	x20, x19, [sp, #16]
    aa48:	mov	x29, sp
    aa4c:	adrp	x20, 1e000 <BZ2_bzerror@@Base+0x1092c>
    aa50:	ldr	x20, [x20, #4016]
    aa54:	mov	w19, w0
    aa58:	adrp	x1, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    aa5c:	adrp	x3, e000 <BZ2_bzerror@@Base+0x92c>
    aa60:	ldr	x8, [x20]
    aa64:	add	x1, x1, #0xc00
    aa68:	add	x3, x3, #0x207
    aa6c:	mov	w2, w19
    aa70:	mov	x0, x8
    aa74:	bl	1610 <fprintf@plt>
    aa78:	cmp	w19, #0x3ef
    aa7c:	b.ne	aa98 <BZ2_bz__AssertH__fail@@Base+0x58>  // b.any
    aa80:	ldr	x3, [x20]
    aa84:	adrp	x0, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    aa88:	add	x0, x0, #0xd9d
    aa8c:	mov	w1, #0x420                 	// #1056
    aa90:	mov	w2, #0x1                   	// #1
    aa94:	bl	15b0 <fwrite@plt>
    aa98:	mov	w0, #0x3                   	// #3
    aa9c:	bl	1440 <exit@plt>

000000000000aaa0 <BZ2_bzlibVersion@@Base>:
    aaa0:	adrp	x0, e000 <BZ2_bzerror@@Base+0x92c>
    aaa4:	add	x0, x0, #0x207
    aaa8:	ret

000000000000aaac <BZ2_bzCompressInit@@Base>:
    aaac:	stp	x29, x30, [sp, #-64]!
    aab0:	stp	x24, x23, [sp, #16]
    aab4:	stp	x22, x21, [sp, #32]
    aab8:	stp	x20, x19, [sp, #48]
    aabc:	mov	x29, sp
    aac0:	mov	x19, x0
    aac4:	cmp	w3, #0xfa
    aac8:	mov	w0, #0xfffffffe            	// #-2
    aacc:	b.hi	ac78 <BZ2_bzCompressInit@@Base+0x1cc>  // b.pmore
    aad0:	cbz	x19, ac78 <BZ2_bzCompressInit@@Base+0x1cc>
    aad4:	sub	w8, w1, #0x1
    aad8:	mov	w21, w1
    aadc:	cmp	w8, #0x8
    aae0:	b.hi	ac78 <BZ2_bzCompressInit@@Base+0x1cc>  // b.pmore
    aae4:	ldr	x8, [x19, #56]
    aae8:	cmp	w3, #0x0
    aaec:	mov	w9, #0x1e                  	// #30
    aaf0:	mov	w22, w2
    aaf4:	csel	w24, w9, w3, eq  // eq = none
    aaf8:	cbz	x8, ac28 <BZ2_bzCompressInit@@Base+0x17c>
    aafc:	ldr	x9, [x19, #64]
    ab00:	cbnz	x9, ab10 <BZ2_bzCompressInit@@Base+0x64>
    ab04:	adrp	x9, a000 <BZ2_decompress@@Base+0x2338>
    ab08:	add	x9, x9, #0xc98
    ab0c:	str	x9, [x19, #64]
    ab10:	ldr	x0, [x19, #72]
    ab14:	mov	w1, #0xd9d8                	// #55768
    ab18:	mov	w2, #0x1                   	// #1
    ab1c:	blr	x8
    ab20:	cbz	x0, ac74 <BZ2_bzCompressInit@@Base+0x1c8>
    ab24:	str	x19, [x0]
    ab28:	stp	xzr, xzr, [x0, #32]
    ab2c:	str	xzr, [x0, #24]
    ab30:	mov	x20, x0
    ab34:	ldr	x8, [x19, #56]
    ab38:	ldr	x0, [x19, #72]
    ab3c:	mov	w9, #0x1a80                	// #6784
    ab40:	movk	w9, #0x6, lsl #16
    ab44:	mul	w23, w21, w9
    ab48:	mov	w2, #0x1                   	// #1
    ab4c:	mov	w1, w23
    ab50:	blr	x8
    ab54:	str	x0, [x20, #24]
    ab58:	ldr	x8, [x19, #56]
    ab5c:	ldr	x0, [x19, #72]
    ab60:	add	w1, w23, #0x88
    ab64:	mov	w2, #0x1                   	// #1
    ab68:	blr	x8
    ab6c:	str	x0, [x20, #32]
    ab70:	ldr	x8, [x19, #56]
    ab74:	ldr	x0, [x19, #72]
    ab78:	mov	w1, #0x40004               	// #262148
    ab7c:	mov	w2, #0x1                   	// #1
    ab80:	blr	x8
    ab84:	ldr	x1, [x20, #24]
    ab88:	str	x0, [x20, #40]
    ab8c:	cbz	x1, ac48 <BZ2_bzCompressInit@@Base+0x19c>
    ab90:	cbz	x0, ac40 <BZ2_bzCompressInit@@Base+0x194>
    ab94:	ldr	x8, [x20, #32]
    ab98:	cbz	x8, ac40 <BZ2_bzCompressInit@@Base+0x194>
    ab9c:	mov	w9, #0x86a0                	// #34464
    aba0:	movk	w9, #0x1, lsl #16
    aba4:	movi	v0.2s, #0x2
    aba8:	mul	w9, w21, w9
    abac:	stp	x1, x8, [x20, #56]
    abb0:	movi	v1.2d, #0x0
    abb4:	adrp	x8, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    abb8:	str	d0, [x20, #8]
    abbc:	movi	d0, #0xffffffff
    abc0:	sub	w9, w9, #0x13
    abc4:	str	w22, [x20, #656]
    abc8:	str	w21, [x20, #664]
    abcc:	str	w24, [x20, #88]
    abd0:	stp	x1, xzr, [x20, #72]
    abd4:	str	w9, [x20, #112]
    abd8:	str	x20, [x19, #48]
    abdc:	stur	d1, [x19, #12]
    abe0:	stur	d1, [x19, #36]
    abe4:	str	d0, [x20, #648]
    abe8:	ldr	d0, [x8, #3064]
    abec:	mov	w0, wzr
    abf0:	mov	w10, #0x1                   	// #1
    abf4:	str	wzr, [x20, #108]
    abf8:	stur	d1, [x20, #116]
    abfc:	stp	q1, q1, [x20, #128]
    ac00:	stp	q1, q1, [x20, #160]
    ac04:	stp	q1, q1, [x20, #192]
    ac08:	stp	q1, q1, [x20, #224]
    ac0c:	stp	q1, q1, [x20, #256]
    ac10:	stp	q1, q1, [x20, #288]
    ac14:	stp	q1, q1, [x20, #320]
    ac18:	stp	q1, q1, [x20, #352]
    ac1c:	stur	d0, [x20, #92]
    ac20:	str	w10, [x20, #660]
    ac24:	b	ac78 <BZ2_bzCompressInit@@Base+0x1cc>
    ac28:	adrp	x8, a000 <BZ2_decompress@@Base+0x2338>
    ac2c:	add	x8, x8, #0xc8c
    ac30:	str	x8, [x19, #56]
    ac34:	ldr	x9, [x19, #64]
    ac38:	cbnz	x9, ab10 <BZ2_bzCompressInit@@Base+0x64>
    ac3c:	b	ab04 <BZ2_bzCompressInit@@Base+0x58>
    ac40:	ldp	x8, x0, [x19, #64]
    ac44:	blr	x8
    ac48:	ldr	x1, [x20, #32]
    ac4c:	cbz	x1, ac58 <BZ2_bzCompressInit@@Base+0x1ac>
    ac50:	ldp	x8, x0, [x19, #64]
    ac54:	blr	x8
    ac58:	ldr	x1, [x20, #40]
    ac5c:	cbz	x1, ac68 <BZ2_bzCompressInit@@Base+0x1bc>
    ac60:	ldp	x8, x0, [x19, #64]
    ac64:	blr	x8
    ac68:	ldp	x8, x0, [x19, #64]
    ac6c:	mov	x1, x20
    ac70:	blr	x8
    ac74:	mov	w0, #0xfffffffd            	// #-3
    ac78:	ldp	x20, x19, [sp, #48]
    ac7c:	ldp	x22, x21, [sp, #32]
    ac80:	ldp	x24, x23, [sp, #16]
    ac84:	ldp	x29, x30, [sp], #64
    ac88:	ret
    ac8c:	mul	w8, w2, w1
    ac90:	sxtw	x0, w8
    ac94:	b	1480 <malloc@plt>
    ac98:	cbz	x1, aca4 <BZ2_bzCompressInit@@Base+0x1f8>
    ac9c:	mov	x0, x1
    aca0:	b	1540 <free@plt>
    aca4:	ret

000000000000aca8 <BZ2_bzCompress@@Base>:
    aca8:	stp	x29, x30, [sp, #-32]!
    acac:	str	x19, [sp, #16]
    acb0:	mov	x29, sp
    acb4:	cbz	x0, acd0 <BZ2_bzCompress@@Base+0x28>
    acb8:	ldr	x19, [x0, #48]
    acbc:	mov	x8, x0
    acc0:	cbz	x19, acd0 <BZ2_bzCompress@@Base+0x28>
    acc4:	ldr	x9, [x19]
    acc8:	cmp	x9, x8
    accc:	b.eq	ace0 <BZ2_bzCompress@@Base+0x38>  // b.none
    acd0:	mov	w0, #0xfffffffe            	// #-2
    acd4:	ldr	x19, [sp, #16]
    acd8:	ldp	x29, x30, [sp], #32
    acdc:	ret
    ace0:	ldr	w9, [x19, #8]
    ace4:	mov	w0, #0xffffffff            	// #-1
    ace8:	b	acfc <BZ2_bzCompress@@Base+0x54>
    acec:	mov	w9, #0x3                   	// #3
    acf0:	ldr	w10, [x8, #8]
    acf4:	str	w9, [x19, #8]
    acf8:	str	w10, [x19, #16]
    acfc:	cmp	w9, #0x2
    ad00:	b.ne	ad1c <BZ2_bzCompress@@Base+0x74>  // b.any
    ad04:	cmp	w1, #0x1
    ad08:	b.eq	acec <BZ2_bzCompress@@Base+0x44>  // b.none
    ad0c:	cmp	w1, #0x2
    ad10:	b.ne	ad6c <BZ2_bzCompress@@Base+0xc4>  // b.any
    ad14:	mov	w9, #0x4                   	// #4
    ad18:	b	acf0 <BZ2_bzCompress@@Base+0x48>
    ad1c:	cmp	w9, #0x1
    ad20:	b.eq	acd4 <BZ2_bzCompress@@Base+0x2c>  // b.none
    ad24:	cmp	w9, #0x3
    ad28:	b.eq	ad8c <BZ2_bzCompress@@Base+0xe4>  // b.none
    ad2c:	cmp	w9, #0x4
    ad30:	b.ne	adc4 <BZ2_bzCompress@@Base+0x11c>  // b.any
    ad34:	cmp	w1, #0x2
    ad38:	b.ne	adbc <BZ2_bzCompress@@Base+0x114>  // b.any
    ad3c:	ldr	w9, [x19, #16]
    ad40:	ldr	w10, [x8, #8]
    ad44:	cmp	w9, w10
    ad48:	b.ne	adbc <BZ2_bzCompress@@Base+0x114>  // b.any
    ad4c:	mov	x0, x8
    ad50:	bl	ae34 <BZ2_bzCompress@@Base+0x18c>
    ad54:	tst	w0, #0xff
    ad58:	b.eq	adbc <BZ2_bzCompress@@Base+0x114>  // b.none
    ad5c:	ldr	w8, [x19, #16]
    ad60:	cbz	w8, ae00 <BZ2_bzCompress@@Base+0x158>
    ad64:	mov	w0, #0x3                   	// #3
    ad68:	b	acd4 <BZ2_bzCompress@@Base+0x2c>
    ad6c:	mov	w0, #0xfffffffe            	// #-2
    ad70:	cbnz	w1, acd4 <BZ2_bzCompress@@Base+0x2c>
    ad74:	mov	x0, x8
    ad78:	bl	ae34 <BZ2_bzCompress@@Base+0x18c>
    ad7c:	tst	w0, #0xff
    ad80:	mov	w8, #0xfffffffe            	// #-2
    ad84:	cinv	w0, w8, ne  // ne = any
    ad88:	b	acd4 <BZ2_bzCompress@@Base+0x2c>
    ad8c:	cmp	w1, #0x1
    ad90:	b.ne	adbc <BZ2_bzCompress@@Base+0x114>  // b.any
    ad94:	ldr	w9, [x19, #16]
    ad98:	ldr	w10, [x8, #8]
    ad9c:	cmp	w9, w10
    ada0:	b.ne	adbc <BZ2_bzCompress@@Base+0x114>  // b.any
    ada4:	mov	x0, x8
    ada8:	bl	ae34 <BZ2_bzCompress@@Base+0x18c>
    adac:	ldr	w8, [x19, #16]
    adb0:	cbz	w8, adcc <BZ2_bzCompress@@Base+0x124>
    adb4:	mov	w0, #0x2                   	// #2
    adb8:	b	acd4 <BZ2_bzCompress@@Base+0x2c>
    adbc:	mov	w0, #0xffffffff            	// #-1
    adc0:	b	acd4 <BZ2_bzCompress@@Base+0x2c>
    adc4:	mov	w0, wzr
    adc8:	b	acd4 <BZ2_bzCompress@@Base+0x2c>
    adcc:	ldr	w8, [x19, #92]
    add0:	cmp	w8, #0xff
    add4:	b.hi	ade4 <BZ2_bzCompress@@Base+0x13c>  // b.pmore
    add8:	ldr	w8, [x19, #96]
    addc:	cmp	w8, #0x0
    ade0:	b.gt	adb4 <BZ2_bzCompress@@Base+0x10c>
    ade4:	ldp	w9, w8, [x19, #116]
    ade8:	mov	w0, #0x2                   	// #2
    adec:	cmp	w8, w9
    adf0:	b.lt	acd4 <BZ2_bzCompress@@Base+0x2c>  // b.tstop
    adf4:	str	w0, [x19, #8]
    adf8:	mov	w0, #0x1                   	// #1
    adfc:	b	acd4 <BZ2_bzCompress@@Base+0x2c>
    ae00:	ldr	w8, [x19, #92]
    ae04:	cmp	w8, #0xff
    ae08:	b.hi	ae18 <BZ2_bzCompress@@Base+0x170>  // b.pmore
    ae0c:	ldr	w8, [x19, #96]
    ae10:	cmp	w8, #0x0
    ae14:	b.gt	ad64 <BZ2_bzCompress@@Base+0xbc>
    ae18:	ldp	w9, w8, [x19, #116]
    ae1c:	cmp	w8, w9
    ae20:	b.lt	ad64 <BZ2_bzCompress@@Base+0xbc>  // b.tstop
    ae24:	mov	w8, #0x1                   	// #1
    ae28:	str	w8, [x19, #8]
    ae2c:	mov	w0, #0x4                   	// #4
    ae30:	b	acd4 <BZ2_bzCompress@@Base+0x2c>
    ae34:	str	d8, [sp, #-96]!
    ae38:	stp	x29, x30, [sp, #8]
    ae3c:	str	x27, [sp, #24]
    ae40:	stp	x26, x25, [sp, #32]
    ae44:	stp	x24, x23, [sp, #48]
    ae48:	stp	x22, x21, [sp, #64]
    ae4c:	stp	x20, x19, [sp, #80]
    ae50:	mov	x29, sp
    ae54:	ldr	x19, [x0, #48]
    ae58:	adrp	x23, 1e000 <BZ2_bzerror@@Base+0x1092c>
    ae5c:	adrp	x8, d000 <BZ2_bzBuffToBuffCompress@@Base+0x298>
    ae60:	ldr	x23, [x23, #4024]
    ae64:	ldr	d8, [x8, #3064]
    ae68:	mov	w20, wzr
    ae6c:	mov	w21, wzr
    ae70:	mov	w22, #0x1                   	// #1
    ae74:	mov	w24, #0xffffffff            	// #-1
    ae78:	add	x25, x19, #0x80
    ae7c:	mov	w26, #0x2                   	// #2
    ae80:	b	ae90 <BZ2_bzCompress@@Base+0x1e8>
    ae84:	ldr	x8, [x19]
    ae88:	ldr	w8, [x8, #8]
    ae8c:	cbz	w8, b214 <BZ2_bzCompress@@Base+0x56c>
    ae90:	ldr	w8, [x19, #12]
    ae94:	cmp	w8, #0x2
    ae98:	b.eq	afcc <BZ2_bzCompress@@Base+0x324>  // b.none
    ae9c:	cmp	w8, #0x1
    aea0:	b.ne	ae94 <BZ2_bzCompress@@Base+0x1ec>  // b.any
    aea4:	ldr	x9, [x19]
    aea8:	ldr	w8, [x19, #120]
    aeac:	ldr	w10, [x9, #32]
    aeb0:	cbz	w10, af24 <BZ2_bzCompress@@Base+0x27c>
    aeb4:	ldr	w10, [x19, #116]
    aeb8:	cmp	w8, w10
    aebc:	b.ge	af24 <BZ2_bzCompress@@Base+0x27c>  // b.tcont
    aec0:	ldr	x9, [x9, #24]
    aec4:	ldr	x10, [x19, #80]
    aec8:	ldrb	w8, [x10, w8, sxtw]
    aecc:	strb	w8, [x9]
    aed0:	ldr	w8, [x19, #120]
    aed4:	ldr	x10, [x19]
    aed8:	add	w8, w8, #0x1
    aedc:	str	w8, [x19, #120]
    aee0:	ldp	w9, w13, [x10, #32]
    aee4:	ldr	x12, [x10, #24]
    aee8:	sub	w11, w9, #0x1
    aeec:	add	x9, x12, #0x1
    aef0:	adds	w12, w13, #0x1
    aef4:	stp	w11, w12, [x10, #32]
    aef8:	str	x9, [x10, #24]
    aefc:	b.cc	af0c <BZ2_bzCompress@@Base+0x264>  // b.lo, b.ul, b.last
    af00:	ldr	w12, [x10, #40]
    af04:	add	w12, w12, #0x1
    af08:	str	w12, [x10, #40]
    af0c:	cbz	w11, af1c <BZ2_bzCompress@@Base+0x274>
    af10:	ldr	w10, [x19, #116]
    af14:	cmp	w8, w10
    af18:	b.lt	aec4 <BZ2_bzCompress@@Base+0x21c>  // b.tstop
    af1c:	mov	w9, #0x1                   	// #1
    af20:	b	af28 <BZ2_bzCompress@@Base+0x280>
    af24:	mov	w9, wzr
    af28:	ldr	w10, [x19, #116]
    af2c:	orr	w20, w9, w20
    af30:	cmp	w8, w10
    af34:	b.lt	b214 <BZ2_bzCompress@@Base+0x56c>  // b.tstop
    af38:	ldr	w10, [x19, #8]
    af3c:	cmp	w10, #0x4
    af40:	b.ne	af64 <BZ2_bzCompress@@Base+0x2bc>  // b.any
    af44:	ldr	w8, [x19, #16]
    af48:	cbnz	w8, af64 <BZ2_bzCompress@@Base+0x2bc>
    af4c:	ldr	w8, [x19, #92]
    af50:	cmp	w8, #0xff
    af54:	b.hi	b214 <BZ2_bzCompress@@Base+0x56c>  // b.pmore
    af58:	ldr	w8, [x19, #96]
    af5c:	cmp	w8, #0x1
    af60:	b.lt	b214 <BZ2_bzCompress@@Base+0x56c>  // b.tstop
    af64:	movi	v0.2d, #0x0
    af68:	str	wzr, [x19, #108]
    af6c:	stp	wzr, wzr, [x19, #116]
    af70:	str	w24, [x19, #648]
    af74:	stp	q0, q0, [x25, #224]
    af78:	stp	q0, q0, [x25, #192]
    af7c:	stp	q0, q0, [x25, #160]
    af80:	stp	q0, q0, [x25, #128]
    af84:	stp	q0, q0, [x25, #96]
    af88:	stp	q0, q0, [x25, #64]
    af8c:	stp	q0, q0, [x25, #32]
    af90:	stp	q0, q0, [x25]
    af94:	ldr	w8, [x19, #660]
    af98:	cmp	w10, #0x3
    af9c:	str	w26, [x19, #12]
    afa0:	add	w8, w8, #0x1
    afa4:	str	w8, [x19, #660]
    afa8:	b.ne	afd0 <BZ2_bzCompress@@Base+0x328>  // b.any
    afac:	ldr	w8, [x19, #16]
    afb0:	cbnz	w8, afcc <BZ2_bzCompress@@Base+0x324>
    afb4:	ldr	w8, [x19, #92]
    afb8:	cmp	w8, #0xff
    afbc:	b.hi	b214 <BZ2_bzCompress@@Base+0x56c>  // b.pmore
    afc0:	ldr	w8, [x19, #96]
    afc4:	cmp	w8, #0x0
    afc8:	b.le	b214 <BZ2_bzCompress@@Base+0x56c>
    afcc:	ldr	w10, [x19, #8]
    afd0:	ldp	w8, w9, [x19, #108]
    afd4:	cmp	w10, #0x2
    afd8:	b.ne	b0c0 <BZ2_bzCompress@@Base+0x418>  // b.any
    afdc:	cmp	w8, w9
    afe0:	b.ge	b1b4 <BZ2_bzCompress@@Base+0x50c>  // b.tcont
    afe4:	ldr	x10, [x19]
    afe8:	ldr	w11, [x10, #8]
    afec:	cbz	w11, b1b4 <BZ2_bzCompress@@Base+0x50c>
    aff0:	ldr	x12, [x10]
    aff4:	ldr	w11, [x19, #92]
    aff8:	ldrb	w27, [x12]
    affc:	ldr	w9, [x19, #96]
    b000:	cmp	w11, w27
    b004:	b.ne	b01c <BZ2_bzCompress@@Base+0x374>  // b.any
    b008:	cmp	w9, #0xff
    b00c:	b.eq	b060 <BZ2_bzCompress@@Base+0x3b8>  // b.none
    b010:	add	w8, w9, #0x1
    b014:	str	w8, [x19, #96]
    b018:	b	b074 <BZ2_bzCompress@@Base+0x3cc>
    b01c:	cmp	w9, #0x1
    b020:	b.ne	b060 <BZ2_bzCompress@@Base+0x3b8>  // b.any
    b024:	ldr	w9, [x19, #648]
    b028:	and	w10, w11, #0xff
    b02c:	add	x12, x19, w11, uxtw
    b030:	eor	w10, w10, w9, lsr #24
    b034:	ldr	w10, [x23, w10, uxtw #2]
    b038:	eor	w9, w10, w9, lsl #8
    b03c:	str	w9, [x19, #648]
    b040:	strb	w22, [x12, #128]
    b044:	ldr	x9, [x19, #64]
    b048:	strb	w11, [x9, w8, sxtw]
    b04c:	ldr	w8, [x19, #108]
    b050:	str	w27, [x19, #92]
    b054:	add	w8, w8, #0x1
    b058:	str	w8, [x19, #108]
    b05c:	b	b074 <BZ2_bzCompress@@Base+0x3cc>
    b060:	cmp	w11, #0xff
    b064:	b.hi	b070 <BZ2_bzCompress@@Base+0x3c8>  // b.pmore
    b068:	mov	x0, x19
    b06c:	bl	d6f4 <BZ2_bzerror@@Base+0x20>
    b070:	stp	w27, w22, [x19, #92]
    b074:	ldr	x8, [x19]
    b078:	ldr	x9, [x8]
    b07c:	ldp	w10, w11, [x8, #8]
    b080:	add	x12, x9, #0x1
    b084:	sub	w13, w10, #0x1
    b088:	adds	w9, w11, #0x1
    b08c:	str	x12, [x8]
    b090:	stp	w13, w9, [x8, #8]
    b094:	b.cc	b0a4 <BZ2_bzCompress@@Base+0x3fc>  // b.lo, b.ul, b.last
    b098:	ldr	w9, [x8, #16]
    b09c:	add	w9, w9, #0x1
    b0a0:	str	w9, [x8, #16]
    b0a4:	ldp	w8, w9, [x19, #108]
    b0a8:	mov	w10, #0x1                   	// #1
    b0ac:	cmp	w8, w9
    b0b0:	b.ge	b1b8 <BZ2_bzCompress@@Base+0x510>  // b.tcont
    b0b4:	mov	w11, w27
    b0b8:	cbnz	w13, aff8 <BZ2_bzCompress@@Base+0x350>
    b0bc:	b	b1b8 <BZ2_bzCompress@@Base+0x510>
    b0c0:	cmp	w8, w9
    b0c4:	b.ge	b1b4 <BZ2_bzCompress@@Base+0x50c>  // b.tcont
    b0c8:	ldr	x11, [x19]
    b0cc:	ldr	w10, [x11, #8]
    b0d0:	cbz	w10, b1b8 <BZ2_bzCompress@@Base+0x510>
    b0d4:	ldr	w10, [x19, #16]
    b0d8:	cbz	w10, b1b8 <BZ2_bzCompress@@Base+0x510>
    b0dc:	ldr	x9, [x11]
    b0e0:	ldrb	w27, [x9]
    b0e4:	ldp	w9, w10, [x19, #92]
    b0e8:	cmp	w9, w27
    b0ec:	b.ne	b104 <BZ2_bzCompress@@Base+0x45c>  // b.any
    b0f0:	cmp	w10, #0xff
    b0f4:	b.eq	b148 <BZ2_bzCompress@@Base+0x4a0>  // b.none
    b0f8:	add	w8, w10, #0x1
    b0fc:	str	w8, [x19, #96]
    b100:	b	b15c <BZ2_bzCompress@@Base+0x4b4>
    b104:	cmp	w10, #0x1
    b108:	b.ne	b148 <BZ2_bzCompress@@Base+0x4a0>  // b.any
    b10c:	ldr	w10, [x19, #648]
    b110:	and	w11, w9, #0xff
    b114:	add	x12, x19, x9
    b118:	eor	w11, w11, w10, lsr #24
    b11c:	ldr	w11, [x23, w11, uxtw #2]
    b120:	eor	w10, w11, w10, lsl #8
    b124:	str	w10, [x19, #648]
    b128:	strb	w22, [x12, #128]
    b12c:	ldr	x10, [x19, #64]
    b130:	strb	w9, [x10, w8, sxtw]
    b134:	ldr	w8, [x19, #108]
    b138:	str	w27, [x19, #92]
    b13c:	add	w8, w8, #0x1
    b140:	str	w8, [x19, #108]
    b144:	b	b15c <BZ2_bzCompress@@Base+0x4b4>
    b148:	cmp	w9, #0xff
    b14c:	b.hi	b158 <BZ2_bzCompress@@Base+0x4b0>  // b.pmore
    b150:	mov	x0, x19
    b154:	bl	d6f4 <BZ2_bzerror@@Base+0x20>
    b158:	stp	w27, w22, [x19, #92]
    b15c:	ldr	x11, [x19]
    b160:	ldr	x8, [x11]
    b164:	ldp	w9, w10, [x11, #8]
    b168:	add	x8, x8, #0x1
    b16c:	sub	w12, w9, #0x1
    b170:	adds	w9, w10, #0x1
    b174:	str	x8, [x11]
    b178:	stp	w12, w9, [x11, #8]
    b17c:	b.cc	b18c <BZ2_bzCompress@@Base+0x4e4>  // b.lo, b.ul, b.last
    b180:	ldr	w8, [x11, #16]
    b184:	add	w8, w8, #0x1
    b188:	str	w8, [x11, #16]
    b18c:	ldr	w10, [x19, #16]
    b190:	ldp	w8, w9, [x19, #108]
    b194:	sub	w13, w10, #0x1
    b198:	cmp	w8, w9
    b19c:	mov	w10, #0x1                   	// #1
    b1a0:	str	w13, [x19, #16]
    b1a4:	b.ge	b1b8 <BZ2_bzCompress@@Base+0x510>  // b.tcont
    b1a8:	cbz	w12, b1b8 <BZ2_bzCompress@@Base+0x510>
    b1ac:	cbnz	w13, b0dc <BZ2_bzCompress@@Base+0x434>
    b1b0:	b	b1b8 <BZ2_bzCompress@@Base+0x510>
    b1b4:	mov	w10, wzr
    b1b8:	ldr	w11, [x19, #8]
    b1bc:	orr	w21, w10, w21
    b1c0:	cmp	w11, #0x2
    b1c4:	b.eq	b1d0 <BZ2_bzCompress@@Base+0x528>  // b.none
    b1c8:	ldr	w10, [x19, #16]
    b1cc:	cbz	w10, b1e0 <BZ2_bzCompress@@Base+0x538>
    b1d0:	cmp	w8, w9
    b1d4:	b.lt	ae84 <BZ2_bzCompress@@Base+0x1dc>  // b.tstop
    b1d8:	mov	w1, wzr
    b1dc:	b	b204 <BZ2_bzCompress@@Base+0x55c>
    b1e0:	ldr	w8, [x19, #92]
    b1e4:	cmp	w8, #0xff
    b1e8:	b.hi	b1f8 <BZ2_bzCompress@@Base+0x550>  // b.pmore
    b1ec:	mov	x0, x19
    b1f0:	bl	d6f4 <BZ2_bzerror@@Base+0x20>
    b1f4:	ldr	w11, [x19, #8]
    b1f8:	cmp	w11, #0x4
    b1fc:	cset	w1, eq  // eq = none
    b200:	stur	d8, [x19, #92]
    b204:	mov	x0, x19
    b208:	bl	1520 <BZ2_compressBlock@plt>
    b20c:	str	w22, [x19, #12]
    b210:	b	ae90 <BZ2_bzCompress@@Base+0x1e8>
    b214:	orr	w8, w21, w20
    b218:	ldp	x20, x19, [sp, #80]
    b21c:	ldp	x22, x21, [sp, #64]
    b220:	ldp	x24, x23, [sp, #48]
    b224:	ldp	x26, x25, [sp, #32]
    b228:	ldr	x27, [sp, #24]
    b22c:	ldp	x29, x30, [sp, #8]
    b230:	tst	w8, #0xff
    b234:	cset	w0, ne  // ne = any
    b238:	ldr	d8, [sp], #96
    b23c:	ret

000000000000b240 <BZ2_bzCompressEnd@@Base>:
    b240:	stp	x29, x30, [sp, #-32]!
    b244:	stp	x20, x19, [sp, #16]
    b248:	mov	x29, sp
    b24c:	cbz	x0, b268 <BZ2_bzCompressEnd@@Base+0x28>
    b250:	ldr	x20, [x0, #48]
    b254:	mov	x19, x0
    b258:	cbz	x20, b268 <BZ2_bzCompressEnd@@Base+0x28>
    b25c:	ldr	x8, [x20]
    b260:	cmp	x8, x19
    b264:	b.eq	b278 <BZ2_bzCompressEnd@@Base+0x38>  // b.none
    b268:	mov	w0, #0xfffffffe            	// #-2
    b26c:	ldp	x20, x19, [sp, #16]
    b270:	ldp	x29, x30, [sp], #32
    b274:	ret
    b278:	ldr	x1, [x20, #24]
    b27c:	cbz	x1, b288 <BZ2_bzCompressEnd@@Base+0x48>
    b280:	ldp	x8, x0, [x19, #64]
    b284:	blr	x8
    b288:	ldr	x1, [x20, #32]
    b28c:	cbz	x1, b298 <BZ2_bzCompressEnd@@Base+0x58>
    b290:	ldp	x8, x0, [x19, #64]
    b294:	blr	x8
    b298:	ldr	x1, [x20, #40]
    b29c:	cbz	x1, b2a8 <BZ2_bzCompressEnd@@Base+0x68>
    b2a0:	ldp	x8, x0, [x19, #64]
    b2a4:	blr	x8
    b2a8:	ldp	x8, x0, [x19, #64]
    b2ac:	ldr	x1, [x19, #48]
    b2b0:	blr	x8
    b2b4:	mov	w0, wzr
    b2b8:	str	xzr, [x19, #48]
    b2bc:	b	b26c <BZ2_bzCompressEnd@@Base+0x2c>

000000000000b2c0 <BZ2_bzDecompressInit@@Base>:
    b2c0:	stp	x29, x30, [sp, #-48]!
    b2c4:	str	x21, [sp, #16]
    b2c8:	stp	x20, x19, [sp, #32]
    b2cc:	mov	x29, sp
    b2d0:	mov	x21, x0
    b2d4:	cmp	w1, #0x4
    b2d8:	mov	w0, #0xfffffffe            	// #-2
    b2dc:	b.hi	b384 <BZ2_bzDecompressInit@@Base+0xc4>  // b.pmore
    b2e0:	cbz	x21, b384 <BZ2_bzDecompressInit@@Base+0xc4>
    b2e4:	mov	w20, w2
    b2e8:	cmp	w2, #0x1
    b2ec:	b.hi	b384 <BZ2_bzDecompressInit@@Base+0xc4>  // b.pmore
    b2f0:	ldr	x8, [x21, #56]
    b2f4:	mov	w19, w1
    b2f8:	cbz	x8, b35c <BZ2_bzDecompressInit@@Base+0x9c>
    b2fc:	ldr	x9, [x21, #64]
    b300:	cbz	x9, b370 <BZ2_bzDecompressInit@@Base+0xb0>
    b304:	ldr	x0, [x21, #72]
    b308:	mov	w1, #0xfa90                	// #64144
    b30c:	mov	w2, #0x1                   	// #1
    b310:	blr	x8
    b314:	cbz	x0, b380 <BZ2_bzDecompressInit@@Base+0xc0>
    b318:	mov	x8, x0
    b31c:	mov	w0, wzr
    b320:	mov	w9, #0xa                   	// #10
    b324:	movi	v0.2d, #0x0
    b328:	str	x21, [x8]
    b32c:	str	x8, [x21, #48]
    b330:	str	w9, [x8, #8]
    b334:	str	wzr, [x8, #3188]
    b338:	str	d0, [x8, #32]
    b33c:	stur	d0, [x21, #12]
    b340:	stur	d0, [x21, #36]
    b344:	strb	w20, [x8, #44]
    b348:	str	xzr, [x8, #3152]
    b34c:	str	xzr, [x8, #3168]
    b350:	str	xzr, [x8, #3160]
    b354:	stp	wzr, w19, [x8, #48]
    b358:	b	b384 <BZ2_bzDecompressInit@@Base+0xc4>
    b35c:	adrp	x8, a000 <BZ2_decompress@@Base+0x2338>
    b360:	add	x8, x8, #0xc8c
    b364:	str	x8, [x21, #56]
    b368:	ldr	x9, [x21, #64]
    b36c:	cbnz	x9, b304 <BZ2_bzDecompressInit@@Base+0x44>
    b370:	adrp	x9, a000 <BZ2_decompress@@Base+0x2338>
    b374:	add	x9, x9, #0xc98
    b378:	str	x9, [x21, #64]
    b37c:	b	b304 <BZ2_bzDecompressInit@@Base+0x44>
    b380:	mov	w0, #0xfffffffd            	// #-3
    b384:	ldp	x20, x19, [sp, #32]
    b388:	ldr	x21, [sp, #16]
    b38c:	ldp	x29, x30, [sp], #48
    b390:	ret

000000000000b394 <BZ2_indexIntoF@@Base>:
    b394:	mov	w8, w0
    b398:	mov	w0, wzr
    b39c:	mov	w9, #0x100                 	// #256
    b3a0:	add	w10, w0, w9
    b3a4:	asr	w10, w10, #1
    b3a8:	ldr	w11, [x1, w10, sxtw #2]
    b3ac:	cmp	w11, w8
    b3b0:	csel	w9, w10, w9, gt
    b3b4:	csel	w0, w0, w10, gt
    b3b8:	sub	w10, w9, w0
    b3bc:	cmp	w10, #0x1
    b3c0:	b.ne	b3a0 <BZ2_indexIntoF@@Base+0xc>  // b.any
    b3c4:	ret

000000000000b3c8 <BZ2_bzDecompress@@Base>:
    b3c8:	stp	x29, x30, [sp, #-96]!
    b3cc:	stp	x28, x27, [sp, #16]
    b3d0:	stp	x26, x25, [sp, #32]
    b3d4:	stp	x24, x23, [sp, #48]
    b3d8:	stp	x22, x21, [sp, #64]
    b3dc:	stp	x20, x19, [sp, #80]
    b3e0:	mov	x29, sp
    b3e4:	cbz	x0, b3fc <BZ2_bzDecompress@@Base+0x34>
    b3e8:	ldr	x19, [x0, #48]
    b3ec:	cbz	x19, b3fc <BZ2_bzDecompress@@Base+0x34>
    b3f0:	ldr	x8, [x19]
    b3f4:	cmp	x8, x0
    b3f8:	b.eq	b41c <BZ2_bzDecompress@@Base+0x54>  // b.none
    b3fc:	mov	w0, #0xfffffffe            	// #-2
    b400:	ldp	x20, x19, [sp, #80]
    b404:	ldp	x22, x21, [sp, #64]
    b408:	ldp	x24, x23, [sp, #48]
    b40c:	ldp	x26, x25, [sp, #32]
    b410:	ldp	x28, x27, [sp, #16]
    b414:	ldp	x29, x30, [sp], #96
    b418:	ret
    b41c:	adrp	x23, 1e000 <BZ2_bzerror@@Base+0x1092c>
    b420:	adrp	x25, 1e000 <BZ2_bzerror@@Base+0x1092c>
    b424:	adrp	x21, 1e000 <BZ2_bzerror@@Base+0x1092c>
    b428:	ldr	w8, [x19, #8]
    b42c:	ldr	x23, [x23, #4024]
    b430:	ldr	x25, [x25, #4048]
    b434:	ldr	x21, [x21, #4016]
    b438:	mov	w9, #0xfa50                	// #64080
    b43c:	mov	w22, #0x86a0                	// #34464
    b440:	movk	w22, #0x1, lsl #16
    b444:	mov	w24, #0x1                   	// #1
    b448:	mov	w26, #0x2                   	// #2
    b44c:	mov	w27, #0x3                   	// #3
    b450:	add	x28, x19, x9
    b454:	mov	w20, #0xe                   	// #14
    b458:	cmp	w8, #0x1
    b45c:	b.eq	c180 <BZ2_bzDecompress@@Base+0xdb8>  // b.none
    b460:	cmp	w8, #0x2
    b464:	b.eq	b474 <BZ2_bzDecompress@@Base+0xac>  // b.none
    b468:	cmp	w8, #0xa
    b46c:	b.lt	b458 <BZ2_bzDecompress@@Base+0x90>  // b.tstop
    b470:	b	c114 <BZ2_bzDecompress@@Base+0xd4c>
    b474:	ldrb	w8, [x19, #44]
    b478:	ldrb	w9, [x19, #20]
    b47c:	cbz	w8, b8bc <BZ2_bzDecompress@@Base+0x4f4>
    b480:	ldr	x8, [x19]
    b484:	ldr	w10, [x8, #32]
    b488:	cbz	w9, bb84 <BZ2_bzDecompress@@Base+0x7bc>
    b48c:	cbz	w10, c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    b490:	ldr	w13, [x19, #16]
    b494:	b	b4a8 <BZ2_bzDecompress@@Base+0xe0>
    b498:	str	w16, [x19, #64]
    b49c:	mov	w13, #0x1                   	// #1
    b4a0:	ldr	w9, [x8, #32]
    b4a4:	cbz	w9, c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    b4a8:	cbnz	w13, b6f4 <BZ2_bzDecompress@@Base+0x32c>
    b4ac:	ldr	w13, [x28]
    b4b0:	ldr	w9, [x19, #1092]
    b4b4:	add	w10, w13, #0x1
    b4b8:	cmp	w9, w10
    b4bc:	b.eq	c0b8 <BZ2_bzDecompress@@Base+0xcf0>  // b.none
    b4c0:	b.gt	c188 <BZ2_bzDecompress@@Base+0xdc0>
    b4c4:	ldr	w10, [x19, #40]
    b4c8:	ldp	w15, w14, [x19, #60]
    b4cc:	str	w24, [x19, #16]
    b4d0:	mul	w12, w10, w22
    b4d4:	cmp	w15, w12
    b4d8:	strb	w14, [x19, #12]
    b4dc:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b4e0:	mov	w16, wzr
    b4e4:	mov	w10, #0x100                 	// #256
    b4e8:	add	w11, w16, w10
    b4ec:	asr	w11, w11, #1
    b4f0:	add	x17, x19, w11, sxtw #2
    b4f4:	ldr	w17, [x17, #1096]
    b4f8:	cmp	w17, w15
    b4fc:	csel	w10, w11, w10, gt
    b500:	csel	w16, w16, w11, gt
    b504:	sub	w11, w10, w16
    b508:	cmp	w11, #0x1
    b50c:	b.ne	b4e8 <BZ2_bzDecompress@@Base+0x120>  // b.any
    b510:	ldr	x11, [x19, #3168]
    b514:	ldr	x10, [x19, #3160]
    b518:	lsr	x17, x15, #1
    b51c:	ldrb	w18, [x11, x17]
    b520:	lsl	w17, w15, #2
    b524:	and	x0, x17, #0x4
    b528:	ldrh	w17, [x10, x15, lsl #1]
    b52c:	lsr	x18, x18, x0
    b530:	ldr	w15, [x19, #24]
    b534:	lsl	w18, w18, #16
    b538:	and	x18, x18, #0xf0000
    b53c:	orr	x1, x18, x17
    b540:	str	w1, [x19, #60]
    b544:	cbnz	w15, b560 <BZ2_bzDecompress@@Base+0x198>
    b548:	ldrsw	x18, [x19, #28]
    b54c:	ldr	w15, [x25, x18, lsl #2]
    b550:	add	w0, w18, #0x1
    b554:	cmp	w0, #0x200
    b558:	csinc	w18, wzr, w18, eq  // eq = none
    b55c:	stp	w15, w18, [x19, #24]
    b560:	sub	w18, w15, #0x1
    b564:	add	w15, w9, #0x1
    b568:	cmp	w9, w13
    b56c:	str	w18, [x19, #24]
    b570:	str	w15, [x19, #1092]
    b574:	b.eq	b49c <BZ2_bzDecompress@@Base+0xd4>  // b.none
    b578:	cmp	w18, #0x1
    b57c:	cset	w0, eq  // eq = none
    b580:	and	w16, w16, #0xff
    b584:	eor	w16, w16, w0
    b588:	cmp	w16, w14
    b58c:	b.ne	b498 <BZ2_bzDecompress@@Base+0xd0>  // b.any
    b590:	cmp	w1, w12
    b594:	str	w26, [x19, #16]
    b598:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b59c:	mov	w0, wzr
    b5a0:	mov	w16, #0x100                 	// #256
    b5a4:	add	w2, w0, w16
    b5a8:	asr	w2, w2, #1
    b5ac:	add	x3, x19, w2, sxtw #2
    b5b0:	ldr	w3, [x3, #1096]
    b5b4:	cmp	w3, w1
    b5b8:	csel	w16, w2, w16, gt
    b5bc:	csel	w0, w0, w2, gt
    b5c0:	sub	w2, w16, w0
    b5c4:	cmp	w2, #0x1
    b5c8:	b.ne	b5a4 <BZ2_bzDecompress@@Base+0x1dc>  // b.any
    b5cc:	lsr	x16, x1, #1
    b5d0:	ldrb	w2, [x11, x16]
    b5d4:	lsl	w17, w17, #2
    b5d8:	ldrh	w16, [x10, x1, lsl #1]
    b5dc:	and	x17, x17, #0x4
    b5e0:	lsr	x17, x2, x17
    b5e4:	lsl	w17, w17, #16
    b5e8:	and	x17, x17, #0xf0000
    b5ec:	orr	x1, x17, x16
    b5f0:	str	w1, [x19, #60]
    b5f4:	cbnz	w18, b610 <BZ2_bzDecompress@@Base+0x248>
    b5f8:	ldrsw	x17, [x19, #28]
    b5fc:	ldr	w18, [x25, x17, lsl #2]
    b600:	add	w2, w17, #0x1
    b604:	cmp	w2, #0x200
    b608:	csinc	w17, wzr, w17, eq  // eq = none
    b60c:	stp	w18, w17, [x19, #24]
    b610:	sub	w18, w18, #0x1
    b614:	add	w17, w9, #0x2
    b618:	cmp	w15, w13
    b61c:	str	w18, [x19, #24]
    b620:	str	w17, [x19, #1092]
    b624:	b.ne	b630 <BZ2_bzDecompress@@Base+0x268>  // b.any
    b628:	mov	w13, #0x2                   	// #2
    b62c:	b	b4a0 <BZ2_bzDecompress@@Base+0xd8>
    b630:	cmp	w18, #0x1
    b634:	cset	w15, eq  // eq = none
    b638:	and	w0, w0, #0xff
    b63c:	eor	w15, w0, w15
    b640:	cmp	w15, w14
    b644:	b.ne	b6e8 <BZ2_bzDecompress@@Base+0x320>  // b.any
    b648:	cmp	w1, w12
    b64c:	str	w27, [x19, #16]
    b650:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b654:	mov	w0, wzr
    b658:	mov	w15, #0x100                 	// #256
    b65c:	add	w2, w0, w15
    b660:	asr	w2, w2, #1
    b664:	add	x3, x19, w2, sxtw #2
    b668:	ldr	w3, [x3, #1096]
    b66c:	cmp	w3, w1
    b670:	csel	w15, w2, w15, gt
    b674:	csel	w0, w0, w2, gt
    b678:	sub	w2, w15, w0
    b67c:	cmp	w2, #0x1
    b680:	b.ne	b65c <BZ2_bzDecompress@@Base+0x294>  // b.any
    b684:	lsr	x15, x1, #1
    b688:	ldrb	w2, [x11, x15]
    b68c:	lsl	w16, w16, #2
    b690:	ldrh	w15, [x10, x1, lsl #1]
    b694:	and	x16, x16, #0x4
    b698:	lsr	x16, x2, x16
    b69c:	lsl	w16, w16, #16
    b6a0:	and	x16, x16, #0xf0000
    b6a4:	orr	x1, x16, x15
    b6a8:	str	w1, [x19, #60]
    b6ac:	cbnz	w18, b6c8 <BZ2_bzDecompress@@Base+0x300>
    b6b0:	ldrsw	x16, [x19, #28]
    b6b4:	ldr	w18, [x25, x16, lsl #2]
    b6b8:	add	w2, w16, #0x1
    b6bc:	cmp	w2, #0x200
    b6c0:	csinc	w16, wzr, w16, eq  // eq = none
    b6c4:	stp	w18, w16, [x19, #24]
    b6c8:	sub	w16, w18, #0x1
    b6cc:	add	w18, w9, #0x3
    b6d0:	cmp	w17, w13
    b6d4:	str	w16, [x19, #24]
    b6d8:	str	w18, [x19, #1092]
    b6dc:	b.ne	b75c <BZ2_bzDecompress@@Base+0x394>  // b.any
    b6e0:	mov	w13, #0x3                   	// #3
    b6e4:	b	b4a0 <BZ2_bzDecompress@@Base+0xd8>
    b6e8:	str	w15, [x19, #64]
    b6ec:	mov	w13, #0x2                   	// #2
    b6f0:	b	b4a0 <BZ2_bzDecompress@@Base+0xd8>
    b6f4:	ldrb	w9, [x19, #12]
    b6f8:	ldr	x8, [x8, #24]
    b6fc:	strb	w9, [x8]
    b700:	ldr	w9, [x19, #3184]
    b704:	ldrb	w8, [x19, #12]
    b708:	ldr	w10, [x19, #16]
    b70c:	eor	w8, w8, w9, lsr #24
    b710:	ldr	w11, [x23, w8, uxtw #2]
    b714:	ldr	x8, [x19]
    b718:	sub	w13, w10, #0x1
    b71c:	str	w13, [x19, #16]
    b720:	eor	w9, w11, w9, lsl #8
    b724:	str	w9, [x19, #3184]
    b728:	ldr	x9, [x8, #24]
    b72c:	ldp	w10, w11, [x8, #32]
    b730:	add	x9, x9, #0x1
    b734:	str	x9, [x8, #24]
    b738:	sub	w9, w10, #0x1
    b73c:	adds	w10, w11, #0x1
    b740:	stp	w9, w10, [x8, #32]
    b744:	b.cc	b754 <BZ2_bzDecompress@@Base+0x38c>  // b.lo, b.ul, b.last
    b748:	ldr	w10, [x8, #40]
    b74c:	add	w10, w10, #0x1
    b750:	str	w10, [x8, #40]
    b754:	cbnz	w9, b4a8 <BZ2_bzDecompress@@Base+0xe0>
    b758:	b	c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    b75c:	cmp	w16, #0x1
    b760:	cset	w13, eq  // eq = none
    b764:	and	w17, w0, #0xff
    b768:	eor	w13, w17, w13
    b76c:	cmp	w13, w14
    b770:	b.ne	b8b0 <BZ2_bzDecompress@@Base+0x4e8>  // b.any
    b774:	cmp	w1, w12
    b778:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b77c:	mov	w13, wzr
    b780:	mov	w14, #0x100                 	// #256
    b784:	add	w17, w13, w14
    b788:	asr	w17, w17, #1
    b78c:	add	x18, x19, w17, sxtw #2
    b790:	ldr	w18, [x18, #1096]
    b794:	cmp	w18, w1
    b798:	csel	w14, w17, w14, gt
    b79c:	csel	w13, w13, w17, gt
    b7a0:	sub	w17, w14, w13
    b7a4:	cmp	w17, #0x1
    b7a8:	b.ne	b784 <BZ2_bzDecompress@@Base+0x3bc>  // b.any
    b7ac:	lsr	x14, x1, #1
    b7b0:	ldrb	w17, [x11, x14]
    b7b4:	lsl	w15, w15, #2
    b7b8:	ldrh	w14, [x10, x1, lsl #1]
    b7bc:	and	x15, x15, #0x4
    b7c0:	lsr	x15, x17, x15
    b7c4:	lsl	w15, w15, #16
    b7c8:	and	x15, x15, #0xf0000
    b7cc:	orr	x15, x15, x14
    b7d0:	str	w15, [x19, #60]
    b7d4:	cbnz	w16, b7f0 <BZ2_bzDecompress@@Base+0x428>
    b7d8:	ldrsw	x17, [x19, #28]
    b7dc:	ldr	w16, [x25, x17, lsl #2]
    b7e0:	add	w18, w17, #0x1
    b7e4:	cmp	w18, #0x200
    b7e8:	csinc	w17, wzr, w17, eq  // eq = none
    b7ec:	stp	w16, w17, [x19, #24]
    b7f0:	sub	w16, w16, #0x1
    b7f4:	add	w17, w9, #0x4
    b7f8:	cmp	w16, #0x1
    b7fc:	and	w13, w13, #0xff
    b800:	str	w17, [x19, #1092]
    b804:	cset	w17, eq  // eq = none
    b808:	eor	w13, w13, w17
    b80c:	add	w13, w13, #0x4
    b810:	cmp	w15, w12
    b814:	str	w16, [x19, #24]
    b818:	str	w13, [x19, #16]
    b81c:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b820:	mov	w12, wzr
    b824:	mov	w17, #0x100                 	// #256
    b828:	add	w18, w12, w17
    b82c:	asr	w18, w18, #1
    b830:	add	x0, x19, w18, sxtw #2
    b834:	ldr	w0, [x0, #1096]
    b838:	cmp	w0, w15
    b83c:	csel	w17, w18, w17, gt
    b840:	csel	w12, w12, w18, gt
    b844:	sub	w18, w17, w12
    b848:	cmp	w18, #0x1
    b84c:	b.ne	b828 <BZ2_bzDecompress@@Base+0x460>  // b.any
    b850:	str	w12, [x19, #64]
    b854:	lsr	x17, x15, #1
    b858:	ldrb	w11, [x11, x17]
    b85c:	ldrh	w10, [x10, x15, lsl #1]
    b860:	ubfiz	w14, w14, #2, #1
    b864:	lsr	w11, w11, w14
    b868:	bfi	w10, w11, #16, #4
    b86c:	str	w10, [x19, #60]
    b870:	cbnz	w16, b88c <BZ2_bzDecompress@@Base+0x4c4>
    b874:	ldrsw	x10, [x19, #28]
    b878:	ldr	w16, [x25, x10, lsl #2]
    b87c:	add	w11, w10, #0x1
    b880:	cmp	w11, #0x200
    b884:	csinc	w10, wzr, w10, eq  // eq = none
    b888:	stp	w16, w10, [x19, #24]
    b88c:	sub	w10, w16, #0x1
    b890:	cmp	w10, #0x1
    b894:	str	w10, [x19, #24]
    b898:	cset	w10, eq  // eq = none
    b89c:	add	w9, w9, #0x5
    b8a0:	eor	w10, w12, w10
    b8a4:	str	w10, [x19, #64]
    b8a8:	str	w9, [x19, #1092]
    b8ac:	b	b4a0 <BZ2_bzDecompress@@Base+0xd8>
    b8b0:	str	w13, [x19, #64]
    b8b4:	mov	w13, #0x3                   	// #3
    b8b8:	b	b4a0 <BZ2_bzDecompress@@Base+0xd8>
    b8bc:	cbz	w9, bebc <BZ2_bzDecompress@@Base+0xaf4>
    b8c0:	ldr	x8, [x19]
    b8c4:	ldr	w9, [x8, #32]
    b8c8:	cbz	w9, c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    b8cc:	ldr	w12, [x19, #16]
    b8d0:	b	b8e4 <BZ2_bzDecompress@@Base+0x51c>
    b8d4:	str	w17, [x19, #64]
    b8d8:	mov	w12, #0x1                   	// #1
    b8dc:	ldr	w9, [x8, #32]
    b8e0:	cbz	w9, c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    b8e4:	cbnz	w12, ba48 <BZ2_bzDecompress@@Base+0x680>
    b8e8:	ldr	w12, [x28]
    b8ec:	ldr	w9, [x19, #1092]
    b8f0:	add	w10, w12, #0x1
    b8f4:	cmp	w9, w10
    b8f8:	b.eq	c0b8 <BZ2_bzDecompress@@Base+0xcf0>  // b.none
    b8fc:	b.gt	c188 <BZ2_bzDecompress@@Base+0xdc0>
    b900:	ldr	w10, [x19, #40]
    b904:	ldp	w14, w13, [x19, #60]
    b908:	str	w24, [x19, #16]
    b90c:	mul	w11, w10, w22
    b910:	cmp	w14, w11
    b914:	strb	w13, [x19, #12]
    b918:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b91c:	ldr	x10, [x19, #3152]
    b920:	ldr	w17, [x10, x14, lsl #2]
    b924:	ldr	w14, [x19, #24]
    b928:	lsr	x16, x17, #8
    b92c:	str	w16, [x19, #60]
    b930:	cbnz	w14, b94c <BZ2_bzDecompress@@Base+0x584>
    b934:	ldrsw	x15, [x19, #28]
    b938:	ldr	w14, [x25, x15, lsl #2]
    b93c:	add	w18, w15, #0x1
    b940:	cmp	w18, #0x200
    b944:	csinc	w15, wzr, w15, eq  // eq = none
    b948:	stp	w14, w15, [x19, #24]
    b94c:	sub	w15, w14, #0x1
    b950:	add	w14, w9, #0x1
    b954:	cmp	w9, w12
    b958:	str	w15, [x19, #24]
    b95c:	str	w14, [x19, #1092]
    b960:	b.eq	b8d8 <BZ2_bzDecompress@@Base+0x510>  // b.none
    b964:	cmp	w15, #0x1
    b968:	cset	w18, eq  // eq = none
    b96c:	and	w17, w17, #0xff
    b970:	eor	w17, w17, w18
    b974:	cmp	w17, w13
    b978:	b.ne	b8d4 <BZ2_bzDecompress@@Base+0x50c>  // b.any
    b97c:	cmp	w16, w11
    b980:	str	w26, [x19, #16]
    b984:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b988:	ldr	w18, [x10, x16, lsl #2]
    b98c:	lsr	x16, x18, #8
    b990:	str	w16, [x19, #60]
    b994:	cbnz	w15, b9b0 <BZ2_bzDecompress@@Base+0x5e8>
    b998:	ldrsw	x17, [x19, #28]
    b99c:	ldr	w15, [x25, x17, lsl #2]
    b9a0:	add	w0, w17, #0x1
    b9a4:	cmp	w0, #0x200
    b9a8:	csinc	w17, wzr, w17, eq  // eq = none
    b9ac:	stp	w15, w17, [x19, #24]
    b9b0:	sub	w17, w15, #0x1
    b9b4:	add	w15, w9, #0x2
    b9b8:	cmp	w14, w12
    b9bc:	str	w17, [x19, #24]
    b9c0:	str	w15, [x19, #1092]
    b9c4:	b.ne	b9d0 <BZ2_bzDecompress@@Base+0x608>  // b.any
    b9c8:	mov	w12, #0x2                   	// #2
    b9cc:	b	b8dc <BZ2_bzDecompress@@Base+0x514>
    b9d0:	cmp	w17, #0x1
    b9d4:	cset	w14, eq  // eq = none
    b9d8:	and	w18, w18, #0xff
    b9dc:	eor	w14, w18, w14
    b9e0:	cmp	w14, w13
    b9e4:	b.ne	ba3c <BZ2_bzDecompress@@Base+0x674>  // b.any
    b9e8:	cmp	w16, w11
    b9ec:	str	w27, [x19, #16]
    b9f0:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    b9f4:	ldr	w18, [x10, x16, lsl #2]
    b9f8:	lsr	x14, x18, #8
    b9fc:	str	w14, [x19, #60]
    ba00:	cbnz	w17, ba1c <BZ2_bzDecompress@@Base+0x654>
    ba04:	ldrsw	x16, [x19, #28]
    ba08:	ldr	w17, [x25, x16, lsl #2]
    ba0c:	add	w0, w16, #0x1
    ba10:	cmp	w0, #0x200
    ba14:	csinc	w16, wzr, w16, eq  // eq = none
    ba18:	stp	w17, w16, [x19, #24]
    ba1c:	sub	w16, w17, #0x1
    ba20:	add	w17, w9, #0x3
    ba24:	cmp	w15, w12
    ba28:	str	w16, [x19, #24]
    ba2c:	str	w17, [x19, #1092]
    ba30:	b.ne	bab0 <BZ2_bzDecompress@@Base+0x6e8>  // b.any
    ba34:	mov	w12, #0x3                   	// #3
    ba38:	b	b8dc <BZ2_bzDecompress@@Base+0x514>
    ba3c:	str	w14, [x19, #64]
    ba40:	mov	w12, #0x2                   	// #2
    ba44:	b	b8dc <BZ2_bzDecompress@@Base+0x514>
    ba48:	ldrb	w9, [x19, #12]
    ba4c:	ldr	x8, [x8, #24]
    ba50:	strb	w9, [x8]
    ba54:	ldr	w9, [x19, #3184]
    ba58:	ldrb	w8, [x19, #12]
    ba5c:	ldr	w10, [x19, #16]
    ba60:	eor	w8, w8, w9, lsr #24
    ba64:	ldr	w11, [x23, w8, uxtw #2]
    ba68:	ldr	x8, [x19]
    ba6c:	sub	w12, w10, #0x1
    ba70:	str	w12, [x19, #16]
    ba74:	eor	w9, w11, w9, lsl #8
    ba78:	str	w9, [x19, #3184]
    ba7c:	ldr	x9, [x8, #24]
    ba80:	ldp	w10, w11, [x8, #32]
    ba84:	add	x9, x9, #0x1
    ba88:	str	x9, [x8, #24]
    ba8c:	sub	w9, w10, #0x1
    ba90:	adds	w10, w11, #0x1
    ba94:	stp	w9, w10, [x8, #32]
    ba98:	b.cc	baa8 <BZ2_bzDecompress@@Base+0x6e0>  // b.lo, b.ul, b.last
    ba9c:	ldr	w10, [x8, #40]
    baa0:	add	w10, w10, #0x1
    baa4:	str	w10, [x8, #40]
    baa8:	cbnz	w9, b8e4 <BZ2_bzDecompress@@Base+0x51c>
    baac:	b	c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    bab0:	cmp	w16, #0x1
    bab4:	cset	w12, eq  // eq = none
    bab8:	and	w15, w18, #0xff
    babc:	eor	w12, w15, w12
    bac0:	cmp	w12, w13
    bac4:	b.ne	bb78 <BZ2_bzDecompress@@Base+0x7b0>  // b.any
    bac8:	cmp	w14, w11
    bacc:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bad0:	ldr	w12, [x10, x14, lsl #2]
    bad4:	lsr	x13, x12, #8
    bad8:	str	w13, [x19, #60]
    badc:	cbnz	w16, baf8 <BZ2_bzDecompress@@Base+0x730>
    bae0:	ldrsw	x14, [x19, #28]
    bae4:	ldr	w16, [x25, x14, lsl #2]
    bae8:	add	w15, w14, #0x1
    baec:	cmp	w15, #0x200
    baf0:	csinc	w14, wzr, w14, eq  // eq = none
    baf4:	stp	w16, w14, [x19, #24]
    baf8:	sub	w14, w16, #0x1
    bafc:	add	w15, w9, #0x4
    bb00:	cmp	w14, #0x1
    bb04:	and	w12, w12, #0xff
    bb08:	str	w15, [x19, #1092]
    bb0c:	cset	w15, eq  // eq = none
    bb10:	eor	w12, w12, w15
    bb14:	add	w12, w12, #0x4
    bb18:	cmp	w13, w11
    bb1c:	str	w14, [x19, #24]
    bb20:	str	w12, [x19, #16]
    bb24:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bb28:	ldr	w11, [x10, x13, lsl #2]
    bb2c:	and	w10, w11, #0xff
    bb30:	lsr	w11, w11, #8
    bb34:	stp	w11, w10, [x19, #60]
    bb38:	cbnz	w14, bb54 <BZ2_bzDecompress@@Base+0x78c>
    bb3c:	ldrsw	x11, [x19, #28]
    bb40:	ldr	w14, [x25, x11, lsl #2]
    bb44:	add	w13, w11, #0x1
    bb48:	cmp	w13, #0x200
    bb4c:	csinc	w11, wzr, w11, eq  // eq = none
    bb50:	stp	w14, w11, [x19, #24]
    bb54:	sub	w11, w14, #0x1
    bb58:	cmp	w11, #0x1
    bb5c:	str	w11, [x19, #24]
    bb60:	cset	w11, eq  // eq = none
    bb64:	add	w9, w9, #0x5
    bb68:	eor	w10, w10, w11
    bb6c:	str	w10, [x19, #64]
    bb70:	str	w9, [x19, #1092]
    bb74:	b	b8dc <BZ2_bzDecompress@@Base+0x514>
    bb78:	str	w12, [x19, #64]
    bb7c:	mov	w12, #0x3                   	// #3
    bb80:	b	b8dc <BZ2_bzDecompress@@Base+0x514>
    bb84:	cbz	w10, c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    bb88:	ldr	w13, [x19, #16]
    bb8c:	b	bba0 <BZ2_bzDecompress@@Base+0x7d8>
    bb90:	str	w16, [x19, #64]
    bb94:	mov	w13, #0x1                   	// #1
    bb98:	ldr	w9, [x8, #32]
    bb9c:	cbz	w9, c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    bba0:	cbnz	w13, bd64 <BZ2_bzDecompress@@Base+0x99c>
    bba4:	ldr	w13, [x28]
    bba8:	ldr	w9, [x19, #1092]
    bbac:	add	w10, w13, #0x1
    bbb0:	cmp	w9, w10
    bbb4:	b.eq	c0b8 <BZ2_bzDecompress@@Base+0xcf0>  // b.none
    bbb8:	b.gt	c188 <BZ2_bzDecompress@@Base+0xdc0>
    bbbc:	ldr	w10, [x19, #40]
    bbc0:	ldp	w17, w14, [x19, #60]
    bbc4:	str	w24, [x19, #16]
    bbc8:	mul	w12, w10, w22
    bbcc:	cmp	w17, w12
    bbd0:	strb	w14, [x19, #12]
    bbd4:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bbd8:	mov	w16, wzr
    bbdc:	mov	w10, #0x100                 	// #256
    bbe0:	add	w11, w16, w10
    bbe4:	asr	w11, w11, #1
    bbe8:	add	x15, x19, w11, sxtw #2
    bbec:	ldr	w15, [x15, #1096]
    bbf0:	cmp	w15, w17
    bbf4:	csel	w10, w11, w10, gt
    bbf8:	csel	w16, w16, w11, gt
    bbfc:	sub	w11, w10, w16
    bc00:	cmp	w11, #0x1
    bc04:	b.ne	bbe0 <BZ2_bzDecompress@@Base+0x818>  // b.any
    bc08:	ldr	x11, [x19, #3168]
    bc0c:	ldr	x10, [x19, #3160]
    bc10:	lsr	x18, x17, #1
    bc14:	lsl	w0, w17, #2
    bc18:	ldrb	w18, [x11, x18]
    bc1c:	and	x0, x0, #0x4
    bc20:	ldrh	w17, [x10, x17, lsl #1]
    bc24:	add	w15, w9, #0x1
    bc28:	lsr	x18, x18, x0
    bc2c:	lsl	w18, w18, #16
    bc30:	and	x18, x18, #0xf0000
    bc34:	cmp	w9, w13
    bc38:	orr	x0, x18, x17
    bc3c:	str	w0, [x19, #60]
    bc40:	str	w15, [x19, #1092]
    bc44:	b.eq	bb94 <BZ2_bzDecompress@@Base+0x7cc>  // b.none
    bc48:	and	w16, w16, #0xff
    bc4c:	cmp	w16, w14
    bc50:	b.ne	bb90 <BZ2_bzDecompress@@Base+0x7c8>  // b.any
    bc54:	cmp	w0, w12
    bc58:	str	w26, [x19, #16]
    bc5c:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bc60:	mov	w18, wzr
    bc64:	mov	w16, #0x100                 	// #256
    bc68:	add	w1, w18, w16
    bc6c:	asr	w1, w1, #1
    bc70:	add	x2, x19, w1, sxtw #2
    bc74:	ldr	w2, [x2, #1096]
    bc78:	cmp	w2, w0
    bc7c:	csel	w16, w1, w16, gt
    bc80:	csel	w18, w18, w1, gt
    bc84:	sub	w1, w16, w18
    bc88:	cmp	w1, #0x1
    bc8c:	b.ne	bc68 <BZ2_bzDecompress@@Base+0x8a0>  // b.any
    bc90:	ldrh	w16, [x10, x0, lsl #1]
    bc94:	lsr	x0, x0, #1
    bc98:	ldrb	w0, [x11, x0]
    bc9c:	lsl	w1, w17, #2
    bca0:	cmp	w15, w13
    bca4:	and	x15, x1, #0x4
    bca8:	lsr	x15, x0, x15
    bcac:	lsl	w15, w15, #16
    bcb0:	and	x15, x15, #0xf0000
    bcb4:	add	w17, w9, #0x2
    bcb8:	orr	x0, x15, x16
    bcbc:	str	w0, [x19, #60]
    bcc0:	str	w17, [x19, #1092]
    bcc4:	b.ne	bcd0 <BZ2_bzDecompress@@Base+0x908>  // b.any
    bcc8:	mov	w13, #0x2                   	// #2
    bccc:	b	bb98 <BZ2_bzDecompress@@Base+0x7d0>
    bcd0:	and	w15, w18, #0xff
    bcd4:	cmp	w15, w14
    bcd8:	b.ne	bd58 <BZ2_bzDecompress@@Base+0x990>  // b.any
    bcdc:	cmp	w0, w12
    bce0:	str	w27, [x19, #16]
    bce4:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bce8:	mov	w18, wzr
    bcec:	mov	w15, #0x100                 	// #256
    bcf0:	add	w1, w18, w15
    bcf4:	asr	w1, w1, #1
    bcf8:	add	x2, x19, w1, sxtw #2
    bcfc:	ldr	w2, [x2, #1096]
    bd00:	cmp	w2, w0
    bd04:	csel	w15, w1, w15, gt
    bd08:	csel	w18, w18, w1, gt
    bd0c:	sub	w1, w15, w18
    bd10:	cmp	w1, #0x1
    bd14:	b.ne	bcf0 <BZ2_bzDecompress@@Base+0x928>  // b.any
    bd18:	ldrh	w15, [x10, x0, lsl #1]
    bd1c:	lsr	x0, x0, #1
    bd20:	ldrb	w0, [x11, x0]
    bd24:	lsl	w16, w16, #2
    bd28:	cmp	w17, w13
    bd2c:	and	x13, x16, #0x4
    bd30:	lsr	x13, x0, x13
    bd34:	lsl	w13, w13, #16
    bd38:	and	x13, x13, #0xf0000
    bd3c:	add	w1, w9, #0x3
    bd40:	orr	x16, x13, x15
    bd44:	str	w16, [x19, #60]
    bd48:	str	w1, [x19, #1092]
    bd4c:	b.ne	bdcc <BZ2_bzDecompress@@Base+0xa04>  // b.any
    bd50:	mov	w13, #0x3                   	// #3
    bd54:	b	bb98 <BZ2_bzDecompress@@Base+0x7d0>
    bd58:	str	w15, [x19, #64]
    bd5c:	mov	w13, #0x2                   	// #2
    bd60:	b	bb98 <BZ2_bzDecompress@@Base+0x7d0>
    bd64:	ldrb	w9, [x19, #12]
    bd68:	ldr	x8, [x8, #24]
    bd6c:	strb	w9, [x8]
    bd70:	ldr	w9, [x19, #3184]
    bd74:	ldrb	w8, [x19, #12]
    bd78:	ldr	w10, [x19, #16]
    bd7c:	eor	w8, w8, w9, lsr #24
    bd80:	ldr	w11, [x23, w8, uxtw #2]
    bd84:	ldr	x8, [x19]
    bd88:	sub	w13, w10, #0x1
    bd8c:	str	w13, [x19, #16]
    bd90:	eor	w9, w11, w9, lsl #8
    bd94:	str	w9, [x19, #3184]
    bd98:	ldr	x9, [x8, #24]
    bd9c:	ldp	w10, w11, [x8, #32]
    bda0:	add	x9, x9, #0x1
    bda4:	str	x9, [x8, #24]
    bda8:	sub	w9, w10, #0x1
    bdac:	adds	w10, w11, #0x1
    bdb0:	stp	w9, w10, [x8, #32]
    bdb4:	b.cc	bdc4 <BZ2_bzDecompress@@Base+0x9fc>  // b.lo, b.ul, b.last
    bdb8:	ldr	w10, [x8, #40]
    bdbc:	add	w10, w10, #0x1
    bdc0:	str	w10, [x8, #40]
    bdc4:	cbnz	w9, bba0 <BZ2_bzDecompress@@Base+0x7d8>
    bdc8:	b	c0b8 <BZ2_bzDecompress@@Base+0xcf0>
    bdcc:	and	w13, w18, #0xff
    bdd0:	cmp	w13, w14
    bdd4:	b.ne	beb0 <BZ2_bzDecompress@@Base+0xae8>  // b.any
    bdd8:	cmp	w16, w12
    bddc:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bde0:	mov	w13, wzr
    bde4:	mov	w14, #0x100                 	// #256
    bde8:	add	w17, w13, w14
    bdec:	asr	w17, w17, #1
    bdf0:	add	x18, x19, w17, sxtw #2
    bdf4:	ldr	w18, [x18, #1096]
    bdf8:	cmp	w18, w16
    bdfc:	csel	w14, w17, w14, gt
    be00:	csel	w13, w13, w17, gt
    be04:	sub	w17, w14, w13
    be08:	cmp	w17, #0x1
    be0c:	b.ne	bde8 <BZ2_bzDecompress@@Base+0xa20>  // b.any
    be10:	ldrh	w14, [x10, x16, lsl #1]
    be14:	lsr	x16, x16, #1
    be18:	ldrb	w16, [x11, x16]
    be1c:	lsl	w15, w15, #2
    be20:	and	x15, x15, #0x4
    be24:	and	w13, w13, #0xff
    be28:	lsr	x15, x16, x15
    be2c:	lsl	w15, w15, #16
    be30:	and	x15, x15, #0xf0000
    be34:	orr	x15, x15, x14
    be38:	add	w17, w9, #0x4
    be3c:	add	w13, w13, #0x4
    be40:	cmp	w15, w12
    be44:	str	w17, [x19, #1092]
    be48:	str	w15, [x19, #60]
    be4c:	str	w13, [x19, #16]
    be50:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    be54:	mov	w12, wzr
    be58:	mov	w16, #0x100                 	// #256
    be5c:	add	w17, w12, w16
    be60:	asr	w17, w17, #1
    be64:	add	x18, x19, w17, sxtw #2
    be68:	ldr	w18, [x18, #1096]
    be6c:	cmp	w18, w15
    be70:	csel	w16, w17, w16, gt
    be74:	csel	w12, w12, w17, gt
    be78:	sub	w17, w16, w12
    be7c:	cmp	w17, #0x1
    be80:	b.ne	be5c <BZ2_bzDecompress@@Base+0xa94>  // b.any
    be84:	str	w12, [x19, #64]
    be88:	lsr	x12, x15, #1
    be8c:	ldrb	w11, [x11, x12]
    be90:	ldrh	w10, [x10, x15, lsl #1]
    be94:	ubfiz	w12, w14, #2, #1
    be98:	add	w9, w9, #0x5
    be9c:	lsr	w11, w11, w12
    bea0:	bfi	w10, w11, #16, #4
    bea4:	str	w10, [x19, #60]
    bea8:	str	w9, [x19, #1092]
    beac:	b	bb98 <BZ2_bzDecompress@@Base+0x7d0>
    beb0:	str	w13, [x19, #64]
    beb4:	mov	w13, #0x3                   	// #3
    beb8:	b	bb98 <BZ2_bzDecompress@@Base+0x7d0>
    bebc:	ldr	x10, [x19]
    bec0:	ldr	w15, [x28]
    bec4:	ldr	w12, [x19, #40]
    bec8:	ldr	w8, [x19, #3184]
    becc:	ldr	w11, [x10, #32]
    bed0:	ldrb	w17, [x19, #12]
    bed4:	ldr	w1, [x19, #16]
    bed8:	ldr	w0, [x19, #1092]
    bedc:	ldr	x9, [x19, #3152]
    bee0:	ldp	w13, w18, [x19, #60]
    bee4:	ldr	x10, [x10, #24]
    bee8:	add	w14, w15, #0x1
    beec:	mul	w16, w12, w22
    bef0:	mov	w12, w11
    bef4:	cmp	w1, #0x1
    bef8:	b.lt	bf60 <BZ2_bzDecompress@@Base+0xb98>  // b.tstop
    befc:	cbz	w12, c074 <BZ2_bzDecompress@@Base+0xcac>
    bf00:	mov	w5, w1
    bf04:	mov	x2, xzr
    bf08:	and	w3, w17, #0xff
    bf0c:	mov	w4, w12
    bf10:	sub	x5, x5, #0x1
    bf14:	cmp	w5, w2
    bf18:	b.eq	bf3c <BZ2_bzDecompress@@Base+0xb74>  // b.none
    bf1c:	strb	w17, [x10, x2]
    bf20:	eor	w6, w3, w8, lsr #24
    bf24:	ldr	w6, [x23, w6, uxtw #2]
    bf28:	add	x2, x2, #0x1
    bf2c:	cmp	w4, w2
    bf30:	eor	w8, w6, w8, lsl #8
    bf34:	b.ne	bf14 <BZ2_bzDecompress@@Base+0xb4c>  // b.any
    bf38:	b	c068 <BZ2_bzDecompress@@Base+0xca0>
    bf3c:	sub	w12, w12, w2
    bf40:	add	x10, x10, x2
    bf44:	cbz	w12, c168 <BZ2_bzDecompress@@Base+0xda0>
    bf48:	and	w1, w17, #0xff
    bf4c:	strb	w17, [x10], #1
    bf50:	eor	w1, w1, w8, lsr #24
    bf54:	ldr	w1, [x23, w1, uxtw #2]
    bf58:	sub	w12, w12, #0x1
    bf5c:	eor	w8, w1, w8, lsl #8
    bf60:	mov	w3, w0
    bf64:	mov	w2, w18
    bf68:	cmp	w0, w14
    bf6c:	b.gt	c188 <BZ2_bzDecompress@@Base+0xdc0>
    bf70:	b.eq	c170 <BZ2_bzDecompress@@Base+0xda8>  // b.none
    bf74:	cmp	w13, w16
    bf78:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bf7c:	ldr	w17, [x9, w13, uxtw #2]
    bf80:	add	w0, w3, #0x1
    bf84:	and	w18, w17, #0xff
    bf88:	lsr	x13, x17, #8
    bf8c:	cmp	w18, w2
    bf90:	b.ne	bfa0 <BZ2_bzDecompress@@Base+0xbd8>  // b.any
    bf94:	cmp	w3, w15
    bf98:	b.ne	bfa8 <BZ2_bzDecompress@@Base+0xbe0>  // b.any
    bf9c:	mov	w18, w2
    bfa0:	mov	w17, w2
    bfa4:	b	bf44 <BZ2_bzDecompress@@Base+0xb7c>
    bfa8:	cmp	w13, w16
    bfac:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bfb0:	ldr	w5, [x9, x13, lsl #2]
    bfb4:	add	w4, w3, #0x2
    bfb8:	cmp	w4, w14
    bfbc:	mov	w1, #0x2                   	// #2
    bfc0:	lsr	x13, x5, #8
    bfc4:	mov	w0, w14
    bfc8:	mov	w18, w2
    bfcc:	mov	w17, w2
    bfd0:	b.eq	bef4 <BZ2_bzDecompress@@Base+0xb2c>  // b.none
    bfd4:	and	w18, w5, #0xff
    bfd8:	cmp	w18, w2
    bfdc:	mov	w1, #0x2                   	// #2
    bfe0:	mov	w0, w4
    bfe4:	mov	w17, w2
    bfe8:	b.ne	bef4 <BZ2_bzDecompress@@Base+0xb2c>  // b.any
    bfec:	cmp	w13, w16
    bff0:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    bff4:	ldr	w5, [x9, x13, lsl #2]
    bff8:	add	w4, w3, #0x3
    bffc:	cmp	w4, w14
    c000:	mov	w1, #0x3                   	// #3
    c004:	lsr	x13, x5, #8
    c008:	mov	w0, w14
    c00c:	mov	w18, w2
    c010:	mov	w17, w2
    c014:	b.eq	bef4 <BZ2_bzDecompress@@Base+0xb2c>  // b.none
    c018:	and	w18, w5, #0xff
    c01c:	cmp	w18, w2
    c020:	mov	w1, #0x3                   	// #3
    c024:	mov	w0, w4
    c028:	mov	w17, w2
    c02c:	b.ne	bef4 <BZ2_bzDecompress@@Base+0xb2c>  // b.any
    c030:	cmp	w13, w16
    c034:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    c038:	ldr	w13, [x9, x13, lsl #2]
    c03c:	lsr	x17, x13, #8
    c040:	cmp	w17, w16
    c044:	b.cs	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.hs, b.nlast
    c048:	ldr	w17, [x9, x17, lsl #2]
    c04c:	and	w13, w13, #0xff
    c050:	add	w1, w13, #0x4
    c054:	add	w0, w3, #0x5
    c058:	and	w18, w17, #0xff
    c05c:	lsr	w13, w17, #8
    c060:	mov	w17, w2
    c064:	b	bef4 <BZ2_bzDecompress@@Base+0xb2c>
    c068:	mov	w12, wzr
    c06c:	add	x10, x10, x2
    c070:	sub	w1, w1, w2
    c074:	ldr	x14, [x19]
    c078:	sub	w11, w11, w12
    c07c:	ldr	w15, [x14, #36]
    c080:	adds	w11, w15, w11
    c084:	str	w11, [x14, #36]
    c088:	b.cc	c098 <BZ2_bzDecompress@@Base+0xcd0>  // b.lo, b.ul, b.last
    c08c:	ldr	w11, [x14, #40]
    c090:	add	w11, w11, #0x1
    c094:	str	w11, [x14, #40]
    c098:	str	w8, [x19, #3184]
    c09c:	strb	w17, [x19, #12]
    c0a0:	str	w1, [x19, #16]
    c0a4:	str	w0, [x19, #1092]
    c0a8:	str	x9, [x19, #3152]
    c0ac:	stp	w13, w18, [x19, #60]
    c0b0:	str	x10, [x14, #24]
    c0b4:	str	w12, [x14, #32]
    c0b8:	ldr	w8, [x28]
    c0bc:	ldr	w9, [x19, #1092]
    c0c0:	add	w8, w8, #0x1
    c0c4:	cmp	w9, w8
    c0c8:	b.ne	c1b4 <BZ2_bzDecompress@@Base+0xdec>  // b.any
    c0cc:	ldr	w8, [x19, #16]
    c0d0:	cbnz	w8, c1b4 <BZ2_bzDecompress@@Base+0xdec>
    c0d4:	ldr	w9, [x19, #3184]
    c0d8:	ldr	w8, [x19, #52]
    c0dc:	mvn	w3, w9
    c0e0:	cmp	w8, #0x2
    c0e4:	str	w3, [x19, #3184]
    c0e8:	b.gt	c138 <BZ2_bzDecompress@@Base+0xd70>
    c0ec:	cmp	w8, #0x2
    c0f0:	b.ge	c158 <BZ2_bzDecompress@@Base+0xd90>  // b.tcont
    c0f4:	ldr	w8, [x19, #3184]
    c0f8:	ldr	w9, [x19, #3176]
    c0fc:	cmp	w8, w9
    c100:	b.ne	c188 <BZ2_bzDecompress@@Base+0xdc0>  // b.any
    c104:	ldr	w9, [x19, #3188]
    c108:	str	w20, [x19, #8]
    c10c:	eor	w8, w8, w9, ror #31
    c110:	str	w8, [x19, #3188]
    c114:	mov	x0, x19
    c118:	bl	14f0 <BZ2_decompress@plt>
    c11c:	cmp	w0, #0x4
    c120:	b.eq	c190 <BZ2_bzDecompress@@Base+0xdc8>  // b.none
    c124:	ldr	w8, [x19, #8]
    c128:	cmp	w8, #0x2
    c12c:	mov	w8, #0x2                   	// #2
    c130:	b.eq	b458 <BZ2_bzDecompress@@Base+0x90>  // b.none
    c134:	b	b400 <BZ2_bzDecompress@@Base+0x38>
    c138:	ldr	x0, [x21]
    c13c:	ldr	w2, [x19, #3176]
    c140:	adrp	x1, e000 <BZ2_bzerror@@Base+0x92c>
    c144:	add	x1, x1, #0x1be
    c148:	bl	1610 <fprintf@plt>
    c14c:	ldr	w8, [x19, #52]
    c150:	cmp	w8, #0x2
    c154:	b.lt	c0f4 <BZ2_bzDecompress@@Base+0xd2c>  // b.tstop
    c158:	ldr	x1, [x21]
    c15c:	mov	w0, #0x5d                  	// #93
    c160:	bl	1460 <fputc@plt>
    c164:	b	c0f4 <BZ2_bzDecompress@@Base+0xd2c>
    c168:	mov	w1, #0x1                   	// #1
    c16c:	b	c074 <BZ2_bzDecompress@@Base+0xcac>
    c170:	mov	w1, wzr
    c174:	mov	w0, w14
    c178:	mov	w18, w2
    c17c:	b	c074 <BZ2_bzDecompress@@Base+0xcac>
    c180:	mov	w0, #0xffffffff            	// #-1
    c184:	b	b400 <BZ2_bzDecompress@@Base+0x38>
    c188:	mov	w0, #0xfffffffc            	// #-4
    c18c:	b	b400 <BZ2_bzDecompress@@Base+0x38>
    c190:	ldr	w8, [x19, #52]
    c194:	cmp	w8, #0x3
    c198:	b.ge	c1bc <BZ2_bzDecompress@@Base+0xdf4>  // b.tcont
    c19c:	ldr	w8, [x19, #3188]
    c1a0:	ldr	w9, [x19, #3180]
    c1a4:	cmp	w8, w9
    c1a8:	mov	w8, #0x4                   	// #4
    c1ac:	cneg	w0, w8, ne  // ne = any
    c1b0:	b	b400 <BZ2_bzDecompress@@Base+0x38>
    c1b4:	mov	w0, wzr
    c1b8:	b	b400 <BZ2_bzDecompress@@Base+0x38>
    c1bc:	ldr	x0, [x21]
    c1c0:	ldr	w2, [x19, #3180]
    c1c4:	ldr	w3, [x19, #3188]
    c1c8:	adrp	x1, e000 <BZ2_bzerror@@Base+0x92c>
    c1cc:	add	x1, x1, #0x1d0
    c1d0:	bl	1610 <fprintf@plt>
    c1d4:	b	c19c <BZ2_bzDecompress@@Base+0xdd4>

000000000000c1d8 <BZ2_bzDecompressEnd@@Base>:
    c1d8:	stp	x29, x30, [sp, #-32]!
    c1dc:	stp	x20, x19, [sp, #16]
    c1e0:	mov	x29, sp
    c1e4:	cbz	x0, c200 <BZ2_bzDecompressEnd@@Base+0x28>
    c1e8:	ldr	x20, [x0, #48]
    c1ec:	mov	x19, x0
    c1f0:	cbz	x20, c200 <BZ2_bzDecompressEnd@@Base+0x28>
    c1f4:	ldr	x8, [x20]
    c1f8:	cmp	x8, x19
    c1fc:	b.eq	c210 <BZ2_bzDecompressEnd@@Base+0x38>  // b.none
    c200:	mov	w0, #0xfffffffe            	// #-2
    c204:	ldp	x20, x19, [sp, #16]
    c208:	ldp	x29, x30, [sp], #32
    c20c:	ret
    c210:	ldr	x1, [x20, #3152]
    c214:	cbz	x1, c220 <BZ2_bzDecompressEnd@@Base+0x48>
    c218:	ldp	x8, x0, [x19, #64]
    c21c:	blr	x8
    c220:	ldr	x1, [x20, #3160]
    c224:	cbz	x1, c230 <BZ2_bzDecompressEnd@@Base+0x58>
    c228:	ldp	x8, x0, [x19, #64]
    c22c:	blr	x8
    c230:	ldr	x1, [x20, #3168]
    c234:	cbz	x1, c240 <BZ2_bzDecompressEnd@@Base+0x68>
    c238:	ldp	x8, x0, [x19, #64]
    c23c:	blr	x8
    c240:	ldp	x8, x0, [x19, #64]
    c244:	ldr	x1, [x19, #48]
    c248:	blr	x8
    c24c:	mov	w0, wzr
    c250:	str	xzr, [x19, #48]
    c254:	b	c204 <BZ2_bzDecompressEnd@@Base+0x2c>

000000000000c258 <BZ2_bzWriteOpen@@Base>:
    c258:	stp	x29, x30, [sp, #-80]!
    c25c:	str	x25, [sp, #16]
    c260:	stp	x24, x23, [sp, #32]
    c264:	stp	x22, x21, [sp, #48]
    c268:	stp	x20, x19, [sp, #64]
    c26c:	mov	x29, sp
    c270:	mov	w23, w4
    c274:	mov	w21, w3
    c278:	mov	w22, w2
    c27c:	mov	x24, x1
    c280:	mov	x19, x0
    c284:	cbz	x0, c28c <BZ2_bzWriteOpen@@Base+0x34>
    c288:	str	wzr, [x19]
    c28c:	cmp	w21, #0x4
    c290:	b.hi	c2c8 <BZ2_bzWriteOpen@@Base+0x70>  // b.pmore
    c294:	cmp	w23, #0xfa
    c298:	b.hi	c2c8 <BZ2_bzWriteOpen@@Base+0x70>  // b.pmore
    c29c:	cbz	x24, c2c8 <BZ2_bzWriteOpen@@Base+0x70>
    c2a0:	sub	w8, w22, #0x1
    c2a4:	cmp	w8, #0x9
    c2a8:	b.cs	c2c8 <BZ2_bzWriteOpen@@Base+0x70>  // b.hs, b.nlast
    c2ac:	mov	x0, x24
    c2b0:	bl	1620 <ferror@plt>
    c2b4:	cbz	w0, c2f4 <BZ2_bzWriteOpen@@Base+0x9c>
    c2b8:	mov	x20, xzr
    c2bc:	cbz	x19, c2d8 <BZ2_bzWriteOpen@@Base+0x80>
    c2c0:	mov	w8, #0xfffffffa            	// #-6
    c2c4:	b	c2d4 <BZ2_bzWriteOpen@@Base+0x7c>
    c2c8:	mov	x20, xzr
    c2cc:	cbz	x19, c2d8 <BZ2_bzWriteOpen@@Base+0x80>
    c2d0:	mov	w8, #0xfffffffe            	// #-2
    c2d4:	str	w8, [x19]
    c2d8:	mov	x0, x20
    c2dc:	ldp	x20, x19, [sp, #64]
    c2e0:	ldp	x22, x21, [sp, #48]
    c2e4:	ldp	x24, x23, [sp, #32]
    c2e8:	ldr	x25, [sp, #16]
    c2ec:	ldp	x29, x30, [sp], #80
    c2f0:	ret
    c2f4:	mov	w0, #0x13f0                	// #5104
    c2f8:	bl	1480 <malloc@plt>
    c2fc:	cbz	x0, c374 <BZ2_bzWriteOpen@@Base+0x11c>
    c300:	mov	w8, #0x1394                	// #5012
    c304:	mov	x20, x0
    c308:	add	x25, x0, x8
    c30c:	cbz	x19, c314 <BZ2_bzWriteOpen@@Base+0xbc>
    c310:	str	wzr, [x19]
    c314:	mov	w8, #0x1398                	// #5016
    c318:	cmp	w23, #0x0
    c31c:	mov	w9, #0x1e                  	// #30
    c320:	str	wzr, [x20, #5096]
    c324:	strb	wzr, [x25, #88]
    c328:	str	x24, [x20]
    c32c:	mov	w24, #0x1                   	// #1
    c330:	movi	v0.2d, #0x0
    c334:	add	x0, x20, x8
    c338:	csel	w3, w9, w23, eq  // eq = none
    c33c:	mov	w1, w22
    c340:	mov	w2, w21
    c344:	str	wzr, [x20, #5008]
    c348:	strb	w24, [x25]
    c34c:	str	xzr, [x20, #5088]
    c350:	str	q0, [x20, #5072]
    c354:	bl	14c0 <BZ2_bzCompressInit@plt>
    c358:	cbz	w0, c384 <BZ2_bzWriteOpen@@Base+0x12c>
    c35c:	cbz	x19, c364 <BZ2_bzWriteOpen@@Base+0x10c>
    c360:	str	w0, [x19]
    c364:	mov	x0, x20
    c368:	bl	1540 <free@plt>
    c36c:	mov	x20, xzr
    c370:	b	c2d8 <BZ2_bzWriteOpen@@Base+0x80>
    c374:	mov	x20, xzr
    c378:	cbz	x19, c2d8 <BZ2_bzWriteOpen@@Base+0x80>
    c37c:	mov	w8, #0xfffffffd            	// #-3
    c380:	b	c2d4 <BZ2_bzWriteOpen@@Base+0x7c>
    c384:	str	wzr, [x20, #5024]
    c388:	strb	w24, [x25, #88]
    c38c:	b	c2d8 <BZ2_bzWriteOpen@@Base+0x80>

000000000000c390 <BZ2_bzWrite@@Base>:
    c390:	stp	x29, x30, [sp, #-64]!
    c394:	stp	x24, x23, [sp, #16]
    c398:	stp	x22, x21, [sp, #32]
    c39c:	stp	x20, x19, [sp, #48]
    c3a0:	mov	x29, sp
    c3a4:	mov	w22, w3
    c3a8:	mov	x21, x2
    c3ac:	mov	x19, x1
    c3b0:	mov	x20, x0
    c3b4:	cbz	x0, c3bc <BZ2_bzWrite@@Base+0x2c>
    c3b8:	str	wzr, [x20]
    c3bc:	cbz	x19, c3f8 <BZ2_bzWrite@@Base+0x68>
    c3c0:	str	wzr, [x19, #5096]
    c3c4:	cbz	x21, c3f8 <BZ2_bzWrite@@Base+0x68>
    c3c8:	tbnz	w22, #31, c3f8 <BZ2_bzWrite@@Base+0x68>
    c3cc:	mov	w8, #0x1394                	// #5012
    c3d0:	ldrb	w8, [x19, x8]
    c3d4:	cbz	w8, c410 <BZ2_bzWrite@@Base+0x80>
    c3d8:	ldr	x0, [x19]
    c3dc:	bl	1620 <ferror@plt>
    c3e0:	cbz	w0, c438 <BZ2_bzWrite@@Base+0xa8>
    c3e4:	cbz	x20, c3f0 <BZ2_bzWrite@@Base+0x60>
    c3e8:	mov	w8, #0xfffffffa            	// #-6
    c3ec:	str	w8, [x20]
    c3f0:	mov	w8, #0xfffffffa            	// #-6
    c3f4:	b	c420 <BZ2_bzWrite@@Base+0x90>
    c3f8:	cbz	x20, c404 <BZ2_bzWrite@@Base+0x74>
    c3fc:	mov	w8, #0xfffffffe            	// #-2
    c400:	str	w8, [x20]
    c404:	cbz	x19, c424 <BZ2_bzWrite@@Base+0x94>
    c408:	mov	w8, #0xfffffffe            	// #-2
    c40c:	b	c420 <BZ2_bzWrite@@Base+0x90>
    c410:	cbz	x20, c41c <BZ2_bzWrite@@Base+0x8c>
    c414:	mov	w8, #0xffffffff            	// #-1
    c418:	str	w8, [x20]
    c41c:	mov	w8, #0xffffffff            	// #-1
    c420:	str	w8, [x19, #5096]
    c424:	ldp	x20, x19, [sp, #48]
    c428:	ldp	x22, x21, [sp, #32]
    c42c:	ldp	x24, x23, [sp, #16]
    c430:	ldp	x29, x30, [sp], #64
    c434:	ret
    c438:	cbz	w22, c4d8 <BZ2_bzWrite@@Base+0x148>
    c43c:	mov	w8, #0x1398                	// #5016
    c440:	str	w22, [x19, #5024]
    c444:	str	x21, [x19, #5016]
    c448:	add	x21, x19, #0x8
    c44c:	add	x22, x19, x8
    c450:	mov	w24, #0x1388                	// #5000
    c454:	b	c460 <BZ2_bzWrite@@Base+0xd0>
    c458:	ldr	w8, [x19, #5024]
    c45c:	cbz	w8, c4d8 <BZ2_bzWrite@@Base+0x148>
    c460:	ldr	x8, [x19, #5064]
    c464:	str	w24, [x19, #5048]
    c468:	str	x21, [x19, #5040]
    c46c:	cbz	x8, c4e8 <BZ2_bzWrite@@Base+0x158>
    c470:	ldr	x9, [x8]
    c474:	cmp	x9, x22
    c478:	b.ne	c4e8 <BZ2_bzWrite@@Base+0x158>  // b.any
    c47c:	ldr	w9, [x8, #8]
    c480:	cmp	w9, #0x2
    c484:	b.ne	c4f0 <BZ2_bzWrite@@Base+0x160>  // b.any
    c488:	mov	x0, x22
    c48c:	bl	ae34 <BZ2_bzCompress@@Base+0x18c>
    c490:	tst	w0, #0xff
    c494:	b.eq	c4e8 <BZ2_bzWrite@@Base+0x158>  // b.none
    c498:	ldrsw	x8, [x19, #5048]
    c49c:	ubfx	x9, x8, #3, #29
    c4a0:	cmp	w9, #0x270
    c4a4:	b.hi	c458 <BZ2_bzWrite@@Base+0xc8>  // b.pmore
    c4a8:	ldr	x3, [x19]
    c4ac:	sub	x23, x24, x8
    c4b0:	mov	w1, #0x1                   	// #1
    c4b4:	mov	x0, x21
    c4b8:	mov	x2, x23
    c4bc:	bl	15b0 <fwrite@plt>
    c4c0:	cmp	w23, w0
    c4c4:	b.ne	c3e4 <BZ2_bzWrite@@Base+0x54>  // b.any
    c4c8:	ldr	x0, [x19]
    c4cc:	bl	1620 <ferror@plt>
    c4d0:	cbz	w0, c458 <BZ2_bzWrite@@Base+0xc8>
    c4d4:	b	c3e4 <BZ2_bzWrite@@Base+0x54>
    c4d8:	cbz	x20, c4e0 <BZ2_bzWrite@@Base+0x150>
    c4dc:	str	wzr, [x20]
    c4e0:	str	wzr, [x19, #5096]
    c4e4:	b	c424 <BZ2_bzWrite@@Base+0x94>
    c4e8:	mov	w8, #0xfffffffe            	// #-2
    c4ec:	b	c514 <BZ2_bzWrite@@Base+0x184>
    c4f0:	cmp	w9, #0x4
    c4f4:	mov	w8, wzr
    c4f8:	b.hi	c514 <BZ2_bzWrite@@Base+0x184>  // b.pmore
    c4fc:	mov	w10, #0x1                   	// #1
    c500:	lsl	w9, w10, w9
    c504:	mov	w10, #0x1a                  	// #26
    c508:	tst	w9, w10
    c50c:	b.eq	c514 <BZ2_bzWrite@@Base+0x184>  // b.none
    c510:	mov	w8, #0xffffffff            	// #-1
    c514:	cbz	x20, c420 <BZ2_bzWrite@@Base+0x90>
    c518:	str	w8, [x20]
    c51c:	b	c420 <BZ2_bzWrite@@Base+0x90>

000000000000c520 <BZ2_bzWriteClose@@Base>:
    c520:	mov	x5, x4
    c524:	mov	x4, xzr
    c528:	mov	x6, xzr
    c52c:	b	1580 <BZ2_bzWriteClose64@plt>

000000000000c530 <BZ2_bzWriteClose64@@Base>:
    c530:	sub	sp, sp, #0x70
    c534:	stp	x29, x30, [sp, #16]
    c538:	stp	x28, x27, [sp, #32]
    c53c:	stp	x26, x25, [sp, #48]
    c540:	stp	x24, x23, [sp, #64]
    c544:	stp	x22, x21, [sp, #80]
    c548:	stp	x20, x19, [sp, #96]
    c54c:	add	x29, sp, #0x10
    c550:	mov	x20, x0
    c554:	cbz	x1, c5a0 <BZ2_bzWriteClose64@@Base+0x70>
    c558:	mov	w8, #0x1394                	// #5012
    c55c:	ldrb	w8, [x1, x8]
    c560:	mov	x19, x1
    c564:	cbz	w8, c5ac <BZ2_bzWriteClose64@@Base+0x7c>
    c568:	ldr	x25, [x19]
    c56c:	mov	x21, x6
    c570:	mov	x22, x5
    c574:	mov	x23, x4
    c578:	mov	x0, x25
    c57c:	mov	x24, x3
    c580:	mov	w26, w2
    c584:	bl	1620 <ferror@plt>
    c588:	cbz	w0, c5e0 <BZ2_bzWriteClose64@@Base+0xb0>
    c58c:	cbz	x20, c598 <BZ2_bzWriteClose64@@Base+0x68>
    c590:	mov	w8, #0xfffffffa            	// #-6
    c594:	str	w8, [x20]
    c598:	mov	w8, #0xfffffffa            	// #-6
    c59c:	b	c5bc <BZ2_bzWriteClose64@@Base+0x8c>
    c5a0:	cbz	x20, c5c0 <BZ2_bzWriteClose64@@Base+0x90>
    c5a4:	str	wzr, [x20]
    c5a8:	b	c5c0 <BZ2_bzWriteClose64@@Base+0x90>
    c5ac:	cbz	x20, c5b8 <BZ2_bzWriteClose64@@Base+0x88>
    c5b0:	mov	w8, #0xffffffff            	// #-1
    c5b4:	str	w8, [x20]
    c5b8:	mov	w8, #0xffffffff            	// #-1
    c5bc:	str	w8, [x19, #5096]
    c5c0:	ldp	x20, x19, [sp, #96]
    c5c4:	ldp	x22, x21, [sp, #80]
    c5c8:	ldp	x24, x23, [sp, #64]
    c5cc:	ldp	x26, x25, [sp, #48]
    c5d0:	ldp	x28, x27, [sp, #32]
    c5d4:	ldp	x29, x30, [sp, #16]
    c5d8:	add	sp, sp, #0x70
    c5dc:	ret
    c5e0:	cbz	x24, c5e8 <BZ2_bzWriteClose64@@Base+0xb8>
    c5e4:	str	wzr, [x24]
    c5e8:	cbz	x23, c5f0 <BZ2_bzWriteClose64@@Base+0xc0>
    c5ec:	str	wzr, [x23]
    c5f0:	cbz	x22, c5f8 <BZ2_bzWriteClose64@@Base+0xc8>
    c5f4:	str	wzr, [x22]
    c5f8:	cbz	x21, c600 <BZ2_bzWriteClose64@@Base+0xd0>
    c5fc:	str	wzr, [x21]
    c600:	cbz	w26, c6cc <BZ2_bzWriteClose64@@Base+0x19c>
    c604:	cbz	x24, c610 <BZ2_bzWriteClose64@@Base+0xe0>
    c608:	ldr	w8, [x19, #5028]
    c60c:	str	w8, [x24]
    c610:	cbz	x23, c61c <BZ2_bzWriteClose64@@Base+0xec>
    c614:	ldr	w8, [x19, #5032]
    c618:	str	w8, [x23]
    c61c:	cbz	x22, c628 <BZ2_bzWriteClose64@@Base+0xf8>
    c620:	ldr	w8, [x19, #5052]
    c624:	str	w8, [x22]
    c628:	cbz	x21, c634 <BZ2_bzWriteClose64@@Base+0x104>
    c62c:	ldr	w8, [x19, #5056]
    c630:	str	w8, [x21]
    c634:	cbz	x20, c63c <BZ2_bzWriteClose64@@Base+0x10c>
    c638:	str	wzr, [x20]
    c63c:	ldr	x20, [x19, #5064]
    c640:	str	wzr, [x19, #5096]
    c644:	cbz	x20, c6a8 <BZ2_bzWriteClose64@@Base+0x178>
    c648:	ldr	x8, [x20]
    c64c:	mov	w9, #0x1398                	// #5016
    c650:	add	x9, x19, x9
    c654:	cmp	x8, x9
    c658:	b.ne	c6a8 <BZ2_bzWriteClose64@@Base+0x178>  // b.any
    c65c:	ldr	x1, [x20, #24]
    c660:	cbz	x1, c670 <BZ2_bzWriteClose64@@Base+0x140>
    c664:	ldr	x8, [x19, #5080]
    c668:	ldr	x0, [x19, #5088]
    c66c:	blr	x8
    c670:	ldr	x1, [x20, #32]
    c674:	cbz	x1, c684 <BZ2_bzWriteClose64@@Base+0x154>
    c678:	ldr	x8, [x19, #5080]
    c67c:	ldr	x0, [x19, #5088]
    c680:	blr	x8
    c684:	ldr	x1, [x20, #40]
    c688:	cbz	x1, c698 <BZ2_bzWriteClose64@@Base+0x168>
    c68c:	ldr	x8, [x19, #5080]
    c690:	ldr	x0, [x19, #5088]
    c694:	blr	x8
    c698:	ldr	x8, [x19, #5080]
    c69c:	ldr	x0, [x19, #5088]
    c6a0:	ldr	x1, [x19, #5064]
    c6a4:	blr	x8
    c6a8:	mov	x0, x19
    c6ac:	ldp	x20, x19, [sp, #96]
    c6b0:	ldp	x22, x21, [sp, #80]
    c6b4:	ldp	x24, x23, [sp, #64]
    c6b8:	ldp	x26, x25, [sp, #48]
    c6bc:	ldp	x28, x27, [sp, #32]
    c6c0:	ldp	x29, x30, [sp, #16]
    c6c4:	add	sp, sp, #0x70
    c6c8:	b	1540 <free@plt>
    c6cc:	ldr	w8, [x19, #5096]
    c6d0:	cbz	w8, c6f8 <BZ2_bzWriteClose64@@Base+0x1c8>
    c6d4:	mov	x0, x25
    c6d8:	bl	1620 <ferror@plt>
    c6dc:	cbnz	w0, c604 <BZ2_bzWriteClose64@@Base+0xd4>
    c6e0:	mov	x0, x25
    c6e4:	bl	15c0 <fflush@plt>
    c6e8:	ldr	x0, [x19]
    c6ec:	bl	1620 <ferror@plt>
    c6f0:	cbnz	w0, c58c <BZ2_bzWriteClose64@@Base+0x5c>
    c6f4:	b	c604 <BZ2_bzWriteClose64@@Base+0xd4>
    c6f8:	mov	w8, #0x1398                	// #5016
    c6fc:	add	x25, x19, #0x8
    c700:	mov	w28, #0x1388                	// #5000
    c704:	add	x26, x19, x8
    c708:	ldr	x27, [x19, #5064]
    c70c:	str	w28, [x19, #5048]
    c710:	str	x25, [x19, #5040]
    c714:	cbz	x27, c824 <BZ2_bzWriteClose64@@Base+0x2f4>
    c718:	ldr	x8, [x27]
    c71c:	cmp	x8, x26
    c720:	b.ne	c824 <BZ2_bzWriteClose64@@Base+0x2f4>  // b.any
    c724:	ldr	w8, [x27, #8]
    c728:	cmp	w8, #0x2
    c72c:	b.ne	c748 <BZ2_bzWriteClose64@@Base+0x218>  // b.any
    c730:	ldr	w9, [x19, #5024]
    c734:	mov	w8, #0x4                   	// #4
    c738:	str	w8, [x27, #8]
    c73c:	str	w9, [x27, #16]
    c740:	cmp	w8, #0x2
    c744:	b.eq	c730 <BZ2_bzWriteClose64@@Base+0x200>  // b.none
    c748:	cmp	w8, #0x1
    c74c:	b.eq	c814 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.none
    c750:	cmp	w8, #0x3
    c754:	b.eq	c814 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.none
    c758:	cmp	w8, #0x4
    c75c:	b.ne	c81c <BZ2_bzWriteClose64@@Base+0x2ec>  // b.any
    c760:	ldr	w8, [x27, #16]
    c764:	ldr	w9, [x19, #5024]
    c768:	cmp	w8, w9
    c76c:	b.ne	c814 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.any
    c770:	mov	x0, x26
    c774:	mov	w28, #0x1                   	// #1
    c778:	bl	ae34 <BZ2_bzCompress@@Base+0x18c>
    c77c:	tst	w0, #0xff
    c780:	b.eq	c814 <BZ2_bzWriteClose64@@Base+0x2e4>  // b.none
    c784:	ldr	w8, [x27, #16]
    c788:	cbz	w8, c7e4 <BZ2_bzWriteClose64@@Base+0x2b4>
    c78c:	mov	w27, #0x3                   	// #3
    c790:	ldrsw	x8, [x19, #5048]
    c794:	mov	w28, #0x1388                	// #5000
    c798:	ubfx	x9, x8, #3, #29
    c79c:	cmp	w9, #0x270
    c7a0:	b.hi	c7d8 <BZ2_bzWriteClose64@@Base+0x2a8>  // b.pmore
    c7a4:	ldr	x3, [x19]
    c7a8:	stur	w27, [x29, #-4]
    c7ac:	sub	x27, x28, x8
    c7b0:	mov	w1, #0x1                   	// #1
    c7b4:	mov	x0, x25
    c7b8:	mov	x2, x27
    c7bc:	bl	15b0 <fwrite@plt>
    c7c0:	cmp	w27, w0
    c7c4:	ldur	w27, [x29, #-4]
    c7c8:	b.ne	c58c <BZ2_bzWriteClose64@@Base+0x5c>  // b.any
    c7cc:	ldr	x0, [x19]
    c7d0:	bl	1620 <ferror@plt>
    c7d4:	cbnz	w0, c58c <BZ2_bzWriteClose64@@Base+0x5c>
    c7d8:	cmp	w27, #0x4
    c7dc:	b.ne	c708 <BZ2_bzWriteClose64@@Base+0x1d8>  // b.any
    c7e0:	b	c834 <BZ2_bzWriteClose64@@Base+0x304>
    c7e4:	ldr	w8, [x27, #92]
    c7e8:	cmp	w8, #0xff
    c7ec:	b.hi	c7fc <BZ2_bzWriteClose64@@Base+0x2cc>  // b.pmore
    c7f0:	ldr	w8, [x27, #96]
    c7f4:	cmp	w8, #0x0
    c7f8:	b.gt	c78c <BZ2_bzWriteClose64@@Base+0x25c>
    c7fc:	ldp	w9, w8, [x27, #116]
    c800:	cmp	w8, w9
    c804:	b.lt	c78c <BZ2_bzWriteClose64@@Base+0x25c>  // b.tstop
    c808:	str	w28, [x27, #8]
    c80c:	mov	w27, #0x4                   	// #4
    c810:	b	c790 <BZ2_bzWriteClose64@@Base+0x260>
    c814:	mov	w8, #0xffffffff            	// #-1
    c818:	b	c828 <BZ2_bzWriteClose64@@Base+0x2f8>
    c81c:	mov	w8, wzr
    c820:	b	c828 <BZ2_bzWriteClose64@@Base+0x2f8>
    c824:	mov	w8, #0xfffffffe            	// #-2
    c828:	cbz	x20, c5bc <BZ2_bzWriteClose64@@Base+0x8c>
    c82c:	str	w8, [x20]
    c830:	b	c5bc <BZ2_bzWriteClose64@@Base+0x8c>
    c834:	ldr	x25, [x19]
    c838:	b	c6d4 <BZ2_bzWriteClose64@@Base+0x1a4>

000000000000c83c <BZ2_bzReadOpen@@Base>:
    c83c:	stp	x29, x30, [sp, #-80]!
    c840:	stp	x26, x25, [sp, #16]
    c844:	stp	x24, x23, [sp, #32]
    c848:	stp	x22, x21, [sp, #48]
    c84c:	stp	x20, x19, [sp, #64]
    c850:	mov	x29, sp
    c854:	mov	w24, w5
    c858:	mov	x23, x4
    c85c:	mov	w21, w3
    c860:	mov	w19, w2
    c864:	mov	x25, x1
    c868:	mov	x22, x0
    c86c:	cbz	x0, c874 <BZ2_bzReadOpen@@Base+0x38>
    c870:	str	wzr, [x22]
    c874:	cbz	x25, c8a0 <BZ2_bzReadOpen@@Base+0x64>
    c878:	cmp	w19, #0x4
    c87c:	b.hi	c8a0 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    c880:	cmp	w21, #0x1
    c884:	b.hi	c8a0 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    c888:	cbnz	x23, c890 <BZ2_bzReadOpen@@Base+0x54>
    c88c:	cbnz	w24, c8a0 <BZ2_bzReadOpen@@Base+0x64>
    c890:	cbz	x23, c8cc <BZ2_bzReadOpen@@Base+0x90>
    c894:	mov	w8, #0x1389                	// #5001
    c898:	cmp	w24, w8
    c89c:	b.cc	c8cc <BZ2_bzReadOpen@@Base+0x90>  // b.lo, b.ul, b.last
    c8a0:	mov	x20, xzr
    c8a4:	cbz	x22, c8b0 <BZ2_bzReadOpen@@Base+0x74>
    c8a8:	mov	w8, #0xfffffffe            	// #-2
    c8ac:	str	w8, [x22]
    c8b0:	mov	x0, x20
    c8b4:	ldp	x20, x19, [sp, #64]
    c8b8:	ldp	x22, x21, [sp, #48]
    c8bc:	ldp	x24, x23, [sp, #32]
    c8c0:	ldp	x26, x25, [sp, #16]
    c8c4:	ldp	x29, x30, [sp], #80
    c8c8:	ret
    c8cc:	mov	x0, x25
    c8d0:	bl	1620 <ferror@plt>
    c8d4:	cbz	w0, c8e8 <BZ2_bzReadOpen@@Base+0xac>
    c8d8:	mov	x20, xzr
    c8dc:	cbz	x22, c8b0 <BZ2_bzReadOpen@@Base+0x74>
    c8e0:	mov	w8, #0xfffffffa            	// #-6
    c8e4:	b	c8ac <BZ2_bzReadOpen@@Base+0x70>
    c8e8:	mov	w0, #0x13f0                	// #5104
    c8ec:	bl	1480 <malloc@plt>
    c8f0:	cbz	x0, c9fc <BZ2_bzReadOpen@@Base+0x1c0>
    c8f4:	mov	w8, #0x1394                	// #5012
    c8f8:	mov	x20, x0
    c8fc:	add	x26, x0, x8
    c900:	cbz	x22, c908 <BZ2_bzReadOpen@@Base+0xcc>
    c904:	str	wzr, [x22]
    c908:	mov	w8, #0x13d0                	// #5072
    c90c:	movi	v0.2d, #0x0
    c910:	cmp	w24, #0x1
    c914:	add	x8, x20, x8
    c918:	str	wzr, [x20, #5096]
    c91c:	strb	wzr, [x26, #88]
    c920:	str	x25, [x20]
    c924:	str	wzr, [x20, #5008]
    c928:	strb	wzr, [x26]
    c92c:	str	xzr, [x20, #5088]
    c930:	str	q0, [x20, #5072]
    c934:	b.lt	c96c <BZ2_bzReadOpen@@Base+0x130>  // b.tstop
    c938:	mov	w11, wzr
    c93c:	add	x9, x20, #0x8
    c940:	add	w10, w24, #0x1
    c944:	ldrb	w12, [x23], #1
    c948:	sub	w10, w10, #0x1
    c94c:	cmp	w10, #0x1
    c950:	strb	w12, [x9, w11, sxtw]
    c954:	ldr	w11, [x20, #5008]
    c958:	add	w11, w11, #0x1
    c95c:	str	w11, [x20, #5008]
    c960:	b.gt	c944 <BZ2_bzReadOpen@@Base+0x108>
    c964:	ldr	x9, [x8]
    c968:	cbnz	x9, c978 <BZ2_bzReadOpen@@Base+0x13c>
    c96c:	adrp	x9, a000 <BZ2_decompress@@Base+0x2338>
    c970:	add	x9, x9, #0xc8c
    c974:	str	x9, [x8]
    c978:	ldr	x8, [x20, #5080]
    c97c:	cbnz	x8, c98c <BZ2_bzReadOpen@@Base+0x150>
    c980:	adrp	x8, a000 <BZ2_decompress@@Base+0x2338>
    c984:	add	x8, x8, #0xc98
    c988:	str	x8, [x20, #5080]
    c98c:	ldr	x0, [x20, #5088]
    c990:	mov	w1, #0xfa90                	// #64144
    c994:	mov	w2, #0x1                   	// #1
    c998:	mov	w23, #0x1                   	// #1
    c99c:	blr	x9
    c9a0:	cbz	x0, ca0c <BZ2_bzReadOpen@@Base+0x1d0>
    c9a4:	mov	w8, #0x1398                	// #5016
    c9a8:	add	x8, x20, x8
    c9ac:	str	x8, [x0]
    c9b0:	mov	w8, #0xa                   	// #10
    c9b4:	movi	v0.2d, #0x0
    c9b8:	str	x0, [x20, #5064]
    c9bc:	str	w8, [x0, #8]
    c9c0:	str	d0, [x0, #32]
    c9c4:	str	wzr, [x0, #3188]
    c9c8:	str	d0, [x26, #16]
    c9cc:	str	d0, [x26, #40]
    c9d0:	strb	w21, [x0, #44]
    c9d4:	str	xzr, [x0, #3152]
    c9d8:	str	xzr, [x0, #3168]
    c9dc:	str	xzr, [x0, #3160]
    c9e0:	stp	wzr, w19, [x0, #48]
    c9e4:	ldr	w8, [x20, #5008]
    c9e8:	add	x9, x20, #0x8
    c9ec:	str	x9, [x20, #5016]
    c9f0:	str	w8, [x20, #5024]
    c9f4:	strb	w23, [x26, #88]
    c9f8:	b	c8b0 <BZ2_bzReadOpen@@Base+0x74>
    c9fc:	mov	x20, xzr
    ca00:	cbz	x22, c8b0 <BZ2_bzReadOpen@@Base+0x74>
    ca04:	mov	w8, #0xfffffffd            	// #-3
    ca08:	b	c8ac <BZ2_bzReadOpen@@Base+0x70>
    ca0c:	cbz	x22, ca18 <BZ2_bzReadOpen@@Base+0x1dc>
    ca10:	mov	w8, #0xfffffffd            	// #-3
    ca14:	str	w8, [x22]
    ca18:	mov	x0, x20
    ca1c:	bl	1540 <free@plt>
    ca20:	mov	x20, xzr
    ca24:	b	c8b0 <BZ2_bzReadOpen@@Base+0x74>

000000000000ca28 <BZ2_bzReadClose@@Base>:
    ca28:	stp	x29, x30, [sp, #-32]!
    ca2c:	stp	x20, x19, [sp, #16]
    ca30:	mov	x29, sp
    ca34:	mov	x19, x1
    ca38:	cbz	x0, ca40 <BZ2_bzReadClose@@Base+0x18>
    ca3c:	str	wzr, [x0]
    ca40:	cbz	x19, ca70 <BZ2_bzReadClose@@Base+0x48>
    ca44:	mov	w8, #0x1394                	// #5012
    ca48:	add	x8, x19, x8
    ca4c:	str	wzr, [x19, #5096]
    ca50:	ldrb	w9, [x8]
    ca54:	cbz	w9, ca84 <BZ2_bzReadClose@@Base+0x5c>
    ca58:	cbz	x0, ca64 <BZ2_bzReadClose@@Base+0x3c>
    ca5c:	mov	w8, #0xffffffff            	// #-1
    ca60:	str	w8, [x0]
    ca64:	mov	w8, #0xffffffff            	// #-1
    ca68:	str	w8, [x19, #5096]
    ca6c:	b	ca78 <BZ2_bzReadClose@@Base+0x50>
    ca70:	cbz	x0, ca78 <BZ2_bzReadClose@@Base+0x50>
    ca74:	str	wzr, [x0]
    ca78:	ldp	x20, x19, [sp, #16]
    ca7c:	ldp	x29, x30, [sp], #32
    ca80:	ret
    ca84:	ldrb	w8, [x8, #88]
    ca88:	cbz	w8, caf4 <BZ2_bzReadClose@@Base+0xcc>
    ca8c:	ldr	x20, [x19, #5064]
    ca90:	cbz	x20, caf4 <BZ2_bzReadClose@@Base+0xcc>
    ca94:	ldr	x8, [x20]
    ca98:	mov	w9, #0x1398                	// #5016
    ca9c:	add	x9, x19, x9
    caa0:	cmp	x8, x9
    caa4:	b.ne	caf4 <BZ2_bzReadClose@@Base+0xcc>  // b.any
    caa8:	ldr	x1, [x20, #3152]
    caac:	cbz	x1, cabc <BZ2_bzReadClose@@Base+0x94>
    cab0:	ldr	x8, [x19, #5080]
    cab4:	ldr	x0, [x19, #5088]
    cab8:	blr	x8
    cabc:	ldr	x1, [x20, #3160]
    cac0:	cbz	x1, cad0 <BZ2_bzReadClose@@Base+0xa8>
    cac4:	ldr	x8, [x19, #5080]
    cac8:	ldr	x0, [x19, #5088]
    cacc:	blr	x8
    cad0:	ldr	x1, [x20, #3168]
    cad4:	cbz	x1, cae4 <BZ2_bzReadClose@@Base+0xbc>
    cad8:	ldr	x8, [x19, #5080]
    cadc:	ldr	x0, [x19, #5088]
    cae0:	blr	x8
    cae4:	ldr	x8, [x19, #5080]
    cae8:	ldr	x0, [x19, #5088]
    caec:	ldr	x1, [x19, #5064]
    caf0:	blr	x8
    caf4:	mov	x0, x19
    caf8:	ldp	x20, x19, [sp, #16]
    cafc:	ldp	x29, x30, [sp], #32
    cb00:	b	1540 <free@plt>

000000000000cb04 <BZ2_bzRead@@Base>:
    cb04:	stp	x29, x30, [sp, #-64]!
    cb08:	stp	x24, x23, [sp, #16]
    cb0c:	stp	x22, x21, [sp, #32]
    cb10:	stp	x20, x19, [sp, #48]
    cb14:	mov	x29, sp
    cb18:	mov	w20, w3
    cb1c:	mov	x19, x1
    cb20:	mov	x21, x0
    cb24:	cbz	x0, cb2c <BZ2_bzRead@@Base+0x28>
    cb28:	str	wzr, [x21]
    cb2c:	cbz	x19, cb60 <BZ2_bzRead@@Base+0x5c>
    cb30:	str	wzr, [x19, #5096]
    cb34:	cbz	x2, cb60 <BZ2_bzRead@@Base+0x5c>
    cb38:	tbnz	w20, #31, cb60 <BZ2_bzRead@@Base+0x5c>
    cb3c:	mov	w8, #0x1394                	// #5012
    cb40:	ldrb	w8, [x19, x8]
    cb44:	cbz	w8, cb94 <BZ2_bzRead@@Base+0x90>
    cb48:	cbz	x21, cb54 <BZ2_bzRead@@Base+0x50>
    cb4c:	mov	w8, #0xffffffff            	// #-1
    cb50:	str	w8, [x21]
    cb54:	mov	w20, wzr
    cb58:	mov	w8, #0xffffffff            	// #-1
    cb5c:	b	cb78 <BZ2_bzRead@@Base+0x74>
    cb60:	cbz	x21, cb6c <BZ2_bzRead@@Base+0x68>
    cb64:	mov	w8, #0xfffffffe            	// #-2
    cb68:	str	w8, [x21]
    cb6c:	mov	w20, wzr
    cb70:	cbz	x19, cb7c <BZ2_bzRead@@Base+0x78>
    cb74:	mov	w8, #0xfffffffe            	// #-2
    cb78:	str	w8, [x19, #5096]
    cb7c:	mov	w0, w20
    cb80:	ldp	x20, x19, [sp, #48]
    cb84:	ldp	x22, x21, [sp, #32]
    cb88:	ldp	x24, x23, [sp, #16]
    cb8c:	ldp	x29, x30, [sp], #64
    cb90:	ret
    cb94:	cbz	w20, cc80 <BZ2_bzRead@@Base+0x17c>
    cb98:	mov	w8, #0x1398                	// #5016
    cb9c:	add	x22, x19, x8
    cba0:	add	x23, x19, #0x8
    cba4:	str	w20, [x19, #5048]
    cba8:	str	x2, [x19, #5040]
    cbac:	b	cbc0 <BZ2_bzRead@@Base+0xbc>
    cbb0:	cmp	w0, #0x4
    cbb4:	b.eq	ccd0 <BZ2_bzRead@@Base+0x1cc>  // b.none
    cbb8:	ldr	w8, [x19, #5048]
    cbbc:	cbz	w8, ccc0 <BZ2_bzRead@@Base+0x1bc>
    cbc0:	ldr	x24, [x19]
    cbc4:	mov	x0, x24
    cbc8:	bl	1620 <ferror@plt>
    cbcc:	cbnz	w0, cc94 <BZ2_bzRead@@Base+0x190>
    cbd0:	ldr	w8, [x19, #5024]
    cbd4:	cbnz	w8, cc24 <BZ2_bzRead@@Base+0x120>
    cbd8:	mov	x0, x24
    cbdc:	bl	1490 <fgetc@plt>
    cbe0:	cmn	w0, #0x1
    cbe4:	b.eq	cc24 <BZ2_bzRead@@Base+0x120>  // b.none
    cbe8:	mov	x1, x24
    cbec:	bl	1550 <ungetc@plt>
    cbf0:	ldr	x3, [x19]
    cbf4:	mov	w1, #0x1                   	// #1
    cbf8:	mov	w2, #0x1388                	// #5000
    cbfc:	mov	x0, x23
    cc00:	bl	1530 <fread@plt>
    cc04:	ldr	x8, [x19]
    cc08:	mov	x24, x0
    cc0c:	mov	x0, x8
    cc10:	bl	1620 <ferror@plt>
    cc14:	cbnz	w0, cc94 <BZ2_bzRead@@Base+0x190>
    cc18:	str	w24, [x19, #5008]
    cc1c:	str	w24, [x19, #5024]
    cc20:	str	x23, [x19, #5016]
    cc24:	mov	x0, x22
    cc28:	bl	1560 <BZ2_bzDecompress@plt>
    cc2c:	tst	w0, #0xfffffffb
    cc30:	b.ne	ccac <BZ2_bzRead@@Base+0x1a8>  // b.any
    cc34:	cbnz	w0, cbb0 <BZ2_bzRead@@Base+0xac>
    cc38:	ldr	x24, [x19]
    cc3c:	mov	x0, x24
    cc40:	bl	1490 <fgetc@plt>
    cc44:	cmn	w0, #0x1
    cc48:	b.eq	cc58 <BZ2_bzRead@@Base+0x154>  // b.none
    cc4c:	mov	x1, x24
    cc50:	bl	1550 <ungetc@plt>
    cc54:	b	cbb8 <BZ2_bzRead@@Base+0xb4>
    cc58:	ldr	w8, [x19, #5024]
    cc5c:	cbnz	w8, cbb8 <BZ2_bzRead@@Base+0xb4>
    cc60:	ldr	w8, [x19, #5048]
    cc64:	cbz	w8, ccc0 <BZ2_bzRead@@Base+0x1bc>
    cc68:	cbz	x21, cc74 <BZ2_bzRead@@Base+0x170>
    cc6c:	mov	w8, #0xfffffff9            	// #-7
    cc70:	str	w8, [x21]
    cc74:	mov	w20, wzr
    cc78:	mov	w8, #0xfffffff9            	// #-7
    cc7c:	b	cb78 <BZ2_bzRead@@Base+0x74>
    cc80:	cbz	x21, cc88 <BZ2_bzRead@@Base+0x184>
    cc84:	str	wzr, [x21]
    cc88:	mov	w20, wzr
    cc8c:	str	wzr, [x19, #5096]
    cc90:	b	cb7c <BZ2_bzRead@@Base+0x78>
    cc94:	cbz	x21, cca0 <BZ2_bzRead@@Base+0x19c>
    cc98:	mov	w8, #0xfffffffa            	// #-6
    cc9c:	str	w8, [x21]
    cca0:	mov	w20, wzr
    cca4:	mov	w8, #0xfffffffa            	// #-6
    cca8:	b	cb78 <BZ2_bzRead@@Base+0x74>
    ccac:	cbz	x21, ccb4 <BZ2_bzRead@@Base+0x1b0>
    ccb0:	str	w0, [x21]
    ccb4:	mov	w20, wzr
    ccb8:	str	w0, [x19, #5096]
    ccbc:	b	cb7c <BZ2_bzRead@@Base+0x78>
    ccc0:	cbz	x21, ccc8 <BZ2_bzRead@@Base+0x1c4>
    ccc4:	str	wzr, [x21]
    ccc8:	str	wzr, [x19, #5096]
    cccc:	b	cb7c <BZ2_bzRead@@Base+0x78>
    ccd0:	cbz	x21, ccdc <BZ2_bzRead@@Base+0x1d8>
    ccd4:	mov	w8, #0x4                   	// #4
    ccd8:	str	w8, [x21]
    ccdc:	ldr	w8, [x19, #5048]
    cce0:	mov	w9, #0x4                   	// #4
    cce4:	str	w9, [x19, #5096]
    cce8:	sub	w20, w20, w8
    ccec:	b	cb7c <BZ2_bzRead@@Base+0x78>

000000000000ccf0 <BZ2_bzReadGetUnused@@Base>:
    ccf0:	cbz	x1, cd28 <BZ2_bzReadGetUnused@@Base+0x38>
    ccf4:	ldr	w8, [x1, #5096]
    ccf8:	cmp	w8, #0x4
    ccfc:	b.ne	cd38 <BZ2_bzReadGetUnused@@Base+0x48>  // b.any
    cd00:	cbz	x2, cd50 <BZ2_bzReadGetUnused@@Base+0x60>
    cd04:	cbz	x3, cd50 <BZ2_bzReadGetUnused@@Base+0x60>
    cd08:	cbz	x0, cd10 <BZ2_bzReadGetUnused@@Base+0x20>
    cd0c:	str	wzr, [x0]
    cd10:	ldr	w8, [x1, #5024]
    cd14:	str	wzr, [x1, #5096]
    cd18:	str	w8, [x3]
    cd1c:	ldr	x8, [x1, #5016]
    cd20:	str	x8, [x2]
    cd24:	ret
    cd28:	cbz	x0, cd24 <BZ2_bzReadGetUnused@@Base+0x34>
    cd2c:	mov	w8, #0xfffffffe            	// #-2
    cd30:	str	w8, [x0]
    cd34:	ret
    cd38:	cbz	x0, cd44 <BZ2_bzReadGetUnused@@Base+0x54>
    cd3c:	mov	w8, #0xffffffff            	// #-1
    cd40:	str	w8, [x0]
    cd44:	mov	w8, #0xffffffff            	// #-1
    cd48:	str	w8, [x1, #5096]
    cd4c:	ret
    cd50:	cbz	x0, cd5c <BZ2_bzReadGetUnused@@Base+0x6c>
    cd54:	mov	w8, #0xfffffffe            	// #-2
    cd58:	str	w8, [x0]
    cd5c:	mov	w8, #0xfffffffe            	// #-2
    cd60:	str	w8, [x1, #5096]
    cd64:	ret

000000000000cd68 <BZ2_bzBuffToBuffCompress@@Base>:
    cd68:	sub	sp, sp, #0x90
    cd6c:	stp	x29, x30, [sp, #80]
    cd70:	str	x23, [sp, #96]
    cd74:	stp	x22, x21, [sp, #112]
    cd78:	stp	x20, x19, [sp, #128]
    cd7c:	add	x29, sp, #0x50
    cd80:	cmp	w6, #0xfa
    cd84:	mov	w19, #0xfffffffe            	// #-2
    cd88:	b.hi	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    cd8c:	cmp	w5, #0x4
    cd90:	b.hi	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    cd94:	mov	x23, x0
    cd98:	cbz	x0, cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cd9c:	mov	x20, x1
    cda0:	cbz	x1, cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cda4:	mov	x22, x2
    cda8:	cbz	x2, cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cdac:	sub	w8, w4, #0x1
    cdb0:	cmp	w8, #0x8
    cdb4:	b.hi	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    cdb8:	cmp	w6, #0x0
    cdbc:	mov	w8, #0x1e                  	// #30
    cdc0:	mov	w21, w3
    cdc4:	csel	w3, w8, w6, eq  // eq = none
    cdc8:	mov	x0, sp
    cdcc:	mov	w1, w4
    cdd0:	mov	w2, w5
    cdd4:	stp	xzr, xzr, [sp, #56]
    cdd8:	str	xzr, [sp, #72]
    cddc:	bl	14c0 <BZ2_bzCompressInit@plt>
    cde0:	mov	w19, w0
    cde4:	cbz	w0, ce04 <BZ2_bzBuffToBuffCompress@@Base+0x9c>
    cde8:	mov	w0, w19
    cdec:	ldp	x20, x19, [sp, #128]
    cdf0:	ldp	x22, x21, [sp, #112]
    cdf4:	ldr	x23, [sp, #96]
    cdf8:	ldp	x29, x30, [sp, #80]
    cdfc:	add	sp, sp, #0x90
    ce00:	ret
    ce04:	str	x22, [sp]
    ce08:	str	x23, [sp, #24]
    ce0c:	str	w21, [sp, #8]
    ce10:	ldr	w8, [x20]
    ce14:	ldr	x22, [sp, #48]
    ce18:	str	w8, [sp, #32]
    ce1c:	cbz	x22, ce38 <BZ2_bzBuffToBuffCompress@@Base+0xd0>
    ce20:	ldr	x8, [x22]
    ce24:	mov	x23, sp
    ce28:	cmp	x8, x23
    ce2c:	b.eq	ce40 <BZ2_bzBuffToBuffCompress@@Base+0xd8>  // b.none
    ce30:	mov	w19, #0xfffffffe            	// #-2
    ce34:	b	cec8 <BZ2_bzBuffToBuffCompress@@Base+0x160>
    ce38:	mov	w19, #0xfffffffe            	// #-2
    ce3c:	b	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    ce40:	ldr	w8, [x22, #8]
    ce44:	cmp	w8, #0x2
    ce48:	b.ne	ce60 <BZ2_bzBuffToBuffCompress@@Base+0xf8>  // b.any
    ce4c:	mov	w8, #0x4                   	// #4
    ce50:	str	w21, [x22, #16]
    ce54:	str	w8, [x22, #8]
    ce58:	cmp	w8, #0x2
    ce5c:	b.eq	ce4c <BZ2_bzBuffToBuffCompress@@Base+0xe4>  // b.none
    ce60:	cmp	w8, #0x1
    ce64:	b.eq	cebc <BZ2_bzBuffToBuffCompress@@Base+0x154>  // b.none
    ce68:	cmp	w8, #0x3
    ce6c:	b.eq	cebc <BZ2_bzBuffToBuffCompress@@Base+0x154>  // b.none
    ce70:	cmp	w8, #0x4
    ce74:	b.ne	cec4 <BZ2_bzBuffToBuffCompress@@Base+0x15c>  // b.any
    ce78:	ldr	w8, [x22, #16]
    ce7c:	cmp	w8, w21
    ce80:	b.ne	cebc <BZ2_bzBuffToBuffCompress@@Base+0x154>  // b.any
    ce84:	mov	x0, sp
    ce88:	bl	ae34 <BZ2_bzCompress@@Base+0x18c>
    ce8c:	tst	w0, #0xff
    ce90:	b.eq	cf18 <BZ2_bzBuffToBuffCompress@@Base+0x1b0>  // b.none
    ce94:	ldr	w8, [x22, #16]
    ce98:	cbz	w8, cf28 <BZ2_bzBuffToBuffCompress@@Base+0x1c0>
    ce9c:	ldr	x19, [sp, #48]
    cea0:	cbz	x19, ceb4 <BZ2_bzBuffToBuffCompress@@Base+0x14c>
    cea4:	ldr	x8, [x19]
    cea8:	mov	x9, sp
    ceac:	cmp	x8, x9
    ceb0:	b.eq	cf84 <BZ2_bzBuffToBuffCompress@@Base+0x21c>  // b.none
    ceb4:	mov	w19, #0xfffffff8            	// #-8
    ceb8:	b	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cebc:	mov	w19, #0xffffffff            	// #-1
    cec0:	b	cec8 <BZ2_bzBuffToBuffCompress@@Base+0x160>
    cec4:	mov	w19, wzr
    cec8:	ldr	x8, [x22]
    cecc:	cmp	x8, x23
    ced0:	b.ne	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.any
    ced4:	ldr	x1, [x22, #24]
    ced8:	cbz	x1, cee4 <BZ2_bzBuffToBuffCompress@@Base+0x17c>
    cedc:	ldp	x8, x0, [sp, #64]
    cee0:	blr	x8
    cee4:	ldr	x1, [x22, #32]
    cee8:	cbz	x1, cef4 <BZ2_bzBuffToBuffCompress@@Base+0x18c>
    ceec:	ldp	x8, x0, [sp, #64]
    cef0:	blr	x8
    cef4:	ldr	x1, [x22, #40]
    cef8:	cbz	x1, cf04 <BZ2_bzBuffToBuffCompress@@Base+0x19c>
    cefc:	ldp	x8, x0, [sp, #64]
    cf00:	blr	x8
    cf04:	ldp	x8, x0, [sp, #64]
    cf08:	ldr	x1, [sp, #48]
    cf0c:	blr	x8
    cf10:	str	xzr, [sp, #48]
    cf14:	b	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cf18:	ldr	x22, [sp, #48]
    cf1c:	mov	w19, #0xffffffff            	// #-1
    cf20:	cbnz	x22, cec8 <BZ2_bzBuffToBuffCompress@@Base+0x160>
    cf24:	b	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cf28:	ldr	w8, [x22, #92]
    cf2c:	cmp	w8, #0xff
    cf30:	b.hi	cf40 <BZ2_bzBuffToBuffCompress@@Base+0x1d8>  // b.pmore
    cf34:	ldr	w8, [x22, #96]
    cf38:	cmp	w8, #0x0
    cf3c:	b.gt	ce9c <BZ2_bzBuffToBuffCompress@@Base+0x134>
    cf40:	ldp	w9, w8, [x22, #116]
    cf44:	cmp	w8, w9
    cf48:	b.lt	ce9c <BZ2_bzBuffToBuffCompress@@Base+0x134>  // b.tstop
    cf4c:	mov	w8, #0x1                   	// #1
    cf50:	str	w8, [x22, #8]
    cf54:	ldr	w8, [sp, #32]
    cf58:	ldr	w9, [x20]
    cf5c:	sub	w8, w9, w8
    cf60:	str	w8, [x20]
    cf64:	ldr	x19, [sp, #48]
    cf68:	cbz	x19, cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cf6c:	ldr	x8, [x19]
    cf70:	mov	x9, sp
    cf74:	cmp	x8, x9
    cf78:	b.eq	cfcc <BZ2_bzBuffToBuffCompress@@Base+0x264>  // b.none
    cf7c:	mov	w19, wzr
    cf80:	b	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cf84:	ldr	x1, [x19, #24]
    cf88:	cbz	x1, cf94 <BZ2_bzBuffToBuffCompress@@Base+0x22c>
    cf8c:	ldp	x8, x0, [sp, #64]
    cf90:	blr	x8
    cf94:	ldr	x1, [x19, #32]
    cf98:	cbz	x1, cfa4 <BZ2_bzBuffToBuffCompress@@Base+0x23c>
    cf9c:	ldp	x8, x0, [sp, #64]
    cfa0:	blr	x8
    cfa4:	ldr	x1, [x19, #40]
    cfa8:	cbz	x1, cfb4 <BZ2_bzBuffToBuffCompress@@Base+0x24c>
    cfac:	ldp	x8, x0, [sp, #64]
    cfb0:	blr	x8
    cfb4:	ldp	x8, x0, [sp, #64]
    cfb8:	ldr	x1, [sp, #48]
    cfbc:	blr	x8
    cfc0:	str	xzr, [sp, #48]
    cfc4:	mov	w19, #0xfffffff8            	// #-8
    cfc8:	b	cde8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    cfcc:	ldr	x1, [x19, #24]
    cfd0:	cbz	x1, cfdc <BZ2_bzBuffToBuffCompress@@Base+0x274>
    cfd4:	ldp	x8, x0, [sp, #64]
    cfd8:	blr	x8
    cfdc:	ldr	x1, [x19, #32]
    cfe0:	cbz	x1, cfec <BZ2_bzBuffToBuffCompress@@Base+0x284>
    cfe4:	ldp	x8, x0, [sp, #64]
    cfe8:	blr	x8
    cfec:	ldr	x1, [x19, #40]
    cff0:	cbz	x1, cffc <BZ2_bzBuffToBuffCompress@@Base+0x294>
    cff4:	ldp	x8, x0, [sp, #64]
    cff8:	blr	x8
    cffc:	ldp	x8, x0, [sp, #64]
    d000:	ldr	x1, [sp, #48]
    d004:	blr	x8
    d008:	mov	w19, wzr
    d00c:	b	cf10 <BZ2_bzBuffToBuffCompress@@Base+0x1a8>

000000000000d010 <BZ2_bzBuffToBuffDecompress@@Base>:
    d010:	sub	sp, sp, #0xa0
    d014:	stp	x29, x30, [sp, #80]
    d018:	str	x25, [sp, #96]
    d01c:	stp	x24, x23, [sp, #112]
    d020:	stp	x22, x21, [sp, #128]
    d024:	stp	x20, x19, [sp, #144]
    d028:	add	x29, sp, #0x50
    d02c:	mov	w19, #0xfffffffe            	// #-2
    d030:	cbz	x0, d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d034:	mov	x20, x1
    d038:	cbz	x1, d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d03c:	mov	x23, x2
    d040:	cbz	x2, d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d044:	mov	w25, w4
    d048:	cmp	w4, #0x1
    d04c:	mov	w19, #0xfffffffe            	// #-2
    d050:	b.hi	d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>  // b.pmore
    d054:	mov	w22, w5
    d058:	cmp	w5, #0x4
    d05c:	b.hi	d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>  // b.pmore
    d060:	adrp	x8, a000 <BZ2_decompress@@Base+0x2338>
    d064:	adrp	x9, a000 <BZ2_decompress@@Base+0x2338>
    d068:	mov	x24, x0
    d06c:	add	x8, x8, #0xc8c
    d070:	add	x9, x9, #0xc98
    d074:	mov	w0, #0xfa90                	// #64144
    d078:	mov	w21, w3
    d07c:	str	x8, [sp, #56]
    d080:	stp	x9, xzr, [sp, #64]
    d084:	bl	1480 <malloc@plt>
    d088:	cbz	x0, d124 <BZ2_bzBuffToBuffDecompress@@Base+0x114>
    d08c:	mov	x8, sp
    d090:	mov	w9, #0xa                   	// #10
    d094:	movi	v0.2d, #0x0
    d098:	str	x0, [sp, #48]
    d09c:	strb	w25, [x0, #44]
    d0a0:	str	wzr, [x0, #3188]
    d0a4:	str	xzr, [x0, #3152]
    d0a8:	str	xzr, [x0, #3168]
    d0ac:	str	xzr, [x0, #3160]
    d0b0:	stp	wzr, w22, [x0, #48]
    d0b4:	str	x23, [sp]
    d0b8:	str	x24, [sp, #24]
    d0bc:	str	x8, [x0]
    d0c0:	str	w9, [x0, #8]
    d0c4:	str	d0, [x0, #32]
    d0c8:	stur	d0, [sp, #12]
    d0cc:	stur	d0, [sp, #36]
    d0d0:	str	w21, [sp, #8]
    d0d4:	ldr	w8, [x20]
    d0d8:	mov	x0, sp
    d0dc:	str	w8, [sp, #32]
    d0e0:	bl	1560 <BZ2_bzDecompress@plt>
    d0e4:	cbz	w0, d12c <BZ2_bzBuffToBuffDecompress@@Base+0x11c>
    d0e8:	mov	w19, w0
    d0ec:	cmp	w0, #0x4
    d0f0:	b.ne	d198 <BZ2_bzBuffToBuffDecompress@@Base+0x188>  // b.any
    d0f4:	ldr	w8, [sp, #32]
    d0f8:	ldr	w9, [x20]
    d0fc:	sub	w8, w9, w8
    d100:	str	w8, [x20]
    d104:	ldr	x19, [sp, #48]
    d108:	cbz	x19, d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d10c:	ldr	x8, [x19]
    d110:	mov	x9, sp
    d114:	cmp	x8, x9
    d118:	b.eq	d1f0 <BZ2_bzBuffToBuffDecompress@@Base+0x1e0>  // b.none
    d11c:	mov	w19, wzr
    d120:	b	d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d124:	mov	w19, #0xfffffffd            	// #-3
    d128:	b	d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d12c:	ldr	x20, [sp, #48]
    d130:	ldr	w19, [sp, #32]
    d134:	cbz	x20, d188 <BZ2_bzBuffToBuffDecompress@@Base+0x178>
    d138:	ldr	x8, [x20]
    d13c:	mov	x9, sp
    d140:	cmp	x8, x9
    d144:	b.ne	d188 <BZ2_bzBuffToBuffDecompress@@Base+0x178>  // b.any
    d148:	ldr	x1, [x20, #3152]
    d14c:	cbz	x1, d158 <BZ2_bzBuffToBuffDecompress@@Base+0x148>
    d150:	ldp	x8, x0, [sp, #64]
    d154:	blr	x8
    d158:	ldr	x1, [x20, #3160]
    d15c:	cbz	x1, d168 <BZ2_bzBuffToBuffDecompress@@Base+0x158>
    d160:	ldp	x8, x0, [sp, #64]
    d164:	blr	x8
    d168:	ldr	x1, [x20, #3168]
    d16c:	cbz	x1, d178 <BZ2_bzBuffToBuffDecompress@@Base+0x168>
    d170:	ldp	x8, x0, [sp, #64]
    d174:	blr	x8
    d178:	ldp	x8, x0, [sp, #64]
    d17c:	ldr	x1, [sp, #48]
    d180:	blr	x8
    d184:	str	xzr, [sp, #48]
    d188:	cmp	w19, #0x0
    d18c:	mov	w8, #0xfffffff8            	// #-8
    d190:	cinc	w19, w8, ne  // ne = any
    d194:	b	d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d198:	ldr	x20, [sp, #48]
    d19c:	cbz	x20, d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>
    d1a0:	ldr	x8, [x20]
    d1a4:	mov	x9, sp
    d1a8:	cmp	x8, x9
    d1ac:	b.ne	d234 <BZ2_bzBuffToBuffDecompress@@Base+0x224>  // b.any
    d1b0:	ldr	x1, [x20, #3152]
    d1b4:	cbz	x1, d1c0 <BZ2_bzBuffToBuffDecompress@@Base+0x1b0>
    d1b8:	ldp	x8, x0, [sp, #64]
    d1bc:	blr	x8
    d1c0:	ldr	x1, [x20, #3160]
    d1c4:	cbz	x1, d1d0 <BZ2_bzBuffToBuffDecompress@@Base+0x1c0>
    d1c8:	ldp	x8, x0, [sp, #64]
    d1cc:	blr	x8
    d1d0:	ldr	x1, [x20, #3168]
    d1d4:	cbz	x1, d1e0 <BZ2_bzBuffToBuffDecompress@@Base+0x1d0>
    d1d8:	ldp	x8, x0, [sp, #64]
    d1dc:	blr	x8
    d1e0:	ldp	x8, x0, [sp, #64]
    d1e4:	ldr	x1, [sp, #48]
    d1e8:	blr	x8
    d1ec:	b	d230 <BZ2_bzBuffToBuffDecompress@@Base+0x220>
    d1f0:	ldr	x1, [x19, #3152]
    d1f4:	cbz	x1, d200 <BZ2_bzBuffToBuffDecompress@@Base+0x1f0>
    d1f8:	ldp	x8, x0, [sp, #64]
    d1fc:	blr	x8
    d200:	ldr	x1, [x19, #3160]
    d204:	cbz	x1, d210 <BZ2_bzBuffToBuffDecompress@@Base+0x200>
    d208:	ldp	x8, x0, [sp, #64]
    d20c:	blr	x8
    d210:	ldr	x1, [x19, #3168]
    d214:	cbz	x1, d220 <BZ2_bzBuffToBuffDecompress@@Base+0x210>
    d218:	ldp	x8, x0, [sp, #64]
    d21c:	blr	x8
    d220:	ldp	x8, x0, [sp, #64]
    d224:	ldr	x1, [sp, #48]
    d228:	blr	x8
    d22c:	mov	w19, wzr
    d230:	str	xzr, [sp, #48]
    d234:	mov	w0, w19
    d238:	ldp	x20, x19, [sp, #144]
    d23c:	ldp	x22, x21, [sp, #128]
    d240:	ldp	x24, x23, [sp, #112]
    d244:	ldr	x25, [sp, #96]
    d248:	ldp	x29, x30, [sp, #80]
    d24c:	add	sp, sp, #0xa0
    d250:	ret

000000000000d254 <BZ2_bzopen@@Base>:
    d254:	mov	x2, x1
    d258:	mov	w1, #0xffffffff            	// #-1
    d25c:	mov	w3, wzr
    d260:	b	d264 <BZ2_bzopen@@Base+0x10>
    d264:	stp	x29, x30, [sp, #-96]!
    d268:	str	x28, [sp, #16]
    d26c:	stp	x26, x25, [sp, #32]
    d270:	stp	x24, x23, [sp, #48]
    d274:	stp	x22, x21, [sp, #64]
    d278:	stp	x20, x19, [sp, #80]
    d27c:	mov	x29, sp
    d280:	sub	sp, sp, #0x1, lsl #12
    d284:	sub	sp, sp, #0x3a0
    d288:	strh	wzr, [sp, #16]
    d28c:	str	xzr, [sp, #8]
    d290:	cbz	x2, d448 <BZ2_bzopen@@Base+0x1f4>
    d294:	mov	w22, w3
    d298:	mov	x23, x2
    d29c:	mov	w21, w1
    d2a0:	mov	x20, x0
    d2a4:	mov	w25, wzr
    d2a8:	mov	w19, wzr
    d2ac:	mov	w24, #0x9                   	// #9
    d2b0:	b	d2bc <BZ2_bzopen@@Base+0x68>
    d2b4:	mov	w19, #0x1                   	// #1
    d2b8:	add	x23, x23, #0x1
    d2bc:	ldrb	w26, [x23]
    d2c0:	cmp	w26, #0x72
    d2c4:	b.le	d2e4 <BZ2_bzopen@@Base+0x90>
    d2c8:	cmp	w26, #0x73
    d2cc:	b.eq	d2b4 <BZ2_bzopen@@Base+0x60>  // b.none
    d2d0:	cmp	w26, #0x77
    d2d4:	b.ne	d2f8 <BZ2_bzopen@@Base+0xa4>  // b.any
    d2d8:	mov	w25, #0x1                   	// #1
    d2dc:	add	x23, x23, #0x1
    d2e0:	b	d2bc <BZ2_bzopen@@Base+0x68>
    d2e4:	b.ne	d2f4 <BZ2_bzopen@@Base+0xa0>  // b.any
    d2e8:	mov	w25, wzr
    d2ec:	add	x23, x23, #0x1
    d2f0:	b	d2bc <BZ2_bzopen@@Base+0x68>
    d2f4:	cbz	w26, d318 <BZ2_bzopen@@Base+0xc4>
    d2f8:	bl	1510 <__ctype_b_loc@plt>
    d2fc:	ldr	x8, [x0]
    d300:	sub	w9, w26, #0x30
    d304:	add	x23, x23, #0x1
    d308:	ldrh	w8, [x8, w26, uxtw #1]
    d30c:	tst	w8, #0x800
    d310:	csel	w24, w24, w9, eq  // eq = none
    d314:	b	d2bc <BZ2_bzopen@@Base+0x68>
    d318:	add	x0, sp, #0x8
    d31c:	add	x23, sp, #0x8
    d320:	bl	1420 <strlen@plt>
    d324:	cmp	w25, #0x0
    d328:	mov	w8, #0x72                  	// #114
    d32c:	mov	w9, #0x77                  	// #119
    d330:	csel	w8, w9, w8, ne  // ne = any
    d334:	strh	w8, [x23, x0]
    d338:	add	x0, sp, #0x8
    d33c:	bl	1420 <strlen@plt>
    d340:	mov	w8, #0x62                  	// #98
    d344:	strh	w8, [x23, x0]
    d348:	cbz	w22, d364 <BZ2_bzopen@@Base+0x110>
    d34c:	add	x1, sp, #0x8
    d350:	mov	w0, w21
    d354:	bl	14b0 <fdopen@plt>
    d358:	mov	x20, x0
    d35c:	cbnz	x20, d3a8 <BZ2_bzopen@@Base+0x154>
    d360:	b	d448 <BZ2_bzopen@@Base+0x1f4>
    d364:	cbz	x20, d388 <BZ2_bzopen@@Base+0x134>
    d368:	ldrb	w8, [x20]
    d36c:	cbz	w8, d388 <BZ2_bzopen@@Base+0x134>
    d370:	add	x1, sp, #0x8
    d374:	mov	x0, x20
    d378:	bl	15d0 <fopen64@plt>
    d37c:	mov	x20, x0
    d380:	cbnz	x20, d3a8 <BZ2_bzopen@@Base+0x154>
    d384:	b	d448 <BZ2_bzopen@@Base+0x1f4>
    d388:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d38c:	adrp	x9, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d390:	ldr	x8, [x8, #4032]
    d394:	ldr	x9, [x9, #4040]
    d398:	cmp	w25, #0x0
    d39c:	csel	x8, x8, x9, ne  // ne = any
    d3a0:	ldr	x20, [x8]
    d3a4:	cbz	x20, d448 <BZ2_bzopen@@Base+0x1f4>
    d3a8:	cbz	w25, d3d8 <BZ2_bzopen@@Base+0x184>
    d3ac:	cmp	w24, #0x1
    d3b0:	csinc	w8, w24, wzr, gt
    d3b4:	cmp	w8, #0x9
    d3b8:	mov	w9, #0x9                   	// #9
    d3bc:	csel	w21, w8, w9, lt  // lt = tstop
    d3c0:	sub	w8, w21, #0x1
    d3c4:	cmp	w8, #0x9
    d3c8:	str	wzr, [x29, #28]
    d3cc:	b.cc	d400 <BZ2_bzopen@@Base+0x1ac>  // b.lo, b.ul, b.last
    d3d0:	mov	w8, #0xfffffffe            	// #-2
    d3d4:	b	d410 <BZ2_bzopen@@Base+0x1bc>
    d3d8:	add	x0, x29, #0x1c
    d3dc:	add	x4, sp, #0x18
    d3e0:	mov	x1, x20
    d3e4:	mov	w2, wzr
    d3e8:	mov	w3, w19
    d3ec:	mov	w5, wzr
    d3f0:	bl	15e0 <BZ2_bzReadOpen@plt>
    d3f4:	mov	x19, x0
    d3f8:	cbnz	x0, d44c <BZ2_bzopen@@Base+0x1f8>
    d3fc:	b	d414 <BZ2_bzopen@@Base+0x1c0>
    d400:	mov	x0, x20
    d404:	bl	1620 <ferror@plt>
    d408:	cbz	w0, d474 <BZ2_bzopen@@Base+0x220>
    d40c:	mov	w8, #0xfffffffa            	// #-6
    d410:	str	w8, [x29, #28]
    d414:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d418:	ldr	x8, [x8, #4040]
    d41c:	mov	x19, xzr
    d420:	ldr	x8, [x8]
    d424:	cmp	x20, x8
    d428:	b.eq	d44c <BZ2_bzopen@@Base+0x1f8>  // b.none
    d42c:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d430:	ldr	x8, [x8, #4032]
    d434:	ldr	x8, [x8]
    d438:	cmp	x20, x8
    d43c:	b.eq	d44c <BZ2_bzopen@@Base+0x1f8>  // b.none
    d440:	mov	x0, x20
    d444:	bl	1470 <fclose@plt>
    d448:	mov	x19, xzr
    d44c:	mov	x0, x19
    d450:	add	sp, sp, #0x1, lsl #12
    d454:	add	sp, sp, #0x3a0
    d458:	ldp	x20, x19, [sp, #80]
    d45c:	ldp	x22, x21, [sp, #64]
    d460:	ldp	x24, x23, [sp, #48]
    d464:	ldp	x26, x25, [sp, #32]
    d468:	ldr	x28, [sp, #16]
    d46c:	ldp	x29, x30, [sp], #96
    d470:	ret
    d474:	mov	w0, #0x13f0                	// #5104
    d478:	bl	1480 <malloc@plt>
    d47c:	cbz	x0, d4e0 <BZ2_bzopen@@Base+0x28c>
    d480:	mov	w8, #0x1394                	// #5012
    d484:	mov	w9, #0x1398                	// #5016
    d488:	mov	x19, x0
    d48c:	str	wzr, [x0, #5096]
    d490:	mov	w22, #0x1                   	// #1
    d494:	movi	v0.2d, #0x0
    d498:	add	x23, x0, x8
    d49c:	add	x0, x0, x9
    d4a0:	mov	w3, #0x1e                  	// #30
    d4a4:	mov	w1, w21
    d4a8:	mov	w2, wzr
    d4ac:	str	wzr, [x29, #28]
    d4b0:	strb	wzr, [x23, #88]
    d4b4:	str	wzr, [x19, #5008]
    d4b8:	str	x20, [x19]
    d4bc:	strb	w22, [x23]
    d4c0:	str	xzr, [x19, #5088]
    d4c4:	str	q0, [x19, #5072]
    d4c8:	bl	14c0 <BZ2_bzCompressInit@plt>
    d4cc:	cbz	w0, d4e8 <BZ2_bzopen@@Base+0x294>
    d4d0:	str	w0, [x29, #28]
    d4d4:	mov	x0, x19
    d4d8:	bl	1540 <free@plt>
    d4dc:	b	d414 <BZ2_bzopen@@Base+0x1c0>
    d4e0:	mov	w8, #0xfffffffd            	// #-3
    d4e4:	b	d410 <BZ2_bzopen@@Base+0x1bc>
    d4e8:	str	wzr, [x19, #5024]
    d4ec:	strb	w22, [x23, #88]
    d4f0:	b	d44c <BZ2_bzopen@@Base+0x1f8>

000000000000d4f4 <BZ2_bzdopen@@Base>:
    d4f4:	mov	x2, x1
    d4f8:	mov	w3, #0x1                   	// #1
    d4fc:	mov	w1, w0
    d500:	mov	x0, xzr
    d504:	b	d264 <BZ2_bzopen@@Base+0x10>

000000000000d508 <BZ2_bzread@@Base>:
    d508:	sub	sp, sp, #0x20
    d50c:	stp	x29, x30, [sp, #16]
    d510:	add	x29, sp, #0x10
    d514:	ldr	w9, [x0, #5096]
    d518:	cmp	w9, #0x4
    d51c:	b.ne	d528 <BZ2_bzread@@Base+0x20>  // b.any
    d520:	mov	w0, wzr
    d524:	b	d54c <BZ2_bzread@@Base+0x44>
    d528:	mov	x8, x0
    d52c:	mov	w3, w2
    d530:	mov	x2, x1
    d534:	sub	x0, x29, #0x4
    d538:	mov	x1, x8
    d53c:	bl	15f0 <BZ2_bzRead@plt>
    d540:	ldur	w8, [x29, #-4]
    d544:	tst	w8, #0xfffffffb
    d548:	csinv	w0, w0, wzr, eq  // eq = none
    d54c:	ldp	x29, x30, [sp, #16]
    d550:	add	sp, sp, #0x20
    d554:	ret

000000000000d558 <BZ2_bzwrite@@Base>:
    d558:	stp	x29, x30, [sp, #-32]!
    d55c:	str	x19, [sp, #16]
    d560:	mov	x29, sp
    d564:	mov	w19, w2
    d568:	mov	x2, x1
    d56c:	mov	x1, x0
    d570:	add	x0, x29, #0x1c
    d574:	mov	w3, w19
    d578:	bl	1500 <BZ2_bzWrite@plt>
    d57c:	ldr	w8, [x29, #28]
    d580:	cmp	w8, #0x0
    d584:	csinv	w0, w19, wzr, eq  // eq = none
    d588:	ldr	x19, [sp, #16]
    d58c:	ldp	x29, x30, [sp], #32
    d590:	ret

000000000000d594 <BZ2_bzflush@@Base>:
    d594:	mov	w0, wzr
    d598:	ret

000000000000d59c <BZ2_bzclose@@Base>:
    d59c:	stp	x29, x30, [sp, #-48]!
    d5a0:	str	x21, [sp, #16]
    d5a4:	stp	x20, x19, [sp, #32]
    d5a8:	mov	x29, sp
    d5ac:	cbz	x0, d6c4 <BZ2_bzclose@@Base+0x128>
    d5b0:	mov	w8, #0x1394                	// #5012
    d5b4:	add	x8, x0, x8
    d5b8:	ldrb	w9, [x8]
    d5bc:	ldr	x19, [x0]
    d5c0:	mov	x20, x0
    d5c4:	cbz	w9, d614 <BZ2_bzclose@@Base+0x78>
    d5c8:	add	x0, x29, #0x1c
    d5cc:	mov	x1, x20
    d5d0:	mov	w2, wzr
    d5d4:	mov	x3, xzr
    d5d8:	mov	x4, xzr
    d5dc:	mov	x5, xzr
    d5e0:	mov	x6, xzr
    d5e4:	bl	1580 <BZ2_bzWriteClose64@plt>
    d5e8:	ldr	w8, [x29, #28]
    d5ec:	cbz	w8, d694 <BZ2_bzclose@@Base+0xf8>
    d5f0:	mov	w2, #0x1                   	// #1
    d5f4:	mov	x0, xzr
    d5f8:	mov	x1, x20
    d5fc:	mov	x3, xzr
    d600:	mov	x4, xzr
    d604:	mov	x5, xzr
    d608:	mov	x6, xzr
    d60c:	bl	1580 <BZ2_bzWriteClose64@plt>
    d610:	b	d694 <BZ2_bzclose@@Base+0xf8>
    d614:	str	wzr, [x29, #28]
    d618:	str	wzr, [x20, #5096]
    d61c:	ldrb	w8, [x8, #88]
    d620:	cbz	w8, d68c <BZ2_bzclose@@Base+0xf0>
    d624:	ldr	x21, [x20, #5064]
    d628:	cbz	x21, d68c <BZ2_bzclose@@Base+0xf0>
    d62c:	ldr	x8, [x21]
    d630:	mov	w9, #0x1398                	// #5016
    d634:	add	x9, x20, x9
    d638:	cmp	x8, x9
    d63c:	b.ne	d68c <BZ2_bzclose@@Base+0xf0>  // b.any
    d640:	ldr	x1, [x21, #3152]
    d644:	cbz	x1, d654 <BZ2_bzclose@@Base+0xb8>
    d648:	ldr	x8, [x20, #5080]
    d64c:	ldr	x0, [x20, #5088]
    d650:	blr	x8
    d654:	ldr	x1, [x21, #3160]
    d658:	cbz	x1, d668 <BZ2_bzclose@@Base+0xcc>
    d65c:	ldr	x8, [x20, #5080]
    d660:	ldr	x0, [x20, #5088]
    d664:	blr	x8
    d668:	ldr	x1, [x21, #3168]
    d66c:	cbz	x1, d67c <BZ2_bzclose@@Base+0xe0>
    d670:	ldr	x8, [x20, #5080]
    d674:	ldr	x0, [x20, #5088]
    d678:	blr	x8
    d67c:	ldr	x8, [x20, #5080]
    d680:	ldr	x0, [x20, #5088]
    d684:	ldr	x1, [x20, #5064]
    d688:	blr	x8
    d68c:	mov	x0, x20
    d690:	bl	1540 <free@plt>
    d694:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d698:	ldr	x8, [x8, #4040]
    d69c:	ldr	x8, [x8]
    d6a0:	cmp	x19, x8
    d6a4:	b.eq	d6c4 <BZ2_bzclose@@Base+0x128>  // b.none
    d6a8:	adrp	x8, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d6ac:	ldr	x8, [x8, #4032]
    d6b0:	ldr	x8, [x8]
    d6b4:	cmp	x19, x8
    d6b8:	b.eq	d6c4 <BZ2_bzclose@@Base+0x128>  // b.none
    d6bc:	mov	x0, x19
    d6c0:	bl	1470 <fclose@plt>
    d6c4:	ldp	x20, x19, [sp, #32]
    d6c8:	ldr	x21, [sp, #16]
    d6cc:	ldp	x29, x30, [sp], #48
    d6d0:	ret

000000000000d6d4 <BZ2_bzerror@@Base>:
    d6d4:	ldr	w8, [x0, #5096]
    d6d8:	adrp	x9, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d6dc:	add	x9, x9, #0xd38
    d6e0:	and	w8, w8, w8, asr #31
    d6e4:	sub	x9, x9, w8, sxtw #3
    d6e8:	ldr	x0, [x9]
    d6ec:	str	w8, [x1]
    d6f0:	ret
    d6f4:	ldp	w8, w9, [x0, #92]
    d6f8:	sxtw	x9, w9
    d6fc:	cmp	w9, #0x1
    d700:	b.lt	d734 <BZ2_bzerror@@Base+0x60>  // b.tstop
    d704:	adrp	x13, 1e000 <BZ2_bzerror@@Base+0x1092c>
    d708:	ldr	w11, [x0, #648]
    d70c:	ldr	x13, [x13, #4024]
    d710:	mov	w10, wzr
    d714:	and	w12, w8, #0xff
    d718:	eor	w14, w12, w11, lsr #24
    d71c:	ldr	w14, [x13, w14, uxtw #2]
    d720:	add	w10, w10, #0x1
    d724:	cmp	w10, w9
    d728:	eor	w11, w14, w11, lsl #8
    d72c:	str	w11, [x0, #648]
    d730:	b.lt	d718 <BZ2_bzerror@@Base+0x44>  // b.tstop
    d734:	add	x10, x0, x8
    d738:	mov	w11, #0x1                   	// #1
    d73c:	cmp	w9, #0x3
    d740:	strb	w11, [x10, #128]
    d744:	b.eq	d764 <BZ2_bzerror@@Base+0x90>  // b.none
    d748:	cmp	w9, #0x2
    d74c:	b.eq	d7a0 <BZ2_bzerror@@Base+0xcc>  // b.none
    d750:	cmp	w9, #0x1
    d754:	b.ne	d7c8 <BZ2_bzerror@@Base+0xf4>  // b.any
    d758:	ldr	w10, [x0, #108]!
    d75c:	sub	x9, x0, #0x2c
    d760:	b	d834 <BZ2_bzerror@@Base+0x160>
    d764:	ldr	x9, [x0, #64]!
    d768:	mov	x11, x0
    d76c:	ldrsw	x10, [x11, #44]!
    d770:	strb	w8, [x9, x10]
    d774:	ldrsw	x9, [x11]
    d778:	add	x9, x9, #0x1
    d77c:	str	w9, [x11]
    d780:	ldr	x10, [x0]
    d784:	strb	w8, [x10, x9]
    d788:	ldr	w9, [x11]
    d78c:	add	w10, w9, #0x1
    d790:	str	w10, [x11]
    d794:	mov	x9, x0
    d798:	mov	x0, x11
    d79c:	b	d834 <BZ2_bzerror@@Base+0x160>
    d7a0:	ldr	x9, [x0, #64]!
    d7a4:	mov	x11, x0
    d7a8:	ldrsw	x10, [x11, #44]!
    d7ac:	strb	w8, [x9, x10]
    d7b0:	ldr	w10, [x11]
    d7b4:	mov	x9, x0
    d7b8:	mov	x0, x11
    d7bc:	add	w10, w10, #0x1
    d7c0:	str	w10, [x11]
    d7c4:	b	d834 <BZ2_bzerror@@Base+0x160>
    d7c8:	add	x9, x9, x0
    d7cc:	mov	w10, #0x1                   	// #1
    d7d0:	strb	w10, [x9, #124]
    d7d4:	ldrsw	x10, [x0, #108]!
    d7d8:	mov	x9, x0
    d7dc:	ldr	x11, [x9, #-44]!
    d7e0:	strb	w8, [x11, x10]
    d7e4:	ldrsw	x10, [x0]
    d7e8:	add	x10, x10, #0x1
    d7ec:	str	w10, [x0]
    d7f0:	ldr	x11, [x9]
    d7f4:	strb	w8, [x11, x10]
    d7f8:	ldrsw	x10, [x0]
    d7fc:	add	x10, x10, #0x1
    d800:	str	w10, [x0]
    d804:	ldr	x11, [x9]
    d808:	strb	w8, [x11, x10]
    d80c:	ldrsw	x10, [x0]
    d810:	add	x10, x10, #0x1
    d814:	str	w10, [x0]
    d818:	ldr	x11, [x9]
    d81c:	strb	w8, [x11, x10]
    d820:	ldr	w8, [x0]
    d824:	ldurb	w11, [x0, #-12]
    d828:	add	w10, w8, #0x1
    d82c:	sub	w8, w11, #0x4
    d830:	str	w10, [x0]
    d834:	ldr	x9, [x9]
    d838:	strb	w8, [x9, w10, sxtw]
    d83c:	ldr	w8, [x0]
    d840:	add	w8, w8, #0x1
    d844:	str	w8, [x0]
    d848:	ret

Disassembly of section .fini:

000000000000d84c <.fini>:
    d84c:	stp	x29, x30, [sp, #-16]!
    d850:	mov	x29, sp
    d854:	ldp	x29, x30, [sp], #16
    d858:	ret
