
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//pathchk_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000980 <_init>:
 980:	stp	x29, x30, [sp, #-16]!
 984:	mov	x29, sp
 988:	bl	ac0 <call_weak_fn>
 98c:	ldp	x29, x30, [sp], #16
 990:	ret

Disassembly of section .plt:

00000000000009a0 <.plt>:
 9a0:	stp	x16, x30, [sp, #-16]!
 9a4:	adrp	x16, 11000 <__FRAME_END__+0xf944>
 9a8:	ldr	x17, [x16, #4088]
 9ac:	add	x16, x16, #0xff8
 9b0:	br	x17
 9b4:	nop
 9b8:	nop
 9bc:	nop

00000000000009c0 <strlen@plt>:
 9c0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9c4:	ldr	x17, [x16]
 9c8:	add	x16, x16, #0x0
 9cc:	br	x17

00000000000009d0 <builtin_error@plt>:
 9d0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9d4:	ldr	x17, [x16, #8]
 9d8:	add	x16, x16, #0x8
 9dc:	br	x17

00000000000009e0 <__cxa_finalize@plt>:
 9e0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9e4:	ldr	x17, [x16, #16]
 9e8:	add	x16, x16, #0x10
 9ec:	br	x17

00000000000009f0 <builtin_help@plt>:
 9f0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9f4:	ldr	x17, [x16, #24]
 9f8:	add	x16, x16, #0x18
 9fc:	br	x17

0000000000000a00 <xmalloc@plt>:
 a00:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a04:	ldr	x17, [x16, #32]
 a08:	add	x16, x16, #0x20
 a0c:	br	x17

0000000000000a10 <builtin_usage@plt>:
 a10:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a14:	ldr	x17, [x16, #40]
 a18:	add	x16, x16, #0x28
 a1c:	br	x17

0000000000000a20 <strerror@plt>:
 a20:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a24:	ldr	x17, [x16, #48]
 a28:	add	x16, x16, #0x30
 a2c:	br	x17

0000000000000a30 <__gmon_start__@plt>:
 a30:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a34:	ldr	x17, [x16, #56]
 a38:	add	x16, x16, #0x38
 a3c:	br	x17

0000000000000a40 <access@plt>:
 a40:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a44:	ldr	x17, [x16, #64]
 a48:	add	x16, x16, #0x40
 a4c:	br	x17

0000000000000a50 <free@plt>:
 a50:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a54:	ldr	x17, [x16, #72]
 a58:	add	x16, x16, #0x48
 a5c:	br	x17

0000000000000a60 <internal_getopt@plt>:
 a60:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a64:	ldr	x17, [x16, #80]
 a68:	add	x16, x16, #0x50
 a6c:	br	x17

0000000000000a70 <reset_internal_getopt@plt>:
 a70:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a74:	ldr	x17, [x16, #88]
 a78:	add	x16, x16, #0x58
 a7c:	br	x17

0000000000000a80 <strchr@plt>:
 a80:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a84:	ldr	x17, [x16, #96]
 a88:	add	x16, x16, #0x60
 a8c:	br	x17

0000000000000a90 <strcpy@plt>:
 a90:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a94:	ldr	x17, [x16, #104]
 a98:	add	x16, x16, #0x68
 a9c:	br	x17

0000000000000aa0 <__errno_location@plt>:
 aa0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 aa4:	ldr	x17, [x16, #112]
 aa8:	add	x16, x16, #0x70
 aac:	br	x17

0000000000000ab0 <__xstat@plt>:
 ab0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 ab4:	ldr	x17, [x16, #120]
 ab8:	add	x16, x16, #0x78
 abc:	br	x17

Disassembly of section .text:

0000000000000ac0 <call_weak_fn>:
     ac0:	adrp	x0, 11000 <__FRAME_END__+0xf944>
     ac4:	ldr	x0, [x0, #4048]
     ac8:	cbz	x0, ad0 <call_weak_fn+0x10>
     acc:	b	a30 <__gmon_start__@plt>
     ad0:	ret

0000000000000ad4 <deregister_tm_clones>:
     ad4:	stp	x29, x30, [sp, #-32]!
     ad8:	mov	x29, sp
     adc:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     ae0:	add	x0, x0, #0xf0
     ae4:	str	x0, [sp, #24]
     ae8:	ldr	x0, [sp, #24]
     aec:	str	x0, [sp, #24]
     af0:	ldr	x1, [sp, #24]
     af4:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     af8:	add	x0, x0, #0xf0
     afc:	cmp	x1, x0
     b00:	b.eq	b38 <deregister_tm_clones+0x64>  // b.none
     b04:	adrp	x0, 11000 <__FRAME_END__+0xf944>
     b08:	ldr	x0, [x0, #4032]
     b0c:	str	x0, [sp, #16]
     b10:	ldr	x0, [sp, #16]
     b14:	str	x0, [sp, #16]
     b18:	ldr	x0, [sp, #16]
     b1c:	cmp	x0, #0x0
     b20:	b.eq	b3c <deregister_tm_clones+0x68>  // b.none
     b24:	ldr	x1, [sp, #16]
     b28:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     b2c:	add	x0, x0, #0xf0
     b30:	blr	x1
     b34:	b	b3c <deregister_tm_clones+0x68>
     b38:	nop
     b3c:	ldp	x29, x30, [sp], #32
     b40:	ret

0000000000000b44 <register_tm_clones>:
     b44:	stp	x29, x30, [sp, #-48]!
     b48:	mov	x29, sp
     b4c:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     b50:	add	x0, x0, #0xf0
     b54:	str	x0, [sp, #40]
     b58:	ldr	x0, [sp, #40]
     b5c:	str	x0, [sp, #40]
     b60:	ldr	x1, [sp, #40]
     b64:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     b68:	add	x0, x0, #0xf0
     b6c:	sub	x0, x1, x0
     b70:	asr	x0, x0, #3
     b74:	lsr	x1, x0, #63
     b78:	add	x0, x1, x0
     b7c:	asr	x0, x0, #1
     b80:	str	x0, [sp, #32]
     b84:	ldr	x0, [sp, #32]
     b88:	cmp	x0, #0x0
     b8c:	b.eq	bc8 <register_tm_clones+0x84>  // b.none
     b90:	adrp	x0, 11000 <__FRAME_END__+0xf944>
     b94:	ldr	x0, [x0, #4064]
     b98:	str	x0, [sp, #24]
     b9c:	ldr	x0, [sp, #24]
     ba0:	str	x0, [sp, #24]
     ba4:	ldr	x0, [sp, #24]
     ba8:	cmp	x0, #0x0
     bac:	b.eq	bcc <register_tm_clones+0x88>  // b.none
     bb0:	ldr	x2, [sp, #24]
     bb4:	ldr	x1, [sp, #32]
     bb8:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     bbc:	add	x0, x0, #0xf0
     bc0:	blr	x2
     bc4:	b	bcc <register_tm_clones+0x88>
     bc8:	nop
     bcc:	ldp	x29, x30, [sp], #48
     bd0:	ret

0000000000000bd4 <__do_global_dtors_aux>:
     bd4:	stp	x29, x30, [sp, #-16]!
     bd8:	mov	x29, sp
     bdc:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     be0:	add	x0, x0, #0xf0
     be4:	ldrb	w0, [x0]
     be8:	and	x0, x0, #0xff
     bec:	cmp	x0, #0x0
     bf0:	b.ne	c2c <__do_global_dtors_aux+0x58>  // b.any
     bf4:	adrp	x0, 11000 <__FRAME_END__+0xf944>
     bf8:	ldr	x0, [x0, #4040]
     bfc:	cmp	x0, #0x0
     c00:	b.eq	c14 <__do_global_dtors_aux+0x40>  // b.none
     c04:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     c08:	add	x0, x0, #0x80
     c0c:	ldr	x0, [x0]
     c10:	bl	9e0 <__cxa_finalize@plt>
     c14:	bl	ad4 <deregister_tm_clones>
     c18:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     c1c:	add	x0, x0, #0xf0
     c20:	mov	w1, #0x1                   	// #1
     c24:	strb	w1, [x0]
     c28:	b	c30 <__do_global_dtors_aux+0x5c>
     c2c:	nop
     c30:	ldp	x29, x30, [sp], #16
     c34:	ret

0000000000000c38 <frame_dummy>:
     c38:	stp	x29, x30, [sp, #-16]!
     c3c:	mov	x29, sp
     c40:	bl	b44 <register_tm_clones>
     c44:	nop
     c48:	ldp	x29, x30, [sp], #16
     c4c:	ret

0000000000000c50 <pathchk_builtin>:
     c50:	stp	x29, x30, [sp, #-48]!
     c54:	mov	x29, sp
     c58:	str	x0, [sp, #24]
     c5c:	bl	a70 <reset_internal_getopt@plt>
     c60:	b	ca0 <pathchk_builtin+0x50>
     c64:	ldr	w0, [sp, #36]
     c68:	cmn	w0, #0x63
     c6c:	b.eq	c88 <pathchk_builtin+0x38>  // b.none
     c70:	ldr	w0, [sp, #36]
     c74:	cmp	w0, #0x70
     c78:	b.ne	c94 <pathchk_builtin+0x44>  // b.any
     c7c:	mov	w0, #0x1                   	// #1
     c80:	str	w0, [sp, #40]
     c84:	b	ca0 <pathchk_builtin+0x50>
     c88:	bl	9f0 <builtin_help@plt>
     c8c:	mov	w0, #0x102                 	// #258
     c90:	b	d3c <pathchk_builtin+0xec>
     c94:	bl	a10 <builtin_usage@plt>
     c98:	mov	w0, #0x102                 	// #258
     c9c:	b	d3c <pathchk_builtin+0xec>
     ca0:	adrp	x0, 1000 <validate_path+0x100>
     ca4:	add	x1, x0, #0x190
     ca8:	ldr	x0, [sp, #24]
     cac:	bl	a60 <internal_getopt@plt>
     cb0:	str	w0, [sp, #36]
     cb4:	ldr	w0, [sp, #36]
     cb8:	cmn	w0, #0x1
     cbc:	b.ne	c64 <pathchk_builtin+0x14>  // b.any
     cc0:	adrp	x0, 11000 <__FRAME_END__+0xf944>
     cc4:	ldr	x0, [x0, #4056]
     cc8:	ldr	x0, [x0]
     ccc:	str	x0, [sp, #24]
     cd0:	ldr	x0, [sp, #24]
     cd4:	cmp	x0, #0x0
     cd8:	b.ne	ce8 <pathchk_builtin+0x98>  // b.any
     cdc:	bl	a10 <builtin_usage@plt>
     ce0:	mov	w0, #0x102                 	// #258
     ce4:	b	d3c <pathchk_builtin+0xec>
     ce8:	str	wzr, [sp, #44]
     cec:	b	d20 <pathchk_builtin+0xd0>
     cf0:	ldr	x0, [sp, #24]
     cf4:	ldr	x0, [x0, #8]
     cf8:	ldr	x0, [x0]
     cfc:	ldr	w1, [sp, #40]
     d00:	bl	f00 <validate_path>
     d04:	mov	w1, w0
     d08:	ldr	w0, [sp, #44]
     d0c:	orr	w0, w0, w1
     d10:	str	w0, [sp, #44]
     d14:	ldr	x0, [sp, #24]
     d18:	ldr	x0, [x0]
     d1c:	str	x0, [sp, #24]
     d20:	ldr	x0, [sp, #24]
     d24:	cmp	x0, #0x0
     d28:	b.ne	cf0 <pathchk_builtin+0xa0>  // b.any
     d2c:	ldr	w0, [sp, #44]
     d30:	cmp	w0, #0x0
     d34:	cset	w0, ne  // ne = any
     d38:	and	w0, w0, #0xff
     d3c:	ldp	x29, x30, [sp], #48
     d40:	ret

0000000000000d44 <portable_chars_only>:
     d44:	stp	x29, x30, [sp, #-48]!
     d48:	mov	x29, sp
     d4c:	str	x0, [sp, #24]
     d50:	ldr	x0, [sp, #24]
     d54:	str	x0, [sp, #40]
     d58:	b	db0 <portable_chars_only+0x6c>
     d5c:	ldr	x0, [sp, #40]
     d60:	ldrb	w0, [x0]
     d64:	mov	w2, w0
     d68:	adrp	x0, 1000 <validate_path+0x100>
     d6c:	add	x1, x0, #0x300
     d70:	sxtw	x0, w2
     d74:	ldrb	w0, [x1, x0]
     d78:	cmp	w0, #0x0
     d7c:	b.ne	da4 <portable_chars_only+0x60>  // b.any
     d80:	ldr	x0, [sp, #40]
     d84:	ldrb	w0, [x0]
     d88:	mov	w2, w0
     d8c:	ldr	x1, [sp, #24]
     d90:	adrp	x0, 1000 <validate_path+0x100>
     d94:	add	x0, x0, #0x400
     d98:	bl	9d0 <builtin_error@plt>
     d9c:	mov	w0, #0x0                   	// #0
     da0:	b	dc4 <portable_chars_only+0x80>
     da4:	ldr	x0, [sp, #40]
     da8:	add	x0, x0, #0x1
     dac:	str	x0, [sp, #40]
     db0:	ldr	x0, [sp, #40]
     db4:	ldrb	w0, [x0]
     db8:	cmp	w0, #0x0
     dbc:	b.ne	d5c <portable_chars_only+0x18>  // b.any
     dc0:	mov	w0, #0x1                   	// #1
     dc4:	ldp	x29, x30, [sp], #48
     dc8:	ret

0000000000000dcc <safe_stat>:
     dcc:	stp	x29, x30, [sp, #-48]!
     dd0:	mov	x29, sp
     dd4:	str	x0, [sp, #24]
     dd8:	str	x1, [sp, #16]
     ddc:	ldr	x1, [sp, #16]
     de0:	ldr	x0, [sp, #24]
     de4:	bl	1170 <__stat>
     de8:	str	w0, [sp, #44]
     dec:	ldr	w0, [sp, #44]
     df0:	cmp	w0, #0x0
     df4:	b.ge	e08 <safe_stat+0x3c>  // b.tcont
     df8:	bl	aa0 <__errno_location@plt>
     dfc:	ldr	w0, [x0]
     e00:	cmp	w0, #0x4
     e04:	b.eq	ddc <safe_stat+0x10>  // b.none
     e08:	ldr	w0, [sp, #44]
     e0c:	ldp	x29, x30, [sp], #48
     e10:	ret

0000000000000e14 <dir_ok>:
     e14:	stp	x29, x30, [sp, #-160]!
     e18:	mov	x29, sp
     e1c:	str	x0, [sp, #24]
     e20:	add	x0, sp, #0x20
     e24:	mov	x1, x0
     e28:	ldr	x0, [sp, #24]
     e2c:	bl	dcc <safe_stat>
     e30:	cmp	w0, #0x0
     e34:	b.eq	e40 <dir_ok+0x2c>  // b.none
     e38:	mov	w0, #0x2                   	// #2
     e3c:	b	ecc <dir_ok+0xb8>
     e40:	ldr	w0, [sp, #48]
     e44:	and	w0, w0, #0xf000
     e48:	cmp	w0, #0x4, lsl #12
     e4c:	b.eq	e68 <dir_ok+0x54>  // b.none
     e50:	ldr	x1, [sp, #24]
     e54:	adrp	x0, 1000 <validate_path+0x100>
     e58:	add	x0, x0, #0x430
     e5c:	bl	9d0 <builtin_error@plt>
     e60:	mov	w0, #0x0                   	// #0
     e64:	b	ecc <dir_ok+0xb8>
     e68:	mov	w1, #0x1                   	// #1
     e6c:	ldr	x0, [sp, #24]
     e70:	bl	a40 <access@plt>
     e74:	cmp	w0, #0x0
     e78:	b.eq	ec8 <dir_ok+0xb4>  // b.none
     e7c:	bl	aa0 <__errno_location@plt>
     e80:	ldr	w0, [x0]
     e84:	cmp	w0, #0xd
     e88:	b.ne	ea0 <dir_ok+0x8c>  // b.any
     e8c:	ldr	x1, [sp, #24]
     e90:	adrp	x0, 1000 <validate_path+0x100>
     e94:	add	x0, x0, #0x448
     e98:	bl	9d0 <builtin_error@plt>
     e9c:	b	ec0 <dir_ok+0xac>
     ea0:	bl	aa0 <__errno_location@plt>
     ea4:	ldr	w0, [x0]
     ea8:	bl	a20 <strerror@plt>
     eac:	mov	x2, x0
     eb0:	ldr	x1, [sp, #24]
     eb4:	adrp	x0, 1000 <validate_path+0x100>
     eb8:	add	x0, x0, #0x470
     ebc:	bl	9d0 <builtin_error@plt>
     ec0:	mov	w0, #0x0                   	// #0
     ec4:	b	ecc <dir_ok+0xb8>
     ec8:	mov	w0, #0x1                   	// #1
     ecc:	ldp	x29, x30, [sp], #160
     ed0:	ret

0000000000000ed4 <xstrdup>:
     ed4:	stp	x29, x30, [sp, #-32]!
     ed8:	mov	x29, sp
     edc:	str	x0, [sp, #24]
     ee0:	ldr	x0, [sp, #24]
     ee4:	bl	9c0 <strlen@plt>
     ee8:	add	x0, x0, #0x1
     eec:	bl	a00 <xmalloc@plt>
     ef0:	ldr	x1, [sp, #24]
     ef4:	bl	a90 <strcpy@plt>
     ef8:	ldp	x29, x30, [sp], #32
     efc:	ret

0000000000000f00 <validate_path>:
     f00:	stp	x29, x30, [sp, #-96]!
     f04:	mov	x29, sp
     f08:	str	x0, [sp, #24]
     f0c:	str	w1, [sp, #20]
     f10:	ldr	w0, [sp, #20]
     f14:	cmp	w0, #0x0
     f18:	b.eq	f34 <validate_path+0x34>  // b.none
     f1c:	ldr	x0, [sp, #24]
     f20:	bl	d44 <portable_chars_only>
     f24:	cmp	w0, #0x0
     f28:	b.ne	f34 <validate_path+0x34>  // b.any
     f2c:	mov	w0, #0x1                   	// #1
     f30:	b	1164 <validate_path+0x264>
     f34:	ldr	x0, [sp, #24]
     f38:	ldrb	w0, [x0]
     f3c:	cmp	w0, #0x0
     f40:	b.ne	f4c <validate_path+0x4c>  // b.any
     f44:	mov	w0, #0x0                   	// #0
     f48:	b	1164 <validate_path+0x264>
     f4c:	ldr	x0, [sp, #24]
     f50:	ldrb	w0, [x0]
     f54:	cmp	w0, #0x2f
     f58:	b.ne	f68 <validate_path+0x68>  // b.any
     f5c:	adrp	x0, 1000 <validate_path+0x100>
     f60:	add	x0, x0, #0x478
     f64:	b	f70 <validate_path+0x70>
     f68:	adrp	x0, 1000 <validate_path+0x100>
     f6c:	add	x0, x0, #0x480
     f70:	bl	ed4 <xstrdup>
     f74:	str	x0, [sp, #64]
     f78:	ldr	x0, [sp, #24]
     f7c:	str	x0, [sp, #72]
     f80:	str	wzr, [sp, #88]
     f84:	b	f94 <validate_path+0x94>
     f88:	ldr	x0, [sp, #72]
     f8c:	add	x0, x0, #0x1
     f90:	str	x0, [sp, #72]
     f94:	ldr	x0, [sp, #72]
     f98:	ldrb	w0, [x0]
     f9c:	cmp	w0, #0x2f
     fa0:	b.eq	f88 <validate_path+0x88>  // b.none
     fa4:	ldr	x0, [sp, #72]
     fa8:	str	x0, [sp, #48]
     fac:	mov	w1, #0x2f                  	// #47
     fb0:	ldr	x0, [sp, #72]
     fb4:	bl	a80 <strchr@plt>
     fb8:	str	x0, [sp, #72]
     fbc:	ldr	x0, [sp, #72]
     fc0:	cmp	x0, #0x0
     fc4:	b.eq	fd4 <validate_path+0xd4>  // b.none
     fc8:	ldr	x0, [sp, #72]
     fcc:	strb	wzr, [x0]
     fd0:	b	ff4 <validate_path+0xf4>
     fd4:	mov	w0, #0x1                   	// #1
     fd8:	str	w0, [sp, #88]
     fdc:	ldr	x0, [sp, #48]
     fe0:	bl	9c0 <strlen@plt>
     fe4:	mov	x1, x0
     fe8:	ldr	x0, [sp, #48]
     fec:	add	x0, x0, x1
     ff0:	str	x0, [sp, #72]
     ff4:	ldr	w0, [sp, #88]
     ff8:	cmp	w0, #0x0
     ffc:	b.ne	1028 <validate_path+0x128>  // b.any
    1000:	ldr	x0, [sp, #24]
    1004:	bl	e14 <dir_ok>
    1008:	str	w0, [sp, #84]
    100c:	ldr	w0, [sp, #84]
    1010:	cmp	w0, #0x0
    1014:	b.ne	1028 <validate_path+0x128>  // b.any
    1018:	ldr	x0, [sp, #64]
    101c:	bl	a50 <free@plt>
    1020:	mov	w0, #0x1                   	// #1
    1024:	b	1164 <validate_path+0x264>
    1028:	ldr	x1, [sp, #72]
    102c:	ldr	x0, [sp, #48]
    1030:	sub	x0, x1, x0
    1034:	str	w0, [sp, #44]
    1038:	ldr	w0, [sp, #20]
    103c:	cmp	w0, #0x0
    1040:	b.eq	104c <validate_path+0x14c>  // b.none
    1044:	mov	w0, #0xe                   	// #14
    1048:	b	1050 <validate_path+0x150>
    104c:	mov	w0, #0xff                  	// #255
    1050:	str	w0, [sp, #60]
    1054:	ldr	w0, [sp, #60]
    1058:	cmp	w0, #0x0
    105c:	b.ge	1068 <validate_path+0x168>  // b.tcont
    1060:	mov	w0, #0xe                   	// #14
    1064:	str	w0, [sp, #60]
    1068:	ldr	w1, [sp, #44]
    106c:	ldr	w0, [sp, #60]
    1070:	cmp	w1, w0
    1074:	b.le	10a0 <validate_path+0x1a0>
    1078:	ldr	w3, [sp, #60]
    107c:	ldr	w2, [sp, #44]
    1080:	ldr	x1, [sp, #48]
    1084:	adrp	x0, 1000 <validate_path+0x100>
    1088:	add	x0, x0, #0x488
    108c:	bl	9d0 <builtin_error@plt>
    1090:	ldr	x0, [sp, #64]
    1094:	bl	a50 <free@plt>
    1098:	mov	w0, #0x1                   	// #1
    109c:	b	1164 <validate_path+0x264>
    10a0:	ldr	w0, [sp, #88]
    10a4:	cmp	w0, #0x0
    10a8:	b.ne	10e4 <validate_path+0x1e4>  // b.any
    10ac:	ldr	w0, [sp, #84]
    10b0:	cmp	w0, #0x1
    10b4:	b.ne	10cc <validate_path+0x1cc>  // b.any
    10b8:	ldr	x0, [sp, #64]
    10bc:	bl	a50 <free@plt>
    10c0:	ldr	x0, [sp, #24]
    10c4:	bl	ed4 <xstrdup>
    10c8:	str	x0, [sp, #64]
    10cc:	ldr	x0, [sp, #72]
    10d0:	add	x1, x0, #0x1
    10d4:	str	x1, [sp, #72]
    10d8:	mov	w1, #0x2f                  	// #47
    10dc:	strb	w1, [x0]
    10e0:	b	f84 <validate_path+0x84>
    10e4:	nop
    10e8:	ldr	w0, [sp, #20]
    10ec:	cmp	w0, #0x0
    10f0:	b.eq	10fc <validate_path+0x1fc>  // b.none
    10f4:	mov	w0, #0x100                 	// #256
    10f8:	b	1100 <validate_path+0x200>
    10fc:	mov	w0, #0x1000                	// #4096
    1100:	str	w0, [sp, #92]
    1104:	ldr	w0, [sp, #92]
    1108:	cmp	w0, #0x0
    110c:	b.ge	1118 <validate_path+0x218>  // b.tcont
    1110:	mov	w0, #0x100                 	// #256
    1114:	str	w0, [sp, #92]
    1118:	ldr	x0, [sp, #64]
    111c:	bl	a50 <free@plt>
    1120:	ldr	x0, [sp, #24]
    1124:	bl	9c0 <strlen@plt>
    1128:	mov	x1, x0
    112c:	ldrsw	x0, [sp, #92]
    1130:	cmp	x1, x0
    1134:	b.ls	1160 <validate_path+0x260>  // b.plast
    1138:	ldr	x0, [sp, #24]
    113c:	bl	9c0 <strlen@plt>
    1140:	ldr	w3, [sp, #92]
    1144:	mov	x2, x0
    1148:	ldr	x1, [sp, #24]
    114c:	adrp	x0, 1000 <validate_path+0x100>
    1150:	add	x0, x0, #0x4b8
    1154:	bl	9d0 <builtin_error@plt>
    1158:	mov	w0, #0x1                   	// #1
    115c:	b	1164 <validate_path+0x264>
    1160:	mov	w0, #0x0                   	// #0
    1164:	ldp	x29, x30, [sp], #96
    1168:	ret
    116c:	nop

0000000000001170 <__stat>:
    1170:	mov	x2, x1
    1174:	mov	x1, x0
    1178:	mov	w0, #0x0                   	// #0
    117c:	b	ab0 <__xstat@plt>

Disassembly of section .fini:

0000000000001180 <_fini>:
    1180:	stp	x29, x30, [sp, #-16]!
    1184:	mov	x29, sp
    1188:	ldp	x29, x30, [sp], #16
    118c:	ret
