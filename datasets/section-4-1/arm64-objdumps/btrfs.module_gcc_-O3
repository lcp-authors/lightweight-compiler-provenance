
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//btrfs.module_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_zstd_free>:
       0:	mov	x0, x1
       4:	b	0 <grub_free>

0000000000000008 <grub_zstd_malloc>:
       8:	mov	x0, x1
       c:	b	0 <grub_malloc>

0000000000000010 <read_sblock>:
      10:	sub	sp, sp, #0xb80
      14:	adrp	x2, 0 <grub_zstd_free>
      18:	stp	x29, x30, [sp]
      1c:	mov	x29, sp
      20:	stp	x21, x22, [sp, #32]
      24:	mov	x22, x1
      28:	ldr	x21, [x2]
      2c:	stp	x23, x24, [sp, #48]
      30:	mov	x23, x0
      34:	str	x25, [sp, #64]
      38:	add	x25, sp, #0x90
      3c:	adrp	x24, 0 <grub_zstd_free>
      40:	stp	x19, x20, [sp, #16]
      44:	mov	w20, #0x0                   	// #0
      48:	ldr	x1, [x21]
      4c:	mov	x2, #0x0                   	// #0
      50:	add	x4, sp, #0x50
      54:	mov	x0, x23
      58:	mov	x3, #0xb2b                 	// #2859
      5c:	bl	0 <grub_disk_read>
      60:	mov	w19, w0
      64:	cmp	w0, #0xb
      68:	mov	x2, #0x8                   	// #8
      6c:	b.eq	120 <read_sblock+0x110>  // b.none
      70:	ldr	x1, [x24]
      74:	mov	x0, x25
      78:	bl	0 <grub_memcmp>
      7c:	cbnz	w0, e4 <read_sblock+0xd4>
      80:	cbz	w20, 94 <read_sblock+0x84>
      84:	ldr	x0, [x22, #72]
      88:	ldr	x1, [sp, #152]
      8c:	cmp	x1, x0
      90:	b.ls	a4 <read_sblock+0x94>  // b.plast
      94:	add	x1, sp, #0x50
      98:	mov	x0, x22
      9c:	mov	x2, #0xb2b                 	// #2859
      a0:	bl	0 <grub_memmove>
      a4:	add	w20, w20, #0x1
      a8:	cmp	w20, #0x4
      ac:	b.eq	c4 <read_sblock+0xb4>  // b.none
      b0:	add	x0, sp, #0x200
      b4:	ldur	x1, [x0, #-223]
      b8:	ldr	x0, [x21, #8]!
      bc:	cmp	x0, x1, lsr #9
      c0:	b.cc	48 <read_sblock+0x38>  // b.lo, b.ul, b.last
      c4:	mov	w0, w19
      c8:	ldp	x29, x30, [sp]
      cc:	ldp	x19, x20, [sp, #16]
      d0:	ldp	x21, x22, [sp, #32]
      d4:	ldp	x23, x24, [sp, #48]
      d8:	ldr	x25, [sp, #64]
      dc:	add	sp, sp, #0xb80
      e0:	ret
      e4:	orr	w20, w19, w20
      e8:	cbnz	w20, c4 <read_sblock+0xb4>
      ec:	adrp	x1, 0 <grub_zstd_free>
      f0:	mov	w0, #0x9                   	// #9
      f4:	ldr	x1, [x1]
      f8:	bl	0 <grub_error>
      fc:	mov	w19, w0
     100:	mov	w0, w19
     104:	ldp	x29, x30, [sp]
     108:	ldp	x19, x20, [sp, #16]
     10c:	ldp	x21, x22, [sp, #32]
     110:	ldp	x23, x24, [sp, #48]
     114:	ldr	x25, [sp, #64]
     118:	add	sp, sp, #0xb80
     11c:	ret
     120:	cbz	w20, ec <read_sblock+0xdc>
     124:	adrp	x0, 0 <grub_zstd_free>
     128:	mov	w19, #0x0                   	// #0
     12c:	ldp	x29, x30, [sp]
     130:	ldr	x0, [x0]
     134:	ldp	x21, x22, [sp, #32]
     138:	str	wzr, [x0]
     13c:	mov	w0, w19
     140:	ldp	x19, x20, [sp, #16]
     144:	ldp	x23, x24, [sp, #48]
     148:	ldr	x25, [sp, #64]
     14c:	add	sp, sp, #0xb80
     150:	ret
     154:	nop
	...

0000000000000178 <raid6_recover_read_buffer>:
     178:	sbfiz	x1, x1, #4, #32
     17c:	mov	x5, x0
     180:	add	x6, x0, x1
     184:	mov	x0, x3
     188:	ldr	w3, [x6, #8]
     18c:	cbz	w3, 1bc <raid6_recover_read_buffer+0x44>
     190:	stp	x29, x30, [sp, #-16]!
     194:	mov	x2, x4
     198:	mov	x29, sp
     19c:	ldr	x1, [x5, x1]
     1a0:	bl	0 <grub_memmove>
     1a4:	adrp	x1, 0 <grub_zstd_free>
     1a8:	mov	w0, #0x0                   	// #0
     1ac:	ldr	x1, [x1]
     1b0:	str	wzr, [x1]
     1b4:	ldp	x29, x30, [sp], #16
     1b8:	ret
     1bc:	adrp	x2, 0 <grub_zstd_free>
     1c0:	mov	w1, #0xe                   	// #14
     1c4:	mov	w0, w1
     1c8:	ldr	x2, [x2]
     1cc:	str	w1, [x2]
     1d0:	ret
     1d4:	nop
	...

00000000000001e0 <grub_btrfs_lzo_decompress>:
     1e0:	stp	x29, x30, [sp, #-112]!
     1e4:	mov	x29, sp
     1e8:	stp	x19, x20, [sp, #16]
     1ec:	mov	x19, x0
     1f0:	stp	x25, x26, [sp, #64]
     1f4:	mov	x26, x0
     1f8:	ldr	w0, [x19], #4
     1fc:	cmp	x0, x1
     200:	b.hi	3dc <grub_btrfs_lzo_decompress+0x1fc>  // b.pmore
     204:	stp	x21, x22, [sp, #32]
     208:	mov	x20, x2
     20c:	mov	x21, x3
     210:	mov	x25, x4
     214:	cmp	x2, #0xfff
     218:	b.ls	27c <grub_btrfs_lzo_decompress+0x9c>  // b.plast
     21c:	mov	w3, #0x1143                	// #4419
     220:	b	230 <grub_btrfs_lzo_decompress+0x50>
     224:	add	x19, x19, x0
     228:	cmp	x20, #0xfff
     22c:	b.ls	27c <grub_btrfs_lzo_decompress+0x9c>  // b.plast
     230:	sub	x2, x19, x26
     234:	sub	x20, x20, #0x1, lsl #12
     238:	add	x1, x2, #0x3
     23c:	and	x2, x2, #0xffc
     240:	and	x1, x1, #0xfffffffffffffffc
     244:	cmp	x2, #0xffc
     248:	add	x1, x26, x1
     24c:	csel	x19, x1, x19, eq  // eq = none
     250:	ldr	w1, [x19]
     254:	mov	w0, w1
     258:	cmp	w1, w3
     25c:	add	x0, x0, #0x4
     260:	b.ls	224 <grub_btrfs_lzo_decompress+0x44>  // b.plast
     264:	ldp	x21, x22, [sp, #32]
     268:	mov	x0, #0xffffffffffffffff    	// #-1
     26c:	ldp	x19, x20, [sp, #16]
     270:	ldp	x25, x26, [sp, #64]
     274:	ldp	x29, x30, [sp], #112
     278:	ret
     27c:	cbz	x25, 3d0 <grub_btrfs_lzo_decompress+0x1f0>
     280:	mov	x22, #0x0                   	// #0
     284:	stp	x23, x24, [sp, #48]
     288:	mov	x23, #0x1000                	// #4096
     28c:	stp	x27, x28, [sp, #80]
     290:	b	304 <grub_btrfs_lzo_decompress+0x124>
     294:	bl	0 <grub_malloc>
     298:	mov	x27, x0
     29c:	cbz	x0, 3b0 <grub_btrfs_lzo_decompress+0x1d0>
     2a0:	mov	x2, x0
     2a4:	mov	x1, x28
     2a8:	add	x3, sp, #0x68
     2ac:	mov	x0, x19
     2b0:	mov	x4, #0x0                   	// #0
     2b4:	bl	0 <lzo1x_decompress_safe>
     2b8:	add	x1, x27, x20
     2bc:	mov	w2, w0
     2c0:	mov	x0, x21
     2c4:	cbnz	w2, 3a8 <grub_btrfs_lzo_decompress+0x1c8>
     2c8:	ldr	x20, [sp, #104]
     2cc:	add	x19, x19, x28
     2d0:	cmp	x20, x25
     2d4:	csel	x20, x20, x25, ls  // ls = plast
     2d8:	cmp	x20, x24
     2dc:	csel	x20, x20, x24, ls  // ls = plast
     2e0:	mov	x2, x20
     2e4:	sub	x25, x25, x20
     2e8:	bl	0 <grub_memmove>
     2ec:	add	x22, x22, x20
     2f0:	add	x21, x21, x20
     2f4:	mov	x0, x27
     2f8:	mov	x20, #0x0                   	// #0
     2fc:	bl	0 <grub_free>
     300:	cbz	x25, 388 <grub_btrfs_lzo_decompress+0x1a8>
     304:	sub	x0, x19, x26
     308:	str	x23, [sp, #104]
     30c:	add	x1, x0, #0x3
     310:	and	x0, x0, #0xffc
     314:	and	x1, x1, #0xfffffffffffffffc
     318:	cmp	x0, #0xffc
     31c:	add	x1, x26, x1
     320:	mov	w5, #0x1143                	// #4419
     324:	csel	x19, x1, x19, eq  // eq = none
     328:	sub	x24, x23, x20
     32c:	mov	x2, x21
     330:	add	x3, sp, #0x68
     334:	mov	x0, #0x1000                	// #4096
     338:	mov	x4, #0x0                   	// #0
     33c:	ldr	w1, [x19], #4
     340:	mov	w27, w1
     344:	cmp	w1, w5
     348:	mov	x28, x27
     34c:	b.hi	3b0 <grub_btrfs_lzo_decompress+0x1d0>  // b.pmore
     350:	cmp	x25, #0xfff
     354:	mov	x1, x27
     358:	ccmp	x20, #0x0, #0x0, hi  // hi = pmore
     35c:	b.ne	294 <grub_btrfs_lzo_decompress+0xb4>  // b.any
     360:	mov	x0, x19
     364:	bl	0 <lzo1x_decompress_safe>
     368:	cbnz	w0, 3b0 <grub_btrfs_lzo_decompress+0x1d0>
     36c:	ldr	x0, [sp, #104]
     370:	add	x19, x19, x27
     374:	mov	x20, #0x0                   	// #0
     378:	sub	x25, x25, x0
     37c:	add	x22, x22, x0
     380:	add	x21, x21, x0
     384:	cbnz	x25, 304 <grub_btrfs_lzo_decompress+0x124>
     388:	mov	x0, x22
     38c:	ldp	x19, x20, [sp, #16]
     390:	ldp	x21, x22, [sp, #32]
     394:	ldp	x23, x24, [sp, #48]
     398:	ldp	x25, x26, [sp, #64]
     39c:	ldp	x27, x28, [sp, #80]
     3a0:	ldp	x29, x30, [sp], #112
     3a4:	ret
     3a8:	mov	x0, x27
     3ac:	bl	0 <grub_free>
     3b0:	mov	x0, #0xffffffffffffffff    	// #-1
     3b4:	ldp	x19, x20, [sp, #16]
     3b8:	ldp	x21, x22, [sp, #32]
     3bc:	ldp	x23, x24, [sp, #48]
     3c0:	ldp	x25, x26, [sp, #64]
     3c4:	ldp	x27, x28, [sp, #80]
     3c8:	ldp	x29, x30, [sp], #112
     3cc:	ret
     3d0:	mov	x0, #0x0                   	// #0
     3d4:	ldp	x21, x22, [sp, #32]
     3d8:	b	26c <grub_btrfs_lzo_decompress+0x8c>
     3dc:	mov	x0, #0xffffffffffffffff    	// #-1
     3e0:	b	26c <grub_btrfs_lzo_decompress+0x8c>
     3e4:	nop

00000000000003e8 <grub_btrfs_zstd_decompress>:
     3e8:	stp	x29, x30, [sp, #-160]!
     3ec:	mov	x29, sp
     3f0:	stp	x19, x20, [sp, #16]
     3f4:	mov	x19, x4
     3f8:	stp	x21, x22, [sp, #32]
     3fc:	mov	x21, x0
     400:	mov	x22, x3
     404:	stp	x23, x24, [sp, #48]
     408:	mov	x0, #0x1ffff               	// #131071
     40c:	mov	x24, x1
     410:	stp	x25, x26, [sp, #64]
     414:	cmp	x4, x0
     418:	mov	x25, x2
     41c:	str	x27, [sp, #80]
     420:	b.hi	440 <grub_btrfs_zstd_decompress+0x58>  // b.pmore
     424:	mov	x0, #0x20000               	// #131072
     428:	bl	0 <grub_malloc>
     42c:	mov	x23, x0
     430:	cbz	x0, 4f8 <grub_btrfs_zstd_decompress+0x110>
     434:	mov	x26, x0
     438:	mov	x27, #0x20000               	// #131072
     43c:	b	44c <grub_btrfs_zstd_decompress+0x64>
     440:	mov	x27, x4
     444:	mov	x26, x3
     448:	mov	x23, #0x0                   	// #0
     44c:	adrp	x2, 0 <grub_zstd_free>
     450:	adrp	x1, 0 <grub_zstd_free>
     454:	add	x0, sp, #0x60
     458:	str	xzr, [sp, #112]
     45c:	ldr	x2, [x2]
     460:	ldr	x1, [x1]
     464:	stp	x2, x1, [sp, #136]
     468:	ldp	x2, x3, [sp, #136]
     46c:	stp	x2, x3, [sp, #96]
     470:	bl	0 <ZSTD_createDCtx_advanced>
     474:	mov	x20, x0
     478:	cbz	x0, 52c <grub_btrfs_zstd_decompress+0x144>
     47c:	mov	x1, x24
     480:	mov	x0, x21
     484:	bl	0 <ZSTD_findFrameCompressedSize>
     488:	mov	x24, x0
     48c:	bl	0 <ZSTD_isError>
     490:	cbnz	w0, 514 <grub_btrfs_zstd_decompress+0x12c>
     494:	mov	x4, x24
     498:	mov	x3, x21
     49c:	mov	x2, x27
     4a0:	mov	x1, x26
     4a4:	mov	x0, x20
     4a8:	bl	0 <ZSTD_decompressDCtx>
     4ac:	bl	0 <ZSTD_isError>
     4b0:	cbnz	w0, 514 <grub_btrfs_zstd_decompress+0x12c>
     4b4:	mov	x21, x19
     4b8:	add	x1, x26, x25
     4bc:	mov	x0, x22
     4c0:	mov	x2, x19
     4c4:	bl	0 <grub_memmove>
     4c8:	mov	x0, x23
     4cc:	bl	0 <grub_free>
     4d0:	mov	x0, x20
     4d4:	bl	0 <ZSTD_freeDCtx>
     4d8:	mov	x0, x21
     4dc:	ldp	x19, x20, [sp, #16]
     4e0:	ldp	x21, x22, [sp, #32]
     4e4:	ldp	x23, x24, [sp, #48]
     4e8:	ldp	x25, x26, [sp, #64]
     4ec:	ldr	x27, [sp, #80]
     4f0:	ldp	x29, x30, [sp], #160
     4f4:	ret
     4f8:	adrp	x1, 0 <grub_zstd_free>
     4fc:	mov	x20, #0x0                   	// #0
     500:	mov	x21, #0xffffffffffffffff    	// #-1
     504:	mov	w0, #0x3                   	// #3
     508:	ldr	x1, [x1]
     50c:	bl	0 <grub_error>
     510:	b	4c8 <grub_btrfs_zstd_decompress+0xe0>
     514:	adrp	x1, 0 <grub_zstd_free>
     518:	mov	x21, #0xffffffffffffffff    	// #-1
     51c:	mov	w0, #0x1a                  	// #26
     520:	ldr	x1, [x1]
     524:	bl	0 <grub_error>
     528:	b	4c8 <grub_btrfs_zstd_decompress+0xe0>
     52c:	adrp	x1, 0 <grub_zstd_free>
     530:	mov	x21, #0xffffffffffffffff    	// #-1
     534:	mov	w0, #0x3                   	// #3
     538:	ldr	x1, [x1]
     53c:	bl	0 <grub_error>
     540:	b	4c8 <grub_btrfs_zstd_decompress+0xe0>
     544:	nop
	...

0000000000000570 <find_device>:
     570:	stp	x29, x30, [sp, #-80]!
     574:	mov	x29, sp
     578:	ldr	w4, [x0, #2888]
     57c:	stp	x19, x20, [sp, #16]
     580:	mov	x20, x0
     584:	mov	x19, x1
     588:	stp	x21, x22, [sp, #32]
     58c:	stp	x0, x1, [sp, #56]
     590:	str	xzr, [sp, #72]
     594:	cbz	w4, 5dc <find_device+0x6c>
     598:	ldr	x2, [x0, #2880]
     59c:	sub	w4, w4, #0x1
     5a0:	add	x0, x2, #0x10
     5a4:	add	x4, x0, w4, uxtw #4
     5a8:	b	5b8 <find_device+0x48>
     5ac:	add	x2, x2, #0x10
     5b0:	cmp	x2, x4
     5b4:	b.eq	5dc <find_device+0x6c>  // b.none
     5b8:	ldr	x3, [x2, #8]
     5bc:	cmp	x3, x19
     5c0:	b.ne	5ac <find_device+0x3c>  // b.any
     5c4:	ldr	x21, [x2]
     5c8:	mov	x0, x21
     5cc:	ldp	x19, x20, [sp, #16]
     5d0:	ldp	x21, x22, [sp, #32]
     5d4:	ldp	x29, x30, [sp], #80
     5d8:	ret
     5dc:	adrp	x0, 0 <grub_zstd_free>
     5e0:	add	x1, sp, #0x38
     5e4:	ldr	x0, [x0]
     5e8:	bl	0 <grub_device_iterate>
     5ec:	ldr	w1, [x20, #2888]
     5f0:	ldr	w2, [x20, #2892]
     5f4:	add	w0, w1, #0x1
     5f8:	str	w0, [x20, #2888]
     5fc:	cmp	w0, w2
     600:	b.hi	62c <find_device+0xbc>  // b.pmore
     604:	ldr	x21, [x20, #2880]
     608:	ubfiz	x1, x1, #4, #32
     60c:	add	x1, x21, x1
     610:	ldr	x21, [sp, #72]
     614:	stp	x21, x19, [x1]
     618:	mov	x0, x21
     61c:	ldp	x19, x20, [sp, #16]
     620:	ldp	x21, x22, [sp, #32]
     624:	ldp	x29, x30, [sp], #80
     628:	ret
     62c:	lsl	w0, w0, #1
     630:	ldr	x22, [x20, #2880]
     634:	add	w1, w0, #0x1
     638:	str	w1, [x20, #2892]
     63c:	mov	x0, x22
     640:	ubfiz	x1, x1, #4, #32
     644:	bl	0 <grub_realloc>
     648:	str	x0, [x20, #2880]
     64c:	mov	x21, x0
     650:	cbz	x0, 660 <find_device+0xf0>
     654:	ldr	w1, [x20, #2888]
     658:	sub	w1, w1, #0x1
     65c:	b	608 <find_device+0x98>
     660:	ldr	x0, [sp, #72]
     664:	cbz	x0, 66c <find_device+0xfc>
     668:	bl	0 <grub_device_close>
     66c:	str	x22, [x20, #2880]
     670:	b	5c8 <find_device+0x58>
     674:	nop
	...

0000000000000680 <find_device_iter>:
     680:	sub	sp, sp, #0xb50
     684:	stp	x29, x30, [sp]
     688:	mov	x29, sp
     68c:	stp	x19, x20, [sp, #16]
     690:	mov	x20, x1
     694:	bl	0 <grub_device_open>
     698:	cbz	x0, 73c <find_device_iter+0xbc>
     69c:	ldr	x2, [x0]
     6a0:	mov	x19, x0
     6a4:	cbz	x2, 6ec <find_device_iter+0x6c>
     6a8:	mov	x0, x2
     6ac:	add	x1, sp, #0x20
     6b0:	bl	10 <read_sblock>
     6b4:	cmp	w0, #0x9
     6b8:	b.eq	750 <find_device_iter+0xd0>  // b.none
     6bc:	cbnz	w0, 704 <find_device_iter+0x84>
     6c0:	ldr	x0, [x20]
     6c4:	add	x1, sp, #0x40
     6c8:	mov	x2, #0x10                  	// #16
     6cc:	add	x0, x0, #0x20
     6d0:	bl	0 <grub_memcmp>
     6d4:	cbnz	w0, 6e8 <find_device_iter+0x68>
     6d8:	ldr	x0, [x20, #8]
     6dc:	ldur	x1, [sp, #233]
     6e0:	cmp	x1, x0
     6e4:	b.eq	724 <find_device_iter+0xa4>  // b.none
     6e8:	mov	x0, x19
     6ec:	bl	0 <grub_device_close>
     6f0:	mov	w0, #0x0                   	// #0
     6f4:	ldp	x29, x30, [sp]
     6f8:	ldp	x19, x20, [sp, #16]
     6fc:	add	sp, sp, #0xb50
     700:	ret
     704:	mov	x0, x19
     708:	bl	0 <grub_device_close>
     70c:	bl	0 <grub_print_error>
     710:	mov	w0, #0x0                   	// #0
     714:	ldp	x29, x30, [sp]
     718:	ldp	x19, x20, [sp, #16]
     71c:	add	sp, sp, #0xb50
     720:	ret
     724:	str	x19, [x20, #16]
     728:	mov	w0, #0x1                   	// #1
     72c:	ldp	x29, x30, [sp]
     730:	ldp	x19, x20, [sp, #16]
     734:	add	sp, sp, #0xb50
     738:	ret
     73c:	mov	w0, #0x0                   	// #0
     740:	ldp	x29, x30, [sp]
     744:	ldp	x19, x20, [sp, #16]
     748:	add	sp, sp, #0xb50
     74c:	ret
     750:	mov	x0, x19
     754:	bl	0 <grub_device_close>
     758:	adrp	x1, 0 <grub_zstd_free>
     75c:	mov	w0, #0x0                   	// #0
     760:	ldr	x1, [x1]
     764:	str	wzr, [x1]
     768:	b	714 <find_device_iter+0x94>
     76c:	nop
	...

0000000000000778 <grub_btrfs_close>:
     778:	stp	x29, x30, [sp, #-32]!
     77c:	mov	x29, sp
     780:	stp	x19, x20, [sp, #16]
     784:	ldr	x20, [x0, #80]
     788:	ldr	w1, [x20, #2888]
     78c:	ldr	x2, [x20, #2880]
     790:	cmp	w1, #0x1
     794:	b.ls	7c4 <grub_btrfs_close+0x4c>  // b.plast
     798:	mov	w19, #0x1                   	// #1
     79c:	nop
     7a0:	ubfiz	x0, x19, #4, #32
     7a4:	ldr	x0, [x2, x0]
     7a8:	cbz	x0, 7ec <grub_btrfs_close+0x74>
     7ac:	bl	0 <grub_device_close>
     7b0:	add	w19, w19, #0x1
     7b4:	ldr	w1, [x20, #2888]
     7b8:	ldr	x2, [x20, #2880]
     7bc:	cmp	w19, w1
     7c0:	b.cc	7a0 <grub_btrfs_close+0x28>  // b.lo, b.ul, b.last
     7c4:	mov	x0, x2
     7c8:	bl	0 <grub_free>
     7cc:	ldr	x0, [x20, #2936]
     7d0:	bl	0 <grub_free>
     7d4:	mov	x0, x20
     7d8:	bl	0 <grub_free>
     7dc:	mov	w0, #0x0                   	// #0
     7e0:	ldp	x19, x20, [sp, #16]
     7e4:	ldp	x29, x30, [sp], #32
     7e8:	ret
     7ec:	add	w19, w19, #0x1
     7f0:	cmp	w19, w1
     7f4:	b.cc	7a0 <grub_btrfs_close+0x28>  // b.lo, b.ul, b.last
     7f8:	b	7c4 <grub_btrfs_close+0x4c>
     7fc:	nop

0000000000000800 <grub_btrfs_label>:
     800:	stp	x29, x30, [sp, #-48]!
     804:	mov	x29, sp
     808:	stp	x21, x22, [sp, #32]
     80c:	mov	x21, x0
     810:	ldr	x0, [x0]
     814:	str	xzr, [x1]
     818:	cbz	x0, 924 <grub_btrfs_label+0x124>
     81c:	mov	x22, x1
     820:	mov	x0, #0xb80                 	// #2944
     824:	stp	x19, x20, [sp, #16]
     828:	bl	0 <grub_zalloc>
     82c:	mov	x19, x0
     830:	cbz	x0, 91c <grub_btrfs_label+0x11c>
     834:	mov	x1, x0
     838:	ldr	x0, [x21]
     83c:	bl	10 <read_sblock>
     840:	cbnz	w0, 8f8 <grub_btrfs_label+0xf8>
     844:	mov	w0, #0x10                  	// #16
     848:	str	w0, [x19, #2892]
     84c:	mov	x0, #0x100                 	// #256
     850:	bl	0 <grub_malloc>
     854:	str	x0, [x19, #2880]
     858:	cbz	x0, 8f8 <grub_btrfs_label+0xf8>
     85c:	mov	w20, #0x1                   	// #1
     860:	str	w20, [x19, #2888]
     864:	ldur	x1, [x19, #201]
     868:	stp	x21, x1, [x0]
     86c:	mov	x1, #0x100                 	// #256
     870:	add	x0, x19, #0x12b
     874:	bl	0 <grub_strndup>
     878:	ldr	w1, [x19, #2888]
     87c:	str	x0, [x22]
     880:	cmp	w1, w20
     884:	b.ls	938 <grub_btrfs_label+0x138>  // b.plast
     888:	ldr	x2, [x19, #2880]
     88c:	nop
     890:	ubfiz	x0, x20, #4, #32
     894:	ldr	x0, [x2, x0]
     898:	cbz	x0, 8e8 <grub_btrfs_label+0xe8>
     89c:	bl	0 <grub_device_close>
     8a0:	add	w20, w20, #0x1
     8a4:	ldr	w1, [x19, #2888]
     8a8:	ldr	x2, [x19, #2880]
     8ac:	cmp	w20, w1
     8b0:	b.cc	890 <grub_btrfs_label+0x90>  // b.lo, b.ul, b.last
     8b4:	mov	x0, x2
     8b8:	bl	0 <grub_free>
     8bc:	ldr	x0, [x19, #2936]
     8c0:	bl	0 <grub_free>
     8c4:	mov	x0, x19
     8c8:	bl	0 <grub_free>
     8cc:	adrp	x0, 0 <grub_zstd_free>
     8d0:	ldp	x19, x20, [sp, #16]
     8d4:	ldr	x0, [x0]
     8d8:	ldp	x21, x22, [sp, #32]
     8dc:	ldr	w0, [x0]
     8e0:	ldp	x29, x30, [sp], #48
     8e4:	ret
     8e8:	add	w20, w20, #0x1
     8ec:	cmp	w20, w1
     8f0:	b.cc	890 <grub_btrfs_label+0x90>  // b.lo, b.ul, b.last
     8f4:	b	8b4 <grub_btrfs_label+0xb4>
     8f8:	mov	x0, x19
     8fc:	bl	0 <grub_free>
     900:	ldp	x19, x20, [sp, #16]
     904:	adrp	x0, 0 <grub_zstd_free>
     908:	ldp	x21, x22, [sp, #32]
     90c:	ldr	x0, [x0]
     910:	ldp	x29, x30, [sp], #48
     914:	ldr	w0, [x0]
     918:	ret
     91c:	ldp	x19, x20, [sp, #16]
     920:	b	904 <grub_btrfs_label+0x104>
     924:	adrp	x1, 0 <grub_zstd_free>
     928:	mov	w0, #0x9                   	// #9
     92c:	ldr	x1, [x1]
     930:	bl	0 <grub_error>
     934:	b	904 <grub_btrfs_label+0x104>
     938:	ldr	x2, [x19, #2880]
     93c:	b	8b4 <grub_btrfs_label+0xb4>
	...

0000000000000950 <grub_btrfs_uuid>:
     950:	sub	sp, sp, #0x40
     954:	stp	x29, x30, [sp, #16]
     958:	add	x29, sp, #0x10
     95c:	stp	x21, x22, [sp, #48]
     960:	mov	x21, x0
     964:	ldr	x0, [x0]
     968:	str	xzr, [x1]
     96c:	cbz	x0, b04 <grub_btrfs_uuid+0x1b4>
     970:	mov	x22, x1
     974:	mov	x0, #0xb80                 	// #2944
     978:	stp	x19, x20, [sp, #32]
     97c:	bl	0 <grub_zalloc>
     980:	mov	x19, x0
     984:	cbz	x0, afc <grub_btrfs_uuid+0x1ac>
     988:	mov	x1, x0
     98c:	ldr	x0, [x21]
     990:	bl	10 <read_sblock>
     994:	cbnz	w0, ad4 <grub_btrfs_uuid+0x184>
     998:	mov	w0, #0x10                  	// #16
     99c:	str	w0, [x19, #2892]
     9a0:	mov	x0, #0x100                 	// #256
     9a4:	bl	0 <grub_malloc>
     9a8:	str	x0, [x19, #2880]
     9ac:	mov	x8, x0
     9b0:	cbz	x0, ad4 <grub_btrfs_uuid+0x184>
     9b4:	ldrh	w5, [x19, #46]
     9b8:	adrp	x0, 0 <grub_zstd_free>
     9bc:	ldrh	w1, [x19, #32]
     9c0:	mov	w20, #0x1                   	// #1
     9c4:	ldrh	w2, [x19, #34]
     9c8:	lsl	w6, w5, #8
     9cc:	ldrh	w3, [x19, #36]
     9d0:	ldrh	w4, [x19, #38]
     9d4:	orr	w5, w6, w5, lsr #8
     9d8:	ldrh	w9, [x19, #40]
     9dc:	and	w5, w5, #0xffff
     9e0:	ldrh	w6, [x19, #42]
     9e4:	lsr	w11, w3, #8
     9e8:	ldrh	w7, [x19, #44]
     9ec:	lsr	w12, w4, #8
     9f0:	ldr	x0, [x0]
     9f4:	str	w20, [x19, #2888]
     9f8:	ldur	x10, [x19, #201]
     9fc:	lsr	w15, w7, #8
     a00:	lsr	w14, w6, #8
     a04:	lsr	w13, w9, #8
     a08:	stp	x21, x10, [x8]
     a0c:	lsr	w10, w2, #8
     a10:	lsr	w8, w1, #8
     a14:	str	w5, [sp]
     a18:	orr	w7, w15, w7, lsl #8
     a1c:	orr	w6, w14, w6, lsl #8
     a20:	orr	w4, w12, w4, lsl #8
     a24:	orr	w3, w11, w3, lsl #8
     a28:	orr	w2, w10, w2, lsl #8
     a2c:	orr	w1, w8, w1, lsl #8
     a30:	orr	w5, w13, w9, lsl #8
     a34:	and	w1, w1, #0xffff
     a38:	and	w7, w7, #0xffff
     a3c:	and	w6, w6, #0xffff
     a40:	and	w4, w4, #0xffff
     a44:	and	w3, w3, #0xffff
     a48:	and	w2, w2, #0xffff
     a4c:	and	w5, w5, #0xffff
     a50:	bl	0 <grub_xasprintf>
     a54:	ldr	w1, [x19, #2888]
     a58:	str	x0, [x22]
     a5c:	cmp	w1, w20
     a60:	b.ls	b18 <grub_btrfs_uuid+0x1c8>  // b.plast
     a64:	ldr	x2, [x19, #2880]
     a68:	ubfiz	x0, x20, #4, #32
     a6c:	ldr	x0, [x2, x0]
     a70:	cbz	x0, ac4 <grub_btrfs_uuid+0x174>
     a74:	bl	0 <grub_device_close>
     a78:	add	w20, w20, #0x1
     a7c:	ldr	w1, [x19, #2888]
     a80:	ldr	x2, [x19, #2880]
     a84:	cmp	w20, w1
     a88:	b.cc	a68 <grub_btrfs_uuid+0x118>  // b.lo, b.ul, b.last
     a8c:	mov	x0, x2
     a90:	bl	0 <grub_free>
     a94:	ldr	x0, [x19, #2936]
     a98:	bl	0 <grub_free>
     a9c:	mov	x0, x19
     aa0:	bl	0 <grub_free>
     aa4:	adrp	x0, 0 <grub_zstd_free>
     aa8:	ldp	x29, x30, [sp, #16]
     aac:	ldr	x0, [x0]
     ab0:	ldp	x19, x20, [sp, #32]
     ab4:	ldr	w0, [x0]
     ab8:	ldp	x21, x22, [sp, #48]
     abc:	add	sp, sp, #0x40
     ac0:	ret
     ac4:	add	w20, w20, #0x1
     ac8:	cmp	w20, w1
     acc:	b.cc	a68 <grub_btrfs_uuid+0x118>  // b.lo, b.ul, b.last
     ad0:	b	a8c <grub_btrfs_uuid+0x13c>
     ad4:	mov	x0, x19
     ad8:	bl	0 <grub_free>
     adc:	ldp	x19, x20, [sp, #32]
     ae0:	adrp	x0, 0 <grub_zstd_free>
     ae4:	ldp	x29, x30, [sp, #16]
     ae8:	ldr	x0, [x0]
     aec:	ldp	x21, x22, [sp, #48]
     af0:	add	sp, sp, #0x40
     af4:	ldr	w0, [x0]
     af8:	ret
     afc:	ldp	x19, x20, [sp, #32]
     b00:	b	ae0 <grub_btrfs_uuid+0x190>
     b04:	adrp	x1, 0 <grub_zstd_free>
     b08:	mov	w0, #0x9                   	// #9
     b0c:	ldr	x1, [x1]
     b10:	bl	0 <grub_error>
     b14:	b	ae0 <grub_btrfs_uuid+0x190>
     b18:	ldr	x2, [x19, #2880]
     b1c:	b	a8c <grub_btrfs_uuid+0x13c>
	...

0000000000000b38 <lower_bound.part.0>:
     b38:	stp	x29, x30, [sp, #-336]!
     b3c:	adrp	x13, 0 <grub_zstd_free>
     b40:	adrp	x12, 0 <grub_zstd_free>
     b44:	mov	x29, sp
     b48:	stp	x19, x20, [sp, #16]
     b4c:	mov	x20, x1
     b50:	adrp	x11, 0 <grub_zstd_free>
     b54:	stp	x21, x22, [sp, #32]
     b58:	mov	x1, x6
     b5c:	mov	x10, x3
     b60:	stp	x23, x24, [sp, #48]
     b64:	mov	x9, x4
     b68:	mov	x8, x5
     b6c:	stp	x25, x26, [sp, #64]
     b70:	mov	x22, x0
     b74:	add	w21, w7, #0x1
     b78:	stp	x27, x28, [sp, #80]
     b7c:	mov	w23, #0xffffffff            	// #-1
     b80:	ldrb	w5, [x20, #8]
     b84:	ldr	x3, [x13]
     b88:	stp	x10, x1, [sp, #96]
     b8c:	mov	w1, #0x1aa                 	// #426
     b90:	ldr	x4, [x20]
     b94:	stp	x2, x9, [sp, #112]
     b98:	ldur	x6, [x20, #9]
     b9c:	str	x8, [sp, #128]
     ba0:	ldr	x24, [x12]
     ba4:	ldr	x25, [x11]
     ba8:	mov	x2, x24
     bac:	mov	x0, x25
     bb0:	bl	0 <grub_real_dprintf>
     bb4:	ldr	x26, [sp, #96]
     bb8:	mov	w4, w21
     bbc:	add	x2, sp, #0xe8
     bc0:	mov	x0, x22
     bc4:	mov	x1, x26
     bc8:	mov	x3, #0x65                  	// #101
     bcc:	bl	1218 <grub_btrfs_read_logical>
     bd0:	add	w23, w23, #0x1
     bd4:	ldr	x1, [sp, #280]
     bd8:	mov	w19, w0
     bdc:	cmp	x26, x1
     be0:	b.eq	d98 <lower_bound.part.0+0x260>  // b.none
     be4:	adrp	x3, 0 <grub_zstd_free>
     be8:	mov	x0, x25
     bec:	mov	w1, #0x137                 	// #311
     bf0:	mov	x2, x24
     bf4:	ldr	x3, [x3]
     bf8:	bl	0 <grub_real_dprintf>
     bfc:	adrp	x1, 0 <grub_zstd_free>
     c00:	mov	w0, #0x9                   	// #9
     c04:	ldr	x1, [x1]
     c08:	bl	0 <grub_error>
     c0c:	cbnz	w19, fe4 <lower_bound.part.0+0x4ac>
     c10:	ldrb	w0, [sp, #332]
     c14:	ldr	x1, [sp, #96]
     c18:	add	x26, x1, #0x65
     c1c:	cbz	w0, dd8 <lower_bound.part.0+0x2a0>
     c20:	add	x0, sp, #0xc0
     c24:	mov	x2, #0x21                  	// #33
     c28:	mov	w1, #0x0                   	// #0
     c2c:	bl	0 <grub_memset>
     c30:	ldr	w0, [sp, #328]
     c34:	cbz	w0, f18 <lower_bound.part.0+0x3e0>
     c38:	mov	w19, #0x0                   	// #0
     c3c:	mov	w28, #0x0                   	// #0
     c40:	mov	w27, #0x21                  	// #33
     c44:	nop
     c48:	umaddl	x1, w19, w27, x26
     c4c:	mov	w4, w21
     c50:	add	x2, sp, #0x98
     c54:	mov	x0, x22
     c58:	mov	x3, #0x21                  	// #33
     c5c:	bl	1218 <grub_btrfs_read_logical>
     c60:	mov	w8, w0
     c64:	mov	w4, w23
     c68:	mov	x2, x24
     c6c:	mov	x0, x25
     c70:	mov	w1, #0x1cb                 	// #459
     c74:	cbnz	w8, ef4 <lower_bound.part.0+0x3bc>
     c78:	adrp	x3, 0 <grub_zstd_free>
     c7c:	ldrb	w6, [sp, #160]
     c80:	ldr	x5, [sp, #152]
     c84:	ldr	x3, [x3]
     c88:	ldur	x7, [sp, #161]
     c8c:	bl	0 <grub_real_dprintf>
     c90:	ldr	x0, [x20]
     c94:	ldr	x1, [sp, #152]
     c98:	cmp	x1, x0
     c9c:	b.cc	d18 <lower_bound.part.0+0x1e0>  // b.lo, b.ul, b.last
     ca0:	b.hi	f14 <lower_bound.part.0+0x3dc>  // b.pmore
     ca4:	ldrb	w1, [sp, #160]
     ca8:	ldrb	w0, [x20, #8]
     cac:	cmp	w1, w0
     cb0:	b.cc	d18 <lower_bound.part.0+0x1e0>  // b.lo, b.ul, b.last
     cb4:	b.hi	f14 <lower_bound.part.0+0x3dc>  // b.pmore
     cb8:	ldur	x0, [x20, #9]
     cbc:	ldur	x1, [sp, #161]
     cc0:	cmp	x1, x0
     cc4:	b.cc	d18 <lower_bound.part.0+0x1e0>  // b.lo, b.ul, b.last
     cc8:	b.hi	f14 <lower_bound.part.0+0x3dc>  // b.pmore
     ccc:	ldr	x3, [sp, #104]
     cd0:	cbz	x3, d0c <lower_bound.part.0+0x1d4>
     cd4:	ldp	w1, w2, [x3]
     cd8:	ldr	w26, [sp, #328]
     cdc:	add	w0, w1, #0x1
     ce0:	str	w0, [x3]
     ce4:	cmp	w0, w2
     ce8:	ldr	x0, [x3, #8]
     cec:	b.hi	fb8 <lower_bound.part.0+0x480>  // b.pmore
     cf0:	mov	w2, #0x18                  	// #24
     cf4:	ldr	x3, [sp, #96]
     cf8:	umull	x1, w1, w2
     cfc:	add	x2, x0, x1
     d00:	str	x3, [x0, x1]
     d04:	stp	w19, w26, [x2, #8]
     d08:	str	wzr, [x2, #16]
     d0c:	ldur	x0, [sp, #169]
     d10:	str	x0, [sp, #96]
     d14:	b	bb4 <lower_bound.part.0+0x7c>
     d18:	ldp	x0, x1, [sp, #152]
     d1c:	stp	x0, x1, [sp, #192]
     d20:	ldrb	w1, [sp, #184]
     d24:	ldp	x2, x3, [sp, #168]
     d28:	stp	x2, x3, [sp, #208]
     d2c:	ldr	w0, [sp, #328]
     d30:	strb	w1, [sp, #224]
     d34:	add	w19, w19, #0x1
     d38:	cmp	w19, w0
     d3c:	mov	w28, #0x1                   	// #1
     d40:	b.cc	c48 <lower_bound.part.0+0x110>  // b.lo, b.ul, b.last
     d44:	ldr	x3, [sp, #104]
     d48:	cbz	x3, d8c <lower_bound.part.0+0x254>
     d4c:	ldr	w1, [x3]
     d50:	sub	w19, w19, #0x1
     d54:	ldr	w2, [x3, #4]
     d58:	add	w0, w1, #0x1
     d5c:	str	w0, [x3]
     d60:	cmp	w0, w2
     d64:	ldr	w26, [sp, #328]
     d68:	ldr	x0, [x3, #8]
     d6c:	b.hi	f8c <lower_bound.part.0+0x454>  // b.pmore
     d70:	mov	w2, #0x18                  	// #24
     d74:	ldr	x3, [sp, #96]
     d78:	umull	x1, w1, w2
     d7c:	add	x2, x0, x1
     d80:	str	x3, [x0, x1]
     d84:	stp	w19, w26, [x2, #8]
     d88:	str	wzr, [x2, #16]
     d8c:	ldur	x0, [sp, #209]
     d90:	str	x0, [sp, #96]
     d94:	b	bb4 <lower_bound.part.0+0x7c>
     d98:	add	x1, sp, #0x108
     d9c:	add	x0, x22, #0x20
     da0:	mov	x2, #0x10                  	// #16
     da4:	bl	0 <grub_memcmp>
     da8:	cbz	w0, c0c <lower_bound.part.0+0xd4>
     dac:	adrp	x3, 0 <grub_zstd_free>
     db0:	mov	x0, x25
     db4:	mov	x2, x24
     db8:	mov	w1, #0x13d                 	// #317
     dbc:	ldr	x3, [x3]
     dc0:	bl	0 <grub_real_dprintf>
     dc4:	adrp	x1, 0 <grub_zstd_free>
     dc8:	mov	w0, #0x9                   	// #9
     dcc:	ldr	x1, [x1]
     dd0:	bl	0 <grub_error>
     dd4:	b	c0c <lower_bound.part.0+0xd4>
     dd8:	ldr	w0, [sp, #328]
     ddc:	cbz	w0, 10c8 <lower_bound.part.0+0x590>
     de0:	mov	w27, #0x0                   	// #0
     de4:	mov	w28, #0x19                  	// #25
     de8:	adrp	x19, 0 <grub_zstd_free>
     dec:	str	wzr, [sp, #140]
     df0:	umaddl	x1, w27, w28, x26
     df4:	mov	w4, w21
     df8:	add	x2, sp, #0x98
     dfc:	mov	x0, x22
     e00:	mov	x3, #0x19                  	// #25
     e04:	bl	1218 <grub_btrfs_read_logical>
     e08:	mov	w8, w0
     e0c:	mov	w4, w23
     e10:	mov	x2, x24
     e14:	mov	x0, x25
     e18:	mov	w1, #0x200                 	// #512
     e1c:	cbnz	w8, ef4 <lower_bound.part.0+0x3bc>
     e20:	ldr	x3, [x19]
     e24:	str	w8, [sp, #136]
     e28:	ldrb	w6, [sp, #160]
     e2c:	ldr	x5, [sp, #152]
     e30:	ldur	x7, [sp, #161]
     e34:	bl	0 <grub_real_dprintf>
     e38:	ldr	x0, [x20]
     e3c:	add	x3, sp, #0xc0
     e40:	ldr	x2, [sp, #152]
     e44:	ldr	w8, [sp, #136]
     e48:	cmp	x2, x0
     e4c:	b.cc	fec <lower_bound.part.0+0x4b4>  // b.lo, b.ul, b.last
     e50:	b.hi	10c0 <lower_bound.part.0+0x588>  // b.pmore
     e54:	ldrb	w1, [sp, #160]
     e58:	ldrb	w0, [x20, #8]
     e5c:	cmp	w1, w0
     e60:	b.cc	fec <lower_bound.part.0+0x4b4>  // b.lo, b.ul, b.last
     e64:	b.hi	10c0 <lower_bound.part.0+0x588>  // b.pmore
     e68:	ldur	x0, [x20, #9]
     e6c:	ldur	x1, [sp, #161]
     e70:	cmp	x1, x0
     e74:	b.cc	fec <lower_bound.part.0+0x4b4>  // b.lo, b.ul, b.last
     e78:	b.hi	10c0 <lower_bound.part.0+0x588>  // b.pmore
     e7c:	ldr	x0, [sp, #112]
     e80:	add	x1, sp, #0x98
     e84:	mov	x2, #0x11                  	// #17
     e88:	str	w8, [sp, #136]
     e8c:	bl	0 <grub_memmove>
     e90:	ldur	w0, [sp, #169]
     e94:	ldur	w1, [sp, #173]
     e98:	add	x26, x0, x26
     e9c:	ldr	w8, [sp, #136]
     ea0:	ldp	x0, x2, [sp, #120]
     ea4:	str	x1, [x2]
     ea8:	str	x26, [x0]
     eac:	ldr	x0, [sp, #104]
     eb0:	cbz	x0, 10ec <lower_bound.part.0+0x5b4>
     eb4:	ldp	w1, w2, [x0]
     eb8:	mov	x3, x0
     ebc:	ldr	w19, [sp, #328]
     ec0:	add	w0, w1, #0x1
     ec4:	str	w0, [x3]
     ec8:	cmp	w0, w2
     ecc:	ldr	x0, [x3, #8]
     ed0:	b.hi	1078 <lower_bound.part.0+0x540>  // b.pmore
     ed4:	mov	w2, #0x18                  	// #24
     ed8:	mov	w3, #0x1                   	// #1
     edc:	ldr	x4, [sp, #96]
     ee0:	umull	x1, w1, w2
     ee4:	add	x2, x0, x1
     ee8:	str	x4, [x0, x1]
     eec:	stp	w27, w19, [x2, #8]
     ef0:	str	w3, [x2, #16]
     ef4:	mov	w0, w8
     ef8:	ldp	x19, x20, [sp, #16]
     efc:	ldp	x21, x22, [sp, #32]
     f00:	ldp	x23, x24, [sp, #48]
     f04:	ldp	x25, x26, [sp, #64]
     f08:	ldp	x27, x28, [sp, #80]
     f0c:	ldp	x29, x30, [sp], #336
     f10:	ret
     f14:	cbnz	w28, d44 <lower_bound.part.0+0x20c>
     f18:	ldp	x1, x0, [sp, #120]
     f1c:	mov	w8, #0x0                   	// #0
     f20:	mov	x2, #0x11                  	// #17
     f24:	str	xzr, [x0]
     f28:	ldr	x0, [sp, #112]
     f2c:	str	xzr, [x1]
     f30:	mov	w1, #0x0                   	// #0
     f34:	str	w8, [sp, #112]
     f38:	bl	0 <grub_memset>
     f3c:	ldr	x3, [sp, #104]
     f40:	ldr	w8, [sp, #112]
     f44:	cbz	x3, ef4 <lower_bound.part.0+0x3bc>
     f48:	ldp	w1, w2, [x3]
     f4c:	ldr	w19, [sp, #328]
     f50:	add	w0, w1, #0x1
     f54:	str	w0, [x3]
     f58:	cmp	w0, w2
     f5c:	ldr	x0, [x3, #8]
     f60:	b.hi	1140 <lower_bound.part.0+0x608>  // b.pmore
     f64:	mov	w2, #0x18                  	// #24
     f68:	mov	w3, #0xffffffff            	// #-1
     f6c:	ldr	x4, [sp, #96]
     f70:	umull	x1, w1, w2
     f74:	mov	w8, #0x0                   	// #0
     f78:	add	x2, x0, x1
     f7c:	str	x4, [x0, x1]
     f80:	stp	w3, w19, [x2, #8]
     f84:	str	wzr, [x2, #16]
     f88:	b	ef4 <lower_bound.part.0+0x3bc>
     f8c:	lsl	w2, w2, #1
     f90:	mov	w1, #0x18                  	// #24
     f94:	str	w2, [x3, #4]
     f98:	umull	x1, w2, w1
     f9c:	bl	0 <grub_realloc>
     fa0:	cbz	x0, 10ac <lower_bound.part.0+0x574>
     fa4:	ldr	x2, [sp, #104]
     fa8:	ldr	w1, [x2]
     fac:	str	x0, [x2, #8]
     fb0:	sub	w1, w1, #0x1
     fb4:	b	d70 <lower_bound.part.0+0x238>
     fb8:	lsl	w2, w2, #1
     fbc:	mov	w1, #0x18                  	// #24
     fc0:	str	w2, [x3, #4]
     fc4:	umull	x1, w2, w1
     fc8:	bl	0 <grub_realloc>
     fcc:	cbz	x0, 116c <lower_bound.part.0+0x634>
     fd0:	ldr	x2, [sp, #104]
     fd4:	ldr	w1, [x2]
     fd8:	str	x0, [x2, #8]
     fdc:	sub	w1, w1, #0x1
     fe0:	b	cf0 <lower_bound.part.0+0x1b8>
     fe4:	mov	w8, w19
     fe8:	b	ef4 <lower_bound.part.0+0x3bc>
     fec:	ldp	x0, x1, [sp, #152]
     ff0:	stp	x0, x1, [sp, #192]
     ff4:	ldrb	w0, [sp, #176]
     ff8:	ldr	x2, [sp, #168]
     ffc:	mov	w1, #0x1                   	// #1
    1000:	str	w1, [sp, #140]
    1004:	add	w27, w27, #0x1
    1008:	str	x2, [sp, #208]
    100c:	strb	w0, [sp, #216]
    1010:	ldr	w0, [sp, #328]
    1014:	cmp	w27, w0
    1018:	b.cc	df0 <lower_bound.part.0+0x2b8>  // b.lo, b.ul, b.last
    101c:	ldr	x0, [sp, #112]
    1020:	mov	x1, x3
    1024:	mov	x2, #0x11                  	// #17
    1028:	str	w8, [sp, #136]
    102c:	bl	0 <grub_memmove>
    1030:	ldur	w0, [sp, #209]
    1034:	ldur	w1, [sp, #213]
    1038:	add	x26, x0, x26
    103c:	ldp	x0, x2, [sp, #120]
    1040:	ldr	x3, [sp, #104]
    1044:	str	x1, [x2]
    1048:	str	x26, [x0]
    104c:	cbz	x3, 10ec <lower_bound.part.0+0x5b4>
    1050:	ldr	w1, [x3]
    1054:	sub	w27, w27, #0x1
    1058:	ldr	w2, [x3, #4]
    105c:	add	w0, w1, #0x1
    1060:	str	w0, [x3]
    1064:	cmp	w0, w2
    1068:	ldr	w8, [sp, #136]
    106c:	ldr	w19, [sp, #328]
    1070:	ldr	x0, [x3, #8]
    1074:	b.ls	ed4 <lower_bound.part.0+0x39c>  // b.plast
    1078:	lsl	w1, w2, #1
    107c:	mov	w2, #0x18                  	// #24
    1080:	str	w1, [x3, #4]
    1084:	str	w8, [sp, #112]
    1088:	umull	x1, w1, w2
    108c:	bl	0 <grub_realloc>
    1090:	ldr	w8, [sp, #112]
    1094:	cbz	x0, 11ac <lower_bound.part.0+0x674>
    1098:	ldr	x2, [sp, #104]
    109c:	ldr	w1, [x2]
    10a0:	str	x0, [x2, #8]
    10a4:	sub	w1, w1, #0x1
    10a8:	b	ed4 <lower_bound.part.0+0x39c>
    10ac:	adrp	x0, 0 <grub_zstd_free>
    10b0:	ldr	x0, [x0]
    10b4:	ldr	w8, [x0]
    10b8:	cbz	w8, d8c <lower_bound.part.0+0x254>
    10bc:	b	ef4 <lower_bound.part.0+0x3bc>
    10c0:	ldr	w0, [sp, #140]
    10c4:	cbnz	w0, 11bc <lower_bound.part.0+0x684>
    10c8:	ldp	x1, x0, [sp, #120]
    10cc:	mov	x2, #0x11                  	// #17
    10d0:	str	xzr, [x0]
    10d4:	ldr	x0, [sp, #112]
    10d8:	str	xzr, [x1]
    10dc:	mov	w1, #0x0                   	// #0
    10e0:	bl	0 <grub_memset>
    10e4:	ldr	x0, [sp, #104]
    10e8:	cbnz	x0, 10f4 <lower_bound.part.0+0x5bc>
    10ec:	mov	w8, #0x0                   	// #0
    10f0:	b	ef4 <lower_bound.part.0+0x3bc>
    10f4:	ldp	w1, w2, [x0]
    10f8:	mov	x3, x0
    10fc:	ldr	w19, [sp, #328]
    1100:	add	w0, w1, #0x1
    1104:	str	w0, [x3]
    1108:	cmp	w0, w2
    110c:	ldr	x0, [x3, #8]
    1110:	b.hi	1180 <lower_bound.part.0+0x648>  // b.pmore
    1114:	mov	w2, #0x18                  	// #24
    1118:	mov	w4, #0xffffffff            	// #-1
    111c:	ldr	x5, [sp, #96]
    1120:	umull	x1, w1, w2
    1124:	mov	w3, #0x1                   	// #1
    1128:	mov	w8, #0x0                   	// #0
    112c:	add	x2, x0, x1
    1130:	str	x5, [x0, x1]
    1134:	stp	w4, w19, [x2, #8]
    1138:	str	w3, [x2, #16]
    113c:	b	ef4 <lower_bound.part.0+0x3bc>
    1140:	lsl	w1, w2, #1
    1144:	mov	w2, #0x18                  	// #24
    1148:	str	w1, [x3, #4]
    114c:	umull	x1, w1, w2
    1150:	bl	0 <grub_realloc>
    1154:	cbz	x0, 11ac <lower_bound.part.0+0x674>
    1158:	ldr	x2, [sp, #104]
    115c:	ldr	w1, [x2]
    1160:	str	x0, [x2, #8]
    1164:	sub	w1, w1, #0x1
    1168:	b	f64 <lower_bound.part.0+0x42c>
    116c:	adrp	x0, 0 <grub_zstd_free>
    1170:	ldr	x0, [x0]
    1174:	ldr	w8, [x0]
    1178:	cbz	w8, d0c <lower_bound.part.0+0x1d4>
    117c:	b	ef4 <lower_bound.part.0+0x3bc>
    1180:	lsl	w1, w2, #1
    1184:	mov	w2, #0x18                  	// #24
    1188:	str	w1, [x3, #4]
    118c:	umull	x1, w1, w2
    1190:	bl	0 <grub_realloc>
    1194:	cbz	x0, 11ac <lower_bound.part.0+0x674>
    1198:	ldr	x2, [sp, #104]
    119c:	ldr	w1, [x2]
    11a0:	str	x0, [x2, #8]
    11a4:	sub	w1, w1, #0x1
    11a8:	b	1114 <lower_bound.part.0+0x5dc>
    11ac:	adrp	x0, 0 <grub_zstd_free>
    11b0:	ldr	x0, [x0]
    11b4:	ldr	w8, [x0]
    11b8:	b	ef4 <lower_bound.part.0+0x3bc>
    11bc:	add	x3, sp, #0xc0
    11c0:	b	101c <lower_bound.part.0+0x4e4>
    11c4:	nop
	...

0000000000001218 <grub_btrfs_read_logical>:
    1218:	sub	sp, sp, #0x1a0
    121c:	stp	x29, x30, [sp, #16]
    1220:	add	x29, sp, #0x10
    1224:	stp	x23, x24, [sp, #64]
    1228:	str	x3, [sp, #120]
    122c:	stp	x0, x2, [sp, #136]
    1230:	str	w4, [sp, #156]
    1234:	cbz	x3, 15c4 <grub_btrfs_read_logical+0x3ac>
    1238:	mov	x3, x0
    123c:	mov	x5, x1
    1240:	adrp	x0, 0 <grub_zstd_free>
    1244:	adrp	x1, 0 <grub_zstd_free>
    1248:	adrp	x2, 0 <grub_zstd_free>
    124c:	stp	x25, x26, [sp, #80]
    1250:	mov	x26, x5
    1254:	ldr	x25, [x1]
    1258:	stp	x27, x28, [sp, #96]
    125c:	add	x4, x3, #0x32b
    1260:	ldr	x27, [x0]
    1264:	stp	x19, x20, [sp, #32]
    1268:	ldr	x2, [x2]
    126c:	stp	x21, x22, [sp, #48]
    1270:	str	x4, [sp, #216]
    1274:	str	x2, [sp, #232]
    1278:	add	x2, x3, #0xb1a
    127c:	str	x2, [sp, #224]
    1280:	ldr	x3, [sp, #232]
    1284:	mov	x4, x26
    1288:	mov	x2, x25
    128c:	mov	x0, x27
    1290:	mov	w1, #0x361                 	// #865
    1294:	mov	w20, #0x20                  	// #32
    1298:	mov	x19, #0x41                  	// #65
    129c:	ldr	x24, [sp, #216]
    12a0:	bl	0 <grub_real_dprintf>
    12a4:	ldr	x22, [sp, #224]
    12a8:	b	12f0 <grub_btrfs_read_logical+0xd8>
    12ac:	adrp	x3, 0 <grub_zstd_free>
    12b0:	ldur	x4, [x24, #9]
    12b4:	ldr	x3, [x3]
    12b8:	ldur	x5, [x24, #17]
    12bc:	bl	0 <grub_real_dprintf>
    12c0:	ldur	x21, [x24, #9]
    12c4:	cmp	x21, x26
    12c8:	b.hi	12dc <grub_btrfs_read_logical+0xc4>  // b.pmore
    12cc:	ldur	x5, [x24, #17]
    12d0:	add	x0, x21, x5
    12d4:	cmp	x0, x26
    12d8:	b.hi	18a4 <grub_btrfs_read_logical+0x68c>  // b.pmore
    12dc:	ldrh	w0, [x28, #44]
    12e0:	umaddl	x0, w20, w0, x19
    12e4:	add	x24, x24, x0
    12e8:	cmp	x24, x22
    12ec:	b.cs	130c <grub_btrfs_read_logical+0xf4>  // b.hs, b.nlast
    12f0:	ldrb	w3, [x24, #8]
    12f4:	mov	x2, x25
    12f8:	mov	x0, x27
    12fc:	add	x28, x24, #0x11
    1300:	cmp	w3, #0xe4
    1304:	mov	w1, #0x36c                 	// #876
    1308:	b.eq	12ac <grub_btrfs_read_logical+0x94>  // b.none
    130c:	mov	w0, #0xffffffe4            	// #-28
    1310:	strb	w0, [sp, #400]
    1314:	add	x0, sp, #0x200
    1318:	mov	x1, #0x100                 	// #256
    131c:	str	x1, [sp, #392]
    1320:	ldr	w1, [sp, #156]
    1324:	stur	x26, [x0, #-111]
    1328:	cmp	w1, #0xb
    132c:	b.eq	1878 <grub_btrfs_read_logical+0x660>  // b.none
    1330:	ldr	x0, [sp, #136]
    1334:	add	x5, sp, #0x140
    1338:	ldr	w7, [sp, #156]
    133c:	add	x4, sp, #0x148
    1340:	add	x2, sp, #0x170
    1344:	add	x1, sp, #0x188
    1348:	ldr	x3, [x0, #88]
    134c:	mov	x6, #0x0                   	// #0
    1350:	bl	b38 <lower_bound.part.0>
    1354:	mov	w23, w0
    1358:	cbnz	w23, 1dc0 <grub_btrfs_read_logical+0xba8>
    135c:	ldrb	w0, [sp, #376]
    1360:	cmp	w0, #0xe4
    1364:	b.ne	1bb0 <grub_btrfs_read_logical+0x998>  // b.any
    1368:	add	x0, sp, #0x200
    136c:	ldur	x0, [x0, #-135]
    1370:	cmp	x0, x26
    1374:	b.hi	1bb0 <grub_btrfs_read_logical+0x998>  // b.pmore
    1378:	ldr	x0, [sp, #320]
    137c:	bl	0 <grub_malloc>
    1380:	mov	x28, x0
    1384:	cbz	x0, 1de0 <grub_btrfs_read_logical+0xbc8>
    1388:	ldp	x3, x1, [sp, #320]
    138c:	mov	x2, x0
    1390:	ldr	w4, [sp, #156]
    1394:	ldr	x0, [sp, #136]
    1398:	bl	1218 <grub_btrfs_read_logical>
    139c:	mov	w23, w0
    13a0:	cbnz	w0, 1e00 <grub_btrfs_read_logical+0xbe8>
    13a4:	mov	w0, #0x1                   	// #1
    13a8:	str	w0, [sp, #208]
    13ac:	add	x0, sp, #0x200
    13b0:	add	x24, sp, #0x170
    13b4:	ldr	x5, [x28]
    13b8:	ldur	x21, [x0, #-135]
    13bc:	str	xzr, [sp, #352]
    13c0:	ldr	x0, [x28, #24]
    13c4:	sub	x23, x26, x21
    13c8:	cmp	x23, x5
    13cc:	and	x0, x0, #0x180
    13d0:	str	x0, [sp, #160]
    13d4:	b.cs	1b98 <grub_btrfs_read_logical+0x980>  // b.hs, b.nlast
    13d8:	ldrh	w19, [x28, #44]
    13dc:	adrp	x0, 0 <grub_zstd_free>
    13e0:	ldr	x22, [x28, #16]
    13e4:	cmp	w19, #0x0
    13e8:	ldr	x3, [x0]
    13ec:	mov	w8, #0x1                   	// #1
    13f0:	ldrh	w7, [x28, #46]
    13f4:	csel	w19, w19, w8, ne  // ne = any
    13f8:	cmp	x22, #0x0
    13fc:	mov	x20, #0x200                 	// #512
    1400:	csel	x22, x22, x20, ne  // ne = any
    1404:	str	x22, [sp]
    1408:	and	w6, w19, #0xffff
    140c:	mov	x2, x25
    1410:	mov	x0, x27
    1414:	mov	x4, x21
    1418:	mov	w1, #0x3ad                 	// #941
    141c:	str	w6, [sp, #112]
    1420:	str	w8, [sp, #128]
    1424:	str	x3, [sp, #168]
    1428:	bl	0 <grub_real_dprintf>
    142c:	ldr	x2, [x28, #24]
    1430:	and	x0, x2, #0xfffffffffffffff8
    1434:	cmp	x0, #0x20
    1438:	b.eq	1458 <grub_btrfs_read_logical+0x240>  // b.none
    143c:	ldr	w6, [sp, #112]
    1440:	ldr	w8, [sp, #128]
    1444:	b.hi	1744 <grub_btrfs_read_logical+0x52c>  // b.pmore
    1448:	cmp	x0, #0x8
    144c:	b.eq	18ac <grub_btrfs_read_logical+0x694>  // b.none
    1450:	cmp	x0, #0x10
    1454:	b.ne	16e0 <grub_btrfs_read_logical+0x4c8>  // b.any
    1458:	adrp	x3, 0 <grub_zstd_free>
    145c:	mov	w4, #0x2                   	// #2
    1460:	mov	x0, x27
    1464:	mov	w1, #0x3ca                 	// #970
    1468:	ldr	x3, [x3]
    146c:	mov	x2, x25
    1470:	str	w4, [sp, #212]
    1474:	bl	0 <grub_real_dprintf>
    1478:	ldr	x0, [x28]
    147c:	sub	x1, x21, x26
    1480:	stp	xzr, x23, [sp, #336]
    1484:	add	x1, x1, x0
    1488:	cbz	x1, 1dd4 <grub_btrfs_read_logical+0xbbc>
    148c:	ldr	x3, [sp, #120]
    1490:	adrp	x2, 0 <grub_zstd_free>
    1494:	adrp	x0, 0 <grub_zstd_free>
    1498:	str	x26, [sp, #128]
    149c:	cmp	x1, x3
    14a0:	mov	w4, #0x2                   	// #2
    14a4:	ldr	x21, [sp, #136]
    14a8:	csel	x19, x1, x3, ls  // ls = plast
    14ac:	ldr	x26, [sp, #144]
    14b0:	str	w4, [sp, #152]
    14b4:	ldr	x0, [x0]
    14b8:	str	x0, [sp, #112]
    14bc:	ldr	x1, [x2]
    14c0:	stp	x1, x24, [sp, #176]
    14c4:	str	x19, [sp, #200]
    14c8:	ldr	x0, [sp, #184]
    14cc:	mov	x2, x25
    14d0:	ldrh	w7, [x28, #46]
    14d4:	mov	w1, #0x453                 	// #1107
    14d8:	ldrh	w6, [x28, #44]
    14dc:	ldr	x5, [x28]
    14e0:	ldur	x4, [x0, #9]
    14e4:	ldr	x3, [sp, #168]
    14e8:	ldr	x0, [x28, #16]
    14ec:	str	x0, [sp]
    14f0:	mov	x0, x27
    14f4:	bl	0 <grub_real_dprintf>
    14f8:	ldr	x4, [sp, #128]
    14fc:	mov	x0, x27
    1500:	ldr	x3, [sp, #176]
    1504:	mov	x2, x25
    1508:	mov	w1, #0x45c                 	// #1116
    150c:	bl	0 <grub_real_dprintf>
    1510:	ldr	x0, [sp, #160]
    1514:	cbz	x0, 17c4 <grub_btrfs_read_logical+0x5ac>
    1518:	ldp	x4, x22, [sp, #336]
    151c:	mov	x0, x27
    1520:	ldr	x3, [sp, #112]
    1524:	mov	w1, #0x296                 	// #662
    1528:	mov	x2, x25
    152c:	lsl	x20, x4, #5
    1530:	add	x20, x20, #0x30
    1534:	add	x5, x28, x20
    1538:	ldr	x5, [x5, #8]
    153c:	add	x22, x5, x22
    1540:	mov	x6, x22
    1544:	bl	0 <grub_real_dprintf>
    1548:	ldr	x1, [x28, x20]
    154c:	mov	x0, x21
    1550:	bl	570 <find_device>
    1554:	cbz	x0, 15dc <grub_btrfs_read_logical+0x3c4>
    1558:	ldr	x0, [x0]
    155c:	lsr	x1, x22, #9
    1560:	and	x2, x22, #0x1ff
    1564:	mov	x4, x26
    1568:	mov	x3, x19
    156c:	bl	0 <grub_disk_read>
    1570:	adrp	x1, 0 <grub_zstd_free>
    1574:	ldr	x22, [x1]
    1578:	str	wzr, [x22]
    157c:	cbnz	w0, 1600 <grub_btrfs_read_logical+0x3e8>
    1580:	ldr	x26, [sp, #128]
    1584:	ldr	x1, [sp, #120]
    1588:	ldr	x0, [sp, #200]
    158c:	sub	x1, x1, x0
    1590:	str	x1, [sp, #120]
    1594:	ldr	x1, [sp, #144]
    1598:	add	x26, x26, x0
    159c:	add	x1, x1, x0
    15a0:	ldr	w0, [sp, #208]
    15a4:	str	x1, [sp, #144]
    15a8:	cbnz	w0, 1890 <grub_btrfs_read_logical+0x678>
    15ac:	ldr	x0, [sp, #120]
    15b0:	cbnz	x0, 1280 <grub_btrfs_read_logical+0x68>
    15b4:	ldp	x19, x20, [sp, #32]
    15b8:	ldp	x21, x22, [sp, #48]
    15bc:	ldp	x25, x26, [sp, #80]
    15c0:	ldp	x27, x28, [sp, #96]
    15c4:	mov	w23, #0x0                   	// #0
    15c8:	mov	w0, w23
    15cc:	ldp	x29, x30, [sp, #16]
    15d0:	ldp	x23, x24, [sp, #64]
    15d4:	add	sp, sp, #0x1a0
    15d8:	ret
    15dc:	adrp	x0, 0 <grub_zstd_free>
    15e0:	mov	x2, x25
    15e4:	mov	w1, #0x29e                 	// #670
    15e8:	ldr	x3, [x0]
    15ec:	mov	x0, x27
    15f0:	bl	0 <grub_real_dprintf>
    15f4:	adrp	x0, 0 <grub_zstd_free>
    15f8:	ldr	x22, [x0]
    15fc:	str	wzr, [x22]
    1600:	ldr	x1, [sp, #336]
    1604:	str	x1, [sp, #272]
    1608:	ldr	x1, [sp, #344]
    160c:	str	x1, [sp, #240]
    1610:	ldr	x1, [sp, #352]
    1614:	str	x1, [sp, #280]
    1618:	ldr	x1, [x28, #24]
    161c:	str	x1, [sp, #264]
    1620:	ldrh	w0, [x28, #44]
    1624:	and	x20, x0, #0xffff
    1628:	str	x20, [sp, #256]
    162c:	ubfiz	x0, x0, #4, #16
    1630:	bl	0 <grub_zalloc>
    1634:	str	x0, [sp, #192]
    1638:	mov	x23, x20
    163c:	mov	x24, x0
    1640:	cbz	x0, 1db4 <grub_btrfs_read_logical+0xb9c>
    1644:	cbz	x20, 1e44 <grub_btrfs_read_logical+0xc2c>
    1648:	mov	x20, #0x0                   	// #0
    164c:	b	1658 <grub_btrfs_read_logical+0x440>
    1650:	b.eq	19d8 <grub_btrfs_read_logical+0x7c0>  // b.none
    1654:	mov	x20, x6
    1658:	mov	x0, x19
    165c:	bl	0 <grub_zalloc>
    1660:	lsl	x1, x20, #4
    1664:	add	x6, x20, #0x1
    1668:	cmp	x23, x6
    166c:	str	x0, [x24, x1]
    1670:	cbnz	x0, 1650 <grub_btrfs_read_logical+0x438>
    1674:	mov	w23, #0x3                   	// #3
    1678:	mov	x20, #0x0                   	// #0
    167c:	str	x19, [sp, #240]
    1680:	mov	x19, x20
    1684:	ldr	x20, [sp, #192]
    1688:	ldr	x24, [sp, #256]
    168c:	nop
    1690:	lsl	x0, x19, #4
    1694:	add	x19, x19, #0x1
    1698:	ldr	x0, [x20, x0]
    169c:	bl	0 <grub_free>
    16a0:	cmp	x24, x19
    16a4:	b.hi	1690 <grub_btrfs_read_logical+0x478>  // b.pmore
    16a8:	ldr	x0, [sp, #192]
    16ac:	ldr	x19, [sp, #240]
    16b0:	bl	0 <grub_free>
    16b4:	cbz	w23, 1580 <grub_btrfs_read_logical+0x368>
    16b8:	ldr	w0, [sp, #152]
    16bc:	cmp	w0, #0x1
    16c0:	b.ne	186c <grub_btrfs_read_logical+0x654>  // b.any
    16c4:	mov	x0, x22
    16c8:	ldp	x19, x20, [sp, #32]
    16cc:	ldp	x21, x22, [sp, #48]
    16d0:	ldp	x25, x26, [sp, #80]
    16d4:	ldp	x27, x28, [sp, #96]
    16d8:	str	w23, [x0]
    16dc:	b	15c8 <grub_btrfs_read_logical+0x3b0>
    16e0:	cbnz	x0, 1984 <grub_btrfs_read_logical+0x76c>
    16e4:	adrp	x3, 0 <grub_zstd_free>
    16e8:	mov	w4, #0x1                   	// #1
    16ec:	mov	x2, x25
    16f0:	mov	x0, x27
    16f4:	ldr	x3, [x3]
    16f8:	mov	w1, #0x3bd                 	// #957
    16fc:	str	w4, [sp, #212]
    1700:	sub	x21, x21, x26
    1704:	bl	0 <grub_real_dprintf>
    1708:	ldr	x0, [x28]
    170c:	and	x1, x19, #0xffff
    1710:	mov	x2, #0x0                   	// #0
    1714:	bl	0 <grub_divmod64>
    1718:	mov	x19, x0
    171c:	cmp	x19, #0x0
    1720:	mov	x0, x23
    1724:	csel	x19, x19, x20, ne  // ne = any
    1728:	add	x2, sp, #0x158
    172c:	mov	x1, x19
    1730:	bl	0 <grub_divmod64>
    1734:	str	x0, [sp, #336]
    1738:	madd	x19, x0, x19, x19
    173c:	add	x1, x19, x21
    1740:	b	1488 <grub_btrfs_read_logical+0x270>
    1744:	sub	x1, x0, #0x80
    1748:	and	x1, x1, #0xffffffffffffff7f
    174c:	cbz	x1, 18fc <grub_btrfs_read_logical+0x6e4>
    1750:	cmp	x0, #0x40
    1754:	b.ne	1984 <grub_btrfs_read_logical+0x76c>  // b.any
    1758:	ldrh	w19, [x28, #46]
    175c:	mov	x1, x22
    1760:	add	x2, sp, #0x168
    1764:	mov	x0, x23
    1768:	cmp	w19, #0x0
    176c:	str	w8, [sp, #112]
    1770:	csel	w19, w19, w8, ne  // ne = any
    1774:	str	w6, [sp, #128]
    1778:	and	w20, w19, #0xffff
    177c:	and	x19, x19, #0xffff
    1780:	bl	0 <grub_divmod64>
    1784:	str	w20, [sp, #212]
    1788:	ldr	w6, [sp, #128]
    178c:	add	x2, sp, #0x150
    1790:	ldr	w8, [sp, #112]
    1794:	udiv	w1, w6, w20
    1798:	cmp	w1, #0x0
    179c:	csel	w1, w1, w8, ne  // ne = any
    17a0:	and	x1, x1, #0xffff
    17a4:	bl	0 <grub_divmod64>
    17a8:	ldr	x1, [sp, #336]
    17ac:	ldr	x2, [sp, #360]
    17b0:	mul	x19, x1, x19
    17b4:	sub	x1, x22, x2
    17b8:	madd	x22, x22, x0, x2
    17bc:	stp	x19, x22, [sp, #336]
    17c0:	b	1488 <grub_btrfs_read_logical+0x270>
    17c4:	ldr	w24, [sp, #212]
    17c8:	mov	x20, #0x0                   	// #0
    17cc:	b	17f8 <grub_btrfs_read_logical+0x5e0>
    17d0:	ldr	x0, [x0]
    17d4:	bl	0 <grub_disk_read>
    17d8:	mov	w23, w0
    17dc:	cbz	w0, 1580 <grub_btrfs_read_logical+0x368>
    17e0:	adrp	x0, 0 <grub_zstd_free>
    17e4:	add	x20, x20, #0x1
    17e8:	cmp	x24, x20
    17ec:	ldr	x22, [x0]
    17f0:	str	wzr, [x22]
    17f4:	b.eq	16b8 <grub_btrfs_read_logical+0x4a0>  // b.none
    17f8:	ldp	x4, x23, [sp, #336]
    17fc:	mov	x2, x25
    1800:	ldr	x3, [sp, #112]
    1804:	mov	x0, x27
    1808:	mov	w1, #0x296                 	// #662
    180c:	add	x22, x4, x20
    1810:	lsl	x22, x22, #5
    1814:	add	x22, x22, #0x30
    1818:	add	x5, x28, x22
    181c:	ldr	x5, [x5, #8]
    1820:	add	x23, x5, x23
    1824:	mov	x6, x23
    1828:	bl	0 <grub_real_dprintf>
    182c:	ldr	x1, [x28, x22]
    1830:	mov	x0, x21
    1834:	bl	570 <find_device>
    1838:	mov	x4, x26
    183c:	mov	x3, x19
    1840:	and	x2, x23, #0x1ff
    1844:	lsr	x1, x23, #9
    1848:	cbnz	x0, 17d0 <grub_btrfs_read_logical+0x5b8>
    184c:	adrp	x0, 0 <grub_zstd_free>
    1850:	mov	x2, x25
    1854:	mov	w1, #0x29e                 	// #670
    1858:	mov	w23, #0xe                   	// #14
    185c:	ldr	x3, [x0]
    1860:	mov	x0, x27
    1864:	bl	0 <grub_real_dprintf>
    1868:	b	17e0 <grub_btrfs_read_logical+0x5c8>
    186c:	mov	w0, #0x1                   	// #1
    1870:	str	w0, [sp, #152]
    1874:	b	14c8 <grub_btrfs_read_logical+0x2b0>
    1878:	adrp	x1, 0 <grub_zstd_free>
    187c:	mov	w0, #0x9                   	// #9
    1880:	ldr	x1, [x1]
    1884:	bl	0 <grub_error>
    1888:	mov	w23, w0
    188c:	b	1358 <grub_btrfs_read_logical+0x140>
    1890:	mov	x0, x28
    1894:	bl	0 <grub_free>
    1898:	ldr	x0, [sp, #120]
    189c:	cbnz	x0, 1280 <grub_btrfs_read_logical+0x68>
    18a0:	b	15b4 <grub_btrfs_read_logical+0x39c>
    18a4:	str	wzr, [sp, #208]
    18a8:	b	13bc <grub_btrfs_read_logical+0x1a4>
    18ac:	adrp	x3, 0 <grub_zstd_free>
    18b0:	mov	w4, #0x1                   	// #1
    18b4:	mov	x2, x25
    18b8:	mov	x0, x27
    18bc:	ldr	x3, [x3]
    18c0:	mov	w1, #0x3d5                 	// #981
    18c4:	str	w4, [sp, #212]
    18c8:	bl	0 <grub_real_dprintf>
    18cc:	mov	x1, x22
    18d0:	add	x2, sp, #0x168
    18d4:	mov	x0, x23
    18d8:	bl	0 <grub_divmod64>
    18dc:	and	x1, x19, #0xffff
    18e0:	add	x2, sp, #0x150
    18e4:	bl	0 <grub_divmod64>
    18e8:	ldr	x2, [sp, #360]
    18ec:	sub	x1, x22, x2
    18f0:	madd	x22, x22, x0, x2
    18f4:	str	x22, [sp, #344]
    18f8:	b	1488 <grub_btrfs_read_logical+0x270>
    18fc:	tbz	w2, #7, 1b78 <grub_btrfs_read_logical+0x960>
    1900:	adrp	x3, 0 <grub_zstd_free>
    1904:	mov	x2, x25
    1908:	mov	x0, x27
    190c:	mov	w1, #0x3fe                 	// #1022
    1910:	ldr	x3, [x3]
    1914:	mov	x20, #0x1                   	// #1
    1918:	bl	0 <grub_real_dprintf>
    191c:	and	x19, x19, #0xffff
    1920:	mov	x1, x22
    1924:	add	x2, sp, #0x168
    1928:	mov	x0, x23
    192c:	bl	0 <grub_divmod64>
    1930:	sub	x1, x19, x20
    1934:	add	x2, sp, #0x150
    1938:	bl	0 <grub_divmod64>
    193c:	mov	x21, x0
    1940:	ldr	x3, [sp, #336]
    1944:	add	x2, sp, #0x150
    1948:	mov	x1, x19
    194c:	add	x0, x0, x3
    1950:	bl	0 <grub_divmod64>
    1954:	add	x0, x19, x21
    1958:	mov	x1, x19
    195c:	sub	x0, x0, x20
    1960:	add	x2, sp, #0x160
    1964:	bl	0 <grub_divmod64>
    1968:	mov	w0, #0x1                   	// #1
    196c:	str	w0, [sp, #212]
    1970:	ldr	x0, [sp, #360]
    1974:	sub	x1, x22, x0
    1978:	madd	x22, x22, x21, x0
    197c:	str	x22, [sp, #344]
    1980:	b	1488 <grub_btrfs_read_logical+0x270>
    1984:	adrp	x3, 0 <grub_zstd_free>
    1988:	mov	x2, x25
    198c:	mov	x0, x27
    1990:	mov	w1, #0x446                 	// #1094
    1994:	ldr	x3, [x3]
    1998:	bl	0 <grub_real_dprintf>
    199c:	adrp	x1, 0 <grub_zstd_free>
    19a0:	mov	w0, #0x18                  	// #24
    19a4:	ldr	x2, [x28, #24]
    19a8:	ldr	x1, [x1]
    19ac:	bl	0 <grub_error>
    19b0:	mov	w23, w0
    19b4:	mov	w0, w23
    19b8:	ldp	x29, x30, [sp, #16]
    19bc:	ldp	x19, x20, [sp, #32]
    19c0:	ldp	x21, x22, [sp, #48]
    19c4:	ldp	x23, x24, [sp, #64]
    19c8:	ldp	x25, x26, [sp, #80]
    19cc:	ldp	x27, x28, [sp, #96]
    19d0:	add	sp, sp, #0x1a0
    19d4:	ret
    19d8:	adrp	x0, 0 <grub_zstd_free>
    19dc:	mov	x2, #0x0                   	// #0
    19e0:	ldr	x1, [sp, #192]
    19e4:	add	x24, x28, #0x30
    19e8:	ldr	x0, [x0]
    19ec:	mov	x23, #0x0                   	// #0
    19f0:	str	x0, [sp, #248]
    19f4:	stp	x28, x6, [sp, #288]
    19f8:	stp	x26, x22, [sp, #304]
    19fc:	mov	x26, x2
    1a00:	mov	x22, x1
    1a04:	b	1a44 <grub_btrfs_read_logical+0x82c>
    1a08:	adrp	x0, 0 <grub_zstd_free>
    1a0c:	mov	x4, x23
    1a10:	ldr	x5, [x24]
    1a14:	mov	x2, x25
    1a18:	ldr	x3, [x0]
    1a1c:	mov	w0, #0x1                   	// #1
    1a20:	str	w0, [x22, #8]
    1a24:	mov	w1, #0x31f                 	// #799
    1a28:	mov	x0, x27
    1a2c:	bl	0 <grub_real_dprintf>
    1a30:	cmp	x23, x20
    1a34:	add	x24, x24, #0x20
    1a38:	add	x22, x22, #0x10
    1a3c:	add	x23, x23, #0x1
    1a40:	b.eq	1ac8 <grub_btrfs_read_logical+0x8b0>  // b.none
    1a44:	ldp	x5, x6, [x24]
    1a48:	mov	x0, x27
    1a4c:	ldp	x4, x3, [sp, #240]
    1a50:	mov	w1, #0x30c                 	// #780
    1a54:	mov	x2, x25
    1a58:	add	x28, x4, x6
    1a5c:	mov	x4, x28
    1a60:	bl	0 <grub_real_dprintf>
    1a64:	ldr	x1, [x24]
    1a68:	mov	x0, x21
    1a6c:	bl	570 <find_device>
    1a70:	cbz	x0, 1b50 <grub_btrfs_read_logical+0x938>
    1a74:	ldr	x0, [x0]
    1a78:	mov	x3, x19
    1a7c:	ldr	x4, [x22]
    1a80:	and	x2, x28, #0x1ff
    1a84:	lsr	x1, x28, #9
    1a88:	bl	0 <grub_disk_read>
    1a8c:	cbz	w0, 1a08 <grub_btrfs_read_logical+0x7f0>
    1a90:	adrp	x0, 0 <grub_zstd_free>
    1a94:	mov	x4, x23
    1a98:	ldr	x5, [x24]
    1a9c:	mov	x2, x25
    1aa0:	ldr	x3, [x0]
    1aa4:	mov	w1, #0x324                 	// #804
    1aa8:	mov	x0, x27
    1aac:	add	x26, x26, #0x1
    1ab0:	add	x24, x24, #0x20
    1ab4:	add	x22, x22, #0x10
    1ab8:	bl	0 <grub_real_dprintf>
    1abc:	cmp	x23, x20
    1ac0:	add	x23, x23, #0x1
    1ac4:	b.ne	1a44 <grub_btrfs_read_logical+0x82c>  // b.any
    1ac8:	ldr	x0, [sp, #264]
    1acc:	mov	x1, x26
    1ad0:	cmp	x26, #0x1
    1ad4:	and	x23, x0, #0x80
    1ad8:	ldp	x28, x6, [sp, #288]
    1adc:	ldp	x26, x22, [sp, #304]
    1ae0:	b.ls	1bc4 <grub_btrfs_read_logical+0x9ac>  // b.plast
    1ae4:	cbnz	x23, 1e1c <grub_btrfs_read_logical+0xc04>
    1ae8:	cmp	x1, #0x2
    1aec:	b.eq	1af8 <grub_btrfs_read_logical+0x8e0>  // b.none
    1af0:	ldr	x0, [sp, #264]
    1af4:	tbnz	w0, #8, 1e94 <grub_btrfs_read_logical+0xc7c>
    1af8:	adrp	x0, 0 <grub_zstd_free>
    1afc:	mov	x5, x1
    1b00:	mov	x4, x6
    1b04:	mov	x2, x25
    1b08:	ldr	x3, [x0]
    1b0c:	mov	w1, #0x33c                 	// #828
    1b10:	mov	x0, x27
    1b14:	mov	w23, #0x0                   	// #0
    1b18:	bl	0 <grub_real_dprintf>
    1b1c:	adrp	x0, 0 <grub_zstd_free>
    1b20:	ldr	w2, [sp, #272]
    1b24:	ldr	w3, [sp, #280]
    1b28:	mov	x6, x19
    1b2c:	ldr	x0, [x0]
    1b30:	str	x0, [sp]
    1b34:	ldr	x0, [sp, #192]
    1b38:	mov	x4, x26
    1b3c:	ldr	x1, [sp, #256]
    1b40:	mov	w7, #0x0                   	// #0
    1b44:	mov	x5, #0x0                   	// #0
    1b48:	bl	0 <grub_raid6_recover_gen>
    1b4c:	b	1678 <grub_btrfs_read_logical+0x460>
    1b50:	adrp	x0, 0 <grub_zstd_free>
    1b54:	add	x26, x26, #0x1
    1b58:	ldr	x5, [x24]
    1b5c:	mov	x4, x23
    1b60:	ldr	x3, [x0]
    1b64:	mov	x2, x25
    1b68:	mov	x0, x27
    1b6c:	mov	w1, #0x313                 	// #787
    1b70:	bl	0 <grub_real_dprintf>
    1b74:	b	1a30 <grub_btrfs_read_logical+0x818>
    1b78:	adrp	x3, 0 <grub_zstd_free>
    1b7c:	mov	x2, x25
    1b80:	mov	x0, x27
    1b84:	mov	w1, #0x403                 	// #1027
    1b88:	ldr	x3, [x3]
    1b8c:	mov	x20, #0x2                   	// #2
    1b90:	bl	0 <grub_real_dprintf>
    1b94:	b	191c <grub_btrfs_read_logical+0x704>
    1b98:	adrp	x3, 0 <grub_zstd_free>
    1b9c:	mov	x2, x25
    1ba0:	mov	x0, x27
    1ba4:	mov	w1, #0x3a6                 	// #934
    1ba8:	ldr	x3, [x3]
    1bac:	bl	0 <grub_real_dprintf>
    1bb0:	adrp	x1, 0 <grub_zstd_free>
    1bb4:	mov	w0, #0x9                   	// #9
    1bb8:	ldr	x1, [x1]
    1bbc:	bl	0 <grub_error>
    1bc0:	b	19b0 <grub_btrfs_read_logical+0x798>
    1bc4:	adrp	x0, 0 <grub_zstd_free>
    1bc8:	mov	x5, x1
    1bcc:	mov	x4, x6
    1bd0:	mov	x2, x25
    1bd4:	ldr	x3, [x0]
    1bd8:	mov	w1, #0x33c                 	// #828
    1bdc:	mov	x0, x27
    1be0:	str	x6, [sp, #240]
    1be4:	bl	0 <grub_real_dprintf>
    1be8:	ldr	x6, [sp, #240]
    1bec:	cbz	x23, 1f24 <grub_btrfs_read_logical+0xd0c>
    1bf0:	ldr	x0, [sp, #192]
    1bf4:	ldr	w0, [x0, #8]
    1bf8:	cbz	w0, 1edc <grub_btrfs_read_logical+0xcc4>
    1bfc:	ldr	x0, [sp, #192]
    1c00:	mov	x4, #0x0                   	// #0
    1c04:	add	x1, x0, #0x8
    1c08:	mov	x2, x4
    1c0c:	add	x4, x4, #0x1
    1c10:	lsl	x0, x4, #4
    1c14:	ldr	w0, [x1, x0]
    1c18:	cmp	w0, #0x0
    1c1c:	ccmp	x6, x4, #0x0, ne  // ne = any
    1c20:	b.hi	1c08 <grub_btrfs_read_logical+0x9f0>  // b.pmore
    1c24:	cmp	x20, x2
    1c28:	adrp	x0, 0 <grub_zstd_free>
    1c2c:	b.eq	1ebc <grub_btrfs_read_logical+0xca4>  // b.none
    1c30:	ldr	x3, [x0]
    1c34:	mov	x2, x25
    1c38:	mov	x0, x27
    1c3c:	mov	w1, #0x2bf                 	// #703
    1c40:	mov	x23, #0x0                   	// #0
    1c44:	bl	0 <grub_real_dprintf>
    1c48:	mov	w7, #0x1                   	// #1
    1c4c:	ldr	x20, [sp, #192]
    1c50:	ldr	x24, [sp, #256]
    1c54:	b	1c7c <grub_btrfs_read_logical+0xa64>
    1c58:	ldr	x1, [x20]
    1c5c:	mov	x2, x19
    1c60:	mov	x0, x26
    1c64:	bl	0 <grub_memmove>
    1c68:	mov	w7, #0x0                   	// #0
    1c6c:	add	x23, x23, #0x1
    1c70:	add	x20, x20, #0x10
    1c74:	cmp	x24, x23
    1c78:	b.ls	1dac <grub_btrfs_read_logical+0xb94>  // b.plast
    1c7c:	ldr	w0, [x20, #8]
    1c80:	cbz	w0, 1c6c <grub_btrfs_read_logical+0xa54>
    1c84:	cbnz	w7, 1c58 <grub_btrfs_read_logical+0xa40>
    1c88:	mov	x4, x19
    1c8c:	mov	x1, x26
    1c90:	ldr	x3, [x20]
    1c94:	b	1cb0 <grub_btrfs_read_logical+0xa98>
    1c98:	ldrb	w0, [x1]
    1c9c:	subs	x4, x4, #0x1
    1ca0:	ldrb	w2, [x3], #1
    1ca4:	eor	w0, w0, w2
    1ca8:	strb	w0, [x1], #1
    1cac:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1cb0:	orr	x0, x3, x1
    1cb4:	ands	x0, x0, #0x7
    1cb8:	b.ne	1c98 <grub_btrfs_read_logical+0xa80>  // b.any
    1cbc:	cmp	x4, #0x7
    1cc0:	b.ls	1cfc <grub_btrfs_read_logical+0xae4>  // b.plast
    1cc4:	sub	x6, x4, #0x8
    1cc8:	and	x6, x6, #0xfffffffffffffff8
    1ccc:	add	x6, x6, #0x8
    1cd0:	ldr	x2, [x1, x0]
    1cd4:	ldr	x5, [x3, x0]
    1cd8:	eor	x2, x2, x5
    1cdc:	str	x2, [x1, x0]
    1ce0:	add	x0, x0, #0x8
    1ce4:	cmp	x6, x0
    1ce8:	b.ne	1cd0 <grub_btrfs_read_logical+0xab8>  // b.any
    1cec:	add	x1, x1, x6
    1cf0:	add	x3, x3, x6
    1cf4:	ands	x4, x4, #0x7
    1cf8:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1cfc:	ldrb	w0, [x3]
    1d00:	cmp	x4, #0x1
    1d04:	ldrb	w2, [x1]
    1d08:	eor	w0, w0, w2
    1d0c:	strb	w0, [x1]
    1d10:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1d14:	ldrb	w0, [x3, #1]
    1d18:	cmp	x4, #0x2
    1d1c:	ldrb	w2, [x1, #1]
    1d20:	eor	w0, w0, w2
    1d24:	strb	w0, [x1, #1]
    1d28:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1d2c:	ldrb	w0, [x3, #2]
    1d30:	cmp	x4, #0x3
    1d34:	ldrb	w2, [x1, #2]
    1d38:	eor	w0, w0, w2
    1d3c:	strb	w0, [x1, #2]
    1d40:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1d44:	ldrb	w0, [x3, #3]
    1d48:	cmp	x4, #0x4
    1d4c:	ldrb	w2, [x1, #3]
    1d50:	eor	w0, w0, w2
    1d54:	strb	w0, [x1, #3]
    1d58:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1d5c:	ldrb	w0, [x3, #4]
    1d60:	subs	x4, x4, #0x5
    1d64:	ldrb	w2, [x1, #4]
    1d68:	eor	w0, w0, w2
    1d6c:	strb	w0, [x1, #4]
    1d70:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1d74:	ldrb	w0, [x3, #5]
    1d78:	cmp	x4, #0x1
    1d7c:	ldrb	w2, [x1, #5]
    1d80:	eor	w0, w0, w2
    1d84:	strb	w0, [x1, #5]
    1d88:	b.eq	1c6c <grub_btrfs_read_logical+0xa54>  // b.none
    1d8c:	ldrb	w2, [x3, #6]
    1d90:	add	x23, x23, #0x1
    1d94:	ldrb	w0, [x1, #6]
    1d98:	add	x20, x20, #0x10
    1d9c:	cmp	x24, x23
    1da0:	eor	w0, w0, w2
    1da4:	strb	w0, [x1, #6]
    1da8:	b.hi	1c7c <grub_btrfs_read_logical+0xa64>  // b.pmore
    1dac:	mov	w23, #0x0                   	// #0
    1db0:	b	1678 <grub_btrfs_read_logical+0x460>
    1db4:	mov	w23, #0x3                   	// #3
    1db8:	bl	0 <grub_free>
    1dbc:	b	16b8 <grub_btrfs_read_logical+0x4a0>
    1dc0:	ldp	x19, x20, [sp, #32]
    1dc4:	ldp	x21, x22, [sp, #48]
    1dc8:	ldp	x25, x26, [sp, #80]
    1dcc:	ldp	x27, x28, [sp, #96]
    1dd0:	b	15c8 <grub_btrfs_read_logical+0x3b0>
    1dd4:	adrp	x1, 0 <grub_zstd_free>
    1dd8:	mov	w0, #0x26                  	// #38
    1ddc:	b	1bb8 <grub_btrfs_read_logical+0x9a0>
    1de0:	adrp	x0, 0 <grub_zstd_free>
    1de4:	ldp	x19, x20, [sp, #32]
    1de8:	ldr	x0, [x0]
    1dec:	ldp	x21, x22, [sp, #48]
    1df0:	ldr	w23, [x0]
    1df4:	ldp	x25, x26, [sp, #80]
    1df8:	ldp	x27, x28, [sp, #96]
    1dfc:	b	15c8 <grub_btrfs_read_logical+0x3b0>
    1e00:	mov	x0, x28
    1e04:	bl	0 <grub_free>
    1e08:	ldp	x19, x20, [sp, #32]
    1e0c:	ldp	x21, x22, [sp, #48]
    1e10:	ldp	x25, x26, [sp, #80]
    1e14:	ldp	x27, x28, [sp, #96]
    1e18:	b	15c8 <grub_btrfs_read_logical+0x3b0>
    1e1c:	adrp	x0, 0 <grub_zstd_free>
    1e20:	mov	x5, x1
    1e24:	mov	x4, x6
    1e28:	mov	x2, x25
    1e2c:	ldr	x3, [x0]
    1e30:	mov	w1, #0x32d                 	// #813
    1e34:	mov	x0, x27
    1e38:	mov	w23, #0xe                   	// #14
    1e3c:	bl	0 <grub_real_dprintf>
    1e40:	b	1678 <grub_btrfs_read_logical+0x460>
    1e44:	adrp	x0, 0 <grub_zstd_free>
    1e48:	mov	x2, x25
    1e4c:	mov	x5, #0x0                   	// #0
    1e50:	mov	x4, #0x0                   	// #0
    1e54:	ldr	x3, [x0]
    1e58:	mov	w1, #0x33c                 	// #828
    1e5c:	mov	x0, x27
    1e60:	ldr	x26, [sp, #128]
    1e64:	bl	0 <grub_real_dprintf>
    1e68:	ldr	x0, [sp, #264]
    1e6c:	tbz	w0, #7, 1ee8 <grub_btrfs_read_logical+0xcd0>
    1e70:	adrp	x3, 0 <grub_zstd_free>
    1e74:	mov	x0, x27
    1e78:	mov	x2, x25
    1e7c:	mov	w1, #0x2bb                 	// #699
    1e80:	ldr	x3, [x3]
    1e84:	bl	0 <grub_real_dprintf>
    1e88:	ldr	x0, [sp, #192]
    1e8c:	bl	0 <grub_free>
    1e90:	b	1584 <grub_btrfs_read_logical+0x36c>
    1e94:	adrp	x0, 0 <grub_zstd_free>
    1e98:	mov	x5, x1
    1e9c:	mov	x4, x6
    1ea0:	mov	x2, x25
    1ea4:	ldr	x3, [x0]
    1ea8:	mov	w1, #0x335                 	// #821
    1eac:	mov	x0, x27
    1eb0:	mov	w23, #0xe                   	// #14
    1eb4:	bl	0 <grub_real_dprintf>
    1eb8:	b	1678 <grub_btrfs_read_logical+0x460>
    1ebc:	adrp	x3, 0 <grub_zstd_free>
    1ec0:	mov	x2, x25
    1ec4:	mov	x0, x27
    1ec8:	mov	w1, #0x2bb                 	// #699
    1ecc:	ldr	x3, [x3]
    1ed0:	mov	w23, #0x0                   	// #0
    1ed4:	bl	0 <grub_real_dprintf>
    1ed8:	b	1678 <grub_btrfs_read_logical+0x460>
    1edc:	adrp	x0, 0 <grub_zstd_free>
    1ee0:	mov	x4, #0x0                   	// #0
    1ee4:	b	1c30 <grub_btrfs_read_logical+0xa18>
    1ee8:	ldp	x19, x6, [sp, #192]
    1eec:	adrp	x0, 0 <grub_zstd_free>
    1ef0:	ldr	w2, [sp, #272]
    1ef4:	mov	w7, #0x0                   	// #0
    1ef8:	ldr	w3, [sp, #280]
    1efc:	mov	x5, #0x0                   	// #0
    1f00:	ldr	x4, [sp, #144]
    1f04:	mov	x1, #0x0                   	// #0
    1f08:	ldr	x0, [x0]
    1f0c:	str	x0, [sp]
    1f10:	mov	x0, x19
    1f14:	bl	0 <grub_raid6_recover_gen>
    1f18:	mov	x0, x19
    1f1c:	bl	0 <grub_free>
    1f20:	b	1584 <grub_btrfs_read_logical+0x36c>
    1f24:	adrp	x0, 0 <grub_zstd_free>
    1f28:	ldr	w2, [sp, #272]
    1f2c:	ldr	w3, [sp, #280]
    1f30:	mov	x1, x6
    1f34:	ldr	x0, [x0]
    1f38:	str	x0, [sp]
    1f3c:	ldr	x0, [sp, #192]
    1f40:	mov	x6, x19
    1f44:	mov	x4, x26
    1f48:	mov	w7, #0x0                   	// #0
    1f4c:	mov	x5, #0x0                   	// #0
    1f50:	mov	w23, #0x0                   	// #0
    1f54:	bl	0 <grub_raid6_recover_gen>
    1f58:	b	1678 <grub_btrfs_read_logical+0x460>
    1f5c:	nop
	...

0000000000002048 <grub_btrfs_extent_read>:
    2048:	cbz	x5, 250c <grub_btrfs_extent_read+0x4c4>
    204c:	stp	x29, x30, [sp, #-176]!
    2050:	mov	x29, sp
    2054:	stp	x19, x20, [sp, #16]
    2058:	mov	x19, x0
    205c:	stp	x21, x22, [sp, #32]
    2060:	mov	x22, x5
    2064:	mov	x21, x3
    2068:	stp	x23, x24, [sp, #48]
    206c:	mov	x23, x1
    2070:	mov	x24, x2
    2074:	stp	x25, x26, [sp, #64]
    2078:	mov	x26, x3
    207c:	mov	x25, x4
    2080:	stp	x27, x28, [sp, #80]
    2084:	mov	w27, #0x6c                  	// #108
    2088:	ldr	x0, [x19, #2936]
    208c:	cbz	x0, 20a8 <grub_btrfs_extent_read+0x60>
    2090:	ldr	x1, [x19, #2896]
    2094:	cmp	x1, x21
    2098:	b.hi	20a8 <grub_btrfs_extent_read+0x60>  // b.pmore
    209c:	ldr	x2, [x19, #2912]
    20a0:	cmp	x2, x23
    20a4:	b.eq	2318 <grub_btrfs_extent_read+0x2d0>  // b.none
    20a8:	bl	0 <grub_free>
    20ac:	str	x23, [sp, #128]
    20b0:	add	x5, sp, #0x78
    20b4:	add	x4, sp, #0x70
    20b8:	mov	x3, x24
    20bc:	add	x2, sp, #0x98
    20c0:	add	x1, sp, #0x80
    20c4:	mov	x0, x19
    20c8:	mov	w7, #0x0                   	// #0
    20cc:	mov	x6, #0x0                   	// #0
    20d0:	strb	w27, [sp, #136]
    20d4:	stur	x21, [sp, #137]
    20d8:	bl	b38 <lower_bound.part.0>
    20dc:	cbnz	w0, 21e0 <grub_btrfs_extent_read+0x198>
    20e0:	ldr	x0, [sp, #152]
    20e4:	cmp	x0, x23
    20e8:	b.ne	23b8 <grub_btrfs_extent_read+0x370>  // b.any
    20ec:	ldrb	w0, [sp, #160]
    20f0:	cmp	w0, #0x6c
    20f4:	b.ne	23b8 <grub_btrfs_extent_read+0x370>  // b.any
    20f8:	ldr	x0, [sp, #120]
    20fc:	cmp	x0, #0x14
    2100:	b.le	240c <grub_btrfs_extent_read+0x3c4>
    2104:	ldur	x1, [sp, #161]
    2108:	str	x1, [x19, #2896]
    210c:	str	x0, [x19, #2928]
    2110:	bl	0 <grub_malloc>
    2114:	str	x23, [x19, #2912]
    2118:	str	x24, [x19, #2920]
    211c:	mov	x2, x0
    2120:	str	x0, [x19, #2936]
    2124:	cbz	x0, 2424 <grub_btrfs_extent_read+0x3dc>
    2128:	ldp	x1, x3, [sp, #112]
    212c:	mov	x0, x19
    2130:	mov	w4, #0x0                   	// #0
    2134:	bl	1218 <grub_btrfs_read_logical>
    2138:	cbnz	w0, 2460 <grub_btrfs_extent_read+0x418>
    213c:	ldr	x0, [x19, #2936]
    2140:	ldr	x1, [x19, #2896]
    2144:	ldr	x5, [x0, #8]
    2148:	add	x2, x1, x5
    214c:	str	x2, [x19, #2904]
    2150:	ldrb	w2, [x0, #20]
    2154:	cmp	w2, #0x1
    2158:	b.eq	2200 <grub_btrfs_extent_read+0x1b8>  // b.none
    215c:	adrp	x1, 0 <grub_zstd_free>
    2160:	adrp	x2, 0 <grub_zstd_free>
    2164:	adrp	x0, 0 <grub_zstd_free>
    2168:	ldr	x3, [x1]
    216c:	mov	w1, #0x5c1                 	// #1473
    2170:	ldr	x2, [x2]
    2174:	ldr	x0, [x0]
    2178:	ldur	x4, [sp, #161]
    217c:	bl	0 <grub_real_dprintf>
    2180:	ldr	x20, [x19, #2904]
    2184:	cmp	x20, x21
    2188:	b.ls	23b8 <grub_btrfs_extent_read+0x370>  // b.plast
    218c:	ldr	x1, [x19, #2896]
    2190:	ldr	x0, [x19, #2936]
    2194:	sub	x20, x20, x21
    2198:	ldrb	w2, [x0, #17]
    219c:	cmp	x20, x22
    21a0:	sub	x28, x21, x1
    21a4:	csel	x20, x20, x22, ls  // ls = plast
    21a8:	cbnz	w2, 2468 <grub_btrfs_extent_read+0x420>
    21ac:	ldrb	w3, [x0, #16]
    21b0:	cmp	w3, #0x3
    21b4:	b.hi	2480 <grub_btrfs_extent_read+0x438>  // b.pmore
    21b8:	ldrh	w1, [x0, #18]
    21bc:	cbnz	w1, 249c <grub_btrfs_extent_read+0x454>
    21c0:	ldrb	w2, [x0, #20]
    21c4:	cbz	w2, 22d4 <grub_btrfs_extent_read+0x28c>
    21c8:	cmp	w2, #0x1
    21cc:	b.eq	2224 <grub_btrfs_extent_read+0x1dc>  // b.none
    21d0:	adrp	x1, 0 <grub_zstd_free>
    21d4:	mov	w0, #0x18                  	// #24
    21d8:	ldr	x1, [x1]
    21dc:	bl	0 <grub_error>
    21e0:	mov	x0, #0xffffffffffffffff    	// #-1
    21e4:	ldp	x19, x20, [sp, #16]
    21e8:	ldp	x21, x22, [sp, #32]
    21ec:	ldp	x23, x24, [sp, #48]
    21f0:	ldp	x25, x26, [sp, #64]
    21f4:	ldp	x27, x28, [sp, #80]
    21f8:	ldp	x29, x30, [sp], #176
    21fc:	ret
    2200:	ldr	x3, [sp, #120]
    2204:	add	x2, x0, #0x35
    2208:	add	x3, x0, x3
    220c:	cmp	x3, x2
    2210:	b.cc	215c <grub_btrfs_extent_read+0x114>  // b.lo, b.ul, b.last
    2214:	ldur	x0, [x0, #45]
    2218:	add	x1, x0, x1
    221c:	str	x1, [x19, #2904]
    2220:	b	215c <grub_btrfs_extent_read+0x114>
    2224:	ldur	x2, [x0, #21]
    2228:	cbz	x2, 235c <grub_btrfs_extent_read+0x314>
    222c:	cbz	w3, 2334 <grub_btrfs_extent_read+0x2ec>
    2230:	ldur	x3, [x0, #29]
    2234:	str	x3, [sp, #96]
    2238:	mov	x0, x3
    223c:	bl	0 <grub_malloc>
    2240:	mov	x5, x0
    2244:	cbz	x0, 21e0 <grub_btrfs_extent_read+0x198>
    2248:	ldr	x1, [x19, #2936]
    224c:	mov	x2, x0
    2250:	ldr	x3, [sp, #96]
    2254:	mov	x0, x19
    2258:	ldur	x1, [x1, #21]
    225c:	mov	w4, #0x0                   	// #0
    2260:	stp	x5, x3, [sp, #96]
    2264:	bl	1218 <grub_btrfs_read_logical>
    2268:	ldp	x5, x3, [sp, #96]
    226c:	cbnz	w0, 2514 <grub_btrfs_extent_read+0x4cc>
    2270:	ldr	x2, [x19, #2936]
    2274:	ldrb	w0, [x2, #16]
    2278:	cmp	w0, #0x1
    227c:	b.eq	2434 <grub_btrfs_extent_read+0x3ec>  // b.none
    2280:	cmp	w0, #0x2
    2284:	b.eq	24b4 <grub_btrfs_extent_read+0x46c>  // b.none
    2288:	cmp	w0, #0x3
    228c:	mov	x1, #0xffffffffffffffff    	// #-1
    2290:	b.eq	24e0 <grub_btrfs_extent_read+0x498>  // b.none
    2294:	mov	x0, x5
    2298:	str	x1, [sp, #96]
    229c:	bl	0 <grub_free>
    22a0:	ldr	x1, [sp, #96]
    22a4:	cmp	x20, x1
    22a8:	b.eq	2300 <grub_btrfs_extent_read+0x2b8>  // b.none
    22ac:	adrp	x0, 0 <grub_zstd_free>
    22b0:	ldr	x0, [x0]
    22b4:	ldr	w0, [x0]
    22b8:	cbnz	w0, 21e0 <grub_btrfs_extent_read+0x198>
    22bc:	adrp	x1, 0 <grub_zstd_free>
    22c0:	mov	w0, #0x1a                  	// #26
    22c4:	ldr	x1, [x1]
    22c8:	bl	0 <grub_error>
    22cc:	mov	x0, #0xffffffffffffffff    	// #-1
    22d0:	b	21e4 <grub_btrfs_extent_read+0x19c>
    22d4:	add	x0, x0, #0x15
    22d8:	cmp	w3, #0x1
    22dc:	b.eq	2370 <grub_btrfs_extent_read+0x328>  // b.none
    22e0:	cmp	w3, #0x2
    22e4:	b.eq	23e8 <grub_btrfs_extent_read+0x3a0>  // b.none
    22e8:	cmp	w3, #0x3
    22ec:	b.eq	2394 <grub_btrfs_extent_read+0x34c>  // b.none
    22f0:	add	x1, x0, x28
    22f4:	mov	x2, x20
    22f8:	mov	x0, x25
    22fc:	bl	0 <grub_memmove>
    2300:	add	x25, x25, x20
    2304:	add	x21, x21, x20
    2308:	subs	x22, x22, x20
    230c:	b.ne	2088 <grub_btrfs_extent_read+0x40>  // b.any
    2310:	sub	x0, x21, x26
    2314:	b	21e4 <grub_btrfs_extent_read+0x19c>
    2318:	ldr	x2, [x19, #2920]
    231c:	cmp	x2, x24
    2320:	b.ne	20a8 <grub_btrfs_extent_read+0x60>  // b.any
    2324:	ldr	x20, [x19, #2904]
    2328:	cmp	x20, x21
    232c:	b.hi	2194 <grub_btrfs_extent_read+0x14c>  // b.pmore
    2330:	b	20a8 <grub_btrfs_extent_read+0x60>
    2334:	ldur	x0, [x0, #37]
    2338:	add	x1, x2, x28
    233c:	mov	x3, x20
    2340:	mov	x2, x25
    2344:	add	x1, x1, x0
    2348:	mov	w4, #0x0                   	// #0
    234c:	mov	x0, x19
    2350:	bl	1218 <grub_btrfs_read_logical>
    2354:	cbz	w0, 2300 <grub_btrfs_extent_read+0x2b8>
    2358:	b	21e0 <grub_btrfs_extent_read+0x198>
    235c:	mov	x2, x20
    2360:	mov	x0, x25
    2364:	mov	w1, #0x0                   	// #0
    2368:	bl	0 <grub_memset>
    236c:	b	2300 <grub_btrfs_extent_read+0x2b8>
    2370:	ldr	x1, [x19, #2928]
    2374:	mov	x2, x28
    2378:	mov	x4, x20
    237c:	mov	x3, x25
    2380:	sub	x1, x1, #0x15
    2384:	bl	0 <grub_zlib_decompress>
    2388:	cmp	x0, x20
    238c:	b.eq	2300 <grub_btrfs_extent_read+0x2b8>  // b.none
    2390:	b	22ac <grub_btrfs_extent_read+0x264>
    2394:	ldr	x1, [x19, #2928]
    2398:	mov	x2, x28
    239c:	mov	x4, x20
    23a0:	mov	x3, x25
    23a4:	sub	x1, x1, #0x15
    23a8:	bl	3e8 <grub_btrfs_zstd_decompress>
    23ac:	cmp	x0, x20
    23b0:	b.eq	2300 <grub_btrfs_extent_read+0x2b8>  // b.none
    23b4:	b	21e0 <grub_btrfs_extent_read+0x198>
    23b8:	adrp	x1, 0 <grub_zstd_free>
    23bc:	mov	w0, #0x9                   	// #9
    23c0:	ldr	x1, [x1]
    23c4:	bl	0 <grub_error>
    23c8:	mov	x0, #0xffffffffffffffff    	// #-1
    23cc:	ldp	x19, x20, [sp, #16]
    23d0:	ldp	x21, x22, [sp, #32]
    23d4:	ldp	x23, x24, [sp, #48]
    23d8:	ldp	x25, x26, [sp, #64]
    23dc:	ldp	x27, x28, [sp, #80]
    23e0:	ldp	x29, x30, [sp], #176
    23e4:	ret
    23e8:	ldr	x1, [x19, #2928]
    23ec:	mov	x2, x28
    23f0:	mov	x4, x20
    23f4:	mov	x3, x25
    23f8:	sub	x1, x1, #0x15
    23fc:	bl	1e0 <grub_btrfs_lzo_decompress>
    2400:	cmp	x0, x20
    2404:	b.eq	2300 <grub_btrfs_extent_read+0x2b8>  // b.none
    2408:	b	21e0 <grub_btrfs_extent_read+0x198>
    240c:	adrp	x1, 0 <grub_zstd_free>
    2410:	mov	w0, #0x9                   	// #9
    2414:	ldr	x1, [x1]
    2418:	bl	0 <grub_error>
    241c:	mov	x0, #0xffffffffffffffff    	// #-1
    2420:	b	21e4 <grub_btrfs_extent_read+0x19c>
    2424:	adrp	x0, 0 <grub_zstd_free>
    2428:	ldr	x0, [x0]
    242c:	ldr	w0, [x0]
    2430:	b	21e4 <grub_btrfs_extent_read+0x19c>
    2434:	ldur	x2, [x2, #37]
    2438:	mov	x1, x3
    243c:	mov	x0, x5
    2440:	mov	x4, x20
    2444:	mov	x3, x25
    2448:	add	x2, x28, x2
    244c:	str	x5, [sp, #96]
    2450:	bl	0 <grub_zlib_decompress>
    2454:	mov	x1, x0
    2458:	ldr	x5, [sp, #96]
    245c:	b	2294 <grub_btrfs_extent_read+0x24c>
    2460:	mov	w0, w0
    2464:	b	21e4 <grub_btrfs_extent_read+0x19c>
    2468:	adrp	x1, 0 <grub_zstd_free>
    246c:	mov	w0, #0x18                  	// #24
    2470:	ldr	x1, [x1]
    2474:	bl	0 <grub_error>
    2478:	mov	x0, #0xffffffffffffffff    	// #-1
    247c:	b	21e4 <grub_btrfs_extent_read+0x19c>
    2480:	adrp	x1, 0 <grub_zstd_free>
    2484:	mov	w2, w3
    2488:	mov	w0, #0x18                  	// #24
    248c:	ldr	x1, [x1]
    2490:	bl	0 <grub_error>
    2494:	mov	x0, #0xffffffffffffffff    	// #-1
    2498:	b	21e4 <grub_btrfs_extent_read+0x19c>
    249c:	adrp	x1, 0 <grub_zstd_free>
    24a0:	mov	w0, #0x18                  	// #24
    24a4:	ldr	x1, [x1]
    24a8:	bl	0 <grub_error>
    24ac:	mov	x0, #0xffffffffffffffff    	// #-1
    24b0:	b	21e4 <grub_btrfs_extent_read+0x19c>
    24b4:	ldur	x2, [x2, #37]
    24b8:	mov	x1, x3
    24bc:	mov	x0, x5
    24c0:	mov	x4, x20
    24c4:	mov	x3, x25
    24c8:	add	x2, x28, x2
    24cc:	str	x5, [sp, #96]
    24d0:	bl	1e0 <grub_btrfs_lzo_decompress>
    24d4:	mov	x1, x0
    24d8:	ldr	x5, [sp, #96]
    24dc:	b	2294 <grub_btrfs_extent_read+0x24c>
    24e0:	ldur	x2, [x2, #37]
    24e4:	mov	x1, x3
    24e8:	mov	x0, x5
    24ec:	mov	x4, x20
    24f0:	mov	x3, x25
    24f4:	add	x2, x28, x2
    24f8:	str	x5, [sp, #96]
    24fc:	bl	3e8 <grub_btrfs_zstd_decompress>
    2500:	mov	x1, x0
    2504:	ldr	x5, [sp, #96]
    2508:	b	2294 <grub_btrfs_extent_read+0x24c>
    250c:	mov	x0, #0x0                   	// #0
    2510:	ret
    2514:	mov	x0, x5
    2518:	bl	0 <grub_free>
    251c:	mov	x0, #0xffffffffffffffff    	// #-1
    2520:	b	21e4 <grub_btrfs_extent_read+0x19c>
    2524:	nop
	...

0000000000002580 <grub_btrfs_read>:
    2580:	mov	x3, x0
    2584:	mov	x4, x1
    2588:	ldr	x0, [x0, #80]
    258c:	mov	x5, x2
    2590:	ldr	x3, [x3, #24]
    2594:	ldr	x2, [x0, #2864]
    2598:	ldr	x1, [x0, #2872]
    259c:	b	2048 <grub_btrfs_extent_read>

00000000000025a0 <get_root>:
    25a0:	stp	x29, x30, [sp, #-304]!
    25a4:	mov	x9, #0x5                   	// #5
    25a8:	mov	w8, #0xffffff84            	// #-124
    25ac:	mov	x29, sp
    25b0:	stp	x21, x22, [sp, #32]
    25b4:	mov	x21, x3
    25b8:	mov	x22, x1
    25bc:	ldr	x3, [x0, #80]
    25c0:	add	x5, sp, #0x38
    25c4:	add	x4, sp, #0x30
    25c8:	add	x1, sp, #0x58
    25cc:	mov	w7, #0x0                   	// #0
    25d0:	mov	x6, #0x0                   	// #0
    25d4:	stp	x19, x20, [sp, #16]
    25d8:	mov	x20, x2
    25dc:	mov	x19, x0
    25e0:	add	x2, sp, #0x40
    25e4:	str	x9, [sp, #88]
    25e8:	strb	w8, [sp, #96]
    25ec:	stur	xzr, [sp, #97]
    25f0:	bl	b38 <lower_bound.part.0>
    25f4:	cbnz	w0, 2638 <get_root+0x98>
    25f8:	ldr	x0, [sp, #64]
    25fc:	ldr	x1, [sp, #88]
    2600:	cmp	x1, x0
    2604:	b.ne	2628 <get_root+0x88>  // b.any
    2608:	ldrb	w1, [sp, #96]
    260c:	ldrb	w0, [sp, #72]
    2610:	cmp	w1, w0
    2614:	b.ne	2628 <get_root+0x88>  // b.any
    2618:	ldur	x0, [sp, #73]
    261c:	ldur	x1, [sp, #97]
    2620:	cmp	x1, x0
    2624:	b.eq	2648 <get_root+0xa8>  // b.none
    2628:	adrp	x1, 0 <grub_zstd_free>
    262c:	mov	w0, #0x9                   	// #9
    2630:	ldr	x1, [x1]
    2634:	bl	0 <grub_error>
    2638:	ldp	x19, x20, [sp, #16]
    263c:	ldp	x21, x22, [sp, #32]
    2640:	ldp	x29, x30, [sp], #304
    2644:	ret
    2648:	ldr	x1, [sp, #48]
    264c:	mov	x0, x19
    2650:	add	x2, sp, #0x70
    2654:	mov	w4, #0x0                   	// #0
    2658:	mov	x3, #0xc0                  	// #192
    265c:	bl	1218 <grub_btrfs_read_logical>
    2660:	cbnz	w0, 2638 <get_root+0x98>
    2664:	mov	w2, #0x54                  	// #84
    2668:	mov	x1, #0x100                 	// #256
    266c:	str	x1, [x22]
    2670:	mov	w1, #0x2                   	// #2
    2674:	strb	w2, [x22, #8]
    2678:	stur	xzr, [x22, #9]
    267c:	ldr	x2, [sp, #288]
    2680:	str	x2, [x20]
    2684:	strb	w1, [x21]
    2688:	b	2638 <get_root+0x98>
    268c:	nop
	...

0000000000002698 <next>:
    2698:	stp	x29, x30, [sp, #-272]!
    269c:	mov	x29, sp
    26a0:	stp	x27, x28, [sp, #80]
    26a4:	mov	x27, x1
    26a8:	ldr	w1, [x1]
    26ac:	stp	x2, x3, [sp, #104]
    26b0:	str	x4, [sp, #120]
    26b4:	cbz	w1, 28a8 <next+0x210>
    26b8:	ldr	x6, [x27, #8]
    26bc:	sub	w2, w1, #0x1
    26c0:	mov	w5, #0x18                  	// #24
    26c4:	stp	x23, x24, [sp, #48]
    26c8:	mov	x23, x0
    26cc:	umaddl	x5, w2, w5, x6
    26d0:	add	x5, x5, #0x8
    26d4:	b	26e4 <next+0x4c>
    26d8:	str	w2, [x27]
    26dc:	cbz	w2, 28a4 <next+0x20c>
    26e0:	sub	w2, w2, #0x1
    26e4:	ldp	w0, w3, [x5]
    26e8:	mov	w4, w1
    26ec:	sub	x5, x5, #0x18
    26f0:	mov	w1, w2
    26f4:	add	w0, w0, #0x1
    26f8:	str	w0, [x5, #24]
    26fc:	cmp	w0, w3
    2700:	b.cs	26d8 <next+0x40>  // b.hs, b.nlast
    2704:	sub	w4, w4, #0x1
    2708:	mov	w0, #0x18                  	// #24
    270c:	stp	x19, x20, [sp, #16]
    2710:	umull	x4, w4, w0
    2714:	stp	x21, x22, [sp, #32]
    2718:	add	x0, x6, x4
    271c:	ldr	x21, [x6, x4]
    2720:	ldr	w1, [x0, #16]
    2724:	ldr	w19, [x0, #8]
    2728:	cbnz	w1, 29ac <next+0x314>
    272c:	stp	x25, x26, [sp, #64]
    2730:	add	x26, sp, #0xc8
    2734:	mov	w25, #0x21                  	// #33
    2738:	mov	x24, #0x65                  	// #101
    273c:	nop
    2740:	umaddl	x1, w19, w25, x24
    2744:	add	x2, sp, #0x80
    2748:	mov	x0, x23
    274c:	mov	w4, #0x0                   	// #0
    2750:	add	x1, x1, x21
    2754:	mov	x3, #0x21                  	// #33
    2758:	bl	1218 <grub_btrfs_read_logical>
    275c:	cbnz	w0, 2978 <next+0x2e0>
    2760:	ldur	x1, [sp, #145]
    2764:	add	x2, sp, #0xa8
    2768:	mov	x28, x2
    276c:	mov	x0, x23
    2770:	mov	w4, #0x0                   	// #0
    2774:	mov	x3, #0x65                  	// #101
    2778:	bl	1218 <grub_btrfs_read_logical>
    277c:	mov	w19, w0
    2780:	ldur	x2, [sp, #145]
    2784:	ldr	x0, [sp, #216]
    2788:	cmp	x2, x0
    278c:	b.eq	28b8 <next+0x220>  // b.none
    2790:	adrp	x3, 0 <grub_zstd_free>
    2794:	adrp	x2, 0 <grub_zstd_free>
    2798:	adrp	x0, 0 <grub_zstd_free>
    279c:	mov	w1, #0x137                 	// #311
    27a0:	ldr	x3, [x3]
    27a4:	ldr	x0, [x0]
    27a8:	ldr	x2, [x2]
    27ac:	bl	0 <grub_real_dprintf>
    27b0:	adrp	x1, 0 <grub_zstd_free>
    27b4:	mov	w0, #0x9                   	// #9
    27b8:	ldr	x1, [x1]
    27bc:	bl	0 <grub_error>
    27c0:	cbnz	w19, 2900 <next+0x268>
    27c4:	ldp	w2, w1, [x27]
    27c8:	ldrb	w3, [sp, #268]
    27cc:	add	w0, w2, #0x1
    27d0:	str	w0, [x27]
    27d4:	cmp	w3, #0x0
    27d8:	ldr	w20, [sp, #264]
    27dc:	cset	w22, eq  // eq = none
    27e0:	cmp	w0, w1
    27e4:	ldr	x0, [x27, #8]
    27e8:	ldur	x21, [sp, #145]
    27ec:	b.hi	2920 <next+0x288>  // b.pmore
    27f0:	mov	w1, #0x18                  	// #24
    27f4:	mov	x6, #0x0                   	// #0
    27f8:	umull	x2, w2, w1
    27fc:	add	x1, x0, x2
    2800:	str	x21, [x0, x2]
    2804:	stp	wzr, w20, [x1, #8]
    2808:	str	w22, [x1, #16]
    280c:	cbz	w22, 2740 <next+0xa8>
    2810:	ldp	x25, x26, [sp, #64]
    2814:	add	x1, x6, x6, lsl #1
    2818:	add	x5, x21, #0x65
    281c:	mov	x2, x28
    2820:	add	x1, x6, x1, lsl #3
    2824:	mov	x0, x23
    2828:	add	x1, x1, x5
    282c:	mov	w4, #0x0                   	// #0
    2830:	mov	x3, #0x19                  	// #25
    2834:	bl	1218 <grub_btrfs_read_logical>
    2838:	cbnz	w0, 2998 <next+0x300>
    283c:	ldr	w1, [x27]
    2840:	mov	w2, #0x18                  	// #24
    2844:	ldr	x4, [sp, #112]
    2848:	sub	w1, w1, #0x1
    284c:	ldr	x6, [x27, #8]
    2850:	mov	w0, #0x1                   	// #1
    2854:	umull	x1, w1, w2
    2858:	ldur	w3, [sp, #189]
    285c:	ldp	x19, x20, [sp, #16]
    2860:	ldp	x21, x22, [sp, #32]
    2864:	ldp	x23, x24, [sp, #48]
    2868:	str	x3, [x4]
    286c:	ldur	w4, [sp, #185]
    2870:	ldr	x1, [x6, x1]
    2874:	add	x4, x4, #0x65
    2878:	ldrb	w5, [sp, #184]
    287c:	add	x1, x1, x4
    2880:	ldr	x4, [sp, #104]
    2884:	ldp	x2, x3, [sp, #168]
    2888:	str	x1, [x4]
    288c:	ldr	x1, [sp, #120]
    2890:	ldp	x27, x28, [sp, #80]
    2894:	stp	x2, x3, [x1]
    2898:	strb	w5, [x1, #16]
    289c:	ldp	x29, x30, [sp], #272
    28a0:	ret
    28a4:	ldp	x23, x24, [sp, #48]
    28a8:	mov	w0, #0x0                   	// #0
    28ac:	ldp	x27, x28, [sp, #80]
    28b0:	ldp	x29, x30, [sp], #272
    28b4:	ret
    28b8:	mov	x1, x26
    28bc:	add	x0, x23, #0x20
    28c0:	mov	x2, #0x10                  	// #16
    28c4:	bl	0 <grub_memcmp>
    28c8:	cbz	w0, 27c0 <next+0x128>
    28cc:	adrp	x3, 0 <grub_zstd_free>
    28d0:	adrp	x2, 0 <grub_zstd_free>
    28d4:	adrp	x0, 0 <grub_zstd_free>
    28d8:	mov	w1, #0x13d                 	// #317
    28dc:	ldr	x3, [x3]
    28e0:	ldr	x0, [x0]
    28e4:	ldr	x2, [x2]
    28e8:	bl	0 <grub_real_dprintf>
    28ec:	adrp	x1, 0 <grub_zstd_free>
    28f0:	mov	w0, #0x9                   	// #9
    28f4:	ldr	x1, [x1]
    28f8:	bl	0 <grub_error>
    28fc:	cbz	w19, 27c4 <next+0x12c>
    2900:	neg	w0, w19
    2904:	ldp	x19, x20, [sp, #16]
    2908:	ldp	x21, x22, [sp, #32]
    290c:	ldp	x23, x24, [sp, #48]
    2910:	ldp	x25, x26, [sp, #64]
    2914:	ldp	x27, x28, [sp, #80]
    2918:	ldp	x29, x30, [sp], #272
    291c:	ret
    2920:	lsl	w1, w1, #1
    2924:	mov	w2, #0x18                  	// #24
    2928:	str	w1, [x27, #4]
    292c:	umull	x1, w1, w2
    2930:	bl	0 <grub_realloc>
    2934:	mov	w2, #0x18                  	// #24
    2938:	cbz	x0, 294c <next+0x2b4>
    293c:	ldr	w2, [x27]
    2940:	str	x0, [x27, #8]
    2944:	sub	w2, w2, #0x1
    2948:	b	27f0 <next+0x158>
    294c:	ldr	w0, [x27]
    2950:	ldr	x1, [x27, #8]
    2954:	sub	w0, w0, #0x1
    2958:	umull	x2, w0, w2
    295c:	add	x0, x1, x2
    2960:	ldr	x21, [x1, x2]
    2964:	ldr	w22, [x0, #16]
    2968:	ldr	w19, [x0, #8]
    296c:	mov	w6, w19
    2970:	cbz	w22, 2740 <next+0xa8>
    2974:	b	2810 <next+0x178>
    2978:	neg	w0, w0
    297c:	ldp	x19, x20, [sp, #16]
    2980:	ldp	x21, x22, [sp, #32]
    2984:	ldp	x23, x24, [sp, #48]
    2988:	ldp	x25, x26, [sp, #64]
    298c:	ldp	x27, x28, [sp, #80]
    2990:	ldp	x29, x30, [sp], #272
    2994:	ret
    2998:	neg	w0, w0
    299c:	ldp	x19, x20, [sp, #16]
    29a0:	ldp	x21, x22, [sp, #32]
    29a4:	ldp	x23, x24, [sp, #48]
    29a8:	b	28ac <next+0x214>
    29ac:	mov	w6, w19
    29b0:	add	x28, sp, #0xa8
    29b4:	b	2814 <next+0x17c>
	...

00000000000029e8 <find_path.part.0>:
    29e8:	stp	x29, x30, [sp, #-432]!
    29ec:	mov	x29, sp
    29f0:	stp	x21, x22, [sp, #32]
    29f4:	mov	x22, x0
    29f8:	mov	x21, x2
    29fc:	mov	x0, x1
    2a00:	stp	x23, x24, [sp, #48]
    2a04:	mov	x24, x3
    2a08:	mov	x23, x4
    2a0c:	stp	x27, x28, [sp, #80]
    2a10:	mov	x27, x1
    2a14:	bl	0 <grub_strdup>
    2a18:	str	x0, [sp, #120]
    2a1c:	cbz	x0, 2f54 <find_path.part.0+0x56c>
    2a20:	mov	w0, #0x20                  	// #32
    2a24:	mov	x28, #0x0                   	// #0
    2a28:	stp	x19, x20, [sp, #16]
    2a2c:	stp	x25, x26, [sp, #64]
    2a30:	stp	xzr, xzr, [sp, #96]
    2a34:	str	w0, [sp, #116]
    2a38:	ldrb	w0, [x27]
    2a3c:	cmp	w0, #0x2f
    2a40:	b.eq	2b44 <find_path.part.0+0x15c>  // b.none
    2a44:	cbz	w0, 2fa4 <find_path.part.0+0x5bc>
    2a48:	mov	x0, x27
    2a4c:	mov	w1, #0x2f                  	// #47
    2a50:	bl	0 <grub_strchr>
    2a54:	mov	x20, x0
    2a58:	cbz	x0, 2e80 <find_path.part.0+0x498>
    2a5c:	ldrb	w19, [x23]
    2a60:	sub	x26, x20, x27
    2a64:	cmp	w19, #0x2
    2a68:	b.ne	2fd4 <find_path.part.0+0x5ec>  // b.any
    2a6c:	cmp	x26, #0x1
    2a70:	b.eq	2c20 <find_path.part.0+0x238>  // b.none
    2a74:	cmp	x26, #0x2
    2a78:	b.ne	2a88 <find_path.part.0+0xa0>  // b.any
    2a7c:	ldrb	w0, [x27]
    2a80:	cmp	w0, #0x2e
    2a84:	b.eq	2e90 <find_path.part.0+0x4a8>  // b.none
    2a88:	mov	w0, #0x54                  	// #84
    2a8c:	strb	w0, [x21, #8]
    2a90:	mov	w2, w26
    2a94:	mov	x1, x27
    2a98:	mov	w0, #0x1                   	// #1
    2a9c:	bl	3a00 <grub_getcrc32c>
    2aa0:	mvn	w0, w0
    2aa4:	mov	x1, x21
    2aa8:	mov	w0, w0
    2aac:	stur	x0, [x21, #9]
    2ab0:	add	x5, sp, #0x90
    2ab4:	add	x4, sp, #0x88
    2ab8:	ldr	x3, [x24]
    2abc:	add	x2, sp, #0xa8
    2ac0:	mov	x0, x22
    2ac4:	mov	w7, #0x0                   	// #0
    2ac8:	mov	x6, #0x0                   	// #0
    2acc:	bl	b38 <lower_bound.part.0>
    2ad0:	mov	w1, w0
    2ad4:	cbnz	w0, 2f78 <find_path.part.0+0x590>
    2ad8:	ldr	x1, [x21]
    2adc:	ldr	x0, [sp, #168]
    2ae0:	cmp	x1, x0
    2ae4:	b.eq	2b4c <find_path.part.0+0x164>  // b.none
    2ae8:	mov	x0, x28
    2aec:	bl	0 <grub_free>
    2af0:	ldr	x0, [sp, #104]
    2af4:	bl	0 <grub_free>
    2af8:	adrp	x1, 0 <grub_zstd_free>
    2afc:	mov	w0, #0x5                   	// #5
    2b00:	ldr	x19, [sp, #120]
    2b04:	ldr	x1, [x1]
    2b08:	mov	x2, x19
    2b0c:	bl	0 <grub_error>
    2b10:	mov	w1, w0
    2b14:	mov	x0, x19
    2b18:	str	w1, [sp, #96]
    2b1c:	bl	0 <grub_free>
    2b20:	ldp	x19, x20, [sp, #16]
    2b24:	ldp	x25, x26, [sp, #64]
    2b28:	ldr	w1, [sp, #96]
    2b2c:	mov	w0, w1
    2b30:	ldp	x21, x22, [sp, #32]
    2b34:	ldp	x23, x24, [sp, #48]
    2b38:	ldp	x27, x28, [sp, #80]
    2b3c:	ldp	x29, x30, [sp], #432
    2b40:	ret
    2b44:	add	x27, x27, #0x1
    2b48:	b	2a38 <find_path.part.0+0x50>
    2b4c:	ldrb	w1, [x21, #8]
    2b50:	ldrb	w0, [sp, #176]
    2b54:	cmp	w1, w0
    2b58:	b.ne	2ae8 <find_path.part.0+0x100>  // b.any
    2b5c:	ldur	x1, [x21, #9]
    2b60:	ldur	x0, [sp, #177]
    2b64:	cmp	x1, x0
    2b68:	b.ne	2ae8 <find_path.part.0+0x100>  // b.any
    2b6c:	ldr	x0, [sp, #96]
    2b70:	ldr	x3, [sp, #144]
    2b74:	cmp	x3, x0
    2b78:	b.ls	2ba4 <find_path.part.0+0x1bc>  // b.plast
    2b7c:	lsl	x0, x3, #1
    2b80:	mov	x19, x0
    2b84:	mov	x0, x28
    2b88:	str	x19, [sp, #96]
    2b8c:	bl	0 <grub_free>
    2b90:	add	x0, x19, #0x1
    2b94:	bl	0 <grub_malloc>
    2b98:	mov	x28, x0
    2b9c:	cbz	x0, 300c <find_path.part.0+0x624>
    2ba0:	ldr	x3, [sp, #144]
    2ba4:	mov	x2, x28
    2ba8:	ldr	x1, [sp, #136]
    2bac:	mov	x0, x22
    2bb0:	mov	w4, #0x0                   	// #0
    2bb4:	bl	1218 <grub_btrfs_read_logical>
    2bb8:	mov	w1, w0
    2bbc:	cbnz	w0, 2f78 <find_path.part.0+0x590>
    2bc0:	ldr	x4, [sp, #144]
    2bc4:	cmp	x4, #0x0
    2bc8:	b.le	2ae8 <find_path.part.0+0x100>
    2bcc:	mov	x19, x28
    2bd0:	mov	x25, #0x0                   	// #0
    2bd4:	b	2bf4 <find_path.part.0+0x20c>
    2bd8:	ldurh	w19, [x19, #25]
    2bdc:	add	x19, x19, #0x1e
    2be0:	add	x19, x19, x2
    2be4:	mov	x25, x19
    2be8:	add	x19, x28, x19
    2bec:	cmp	x4, x25
    2bf0:	b.le	2ae8 <find_path.part.0+0x100>
    2bf4:	ldurh	w2, [x19, #27]
    2bf8:	cmp	x26, x2
    2bfc:	b.ne	2bd8 <find_path.part.0+0x1f0>  // b.any
    2c00:	mov	x2, x26
    2c04:	mov	x1, x27
    2c08:	add	x0, x19, #0x1e
    2c0c:	bl	0 <grub_memcmp>
    2c10:	cbz	w0, 2c34 <find_path.part.0+0x24c>
    2c14:	ldurh	w2, [x19, #27]
    2c18:	ldr	x4, [sp, #144]
    2c1c:	b	2bd8 <find_path.part.0+0x1f0>
    2c20:	ldrb	w0, [x27]
    2c24:	cmp	w0, #0x2e
    2c28:	b.ne	2a88 <find_path.part.0+0xa0>  // b.any
    2c2c:	mov	x27, x20
    2c30:	b	2a38 <find_path.part.0+0x50>
    2c34:	ldr	x0, [sp, #144]
    2c38:	cmp	x0, x25
    2c3c:	b.le	2ae8 <find_path.part.0+0x100>
    2c40:	ldrb	w0, [x19, #29]
    2c44:	cmp	w0, #0x7
    2c48:	b.eq	2cf4 <find_path.part.0+0x30c>  // b.none
    2c4c:	strb	w0, [x23]
    2c50:	ldrb	w1, [x19, #8]
    2c54:	cmp	w1, #0x1
    2c58:	b.eq	2e44 <find_path.part.0+0x45c>  // b.none
    2c5c:	cmp	w1, #0x84
    2c60:	b.ne	2df4 <find_path.part.0+0x40c>  // b.any
    2c64:	ldr	x3, [x22, #80]
    2c68:	mov	x1, x19
    2c6c:	add	x5, sp, #0x90
    2c70:	add	x4, sp, #0x88
    2c74:	add	x2, sp, #0xa8
    2c78:	mov	x0, x22
    2c7c:	mov	w7, #0x0                   	// #0
    2c80:	mov	x6, #0x0                   	// #0
    2c84:	bl	b38 <lower_bound.part.0>
    2c88:	mov	w1, w0
    2c8c:	cbnz	w0, 2f78 <find_path.part.0+0x590>
    2c90:	ldr	x1, [x19]
    2c94:	ldr	x0, [sp, #168]
    2c98:	cmp	x1, x0
    2c9c:	b.ne	2ae8 <find_path.part.0+0x100>  // b.any
    2ca0:	ldrb	w1, [x19, #8]
    2ca4:	ldrb	w0, [sp, #176]
    2ca8:	cmp	w1, w0
    2cac:	b.ne	2ae8 <find_path.part.0+0x100>  // b.any
    2cb0:	ldr	x1, [sp, #136]
    2cb4:	add	x2, sp, #0xf0
    2cb8:	mov	x0, x22
    2cbc:	mov	w4, #0x0                   	// #0
    2cc0:	mov	x3, #0xc0                  	// #192
    2cc4:	bl	1218 <grub_btrfs_read_logical>
    2cc8:	mov	w1, w0
    2ccc:	cbnz	w0, 2f78 <find_path.part.0+0x590>
    2cd0:	mov	w0, #0x54                  	// #84
    2cd4:	mov	x1, #0x100                 	// #256
    2cd8:	str	x1, [x21]
    2cdc:	mov	x27, x20
    2ce0:	strb	w0, [x21, #8]
    2ce4:	stur	xzr, [x21, #9]
    2ce8:	ldr	x0, [sp, #416]
    2cec:	str	x0, [x24]
    2cf0:	b	2a38 <find_path.part.0+0x50>
    2cf4:	ldr	w0, [sp, #116]
    2cf8:	subs	w0, w0, #0x1
    2cfc:	str	w0, [sp, #116]
    2d00:	b.eq	3034 <find_path.part.0+0x64c>  // b.none
    2d04:	ldr	x3, [x24]
    2d08:	add	x1, sp, #0xc0
    2d0c:	mov	w0, #0x1                   	// #1
    2d10:	add	x5, sp, #0xa0
    2d14:	ldr	x27, [x19]
    2d18:	add	x4, sp, #0x98
    2d1c:	add	x2, sp, #0xd8
    2d20:	mov	w7, #0x0                   	// #0
    2d24:	mov	x6, #0x0                   	// #0
    2d28:	str	x27, [sp, #192]
    2d2c:	strb	w0, [sp, #200]
    2d30:	mov	x0, x22
    2d34:	stur	xzr, [sp, #201]
    2d38:	bl	b38 <lower_bound.part.0>
    2d3c:	mov	w1, w0
    2d40:	cbnz	w0, 2f78 <find_path.part.0+0x590>
    2d44:	ldr	x0, [sp, #216]
    2d48:	cmp	x27, x0
    2d4c:	b.ne	2d5c <find_path.part.0+0x374>  // b.any
    2d50:	ldrb	w0, [sp, #224]
    2d54:	cmp	w0, #0x1
    2d58:	b.eq	2f34 <find_path.part.0+0x54c>  // b.none
    2d5c:	adrp	x1, 0 <grub_zstd_free>
    2d60:	mov	w0, #0x9                   	// #9
    2d64:	ldr	x1, [x1]
    2d68:	bl	0 <grub_error>
    2d6c:	mov	w1, w0
    2d70:	cbnz	w1, 2f78 <find_path.part.0+0x590>
    2d74:	ldr	x27, [sp, #256]
    2d78:	mov	x0, x20
    2d7c:	bl	0 <grub_strlen>
    2d80:	add	x1, x27, #0x1
    2d84:	add	x0, x1, x0
    2d88:	bl	0 <grub_malloc>
    2d8c:	mov	x27, x0
    2d90:	cbz	x0, 3004 <find_path.part.0+0x61c>
    2d94:	ldr	x1, [x19]
    2d98:	mov	x4, x0
    2d9c:	ldr	x2, [x24]
    2da0:	mov	x0, x22
    2da4:	ldr	x5, [sp, #256]
    2da8:	mov	x3, #0x0                   	// #0
    2dac:	bl	2048 <grub_btrfs_extent_read>
    2db0:	ldr	x1, [sp, #256]
    2db4:	cmp	x0, x1
    2db8:	b.ne	306c <find_path.part.0+0x684>  // b.any
    2dbc:	add	x19, x27, x0
    2dc0:	mov	x0, x20
    2dc4:	bl	0 <grub_strlen>
    2dc8:	add	x2, x0, #0x1
    2dcc:	mov	x1, x20
    2dd0:	mov	x0, x19
    2dd4:	bl	0 <grub_memmove>
    2dd8:	ldr	x0, [sp, #104]
    2ddc:	bl	0 <grub_free>
    2de0:	ldrb	w0, [x27]
    2de4:	cmp	w0, #0x2f
    2de8:	b.eq	2f0c <find_path.part.0+0x524>  // b.none
    2dec:	str	x27, [sp, #104]
    2df0:	b	2a38 <find_path.part.0+0x50>
    2df4:	ldr	x0, [sp, #104]
    2df8:	bl	0 <grub_free>
    2dfc:	ldr	x0, [sp, #120]
    2e00:	bl	0 <grub_free>
    2e04:	mov	x0, x28
    2e08:	bl	0 <grub_free>
    2e0c:	adrp	x1, 0 <grub_zstd_free>
    2e10:	ldrb	w2, [x19, #8]
    2e14:	mov	w0, #0x9                   	// #9
    2e18:	ldr	x1, [x1]
    2e1c:	bl	0 <grub_error>
    2e20:	mov	w1, w0
    2e24:	mov	w0, w1
    2e28:	ldp	x19, x20, [sp, #16]
    2e2c:	ldp	x21, x22, [sp, #32]
    2e30:	ldp	x23, x24, [sp, #48]
    2e34:	ldp	x25, x26, [sp, #64]
    2e38:	ldp	x27, x28, [sp, #80]
    2e3c:	ldp	x29, x30, [sp], #432
    2e40:	ret
    2e44:	ldrb	w1, [x20]
    2e48:	cmp	w1, #0x0
    2e4c:	ccmp	w0, #0x1, #0x0, ne  // ne = any
    2e50:	b.eq	2ae8 <find_path.part.0+0x100>  // b.none
    2e54:	ldp	x0, x1, [x19]
    2e58:	stp	x0, x1, [x21]
    2e5c:	mov	x27, x20
    2e60:	ldrb	w0, [x19, #16]
    2e64:	strb	w0, [x21, #16]
    2e68:	ldrb	w0, [x23]
    2e6c:	cmp	w0, #0x2
    2e70:	b.ne	2a38 <find_path.part.0+0x50>  // b.any
    2e74:	mov	w0, #0x54                  	// #84
    2e78:	strb	w0, [x21, #8]
    2e7c:	b	2a38 <find_path.part.0+0x50>
    2e80:	mov	x0, x27
    2e84:	bl	0 <grub_strlen>
    2e88:	add	x20, x27, x0
    2e8c:	b	2a5c <find_path.part.0+0x74>
    2e90:	ldrb	w0, [x27, #1]
    2e94:	cmp	w0, #0x2e
    2e98:	b.ne	2a88 <find_path.part.0+0xa0>  // b.any
    2e9c:	mov	w1, #0xc                   	// #12
    2ea0:	mov	x0, #0xffffffffffffffff    	// #-1
    2ea4:	strb	w1, [x21, #8]
    2ea8:	mov	x1, x21
    2eac:	stur	x0, [x21, #9]
    2eb0:	add	x5, sp, #0x90
    2eb4:	add	x4, sp, #0x88
    2eb8:	add	x2, sp, #0xa8
    2ebc:	ldr	x3, [x24]
    2ec0:	mov	x0, x22
    2ec4:	mov	w7, #0x0                   	// #0
    2ec8:	mov	x6, #0x0                   	// #0
    2ecc:	bl	b38 <lower_bound.part.0>
    2ed0:	mov	w1, w0
    2ed4:	cbnz	w0, 2f78 <find_path.part.0+0x590>
    2ed8:	ldrb	w1, [sp, #176]
    2edc:	ldrb	w0, [x21, #8]
    2ee0:	cmp	w1, w0
    2ee4:	b.ne	2ae8 <find_path.part.0+0x100>  // b.any
    2ee8:	ldr	x1, [x21]
    2eec:	ldr	x0, [sp, #168]
    2ef0:	cmp	x1, x0
    2ef4:	b.ne	2ae8 <find_path.part.0+0x100>  // b.any
    2ef8:	strb	w19, [x23]
    2efc:	mov	x27, x20
    2f00:	ldur	x0, [sp, #177]
    2f04:	str	x0, [x21]
    2f08:	b	2a38 <find_path.part.0+0x50>
    2f0c:	mov	x1, x21
    2f10:	mov	x3, x23
    2f14:	mov	x2, x24
    2f18:	mov	x0, x22
    2f1c:	bl	25a0 <get_root>
    2f20:	mov	w1, w0
    2f24:	cbz	w0, 2dec <find_path.part.0+0x404>
    2f28:	ldp	x19, x20, [sp, #16]
    2f2c:	ldp	x25, x26, [sp, #64]
    2f30:	b	2b2c <find_path.part.0+0x144>
    2f34:	ldr	x1, [sp, #152]
    2f38:	add	x2, sp, #0xf0
    2f3c:	mov	x0, x22
    2f40:	mov	w4, #0x0                   	// #0
    2f44:	mov	x3, #0x94                  	// #148
    2f48:	bl	1218 <grub_btrfs_read_logical>
    2f4c:	mov	w1, w0
    2f50:	b	2d70 <find_path.part.0+0x388>
    2f54:	adrp	x0, 0 <grub_zstd_free>
    2f58:	ldp	x21, x22, [sp, #32]
    2f5c:	ldr	x0, [x0]
    2f60:	ldp	x23, x24, [sp, #48]
    2f64:	ldr	w1, [x0]
    2f68:	ldp	x27, x28, [sp, #80]
    2f6c:	mov	w0, w1
    2f70:	ldp	x29, x30, [sp], #432
    2f74:	ret
    2f78:	mov	x0, x28
    2f7c:	str	w1, [sp, #96]
    2f80:	bl	0 <grub_free>
    2f84:	ldr	x0, [sp, #104]
    2f88:	bl	0 <grub_free>
    2f8c:	ldr	x0, [sp, #120]
    2f90:	bl	0 <grub_free>
    2f94:	ldr	w1, [sp, #96]
    2f98:	ldp	x19, x20, [sp, #16]
    2f9c:	ldp	x25, x26, [sp, #64]
    2fa0:	b	2b2c <find_path.part.0+0x144>
    2fa4:	mov	w1, #0x0                   	// #0
    2fa8:	mov	x0, x28
    2fac:	str	w1, [sp, #96]
    2fb0:	bl	0 <grub_free>
    2fb4:	ldr	x0, [sp, #120]
    2fb8:	bl	0 <grub_free>
    2fbc:	ldr	x0, [sp, #104]
    2fc0:	bl	0 <grub_free>
    2fc4:	ldr	w1, [sp, #96]
    2fc8:	ldp	x19, x20, [sp, #16]
    2fcc:	ldp	x25, x26, [sp, #64]
    2fd0:	b	2b2c <find_path.part.0+0x144>
    2fd4:	ldr	x0, [sp, #104]
    2fd8:	bl	0 <grub_free>
    2fdc:	ldr	x0, [sp, #120]
    2fe0:	bl	0 <grub_free>
    2fe4:	adrp	x1, 0 <grub_zstd_free>
    2fe8:	mov	w0, #0x4                   	// #4
    2fec:	ldr	x1, [x1]
    2ff0:	bl	0 <grub_error>
    2ff4:	mov	w1, w0
    2ff8:	ldp	x19, x20, [sp, #16]
    2ffc:	ldp	x25, x26, [sp, #64]
    3000:	b	2b2c <find_path.part.0+0x144>
    3004:	mov	x0, x28
    3008:	bl	0 <grub_free>
    300c:	ldr	x0, [sp, #104]
    3010:	bl	0 <grub_free>
    3014:	ldr	x0, [sp, #120]
    3018:	bl	0 <grub_free>
    301c:	adrp	x0, 0 <grub_zstd_free>
    3020:	ldp	x19, x20, [sp, #16]
    3024:	ldr	x0, [x0]
    3028:	ldp	x25, x26, [sp, #64]
    302c:	ldr	w1, [x0]
    3030:	b	2b2c <find_path.part.0+0x144>
    3034:	mov	x0, x28
    3038:	bl	0 <grub_free>
    303c:	ldr	x0, [sp, #104]
    3040:	bl	0 <grub_free>
    3044:	ldr	x0, [sp, #120]
    3048:	bl	0 <grub_free>
    304c:	adrp	x1, 0 <grub_zstd_free>
    3050:	mov	w0, #0x19                  	// #25
    3054:	ldr	x1, [x1]
    3058:	bl	0 <grub_error>
    305c:	mov	w1, w0
    3060:	ldp	x19, x20, [sp, #16]
    3064:	ldp	x25, x26, [sp, #64]
    3068:	b	2b2c <find_path.part.0+0x144>
    306c:	mov	x0, x28
    3070:	bl	0 <grub_free>
    3074:	ldr	x0, [sp, #104]
    3078:	bl	0 <grub_free>
    307c:	ldr	x0, [sp, #120]
    3080:	bl	0 <grub_free>
    3084:	mov	x0, x27
    3088:	b	3018 <find_path.part.0+0x630>
    308c:	nop
	...

00000000000030c0 <grub_btrfs_dir>:
    30c0:	stp	x29, x30, [sp, #-432]!
    30c4:	mov	x29, sp
    30c8:	stp	x19, x20, [sp, #16]
    30cc:	mov	x20, x0
    30d0:	ldr	x0, [x0]
    30d4:	cbz	x0, 35a4 <grub_btrfs_dir+0x4e4>
    30d8:	mov	x0, #0xb80                 	// #2944
    30dc:	stp	x21, x22, [sp, #32]
    30e0:	mov	x22, x2
    30e4:	stp	x23, x24, [sp, #48]
    30e8:	mov	x24, x1
    30ec:	mov	x23, x3
    30f0:	bl	0 <grub_zalloc>
    30f4:	mov	x19, x0
    30f8:	cbz	x0, 3598 <grub_btrfs_dir+0x4d8>
    30fc:	mov	x1, x0
    3100:	ldr	x0, [x20]
    3104:	bl	10 <read_sblock>
    3108:	cbnz	w0, 34cc <grub_btrfs_dir+0x40c>
    310c:	mov	w0, #0x10                  	// #16
    3110:	str	w0, [x19, #2892]
    3114:	mov	x0, #0x100                 	// #256
    3118:	bl	0 <grub_malloc>
    311c:	str	x0, [x19, #2880]
    3120:	cbz	x0, 34cc <grub_btrfs_dir+0x40c>
    3124:	mov	w21, #0x1                   	// #1
    3128:	str	w21, [x19, #2888]
    312c:	ldur	x1, [x19, #201]
    3130:	stp	x20, x1, [x0]
    3134:	add	x3, sp, #0x7f
    3138:	add	x2, sp, #0x90
    313c:	add	x1, sp, #0xb8
    3140:	mov	x0, x19
    3144:	bl	25a0 <get_root>
    3148:	mov	w20, w0
    314c:	cbz	w0, 31bc <grub_btrfs_dir+0xfc>
    3150:	ldr	w2, [x19, #2888]
    3154:	ldr	x1, [x19, #2880]
    3158:	cmp	w2, #0x1
    315c:	b.ls	318c <grub_btrfs_dir+0xcc>  // b.plast
    3160:	mov	w21, #0x1                   	// #1
    3164:	nop
    3168:	ubfiz	x0, x21, #4, #32
    316c:	ldr	x0, [x1, x0]
    3170:	cbz	x0, 349c <grub_btrfs_dir+0x3dc>
    3174:	bl	0 <grub_device_close>
    3178:	add	w21, w21, #0x1
    317c:	ldr	w2, [x19, #2888]
    3180:	ldr	x1, [x19, #2880]
    3184:	cmp	w21, w2
    3188:	b.cc	3168 <grub_btrfs_dir+0xa8>  // b.lo, b.ul, b.last
    318c:	mov	x0, x1
    3190:	bl	0 <grub_free>
    3194:	ldr	x0, [x19, #2936]
    3198:	bl	0 <grub_free>
    319c:	mov	x0, x19
    31a0:	bl	0 <grub_free>
    31a4:	mov	w0, w20
    31a8:	ldp	x19, x20, [sp, #16]
    31ac:	ldp	x21, x22, [sp, #32]
    31b0:	ldp	x23, x24, [sp, #48]
    31b4:	ldp	x29, x30, [sp], #432
    31b8:	ret
    31bc:	add	x4, sp, #0x7f
    31c0:	add	x3, sp, #0x90
    31c4:	mov	x1, x24
    31c8:	add	x2, sp, #0xb8
    31cc:	mov	x0, x19
    31d0:	bl	29e8 <find_path.part.0>
    31d4:	mov	w20, w0
    31d8:	cbnz	w0, 3150 <grub_btrfs_dir+0x90>
    31dc:	ldrb	w0, [sp, #127]
    31e0:	cmp	w0, #0x2
    31e4:	b.eq	3260 <grub_btrfs_dir+0x1a0>  // b.none
    31e8:	ldr	w2, [x19, #2888]
    31ec:	ldr	x1, [x19, #2880]
    31f0:	cmp	w2, #0x1
    31f4:	b.ls	321c <grub_btrfs_dir+0x15c>  // b.plast
    31f8:	ubfiz	x0, x21, #4, #32
    31fc:	ldr	x0, [x1, x0]
    3200:	cbz	x0, 348c <grub_btrfs_dir+0x3cc>
    3204:	bl	0 <grub_device_close>
    3208:	add	w21, w21, #0x1
    320c:	ldr	w2, [x19, #2888]
    3210:	ldr	x1, [x19, #2880]
    3214:	cmp	w21, w2
    3218:	b.cc	31f8 <grub_btrfs_dir+0x138>  // b.lo, b.ul, b.last
    321c:	mov	x0, x1
    3220:	bl	0 <grub_free>
    3224:	ldr	x0, [x19, #2936]
    3228:	bl	0 <grub_free>
    322c:	mov	x0, x19
    3230:	bl	0 <grub_free>
    3234:	adrp	x1, 0 <grub_zstd_free>
    3238:	mov	w0, #0x4                   	// #4
    323c:	ldr	x1, [x1]
    3240:	bl	0 <grub_error>
    3244:	mov	w20, w0
    3248:	mov	w0, w20
    324c:	ldp	x19, x20, [sp, #16]
    3250:	ldp	x21, x22, [sp, #32]
    3254:	ldp	x23, x24, [sp, #48]
    3258:	ldp	x29, x30, [sp], #432
    325c:	ret
    3260:	mov	x1, #0x1000000000          	// #68719476736
    3264:	mov	x0, #0x180                 	// #384
    3268:	str	x1, [sp, #168]
    326c:	ldr	x20, [sp, #144]
    3270:	bl	0 <grub_malloc>
    3274:	str	x0, [sp, #176]
    3278:	cbz	x0, 360c <grub_btrfs_dir+0x54c>
    327c:	mov	x3, x20
    3280:	add	x1, sp, #0xb8
    3284:	add	x6, sp, #0xa8
    3288:	add	x5, sp, #0x88
    328c:	add	x4, sp, #0x80
    3290:	add	x2, sp, #0xd0
    3294:	mov	x0, x19
    3298:	mov	w7, #0x0                   	// #0
    329c:	bl	b38 <lower_bound.part.0>
    32a0:	mov	w20, w0
    32a4:	cbnz	w20, 35b8 <grub_btrfs_dir+0x4f8>
    32a8:	ldrb	w0, [sp, #216]
    32ac:	cmp	w0, #0x54
    32b0:	b.ne	32c4 <grub_btrfs_dir+0x204>  // b.any
    32b4:	ldr	x1, [sp, #184]
    32b8:	ldr	x2, [sp, #208]
    32bc:	cmp	x2, x1
    32c0:	b.eq	362c <grub_btrfs_dir+0x56c>  // b.none
    32c4:	add	x4, sp, #0xd0
    32c8:	add	x3, sp, #0x88
    32cc:	add	x2, sp, #0x80
    32d0:	add	x1, sp, #0xa8
    32d4:	mov	x0, x19
    32d8:	bl	2698 <next>
    32dc:	str	w0, [sp, #108]
    32e0:	cmp	w0, #0x0
    32e4:	b.le	361c <grub_btrfs_dir+0x55c>
    32e8:	ldrb	w0, [sp, #216]
    32ec:	stp	x25, x26, [sp, #64]
    32f0:	stp	x27, x28, [sp, #80]
    32f4:	mov	x24, #0x0                   	// #0
    32f8:	str	xzr, [sp, #96]
    32fc:	cmp	w0, #0x54
    3300:	b.ne	363c <grub_btrfs_dir+0x57c>  // b.any
    3304:	ldr	x0, [sp, #184]
    3308:	ldr	x1, [sp, #208]
    330c:	cmp	x1, x0
    3310:	b.ne	363c <grub_btrfs_dir+0x57c>  // b.any
    3314:	ldr	x0, [sp, #96]
    3318:	ldr	x3, [sp, #136]
    331c:	cmp	x3, x0
    3320:	b.ls	334c <grub_btrfs_dir+0x28c>  // b.plast
    3324:	lsl	x0, x3, #1
    3328:	mov	x21, x0
    332c:	mov	x0, x24
    3330:	str	x21, [sp, #96]
    3334:	bl	0 <grub_free>
    3338:	add	x0, x21, #0x1
    333c:	bl	0 <grub_malloc>
    3340:	mov	x24, x0
    3344:	cbz	x0, 3658 <grub_btrfs_dir+0x598>
    3348:	ldr	x3, [sp, #136]
    334c:	mov	x2, x24
    3350:	ldr	x1, [sp, #128]
    3354:	mov	x0, x19
    3358:	mov	w4, #0x0                   	// #0
    335c:	bl	1218 <grub_btrfs_read_logical>
    3360:	cbnz	w0, 3648 <grub_btrfs_dir+0x588>
    3364:	ldr	x0, [sp, #136]
    3368:	cmp	x0, #0x0
    336c:	b.le	34f8 <grub_btrfs_dir+0x438>
    3370:	mov	x28, x24
    3374:	mov	w25, #0x1                   	// #1
    3378:	adrp	x27, 0 <grub_zstd_free>
    337c:	adrp	x26, 0 <grub_zstd_free>
    3380:	b	3438 <grub_btrfs_dir+0x378>
    3384:	ldr	x0, [sp, #256]
    3388:	cmp	x21, x0
    338c:	b.ne	339c <grub_btrfs_dir+0x2dc>  // b.any
    3390:	ldrb	w0, [sp, #264]
    3394:	cmp	w0, #0x1
    3398:	b.eq	34ac <grub_btrfs_dir+0x3ec>  // b.none
    339c:	ldr	x1, [x26]
    33a0:	mov	w0, #0x9                   	// #9
    33a4:	bl	0 <grub_error>
    33a8:	mov	w21, w0
    33ac:	add	x0, sp, #0x100
    33b0:	mov	x2, #0x10                  	// #16
    33b4:	mov	w1, #0x0                   	// #0
    33b8:	bl	0 <grub_memset>
    33bc:	cbnz	w21, 3480 <grub_btrfs_dir+0x3c0>
    33c0:	ldrb	w0, [sp, #256]
    33c4:	ldr	x1, [sp, #416]
    33c8:	orr	w0, w0, #0x2
    33cc:	strb	w0, [sp, #256]
    33d0:	str	w1, [sp, #260]
    33d4:	ldurh	w3, [x28, #27]
    33d8:	mov	x2, x23
    33dc:	add	x1, sp, #0x100
    33e0:	add	x0, x28, #0x1e
    33e4:	add	x3, x28, x3
    33e8:	ldrb	w21, [x3, #30]
    33ec:	strb	wzr, [x3, #30]
    33f0:	ldrb	w4, [x28, #29]
    33f4:	ldrb	w3, [sp, #256]
    33f8:	cmp	w4, #0x2
    33fc:	cset	w4, eq  // eq = none
    3400:	bfxil	w3, w4, #0, #1
    3404:	strb	w3, [sp, #256]
    3408:	blr	x22
    340c:	cbnz	w0, 3524 <grub_btrfs_dir+0x464>
    3410:	ldurh	w0, [x28, #27]
    3414:	add	x1, x28, w0, sxtw
    3418:	strb	w21, [x1, #30]
    341c:	ldurh	w8, [x28, #25]
    3420:	ldr	x1, [sp, #136]
    3424:	add	x8, x8, w0, uxth
    3428:	add	x8, x8, #0x1e
    342c:	add	x28, x24, x8
    3430:	cmp	x1, x8
    3434:	b.le	34f8 <grub_btrfs_dir+0x438>
    3438:	ldr	x3, [sp, #144]
    343c:	add	x5, sp, #0xa0
    3440:	ldr	x21, [x28]
    3444:	add	x4, sp, #0x98
    3448:	add	x2, sp, #0x100
    344c:	add	x1, sp, #0xe8
    3450:	mov	x0, x19
    3454:	mov	w7, #0x0                   	// #0
    3458:	mov	x6, #0x0                   	// #0
    345c:	str	x21, [sp, #232]
    3460:	strb	w25, [sp, #240]
    3464:	stur	xzr, [sp, #241]
    3468:	bl	b38 <lower_bound.part.0>
    346c:	cbz	w0, 3384 <grub_btrfs_dir+0x2c4>
    3470:	add	x0, sp, #0x100
    3474:	mov	x2, #0x10                  	// #16
    3478:	mov	w1, #0x0                   	// #0
    347c:	bl	0 <grub_memset>
    3480:	ldr	x0, [x27]
    3484:	str	wzr, [x0]
    3488:	b	33d4 <grub_btrfs_dir+0x314>
    348c:	add	w21, w21, #0x1
    3490:	cmp	w21, w2
    3494:	b.cc	31f8 <grub_btrfs_dir+0x138>  // b.lo, b.ul, b.last
    3498:	b	321c <grub_btrfs_dir+0x15c>
    349c:	add	w21, w21, #0x1
    34a0:	cmp	w21, w2
    34a4:	b.cc	3168 <grub_btrfs_dir+0xa8>  // b.lo, b.ul, b.last
    34a8:	b	318c <grub_btrfs_dir+0xcc>
    34ac:	ldr	x1, [sp, #152]
    34b0:	add	x2, sp, #0x118
    34b4:	mov	x0, x19
    34b8:	mov	w4, #0x0                   	// #0
    34bc:	mov	x3, #0x94                  	// #148
    34c0:	bl	1218 <grub_btrfs_read_logical>
    34c4:	mov	w21, w0
    34c8:	b	33ac <grub_btrfs_dir+0x2ec>
    34cc:	mov	x0, x19
    34d0:	bl	0 <grub_free>
    34d4:	ldp	x21, x22, [sp, #32]
    34d8:	ldp	x23, x24, [sp, #48]
    34dc:	adrp	x0, 0 <grub_zstd_free>
    34e0:	ldr	x0, [x0]
    34e4:	ldr	w20, [x0]
    34e8:	mov	w0, w20
    34ec:	ldp	x19, x20, [sp, #16]
    34f0:	ldp	x29, x30, [sp], #432
    34f4:	ret
    34f8:	add	x4, sp, #0xd0
    34fc:	add	x3, sp, #0x88
    3500:	add	x2, sp, #0x80
    3504:	add	x1, sp, #0xa8
    3508:	mov	x0, x19
    350c:	bl	2698 <next>
    3510:	str	w0, [sp, #108]
    3514:	cmp	w0, #0x0
    3518:	b.le	3524 <grub_btrfs_dir+0x464>
    351c:	ldrb	w0, [sp, #216]
    3520:	b	32fc <grub_btrfs_dir+0x23c>
    3524:	ldp	x25, x26, [sp, #64]
    3528:	ldp	x27, x28, [sp, #80]
    352c:	ldr	w0, [sp, #108]
    3530:	neg	w20, w0
    3534:	mov	x0, x24
    3538:	bl	0 <grub_free>
    353c:	ldr	x0, [sp, #176]
    3540:	bl	0 <grub_free>
    3544:	ldr	w2, [x19, #2888]
    3548:	ldr	x1, [x19, #2880]
    354c:	cmp	w2, #0x1
    3550:	b.ls	318c <grub_btrfs_dir+0xcc>  // b.plast
    3554:	mov	w21, #0x1                   	// #1
    3558:	ubfiz	x0, x21, #4, #32
    355c:	ldr	x0, [x1, x0]
    3560:	cbz	x0, 3588 <grub_btrfs_dir+0x4c8>
    3564:	bl	0 <grub_device_close>
    3568:	add	w21, w21, #0x1
    356c:	ldr	w2, [x19, #2888]
    3570:	ldr	x1, [x19, #2880]
    3574:	cmp	w21, w2
    3578:	b.cs	318c <grub_btrfs_dir+0xcc>  // b.hs, b.nlast
    357c:	ubfiz	x0, x21, #4, #32
    3580:	ldr	x0, [x1, x0]
    3584:	cbnz	x0, 3564 <grub_btrfs_dir+0x4a4>
    3588:	add	w21, w21, #0x1
    358c:	cmp	w21, w2
    3590:	b.cc	3558 <grub_btrfs_dir+0x498>  // b.lo, b.ul, b.last
    3594:	b	318c <grub_btrfs_dir+0xcc>
    3598:	ldp	x21, x22, [sp, #32]
    359c:	ldp	x23, x24, [sp, #48]
    35a0:	b	34dc <grub_btrfs_dir+0x41c>
    35a4:	adrp	x1, 0 <grub_zstd_free>
    35a8:	mov	w0, #0x9                   	// #9
    35ac:	ldr	x1, [x1]
    35b0:	bl	0 <grub_error>
    35b4:	b	34dc <grub_btrfs_dir+0x41c>
    35b8:	ldr	w2, [x19, #2888]
    35bc:	ldr	x1, [x19, #2880]
    35c0:	cmp	w2, #0x1
    35c4:	b.ls	318c <grub_btrfs_dir+0xcc>  // b.plast
    35c8:	mov	w21, #0x1                   	// #1
    35cc:	ubfiz	x0, x21, #4, #32
    35d0:	ldr	x0, [x1, x0]
    35d4:	cbz	x0, 35fc <grub_btrfs_dir+0x53c>
    35d8:	bl	0 <grub_device_close>
    35dc:	add	w21, w21, #0x1
    35e0:	ldr	w2, [x19, #2888]
    35e4:	ldr	x1, [x19, #2880]
    35e8:	cmp	w21, w2
    35ec:	b.cs	318c <grub_btrfs_dir+0xcc>  // b.hs, b.nlast
    35f0:	ubfiz	x0, x21, #4, #32
    35f4:	ldr	x0, [x1, x0]
    35f8:	cbnz	x0, 35d8 <grub_btrfs_dir+0x518>
    35fc:	add	w21, w21, #0x1
    3600:	cmp	w21, w2
    3604:	b.cc	35cc <grub_btrfs_dir+0x50c>  // b.lo, b.ul, b.last
    3608:	b	318c <grub_btrfs_dir+0xcc>
    360c:	adrp	x0, 0 <grub_zstd_free>
    3610:	ldr	x0, [x0]
    3614:	ldr	w20, [x0]
    3618:	b	32a4 <grub_btrfs_dir+0x1e4>
    361c:	ldr	w0, [sp, #108]
    3620:	mov	x24, #0x0                   	// #0
    3624:	neg	w20, w0
    3628:	b	3534 <grub_btrfs_dir+0x474>
    362c:	stp	x25, x26, [sp, #64]
    3630:	stp	x27, x28, [sp, #80]
    3634:	str	wzr, [sp, #108]
    3638:	b	32f4 <grub_btrfs_dir+0x234>
    363c:	ldp	x25, x26, [sp, #64]
    3640:	ldp	x27, x28, [sp, #80]
    3644:	b	3534 <grub_btrfs_dir+0x474>
    3648:	mov	w20, w0
    364c:	ldp	x25, x26, [sp, #64]
    3650:	ldp	x27, x28, [sp, #80]
    3654:	b	3534 <grub_btrfs_dir+0x474>
    3658:	adrp	x0, 0 <grub_zstd_free>
    365c:	ldp	x25, x26, [sp, #64]
    3660:	ldr	x0, [x0]
    3664:	ldp	x27, x28, [sp, #80]
    3668:	ldr	w20, [x0]
    366c:	b	3534 <grub_btrfs_dir+0x474>
	...

0000000000003690 <grub_btrfs_open>:
    3690:	stp	x29, x30, [sp, #-320]!
    3694:	mov	x29, sp
    3698:	stp	x19, x20, [sp, #16]
    369c:	ldr	x20, [x0, #8]
    36a0:	stp	x21, x22, [sp, #32]
    36a4:	mov	x22, x0
    36a8:	ldr	x0, [x20]
    36ac:	cbz	x0, 3958 <grub_btrfs_open+0x2c8>
    36b0:	mov	x0, #0xb80                 	// #2944
    36b4:	stp	x23, x24, [sp, #48]
    36b8:	mov	x23, x1
    36bc:	bl	0 <grub_zalloc>
    36c0:	mov	x19, x0
    36c4:	cbz	x0, 3950 <grub_btrfs_open+0x2c0>
    36c8:	mov	x1, x0
    36cc:	ldr	x0, [x20]
    36d0:	bl	10 <read_sblock>
    36d4:	cbnz	w0, 3924 <grub_btrfs_open+0x294>
    36d8:	mov	w0, #0x10                  	// #16
    36dc:	str	w0, [x19, #2892]
    36e0:	mov	x0, #0x100                 	// #256
    36e4:	bl	0 <grub_malloc>
    36e8:	str	x0, [x19, #2880]
    36ec:	cbz	x0, 3924 <grub_btrfs_open+0x294>
    36f0:	mov	w21, #0x1                   	// #1
    36f4:	str	w21, [x19, #2888]
    36f8:	ldur	x1, [x19, #201]
    36fc:	stp	x20, x1, [x0]
    3700:	add	x24, x19, #0xb30
    3704:	mov	x2, x24
    3708:	add	x3, sp, #0x4f
    370c:	add	x1, sp, #0x60
    3710:	mov	x0, x19
    3714:	bl	25a0 <get_root>
    3718:	mov	w20, w0
    371c:	cbz	w0, 378c <grub_btrfs_open+0xfc>
    3720:	ldr	w1, [x19, #2888]
    3724:	ldr	x2, [x19, #2880]
    3728:	cmp	w1, #0x1
    372c:	b.ls	375c <grub_btrfs_open+0xcc>  // b.plast
    3730:	mov	w21, #0x1                   	// #1
    3734:	nop
    3738:	ubfiz	x0, x21, #4, #32
    373c:	ldr	x0, [x2, x0]
    3740:	cbz	x0, 3914 <grub_btrfs_open+0x284>
    3744:	bl	0 <grub_device_close>
    3748:	add	w21, w21, #0x1
    374c:	ldr	w1, [x19, #2888]
    3750:	ldr	x2, [x19, #2880]
    3754:	cmp	w21, w1
    3758:	b.cc	3738 <grub_btrfs_open+0xa8>  // b.lo, b.ul, b.last
    375c:	mov	x0, x2
    3760:	bl	0 <grub_free>
    3764:	ldr	x0, [x19, #2936]
    3768:	bl	0 <grub_free>
    376c:	mov	x0, x19
    3770:	bl	0 <grub_free>
    3774:	mov	w0, w20
    3778:	ldp	x19, x20, [sp, #16]
    377c:	ldp	x21, x22, [sp, #32]
    3780:	ldp	x23, x24, [sp, #48]
    3784:	ldp	x29, x30, [sp], #320
    3788:	ret
    378c:	add	x4, sp, #0x4f
    3790:	mov	x3, x24
    3794:	add	x2, sp, #0x60
    3798:	mov	x1, x23
    379c:	mov	x0, x19
    37a0:	bl	29e8 <find_path.part.0>
    37a4:	mov	w20, w0
    37a8:	cbnz	w0, 3720 <grub_btrfs_open+0x90>
    37ac:	ldrb	w8, [sp, #79]
    37b0:	cmp	w8, #0x1
    37b4:	b.eq	3830 <grub_btrfs_open+0x1a0>  // b.none
    37b8:	ldr	w1, [x19, #2888]
    37bc:	ldr	x2, [x19, #2880]
    37c0:	cmp	w1, #0x1
    37c4:	b.ls	37ec <grub_btrfs_open+0x15c>  // b.plast
    37c8:	ubfiz	x0, x21, #4, #32
    37cc:	ldr	x0, [x2, x0]
    37d0:	cbz	x0, 38c4 <grub_btrfs_open+0x234>
    37d4:	bl	0 <grub_device_close>
    37d8:	add	w21, w21, #0x1
    37dc:	ldr	w1, [x19, #2888]
    37e0:	ldr	x2, [x19, #2880]
    37e4:	cmp	w21, w1
    37e8:	b.cc	37c8 <grub_btrfs_open+0x138>  // b.lo, b.ul, b.last
    37ec:	mov	x0, x2
    37f0:	bl	0 <grub_free>
    37f4:	ldr	x0, [x19, #2936]
    37f8:	bl	0 <grub_free>
    37fc:	mov	x0, x19
    3800:	bl	0 <grub_free>
    3804:	adrp	x1, 0 <grub_zstd_free>
    3808:	mov	w0, #0x4                   	// #4
    380c:	ldr	x1, [x1]
    3810:	bl	0 <grub_error>
    3814:	mov	w20, w0
    3818:	mov	w0, w20
    381c:	ldp	x19, x20, [sp, #16]
    3820:	ldp	x21, x22, [sp, #32]
    3824:	ldp	x23, x24, [sp, #48]
    3828:	ldp	x29, x30, [sp], #320
    382c:	ret
    3830:	ldr	x3, [x19, #2864]
    3834:	add	x5, sp, #0x58
    3838:	ldr	x21, [sp, #96]
    383c:	str	x21, [x19, #2872]
    3840:	add	x4, sp, #0x50
    3844:	add	x2, sp, #0x90
    3848:	add	x1, sp, #0x78
    384c:	mov	x0, x19
    3850:	mov	w7, #0x0                   	// #0
    3854:	mov	x6, #0x0                   	// #0
    3858:	str	x21, [sp, #120]
    385c:	strb	w8, [sp, #128]
    3860:	stur	xzr, [sp, #129]
    3864:	bl	b38 <lower_bound.part.0>
    3868:	mov	w20, w0
    386c:	cbnz	w0, 38d4 <grub_btrfs_open+0x244>
    3870:	ldr	x0, [sp, #144]
    3874:	cmp	x21, x0
    3878:	b.ne	3888 <grub_btrfs_open+0x1f8>  // b.any
    387c:	ldrb	w0, [sp, #152]
    3880:	cmp	w0, #0x1
    3884:	b.eq	3980 <grub_btrfs_open+0x2f0>  // b.none
    3888:	adrp	x1, 0 <grub_zstd_free>
    388c:	mov	w0, #0x9                   	// #9
    3890:	ldr	x1, [x1]
    3894:	bl	0 <grub_error>
    3898:	mov	w20, w0
    389c:	cbnz	w20, 38d4 <grub_btrfs_open+0x244>
    38a0:	ldr	x0, [sp, #184]
    38a4:	ldp	x23, x24, [sp, #48]
    38a8:	str	x0, [x22, #64]
    38ac:	str	x19, [x22, #80]
    38b0:	mov	w0, w20
    38b4:	ldp	x19, x20, [sp, #16]
    38b8:	ldp	x21, x22, [sp, #32]
    38bc:	ldp	x29, x30, [sp], #320
    38c0:	ret
    38c4:	add	w21, w21, #0x1
    38c8:	cmp	w21, w1
    38cc:	b.cc	37c8 <grub_btrfs_open+0x138>  // b.lo, b.ul, b.last
    38d0:	b	37ec <grub_btrfs_open+0x15c>
    38d4:	ldr	w2, [x19, #2888]
    38d8:	ldr	x1, [x19, #2880]
    38dc:	cmp	w2, #0x1
    38e0:	b.ls	390c <grub_btrfs_open+0x27c>  // b.plast
    38e4:	mov	w21, #0x1                   	// #1
    38e8:	ubfiz	x0, x21, #4, #32
    38ec:	ldr	x0, [x1, x0]
    38f0:	cbz	x0, 396c <grub_btrfs_open+0x2dc>
    38f4:	bl	0 <grub_device_close>
    38f8:	add	w21, w21, #0x1
    38fc:	ldr	w2, [x19, #2888]
    3900:	ldr	x1, [x19, #2880]
    3904:	cmp	w21, w2
    3908:	b.cc	38e8 <grub_btrfs_open+0x258>  // b.lo, b.ul, b.last
    390c:	mov	x0, x1
    3910:	b	3760 <grub_btrfs_open+0xd0>
    3914:	add	w21, w21, #0x1
    3918:	cmp	w21, w1
    391c:	b.cc	3738 <grub_btrfs_open+0xa8>  // b.lo, b.ul, b.last
    3920:	b	375c <grub_btrfs_open+0xcc>
    3924:	mov	x0, x19
    3928:	bl	0 <grub_free>
    392c:	ldp	x23, x24, [sp, #48]
    3930:	adrp	x0, 0 <grub_zstd_free>
    3934:	ldp	x21, x22, [sp, #32]
    3938:	ldr	x0, [x0]
    393c:	ldr	w20, [x0]
    3940:	mov	w0, w20
    3944:	ldp	x19, x20, [sp, #16]
    3948:	ldp	x29, x30, [sp], #320
    394c:	ret
    3950:	ldp	x23, x24, [sp, #48]
    3954:	b	3930 <grub_btrfs_open+0x2a0>
    3958:	adrp	x1, 0 <grub_zstd_free>
    395c:	mov	w0, #0x9                   	// #9
    3960:	ldr	x1, [x1]
    3964:	bl	0 <grub_error>
    3968:	b	3930 <grub_btrfs_open+0x2a0>
    396c:	add	w21, w21, #0x1
    3970:	cmp	w21, w2
    3974:	b.cc	38e8 <grub_btrfs_open+0x258>  // b.lo, b.ul, b.last
    3978:	mov	x0, x1
    397c:	b	3760 <grub_btrfs_open+0xd0>
    3980:	ldr	x1, [sp, #80]
    3984:	add	x2, sp, #0xa8
    3988:	mov	x0, x19
    398c:	mov	w4, #0x0                   	// #0
    3990:	mov	x3, #0x94                  	// #148
    3994:	bl	1218 <grub_btrfs_read_logical>
    3998:	mov	w20, w0
    399c:	b	389c <grub_btrfs_open+0x20c>
	...

00000000000039c0 <grub_mod_init>:
    39c0:	adrp	x1, 0 <grub_zstd_free>
    39c4:	adrp	x0, 0 <grub_zstd_free>
    39c8:	ldr	x1, [x1]
    39cc:	ldr	x0, [x0]
    39d0:	b	0 <grub_list_push>
    39d4:	nop
	...

00000000000039e8 <grub_mod_fini>:
    39e8:	adrp	x0, 0 <grub_zstd_free>
    39ec:	ldr	x0, [x0]
    39f0:	b	0 <grub_list_remove>
    39f4:	nop
	...

0000000000003a00 <grub_getcrc32c>:
    3a00:	adrp	x3, 0 <grub_zstd_free>
    3a04:	ldr	x9, [x3]
    3a08:	ldr	w3, [x9, #4]
    3a0c:	cbz	w3, 3a4c <grub_getcrc32c+0x4c>
    3a10:	cmp	w2, #0x0
    3a14:	mvn	w3, w0
    3a18:	b.le	3a48 <grub_getcrc32c+0x48>
    3a1c:	sub	w4, w2, #0x1
    3a20:	add	x4, x4, #0x1
    3a24:	add	x4, x1, x4
    3a28:	ldrb	w2, [x1], #1
    3a2c:	eor	x2, x3, x2
    3a30:	cmp	x1, x4
    3a34:	and	x2, x2, #0xff
    3a38:	ldr	w0, [x9, x2, lsl #2]
    3a3c:	eor	w3, w0, w3, lsr #8
    3a40:	b.ne	3a28 <grub_getcrc32c+0x28>  // b.any
    3a44:	mvn	w0, w3
    3a48:	ret
    3a4c:	mov	w5, #0x6f41                	// #28481
    3a50:	mov	x6, #0x0                   	// #0
    3a54:	movk	w5, #0x1edc, lsl #16
    3a58:	mov	w10, #0x1                   	// #1
    3a5c:	nop
    3a60:	mov	w3, w6
    3a64:	and	w8, w6, #0x1
    3a68:	mov	w4, #0x40                  	// #64
    3a6c:	tbz	w6, #0, 3a78 <grub_getcrc32c+0x78>
    3a70:	mov	w4, #0xc0                  	// #192
    3a74:	mov	w8, #0x80                  	// #128
    3a78:	tst	x3, #0x2
    3a7c:	mov	w7, #0x0                   	// #0
    3a80:	csel	w4, w4, w8, ne  // ne = any
    3a84:	tst	x3, #0x4
    3a88:	orr	w11, w4, #0x20
    3a8c:	mov	w8, #0x1f                  	// #31
    3a90:	csel	w4, w11, w4, ne  // ne = any
    3a94:	tst	x3, #0x8
    3a98:	orr	w11, w4, #0x10
    3a9c:	csel	w4, w11, w4, ne  // ne = any
    3aa0:	tst	x3, #0x10
    3aa4:	orr	w11, w4, #0x8
    3aa8:	csel	w4, w11, w4, ne  // ne = any
    3aac:	tst	x3, #0x20
    3ab0:	orr	w11, w4, #0x4
    3ab4:	csel	w4, w11, w4, ne  // ne = any
    3ab8:	tst	x3, #0x40
    3abc:	orr	w11, w4, #0x2
    3ac0:	csel	w4, w11, w4, ne  // ne = any
    3ac4:	cmp	wzr, w3, lsr #7
    3ac8:	orr	w3, w4, #0x1
    3acc:	csel	w4, w3, w4, ne  // ne = any
    3ad0:	lsl	w3, w4, #25
    3ad4:	tst	x4, #0x80
    3ad8:	eor	w4, w3, w5
    3adc:	csel	w3, w4, w3, ne  // ne = any
    3ae0:	cmp	w3, #0x0
    3ae4:	lsl	w3, w3, #1
    3ae8:	eor	w4, w3, w5
    3aec:	csel	w3, w4, w3, lt  // lt = tstop
    3af0:	cmp	w3, #0x0
    3af4:	lsl	w3, w3, #1
    3af8:	eor	w4, w3, w5
    3afc:	csel	w3, w4, w3, lt  // lt = tstop
    3b00:	cmp	w3, #0x0
    3b04:	lsl	w3, w3, #1
    3b08:	eor	w4, w3, w5
    3b0c:	csel	w3, w4, w3, lt  // lt = tstop
    3b10:	cmp	w3, #0x0
    3b14:	lsl	w3, w3, #1
    3b18:	eor	w4, w3, w5
    3b1c:	csel	w3, w4, w3, lt  // lt = tstop
    3b20:	cmp	w3, #0x0
    3b24:	lsl	w3, w3, #1
    3b28:	eor	w4, w3, w5
    3b2c:	csel	w3, w4, w3, lt  // lt = tstop
    3b30:	cmp	w3, #0x0
    3b34:	lsl	w3, w3, #1
    3b38:	eor	w4, w3, w5
    3b3c:	csel	w3, w4, w3, lt  // lt = tstop
    3b40:	cmp	w3, #0x0
    3b44:	lsl	w3, w3, #1
    3b48:	eor	w4, w3, w5
    3b4c:	csel	w3, w4, w3, lt  // lt = tstop
    3b50:	tst	x3, #0x1
    3b54:	lsl	w4, w10, w8
    3b58:	sub	w8, w8, #0x1
    3b5c:	orr	w4, w7, w4
    3b60:	csel	w7, w4, w7, ne  // ne = any
    3b64:	lsr	w3, w3, #1
    3b68:	cmn	w8, #0x1
    3b6c:	b.ne	3b50 <grub_getcrc32c+0x150>  // b.any
    3b70:	str	w7, [x9, x6, lsl #2]
    3b74:	add	x6, x6, #0x1
    3b78:	cmp	x6, #0x100
    3b7c:	b.ne	3a60 <grub_getcrc32c+0x60>  // b.any
    3b80:	b	3a10 <grub_getcrc32c+0x10>
    3b84:	nop
	...
