
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//macbless.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes16>:
   0:	sub	sp, sp, #0x10
   4:	strh	w0, [sp, #14]
   8:	ldrh	w0, [sp, #14]
   c:	lsl	w0, w0, #8
  10:	sxth	w1, w0
  14:	ldrh	w0, [sp, #14]
  18:	lsr	w0, w0, #8
  1c:	and	w0, w0, #0xffff
  20:	sxth	w0, w0
  24:	orr	w0, w1, w0
  28:	sxth	w0, w0
  2c:	and	w0, w0, #0xffff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <grub_swap_bytes32>:
  38:	sub	sp, sp, #0x10
  3c:	str	w0, [sp, #12]
  40:	ldr	w0, [sp, #12]
  44:	rev	w0, w0
  48:	add	sp, sp, #0x10
  4c:	ret

0000000000000050 <grub_tolower>:
  50:	sub	sp, sp, #0x10
  54:	str	w0, [sp, #12]
  58:	ldr	w0, [sp, #12]
  5c:	cmp	w0, #0x40
  60:	b.le	7c <grub_tolower+0x2c>
  64:	ldr	w0, [sp, #12]
  68:	cmp	w0, #0x5a
  6c:	b.gt	7c <grub_tolower+0x2c>
  70:	ldr	w0, [sp, #12]
  74:	add	w0, w0, #0x20
  78:	b	80 <grub_tolower+0x30>
  7c:	ldr	w0, [sp, #12]
  80:	add	sp, sp, #0x10
  84:	ret

0000000000000088 <grub_strcasecmp>:
  88:	stp	x29, x30, [sp, #-48]!
  8c:	mov	x29, sp
  90:	str	x19, [sp, #16]
  94:	str	x0, [sp, #40]
  98:	str	x1, [sp, #32]
  9c:	b	dc <grub_strcasecmp+0x54>
  a0:	ldr	x0, [sp, #40]
  a4:	ldrb	w0, [x0]
  a8:	bl	50 <grub_tolower>
  ac:	mov	w19, w0
  b0:	ldr	x0, [sp, #32]
  b4:	ldrb	w0, [x0]
  b8:	bl	50 <grub_tolower>
  bc:	cmp	w19, w0
  c0:	b.ne	100 <grub_strcasecmp+0x78>  // b.any
  c4:	ldr	x0, [sp, #40]
  c8:	add	x0, x0, #0x1
  cc:	str	x0, [sp, #40]
  d0:	ldr	x0, [sp, #32]
  d4:	add	x0, x0, #0x1
  d8:	str	x0, [sp, #32]
  dc:	ldr	x0, [sp, #40]
  e0:	ldrb	w0, [x0]
  e4:	cmp	w0, #0x0
  e8:	b.eq	104 <grub_strcasecmp+0x7c>  // b.none
  ec:	ldr	x0, [sp, #32]
  f0:	ldrb	w0, [x0]
  f4:	cmp	w0, #0x0
  f8:	b.ne	a0 <grub_strcasecmp+0x18>  // b.any
  fc:	b	104 <grub_strcasecmp+0x7c>
 100:	nop
 104:	ldr	x0, [sp, #40]
 108:	ldrb	w0, [x0]
 10c:	bl	50 <grub_tolower>
 110:	mov	w19, w0
 114:	ldr	x0, [sp, #32]
 118:	ldrb	w0, [x0]
 11c:	bl	50 <grub_tolower>
 120:	sub	w0, w19, w0
 124:	ldr	x19, [sp, #16]
 128:	ldp	x29, x30, [sp], #48
 12c:	ret

0000000000000130 <grub_register_command>:
 130:	stp	x29, x30, [sp, #-48]!
 134:	mov	x29, sp
 138:	str	x0, [sp, #40]
 13c:	str	x1, [sp, #32]
 140:	str	x2, [sp, #24]
 144:	str	x3, [sp, #16]
 148:	mov	w4, #0x0                   	// #0
 14c:	ldr	x3, [sp, #16]
 150:	ldr	x2, [sp, #24]
 154:	ldr	x1, [sp, #32]
 158:	ldr	x0, [sp, #40]
 15c:	bl	0 <grub_register_command_prio>
 160:	ldp	x29, x30, [sp], #48
 164:	ret

0000000000000168 <find_inode>:
 168:	stp	x29, x30, [sp, #-64]!
 16c:	mov	x29, sp
 170:	str	x0, [sp, #40]
 174:	str	x1, [sp, #32]
 178:	str	x2, [sp, #24]
 17c:	ldr	x0, [sp, #24]
 180:	str	x0, [sp, #56]
 184:	ldr	x0, [sp, #32]
 188:	ldrb	w0, [x0]
 18c:	and	w0, w0, #0x8
 190:	and	w0, w0, #0xff
 194:	cmp	w0, #0x0
 198:	b.ne	1a4 <find_inode+0x3c>  // b.any
 19c:	mov	w0, #0x0                   	// #0
 1a0:	b	22c <find_inode+0xc4>
 1a4:	ldr	x0, [sp, #56]
 1a8:	ldr	x0, [x0, #8]
 1ac:	ldr	x1, [sp, #40]
 1b0:	bl	0 <grub_strcmp>
 1b4:	cmp	w0, #0x0
 1b8:	b.eq	1ec <find_inode+0x84>  // b.none
 1bc:	ldr	x0, [sp, #32]
 1c0:	ldrb	w0, [x0]
 1c4:	and	w0, w0, #0x4
 1c8:	and	w0, w0, #0xff
 1cc:	cmp	w0, #0x0
 1d0:	b.eq	228 <find_inode+0xc0>  // b.none
 1d4:	ldr	x0, [sp, #56]
 1d8:	ldr	x0, [x0, #8]
 1dc:	ldr	x1, [sp, #40]
 1e0:	bl	88 <grub_strcasecmp>
 1e4:	cmp	w0, #0x0
 1e8:	b.ne	228 <find_inode+0xc0>  // b.any
 1ec:	ldr	x0, [sp, #32]
 1f0:	ldr	x1, [x0, #8]
 1f4:	ldr	x0, [sp, #56]
 1f8:	str	x1, [x0]
 1fc:	ldr	x0, [sp, #32]
 200:	ldrb	w0, [x0]
 204:	and	w0, w0, #0x1
 208:	and	w0, w0, #0xff
 20c:	cmp	w0, #0x0
 210:	b.eq	21c <find_inode+0xb4>  // b.none
 214:	mov	w0, #0x2                   	// #2
 218:	b	220 <find_inode+0xb8>
 21c:	mov	w0, #0x1                   	// #1
 220:	ldr	x1, [sp, #56]
 224:	str	w0, [x1, #16]
 228:	mov	w0, #0x0                   	// #0
 22c:	ldp	x29, x30, [sp], #64
 230:	ret

0000000000000234 <grub_mac_bless_inode>:
 234:	sub	sp, sp, #0x250
 238:	stp	x29, x30, [sp]
 23c:	mov	x29, sp
 240:	str	x0, [sp, #40]
 244:	str	w1, [sp, #36]
 248:	str	w2, [sp, #32]
 24c:	str	w3, [sp, #28]
 250:	ldr	w0, [sp, #28]
 254:	cmp	w0, #0x0
 258:	b.eq	280 <grub_mac_bless_inode+0x4c>  // b.none
 25c:	ldr	w0, [sp, #32]
 260:	cmp	w0, #0x0
 264:	b.eq	280 <grub_mac_bless_inode+0x4c>  // b.none
 268:	adrp	x0, 0 <grub_swap_bytes16>
 26c:	add	x0, x0, #0x0
 270:	ldr	x1, [x0]
 274:	mov	w0, #0x12                  	// #18
 278:	bl	0 <grub_error>
 27c:	b	478 <grub_mac_bless_inode+0x244>
 280:	ldr	w0, [sp, #28]
 284:	cmp	w0, #0x0
 288:	b.ne	2b0 <grub_mac_bless_inode+0x7c>  // b.any
 28c:	ldr	w0, [sp, #32]
 290:	cmp	w0, #0x0
 294:	b.ne	2b0 <grub_mac_bless_inode+0x7c>  // b.any
 298:	adrp	x0, 0 <grub_swap_bytes16>
 29c:	add	x0, x0, #0x0
 2a0:	ldr	x1, [x0]
 2a4:	mov	w0, #0x18                  	// #24
 2a8:	bl	0 <grub_error>
 2ac:	b	478 <grub_mac_bless_inode+0x244>
 2b0:	ldr	x0, [sp, #40]
 2b4:	ldr	x0, [x0]
 2b8:	add	x1, sp, #0x38
 2bc:	mov	x4, x1
 2c0:	mov	x3, #0x200                 	// #512
 2c4:	mov	x2, #0x0                   	// #0
 2c8:	mov	x1, #0x2                   	// #2
 2cc:	bl	0 <grub_disk_read>
 2d0:	str	w0, [sp, #580]
 2d4:	ldr	w0, [sp, #580]
 2d8:	cmp	w0, #0x0
 2dc:	b.eq	2e8 <grub_mac_bless_inode+0xb4>  // b.none
 2e0:	ldr	w0, [sp, #580]
 2e4:	b	478 <grub_mac_bless_inode+0x244>
 2e8:	str	xzr, [sp, #584]
 2ec:	ldrh	w0, [sp, #56]
 2f0:	bl	0 <grub_swap_bytes16>
 2f4:	and	w1, w0, #0xffff
 2f8:	mov	w0, #0x4244                	// #16964
 2fc:	cmp	w1, w0
 300:	b.ne	3dc <grub_mac_bless_inode+0x1a8>  // b.any
 304:	ldrh	w0, [sp, #180]
 308:	bl	0 <grub_swap_bytes16>
 30c:	and	w1, w0, #0xffff
 310:	mov	w0, #0x482b                	// #18475
 314:	cmp	w1, w0
 318:	b.eq	34c <grub_mac_bless_inode+0x118>  // b.none
 31c:	ldr	w0, [sp, #28]
 320:	cmp	w0, #0x0
 324:	b.eq	338 <grub_mac_bless_inode+0x104>  // b.none
 328:	ldr	w0, [sp, #36]
 32c:	bl	38 <grub_swap_bytes32>
 330:	str	w0, [sp, #152]
 334:	b	344 <grub_mac_bless_inode+0x110>
 338:	ldr	w0, [sp, #36]
 33c:	bl	38 <grub_swap_bytes32>
 340:	str	w0, [sp, #148]
 344:	mov	w0, #0x0                   	// #0
 348:	b	478 <grub_mac_bless_inode+0x244>
 34c:	ldrh	w0, [sp, #182]
 350:	bl	0 <grub_swap_bytes16>
 354:	and	w0, w0, #0xffff
 358:	str	w0, [sp, #576]
 35c:	ldr	w0, [sp, #76]
 360:	bl	38 <grub_swap_bytes32>
 364:	str	w0, [sp, #572]
 368:	ldrh	w0, [sp, #84]
 36c:	bl	0 <grub_swap_bytes16>
 370:	and	w0, w0, #0xffff
 374:	str	w0, [sp, #568]
 378:	ldrsw	x1, [sp, #568]
 37c:	ldrsw	x2, [sp, #576]
 380:	ldr	w0, [sp, #572]
 384:	asr	w0, w0, #9
 388:	sxtw	x0, w0
 38c:	mul	x0, x2, x0
 390:	add	x0, x1, x0
 394:	str	x0, [sp, #584]
 398:	ldr	x0, [sp, #40]
 39c:	ldr	x5, [x0]
 3a0:	ldr	x0, [sp, #584]
 3a4:	add	x0, x0, #0x2
 3a8:	add	x1, sp, #0x38
 3ac:	mov	x4, x1
 3b0:	mov	x3, #0x200                 	// #512
 3b4:	mov	x2, #0x0                   	// #0
 3b8:	mov	x1, x0
 3bc:	mov	x0, x5
 3c0:	bl	0 <grub_disk_read>
 3c4:	str	w0, [sp, #580]
 3c8:	ldr	w0, [sp, #580]
 3cc:	cmp	w0, #0x0
 3d0:	b.eq	3dc <grub_mac_bless_inode+0x1a8>  // b.none
 3d4:	ldr	w0, [sp, #580]
 3d8:	b	478 <grub_mac_bless_inode+0x244>
 3dc:	ldrh	w0, [sp, #56]
 3e0:	bl	0 <grub_swap_bytes16>
 3e4:	and	w1, w0, #0xffff
 3e8:	mov	w0, #0x482b                	// #18475
 3ec:	cmp	w1, w0
 3f0:	b.eq	424 <grub_mac_bless_inode+0x1f0>  // b.none
 3f4:	ldrh	w0, [sp, #56]
 3f8:	bl	0 <grub_swap_bytes16>
 3fc:	and	w1, w0, #0xffff
 400:	mov	w0, #0x4858                	// #18520
 404:	cmp	w1, w0
 408:	b.eq	424 <grub_mac_bless_inode+0x1f0>  // b.none
 40c:	adrp	x0, 0 <grub_swap_bytes16>
 410:	add	x0, x0, #0x0
 414:	ldr	x1, [x0]
 418:	mov	w0, #0x9                   	// #9
 41c:	bl	0 <grub_error>
 420:	b	478 <grub_mac_bless_inode+0x244>
 424:	ldr	w0, [sp, #28]
 428:	cmp	w0, #0x0
 42c:	b.eq	440 <grub_mac_bless_inode+0x20c>  // b.none
 430:	ldr	w0, [sp, #36]
 434:	bl	38 <grub_swap_bytes32>
 438:	str	w0, [sp, #140]
 43c:	b	44c <grub_mac_bless_inode+0x218>
 440:	ldr	w0, [sp, #36]
 444:	bl	38 <grub_swap_bytes32>
 448:	str	w0, [sp, #136]
 44c:	ldr	x0, [sp, #40]
 450:	ldr	x5, [x0]
 454:	ldr	x0, [sp, #584]
 458:	add	x0, x0, #0x2
 45c:	add	x1, sp, #0x38
 460:	mov	x4, x1
 464:	mov	x3, #0x200                 	// #512
 468:	mov	x2, #0x0                   	// #0
 46c:	mov	x1, x0
 470:	mov	x0, x5
 474:	bl	0 <grub_disk_write>
 478:	ldp	x29, x30, [sp]
 47c:	add	sp, sp, #0x250
 480:	ret
 484:	nop
	...

00000000000004a0 <grub_mac_bless_file>:
 4a0:	stp	x29, x30, [sp, #-96]!
 4a4:	mov	x29, sp
 4a8:	str	x0, [sp, #40]
 4ac:	str	x1, [sp, #32]
 4b0:	str	w2, [sp, #28]
 4b4:	ldr	x0, [sp, #40]
 4b8:	bl	0 <grub_fs_probe>
 4bc:	str	x0, [sp, #80]
 4c0:	ldr	x0, [sp, #80]
 4c4:	cmp	x0, #0x0
 4c8:	b.eq	514 <grub_mac_bless_file+0x74>  // b.none
 4cc:	ldr	x0, [sp, #80]
 4d0:	ldr	x2, [x0, #16]
 4d4:	adrp	x0, 0 <grub_swap_bytes16>
 4d8:	add	x0, x0, #0x0
 4dc:	ldr	x1, [x0]
 4e0:	mov	x0, x2
 4e4:	bl	0 <grub_strcmp>
 4e8:	cmp	w0, #0x0
 4ec:	b.eq	52c <grub_mac_bless_file+0x8c>  // b.none
 4f0:	ldr	x0, [sp, #80]
 4f4:	ldr	x2, [x0, #16]
 4f8:	adrp	x0, 0 <grub_swap_bytes16>
 4fc:	add	x0, x0, #0x0
 500:	ldr	x1, [x0]
 504:	mov	x0, x2
 508:	bl	0 <grub_strcmp>
 50c:	cmp	w0, #0x0
 510:	b.eq	52c <grub_mac_bless_file+0x8c>  // b.none
 514:	adrp	x0, 0 <grub_swap_bytes16>
 518:	add	x0, x0, #0x0
 51c:	ldr	x1, [x0]
 520:	mov	w0, #0x9                   	// #9
 524:	bl	0 <grub_error>
 528:	b	6c4 <grub_mac_bless_file+0x224>
 52c:	ldr	x0, [sp, #32]
 530:	bl	0 <grub_strdup>
 534:	str	x0, [sp, #72]
 538:	ldr	x0, [sp, #72]
 53c:	cmp	x0, #0x0
 540:	b.ne	558 <grub_mac_bless_file+0xb8>  // b.any
 544:	adrp	x0, 0 <grub_swap_bytes16>
 548:	add	x0, x0, #0x0
 54c:	ldr	x0, [x0]
 550:	ldr	w0, [x0]
 554:	b	6c4 <grub_mac_bless_file+0x224>
 558:	ldr	x0, [sp, #72]
 55c:	bl	0 <grub_strlen>
 560:	sub	x0, x0, #0x1
 564:	ldr	x1, [sp, #72]
 568:	add	x0, x1, x0
 56c:	str	x0, [sp, #88]
 570:	b	584 <grub_mac_bless_file+0xe4>
 574:	ldr	x0, [sp, #88]
 578:	sub	x1, x0, #0x1
 57c:	str	x1, [sp, #88]
 580:	strb	wzr, [x0]
 584:	ldr	x1, [sp, #88]
 588:	ldr	x0, [sp, #72]
 58c:	cmp	x1, x0
 590:	b.eq	5a4 <grub_mac_bless_file+0x104>  // b.none
 594:	ldr	x0, [sp, #88]
 598:	ldrb	w0, [x0]
 59c:	cmp	w0, #0x2f
 5a0:	b.eq	574 <grub_mac_bless_file+0xd4>  // b.none
 5a4:	mov	w1, #0x2f                  	// #47
 5a8:	ldr	x0, [sp, #72]
 5ac:	bl	0 <grub_strrchr>
 5b0:	str	x0, [sp, #88]
 5b4:	str	wzr, [sp, #64]
 5b8:	ldr	x0, [sp, #88]
 5bc:	cmp	x0, #0x0
 5c0:	b.eq	628 <grub_mac_bless_file+0x188>  // b.none
 5c4:	ldr	x0, [sp, #88]
 5c8:	strb	wzr, [x0]
 5cc:	ldr	x0, [sp, #88]
 5d0:	add	x0, x0, #0x1
 5d4:	str	x0, [sp, #56]
 5d8:	ldr	x0, [sp, #80]
 5dc:	ldr	x4, [x0, #24]
 5e0:	ldr	x0, [sp, #72]
 5e4:	ldrb	w0, [x0]
 5e8:	cmp	w0, #0x0
 5ec:	b.eq	5f8 <grub_mac_bless_file+0x158>  // b.none
 5f0:	ldr	x0, [sp, #72]
 5f4:	b	604 <grub_mac_bless_file+0x164>
 5f8:	adrp	x0, 0 <grub_swap_bytes16>
 5fc:	add	x0, x0, #0x0
 600:	ldr	x0, [x0]
 604:	add	x1, sp, #0x30
 608:	mov	x3, x1
 60c:	adrp	x1, 0 <grub_swap_bytes16>
 610:	add	x1, x1, #0x0
 614:	ldr	x2, [x1]
 618:	mov	x1, x0
 61c:	ldr	x0, [sp, #40]
 620:	blr	x4
 624:	b	664 <grub_mac_bless_file+0x1c4>
 628:	ldr	x0, [sp, #72]
 62c:	add	x0, x0, #0x1
 630:	str	x0, [sp, #56]
 634:	ldr	x0, [sp, #80]
 638:	ldr	x4, [x0, #24]
 63c:	add	x0, sp, #0x30
 640:	mov	x3, x0
 644:	adrp	x0, 0 <grub_swap_bytes16>
 648:	add	x0, x0, #0x0
 64c:	ldr	x2, [x0]
 650:	adrp	x0, 0 <grub_swap_bytes16>
 654:	add	x0, x0, #0x0
 658:	ldr	x1, [x0]
 65c:	ldr	x0, [sp, #40]
 660:	blr	x4
 664:	ldr	w0, [sp, #64]
 668:	cmp	w0, #0x0
 66c:	b.ne	694 <grub_mac_bless_file+0x1f4>  // b.any
 670:	ldr	x0, [sp, #72]
 674:	bl	0 <grub_free>
 678:	ldr	x2, [sp, #32]
 67c:	adrp	x0, 0 <grub_swap_bytes16>
 680:	add	x0, x0, #0x0
 684:	ldr	x1, [x0]
 688:	mov	w0, #0x5                   	// #5
 68c:	bl	0 <grub_error>
 690:	b	6c4 <grub_mac_bless_file+0x224>
 694:	ldr	x0, [sp, #72]
 698:	bl	0 <grub_free>
 69c:	ldr	x0, [sp, #48]
 6a0:	mov	w1, w0
 6a4:	ldr	w0, [sp, #64]
 6a8:	cmp	w0, #0x2
 6ac:	cset	w0, eq  // eq = none
 6b0:	and	w0, w0, #0xff
 6b4:	ldr	w3, [sp, #28]
 6b8:	mov	w2, w0
 6bc:	ldr	x0, [sp, #40]
 6c0:	bl	234 <grub_mac_bless_inode>
 6c4:	ldp	x29, x30, [sp], #96
 6c8:	ret
 6cc:	nop
	...

0000000000000708 <grub_cmd_macbless>:
 708:	stp	x29, x30, [sp, #-80]!
 70c:	mov	x29, sp
 710:	str	x0, [sp, #40]
 714:	str	w1, [sp, #36]
 718:	str	x2, [sp, #24]
 71c:	str	xzr, [sp, #72]
 720:	str	xzr, [sp, #64]
 724:	ldr	w0, [sp, #36]
 728:	cmp	w0, #0x1
 72c:	b.eq	748 <grub_cmd_macbless+0x40>  // b.none
 730:	adrp	x0, 0 <grub_swap_bytes16>
 734:	add	x0, x0, #0x0
 738:	ldr	x1, [x0]
 73c:	mov	w0, #0x12                  	// #18
 740:	bl	0 <grub_error>
 744:	b	840 <grub_cmd_macbless+0x138>
 748:	ldr	x0, [sp, #24]
 74c:	ldr	x0, [x0]
 750:	bl	0 <grub_file_get_device_name>
 754:	str	x0, [sp, #56]
 758:	ldr	x0, [sp, #56]
 75c:	bl	0 <grub_device_open>
 760:	str	x0, [sp, #64]
 764:	ldr	x0, [sp, #24]
 768:	ldr	x0, [x0]
 76c:	mov	w1, #0x29                  	// #41
 770:	bl	0 <grub_strchr>
 774:	str	x0, [sp, #72]
 778:	ldr	x0, [sp, #72]
 77c:	cmp	x0, #0x0
 780:	b.ne	794 <grub_cmd_macbless+0x8c>  // b.any
 784:	ldr	x0, [sp, #24]
 788:	ldr	x0, [x0]
 78c:	str	x0, [sp, #72]
 790:	b	7a0 <grub_cmd_macbless+0x98>
 794:	ldr	x0, [sp, #72]
 798:	add	x0, x0, #0x1
 79c:	str	x0, [sp, #72]
 7a0:	ldr	x0, [sp, #72]
 7a4:	cmp	x0, #0x0
 7a8:	b.eq	7c8 <grub_cmd_macbless+0xc0>  // b.none
 7ac:	ldr	x0, [sp, #72]
 7b0:	ldrb	w0, [x0]
 7b4:	cmp	w0, #0x0
 7b8:	b.eq	7c8 <grub_cmd_macbless+0xc0>  // b.none
 7bc:	ldr	x0, [sp, #64]
 7c0:	cmp	x0, #0x0
 7c4:	b.ne	7fc <grub_cmd_macbless+0xf4>  // b.any
 7c8:	ldr	x0, [sp, #64]
 7cc:	cmp	x0, #0x0
 7d0:	b.eq	7dc <grub_cmd_macbless+0xd4>  // b.none
 7d4:	ldr	x0, [sp, #64]
 7d8:	bl	0 <grub_device_close>
 7dc:	ldr	x0, [sp, #56]
 7e0:	bl	0 <grub_free>
 7e4:	adrp	x0, 0 <grub_swap_bytes16>
 7e8:	add	x0, x0, #0x0
 7ec:	ldr	x1, [x0]
 7f0:	mov	w0, #0x12                  	// #18
 7f4:	bl	0 <grub_error>
 7f8:	b	840 <grub_cmd_macbless+0x138>
 7fc:	ldr	x0, [sp, #40]
 800:	ldr	x0, [x0, #16]
 804:	add	x0, x0, #0x3
 808:	ldrb	w0, [x0]
 80c:	cmp	w0, #0x74
 810:	cset	w0, eq  // eq = none
 814:	and	w0, w0, #0xff
 818:	mov	w2, w0
 81c:	ldr	x1, [sp, #72]
 820:	ldr	x0, [sp, #64]
 824:	bl	4a0 <grub_mac_bless_file>
 828:	str	w0, [sp, #52]
 82c:	ldr	x0, [sp, #64]
 830:	bl	0 <grub_device_close>
 834:	ldr	x0, [sp, #56]
 838:	bl	0 <grub_free>
 83c:	ldr	w0, [sp, #52]
 840:	ldp	x29, x30, [sp], #80
 844:	ret
	...

0000000000000858 <grub_mod_init>:
 858:	stp	x29, x30, [sp, #-32]!
 85c:	mov	x29, sp
 860:	str	x0, [sp, #24]
 864:	adrp	x0, 0 <grub_swap_bytes16>
 868:	add	x0, x0, #0x0
 86c:	ldr	x3, [x0]
 870:	adrp	x0, 0 <grub_swap_bytes16>
 874:	add	x0, x0, #0x0
 878:	ldr	x2, [x0]
 87c:	adrp	x0, 0 <grub_swap_bytes16>
 880:	add	x0, x0, #0x0
 884:	ldr	x1, [x0]
 888:	adrp	x0, 0 <grub_swap_bytes16>
 88c:	add	x0, x0, #0x0
 890:	ldr	x0, [x0]
 894:	bl	130 <grub_register_command>
 898:	mov	x1, x0
 89c:	adrp	x0, 0 <grub_swap_bytes16>
 8a0:	add	x0, x0, #0x0
 8a4:	ldr	x0, [x0]
 8a8:	str	x1, [x0]
 8ac:	adrp	x0, 0 <grub_swap_bytes16>
 8b0:	add	x0, x0, #0x0
 8b4:	ldr	x3, [x0]
 8b8:	adrp	x0, 0 <grub_swap_bytes16>
 8bc:	add	x0, x0, #0x0
 8c0:	ldr	x2, [x0]
 8c4:	adrp	x0, 0 <grub_swap_bytes16>
 8c8:	add	x0, x0, #0x0
 8cc:	ldr	x1, [x0]
 8d0:	adrp	x0, 0 <grub_swap_bytes16>
 8d4:	add	x0, x0, #0x0
 8d8:	ldr	x0, [x0]
 8dc:	bl	130 <grub_register_command>
 8e0:	mov	x1, x0
 8e4:	adrp	x0, 0 <grub_swap_bytes16>
 8e8:	add	x0, x0, #0x0
 8ec:	ldr	x0, [x0]
 8f0:	str	x1, [x0]
 8f4:	nop
 8f8:	ldp	x29, x30, [sp], #32
 8fc:	ret
	...

0000000000000948 <grub_mod_fini>:
 948:	stp	x29, x30, [sp, #-16]!
 94c:	mov	x29, sp
 950:	adrp	x0, 0 <grub_swap_bytes16>
 954:	add	x0, x0, #0x0
 958:	ldr	x0, [x0]
 95c:	ldr	x0, [x0]
 960:	bl	0 <grub_unregister_command>
 964:	adrp	x0, 0 <grub_swap_bytes16>
 968:	add	x0, x0, #0x0
 96c:	ldr	x0, [x0]
 970:	ldr	x0, [x0]
 974:	bl	0 <grub_unregister_command>
 978:	nop
 97c:	ldp	x29, x30, [sp], #16
 980:	ret
 984:	nop
	...
