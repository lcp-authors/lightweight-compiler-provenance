
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//crc64.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <reflect>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	str	xzr, [sp, #24]
  10:	mov	w0, #0x1                   	// #1
  14:	str	w0, [sp, #20]
  18:	b	64 <reflect+0x64>
  1c:	ldr	x0, [sp, #8]
  20:	and	x0, x0, #0x1
  24:	cmp	x0, #0x0
  28:	b.eq	4c <reflect+0x4c>  // b.none
  2c:	ldr	w1, [sp, #4]
  30:	ldr	w0, [sp, #20]
  34:	sub	w0, w1, w0
  38:	mov	x1, #0x1                   	// #1
  3c:	lsl	x0, x1, x0
  40:	ldr	x1, [sp, #24]
  44:	orr	x0, x1, x0
  48:	str	x0, [sp, #24]
  4c:	ldr	x0, [sp, #8]
  50:	lsr	x0, x0, #1
  54:	str	x0, [sp, #8]
  58:	ldr	w0, [sp, #20]
  5c:	add	w0, w0, #0x1
  60:	str	w0, [sp, #20]
  64:	ldr	w1, [sp, #20]
  68:	ldr	w0, [sp, #4]
  6c:	cmp	w1, w0
  70:	b.le	1c <reflect+0x1c>
  74:	ldr	x0, [sp, #24]
  78:	add	sp, sp, #0x20
  7c:	ret

0000000000000080 <init_crc64_table>:
  80:	stp	x29, x30, [sp, #-32]!
  84:	mov	x29, sp
  88:	mov	x0, #0x3693                	// #13971
  8c:	movk	x0, #0xa9ea, lsl #16
  90:	movk	x0, #0xe1eb, lsl #32
  94:	movk	x0, #0x42f0, lsl #48
  98:	str	x0, [sp, #16]
  9c:	str	wzr, [sp, #28]
  a0:	b	180 <init_crc64_table+0x100>
  a4:	ldrsw	x0, [sp, #28]
  a8:	mov	w1, #0x8                   	// #8
  ac:	bl	0 <reflect>
  b0:	lsl	x2, x0, #56
  b4:	adrp	x0, 0 <reflect>
  b8:	add	x0, x0, #0x0
  bc:	ldr	x0, [x0]
  c0:	ldrsw	x1, [sp, #28]
  c4:	str	x2, [x0, x1, lsl #3]
  c8:	str	wzr, [sp, #24]
  cc:	b	134 <init_crc64_table+0xb4>
  d0:	adrp	x0, 0 <reflect>
  d4:	add	x0, x0, #0x0
  d8:	ldr	x0, [x0]
  dc:	ldrsw	x1, [sp, #28]
  e0:	ldr	x0, [x0, x1, lsl #3]
  e4:	lsl	x1, x0, #1
  e8:	adrp	x0, 0 <reflect>
  ec:	add	x0, x0, #0x0
  f0:	ldr	x0, [x0]
  f4:	ldrsw	x2, [sp, #28]
  f8:	ldr	x0, [x0, x2, lsl #3]
  fc:	cmp	x0, #0x0
 100:	b.ge	10c <init_crc64_table+0x8c>  // b.tcont
 104:	ldr	x0, [sp, #16]
 108:	b	110 <init_crc64_table+0x90>
 10c:	mov	x0, #0x0                   	// #0
 110:	eor	x2, x0, x1
 114:	adrp	x0, 0 <reflect>
 118:	add	x0, x0, #0x0
 11c:	ldr	x0, [x0]
 120:	ldrsw	x1, [sp, #28]
 124:	str	x2, [x0, x1, lsl #3]
 128:	ldr	w0, [sp, #24]
 12c:	add	w0, w0, #0x1
 130:	str	w0, [sp, #24]
 134:	ldr	w0, [sp, #24]
 138:	cmp	w0, #0x7
 13c:	b.le	d0 <init_crc64_table+0x50>
 140:	adrp	x0, 0 <reflect>
 144:	add	x0, x0, #0x0
 148:	ldr	x0, [x0]
 14c:	ldrsw	x1, [sp, #28]
 150:	ldr	x0, [x0, x1, lsl #3]
 154:	mov	w1, #0x40                  	// #64
 158:	bl	0 <reflect>
 15c:	mov	x2, x0
 160:	adrp	x0, 0 <reflect>
 164:	add	x0, x0, #0x0
 168:	ldr	x0, [x0]
 16c:	ldrsw	x1, [sp, #28]
 170:	str	x2, [x0, x1, lsl #3]
 174:	ldr	w0, [sp, #28]
 178:	add	w0, w0, #0x1
 17c:	str	w0, [sp, #28]
 180:	ldr	w0, [sp, #28]
 184:	cmp	w0, #0xff
 188:	b.le	a4 <init_crc64_table+0x24>
 18c:	nop
 190:	nop
 194:	ldp	x29, x30, [sp], #32
 198:	ret
 19c:	nop
	...

00000000000001a8 <crc64_init>:
 1a8:	stp	x29, x30, [sp, #-32]!
 1ac:	mov	x29, sp
 1b0:	str	x0, [sp, #24]
 1b4:	adrp	x0, 0 <reflect>
 1b8:	add	x0, x0, #0x0
 1bc:	ldr	x0, [x0]
 1c0:	ldr	x0, [x0, #8]
 1c4:	cmp	x0, #0x0
 1c8:	b.ne	1d0 <crc64_init+0x28>  // b.any
 1cc:	bl	80 <init_crc64_table>
 1d0:	ldr	x0, [sp, #24]
 1d4:	str	xzr, [x0]
 1d8:	nop
 1dc:	ldp	x29, x30, [sp], #32
 1e0:	ret
 1e4:	nop
	...

00000000000001f0 <crc64_write>:
 1f0:	sub	sp, sp, #0x40
 1f4:	str	x0, [sp, #24]
 1f8:	str	x1, [sp, #16]
 1fc:	str	x2, [sp, #8]
 200:	ldr	x0, [sp, #16]
 204:	str	x0, [sp, #48]
 208:	ldr	x0, [sp, #24]
 20c:	ldr	x0, [x0]
 210:	mvn	x0, x0
 214:	str	x0, [sp, #40]
 218:	str	wzr, [sp, #60]
 21c:	b	270 <crc64_write+0x80>
 220:	ldr	x0, [sp, #40]
 224:	lsr	x1, x0, #8
 228:	ldr	x0, [sp, #40]
 22c:	and	x2, x0, #0xff
 230:	ldr	x0, [sp, #48]
 234:	ldrb	w0, [x0]
 238:	and	x0, x0, #0xff
 23c:	eor	x2, x2, x0
 240:	adrp	x0, 0 <reflect>
 244:	add	x0, x0, #0x0
 248:	ldr	x0, [x0]
 24c:	ldr	x0, [x0, x2, lsl #3]
 250:	eor	x0, x1, x0
 254:	str	x0, [sp, #40]
 258:	ldr	x0, [sp, #48]
 25c:	add	x0, x0, #0x1
 260:	str	x0, [sp, #48]
 264:	ldr	w0, [sp, #60]
 268:	add	w0, w0, #0x1
 26c:	str	w0, [sp, #60]
 270:	ldr	w0, [sp, #60]
 274:	ldr	x1, [sp, #8]
 278:	cmp	x1, x0
 27c:	b.hi	220 <crc64_write+0x30>  // b.pmore
 280:	ldr	x0, [sp, #40]
 284:	mvn	x1, x0
 288:	ldr	x0, [sp, #24]
 28c:	str	x1, [x0]
 290:	nop
 294:	add	sp, sp, #0x40
 298:	ret
 29c:	nop
	...

00000000000002a8 <crc64_read>:
 2a8:	sub	sp, sp, #0x10
 2ac:	str	x0, [sp, #8]
 2b0:	ldr	x0, [sp, #8]
 2b4:	add	sp, sp, #0x10
 2b8:	ret

00000000000002bc <crc64_final>:
 2bc:	sub	sp, sp, #0x10
 2c0:	str	x0, [sp, #8]
 2c4:	nop
 2c8:	add	sp, sp, #0x10
 2cc:	ret

00000000000002d0 <grub_mod_init>:
 2d0:	stp	x29, x30, [sp, #-32]!
 2d4:	mov	x29, sp
 2d8:	str	x0, [sp, #24]
 2dc:	adrp	x0, 0 <reflect>
 2e0:	add	x0, x0, #0x0
 2e4:	ldr	x0, [x0]
 2e8:	bl	0 <grub_md_register>
 2ec:	nop
 2f0:	ldp	x29, x30, [sp], #32
 2f4:	ret
	...

0000000000000300 <grub_mod_fini>:
 300:	stp	x29, x30, [sp, #-16]!
 304:	mov	x29, sp
 308:	adrp	x0, 0 <reflect>
 30c:	add	x0, x0, #0x0
 310:	ldr	x0, [x0]
 314:	bl	0 <grub_md_unregister>
 318:	nop
 31c:	ldp	x29, x30, [sp], #16
 320:	ret
 324:	nop
	...
