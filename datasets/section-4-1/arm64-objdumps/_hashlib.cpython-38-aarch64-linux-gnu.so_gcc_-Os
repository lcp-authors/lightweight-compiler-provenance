
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_hashlib.cpython-38-aarch64-linux-gnu.so_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000024e0 <.init>:
    24e0:	stp	x29, x30, [sp, #-16]!
    24e4:	mov	x29, sp
    24e8:	bl	29d0 <PyThread_acquire_lock@plt+0x10>
    24ec:	ldp	x29, x30, [sp], #16
    24f0:	ret

Disassembly of section .plt:

0000000000002500 <PyModule_AddObject@plt-0x20>:
    2500:	stp	x16, x30, [sp, #-16]!
    2504:	adrp	x16, 15000 <PyInit__hashlib@@Base+0x109b4>
    2508:	ldr	x17, [x16, #4088]
    250c:	add	x16, x16, #0xff8
    2510:	br	x17
    2514:	nop
    2518:	nop
    251c:	nop

0000000000002520 <PyModule_AddObject@plt>:
    2520:	adrp	x16, 16000 <PyModule_AddObject>
    2524:	ldr	x17, [x16]
    2528:	add	x16, x16, #0x0
    252c:	br	x17

0000000000002530 <EVP_MD_type@plt>:
    2530:	adrp	x16, 16000 <PyModule_AddObject>
    2534:	ldr	x17, [x16, #8]
    2538:	add	x16, x16, #0x8
    253c:	br	x17

0000000000002540 <PKCS5_PBKDF2_HMAC@plt>:
    2540:	adrp	x16, 16000 <PyModule_AddObject>
    2544:	ldr	x17, [x16, #16]
    2548:	add	x16, x16, #0x10
    254c:	br	x17

0000000000002550 <EVP_DigestInit_ex@plt>:
    2550:	adrp	x16, 16000 <PyModule_AddObject>
    2554:	ldr	x17, [x16, #24]
    2558:	add	x16, x16, #0x18
    255c:	br	x17

0000000000002560 <ERR_reason_error_string@plt>:
    2560:	adrp	x16, 16000 <PyModule_AddObject>
    2564:	ldr	x17, [x16, #32]
    2568:	add	x16, x16, #0x20
    256c:	br	x17

0000000000002570 <EVP_sha512_224@plt>:
    2570:	adrp	x16, 16000 <PyModule_AddObject>
    2574:	ldr	x17, [x16, #40]
    2578:	add	x16, x16, #0x28
    257c:	br	x17

0000000000002580 <EVP_blake2s256@plt>:
    2580:	adrp	x16, 16000 <PyModule_AddObject>
    2584:	ldr	x17, [x16, #48]
    2588:	add	x16, x16, #0x30
    258c:	br	x17

0000000000002590 <EVP_MD_CTX_md@plt>:
    2590:	adrp	x16, 16000 <PyModule_AddObject>
    2594:	ldr	x17, [x16, #56]
    2598:	add	x16, x16, #0x38
    259c:	br	x17

00000000000025a0 <PyType_Ready@plt>:
    25a0:	adrp	x16, 16000 <PyModule_AddObject>
    25a4:	ldr	x17, [x16, #64]
    25a8:	add	x16, x16, #0x40
    25ac:	br	x17

00000000000025b0 <EVP_shake256@plt>:
    25b0:	adrp	x16, 16000 <PyModule_AddObject>
    25b4:	ldr	x17, [x16, #72]
    25b8:	add	x16, x16, #0x48
    25bc:	br	x17

00000000000025c0 <EVP_sha384@plt>:
    25c0:	adrp	x16, 16000 <PyModule_AddObject>
    25c4:	ldr	x17, [x16, #80]
    25c8:	add	x16, x16, #0x50
    25cc:	br	x17

00000000000025d0 <__gmon_start__@plt>:
    25d0:	adrp	x16, 16000 <PyModule_AddObject>
    25d4:	ldr	x17, [x16, #88]
    25d8:	add	x16, x16, #0x58
    25dc:	br	x17

00000000000025e0 <ERR_func_error_string@plt>:
    25e0:	adrp	x16, 16000 <PyModule_AddObject>
    25e4:	ldr	x17, [x16, #96]
    25e8:	add	x16, x16, #0x60
    25ec:	br	x17

00000000000025f0 <EVP_sha3_512@plt>:
    25f0:	adrp	x16, 16000 <PyModule_AddObject>
    25f4:	ldr	x17, [x16, #104]
    25f8:	add	x16, x16, #0x68
    25fc:	br	x17

0000000000002600 <OBJ_nid2ln@plt>:
    2600:	adrp	x16, 16000 <PyModule_AddObject>
    2604:	ldr	x17, [x16, #112]
    2608:	add	x16, x16, #0x70
    260c:	br	x17

0000000000002610 <ERR_clear_error@plt>:
    2610:	adrp	x16, 16000 <PyModule_AddObject>
    2614:	ldr	x17, [x16, #120]
    2618:	add	x16, x16, #0x78
    261c:	br	x17

0000000000002620 <PyUnicode_FromString@plt>:
    2620:	adrp	x16, 16000 <PyModule_AddObject>
    2624:	ldr	x17, [x16, #128]
    2628:	add	x16, x16, #0x80
    262c:	br	x17

0000000000002630 <PyErr_NoMemory@plt>:
    2630:	adrp	x16, 16000 <PyModule_AddObject>
    2634:	ldr	x17, [x16, #136]
    2638:	add	x16, x16, #0x88
    263c:	br	x17

0000000000002640 <EVP_get_digestbyname@plt>:
    2640:	adrp	x16, 16000 <PyModule_AddObject>
    2644:	ldr	x17, [x16, #144]
    2648:	add	x16, x16, #0x90
    264c:	br	x17

0000000000002650 <PyThread_free_lock@plt>:
    2650:	adrp	x16, 16000 <PyModule_AddObject>
    2654:	ldr	x17, [x16, #152]
    2658:	add	x16, x16, #0x98
    265c:	br	x17

0000000000002660 <_PyObject_New@plt>:
    2660:	adrp	x16, 16000 <PyModule_AddObject>
    2664:	ldr	x17, [x16, #160]
    2668:	add	x16, x16, #0xa0
    266c:	br	x17

0000000000002670 <PyUnicode_AsUTF8AndSize@plt>:
    2670:	adrp	x16, 16000 <PyModule_AddObject>
    2674:	ldr	x17, [x16, #168]
    2678:	add	x16, x16, #0xa8
    267c:	br	x17

0000000000002680 <EVP_shake128@plt>:
    2680:	adrp	x16, 16000 <PyModule_AddObject>
    2684:	ldr	x17, [x16, #176]
    2688:	add	x16, x16, #0xb0
    268c:	br	x17

0000000000002690 <EVP_md5@plt>:
    2690:	adrp	x16, 16000 <PyModule_AddObject>
    2694:	ldr	x17, [x16, #184]
    2698:	add	x16, x16, #0xb8
    269c:	br	x17

00000000000026a0 <PyUnicode_FromFormat@plt>:
    26a0:	adrp	x16, 16000 <PyModule_AddObject>
    26a4:	ldr	x17, [x16, #192]
    26a8:	add	x16, x16, #0xc0
    26ac:	br	x17

00000000000026b0 <PyThread_allocate_lock@plt>:
    26b0:	adrp	x16, 16000 <PyModule_AddObject>
    26b4:	ldr	x17, [x16, #200]
    26b8:	add	x16, x16, #0xc8
    26bc:	br	x17

00000000000026c0 <EVP_MD_size@plt>:
    26c0:	adrp	x16, 16000 <PyModule_AddObject>
    26c4:	ldr	x17, [x16, #208]
    26c8:	add	x16, x16, #0xd0
    26cc:	br	x17

00000000000026d0 <PyLong_AsLong@plt>:
    26d0:	adrp	x16, 16000 <PyModule_AddObject>
    26d4:	ldr	x17, [x16, #216]
    26d8:	add	x16, x16, #0xd8
    26dc:	br	x17

00000000000026e0 <__cxa_finalize@plt>:
    26e0:	adrp	x16, 16000 <PyModule_AddObject>
    26e4:	ldr	x17, [x16, #224]
    26e8:	add	x16, x16, #0xe0
    26ec:	br	x17

00000000000026f0 <PyErr_Format@plt>:
    26f0:	adrp	x16, 16000 <PyModule_AddObject>
    26f4:	ldr	x17, [x16, #232]
    26f8:	add	x16, x16, #0xe8
    26fc:	br	x17

0000000000002700 <EVP_DigestUpdate@plt>:
    2700:	adrp	x16, 16000 <PyModule_AddObject>
    2704:	ldr	x17, [x16, #240]
    2708:	add	x16, x16, #0xf0
    270c:	br	x17

0000000000002710 <EVP_MD_do_all@plt>:
    2710:	adrp	x16, 16000 <PyModule_AddObject>
    2714:	ldr	x17, [x16, #248]
    2718:	add	x16, x16, #0xf8
    271c:	br	x17

0000000000002720 <PyErr_Occurred@plt>:
    2720:	adrp	x16, 16000 <PyModule_AddObject>
    2724:	ldr	x17, [x16, #256]
    2728:	add	x16, x16, #0x100
    272c:	br	x17

0000000000002730 <EVP_MD_block_size@plt>:
    2730:	adrp	x16, 16000 <PyModule_AddObject>
    2734:	ldr	x17, [x16, #264]
    2738:	add	x16, x16, #0x108
    273c:	br	x17

0000000000002740 <PyThread_release_lock@plt>:
    2740:	adrp	x16, 16000 <PyModule_AddObject>
    2744:	ldr	x17, [x16, #272]
    2748:	add	x16, x16, #0x110
    274c:	br	x17

0000000000002750 <PyObject_GetBuffer@plt>:
    2750:	adrp	x16, 16000 <PyModule_AddObject>
    2754:	ldr	x17, [x16, #280]
    2758:	add	x16, x16, #0x118
    275c:	br	x17

0000000000002760 <EVP_DigestFinal@plt>:
    2760:	adrp	x16, 16000 <PyModule_AddObject>
    2764:	ldr	x17, [x16, #288]
    2768:	add	x16, x16, #0x120
    276c:	br	x17

0000000000002770 <PyEval_RestoreThread@plt>:
    2770:	adrp	x16, 16000 <PyModule_AddObject>
    2774:	ldr	x17, [x16, #296]
    2778:	add	x16, x16, #0x128
    277c:	br	x17

0000000000002780 <EVP_MD_CTX_copy@plt>:
    2780:	adrp	x16, 16000 <PyModule_AddObject>
    2784:	ldr	x17, [x16, #304]
    2788:	add	x16, x16, #0x130
    278c:	br	x17

0000000000002790 <EVP_sha3_384@plt>:
    2790:	adrp	x16, 16000 <PyModule_AddObject>
    2794:	ldr	x17, [x16, #312]
    2798:	add	x16, x16, #0x138
    279c:	br	x17

00000000000027a0 <PyFrozenSet_New@plt>:
    27a0:	adrp	x16, 16000 <PyModule_AddObject>
    27a4:	ldr	x17, [x16, #320]
    27a8:	add	x16, x16, #0x140
    27ac:	br	x17

00000000000027b0 <PyEval_SaveThread@plt>:
    27b0:	adrp	x16, 16000 <PyModule_AddObject>
    27b4:	ldr	x17, [x16, #328]
    27b8:	add	x16, x16, #0x148
    27bc:	br	x17

00000000000027c0 <EVP_sha224@plt>:
    27c0:	adrp	x16, 16000 <PyModule_AddObject>
    27c4:	ldr	x17, [x16, #336]
    27c8:	add	x16, x16, #0x150
    27cc:	br	x17

00000000000027d0 <EVP_sha3_256@plt>:
    27d0:	adrp	x16, 16000 <PyModule_AddObject>
    27d4:	ldr	x17, [x16, #344]
    27d8:	add	x16, x16, #0x158
    27dc:	br	x17

00000000000027e0 <EVP_MD_CTX_new@plt>:
    27e0:	adrp	x16, 16000 <PyModule_AddObject>
    27e4:	ldr	x17, [x16, #352]
    27e8:	add	x16, x16, #0x160
    27ec:	br	x17

00000000000027f0 <PyBuffer_IsContiguous@plt>:
    27f0:	adrp	x16, 16000 <PyModule_AddObject>
    27f4:	ldr	x17, [x16, #360]
    27f8:	add	x16, x16, #0x168
    27fc:	br	x17

0000000000002800 <PyType_IsSubtype@plt>:
    2800:	adrp	x16, 16000 <PyModule_AddObject>
    2804:	ldr	x17, [x16, #368]
    2808:	add	x16, x16, #0x170
    280c:	br	x17

0000000000002810 <_Py_strhex@plt>:
    2810:	adrp	x16, 16000 <PyModule_AddObject>
    2814:	ldr	x17, [x16, #376]
    2818:	add	x16, x16, #0x178
    281c:	br	x17

0000000000002820 <EVP_sha1@plt>:
    2820:	adrp	x16, 16000 <PyModule_AddObject>
    2824:	ldr	x17, [x16, #384]
    2828:	add	x16, x16, #0x180
    282c:	br	x17

0000000000002830 <EVP_PBE_scrypt@plt>:
    2830:	adrp	x16, 16000 <PyModule_AddObject>
    2834:	ldr	x17, [x16, #392]
    2838:	add	x16, x16, #0x188
    283c:	br	x17

0000000000002840 <ERR_peek_last_error@plt>:
    2840:	adrp	x16, 16000 <PyModule_AddObject>
    2844:	ldr	x17, [x16, #400]
    2848:	add	x16, x16, #0x190
    284c:	br	x17

0000000000002850 <PySet_Add@plt>:
    2850:	adrp	x16, 16000 <PyModule_AddObject>
    2854:	ldr	x17, [x16, #408]
    2858:	add	x16, x16, #0x198
    285c:	br	x17

0000000000002860 <HMAC@plt>:
    2860:	adrp	x16, 16000 <PyModule_AddObject>
    2864:	ldr	x17, [x16, #416]
    2868:	add	x16, x16, #0x1a0
    286c:	br	x17

0000000000002870 <PyBytes_FromStringAndSize@plt>:
    2870:	adrp	x16, 16000 <PyModule_AddObject>
    2874:	ldr	x17, [x16, #424]
    2878:	add	x16, x16, #0x1a8
    287c:	br	x17

0000000000002880 <_PyArg_Parse_SizeT@plt>:
    2880:	adrp	x16, 16000 <PyModule_AddObject>
    2884:	ldr	x17, [x16, #432]
    2888:	add	x16, x16, #0x1b0
    288c:	br	x17

0000000000002890 <PyLong_FromLong@plt>:
    2890:	adrp	x16, 16000 <PyModule_AddObject>
    2894:	ldr	x17, [x16, #440]
    2898:	add	x16, x16, #0x1b8
    289c:	br	x17

00000000000028a0 <strcmp@plt>:
    28a0:	adrp	x16, 16000 <PyModule_AddObject>
    28a4:	ldr	x17, [x16, #448]
    28a8:	add	x16, x16, #0x1c0
    28ac:	br	x17

00000000000028b0 <EVP_blake2b512@plt>:
    28b0:	adrp	x16, 16000 <PyModule_AddObject>
    28b4:	ldr	x17, [x16, #456]
    28b8:	add	x16, x16, #0x1c8
    28bc:	br	x17

00000000000028c0 <_PyArg_UnpackKeywords@plt>:
    28c0:	adrp	x16, 16000 <PyModule_AddObject>
    28c4:	ldr	x17, [x16, #464]
    28c8:	add	x16, x16, #0x1d0
    28cc:	br	x17

00000000000028d0 <EVP_MD_CTX_free@plt>:
    28d0:	adrp	x16, 16000 <PyModule_AddObject>
    28d4:	ldr	x17, [x16, #472]
    28d8:	add	x16, x16, #0x1d8
    28dc:	br	x17

00000000000028e0 <_Py_Dealloc@plt>:
    28e0:	adrp	x16, 16000 <PyModule_AddObject>
    28e4:	ldr	x17, [x16, #480]
    28e8:	add	x16, x16, #0x1e0
    28ec:	br	x17

00000000000028f0 <PyObject_Free@plt>:
    28f0:	adrp	x16, 16000 <PyModule_AddObject>
    28f4:	ldr	x17, [x16, #488]
    28f8:	add	x16, x16, #0x1e8
    28fc:	br	x17

0000000000002900 <EVP_sha3_224@plt>:
    2900:	adrp	x16, 16000 <PyModule_AddObject>
    2904:	ldr	x17, [x16, #496]
    2908:	add	x16, x16, #0x1f0
    290c:	br	x17

0000000000002910 <PyModule_Create2@plt>:
    2910:	adrp	x16, 16000 <PyModule_AddObject>
    2914:	ldr	x17, [x16, #504]
    2918:	add	x16, x16, #0x1f8
    291c:	br	x17

0000000000002920 <PyErr_SetString@plt>:
    2920:	adrp	x16, 16000 <PyModule_AddObject>
    2924:	ldr	x17, [x16, #512]
    2928:	add	x16, x16, #0x200
    292c:	br	x17

0000000000002930 <OBJ_nid2sn@plt>:
    2930:	adrp	x16, 16000 <PyModule_AddObject>
    2934:	ldr	x17, [x16, #520]
    2938:	add	x16, x16, #0x208
    293c:	br	x17

0000000000002940 <EVP_sha512@plt>:
    2940:	adrp	x16, 16000 <PyModule_AddObject>
    2944:	ldr	x17, [x16, #528]
    2948:	add	x16, x16, #0x210
    294c:	br	x17

0000000000002950 <EVP_sha256@plt>:
    2950:	adrp	x16, 16000 <PyModule_AddObject>
    2954:	ldr	x17, [x16, #536]
    2958:	add	x16, x16, #0x218
    295c:	br	x17

0000000000002960 <EVP_sha512_256@plt>:
    2960:	adrp	x16, 16000 <PyModule_AddObject>
    2964:	ldr	x17, [x16, #544]
    2968:	add	x16, x16, #0x220
    296c:	br	x17

0000000000002970 <PyBuffer_Release@plt>:
    2970:	adrp	x16, 16000 <PyModule_AddObject>
    2974:	ldr	x17, [x16, #552]
    2978:	add	x16, x16, #0x228
    297c:	br	x17

0000000000002980 <strlen@plt>:
    2980:	adrp	x16, 16000 <PyModule_AddObject>
    2984:	ldr	x17, [x16, #560]
    2988:	add	x16, x16, #0x230
    298c:	br	x17

0000000000002990 <ERR_lib_error_string@plt>:
    2990:	adrp	x16, 16000 <PyModule_AddObject>
    2994:	ldr	x17, [x16, #568]
    2998:	add	x16, x16, #0x238
    299c:	br	x17

00000000000029a0 <PyLong_AsUnsignedLong@plt>:
    29a0:	adrp	x16, 16000 <PyModule_AddObject>
    29a4:	ldr	x17, [x16, #576]
    29a8:	add	x16, x16, #0x240
    29ac:	br	x17

00000000000029b0 <_PyArg_BadArgument@plt>:
    29b0:	adrp	x16, 16000 <PyModule_AddObject>
    29b4:	ldr	x17, [x16, #584]
    29b8:	add	x16, x16, #0x248
    29bc:	br	x17

00000000000029c0 <PyThread_acquire_lock@plt>:
    29c0:	adrp	x16, 16000 <PyModule_AddObject>
    29c4:	ldr	x17, [x16, #592]
    29c8:	add	x16, x16, #0x250
    29cc:	br	x17

Disassembly of section .text:

00000000000029d0 <PyInit__hashlib@@Base-0x1c7c>:
    29d0:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    29d4:	ldr	x0, [x0, #3992]
    29d8:	cbz	x0, 29e0 <PyThread_acquire_lock@plt+0x20>
    29dc:	b	25d0 <__gmon_start__@plt>
    29e0:	ret
    29e4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x119b4>
    29e8:	add	x0, x0, #0x988
    29ec:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x119b4>
    29f0:	add	x1, x1, #0x988
    29f4:	cmp	x1, x0
    29f8:	b.eq	2a10 <PyThread_acquire_lock@plt+0x50>  // b.none
    29fc:	adrp	x1, 15000 <PyInit__hashlib@@Base+0x109b4>
    2a00:	ldr	x1, [x1, #4016]
    2a04:	cbz	x1, 2a10 <PyThread_acquire_lock@plt+0x50>
    2a08:	mov	x16, x1
    2a0c:	br	x16
    2a10:	ret
    2a14:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x119b4>
    2a18:	add	x0, x0, #0x988
    2a1c:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x119b4>
    2a20:	add	x1, x1, #0x988
    2a24:	sub	x1, x1, x0
    2a28:	mov	x2, #0x2                   	// #2
    2a2c:	asr	x1, x1, #3
    2a30:	sdiv	x1, x1, x2
    2a34:	cbz	x1, 2a4c <PyThread_acquire_lock@plt+0x8c>
    2a38:	adrp	x2, 15000 <PyInit__hashlib@@Base+0x109b4>
    2a3c:	ldr	x2, [x2, #4032]
    2a40:	cbz	x2, 2a4c <PyThread_acquire_lock@plt+0x8c>
    2a44:	mov	x16, x2
    2a48:	br	x16
    2a4c:	ret
    2a50:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x119b4>
    2a54:	ldrb	w1, [x0, #2440]
    2a58:	cbnz	w1, 2a9c <PyThread_acquire_lock@plt+0xdc>
    2a5c:	stp	x29, x30, [sp, #-32]!
    2a60:	mov	x29, sp
    2a64:	str	x19, [sp, #16]
    2a68:	mov	x19, x0
    2a6c:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    2a70:	ldr	x0, [x0, #4008]
    2a74:	cbz	x0, 2a84 <PyThread_acquire_lock@plt+0xc4>
    2a78:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x119b4>
    2a7c:	ldr	x0, [x0, #600]
    2a80:	bl	26e0 <__cxa_finalize@plt>
    2a84:	bl	29e4 <PyThread_acquire_lock@plt+0x24>
    2a88:	mov	w0, #0x1                   	// #1
    2a8c:	strb	w0, [x19, #2440]
    2a90:	ldr	x19, [sp, #16]
    2a94:	ldp	x29, x30, [sp], #32
    2a98:	ret
    2a9c:	ret
    2aa0:	b	2a14 <PyThread_acquire_lock@plt+0x54>
    2aa4:	stp	x29, x30, [sp, #-48]!
    2aa8:	mov	x29, sp
    2aac:	stp	x19, x20, [sp, #16]
    2ab0:	mov	x19, x0
    2ab4:	stp	x21, x22, [sp, #32]
    2ab8:	bl	2840 <ERR_peek_last_error@plt>
    2abc:	cbnz	x0, 2ad4 <PyThread_acquire_lock@plt+0x114>
    2ac0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2ac4:	add	x1, x1, #0x73c
    2ac8:	mov	x0, x19
    2acc:	bl	2920 <PyErr_SetString@plt>
    2ad0:	b	2b28 <PyThread_acquire_lock@plt+0x168>
    2ad4:	mov	x21, x0
    2ad8:	bl	2610 <ERR_clear_error@plt>
    2adc:	mov	x0, x21
    2ae0:	bl	2990 <ERR_lib_error_string@plt>
    2ae4:	mov	x20, x0
    2ae8:	mov	x0, x21
    2aec:	bl	25e0 <ERR_func_error_string@plt>
    2af0:	mov	x22, x0
    2af4:	mov	x0, x21
    2af8:	bl	2560 <ERR_reason_error_string@plt>
    2afc:	cmp	x20, #0x0
    2b00:	mov	x1, x0
    2b04:	ccmp	x22, #0x0, #0x4, ne  // ne = any
    2b08:	b.eq	2b3c <PyThread_acquire_lock@plt+0x17c>  // b.none
    2b0c:	mov	x4, x0
    2b10:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b14:	mov	x3, x22
    2b18:	mov	x2, x20
    2b1c:	add	x1, x1, #0x74c
    2b20:	mov	x0, x19
    2b24:	bl	26f0 <PyErr_Format@plt>
    2b28:	mov	x0, #0x0                   	// #0
    2b2c:	ldp	x19, x20, [sp, #16]
    2b30:	ldp	x21, x22, [sp, #32]
    2b34:	ldp	x29, x30, [sp], #48
    2b38:	ret
    2b3c:	cbz	x20, 2ac8 <PyThread_acquire_lock@plt+0x108>
    2b40:	mov	x3, x0
    2b44:	mov	x2, x20
    2b48:	mov	x0, x19
    2b4c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2b50:	add	x1, x1, #0x758
    2b54:	bl	26f0 <PyErr_Format@plt>
    2b58:	b	2b28 <PyThread_acquire_lock@plt+0x168>
    2b5c:	stp	x29, x30, [sp, #-32]!
    2b60:	mov	x29, sp
    2b64:	str	x19, [sp, #16]
    2b68:	bl	2530 <EVP_MD_type@plt>
    2b6c:	mov	w19, w0
    2b70:	cmp	w0, #0x44d
    2b74:	b.gt	2ba0 <PyThread_acquire_lock@plt+0x1e0>
    2b78:	cmp	w0, #0x445
    2b7c:	b.gt	2bb8 <PyThread_acquire_lock@plt+0x1f8>
    2b80:	cmp	w0, #0x2a3
    2b84:	b.gt	2c20 <PyThread_acquire_lock@plt+0x260>
    2b88:	cmp	w0, #0x29f
    2b8c:	b.gt	2bf0 <PyThread_acquire_lock@plt+0x230>
    2b90:	cmp	w0, #0x4
    2b94:	b.eq	2c9c <PyThread_acquire_lock@plt+0x2dc>  // b.none
    2b98:	cmp	w0, #0x40
    2b9c:	b.eq	2ca8 <PyThread_acquire_lock@plt+0x2e8>  // b.none
    2ba0:	mov	w0, w19
    2ba4:	bl	2600 <OBJ_nid2ln@plt>
    2ba8:	cbnz	x0, 2be4 <PyThread_acquire_lock@plt+0x224>
    2bac:	mov	w0, w19
    2bb0:	bl	2930 <OBJ_nid2sn@plt>
    2bb4:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2bb8:	sub	w19, w0, #0x447
    2bbc:	cmp	w19, #0x6
    2bc0:	b.hi	2bdc <PyThread_acquire_lock@plt+0x21c>  // b.pmore
    2bc4:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2bc8:	add	x0, x0, #0xca8
    2bcc:	ldrb	w0, [x0, w19, uxtw]
    2bd0:	adr	x1, 2bdc <PyThread_acquire_lock@plt+0x21c>
    2bd4:	add	x0, x1, w0, sxtb #2
    2bd8:	br	x0
    2bdc:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2be0:	add	x0, x0, #0x768
    2be4:	ldr	x19, [sp, #16]
    2be8:	ldp	x29, x30, [sp], #32
    2bec:	b	2620 <PyUnicode_FromString@plt>
    2bf0:	sub	w19, w0, #0x2a1
    2bf4:	cmp	w19, #0x2
    2bf8:	b.hi	2cc0 <PyThread_acquire_lock@plt+0x300>  // b.pmore
    2bfc:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c00:	add	x0, x0, #0xcb0
    2c04:	ldrb	w0, [x0, w19, uxtw]
    2c08:	adr	x1, 2c14 <PyThread_acquire_lock@plt+0x254>
    2c0c:	add	x0, x1, w0, sxtb #2
    2c10:	br	x0
    2c14:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c18:	add	x0, x0, #0xc1f
    2c1c:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c20:	cmp	w0, #0x420
    2c24:	b.eq	2ccc <PyThread_acquire_lock@plt+0x30c>  // b.none
    2c28:	cmp	w0, #0x421
    2c2c:	b.ne	2ba0 <PyThread_acquire_lock@plt+0x1e0>  // b.any
    2c30:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c34:	add	x0, x0, #0x760
    2c38:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c3c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c40:	add	x0, x0, #0xc3d
    2c44:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c48:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c4c:	add	x0, x0, #0xc4c
    2c50:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c54:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c58:	add	x0, x0, #0x77e
    2c5c:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c60:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c64:	add	x0, x0, #0x787
    2c68:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c6c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c70:	add	x0, x0, #0x790
    2c74:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c78:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c7c:	add	x0, x0, #0x799
    2c80:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c84:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c88:	add	x0, x0, #0x7a2
    2c8c:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c90:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2c94:	add	x0, x0, #0x7ac
    2c98:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2c9c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2ca0:	add	x0, x0, #0xc06
    2ca4:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2ca8:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2cac:	add	x0, x0, #0xc12
    2cb0:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2cb4:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2cb8:	add	x0, x0, #0x773
    2cbc:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2cc0:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2cc4:	add	x0, x0, #0xc2e
    2cc8:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2ccc:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    2cd0:	add	x0, x0, #0x7b6
    2cd4:	b	2be4 <PyThread_acquire_lock@plt+0x224>
    2cd8:	stp	x29, x30, [sp, #-16]!
    2cdc:	mov	x29, sp
    2ce0:	ldr	x0, [x0, #16]
    2ce4:	bl	2590 <EVP_MD_CTX_md@plt>
    2ce8:	ldp	x29, x30, [sp], #16
    2cec:	b	2b5c <PyThread_acquire_lock@plt+0x19c>
    2cf0:	stp	x29, x30, [sp, #-16]!
    2cf4:	mov	x29, sp
    2cf8:	ldr	x0, [x0, #16]
    2cfc:	bl	2590 <EVP_MD_CTX_md@plt>
    2d00:	bl	2730 <EVP_MD_block_size@plt>
    2d04:	sxtw	x0, w0
    2d08:	ldp	x29, x30, [sp], #16
    2d0c:	b	2890 <PyLong_FromLong@plt>
    2d10:	stp	x29, x30, [sp, #-16]!
    2d14:	mov	x29, sp
    2d18:	ldr	x0, [x0, #16]
    2d1c:	bl	2590 <EVP_MD_CTX_md@plt>
    2d20:	bl	26c0 <EVP_MD_size@plt>
    2d24:	sxtw	x0, w0
    2d28:	ldp	x29, x30, [sp], #16
    2d2c:	b	2890 <PyLong_FromLong@plt>
    2d30:	stp	x29, x30, [sp, #-48]!
    2d34:	mov	x29, sp
    2d38:	stp	x19, x20, [sp, #16]
    2d3c:	mov	x20, x0
    2d40:	mov	x19, x1
    2d44:	ldr	x0, [x1, #24]
    2d48:	str	x21, [sp, #32]
    2d4c:	cbz	x0, 2d78 <PyThread_acquire_lock@plt+0x3b8>
    2d50:	mov	w1, #0x0                   	// #0
    2d54:	bl	29c0 <PyThread_acquire_lock@plt>
    2d58:	cbnz	w0, 2d78 <PyThread_acquire_lock@plt+0x3b8>
    2d5c:	bl	27b0 <PyEval_SaveThread@plt>
    2d60:	mov	x21, x0
    2d64:	ldr	x0, [x19, #24]
    2d68:	mov	w1, #0x1                   	// #1
    2d6c:	bl	29c0 <PyThread_acquire_lock@plt>
    2d70:	mov	x0, x21
    2d74:	bl	2770 <PyEval_RestoreThread@plt>
    2d78:	ldr	x1, [x19, #16]
    2d7c:	mov	x0, x20
    2d80:	bl	2780 <EVP_MD_CTX_copy@plt>
    2d84:	mov	w20, w0
    2d88:	ldr	x0, [x19, #24]
    2d8c:	cbz	x0, 2d94 <PyThread_acquire_lock@plt+0x3d4>
    2d90:	bl	2740 <PyThread_release_lock@plt>
    2d94:	mov	w0, w20
    2d98:	ldp	x19, x20, [sp, #16]
    2d9c:	ldr	x21, [sp, #32]
    2da0:	ldp	x29, x30, [sp], #48
    2da4:	ret
    2da8:	stp	x29, x30, [sp, #-112]!
    2dac:	mov	x29, sp
    2db0:	stp	x19, x20, [sp, #16]
    2db4:	mov	x20, x0
    2db8:	str	x21, [sp, #32]
    2dbc:	bl	27e0 <EVP_MD_CTX_new@plt>
    2dc0:	mov	x19, x0
    2dc4:	cbnz	x0, 2de0 <PyThread_acquire_lock@plt+0x420>
    2dc8:	bl	2630 <PyErr_NoMemory@plt>
    2dcc:	mov	x0, x19
    2dd0:	ldp	x19, x20, [sp, #16]
    2dd4:	ldr	x21, [sp, #32]
    2dd8:	ldp	x29, x30, [sp], #112
    2ddc:	ret
    2de0:	mov	x1, x20
    2de4:	bl	2d30 <PyThread_acquire_lock@plt+0x370>
    2de8:	cbnz	w0, 2e04 <PyThread_acquire_lock@plt+0x444>
    2dec:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    2df0:	ldr	x0, [x0, #3984]
    2df4:	ldr	x0, [x0]
    2df8:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    2dfc:	mov	x19, x0
    2e00:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2e04:	mov	x0, x19
    2e08:	add	x21, sp, #0x30
    2e0c:	bl	2590 <EVP_MD_CTX_md@plt>
    2e10:	bl	26c0 <EVP_MD_size@plt>
    2e14:	mov	w20, w0
    2e18:	mov	x1, x21
    2e1c:	mov	x0, x19
    2e20:	mov	x2, #0x0                   	// #0
    2e24:	bl	2760 <EVP_DigestFinal@plt>
    2e28:	cbnz	w0, 2e44 <PyThread_acquire_lock@plt+0x484>
    2e2c:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    2e30:	mov	x19, #0x0                   	// #0
    2e34:	ldr	x0, [x0, #3984]
    2e38:	ldr	x0, [x0]
    2e3c:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    2e40:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2e44:	mov	w1, w20
    2e48:	mov	x0, x21
    2e4c:	bl	2870 <PyBytes_FromStringAndSize@plt>
    2e50:	mov	x20, x0
    2e54:	mov	x0, x19
    2e58:	mov	x19, x20
    2e5c:	bl	28d0 <EVP_MD_CTX_free@plt>
    2e60:	b	2dcc <PyThread_acquire_lock@plt+0x40c>
    2e64:	stp	x29, x30, [sp, #-112]!
    2e68:	mov	x29, sp
    2e6c:	stp	x19, x20, [sp, #16]
    2e70:	mov	x20, x0
    2e74:	str	x21, [sp, #32]
    2e78:	bl	27e0 <EVP_MD_CTX_new@plt>
    2e7c:	mov	x19, x0
    2e80:	cbnz	x0, 2e9c <PyThread_acquire_lock@plt+0x4dc>
    2e84:	bl	2630 <PyErr_NoMemory@plt>
    2e88:	mov	x0, x19
    2e8c:	ldp	x19, x20, [sp, #16]
    2e90:	ldr	x21, [sp, #32]
    2e94:	ldp	x29, x30, [sp], #112
    2e98:	ret
    2e9c:	mov	x1, x20
    2ea0:	bl	2d30 <PyThread_acquire_lock@plt+0x370>
    2ea4:	cbnz	w0, 2ec0 <PyThread_acquire_lock@plt+0x500>
    2ea8:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    2eac:	ldr	x0, [x0, #3984]
    2eb0:	ldr	x0, [x0]
    2eb4:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    2eb8:	mov	x19, x0
    2ebc:	b	2e88 <PyThread_acquire_lock@plt+0x4c8>
    2ec0:	mov	x0, x19
    2ec4:	add	x21, sp, #0x30
    2ec8:	bl	2590 <EVP_MD_CTX_md@plt>
    2ecc:	bl	26c0 <EVP_MD_size@plt>
    2ed0:	mov	w20, w0
    2ed4:	mov	x1, x21
    2ed8:	mov	x0, x19
    2edc:	mov	x2, #0x0                   	// #0
    2ee0:	bl	2760 <EVP_DigestFinal@plt>
    2ee4:	cbnz	w0, 2f00 <PyThread_acquire_lock@plt+0x540>
    2ee8:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    2eec:	mov	x19, #0x0                   	// #0
    2ef0:	ldr	x0, [x0, #3984]
    2ef4:	ldr	x0, [x0]
    2ef8:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    2efc:	b	2e88 <PyThread_acquire_lock@plt+0x4c8>
    2f00:	mov	x0, x19
    2f04:	bl	28d0 <EVP_MD_CTX_free@plt>
    2f08:	mov	w1, w20
    2f0c:	mov	x0, x21
    2f10:	bl	2810 <_Py_strhex@plt>
    2f14:	b	2eb8 <PyThread_acquire_lock@plt+0x4f8>
    2f18:	stp	x29, x30, [sp, #-32]!
    2f1c:	mov	x29, sp
    2f20:	str	x19, [sp, #16]
    2f24:	mov	x19, x0
    2f28:	ldr	x0, [x0, #24]
    2f2c:	cbz	x0, 2f34 <PyThread_acquire_lock@plt+0x574>
    2f30:	bl	2650 <PyThread_free_lock@plt>
    2f34:	ldr	x0, [x19, #16]
    2f38:	bl	28d0 <EVP_MD_CTX_free@plt>
    2f3c:	mov	x0, x19
    2f40:	ldr	x19, [sp, #16]
    2f44:	ldp	x29, x30, [sp], #32
    2f48:	b	28f0 <PyObject_Free@plt>
    2f4c:	stp	x29, x30, [sp, #-64]!
    2f50:	mov	x29, sp
    2f54:	stp	x19, x20, [sp, #16]
    2f58:	mov	x20, x1
    2f5c:	mov	x19, x2
    2f60:	stp	x21, x22, [sp, #32]
    2f64:	mov	x21, x0
    2f68:	str	x23, [sp, #48]
    2f6c:	mov	x23, #0x7fffffff            	// #2147483647
    2f70:	cmp	x19, #0x0
    2f74:	b.gt	2f80 <PyThread_acquire_lock@plt+0x5c0>
    2f78:	mov	w0, #0x0                   	// #0
    2f7c:	b	2fb0 <PyThread_acquire_lock@plt+0x5f0>
    2f80:	ldr	x0, [x21]
    2f84:	cmp	x19, x23
    2f88:	csel	x22, x19, x23, le
    2f8c:	mov	x1, x20
    2f90:	mov	x2, x22
    2f94:	bl	2700 <EVP_DigestUpdate@plt>
    2f98:	cbnz	w0, 2fc4 <PyThread_acquire_lock@plt+0x604>
    2f9c:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    2fa0:	ldr	x0, [x0, #3984]
    2fa4:	ldr	x0, [x0]
    2fa8:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    2fac:	mov	w0, #0xffffffff            	// #-1
    2fb0:	ldp	x19, x20, [sp, #16]
    2fb4:	ldp	x21, x22, [sp, #32]
    2fb8:	ldr	x23, [sp, #48]
    2fbc:	ldp	x29, x30, [sp], #64
    2fc0:	ret
    2fc4:	sub	x19, x19, x22
    2fc8:	add	x20, x20, x22
    2fcc:	b	2f70 <PyThread_acquire_lock@plt+0x5b0>
    2fd0:	stp	x29, x30, [sp, #-128]!
    2fd4:	mov	x29, sp
    2fd8:	stp	x19, x20, [sp, #16]
    2fdc:	mov	x19, x0
    2fe0:	mov	x0, x1
    2fe4:	ldr	x1, [x1, #8]
    2fe8:	stp	x21, x22, [sp, #32]
    2fec:	ldr	x2, [x1, #168]
    2ff0:	tbz	w2, #28, 3020 <PyThread_acquire_lock@plt+0x660>
    2ff4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    2ff8:	add	x1, x1, #0x7be
    2ffc:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3000:	ldr	x0, [x0, #4000]
    3004:	ldr	x0, [x0]
    3008:	bl	2920 <PyErr_SetString@plt>
    300c:	mov	x0, #0x0                   	// #0
    3010:	ldp	x19, x20, [sp, #16]
    3014:	ldp	x21, x22, [sp, #32]
    3018:	ldp	x29, x30, [sp], #128
    301c:	ret
    3020:	ldr	x1, [x1, #160]
    3024:	cbz	x1, 3030 <PyThread_acquire_lock@plt+0x670>
    3028:	ldr	x1, [x1]
    302c:	cbnz	x1, 303c <PyThread_acquire_lock@plt+0x67c>
    3030:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3034:	add	x1, x1, #0x7ed
    3038:	b	2ffc <PyThread_acquire_lock@plt+0x63c>
    303c:	add	x21, sp, #0x30
    3040:	mov	w2, #0x0                   	// #0
    3044:	mov	x1, x21
    3048:	bl	2750 <PyObject_GetBuffer@plt>
    304c:	cmn	w0, #0x1
    3050:	b.eq	300c <PyThread_acquire_lock@plt+0x64c>  // b.none
    3054:	ldr	w0, [sp, #84]
    3058:	cmp	w0, #0x1
    305c:	b.le	3084 <PyThread_acquire_lock@plt+0x6c4>
    3060:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3064:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3068:	add	x1, x1, #0x817
    306c:	ldr	x0, [x0, #4024]
    3070:	ldr	x0, [x0]
    3074:	bl	2920 <PyErr_SetString@plt>
    3078:	mov	x0, x21
    307c:	bl	2970 <PyBuffer_Release@plt>
    3080:	b	300c <PyThread_acquire_lock@plt+0x64c>
    3084:	ldr	x0, [x19, #24]
    3088:	add	x20, x19, #0x10
    308c:	cbz	x0, 30f0 <PyThread_acquire_lock@plt+0x730>
    3090:	bl	27b0 <PyEval_SaveThread@plt>
    3094:	mov	x22, x0
    3098:	ldr	x0, [x19, #24]
    309c:	mov	w1, #0x1                   	// #1
    30a0:	bl	29c0 <PyThread_acquire_lock@plt>
    30a4:	ldr	x1, [sp, #48]
    30a8:	mov	x0, x20
    30ac:	ldr	x2, [sp, #64]
    30b0:	bl	2f4c <PyThread_acquire_lock@plt+0x58c>
    30b4:	mov	w20, w0
    30b8:	ldr	x0, [x19, #24]
    30bc:	bl	2740 <PyThread_release_lock@plt>
    30c0:	mov	x0, x22
    30c4:	bl	2770 <PyEval_RestoreThread@plt>
    30c8:	mov	x0, x21
    30cc:	bl	2970 <PyBuffer_Release@plt>
    30d0:	cmn	w20, #0x1
    30d4:	b.eq	300c <PyThread_acquire_lock@plt+0x64c>  // b.none
    30d8:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    30dc:	ldr	x0, [x0, #4056]
    30e0:	ldr	x1, [x0]
    30e4:	add	x1, x1, #0x1
    30e8:	str	x1, [x0]
    30ec:	b	3010 <PyThread_acquire_lock@plt+0x650>
    30f0:	ldr	x0, [sp, #64]
    30f4:	cmp	x0, #0x7ff
    30f8:	b.le	3108 <PyThread_acquire_lock@plt+0x748>
    30fc:	bl	26b0 <PyThread_allocate_lock@plt>
    3100:	str	x0, [x19, #24]
    3104:	cbnz	x0, 3090 <PyThread_acquire_lock@plt+0x6d0>
    3108:	ldr	x1, [sp, #48]
    310c:	mov	x0, x20
    3110:	ldr	x2, [sp, #64]
    3114:	bl	2f4c <PyThread_acquire_lock@plt+0x58c>
    3118:	mov	w20, w0
    311c:	b	30c8 <PyThread_acquire_lock@plt+0x708>
    3120:	sub	sp, sp, #0x150
    3124:	cmp	x3, #0x0
    3128:	ccmp	x2, #0x3, #0x0, eq  // eq = none
    312c:	stp	x29, x30, [sp, #16]
    3130:	add	x29, sp, #0x10
    3134:	stp	x19, x20, [sp, #32]
    3138:	mov	x19, x1
    313c:	mov	x1, x2
    3140:	str	x21, [sp, #48]
    3144:	stp	xzr, xzr, [sp, #176]
    3148:	stp	xzr, xzr, [sp, #192]
    314c:	stp	xzr, xzr, [sp, #208]
    3150:	stp	xzr, xzr, [sp, #224]
    3154:	stp	xzr, xzr, [sp, #240]
    3158:	stp	xzr, xzr, [sp, #256]
    315c:	stp	xzr, xzr, [sp, #272]
    3160:	stp	xzr, xzr, [sp, #288]
    3164:	stp	xzr, xzr, [sp, #304]
    3168:	stp	xzr, xzr, [sp, #320]
    316c:	b.ne	3174 <PyThread_acquire_lock@plt+0x7b4>  // b.any
    3170:	cbnz	x19, 31ac <PyThread_acquire_lock@plt+0x7ec>
    3174:	add	x0, sp, #0x58
    3178:	str	x0, [sp]
    317c:	mov	w6, #0x3                   	// #3
    3180:	mov	x0, x19
    3184:	mov	w5, w6
    3188:	mov	w7, #0x0                   	// #0
    318c:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    3190:	mov	x2, #0x0                   	// #0
    3194:	add	x4, x4, #0x260
    3198:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    319c:	mov	x19, x0
    31a0:	cbnz	x0, 31ac <PyThread_acquire_lock@plt+0x7ec>
    31a4:	mov	x19, #0x0                   	// #0
    31a8:	b	32d8 <PyThread_acquire_lock@plt+0x918>
    31ac:	ldr	x0, [x19]
    31b0:	add	x20, sp, #0xb0
    31b4:	mov	x1, x20
    31b8:	mov	w2, #0x0                   	// #0
    31bc:	bl	2750 <PyObject_GetBuffer@plt>
    31c0:	cbnz	w0, 31a4 <PyThread_acquire_lock@plt+0x7e4>
    31c4:	mov	x0, x20
    31c8:	mov	w1, #0x43                  	// #67
    31cc:	bl	27f0 <PyBuffer_IsContiguous@plt>
    31d0:	cbnz	w0, 31f8 <PyThread_acquire_lock@plt+0x838>
    31d4:	ldr	x3, [x19]
    31d8:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    31dc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    31e0:	add	x2, x2, #0x837
    31e4:	add	x1, x1, #0x849
    31e8:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    31ec:	add	x0, x0, #0x858
    31f0:	bl	29b0 <_PyArg_BadArgument@plt>
    31f4:	b	31a4 <PyThread_acquire_lock@plt+0x7e4>
    31f8:	ldr	x0, [x19, #8]
    31fc:	add	x20, sp, #0x100
    3200:	mov	x1, x20
    3204:	mov	w2, #0x0                   	// #0
    3208:	bl	2750 <PyObject_GetBuffer@plt>
    320c:	cbnz	w0, 31a4 <PyThread_acquire_lock@plt+0x7e4>
    3210:	mov	x0, x20
    3214:	mov	w1, #0x43                  	// #67
    3218:	bl	27f0 <PyBuffer_IsContiguous@plt>
    321c:	cbnz	w0, 3238 <PyThread_acquire_lock@plt+0x878>
    3220:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3224:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3228:	add	x2, x2, #0x837
    322c:	add	x1, x1, #0x864
    3230:	ldr	x3, [x19, #8]
    3234:	b	31e8 <PyThread_acquire_lock@plt+0x828>
    3238:	ldr	x0, [x19, #16]
    323c:	ldr	x1, [x0, #8]
    3240:	ldr	x1, [x1, #168]
    3244:	tbnz	w1, #28, 3260 <PyThread_acquire_lock@plt+0x8a0>
    3248:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    324c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3250:	mov	x3, x0
    3254:	add	x2, x2, #0x873
    3258:	add	x1, x1, #0x877
    325c:	b	31e8 <PyThread_acquire_lock@plt+0x828>
    3260:	add	x1, sp, #0x50
    3264:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    3268:	mov	x19, x0
    326c:	cbz	x0, 31a4 <PyThread_acquire_lock@plt+0x7e4>
    3270:	bl	2980 <strlen@plt>
    3274:	ldr	x1, [sp, #80]
    3278:	cmp	x0, x1
    327c:	b.eq	329c <PyThread_acquire_lock@plt+0x8dc>  // b.none
    3280:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3284:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3288:	add	x1, x1, #0x889
    328c:	ldr	x0, [x0, #3984]
    3290:	ldr	x0, [x0]
    3294:	bl	2920 <PyErr_SetString@plt>
    3298:	b	31a4 <PyThread_acquire_lock@plt+0x7e4>
    329c:	mov	x0, x19
    32a0:	str	wzr, [sp, #76]
    32a4:	stp	xzr, xzr, [sp, #112]
    32a8:	stp	xzr, xzr, [sp, #128]
    32ac:	stp	xzr, xzr, [sp, #144]
    32b0:	stp	xzr, xzr, [sp, #160]
    32b4:	bl	2640 <EVP_get_digestbyname@plt>
    32b8:	mov	x19, x0
    32bc:	cbnz	x0, 3310 <PyThread_acquire_lock@plt+0x950>
    32c0:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    32c4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    32c8:	add	x1, x1, #0x8a1
    32cc:	ldr	x0, [x0, #3984]
    32d0:	ldr	x0, [x0]
    32d4:	bl	2920 <PyErr_SetString@plt>
    32d8:	ldr	x0, [sp, #184]
    32dc:	cbz	x0, 32e8 <PyThread_acquire_lock@plt+0x928>
    32e0:	add	x0, sp, #0xb0
    32e4:	bl	2970 <PyBuffer_Release@plt>
    32e8:	ldr	x0, [sp, #264]
    32ec:	cbz	x0, 32f8 <PyThread_acquire_lock@plt+0x938>
    32f0:	add	x0, sp, #0x100
    32f4:	bl	2970 <PyBuffer_Release@plt>
    32f8:	mov	x0, x19
    32fc:	ldp	x29, x30, [sp, #16]
    3300:	ldp	x19, x20, [sp, #32]
    3304:	ldr	x21, [sp, #48]
    3308:	add	sp, sp, #0x150
    330c:	ret
    3310:	ldr	x1, [sp, #192]
    3314:	mov	x0, #0x7fffffff            	// #2147483647
    3318:	cmp	x1, x0
    331c:	b.le	3334 <PyThread_acquire_lock@plt+0x974>
    3320:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3324:	add	x1, x1, #0x8b7
    3328:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    332c:	ldr	x0, [x0, #4064]
    3330:	b	3290 <PyThread_acquire_lock@plt+0x8d0>
    3334:	ldr	x1, [sp, #272]
    3338:	cmp	x1, x0
    333c:	b.le	334c <PyThread_acquire_lock@plt+0x98c>
    3340:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3344:	add	x1, x1, #0x8c8
    3348:	b	3328 <PyThread_acquire_lock@plt+0x968>
    334c:	bl	27b0 <PyEval_SaveThread@plt>
    3350:	add	x21, sp, #0x70
    3354:	ldrsw	x4, [sp, #272]
    3358:	add	x6, sp, #0x4c
    335c:	ldr	w2, [sp, #192]
    3360:	mov	x5, x21
    3364:	ldr	x1, [sp, #176]
    3368:	mov	x20, x0
    336c:	ldr	x3, [sp, #256]
    3370:	mov	x0, x19
    3374:	bl	2860 <HMAC@plt>
    3378:	mov	x19, x0
    337c:	mov	x0, x20
    3380:	bl	2770 <PyEval_RestoreThread@plt>
    3384:	cbnz	x19, 339c <PyThread_acquire_lock@plt+0x9dc>
    3388:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    338c:	ldr	x0, [x0, #3984]
    3390:	ldr	x0, [x0]
    3394:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    3398:	b	32d8 <PyThread_acquire_lock@plt+0x918>
    339c:	ldr	w1, [sp, #76]
    33a0:	mov	x0, x21
    33a4:	bl	2870 <PyBytes_FromStringAndSize@plt>
    33a8:	mov	x19, x0
    33ac:	b	32d8 <PyThread_acquire_lock@plt+0x918>
    33b0:	ldr	x1, [x0]
    33b4:	sub	x1, x1, #0x1
    33b8:	str	x1, [x0]
    33bc:	cbnz	x1, 33c4 <PyThread_acquire_lock@plt+0xa04>
    33c0:	b	28e0 <_Py_Dealloc@plt>
    33c4:	ret
    33c8:	stp	x29, x30, [sp, #-32]!
    33cc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x119b4>
    33d0:	add	x0, x0, #0x260
    33d4:	mov	x29, sp
    33d8:	add	x0, x0, #0x40
    33dc:	str	x19, [sp, #16]
    33e0:	bl	2660 <_PyObject_New@plt>
    33e4:	mov	x19, x0
    33e8:	cbz	x0, 340c <PyThread_acquire_lock@plt+0xa4c>
    33ec:	str	xzr, [x0, #24]
    33f0:	bl	27e0 <EVP_MD_CTX_new@plt>
    33f4:	str	x0, [x19, #16]
    33f8:	cbnz	x0, 340c <PyThread_acquire_lock@plt+0xa4c>
    33fc:	mov	x0, x19
    3400:	mov	x19, #0x0                   	// #0
    3404:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    3408:	bl	2630 <PyErr_NoMemory@plt>
    340c:	mov	x0, x19
    3410:	ldr	x19, [sp, #16]
    3414:	ldp	x29, x30, [sp], #32
    3418:	ret
    341c:	stp	x29, x30, [sp, #-64]!
    3420:	mov	x29, sp
    3424:	stp	x19, x20, [sp, #16]
    3428:	stp	x21, x22, [sp, #32]
    342c:	str	x23, [sp, #48]
    3430:	cbnz	x0, 3454 <PyThread_acquire_lock@plt+0xa94>
    3434:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3438:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    343c:	add	x1, x1, #0x8a1
    3440:	ldr	x0, [x0, #3984]
    3444:	ldr	x0, [x0]
    3448:	bl	2920 <PyErr_SetString@plt>
    344c:	mov	x19, #0x0                   	// #0
    3450:	b	34e0 <PyThread_acquire_lock@plt+0xb20>
    3454:	mov	x22, x0
    3458:	mov	x21, x1
    345c:	mov	x20, x2
    3460:	bl	33c8 <PyThread_acquire_lock@plt+0xa08>
    3464:	mov	x19, x0
    3468:	cbz	x0, 34e0 <PyThread_acquire_lock@plt+0xb20>
    346c:	ldr	x0, [x0, #16]
    3470:	mov	x1, x22
    3474:	mov	x2, #0x0                   	// #0
    3478:	bl	2550 <EVP_DigestInit_ex@plt>
    347c:	cbnz	w0, 349c <PyThread_acquire_lock@plt+0xadc>
    3480:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3484:	ldr	x0, [x0, #3984]
    3488:	ldr	x0, [x0]
    348c:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    3490:	mov	x0, x19
    3494:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    3498:	b	344c <PyThread_acquire_lock@plt+0xa8c>
    349c:	cmp	x21, #0x0
    34a0:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    34a4:	b.eq	34e0 <PyThread_acquire_lock@plt+0xb20>  // b.none
    34a8:	add	x23, x19, #0x10
    34ac:	cmp	x20, #0x7ff
    34b0:	b.le	34f8 <PyThread_acquire_lock@plt+0xb38>
    34b4:	bl	27b0 <PyEval_SaveThread@plt>
    34b8:	mov	x22, x0
    34bc:	mov	x2, x20
    34c0:	mov	x1, x21
    34c4:	mov	x0, x23
    34c8:	bl	2f4c <PyThread_acquire_lock@plt+0x58c>
    34cc:	mov	w20, w0
    34d0:	mov	x0, x22
    34d4:	bl	2770 <PyEval_RestoreThread@plt>
    34d8:	cmn	w20, #0x1
    34dc:	b.eq	3490 <PyThread_acquire_lock@plt+0xad0>  // b.none
    34e0:	mov	x0, x19
    34e4:	ldp	x19, x20, [sp, #16]
    34e8:	ldp	x21, x22, [sp, #32]
    34ec:	ldr	x23, [sp, #48]
    34f0:	ldp	x29, x30, [sp], #64
    34f4:	ret
    34f8:	mov	x2, x20
    34fc:	mov	x1, x21
    3500:	mov	x0, x23
    3504:	bl	2f4c <PyThread_acquire_lock@plt+0x58c>
    3508:	mov	w20, w0
    350c:	b	34d8 <PyThread_acquire_lock@plt+0xb18>
    3510:	stp	x29, x30, [sp, #-32]!
    3514:	mov	x29, sp
    3518:	stp	x19, x20, [sp, #16]
    351c:	mov	x20, x0
    3520:	bl	33c8 <PyThread_acquire_lock@plt+0xa08>
    3524:	mov	x19, x0
    3528:	cbz	x0, 355c <PyThread_acquire_lock@plt+0xb9c>
    352c:	ldr	x0, [x0, #16]
    3530:	mov	x1, x20
    3534:	bl	2d30 <PyThread_acquire_lock@plt+0x370>
    3538:	cbnz	w0, 355c <PyThread_acquire_lock@plt+0xb9c>
    353c:	mov	x0, x19
    3540:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    3544:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3548:	ldp	x19, x20, [sp, #16]
    354c:	ldr	x0, [x0, #3984]
    3550:	ldp	x29, x30, [sp], #32
    3554:	ldr	x0, [x0]
    3558:	b	2aa4 <PyThread_acquire_lock@plt+0xe4>
    355c:	mov	x0, x19
    3560:	ldp	x19, x20, [sp, #16]
    3564:	ldp	x29, x30, [sp], #32
    3568:	ret
    356c:	stp	x29, x30, [sp, #-32]!
    3570:	mov	x29, sp
    3574:	stp	x19, x20, [sp, #16]
    3578:	mov	x20, x0
    357c:	ldr	x0, [x0, #16]
    3580:	bl	2590 <EVP_MD_CTX_md@plt>
    3584:	bl	2b5c <PyThread_acquire_lock@plt+0x19c>
    3588:	mov	x19, x0
    358c:	cbz	x0, 35b4 <PyThread_acquire_lock@plt+0xbf4>
    3590:	mov	x2, x20
    3594:	mov	x1, x0
    3598:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    359c:	add	x0, x0, #0x8d9
    35a0:	bl	26a0 <PyUnicode_FromFormat@plt>
    35a4:	mov	x20, x0
    35a8:	mov	x0, x19
    35ac:	mov	x19, x20
    35b0:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    35b4:	mov	x0, x19
    35b8:	ldp	x19, x20, [sp, #16]
    35bc:	ldp	x29, x30, [sp], #32
    35c0:	ret
    35c4:	stp	x29, x30, [sp, #-128]!
    35c8:	mov	x29, sp
    35cc:	stp	x19, x20, [sp, #16]
    35d0:	mov	x20, x0
    35d4:	mov	x19, x1
    35d8:	str	x21, [sp, #32]
    35dc:	stp	xzr, xzr, [sp, #48]
    35e0:	stp	xzr, xzr, [sp, #64]
    35e4:	stp	xzr, xzr, [sp, #80]
    35e8:	stp	xzr, xzr, [sp, #96]
    35ec:	stp	xzr, xzr, [sp, #112]
    35f0:	cbz	x0, 3684 <PyThread_acquire_lock@plt+0xcc4>
    35f4:	ldr	x1, [x0, #8]
    35f8:	ldr	x2, [x1, #168]
    35fc:	tbz	w2, #28, 3620 <PyThread_acquire_lock@plt+0xc60>
    3600:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3604:	add	x1, x1, #0x7be
    3608:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    360c:	ldr	x0, [x0, #4000]
    3610:	ldr	x0, [x0]
    3614:	bl	2920 <PyErr_SetString@plt>
    3618:	mov	x19, #0x0                   	// #0
    361c:	b	36a4 <PyThread_acquire_lock@plt+0xce4>
    3620:	ldr	x1, [x1, #160]
    3624:	cbz	x1, 3630 <PyThread_acquire_lock@plt+0xc70>
    3628:	ldr	x1, [x1]
    362c:	cbnz	x1, 363c <PyThread_acquire_lock@plt+0xc7c>
    3630:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3634:	add	x1, x1, #0x7ed
    3638:	b	3608 <PyThread_acquire_lock@plt+0xc48>
    363c:	add	x21, sp, #0x30
    3640:	mov	w2, #0x0                   	// #0
    3644:	mov	x1, x21
    3648:	bl	2750 <PyObject_GetBuffer@plt>
    364c:	cmn	w0, #0x1
    3650:	b.eq	3618 <PyThread_acquire_lock@plt+0xc58>  // b.none
    3654:	ldr	w0, [sp, #84]
    3658:	cmp	w0, #0x1
    365c:	b.le	3684 <PyThread_acquire_lock@plt+0xcc4>
    3660:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3664:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3668:	add	x1, x1, #0x817
    366c:	ldr	x0, [x0, #4024]
    3670:	ldr	x0, [x0]
    3674:	bl	2920 <PyErr_SetString@plt>
    3678:	mov	x0, x21
    367c:	bl	2970 <PyBuffer_Release@plt>
    3680:	b	3618 <PyThread_acquire_lock@plt+0xc58>
    3684:	ldr	x1, [sp, #48]
    3688:	mov	x0, x19
    368c:	ldr	x2, [sp, #64]
    3690:	bl	341c <PyThread_acquire_lock@plt+0xa5c>
    3694:	mov	x19, x0
    3698:	cbz	x20, 36a4 <PyThread_acquire_lock@plt+0xce4>
    369c:	add	x0, sp, #0x30
    36a0:	bl	2970 <PyBuffer_Release@plt>
    36a4:	mov	x0, x19
    36a8:	ldp	x19, x20, [sp, #16]
    36ac:	ldr	x21, [sp, #32]
    36b0:	ldp	x29, x30, [sp], #128
    36b4:	ret
    36b8:	sub	sp, sp, #0x40
    36bc:	mov	x0, x1
    36c0:	mov	x1, x2
    36c4:	stp	x29, x30, [sp, #16]
    36c8:	add	x29, sp, #0x10
    36cc:	str	x19, [sp, #32]
    36d0:	cbz	x3, 3740 <PyThread_acquire_lock@plt+0xd80>
    36d4:	ldr	x2, [x3, #16]
    36d8:	add	x19, x2, x1
    36dc:	cbnz	x3, 36ec <PyThread_acquire_lock@plt+0xd2c>
    36e0:	cmp	x0, #0x0
    36e4:	ccmp	x1, #0x1, #0x2, ne  // ne = any
    36e8:	b.ls	3718 <PyThread_acquire_lock@plt+0xd58>  // b.plast
    36ec:	add	x2, sp, #0x38
    36f0:	str	x2, [sp]
    36f4:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    36f8:	add	x4, x4, #0x260
    36fc:	add	x4, x4, #0x1e0
    3700:	mov	w7, #0x0                   	// #0
    3704:	mov	w6, #0x1                   	// #1
    3708:	mov	w5, #0x0                   	// #0
    370c:	mov	x2, #0x0                   	// #0
    3710:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3714:	cbz	x0, 3730 <PyThread_acquire_lock@plt+0xd70>
    3718:	cbz	x19, 3748 <PyThread_acquire_lock@plt+0xd88>
    371c:	ldr	x19, [x0]
    3720:	bl	2940 <EVP_sha512@plt>
    3724:	mov	x1, x0
    3728:	mov	x0, x19
    372c:	bl	35c4 <PyThread_acquire_lock@plt+0xc04>
    3730:	ldp	x29, x30, [sp, #16]
    3734:	ldr	x19, [sp, #32]
    3738:	add	sp, sp, #0x40
    373c:	ret
    3740:	mov	x2, #0x0                   	// #0
    3744:	b	36d8 <PyThread_acquire_lock@plt+0xd18>
    3748:	mov	x19, #0x0                   	// #0
    374c:	b	3720 <PyThread_acquire_lock@plt+0xd60>
    3750:	sub	sp, sp, #0x40
    3754:	mov	x0, x1
    3758:	mov	x1, x2
    375c:	stp	x29, x30, [sp, #16]
    3760:	add	x29, sp, #0x10
    3764:	str	x19, [sp, #32]
    3768:	cbz	x3, 37d8 <PyThread_acquire_lock@plt+0xe18>
    376c:	ldr	x2, [x3, #16]
    3770:	add	x19, x2, x1
    3774:	cbnz	x3, 3784 <PyThread_acquire_lock@plt+0xdc4>
    3778:	cmp	x0, #0x0
    377c:	ccmp	x1, #0x1, #0x2, ne  // ne = any
    3780:	b.ls	37b0 <PyThread_acquire_lock@plt+0xdf0>  // b.plast
    3784:	add	x2, sp, #0x38
    3788:	str	x2, [sp]
    378c:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    3790:	add	x4, x4, #0x260
    3794:	add	x4, x4, #0x220
    3798:	mov	w7, #0x0                   	// #0
    379c:	mov	w6, #0x1                   	// #1
    37a0:	mov	w5, #0x0                   	// #0
    37a4:	mov	x2, #0x0                   	// #0
    37a8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    37ac:	cbz	x0, 37c8 <PyThread_acquire_lock@plt+0xe08>
    37b0:	cbz	x19, 37e0 <PyThread_acquire_lock@plt+0xe20>
    37b4:	ldr	x19, [x0]
    37b8:	bl	25c0 <EVP_sha384@plt>
    37bc:	mov	x1, x0
    37c0:	mov	x0, x19
    37c4:	bl	35c4 <PyThread_acquire_lock@plt+0xc04>
    37c8:	ldp	x29, x30, [sp, #16]
    37cc:	ldr	x19, [sp, #32]
    37d0:	add	sp, sp, #0x40
    37d4:	ret
    37d8:	mov	x2, #0x0                   	// #0
    37dc:	b	3770 <PyThread_acquire_lock@plt+0xdb0>
    37e0:	mov	x19, #0x0                   	// #0
    37e4:	b	37b8 <PyThread_acquire_lock@plt+0xdf8>
    37e8:	sub	sp, sp, #0x40
    37ec:	mov	x0, x1
    37f0:	mov	x1, x2
    37f4:	stp	x29, x30, [sp, #16]
    37f8:	add	x29, sp, #0x10
    37fc:	str	x19, [sp, #32]
    3800:	cbz	x3, 3870 <PyThread_acquire_lock@plt+0xeb0>
    3804:	ldr	x2, [x3, #16]
    3808:	add	x19, x2, x1
    380c:	cbnz	x3, 381c <PyThread_acquire_lock@plt+0xe5c>
    3810:	cmp	x0, #0x0
    3814:	ccmp	x1, #0x1, #0x2, ne  // ne = any
    3818:	b.ls	3848 <PyThread_acquire_lock@plt+0xe88>  // b.plast
    381c:	add	x2, sp, #0x38
    3820:	str	x2, [sp]
    3824:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    3828:	add	x4, x4, #0x260
    382c:	add	x4, x4, #0x260
    3830:	mov	w7, #0x0                   	// #0
    3834:	mov	w6, #0x1                   	// #1
    3838:	mov	w5, #0x0                   	// #0
    383c:	mov	x2, #0x0                   	// #0
    3840:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3844:	cbz	x0, 3860 <PyThread_acquire_lock@plt+0xea0>
    3848:	cbz	x19, 3878 <PyThread_acquire_lock@plt+0xeb8>
    384c:	ldr	x19, [x0]
    3850:	bl	2950 <EVP_sha256@plt>
    3854:	mov	x1, x0
    3858:	mov	x0, x19
    385c:	bl	35c4 <PyThread_acquire_lock@plt+0xc04>
    3860:	ldp	x29, x30, [sp, #16]
    3864:	ldr	x19, [sp, #32]
    3868:	add	sp, sp, #0x40
    386c:	ret
    3870:	mov	x2, #0x0                   	// #0
    3874:	b	3808 <PyThread_acquire_lock@plt+0xe48>
    3878:	mov	x19, #0x0                   	// #0
    387c:	b	3850 <PyThread_acquire_lock@plt+0xe90>
    3880:	sub	sp, sp, #0x40
    3884:	mov	x0, x1
    3888:	mov	x1, x2
    388c:	stp	x29, x30, [sp, #16]
    3890:	add	x29, sp, #0x10
    3894:	str	x19, [sp, #32]
    3898:	cbz	x3, 3908 <PyThread_acquire_lock@plt+0xf48>
    389c:	ldr	x2, [x3, #16]
    38a0:	add	x19, x2, x1
    38a4:	cbnz	x3, 38b4 <PyThread_acquire_lock@plt+0xef4>
    38a8:	cmp	x0, #0x0
    38ac:	ccmp	x1, #0x1, #0x2, ne  // ne = any
    38b0:	b.ls	38e0 <PyThread_acquire_lock@plt+0xf20>  // b.plast
    38b4:	add	x2, sp, #0x38
    38b8:	str	x2, [sp]
    38bc:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    38c0:	add	x4, x4, #0x260
    38c4:	add	x4, x4, #0x2a0
    38c8:	mov	w7, #0x0                   	// #0
    38cc:	mov	w6, #0x1                   	// #1
    38d0:	mov	w5, #0x0                   	// #0
    38d4:	mov	x2, #0x0                   	// #0
    38d8:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    38dc:	cbz	x0, 38f8 <PyThread_acquire_lock@plt+0xf38>
    38e0:	cbz	x19, 3910 <PyThread_acquire_lock@plt+0xf50>
    38e4:	ldr	x19, [x0]
    38e8:	bl	27c0 <EVP_sha224@plt>
    38ec:	mov	x1, x0
    38f0:	mov	x0, x19
    38f4:	bl	35c4 <PyThread_acquire_lock@plt+0xc04>
    38f8:	ldp	x29, x30, [sp, #16]
    38fc:	ldr	x19, [sp, #32]
    3900:	add	sp, sp, #0x40
    3904:	ret
    3908:	mov	x2, #0x0                   	// #0
    390c:	b	38a0 <PyThread_acquire_lock@plt+0xee0>
    3910:	mov	x19, #0x0                   	// #0
    3914:	b	38e8 <PyThread_acquire_lock@plt+0xf28>
    3918:	sub	sp, sp, #0x40
    391c:	mov	x0, x1
    3920:	mov	x1, x2
    3924:	stp	x29, x30, [sp, #16]
    3928:	add	x29, sp, #0x10
    392c:	str	x19, [sp, #32]
    3930:	cbz	x3, 39a0 <PyThread_acquire_lock@plt+0xfe0>
    3934:	ldr	x2, [x3, #16]
    3938:	add	x19, x2, x1
    393c:	cbnz	x3, 394c <PyThread_acquire_lock@plt+0xf8c>
    3940:	cmp	x0, #0x0
    3944:	ccmp	x1, #0x1, #0x2, ne  // ne = any
    3948:	b.ls	3978 <PyThread_acquire_lock@plt+0xfb8>  // b.plast
    394c:	add	x2, sp, #0x38
    3950:	str	x2, [sp]
    3954:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    3958:	add	x4, x4, #0x260
    395c:	add	x4, x4, #0x2e0
    3960:	mov	w7, #0x0                   	// #0
    3964:	mov	w6, #0x1                   	// #1
    3968:	mov	w5, #0x0                   	// #0
    396c:	mov	x2, #0x0                   	// #0
    3970:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3974:	cbz	x0, 3990 <PyThread_acquire_lock@plt+0xfd0>
    3978:	cbz	x19, 39a8 <PyThread_acquire_lock@plt+0xfe8>
    397c:	ldr	x19, [x0]
    3980:	bl	2820 <EVP_sha1@plt>
    3984:	mov	x1, x0
    3988:	mov	x0, x19
    398c:	bl	35c4 <PyThread_acquire_lock@plt+0xc04>
    3990:	ldp	x29, x30, [sp, #16]
    3994:	ldr	x19, [sp, #32]
    3998:	add	sp, sp, #0x40
    399c:	ret
    39a0:	mov	x2, #0x0                   	// #0
    39a4:	b	3938 <PyThread_acquire_lock@plt+0xf78>
    39a8:	mov	x19, #0x0                   	// #0
    39ac:	b	3980 <PyThread_acquire_lock@plt+0xfc0>
    39b0:	sub	sp, sp, #0x40
    39b4:	mov	x0, x1
    39b8:	mov	x1, x2
    39bc:	stp	x29, x30, [sp, #16]
    39c0:	add	x29, sp, #0x10
    39c4:	str	x19, [sp, #32]
    39c8:	cbz	x3, 3a38 <PyThread_acquire_lock@plt+0x1078>
    39cc:	ldr	x2, [x3, #16]
    39d0:	add	x19, x2, x1
    39d4:	cbnz	x3, 39e4 <PyThread_acquire_lock@plt+0x1024>
    39d8:	cmp	x0, #0x0
    39dc:	ccmp	x1, #0x1, #0x2, ne  // ne = any
    39e0:	b.ls	3a10 <PyThread_acquire_lock@plt+0x1050>  // b.plast
    39e4:	add	x2, sp, #0x38
    39e8:	str	x2, [sp]
    39ec:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    39f0:	add	x4, x4, #0x260
    39f4:	add	x4, x4, #0x320
    39f8:	mov	w7, #0x0                   	// #0
    39fc:	mov	w6, #0x1                   	// #1
    3a00:	mov	w5, #0x0                   	// #0
    3a04:	mov	x2, #0x0                   	// #0
    3a08:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3a0c:	cbz	x0, 3a28 <PyThread_acquire_lock@plt+0x1068>
    3a10:	cbz	x19, 3a40 <PyThread_acquire_lock@plt+0x1080>
    3a14:	ldr	x19, [x0]
    3a18:	bl	2690 <EVP_md5@plt>
    3a1c:	mov	x1, x0
    3a20:	mov	x0, x19
    3a24:	bl	35c4 <PyThread_acquire_lock@plt+0xc04>
    3a28:	ldp	x29, x30, [sp, #16]
    3a2c:	ldr	x19, [sp, #32]
    3a30:	add	sp, sp, #0x40
    3a34:	ret
    3a38:	mov	x2, #0x0                   	// #0
    3a3c:	b	39d0 <PyThread_acquire_lock@plt+0x1010>
    3a40:	mov	x19, #0x0                   	// #0
    3a44:	b	3a18 <PyThread_acquire_lock@plt+0x1058>
    3a48:	sub	sp, sp, #0xb0
    3a4c:	stp	x29, x30, [sp, #16]
    3a50:	add	x29, sp, #0x10
    3a54:	stp	x19, x20, [sp, #32]
    3a58:	mov	x19, x1
    3a5c:	mov	x1, x2
    3a60:	str	x21, [sp, #48]
    3a64:	cbz	x3, 3b10 <PyThread_acquire_lock@plt+0x1150>
    3a68:	ldr	x0, [x3, #16]
    3a6c:	add	x20, x0, x1
    3a70:	cmp	x3, #0x0
    3a74:	sub	x0, x1, #0x1
    3a78:	ccmp	x0, #0x1, #0x2, eq  // eq = none
    3a7c:	b.hi	3a84 <PyThread_acquire_lock@plt+0x10c4>  // b.pmore
    3a80:	cbnz	x19, 3ab8 <PyThread_acquire_lock@plt+0x10f8>
    3a84:	add	x0, sp, #0x50
    3a88:	str	x0, [sp]
    3a8c:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    3a90:	add	x4, x4, #0x260
    3a94:	mov	x0, x19
    3a98:	add	x4, x4, #0x360
    3a9c:	mov	w7, #0x0                   	// #0
    3aa0:	mov	w6, #0x2                   	// #2
    3aa4:	mov	w5, #0x1                   	// #1
    3aa8:	mov	x2, #0x0                   	// #0
    3aac:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3ab0:	mov	x19, x0
    3ab4:	cbz	x0, 3c08 <PyThread_acquire_lock@plt+0x1248>
    3ab8:	cmp	x20, #0x1
    3abc:	ldr	x0, [x19]
    3ac0:	b.eq	3b18 <PyThread_acquire_lock@plt+0x1158>  // b.none
    3ac4:	ldr	x21, [x19, #8]
    3ac8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3acc:	add	x2, sp, #0x48
    3ad0:	add	x1, x1, #0x756
    3ad4:	stp	xzr, xzr, [sp, #96]
    3ad8:	stp	xzr, xzr, [sp, #112]
    3adc:	stp	xzr, xzr, [sp, #128]
    3ae0:	stp	xzr, xzr, [sp, #144]
    3ae4:	stp	xzr, xzr, [sp, #160]
    3ae8:	bl	2880 <_PyArg_Parse_SizeT@plt>
    3aec:	cbnz	w0, 3b20 <PyThread_acquire_lock@plt+0x1160>
    3af0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3af4:	add	x1, x1, #0x8ef
    3af8:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3afc:	ldr	x0, [x0, #4000]
    3b00:	ldr	x0, [x0]
    3b04:	bl	2920 <PyErr_SetString@plt>
    3b08:	mov	x19, #0x0                   	// #0
    3b0c:	b	3c08 <PyThread_acquire_lock@plt+0x1248>
    3b10:	mov	x0, #0x0                   	// #0
    3b14:	b	3a6c <PyThread_acquire_lock@plt+0x10ac>
    3b18:	mov	x21, #0x0                   	// #0
    3b1c:	b	3ac8 <PyThread_acquire_lock@plt+0x1108>
    3b20:	cbz	x21, 3ba4 <PyThread_acquire_lock@plt+0x11e4>
    3b24:	ldr	x0, [x21, #8]
    3b28:	ldr	x1, [x0, #168]
    3b2c:	tbz	w1, #28, 3b3c <PyThread_acquire_lock@plt+0x117c>
    3b30:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3b34:	add	x1, x1, #0x7be
    3b38:	b	3af8 <PyThread_acquire_lock@plt+0x1138>
    3b3c:	ldr	x0, [x0, #160]
    3b40:	cbz	x0, 3b4c <PyThread_acquire_lock@plt+0x118c>
    3b44:	ldr	x0, [x0]
    3b48:	cbnz	x0, 3b58 <PyThread_acquire_lock@plt+0x1198>
    3b4c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3b50:	add	x1, x1, #0x7ed
    3b54:	b	3af8 <PyThread_acquire_lock@plt+0x1138>
    3b58:	add	x19, sp, #0x60
    3b5c:	mov	x0, x21
    3b60:	mov	x1, x19
    3b64:	mov	w2, #0x0                   	// #0
    3b68:	bl	2750 <PyObject_GetBuffer@plt>
    3b6c:	cmn	w0, #0x1
    3b70:	b.eq	3b08 <PyThread_acquire_lock@plt+0x1148>  // b.none
    3b74:	ldr	w0, [sp, #132]
    3b78:	cmp	w0, #0x1
    3b7c:	b.le	3ba4 <PyThread_acquire_lock@plt+0x11e4>
    3b80:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3b84:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3b88:	add	x1, x1, #0x817
    3b8c:	ldr	x0, [x0, #4024]
    3b90:	ldr	x0, [x0]
    3b94:	bl	2920 <PyErr_SetString@plt>
    3b98:	mov	x0, x19
    3b9c:	bl	2970 <PyBuffer_Release@plt>
    3ba0:	b	3b08 <PyThread_acquire_lock@plt+0x1148>
    3ba4:	ldr	x20, [sp, #72]
    3ba8:	mov	x0, x20
    3bac:	bl	2640 <EVP_get_digestbyname@plt>
    3bb0:	mov	x19, x0
    3bb4:	cbnz	x0, 3be8 <PyThread_acquire_lock@plt+0x1228>
    3bb8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3bbc:	mov	x0, x20
    3bc0:	add	x1, x1, #0x768
    3bc4:	bl	28a0 <strcmp@plt>
    3bc8:	cbz	w0, 3be0 <PyThread_acquire_lock@plt+0x1220>
    3bcc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3bd0:	mov	x0, x20
    3bd4:	add	x1, x1, #0x905
    3bd8:	bl	28a0 <strcmp@plt>
    3bdc:	cbnz	w0, 3c20 <PyThread_acquire_lock@plt+0x1260>
    3be0:	bl	2570 <EVP_sha512_224@plt>
    3be4:	mov	x19, x0
    3be8:	ldr	x1, [sp, #96]
    3bec:	mov	x0, x19
    3bf0:	ldr	x2, [sp, #112]
    3bf4:	bl	341c <PyThread_acquire_lock@plt+0xa5c>
    3bf8:	mov	x19, x0
    3bfc:	cbz	x21, 3c08 <PyThread_acquire_lock@plt+0x1248>
    3c00:	add	x0, sp, #0x60
    3c04:	bl	2970 <PyBuffer_Release@plt>
    3c08:	mov	x0, x19
    3c0c:	ldp	x29, x30, [sp, #16]
    3c10:	ldp	x19, x20, [sp, #32]
    3c14:	ldr	x21, [sp, #48]
    3c18:	add	sp, sp, #0xb0
    3c1c:	ret
    3c20:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3c24:	mov	x0, x20
    3c28:	add	x1, x1, #0x773
    3c2c:	bl	28a0 <strcmp@plt>
    3c30:	cbz	w0, 3c48 <PyThread_acquire_lock@plt+0x1288>
    3c34:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3c38:	mov	x0, x20
    3c3c:	add	x1, x1, #0x910
    3c40:	bl	28a0 <strcmp@plt>
    3c44:	cbnz	w0, 3c50 <PyThread_acquire_lock@plt+0x1290>
    3c48:	bl	2960 <EVP_sha512_256@plt>
    3c4c:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3c50:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3c54:	mov	x0, x20
    3c58:	add	x1, x1, #0x77e
    3c5c:	bl	28a0 <strcmp@plt>
    3c60:	cbnz	w0, 3c6c <PyThread_acquire_lock@plt+0x12ac>
    3c64:	bl	2900 <EVP_sha3_224@plt>
    3c68:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3c6c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3c70:	mov	x0, x20
    3c74:	add	x1, x1, #0x787
    3c78:	bl	28a0 <strcmp@plt>
    3c7c:	cbnz	w0, 3c88 <PyThread_acquire_lock@plt+0x12c8>
    3c80:	bl	27d0 <EVP_sha3_256@plt>
    3c84:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3c88:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3c8c:	mov	x0, x20
    3c90:	add	x1, x1, #0x790
    3c94:	bl	28a0 <strcmp@plt>
    3c98:	cbnz	w0, 3ca4 <PyThread_acquire_lock@plt+0x12e4>
    3c9c:	bl	2790 <EVP_sha3_384@plt>
    3ca0:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3ca4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3ca8:	mov	x0, x20
    3cac:	add	x1, x1, #0x799
    3cb0:	bl	28a0 <strcmp@plt>
    3cb4:	cbnz	w0, 3cc0 <PyThread_acquire_lock@plt+0x1300>
    3cb8:	bl	25f0 <EVP_sha3_512@plt>
    3cbc:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3cc0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3cc4:	mov	x0, x20
    3cc8:	add	x1, x1, #0x7a2
    3ccc:	bl	28a0 <strcmp@plt>
    3cd0:	cbnz	w0, 3cdc <PyThread_acquire_lock@plt+0x131c>
    3cd4:	bl	2680 <EVP_shake128@plt>
    3cd8:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3cdc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3ce0:	mov	x0, x20
    3ce4:	add	x1, x1, #0x7ac
    3ce8:	bl	28a0 <strcmp@plt>
    3cec:	cbnz	w0, 3cf8 <PyThread_acquire_lock@plt+0x1338>
    3cf0:	bl	25b0 <EVP_shake256@plt>
    3cf4:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3cf8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3cfc:	mov	x0, x20
    3d00:	add	x1, x1, #0x91b
    3d04:	bl	28a0 <strcmp@plt>
    3d08:	cbnz	w0, 3d14 <PyThread_acquire_lock@plt+0x1354>
    3d0c:	bl	2580 <EVP_blake2s256@plt>
    3d10:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3d14:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3d18:	mov	x0, x20
    3d1c:	add	x1, x1, #0x926
    3d20:	bl	28a0 <strcmp@plt>
    3d24:	cbnz	w0, 3be8 <PyThread_acquire_lock@plt+0x1228>
    3d28:	bl	28b0 <EVP_blake2b512@plt>
    3d2c:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3d30:	sub	sp, sp, #0x140
    3d34:	stp	x29, x30, [sp, #16]
    3d38:	add	x29, sp, #0x10
    3d3c:	stp	x19, x20, [sp, #32]
    3d40:	mov	x19, x1
    3d44:	stp	x21, x22, [sp, #48]
    3d48:	mov	x21, x2
    3d4c:	stp	x23, x24, [sp, #64]
    3d50:	str	x25, [sp, #80]
    3d54:	cbz	x3, 3dd4 <PyThread_acquire_lock@plt+0x1414>
    3d58:	ldr	x20, [x3, #16]
    3d5c:	stp	xzr, xzr, [sp, #160]
    3d60:	cmp	x3, #0x0
    3d64:	stp	xzr, xzr, [sp, #176]
    3d68:	ccmp	x21, #0x1, #0x0, eq  // eq = none
    3d6c:	stp	xzr, xzr, [sp, #192]
    3d70:	stp	xzr, xzr, [sp, #208]
    3d74:	stp	xzr, xzr, [sp, #224]
    3d78:	stp	xzr, xzr, [sp, #240]
    3d7c:	stp	xzr, xzr, [sp, #256]
    3d80:	stp	xzr, xzr, [sp, #272]
    3d84:	stp	xzr, xzr, [sp, #288]
    3d88:	stp	xzr, xzr, [sp, #304]
    3d8c:	b.ne	3d94 <PyThread_acquire_lock@plt+0x13d4>  // b.any
    3d90:	cbnz	x19, 3ddc <PyThread_acquire_lock@plt+0x141c>
    3d94:	add	x0, sp, #0x68
    3d98:	str	x0, [sp]
    3d9c:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    3da0:	add	x4, x4, #0x260
    3da4:	mov	x0, x19
    3da8:	mov	w6, #0x1                   	// #1
    3dac:	add	x4, x4, #0x3a0
    3db0:	mov	w5, w6
    3db4:	mov	x1, x21
    3db8:	mov	w7, #0x0                   	// #0
    3dbc:	mov	x2, #0x0                   	// #0
    3dc0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3dc4:	mov	x19, x0
    3dc8:	cbnz	x0, 3ddc <PyThread_acquire_lock@plt+0x141c>
    3dcc:	mov	x19, #0x0                   	// #0
    3dd0:	b	406c <PyThread_acquire_lock@plt+0x16ac>
    3dd4:	mov	x20, #0x0                   	// #0
    3dd8:	b	3d5c <PyThread_acquire_lock@plt+0x139c>
    3ddc:	ldr	x0, [x19]
    3de0:	add	x22, sp, #0xa0
    3de4:	mov	x1, x22
    3de8:	mov	w2, #0x0                   	// #0
    3dec:	bl	2750 <PyObject_GetBuffer@plt>
    3df0:	cbnz	w0, 3dcc <PyThread_acquire_lock@plt+0x140c>
    3df4:	mov	x0, x22
    3df8:	mov	w1, #0x43                  	// #67
    3dfc:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3e00:	cbnz	w0, 3e28 <PyThread_acquire_lock@plt+0x1468>
    3e04:	ldr	x3, [x19]
    3e08:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e0c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e10:	add	x2, x2, #0x837
    3e14:	add	x1, x1, #0x931
    3e18:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e1c:	add	x0, x0, #0x945
    3e20:	bl	29b0 <_PyArg_BadArgument@plt>
    3e24:	b	3dcc <PyThread_acquire_lock@plt+0x140c>
    3e28:	add	x20, x20, x21
    3e2c:	subs	x21, x20, #0x1
    3e30:	b.ne	3e78 <PyThread_acquire_lock@plt+0x14b8>  // b.any
    3e34:	adrp	x20, 15000 <PyInit__hashlib@@Base+0x109b4>
    3e38:	mov	x22, #0x40                  	// #64
    3e3c:	mov	x21, #0x0                   	// #0
    3e40:	ldr	x20, [x20, #4056]
    3e44:	mov	x23, x20
    3e48:	mov	x24, x20
    3e4c:	ldr	x1, [sp, #176]
    3e50:	mov	x0, #0x7fffffff            	// #2147483647
    3e54:	cmp	x1, x0
    3e58:	b.le	404c <PyThread_acquire_lock@plt+0x168c>
    3e5c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3e60:	add	x1, x1, #0x9a8
    3e64:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3e68:	ldr	x0, [x0, #4064]
    3e6c:	ldr	x0, [x0]
    3e70:	bl	2920 <PyErr_SetString@plt>
    3e74:	b	3dcc <PyThread_acquire_lock@plt+0x140c>
    3e78:	ldr	x0, [x19, #8]
    3e7c:	cbz	x0, 3ec4 <PyThread_acquire_lock@plt+0x1504>
    3e80:	add	x21, sp, #0xf0
    3e84:	mov	w2, #0x0                   	// #0
    3e88:	mov	x1, x21
    3e8c:	bl	2750 <PyObject_GetBuffer@plt>
    3e90:	cbnz	w0, 3dcc <PyThread_acquire_lock@plt+0x140c>
    3e94:	mov	x0, x21
    3e98:	mov	w1, #0x43                  	// #67
    3e9c:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3ea0:	cbnz	w0, 3ebc <PyThread_acquire_lock@plt+0x14fc>
    3ea4:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3ea8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3eac:	add	x2, x2, #0x837
    3eb0:	add	x1, x1, #0x94c
    3eb4:	ldr	x3, [x19, #8]
    3eb8:	b	3e18 <PyThread_acquire_lock@plt+0x1458>
    3ebc:	subs	x21, x20, #0x2
    3ec0:	b.eq	3e34 <PyThread_acquire_lock@plt+0x1474>  // b.none
    3ec4:	ldr	x24, [x19, #16]
    3ec8:	cbz	x24, 3f0c <PyThread_acquire_lock@plt+0x154c>
    3ecc:	ldr	x0, [x24, #8]
    3ed0:	ldr	x0, [x0, #168]
    3ed4:	tbnz	w0, #24, 3ef0 <PyThread_acquire_lock@plt+0x1530>
    3ed8:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3edc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3ee0:	mov	x3, x24
    3ee4:	add	x2, x2, #0xa1f
    3ee8:	add	x1, x1, #0x95c
    3eec:	b	3e18 <PyThread_acquire_lock@plt+0x1458>
    3ef0:	subs	x21, x21, #0x1
    3ef4:	b.ne	3f14 <PyThread_acquire_lock@plt+0x1554>  // b.any
    3ef8:	adrp	x20, 15000 <PyInit__hashlib@@Base+0x109b4>
    3efc:	mov	x22, #0x40                  	// #64
    3f00:	ldr	x20, [x20, #4056]
    3f04:	mov	x23, x20
    3f08:	b	3e4c <PyThread_acquire_lock@plt+0x148c>
    3f0c:	adrp	x24, 15000 <PyInit__hashlib@@Base+0x109b4>
    3f10:	ldr	x24, [x24, #4056]
    3f14:	ldr	x23, [x19, #24]
    3f18:	cbz	x23, 3f58 <PyThread_acquire_lock@plt+0x1598>
    3f1c:	ldr	x0, [x23, #8]
    3f20:	ldr	x0, [x0, #168]
    3f24:	tbnz	w0, #24, 3f40 <PyThread_acquire_lock@plt+0x1580>
    3f28:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3f2c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3f30:	mov	x3, x23
    3f34:	add	x2, x2, #0xa1f
    3f38:	add	x1, x1, #0x969
    3f3c:	b	3e18 <PyThread_acquire_lock@plt+0x1458>
    3f40:	subs	x21, x21, #0x1
    3f44:	b.ne	3f60 <PyThread_acquire_lock@plt+0x15a0>  // b.any
    3f48:	adrp	x20, 15000 <PyInit__hashlib@@Base+0x109b4>
    3f4c:	mov	x22, #0x40                  	// #64
    3f50:	ldr	x20, [x20, #4056]
    3f54:	b	3e4c <PyThread_acquire_lock@plt+0x148c>
    3f58:	adrp	x23, 15000 <PyInit__hashlib@@Base+0x109b4>
    3f5c:	ldr	x23, [x23, #4056]
    3f60:	ldr	x20, [x19, #32]
    3f64:	cbz	x20, 3f9c <PyThread_acquire_lock@plt+0x15dc>
    3f68:	ldr	x0, [x20, #8]
    3f6c:	ldr	x0, [x0, #168]
    3f70:	tbnz	w0, #24, 3f8c <PyThread_acquire_lock@plt+0x15cc>
    3f74:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    3f78:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3f7c:	mov	x3, x20
    3f80:	add	x2, x2, #0xa1f
    3f84:	add	x1, x1, #0x976
    3f88:	b	3e18 <PyThread_acquire_lock@plt+0x1458>
    3f8c:	subs	x21, x21, #0x1
    3f90:	b.ne	3fa4 <PyThread_acquire_lock@plt+0x15e4>  // b.any
    3f94:	mov	x22, #0x40                  	// #64
    3f98:	b	3e4c <PyThread_acquire_lock@plt+0x148c>
    3f9c:	adrp	x20, 15000 <PyInit__hashlib@@Base+0x109b4>
    3fa0:	ldr	x20, [x20, #4056]
    3fa4:	adrp	x25, 15000 <PyInit__hashlib@@Base+0x109b4>
    3fa8:	ldr	x0, [x19, #40]
    3fac:	cbz	x0, 4044 <PyThread_acquire_lock@plt+0x1684>
    3fb0:	ldr	x1, [x25, #4040]
    3fb4:	ldr	x0, [x0, #8]
    3fb8:	cmp	x0, x1
    3fbc:	b.ne	3fd4 <PyThread_acquire_lock@plt+0x1614>  // b.any
    3fc0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    3fc4:	add	x1, x1, #0x983
    3fc8:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    3fcc:	ldr	x0, [x0, #4000]
    3fd0:	b	3e6c <PyThread_acquire_lock@plt+0x14ac>
    3fd4:	bl	2800 <PyType_IsSubtype@plt>
    3fd8:	cbnz	w0, 3fc0 <PyThread_acquire_lock@plt+0x1600>
    3fdc:	ldr	x0, [x19, #40]
    3fe0:	bl	26d0 <PyLong_AsLong@plt>
    3fe4:	mov	x22, x0
    3fe8:	cmn	x0, #0x1
    3fec:	b.eq	4038 <PyThread_acquire_lock@plt+0x1678>  // b.none
    3ff0:	cmp	x21, #0x1
    3ff4:	mov	x21, x22
    3ff8:	b.eq	3f94 <PyThread_acquire_lock@plt+0x15d4>  // b.none
    3ffc:	ldr	x0, [x19, #48]
    4000:	ldr	x1, [x25, #4040]
    4004:	ldr	x0, [x0, #8]
    4008:	cmp	x0, x1
    400c:	b.eq	3fc0 <PyThread_acquire_lock@plt+0x1600>  // b.none
    4010:	bl	2800 <PyType_IsSubtype@plt>
    4014:	cbnz	w0, 3fc0 <PyThread_acquire_lock@plt+0x1600>
    4018:	ldr	x0, [x19, #48]
    401c:	bl	26d0 <PyLong_AsLong@plt>
    4020:	mov	x22, x0
    4024:	cmn	x0, #0x1
    4028:	b.ne	3e4c <PyThread_acquire_lock@plt+0x148c>  // b.any
    402c:	bl	2720 <PyErr_Occurred@plt>
    4030:	cbz	x0, 3e4c <PyThread_acquire_lock@plt+0x148c>
    4034:	b	3dcc <PyThread_acquire_lock@plt+0x140c>
    4038:	bl	2720 <PyErr_Occurred@plt>
    403c:	cbz	x0, 3ff0 <PyThread_acquire_lock@plt+0x1630>
    4040:	b	3dcc <PyThread_acquire_lock@plt+0x140c>
    4044:	mov	x21, #0x0                   	// #0
    4048:	b	3ffc <PyThread_acquire_lock@plt+0x163c>
    404c:	ldr	x19, [sp, #240]
    4050:	cbnz	x19, 40ac <PyThread_acquire_lock@plt+0x16ec>
    4054:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    4058:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    405c:	add	x1, x1, #0x9be
    4060:	ldr	x0, [x0, #4000]
    4064:	ldr	x0, [x0]
    4068:	bl	2920 <PyErr_SetString@plt>
    406c:	ldr	x0, [sp, #168]
    4070:	cbz	x0, 407c <PyThread_acquire_lock@plt+0x16bc>
    4074:	add	x0, sp, #0xa0
    4078:	bl	2970 <PyBuffer_Release@plt>
    407c:	ldr	x0, [sp, #248]
    4080:	cbz	x0, 408c <PyThread_acquire_lock@plt+0x16cc>
    4084:	add	x0, sp, #0xf0
    4088:	bl	2970 <PyBuffer_Release@plt>
    408c:	mov	x0, x19
    4090:	ldp	x29, x30, [sp, #16]
    4094:	ldp	x19, x20, [sp, #32]
    4098:	ldp	x21, x22, [sp, #48]
    409c:	ldp	x23, x24, [sp, #64]
    40a0:	ldr	x25, [sp, #80]
    40a4:	add	sp, sp, #0x140
    40a8:	ret
    40ac:	ldr	x1, [sp, #256]
    40b0:	cmp	x1, x0
    40b4:	b.le	40c4 <PyThread_acquire_lock@plt+0x1704>
    40b8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    40bc:	add	x1, x1, #0x9cf
    40c0:	b	3e64 <PyThread_acquire_lock@plt+0x14a4>
    40c4:	mov	x0, x24
    40c8:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    40cc:	mov	x24, x0
    40d0:	cmn	x0, #0x1
    40d4:	b.ne	4100 <PyThread_acquire_lock@plt+0x1740>  // b.any
    40d8:	bl	2720 <PyErr_Occurred@plt>
    40dc:	cbnz	x0, 40f4 <PyThread_acquire_lock@plt+0x1734>
    40e0:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    40e4:	add	x1, x1, #0x9e1
    40e8:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    40ec:	ldr	x0, [x0, #3984]
    40f0:	b	3e6c <PyThread_acquire_lock@plt+0x14ac>
    40f4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    40f8:	add	x1, x1, #0x9f9
    40fc:	b	3fc8 <PyThread_acquire_lock@plt+0x1608>
    4100:	cmp	x0, #0x1
    4104:	b.ls	40e0 <PyThread_acquire_lock@plt+0x1720>  // b.plast
    4108:	sub	x0, x0, #0x1
    410c:	tst	x0, x24
    4110:	b.ne	40e0 <PyThread_acquire_lock@plt+0x1720>  // b.any
    4114:	mov	x0, x23
    4118:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    411c:	mov	x23, x0
    4120:	cmn	x0, #0x1
    4124:	b.ne	413c <PyThread_acquire_lock@plt+0x177c>  // b.any
    4128:	bl	2720 <PyErr_Occurred@plt>
    412c:	cbz	x0, 413c <PyThread_acquire_lock@plt+0x177c>
    4130:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4134:	add	x1, x1, #0xa23
    4138:	b	3fc8 <PyThread_acquire_lock@plt+0x1608>
    413c:	mov	x0, x20
    4140:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    4144:	mov	x20, x0
    4148:	cmn	x0, #0x1
    414c:	b.ne	4164 <PyThread_acquire_lock@plt+0x17a4>  // b.any
    4150:	bl	2720 <PyErr_Occurred@plt>
    4154:	cbz	x0, 4164 <PyThread_acquire_lock@plt+0x17a4>
    4158:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    415c:	add	x1, x1, #0xa4d
    4160:	b	3fc8 <PyThread_acquire_lock@plt+0x1608>
    4164:	mov	x2, #0x7fffffff            	// #2147483647
    4168:	cmp	x21, x2
    416c:	b.ls	418c <PyThread_acquire_lock@plt+0x17cc>  // b.plast
    4170:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4174:	add	x1, x1, #0xa77
    4178:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    417c:	ldr	x0, [x0, #3984]
    4180:	ldr	x0, [x0]
    4184:	bl	26f0 <PyErr_Format@plt>
    4188:	b	3dcc <PyThread_acquire_lock@plt+0x140c>
    418c:	sub	x1, x22, #0x1
    4190:	mov	x0, #0x7ffffffe            	// #2147483646
    4194:	cmp	x1, x0
    4198:	b.ls	41a8 <PyThread_acquire_lock@plt+0x17e8>  // b.plast
    419c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    41a0:	add	x1, x1, #0xaa3
    41a4:	b	4178 <PyThread_acquire_lock@plt+0x17b8>
    41a8:	stp	xzr, xzr, [sp]
    41ac:	mov	x7, x21
    41b0:	mov	x6, x20
    41b4:	mov	x5, x23
    41b8:	mov	x4, x24
    41bc:	mov	x3, #0x0                   	// #0
    41c0:	mov	x2, #0x0                   	// #0
    41c4:	mov	x1, #0x0                   	// #0
    41c8:	mov	x0, #0x0                   	// #0
    41cc:	bl	2830 <EVP_PBE_scrypt@plt>
    41d0:	cbnz	w0, 41e0 <PyThread_acquire_lock@plt+0x1820>
    41d4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    41d8:	add	x1, x1, #0xad4
    41dc:	b	40e8 <PyThread_acquire_lock@plt+0x1728>
    41e0:	mov	x1, x22
    41e4:	mov	x0, #0x0                   	// #0
    41e8:	bl	2870 <PyBytes_FromStringAndSize@plt>
    41ec:	mov	x19, x0
    41f0:	cbz	x0, 3dcc <PyThread_acquire_lock@plt+0x140c>
    41f4:	bl	27b0 <PyEval_SaveThread@plt>
    41f8:	mov	x25, x0
    41fc:	add	x0, x19, #0x20
    4200:	stp	x0, x22, [sp]
    4204:	mov	x6, x20
    4208:	ldr	x0, [sp, #160]
    420c:	mov	x7, x21
    4210:	ldr	x1, [sp, #176]
    4214:	mov	x5, x23
    4218:	ldr	x2, [sp, #240]
    421c:	mov	x4, x24
    4220:	ldr	x3, [sp, #256]
    4224:	bl	2830 <EVP_PBE_scrypt@plt>
    4228:	mov	w20, w0
    422c:	mov	x0, x25
    4230:	bl	2770 <PyEval_RestoreThread@plt>
    4234:	cbnz	w20, 406c <PyThread_acquire_lock@plt+0x16ac>
    4238:	mov	x0, x19
    423c:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    4240:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    4244:	ldr	x0, [x0, #3984]
    4248:	ldr	x0, [x0]
    424c:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    4250:	b	3dcc <PyThread_acquire_lock@plt+0x140c>
    4254:	sub	sp, sp, #0x120
    4258:	stp	x29, x30, [sp, #16]
    425c:	add	x29, sp, #0x10
    4260:	stp	x19, x20, [sp, #32]
    4264:	mov	x19, x1
    4268:	mov	x20, x2
    426c:	stp	x21, x22, [sp, #48]
    4270:	str	x23, [sp, #64]
    4274:	cbz	x3, 4330 <PyThread_acquire_lock@plt+0x1970>
    4278:	ldr	x23, [x3, #16]
    427c:	stp	xzr, xzr, [sp, #128]
    4280:	sub	x0, x20, #0x4
    4284:	stp	xzr, xzr, [sp, #144]
    4288:	cmp	x3, #0x0
    428c:	ccmp	x0, #0x1, #0x2, eq  // eq = none
    4290:	stp	xzr, xzr, [sp, #160]
    4294:	stp	xzr, xzr, [sp, #176]
    4298:	stp	xzr, xzr, [sp, #192]
    429c:	stp	xzr, xzr, [sp, #208]
    42a0:	stp	xzr, xzr, [sp, #224]
    42a4:	stp	xzr, xzr, [sp, #240]
    42a8:	stp	xzr, xzr, [sp, #256]
    42ac:	stp	xzr, xzr, [sp, #272]
    42b0:	b.hi	42b8 <PyThread_acquire_lock@plt+0x18f8>  // b.pmore
    42b4:	cbnz	x19, 4338 <PyThread_acquire_lock@plt+0x1978>
    42b8:	add	x0, sp, #0x58
    42bc:	str	x0, [sp]
    42c0:	adrp	x4, 16000 <PyInit__hashlib@@Base+0x119b4>
    42c4:	add	x4, x4, #0x260
    42c8:	mov	x0, x19
    42cc:	add	x4, x4, #0x3e0
    42d0:	mov	x1, x20
    42d4:	mov	w7, #0x0                   	// #0
    42d8:	mov	w6, #0x5                   	// #5
    42dc:	mov	w5, #0x4                   	// #4
    42e0:	mov	x2, #0x0                   	// #0
    42e4:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    42e8:	mov	x19, x0
    42ec:	cbnz	x0, 4338 <PyThread_acquire_lock@plt+0x1978>
    42f0:	mov	x19, #0x0                   	// #0
    42f4:	ldr	x0, [sp, #136]
    42f8:	cbz	x0, 4304 <PyThread_acquire_lock@plt+0x1944>
    42fc:	add	x0, sp, #0x80
    4300:	bl	2970 <PyBuffer_Release@plt>
    4304:	ldr	x0, [sp, #216]
    4308:	cbz	x0, 4314 <PyThread_acquire_lock@plt+0x1954>
    430c:	add	x0, sp, #0xd0
    4310:	bl	2970 <PyBuffer_Release@plt>
    4314:	mov	x0, x19
    4318:	ldp	x29, x30, [sp, #16]
    431c:	ldp	x19, x20, [sp, #32]
    4320:	ldp	x21, x22, [sp, #48]
    4324:	ldr	x23, [sp, #64]
    4328:	add	sp, sp, #0x120
    432c:	ret
    4330:	mov	x23, #0x0                   	// #0
    4334:	b	427c <PyThread_acquire_lock@plt+0x18bc>
    4338:	ldr	x0, [x19]
    433c:	ldr	x1, [x0, #8]
    4340:	ldr	x1, [x1, #168]
    4344:	tbnz	w1, #28, 436c <PyThread_acquire_lock@plt+0x19ac>
    4348:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    434c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4350:	mov	x3, x0
    4354:	add	x2, x2, #0x873
    4358:	add	x1, x1, #0xb07
    435c:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    4360:	add	x0, x0, #0xb1c
    4364:	bl	29b0 <_PyArg_BadArgument@plt>
    4368:	b	42f0 <PyThread_acquire_lock@plt+0x1930>
    436c:	add	x1, sp, #0x50
    4370:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    4374:	mov	x22, x0
    4378:	cbz	x0, 42f0 <PyThread_acquire_lock@plt+0x1930>
    437c:	bl	2980 <strlen@plt>
    4380:	ldr	x1, [sp, #80]
    4384:	cmp	x0, x1
    4388:	b.eq	43a0 <PyThread_acquire_lock@plt+0x19e0>  // b.none
    438c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4390:	add	x1, x1, #0x889
    4394:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    4398:	ldr	x0, [x0, #3984]
    439c:	b	4448 <PyThread_acquire_lock@plt+0x1a88>
    43a0:	ldr	x0, [x19, #8]
    43a4:	add	x21, sp, #0x80
    43a8:	mov	x1, x21
    43ac:	mov	w2, #0x0                   	// #0
    43b0:	bl	2750 <PyObject_GetBuffer@plt>
    43b4:	cbnz	w0, 42f0 <PyThread_acquire_lock@plt+0x1930>
    43b8:	mov	x0, x21
    43bc:	mov	w1, #0x43                  	// #67
    43c0:	bl	27f0 <PyBuffer_IsContiguous@plt>
    43c4:	cbnz	w0, 43e0 <PyThread_acquire_lock@plt+0x1a20>
    43c8:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    43cc:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    43d0:	add	x2, x2, #0x837
    43d4:	add	x1, x1, #0x931
    43d8:	ldr	x3, [x19, #8]
    43dc:	b	435c <PyThread_acquire_lock@plt+0x199c>
    43e0:	ldr	x0, [x19, #16]
    43e4:	add	x21, sp, #0xd0
    43e8:	mov	x1, x21
    43ec:	mov	w2, #0x0                   	// #0
    43f0:	bl	2750 <PyObject_GetBuffer@plt>
    43f4:	cbnz	w0, 42f0 <PyThread_acquire_lock@plt+0x1930>
    43f8:	mov	x0, x21
    43fc:	mov	w1, #0x43                  	// #67
    4400:	bl	27f0 <PyBuffer_IsContiguous@plt>
    4404:	cbnz	w0, 4420 <PyThread_acquire_lock@plt+0x1a60>
    4408:	adrp	x2, 4000 <PyThread_acquire_lock@plt+0x1640>
    440c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4410:	add	x2, x2, #0x837
    4414:	add	x1, x1, #0x94c
    4418:	ldr	x3, [x19, #16]
    441c:	b	435c <PyThread_acquire_lock@plt+0x199c>
    4420:	ldr	x0, [x19, #24]
    4424:	adrp	x1, 15000 <PyInit__hashlib@@Base+0x109b4>
    4428:	ldr	x1, [x1, #4040]
    442c:	ldr	x0, [x0, #8]
    4430:	cmp	x0, x1
    4434:	b.ne	4454 <PyThread_acquire_lock@plt+0x1a94>  // b.any
    4438:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    443c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4440:	add	x1, x1, #0x983
    4444:	ldr	x0, [x0, #4000]
    4448:	ldr	x0, [x0]
    444c:	bl	2920 <PyErr_SetString@plt>
    4450:	b	42f0 <PyThread_acquire_lock@plt+0x1930>
    4454:	bl	2800 <PyType_IsSubtype@plt>
    4458:	cbnz	w0, 4438 <PyThread_acquire_lock@plt+0x1a78>
    445c:	ldr	x0, [x19, #24]
    4460:	bl	26d0 <PyLong_AsLong@plt>
    4464:	mov	x21, x0
    4468:	cmn	x0, #0x1
    446c:	b.eq	4488 <PyThread_acquire_lock@plt+0x1ac8>  // b.none
    4470:	add	x20, x23, x20
    4474:	cmp	x20, #0x4
    4478:	b.ne	4494 <PyThread_acquire_lock@plt+0x1ad4>  // b.any
    447c:	adrp	x19, 15000 <PyInit__hashlib@@Base+0x109b4>
    4480:	ldr	x19, [x19, #4056]
    4484:	b	4498 <PyThread_acquire_lock@plt+0x1ad8>
    4488:	bl	2720 <PyErr_Occurred@plt>
    448c:	cbz	x0, 4470 <PyThread_acquire_lock@plt+0x1ab0>
    4490:	b	42f0 <PyThread_acquire_lock@plt+0x1930>
    4494:	ldr	x19, [x19, #32]
    4498:	mov	x0, x22
    449c:	bl	2640 <EVP_get_digestbyname@plt>
    44a0:	mov	x22, x0
    44a4:	cbnz	x0, 44b4 <PyThread_acquire_lock@plt+0x1af4>
    44a8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    44ac:	add	x1, x1, #0x8a1
    44b0:	b	4394 <PyThread_acquire_lock@plt+0x19d4>
    44b4:	ldr	x1, [sp, #144]
    44b8:	mov	x23, #0x7fffffff            	// #2147483647
    44bc:	cmp	x1, x23
    44c0:	b.le	44d8 <PyThread_acquire_lock@plt+0x1b18>
    44c4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    44c8:	add	x1, x1, #0x9a8
    44cc:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    44d0:	ldr	x0, [x0, #4064]
    44d4:	b	4448 <PyThread_acquire_lock@plt+0x1a88>
    44d8:	ldr	x1, [sp, #224]
    44dc:	cmp	x1, x23
    44e0:	b.le	44f0 <PyThread_acquire_lock@plt+0x1b30>
    44e4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    44e8:	add	x1, x1, #0x9cf
    44ec:	b	44cc <PyThread_acquire_lock@plt+0x1b0c>
    44f0:	cmp	x21, #0x0
    44f4:	b.gt	4504 <PyThread_acquire_lock@plt+0x1b44>
    44f8:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    44fc:	add	x1, x1, #0xb28
    4500:	b	4394 <PyThread_acquire_lock@plt+0x19d4>
    4504:	cmp	x21, x23
    4508:	b.le	4518 <PyThread_acquire_lock@plt+0x1b58>
    450c:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4510:	add	x1, x1, #0xb50
    4514:	b	44cc <PyThread_acquire_lock@plt+0x1b0c>
    4518:	adrp	x1, 15000 <PyInit__hashlib@@Base+0x109b4>
    451c:	ldr	x1, [x1, #4056]
    4520:	cmp	x19, x1
    4524:	b.ne	4544 <PyThread_acquire_lock@plt+0x1b84>  // b.any
    4528:	bl	26c0 <EVP_MD_size@plt>
    452c:	sxtw	x20, w0
    4530:	cmp	x20, #0x0
    4534:	b.gt	4580 <PyThread_acquire_lock@plt+0x1bc0>
    4538:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    453c:	add	x1, x1, #0xb6e
    4540:	b	4394 <PyThread_acquire_lock@plt+0x19d4>
    4544:	mov	x0, x19
    4548:	bl	26d0 <PyLong_AsLong@plt>
    454c:	mov	x20, x0
    4550:	cmn	x0, #0x1
    4554:	b.ne	4564 <PyThread_acquire_lock@plt+0x1ba4>  // b.any
    4558:	bl	2720 <PyErr_Occurred@plt>
    455c:	cbz	x0, 4538 <PyThread_acquire_lock@plt+0x1b78>
    4560:	b	42f0 <PyThread_acquire_lock@plt+0x1930>
    4564:	cmp	x0, #0x0
    4568:	b.le	4538 <PyThread_acquire_lock@plt+0x1b78>
    456c:	cmp	x0, x23
    4570:	b.le	4580 <PyThread_acquire_lock@plt+0x1bc0>
    4574:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4578:	add	x1, x1, #0xb91
    457c:	b	44cc <PyThread_acquire_lock@plt+0x1b0c>
    4580:	mov	x1, x20
    4584:	mov	x0, #0x0                   	// #0
    4588:	bl	2870 <PyBytes_FromStringAndSize@plt>
    458c:	mov	x19, x0
    4590:	cbz	x0, 42f0 <PyThread_acquire_lock@plt+0x1930>
    4594:	bl	27b0 <PyEval_SaveThread@plt>
    4598:	mov	x23, x0
    459c:	ldr	w1, [sp, #144]
    45a0:	mov	w6, w20
    45a4:	ldr	w3, [sp, #224]
    45a8:	add	x7, x19, #0x20
    45ac:	ldr	x0, [sp, #128]
    45b0:	mov	x5, x22
    45b4:	ldr	x2, [sp, #208]
    45b8:	mov	w4, w21
    45bc:	bl	2540 <PKCS5_PBKDF2_HMAC@plt>
    45c0:	mov	w20, w0
    45c4:	mov	x0, x23
    45c8:	bl	2770 <PyEval_RestoreThread@plt>
    45cc:	cbnz	w20, 42f4 <PyThread_acquire_lock@plt+0x1934>
    45d0:	mov	x0, x19
    45d4:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    45d8:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    45dc:	ldr	x0, [x0, #3984]
    45e0:	ldr	x0, [x0]
    45e4:	bl	2aa4 <PyThread_acquire_lock@plt+0xe4>
    45e8:	b	42f0 <PyThread_acquire_lock@plt+0x1930>
    45ec:	cbz	x0, 4648 <PyThread_acquire_lock@plt+0x1c88>
    45f0:	stp	x29, x30, [sp, #-32]!
    45f4:	mov	x29, sp
    45f8:	stp	x19, x20, [sp, #16]
    45fc:	mov	x20, x3
    4600:	bl	2b5c <PyThread_acquire_lock@plt+0x19c>
    4604:	mov	x19, x0
    4608:	cbnz	x0, 4620 <PyThread_acquire_lock@plt+0x1c60>
    460c:	mov	w0, #0x1                   	// #1
    4610:	str	w0, [x20, #8]
    4614:	ldp	x19, x20, [sp, #16]
    4618:	ldp	x29, x30, [sp], #32
    461c:	ret
    4620:	mov	x1, x0
    4624:	ldr	x0, [x20]
    4628:	bl	2850 <PySet_Add@plt>
    462c:	cbz	w0, 4638 <PyThread_acquire_lock@plt+0x1c78>
    4630:	mov	w0, #0x1                   	// #1
    4634:	str	w0, [x20, #8]
    4638:	mov	x0, x19
    463c:	ldp	x19, x20, [sp, #16]
    4640:	ldp	x29, x30, [sp], #32
    4644:	b	33b0 <PyThread_acquire_lock@plt+0x9f0>
    4648:	ret

000000000000464c <PyInit__hashlib@@Base>:
    464c:	stp	x29, x30, [sp, #-64]!
    4650:	adrp	x0, 15000 <PyInit__hashlib@@Base+0x109b4>
    4654:	mov	x29, sp
    4658:	stp	x19, x20, [sp, #16]
    465c:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x119b4>
    4660:	add	x20, x20, #0x260
    4664:	str	x21, [sp, #32]
    4668:	add	x21, x20, #0x40
    466c:	ldr	x0, [x0, #4048]
    4670:	str	x0, [x21, #8]
    4674:	mov	x0, x21
    4678:	bl	25a0 <PyType_Ready@plt>
    467c:	tbz	w0, #31, 4698 <PyInit__hashlib@@Base+0x4c>
    4680:	mov	x19, #0x0                   	// #0
    4684:	mov	x0, x19
    4688:	ldp	x19, x20, [sp, #16]
    468c:	ldr	x21, [sp, #32]
    4690:	ldp	x29, x30, [sp], #64
    4694:	ret
    4698:	add	x0, x20, #0x420
    469c:	mov	w1, #0x3f5                 	// #1013
    46a0:	bl	2910 <PyModule_Create2@plt>
    46a4:	mov	x19, x0
    46a8:	cbz	x0, 4680 <PyInit__hashlib@@Base+0x34>
    46ac:	mov	x0, #0x0                   	// #0
    46b0:	bl	27a0 <PyFrozenSet_New@plt>
    46b4:	str	x0, [sp, #48]
    46b8:	cbz	x0, 46e0 <PyInit__hashlib@@Base+0x94>
    46bc:	add	x1, sp, #0x30
    46c0:	adrp	x0, 4000 <PyThread_acquire_lock@plt+0x1640>
    46c4:	add	x0, x0, #0x5ec
    46c8:	str	wzr, [sp, #56]
    46cc:	bl	2710 <EVP_MD_do_all@plt>
    46d0:	ldr	w0, [sp, #56]
    46d4:	cbz	w0, 46ec <PyInit__hashlib@@Base+0xa0>
    46d8:	ldr	x0, [sp, #48]
    46dc:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    46e0:	mov	x0, x19
    46e4:	bl	33b0 <PyThread_acquire_lock@plt+0x9f0>
    46e8:	b	4680 <PyInit__hashlib@@Base+0x34>
    46ec:	ldr	x2, [sp, #48]
    46f0:	cbz	x2, 46e0 <PyInit__hashlib@@Base+0x94>
    46f4:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    46f8:	mov	x0, x19
    46fc:	add	x1, x1, #0xbaa
    4700:	bl	2520 <PyModule_AddObject@plt>
    4704:	cbnz	w0, 46e0 <PyInit__hashlib@@Base+0x94>
    4708:	ldr	x0, [x20, #64]
    470c:	mov	x2, x21
    4710:	adrp	x1, 4000 <PyThread_acquire_lock@plt+0x1640>
    4714:	add	x1, x1, #0xca2
    4718:	add	x0, x0, #0x1
    471c:	str	x0, [x20, #64]
    4720:	mov	x0, x19
    4724:	bl	2520 <PyModule_AddObject@plt>
    4728:	b	4684 <PyInit__hashlib@@Base+0x38>

Disassembly of section .fini:

000000000000472c <.fini>:
    472c:	stp	x29, x30, [sp, #-16]!
    4730:	mov	x29, sp
    4734:	ldp	x29, x30, [sp], #16
    4738:	ret
