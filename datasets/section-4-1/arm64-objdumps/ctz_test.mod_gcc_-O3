
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//ctz_test.mod_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_mod_init-0x578>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	adrp	x0, 0 <grub_mod_init-0x578>
   8:	adrp	x5, 0 <grub_mod_init-0x578>
   c:	mov	x29, sp
  10:	ldr	x7, [x0]
  14:	adrp	x4, 0 <grub_mod_init-0x578>
  18:	adrp	x3, 0 <grub_mod_init-0x578>
  1c:	adrp	x2, 0 <grub_mod_init-0x578>
  20:	adrp	x1, 0 <grub_mod_init-0x578>
  24:	adrp	x0, 0 <grub_mod_init-0x578>
  28:	adrp	x6, 0 <grub_mod_init-0x578>
  2c:	stp	x19, x20, [sp, #16]
  30:	ldr	x0, [x0]
  34:	stp	x21, x22, [sp, #32]
  38:	ldr	x20, [x5]
  3c:	mov	x5, x7
  40:	ldr	x1, [x1]
  44:	stp	x1, x0, [sp, #96]
  48:	mov	x0, x5
  4c:	ldr	x19, [x4]
  50:	stp	x23, x24, [sp, #48]
  54:	mov	w24, #0x0                   	// #0
  58:	ldr	x21, [x3]
  5c:	stp	x25, x26, [sp, #64]
  60:	add	x26, x7, #0x38
  64:	ldr	x22, [x2]
  68:	mov	w25, #0x0                   	// #0
  6c:	ldr	x6, [x6]
  70:	stp	x27, x28, [sp, #80]
  74:	mov	w27, #0x0                   	// #0
  78:	stp	x6, x7, [sp, #112]
  7c:	str	x7, [sp, #136]
  80:	mov	w7, #0x0                   	// #0
  84:	ldr	x0, [x0]
  88:	mov	w28, #0x0                   	// #0
  8c:	str	x0, [sp, #128]
  90:	orr	w23, w0, #0x1
  94:	mov	w6, w23
  98:	b	a4 <grub_mod_init-0x4d4>
  9c:	rbit	w7, w6
  a0:	clz	w7, w7
  a4:	adrp	x1, 0 <grub_mod_init-0x578>
  a8:	cmp	w28, w7
  ac:	ldr	x5, [sp, #112]
  b0:	add	w28, w28, #0x1
  b4:	ldr	x2, [x1]
  b8:	cset	w0, eq  // eq = none
  bc:	mov	x4, x20
  c0:	mov	x1, x19
  c4:	mov	w3, #0x2b                  	// #43
  c8:	bl	0 <grub_test_assert_helper>
  cc:	cmp	w28, #0x20
  d0:	lsl	w6, w23, w28
  d4:	b.ne	9c <grub_mod_init-0x4dc>  // b.any
  d8:	ldr	x0, [sp, #128]
  dc:	mov	w7, w24
  e0:	mov	w23, #0x0                   	// #0
  e4:	orr	x28, x0, #0x1
  e8:	mov	x6, x28
  ec:	b	100 <grub_mod_init-0x478>
  f0:	rbit	x27, x6
  f4:	rbit	w7, w6
  f8:	clz	x27, x27
  fc:	clz	w7, w7
 100:	adrp	x1, 0 <grub_mod_init-0x578>
 104:	cmp	w23, w27
 108:	add	w23, w23, #0x1
 10c:	cset	w0, eq  // eq = none
 110:	ldr	x2, [x1]
 114:	mov	x5, x21
 118:	mov	x4, x22
 11c:	mov	x1, x19
 120:	mov	w3, #0x38                  	// #56
 124:	bl	0 <grub_test_assert_helper>
 128:	cmp	w23, #0x40
 12c:	lsl	x6, x28, x23
 130:	b.ne	f0 <grub_mod_init-0x488>  // b.any
 134:	mov	x6, x28
 138:	mov	w23, #0x0                   	// #0
 13c:	b	150 <grub_mod_init-0x428>
 140:	rbit	x25, x6
 144:	rbit	w24, w6
 148:	clz	x25, x25
 14c:	clz	w24, w24
 150:	ldp	x5, x4, [sp, #96]
 154:	cmp	w23, w25
 158:	add	w23, w23, #0x1
 15c:	cset	w0, eq  // eq = none
 160:	mov	w7, w24
 164:	mov	x2, x26
 168:	mov	x1, x19
 16c:	mov	w3, #0x46                  	// #70
 170:	bl	0 <grub_test_assert_helper>
 174:	cmp	w23, #0x40
 178:	lsl	x6, x28, x23
 17c:	b.ne	140 <grub_mod_init-0x438>  // b.any
 180:	adrp	x1, 0 <grub_mod_init-0x578>
 184:	ldr	x0, [sp, #120]
 188:	ldr	x1, [x1]
 18c:	add	x0, x0, #0x8
 190:	str	x0, [sp, #120]
 194:	cmp	x0, x1
 198:	b.eq	1cc <grub_mod_init-0x3ac>  // b.none
 19c:	ldr	x7, [x0]
 1a0:	orr	x24, x7, #0x1
 1a4:	orr	w7, w7, #0x1
 1a8:	rbit	x9, x24
 1ac:	rbit	w7, w7
 1b0:	clz	x9, x9
 1b4:	rbit	w24, w24
 1b8:	clz	w7, w7
 1bc:	clz	w24, w24
 1c0:	mov	w25, w9
 1c4:	mov	w27, w9
 1c8:	b	84 <grub_mod_init-0x4f4>
 1cc:	ldr	x0, [sp, #136]
 1d0:	mov	w7, #0x0                   	// #0
 1d4:	mov	w10, #0x0                   	// #0
 1d8:	mov	w28, #0x0                   	// #0
 1dc:	add	x0, x0, #0x30
 1e0:	stp	x0, x26, [sp, #120]
 1e4:	mov	x0, #0x9c40                	// #40000
 1e8:	mov	w23, #0x0                   	// #0
 1ec:	mov	w25, #0x0                   	// #0
 1f0:	mov	x27, #0x7                   	// #7
 1f4:	mov	x24, #0x194                 	// #404
 1f8:	mov	x3, #0x1940                	// #6464
 1fc:	mov	x2, #0x38                  	// #56
 200:	str	x0, [sp, #144]
 204:	mov	x0, #0xe                   	// #14
 208:	stp	wzr, wzr, [sp, #156]
 20c:	str	wzr, [sp, #164]
 210:	add	x0, x0, x27
 214:	add	x3, x3, x24
 218:	sub	x2, x2, x27
 21c:	mov	x1, #0x1                   	// #1
 220:	add	x24, x27, x0, lsl #2
 224:	mov	w11, #0x0                   	// #0
 228:	add	x24, x24, x3
 22c:	add	x8, x27, x2, lsl #2
 230:	str	w10, [sp, #168]
 234:	mov	w10, w11
 238:	add	x0, x24, x24, lsl #1
 23c:	lsl	x0, x0, #3
 240:	sub	x0, x0, x24
 244:	adds	x8, x0, x8
 248:	csel	x27, x8, x1, ne  // ne = any
 24c:	cmp	x24, #0x0
 250:	csel	x24, x24, x1, ne  // ne = any
 254:	orr	w26, w24, #0x1
 258:	mov	w6, w26
 25c:	b	268 <grub_mod_init-0x310>
 260:	rbit	w7, w6
 264:	clz	w7, w7
 268:	adrp	x1, 0 <grub_mod_init-0x578>
 26c:	cmp	w10, w7
 270:	ldr	x5, [sp, #112]
 274:	add	w10, w10, #0x1
 278:	ldr	x2, [x1]
 27c:	cset	w0, eq  // eq = none
 280:	mov	x4, x20
 284:	mov	x1, x19
 288:	mov	w3, #0x2b                  	// #43
 28c:	str	w10, [sp, #136]
 290:	str	w10, [sp, #172]
 294:	bl	0 <grub_test_assert_helper>
 298:	ldr	w10, [sp, #136]
 29c:	cmp	w10, #0x20
 2a0:	lsl	w6, w26, w10
 2a4:	b.ne	260 <grub_mod_init-0x318>  // b.any
 2a8:	orr	x26, x24, #0x1
 2ac:	mov	w11, #0x0                   	// #0
 2b0:	mov	x6, x26
 2b4:	ldr	w10, [sp, #168]
 2b8:	mov	w7, w28
 2bc:	str	x24, [sp, #136]
 2c0:	mov	x24, x26
 2c4:	mov	w26, w23
 2c8:	mov	w23, w11
 2cc:	b	2e0 <grub_mod_init-0x298>
 2d0:	rbit	x10, x6
 2d4:	rbit	w7, w6
 2d8:	clz	x10, x10
 2dc:	clz	w7, w7
 2e0:	ldr	x2, [sp, #120]
 2e4:	cmp	w23, w10
 2e8:	add	w23, w23, #0x1
 2ec:	cset	w0, eq  // eq = none
 2f0:	mov	x5, x21
 2f4:	mov	x4, x22
 2f8:	mov	x1, x19
 2fc:	mov	w3, #0x38                  	// #56
 300:	bl	0 <grub_test_assert_helper>
 304:	cmp	w23, #0x40
 308:	lsl	x6, x24, x23
 30c:	b.ne	2d0 <grub_mod_init-0x2a8>  // b.any
 310:	mov	w23, w26
 314:	mov	x6, x24
 318:	mov	w7, w28
 31c:	mov	w10, #0x0                   	// #0
 320:	mov	x28, x24
 324:	ldr	w0, [sp, #160]
 328:	mov	w26, w10
 32c:	ldr	x24, [sp, #136]
 330:	b	344 <grub_mod_init-0x234>
 334:	rbit	x0, x6
 338:	rbit	w7, w6
 33c:	clz	x0, x0
 340:	clz	w7, w7
 344:	ldp	x5, x4, [sp, #96]
 348:	cmp	w26, w0
 34c:	ldr	x2, [sp, #128]
 350:	add	w26, w26, #0x1
 354:	cset	w0, eq  // eq = none
 358:	mov	x1, x19
 35c:	mov	w3, #0x46                  	// #70
 360:	bl	0 <grub_test_assert_helper>
 364:	cmp	w26, #0x40
 368:	lsl	x6, x28, x26
 36c:	b.ne	334 <grub_mod_init-0x244>  // b.any
 370:	orr	w9, w27, #0x1
 374:	mov	w7, w23
 378:	mov	w6, w9
 37c:	mov	w23, w9
 380:	mov	w28, #0x0                   	// #0
 384:	b	390 <grub_mod_init-0x1e8>
 388:	rbit	w7, w6
 38c:	clz	w7, w7
 390:	adrp	x1, 0 <grub_mod_init-0x578>
 394:	cmp	w28, w7
 398:	ldr	x5, [sp, #112]
 39c:	add	w28, w28, #0x1
 3a0:	ldr	x2, [x1]
 3a4:	cset	w0, eq  // eq = none
 3a8:	mov	x4, x20
 3ac:	mov	x1, x19
 3b0:	mov	w3, #0x2b                  	// #43
 3b4:	bl	0 <grub_test_assert_helper>
 3b8:	cmp	w28, #0x20
 3bc:	lsl	w6, w23, w28
 3c0:	b.ne	388 <grub_mod_init-0x1f0>  // b.any
 3c4:	orr	x28, x27, #0x1
 3c8:	ldr	w0, [sp, #164]
 3cc:	mov	w7, w25
 3d0:	mov	x6, x28
 3d4:	mov	w23, #0x0                   	// #0
 3d8:	b	3ec <grub_mod_init-0x18c>
 3dc:	rbit	x0, x6
 3e0:	rbit	w7, w6
 3e4:	clz	x0, x0
 3e8:	clz	w7, w7
 3ec:	ldr	x2, [sp, #120]
 3f0:	cmp	w23, w0
 3f4:	add	w23, w23, #0x1
 3f8:	cset	w0, eq  // eq = none
 3fc:	mov	x5, x21
 400:	mov	x4, x22
 404:	mov	x1, x19
 408:	mov	w3, #0x38                  	// #56
 40c:	bl	0 <grub_test_assert_helper>
 410:	cmp	w23, #0x40
 414:	lsl	x6, x28, x23
 418:	b.ne	3dc <grub_mod_init-0x19c>  // b.any
 41c:	ldr	w0, [sp, #156]
 420:	mov	x6, x28
 424:	mov	w7, w25
 428:	mov	w23, #0x0                   	// #0
 42c:	b	440 <grub_mod_init-0x138>
 430:	rbit	x0, x6
 434:	rbit	w7, w6
 438:	clz	x0, x0
 43c:	clz	w7, w7
 440:	ldp	x5, x4, [sp, #96]
 444:	cmp	w23, w0
 448:	ldr	x2, [sp, #128]
 44c:	add	w23, w23, #0x1
 450:	cset	w0, eq  // eq = none
 454:	mov	x1, x19
 458:	mov	w3, #0x46                  	// #70
 45c:	bl	0 <grub_test_assert_helper>
 460:	cmp	w23, #0x40
 464:	lsl	x6, x28, x23
 468:	b.ne	430 <grub_mod_init-0x148>  // b.any
 46c:	ldr	x0, [sp, #144]
 470:	subs	x0, x0, #0x1
 474:	str	x0, [sp, #144]
 478:	b.eq	508 <grub_mod_init-0x70>  // b.none
 47c:	lsl	x0, x27, #1
 480:	lsl	x3, x24, #4
 484:	add	x1, x0, x27
 488:	add	x23, x3, x24
 48c:	lsl	x2, x27, #3
 490:	mov	x5, #0x1                   	// #1
 494:	add	x1, x27, x1, lsl #2
 498:	sub	x4, x2, x27
 49c:	adds	x1, x23, x1
 4a0:	add	x4, x27, x4, lsl #2
 4a4:	csel	x7, x1, x5, ne  // ne = any
 4a8:	add	x23, x1, x1, lsl #1
 4ac:	orr	x9, x7, x5
 4b0:	orr	w7, w7, #0x1
 4b4:	rbit	x10, x9
 4b8:	lsl	x23, x23, #3
 4bc:	rbit	w7, w7
 4c0:	sub	x23, x23, x1
 4c4:	rbit	w28, w9
 4c8:	adds	x23, x23, x4
 4cc:	clz	x10, x10
 4d0:	csel	x23, x23, x5, ne  // ne = any
 4d4:	clz	w7, w7
 4d8:	orr	x25, x23, x5
 4dc:	orr	w23, w23, #0x1
 4e0:	rbit	x26, x25
 4e4:	rbit	w23, w23
 4e8:	rbit	w25, w25
 4ec:	clz	x26, x26
 4f0:	clz	w28, w28
 4f4:	clz	w23, w23
 4f8:	clz	w25, w25
 4fc:	stp	w26, w10, [sp, #156]
 500:	str	w26, [sp, #164]
 504:	b	210 <grub_mod_init-0x368>
 508:	ldp	x19, x20, [sp, #16]
 50c:	ldp	x21, x22, [sp, #32]
 510:	ldp	x23, x24, [sp, #48]
 514:	ldp	x25, x26, [sp, #64]
 518:	ldp	x27, x28, [sp, #80]
 51c:	ldp	x29, x30, [sp], #176
 520:	ret
 524:	nop
	...

0000000000000578 <grub_mod_init>:
 578:	adrp	x1, 0 <grub_mod_init-0x578>
 57c:	adrp	x0, 0 <grub_mod_init-0x578>
 580:	ldr	x1, [x1]
 584:	ldr	x0, [x0]
 588:	b	0 <grub_test_register>
 58c:	nop
	...

00000000000005a0 <grub_mod_fini>:
 5a0:	adrp	x0, 0 <grub_mod_init-0x578>
 5a4:	ldr	x0, [x0]
 5a8:	b	0 <grub_test_unregister>
 5ac:	nop
	...
