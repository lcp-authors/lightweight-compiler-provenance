In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_clang_-O3:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_blockSort>:
       0:	str	d10, [sp, #-128]!
       4:	stp	d9, d8, [sp, #16]
       8:	stp	x29, x30, [sp, #32]
       c:	stp	x28, x27, [sp, #48]
      10:	stp	x26, x25, [sp, #64]
      14:	stp	x24, x23, [sp, #80]
      18:	stp	x22, x21, [sp, #96]
      1c:	stp	x20, x19, [sp, #112]
      20:	mov	x29, sp
      24:	sub	sp, sp, #0x1, lsl #12
      28:	sub	sp, sp, #0x2c0
      2c:	ldrsw	x9, [x0, #108]
      30:	ldr	x21, [x0, #56]
      34:	ldr	x22, [x0, #40]
      38:	ldr	w23, [x0, #656]
      3c:	mov	w8, #0x2710                	// #10000
      40:	mov	x20, x0
      44:	cmp	w9, w8
      48:	and	x25, x9, #0xffffffff
      4c:	b.lt	17a8 <BZ2_blockSort+0x17a8>  // b.tstop
      50:	stp	x20, x9, [sp, #16]
      54:	ldr	w8, [x20, #88]
      58:	add	w9, w25, #0x22
      5c:	add	w10, w25, #0x23
      60:	tst	w9, #0x1
      64:	csel	w9, w9, w10, eq  // eq = none
      68:	cmp	w8, #0x1
      6c:	ldr	x24, [x20, #64]
      70:	csinc	w8, w8, wzr, gt
      74:	mov	w11, #0x64                  	// #100
      78:	cmp	w8, #0x64
      7c:	mov	w10, #0x5556                	// #21846
      80:	csel	w8, w8, w11, lt  // lt = tstop
      84:	movk	w10, #0x5555, lsl #16
      88:	sxtw	x20, w9
      8c:	sub	w8, w8, #0x1
      90:	add	x9, x24, x20
      94:	smull	x8, w8, w10
      98:	str	x9, [x29, #8]
      9c:	lsr	x9, x8, #63
      a0:	lsr	x8, x8, #32
      a4:	add	w8, w8, w9
      a8:	cmp	w23, #0x4
      ac:	mul	w8, w8, w25
      b0:	str	w23, [sp, #92]
      b4:	str	w8, [sp, #12]
      b8:	str	w8, [sp, #252]
      bc:	b.ge	1824 <BZ2_blockSort+0x1824>  // b.tcont
      c0:	mov	w2, #0x40004               	// #262148
      c4:	mov	x0, x22
      c8:	mov	w1, wzr
      cc:	add	x19, sp, #0x900
      d0:	bl	0 <memset>
      d4:	ldrb	w10, [x24]
      d8:	ldr	x23, [x29, #8]
      dc:	sub	w12, w25, #0x4
      e0:	sub	w13, w25, #0x3
      e4:	sub	w14, w25, #0x2
      e8:	sub	w9, w25, #0x1
      ec:	add	x15, x20, w12, sxtw #1
      f0:	add	x16, x20, w13, sxtw #1
      f4:	add	x17, x20, w14, sxtw #1
      f8:	mov	x8, xzr
      fc:	str	w9, [sp, #44]
     100:	sub	w9, w25, #0x1
     104:	add	x11, x24, w12, sxtw
     108:	add	x12, x24, w13, sxtw
     10c:	add	x13, x24, w14, sxtw
     110:	add	x14, x24, x15
     114:	add	x15, x24, x16
     118:	lsl	w10, w10, #8
     11c:	add	x16, x24, x17
     120:	add	w17, w9, w8
     124:	strh	wzr, [x23, w17, uxtw #1]
     128:	ldrb	w17, [x24, x17]
     12c:	lsl	x0, x8, #1
     130:	lsl	w17, w17, #8
     134:	orr	w10, w17, w10, asr #8
     138:	sbfiz	x17, x10, #2, #32
     13c:	ldr	w18, [x22, x17]
     140:	add	w18, w18, #0x1
     144:	str	w18, [x22, x17]
     148:	strh	wzr, [x16, x0]
     14c:	ldrb	w17, [x13, x8]
     150:	lsl	w17, w17, #8
     154:	orr	w10, w17, w10, asr #8
     158:	sbfiz	x17, x10, #2, #32
     15c:	ldr	w18, [x22, x17]
     160:	add	w18, w18, #0x1
     164:	str	w18, [x22, x17]
     168:	strh	wzr, [x15, x0]
     16c:	ldrb	w17, [x12, x8]
     170:	lsl	w17, w17, #8
     174:	orr	w10, w17, w10, asr #8
     178:	sbfiz	x17, x10, #2, #32
     17c:	ldr	w18, [x22, x17]
     180:	add	w18, w18, #0x1
     184:	str	w18, [x22, x17]
     188:	strh	wzr, [x14, x0]
     18c:	ldrb	w17, [x11, x8]
     190:	sub	x8, x8, #0x4
     194:	add	w0, w25, w8
     198:	add	w0, w0, #0x3
     19c:	lsl	w17, w17, #8
     1a0:	orr	w10, w17, w10, asr #8
     1a4:	sbfiz	x17, x10, #2, #32
     1a8:	ldr	w18, [x22, x17]
     1ac:	cmp	w0, #0x6
     1b0:	add	w18, w18, #0x1
     1b4:	str	w18, [x22, x17]
     1b8:	b.gt	120 <BZ2_blockSort+0x120>
     1bc:	ldr	x13, [sp, #24]
     1c0:	add	w9, w25, w8
     1c4:	add	w9, w9, #0x3
     1c8:	cmp	w9, #0x4
     1cc:	b.lt	20c <BZ2_blockSort+0x20c>  // b.tstop
     1d0:	sub	w9, w13, #0x1
     1d4:	add	x8, x9, x8
     1d8:	and	x8, x8, #0xffffffff
     1dc:	add	x9, x24, x20
     1e0:	strh	wzr, [x9, x8, lsl #1]
     1e4:	ldrb	w11, [x24, x8]
     1e8:	cmp	x8, #0x0
     1ec:	sub	x8, x8, #0x1
     1f0:	lsl	w11, w11, #8
     1f4:	orr	w10, w11, w10, asr #8
     1f8:	sbfiz	x11, x10, #2, #32
     1fc:	ldr	w12, [x22, x11]
     200:	add	w12, w12, #0x1
     204:	str	w12, [x22, x11]
     208:	b.gt	1e0 <BZ2_blockSort+0x1e0>
     20c:	ldrb	w8, [x24]
     210:	add	x9, x13, #0x1
     214:	ldr	w10, [sp, #92]
     218:	mov	x11, x23
     21c:	strb	w8, [x24, x13]
     220:	strh	wzr, [x23, x13, lsl #1]
     224:	ldrb	w8, [x24, #1]
     228:	cmp	w10, #0x3
     22c:	strb	w8, [x24, x9]
     230:	strh	wzr, [x23, x9, lsl #1]
     234:	ldrb	w8, [x24, #2]
     238:	add	x9, x13, #0x2
     23c:	strb	w8, [x24, x9]
     240:	strh	wzr, [x23, x9, lsl #1]
     244:	ldrb	w8, [x24, #3]
     248:	add	x9, x13, #0x3
     24c:	strb	w8, [x24, x9]
     250:	strh	wzr, [x23, x9, lsl #1]
     254:	ldrb	w8, [x24, #4]
     258:	add	x9, x13, #0x4
     25c:	strb	w8, [x24, x9]
     260:	strh	wzr, [x23, x9, lsl #1]
     264:	ldrb	w8, [x24, #5]
     268:	add	x9, x13, #0x5
     26c:	strb	w8, [x24, x9]
     270:	strh	wzr, [x23, x9, lsl #1]
     274:	ldrb	w8, [x24, #6]
     278:	add	x9, x13, #0x6
     27c:	strb	w8, [x24, x9]
     280:	strh	wzr, [x23, x9, lsl #1]
     284:	ldrb	w8, [x24, #7]
     288:	add	x9, x13, #0x7
     28c:	strb	w8, [x24, x9]
     290:	strh	wzr, [x23, x9, lsl #1]
     294:	ldrb	w8, [x24, #8]
     298:	add	x9, x13, #0x8
     29c:	strb	w8, [x24, x9]
     2a0:	strh	wzr, [x23, x9, lsl #1]
     2a4:	ldrb	w8, [x24, #9]
     2a8:	add	x9, x13, #0x9
     2ac:	strb	w8, [x24, x9]
     2b0:	strh	wzr, [x23, x9, lsl #1]
     2b4:	ldrb	w8, [x24, #10]
     2b8:	add	x9, x13, #0xa
     2bc:	strb	w8, [x24, x9]
     2c0:	strh	wzr, [x23, x9, lsl #1]
     2c4:	ldrb	w8, [x24, #11]
     2c8:	add	x9, x13, #0xb
     2cc:	strb	w8, [x24, x9]
     2d0:	strh	wzr, [x23, x9, lsl #1]
     2d4:	ldrb	w8, [x24, #12]
     2d8:	add	x9, x13, #0xc
     2dc:	strb	w8, [x24, x9]
     2e0:	strh	wzr, [x23, x9, lsl #1]
     2e4:	ldrb	w8, [x24, #13]
     2e8:	add	x9, x13, #0xd
     2ec:	strb	w8, [x24, x9]
     2f0:	strh	wzr, [x23, x9, lsl #1]
     2f4:	ldrb	w8, [x24, #14]
     2f8:	add	x9, x13, #0xe
     2fc:	strb	w8, [x24, x9]
     300:	strh	wzr, [x23, x9, lsl #1]
     304:	ldrb	w8, [x24, #15]
     308:	add	x9, x13, #0xf
     30c:	strb	w8, [x24, x9]
     310:	strh	wzr, [x23, x9, lsl #1]
     314:	ldrb	w8, [x24, #16]
     318:	add	x9, x13, #0x10
     31c:	strb	w8, [x24, x9]
     320:	strh	wzr, [x23, x9, lsl #1]
     324:	ldrb	w8, [x24, #17]
     328:	add	x9, x13, #0x11
     32c:	strb	w8, [x24, x9]
     330:	strh	wzr, [x23, x9, lsl #1]
     334:	ldrb	w8, [x24, #18]
     338:	add	x9, x13, #0x12
     33c:	strb	w8, [x24, x9]
     340:	strh	wzr, [x23, x9, lsl #1]
     344:	ldrb	w8, [x24, #19]
     348:	add	x9, x13, #0x13
     34c:	strb	w8, [x24, x9]
     350:	strh	wzr, [x23, x9, lsl #1]
     354:	ldrb	w8, [x24, #20]
     358:	add	x9, x13, #0x14
     35c:	strb	w8, [x24, x9]
     360:	strh	wzr, [x23, x9, lsl #1]
     364:	ldrb	w8, [x24, #21]
     368:	add	x9, x13, #0x15
     36c:	strb	w8, [x24, x9]
     370:	strh	wzr, [x23, x9, lsl #1]
     374:	ldrb	w8, [x24, #22]
     378:	add	x9, x13, #0x16
     37c:	strb	w8, [x24, x9]
     380:	strh	wzr, [x23, x9, lsl #1]
     384:	ldrb	w8, [x24, #23]
     388:	add	x9, x13, #0x17
     38c:	strb	w8, [x24, x9]
     390:	strh	wzr, [x23, x9, lsl #1]
     394:	ldrb	w8, [x24, #24]
     398:	add	x9, x13, #0x18
     39c:	strb	w8, [x24, x9]
     3a0:	strh	wzr, [x23, x9, lsl #1]
     3a4:	ldrb	w8, [x24, #25]
     3a8:	add	x9, x13, #0x19
     3ac:	strb	w8, [x24, x9]
     3b0:	strh	wzr, [x23, x9, lsl #1]
     3b4:	ldrb	w8, [x24, #26]
     3b8:	add	x9, x13, #0x1a
     3bc:	strb	w8, [x24, x9]
     3c0:	strh	wzr, [x23, x9, lsl #1]
     3c4:	ldrb	w8, [x24, #27]
     3c8:	add	x9, x13, #0x1b
     3cc:	strb	w8, [x24, x9]
     3d0:	strh	wzr, [x23, x9, lsl #1]
     3d4:	ldrb	w8, [x24, #28]
     3d8:	add	x9, x13, #0x1c
     3dc:	strb	w8, [x24, x9]
     3e0:	strh	wzr, [x23, x9, lsl #1]
     3e4:	ldrb	w8, [x24, #29]
     3e8:	add	x9, x13, #0x1d
     3ec:	strb	w8, [x24, x9]
     3f0:	strh	wzr, [x23, x9, lsl #1]
     3f4:	ldrb	w8, [x24, #30]
     3f8:	add	x9, x13, #0x1e
     3fc:	strb	w8, [x24, x9]
     400:	strh	wzr, [x23, x9, lsl #1]
     404:	ldrb	w8, [x24, #31]
     408:	add	x9, x13, #0x1f
     40c:	strb	w8, [x24, x9]
     410:	strh	wzr, [x23, x9, lsl #1]
     414:	ldrb	w8, [x24, #32]
     418:	add	x9, x13, #0x20
     41c:	strb	w8, [x24, x9]
     420:	strh	wzr, [x23, x9, lsl #1]
     424:	ldrb	w8, [x24, #33]
     428:	add	x9, x13, #0x21
     42c:	strb	w8, [x24, x9]
     430:	strh	wzr, [x23, x9, lsl #1]
     434:	b.gt	1844 <BZ2_blockSort+0x1844>
     438:	mov	x8, x22
     43c:	ldr	w9, [x8], #4
     440:	mov	x10, xzr
     444:	ldr	w11, [x8, x10]
     448:	add	w9, w11, w9
     44c:	str	w9, [x8, x10]
     450:	add	x10, x10, #0x4
     454:	cmp	x10, #0x40, lsl #12
     458:	b.ne	444 <BZ2_blockSort+0x444>  // b.any
     45c:	ldrb	w9, [x24]
     460:	sub	w10, w13, #0x1
     464:	sub	w11, w25, #0x4
     468:	sub	w12, w25, #0x3
     46c:	sub	w13, w25, #0x2
     470:	mov	x8, xzr
     474:	add	x14, x24, w11, sxtw
     478:	add	x15, x24, w12, sxtw
     47c:	lsl	w9, w9, #8
     480:	add	x16, x24, w13, sxtw
     484:	add	x17, x10, x8
     488:	ldrb	w18, [x24, w17, uxtw]
     48c:	ubfx	w9, w9, #8, #8
     490:	bfi	w9, w18, #8, #8
     494:	lsl	x9, x9, #2
     498:	ldr	w0, [x22, x9]
     49c:	sub	w0, w0, #0x1
     4a0:	str	w0, [x22, x9]
     4a4:	str	w17, [x21, w0, sxtw #2]
     4a8:	ldrb	w17, [x16, x8]
     4ac:	lsl	x9, x18, #2
     4b0:	add	w0, w13, w8
     4b4:	bfi	x9, x17, #10, #8
     4b8:	ldr	w18, [x22, x9]
     4bc:	lsl	x17, x17, #2
     4c0:	sub	w18, w18, #0x1
     4c4:	str	w18, [x22, x9]
     4c8:	str	w0, [x21, w18, sxtw #2]
     4cc:	ldrb	w9, [x15, x8]
     4d0:	add	w0, w12, w8
     4d4:	bfi	x17, x9, #10, #8
     4d8:	ldr	w18, [x22, x17]
     4dc:	sub	w18, w18, #0x1
     4e0:	str	w18, [x22, x17]
     4e4:	str	w0, [x21, w18, sxtw #2]
     4e8:	ldrb	w17, [x14, x8]
     4ec:	add	w18, w11, w8
     4f0:	sub	x8, x8, #0x4
     4f4:	add	w1, w25, w8
     4f8:	bfi	w9, w17, #8, #24
     4fc:	and	x17, x9, #0xffff
     500:	lsl	x17, x17, #2
     504:	ldr	w0, [x22, x17]
     508:	add	w1, w1, #0x3
     50c:	cmp	w1, #0x6
     510:	sub	w0, w0, #0x1
     514:	str	w0, [x22, x17]
     518:	str	w18, [x21, w0, sxtw #2]
     51c:	b.gt	484 <BZ2_blockSort+0x484>
     520:	add	w10, w25, w8
     524:	add	w10, w10, #0x3
     528:	cmp	w10, #0x4
     52c:	b.lt	570 <BZ2_blockSort+0x570>  // b.tstop
     530:	sub	w10, w25, #0x1
     534:	add	x8, x10, x8
     538:	and	x10, x8, #0xffffffff
     53c:	ldrb	w11, [x24, x10]
     540:	ubfx	w9, w9, #8, #8
     544:	cmp	x10, #0x0
     548:	sub	x10, x10, #0x1
     54c:	bfi	w9, w11, #8, #24
     550:	and	x11, x9, #0xffff
     554:	lsl	x11, x11, #2
     558:	ldr	w12, [x22, x11]
     55c:	sub	w12, w12, #0x1
     560:	str	w12, [x22, x11]
     564:	str	w8, [x21, w12, sxtw #2]
     568:	sub	w8, w8, #0x1
     56c:	b.gt	53c <BZ2_blockSort+0x53c>
     570:	adrp	x9, 0 <BZ2_blockSort>
     574:	ldr	q1, [x9]
     578:	adrp	x9, 0 <BZ2_blockSort>
     57c:	ldr	q2, [x9]
     580:	adrp	x9, 0 <BZ2_blockSort>
     584:	ldr	q3, [x9]
     588:	adrp	x9, 0 <BZ2_blockSort>
     58c:	ldr	q4, [x9]
     590:	adrp	x9, 0 <BZ2_blockSort>
     594:	ldr	q5, [x9]
     598:	adrp	x9, 0 <BZ2_blockSort>
     59c:	ldr	q6, [x9]
     5a0:	adrp	x9, 0 <BZ2_blockSort>
     5a4:	ldr	q7, [x9]
     5a8:	adrp	x9, 0 <BZ2_blockSort>
     5ac:	ldr	q16, [x9]
     5b0:	adrp	x9, 0 <BZ2_blockSort>
     5b4:	ldr	q17, [x9]
     5b8:	adrp	x9, 0 <BZ2_blockSort>
     5bc:	ldr	q18, [x9]
     5c0:	adrp	x9, 0 <BZ2_blockSort>
     5c4:	ldr	q19, [x9]
     5c8:	adrp	x9, 0 <BZ2_blockSort>
     5cc:	ldr	q20, [x9]
     5d0:	adrp	x9, 0 <BZ2_blockSort>
     5d4:	ldr	q21, [x9]
     5d8:	adrp	x9, 0 <BZ2_blockSort>
     5dc:	ldr	q22, [x9]
     5e0:	adrp	x9, 0 <BZ2_blockSort>
     5e4:	ldr	q23, [x9]
     5e8:	adrp	x9, 0 <BZ2_blockSort>
     5ec:	ldr	q24, [x9]
     5f0:	adrp	x9, 0 <BZ2_blockSort>
     5f4:	ldr	q25, [x9]
     5f8:	adrp	x9, 0 <BZ2_blockSort>
     5fc:	ldr	q26, [x9]
     600:	adrp	x9, 0 <BZ2_blockSort>
     604:	ldr	q27, [x9]
     608:	adrp	x9, 0 <BZ2_blockSort>
     60c:	ldr	q28, [x9]
     610:	adrp	x9, 0 <BZ2_blockSort>
     614:	ldr	q29, [x9]
     618:	adrp	x9, 0 <BZ2_blockSort>
     61c:	ldr	q30, [x9]
     620:	adrp	x9, 0 <BZ2_blockSort>
     624:	ldr	q31, [x9]
     628:	adrp	x9, 0 <BZ2_blockSort>
     62c:	ldr	q8, [x9]
     630:	adrp	x9, 0 <BZ2_blockSort>
     634:	ldr	q9, [x9]
     638:	adrp	x9, 0 <BZ2_blockSort>
     63c:	movi	v0.2d, #0x0
     640:	ldr	q10, [x9]
     644:	adrp	x9, 0 <BZ2_blockSort>
     648:	stp	q0, q0, [x19, #224]
     64c:	stp	q0, q0, [x19, #192]
     650:	stp	q0, q0, [x19, #160]
     654:	stp	q0, q0, [x19, #128]
     658:	stp	q0, q0, [x19, #96]
     65c:	stp	q0, q0, [x19, #64]
     660:	stp	q0, q0, [x19, #32]
     664:	stp	q0, q0, [x19]
     668:	ldr	q0, [x9]
     66c:	adrp	x9, 0 <BZ2_blockSort>
     670:	stp	q1, q2, [x19, #256]
     674:	ldr	q1, [x9]
     678:	adrp	x9, 0 <BZ2_blockSort>
     67c:	ldr	q2, [x9]
     680:	adrp	x9, 0 <BZ2_blockSort>
     684:	stp	q3, q4, [x19, #288]
     688:	ldr	q3, [x9]
     68c:	adrp	x9, 0 <BZ2_blockSort>
     690:	ldr	q4, [x9]
     694:	adrp	x9, 0 <BZ2_blockSort>
     698:	stp	q5, q6, [x19, #320]
     69c:	ldr	q5, [x9]
     6a0:	adrp	x9, 0 <BZ2_blockSort>
     6a4:	ldr	q6, [x9]
     6a8:	adrp	x9, 0 <BZ2_blockSort>
     6ac:	stp	q7, q16, [x19, #352]
     6b0:	ldr	q7, [x9]
     6b4:	adrp	x9, 0 <BZ2_blockSort>
     6b8:	ldr	q16, [x9]
     6bc:	adrp	x9, 0 <BZ2_blockSort>
     6c0:	stp	q17, q18, [x19, #384]
     6c4:	ldr	q17, [x9]
     6c8:	adrp	x9, 0 <BZ2_blockSort>
     6cc:	ldr	q18, [x9]
     6d0:	adrp	x9, 0 <BZ2_blockSort>
     6d4:	stp	q19, q20, [x19, #416]
     6d8:	ldr	q19, [x9]
     6dc:	adrp	x9, 0 <BZ2_blockSort>
     6e0:	ldr	q20, [x9]
     6e4:	adrp	x9, 0 <BZ2_blockSort>
     6e8:	stp	q21, q22, [x19, #448]
     6ec:	ldr	q21, [x9]
     6f0:	adrp	x9, 0 <BZ2_blockSort>
     6f4:	stp	q0, q1, [x19, #672]
     6f8:	ldr	q0, [x9]
     6fc:	adrp	x9, 0 <BZ2_blockSort>
     700:	ldr	q1, [x9]
     704:	adrp	x9, 0 <BZ2_blockSort>
     708:	stp	q2, q3, [x19, #704]
     70c:	ldr	q2, [x9]
     710:	adrp	x9, 0 <BZ2_blockSort>
     714:	ldr	q3, [x9]
     718:	adrp	x9, 0 <BZ2_blockSort>
     71c:	stp	q4, q5, [x19, #736]
     720:	ldr	q4, [x9]
     724:	adrp	x9, 0 <BZ2_blockSort>
     728:	ldr	q5, [x9]
     72c:	adrp	x9, 0 <BZ2_blockSort>
     730:	stp	q6, q7, [x19, #768]
     734:	ldr	q6, [x9]
     738:	adrp	x9, 0 <BZ2_blockSort>
     73c:	stp	q0, q1, [x19, #896]
     740:	ldr	q0, [x9]
     744:	adrp	x9, 0 <BZ2_blockSort>
     748:	ldr	q1, [x9]
     74c:	adrp	x9, 0 <BZ2_blockSort>
     750:	stp	q2, q3, [x19, #928]
     754:	ldr	q2, [x9]
     758:	adrp	x9, 0 <BZ2_blockSort>
     75c:	stp	q6, q0, [x19, #992]
     760:	ldr	q0, [x9]
     764:	adrp	x9, 0 <BZ2_blockSort>
     768:	str	q1, [x19, #1024]
     76c:	ldr	q1, [x9]
     770:	adrp	x9, 0 <BZ2_blockSort>
     774:	str	q2, [x19, #1040]
     778:	ldr	q2, [x9]
     77c:	adrp	x9, 0 <BZ2_blockSort>
     780:	str	q0, [x19, #1056]
     784:	ldr	q0, [x9]
     788:	adrp	x9, 0 <BZ2_blockSort>
     78c:	str	q1, [x19, #1072]
     790:	ldr	q1, [x9]
     794:	adrp	x9, 0 <BZ2_blockSort>
     798:	str	q2, [x19, #1088]
     79c:	ldr	q2, [x9]
     7a0:	adrp	x9, 0 <BZ2_blockSort>
     7a4:	str	q0, [x19, #1104]
     7a8:	ldr	q0, [x9]
     7ac:	adrp	x9, 0 <BZ2_blockSort>
     7b0:	str	q1, [x19, #1120]
     7b4:	ldr	q1, [x9]
     7b8:	adrp	x9, 0 <BZ2_blockSort>
     7bc:	str	q2, [x19, #1136]
     7c0:	ldr	q2, [x9]
     7c4:	adrp	x9, 0 <BZ2_blockSort>
     7c8:	str	q0, [x19, #1152]
     7cc:	ldr	q0, [x9]
     7d0:	adrp	x9, 0 <BZ2_blockSort>
     7d4:	str	q1, [x19, #1168]
     7d8:	ldr	q1, [x9]
     7dc:	adrp	x9, 0 <BZ2_blockSort>
     7e0:	str	q2, [x19, #1184]
     7e4:	ldr	q2, [x9]
     7e8:	adrp	x9, 0 <BZ2_blockSort>
     7ec:	str	q0, [x19, #1200]
     7f0:	ldr	q0, [x9]
     7f4:	adrp	x9, 0 <BZ2_blockSort>
     7f8:	str	q1, [x19, #1216]
     7fc:	ldr	q1, [x9]
     800:	mov	x8, xzr
     804:	mov	w9, #0x79                  	// #121
     808:	add	x10, sp, #0xa00
     80c:	stp	q23, q24, [x19, #480]
     810:	stp	q25, q26, [x19, #512]
     814:	stp	q27, q28, [x19, #544]
     818:	stp	q29, q30, [x19, #576]
     81c:	stp	q31, q8, [x19, #608]
     820:	stp	q9, q10, [x19, #640]
     824:	stp	q16, q17, [x19, #800]
     828:	stp	q18, q19, [x19, #832]
     82c:	stp	q20, q21, [x19, #864]
     830:	stp	q4, q5, [x19, #960]
     834:	str	q2, [x19, #1232]
     838:	str	q0, [x19, #1248]
     83c:	str	q1, [x19, #1264]
     840:	b	85c <BZ2_blockSort+0x85c>
     844:	add	x12, x12, #0x79
     848:	cmp	x9, #0xff
     84c:	add	x9, x9, #0x1
     850:	add	x8, x8, #0x1
     854:	str	w11, [x10, x12, lsl #2]
     858:	b.cs	8b4 <BZ2_blockSort+0x8b4>  // b.hs, b.nlast
     85c:	ldr	w11, [x10, x9, lsl #2]
     860:	lsl	w12, w11, #8
     864:	add	w13, w12, #0x100
     868:	ldr	w13, [x22, w13, sxtw #2]
     86c:	ldr	w12, [x22, w12, sxtw #2]
     870:	sub	w13, w13, w12
     874:	mov	x12, x8
     878:	ldr	w14, [x10, x12, lsl #2]
     87c:	lsl	w15, w14, #8
     880:	add	w16, w15, #0x100
     884:	ldr	w16, [x22, w16, sxtw #2]
     888:	ldr	w15, [x22, w15, sxtw #2]
     88c:	sub	w15, w16, w15
     890:	cmp	w15, w13
     894:	b.ls	844 <BZ2_blockSort+0x844>  // b.plast
     898:	add	x15, x10, x12, lsl #2
     89c:	sub	x12, x12, #0x79
     8a0:	add	w16, w12, #0xf2
     8a4:	cmp	w16, #0xf2
     8a8:	str	w14, [x15, #484]
     8ac:	b.ge	878 <BZ2_blockSort+0x878>  // b.tcont
     8b0:	b	844 <BZ2_blockSort+0x844>
     8b4:	mov	x8, xzr
     8b8:	mov	w9, #0x28                  	// #40
     8bc:	add	x10, sp, #0xa00
     8c0:	b	8dc <BZ2_blockSort+0x8dc>
     8c4:	add	x12, x12, #0x28
     8c8:	cmp	x9, #0xff
     8cc:	add	x9, x9, #0x1
     8d0:	add	x8, x8, #0x1
     8d4:	str	w11, [x10, x12, lsl #2]
     8d8:	b.cs	934 <BZ2_blockSort+0x934>  // b.hs, b.nlast
     8dc:	ldr	w11, [x10, x9, lsl #2]
     8e0:	lsl	w12, w11, #8
     8e4:	add	w13, w12, #0x100
     8e8:	ldr	w13, [x22, w13, sxtw #2]
     8ec:	ldr	w12, [x22, w12, sxtw #2]
     8f0:	sub	w13, w13, w12
     8f4:	mov	x12, x8
     8f8:	ldr	w14, [x10, x12, lsl #2]
     8fc:	lsl	w15, w14, #8
     900:	add	w16, w15, #0x100
     904:	ldr	w16, [x22, w16, sxtw #2]
     908:	ldr	w15, [x22, w15, sxtw #2]
     90c:	sub	w15, w16, w15
     910:	cmp	w15, w13
     914:	b.ls	8c4 <BZ2_blockSort+0x8c4>  // b.plast
     918:	add	x15, x10, x12, lsl #2
     91c:	sub	x12, x12, #0x28
     920:	add	w16, w12, #0x50
     924:	cmp	w16, #0x50
     928:	str	w14, [x15, #160]
     92c:	b.ge	8f8 <BZ2_blockSort+0x8f8>  // b.tcont
     930:	b	8c4 <BZ2_blockSort+0x8c4>
     934:	mov	x8, xzr
     938:	mov	w9, #0xd                   	// #13
     93c:	add	x10, sp, #0xa00
     940:	b	95c <BZ2_blockSort+0x95c>
     944:	add	x12, x12, #0xd
     948:	cmp	x9, #0xff
     94c:	add	x9, x9, #0x1
     950:	add	x8, x8, #0x1
     954:	str	w11, [x10, x12, lsl #2]
     958:	b.cs	9b4 <BZ2_blockSort+0x9b4>  // b.hs, b.nlast
     95c:	ldr	w11, [x10, x9, lsl #2]
     960:	lsl	w12, w11, #8
     964:	add	w13, w12, #0x100
     968:	ldr	w13, [x22, w13, sxtw #2]
     96c:	ldr	w12, [x22, w12, sxtw #2]
     970:	sub	w13, w13, w12
     974:	mov	x12, x8
     978:	ldr	w14, [x10, x12, lsl #2]
     97c:	lsl	w15, w14, #8
     980:	add	w16, w15, #0x100
     984:	ldr	w16, [x22, w16, sxtw #2]
     988:	ldr	w15, [x22, w15, sxtw #2]
     98c:	sub	w15, w16, w15
     990:	cmp	w15, w13
     994:	b.ls	944 <BZ2_blockSort+0x944>  // b.plast
     998:	add	x15, x10, x12, lsl #2
     99c:	sub	x12, x12, #0xd
     9a0:	add	w16, w12, #0x1a
     9a4:	cmp	w16, #0x1a
     9a8:	str	w14, [x15, #52]
     9ac:	b.ge	978 <BZ2_blockSort+0x978>  // b.tcont
     9b0:	b	944 <BZ2_blockSort+0x944>
     9b4:	mov	x8, xzr
     9b8:	mov	w9, #0x4                   	// #4
     9bc:	add	x10, sp, #0xa00
     9c0:	b	9dc <BZ2_blockSort+0x9dc>
     9c4:	add	x12, x12, #0x4
     9c8:	cmp	x9, #0xff
     9cc:	add	x9, x9, #0x1
     9d0:	add	x8, x8, #0x1
     9d4:	str	w11, [x10, x12, lsl #2]
     9d8:	b.cs	a34 <BZ2_blockSort+0xa34>  // b.hs, b.nlast
     9dc:	ldr	w11, [x10, x9, lsl #2]
     9e0:	lsl	w12, w11, #8
     9e4:	add	w13, w12, #0x100
     9e8:	ldr	w13, [x22, w13, sxtw #2]
     9ec:	ldr	w12, [x22, w12, sxtw #2]
     9f0:	sub	w13, w13, w12
     9f4:	mov	x12, x8
     9f8:	ldr	w14, [x10, x12, lsl #2]
     9fc:	lsl	w15, w14, #8
     a00:	add	w16, w15, #0x100
     a04:	ldr	w16, [x22, w16, sxtw #2]
     a08:	ldr	w15, [x22, w15, sxtw #2]
     a0c:	sub	w15, w16, w15
     a10:	cmp	w15, w13
     a14:	b.ls	9c4 <BZ2_blockSort+0x9c4>  // b.plast
     a18:	add	x15, x10, x12, lsl #2
     a1c:	sub	x12, x12, #0x4
     a20:	add	w16, w12, #0x8
     a24:	cmp	w16, #0x8
     a28:	str	w14, [x15, #16]
     a2c:	b.ge	9f8 <BZ2_blockSort+0x9f8>  // b.tcont
     a30:	b	9c4 <BZ2_blockSort+0x9c4>
     a34:	mov	x8, xzr
     a38:	mov	w9, #0x1                   	// #1
     a3c:	add	x10, sp, #0xa00
     a40:	b	a5c <BZ2_blockSort+0xa5c>
     a44:	add	x12, x12, #0x1
     a48:	cmp	x9, #0xff
     a4c:	add	x9, x9, #0x1
     a50:	add	x8, x8, #0x1
     a54:	str	w11, [x10, x12, lsl #2]
     a58:	b.cs	ab4 <BZ2_blockSort+0xab4>  // b.hs, b.nlast
     a5c:	ldr	w11, [x10, x9, lsl #2]
     a60:	lsl	w12, w11, #8
     a64:	add	w13, w12, #0x100
     a68:	ldr	w13, [x22, w13, sxtw #2]
     a6c:	ldr	w12, [x22, w12, sxtw #2]
     a70:	sub	w13, w13, w12
     a74:	mov	x12, x8
     a78:	ldr	w14, [x10, x12, lsl #2]
     a7c:	lsl	w15, w14, #8
     a80:	add	w16, w15, #0x100
     a84:	ldr	w16, [x22, w16, sxtw #2]
     a88:	ldr	w15, [x22, w15, sxtw #2]
     a8c:	sub	w15, w16, w15
     a90:	cmp	w15, w13
     a94:	b.ls	a44 <BZ2_blockSort+0xa44>  // b.plast
     a98:	add	x15, x10, x12, lsl #2
     a9c:	sub	x12, x12, #0x1
     aa0:	add	w16, w12, #0x2
     aa4:	cmp	w16, #0x2
     aa8:	str	w14, [x15, #4]
     aac:	b.ge	a78 <BZ2_blockSort+0xa78>  // b.tcont
     ab0:	b	a44 <BZ2_blockSort+0xa44>
     ab4:	add	x9, x21, #0x4
     ab8:	str	x9, [sp, #96]
     abc:	add	x9, x21, #0x8
     ac0:	str	x9, [sp, #72]
     ac4:	add	x9, x21, #0x10
     ac8:	str	x9, [sp, #64]
     acc:	add	x9, x21, #0x14
     ad0:	str	x9, [sp, #48]
     ad4:	add	x9, x22, #0x4
     ad8:	adrp	x10, 0 <BZ2_blockSort>
     adc:	mov	x8, xzr
     ae0:	str	x9, [sp, #56]
     ae4:	sub	x9, x21, #0x4
     ae8:	add	x20, sp, #0x900
     aec:	add	x26, sp, #0x500
     af0:	add	x27, sp, #0x100
     af4:	mov	w28, #0xfffe                	// #65534
     af8:	add	x10, x10, #0x0
     afc:	str	wzr, [sp, #108]
     b00:	str	x9, [sp, #32]
     b04:	str	x22, [sp, #112]
     b08:	b	b24 <BZ2_blockSort+0xb24>
     b0c:	ldr	x8, [sp, #80]
     b10:	adrp	x10, 0 <BZ2_blockSort>
     b14:	add	x10, x10, #0x0
     b18:	add	x8, x8, #0x1
     b1c:	cmp	x8, #0x100
     b20:	b.eq	177c <BZ2_blockSort+0x177c>  // b.none
     b24:	add	x9, sp, #0xa00
     b28:	ldr	w19, [x9, x8, lsl #2]
     b2c:	str	x8, [sp, #80]
     b30:	mov	x9, xzr
     b34:	mov	x11, xzr
     b38:	sxtw	x8, w19
     b3c:	str	x8, [sp, #160]
     b40:	lsl	w8, w19, #8
     b44:	sxtw	x8, w8
     b48:	str	x8, [sp, #168]
     b4c:	str	x19, [sp, #144]
     b50:	b	bb4 <BZ2_blockSort+0xbb4>
     b54:	ldr	x22, [sp, #112]
     b58:	ldr	x19, [sp, #144]
     b5c:	ldr	x11, [sp, #192]
     b60:	adrp	x10, 0 <BZ2_blockSort>
     b64:	add	x20, sp, #0x900
     b68:	add	x26, sp, #0x500
     b6c:	add	x27, sp, #0x100
     b70:	mov	w28, #0xfffe                	// #65534
     b74:	add	x10, x10, #0x0
     b78:	tbnz	w8, #31, 1788 <BZ2_blockSort+0x1788>
     b7c:	ldr	w9, [sp, #108]
     b80:	ldr	w12, [sp, #132]
     b84:	ldr	w8, [x22, x11, lsl #2]
     b88:	sub	w9, w9, w12
     b8c:	ldr	w12, [sp, #128]
     b90:	add	w9, w9, w12
     b94:	add	w9, w9, #0x1
     b98:	str	w9, [sp, #108]
     b9c:	ldr	x9, [sp, #136]
     ba0:	orr	w8, w8, #0x200000
     ba4:	str	w8, [x22, x11, lsl #2]
     ba8:	add	x9, x9, #0x1
     bac:	cmp	x9, #0x100
     bb0:	b.eq	1564 <BZ2_blockSort+0x1564>  // b.none
     bb4:	cmp	x9, x19
     bb8:	b.eq	ba8 <BZ2_blockSort+0xba8>  // b.none
     bbc:	ldr	x8, [sp, #168]
     bc0:	add	x11, x9, x8
     bc4:	ldr	w8, [x22, x11, lsl #2]
     bc8:	tbnz	w8, #21, ba0 <BZ2_blockSort+0xba0>
     bcc:	str	x9, [sp, #136]
     bd0:	add	x9, x22, x11, lsl #2
     bd4:	ldr	w9, [x9, #4]
     bd8:	and	w12, w8, #0xffdfffff
     bdc:	and	w9, w9, #0xffdfffff
     be0:	sub	w9, w9, #0x1
     be4:	stp	w9, w12, [sp, #128]
     be8:	subs	w9, w9, w12
     bec:	b.le	b9c <BZ2_blockSort+0xb9c>
     bf0:	ldr	w8, [sp, #92]
     bf4:	str	x11, [sp, #192]
     bf8:	cmp	w8, #0x4
     bfc:	b.ge	1530 <BZ2_blockSort+0x1530>  // b.tcont
     c00:	ldr	w8, [sp, #132]
     c04:	str	w8, [sp, #4384]
     c08:	ldr	w8, [sp, #128]
     c0c:	str	w8, [sp, #3984]
     c10:	mov	w8, #0x2                   	// #2
     c14:	str	w8, [sp, #3584]
     c18:	mov	w8, #0x1                   	// #1
     c1c:	sxtw	x20, w8
     c20:	sub	x26, x20, #0x1
     c24:	cmp	w8, #0x62
     c28:	lsl	x23, x26, #2
     c2c:	b.ge	de8 <BZ2_blockSort+0xde8>  // b.tcont
     c30:	add	x8, sp, #0x1, lsl #12
     c34:	add	x8, x8, #0x120
     c38:	ldr	w1, [x8, x23]
     c3c:	add	x8, sp, #0xf90
     c40:	ldr	w19, [x8, x23]
     c44:	add	x8, sp, #0xe00
     c48:	ldr	w27, [x8, x23]
     c4c:	sub	w28, w19, w1
     c50:	cmp	w28, #0x14
     c54:	b.lt	fdc <BZ2_blockSort+0xfdc>  // b.tstop
     c58:	cmp	w27, #0xe
     c5c:	b.gt	fdc <BZ2_blockSort+0xfdc>
     c60:	add	w8, w19, w1
     c64:	sxtw	x12, w1
     c68:	sxtw	x13, w19
     c6c:	sbfx	x14, x8, #1, #31
     c70:	ldr	w8, [x21, x12, lsl #2]
     c74:	ldr	w9, [x21, x13, lsl #2]
     c78:	ldr	w10, [x21, x14, lsl #2]
     c7c:	add	w8, w8, w27
     c80:	add	w9, w9, w27
     c84:	ldrb	w8, [x24, w8, uxtw]
     c88:	ldrb	w9, [x24, w9, uxtw]
     c8c:	add	w10, w10, w27
     c90:	ldrb	w10, [x24, w10, uxtw]
     c94:	cmp	w8, w9
     c98:	csel	w11, w8, w9, hi  // hi = pmore
     c9c:	csel	w8, w9, w8, hi  // hi = pmore
     ca0:	cmp	w8, w10
     ca4:	csel	w8, w8, w10, hi  // hi = pmore
     ca8:	cmp	w11, w10
     cac:	csel	w15, w8, w11, hi  // hi = pmore
     cb0:	mov	w10, w19
     cb4:	mov	w8, w1
     cb8:	mov	w11, w19
     cbc:	mov	w9, w1
     cc0:	cmp	w9, w11
     cc4:	b.gt	d30 <BZ2_blockSort+0xd30>
     cc8:	sxtw	x16, w11
     ccc:	sxtw	x8, w8
     cd0:	sxtw	x17, w9
     cd4:	ldr	w9, [x21, x17, lsl #2]
     cd8:	add	w18, w9, w27
     cdc:	ldrb	w18, [x24, w18, uxtw]
     ce0:	subs	w18, w18, w15
     ce4:	b.eq	d04 <BZ2_blockSort+0xd04>  // b.none
     ce8:	cmp	w18, #0x0
     cec:	b.gt	d2c <BZ2_blockSort+0xd2c>
     cf0:	add	x9, x17, #0x1
     cf4:	cmp	x17, x16
     cf8:	mov	x17, x9
     cfc:	b.lt	cd4 <BZ2_blockSort+0xcd4>  // b.tstop
     d00:	b	d30 <BZ2_blockSort+0xd30>
     d04:	lsl	x18, x8, #2
     d08:	ldr	w0, [x21, x18]
     d0c:	add	x8, x8, #0x1
     d10:	cmp	w11, w17
     d14:	str	w0, [x21, x17, lsl #2]
     d18:	str	w9, [x21, x18]
     d1c:	add	w9, w17, #0x1
     d20:	b.gt	cd0 <BZ2_blockSort+0xcd0>
     d24:	add	w9, w17, #0x1
     d28:	b	d30 <BZ2_blockSort+0xd30>
     d2c:	mov	w9, w17
     d30:	cmp	w9, w11
     d34:	b.gt	dbc <BZ2_blockSort+0xdbc>
     d38:	sxtw	x16, w9
     d3c:	sxtw	x10, w10
     d40:	sxtw	x17, w11
     d44:	ldr	w11, [x21, x17, lsl #2]
     d48:	add	w18, w11, w27
     d4c:	ldrb	w18, [x24, w18, uxtw]
     d50:	subs	w18, w18, w15
     d54:	b.eq	d70 <BZ2_blockSort+0xd70>  // b.none
     d58:	tbnz	w18, #31, d98 <BZ2_blockSort+0xd98>
     d5c:	sub	x11, x17, #0x1
     d60:	cmp	x17, x16
     d64:	mov	x17, x11
     d68:	b.gt	d44 <BZ2_blockSort+0xd44>
     d6c:	b	dbc <BZ2_blockSort+0xdbc>
     d70:	lsl	x18, x10, #2
     d74:	ldr	w0, [x21, x18]
     d78:	sub	x10, x10, #0x1
     d7c:	cmp	w9, w17
     d80:	str	w0, [x21, x17, lsl #2]
     d84:	str	w11, [x21, x18]
     d88:	sub	w11, w17, #0x1
     d8c:	b.ge	dbc <BZ2_blockSort+0xdbc>  // b.tcont
     d90:	sxtw	x17, w11
     d94:	b	d44 <BZ2_blockSort+0xd44>
     d98:	lsl	x16, x16, #2
     d9c:	ldr	w18, [x21, x16]
     da0:	add	w9, w9, #0x1
     da4:	str	w11, [x21, x16]
     da8:	sub	w11, w17, #0x1
     dac:	str	w18, [x21, x17, lsl #2]
     db0:	cmp	w9, w11
     db4:	b.le	cc8 <BZ2_blockSort+0xcc8>
     db8:	b	d30 <BZ2_blockSort+0xd30>
     dbc:	cmp	w10, w8
     dc0:	b.ge	1244 <BZ2_blockSort+0x1244>  // b.tcont
     dc4:	add	w8, w27, #0x1
     dc8:	cmp	w27, #0xd
     dcc:	add	x9, sp, #0xe00
     dd0:	mov	w27, w8
     dd4:	str	w8, [x9, x26, lsl #2]
     dd8:	b.le	c70 <BZ2_blockSort+0xc70>
     ddc:	str	x26, [sp, #200]
     de0:	mov	w27, w8
     de4:	b	fc4 <BZ2_blockSort+0xfc4>
     de8:	mov	w0, #0x3e9                 	// #1001
     dec:	bl	0 <BZ2_bz__AssertH__fail>
     df0:	add	x8, sp, #0x1, lsl #12
     df4:	add	x8, x8, #0x120
     df8:	ldr	w1, [x8, x23]
     dfc:	add	x8, sp, #0xf90
     e00:	ldr	w19, [x8, x23]
     e04:	add	x8, sp, #0xe00
     e08:	ldr	w27, [x8, x23]
     e0c:	str	x26, [sp, #200]
     e10:	sub	w28, w19, w1
     e14:	cmp	w28, #0x14
     e18:	b.lt	fc4 <BZ2_blockSort+0xfc4>  // b.tstop
     e1c:	cmp	w27, #0xe
     e20:	b.gt	fc4 <BZ2_blockSort+0xfc4>
     e24:	sxtw	x8, w1
     e28:	str	x8, [sp, #240]
     e2c:	sxtw	x8, w19
     e30:	str	x8, [sp, #232]
     e34:	add	w8, w19, w1
     e38:	sbfx	x26, x8, #1, #31
     e3c:	stp	x23, x20, [sp, #216]
     e40:	ldp	x9, x8, [sp, #232]
     e44:	ldr	w10, [x21, x26, lsl #2]
     e48:	ldr	w8, [x21, x8, lsl #2]
     e4c:	ldr	w9, [x21, x9, lsl #2]
     e50:	add	w10, w10, w27
     e54:	ldrb	w10, [x24, w10, uxtw]
     e58:	add	w8, w8, w27
     e5c:	add	w9, w9, w27
     e60:	ldrb	w8, [x24, w8, uxtw]
     e64:	ldrb	w9, [x24, w9, uxtw]
     e68:	cmp	w8, w9
     e6c:	csel	w11, w8, w9, hi  // hi = pmore
     e70:	csel	w8, w9, w8, hi  // hi = pmore
     e74:	cmp	w8, w10
     e78:	csel	w8, w8, w10, hi  // hi = pmore
     e7c:	cmp	w11, w10
     e80:	csel	w12, w8, w11, hi  // hi = pmore
     e84:	mov	w10, w19
     e88:	mov	w8, w1
     e8c:	mov	w11, w19
     e90:	mov	w9, w1
     e94:	cmp	w9, w11
     e98:	b.gt	f04 <BZ2_blockSort+0xf04>
     e9c:	sxtw	x13, w11
     ea0:	sxtw	x8, w8
     ea4:	sxtw	x14, w9
     ea8:	ldr	w9, [x21, x14, lsl #2]
     eac:	add	w15, w9, w27
     eb0:	ldrb	w15, [x24, w15, uxtw]
     eb4:	subs	w15, w15, w12
     eb8:	b.eq	ed8 <BZ2_blockSort+0xed8>  // b.none
     ebc:	cmp	w15, #0x0
     ec0:	b.gt	f00 <BZ2_blockSort+0xf00>
     ec4:	add	x9, x14, #0x1
     ec8:	cmp	x14, x13
     ecc:	mov	x14, x9
     ed0:	b.lt	ea8 <BZ2_blockSort+0xea8>  // b.tstop
     ed4:	b	f04 <BZ2_blockSort+0xf04>
     ed8:	lsl	x15, x8, #2
     edc:	ldr	w16, [x21, x15]
     ee0:	add	x8, x8, #0x1
     ee4:	cmp	w11, w14
     ee8:	str	w16, [x21, x14, lsl #2]
     eec:	str	w9, [x21, x15]
     ef0:	add	w9, w14, #0x1
     ef4:	b.gt	ea4 <BZ2_blockSort+0xea4>
     ef8:	add	w9, w14, #0x1
     efc:	b	f04 <BZ2_blockSort+0xf04>
     f00:	mov	w9, w14
     f04:	cmp	w9, w11
     f08:	b.gt	f8c <BZ2_blockSort+0xf8c>
     f0c:	sxtw	x13, w9
     f10:	sxtw	x10, w10
     f14:	sxtw	x14, w11
     f18:	ldr	w11, [x21, x14, lsl #2]
     f1c:	add	w15, w11, w27
     f20:	ldrb	w15, [x24, w15, uxtw]
     f24:	subs	w15, w15, w12
     f28:	b.eq	f44 <BZ2_blockSort+0xf44>  // b.none
     f2c:	tbnz	w15, #31, f68 <BZ2_blockSort+0xf68>
     f30:	sub	x11, x14, #0x1
     f34:	cmp	x14, x13
     f38:	mov	x14, x11
     f3c:	b.gt	f18 <BZ2_blockSort+0xf18>
     f40:	b	f8c <BZ2_blockSort+0xf8c>
     f44:	lsl	x15, x10, #2
     f48:	ldr	w16, [x21, x15]
     f4c:	sub	x10, x10, #0x1
     f50:	cmp	w9, w14
     f54:	str	w16, [x21, x14, lsl #2]
     f58:	str	w11, [x21, x15]
     f5c:	sub	w11, w14, #0x1
     f60:	b.lt	f14 <BZ2_blockSort+0xf14>  // b.tstop
     f64:	b	f8c <BZ2_blockSort+0xf8c>
     f68:	lsl	x13, x13, #2
     f6c:	ldr	w15, [x21, x13]
     f70:	add	w9, w9, #0x1
     f74:	str	w11, [x21, x13]
     f78:	sub	w11, w14, #0x1
     f7c:	str	w15, [x21, x14, lsl #2]
     f80:	cmp	w9, w11
     f84:	b.le	e9c <BZ2_blockSort+0xe9c>
     f88:	b	f04 <BZ2_blockSort+0xf04>
     f8c:	cmp	w10, w8
     f90:	b.ge	1240 <BZ2_blockSort+0x1240>  // b.tcont
     f94:	ldr	x9, [sp, #200]
     f98:	add	w20, w27, #0x1
     f9c:	add	x8, sp, #0xe00
     fa0:	mov	w0, #0x3e9                 	// #1001
     fa4:	str	w20, [x8, x9, lsl #2]
     fa8:	mov	x23, x1
     fac:	bl	0 <BZ2_bz__AssertH__fail>
     fb0:	mov	x1, x23
     fb4:	cmp	w27, #0xd
     fb8:	mov	w27, w20
     fbc:	b.le	e40 <BZ2_blockSort+0xe40>
     fc0:	mov	w27, w20
     fc4:	ldr	x11, [sp, #192]
     fc8:	adrp	x10, 0 <BZ2_blockSort>
     fcc:	add	x10, x10, #0x0
     fd0:	cmp	w28, #0x1
     fd4:	b.ge	fe8 <BZ2_blockSort+0xfe8>  // b.tcont
     fd8:	b	1004 <BZ2_blockSort+0x1004>
     fdc:	str	x26, [sp, #200]
     fe0:	cmp	w28, #0x1
     fe4:	b.lt	1004 <BZ2_blockSort+0x1004>  // b.tstop
     fe8:	mov	x8, xzr
     fec:	ldr	w9, [x10, x8, lsl #2]
     ff0:	add	x8, x8, #0x1
     ff4:	cmp	w9, w28
     ff8:	b.le	fec <BZ2_blockSort+0xfec>
     ffc:	cmp	w8, #0x1
    1000:	b.ne	1030 <BZ2_blockSort+0x1030>  // b.any
    1004:	ldr	w8, [sp, #252]
    1008:	ldr	x19, [sp, #144]
    100c:	add	x20, sp, #0x900
    1010:	add	x26, sp, #0x500
    1014:	add	x27, sp, #0x100
    1018:	mov	w28, #0xfffe                	// #65534
    101c:	tbnz	w8, #31, b78 <BZ2_blockSort+0xb78>
    1020:	ldr	x8, [sp, #200]
    1024:	cmp	w8, #0x0
    1028:	b.gt	c1c <BZ2_blockSort+0xc1c>
    102c:	b	1528 <BZ2_blockSort+0x1528>
    1030:	sxtw	x9, w19
    1034:	sub	x8, x8, #0x1
    1038:	str	x9, [sp, #240]
    103c:	add	w9, w1, #0x1
    1040:	str	w9, [sp, #156]
    1044:	and	x8, x8, #0xffffffff
    1048:	add	w9, w1, #0x2
    104c:	str	w9, [sp, #152]
    1050:	str	x1, [sp, #120]
    1054:	b	1074 <BZ2_blockSort+0x1074>
    1058:	ldr	x8, [sp, #176]
    105c:	ldp	x22, x1, [sp, #112]
    1060:	adrp	x10, 0 <BZ2_blockSort>
    1064:	add	x10, x10, #0x0
    1068:	cmp	x8, #0x1
    106c:	ldp	x8, x11, [sp, #184]
    1070:	b.le	1004 <BZ2_blockSort+0x1004>
    1074:	str	x8, [sp, #176]
    1078:	sub	x8, x8, #0x1
    107c:	ldr	w28, [x10, x8, lsl #2]
    1080:	str	x8, [sp, #184]
    1084:	str	w1, [sp, #232]
    1088:	add	w8, w28, w1
    108c:	sxtw	x23, w8
    1090:	ldr	w8, [sp, #152]
    1094:	mov	x20, x23
    1098:	str	w8, [sp, #216]
    109c:	ldr	w8, [sp, #156]
    10a0:	str	w8, [sp, #224]
    10a4:	mov	w8, w1
    10a8:	b	10ec <BZ2_blockSort+0x10ec>
    10ac:	add	w8, w28, w22
    10b0:	sxtw	x22, w8
    10b4:	ldr	w9, [sp, #232]
    10b8:	ldr	w8, [sp, #212]
    10bc:	add	x20, x20, #0x3
    10c0:	add	w9, w9, #0x3
    10c4:	str	w9, [sp, #232]
    10c8:	ldr	w9, [sp, #224]
    10cc:	str	w8, [x21, x22, lsl #2]
    10d0:	ldr	w8, [sp, #252]
    10d4:	add	w9, w9, #0x3
    10d8:	str	w9, [sp, #224]
    10dc:	ldr	w9, [sp, #216]
    10e0:	add	w9, w9, #0x3
    10e4:	str	w9, [sp, #216]
    10e8:	tbnz	w8, #31, b54 <BZ2_blockSort+0xb54>
    10ec:	ldr	x8, [sp, #240]
    10f0:	cmp	x20, x8
    10f4:	b.gt	1058 <BZ2_blockSort+0x1058>
    10f8:	ldr	w8, [x21, x20, lsl #2]
    10fc:	ldr	w26, [sp, #232]
    1100:	add	w19, w8, w27
    1104:	str	w8, [sp, #212]
    1108:	ldr	w8, [x21, w26, sxtw #2]
    110c:	ldr	x3, [x29, #8]
    1110:	add	x5, sp, #0xfc
    1114:	mov	w1, w19
    1118:	add	w0, w8, w27
    111c:	mov	x2, x24
    1120:	mov	w4, w25
    1124:	sxtw	x22, w26
    1128:	bl	22ec <mainGtU>
    112c:	tst	w0, #0xff
    1130:	b.eq	1150 <BZ2_blockSort+0x1150>  // b.none
    1134:	ldr	w8, [x21, x22, lsl #2]
    1138:	add	w9, w28, w26
    113c:	cmp	w22, w23
    1140:	sub	w26, w22, w28
    1144:	str	w8, [x21, w9, sxtw #2]
    1148:	b.ge	1108 <BZ2_blockSort+0x1108>  // b.tcont
    114c:	b	1158 <BZ2_blockSort+0x1158>
    1150:	add	w8, w28, w22
    1154:	sxtw	x22, w8
    1158:	ldr	x8, [sp, #240]
    115c:	cmp	x20, x8
    1160:	ldr	w8, [sp, #212]
    1164:	str	w8, [x21, x22, lsl #2]
    1168:	b.ge	1058 <BZ2_blockSort+0x1058>  // b.tcont
    116c:	add	x8, x20, #0x1
    1170:	ldr	w8, [x21, x8, lsl #2]
    1174:	ldr	w26, [sp, #224]
    1178:	add	w19, w8, w27
    117c:	str	w8, [sp, #212]
    1180:	ldr	w8, [x21, w26, sxtw #2]
    1184:	ldr	x3, [x29, #8]
    1188:	add	x5, sp, #0xfc
    118c:	mov	w1, w19
    1190:	add	w0, w8, w27
    1194:	mov	x2, x24
    1198:	mov	w4, w25
    119c:	sxtw	x22, w26
    11a0:	bl	22ec <mainGtU>
    11a4:	tst	w0, #0xff
    11a8:	b.eq	11c8 <BZ2_blockSort+0x11c8>  // b.none
    11ac:	ldr	w8, [x21, x22, lsl #2]
    11b0:	add	w9, w28, w26
    11b4:	cmp	w22, w23
    11b8:	sub	w26, w22, w28
    11bc:	str	w8, [x21, w9, sxtw #2]
    11c0:	b.ge	1180 <BZ2_blockSort+0x1180>  // b.tcont
    11c4:	b	11d0 <BZ2_blockSort+0x11d0>
    11c8:	add	w8, w28, w22
    11cc:	sxtw	x22, w8
    11d0:	ldr	x9, [sp, #240]
    11d4:	add	x8, x20, #0x2
    11d8:	cmp	x8, x9
    11dc:	ldr	w9, [sp, #212]
    11e0:	str	w9, [x21, x22, lsl #2]
    11e4:	b.gt	1058 <BZ2_blockSort+0x1058>
    11e8:	ldr	w8, [x21, x8, lsl #2]
    11ec:	ldr	w26, [sp, #216]
    11f0:	add	w19, w8, w27
    11f4:	str	w8, [sp, #212]
    11f8:	ldr	w8, [x21, w26, sxtw #2]
    11fc:	ldr	x3, [x29, #8]
    1200:	add	x5, sp, #0xfc
    1204:	mov	w1, w19
    1208:	add	w0, w8, w27
    120c:	mov	x2, x24
    1210:	mov	w4, w25
    1214:	sxtw	x22, w26
    1218:	bl	22ec <mainGtU>
    121c:	tst	w0, #0xff
    1220:	b.eq	10ac <BZ2_blockSort+0x10ac>  // b.none
    1224:	ldr	w8, [x21, x22, lsl #2]
    1228:	add	w9, w28, w26
    122c:	cmp	w22, w23
    1230:	sub	w26, w22, w28
    1234:	str	w8, [x21, w9, sxtw #2]
    1238:	b.ge	11f8 <BZ2_blockSort+0x11f8>  // b.tcont
    123c:	b	10b4 <BZ2_blockSort+0x10b4>
    1240:	ldp	x23, x20, [sp, #216]
    1244:	sub	w16, w8, w1
    1248:	sub	w17, w9, w8
    124c:	cmp	w16, w17
    1250:	csel	w12, w16, w17, lt  // lt = tstop
    1254:	cmp	w12, #0x1
    1258:	mov	w28, #0xfffe                	// #65534
    125c:	b.lt	1344 <BZ2_blockSort+0x1344>  // b.tstop
    1260:	cmp	w16, w17
    1264:	csel	w14, w16, w17, lt  // lt = tstop
    1268:	cmp	w14, #0x1
    126c:	csinc	w14, w14, wzr, lt  // lt = tstop
    1270:	sub	w13, w9, w12
    1274:	sub	w15, w12, w14
    1278:	sxtw	x13, w13
    127c:	cmp	w15, #0x7
    1280:	sxtw	x14, w1
    1284:	b.cc	131c <BZ2_blockSort+0x131c>  // b.lo, b.ul, b.last
    1288:	cmp	w16, w17
    128c:	csel	w16, w16, w17, lt  // lt = tstop
    1290:	cmp	w16, #0x1
    1294:	ldr	x0, [sp, #96]
    1298:	csinc	w16, w16, wzr, lt  // lt = tstop
    129c:	sub	w16, w12, w16
    12a0:	add	x17, x13, x16
    12a4:	add	x18, x21, x14, lsl #2
    12a8:	add	x17, x0, x17, lsl #2
    12ac:	cmp	x18, x17
    12b0:	b.cs	12cc <BZ2_blockSort+0x12cc>  // b.hs, b.nlast
    12b4:	ldr	x17, [sp, #96]
    12b8:	add	x16, x14, x16
    12bc:	add	x16, x17, x16, lsl #2
    12c0:	add	x17, x21, x13, lsl #2
    12c4:	cmp	x17, x16
    12c8:	b.cc	131c <BZ2_blockSort+0x131c>  // b.lo, b.ul, b.last
    12cc:	ldr	x0, [sp, #64]
    12d0:	add	x15, x15, #0x1
    12d4:	and	x17, x15, #0x1fffffff8
    12d8:	add	x16, x17, x14
    12dc:	add	x18, x0, x13, lsl #2
    12e0:	add	x13, x17, x13
    12e4:	sub	w12, w12, w17
    12e8:	add	x14, x0, x14, lsl #2
    12ec:	mov	x0, x17
    12f0:	ldp	q0, q3, [x14, #-16]
    12f4:	ldp	q1, q2, [x18, #-16]
    12f8:	subs	x0, x0, #0x8
    12fc:	stp	q1, q2, [x14, #-16]
    1300:	stp	q0, q3, [x18, #-16]
    1304:	add	x18, x18, #0x20
    1308:	add	x14, x14, #0x20
    130c:	b.ne	12f0 <BZ2_blockSort+0x12f0>  // b.any
    1310:	cmp	x15, x17
    1314:	mov	x14, x16
    1318:	b.eq	1344 <BZ2_blockSort+0x1344>  // b.none
    131c:	add	x14, x21, x14, lsl #2
    1320:	add	x13, x21, x13, lsl #2
    1324:	add	w12, w12, #0x1
    1328:	ldr	w15, [x13]
    132c:	ldr	w16, [x14]
    1330:	sub	w12, w12, #0x1
    1334:	cmp	w12, #0x1
    1338:	str	w15, [x14], #4
    133c:	str	w16, [x13], #4
    1340:	b.gt	1328 <BZ2_blockSort+0x1328>
    1344:	sub	w15, w19, w10
    1348:	sub	w10, w10, w11
    134c:	cmp	w15, w10
    1350:	csel	w11, w15, w10, lt  // lt = tstop
    1354:	cmp	w11, #0x1
    1358:	b.lt	1448 <BZ2_blockSort+0x1448>  // b.tstop
    135c:	cmp	w15, w10
    1360:	csel	w13, w15, w10, lt  // lt = tstop
    1364:	cmp	w13, #0x1
    1368:	csinc	w13, w13, wzr, lt  // lt = tstop
    136c:	sub	w12, w19, w11
    1370:	sub	w14, w11, w13
    1374:	sxtw	x12, w12
    1378:	cmp	w14, #0x7
    137c:	sxtw	x13, w9
    1380:	b.cc	141c <BZ2_blockSort+0x141c>  // b.lo, b.ul, b.last
    1384:	cmp	w15, w10
    1388:	csel	w15, w15, w10, lt  // lt = tstop
    138c:	cmp	w15, #0x1
    1390:	ldr	x18, [sp, #72]
    1394:	csinc	w15, w15, wzr, lt  // lt = tstop
    1398:	sub	w15, w11, w15
    139c:	add	x17, x12, x15
    13a0:	add	x16, x21, x13, lsl #2
    13a4:	add	x17, x18, x17, lsl #2
    13a8:	cmp	x16, x17
    13ac:	b.cs	13c8 <BZ2_blockSort+0x13c8>  // b.hs, b.nlast
    13b0:	ldr	x16, [sp, #96]
    13b4:	add	x15, x13, x15
    13b8:	add	x15, x16, x15, lsl #2
    13bc:	add	x16, x16, x12, lsl #2
    13c0:	cmp	x16, x15
    13c4:	b.cc	141c <BZ2_blockSort+0x141c>  // b.lo, b.ul, b.last
    13c8:	ldr	x15, [sp, #48]
    13cc:	ldr	x18, [sp, #64]
    13d0:	add	x14, x14, #0x1
    13d4:	and	x16, x14, #0x1fffffff8
    13d8:	add	x17, x15, x12, lsl #2
    13dc:	add	x15, x16, x13
    13e0:	add	x12, x16, x12
    13e4:	sub	w11, w11, w16
    13e8:	add	x13, x18, x13, lsl #2
    13ec:	mov	x18, x16
    13f0:	ldp	q0, q3, [x13, #-16]
    13f4:	ldp	q1, q2, [x17, #-16]
    13f8:	subs	x18, x18, #0x8
    13fc:	stp	q1, q2, [x13, #-16]
    1400:	stp	q0, q3, [x17, #-16]
    1404:	add	x17, x17, #0x20
    1408:	add	x13, x13, #0x20
    140c:	b.ne	13f0 <BZ2_blockSort+0x13f0>  // b.any
    1410:	cmp	x14, x16
    1414:	mov	x13, x15
    1418:	b.eq	1448 <BZ2_blockSort+0x1448>  // b.none
    141c:	ldr	x14, [sp, #96]
    1420:	add	x13, x21, x13, lsl #2
    1424:	add	w11, w11, #0x1
    1428:	add	x12, x14, x12, lsl #2
    142c:	ldr	w14, [x12]
    1430:	ldr	w15, [x13]
    1434:	sub	w11, w11, #0x1
    1438:	cmp	w11, #0x1
    143c:	str	w14, [x13], #4
    1440:	str	w15, [x12], #4
    1444:	b.gt	142c <BZ2_blockSort+0x142c>
    1448:	sub	w8, w1, w8
    144c:	sub	w10, w19, w10
    1450:	add	w8, w8, w9
    1454:	add	w9, w10, #0x1
    1458:	sub	w11, w8, #0x1
    145c:	sub	w9, w19, w9
    1460:	sub	w13, w11, w1
    1464:	cmp	w13, w9
    1468:	csinc	w9, w1, w10, lt  // lt = tstop
    146c:	csel	w14, w11, w19, lt  // lt = tstop
    1470:	sub	w12, w10, w8
    1474:	sub	w15, w14, w9
    1478:	csinc	w13, w1, w10, ge  // ge = tcont
    147c:	csel	w11, w19, w11, lt  // lt = tstop
    1480:	cmp	w15, w12
    1484:	csel	w12, w8, w9, lt  // lt = tstop
    1488:	csel	w15, w14, w10, lt  // lt = tstop
    148c:	csel	w10, w10, w14, lt  // lt = tstop
    1490:	sub	w16, w11, w13
    1494:	csel	w8, w9, w8, lt  // lt = tstop
    1498:	sub	w9, w10, w12
    149c:	cinc	w14, w27, ge  // ge = tcont
    14a0:	cinc	w17, w27, lt  // lt = tstop
    14a4:	cmp	w16, w9
    14a8:	add	x0, sp, #0x1, lsl #12
    14ac:	csel	w16, w13, w12, lt  // lt = tstop
    14b0:	csel	w12, w12, w13, lt  // lt = tstop
    14b4:	add	x0, x0, #0x120
    14b8:	csel	w13, w11, w10, lt  // lt = tstop
    14bc:	csel	w10, w10, w11, lt  // lt = tstop
    14c0:	str	w12, [x0, x23]
    14c4:	add	x12, sp, #0xf90
    14c8:	lsl	x9, x20, #2
    14cc:	csel	w11, w27, w17, lt  // lt = tstop
    14d0:	csel	w17, w17, w27, lt  // lt = tstop
    14d4:	str	w10, [x12, x23]
    14d8:	add	x10, sp, #0xe00
    14dc:	str	w17, [x10, x23]
    14e0:	str	w11, [x10, x9]
    14e4:	ldr	x19, [sp, #144]
    14e8:	ldr	x11, [sp, #192]
    14ec:	add	x18, x9, #0x4
    14f0:	str	w16, [x0, x9]
    14f4:	str	w8, [x0, x18]
    14f8:	str	w14, [x10, x18]
    14fc:	add	w8, w20, #0x2
    1500:	adrp	x10, 0 <BZ2_blockSort>
    1504:	str	w13, [x12, x9]
    1508:	str	w15, [x12, x18]
    150c:	str	x8, [sp, #200]
    1510:	add	x20, sp, #0x900
    1514:	add	x26, sp, #0x500
    1518:	add	x27, sp, #0x100
    151c:	add	x10, x10, #0x0
    1520:	cmp	w8, #0x0
    1524:	b.gt	c1c <BZ2_blockSort+0xc1c>
    1528:	ldr	w8, [sp, #252]
    152c:	b	b78 <BZ2_blockSort+0xb78>
    1530:	adrp	x8, 0 <stderr>
    1534:	ldr	x0, [x8]
    1538:	ldr	w4, [sp, #108]
    153c:	adrp	x1, 0 <BZ2_blockSort>
    1540:	add	w5, w9, #0x1
    1544:	add	x1, x1, #0x0
    1548:	mov	w2, w19
    154c:	ldr	x3, [sp, #136]
    1550:	bl	0 <fprintf>
    1554:	ldr	x11, [sp, #192]
    1558:	adrp	x10, 0 <BZ2_blockSort>
    155c:	add	x10, x10, #0x0
    1560:	b	c00 <BZ2_blockSort+0xc00>
    1564:	ldr	x8, [sp, #160]
    1568:	ldrb	w8, [x20, x8]
    156c:	cbz	w8, 1578 <BZ2_blockSort+0x1578>
    1570:	mov	w0, #0x3ee                 	// #1006
    1574:	bl	0 <BZ2_bz__AssertH__fail>
    1578:	ldr	x9, [sp, #56]
    157c:	ldr	x10, [sp, #160]
    1580:	mov	x8, xzr
    1584:	add	x9, x9, x10, lsl #2
    1588:	ldur	w10, [x9, #-4]
    158c:	and	w10, w10, #0xffdfffff
    1590:	str	w10, [x26, x8]
    1594:	ldr	w10, [x9]
    1598:	add	x9, x9, #0x400
    159c:	and	w10, w10, #0xffdfffff
    15a0:	sub	w10, w10, #0x1
    15a4:	str	w10, [x27, x8]
    15a8:	add	x8, x8, #0x4
    15ac:	cmp	x8, #0x400
    15b0:	b.ne	1588 <BZ2_blockSort+0x1588>  // b.any
    15b4:	ldr	x8, [sp, #168]
    15b8:	ldrsw	x9, [x22, x8, lsl #2]
    15bc:	ldr	x8, [sp, #160]
    15c0:	and	x9, x9, #0xffffffffffdfffff
    15c4:	ldr	w8, [x26, x8, lsl #2]
    15c8:	cmp	w9, w8
    15cc:	b.lt	163c <BZ2_blockSort+0x163c>  // b.tstop
    15d0:	ldr	x9, [sp, #168]
    15d4:	add	w19, w9, #0x100
    15d8:	ldr	x9, [sp, #160]
    15dc:	ldr	w10, [x22, w19, sxtw #2]
    15e0:	ldr	w9, [x27, x9, lsl #2]
    15e4:	and	w10, w10, #0xffdfffff
    15e8:	sub	w10, w10, #0x1
    15ec:	cmp	w10, w9
    15f0:	b.le	1678 <BZ2_blockSort+0x1678>
    15f4:	ldr	w11, [x21, w10, sxtw #2]
    15f8:	sub	w11, w11, #0x1
    15fc:	and	w12, w25, w11, asr #31
    1600:	add	w11, w12, w11
    1604:	ldrb	w12, [x24, w11, sxtw]
    1608:	ldrb	w13, [x20, x12]
    160c:	cbnz	w13, 15e8 <BZ2_blockSort+0x15e8>
    1610:	lsl	x9, x12, #2
    1614:	ldrsw	x12, [x27, x9]
    1618:	sub	w13, w12, #0x1
    161c:	str	w13, [x27, x9]
    1620:	ldr	x9, [sp, #160]
    1624:	str	w11, [x21, x12, lsl #2]
    1628:	ldr	w9, [x27, x9, lsl #2]
    162c:	b	15e8 <BZ2_blockSort+0x15e8>
    1630:	add	x9, x9, #0x1
    1634:	cmp	x9, w8, sxtw
    1638:	b.ge	15d0 <BZ2_blockSort+0x15d0>  // b.tcont
    163c:	ldr	w10, [x21, x9, lsl #2]
    1640:	sub	w10, w10, #0x1
    1644:	and	w11, w25, w10, asr #31
    1648:	add	w10, w11, w10
    164c:	ldrb	w11, [x24, w10, sxtw]
    1650:	ldrb	w12, [x20, x11]
    1654:	cbnz	w12, 1630 <BZ2_blockSort+0x1630>
    1658:	lsl	x8, x11, #2
    165c:	ldrsw	x11, [x26, x8]
    1660:	add	w12, w11, #0x1
    1664:	str	w12, [x26, x8]
    1668:	ldr	x8, [sp, #160]
    166c:	str	w10, [x21, x11, lsl #2]
    1670:	ldr	w8, [x26, x8, lsl #2]
    1674:	b	1630 <BZ2_blockSort+0x1630>
    1678:	sub	w10, w8, #0x1
    167c:	cmp	w10, w9
    1680:	b.eq	169c <BZ2_blockSort+0x169c>  // b.none
    1684:	cbnz	w8, 1694 <BZ2_blockSort+0x1694>
    1688:	ldr	w8, [sp, #44]
    168c:	cmp	w9, w8
    1690:	b.eq	169c <BZ2_blockSort+0x169c>  // b.none
    1694:	mov	w0, #0x3ef                 	// #1007
    1698:	bl	0 <BZ2_bz__AssertH__fail>
    169c:	ldr	x10, [sp, #160]
    16a0:	mov	x9, xzr
    16a4:	sxtw	x8, w19
    16a8:	add	x10, x22, x10, lsl #2
    16ac:	add	x11, x10, x9
    16b0:	ldr	w12, [x11]
    16b4:	ldr	w13, [x11, #1024]
    16b8:	add	x9, x9, #0x800
    16bc:	cmp	x9, #0x40, lsl #12
    16c0:	orr	w12, w12, #0x200000
    16c4:	orr	w13, w13, #0x200000
    16c8:	str	w12, [x11]
    16cc:	str	w13, [x11, #1024]
    16d0:	b.ne	16ac <BZ2_blockSort+0x16ac>  // b.any
    16d4:	ldr	x9, [sp, #80]
    16d8:	ldr	x10, [sp, #160]
    16dc:	ldr	x23, [x29, #8]
    16e0:	cmp	x9, #0xfe
    16e4:	mov	w9, #0x1                   	// #1
    16e8:	strb	w9, [x20, x10]
    16ec:	b.hi	b0c <BZ2_blockSort+0xb0c>  // b.pmore
    16f0:	ldr	x9, [sp, #168]
    16f4:	ldr	w8, [x22, x8, lsl #2]
    16f8:	ldrsw	x9, [x22, x9, lsl #2]
    16fc:	and	w8, w8, #0xffdfffff
    1700:	and	x10, x9, #0xffffffffffdfffff
    1704:	sub	w11, w8, w10
    1708:	mov	w8, #0xffffffff            	// #-1
    170c:	add	w8, w8, #0x1
    1710:	asr	w9, w11, w8
    1714:	cmp	w9, w28
    1718:	b.gt	170c <BZ2_blockSort+0x170c>
    171c:	subs	w9, w11, #0x1
    1720:	b.lt	1764 <BZ2_blockSort+0x1764>  // b.tstop
    1724:	ldr	x12, [sp, #32]
    1728:	mov	w11, w11
    172c:	add	x10, x12, x10, lsl #2
    1730:	b	1740 <BZ2_blockSort+0x1740>
    1734:	add	x12, x11, #0x1
    1738:	cmp	x12, #0x1
    173c:	b.le	1764 <BZ2_blockSort+0x1764>
    1740:	ldrsw	x12, [x10, x11, lsl #2]
    1744:	sub	x11, x11, #0x1
    1748:	lsr	w13, w11, w8
    174c:	cmp	w12, #0x21
    1750:	strh	w13, [x23, x12, lsl #1]
    1754:	b.gt	1734 <BZ2_blockSort+0x1734>
    1758:	add	w12, w12, w25
    175c:	strh	w13, [x23, w12, sxtw #1]
    1760:	b	1734 <BZ2_blockSort+0x1734>
    1764:	asr	w8, w9, w8
    1768:	cmp	w8, #0x10, lsl #12
    176c:	b.lt	b0c <BZ2_blockSort+0xb0c>  // b.tstop
    1770:	mov	w0, #0x3ea                 	// #1002
    1774:	bl	0 <BZ2_bz__AssertH__fail>
    1778:	b	b0c <BZ2_blockSort+0xb0c>
    177c:	ldr	w8, [sp, #92]
    1780:	cmp	w8, #0x3
    1784:	b.gt	1888 <BZ2_blockSort+0x1888>
    1788:	ldr	w23, [sp, #92]
    178c:	cmp	w23, #0x3
    1790:	b.ge	18b4 <BZ2_blockSort+0x18b4>  // b.tcont
    1794:	ldr	w19, [sp, #252]
    1798:	ldr	x20, [sp, #16]
    179c:	tbz	w19, #31, 17bc <BZ2_blockSort+0x17bc>
    17a0:	cmp	w23, #0x2
    17a4:	b.ge	1868 <BZ2_blockSort+0x1868>  // b.tcont
    17a8:	ldp	x0, x1, [x20, #24]
    17ac:	mov	x2, x22
    17b0:	mov	w3, w25
    17b4:	mov	w4, w23
    17b8:	bl	18fc <fallbackSort>
    17bc:	ldrsw	x8, [x20, #108]
    17c0:	mov	w9, #0xffffffff            	// #-1
    17c4:	str	w9, [x20, #48]
    17c8:	cmp	w8, #0x1
    17cc:	b.lt	17e8 <BZ2_blockSort+0x17e8>  // b.tstop
    17d0:	mov	x9, xzr
    17d4:	ldr	w10, [x21, x9, lsl #2]
    17d8:	cbz	w10, 17f4 <BZ2_blockSort+0x17f4>
    17dc:	add	x9, x9, #0x1
    17e0:	cmp	x9, x8
    17e4:	b.lt	17d4 <BZ2_blockSort+0x17d4>  // b.tstop
    17e8:	mov	w0, #0x3eb                 	// #1003
    17ec:	bl	0 <BZ2_bz__AssertH__fail>
    17f0:	b	17f8 <BZ2_blockSort+0x17f8>
    17f4:	str	w9, [x20, #48]
    17f8:	add	sp, sp, #0x1, lsl #12
    17fc:	add	sp, sp, #0x2c0
    1800:	ldp	x20, x19, [sp, #112]
    1804:	ldp	x22, x21, [sp, #96]
    1808:	ldp	x24, x23, [sp, #80]
    180c:	ldp	x26, x25, [sp, #64]
    1810:	ldp	x28, x27, [sp, #48]
    1814:	ldp	x29, x30, [sp, #32]
    1818:	ldp	d9, d8, [sp, #16]
    181c:	ldr	d10, [sp], #128
    1820:	ret
    1824:	adrp	x8, 0 <stderr>
    1828:	ldr	x3, [x8]
    182c:	adrp	x0, 0 <BZ2_blockSort>
    1830:	add	x0, x0, #0x0
    1834:	mov	w1, #0x21                  	// #33
    1838:	mov	w2, #0x1                   	// #1
    183c:	bl	0 <fwrite>
    1840:	b	c0 <BZ2_blockSort+0xc0>
    1844:	adrp	x8, 0 <stderr>
    1848:	ldr	x3, [x8]
    184c:	adrp	x0, 0 <BZ2_blockSort>
    1850:	add	x0, x0, #0x0
    1854:	mov	w1, #0x1b                  	// #27
    1858:	mov	w2, #0x1                   	// #1
    185c:	bl	0 <fwrite>
    1860:	ldr	x13, [sp, #24]
    1864:	b	438 <BZ2_blockSort+0x438>
    1868:	adrp	x8, 0 <stderr>
    186c:	ldr	x3, [x8]
    1870:	adrp	x0, 0 <BZ2_blockSort>
    1874:	add	x0, x0, #0x0
    1878:	mov	w1, #0x35                  	// #53
    187c:	mov	w2, #0x1                   	// #1
    1880:	bl	0 <fwrite>
    1884:	b	17a8 <BZ2_blockSort+0x17a8>
    1888:	adrp	x8, 0 <stderr>
    188c:	ldr	w3, [sp, #108]
    1890:	ldr	x0, [x8]
    1894:	adrp	x1, 0 <BZ2_blockSort>
    1898:	add	x1, x1, #0x0
    189c:	sub	w4, w25, w3
    18a0:	ldr	x2, [sp, #24]
    18a4:	bl	0 <fprintf>
    18a8:	ldr	w23, [sp, #92]
    18ac:	cmp	w23, #0x3
    18b0:	b.lt	1794 <BZ2_blockSort+0x1794>  // b.tstop
    18b4:	ldr	w19, [sp, #252]
    18b8:	ldr	w9, [sp, #12]
    18bc:	adrp	x8, 0 <stderr>
    18c0:	cmp	w25, #0x0
    18c4:	ldr	x0, [x8]
    18c8:	csinc	w8, w25, wzr, ne  // ne = any
    18cc:	sub	w2, w9, w19
    18d0:	scvtf	s0, w2
    18d4:	scvtf	s1, w8
    18d8:	fdiv	s0, s0, s1
    18dc:	adrp	x1, 0 <BZ2_blockSort>
    18e0:	fcvt	d0, s0
    18e4:	add	x1, x1, #0x0
    18e8:	ldr	x3, [sp, #24]
    18ec:	bl	0 <fprintf>
    18f0:	ldr	x20, [sp, #16]
    18f4:	tbz	w19, #31, 17bc <BZ2_blockSort+0x17bc>
    18f8:	b	17a0 <BZ2_blockSort+0x17a0>

00000000000018fc <fallbackSort>:
    18fc:	stp	x29, x30, [sp, #-96]!
    1900:	stp	x28, x27, [sp, #16]
    1904:	stp	x26, x25, [sp, #32]
    1908:	stp	x24, x23, [sp, #48]
    190c:	stp	x22, x21, [sp, #64]
    1910:	stp	x20, x19, [sp, #80]
    1914:	mov	x29, sp
    1918:	sub	sp, sp, #0xb60
    191c:	mov	w25, w4
    1920:	mov	w21, w3
    1924:	mov	x23, x2
    1928:	mov	x19, x1
    192c:	mov	x20, x0
    1930:	cmp	w4, #0x4
    1934:	b.ge	22a4 <fallbackSort+0x9a8>  // b.tcont
    1938:	add	x0, sp, #0x434
    193c:	mov	w2, #0x404                 	// #1028
    1940:	mov	w1, wzr
    1944:	mov	w28, w21
    1948:	mov	w22, w21
    194c:	add	x21, sp, #0x434
    1950:	bl	0 <memset>
    1954:	cmp	w22, #0x1
    1958:	str	w22, [sp, #32]
    195c:	b.lt	198c <fallbackSort+0x90>  // b.tstop
    1960:	mov	x8, x28
    1964:	mov	x9, x19
    1968:	ldrb	w10, [x9], #1
    196c:	subs	x8, x8, #0x1
    1970:	lsl	x10, x10, #2
    1974:	ldr	w11, [x21, x10]
    1978:	add	w11, w11, #0x1
    197c:	str	w11, [x21, x10]
    1980:	b.ne	1968 <fallbackSort+0x6c>  // b.any
    1984:	ldr	w22, [sp, #1076]
    1988:	b	1990 <fallbackSort+0x94>
    198c:	mov	w22, wzr
    1990:	add	x0, sp, #0x34
    1994:	add	x1, sp, #0x434
    1998:	mov	w2, #0x400                 	// #1024
    199c:	bl	0 <memcpy>
    19a0:	mov	x8, xzr
    19a4:	add	x9, x21, #0x4
    19a8:	ldr	w10, [x9, x8]
    19ac:	add	w22, w10, w22
    19b0:	str	w22, [x9, x8]
    19b4:	add	x8, x8, #0x4
    19b8:	cmp	x8, #0x400
    19bc:	b.ne	19a8 <fallbackSort+0xac>  // b.any
    19c0:	ldr	w21, [sp, #32]
    19c4:	cmp	w21, #0x1
    19c8:	b.lt	19f8 <fallbackSort+0xfc>  // b.tstop
    19cc:	mov	x8, xzr
    19d0:	add	x9, sp, #0x434
    19d4:	ldrb	w10, [x19, x8]
    19d8:	lsl	x10, x10, #2
    19dc:	ldrsw	x11, [x9, x10]
    19e0:	sub	x11, x11, #0x1
    19e4:	str	w11, [x9, x10]
    19e8:	str	w8, [x20, x11, lsl #2]
    19ec:	add	x8, x8, #0x1
    19f0:	cmp	x28, x8
    19f4:	b.ne	19d4 <fallbackSort+0xd8>  // b.any
    19f8:	cmn	w21, #0x3f
    19fc:	b.lt	1a2c <fallbackSort+0x130>  // b.tstop
    1a00:	add	w8, w21, #0x1f
    1a04:	cmp	w21, #0x0
    1a08:	csel	w8, w8, w21, lt  // lt = tstop
    1a0c:	asr	w8, w8, #5
    1a10:	cmn	w21, #0x20
    1a14:	csinc	w8, wzr, w8, le
    1a18:	lsl	x8, x8, #2
    1a1c:	add	x2, x8, #0x4
    1a20:	mov	x0, x23
    1a24:	mov	w1, wzr
    1a28:	bl	0 <memset>
    1a2c:	mov	x8, xzr
    1a30:	add	x9, sp, #0x434
    1a34:	mov	w10, #0x1                   	// #1
    1a38:	ldr	w11, [x9, x8]
    1a3c:	add	x8, x8, #0x4
    1a40:	cmp	x8, #0x400
    1a44:	asr	w12, w11, #5
    1a48:	sbfiz	x12, x12, #2, #32
    1a4c:	ldr	w13, [x23, x12]
    1a50:	lsl	w11, w10, w11
    1a54:	orr	w11, w11, w13
    1a58:	str	w11, [x23, x12]
    1a5c:	b.ne	1a38 <fallbackSort+0x13c>  // b.any
    1a60:	mov	w8, wzr
    1a64:	mov	w9, #0x1                   	// #1
    1a68:	add	w10, w21, w8
    1a6c:	asr	w11, w10, #5
    1a70:	sbfiz	x11, x11, #2, #32
    1a74:	ldr	w12, [x23, x11]
    1a78:	lsl	w13, w9, w10
    1a7c:	add	w10, w10, #0x1
    1a80:	add	w8, w8, #0x2
    1a84:	orr	w12, w12, w13
    1a88:	asr	w13, w10, #5
    1a8c:	sbfiz	x13, x13, #2, #32
    1a90:	str	w12, [x23, x11]
    1a94:	ldr	w11, [x23, x13]
    1a98:	lsl	w10, w9, w10
    1a9c:	cmp	w8, #0x40
    1aa0:	bic	w10, w11, w10
    1aa4:	str	w10, [x23, x13]
    1aa8:	b.ne	1a68 <fallbackSort+0x16c>  // b.any
    1aac:	add	x8, x20, #0x4
    1ab0:	str	x8, [sp, #24]
    1ab4:	add	x8, x20, #0x8
    1ab8:	str	x8, [sp, #16]
    1abc:	add	x8, x20, #0x10
    1ac0:	str	x8, [sp, #8]
    1ac4:	add	x8, x20, #0x14
    1ac8:	mov	w24, #0x1                   	// #1
    1acc:	add	x4, sp, #0x9c8
    1ad0:	add	x5, sp, #0x838
    1ad4:	mov	w22, #0x1                   	// #1
    1ad8:	str	x8, [sp]
    1adc:	str	w25, [sp, #36]
    1ae0:	cmp	w25, #0x4
    1ae4:	b.ge	21c0 <fallbackSort+0x8c4>  // b.tcont
    1ae8:	cmp	w21, #0x1
    1aec:	b.lt	1b2c <fallbackSort+0x230>  // b.tstop
    1af0:	mov	x8, xzr
    1af4:	mov	w9, wzr
    1af8:	ubfx	x10, x8, #5, #27
    1afc:	ldr	w10, [x23, x10, lsl #2]
    1b00:	ldr	w11, [x20, x8, lsl #2]
    1b04:	lsr	w10, w10, w8
    1b08:	sub	w11, w11, w22
    1b0c:	tst	w10, #0x1
    1b10:	and	w12, w28, w11, asr #31
    1b14:	csel	w9, w9, w8, eq  // eq = none
    1b18:	add	x8, x8, #0x1
    1b1c:	add	w10, w12, w11
    1b20:	cmp	x28, x8
    1b24:	str	w9, [x19, w10, sxtw #2]
    1b28:	b.ne	1af8 <fallbackSort+0x1fc>  // b.any
    1b2c:	stp	w22, wzr, [sp, #44]
    1b30:	mov	w22, #0xffffffff            	// #-1
    1b34:	add	w27, w22, #0x1
    1b38:	asr	w9, w27, #5
    1b3c:	ldr	w9, [x23, w9, sxtw #2]
    1b40:	lsl	w10, w24, w27
    1b44:	mov	w8, w22
    1b48:	tst	w27, #0x1f
    1b4c:	and	w9, w10, w9
    1b50:	b.eq	1b5c <fallbackSort+0x260>  // b.none
    1b54:	mov	w22, w27
    1b58:	cbnz	w9, 1b34 <fallbackSort+0x238>
    1b5c:	cbz	w9, 1b94 <fallbackSort+0x298>
    1b60:	sub	w9, w8, #0x1f
    1b64:	add	w9, w9, #0x20
    1b68:	asr	w10, w9, #5
    1b6c:	ldr	w10, [x23, w10, sxtw #2]
    1b70:	mov	w27, w8
    1b74:	add	w8, w8, #0x20
    1b78:	cmn	w10, #0x1
    1b7c:	b.eq	1b64 <fallbackSort+0x268>  // b.none
    1b80:	add	w27, w27, #0x1
    1b84:	asr	w8, w27, #5
    1b88:	ldr	w8, [x23, w8, sxtw #2]
    1b8c:	lsr	w8, w8, w27
    1b90:	tbnz	w8, #0, 1b80 <fallbackSort+0x284>
    1b94:	cmp	w27, w21
    1b98:	b.gt	2198 <fallbackSort+0x89c>
    1b9c:	sub	w25, w27, #0x1
    1ba0:	sub	w11, w27, #0x20
    1ba4:	mov	w13, w25
    1ba8:	mov	w10, w27
    1bac:	asr	w8, w10, #5
    1bb0:	ldr	w12, [x23, w8, sxtw #2]
    1bb4:	mov	w8, w11
    1bb8:	lsl	w11, w24, w10
    1bbc:	mov	w9, w13
    1bc0:	tst	w10, #0x1f
    1bc4:	and	w12, w11, w12
    1bc8:	add	w10, w10, #0x1
    1bcc:	b.eq	1bdc <fallbackSort+0x2e0>  // b.none
    1bd0:	add	w11, w8, #0x1
    1bd4:	add	w13, w9, #0x1
    1bd8:	cbz	w12, 1bac <fallbackSort+0x2b0>
    1bdc:	cbz	w12, 1be8 <fallbackSort+0x2ec>
    1be0:	sub	w26, w10, #0x1
    1be4:	b	1c14 <fallbackSort+0x318>
    1be8:	add	w8, w8, #0x20
    1bec:	asr	w10, w8, #5
    1bf0:	ldr	w10, [x23, w10, sxtw #2]
    1bf4:	mov	w26, w9
    1bf8:	add	w9, w9, #0x20
    1bfc:	cbz	w10, 1be8 <fallbackSort+0x2ec>
    1c00:	add	w26, w26, #0x1
    1c04:	asr	w8, w26, #5
    1c08:	ldr	w8, [x23, w8, sxtw #2]
    1c0c:	lsr	w8, w8, w26
    1c10:	tbz	w8, #0, 1c00 <fallbackSort+0x304>
    1c14:	cmp	w26, w21
    1c18:	b.gt	2198 <fallbackSort+0x89c>
    1c1c:	cmp	w26, w27
    1c20:	sub	w22, w26, #0x1
    1c24:	b.le	1b34 <fallbackSort+0x238>
    1c28:	ldr	w8, [sp, #48]
    1c2c:	str	wzr, [sp, #40]
    1c30:	str	w25, [sp, #2504]
    1c34:	str	w22, [sp, #2104]
    1c38:	sub	w8, w8, w27
    1c3c:	add	w8, w8, w22
    1c40:	add	w8, w8, #0x2
    1c44:	str	w8, [sp, #48]
    1c48:	mov	w8, #0x1                   	// #1
    1c4c:	mov	w8, w8
    1c50:	b	1c5c <fallbackSort+0x360>
    1c54:	cmp	x21, #0x1
    1c58:	b.le	2140 <fallbackSort+0x844>
    1c5c:	mov	x21, x8
    1c60:	cmp	x8, #0x63
    1c64:	b.lt	1c78 <fallbackSort+0x37c>  // b.tstop
    1c68:	mov	w0, #0x3ec                 	// #1004
    1c6c:	bl	0 <BZ2_bz__AssertH__fail>
    1c70:	add	x5, sp, #0x838
    1c74:	add	x4, sp, #0x9c8
    1c78:	sub	x8, x21, #0x1
    1c7c:	lsl	x9, x8, #2
    1c80:	ldr	w10, [x4, x9]
    1c84:	ldr	w9, [x5, x9]
    1c88:	sxtw	x12, w10
    1c8c:	sub	w11, w9, w10
    1c90:	cmp	w11, #0x9
    1c94:	b.gt	1d98 <fallbackSort+0x49c>
    1c98:	cmp	w9, w10
    1c9c:	b.eq	1c54 <fallbackSort+0x358>  // b.none
    1ca0:	cmp	w11, #0x4
    1ca4:	sxtw	x11, w9
    1ca8:	b.lt	1cb8 <fallbackSort+0x3bc>  // b.tstop
    1cac:	sub	w13, w9, #0x4
    1cb0:	cmp	w13, w10
    1cb4:	b.ge	1d30 <fallbackSort+0x434>  // b.tcont
    1cb8:	cmp	w9, w10
    1cbc:	b.le	1c54 <fallbackSort+0x358>
    1cc0:	add	x10, x20, x11, lsl #2
    1cc4:	mov	x15, x11
    1cc8:	b	1ce4 <fallbackSort+0x3e8>
    1ccc:	sub	w16, w15, #0x1
    1cd0:	cmp	x13, x12
    1cd4:	sub	x10, x10, #0x4
    1cd8:	mov	x15, x13
    1cdc:	str	w14, [x20, w16, sxtw #2]
    1ce0:	b.le	1c54 <fallbackSort+0x358>
    1ce4:	sub	x13, x15, #0x1
    1ce8:	ldrsw	x14, [x20, x13, lsl #2]
    1cec:	cmp	w15, w9
    1cf0:	mov	w16, w13
    1cf4:	b.gt	1cd0 <fallbackSort+0x3d4>
    1cf8:	ldr	w16, [x19, x14, lsl #2]
    1cfc:	mov	x17, x10
    1d00:	ldr	w18, [x17]
    1d04:	ldr	w0, [x19, x18, lsl #2]
    1d08:	cmp	w16, w0
    1d0c:	b.ls	1ccc <fallbackSort+0x3d0>  // b.plast
    1d10:	stur	w18, [x17, #-4]
    1d14:	add	x18, x15, #0x1
    1d18:	cmp	x15, x11
    1d1c:	add	x17, x17, #0x4
    1d20:	mov	x15, x18
    1d24:	b.lt	1d00 <fallbackSort+0x404>  // b.tstop
    1d28:	mov	w15, w18
    1d2c:	b	1ccc <fallbackSort+0x3d0>
    1d30:	sxtw	x13, w13
    1d34:	mov	w14, w9
    1d38:	b	1d54 <fallbackSort+0x458>
    1d3c:	mov	w16, w13
    1d40:	cmp	x13, x12
    1d44:	sub	x13, x13, #0x1
    1d48:	sub	w14, w14, #0x1
    1d4c:	str	w15, [x20, w16, sxtw #2]
    1d50:	b.le	1cb8 <fallbackSort+0x3bc>
    1d54:	ldrsw	x15, [x20, x13, lsl #2]
    1d58:	add	x16, x13, #0x4
    1d5c:	cmp	x16, x11
    1d60:	b.gt	1d3c <fallbackSort+0x440>
    1d64:	ldr	w17, [x19, x15, lsl #2]
    1d68:	sxtw	x18, w14
    1d6c:	mov	w16, w13
    1d70:	ldr	w0, [x20, x18, lsl #2]
    1d74:	ldr	w1, [x19, x0, lsl #2]
    1d78:	cmp	w17, w1
    1d7c:	b.ls	1d40 <fallbackSort+0x444>  // b.plast
    1d80:	add	x18, x18, #0x4
    1d84:	str	w0, [x20, w16, sxtw #2]
    1d88:	cmp	x18, x11
    1d8c:	add	w16, w16, #0x4
    1d90:	b.le	1d70 <fallbackSort+0x474>
    1d94:	b	1d40 <fallbackSort+0x444>
    1d98:	ldr	w14, [sp, #40]
    1d9c:	mov	w11, #0x1dc5                	// #7621
    1da0:	orr	w13, wzr, #0x1
    1da4:	madd	w11, w14, w11, w13
    1da8:	and	w13, w11, #0x7fff
    1dac:	mov	w11, #0xaaab                	// #43691
    1db0:	movk	w11, #0xaaaa, lsl #16
    1db4:	umull	x11, w13, w11
    1db8:	lsr	x11, x11, #33
    1dbc:	add	w11, w11, w11, lsl #1
    1dc0:	str	w13, [sp, #40]
    1dc4:	subs	w13, w13, w11
    1dc8:	mov	w11, w10
    1dcc:	b.eq	1de8 <fallbackSort+0x4ec>  // b.none
    1dd0:	cmp	w13, #0x1
    1dd4:	b.ne	1de4 <fallbackSort+0x4e8>  // b.any
    1dd8:	add	w11, w9, w10
    1ddc:	asr	w11, w11, #1
    1de0:	b	1de8 <fallbackSort+0x4ec>
    1de4:	mov	w11, w9
    1de8:	ldr	w11, [x20, w11, sxtw #2]
    1dec:	mov	w14, w9
    1df0:	mov	w15, w9
    1df4:	mov	w13, w10
    1df8:	ldr	w16, [x19, x11, lsl #2]
    1dfc:	mov	w11, w10
    1e00:	cmp	w13, w15
    1e04:	b.gt	1e6c <fallbackSort+0x570>
    1e08:	sxtw	x17, w15
    1e0c:	sxtw	x11, w11
    1e10:	sxtw	x18, w13
    1e14:	ldr	w13, [x20, x18, lsl #2]
    1e18:	ldr	w0, [x19, x13, lsl #2]
    1e1c:	subs	w0, w0, w16
    1e20:	b.eq	1e40 <fallbackSort+0x544>  // b.none
    1e24:	cmp	w0, #0x0
    1e28:	b.gt	1e68 <fallbackSort+0x56c>
    1e2c:	add	x13, x18, #0x1
    1e30:	cmp	x18, x17
    1e34:	mov	x18, x13
    1e38:	b.lt	1e14 <fallbackSort+0x518>  // b.tstop
    1e3c:	b	1e6c <fallbackSort+0x570>
    1e40:	lsl	x0, x11, #2
    1e44:	ldr	w1, [x20, x0]
    1e48:	add	x11, x11, #0x1
    1e4c:	cmp	w15, w18
    1e50:	str	w1, [x20, x18, lsl #2]
    1e54:	str	w13, [x20, x0]
    1e58:	add	w13, w18, #0x1
    1e5c:	b.gt	1e10 <fallbackSort+0x514>
    1e60:	add	w13, w18, #0x1
    1e64:	b	1e6c <fallbackSort+0x570>
    1e68:	mov	w13, w18
    1e6c:	cmp	w13, w15
    1e70:	b.gt	1ef0 <fallbackSort+0x5f4>
    1e74:	sxtw	x17, w13
    1e78:	sxtw	x14, w14
    1e7c:	sxtw	x18, w15
    1e80:	ldr	w15, [x20, x18, lsl #2]
    1e84:	ldr	w0, [x19, x15, lsl #2]
    1e88:	subs	w0, w0, w16
    1e8c:	b.eq	1ea8 <fallbackSort+0x5ac>  // b.none
    1e90:	tbnz	w0, #31, 1ecc <fallbackSort+0x5d0>
    1e94:	sub	x15, x18, #0x1
    1e98:	cmp	x18, x17
    1e9c:	mov	x18, x15
    1ea0:	b.gt	1e80 <fallbackSort+0x584>
    1ea4:	b	1ef0 <fallbackSort+0x5f4>
    1ea8:	lsl	x0, x14, #2
    1eac:	ldr	w1, [x20, x0]
    1eb0:	sub	x14, x14, #0x1
    1eb4:	cmp	w13, w18
    1eb8:	str	w1, [x20, x18, lsl #2]
    1ebc:	str	w15, [x20, x0]
    1ec0:	sub	w15, w18, #0x1
    1ec4:	b.lt	1e7c <fallbackSort+0x580>  // b.tstop
    1ec8:	b	1ef0 <fallbackSort+0x5f4>
    1ecc:	lsl	x17, x17, #2
    1ed0:	ldr	w0, [x20, x17]
    1ed4:	add	w13, w13, #0x1
    1ed8:	str	w15, [x20, x17]
    1edc:	sub	w15, w18, #0x1
    1ee0:	str	w0, [x20, x18, lsl #2]
    1ee4:	cmp	w13, w15
    1ee8:	b.le	1e08 <fallbackSort+0x50c>
    1eec:	b	1e6c <fallbackSort+0x570>
    1ef0:	cmp	w14, w11
    1ef4:	b.lt	2138 <fallbackSort+0x83c>  // b.tstop
    1ef8:	sub	w0, w11, w10
    1efc:	sub	w1, w13, w11
    1f00:	cmp	w0, w1
    1f04:	csel	w16, w0, w1, lt  // lt = tstop
    1f08:	cmp	w16, #0x1
    1f0c:	b.lt	1ff0 <fallbackSort+0x6f4>  // b.tstop
    1f10:	cmp	w0, w1
    1f14:	csel	w18, w0, w1, lt  // lt = tstop
    1f18:	cmp	w18, #0x1
    1f1c:	csinc	w18, w18, wzr, lt  // lt = tstop
    1f20:	sub	w17, w13, w16
    1f24:	sub	w18, w16, w18
    1f28:	cmp	w18, #0x7
    1f2c:	sxtw	x17, w17
    1f30:	b.cc	1fc8 <fallbackSort+0x6cc>  // b.lo, b.ul, b.last
    1f34:	cmp	w0, w1
    1f38:	csel	w0, w0, w1, lt  // lt = tstop
    1f3c:	cmp	w0, #0x1
    1f40:	ldr	x3, [sp, #24]
    1f44:	csinc	w0, w0, wzr, lt  // lt = tstop
    1f48:	sub	w0, w16, w0
    1f4c:	add	x1, x17, x0
    1f50:	add	x2, x20, x12, lsl #2
    1f54:	add	x1, x3, x1, lsl #2
    1f58:	cmp	x2, x1
    1f5c:	b.cs	1f78 <fallbackSort+0x67c>  // b.hs, b.nlast
    1f60:	ldr	x1, [sp, #24]
    1f64:	add	x0, x12, x0
    1f68:	add	x0, x1, x0, lsl #2
    1f6c:	add	x1, x20, x17, lsl #2
    1f70:	cmp	x1, x0
    1f74:	b.cc	1fc8 <fallbackSort+0x6cc>  // b.lo, b.ul, b.last
    1f78:	ldr	x3, [sp, #8]
    1f7c:	add	x18, x18, #0x1
    1f80:	and	x1, x18, #0x1fffffff8
    1f84:	add	x0, x1, x12
    1f88:	add	x2, x3, x17, lsl #2
    1f8c:	add	x17, x1, x17
    1f90:	sub	w16, w16, w1
    1f94:	add	x12, x3, x12, lsl #2
    1f98:	mov	x3, x1
    1f9c:	ldp	q0, q3, [x12, #-16]
    1fa0:	ldp	q1, q2, [x2, #-16]
    1fa4:	subs	x3, x3, #0x8
    1fa8:	stp	q1, q2, [x12, #-16]
    1fac:	stp	q0, q3, [x2, #-16]
    1fb0:	add	x2, x2, #0x20
    1fb4:	add	x12, x12, #0x20
    1fb8:	b.ne	1f9c <fallbackSort+0x6a0>  // b.any
    1fbc:	cmp	x18, x1
    1fc0:	mov	x12, x0
    1fc4:	b.eq	1ff0 <fallbackSort+0x6f4>  // b.none
    1fc8:	add	x12, x20, x12, lsl #2
    1fcc:	add	x17, x20, x17, lsl #2
    1fd0:	add	w16, w16, #0x1
    1fd4:	ldr	w18, [x17]
    1fd8:	ldr	w0, [x12]
    1fdc:	sub	w16, w16, #0x1
    1fe0:	cmp	w16, #0x1
    1fe4:	str	w18, [x12], #4
    1fe8:	str	w0, [x17], #4
    1fec:	b.gt	1fd4 <fallbackSort+0x6d8>
    1ff0:	sub	w18, w9, w14
    1ff4:	sub	w12, w14, w15
    1ff8:	cmp	w18, w12
    1ffc:	csel	w14, w18, w12, lt  // lt = tstop
    2000:	cmp	w14, #0x1
    2004:	b.lt	20f0 <fallbackSort+0x7f4>  // b.tstop
    2008:	cmp	w12, w18
    200c:	csel	w16, w12, w18, lt  // lt = tstop
    2010:	cmp	w16, #0x1
    2014:	csinc	w16, w16, wzr, lt  // lt = tstop
    2018:	sub	w15, w9, w14
    201c:	sub	w17, w14, w16
    2020:	sxtw	x15, w15
    2024:	cmp	w17, #0x7
    2028:	sxtw	x16, w13
    202c:	b.cc	20c4 <fallbackSort+0x7c8>  // b.lo, b.ul, b.last
    2030:	cmp	w12, w18
    2034:	csel	w18, w12, w18, lt  // lt = tstop
    2038:	cmp	w18, #0x1
    203c:	ldr	x2, [sp, #16]
    2040:	csinc	w18, w18, wzr, lt  // lt = tstop
    2044:	sub	w18, w14, w18
    2048:	add	x1, x15, x18
    204c:	add	x0, x20, x16, lsl #2
    2050:	add	x1, x2, x1, lsl #2
    2054:	cmp	x0, x1
    2058:	b.cs	2074 <fallbackSort+0x778>  // b.hs, b.nlast
    205c:	ldr	x0, [sp, #24]
    2060:	add	x18, x16, x18
    2064:	add	x18, x0, x18, lsl #2
    2068:	add	x0, x0, x15, lsl #2
    206c:	cmp	x0, x18
    2070:	b.cc	20c4 <fallbackSort+0x7c8>  // b.lo, b.ul, b.last
    2074:	ldp	x18, x2, [sp]
    2078:	add	x17, x17, #0x1
    207c:	and	x0, x17, #0x1fffffff8
    2080:	sub	w14, w14, w0
    2084:	add	x1, x18, x15, lsl #2
    2088:	add	x18, x0, x16
    208c:	add	x15, x0, x15
    2090:	add	x16, x2, x16, lsl #2
    2094:	mov	x2, x0
    2098:	ldp	q0, q3, [x16, #-16]
    209c:	ldp	q1, q2, [x1, #-16]
    20a0:	subs	x2, x2, #0x8
    20a4:	stp	q1, q2, [x16, #-16]
    20a8:	stp	q0, q3, [x1, #-16]
    20ac:	add	x1, x1, #0x20
    20b0:	add	x16, x16, #0x20
    20b4:	b.ne	2098 <fallbackSort+0x79c>  // b.any
    20b8:	cmp	x17, x0
    20bc:	mov	x16, x18
    20c0:	b.eq	20f0 <fallbackSort+0x7f4>  // b.none
    20c4:	ldr	x17, [sp, #24]
    20c8:	add	x16, x20, x16, lsl #2
    20cc:	add	w14, w14, #0x1
    20d0:	add	x15, x17, x15, lsl #2
    20d4:	ldr	w17, [x15]
    20d8:	ldr	w18, [x16]
    20dc:	sub	w14, w14, #0x1
    20e0:	cmp	w14, #0x1
    20e4:	str	w17, [x16], #4
    20e8:	str	w18, [x15], #4
    20ec:	b.gt	20d4 <fallbackSort+0x7d8>
    20f0:	mvn	w11, w11
    20f4:	sub	w12, w9, w12
    20f8:	add	w14, w10, w11
    20fc:	add	w11, w12, #0x1
    2100:	add	w12, w14, w13
    2104:	sub	w13, w12, w10
    2108:	sub	w14, w9, w11
    210c:	cmp	w13, w14
    2110:	b.le	211c <fallbackSort+0x820>
    2114:	str	w12, [x5, x8, lsl #2]
    2118:	b	2128 <fallbackSort+0x82c>
    211c:	str	w11, [x4, x8, lsl #2]
    2120:	mov	w11, w10
    2124:	mov	w9, w12
    2128:	sbfiz	x8, x21, #2, #32
    212c:	str	w11, [x4, x8]
    2130:	str	w9, [x5, x8]
    2134:	add	w8, w21, #0x1
    2138:	cmp	w8, #0x0
    213c:	b.gt	1c4c <fallbackSort+0x350>
    2140:	ldr	w21, [sp, #32]
    2144:	cmp	w27, w26
    2148:	b.gt	1b34 <fallbackSort+0x238>
    214c:	sxtw	x8, w25
    2150:	sxtw	x9, w26
    2154:	mov	w10, #0xffffffff            	// #-1
    2158:	b	2168 <fallbackSort+0x86c>
    215c:	add	x8, x8, #0x1
    2160:	cmp	x8, x9
    2164:	b.ge	1b34 <fallbackSort+0x238>  // b.tcont
    2168:	ldr	w11, [x20, x8, lsl #2]
    216c:	ldr	w11, [x19, x11, lsl #2]
    2170:	cmp	w10, w11
    2174:	b.eq	215c <fallbackSort+0x860>  // b.none
    2178:	asr	w10, w8, #5
    217c:	sbfiz	x10, x10, #2, #32
    2180:	ldr	w12, [x23, x10]
    2184:	lsl	w13, w24, w8
    2188:	orr	w12, w12, w13
    218c:	str	w12, [x23, x10]
    2190:	mov	w10, w11
    2194:	b	215c <fallbackSort+0x860>
    2198:	ldr	w25, [sp, #36]
    219c:	ldr	w26, [sp, #48]
    21a0:	cmp	w25, #0x4
    21a4:	b.ge	21ec <fallbackSort+0x8f0>  // b.tcont
    21a8:	ldr	w22, [sp, #44]
    21ac:	lsl	w22, w22, #1
    21b0:	cmp	w22, w21
    21b4:	b.gt	221c <fallbackSort+0x920>
    21b8:	cbnz	w26, 1ae0 <fallbackSort+0x1e4>
    21bc:	b	221c <fallbackSort+0x920>
    21c0:	adrp	x8, 0 <stderr>
    21c4:	ldr	x0, [x8]
    21c8:	adrp	x1, 0 <BZ2_blockSort>
    21cc:	add	x1, x1, #0x0
    21d0:	mov	w2, w22
    21d4:	bl	0 <fprintf>
    21d8:	add	x5, sp, #0x838
    21dc:	add	x4, sp, #0x9c8
    21e0:	cmp	w21, #0x1
    21e4:	b.ge	1af0 <fallbackSort+0x1f4>  // b.tcont
    21e8:	b	1b2c <fallbackSort+0x230>
    21ec:	adrp	x8, 0 <stderr>
    21f0:	ldr	x0, [x8]
    21f4:	adrp	x1, 0 <BZ2_blockSort>
    21f8:	add	x1, x1, #0x0
    21fc:	mov	w2, w26
    2200:	bl	0 <fprintf>
    2204:	add	x5, sp, #0x838
    2208:	add	x4, sp, #0x9c8
    220c:	ldr	w22, [sp, #44]
    2210:	lsl	w22, w22, #1
    2214:	cmp	w22, w21
    2218:	b.le	21b8 <fallbackSort+0x8bc>
    221c:	cmp	w25, #0x4
    2220:	b.ge	22c4 <fallbackSort+0x9c8>  // b.tcont
    2224:	cmp	w21, #0x1
    2228:	b.lt	2284 <fallbackSort+0x988>  // b.tstop
    222c:	mov	x8, xzr
    2230:	mov	x11, xzr
    2234:	add	x9, sp, #0x34
    2238:	sxtw	x11, w11
    223c:	sub	w10, w11, #0x1
    2240:	ldr	w12, [x9, x11, lsl #2]
    2244:	add	x11, x11, #0x1
    2248:	add	w10, w10, #0x1
    224c:	cbz	w12, 2240 <fallbackSort+0x944>
    2250:	add	x13, x9, x11, lsl #2
    2254:	sub	w12, w12, #0x1
    2258:	stur	w12, [x13, #-4]
    225c:	ldr	w12, [x20, x8, lsl #2]
    2260:	add	x8, x8, #0x1
    2264:	sub	x11, x11, #0x1
    2268:	cmp	x8, x28
    226c:	strb	w11, [x19, x12]
    2270:	b.ne	2238 <fallbackSort+0x93c>  // b.any
    2274:	cmp	w10, #0x100
    2278:	b.lt	2284 <fallbackSort+0x988>  // b.tstop
    227c:	mov	w0, #0x3ed                 	// #1005
    2280:	bl	0 <BZ2_bz__AssertH__fail>
    2284:	add	sp, sp, #0xb60
    2288:	ldp	x20, x19, [sp, #80]
    228c:	ldp	x22, x21, [sp, #64]
    2290:	ldp	x24, x23, [sp, #48]
    2294:	ldp	x26, x25, [sp, #32]
    2298:	ldp	x28, x27, [sp, #16]
    229c:	ldp	x29, x30, [sp], #96
    22a0:	ret
    22a4:	adrp	x8, 0 <stderr>
    22a8:	ldr	x3, [x8]
    22ac:	adrp	x0, 0 <BZ2_blockSort>
    22b0:	add	x0, x0, #0x0
    22b4:	mov	w1, #0x1b                  	// #27
    22b8:	mov	w2, #0x1                   	// #1
    22bc:	bl	0 <fwrite>
    22c0:	b	1938 <fallbackSort+0x3c>
    22c4:	adrp	x8, 0 <stderr>
    22c8:	ldr	x3, [x8]
    22cc:	adrp	x0, 0 <BZ2_blockSort>
    22d0:	add	x0, x0, #0x0
    22d4:	mov	w1, #0x21                  	// #33
    22d8:	mov	w2, #0x1                   	// #1
    22dc:	bl	0 <fwrite>
    22e0:	cmp	w21, #0x1
    22e4:	b.ge	222c <fallbackSort+0x930>  // b.tcont
    22e8:	b	2284 <fallbackSort+0x988>

00000000000022ec <mainGtU>:
    22ec:	ldrb	w8, [x2, w0, uxtw]
    22f0:	ldrb	w9, [x2, w1, uxtw]
    22f4:	cmp	w8, w9
    22f8:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    22fc:	add	w8, w0, #0x1
    2300:	add	w9, w1, #0x1
    2304:	ldrb	w8, [x2, w8, uxtw]
    2308:	ldrb	w9, [x2, w9, uxtw]
    230c:	cmp	w8, w9
    2310:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2314:	add	w8, w0, #0x2
    2318:	add	w9, w1, #0x2
    231c:	ldrb	w8, [x2, w8, uxtw]
    2320:	ldrb	w9, [x2, w9, uxtw]
    2324:	cmp	w8, w9
    2328:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    232c:	add	w8, w0, #0x3
    2330:	add	w9, w1, #0x3
    2334:	ldrb	w8, [x2, w8, uxtw]
    2338:	ldrb	w9, [x2, w9, uxtw]
    233c:	cmp	w8, w9
    2340:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2344:	add	w8, w0, #0x4
    2348:	add	w9, w1, #0x4
    234c:	ldrb	w8, [x2, w8, uxtw]
    2350:	ldrb	w9, [x2, w9, uxtw]
    2354:	cmp	w8, w9
    2358:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    235c:	add	w8, w0, #0x5
    2360:	add	w9, w1, #0x5
    2364:	ldrb	w8, [x2, w8, uxtw]
    2368:	ldrb	w9, [x2, w9, uxtw]
    236c:	cmp	w8, w9
    2370:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2374:	add	w8, w0, #0x6
    2378:	add	w9, w1, #0x6
    237c:	ldrb	w8, [x2, w8, uxtw]
    2380:	ldrb	w9, [x2, w9, uxtw]
    2384:	cmp	w8, w9
    2388:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    238c:	add	w8, w0, #0x7
    2390:	add	w9, w1, #0x7
    2394:	ldrb	w8, [x2, w8, uxtw]
    2398:	ldrb	w9, [x2, w9, uxtw]
    239c:	cmp	w8, w9
    23a0:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    23a4:	add	w8, w0, #0x8
    23a8:	add	w9, w1, #0x8
    23ac:	ldrb	w8, [x2, w8, uxtw]
    23b0:	ldrb	w9, [x2, w9, uxtw]
    23b4:	cmp	w8, w9
    23b8:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    23bc:	add	w8, w0, #0x9
    23c0:	add	w9, w1, #0x9
    23c4:	ldrb	w8, [x2, w8, uxtw]
    23c8:	ldrb	w9, [x2, w9, uxtw]
    23cc:	cmp	w8, w9
    23d0:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    23d4:	add	w8, w0, #0xa
    23d8:	add	w9, w1, #0xa
    23dc:	ldrb	w8, [x2, w8, uxtw]
    23e0:	ldrb	w9, [x2, w9, uxtw]
    23e4:	cmp	w8, w9
    23e8:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    23ec:	add	w8, w0, #0xb
    23f0:	add	w9, w1, #0xb
    23f4:	ldrb	w8, [x2, w8, uxtw]
    23f8:	ldrb	w9, [x2, w9, uxtw]
    23fc:	cmp	w8, w9
    2400:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2404:	add	w9, w0, #0xc
    2408:	add	w10, w1, #0xc
    240c:	add	w8, w4, #0x10
    2410:	mov	w9, w9
    2414:	mov	w10, w10
    2418:	ldrb	w11, [x2, x9]
    241c:	ldrb	w12, [x2, x10]
    2420:	cmp	w11, w12
    2424:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2428:	ldrh	w11, [x3, x9, lsl #1]
    242c:	ldrh	w12, [x3, x10, lsl #1]
    2430:	cmp	w11, w12
    2434:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2438:	add	w11, w9, #0x1
    243c:	add	w12, w10, #0x1
    2440:	ldrb	w13, [x2, x11]
    2444:	ldrb	w14, [x2, x12]
    2448:	cmp	w13, w14
    244c:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2450:	ldrh	w11, [x3, x11, lsl #1]
    2454:	ldrh	w12, [x3, x12, lsl #1]
    2458:	cmp	w11, w12
    245c:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2460:	add	w11, w9, #0x2
    2464:	add	w12, w10, #0x2
    2468:	ldrb	w13, [x2, x11]
    246c:	ldrb	w14, [x2, x12]
    2470:	cmp	w13, w14
    2474:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2478:	ldrh	w11, [x3, x11, lsl #1]
    247c:	ldrh	w12, [x3, x12, lsl #1]
    2480:	cmp	w11, w12
    2484:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2488:	add	w11, w9, #0x3
    248c:	add	w12, w10, #0x3
    2490:	ldrb	w13, [x2, x11]
    2494:	ldrb	w14, [x2, x12]
    2498:	cmp	w13, w14
    249c:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    24a0:	ldrh	w11, [x3, x11, lsl #1]
    24a4:	ldrh	w12, [x3, x12, lsl #1]
    24a8:	cmp	w11, w12
    24ac:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    24b0:	add	w11, w9, #0x4
    24b4:	add	w12, w10, #0x4
    24b8:	ldrb	w13, [x2, x11]
    24bc:	ldrb	w14, [x2, x12]
    24c0:	cmp	w13, w14
    24c4:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    24c8:	ldrh	w11, [x3, x11, lsl #1]
    24cc:	ldrh	w12, [x3, x12, lsl #1]
    24d0:	cmp	w11, w12
    24d4:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    24d8:	add	w11, w9, #0x5
    24dc:	add	w12, w10, #0x5
    24e0:	ldrb	w13, [x2, x11]
    24e4:	ldrb	w14, [x2, x12]
    24e8:	cmp	w13, w14
    24ec:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    24f0:	ldrh	w11, [x3, x11, lsl #1]
    24f4:	ldrh	w12, [x3, x12, lsl #1]
    24f8:	cmp	w11, w12
    24fc:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2500:	add	w11, w9, #0x6
    2504:	add	w12, w10, #0x6
    2508:	ldrb	w13, [x2, x11]
    250c:	ldrb	w14, [x2, x12]
    2510:	cmp	w13, w14
    2514:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2518:	ldrh	w11, [x3, x11, lsl #1]
    251c:	ldrh	w12, [x3, x12, lsl #1]
    2520:	cmp	w11, w12
    2524:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2528:	add	w11, w9, #0x7
    252c:	add	w12, w10, #0x7
    2530:	ldrb	w13, [x2, x11]
    2534:	ldrb	w14, [x2, x12]
    2538:	cmp	w13, w14
    253c:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2540:	ldrh	w11, [x3, x11, lsl #1]
    2544:	ldrh	w12, [x3, x12, lsl #1]
    2548:	cmp	w11, w12
    254c:	b.ne	2590 <mainGtU+0x2a4>  // b.any
    2550:	add	w9, w9, #0x8
    2554:	ldr	w11, [x5]
    2558:	add	w10, w10, #0x8
    255c:	cmp	w9, w4
    2560:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    2564:	cmp	w10, w4
    2568:	sub	w8, w8, #0x8
    256c:	sub	w9, w9, w12
    2570:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    2574:	mov	w0, wzr
    2578:	sub	w10, w10, w12
    257c:	sub	w11, w11, #0x1
    2580:	cmp	w8, #0x7
    2584:	str	w11, [x5]
    2588:	b.gt	2410 <mainGtU+0x124>
    258c:	ret
    2590:	cset	w0, hi  // hi = pmore
    2594:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x28, x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	mov	x29, sp
  1c:	sub	sp, sp, #0x1, lsl #12
  20:	sub	sp, sp, #0x460
  24:	mov	w19, w3
  28:	mov	w20, w2
  2c:	cmp	w2, #0x1
  30:	mov	x21, x0
  34:	b.lt	c0 <BZ2_hbMakeCodeLengths+0xc0>  // b.tstop
  38:	cmp	w20, #0x3
  3c:	mov	w8, w20
  40:	b.hi	4c <BZ2_hbMakeCodeLengths+0x4c>  // b.pmore
  44:	mov	x9, xzr
  48:	b	88 <BZ2_hbMakeCodeLengths+0x88>
  4c:	and	x9, x8, #0xfffffffc
  50:	add	x10, sp, #0x838
  54:	add	x10, x10, #0x4
  58:	movi	v0.4s, #0x1, lsl #8
  5c:	mov	x11, x9
  60:	mov	x12, x1
  64:	ldr	q1, [x12], #16
  68:	subs	x11, x11, #0x4
  6c:	cmeq	v2.4s, v1.4s, #0
  70:	shl	v1.4s, v1.4s, #8
  74:	bsl	v2.16b, v0.16b, v1.16b
  78:	str	q2, [x10], #16
  7c:	b.ne	64 <BZ2_hbMakeCodeLengths+0x64>  // b.any
  80:	cmp	x9, x8
  84:	b.eq	c0 <BZ2_hbMakeCodeLengths+0xc0>  // b.none
  88:	lsl	x10, x9, #2
  8c:	add	x11, sp, #0x838
  90:	sub	x8, x8, x9
  94:	add	x9, x1, x10
  98:	add	x10, x10, x11
  9c:	add	x10, x10, #0x4
  a0:	mov	w11, #0x100                 	// #256
  a4:	ldr	w12, [x9], #4
  a8:	lsl	w13, w12, #8
  ac:	cmp	w12, #0x0
  b0:	csel	w12, w11, w13, eq  // eq = none
  b4:	subs	x8, x8, #0x1
  b8:	str	w12, [x10], #4
  bc:	b.ne	a4 <BZ2_hbMakeCodeLengths+0xa4>  // b.any
  c0:	mov	w8, #0xfffffffe            	// #-2
  c4:	cmp	w20, #0x1
  c8:	str	wzr, [sp, #4168]
  cc:	str	wzr, [sp, #2104]
  d0:	str	w8, [sp, #40]
  d4:	b.lt	4ac <BZ2_hbMakeCodeLengths+0x4ac>  // b.tstop
  d8:	add	w24, w20, #0x1
  dc:	add	x26, sp, #0x838
  e0:	sub	x22, x24, #0x1
  e4:	add	x10, x26, #0x4
  e8:	str	x10, [sp, #16]
  ec:	and	x10, x22, #0xfffffffffffffffc
  f0:	sxtw	x9, w20
  f4:	add	x23, sp, #0x1, lsl #12
  f8:	stp	x9, x10, [sp, #24]
  fc:	orr	x10, x10, #0x1
 100:	mov	x8, xzr
 104:	mov	w25, w20
 108:	mov	w9, #0x1                   	// #1
 10c:	add	x27, sp, #0x28
 110:	mov	w28, #0xffffffff            	// #-1
 114:	add	x23, x23, #0x48
 118:	str	x10, [sp, #8]
 11c:	b	140 <BZ2_hbMakeCodeLengths+0x140>
 120:	mov	w9, #0xfffffffe            	// #-2
 124:	mov	x8, xzr
 128:	str	w9, [sp, #40]
 12c:	cmp	w20, #0x1
 130:	mov	w9, #0x1                   	// #1
 134:	str	wzr, [sp, #4168]
 138:	str	wzr, [sp, #2104]
 13c:	b.lt	4ac <BZ2_hbMakeCodeLengths+0x4ac>  // b.tstop
 140:	add	x8, x8, #0x1
 144:	add	x10, x23, x8, lsl #2
 148:	str	w9, [x10]
 14c:	ubfx	x12, x8, #1, #31
 150:	ldrsw	x13, [x23, w12, uxtw #2]
 154:	lsl	x14, x9, #2
 158:	ldr	w11, [x26, x14]
 15c:	str	w28, [x27, x14]
 160:	ldr	w15, [x26, x13, lsl #2]
 164:	cmp	w11, w15
 168:	b.ge	18c <BZ2_hbMakeCodeLengths+0x18c>  // b.tcont
 16c:	str	w13, [x10]
 170:	asr	w14, w12, #1
 174:	ldrsw	x13, [x23, w14, sxtw #2]
 178:	ldr	w10, [x26, x13, lsl #2]
 17c:	cmp	w11, w10
 180:	add	x10, x23, w12, sxtw #2
 184:	mov	w12, w14
 188:	b.lt	16c <BZ2_hbMakeCodeLengths+0x16c>  // b.tstop
 18c:	str	w9, [x10]
 190:	cmp	x8, x25
 194:	add	x9, x9, #0x1
 198:	b.ne	140 <BZ2_hbMakeCodeLengths+0x140>  // b.any
 19c:	cmp	w20, #0x104
 1a0:	b.cs	1b4 <BZ2_hbMakeCodeLengths+0x1b4>  // b.hs, b.nlast
 1a4:	cmp	w20, #0x2
 1a8:	mov	w8, w20
 1ac:	b.ge	1c8 <BZ2_hbMakeCodeLengths+0x1c8>  // b.tcont
 1b0:	b	3b8 <BZ2_hbMakeCodeLengths+0x3b8>
 1b4:	mov	w0, #0x7d1                 	// #2001
 1b8:	bl	0 <BZ2_bz__AssertH__fail>
 1bc:	cmp	w20, #0x2
 1c0:	mov	w8, w20
 1c4:	b.lt	3b8 <BZ2_hbMakeCodeLengths+0x3b8>  // b.tstop
 1c8:	ldr	x8, [sp, #24]
 1cc:	mov	x9, x25
 1d0:	b	1e4 <BZ2_hbMakeCodeLengths+0x1e4>
 1d4:	cmp	x9, #0x2
 1d8:	mov	x9, x10
 1dc:	str	w8, [x12]
 1e0:	b.le	3b8 <BZ2_hbMakeCodeLengths+0x3b8>
 1e4:	ldr	w12, [x23, x9, lsl #2]
 1e8:	ldrsw	x11, [sp, #4172]
 1ec:	cmp	x9, #0x3
 1f0:	sub	x10, x9, #0x1
 1f4:	str	w12, [sp, #4172]
 1f8:	b.lt	278 <BZ2_hbMakeCodeLengths+0x278>  // b.tstop
 1fc:	sxtw	x13, w12
 200:	ldr	w13, [x26, x13, lsl #2]
 204:	mov	w14, #0x1                   	// #1
 208:	mov	w16, #0x2                   	// #2
 20c:	sxtw	x17, w16
 210:	cmp	x10, x17
 214:	b.le	24c <BZ2_hbMakeCodeLengths+0x24c>
 218:	orr	x15, x17, #0x1
 21c:	ldrsw	x18, [x23, x15, lsl #2]
 220:	ldrsw	x17, [x23, x17, lsl #2]
 224:	ldr	w18, [x26, x18, lsl #2]
 228:	ldr	w17, [x26, x17, lsl #2]
 22c:	cmp	w18, w17
 230:	csel	w15, w15, w16, lt  // lt = tstop
 234:	sxtw	x17, w15
 238:	ldrsw	x17, [x23, x17, lsl #2]
 23c:	ldr	w16, [x26, x17, lsl #2]
 240:	cmp	w13, w16
 244:	b.ge	260 <BZ2_hbMakeCodeLengths+0x260>  // b.tcont
 248:	b	280 <BZ2_hbMakeCodeLengths+0x280>
 24c:	mov	w15, w16
 250:	ldrsw	x17, [x23, x17, lsl #2]
 254:	ldr	w16, [x26, x17, lsl #2]
 258:	cmp	w13, w16
 25c:	b.lt	280 <BZ2_hbMakeCodeLengths+0x280>  // b.tstop
 260:	lsl	w16, w15, #1
 264:	cmp	x9, w16, sxtw
 268:	str	w17, [x23, w14, sxtw #2]
 26c:	mov	w14, w15
 270:	b.gt	20c <BZ2_hbMakeCodeLengths+0x20c>
 274:	b	284 <BZ2_hbMakeCodeLengths+0x284>
 278:	mov	w15, #0x1                   	// #1
 27c:	b	284 <BZ2_hbMakeCodeLengths+0x284>
 280:	mov	w15, w14
 284:	str	w12, [x23, w15, sxtw #2]
 288:	add	x12, x23, x10, lsl #2
 28c:	ldr	w14, [x12]
 290:	ldrsw	x13, [sp, #4172]
 294:	cmp	x9, #0x3
 298:	str	w14, [sp, #4172]
 29c:	b.gt	2a8 <BZ2_hbMakeCodeLengths+0x2a8>
 2a0:	mov	w18, #0x1                   	// #1
 2a4:	b	32c <BZ2_hbMakeCodeLengths+0x32c>
 2a8:	sxtw	x15, w14
 2ac:	ldr	w15, [x26, x15, lsl #2]
 2b0:	sub	x16, x9, #0x2
 2b4:	mov	w17, #0x1                   	// #1
 2b8:	mov	w0, #0x2                   	// #2
 2bc:	sxtw	x1, w0
 2c0:	cmp	x16, x1
 2c4:	b.le	2fc <BZ2_hbMakeCodeLengths+0x2fc>
 2c8:	orr	x18, x1, #0x1
 2cc:	ldrsw	x2, [x23, x18, lsl #2]
 2d0:	ldrsw	x1, [x23, x1, lsl #2]
 2d4:	ldr	w2, [x26, x2, lsl #2]
 2d8:	ldr	w1, [x26, x1, lsl #2]
 2dc:	cmp	w2, w1
 2e0:	csel	w18, w18, w0, lt  // lt = tstop
 2e4:	sxtw	x1, w18
 2e8:	ldrsw	x1, [x23, x1, lsl #2]
 2ec:	ldr	w0, [x26, x1, lsl #2]
 2f0:	cmp	w15, w0
 2f4:	b.ge	310 <BZ2_hbMakeCodeLengths+0x310>  // b.tcont
 2f8:	b	328 <BZ2_hbMakeCodeLengths+0x328>
 2fc:	mov	w18, w0
 300:	ldrsw	x1, [x23, x1, lsl #2]
 304:	ldr	w0, [x26, x1, lsl #2]
 308:	cmp	w15, w0
 30c:	b.lt	328 <BZ2_hbMakeCodeLengths+0x328>  // b.tstop
 310:	lsl	w0, w18, #1
 314:	cmp	x16, w0, sxtw
 318:	str	w1, [x23, w17, sxtw #2]
 31c:	mov	w17, w18
 320:	b.ge	2bc <BZ2_hbMakeCodeLengths+0x2bc>  // b.tcont
 324:	b	32c <BZ2_hbMakeCodeLengths+0x32c>
 328:	mov	w18, w17
 32c:	lsl	x15, x13, #2
 330:	lsl	x16, x11, #2
 334:	ldr	w13, [x26, x16]
 338:	ldr	w17, [x26, x15]
 33c:	str	w14, [x23, w18, sxtw #2]
 340:	add	x8, x8, #0x1
 344:	and	w14, w13, #0xffffff00
 348:	and	w18, w17, #0xffffff00
 34c:	and	w13, w13, #0xff
 350:	and	w17, w17, #0xff
 354:	asr	w11, w10, #1
 358:	str	w8, [x23, x10, lsl #2]
 35c:	cmp	w13, w17
 360:	add	w18, w18, w14
 364:	ldrsw	x14, [x23, w11, sxtw #2]
 368:	csel	w13, w13, w17, hi  // hi = pmore
 36c:	add	w13, w13, #0x1
 370:	orr	w13, w13, w18
 374:	lsl	x17, x8, #2
 378:	str	w13, [x26, x17]
 37c:	ldr	w18, [x26, x14, lsl #2]
 380:	str	w8, [x27, x15]
 384:	str	w8, [x27, x16]
 388:	str	w28, [x27, x17]
 38c:	cmp	w13, w18
 390:	b.ge	1d4 <BZ2_hbMakeCodeLengths+0x1d4>  // b.tcont
 394:	str	w14, [x12]
 398:	asr	w15, w11, #1
 39c:	ldrsw	x14, [x23, w15, sxtw #2]
 3a0:	ldr	w12, [x26, x14, lsl #2]
 3a4:	cmp	w13, w12
 3a8:	add	x12, x23, w11, sxtw #2
 3ac:	mov	w11, w15
 3b0:	b.lt	394 <BZ2_hbMakeCodeLengths+0x394>  // b.tstop
 3b4:	b	1d4 <BZ2_hbMakeCodeLengths+0x1d4>
 3b8:	cmp	w8, #0x204
 3bc:	b.lt	3c8 <BZ2_hbMakeCodeLengths+0x3c8>  // b.tstop
 3c0:	mov	w0, #0x7d2                 	// #2002
 3c4:	bl	0 <BZ2_bz__AssertH__fail>
 3c8:	cmp	w20, #0x1
 3cc:	movi	v2.4s, #0x1, lsl #8
 3d0:	b.lt	4ac <BZ2_hbMakeCodeLengths+0x4ac>  // b.tstop
 3d4:	mov	w8, wzr
 3d8:	mov	w9, #0x1                   	// #1
 3dc:	mov	w10, #0xffffffff            	// #-1
 3e0:	mov	w11, w9
 3e4:	ldr	w11, [x27, w11, sxtw #2]
 3e8:	add	w10, w10, #0x1
 3ec:	tbz	w11, #31, 3e4 <BZ2_hbMakeCodeLengths+0x3e4>
 3f0:	add	x11, x9, x21
 3f4:	cmp	w10, w19
 3f8:	add	x9, x9, #0x1
 3fc:	csinc	w8, w8, wzr, le
 400:	cmp	x9, x24
 404:	sturb	w10, [x11, #-1]
 408:	b.ne	3dc <BZ2_hbMakeCodeLengths+0x3dc>  // b.any
 40c:	tst	w8, #0xff
 410:	b.eq	4ac <BZ2_hbMakeCodeLengths+0x4ac>  // b.none
 414:	cmp	w20, #0x1
 418:	b.lt	49c <BZ2_hbMakeCodeLengths+0x49c>  // b.tstop
 41c:	cmp	x22, #0x4
 420:	b.cs	42c <BZ2_hbMakeCodeLengths+0x42c>  // b.hs, b.nlast
 424:	mov	w9, #0x1                   	// #1
 428:	b	468 <BZ2_hbMakeCodeLengths+0x468>
 42c:	ldr	x8, [sp, #32]
 430:	ldr	x9, [sp, #16]
 434:	ldr	q0, [x9]
 438:	subs	x8, x8, #0x4
 43c:	sshr	v1.4s, v0.4s, #8
 440:	usra	v1.4s, v0.4s, #31
 444:	shl	v0.4s, v1.4s, #7
 448:	bic	v0.4s, #0xff
 44c:	add	v0.4s, v0.4s, v2.4s
 450:	str	q0, [x9], #16
 454:	b.ne	434 <BZ2_hbMakeCodeLengths+0x434>  // b.any
 458:	ldr	x8, [sp, #32]
 45c:	ldr	x9, [sp, #8]
 460:	cmp	x22, x8
 464:	b.eq	120 <BZ2_hbMakeCodeLengths+0x120>  // b.none
 468:	add	x8, x26, x9, lsl #2
 46c:	sub	x9, x24, x9
 470:	ldr	w10, [x8]
 474:	asr	w10, w10, #8
 478:	cmp	w10, #0x0
 47c:	cinc	w10, w10, lt  // lt = tstop
 480:	lsl	w10, w10, #7
 484:	and	w10, w10, #0xffffff00
 488:	add	w10, w10, #0x100
 48c:	subs	x9, x9, #0x1
 490:	str	w10, [x8], #4
 494:	b.ne	470 <BZ2_hbMakeCodeLengths+0x470>  // b.any
 498:	b	120 <BZ2_hbMakeCodeLengths+0x120>
 49c:	mov	w8, #0xfffffffe            	// #-2
 4a0:	str	wzr, [sp, #4168]
 4a4:	str	wzr, [sp, #2104]
 4a8:	str	w8, [sp, #40]
 4ac:	add	sp, sp, #0x1, lsl #12
 4b0:	add	sp, sp, #0x460
 4b4:	ldp	x20, x19, [sp, #80]
 4b8:	ldp	x22, x21, [sp, #64]
 4bc:	ldp	x24, x23, [sp, #48]
 4c0:	ldp	x26, x25, [sp, #32]
 4c4:	ldp	x28, x27, [sp, #16]
 4c8:	ldp	x29, x30, [sp], #96
 4cc:	ret

00000000000004d0 <BZ2_hbAssignCodes>:
 4d0:	cmp	w2, w3
 4d4:	b.gt	534 <BZ2_hbAssignCodes+0x64>
 4d8:	cmp	w4, #0x1
 4dc:	b.lt	534 <BZ2_hbAssignCodes+0x64>  // b.tstop
 4e0:	mov	w8, wzr
 4e4:	mov	w9, w4
 4e8:	b	4fc <BZ2_hbAssignCodes+0x2c>
 4ec:	cmp	w2, w3
 4f0:	add	w2, w2, #0x1
 4f4:	lsl	w8, w8, #1
 4f8:	b.ge	534 <BZ2_hbAssignCodes+0x64>  // b.tcont
 4fc:	mov	x10, x9
 500:	mov	x11, x0
 504:	mov	x12, x1
 508:	b	51c <BZ2_hbAssignCodes+0x4c>
 50c:	add	x12, x12, #0x1
 510:	subs	x10, x10, #0x1
 514:	add	x11, x11, #0x4
 518:	b.eq	4ec <BZ2_hbAssignCodes+0x1c>  // b.none
 51c:	ldrb	w13, [x12]
 520:	cmp	w2, w13
 524:	b.ne	50c <BZ2_hbAssignCodes+0x3c>  // b.any
 528:	str	w8, [x11]
 52c:	add	w8, w8, #0x1
 530:	b	50c <BZ2_hbAssignCodes+0x3c>
 534:	ret

0000000000000538 <BZ2_hbCreateDecodeTables>:
 538:	str	x25, [sp, #-64]!
 53c:	stp	x24, x23, [sp, #16]
 540:	stp	x22, x21, [sp, #32]
 544:	stp	x20, x19, [sp, #48]
 548:	cmp	w4, w5
 54c:	b.le	5bc <BZ2_hbCreateDecodeTables+0x84>
 550:	movi	v0.2d, #0x0
 554:	cmp	w6, #0x1
 558:	stur	q0, [x1, #76]
 55c:	stp	q0, q0, [x1, #48]
 560:	stp	q0, q0, [x1, #16]
 564:	str	q0, [x1]
 568:	b.lt	60c <BZ2_hbCreateDecodeTables+0xd4>  // b.tstop
 56c:	mov	w8, w6
 570:	ldrb	w9, [x3], #1
 574:	subs	x8, x8, #0x1
 578:	add	x9, x1, x9, lsl #2
 57c:	ldr	w10, [x9, #4]
 580:	add	w10, w10, #0x1
 584:	str	w10, [x9, #4]
 588:	b.ne	570 <BZ2_hbCreateDecodeTables+0x38>  // b.any
 58c:	ldp	w22, w25, [x1, #4]
 590:	ldp	w23, w24, [x1, #12]
 594:	ldp	w20, w21, [x1, #20]
 598:	ldp	w7, w19, [x1, #28]
 59c:	ldp	w3, w6, [x1, #36]
 5a0:	ldp	w18, w2, [x1, #44]
 5a4:	ldp	w16, w17, [x1, #52]
 5a8:	ldp	w14, w15, [x1, #60]
 5ac:	ldp	w12, w13, [x1, #68]
 5b0:	ldp	w10, w11, [x1, #76]
 5b4:	ldp	w8, w9, [x1, #84]
 5b8:	b	6d4 <BZ2_hbCreateDecodeTables+0x19c>
 5bc:	cmp	w6, #0x0
 5c0:	b.le	668 <BZ2_hbCreateDecodeTables+0x130>
 5c4:	mov	w8, wzr
 5c8:	mov	w9, w6
 5cc:	mov	w10, w4
 5d0:	b	5e0 <BZ2_hbCreateDecodeTables+0xa8>
 5d4:	cmp	w10, w5
 5d8:	add	w10, w10, #0x1
 5dc:	b.ge	550 <BZ2_hbCreateDecodeTables+0x18>  // b.tcont
 5e0:	mov	x11, xzr
 5e4:	b	5f4 <BZ2_hbCreateDecodeTables+0xbc>
 5e8:	add	x11, x11, #0x1
 5ec:	cmp	x9, x11
 5f0:	b.eq	5d4 <BZ2_hbCreateDecodeTables+0x9c>  // b.none
 5f4:	ldrb	w12, [x3, x11]
 5f8:	cmp	w10, w12
 5fc:	b.ne	5e8 <BZ2_hbCreateDecodeTables+0xb0>  // b.any
 600:	str	w11, [x2, w8, sxtw #2]
 604:	add	w8, w8, #0x1
 608:	b	5e8 <BZ2_hbCreateDecodeTables+0xb0>
 60c:	mov	w9, wzr
 610:	mov	w8, wzr
 614:	mov	w11, wzr
 618:	mov	w10, wzr
 61c:	mov	w13, wzr
 620:	mov	w12, wzr
 624:	mov	w15, wzr
 628:	mov	w14, wzr
 62c:	mov	w17, wzr
 630:	mov	w16, wzr
 634:	mov	w2, wzr
 638:	mov	w18, wzr
 63c:	mov	w6, wzr
 640:	mov	w3, wzr
 644:	mov	w19, wzr
 648:	mov	w7, wzr
 64c:	mov	w21, wzr
 650:	mov	w20, wzr
 654:	mov	w24, wzr
 658:	mov	w23, wzr
 65c:	mov	w25, wzr
 660:	mov	w22, wzr
 664:	b	6d4 <BZ2_hbCreateDecodeTables+0x19c>
 668:	movi	v0.2d, #0x0
 66c:	mov	w9, wzr
 670:	mov	w8, wzr
 674:	mov	w11, wzr
 678:	mov	w10, wzr
 67c:	mov	w13, wzr
 680:	mov	w12, wzr
 684:	mov	w15, wzr
 688:	mov	w14, wzr
 68c:	mov	w17, wzr
 690:	mov	w16, wzr
 694:	mov	w2, wzr
 698:	mov	w18, wzr
 69c:	mov	w6, wzr
 6a0:	mov	w3, wzr
 6a4:	mov	w19, wzr
 6a8:	mov	w7, wzr
 6ac:	mov	w21, wzr
 6b0:	mov	w20, wzr
 6b4:	mov	w24, wzr
 6b8:	mov	w23, wzr
 6bc:	mov	w25, wzr
 6c0:	mov	w22, wzr
 6c4:	stur	q0, [x1, #76]
 6c8:	stp	q0, q0, [x1, #48]
 6cc:	stp	q0, q0, [x1, #16]
 6d0:	str	q0, [x1]
 6d4:	add	w25, w25, w22
 6d8:	stp	w22, w25, [x1, #4]
 6dc:	add	w22, w23, w25
 6e0:	add	w23, w24, w22
 6e4:	add	w20, w20, w23
 6e8:	add	w21, w21, w20
 6ec:	add	w7, w7, w21
 6f0:	add	w19, w19, w7
 6f4:	add	w3, w3, w19
 6f8:	add	w6, w6, w3
 6fc:	add	w18, w18, w6
 700:	add	w2, w2, w18
 704:	add	w16, w16, w2
 708:	add	w17, w17, w16
 70c:	add	w14, w14, w17
 710:	add	w15, w15, w14
 714:	add	w12, w12, w15
 718:	add	w13, w13, w12
 71c:	add	w10, w10, w13
 720:	add	w11, w11, w10
 724:	add	w8, w8, w11
 728:	movi	v0.2d, #0x0
 72c:	cmp	w4, w5
 730:	add	w9, w9, w8
 734:	stp	w22, w23, [x1, #12]
 738:	stp	w20, w21, [x1, #20]
 73c:	stp	w7, w19, [x1, #28]
 740:	stp	w3, w6, [x1, #36]
 744:	stp	w18, w2, [x1, #44]
 748:	stp	w16, w17, [x1, #52]
 74c:	stp	w14, w15, [x1, #60]
 750:	stp	w12, w13, [x1, #68]
 754:	stp	w10, w11, [x1, #76]
 758:	stp	w8, w9, [x1, #84]
 75c:	stur	q0, [x0, #76]
 760:	stp	q0, q0, [x0, #48]
 764:	stp	q0, q0, [x0, #16]
 768:	str	q0, [x0]
 76c:	b.gt	7a8 <BZ2_hbCreateDecodeTables+0x270>
 770:	mov	w8, wzr
 774:	sxtw	x10, w4
 778:	sxtw	x9, w5
 77c:	lsl	x11, x10, #2
 780:	add	x12, x1, x11
 784:	ldp	w12, w13, [x12]
 788:	cmp	x10, x9
 78c:	add	x10, x10, #0x1
 790:	sub	w12, w13, w12
 794:	add	w8, w12, w8
 798:	sub	w12, w8, #0x1
 79c:	lsl	w8, w8, #1
 7a0:	str	w12, [x0, x11]
 7a4:	b.lt	77c <BZ2_hbCreateDecodeTables+0x244>  // b.tstop
 7a8:	cmp	w4, w5
 7ac:	b.ge	880 <BZ2_hbCreateDecodeTables+0x348>  // b.tcont
 7b0:	sxtw	x8, w4
 7b4:	sxtw	x9, w5
 7b8:	sub	x10, x9, x8
 7bc:	cmp	x10, #0x7
 7c0:	b.ls	84c <BZ2_hbCreateDecodeTables+0x314>  // b.plast
 7c4:	lsl	x13, x8, #2
 7c8:	lsl	x11, x9, #2
 7cc:	add	x12, x13, x1
 7d0:	add	x14, x12, #0x4
 7d4:	add	x15, x0, x11
 7d8:	cmp	x14, x15
 7dc:	b.cs	7f4 <BZ2_hbCreateDecodeTables+0x2bc>  // b.hs, b.nlast
 7e0:	add	x11, x11, x1
 7e4:	add	x11, x11, #0x4
 7e8:	add	x14, x0, x13
 7ec:	cmp	x14, x11
 7f0:	b.cc	84c <BZ2_hbCreateDecodeTables+0x314>  // b.lo, b.ul, b.last
 7f4:	and	x11, x10, #0xfffffffffffffff8
 7f8:	add	x13, x13, x0
 7fc:	add	x12, x12, #0x14
 800:	add	x8, x11, x8
 804:	add	x13, x13, #0x10
 808:	movi	v0.4s, #0x2
 80c:	mov	x14, x11
 810:	ldp	q1, q2, [x13, #-16]
 814:	ldp	q3, q4, [x12, #-16]
 818:	subs	x14, x14, #0x8
 81c:	add	x13, x13, #0x20
 820:	shl	v1.4s, v1.4s, #1
 824:	shl	v2.4s, v2.4s, #1
 828:	sub	v1.4s, v1.4s, v3.4s
 82c:	sub	v2.4s, v2.4s, v4.4s
 830:	add	v1.4s, v1.4s, v0.4s
 834:	add	v2.4s, v2.4s, v0.4s
 838:	stp	q1, q2, [x12, #-16]
 83c:	add	x12, x12, #0x20
 840:	b.ne	810 <BZ2_hbCreateDecodeTables+0x2d8>  // b.any
 844:	cmp	x10, x11
 848:	b.eq	880 <BZ2_hbCreateDecodeTables+0x348>  // b.none
 84c:	lsl	x10, x8, #2
 850:	sub	x8, x9, x8
 854:	add	x9, x0, x10
 858:	add	x10, x10, x1
 85c:	add	x10, x10, #0x4
 860:	ldr	w11, [x9], #4
 864:	ldr	w12, [x10]
 868:	subs	x8, x8, #0x1
 86c:	lsl	w11, w11, #1
 870:	sub	w11, w11, w12
 874:	add	w11, w11, #0x2
 878:	str	w11, [x10], #4
 87c:	b.ne	860 <BZ2_hbCreateDecodeTables+0x328>  // b.any
 880:	ldp	x20, x19, [sp, #48]
 884:	ldp	x22, x21, [sp, #32]
 888:	ldp	x24, x23, [sp, #16]
 88c:	ldr	x25, [sp], #64
 890:	ret

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bsInitWrite>:
       0:	movi	v0.2d, #0x0
       4:	str	d0, [x0, #640]
       8:	ret

000000000000000c <BZ2_compressBlock>:
       c:	sub	sp, sp, #0x150
      10:	stp	x29, x30, [sp, #256]
      14:	stp	x28, x25, [sp, #272]
      18:	stp	x24, x23, [sp, #288]
      1c:	stp	x22, x21, [sp, #304]
      20:	stp	x20, x19, [sp, #320]
      24:	add	x29, sp, #0x100
      28:	ldr	w5, [x0, #108]
      2c:	mov	x19, x0
      30:	mov	w20, w1
      34:	cmp	w5, #0x1
      38:	b.lt	7c <BZ2_compressBlock+0x70>  // b.tstop
      3c:	ldr	w8, [x19, #648]
      40:	ldr	w9, [x19, #652]
      44:	ldr	w2, [x19, #660]
      48:	mvn	w3, w8
      4c:	eon	w4, w8, w9, ror #31
      50:	cmp	w2, #0x2
      54:	str	w3, [x19, #648]
      58:	str	w4, [x19, #652]
      5c:	b.lt	64 <BZ2_compressBlock+0x58>  // b.tstop
      60:	str	wzr, [x19, #116]
      64:	ldr	w8, [x19, #656]
      68:	cmp	w8, #0x2
      6c:	b.ge	a70 <BZ2_compressBlock+0xa64>  // b.tcont
      70:	mov	x0, x19
      74:	bl	0 <BZ2_blockSort>
      78:	ldr	w5, [x19, #108]
      7c:	ldr	x8, [x19, #32]
      80:	ldr	w9, [x19, #660]
      84:	add	x8, x8, w5, sxtw
      88:	cmp	w9, #0x1
      8c:	str	x8, [x19, #80]
      90:	b.ne	1ec <BZ2_compressBlock+0x1e0>  // b.any
      94:	adrp	x9, 0 <BZ2_bsInitWrite>
      98:	ldr	d0, [x9]
      9c:	ldrsw	x9, [x19, #116]
      a0:	mov	w10, #0x42                  	// #66
      a4:	str	d0, [x19, #640]
      a8:	strb	w10, [x8, x9]
      ac:	ldr	w8, [x19, #116]
      b0:	ldr	w10, [x19, #640]
      b4:	ldr	w9, [x19, #644]
      b8:	add	w8, w8, #0x1
      bc:	lsl	w10, w10, #8
      c0:	sub	w11, w9, #0x8
      c4:	cmp	w9, #0x10
      c8:	str	w8, [x19, #116]
      cc:	str	w10, [x19, #640]
      d0:	str	w11, [x19, #644]
      d4:	b.lt	110 <BZ2_compressBlock+0x104>  // b.tstop
      d8:	ldr	x9, [x19, #80]
      dc:	lsr	w10, w10, #24
      e0:	strb	w10, [x9, w8, sxtw]
      e4:	ldr	w8, [x19, #116]
      e8:	ldr	w10, [x19, #640]
      ec:	ldr	w9, [x19, #644]
      f0:	add	w8, w8, #0x1
      f4:	lsl	w10, w10, #8
      f8:	sub	w11, w9, #0x8
      fc:	cmp	w9, #0xf
     100:	str	w8, [x19, #116]
     104:	str	w10, [x19, #640]
     108:	str	w11, [x19, #644]
     10c:	b.gt	d8 <BZ2_compressBlock+0xcc>
     110:	neg	w11, w9
     114:	mov	w12, #0x5a                  	// #90
     118:	lsl	w11, w12, w11
     11c:	cmp	w9, #0x8
     120:	orr	w11, w11, w10
     124:	str	w11, [x19, #640]
     128:	str	w9, [x19, #644]
     12c:	b.lt	168 <BZ2_compressBlock+0x15c>  // b.tstop
     130:	ldr	x9, [x19, #80]
     134:	lsr	w10, w11, #24
     138:	strb	w10, [x9, w8, sxtw]
     13c:	ldr	w8, [x19, #116]
     140:	ldr	w9, [x19, #640]
     144:	ldr	w10, [x19, #644]
     148:	add	w8, w8, #0x1
     14c:	lsl	w11, w9, #8
     150:	sub	w9, w10, #0x8
     154:	cmp	w10, #0xf
     158:	str	w8, [x19, #116]
     15c:	str	w11, [x19, #640]
     160:	str	w9, [x19, #644]
     164:	b.gt	130 <BZ2_compressBlock+0x124>
     168:	ldr	w14, [x19, #664]
     16c:	mov	w10, #0x18                  	// #24
     170:	mov	w12, #0x68                  	// #104
     174:	sub	w15, w10, w9
     178:	lsl	w12, w12, w15
     17c:	orr	w12, w12, w11
     180:	add	w11, w14, #0x30
     184:	add	w13, w9, #0x8
     188:	and	w11, w11, #0xff
     18c:	str	w13, [x19, #644]
     190:	str	w12, [x19, #640]
     194:	tbnz	w9, #31, 1d0 <BZ2_compressBlock+0x1c4>
     198:	ldr	x9, [x19, #80]
     19c:	lsr	w12, w12, #24
     1a0:	strb	w12, [x9, w8, sxtw]
     1a4:	ldr	w8, [x19, #116]
     1a8:	ldr	w9, [x19, #640]
     1ac:	ldr	w14, [x19, #644]
     1b0:	add	w8, w8, #0x1
     1b4:	lsl	w12, w9, #8
     1b8:	sub	w13, w14, #0x8
     1bc:	cmp	w14, #0xf
     1c0:	str	w8, [x19, #116]
     1c4:	str	w12, [x19, #640]
     1c8:	str	w13, [x19, #644]
     1cc:	b.gt	198 <BZ2_compressBlock+0x18c>
     1d0:	ldr	w5, [x19, #108]
     1d4:	sub	w8, w10, w13
     1d8:	lsl	w8, w11, w8
     1dc:	add	w9, w13, #0x8
     1e0:	orr	w8, w8, w12
     1e4:	str	w8, [x19, #640]
     1e8:	str	w9, [x19, #644]
     1ec:	cmp	w5, #0x1
     1f0:	b.lt	7a4 <BZ2_compressBlock+0x798>  // b.tstop
     1f4:	ldr	w10, [x19, #644]
     1f8:	cmp	w10, #0x7
     1fc:	b.le	244 <BZ2_compressBlock+0x238>
     200:	ldr	w9, [x19, #640]
     204:	ldr	w8, [x19, #116]
     208:	ldr	x10, [x19, #80]
     20c:	lsr	w9, w9, #24
     210:	strb	w9, [x10, w8, sxtw]
     214:	ldr	w8, [x19, #116]
     218:	ldr	w9, [x19, #640]
     21c:	ldr	w11, [x19, #644]
     220:	add	w8, w8, #0x1
     224:	lsl	w9, w9, #8
     228:	sub	w10, w11, #0x8
     22c:	cmp	w11, #0xf
     230:	str	w8, [x19, #116]
     234:	str	w9, [x19, #640]
     238:	str	w10, [x19, #644]
     23c:	b.gt	208 <BZ2_compressBlock+0x1fc>
     240:	b	248 <BZ2_compressBlock+0x23c>
     244:	ldr	w9, [x19, #640]
     248:	mov	w8, #0x18                  	// #24
     24c:	mov	w12, #0x31                  	// #49
     250:	sub	w13, w8, w10
     254:	lsl	w12, w12, w13
     258:	add	w11, w10, #0x8
     25c:	orr	w9, w12, w9
     260:	str	w9, [x19, #640]
     264:	str	w11, [x19, #644]
     268:	tbnz	w10, #31, 2a8 <BZ2_compressBlock+0x29c>
     26c:	ldr	w10, [x19, #116]
     270:	ldr	x11, [x19, #80]
     274:	lsr	w9, w9, #24
     278:	strb	w9, [x11, w10, sxtw]
     27c:	ldr	w9, [x19, #116]
     280:	ldr	w11, [x19, #640]
     284:	ldr	w12, [x19, #644]
     288:	add	w10, w9, #0x1
     28c:	lsl	w9, w11, #8
     290:	sub	w11, w12, #0x8
     294:	cmp	w12, #0xf
     298:	str	w10, [x19, #116]
     29c:	str	w9, [x19, #640]
     2a0:	str	w11, [x19, #644]
     2a4:	b.gt	270 <BZ2_compressBlock+0x264>
     2a8:	sub	w8, w8, w11
     2ac:	mov	w12, #0x41                  	// #65
     2b0:	lsl	w8, w12, w8
     2b4:	add	w10, w11, #0x8
     2b8:	orr	w9, w8, w9
     2bc:	str	w9, [x19, #640]
     2c0:	str	w10, [x19, #644]
     2c4:	tbnz	w11, #31, 304 <BZ2_compressBlock+0x2f8>
     2c8:	ldr	w8, [x19, #116]
     2cc:	ldr	x10, [x19, #80]
     2d0:	lsr	w9, w9, #24
     2d4:	strb	w9, [x10, w8, sxtw]
     2d8:	ldr	w8, [x19, #116]
     2dc:	ldr	w9, [x19, #640]
     2e0:	ldr	w11, [x19, #644]
     2e4:	add	w8, w8, #0x1
     2e8:	lsl	w9, w9, #8
     2ec:	sub	w10, w11, #0x8
     2f0:	cmp	w11, #0xf
     2f4:	str	w8, [x19, #116]
     2f8:	str	w9, [x19, #640]
     2fc:	str	w10, [x19, #644]
     300:	b.gt	2cc <BZ2_compressBlock+0x2c0>
     304:	mov	w8, #0x18                  	// #24
     308:	mov	w12, #0x59                  	// #89
     30c:	sub	w13, w8, w10
     310:	lsl	w12, w12, w13
     314:	add	w11, w10, #0x8
     318:	orr	w9, w12, w9
     31c:	str	w9, [x19, #640]
     320:	str	w11, [x19, #644]
     324:	tbnz	w10, #31, 364 <BZ2_compressBlock+0x358>
     328:	ldr	w10, [x19, #116]
     32c:	ldr	x11, [x19, #80]
     330:	lsr	w9, w9, #24
     334:	strb	w9, [x11, w10, sxtw]
     338:	ldr	w9, [x19, #116]
     33c:	ldr	w11, [x19, #640]
     340:	ldr	w12, [x19, #644]
     344:	add	w10, w9, #0x1
     348:	lsl	w9, w11, #8
     34c:	sub	w11, w12, #0x8
     350:	cmp	w12, #0xf
     354:	str	w10, [x19, #116]
     358:	str	w9, [x19, #640]
     35c:	str	w11, [x19, #644]
     360:	b.gt	32c <BZ2_compressBlock+0x320>
     364:	sub	w8, w8, w11
     368:	mov	w12, #0x26                  	// #38
     36c:	lsl	w8, w12, w8
     370:	add	w10, w11, #0x8
     374:	orr	w9, w8, w9
     378:	str	w9, [x19, #640]
     37c:	str	w10, [x19, #644]
     380:	tbnz	w11, #31, 3c0 <BZ2_compressBlock+0x3b4>
     384:	ldr	w8, [x19, #116]
     388:	ldr	x10, [x19, #80]
     38c:	lsr	w9, w9, #24
     390:	strb	w9, [x10, w8, sxtw]
     394:	ldr	w8, [x19, #116]
     398:	ldr	w9, [x19, #640]
     39c:	ldr	w11, [x19, #644]
     3a0:	add	w8, w8, #0x1
     3a4:	lsl	w9, w9, #8
     3a8:	sub	w10, w11, #0x8
     3ac:	cmp	w11, #0xf
     3b0:	str	w8, [x19, #116]
     3b4:	str	w9, [x19, #640]
     3b8:	str	w10, [x19, #644]
     3bc:	b.gt	388 <BZ2_compressBlock+0x37c>
     3c0:	mov	w8, #0x18                  	// #24
     3c4:	mov	w12, #0x53                  	// #83
     3c8:	sub	w13, w8, w10
     3cc:	lsl	w12, w12, w13
     3d0:	add	w11, w10, #0x8
     3d4:	orr	w9, w12, w9
     3d8:	str	w9, [x19, #640]
     3dc:	str	w11, [x19, #644]
     3e0:	tbnz	w10, #31, 420 <BZ2_compressBlock+0x414>
     3e4:	ldr	w10, [x19, #116]
     3e8:	ldr	x11, [x19, #80]
     3ec:	lsr	w9, w9, #24
     3f0:	strb	w9, [x11, w10, sxtw]
     3f4:	ldr	w9, [x19, #116]
     3f8:	ldr	w11, [x19, #640]
     3fc:	ldr	w12, [x19, #644]
     400:	add	w10, w9, #0x1
     404:	lsl	w9, w11, #8
     408:	sub	w11, w12, #0x8
     40c:	cmp	w12, #0xf
     410:	str	w10, [x19, #116]
     414:	str	w9, [x19, #640]
     418:	str	w11, [x19, #644]
     41c:	b.gt	3e8 <BZ2_compressBlock+0x3dc>
     420:	ldr	w1, [x19, #648]
     424:	sub	w8, w8, w11
     428:	mov	w10, #0x59                  	// #89
     42c:	lsl	w8, w10, w8
     430:	add	w11, w11, #0x8
     434:	orr	w8, w8, w9
     438:	mov	x0, x19
     43c:	str	w8, [x19, #640]
     440:	str	w11, [x19, #644]
     444:	bl	ab0 <bsPutUInt32>
     448:	ldr	w10, [x19, #644]
     44c:	cmp	w10, #0x7
     450:	b.le	498 <BZ2_compressBlock+0x48c>
     454:	ldr	w8, [x19, #640]
     458:	ldr	w9, [x19, #116]
     45c:	ldr	x10, [x19, #80]
     460:	lsr	w8, w8, #24
     464:	strb	w8, [x10, w9, sxtw]
     468:	ldr	w8, [x19, #116]
     46c:	ldr	w10, [x19, #640]
     470:	ldr	w11, [x19, #644]
     474:	add	w9, w8, #0x1
     478:	lsl	w8, w10, #8
     47c:	sub	w10, w11, #0x8
     480:	cmp	w11, #0xf
     484:	str	w9, [x19, #116]
     488:	str	w8, [x19, #640]
     48c:	str	w10, [x19, #644]
     490:	b.gt	45c <BZ2_compressBlock+0x450>
     494:	b	49c <BZ2_compressBlock+0x490>
     498:	ldr	w8, [x19, #640]
     49c:	ldr	w9, [x19, #48]
     4a0:	add	w11, w10, #0x1
     4a4:	cmp	w10, #0x7
     4a8:	str	w8, [x19, #640]
     4ac:	str	w11, [x19, #644]
     4b0:	b.lt	4f0 <BZ2_compressBlock+0x4e4>  // b.tstop
     4b4:	ldr	w10, [x19, #116]
     4b8:	ldr	x11, [x19, #80]
     4bc:	lsr	w8, w8, #24
     4c0:	strb	w8, [x11, w10, sxtw]
     4c4:	ldr	w8, [x19, #116]
     4c8:	ldr	w11, [x19, #640]
     4cc:	ldr	w12, [x19, #644]
     4d0:	add	w10, w8, #0x1
     4d4:	lsl	w8, w11, #8
     4d8:	sub	w11, w12, #0x8
     4dc:	cmp	w12, #0xf
     4e0:	str	w10, [x19, #116]
     4e4:	str	w8, [x19, #640]
     4e8:	str	w11, [x19, #644]
     4ec:	b.gt	4b8 <BZ2_compressBlock+0x4ac>
     4f0:	mov	w12, #0x8                   	// #8
     4f4:	ldp	x23, x24, [x19, #56]
     4f8:	ldr	x21, [x19, #72]
     4fc:	add	w13, w11, #0x18
     500:	sub	w11, w12, w11
     504:	lsl	w9, w9, w11
     508:	mov	w25, wzr
     50c:	mov	x10, xzr
     510:	orr	w8, w9, w8
     514:	str	w13, [x19, #644]
     518:	str	w8, [x19, #640]
     51c:	str	wzr, [x19, #124]
     520:	b	530 <BZ2_compressBlock+0x524>
     524:	add	x10, x10, #0x1
     528:	cmp	x10, #0x100
     52c:	b.eq	54c <BZ2_compressBlock+0x540>  // b.none
     530:	add	x8, x19, x10
     534:	ldrb	w9, [x8, #128]
     538:	cbz	w9, 524 <BZ2_compressBlock+0x518>
     53c:	strb	w25, [x8, #384]
     540:	add	w25, w25, #0x1
     544:	str	w25, [x19, #124]
     548:	b	524 <BZ2_compressBlock+0x518>
     54c:	cmn	w25, #0x1
     550:	add	w22, w25, #0x1
     554:	b.lt	5d0 <BZ2_compressBlock+0x5c4>  // b.tstop
     558:	mov	w8, w22
     55c:	lsl	x8, x8, #2
     560:	add	x0, x19, #0x2a0
     564:	add	x2, x8, #0x4
     568:	mov	w1, wzr
     56c:	bl	0 <memset>
     570:	cmp	w25, #0x1
     574:	b.lt	5d0 <BZ2_compressBlock+0x5c4>  // b.tstop
     578:	cmp	w25, #0xf
     57c:	mov	w8, w25
     580:	b.hi	58c <BZ2_compressBlock+0x580>  // b.pmore
     584:	mov	x9, xzr
     588:	b	5bc <BZ2_compressBlock+0x5b0>
     58c:	adrp	x9, 0 <BZ2_bsInitWrite>
     590:	ldr	q0, [x9]
     594:	and	x9, x8, #0xfffffff0
     598:	mov	x10, sp
     59c:	movi	v1.16b, #0x10
     5a0:	mov	x11, x9
     5a4:	str	q0, [x10], #16
     5a8:	subs	x11, x11, #0x10
     5ac:	add	v0.16b, v0.16b, v1.16b
     5b0:	b.ne	5a4 <BZ2_compressBlock+0x598>  // b.any
     5b4:	cmp	x9, x8
     5b8:	b.eq	5d0 <BZ2_compressBlock+0x5c4>  // b.none
     5bc:	mov	x10, sp
     5c0:	strb	w9, [x10, x9]
     5c4:	add	x9, x9, #0x1
     5c8:	cmp	x8, x9
     5cc:	b.ne	5c0 <BZ2_compressBlock+0x5b4>  // b.any
     5d0:	ldr	w15, [x19, #108]
     5d4:	cmp	w15, #0x1
     5d8:	b.lt	77c <BZ2_compressBlock+0x770>  // b.tstop
     5dc:	mov	x10, sp
     5e0:	mov	x9, xzr
     5e4:	mov	w13, wzr
     5e8:	mov	w8, wzr
     5ec:	orr	x11, x10, #0x1
     5f0:	mov	w12, #0x1                   	// #1
     5f4:	b	630 <BZ2_compressBlock+0x624>
     5f8:	strb	w14, [sp]
     5fc:	sub	w14, w15, w10
     600:	sxtw	x14, w14
     604:	add	x14, x14, #0x1
     608:	strh	w14, [x21, w8, sxtw #1]
     60c:	add	x14, x19, x14, lsl #2
     610:	ldr	w15, [x14, #672]
     614:	add	w8, w8, #0x1
     618:	add	w15, w15, #0x1
     61c:	str	w15, [x14, #672]
     620:	ldr	w15, [x19, #108]
     624:	add	x9, x9, #0x1
     628:	cmp	x9, w15, sxtw
     62c:	b.ge	710 <BZ2_compressBlock+0x704>  // b.tcont
     630:	ldr	w14, [x23, x9, lsl #2]
     634:	sub	w14, w14, #0x1
     638:	and	w16, w15, w14, asr #31
     63c:	add	w14, w16, w14
     640:	ldrb	w14, [x24, w14, sxtw]
     644:	ldrb	w16, [sp]
     648:	add	x14, x19, x14
     64c:	ldrb	w14, [x14, #384]
     650:	cmp	w16, w14
     654:	b.ne	66c <BZ2_compressBlock+0x660>  // b.any
     658:	add	w13, w13, #0x1
     65c:	add	x9, x9, #0x1
     660:	cmp	x9, w15, sxtw
     664:	b.lt	630 <BZ2_compressBlock+0x624>  // b.tstop
     668:	b	710 <BZ2_compressBlock+0x704>
     66c:	subs	w15, w13, #0x1
     670:	b.lt	6e0 <BZ2_compressBlock+0x6d4>  // b.tstop
     674:	add	w16, w8, #0x1
     678:	add	x13, x21, w8, sxtw #1
     67c:	mov	w8, w16
     680:	tbnz	w15, #0, 6a0 <BZ2_compressBlock+0x694>
     684:	strh	wzr, [x13]
     688:	ldr	w16, [x19, #672]
     68c:	add	w16, w16, #0x1
     690:	str	w16, [x19, #672]
     694:	subs	w16, w15, #0x2
     698:	b.ge	6b8 <BZ2_compressBlock+0x6ac>  // b.tcont
     69c:	b	6d8 <BZ2_compressBlock+0x6cc>
     6a0:	strh	w12, [x13]
     6a4:	ldr	w16, [x19, #676]
     6a8:	add	w16, w16, #0x1
     6ac:	str	w16, [x19, #676]
     6b0:	subs	w16, w15, #0x2
     6b4:	b.lt	6d8 <BZ2_compressBlock+0x6cc>  // b.tstop
     6b8:	sub	w15, w15, #0x1
     6bc:	cmp	w16, #0x0
     6c0:	csel	w15, w15, w16, lt  // lt = tstop
     6c4:	add	w8, w8, #0x1
     6c8:	asr	w15, w15, #1
     6cc:	add	x13, x13, #0x2
     6d0:	tbnz	w15, #0, 6a0 <BZ2_compressBlock+0x694>
     6d4:	b	684 <BZ2_compressBlock+0x678>
     6d8:	ldrb	w16, [sp]
     6dc:	mov	w13, wzr
     6e0:	ldrb	w17, [sp, #1]
     6e4:	mov	x15, x11
     6e8:	strb	w16, [sp, #1]
     6ec:	cmp	w14, w17
     6f0:	b.eq	5f8 <BZ2_compressBlock+0x5ec>  // b.none
     6f4:	mov	x15, x11
     6f8:	ldrb	w16, [x15, #1]!
     6fc:	cmp	w14, w16
     700:	strb	w17, [x15]
     704:	mov	w17, w16
     708:	b.ne	6f8 <BZ2_compressBlock+0x6ec>  // b.any
     70c:	b	5f8 <BZ2_compressBlock+0x5ec>
     710:	subs	w9, w13, #0x1
     714:	b.lt	780 <BZ2_compressBlock+0x774>  // b.tstop
     718:	add	x10, x21, w8, sxtw #1
     71c:	add	w8, w8, #0x1
     720:	mov	w11, #0x1                   	// #1
     724:	tbnz	w9, #0, 744 <BZ2_compressBlock+0x738>
     728:	strh	wzr, [x10]
     72c:	ldr	w12, [x19, #672]
     730:	add	w12, w12, #0x1
     734:	str	w12, [x19, #672]
     738:	subs	w12, w9, #0x2
     73c:	b.ge	75c <BZ2_compressBlock+0x750>  // b.tcont
     740:	b	780 <BZ2_compressBlock+0x774>
     744:	strh	w11, [x10]
     748:	ldr	w12, [x19, #676]
     74c:	add	w12, w12, #0x1
     750:	str	w12, [x19, #676]
     754:	subs	w12, w9, #0x2
     758:	b.lt	780 <BZ2_compressBlock+0x774>  // b.tstop
     75c:	sub	w9, w9, #0x1
     760:	cmp	w12, #0x0
     764:	csel	w9, w9, w12, lt  // lt = tstop
     768:	add	w8, w8, #0x1
     76c:	asr	w9, w9, #1
     770:	add	x10, x10, #0x2
     774:	tbnz	w9, #0, 744 <BZ2_compressBlock+0x738>
     778:	b	728 <BZ2_compressBlock+0x71c>
     77c:	mov	w8, wzr
     780:	strh	w22, [x21, w8, sxtw #1]
     784:	add	x9, x19, w22, sxtw #2
     788:	ldr	w10, [x9, #672]
     78c:	add	w8, w8, #0x1
     790:	mov	x0, x19
     794:	add	w10, w10, #0x1
     798:	str	w10, [x9, #672]
     79c:	str	w8, [x19, #668]
     7a0:	bl	c40 <sendMTFValues>
     7a4:	tst	w20, #0xff
     7a8:	b.eq	a54 <BZ2_compressBlock+0xa48>  // b.none
     7ac:	ldr	w10, [x19, #644]
     7b0:	cmp	w10, #0x7
     7b4:	b.le	7fc <BZ2_compressBlock+0x7f0>
     7b8:	ldr	w9, [x19, #640]
     7bc:	ldr	w8, [x19, #116]
     7c0:	ldr	x10, [x19, #80]
     7c4:	lsr	w9, w9, #24
     7c8:	strb	w9, [x10, w8, sxtw]
     7cc:	ldr	w8, [x19, #116]
     7d0:	ldr	w9, [x19, #640]
     7d4:	ldr	w11, [x19, #644]
     7d8:	add	w8, w8, #0x1
     7dc:	lsl	w9, w9, #8
     7e0:	sub	w10, w11, #0x8
     7e4:	cmp	w11, #0xf
     7e8:	str	w8, [x19, #116]
     7ec:	str	w9, [x19, #640]
     7f0:	str	w10, [x19, #644]
     7f4:	b.gt	7c0 <BZ2_compressBlock+0x7b4>
     7f8:	b	800 <BZ2_compressBlock+0x7f4>
     7fc:	ldr	w9, [x19, #640]
     800:	mov	w8, #0x18                  	// #24
     804:	mov	w12, #0x17                  	// #23
     808:	sub	w13, w8, w10
     80c:	lsl	w12, w12, w13
     810:	add	w11, w10, #0x8
     814:	orr	w9, w12, w9
     818:	str	w9, [x19, #640]
     81c:	str	w11, [x19, #644]
     820:	tbnz	w10, #31, 860 <BZ2_compressBlock+0x854>
     824:	ldr	w10, [x19, #116]
     828:	ldr	x11, [x19, #80]
     82c:	lsr	w9, w9, #24
     830:	strb	w9, [x11, w10, sxtw]
     834:	ldr	w9, [x19, #116]
     838:	ldr	w11, [x19, #640]
     83c:	ldr	w12, [x19, #644]
     840:	add	w10, w9, #0x1
     844:	lsl	w9, w11, #8
     848:	sub	w11, w12, #0x8
     84c:	cmp	w12, #0xf
     850:	str	w10, [x19, #116]
     854:	str	w9, [x19, #640]
     858:	str	w11, [x19, #644]
     85c:	b.gt	828 <BZ2_compressBlock+0x81c>
     860:	sub	w8, w8, w11
     864:	mov	w12, #0x72                  	// #114
     868:	lsl	w8, w12, w8
     86c:	add	w10, w11, #0x8
     870:	orr	w9, w8, w9
     874:	str	w9, [x19, #640]
     878:	str	w10, [x19, #644]
     87c:	tbnz	w11, #31, 8bc <BZ2_compressBlock+0x8b0>
     880:	ldr	w8, [x19, #116]
     884:	ldr	x10, [x19, #80]
     888:	lsr	w9, w9, #24
     88c:	strb	w9, [x10, w8, sxtw]
     890:	ldr	w8, [x19, #116]
     894:	ldr	w9, [x19, #640]
     898:	ldr	w11, [x19, #644]
     89c:	add	w8, w8, #0x1
     8a0:	lsl	w9, w9, #8
     8a4:	sub	w10, w11, #0x8
     8a8:	cmp	w11, #0xf
     8ac:	str	w8, [x19, #116]
     8b0:	str	w9, [x19, #640]
     8b4:	str	w10, [x19, #644]
     8b8:	b.gt	884 <BZ2_compressBlock+0x878>
     8bc:	mov	w8, #0x18                  	// #24
     8c0:	mov	w12, #0x45                  	// #69
     8c4:	sub	w13, w8, w10
     8c8:	lsl	w12, w12, w13
     8cc:	add	w11, w10, #0x8
     8d0:	orr	w9, w12, w9
     8d4:	str	w9, [x19, #640]
     8d8:	str	w11, [x19, #644]
     8dc:	tbnz	w10, #31, 91c <BZ2_compressBlock+0x910>
     8e0:	ldr	w10, [x19, #116]
     8e4:	ldr	x11, [x19, #80]
     8e8:	lsr	w9, w9, #24
     8ec:	strb	w9, [x11, w10, sxtw]
     8f0:	ldr	w9, [x19, #116]
     8f4:	ldr	w11, [x19, #640]
     8f8:	ldr	w12, [x19, #644]
     8fc:	add	w10, w9, #0x1
     900:	lsl	w9, w11, #8
     904:	sub	w11, w12, #0x8
     908:	cmp	w12, #0xf
     90c:	str	w10, [x19, #116]
     910:	str	w9, [x19, #640]
     914:	str	w11, [x19, #644]
     918:	b.gt	8e4 <BZ2_compressBlock+0x8d8>
     91c:	sub	w8, w8, w11
     920:	mov	w12, #0x38                  	// #56
     924:	lsl	w8, w12, w8
     928:	add	w10, w11, #0x8
     92c:	orr	w9, w8, w9
     930:	str	w9, [x19, #640]
     934:	str	w10, [x19, #644]
     938:	tbnz	w11, #31, 978 <BZ2_compressBlock+0x96c>
     93c:	ldr	w8, [x19, #116]
     940:	ldr	x10, [x19, #80]
     944:	lsr	w9, w9, #24
     948:	strb	w9, [x10, w8, sxtw]
     94c:	ldr	w8, [x19, #116]
     950:	ldr	w9, [x19, #640]
     954:	ldr	w11, [x19, #644]
     958:	add	w8, w8, #0x1
     95c:	lsl	w9, w9, #8
     960:	sub	w10, w11, #0x8
     964:	cmp	w11, #0xf
     968:	str	w8, [x19, #116]
     96c:	str	w9, [x19, #640]
     970:	str	w10, [x19, #644]
     974:	b.gt	940 <BZ2_compressBlock+0x934>
     978:	mov	w8, #0x18                  	// #24
     97c:	mov	w12, #0x50                  	// #80
     980:	sub	w13, w8, w10
     984:	lsl	w12, w12, w13
     988:	add	w11, w10, #0x8
     98c:	orr	w9, w12, w9
     990:	str	w9, [x19, #640]
     994:	str	w11, [x19, #644]
     998:	tbnz	w10, #31, 9d8 <BZ2_compressBlock+0x9cc>
     99c:	ldr	w10, [x19, #116]
     9a0:	ldr	x11, [x19, #80]
     9a4:	lsr	w9, w9, #24
     9a8:	strb	w9, [x11, w10, sxtw]
     9ac:	ldr	w9, [x19, #116]
     9b0:	ldr	w11, [x19, #640]
     9b4:	ldr	w12, [x19, #644]
     9b8:	add	w10, w9, #0x1
     9bc:	lsl	w9, w11, #8
     9c0:	sub	w11, w12, #0x8
     9c4:	cmp	w12, #0xf
     9c8:	str	w10, [x19, #116]
     9cc:	str	w9, [x19, #640]
     9d0:	str	w11, [x19, #644]
     9d4:	b.gt	9a0 <BZ2_compressBlock+0x994>
     9d8:	ldr	w1, [x19, #652]
     9dc:	sub	w8, w8, w11
     9e0:	mov	w10, #0x90                  	// #144
     9e4:	lsl	w8, w10, w8
     9e8:	add	w11, w11, #0x8
     9ec:	orr	w8, w8, w9
     9f0:	mov	x0, x19
     9f4:	str	w8, [x19, #640]
     9f8:	str	w11, [x19, #644]
     9fc:	bl	ab0 <bsPutUInt32>
     a00:	ldr	w8, [x19, #656]
     a04:	cmp	w8, #0x1
     a08:	b.gt	a88 <BZ2_compressBlock+0xa7c>
     a0c:	ldr	w8, [x19, #644]
     a10:	cmp	w8, #0x1
     a14:	b.lt	a54 <BZ2_compressBlock+0xa48>  // b.tstop
     a18:	ldr	w8, [x19, #640]
     a1c:	ldr	w9, [x19, #116]
     a20:	ldr	x10, [x19, #80]
     a24:	lsr	w8, w8, #24
     a28:	strb	w8, [x10, w9, sxtw]
     a2c:	ldr	w8, [x19, #116]
     a30:	ldr	w10, [x19, #640]
     a34:	ldr	w11, [x19, #644]
     a38:	add	w9, w8, #0x1
     a3c:	lsl	w8, w10, #8
     a40:	subs	w10, w11, #0x8
     a44:	str	w9, [x19, #116]
     a48:	str	w8, [x19, #640]
     a4c:	str	w10, [x19, #644]
     a50:	b.gt	a20 <BZ2_compressBlock+0xa14>
     a54:	ldp	x20, x19, [sp, #320]
     a58:	ldp	x22, x21, [sp, #304]
     a5c:	ldp	x24, x23, [sp, #288]
     a60:	ldp	x28, x25, [sp, #272]
     a64:	ldp	x29, x30, [sp, #256]
     a68:	add	sp, sp, #0x150
     a6c:	ret
     a70:	adrp	x8, 0 <stderr>
     a74:	ldr	x0, [x8]
     a78:	adrp	x1, 0 <BZ2_bsInitWrite>
     a7c:	add	x1, x1, #0x0
     a80:	bl	0 <fprintf>
     a84:	b	70 <BZ2_compressBlock+0x64>
     a88:	adrp	x8, 0 <stderr>
     a8c:	ldr	x0, [x8]
     a90:	ldr	w2, [x19, #652]
     a94:	adrp	x1, 0 <BZ2_bsInitWrite>
     a98:	add	x1, x1, #0x0
     a9c:	bl	0 <fprintf>
     aa0:	ldr	w8, [x19, #644]
     aa4:	cmp	w8, #0x1
     aa8:	b.ge	a18 <BZ2_compressBlock+0xa0c>  // b.tcont
     aac:	b	a54 <BZ2_compressBlock+0xa48>

0000000000000ab0 <bsPutUInt32>:
     ab0:	ldr	w11, [x0, #644]
     ab4:	lsr	w8, w1, #24
     ab8:	cmp	w11, #0x7
     abc:	b.le	b04 <bsPutUInt32+0x54>
     ac0:	ldr	w10, [x0, #640]
     ac4:	ldr	w9, [x0, #116]
     ac8:	ldr	x11, [x0, #80]
     acc:	lsr	w10, w10, #24
     ad0:	strb	w10, [x11, w9, sxtw]
     ad4:	ldr	w9, [x0, #116]
     ad8:	ldr	w10, [x0, #640]
     adc:	ldr	w12, [x0, #644]
     ae0:	add	w9, w9, #0x1
     ae4:	lsl	w10, w10, #8
     ae8:	sub	w11, w12, #0x8
     aec:	cmp	w12, #0xf
     af0:	str	w9, [x0, #116]
     af4:	str	w10, [x0, #640]
     af8:	str	w11, [x0, #644]
     afc:	b.gt	ac8 <bsPutUInt32+0x18>
     b00:	b	b08 <bsPutUInt32+0x58>
     b04:	ldr	w10, [x0, #640]
     b08:	mov	w9, #0x18                  	// #24
     b0c:	sub	w13, w9, w11
     b10:	lsl	w8, w8, w13
     b14:	add	w12, w11, #0x8
     b18:	orr	w10, w8, w10
     b1c:	ubfx	w8, w1, #16, #8
     b20:	str	w12, [x0, #644]
     b24:	str	w10, [x0, #640]
     b28:	tbnz	w11, #31, b68 <bsPutUInt32+0xb8>
     b2c:	ldr	w11, [x0, #116]
     b30:	ldr	x12, [x0, #80]
     b34:	lsr	w10, w10, #24
     b38:	strb	w10, [x12, w11, sxtw]
     b3c:	ldr	w10, [x0, #116]
     b40:	ldr	w12, [x0, #640]
     b44:	ldr	w13, [x0, #644]
     b48:	add	w11, w10, #0x1
     b4c:	lsl	w10, w12, #8
     b50:	sub	w12, w13, #0x8
     b54:	cmp	w13, #0xf
     b58:	str	w11, [x0, #116]
     b5c:	str	w10, [x0, #640]
     b60:	str	w12, [x0, #644]
     b64:	b.gt	b30 <bsPutUInt32+0x80>
     b68:	sub	w9, w9, w12
     b6c:	lsl	w8, w8, w9
     b70:	add	w11, w12, #0x8
     b74:	orr	w10, w8, w10
     b78:	ubfx	w9, w1, #8, #8
     b7c:	str	w11, [x0, #644]
     b80:	str	w10, [x0, #640]
     b84:	tbnz	w12, #31, bc4 <bsPutUInt32+0x114>
     b88:	ldr	w8, [x0, #116]
     b8c:	ldr	x11, [x0, #80]
     b90:	lsr	w10, w10, #24
     b94:	strb	w10, [x11, w8, sxtw]
     b98:	ldr	w8, [x0, #116]
     b9c:	ldr	w10, [x0, #640]
     ba0:	ldr	w12, [x0, #644]
     ba4:	add	w8, w8, #0x1
     ba8:	lsl	w10, w10, #8
     bac:	sub	w11, w12, #0x8
     bb0:	cmp	w12, #0xf
     bb4:	str	w8, [x0, #116]
     bb8:	str	w10, [x0, #640]
     bbc:	str	w11, [x0, #644]
     bc0:	b.gt	b8c <bsPutUInt32+0xdc>
     bc4:	mov	w8, #0x18                  	// #24
     bc8:	sub	w13, w8, w11
     bcc:	lsl	w9, w9, w13
     bd0:	add	w12, w11, #0x8
     bd4:	orr	w10, w9, w10
     bd8:	and	w9, w1, #0xff
     bdc:	str	w12, [x0, #644]
     be0:	str	w10, [x0, #640]
     be4:	tbnz	w11, #31, c24 <bsPutUInt32+0x174>
     be8:	ldr	w11, [x0, #116]
     bec:	ldr	x12, [x0, #80]
     bf0:	lsr	w10, w10, #24
     bf4:	strb	w10, [x12, w11, sxtw]
     bf8:	ldr	w10, [x0, #116]
     bfc:	ldr	w12, [x0, #640]
     c00:	ldr	w13, [x0, #644]
     c04:	add	w11, w10, #0x1
     c08:	lsl	w10, w12, #8
     c0c:	sub	w12, w13, #0x8
     c10:	cmp	w13, #0xf
     c14:	str	w11, [x0, #116]
     c18:	str	w10, [x0, #640]
     c1c:	str	w12, [x0, #644]
     c20:	b.gt	bec <bsPutUInt32+0x13c>
     c24:	sub	w8, w8, w12
     c28:	lsl	w8, w9, w8
     c2c:	add	w11, w12, #0x8
     c30:	orr	w8, w8, w10
     c34:	str	w8, [x0, #640]
     c38:	str	w11, [x0, #644]
     c3c:	ret

0000000000000c40 <sendMTFValues>:
     c40:	sub	sp, sp, #0x130
     c44:	str	d8, [sp, #192]
     c48:	stp	x29, x30, [sp, #208]
     c4c:	stp	x28, x27, [sp, #224]
     c50:	stp	x26, x25, [sp, #240]
     c54:	stp	x24, x23, [sp, #256]
     c58:	stp	x22, x21, [sp, #272]
     c5c:	stp	x20, x19, [sp, #288]
     c60:	add	x29, sp, #0xc0
     c64:	ldr	w8, [x0, #656]
     c68:	ldr	x9, [x0, #72]
     c6c:	str	x0, [x29, #8]
     c70:	cmp	w8, #0x3
     c74:	adrp	x8, 0 <stderr>
     c78:	str	x9, [sp, #88]
     c7c:	b.ge	4080 <sendMTFValues+0x3440>  // b.tcont
     c80:	ldr	x8, [x29, #8]
     c84:	ldrsw	x19, [x8, #124]
     c88:	cmn	w19, #0x1
     c8c:	add	w22, w19, #0x2
     c90:	b.ge	cb4 <sendMTFValues+0x74>  // b.tcont
     c94:	ldr	x8, [x29, #8]
     c98:	ldr	w28, [x8, #668]
     c9c:	cmp	w28, #0x0
     ca0:	b.le	d48 <sendMTFValues+0x108>
     ca4:	cmp	w28, #0xc8
     ca8:	b.ge	d60 <sendMTFValues+0x120>  // b.tcont
     cac:	mov	w8, #0x2                   	// #2
     cb0:	b	d8c <sendMTFValues+0x14c>
     cb4:	ldr	x20, [x29, #8]
     cb8:	cmp	w22, #0x1
     cbc:	mov	w8, #0x934c                	// #37708
     cc0:	csinc	w21, w22, wzr, gt
     cc4:	add	x0, x20, x8
     cc8:	mov	w1, #0xf                   	// #15
     ccc:	mov	x2, x21
     cd0:	bl	0 <memset>
     cd4:	mov	w8, #0x944e                	// #37966
     cd8:	add	x0, x20, x8
     cdc:	mov	w1, #0xf                   	// #15
     ce0:	mov	x2, x21
     ce4:	bl	0 <memset>
     ce8:	mov	w8, #0x9550                	// #38224
     cec:	add	x0, x20, x8
     cf0:	mov	w1, #0xf                   	// #15
     cf4:	mov	x2, x21
     cf8:	bl	0 <memset>
     cfc:	mov	w8, #0x9652                	// #38482
     d00:	add	x0, x20, x8
     d04:	mov	w1, #0xf                   	// #15
     d08:	mov	x2, x21
     d0c:	bl	0 <memset>
     d10:	mov	w8, #0x9754                	// #38740
     d14:	add	x0, x20, x8
     d18:	mov	w1, #0xf                   	// #15
     d1c:	mov	x2, x21
     d20:	bl	0 <memset>
     d24:	mov	w8, #0x9856                	// #38998
     d28:	add	x0, x20, x8
     d2c:	mov	w1, #0xf                   	// #15
     d30:	mov	x2, x21
     d34:	bl	0 <memset>
     d38:	ldr	x8, [x29, #8]
     d3c:	ldr	w28, [x8, #668]
     d40:	cmp	w28, #0x0
     d44:	b.gt	ca4 <sendMTFValues+0x64>
     d48:	mov	w0, #0xbb9                 	// #3001
     d4c:	bl	0 <BZ2_bz__AssertH__fail>
     d50:	ldr	x8, [x29, #8]
     d54:	ldr	w28, [x8, #668]
     d58:	cmp	w28, #0xc8
     d5c:	b.lt	cac <sendMTFValues+0x6c>  // b.tstop
     d60:	cmp	w28, #0x258
     d64:	b.ge	d70 <sendMTFValues+0x130>  // b.tcont
     d68:	mov	w8, #0x3                   	// #3
     d6c:	b	d8c <sendMTFValues+0x14c>
     d70:	cmp	w28, #0x4b0
     d74:	b.ge	d80 <sendMTFValues+0x140>  // b.tcont
     d78:	mov	w8, #0x4                   	// #4
     d7c:	b	d8c <sendMTFValues+0x14c>
     d80:	cmp	w28, #0x960
     d84:	mov	w8, #0x5                   	// #5
     d88:	cinc	w8, w8, ge  // ge = tcont
     d8c:	ldr	x12, [x29, #8]
     d90:	mov	w9, #0x102                 	// #258
     d94:	mov	w20, w8
     d98:	adrp	x11, 0 <BZ2_bsInitWrite>
     d9c:	umaddl	x8, w8, w9, x12
     da0:	adrp	x9, 0 <BZ2_bsInitWrite>
     da4:	sxtw	x13, w22
     da8:	ldr	q16, [x11]
     dac:	ldr	q17, [x9]
     db0:	mov	w10, #0x924a                	// #37450
     db4:	cmp	x13, #0x1
     db8:	csinc	x14, x13, xzr, gt
     dbc:	add	x26, x8, x10
     dc0:	mov	w8, #0x4                   	// #4
     dc4:	mov	w24, wzr
     dc8:	stp	x22, x13, [sp, #48]
     dcc:	add	x27, x12, #0x2a4
     dd0:	mov	w21, #0xf                   	// #15
     dd4:	movi	v8.4h, #0xf
     dd8:	and	x15, x14, #0x7ffffffffffffffc
     ddc:	dup	v18.2d, x8
     de0:	mov	x22, x20
     de4:	stur	q16, [x29, #-80]
     de8:	str	q17, [sp, #96]
     dec:	str	x14, [sp, #80]
     df0:	str	x15, [sp, #64]
     df4:	str	q18, [sp, #32]
     df8:	b	e14 <sendMTFValues+0x1d4>
     dfc:	add	w24, w25, #0x1
     e00:	sub	w28, w28, w23
     e04:	cmp	x22, #0x1
     e08:	sub	x26, x26, #0x102
     e0c:	mov	x22, x8
     e10:	b.le	fb4 <sendMTFValues+0x374>
     e14:	sdiv	w8, w28, w22
     e18:	mov	w23, wzr
     e1c:	cmp	w8, #0x1
     e20:	sub	w25, w24, #0x1
     e24:	b.lt	e58 <sendMTFValues+0x218>  // b.tstop
     e28:	cmp	w25, w19
     e2c:	b.gt	e58 <sendMTFValues+0x218>
     e30:	mov	w23, wzr
     e34:	sxtw	x9, w25
     e38:	ldr	w10, [x27, x9, lsl #2]
     e3c:	add	x25, x9, #0x1
     e40:	add	w23, w10, w23
     e44:	cmp	w23, w8
     e48:	b.ge	e58 <sendMTFValues+0x218>  // b.tcont
     e4c:	cmp	x9, x19
     e50:	mov	x9, x25
     e54:	b.lt	e38 <sendMTFValues+0x1f8>  // b.tstop
     e58:	cmp	w25, w24
     e5c:	b.le	e8c <sendMTFValues+0x24c>
     e60:	cmp	x22, x20
     e64:	b.eq	e8c <sendMTFValues+0x24c>  // b.none
     e68:	cmp	x22, #0x1
     e6c:	b.eq	e8c <sendMTFValues+0x24c>  // b.none
     e70:	sub	w8, w20, w22
     e74:	tbz	w8, #0, e8c <sendMTFValues+0x24c>
     e78:	ldr	x8, [x29, #8]
     e7c:	add	x8, x8, w25, sxtw #2
     e80:	ldr	w8, [x8, #672]
     e84:	sub	w25, w25, #0x1
     e88:	sub	w23, w23, w8
     e8c:	ldr	x8, [x29, #8]
     e90:	ldr	w8, [x8, #656]
     e94:	cmp	w8, #0x3
     e98:	b.ge	f44 <sendMTFValues+0x304>  // b.tcont
     e9c:	cmn	w19, #0x1
     ea0:	sub	x8, x22, #0x1
     ea4:	b.lt	dfc <sendMTFValues+0x1bc>  // b.tstop
     ea8:	sxtw	x9, w25
     eac:	cmp	x14, #0x4
     eb0:	sxtw	x10, w24
     eb4:	b.cs	ec0 <sendMTFValues+0x280>  // b.hs, b.nlast
     eb8:	mov	x11, xzr
     ebc:	b	f24 <sendMTFValues+0x2e4>
     ec0:	dup	v0.2d, x10
     ec4:	dup	v1.2d, x9
     ec8:	mov	x11, x15
     ecc:	mov	x12, x26
     ed0:	mov	v2.16b, v17.16b
     ed4:	mov	v3.16b, v16.16b
     ed8:	cmgt	v4.2d, v0.2d, v2.2d
     edc:	cmgt	v6.2d, v2.2d, v1.2d
     ee0:	cmgt	v5.2d, v0.2d, v3.2d
     ee4:	cmgt	v7.2d, v3.2d, v1.2d
     ee8:	orr	v4.16b, v4.16b, v6.16b
     eec:	orr	v5.16b, v5.16b, v7.16b
     ef0:	xtn	v4.2s, v4.2d
     ef4:	xtn2	v4.4s, v5.2d
     ef8:	xtn	v4.4h, v4.4s
     efc:	and	v4.8b, v4.8b, v8.8b
     f00:	xtn	v4.8b, v4.8h
     f04:	add	v3.2d, v3.2d, v18.2d
     f08:	subs	x11, x11, #0x4
     f0c:	st1	{v4.s}[0], [x12], #4
     f10:	add	v2.2d, v2.2d, v18.2d
     f14:	b.ne	ed8 <sendMTFValues+0x298>  // b.any
     f18:	cmp	x14, x15
     f1c:	mov	x11, x15
     f20:	b.eq	dfc <sendMTFValues+0x1bc>  // b.none
     f24:	cmp	x11, x9
     f28:	ccmp	x11, x10, #0x8, le
     f2c:	csel	w12, w21, wzr, lt  // lt = tstop
     f30:	strb	w12, [x26, x11]
     f34:	add	x11, x11, #0x1
     f38:	cmp	x11, x13
     f3c:	b.lt	f24 <sendMTFValues+0x2e4>  // b.tstop
     f40:	b	dfc <sendMTFValues+0x1bc>
     f44:	adrp	x8, 0 <stderr>
     f48:	ldr	x0, [x8]
     f4c:	ldr	x8, [x29, #8]
     f50:	scvtf	s1, w23
     f54:	fcvt	d1, s1
     f58:	adrp	x1, 0 <BZ2_bsInitWrite>
     f5c:	ldr	s0, [x8, #668]
     f60:	mov	x8, #0x4059000000000000    	// #4636737291354636288
     f64:	fmov	d2, x8
     f68:	fmul	d1, d1, d2
     f6c:	scvtf	s0, s0
     f70:	fcvt	d0, s0
     f74:	fdiv	d0, d1, d0
     f78:	add	x1, x1, #0x0
     f7c:	mov	w2, w22
     f80:	mov	w3, w24
     f84:	mov	w4, w25
     f88:	mov	w5, w23
     f8c:	bl	0 <fprintf>
     f90:	ldr	q18, [sp, #32]
     f94:	ldp	x13, x15, [sp, #56]
     f98:	ldr	x14, [sp, #80]
     f9c:	ldr	q17, [sp, #96]
     fa0:	ldur	q16, [x29, #-80]
     fa4:	cmn	w19, #0x1
     fa8:	sub	x8, x22, #0x1
     fac:	b.lt	dfc <sendMTFValues+0x1bc>  // b.tstop
     fb0:	b	ea8 <sendMTFValues+0x268>
     fb4:	ldr	x11, [x29, #8]
     fb8:	mov	w9, #0xc9b8                	// #51640
     fbc:	lsl	x8, x20, #2
     fc0:	cmp	w20, #0x6
     fc4:	add	x25, x11, x9
     fc8:	ldr	x9, [sp, #48]
     fcc:	str	x8, [sp, #16]
     fd0:	lsl	x8, x20, #1
     fd4:	stp	x20, x8, [sp, #72]
     fd8:	mov	w8, #0x934c                	// #37708
     fdc:	cset	w10, ne  // ne = any
     fe0:	cmn	w19, #0x1
     fe4:	add	x22, x11, x8
     fe8:	cset	w8, lt  // lt = tstop
     fec:	cmp	w9, #0x1
     ff0:	mov	w21, #0xb188                	// #45448
     ff4:	csinc	w9, w9, wzr, gt
     ff8:	adrp	x28, 0 <BZ2_bsInitWrite>
     ffc:	sub	x23, x29, #0x14
    1000:	add	x12, x11, x21
    1004:	orr	w8, w8, w10
    1008:	lsl	x27, x9, #2
    100c:	add	x28, x28, #0x0
    1010:	str	wzr, [sp, #64]
    1014:	stp	x19, x12, [sp, #24]
    1018:	str	w8, [sp, #12]
    101c:	str	x27, [sp]
    1020:	ldr	x2, [sp, #16]
    1024:	sub	x0, x29, #0x2c
    1028:	mov	w1, wzr
    102c:	bl	0 <memset>
    1030:	cmn	w19, #0x1
    1034:	b.lt	105c <sendMTFValues+0x41c>  // b.tstop
    1038:	ldr	x26, [sp, #32]
    103c:	mov	x19, x20
    1040:	mov	x0, x26
    1044:	mov	w1, wzr
    1048:	mov	x2, x27
    104c:	bl	0 <memset>
    1050:	subs	x19, x19, #0x1
    1054:	add	x26, x26, #0x408
    1058:	b.ne	1040 <sendMTFValues+0x400>  // b.any
    105c:	ldr	x14, [sp, #56]
    1060:	ldr	w8, [sp, #12]
    1064:	tbnz	w8, #0, 10b8 <sendMTFValues+0x478>
    1068:	mov	x8, xzr
    106c:	mov	x9, xzr
    1070:	add	x10, x22, x9
    1074:	ldrb	w11, [x10, #258]
    1078:	ldrb	w12, [x10]
    107c:	add	x13, x22, x8
    1080:	add	x9, x9, #0x1
    1084:	cmp	x9, x14
    1088:	bfi	w12, w11, #16, #8
    108c:	str	w12, [x13, #13932]
    1090:	ldrb	w11, [x10, #774]
    1094:	ldrb	w12, [x10, #516]
    1098:	add	x8, x8, #0x10
    109c:	bfi	w12, w11, #16, #8
    10a0:	str	w12, [x13, #13936]
    10a4:	ldrb	w11, [x10, #1290]
    10a8:	ldrb	w10, [x10, #1032]
    10ac:	bfi	w10, w11, #16, #8
    10b0:	str	w10, [x13, #13940]
    10b4:	b.lt	1070 <sendMTFValues+0x430>  // b.tstop
    10b8:	ldr	x8, [x29, #8]
    10bc:	ldr	w19, [x8, #668]
    10c0:	cmp	w19, #0x1
    10c4:	b.lt	1be0 <sendMTFValues+0xfa0>  // b.tstop
    10c8:	mov	x24, xzr
    10cc:	mov	w28, wzr
    10d0:	mov	w1, wzr
    10d4:	b	14e0 <sendMTFValues+0x8a0>
    10d8:	add	x10, x18, x26, lsl #1
    10dc:	ldrh	w12, [x10]
    10e0:	mov	w9, #0x408                 	// #1032
    10e4:	madd	x9, x11, x9, x17
    10e8:	add	x9, x9, x21
    10ec:	lsl	x11, x12, #2
    10f0:	ldr	w12, [x9, x11]
    10f4:	add	w12, w12, #0x1
    10f8:	str	w12, [x9, x11]
    10fc:	ldrh	w11, [x10, #2]
    1100:	lsl	x11, x11, #2
    1104:	ldr	w12, [x9, x11]
    1108:	add	w12, w12, #0x1
    110c:	str	w12, [x9, x11]
    1110:	ldrh	w11, [x10, #4]
    1114:	lsl	x11, x11, #2
    1118:	ldr	w12, [x9, x11]
    111c:	add	w12, w12, #0x1
    1120:	str	w12, [x9, x11]
    1124:	ldrh	w11, [x10, #6]
    1128:	lsl	x11, x11, #2
    112c:	ldr	w12, [x9, x11]
    1130:	add	w12, w12, #0x1
    1134:	str	w12, [x9, x11]
    1138:	ldrh	w11, [x10, #8]
    113c:	lsl	x11, x11, #2
    1140:	ldr	w12, [x9, x11]
    1144:	add	w12, w12, #0x1
    1148:	str	w12, [x9, x11]
    114c:	ldrh	w11, [x10, #10]
    1150:	lsl	x11, x11, #2
    1154:	ldr	w12, [x9, x11]
    1158:	add	w12, w12, #0x1
    115c:	str	w12, [x9, x11]
    1160:	ldrh	w11, [x10, #12]
    1164:	lsl	x11, x11, #2
    1168:	ldr	w12, [x9, x11]
    116c:	add	w12, w12, #0x1
    1170:	str	w12, [x9, x11]
    1174:	ldrh	w11, [x10, #14]
    1178:	lsl	x11, x11, #2
    117c:	ldr	w12, [x9, x11]
    1180:	add	w12, w12, #0x1
    1184:	str	w12, [x9, x11]
    1188:	ldrh	w11, [x10, #16]
    118c:	lsl	x11, x11, #2
    1190:	ldr	w12, [x9, x11]
    1194:	add	w12, w12, #0x1
    1198:	str	w12, [x9, x11]
    119c:	ldrh	w11, [x10, #18]
    11a0:	lsl	x11, x11, #2
    11a4:	ldr	w12, [x9, x11]
    11a8:	add	w12, w12, #0x1
    11ac:	str	w12, [x9, x11]
    11b0:	ldrh	w11, [x10, #20]
    11b4:	lsl	x11, x11, #2
    11b8:	ldr	w12, [x9, x11]
    11bc:	add	w12, w12, #0x1
    11c0:	str	w12, [x9, x11]
    11c4:	ldrh	w11, [x10, #22]
    11c8:	lsl	x11, x11, #2
    11cc:	ldr	w12, [x9, x11]
    11d0:	add	w12, w12, #0x1
    11d4:	str	w12, [x9, x11]
    11d8:	ldrh	w11, [x10, #24]
    11dc:	lsl	x11, x11, #2
    11e0:	ldr	w12, [x9, x11]
    11e4:	add	w12, w12, #0x1
    11e8:	str	w12, [x9, x11]
    11ec:	ldrh	w11, [x10, #26]
    11f0:	lsl	x11, x11, #2
    11f4:	ldr	w12, [x9, x11]
    11f8:	add	w12, w12, #0x1
    11fc:	str	w12, [x9, x11]
    1200:	ldrh	w11, [x10, #28]
    1204:	lsl	x11, x11, #2
    1208:	ldr	w12, [x9, x11]
    120c:	add	w12, w12, #0x1
    1210:	str	w12, [x9, x11]
    1214:	ldrh	w11, [x10, #30]
    1218:	lsl	x11, x11, #2
    121c:	ldr	w12, [x9, x11]
    1220:	add	w12, w12, #0x1
    1224:	str	w12, [x9, x11]
    1228:	ldrh	w11, [x10, #32]
    122c:	lsl	x11, x11, #2
    1230:	ldr	w12, [x9, x11]
    1234:	add	w12, w12, #0x1
    1238:	str	w12, [x9, x11]
    123c:	ldrh	w11, [x10, #34]
    1240:	lsl	x11, x11, #2
    1244:	ldr	w12, [x9, x11]
    1248:	add	w12, w12, #0x1
    124c:	str	w12, [x9, x11]
    1250:	ldrh	w11, [x10, #36]
    1254:	lsl	x11, x11, #2
    1258:	ldr	w12, [x9, x11]
    125c:	add	w12, w12, #0x1
    1260:	str	w12, [x9, x11]
    1264:	ldrh	w11, [x10, #38]
    1268:	lsl	x11, x11, #2
    126c:	ldr	w12, [x9, x11]
    1270:	add	w12, w12, #0x1
    1274:	str	w12, [x9, x11]
    1278:	ldrh	w11, [x10, #40]
    127c:	lsl	x11, x11, #2
    1280:	ldr	w12, [x9, x11]
    1284:	add	w12, w12, #0x1
    1288:	str	w12, [x9, x11]
    128c:	ldrh	w11, [x10, #42]
    1290:	lsl	x11, x11, #2
    1294:	ldr	w12, [x9, x11]
    1298:	add	w12, w12, #0x1
    129c:	str	w12, [x9, x11]
    12a0:	ldrh	w11, [x10, #44]
    12a4:	lsl	x11, x11, #2
    12a8:	ldr	w12, [x9, x11]
    12ac:	add	w12, w12, #0x1
    12b0:	str	w12, [x9, x11]
    12b4:	ldrh	w11, [x10, #46]
    12b8:	lsl	x11, x11, #2
    12bc:	ldr	w12, [x9, x11]
    12c0:	add	w12, w12, #0x1
    12c4:	str	w12, [x9, x11]
    12c8:	ldrh	w11, [x10, #48]
    12cc:	lsl	x11, x11, #2
    12d0:	ldr	w12, [x9, x11]
    12d4:	add	w12, w12, #0x1
    12d8:	str	w12, [x9, x11]
    12dc:	ldrh	w11, [x10, #50]
    12e0:	lsl	x11, x11, #2
    12e4:	ldr	w12, [x9, x11]
    12e8:	add	w12, w12, #0x1
    12ec:	str	w12, [x9, x11]
    12f0:	ldrh	w11, [x10, #52]
    12f4:	lsl	x11, x11, #2
    12f8:	ldr	w12, [x9, x11]
    12fc:	add	w12, w12, #0x1
    1300:	str	w12, [x9, x11]
    1304:	ldrh	w11, [x10, #54]
    1308:	lsl	x11, x11, #2
    130c:	ldr	w12, [x9, x11]
    1310:	add	w12, w12, #0x1
    1314:	str	w12, [x9, x11]
    1318:	ldrh	w11, [x10, #56]
    131c:	lsl	x11, x11, #2
    1320:	ldr	w12, [x9, x11]
    1324:	add	w12, w12, #0x1
    1328:	str	w12, [x9, x11]
    132c:	ldrh	w11, [x10, #58]
    1330:	lsl	x11, x11, #2
    1334:	ldr	w12, [x9, x11]
    1338:	add	w12, w12, #0x1
    133c:	str	w12, [x9, x11]
    1340:	ldrh	w11, [x10, #60]
    1344:	lsl	x11, x11, #2
    1348:	ldr	w12, [x9, x11]
    134c:	add	w12, w12, #0x1
    1350:	str	w12, [x9, x11]
    1354:	ldrh	w11, [x10, #62]
    1358:	lsl	x11, x11, #2
    135c:	ldr	w12, [x9, x11]
    1360:	add	w12, w12, #0x1
    1364:	str	w12, [x9, x11]
    1368:	ldrh	w11, [x10, #64]
    136c:	lsl	x11, x11, #2
    1370:	ldr	w12, [x9, x11]
    1374:	add	w12, w12, #0x1
    1378:	str	w12, [x9, x11]
    137c:	ldrh	w11, [x10, #66]
    1380:	lsl	x11, x11, #2
    1384:	ldr	w12, [x9, x11]
    1388:	add	w12, w12, #0x1
    138c:	str	w12, [x9, x11]
    1390:	ldrh	w11, [x10, #68]
    1394:	lsl	x11, x11, #2
    1398:	ldr	w12, [x9, x11]
    139c:	add	w12, w12, #0x1
    13a0:	str	w12, [x9, x11]
    13a4:	ldrh	w11, [x10, #70]
    13a8:	lsl	x11, x11, #2
    13ac:	ldr	w12, [x9, x11]
    13b0:	add	w12, w12, #0x1
    13b4:	str	w12, [x9, x11]
    13b8:	ldrh	w11, [x10, #72]
    13bc:	lsl	x11, x11, #2
    13c0:	ldr	w12, [x9, x11]
    13c4:	add	w12, w12, #0x1
    13c8:	str	w12, [x9, x11]
    13cc:	ldrh	w11, [x10, #74]
    13d0:	lsl	x11, x11, #2
    13d4:	ldr	w12, [x9, x11]
    13d8:	add	w12, w12, #0x1
    13dc:	str	w12, [x9, x11]
    13e0:	ldrh	w11, [x10, #76]
    13e4:	lsl	x11, x11, #2
    13e8:	ldr	w12, [x9, x11]
    13ec:	add	w12, w12, #0x1
    13f0:	str	w12, [x9, x11]
    13f4:	ldrh	w11, [x10, #78]
    13f8:	lsl	x11, x11, #2
    13fc:	ldr	w12, [x9, x11]
    1400:	add	w12, w12, #0x1
    1404:	str	w12, [x9, x11]
    1408:	ldrh	w11, [x10, #80]
    140c:	lsl	x11, x11, #2
    1410:	ldr	w12, [x9, x11]
    1414:	add	w12, w12, #0x1
    1418:	str	w12, [x9, x11]
    141c:	ldrh	w11, [x10, #82]
    1420:	lsl	x11, x11, #2
    1424:	ldr	w12, [x9, x11]
    1428:	add	w12, w12, #0x1
    142c:	str	w12, [x9, x11]
    1430:	ldrh	w11, [x10, #84]
    1434:	lsl	x11, x11, #2
    1438:	ldr	w12, [x9, x11]
    143c:	add	w12, w12, #0x1
    1440:	str	w12, [x9, x11]
    1444:	ldrh	w11, [x10, #86]
    1448:	lsl	x11, x11, #2
    144c:	ldr	w12, [x9, x11]
    1450:	add	w12, w12, #0x1
    1454:	str	w12, [x9, x11]
    1458:	ldrh	w11, [x10, #88]
    145c:	lsl	x11, x11, #2
    1460:	ldr	w12, [x9, x11]
    1464:	add	w12, w12, #0x1
    1468:	str	w12, [x9, x11]
    146c:	ldrh	w11, [x10, #90]
    1470:	lsl	x11, x11, #2
    1474:	ldr	w12, [x9, x11]
    1478:	add	w12, w12, #0x1
    147c:	str	w12, [x9, x11]
    1480:	ldrh	w11, [x10, #92]
    1484:	lsl	x11, x11, #2
    1488:	ldr	w12, [x9, x11]
    148c:	add	w12, w12, #0x1
    1490:	str	w12, [x9, x11]
    1494:	ldrh	w11, [x10, #94]
    1498:	lsl	x11, x11, #2
    149c:	ldr	w12, [x9, x11]
    14a0:	add	w12, w12, #0x1
    14a4:	str	w12, [x9, x11]
    14a8:	ldrh	w10, [x10, #96]
    14ac:	lsl	x10, x10, #2
    14b0:	ldr	w11, [x9, x10]
    14b4:	add	w11, w11, #0x1
    14b8:	str	w11, [x9, x10]
    14bc:	ldrh	w10, [x18, w0, sxtw #1]
    14c0:	lsl	x10, x10, #2
    14c4:	ldr	w11, [x9, x10]
    14c8:	add	w11, w11, #0x1
    14cc:	str	w11, [x9, x10]
    14d0:	ldr	w19, [x17, #668]
    14d4:	add	w28, w8, #0x1
    14d8:	cmp	w28, w19
    14dc:	b.ge	1bc4 <sendMTFValues+0xf84>  // b.tcont
    14e0:	ldr	x2, [sp, #80]
    14e4:	str	w1, [sp, #96]
    14e8:	cmp	w20, #0x6
    14ec:	sxtw	x26, w28
    14f0:	sub	x0, x29, #0x14
    14f4:	mov	w1, wzr
    14f8:	stur	x24, [x29, #-80]
    14fc:	cset	w24, eq  // eq = none
    1500:	add	x20, x26, #0x31
    1504:	sub	w27, w19, #0x1
    1508:	bl	0 <memset>
    150c:	mov	x0, x20
    1510:	cmp	w0, w19
    1514:	csel	w8, w0, w27, lt  // lt = tstop
    1518:	sub	w9, w8, w28
    151c:	cmp	w9, #0x31
    1520:	cset	w9, eq  // eq = none
    1524:	and	w9, w24, w9
    1528:	tbz	w9, #0, 1ad8 <sendMTFValues+0xe98>
    152c:	ldr	x18, [sp, #88]
    1530:	ldur	x24, [x29, #-80]
    1534:	ldr	w1, [sp, #96]
    1538:	ldr	x20, [sp, #72]
    153c:	add	x10, x18, x26, lsl #1
    1540:	ldrh	w11, [x10]
    1544:	ldrh	w12, [x10, #2]
    1548:	ldrh	w15, [x10, #4]
    154c:	add	x11, x25, x11, lsl #4
    1550:	add	x12, x25, x12, lsl #4
    1554:	ldp	w13, w17, [x12]
    1558:	ldp	w14, w16, [x11]
    155c:	ldr	w11, [x11, #8]
    1560:	ldr	w12, [x12, #8]
    1564:	add	x15, x25, x15, lsl #4
    1568:	add	w13, w13, w14
    156c:	ldrh	w14, [x10, #6]
    1570:	add	w16, w17, w16
    1574:	add	w11, w12, w11
    1578:	ldp	w17, w12, [x15]
    157c:	ldr	w15, [x15, #8]
    1580:	add	x14, x25, x14, lsl #4
    1584:	add	w13, w13, w17
    1588:	ldrh	w17, [x10, #8]
    158c:	add	w12, w16, w12
    1590:	add	w11, w11, w15
    1594:	ldp	w15, w16, [x14]
    1598:	ldr	w14, [x14, #8]
    159c:	add	x17, x25, x17, lsl #4
    15a0:	add	w13, w13, w15
    15a4:	add	w12, w12, w16
    15a8:	ldrh	w16, [x10, #10]
    15ac:	add	w11, w11, w14
    15b0:	ldp	w15, w14, [x17]
    15b4:	ldr	w17, [x17, #8]
    15b8:	add	x16, x25, x16, lsl #4
    15bc:	add	w13, w13, w15
    15c0:	ldrh	w15, [x10, #12]
    15c4:	add	w12, w12, w14
    15c8:	add	w11, w11, w17
    15cc:	ldp	w14, w17, [x16]
    15d0:	ldr	w16, [x16, #8]
    15d4:	add	x15, x25, x15, lsl #4
    15d8:	add	w13, w13, w14
    15dc:	ldrh	w14, [x10, #14]
    15e0:	add	w12, w12, w17
    15e4:	add	w11, w11, w16
    15e8:	ldp	w16, w17, [x15]
    15ec:	ldr	w15, [x15, #8]
    15f0:	add	x14, x25, x14, lsl #4
    15f4:	add	w12, w12, w17
    15f8:	ldrh	w17, [x10, #16]
    15fc:	add	w13, w13, w16
    1600:	add	w11, w11, w15
    1604:	ldp	w16, w15, [x14]
    1608:	ldr	w14, [x14, #8]
    160c:	add	x17, x25, x17, lsl #4
    1610:	add	w13, w13, w16
    1614:	ldrh	w16, [x10, #18]
    1618:	add	w12, w12, w15
    161c:	add	w11, w11, w14
    1620:	ldp	w15, w14, [x17]
    1624:	ldr	w17, [x17, #8]
    1628:	add	x16, x25, x16, lsl #4
    162c:	add	w13, w13, w15
    1630:	ldrh	w15, [x10, #20]
    1634:	add	w12, w12, w14
    1638:	add	w11, w11, w17
    163c:	ldp	w14, w17, [x16]
    1640:	ldr	w16, [x16, #8]
    1644:	add	x15, x25, x15, lsl #4
    1648:	add	w13, w13, w14
    164c:	add	w12, w12, w17
    1650:	ldrh	w17, [x10, #22]
    1654:	add	w11, w11, w16
    1658:	ldp	w14, w16, [x15]
    165c:	ldr	w15, [x15, #8]
    1660:	add	x17, x25, x17, lsl #4
    1664:	add	w13, w13, w14
    1668:	ldrh	w14, [x10, #24]
    166c:	add	w12, w12, w16
    1670:	add	w11, w11, w15
    1674:	ldp	w16, w15, [x17]
    1678:	ldr	w17, [x17, #8]
    167c:	add	x14, x25, x14, lsl #4
    1680:	add	w13, w13, w16
    1684:	ldrh	w16, [x10, #26]
    1688:	add	w12, w12, w15
    168c:	add	w11, w11, w17
    1690:	ldp	w15, w17, [x14]
    1694:	ldr	w14, [x14, #8]
    1698:	add	x16, x25, x16, lsl #4
    169c:	add	w12, w12, w17
    16a0:	ldrh	w17, [x10, #28]
    16a4:	add	w13, w13, w15
    16a8:	add	w11, w11, w14
    16ac:	ldp	w15, w14, [x16]
    16b0:	ldr	w16, [x16, #8]
    16b4:	add	x17, x25, x17, lsl #4
    16b8:	add	w13, w13, w15
    16bc:	ldrh	w15, [x10, #30]
    16c0:	add	w12, w12, w14
    16c4:	add	w11, w11, w16
    16c8:	ldp	w14, w16, [x17]
    16cc:	ldr	w17, [x17, #8]
    16d0:	add	x15, x25, x15, lsl #4
    16d4:	add	w13, w13, w14
    16d8:	ldrh	w14, [x10, #32]
    16dc:	add	w12, w12, w16
    16e0:	add	w11, w11, w17
    16e4:	ldp	w16, w17, [x15]
    16e8:	ldr	w15, [x15, #8]
    16ec:	add	x14, x25, x14, lsl #4
    16f0:	add	w13, w13, w16
    16f4:	add	w12, w12, w17
    16f8:	ldrh	w17, [x10, #34]
    16fc:	add	w11, w11, w15
    1700:	ldp	w16, w15, [x14]
    1704:	ldr	w14, [x14, #8]
    1708:	add	x17, x25, x17, lsl #4
    170c:	add	w13, w13, w16
    1710:	ldrh	w16, [x10, #36]
    1714:	add	w12, w12, w15
    1718:	add	w11, w11, w14
    171c:	ldp	w15, w14, [x17]
    1720:	ldr	w17, [x17, #8]
    1724:	add	x16, x25, x16, lsl #4
    1728:	add	w13, w13, w15
    172c:	ldrh	w15, [x10, #38]
    1730:	add	w12, w12, w14
    1734:	add	w11, w11, w17
    1738:	ldp	w14, w17, [x16]
    173c:	ldr	w16, [x16, #8]
    1740:	add	x15, x25, x15, lsl #4
    1744:	add	w12, w12, w17
    1748:	ldrh	w17, [x10, #40]
    174c:	add	w13, w13, w14
    1750:	add	w11, w11, w16
    1754:	ldp	w14, w16, [x15]
    1758:	ldr	w15, [x15, #8]
    175c:	add	x17, x25, x17, lsl #4
    1760:	add	w13, w13, w14
    1764:	ldrh	w14, [x10, #42]
    1768:	add	w12, w12, w16
    176c:	add	w11, w11, w15
    1770:	ldp	w16, w15, [x17]
    1774:	ldr	w17, [x17, #8]
    1778:	add	x14, x25, x14, lsl #4
    177c:	add	w13, w13, w16
    1780:	ldrh	w16, [x10, #44]
    1784:	add	w12, w12, w15
    1788:	add	w11, w11, w17
    178c:	ldp	w15, w17, [x14]
    1790:	ldr	w14, [x14, #8]
    1794:	add	x16, x25, x16, lsl #4
    1798:	add	w13, w13, w15
    179c:	add	w12, w12, w17
    17a0:	ldrh	w17, [x10, #46]
    17a4:	add	w11, w11, w14
    17a8:	ldp	w15, w14, [x16]
    17ac:	ldr	w16, [x16, #8]
    17b0:	add	x17, x25, x17, lsl #4
    17b4:	add	w13, w13, w15
    17b8:	ldrh	w15, [x10, #48]
    17bc:	add	w12, w12, w14
    17c0:	add	w11, w11, w16
    17c4:	ldp	w14, w16, [x17]
    17c8:	ldr	w17, [x17, #8]
    17cc:	add	x15, x25, x15, lsl #4
    17d0:	add	w13, w13, w14
    17d4:	ldrh	w14, [x10, #50]
    17d8:	add	w12, w12, w16
    17dc:	add	w11, w11, w17
    17e0:	ldp	w16, w17, [x15]
    17e4:	ldr	w15, [x15, #8]
    17e8:	add	x14, x25, x14, lsl #4
    17ec:	add	w12, w12, w17
    17f0:	ldrh	w17, [x10, #52]
    17f4:	add	w13, w13, w16
    17f8:	add	w11, w11, w15
    17fc:	ldp	w16, w15, [x14]
    1800:	ldr	w14, [x14, #8]
    1804:	add	x17, x25, x17, lsl #4
    1808:	add	w13, w13, w16
    180c:	ldrh	w16, [x10, #54]
    1810:	add	w12, w12, w15
    1814:	add	w11, w11, w14
    1818:	ldp	w15, w14, [x17]
    181c:	ldr	w17, [x17, #8]
    1820:	add	x16, x25, x16, lsl #4
    1824:	add	w13, w13, w15
    1828:	ldrh	w15, [x10, #56]
    182c:	add	w12, w12, w14
    1830:	add	w11, w11, w17
    1834:	ldp	w14, w17, [x16]
    1838:	ldr	w16, [x16, #8]
    183c:	add	x15, x25, x15, lsl #4
    1840:	add	w13, w13, w14
    1844:	add	w12, w12, w17
    1848:	ldrh	w17, [x10, #58]
    184c:	add	w11, w11, w16
    1850:	ldp	w14, w16, [x15]
    1854:	ldr	w15, [x15, #8]
    1858:	add	x17, x25, x17, lsl #4
    185c:	add	w13, w13, w14
    1860:	ldrh	w14, [x10, #60]
    1864:	add	w12, w12, w16
    1868:	add	w11, w11, w15
    186c:	ldp	w16, w15, [x17]
    1870:	ldr	w17, [x17, #8]
    1874:	add	x14, x25, x14, lsl #4
    1878:	add	w13, w13, w16
    187c:	ldrh	w16, [x10, #62]
    1880:	add	w12, w12, w15
    1884:	add	w11, w11, w17
    1888:	ldp	w15, w17, [x14]
    188c:	ldr	w14, [x14, #8]
    1890:	add	x16, x25, x16, lsl #4
    1894:	add	w12, w12, w17
    1898:	ldrh	w17, [x10, #64]
    189c:	add	w13, w13, w15
    18a0:	add	w11, w11, w14
    18a4:	ldp	w15, w14, [x16]
    18a8:	ldr	w16, [x16, #8]
    18ac:	add	x17, x25, x17, lsl #4
    18b0:	add	w13, w13, w15
    18b4:	ldrh	w15, [x10, #66]
    18b8:	add	w12, w12, w14
    18bc:	add	w11, w11, w16
    18c0:	ldp	w14, w16, [x17]
    18c4:	ldr	w17, [x17, #8]
    18c8:	add	x15, x25, x15, lsl #4
    18cc:	add	w13, w13, w14
    18d0:	ldrh	w14, [x10, #68]
    18d4:	add	w12, w12, w16
    18d8:	add	w11, w11, w17
    18dc:	ldp	w16, w17, [x15]
    18e0:	ldr	w15, [x15, #8]
    18e4:	add	x14, x25, x14, lsl #4
    18e8:	add	w13, w13, w16
    18ec:	add	w12, w12, w17
    18f0:	ldrh	w17, [x10, #70]
    18f4:	add	w11, w11, w15
    18f8:	ldp	w16, w15, [x14]
    18fc:	ldr	w14, [x14, #8]
    1900:	add	x17, x25, x17, lsl #4
    1904:	add	w13, w13, w16
    1908:	ldrh	w16, [x10, #72]
    190c:	add	w12, w12, w15
    1910:	add	w11, w11, w14
    1914:	ldp	w15, w14, [x17]
    1918:	ldr	w17, [x17, #8]
    191c:	add	x16, x25, x16, lsl #4
    1920:	add	w13, w13, w15
    1924:	ldrh	w15, [x10, #74]
    1928:	add	w12, w12, w14
    192c:	add	w11, w11, w17
    1930:	ldp	w14, w17, [x16]
    1934:	ldr	w16, [x16, #8]
    1938:	add	x15, x25, x15, lsl #4
    193c:	add	w12, w12, w17
    1940:	ldrh	w17, [x10, #76]
    1944:	add	w13, w13, w14
    1948:	add	w11, w11, w16
    194c:	ldp	w14, w16, [x15]
    1950:	ldr	w15, [x15, #8]
    1954:	add	x17, x25, x17, lsl #4
    1958:	add	w13, w13, w14
    195c:	ldrh	w14, [x10, #78]
    1960:	add	w12, w12, w16
    1964:	add	w11, w11, w15
    1968:	ldp	w16, w15, [x17]
    196c:	ldr	w17, [x17, #8]
    1970:	add	x14, x25, x14, lsl #4
    1974:	add	w13, w13, w16
    1978:	ldrh	w16, [x10, #80]
    197c:	add	w12, w12, w15
    1980:	add	w11, w11, w17
    1984:	ldp	w15, w17, [x14]
    1988:	ldr	w14, [x14, #8]
    198c:	add	x16, x25, x16, lsl #4
    1990:	add	w13, w13, w15
    1994:	add	w12, w12, w17
    1998:	ldrh	w17, [x10, #82]
    199c:	add	w11, w11, w14
    19a0:	ldp	w15, w14, [x16]
    19a4:	ldr	w16, [x16, #8]
    19a8:	add	x17, x25, x17, lsl #4
    19ac:	add	w13, w13, w15
    19b0:	ldrh	w15, [x10, #84]
    19b4:	add	w12, w12, w14
    19b8:	add	w11, w11, w16
    19bc:	ldp	w14, w16, [x17]
    19c0:	ldr	w17, [x17, #8]
    19c4:	add	x15, x25, x15, lsl #4
    19c8:	add	w13, w13, w14
    19cc:	ldrh	w14, [x10, #86]
    19d0:	add	w12, w12, w16
    19d4:	add	w11, w11, w17
    19d8:	ldp	w16, w17, [x15]
    19dc:	ldr	w15, [x15, #8]
    19e0:	add	x14, x25, x14, lsl #4
    19e4:	add	w12, w12, w17
    19e8:	ldrh	w17, [x10, #88]
    19ec:	add	w13, w13, w16
    19f0:	add	w11, w11, w15
    19f4:	ldp	w16, w15, [x14]
    19f8:	ldr	w14, [x14, #8]
    19fc:	add	x17, x25, x17, lsl #4
    1a00:	add	w13, w13, w16
    1a04:	ldrh	w16, [x10, #90]
    1a08:	add	w12, w12, w15
    1a0c:	add	w11, w11, w14
    1a10:	ldp	w15, w14, [x17]
    1a14:	ldr	w17, [x17, #8]
    1a18:	add	x16, x25, x16, lsl #4
    1a1c:	add	w13, w13, w15
    1a20:	ldrh	w15, [x10, #92]
    1a24:	add	w12, w12, w14
    1a28:	add	w11, w11, w17
    1a2c:	ldp	w14, w17, [x16]
    1a30:	ldr	w16, [x16, #8]
    1a34:	add	x15, x25, x15, lsl #4
    1a38:	add	w13, w13, w14
    1a3c:	add	w11, w11, w16
    1a40:	ldp	w14, w16, [x15]
    1a44:	add	w12, w12, w17
    1a48:	ldrh	w17, [x10, #94]
    1a4c:	ldrh	w10, [x10, #96]
    1a50:	add	w13, w13, w14
    1a54:	ldr	w14, [x15, #8]
    1a58:	add	x15, x25, x17, lsl #4
    1a5c:	add	w12, w12, w16
    1a60:	add	x10, x25, x10, lsl #4
    1a64:	add	w11, w11, w14
    1a68:	ldp	w16, w14, [x15]
    1a6c:	ldr	w15, [x15, #8]
    1a70:	ldr	x17, [x29, #8]
    1a74:	add	w13, w13, w16
    1a78:	ldrh	w16, [x18, x0, lsl #1]
    1a7c:	add	w12, w12, w14
    1a80:	add	w11, w11, w15
    1a84:	ldp	w14, w15, [x10]
    1a88:	add	x16, x25, x16, lsl #4
    1a8c:	ldr	w10, [x10, #8]
    1a90:	add	w13, w13, w14
    1a94:	add	w12, w12, w15
    1a98:	ldp	w14, w15, [x16]
    1a9c:	ldr	w16, [x16, #8]
    1aa0:	add	w10, w11, w10
    1aa4:	add	w11, w13, w14
    1aa8:	add	w12, w12, w15
    1aac:	add	w10, w10, w16
    1ab0:	sturh	w11, [x29, #-20]
    1ab4:	lsr	w11, w11, #16
    1ab8:	sturh	w12, [x29, #-16]
    1abc:	lsr	w12, w12, #16
    1ac0:	sturh	w10, [x29, #-12]
    1ac4:	lsr	w10, w10, #16
    1ac8:	sturh	w11, [x29, #-18]
    1acc:	sturh	w12, [x29, #-14]
    1ad0:	sturh	w10, [x29, #-10]
    1ad4:	b	1b34 <sendMTFValues+0xef4>
    1ad8:	ldr	x17, [x29, #8]
    1adc:	ldr	x18, [sp, #88]
    1ae0:	ldur	x24, [x29, #-80]
    1ae4:	ldr	w1, [sp, #96]
    1ae8:	ldr	x20, [sp, #72]
    1aec:	cmp	w8, w26
    1af0:	b.lt	1b34 <sendMTFValues+0xef4>  // b.tstop
    1af4:	sxtw	x10, w8
    1af8:	mov	x11, x26
    1afc:	ldrh	w12, [x18, x11, lsl #1]
    1b00:	sub	x13, x29, #0x14
    1b04:	mov	x14, x20
    1b08:	add	x12, x22, x12
    1b0c:	ldrb	w15, [x12]
    1b10:	ldrh	w16, [x13]
    1b14:	subs	x14, x14, #0x1
    1b18:	add	x12, x12, #0x102
    1b1c:	add	w15, w16, w15
    1b20:	strh	w15, [x13], #2
    1b24:	b.ne	1b0c <sendMTFValues+0xecc>  // b.any
    1b28:	cmp	x11, x10
    1b2c:	add	x11, x11, #0x1
    1b30:	b.lt	1afc <sendMTFValues+0xebc>  // b.tstop
    1b34:	mov	w11, #0xc9ff                	// #51711
    1b38:	mov	x12, xzr
    1b3c:	movk	w11, #0x3b9a, lsl #16
    1b40:	mov	w10, #0xffffffff            	// #-1
    1b44:	ldrh	w13, [x23, x12, lsl #1]
    1b48:	cmp	w11, w13
    1b4c:	csel	w10, w12, w10, gt
    1b50:	add	x12, x12, #0x1
    1b54:	csel	w11, w13, w11, gt
    1b58:	cmp	x20, x12
    1b5c:	b.ne	1b44 <sendMTFValues+0xf04>  // b.any
    1b60:	sbfiz	x12, x10, #2, #32
    1b64:	sub	x15, x29, #0x2c
    1b68:	ldr	w13, [x15, x12]
    1b6c:	add	w1, w11, w1
    1b70:	sxtw	x11, w10
    1b74:	add	x14, x17, x24
    1b78:	add	w13, w13, #0x1
    1b7c:	add	x24, x24, #0x1
    1b80:	str	w13, [x15, x12]
    1b84:	strb	w10, [x14, #1704]
    1b88:	tbnz	w9, #0, 10d8 <sendMTFValues+0x498>
    1b8c:	cmp	w8, w26
    1b90:	mov	w13, #0x408                 	// #1032
    1b94:	b.lt	14d0 <sendMTFValues+0x890>  // b.tstop
    1b98:	sxtw	x9, w8
    1b9c:	ldrh	w10, [x18, x26, lsl #1]
    1ba0:	madd	x12, x11, x13, x17
    1ba4:	cmp	x26, x9
    1ba8:	add	x26, x26, #0x1
    1bac:	add	x10, x12, x10, lsl #2
    1bb0:	ldr	w12, [x10, x21]
    1bb4:	add	w12, w12, #0x1
    1bb8:	str	w12, [x10, x21]
    1bbc:	b.lt	1b9c <sendMTFValues+0xf5c>  // b.tstop
    1bc0:	b	14d0 <sendMTFValues+0x890>
    1bc4:	adrp	x28, 0 <BZ2_bsInitWrite>
    1bc8:	add	x28, x28, #0x0
    1bcc:	ldr	x8, [x29, #8]
    1bd0:	ldr	w8, [x8, #656]
    1bd4:	cmp	w8, #0x3
    1bd8:	b.lt	1bf8 <sendMTFValues+0xfb8>  // b.tstop
    1bdc:	b	1c54 <sendMTFValues+0x1014>
    1be0:	mov	w24, wzr
    1be4:	mov	w1, wzr
    1be8:	ldr	x8, [x29, #8]
    1bec:	ldr	w8, [x8, #656]
    1bf0:	cmp	w8, #0x3
    1bf4:	b.ge	1c54 <sendMTFValues+0x1014>  // b.tcont
    1bf8:	ldr	x26, [sp, #32]
    1bfc:	ldr	x28, [sp, #48]
    1c00:	mov	x19, x20
    1c04:	mov	x27, x22
    1c08:	mov	w3, #0x11                  	// #17
    1c0c:	mov	x0, x27
    1c10:	mov	x1, x26
    1c14:	mov	w2, w28
    1c18:	bl	0 <BZ2_hbMakeCodeLengths>
    1c1c:	add	x27, x27, #0x102
    1c20:	subs	x19, x19, #0x1
    1c24:	add	x26, x26, #0x408
    1c28:	b.ne	1c08 <sendMTFValues+0xfc8>  // b.any
    1c2c:	ldr	w8, [sp, #64]
    1c30:	ldr	x19, [sp, #24]
    1c34:	ldr	x27, [sp]
    1c38:	adrp	x28, 0 <BZ2_bsInitWrite>
    1c3c:	add	w8, w8, #0x1
    1c40:	cmp	w8, #0x4
    1c44:	add	x28, x28, #0x0
    1c48:	str	w8, [sp, #64]
    1c4c:	b.ne	1020 <sendMTFValues+0x3e0>  // b.any
    1c50:	b	1cbc <sendMTFValues+0x107c>
    1c54:	ldr	w8, [sp, #64]
    1c58:	mov	x27, x24
    1c5c:	adrp	x24, 0 <stderr>
    1c60:	ldr	x0, [x24]
    1c64:	add	w2, w8, #0x1
    1c68:	add	w8, w1, #0x7
    1c6c:	cmp	w1, #0x0
    1c70:	csel	w8, w8, w1, lt  // lt = tstop
    1c74:	adrp	x1, 0 <BZ2_bsInitWrite>
    1c78:	asr	w3, w8, #3
    1c7c:	add	x1, x1, #0x0
    1c80:	bl	0 <fprintf>
    1c84:	ldr	x1, [x24]
    1c88:	sub	x19, x29, #0x2c
    1c8c:	mov	x26, x20
    1c90:	ldr	w2, [x19], #4
    1c94:	mov	x0, x1
    1c98:	mov	x1, x28
    1c9c:	bl	0 <fprintf>
    1ca0:	ldr	x1, [x24]
    1ca4:	subs	x26, x26, #0x1
    1ca8:	b.ne	1c90 <sendMTFValues+0x1050>  // b.any
    1cac:	mov	w0, #0xa                   	// #10
    1cb0:	bl	0 <fputc>
    1cb4:	mov	x24, x27
    1cb8:	b	1bf8 <sendMTFValues+0xfb8>
    1cbc:	mov	w8, #0x4653                	// #18003
    1cc0:	cmp	w24, w8
    1cc4:	b.lt	1cd0 <sendMTFValues+0x1090>  // b.tstop
    1cc8:	mov	w0, #0xbbb                 	// #3003
    1ccc:	bl	0 <BZ2_bz__AssertH__fail>
    1cd0:	mov	x8, xzr
    1cd4:	sub	x9, x29, #0x3c
    1cd8:	strb	w8, [x9, x8]
    1cdc:	add	x8, x8, #0x1
    1ce0:	cmp	x20, x8
    1ce4:	b.ne	1cd8 <sendMTFValues+0x1098>  // b.any
    1ce8:	ldr	x17, [sp, #56]
    1cec:	cmp	w24, #0x1
    1cf0:	b.lt	1d6c <sendMTFValues+0x112c>  // b.tstop
    1cf4:	ldurb	w11, [x29, #-60]
    1cf8:	sub	x10, x29, #0x3c
    1cfc:	mov	x8, xzr
    1d00:	mov	w9, w24
    1d04:	orr	x10, x10, #0x1
    1d08:	mov	w12, #0x4cfa                	// #19706
    1d0c:	b	1d24 <sendMTFValues+0x10e4>
    1d10:	mov	w15, wzr
    1d14:	add	x8, x8, #0x1
    1d18:	cmp	x8, x9
    1d1c:	strb	w15, [x13, x12]
    1d20:	b.eq	1d68 <sendMTFValues+0x1128>  // b.none
    1d24:	ldr	x13, [x29, #8]
    1d28:	add	x13, x13, x8
    1d2c:	ldrb	w14, [x13, #1704]
    1d30:	cmp	w14, w11, uxtb
    1d34:	b.eq	1d10 <sendMTFValues+0x10d0>  // b.none
    1d38:	mov	x15, xzr
    1d3c:	ldrb	w16, [x10, x15]
    1d40:	strb	w11, [x10, x15]
    1d44:	add	x15, x15, #0x1
    1d48:	cmp	w14, w16
    1d4c:	mov	w11, w16
    1d50:	b.ne	1d3c <sendMTFValues+0x10fc>  // b.any
    1d54:	mov	w11, w14
    1d58:	add	x8, x8, #0x1
    1d5c:	cmp	x8, x9
    1d60:	strb	w15, [x13, x12]
    1d64:	b.ne	1d24 <sendMTFValues+0x10e4>  // b.any
    1d68:	sturb	w11, [x29, #-60]
    1d6c:	cmn	w19, #0x2
    1d70:	stur	x24, [x29, #-80]
    1d74:	b.le	1eb0 <sendMTFValues+0x1270>
    1d78:	ldr	x9, [x29, #8]
    1d7c:	cmp	x17, #0x1
    1d80:	mov	w8, #0x934d                	// #37709
    1d84:	mov	w19, #0x934c                	// #37708
    1d88:	csinc	x27, x17, xzr, gt
    1d8c:	mov	x23, xzr
    1d90:	mov	w28, #0x408                 	// #1032
    1d94:	add	x24, x9, x8
    1d98:	add	x25, x9, x19
    1d9c:	and	x26, x27, #0x7ffffffffffffffe
    1da0:	b	1dec <sendMTFValues+0x11ac>
    1da4:	cmp	w22, #0x0
    1da8:	b.le	1ea4 <sendMTFValues+0x1264>
    1dac:	ldr	x9, [x29, #8]
    1db0:	mov	w10, #0x102                 	// #258
    1db4:	mov	w2, w22
    1db8:	mov	w3, w21
    1dbc:	madd	x8, x23, x28, x9
    1dc0:	madd	x9, x23, x10, x9
    1dc4:	mov	w10, #0x9958                	// #39256
    1dc8:	add	x0, x8, x10
    1dcc:	add	x1, x9, x19
    1dd0:	ldr	x4, [sp, #48]
    1dd4:	bl	0 <BZ2_hbAssignCodes>
    1dd8:	add	x23, x23, #0x1
    1ddc:	add	x24, x24, #0x102
    1de0:	cmp	x23, x20
    1de4:	add	x25, x25, #0x102
    1de8:	b.eq	1ef4 <sendMTFValues+0x12b4>  // b.none
    1dec:	cmp	x27, #0x2
    1df0:	b.cs	1e08 <sendMTFValues+0x11c8>  // b.hs, b.nlast
    1df4:	ldr	x10, [sp, #56]
    1df8:	mov	x8, xzr
    1dfc:	mov	w21, wzr
    1e00:	mov	w22, #0x20                  	// #32
    1e04:	b	1e70 <sendMTFValues+0x1230>
    1e08:	mov	w9, wzr
    1e0c:	mov	w10, wzr
    1e10:	mov	w8, #0x20                  	// #32
    1e14:	mov	x12, x26
    1e18:	mov	x13, x24
    1e1c:	mov	w11, #0x20                  	// #32
    1e20:	ldurb	w14, [x13, #-1]
    1e24:	ldrb	w15, [x13], #2
    1e28:	cmp	w9, w14
    1e2c:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    1e30:	cmp	w10, w15
    1e34:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    1e38:	cmp	w8, w14
    1e3c:	csel	w8, w14, w8, gt
    1e40:	cmp	w11, w15
    1e44:	csel	w11, w15, w11, gt
    1e48:	subs	x12, x12, #0x2
    1e4c:	b.ne	1e20 <sendMTFValues+0x11e0>  // b.any
    1e50:	cmp	w9, w10
    1e54:	csel	w21, w9, w10, hi  // hi = pmore
    1e58:	ldr	x10, [sp, #56]
    1e5c:	cmp	w8, w11
    1e60:	csel	w22, w8, w11, lt  // lt = tstop
    1e64:	cmp	x27, x26
    1e68:	mov	x8, x26
    1e6c:	b.eq	1e90 <sendMTFValues+0x1250>  // b.none
    1e70:	ldrb	w9, [x25, x8]
    1e74:	add	x8, x8, #0x1
    1e78:	cmp	w21, w9
    1e7c:	csel	w21, w9, w21, cc  // cc = lo, ul, last
    1e80:	cmp	w22, w9
    1e84:	csel	w22, w9, w22, gt
    1e88:	cmp	x8, x10
    1e8c:	b.lt	1e70 <sendMTFValues+0x1230>  // b.tstop
    1e90:	cmp	w21, #0x11
    1e94:	b.le	1da4 <sendMTFValues+0x1164>
    1e98:	mov	w0, #0xbbc                 	// #3004
    1e9c:	bl	0 <BZ2_bz__AssertH__fail>
    1ea0:	b	1da4 <sendMTFValues+0x1164>
    1ea4:	mov	w0, #0xbbd                 	// #3005
    1ea8:	bl	0 <BZ2_bz__AssertH__fail>
    1eac:	b	1dac <sendMTFValues+0x116c>
    1eb0:	ldr	x10, [x29, #8]
    1eb4:	ldr	x23, [sp, #48]
    1eb8:	mov	w8, #0x9958                	// #39256
    1ebc:	mov	w9, #0x934c                	// #37708
    1ec0:	add	x21, x10, x8
    1ec4:	add	x22, x10, x9
    1ec8:	mov	x19, x20
    1ecc:	mov	w2, #0x20                  	// #32
    1ed0:	mov	x0, x21
    1ed4:	mov	x1, x22
    1ed8:	mov	w3, wzr
    1edc:	mov	w4, w23
    1ee0:	bl	0 <BZ2_hbAssignCodes>
    1ee4:	add	x21, x21, #0x408
    1ee8:	subs	x19, x19, #0x1
    1eec:	add	x22, x22, #0x102
    1ef0:	b.ne	1ecc <sendMTFValues+0x128c>  // b.any
    1ef4:	ldr	x9, [x29, #8]
    1ef8:	mov	x8, xzr
    1efc:	sub	x10, x29, #0x3c
    1f00:	add	x9, x9, #0x8f
    1f04:	strb	wzr, [x10, x8]
    1f08:	ldurb	w11, [x9, #-15]
    1f0c:	cmp	w11, #0x0
    1f10:	cset	w12, ne  // ne = any
    1f14:	strb	w12, [x10, x8]
    1f18:	ldurb	w12, [x9, #-14]
    1f1c:	orr	w11, w11, w12
    1f20:	tst	w11, #0xff
    1f24:	cset	w12, ne  // ne = any
    1f28:	strb	w12, [x10, x8]
    1f2c:	ldurb	w12, [x9, #-13]
    1f30:	orr	w11, w11, w12
    1f34:	tst	w11, #0xff
    1f38:	cset	w12, ne  // ne = any
    1f3c:	strb	w12, [x10, x8]
    1f40:	ldurb	w12, [x9, #-12]
    1f44:	orr	w11, w11, w12
    1f48:	tst	w11, #0xff
    1f4c:	cset	w12, ne  // ne = any
    1f50:	strb	w12, [x10, x8]
    1f54:	ldurb	w12, [x9, #-11]
    1f58:	orr	w11, w11, w12
    1f5c:	tst	w11, #0xff
    1f60:	cset	w12, ne  // ne = any
    1f64:	strb	w12, [x10, x8]
    1f68:	ldurb	w12, [x9, #-10]
    1f6c:	orr	w11, w11, w12
    1f70:	tst	w11, #0xff
    1f74:	cset	w12, ne  // ne = any
    1f78:	strb	w12, [x10, x8]
    1f7c:	ldurb	w12, [x9, #-9]
    1f80:	orr	w11, w11, w12
    1f84:	tst	w11, #0xff
    1f88:	cset	w12, ne  // ne = any
    1f8c:	strb	w12, [x10, x8]
    1f90:	ldurb	w12, [x9, #-8]
    1f94:	orr	w11, w11, w12
    1f98:	tst	w11, #0xff
    1f9c:	cset	w12, ne  // ne = any
    1fa0:	strb	w12, [x10, x8]
    1fa4:	ldurb	w12, [x9, #-7]
    1fa8:	orr	w11, w11, w12
    1fac:	tst	w11, #0xff
    1fb0:	cset	w12, ne  // ne = any
    1fb4:	strb	w12, [x10, x8]
    1fb8:	ldurb	w12, [x9, #-6]
    1fbc:	orr	w11, w11, w12
    1fc0:	tst	w11, #0xff
    1fc4:	cset	w12, ne  // ne = any
    1fc8:	strb	w12, [x10, x8]
    1fcc:	ldurb	w12, [x9, #-5]
    1fd0:	orr	w11, w11, w12
    1fd4:	tst	w11, #0xff
    1fd8:	cset	w12, ne  // ne = any
    1fdc:	strb	w12, [x10, x8]
    1fe0:	ldurb	w12, [x9, #-4]
    1fe4:	orr	w11, w11, w12
    1fe8:	tst	w11, #0xff
    1fec:	cset	w12, ne  // ne = any
    1ff0:	strb	w12, [x10, x8]
    1ff4:	ldurb	w12, [x9, #-3]
    1ff8:	orr	w11, w11, w12
    1ffc:	tst	w11, #0xff
    2000:	cset	w12, ne  // ne = any
    2004:	strb	w12, [x10, x8]
    2008:	ldurb	w12, [x9, #-2]
    200c:	orr	w11, w11, w12
    2010:	tst	w11, #0xff
    2014:	cset	w12, ne  // ne = any
    2018:	strb	w12, [x10, x8]
    201c:	ldurb	w12, [x9, #-1]
    2020:	orr	w11, w11, w12
    2024:	tst	w11, #0xff
    2028:	cset	w12, ne  // ne = any
    202c:	strb	w12, [x10, x8]
    2030:	ldrb	w12, [x9], #16
    2034:	orr	w11, w11, w12
    2038:	tst	w11, #0xff
    203c:	cset	w11, ne  // ne = any
    2040:	strb	w11, [x10, x8]
    2044:	add	x8, x8, #0x1
    2048:	cmp	x8, #0x10
    204c:	b.ne	1f04 <sendMTFValues+0x12c4>  // b.any
    2050:	ldr	x21, [x29, #8]
    2054:	mov	x12, xzr
    2058:	sub	x13, x29, #0x3c
    205c:	mov	w14, #0x80000000            	// #-2147483648
    2060:	ldr	w8, [x21, #116]!
    2064:	adrp	x19, 0 <stderr>
    2068:	ldr	w10, [x21, #528]
    206c:	ldr	w11, [x21, #524]
    2070:	add	x22, x21, #0x210
    2074:	add	x24, x21, #0x20c
    2078:	sub	x25, x21, #0x24
    207c:	mov	w9, w8
    2080:	b	20a4 <sendMTFValues+0x1464>
    2084:	lsr	w15, w14, w10
    2088:	orr	w11, w15, w11
    208c:	add	x12, x12, #0x1
    2090:	add	w10, w10, #0x1
    2094:	cmp	x12, #0x10
    2098:	str	w11, [x24]
    209c:	str	w10, [x22]
    20a0:	b.eq	2134 <sendMTFValues+0x14f4>  // b.none
    20a4:	ldrb	w15, [x13, x12]
    20a8:	cbz	w15, 20f0 <sendMTFValues+0x14b0>
    20ac:	cmp	w10, #0x8
    20b0:	b.lt	2084 <sendMTFValues+0x1444>  // b.tstop
    20b4:	ldr	x10, [x25]
    20b8:	lsr	w11, w11, #24
    20bc:	strb	w11, [x10, w9, sxtw]
    20c0:	ldr	w9, [x21]
    20c4:	add	w9, w9, #0x1
    20c8:	str	w9, [x21]
    20cc:	ldr	w10, [x24]
    20d0:	lsl	w11, w10, #8
    20d4:	str	w11, [x24]
    20d8:	ldr	w15, [x22]
    20dc:	sub	w10, w15, #0x8
    20e0:	cmp	w15, #0xf
    20e4:	str	w10, [x22]
    20e8:	b.gt	20b4 <sendMTFValues+0x1474>
    20ec:	b	2084 <sendMTFValues+0x1444>
    20f0:	cmp	w10, #0x8
    20f4:	b.lt	208c <sendMTFValues+0x144c>  // b.tstop
    20f8:	ldr	x10, [x25]
    20fc:	lsr	w11, w11, #24
    2100:	strb	w11, [x10, w9, sxtw]
    2104:	ldr	w9, [x21]
    2108:	add	w9, w9, #0x1
    210c:	str	w9, [x21]
    2110:	ldr	w10, [x24]
    2114:	lsl	w11, w10, #8
    2118:	str	w11, [x24]
    211c:	ldr	w15, [x22]
    2120:	sub	w10, w15, #0x8
    2124:	cmp	w15, #0xf
    2128:	str	w10, [x22]
    212c:	b.gt	20f8 <sendMTFValues+0x14b8>
    2130:	b	208c <sendMTFValues+0x144c>
    2134:	ldr	x6, [sp, #56]
    2138:	ldr	x18, [x29, #8]
    213c:	mov	x12, xzr
    2140:	sub	x13, x29, #0x3c
    2144:	mov	w14, #0x80000000            	// #-2147483648
    2148:	b	2158 <sendMTFValues+0x1518>
    214c:	add	x12, x12, #0x1
    2150:	cmp	x12, #0x10
    2154:	b.eq	2224 <sendMTFValues+0x15e4>  // b.none
    2158:	ldrb	w15, [x13, x12]
    215c:	cbz	w15, 214c <sendMTFValues+0x150c>
    2160:	mov	x15, xzr
    2164:	lsl	x16, x12, #4
    2168:	b	218c <sendMTFValues+0x154c>
    216c:	lsr	w17, w14, w10
    2170:	orr	w11, w17, w11
    2174:	add	x15, x15, #0x1
    2178:	add	w10, w10, #0x1
    217c:	cmp	x15, #0x10
    2180:	str	w11, [x24]
    2184:	str	w10, [x22]
    2188:	b.eq	214c <sendMTFValues+0x150c>  // b.none
    218c:	add	x17, x15, x16
    2190:	add	x17, x18, x17
    2194:	ldrb	w17, [x17, #128]
    2198:	cbz	w17, 21e0 <sendMTFValues+0x15a0>
    219c:	cmp	w10, #0x8
    21a0:	b.lt	216c <sendMTFValues+0x152c>  // b.tstop
    21a4:	ldr	x10, [x25]
    21a8:	lsr	w11, w11, #24
    21ac:	strb	w11, [x10, w9, sxtw]
    21b0:	ldr	w9, [x21]
    21b4:	add	w9, w9, #0x1
    21b8:	str	w9, [x21]
    21bc:	ldr	w10, [x24]
    21c0:	lsl	w11, w10, #8
    21c4:	str	w11, [x24]
    21c8:	ldr	w17, [x22]
    21cc:	sub	w10, w17, #0x8
    21d0:	cmp	w17, #0xf
    21d4:	str	w10, [x22]
    21d8:	b.gt	21a4 <sendMTFValues+0x1564>
    21dc:	b	216c <sendMTFValues+0x152c>
    21e0:	cmp	w10, #0x8
    21e4:	b.lt	2174 <sendMTFValues+0x1534>  // b.tstop
    21e8:	ldr	x10, [x25]
    21ec:	lsr	w11, w11, #24
    21f0:	strb	w11, [x10, w9, sxtw]
    21f4:	ldr	w9, [x21]
    21f8:	add	w9, w9, #0x1
    21fc:	str	w9, [x21]
    2200:	ldr	w10, [x24]
    2204:	lsl	w11, w10, #8
    2208:	str	w11, [x24]
    220c:	ldr	w17, [x22]
    2210:	sub	w10, w17, #0x8
    2214:	cmp	w17, #0xf
    2218:	str	w10, [x22]
    221c:	b.gt	21e8 <sendMTFValues+0x15a8>
    2220:	b	2174 <sendMTFValues+0x1534>
    2224:	ldr	x11, [x29, #8]
    2228:	ldr	w11, [x11, #656]
    222c:	cmp	w11, #0x3
    2230:	b.ge	40a4 <sendMTFValues+0x3464>  // b.tcont
    2234:	ldr	w11, [x24]
    2238:	mov	w8, w9
    223c:	cmp	w10, #0x8
    2240:	b.lt	227c <sendMTFValues+0x163c>  // b.tstop
    2244:	ldr	x10, [x25]
    2248:	lsr	w11, w11, #24
    224c:	strb	w11, [x10, w8, sxtw]
    2250:	ldr	w8, [x21]
    2254:	add	w8, w8, #0x1
    2258:	str	w8, [x21]
    225c:	ldr	w10, [x24]
    2260:	lsl	w11, w10, #8
    2264:	str	w11, [x24]
    2268:	ldr	w12, [x22]
    226c:	sub	w10, w12, #0x8
    2270:	cmp	w12, #0xf
    2274:	str	w10, [x22]
    2278:	b.gt	2244 <sendMTFValues+0x1604>
    227c:	mov	w13, #0x1d                  	// #29
    2280:	add	w12, w10, #0x3
    2284:	cmp	w10, #0x5
    2288:	sub	w10, w13, w10
    228c:	lsl	w10, w20, w10
    2290:	orr	w10, w10, w11
    2294:	str	w10, [x24]
    2298:	str	w12, [x22]
    229c:	b.lt	22d8 <sendMTFValues+0x1698>  // b.tstop
    22a0:	ldr	x11, [x25]
    22a4:	lsr	w10, w10, #24
    22a8:	strb	w10, [x11, w8, sxtw]
    22ac:	ldr	w8, [x21]
    22b0:	add	w8, w8, #0x1
    22b4:	str	w8, [x21]
    22b8:	ldr	w10, [x24]
    22bc:	lsl	w10, w10, #8
    22c0:	str	w10, [x24]
    22c4:	ldr	w11, [x22]
    22c8:	sub	w12, w11, #0x8
    22cc:	cmp	w11, #0xf
    22d0:	str	w12, [x22]
    22d4:	b.gt	22a0 <sendMTFValues+0x1660>
    22d8:	ldur	x14, [x29, #-80]
    22dc:	mov	w13, #0x11                  	// #17
    22e0:	add	w11, w12, #0xf
    22e4:	sub	w12, w13, w12
    22e8:	lsl	w12, w14, w12
    22ec:	cmp	w14, #0x1
    22f0:	orr	w10, w12, w10
    22f4:	str	w10, [x24]
    22f8:	str	w11, [x22]
    22fc:	b.lt	2404 <sendMTFValues+0x17c4>  // b.tstop
    2300:	mov	x12, xzr
    2304:	mov	w13, w14
    2308:	mov	w14, #0x4cfa                	// #19706
    230c:	mov	w15, #0x80000000            	// #-2147483648
    2310:	b	232c <sendMTFValues+0x16ec>
    2314:	add	x12, x12, #0x1
    2318:	add	w11, w18, #0x1
    231c:	cmp	x12, x13
    2320:	str	w10, [x24]
    2324:	str	w11, [x22]
    2328:	b.eq	2404 <sendMTFValues+0x17c4>  // b.none
    232c:	ldr	x16, [x29, #8]
    2330:	cmp	w11, #0x7
    2334:	cset	w0, gt
    2338:	add	x16, x16, x12
    233c:	add	x16, x16, x14
    2340:	ldrb	w17, [x16]
    2344:	cbz	w17, 23c0 <sendMTFValues+0x1780>
    2348:	mov	w17, wzr
    234c:	b	2380 <sendMTFValues+0x1740>
    2350:	lsr	w0, w15, w11
    2354:	add	w18, w11, #0x1
    2358:	orr	w10, w0, w10
    235c:	str	w10, [x24]
    2360:	str	w18, [x22]
    2364:	ldrb	w1, [x16]
    2368:	add	w17, w17, #0x1
    236c:	cmp	w11, #0x6
    2370:	cset	w0, gt
    2374:	cmp	w17, w1
    2378:	mov	w11, w18
    237c:	b.cs	23c4 <sendMTFValues+0x1784>  // b.hs, b.nlast
    2380:	tbz	w0, #0, 2350 <sendMTFValues+0x1710>
    2384:	ldr	x11, [x25]
    2388:	lsr	w10, w10, #24
    238c:	strb	w10, [x11, w8, sxtw]
    2390:	ldr	w8, [x21]
    2394:	add	w8, w8, #0x1
    2398:	str	w8, [x21]
    239c:	ldr	w10, [x24]
    23a0:	lsl	w10, w10, #8
    23a4:	str	w10, [x24]
    23a8:	ldr	w18, [x22]
    23ac:	sub	w11, w18, #0x8
    23b0:	cmp	w18, #0xf
    23b4:	str	w11, [x22]
    23b8:	b.gt	2384 <sendMTFValues+0x1744>
    23bc:	b	2350 <sendMTFValues+0x1710>
    23c0:	mov	w18, w11
    23c4:	cbz	w0, 2314 <sendMTFValues+0x16d4>
    23c8:	ldr	x11, [x25]
    23cc:	lsr	w10, w10, #24
    23d0:	strb	w10, [x11, w8, sxtw]
    23d4:	ldr	w8, [x21]
    23d8:	add	w8, w8, #0x1
    23dc:	str	w8, [x21]
    23e0:	ldr	w10, [x24]
    23e4:	lsl	w10, w10, #8
    23e8:	str	w10, [x24]
    23ec:	ldr	w11, [x22]
    23f0:	sub	w18, w11, #0x8
    23f4:	cmp	w11, #0xf
    23f8:	str	w18, [x22]
    23fc:	b.gt	23c8 <sendMTFValues+0x1788>
    2400:	b	2314 <sendMTFValues+0x16d4>
    2404:	ldr	x12, [x29, #8]
    2408:	ldr	w12, [x12, #656]
    240c:	cmp	w12, #0x3
    2410:	b.ge	40d8 <sendMTFValues+0x3498>  // b.tcont
    2414:	ldr	x5, [sp, #24]
    2418:	mov	x9, xzr
    241c:	mov	w12, #0x102                 	// #258
    2420:	mov	w13, #0x934c                	// #37708
    2424:	mov	w14, #0x1b                  	// #27
    2428:	mov	w15, #0x1e                  	// #30
    242c:	mov	w16, #0x2                   	// #2
    2430:	mov	w17, #0x3                   	// #3
    2434:	mov	w26, w8
    2438:	b	2448 <sendMTFValues+0x1808>
    243c:	add	x9, x9, #0x1
    2440:	cmp	x9, x20
    2444:	b.eq	261c <sendMTFValues+0x19dc>  // b.none
    2448:	ldr	x18, [x29, #8]
    244c:	cmp	w11, #0x8
    2450:	madd	x18, x9, x12, x18
    2454:	ldrb	w18, [x18, x13]
    2458:	b.lt	2494 <sendMTFValues+0x1854>  // b.tstop
    245c:	ldr	x11, [x25]
    2460:	lsr	w10, w10, #24
    2464:	strb	w10, [x11, w26, sxtw]
    2468:	ldr	w10, [x21]
    246c:	add	w26, w10, #0x1
    2470:	str	w26, [x21]
    2474:	ldr	w10, [x24]
    2478:	lsl	w10, w10, #8
    247c:	str	w10, [x24]
    2480:	ldr	w0, [x22]
    2484:	sub	w11, w0, #0x8
    2488:	cmp	w0, #0xf
    248c:	str	w11, [x22]
    2490:	b.gt	245c <sendMTFValues+0x181c>
    2494:	sub	w0, w14, w11
    2498:	lsl	w0, w18, w0
    249c:	add	w11, w11, #0x5
    24a0:	cmn	w5, #0x1
    24a4:	orr	w10, w0, w10
    24a8:	str	w10, [x24]
    24ac:	str	w11, [x22]
    24b0:	b.lt	243c <sendMTFValues+0x17fc>  // b.tstop
    24b4:	mov	x0, xzr
    24b8:	b	24d4 <sendMTFValues+0x1894>
    24bc:	add	x0, x0, #0x1
    24c0:	add	w11, w11, #0x1
    24c4:	cmp	x0, x6
    24c8:	str	w10, [x24]
    24cc:	str	w11, [x22]
    24d0:	b.ge	243c <sendMTFValues+0x17fc>  // b.tcont
    24d4:	ldr	x1, [x29, #8]
    24d8:	madd	x1, x9, x12, x1
    24dc:	add	x1, x1, x0
    24e0:	add	x1, x1, x13
    24e4:	ldrb	w2, [x1]
    24e8:	b	250c <sendMTFValues+0x18cc>
    24ec:	sub	w2, w15, w11
    24f0:	lsl	w2, w16, w2
    24f4:	add	w11, w11, #0x2
    24f8:	orr	w10, w2, w10
    24fc:	str	w10, [x24]
    2500:	str	w11, [x22]
    2504:	ldrb	w2, [x1]
    2508:	add	w18, w18, #0x1
    250c:	cmp	w18, w2
    2510:	b.ge	2558 <sendMTFValues+0x1918>  // b.tcont
    2514:	cmp	w11, #0x8
    2518:	b.lt	24ec <sendMTFValues+0x18ac>  // b.tstop
    251c:	ldr	x11, [x25]
    2520:	lsr	w10, w10, #24
    2524:	strb	w10, [x11, w26, sxtw]
    2528:	ldr	w10, [x21]
    252c:	add	w26, w10, #0x1
    2530:	str	w26, [x21]
    2534:	ldr	w10, [x24]
    2538:	lsl	w10, w10, #8
    253c:	str	w10, [x24]
    2540:	ldr	w2, [x22]
    2544:	sub	w11, w2, #0x8
    2548:	cmp	w2, #0xf
    254c:	str	w11, [x22]
    2550:	b.gt	251c <sendMTFValues+0x18dc>
    2554:	b	24ec <sendMTFValues+0x18ac>
    2558:	cmp	w11, #0x7
    255c:	cset	w3, gt
    2560:	cmp	w18, w2
    2564:	b.gt	25dc <sendMTFValues+0x199c>
    2568:	cbz	w3, 24bc <sendMTFValues+0x187c>
    256c:	ldr	x11, [x25]
    2570:	lsr	w10, w10, #24
    2574:	strb	w10, [x11, w26, sxtw]
    2578:	ldr	w10, [x21]
    257c:	add	w26, w10, #0x1
    2580:	str	w26, [x21]
    2584:	ldr	w10, [x24]
    2588:	lsl	w10, w10, #8
    258c:	str	w10, [x24]
    2590:	ldr	w1, [x22]
    2594:	sub	w11, w1, #0x8
    2598:	cmp	w1, #0xf
    259c:	str	w11, [x22]
    25a0:	b.gt	256c <sendMTFValues+0x192c>
    25a4:	b	24bc <sendMTFValues+0x187c>
    25a8:	sub	w2, w15, w11
    25ac:	lsl	w2, w17, w2
    25b0:	add	w4, w11, #0x2
    25b4:	orr	w10, w2, w10
    25b8:	str	w10, [x24]
    25bc:	str	w4, [x22]
    25c0:	ldrb	w2, [x1]
    25c4:	cmp	w11, #0x5
    25c8:	sub	w18, w18, #0x1
    25cc:	cset	w3, gt
    25d0:	cmp	w18, w2
    25d4:	mov	w11, w4
    25d8:	b.le	2568 <sendMTFValues+0x1928>
    25dc:	tbz	w3, #0, 25a8 <sendMTFValues+0x1968>
    25e0:	ldr	x11, [x25]
    25e4:	lsr	w10, w10, #24
    25e8:	strb	w10, [x11, w26, sxtw]
    25ec:	ldr	w10, [x21]
    25f0:	add	w26, w10, #0x1
    25f4:	str	w26, [x21]
    25f8:	ldr	w10, [x24]
    25fc:	lsl	w10, w10, #8
    2600:	str	w10, [x24]
    2604:	ldr	w2, [x22]
    2608:	sub	w11, w2, #0x8
    260c:	cmp	w2, #0xf
    2610:	str	w11, [x22]
    2614:	b.gt	25e0 <sendMTFValues+0x19a0>
    2618:	b	25a8 <sendMTFValues+0x1968>
    261c:	ldr	x9, [x29, #8]
    2620:	ldr	w9, [x9, #656]
    2624:	cmp	w9, #0x3
    2628:	b.ge	4100 <sendMTFValues+0x34c0>  // b.tcont
    262c:	ldr	x8, [x29, #8]
    2630:	ldr	x16, [sp, #88]
    2634:	ldr	w8, [x8, #668]
    2638:	cmp	w8, #0x1
    263c:	b.lt	4034 <sendMTFValues+0x33f4>  // b.tstop
    2640:	mov	x17, xzr
    2644:	mov	w9, wzr
    2648:	mov	w18, #0x102                 	// #258
    264c:	mov	w0, #0x934c                	// #37708
    2650:	mov	w1, #0x408                 	// #1032
    2654:	mov	w2, #0x9958                	// #39256
    2658:	b	268c <sendMTFValues+0x1a4c>
    265c:	add	w10, w11, w10
    2660:	neg	w11, w10
    2664:	lsl	w8, w8, w11
    2668:	orr	w8, w8, w9
    266c:	str	w8, [x24]
    2670:	str	w10, [x22]
    2674:	ldr	x8, [x29, #8]
    2678:	add	w9, w28, #0x1
    267c:	add	x17, x17, #0x1
    2680:	ldr	w8, [x8, #668]
    2684:	cmp	w9, w8
    2688:	b.ge	4038 <sendMTFValues+0x33f8>  // b.tcont
    268c:	sxtw	x27, w9
    2690:	ldr	x9, [x29, #8]
    2694:	add	x4, x27, #0x31
    2698:	sub	w10, w8, #0x1
    269c:	cmp	w4, w8
    26a0:	add	x19, x9, x17
    26a4:	ldrb	w9, [x19, #1704]
    26a8:	csel	w28, w4, w10, lt  // lt = tstop
    26ac:	cmp	w20, w9
    26b0:	b.hi	26e4 <sendMTFValues+0x1aa4>  // b.pmore
    26b4:	mov	w0, #0xbbe                 	// #3006
    26b8:	mov	x23, x17
    26bc:	str	x27, [sp, #96]
    26c0:	mov	x27, x4
    26c4:	bl	0 <BZ2_bz__AssertH__fail>
    26c8:	mov	x4, x27
    26cc:	ldp	x16, x27, [sp, #88]
    26d0:	mov	w2, #0x9958                	// #39256
    26d4:	mov	w1, #0x408                 	// #1032
    26d8:	mov	w0, #0x934c                	// #37708
    26dc:	mov	w18, #0x102                 	// #258
    26e0:	mov	x17, x23
    26e4:	cmp	w20, #0x6
    26e8:	add	x8, x19, #0x6a8
    26ec:	b.ne	3f8c <sendMTFValues+0x334c>  // b.any
    26f0:	sub	w9, w28, w27
    26f4:	cmp	w9, #0x31
    26f8:	b.ne	3f8c <sendMTFValues+0x334c>  // b.any
    26fc:	ldrb	w8, [x8]
    2700:	ldr	x13, [x29, #8]
    2704:	ldrh	w9, [x16, x27, lsl #1]
    2708:	madd	x10, x8, x18, x13
    270c:	madd	x11, x8, x1, x13
    2710:	ldr	w12, [x13, #644]
    2714:	add	x10, x10, x9
    2718:	add	x11, x11, x9, lsl #2
    271c:	ldrb	w9, [x10, x0]
    2720:	ldr	w10, [x11, x2]
    2724:	ldr	w11, [x13, #640]
    2728:	cmp	w12, #0x8
    272c:	b.lt	276c <sendMTFValues+0x1b2c>  // b.tstop
    2730:	ldr	w13, [x21]
    2734:	ldr	x12, [x25]
    2738:	lsr	w11, w11, #24
    273c:	strb	w11, [x12, w13, sxtw]
    2740:	ldr	w11, [x21]
    2744:	add	w13, w11, #0x1
    2748:	str	w13, [x21]
    274c:	ldr	w11, [x24]
    2750:	lsl	w11, w11, #8
    2754:	str	w11, [x24]
    2758:	ldr	w14, [x22]
    275c:	sub	w12, w14, #0x8
    2760:	cmp	w14, #0xf
    2764:	str	w12, [x22]
    2768:	b.gt	2734 <sendMTFValues+0x1af4>
    276c:	add	w13, w12, w9
    2770:	ldr	x14, [x29, #8]
    2774:	neg	w12, w13
    2778:	lsl	w10, w10, w12
    277c:	orr	w10, w10, w11
    2780:	add	x9, x16, x27, lsl #1
    2784:	str	w13, [x14, #644]
    2788:	str	w10, [x14, #640]
    278c:	ldrh	w11, [x9, #2]
    2790:	madd	x12, x8, x18, x14
    2794:	madd	x14, x8, x1, x14
    2798:	cmp	w13, #0x8
    279c:	add	x12, x12, x11
    27a0:	add	x11, x14, x11, lsl #2
    27a4:	ldrb	w12, [x12, x0]
    27a8:	ldr	w11, [x11, x2]
    27ac:	b.lt	27ec <sendMTFValues+0x1bac>  // b.tstop
    27b0:	ldr	w14, [x21]
    27b4:	ldr	x13, [x25]
    27b8:	lsr	w10, w10, #24
    27bc:	strb	w10, [x13, w14, sxtw]
    27c0:	ldr	w10, [x21]
    27c4:	add	w14, w10, #0x1
    27c8:	str	w14, [x21]
    27cc:	ldr	w10, [x24]
    27d0:	lsl	w10, w10, #8
    27d4:	str	w10, [x24]
    27d8:	ldr	w15, [x22]
    27dc:	sub	w13, w15, #0x8
    27e0:	cmp	w15, #0xf
    27e4:	str	w13, [x22]
    27e8:	b.gt	27b4 <sendMTFValues+0x1b74>
    27ec:	add	w12, w13, w12
    27f0:	ldr	x14, [x29, #8]
    27f4:	neg	w13, w12
    27f8:	lsl	w11, w11, w13
    27fc:	orr	w10, w11, w10
    2800:	str	w12, [x14, #644]
    2804:	str	w10, [x14, #640]
    2808:	ldrh	w9, [x9, #4]
    280c:	madd	x11, x8, x18, x14
    2810:	madd	x13, x8, x1, x14
    2814:	cmp	w12, #0x8
    2818:	add	x11, x11, x9
    281c:	add	x13, x13, x9, lsl #2
    2820:	ldrb	w9, [x11, x0]
    2824:	ldr	w11, [x13, x2]
    2828:	b.lt	2868 <sendMTFValues+0x1c28>  // b.tstop
    282c:	ldr	w13, [x21]
    2830:	ldr	x12, [x25]
    2834:	lsr	w10, w10, #24
    2838:	strb	w10, [x12, w13, sxtw]
    283c:	ldr	w10, [x21]
    2840:	add	w13, w10, #0x1
    2844:	str	w13, [x21]
    2848:	ldr	w10, [x24]
    284c:	lsl	w10, w10, #8
    2850:	str	w10, [x24]
    2854:	ldr	w14, [x22]
    2858:	sub	w12, w14, #0x8
    285c:	cmp	w14, #0xf
    2860:	str	w12, [x22]
    2864:	b.gt	2830 <sendMTFValues+0x1bf0>
    2868:	add	w13, w12, w9
    286c:	ldr	x14, [x29, #8]
    2870:	neg	w12, w13
    2874:	lsl	w11, w11, w12
    2878:	orr	w10, w11, w10
    287c:	add	x9, x16, x27, lsl #1
    2880:	str	w13, [x14, #644]
    2884:	str	w10, [x14, #640]
    2888:	ldrh	w11, [x9, #6]
    288c:	madd	x12, x8, x18, x14
    2890:	madd	x14, x8, x1, x14
    2894:	cmp	w13, #0x8
    2898:	add	x12, x12, x11
    289c:	add	x11, x14, x11, lsl #2
    28a0:	ldrb	w12, [x12, x0]
    28a4:	ldr	w11, [x11, x2]
    28a8:	b.lt	28e8 <sendMTFValues+0x1ca8>  // b.tstop
    28ac:	ldr	w14, [x21]
    28b0:	ldr	x13, [x25]
    28b4:	lsr	w10, w10, #24
    28b8:	strb	w10, [x13, w14, sxtw]
    28bc:	ldr	w10, [x21]
    28c0:	add	w14, w10, #0x1
    28c4:	str	w14, [x21]
    28c8:	ldr	w10, [x24]
    28cc:	lsl	w10, w10, #8
    28d0:	str	w10, [x24]
    28d4:	ldr	w15, [x22]
    28d8:	sub	w13, w15, #0x8
    28dc:	cmp	w15, #0xf
    28e0:	str	w13, [x22]
    28e4:	b.gt	28b0 <sendMTFValues+0x1c70>
    28e8:	add	w12, w13, w12
    28ec:	ldr	x14, [x29, #8]
    28f0:	neg	w13, w12
    28f4:	lsl	w11, w11, w13
    28f8:	orr	w10, w11, w10
    28fc:	str	w12, [x14, #644]
    2900:	str	w10, [x14, #640]
    2904:	ldrh	w9, [x9, #8]
    2908:	madd	x11, x8, x18, x14
    290c:	madd	x13, x8, x1, x14
    2910:	cmp	w12, #0x8
    2914:	add	x11, x11, x9
    2918:	add	x13, x13, x9, lsl #2
    291c:	ldrb	w9, [x11, x0]
    2920:	ldr	w11, [x13, x2]
    2924:	b.lt	2964 <sendMTFValues+0x1d24>  // b.tstop
    2928:	ldr	w13, [x21]
    292c:	ldr	x12, [x25]
    2930:	lsr	w10, w10, #24
    2934:	strb	w10, [x12, w13, sxtw]
    2938:	ldr	w10, [x21]
    293c:	add	w13, w10, #0x1
    2940:	str	w13, [x21]
    2944:	ldr	w10, [x24]
    2948:	lsl	w10, w10, #8
    294c:	str	w10, [x24]
    2950:	ldr	w14, [x22]
    2954:	sub	w12, w14, #0x8
    2958:	cmp	w14, #0xf
    295c:	str	w12, [x22]
    2960:	b.gt	292c <sendMTFValues+0x1cec>
    2964:	add	w13, w12, w9
    2968:	ldr	x14, [x29, #8]
    296c:	neg	w12, w13
    2970:	lsl	w11, w11, w12
    2974:	orr	w10, w11, w10
    2978:	add	x9, x16, x27, lsl #1
    297c:	str	w13, [x14, #644]
    2980:	str	w10, [x14, #640]
    2984:	ldrh	w11, [x9, #10]
    2988:	madd	x12, x8, x18, x14
    298c:	madd	x14, x8, x1, x14
    2990:	cmp	w13, #0x8
    2994:	add	x12, x12, x11
    2998:	add	x11, x14, x11, lsl #2
    299c:	ldrb	w12, [x12, x0]
    29a0:	ldr	w11, [x11, x2]
    29a4:	b.lt	29e4 <sendMTFValues+0x1da4>  // b.tstop
    29a8:	ldr	w14, [x21]
    29ac:	ldr	x13, [x25]
    29b0:	lsr	w10, w10, #24
    29b4:	strb	w10, [x13, w14, sxtw]
    29b8:	ldr	w10, [x21]
    29bc:	add	w14, w10, #0x1
    29c0:	str	w14, [x21]
    29c4:	ldr	w10, [x24]
    29c8:	lsl	w10, w10, #8
    29cc:	str	w10, [x24]
    29d0:	ldr	w15, [x22]
    29d4:	sub	w13, w15, #0x8
    29d8:	cmp	w15, #0xf
    29dc:	str	w13, [x22]
    29e0:	b.gt	29ac <sendMTFValues+0x1d6c>
    29e4:	add	w12, w13, w12
    29e8:	ldr	x14, [x29, #8]
    29ec:	neg	w13, w12
    29f0:	lsl	w11, w11, w13
    29f4:	orr	w10, w11, w10
    29f8:	str	w12, [x14, #644]
    29fc:	str	w10, [x14, #640]
    2a00:	ldrh	w9, [x9, #12]
    2a04:	madd	x11, x8, x18, x14
    2a08:	madd	x13, x8, x1, x14
    2a0c:	cmp	w12, #0x8
    2a10:	add	x11, x11, x9
    2a14:	add	x13, x13, x9, lsl #2
    2a18:	ldrb	w9, [x11, x0]
    2a1c:	ldr	w11, [x13, x2]
    2a20:	b.lt	2a60 <sendMTFValues+0x1e20>  // b.tstop
    2a24:	ldr	w13, [x21]
    2a28:	ldr	x12, [x25]
    2a2c:	lsr	w10, w10, #24
    2a30:	strb	w10, [x12, w13, sxtw]
    2a34:	ldr	w10, [x21]
    2a38:	add	w13, w10, #0x1
    2a3c:	str	w13, [x21]
    2a40:	ldr	w10, [x24]
    2a44:	lsl	w10, w10, #8
    2a48:	str	w10, [x24]
    2a4c:	ldr	w14, [x22]
    2a50:	sub	w12, w14, #0x8
    2a54:	cmp	w14, #0xf
    2a58:	str	w12, [x22]
    2a5c:	b.gt	2a28 <sendMTFValues+0x1de8>
    2a60:	add	w13, w12, w9
    2a64:	ldr	x14, [x29, #8]
    2a68:	neg	w12, w13
    2a6c:	lsl	w11, w11, w12
    2a70:	orr	w10, w11, w10
    2a74:	add	x9, x16, x27, lsl #1
    2a78:	str	w13, [x14, #644]
    2a7c:	str	w10, [x14, #640]
    2a80:	ldrh	w11, [x9, #14]
    2a84:	madd	x12, x8, x18, x14
    2a88:	madd	x14, x8, x1, x14
    2a8c:	cmp	w13, #0x8
    2a90:	add	x12, x12, x11
    2a94:	add	x11, x14, x11, lsl #2
    2a98:	ldrb	w12, [x12, x0]
    2a9c:	ldr	w11, [x11, x2]
    2aa0:	b.lt	2ae0 <sendMTFValues+0x1ea0>  // b.tstop
    2aa4:	ldr	w14, [x21]
    2aa8:	ldr	x13, [x25]
    2aac:	lsr	w10, w10, #24
    2ab0:	strb	w10, [x13, w14, sxtw]
    2ab4:	ldr	w10, [x21]
    2ab8:	add	w14, w10, #0x1
    2abc:	str	w14, [x21]
    2ac0:	ldr	w10, [x24]
    2ac4:	lsl	w10, w10, #8
    2ac8:	str	w10, [x24]
    2acc:	ldr	w15, [x22]
    2ad0:	sub	w13, w15, #0x8
    2ad4:	cmp	w15, #0xf
    2ad8:	str	w13, [x22]
    2adc:	b.gt	2aa8 <sendMTFValues+0x1e68>
    2ae0:	add	w12, w13, w12
    2ae4:	ldr	x14, [x29, #8]
    2ae8:	neg	w13, w12
    2aec:	lsl	w11, w11, w13
    2af0:	orr	w10, w11, w10
    2af4:	str	w12, [x14, #644]
    2af8:	str	w10, [x14, #640]
    2afc:	ldrh	w9, [x9, #16]
    2b00:	madd	x11, x8, x18, x14
    2b04:	madd	x13, x8, x1, x14
    2b08:	cmp	w12, #0x8
    2b0c:	add	x11, x11, x9
    2b10:	add	x13, x13, x9, lsl #2
    2b14:	ldrb	w9, [x11, x0]
    2b18:	ldr	w11, [x13, x2]
    2b1c:	b.lt	2b5c <sendMTFValues+0x1f1c>  // b.tstop
    2b20:	ldr	w13, [x21]
    2b24:	ldr	x12, [x25]
    2b28:	lsr	w10, w10, #24
    2b2c:	strb	w10, [x12, w13, sxtw]
    2b30:	ldr	w10, [x21]
    2b34:	add	w13, w10, #0x1
    2b38:	str	w13, [x21]
    2b3c:	ldr	w10, [x24]
    2b40:	lsl	w10, w10, #8
    2b44:	str	w10, [x24]
    2b48:	ldr	w14, [x22]
    2b4c:	sub	w12, w14, #0x8
    2b50:	cmp	w14, #0xf
    2b54:	str	w12, [x22]
    2b58:	b.gt	2b24 <sendMTFValues+0x1ee4>
    2b5c:	add	w13, w12, w9
    2b60:	ldr	x14, [x29, #8]
    2b64:	neg	w12, w13
    2b68:	lsl	w11, w11, w12
    2b6c:	orr	w10, w11, w10
    2b70:	add	x9, x16, x27, lsl #1
    2b74:	str	w13, [x14, #644]
    2b78:	str	w10, [x14, #640]
    2b7c:	ldrh	w11, [x9, #18]
    2b80:	madd	x12, x8, x18, x14
    2b84:	madd	x14, x8, x1, x14
    2b88:	cmp	w13, #0x8
    2b8c:	add	x12, x12, x11
    2b90:	add	x11, x14, x11, lsl #2
    2b94:	ldrb	w12, [x12, x0]
    2b98:	ldr	w11, [x11, x2]
    2b9c:	b.lt	2bdc <sendMTFValues+0x1f9c>  // b.tstop
    2ba0:	ldr	w14, [x21]
    2ba4:	ldr	x13, [x25]
    2ba8:	lsr	w10, w10, #24
    2bac:	strb	w10, [x13, w14, sxtw]
    2bb0:	ldr	w10, [x21]
    2bb4:	add	w14, w10, #0x1
    2bb8:	str	w14, [x21]
    2bbc:	ldr	w10, [x24]
    2bc0:	lsl	w10, w10, #8
    2bc4:	str	w10, [x24]
    2bc8:	ldr	w15, [x22]
    2bcc:	sub	w13, w15, #0x8
    2bd0:	cmp	w15, #0xf
    2bd4:	str	w13, [x22]
    2bd8:	b.gt	2ba4 <sendMTFValues+0x1f64>
    2bdc:	add	w12, w13, w12
    2be0:	ldr	x14, [x29, #8]
    2be4:	neg	w13, w12
    2be8:	lsl	w11, w11, w13
    2bec:	orr	w10, w11, w10
    2bf0:	str	w12, [x14, #644]
    2bf4:	str	w10, [x14, #640]
    2bf8:	ldrh	w9, [x9, #20]
    2bfc:	madd	x11, x8, x18, x14
    2c00:	madd	x13, x8, x1, x14
    2c04:	cmp	w12, #0x8
    2c08:	add	x11, x11, x9
    2c0c:	add	x13, x13, x9, lsl #2
    2c10:	ldrb	w9, [x11, x0]
    2c14:	ldr	w11, [x13, x2]
    2c18:	b.lt	2c58 <sendMTFValues+0x2018>  // b.tstop
    2c1c:	ldr	w13, [x21]
    2c20:	ldr	x12, [x25]
    2c24:	lsr	w10, w10, #24
    2c28:	strb	w10, [x12, w13, sxtw]
    2c2c:	ldr	w10, [x21]
    2c30:	add	w13, w10, #0x1
    2c34:	str	w13, [x21]
    2c38:	ldr	w10, [x24]
    2c3c:	lsl	w10, w10, #8
    2c40:	str	w10, [x24]
    2c44:	ldr	w14, [x22]
    2c48:	sub	w12, w14, #0x8
    2c4c:	cmp	w14, #0xf
    2c50:	str	w12, [x22]
    2c54:	b.gt	2c20 <sendMTFValues+0x1fe0>
    2c58:	add	w13, w12, w9
    2c5c:	ldr	x14, [x29, #8]
    2c60:	neg	w12, w13
    2c64:	lsl	w11, w11, w12
    2c68:	orr	w10, w11, w10
    2c6c:	add	x9, x16, x27, lsl #1
    2c70:	str	w13, [x14, #644]
    2c74:	str	w10, [x14, #640]
    2c78:	ldrh	w11, [x9, #22]
    2c7c:	madd	x12, x8, x18, x14
    2c80:	madd	x14, x8, x1, x14
    2c84:	cmp	w13, #0x8
    2c88:	add	x12, x12, x11
    2c8c:	add	x11, x14, x11, lsl #2
    2c90:	ldrb	w12, [x12, x0]
    2c94:	ldr	w11, [x11, x2]
    2c98:	b.lt	2cd8 <sendMTFValues+0x2098>  // b.tstop
    2c9c:	ldr	w14, [x21]
    2ca0:	ldr	x13, [x25]
    2ca4:	lsr	w10, w10, #24
    2ca8:	strb	w10, [x13, w14, sxtw]
    2cac:	ldr	w10, [x21]
    2cb0:	add	w14, w10, #0x1
    2cb4:	str	w14, [x21]
    2cb8:	ldr	w10, [x24]
    2cbc:	lsl	w10, w10, #8
    2cc0:	str	w10, [x24]
    2cc4:	ldr	w15, [x22]
    2cc8:	sub	w13, w15, #0x8
    2ccc:	cmp	w15, #0xf
    2cd0:	str	w13, [x22]
    2cd4:	b.gt	2ca0 <sendMTFValues+0x2060>
    2cd8:	add	w12, w13, w12
    2cdc:	ldr	x14, [x29, #8]
    2ce0:	neg	w13, w12
    2ce4:	lsl	w11, w11, w13
    2ce8:	orr	w10, w11, w10
    2cec:	str	w12, [x14, #644]
    2cf0:	str	w10, [x14, #640]
    2cf4:	ldrh	w9, [x9, #24]
    2cf8:	madd	x11, x8, x18, x14
    2cfc:	madd	x13, x8, x1, x14
    2d00:	cmp	w12, #0x8
    2d04:	add	x11, x11, x9
    2d08:	add	x13, x13, x9, lsl #2
    2d0c:	ldrb	w9, [x11, x0]
    2d10:	ldr	w11, [x13, x2]
    2d14:	b.lt	2d54 <sendMTFValues+0x2114>  // b.tstop
    2d18:	ldr	w13, [x21]
    2d1c:	ldr	x12, [x25]
    2d20:	lsr	w10, w10, #24
    2d24:	strb	w10, [x12, w13, sxtw]
    2d28:	ldr	w10, [x21]
    2d2c:	add	w13, w10, #0x1
    2d30:	str	w13, [x21]
    2d34:	ldr	w10, [x24]
    2d38:	lsl	w10, w10, #8
    2d3c:	str	w10, [x24]
    2d40:	ldr	w14, [x22]
    2d44:	sub	w12, w14, #0x8
    2d48:	cmp	w14, #0xf
    2d4c:	str	w12, [x22]
    2d50:	b.gt	2d1c <sendMTFValues+0x20dc>
    2d54:	add	w13, w12, w9
    2d58:	ldr	x14, [x29, #8]
    2d5c:	neg	w12, w13
    2d60:	lsl	w11, w11, w12
    2d64:	orr	w10, w11, w10
    2d68:	add	x9, x16, x27, lsl #1
    2d6c:	str	w13, [x14, #644]
    2d70:	str	w10, [x14, #640]
    2d74:	ldrh	w11, [x9, #26]
    2d78:	madd	x12, x8, x18, x14
    2d7c:	madd	x14, x8, x1, x14
    2d80:	cmp	w13, #0x8
    2d84:	add	x12, x12, x11
    2d88:	add	x11, x14, x11, lsl #2
    2d8c:	ldrb	w12, [x12, x0]
    2d90:	ldr	w11, [x11, x2]
    2d94:	b.lt	2dd4 <sendMTFValues+0x2194>  // b.tstop
    2d98:	ldr	w14, [x21]
    2d9c:	ldr	x13, [x25]
    2da0:	lsr	w10, w10, #24
    2da4:	strb	w10, [x13, w14, sxtw]
    2da8:	ldr	w10, [x21]
    2dac:	add	w14, w10, #0x1
    2db0:	str	w14, [x21]
    2db4:	ldr	w10, [x24]
    2db8:	lsl	w10, w10, #8
    2dbc:	str	w10, [x24]
    2dc0:	ldr	w15, [x22]
    2dc4:	sub	w13, w15, #0x8
    2dc8:	cmp	w15, #0xf
    2dcc:	str	w13, [x22]
    2dd0:	b.gt	2d9c <sendMTFValues+0x215c>
    2dd4:	add	w12, w13, w12
    2dd8:	ldr	x14, [x29, #8]
    2ddc:	neg	w13, w12
    2de0:	lsl	w11, w11, w13
    2de4:	orr	w10, w11, w10
    2de8:	str	w12, [x14, #644]
    2dec:	str	w10, [x14, #640]
    2df0:	ldrh	w9, [x9, #28]
    2df4:	madd	x11, x8, x18, x14
    2df8:	madd	x13, x8, x1, x14
    2dfc:	cmp	w12, #0x8
    2e00:	add	x11, x11, x9
    2e04:	add	x13, x13, x9, lsl #2
    2e08:	ldrb	w9, [x11, x0]
    2e0c:	ldr	w11, [x13, x2]
    2e10:	b.lt	2e50 <sendMTFValues+0x2210>  // b.tstop
    2e14:	ldr	w13, [x21]
    2e18:	ldr	x12, [x25]
    2e1c:	lsr	w10, w10, #24
    2e20:	strb	w10, [x12, w13, sxtw]
    2e24:	ldr	w10, [x21]
    2e28:	add	w13, w10, #0x1
    2e2c:	str	w13, [x21]
    2e30:	ldr	w10, [x24]
    2e34:	lsl	w10, w10, #8
    2e38:	str	w10, [x24]
    2e3c:	ldr	w14, [x22]
    2e40:	sub	w12, w14, #0x8
    2e44:	cmp	w14, #0xf
    2e48:	str	w12, [x22]
    2e4c:	b.gt	2e18 <sendMTFValues+0x21d8>
    2e50:	add	w13, w12, w9
    2e54:	ldr	x14, [x29, #8]
    2e58:	neg	w12, w13
    2e5c:	lsl	w11, w11, w12
    2e60:	orr	w10, w11, w10
    2e64:	add	x9, x16, x27, lsl #1
    2e68:	str	w13, [x14, #644]
    2e6c:	str	w10, [x14, #640]
    2e70:	ldrh	w11, [x9, #30]
    2e74:	madd	x12, x8, x18, x14
    2e78:	madd	x14, x8, x1, x14
    2e7c:	cmp	w13, #0x8
    2e80:	add	x12, x12, x11
    2e84:	add	x11, x14, x11, lsl #2
    2e88:	ldrb	w12, [x12, x0]
    2e8c:	ldr	w11, [x11, x2]
    2e90:	b.lt	2ed0 <sendMTFValues+0x2290>  // b.tstop
    2e94:	ldr	w14, [x21]
    2e98:	ldr	x13, [x25]
    2e9c:	lsr	w10, w10, #24
    2ea0:	strb	w10, [x13, w14, sxtw]
    2ea4:	ldr	w10, [x21]
    2ea8:	add	w14, w10, #0x1
    2eac:	str	w14, [x21]
    2eb0:	ldr	w10, [x24]
    2eb4:	lsl	w10, w10, #8
    2eb8:	str	w10, [x24]
    2ebc:	ldr	w15, [x22]
    2ec0:	sub	w13, w15, #0x8
    2ec4:	cmp	w15, #0xf
    2ec8:	str	w13, [x22]
    2ecc:	b.gt	2e98 <sendMTFValues+0x2258>
    2ed0:	add	w12, w13, w12
    2ed4:	ldr	x14, [x29, #8]
    2ed8:	neg	w13, w12
    2edc:	lsl	w11, w11, w13
    2ee0:	orr	w10, w11, w10
    2ee4:	str	w12, [x14, #644]
    2ee8:	str	w10, [x14, #640]
    2eec:	ldrh	w9, [x9, #32]
    2ef0:	madd	x11, x8, x18, x14
    2ef4:	madd	x13, x8, x1, x14
    2ef8:	cmp	w12, #0x8
    2efc:	add	x11, x11, x9
    2f00:	add	x13, x13, x9, lsl #2
    2f04:	ldrb	w9, [x11, x0]
    2f08:	ldr	w11, [x13, x2]
    2f0c:	b.lt	2f4c <sendMTFValues+0x230c>  // b.tstop
    2f10:	ldr	w13, [x21]
    2f14:	ldr	x12, [x25]
    2f18:	lsr	w10, w10, #24
    2f1c:	strb	w10, [x12, w13, sxtw]
    2f20:	ldr	w10, [x21]
    2f24:	add	w13, w10, #0x1
    2f28:	str	w13, [x21]
    2f2c:	ldr	w10, [x24]
    2f30:	lsl	w10, w10, #8
    2f34:	str	w10, [x24]
    2f38:	ldr	w14, [x22]
    2f3c:	sub	w12, w14, #0x8
    2f40:	cmp	w14, #0xf
    2f44:	str	w12, [x22]
    2f48:	b.gt	2f14 <sendMTFValues+0x22d4>
    2f4c:	add	w13, w12, w9
    2f50:	ldr	x14, [x29, #8]
    2f54:	neg	w12, w13
    2f58:	lsl	w11, w11, w12
    2f5c:	orr	w10, w11, w10
    2f60:	add	x9, x16, x27, lsl #1
    2f64:	str	w13, [x14, #644]
    2f68:	str	w10, [x14, #640]
    2f6c:	ldrh	w11, [x9, #34]
    2f70:	madd	x12, x8, x18, x14
    2f74:	madd	x14, x8, x1, x14
    2f78:	cmp	w13, #0x8
    2f7c:	add	x12, x12, x11
    2f80:	add	x11, x14, x11, lsl #2
    2f84:	ldrb	w12, [x12, x0]
    2f88:	ldr	w11, [x11, x2]
    2f8c:	b.lt	2fcc <sendMTFValues+0x238c>  // b.tstop
    2f90:	ldr	w14, [x21]
    2f94:	ldr	x13, [x25]
    2f98:	lsr	w10, w10, #24
    2f9c:	strb	w10, [x13, w14, sxtw]
    2fa0:	ldr	w10, [x21]
    2fa4:	add	w14, w10, #0x1
    2fa8:	str	w14, [x21]
    2fac:	ldr	w10, [x24]
    2fb0:	lsl	w10, w10, #8
    2fb4:	str	w10, [x24]
    2fb8:	ldr	w15, [x22]
    2fbc:	sub	w13, w15, #0x8
    2fc0:	cmp	w15, #0xf
    2fc4:	str	w13, [x22]
    2fc8:	b.gt	2f94 <sendMTFValues+0x2354>
    2fcc:	add	w12, w13, w12
    2fd0:	ldr	x14, [x29, #8]
    2fd4:	neg	w13, w12
    2fd8:	lsl	w11, w11, w13
    2fdc:	orr	w10, w11, w10
    2fe0:	str	w12, [x14, #644]
    2fe4:	str	w10, [x14, #640]
    2fe8:	ldrh	w9, [x9, #36]
    2fec:	madd	x11, x8, x18, x14
    2ff0:	madd	x13, x8, x1, x14
    2ff4:	cmp	w12, #0x8
    2ff8:	add	x11, x11, x9
    2ffc:	add	x13, x13, x9, lsl #2
    3000:	ldrb	w9, [x11, x0]
    3004:	ldr	w11, [x13, x2]
    3008:	b.lt	3048 <sendMTFValues+0x2408>  // b.tstop
    300c:	ldr	w13, [x21]
    3010:	ldr	x12, [x25]
    3014:	lsr	w10, w10, #24
    3018:	strb	w10, [x12, w13, sxtw]
    301c:	ldr	w10, [x21]
    3020:	add	w13, w10, #0x1
    3024:	str	w13, [x21]
    3028:	ldr	w10, [x24]
    302c:	lsl	w10, w10, #8
    3030:	str	w10, [x24]
    3034:	ldr	w14, [x22]
    3038:	sub	w12, w14, #0x8
    303c:	cmp	w14, #0xf
    3040:	str	w12, [x22]
    3044:	b.gt	3010 <sendMTFValues+0x23d0>
    3048:	add	w13, w12, w9
    304c:	ldr	x14, [x29, #8]
    3050:	neg	w12, w13
    3054:	lsl	w11, w11, w12
    3058:	orr	w10, w11, w10
    305c:	add	x9, x16, x27, lsl #1
    3060:	str	w13, [x14, #644]
    3064:	str	w10, [x14, #640]
    3068:	ldrh	w11, [x9, #38]
    306c:	madd	x12, x8, x18, x14
    3070:	madd	x14, x8, x1, x14
    3074:	cmp	w13, #0x8
    3078:	add	x12, x12, x11
    307c:	add	x11, x14, x11, lsl #2
    3080:	ldrb	w12, [x12, x0]
    3084:	ldr	w11, [x11, x2]
    3088:	b.lt	30c8 <sendMTFValues+0x2488>  // b.tstop
    308c:	ldr	w14, [x21]
    3090:	ldr	x13, [x25]
    3094:	lsr	w10, w10, #24
    3098:	strb	w10, [x13, w14, sxtw]
    309c:	ldr	w10, [x21]
    30a0:	add	w14, w10, #0x1
    30a4:	str	w14, [x21]
    30a8:	ldr	w10, [x24]
    30ac:	lsl	w10, w10, #8
    30b0:	str	w10, [x24]
    30b4:	ldr	w15, [x22]
    30b8:	sub	w13, w15, #0x8
    30bc:	cmp	w15, #0xf
    30c0:	str	w13, [x22]
    30c4:	b.gt	3090 <sendMTFValues+0x2450>
    30c8:	add	w12, w13, w12
    30cc:	ldr	x14, [x29, #8]
    30d0:	neg	w13, w12
    30d4:	lsl	w11, w11, w13
    30d8:	orr	w10, w11, w10
    30dc:	str	w12, [x14, #644]
    30e0:	str	w10, [x14, #640]
    30e4:	ldrh	w9, [x9, #40]
    30e8:	madd	x11, x8, x18, x14
    30ec:	madd	x13, x8, x1, x14
    30f0:	cmp	w12, #0x8
    30f4:	add	x11, x11, x9
    30f8:	add	x13, x13, x9, lsl #2
    30fc:	ldrb	w9, [x11, x0]
    3100:	ldr	w11, [x13, x2]
    3104:	b.lt	3144 <sendMTFValues+0x2504>  // b.tstop
    3108:	ldr	w13, [x21]
    310c:	ldr	x12, [x25]
    3110:	lsr	w10, w10, #24
    3114:	strb	w10, [x12, w13, sxtw]
    3118:	ldr	w10, [x21]
    311c:	add	w13, w10, #0x1
    3120:	str	w13, [x21]
    3124:	ldr	w10, [x24]
    3128:	lsl	w10, w10, #8
    312c:	str	w10, [x24]
    3130:	ldr	w14, [x22]
    3134:	sub	w12, w14, #0x8
    3138:	cmp	w14, #0xf
    313c:	str	w12, [x22]
    3140:	b.gt	310c <sendMTFValues+0x24cc>
    3144:	add	w13, w12, w9
    3148:	ldr	x14, [x29, #8]
    314c:	neg	w12, w13
    3150:	lsl	w11, w11, w12
    3154:	orr	w10, w11, w10
    3158:	add	x9, x16, x27, lsl #1
    315c:	str	w13, [x14, #644]
    3160:	str	w10, [x14, #640]
    3164:	ldrh	w11, [x9, #42]
    3168:	madd	x12, x8, x18, x14
    316c:	madd	x14, x8, x1, x14
    3170:	cmp	w13, #0x8
    3174:	add	x12, x12, x11
    3178:	add	x11, x14, x11, lsl #2
    317c:	ldrb	w12, [x12, x0]
    3180:	ldr	w11, [x11, x2]
    3184:	b.lt	31c4 <sendMTFValues+0x2584>  // b.tstop
    3188:	ldr	w14, [x21]
    318c:	ldr	x13, [x25]
    3190:	lsr	w10, w10, #24
    3194:	strb	w10, [x13, w14, sxtw]
    3198:	ldr	w10, [x21]
    319c:	add	w14, w10, #0x1
    31a0:	str	w14, [x21]
    31a4:	ldr	w10, [x24]
    31a8:	lsl	w10, w10, #8
    31ac:	str	w10, [x24]
    31b0:	ldr	w15, [x22]
    31b4:	sub	w13, w15, #0x8
    31b8:	cmp	w15, #0xf
    31bc:	str	w13, [x22]
    31c0:	b.gt	318c <sendMTFValues+0x254c>
    31c4:	add	w12, w13, w12
    31c8:	ldr	x14, [x29, #8]
    31cc:	neg	w13, w12
    31d0:	lsl	w11, w11, w13
    31d4:	orr	w10, w11, w10
    31d8:	str	w12, [x14, #644]
    31dc:	str	w10, [x14, #640]
    31e0:	ldrh	w9, [x9, #44]
    31e4:	madd	x11, x8, x18, x14
    31e8:	madd	x13, x8, x1, x14
    31ec:	cmp	w12, #0x8
    31f0:	add	x11, x11, x9
    31f4:	add	x13, x13, x9, lsl #2
    31f8:	ldrb	w9, [x11, x0]
    31fc:	ldr	w11, [x13, x2]
    3200:	b.lt	3240 <sendMTFValues+0x2600>  // b.tstop
    3204:	ldr	w13, [x21]
    3208:	ldr	x12, [x25]
    320c:	lsr	w10, w10, #24
    3210:	strb	w10, [x12, w13, sxtw]
    3214:	ldr	w10, [x21]
    3218:	add	w13, w10, #0x1
    321c:	str	w13, [x21]
    3220:	ldr	w10, [x24]
    3224:	lsl	w10, w10, #8
    3228:	str	w10, [x24]
    322c:	ldr	w14, [x22]
    3230:	sub	w12, w14, #0x8
    3234:	cmp	w14, #0xf
    3238:	str	w12, [x22]
    323c:	b.gt	3208 <sendMTFValues+0x25c8>
    3240:	add	w13, w12, w9
    3244:	ldr	x14, [x29, #8]
    3248:	neg	w12, w13
    324c:	lsl	w11, w11, w12
    3250:	orr	w10, w11, w10
    3254:	add	x9, x16, x27, lsl #1
    3258:	str	w13, [x14, #644]
    325c:	str	w10, [x14, #640]
    3260:	ldrh	w11, [x9, #46]
    3264:	madd	x12, x8, x18, x14
    3268:	madd	x14, x8, x1, x14
    326c:	cmp	w13, #0x8
    3270:	add	x12, x12, x11
    3274:	add	x11, x14, x11, lsl #2
    3278:	ldrb	w12, [x12, x0]
    327c:	ldr	w11, [x11, x2]
    3280:	b.lt	32c0 <sendMTFValues+0x2680>  // b.tstop
    3284:	ldr	w14, [x21]
    3288:	ldr	x13, [x25]
    328c:	lsr	w10, w10, #24
    3290:	strb	w10, [x13, w14, sxtw]
    3294:	ldr	w10, [x21]
    3298:	add	w14, w10, #0x1
    329c:	str	w14, [x21]
    32a0:	ldr	w10, [x24]
    32a4:	lsl	w10, w10, #8
    32a8:	str	w10, [x24]
    32ac:	ldr	w15, [x22]
    32b0:	sub	w13, w15, #0x8
    32b4:	cmp	w15, #0xf
    32b8:	str	w13, [x22]
    32bc:	b.gt	3288 <sendMTFValues+0x2648>
    32c0:	add	w12, w13, w12
    32c4:	ldr	x14, [x29, #8]
    32c8:	neg	w13, w12
    32cc:	lsl	w11, w11, w13
    32d0:	orr	w10, w11, w10
    32d4:	str	w12, [x14, #644]
    32d8:	str	w10, [x14, #640]
    32dc:	ldrh	w9, [x9, #48]
    32e0:	madd	x11, x8, x18, x14
    32e4:	madd	x13, x8, x1, x14
    32e8:	cmp	w12, #0x8
    32ec:	add	x11, x11, x9
    32f0:	add	x13, x13, x9, lsl #2
    32f4:	ldrb	w9, [x11, x0]
    32f8:	ldr	w11, [x13, x2]
    32fc:	b.lt	333c <sendMTFValues+0x26fc>  // b.tstop
    3300:	ldr	w13, [x21]
    3304:	ldr	x12, [x25]
    3308:	lsr	w10, w10, #24
    330c:	strb	w10, [x12, w13, sxtw]
    3310:	ldr	w10, [x21]
    3314:	add	w13, w10, #0x1
    3318:	str	w13, [x21]
    331c:	ldr	w10, [x24]
    3320:	lsl	w10, w10, #8
    3324:	str	w10, [x24]
    3328:	ldr	w14, [x22]
    332c:	sub	w12, w14, #0x8
    3330:	cmp	w14, #0xf
    3334:	str	w12, [x22]
    3338:	b.gt	3304 <sendMTFValues+0x26c4>
    333c:	add	w13, w12, w9
    3340:	ldr	x14, [x29, #8]
    3344:	neg	w12, w13
    3348:	lsl	w11, w11, w12
    334c:	orr	w10, w11, w10
    3350:	add	x9, x16, x27, lsl #1
    3354:	str	w13, [x14, #644]
    3358:	str	w10, [x14, #640]
    335c:	ldrh	w11, [x9, #50]
    3360:	madd	x12, x8, x18, x14
    3364:	madd	x14, x8, x1, x14
    3368:	cmp	w13, #0x8
    336c:	add	x12, x12, x11
    3370:	add	x11, x14, x11, lsl #2
    3374:	ldrb	w12, [x12, x0]
    3378:	ldr	w11, [x11, x2]
    337c:	b.lt	33bc <sendMTFValues+0x277c>  // b.tstop
    3380:	ldr	w14, [x21]
    3384:	ldr	x13, [x25]
    3388:	lsr	w10, w10, #24
    338c:	strb	w10, [x13, w14, sxtw]
    3390:	ldr	w10, [x21]
    3394:	add	w14, w10, #0x1
    3398:	str	w14, [x21]
    339c:	ldr	w10, [x24]
    33a0:	lsl	w10, w10, #8
    33a4:	str	w10, [x24]
    33a8:	ldr	w15, [x22]
    33ac:	sub	w13, w15, #0x8
    33b0:	cmp	w15, #0xf
    33b4:	str	w13, [x22]
    33b8:	b.gt	3384 <sendMTFValues+0x2744>
    33bc:	add	w12, w13, w12
    33c0:	ldr	x14, [x29, #8]
    33c4:	neg	w13, w12
    33c8:	lsl	w11, w11, w13
    33cc:	orr	w10, w11, w10
    33d0:	str	w12, [x14, #644]
    33d4:	str	w10, [x14, #640]
    33d8:	ldrh	w9, [x9, #52]
    33dc:	madd	x11, x8, x18, x14
    33e0:	madd	x13, x8, x1, x14
    33e4:	cmp	w12, #0x8
    33e8:	add	x11, x11, x9
    33ec:	add	x13, x13, x9, lsl #2
    33f0:	ldrb	w9, [x11, x0]
    33f4:	ldr	w11, [x13, x2]
    33f8:	b.lt	3438 <sendMTFValues+0x27f8>  // b.tstop
    33fc:	ldr	w13, [x21]
    3400:	ldr	x12, [x25]
    3404:	lsr	w10, w10, #24
    3408:	strb	w10, [x12, w13, sxtw]
    340c:	ldr	w10, [x21]
    3410:	add	w13, w10, #0x1
    3414:	str	w13, [x21]
    3418:	ldr	w10, [x24]
    341c:	lsl	w10, w10, #8
    3420:	str	w10, [x24]
    3424:	ldr	w14, [x22]
    3428:	sub	w12, w14, #0x8
    342c:	cmp	w14, #0xf
    3430:	str	w12, [x22]
    3434:	b.gt	3400 <sendMTFValues+0x27c0>
    3438:	add	w13, w12, w9
    343c:	ldr	x14, [x29, #8]
    3440:	neg	w12, w13
    3444:	lsl	w11, w11, w12
    3448:	orr	w10, w11, w10
    344c:	add	x9, x16, x27, lsl #1
    3450:	str	w13, [x14, #644]
    3454:	str	w10, [x14, #640]
    3458:	ldrh	w11, [x9, #54]
    345c:	madd	x12, x8, x18, x14
    3460:	madd	x14, x8, x1, x14
    3464:	cmp	w13, #0x8
    3468:	add	x12, x12, x11
    346c:	add	x11, x14, x11, lsl #2
    3470:	ldrb	w12, [x12, x0]
    3474:	ldr	w11, [x11, x2]
    3478:	b.lt	34b8 <sendMTFValues+0x2878>  // b.tstop
    347c:	ldr	w14, [x21]
    3480:	ldr	x13, [x25]
    3484:	lsr	w10, w10, #24
    3488:	strb	w10, [x13, w14, sxtw]
    348c:	ldr	w10, [x21]
    3490:	add	w14, w10, #0x1
    3494:	str	w14, [x21]
    3498:	ldr	w10, [x24]
    349c:	lsl	w10, w10, #8
    34a0:	str	w10, [x24]
    34a4:	ldr	w15, [x22]
    34a8:	sub	w13, w15, #0x8
    34ac:	cmp	w15, #0xf
    34b0:	str	w13, [x22]
    34b4:	b.gt	3480 <sendMTFValues+0x2840>
    34b8:	add	w12, w13, w12
    34bc:	ldr	x14, [x29, #8]
    34c0:	neg	w13, w12
    34c4:	lsl	w11, w11, w13
    34c8:	orr	w10, w11, w10
    34cc:	str	w12, [x14, #644]
    34d0:	str	w10, [x14, #640]
    34d4:	ldrh	w9, [x9, #56]
    34d8:	madd	x11, x8, x18, x14
    34dc:	madd	x13, x8, x1, x14
    34e0:	cmp	w12, #0x8
    34e4:	add	x11, x11, x9
    34e8:	add	x13, x13, x9, lsl #2
    34ec:	ldrb	w9, [x11, x0]
    34f0:	ldr	w11, [x13, x2]
    34f4:	b.lt	3534 <sendMTFValues+0x28f4>  // b.tstop
    34f8:	ldr	w13, [x21]
    34fc:	ldr	x12, [x25]
    3500:	lsr	w10, w10, #24
    3504:	strb	w10, [x12, w13, sxtw]
    3508:	ldr	w10, [x21]
    350c:	add	w13, w10, #0x1
    3510:	str	w13, [x21]
    3514:	ldr	w10, [x24]
    3518:	lsl	w10, w10, #8
    351c:	str	w10, [x24]
    3520:	ldr	w14, [x22]
    3524:	sub	w12, w14, #0x8
    3528:	cmp	w14, #0xf
    352c:	str	w12, [x22]
    3530:	b.gt	34fc <sendMTFValues+0x28bc>
    3534:	add	w13, w12, w9
    3538:	ldr	x14, [x29, #8]
    353c:	neg	w12, w13
    3540:	lsl	w11, w11, w12
    3544:	orr	w10, w11, w10
    3548:	add	x9, x16, x27, lsl #1
    354c:	str	w13, [x14, #644]
    3550:	str	w10, [x14, #640]
    3554:	ldrh	w11, [x9, #58]
    3558:	madd	x12, x8, x18, x14
    355c:	madd	x14, x8, x1, x14
    3560:	cmp	w13, #0x8
    3564:	add	x12, x12, x11
    3568:	add	x11, x14, x11, lsl #2
    356c:	ldrb	w12, [x12, x0]
    3570:	ldr	w11, [x11, x2]
    3574:	b.lt	35b4 <sendMTFValues+0x2974>  // b.tstop
    3578:	ldr	w14, [x21]
    357c:	ldr	x13, [x25]
    3580:	lsr	w10, w10, #24
    3584:	strb	w10, [x13, w14, sxtw]
    3588:	ldr	w10, [x21]
    358c:	add	w14, w10, #0x1
    3590:	str	w14, [x21]
    3594:	ldr	w10, [x24]
    3598:	lsl	w10, w10, #8
    359c:	str	w10, [x24]
    35a0:	ldr	w15, [x22]
    35a4:	sub	w13, w15, #0x8
    35a8:	cmp	w15, #0xf
    35ac:	str	w13, [x22]
    35b0:	b.gt	357c <sendMTFValues+0x293c>
    35b4:	add	w12, w13, w12
    35b8:	ldr	x14, [x29, #8]
    35bc:	neg	w13, w12
    35c0:	lsl	w11, w11, w13
    35c4:	orr	w10, w11, w10
    35c8:	str	w12, [x14, #644]
    35cc:	str	w10, [x14, #640]
    35d0:	ldrh	w9, [x9, #60]
    35d4:	madd	x11, x8, x18, x14
    35d8:	madd	x13, x8, x1, x14
    35dc:	cmp	w12, #0x8
    35e0:	add	x11, x11, x9
    35e4:	add	x13, x13, x9, lsl #2
    35e8:	ldrb	w9, [x11, x0]
    35ec:	ldr	w11, [x13, x2]
    35f0:	b.lt	3630 <sendMTFValues+0x29f0>  // b.tstop
    35f4:	ldr	w13, [x21]
    35f8:	ldr	x12, [x25]
    35fc:	lsr	w10, w10, #24
    3600:	strb	w10, [x12, w13, sxtw]
    3604:	ldr	w10, [x21]
    3608:	add	w13, w10, #0x1
    360c:	str	w13, [x21]
    3610:	ldr	w10, [x24]
    3614:	lsl	w10, w10, #8
    3618:	str	w10, [x24]
    361c:	ldr	w14, [x22]
    3620:	sub	w12, w14, #0x8
    3624:	cmp	w14, #0xf
    3628:	str	w12, [x22]
    362c:	b.gt	35f8 <sendMTFValues+0x29b8>
    3630:	add	w13, w12, w9
    3634:	ldr	x14, [x29, #8]
    3638:	neg	w12, w13
    363c:	lsl	w11, w11, w12
    3640:	orr	w10, w11, w10
    3644:	add	x9, x16, x27, lsl #1
    3648:	str	w13, [x14, #644]
    364c:	str	w10, [x14, #640]
    3650:	ldrh	w11, [x9, #62]
    3654:	madd	x12, x8, x18, x14
    3658:	madd	x14, x8, x1, x14
    365c:	cmp	w13, #0x8
    3660:	add	x12, x12, x11
    3664:	add	x11, x14, x11, lsl #2
    3668:	ldrb	w12, [x12, x0]
    366c:	ldr	w11, [x11, x2]
    3670:	b.lt	36b0 <sendMTFValues+0x2a70>  // b.tstop
    3674:	ldr	w14, [x21]
    3678:	ldr	x13, [x25]
    367c:	lsr	w10, w10, #24
    3680:	strb	w10, [x13, w14, sxtw]
    3684:	ldr	w10, [x21]
    3688:	add	w14, w10, #0x1
    368c:	str	w14, [x21]
    3690:	ldr	w10, [x24]
    3694:	lsl	w10, w10, #8
    3698:	str	w10, [x24]
    369c:	ldr	w15, [x22]
    36a0:	sub	w13, w15, #0x8
    36a4:	cmp	w15, #0xf
    36a8:	str	w13, [x22]
    36ac:	b.gt	3678 <sendMTFValues+0x2a38>
    36b0:	add	w12, w13, w12
    36b4:	ldr	x14, [x29, #8]
    36b8:	neg	w13, w12
    36bc:	lsl	w11, w11, w13
    36c0:	orr	w10, w11, w10
    36c4:	str	w12, [x14, #644]
    36c8:	str	w10, [x14, #640]
    36cc:	ldrh	w9, [x9, #64]
    36d0:	madd	x11, x8, x18, x14
    36d4:	madd	x13, x8, x1, x14
    36d8:	cmp	w12, #0x8
    36dc:	add	x11, x11, x9
    36e0:	add	x13, x13, x9, lsl #2
    36e4:	ldrb	w9, [x11, x0]
    36e8:	ldr	w11, [x13, x2]
    36ec:	b.lt	372c <sendMTFValues+0x2aec>  // b.tstop
    36f0:	ldr	w13, [x21]
    36f4:	ldr	x12, [x25]
    36f8:	lsr	w10, w10, #24
    36fc:	strb	w10, [x12, w13, sxtw]
    3700:	ldr	w10, [x21]
    3704:	add	w13, w10, #0x1
    3708:	str	w13, [x21]
    370c:	ldr	w10, [x24]
    3710:	lsl	w10, w10, #8
    3714:	str	w10, [x24]
    3718:	ldr	w14, [x22]
    371c:	sub	w12, w14, #0x8
    3720:	cmp	w14, #0xf
    3724:	str	w12, [x22]
    3728:	b.gt	36f4 <sendMTFValues+0x2ab4>
    372c:	add	w13, w12, w9
    3730:	ldr	x14, [x29, #8]
    3734:	neg	w12, w13
    3738:	lsl	w11, w11, w12
    373c:	orr	w10, w11, w10
    3740:	add	x9, x16, x27, lsl #1
    3744:	str	w13, [x14, #644]
    3748:	str	w10, [x14, #640]
    374c:	ldrh	w11, [x9, #66]
    3750:	madd	x12, x8, x18, x14
    3754:	madd	x14, x8, x1, x14
    3758:	cmp	w13, #0x8
    375c:	add	x12, x12, x11
    3760:	add	x11, x14, x11, lsl #2
    3764:	ldrb	w12, [x12, x0]
    3768:	ldr	w11, [x11, x2]
    376c:	b.lt	37ac <sendMTFValues+0x2b6c>  // b.tstop
    3770:	ldr	w14, [x21]
    3774:	ldr	x13, [x25]
    3778:	lsr	w10, w10, #24
    377c:	strb	w10, [x13, w14, sxtw]
    3780:	ldr	w10, [x21]
    3784:	add	w14, w10, #0x1
    3788:	str	w14, [x21]
    378c:	ldr	w10, [x24]
    3790:	lsl	w10, w10, #8
    3794:	str	w10, [x24]
    3798:	ldr	w15, [x22]
    379c:	sub	w13, w15, #0x8
    37a0:	cmp	w15, #0xf
    37a4:	str	w13, [x22]
    37a8:	b.gt	3774 <sendMTFValues+0x2b34>
    37ac:	add	w12, w13, w12
    37b0:	ldr	x14, [x29, #8]
    37b4:	neg	w13, w12
    37b8:	lsl	w11, w11, w13
    37bc:	orr	w10, w11, w10
    37c0:	str	w12, [x14, #644]
    37c4:	str	w10, [x14, #640]
    37c8:	ldrh	w9, [x9, #68]
    37cc:	madd	x11, x8, x18, x14
    37d0:	madd	x13, x8, x1, x14
    37d4:	cmp	w12, #0x8
    37d8:	add	x11, x11, x9
    37dc:	add	x13, x13, x9, lsl #2
    37e0:	ldrb	w9, [x11, x0]
    37e4:	ldr	w11, [x13, x2]
    37e8:	b.lt	3828 <sendMTFValues+0x2be8>  // b.tstop
    37ec:	ldr	w13, [x21]
    37f0:	ldr	x12, [x25]
    37f4:	lsr	w10, w10, #24
    37f8:	strb	w10, [x12, w13, sxtw]
    37fc:	ldr	w10, [x21]
    3800:	add	w13, w10, #0x1
    3804:	str	w13, [x21]
    3808:	ldr	w10, [x24]
    380c:	lsl	w10, w10, #8
    3810:	str	w10, [x24]
    3814:	ldr	w14, [x22]
    3818:	sub	w12, w14, #0x8
    381c:	cmp	w14, #0xf
    3820:	str	w12, [x22]
    3824:	b.gt	37f0 <sendMTFValues+0x2bb0>
    3828:	add	w13, w12, w9
    382c:	ldr	x14, [x29, #8]
    3830:	neg	w12, w13
    3834:	lsl	w11, w11, w12
    3838:	orr	w10, w11, w10
    383c:	add	x9, x16, x27, lsl #1
    3840:	str	w13, [x14, #644]
    3844:	str	w10, [x14, #640]
    3848:	ldrh	w11, [x9, #70]
    384c:	madd	x12, x8, x18, x14
    3850:	madd	x14, x8, x1, x14
    3854:	cmp	w13, #0x8
    3858:	add	x12, x12, x11
    385c:	add	x11, x14, x11, lsl #2
    3860:	ldrb	w12, [x12, x0]
    3864:	ldr	w11, [x11, x2]
    3868:	b.lt	38a8 <sendMTFValues+0x2c68>  // b.tstop
    386c:	ldr	w14, [x21]
    3870:	ldr	x13, [x25]
    3874:	lsr	w10, w10, #24
    3878:	strb	w10, [x13, w14, sxtw]
    387c:	ldr	w10, [x21]
    3880:	add	w14, w10, #0x1
    3884:	str	w14, [x21]
    3888:	ldr	w10, [x24]
    388c:	lsl	w10, w10, #8
    3890:	str	w10, [x24]
    3894:	ldr	w15, [x22]
    3898:	sub	w13, w15, #0x8
    389c:	cmp	w15, #0xf
    38a0:	str	w13, [x22]
    38a4:	b.gt	3870 <sendMTFValues+0x2c30>
    38a8:	add	w12, w13, w12
    38ac:	ldr	x14, [x29, #8]
    38b0:	neg	w13, w12
    38b4:	lsl	w11, w11, w13
    38b8:	orr	w10, w11, w10
    38bc:	str	w12, [x14, #644]
    38c0:	str	w10, [x14, #640]
    38c4:	ldrh	w9, [x9, #72]
    38c8:	madd	x11, x8, x18, x14
    38cc:	madd	x13, x8, x1, x14
    38d0:	cmp	w12, #0x8
    38d4:	add	x11, x11, x9
    38d8:	add	x13, x13, x9, lsl #2
    38dc:	ldrb	w9, [x11, x0]
    38e0:	ldr	w11, [x13, x2]
    38e4:	b.lt	3924 <sendMTFValues+0x2ce4>  // b.tstop
    38e8:	ldr	w13, [x21]
    38ec:	ldr	x12, [x25]
    38f0:	lsr	w10, w10, #24
    38f4:	strb	w10, [x12, w13, sxtw]
    38f8:	ldr	w10, [x21]
    38fc:	add	w13, w10, #0x1
    3900:	str	w13, [x21]
    3904:	ldr	w10, [x24]
    3908:	lsl	w10, w10, #8
    390c:	str	w10, [x24]
    3910:	ldr	w14, [x22]
    3914:	sub	w12, w14, #0x8
    3918:	cmp	w14, #0xf
    391c:	str	w12, [x22]
    3920:	b.gt	38ec <sendMTFValues+0x2cac>
    3924:	add	w13, w12, w9
    3928:	ldr	x14, [x29, #8]
    392c:	neg	w12, w13
    3930:	lsl	w11, w11, w12
    3934:	orr	w10, w11, w10
    3938:	add	x9, x16, x27, lsl #1
    393c:	str	w13, [x14, #644]
    3940:	str	w10, [x14, #640]
    3944:	ldrh	w11, [x9, #74]
    3948:	madd	x12, x8, x18, x14
    394c:	madd	x14, x8, x1, x14
    3950:	cmp	w13, #0x8
    3954:	add	x12, x12, x11
    3958:	add	x11, x14, x11, lsl #2
    395c:	ldrb	w12, [x12, x0]
    3960:	ldr	w11, [x11, x2]
    3964:	b.lt	39a4 <sendMTFValues+0x2d64>  // b.tstop
    3968:	ldr	w14, [x21]
    396c:	ldr	x13, [x25]
    3970:	lsr	w10, w10, #24
    3974:	strb	w10, [x13, w14, sxtw]
    3978:	ldr	w10, [x21]
    397c:	add	w14, w10, #0x1
    3980:	str	w14, [x21]
    3984:	ldr	w10, [x24]
    3988:	lsl	w10, w10, #8
    398c:	str	w10, [x24]
    3990:	ldr	w15, [x22]
    3994:	sub	w13, w15, #0x8
    3998:	cmp	w15, #0xf
    399c:	str	w13, [x22]
    39a0:	b.gt	396c <sendMTFValues+0x2d2c>
    39a4:	add	w12, w13, w12
    39a8:	ldr	x14, [x29, #8]
    39ac:	neg	w13, w12
    39b0:	lsl	w11, w11, w13
    39b4:	orr	w10, w11, w10
    39b8:	str	w12, [x14, #644]
    39bc:	str	w10, [x14, #640]
    39c0:	ldrh	w9, [x9, #76]
    39c4:	madd	x11, x8, x18, x14
    39c8:	madd	x13, x8, x1, x14
    39cc:	cmp	w12, #0x8
    39d0:	add	x11, x11, x9
    39d4:	add	x13, x13, x9, lsl #2
    39d8:	ldrb	w9, [x11, x0]
    39dc:	ldr	w11, [x13, x2]
    39e0:	b.lt	3a20 <sendMTFValues+0x2de0>  // b.tstop
    39e4:	ldr	w13, [x21]
    39e8:	ldr	x12, [x25]
    39ec:	lsr	w10, w10, #24
    39f0:	strb	w10, [x12, w13, sxtw]
    39f4:	ldr	w10, [x21]
    39f8:	add	w13, w10, #0x1
    39fc:	str	w13, [x21]
    3a00:	ldr	w10, [x24]
    3a04:	lsl	w10, w10, #8
    3a08:	str	w10, [x24]
    3a0c:	ldr	w14, [x22]
    3a10:	sub	w12, w14, #0x8
    3a14:	cmp	w14, #0xf
    3a18:	str	w12, [x22]
    3a1c:	b.gt	39e8 <sendMTFValues+0x2da8>
    3a20:	add	w13, w12, w9
    3a24:	ldr	x14, [x29, #8]
    3a28:	neg	w12, w13
    3a2c:	lsl	w11, w11, w12
    3a30:	orr	w10, w11, w10
    3a34:	add	x9, x16, x27, lsl #1
    3a38:	str	w13, [x14, #644]
    3a3c:	str	w10, [x14, #640]
    3a40:	ldrh	w11, [x9, #78]
    3a44:	madd	x12, x8, x18, x14
    3a48:	madd	x14, x8, x1, x14
    3a4c:	cmp	w13, #0x8
    3a50:	add	x12, x12, x11
    3a54:	add	x11, x14, x11, lsl #2
    3a58:	ldrb	w12, [x12, x0]
    3a5c:	ldr	w11, [x11, x2]
    3a60:	b.lt	3aa0 <sendMTFValues+0x2e60>  // b.tstop
    3a64:	ldr	w14, [x21]
    3a68:	ldr	x13, [x25]
    3a6c:	lsr	w10, w10, #24
    3a70:	strb	w10, [x13, w14, sxtw]
    3a74:	ldr	w10, [x21]
    3a78:	add	w14, w10, #0x1
    3a7c:	str	w14, [x21]
    3a80:	ldr	w10, [x24]
    3a84:	lsl	w10, w10, #8
    3a88:	str	w10, [x24]
    3a8c:	ldr	w15, [x22]
    3a90:	sub	w13, w15, #0x8
    3a94:	cmp	w15, #0xf
    3a98:	str	w13, [x22]
    3a9c:	b.gt	3a68 <sendMTFValues+0x2e28>
    3aa0:	add	w12, w13, w12
    3aa4:	ldr	x14, [x29, #8]
    3aa8:	neg	w13, w12
    3aac:	lsl	w11, w11, w13
    3ab0:	orr	w10, w11, w10
    3ab4:	str	w12, [x14, #644]
    3ab8:	str	w10, [x14, #640]
    3abc:	ldrh	w9, [x9, #80]
    3ac0:	madd	x11, x8, x18, x14
    3ac4:	madd	x13, x8, x1, x14
    3ac8:	cmp	w12, #0x8
    3acc:	add	x11, x11, x9
    3ad0:	add	x13, x13, x9, lsl #2
    3ad4:	ldrb	w9, [x11, x0]
    3ad8:	ldr	w11, [x13, x2]
    3adc:	b.lt	3b1c <sendMTFValues+0x2edc>  // b.tstop
    3ae0:	ldr	w13, [x21]
    3ae4:	ldr	x12, [x25]
    3ae8:	lsr	w10, w10, #24
    3aec:	strb	w10, [x12, w13, sxtw]
    3af0:	ldr	w10, [x21]
    3af4:	add	w13, w10, #0x1
    3af8:	str	w13, [x21]
    3afc:	ldr	w10, [x24]
    3b00:	lsl	w10, w10, #8
    3b04:	str	w10, [x24]
    3b08:	ldr	w14, [x22]
    3b0c:	sub	w12, w14, #0x8
    3b10:	cmp	w14, #0xf
    3b14:	str	w12, [x22]
    3b18:	b.gt	3ae4 <sendMTFValues+0x2ea4>
    3b1c:	add	w13, w12, w9
    3b20:	ldr	x14, [x29, #8]
    3b24:	neg	w12, w13
    3b28:	lsl	w11, w11, w12
    3b2c:	orr	w10, w11, w10
    3b30:	add	x9, x16, x27, lsl #1
    3b34:	str	w13, [x14, #644]
    3b38:	str	w10, [x14, #640]
    3b3c:	ldrh	w11, [x9, #82]
    3b40:	madd	x12, x8, x18, x14
    3b44:	madd	x14, x8, x1, x14
    3b48:	cmp	w13, #0x8
    3b4c:	add	x12, x12, x11
    3b50:	add	x11, x14, x11, lsl #2
    3b54:	ldrb	w12, [x12, x0]
    3b58:	ldr	w11, [x11, x2]
    3b5c:	b.lt	3b9c <sendMTFValues+0x2f5c>  // b.tstop
    3b60:	ldr	w14, [x21]
    3b64:	ldr	x13, [x25]
    3b68:	lsr	w10, w10, #24
    3b6c:	strb	w10, [x13, w14, sxtw]
    3b70:	ldr	w10, [x21]
    3b74:	add	w14, w10, #0x1
    3b78:	str	w14, [x21]
    3b7c:	ldr	w10, [x24]
    3b80:	lsl	w10, w10, #8
    3b84:	str	w10, [x24]
    3b88:	ldr	w15, [x22]
    3b8c:	sub	w13, w15, #0x8
    3b90:	cmp	w15, #0xf
    3b94:	str	w13, [x22]
    3b98:	b.gt	3b64 <sendMTFValues+0x2f24>
    3b9c:	add	w12, w13, w12
    3ba0:	ldr	x14, [x29, #8]
    3ba4:	neg	w13, w12
    3ba8:	lsl	w11, w11, w13
    3bac:	orr	w10, w11, w10
    3bb0:	str	w12, [x14, #644]
    3bb4:	str	w10, [x14, #640]
    3bb8:	ldrh	w9, [x9, #84]
    3bbc:	madd	x11, x8, x18, x14
    3bc0:	madd	x13, x8, x1, x14
    3bc4:	cmp	w12, #0x8
    3bc8:	add	x11, x11, x9
    3bcc:	add	x13, x13, x9, lsl #2
    3bd0:	ldrb	w9, [x11, x0]
    3bd4:	ldr	w11, [x13, x2]
    3bd8:	b.lt	3c18 <sendMTFValues+0x2fd8>  // b.tstop
    3bdc:	ldr	w13, [x21]
    3be0:	ldr	x12, [x25]
    3be4:	lsr	w10, w10, #24
    3be8:	strb	w10, [x12, w13, sxtw]
    3bec:	ldr	w10, [x21]
    3bf0:	add	w13, w10, #0x1
    3bf4:	str	w13, [x21]
    3bf8:	ldr	w10, [x24]
    3bfc:	lsl	w10, w10, #8
    3c00:	str	w10, [x24]
    3c04:	ldr	w14, [x22]
    3c08:	sub	w12, w14, #0x8
    3c0c:	cmp	w14, #0xf
    3c10:	str	w12, [x22]
    3c14:	b.gt	3be0 <sendMTFValues+0x2fa0>
    3c18:	add	w13, w12, w9
    3c1c:	ldr	x14, [x29, #8]
    3c20:	neg	w12, w13
    3c24:	lsl	w11, w11, w12
    3c28:	orr	w10, w11, w10
    3c2c:	add	x9, x16, x27, lsl #1
    3c30:	str	w13, [x14, #644]
    3c34:	str	w10, [x14, #640]
    3c38:	ldrh	w11, [x9, #86]
    3c3c:	madd	x12, x8, x18, x14
    3c40:	madd	x14, x8, x1, x14
    3c44:	cmp	w13, #0x8
    3c48:	add	x12, x12, x11
    3c4c:	add	x11, x14, x11, lsl #2
    3c50:	ldrb	w12, [x12, x0]
    3c54:	ldr	w11, [x11, x2]
    3c58:	b.lt	3c98 <sendMTFValues+0x3058>  // b.tstop
    3c5c:	ldr	w14, [x21]
    3c60:	ldr	x13, [x25]
    3c64:	lsr	w10, w10, #24
    3c68:	strb	w10, [x13, w14, sxtw]
    3c6c:	ldr	w10, [x21]
    3c70:	add	w14, w10, #0x1
    3c74:	str	w14, [x21]
    3c78:	ldr	w10, [x24]
    3c7c:	lsl	w10, w10, #8
    3c80:	str	w10, [x24]
    3c84:	ldr	w15, [x22]
    3c88:	sub	w13, w15, #0x8
    3c8c:	cmp	w15, #0xf
    3c90:	str	w13, [x22]
    3c94:	b.gt	3c60 <sendMTFValues+0x3020>
    3c98:	add	w12, w13, w12
    3c9c:	ldr	x14, [x29, #8]
    3ca0:	neg	w13, w12
    3ca4:	lsl	w11, w11, w13
    3ca8:	orr	w10, w11, w10
    3cac:	str	w12, [x14, #644]
    3cb0:	str	w10, [x14, #640]
    3cb4:	ldrh	w9, [x9, #88]
    3cb8:	madd	x11, x8, x18, x14
    3cbc:	madd	x13, x8, x1, x14
    3cc0:	cmp	w12, #0x8
    3cc4:	add	x11, x11, x9
    3cc8:	add	x13, x13, x9, lsl #2
    3ccc:	ldrb	w9, [x11, x0]
    3cd0:	ldr	w11, [x13, x2]
    3cd4:	b.lt	3d14 <sendMTFValues+0x30d4>  // b.tstop
    3cd8:	ldr	w13, [x21]
    3cdc:	ldr	x12, [x25]
    3ce0:	lsr	w10, w10, #24
    3ce4:	strb	w10, [x12, w13, sxtw]
    3ce8:	ldr	w10, [x21]
    3cec:	add	w13, w10, #0x1
    3cf0:	str	w13, [x21]
    3cf4:	ldr	w10, [x24]
    3cf8:	lsl	w10, w10, #8
    3cfc:	str	w10, [x24]
    3d00:	ldr	w14, [x22]
    3d04:	sub	w12, w14, #0x8
    3d08:	cmp	w14, #0xf
    3d0c:	str	w12, [x22]
    3d10:	b.gt	3cdc <sendMTFValues+0x309c>
    3d14:	add	w13, w12, w9
    3d18:	ldr	x14, [x29, #8]
    3d1c:	neg	w12, w13
    3d20:	lsl	w11, w11, w12
    3d24:	orr	w10, w11, w10
    3d28:	add	x9, x16, x27, lsl #1
    3d2c:	str	w13, [x14, #644]
    3d30:	str	w10, [x14, #640]
    3d34:	ldrh	w11, [x9, #90]
    3d38:	madd	x12, x8, x18, x14
    3d3c:	madd	x14, x8, x1, x14
    3d40:	cmp	w13, #0x8
    3d44:	add	x12, x12, x11
    3d48:	add	x11, x14, x11, lsl #2
    3d4c:	ldrb	w12, [x12, x0]
    3d50:	ldr	w11, [x11, x2]
    3d54:	b.lt	3d94 <sendMTFValues+0x3154>  // b.tstop
    3d58:	ldr	w14, [x21]
    3d5c:	ldr	x13, [x25]
    3d60:	lsr	w10, w10, #24
    3d64:	strb	w10, [x13, w14, sxtw]
    3d68:	ldr	w10, [x21]
    3d6c:	add	w14, w10, #0x1
    3d70:	str	w14, [x21]
    3d74:	ldr	w10, [x24]
    3d78:	lsl	w10, w10, #8
    3d7c:	str	w10, [x24]
    3d80:	ldr	w15, [x22]
    3d84:	sub	w13, w15, #0x8
    3d88:	cmp	w15, #0xf
    3d8c:	str	w13, [x22]
    3d90:	b.gt	3d5c <sendMTFValues+0x311c>
    3d94:	add	w12, w13, w12
    3d98:	ldr	x14, [x29, #8]
    3d9c:	neg	w13, w12
    3da0:	lsl	w11, w11, w13
    3da4:	orr	w10, w11, w10
    3da8:	str	w12, [x14, #644]
    3dac:	str	w10, [x14, #640]
    3db0:	ldrh	w9, [x9, #92]
    3db4:	madd	x11, x8, x18, x14
    3db8:	madd	x13, x8, x1, x14
    3dbc:	cmp	w12, #0x8
    3dc0:	add	x11, x11, x9
    3dc4:	add	x13, x13, x9, lsl #2
    3dc8:	ldrb	w9, [x11, x0]
    3dcc:	ldr	w11, [x13, x2]
    3dd0:	b.lt	3e10 <sendMTFValues+0x31d0>  // b.tstop
    3dd4:	ldr	w13, [x21]
    3dd8:	ldr	x12, [x25]
    3ddc:	lsr	w10, w10, #24
    3de0:	strb	w10, [x12, w13, sxtw]
    3de4:	ldr	w10, [x21]
    3de8:	add	w13, w10, #0x1
    3dec:	str	w13, [x21]
    3df0:	ldr	w10, [x24]
    3df4:	lsl	w10, w10, #8
    3df8:	str	w10, [x24]
    3dfc:	ldr	w14, [x22]
    3e00:	sub	w12, w14, #0x8
    3e04:	cmp	w14, #0xf
    3e08:	str	w12, [x22]
    3e0c:	b.gt	3dd8 <sendMTFValues+0x3198>
    3e10:	add	w13, w12, w9
    3e14:	ldr	x14, [x29, #8]
    3e18:	neg	w12, w13
    3e1c:	lsl	w11, w11, w12
    3e20:	orr	w10, w11, w10
    3e24:	add	x9, x16, x27, lsl #1
    3e28:	str	w13, [x14, #644]
    3e2c:	str	w10, [x14, #640]
    3e30:	ldrh	w11, [x9, #94]
    3e34:	madd	x12, x8, x18, x14
    3e38:	madd	x14, x8, x1, x14
    3e3c:	cmp	w13, #0x8
    3e40:	add	x12, x12, x11
    3e44:	add	x11, x14, x11, lsl #2
    3e48:	ldrb	w12, [x12, x0]
    3e4c:	ldr	w11, [x11, x2]
    3e50:	b.lt	3e90 <sendMTFValues+0x3250>  // b.tstop
    3e54:	ldr	w14, [x21]
    3e58:	ldr	x13, [x25]
    3e5c:	lsr	w10, w10, #24
    3e60:	strb	w10, [x13, w14, sxtw]
    3e64:	ldr	w10, [x21]
    3e68:	add	w14, w10, #0x1
    3e6c:	str	w14, [x21]
    3e70:	ldr	w10, [x24]
    3e74:	lsl	w10, w10, #8
    3e78:	str	w10, [x24]
    3e7c:	ldr	w15, [x22]
    3e80:	sub	w13, w15, #0x8
    3e84:	cmp	w15, #0xf
    3e88:	str	w13, [x22]
    3e8c:	b.gt	3e58 <sendMTFValues+0x3218>
    3e90:	add	w12, w13, w12
    3e94:	ldr	x14, [x29, #8]
    3e98:	neg	w13, w12
    3e9c:	lsl	w11, w11, w13
    3ea0:	orr	w10, w11, w10
    3ea4:	str	w12, [x14, #644]
    3ea8:	str	w10, [x14, #640]
    3eac:	ldrh	w9, [x9, #96]
    3eb0:	madd	x11, x8, x18, x14
    3eb4:	madd	x13, x8, x1, x14
    3eb8:	cmp	w12, #0x8
    3ebc:	add	x11, x11, x9
    3ec0:	add	x9, x13, x9, lsl #2
    3ec4:	ldrb	w11, [x11, x0]
    3ec8:	ldr	w9, [x9, x2]
    3ecc:	b.lt	3f0c <sendMTFValues+0x32cc>  // b.tstop
    3ed0:	ldr	w13, [x21]
    3ed4:	ldr	x12, [x25]
    3ed8:	lsr	w10, w10, #24
    3edc:	strb	w10, [x12, w13, sxtw]
    3ee0:	ldr	w10, [x21]
    3ee4:	add	w13, w10, #0x1
    3ee8:	str	w13, [x21]
    3eec:	ldr	w10, [x24]
    3ef0:	lsl	w10, w10, #8
    3ef4:	str	w10, [x24]
    3ef8:	ldr	w14, [x22]
    3efc:	sub	w12, w14, #0x8
    3f00:	cmp	w14, #0xf
    3f04:	str	w12, [x22]
    3f08:	b.gt	3ed4 <sendMTFValues+0x3294>
    3f0c:	add	w11, w12, w11
    3f10:	ldr	x13, [x29, #8]
    3f14:	neg	w12, w11
    3f18:	lsl	w9, w9, w12
    3f1c:	orr	w9, w9, w10
    3f20:	str	w11, [x13, #644]
    3f24:	str	w9, [x13, #640]
    3f28:	ldrh	w10, [x16, x4, lsl #1]
    3f2c:	madd	x12, x8, x18, x13
    3f30:	madd	x8, x8, x1, x13
    3f34:	cmp	w11, #0x8
    3f38:	add	x12, x12, x10
    3f3c:	add	x8, x8, x10, lsl #2
    3f40:	ldrb	w10, [x12, x0]
    3f44:	ldr	w8, [x8, x2]
    3f48:	b.lt	265c <sendMTFValues+0x1a1c>  // b.tstop
    3f4c:	ldr	w12, [x21]
    3f50:	ldr	x11, [x25]
    3f54:	lsr	w9, w9, #24
    3f58:	strb	w9, [x11, w12, sxtw]
    3f5c:	ldr	w9, [x21]
    3f60:	add	w12, w9, #0x1
    3f64:	str	w12, [x21]
    3f68:	ldr	w9, [x24]
    3f6c:	lsl	w9, w9, #8
    3f70:	str	w9, [x24]
    3f74:	ldr	w13, [x22]
    3f78:	sub	w11, w13, #0x8
    3f7c:	cmp	w13, #0xf
    3f80:	str	w11, [x22]
    3f84:	b.gt	3f50 <sendMTFValues+0x3310>
    3f88:	b	265c <sendMTFValues+0x1a1c>
    3f8c:	cmp	w28, w27
    3f90:	b.lt	2674 <sendMTFValues+0x1a34>  // b.tstop
    3f94:	ldr	w11, [x22]
    3f98:	ldr	w10, [x24]
    3f9c:	sxtw	x9, w28
    3fa0:	b	3fc8 <sendMTFValues+0x3388>
    3fa4:	add	w11, w11, w13
    3fa8:	neg	w13, w11
    3fac:	lsl	w12, w12, w13
    3fb0:	cmp	x27, x9
    3fb4:	add	x27, x27, #0x1
    3fb8:	orr	w10, w12, w10
    3fbc:	str	w10, [x24]
    3fc0:	str	w11, [x22]
    3fc4:	b.ge	2674 <sendMTFValues+0x1a34>  // b.tcont
    3fc8:	ldrb	w12, [x8]
    3fcc:	ldr	x15, [x29, #8]
    3fd0:	ldrh	w13, [x16, x27, lsl #1]
    3fd4:	cmp	w11, #0x8
    3fd8:	madd	x14, x12, x18, x15
    3fdc:	madd	x12, x12, x1, x15
    3fe0:	add	x14, x14, x13
    3fe4:	add	x12, x12, x13, lsl #2
    3fe8:	ldrb	w13, [x14, x0]
    3fec:	ldr	w12, [x12, x2]
    3ff0:	b.lt	3fa4 <sendMTFValues+0x3364>  // b.tstop
    3ff4:	ldr	w14, [x21]
    3ff8:	ldr	x11, [x25]
    3ffc:	lsr	w10, w10, #24
    4000:	strb	w10, [x11, w14, sxtw]
    4004:	ldr	w10, [x21]
    4008:	add	w14, w10, #0x1
    400c:	str	w14, [x21]
    4010:	ldr	w10, [x24]
    4014:	lsl	w10, w10, #8
    4018:	str	w10, [x24]
    401c:	ldr	w15, [x22]
    4020:	sub	w11, w15, #0x8
    4024:	cmp	w15, #0xf
    4028:	str	w11, [x22]
    402c:	b.gt	3ff8 <sendMTFValues+0x33b8>
    4030:	b	3fa4 <sendMTFValues+0x3364>
    4034:	mov	w17, wzr
    4038:	ldur	x23, [x29, #-80]
    403c:	cmp	w17, w23
    4040:	b.eq	404c <sendMTFValues+0x340c>  // b.none
    4044:	mov	w0, #0xbbf                 	// #3007
    4048:	bl	0 <BZ2_bz__AssertH__fail>
    404c:	ldr	x8, [x29, #8]
    4050:	ldr	w8, [x8, #656]
    4054:	cmp	w8, #0x3
    4058:	b.ge	4120 <sendMTFValues+0x34e0>  // b.tcont
    405c:	ldp	x20, x19, [sp, #288]
    4060:	ldp	x22, x21, [sp, #272]
    4064:	ldp	x24, x23, [sp, #256]
    4068:	ldp	x26, x25, [sp, #240]
    406c:	ldp	x28, x27, [sp, #224]
    4070:	ldp	x29, x30, [sp, #208]
    4074:	ldr	d8, [sp, #192]
    4078:	add	sp, sp, #0x130
    407c:	ret
    4080:	ldr	x0, [x8]
    4084:	ldr	x8, [x29, #8]
    4088:	adrp	x1, 0 <BZ2_bsInitWrite>
    408c:	add	x1, x1, #0x0
    4090:	ldr	w2, [x8, #108]
    4094:	ldr	w3, [x8, #668]
    4098:	ldr	w4, [x8, #124]
    409c:	bl	0 <fprintf>
    40a0:	b	c80 <sendMTFValues+0x40>
    40a4:	ldr	x0, [x19]
    40a8:	adrp	x1, 0 <BZ2_bsInitWrite>
    40ac:	sub	w2, w9, w8
    40b0:	add	x1, x1, #0x0
    40b4:	bl	0 <fprintf>
    40b8:	ldr	x6, [sp, #56]
    40bc:	ldr	w9, [x21]
    40c0:	ldr	w10, [x22]
    40c4:	ldr	w11, [x24]
    40c8:	mov	w8, w9
    40cc:	cmp	w10, #0x8
    40d0:	b.ge	2244 <sendMTFValues+0x1604>  // b.tcont
    40d4:	b	227c <sendMTFValues+0x163c>
    40d8:	ldr	x0, [x19]
    40dc:	adrp	x1, 0 <BZ2_bsInitWrite>
    40e0:	sub	w2, w8, w9
    40e4:	add	x1, x1, #0x0
    40e8:	bl	0 <fprintf>
    40ec:	ldr	x6, [sp, #56]
    40f0:	ldr	w8, [x21]
    40f4:	ldr	w11, [x22]
    40f8:	ldr	w10, [x24]
    40fc:	b	2414 <sendMTFValues+0x17d4>
    4100:	adrp	x9, 0 <stderr>
    4104:	ldr	x0, [x9]
    4108:	adrp	x1, 0 <BZ2_bsInitWrite>
    410c:	sub	w2, w26, w8
    4110:	add	x1, x1, #0x0
    4114:	bl	0 <fprintf>
    4118:	ldr	w26, [x21]
    411c:	b	262c <sendMTFValues+0x19ec>
    4120:	ldr	w8, [x21]
    4124:	adrp	x9, 0 <stderr>
    4128:	ldr	x0, [x9]
    412c:	adrp	x1, 0 <BZ2_bsInitWrite>
    4130:	sub	w2, w8, w26
    4134:	add	x1, x1, #0x0
    4138:	bl	0 <fprintf>
    413c:	b	405c <sendMTFValues+0x341c>

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	sub	sp, sp, #0xf0
       4:	stp	x29, x30, [sp, #144]
       8:	stp	x28, x27, [sp, #160]
       c:	stp	x26, x25, [sp, #176]
      10:	stp	x24, x23, [sp, #192]
      14:	stp	x22, x21, [sp, #208]
      18:	stp	x20, x19, [sp, #224]
      1c:	add	x29, sp, #0x90
      20:	ldr	w8, [x0, #8]
      24:	ldr	x22, [x0]
      28:	mov	w9, #0xfa24                	// #64036
      2c:	mov	x21, x0
      30:	subs	w8, w8, #0xa
      34:	add	x25, x0, x9
      38:	b.ne	100 <BZ2_decompress+0x100>  // b.any
      3c:	mov	x28, xzr
      40:	mov	x23, xzr
      44:	mov	x26, xzr
      48:	mov	w24, wzr
      4c:	mov	w15, wzr
      50:	mov	w14, wzr
      54:	mov	w20, wzr
      58:	mov	w17, wzr
      5c:	mov	w4, wzr
      60:	mov	w3, wzr
      64:	mov	w5, wzr
      68:	mov	w7, wzr
      6c:	mov	w6, wzr
      70:	mov	w1, wzr
      74:	mov	w30, wzr
      78:	mov	w16, wzr
      7c:	mov	w27, wzr
      80:	mov	w2, wzr
      84:	mov	w18, wzr
      88:	mov	w19, wzr
      8c:	movi	v0.2d, #0x0
      90:	stur	xzr, [x29, #-36]
      94:	stur	wzr, [x29, #-20]
      98:	stur	xzr, [x29, #-16]
      9c:	stur	q0, [x25, #92]
      a0:	stp	q0, q0, [x25, #64]
      a4:	stp	q0, q0, [x25, #32]
      a8:	stp	q0, q0, [x25]
      ac:	cmp	w8, #0x28
      b0:	b.hi	150 <BZ2_decompress+0x150>  // b.pmore
      b4:	adrp	x10, 0 <BZ2_decompress>
      b8:	add	x10, x10, #0x0
      bc:	adr	x9, cc <BZ2_decompress+0xcc>
      c0:	ldrh	w11, [x10, x8, lsl #1]
      c4:	add	x9, x9, x11, lsl #2
      c8:	br	x9
      cc:	ldr	w8, [x21, #36]
      d0:	mov	w9, #0xa                   	// #10
      d4:	str	w9, [x21, #8]
      d8:	cmp	w8, #0x8
      dc:	b.lt	b48 <BZ2_decompress+0xb48>  // b.tstop
      e0:	ldr	w9, [x21, #32]
      e4:	sub	w8, w8, #0x8
      e8:	lsr	w9, w9, w8
      ec:	and	w9, w9, #0xff
      f0:	cmp	w9, #0x42
      f4:	str	w8, [x21, #36]
      f8:	b.eq	1f8 <BZ2_decompress+0x1f8>  // b.none
      fc:	b	290 <BZ2_decompress+0x290>
     100:	ldp	w9, w19, [x25]
     104:	ldr	w24, [x25, #80]
     108:	ldur	x26, [x25, #84]
     10c:	ldur	x23, [x25, #92]
     110:	stur	x9, [x29, #-16]
     114:	ldp	w9, w30, [x25, #24]
     118:	ldp	w18, w2, [x25, #8]
     11c:	ldp	w27, w16, [x25, #16]
     120:	ldur	x28, [x25, #100]
     124:	stur	w9, [x29, #-32]
     128:	ldp	w1, w9, [x25, #32]
     12c:	stur	w9, [x29, #-20]
     130:	ldp	w4, w9, [x25, #56]
     134:	ldp	w6, w7, [x25, #40]
     138:	ldp	w5, w3, [x25, #48]
     13c:	stur	w9, [x29, #-36]
     140:	ldp	w17, w20, [x25, #64]
     144:	ldp	w14, w15, [x25, #72]
     148:	cmp	w8, #0x28
     14c:	b.ls	b4 <BZ2_decompress+0xb4>  // b.plast
     150:	mov	w0, #0xfa1                 	// #4001
     154:	str	w3, [sp, #68]
     158:	stur	w4, [x29, #-52]
     15c:	stur	w19, [x29, #-44]
     160:	str	w20, [sp, #64]
     164:	stp	x26, x23, [sp, #40]
     168:	str	x28, [sp, #72]
     16c:	str	w24, [sp, #56]
     170:	stur	w14, [x29, #-48]
     174:	stur	x15, [x29, #-64]
     178:	mov	w19, w16
     17c:	mov	w20, w5
     180:	mov	x23, x17
     184:	mov	x26, x6
     188:	mov	x21, x7
     18c:	mov	x28, x30
     190:	mov	w24, w18
     194:	mov	w22, w1
     198:	stur	w27, [x29, #-40]
     19c:	mov	w27, w2
     1a0:	bl	0 <BZ2_bz__AssertH__fail>
     1a4:	mov	w0, #0xfa2                 	// #4002
     1a8:	bl	0 <BZ2_bz__AssertH__fail>
     1ac:	mov	w2, w27
     1b0:	mov	w18, w24
     1b4:	mov	x30, x28
     1b8:	mov	x6, x26
     1bc:	mov	x17, x23
     1c0:	mov	w5, w20
     1c4:	mov	w16, w19
     1c8:	ldur	x15, [x29, #-64]
     1cc:	ldp	w4, w14, [x29, #-52]
     1d0:	ldr	w24, [sp, #56]
     1d4:	ldr	x28, [sp, #72]
     1d8:	ldp	x26, x23, [sp, #40]
     1dc:	ldp	w20, w3, [sp, #64]
     1e0:	ldp	w19, w27, [x29, #-44]
     1e4:	mov	w1, w22
     1e8:	mov	x7, x21
     1ec:	mov	w0, wzr
     1f0:	b	179c <BZ2_decompress+0x179c>
     1f4:	ldr	w8, [x21, #36]
     1f8:	mov	w9, #0xb                   	// #11
     1fc:	cmp	w8, #0x8
     200:	str	w9, [x21, #8]
     204:	b.lt	9bc <BZ2_decompress+0x9bc>  // b.tstop
     208:	ldr	w9, [x21, #32]
     20c:	sub	w8, w8, #0x8
     210:	lsr	w9, w9, w8
     214:	and	w9, w9, #0xff
     218:	cmp	w9, #0x5a
     21c:	str	w8, [x21, #36]
     220:	b.eq	22c <BZ2_decompress+0x22c>  // b.none
     224:	b	290 <BZ2_decompress+0x290>
     228:	ldr	w8, [x21, #36]
     22c:	mov	w9, #0xc                   	// #12
     230:	cmp	w8, #0x8
     234:	str	w9, [x21, #8]
     238:	b.lt	960 <BZ2_decompress+0x960>  // b.tstop
     23c:	ldr	w9, [x21, #32]
     240:	sub	w8, w8, #0x8
     244:	lsr	w9, w9, w8
     248:	and	w9, w9, #0xff
     24c:	cmp	w9, #0x68
     250:	str	w8, [x21, #36]
     254:	b.eq	260 <BZ2_decompress+0x260>  // b.none
     258:	b	290 <BZ2_decompress+0x290>
     25c:	ldr	w8, [x21, #36]
     260:	mov	w9, #0xd                   	// #13
     264:	cmp	w8, #0x8
     268:	str	w9, [x21, #8]
     26c:	b.lt	904 <BZ2_decompress+0x904>  // b.tstop
     270:	ldr	w9, [x21, #32]
     274:	sub	w10, w8, #0x8
     278:	lsr	w8, w9, w10
     27c:	and	w8, w8, #0xff
     280:	sub	w9, w8, #0x31
     284:	cmp	w9, #0x8
     288:	stp	w10, w8, [x21, #36]
     28c:	b.ls	a7c <BZ2_decompress+0xa7c>  // b.plast
     290:	mov	w0, #0xfffffffb            	// #-5
     294:	b	179c <BZ2_decompress+0x179c>
     298:	ldr	w8, [x21, #36]
     29c:	b	c24 <BZ2_decompress+0xc24>
     2a0:	ldr	w8, [x21, #36]
     2a4:	b	c50 <BZ2_decompress+0xc50>
     2a8:	ldr	w8, [x21, #36]
     2ac:	b	c7c <BZ2_decompress+0xc7c>
     2b0:	ldr	w8, [x21, #36]
     2b4:	b	ca8 <BZ2_decompress+0xca8>
     2b8:	ldr	w8, [x21, #36]
     2bc:	b	cd4 <BZ2_decompress+0xcd4>
     2c0:	ldr	w8, [x21, #36]
     2c4:	mov	w9, #0x15                  	// #21
     2c8:	cmp	w8, #0x8
     2cc:	str	w9, [x21, #8]
     2d0:	b.ge	d68 <BZ2_decompress+0xd68>  // b.tcont
     2d4:	ldr	x10, [x21]
     2d8:	ldr	w9, [x10, #8]
     2dc:	sub	w11, w9, #0x1
     2e0:	b	2f0 <BZ2_decompress+0x2f0>
     2e4:	cmp	w8, #0x8
     2e8:	sub	w11, w11, #0x1
     2ec:	b.pl	d6c <BZ2_decompress+0xd6c>  // b.nfrst
     2f0:	cmn	w11, #0x1
     2f4:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     2f8:	ldr	x12, [x10]
     2fc:	ldr	w13, [x21, #32]
     300:	add	w8, w8, #0x8
     304:	ldrb	w9, [x12], #1
     308:	bfi	w9, w13, #8, #24
     30c:	stp	w9, w8, [x21, #32]
     310:	ldr	w13, [x10, #12]
     314:	str	x12, [x10]
     318:	adds	w12, w13, #0x1
     31c:	stp	w11, w12, [x10, #8]
     320:	b.cc	2e4 <BZ2_decompress+0x2e4>  // b.lo, b.ul, b.last
     324:	ldr	w12, [x10, #16]
     328:	add	w12, w12, #0x1
     32c:	str	w12, [x10, #16]
     330:	b	2e4 <BZ2_decompress+0x2e4>
     334:	ldr	w8, [x21, #36]
     338:	mov	w9, #0x16                  	// #22
     33c:	cmp	w8, #0x8
     340:	str	w9, [x21, #8]
     344:	b.ge	d94 <BZ2_decompress+0xd94>  // b.tcont
     348:	ldr	x10, [x21]
     34c:	ldr	w9, [x10, #8]
     350:	sub	w11, w9, #0x1
     354:	b	364 <BZ2_decompress+0x364>
     358:	cmp	w8, #0x8
     35c:	sub	w11, w11, #0x1
     360:	b.pl	d98 <BZ2_decompress+0xd98>  // b.nfrst
     364:	cmn	w11, #0x1
     368:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     36c:	ldr	x12, [x10]
     370:	ldr	w13, [x21, #32]
     374:	add	w8, w8, #0x8
     378:	ldrb	w9, [x12], #1
     37c:	bfi	w9, w13, #8, #24
     380:	stp	w9, w8, [x21, #32]
     384:	ldr	w13, [x10, #12]
     388:	str	x12, [x10]
     38c:	adds	w12, w13, #0x1
     390:	stp	w11, w12, [x10, #8]
     394:	b.cc	358 <BZ2_decompress+0x358>  // b.lo, b.ul, b.last
     398:	ldr	w12, [x10, #16]
     39c:	add	w12, w12, #0x1
     3a0:	str	w12, [x10, #16]
     3a4:	b	358 <BZ2_decompress+0x358>
     3a8:	ldr	w8, [x21, #36]
     3ac:	mov	w9, #0x17                  	// #23
     3b0:	cmp	w8, #0x8
     3b4:	str	w9, [x21, #8]
     3b8:	b.ge	dc0 <BZ2_decompress+0xdc0>  // b.tcont
     3bc:	ldr	x10, [x21]
     3c0:	ldr	w9, [x10, #8]
     3c4:	sub	w11, w9, #0x1
     3c8:	b	3d8 <BZ2_decompress+0x3d8>
     3cc:	cmp	w8, #0x8
     3d0:	sub	w11, w11, #0x1
     3d4:	b.pl	dc4 <BZ2_decompress+0xdc4>  // b.nfrst
     3d8:	cmn	w11, #0x1
     3dc:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     3e0:	ldr	x12, [x10]
     3e4:	ldr	w13, [x21, #32]
     3e8:	add	w8, w8, #0x8
     3ec:	ldrb	w9, [x12], #1
     3f0:	bfi	w9, w13, #8, #24
     3f4:	stp	w9, w8, [x21, #32]
     3f8:	ldr	w13, [x10, #12]
     3fc:	str	x12, [x10]
     400:	adds	w12, w13, #0x1
     404:	stp	w11, w12, [x10, #8]
     408:	b.cc	3cc <BZ2_decompress+0x3cc>  // b.lo, b.ul, b.last
     40c:	ldr	w12, [x10, #16]
     410:	add	w12, w12, #0x1
     414:	str	w12, [x10, #16]
     418:	b	3cc <BZ2_decompress+0x3cc>
     41c:	ldr	w8, [x21, #36]
     420:	b	ddc <BZ2_decompress+0xddc>
     424:	ldr	w8, [x21, #36]
     428:	mov	w9, #0x19                  	// #25
     42c:	cmp	w8, #0x8
     430:	str	w9, [x21, #8]
     434:	b.ge	e18 <BZ2_decompress+0xe18>  // b.tcont
     438:	ldr	x10, [x21]
     43c:	ldr	w9, [x10, #8]
     440:	sub	w11, w9, #0x1
     444:	b	454 <BZ2_decompress+0x454>
     448:	cmp	w8, #0x8
     44c:	sub	w11, w11, #0x1
     450:	b.pl	e1c <BZ2_decompress+0xe1c>  // b.nfrst
     454:	cmn	w11, #0x1
     458:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     45c:	ldr	x12, [x10]
     460:	ldr	w13, [x21, #32]
     464:	add	w8, w8, #0x8
     468:	ldrb	w9, [x12], #1
     46c:	bfi	w9, w13, #8, #24
     470:	stp	w9, w8, [x21, #32]
     474:	ldr	w13, [x10, #12]
     478:	str	x12, [x10]
     47c:	adds	w12, w13, #0x1
     480:	stp	w11, w12, [x10, #8]
     484:	b.cc	448 <BZ2_decompress+0x448>  // b.lo, b.ul, b.last
     488:	ldr	w12, [x10, #16]
     48c:	add	w12, w12, #0x1
     490:	str	w12, [x10, #16]
     494:	b	448 <BZ2_decompress+0x448>
     498:	ldr	w8, [x21, #36]
     49c:	mov	w9, #0x1a                  	// #26
     4a0:	cmp	w8, #0x8
     4a4:	str	w9, [x21, #8]
     4a8:	b.ge	e44 <BZ2_decompress+0xe44>  // b.tcont
     4ac:	ldr	x10, [x21]
     4b0:	ldr	w9, [x10, #8]
     4b4:	sub	w11, w9, #0x1
     4b8:	b	4c8 <BZ2_decompress+0x4c8>
     4bc:	cmp	w8, #0x8
     4c0:	sub	w11, w11, #0x1
     4c4:	b.pl	e48 <BZ2_decompress+0xe48>  // b.nfrst
     4c8:	cmn	w11, #0x1
     4cc:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     4d0:	ldr	x12, [x10]
     4d4:	ldr	w13, [x21, #32]
     4d8:	add	w8, w8, #0x8
     4dc:	ldrb	w9, [x12], #1
     4e0:	bfi	w9, w13, #8, #24
     4e4:	stp	w9, w8, [x21, #32]
     4e8:	ldr	w13, [x10, #12]
     4ec:	str	x12, [x10]
     4f0:	adds	w12, w13, #0x1
     4f4:	stp	w11, w12, [x10, #8]
     4f8:	b.cc	4bc <BZ2_decompress+0x4bc>  // b.lo, b.ul, b.last
     4fc:	ldr	w12, [x10, #16]
     500:	add	w12, w12, #0x1
     504:	str	w12, [x10, #16]
     508:	b	4bc <BZ2_decompress+0x4bc>
     50c:	ldr	w8, [x21, #36]
     510:	mov	w9, #0x1b                  	// #27
     514:	cmp	w8, #0x8
     518:	str	w9, [x21, #8]
     51c:	b.ge	e70 <BZ2_decompress+0xe70>  // b.tcont
     520:	ldr	x9, [x21]
     524:	ldr	w10, [x9, #8]
     528:	sub	w11, w10, #0x1
     52c:	b	53c <BZ2_decompress+0x53c>
     530:	cmp	w8, #0x8
     534:	sub	w11, w11, #0x1
     538:	b.pl	e74 <BZ2_decompress+0xe74>  // b.nfrst
     53c:	cmn	w11, #0x1
     540:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     544:	ldr	x12, [x9]
     548:	ldr	w13, [x21, #32]
     54c:	add	w8, w8, #0x8
     550:	ldrb	w10, [x12], #1
     554:	bfi	w10, w13, #8, #24
     558:	stp	w10, w8, [x21, #32]
     55c:	ldr	w13, [x9, #12]
     560:	str	x12, [x9]
     564:	adds	w12, w13, #0x1
     568:	stp	w11, w12, [x9, #8]
     56c:	b.cc	530 <BZ2_decompress+0x530>  // b.lo, b.ul, b.last
     570:	ldr	w12, [x9, #16]
     574:	add	w12, w12, #0x1
     578:	str	w12, [x9, #16]
     57c:	b	530 <BZ2_decompress+0x530>
     580:	ldr	w8, [x21, #36]
     584:	mov	w9, #0x1f                  	// #31
     588:	cmp	w8, #0xf
     58c:	str	w9, [x21, #8]
     590:	b.lt	a18 <BZ2_decompress+0xa18>  // b.tstop
     594:	ldr	w10, [x21, #32]
     598:	sub	w8, w8, #0xf
     59c:	lsr	w10, w10, w8
     5a0:	mov	w9, wzr
     5a4:	ands	w16, w10, #0x7fff
     5a8:	str	w8, [x21, #36]
     5ac:	b.ne	19d8 <BZ2_decompress+0x19d8>  // b.any
     5b0:	mov	w0, #0xfffffffc            	// #-4
     5b4:	mov	w16, w9
     5b8:	b	179c <BZ2_decompress+0x179c>
     5bc:	ldr	w8, [x21, #36]
     5c0:	b	212c <BZ2_decompress+0x212c>
     5c4:	ldr	w8, [x21, #36]
     5c8:	b	16a0 <BZ2_decompress+0x16a0>
     5cc:	ldr	w8, [x21, #36]
     5d0:	mov	w9, #0x27                  	// #39
     5d4:	cmp	w8, #0x1
     5d8:	str	w9, [x21, #8]
     5dc:	b.ge	174c <BZ2_decompress+0x174c>  // b.tcont
     5e0:	ldr	x9, [x21]
     5e4:	ldr	w10, [x9, #8]
     5e8:	sub	w11, w10, #0x1
     5ec:	b	600 <BZ2_decompress+0x600>
     5f0:	sub	w12, w8, #0x8
     5f4:	cmn	w12, #0x8
     5f8:	sub	w11, w11, #0x1
     5fc:	b.gt	1750 <BZ2_decompress+0x1750>
     600:	cmn	w11, #0x1
     604:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     608:	ldr	x12, [x9]
     60c:	ldr	w13, [x21, #32]
     610:	add	w8, w8, #0x8
     614:	ldrb	w10, [x12], #1
     618:	bfi	w10, w13, #8, #24
     61c:	stp	w10, w8, [x21, #32]
     620:	ldr	w13, [x9, #12]
     624:	str	x12, [x9]
     628:	adds	w12, w13, #0x1
     62c:	stp	w11, w12, [x9, #8]
     630:	b.cc	5f0 <BZ2_decompress+0x5f0>  // b.lo, b.ul, b.last
     634:	ldr	w12, [x9, #16]
     638:	add	w12, w12, #0x1
     63c:	str	w12, [x9, #16]
     640:	b	5f0 <BZ2_decompress+0x5f0>
     644:	ldr	w8, [x21, #36]
     648:	mov	w9, #0x29                  	// #41
     64c:	cmp	w8, #0x1
     650:	str	w9, [x21, #8]
     654:	b.ge	176c <BZ2_decompress+0x176c>  // b.tcont
     658:	ldr	x9, [x21]
     65c:	ldr	w10, [x9, #8]
     660:	sub	w11, w10, #0x1
     664:	b	678 <BZ2_decompress+0x678>
     668:	sub	w12, w8, #0x8
     66c:	cmn	w12, #0x8
     670:	sub	w11, w11, #0x1
     674:	b.gt	1770 <BZ2_decompress+0x1770>
     678:	cmn	w11, #0x1
     67c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     680:	ldr	x12, [x9]
     684:	ldr	w13, [x21, #32]
     688:	add	w8, w8, #0x8
     68c:	ldrb	w10, [x12], #1
     690:	bfi	w10, w13, #8, #24
     694:	stp	w10, w8, [x21, #32]
     698:	ldr	w13, [x9, #12]
     69c:	str	x12, [x9]
     6a0:	adds	w12, w13, #0x1
     6a4:	stp	w11, w12, [x9, #8]
     6a8:	b.cc	668 <BZ2_decompress+0x668>  // b.lo, b.ul, b.last
     6ac:	ldr	w12, [x9, #16]
     6b0:	add	w12, w12, #0x1
     6b4:	str	w12, [x9, #16]
     6b8:	b	668 <BZ2_decompress+0x668>
     6bc:	ldr	w8, [x21, #36]
     6c0:	b	eb8 <BZ2_decompress+0xeb8>
     6c4:	ldr	w8, [x21, #36]
     6c8:	b	ee4 <BZ2_decompress+0xee4>
     6cc:	ldr	w8, [x21, #36]
     6d0:	b	f10 <BZ2_decompress+0xf10>
     6d4:	ldr	w8, [x21, #36]
     6d8:	b	f3c <BZ2_decompress+0xf3c>
     6dc:	ldr	w8, [x21, #36]
     6e0:	b	f68 <BZ2_decompress+0xf68>
     6e4:	ldr	w8, [x21, #36]
     6e8:	mov	w9, #0x2f                  	// #47
     6ec:	cmp	w8, #0x8
     6f0:	str	w9, [x21, #8]
     6f4:	b.lt	fa8 <BZ2_decompress+0xfa8>  // b.tstop
     6f8:	ldr	w9, [x21, #32]
     6fc:	ldr	w10, [x21, #3180]
     700:	sub	w8, w8, #0x8
     704:	lsr	w9, w9, w8
     708:	str	w8, [x21, #36]
     70c:	bfi	w9, w10, #8, #24
     710:	str	w9, [x21, #3180]
     714:	mov	w9, #0x30                  	// #48
     718:	cmp	w8, #0x8
     71c:	str	w9, [x21, #8]
     720:	b.lt	7bc <BZ2_decompress+0x7bc>  // b.tstop
     724:	ldr	w9, [x21, #32]
     728:	ldr	w10, [x21, #3180]
     72c:	sub	w8, w8, #0x8
     730:	lsr	w9, w9, w8
     734:	str	w8, [x21, #36]
     738:	bfi	w9, w10, #8, #24
     73c:	str	w9, [x21, #3180]
     740:	mov	w9, #0x31                  	// #49
     744:	cmp	w8, #0x8
     748:	str	w9, [x21, #8]
     74c:	b.lt	830 <BZ2_decompress+0x830>  // b.tstop
     750:	ldr	w9, [x21, #32]
     754:	ldr	w10, [x21, #3180]
     758:	sub	w8, w8, #0x8
     75c:	lsr	w9, w9, w8
     760:	str	w8, [x21, #36]
     764:	bfi	w9, w10, #8, #24
     768:	str	w9, [x21, #3180]
     76c:	mov	w9, #0x32                  	// #50
     770:	cmp	w8, #0x8
     774:	str	w9, [x21, #8]
     778:	b.lt	8a4 <BZ2_decompress+0x8a4>  // b.tstop
     77c:	ldr	w9, [x21, #32]
     780:	ldr	w10, [x21, #3180]
     784:	sub	w8, w8, #0x8
     788:	lsr	w9, w9, w8
     78c:	mov	w11, #0x1                   	// #1
     790:	bfi	w9, w10, #8, #24
     794:	str	w8, [x21, #36]
     798:	str	w11, [x21, #8]
     79c:	str	w9, [x21, #3180]
     7a0:	mov	w0, #0x4                   	// #4
     7a4:	b	179c <BZ2_decompress+0x179c>
     7a8:	ldr	w8, [x21, #36]
     7ac:	mov	w9, #0x30                  	// #48
     7b0:	cmp	w8, #0x8
     7b4:	str	w9, [x21, #8]
     7b8:	b.ge	724 <BZ2_decompress+0x724>  // b.tcont
     7bc:	ldr	x10, [x21]
     7c0:	ldr	w9, [x10, #8]
     7c4:	sub	w11, w9, #0x1
     7c8:	b	7d8 <BZ2_decompress+0x7d8>
     7cc:	cmp	w8, #0x8
     7d0:	sub	w11, w11, #0x1
     7d4:	b.pl	728 <BZ2_decompress+0x728>  // b.nfrst
     7d8:	cmn	w11, #0x1
     7dc:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     7e0:	ldr	x12, [x10]
     7e4:	ldr	w13, [x21, #32]
     7e8:	add	w8, w8, #0x8
     7ec:	ldrb	w9, [x12], #1
     7f0:	bfi	w9, w13, #8, #24
     7f4:	stp	w9, w8, [x21, #32]
     7f8:	ldr	w13, [x10, #12]
     7fc:	str	x12, [x10]
     800:	adds	w12, w13, #0x1
     804:	stp	w11, w12, [x10, #8]
     808:	b.cc	7cc <BZ2_decompress+0x7cc>  // b.lo, b.ul, b.last
     80c:	ldr	w12, [x10, #16]
     810:	add	w12, w12, #0x1
     814:	str	w12, [x10, #16]
     818:	b	7cc <BZ2_decompress+0x7cc>
     81c:	ldr	w8, [x21, #36]
     820:	mov	w9, #0x31                  	// #49
     824:	cmp	w8, #0x8
     828:	str	w9, [x21, #8]
     82c:	b.ge	750 <BZ2_decompress+0x750>  // b.tcont
     830:	ldr	x10, [x21]
     834:	ldr	w9, [x10, #8]
     838:	sub	w11, w9, #0x1
     83c:	b	84c <BZ2_decompress+0x84c>
     840:	cmp	w8, #0x8
     844:	sub	w11, w11, #0x1
     848:	b.pl	754 <BZ2_decompress+0x754>  // b.nfrst
     84c:	cmn	w11, #0x1
     850:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     854:	ldr	x12, [x10]
     858:	ldr	w13, [x21, #32]
     85c:	add	w8, w8, #0x8
     860:	ldrb	w9, [x12], #1
     864:	bfi	w9, w13, #8, #24
     868:	stp	w9, w8, [x21, #32]
     86c:	ldr	w13, [x10, #12]
     870:	str	x12, [x10]
     874:	adds	w12, w13, #0x1
     878:	stp	w11, w12, [x10, #8]
     87c:	b.cc	840 <BZ2_decompress+0x840>  // b.lo, b.ul, b.last
     880:	ldr	w12, [x10, #16]
     884:	add	w12, w12, #0x1
     888:	str	w12, [x10, #16]
     88c:	b	840 <BZ2_decompress+0x840>
     890:	ldr	w8, [x21, #36]
     894:	mov	w9, #0x32                  	// #50
     898:	cmp	w8, #0x8
     89c:	str	w9, [x21, #8]
     8a0:	b.ge	77c <BZ2_decompress+0x77c>  // b.tcont
     8a4:	ldr	x10, [x21]
     8a8:	ldr	w9, [x10, #8]
     8ac:	sub	w11, w9, #0x1
     8b0:	b	8c0 <BZ2_decompress+0x8c0>
     8b4:	cmp	w8, #0x8
     8b8:	sub	w11, w11, #0x1
     8bc:	b.pl	780 <BZ2_decompress+0x780>  // b.nfrst
     8c0:	cmn	w11, #0x1
     8c4:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     8c8:	ldr	x12, [x10]
     8cc:	ldr	w13, [x21, #32]
     8d0:	add	w8, w8, #0x8
     8d4:	ldrb	w9, [x12], #1
     8d8:	bfi	w9, w13, #8, #24
     8dc:	stp	w9, w8, [x21, #32]
     8e0:	ldr	w13, [x10, #12]
     8e4:	str	x12, [x10]
     8e8:	adds	w12, w13, #0x1
     8ec:	stp	w11, w12, [x10, #8]
     8f0:	b.cc	8b4 <BZ2_decompress+0x8b4>  // b.lo, b.ul, b.last
     8f4:	ldr	w12, [x10, #16]
     8f8:	add	w12, w12, #0x1
     8fc:	str	w12, [x10, #16]
     900:	b	8b4 <BZ2_decompress+0x8b4>
     904:	ldr	w9, [x22, #8]
     908:	sub	w10, w9, #0x1
     90c:	b	91c <BZ2_decompress+0x91c>
     910:	cmp	w8, #0x8
     914:	sub	w10, w10, #0x1
     918:	b.pl	274 <BZ2_decompress+0x274>  // b.nfrst
     91c:	cmn	w10, #0x1
     920:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     924:	ldr	x11, [x22]
     928:	ldr	w12, [x21, #32]
     92c:	add	w8, w8, #0x8
     930:	ldrb	w9, [x11], #1
     934:	bfi	w9, w12, #8, #24
     938:	stp	w9, w8, [x21, #32]
     93c:	ldr	w12, [x22, #12]
     940:	str	x11, [x22]
     944:	adds	w11, w12, #0x1
     948:	stp	w10, w11, [x22, #8]
     94c:	b.cc	910 <BZ2_decompress+0x910>  // b.lo, b.ul, b.last
     950:	ldr	w11, [x22, #16]
     954:	add	w11, w11, #0x1
     958:	str	w11, [x22, #16]
     95c:	b	910 <BZ2_decompress+0x910>
     960:	ldr	w9, [x22, #8]
     964:	sub	w10, w9, #0x1
     968:	b	978 <BZ2_decompress+0x978>
     96c:	cmp	w8, #0x8
     970:	sub	w10, w10, #0x1
     974:	b.pl	240 <BZ2_decompress+0x240>  // b.nfrst
     978:	cmn	w10, #0x1
     97c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     980:	ldr	x11, [x22]
     984:	ldr	w12, [x21, #32]
     988:	add	w8, w8, #0x8
     98c:	ldrb	w9, [x11], #1
     990:	bfi	w9, w12, #8, #24
     994:	stp	w9, w8, [x21, #32]
     998:	ldr	w12, [x22, #12]
     99c:	str	x11, [x22]
     9a0:	adds	w11, w12, #0x1
     9a4:	stp	w10, w11, [x22, #8]
     9a8:	b.cc	96c <BZ2_decompress+0x96c>  // b.lo, b.ul, b.last
     9ac:	ldr	w11, [x22, #16]
     9b0:	add	w11, w11, #0x1
     9b4:	str	w11, [x22, #16]
     9b8:	b	96c <BZ2_decompress+0x96c>
     9bc:	ldr	w9, [x22, #8]
     9c0:	sub	w10, w9, #0x1
     9c4:	b	9d4 <BZ2_decompress+0x9d4>
     9c8:	cmp	w8, #0x8
     9cc:	sub	w10, w10, #0x1
     9d0:	b.pl	20c <BZ2_decompress+0x20c>  // b.nfrst
     9d4:	cmn	w10, #0x1
     9d8:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     9dc:	ldr	x11, [x22]
     9e0:	ldr	w12, [x21, #32]
     9e4:	add	w8, w8, #0x8
     9e8:	ldrb	w9, [x11], #1
     9ec:	bfi	w9, w12, #8, #24
     9f0:	stp	w9, w8, [x21, #32]
     9f4:	ldr	w12, [x22, #12]
     9f8:	str	x11, [x22]
     9fc:	adds	w11, w12, #0x1
     a00:	stp	w10, w11, [x22, #8]
     a04:	b.cc	9c8 <BZ2_decompress+0x9c8>  // b.lo, b.ul, b.last
     a08:	ldr	w11, [x22, #16]
     a0c:	add	w11, w11, #0x1
     a10:	str	w11, [x22, #16]
     a14:	b	9c8 <BZ2_decompress+0x9c8>
     a18:	ldr	x9, [x21]
     a1c:	ldr	w10, [x9, #8]
     a20:	sub	w11, w10, #0x1
     a24:	b	a38 <BZ2_decompress+0xa38>
     a28:	sub	w12, w8, #0x8
     a2c:	cmp	w12, #0x6
     a30:	sub	w11, w11, #0x1
     a34:	b.gt	598 <BZ2_decompress+0x598>
     a38:	cmn	w11, #0x1
     a3c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     a40:	ldr	x12, [x9]
     a44:	ldr	w13, [x21, #32]
     a48:	add	w8, w8, #0x8
     a4c:	ldrb	w10, [x12], #1
     a50:	bfi	w10, w13, #8, #24
     a54:	stp	w10, w8, [x21, #32]
     a58:	ldr	w13, [x9, #12]
     a5c:	str	x12, [x9]
     a60:	adds	w12, w13, #0x1
     a64:	stp	w11, w12, [x9, #8]
     a68:	b.cc	a28 <BZ2_decompress+0xa28>  // b.lo, b.ul, b.last
     a6c:	ldr	w12, [x9, #16]
     a70:	add	w12, w12, #0x1
     a74:	str	w12, [x9, #16]
     a78:	b	a28 <BZ2_decompress+0xa28>
     a7c:	sub	w9, w8, #0x30
     a80:	stp	w5, w18, [sp, #36]
     a84:	stp	x7, x6, [sp, #48]
     a88:	stp	w4, w14, [x29, #-52]
     a8c:	str	w9, [x21, #40]
     a90:	ldrb	w10, [x21, #44]
     a94:	ldr	x8, [x22, #56]
     a98:	ldr	x0, [x22, #72]
     a9c:	str	x28, [sp, #72]
     aa0:	mov	w28, w3
     aa4:	stur	w2, [x29, #-44]
     aa8:	str	w1, [sp, #16]
     aac:	str	x30, [sp, #8]
     ab0:	str	x17, [sp, #24]
     ab4:	str	w16, [sp, #32]
     ab8:	stur	x15, [x29, #-64]
     abc:	stur	w27, [x29, #-40]
     ac0:	cbz	w10, ba4 <BZ2_decompress+0xba4>
     ac4:	mov	w10, #0xd40                 	// #3392
     ac8:	movk	w10, #0x3, lsl #16
     acc:	mul	w1, w9, w10
     ad0:	mov	w2, #0x1                   	// #1
     ad4:	blr	x8
     ad8:	ldr	w8, [x21, #40]
     adc:	str	x0, [x21, #3160]
     ae0:	ldr	x9, [x22, #56]
     ae4:	ldr	x0, [x22, #72]
     ae8:	mov	w10, #0x86a0                	// #34464
     aec:	movk	w10, #0x1, lsl #16
     af0:	mul	w8, w8, w10
     af4:	asr	w1, w8, #1
     af8:	mov	w2, #0x1                   	// #1
     afc:	blr	x9
     b00:	mov	x8, x0
     b04:	str	x0, [x21, #3168]
     b08:	mov	w0, #0xfffffffd            	// #-3
     b0c:	cbz	x8, 14ec <BZ2_decompress+0x14ec>
     b10:	ldr	x8, [x21, #3160]
     b14:	mov	w3, w28
     b18:	ldp	w2, w27, [x29, #-44]
     b1c:	ldp	w4, w14, [x29, #-52]
     b20:	ldur	x15, [x29, #-64]
     b24:	ldr	x28, [sp, #72]
     b28:	ldp	w16, w5, [sp, #32]
     b2c:	ldr	x17, [sp, #24]
     b30:	ldp	x7, x6, [sp, #48]
     b34:	ldr	x30, [sp, #8]
     b38:	ldr	w18, [sp, #40]
     b3c:	ldr	w1, [sp, #16]
     b40:	cbnz	x8, bec <BZ2_decompress+0xbec>
     b44:	b	179c <BZ2_decompress+0x179c>
     b48:	ldr	w9, [x22, #8]
     b4c:	sub	w10, w9, #0x1
     b50:	b	b60 <BZ2_decompress+0xb60>
     b54:	cmp	w8, #0x8
     b58:	sub	w10, w10, #0x1
     b5c:	b.pl	e4 <BZ2_decompress+0xe4>  // b.nfrst
     b60:	cmn	w10, #0x1
     b64:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     b68:	ldr	x11, [x22]
     b6c:	ldr	w12, [x21, #32]
     b70:	add	w8, w8, #0x8
     b74:	ldrb	w9, [x11], #1
     b78:	bfi	w9, w12, #8, #24
     b7c:	stp	w9, w8, [x21, #32]
     b80:	ldr	w12, [x22, #12]
     b84:	str	x11, [x22]
     b88:	adds	w11, w12, #0x1
     b8c:	stp	w10, w11, [x22, #8]
     b90:	b.cc	b54 <BZ2_decompress+0xb54>  // b.lo, b.ul, b.last
     b94:	ldr	w11, [x22, #16]
     b98:	add	w11, w11, #0x1
     b9c:	str	w11, [x22, #16]
     ba0:	b	b54 <BZ2_decompress+0xb54>
     ba4:	mov	w10, #0x1a80                	// #6784
     ba8:	movk	w10, #0x6, lsl #16
     bac:	mul	w1, w9, w10
     bb0:	mov	w2, #0x1                   	// #1
     bb4:	blr	x8
     bb8:	str	x0, [x21, #3152]
     bbc:	mov	w3, w28
     bc0:	ldp	w2, w27, [x29, #-44]
     bc4:	ldp	w4, w14, [x29, #-52]
     bc8:	ldur	x15, [x29, #-64]
     bcc:	ldr	x28, [sp, #72]
     bd0:	ldp	w16, w5, [sp, #32]
     bd4:	ldr	x17, [sp, #24]
     bd8:	ldp	x7, x6, [sp, #48]
     bdc:	ldr	x30, [sp, #8]
     be0:	ldr	w18, [sp, #40]
     be4:	ldr	w1, [sp, #16]
     be8:	cbz	x0, 151c <BZ2_decompress+0x151c>
     bec:	ldr	w8, [x21, #36]
     bf0:	mov	w9, #0xe                   	// #14
     bf4:	str	w9, [x21, #8]
     bf8:	cmp	w8, #0x8
     bfc:	b.lt	148c <BZ2_decompress+0x148c>  // b.tstop
     c00:	ldr	w10, [x21, #32]
     c04:	sub	w8, w8, #0x8
     c08:	lsr	w9, w10, w8
     c0c:	and	w9, w9, #0xff
     c10:	cmp	w9, #0x17
     c14:	str	w8, [x21, #36]
     c18:	b.eq	eb8 <BZ2_decompress+0xeb8>  // b.none
     c1c:	cmp	w9, #0x31
     c20:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     c24:	mov	w9, #0xf                   	// #15
     c28:	cmp	w8, #0x8
     c2c:	str	w9, [x21, #8]
     c30:	b.lt	13cc <BZ2_decompress+0x13cc>  // b.tstop
     c34:	ldr	w10, [x21, #32]
     c38:	sub	w8, w8, #0x8
     c3c:	lsr	w9, w10, w8
     c40:	and	w9, w9, #0xff
     c44:	cmp	w9, #0x41
     c48:	str	w8, [x21, #36]
     c4c:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     c50:	mov	w9, #0x10                  	// #16
     c54:	cmp	w8, #0x8
     c58:	str	w9, [x21, #8]
     c5c:	b.lt	130c <BZ2_decompress+0x130c>  // b.tstop
     c60:	ldr	w10, [x21, #32]
     c64:	sub	w8, w8, #0x8
     c68:	lsr	w9, w10, w8
     c6c:	and	w9, w9, #0xff
     c70:	cmp	w9, #0x59
     c74:	str	w8, [x21, #36]
     c78:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     c7c:	mov	w9, #0x11                  	// #17
     c80:	cmp	w8, #0x8
     c84:	str	w9, [x21, #8]
     c88:	b.lt	124c <BZ2_decompress+0x124c>  // b.tstop
     c8c:	ldr	w10, [x21, #32]
     c90:	sub	w8, w8, #0x8
     c94:	lsr	w9, w10, w8
     c98:	and	w9, w9, #0xff
     c9c:	cmp	w9, #0x26
     ca0:	str	w8, [x21, #36]
     ca4:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     ca8:	mov	w9, #0x12                  	// #18
     cac:	cmp	w8, #0x8
     cb0:	str	w9, [x21, #8]
     cb4:	b.lt	118c <BZ2_decompress+0x118c>  // b.tstop
     cb8:	ldr	w10, [x21, #32]
     cbc:	sub	w8, w8, #0x8
     cc0:	lsr	w9, w10, w8
     cc4:	and	w9, w9, #0xff
     cc8:	cmp	w9, #0x53
     ccc:	str	w8, [x21, #36]
     cd0:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     cd4:	mov	w9, #0x13                  	// #19
     cd8:	cmp	w8, #0x8
     cdc:	str	w9, [x21, #8]
     ce0:	b.lt	10cc <BZ2_decompress+0x10cc>  // b.tstop
     ce4:	ldr	w10, [x21, #32]
     ce8:	sub	w8, w8, #0x8
     cec:	lsr	w9, w10, w8
     cf0:	and	w9, w9, #0xff
     cf4:	cmp	w9, #0x59
     cf8:	str	w8, [x21, #36]
     cfc:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     d00:	ldp	w8, w9, [x21, #48]
     d04:	mov	w22, w27
     d08:	mov	w27, w2
     d0c:	add	w2, w8, #0x1
     d10:	cmp	w9, #0x2
     d14:	str	w2, [x21, #48]
     d18:	b.ge	1524 <BZ2_decompress+0x1524>  // b.tcont
     d1c:	mov	w2, w27
     d20:	mov	w27, w22
     d24:	str	wzr, [x21, #3176]
     d28:	ldr	w8, [x21, #36]
     d2c:	mov	w9, #0x14                  	// #20
     d30:	str	w9, [x21, #8]
     d34:	cmp	w8, #0x8
     d38:	b.lt	106c <BZ2_decompress+0x106c>  // b.tstop
     d3c:	ldr	w9, [x21, #32]
     d40:	ldr	w10, [x21, #3176]
     d44:	sub	w8, w8, #0x8
     d48:	lsr	w9, w9, w8
     d4c:	str	w8, [x21, #36]
     d50:	bfi	w9, w10, #8, #24
     d54:	str	w9, [x21, #3176]
     d58:	mov	w9, #0x15                  	// #21
     d5c:	cmp	w8, #0x8
     d60:	str	w9, [x21, #8]
     d64:	b.lt	2d4 <BZ2_decompress+0x2d4>  // b.tstop
     d68:	ldr	w9, [x21, #32]
     d6c:	ldr	w10, [x21, #3176]
     d70:	sub	w8, w8, #0x8
     d74:	lsr	w9, w9, w8
     d78:	str	w8, [x21, #36]
     d7c:	bfi	w9, w10, #8, #24
     d80:	str	w9, [x21, #3176]
     d84:	mov	w9, #0x16                  	// #22
     d88:	cmp	w8, #0x8
     d8c:	str	w9, [x21, #8]
     d90:	b.lt	348 <BZ2_decompress+0x348>  // b.tstop
     d94:	ldr	w9, [x21, #32]
     d98:	ldr	w10, [x21, #3176]
     d9c:	sub	w8, w8, #0x8
     da0:	lsr	w9, w9, w8
     da4:	str	w8, [x21, #36]
     da8:	bfi	w9, w10, #8, #24
     dac:	str	w9, [x21, #3176]
     db0:	mov	w9, #0x17                  	// #23
     db4:	cmp	w8, #0x8
     db8:	str	w9, [x21, #8]
     dbc:	b.lt	3bc <BZ2_decompress+0x3bc>  // b.tstop
     dc0:	ldr	w9, [x21, #32]
     dc4:	ldr	w10, [x21, #3176]
     dc8:	sub	w8, w8, #0x8
     dcc:	lsr	w9, w9, w8
     dd0:	str	w8, [x21, #36]
     dd4:	bfi	w9, w10, #8, #24
     dd8:	str	w9, [x21, #3176]
     ddc:	mov	w9, #0x18                  	// #24
     de0:	cmp	w8, #0x1
     de4:	str	w9, [x21, #8]
     de8:	b.lt	1008 <BZ2_decompress+0x1008>  // b.tstop
     dec:	ldr	w10, [x21, #32]
     df0:	sub	w8, w8, #0x1
     df4:	lsr	w9, w10, w8
     df8:	and	w9, w9, #0x1
     dfc:	str	w8, [x21, #36]
     e00:	strb	w9, [x21, #20]
     e04:	str	wzr, [x21, #56]
     e08:	mov	w9, #0x19                  	// #25
     e0c:	cmp	w8, #0x8
     e10:	str	w9, [x21, #8]
     e14:	b.lt	438 <BZ2_decompress+0x438>  // b.tstop
     e18:	ldr	w9, [x21, #32]
     e1c:	ldr	w10, [x21, #56]
     e20:	sub	w8, w8, #0x8
     e24:	lsr	w9, w9, w8
     e28:	str	w8, [x21, #36]
     e2c:	bfi	w9, w10, #8, #24
     e30:	str	w9, [x21, #56]
     e34:	mov	w9, #0x1a                  	// #26
     e38:	cmp	w8, #0x8
     e3c:	str	w9, [x21, #8]
     e40:	b.lt	4ac <BZ2_decompress+0x4ac>  // b.tstop
     e44:	ldr	w9, [x21, #32]
     e48:	ldr	w10, [x21, #56]
     e4c:	sub	w8, w8, #0x8
     e50:	lsr	w9, w9, w8
     e54:	str	w8, [x21, #36]
     e58:	bfi	w9, w10, #8, #24
     e5c:	str	w9, [x21, #56]
     e60:	mov	w9, #0x1b                  	// #27
     e64:	cmp	w8, #0x8
     e68:	str	w9, [x21, #8]
     e6c:	b.lt	520 <BZ2_decompress+0x520>  // b.tstop
     e70:	ldr	w10, [x21, #32]
     e74:	ldr	w9, [x21, #56]
     e78:	sub	w11, w8, #0x8
     e7c:	lsr	w8, w10, w11
     e80:	str	w11, [x21, #36]
     e84:	bfi	w8, w9, #8, #24
     e88:	str	w8, [x21, #56]
     e8c:	tbnz	w8, #31, 1798 <BZ2_decompress+0x1798>
     e90:	ldr	w9, [x21, #40]
     e94:	mov	w10, #0x86a0                	// #34464
     e98:	movk	w10, #0x1, lsl #16
     e9c:	mul	w9, w9, w10
     ea0:	mov	w10, #0xa                   	// #10
     ea4:	orr	w9, w9, w10
     ea8:	cmp	w8, w9
     eac:	b.gt	1798 <BZ2_decompress+0x1798>
     eb0:	mov	w8, wzr
     eb4:	b	15bc <BZ2_decompress+0x15bc>
     eb8:	mov	w9, #0x2a                  	// #42
     ebc:	cmp	w8, #0x8
     ec0:	str	w9, [x21, #8]
     ec4:	b.lt	142c <BZ2_decompress+0x142c>  // b.tstop
     ec8:	ldr	w10, [x21, #32]
     ecc:	sub	w8, w8, #0x8
     ed0:	lsr	w9, w10, w8
     ed4:	and	w9, w9, #0xff
     ed8:	cmp	w9, #0x72
     edc:	str	w8, [x21, #36]
     ee0:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     ee4:	mov	w9, #0x2b                  	// #43
     ee8:	cmp	w8, #0x8
     eec:	str	w9, [x21, #8]
     ef0:	b.lt	136c <BZ2_decompress+0x136c>  // b.tstop
     ef4:	ldr	w10, [x21, #32]
     ef8:	sub	w8, w8, #0x8
     efc:	lsr	w9, w10, w8
     f00:	and	w9, w9, #0xff
     f04:	cmp	w9, #0x45
     f08:	str	w8, [x21, #36]
     f0c:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     f10:	mov	w9, #0x2c                  	// #44
     f14:	cmp	w8, #0x8
     f18:	str	w9, [x21, #8]
     f1c:	b.lt	12ac <BZ2_decompress+0x12ac>  // b.tstop
     f20:	ldr	w10, [x21, #32]
     f24:	sub	w8, w8, #0x8
     f28:	lsr	w9, w10, w8
     f2c:	and	w9, w9, #0xff
     f30:	cmp	w9, #0x38
     f34:	str	w8, [x21, #36]
     f38:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     f3c:	mov	w9, #0x2d                  	// #45
     f40:	cmp	w8, #0x8
     f44:	str	w9, [x21, #8]
     f48:	b.lt	11ec <BZ2_decompress+0x11ec>  // b.tstop
     f4c:	ldr	w10, [x21, #32]
     f50:	sub	w8, w8, #0x8
     f54:	lsr	w9, w10, w8
     f58:	and	w9, w9, #0xff
     f5c:	cmp	w9, #0x50
     f60:	str	w8, [x21, #36]
     f64:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     f68:	mov	w9, #0x2e                  	// #46
     f6c:	cmp	w8, #0x8
     f70:	str	w9, [x21, #8]
     f74:	b.lt	112c <BZ2_decompress+0x112c>  // b.tstop
     f78:	ldr	w10, [x21, #32]
     f7c:	sub	w8, w8, #0x8
     f80:	lsr	w9, w10, w8
     f84:	and	w9, w9, #0xff
     f88:	cmp	w9, #0x90
     f8c:	str	w8, [x21, #36]
     f90:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
     f94:	str	wzr, [x21, #3180]
     f98:	mov	w9, #0x2f                  	// #47
     f9c:	cmp	w8, #0x8
     fa0:	str	w9, [x21, #8]
     fa4:	b.ge	6f8 <BZ2_decompress+0x6f8>  // b.tcont
     fa8:	ldr	x10, [x21]
     fac:	ldr	w9, [x10, #8]
     fb0:	sub	w11, w9, #0x1
     fb4:	b	fc4 <BZ2_decompress+0xfc4>
     fb8:	cmp	w8, #0x8
     fbc:	sub	w11, w11, #0x1
     fc0:	b.pl	6fc <BZ2_decompress+0x6fc>  // b.nfrst
     fc4:	cmn	w11, #0x1
     fc8:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
     fcc:	ldr	x12, [x10]
     fd0:	ldr	w13, [x21, #32]
     fd4:	add	w8, w8, #0x8
     fd8:	ldrb	w9, [x12], #1
     fdc:	bfi	w9, w13, #8, #24
     fe0:	stp	w9, w8, [x21, #32]
     fe4:	ldr	w13, [x10, #12]
     fe8:	str	x12, [x10]
     fec:	adds	w12, w13, #0x1
     ff0:	stp	w11, w12, [x10, #8]
     ff4:	b.cc	fb8 <BZ2_decompress+0xfb8>  // b.lo, b.ul, b.last
     ff8:	ldr	w12, [x10, #16]
     ffc:	add	w12, w12, #0x1
    1000:	str	w12, [x10, #16]
    1004:	b	fb8 <BZ2_decompress+0xfb8>
    1008:	ldr	x9, [x21]
    100c:	ldr	w10, [x9, #8]
    1010:	sub	w11, w10, #0x1
    1014:	b	1028 <BZ2_decompress+0x1028>
    1018:	sub	w12, w8, #0x8
    101c:	cmn	w12, #0x8
    1020:	sub	w11, w11, #0x1
    1024:	b.gt	df0 <BZ2_decompress+0xdf0>
    1028:	cmn	w11, #0x1
    102c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1030:	ldr	x12, [x9]
    1034:	ldr	w13, [x21, #32]
    1038:	add	w8, w8, #0x8
    103c:	ldrb	w10, [x12], #1
    1040:	bfi	w10, w13, #8, #24
    1044:	stp	w10, w8, [x21, #32]
    1048:	ldr	w13, [x9, #12]
    104c:	str	x12, [x9]
    1050:	adds	w12, w13, #0x1
    1054:	stp	w11, w12, [x9, #8]
    1058:	b.cc	1018 <BZ2_decompress+0x1018>  // b.lo, b.ul, b.last
    105c:	ldr	w12, [x9, #16]
    1060:	add	w12, w12, #0x1
    1064:	str	w12, [x9, #16]
    1068:	b	1018 <BZ2_decompress+0x1018>
    106c:	ldr	x10, [x21]
    1070:	ldr	w9, [x10, #8]
    1074:	sub	w11, w9, #0x1
    1078:	b	1088 <BZ2_decompress+0x1088>
    107c:	cmp	w8, #0x8
    1080:	sub	w11, w11, #0x1
    1084:	b.pl	d40 <BZ2_decompress+0xd40>  // b.nfrst
    1088:	cmn	w11, #0x1
    108c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1090:	ldr	x12, [x10]
    1094:	ldr	w13, [x21, #32]
    1098:	add	w8, w8, #0x8
    109c:	ldrb	w9, [x12], #1
    10a0:	bfi	w9, w13, #8, #24
    10a4:	stp	w9, w8, [x21, #32]
    10a8:	ldr	w13, [x10, #12]
    10ac:	str	x12, [x10]
    10b0:	adds	w12, w13, #0x1
    10b4:	stp	w11, w12, [x10, #8]
    10b8:	b.cc	107c <BZ2_decompress+0x107c>  // b.lo, b.ul, b.last
    10bc:	ldr	w12, [x10, #16]
    10c0:	add	w12, w12, #0x1
    10c4:	str	w12, [x10, #16]
    10c8:	b	107c <BZ2_decompress+0x107c>
    10cc:	ldr	x9, [x21]
    10d0:	ldr	w10, [x9, #8]
    10d4:	sub	w11, w10, #0x1
    10d8:	b	10e8 <BZ2_decompress+0x10e8>
    10dc:	cmp	w8, #0x8
    10e0:	sub	w11, w11, #0x1
    10e4:	b.pl	ce8 <BZ2_decompress+0xce8>  // b.nfrst
    10e8:	cmn	w11, #0x1
    10ec:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    10f0:	ldr	x12, [x9]
    10f4:	ldr	w13, [x21, #32]
    10f8:	add	w8, w8, #0x8
    10fc:	ldrb	w10, [x12], #1
    1100:	bfi	w10, w13, #8, #24
    1104:	stp	w10, w8, [x21, #32]
    1108:	ldr	w13, [x9, #12]
    110c:	str	x12, [x9]
    1110:	adds	w12, w13, #0x1
    1114:	stp	w11, w12, [x9, #8]
    1118:	b.cc	10dc <BZ2_decompress+0x10dc>  // b.lo, b.ul, b.last
    111c:	ldr	w12, [x9, #16]
    1120:	add	w12, w12, #0x1
    1124:	str	w12, [x9, #16]
    1128:	b	10dc <BZ2_decompress+0x10dc>
    112c:	ldr	x9, [x21]
    1130:	ldr	w10, [x9, #8]
    1134:	sub	w11, w10, #0x1
    1138:	b	1148 <BZ2_decompress+0x1148>
    113c:	cmp	w8, #0x8
    1140:	sub	w11, w11, #0x1
    1144:	b.pl	f7c <BZ2_decompress+0xf7c>  // b.nfrst
    1148:	cmn	w11, #0x1
    114c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1150:	ldr	x12, [x9]
    1154:	ldr	w13, [x21, #32]
    1158:	add	w8, w8, #0x8
    115c:	ldrb	w10, [x12], #1
    1160:	bfi	w10, w13, #8, #24
    1164:	stp	w10, w8, [x21, #32]
    1168:	ldr	w13, [x9, #12]
    116c:	str	x12, [x9]
    1170:	adds	w12, w13, #0x1
    1174:	stp	w11, w12, [x9, #8]
    1178:	b.cc	113c <BZ2_decompress+0x113c>  // b.lo, b.ul, b.last
    117c:	ldr	w12, [x9, #16]
    1180:	add	w12, w12, #0x1
    1184:	str	w12, [x9, #16]
    1188:	b	113c <BZ2_decompress+0x113c>
    118c:	ldr	x9, [x21]
    1190:	ldr	w10, [x9, #8]
    1194:	sub	w11, w10, #0x1
    1198:	b	11a8 <BZ2_decompress+0x11a8>
    119c:	cmp	w8, #0x8
    11a0:	sub	w11, w11, #0x1
    11a4:	b.pl	cbc <BZ2_decompress+0xcbc>  // b.nfrst
    11a8:	cmn	w11, #0x1
    11ac:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    11b0:	ldr	x12, [x9]
    11b4:	ldr	w13, [x21, #32]
    11b8:	add	w8, w8, #0x8
    11bc:	ldrb	w10, [x12], #1
    11c0:	bfi	w10, w13, #8, #24
    11c4:	stp	w10, w8, [x21, #32]
    11c8:	ldr	w13, [x9, #12]
    11cc:	str	x12, [x9]
    11d0:	adds	w12, w13, #0x1
    11d4:	stp	w11, w12, [x9, #8]
    11d8:	b.cc	119c <BZ2_decompress+0x119c>  // b.lo, b.ul, b.last
    11dc:	ldr	w12, [x9, #16]
    11e0:	add	w12, w12, #0x1
    11e4:	str	w12, [x9, #16]
    11e8:	b	119c <BZ2_decompress+0x119c>
    11ec:	ldr	x9, [x21]
    11f0:	ldr	w10, [x9, #8]
    11f4:	sub	w11, w10, #0x1
    11f8:	b	1208 <BZ2_decompress+0x1208>
    11fc:	cmp	w8, #0x8
    1200:	sub	w11, w11, #0x1
    1204:	b.pl	f50 <BZ2_decompress+0xf50>  // b.nfrst
    1208:	cmn	w11, #0x1
    120c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1210:	ldr	x12, [x9]
    1214:	ldr	w13, [x21, #32]
    1218:	add	w8, w8, #0x8
    121c:	ldrb	w10, [x12], #1
    1220:	bfi	w10, w13, #8, #24
    1224:	stp	w10, w8, [x21, #32]
    1228:	ldr	w13, [x9, #12]
    122c:	str	x12, [x9]
    1230:	adds	w12, w13, #0x1
    1234:	stp	w11, w12, [x9, #8]
    1238:	b.cc	11fc <BZ2_decompress+0x11fc>  // b.lo, b.ul, b.last
    123c:	ldr	w12, [x9, #16]
    1240:	add	w12, w12, #0x1
    1244:	str	w12, [x9, #16]
    1248:	b	11fc <BZ2_decompress+0x11fc>
    124c:	ldr	x9, [x21]
    1250:	ldr	w10, [x9, #8]
    1254:	sub	w11, w10, #0x1
    1258:	b	1268 <BZ2_decompress+0x1268>
    125c:	cmp	w8, #0x8
    1260:	sub	w11, w11, #0x1
    1264:	b.pl	c90 <BZ2_decompress+0xc90>  // b.nfrst
    1268:	cmn	w11, #0x1
    126c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1270:	ldr	x12, [x9]
    1274:	ldr	w13, [x21, #32]
    1278:	add	w8, w8, #0x8
    127c:	ldrb	w10, [x12], #1
    1280:	bfi	w10, w13, #8, #24
    1284:	stp	w10, w8, [x21, #32]
    1288:	ldr	w13, [x9, #12]
    128c:	str	x12, [x9]
    1290:	adds	w12, w13, #0x1
    1294:	stp	w11, w12, [x9, #8]
    1298:	b.cc	125c <BZ2_decompress+0x125c>  // b.lo, b.ul, b.last
    129c:	ldr	w12, [x9, #16]
    12a0:	add	w12, w12, #0x1
    12a4:	str	w12, [x9, #16]
    12a8:	b	125c <BZ2_decompress+0x125c>
    12ac:	ldr	x9, [x21]
    12b0:	ldr	w10, [x9, #8]
    12b4:	sub	w11, w10, #0x1
    12b8:	b	12c8 <BZ2_decompress+0x12c8>
    12bc:	cmp	w8, #0x8
    12c0:	sub	w11, w11, #0x1
    12c4:	b.pl	f24 <BZ2_decompress+0xf24>  // b.nfrst
    12c8:	cmn	w11, #0x1
    12cc:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    12d0:	ldr	x12, [x9]
    12d4:	ldr	w13, [x21, #32]
    12d8:	add	w8, w8, #0x8
    12dc:	ldrb	w10, [x12], #1
    12e0:	bfi	w10, w13, #8, #24
    12e4:	stp	w10, w8, [x21, #32]
    12e8:	ldr	w13, [x9, #12]
    12ec:	str	x12, [x9]
    12f0:	adds	w12, w13, #0x1
    12f4:	stp	w11, w12, [x9, #8]
    12f8:	b.cc	12bc <BZ2_decompress+0x12bc>  // b.lo, b.ul, b.last
    12fc:	ldr	w12, [x9, #16]
    1300:	add	w12, w12, #0x1
    1304:	str	w12, [x9, #16]
    1308:	b	12bc <BZ2_decompress+0x12bc>
    130c:	ldr	x9, [x21]
    1310:	ldr	w10, [x9, #8]
    1314:	sub	w11, w10, #0x1
    1318:	b	1328 <BZ2_decompress+0x1328>
    131c:	cmp	w8, #0x8
    1320:	sub	w11, w11, #0x1
    1324:	b.pl	c64 <BZ2_decompress+0xc64>  // b.nfrst
    1328:	cmn	w11, #0x1
    132c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1330:	ldr	x12, [x9]
    1334:	ldr	w13, [x21, #32]
    1338:	add	w8, w8, #0x8
    133c:	ldrb	w10, [x12], #1
    1340:	bfi	w10, w13, #8, #24
    1344:	stp	w10, w8, [x21, #32]
    1348:	ldr	w13, [x9, #12]
    134c:	str	x12, [x9]
    1350:	adds	w12, w13, #0x1
    1354:	stp	w11, w12, [x9, #8]
    1358:	b.cc	131c <BZ2_decompress+0x131c>  // b.lo, b.ul, b.last
    135c:	ldr	w12, [x9, #16]
    1360:	add	w12, w12, #0x1
    1364:	str	w12, [x9, #16]
    1368:	b	131c <BZ2_decompress+0x131c>
    136c:	ldr	x9, [x21]
    1370:	ldr	w10, [x9, #8]
    1374:	sub	w11, w10, #0x1
    1378:	b	1388 <BZ2_decompress+0x1388>
    137c:	cmp	w8, #0x8
    1380:	sub	w11, w11, #0x1
    1384:	b.pl	ef8 <BZ2_decompress+0xef8>  // b.nfrst
    1388:	cmn	w11, #0x1
    138c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1390:	ldr	x12, [x9]
    1394:	ldr	w13, [x21, #32]
    1398:	add	w8, w8, #0x8
    139c:	ldrb	w10, [x12], #1
    13a0:	bfi	w10, w13, #8, #24
    13a4:	stp	w10, w8, [x21, #32]
    13a8:	ldr	w13, [x9, #12]
    13ac:	str	x12, [x9]
    13b0:	adds	w12, w13, #0x1
    13b4:	stp	w11, w12, [x9, #8]
    13b8:	b.cc	137c <BZ2_decompress+0x137c>  // b.lo, b.ul, b.last
    13bc:	ldr	w12, [x9, #16]
    13c0:	add	w12, w12, #0x1
    13c4:	str	w12, [x9, #16]
    13c8:	b	137c <BZ2_decompress+0x137c>
    13cc:	ldr	x9, [x21]
    13d0:	ldr	w10, [x9, #8]
    13d4:	sub	w11, w10, #0x1
    13d8:	b	13e8 <BZ2_decompress+0x13e8>
    13dc:	cmp	w8, #0x8
    13e0:	sub	w11, w11, #0x1
    13e4:	b.pl	c38 <BZ2_decompress+0xc38>  // b.nfrst
    13e8:	cmn	w11, #0x1
    13ec:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    13f0:	ldr	x12, [x9]
    13f4:	ldr	w13, [x21, #32]
    13f8:	add	w8, w8, #0x8
    13fc:	ldrb	w10, [x12], #1
    1400:	bfi	w10, w13, #8, #24
    1404:	stp	w10, w8, [x21, #32]
    1408:	ldr	w13, [x9, #12]
    140c:	str	x12, [x9]
    1410:	adds	w12, w13, #0x1
    1414:	stp	w11, w12, [x9, #8]
    1418:	b.cc	13dc <BZ2_decompress+0x13dc>  // b.lo, b.ul, b.last
    141c:	ldr	w12, [x9, #16]
    1420:	add	w12, w12, #0x1
    1424:	str	w12, [x9, #16]
    1428:	b	13dc <BZ2_decompress+0x13dc>
    142c:	ldr	x9, [x21]
    1430:	ldr	w10, [x9, #8]
    1434:	sub	w11, w10, #0x1
    1438:	b	1448 <BZ2_decompress+0x1448>
    143c:	cmp	w8, #0x8
    1440:	sub	w11, w11, #0x1
    1444:	b.pl	ecc <BZ2_decompress+0xecc>  // b.nfrst
    1448:	cmn	w11, #0x1
    144c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1450:	ldr	x12, [x9]
    1454:	ldr	w13, [x21, #32]
    1458:	add	w8, w8, #0x8
    145c:	ldrb	w10, [x12], #1
    1460:	bfi	w10, w13, #8, #24
    1464:	stp	w10, w8, [x21, #32]
    1468:	ldr	w13, [x9, #12]
    146c:	str	x12, [x9]
    1470:	adds	w12, w13, #0x1
    1474:	stp	w11, w12, [x9, #8]
    1478:	b.cc	143c <BZ2_decompress+0x143c>  // b.lo, b.ul, b.last
    147c:	ldr	w12, [x9, #16]
    1480:	add	w12, w12, #0x1
    1484:	str	w12, [x9, #16]
    1488:	b	143c <BZ2_decompress+0x143c>
    148c:	ldr	x9, [x21]
    1490:	ldr	w10, [x9, #8]
    1494:	sub	w11, w10, #0x1
    1498:	b	14a8 <BZ2_decompress+0x14a8>
    149c:	cmp	w8, #0x8
    14a0:	sub	w11, w11, #0x1
    14a4:	b.pl	c04 <BZ2_decompress+0xc04>  // b.nfrst
    14a8:	cmn	w11, #0x1
    14ac:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    14b0:	ldr	x12, [x9]
    14b4:	ldr	w13, [x21, #32]
    14b8:	add	w8, w8, #0x8
    14bc:	ldrb	w10, [x12], #1
    14c0:	bfi	w10, w13, #8, #24
    14c4:	stp	w10, w8, [x21, #32]
    14c8:	ldr	w13, [x9, #12]
    14cc:	str	x12, [x9]
    14d0:	adds	w12, w13, #0x1
    14d4:	stp	w11, w12, [x9, #8]
    14d8:	b.cc	149c <BZ2_decompress+0x149c>  // b.lo, b.ul, b.last
    14dc:	ldr	w12, [x9, #16]
    14e0:	add	w12, w12, #0x1
    14e4:	str	w12, [x9, #16]
    14e8:	b	149c <BZ2_decompress+0x149c>
    14ec:	mov	w3, w28
    14f0:	ldp	w2, w27, [x29, #-44]
    14f4:	ldp	w4, w14, [x29, #-52]
    14f8:	ldur	x15, [x29, #-64]
    14fc:	ldr	x28, [sp, #72]
    1500:	ldp	w16, w5, [sp, #32]
    1504:	ldr	x17, [sp, #24]
    1508:	ldp	x7, x6, [sp, #48]
    150c:	ldr	x30, [sp, #8]
    1510:	ldr	w18, [sp, #40]
    1514:	ldr	w1, [sp, #16]
    1518:	b	179c <BZ2_decompress+0x179c>
    151c:	mov	w0, #0xfffffffd            	// #-3
    1520:	b	179c <BZ2_decompress+0x179c>
    1524:	adrp	x8, 0 <stderr>
    1528:	ldr	x0, [x8]
    152c:	str	w1, [sp, #16]
    1530:	adrp	x1, 0 <BZ2_decompress>
    1534:	add	x1, x1, #0x0
    1538:	str	w3, [sp, #68]
    153c:	stur	w4, [x29, #-52]
    1540:	stur	w19, [x29, #-44]
    1544:	str	w20, [sp, #64]
    1548:	stp	x26, x23, [sp, #40]
    154c:	str	x28, [sp, #72]
    1550:	str	w24, [sp, #56]
    1554:	stur	w14, [x29, #-48]
    1558:	stur	x15, [x29, #-64]
    155c:	mov	w19, w16
    1560:	str	w5, [sp, #36]
    1564:	mov	x23, x17
    1568:	mov	x26, x6
    156c:	mov	x28, x7
    1570:	mov	x24, x30
    1574:	mov	w20, w18
    1578:	bl	0 <fprintf>
    157c:	ldr	w1, [sp, #16]
    1580:	mov	w18, w20
    1584:	mov	x30, x24
    1588:	mov	x7, x28
    158c:	mov	x6, x26
    1590:	mov	x17, x23
    1594:	ldr	w5, [sp, #36]
    1598:	mov	w16, w19
    159c:	ldur	x15, [x29, #-64]
    15a0:	ldp	w14, w19, [x29, #-48]
    15a4:	ldr	w24, [sp, #56]
    15a8:	ldr	x28, [sp, #72]
    15ac:	ldp	x26, x23, [sp, #40]
    15b0:	ldp	w20, w3, [sp, #64]
    15b4:	ldur	w4, [x29, #-52]
    15b8:	b	d1c <BZ2_decompress+0xd1c>
    15bc:	cmp	w8, #0x10
    15c0:	stur	x8, [x29, #-16]
    15c4:	b.ge	166c <BZ2_decompress+0x166c>  // b.tcont
    15c8:	ldr	w8, [x21, #36]
    15cc:	mov	w9, #0x1c                  	// #28
    15d0:	str	w9, [x21, #8]
    15d4:	cmp	w8, #0x1
    15d8:	b.lt	1608 <BZ2_decompress+0x1608>  // b.tstop
    15dc:	ldr	w9, [x21, #32]
    15e0:	ldur	x11, [x29, #-16]
    15e4:	sub	w8, w8, #0x1
    15e8:	str	w8, [x21, #36]
    15ec:	lsr	w8, w9, w8
    15f0:	add	x10, x21, w11, sxtw
    15f4:	and	w8, w8, #0x1
    15f8:	strb	w8, [x10, #3452]
    15fc:	mov	x8, x11
    1600:	add	w8, w8, #0x1
    1604:	b	15bc <BZ2_decompress+0x15bc>
    1608:	ldr	x10, [x21]
    160c:	ldr	w9, [x10, #8]
    1610:	sub	w11, w9, #0x1
    1614:	b	1628 <BZ2_decompress+0x1628>
    1618:	sub	w12, w8, #0x8
    161c:	cmn	w12, #0x8
    1620:	sub	w11, w11, #0x1
    1624:	b.gt	15e0 <BZ2_decompress+0x15e0>
    1628:	cmn	w11, #0x1
    162c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1630:	ldr	x12, [x10]
    1634:	ldr	w13, [x21, #32]
    1638:	add	w8, w8, #0x8
    163c:	ldrb	w9, [x12], #1
    1640:	bfi	w9, w13, #8, #24
    1644:	stp	w9, w8, [x21, #32]
    1648:	ldr	w13, [x10, #12]
    164c:	str	x12, [x10]
    1650:	adds	w12, w13, #0x1
    1654:	stp	w11, w12, [x10, #8]
    1658:	b.cc	1618 <BZ2_decompress+0x1618>  // b.lo, b.ul, b.last
    165c:	ldr	w12, [x10, #16]
    1660:	add	w12, w12, #0x1
    1664:	str	w12, [x10, #16]
    1668:	b	1618 <BZ2_decompress+0x1618>
    166c:	mov	w9, wzr
    1670:	add	x8, x21, #0xc7c
    1674:	movi	v0.2d, #0x0
    1678:	stp	q0, q0, [x8, #224]
    167c:	stp	q0, q0, [x8, #192]
    1680:	stp	q0, q0, [x8, #160]
    1684:	stp	q0, q0, [x8, #128]
    1688:	stp	q0, q0, [x8, #96]
    168c:	stp	q0, q0, [x8, #64]
    1690:	stp	q0, q0, [x8, #32]
    1694:	stp	q0, q0, [x8]
    1698:	mov	x8, x9
    169c:	b	180c <BZ2_decompress+0x180c>
    16a0:	mov	w9, #0x25                  	// #37
    16a4:	cmp	w8, #0x1
    16a8:	str	w9, [x21, #8]
    16ac:	b.lt	16e8 <BZ2_decompress+0x16e8>  // b.tstop
    16b0:	ldr	w10, [x21, #32]
    16b4:	sub	w8, w8, #0x1
    16b8:	lsr	w9, w10, w8
    16bc:	and	w14, w9, #0x1
    16c0:	bfi	w9, w20, #1, #31
    16c4:	str	w8, [x21, #36]
    16c8:	mov	w20, w9
    16cc:	cmp	w17, #0x14
    16d0:	b.gt	1798 <BZ2_decompress+0x1798>
    16d4:	ldr	w9, [x26, w17, sxtw #2]
    16d8:	cmp	w20, w9
    16dc:	b.le	2228 <BZ2_decompress+0x2228>
    16e0:	add	w17, w17, #0x1
    16e4:	b	16a0 <BZ2_decompress+0x16a0>
    16e8:	ldr	x9, [x21]
    16ec:	ldr	w10, [x9, #8]
    16f0:	sub	w11, w10, #0x1
    16f4:	b	1708 <BZ2_decompress+0x1708>
    16f8:	sub	w12, w8, #0x8
    16fc:	cmn	w12, #0x8
    1700:	sub	w11, w11, #0x1
    1704:	b.gt	16b4 <BZ2_decompress+0x16b4>
    1708:	cmn	w11, #0x1
    170c:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1710:	ldr	x12, [x9]
    1714:	ldr	w13, [x21, #32]
    1718:	add	w8, w8, #0x8
    171c:	ldrb	w10, [x12], #1
    1720:	bfi	w10, w13, #8, #24
    1724:	stp	w10, w8, [x21, #32]
    1728:	ldr	w13, [x9, #12]
    172c:	str	x12, [x9]
    1730:	adds	w12, w13, #0x1
    1734:	stp	w11, w12, [x9, #8]
    1738:	b.cc	16f8 <BZ2_decompress+0x16f8>  // b.lo, b.ul, b.last
    173c:	ldr	w12, [x9, #16]
    1740:	add	w12, w12, #0x1
    1744:	str	w12, [x9, #16]
    1748:	b	16f8 <BZ2_decompress+0x16f8>
    174c:	ldr	w10, [x21, #32]
    1750:	sub	w8, w8, #0x1
    1754:	lsr	w9, w10, w8
    1758:	and	w14, w9, #0x1
    175c:	bfi	w9, w20, #1, #31
    1760:	str	w8, [x21, #36]
    1764:	mov	w20, w9
    1768:	b	2758 <BZ2_decompress+0x2758>
    176c:	ldr	w10, [x21, #32]
    1770:	sub	w8, w8, #0x1
    1774:	lsr	w9, w10, w8
    1778:	and	w14, w9, #0x1
    177c:	bfi	w9, w20, #1, #31
    1780:	str	w8, [x21, #36]
    1784:	mov	w20, w9
    1788:	b	2614 <BZ2_decompress+0x2614>
    178c:	mov	w0, wzr
    1790:	b	179c <BZ2_decompress+0x179c>
    1794:	mov	w1, wzr
    1798:	mov	w0, #0xfffffffc            	// #-4
    179c:	ldur	w8, [x29, #-36]
    17a0:	ldur	x9, [x29, #-16]
    17a4:	stp	w18, w2, [x25, #8]
    17a8:	stp	w27, w16, [x25, #16]
    17ac:	str	w24, [x25, #80]
    17b0:	stp	w9, w19, [x25]
    17b4:	ldur	w9, [x29, #-32]
    17b8:	stur	x26, [x25, #84]
    17bc:	stur	x23, [x25, #92]
    17c0:	stur	x28, [x25, #100]
    17c4:	stp	w9, w30, [x25, #24]
    17c8:	ldur	w9, [x29, #-20]
    17cc:	stp	w6, w7, [x25, #40]
    17d0:	stp	w5, w3, [x25, #48]
    17d4:	stp	w4, w8, [x25, #56]
    17d8:	stp	w1, w9, [x25, #32]
    17dc:	stp	w17, w20, [x25, #64]
    17e0:	stp	w14, w15, [x25, #72]
    17e4:	ldp	x20, x19, [sp, #224]
    17e8:	ldp	x22, x21, [sp, #208]
    17ec:	ldp	x24, x23, [sp, #192]
    17f0:	ldp	x26, x25, [sp, #176]
    17f4:	ldp	x28, x27, [sp, #160]
    17f8:	ldp	x29, x30, [sp, #144]
    17fc:	add	sp, sp, #0xf0
    1800:	ret
    1804:	ldur	x8, [x29, #-16]
    1808:	add	w8, w8, #0x1
    180c:	cmp	w8, #0xf
    1810:	stur	x8, [x29, #-16]
    1814:	b.gt	1834 <BZ2_decompress+0x1834>
    1818:	add	x8, x21, w8, sxtw
    181c:	ldrb	w8, [x8, #3452]
    1820:	cbz	w8, 1804 <BZ2_decompress+0x1804>
    1824:	mov	w19, wzr
    1828:	cmp	w19, #0xf
    182c:	b.gt	1804 <BZ2_decompress+0x1804>
    1830:	b	1928 <BZ2_decompress+0x1928>
    1834:	mov	w9, wzr
    1838:	mov	x8, xzr
    183c:	add	x10, x21, #0xc7c
    1840:	str	wzr, [x21, #3192]
    1844:	b	1854 <BZ2_decompress+0x1854>
    1848:	add	x8, x8, #0x1
    184c:	cmp	x8, #0x100
    1850:	b.eq	1874 <BZ2_decompress+0x1874>  // b.none
    1854:	ldrb	w11, [x10, x8]
    1858:	cbz	w11, 1848 <BZ2_decompress+0x1848>
    185c:	add	x9, x21, w9, sxtw
    1860:	strb	w8, [x9, #3468]
    1864:	ldr	w9, [x21, #3192]
    1868:	add	w9, w9, #0x1
    186c:	str	w9, [x21, #3192]
    1870:	b	1848 <BZ2_decompress+0x1848>
    1874:	cbz	w9, 1798 <BZ2_decompress+0x1798>
    1878:	add	w2, w9, #0x2
    187c:	ldr	w8, [x21, #36]
    1880:	mov	w9, #0x1e                  	// #30
    1884:	str	w9, [x21, #8]
    1888:	cmp	w8, #0x3
    188c:	b.lt	18c4 <BZ2_decompress+0x18c4>  // b.tstop
    1890:	ldr	w10, [x21, #32]
    1894:	sub	w8, w8, #0x3
    1898:	lsr	w9, w10, w8
    189c:	and	w27, w9, #0x7
    18a0:	cmp	w27, #0x7
    18a4:	str	w8, [x21, #36]
    18a8:	b.hi	584 <BZ2_decompress+0x584>  // b.pmore
    18ac:	mov	w9, #0x1                   	// #1
    18b0:	lsl	w9, w9, w27
    18b4:	mov	w10, #0x83                  	// #131
    18b8:	tst	w9, w10
    18bc:	b.ne	1798 <BZ2_decompress+0x1798>  // b.any
    18c0:	b	584 <BZ2_decompress+0x584>
    18c4:	ldr	x9, [x21]
    18c8:	ldr	w10, [x9, #8]
    18cc:	sub	w11, w10, #0x1
    18d0:	b	18e4 <BZ2_decompress+0x18e4>
    18d4:	sub	w12, w8, #0x8
    18d8:	cmn	w12, #0x6
    18dc:	sub	w11, w11, #0x1
    18e0:	b.gt	1894 <BZ2_decompress+0x1894>
    18e4:	cmn	w11, #0x1
    18e8:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    18ec:	ldr	x12, [x9]
    18f0:	ldr	w13, [x21, #32]
    18f4:	add	w8, w8, #0x8
    18f8:	ldrb	w10, [x12], #1
    18fc:	bfi	w10, w13, #8, #24
    1900:	stp	w10, w8, [x21, #32]
    1904:	ldr	w13, [x9, #12]
    1908:	str	x12, [x9]
    190c:	adds	w12, w13, #0x1
    1910:	stp	w11, w12, [x9, #8]
    1914:	b.cc	18d4 <BZ2_decompress+0x18d4>  // b.lo, b.ul, b.last
    1918:	ldr	w12, [x9, #16]
    191c:	add	w12, w12, #0x1
    1920:	str	w12, [x9, #16]
    1924:	b	18d4 <BZ2_decompress+0x18d4>
    1928:	ldr	w8, [x21, #36]
    192c:	mov	w9, #0x1d                  	// #29
    1930:	str	w9, [x21, #8]
    1934:	cmp	w8, #0x1
    1938:	b.lt	1974 <BZ2_decompress+0x1974>  // b.tstop
    193c:	ldr	w10, [x21, #32]
    1940:	sub	w8, w8, #0x1
    1944:	lsr	w9, w10, w8
    1948:	str	w8, [x21, #36]
    194c:	tbz	w9, #0, 1964 <BZ2_decompress+0x1964>
    1950:	ldur	x8, [x29, #-16]
    1954:	mov	w9, #0x1                   	// #1
    1958:	add	w8, w19, w8, lsl #4
    195c:	add	x8, x21, w8, sxtw
    1960:	strb	w9, [x8, #3196]
    1964:	add	w19, w19, #0x1
    1968:	cmp	w19, #0xf
    196c:	b.gt	1804 <BZ2_decompress+0x1804>
    1970:	b	1928 <BZ2_decompress+0x1928>
    1974:	ldr	x9, [x21]
    1978:	ldr	w10, [x9, #8]
    197c:	sub	w11, w10, #0x1
    1980:	b	1994 <BZ2_decompress+0x1994>
    1984:	sub	w12, w8, #0x8
    1988:	cmn	w12, #0x8
    198c:	sub	w11, w11, #0x1
    1990:	b.gt	1940 <BZ2_decompress+0x1940>
    1994:	cmn	w11, #0x1
    1998:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    199c:	ldr	x12, [x9]
    19a0:	ldr	w13, [x21, #32]
    19a4:	add	w8, w8, #0x8
    19a8:	ldrb	w10, [x12], #1
    19ac:	bfi	w10, w13, #8, #24
    19b0:	stp	w10, w8, [x21, #32]
    19b4:	ldr	w13, [x9, #12]
    19b8:	str	x12, [x9]
    19bc:	adds	w12, w13, #0x1
    19c0:	stp	w11, w12, [x9, #8]
    19c4:	b.cc	1984 <BZ2_decompress+0x1984>  // b.lo, b.ul, b.last
    19c8:	ldr	w12, [x9, #16]
    19cc:	add	w12, w12, #0x1
    19d0:	str	w12, [x9, #16]
    19d4:	b	1984 <BZ2_decompress+0x1984>
    19d8:	cmp	w9, w16
    19dc:	b.ge	1ae4 <BZ2_decompress+0x1ae4>  // b.tcont
    19e0:	mov	w19, wzr
    19e4:	mov	w8, w9
    19e8:	stur	x8, [x29, #-16]
    19ec:	mov	w8, #0x20                  	// #32
    19f0:	mov	w0, #0xfffffffc            	// #-4
    19f4:	ldr	w9, [x21, #36]
    19f8:	str	w8, [x21, #8]
    19fc:	cmp	w9, #0x1
    1a00:	b.lt	1a1c <BZ2_decompress+0x1a1c>  // b.tstop
    1a04:	ldr	w11, [x21, #32]
    1a08:	sub	w9, w9, #0x1
    1a0c:	lsr	w10, w11, w9
    1a10:	str	w9, [x21, #36]
    1a14:	tbnz	w10, #0, 1a98 <BZ2_decompress+0x1a98>
    1a18:	b	1ab4 <BZ2_decompress+0x1ab4>
    1a1c:	ldr	x10, [x21]
    1a20:	mov	w22, w14
    1a24:	ldr	w11, [x10, #8]
    1a28:	sub	w12, w11, #0x1
    1a2c:	b	1a40 <BZ2_decompress+0x1a40>
    1a30:	sub	w13, w9, #0x8
    1a34:	cmn	w13, #0x8
    1a38:	sub	w12, w12, #0x1
    1a3c:	b.gt	1a84 <BZ2_decompress+0x1a84>
    1a40:	cmn	w12, #0x1
    1a44:	b.eq	1aa8 <BZ2_decompress+0x1aa8>  // b.none
    1a48:	ldr	x13, [x10]
    1a4c:	ldr	w14, [x21, #32]
    1a50:	add	w9, w9, #0x8
    1a54:	ldrb	w11, [x13], #1
    1a58:	bfi	w11, w14, #8, #24
    1a5c:	stp	w11, w9, [x21, #32]
    1a60:	ldr	w14, [x10, #12]
    1a64:	str	x13, [x10]
    1a68:	adds	w13, w14, #0x1
    1a6c:	stp	w12, w13, [x10, #8]
    1a70:	b.cc	1a30 <BZ2_decompress+0x1a30>  // b.lo, b.ul, b.last
    1a74:	ldr	w13, [x10, #16]
    1a78:	add	w13, w13, #0x1
    1a7c:	str	w13, [x10, #16]
    1a80:	b	1a30 <BZ2_decompress+0x1a30>
    1a84:	mov	w14, w22
    1a88:	sub	w9, w9, #0x1
    1a8c:	lsr	w10, w11, w9
    1a90:	str	w9, [x21, #36]
    1a94:	tbz	w10, #0, 1ab4 <BZ2_decompress+0x1ab4>
    1a98:	add	w19, w19, #0x1
    1a9c:	cmp	w19, w27
    1aa0:	b.lt	19f4 <BZ2_decompress+0x19f4>  // b.tstop
    1aa4:	b	179c <BZ2_decompress+0x179c>
    1aa8:	mov	w0, wzr
    1aac:	mov	w14, w22
    1ab0:	b	179c <BZ2_decompress+0x179c>
    1ab4:	ldur	x9, [x29, #-16]
    1ab8:	mov	w8, #0x4651                	// #18001
    1abc:	cmp	w9, w8
    1ac0:	mov	x8, x9
    1ac4:	b.gt	1adc <BZ2_decompress+0x1adc>
    1ac8:	ldur	x8, [x29, #-16]
    1acc:	mov	w9, #0x651e                	// #25886
    1ad0:	add	x8, x21, w8, sxtw
    1ad4:	strb	w19, [x8, x9]
    1ad8:	ldur	x8, [x29, #-16]
    1adc:	add	w9, w8, #0x1
    1ae0:	b	19d8 <BZ2_decompress+0x19d8>
    1ae4:	mov	w8, #0x4652                	// #18002
    1ae8:	cmp	w16, w8
    1aec:	csel	w8, w16, w8, lt  // lt = tstop
    1af0:	subs	w10, w27, #0x1
    1af4:	b.lt	1b1c <BZ2_decompress+0x1b1c>  // b.tstop
    1af8:	cmp	w27, #0x1f
    1afc:	b.hi	1bc8 <BZ2_decompress+0x1bc8>  // b.pmore
    1b00:	mov	w9, wzr
    1b04:	sub	x10, x29, #0x8
    1b08:	and	x11, x9, #0xff
    1b0c:	strb	w9, [x10, x11]
    1b10:	add	w9, w9, #0x1
    1b14:	cmp	w27, w9, uxtb
    1b18:	b.gt	1b08 <BZ2_decompress+0x1b08>
    1b1c:	cmp	w16, #0x1
    1b20:	b.lt	1bb8 <BZ2_decompress+0x1bb8>  // b.tstop
    1b24:	stp	w14, w2, [x29, #-48]
    1b28:	mov	w2, w1
    1b2c:	mov	x1, x17
    1b30:	mov	x0, x15
    1b34:	mov	x15, xzr
    1b38:	mov	x22, x8
    1b3c:	sxtw	x9, w8
    1b40:	mov	w10, #0x651e                	// #25886
    1b44:	sub	x11, x29, #0x8
    1b48:	mov	w12, #0x1ecc                	// #7884
    1b4c:	b	1b68 <BZ2_decompress+0x1b68>
    1b50:	mov	x15, x8
    1b54:	add	x15, x8, #0x1
    1b58:	cmp	x15, x9
    1b5c:	sturb	w14, [x29, #-8]
    1b60:	strb	w14, [x13, x12]
    1b64:	b.ge	1b9c <BZ2_decompress+0x1b9c>  // b.tcont
    1b68:	add	x13, x21, x15
    1b6c:	mov	x8, x15
    1b70:	ldrb	w15, [x13, x10]
    1b74:	ldrb	w14, [x11, x15]
    1b78:	cbz	x15, 1b50 <BZ2_decompress+0x1b50>
    1b7c:	add	x16, x11, x15
    1b80:	ldurb	w17, [x16, #-1]
    1b84:	and	w18, w15, #0xff
    1b88:	sub	x15, x15, #0x1
    1b8c:	cmp	w18, #0x1
    1b90:	strb	w17, [x16]
    1b94:	b.ne	1b7c <BZ2_decompress+0x1b7c>  // b.any
    1b98:	b	1b50 <BZ2_decompress+0x1b50>
    1b9c:	mov	x17, x1
    1ba0:	mov	w1, w2
    1ba4:	ldp	w14, w2, [x29, #-48]
    1ba8:	stur	x15, [x29, #-16]
    1bac:	mov	x15, x0
    1bb0:	mov	x8, x22
    1bb4:	b	1bbc <BZ2_decompress+0x1bbc>
    1bb8:	stur	xzr, [x29, #-16]
    1bbc:	mov	w18, wzr
    1bc0:	mov	w16, w8
    1bc4:	b	1c28 <BZ2_decompress+0x1c28>
    1bc8:	neg	w9, w27
    1bcc:	tst	w9, #0xff
    1bd0:	mov	w9, wzr
    1bd4:	b.eq	1b04 <BZ2_decompress+0x1b04>  // b.none
    1bd8:	cmp	w10, #0xff
    1bdc:	b.hi	1b04 <BZ2_decompress+0x1b04>  // b.pmore
    1be0:	adrp	x9, 0 <BZ2_decompress>
    1be4:	ldr	q0, [x9]
    1be8:	mov	w10, wzr
    1bec:	and	w9, w27, #0xffffffe0
    1bf0:	movi	v1.16b, #0x10
    1bf4:	sub	x11, x29, #0x8
    1bf8:	movi	v2.16b, #0x20
    1bfc:	and	x12, x10, #0xe0
    1c00:	add	v3.16b, v0.16b, v1.16b
    1c04:	add	w10, w10, #0x20
    1c08:	add	x12, x11, x12
    1c0c:	cmp	w9, w10
    1c10:	stp	q0, q3, [x12]
    1c14:	add	v0.16b, v0.16b, v2.16b
    1c18:	b.ne	1bfc <BZ2_decompress+0x1bfc>  // b.any
    1c1c:	cmp	w27, w9
    1c20:	b.ne	1b04 <BZ2_decompress+0x1b04>  // b.any
    1c24:	b	1b1c <BZ2_decompress+0x1b1c>
    1c28:	cmp	w18, w27
    1c2c:	b.ge	1cd4 <BZ2_decompress+0x1cd4>  // b.tcont
    1c30:	ldr	w8, [x21, #36]
    1c34:	mov	w9, #0x21                  	// #33
    1c38:	str	w9, [x21, #8]
    1c3c:	cmp	w8, #0x5
    1c40:	b.lt	1c70 <BZ2_decompress+0x1c70>  // b.tstop
    1c44:	ldr	w10, [x21, #32]
    1c48:	sub	w8, w8, #0x5
    1c4c:	mov	w11, wzr
    1c50:	lsr	w9, w10, w8
    1c54:	and	w4, w9, #0x1f
    1c58:	str	w8, [x21, #36]
    1c5c:	mov	x8, x11
    1c60:	cmp	w8, w2
    1c64:	b.ge	2120 <BZ2_decompress+0x2120>  // b.tcont
    1c68:	stur	x8, [x29, #-16]
    1c6c:	b	20c4 <BZ2_decompress+0x20c4>
    1c70:	ldr	x9, [x21]
    1c74:	ldr	w10, [x9, #8]
    1c78:	sub	w11, w10, #0x1
    1c7c:	b	1c90 <BZ2_decompress+0x1c90>
    1c80:	sub	w12, w8, #0x8
    1c84:	cmn	w12, #0x4
    1c88:	sub	w11, w11, #0x1
    1c8c:	b.gt	1c48 <BZ2_decompress+0x1c48>
    1c90:	cmn	w11, #0x1
    1c94:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    1c98:	ldr	x12, [x9]
    1c9c:	ldr	w13, [x21, #32]
    1ca0:	add	w8, w8, #0x8
    1ca4:	ldrb	w10, [x12], #1
    1ca8:	bfi	w10, w13, #8, #24
    1cac:	stp	w10, w8, [x21, #32]
    1cb0:	ldr	w13, [x9, #12]
    1cb4:	str	x12, [x9]
    1cb8:	adds	w12, w13, #0x1
    1cbc:	stp	w11, w12, [x9, #8]
    1cc0:	b.cc	1c80 <BZ2_decompress+0x1c80>  // b.lo, b.ul, b.last
    1cc4:	ldr	w12, [x9, #16]
    1cc8:	add	w12, w12, #0x1
    1ccc:	str	w12, [x9, #16]
    1cd0:	b	1c80 <BZ2_decompress+0x1c80>
    1cd4:	mov	w8, #0x1ecc                	// #7884
    1cd8:	cmp	w27, #0x1
    1cdc:	add	x8, x21, x8
    1ce0:	stur	w2, [x29, #-44]
    1ce4:	str	w3, [sp, #68]
    1ce8:	stp	w4, w14, [x29, #-52]
    1cec:	stur	x15, [x29, #-64]
    1cf0:	str	w20, [sp, #64]
    1cf4:	stp	w16, w5, [sp, #32]
    1cf8:	stp	x8, x17, [sp, #16]
    1cfc:	b.lt	1e58 <BZ2_decompress+0x1e58>  // b.tstop
    1d00:	str	x28, [sp, #72]
    1d04:	cmp	w2, #0x0
    1d08:	mov	w28, w27
    1d0c:	str	x23, [sp, #48]
    1d10:	str	w24, [sp, #56]
    1d14:	stur	w27, [x29, #-40]
    1d18:	b.le	1e60 <BZ2_decompress+0x1e60>
    1d1c:	mov	w9, w2
    1d20:	mov	w8, #0xab71                	// #43889
    1d24:	mov	w10, #0xab70                	// #43888
    1d28:	mov	x22, xzr
    1d2c:	stur	x9, [x29, #-16]
    1d30:	and	x9, x9, #0xfffffffe
    1d34:	add	x23, x21, x8
    1d38:	add	x24, x21, x10
    1d3c:	stur	x9, [x29, #-32]
    1d40:	b	1dac <BZ2_decompress+0x1dac>
    1d44:	mov	w8, #0x408                 	// #1032
    1d48:	madd	x8, x22, x8, x21
    1d4c:	mov	w10, #0xb17c                	// #45436
    1d50:	ldur	w27, [x29, #-44]
    1d54:	add	x0, x8, x10
    1d58:	mov	w10, #0xc9ac                	// #51628
    1d5c:	mov	w9, #0x102                 	// #258
    1d60:	add	x1, x8, x10
    1d64:	mov	w10, #0xe1dc                	// #57820
    1d68:	madd	x9, x22, x9, x21
    1d6c:	add	x2, x8, x10
    1d70:	mov	w8, #0xab70                	// #43888
    1d74:	add	x3, x9, x8
    1d78:	mov	w4, w20
    1d7c:	mov	w6, w27
    1d80:	bl	0 <BZ2_hbCreateDecodeTables>
    1d84:	mov	w2, w27
    1d88:	ldur	w27, [x29, #-40]
    1d8c:	add	x8, x21, x22, lsl #2
    1d90:	add	x22, x22, #0x1
    1d94:	add	x23, x23, #0x102
    1d98:	mov	w9, #0xfa0c                	// #64012
    1d9c:	cmp	x22, x28
    1da0:	add	x24, x24, #0x102
    1da4:	str	w20, [x8, x9]
    1da8:	b.eq	1ecc <BZ2_decompress+0x1ecc>  // b.none
    1dac:	cmp	w2, #0x2
    1db0:	b.cs	1dc4 <BZ2_decompress+0x1dc4>  // b.hs, b.nlast
    1db4:	mov	x9, xzr
    1db8:	mov	w5, wzr
    1dbc:	mov	w20, #0x20                  	// #32
    1dc0:	b	1e2c <BZ2_decompress+0x1e2c>
    1dc4:	ldur	x12, [x29, #-32]
    1dc8:	mov	w9, wzr
    1dcc:	mov	w10, wzr
    1dd0:	mov	w8, #0x20                  	// #32
    1dd4:	mov	x13, x23
    1dd8:	mov	w11, #0x20                  	// #32
    1ddc:	ldurb	w14, [x13, #-1]
    1de0:	ldrb	w15, [x13], #2
    1de4:	cmp	w9, w14
    1de8:	csel	w9, w14, w9, cc  // cc = lo, ul, last
    1dec:	cmp	w10, w15
    1df0:	csel	w10, w15, w10, cc  // cc = lo, ul, last
    1df4:	cmp	w8, w14
    1df8:	csel	w8, w14, w8, gt
    1dfc:	cmp	w11, w15
    1e00:	csel	w11, w15, w11, gt
    1e04:	subs	x12, x12, #0x2
    1e08:	b.ne	1ddc <BZ2_decompress+0x1ddc>  // b.any
    1e0c:	cmp	w9, w10
    1e10:	csel	w5, w9, w10, hi  // hi = pmore
    1e14:	cmp	w8, w11
    1e18:	csel	w20, w8, w11, lt  // lt = tstop
    1e1c:	ldur	x8, [x29, #-16]
    1e20:	ldur	x9, [x29, #-32]
    1e24:	cmp	x9, x8
    1e28:	b.eq	1d44 <BZ2_decompress+0x1d44>  // b.none
    1e2c:	ldur	x10, [x29, #-16]
    1e30:	add	x8, x24, x9
    1e34:	sub	x9, x10, x9
    1e38:	ldrb	w10, [x8], #1
    1e3c:	cmp	w5, w10
    1e40:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    1e44:	cmp	w20, w10
    1e48:	csel	w20, w10, w20, gt
    1e4c:	subs	x9, x9, #0x1
    1e50:	b.ne	1e38 <BZ2_decompress+0x1e38>  // b.any
    1e54:	b	1d44 <BZ2_decompress+0x1d44>
    1e58:	str	wzr, [sp, #40]
    1e5c:	b	1edc <BZ2_decompress+0x1edc>
    1e60:	mov	w8, #0xfa0c                	// #64012
    1e64:	mov	w9, #0xab70                	// #43888
    1e68:	mov	w10, #0xe1dc                	// #57820
    1e6c:	mov	w11, #0xc9ac                	// #51628
    1e70:	mov	w12, #0xb17c                	// #45436
    1e74:	add	x27, x21, x8
    1e78:	add	x20, x21, x9
    1e7c:	add	x22, x21, x10
    1e80:	add	x23, x21, x11
    1e84:	add	x24, x21, x12
    1e88:	ldur	w6, [x29, #-44]
    1e8c:	mov	w4, #0x20                  	// #32
    1e90:	mov	x0, x24
    1e94:	mov	x1, x23
    1e98:	mov	x2, x22
    1e9c:	mov	x3, x20
    1ea0:	mov	w5, wzr
    1ea4:	bl	0 <BZ2_hbCreateDecodeTables>
    1ea8:	mov	w8, #0x20                  	// #32
    1eac:	str	w8, [x27], #4
    1eb0:	add	x20, x20, #0x102
    1eb4:	add	x22, x22, #0x408
    1eb8:	add	x23, x23, #0x408
    1ebc:	subs	x28, x28, #0x1
    1ec0:	add	x24, x24, #0x408
    1ec4:	b.ne	1e88 <BZ2_decompress+0x1e88>  // b.any
    1ec8:	ldur	w27, [x29, #-40]
    1ecc:	ldr	w24, [sp, #56]
    1ed0:	ldr	x28, [sp, #72]
    1ed4:	ldr	x23, [sp, #48]
    1ed8:	str	w27, [sp, #40]
    1edc:	ldr	w20, [x21, #3192]
    1ee0:	ldr	w22, [x21, #40]
    1ee4:	add	x0, x21, #0x44
    1ee8:	mov	w2, #0x400                 	// #1024
    1eec:	mov	w1, wzr
    1ef0:	bl	0 <memset>
    1ef4:	adrp	x13, 0 <BZ2_decompress>
    1ef8:	ldr	d0, [x13]
    1efc:	mov	w11, #0x86a0                	// #34464
    1f00:	add	w10, w20, #0x1
    1f04:	movk	w11, #0x1, lsl #16
    1f08:	mov	w12, #0x1ec8                	// #7880
    1f0c:	mov	x8, xzr
    1f10:	mov	x9, xzr
    1f14:	stur	w10, [x29, #-32]
    1f18:	mov	w10, #0xd                   	// #13
    1f1c:	mul	w6, w22, w11
    1f20:	add	x11, x21, x12
    1f24:	mov	w12, #0xb                   	// #11
    1f28:	mov	w13, #0xa                   	// #10
    1f2c:	mov	w14, #0x9                   	// #9
    1f30:	sub	w15, w9, #0x10
    1f34:	add	x16, x11, x9
    1f38:	orr	w17, w15, #0xf
    1f3c:	sturb	w17, [x16, #-61]
    1f40:	orr	w17, w15, #0xe
    1f44:	sturb	w17, [x16, #-62]
    1f48:	orr	w17, w15, w10
    1f4c:	sturb	w17, [x16, #-63]
    1f50:	orr	w17, w15, #0xc
    1f54:	sturb	w17, [x16, #-64]
    1f58:	orr	w17, w15, w12
    1f5c:	sturb	w17, [x16, #-65]
    1f60:	orr	w17, w15, w13
    1f64:	dup	v1.8b, w15
    1f68:	sturb	w17, [x16, #-66]
    1f6c:	add	w17, w9, #0xff0
    1f70:	sub	x9, x9, #0x10
    1f74:	sturb	w15, [x16, #-76]
    1f78:	orr	w15, w15, w14
    1f7c:	orr	v1.8b, v1.8b, v0.8b
    1f80:	cmn	x9, #0x100
    1f84:	sturb	w15, [x16, #-67]
    1f88:	stur	d1, [x16, #-75]
    1f8c:	str	w17, [x11, x8]
    1f90:	sub	x8, x8, #0x4
    1f94:	b.ne	1f30 <BZ2_decompress+0x1f30>  // b.any
    1f98:	ldp	w16, w5, [sp, #32]
    1f9c:	ldp	w20, w3, [sp, #64]
    1fa0:	ldur	w4, [x29, #-52]
    1fa4:	mov	w7, wzr
    1fa8:	cmp	w16, #0x1
    1fac:	b.lt	209c <BZ2_decompress+0x209c>  // b.tstop
    1fb0:	ldr	x8, [sp, #16]
    1fb4:	ldr	w18, [sp, #40]
    1fb8:	ldp	w14, w2, [x29, #-48]
    1fbc:	mov	w9, #0x408                 	// #1032
    1fc0:	ldrb	w15, [x8]
    1fc4:	mov	w8, #0xfa0c                	// #64012
    1fc8:	mov	w10, #0xc9ac                	// #51628
    1fcc:	mov	w11, #0xe1dc                	// #57820
    1fd0:	add	x12, x21, w15, uxtw #2
    1fd4:	ldr	w24, [x12, x8]
    1fd8:	umaddl	x9, w15, w9, x21
    1fdc:	mov	w8, #0xb17c                	// #45436
    1fe0:	mov	w30, wzr
    1fe4:	add	x23, x9, x10
    1fe8:	add	x28, x9, x11
    1fec:	add	x26, x9, x8
    1ff0:	mov	w8, #0x100                 	// #256
    1ff4:	mov	w1, #0x31                  	// #49
    1ff8:	mov	w17, w24
    1ffc:	stur	x8, [x29, #-16]
    2000:	ldr	w8, [x21, #36]
    2004:	mov	w9, #0x24                  	// #36
    2008:	str	w9, [x21, #8]
    200c:	cmp	w8, w17
    2010:	b.ge	2074 <BZ2_decompress+0x2074>  // b.tcont
    2014:	ldr	x9, [x21]
    2018:	ldr	w10, [x9, #8]
    201c:	sub	w11, w10, #0x1
    2020:	b	2030 <BZ2_decompress+0x2030>
    2024:	cmp	w8, w17
    2028:	sub	w11, w11, #0x1
    202c:	b.ge	2078 <BZ2_decompress+0x2078>  // b.tcont
    2030:	cmn	w11, #0x1
    2034:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    2038:	ldr	x12, [x9]
    203c:	ldr	w13, [x21, #32]
    2040:	add	w8, w8, #0x8
    2044:	ldrb	w10, [x12], #1
    2048:	bfi	w10, w13, #8, #24
    204c:	stp	w10, w8, [x21, #32]
    2050:	ldr	w13, [x9, #12]
    2054:	str	x12, [x9]
    2058:	adds	w12, w13, #0x1
    205c:	stp	w11, w12, [x9, #8]
    2060:	b.cc	2024 <BZ2_decompress+0x2024>  // b.lo, b.ul, b.last
    2064:	ldr	w12, [x9, #16]
    2068:	add	w12, w12, #0x1
    206c:	str	w12, [x9, #16]
    2070:	b	2024 <BZ2_decompress+0x2024>
    2074:	ldr	w10, [x21, #32]
    2078:	sub	w8, w8, w17
    207c:	mov	w9, #0xffffffff            	// #-1
    2080:	lsr	w10, w10, w8
    2084:	lsl	w9, w9, w17
    2088:	bic	w20, w10, w9
    208c:	str	w8, [x21, #36]
    2090:	cmp	w17, #0x14
    2094:	b.le	16d4 <BZ2_decompress+0x16d4>
    2098:	b	1798 <BZ2_decompress+0x1798>
    209c:	ldur	x15, [x29, #-64]
    20a0:	ldr	x17, [sp, #24]
    20a4:	ldr	w18, [sp, #40]
    20a8:	ldp	w14, w2, [x29, #-48]
    20ac:	mov	w8, #0x100                 	// #256
    20b0:	mov	w1, wzr
    20b4:	mov	w30, wzr
    20b8:	mov	w0, #0xfffffffc            	// #-4
    20bc:	stur	x8, [x29, #-16]
    20c0:	b	179c <BZ2_decompress+0x179c>
    20c4:	sub	w8, w4, #0x1
    20c8:	cmp	w8, #0x13
    20cc:	b.hi	1798 <BZ2_decompress+0x1798>  // b.pmore
    20d0:	ldr	w8, [x21, #36]
    20d4:	mov	w9, #0x22                  	// #34
    20d8:	str	w9, [x21, #8]
    20dc:	cmp	w8, #0x1
    20e0:	b.lt	2160 <BZ2_decompress+0x2160>  // b.tstop
    20e4:	ldr	w10, [x21, #32]
    20e8:	sub	w8, w8, #0x1
    20ec:	lsr	w9, w10, w8
    20f0:	str	w8, [x21, #36]
    20f4:	tbnz	w9, #0, 212c <BZ2_decompress+0x212c>
    20f8:	ldur	x10, [x29, #-16]
    20fc:	mov	w8, #0x102                 	// #258
    2100:	smaddl	x8, w18, w8, x21
    2104:	mov	w9, #0xab70                	// #43888
    2108:	add	x8, x8, w10, sxtw
    210c:	strb	w4, [x8, x9]
    2110:	mov	x8, x10
    2114:	add	w8, w8, #0x1
    2118:	cmp	w8, w2
    211c:	b.lt	1c68 <BZ2_decompress+0x1c68>  // b.tstop
    2120:	stur	x8, [x29, #-16]
    2124:	add	w18, w18, #0x1
    2128:	b	1c28 <BZ2_decompress+0x1c28>
    212c:	mov	w9, #0x23                  	// #35
    2130:	cmp	w8, #0x1
    2134:	str	w9, [x21, #8]
    2138:	b.lt	21c4 <BZ2_decompress+0x21c4>  // b.tstop
    213c:	ldr	w10, [x21, #32]
    2140:	sub	w8, w8, #0x1
    2144:	str	w8, [x21, #36]
    2148:	lsr	w8, w10, w8
    214c:	tst	w8, #0x1
    2150:	mov	w8, #0x1                   	// #1
    2154:	cneg	w8, w8, ne  // ne = any
    2158:	add	w4, w8, w4
    215c:	b	20c4 <BZ2_decompress+0x20c4>
    2160:	ldr	x9, [x21]
    2164:	ldr	w10, [x9, #8]
    2168:	sub	w11, w10, #0x1
    216c:	b	2180 <BZ2_decompress+0x2180>
    2170:	sub	w12, w8, #0x8
    2174:	cmn	w12, #0x8
    2178:	sub	w11, w11, #0x1
    217c:	b.gt	20e8 <BZ2_decompress+0x20e8>
    2180:	cmn	w11, #0x1
    2184:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    2188:	ldr	x12, [x9]
    218c:	ldr	w13, [x21, #32]
    2190:	add	w8, w8, #0x8
    2194:	ldrb	w10, [x12], #1
    2198:	bfi	w10, w13, #8, #24
    219c:	stp	w10, w8, [x21, #32]
    21a0:	ldr	w13, [x9, #12]
    21a4:	str	x12, [x9]
    21a8:	adds	w12, w13, #0x1
    21ac:	stp	w11, w12, [x9, #8]
    21b0:	b.cc	2170 <BZ2_decompress+0x2170>  // b.lo, b.ul, b.last
    21b4:	ldr	w12, [x9, #16]
    21b8:	add	w12, w12, #0x1
    21bc:	str	w12, [x9, #16]
    21c0:	b	2170 <BZ2_decompress+0x2170>
    21c4:	ldr	x9, [x21]
    21c8:	ldr	w10, [x9, #8]
    21cc:	sub	w11, w10, #0x1
    21d0:	b	21e4 <BZ2_decompress+0x21e4>
    21d4:	sub	w12, w8, #0x8
    21d8:	cmn	w12, #0x8
    21dc:	sub	w11, w11, #0x1
    21e0:	b.gt	2140 <BZ2_decompress+0x2140>
    21e4:	cmn	w11, #0x1
    21e8:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    21ec:	ldr	x12, [x9]
    21f0:	ldr	w13, [x21, #32]
    21f4:	add	w8, w8, #0x8
    21f8:	ldrb	w10, [x12], #1
    21fc:	bfi	w10, w13, #8, #24
    2200:	stp	w10, w8, [x21, #32]
    2204:	ldr	w13, [x9, #12]
    2208:	str	x12, [x9]
    220c:	adds	w12, w13, #0x1
    2210:	stp	w11, w12, [x9, #8]
    2214:	b.cc	21d4 <BZ2_decompress+0x21d4>  // b.lo, b.ul, b.last
    2218:	ldr	w12, [x9, #16]
    221c:	add	w12, w12, #0x1
    2220:	str	w12, [x9, #16]
    2224:	b	21d4 <BZ2_decompress+0x21d4>
    2228:	sxtw	x8, w17
    222c:	ldr	w8, [x23, x8, lsl #2]
    2230:	sub	w8, w20, w8
    2234:	cmp	w8, #0x101
    2238:	b.hi	1798 <BZ2_decompress+0x1798>  // b.pmore
    223c:	ldr	w9, [x28, w8, uxtw #2]
    2240:	ldur	w8, [x29, #-32]
    2244:	cmp	w9, w8
    2248:	b.eq	2840 <BZ2_decompress+0x2840>  // b.none
    224c:	subs	w11, w9, #0x1
    2250:	b.hi	2260 <BZ2_decompress+0x2260>  // b.pmore
    2254:	mov	w5, #0xffffffff            	// #-1
    2258:	mov	w3, #0x1                   	// #1
    225c:	b	2640 <BZ2_decompress+0x2640>
    2260:	cmp	w7, w6
    2264:	stur	w9, [x29, #-20]
    2268:	b.ge	1798 <BZ2_decompress+0x1798>  // b.tcont
    226c:	cmp	w11, #0xf
    2270:	b.hi	22f8 <BZ2_decompress+0x22f8>  // b.pmore
    2274:	ldrsw	x9, [x21, #7820]
    2278:	mov	w0, w14
    227c:	cmp	w11, #0x4
    2280:	add	w8, w9, w11
    2284:	add	x8, x21, x8
    2288:	ldrb	w8, [x8, #3724]
    228c:	b.cc	22c8 <BZ2_decompress+0x22c8>  // b.lo, b.ul, b.last
    2290:	ldur	w10, [x29, #-20]
    2294:	add	w11, w9, w10
    2298:	add	x12, x21, #0xe8c
    229c:	sub	w13, w11, #0x4
    22a0:	sub	w11, w11, #0x5
    22a4:	ldr	w14, [x12, w11, sxtw]
    22a8:	sub	w11, w10, #0x4
    22ac:	sub	w10, w10, #0x5
    22b0:	cmp	w10, #0x3
    22b4:	mov	w10, w11
    22b8:	str	w14, [x12, w13, sxtw]
    22bc:	b.hi	2294 <BZ2_decompress+0x2294>  // b.pmore
    22c0:	subs	w11, w11, #0x1
    22c4:	b.eq	22ec <BZ2_decompress+0x22ec>  // b.none
    22c8:	neg	w10, w11
    22cc:	add	w11, w11, w9
    22d0:	sub	w12, w11, #0x1
    22d4:	add	x13, x21, #0xe8c
    22d8:	ldrb	w14, [x13, w12, uxtw]
    22dc:	adds	w10, w10, #0x1
    22e0:	strb	w14, [x13, w11, uxtw]
    22e4:	mov	w11, w12
    22e8:	b.cc	22d0 <BZ2_decompress+0x22d0>  // b.lo, b.ul, b.last
    22ec:	add	x9, x21, x9
    22f0:	strb	w8, [x9, #3724]
    22f4:	b	24e4 <BZ2_decompress+0x24e4>
    22f8:	lsr	w10, w11, #4
    22fc:	add	x9, x21, w10, uxtw #2
    2300:	ldr	w13, [x9, #7820]
    2304:	ands	w8, w11, #0xf
    2308:	mov	w11, #0x1e8c                	// #7820
    230c:	add	x11, x9, x11
    2310:	add	w8, w13, w8
    2314:	sxtw	x12, w8
    2318:	add	x8, x21, x12
    231c:	ldrb	w8, [x8, #3724]
    2320:	b.eq	2358 <BZ2_decompress+0x2358>  // b.none
    2324:	mov	w0, w14
    2328:	add	x13, x21, x12
    232c:	ldrb	w14, [x13, #3723]
    2330:	sub	x12, x12, #0x1
    2334:	strb	w14, [x13, #3724]
    2338:	ldrsw	x13, [x11]
    233c:	cmp	x12, x13
    2340:	b.gt	2328 <BZ2_decompress+0x2328>
    2344:	add	w12, w13, #0x1
    2348:	mov	w14, w0
    234c:	str	w12, [x11]
    2350:	cbnz	w10, 2360 <BZ2_decompress+0x2360>
    2354:	b	2398 <BZ2_decompress+0x2398>
    2358:	add	w12, w13, #0x1
    235c:	str	w12, [x11]
    2360:	mov	w11, #0x1e8c                	// #7820
    2364:	add	x10, x10, #0x1
    2368:	add	x9, x9, x11
    236c:	ldrsw	x11, [x9]
    2370:	add	x13, x21, #0xe8c
    2374:	sub	x10, x10, #0x1
    2378:	cmp	x10, #0x1
    237c:	sub	x11, x11, #0x1
    2380:	str	w11, [x9], #-4
    2384:	ldrsw	x12, [x9]
    2388:	add	x12, x12, x13
    238c:	ldrb	w12, [x12, #15]
    2390:	strb	w12, [x13, x11]
    2394:	b.gt	236c <BZ2_decompress+0x236c>
    2398:	ldrsw	x9, [x21, #7820]
    239c:	sub	x9, x9, #0x1
    23a0:	str	w9, [x21, #7820]
    23a4:	add	x9, x21, x9
    23a8:	strb	w8, [x9, #3724]
    23ac:	ldr	w9, [x21, #7820]
    23b0:	cbnz	w9, 24e8 <BZ2_decompress+0x24e8>
    23b4:	mov	w10, #0x1ec8                	// #7880
    23b8:	mov	w11, #0x1e83                	// #7811
    23bc:	mov	w0, w14
    23c0:	mov	x9, xzr
    23c4:	add	x10, x21, x10
    23c8:	add	x11, x21, x11
    23cc:	ldrsw	x12, [x10]
    23d0:	add	x13, x21, #0xe8c
    23d4:	add	x12, x12, x13
    23d8:	ldrb	w14, [x12, #15]
    23dc:	add	x12, x11, x9
    23e0:	strb	w14, [x12, #8]
    23e4:	ldrsw	x14, [x10]
    23e8:	add	x14, x14, x13
    23ec:	ldrb	w14, [x14, #14]
    23f0:	strb	w14, [x12, #7]
    23f4:	ldrsw	x14, [x10]
    23f8:	add	x14, x14, x13
    23fc:	ldrb	w14, [x14, #13]
    2400:	strb	w14, [x12, #6]
    2404:	ldrsw	x14, [x10]
    2408:	add	x14, x14, x13
    240c:	ldrb	w14, [x14, #12]
    2410:	strb	w14, [x12, #5]
    2414:	ldrsw	x14, [x10]
    2418:	add	x14, x14, x13
    241c:	ldrb	w14, [x14, #11]
    2420:	strb	w14, [x12, #4]
    2424:	ldrsw	x14, [x10]
    2428:	add	x14, x14, x13
    242c:	ldrb	w14, [x14, #10]
    2430:	strb	w14, [x12, #3]
    2434:	ldrsw	x14, [x10]
    2438:	add	x14, x14, x13
    243c:	ldrb	w14, [x14, #9]
    2440:	strb	w14, [x12, #2]
    2444:	ldrsw	x14, [x10]
    2448:	add	x14, x14, x13
    244c:	ldrb	w14, [x14, #8]
    2450:	strb	w14, [x12, #1]
    2454:	ldrsw	x14, [x10]
    2458:	add	x14, x14, x13
    245c:	ldrb	w14, [x14, #7]
    2460:	strb	w14, [x12]
    2464:	ldrsw	x14, [x10]
    2468:	add	x14, x14, x13
    246c:	ldrb	w14, [x14, #6]
    2470:	sturb	w14, [x12, #-1]
    2474:	ldrsw	x14, [x10]
    2478:	add	x14, x14, x13
    247c:	ldrb	w14, [x14, #5]
    2480:	sturb	w14, [x12, #-2]
    2484:	ldrsw	x14, [x10]
    2488:	add	x14, x14, x13
    248c:	ldrb	w14, [x14, #4]
    2490:	sturb	w14, [x12, #-3]
    2494:	ldrsw	x14, [x10]
    2498:	add	x14, x14, x13
    249c:	ldrb	w14, [x14, #3]
    24a0:	sturb	w14, [x12, #-4]
    24a4:	ldrsw	x14, [x10]
    24a8:	add	x14, x14, x13
    24ac:	ldrb	w14, [x14, #2]
    24b0:	sturb	w14, [x12, #-5]
    24b4:	ldrsw	x14, [x10]
    24b8:	add	x14, x14, x13
    24bc:	ldrb	w14, [x14, #1]
    24c0:	sturb	w14, [x12, #-6]
    24c4:	ldrsw	x14, [x10]
    24c8:	ldrb	w13, [x13, x14]
    24cc:	add	w14, w9, #0xff0
    24d0:	sub	x9, x9, #0x10
    24d4:	cmn	x9, #0x100
    24d8:	sturb	w13, [x12, #-7]
    24dc:	str	w14, [x10], #-4
    24e0:	b.ne	23cc <BZ2_decompress+0x23cc>  // b.any
    24e4:	mov	w14, w0
    24e8:	add	x8, x21, x8
    24ec:	ldrb	w9, [x8, #3468]
    24f0:	add	x9, x21, x9, lsl #2
    24f4:	ldr	w10, [x9, #68]
    24f8:	add	w10, w10, #0x1
    24fc:	str	w10, [x9, #68]
    2500:	ldrb	w9, [x21, #44]
    2504:	ldrb	w8, [x8, #3468]
    2508:	cbz	w9, 2520 <BZ2_decompress+0x2520>
    250c:	ldr	x9, [x21, #3160]
    2510:	strh	w8, [x9, w7, sxtw #1]
    2514:	add	w7, w7, #0x1
    2518:	cbnz	w1, 257c <BZ2_decompress+0x257c>
    251c:	b	2530 <BZ2_decompress+0x2530>
    2520:	ldr	x9, [x21, #3152]
    2524:	str	w8, [x9, w7, sxtw #2]
    2528:	add	w7, w7, #0x1
    252c:	cbnz	w1, 257c <BZ2_decompress+0x257c>
    2530:	sxtw	x8, w30
    2534:	add	x30, x8, #0x1
    2538:	cmp	w30, w16
    253c:	b.ge	1794 <BZ2_decompress+0x1794>  // b.tcont
    2540:	add	x8, x21, x30
    2544:	mov	w9, #0x1ecc                	// #7884
    2548:	ldrb	w15, [x8, x9]
    254c:	mov	w10, #0xfa0c                	// #64012
    2550:	mov	w8, #0x408                 	// #1032
    2554:	mov	w9, #0xb17c                	// #45436
    2558:	add	x12, x21, x15, lsl #2
    255c:	ldr	w24, [x12, x10]
    2560:	madd	x8, x15, x8, x21
    2564:	mov	w11, #0xe1dc                	// #57820
    2568:	add	x26, x8, x9
    256c:	mov	w9, #0xc9ac                	// #51628
    2570:	add	x28, x8, x11
    2574:	add	x23, x8, x9
    2578:	mov	w1, #0x32                  	// #50
    257c:	sub	w1, w1, #0x1
    2580:	mov	w17, w24
    2584:	ldr	w8, [x21, #36]
    2588:	mov	w9, #0x28                  	// #40
    258c:	str	w9, [x21, #8]
    2590:	cmp	w8, w17
    2594:	b.ge	25f8 <BZ2_decompress+0x25f8>  // b.tcont
    2598:	ldr	x9, [x21]
    259c:	ldr	w10, [x9, #8]
    25a0:	sub	w11, w10, #0x1
    25a4:	b	25b4 <BZ2_decompress+0x25b4>
    25a8:	cmp	w8, w17
    25ac:	sub	w11, w11, #0x1
    25b0:	b.ge	25fc <BZ2_decompress+0x25fc>  // b.tcont
    25b4:	cmn	w11, #0x1
    25b8:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    25bc:	ldr	x12, [x9]
    25c0:	ldr	w13, [x21, #32]
    25c4:	add	w8, w8, #0x8
    25c8:	ldrb	w10, [x12], #1
    25cc:	bfi	w10, w13, #8, #24
    25d0:	stp	w10, w8, [x21, #32]
    25d4:	ldr	w13, [x9, #12]
    25d8:	str	x12, [x9]
    25dc:	adds	w12, w13, #0x1
    25e0:	stp	w11, w12, [x9, #8]
    25e4:	b.cc	25a8 <BZ2_decompress+0x25a8>  // b.lo, b.ul, b.last
    25e8:	ldr	w12, [x9, #16]
    25ec:	add	w12, w12, #0x1
    25f0:	str	w12, [x9, #16]
    25f4:	b	25a8 <BZ2_decompress+0x25a8>
    25f8:	ldr	w10, [x21, #32]
    25fc:	sub	w8, w8, w17
    2600:	mov	w9, #0xffffffff            	// #-1
    2604:	lsr	w10, w10, w8
    2608:	lsl	w9, w9, w17
    260c:	bic	w20, w10, w9
    2610:	str	w8, [x21, #36]
    2614:	cmp	w17, #0x14
    2618:	b.gt	1798 <BZ2_decompress+0x1798>
    261c:	ldr	w9, [x26, w17, sxtw #2]
    2620:	cmp	w20, w9
    2624:	b.le	2228 <BZ2_decompress+0x2228>
    2628:	add	w17, w17, #0x1
    262c:	mov	w9, #0x29                  	// #41
    2630:	cmp	w8, #0x1
    2634:	str	w9, [x21, #8]
    2638:	b.ge	176c <BZ2_decompress+0x176c>  // b.tcont
    263c:	b	658 <BZ2_decompress+0x658>
    2640:	cmp	w3, #0x200, lsl #12
    2644:	stur	w9, [x29, #-20]
    2648:	b.ge	1798 <BZ2_decompress+0x1798>  // b.tcont
    264c:	cmp	w9, #0x1
    2650:	b.eq	2668 <BZ2_decompress+0x2668>  // b.none
    2654:	cbnz	w9, 265c <BZ2_decompress+0x265c>
    2658:	add	w5, w5, w3
    265c:	lsl	w3, w3, #1
    2660:	cbnz	w1, 26c0 <BZ2_decompress+0x26c0>
    2664:	b	2674 <BZ2_decompress+0x2674>
    2668:	add	w5, w5, w3, lsl #1
    266c:	lsl	w3, w3, #1
    2670:	cbnz	w1, 26c0 <BZ2_decompress+0x26c0>
    2674:	sxtw	x8, w30
    2678:	add	x30, x8, #0x1
    267c:	cmp	w30, w16
    2680:	b.ge	1794 <BZ2_decompress+0x1794>  // b.tcont
    2684:	add	x8, x21, x30
    2688:	mov	w9, #0x1ecc                	// #7884
    268c:	ldrb	w15, [x8, x9]
    2690:	mov	w10, #0xfa0c                	// #64012
    2694:	mov	w8, #0x408                 	// #1032
    2698:	mov	w9, #0xb17c                	// #45436
    269c:	add	x12, x21, x15, lsl #2
    26a0:	ldr	w24, [x12, x10]
    26a4:	madd	x8, x15, x8, x21
    26a8:	mov	w11, #0xe1dc                	// #57820
    26ac:	add	x26, x8, x9
    26b0:	mov	w9, #0xc9ac                	// #51628
    26b4:	add	x28, x8, x11
    26b8:	add	x23, x8, x9
    26bc:	mov	w1, #0x32                  	// #50
    26c0:	sub	w1, w1, #0x1
    26c4:	mov	w17, w24
    26c8:	ldr	w8, [x21, #36]
    26cc:	mov	w9, #0x26                  	// #38
    26d0:	str	w9, [x21, #8]
    26d4:	cmp	w8, w17
    26d8:	b.ge	273c <BZ2_decompress+0x273c>  // b.tcont
    26dc:	ldr	x9, [x21]
    26e0:	ldr	w10, [x9, #8]
    26e4:	sub	w11, w10, #0x1
    26e8:	b	26f8 <BZ2_decompress+0x26f8>
    26ec:	cmp	w8, w17
    26f0:	sub	w11, w11, #0x1
    26f4:	b.ge	2740 <BZ2_decompress+0x2740>  // b.tcont
    26f8:	cmn	w11, #0x1
    26fc:	b.eq	178c <BZ2_decompress+0x178c>  // b.none
    2700:	ldr	x12, [x9]
    2704:	ldr	w13, [x21, #32]
    2708:	add	w8, w8, #0x8
    270c:	ldrb	w10, [x12], #1
    2710:	bfi	w10, w13, #8, #24
    2714:	stp	w10, w8, [x21, #32]
    2718:	ldr	w13, [x9, #12]
    271c:	str	x12, [x9]
    2720:	adds	w12, w13, #0x1
    2724:	stp	w11, w12, [x9, #8]
    2728:	b.cc	26ec <BZ2_decompress+0x26ec>  // b.lo, b.ul, b.last
    272c:	ldr	w12, [x9, #16]
    2730:	add	w12, w12, #0x1
    2734:	str	w12, [x9, #16]
    2738:	b	26ec <BZ2_decompress+0x26ec>
    273c:	ldr	w10, [x21, #32]
    2740:	sub	w8, w8, w17
    2744:	mov	w9, #0xffffffff            	// #-1
    2748:	lsr	w10, w10, w8
    274c:	lsl	w9, w9, w17
    2750:	bic	w20, w10, w9
    2754:	str	w8, [x21, #36]
    2758:	cmp	w17, #0x14
    275c:	b.gt	1798 <BZ2_decompress+0x1798>
    2760:	ldr	w9, [x26, w17, sxtw #2]
    2764:	cmp	w20, w9
    2768:	b.le	2784 <BZ2_decompress+0x2784>
    276c:	add	w17, w17, #0x1
    2770:	mov	w9, #0x27                  	// #39
    2774:	cmp	w8, #0x1
    2778:	str	w9, [x21, #8]
    277c:	b.ge	174c <BZ2_decompress+0x174c>  // b.tcont
    2780:	b	5e0 <BZ2_decompress+0x5e0>
    2784:	sxtw	x8, w17
    2788:	ldr	w8, [x23, x8, lsl #2]
    278c:	sub	w8, w20, w8
    2790:	cmp	w8, #0x101
    2794:	b.hi	1798 <BZ2_decompress+0x1798>  // b.pmore
    2798:	ldr	w9, [x28, w8, uxtw #2]
    279c:	cmp	w9, #0x2
    27a0:	b.cc	2640 <BZ2_decompress+0x2640>  // b.lo, b.ul, b.last
    27a4:	ldrsw	x8, [x21, #7820]
    27a8:	stur	w9, [x29, #-20]
    27ac:	add	x8, x21, x8
    27b0:	ldrb	w8, [x8, #3724]
    27b4:	add	x8, x21, x8
    27b8:	ldrb	w9, [x8, #3468]
    27bc:	add	w8, w5, #0x1
    27c0:	add	x10, x21, x9, lsl #2
    27c4:	ldr	w11, [x10, #68]
    27c8:	add	w11, w11, w8
    27cc:	str	w11, [x10, #68]
    27d0:	ldrb	w10, [x21, #44]
    27d4:	cbz	w10, 2804 <BZ2_decompress+0x2804>
    27d8:	tbnz	w5, #31, 282c <BZ2_decompress+0x282c>
    27dc:	sxtw	x7, w7
    27e0:	sxtw	x10, w6
    27e4:	cmp	x7, x10
    27e8:	b.ge	29c4 <BZ2_decompress+0x29c4>  // b.tcont
    27ec:	ldr	x11, [x21, #3160]
    27f0:	subs	w8, w8, #0x1
    27f4:	strh	w9, [x11, x7, lsl #1]
    27f8:	add	x7, x7, #0x1
    27fc:	b.gt	27e4 <BZ2_decompress+0x27e4>
    2800:	b	282c <BZ2_decompress+0x282c>
    2804:	tbnz	w5, #31, 282c <BZ2_decompress+0x282c>
    2808:	sxtw	x7, w7
    280c:	sxtw	x10, w6
    2810:	cmp	x7, x10
    2814:	b.ge	29c4 <BZ2_decompress+0x29c4>  // b.tcont
    2818:	ldr	x11, [x21, #3152]
    281c:	subs	w8, w8, #0x1
    2820:	str	w9, [x11, x7, lsl #2]
    2824:	add	x7, x7, #0x1
    2828:	b.gt	2810 <BZ2_decompress+0x2810>
    282c:	ldur	w9, [x29, #-20]
    2830:	mov	w5, w8
    2834:	ldur	w8, [x29, #-32]
    2838:	cmp	w9, w8
    283c:	b.ne	224c <BZ2_decompress+0x224c>  // b.any
    2840:	ldr	w8, [x21, #56]
    2844:	mov	w0, #0xfffffffc            	// #-4
    2848:	stur	w9, [x29, #-20]
    284c:	tbnz	w8, #31, 29d0 <BZ2_decompress+0x29d0>
    2850:	cmp	w8, w7
    2854:	b.ge	29d0 <BZ2_decompress+0x29d0>  // b.tcont
    2858:	mov	x9, xzr
    285c:	add	x8, x21, #0x44
    2860:	stur	x9, [x29, #-16]
    2864:	ldr	w9, [x8, x9, lsl #2]
    2868:	tbnz	w9, #31, 2a34 <BZ2_decompress+0x2a34>
    286c:	cmp	w9, w7
    2870:	b.gt	2a34 <BZ2_decompress+0x2a34>
    2874:	ldur	x9, [x29, #-16]
    2878:	add	x9, x9, #0x1
    287c:	cmp	x9, #0x100
    2880:	b.ne	2860 <BZ2_decompress+0x2860>  // b.any
    2884:	mov	w22, w1
    2888:	mov	x8, xzr
    288c:	add	x1, x21, #0x448
    2890:	str	wzr, [x21, #1096]
    2894:	add	x9, x21, x8
    2898:	ldur	q0, [x9, #68]
    289c:	add	x8, x8, #0x10
    28a0:	add	x9, x9, #0x44c
    28a4:	cmp	x8, #0x400
    28a8:	str	q0, [x9]
    28ac:	b.ne	2894 <BZ2_decompress+0x2894>  // b.any
    28b0:	ldr	w9, [x21, #1096]
    28b4:	mov	x8, xzr
    28b8:	add	x10, x21, #0x44c
    28bc:	ldr	w11, [x10, x8]
    28c0:	add	w9, w11, w9
    28c4:	str	w9, [x10, x8]
    28c8:	add	x8, x8, #0x4
    28cc:	cmp	x8, #0x400
    28d0:	b.ne	28bc <BZ2_decompress+0x28bc>  // b.any
    28d4:	mov	x9, xzr
    28d8:	add	x8, x21, #0x448
    28dc:	stur	x9, [x29, #-16]
    28e0:	ldr	w9, [x8, x9, lsl #2]
    28e4:	tbnz	w9, #31, 2a4c <BZ2_decompress+0x2a4c>
    28e8:	cmp	w9, w7
    28ec:	b.gt	2a4c <BZ2_decompress+0x2a4c>
    28f0:	ldur	x9, [x29, #-16]
    28f4:	add	x9, x9, #0x1
    28f8:	cmp	x9, #0x101
    28fc:	b.ne	28dc <BZ2_decompress+0x28dc>  // b.any
    2900:	ldr	w10, [x21, #1096]
    2904:	mov	x8, xzr
    2908:	add	x9, x21, #0x44c
    290c:	ldr	w11, [x9, x8, lsl #2]
    2910:	cmp	w10, w11
    2914:	b.gt	2a44 <BZ2_decompress+0x2a44>
    2918:	add	x8, x8, #0x1
    291c:	cmp	x8, #0x100
    2920:	mov	w10, w11
    2924:	b.ne	290c <BZ2_decompress+0x290c>  // b.any
    2928:	ldr	w8, [x21, #52]
    292c:	mov	w9, #0xffffffff            	// #-1
    2930:	str	w9, [x21, #3184]
    2934:	mov	w9, #0x2                   	// #2
    2938:	cmp	w8, #0x2
    293c:	str	x28, [sp, #72]
    2940:	stur	w14, [x29, #-48]
    2944:	str	wzr, [x21, #16]
    2948:	strb	wzr, [x21, #12]
    294c:	str	w9, [x21, #8]
    2950:	str	x17, [sp, #24]
    2954:	str	w18, [sp, #40]
    2958:	b.ge	2c38 <BZ2_decompress+0x2c38>  // b.tcont
    295c:	ldur	w28, [x29, #-20]
    2960:	ldrb	w8, [x21, #44]
    2964:	cbz	w8, 2ca8 <BZ2_decompress+0x2ca8>
    2968:	str	w20, [sp, #64]
    296c:	mov	w20, w2
    2970:	mov	w8, #0x448                 	// #1096
    2974:	str	x30, [sp, #8]
    2978:	str	x6, [sp, #56]
    297c:	stp	w16, w5, [sp, #32]
    2980:	stur	x15, [x29, #-64]
    2984:	stur	w4, [x29, #-52]
    2988:	str	w3, [sp, #68]
    298c:	add	x9, x21, x8
    2990:	ldr	q0, [x9]
    2994:	add	x8, x8, #0x10
    2998:	add	x9, x9, #0x404
    299c:	cmp	x8, #0x848
    29a0:	str	q0, [x9]
    29a4:	b.ne	298c <BZ2_decompress+0x298c>  // b.any
    29a8:	ldr	w8, [x21, #2120]
    29ac:	cmp	w7, #0x0
    29b0:	str	w8, [x21, #3148]
    29b4:	b.le	2a60 <BZ2_decompress+0x2a60>
    29b8:	mov	x8, xzr
    29bc:	mov	w9, w7
    29c0:	b	29fc <BZ2_decompress+0x29fc>
    29c4:	mov	w0, #0xfffffffc            	// #-4
    29c8:	mov	w5, w8
    29cc:	b	179c <BZ2_decompress+0x179c>
    29d0:	stur	w9, [x29, #-32]
    29d4:	b	179c <BZ2_decompress+0x179c>
    29d8:	asr	w14, w14, #16
    29dc:	bfi	w13, w14, #4, #28
    29e0:	strb	w13, [x11, x12]
    29e4:	ldr	w11, [x10]
    29e8:	add	x8, x8, #0x1
    29ec:	cmp	x9, x8
    29f0:	add	w11, w11, #0x1
    29f4:	str	w11, [x10]
    29f8:	b.eq	2a60 <BZ2_decompress+0x2a60>  // b.none
    29fc:	ldr	x10, [x21, #3160]
    2a00:	lsl	x11, x8, #1
    2a04:	ldrb	w12, [x10, x11]
    2a08:	add	x15, x21, x12, lsl #2
    2a0c:	ldr	w14, [x15, #2124]
    2a10:	ubfx	x12, x8, #1, #31
    2a14:	strh	w14, [x10, x11]
    2a18:	ldr	x11, [x21, #3168]
    2a1c:	add	x10, x15, #0x84c
    2a20:	ldrb	w13, [x11, x12]
    2a24:	tbnz	w8, #0, 29d8 <BZ2_decompress+0x29d8>
    2a28:	and	w13, w13, #0xf0
    2a2c:	orr	w13, w13, w14, asr #16
    2a30:	b	29e0 <BZ2_decompress+0x29e0>
    2a34:	ldur	w8, [x29, #-20]
    2a38:	mov	w0, #0xfffffffc            	// #-4
    2a3c:	stur	w8, [x29, #-32]
    2a40:	b	179c <BZ2_decompress+0x179c>
    2a44:	add	w8, w8, #0x1
    2a48:	stur	x8, [x29, #-16]
    2a4c:	ldur	w8, [x29, #-20]
    2a50:	mov	w0, #0xfffffffc            	// #-4
    2a54:	mov	w1, w22
    2a58:	stur	w8, [x29, #-32]
    2a5c:	b	179c <BZ2_decompress+0x179c>
    2a60:	ldrsw	x9, [x21, #56]
    2a64:	ldr	x8, [x21, #3168]
    2a68:	ldr	x10, [x21, #3160]
    2a6c:	str	x7, [sp, #48]
    2a70:	asr	w11, w9, #1
    2a74:	ldrb	w11, [x8, w11, sxtw]
    2a78:	ldrh	w19, [x10, x9, lsl #1]
    2a7c:	ubfiz	w12, w9, #2, #1
    2a80:	lsr	w11, w11, w12
    2a84:	bfi	w19, w11, #16, #4
    2a88:	mov	w14, w19
    2a8c:	sbfx	x11, x14, #1, #31
    2a90:	sbfiz	x12, x14, #1, #32
    2a94:	ldrb	w13, [x8, x11]
    2a98:	ldrh	w19, [x10, x12]
    2a9c:	strh	w9, [x10, x12]
    2aa0:	ldrb	w10, [x8, x11]
    2aa4:	ubfiz	w12, w14, #2, #1
    2aa8:	lsr	w12, w13, w12
    2aac:	bfi	w19, w12, #16, #4
    2ab0:	stur	x14, [x29, #-16]
    2ab4:	tbnz	w14, #0, 2ac4 <BZ2_decompress+0x2ac4>
    2ab8:	and	w10, w10, #0xf0
    2abc:	orr	w10, w10, w9, asr #16
    2ac0:	b	2acc <BZ2_decompress+0x2acc>
    2ac4:	asr	w9, w9, #16
    2ac8:	bfi	w10, w9, #4, #28
    2acc:	strb	w10, [x8, x11]
    2ad0:	ldr	w8, [x21, #56]
    2ad4:	ldur	x11, [x29, #-16]
    2ad8:	cmp	w11, w8
    2adc:	b.eq	2af0 <BZ2_decompress+0x2af0>  // b.none
    2ae0:	ldr	x10, [x21, #3160]
    2ae4:	ldr	x8, [x21, #3168]
    2ae8:	mov	w9, w11
    2aec:	b	2a88 <BZ2_decompress+0x2a88>
    2af0:	ldrb	w9, [x21, #20]
    2af4:	mov	w8, #0x86a0                	// #34464
    2af8:	movk	w8, #0x1, lsl #16
    2afc:	str	w11, [x21, #60]
    2b00:	str	wzr, [x21, #1092]
    2b04:	cbz	w9, 2ba8 <BZ2_decompress+0x2ba8>
    2b08:	ldr	w9, [x21, #40]
    2b0c:	str	xzr, [x21, #24]
    2b10:	mul	w8, w9, w8
    2b14:	cmp	w11, w8
    2b18:	b.cs	2c30 <BZ2_decompress+0x2c30>  // b.hs, b.nlast
    2b1c:	ldur	x0, [x29, #-16]
    2b20:	bl	0 <BZ2_indexIntoF>
    2b24:	ldr	w9, [x21, #60]
    2b28:	ldr	x10, [x21, #3168]
    2b2c:	str	w0, [x21, #64]
    2b30:	ldr	x11, [x21, #3160]
    2b34:	lsr	x12, x9, #1
    2b38:	ldrb	w10, [x10, x12]
    2b3c:	ldr	w12, [x21, #1092]
    2b40:	ldrh	w11, [x11, x9, lsl #1]
    2b44:	ubfiz	w9, w9, #2, #1
    2b48:	lsr	w10, w10, w9
    2b4c:	ldr	w9, [x21, #24]
    2b50:	mov	w8, w0
    2b54:	add	w12, w12, #0x1
    2b58:	bfi	w11, w10, #16, #4
    2b5c:	str	w11, [x21, #60]
    2b60:	str	w12, [x21, #1092]
    2b64:	cbnz	w9, 2b88 <BZ2_decompress+0x2b88>
    2b68:	ldrsw	x10, [x21, #28]
    2b6c:	adrp	x9, 0 <BZ2_rNums>
    2b70:	add	x9, x9, #0x0
    2b74:	ldr	w9, [x9, x10, lsl #2]
    2b78:	add	w11, w10, #0x1
    2b7c:	cmp	w11, #0x200
    2b80:	csinc	w10, wzr, w10, eq  // eq = none
    2b84:	stp	w9, w10, [x21, #24]
    2b88:	sub	w9, w9, #0x1
    2b8c:	cmp	w9, #0x1
    2b90:	str	w9, [x21, #24]
    2b94:	cset	w9, eq  // eq = none
    2b98:	mov	w0, wzr
    2b9c:	eor	w8, w8, w9
    2ba0:	str	w8, [x21, #64]
    2ba4:	b	2c00 <BZ2_decompress+0x2c00>
    2ba8:	ldr	w9, [x21, #40]
    2bac:	mul	w8, w9, w8
    2bb0:	cmp	w11, w8
    2bb4:	b.cs	2c30 <BZ2_decompress+0x2c30>  // b.hs, b.nlast
    2bb8:	ldur	x0, [x29, #-16]
    2bbc:	bl	0 <BZ2_indexIntoF>
    2bc0:	ldr	w9, [x21, #60]
    2bc4:	mov	w8, w0
    2bc8:	ldr	x10, [x21, #3168]
    2bcc:	str	w8, [x21, #64]
    2bd0:	ldr	x8, [x21, #3160]
    2bd4:	lsr	x11, x9, #1
    2bd8:	ldrb	w10, [x10, x11]
    2bdc:	ldr	w11, [x21, #1092]
    2be0:	ldrh	w8, [x8, x9, lsl #1]
    2be4:	ubfiz	w9, w9, #2, #1
    2be8:	lsr	w9, w10, w9
    2bec:	add	w10, w11, #0x1
    2bf0:	bfi	w8, w9, #16, #4
    2bf4:	mov	w0, wzr
    2bf8:	str	w8, [x21, #60]
    2bfc:	str	w10, [x21, #1092]
    2c00:	stur	w28, [x29, #-32]
    2c04:	mov	w2, w20
    2c08:	ldur	w8, [x29, #-36]
    2c0c:	ldp	w20, w3, [sp, #64]
    2c10:	ldp	w4, w14, [x29, #-52]
    2c14:	ldur	x15, [x29, #-64]
    2c18:	ldr	x28, [sp, #72]
    2c1c:	ldp	w16, w5, [sp, #32]
    2c20:	ldr	x17, [sp, #24]
    2c24:	ldp	x7, x6, [sp, #48]
    2c28:	ldr	x30, [sp, #8]
    2c2c:	b	2de0 <BZ2_decompress+0x2de0>
    2c30:	mov	w0, #0x1                   	// #1
    2c34:	b	17e4 <BZ2_decompress+0x17e4>
    2c38:	adrp	x8, 0 <stderr>
    2c3c:	stp	w20, w3, [sp, #64]
    2c40:	ldr	x3, [x8]
    2c44:	adrp	x0, 0 <BZ2_decompress>
    2c48:	add	x0, x0, #0x0
    2c4c:	stur	x1, [x29, #-16]
    2c50:	mov	w1, #0x6                   	// #6
    2c54:	stp	w2, w27, [x29, #-44]
    2c58:	mov	w2, #0x1                   	// #1
    2c5c:	stur	w4, [x29, #-52]
    2c60:	mov	x27, x15
    2c64:	mov	w28, w16
    2c68:	mov	w20, w5
    2c6c:	stp	x7, x6, [sp, #48]
    2c70:	str	x30, [sp, #8]
    2c74:	bl	0 <fwrite>
    2c78:	ldr	x30, [sp, #8]
    2c7c:	ldp	x7, x6, [sp, #48]
    2c80:	mov	w5, w20
    2c84:	mov	x15, x27
    2c88:	ldp	w2, w27, [x29, #-44]
    2c8c:	ldur	w4, [x29, #-52]
    2c90:	ldp	w20, w3, [sp, #64]
    2c94:	ldur	x1, [x29, #-16]
    2c98:	mov	w16, w28
    2c9c:	ldur	w28, [x29, #-20]
    2ca0:	ldrb	w8, [x21, #44]
    2ca4:	cbnz	w8, 2968 <BZ2_decompress+0x2968>
    2ca8:	mov	x17, x15
    2cac:	ldur	w15, [x29, #-36]
    2cb0:	ldr	x8, [x21, #3152]
    2cb4:	mov	w18, w16
    2cb8:	mov	w16, w2
    2cbc:	mov	x1, x7
    2cc0:	cmp	w7, #0x1
    2cc4:	b.lt	2d18 <BZ2_decompress+0x2d18>  // b.tstop
    2cc8:	mov	w10, w1
    2ccc:	mov	x9, xzr
    2cd0:	lsl	x10, x10, #8
    2cd4:	mov	x11, x8
    2cd8:	ldrb	w12, [x11], #4
    2cdc:	add	x12, x21, x12, lsl #2
    2ce0:	ldrsw	x13, [x12, #1096]
    2ce4:	lsl	x13, x13, #2
    2ce8:	ldr	w14, [x8, x13]
    2cec:	orr	w14, w14, w9
    2cf0:	str	w14, [x8, x13]
    2cf4:	ldr	w13, [x12, #1096]
    2cf8:	add	x9, x9, #0x100
    2cfc:	cmp	x10, x9
    2d00:	add	w13, w13, #0x1
    2d04:	str	w13, [x12, #1096]
    2d08:	b.ne	2cd8 <BZ2_decompress+0x2cd8>  // b.any
    2d0c:	mov	w9, w1
    2d10:	stur	x9, [x29, #-16]
    2d14:	b	2d1c <BZ2_decompress+0x2d1c>
    2d18:	stur	xzr, [x29, #-16]
    2d1c:	ldrsw	x9, [x21, #56]
    2d20:	ldrb	w11, [x21, #20]
    2d24:	mov	w10, #0x86a0                	// #34464
    2d28:	movk	w10, #0x1, lsl #16
    2d2c:	ldr	w9, [x8, x9, lsl #2]
    2d30:	str	wzr, [x21, #1092]
    2d34:	lsr	x9, x9, #8
    2d38:	str	w9, [x21, #60]
    2d3c:	cbz	w11, 2d90 <BZ2_decompress+0x2d90>
    2d40:	ldr	w11, [x21, #40]
    2d44:	mov	w0, #0x1                   	// #1
    2d48:	str	xzr, [x21, #24]
    2d4c:	mul	w10, w11, w10
    2d50:	cmp	w9, w10
    2d54:	b.cs	17e4 <BZ2_decompress+0x17e4>  // b.hs, b.nlast
    2d58:	ldr	w8, [x8, x9, lsl #2]
    2d5c:	str	w0, [x21, #1092]
    2d60:	lsr	w9, w8, #8
    2d64:	str	w9, [x21, #60]
    2d68:	adrp	x9, 0 <BZ2_rNums>
    2d6c:	ldr	w9, [x9]
    2d70:	and	w8, w8, #0xff
    2d74:	sub	w9, w9, #0x1
    2d78:	cmp	w9, #0x1
    2d7c:	stp	w9, w0, [x21, #24]
    2d80:	cset	w9, eq  // eq = none
    2d84:	eor	w8, w8, w9
    2d88:	str	w8, [x21, #64]
    2d8c:	b	2db8 <BZ2_decompress+0x2db8>
    2d90:	ldr	w11, [x21, #40]
    2d94:	mov	w0, #0x1                   	// #1
    2d98:	mul	w10, w11, w10
    2d9c:	cmp	w9, w10
    2da0:	b.cs	17e4 <BZ2_decompress+0x17e4>  // b.hs, b.nlast
    2da4:	ldr	w8, [x8, w9, uxtw #2]
    2da8:	str	w0, [x21, #1092]
    2dac:	and	w9, w8, #0xff
    2db0:	lsr	w8, w8, #8
    2db4:	stp	w8, w9, [x21, #60]
    2db8:	stur	w28, [x29, #-32]
    2dbc:	mov	w8, w15
    2dc0:	mov	x15, x17
    2dc4:	ldur	w14, [x29, #-48]
    2dc8:	ldr	x28, [sp, #72]
    2dcc:	ldr	x17, [sp, #24]
    2dd0:	mov	w0, wzr
    2dd4:	mov	w2, w16
    2dd8:	mov	w16, w18
    2ddc:	mov	x7, x1
    2de0:	ldr	w18, [sp, #40]
    2de4:	mov	w1, w22
    2de8:	b	17a0 <BZ2_decompress+0x17a0>

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bz__AssertH__fail>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	stp	x20, x19, [sp, #16]
       8:	mov	x29, sp
       c:	adrp	x20, 0 <stderr>
      10:	ldr	x8, [x20]
      14:	mov	w19, w0
      18:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
      1c:	adrp	x3, 0 <BZ2_bz__AssertH__fail>
      20:	add	x1, x1, #0x0
      24:	add	x3, x3, #0x0
      28:	mov	x0, x8
      2c:	mov	w2, w19
      30:	bl	0 <fprintf>
      34:	cmp	w19, #0x3ef
      38:	b.ne	54 <BZ2_bz__AssertH__fail+0x54>  // b.any
      3c:	ldr	x3, [x20]
      40:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      44:	add	x0, x0, #0x0
      48:	mov	w1, #0x420                 	// #1056
      4c:	mov	w2, #0x1                   	// #1
      50:	bl	0 <fwrite>
      54:	mov	w0, #0x3                   	// #3
      58:	bl	0 <exit>

000000000000005c <BZ2_bzlibVersion>:
      5c:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      60:	add	x0, x0, #0x0
      64:	ret

0000000000000068 <BZ2_bzCompressInit>:
      68:	stp	x29, x30, [sp, #-64]!
      6c:	stp	x24, x23, [sp, #16]
      70:	stp	x22, x21, [sp, #32]
      74:	stp	x20, x19, [sp, #48]
      78:	mov	x29, sp
      7c:	mov	x19, x0
      80:	cmp	w3, #0xfa
      84:	mov	w0, #0xfffffffe            	// #-2
      88:	b.hi	234 <BZ2_bzCompressInit+0x1cc>  // b.pmore
      8c:	cbz	x19, 234 <BZ2_bzCompressInit+0x1cc>
      90:	sub	w8, w1, #0x1
      94:	mov	w21, w1
      98:	cmp	w8, #0x8
      9c:	b.hi	234 <BZ2_bzCompressInit+0x1cc>  // b.pmore
      a0:	ldr	x8, [x19, #56]
      a4:	cmp	w3, #0x0
      a8:	mov	w9, #0x1e                  	// #30
      ac:	mov	w22, w2
      b0:	csel	w24, w9, w3, eq  // eq = none
      b4:	cbz	x8, 1e4 <BZ2_bzCompressInit+0x17c>
      b8:	ldr	x9, [x19, #64]
      bc:	cbnz	x9, cc <BZ2_bzCompressInit+0x64>
      c0:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
      c4:	add	x9, x9, #0x0
      c8:	str	x9, [x19, #64]
      cc:	ldr	x0, [x19, #72]
      d0:	mov	w1, #0xd9d8                	// #55768
      d4:	mov	w2, #0x1                   	// #1
      d8:	blr	x8
      dc:	cbz	x0, 230 <BZ2_bzCompressInit+0x1c8>
      e0:	str	x19, [x0]
      e4:	stp	xzr, xzr, [x0, #32]
      e8:	str	xzr, [x0, #24]
      ec:	mov	x20, x0
      f0:	ldr	x8, [x19, #56]
      f4:	ldr	x0, [x19, #72]
      f8:	mov	w9, #0x1a80                	// #6784
      fc:	movk	w9, #0x6, lsl #16
     100:	mul	w23, w21, w9
     104:	mov	w2, #0x1                   	// #1
     108:	mov	w1, w23
     10c:	blr	x8
     110:	str	x0, [x20, #24]
     114:	ldr	x8, [x19, #56]
     118:	ldr	x0, [x19, #72]
     11c:	add	w1, w23, #0x88
     120:	mov	w2, #0x1                   	// #1
     124:	blr	x8
     128:	str	x0, [x20, #32]
     12c:	ldr	x8, [x19, #56]
     130:	ldr	x0, [x19, #72]
     134:	mov	w1, #0x40004               	// #262148
     138:	mov	w2, #0x1                   	// #1
     13c:	blr	x8
     140:	ldr	x1, [x20, #24]
     144:	str	x0, [x20, #40]
     148:	cbz	x1, 204 <BZ2_bzCompressInit+0x19c>
     14c:	cbz	x0, 1fc <BZ2_bzCompressInit+0x194>
     150:	ldr	x8, [x20, #32]
     154:	cbz	x8, 1fc <BZ2_bzCompressInit+0x194>
     158:	mov	w9, #0x86a0                	// #34464
     15c:	movk	w9, #0x1, lsl #16
     160:	movi	v0.2s, #0x2
     164:	mul	w9, w21, w9
     168:	stp	x1, x8, [x20, #56]
     16c:	movi	v1.2d, #0x0
     170:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     174:	str	d0, [x20, #8]
     178:	movi	d0, #0xffffffff
     17c:	sub	w9, w9, #0x13
     180:	str	w22, [x20, #656]
     184:	str	w21, [x20, #664]
     188:	str	w24, [x20, #88]
     18c:	stp	x1, xzr, [x20, #72]
     190:	str	w9, [x20, #112]
     194:	str	x20, [x19, #48]
     198:	stur	d1, [x19, #12]
     19c:	stur	d1, [x19, #36]
     1a0:	str	d0, [x20, #648]
     1a4:	ldr	d0, [x8]
     1a8:	mov	w0, wzr
     1ac:	mov	w10, #0x1                   	// #1
     1b0:	str	wzr, [x20, #108]
     1b4:	stur	d1, [x20, #116]
     1b8:	stp	q1, q1, [x20, #128]
     1bc:	stp	q1, q1, [x20, #160]
     1c0:	stp	q1, q1, [x20, #192]
     1c4:	stp	q1, q1, [x20, #224]
     1c8:	stp	q1, q1, [x20, #256]
     1cc:	stp	q1, q1, [x20, #288]
     1d0:	stp	q1, q1, [x20, #320]
     1d4:	stp	q1, q1, [x20, #352]
     1d8:	stur	d0, [x20, #92]
     1dc:	str	w10, [x20, #660]
     1e0:	b	234 <BZ2_bzCompressInit+0x1cc>
     1e4:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     1e8:	add	x8, x8, #0x0
     1ec:	str	x8, [x19, #56]
     1f0:	ldr	x9, [x19, #64]
     1f4:	cbnz	x9, cc <BZ2_bzCompressInit+0x64>
     1f8:	b	c0 <BZ2_bzCompressInit+0x58>
     1fc:	ldp	x8, x0, [x19, #64]
     200:	blr	x8
     204:	ldr	x1, [x20, #32]
     208:	cbz	x1, 214 <BZ2_bzCompressInit+0x1ac>
     20c:	ldp	x8, x0, [x19, #64]
     210:	blr	x8
     214:	ldr	x1, [x20, #40]
     218:	cbz	x1, 224 <BZ2_bzCompressInit+0x1bc>
     21c:	ldp	x8, x0, [x19, #64]
     220:	blr	x8
     224:	ldp	x8, x0, [x19, #64]
     228:	mov	x1, x20
     22c:	blr	x8
     230:	mov	w0, #0xfffffffd            	// #-3
     234:	ldp	x20, x19, [sp, #48]
     238:	ldp	x22, x21, [sp, #32]
     23c:	ldp	x24, x23, [sp, #16]
     240:	ldp	x29, x30, [sp], #64
     244:	ret

0000000000000248 <default_bzalloc>:
     248:	mul	w8, w2, w1
     24c:	sxtw	x0, w8
     250:	b	0 <malloc>

0000000000000254 <default_bzfree>:
     254:	cbz	x1, 260 <default_bzfree+0xc>
     258:	mov	x0, x1
     25c:	b	0 <free>
     260:	ret

0000000000000264 <BZ2_bzCompress>:
     264:	stp	x29, x30, [sp, #-32]!
     268:	str	x19, [sp, #16]
     26c:	mov	x29, sp
     270:	cbz	x0, 3cc <BZ2_bzCompress+0x168>
     274:	ldr	x19, [x0, #48]
     278:	cbz	x19, 3cc <BZ2_bzCompress+0x168>
     27c:	ldr	x8, [x19]
     280:	cmp	x8, x0
     284:	b.eq	29c <BZ2_bzCompress+0x38>  // b.none
     288:	mov	w8, #0xfffffffe            	// #-2
     28c:	ldr	x19, [sp, #16]
     290:	mov	w0, w8
     294:	ldp	x29, x30, [sp], #32
     298:	ret
     29c:	cbz	w1, 2d8 <BZ2_bzCompress+0x74>
     2a0:	cmp	w1, #0x1
     2a4:	b.eq	324 <BZ2_bzCompress+0xc0>  // b.none
     2a8:	cmp	w1, #0x2
     2ac:	b.ne	3a0 <BZ2_bzCompress+0x13c>  // b.any
     2b0:	ldr	w8, [x19, #8]
     2b4:	cmp	w8, #0x2
     2b8:	b.ne	348 <BZ2_bzCompress+0xe4>  // b.any
     2bc:	ldr	w9, [x0, #8]
     2c0:	mov	w8, #0x4                   	// #4
     2c4:	str	w8, [x19, #8]
     2c8:	str	w9, [x19, #16]
     2cc:	cmp	w8, #0x2
     2d0:	b.eq	2bc <BZ2_bzCompress+0x58>  // b.none
     2d4:	b	348 <BZ2_bzCompress+0xe4>
     2d8:	ldr	w8, [x19, #8]
     2dc:	sub	w8, w8, #0x1
     2e0:	cmp	w8, #0x3
     2e4:	b.hi	3e0 <BZ2_bzCompress+0x17c>  // b.pmore
     2e8:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     2ec:	add	x9, x9, #0x0
     2f0:	adr	x10, 28c <BZ2_bzCompress+0x28>
     2f4:	ldrb	w11, [x9, x8]
     2f8:	add	x10, x10, x11, lsl #2
     2fc:	mov	w8, #0xffffffff            	// #-1
     300:	br	x10
     304:	bl	4c0 <handle_compress>
     308:	tst	w0, #0xff
     30c:	mov	w8, #0xfffffffe            	// #-2
     310:	cinv	w8, w8, ne  // ne = any
     314:	ldr	x19, [sp, #16]
     318:	mov	w0, w8
     31c:	ldp	x29, x30, [sp], #32
     320:	ret
     324:	ldr	w8, [x19, #8]
     328:	cmp	w8, #0x2
     32c:	b.ne	348 <BZ2_bzCompress+0xe4>  // b.any
     330:	ldr	w9, [x0, #8]
     334:	mov	w8, #0x3                   	// #3
     338:	str	w8, [x19, #8]
     33c:	str	w9, [x19, #16]
     340:	cmp	w8, #0x2
     344:	b.eq	330 <BZ2_bzCompress+0xcc>  // b.none
     348:	cmp	w8, #0x1
     34c:	b.eq	42c <BZ2_bzCompress+0x1c8>  // b.none
     350:	cmp	w8, #0x3
     354:	b.eq	3f4 <BZ2_bzCompress+0x190>  // b.none
     358:	cmp	w8, #0x4
     35c:	b.ne	3e0 <BZ2_bzCompress+0x17c>  // b.any
     360:	cmp	w1, #0x2
     364:	b.ne	42c <BZ2_bzCompress+0x1c8>  // b.any
     368:	ldr	w8, [x19, #16]
     36c:	ldr	w9, [x0, #8]
     370:	cmp	w8, w9
     374:	b.ne	42c <BZ2_bzCompress+0x1c8>  // b.any
     378:	bl	4c0 <handle_compress>
     37c:	tst	w0, #0xff
     380:	b.eq	42c <BZ2_bzCompress+0x1c8>  // b.none
     384:	ldr	w8, [x19, #16]
     388:	cbz	w8, 480 <BZ2_bzCompress+0x21c>
     38c:	mov	w8, #0x3                   	// #3
     390:	ldr	x19, [sp, #16]
     394:	mov	w0, w8
     398:	ldp	x29, x30, [sp], #32
     39c:	ret
     3a0:	ldr	w8, [x19, #8]
     3a4:	sub	w8, w8, #0x1
     3a8:	cmp	w8, #0x3
     3ac:	b.hi	3e0 <BZ2_bzCompress+0x17c>  // b.pmore
     3b0:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     3b4:	add	x9, x9, #0x0
     3b8:	adr	x10, 28c <BZ2_bzCompress+0x28>
     3bc:	ldrb	w11, [x9, x8]
     3c0:	add	x10, x10, x11, lsl #2
     3c4:	mov	w8, #0xffffffff            	// #-1
     3c8:	br	x10
     3cc:	mov	w8, #0xfffffffe            	// #-2
     3d0:	ldr	x19, [sp, #16]
     3d4:	mov	w0, w8
     3d8:	ldp	x29, x30, [sp], #32
     3dc:	ret
     3e0:	mov	w8, wzr
     3e4:	ldr	x19, [sp, #16]
     3e8:	mov	w0, w8
     3ec:	ldp	x29, x30, [sp], #32
     3f0:	ret
     3f4:	cmp	w1, #0x1
     3f8:	b.ne	42c <BZ2_bzCompress+0x1c8>  // b.any
     3fc:	ldr	w8, [x19, #16]
     400:	ldr	w9, [x0, #8]
     404:	cmp	w8, w9
     408:	b.ne	42c <BZ2_bzCompress+0x1c8>  // b.any
     40c:	bl	4c0 <handle_compress>
     410:	ldr	w8, [x19, #16]
     414:	cbz	w8, 440 <BZ2_bzCompress+0x1dc>
     418:	mov	w8, #0x2                   	// #2
     41c:	ldr	x19, [sp, #16]
     420:	mov	w0, w8
     424:	ldp	x29, x30, [sp], #32
     428:	ret
     42c:	mov	w8, #0xffffffff            	// #-1
     430:	ldr	x19, [sp, #16]
     434:	mov	w0, w8
     438:	ldp	x29, x30, [sp], #32
     43c:	ret
     440:	ldr	w8, [x19, #92]
     444:	cmp	w8, #0xff
     448:	b.hi	458 <BZ2_bzCompress+0x1f4>  // b.pmore
     44c:	ldr	w8, [x19, #96]
     450:	cmp	w8, #0x0
     454:	b.gt	418 <BZ2_bzCompress+0x1b4>
     458:	ldp	w9, w8, [x19, #116]
     45c:	cmp	w8, w9
     460:	mov	w8, #0x2                   	// #2
     464:	b.lt	28c <BZ2_bzCompress+0x28>  // b.tstop
     468:	str	w8, [x19, #8]
     46c:	mov	w8, #0x1                   	// #1
     470:	ldr	x19, [sp, #16]
     474:	mov	w0, w8
     478:	ldp	x29, x30, [sp], #32
     47c:	ret
     480:	ldr	w8, [x19, #92]
     484:	cmp	w8, #0xff
     488:	b.hi	498 <BZ2_bzCompress+0x234>  // b.pmore
     48c:	ldr	w8, [x19, #96]
     490:	cmp	w8, #0x0
     494:	b.gt	38c <BZ2_bzCompress+0x128>
     498:	ldp	w9, w8, [x19, #116]
     49c:	cmp	w8, w9
     4a0:	b.lt	38c <BZ2_bzCompress+0x128>  // b.tstop
     4a4:	mov	w8, #0x1                   	// #1
     4a8:	str	w8, [x19, #8]
     4ac:	mov	w8, #0x4                   	// #4
     4b0:	ldr	x19, [sp, #16]
     4b4:	mov	w0, w8
     4b8:	ldp	x29, x30, [sp], #32
     4bc:	ret

00000000000004c0 <handle_compress>:
     4c0:	str	d8, [sp, #-96]!
     4c4:	stp	x29, x30, [sp, #8]
     4c8:	str	x27, [sp, #24]
     4cc:	stp	x26, x25, [sp, #32]
     4d0:	stp	x24, x23, [sp, #48]
     4d4:	stp	x22, x21, [sp, #64]
     4d8:	stp	x20, x19, [sp, #80]
     4dc:	mov	x29, sp
     4e0:	ldr	x19, [x0, #48]
     4e4:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     4e8:	ldr	d8, [x8]
     4ec:	adrp	x23, 0 <BZ2_crc32Table>
     4f0:	mov	w20, wzr
     4f4:	mov	w21, wzr
     4f8:	mov	w22, #0x1                   	// #1
     4fc:	add	x23, x23, #0x0
     500:	mov	w24, #0xffffffff            	// #-1
     504:	add	x25, x19, #0x80
     508:	mov	w26, #0x2                   	// #2
     50c:	b	51c <handle_compress+0x5c>
     510:	ldr	x8, [x19]
     514:	ldr	w8, [x8, #8]
     518:	cbz	w8, 8d8 <handle_compress+0x418>
     51c:	ldr	w8, [x19, #12]
     520:	cmp	w8, #0x2
     524:	b.eq	668 <handle_compress+0x1a8>  // b.none
     528:	cmp	w8, #0x1
     52c:	b.ne	520 <handle_compress+0x60>  // b.any
     530:	ldr	x9, [x19]
     534:	ldr	w8, [x19, #120]
     538:	ldr	w10, [x9, #32]
     53c:	cbz	w10, 5c0 <handle_compress+0x100>
     540:	ldr	w10, [x19, #116]
     544:	cmp	w8, w10
     548:	b.ge	5c0 <handle_compress+0x100>  // b.tcont
     54c:	ldr	x9, [x9, #24]
     550:	ldr	x10, [x19, #80]
     554:	ldrb	w8, [x10, w8, sxtw]
     558:	strb	w8, [x9]
     55c:	ldr	w8, [x19, #120]
     560:	ldr	x10, [x19]
     564:	add	w8, w8, #0x1
     568:	str	w8, [x19, #120]
     56c:	ldp	w9, w13, [x10, #32]
     570:	ldr	x12, [x10, #24]
     574:	sub	w11, w9, #0x1
     578:	add	x9, x12, #0x1
     57c:	adds	w12, w13, #0x1
     580:	stp	w11, w12, [x10, #32]
     584:	str	x9, [x10, #24]
     588:	b.cc	598 <handle_compress+0xd8>  // b.lo, b.ul, b.last
     58c:	ldr	w12, [x10, #40]
     590:	add	w12, w12, #0x1
     594:	str	w12, [x10, #40]
     598:	cbz	w11, 5a8 <handle_compress+0xe8>
     59c:	ldr	w10, [x19, #116]
     5a0:	cmp	w8, w10
     5a4:	b.lt	550 <handle_compress+0x90>  // b.tstop
     5a8:	mov	w9, #0x1                   	// #1
     5ac:	ldr	w10, [x19, #116]
     5b0:	orr	w20, w9, w20
     5b4:	cmp	w8, w10
     5b8:	b.ge	5d4 <handle_compress+0x114>  // b.tcont
     5bc:	b	8d8 <handle_compress+0x418>
     5c0:	mov	w9, wzr
     5c4:	ldr	w10, [x19, #116]
     5c8:	orr	w20, w9, w20
     5cc:	cmp	w8, w10
     5d0:	b.lt	8d8 <handle_compress+0x418>  // b.tstop
     5d4:	ldr	w10, [x19, #8]
     5d8:	cmp	w10, #0x4
     5dc:	b.ne	600 <handle_compress+0x140>  // b.any
     5e0:	ldr	w8, [x19, #16]
     5e4:	cbnz	w8, 600 <handle_compress+0x140>
     5e8:	ldr	w8, [x19, #92]
     5ec:	cmp	w8, #0xff
     5f0:	b.hi	8d8 <handle_compress+0x418>  // b.pmore
     5f4:	ldr	w8, [x19, #96]
     5f8:	cmp	w8, #0x1
     5fc:	b.lt	8d8 <handle_compress+0x418>  // b.tstop
     600:	movi	v0.2d, #0x0
     604:	str	wzr, [x19, #108]
     608:	stp	wzr, wzr, [x19, #116]
     60c:	str	w24, [x19, #648]
     610:	stp	q0, q0, [x25, #224]
     614:	stp	q0, q0, [x25, #192]
     618:	stp	q0, q0, [x25, #160]
     61c:	stp	q0, q0, [x25, #128]
     620:	stp	q0, q0, [x25, #96]
     624:	stp	q0, q0, [x25, #64]
     628:	stp	q0, q0, [x25, #32]
     62c:	stp	q0, q0, [x25]
     630:	ldr	w8, [x19, #660]
     634:	cmp	w10, #0x3
     638:	str	w26, [x19, #12]
     63c:	add	w8, w8, #0x1
     640:	str	w8, [x19, #660]
     644:	b.ne	66c <handle_compress+0x1ac>  // b.any
     648:	ldr	w8, [x19, #16]
     64c:	cbnz	w8, 668 <handle_compress+0x1a8>
     650:	ldr	w8, [x19, #92]
     654:	cmp	w8, #0xff
     658:	b.hi	8d8 <handle_compress+0x418>  // b.pmore
     65c:	ldr	w8, [x19, #96]
     660:	cmp	w8, #0x0
     664:	b.le	8d8 <handle_compress+0x418>
     668:	ldr	w10, [x19, #8]
     66c:	ldp	w8, w9, [x19, #108]
     670:	cmp	w10, #0x2
     674:	b.ne	75c <handle_compress+0x29c>  // b.any
     678:	cmp	w8, w9
     67c:	b.ge	860 <handle_compress+0x3a0>  // b.tcont
     680:	ldr	x10, [x19]
     684:	ldr	w11, [x10, #8]
     688:	cbz	w11, 860 <handle_compress+0x3a0>
     68c:	ldr	x12, [x10]
     690:	ldr	w11, [x19, #92]
     694:	ldrb	w27, [x12]
     698:	ldr	w9, [x19, #96]
     69c:	cmp	w11, w27
     6a0:	b.ne	6b8 <handle_compress+0x1f8>  // b.any
     6a4:	cmp	w9, #0xff
     6a8:	b.eq	6fc <handle_compress+0x23c>  // b.none
     6ac:	add	w8, w9, #0x1
     6b0:	str	w8, [x19, #96]
     6b4:	b	710 <handle_compress+0x250>
     6b8:	cmp	w9, #0x1
     6bc:	b.ne	6fc <handle_compress+0x23c>  // b.any
     6c0:	ldr	w9, [x19, #648]
     6c4:	and	w10, w11, #0xff
     6c8:	add	x12, x19, w11, uxtw
     6cc:	eor	w10, w10, w9, lsr #24
     6d0:	ldr	w10, [x23, w10, uxtw #2]
     6d4:	eor	w9, w10, w9, lsl #8
     6d8:	str	w9, [x19, #648]
     6dc:	strb	w22, [x12, #128]
     6e0:	ldr	x9, [x19, #64]
     6e4:	strb	w11, [x9, w8, sxtw]
     6e8:	ldr	w8, [x19, #108]
     6ec:	str	w27, [x19, #92]
     6f0:	add	w8, w8, #0x1
     6f4:	str	w8, [x19, #108]
     6f8:	b	710 <handle_compress+0x250>
     6fc:	cmp	w11, #0xff
     700:	b.hi	70c <handle_compress+0x24c>  // b.pmore
     704:	mov	x0, x19
     708:	bl	2e6c <add_pair_to_block>
     70c:	stp	w27, w22, [x19, #92]
     710:	ldr	x8, [x19]
     714:	ldr	x9, [x8]
     718:	ldp	w10, w11, [x8, #8]
     71c:	add	x12, x9, #0x1
     720:	sub	w13, w10, #0x1
     724:	adds	w9, w11, #0x1
     728:	str	x12, [x8]
     72c:	stp	w13, w9, [x8, #8]
     730:	b.cc	740 <handle_compress+0x280>  // b.lo, b.ul, b.last
     734:	ldr	w9, [x8, #16]
     738:	add	w9, w9, #0x1
     73c:	str	w9, [x8, #16]
     740:	ldp	w8, w9, [x19, #108]
     744:	mov	w10, #0x1                   	// #1
     748:	cmp	w8, w9
     74c:	b.ge	84c <handle_compress+0x38c>  // b.tcont
     750:	mov	w11, w27
     754:	cbnz	w13, 694 <handle_compress+0x1d4>
     758:	b	84c <handle_compress+0x38c>
     75c:	cmp	w8, w9
     760:	b.ge	878 <handle_compress+0x3b8>  // b.tcont
     764:	ldr	x11, [x19]
     768:	ldr	w10, [x11, #8]
     76c:	cbz	w10, 84c <handle_compress+0x38c>
     770:	ldr	w10, [x19, #16]
     774:	cbz	w10, 84c <handle_compress+0x38c>
     778:	ldr	x9, [x11]
     77c:	ldrb	w27, [x9]
     780:	ldp	w9, w10, [x19, #92]
     784:	cmp	w9, w27
     788:	b.ne	7a0 <handle_compress+0x2e0>  // b.any
     78c:	cmp	w10, #0xff
     790:	b.eq	7e4 <handle_compress+0x324>  // b.none
     794:	add	w8, w10, #0x1
     798:	str	w8, [x19, #96]
     79c:	b	7f8 <handle_compress+0x338>
     7a0:	cmp	w10, #0x1
     7a4:	b.ne	7e4 <handle_compress+0x324>  // b.any
     7a8:	ldr	w10, [x19, #648]
     7ac:	and	w11, w9, #0xff
     7b0:	add	x12, x19, x9
     7b4:	eor	w11, w11, w10, lsr #24
     7b8:	ldr	w11, [x23, w11, uxtw #2]
     7bc:	eor	w10, w11, w10, lsl #8
     7c0:	str	w10, [x19, #648]
     7c4:	strb	w22, [x12, #128]
     7c8:	ldr	x10, [x19, #64]
     7cc:	strb	w9, [x10, w8, sxtw]
     7d0:	ldr	w8, [x19, #108]
     7d4:	str	w27, [x19, #92]
     7d8:	add	w8, w8, #0x1
     7dc:	str	w8, [x19, #108]
     7e0:	b	7f8 <handle_compress+0x338>
     7e4:	cmp	w9, #0xff
     7e8:	b.hi	7f4 <handle_compress+0x334>  // b.pmore
     7ec:	mov	x0, x19
     7f0:	bl	2e6c <add_pair_to_block>
     7f4:	stp	w27, w22, [x19, #92]
     7f8:	ldr	x11, [x19]
     7fc:	ldr	x8, [x11]
     800:	ldp	w9, w10, [x11, #8]
     804:	add	x8, x8, #0x1
     808:	sub	w12, w9, #0x1
     80c:	adds	w9, w10, #0x1
     810:	str	x8, [x11]
     814:	stp	w12, w9, [x11, #8]
     818:	b.cc	828 <handle_compress+0x368>  // b.lo, b.ul, b.last
     81c:	ldr	w8, [x11, #16]
     820:	add	w8, w8, #0x1
     824:	str	w8, [x11, #16]
     828:	ldr	w10, [x19, #16]
     82c:	ldp	w8, w9, [x19, #108]
     830:	sub	w13, w10, #0x1
     834:	cmp	w8, w9
     838:	mov	w10, #0x1                   	// #1
     83c:	str	w13, [x19, #16]
     840:	b.ge	84c <handle_compress+0x38c>  // b.tcont
     844:	cbz	w12, 84c <handle_compress+0x38c>
     848:	cbnz	w13, 778 <handle_compress+0x2b8>
     84c:	ldr	w11, [x19, #8]
     850:	orr	w21, w10, w21
     854:	cmp	w11, #0x2
     858:	b.eq	894 <handle_compress+0x3d4>  // b.none
     85c:	b	88c <handle_compress+0x3cc>
     860:	mov	w10, wzr
     864:	ldr	w11, [x19, #8]
     868:	orr	w21, w10, w21
     86c:	cmp	w11, #0x2
     870:	b.ne	88c <handle_compress+0x3cc>  // b.any
     874:	b	894 <handle_compress+0x3d4>
     878:	mov	w10, wzr
     87c:	ldr	w11, [x19, #8]
     880:	orr	w21, w10, w21
     884:	cmp	w11, #0x2
     888:	b.eq	894 <handle_compress+0x3d4>  // b.none
     88c:	ldr	w10, [x19, #16]
     890:	cbz	w10, 8a4 <handle_compress+0x3e4>
     894:	cmp	w8, w9
     898:	b.lt	510 <handle_compress+0x50>  // b.tstop
     89c:	mov	w1, wzr
     8a0:	b	8c8 <handle_compress+0x408>
     8a4:	ldr	w8, [x19, #92]
     8a8:	cmp	w8, #0xff
     8ac:	b.hi	8bc <handle_compress+0x3fc>  // b.pmore
     8b0:	mov	x0, x19
     8b4:	bl	2e6c <add_pair_to_block>
     8b8:	ldr	w11, [x19, #8]
     8bc:	cmp	w11, #0x4
     8c0:	cset	w1, eq  // eq = none
     8c4:	stur	d8, [x19, #92]
     8c8:	mov	x0, x19
     8cc:	bl	0 <BZ2_compressBlock>
     8d0:	str	w22, [x19, #12]
     8d4:	b	51c <handle_compress+0x5c>
     8d8:	orr	w8, w21, w20
     8dc:	ldp	x20, x19, [sp, #80]
     8e0:	ldp	x22, x21, [sp, #64]
     8e4:	ldp	x24, x23, [sp, #48]
     8e8:	ldp	x26, x25, [sp, #32]
     8ec:	ldr	x27, [sp, #24]
     8f0:	ldp	x29, x30, [sp, #8]
     8f4:	tst	w8, #0xff
     8f8:	cset	w0, ne  // ne = any
     8fc:	ldr	d8, [sp], #96
     900:	ret

0000000000000904 <BZ2_bzCompressEnd>:
     904:	stp	x29, x30, [sp, #-32]!
     908:	stp	x20, x19, [sp, #16]
     90c:	mov	x29, sp
     910:	cbz	x0, 92c <BZ2_bzCompressEnd+0x28>
     914:	ldr	x20, [x0, #48]
     918:	mov	x19, x0
     91c:	cbz	x20, 92c <BZ2_bzCompressEnd+0x28>
     920:	ldr	x8, [x20]
     924:	cmp	x8, x19
     928:	b.eq	93c <BZ2_bzCompressEnd+0x38>  // b.none
     92c:	mov	w0, #0xfffffffe            	// #-2
     930:	ldp	x20, x19, [sp, #16]
     934:	ldp	x29, x30, [sp], #32
     938:	ret
     93c:	ldr	x1, [x20, #24]
     940:	cbz	x1, 94c <BZ2_bzCompressEnd+0x48>
     944:	ldp	x8, x0, [x19, #64]
     948:	blr	x8
     94c:	ldr	x1, [x20, #32]
     950:	cbz	x1, 95c <BZ2_bzCompressEnd+0x58>
     954:	ldp	x8, x0, [x19, #64]
     958:	blr	x8
     95c:	ldr	x1, [x20, #40]
     960:	cbz	x1, 96c <BZ2_bzCompressEnd+0x68>
     964:	ldp	x8, x0, [x19, #64]
     968:	blr	x8
     96c:	ldp	x8, x0, [x19, #64]
     970:	ldr	x1, [x19, #48]
     974:	blr	x8
     978:	mov	w0, wzr
     97c:	str	xzr, [x19, #48]
     980:	ldp	x20, x19, [sp, #16]
     984:	ldp	x29, x30, [sp], #32
     988:	ret

000000000000098c <BZ2_bzDecompressInit>:
     98c:	stp	x29, x30, [sp, #-48]!
     990:	str	x21, [sp, #16]
     994:	stp	x20, x19, [sp, #32]
     998:	mov	x29, sp
     99c:	mov	x21, x0
     9a0:	cmp	w1, #0x4
     9a4:	mov	w0, #0xfffffffe            	// #-2
     9a8:	b.hi	a24 <BZ2_bzDecompressInit+0x98>  // b.pmore
     9ac:	cbz	x21, a24 <BZ2_bzDecompressInit+0x98>
     9b0:	mov	w20, w2
     9b4:	cmp	w2, #0x1
     9b8:	b.hi	a24 <BZ2_bzDecompressInit+0x98>  // b.pmore
     9bc:	ldr	x8, [x21, #56]
     9c0:	mov	w19, w1
     9c4:	cbz	x8, a34 <BZ2_bzDecompressInit+0xa8>
     9c8:	ldr	x9, [x21, #64]
     9cc:	cbz	x9, a48 <BZ2_bzDecompressInit+0xbc>
     9d0:	ldr	x0, [x21, #72]
     9d4:	mov	w1, #0xfa90                	// #64144
     9d8:	mov	w2, #0x1                   	// #1
     9dc:	blr	x8
     9e0:	cbz	x0, a58 <BZ2_bzDecompressInit+0xcc>
     9e4:	mov	x8, x0
     9e8:	mov	w0, wzr
     9ec:	mov	w9, #0xa                   	// #10
     9f0:	movi	v0.2d, #0x0
     9f4:	str	x21, [x8]
     9f8:	str	x8, [x21, #48]
     9fc:	str	w9, [x8, #8]
     a00:	str	wzr, [x8, #3188]
     a04:	str	d0, [x8, #32]
     a08:	stur	d0, [x21, #12]
     a0c:	stur	d0, [x21, #36]
     a10:	strb	w20, [x8, #44]
     a14:	str	xzr, [x8, #3152]
     a18:	str	xzr, [x8, #3168]
     a1c:	str	xzr, [x8, #3160]
     a20:	stp	wzr, w19, [x8, #48]
     a24:	ldp	x20, x19, [sp, #32]
     a28:	ldr	x21, [sp, #16]
     a2c:	ldp	x29, x30, [sp], #48
     a30:	ret
     a34:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     a38:	add	x8, x8, #0x0
     a3c:	str	x8, [x21, #56]
     a40:	ldr	x9, [x21, #64]
     a44:	cbnz	x9, 9d0 <BZ2_bzDecompressInit+0x44>
     a48:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     a4c:	add	x9, x9, #0x0
     a50:	str	x9, [x21, #64]
     a54:	b	9d0 <BZ2_bzDecompressInit+0x44>
     a58:	mov	w0, #0xfffffffd            	// #-3
     a5c:	ldp	x20, x19, [sp, #32]
     a60:	ldr	x21, [sp, #16]
     a64:	ldp	x29, x30, [sp], #48
     a68:	ret

0000000000000a6c <BZ2_indexIntoF>:
     a6c:	mov	w8, w0
     a70:	mov	w0, wzr
     a74:	mov	w9, #0x100                 	// #256
     a78:	add	w10, w0, w9
     a7c:	asr	w10, w10, #1
     a80:	ldr	w11, [x1, w10, sxtw #2]
     a84:	cmp	w11, w8
     a88:	csel	w9, w10, w9, gt
     a8c:	csel	w0, w0, w10, gt
     a90:	sub	w10, w9, w0
     a94:	cmp	w10, #0x1
     a98:	b.ne	a78 <BZ2_indexIntoF+0xc>  // b.any
     a9c:	ret

0000000000000aa0 <BZ2_bzDecompress>:
     aa0:	stp	x29, x30, [sp, #-96]!
     aa4:	stp	x28, x27, [sp, #16]
     aa8:	stp	x26, x25, [sp, #32]
     aac:	stp	x24, x23, [sp, #48]
     ab0:	stp	x22, x21, [sp, #64]
     ab4:	stp	x20, x19, [sp, #80]
     ab8:	mov	x29, sp
     abc:	cbz	x0, ad4 <BZ2_bzDecompress+0x34>
     ac0:	ldr	x19, [x0, #48]
     ac4:	cbz	x19, ad4 <BZ2_bzDecompress+0x34>
     ac8:	ldr	x8, [x19]
     acc:	cmp	x8, x0
     ad0:	b.eq	af4 <BZ2_bzDecompress+0x54>  // b.none
     ad4:	mov	w0, #0xfffffffe            	// #-2
     ad8:	ldp	x20, x19, [sp, #80]
     adc:	ldp	x22, x21, [sp, #64]
     ae0:	ldp	x24, x23, [sp, #48]
     ae4:	ldp	x26, x25, [sp, #32]
     ae8:	ldp	x28, x27, [sp, #16]
     aec:	ldp	x29, x30, [sp], #96
     af0:	ret
     af4:	ldr	w8, [x19, #8]
     af8:	mov	w9, #0xfa50                	// #64080
     afc:	mov	w22, #0x86a0                	// #34464
     b00:	adrp	x23, 0 <BZ2_crc32Table>
     b04:	adrp	x25, 0 <BZ2_rNums>
     b08:	movk	w22, #0x1, lsl #16
     b0c:	add	x23, x23, #0x0
     b10:	mov	w24, #0x1                   	// #1
     b14:	add	x25, x25, #0x0
     b18:	mov	w26, #0x2                   	// #2
     b1c:	mov	w27, #0x3                   	// #3
     b20:	add	x28, x19, x9
     b24:	adrp	x21, 0 <stderr>
     b28:	mov	w20, #0xe                   	// #14
     b2c:	cmp	w8, #0x1
     b30:	b.eq	1874 <BZ2_bzDecompress+0xdd4>  // b.none
     b34:	cmp	w8, #0x2
     b38:	b.eq	b68 <BZ2_bzDecompress+0xc8>  // b.none
     b3c:	cmp	w8, #0xa
     b40:	b.lt	b2c <BZ2_bzDecompress+0x8c>  // b.tstop
     b44:	mov	x0, x19
     b48:	bl	0 <BZ2_decompress>
     b4c:	cmp	w0, #0x4
     b50:	b.eq	1884 <BZ2_bzDecompress+0xde4>  // b.none
     b54:	ldr	w8, [x19, #8]
     b58:	cmp	w8, #0x2
     b5c:	mov	w8, #0x2                   	// #2
     b60:	b.eq	b2c <BZ2_bzDecompress+0x8c>  // b.none
     b64:	b	ad8 <BZ2_bzDecompress+0x38>
     b68:	ldrb	w8, [x19, #44]
     b6c:	ldrb	w9, [x19, #20]
     b70:	cbz	w8, fb0 <BZ2_bzDecompress+0x510>
     b74:	ldr	x8, [x19]
     b78:	ldr	w10, [x8, #32]
     b7c:	cbz	w9, 1278 <BZ2_bzDecompress+0x7d8>
     b80:	cbz	w10, 17ac <BZ2_bzDecompress+0xd0c>
     b84:	ldr	w13, [x19, #16]
     b88:	b	b9c <BZ2_bzDecompress+0xfc>
     b8c:	str	w16, [x19, #64]
     b90:	mov	w13, #0x1                   	// #1
     b94:	ldr	w9, [x8, #32]
     b98:	cbz	w9, 17ac <BZ2_bzDecompress+0xd0c>
     b9c:	cbnz	w13, de8 <BZ2_bzDecompress+0x348>
     ba0:	ldr	w13, [x28]
     ba4:	ldr	w9, [x19, #1092]
     ba8:	add	w10, w13, #0x1
     bac:	cmp	w9, w10
     bb0:	b.eq	17ac <BZ2_bzDecompress+0xd0c>  // b.none
     bb4:	b.gt	187c <BZ2_bzDecompress+0xddc>
     bb8:	ldr	w10, [x19, #40]
     bbc:	ldp	w15, w14, [x19, #60]
     bc0:	str	w24, [x19, #16]
     bc4:	mul	w12, w10, w22
     bc8:	cmp	w15, w12
     bcc:	strb	w14, [x19, #12]
     bd0:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
     bd4:	mov	w16, wzr
     bd8:	mov	w10, #0x100                 	// #256
     bdc:	add	w11, w16, w10
     be0:	asr	w11, w11, #1
     be4:	add	x17, x19, w11, sxtw #2
     be8:	ldr	w17, [x17, #1096]
     bec:	cmp	w17, w15
     bf0:	csel	w10, w11, w10, gt
     bf4:	csel	w16, w16, w11, gt
     bf8:	sub	w11, w10, w16
     bfc:	cmp	w11, #0x1
     c00:	b.ne	bdc <BZ2_bzDecompress+0x13c>  // b.any
     c04:	ldr	x11, [x19, #3168]
     c08:	ldr	x10, [x19, #3160]
     c0c:	lsr	x17, x15, #1
     c10:	ldrb	w18, [x11, x17]
     c14:	lsl	w17, w15, #2
     c18:	and	x0, x17, #0x4
     c1c:	ldrh	w17, [x10, x15, lsl #1]
     c20:	lsr	x18, x18, x0
     c24:	ldr	w15, [x19, #24]
     c28:	lsl	w18, w18, #16
     c2c:	and	x18, x18, #0xf0000
     c30:	orr	x1, x18, x17
     c34:	str	w1, [x19, #60]
     c38:	cbnz	w15, c54 <BZ2_bzDecompress+0x1b4>
     c3c:	ldrsw	x18, [x19, #28]
     c40:	ldr	w15, [x25, x18, lsl #2]
     c44:	add	w0, w18, #0x1
     c48:	cmp	w0, #0x200
     c4c:	csinc	w18, wzr, w18, eq  // eq = none
     c50:	stp	w15, w18, [x19, #24]
     c54:	sub	w18, w15, #0x1
     c58:	add	w15, w9, #0x1
     c5c:	cmp	w9, w13
     c60:	str	w18, [x19, #24]
     c64:	str	w15, [x19, #1092]
     c68:	b.eq	b90 <BZ2_bzDecompress+0xf0>  // b.none
     c6c:	cmp	w18, #0x1
     c70:	cset	w0, eq  // eq = none
     c74:	and	w16, w16, #0xff
     c78:	eor	w16, w16, w0
     c7c:	cmp	w16, w14
     c80:	b.ne	b8c <BZ2_bzDecompress+0xec>  // b.any
     c84:	cmp	w1, w12
     c88:	str	w26, [x19, #16]
     c8c:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
     c90:	mov	w0, wzr
     c94:	mov	w16, #0x100                 	// #256
     c98:	add	w2, w0, w16
     c9c:	asr	w2, w2, #1
     ca0:	add	x3, x19, w2, sxtw #2
     ca4:	ldr	w3, [x3, #1096]
     ca8:	cmp	w3, w1
     cac:	csel	w16, w2, w16, gt
     cb0:	csel	w0, w0, w2, gt
     cb4:	sub	w2, w16, w0
     cb8:	cmp	w2, #0x1
     cbc:	b.ne	c98 <BZ2_bzDecompress+0x1f8>  // b.any
     cc0:	lsr	x16, x1, #1
     cc4:	ldrb	w2, [x11, x16]
     cc8:	lsl	w17, w17, #2
     ccc:	ldrh	w16, [x10, x1, lsl #1]
     cd0:	and	x17, x17, #0x4
     cd4:	lsr	x17, x2, x17
     cd8:	lsl	w17, w17, #16
     cdc:	and	x17, x17, #0xf0000
     ce0:	orr	x1, x17, x16
     ce4:	str	w1, [x19, #60]
     ce8:	cbnz	w18, d04 <BZ2_bzDecompress+0x264>
     cec:	ldrsw	x17, [x19, #28]
     cf0:	ldr	w18, [x25, x17, lsl #2]
     cf4:	add	w2, w17, #0x1
     cf8:	cmp	w2, #0x200
     cfc:	csinc	w17, wzr, w17, eq  // eq = none
     d00:	stp	w18, w17, [x19, #24]
     d04:	sub	w18, w18, #0x1
     d08:	add	w17, w9, #0x2
     d0c:	cmp	w15, w13
     d10:	str	w18, [x19, #24]
     d14:	str	w17, [x19, #1092]
     d18:	b.ne	d24 <BZ2_bzDecompress+0x284>  // b.any
     d1c:	mov	w13, #0x2                   	// #2
     d20:	b	b94 <BZ2_bzDecompress+0xf4>
     d24:	cmp	w18, #0x1
     d28:	cset	w15, eq  // eq = none
     d2c:	and	w0, w0, #0xff
     d30:	eor	w15, w0, w15
     d34:	cmp	w15, w14
     d38:	b.ne	ddc <BZ2_bzDecompress+0x33c>  // b.any
     d3c:	cmp	w1, w12
     d40:	str	w27, [x19, #16]
     d44:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
     d48:	mov	w0, wzr
     d4c:	mov	w15, #0x100                 	// #256
     d50:	add	w2, w0, w15
     d54:	asr	w2, w2, #1
     d58:	add	x3, x19, w2, sxtw #2
     d5c:	ldr	w3, [x3, #1096]
     d60:	cmp	w3, w1
     d64:	csel	w15, w2, w15, gt
     d68:	csel	w0, w0, w2, gt
     d6c:	sub	w2, w15, w0
     d70:	cmp	w2, #0x1
     d74:	b.ne	d50 <BZ2_bzDecompress+0x2b0>  // b.any
     d78:	lsr	x15, x1, #1
     d7c:	ldrb	w2, [x11, x15]
     d80:	lsl	w16, w16, #2
     d84:	ldrh	w15, [x10, x1, lsl #1]
     d88:	and	x16, x16, #0x4
     d8c:	lsr	x16, x2, x16
     d90:	lsl	w16, w16, #16
     d94:	and	x16, x16, #0xf0000
     d98:	orr	x1, x16, x15
     d9c:	str	w1, [x19, #60]
     da0:	cbnz	w18, dbc <BZ2_bzDecompress+0x31c>
     da4:	ldrsw	x16, [x19, #28]
     da8:	ldr	w18, [x25, x16, lsl #2]
     dac:	add	w2, w16, #0x1
     db0:	cmp	w2, #0x200
     db4:	csinc	w16, wzr, w16, eq  // eq = none
     db8:	stp	w18, w16, [x19, #24]
     dbc:	sub	w16, w18, #0x1
     dc0:	add	w18, w9, #0x3
     dc4:	cmp	w17, w13
     dc8:	str	w16, [x19, #24]
     dcc:	str	w18, [x19, #1092]
     dd0:	b.ne	e50 <BZ2_bzDecompress+0x3b0>  // b.any
     dd4:	mov	w13, #0x3                   	// #3
     dd8:	b	b94 <BZ2_bzDecompress+0xf4>
     ddc:	str	w15, [x19, #64]
     de0:	mov	w13, #0x2                   	// #2
     de4:	b	b94 <BZ2_bzDecompress+0xf4>
     de8:	ldrb	w9, [x19, #12]
     dec:	ldr	x8, [x8, #24]
     df0:	strb	w9, [x8]
     df4:	ldr	w9, [x19, #3184]
     df8:	ldrb	w8, [x19, #12]
     dfc:	ldr	w10, [x19, #16]
     e00:	eor	w8, w8, w9, lsr #24
     e04:	ldr	w11, [x23, w8, uxtw #2]
     e08:	ldr	x8, [x19]
     e0c:	sub	w13, w10, #0x1
     e10:	str	w13, [x19, #16]
     e14:	eor	w9, w11, w9, lsl #8
     e18:	str	w9, [x19, #3184]
     e1c:	ldr	x9, [x8, #24]
     e20:	ldp	w10, w11, [x8, #32]
     e24:	add	x9, x9, #0x1
     e28:	str	x9, [x8, #24]
     e2c:	sub	w9, w10, #0x1
     e30:	adds	w10, w11, #0x1
     e34:	stp	w9, w10, [x8, #32]
     e38:	b.cc	e48 <BZ2_bzDecompress+0x3a8>  // b.lo, b.ul, b.last
     e3c:	ldr	w10, [x8, #40]
     e40:	add	w10, w10, #0x1
     e44:	str	w10, [x8, #40]
     e48:	cbnz	w9, b9c <BZ2_bzDecompress+0xfc>
     e4c:	b	17ac <BZ2_bzDecompress+0xd0c>
     e50:	cmp	w16, #0x1
     e54:	cset	w13, eq  // eq = none
     e58:	and	w17, w0, #0xff
     e5c:	eor	w13, w17, w13
     e60:	cmp	w13, w14
     e64:	b.ne	fa4 <BZ2_bzDecompress+0x504>  // b.any
     e68:	cmp	w1, w12
     e6c:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
     e70:	mov	w13, wzr
     e74:	mov	w14, #0x100                 	// #256
     e78:	add	w17, w13, w14
     e7c:	asr	w17, w17, #1
     e80:	add	x18, x19, w17, sxtw #2
     e84:	ldr	w18, [x18, #1096]
     e88:	cmp	w18, w1
     e8c:	csel	w14, w17, w14, gt
     e90:	csel	w13, w13, w17, gt
     e94:	sub	w17, w14, w13
     e98:	cmp	w17, #0x1
     e9c:	b.ne	e78 <BZ2_bzDecompress+0x3d8>  // b.any
     ea0:	lsr	x14, x1, #1
     ea4:	ldrb	w17, [x11, x14]
     ea8:	lsl	w15, w15, #2
     eac:	ldrh	w14, [x10, x1, lsl #1]
     eb0:	and	x15, x15, #0x4
     eb4:	lsr	x15, x17, x15
     eb8:	lsl	w15, w15, #16
     ebc:	and	x15, x15, #0xf0000
     ec0:	orr	x15, x15, x14
     ec4:	str	w15, [x19, #60]
     ec8:	cbnz	w16, ee4 <BZ2_bzDecompress+0x444>
     ecc:	ldrsw	x17, [x19, #28]
     ed0:	ldr	w16, [x25, x17, lsl #2]
     ed4:	add	w18, w17, #0x1
     ed8:	cmp	w18, #0x200
     edc:	csinc	w17, wzr, w17, eq  // eq = none
     ee0:	stp	w16, w17, [x19, #24]
     ee4:	sub	w16, w16, #0x1
     ee8:	add	w17, w9, #0x4
     eec:	cmp	w16, #0x1
     ef0:	and	w13, w13, #0xff
     ef4:	str	w17, [x19, #1092]
     ef8:	cset	w17, eq  // eq = none
     efc:	eor	w13, w13, w17
     f00:	add	w13, w13, #0x4
     f04:	cmp	w15, w12
     f08:	str	w16, [x19, #24]
     f0c:	str	w13, [x19, #16]
     f10:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
     f14:	mov	w12, wzr
     f18:	mov	w17, #0x100                 	// #256
     f1c:	add	w18, w12, w17
     f20:	asr	w18, w18, #1
     f24:	add	x0, x19, w18, sxtw #2
     f28:	ldr	w0, [x0, #1096]
     f2c:	cmp	w0, w15
     f30:	csel	w17, w18, w17, gt
     f34:	csel	w12, w12, w18, gt
     f38:	sub	w18, w17, w12
     f3c:	cmp	w18, #0x1
     f40:	b.ne	f1c <BZ2_bzDecompress+0x47c>  // b.any
     f44:	str	w12, [x19, #64]
     f48:	lsr	x17, x15, #1
     f4c:	ldrb	w11, [x11, x17]
     f50:	ldrh	w10, [x10, x15, lsl #1]
     f54:	ubfiz	w14, w14, #2, #1
     f58:	lsr	w11, w11, w14
     f5c:	bfi	w10, w11, #16, #4
     f60:	str	w10, [x19, #60]
     f64:	cbnz	w16, f80 <BZ2_bzDecompress+0x4e0>
     f68:	ldrsw	x10, [x19, #28]
     f6c:	ldr	w16, [x25, x10, lsl #2]
     f70:	add	w11, w10, #0x1
     f74:	cmp	w11, #0x200
     f78:	csinc	w10, wzr, w10, eq  // eq = none
     f7c:	stp	w16, w10, [x19, #24]
     f80:	sub	w10, w16, #0x1
     f84:	cmp	w10, #0x1
     f88:	str	w10, [x19, #24]
     f8c:	cset	w10, eq  // eq = none
     f90:	add	w9, w9, #0x5
     f94:	eor	w10, w12, w10
     f98:	str	w10, [x19, #64]
     f9c:	str	w9, [x19, #1092]
     fa0:	b	b94 <BZ2_bzDecompress+0xf4>
     fa4:	str	w13, [x19, #64]
     fa8:	mov	w13, #0x3                   	// #3
     fac:	b	b94 <BZ2_bzDecompress+0xf4>
     fb0:	cbz	w9, 15b0 <BZ2_bzDecompress+0xb10>
     fb4:	ldr	x8, [x19]
     fb8:	ldr	w9, [x8, #32]
     fbc:	cbz	w9, 17ac <BZ2_bzDecompress+0xd0c>
     fc0:	ldr	w12, [x19, #16]
     fc4:	b	fd8 <BZ2_bzDecompress+0x538>
     fc8:	str	w17, [x19, #64]
     fcc:	mov	w12, #0x1                   	// #1
     fd0:	ldr	w9, [x8, #32]
     fd4:	cbz	w9, 17ac <BZ2_bzDecompress+0xd0c>
     fd8:	cbnz	w12, 113c <BZ2_bzDecompress+0x69c>
     fdc:	ldr	w12, [x28]
     fe0:	ldr	w9, [x19, #1092]
     fe4:	add	w10, w12, #0x1
     fe8:	cmp	w9, w10
     fec:	b.eq	17ac <BZ2_bzDecompress+0xd0c>  // b.none
     ff0:	b.gt	187c <BZ2_bzDecompress+0xddc>
     ff4:	ldr	w10, [x19, #40]
     ff8:	ldp	w14, w13, [x19, #60]
     ffc:	str	w24, [x19, #16]
    1000:	mul	w11, w10, w22
    1004:	cmp	w14, w11
    1008:	strb	w13, [x19, #12]
    100c:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    1010:	ldr	x10, [x19, #3152]
    1014:	ldr	w17, [x10, x14, lsl #2]
    1018:	ldr	w14, [x19, #24]
    101c:	lsr	x16, x17, #8
    1020:	str	w16, [x19, #60]
    1024:	cbnz	w14, 1040 <BZ2_bzDecompress+0x5a0>
    1028:	ldrsw	x15, [x19, #28]
    102c:	ldr	w14, [x25, x15, lsl #2]
    1030:	add	w18, w15, #0x1
    1034:	cmp	w18, #0x200
    1038:	csinc	w15, wzr, w15, eq  // eq = none
    103c:	stp	w14, w15, [x19, #24]
    1040:	sub	w15, w14, #0x1
    1044:	add	w14, w9, #0x1
    1048:	cmp	w9, w12
    104c:	str	w15, [x19, #24]
    1050:	str	w14, [x19, #1092]
    1054:	b.eq	fcc <BZ2_bzDecompress+0x52c>  // b.none
    1058:	cmp	w15, #0x1
    105c:	cset	w18, eq  // eq = none
    1060:	and	w17, w17, #0xff
    1064:	eor	w17, w17, w18
    1068:	cmp	w17, w13
    106c:	b.ne	fc8 <BZ2_bzDecompress+0x528>  // b.any
    1070:	cmp	w16, w11
    1074:	str	w26, [x19, #16]
    1078:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    107c:	ldr	w18, [x10, x16, lsl #2]
    1080:	lsr	x16, x18, #8
    1084:	str	w16, [x19, #60]
    1088:	cbnz	w15, 10a4 <BZ2_bzDecompress+0x604>
    108c:	ldrsw	x17, [x19, #28]
    1090:	ldr	w15, [x25, x17, lsl #2]
    1094:	add	w0, w17, #0x1
    1098:	cmp	w0, #0x200
    109c:	csinc	w17, wzr, w17, eq  // eq = none
    10a0:	stp	w15, w17, [x19, #24]
    10a4:	sub	w17, w15, #0x1
    10a8:	add	w15, w9, #0x2
    10ac:	cmp	w14, w12
    10b0:	str	w17, [x19, #24]
    10b4:	str	w15, [x19, #1092]
    10b8:	b.ne	10c4 <BZ2_bzDecompress+0x624>  // b.any
    10bc:	mov	w12, #0x2                   	// #2
    10c0:	b	fd0 <BZ2_bzDecompress+0x530>
    10c4:	cmp	w17, #0x1
    10c8:	cset	w14, eq  // eq = none
    10cc:	and	w18, w18, #0xff
    10d0:	eor	w14, w18, w14
    10d4:	cmp	w14, w13
    10d8:	b.ne	1130 <BZ2_bzDecompress+0x690>  // b.any
    10dc:	cmp	w16, w11
    10e0:	str	w27, [x19, #16]
    10e4:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    10e8:	ldr	w18, [x10, x16, lsl #2]
    10ec:	lsr	x14, x18, #8
    10f0:	str	w14, [x19, #60]
    10f4:	cbnz	w17, 1110 <BZ2_bzDecompress+0x670>
    10f8:	ldrsw	x16, [x19, #28]
    10fc:	ldr	w17, [x25, x16, lsl #2]
    1100:	add	w0, w16, #0x1
    1104:	cmp	w0, #0x200
    1108:	csinc	w16, wzr, w16, eq  // eq = none
    110c:	stp	w17, w16, [x19, #24]
    1110:	sub	w16, w17, #0x1
    1114:	add	w17, w9, #0x3
    1118:	cmp	w15, w12
    111c:	str	w16, [x19, #24]
    1120:	str	w17, [x19, #1092]
    1124:	b.ne	11a4 <BZ2_bzDecompress+0x704>  // b.any
    1128:	mov	w12, #0x3                   	// #3
    112c:	b	fd0 <BZ2_bzDecompress+0x530>
    1130:	str	w14, [x19, #64]
    1134:	mov	w12, #0x2                   	// #2
    1138:	b	fd0 <BZ2_bzDecompress+0x530>
    113c:	ldrb	w9, [x19, #12]
    1140:	ldr	x8, [x8, #24]
    1144:	strb	w9, [x8]
    1148:	ldr	w9, [x19, #3184]
    114c:	ldrb	w8, [x19, #12]
    1150:	ldr	w10, [x19, #16]
    1154:	eor	w8, w8, w9, lsr #24
    1158:	ldr	w11, [x23, w8, uxtw #2]
    115c:	ldr	x8, [x19]
    1160:	sub	w12, w10, #0x1
    1164:	str	w12, [x19, #16]
    1168:	eor	w9, w11, w9, lsl #8
    116c:	str	w9, [x19, #3184]
    1170:	ldr	x9, [x8, #24]
    1174:	ldp	w10, w11, [x8, #32]
    1178:	add	x9, x9, #0x1
    117c:	str	x9, [x8, #24]
    1180:	sub	w9, w10, #0x1
    1184:	adds	w10, w11, #0x1
    1188:	stp	w9, w10, [x8, #32]
    118c:	b.cc	119c <BZ2_bzDecompress+0x6fc>  // b.lo, b.ul, b.last
    1190:	ldr	w10, [x8, #40]
    1194:	add	w10, w10, #0x1
    1198:	str	w10, [x8, #40]
    119c:	cbnz	w9, fd8 <BZ2_bzDecompress+0x538>
    11a0:	b	17ac <BZ2_bzDecompress+0xd0c>
    11a4:	cmp	w16, #0x1
    11a8:	cset	w12, eq  // eq = none
    11ac:	and	w15, w18, #0xff
    11b0:	eor	w12, w15, w12
    11b4:	cmp	w12, w13
    11b8:	b.ne	126c <BZ2_bzDecompress+0x7cc>  // b.any
    11bc:	cmp	w14, w11
    11c0:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    11c4:	ldr	w12, [x10, x14, lsl #2]
    11c8:	lsr	x13, x12, #8
    11cc:	str	w13, [x19, #60]
    11d0:	cbnz	w16, 11ec <BZ2_bzDecompress+0x74c>
    11d4:	ldrsw	x14, [x19, #28]
    11d8:	ldr	w16, [x25, x14, lsl #2]
    11dc:	add	w15, w14, #0x1
    11e0:	cmp	w15, #0x200
    11e4:	csinc	w14, wzr, w14, eq  // eq = none
    11e8:	stp	w16, w14, [x19, #24]
    11ec:	sub	w14, w16, #0x1
    11f0:	add	w15, w9, #0x4
    11f4:	cmp	w14, #0x1
    11f8:	and	w12, w12, #0xff
    11fc:	str	w15, [x19, #1092]
    1200:	cset	w15, eq  // eq = none
    1204:	eor	w12, w12, w15
    1208:	add	w12, w12, #0x4
    120c:	cmp	w13, w11
    1210:	str	w14, [x19, #24]
    1214:	str	w12, [x19, #16]
    1218:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    121c:	ldr	w11, [x10, x13, lsl #2]
    1220:	and	w10, w11, #0xff
    1224:	lsr	w11, w11, #8
    1228:	stp	w11, w10, [x19, #60]
    122c:	cbnz	w14, 1248 <BZ2_bzDecompress+0x7a8>
    1230:	ldrsw	x11, [x19, #28]
    1234:	ldr	w14, [x25, x11, lsl #2]
    1238:	add	w13, w11, #0x1
    123c:	cmp	w13, #0x200
    1240:	csinc	w11, wzr, w11, eq  // eq = none
    1244:	stp	w14, w11, [x19, #24]
    1248:	sub	w11, w14, #0x1
    124c:	cmp	w11, #0x1
    1250:	str	w11, [x19, #24]
    1254:	cset	w11, eq  // eq = none
    1258:	add	w9, w9, #0x5
    125c:	eor	w10, w10, w11
    1260:	str	w10, [x19, #64]
    1264:	str	w9, [x19, #1092]
    1268:	b	fd0 <BZ2_bzDecompress+0x530>
    126c:	str	w12, [x19, #64]
    1270:	mov	w12, #0x3                   	// #3
    1274:	b	fd0 <BZ2_bzDecompress+0x530>
    1278:	cbz	w10, 17ac <BZ2_bzDecompress+0xd0c>
    127c:	ldr	w13, [x19, #16]
    1280:	b	1294 <BZ2_bzDecompress+0x7f4>
    1284:	str	w16, [x19, #64]
    1288:	mov	w13, #0x1                   	// #1
    128c:	ldr	w9, [x8, #32]
    1290:	cbz	w9, 17ac <BZ2_bzDecompress+0xd0c>
    1294:	cbnz	w13, 1458 <BZ2_bzDecompress+0x9b8>
    1298:	ldr	w13, [x28]
    129c:	ldr	w9, [x19, #1092]
    12a0:	add	w10, w13, #0x1
    12a4:	cmp	w9, w10
    12a8:	b.eq	17ac <BZ2_bzDecompress+0xd0c>  // b.none
    12ac:	b.gt	187c <BZ2_bzDecompress+0xddc>
    12b0:	ldr	w10, [x19, #40]
    12b4:	ldp	w17, w14, [x19, #60]
    12b8:	str	w24, [x19, #16]
    12bc:	mul	w12, w10, w22
    12c0:	cmp	w17, w12
    12c4:	strb	w14, [x19, #12]
    12c8:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    12cc:	mov	w16, wzr
    12d0:	mov	w10, #0x100                 	// #256
    12d4:	add	w11, w16, w10
    12d8:	asr	w11, w11, #1
    12dc:	add	x15, x19, w11, sxtw #2
    12e0:	ldr	w15, [x15, #1096]
    12e4:	cmp	w15, w17
    12e8:	csel	w10, w11, w10, gt
    12ec:	csel	w16, w16, w11, gt
    12f0:	sub	w11, w10, w16
    12f4:	cmp	w11, #0x1
    12f8:	b.ne	12d4 <BZ2_bzDecompress+0x834>  // b.any
    12fc:	ldr	x11, [x19, #3168]
    1300:	ldr	x10, [x19, #3160]
    1304:	lsr	x18, x17, #1
    1308:	lsl	w0, w17, #2
    130c:	ldrb	w18, [x11, x18]
    1310:	and	x0, x0, #0x4
    1314:	ldrh	w17, [x10, x17, lsl #1]
    1318:	add	w15, w9, #0x1
    131c:	lsr	x18, x18, x0
    1320:	lsl	w18, w18, #16
    1324:	and	x18, x18, #0xf0000
    1328:	cmp	w9, w13
    132c:	orr	x0, x18, x17
    1330:	str	w0, [x19, #60]
    1334:	str	w15, [x19, #1092]
    1338:	b.eq	1288 <BZ2_bzDecompress+0x7e8>  // b.none
    133c:	and	w16, w16, #0xff
    1340:	cmp	w16, w14
    1344:	b.ne	1284 <BZ2_bzDecompress+0x7e4>  // b.any
    1348:	cmp	w0, w12
    134c:	str	w26, [x19, #16]
    1350:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    1354:	mov	w18, wzr
    1358:	mov	w16, #0x100                 	// #256
    135c:	add	w1, w18, w16
    1360:	asr	w1, w1, #1
    1364:	add	x2, x19, w1, sxtw #2
    1368:	ldr	w2, [x2, #1096]
    136c:	cmp	w2, w0
    1370:	csel	w16, w1, w16, gt
    1374:	csel	w18, w18, w1, gt
    1378:	sub	w1, w16, w18
    137c:	cmp	w1, #0x1
    1380:	b.ne	135c <BZ2_bzDecompress+0x8bc>  // b.any
    1384:	ldrh	w16, [x10, x0, lsl #1]
    1388:	lsr	x0, x0, #1
    138c:	ldrb	w0, [x11, x0]
    1390:	lsl	w1, w17, #2
    1394:	cmp	w15, w13
    1398:	and	x15, x1, #0x4
    139c:	lsr	x15, x0, x15
    13a0:	lsl	w15, w15, #16
    13a4:	and	x15, x15, #0xf0000
    13a8:	add	w17, w9, #0x2
    13ac:	orr	x0, x15, x16
    13b0:	str	w0, [x19, #60]
    13b4:	str	w17, [x19, #1092]
    13b8:	b.ne	13c4 <BZ2_bzDecompress+0x924>  // b.any
    13bc:	mov	w13, #0x2                   	// #2
    13c0:	b	128c <BZ2_bzDecompress+0x7ec>
    13c4:	and	w15, w18, #0xff
    13c8:	cmp	w15, w14
    13cc:	b.ne	144c <BZ2_bzDecompress+0x9ac>  // b.any
    13d0:	cmp	w0, w12
    13d4:	str	w27, [x19, #16]
    13d8:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    13dc:	mov	w18, wzr
    13e0:	mov	w15, #0x100                 	// #256
    13e4:	add	w1, w18, w15
    13e8:	asr	w1, w1, #1
    13ec:	add	x2, x19, w1, sxtw #2
    13f0:	ldr	w2, [x2, #1096]
    13f4:	cmp	w2, w0
    13f8:	csel	w15, w1, w15, gt
    13fc:	csel	w18, w18, w1, gt
    1400:	sub	w1, w15, w18
    1404:	cmp	w1, #0x1
    1408:	b.ne	13e4 <BZ2_bzDecompress+0x944>  // b.any
    140c:	ldrh	w15, [x10, x0, lsl #1]
    1410:	lsr	x0, x0, #1
    1414:	ldrb	w0, [x11, x0]
    1418:	lsl	w16, w16, #2
    141c:	cmp	w17, w13
    1420:	and	x13, x16, #0x4
    1424:	lsr	x13, x0, x13
    1428:	lsl	w13, w13, #16
    142c:	and	x13, x13, #0xf0000
    1430:	add	w1, w9, #0x3
    1434:	orr	x16, x13, x15
    1438:	str	w16, [x19, #60]
    143c:	str	w1, [x19, #1092]
    1440:	b.ne	14c0 <BZ2_bzDecompress+0xa20>  // b.any
    1444:	mov	w13, #0x3                   	// #3
    1448:	b	128c <BZ2_bzDecompress+0x7ec>
    144c:	str	w15, [x19, #64]
    1450:	mov	w13, #0x2                   	// #2
    1454:	b	128c <BZ2_bzDecompress+0x7ec>
    1458:	ldrb	w9, [x19, #12]
    145c:	ldr	x8, [x8, #24]
    1460:	strb	w9, [x8]
    1464:	ldr	w9, [x19, #3184]
    1468:	ldrb	w8, [x19, #12]
    146c:	ldr	w10, [x19, #16]
    1470:	eor	w8, w8, w9, lsr #24
    1474:	ldr	w11, [x23, w8, uxtw #2]
    1478:	ldr	x8, [x19]
    147c:	sub	w13, w10, #0x1
    1480:	str	w13, [x19, #16]
    1484:	eor	w9, w11, w9, lsl #8
    1488:	str	w9, [x19, #3184]
    148c:	ldr	x9, [x8, #24]
    1490:	ldp	w10, w11, [x8, #32]
    1494:	add	x9, x9, #0x1
    1498:	str	x9, [x8, #24]
    149c:	sub	w9, w10, #0x1
    14a0:	adds	w10, w11, #0x1
    14a4:	stp	w9, w10, [x8, #32]
    14a8:	b.cc	14b8 <BZ2_bzDecompress+0xa18>  // b.lo, b.ul, b.last
    14ac:	ldr	w10, [x8, #40]
    14b0:	add	w10, w10, #0x1
    14b4:	str	w10, [x8, #40]
    14b8:	cbnz	w9, 1294 <BZ2_bzDecompress+0x7f4>
    14bc:	b	17ac <BZ2_bzDecompress+0xd0c>
    14c0:	and	w13, w18, #0xff
    14c4:	cmp	w13, w14
    14c8:	b.ne	15a4 <BZ2_bzDecompress+0xb04>  // b.any
    14cc:	cmp	w16, w12
    14d0:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    14d4:	mov	w13, wzr
    14d8:	mov	w14, #0x100                 	// #256
    14dc:	add	w17, w13, w14
    14e0:	asr	w17, w17, #1
    14e4:	add	x18, x19, w17, sxtw #2
    14e8:	ldr	w18, [x18, #1096]
    14ec:	cmp	w18, w16
    14f0:	csel	w14, w17, w14, gt
    14f4:	csel	w13, w13, w17, gt
    14f8:	sub	w17, w14, w13
    14fc:	cmp	w17, #0x1
    1500:	b.ne	14dc <BZ2_bzDecompress+0xa3c>  // b.any
    1504:	ldrh	w14, [x10, x16, lsl #1]
    1508:	lsr	x16, x16, #1
    150c:	ldrb	w16, [x11, x16]
    1510:	lsl	w15, w15, #2
    1514:	and	x15, x15, #0x4
    1518:	and	w13, w13, #0xff
    151c:	lsr	x15, x16, x15
    1520:	lsl	w15, w15, #16
    1524:	and	x15, x15, #0xf0000
    1528:	orr	x15, x15, x14
    152c:	add	w17, w9, #0x4
    1530:	add	w13, w13, #0x4
    1534:	cmp	w15, w12
    1538:	str	w17, [x19, #1092]
    153c:	str	w15, [x19, #60]
    1540:	str	w13, [x19, #16]
    1544:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    1548:	mov	w12, wzr
    154c:	mov	w16, #0x100                 	// #256
    1550:	add	w17, w12, w16
    1554:	asr	w17, w17, #1
    1558:	add	x18, x19, w17, sxtw #2
    155c:	ldr	w18, [x18, #1096]
    1560:	cmp	w18, w15
    1564:	csel	w16, w17, w16, gt
    1568:	csel	w12, w12, w17, gt
    156c:	sub	w17, w16, w12
    1570:	cmp	w17, #0x1
    1574:	b.ne	1550 <BZ2_bzDecompress+0xab0>  // b.any
    1578:	str	w12, [x19, #64]
    157c:	lsr	x12, x15, #1
    1580:	ldrb	w11, [x11, x12]
    1584:	ldrh	w10, [x10, x15, lsl #1]
    1588:	ubfiz	w12, w14, #2, #1
    158c:	add	w9, w9, #0x5
    1590:	lsr	w11, w11, w12
    1594:	bfi	w10, w11, #16, #4
    1598:	str	w10, [x19, #60]
    159c:	str	w9, [x19, #1092]
    15a0:	b	128c <BZ2_bzDecompress+0x7ec>
    15a4:	str	w13, [x19, #64]
    15a8:	mov	w13, #0x3                   	// #3
    15ac:	b	128c <BZ2_bzDecompress+0x7ec>
    15b0:	ldr	x10, [x19]
    15b4:	ldr	w15, [x28]
    15b8:	ldr	w12, [x19, #40]
    15bc:	ldr	w8, [x19, #3184]
    15c0:	ldr	w11, [x10, #32]
    15c4:	ldrb	w17, [x19, #12]
    15c8:	ldr	w1, [x19, #16]
    15cc:	ldr	w0, [x19, #1092]
    15d0:	ldr	x9, [x19, #3152]
    15d4:	ldp	w13, w18, [x19, #60]
    15d8:	ldr	x10, [x10, #24]
    15dc:	add	w14, w15, #0x1
    15e0:	mul	w16, w12, w22
    15e4:	mov	w12, w11
    15e8:	cmp	w1, #0x1
    15ec:	b.lt	1654 <BZ2_bzDecompress+0xbb4>  // b.tstop
    15f0:	cbz	w12, 1768 <BZ2_bzDecompress+0xcc8>
    15f4:	mov	w5, w1
    15f8:	mov	x2, xzr
    15fc:	and	w3, w17, #0xff
    1600:	mov	w4, w12
    1604:	sub	x5, x5, #0x1
    1608:	cmp	w5, w2
    160c:	b.eq	1630 <BZ2_bzDecompress+0xb90>  // b.none
    1610:	strb	w17, [x10, x2]
    1614:	eor	w6, w3, w8, lsr #24
    1618:	ldr	w6, [x23, w6, uxtw #2]
    161c:	add	x2, x2, #0x1
    1620:	cmp	w4, w2
    1624:	eor	w8, w6, w8, lsl #8
    1628:	b.ne	1608 <BZ2_bzDecompress+0xb68>  // b.any
    162c:	b	175c <BZ2_bzDecompress+0xcbc>
    1630:	sub	w12, w12, w2
    1634:	add	x10, x10, x2
    1638:	cbz	w12, 185c <BZ2_bzDecompress+0xdbc>
    163c:	and	w1, w17, #0xff
    1640:	strb	w17, [x10], #1
    1644:	eor	w1, w1, w8, lsr #24
    1648:	ldr	w1, [x23, w1, uxtw #2]
    164c:	sub	w12, w12, #0x1
    1650:	eor	w8, w1, w8, lsl #8
    1654:	mov	w3, w0
    1658:	mov	w2, w18
    165c:	cmp	w0, w14
    1660:	b.gt	187c <BZ2_bzDecompress+0xddc>
    1664:	b.eq	1864 <BZ2_bzDecompress+0xdc4>  // b.none
    1668:	cmp	w13, w16
    166c:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    1670:	ldr	w17, [x9, w13, uxtw #2]
    1674:	add	w0, w3, #0x1
    1678:	and	w18, w17, #0xff
    167c:	lsr	x13, x17, #8
    1680:	cmp	w18, w2
    1684:	b.ne	1694 <BZ2_bzDecompress+0xbf4>  // b.any
    1688:	cmp	w3, w15
    168c:	b.ne	169c <BZ2_bzDecompress+0xbfc>  // b.any
    1690:	mov	w18, w2
    1694:	mov	w17, w2
    1698:	b	1638 <BZ2_bzDecompress+0xb98>
    169c:	cmp	w13, w16
    16a0:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    16a4:	ldr	w5, [x9, x13, lsl #2]
    16a8:	add	w4, w3, #0x2
    16ac:	cmp	w4, w14
    16b0:	mov	w1, #0x2                   	// #2
    16b4:	lsr	x13, x5, #8
    16b8:	mov	w0, w14
    16bc:	mov	w18, w2
    16c0:	mov	w17, w2
    16c4:	b.eq	15e8 <BZ2_bzDecompress+0xb48>  // b.none
    16c8:	and	w18, w5, #0xff
    16cc:	cmp	w18, w2
    16d0:	mov	w1, #0x2                   	// #2
    16d4:	mov	w0, w4
    16d8:	mov	w17, w2
    16dc:	b.ne	15e8 <BZ2_bzDecompress+0xb48>  // b.any
    16e0:	cmp	w13, w16
    16e4:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    16e8:	ldr	w5, [x9, x13, lsl #2]
    16ec:	add	w4, w3, #0x3
    16f0:	cmp	w4, w14
    16f4:	mov	w1, #0x3                   	// #3
    16f8:	lsr	x13, x5, #8
    16fc:	mov	w0, w14
    1700:	mov	w18, w2
    1704:	mov	w17, w2
    1708:	b.eq	15e8 <BZ2_bzDecompress+0xb48>  // b.none
    170c:	and	w18, w5, #0xff
    1710:	cmp	w18, w2
    1714:	mov	w1, #0x3                   	// #3
    1718:	mov	w0, w4
    171c:	mov	w17, w2
    1720:	b.ne	15e8 <BZ2_bzDecompress+0xb48>  // b.any
    1724:	cmp	w13, w16
    1728:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    172c:	ldr	w13, [x9, x13, lsl #2]
    1730:	lsr	x17, x13, #8
    1734:	cmp	w17, w16
    1738:	b.cs	187c <BZ2_bzDecompress+0xddc>  // b.hs, b.nlast
    173c:	ldr	w17, [x9, x17, lsl #2]
    1740:	and	w13, w13, #0xff
    1744:	add	w1, w13, #0x4
    1748:	add	w0, w3, #0x5
    174c:	and	w18, w17, #0xff
    1750:	lsr	w13, w17, #8
    1754:	mov	w17, w2
    1758:	b	15e8 <BZ2_bzDecompress+0xb48>
    175c:	mov	w12, wzr
    1760:	add	x10, x10, x2
    1764:	sub	w1, w1, w2
    1768:	ldr	x14, [x19]
    176c:	sub	w11, w11, w12
    1770:	ldr	w15, [x14, #36]
    1774:	adds	w11, w15, w11
    1778:	str	w11, [x14, #36]
    177c:	b.cc	178c <BZ2_bzDecompress+0xcec>  // b.lo, b.ul, b.last
    1780:	ldr	w11, [x14, #40]
    1784:	add	w11, w11, #0x1
    1788:	str	w11, [x14, #40]
    178c:	str	w8, [x19, #3184]
    1790:	strb	w17, [x19, #12]
    1794:	str	w1, [x19, #16]
    1798:	str	w0, [x19, #1092]
    179c:	str	x9, [x19, #3152]
    17a0:	stp	w13, w18, [x19, #60]
    17a4:	str	x10, [x14, #24]
    17a8:	str	w12, [x14, #32]
    17ac:	ldr	w8, [x28]
    17b0:	ldr	w9, [x19, #1092]
    17b4:	add	w8, w8, #0x1
    17b8:	cmp	w9, w8
    17bc:	b.ne	18a8 <BZ2_bzDecompress+0xe08>  // b.any
    17c0:	ldr	w8, [x19, #16]
    17c4:	cbnz	w8, 18a8 <BZ2_bzDecompress+0xe08>
    17c8:	ldr	w9, [x19, #3184]
    17cc:	ldr	w8, [x19, #52]
    17d0:	mvn	w3, w9
    17d4:	cmp	w8, #0x2
    17d8:	str	w3, [x19, #3184]
    17dc:	b.gt	181c <BZ2_bzDecompress+0xd7c>
    17e0:	cmp	w8, #0x2
    17e4:	b.ge	183c <BZ2_bzDecompress+0xd9c>  // b.tcont
    17e8:	ldr	w8, [x19, #3184]
    17ec:	ldr	w9, [x19, #3176]
    17f0:	cmp	w8, w9
    17f4:	b.ne	187c <BZ2_bzDecompress+0xddc>  // b.any
    17f8:	ldr	w9, [x19, #3188]
    17fc:	str	w20, [x19, #8]
    1800:	eor	w8, w8, w9, ror #31
    1804:	str	w8, [x19, #3188]
    1808:	mov	x0, x19
    180c:	bl	0 <BZ2_decompress>
    1810:	cmp	w0, #0x4
    1814:	b.ne	b54 <BZ2_bzDecompress+0xb4>  // b.any
    1818:	b	1884 <BZ2_bzDecompress+0xde4>
    181c:	ldr	x0, [x21]
    1820:	ldr	w2, [x19, #3176]
    1824:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    1828:	add	x1, x1, #0x0
    182c:	bl	0 <fprintf>
    1830:	ldr	w8, [x19, #52]
    1834:	cmp	w8, #0x2
    1838:	b.lt	17e8 <BZ2_bzDecompress+0xd48>  // b.tstop
    183c:	ldr	x1, [x21]
    1840:	mov	w0, #0x5d                  	// #93
    1844:	bl	0 <fputc>
    1848:	ldr	w8, [x19, #3184]
    184c:	ldr	w9, [x19, #3176]
    1850:	cmp	w8, w9
    1854:	b.eq	17f8 <BZ2_bzDecompress+0xd58>  // b.none
    1858:	b	187c <BZ2_bzDecompress+0xddc>
    185c:	mov	w1, #0x1                   	// #1
    1860:	b	1768 <BZ2_bzDecompress+0xcc8>
    1864:	mov	w1, wzr
    1868:	mov	w0, w14
    186c:	mov	w18, w2
    1870:	b	1768 <BZ2_bzDecompress+0xcc8>
    1874:	mov	w0, #0xffffffff            	// #-1
    1878:	b	ad8 <BZ2_bzDecompress+0x38>
    187c:	mov	w0, #0xfffffffc            	// #-4
    1880:	b	ad8 <BZ2_bzDecompress+0x38>
    1884:	ldr	w8, [x19, #52]
    1888:	cmp	w8, #0x3
    188c:	b.ge	18b0 <BZ2_bzDecompress+0xe10>  // b.tcont
    1890:	ldr	w8, [x19, #3188]
    1894:	ldr	w9, [x19, #3180]
    1898:	cmp	w8, w9
    189c:	mov	w8, #0x4                   	// #4
    18a0:	cneg	w0, w8, ne  // ne = any
    18a4:	b	ad8 <BZ2_bzDecompress+0x38>
    18a8:	mov	w0, wzr
    18ac:	b	ad8 <BZ2_bzDecompress+0x38>
    18b0:	ldr	x0, [x21]
    18b4:	ldr	w2, [x19, #3180]
    18b8:	ldr	w3, [x19, #3188]
    18bc:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    18c0:	add	x1, x1, #0x0
    18c4:	bl	0 <fprintf>
    18c8:	b	1890 <BZ2_bzDecompress+0xdf0>

00000000000018cc <BZ2_bzDecompressEnd>:
    18cc:	stp	x29, x30, [sp, #-32]!
    18d0:	stp	x20, x19, [sp, #16]
    18d4:	mov	x29, sp
    18d8:	cbz	x0, 18f4 <BZ2_bzDecompressEnd+0x28>
    18dc:	ldr	x20, [x0, #48]
    18e0:	mov	x19, x0
    18e4:	cbz	x20, 18f4 <BZ2_bzDecompressEnd+0x28>
    18e8:	ldr	x8, [x20]
    18ec:	cmp	x8, x19
    18f0:	b.eq	1904 <BZ2_bzDecompressEnd+0x38>  // b.none
    18f4:	mov	w0, #0xfffffffe            	// #-2
    18f8:	ldp	x20, x19, [sp, #16]
    18fc:	ldp	x29, x30, [sp], #32
    1900:	ret
    1904:	ldr	x1, [x20, #3152]
    1908:	cbz	x1, 1914 <BZ2_bzDecompressEnd+0x48>
    190c:	ldp	x8, x0, [x19, #64]
    1910:	blr	x8
    1914:	ldr	x1, [x20, #3160]
    1918:	cbz	x1, 1924 <BZ2_bzDecompressEnd+0x58>
    191c:	ldp	x8, x0, [x19, #64]
    1920:	blr	x8
    1924:	ldr	x1, [x20, #3168]
    1928:	cbz	x1, 1934 <BZ2_bzDecompressEnd+0x68>
    192c:	ldp	x8, x0, [x19, #64]
    1930:	blr	x8
    1934:	ldp	x8, x0, [x19, #64]
    1938:	ldr	x1, [x19, #48]
    193c:	blr	x8
    1940:	mov	w0, wzr
    1944:	str	xzr, [x19, #48]
    1948:	ldp	x20, x19, [sp, #16]
    194c:	ldp	x29, x30, [sp], #32
    1950:	ret

0000000000001954 <BZ2_bzWriteOpen>:
    1954:	stp	x29, x30, [sp, #-80]!
    1958:	str	x25, [sp, #16]
    195c:	stp	x24, x23, [sp, #32]
    1960:	stp	x22, x21, [sp, #48]
    1964:	stp	x20, x19, [sp, #64]
    1968:	mov	x29, sp
    196c:	mov	w23, w4
    1970:	mov	w21, w3
    1974:	mov	w22, w2
    1978:	mov	x24, x1
    197c:	mov	x19, x0
    1980:	cbz	x0, 1988 <BZ2_bzWriteOpen+0x34>
    1984:	str	wzr, [x19]
    1988:	cmp	w21, #0x4
    198c:	b.hi	19c4 <BZ2_bzWriteOpen+0x70>  // b.pmore
    1990:	cmp	w23, #0xfa
    1994:	b.hi	19c4 <BZ2_bzWriteOpen+0x70>  // b.pmore
    1998:	cbz	x24, 19c4 <BZ2_bzWriteOpen+0x70>
    199c:	sub	w8, w22, #0x1
    19a0:	cmp	w8, #0x9
    19a4:	b.cs	19c4 <BZ2_bzWriteOpen+0x70>  // b.hs, b.nlast
    19a8:	mov	x0, x24
    19ac:	bl	0 <ferror>
    19b0:	cbz	w0, 19f0 <BZ2_bzWriteOpen+0x9c>
    19b4:	mov	x20, xzr
    19b8:	cbz	x19, 19d4 <BZ2_bzWriteOpen+0x80>
    19bc:	mov	w8, #0xfffffffa            	// #-6
    19c0:	b	19d0 <BZ2_bzWriteOpen+0x7c>
    19c4:	mov	x20, xzr
    19c8:	cbz	x19, 19d4 <BZ2_bzWriteOpen+0x80>
    19cc:	mov	w8, #0xfffffffe            	// #-2
    19d0:	str	w8, [x19]
    19d4:	mov	x0, x20
    19d8:	ldp	x20, x19, [sp, #64]
    19dc:	ldp	x22, x21, [sp, #48]
    19e0:	ldp	x24, x23, [sp, #32]
    19e4:	ldr	x25, [sp, #16]
    19e8:	ldp	x29, x30, [sp], #80
    19ec:	ret
    19f0:	mov	w0, #0x13f0                	// #5104
    19f4:	bl	0 <malloc>
    19f8:	cbz	x0, 1a70 <BZ2_bzWriteOpen+0x11c>
    19fc:	mov	w8, #0x1394                	// #5012
    1a00:	mov	x20, x0
    1a04:	add	x25, x0, x8
    1a08:	cbz	x19, 1a10 <BZ2_bzWriteOpen+0xbc>
    1a0c:	str	wzr, [x19]
    1a10:	mov	w8, #0x1398                	// #5016
    1a14:	cmp	w23, #0x0
    1a18:	mov	w9, #0x1e                  	// #30
    1a1c:	str	wzr, [x20, #5096]
    1a20:	strb	wzr, [x25, #88]
    1a24:	str	x24, [x20]
    1a28:	mov	w24, #0x1                   	// #1
    1a2c:	movi	v0.2d, #0x0
    1a30:	add	x0, x20, x8
    1a34:	csel	w3, w9, w23, eq  // eq = none
    1a38:	mov	w1, w22
    1a3c:	mov	w2, w21
    1a40:	str	wzr, [x20, #5008]
    1a44:	strb	w24, [x25]
    1a48:	str	xzr, [x20, #5088]
    1a4c:	str	q0, [x20, #5072]
    1a50:	bl	68 <BZ2_bzCompressInit>
    1a54:	cbz	w0, 1a80 <BZ2_bzWriteOpen+0x12c>
    1a58:	cbz	x19, 1a60 <BZ2_bzWriteOpen+0x10c>
    1a5c:	str	w0, [x19]
    1a60:	mov	x0, x20
    1a64:	bl	0 <free>
    1a68:	mov	x20, xzr
    1a6c:	b	19d4 <BZ2_bzWriteOpen+0x80>
    1a70:	mov	x20, xzr
    1a74:	cbz	x19, 19d4 <BZ2_bzWriteOpen+0x80>
    1a78:	mov	w8, #0xfffffffd            	// #-3
    1a7c:	b	19d0 <BZ2_bzWriteOpen+0x7c>
    1a80:	str	wzr, [x20, #5024]
    1a84:	strb	w24, [x25, #88]
    1a88:	b	19d4 <BZ2_bzWriteOpen+0x80>

0000000000001a8c <BZ2_bzWrite>:
    1a8c:	stp	x29, x30, [sp, #-64]!
    1a90:	stp	x24, x23, [sp, #16]
    1a94:	stp	x22, x21, [sp, #32]
    1a98:	stp	x20, x19, [sp, #48]
    1a9c:	mov	x29, sp
    1aa0:	mov	w22, w3
    1aa4:	mov	x21, x2
    1aa8:	mov	x19, x1
    1aac:	mov	x20, x0
    1ab0:	cbz	x0, 1ab8 <BZ2_bzWrite+0x2c>
    1ab4:	str	wzr, [x20]
    1ab8:	cbz	x19, 1af4 <BZ2_bzWrite+0x68>
    1abc:	str	wzr, [x19, #5096]
    1ac0:	cbz	x21, 1af4 <BZ2_bzWrite+0x68>
    1ac4:	tbnz	w22, #31, 1af4 <BZ2_bzWrite+0x68>
    1ac8:	mov	w8, #0x1394                	// #5012
    1acc:	ldrb	w8, [x19, x8]
    1ad0:	cbz	w8, 1b0c <BZ2_bzWrite+0x80>
    1ad4:	ldr	x0, [x19]
    1ad8:	bl	0 <ferror>
    1adc:	cbz	w0, 1b34 <BZ2_bzWrite+0xa8>
    1ae0:	cbz	x20, 1aec <BZ2_bzWrite+0x60>
    1ae4:	mov	w8, #0xfffffffa            	// #-6
    1ae8:	str	w8, [x20]
    1aec:	mov	w8, #0xfffffffa            	// #-6
    1af0:	b	1b1c <BZ2_bzWrite+0x90>
    1af4:	cbz	x20, 1b00 <BZ2_bzWrite+0x74>
    1af8:	mov	w8, #0xfffffffe            	// #-2
    1afc:	str	w8, [x20]
    1b00:	cbz	x19, 1b20 <BZ2_bzWrite+0x94>
    1b04:	mov	w8, #0xfffffffe            	// #-2
    1b08:	b	1b1c <BZ2_bzWrite+0x90>
    1b0c:	cbz	x20, 1b18 <BZ2_bzWrite+0x8c>
    1b10:	mov	w8, #0xffffffff            	// #-1
    1b14:	str	w8, [x20]
    1b18:	mov	w8, #0xffffffff            	// #-1
    1b1c:	str	w8, [x19, #5096]
    1b20:	ldp	x20, x19, [sp, #48]
    1b24:	ldp	x22, x21, [sp, #32]
    1b28:	ldp	x24, x23, [sp, #16]
    1b2c:	ldp	x29, x30, [sp], #64
    1b30:	ret
    1b34:	cbz	w22, 1bd4 <BZ2_bzWrite+0x148>
    1b38:	mov	w8, #0x1398                	// #5016
    1b3c:	str	w22, [x19, #5024]
    1b40:	str	x21, [x19, #5016]
    1b44:	add	x21, x19, #0x8
    1b48:	add	x22, x19, x8
    1b4c:	mov	w24, #0x1388                	// #5000
    1b50:	b	1b5c <BZ2_bzWrite+0xd0>
    1b54:	ldr	w8, [x19, #5024]
    1b58:	cbz	w8, 1bd4 <BZ2_bzWrite+0x148>
    1b5c:	ldr	x8, [x19, #5064]
    1b60:	str	w24, [x19, #5048]
    1b64:	str	x21, [x19, #5040]
    1b68:	cbz	x8, 1be4 <BZ2_bzWrite+0x158>
    1b6c:	ldr	x9, [x8]
    1b70:	cmp	x9, x22
    1b74:	b.ne	1be4 <BZ2_bzWrite+0x158>  // b.any
    1b78:	ldr	w9, [x8, #8]
    1b7c:	cmp	w9, #0x2
    1b80:	b.ne	1bec <BZ2_bzWrite+0x160>  // b.any
    1b84:	mov	x0, x22
    1b88:	bl	4c0 <handle_compress>
    1b8c:	tst	w0, #0xff
    1b90:	b.eq	1be4 <BZ2_bzWrite+0x158>  // b.none
    1b94:	ldrsw	x8, [x19, #5048]
    1b98:	ubfx	x9, x8, #3, #29
    1b9c:	cmp	w9, #0x270
    1ba0:	b.hi	1b54 <BZ2_bzWrite+0xc8>  // b.pmore
    1ba4:	ldr	x3, [x19]
    1ba8:	sub	x23, x24, x8
    1bac:	mov	w1, #0x1                   	// #1
    1bb0:	mov	x0, x21
    1bb4:	mov	x2, x23
    1bb8:	bl	0 <fwrite>
    1bbc:	cmp	w23, w0
    1bc0:	b.ne	1ae0 <BZ2_bzWrite+0x54>  // b.any
    1bc4:	ldr	x0, [x19]
    1bc8:	bl	0 <ferror>
    1bcc:	cbz	w0, 1b54 <BZ2_bzWrite+0xc8>
    1bd0:	b	1ae0 <BZ2_bzWrite+0x54>
    1bd4:	cbz	x20, 1bdc <BZ2_bzWrite+0x150>
    1bd8:	str	wzr, [x20]
    1bdc:	str	wzr, [x19, #5096]
    1be0:	b	1b20 <BZ2_bzWrite+0x94>
    1be4:	mov	w8, #0xfffffffe            	// #-2
    1be8:	b	1c10 <BZ2_bzWrite+0x184>
    1bec:	cmp	w9, #0x4
    1bf0:	mov	w8, wzr
    1bf4:	b.hi	1c10 <BZ2_bzWrite+0x184>  // b.pmore
    1bf8:	mov	w10, #0x1                   	// #1
    1bfc:	lsl	w9, w10, w9
    1c00:	mov	w10, #0x1a                  	// #26
    1c04:	tst	w9, w10
    1c08:	b.eq	1c10 <BZ2_bzWrite+0x184>  // b.none
    1c0c:	mov	w8, #0xffffffff            	// #-1
    1c10:	cbz	x20, 1b1c <BZ2_bzWrite+0x90>
    1c14:	str	w8, [x20]
    1c18:	b	1b1c <BZ2_bzWrite+0x90>

0000000000001c1c <BZ2_bzWriteClose>:
    1c1c:	mov	x5, x4
    1c20:	mov	x4, xzr
    1c24:	mov	x6, xzr
    1c28:	b	1c2c <BZ2_bzWriteClose64>

0000000000001c2c <BZ2_bzWriteClose64>:
    1c2c:	sub	sp, sp, #0x70
    1c30:	stp	x29, x30, [sp, #16]
    1c34:	stp	x28, x27, [sp, #32]
    1c38:	stp	x26, x25, [sp, #48]
    1c3c:	stp	x24, x23, [sp, #64]
    1c40:	stp	x22, x21, [sp, #80]
    1c44:	stp	x20, x19, [sp, #96]
    1c48:	add	x29, sp, #0x10
    1c4c:	mov	x20, x0
    1c50:	cbz	x1, 1c9c <BZ2_bzWriteClose64+0x70>
    1c54:	mov	w8, #0x1394                	// #5012
    1c58:	ldrb	w8, [x1, x8]
    1c5c:	mov	x19, x1
    1c60:	cbz	w8, 1ca8 <BZ2_bzWriteClose64+0x7c>
    1c64:	ldr	x25, [x19]
    1c68:	mov	x21, x6
    1c6c:	mov	x22, x5
    1c70:	mov	x23, x4
    1c74:	mov	x0, x25
    1c78:	mov	x24, x3
    1c7c:	mov	w26, w2
    1c80:	bl	0 <ferror>
    1c84:	cbz	w0, 1cdc <BZ2_bzWriteClose64+0xb0>
    1c88:	cbz	x20, 1c94 <BZ2_bzWriteClose64+0x68>
    1c8c:	mov	w8, #0xfffffffa            	// #-6
    1c90:	str	w8, [x20]
    1c94:	mov	w8, #0xfffffffa            	// #-6
    1c98:	b	1cb8 <BZ2_bzWriteClose64+0x8c>
    1c9c:	cbz	x20, 1cbc <BZ2_bzWriteClose64+0x90>
    1ca0:	str	wzr, [x20]
    1ca4:	b	1cbc <BZ2_bzWriteClose64+0x90>
    1ca8:	cbz	x20, 1cb4 <BZ2_bzWriteClose64+0x88>
    1cac:	mov	w8, #0xffffffff            	// #-1
    1cb0:	str	w8, [x20]
    1cb4:	mov	w8, #0xffffffff            	// #-1
    1cb8:	str	w8, [x19, #5096]
    1cbc:	ldp	x20, x19, [sp, #96]
    1cc0:	ldp	x22, x21, [sp, #80]
    1cc4:	ldp	x24, x23, [sp, #64]
    1cc8:	ldp	x26, x25, [sp, #48]
    1ccc:	ldp	x28, x27, [sp, #32]
    1cd0:	ldp	x29, x30, [sp, #16]
    1cd4:	add	sp, sp, #0x70
    1cd8:	ret
    1cdc:	cbz	x24, 1ce4 <BZ2_bzWriteClose64+0xb8>
    1ce0:	str	wzr, [x24]
    1ce4:	cbz	x23, 1cec <BZ2_bzWriteClose64+0xc0>
    1ce8:	str	wzr, [x23]
    1cec:	cbz	x22, 1cf4 <BZ2_bzWriteClose64+0xc8>
    1cf0:	str	wzr, [x22]
    1cf4:	cbz	x21, 1cfc <BZ2_bzWriteClose64+0xd0>
    1cf8:	str	wzr, [x21]
    1cfc:	cbz	w26, 1dc8 <BZ2_bzWriteClose64+0x19c>
    1d00:	cbz	x24, 1d0c <BZ2_bzWriteClose64+0xe0>
    1d04:	ldr	w8, [x19, #5028]
    1d08:	str	w8, [x24]
    1d0c:	cbz	x23, 1d18 <BZ2_bzWriteClose64+0xec>
    1d10:	ldr	w8, [x19, #5032]
    1d14:	str	w8, [x23]
    1d18:	cbz	x22, 1d24 <BZ2_bzWriteClose64+0xf8>
    1d1c:	ldr	w8, [x19, #5052]
    1d20:	str	w8, [x22]
    1d24:	cbz	x21, 1d30 <BZ2_bzWriteClose64+0x104>
    1d28:	ldr	w8, [x19, #5056]
    1d2c:	str	w8, [x21]
    1d30:	cbz	x20, 1d38 <BZ2_bzWriteClose64+0x10c>
    1d34:	str	wzr, [x20]
    1d38:	ldr	x20, [x19, #5064]
    1d3c:	str	wzr, [x19, #5096]
    1d40:	cbz	x20, 1da4 <BZ2_bzWriteClose64+0x178>
    1d44:	ldr	x8, [x20]
    1d48:	mov	w9, #0x1398                	// #5016
    1d4c:	add	x9, x19, x9
    1d50:	cmp	x8, x9
    1d54:	b.ne	1da4 <BZ2_bzWriteClose64+0x178>  // b.any
    1d58:	ldr	x1, [x20, #24]
    1d5c:	cbz	x1, 1d6c <BZ2_bzWriteClose64+0x140>
    1d60:	ldr	x8, [x19, #5080]
    1d64:	ldr	x0, [x19, #5088]
    1d68:	blr	x8
    1d6c:	ldr	x1, [x20, #32]
    1d70:	cbz	x1, 1d80 <BZ2_bzWriteClose64+0x154>
    1d74:	ldr	x8, [x19, #5080]
    1d78:	ldr	x0, [x19, #5088]
    1d7c:	blr	x8
    1d80:	ldr	x1, [x20, #40]
    1d84:	cbz	x1, 1d94 <BZ2_bzWriteClose64+0x168>
    1d88:	ldr	x8, [x19, #5080]
    1d8c:	ldr	x0, [x19, #5088]
    1d90:	blr	x8
    1d94:	ldr	x8, [x19, #5080]
    1d98:	ldr	x0, [x19, #5088]
    1d9c:	ldr	x1, [x19, #5064]
    1da0:	blr	x8
    1da4:	mov	x0, x19
    1da8:	ldp	x20, x19, [sp, #96]
    1dac:	ldp	x22, x21, [sp, #80]
    1db0:	ldp	x24, x23, [sp, #64]
    1db4:	ldp	x26, x25, [sp, #48]
    1db8:	ldp	x28, x27, [sp, #32]
    1dbc:	ldp	x29, x30, [sp, #16]
    1dc0:	add	sp, sp, #0x70
    1dc4:	b	0 <free>
    1dc8:	ldr	w8, [x19, #5096]
    1dcc:	cbz	w8, 1df4 <BZ2_bzWriteClose64+0x1c8>
    1dd0:	mov	x0, x25
    1dd4:	bl	0 <ferror>
    1dd8:	cbnz	w0, 1d00 <BZ2_bzWriteClose64+0xd4>
    1ddc:	mov	x0, x25
    1de0:	bl	0 <fflush>
    1de4:	ldr	x0, [x19]
    1de8:	bl	0 <ferror>
    1dec:	cbnz	w0, 1c88 <BZ2_bzWriteClose64+0x5c>
    1df0:	b	1d00 <BZ2_bzWriteClose64+0xd4>
    1df4:	mov	w8, #0x1398                	// #5016
    1df8:	add	x25, x19, #0x8
    1dfc:	mov	w28, #0x1388                	// #5000
    1e00:	add	x26, x19, x8
    1e04:	ldr	x27, [x19, #5064]
    1e08:	str	w28, [x19, #5048]
    1e0c:	str	x25, [x19, #5040]
    1e10:	cbz	x27, 1f20 <BZ2_bzWriteClose64+0x2f4>
    1e14:	ldr	x8, [x27]
    1e18:	cmp	x8, x26
    1e1c:	b.ne	1f20 <BZ2_bzWriteClose64+0x2f4>  // b.any
    1e20:	ldr	w8, [x27, #8]
    1e24:	cmp	w8, #0x2
    1e28:	b.ne	1e44 <BZ2_bzWriteClose64+0x218>  // b.any
    1e2c:	ldr	w9, [x19, #5024]
    1e30:	mov	w8, #0x4                   	// #4
    1e34:	str	w8, [x27, #8]
    1e38:	str	w9, [x27, #16]
    1e3c:	cmp	w8, #0x2
    1e40:	b.eq	1e2c <BZ2_bzWriteClose64+0x200>  // b.none
    1e44:	cmp	w8, #0x1
    1e48:	b.eq	1f10 <BZ2_bzWriteClose64+0x2e4>  // b.none
    1e4c:	cmp	w8, #0x3
    1e50:	b.eq	1f10 <BZ2_bzWriteClose64+0x2e4>  // b.none
    1e54:	cmp	w8, #0x4
    1e58:	b.ne	1f18 <BZ2_bzWriteClose64+0x2ec>  // b.any
    1e5c:	ldr	w8, [x27, #16]
    1e60:	ldr	w9, [x19, #5024]
    1e64:	cmp	w8, w9
    1e68:	b.ne	1f10 <BZ2_bzWriteClose64+0x2e4>  // b.any
    1e6c:	mov	x0, x26
    1e70:	mov	w28, #0x1                   	// #1
    1e74:	bl	4c0 <handle_compress>
    1e78:	tst	w0, #0xff
    1e7c:	b.eq	1f10 <BZ2_bzWriteClose64+0x2e4>  // b.none
    1e80:	ldr	w8, [x27, #16]
    1e84:	cbz	w8, 1ee0 <BZ2_bzWriteClose64+0x2b4>
    1e88:	mov	w27, #0x3                   	// #3
    1e8c:	ldrsw	x8, [x19, #5048]
    1e90:	mov	w28, #0x1388                	// #5000
    1e94:	ubfx	x9, x8, #3, #29
    1e98:	cmp	w9, #0x270
    1e9c:	b.hi	1ed4 <BZ2_bzWriteClose64+0x2a8>  // b.pmore
    1ea0:	ldr	x3, [x19]
    1ea4:	stur	w27, [x29, #-4]
    1ea8:	sub	x27, x28, x8
    1eac:	mov	w1, #0x1                   	// #1
    1eb0:	mov	x0, x25
    1eb4:	mov	x2, x27
    1eb8:	bl	0 <fwrite>
    1ebc:	cmp	w27, w0
    1ec0:	ldur	w27, [x29, #-4]
    1ec4:	b.ne	1c88 <BZ2_bzWriteClose64+0x5c>  // b.any
    1ec8:	ldr	x0, [x19]
    1ecc:	bl	0 <ferror>
    1ed0:	cbnz	w0, 1c88 <BZ2_bzWriteClose64+0x5c>
    1ed4:	cmp	w27, #0x4
    1ed8:	b.ne	1e04 <BZ2_bzWriteClose64+0x1d8>  // b.any
    1edc:	b	1f30 <BZ2_bzWriteClose64+0x304>
    1ee0:	ldr	w8, [x27, #92]
    1ee4:	cmp	w8, #0xff
    1ee8:	b.hi	1ef8 <BZ2_bzWriteClose64+0x2cc>  // b.pmore
    1eec:	ldr	w8, [x27, #96]
    1ef0:	cmp	w8, #0x0
    1ef4:	b.gt	1e88 <BZ2_bzWriteClose64+0x25c>
    1ef8:	ldp	w9, w8, [x27, #116]
    1efc:	cmp	w8, w9
    1f00:	b.lt	1e88 <BZ2_bzWriteClose64+0x25c>  // b.tstop
    1f04:	str	w28, [x27, #8]
    1f08:	mov	w27, #0x4                   	// #4
    1f0c:	b	1e8c <BZ2_bzWriteClose64+0x260>
    1f10:	mov	w8, #0xffffffff            	// #-1
    1f14:	b	1f24 <BZ2_bzWriteClose64+0x2f8>
    1f18:	mov	w8, wzr
    1f1c:	b	1f24 <BZ2_bzWriteClose64+0x2f8>
    1f20:	mov	w8, #0xfffffffe            	// #-2
    1f24:	cbz	x20, 1cb8 <BZ2_bzWriteClose64+0x8c>
    1f28:	str	w8, [x20]
    1f2c:	b	1cb8 <BZ2_bzWriteClose64+0x8c>
    1f30:	ldr	x25, [x19]
    1f34:	mov	x0, x25
    1f38:	bl	0 <ferror>
    1f3c:	cbnz	w0, 1d00 <BZ2_bzWriteClose64+0xd4>
    1f40:	b	1ddc <BZ2_bzWriteClose64+0x1b0>

0000000000001f44 <BZ2_bzReadOpen>:
    1f44:	stp	x29, x30, [sp, #-80]!
    1f48:	stp	x26, x25, [sp, #16]
    1f4c:	stp	x24, x23, [sp, #32]
    1f50:	stp	x22, x21, [sp, #48]
    1f54:	stp	x20, x19, [sp, #64]
    1f58:	mov	x29, sp
    1f5c:	mov	w24, w5
    1f60:	mov	x23, x4
    1f64:	mov	w21, w3
    1f68:	mov	w19, w2
    1f6c:	mov	x25, x1
    1f70:	mov	x22, x0
    1f74:	cbz	x0, 1f7c <BZ2_bzReadOpen+0x38>
    1f78:	str	wzr, [x22]
    1f7c:	cbz	x25, 1fa8 <BZ2_bzReadOpen+0x64>
    1f80:	cmp	w19, #0x4
    1f84:	b.hi	1fa8 <BZ2_bzReadOpen+0x64>  // b.pmore
    1f88:	cmp	w21, #0x1
    1f8c:	b.hi	1fa8 <BZ2_bzReadOpen+0x64>  // b.pmore
    1f90:	cbnz	x23, 1f98 <BZ2_bzReadOpen+0x54>
    1f94:	cbnz	w24, 1fa8 <BZ2_bzReadOpen+0x64>
    1f98:	cbz	x23, 1fd4 <BZ2_bzReadOpen+0x90>
    1f9c:	mov	w8, #0x1389                	// #5001
    1fa0:	cmp	w24, w8
    1fa4:	b.cc	1fd4 <BZ2_bzReadOpen+0x90>  // b.lo, b.ul, b.last
    1fa8:	mov	x20, xzr
    1fac:	cbz	x22, 1fb8 <BZ2_bzReadOpen+0x74>
    1fb0:	mov	w8, #0xfffffffe            	// #-2
    1fb4:	str	w8, [x22]
    1fb8:	mov	x0, x20
    1fbc:	ldp	x20, x19, [sp, #64]
    1fc0:	ldp	x22, x21, [sp, #48]
    1fc4:	ldp	x24, x23, [sp, #32]
    1fc8:	ldp	x26, x25, [sp, #16]
    1fcc:	ldp	x29, x30, [sp], #80
    1fd0:	ret
    1fd4:	mov	x0, x25
    1fd8:	bl	0 <ferror>
    1fdc:	cbz	w0, 1ff0 <BZ2_bzReadOpen+0xac>
    1fe0:	mov	x20, xzr
    1fe4:	cbz	x22, 1fb8 <BZ2_bzReadOpen+0x74>
    1fe8:	mov	w8, #0xfffffffa            	// #-6
    1fec:	b	1fb4 <BZ2_bzReadOpen+0x70>
    1ff0:	mov	w0, #0x13f0                	// #5104
    1ff4:	bl	0 <malloc>
    1ff8:	cbz	x0, 2104 <BZ2_bzReadOpen+0x1c0>
    1ffc:	mov	w8, #0x1394                	// #5012
    2000:	mov	x20, x0
    2004:	add	x26, x0, x8
    2008:	cbz	x22, 2010 <BZ2_bzReadOpen+0xcc>
    200c:	str	wzr, [x22]
    2010:	mov	w8, #0x13d0                	// #5072
    2014:	movi	v0.2d, #0x0
    2018:	cmp	w24, #0x1
    201c:	add	x8, x20, x8
    2020:	str	wzr, [x20, #5096]
    2024:	strb	wzr, [x26, #88]
    2028:	str	x25, [x20]
    202c:	str	wzr, [x20, #5008]
    2030:	strb	wzr, [x26]
    2034:	str	xzr, [x20, #5088]
    2038:	str	q0, [x20, #5072]
    203c:	b.lt	2074 <BZ2_bzReadOpen+0x130>  // b.tstop
    2040:	mov	w11, wzr
    2044:	add	x9, x20, #0x8
    2048:	add	w10, w24, #0x1
    204c:	ldrb	w12, [x23], #1
    2050:	sub	w10, w10, #0x1
    2054:	cmp	w10, #0x1
    2058:	strb	w12, [x9, w11, sxtw]
    205c:	ldr	w11, [x20, #5008]
    2060:	add	w11, w11, #0x1
    2064:	str	w11, [x20, #5008]
    2068:	b.gt	204c <BZ2_bzReadOpen+0x108>
    206c:	ldr	x9, [x8]
    2070:	cbnz	x9, 2080 <BZ2_bzReadOpen+0x13c>
    2074:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    2078:	add	x9, x9, #0x0
    207c:	str	x9, [x8]
    2080:	ldr	x8, [x20, #5080]
    2084:	cbnz	x8, 2094 <BZ2_bzReadOpen+0x150>
    2088:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
    208c:	add	x8, x8, #0x0
    2090:	str	x8, [x20, #5080]
    2094:	ldr	x0, [x20, #5088]
    2098:	mov	w1, #0xfa90                	// #64144
    209c:	mov	w2, #0x1                   	// #1
    20a0:	mov	w23, #0x1                   	// #1
    20a4:	blr	x9
    20a8:	cbz	x0, 2114 <BZ2_bzReadOpen+0x1d0>
    20ac:	mov	w8, #0x1398                	// #5016
    20b0:	add	x8, x20, x8
    20b4:	str	x8, [x0]
    20b8:	mov	w8, #0xa                   	// #10
    20bc:	movi	v0.2d, #0x0
    20c0:	str	x0, [x20, #5064]
    20c4:	str	w8, [x0, #8]
    20c8:	str	d0, [x0, #32]
    20cc:	str	wzr, [x0, #3188]
    20d0:	str	d0, [x26, #16]
    20d4:	str	d0, [x26, #40]
    20d8:	strb	w21, [x0, #44]
    20dc:	str	xzr, [x0, #3152]
    20e0:	str	xzr, [x0, #3168]
    20e4:	str	xzr, [x0, #3160]
    20e8:	stp	wzr, w19, [x0, #48]
    20ec:	ldr	w8, [x20, #5008]
    20f0:	add	x9, x20, #0x8
    20f4:	str	x9, [x20, #5016]
    20f8:	str	w8, [x20, #5024]
    20fc:	strb	w23, [x26, #88]
    2100:	b	1fb8 <BZ2_bzReadOpen+0x74>
    2104:	mov	x20, xzr
    2108:	cbz	x22, 1fb8 <BZ2_bzReadOpen+0x74>
    210c:	mov	w8, #0xfffffffd            	// #-3
    2110:	b	1fb4 <BZ2_bzReadOpen+0x70>
    2114:	cbz	x22, 2120 <BZ2_bzReadOpen+0x1dc>
    2118:	mov	w8, #0xfffffffd            	// #-3
    211c:	str	w8, [x22]
    2120:	mov	x0, x20
    2124:	bl	0 <free>
    2128:	mov	x20, xzr
    212c:	b	1fb8 <BZ2_bzReadOpen+0x74>

0000000000002130 <BZ2_bzReadClose>:
    2130:	stp	x29, x30, [sp, #-32]!
    2134:	stp	x20, x19, [sp, #16]
    2138:	mov	x29, sp
    213c:	mov	x19, x1
    2140:	cbz	x0, 2148 <BZ2_bzReadClose+0x18>
    2144:	str	wzr, [x0]
    2148:	cbz	x19, 2180 <BZ2_bzReadClose+0x50>
    214c:	mov	w8, #0x1394                	// #5012
    2150:	add	x8, x19, x8
    2154:	str	wzr, [x19, #5096]
    2158:	ldrb	w9, [x8]
    215c:	cbz	w9, 2194 <BZ2_bzReadClose+0x64>
    2160:	cbz	x0, 216c <BZ2_bzReadClose+0x3c>
    2164:	mov	w8, #0xffffffff            	// #-1
    2168:	str	w8, [x0]
    216c:	mov	w8, #0xffffffff            	// #-1
    2170:	str	w8, [x19, #5096]
    2174:	ldp	x20, x19, [sp, #16]
    2178:	ldp	x29, x30, [sp], #32
    217c:	ret
    2180:	cbz	x0, 2174 <BZ2_bzReadClose+0x44>
    2184:	str	wzr, [x0]
    2188:	ldp	x20, x19, [sp, #16]
    218c:	ldp	x29, x30, [sp], #32
    2190:	ret
    2194:	ldrb	w8, [x8, #88]
    2198:	cbz	w8, 21b8 <BZ2_bzReadClose+0x88>
    219c:	ldr	x20, [x19, #5064]
    21a0:	cbz	x20, 21b8 <BZ2_bzReadClose+0x88>
    21a4:	ldr	x8, [x20]
    21a8:	mov	w9, #0x1398                	// #5016
    21ac:	add	x9, x19, x9
    21b0:	cmp	x8, x9
    21b4:	b.eq	21c8 <BZ2_bzReadClose+0x98>  // b.none
    21b8:	mov	x0, x19
    21bc:	ldp	x20, x19, [sp, #16]
    21c0:	ldp	x29, x30, [sp], #32
    21c4:	b	0 <free>
    21c8:	ldr	x1, [x20, #3152]
    21cc:	cbz	x1, 21dc <BZ2_bzReadClose+0xac>
    21d0:	ldr	x8, [x19, #5080]
    21d4:	ldr	x0, [x19, #5088]
    21d8:	blr	x8
    21dc:	ldr	x1, [x20, #3160]
    21e0:	cbz	x1, 21f0 <BZ2_bzReadClose+0xc0>
    21e4:	ldr	x8, [x19, #5080]
    21e8:	ldr	x0, [x19, #5088]
    21ec:	blr	x8
    21f0:	ldr	x1, [x20, #3168]
    21f4:	cbz	x1, 2204 <BZ2_bzReadClose+0xd4>
    21f8:	ldr	x8, [x19, #5080]
    21fc:	ldr	x0, [x19, #5088]
    2200:	blr	x8
    2204:	ldr	x8, [x19, #5080]
    2208:	ldr	x0, [x19, #5088]
    220c:	ldr	x1, [x19, #5064]
    2210:	blr	x8
    2214:	mov	x0, x19
    2218:	ldp	x20, x19, [sp, #16]
    221c:	ldp	x29, x30, [sp], #32
    2220:	b	0 <free>

0000000000002224 <BZ2_bzRead>:
    2224:	stp	x29, x30, [sp, #-64]!
    2228:	stp	x24, x23, [sp, #16]
    222c:	stp	x22, x21, [sp, #32]
    2230:	stp	x20, x19, [sp, #48]
    2234:	mov	x29, sp
    2238:	mov	w20, w3
    223c:	mov	x19, x1
    2240:	mov	x21, x0
    2244:	cbz	x0, 224c <BZ2_bzRead+0x28>
    2248:	str	wzr, [x21]
    224c:	cbz	x19, 2280 <BZ2_bzRead+0x5c>
    2250:	str	wzr, [x19, #5096]
    2254:	cbz	x2, 2280 <BZ2_bzRead+0x5c>
    2258:	tbnz	w20, #31, 2280 <BZ2_bzRead+0x5c>
    225c:	mov	w8, #0x1394                	// #5012
    2260:	ldrb	w8, [x19, x8]
    2264:	cbz	w8, 22b4 <BZ2_bzRead+0x90>
    2268:	cbz	x21, 2274 <BZ2_bzRead+0x50>
    226c:	mov	w8, #0xffffffff            	// #-1
    2270:	str	w8, [x21]
    2274:	mov	w20, wzr
    2278:	mov	w8, #0xffffffff            	// #-1
    227c:	b	2298 <BZ2_bzRead+0x74>
    2280:	cbz	x21, 228c <BZ2_bzRead+0x68>
    2284:	mov	w8, #0xfffffffe            	// #-2
    2288:	str	w8, [x21]
    228c:	mov	w20, wzr
    2290:	cbz	x19, 229c <BZ2_bzRead+0x78>
    2294:	mov	w8, #0xfffffffe            	// #-2
    2298:	str	w8, [x19, #5096]
    229c:	mov	w0, w20
    22a0:	ldp	x20, x19, [sp, #48]
    22a4:	ldp	x22, x21, [sp, #32]
    22a8:	ldp	x24, x23, [sp, #16]
    22ac:	ldp	x29, x30, [sp], #64
    22b0:	ret
    22b4:	cbz	w20, 23a0 <BZ2_bzRead+0x17c>
    22b8:	mov	w8, #0x1398                	// #5016
    22bc:	add	x22, x19, x8
    22c0:	add	x23, x19, #0x8
    22c4:	str	w20, [x19, #5048]
    22c8:	str	x2, [x19, #5040]
    22cc:	b	22e0 <BZ2_bzRead+0xbc>
    22d0:	cmp	w0, #0x4
    22d4:	b.eq	23f0 <BZ2_bzRead+0x1cc>  // b.none
    22d8:	ldr	w8, [x19, #5048]
    22dc:	cbz	w8, 23e0 <BZ2_bzRead+0x1bc>
    22e0:	ldr	x24, [x19]
    22e4:	mov	x0, x24
    22e8:	bl	0 <ferror>
    22ec:	cbnz	w0, 23b4 <BZ2_bzRead+0x190>
    22f0:	ldr	w8, [x19, #5024]
    22f4:	cbnz	w8, 2344 <BZ2_bzRead+0x120>
    22f8:	mov	x0, x24
    22fc:	bl	0 <fgetc>
    2300:	cmn	w0, #0x1
    2304:	b.eq	2344 <BZ2_bzRead+0x120>  // b.none
    2308:	mov	x1, x24
    230c:	bl	0 <ungetc>
    2310:	ldr	x3, [x19]
    2314:	mov	w1, #0x1                   	// #1
    2318:	mov	w2, #0x1388                	// #5000
    231c:	mov	x0, x23
    2320:	bl	0 <fread>
    2324:	ldr	x8, [x19]
    2328:	mov	x24, x0
    232c:	mov	x0, x8
    2330:	bl	0 <ferror>
    2334:	cbnz	w0, 23b4 <BZ2_bzRead+0x190>
    2338:	str	w24, [x19, #5008]
    233c:	str	w24, [x19, #5024]
    2340:	str	x23, [x19, #5016]
    2344:	mov	x0, x22
    2348:	bl	aa0 <BZ2_bzDecompress>
    234c:	tst	w0, #0xfffffffb
    2350:	b.ne	23cc <BZ2_bzRead+0x1a8>  // b.any
    2354:	cbnz	w0, 22d0 <BZ2_bzRead+0xac>
    2358:	ldr	x24, [x19]
    235c:	mov	x0, x24
    2360:	bl	0 <fgetc>
    2364:	cmn	w0, #0x1
    2368:	b.eq	2378 <BZ2_bzRead+0x154>  // b.none
    236c:	mov	x1, x24
    2370:	bl	0 <ungetc>
    2374:	b	22d8 <BZ2_bzRead+0xb4>
    2378:	ldr	w8, [x19, #5024]
    237c:	cbnz	w8, 22d8 <BZ2_bzRead+0xb4>
    2380:	ldr	w8, [x19, #5048]
    2384:	cbz	w8, 23e0 <BZ2_bzRead+0x1bc>
    2388:	cbz	x21, 2394 <BZ2_bzRead+0x170>
    238c:	mov	w8, #0xfffffff9            	// #-7
    2390:	str	w8, [x21]
    2394:	mov	w20, wzr
    2398:	mov	w8, #0xfffffff9            	// #-7
    239c:	b	2298 <BZ2_bzRead+0x74>
    23a0:	cbz	x21, 23a8 <BZ2_bzRead+0x184>
    23a4:	str	wzr, [x21]
    23a8:	mov	w20, wzr
    23ac:	str	wzr, [x19, #5096]
    23b0:	b	229c <BZ2_bzRead+0x78>
    23b4:	cbz	x21, 23c0 <BZ2_bzRead+0x19c>
    23b8:	mov	w8, #0xfffffffa            	// #-6
    23bc:	str	w8, [x21]
    23c0:	mov	w20, wzr
    23c4:	mov	w8, #0xfffffffa            	// #-6
    23c8:	b	2298 <BZ2_bzRead+0x74>
    23cc:	cbz	x21, 23d4 <BZ2_bzRead+0x1b0>
    23d0:	str	w0, [x21]
    23d4:	mov	w20, wzr
    23d8:	str	w0, [x19, #5096]
    23dc:	b	229c <BZ2_bzRead+0x78>
    23e0:	cbz	x21, 23e8 <BZ2_bzRead+0x1c4>
    23e4:	str	wzr, [x21]
    23e8:	str	wzr, [x19, #5096]
    23ec:	b	229c <BZ2_bzRead+0x78>
    23f0:	cbz	x21, 23fc <BZ2_bzRead+0x1d8>
    23f4:	mov	w8, #0x4                   	// #4
    23f8:	str	w8, [x21]
    23fc:	ldr	w8, [x19, #5048]
    2400:	mov	w9, #0x4                   	// #4
    2404:	str	w9, [x19, #5096]
    2408:	sub	w20, w20, w8
    240c:	b	229c <BZ2_bzRead+0x78>

0000000000002410 <BZ2_bzReadGetUnused>:
    2410:	cbz	x1, 2448 <BZ2_bzReadGetUnused+0x38>
    2414:	ldr	w8, [x1, #5096]
    2418:	cmp	w8, #0x4
    241c:	b.ne	2458 <BZ2_bzReadGetUnused+0x48>  // b.any
    2420:	cbz	x2, 2470 <BZ2_bzReadGetUnused+0x60>
    2424:	cbz	x3, 2470 <BZ2_bzReadGetUnused+0x60>
    2428:	cbz	x0, 2430 <BZ2_bzReadGetUnused+0x20>
    242c:	str	wzr, [x0]
    2430:	ldr	w8, [x1, #5024]
    2434:	str	wzr, [x1, #5096]
    2438:	str	w8, [x3]
    243c:	ldr	x8, [x1, #5016]
    2440:	str	x8, [x2]
    2444:	ret
    2448:	cbz	x0, 2444 <BZ2_bzReadGetUnused+0x34>
    244c:	mov	w8, #0xfffffffe            	// #-2
    2450:	str	w8, [x0]
    2454:	ret
    2458:	cbz	x0, 2464 <BZ2_bzReadGetUnused+0x54>
    245c:	mov	w8, #0xffffffff            	// #-1
    2460:	str	w8, [x0]
    2464:	mov	w8, #0xffffffff            	// #-1
    2468:	str	w8, [x1, #5096]
    246c:	ret
    2470:	cbz	x0, 247c <BZ2_bzReadGetUnused+0x6c>
    2474:	mov	w8, #0xfffffffe            	// #-2
    2478:	str	w8, [x0]
    247c:	mov	w8, #0xfffffffe            	// #-2
    2480:	str	w8, [x1, #5096]
    2484:	ret

0000000000002488 <BZ2_bzBuffToBuffCompress>:
    2488:	sub	sp, sp, #0x90
    248c:	stp	x29, x30, [sp, #80]
    2490:	str	x23, [sp, #96]
    2494:	stp	x22, x21, [sp, #112]
    2498:	stp	x20, x19, [sp, #128]
    249c:	add	x29, sp, #0x50
    24a0:	cmp	w6, #0xfa
    24a4:	mov	w19, #0xfffffffe            	// #-2
    24a8:	b.hi	2508 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    24ac:	cmp	w5, #0x4
    24b0:	b.hi	2508 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    24b4:	mov	x23, x0
    24b8:	cbz	x0, 2508 <BZ2_bzBuffToBuffCompress+0x80>
    24bc:	mov	x20, x1
    24c0:	cbz	x1, 2508 <BZ2_bzBuffToBuffCompress+0x80>
    24c4:	mov	x22, x2
    24c8:	cbz	x2, 2508 <BZ2_bzBuffToBuffCompress+0x80>
    24cc:	sub	w8, w4, #0x1
    24d0:	cmp	w8, #0x8
    24d4:	b.hi	2508 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    24d8:	cmp	w6, #0x0
    24dc:	mov	w8, #0x1e                  	// #30
    24e0:	mov	w21, w3
    24e4:	csel	w3, w8, w6, eq  // eq = none
    24e8:	mov	x0, sp
    24ec:	mov	w1, w4
    24f0:	mov	w2, w5
    24f4:	stp	xzr, xzr, [sp, #56]
    24f8:	str	xzr, [sp, #72]
    24fc:	bl	68 <BZ2_bzCompressInit>
    2500:	mov	w19, w0
    2504:	cbz	w0, 2524 <BZ2_bzBuffToBuffCompress+0x9c>
    2508:	mov	w0, w19
    250c:	ldp	x20, x19, [sp, #128]
    2510:	ldp	x22, x21, [sp, #112]
    2514:	ldr	x23, [sp, #96]
    2518:	ldp	x29, x30, [sp, #80]
    251c:	add	sp, sp, #0x90
    2520:	ret
    2524:	str	x22, [sp]
    2528:	str	x23, [sp, #24]
    252c:	str	w21, [sp, #8]
    2530:	ldr	w8, [x20]
    2534:	ldr	x22, [sp, #48]
    2538:	str	w8, [sp, #32]
    253c:	cbz	x22, 2558 <BZ2_bzBuffToBuffCompress+0xd0>
    2540:	ldr	x8, [x22]
    2544:	mov	x23, sp
    2548:	cmp	x8, x23
    254c:	b.eq	2560 <BZ2_bzBuffToBuffCompress+0xd8>  // b.none
    2550:	mov	w19, #0xfffffffe            	// #-2
    2554:	b	25e8 <BZ2_bzBuffToBuffCompress+0x160>
    2558:	mov	w19, #0xfffffffe            	// #-2
    255c:	b	2508 <BZ2_bzBuffToBuffCompress+0x80>
    2560:	ldr	w8, [x22, #8]
    2564:	cmp	w8, #0x2
    2568:	b.ne	2580 <BZ2_bzBuffToBuffCompress+0xf8>  // b.any
    256c:	mov	w8, #0x4                   	// #4
    2570:	str	w21, [x22, #16]
    2574:	str	w8, [x22, #8]
    2578:	cmp	w8, #0x2
    257c:	b.eq	256c <BZ2_bzBuffToBuffCompress+0xe4>  // b.none
    2580:	cmp	w8, #0x1
    2584:	b.eq	25dc <BZ2_bzBuffToBuffCompress+0x154>  // b.none
    2588:	cmp	w8, #0x3
    258c:	b.eq	25dc <BZ2_bzBuffToBuffCompress+0x154>  // b.none
    2590:	cmp	w8, #0x4
    2594:	b.ne	25e4 <BZ2_bzBuffToBuffCompress+0x15c>  // b.any
    2598:	ldr	w8, [x22, #16]
    259c:	cmp	w8, w21
    25a0:	b.ne	25dc <BZ2_bzBuffToBuffCompress+0x154>  // b.any
    25a4:	mov	x0, sp
    25a8:	bl	4c0 <handle_compress>
    25ac:	tst	w0, #0xff
    25b0:	b.eq	2638 <BZ2_bzBuffToBuffCompress+0x1b0>  // b.none
    25b4:	ldr	w8, [x22, #16]
    25b8:	cbz	w8, 2648 <BZ2_bzBuffToBuffCompress+0x1c0>
    25bc:	ldr	x19, [sp, #48]
    25c0:	cbz	x19, 25d4 <BZ2_bzBuffToBuffCompress+0x14c>
    25c4:	ldr	x8, [x19]
    25c8:	mov	x9, sp
    25cc:	cmp	x8, x9
    25d0:	b.eq	26a4 <BZ2_bzBuffToBuffCompress+0x21c>  // b.none
    25d4:	mov	w19, #0xfffffff8            	// #-8
    25d8:	b	2508 <BZ2_bzBuffToBuffCompress+0x80>
    25dc:	mov	w19, #0xffffffff            	// #-1
    25e0:	b	25e8 <BZ2_bzBuffToBuffCompress+0x160>
    25e4:	mov	w19, wzr
    25e8:	ldr	x8, [x22]
    25ec:	cmp	x8, x23
    25f0:	b.ne	2508 <BZ2_bzBuffToBuffCompress+0x80>  // b.any
    25f4:	ldr	x1, [x22, #24]
    25f8:	cbz	x1, 2604 <BZ2_bzBuffToBuffCompress+0x17c>
    25fc:	ldp	x8, x0, [sp, #64]
    2600:	blr	x8
    2604:	ldr	x1, [x22, #32]
    2608:	cbz	x1, 2614 <BZ2_bzBuffToBuffCompress+0x18c>
    260c:	ldp	x8, x0, [sp, #64]
    2610:	blr	x8
    2614:	ldr	x1, [x22, #40]
    2618:	cbz	x1, 2624 <BZ2_bzBuffToBuffCompress+0x19c>
    261c:	ldp	x8, x0, [sp, #64]
    2620:	blr	x8
    2624:	ldp	x8, x0, [sp, #64]
    2628:	ldr	x1, [sp, #48]
    262c:	blr	x8
    2630:	str	xzr, [sp, #48]
    2634:	b	2508 <BZ2_bzBuffToBuffCompress+0x80>
    2638:	ldr	x22, [sp, #48]
    263c:	mov	w19, #0xffffffff            	// #-1
    2640:	cbnz	x22, 25e8 <BZ2_bzBuffToBuffCompress+0x160>
    2644:	b	2508 <BZ2_bzBuffToBuffCompress+0x80>
    2648:	ldr	w8, [x22, #92]
    264c:	cmp	w8, #0xff
    2650:	b.hi	2660 <BZ2_bzBuffToBuffCompress+0x1d8>  // b.pmore
    2654:	ldr	w8, [x22, #96]
    2658:	cmp	w8, #0x0
    265c:	b.gt	25bc <BZ2_bzBuffToBuffCompress+0x134>
    2660:	ldp	w9, w8, [x22, #116]
    2664:	cmp	w8, w9
    2668:	b.lt	25bc <BZ2_bzBuffToBuffCompress+0x134>  // b.tstop
    266c:	mov	w8, #0x1                   	// #1
    2670:	str	w8, [x22, #8]
    2674:	ldr	w8, [sp, #32]
    2678:	ldr	w9, [x20]
    267c:	sub	w8, w9, w8
    2680:	str	w8, [x20]
    2684:	ldr	x19, [sp, #48]
    2688:	cbz	x19, 2508 <BZ2_bzBuffToBuffCompress+0x80>
    268c:	ldr	x8, [x19]
    2690:	mov	x9, sp
    2694:	cmp	x8, x9
    2698:	b.eq	26ec <BZ2_bzBuffToBuffCompress+0x264>  // b.none
    269c:	mov	w19, wzr
    26a0:	b	2508 <BZ2_bzBuffToBuffCompress+0x80>
    26a4:	ldr	x1, [x19, #24]
    26a8:	cbz	x1, 26b4 <BZ2_bzBuffToBuffCompress+0x22c>
    26ac:	ldp	x8, x0, [sp, #64]
    26b0:	blr	x8
    26b4:	ldr	x1, [x19, #32]
    26b8:	cbz	x1, 26c4 <BZ2_bzBuffToBuffCompress+0x23c>
    26bc:	ldp	x8, x0, [sp, #64]
    26c0:	blr	x8
    26c4:	ldr	x1, [x19, #40]
    26c8:	cbz	x1, 26d4 <BZ2_bzBuffToBuffCompress+0x24c>
    26cc:	ldp	x8, x0, [sp, #64]
    26d0:	blr	x8
    26d4:	ldp	x8, x0, [sp, #64]
    26d8:	ldr	x1, [sp, #48]
    26dc:	blr	x8
    26e0:	str	xzr, [sp, #48]
    26e4:	mov	w19, #0xfffffff8            	// #-8
    26e8:	b	2508 <BZ2_bzBuffToBuffCompress+0x80>
    26ec:	ldr	x1, [x19, #24]
    26f0:	cbz	x1, 26fc <BZ2_bzBuffToBuffCompress+0x274>
    26f4:	ldp	x8, x0, [sp, #64]
    26f8:	blr	x8
    26fc:	ldr	x1, [x19, #32]
    2700:	cbz	x1, 270c <BZ2_bzBuffToBuffCompress+0x284>
    2704:	ldp	x8, x0, [sp, #64]
    2708:	blr	x8
    270c:	ldr	x1, [x19, #40]
    2710:	cbz	x1, 271c <BZ2_bzBuffToBuffCompress+0x294>
    2714:	ldp	x8, x0, [sp, #64]
    2718:	blr	x8
    271c:	ldp	x8, x0, [sp, #64]
    2720:	ldr	x1, [sp, #48]
    2724:	blr	x8
    2728:	mov	w19, wzr
    272c:	b	2630 <BZ2_bzBuffToBuffCompress+0x1a8>

0000000000002730 <BZ2_bzBuffToBuffDecompress>:
    2730:	sub	sp, sp, #0xa0
    2734:	stp	x29, x30, [sp, #80]
    2738:	str	x25, [sp, #96]
    273c:	stp	x24, x23, [sp, #112]
    2740:	stp	x22, x21, [sp, #128]
    2744:	stp	x20, x19, [sp, #144]
    2748:	add	x29, sp, #0x50
    274c:	mov	w19, #0xfffffffe            	// #-2
    2750:	cbz	x0, 2954 <BZ2_bzBuffToBuffDecompress+0x224>
    2754:	mov	x20, x1
    2758:	cbz	x1, 2954 <BZ2_bzBuffToBuffDecompress+0x224>
    275c:	mov	x23, x2
    2760:	cbz	x2, 2954 <BZ2_bzBuffToBuffDecompress+0x224>
    2764:	mov	w25, w4
    2768:	cmp	w4, #0x1
    276c:	mov	w19, #0xfffffffe            	// #-2
    2770:	b.hi	2954 <BZ2_bzBuffToBuffDecompress+0x224>  // b.pmore
    2774:	mov	w22, w5
    2778:	cmp	w5, #0x4
    277c:	b.hi	2954 <BZ2_bzBuffToBuffDecompress+0x224>  // b.pmore
    2780:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
    2784:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    2788:	mov	x24, x0
    278c:	add	x8, x8, #0x0
    2790:	add	x9, x9, #0x0
    2794:	mov	w0, #0xfa90                	// #64144
    2798:	mov	w21, w3
    279c:	str	x8, [sp, #56]
    27a0:	stp	x9, xzr, [sp, #64]
    27a4:	bl	0 <malloc>
    27a8:	cbz	x0, 2844 <BZ2_bzBuffToBuffDecompress+0x114>
    27ac:	mov	x8, sp
    27b0:	mov	w9, #0xa                   	// #10
    27b4:	movi	v0.2d, #0x0
    27b8:	str	x0, [sp, #48]
    27bc:	strb	w25, [x0, #44]
    27c0:	str	wzr, [x0, #3188]
    27c4:	str	xzr, [x0, #3152]
    27c8:	str	xzr, [x0, #3168]
    27cc:	str	xzr, [x0, #3160]
    27d0:	stp	wzr, w22, [x0, #48]
    27d4:	str	x23, [sp]
    27d8:	str	x24, [sp, #24]
    27dc:	str	x8, [x0]
    27e0:	str	w9, [x0, #8]
    27e4:	str	d0, [x0, #32]
    27e8:	stur	d0, [sp, #12]
    27ec:	stur	d0, [sp, #36]
    27f0:	str	w21, [sp, #8]
    27f4:	ldr	w8, [x20]
    27f8:	mov	x0, sp
    27fc:	str	w8, [sp, #32]
    2800:	bl	aa0 <BZ2_bzDecompress>
    2804:	cbz	w0, 284c <BZ2_bzBuffToBuffDecompress+0x11c>
    2808:	mov	w19, w0
    280c:	cmp	w0, #0x4
    2810:	b.ne	28b8 <BZ2_bzBuffToBuffDecompress+0x188>  // b.any
    2814:	ldr	w8, [sp, #32]
    2818:	ldr	w9, [x20]
    281c:	sub	w8, w9, w8
    2820:	str	w8, [x20]
    2824:	ldr	x19, [sp, #48]
    2828:	cbz	x19, 2954 <BZ2_bzBuffToBuffDecompress+0x224>
    282c:	ldr	x8, [x19]
    2830:	mov	x9, sp
    2834:	cmp	x8, x9
    2838:	b.eq	2910 <BZ2_bzBuffToBuffDecompress+0x1e0>  // b.none
    283c:	mov	w19, wzr
    2840:	b	2954 <BZ2_bzBuffToBuffDecompress+0x224>
    2844:	mov	w19, #0xfffffffd            	// #-3
    2848:	b	2954 <BZ2_bzBuffToBuffDecompress+0x224>
    284c:	ldr	x20, [sp, #48]
    2850:	ldr	w19, [sp, #32]
    2854:	cbz	x20, 28a8 <BZ2_bzBuffToBuffDecompress+0x178>
    2858:	ldr	x8, [x20]
    285c:	mov	x9, sp
    2860:	cmp	x8, x9
    2864:	b.ne	28a8 <BZ2_bzBuffToBuffDecompress+0x178>  // b.any
    2868:	ldr	x1, [x20, #3152]
    286c:	cbz	x1, 2878 <BZ2_bzBuffToBuffDecompress+0x148>
    2870:	ldp	x8, x0, [sp, #64]
    2874:	blr	x8
    2878:	ldr	x1, [x20, #3160]
    287c:	cbz	x1, 2888 <BZ2_bzBuffToBuffDecompress+0x158>
    2880:	ldp	x8, x0, [sp, #64]
    2884:	blr	x8
    2888:	ldr	x1, [x20, #3168]
    288c:	cbz	x1, 2898 <BZ2_bzBuffToBuffDecompress+0x168>
    2890:	ldp	x8, x0, [sp, #64]
    2894:	blr	x8
    2898:	ldp	x8, x0, [sp, #64]
    289c:	ldr	x1, [sp, #48]
    28a0:	blr	x8
    28a4:	str	xzr, [sp, #48]
    28a8:	cmp	w19, #0x0
    28ac:	mov	w8, #0xfffffff8            	// #-8
    28b0:	cinc	w19, w8, ne  // ne = any
    28b4:	b	2954 <BZ2_bzBuffToBuffDecompress+0x224>
    28b8:	ldr	x20, [sp, #48]
    28bc:	cbz	x20, 2954 <BZ2_bzBuffToBuffDecompress+0x224>
    28c0:	ldr	x8, [x20]
    28c4:	mov	x9, sp
    28c8:	cmp	x8, x9
    28cc:	b.ne	2954 <BZ2_bzBuffToBuffDecompress+0x224>  // b.any
    28d0:	ldr	x1, [x20, #3152]
    28d4:	cbz	x1, 28e0 <BZ2_bzBuffToBuffDecompress+0x1b0>
    28d8:	ldp	x8, x0, [sp, #64]
    28dc:	blr	x8
    28e0:	ldr	x1, [x20, #3160]
    28e4:	cbz	x1, 28f0 <BZ2_bzBuffToBuffDecompress+0x1c0>
    28e8:	ldp	x8, x0, [sp, #64]
    28ec:	blr	x8
    28f0:	ldr	x1, [x20, #3168]
    28f4:	cbz	x1, 2900 <BZ2_bzBuffToBuffDecompress+0x1d0>
    28f8:	ldp	x8, x0, [sp, #64]
    28fc:	blr	x8
    2900:	ldp	x8, x0, [sp, #64]
    2904:	ldr	x1, [sp, #48]
    2908:	blr	x8
    290c:	b	2950 <BZ2_bzBuffToBuffDecompress+0x220>
    2910:	ldr	x1, [x19, #3152]
    2914:	cbz	x1, 2920 <BZ2_bzBuffToBuffDecompress+0x1f0>
    2918:	ldp	x8, x0, [sp, #64]
    291c:	blr	x8
    2920:	ldr	x1, [x19, #3160]
    2924:	cbz	x1, 2930 <BZ2_bzBuffToBuffDecompress+0x200>
    2928:	ldp	x8, x0, [sp, #64]
    292c:	blr	x8
    2930:	ldr	x1, [x19, #3168]
    2934:	cbz	x1, 2940 <BZ2_bzBuffToBuffDecompress+0x210>
    2938:	ldp	x8, x0, [sp, #64]
    293c:	blr	x8
    2940:	ldp	x8, x0, [sp, #64]
    2944:	ldr	x1, [sp, #48]
    2948:	blr	x8
    294c:	mov	w19, wzr
    2950:	str	xzr, [sp, #48]
    2954:	mov	w0, w19
    2958:	ldp	x20, x19, [sp, #144]
    295c:	ldp	x22, x21, [sp, #128]
    2960:	ldp	x24, x23, [sp, #112]
    2964:	ldr	x25, [sp, #96]
    2968:	ldp	x29, x30, [sp, #80]
    296c:	add	sp, sp, #0xa0
    2970:	ret

0000000000002974 <BZ2_bzopen>:
    2974:	mov	x2, x1
    2978:	mov	w1, #0xffffffff            	// #-1
    297c:	mov	w3, wzr
    2980:	b	2984 <bzopen_or_bzdopen>

0000000000002984 <bzopen_or_bzdopen>:
    2984:	stp	x29, x30, [sp, #-96]!
    2988:	str	x28, [sp, #16]
    298c:	stp	x26, x25, [sp, #32]
    2990:	stp	x24, x23, [sp, #48]
    2994:	stp	x22, x21, [sp, #64]
    2998:	stp	x20, x19, [sp, #80]
    299c:	mov	x29, sp
    29a0:	sub	sp, sp, #0x1, lsl #12
    29a4:	sub	sp, sp, #0x3a0
    29a8:	strh	wzr, [sp, #16]
    29ac:	str	xzr, [sp, #8]
    29b0:	cbz	x2, 2b60 <bzopen_or_bzdopen+0x1dc>
    29b4:	mov	w22, w3
    29b8:	mov	x23, x2
    29bc:	mov	w21, w1
    29c0:	mov	x20, x0
    29c4:	mov	w25, wzr
    29c8:	mov	w19, wzr
    29cc:	mov	w24, #0x9                   	// #9
    29d0:	b	29dc <bzopen_or_bzdopen+0x58>
    29d4:	mov	w19, #0x1                   	// #1
    29d8:	add	x23, x23, #0x1
    29dc:	ldrb	w26, [x23]
    29e0:	cmp	w26, #0x72
    29e4:	b.le	2a04 <bzopen_or_bzdopen+0x80>
    29e8:	cmp	w26, #0x73
    29ec:	b.eq	29d4 <bzopen_or_bzdopen+0x50>  // b.none
    29f0:	cmp	w26, #0x77
    29f4:	b.ne	2a18 <bzopen_or_bzdopen+0x94>  // b.any
    29f8:	mov	w25, #0x1                   	// #1
    29fc:	add	x23, x23, #0x1
    2a00:	b	29dc <bzopen_or_bzdopen+0x58>
    2a04:	b.ne	2a14 <bzopen_or_bzdopen+0x90>  // b.any
    2a08:	mov	w25, wzr
    2a0c:	add	x23, x23, #0x1
    2a10:	b	29dc <bzopen_or_bzdopen+0x58>
    2a14:	cbz	w26, 2a38 <bzopen_or_bzdopen+0xb4>
    2a18:	bl	0 <__ctype_b_loc>
    2a1c:	ldr	x8, [x0]
    2a20:	sub	w9, w26, #0x30
    2a24:	add	x23, x23, #0x1
    2a28:	ldrh	w8, [x8, w26, uxtw #1]
    2a2c:	tst	w8, #0x800
    2a30:	csel	w24, w24, w9, eq  // eq = none
    2a34:	b	29dc <bzopen_or_bzdopen+0x58>
    2a38:	add	x0, sp, #0x8
    2a3c:	add	x23, sp, #0x8
    2a40:	bl	0 <strlen>
    2a44:	cmp	w25, #0x0
    2a48:	mov	w8, #0x72                  	// #114
    2a4c:	mov	w9, #0x77                  	// #119
    2a50:	csel	w8, w9, w8, ne  // ne = any
    2a54:	strh	w8, [x23, x0]
    2a58:	add	x0, sp, #0x8
    2a5c:	bl	0 <strlen>
    2a60:	mov	w8, #0x62                  	// #98
    2a64:	strh	w8, [x23, x0]
    2a68:	cbz	w22, 2a84 <bzopen_or_bzdopen+0x100>
    2a6c:	add	x1, sp, #0x8
    2a70:	mov	w0, w21
    2a74:	bl	0 <fdopen>
    2a78:	mov	x20, x0
    2a7c:	cbnz	x20, 2ac8 <bzopen_or_bzdopen+0x144>
    2a80:	b	2b60 <bzopen_or_bzdopen+0x1dc>
    2a84:	cbz	x20, 2aa8 <bzopen_or_bzdopen+0x124>
    2a88:	ldrb	w8, [x20]
    2a8c:	cbz	w8, 2aa8 <bzopen_or_bzdopen+0x124>
    2a90:	add	x1, sp, #0x8
    2a94:	mov	x0, x20
    2a98:	bl	0 <fopen64>
    2a9c:	mov	x20, x0
    2aa0:	cbnz	x20, 2ac8 <bzopen_or_bzdopen+0x144>
    2aa4:	b	2b60 <bzopen_or_bzdopen+0x1dc>
    2aa8:	adrp	x8, 0 <stdout>
    2aac:	adrp	x9, 0 <stdin>
    2ab0:	add	x8, x8, #0x0
    2ab4:	add	x9, x9, #0x0
    2ab8:	cmp	w25, #0x0
    2abc:	csel	x8, x8, x9, ne  // ne = any
    2ac0:	ldr	x20, [x8]
    2ac4:	cbz	x20, 2b60 <bzopen_or_bzdopen+0x1dc>
    2ac8:	cbz	w25, 2af8 <bzopen_or_bzdopen+0x174>
    2acc:	cmp	w24, #0x1
    2ad0:	csinc	w8, w24, wzr, gt
    2ad4:	cmp	w8, #0x9
    2ad8:	mov	w9, #0x9                   	// #9
    2adc:	csel	w21, w8, w9, lt  // lt = tstop
    2ae0:	sub	w8, w21, #0x1
    2ae4:	cmp	w8, #0x9
    2ae8:	str	wzr, [x29, #28]
    2aec:	b.cc	2b20 <bzopen_or_bzdopen+0x19c>  // b.lo, b.ul, b.last
    2af0:	mov	w8, #0xfffffffe            	// #-2
    2af4:	b	2b30 <bzopen_or_bzdopen+0x1ac>
    2af8:	add	x0, x29, #0x1c
    2afc:	add	x4, sp, #0x18
    2b00:	mov	x1, x20
    2b04:	mov	w2, wzr
    2b08:	mov	w3, w19
    2b0c:	mov	w5, wzr
    2b10:	bl	1f44 <BZ2_bzReadOpen>
    2b14:	mov	x19, x0
    2b18:	cbnz	x0, 2b64 <bzopen_or_bzdopen+0x1e0>
    2b1c:	b	2b34 <bzopen_or_bzdopen+0x1b0>
    2b20:	mov	x0, x20
    2b24:	bl	0 <ferror>
    2b28:	cbz	w0, 2b8c <bzopen_or_bzdopen+0x208>
    2b2c:	mov	w8, #0xfffffffa            	// #-6
    2b30:	str	w8, [x29, #28]
    2b34:	adrp	x8, 0 <stdin>
    2b38:	ldr	x8, [x8]
    2b3c:	mov	x19, xzr
    2b40:	cmp	x20, x8
    2b44:	b.eq	2b64 <bzopen_or_bzdopen+0x1e0>  // b.none
    2b48:	adrp	x8, 0 <stdout>
    2b4c:	ldr	x8, [x8]
    2b50:	cmp	x20, x8
    2b54:	b.eq	2b64 <bzopen_or_bzdopen+0x1e0>  // b.none
    2b58:	mov	x0, x20
    2b5c:	bl	0 <fclose>
    2b60:	mov	x19, xzr
    2b64:	mov	x0, x19
    2b68:	add	sp, sp, #0x1, lsl #12
    2b6c:	add	sp, sp, #0x3a0
    2b70:	ldp	x20, x19, [sp, #80]
    2b74:	ldp	x22, x21, [sp, #64]
    2b78:	ldp	x24, x23, [sp, #48]
    2b7c:	ldp	x26, x25, [sp, #32]
    2b80:	ldr	x28, [sp, #16]
    2b84:	ldp	x29, x30, [sp], #96
    2b88:	ret
    2b8c:	mov	w0, #0x13f0                	// #5104
    2b90:	bl	0 <malloc>
    2b94:	cbz	x0, 2bf8 <bzopen_or_bzdopen+0x274>
    2b98:	mov	w8, #0x1394                	// #5012
    2b9c:	mov	w9, #0x1398                	// #5016
    2ba0:	mov	x19, x0
    2ba4:	str	wzr, [x0, #5096]
    2ba8:	mov	w22, #0x1                   	// #1
    2bac:	movi	v0.2d, #0x0
    2bb0:	add	x23, x0, x8
    2bb4:	add	x0, x0, x9
    2bb8:	mov	w3, #0x1e                  	// #30
    2bbc:	mov	w1, w21
    2bc0:	mov	w2, wzr
    2bc4:	str	wzr, [x29, #28]
    2bc8:	strb	wzr, [x23, #88]
    2bcc:	str	wzr, [x19, #5008]
    2bd0:	str	x20, [x19]
    2bd4:	strb	w22, [x23]
    2bd8:	str	xzr, [x19, #5088]
    2bdc:	str	q0, [x19, #5072]
    2be0:	bl	68 <BZ2_bzCompressInit>
    2be4:	cbz	w0, 2c00 <bzopen_or_bzdopen+0x27c>
    2be8:	str	w0, [x29, #28]
    2bec:	mov	x0, x19
    2bf0:	bl	0 <free>
    2bf4:	b	2b34 <bzopen_or_bzdopen+0x1b0>
    2bf8:	mov	w8, #0xfffffffd            	// #-3
    2bfc:	b	2b30 <bzopen_or_bzdopen+0x1ac>
    2c00:	str	wzr, [x19, #5024]
    2c04:	strb	w22, [x23, #88]
    2c08:	b	2b64 <bzopen_or_bzdopen+0x1e0>

0000000000002c0c <BZ2_bzdopen>:
    2c0c:	mov	x2, x1
    2c10:	mov	w3, #0x1                   	// #1
    2c14:	mov	w1, w0
    2c18:	mov	x0, xzr
    2c1c:	b	2984 <bzopen_or_bzdopen>

0000000000002c20 <BZ2_bzread>:
    2c20:	sub	sp, sp, #0x20
    2c24:	stp	x29, x30, [sp, #16]
    2c28:	add	x29, sp, #0x10
    2c2c:	ldr	w9, [x0, #5096]
    2c30:	cmp	w9, #0x4
    2c34:	b.ne	2c48 <BZ2_bzread+0x28>  // b.any
    2c38:	mov	w0, wzr
    2c3c:	ldp	x29, x30, [sp, #16]
    2c40:	add	sp, sp, #0x20
    2c44:	ret
    2c48:	mov	x8, x0
    2c4c:	mov	w3, w2
    2c50:	mov	x2, x1
    2c54:	sub	x0, x29, #0x4
    2c58:	mov	x1, x8
    2c5c:	bl	2224 <BZ2_bzRead>
    2c60:	ldur	w8, [x29, #-4]
    2c64:	tst	w8, #0xfffffffb
    2c68:	csinv	w0, w0, wzr, eq  // eq = none
    2c6c:	ldp	x29, x30, [sp, #16]
    2c70:	add	sp, sp, #0x20
    2c74:	ret

0000000000002c78 <BZ2_bzwrite>:
    2c78:	stp	x29, x30, [sp, #-32]!
    2c7c:	str	x19, [sp, #16]
    2c80:	mov	x29, sp
    2c84:	mov	w19, w2
    2c88:	mov	x2, x1
    2c8c:	mov	x1, x0
    2c90:	add	x0, x29, #0x1c
    2c94:	mov	w3, w19
    2c98:	bl	1a8c <BZ2_bzWrite>
    2c9c:	ldr	w8, [x29, #28]
    2ca0:	cmp	w8, #0x0
    2ca4:	csinv	w0, w19, wzr, eq  // eq = none
    2ca8:	ldr	x19, [sp, #16]
    2cac:	ldp	x29, x30, [sp], #32
    2cb0:	ret

0000000000002cb4 <BZ2_bzflush>:
    2cb4:	mov	w0, wzr
    2cb8:	ret

0000000000002cbc <BZ2_bzclose>:
    2cbc:	stp	x29, x30, [sp, #-48]!
    2cc0:	str	x21, [sp, #16]
    2cc4:	stp	x20, x19, [sp, #32]
    2cc8:	mov	x29, sp
    2ccc:	cbz	x0, 2e08 <BZ2_bzclose+0x14c>
    2cd0:	mov	w8, #0x1394                	// #5012
    2cd4:	add	x21, x0, x8
    2cd8:	ldrb	w8, [x21]
    2cdc:	ldr	x19, [x0]
    2ce0:	mov	x20, x0
    2ce4:	cbz	w8, 2d30 <BZ2_bzclose+0x74>
    2ce8:	add	x0, x29, #0x1c
    2cec:	mov	x1, x20
    2cf0:	mov	w2, wzr
    2cf4:	mov	x3, xzr
    2cf8:	mov	x4, xzr
    2cfc:	mov	x5, xzr
    2d00:	mov	x6, xzr
    2d04:	bl	1c2c <BZ2_bzWriteClose64>
    2d08:	ldr	w8, [x29, #28]
    2d0c:	cbz	w8, 2de0 <BZ2_bzclose+0x124>
    2d10:	ldrb	w8, [x21]
    2d14:	cbz	w8, 2dac <BZ2_bzclose+0xf0>
    2d18:	ldr	x0, [x20]
    2d1c:	bl	0 <ferror>
    2d20:	cbz	w0, 2db8 <BZ2_bzclose+0xfc>
    2d24:	mov	w8, #0xfffffffa            	// #-6
    2d28:	str	w8, [x20, #5096]
    2d2c:	b	2de0 <BZ2_bzclose+0x124>
    2d30:	str	wzr, [x29, #28]
    2d34:	str	wzr, [x20, #5096]
    2d38:	ldrb	w8, [x21, #88]
    2d3c:	cbz	w8, 2dd8 <BZ2_bzclose+0x11c>
    2d40:	ldr	x21, [x20, #5064]
    2d44:	cbz	x21, 2dd8 <BZ2_bzclose+0x11c>
    2d48:	ldr	x8, [x21]
    2d4c:	mov	w9, #0x1398                	// #5016
    2d50:	add	x9, x20, x9
    2d54:	cmp	x8, x9
    2d58:	b.ne	2dd8 <BZ2_bzclose+0x11c>  // b.any
    2d5c:	ldr	x1, [x21, #3152]
    2d60:	cbz	x1, 2d70 <BZ2_bzclose+0xb4>
    2d64:	ldr	x8, [x20, #5080]
    2d68:	ldr	x0, [x20, #5088]
    2d6c:	blr	x8
    2d70:	ldr	x1, [x21, #3160]
    2d74:	cbz	x1, 2d84 <BZ2_bzclose+0xc8>
    2d78:	ldr	x8, [x20, #5080]
    2d7c:	ldr	x0, [x20, #5088]
    2d80:	blr	x8
    2d84:	ldr	x1, [x21, #3168]
    2d88:	cbz	x1, 2d98 <BZ2_bzclose+0xdc>
    2d8c:	ldr	x8, [x20, #5080]
    2d90:	ldr	x0, [x20, #5088]
    2d94:	blr	x8
    2d98:	ldr	x8, [x20, #5080]
    2d9c:	ldr	x0, [x20, #5088]
    2da0:	ldr	x1, [x20, #5064]
    2da4:	blr	x8
    2da8:	b	2dd8 <BZ2_bzclose+0x11c>
    2dac:	mov	w8, #0xffffffff            	// #-1
    2db0:	str	w8, [x20, #5096]
    2db4:	b	2de0 <BZ2_bzclose+0x124>
    2db8:	ldr	x21, [x20, #5064]
    2dbc:	str	wzr, [x20, #5096]
    2dc0:	cbz	x21, 2dd8 <BZ2_bzclose+0x11c>
    2dc4:	ldr	x8, [x21]
    2dc8:	mov	w9, #0x1398                	// #5016
    2dcc:	add	x9, x20, x9
    2dd0:	cmp	x8, x9
    2dd4:	b.eq	2e18 <BZ2_bzclose+0x15c>  // b.none
    2dd8:	mov	x0, x20
    2ddc:	bl	0 <free>
    2de0:	adrp	x8, 0 <stdin>
    2de4:	ldr	x8, [x8]
    2de8:	cmp	x19, x8
    2dec:	b.eq	2e08 <BZ2_bzclose+0x14c>  // b.none
    2df0:	adrp	x8, 0 <stdout>
    2df4:	ldr	x8, [x8]
    2df8:	cmp	x19, x8
    2dfc:	b.eq	2e08 <BZ2_bzclose+0x14c>  // b.none
    2e00:	mov	x0, x19
    2e04:	bl	0 <fclose>
    2e08:	ldp	x20, x19, [sp, #32]
    2e0c:	ldr	x21, [sp, #16]
    2e10:	ldp	x29, x30, [sp], #48
    2e14:	ret
    2e18:	ldr	x1, [x21, #24]
    2e1c:	cbz	x1, 2e2c <BZ2_bzclose+0x170>
    2e20:	ldr	x8, [x20, #5080]
    2e24:	ldr	x0, [x20, #5088]
    2e28:	blr	x8
    2e2c:	ldr	x1, [x21, #32]
    2e30:	cbz	x1, 2e40 <BZ2_bzclose+0x184>
    2e34:	ldr	x8, [x20, #5080]
    2e38:	ldr	x0, [x20, #5088]
    2e3c:	blr	x8
    2e40:	ldr	x1, [x21, #40]
    2e44:	cbnz	x1, 2d8c <BZ2_bzclose+0xd0>
    2e48:	b	2d98 <BZ2_bzclose+0xdc>

0000000000002e4c <BZ2_bzerror>:
    2e4c:	ldr	w8, [x0, #5096]
    2e50:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    2e54:	add	x9, x9, #0x0
    2e58:	and	w8, w8, w8, asr #31
    2e5c:	sub	x9, x9, w8, sxtw #3
    2e60:	ldr	x0, [x9]
    2e64:	str	w8, [x1]
    2e68:	ret

0000000000002e6c <add_pair_to_block>:
    2e6c:	ldp	w8, w9, [x0, #92]
    2e70:	sxtw	x9, w9
    2e74:	cmp	w9, #0x1
    2e78:	b.lt	2eac <add_pair_to_block+0x40>  // b.tstop
    2e7c:	ldr	w11, [x0, #648]
    2e80:	adrp	x13, 0 <BZ2_crc32Table>
    2e84:	mov	w10, wzr
    2e88:	and	w12, w8, #0xff
    2e8c:	add	x13, x13, #0x0
    2e90:	eor	w14, w12, w11, lsr #24
    2e94:	ldr	w14, [x13, w14, uxtw #2]
    2e98:	add	w10, w10, #0x1
    2e9c:	cmp	w10, w9
    2ea0:	eor	w11, w14, w11, lsl #8
    2ea4:	str	w11, [x0, #648]
    2ea8:	b.lt	2e90 <add_pair_to_block+0x24>  // b.tstop
    2eac:	add	x10, x0, x8
    2eb0:	mov	w11, #0x1                   	// #1
    2eb4:	cmp	w9, #0x3
    2eb8:	strb	w11, [x10, #128]
    2ebc:	b.eq	2edc <add_pair_to_block+0x70>  // b.none
    2ec0:	cmp	w9, #0x2
    2ec4:	b.eq	2f18 <add_pair_to_block+0xac>  // b.none
    2ec8:	cmp	w9, #0x1
    2ecc:	b.ne	2f40 <add_pair_to_block+0xd4>  // b.any
    2ed0:	ldr	w10, [x0, #108]!
    2ed4:	sub	x9, x0, #0x2c
    2ed8:	b	2fac <add_pair_to_block+0x140>
    2edc:	ldr	x9, [x0, #64]!
    2ee0:	mov	x11, x0
    2ee4:	ldrsw	x10, [x11, #44]!
    2ee8:	strb	w8, [x9, x10]
    2eec:	ldrsw	x9, [x11]
    2ef0:	add	x9, x9, #0x1
    2ef4:	str	w9, [x11]
    2ef8:	ldr	x10, [x0]
    2efc:	strb	w8, [x10, x9]
    2f00:	ldr	w9, [x11]
    2f04:	add	w10, w9, #0x1
    2f08:	str	w10, [x11]
    2f0c:	mov	x9, x0
    2f10:	mov	x0, x11
    2f14:	b	2fac <add_pair_to_block+0x140>
    2f18:	ldr	x9, [x0, #64]!
    2f1c:	mov	x11, x0
    2f20:	ldrsw	x10, [x11, #44]!
    2f24:	strb	w8, [x9, x10]
    2f28:	ldr	w10, [x11]
    2f2c:	mov	x9, x0
    2f30:	mov	x0, x11
    2f34:	add	w10, w10, #0x1
    2f38:	str	w10, [x11]
    2f3c:	b	2fac <add_pair_to_block+0x140>
    2f40:	add	x9, x9, x0
    2f44:	mov	w10, #0x1                   	// #1
    2f48:	strb	w10, [x9, #124]
    2f4c:	ldrsw	x10, [x0, #108]!
    2f50:	mov	x9, x0
    2f54:	ldr	x11, [x9, #-44]!
    2f58:	strb	w8, [x11, x10]
    2f5c:	ldrsw	x10, [x0]
    2f60:	add	x10, x10, #0x1
    2f64:	str	w10, [x0]
    2f68:	ldr	x11, [x9]
    2f6c:	strb	w8, [x11, x10]
    2f70:	ldrsw	x10, [x0]
    2f74:	add	x10, x10, #0x1
    2f78:	str	w10, [x0]
    2f7c:	ldr	x11, [x9]
    2f80:	strb	w8, [x11, x10]
    2f84:	ldrsw	x10, [x0]
    2f88:	add	x10, x10, #0x1
    2f8c:	str	w10, [x0]
    2f90:	ldr	x11, [x9]
    2f94:	strb	w8, [x11, x10]
    2f98:	ldr	w8, [x0]
    2f9c:	ldurb	w11, [x0, #-12]
    2fa0:	add	w10, w8, #0x1
    2fa4:	sub	w8, w11, #0x4
    2fa8:	str	w10, [x0]
    2fac:	ldr	x9, [x9]
    2fb0:	strb	w8, [x9, w10, sxtw]
    2fb4:	ldr	w8, [x0]
    2fb8:	add	w8, w8, #0x1
    2fbc:	str	w8, [x0]
    2fc0:	ret
