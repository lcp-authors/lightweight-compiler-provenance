In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libe2p.a_gcc_-O3:

feature.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_feature2string>:
   0:	adrp	x2, 0 <e2p_feature2string>
   4:	add	x2, x2, #0x0
   8:	mov	w4, w0
   c:	ldr	x0, [x2, #8]
  10:	cbnz	x0, 24 <e2p_feature2string+0x24>
  14:	b	40 <e2p_feature2string+0x40>
  18:	ldr	x0, [x2, #24]
  1c:	add	x2, x2, #0x10
  20:	cbz	x0, 40 <e2p_feature2string+0x40>
  24:	ldr	w3, [x2]
  28:	cmp	w3, w4
  2c:	b.ne	18 <e2p_feature2string+0x18>  // b.any
  30:	ldr	w3, [x2, #4]
  34:	cmp	w3, w1
  38:	b.ne	18 <e2p_feature2string+0x18>  // b.any
  3c:	ret
  40:	stp	x29, x30, [sp, #-32]!
  44:	cmp	w4, #0x2
  48:	mov	w2, #0x3f                  	// #63
  4c:	mov	x29, sp
  50:	str	x19, [sp, #16]
  54:	b.ls	9c <e2p_feature2string+0x9c>  // b.plast
  58:	cmp	wzr, w1, lsr #1
  5c:	lsr	w0, w1, #1
  60:	mov	w3, #0x0                   	// #0
  64:	b.eq	74 <e2p_feature2string+0x74>  // b.none
  68:	add	w3, w3, #0x1
  6c:	lsr	w0, w0, #1
  70:	cbnz	w0, 68 <e2p_feature2string+0x68>
  74:	adrp	x0, 0 <e2p_feature2string>
  78:	add	x19, x0, #0x0
  7c:	mov	x0, x19
  80:	adrp	x1, 0 <e2p_feature2string>
  84:	add	x1, x1, #0x0
  88:	bl	0 <sprintf>
  8c:	mov	x0, x19
  90:	ldr	x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret
  9c:	adrp	x0, 0 <e2p_feature2string>
  a0:	add	x0, x0, #0x0
  a4:	ldrb	w2, [x0, w4, uxtw]
  a8:	b	58 <e2p_feature2string+0x58>
  ac:	nop

00000000000000b0 <e2p_string2feature>:
  b0:	stp	x29, x30, [sp, #-80]!
  b4:	mov	x29, sp
  b8:	str	x23, [sp, #48]
  bc:	adrp	x23, 0 <e2p_feature2string>
  c0:	add	x23, x23, #0x0
  c4:	stp	x21, x22, [sp, #32]
  c8:	mov	x21, x1
  cc:	stp	x19, x20, [sp, #16]
  d0:	mov	x22, x2
  d4:	mov	x20, x0
  d8:	ldr	x1, [x23, #8]
  dc:	cbnz	x1, f0 <e2p_string2feature+0x40>
  e0:	b	128 <e2p_string2feature+0x78>
  e4:	ldr	x1, [x23, #24]
  e8:	add	x23, x23, #0x10
  ec:	cbz	x1, 128 <e2p_string2feature+0x78>
  f0:	mov	x0, x20
  f4:	bl	0 <strcasecmp>
  f8:	mov	w19, w0
  fc:	cbnz	w0, e4 <e2p_string2feature+0x34>
 100:	ldr	w0, [x23]
 104:	str	w0, [x21]
 108:	ldr	w0, [x23, #4]
 10c:	str	w0, [x22]
 110:	mov	w0, w19
 114:	ldp	x19, x20, [sp, #16]
 118:	ldp	x21, x22, [sp, #32]
 11c:	ldr	x23, [sp, #48]
 120:	ldp	x29, x30, [sp], #80
 124:	ret
 128:	mov	x0, x20
 12c:	adrp	x1, 0 <e2p_feature2string>
 130:	mov	x2, #0x8                   	// #8
 134:	add	x1, x1, #0x0
 138:	bl	0 <strncasecmp>
 13c:	mov	w19, w0
 140:	cbnz	w0, 178 <e2p_string2feature+0xc8>
 144:	ldrb	w3, [x20, #8]
 148:	sub	w3, w3, #0x43
 14c:	and	w3, w3, #0xff
 150:	cmp	w3, #0x2f
 154:	b.hi	178 <e2p_string2feature+0xc8>  // b.pmore
 158:	mov	x0, #0x1                   	// #1
 15c:	lsl	x3, x0, x3
 160:	tst	x3, #0x800000008000
 164:	b.ne	1d4 <e2p_string2feature+0x124>  // b.any
 168:	tst	x3, #0x4000000040
 16c:	b.ne	1d8 <e2p_string2feature+0x128>  // b.any
 170:	tst	x3, #0x100000001
 174:	b.ne	194 <e2p_string2feature+0xe4>  // b.any
 178:	mov	w19, #0x1                   	// #1
 17c:	mov	w0, w19
 180:	ldp	x19, x20, [sp, #16]
 184:	ldp	x21, x22, [sp, #32]
 188:	ldr	x23, [sp, #48]
 18c:	ldp	x29, x30, [sp], #80
 190:	ret
 194:	str	wzr, [x21]
 198:	ldrb	w0, [x20, #9]
 19c:	cbz	w0, 178 <e2p_string2feature+0xc8>
 1a0:	add	x0, x20, #0x9
 1a4:	add	x1, sp, #0x48
 1a8:	mov	w2, #0xa                   	// #10
 1ac:	bl	0 <strtol>
 1b0:	cmp	w0, #0x1f
 1b4:	b.hi	178 <e2p_string2feature+0xc8>  // b.pmore
 1b8:	ldr	x1, [sp, #72]
 1bc:	ldrb	w1, [x1]
 1c0:	cbnz	w1, 178 <e2p_string2feature+0xc8>
 1c4:	mov	w1, #0x1                   	// #1
 1c8:	lsl	w0, w1, w0
 1cc:	str	w0, [x22]
 1d0:	b	17c <e2p_string2feature+0xcc>
 1d4:	mov	w0, #0x2                   	// #2
 1d8:	str	w0, [x21]
 1dc:	b	198 <e2p_string2feature+0xe8>

00000000000001e0 <e2p_jrnl_feature2string>:
 1e0:	adrp	x2, 0 <e2p_feature2string>
 1e4:	add	x2, x2, #0x0
 1e8:	add	x2, x2, #0x2c0
 1ec:	mov	w4, w0
 1f0:	ldr	x0, [x2, #8]
 1f4:	cbnz	x0, 208 <e2p_jrnl_feature2string+0x28>
 1f8:	b	224 <e2p_jrnl_feature2string+0x44>
 1fc:	ldr	x0, [x2, #24]
 200:	add	x2, x2, #0x10
 204:	cbz	x0, 224 <e2p_jrnl_feature2string+0x44>
 208:	ldr	w3, [x2]
 20c:	cmp	w3, w4
 210:	b.ne	1fc <e2p_jrnl_feature2string+0x1c>  // b.any
 214:	ldr	w3, [x2, #4]
 218:	cmp	w3, w1
 21c:	b.ne	1fc <e2p_jrnl_feature2string+0x1c>  // b.any
 220:	ret
 224:	stp	x29, x30, [sp, #-32]!
 228:	cmp	w4, #0x2
 22c:	mov	w2, #0x3f                  	// #63
 230:	mov	x29, sp
 234:	str	x19, [sp, #16]
 238:	b.ls	288 <e2p_jrnl_feature2string+0xa8>  // b.plast
 23c:	cmp	wzr, w1, lsr #1
 240:	lsr	w0, w1, #1
 244:	mov	w3, #0x0                   	// #0
 248:	b.eq	25c <e2p_jrnl_feature2string+0x7c>  // b.none
 24c:	nop
 250:	add	w3, w3, #0x1
 254:	lsr	w0, w0, #1
 258:	cbnz	w0, 250 <e2p_jrnl_feature2string+0x70>
 25c:	adrp	x0, 0 <e2p_feature2string>
 260:	add	x0, x0, #0x0
 264:	add	x19, x0, #0x20
 268:	adrp	x1, 0 <e2p_feature2string>
 26c:	mov	x0, x19
 270:	add	x1, x1, #0x0
 274:	bl	0 <sprintf>
 278:	mov	x0, x19
 27c:	ldr	x19, [sp, #16]
 280:	ldp	x29, x30, [sp], #32
 284:	ret
 288:	adrp	x0, 0 <e2p_feature2string>
 28c:	add	x0, x0, #0x0
 290:	ldrb	w2, [x0, w4, uxtw]
 294:	b	23c <e2p_jrnl_feature2string+0x5c>

0000000000000298 <e2p_jrnl_string2feature>:
 298:	stp	x29, x30, [sp, #-80]!
 29c:	mov	x29, sp
 2a0:	str	x23, [sp, #48]
 2a4:	adrp	x23, 0 <e2p_feature2string>
 2a8:	add	x23, x23, #0x0
 2ac:	stp	x21, x22, [sp, #32]
 2b0:	add	x23, x23, #0x2c0
 2b4:	mov	x21, x1
 2b8:	stp	x19, x20, [sp, #16]
 2bc:	mov	x22, x2
 2c0:	ldr	x1, [x23, #8]
 2c4:	mov	x20, x0
 2c8:	cbnz	x1, 2dc <e2p_jrnl_string2feature+0x44>
 2cc:	b	314 <e2p_jrnl_string2feature+0x7c>
 2d0:	ldr	x1, [x23, #24]
 2d4:	add	x23, x23, #0x10
 2d8:	cbz	x1, 314 <e2p_jrnl_string2feature+0x7c>
 2dc:	mov	x0, x20
 2e0:	bl	0 <strcasecmp>
 2e4:	mov	w19, w0
 2e8:	cbnz	w0, 2d0 <e2p_jrnl_string2feature+0x38>
 2ec:	ldr	w0, [x23]
 2f0:	str	w0, [x21]
 2f4:	ldr	w0, [x23, #4]
 2f8:	str	w0, [x22]
 2fc:	mov	w0, w19
 300:	ldp	x19, x20, [sp, #16]
 304:	ldp	x21, x22, [sp, #32]
 308:	ldr	x23, [sp, #48]
 30c:	ldp	x29, x30, [sp], #80
 310:	ret
 314:	mov	x0, x20
 318:	adrp	x1, 0 <e2p_feature2string>
 31c:	mov	x2, #0x8                   	// #8
 320:	add	x1, x1, #0x0
 324:	bl	0 <strncasecmp>
 328:	mov	w19, w0
 32c:	cbnz	w0, 380 <e2p_jrnl_string2feature+0xe8>
 330:	ldrb	w3, [x20, #8]
 334:	sub	w3, w3, #0x43
 338:	and	w3, w3, #0xff
 33c:	cmp	w3, #0x2f
 340:	b.hi	380 <e2p_jrnl_string2feature+0xe8>  // b.pmore
 344:	mov	x0, #0x1                   	// #1
 348:	lsl	x3, x0, x3
 34c:	tst	x3, #0x800000008000
 350:	b.ne	39c <e2p_jrnl_string2feature+0x104>  // b.any
 354:	tst	x3, #0x4000000040
 358:	b.ne	3a0 <e2p_jrnl_string2feature+0x108>  // b.any
 35c:	tst	x3, #0x100000001
 360:	b.ne	3e0 <e2p_jrnl_string2feature+0x148>  // b.any
 364:	mov	w19, w0
 368:	mov	w0, w19
 36c:	ldp	x19, x20, [sp, #16]
 370:	ldp	x21, x22, [sp, #32]
 374:	ldr	x23, [sp, #48]
 378:	ldp	x29, x30, [sp], #80
 37c:	ret
 380:	mov	w19, #0x1                   	// #1
 384:	mov	w0, w19
 388:	ldp	x19, x20, [sp, #16]
 38c:	ldp	x21, x22, [sp, #32]
 390:	ldr	x23, [sp, #48]
 394:	ldp	x29, x30, [sp], #80
 398:	ret
 39c:	mov	w0, #0x2                   	// #2
 3a0:	str	w0, [x21]
 3a4:	ldrb	w0, [x20, #9]
 3a8:	cbz	w0, 380 <e2p_jrnl_string2feature+0xe8>
 3ac:	add	x0, x20, #0x9
 3b0:	add	x1, sp, #0x48
 3b4:	mov	w2, #0xa                   	// #10
 3b8:	bl	0 <strtol>
 3bc:	cmp	w0, #0x1f
 3c0:	b.hi	380 <e2p_jrnl_string2feature+0xe8>  // b.pmore
 3c4:	ldr	x1, [sp, #72]
 3c8:	ldrb	w1, [x1]
 3cc:	cbnz	w1, 380 <e2p_jrnl_string2feature+0xe8>
 3d0:	mov	w1, #0x1                   	// #1
 3d4:	lsl	w0, w1, w0
 3d8:	str	w0, [x22]
 3dc:	b	2fc <e2p_jrnl_string2feature+0x64>
 3e0:	str	wzr, [x21]
 3e4:	b	3a4 <e2p_jrnl_string2feature+0x10c>

00000000000003e8 <e2p_edit_feature2>:
 3e8:	stp	x29, x30, [sp, #-144]!
 3ec:	cmp	x3, #0x0
 3f0:	mov	x29, sp
 3f4:	stp	x19, x20, [sp, #16]
 3f8:	mov	x19, x0
 3fc:	stp	x21, x22, [sp, #32]
 400:	mov	x21, x1
 404:	stp	x23, x24, [sp, #48]
 408:	csel	x24, x3, x2, ne  // ne = any
 40c:	stp	x25, x26, [sp, #64]
 410:	mov	x25, x2
 414:	stp	x27, x28, [sp, #80]
 418:	mov	x28, x5
 41c:	str	x4, [sp, #120]
 420:	cbz	x4, 428 <e2p_edit_feature2+0x40>
 424:	str	wzr, [x4]
 428:	cbz	x28, 430 <e2p_edit_feature2+0x48>
 42c:	str	wzr, [x28]
 430:	mov	x0, x19
 434:	bl	0 <strlen>
 438:	add	x20, x0, #0x1
 43c:	mov	x0, x20
 440:	bl	0 <malloc>
 444:	mov	x26, x0
 448:	cbz	x0, 64c <e2p_edit_feature2+0x264>
 44c:	mov	x2, x20
 450:	mov	x1, x19
 454:	bl	0 <memcpy>
 458:	ldrb	w27, [x26]
 45c:	cbz	w27, 55c <e2p_edit_feature2+0x174>
 460:	str	d8, [sp, #96]
 464:	movi	v8.2s, #0x0
 468:	adrp	x22, 0 <e2p_feature2string>
 46c:	adrp	x23, 0 <e2p_feature2string>
 470:	add	x22, x22, #0x0
 474:	add	x23, x23, #0x0
 478:	mov	x19, x26
 47c:	nop
 480:	bl	0 <__ctype_b_loc>
 484:	ldr	x2, [x0]
 488:	b	494 <e2p_edit_feature2+0xac>
 48c:	ldrb	w27, [x19, #1]!
 490:	cbz	w27, 588 <e2p_edit_feature2+0x1a0>
 494:	ubfiz	x1, x27, #1, #8
 498:	ldrh	w0, [x2, x1]
 49c:	tbnz	w0, #13, 48c <e2p_edit_feature2+0xa4>
 4a0:	ldrb	w0, [x19]
 4a4:	mov	x20, x19
 4a8:	cbnz	w0, 4b8 <e2p_edit_feature2+0xd0>
 4ac:	b	588 <e2p_edit_feature2+0x1a0>
 4b0:	ldrb	w0, [x20, #1]!
 4b4:	cbz	w0, 588 <e2p_edit_feature2+0x1a0>
 4b8:	ubfiz	x1, x0, #1, #8
 4bc:	cmp	w0, #0x2c
 4c0:	ldrh	w0, [x2, x1]
 4c4:	and	w0, w0, #0x2000
 4c8:	ccmp	w0, #0x0, #0x0, ne  // ne = any
 4cc:	b.eq	4b0 <e2p_edit_feature2+0xc8>  // b.none
 4d0:	strb	wzr, [x20]
 4d4:	mov	x1, x22
 4d8:	mov	x0, x19
 4dc:	bl	0 <strcasecmp>
 4e0:	cbz	w0, 59c <e2p_edit_feature2+0x1b4>
 4e4:	mov	x1, x23
 4e8:	mov	x0, x19
 4ec:	bl	0 <strcasecmp>
 4f0:	cbz	w0, 59c <e2p_edit_feature2+0x1b4>
 4f4:	ldrb	w0, [x19]
 4f8:	cmp	w0, #0x2d
 4fc:	b.eq	5cc <e2p_edit_feature2+0x1e4>  // b.none
 500:	cmp	w0, #0x5e
 504:	b.eq	5cc <e2p_edit_feature2+0x1e4>  // b.none
 508:	cmp	w0, #0x2b
 50c:	b.eq	5a8 <e2p_edit_feature2+0x1c0>  // b.none
 510:	mov	x0, x19
 514:	add	x2, sp, #0x88
 518:	add	x1, sp, #0x8c
 51c:	bl	b0 <e2p_string2feature>
 520:	cbnz	w0, 5c0 <e2p_edit_feature2+0x1d8>
 524:	ldp	w2, w0, [sp, #136]
 528:	sbfiz	x1, x0, #2, #32
 52c:	cbz	x25, 53c <e2p_edit_feature2+0x154>
 530:	ldr	w3, [x25, x1]
 534:	tst	w2, w3
 538:	b.eq	608 <e2p_edit_feature2+0x220>  // b.none
 53c:	ldr	w0, [x21, x1]
 540:	orr	w0, w0, w2
 544:	str	w0, [x21, x1]
 548:	cbz	x20, 558 <e2p_edit_feature2+0x170>
 54c:	ldrb	w27, [x20, #1]
 550:	add	x19, x20, #0x1
 554:	cbnz	w27, 480 <e2p_edit_feature2+0x98>
 558:	ldr	d8, [sp, #96]
 55c:	mov	w19, #0x0                   	// #0
 560:	mov	x0, x26
 564:	bl	0 <free>
 568:	mov	w0, w19
 56c:	ldp	x19, x20, [sp, #16]
 570:	ldp	x21, x22, [sp, #32]
 574:	ldp	x23, x24, [sp, #48]
 578:	ldp	x25, x26, [sp, #64]
 57c:	ldp	x27, x28, [sp, #80]
 580:	ldp	x29, x30, [sp], #144
 584:	ret
 588:	mov	x1, x22
 58c:	mov	x0, x19
 590:	mov	x20, #0x0                   	// #0
 594:	bl	0 <strcasecmp>
 598:	cbnz	w0, 4e4 <e2p_edit_feature2+0xfc>
 59c:	str	d8, [x21]
 5a0:	str	wzr, [x21, #8]
 5a4:	b	548 <e2p_edit_feature2+0x160>
 5a8:	add	x0, x19, #0x1
 5ac:	add	x2, sp, #0x88
 5b0:	add	x1, sp, #0x8c
 5b4:	bl	b0 <e2p_string2feature>
 5b8:	cbz	w0, 524 <e2p_edit_feature2+0x13c>
 5bc:	nop
 5c0:	mov	w19, #0x1                   	// #1
 5c4:	ldr	d8, [sp, #96]
 5c8:	b	560 <e2p_edit_feature2+0x178>
 5cc:	add	x0, x19, #0x1
 5d0:	add	x2, sp, #0x88
 5d4:	add	x1, sp, #0x8c
 5d8:	bl	b0 <e2p_string2feature>
 5dc:	cbnz	w0, 5c0 <e2p_edit_feature2+0x1d8>
 5e0:	ldp	w0, w2, [sp, #136]
 5e4:	sxtw	x1, w2
 5e8:	cbz	x24, 5f8 <e2p_edit_feature2+0x210>
 5ec:	ldr	w3, [x24, x1, lsl #2]
 5f0:	tst	w0, w3
 5f4:	b.eq	628 <e2p_edit_feature2+0x240>  // b.none
 5f8:	ldr	w2, [x21, x1, lsl #2]
 5fc:	bic	w0, w2, w0
 600:	str	w0, [x21, x1, lsl #2]
 604:	b	548 <e2p_edit_feature2+0x160>
 608:	ldr	x1, [sp, #120]
 60c:	cbz	x1, 614 <e2p_edit_feature2+0x22c>
 610:	str	w0, [x1]
 614:	cbz	x28, 5c0 <e2p_edit_feature2+0x1d8>
 618:	mov	w19, #0x1                   	// #1
 61c:	ldr	d8, [sp, #96]
 620:	str	w2, [x28]
 624:	b	560 <e2p_edit_feature2+0x178>
 628:	ldr	x1, [sp, #120]
 62c:	cbz	x1, 638 <e2p_edit_feature2+0x250>
 630:	orr	w2, w2, #0x80
 634:	str	w2, [x1]
 638:	cbz	x28, 5c0 <e2p_edit_feature2+0x1d8>
 63c:	mov	w19, #0x1                   	// #1
 640:	ldr	d8, [sp, #96]
 644:	str	w0, [x28]
 648:	b	560 <e2p_edit_feature2+0x178>
 64c:	mov	w19, #0x1                   	// #1
 650:	b	568 <e2p_edit_feature2+0x180>
 654:	nop

0000000000000658 <e2p_edit_feature>:
 658:	mov	x5, #0x0                   	// #0
 65c:	mov	x4, #0x0                   	// #0
 660:	mov	x3, #0x0                   	// #0
 664:	b	3e8 <e2p_edit_feature2>

fgetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetflags>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	add	x2, sp, #0x40
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x1
  1c:	mov	x1, x0
  20:	mov	w0, #0x0                   	// #0
  24:	bl	0 <__lxstat>
  28:	cbnz	w0, 40 <fgetflags+0x40>
  2c:	ldr	w2, [sp, #80]
  30:	and	w2, w2, #0xf000
  34:	sub	w2, w2, #0x4, lsl #12
  38:	and	w2, w2, #0xffffbfff
  3c:	cbnz	w2, d8 <fgetflags+0xd8>
  40:	mov	x0, x19
  44:	mov	w1, #0x800                 	// #2048
  48:	bl	0 <open>
  4c:	mov	w20, w0
  50:	cmn	w0, #0x1
  54:	b.eq	d0 <fgetflags+0xd0>  // b.none
  58:	mov	x1, #0x6601                	// #26113
  5c:	add	x2, sp, #0x3c
  60:	movk	x1, #0x8008, lsl #16
  64:	bl	0 <ioctl>
  68:	mov	w19, w0
  6c:	cmn	w0, #0x1
  70:	b.eq	98 <fgetflags+0x98>  // b.none
  74:	ldrsw	x1, [sp, #60]
  78:	mov	w0, w20
  7c:	str	x1, [x21]
  80:	bl	0 <close>
  84:	mov	w0, w19
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldp	x21, x22, [sp, #32]
  90:	ldp	x29, x30, [sp], #192
  94:	ret
  98:	bl	0 <__errno_location>
  9c:	mov	x22, x0
  a0:	ldrsw	x1, [sp, #60]
  a4:	mov	w0, w20
  a8:	ldr	w20, [x22]
  ac:	str	x1, [x21]
  b0:	bl	0 <close>
  b4:	cbz	w20, d0 <fgetflags+0xd0>
  b8:	str	w20, [x22]
  bc:	mov	w0, w19
  c0:	ldp	x19, x20, [sp, #16]
  c4:	ldp	x21, x22, [sp, #32]
  c8:	ldp	x29, x30, [sp], #192
  cc:	ret
  d0:	mov	w19, #0xffffffff            	// #-1
  d4:	b	84 <fgetflags+0x84>
  d8:	bl	0 <__errno_location>
  dc:	mov	w19, #0xffffffff            	// #-1
  e0:	mov	w1, #0x5f                  	// #95
  e4:	str	w1, [x0]
  e8:	b	84 <fgetflags+0x84>

fsetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetflags>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	add	x2, sp, #0x40
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	str	x21, [sp, #32]
  18:	mov	x21, x1
  1c:	mov	x1, x0
  20:	mov	w0, #0x0                   	// #0
  24:	bl	0 <__lxstat>
  28:	cbnz	w0, 40 <fsetflags+0x40>
  2c:	ldr	w2, [sp, #80]
  30:	and	w2, w2, #0xf000
  34:	sub	w2, w2, #0x4, lsl #12
  38:	and	w2, w2, #0xffffbfff
  3c:	cbnz	w2, cc <fsetflags+0xcc>
  40:	mov	x0, x19
  44:	mov	w1, #0x800                 	// #2048
  48:	bl	0 <open>
  4c:	mov	w20, w0
  50:	cmn	w0, #0x1
  54:	b.eq	c4 <fsetflags+0xc4>  // b.none
  58:	mov	x1, #0x6602                	// #26114
  5c:	add	x2, sp, #0x3c
  60:	movk	x1, #0x4008, lsl #16
  64:	str	w21, [sp, #60]
  68:	bl	0 <ioctl>
  6c:	mov	w19, w0
  70:	cmn	w0, #0x1
  74:	b.eq	94 <fsetflags+0x94>  // b.none
  78:	mov	w0, w20
  7c:	bl	0 <close>
  80:	mov	w0, w19
  84:	ldp	x19, x20, [sp, #16]
  88:	ldr	x21, [sp, #32]
  8c:	ldp	x29, x30, [sp], #192
  90:	ret
  94:	bl	0 <__errno_location>
  98:	mov	x21, x0
  9c:	mov	w0, w20
  a0:	ldr	w20, [x21]
  a4:	bl	0 <close>
  a8:	cbz	w20, c4 <fsetflags+0xc4>
  ac:	str	w20, [x21]
  b0:	mov	w0, w19
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldr	x21, [sp, #32]
  bc:	ldp	x29, x30, [sp], #192
  c0:	ret
  c4:	mov	w19, #0xffffffff            	// #-1
  c8:	b	80 <fsetflags+0x80>
  cc:	bl	0 <__errno_location>
  d0:	mov	w19, #0xffffffff            	// #-1
  d4:	mov	w1, #0x5f                  	// #95
  d8:	str	w1, [x0]
  dc:	b	80 <fsetflags+0x80>

fgetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetversion>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	w2, #0xffffffff            	// #-1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	str	x21, [sp, #32]
  14:	mov	x21, x1
  18:	mov	w1, #0x800                 	// #2048
  1c:	str	w2, [sp, #60]
  20:	bl	0 <open>
  24:	mov	w20, w0
  28:	cmn	w0, #0x1
  2c:	b.eq	a0 <fgetversion+0xa0>  // b.none
  30:	mov	x1, #0x7601                	// #30209
  34:	add	x2, sp, #0x3c
  38:	movk	x1, #0x8008, lsl #16
  3c:	bl	0 <ioctl>
  40:	mov	w19, w0
  44:	cmn	w0, #0x1
  48:	b.eq	74 <fgetversion+0x74>  // b.none
  4c:	mov	w0, w20
  50:	bl	0 <close>
  54:	cbnz	w19, 60 <fgetversion+0x60>
  58:	ldr	w0, [sp, #60]
  5c:	str	x0, [x21]
  60:	mov	w0, w19
  64:	ldp	x19, x20, [sp, #16]
  68:	ldr	x21, [sp, #32]
  6c:	ldp	x29, x30, [sp], #64
  70:	ret
  74:	bl	0 <__errno_location>
  78:	mov	x21, x0
  7c:	mov	w0, w20
  80:	ldr	w20, [x21]
  84:	bl	0 <close>
  88:	str	w20, [x21]
  8c:	mov	w0, w19
  90:	ldp	x19, x20, [sp, #16]
  94:	ldr	x21, [sp, #32]
  98:	ldp	x29, x30, [sp], #64
  9c:	ret
  a0:	mov	w19, w0
  a4:	b	60 <fgetversion+0x60>

fsetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetversion>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	w1, #0x800                 	// #2048
  14:	bl	0 <open>
  18:	cmn	w0, #0x1
  1c:	b.eq	94 <fsetversion+0x94>  // b.none
  20:	mov	x1, #0x7602                	// #30210
  24:	mov	w20, w0
  28:	add	x2, sp, #0x3c
  2c:	movk	x1, #0x4008, lsl #16
  30:	str	w19, [sp, #60]
  34:	bl	0 <ioctl>
  38:	mov	w19, w0
  3c:	cmn	w0, #0x1
  40:	b.eq	5c <fsetversion+0x5c>  // b.none
  44:	mov	w0, w20
  48:	bl	0 <close>
  4c:	mov	w0, w19
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #64
  58:	ret
  5c:	str	x21, [sp, #32]
  60:	bl	0 <__errno_location>
  64:	mov	x21, x0
  68:	mov	w0, w20
  6c:	ldr	w20, [x21]
  70:	bl	0 <close>
  74:	cbz	w20, 90 <fsetversion+0x90>
  78:	str	w20, [x21]
  7c:	mov	w0, w19
  80:	ldp	x19, x20, [sp, #16]
  84:	ldr	x21, [sp, #32]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret
  90:	ldr	x21, [sp, #32]
  94:	mov	w19, #0xffffffff            	// #-1
  98:	b	4c <fsetversion+0x4c>

getflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getflags>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	add	x2, sp, #0x30
   c:	stp	x19, x20, [sp, #16]
  10:	mov	w19, w0
  14:	mov	x20, x1
  18:	mov	w1, w0
  1c:	mov	w0, #0x0                   	// #0
  20:	bl	0 <__fxstat>
  24:	cbnz	w0, 3c <getflags+0x3c>
  28:	ldr	w2, [sp, #64]
  2c:	and	w2, w2, #0xf000
  30:	sub	w2, w2, #0x4, lsl #12
  34:	and	w2, w2, #0xffffbfff
  38:	cbnz	w2, 64 <getflags+0x64>
  3c:	mov	x1, #0x6601                	// #26113
  40:	mov	w0, w19
  44:	movk	x1, #0x8008, lsl #16
  48:	add	x2, sp, #0x2c
  4c:	bl	0 <ioctl>
  50:	ldrsw	x1, [sp, #44]
  54:	str	x1, [x20]
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x29, x30, [sp], #176
  60:	ret
  64:	bl	0 <__errno_location>
  68:	mov	x1, x0
  6c:	mov	w2, #0x5f                  	// #95
  70:	mov	w0, #0xffffffff            	// #-1
  74:	str	w2, [x1]
  78:	b	58 <getflags+0x58>

getversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x1, #0x7601                	// #30209
  14:	add	x2, sp, #0x2c
  18:	movk	x1, #0x8008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldrsw	x1, [sp, #44]
  24:	str	x1, [x19]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret

hashstr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_hash2string>:
   0:	adrp	x1, 0 <e2p_hash2string>
   4:	mov	w2, w0
   8:	add	x1, x1, #0x0
   c:	b	20 <e2p_hash2string+0x20>
  10:	ldr	w3, [x1]
  14:	add	x1, x1, #0x10
  18:	cmp	w3, w2
  1c:	b.eq	5c <e2p_hash2string+0x5c>  // b.none
  20:	ldr	x0, [x1, #8]
  24:	cbnz	x0, 10 <e2p_hash2string+0x10>
  28:	stp	x29, x30, [sp, #-32]!
  2c:	adrp	x1, 0 <e2p_hash2string>
  30:	add	x1, x1, #0x0
  34:	mov	x29, sp
  38:	str	x19, [sp, #16]
  3c:	adrp	x19, 0 <e2p_hash2string>
  40:	add	x19, x19, #0x0
  44:	mov	x0, x19
  48:	bl	0 <sprintf>
  4c:	mov	x0, x19
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret
  5c:	ret

0000000000000060 <e2p_string2hash>:
  60:	stp	x29, x30, [sp, #-48]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	adrp	x19, 0 <e2p_hash2string>
  70:	add	x19, x19, #0x0
  74:	mov	x20, x0
  78:	ldr	x1, [x19, #8]
  7c:	cbnz	x1, 90 <e2p_string2hash+0x30>
  80:	b	ac <e2p_string2hash+0x4c>
  84:	ldr	x1, [x19, #24]
  88:	add	x19, x19, #0x10
  8c:	cbz	x1, ac <e2p_string2hash+0x4c>
  90:	mov	x0, x20
  94:	bl	0 <strcasecmp>
  98:	cbnz	w0, 84 <e2p_string2hash+0x24>
  9c:	ldr	w0, [x19]
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret
  ac:	adrp	x1, 0 <e2p_hash2string>
  b0:	mov	x0, x20
  b4:	add	x1, x1, #0x0
  b8:	mov	x2, #0x8                   	// #8
  bc:	bl	0 <strncasecmp>
  c0:	cbnz	w0, fc <e2p_string2hash+0x9c>
  c4:	ldrb	w0, [x20, #8]
  c8:	cbz	w0, fc <e2p_string2hash+0x9c>
  cc:	add	x0, x20, #0x8
  d0:	add	x1, sp, #0x28
  d4:	mov	w2, #0xa                   	// #10
  d8:	bl	0 <strtol>
  dc:	cmp	w0, #0xff
  e0:	b.hi	fc <e2p_string2hash+0x9c>  // b.pmore
  e4:	ldr	x1, [sp, #40]
  e8:	ldrb	w1, [x1]
  ec:	cbnz	w1, fc <e2p_string2hash+0x9c>
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x29, x30, [sp], #48
  f8:	ret
  fc:	mov	w0, #0xffffffff            	// #-1
 100:	b	f0 <e2p_string2hash+0x90>

iod.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <iterate_on_dir>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x24, x1
  18:	mov	x23, x0
  1c:	mov	w1, #0x3                   	// #3
  20:	str	x25, [sp, #64]
  24:	mov	x25, x2
  28:	bl	0 <pathconf>
  2c:	cmn	w0, #0x1
  30:	b.eq	d0 <iterate_on_dir+0xd0>  // b.none
  34:	add	w1, w0, #0x119
  38:	add	w19, w0, #0x118
  3c:	sxtw	x0, w1
  40:	mov	x1, #0x1                   	// #1
  44:	bl	0 <calloc>
  48:	mov	x20, x0
  4c:	cbz	x0, ec <iterate_on_dir+0xec>
  50:	mov	x0, x23
  54:	mov	w21, #0x0                   	// #0
  58:	bl	0 <opendir>
  5c:	mov	x22, x0
  60:	cbnz	x0, 94 <iterate_on_dir+0x94>
  64:	b	dc <iterate_on_dir+0xdc>
  68:	ldrh	w2, [x1, #16]
  6c:	cmp	w2, w19
  70:	csel	w2, w2, w19, le
  74:	sxtw	x2, w2
  78:	bl	0 <memcpy>
  7c:	mov	x2, x25
  80:	mov	x1, x20
  84:	mov	x0, x23
  88:	blr	x24
  8c:	cmp	w0, #0x0
  90:	cinc	w21, w21, ne  // ne = any
  94:	mov	x0, x22
  98:	bl	0 <readdir>
  9c:	mov	x1, x0
  a0:	mov	x0, x20
  a4:	cbnz	x1, 68 <iterate_on_dir+0x68>
  a8:	bl	0 <free>
  ac:	mov	x0, x22
  b0:	bl	0 <closedir>
  b4:	mov	w0, w21
  b8:	ldp	x19, x20, [sp, #16]
  bc:	ldp	x21, x22, [sp, #32]
  c0:	ldp	x23, x24, [sp, #48]
  c4:	ldr	x25, [sp, #64]
  c8:	ldp	x29, x30, [sp], #80
  cc:	ret
  d0:	mov	w19, #0x126                 	// #294
  d4:	mov	x0, #0x127                 	// #295
  d8:	b	40 <iterate_on_dir+0x40>
  dc:	mov	x0, x20
  e0:	mov	w21, #0xffffffff            	// #-1
  e4:	bl	0 <free>
  e8:	b	b4 <iterate_on_dir+0xb4>
  ec:	mov	w21, #0xffffffff            	// #-1
  f0:	b	b4 <iterate_on_dir+0xb4>

ls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <list_super2>:
       0:	stp	x29, x30, [sp, #-208]!
       4:	mov	w2, #0x80                  	// #128
       8:	mov	x29, sp
       c:	stp	x19, x20, [sp, #16]
      10:	mov	x19, x0
      14:	ldr	w0, [x0, #76]
      18:	stp	x21, x22, [sp, #32]
      1c:	mov	x20, x1
      20:	stp	x23, x24, [sp, #48]
      24:	stp	x25, x26, [sp, #64]
      28:	ldr	w25, [x19, #40]
      2c:	stp	x27, x28, [sp, #80]
      30:	cbz	w0, 38 <list_super2+0x38>
      34:	ldrh	w2, [x19, #88]
      38:	ldr	w1, [x19, #24]
      3c:	mov	w0, #0x400                 	// #1024
      40:	ldrb	w3, [x19, #120]
      44:	add	w4, w1, #0xa
      48:	lsl	w0, w0, w1
      4c:	sub	w0, w0, #0x1
      50:	madd	w0, w25, w2, w0
      54:	lsr	w0, w0, w4
      58:	str	w0, [sp, #108]
      5c:	cbz	w3, 60c <list_super2+0x60c>
      60:	add	x24, sp, #0x80
      64:	add	x1, x19, #0x78
      68:	mov	x2, #0x10                  	// #16
      6c:	mov	x0, x24
      70:	stp	xzr, xzr, [sp, #128]
      74:	stp	xzr, xzr, [sp, #144]
      78:	stp	xzr, xzr, [sp, #160]
      7c:	stp	xzr, xzr, [sp, #176]
      80:	stp	xzr, xzr, [sp, #192]
      84:	bl	0 <strncpy>
      88:	mov	x2, x24
      8c:	mov	x0, x20
      90:	adrp	x1, 0 <list_super2>
      94:	add	x1, x1, #0x0
      98:	bl	0 <fprintf>
      9c:	ldrb	w0, [x19, #136]
      a0:	cbz	w0, 644 <list_super2+0x644>
      a4:	add	x1, x19, #0x88
      a8:	mov	x0, x24
      ac:	mov	x2, #0x40                  	// #64
      b0:	stp	xzr, xzr, [sp, #128]
      b4:	stp	xzr, xzr, [sp, #144]
      b8:	stp	xzr, xzr, [sp, #160]
      bc:	stp	xzr, xzr, [sp, #176]
      c0:	stp	xzr, xzr, [sp, #192]
      c4:	bl	0 <strncpy>
      c8:	mov	x2, x24
      cc:	adrp	x1, 0 <list_super2>
      d0:	add	x1, x1, #0x0
      d4:	mov	x0, x20
      d8:	bl	0 <fprintf>
      dc:	add	x0, x19, #0x68
      e0:	bl	0 <e2p_uuid2str>
      e4:	mov	x2, x0
      e8:	adrp	x1, 0 <list_super2>
      ec:	mov	x0, x20
      f0:	add	x1, x1, #0x0
      f4:	bl	0 <fprintf>
      f8:	ldrh	w2, [x19, #56]
      fc:	mov	x0, x20
     100:	adrp	x1, 0 <list_super2>
     104:	add	x1, x1, #0x0
     108:	bl	0 <fprintf>
     10c:	ldr	w2, [x19, #76]
     110:	mov	x0, x20
     114:	adrp	x1, 0 <list_super2>
     118:	add	x1, x1, #0x0
     11c:	bl	0 <fprintf>
     120:	ldr	w0, [x19, #76]
     124:	cbz	w0, ec8 <list_super2+0xec8>
     128:	cmp	w0, #0x1
     12c:	b.eq	658 <list_super2+0x658>  // b.none
     130:	adrp	x0, 0 <list_super2>
     134:	mov	x3, x20
     138:	add	x0, x0, #0x0
     13c:	mov	x2, #0xb                   	// #11
     140:	mov	x1, #0x1                   	// #1
     144:	bl	0 <fwrite>
     148:	adrp	x27, 0 <list_super2>
     14c:	add	x25, x19, #0x5c
     150:	add	x27, x27, #0x0
     154:	mov	x21, #0x0                   	// #0
     158:	mov	w26, #0x0                   	// #0
     15c:	mov	x3, x20
     160:	adrp	x0, 0 <list_super2>
     164:	mov	x2, #0x19                  	// #25
     168:	add	x0, x0, #0x0
     16c:	mov	x1, #0x1                   	// #1
     170:	bl	0 <fwrite>
     174:	mov	w28, w21
     178:	mov	w23, #0x20                  	// #32
     17c:	mov	w22, #0x1                   	// #1
     180:	b	190 <list_super2+0x190>
     184:	lsl	w22, w22, #1
     188:	subs	w23, w23, #0x1
     18c:	b.eq	1c8 <list_super2+0x1c8>  // b.none
     190:	ldr	w0, [x25, x21, lsl #2]
     194:	tst	w22, w0
     198:	b.eq	184 <list_super2+0x184>  // b.none
     19c:	mov	w1, w22
     1a0:	mov	w0, w28
     1a4:	bl	0 <e2p_feature2string>
     1a8:	mov	x2, x0
     1ac:	mov	x1, x27
     1b0:	mov	x0, x20
     1b4:	bl	0 <fprintf>
     1b8:	add	w26, w26, #0x1
     1bc:	lsl	w22, w22, #1
     1c0:	subs	w23, w23, #0x1
     1c4:	b.ne	190 <list_super2+0x190>  // b.any
     1c8:	add	x21, x21, #0x1
     1cc:	cmp	x21, #0x3
     1d0:	b.ne	174 <list_super2+0x174>  // b.any
     1d4:	cbz	w26, eac <list_super2+0xeac>
     1d8:	mov	x1, x20
     1dc:	mov	w0, #0xa                   	// #10
     1e0:	bl	0 <fputc>
     1e4:	ldr	w0, [x19, #352]
     1e8:	cbz	w0, 22c <list_super2+0x22c>
     1ec:	mov	x3, x20
     1f0:	adrp	x0, 0 <list_super2>
     1f4:	mov	x2, #0x1a                  	// #26
     1f8:	add	x0, x0, #0x0
     1fc:	mov	x1, #0x1                   	// #1
     200:	bl	0 <fwrite>
     204:	ldr	w0, [x19, #352]
     208:	tbnz	w0, #0, 105c <list_super2+0x105c>
     20c:	tbnz	w0, #1, 107c <list_super2+0x107c>
     210:	tbnz	w0, #2, 109c <list_super2+0x109c>
     214:	adrp	x0, 0 <list_super2>
     218:	mov	x3, x20
     21c:	add	x0, x0, #0x0
     220:	mov	x2, #0x7                   	// #7
     224:	mov	x1, #0x1                   	// #1
     228:	bl	0 <fwrite>
     22c:	ldr	w27, [x19, #256]
     230:	mov	x3, x20
     234:	adrp	x0, 0 <list_super2>
     238:	mov	x2, #0x19                  	// #25
     23c:	add	x0, x0, #0x0
     240:	mov	x1, #0x1                   	// #1
     244:	bl	0 <fwrite>
     248:	mov	w23, #0x0                   	// #0
     24c:	ands	w0, w27, #0x60
     250:	b.ne	e8c <list_super2+0xe8c>  // b.any
     254:	adrp	x26, 0 <list_super2>
     258:	mov	w22, #0x20                  	// #32
     25c:	add	x26, x26, #0x0
     260:	mov	w21, #0x1                   	// #1
     264:	b	274 <list_super2+0x274>
     268:	lsl	w21, w21, #1
     26c:	subs	w22, w22, #0x1
     270:	b.eq	2ac <list_super2+0x2ac>  // b.none
     274:	tst	w21, #0x60
     278:	b.ne	268 <list_super2+0x268>  // b.any
     27c:	tst	w27, w21
     280:	b.eq	268 <list_super2+0x268>  // b.none
     284:	mov	w0, w21
     288:	bl	0 <e2p_mntopt2string>
     28c:	mov	x1, x26
     290:	mov	x2, x0
     294:	mov	x0, x20
     298:	bl	0 <fprintf>
     29c:	add	w23, w23, #0x1
     2a0:	lsl	w21, w21, #1
     2a4:	subs	w22, w22, #0x1
     2a8:	b.ne	274 <list_super2+0x274>  // b.any
     2ac:	cbz	w23, e70 <list_super2+0xe70>
     2b0:	mov	x1, x20
     2b4:	mov	w0, #0xa                   	// #10
     2b8:	bl	0 <fputc>
     2bc:	ldrb	w0, [x19, #512]
     2c0:	cbnz	w0, e58 <list_super2+0xe58>
     2c4:	mov	x3, x20
     2c8:	mov	x2, #0x19                  	// #25
     2cc:	mov	x1, #0x1                   	// #1
     2d0:	adrp	x0, 0 <list_super2>
     2d4:	add	x0, x0, #0x0
     2d8:	bl	0 <fwrite>
     2dc:	ldrh	w1, [x19, #58]
     2e0:	mov	x0, x20
     2e4:	bl	0 <print_fs_state>
     2e8:	mov	x1, x20
     2ec:	mov	w0, #0xa                   	// #10
     2f0:	bl	0 <fputc>
     2f4:	mov	x3, x20
     2f8:	mov	x2, #0x1a                  	// #26
     2fc:	mov	x1, #0x1                   	// #1
     300:	adrp	x0, 0 <list_super2>
     304:	add	x0, x0, #0x0
     308:	bl	0 <fwrite>
     30c:	ldrh	w1, [x19, #60]
     310:	mov	x0, x20
     314:	bl	0 <print_fs_errors>
     318:	mov	x1, x20
     31c:	mov	w0, #0xa                   	// #10
     320:	bl	0 <fputc>
     324:	ldr	w0, [x19, #72]
     328:	bl	0 <e2p_os2string>
     32c:	mov	x2, x0
     330:	adrp	x1, 0 <list_super2>
     334:	add	x1, x1, #0x0
     338:	mov	x21, x0
     33c:	mov	x0, x20
     340:	bl	0 <fprintf>
     344:	mov	x0, x21
     348:	bl	0 <free>
     34c:	ldr	w2, [x19]
     350:	mov	x0, x20
     354:	adrp	x1, 0 <list_super2>
     358:	add	x1, x1, #0x0
     35c:	bl	0 <fprintf>
     360:	ldr	w0, [x19, #96]
     364:	ldr	w2, [x19, #4]
     368:	tbz	w0, #7, 374 <list_super2+0x374>
     36c:	ldr	w0, [x19, #336]
     370:	orr	x2, x2, x0, lsl #32
     374:	mov	x0, x20
     378:	adrp	x1, 0 <list_super2>
     37c:	add	x1, x1, #0x0
     380:	bl	0 <fprintf>
     384:	ldr	w0, [x19, #96]
     388:	ldr	w2, [x19, #8]
     38c:	tbz	w0, #7, 398 <list_super2+0x398>
     390:	ldr	w0, [x19, #340]
     394:	orr	x2, x2, x0, lsl #32
     398:	mov	x0, x20
     39c:	adrp	x1, 0 <list_super2>
     3a0:	add	x1, x1, #0x0
     3a4:	bl	0 <fprintf>
     3a8:	ldr	w2, [x19, #584]
     3ac:	cbnz	w2, e44 <list_super2+0xe44>
     3b0:	ldr	w0, [x19, #96]
     3b4:	ldr	w2, [x19, #12]
     3b8:	tbz	w0, #7, 3c4 <list_super2+0x3c4>
     3bc:	ldr	w0, [x19, #344]
     3c0:	orr	x2, x2, x0, lsl #32
     3c4:	mov	x0, x20
     3c8:	adrp	x1, 0 <list_super2>
     3cc:	add	x1, x1, #0x0
     3d0:	bl	0 <fprintf>
     3d4:	ldr	w2, [x19, #16]
     3d8:	mov	x0, x20
     3dc:	adrp	x1, 0 <list_super2>
     3e0:	add	x1, x1, #0x0
     3e4:	mov	w21, #0x400                 	// #1024
     3e8:	bl	0 <fprintf>
     3ec:	ldr	w2, [x19, #20]
     3f0:	mov	x0, x20
     3f4:	adrp	x1, 0 <list_super2>
     3f8:	add	x1, x1, #0x0
     3fc:	bl	0 <fprintf>
     400:	ldr	w2, [x19, #24]
     404:	mov	x0, x20
     408:	adrp	x1, 0 <list_super2>
     40c:	add	x1, x1, #0x0
     410:	lsl	w2, w21, w2
     414:	bl	0 <fprintf>
     418:	ldr	w0, [x19, #100]
     41c:	ldr	w2, [x19, #28]
     420:	tbz	w0, #9, 9d8 <list_super2+0x9d8>
     424:	mov	x0, x20
     428:	adrp	x1, 0 <list_super2>
     42c:	lsl	w2, w21, w2
     430:	add	x1, x1, #0x0
     434:	bl	0 <fprintf>
     438:	ldr	w0, [x19, #96]
     43c:	tbnz	w0, #7, 9f4 <list_super2+0x9f4>
     440:	ldrh	w2, [x19, #206]
     444:	cbnz	w2, a10 <list_super2+0xa10>
     448:	ldr	w2, [x19, #32]
     44c:	mov	x0, x20
     450:	adrp	x1, 0 <list_super2>
     454:	add	x1, x1, #0x0
     458:	bl	0 <fprintf>
     45c:	ldr	w0, [x19, #100]
     460:	ldr	w2, [x19, #36]
     464:	tbz	w0, #9, 9c4 <list_super2+0x9c4>
     468:	adrp	x1, 0 <list_super2>
     46c:	mov	x0, x20
     470:	add	x1, x1, #0x0
     474:	bl	0 <fprintf>
     478:	ldr	w2, [x19, #40]
     47c:	mov	x0, x20
     480:	adrp	x1, 0 <list_super2>
     484:	add	x1, x1, #0x0
     488:	bl	0 <fprintf>
     48c:	ldr	w2, [sp, #108]
     490:	mov	x0, x20
     494:	adrp	x1, 0 <list_super2>
     498:	add	x1, x1, #0x0
     49c:	bl	0 <fprintf>
     4a0:	ldrh	w2, [x19, #356]
     4a4:	cbnz	w2, f80 <list_super2+0xf80>
     4a8:	ldr	w2, [x19, #368]
     4ac:	cbnz	w2, ee4 <list_super2+0xee4>
     4b0:	ldr	w2, [x19, #260]
     4b4:	cbnz	w2, efc <list_super2+0xefc>
     4b8:	ldrb	w0, [x19, #372]
     4bc:	cbnz	w0, f14 <list_super2+0xf14>
     4c0:	ldr	w0, [x19, #264]
     4c4:	cbnz	w0, f34 <list_super2+0xf34>
     4c8:	ldr	w0, [x19, #44]
     4cc:	adrp	x2, 0 <list_super2>
     4d0:	add	x2, x2, #0x0
     4d4:	mov	w1, w0
     4d8:	str	x1, [sp, #112]
     4dc:	cbnz	w0, f70 <list_super2+0xf70>
     4e0:	mov	x0, x20
     4e4:	adrp	x1, 0 <list_super2>
     4e8:	add	x1, x1, #0x0
     4ec:	bl	0 <fprintf>
     4f0:	ldr	w1, [x19, #48]
     4f4:	add	x0, sp, #0x70
     4f8:	str	x1, [sp, #112]
     4fc:	adrp	x22, 0 <list_super2>
     500:	bl	0 <ctime>
     504:	mov	x2, x0
     508:	adrp	x1, 0 <list_super2>
     50c:	mov	x0, x20
     510:	add	x1, x1, #0x0
     514:	bl	0 <fprintf>
     518:	ldrh	w2, [x19, #52]
     51c:	mov	x0, x20
     520:	adrp	x1, 0 <list_super2>
     524:	add	x1, x1, #0x0
     528:	bl	0 <fprintf>
     52c:	ldrsh	w2, [x19, #54]
     530:	mov	x0, x20
     534:	adrp	x1, 0 <list_super2>
     538:	add	x1, x1, #0x0
     53c:	bl	0 <fprintf>
     540:	ldr	w1, [x19, #64]
     544:	add	x0, sp, #0x70
     548:	str	x1, [sp, #112]
     54c:	bl	0 <ctime>
     550:	mov	x2, x0
     554:	adrp	x1, 0 <list_super2>
     558:	mov	x0, x20
     55c:	add	x1, x1, #0x0
     560:	bl	0 <fprintf>
     564:	ldr	w23, [x19, #68]
     568:	strb	wzr, [x22]
     56c:	cbz	w23, a24 <list_super2+0xa24>
     570:	mov	w0, #0x8cff                	// #36095
     574:	movk	w0, #0x27, lsl #16
     578:	cmp	w23, w0
     57c:	b.ls	674 <list_super2+0x674>  // b.plast
     580:	mov	w2, #0x49a1                	// #18849
     584:	mov	w21, #0x8d00                	// #36096
     588:	movk	w2, #0xcf20, lsl #16
     58c:	movk	w21, #0x27, lsl #16
     590:	add	x25, x22, #0x0
     594:	adrp	x26, 0 <list_super2>
     598:	umull	x2, w23, w2
     59c:	add	x26, x26, #0x0
     5a0:	adrp	x3, 0 <list_super2>
     5a4:	add	x3, x3, #0x0
     5a8:	mov	x0, x25
     5ac:	adrp	x1, 0 <list_super2>
     5b0:	lsr	x2, x2, #53
     5b4:	add	x1, x1, #0x0
     5b8:	cmp	w2, #0x1
     5bc:	csel	x3, x3, x26, ne  // ne = any
     5c0:	msub	w21, w2, w21, w23
     5c4:	bl	0 <sprintf>
     5c8:	mov	w0, #0x3a7f                	// #14975
     5cc:	movk	w0, #0x9, lsl #16
     5d0:	cmp	w21, w0
     5d4:	b.ls	6e4 <list_super2+0x6e4>  // b.plast
     5d8:	mov	w3, #0xde4d                	// #56909
     5dc:	ldrb	w0, [x22]
     5e0:	movk	w3, #0x6ef5, lsl #16
     5e4:	mov	w1, #0x3a80                	// #14976
     5e8:	movk	w1, #0x9, lsl #16
     5ec:	mov	x2, x26
     5f0:	umull	x3, w21, w3
     5f4:	lsr	x3, x3, #50
     5f8:	msub	w21, w3, w1, w21
     5fc:	cbz	w0, 6ac <list_super2+0x6ac>
     600:	adrp	x2, 0 <list_super2>
     604:	add	x2, x2, #0x0
     608:	b	6ac <list_super2+0x6ac>
     60c:	adrp	x0, 0 <list_super2>
     610:	add	x0, x0, #0x0
     614:	add	x24, sp, #0x80
     618:	mov	x2, x24
     61c:	ldr	w1, [x0]
     620:	ldur	w0, [x0, #3]
     624:	str	w1, [sp, #128]
     628:	adrp	x1, 0 <list_super2>
     62c:	add	x1, x1, #0x0
     630:	stur	w0, [sp, #131]
     634:	mov	x0, x20
     638:	bl	0 <fprintf>
     63c:	ldrb	w0, [x19, #136]
     640:	cbnz	w0, a4 <list_super2+0xa4>
     644:	adrp	x0, 0 <list_super2>
     648:	add	x0, x0, #0x0
     64c:	ldp	x0, x1, [x0]
     650:	stp	x0, x1, [sp, #128]
     654:	b	c8 <list_super2+0xc8>
     658:	mov	x3, x20
     65c:	adrp	x0, 0 <list_super2>
     660:	mov	x2, #0xb                   	// #11
     664:	mov	x1, #0x1                   	// #1
     668:	add	x0, x0, #0x0
     66c:	bl	0 <fwrite>
     670:	b	148 <list_super2+0x148>
     674:	mov	w0, #0x3a7f                	// #14975
     678:	movk	w0, #0x9, lsl #16
     67c:	cmp	w23, w0
     680:	b.ls	cc8 <list_super2+0xcc8>  // b.plast
     684:	mov	w3, #0xde4d                	// #56909
     688:	mov	w21, #0x3a80                	// #14976
     68c:	movk	w3, #0x6ef5, lsl #16
     690:	movk	w21, #0x9, lsl #16
     694:	adrp	x26, 0 <list_super2>
     698:	add	x25, x22, #0x0
     69c:	umull	x3, w23, w3
     6a0:	add	x2, x26, #0x0
     6a4:	lsr	x3, x3, #50
     6a8:	msub	w21, w3, w21, w23
     6ac:	cmp	w3, #0x1
     6b0:	adrp	x0, 0 <list_super2>
     6b4:	adrp	x4, 0 <list_super2>
     6b8:	add	x0, x0, #0x0
     6bc:	add	x4, x4, #0x0
     6c0:	add	x26, x25, #0x100
     6c4:	csel	x4, x4, x0, eq  // eq = none
     6c8:	adrp	x1, 0 <list_super2>
     6cc:	mov	x0, x26
     6d0:	add	x1, x1, #0x0
     6d4:	bl	0 <sprintf>
     6d8:	mov	x1, x26
     6dc:	mov	x0, x25
     6e0:	bl	0 <strcat>
     6e4:	mov	w0, #0x517f                	// #20863
     6e8:	movk	w0, #0x1, lsl #16
     6ec:	cmp	w21, w0
     6f0:	b.ls	764 <list_super2+0x764>  // b.plast
     6f4:	mov	w3, #0x4507                	// #17671
     6f8:	mov	w1, #0x5180                	// #20864
     6fc:	movk	w3, #0xc22e, lsl #16
     700:	ldrb	w4, [x22]
     704:	movk	w1, #0x1, lsl #16
     708:	adrp	x2, 0 <list_super2>
     70c:	umull	x3, w21, w3
     710:	add	x0, x2, #0x0
     714:	cmp	w4, #0x0
     718:	adrp	x2, 0 <list_super2>
     71c:	add	x2, x2, #0x0
     720:	lsr	x3, x3, #48
     724:	csel	x2, x2, x0, ne  // ne = any
     728:	msub	w21, w3, w1, w21
     72c:	cmp	w3, #0x1
     730:	adrp	x0, 0 <list_super2>
     734:	adrp	x4, 0 <list_super2>
     738:	add	x0, x0, #0x0
     73c:	add	x4, x4, #0x0
     740:	add	x26, x25, #0x100
     744:	csel	x4, x4, x0, eq  // eq = none
     748:	adrp	x1, 0 <list_super2>
     74c:	mov	x0, x26
     750:	add	x1, x1, #0x0
     754:	bl	0 <sprintf>
     758:	mov	x1, x26
     75c:	mov	x0, x25
     760:	bl	0 <strcat>
     764:	mov	x3, x25
     768:	cbnz	w21, ce0 <list_super2+0xce0>
     76c:	mov	w2, w23
     770:	mov	x0, x20
     774:	adrp	x1, 0 <list_super2>
     778:	add	x1, x1, #0x0
     77c:	bl	0 <fprintf>
     780:	ldr	w1, [x19, #68]
     784:	cbnz	w1, a48 <list_super2+0xa48>
     788:	ldr	x0, [x19, #376]
     78c:	cbnz	x0, a78 <list_super2+0xa78>
     790:	mov	x3, x20
     794:	mov	x2, #0x1a                  	// #26
     798:	mov	x1, #0x1                   	// #1
     79c:	adrp	x0, 0 <list_super2>
     7a0:	add	x0, x0, #0x0
     7a4:	bl	0 <fwrite>
     7a8:	ldrh	w21, [x19, #80]
     7ac:	adrp	x22, 0 <list_super2>
     7b0:	add	x22, x22, #0x0
     7b4:	mov	x0, x20
     7b8:	mov	x1, x22
     7bc:	mov	w2, w21
     7c0:	bl	0 <fprintf>
     7c4:	mov	w0, w21
     7c8:	bl	0 <getpwuid>
     7cc:	cbz	x0, fb0 <list_super2+0xfb0>
     7d0:	ldr	x2, [x0]
     7d4:	adrp	x1, 0 <list_super2>
     7d8:	mov	x0, x20
     7dc:	add	x1, x1, #0x0
     7e0:	bl	0 <fprintf>
     7e4:	mov	x3, x20
     7e8:	mov	x2, #0x1a                  	// #26
     7ec:	mov	x1, #0x1                   	// #1
     7f0:	adrp	x0, 0 <list_super2>
     7f4:	add	x0, x0, #0x0
     7f8:	bl	0 <fwrite>
     7fc:	ldrh	w21, [x19, #82]
     800:	mov	x1, x22
     804:	mov	x0, x20
     808:	mov	w2, w21
     80c:	bl	0 <fprintf>
     810:	mov	w0, w21
     814:	bl	0 <getgrgid>
     818:	cbz	x0, f94 <list_super2+0xf94>
     81c:	ldr	x2, [x0]
     820:	adrp	x1, 0 <list_super2>
     824:	mov	x0, x20
     828:	add	x1, x1, #0x0
     82c:	bl	0 <fprintf>
     830:	ldr	w0, [x19, #76]
     834:	cbnz	w0, df8 <list_super2+0xdf8>
     838:	add	x21, x19, #0xd0
     83c:	mov	x0, x21
     840:	bl	0 <e2p_is_null_uuid>
     844:	cbz	w0, dd8 <list_super2+0xdd8>
     848:	ldr	w2, [x19, #224]
     84c:	cbnz	w2, dc4 <list_super2+0xdc4>
     850:	ldr	w2, [x19, #228]
     854:	cbnz	w2, db0 <list_super2+0xdb0>
     858:	ldr	w2, [x19, #232]
     85c:	cbnz	w2, cb4 <list_super2+0xcb4>
     860:	ldr	w1, [x19, #92]
     864:	ldrb	w0, [x19, #252]
     868:	tbnz	w1, #5, 870 <list_super2+0x870>
     86c:	cbz	w0, 888 <list_super2+0x888>
     870:	bl	0 <e2p_hash2string>
     874:	mov	x2, x0
     878:	adrp	x1, 0 <list_super2>
     87c:	mov	x0, x20
     880:	add	x1, x1, #0x0
     884:	bl	0 <fprintf>
     888:	add	x21, x19, #0xec
     88c:	mov	x0, x21
     890:	bl	0 <e2p_is_null_uuid>
     894:	cbz	w0, d90 <list_super2+0xd90>
     898:	ldrb	w0, [x19, #253]
     89c:	cbnz	w0, d58 <list_super2+0xd58>
     8a0:	ldr	w0, [x19, #588]
     8a4:	cbnz	w0, 8b0 <list_super2+0x8b0>
     8a8:	ldr	w0, [x19, #592]
     8ac:	cbz	w0, 8e4 <list_super2+0x8e4>
     8b0:	mov	x2, #0x1a                  	// #26
     8b4:	mov	x3, x20
     8b8:	adrp	x0, 0 <list_super2>
     8bc:	mov	x1, #0x1                   	// #1
     8c0:	add	x0, x0, #0x0
     8c4:	bl	0 <fwrite>
     8c8:	ldr	w2, [x19, #588]
     8cc:	cbnz	w2, fdc <list_super2+0xfdc>
     8d0:	ldr	w2, [x19, #592]
     8d4:	cbnz	w2, fcc <list_super2+0xfcc>
     8d8:	mov	x1, x20
     8dc:	mov	w0, #0xa                   	// #10
     8e0:	bl	0 <fputc>
     8e4:	ldr	w2, [x19, #384]
     8e8:	cbnz	w2, c78 <list_super2+0xc78>
     8ec:	ldr	w2, [x19, #400]
     8f0:	cbnz	w2, c64 <list_super2+0xc64>
     8f4:	ldr	w2, [x19, #404]
     8f8:	cbnz	w2, c50 <list_super2+0xc50>
     8fc:	ldr	w0, [x19, #408]
     900:	cbnz	w0, ae4 <list_super2+0xae4>
     904:	ldr	w0, [x19, #460]
     908:	cbnz	w0, b84 <list_super2+0xb84>
     90c:	ldr	w0, [x19, #96]
     910:	tbnz	w0, #8, c24 <list_super2+0xc24>
     914:	ldr	w3, [x19, #576]
     918:	cbz	w3, 934 <list_super2+0x934>
     91c:	adrp	x2, 0 <list_super2>
     920:	adrp	x1, 0 <list_super2>
     924:	add	x2, x2, #0x0
     928:	add	x1, x1, #0x0
     92c:	mov	x0, x20
     930:	bl	0 <fprintf>
     934:	ldr	w3, [x19, #580]
     938:	cbnz	w3, 10c4 <list_super2+0x10c4>
     93c:	ldr	w3, [x19, #620]
     940:	cbnz	w3, 10e4 <list_super2+0x10e4>
     944:	ldr	w0, [x19, #100]
     948:	tbz	w0, #10, 98c <list_super2+0x98c>
     94c:	ldrb	w1, [x19, #373]
     950:	adrp	x0, 0 <list_super2>
     954:	adrp	x2, 0 <list_super2>
     958:	add	x0, x0, #0x0
     95c:	cmp	w1, #0x1
     960:	add	x2, x2, #0x0
     964:	csel	x2, x2, x0, eq  // eq = none
     968:	adrp	x1, 0 <list_super2>
     96c:	mov	x0, x20
     970:	add	x1, x1, #0x0
     974:	bl	0 <fprintf>
     978:	ldr	w2, [x19, #1020]
     97c:	adrp	x1, 0 <list_super2>
     980:	mov	x0, x20
     984:	add	x1, x1, #0x0
     988:	bl	0 <fprintf>
     98c:	add	x21, x19, #0x258
     990:	mov	x0, x21
     994:	bl	0 <e2p_is_null_uuid>
     998:	cbz	w0, 1100 <list_super2+0x1100>
     99c:	ldr	w0, [x19, #96]
     9a0:	tbnz	w0, #13, fec <list_super2+0xfec>
     9a4:	tbnz	w0, #17, 1008 <list_super2+0x1008>
     9a8:	ldp	x19, x20, [sp, #16]
     9ac:	ldp	x21, x22, [sp, #32]
     9b0:	ldp	x23, x24, [sp, #48]
     9b4:	ldp	x25, x26, [sp, #64]
     9b8:	ldp	x27, x28, [sp, #80]
     9bc:	ldp	x29, x30, [sp], #208
     9c0:	ret
     9c4:	mov	x0, x20
     9c8:	adrp	x1, 0 <list_super2>
     9cc:	add	x1, x1, #0x0
     9d0:	bl	0 <fprintf>
     9d4:	b	478 <list_super2+0x478>
     9d8:	mov	x0, x20
     9dc:	adrp	x1, 0 <list_super2>
     9e0:	lsl	w2, w21, w2
     9e4:	add	x1, x1, #0x0
     9e8:	bl	0 <fprintf>
     9ec:	ldr	w0, [x19, #96]
     9f0:	tbz	w0, #7, 440 <list_super2+0x440>
     9f4:	ldrh	w2, [x19, #254]
     9f8:	mov	x0, x20
     9fc:	adrp	x1, 0 <list_super2>
     a00:	add	x1, x1, #0x0
     a04:	bl	0 <fprintf>
     a08:	ldrh	w2, [x19, #206]
     a0c:	cbz	w2, 448 <list_super2+0x448>
     a10:	mov	x0, x20
     a14:	adrp	x1, 0 <list_super2>
     a18:	add	x1, x1, #0x0
     a1c:	bl	0 <fprintf>
     a20:	b	448 <list_super2+0x448>
     a24:	mov	w2, w23
     a28:	mov	x0, x20
     a2c:	adrp	x3, 0 <list_super2>
     a30:	adrp	x1, 0 <list_super2>
     a34:	add	x3, x3, #0x0
     a38:	add	x1, x1, #0x0
     a3c:	bl	0 <fprintf>
     a40:	ldr	w1, [x19, #68]
     a44:	cbz	w1, 788 <list_super2+0x788>
     a48:	ldr	w2, [x19, #64]
     a4c:	add	x0, sp, #0x78
     a50:	add	w1, w1, w2
     a54:	str	x1, [sp, #120]
     a58:	bl	0 <ctime>
     a5c:	mov	x2, x0
     a60:	adrp	x1, 0 <list_super2>
     a64:	mov	x0, x20
     a68:	add	x1, x1, #0x0
     a6c:	bl	0 <fprintf>
     a70:	ldr	x0, [x19, #376]
     a74:	cbz	x0, 790 <list_super2+0x790>
     a78:	mov	x2, #0x1a                  	// #26
     a7c:	mov	x3, x20
     a80:	adrp	x0, 0 <list_super2>
     a84:	mov	x1, #0x1                   	// #1
     a88:	add	x0, x0, #0x0
     a8c:	bl	0 <fwrite>
     a90:	ldr	x2, [x19, #376]
     a94:	mov	x0, #0x1fff                	// #8191
     a98:	cmp	x2, x0
     a9c:	b.ls	1150 <list_super2+0x1150>  // b.plast
     aa0:	mov	x0, #0x7fffff              	// #8388607
     aa4:	cmp	x2, x0
     aa8:	b.ls	1040 <list_super2+0x1040>  // b.plast
     aac:	mov	x0, #0x1ffffffff           	// #8589934591
     ab0:	cmp	x2, x0
     ab4:	b.ls	11b0 <list_super2+0x11b0>  // b.plast
     ab8:	mov	x0, #0x7ffffffffff         	// #8796093022207
     abc:	cmp	x2, x0
     ac0:	b.hi	1190 <list_super2+0x1190>  // b.pmore
     ac4:	mov	x0, #0x20000000            	// #536870912
     ac8:	add	x2, x2, x0
     acc:	adrp	x1, 0 <list_super2>
     ad0:	mov	x0, x20
     ad4:	lsr	x2, x2, #30
     ad8:	add	x1, x1, #0x0
     adc:	bl	0 <fprintf>
     ae0:	b	790 <list_super2+0x790>
     ae4:	mov	w1, w0
     ae8:	add	x0, sp, #0x70
     aec:	str	x1, [sp, #112]
     af0:	bl	0 <ctime>
     af4:	mov	x2, x0
     af8:	adrp	x1, 0 <list_super2>
     afc:	mov	x0, x20
     b00:	add	x1, x1, #0x0
     b04:	bl	0 <fprintf>
     b08:	add	x1, x19, #0x1a8
     b0c:	mov	x2, #0x20                  	// #32
     b10:	mov	x0, x24
     b14:	stp	xzr, xzr, [sp, #128]
     b18:	stp	xzr, xzr, [sp, #144]
     b1c:	stp	xzr, xzr, [sp, #160]
     b20:	stp	xzr, xzr, [sp, #176]
     b24:	stp	xzr, xzr, [sp, #192]
     b28:	bl	0 <strncpy>
     b2c:	mov	x2, x24
     b30:	mov	x0, x20
     b34:	adrp	x1, 0 <list_super2>
     b38:	add	x1, x1, #0x0
     b3c:	bl	0 <fprintf>
     b40:	ldr	w2, [x19, #456]
     b44:	mov	x0, x20
     b48:	adrp	x1, 0 <list_super2>
     b4c:	add	x1, x1, #0x0
     b50:	bl	0 <fprintf>
     b54:	ldr	w2, [x19, #412]
     b58:	mov	x0, x20
     b5c:	adrp	x1, 0 <list_super2>
     b60:	add	x1, x1, #0x0
     b64:	bl	0 <fprintf>
     b68:	ldr	x2, [x19, #416]
     b6c:	mov	x0, x20
     b70:	adrp	x1, 0 <list_super2>
     b74:	add	x1, x1, #0x0
     b78:	bl	0 <fprintf>
     b7c:	ldr	w0, [x19, #460]
     b80:	cbz	w0, 90c <list_super2+0x90c>
     b84:	mov	w1, w0
     b88:	add	x0, sp, #0x70
     b8c:	str	x1, [sp, #112]
     b90:	bl	0 <ctime>
     b94:	mov	x2, x0
     b98:	adrp	x1, 0 <list_super2>
     b9c:	mov	x0, x20
     ba0:	add	x1, x1, #0x0
     ba4:	bl	0 <fprintf>
     ba8:	add	x1, x19, #0x1e0
     bac:	mov	x2, #0x20                  	// #32
     bb0:	mov	x0, x24
     bb4:	stp	xzr, xzr, [sp, #128]
     bb8:	stp	xzr, xzr, [sp, #144]
     bbc:	stp	xzr, xzr, [sp, #160]
     bc0:	stp	xzr, xzr, [sp, #176]
     bc4:	stp	xzr, xzr, [sp, #192]
     bc8:	bl	0 <strncpy>
     bcc:	mov	x2, x24
     bd0:	mov	x0, x20
     bd4:	adrp	x1, 0 <list_super2>
     bd8:	add	x1, x1, #0x0
     bdc:	bl	0 <fprintf>
     be0:	ldr	w2, [x19, #468]
     be4:	mov	x0, x20
     be8:	adrp	x1, 0 <list_super2>
     bec:	add	x1, x1, #0x0
     bf0:	bl	0 <fprintf>
     bf4:	ldr	w2, [x19, #464]
     bf8:	mov	x0, x20
     bfc:	adrp	x1, 0 <list_super2>
     c00:	add	x1, x1, #0x0
     c04:	bl	0 <fprintf>
     c08:	ldr	x2, [x19, #472]
     c0c:	mov	x0, x20
     c10:	adrp	x1, 0 <list_super2>
     c14:	add	x1, x1, #0x0
     c18:	bl	0 <fprintf>
     c1c:	ldr	w0, [x19, #96]
     c20:	tbz	w0, #8, 914 <list_super2+0x914>
     c24:	ldr	x2, [x19, #360]
     c28:	mov	x0, x20
     c2c:	adrp	x1, 0 <list_super2>
     c30:	add	x1, x1, #0x0
     c34:	bl	0 <fprintf>
     c38:	ldrh	w2, [x19, #358]
     c3c:	mov	x0, x20
     c40:	adrp	x1, 0 <list_super2>
     c44:	add	x1, x1, #0x0
     c48:	bl	0 <fprintf>
     c4c:	b	914 <list_super2+0x914>
     c50:	mov	x0, x20
     c54:	adrp	x1, 0 <list_super2>
     c58:	add	x1, x1, #0x0
     c5c:	bl	0 <fprintf>
     c60:	b	8fc <list_super2+0x8fc>
     c64:	mov	x0, x20
     c68:	adrp	x1, 0 <list_super2>
     c6c:	add	x1, x1, #0x0
     c70:	bl	0 <fprintf>
     c74:	b	8f4 <list_super2+0x8f4>
     c78:	mov	x0, x20
     c7c:	adrp	x1, 0 <list_super2>
     c80:	add	x1, x1, #0x0
     c84:	bl	0 <fprintf>
     c88:	ldr	w2, [x19, #388]
     c8c:	mov	x0, x20
     c90:	adrp	x1, 0 <list_super2>
     c94:	add	x1, x1, #0x0
     c98:	bl	0 <fprintf>
     c9c:	ldr	x2, [x19, #392]
     ca0:	mov	x0, x20
     ca4:	adrp	x1, 0 <list_super2>
     ca8:	add	x1, x1, #0x0
     cac:	bl	0 <fprintf>
     cb0:	b	8ec <list_super2+0x8ec>
     cb4:	mov	x0, x20
     cb8:	adrp	x1, 0 <list_super2>
     cbc:	add	x1, x1, #0x0
     cc0:	bl	0 <fprintf>
     cc4:	b	860 <list_super2+0x860>
     cc8:	mov	w0, #0x517f                	// #20863
     ccc:	movk	w0, #0x1, lsl #16
     cd0:	cmp	w23, w0
     cd4:	b.hi	1164 <list_super2+0x1164>  // b.pmore
     cd8:	mov	w21, w23
     cdc:	add	x25, x22, #0x0
     ce0:	mov	w3, #0xb3c5                	// #46021
     ce4:	mov	w5, #0xe10                 	// #3600
     ce8:	movk	w3, #0x91a2, lsl #16
     cec:	mov	w4, #0x8889                	// #34953
     cf0:	movk	w4, #0x8888, lsl #16
     cf4:	ldrb	w1, [x22]
     cf8:	umull	x3, w21, w3
     cfc:	adrp	x0, 0 <list_super2>
     d00:	cmp	w1, #0x0
     d04:	add	x0, x0, #0x0
     d08:	adrp	x2, 0 <list_super2>
     d0c:	add	x2, x2, #0x0
     d10:	lsr	x3, x3, #43
     d14:	csel	x2, x2, x0, ne  // ne = any
     d18:	add	x22, x25, #0x100
     d1c:	adrp	x1, 0 <list_super2>
     d20:	mov	x0, x22
     d24:	add	x1, x1, #0x0
     d28:	msub	w21, w3, w5, w21
     d2c:	umull	x4, w21, w4
     d30:	lsr	x4, x4, #37
     d34:	lsl	w5, w4, #4
     d38:	sub	w5, w5, w4
     d3c:	sub	w5, w21, w5, lsl #2
     d40:	bl	0 <sprintf>
     d44:	mov	x1, x22
     d48:	mov	x0, x25
     d4c:	bl	0 <strcat>
     d50:	mov	x3, x25
     d54:	b	76c <list_super2+0x76c>
     d58:	mov	x2, #0x1a                  	// #26
     d5c:	mov	x3, x20
     d60:	adrp	x0, 0 <list_super2>
     d64:	mov	x1, #0x1                   	// #1
     d68:	add	x0, x0, #0x0
     d6c:	bl	0 <fwrite>
     d70:	ldrb	w2, [x19, #253]
     d74:	cmp	w2, #0x1
     d78:	b.eq	1120 <list_super2+0x1120>  // b.none
     d7c:	mov	x0, x20
     d80:	adrp	x1, 0 <list_super2>
     d84:	add	x1, x1, #0x0
     d88:	bl	0 <fprintf>
     d8c:	b	8a0 <list_super2+0x8a0>
     d90:	mov	x0, x21
     d94:	bl	0 <e2p_uuid2str>
     d98:	adrp	x1, 0 <list_super2>
     d9c:	mov	x2, x0
     da0:	add	x1, x1, #0x0
     da4:	mov	x0, x20
     da8:	bl	0 <fprintf>
     dac:	b	898 <list_super2+0x898>
     db0:	mov	x0, x20
     db4:	adrp	x1, 0 <list_super2>
     db8:	add	x1, x1, #0x0
     dbc:	bl	0 <fprintf>
     dc0:	b	858 <list_super2+0x858>
     dc4:	mov	x0, x20
     dc8:	adrp	x1, 0 <list_super2>
     dcc:	add	x1, x1, #0x0
     dd0:	bl	0 <fprintf>
     dd4:	b	850 <list_super2+0x850>
     dd8:	mov	x0, x21
     ddc:	bl	0 <e2p_uuid2str>
     de0:	adrp	x1, 0 <list_super2>
     de4:	mov	x2, x0
     de8:	add	x1, x1, #0x0
     dec:	mov	x0, x20
     df0:	bl	0 <fprintf>
     df4:	b	848 <list_super2+0x848>
     df8:	ldr	w2, [x19, #84]
     dfc:	mov	x0, x20
     e00:	adrp	x1, 0 <list_super2>
     e04:	add	x1, x1, #0x0
     e08:	bl	0 <fprintf>
     e0c:	ldrh	w2, [x19, #88]
     e10:	mov	x0, x20
     e14:	adrp	x1, 0 <list_super2>
     e18:	add	x1, x1, #0x0
     e1c:	bl	0 <fprintf>
     e20:	ldrh	w2, [x19, #348]
     e24:	cbnz	w2, 113c <list_super2+0x113c>
     e28:	ldrh	w2, [x19, #350]
     e2c:	cbz	w2, 838 <list_super2+0x838>
     e30:	mov	x0, x20
     e34:	adrp	x1, 0 <list_super2>
     e38:	add	x1, x1, #0x0
     e3c:	bl	0 <fprintf>
     e40:	b	838 <list_super2+0x838>
     e44:	mov	x0, x20
     e48:	adrp	x1, 0 <list_super2>
     e4c:	add	x1, x1, #0x0
     e50:	bl	0 <fprintf>
     e54:	b	3b0 <list_super2+0x3b0>
     e58:	add	x2, x19, #0x200
     e5c:	mov	x0, x20
     e60:	adrp	x1, 0 <list_super2>
     e64:	add	x1, x1, #0x0
     e68:	bl	0 <fprintf>
     e6c:	b	2c4 <list_super2+0x2c4>
     e70:	mov	x3, x20
     e74:	adrp	x0, 0 <list_super2>
     e78:	mov	x2, #0x7                   	// #7
     e7c:	mov	x1, #0x1                   	// #1
     e80:	add	x0, x0, #0x0
     e84:	bl	0 <fwrite>
     e88:	b	2b0 <list_super2+0x2b0>
     e8c:	bl	0 <e2p_mntopt2string>
     e90:	mov	w23, #0x1                   	// #1
     e94:	mov	x2, x0
     e98:	adrp	x1, 0 <list_super2>
     e9c:	mov	x0, x20
     ea0:	add	x1, x1, #0x0
     ea4:	bl	0 <fprintf>
     ea8:	b	254 <list_super2+0x254>
     eac:	mov	x3, x20
     eb0:	adrp	x0, 0 <list_super2>
     eb4:	mov	x2, #0x7                   	// #7
     eb8:	mov	x1, #0x1                   	// #1
     ebc:	add	x0, x0, #0x0
     ec0:	bl	0 <fwrite>
     ec4:	b	1d8 <list_super2+0x1d8>
     ec8:	mov	x3, x20
     ecc:	adrp	x0, 0 <list_super2>
     ed0:	mov	x2, #0xc                   	// #12
     ed4:	mov	x1, #0x1                   	// #1
     ed8:	add	x0, x0, #0x0
     edc:	bl	0 <fwrite>
     ee0:	b	148 <list_super2+0x148>
     ee4:	mov	x0, x20
     ee8:	adrp	x1, 0 <list_super2>
     eec:	add	x1, x1, #0x0
     ef0:	bl	0 <fprintf>
     ef4:	ldr	w2, [x19, #260]
     ef8:	cbz	w2, 4b8 <list_super2+0x4b8>
     efc:	mov	x0, x20
     f00:	adrp	x1, 0 <list_super2>
     f04:	add	x1, x1, #0x0
     f08:	bl	0 <fprintf>
     f0c:	ldrb	w0, [x19, #372]
     f10:	cbz	w0, 4c0 <list_super2+0x4c0>
     f14:	mov	w2, #0x1                   	// #1
     f18:	adrp	x1, 0 <list_super2>
     f1c:	lsl	w2, w2, w0
     f20:	add	x1, x1, #0x0
     f24:	mov	x0, x20
     f28:	bl	0 <fprintf>
     f2c:	ldr	w0, [x19, #264]
     f30:	cbz	w0, 4c8 <list_super2+0x4c8>
     f34:	mov	w1, w0
     f38:	add	x0, sp, #0x70
     f3c:	str	x1, [sp, #112]
     f40:	bl	0 <ctime>
     f44:	mov	x2, x0
     f48:	adrp	x1, 0 <list_super2>
     f4c:	mov	x0, x20
     f50:	add	x1, x1, #0x0
     f54:	bl	0 <fprintf>
     f58:	ldr	w0, [x19, #44]
     f5c:	adrp	x2, 0 <list_super2>
     f60:	add	x2, x2, #0x0
     f64:	mov	w1, w0
     f68:	str	x1, [sp, #112]
     f6c:	cbz	w0, 4e0 <list_super2+0x4e0>
     f70:	add	x0, sp, #0x70
     f74:	bl	0 <ctime>
     f78:	mov	x2, x0
     f7c:	b	4e0 <list_super2+0x4e0>
     f80:	mov	x0, x20
     f84:	adrp	x1, 0 <list_super2>
     f88:	add	x1, x1, #0x0
     f8c:	bl	0 <fprintf>
     f90:	b	4a8 <list_super2+0x4a8>
     f94:	mov	x3, x20
     f98:	adrp	x0, 0 <list_super2>
     f9c:	mov	x2, #0x10                  	// #16
     fa0:	mov	x1, #0x1                   	// #1
     fa4:	add	x0, x0, #0x0
     fa8:	bl	0 <fwrite>
     fac:	b	830 <list_super2+0x830>
     fb0:	mov	x3, x20
     fb4:	adrp	x0, 0 <list_super2>
     fb8:	mov	x2, #0xf                   	// #15
     fbc:	mov	x1, #0x1                   	// #1
     fc0:	add	x0, x0, #0x0
     fc4:	bl	0 <fwrite>
     fc8:	b	7e4 <list_super2+0x7e4>
     fcc:	mov	x1, x22
     fd0:	mov	x0, x20
     fd4:	bl	0 <fprintf>
     fd8:	b	8d8 <list_super2+0x8d8>
     fdc:	mov	x1, x22
     fe0:	mov	x0, x20
     fe4:	bl	0 <fprintf>
     fe8:	b	8d0 <list_super2+0x8d0>
     fec:	ldr	w2, [x19, #624]
     ff0:	mov	x0, x20
     ff4:	adrp	x1, 0 <list_super2>
     ff8:	add	x1, x1, #0x0
     ffc:	bl	0 <fprintf>
    1000:	ldr	w0, [x19, #96]
    1004:	tbz	w0, #17, 9a8 <list_super2+0x9a8>
    1008:	ldrh	w0, [x19, #636]
    100c:	bl	0 <e2p_encoding2str>
    1010:	mov	x2, x0
    1014:	adrp	x1, 0 <list_super2>
    1018:	mov	x0, x20
    101c:	add	x1, x1, #0x0
    1020:	bl	0 <fprintf>
    1024:	ldp	x19, x20, [sp, #16]
    1028:	ldp	x21, x22, [sp, #32]
    102c:	ldp	x23, x24, [sp, #48]
    1030:	ldp	x25, x26, [sp, #64]
    1034:	ldp	x27, x28, [sp, #80]
    1038:	ldp	x29, x30, [sp], #208
    103c:	ret
    1040:	add	x2, x2, #0x200
    1044:	mov	x0, x20
    1048:	adrp	x1, 0 <list_super2>
    104c:	add	x1, x1, #0x0
    1050:	lsr	x2, x2, #10
    1054:	bl	0 <fprintf>
    1058:	b	790 <list_super2+0x790>
    105c:	mov	x3, x20
    1060:	adrp	x0, 0 <list_super2>
    1064:	mov	x2, #0x16                  	// #22
    1068:	add	x0, x0, #0x0
    106c:	mov	x1, #0x1                   	// #1
    1070:	bl	0 <fwrite>
    1074:	ldr	w0, [x19, #352]
    1078:	tbz	w0, #1, 1098 <list_super2+0x1098>
    107c:	mov	x3, x20
    1080:	adrp	x0, 0 <list_super2>
    1084:	mov	x2, #0x18                  	// #24
    1088:	add	x0, x0, #0x0
    108c:	mov	x1, #0x1                   	// #1
    1090:	bl	0 <fwrite>
    1094:	ldr	w0, [x19, #352]
    1098:	tbz	w0, #2, 10b4 <list_super2+0x10b4>
    109c:	adrp	x0, 0 <list_super2>
    10a0:	mov	x3, x20
    10a4:	add	x0, x0, #0x0
    10a8:	mov	x2, #0x10                  	// #16
    10ac:	mov	x1, #0x1                   	// #1
    10b0:	bl	0 <fwrite>
    10b4:	mov	x1, x20
    10b8:	mov	w0, #0xa                   	// #10
    10bc:	bl	0 <fputc>
    10c0:	b	22c <list_super2+0x22c>
    10c4:	mov	x0, x20
    10c8:	adrp	x2, 0 <list_super2>
    10cc:	adrp	x1, 0 <list_super2>
    10d0:	add	x2, x2, #0x0
    10d4:	add	x1, x1, #0x0
    10d8:	bl	0 <fprintf>
    10dc:	ldr	w3, [x19, #620]
    10e0:	cbz	w3, 944 <list_super2+0x944>
    10e4:	mov	x0, x20
    10e8:	adrp	x2, 0 <list_super2>
    10ec:	adrp	x1, 0 <list_super2>
    10f0:	add	x2, x2, #0x0
    10f4:	add	x1, x1, #0x0
    10f8:	bl	0 <fprintf>
    10fc:	b	944 <list_super2+0x944>
    1100:	mov	x0, x21
    1104:	bl	0 <e2p_uuid2str>
    1108:	adrp	x1, 0 <list_super2>
    110c:	mov	x2, x0
    1110:	add	x1, x1, #0x0
    1114:	mov	x0, x20
    1118:	bl	0 <fprintf>
    111c:	b	99c <list_super2+0x99c>
    1120:	mov	x3, x20
    1124:	adrp	x0, 0 <list_super2>
    1128:	mov	x2, #0xd                   	// #13
    112c:	mov	x1, #0x1                   	// #1
    1130:	add	x0, x0, #0x0
    1134:	bl	0 <fwrite>
    1138:	b	8a0 <list_super2+0x8a0>
    113c:	mov	x0, x20
    1140:	adrp	x1, 0 <list_super2>
    1144:	add	x1, x1, #0x0
    1148:	bl	0 <fprintf>
    114c:	b	e28 <list_super2+0xe28>
    1150:	mov	x0, x20
    1154:	adrp	x1, 0 <list_super2>
    1158:	add	x1, x1, #0x0
    115c:	bl	0 <fprintf>
    1160:	b	790 <list_super2+0x790>
    1164:	mov	w3, #0x4507                	// #17671
    1168:	mov	w21, #0x5180                	// #20864
    116c:	movk	w3, #0xc22e, lsl #16
    1170:	movk	w21, #0x1, lsl #16
    1174:	adrp	x2, 0 <list_super2>
    1178:	add	x25, x22, #0x0
    117c:	umull	x3, w23, w3
    1180:	add	x2, x2, #0x0
    1184:	lsr	x3, x3, #48
    1188:	msub	w21, w3, w21, w23
    118c:	b	72c <list_super2+0x72c>
    1190:	mov	x0, #0x8000000000          	// #549755813888
    1194:	add	x2, x2, x0
    1198:	adrp	x1, 0 <list_super2>
    119c:	mov	x0, x20
    11a0:	lsr	x2, x2, #40
    11a4:	add	x1, x1, #0x0
    11a8:	bl	0 <fprintf>
    11ac:	b	790 <list_super2+0x790>
    11b0:	add	x2, x2, #0x80, lsl #12
    11b4:	mov	x0, x20
    11b8:	adrp	x1, 0 <list_super2>
    11bc:	add	x1, x1, #0x0
    11c0:	lsr	x2, x2, #20
    11c4:	bl	0 <fprintf>
    11c8:	b	790 <list_super2+0x790>
    11cc:	nop

00000000000011d0 <list_super>:
    11d0:	adrp	x1, 0 <stdout>
    11d4:	ldr	x1, [x1]
    11d8:	b	0 <list_super2>

ljs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_list_journal_super>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x3, x0
   8:	mov	x29, sp
   c:	stp	x25, x26, [sp, #64]
  10:	mov	x25, x1
  14:	mov	w26, w2
  18:	stp	x23, x24, [sp, #48]
  1c:	adrp	x24, 0 <e2p_list_journal_super>
  20:	add	x24, x24, #0x0
  24:	stp	x27, x28, [sp, #80]
  28:	add	x27, x25, #0x24
  2c:	mov	w28, #0x0                   	// #0
  30:	stp	x21, x22, [sp, #32]
  34:	mov	x22, #0x0                   	// #0
  38:	mov	x23, x0
  3c:	mov	x2, #0x19                  	// #25
  40:	adrp	x0, 0 <e2p_list_journal_super>
  44:	mov	x1, #0x1                   	// #1
  48:	add	x0, x0, #0x0
  4c:	stp	x19, x20, [sp, #16]
  50:	bl	0 <fwrite>
  54:	ldr	w21, [x27, x22, lsl #2]
  58:	mov	w20, #0x20                  	// #32
  5c:	mov	w19, #0x1                   	// #1
  60:	rev	w21, w21
  64:	b	74 <e2p_list_journal_super+0x74>
  68:	lsl	w19, w19, #1
  6c:	subs	w20, w20, #0x1
  70:	b.eq	a8 <e2p_list_journal_super+0xa8>  // b.none
  74:	tst	w21, w19
  78:	b.eq	68 <e2p_list_journal_super+0x68>  // b.none
  7c:	mov	w1, w19
  80:	mov	w0, w22
  84:	bl	0 <e2p_jrnl_feature2string>
  88:	mov	x2, x0
  8c:	mov	x1, x24
  90:	mov	x0, x23
  94:	bl	0 <fprintf>
  98:	add	w28, w28, #0x1
  9c:	lsl	w19, w19, #1
  a0:	subs	w20, w20, #0x1
  a4:	b.ne	74 <e2p_list_journal_super+0x74>  // b.any
  a8:	add	x22, x22, #0x1
  ac:	cmp	x22, #0x3
  b0:	b.ne	54 <e2p_list_journal_super+0x54>  // b.any
  b4:	cbz	w28, 2b8 <e2p_list_journal_super+0x2b8>
  b8:	mov	x1, x23
  bc:	mov	w0, #0xa                   	// #10
  c0:	bl	0 <fputc>
  c4:	mov	x2, #0x1a                  	// #26
  c8:	mov	x1, #0x1                   	// #1
  cc:	mov	x3, x23
  d0:	adrp	x0, 0 <e2p_list_journal_super>
  d4:	add	x0, x0, #0x0
  d8:	bl	0 <fwrite>
  dc:	ldp	w2, w0, [x25, #12]
  e0:	mov	w1, #0x1fff                	// #8191
  e4:	rev	w2, w2
  e8:	rev	w0, w0
  ec:	lsr	w2, w2, #10
  f0:	mul	w2, w2, w0
  f4:	cmp	w2, w1
  f8:	b.hi	258 <e2p_list_journal_super+0x258>  // b.pmore
  fc:	adrp	x1, 0 <e2p_list_journal_super>
 100:	mov	x0, x23
 104:	add	x1, x1, #0x0
 108:	bl	0 <fprintf>
 10c:	ldr	w2, [x25, #12]
 110:	ldr	w22, [x25, #64]
 114:	rev	w2, w2
 118:	cmp	w2, w26
 11c:	rev	w22, w22
 120:	b.eq	134 <e2p_list_journal_super+0x134>  // b.none
 124:	adrp	x1, 0 <e2p_list_journal_super>
 128:	mov	x0, x23
 12c:	add	x1, x1, #0x0
 130:	bl	0 <fprintf>
 134:	ldr	w2, [x25, #16]
 138:	mov	x0, x23
 13c:	adrp	x1, 0 <e2p_list_journal_super>
 140:	add	x1, x1, #0x0
 144:	rev	w2, w2
 148:	bl	0 <fprintf>
 14c:	ldr	w2, [x25, #20]
 150:	rev	w2, w2
 154:	cmp	w2, #0x1
 158:	b.eq	16c <e2p_list_journal_super+0x16c>  // b.none
 15c:	adrp	x1, 0 <e2p_list_journal_super>
 160:	mov	x0, x23
 164:	add	x1, x1, #0x0
 168:	bl	0 <fprintf>
 16c:	ldp	w2, w3, [x25, #24]
 170:	mov	x0, x23
 174:	adrp	x1, 0 <e2p_list_journal_super>
 178:	add	x1, x1, #0x0
 17c:	rev	w2, w2
 180:	rev	w3, w3
 184:	bl	0 <fprintf>
 188:	cmp	w22, #0x1
 18c:	b.eq	1a4 <e2p_list_journal_super+0x1a4>  // b.none
 190:	adrp	x1, 0 <e2p_list_journal_super>
 194:	mov	w2, w22
 198:	add	x1, x1, #0x0
 19c:	mov	x0, x23
 1a0:	bl	0 <fprintf>
 1a4:	ldr	w0, [x25, #36]
 1a8:	tbnz	w0, #24, 29c <e2p_list_journal_super+0x29c>
 1ac:	ldr	w0, [x25, #40]
 1b0:	tst	w0, #0x18000000
 1b4:	b.eq	1ec <e2p_list_journal_super+0x1ec>  // b.none
 1b8:	ldrb	w1, [x25, #80]
 1bc:	adrp	x0, 0 <e2p_list_journal_super>
 1c0:	ldr	w3, [x25, #252]
 1c4:	add	x0, x0, #0x0
 1c8:	cmp	w1, #0x4
 1cc:	adrp	x2, 0 <e2p_list_journal_super>
 1d0:	add	x2, x2, #0x0
 1d4:	adrp	x1, 0 <e2p_list_journal_super>
 1d8:	csel	x2, x2, x0, eq  // eq = none
 1dc:	add	x1, x1, #0x0
 1e0:	mov	x0, x23
 1e4:	rev	w3, w3
 1e8:	bl	0 <fprintf>
 1ec:	cmp	w22, #0x1
 1f0:	add	x19, x25, #0x100
 1f4:	b.ls	2d4 <e2p_list_journal_super+0x2d4>  // b.plast
 1f8:	adrp	x21, 0 <e2p_list_journal_super>
 1fc:	adrp	x24, 0 <e2p_list_journal_super>
 200:	add	x21, x21, #0x0
 204:	add	x24, x24, #0x0
 208:	mov	x0, x19
 20c:	bl	0 <e2p_uuid2str>
 210:	add	w20, w20, #0x1
 214:	mov	x1, x0
 218:	mov	x0, x21
 21c:	bl	0 <printf>
 220:	cmp	w20, #0x2f
 224:	add	x19, x19, #0x10
 228:	mov	x21, x24
 22c:	ccmp	w22, w20, #0x0, ls  // ls = plast
 230:	b.hi	208 <e2p_list_journal_super+0x208>  // b.pmore
 234:	ldr	w2, [x25, #32]
 238:	cbnz	w2, 270 <e2p_list_journal_super+0x270>
 23c:	ldp	x19, x20, [sp, #16]
 240:	ldp	x21, x22, [sp, #32]
 244:	ldp	x23, x24, [sp, #48]
 248:	ldp	x25, x26, [sp, #64]
 24c:	ldp	x27, x28, [sp, #80]
 250:	ldp	x29, x30, [sp], #96
 254:	ret
 258:	lsr	w2, w2, #10
 25c:	mov	x0, x23
 260:	adrp	x1, 0 <e2p_list_journal_super>
 264:	add	x1, x1, #0x0
 268:	bl	0 <fprintf>
 26c:	b	10c <e2p_list_journal_super+0x10c>
 270:	mov	x0, x23
 274:	rev	w2, w2
 278:	ldp	x19, x20, [sp, #16]
 27c:	adrp	x1, 0 <e2p_list_journal_super>
 280:	ldp	x21, x22, [sp, #32]
 284:	add	x1, x1, #0x0
 288:	ldp	x23, x24, [sp, #48]
 28c:	ldp	x25, x26, [sp, #64]
 290:	ldp	x27, x28, [sp, #80]
 294:	ldp	x29, x30, [sp], #96
 298:	b	0 <fprintf>
 29c:	mov	x3, x23
 2a0:	adrp	x0, 0 <e2p_list_journal_super>
 2a4:	mov	x2, #0x20                  	// #32
 2a8:	mov	x1, #0x1                   	// #1
 2ac:	add	x0, x0, #0x0
 2b0:	bl	0 <fwrite>
 2b4:	b	1ac <e2p_list_journal_super+0x1ac>
 2b8:	mov	x3, x23
 2bc:	adrp	x0, 0 <e2p_list_journal_super>
 2c0:	mov	x2, #0x7                   	// #7
 2c4:	mov	x1, #0x1                   	// #1
 2c8:	add	x0, x0, #0x0
 2cc:	bl	0 <fwrite>
 2d0:	b	b8 <e2p_list_journal_super+0xb8>
 2d4:	mov	x0, x19
 2d8:	bl	0 <e2p_is_null_uuid>
 2dc:	cbnz	w0, 234 <e2p_list_journal_super+0x234>
 2e0:	cbz	w22, 234 <e2p_list_journal_super+0x234>
 2e4:	b	1f8 <e2p_list_journal_super+0x1f8>

mntopts.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_mntopt2string>:
   0:	adrp	x1, 0 <e2p_mntopt2string>
   4:	mov	w2, w0
   8:	add	x1, x1, #0x0
   c:	b	20 <e2p_mntopt2string+0x20>
  10:	ldr	w3, [x1]
  14:	add	x1, x1, #0x10
  18:	cmp	w3, w2
  1c:	b.eq	7c <e2p_mntopt2string+0x7c>  // b.none
  20:	ldr	x0, [x1, #8]
  24:	cbnz	x0, 10 <e2p_mntopt2string+0x10>
  28:	stp	x29, x30, [sp, #-32]!
  2c:	cmp	wzr, w2, lsr #1
  30:	lsr	w0, w2, #1
  34:	mov	x29, sp
  38:	str	x19, [sp, #16]
  3c:	mov	w2, #0x0                   	// #0
  40:	b.eq	54 <e2p_mntopt2string+0x54>  // b.none
  44:	nop
  48:	add	w2, w2, #0x1
  4c:	lsr	w0, w0, #1
  50:	cbnz	w0, 48 <e2p_mntopt2string+0x48>
  54:	adrp	x0, 0 <e2p_mntopt2string>
  58:	add	x19, x0, #0x0
  5c:	mov	x0, x19
  60:	adrp	x1, 0 <e2p_mntopt2string>
  64:	add	x1, x1, #0x0
  68:	bl	0 <sprintf>
  6c:	mov	x0, x19
  70:	ldr	x19, [sp, #16]
  74:	ldp	x29, x30, [sp], #32
  78:	ret
  7c:	ret

0000000000000080 <e2p_string2mntopt>:
  80:	stp	x29, x30, [sp, #-64]!
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	adrp	x20, 0 <e2p_mntopt2string>
  90:	add	x20, x20, #0x0
  94:	stp	x21, x22, [sp, #32]
  98:	mov	x22, x1
  9c:	mov	x21, x0
  a0:	ldr	x1, [x20, #8]
  a4:	cbnz	x1, b8 <e2p_string2mntopt+0x38>
  a8:	b	e4 <e2p_string2mntopt+0x64>
  ac:	ldr	x1, [x20, #24]
  b0:	add	x20, x20, #0x10
  b4:	cbz	x1, e4 <e2p_string2mntopt+0x64>
  b8:	mov	x0, x21
  bc:	bl	0 <strcasecmp>
  c0:	mov	w19, w0
  c4:	cbnz	w0, ac <e2p_string2mntopt+0x2c>
  c8:	ldr	w0, [x20]
  cc:	str	w0, [x22]
  d0:	mov	w0, w19
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x21, x22, [sp, #32]
  dc:	ldp	x29, x30, [sp], #64
  e0:	ret
  e4:	mov	x0, x21
  e8:	adrp	x1, 0 <e2p_mntopt2string>
  ec:	mov	x2, #0x7                   	// #7
  f0:	add	x1, x1, #0x0
  f4:	bl	0 <strncasecmp>
  f8:	mov	w19, w0
  fc:	cbnz	w0, 108 <e2p_string2mntopt+0x88>
 100:	ldrb	w0, [x21, #8]
 104:	cbnz	w0, 120 <e2p_string2mntopt+0xa0>
 108:	mov	w19, #0x1                   	// #1
 10c:	mov	w0, w19
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x21, x22, [sp, #32]
 118:	ldp	x29, x30, [sp], #64
 11c:	ret
 120:	add	x0, x21, #0x8
 124:	add	x1, sp, #0x38
 128:	mov	w2, #0xa                   	// #10
 12c:	bl	0 <strtol>
 130:	cmp	w0, #0x1f
 134:	b.hi	108 <e2p_string2mntopt+0x88>  // b.pmore
 138:	ldr	x1, [sp, #56]
 13c:	ldrb	w1, [x1]
 140:	cbnz	w1, 108 <e2p_string2mntopt+0x88>
 144:	mov	w1, #0x1                   	// #1
 148:	lsl	w0, w1, w0
 14c:	str	w0, [x22]
 150:	b	d0 <e2p_string2mntopt+0x50>
 154:	nop

0000000000000158 <e2p_edit_mntopts>:
 158:	stp	x29, x30, [sp, #-80]!
 15c:	mov	x29, sp
 160:	stp	x19, x20, [sp, #16]
 164:	mov	x20, x0
 168:	stp	x21, x22, [sp, #32]
 16c:	mov	x22, x1
 170:	stp	x23, x24, [sp, #48]
 174:	mov	w23, w2
 178:	bl	0 <strlen>
 17c:	add	x19, x0, #0x1
 180:	mov	x0, x19
 184:	bl	0 <malloc>
 188:	cbz	x0, 2c8 <e2p_edit_mntopts+0x170>
 18c:	mov	x24, x0
 190:	mov	x2, x19
 194:	mov	x1, x20
 198:	bl	0 <memcpy>
 19c:	mov	x19, x24
 1a0:	ldrb	w20, [x24]
 1a4:	cbz	w20, 270 <e2p_edit_mntopts+0x118>
 1a8:	bl	0 <__ctype_b_loc>
 1ac:	ldr	x3, [x0]
 1b0:	b	1bc <e2p_edit_mntopts+0x64>
 1b4:	ldrb	w20, [x19, #1]!
 1b8:	cbz	w20, 2bc <e2p_edit_mntopts+0x164>
 1bc:	ubfiz	x20, x20, #1, #8
 1c0:	ldrh	w0, [x3, x20]
 1c4:	tbnz	w0, #13, 1b4 <e2p_edit_mntopts+0x5c>
 1c8:	ldrb	w0, [x19]
 1cc:	cbz	w0, 2bc <e2p_edit_mntopts+0x164>
 1d0:	mov	w1, w0
 1d4:	mov	x21, x19
 1d8:	b	1e4 <e2p_edit_mntopts+0x8c>
 1dc:	ldrb	w1, [x21, #1]!
 1e0:	cbz	w1, 2b4 <e2p_edit_mntopts+0x15c>
 1e4:	ldrh	w2, [x3, w1, uxtw #1]
 1e8:	cmp	w1, #0x2c
 1ec:	and	w1, w2, #0x2000
 1f0:	ccmp	w1, #0x0, #0x0, ne  // ne = any
 1f4:	b.eq	1dc <e2p_edit_mntopts+0x84>  // b.none
 1f8:	strb	wzr, [x21]
 1fc:	ldrb	w0, [x19]
 200:	cmp	w0, #0x2d
 204:	b.eq	294 <e2p_edit_mntopts+0x13c>  // b.none
 208:	cmp	w0, #0x5e
 20c:	b.eq	294 <e2p_edit_mntopts+0x13c>  // b.none
 210:	cmp	w0, #0x2b
 214:	mov	w20, #0x0                   	// #0
 218:	b.eq	298 <e2p_edit_mntopts+0x140>  // b.none
 21c:	mov	x0, x19
 220:	add	x1, sp, #0x4c
 224:	bl	80 <e2p_string2mntopt>
 228:	cbnz	w0, 2ac <e2p_edit_mntopts+0x154>
 22c:	ldr	w3, [sp, #76]
 230:	cbz	w23, 23c <e2p_edit_mntopts+0xe4>
 234:	tst	w23, w3
 238:	b.eq	2ac <e2p_edit_mntopts+0x154>  // b.none
 23c:	ldr	w0, [x22]
 240:	tst	w3, #0x60
 244:	and	w1, w0, #0xffffff9f
 248:	csel	w0, w1, w0, ne  // ne = any
 24c:	cmp	w20, #0x0
 250:	bic	w1, w0, w3
 254:	orr	w3, w3, w0
 258:	csel	w3, w3, w1, eq  // eq = none
 25c:	str	w3, [x22]
 260:	cbz	x21, 270 <e2p_edit_mntopts+0x118>
 264:	ldrb	w20, [x21, #1]
 268:	add	x19, x21, #0x1
 26c:	cbnz	w20, 1a8 <e2p_edit_mntopts+0x50>
 270:	mov	w19, #0x0                   	// #0
 274:	mov	x0, x24
 278:	bl	0 <free>
 27c:	mov	w0, w19
 280:	ldp	x19, x20, [sp, #16]
 284:	ldp	x21, x22, [sp, #32]
 288:	ldp	x23, x24, [sp, #48]
 28c:	ldp	x29, x30, [sp], #80
 290:	ret
 294:	mov	w20, #0x1                   	// #1
 298:	add	x19, x19, #0x1
 29c:	add	x1, sp, #0x4c
 2a0:	mov	x0, x19
 2a4:	bl	80 <e2p_string2mntopt>
 2a8:	cbz	w0, 22c <e2p_edit_mntopts+0xd4>
 2ac:	mov	w19, #0x1                   	// #1
 2b0:	b	274 <e2p_edit_mntopts+0x11c>
 2b4:	mov	x21, #0x0                   	// #0
 2b8:	b	200 <e2p_edit_mntopts+0xa8>
 2bc:	mov	x21, #0x0                   	// #0
 2c0:	mov	w20, #0x0                   	// #0
 2c4:	b	21c <e2p_edit_mntopts+0xc4>
 2c8:	mov	w19, #0x1                   	// #1
 2cc:	b	27c <e2p_edit_mntopts+0x124>

parse_num.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_num_blocks2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	w2, #0x0                   	// #0
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	mov	w19, w1
  14:	add	x1, sp, #0x28
  18:	bl	0 <strtoull>
  1c:	ldr	x1, [sp, #40]
  20:	ldrb	w2, [x1]
  24:	cbz	w2, 90 <parse_num_blocks2+0x90>
  28:	ldrb	w1, [x1, #1]
  2c:	cbnz	w1, 8c <parse_num_blocks2+0x8c>
  30:	cmp	w2, #0x67
  34:	b.eq	54 <parse_num_blocks2+0x54>  // b.none
  38:	b.ls	78 <parse_num_blocks2+0x78>  // b.plast
  3c:	cmp	w2, #0x73
  40:	b.eq	cc <parse_num_blocks2+0xcc>  // b.none
  44:	b.ls	b8 <parse_num_blocks2+0xb8>  // b.plast
  48:	cmp	w2, #0x74
  4c:	b.ne	8c <parse_num_blocks2+0x8c>  // b.any
  50:	lsl	x0, x0, #10
  54:	lsl	x0, x0, #10
  58:	lsl	x0, x0, #10
  5c:	cmp	w19, #0x0
  60:	lsl	x1, x0, #10
  64:	lsr	x0, x0, x19
  68:	csel	x0, x0, x1, ge  // ge = tcont
  6c:	ldr	x19, [sp, #16]
  70:	ldp	x29, x30, [sp], #48
  74:	ret
  78:	cmp	w2, #0x4d
  7c:	b.eq	58 <parse_num_blocks2+0x58>  // b.none
  80:	b.ls	9c <parse_num_blocks2+0x9c>  // b.plast
  84:	cmp	w2, #0x54
  88:	b.eq	50 <parse_num_blocks2+0x50>  // b.none
  8c:	mov	x0, #0x0                   	// #0
  90:	ldr	x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #48
  98:	ret
  9c:	cmp	w2, #0x4b
  a0:	b.eq	5c <parse_num_blocks2+0x5c>  // b.none
  a4:	b.hi	8c <parse_num_blocks2+0x8c>  // b.pmore
  a8:	cmp	w2, #0x47
  ac:	b.ne	8c <parse_num_blocks2+0x8c>  // b.any
  b0:	lsl	x0, x0, #10
  b4:	b	58 <parse_num_blocks2+0x58>
  b8:	cmp	w2, #0x6b
  bc:	b.eq	5c <parse_num_blocks2+0x5c>  // b.none
  c0:	cmp	w2, #0x6d
  c4:	b.eq	58 <parse_num_blocks2+0x58>  // b.none
  c8:	b	8c <parse_num_blocks2+0x8c>
  cc:	add	w2, w19, #0x1
  d0:	cmp	w19, #0x0
  d4:	lsl	x1, x0, #9
  d8:	lsr	x0, x0, x2
  dc:	csel	x0, x0, x1, ge  // ge = tcont
  e0:	ldr	x19, [sp, #16]
  e4:	ldp	x29, x30, [sp], #48
  e8:	ret
  ec:	nop

00000000000000f0 <parse_num_blocks>:
  f0:	stp	x29, x30, [sp, #-48]!
  f4:	mov	w2, #0x0                   	// #0
  f8:	mov	x29, sp
  fc:	str	x19, [sp, #16]
 100:	mov	w19, w1
 104:	add	x1, sp, #0x28
 108:	bl	0 <strtoull>
 10c:	ldr	x1, [sp, #40]
 110:	ldrb	w2, [x1]
 114:	cbz	w2, 180 <parse_num_blocks+0x90>
 118:	ldrb	w1, [x1, #1]
 11c:	cbnz	w1, 17c <parse_num_blocks+0x8c>
 120:	cmp	w2, #0x67
 124:	b.eq	144 <parse_num_blocks+0x54>  // b.none
 128:	b.ls	168 <parse_num_blocks+0x78>  // b.plast
 12c:	cmp	w2, #0x73
 130:	b.eq	1bc <parse_num_blocks+0xcc>  // b.none
 134:	b.ls	1a8 <parse_num_blocks+0xb8>  // b.plast
 138:	cmp	w2, #0x74
 13c:	b.ne	17c <parse_num_blocks+0x8c>  // b.any
 140:	lsl	x0, x0, #10
 144:	lsl	x0, x0, #10
 148:	lsl	x0, x0, #10
 14c:	cmp	w19, #0x0
 150:	lsl	x1, x0, #10
 154:	lsr	x0, x0, x19
 158:	csel	x0, x0, x1, ge  // ge = tcont
 15c:	ldr	x19, [sp, #16]
 160:	ldp	x29, x30, [sp], #48
 164:	ret
 168:	cmp	w2, #0x4d
 16c:	b.eq	148 <parse_num_blocks+0x58>  // b.none
 170:	b.ls	18c <parse_num_blocks+0x9c>  // b.plast
 174:	cmp	w2, #0x54
 178:	b.eq	140 <parse_num_blocks+0x50>  // b.none
 17c:	mov	x0, #0x0                   	// #0
 180:	ldr	x19, [sp, #16]
 184:	ldp	x29, x30, [sp], #48
 188:	ret
 18c:	cmp	w2, #0x4b
 190:	b.eq	14c <parse_num_blocks+0x5c>  // b.none
 194:	b.hi	17c <parse_num_blocks+0x8c>  // b.pmore
 198:	cmp	w2, #0x47
 19c:	b.ne	17c <parse_num_blocks+0x8c>  // b.any
 1a0:	lsl	x0, x0, #10
 1a4:	b	148 <parse_num_blocks+0x58>
 1a8:	cmp	w2, #0x6b
 1ac:	b.eq	14c <parse_num_blocks+0x5c>  // b.none
 1b0:	cmp	w2, #0x6d
 1b4:	b.eq	148 <parse_num_blocks+0x58>  // b.none
 1b8:	b	17c <parse_num_blocks+0x8c>
 1bc:	add	w2, w19, #0x1
 1c0:	cmp	w19, #0x0
 1c4:	lsl	x1, x0, #9
 1c8:	lsr	x0, x0, x2
 1cc:	csel	x0, x0, x1, ge  // ge = tcont
 1d0:	ldr	x19, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #48
 1d8:	ret

pe.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_errors>:
   0:	and	w1, w1, #0xffff
   4:	mov	x3, x0
   8:	cmp	w1, #0x2
   c:	b.eq	34 <print_fs_errors+0x34>  // b.none
  10:	cmp	w1, #0x3
  14:	b.eq	5c <print_fs_errors+0x5c>  // b.none
  18:	cmp	w1, #0x1
  1c:	b.eq	48 <print_fs_errors+0x48>  // b.none
  20:	adrp	x0, 0 <print_fs_errors>
  24:	mov	x2, #0x12                  	// #18
  28:	add	x0, x0, #0x0
  2c:	mov	x1, #0x1                   	// #1
  30:	b	0 <fwrite>
  34:	adrp	x0, 0 <print_fs_errors>
  38:	mov	x2, #0x11                  	// #17
  3c:	add	x0, x0, #0x0
  40:	mov	x1, #0x1                   	// #1
  44:	b	0 <fwrite>
  48:	adrp	x0, 0 <print_fs_errors>
  4c:	mov	x2, #0x8                   	// #8
  50:	add	x0, x0, #0x0
  54:	mov	x1, #0x1                   	// #1
  58:	b	0 <fwrite>
  5c:	adrp	x0, 0 <print_fs_errors>
  60:	mov	x2, #0x5                   	// #5
  64:	add	x0, x0, #0x0
  68:	mov	x1, #0x1                   	// #1
  6c:	b	0 <fwrite>

pf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_flags>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <print_flags>
  10:	ldr	x4, [x19]
  14:	stp	x21, x22, [sp, #32]
  18:	and	w21, w2, #0x1
  1c:	mov	x22, x0
  20:	cbz	x4, ac <print_flags+0xac>
  24:	mov	x20, x1
  28:	add	x19, x19, #0x0
  2c:	cbz	w21, 90 <print_flags+0x90>
  30:	adrp	x0, 0 <print_flags>
  34:	mov	w1, w21
  38:	str	x23, [sp, #48]
  3c:	add	x23, x0, #0x0
  40:	b	5c <print_flags+0x5c>
  44:	ldr	x0, [x19, #16]
  48:	mov	x1, x22
  4c:	bl	0 <fputs>
  50:	mov	w1, #0x0                   	// #0
  54:	ldr	x4, [x19, #24]!
  58:	cbz	x4, c8 <print_flags+0xc8>
  5c:	tst	x4, x20
  60:	b.eq	54 <print_flags+0x54>  // b.none
  64:	cbnz	w1, 44 <print_flags+0x44>
  68:	mov	x3, x22
  6c:	mov	x0, x23
  70:	mov	x2, #0x2                   	// #2
  74:	mov	x1, #0x1                   	// #1
  78:	bl	0 <fwrite>
  7c:	b	44 <print_flags+0x44>
  80:	ldr	x0, [x19, #8]
  84:	bl	0 <fputs>
  88:	ldr	x4, [x19, #24]!
  8c:	cbz	x4, ac <print_flags+0xac>
  90:	mov	x1, x22
  94:	tst	x20, x4
  98:	mov	w0, #0x2d                  	// #45
  9c:	b.ne	80 <print_flags+0x80>  // b.any
  a0:	bl	0 <fputc>
  a4:	ldr	x4, [x19, #24]!
  a8:	cbnz	x4, 90 <print_flags+0x90>
  ac:	mov	w1, #0x1                   	// #1
  b0:	tst	w1, w21
  b4:	b.ne	d4 <print_flags+0xd4>  // b.any
  b8:	ldp	x19, x20, [sp, #16]
  bc:	ldp	x21, x22, [sp, #32]
  c0:	ldp	x29, x30, [sp], #64
  c4:	ret
  c8:	tst	w1, w21
  cc:	ldr	x23, [sp, #48]
  d0:	b.eq	b8 <print_flags+0xb8>  // b.none
  d4:	mov	x3, x22
  d8:	adrp	x0, 0 <print_flags>
  dc:	ldp	x19, x20, [sp, #16]
  e0:	add	x0, x0, #0x0
  e4:	ldp	x21, x22, [sp, #32]
  e8:	mov	x2, #0x3                   	// #3
  ec:	ldp	x29, x30, [sp], #64
  f0:	mov	x1, #0x1                   	// #1
  f4:	b	0 <fwrite>

ps.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_state>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	tst	w1, #0x1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	and	w20, w1, #0xffff
  18:	b.eq	44 <print_fs_state+0x44>  // b.none
  1c:	adrp	x0, 0 <print_fs_state>
  20:	mov	x3, x19
  24:	add	x0, x0, #0x0
  28:	mov	x2, #0x6                   	// #6
  2c:	mov	x1, #0x1                   	// #1
  30:	bl	0 <fwrite>
  34:	tbnz	w20, #1, 60 <print_fs_state+0x60>
  38:	ldp	x19, x20, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	adrp	x0, 0 <print_fs_state>
  48:	mov	x3, x19
  4c:	add	x0, x0, #0x0
  50:	mov	x2, #0xa                   	// #10
  54:	mov	x1, #0x1                   	// #1
  58:	bl	0 <fwrite>
  5c:	tbz	w20, #1, 38 <print_fs_state+0x38>
  60:	mov	x3, x19
  64:	adrp	x0, 0 <print_fs_state>
  68:	ldp	x19, x20, [sp, #16]
  6c:	add	x0, x0, #0x0
  70:	ldp	x29, x30, [sp], #32
  74:	mov	x2, #0xc                   	// #12
  78:	mov	x1, #0x1                   	// #1
  7c:	b	0 <fwrite>

setflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setflags>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	add	x2, sp, #0x30
   c:	stp	x19, x20, [sp, #16]
  10:	mov	w19, w0
  14:	mov	x20, x1
  18:	mov	w1, w0
  1c:	mov	w0, #0x0                   	// #0
  20:	bl	0 <__fxstat>
  24:	cbnz	w0, 3c <setflags+0x3c>
  28:	ldr	w2, [sp, #64]
  2c:	and	w2, w2, #0xf000
  30:	sub	w2, w2, #0x4, lsl #12
  34:	and	w2, w2, #0xffffbfff
  38:	cbnz	w2, 60 <setflags+0x60>
  3c:	mov	x1, #0x6602                	// #26114
  40:	mov	w0, w19
  44:	add	x2, sp, #0x2c
  48:	movk	x1, #0x4008, lsl #16
  4c:	str	w20, [sp, #44]
  50:	bl	0 <ioctl>
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x29, x30, [sp], #176
  5c:	ret
  60:	bl	0 <__errno_location>
  64:	mov	x1, x0
  68:	mov	w2, #0x5f                  	// #95
  6c:	mov	w0, #0xffffffff            	// #-1
  70:	str	w2, [x1]
  74:	b	54 <setflags+0x54>

setversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setversion>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x3, x1
   8:	mov	x1, #0x7602                	// #30210
   c:	mov	x29, sp
  10:	add	x2, sp, #0x1c
  14:	movk	x1, #0x4008, lsl #16
  18:	str	w3, [sp, #28]
  1c:	bl	0 <ioctl>
  20:	ldp	x29, x30, [sp], #32
  24:	ret

uuid.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_is_null_uuid>:
   0:	ldrb	w1, [x0]
   4:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
   8:	ldrb	w1, [x0, #1]
   c:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  10:	ldrb	w1, [x0, #2]
  14:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  18:	ldrb	w1, [x0, #3]
  1c:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  20:	ldrb	w1, [x0, #4]
  24:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  28:	ldrb	w1, [x0, #5]
  2c:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  30:	ldrb	w1, [x0, #6]
  34:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  38:	ldrb	w1, [x0, #7]
  3c:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  40:	ldrb	w1, [x0, #8]
  44:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  48:	ldrb	w1, [x0, #9]
  4c:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  50:	ldrb	w1, [x0, #10]
  54:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  58:	ldrb	w1, [x0, #11]
  5c:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  60:	ldrb	w1, [x0, #12]
  64:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  68:	ldrb	w1, [x0, #13]
  6c:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  70:	ldrb	w1, [x0, #14]
  74:	cbnz	w1, 88 <e2p_is_null_uuid+0x88>
  78:	ldrb	w0, [x0, #15]
  7c:	cmp	w0, #0x0
  80:	cset	w0, eq  // eq = none
  84:	ret
  88:	mov	w0, #0x0                   	// #0
  8c:	ret

0000000000000090 <e2p_uuid_to_str>:
  90:	sub	sp, sp, #0x40
  94:	mov	x4, x0
  98:	mov	x0, x1
  9c:	adrp	x1, 0 <e2p_is_null_uuid>
  a0:	add	x1, x1, #0x0
  a4:	stp	x29, x30, [sp, #48]
  a8:	add	x29, sp, #0x30
  ac:	ldrh	w3, [x4]
  b0:	ldrb	w6, [x4, #2]
  b4:	rev16	w3, w3
  b8:	ldrb	w2, [x4, #3]
  bc:	ldrb	w7, [x4, #10]
  c0:	ubfiz	w3, w3, #8, #16
  c4:	ldrh	w5, [x4, #8]
  c8:	orr	w3, w6, w3
  cc:	ldrb	w8, [x4, #15]
  d0:	ldrb	w9, [x4, #14]
  d4:	rev16	w5, w5
  d8:	ldrb	w10, [x4, #13]
  dc:	orr	w2, w2, w3, lsl #8
  e0:	ldrb	w11, [x4, #12]
  e4:	and	w6, w5, #0xff
  e8:	ldrb	w12, [x4, #11]
  ec:	ubfx	x5, x5, #8, #8
  f0:	ldrh	w3, [x4, #4]
  f4:	ldrh	w4, [x4, #6]
  f8:	str	w12, [sp]
  fc:	rev16	w3, w3
 100:	str	w11, [sp, #8]
 104:	rev16	w4, w4
 108:	str	w10, [sp, #16]
 10c:	and	w4, w4, #0xffff
 110:	str	w9, [sp, #24]
 114:	and	w3, w3, #0xffff
 118:	str	w8, [sp, #32]
 11c:	bl	0 <sprintf>
 120:	ldp	x29, x30, [sp, #48]
 124:	add	sp, sp, #0x40
 128:	ret
 12c:	nop

0000000000000130 <e2p_uuid2str>:
 130:	ldrb	w1, [x0]
 134:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 138:	ldrb	w1, [x0, #1]
 13c:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 140:	ldrb	w1, [x0, #2]
 144:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 148:	ldrb	w1, [x0, #3]
 14c:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 150:	ldrb	w1, [x0, #4]
 154:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 158:	ldrb	w1, [x0, #5]
 15c:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 160:	ldrb	w1, [x0, #6]
 164:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 168:	ldrb	w1, [x0, #7]
 16c:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 170:	ldrb	w1, [x0, #8]
 174:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 178:	ldrb	w1, [x0, #9]
 17c:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 180:	ldrb	w1, [x0, #10]
 184:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 188:	ldrb	w1, [x0, #11]
 18c:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 190:	ldrb	w1, [x0, #12]
 194:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 198:	ldrb	w1, [x0, #13]
 19c:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 1a0:	ldrb	w1, [x0, #14]
 1a4:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 1a8:	ldrb	w1, [x0, #15]
 1ac:	cbnz	w1, 1bc <e2p_uuid2str+0x8c>
 1b0:	adrp	x0, 0 <e2p_is_null_uuid>
 1b4:	add	x0, x0, #0x0
 1b8:	ret
 1bc:	stp	x29, x30, [sp, #-32]!
 1c0:	mov	x29, sp
 1c4:	str	x19, [sp, #16]
 1c8:	adrp	x19, 0 <e2p_is_null_uuid>
 1cc:	add	x19, x19, #0x0
 1d0:	mov	x1, x19
 1d4:	bl	90 <e2p_uuid_to_str>
 1d8:	mov	x0, x19
 1dc:	ldr	x19, [sp, #16]
 1e0:	ldp	x29, x30, [sp], #32
 1e4:	ret

ostype.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_os2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x4
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	b.hi	50 <e2p_os2string+0x50>  // b.pmore
  14:	adrp	x1, 0 <e2p_os2string>
  18:	add	x1, x1, #0x0
  1c:	ldr	x20, [x1, w0, sxtw #3]
  20:	mov	x0, x20
  24:	bl	0 <strlen>
  28:	add	x0, x0, #0x1
  2c:	bl	0 <malloc>
  30:	mov	x19, x0
  34:	cbz	x0, 40 <e2p_os2string+0x40>
  38:	mov	x1, x20
  3c:	bl	0 <strcpy>
  40:	mov	x0, x19
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	adrp	x20, 0 <e2p_os2string>
  54:	mov	x0, #0xd                   	// #13
  58:	add	x20, x20, #0x0
  5c:	b	2c <e2p_os2string+0x2c>

0000000000000060 <e2p_string2os>:
  60:	stp	x29, x30, [sp, #-48]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	adrp	x20, 0 <e2p_os2string>
  70:	ldr	x1, [x20]
  74:	stp	x21, x22, [sp, #32]
  78:	cbz	x1, bc <e2p_string2os+0x5c>
  7c:	mov	x21, x0
  80:	add	x20, x20, #0x0
  84:	mov	x19, #0x0                   	// #0
  88:	b	94 <e2p_string2os+0x34>
  8c:	ldr	x1, [x20, x19, lsl #3]
  90:	cbz	x1, bc <e2p_string2os+0x5c>
  94:	mov	w22, w19
  98:	mov	x0, x21
  9c:	add	x19, x19, #0x1
  a0:	bl	0 <strcasecmp>
  a4:	cbnz	w0, 8c <e2p_string2os+0x2c>
  a8:	mov	w0, w22
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret
  bc:	mov	w22, #0xffffffff            	// #-1
  c0:	mov	w0, w22
  c4:	ldp	x19, x20, [sp, #16]
  c8:	ldp	x21, x22, [sp, #32]
  cc:	ldp	x29, x30, [sp], #48
  d0:	ret

percent.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_percent>:
   0:	cbz	w0, 3c <e2p_percent+0x3c>
   4:	mov	w2, #0x64                  	// #100
   8:	sdiv	w3, w2, w0
   c:	msub	w2, w3, w0, w2
  10:	cbz	w2, 34 <e2p_percent+0x34>
  14:	tst	w1, #0xff000000
  18:	b.ne	44 <e2p_percent+0x44>  // b.any
  1c:	mul	w1, w1, w0
  20:	mov	w0, #0x851f                	// #34079
  24:	movk	w0, #0x51eb, lsl #16
  28:	umull	x1, w1, w0
  2c:	lsr	x0, x1, #37
  30:	ret
  34:	udiv	w0, w1, w3
  38:	ret
  3c:	mov	w0, #0x0                   	// #0
  40:	ret
  44:	mov	w2, #0x851f                	// #34079
  48:	movk	w2, #0x51eb, lsl #16
  4c:	umull	x2, w1, w2
  50:	lsr	x2, x2, #37
  54:	mul	w0, w2, w0
  58:	ret

crypto_mode.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_encmode2string>:
   0:	adrp	x1, 0 <e2p_encmode2string>
   4:	mov	w2, w0
   8:	add	x1, x1, #0x0
   c:	b	20 <e2p_encmode2string+0x20>
  10:	ldr	w3, [x1]
  14:	add	x1, x1, #0x10
  18:	cmp	w3, w2
  1c:	b.eq	5c <e2p_encmode2string+0x5c>  // b.none
  20:	ldr	x0, [x1, #8]
  24:	cbnz	x0, 10 <e2p_encmode2string+0x10>
  28:	stp	x29, x30, [sp, #-32]!
  2c:	adrp	x1, 0 <e2p_encmode2string>
  30:	add	x1, x1, #0x0
  34:	mov	x29, sp
  38:	str	x19, [sp, #16]
  3c:	adrp	x19, 0 <e2p_encmode2string>
  40:	add	x19, x19, #0x0
  44:	mov	x0, x19
  48:	bl	0 <sprintf>
  4c:	mov	x0, x19
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret
  5c:	ret

0000000000000060 <e2p_string2encmode>:
  60:	stp	x29, x30, [sp, #-48]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	adrp	x19, 0 <e2p_encmode2string>
  70:	add	x19, x19, #0x0
  74:	mov	x20, x0
  78:	ldr	x1, [x19, #8]
  7c:	cbnz	x1, 90 <e2p_string2encmode+0x30>
  80:	b	ac <e2p_string2encmode+0x4c>
  84:	ldr	x1, [x19, #24]
  88:	add	x19, x19, #0x10
  8c:	cbz	x1, ac <e2p_string2encmode+0x4c>
  90:	mov	x0, x20
  94:	bl	0 <strcasecmp>
  98:	cbnz	w0, 84 <e2p_string2encmode+0x24>
  9c:	ldr	w0, [x19]
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret
  ac:	adrp	x1, 0 <e2p_encmode2string>
  b0:	mov	x0, x20
  b4:	add	x1, x1, #0x0
  b8:	mov	x2, #0x9                   	// #9
  bc:	bl	0 <strncasecmp>
  c0:	cbnz	w0, fc <e2p_string2encmode+0x9c>
  c4:	ldrb	w0, [x20, #9]
  c8:	cbz	w0, fc <e2p_string2encmode+0x9c>
  cc:	add	x0, x20, #0x9
  d0:	add	x1, sp, #0x28
  d4:	mov	w2, #0xa                   	// #10
  d8:	bl	0 <strtol>
  dc:	cmp	w0, #0xff
  e0:	b.hi	fc <e2p_string2encmode+0x9c>  // b.pmore
  e4:	ldr	x1, [sp, #40]
  e8:	ldrb	w1, [x1]
  ec:	cbnz	w1, fc <e2p_string2encmode+0x9c>
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x29, x30, [sp], #48
  f8:	ret
  fc:	mov	w0, #0xffffffff            	// #-1
 100:	b	f0 <e2p_string2encmode+0x90>

fgetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetproject>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	mov	x21, x1
  14:	mov	w1, #0x800                 	// #2048
  18:	bl	0 <open>
  1c:	mov	w19, w0
  20:	cmn	w0, #0x1
  24:	b.eq	78 <fgetproject+0x78>  // b.none
  28:	mov	x1, #0x581f                	// #22559
  2c:	add	x2, sp, #0x30
  30:	movk	x1, #0x801c, lsl #16
  34:	bl	0 <ioctl>
  38:	mov	w20, w0
  3c:	cbnz	w0, 48 <fgetproject+0x48>
  40:	ldr	w0, [sp, #60]
  44:	str	x0, [x21]
  48:	bl	0 <__errno_location>
  4c:	mov	x21, x0
  50:	mov	w0, w19
  54:	ldr	w19, [x21]
  58:	bl	0 <close>
  5c:	cbz	w19, 64 <fgetproject+0x64>
  60:	str	w19, [x21]
  64:	mov	w0, w20
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldr	x21, [sp, #32]
  70:	ldp	x29, x30, [sp], #80
  74:	ret
  78:	mov	w20, w0
  7c:	b	64 <fgetproject+0x64>

fsetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetproject>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	w1, #0x800                 	// #2048
  14:	bl	0 <open>
  18:	cmn	w0, #0x1
  1c:	b.eq	b8 <fsetproject+0xb8>  // b.none
  20:	mov	x1, #0x581f                	// #22559
  24:	mov	w19, w0
  28:	add	x2, sp, #0x30
  2c:	movk	x1, #0x801c, lsl #16
  30:	stp	x21, x22, [sp, #32]
  34:	bl	0 <ioctl>
  38:	cmn	w0, #0x1
  3c:	b.eq	80 <fsetproject+0x80>  // b.none
  40:	mov	x1, #0x5820                	// #22560
  44:	add	x2, sp, #0x30
  48:	mov	w0, w19
  4c:	movk	x1, #0x401c, lsl #16
  50:	str	w20, [sp, #60]
  54:	bl	0 <ioctl>
  58:	mov	w20, w0
  5c:	cmn	w0, #0x1
  60:	b.eq	80 <fsetproject+0x80>  // b.none
  64:	mov	w0, w19
  68:	bl	0 <close>
  6c:	mov	w0, w20
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldp	x29, x30, [sp], #80
  7c:	ret
  80:	bl	0 <__errno_location>
  84:	mov	x21, x0
  88:	mov	w0, w19
  8c:	ldr	w22, [x21]
  90:	bl	0 <close>
  94:	cbz	w22, b4 <fsetproject+0xb4>
  98:	str	w22, [x21]
  9c:	mov	w20, #0xffffffff            	// #-1
  a0:	mov	w0, w20
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldp	x21, x22, [sp, #32]
  ac:	ldp	x29, x30, [sp], #80
  b0:	ret
  b4:	ldp	x21, x22, [sp, #32]
  b8:	mov	w20, #0xffffffff            	// #-1
  bc:	mov	w0, w20
  c0:	ldp	x19, x20, [sp, #16]
  c4:	ldp	x29, x30, [sp], #80
  c8:	ret

encoding.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_str2encoding>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <e2p_str2encoding>
   8:	add	x1, x1, #0x0
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	bl	0 <strcmp>
  1c:	cbz	w0, 48 <e2p_str2encoding+0x48>
  20:	mov	x0, x19
  24:	adrp	x1, 0 <e2p_str2encoding>
  28:	add	x1, x1, #0x0
  2c:	bl	0 <strcmp>
  30:	cmp	w0, #0x0
  34:	mov	w1, #0xffffffea            	// #-22
  38:	csinc	w0, w1, wzr, ne  // ne = any
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	mov	w0, #0x1                   	// #1
  4c:	b	3c <e2p_str2encoding+0x3c>

0000000000000050 <e2p_encoding2str>:
  50:	cmp	w0, #0x1
  54:	b.eq	90 <e2p_encoding2str+0x40>  // b.none
  58:	stp	x29, x30, [sp, #-32]!
  5c:	mov	w2, w0
  60:	adrp	x1, 0 <e2p_str2encoding>
  64:	mov	x29, sp
  68:	str	x19, [sp, #16]
  6c:	adrp	x19, 0 <e2p_str2encoding>
  70:	add	x19, x19, #0x0
  74:	add	x1, x1, #0x0
  78:	mov	x0, x19
  7c:	bl	0 <sprintf>
  80:	mov	x0, x19
  84:	ldr	x19, [sp, #16]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret
  90:	adrp	x0, 0 <e2p_str2encoding>
  94:	add	x0, x0, #0x0
  98:	ret
  9c:	nop

00000000000000a0 <e2p_get_encoding_flags>:
  a0:	mov	w0, #0x0                   	// #0
  a4:	ret

00000000000000a8 <e2p_str2encoding_flags>:
  a8:	stp	x29, x30, [sp, #-64]!
  ac:	mov	x29, sp
  b0:	stp	x19, x20, [sp, #16]
  b4:	adrp	x20, 0 <e2p_str2encoding>
  b8:	add	x20, x20, #0x0
  bc:	mov	w19, w0
  c0:	mov	x0, x1
  c4:	mov	x1, x20
  c8:	stp	x21, x22, [sp, #32]
  cc:	mov	x21, x2
  d0:	bl	0 <strtok>
  d4:	cmp	w19, #0x1
  d8:	b.ne	128 <e2p_str2encoding_flags+0x80>  // b.any
  dc:	str	x23, [sp, #48]
  e0:	adrp	x19, 0 <e2p_str2encoding>
  e4:	mov	x3, x0
  e8:	add	x19, x19, #0x0
  ec:	mov	w22, #0x6e                  	// #110
  f0:	mov	w23, #0x6f                  	// #111
  f4:	cbz	x0, 164 <e2p_str2encoding_flags+0xbc>
  f8:	ldrb	w2, [x3]
  fc:	mov	x1, x3
 100:	mov	x0, x19
 104:	cmp	w22, w2
 108:	b.ne	13c <e2p_str2encoding_flags+0x94>  // b.any
 10c:	ldrb	w2, [x3, #1]
 110:	cmp	w23, w2
 114:	b.ne	13c <e2p_str2encoding_flags+0x94>  // b.any
 118:	add	x1, x3, #0x2
 11c:	bl	0 <strcmp>
 120:	cbz	w0, 170 <e2p_str2encoding_flags+0xc8>
 124:	ldr	x23, [sp, #48]
 128:	mov	w0, #0xffffffea            	// #-22
 12c:	ldp	x19, x20, [sp, #16]
 130:	ldp	x21, x22, [sp, #32]
 134:	ldp	x29, x30, [sp], #64
 138:	ret
 13c:	bl	0 <strcmp>
 140:	cbnz	w0, 124 <e2p_str2encoding_flags+0x7c>
 144:	ldrh	w0, [x21]
 148:	orr	w0, w0, #0x1
 14c:	strh	w0, [x21]
 150:	mov	x1, x20
 154:	mov	x0, #0x0                   	// #0
 158:	bl	0 <strtok>
 15c:	mov	x3, x0
 160:	cbnz	x0, f8 <e2p_str2encoding_flags+0x50>
 164:	mov	w0, #0x0                   	// #0
 168:	ldr	x23, [sp, #48]
 16c:	b	12c <e2p_str2encoding_flags+0x84>
 170:	ldrh	w0, [x21]
 174:	and	w0, w0, #0xfffffffe
 178:	strh	w0, [x21]
 17c:	b	150 <e2p_str2encoding_flags+0xa8>
