In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_clang_-Os:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_blockSort>:
       0:	stp	x29, x30, [sp, #-96]!
       4:	stp	x28, x27, [sp, #16]
       8:	stp	x26, x25, [sp, #32]
       c:	stp	x24, x23, [sp, #48]
      10:	stp	x22, x21, [sp, #64]
      14:	stp	x20, x19, [sp, #80]
      18:	mov	x29, sp
      1c:	sub	sp, sp, #0x1, lsl #12
      20:	sub	sp, sp, #0x290
      24:	ldrsw	x9, [x0, #108]
      28:	ldr	x19, [x0, #56]
      2c:	ldr	x21, [x0, #40]
      30:	ldr	w23, [x0, #656]
      34:	mov	w8, #0x2710                	// #10000
      38:	mov	x20, x0
      3c:	cmp	w9, w8
      40:	and	x27, x9, #0xffffffff
      44:	b.lt	db8 <BZ2_blockSort+0xdb8>  // b.tstop
      48:	ldr	w8, [x20, #88]
      4c:	str	x9, [sp, #16]
      50:	add	w9, w27, #0x22
      54:	add	w10, w27, #0x23
      58:	tst	w9, #0x1
      5c:	csel	w22, w9, w10, eq  // eq = none
      60:	cmp	w8, #0x1
      64:	csinc	w8, w8, wzr, gt
      68:	mov	w11, #0x64                  	// #100
      6c:	cmp	w8, #0x64
      70:	mov	w9, #0x5556                	// #21846
      74:	csel	w8, w8, w11, lt  // lt = tstop
      78:	movk	w9, #0x5555, lsl #16
      7c:	sub	w8, w8, #0x1
      80:	ldr	x24, [x20, #64]
      84:	smull	x8, w8, w9
      88:	lsr	x9, x8, #63
      8c:	lsr	x8, x8, #32
      90:	add	w8, w8, w9
      94:	str	x20, [sp]
      98:	sxtw	x20, w22
      9c:	cmp	w23, #0x4
      a0:	mul	w8, w8, w27
      a4:	str	w8, [sp, #12]
      a8:	str	w8, [sp, #212]
      ac:	b.ge	e2c <BZ2_blockSort+0xe2c>  // b.tcont
      b0:	mov	w2, #0x40004               	// #262148
      b4:	mov	x0, x21
      b8:	mov	w1, wzr
      bc:	add	x28, x24, w22, sxtw
      c0:	bl	0 <memset>
      c4:	ldrb	w10, [x24]
      c8:	sub	w12, w27, #0x4
      cc:	sub	w13, w27, #0x3
      d0:	sub	w14, w27, #0x2
      d4:	sub	w9, w27, #0x1
      d8:	add	x15, x20, w12, sxtw #1
      dc:	add	x16, x20, w13, sxtw #1
      e0:	add	x17, x20, w14, sxtw #1
      e4:	mov	x8, xzr
      e8:	str	w9, [sp, #36]
      ec:	sub	w9, w27, #0x1
      f0:	add	x11, x24, w12, sxtw
      f4:	add	x12, x24, w13, sxtw
      f8:	add	x13, x24, w14, sxtw
      fc:	add	x14, x24, x15
     100:	add	x15, x24, x16
     104:	lsl	w10, w10, #8
     108:	add	x16, x24, x17
     10c:	add	w17, w9, w8
     110:	strh	wzr, [x28, w17, uxtw #1]
     114:	ldrb	w17, [x24, w17, uxtw]
     118:	lsl	w17, w17, #8
     11c:	orr	w10, w17, w10, asr #8
     120:	ldr	w17, [x21, w10, sxtw #2]
     124:	add	w17, w17, #0x1
     128:	str	w17, [x21, w10, sxtw #2]
     12c:	strh	wzr, [x16, x8, lsl #1]
     130:	ldrb	w17, [x13, x8]
     134:	lsl	w17, w17, #8
     138:	orr	w10, w17, w10, asr #8
     13c:	ldr	w17, [x21, w10, sxtw #2]
     140:	add	w17, w17, #0x1
     144:	str	w17, [x21, w10, sxtw #2]
     148:	strh	wzr, [x15, x8, lsl #1]
     14c:	ldrb	w17, [x12, x8]
     150:	lsl	w17, w17, #8
     154:	orr	w10, w17, w10, asr #8
     158:	ldr	w17, [x21, w10, sxtw #2]
     15c:	add	w17, w17, #0x1
     160:	str	w17, [x21, w10, sxtw #2]
     164:	strh	wzr, [x14, x8, lsl #1]
     168:	ldrb	w17, [x11, x8]
     16c:	sub	x8, x8, #0x4
     170:	add	w18, w27, w8
     174:	add	w18, w18, #0x3
     178:	lsl	w17, w17, #8
     17c:	orr	w10, w17, w10, asr #8
     180:	ldr	w17, [x21, w10, sxtw #2]
     184:	cmp	w18, #0x6
     188:	add	w17, w17, #0x1
     18c:	str	w17, [x21, w10, sxtw #2]
     190:	b.gt	10c <BZ2_blockSort+0x10c>
     194:	ldr	x12, [sp, #16]
     198:	add	w9, w27, w8
     19c:	add	w9, w9, #0x3
     1a0:	cmp	w9, #0x4
     1a4:	b.lt	1e0 <BZ2_blockSort+0x1e0>  // b.tstop
     1a8:	sub	w9, w12, #0x1
     1ac:	add	x8, x9, x8
     1b0:	and	x8, x8, #0xffffffff
     1b4:	add	x9, x24, x20
     1b8:	strh	wzr, [x9, x8, lsl #1]
     1bc:	ldrb	w11, [x24, x8]
     1c0:	cmp	x8, #0x0
     1c4:	sub	x8, x8, #0x1
     1c8:	lsl	w11, w11, #8
     1cc:	orr	w10, w11, w10, asr #8
     1d0:	ldr	w11, [x21, w10, sxtw #2]
     1d4:	add	w11, w11, #0x1
     1d8:	str	w11, [x21, w10, sxtw #2]
     1dc:	b.gt	1b8 <BZ2_blockSort+0x1b8>
     1e0:	add	x9, x20, x12, lsl #1
     1e4:	mov	x8, xzr
     1e8:	add	x9, x24, x9
     1ec:	add	x10, x24, x12
     1f0:	ldrb	w11, [x24, x8]
     1f4:	strb	w11, [x10, x8]
     1f8:	strh	wzr, [x9, x8, lsl #1]
     1fc:	add	x8, x8, #0x1
     200:	cmp	x8, #0x22
     204:	b.ne	1f0 <BZ2_blockSort+0x1f0>  // b.any
     208:	cmp	w23, #0x4
     20c:	b.ge	e4c <BZ2_blockSort+0xe4c>  // b.tcont
     210:	mov	x8, x21
     214:	ldr	w9, [x8], #4
     218:	mov	x10, xzr
     21c:	ldr	w11, [x8, x10]
     220:	add	w9, w11, w9
     224:	str	w9, [x8, x10]
     228:	add	x10, x10, #0x4
     22c:	cmp	x10, #0x40, lsl #12
     230:	b.ne	21c <BZ2_blockSort+0x21c>  // b.any
     234:	ldrb	w9, [x24]
     238:	sub	w10, w12, #0x1
     23c:	sub	w11, w27, #0x4
     240:	sub	w12, w27, #0x3
     244:	sub	w13, w27, #0x2
     248:	mov	x8, xzr
     24c:	add	x14, x24, w11, sxtw
     250:	add	x15, x24, w12, sxtw
     254:	lsl	w9, w9, #8
     258:	add	x16, x24, w13, sxtw
     25c:	add	x17, x10, x8
     260:	ldrb	w18, [x24, w17, uxtw]
     264:	ubfx	w9, w9, #8, #8
     268:	bfi	w9, w18, #8, #8
     26c:	ldr	w0, [x21, w9, uxtw #2]
     270:	sub	w0, w0, #0x1
     274:	str	w0, [x21, w9, uxtw #2]
     278:	str	w17, [x19, w0, sxtw #2]
     27c:	ldrb	w17, [x16, x8]
     280:	lsl	x9, x18, #2
     284:	add	w0, w13, w8
     288:	bfi	x9, x17, #10, #8
     28c:	ldr	w18, [x21, x9]
     290:	lsl	x17, x17, #2
     294:	sub	w18, w18, #0x1
     298:	str	w18, [x21, x9]
     29c:	str	w0, [x19, w18, sxtw #2]
     2a0:	ldrb	w9, [x15, x8]
     2a4:	add	w0, w12, w8
     2a8:	bfi	x17, x9, #10, #8
     2ac:	ldr	w18, [x21, x17]
     2b0:	sub	w18, w18, #0x1
     2b4:	str	w18, [x21, x17]
     2b8:	str	w0, [x19, w18, sxtw #2]
     2bc:	ldrb	w17, [x14, x8]
     2c0:	add	w18, w11, w8
     2c4:	sub	x8, x8, #0x4
     2c8:	add	w1, w27, w8
     2cc:	bfi	w9, w17, #8, #24
     2d0:	and	x17, x9, #0xffff
     2d4:	ldr	w0, [x21, x17, lsl #2]
     2d8:	add	w1, w1, #0x3
     2dc:	cmp	w1, #0x6
     2e0:	sub	w0, w0, #0x1
     2e4:	str	w0, [x21, x17, lsl #2]
     2e8:	str	w18, [x19, w0, sxtw #2]
     2ec:	b.gt	25c <BZ2_blockSort+0x25c>
     2f0:	add	w10, w27, w8
     2f4:	add	w10, w10, #0x3
     2f8:	cmp	w10, #0x4
     2fc:	b.lt	33c <BZ2_blockSort+0x33c>  // b.tstop
     300:	sub	w10, w27, #0x1
     304:	add	x8, x10, x8
     308:	and	x10, x8, #0xffffffff
     30c:	ldrb	w11, [x24, x10]
     310:	ubfx	w9, w9, #8, #8
     314:	cmp	x10, #0x0
     318:	sub	x10, x10, #0x1
     31c:	bfi	w9, w11, #8, #24
     320:	and	x11, x9, #0xffff
     324:	ldr	w12, [x21, x11, lsl #2]
     328:	sub	w12, w12, #0x1
     32c:	str	w12, [x21, x11, lsl #2]
     330:	str	w8, [x19, w12, sxtw #2]
     334:	sub	w8, w8, #0x1
     338:	b.gt	30c <BZ2_blockSort+0x30c>
     33c:	add	x0, sp, #0x8d8
     340:	mov	w2, #0x100                 	// #256
     344:	mov	w1, wzr
     348:	bl	0 <memset>
     34c:	adrp	x9, 0 <BZ2_blockSort>
     350:	ldr	q0, [x9]
     354:	mov	x8, xzr
     358:	add	x9, sp, #0x9d8
     35c:	movi	v1.4s, #0x4
     360:	str	q0, [x9, x8]
     364:	add	x8, x8, #0x10
     368:	cmp	x8, #0x400
     36c:	add	v0.4s, v0.4s, v1.4s
     370:	b.ne	360 <BZ2_blockSort+0x360>  // b.any
     374:	mov	w8, #0x5556                	// #21846
     378:	mov	w9, #0x16c                 	// #364
     37c:	movk	w8, #0x5555, lsl #16
     380:	add	x10, sp, #0x9d8
     384:	str	w23, [sp, #76]
     388:	smull	x11, w9, w8
     38c:	lsr	x12, x11, #63
     390:	lsr	x11, x11, #32
     394:	cmp	w9, #0x2ff
     398:	add	w11, w11, w12
     39c:	b.gt	418 <BZ2_blockSort+0x418>
     3a0:	mov	w12, wzr
     3a4:	sxtw	x13, w11
     3a8:	ldr	w14, [x10, x13, lsl #2]
     3ac:	lsl	w15, w14, #8
     3b0:	add	w16, w15, #0x100
     3b4:	ldr	w16, [x21, w16, sxtw #2]
     3b8:	ldr	w15, [x21, w15, sxtw #2]
     3bc:	sub	w15, w16, w15
     3c0:	mov	w16, w12
     3c4:	ldr	w17, [x10, w16, sxtw #2]
     3c8:	add	w1, w11, w16
     3cc:	lsl	w18, w17, #8
     3d0:	add	w0, w18, #0x100
     3d4:	ldr	w0, [x21, w0, sxtw #2]
     3d8:	ldr	w18, [x21, w18, sxtw #2]
     3dc:	sub	w18, w0, w18
     3e0:	cmp	w18, w15
     3e4:	sxtw	x0, w1
     3e8:	b.ls	400 <BZ2_blockSort+0x400>  // b.plast
     3ec:	sxtw	x18, w16
     3f0:	subs	w16, w18, w11
     3f4:	str	w17, [x10, x0, lsl #2]
     3f8:	b.ge	3c4 <BZ2_blockSort+0x3c4>  // b.tcont
     3fc:	b	404 <BZ2_blockSort+0x404>
     400:	mov	x18, x0
     404:	cmp	x13, #0xff
     408:	add	x13, x13, #0x1
     40c:	add	w12, w12, #0x1
     410:	str	w14, [x10, x18, lsl #2]
     414:	b.lt	3a8 <BZ2_blockSort+0x3a8>  // b.tstop
     418:	sub	w9, w9, #0x3
     41c:	cmp	w9, #0x2
     420:	mov	w9, w11
     424:	b.hi	388 <BZ2_blockSort+0x388>  // b.pmore
     428:	add	x8, x19, #0x4
     42c:	ldr	w25, [sp, #12]
     430:	str	x8, [sp, #80]
     434:	add	x8, x21, #0x4
     438:	str	x8, [sp, #40]
     43c:	sub	x8, x19, #0x4
     440:	add	x0, sp, #0x1, lsl #12
     444:	mov	w22, wzr
     448:	str	x8, [sp, #24]
     44c:	add	x23, sp, #0x8d8
     450:	add	x26, sp, #0x4d8
     454:	add	x20, sp, #0xd8
     458:	mov	w18, #0xfffe                	// #65534
     45c:	add	x0, x0, #0xf8
     460:	add	x1, sp, #0xf68
     464:	add	x2, sp, #0xdd8
     468:	mov	x8, xzr
     46c:	mov	x9, xzr
     470:	str	w25, [sp, #200]
     474:	str	x21, [sp, #56]
     478:	add	x9, sp, #0x9d8
     47c:	ldr	w11, [x9, x8, lsl #2]
     480:	str	x8, [sp, #48]
     484:	mov	x9, xzr
     488:	mov	x10, xzr
     48c:	sxtw	x8, w11
     490:	str	x8, [sp, #120]
     494:	lsl	w8, w11, #8
     498:	sxtw	x8, w8
     49c:	str	x11, [sp, #160]
     4a0:	str	x8, [sp, #128]
     4a4:	ldr	x8, [sp, #160]
     4a8:	cmp	x9, x8
     4ac:	b.eq	af4 <BZ2_blockSort+0xaf4>  // b.none
     4b0:	ldr	x8, [sp, #128]
     4b4:	str	x9, [sp, #152]
     4b8:	add	x8, x9, x8
     4bc:	ldr	w9, [x21, x8, lsl #2]
     4c0:	str	x8, [sp, #168]
     4c4:	tbnz	w9, #21, a8c <BZ2_blockSort+0xa8c>
     4c8:	add	x8, x21, x8, lsl #2
     4cc:	ldr	w8, [x8, #4]
     4d0:	and	w10, w9, #0xffdfffff
     4d4:	and	w8, w8, #0xffdfffff
     4d8:	sub	w8, w8, #0x1
     4dc:	stp	w8, w10, [sp, #104]
     4e0:	subs	w8, w8, w10
     4e4:	b.le	a8c <BZ2_blockSort+0xa8c>
     4e8:	ldr	w9, [sp, #76]
     4ec:	cmp	w9, #0x4
     4f0:	b.ge	b04 <BZ2_blockSort+0xb04>  // b.tcont
     4f4:	ldr	w8, [sp, #108]
     4f8:	mov	w3, #0x1                   	// #1
     4fc:	str	w8, [sp, #4344]
     500:	ldr	w8, [sp, #104]
     504:	str	w8, [sp, #3944]
     508:	mov	w8, #0x2                   	// #2
     50c:	str	w8, [sp, #3544]
     510:	sxtw	x23, w3
     514:	sub	x3, x23, #0x1
     518:	cmp	w23, #0x62
     51c:	b.lt	544 <BZ2_blockSort+0x544>  // b.tstop
     520:	mov	w0, #0x3e9                 	// #1001
     524:	mov	x26, x3
     528:	bl	0 <BZ2_bz__AssertH__fail>
     52c:	add	x0, sp, #0x1, lsl #12
     530:	mov	x3, x26
     534:	add	x2, sp, #0xdd8
     538:	add	x1, sp, #0xf68
     53c:	add	x0, x0, #0xf8
     540:	mov	w18, #0xfffe                	// #65534
     544:	ldr	w4, [x0, x3, lsl #2]
     548:	ldr	w8, [x1, x3, lsl #2]
     54c:	ldr	w26, [x2, x3, lsl #2]
     550:	sub	w9, w8, w4
     554:	cmp	w9, #0x14
     558:	sxtw	x13, w8
     55c:	b.lt	6bc <BZ2_blockSort+0x6bc>  // b.tstop
     560:	cmp	w26, #0xf
     564:	b.ge	6bc <BZ2_blockSort+0x6bc>  // b.tcont
     568:	sxtw	x12, w4
     56c:	ldr	w9, [x19, x13, lsl #2]
     570:	add	w10, w8, w4
     574:	ldr	w11, [x19, x12, lsl #2]
     578:	asr	w10, w10, #1
     57c:	ldr	w10, [x19, w10, sxtw #2]
     580:	add	w9, w9, w26
     584:	add	w11, w11, w26
     588:	ldrb	w9, [x24, w9, uxtw]
     58c:	ldrb	w11, [x24, w11, uxtw]
     590:	add	w10, w10, w26
     594:	ldrb	w10, [x24, w10, uxtw]
     598:	cmp	w11, w9
     59c:	csel	w13, w11, w9, hi  // hi = pmore
     5a0:	csel	w9, w9, w11, hi  // hi = pmore
     5a4:	cmp	w9, w10
     5a8:	csel	w9, w9, w10, hi  // hi = pmore
     5ac:	cmp	w13, w10
     5b0:	csel	w14, w9, w13, hi  // hi = pmore
     5b4:	mov	w11, w8
     5b8:	mov	w9, w4
     5bc:	mov	w13, w8
     5c0:	mov	w10, w4
     5c4:	cmp	w10, w13
     5c8:	b.gt	630 <BZ2_blockSort+0x630>
     5cc:	sxtw	x15, w13
     5d0:	sxtw	x9, w9
     5d4:	sxtw	x16, w10
     5d8:	ldr	w10, [x19, x16, lsl #2]
     5dc:	add	w17, w10, w26
     5e0:	ldrb	w17, [x24, w17, uxtw]
     5e4:	subs	w17, w17, w14
     5e8:	b.eq	608 <BZ2_blockSort+0x608>  // b.none
     5ec:	cmp	w17, #0x0
     5f0:	b.gt	62c <BZ2_blockSort+0x62c>
     5f4:	add	x10, x16, #0x1
     5f8:	cmp	x16, x15
     5fc:	mov	x16, x10
     600:	b.lt	5d8 <BZ2_blockSort+0x5d8>  // b.tstop
     604:	b	630 <BZ2_blockSort+0x630>
     608:	ldr	w17, [x19, x9, lsl #2]
     60c:	cmp	w13, w16
     610:	str	w17, [x19, x16, lsl #2]
     614:	str	w10, [x19, x9, lsl #2]
     618:	add	x9, x9, #0x1
     61c:	add	w10, w16, #0x1
     620:	b.gt	5d4 <BZ2_blockSort+0x5d4>
     624:	add	w10, w16, #0x1
     628:	b	630 <BZ2_blockSort+0x630>
     62c:	mov	w10, w16
     630:	cmp	w10, w13
     634:	b.gt	6a8 <BZ2_blockSort+0x6a8>
     638:	sxtw	x15, w10
     63c:	sxtw	x11, w11
     640:	sxtw	x16, w13
     644:	ldr	w13, [x19, x16, lsl #2]
     648:	add	w17, w13, w26
     64c:	ldrb	w17, [x24, w17, uxtw]
     650:	subs	w17, w17, w14
     654:	b.eq	670 <BZ2_blockSort+0x670>  // b.none
     658:	tbnz	w17, #31, 690 <BZ2_blockSort+0x690>
     65c:	sub	x13, x16, #0x1
     660:	cmp	x16, x15
     664:	mov	x16, x13
     668:	b.gt	644 <BZ2_blockSort+0x644>
     66c:	b	6a8 <BZ2_blockSort+0x6a8>
     670:	ldr	w17, [x19, x11, lsl #2]
     674:	cmp	w10, w16
     678:	str	w17, [x19, x16, lsl #2]
     67c:	str	w13, [x19, x11, lsl #2]
     680:	sub	x11, x11, #0x1
     684:	sub	w13, w16, #0x1
     688:	b.lt	640 <BZ2_blockSort+0x640>  // b.tstop
     68c:	b	6a8 <BZ2_blockSort+0x6a8>
     690:	ldr	w17, [x19, x15, lsl #2]
     694:	str	w13, [x19, x15, lsl #2]
     698:	add	w10, w10, #0x1
     69c:	sub	w13, w16, #0x1
     6a0:	str	w17, [x19, x16, lsl #2]
     6a4:	b	5c4 <BZ2_blockSort+0x5c4>
     6a8:	cmp	w11, w9
     6ac:	b.ge	6f8 <BZ2_blockSort+0x6f8>  // b.tcont
     6b0:	add	w8, w26, #0x1
     6b4:	str	w8, [x2, x3, lsl #2]
     6b8:	b	518 <BZ2_blockSort+0x518>
     6bc:	cmp	w9, #0x1
     6c0:	b.lt	6e8 <BZ2_blockSort+0x6e8>  // b.tstop
     6c4:	adrp	x11, 0 <BZ2_blockSort>
     6c8:	mov	x8, xzr
     6cc:	add	x11, x11, #0x0
     6d0:	ldr	w10, [x11, x8, lsl #2]
     6d4:	add	x8, x8, #0x1
     6d8:	cmp	w10, w9
     6dc:	b.le	6d0 <BZ2_blockSort+0x6d0>
     6e0:	cmp	w8, #0x1
     6e4:	b.ne	83c <BZ2_blockSort+0x83c>  // b.any
     6e8:	mov	w8, w25
     6ec:	mov	w9, w25
     6f0:	tbz	w25, #31, 82c <BZ2_blockSort+0x82c>
     6f4:	b	abc <BZ2_blockSort+0xabc>
     6f8:	sub	w14, w9, w4
     6fc:	sub	w15, w10, w9
     700:	cmp	w14, w15
     704:	csel	w15, w14, w15, lt  // lt = tstop
     708:	cmp	w15, #0x1
     70c:	b.lt	73c <BZ2_blockSort+0x73c>  // b.tstop
     710:	sub	w14, w10, w15
     714:	add	x12, x19, x12, lsl #2
     718:	add	x14, x19, w14, sxtw #2
     71c:	add	w15, w15, #0x1
     720:	ldr	w16, [x14]
     724:	ldr	w17, [x12]
     728:	sub	w15, w15, #0x1
     72c:	cmp	w15, #0x1
     730:	str	w16, [x12], #4
     734:	str	w17, [x14], #4
     738:	b.gt	720 <BZ2_blockSort+0x720>
     73c:	sub	w12, w8, w11
     740:	sub	w11, w11, w13
     744:	cmp	w12, w11
     748:	csel	w14, w12, w11, lt  // lt = tstop
     74c:	cmp	w14, #0x1
     750:	b.lt	784 <BZ2_blockSort+0x784>  // b.tstop
     754:	ldr	x15, [sp, #80]
     758:	sub	w13, w8, w14
     75c:	add	x12, x19, w10, sxtw #2
     760:	add	w14, w14, #0x1
     764:	add	x13, x15, w13, sxtw #2
     768:	ldr	w15, [x13]
     76c:	ldr	w16, [x12]
     770:	sub	w14, w14, #0x1
     774:	cmp	w14, #0x1
     778:	str	w15, [x12], #4
     77c:	str	w16, [x13], #4
     780:	b.gt	768 <BZ2_blockSort+0x768>
     784:	sub	w9, w4, w9
     788:	sub	w11, w8, w11
     78c:	add	w9, w9, w10
     790:	add	w10, w11, #0x1
     794:	sub	w12, w9, #0x1
     798:	sub	w10, w8, w10
     79c:	sub	w14, w12, w4
     7a0:	cmp	w14, w10
     7a4:	csinc	w10, w4, w11, lt  // lt = tstop
     7a8:	csel	w15, w12, w8, lt  // lt = tstop
     7ac:	sub	w13, w11, w9
     7b0:	csel	w8, w8, w12, lt  // lt = tstop
     7b4:	sub	w12, w15, w10
     7b8:	csinc	w14, w4, w11, ge  // ge = tcont
     7bc:	cmp	w12, w13
     7c0:	csel	w12, w9, w10, lt  // lt = tstop
     7c4:	csel	w13, w15, w11, lt  // lt = tstop
     7c8:	csel	w11, w11, w15, lt  // lt = tstop
     7cc:	sub	w16, w8, w14
     7d0:	csel	w9, w10, w9, lt  // lt = tstop
     7d4:	sub	w10, w11, w12
     7d8:	cinc	w15, w26, ge  // ge = tcont
     7dc:	cinc	w17, w26, lt  // lt = tstop
     7e0:	cmp	w16, w10
     7e4:	lsl	x10, x23, #2
     7e8:	add	x10, x10, #0x4
     7ec:	csel	w16, w14, w12, lt  // lt = tstop
     7f0:	csel	w12, w12, w14, lt  // lt = tstop
     7f4:	csel	w14, w8, w11, lt  // lt = tstop
     7f8:	csel	w8, w11, w8, lt  // lt = tstop
     7fc:	csel	w11, w26, w17, lt  // lt = tstop
     800:	csel	w17, w17, w26, lt  // lt = tstop
     804:	str	w12, [x0, x3, lsl #2]
     808:	str	w8, [x1, x3, lsl #2]
     80c:	str	w17, [x2, x3, lsl #2]
     810:	str	w16, [x0, x23, lsl #2]
     814:	str	w14, [x1, x23, lsl #2]
     818:	str	w11, [x2, x23, lsl #2]
     81c:	str	w9, [x0, x10]
     820:	str	w13, [x1, x10]
     824:	str	w15, [x2, x10]
     828:	add	w3, w23, #0x2
     82c:	ldr	w8, [sp, #200]
     830:	cmp	w3, #0x0
     834:	b.gt	510 <BZ2_blockSort+0x510>
     838:	b	abc <BZ2_blockSort+0xabc>
     83c:	sub	x8, x8, #0x1
     840:	add	w9, w4, #0x1
     844:	str	w22, [sp, #92]
     848:	mov	x22, x27
     84c:	str	w9, [sp, #116]
     850:	and	x8, x8, #0xffffffff
     854:	add	w9, w4, #0x2
     858:	str	x3, [sp, #64]
     85c:	str	w9, [sp, #112]
     860:	str	x4, [sp, #96]
     864:	str	x13, [sp, #184]
     868:	str	x8, [sp, #136]
     86c:	sub	x9, x8, #0x1
     870:	adrp	x8, 0 <BZ2_blockSort>
     874:	add	x8, x8, #0x0
     878:	ldr	w20, [x8, x9, lsl #2]
     87c:	str	x9, [sp, #144]
     880:	add	w8, w20, w4
     884:	sxtw	x21, w8
     888:	ldr	w8, [sp, #112]
     88c:	mov	x10, x21
     890:	str	w8, [sp, #180]
     894:	ldr	w8, [sp, #116]
     898:	stp	w8, w4, [sp, #192]
     89c:	mov	w8, w4
     8a0:	cmp	x10, x13
     8a4:	b.gt	a48 <BZ2_blockSort+0xa48>
     8a8:	ldr	w8, [x19, x10, lsl #2]
     8ac:	ldr	w27, [sp, #196]
     8b0:	str	x10, [sp, #200]
     8b4:	add	w23, w8, w26
     8b8:	str	w8, [sp, #176]
     8bc:	ldr	w8, [x19, w27, sxtw #2]
     8c0:	add	x5, sp, #0xd4
     8c4:	mov	w1, w23
     8c8:	mov	x2, x24
     8cc:	add	w0, w8, w26
     8d0:	mov	x3, x28
     8d4:	mov	w4, w22
     8d8:	sxtw	x25, w27
     8dc:	bl	1704 <mainGtU>
     8e0:	tst	w0, #0xff
     8e4:	b.eq	904 <BZ2_blockSort+0x904>  // b.none
     8e8:	ldr	w8, [x19, x25, lsl #2]
     8ec:	add	w9, w20, w27
     8f0:	cmp	w25, w21
     8f4:	sub	w27, w25, w20
     8f8:	str	w8, [x19, w9, sxtw #2]
     8fc:	b.ge	8bc <BZ2_blockSort+0x8bc>  // b.tcont
     900:	b	90c <BZ2_blockSort+0x90c>
     904:	add	w8, w20, w25
     908:	sxtw	x25, w8
     90c:	ldr	x13, [sp, #184]
     910:	ldr	x8, [sp, #200]
     914:	ldr	w9, [sp, #176]
     918:	cmp	x8, x13
     91c:	str	w9, [x19, x25, lsl #2]
     920:	b.ge	a48 <BZ2_blockSort+0xa48>  // b.tcont
     924:	add	x8, x8, #0x1
     928:	ldr	w8, [x19, x8, lsl #2]
     92c:	ldr	w27, [sp, #192]
     930:	add	w23, w8, w26
     934:	str	w8, [sp, #176]
     938:	ldr	w8, [x19, w27, sxtw #2]
     93c:	add	x5, sp, #0xd4
     940:	mov	w1, w23
     944:	mov	x2, x24
     948:	add	w0, w8, w26
     94c:	mov	x3, x28
     950:	mov	w4, w22
     954:	sxtw	x25, w27
     958:	bl	1704 <mainGtU>
     95c:	tst	w0, #0xff
     960:	b.eq	980 <BZ2_blockSort+0x980>  // b.none
     964:	ldr	w8, [x19, x25, lsl #2]
     968:	add	w9, w20, w27
     96c:	cmp	w25, w21
     970:	sub	w27, w25, w20
     974:	str	w8, [x19, w9, sxtw #2]
     978:	b.ge	938 <BZ2_blockSort+0x938>  // b.tcont
     97c:	b	988 <BZ2_blockSort+0x988>
     980:	add	w8, w20, w25
     984:	sxtw	x25, w8
     988:	ldr	x8, [sp, #200]
     98c:	ldr	x13, [sp, #184]
     990:	ldr	w9, [sp, #176]
     994:	add	x8, x8, #0x2
     998:	cmp	x8, x13
     99c:	str	w9, [x19, x25, lsl #2]
     9a0:	b.gt	a48 <BZ2_blockSort+0xa48>
     9a4:	ldr	w8, [x19, x8, lsl #2]
     9a8:	ldr	w27, [sp, #180]
     9ac:	add	w23, w8, w26
     9b0:	str	w8, [sp, #176]
     9b4:	ldr	w8, [x19, w27, sxtw #2]
     9b8:	add	x5, sp, #0xd4
     9bc:	mov	w1, w23
     9c0:	mov	x2, x24
     9c4:	add	w0, w8, w26
     9c8:	mov	x3, x28
     9cc:	mov	w4, w22
     9d0:	sxtw	x25, w27
     9d4:	bl	1704 <mainGtU>
     9d8:	tst	w0, #0xff
     9dc:	b.eq	9fc <BZ2_blockSort+0x9fc>  // b.none
     9e0:	ldr	w8, [x19, x25, lsl #2]
     9e4:	add	w9, w20, w27
     9e8:	cmp	w25, w21
     9ec:	sub	w27, w25, w20
     9f0:	str	w8, [x19, w9, sxtw #2]
     9f4:	b.ge	9b4 <BZ2_blockSort+0x9b4>  // b.tcont
     9f8:	b	a04 <BZ2_blockSort+0xa04>
     9fc:	add	w8, w20, w25
     a00:	sxtw	x25, w8
     a04:	ldr	w9, [sp, #196]
     a08:	ldr	w8, [sp, #176]
     a0c:	ldr	x10, [sp, #200]
     a10:	ldr	x13, [sp, #184]
     a14:	add	w9, w9, #0x3
     a18:	str	w9, [sp, #196]
     a1c:	ldr	w9, [sp, #192]
     a20:	str	w8, [x19, x25, lsl #2]
     a24:	ldr	w8, [sp, #212]
     a28:	add	x10, x10, #0x3
     a2c:	add	w9, w9, #0x3
     a30:	str	w9, [sp, #192]
     a34:	ldr	w9, [sp, #180]
     a38:	add	w9, w9, #0x3
     a3c:	str	w9, [sp, #180]
     a40:	tbz	w8, #31, 8a0 <BZ2_blockSort+0x8a0>
     a44:	b	a94 <BZ2_blockSort+0xa94>
     a48:	ldr	x8, [sp, #136]
     a4c:	ldr	x4, [sp, #96]
     a50:	cmp	x8, #0x1
     a54:	ldr	x8, [sp, #144]
     a58:	b.gt	868 <BZ2_blockSort+0x868>
     a5c:	ldr	w25, [sp, #212]
     a60:	ldp	x21, x3, [sp, #56]
     a64:	mov	x27, x22
     a68:	ldr	w22, [sp, #92]
     a6c:	add	x0, sp, #0x1, lsl #12
     a70:	add	x20, sp, #0xd8
     a74:	mov	w18, #0xfffe                	// #65534
     a78:	add	x0, x0, #0xf8
     a7c:	add	x1, sp, #0xf68
     a80:	add	x2, sp, #0xdd8
     a84:	str	w25, [sp, #200]
     a88:	b	6e8 <BZ2_blockSort+0x6e8>
     a8c:	mov	w8, w25
     a90:	b	ae0 <BZ2_blockSort+0xae0>
     a94:	ldr	x21, [sp, #56]
     a98:	mov	x27, x22
     a9c:	ldr	w22, [sp, #92]
     aa0:	add	x0, sp, #0x1, lsl #12
     aa4:	str	w8, [sp, #200]
     aa8:	add	x20, sp, #0xd8
     aac:	mov	w18, #0xfffe                	// #65534
     ab0:	add	x0, x0, #0xf8
     ab4:	add	x1, sp, #0xf68
     ab8:	add	x2, sp, #0xdd8
     abc:	tbnz	w8, #31, d98 <BZ2_blockSort+0xd98>
     ac0:	ldr	x9, [sp, #168]
     ac4:	ldp	w11, w10, [sp, #104]
     ac8:	add	x23, sp, #0x8d8
     acc:	add	x26, sp, #0x4d8
     ad0:	ldr	w9, [x21, x9, lsl #2]
     ad4:	sub	w10, w22, w10
     ad8:	add	w10, w10, w11
     adc:	add	w22, w10, #0x1
     ae0:	ldr	x10, [sp, #168]
     ae4:	orr	w9, w9, #0x200000
     ae8:	mov	w25, w8
     aec:	str	w9, [x21, x10, lsl #2]
     af0:	ldr	x9, [sp, #152]
     af4:	add	x9, x9, #0x1
     af8:	cmp	x9, #0x100
     afc:	b.ne	4a4 <BZ2_blockSort+0x4a4>  // b.any
     b00:	b	b3c <BZ2_blockSort+0xb3c>
     b04:	adrp	x9, 0 <stderr>
     b08:	ldr	x0, [x9]
     b0c:	adrp	x1, 0 <BZ2_blockSort>
     b10:	add	w5, w8, #0x1
     b14:	add	x1, x1, #0x0
     b18:	ldp	x3, x2, [sp, #152]
     b1c:	mov	w4, w22
     b20:	bl	0 <fprintf>
     b24:	add	x0, sp, #0x1, lsl #12
     b28:	add	x2, sp, #0xdd8
     b2c:	add	x1, sp, #0xf68
     b30:	add	x0, x0, #0xf8
     b34:	mov	w18, #0xfffe                	// #65534
     b38:	b	4f4 <BZ2_blockSort+0x4f4>
     b3c:	ldr	x8, [sp, #120]
     b40:	ldrb	w8, [x23, x8]
     b44:	cbz	w8, b64 <BZ2_blockSort+0xb64>
     b48:	mov	w0, #0x3ee                 	// #1006
     b4c:	bl	0 <BZ2_bz__AssertH__fail>
     b50:	add	x0, sp, #0x1, lsl #12
     b54:	add	x2, sp, #0xdd8
     b58:	add	x1, sp, #0xf68
     b5c:	add	x0, x0, #0xf8
     b60:	mov	w18, #0xfffe                	// #65534
     b64:	ldr	x9, [sp, #40]
     b68:	ldr	x10, [sp, #120]
     b6c:	mov	x8, xzr
     b70:	add	x9, x9, x10, lsl #2
     b74:	ldur	w10, [x9, #-4]
     b78:	and	w10, w10, #0xffdfffff
     b7c:	str	w10, [x26, x8]
     b80:	ldr	w10, [x9]
     b84:	add	x9, x9, #0x400
     b88:	and	w10, w10, #0xffdfffff
     b8c:	sub	w10, w10, #0x1
     b90:	str	w10, [x20, x8]
     b94:	add	x8, x8, #0x4
     b98:	cmp	x8, #0x400
     b9c:	b.ne	b74 <BZ2_blockSort+0xb74>  // b.any
     ba0:	ldr	x8, [sp, #128]
     ba4:	add	x13, sp, #0xd8
     ba8:	ldrsw	x9, [x21, x8, lsl #2]
     bac:	ldr	x8, [sp, #120]
     bb0:	and	x9, x9, #0xffffffffffdfffff
     bb4:	ldr	w8, [x26, x8, lsl #2]
     bb8:	cmp	w9, w8
     bbc:	b.ge	c00 <BZ2_blockSort+0xc00>  // b.tcont
     bc0:	ldr	w10, [x19, x9, lsl #2]
     bc4:	sub	w10, w10, #0x1
     bc8:	and	w11, w27, w10, asr #31
     bcc:	add	w10, w11, w10
     bd0:	ldrb	w11, [x24, w10, sxtw]
     bd4:	ldrb	w12, [x23, x11]
     bd8:	cbnz	w12, bf4 <BZ2_blockSort+0xbf4>
     bdc:	ldrsw	x8, [x26, x11, lsl #2]
     be0:	add	w12, w8, #0x1
     be4:	str	w12, [x26, x11, lsl #2]
     be8:	str	w10, [x19, x8, lsl #2]
     bec:	ldr	x8, [sp, #120]
     bf0:	ldr	w8, [x26, x8, lsl #2]
     bf4:	add	x9, x9, #0x1
     bf8:	cmp	x9, w8, sxtw
     bfc:	b.lt	bc0 <BZ2_blockSort+0xbc0>  // b.tstop
     c00:	ldr	x9, [sp, #128]
     c04:	add	w20, w9, #0x100
     c08:	ldr	x9, [sp, #120]
     c0c:	ldr	w10, [x21, w20, sxtw #2]
     c10:	ldr	w9, [x13, x9, lsl #2]
     c14:	and	w10, w10, #0xffdfffff
     c18:	sub	w10, w10, #0x1
     c1c:	cmp	w10, w9
     c20:	b.le	c60 <BZ2_blockSort+0xc60>
     c24:	ldr	w11, [x19, w10, sxtw #2]
     c28:	sub	w11, w11, #0x1
     c2c:	and	w12, w27, w11, asr #31
     c30:	add	w11, w12, w11
     c34:	ldrb	w12, [x24, w11, sxtw]
     c38:	ldrb	w13, [x23, x12]
     c3c:	cbnz	w13, c18 <BZ2_blockSort+0xc18>
     c40:	add	x14, sp, #0xd8
     c44:	ldrsw	x9, [x14, x12, lsl #2]
     c48:	sub	w13, w9, #0x1
     c4c:	str	w13, [x14, x12, lsl #2]
     c50:	str	w11, [x19, x9, lsl #2]
     c54:	ldr	x9, [sp, #120]
     c58:	ldr	w9, [x14, x9, lsl #2]
     c5c:	b	c18 <BZ2_blockSort+0xc18>
     c60:	sub	w10, w8, #0x1
     c64:	cmp	w10, w9
     c68:	b.eq	c98 <BZ2_blockSort+0xc98>  // b.none
     c6c:	cbnz	w8, c7c <BZ2_blockSort+0xc7c>
     c70:	ldr	w8, [sp, #36]
     c74:	cmp	w9, w8
     c78:	b.eq	c98 <BZ2_blockSort+0xc98>  // b.none
     c7c:	mov	w0, #0x3ef                 	// #1007
     c80:	bl	0 <BZ2_bz__AssertH__fail>
     c84:	add	x0, sp, #0x1, lsl #12
     c88:	add	x2, sp, #0xdd8
     c8c:	add	x1, sp, #0xf68
     c90:	add	x0, x0, #0xf8
     c94:	mov	w18, #0xfffe                	// #65534
     c98:	ldr	x10, [sp, #120]
     c9c:	mov	x9, xzr
     ca0:	sxtw	x8, w20
     ca4:	add	x10, x21, x10, lsl #2
     ca8:	ldr	w11, [x10, x9]
     cac:	orr	w11, w11, #0x200000
     cb0:	str	w11, [x10, x9]
     cb4:	add	x9, x9, #0x400
     cb8:	cmp	x9, #0x40, lsl #12
     cbc:	b.ne	ca8 <BZ2_blockSort+0xca8>  // b.any
     cc0:	ldr	x9, [sp, #48]
     cc4:	ldr	x10, [sp, #120]
     cc8:	add	x20, sp, #0xd8
     ccc:	cmp	x9, #0xfe
     cd0:	mov	w9, #0x1                   	// #1
     cd4:	strb	w9, [x23, x10]
     cd8:	b.hi	d70 <BZ2_blockSort+0xd70>  // b.pmore
     cdc:	ldr	x9, [sp, #128]
     ce0:	ldr	w8, [x21, x8, lsl #2]
     ce4:	ldrsw	x9, [x21, x9, lsl #2]
     ce8:	and	w8, w8, #0xffdfffff
     cec:	and	x10, x9, #0xffffffffffdfffff
     cf0:	sub	w11, w8, w10
     cf4:	mov	w8, #0xffffffff            	// #-1
     cf8:	add	w8, w8, #0x1
     cfc:	asr	w9, w11, w8
     d00:	cmp	w9, w18
     d04:	b.gt	cf8 <BZ2_blockSort+0xcf8>
     d08:	subs	w9, w11, #0x1
     d0c:	b.lt	d48 <BZ2_blockSort+0xd48>  // b.tstop
     d10:	ldr	x12, [sp, #24]
     d14:	mov	w11, w11
     d18:	add	x10, x12, x10, lsl #2
     d1c:	ldrsw	x12, [x10, x11, lsl #2]
     d20:	sub	x11, x11, #0x1
     d24:	lsr	w13, w11, w8
     d28:	cmp	w12, #0x21
     d2c:	strh	w13, [x28, x12, lsl #1]
     d30:	b.gt	d3c <BZ2_blockSort+0xd3c>
     d34:	add	w12, w12, w27
     d38:	strh	w13, [x28, w12, sxtw #1]
     d3c:	add	x12, x11, #0x1
     d40:	cmp	x12, #0x1
     d44:	b.gt	d1c <BZ2_blockSort+0xd1c>
     d48:	asr	w8, w9, w8
     d4c:	cmp	w8, #0x10, lsl #12
     d50:	b.lt	d70 <BZ2_blockSort+0xd70>  // b.tstop
     d54:	mov	w0, #0x3ea                 	// #1002
     d58:	bl	0 <BZ2_bz__AssertH__fail>
     d5c:	add	x0, sp, #0x1, lsl #12
     d60:	add	x2, sp, #0xdd8
     d64:	add	x1, sp, #0xf68
     d68:	add	x0, x0, #0xf8
     d6c:	mov	w18, #0xfffe                	// #65534
     d70:	ldr	x8, [sp, #48]
     d74:	add	x8, x8, #0x1
     d78:	cmp	x8, #0x100
     d7c:	b.ne	478 <BZ2_blockSort+0x478>  // b.any
     d80:	ldr	w23, [sp, #76]
     d84:	cmp	w23, #0x3
     d88:	b.gt	ed0 <BZ2_blockSort+0xed0>
     d8c:	ldr	x20, [sp]
     d90:	ldr	w25, [sp, #200]
     d94:	b	da4 <BZ2_blockSort+0xda4>
     d98:	ldr	x20, [sp]
     d9c:	ldr	w25, [sp, #200]
     da0:	ldr	w23, [sp, #76]
     da4:	cmp	w23, #0x3
     da8:	b.ge	e70 <BZ2_blockSort+0xe70>  // b.tcont
     dac:	tbz	w25, #31, dcc <BZ2_blockSort+0xdcc>
     db0:	cmp	w23, #0x2
     db4:	b.ge	eb0 <BZ2_blockSort+0xeb0>  // b.tcont
     db8:	ldp	x0, x1, [x20, #24]
     dbc:	mov	x2, x21
     dc0:	mov	w3, w27
     dc4:	mov	w4, w23
     dc8:	bl	ef4 <fallbackSort>
     dcc:	ldrsw	x8, [x20, #108]
     dd0:	mov	w9, #0xffffffff            	// #-1
     dd4:	str	w9, [x20, #48]
     dd8:	cmp	w8, #0x1
     ddc:	b.lt	df8 <BZ2_blockSort+0xdf8>  // b.tstop
     de0:	mov	x9, xzr
     de4:	ldr	w10, [x19, x9, lsl #2]
     de8:	cbz	w10, e04 <BZ2_blockSort+0xe04>
     dec:	add	x9, x9, #0x1
     df0:	cmp	x9, x8
     df4:	b.lt	de4 <BZ2_blockSort+0xde4>  // b.tstop
     df8:	mov	w0, #0x3eb                 	// #1003
     dfc:	bl	0 <BZ2_bz__AssertH__fail>
     e00:	b	e08 <BZ2_blockSort+0xe08>
     e04:	str	w9, [x20, #48]
     e08:	add	sp, sp, #0x1, lsl #12
     e0c:	add	sp, sp, #0x290
     e10:	ldp	x20, x19, [sp, #80]
     e14:	ldp	x22, x21, [sp, #64]
     e18:	ldp	x24, x23, [sp, #48]
     e1c:	ldp	x26, x25, [sp, #32]
     e20:	ldp	x28, x27, [sp, #16]
     e24:	ldp	x29, x30, [sp], #96
     e28:	ret
     e2c:	adrp	x8, 0 <stderr>
     e30:	ldr	x3, [x8]
     e34:	adrp	x0, 0 <BZ2_blockSort>
     e38:	add	x0, x0, #0x0
     e3c:	mov	w1, #0x21                  	// #33
     e40:	mov	w2, #0x1                   	// #1
     e44:	bl	0 <fwrite>
     e48:	b	b0 <BZ2_blockSort+0xb0>
     e4c:	adrp	x8, 0 <stderr>
     e50:	ldr	x3, [x8]
     e54:	adrp	x0, 0 <BZ2_blockSort>
     e58:	add	x0, x0, #0x0
     e5c:	mov	w1, #0x1b                  	// #27
     e60:	mov	w2, #0x1                   	// #1
     e64:	bl	0 <fwrite>
     e68:	ldr	x12, [sp, #16]
     e6c:	b	210 <BZ2_blockSort+0x210>
     e70:	adrp	x8, 0 <stderr>
     e74:	ldr	x0, [x8]
     e78:	ldr	w8, [sp, #12]
     e7c:	cmp	w27, #0x0
     e80:	adrp	x1, 0 <BZ2_blockSort>
     e84:	add	x1, x1, #0x0
     e88:	sub	w2, w8, w25
     e8c:	csinc	w8, w27, wzr, ne  // ne = any
     e90:	scvtf	s0, w2
     e94:	scvtf	s1, w8
     e98:	fdiv	s0, s0, s1
     e9c:	fcvt	d0, s0
     ea0:	ldr	x3, [sp, #16]
     ea4:	bl	0 <fprintf>
     ea8:	tbz	w25, #31, dcc <BZ2_blockSort+0xdcc>
     eac:	b	db0 <BZ2_blockSort+0xdb0>
     eb0:	adrp	x8, 0 <stderr>
     eb4:	ldr	x3, [x8]
     eb8:	adrp	x0, 0 <BZ2_blockSort>
     ebc:	add	x0, x0, #0x0
     ec0:	mov	w1, #0x35                  	// #53
     ec4:	mov	w2, #0x1                   	// #1
     ec8:	bl	0 <fwrite>
     ecc:	b	db8 <BZ2_blockSort+0xdb8>
     ed0:	adrp	x8, 0 <stderr>
     ed4:	ldr	x0, [x8]
     ed8:	adrp	x1, 0 <BZ2_blockSort>
     edc:	sub	w4, w27, w22
     ee0:	add	x1, x1, #0x0
     ee4:	ldr	x2, [sp, #16]
     ee8:	mov	w3, w22
     eec:	bl	0 <fprintf>
     ef0:	b	d8c <BZ2_blockSort+0xd8c>

0000000000000ef4 <fallbackSort>:
     ef4:	stp	x29, x30, [sp, #-96]!
     ef8:	stp	x28, x27, [sp, #16]
     efc:	stp	x26, x25, [sp, #32]
     f00:	stp	x24, x23, [sp, #48]
     f04:	stp	x22, x21, [sp, #64]
     f08:	stp	x20, x19, [sp, #80]
     f0c:	mov	x29, sp
     f10:	sub	sp, sp, #0xb50
     f14:	mov	w25, w4
     f18:	mov	w21, w3
     f1c:	mov	x23, x2
     f20:	mov	x19, x1
     f24:	mov	x20, x0
     f28:	cmp	w4, #0x4
     f2c:	b.ge	16c4 <fallbackSort+0x7d0>  // b.tcont
     f30:	add	x0, sp, #0x424
     f34:	mov	w2, #0x404                 	// #1028
     f38:	mov	w1, wzr
     f3c:	mov	w28, w21
     f40:	mov	w22, w21
     f44:	add	x21, sp, #0x424
     f48:	bl	0 <memset>
     f4c:	cmp	w22, #0x1
     f50:	str	w22, [sp, #16]
     f54:	b.lt	f80 <fallbackSort+0x8c>  // b.tstop
     f58:	mov	x8, x28
     f5c:	mov	x9, x19
     f60:	ldrb	w10, [x9], #1
     f64:	subs	x8, x8, #0x1
     f68:	ldr	w11, [x21, x10, lsl #2]
     f6c:	add	w11, w11, #0x1
     f70:	str	w11, [x21, x10, lsl #2]
     f74:	b.ne	f60 <fallbackSort+0x6c>  // b.any
     f78:	ldr	w22, [sp, #1060]
     f7c:	b	f84 <fallbackSort+0x90>
     f80:	mov	w22, wzr
     f84:	add	x0, sp, #0x24
     f88:	add	x1, sp, #0x424
     f8c:	mov	w2, #0x400                 	// #1024
     f90:	bl	0 <memcpy>
     f94:	mov	x8, xzr
     f98:	add	x9, x21, #0x4
     f9c:	ldr	w10, [x9, x8]
     fa0:	add	w22, w10, w22
     fa4:	str	w22, [x9, x8]
     fa8:	add	x8, x8, #0x4
     fac:	cmp	x8, #0x400
     fb0:	b.ne	f9c <fallbackSort+0xa8>  // b.any
     fb4:	ldr	w21, [sp, #16]
     fb8:	cmp	w21, #0x1
     fbc:	b.lt	fe8 <fallbackSort+0xf4>  // b.tstop
     fc0:	mov	x8, xzr
     fc4:	add	x9, sp, #0x424
     fc8:	ldrb	w10, [x19, x8]
     fcc:	ldrsw	x11, [x9, x10, lsl #2]
     fd0:	sub	x11, x11, #0x1
     fd4:	str	w11, [x9, x10, lsl #2]
     fd8:	str	w8, [x20, x11, lsl #2]
     fdc:	add	x8, x8, #0x1
     fe0:	cmp	x28, x8
     fe4:	b.ne	fc8 <fallbackSort+0xd4>  // b.any
     fe8:	cmn	w21, #0x3f
     fec:	b.lt	101c <fallbackSort+0x128>  // b.tstop
     ff0:	add	w8, w21, #0x1f
     ff4:	cmp	w21, #0x0
     ff8:	csel	w8, w8, w21, lt  // lt = tstop
     ffc:	asr	w8, w8, #5
    1000:	cmn	w21, #0x20
    1004:	csinc	w8, wzr, w8, le
    1008:	lsl	x8, x8, #2
    100c:	add	x2, x8, #0x4
    1010:	mov	x0, x23
    1014:	mov	w1, wzr
    1018:	bl	0 <memset>
    101c:	mov	x8, xzr
    1020:	add	x9, sp, #0x424
    1024:	mov	w10, #0x1                   	// #1
    1028:	ldr	w11, [x9, x8]
    102c:	add	x8, x8, #0x4
    1030:	cmp	x8, #0x400
    1034:	asr	w12, w11, #5
    1038:	ldr	w13, [x23, w12, sxtw #2]
    103c:	lsl	w11, w10, w11
    1040:	orr	w11, w11, w13
    1044:	str	w11, [x23, w12, sxtw #2]
    1048:	b.ne	1028 <fallbackSort+0x134>  // b.any
    104c:	mov	w8, wzr
    1050:	mov	w9, #0x1                   	// #1
    1054:	add	w10, w21, w8
    1058:	asr	w11, w10, #5
    105c:	ldr	w12, [x23, w11, sxtw #2]
    1060:	lsl	w13, w9, w10
    1064:	add	w10, w10, #0x1
    1068:	asr	w14, w10, #5
    106c:	orr	w12, w12, w13
    1070:	str	w12, [x23, w11, sxtw #2]
    1074:	ldr	w11, [x23, w14, sxtw #2]
    1078:	add	w8, w8, #0x2
    107c:	lsl	w10, w9, w10
    1080:	cmp	w8, #0x40
    1084:	bic	w10, w11, w10
    1088:	str	w10, [x23, w14, sxtw #2]
    108c:	b.ne	1054 <fallbackSort+0x160>  // b.any
    1090:	add	x8, x20, #0x4
    1094:	mov	w24, #0x1                   	// #1
    1098:	add	x2, sp, #0x9b8
    109c:	add	x3, sp, #0x828
    10a0:	mov	w22, #0x1                   	// #1
    10a4:	str	x8, [sp, #8]
    10a8:	str	w25, [sp, #20]
    10ac:	cmp	w25, #0x4
    10b0:	b.ge	15f4 <fallbackSort+0x700>  // b.tcont
    10b4:	cmp	w21, #0x1
    10b8:	b.lt	10f8 <fallbackSort+0x204>  // b.tstop
    10bc:	mov	x8, xzr
    10c0:	mov	w9, wzr
    10c4:	ubfx	x10, x8, #5, #27
    10c8:	ldr	w10, [x23, x10, lsl #2]
    10cc:	ldr	w11, [x20, x8, lsl #2]
    10d0:	lsr	w10, w10, w8
    10d4:	sub	w11, w11, w22
    10d8:	tst	w10, #0x1
    10dc:	and	w12, w28, w11, asr #31
    10e0:	csel	w9, w9, w8, eq  // eq = none
    10e4:	add	x8, x8, #0x1
    10e8:	add	w10, w12, w11
    10ec:	cmp	x28, x8
    10f0:	str	w9, [x19, w10, sxtw #2]
    10f4:	b.ne	10c4 <fallbackSort+0x1d0>  // b.any
    10f8:	stp	w22, wzr, [sp, #28]
    10fc:	mov	w22, #0xffffffff            	// #-1
    1100:	add	w27, w22, #0x1
    1104:	asr	w9, w27, #5
    1108:	ldr	w9, [x23, w9, sxtw #2]
    110c:	lsl	w10, w24, w27
    1110:	mov	w8, w22
    1114:	tst	w27, #0x1f
    1118:	and	w9, w10, w9
    111c:	b.eq	1128 <fallbackSort+0x234>  // b.none
    1120:	mov	w22, w27
    1124:	cbnz	w9, 1100 <fallbackSort+0x20c>
    1128:	cbz	w9, 1160 <fallbackSort+0x26c>
    112c:	sub	w9, w8, #0x1f
    1130:	add	w9, w9, #0x20
    1134:	asr	w10, w9, #5
    1138:	ldr	w10, [x23, w10, sxtw #2]
    113c:	mov	w27, w8
    1140:	add	w8, w8, #0x20
    1144:	cmn	w10, #0x1
    1148:	b.eq	1130 <fallbackSort+0x23c>  // b.none
    114c:	add	w27, w27, #0x1
    1150:	asr	w8, w27, #5
    1154:	ldr	w8, [x23, w8, sxtw #2]
    1158:	lsr	w8, w8, w27
    115c:	tbnz	w8, #0, 114c <fallbackSort+0x258>
    1160:	cmp	w27, w21
    1164:	b.gt	15cc <fallbackSort+0x6d8>
    1168:	sub	w25, w27, #0x1
    116c:	sub	w11, w27, #0x20
    1170:	mov	w13, w25
    1174:	mov	w10, w27
    1178:	asr	w8, w10, #5
    117c:	ldr	w12, [x23, w8, sxtw #2]
    1180:	mov	w8, w11
    1184:	lsl	w11, w24, w10
    1188:	mov	w9, w13
    118c:	tst	w10, #0x1f
    1190:	and	w12, w11, w12
    1194:	add	w10, w10, #0x1
    1198:	b.eq	11a8 <fallbackSort+0x2b4>  // b.none
    119c:	add	w11, w8, #0x1
    11a0:	add	w13, w9, #0x1
    11a4:	cbz	w12, 1178 <fallbackSort+0x284>
    11a8:	cbz	w12, 11b4 <fallbackSort+0x2c0>
    11ac:	sub	w26, w10, #0x1
    11b0:	b	11e0 <fallbackSort+0x2ec>
    11b4:	add	w8, w8, #0x20
    11b8:	asr	w10, w8, #5
    11bc:	ldr	w10, [x23, w10, sxtw #2]
    11c0:	mov	w26, w9
    11c4:	add	w9, w9, #0x20
    11c8:	cbz	w10, 11b4 <fallbackSort+0x2c0>
    11cc:	add	w26, w26, #0x1
    11d0:	asr	w8, w26, #5
    11d4:	ldr	w8, [x23, w8, sxtw #2]
    11d8:	lsr	w8, w8, w26
    11dc:	tbz	w8, #0, 11cc <fallbackSort+0x2d8>
    11e0:	cmp	w26, w21
    11e4:	b.gt	15cc <fallbackSort+0x6d8>
    11e8:	cmp	w26, w27
    11ec:	sub	w22, w26, #0x1
    11f0:	b.le	1100 <fallbackSort+0x20c>
    11f4:	ldr	w8, [sp, #32]
    11f8:	str	wzr, [sp, #24]
    11fc:	str	w25, [sp, #2488]
    1200:	str	w22, [sp, #2088]
    1204:	sub	w8, w8, w27
    1208:	add	w8, w8, w22
    120c:	add	w8, w8, #0x2
    1210:	str	w8, [sp, #32]
    1214:	mov	w8, #0x1                   	// #1
    1218:	mov	w8, w8
    121c:	mov	x21, x8
    1220:	cmp	x8, #0x63
    1224:	b.lt	1238 <fallbackSort+0x344>  // b.tstop
    1228:	mov	w0, #0x3ec                 	// #1004
    122c:	bl	0 <BZ2_bz__AssertH__fail>
    1230:	add	x3, sp, #0x828
    1234:	add	x2, sp, #0x9b8
    1238:	sub	x8, x21, #0x1
    123c:	ldr	w10, [x2, x8, lsl #2]
    1240:	ldr	w9, [x3, x8, lsl #2]
    1244:	sxtw	x11, w10
    1248:	sub	w12, w9, w10
    124c:	cmp	w12, #0x9
    1250:	b.gt	1354 <fallbackSort+0x460>
    1254:	cmp	w9, w10
    1258:	b.eq	1348 <fallbackSort+0x454>  // b.none
    125c:	cmp	w12, #0x4
    1260:	sxtw	x12, w9
    1264:	b.lt	12d8 <fallbackSort+0x3e4>  // b.tstop
    1268:	sub	w13, w9, #0x4
    126c:	cmp	w13, w10
    1270:	b.lt	12d8 <fallbackSort+0x3e4>  // b.tstop
    1274:	sxtw	x13, w13
    1278:	mov	w14, w9
    127c:	ldrsw	x15, [x20, x13, lsl #2]
    1280:	add	x16, x13, #0x4
    1284:	cmp	x16, x12
    1288:	b.le	1294 <fallbackSort+0x3a0>
    128c:	mov	w16, w13
    1290:	b	12c4 <fallbackSort+0x3d0>
    1294:	ldr	w17, [x19, x15, lsl #2]
    1298:	sxtw	x18, w14
    129c:	mov	w16, w13
    12a0:	ldr	w0, [x20, x18, lsl #2]
    12a4:	ldr	w1, [x19, x0, lsl #2]
    12a8:	cmp	w17, w1
    12ac:	b.ls	12c4 <fallbackSort+0x3d0>  // b.plast
    12b0:	add	x18, x18, #0x4
    12b4:	str	w0, [x20, w16, sxtw #2]
    12b8:	cmp	x18, x12
    12bc:	add	w16, w16, #0x4
    12c0:	b.le	12a0 <fallbackSort+0x3ac>
    12c4:	cmp	x13, x11
    12c8:	sub	x13, x13, #0x1
    12cc:	sub	w14, w14, #0x1
    12d0:	str	w15, [x20, w16, sxtw #2]
    12d4:	b.gt	127c <fallbackSort+0x388>
    12d8:	cmp	w9, w10
    12dc:	b.le	1348 <fallbackSort+0x454>
    12e0:	add	x10, x20, x12, lsl #2
    12e4:	mov	x15, x12
    12e8:	sub	x13, x15, #0x1
    12ec:	ldrsw	x14, [x20, x13, lsl #2]
    12f0:	cmp	w15, w9
    12f4:	mov	w16, w13
    12f8:	b.gt	1334 <fallbackSort+0x440>
    12fc:	ldr	w16, [x19, x14, lsl #2]
    1300:	mov	x17, x10
    1304:	ldr	w18, [x17]
    1308:	ldr	w0, [x19, x18, lsl #2]
    130c:	cmp	w16, w0
    1310:	b.ls	1330 <fallbackSort+0x43c>  // b.plast
    1314:	stur	w18, [x17, #-4]
    1318:	add	x18, x15, #0x1
    131c:	cmp	x15, x12
    1320:	add	x17, x17, #0x4
    1324:	mov	x15, x18
    1328:	b.lt	1304 <fallbackSort+0x410>  // b.tstop
    132c:	mov	w15, w18
    1330:	sub	w16, w15, #0x1
    1334:	cmp	x13, x11
    1338:	sub	x10, x10, #0x4
    133c:	mov	x15, x13
    1340:	str	w14, [x20, w16, sxtw #2]
    1344:	b.gt	12e8 <fallbackSort+0x3f4>
    1348:	cmp	x21, #0x1
    134c:	b.gt	121c <fallbackSort+0x328>
    1350:	b	157c <fallbackSort+0x688>
    1354:	ldr	w14, [sp, #24]
    1358:	mov	w12, #0x1dc5                	// #7621
    135c:	orr	w13, wzr, #0x1
    1360:	madd	w12, w14, w12, w13
    1364:	and	w13, w12, #0x7fff
    1368:	mov	w12, #0xaaab                	// #43691
    136c:	movk	w12, #0xaaaa, lsl #16
    1370:	umull	x12, w13, w12
    1374:	lsr	x12, x12, #33
    1378:	add	w12, w12, w12, lsl #1
    137c:	str	w13, [sp, #24]
    1380:	subs	w13, w13, w12
    1384:	mov	w12, w10
    1388:	b.eq	13a4 <fallbackSort+0x4b0>  // b.none
    138c:	cmp	w13, #0x1
    1390:	b.ne	13a0 <fallbackSort+0x4ac>  // b.any
    1394:	add	w12, w9, w10
    1398:	asr	w12, w12, #1
    139c:	b	13a4 <fallbackSort+0x4b0>
    13a0:	mov	w12, w9
    13a4:	ldr	w12, [x20, w12, sxtw #2]
    13a8:	mov	w14, w9
    13ac:	mov	w15, w9
    13b0:	mov	w13, w10
    13b4:	ldr	w16, [x19, x12, lsl #2]
    13b8:	mov	w12, w10
    13bc:	cmp	w13, w15
    13c0:	b.gt	1424 <fallbackSort+0x530>
    13c4:	sxtw	x17, w15
    13c8:	sxtw	x12, w12
    13cc:	sxtw	x18, w13
    13d0:	ldr	w13, [x20, x18, lsl #2]
    13d4:	ldr	w0, [x19, x13, lsl #2]
    13d8:	subs	w0, w0, w16
    13dc:	b.eq	13fc <fallbackSort+0x508>  // b.none
    13e0:	cmp	w0, #0x0
    13e4:	b.gt	1420 <fallbackSort+0x52c>
    13e8:	add	x13, x18, #0x1
    13ec:	cmp	x18, x17
    13f0:	mov	x18, x13
    13f4:	b.lt	13d0 <fallbackSort+0x4dc>  // b.tstop
    13f8:	b	1424 <fallbackSort+0x530>
    13fc:	ldr	w0, [x20, x12, lsl #2]
    1400:	cmp	w15, w18
    1404:	str	w0, [x20, x18, lsl #2]
    1408:	str	w13, [x20, x12, lsl #2]
    140c:	add	x12, x12, #0x1
    1410:	add	w13, w18, #0x1
    1414:	b.gt	13cc <fallbackSort+0x4d8>
    1418:	add	w13, w18, #0x1
    141c:	b	1424 <fallbackSort+0x530>
    1420:	mov	w13, w18
    1424:	cmp	w13, w15
    1428:	b.gt	1498 <fallbackSort+0x5a4>
    142c:	sxtw	x17, w13
    1430:	sxtw	x14, w14
    1434:	sxtw	x18, w15
    1438:	ldr	w15, [x20, x18, lsl #2]
    143c:	ldr	w0, [x19, x15, lsl #2]
    1440:	subs	w0, w0, w16
    1444:	b.eq	1460 <fallbackSort+0x56c>  // b.none
    1448:	tbnz	w0, #31, 1480 <fallbackSort+0x58c>
    144c:	sub	x15, x18, #0x1
    1450:	cmp	x18, x17
    1454:	mov	x18, x15
    1458:	b.gt	1438 <fallbackSort+0x544>
    145c:	b	1498 <fallbackSort+0x5a4>
    1460:	ldr	w0, [x20, x14, lsl #2]
    1464:	cmp	w13, w18
    1468:	str	w0, [x20, x18, lsl #2]
    146c:	str	w15, [x20, x14, lsl #2]
    1470:	sub	x14, x14, #0x1
    1474:	sub	w15, w18, #0x1
    1478:	b.lt	1434 <fallbackSort+0x540>  // b.tstop
    147c:	b	1498 <fallbackSort+0x5a4>
    1480:	ldr	w0, [x20, x17, lsl #2]
    1484:	str	w15, [x20, x17, lsl #2]
    1488:	add	w13, w13, #0x1
    148c:	sub	w15, w18, #0x1
    1490:	str	w0, [x20, x18, lsl #2]
    1494:	b	13bc <fallbackSort+0x4c8>
    1498:	cmp	w14, w12
    149c:	b.lt	1574 <fallbackSort+0x680>  // b.tstop
    14a0:	sub	w16, w12, w10
    14a4:	sub	w17, w13, w12
    14a8:	cmp	w16, w17
    14ac:	csel	w17, w16, w17, lt  // lt = tstop
    14b0:	cmp	w17, #0x1
    14b4:	b.lt	14e4 <fallbackSort+0x5f0>  // b.tstop
    14b8:	sub	w16, w13, w17
    14bc:	add	x11, x20, x11, lsl #2
    14c0:	add	x16, x20, w16, sxtw #2
    14c4:	add	w17, w17, #0x1
    14c8:	ldr	w18, [x16]
    14cc:	ldr	w0, [x11]
    14d0:	sub	w17, w17, #0x1
    14d4:	cmp	w17, #0x1
    14d8:	str	w18, [x11], #4
    14dc:	str	w0, [x16], #4
    14e0:	b.gt	14c8 <fallbackSort+0x5d4>
    14e4:	sub	w16, w9, w14
    14e8:	sub	w11, w14, w15
    14ec:	cmp	w16, w11
    14f0:	csel	w16, w16, w11, lt  // lt = tstop
    14f4:	cmp	w16, #0x1
    14f8:	b.lt	152c <fallbackSort+0x638>  // b.tstop
    14fc:	ldr	x17, [sp, #8]
    1500:	sub	w15, w9, w16
    1504:	add	x14, x20, w13, sxtw #2
    1508:	add	w16, w16, #0x1
    150c:	add	x15, x17, w15, sxtw #2
    1510:	ldr	w17, [x15]
    1514:	ldr	w18, [x14]
    1518:	sub	w16, w16, #0x1
    151c:	cmp	w16, #0x1
    1520:	str	w17, [x14], #4
    1524:	str	w18, [x15], #4
    1528:	b.gt	1510 <fallbackSort+0x61c>
    152c:	mvn	w12, w12
    1530:	sub	w11, w9, w11
    1534:	add	w12, w10, w12
    1538:	add	w11, w11, #0x1
    153c:	add	w12, w12, w13
    1540:	sub	w13, w12, w10
    1544:	sub	w14, w9, w11
    1548:	cmp	w13, w14
    154c:	b.le	1558 <fallbackSort+0x664>
    1550:	str	w12, [x3, x8, lsl #2]
    1554:	b	1564 <fallbackSort+0x670>
    1558:	str	w11, [x2, x8, lsl #2]
    155c:	mov	w11, w10
    1560:	mov	w9, w12
    1564:	sbfiz	x8, x21, #2, #32
    1568:	str	w11, [x2, x8]
    156c:	str	w9, [x3, x8]
    1570:	add	w8, w21, #0x1
    1574:	cmp	w8, #0x0
    1578:	b.gt	1218 <fallbackSort+0x324>
    157c:	ldr	w21, [sp, #16]
    1580:	cmp	w27, w26
    1584:	b.gt	1100 <fallbackSort+0x20c>
    1588:	sxtw	x8, w25
    158c:	sxtw	x9, w26
    1590:	mov	w10, #0xffffffff            	// #-1
    1594:	ldr	w11, [x20, x8, lsl #2]
    1598:	ldr	w11, [x19, x11, lsl #2]
    159c:	cmp	w10, w11
    15a0:	b.eq	15bc <fallbackSort+0x6c8>  // b.none
    15a4:	asr	w10, w8, #5
    15a8:	ldr	w12, [x23, w10, sxtw #2]
    15ac:	lsl	w13, w24, w8
    15b0:	orr	w12, w12, w13
    15b4:	str	w12, [x23, w10, sxtw #2]
    15b8:	mov	w10, w11
    15bc:	add	x8, x8, #0x1
    15c0:	cmp	x8, x9
    15c4:	b.lt	1594 <fallbackSort+0x6a0>  // b.tstop
    15c8:	b	1100 <fallbackSort+0x20c>
    15cc:	ldr	w25, [sp, #20]
    15d0:	ldr	w26, [sp, #32]
    15d4:	cmp	w25, #0x4
    15d8:	b.ge	1618 <fallbackSort+0x724>  // b.tcont
    15dc:	ldr	w22, [sp, #28]
    15e0:	lsl	w22, w22, #1
    15e4:	cmp	w22, w21
    15e8:	b.gt	163c <fallbackSort+0x748>
    15ec:	cbnz	w26, 10ac <fallbackSort+0x1b8>
    15f0:	b	163c <fallbackSort+0x748>
    15f4:	adrp	x8, 0 <stderr>
    15f8:	ldr	x0, [x8]
    15fc:	adrp	x1, 0 <BZ2_blockSort>
    1600:	add	x1, x1, #0x0
    1604:	mov	w2, w22
    1608:	bl	0 <fprintf>
    160c:	add	x3, sp, #0x828
    1610:	add	x2, sp, #0x9b8
    1614:	b	10b4 <fallbackSort+0x1c0>
    1618:	adrp	x8, 0 <stderr>
    161c:	ldr	x0, [x8]
    1620:	adrp	x1, 0 <BZ2_blockSort>
    1624:	add	x1, x1, #0x0
    1628:	mov	w2, w26
    162c:	bl	0 <fprintf>
    1630:	add	x3, sp, #0x828
    1634:	add	x2, sp, #0x9b8
    1638:	b	15dc <fallbackSort+0x6e8>
    163c:	cmp	w25, #0x4
    1640:	b.ge	16e4 <fallbackSort+0x7f0>  // b.tcont
    1644:	cmp	w21, #0x1
    1648:	b.lt	16a4 <fallbackSort+0x7b0>  // b.tstop
    164c:	mov	x8, xzr
    1650:	mov	x11, xzr
    1654:	add	x9, sp, #0x24
    1658:	sxtw	x11, w11
    165c:	sub	w10, w11, #0x1
    1660:	ldr	w12, [x9, x11, lsl #2]
    1664:	add	x11, x11, #0x1
    1668:	add	w10, w10, #0x1
    166c:	cbz	w12, 1660 <fallbackSort+0x76c>
    1670:	add	x13, x9, x11, lsl #2
    1674:	sub	w12, w12, #0x1
    1678:	stur	w12, [x13, #-4]
    167c:	ldr	w12, [x20, x8, lsl #2]
    1680:	add	x8, x8, #0x1
    1684:	sub	x11, x11, #0x1
    1688:	cmp	x8, x28
    168c:	strb	w11, [x19, x12]
    1690:	b.ne	1658 <fallbackSort+0x764>  // b.any
    1694:	cmp	w10, #0x100
    1698:	b.lt	16a4 <fallbackSort+0x7b0>  // b.tstop
    169c:	mov	w0, #0x3ed                 	// #1005
    16a0:	bl	0 <BZ2_bz__AssertH__fail>
    16a4:	add	sp, sp, #0xb50
    16a8:	ldp	x20, x19, [sp, #80]
    16ac:	ldp	x22, x21, [sp, #64]
    16b0:	ldp	x24, x23, [sp, #48]
    16b4:	ldp	x26, x25, [sp, #32]
    16b8:	ldp	x28, x27, [sp, #16]
    16bc:	ldp	x29, x30, [sp], #96
    16c0:	ret
    16c4:	adrp	x8, 0 <stderr>
    16c8:	ldr	x3, [x8]
    16cc:	adrp	x0, 0 <BZ2_blockSort>
    16d0:	add	x0, x0, #0x0
    16d4:	mov	w1, #0x1b                  	// #27
    16d8:	mov	w2, #0x1                   	// #1
    16dc:	bl	0 <fwrite>
    16e0:	b	f30 <fallbackSort+0x3c>
    16e4:	adrp	x8, 0 <stderr>
    16e8:	ldr	x3, [x8]
    16ec:	adrp	x0, 0 <BZ2_blockSort>
    16f0:	add	x0, x0, #0x0
    16f4:	mov	w1, #0x21                  	// #33
    16f8:	mov	w2, #0x1                   	// #1
    16fc:	bl	0 <fwrite>
    1700:	b	1644 <fallbackSort+0x750>

0000000000001704 <mainGtU>:
    1704:	ldrb	w8, [x2, w0, uxtw]
    1708:	ldrb	w9, [x2, w1, uxtw]
    170c:	cmp	w8, w9
    1710:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1714:	add	w8, w0, #0x1
    1718:	add	w9, w1, #0x1
    171c:	ldrb	w8, [x2, w8, uxtw]
    1720:	ldrb	w9, [x2, w9, uxtw]
    1724:	cmp	w8, w9
    1728:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    172c:	add	w8, w0, #0x2
    1730:	add	w9, w1, #0x2
    1734:	ldrb	w8, [x2, w8, uxtw]
    1738:	ldrb	w9, [x2, w9, uxtw]
    173c:	cmp	w8, w9
    1740:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1744:	add	w8, w0, #0x3
    1748:	add	w9, w1, #0x3
    174c:	ldrb	w8, [x2, w8, uxtw]
    1750:	ldrb	w9, [x2, w9, uxtw]
    1754:	cmp	w8, w9
    1758:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    175c:	add	w8, w0, #0x4
    1760:	add	w9, w1, #0x4
    1764:	ldrb	w8, [x2, w8, uxtw]
    1768:	ldrb	w9, [x2, w9, uxtw]
    176c:	cmp	w8, w9
    1770:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1774:	add	w8, w0, #0x5
    1778:	add	w9, w1, #0x5
    177c:	ldrb	w8, [x2, w8, uxtw]
    1780:	ldrb	w9, [x2, w9, uxtw]
    1784:	cmp	w8, w9
    1788:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    178c:	add	w8, w0, #0x6
    1790:	add	w9, w1, #0x6
    1794:	ldrb	w8, [x2, w8, uxtw]
    1798:	ldrb	w9, [x2, w9, uxtw]
    179c:	cmp	w8, w9
    17a0:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    17a4:	add	w8, w0, #0x7
    17a8:	add	w9, w1, #0x7
    17ac:	ldrb	w8, [x2, w8, uxtw]
    17b0:	ldrb	w9, [x2, w9, uxtw]
    17b4:	cmp	w8, w9
    17b8:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    17bc:	add	w8, w0, #0x8
    17c0:	add	w9, w1, #0x8
    17c4:	ldrb	w8, [x2, w8, uxtw]
    17c8:	ldrb	w9, [x2, w9, uxtw]
    17cc:	cmp	w8, w9
    17d0:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    17d4:	add	w8, w0, #0x9
    17d8:	add	w9, w1, #0x9
    17dc:	ldrb	w8, [x2, w8, uxtw]
    17e0:	ldrb	w9, [x2, w9, uxtw]
    17e4:	cmp	w8, w9
    17e8:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    17ec:	add	w8, w0, #0xa
    17f0:	add	w9, w1, #0xa
    17f4:	ldrb	w8, [x2, w8, uxtw]
    17f8:	ldrb	w9, [x2, w9, uxtw]
    17fc:	cmp	w8, w9
    1800:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1804:	add	w8, w0, #0xb
    1808:	add	w9, w1, #0xb
    180c:	ldrb	w8, [x2, w8, uxtw]
    1810:	ldrb	w9, [x2, w9, uxtw]
    1814:	cmp	w8, w9
    1818:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    181c:	add	w9, w0, #0xc
    1820:	add	w10, w1, #0xc
    1824:	add	w8, w4, #0x10
    1828:	ldrb	w11, [x2, w9, uxtw]
    182c:	ldrb	w12, [x2, w10, uxtw]
    1830:	cmp	w11, w12
    1834:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1838:	mov	w9, w9
    183c:	mov	w10, w10
    1840:	ldrh	w11, [x3, x9, lsl #1]
    1844:	ldrh	w12, [x3, x10, lsl #1]
    1848:	cmp	w11, w12
    184c:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1850:	add	w11, w9, #0x1
    1854:	add	w12, w10, #0x1
    1858:	ldrb	w13, [x2, w11, uxtw]
    185c:	ldrb	w14, [x2, w12, uxtw]
    1860:	cmp	w13, w14
    1864:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1868:	ldrh	w11, [x3, x11, lsl #1]
    186c:	ldrh	w12, [x3, x12, lsl #1]
    1870:	cmp	w11, w12
    1874:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1878:	add	w11, w9, #0x2
    187c:	add	w12, w10, #0x2
    1880:	ldrb	w13, [x2, w11, uxtw]
    1884:	ldrb	w14, [x2, w12, uxtw]
    1888:	cmp	w13, w14
    188c:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1890:	ldrh	w11, [x3, x11, lsl #1]
    1894:	ldrh	w12, [x3, x12, lsl #1]
    1898:	cmp	w11, w12
    189c:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    18a0:	add	w11, w9, #0x3
    18a4:	add	w12, w10, #0x3
    18a8:	ldrb	w13, [x2, w11, uxtw]
    18ac:	ldrb	w14, [x2, w12, uxtw]
    18b0:	cmp	w13, w14
    18b4:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    18b8:	ldrh	w11, [x3, x11, lsl #1]
    18bc:	ldrh	w12, [x3, x12, lsl #1]
    18c0:	cmp	w11, w12
    18c4:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    18c8:	add	w11, w9, #0x4
    18cc:	add	w12, w10, #0x4
    18d0:	ldrb	w13, [x2, w11, uxtw]
    18d4:	ldrb	w14, [x2, w12, uxtw]
    18d8:	cmp	w13, w14
    18dc:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    18e0:	ldrh	w11, [x3, x11, lsl #1]
    18e4:	ldrh	w12, [x3, x12, lsl #1]
    18e8:	cmp	w11, w12
    18ec:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    18f0:	add	w11, w9, #0x5
    18f4:	add	w12, w10, #0x5
    18f8:	ldrb	w13, [x2, w11, uxtw]
    18fc:	ldrb	w14, [x2, w12, uxtw]
    1900:	cmp	w13, w14
    1904:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1908:	ldrh	w11, [x3, x11, lsl #1]
    190c:	ldrh	w12, [x3, x12, lsl #1]
    1910:	cmp	w11, w12
    1914:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1918:	add	w11, w9, #0x6
    191c:	add	w12, w10, #0x6
    1920:	ldrb	w13, [x2, w11, uxtw]
    1924:	ldrb	w14, [x2, w12, uxtw]
    1928:	cmp	w13, w14
    192c:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1930:	ldrh	w11, [x3, x11, lsl #1]
    1934:	ldrh	w12, [x3, x12, lsl #1]
    1938:	cmp	w11, w12
    193c:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1940:	add	w11, w9, #0x7
    1944:	add	w12, w10, #0x7
    1948:	ldrb	w13, [x2, w11, uxtw]
    194c:	ldrb	w14, [x2, w12, uxtw]
    1950:	cmp	w13, w14
    1954:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1958:	ldrh	w11, [x3, x11, lsl #1]
    195c:	ldrh	w12, [x3, x12, lsl #1]
    1960:	cmp	w11, w12
    1964:	b.ne	19a8 <mainGtU+0x2a4>  // b.any
    1968:	add	w9, w9, #0x8
    196c:	ldr	w11, [x5]
    1970:	add	w10, w10, #0x8
    1974:	cmp	w9, w4
    1978:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    197c:	cmp	w10, w4
    1980:	sub	w8, w8, #0x8
    1984:	sub	w9, w9, w12
    1988:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    198c:	mov	w0, wzr
    1990:	sub	w10, w10, w12
    1994:	sub	w11, w11, #0x1
    1998:	cmp	w8, #0x7
    199c:	str	w11, [x5]
    19a0:	b.gt	1828 <mainGtU+0x124>
    19a4:	ret
    19a8:	cset	w0, hi  // hi = pmore
    19ac:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x28, x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	mov	x29, sp
  1c:	sub	sp, sp, #0x1, lsl #12
  20:	sub	sp, sp, #0x450
  24:	mov	w19, w3
  28:	mov	w20, w2
  2c:	cmp	w2, #0x1
  30:	mov	x21, x0
  34:	b.lt	64 <BZ2_hbMakeCodeLengths+0x64>  // b.tstop
  38:	add	x9, sp, #0x828
  3c:	mov	w8, w20
  40:	add	x9, x9, #0x4
  44:	mov	w10, #0x100                 	// #256
  48:	ldr	w11, [x1], #4
  4c:	lsl	w12, w11, #8
  50:	cmp	w11, #0x0
  54:	csel	w11, w10, w12, eq  // eq = none
  58:	subs	x8, x8, #0x1
  5c:	str	w11, [x9], #4
  60:	b.ne	48 <BZ2_hbMakeCodeLengths+0x48>  // b.any
  64:	mov	w8, #0xfffffffe            	// #-2
  68:	cmp	w20, #0x1
  6c:	str	wzr, [sp, #4152]
  70:	str	wzr, [sp, #2088]
  74:	str	w8, [sp, #24]
  78:	b.lt	3a4 <BZ2_hbMakeCodeLengths+0x3a4>  // b.tstop
  7c:	add	x26, sp, #0x828
  80:	sxtw	x9, w20
  84:	add	w24, w20, #0x1
  88:	add	x10, x26, #0x4
  8c:	add	x23, sp, #0x1, lsl #12
  90:	mov	x8, xzr
  94:	str	x9, [sp, #8]
  98:	mov	w25, w20
  9c:	mov	w9, #0x1                   	// #1
  a0:	add	x27, sp, #0x18
  a4:	mov	w28, #0xffffffff            	// #-1
  a8:	str	x10, [sp, #16]
  ac:	sub	x22, x24, #0x1
  b0:	add	x23, x23, #0x38
  b4:	add	x8, x8, #0x1
  b8:	add	x10, x23, x8, lsl #2
  bc:	str	w9, [x10]
  c0:	ubfx	x12, x8, #1, #31
  c4:	ldrsw	x13, [x23, w12, uxtw #2]
  c8:	ldr	w11, [x26, x9, lsl #2]
  cc:	str	w28, [x27, x9, lsl #2]
  d0:	ldr	w14, [x26, x13, lsl #2]
  d4:	cmp	w11, w14
  d8:	b.ge	fc <BZ2_hbMakeCodeLengths+0xfc>  // b.tcont
  dc:	str	w13, [x10]
  e0:	asr	w14, w12, #1
  e4:	ldrsw	x13, [x23, w14, sxtw #2]
  e8:	ldr	w10, [x26, x13, lsl #2]
  ec:	cmp	w11, w10
  f0:	add	x10, x23, w12, sxtw #2
  f4:	mov	w12, w14
  f8:	b.lt	dc <BZ2_hbMakeCodeLengths+0xdc>  // b.tstop
  fc:	str	w9, [x10]
 100:	cmp	x8, x25
 104:	add	x9, x9, #0x1
 108:	b.ne	b4 <BZ2_hbMakeCodeLengths+0xb4>  // b.any
 10c:	cmp	w20, #0x104
 110:	b.cc	11c <BZ2_hbMakeCodeLengths+0x11c>  // b.lo, b.ul, b.last
 114:	mov	w0, #0x7d1                 	// #2001
 118:	bl	0 <BZ2_bz__AssertH__fail>
 11c:	cmp	w20, #0x2
 120:	mov	w8, w20
 124:	b.lt	2e4 <BZ2_hbMakeCodeLengths+0x2e4>  // b.tstop
 128:	ldr	x8, [sp, #8]
 12c:	mov	x9, x25
 130:	ldr	w12, [x23, x9, lsl #2]
 134:	ldrsw	x11, [sp, #4156]
 138:	cmp	x9, #0x3
 13c:	sub	x10, x9, #0x1
 140:	str	w12, [sp, #4156]
 144:	b.lt	1b4 <BZ2_hbMakeCodeLengths+0x1b4>  // b.tstop
 148:	sxtw	x13, w12
 14c:	ldr	w13, [x26, x13, lsl #2]
 150:	mov	w14, #0x1                   	// #1
 154:	mov	w16, #0x2                   	// #2
 158:	cmp	x10, w16, sxtw
 15c:	sxtw	x17, w16
 160:	b.le	188 <BZ2_hbMakeCodeLengths+0x188>
 164:	orr	x15, x17, #0x1
 168:	ldrsw	x18, [x23, x15, lsl #2]
 16c:	ldrsw	x17, [x23, x17, lsl #2]
 170:	ldr	w18, [x26, x18, lsl #2]
 174:	ldr	w17, [x26, x17, lsl #2]
 178:	cmp	w18, w17
 17c:	csel	w15, w15, w16, lt  // lt = tstop
 180:	sxtw	x17, w15
 184:	b	18c <BZ2_hbMakeCodeLengths+0x18c>
 188:	mov	w15, w16
 18c:	ldrsw	x17, [x23, x17, lsl #2]
 190:	ldr	w16, [x26, x17, lsl #2]
 194:	cmp	w13, w16
 198:	b.lt	1bc <BZ2_hbMakeCodeLengths+0x1bc>  // b.tstop
 19c:	lsl	w16, w15, #1
 1a0:	cmp	x9, w16, sxtw
 1a4:	str	w17, [x23, w14, sxtw #2]
 1a8:	mov	w14, w15
 1ac:	b.gt	158 <BZ2_hbMakeCodeLengths+0x158>
 1b0:	b	1c0 <BZ2_hbMakeCodeLengths+0x1c0>
 1b4:	mov	w15, #0x1                   	// #1
 1b8:	b	1c0 <BZ2_hbMakeCodeLengths+0x1c0>
 1bc:	mov	w15, w14
 1c0:	str	w12, [x23, w15, sxtw #2]
 1c4:	add	x12, x23, x10, lsl #2
 1c8:	ldr	w14, [x12]
 1cc:	ldrsw	x13, [sp, #4156]
 1d0:	cmp	x9, #0x3
 1d4:	str	w14, [sp, #4156]
 1d8:	b.gt	1e4 <BZ2_hbMakeCodeLengths+0x1e4>
 1dc:	mov	w18, #0x1                   	// #1
 1e0:	b	258 <BZ2_hbMakeCodeLengths+0x258>
 1e4:	sxtw	x15, w14
 1e8:	ldr	w15, [x26, x15, lsl #2]
 1ec:	sub	x16, x9, #0x2
 1f0:	mov	w17, #0x1                   	// #1
 1f4:	mov	w0, #0x2                   	// #2
 1f8:	cmp	x16, w0, sxtw
 1fc:	sxtw	x1, w0
 200:	b.le	228 <BZ2_hbMakeCodeLengths+0x228>
 204:	orr	x18, x1, #0x1
 208:	ldrsw	x2, [x23, x18, lsl #2]
 20c:	ldrsw	x1, [x23, x1, lsl #2]
 210:	ldr	w2, [x26, x2, lsl #2]
 214:	ldr	w1, [x26, x1, lsl #2]
 218:	cmp	w2, w1
 21c:	csel	w18, w18, w0, lt  // lt = tstop
 220:	sxtw	x1, w18
 224:	b	22c <BZ2_hbMakeCodeLengths+0x22c>
 228:	mov	w18, w0
 22c:	ldrsw	x1, [x23, x1, lsl #2]
 230:	ldr	w0, [x26, x1, lsl #2]
 234:	cmp	w15, w0
 238:	b.lt	254 <BZ2_hbMakeCodeLengths+0x254>  // b.tstop
 23c:	lsl	w0, w18, #1
 240:	cmp	x16, w0, sxtw
 244:	str	w1, [x23, w17, sxtw #2]
 248:	mov	w17, w18
 24c:	b.ge	1f8 <BZ2_hbMakeCodeLengths+0x1f8>  // b.tcont
 250:	b	258 <BZ2_hbMakeCodeLengths+0x258>
 254:	mov	w18, w17
 258:	ldr	w15, [x26, x11, lsl #2]
 25c:	ldr	w16, [x26, x13, lsl #2]
 260:	str	w14, [x23, w18, sxtw #2]
 264:	add	x8, x8, #0x1
 268:	and	w14, w15, #0xffffff00
 26c:	and	w17, w16, #0xffffff00
 270:	and	w15, w15, #0xff
 274:	add	w17, w17, w14
 278:	asr	w14, w10, #1
 27c:	str	w8, [x23, x10, lsl #2]
 280:	cmp	w15, w16, uxtb
 284:	and	w16, w16, #0xff
 288:	csel	w15, w15, w16, hi  // hi = pmore
 28c:	ldrsw	x16, [x23, w14, sxtw #2]
 290:	add	w15, w15, #0x1
 294:	orr	w15, w15, w17
 298:	str	w15, [x26, x8, lsl #2]
 29c:	ldr	w17, [x26, x16, lsl #2]
 2a0:	str	w8, [x27, x13, lsl #2]
 2a4:	str	w8, [x27, x11, lsl #2]
 2a8:	str	w28, [x27, x8, lsl #2]
 2ac:	cmp	w15, w17
 2b0:	b.ge	2d4 <BZ2_hbMakeCodeLengths+0x2d4>  // b.tcont
 2b4:	str	w16, [x12]
 2b8:	asr	w11, w14, #1
 2bc:	ldrsw	x16, [x23, w11, sxtw #2]
 2c0:	ldr	w12, [x26, x16, lsl #2]
 2c4:	cmp	w15, w12
 2c8:	add	x12, x23, w14, sxtw #2
 2cc:	mov	w14, w11
 2d0:	b.lt	2b4 <BZ2_hbMakeCodeLengths+0x2b4>  // b.tstop
 2d4:	cmp	x9, #0x2
 2d8:	mov	x9, x10
 2dc:	str	w8, [x12]
 2e0:	b.gt	130 <BZ2_hbMakeCodeLengths+0x130>
 2e4:	cmp	w8, #0x204
 2e8:	b.lt	2f4 <BZ2_hbMakeCodeLengths+0x2f4>  // b.tstop
 2ec:	mov	w0, #0x7d2                 	// #2002
 2f0:	bl	0 <BZ2_bz__AssertH__fail>
 2f4:	cmp	w20, #0x1
 2f8:	b.lt	3a4 <BZ2_hbMakeCodeLengths+0x3a4>  // b.tstop
 2fc:	mov	w8, wzr
 300:	mov	w9, #0x1                   	// #1
 304:	mov	w10, #0xffffffff            	// #-1
 308:	mov	w11, w9
 30c:	ldr	w11, [x27, w11, sxtw #2]
 310:	add	w10, w10, #0x1
 314:	tbz	w11, #31, 30c <BZ2_hbMakeCodeLengths+0x30c>
 318:	add	x11, x9, x21
 31c:	cmp	w10, w19
 320:	add	x9, x9, #0x1
 324:	csinc	w8, w8, wzr, le
 328:	cmp	x9, x24
 32c:	sturb	w10, [x11, #-1]
 330:	b.ne	304 <BZ2_hbMakeCodeLengths+0x304>  // b.any
 334:	tst	w8, #0xff
 338:	b.eq	3a4 <BZ2_hbMakeCodeLengths+0x3a4>  // b.none
 33c:	cmp	w20, #0x1
 340:	b.lt	394 <BZ2_hbMakeCodeLengths+0x394>  // b.tstop
 344:	ldr	x9, [sp, #16]
 348:	mov	x8, x22
 34c:	ldr	w10, [x9]
 350:	asr	w10, w10, #8
 354:	cmp	w10, #0x0
 358:	cinc	w10, w10, lt  // lt = tstop
 35c:	lsl	w10, w10, #7
 360:	and	w10, w10, #0xffffff00
 364:	add	w10, w10, #0x100
 368:	subs	x8, x8, #0x1
 36c:	str	w10, [x9], #4
 370:	b.ne	34c <BZ2_hbMakeCodeLengths+0x34c>  // b.any
 374:	mov	w9, #0xfffffffe            	// #-2
 378:	str	w9, [sp, #24]
 37c:	cmp	w20, #0x1
 380:	mov	w9, #0x1                   	// #1
 384:	str	wzr, [sp, #4152]
 388:	str	wzr, [sp, #2088]
 38c:	b.ge	b4 <BZ2_hbMakeCodeLengths+0xb4>  // b.tcont
 390:	b	3a4 <BZ2_hbMakeCodeLengths+0x3a4>
 394:	mov	w8, #0xfffffffe            	// #-2
 398:	str	wzr, [sp, #4152]
 39c:	str	wzr, [sp, #2088]
 3a0:	str	w8, [sp, #24]
 3a4:	add	sp, sp, #0x1, lsl #12
 3a8:	add	sp, sp, #0x450
 3ac:	ldp	x20, x19, [sp, #80]
 3b0:	ldp	x22, x21, [sp, #64]
 3b4:	ldp	x24, x23, [sp, #48]
 3b8:	ldp	x26, x25, [sp, #32]
 3bc:	ldp	x28, x27, [sp, #16]
 3c0:	ldp	x29, x30, [sp], #96
 3c4:	ret

00000000000003c8 <BZ2_hbAssignCodes>:
 3c8:	cmp	w2, w3
 3cc:	b.gt	420 <BZ2_hbAssignCodes+0x58>
 3d0:	mov	w8, wzr
 3d4:	mov	w9, w4
 3d8:	cmp	w4, #0x1
 3dc:	b.lt	410 <BZ2_hbAssignCodes+0x48>  // b.tstop
 3e0:	mov	x10, x9
 3e4:	mov	x11, x1
 3e8:	mov	x12, x0
 3ec:	ldrb	w13, [x11]
 3f0:	cmp	w2, w13
 3f4:	b.ne	400 <BZ2_hbAssignCodes+0x38>  // b.any
 3f8:	str	w8, [x12]
 3fc:	add	w8, w8, #0x1
 400:	add	x12, x12, #0x4
 404:	subs	x10, x10, #0x1
 408:	add	x11, x11, #0x1
 40c:	b.ne	3ec <BZ2_hbAssignCodes+0x24>  // b.any
 410:	cmp	w2, w3
 414:	add	w2, w2, #0x1
 418:	lsl	w8, w8, #1
 41c:	b.lt	3d8 <BZ2_hbAssignCodes+0x10>  // b.tstop
 420:	ret

0000000000000424 <BZ2_hbCreateDecodeTables>:
 424:	cmp	w4, w5
 428:	b.gt	470 <BZ2_hbCreateDecodeTables+0x4c>
 42c:	mov	w8, wzr
 430:	mov	w9, w6
 434:	mov	w10, w4
 438:	cmp	w6, #0x1
 43c:	b.lt	464 <BZ2_hbCreateDecodeTables+0x40>  // b.tstop
 440:	mov	x11, xzr
 444:	ldrb	w12, [x3, x11]
 448:	cmp	w10, w12
 44c:	b.ne	458 <BZ2_hbCreateDecodeTables+0x34>  // b.any
 450:	str	w11, [x2, w8, sxtw #2]
 454:	add	w8, w8, #0x1
 458:	add	x11, x11, #0x1
 45c:	cmp	x9, x11
 460:	b.ne	444 <BZ2_hbCreateDecodeTables+0x20>  // b.any
 464:	cmp	w10, w5
 468:	add	w10, w10, #0x1
 46c:	b.lt	438 <BZ2_hbCreateDecodeTables+0x14>  // b.tstop
 470:	movi	v0.2d, #0x0
 474:	cmp	w6, #0x0
 478:	stur	q0, [x1, #76]
 47c:	stp	q0, q0, [x1, #48]
 480:	stp	q0, q0, [x1, #16]
 484:	str	q0, [x1]
 488:	b.le	4ac <BZ2_hbCreateDecodeTables+0x88>
 48c:	mov	w8, w6
 490:	ldrb	w9, [x3], #1
 494:	subs	x8, x8, #0x1
 498:	add	x9, x1, x9, lsl #2
 49c:	ldr	w10, [x9, #4]
 4a0:	add	w10, w10, #0x1
 4a4:	str	w10, [x9, #4]
 4a8:	b.ne	490 <BZ2_hbCreateDecodeTables+0x6c>  // b.any
 4ac:	mov	w8, wzr
 4b0:	mov	w9, #0x4                   	// #4
 4b4:	ldr	w10, [x1, x9]
 4b8:	add	w8, w10, w8
 4bc:	str	w8, [x1, x9]
 4c0:	add	x9, x9, #0x4
 4c4:	cmp	x9, #0x5c
 4c8:	b.ne	4b4 <BZ2_hbCreateDecodeTables+0x90>  // b.any
 4cc:	movi	v0.2d, #0x0
 4d0:	cmp	w4, w5
 4d4:	stur	q0, [x0, #76]
 4d8:	stp	q0, q0, [x0, #48]
 4dc:	stp	q0, q0, [x0, #16]
 4e0:	str	q0, [x0]
 4e4:	b.gt	51c <BZ2_hbCreateDecodeTables+0xf8>
 4e8:	mov	w9, wzr
 4ec:	sxtw	x8, w4
 4f0:	sxtw	x10, w5
 4f4:	add	x11, x1, x8, lsl #2
 4f8:	ldp	w11, w12, [x11]
 4fc:	cmp	x8, x10
 500:	sub	w11, w12, w11
 504:	add	w9, w11, w9
 508:	sub	w11, w9, #0x1
 50c:	str	w11, [x0, x8, lsl #2]
 510:	add	x8, x8, #0x1
 514:	lsl	w9, w9, #1
 518:	b.lt	4f4 <BZ2_hbCreateDecodeTables+0xd0>  // b.tstop
 51c:	cmp	w4, w5
 520:	b.ge	558 <BZ2_hbCreateDecodeTables+0x134>  // b.tcont
 524:	sxtw	x9, w5
 528:	add	x10, x1, w4, sxtw #2
 52c:	add	x8, x0, w4, sxtw #2
 530:	sub	x9, x9, w4, sxtw
 534:	add	x10, x10, #0x4
 538:	ldr	w11, [x8], #4
 53c:	ldr	w12, [x10]
 540:	subs	x9, x9, #0x1
 544:	lsl	w11, w11, #1
 548:	sub	w11, w11, w12
 54c:	add	w11, w11, #0x2
 550:	str	w11, [x10], #4
 554:	b.ne	538 <BZ2_hbCreateDecodeTables+0x114>  // b.any
 558:	ret

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bsInitWrite>:
       0:	movi	v0.2d, #0x0
       4:	str	d0, [x0, #640]
       8:	ret

000000000000000c <BZ2_compressBlock>:
       c:	stp	x29, x30, [sp, #-96]!
      10:	stp	x28, x27, [sp, #16]
      14:	stp	x26, x25, [sp, #32]
      18:	stp	x24, x23, [sp, #48]
      1c:	stp	x22, x21, [sp, #64]
      20:	stp	x20, x19, [sp, #80]
      24:	mov	x29, sp
      28:	sub	sp, sp, #0x1a0
      2c:	ldr	w5, [x0, #108]
      30:	mov	w20, w1
      34:	str	x0, [sp, #96]
      38:	cmp	w5, #0x1
      3c:	b.lt	80 <BZ2_compressBlock+0x74>  // b.tstop
      40:	ldr	w8, [x0, #648]
      44:	ldr	w9, [x0, #652]
      48:	ldr	w2, [x0, #660]
      4c:	mvn	w3, w8
      50:	eon	w4, w8, w9, ror #31
      54:	cmp	w2, #0x2
      58:	str	w3, [x0, #648]
      5c:	str	w4, [x0, #652]
      60:	b.lt	68 <BZ2_compressBlock+0x5c>  // b.tstop
      64:	str	wzr, [x0, #116]
      68:	ldr	w8, [x0, #656]
      6c:	cmp	w8, #0x2
      70:	b.ge	3928 <BZ2_compressBlock+0x391c>  // b.tcont
      74:	bl	0 <BZ2_blockSort>
      78:	ldr	x0, [sp, #96]
      7c:	ldr	w5, [x0, #108]
      80:	ldr	x8, [x0, #32]
      84:	mov	x19, x0
      88:	add	x8, x8, w5, sxtw
      8c:	str	x8, [x19, #80]!
      90:	ldr	w9, [x19, #580]
      94:	cmp	w9, #0x1
      98:	b.ne	1f4 <BZ2_compressBlock+0x1e8>  // b.any
      9c:	adrp	x9, 0 <BZ2_bsInitWrite>
      a0:	ldr	d0, [x9]
      a4:	ldrsw	x9, [x0, #116]
      a8:	mov	w10, #0x42                  	// #66
      ac:	str	d0, [x0, #640]
      b0:	strb	w10, [x8, x9]
      b4:	ldr	w8, [x0, #116]
      b8:	ldr	w10, [x0, #640]
      bc:	ldr	w9, [x0, #644]
      c0:	add	w8, w8, #0x1
      c4:	lsl	w10, w10, #8
      c8:	sub	w11, w9, #0x8
      cc:	cmp	w9, #0x10
      d0:	str	w8, [x0, #116]
      d4:	str	w10, [x0, #640]
      d8:	str	w11, [x0, #644]
      dc:	b.lt	118 <BZ2_compressBlock+0x10c>  // b.tstop
      e0:	ldr	x9, [x0, #80]
      e4:	lsr	w10, w10, #24
      e8:	strb	w10, [x9, w8, sxtw]
      ec:	ldr	w8, [x0, #116]
      f0:	ldr	w10, [x0, #640]
      f4:	ldr	w9, [x0, #644]
      f8:	add	w8, w8, #0x1
      fc:	lsl	w10, w10, #8
     100:	sub	w11, w9, #0x8
     104:	cmp	w9, #0xf
     108:	str	w8, [x0, #116]
     10c:	str	w10, [x0, #640]
     110:	str	w11, [x0, #644]
     114:	b.gt	e0 <BZ2_compressBlock+0xd4>
     118:	neg	w11, w9
     11c:	mov	w12, #0x5a                  	// #90
     120:	lsl	w11, w12, w11
     124:	cmp	w9, #0x8
     128:	orr	w11, w11, w10
     12c:	str	w11, [x0, #640]
     130:	str	w9, [x0, #644]
     134:	b.lt	170 <BZ2_compressBlock+0x164>  // b.tstop
     138:	ldr	x9, [x0, #80]
     13c:	lsr	w10, w11, #24
     140:	strb	w10, [x9, w8, sxtw]
     144:	ldr	w8, [x0, #116]
     148:	ldr	w9, [x0, #640]
     14c:	ldr	w10, [x0, #644]
     150:	add	w8, w8, #0x1
     154:	lsl	w11, w9, #8
     158:	sub	w9, w10, #0x8
     15c:	cmp	w10, #0xf
     160:	str	w8, [x0, #116]
     164:	str	w11, [x0, #640]
     168:	str	w9, [x0, #644]
     16c:	b.gt	138 <BZ2_compressBlock+0x12c>
     170:	ldr	w14, [x0, #664]
     174:	mov	w10, #0x18                  	// #24
     178:	mov	w12, #0x68                  	// #104
     17c:	sub	w15, w10, w9
     180:	lsl	w12, w12, w15
     184:	orr	w12, w12, w11
     188:	add	w11, w14, #0x30
     18c:	add	w13, w9, #0x8
     190:	and	w11, w11, #0xff
     194:	str	w13, [x0, #644]
     198:	str	w12, [x0, #640]
     19c:	tbnz	w9, #31, 1d8 <BZ2_compressBlock+0x1cc>
     1a0:	ldr	x9, [x0, #80]
     1a4:	lsr	w12, w12, #24
     1a8:	strb	w12, [x9, w8, sxtw]
     1ac:	ldr	w8, [x0, #116]
     1b0:	ldr	w9, [x0, #640]
     1b4:	ldr	w14, [x0, #644]
     1b8:	add	w8, w8, #0x1
     1bc:	lsl	w12, w9, #8
     1c0:	sub	w13, w14, #0x8
     1c4:	cmp	w14, #0xf
     1c8:	str	w8, [x0, #116]
     1cc:	str	w12, [x0, #640]
     1d0:	str	w13, [x0, #644]
     1d4:	b.gt	1a0 <BZ2_compressBlock+0x194>
     1d8:	ldr	w5, [x0, #108]
     1dc:	sub	w8, w10, w13
     1e0:	lsl	w8, w11, w8
     1e4:	add	w9, w13, #0x8
     1e8:	orr	w8, w8, w12
     1ec:	str	w8, [x0, #640]
     1f0:	str	w9, [x0, #644]
     1f4:	cmp	w5, #0x1
     1f8:	b.lt	3658 <BZ2_compressBlock+0x364c>  // b.tstop
     1fc:	ldr	w10, [x0, #644]
     200:	add	x21, x0, #0x284
     204:	add	x24, x0, #0x280
     208:	str	w20, [sp]
     20c:	cmp	w10, #0x7
     210:	b.le	258 <BZ2_compressBlock+0x24c>
     214:	ldr	w9, [x0, #640]
     218:	ldr	w8, [x0, #116]
     21c:	ldr	x10, [x0, #80]
     220:	lsr	w9, w9, #24
     224:	strb	w9, [x10, w8, sxtw]
     228:	ldr	w8, [x0, #116]
     22c:	ldr	w9, [x0, #640]
     230:	ldr	w11, [x0, #644]
     234:	add	w8, w8, #0x1
     238:	lsl	w9, w9, #8
     23c:	sub	w10, w11, #0x8
     240:	cmp	w11, #0xf
     244:	str	w8, [x0, #116]
     248:	str	w9, [x0, #640]
     24c:	str	w10, [x0, #644]
     250:	b.gt	21c <BZ2_compressBlock+0x210>
     254:	b	25c <BZ2_compressBlock+0x250>
     258:	ldr	w9, [x24]
     25c:	mov	w8, #0x18                  	// #24
     260:	mov	w12, #0x31                  	// #49
     264:	sub	w13, w8, w10
     268:	lsl	w12, w12, w13
     26c:	add	w11, w10, #0x8
     270:	orr	w9, w12, w9
     274:	str	w9, [x24]
     278:	str	w11, [x21]
     27c:	tbnz	w10, #31, 2bc <BZ2_compressBlock+0x2b0>
     280:	ldr	w10, [x0, #116]
     284:	ldr	x11, [x0, #80]
     288:	lsr	w9, w9, #24
     28c:	strb	w9, [x11, w10, sxtw]
     290:	ldr	w9, [x0, #116]
     294:	ldr	w11, [x0, #640]
     298:	ldr	w12, [x0, #644]
     29c:	add	w10, w9, #0x1
     2a0:	lsl	w9, w11, #8
     2a4:	sub	w11, w12, #0x8
     2a8:	cmp	w12, #0xf
     2ac:	str	w10, [x0, #116]
     2b0:	str	w9, [x0, #640]
     2b4:	str	w11, [x0, #644]
     2b8:	b.gt	284 <BZ2_compressBlock+0x278>
     2bc:	sub	w8, w8, w11
     2c0:	mov	w12, #0x41                  	// #65
     2c4:	lsl	w8, w12, w8
     2c8:	add	w10, w11, #0x8
     2cc:	orr	w9, w8, w9
     2d0:	str	w9, [x24]
     2d4:	str	w10, [x21]
     2d8:	tbnz	w11, #31, 318 <BZ2_compressBlock+0x30c>
     2dc:	ldr	w8, [x0, #116]
     2e0:	ldr	x10, [x0, #80]
     2e4:	lsr	w9, w9, #24
     2e8:	strb	w9, [x10, w8, sxtw]
     2ec:	ldr	w8, [x0, #116]
     2f0:	ldr	w9, [x0, #640]
     2f4:	ldr	w11, [x0, #644]
     2f8:	add	w8, w8, #0x1
     2fc:	lsl	w9, w9, #8
     300:	sub	w10, w11, #0x8
     304:	cmp	w11, #0xf
     308:	str	w8, [x0, #116]
     30c:	str	w9, [x0, #640]
     310:	str	w10, [x0, #644]
     314:	b.gt	2e0 <BZ2_compressBlock+0x2d4>
     318:	mov	w8, #0x18                  	// #24
     31c:	mov	w12, #0x59                  	// #89
     320:	sub	w13, w8, w10
     324:	lsl	w12, w12, w13
     328:	add	w11, w10, #0x8
     32c:	orr	w9, w12, w9
     330:	str	w9, [x24]
     334:	str	w11, [x21]
     338:	tbnz	w10, #31, 378 <BZ2_compressBlock+0x36c>
     33c:	ldr	w10, [x0, #116]
     340:	ldr	x11, [x0, #80]
     344:	lsr	w9, w9, #24
     348:	strb	w9, [x11, w10, sxtw]
     34c:	ldr	w9, [x0, #116]
     350:	ldr	w11, [x0, #640]
     354:	ldr	w12, [x0, #644]
     358:	add	w10, w9, #0x1
     35c:	lsl	w9, w11, #8
     360:	sub	w11, w12, #0x8
     364:	cmp	w12, #0xf
     368:	str	w10, [x0, #116]
     36c:	str	w9, [x0, #640]
     370:	str	w11, [x0, #644]
     374:	b.gt	340 <BZ2_compressBlock+0x334>
     378:	sub	w8, w8, w11
     37c:	mov	w12, #0x26                  	// #38
     380:	lsl	w8, w12, w8
     384:	add	w10, w11, #0x8
     388:	orr	w9, w8, w9
     38c:	str	w9, [x24]
     390:	str	w10, [x21]
     394:	tbnz	w11, #31, 3d4 <BZ2_compressBlock+0x3c8>
     398:	ldr	w8, [x0, #116]
     39c:	ldr	x10, [x0, #80]
     3a0:	lsr	w9, w9, #24
     3a4:	strb	w9, [x10, w8, sxtw]
     3a8:	ldr	w8, [x0, #116]
     3ac:	ldr	w9, [x0, #640]
     3b0:	ldr	w11, [x0, #644]
     3b4:	add	w8, w8, #0x1
     3b8:	lsl	w9, w9, #8
     3bc:	sub	w10, w11, #0x8
     3c0:	cmp	w11, #0xf
     3c4:	str	w8, [x0, #116]
     3c8:	str	w9, [x0, #640]
     3cc:	str	w10, [x0, #644]
     3d0:	b.gt	39c <BZ2_compressBlock+0x390>
     3d4:	mov	w8, #0x18                  	// #24
     3d8:	mov	w12, #0x53                  	// #83
     3dc:	sub	w13, w8, w10
     3e0:	lsl	w12, w12, w13
     3e4:	add	w11, w10, #0x8
     3e8:	orr	w9, w12, w9
     3ec:	str	w9, [x24]
     3f0:	str	w11, [x21]
     3f4:	tbnz	w10, #31, 434 <BZ2_compressBlock+0x428>
     3f8:	ldr	w10, [x0, #116]
     3fc:	ldr	x11, [x0, #80]
     400:	lsr	w9, w9, #24
     404:	strb	w9, [x11, w10, sxtw]
     408:	ldr	w9, [x0, #116]
     40c:	ldr	w11, [x0, #640]
     410:	ldr	w12, [x0, #644]
     414:	add	w10, w9, #0x1
     418:	lsl	w9, w11, #8
     41c:	sub	w11, w12, #0x8
     420:	cmp	w12, #0xf
     424:	str	w10, [x0, #116]
     428:	str	w9, [x0, #640]
     42c:	str	w11, [x0, #644]
     430:	b.gt	3fc <BZ2_compressBlock+0x3f0>
     434:	ldr	w1, [x0, #648]
     438:	sub	w8, w8, w11
     43c:	mov	w10, #0x59                  	// #89
     440:	lsl	w8, w10, w8
     444:	add	w11, w11, #0x8
     448:	orr	w8, w8, w9
     44c:	str	w8, [x0, #640]
     450:	str	w11, [x0, #644]
     454:	bl	3a2c <bsPutUInt32>
     458:	ldr	x18, [sp, #96]
     45c:	ldr	w10, [x18, #644]
     460:	cmp	w10, #0x7
     464:	b.le	4ac <BZ2_compressBlock+0x4a0>
     468:	ldr	w8, [x18, #640]
     46c:	ldr	w9, [x18, #116]
     470:	ldr	x10, [x18, #80]
     474:	lsr	w8, w8, #24
     478:	strb	w8, [x10, w9, sxtw]
     47c:	ldr	w8, [x18, #116]
     480:	ldr	w10, [x18, #640]
     484:	ldr	w11, [x18, #644]
     488:	add	w9, w8, #0x1
     48c:	lsl	w8, w10, #8
     490:	sub	w10, w11, #0x8
     494:	cmp	w11, #0xf
     498:	str	w9, [x18, #116]
     49c:	str	w8, [x18, #640]
     4a0:	str	w10, [x18, #644]
     4a4:	b.gt	470 <BZ2_compressBlock+0x464>
     4a8:	b	4b0 <BZ2_compressBlock+0x4a4>
     4ac:	ldr	w8, [x24]
     4b0:	ldr	w9, [x18, #48]
     4b4:	add	w11, w10, #0x1
     4b8:	cmp	w10, #0x7
     4bc:	str	w8, [x18, #640]
     4c0:	str	w11, [x18, #644]
     4c4:	b.lt	504 <BZ2_compressBlock+0x4f8>  // b.tstop
     4c8:	ldr	w10, [x18, #116]
     4cc:	ldr	x11, [x18, #80]
     4d0:	lsr	w8, w8, #24
     4d4:	strb	w8, [x11, w10, sxtw]
     4d8:	ldr	w8, [x18, #116]
     4dc:	ldr	w11, [x18, #640]
     4e0:	ldr	w12, [x18, #644]
     4e4:	add	w10, w8, #0x1
     4e8:	lsl	w8, w11, #8
     4ec:	sub	w11, w12, #0x8
     4f0:	cmp	w12, #0xf
     4f4:	str	w10, [x18, #116]
     4f8:	str	w8, [x18, #640]
     4fc:	str	w11, [x18, #644]
     500:	b.gt	4cc <BZ2_compressBlock+0x4c0>
     504:	mov	w12, #0x8                   	// #8
     508:	ldp	x23, x25, [x18, #56]
     50c:	ldr	x20, [x18, #72]
     510:	add	w13, w11, #0x18
     514:	sub	w11, w12, w11
     518:	lsl	w9, w9, w11
     51c:	mov	w26, wzr
     520:	mov	x10, xzr
     524:	orr	w8, w9, w8
     528:	str	w13, [x18, #644]
     52c:	str	w8, [x18, #640]
     530:	str	wzr, [x18, #124]
     534:	add	x8, x18, x10
     538:	ldrb	w9, [x8, #128]
     53c:	cbz	w9, 54c <BZ2_compressBlock+0x540>
     540:	strb	w26, [x8, #384]
     544:	add	w26, w26, #0x1
     548:	str	w26, [x18, #124]
     54c:	add	x10, x10, #0x1
     550:	cmp	x10, #0x100
     554:	b.ne	534 <BZ2_compressBlock+0x528>  // b.any
     558:	cmn	w26, #0x1
     55c:	add	w22, w26, #0x1
     560:	b.lt	5a4 <BZ2_compressBlock+0x598>  // b.tstop
     564:	mov	w8, w22
     568:	lsl	x8, x8, #2
     56c:	add	x0, x18, #0x2a0
     570:	add	x2, x8, #0x4
     574:	mov	w1, wzr
     578:	bl	0 <memset>
     57c:	ldr	x18, [sp, #96]
     580:	cmp	w26, #0x1
     584:	b.lt	5a4 <BZ2_compressBlock+0x598>  // b.tstop
     588:	mov	x8, xzr
     58c:	mov	w9, w26
     590:	add	x10, sp, #0x98
     594:	strb	w8, [x10, x8]
     598:	add	x8, x8, #0x1
     59c:	cmp	x9, x8
     5a0:	b.ne	594 <BZ2_compressBlock+0x588>  // b.any
     5a4:	ldr	w15, [x18, #108]
     5a8:	cmp	w15, #0x1
     5ac:	b.lt	72c <BZ2_compressBlock+0x720>  // b.tstop
     5b0:	add	x10, sp, #0x98
     5b4:	mov	x9, xzr
     5b8:	mov	w13, wzr
     5bc:	mov	w8, wzr
     5c0:	orr	x11, x10, #0x1
     5c4:	mov	w12, #0x1                   	// #1
     5c8:	ldr	w14, [x23, x9, lsl #2]
     5cc:	sub	w14, w14, #0x1
     5d0:	and	w16, w15, w14, asr #31
     5d4:	add	w14, w16, w14
     5d8:	ldrb	w14, [x25, w14, sxtw]
     5dc:	ldrb	w16, [sp, #152]
     5e0:	add	x14, x18, x14
     5e4:	ldrb	w14, [x14, #384]
     5e8:	cmp	w16, w14
     5ec:	b.ne	5f8 <BZ2_compressBlock+0x5ec>  // b.any
     5f0:	add	w13, w13, #0x1
     5f4:	b	6bc <BZ2_compressBlock+0x6b0>
     5f8:	subs	w15, w13, #0x1
     5fc:	b.lt	664 <BZ2_compressBlock+0x658>  // b.tstop
     600:	add	w16, w8, #0x1
     604:	add	x13, x20, w8, sxtw #1
     608:	mov	w8, w16
     60c:	tbnz	w15, #0, 624 <BZ2_compressBlock+0x618>
     610:	strh	wzr, [x13]
     614:	ldr	w16, [x18, #672]
     618:	add	w16, w16, #0x1
     61c:	str	w16, [x18, #672]
     620:	b	634 <BZ2_compressBlock+0x628>
     624:	strh	w12, [x13]
     628:	ldr	w16, [x18, #676]
     62c:	add	w16, w16, #0x1
     630:	str	w16, [x18, #676]
     634:	subs	w16, w15, #0x2
     638:	b.lt	65c <BZ2_compressBlock+0x650>  // b.tstop
     63c:	sub	w15, w15, #0x1
     640:	cmp	w16, #0x0
     644:	csel	w15, w15, w16, lt  // lt = tstop
     648:	add	w8, w8, #0x1
     64c:	asr	w15, w15, #1
     650:	add	x13, x13, #0x2
     654:	tbnz	w15, #0, 624 <BZ2_compressBlock+0x618>
     658:	b	610 <BZ2_compressBlock+0x604>
     65c:	ldrb	w16, [sp, #152]
     660:	mov	w13, wzr
     664:	ldrb	w17, [sp, #153]
     668:	mov	x15, x11
     66c:	strb	w16, [sp, #153]
     670:	cmp	w14, w17
     674:	b.eq	690 <BZ2_compressBlock+0x684>  // b.none
     678:	mov	x15, x11
     67c:	ldrb	w16, [x15, #1]!
     680:	cmp	w14, w16
     684:	strb	w17, [x15]
     688:	mov	w17, w16
     68c:	b.ne	67c <BZ2_compressBlock+0x670>  // b.any
     690:	strb	w14, [sp, #152]
     694:	sub	w14, w15, w10
     698:	sxtw	x14, w14
     69c:	add	x14, x14, #0x1
     6a0:	strh	w14, [x20, w8, sxtw #1]
     6a4:	add	x14, x18, x14, lsl #2
     6a8:	ldr	w15, [x14, #672]
     6ac:	add	w8, w8, #0x1
     6b0:	add	w15, w15, #0x1
     6b4:	str	w15, [x14, #672]
     6b8:	ldr	w15, [x18, #108]
     6bc:	add	x9, x9, #0x1
     6c0:	cmp	x9, w15, sxtw
     6c4:	b.lt	5c8 <BZ2_compressBlock+0x5bc>  // b.tstop
     6c8:	subs	w9, w13, #0x1
     6cc:	b.lt	730 <BZ2_compressBlock+0x724>  // b.tstop
     6d0:	add	x10, x20, w8, sxtw #1
     6d4:	add	w8, w8, #0x1
     6d8:	mov	w11, #0x1                   	// #1
     6dc:	tbnz	w9, #0, 6f4 <BZ2_compressBlock+0x6e8>
     6e0:	strh	wzr, [x10]
     6e4:	ldr	w12, [x18, #672]
     6e8:	add	w12, w12, #0x1
     6ec:	str	w12, [x18, #672]
     6f0:	b	704 <BZ2_compressBlock+0x6f8>
     6f4:	strh	w11, [x10]
     6f8:	ldr	w12, [x18, #676]
     6fc:	add	w12, w12, #0x1
     700:	str	w12, [x18, #676]
     704:	subs	w12, w9, #0x2
     708:	b.lt	730 <BZ2_compressBlock+0x724>  // b.tstop
     70c:	sub	w9, w9, #0x1
     710:	cmp	w12, #0x0
     714:	csel	w9, w9, w12, lt  // lt = tstop
     718:	add	w8, w8, #0x1
     71c:	asr	w9, w9, #1
     720:	add	x10, x10, #0x2
     724:	tbnz	w9, #0, 6f4 <BZ2_compressBlock+0x6e8>
     728:	b	6e0 <BZ2_compressBlock+0x6d4>
     72c:	mov	w8, wzr
     730:	strh	w22, [x20, w8, sxtw #1]
     734:	add	x9, x18, w22, sxtw #2
     738:	ldr	w10, [x9, #672]
     73c:	add	w3, w8, #0x1
     740:	add	w10, w10, #0x1
     744:	str	w10, [x9, #672]
     748:	ldr	w9, [x18, #656]
     74c:	ldr	x25, [x18, #72]
     750:	str	w3, [x18, #668]
     754:	cmp	w9, #0x2
     758:	b.gt	3944 <BZ2_compressBlock+0x3938>
     75c:	ldrsw	x13, [x18, #124]
     760:	mov	w8, #0x934c                	// #37708
     764:	mov	x20, xzr
     768:	add	x22, x18, x8
     76c:	add	w23, w13, #0x2
     770:	cmp	w23, #0x1
     774:	csinc	w26, w23, wzr, gt
     778:	str	x13, [sp, #64]
     77c:	cmn	w13, #0x1
     780:	b.lt	79c <BZ2_compressBlock+0x790>  // b.tstop
     784:	add	x0, x22, x20
     788:	mov	w1, #0xf                   	// #15
     78c:	mov	x2, x26
     790:	bl	0 <memset>
     794:	ldr	x13, [sp, #64]
     798:	ldr	x18, [sp, #96]
     79c:	add	x20, x20, #0x102
     7a0:	cmp	x20, #0x60c
     7a4:	b.ne	77c <BZ2_compressBlock+0x770>  // b.any
     7a8:	ldr	w15, [x18, #668]
     7ac:	cmp	w15, #0x0
     7b0:	b.gt	7c8 <BZ2_compressBlock+0x7bc>
     7b4:	mov	w0, #0xbb9                 	// #3001
     7b8:	bl	0 <BZ2_bz__AssertH__fail>
     7bc:	ldr	x18, [sp, #96]
     7c0:	ldr	x13, [sp, #64]
     7c4:	ldr	w15, [x18, #668]
     7c8:	cmp	w15, #0xc8
     7cc:	stp	x26, x25, [sp, #72]
     7d0:	b.ge	7dc <BZ2_compressBlock+0x7d0>  // b.tcont
     7d4:	mov	w8, #0x2                   	// #2
     7d8:	b	808 <BZ2_compressBlock+0x7fc>
     7dc:	cmp	w15, #0x258
     7e0:	b.ge	7ec <BZ2_compressBlock+0x7e0>  // b.tcont
     7e4:	mov	w8, #0x3                   	// #3
     7e8:	b	808 <BZ2_compressBlock+0x7fc>
     7ec:	cmp	w15, #0x4b0
     7f0:	b.ge	7fc <BZ2_compressBlock+0x7f0>  // b.tcont
     7f4:	mov	w8, #0x4                   	// #4
     7f8:	b	808 <BZ2_compressBlock+0x7fc>
     7fc:	cmp	w15, #0x960
     800:	mov	w8, #0x5                   	// #5
     804:	cinc	w8, w8, ge  // ge = tcont
     808:	sxtw	x9, w23
     80c:	stp	x23, x9, [sp, #32]
     810:	mov	w9, #0x102                 	// #258
     814:	mov	w11, w8
     818:	mov	w10, #0x924a                	// #37450
     81c:	umaddl	x8, w8, w9, x18
     820:	mov	w25, wzr
     824:	add	x23, x18, #0x2a4
     828:	mov	x28, #0x100000000           	// #4294967296
     82c:	add	x20, x8, x10
     830:	mov	w22, #0xf                   	// #15
     834:	mov	x16, x11
     838:	str	x11, [sp, #104]
     83c:	sub	w27, w25, #0x1
     840:	cmp	w27, w13
     844:	mov	w26, wzr
     848:	b.gt	8c0 <BZ2_compressBlock+0x8b4>
     84c:	sdiv	w9, w15, w16
     850:	cmp	w9, #0x1
     854:	b.lt	8c0 <BZ2_compressBlock+0x8b4>  // b.tstop
     858:	mov	w26, wzr
     85c:	sxtw	x10, w27
     860:	sbfiz	x8, x27, #32, #32
     864:	ldr	w11, [x23, x10, lsl #2]
     868:	add	x27, x10, #0x1
     86c:	cmp	x10, x13
     870:	add	x8, x8, x28
     874:	add	w26, w11, w26
     878:	b.ge	888 <BZ2_compressBlock+0x87c>  // b.tcont
     87c:	cmp	w26, w9
     880:	mov	x10, x27
     884:	b.lt	864 <BZ2_compressBlock+0x858>  // b.tstop
     888:	cmp	w25, w27
     88c:	b.ge	8c0 <BZ2_compressBlock+0x8b4>  // b.tcont
     890:	ldr	x9, [sp, #104]
     894:	cmp	x16, x9
     898:	b.eq	8c0 <BZ2_compressBlock+0x8b4>  // b.none
     89c:	cmp	x16, #0x1
     8a0:	b.eq	8c0 <BZ2_compressBlock+0x8b4>  // b.none
     8a4:	ldr	x9, [sp, #104]
     8a8:	sub	w9, w9, w16
     8ac:	tbz	w9, #0, 8c0 <BZ2_compressBlock+0x8b4>
     8b0:	add	x8, x18, x8, asr #30
     8b4:	ldr	w8, [x8, #672]
     8b8:	sub	w27, w27, #0x1
     8bc:	sub	w26, w26, w8
     8c0:	ldr	w8, [x18, #656]
     8c4:	cmp	w8, #0x3
     8c8:	b.ge	920 <BZ2_compressBlock+0x914>  // b.tcont
     8cc:	ldr	x14, [sp, #40]
     8d0:	cmn	w13, #0x1
     8d4:	sub	x8, x16, #0x1
     8d8:	b.lt	904 <BZ2_compressBlock+0x8f8>  // b.tstop
     8dc:	mov	x9, xzr
     8e0:	sxtw	x10, w27
     8e4:	sxtw	x11, w25
     8e8:	cmp	x9, x10
     8ec:	ccmp	x9, x11, #0x8, le
     8f0:	csel	w12, w22, wzr, lt  // lt = tstop
     8f4:	strb	w12, [x20, x9]
     8f8:	add	x9, x9, #0x1
     8fc:	cmp	x9, x14
     900:	b.lt	8e8 <BZ2_compressBlock+0x8dc>  // b.tstop
     904:	add	w25, w27, #0x1
     908:	sub	w15, w15, w26
     90c:	cmp	x16, #0x1
     910:	sub	x20, x20, #0x102
     914:	mov	x16, x8
     918:	b.gt	83c <BZ2_compressBlock+0x830>
     91c:	b	984 <BZ2_compressBlock+0x978>
     920:	ldr	s0, [x18, #668]
     924:	adrp	x8, 0 <stderr>
     928:	ldr	x0, [x8]
     92c:	scvtf	s1, w26
     930:	mov	x8, #0x4059000000000000    	// #4636737291354636288
     934:	fcvt	d1, s1
     938:	fmov	d2, x8
     93c:	scvtf	s0, s0
     940:	fmul	d1, d1, d2
     944:	fcvt	d0, s0
     948:	adrp	x1, 0 <BZ2_bsInitWrite>
     94c:	fdiv	d0, d1, d0
     950:	add	x1, x1, #0x0
     954:	mov	x2, x16
     958:	mov	w3, w25
     95c:	mov	w4, w27
     960:	mov	w5, w26
     964:	str	x16, [sp, #112]
     968:	str	w15, [sp, #88]
     96c:	bl	0 <fprintf>
     970:	ldr	x16, [sp, #112]
     974:	ldr	w15, [sp, #88]
     978:	ldr	x13, [sp, #64]
     97c:	ldr	x18, [sp, #96]
     980:	b	8cc <BZ2_compressBlock+0x8c0>
     984:	ldr	x22, [sp, #104]
     988:	mov	w9, #0xc9b8                	// #51640
     98c:	mov	w11, #0xb188                	// #45448
     990:	add	x11, x18, x11
     994:	lsl	x8, x22, #2
     998:	str	x8, [sp, #16]
     99c:	ldr	x8, [sp, #72]
     9a0:	cmp	w22, #0x6
     9a4:	cset	w10, ne  // ne = any
     9a8:	cmn	w13, #0x1
     9ac:	lsl	x28, x8, #2
     9b0:	lsl	x8, x22, #1
     9b4:	str	x8, [sp, #72]
     9b8:	mov	w8, #0x934c                	// #37708
     9bc:	add	x8, x18, x8
     9c0:	str	x8, [sp, #88]
     9c4:	add	x8, x18, x9
     9c8:	str	x8, [sp, #56]
     9cc:	cset	w8, lt  // lt = tstop
     9d0:	orr	w8, w8, w10
     9d4:	str	wzr, [sp, #52]
     9d8:	str	x11, [sp, #24]
     9dc:	str	w8, [sp, #4]
     9e0:	str	x28, [sp, #8]
     9e4:	ldr	x2, [sp, #16]
     9e8:	add	x0, sp, #0x98
     9ec:	mov	w1, wzr
     9f0:	bl	0 <memset>
     9f4:	ldr	x27, [sp, #24]
     9f8:	ldr	x8, [sp, #64]
     9fc:	mov	x25, x22
     a00:	cmn	w8, #0x1
     a04:	b.lt	a1c <BZ2_compressBlock+0xa10>  // b.tstop
     a08:	mov	x0, x27
     a0c:	mov	w1, wzr
     a10:	mov	x2, x28
     a14:	bl	0 <memset>
     a18:	ldr	x8, [sp, #64]
     a1c:	subs	x25, x25, #0x1
     a20:	add	x27, x27, #0x408
     a24:	b.ne	a00 <BZ2_compressBlock+0x9f4>  // b.any
     a28:	ldp	x27, x17, [sp, #88]
     a2c:	ldr	x14, [sp, #40]
     a30:	ldr	w8, [sp, #4]
     a34:	tbnz	w8, #0, a88 <BZ2_compressBlock+0xa7c>
     a38:	mov	x8, xzr
     a3c:	mov	x9, xzr
     a40:	add	x10, x27, x9
     a44:	ldrb	w11, [x10, #258]
     a48:	ldrb	w12, [x10]
     a4c:	add	x13, x27, x8
     a50:	add	x9, x9, #0x1
     a54:	cmp	x9, x14
     a58:	bfi	w12, w11, #16, #8
     a5c:	str	w12, [x13, #13932]
     a60:	ldrb	w11, [x10, #774]
     a64:	ldrb	w12, [x10, #516]
     a68:	add	x8, x8, #0x10
     a6c:	bfi	w12, w11, #16, #8
     a70:	str	w12, [x13, #13936]
     a74:	ldrb	w11, [x10, #1290]
     a78:	ldrb	w10, [x10, #1032]
     a7c:	bfi	w10, w11, #16, #8
     a80:	str	w10, [x13, #13940]
     a84:	b.lt	a40 <BZ2_compressBlock+0xa34>  // b.tstop
     a88:	ldr	w28, [x17, #668]
     a8c:	cmp	w28, #0x1
     a90:	b.lt	14d0 <BZ2_compressBlock+0x14c4>  // b.tstop
     a94:	mov	w25, wzr
     a98:	mov	w20, wzr
     a9c:	str	xzr, [sp, #112]
     aa0:	ldr	x2, [sp, #72]
     aa4:	cmp	w22, #0x6
     aa8:	sxtw	x8, w25
     aac:	add	x0, sp, #0x8c
     ab0:	mov	w1, wzr
     ab4:	cset	w22, eq  // eq = none
     ab8:	mov	x23, x8
     abc:	add	x26, x8, #0x31
     ac0:	sub	w27, w28, #0x1
     ac4:	bl	0 <memset>
     ac8:	cmp	w26, w28
     acc:	csel	w8, w26, w27, lt  // lt = tstop
     ad0:	sub	w9, w8, w25
     ad4:	cmp	w9, #0x31
     ad8:	cset	w9, eq  // eq = none
     adc:	and	w9, w22, w9
     ae0:	tbz	w9, #0, 1098 <BZ2_compressBlock+0x108c>
     ae4:	ldr	x18, [sp, #80]
     ae8:	ldr	x0, [sp, #56]
     aec:	ldr	x27, [sp, #88]
     af0:	mov	w1, #0xb188                	// #45448
     af4:	add	x10, x18, x23, lsl #1
     af8:	ldrh	w11, [x10]
     afc:	ldrh	w12, [x10, #2]
     b00:	ldrh	w15, [x10, #4]
     b04:	add	x3, sp, #0x8c
     b08:	add	x11, x0, x11, lsl #4
     b0c:	add	x12, x0, x12, lsl #4
     b10:	ldp	w13, w17, [x12]
     b14:	ldp	w14, w16, [x11]
     b18:	ldr	w11, [x11, #8]
     b1c:	ldr	w12, [x12, #8]
     b20:	add	x15, x0, x15, lsl #4
     b24:	add	w13, w13, w14
     b28:	ldrh	w14, [x10, #6]
     b2c:	add	w16, w17, w16
     b30:	add	w11, w12, w11
     b34:	ldp	w17, w12, [x15]
     b38:	ldr	w15, [x15, #8]
     b3c:	add	x14, x0, x14, lsl #4
     b40:	add	w13, w13, w17
     b44:	ldrh	w17, [x10, #8]
     b48:	add	w12, w16, w12
     b4c:	add	w11, w11, w15
     b50:	ldp	w15, w16, [x14]
     b54:	ldr	w14, [x14, #8]
     b58:	add	x17, x0, x17, lsl #4
     b5c:	add	w13, w13, w15
     b60:	add	w12, w12, w16
     b64:	ldrh	w16, [x10, #10]
     b68:	add	w11, w11, w14
     b6c:	ldp	w15, w14, [x17]
     b70:	ldr	w17, [x17, #8]
     b74:	add	x16, x0, x16, lsl #4
     b78:	add	w13, w13, w15
     b7c:	ldrh	w15, [x10, #12]
     b80:	add	w12, w12, w14
     b84:	add	w11, w11, w17
     b88:	ldp	w14, w17, [x16]
     b8c:	ldr	w16, [x16, #8]
     b90:	add	x15, x0, x15, lsl #4
     b94:	add	w13, w13, w14
     b98:	ldrh	w14, [x10, #14]
     b9c:	add	w12, w12, w17
     ba0:	add	w11, w11, w16
     ba4:	ldp	w16, w17, [x15]
     ba8:	ldr	w15, [x15, #8]
     bac:	add	x14, x0, x14, lsl #4
     bb0:	add	w12, w12, w17
     bb4:	ldrh	w17, [x10, #16]
     bb8:	add	w13, w13, w16
     bbc:	add	w11, w11, w15
     bc0:	ldp	w16, w15, [x14]
     bc4:	ldr	w14, [x14, #8]
     bc8:	add	x17, x0, x17, lsl #4
     bcc:	add	w13, w13, w16
     bd0:	ldrh	w16, [x10, #18]
     bd4:	add	w12, w12, w15
     bd8:	add	w11, w11, w14
     bdc:	ldp	w15, w14, [x17]
     be0:	ldr	w17, [x17, #8]
     be4:	add	x16, x0, x16, lsl #4
     be8:	add	w13, w13, w15
     bec:	ldrh	w15, [x10, #20]
     bf0:	add	w12, w12, w14
     bf4:	add	w11, w11, w17
     bf8:	ldp	w14, w17, [x16]
     bfc:	ldr	w16, [x16, #8]
     c00:	add	x15, x0, x15, lsl #4
     c04:	add	w13, w13, w14
     c08:	add	w12, w12, w17
     c0c:	ldrh	w17, [x10, #22]
     c10:	add	w11, w11, w16
     c14:	ldp	w14, w16, [x15]
     c18:	ldr	w15, [x15, #8]
     c1c:	add	x17, x0, x17, lsl #4
     c20:	add	w13, w13, w14
     c24:	ldrh	w14, [x10, #24]
     c28:	add	w12, w12, w16
     c2c:	add	w11, w11, w15
     c30:	ldp	w16, w15, [x17]
     c34:	ldr	w17, [x17, #8]
     c38:	add	x14, x0, x14, lsl #4
     c3c:	add	w13, w13, w16
     c40:	ldrh	w16, [x10, #26]
     c44:	add	w12, w12, w15
     c48:	add	w11, w11, w17
     c4c:	ldp	w15, w17, [x14]
     c50:	ldr	w14, [x14, #8]
     c54:	add	x16, x0, x16, lsl #4
     c58:	add	w12, w12, w17
     c5c:	ldrh	w17, [x10, #28]
     c60:	add	w13, w13, w15
     c64:	add	w11, w11, w14
     c68:	ldp	w15, w14, [x16]
     c6c:	ldr	w16, [x16, #8]
     c70:	add	x17, x0, x17, lsl #4
     c74:	add	w13, w13, w15
     c78:	ldrh	w15, [x10, #30]
     c7c:	add	w12, w12, w14
     c80:	add	w11, w11, w16
     c84:	ldp	w14, w16, [x17]
     c88:	ldr	w17, [x17, #8]
     c8c:	add	x15, x0, x15, lsl #4
     c90:	add	w13, w13, w14
     c94:	ldrh	w14, [x10, #32]
     c98:	add	w12, w12, w16
     c9c:	add	w11, w11, w17
     ca0:	ldp	w16, w17, [x15]
     ca4:	ldr	w15, [x15, #8]
     ca8:	add	x14, x0, x14, lsl #4
     cac:	add	w13, w13, w16
     cb0:	add	w12, w12, w17
     cb4:	ldrh	w17, [x10, #34]
     cb8:	add	w11, w11, w15
     cbc:	ldp	w16, w15, [x14]
     cc0:	ldr	w14, [x14, #8]
     cc4:	add	x17, x0, x17, lsl #4
     cc8:	add	w13, w13, w16
     ccc:	ldrh	w16, [x10, #36]
     cd0:	add	w12, w12, w15
     cd4:	add	w11, w11, w14
     cd8:	ldp	w15, w14, [x17]
     cdc:	ldr	w17, [x17, #8]
     ce0:	add	x16, x0, x16, lsl #4
     ce4:	add	w13, w13, w15
     ce8:	ldrh	w15, [x10, #38]
     cec:	add	w12, w12, w14
     cf0:	add	w11, w11, w17
     cf4:	ldp	w14, w17, [x16]
     cf8:	ldr	w16, [x16, #8]
     cfc:	add	x15, x0, x15, lsl #4
     d00:	add	w12, w12, w17
     d04:	ldrh	w17, [x10, #40]
     d08:	add	w13, w13, w14
     d0c:	add	w11, w11, w16
     d10:	ldp	w14, w16, [x15]
     d14:	ldr	w15, [x15, #8]
     d18:	add	x17, x0, x17, lsl #4
     d1c:	add	w13, w13, w14
     d20:	ldrh	w14, [x10, #42]
     d24:	add	w12, w12, w16
     d28:	add	w11, w11, w15
     d2c:	ldp	w16, w15, [x17]
     d30:	ldr	w17, [x17, #8]
     d34:	add	x14, x0, x14, lsl #4
     d38:	add	w13, w13, w16
     d3c:	ldrh	w16, [x10, #44]
     d40:	add	w12, w12, w15
     d44:	add	w11, w11, w17
     d48:	ldp	w15, w17, [x14]
     d4c:	ldr	w14, [x14, #8]
     d50:	add	x16, x0, x16, lsl #4
     d54:	add	w13, w13, w15
     d58:	add	w12, w12, w17
     d5c:	ldrh	w17, [x10, #46]
     d60:	add	w11, w11, w14
     d64:	ldp	w15, w14, [x16]
     d68:	ldr	w16, [x16, #8]
     d6c:	add	x17, x0, x17, lsl #4
     d70:	add	w13, w13, w15
     d74:	ldrh	w15, [x10, #48]
     d78:	add	w12, w12, w14
     d7c:	add	w11, w11, w16
     d80:	ldp	w14, w16, [x17]
     d84:	ldr	w17, [x17, #8]
     d88:	add	x15, x0, x15, lsl #4
     d8c:	add	w13, w13, w14
     d90:	ldrh	w14, [x10, #50]
     d94:	add	w12, w12, w16
     d98:	add	w11, w11, w17
     d9c:	ldp	w16, w17, [x15]
     da0:	ldr	w15, [x15, #8]
     da4:	add	x14, x0, x14, lsl #4
     da8:	add	w12, w12, w17
     dac:	ldrh	w17, [x10, #52]
     db0:	add	w13, w13, w16
     db4:	add	w11, w11, w15
     db8:	ldp	w16, w15, [x14]
     dbc:	ldr	w14, [x14, #8]
     dc0:	add	x17, x0, x17, lsl #4
     dc4:	add	w13, w13, w16
     dc8:	ldrh	w16, [x10, #54]
     dcc:	add	w12, w12, w15
     dd0:	add	w11, w11, w14
     dd4:	ldp	w15, w14, [x17]
     dd8:	ldr	w17, [x17, #8]
     ddc:	add	x16, x0, x16, lsl #4
     de0:	add	w13, w13, w15
     de4:	ldrh	w15, [x10, #56]
     de8:	add	w12, w12, w14
     dec:	add	w11, w11, w17
     df0:	ldp	w14, w17, [x16]
     df4:	ldr	w16, [x16, #8]
     df8:	add	x15, x0, x15, lsl #4
     dfc:	add	w13, w13, w14
     e00:	add	w12, w12, w17
     e04:	ldrh	w17, [x10, #58]
     e08:	add	w11, w11, w16
     e0c:	ldp	w14, w16, [x15]
     e10:	ldr	w15, [x15, #8]
     e14:	add	x17, x0, x17, lsl #4
     e18:	add	w13, w13, w14
     e1c:	ldrh	w14, [x10, #60]
     e20:	add	w12, w12, w16
     e24:	add	w11, w11, w15
     e28:	ldp	w16, w15, [x17]
     e2c:	ldr	w17, [x17, #8]
     e30:	add	x14, x0, x14, lsl #4
     e34:	add	w13, w13, w16
     e38:	ldrh	w16, [x10, #62]
     e3c:	add	w12, w12, w15
     e40:	add	w11, w11, w17
     e44:	ldp	w15, w17, [x14]
     e48:	ldr	w14, [x14, #8]
     e4c:	add	x16, x0, x16, lsl #4
     e50:	add	w12, w12, w17
     e54:	ldrh	w17, [x10, #64]
     e58:	add	w13, w13, w15
     e5c:	add	w11, w11, w14
     e60:	ldp	w15, w14, [x16]
     e64:	ldr	w16, [x16, #8]
     e68:	add	x17, x0, x17, lsl #4
     e6c:	add	w13, w13, w15
     e70:	ldrh	w15, [x10, #66]
     e74:	add	w12, w12, w14
     e78:	add	w11, w11, w16
     e7c:	ldp	w14, w16, [x17]
     e80:	ldr	w17, [x17, #8]
     e84:	add	x15, x0, x15, lsl #4
     e88:	add	w13, w13, w14
     e8c:	ldrh	w14, [x10, #68]
     e90:	add	w12, w12, w16
     e94:	add	w11, w11, w17
     e98:	ldp	w16, w17, [x15]
     e9c:	ldr	w15, [x15, #8]
     ea0:	add	x14, x0, x14, lsl #4
     ea4:	add	w13, w13, w16
     ea8:	add	w12, w12, w17
     eac:	ldrh	w17, [x10, #70]
     eb0:	add	w11, w11, w15
     eb4:	ldp	w16, w15, [x14]
     eb8:	ldr	w14, [x14, #8]
     ebc:	add	x17, x0, x17, lsl #4
     ec0:	add	w13, w13, w16
     ec4:	ldrh	w16, [x10, #72]
     ec8:	add	w12, w12, w15
     ecc:	add	w11, w11, w14
     ed0:	ldp	w15, w14, [x17]
     ed4:	ldr	w17, [x17, #8]
     ed8:	add	x16, x0, x16, lsl #4
     edc:	add	w13, w13, w15
     ee0:	ldrh	w15, [x10, #74]
     ee4:	add	w12, w12, w14
     ee8:	add	w11, w11, w17
     eec:	ldp	w14, w17, [x16]
     ef0:	ldr	w16, [x16, #8]
     ef4:	add	x15, x0, x15, lsl #4
     ef8:	add	w12, w12, w17
     efc:	ldrh	w17, [x10, #76]
     f00:	add	w13, w13, w14
     f04:	add	w11, w11, w16
     f08:	ldp	w14, w16, [x15]
     f0c:	ldr	w15, [x15, #8]
     f10:	add	x17, x0, x17, lsl #4
     f14:	add	w13, w13, w14
     f18:	ldrh	w14, [x10, #78]
     f1c:	add	w12, w12, w16
     f20:	add	w11, w11, w15
     f24:	ldp	w16, w15, [x17]
     f28:	ldr	w17, [x17, #8]
     f2c:	add	x14, x0, x14, lsl #4
     f30:	add	w13, w13, w16
     f34:	ldrh	w16, [x10, #80]
     f38:	add	w12, w12, w15
     f3c:	add	w11, w11, w17
     f40:	ldp	w15, w17, [x14]
     f44:	ldr	w14, [x14, #8]
     f48:	add	x16, x0, x16, lsl #4
     f4c:	add	w13, w13, w15
     f50:	add	w12, w12, w17
     f54:	ldrh	w17, [x10, #82]
     f58:	add	w11, w11, w14
     f5c:	ldp	w15, w14, [x16]
     f60:	ldr	w16, [x16, #8]
     f64:	add	x17, x0, x17, lsl #4
     f68:	add	w13, w13, w15
     f6c:	ldrh	w15, [x10, #84]
     f70:	add	w12, w12, w14
     f74:	add	w11, w11, w16
     f78:	ldp	w14, w16, [x17]
     f7c:	ldr	w17, [x17, #8]
     f80:	add	x15, x0, x15, lsl #4
     f84:	add	w13, w13, w14
     f88:	ldrh	w14, [x10, #86]
     f8c:	add	w12, w12, w16
     f90:	add	w11, w11, w17
     f94:	ldp	w16, w17, [x15]
     f98:	ldr	w15, [x15, #8]
     f9c:	add	x14, x0, x14, lsl #4
     fa0:	add	w12, w12, w17
     fa4:	ldrh	w17, [x10, #88]
     fa8:	add	w13, w13, w16
     fac:	add	w11, w11, w15
     fb0:	ldp	w16, w15, [x14]
     fb4:	ldr	w14, [x14, #8]
     fb8:	add	x17, x0, x17, lsl #4
     fbc:	add	w13, w13, w16
     fc0:	ldrh	w16, [x10, #90]
     fc4:	add	w12, w12, w15
     fc8:	add	w11, w11, w14
     fcc:	ldp	w15, w14, [x17]
     fd0:	ldr	w17, [x17, #8]
     fd4:	add	x16, x0, x16, lsl #4
     fd8:	add	w13, w13, w15
     fdc:	ldrh	w15, [x10, #92]
     fe0:	add	w12, w12, w14
     fe4:	add	w11, w11, w17
     fe8:	ldp	w14, w17, [x16]
     fec:	ldr	w16, [x16, #8]
     ff0:	add	x15, x0, x15, lsl #4
     ff4:	add	w13, w13, w14
     ff8:	add	w11, w11, w16
     ffc:	ldp	w14, w16, [x15]
    1000:	add	w12, w12, w17
    1004:	ldrh	w17, [x10, #94]
    1008:	ldrh	w10, [x10, #96]
    100c:	add	w13, w13, w14
    1010:	ldr	w14, [x15, #8]
    1014:	add	x15, x0, x17, lsl #4
    1018:	add	w12, w12, w16
    101c:	add	x10, x0, x10, lsl #4
    1020:	add	w11, w11, w14
    1024:	ldp	w16, w14, [x15]
    1028:	ldr	w15, [x15, #8]
    102c:	ldp	x17, x22, [sp, #96]
    1030:	add	w13, w13, w16
    1034:	ldrh	w16, [x18, x26, lsl #1]
    1038:	add	w12, w12, w14
    103c:	add	w11, w11, w15
    1040:	ldp	w14, w15, [x10]
    1044:	add	x16, x0, x16, lsl #4
    1048:	ldr	w10, [x10, #8]
    104c:	ldr	x0, [sp, #112]
    1050:	add	w13, w13, w14
    1054:	add	w12, w12, w15
    1058:	ldp	w14, w15, [x16]
    105c:	ldr	w16, [x16, #8]
    1060:	add	w10, w11, w10
    1064:	add	w11, w13, w14
    1068:	add	w12, w12, w15
    106c:	add	w10, w10, w16
    1070:	strh	w11, [sp, #140]
    1074:	lsr	w11, w11, #16
    1078:	strh	w12, [sp, #144]
    107c:	lsr	w12, w12, #16
    1080:	strh	w10, [sp, #148]
    1084:	lsr	w10, w10, #16
    1088:	strh	w11, [sp, #142]
    108c:	strh	w12, [sp, #146]
    1090:	strh	w10, [sp, #150]
    1094:	b	10f4 <BZ2_compressBlock+0x10e8>
    1098:	ldp	x17, x22, [sp, #96]
    109c:	ldp	x18, x27, [sp, #80]
    10a0:	ldr	x0, [sp, #112]
    10a4:	cmp	w8, w23
    10a8:	mov	w1, #0xb188                	// #45448
    10ac:	add	x3, sp, #0x8c
    10b0:	b.lt	10f4 <BZ2_compressBlock+0x10e8>  // b.tstop
    10b4:	sxtw	x10, w8
    10b8:	mov	x11, x23
    10bc:	ldrh	w12, [x18, x11, lsl #1]
    10c0:	add	x13, sp, #0x8c
    10c4:	mov	x14, x22
    10c8:	add	x12, x27, x12
    10cc:	ldrb	w15, [x12]
    10d0:	ldrh	w16, [x13]
    10d4:	subs	x14, x14, #0x1
    10d8:	add	x12, x12, #0x102
    10dc:	add	w15, w16, w15
    10e0:	strh	w15, [x13], #2
    10e4:	b.ne	10cc <BZ2_compressBlock+0x10c0>  // b.any
    10e8:	cmp	x11, x10
    10ec:	add	x11, x11, #0x1
    10f0:	b.ne	10bc <BZ2_compressBlock+0x10b0>  // b.any
    10f4:	mov	w11, #0xc9ff                	// #51711
    10f8:	mov	x12, xzr
    10fc:	movk	w11, #0x3b9a, lsl #16
    1100:	mov	w10, #0xffffffff            	// #-1
    1104:	ldrh	w13, [x3, x12, lsl #1]
    1108:	cmp	w11, w13
    110c:	csel	w10, w12, w10, gt
    1110:	add	x12, x12, #0x1
    1114:	csel	w11, w13, w11, gt
    1118:	cmp	x22, x12
    111c:	b.ne	1104 <BZ2_compressBlock+0x10f8>  // b.any
    1120:	add	x14, sp, #0x98
    1124:	ldr	w12, [x14, w10, sxtw #2]
    1128:	add	w20, w11, w20
    112c:	sxtw	x11, w10
    1130:	add	x13, x17, x0
    1134:	add	w12, w12, #0x1
    1138:	add	x0, x0, #0x1
    113c:	str	w12, [x14, w10, sxtw #2]
    1140:	strb	w10, [x13, #1704]
    1144:	tbz	w9, #0, 147c <BZ2_compressBlock+0x1470>
    1148:	add	x10, x18, x23, lsl #1
    114c:	ldrh	w12, [x10]
    1150:	mov	w9, #0x408                 	// #1032
    1154:	madd	x9, x11, x9, x17
    1158:	add	x9, x9, x1
    115c:	ldr	w11, [x9, x12, lsl #2]
    1160:	add	w11, w11, #0x1
    1164:	str	w11, [x9, x12, lsl #2]
    1168:	ldrh	w11, [x10, #2]
    116c:	ldr	w12, [x9, x11, lsl #2]
    1170:	add	w12, w12, #0x1
    1174:	str	w12, [x9, x11, lsl #2]
    1178:	ldrh	w11, [x10, #4]
    117c:	ldr	w12, [x9, x11, lsl #2]
    1180:	add	w12, w12, #0x1
    1184:	str	w12, [x9, x11, lsl #2]
    1188:	ldrh	w11, [x10, #6]
    118c:	ldr	w12, [x9, x11, lsl #2]
    1190:	add	w12, w12, #0x1
    1194:	str	w12, [x9, x11, lsl #2]
    1198:	ldrh	w11, [x10, #8]
    119c:	ldr	w12, [x9, x11, lsl #2]
    11a0:	add	w12, w12, #0x1
    11a4:	str	w12, [x9, x11, lsl #2]
    11a8:	ldrh	w11, [x10, #10]
    11ac:	ldr	w12, [x9, x11, lsl #2]
    11b0:	add	w12, w12, #0x1
    11b4:	str	w12, [x9, x11, lsl #2]
    11b8:	ldrh	w11, [x10, #12]
    11bc:	ldr	w12, [x9, x11, lsl #2]
    11c0:	add	w12, w12, #0x1
    11c4:	str	w12, [x9, x11, lsl #2]
    11c8:	ldrh	w11, [x10, #14]
    11cc:	ldr	w12, [x9, x11, lsl #2]
    11d0:	add	w12, w12, #0x1
    11d4:	str	w12, [x9, x11, lsl #2]
    11d8:	ldrh	w11, [x10, #16]
    11dc:	ldr	w12, [x9, x11, lsl #2]
    11e0:	add	w12, w12, #0x1
    11e4:	str	w12, [x9, x11, lsl #2]
    11e8:	ldrh	w11, [x10, #18]
    11ec:	ldr	w12, [x9, x11, lsl #2]
    11f0:	add	w12, w12, #0x1
    11f4:	str	w12, [x9, x11, lsl #2]
    11f8:	ldrh	w11, [x10, #20]
    11fc:	ldr	w12, [x9, x11, lsl #2]
    1200:	add	w12, w12, #0x1
    1204:	str	w12, [x9, x11, lsl #2]
    1208:	ldrh	w11, [x10, #22]
    120c:	ldr	w12, [x9, x11, lsl #2]
    1210:	add	w12, w12, #0x1
    1214:	str	w12, [x9, x11, lsl #2]
    1218:	ldrh	w11, [x10, #24]
    121c:	ldr	w12, [x9, x11, lsl #2]
    1220:	add	w12, w12, #0x1
    1224:	str	w12, [x9, x11, lsl #2]
    1228:	ldrh	w11, [x10, #26]
    122c:	ldr	w12, [x9, x11, lsl #2]
    1230:	add	w12, w12, #0x1
    1234:	str	w12, [x9, x11, lsl #2]
    1238:	ldrh	w11, [x10, #28]
    123c:	ldr	w12, [x9, x11, lsl #2]
    1240:	add	w12, w12, #0x1
    1244:	str	w12, [x9, x11, lsl #2]
    1248:	ldrh	w11, [x10, #30]
    124c:	ldr	w12, [x9, x11, lsl #2]
    1250:	add	w12, w12, #0x1
    1254:	str	w12, [x9, x11, lsl #2]
    1258:	ldrh	w11, [x10, #32]
    125c:	ldr	w12, [x9, x11, lsl #2]
    1260:	add	w12, w12, #0x1
    1264:	str	w12, [x9, x11, lsl #2]
    1268:	ldrh	w11, [x10, #34]
    126c:	ldr	w12, [x9, x11, lsl #2]
    1270:	add	w12, w12, #0x1
    1274:	str	w12, [x9, x11, lsl #2]
    1278:	ldrh	w11, [x10, #36]
    127c:	ldr	w12, [x9, x11, lsl #2]
    1280:	add	w12, w12, #0x1
    1284:	str	w12, [x9, x11, lsl #2]
    1288:	ldrh	w11, [x10, #38]
    128c:	ldr	w12, [x9, x11, lsl #2]
    1290:	add	w12, w12, #0x1
    1294:	str	w12, [x9, x11, lsl #2]
    1298:	ldrh	w11, [x10, #40]
    129c:	ldr	w12, [x9, x11, lsl #2]
    12a0:	add	w12, w12, #0x1
    12a4:	str	w12, [x9, x11, lsl #2]
    12a8:	ldrh	w11, [x10, #42]
    12ac:	ldr	w12, [x9, x11, lsl #2]
    12b0:	add	w12, w12, #0x1
    12b4:	str	w12, [x9, x11, lsl #2]
    12b8:	ldrh	w11, [x10, #44]
    12bc:	ldr	w12, [x9, x11, lsl #2]
    12c0:	add	w12, w12, #0x1
    12c4:	str	w12, [x9, x11, lsl #2]
    12c8:	ldrh	w11, [x10, #46]
    12cc:	ldr	w12, [x9, x11, lsl #2]
    12d0:	add	w12, w12, #0x1
    12d4:	str	w12, [x9, x11, lsl #2]
    12d8:	ldrh	w11, [x10, #48]
    12dc:	ldr	w12, [x9, x11, lsl #2]
    12e0:	add	w12, w12, #0x1
    12e4:	str	w12, [x9, x11, lsl #2]
    12e8:	ldrh	w11, [x10, #50]
    12ec:	ldr	w12, [x9, x11, lsl #2]
    12f0:	add	w12, w12, #0x1
    12f4:	str	w12, [x9, x11, lsl #2]
    12f8:	ldrh	w11, [x10, #52]
    12fc:	ldr	w12, [x9, x11, lsl #2]
    1300:	add	w12, w12, #0x1
    1304:	str	w12, [x9, x11, lsl #2]
    1308:	ldrh	w11, [x10, #54]
    130c:	ldr	w12, [x9, x11, lsl #2]
    1310:	add	w12, w12, #0x1
    1314:	str	w12, [x9, x11, lsl #2]
    1318:	ldrh	w11, [x10, #56]
    131c:	ldr	w12, [x9, x11, lsl #2]
    1320:	add	w12, w12, #0x1
    1324:	str	w12, [x9, x11, lsl #2]
    1328:	ldrh	w11, [x10, #58]
    132c:	ldr	w12, [x9, x11, lsl #2]
    1330:	add	w12, w12, #0x1
    1334:	str	w12, [x9, x11, lsl #2]
    1338:	ldrh	w11, [x10, #60]
    133c:	ldr	w12, [x9, x11, lsl #2]
    1340:	add	w12, w12, #0x1
    1344:	str	w12, [x9, x11, lsl #2]
    1348:	ldrh	w11, [x10, #62]
    134c:	ldr	w12, [x9, x11, lsl #2]
    1350:	add	w12, w12, #0x1
    1354:	str	w12, [x9, x11, lsl #2]
    1358:	ldrh	w11, [x10, #64]
    135c:	ldr	w12, [x9, x11, lsl #2]
    1360:	add	w12, w12, #0x1
    1364:	str	w12, [x9, x11, lsl #2]
    1368:	ldrh	w11, [x10, #66]
    136c:	ldr	w12, [x9, x11, lsl #2]
    1370:	add	w12, w12, #0x1
    1374:	str	w12, [x9, x11, lsl #2]
    1378:	ldrh	w11, [x10, #68]
    137c:	ldr	w12, [x9, x11, lsl #2]
    1380:	add	w12, w12, #0x1
    1384:	str	w12, [x9, x11, lsl #2]
    1388:	ldrh	w11, [x10, #70]
    138c:	ldr	w12, [x9, x11, lsl #2]
    1390:	add	w12, w12, #0x1
    1394:	str	w12, [x9, x11, lsl #2]
    1398:	ldrh	w11, [x10, #72]
    139c:	ldr	w12, [x9, x11, lsl #2]
    13a0:	add	w12, w12, #0x1
    13a4:	str	w12, [x9, x11, lsl #2]
    13a8:	ldrh	w11, [x10, #74]
    13ac:	ldr	w12, [x9, x11, lsl #2]
    13b0:	add	w12, w12, #0x1
    13b4:	str	w12, [x9, x11, lsl #2]
    13b8:	ldrh	w11, [x10, #76]
    13bc:	ldr	w12, [x9, x11, lsl #2]
    13c0:	add	w12, w12, #0x1
    13c4:	str	w12, [x9, x11, lsl #2]
    13c8:	ldrh	w11, [x10, #78]
    13cc:	ldr	w12, [x9, x11, lsl #2]
    13d0:	add	w12, w12, #0x1
    13d4:	str	w12, [x9, x11, lsl #2]
    13d8:	ldrh	w11, [x10, #80]
    13dc:	ldr	w12, [x9, x11, lsl #2]
    13e0:	add	w12, w12, #0x1
    13e4:	str	w12, [x9, x11, lsl #2]
    13e8:	ldrh	w11, [x10, #82]
    13ec:	ldr	w12, [x9, x11, lsl #2]
    13f0:	add	w12, w12, #0x1
    13f4:	str	w12, [x9, x11, lsl #2]
    13f8:	ldrh	w11, [x10, #84]
    13fc:	ldr	w12, [x9, x11, lsl #2]
    1400:	add	w12, w12, #0x1
    1404:	str	w12, [x9, x11, lsl #2]
    1408:	ldrh	w11, [x10, #86]
    140c:	ldr	w12, [x9, x11, lsl #2]
    1410:	add	w12, w12, #0x1
    1414:	str	w12, [x9, x11, lsl #2]
    1418:	ldrh	w11, [x10, #88]
    141c:	ldr	w12, [x9, x11, lsl #2]
    1420:	add	w12, w12, #0x1
    1424:	str	w12, [x9, x11, lsl #2]
    1428:	ldrh	w11, [x10, #90]
    142c:	ldr	w12, [x9, x11, lsl #2]
    1430:	add	w12, w12, #0x1
    1434:	str	w12, [x9, x11, lsl #2]
    1438:	ldrh	w11, [x10, #92]
    143c:	ldr	w12, [x9, x11, lsl #2]
    1440:	add	w12, w12, #0x1
    1444:	str	w12, [x9, x11, lsl #2]
    1448:	ldrh	w11, [x10, #94]
    144c:	ldr	w12, [x9, x11, lsl #2]
    1450:	add	w12, w12, #0x1
    1454:	str	w12, [x9, x11, lsl #2]
    1458:	ldrh	w10, [x10, #96]
    145c:	ldr	w11, [x9, x10, lsl #2]
    1460:	add	w11, w11, #0x1
    1464:	str	w11, [x9, x10, lsl #2]
    1468:	ldrh	w10, [x18, w26, sxtw #1]
    146c:	ldr	w11, [x9, x10, lsl #2]
    1470:	add	w11, w11, #0x1
    1474:	str	w11, [x9, x10, lsl #2]
    1478:	b	14b8 <BZ2_compressBlock+0x14ac>
    147c:	cmp	w8, w23
    1480:	mov	w14, #0x408                 	// #1032
    1484:	b.lt	14b8 <BZ2_compressBlock+0x14ac>  // b.tstop
    1488:	sxtw	x9, w8
    148c:	sub	x9, x9, x23
    1490:	add	x9, x9, #0x1
    1494:	add	x10, x18, x23, lsl #1
    1498:	ldrh	w12, [x10], #2
    149c:	madd	x13, x11, x14, x17
    14a0:	subs	x9, x9, #0x1
    14a4:	add	x12, x13, x12, lsl #2
    14a8:	ldr	w13, [x12, x1]
    14ac:	add	w13, w13, #0x1
    14b0:	str	w13, [x12, x1]
    14b4:	b.ne	1498 <BZ2_compressBlock+0x148c>  // b.any
    14b8:	ldr	w28, [x17, #668]
    14bc:	add	w25, w8, #0x1
    14c0:	str	x0, [sp, #112]
    14c4:	cmp	w25, w28
    14c8:	b.lt	aa0 <BZ2_compressBlock+0xa94>  // b.tstop
    14cc:	b	14d8 <BZ2_compressBlock+0x14cc>
    14d0:	str	xzr, [sp, #112]
    14d4:	mov	w20, wzr
    14d8:	ldr	w8, [x17, #656]
    14dc:	adrp	x28, 0 <BZ2_bsInitWrite>
    14e0:	add	x28, x28, #0x0
    14e4:	cmp	w8, #0x3
    14e8:	b.ge	1534 <BZ2_compressBlock+0x1528>  // b.tcont
    14ec:	ldp	x28, x20, [sp, #24]
    14f0:	mov	x25, x22
    14f4:	mov	w3, #0x11                  	// #17
    14f8:	mov	x0, x27
    14fc:	mov	x1, x28
    1500:	mov	w2, w20
    1504:	bl	0 <BZ2_hbMakeCodeLengths>
    1508:	subs	x25, x25, #0x1
    150c:	add	x28, x28, #0x408
    1510:	add	x27, x27, #0x102
    1514:	b.ne	14f4 <BZ2_compressBlock+0x14e8>  // b.any
    1518:	ldr	w8, [sp, #52]
    151c:	ldr	x28, [sp, #8]
    1520:	add	w8, w8, #0x1
    1524:	cmp	w8, #0x4
    1528:	str	w8, [sp, #52]
    152c:	b.ne	9e4 <BZ2_compressBlock+0x9d8>  // b.any
    1530:	b	159c <BZ2_compressBlock+0x1590>
    1534:	ldr	w8, [sp, #52]
    1538:	mov	x27, x22
    153c:	adrp	x22, 0 <stderr>
    1540:	ldr	x0, [x22]
    1544:	add	w2, w8, #0x1
    1548:	add	w8, w20, #0x7
    154c:	cmp	w20, #0x0
    1550:	csel	w8, w8, w20, lt  // lt = tstop
    1554:	adrp	x1, 0 <BZ2_bsInitWrite>
    1558:	asr	w3, w8, #3
    155c:	add	x1, x1, #0x0
    1560:	bl	0 <fprintf>
    1564:	ldr	x1, [x22]
    1568:	add	x25, sp, #0x98
    156c:	ldr	w2, [x25], #4
    1570:	mov	x0, x1
    1574:	mov	x1, x28
    1578:	bl	0 <fprintf>
    157c:	ldr	x1, [x22]
    1580:	subs	x27, x27, #0x1
    1584:	b.ne	156c <BZ2_compressBlock+0x1560>  // b.any
    1588:	mov	w0, #0xa                   	// #10
    158c:	bl	0 <fputc>
    1590:	ldr	x22, [sp, #104]
    1594:	ldr	x27, [sp, #88]
    1598:	b	14ec <BZ2_compressBlock+0x14e0>
    159c:	ldr	x20, [sp, #112]
    15a0:	mov	w8, #0x4653                	// #18003
    15a4:	cmp	w20, w8
    15a8:	b.lt	15b4 <BZ2_compressBlock+0x15a8>  // b.tstop
    15ac:	mov	w0, #0xbbb                 	// #3003
    15b0:	bl	0 <BZ2_bz__AssertH__fail>
    15b4:	ldr	x25, [sp, #40]
    15b8:	mov	x8, xzr
    15bc:	add	x9, sp, #0x7c
    15c0:	strb	w8, [x9, x8]
    15c4:	add	x8, x8, #0x1
    15c8:	cmp	x22, x8
    15cc:	b.ne	15c0 <BZ2_compressBlock+0x15b4>  // b.any
    15d0:	ldr	x17, [sp, #96]
    15d4:	ldr	x4, [sp, #64]
    15d8:	cmp	w20, #0x1
    15dc:	b.lt	1644 <BZ2_compressBlock+0x1638>  // b.tstop
    15e0:	ldrb	w11, [sp, #124]
    15e4:	add	x10, sp, #0x7c
    15e8:	mov	x8, xzr
    15ec:	mov	w9, w20
    15f0:	orr	x10, x10, #0x1
    15f4:	mov	w12, #0x4cfa                	// #19706
    15f8:	add	x13, x17, x8
    15fc:	ldrb	w14, [x13, #1704]
    1600:	cmp	w14, w11, uxtb
    1604:	b.ne	1610 <BZ2_compressBlock+0x1604>  // b.any
    1608:	mov	w15, wzr
    160c:	b	1630 <BZ2_compressBlock+0x1624>
    1610:	mov	x15, xzr
    1614:	ldrb	w16, [x10, x15]
    1618:	strb	w11, [x10, x15]
    161c:	add	x15, x15, #0x1
    1620:	cmp	w14, w16
    1624:	mov	w11, w16
    1628:	b.ne	1614 <BZ2_compressBlock+0x1608>  // b.any
    162c:	mov	w11, w14
    1630:	add	x8, x8, #0x1
    1634:	cmp	x8, x9
    1638:	strb	w15, [x13, x12]
    163c:	b.ne	15f8 <BZ2_compressBlock+0x15ec>  // b.any
    1640:	strb	w11, [sp, #124]
    1644:	mov	w8, #0x934c                	// #37708
    1648:	mov	x20, xzr
    164c:	mov	w28, #0x934c                	// #37708
    1650:	add	x26, x17, x8
    1654:	mov	w27, #0x102                 	// #258
    1658:	cmn	w4, #0x1
    165c:	b.lt	16b0 <BZ2_compressBlock+0x16a4>  // b.tstop
    1660:	mov	x8, xzr
    1664:	mov	w22, wzr
    1668:	mov	w23, #0x20                  	// #32
    166c:	ldrb	w9, [x26, x8]
    1670:	add	x8, x8, #0x1
    1674:	cmp	w22, w9
    1678:	csel	w22, w9, w22, cc  // cc = lo, ul, last
    167c:	cmp	w23, w9
    1680:	csel	w23, w9, w23, gt
    1684:	cmp	x8, x25
    1688:	b.lt	166c <BZ2_compressBlock+0x1660>  // b.tstop
    168c:	cmp	w22, #0x12
    1690:	b.lt	169c <BZ2_compressBlock+0x1690>  // b.tstop
    1694:	mov	w0, #0xbbc                 	// #3004
    1698:	bl	0 <BZ2_bz__AssertH__fail>
    169c:	cmp	w23, #0x0
    16a0:	b.gt	16b8 <BZ2_compressBlock+0x16ac>
    16a4:	mov	w0, #0xbbd                 	// #3005
    16a8:	bl	0 <BZ2_bz__AssertH__fail>
    16ac:	b	16b8 <BZ2_compressBlock+0x16ac>
    16b0:	mov	w22, wzr
    16b4:	mov	w23, #0x20                  	// #32
    16b8:	ldr	x9, [sp, #96]
    16bc:	mov	w8, #0x408                 	// #1032
    16c0:	mov	w10, #0x9958                	// #39256
    16c4:	mov	w2, w23
    16c8:	madd	x8, x20, x8, x9
    16cc:	madd	x9, x20, x27, x9
    16d0:	add	x0, x8, x10
    16d4:	add	x1, x9, x28
    16d8:	mov	w3, w22
    16dc:	ldr	x4, [sp, #32]
    16e0:	bl	0 <BZ2_hbAssignCodes>
    16e4:	ldr	x8, [sp, #104]
    16e8:	ldr	x4, [sp, #64]
    16ec:	add	x20, x20, #0x1
    16f0:	add	x26, x26, #0x102
    16f4:	cmp	x20, x8
    16f8:	b.ne	1658 <BZ2_compressBlock+0x164c>  // b.any
    16fc:	ldr	x0, [sp, #96]
    1700:	ldr	x20, [sp, #112]
    1704:	mov	x8, xzr
    1708:	add	x10, sp, #0x7c
    170c:	add	x9, x0, #0x80
    1710:	mov	w11, #0x1                   	// #1
    1714:	strb	wzr, [x10, x8]
    1718:	ldr	q0, [x9, x8, lsl #4]
    171c:	cmeq	v0.16b, v0.16b, #0
    1720:	mvn	v0.16b, v0.16b
    1724:	umov	w12, v0.b[0]
    1728:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    172c:	umov	w12, v0.b[1]
    1730:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    1734:	umov	w12, v0.b[2]
    1738:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    173c:	umov	w12, v0.b[3]
    1740:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    1744:	umov	w12, v0.b[4]
    1748:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    174c:	umov	w12, v0.b[5]
    1750:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    1754:	umov	w12, v0.b[6]
    1758:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    175c:	umov	w12, v0.b[7]
    1760:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    1764:	umov	w12, v0.b[8]
    1768:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    176c:	umov	w12, v0.b[9]
    1770:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    1774:	umov	w12, v0.b[10]
    1778:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    177c:	umov	w12, v0.b[11]
    1780:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    1784:	umov	w12, v0.b[12]
    1788:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    178c:	umov	w12, v0.b[13]
    1790:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    1794:	umov	w12, v0.b[14]
    1798:	tbnz	w12, #0, 17a4 <BZ2_compressBlock+0x1798>
    179c:	umov	w12, v0.b[15]
    17a0:	tbz	w12, #0, 17a8 <BZ2_compressBlock+0x179c>
    17a4:	strb	w11, [x10, x8]
    17a8:	add	x8, x8, #0x1
    17ac:	cmp	x8, #0x10
    17b0:	b.ne	1714 <BZ2_compressBlock+0x1708>  // b.any
    17b4:	mov	x22, x0
    17b8:	ldr	w8, [x22, #116]!
    17bc:	mov	x12, xzr
    17c0:	add	x13, sp, #0x7c
    17c4:	mov	w14, #0x80000000            	// #-2147483648
    17c8:	ldr	w11, [x22, #528]
    17cc:	ldr	w10, [x22, #524]
    17d0:	mov	w9, w8
    17d4:	ldrb	w15, [x13, x12]
    17d8:	cbz	w15, 1828 <BZ2_compressBlock+0x181c>
    17dc:	cmp	w11, #0x8
    17e0:	b.lt	181c <BZ2_compressBlock+0x1810>  // b.tstop
    17e4:	ldr	x11, [x19]
    17e8:	lsr	w10, w10, #24
    17ec:	strb	w10, [x11, w9, sxtw]
    17f0:	ldr	w9, [x22]
    17f4:	add	w9, w9, #0x1
    17f8:	str	w9, [x22]
    17fc:	ldr	w10, [x24]
    1800:	lsl	w10, w10, #8
    1804:	str	w10, [x24]
    1808:	ldr	w15, [x21]
    180c:	sub	w11, w15, #0x8
    1810:	cmp	w15, #0xf
    1814:	str	w11, [x21]
    1818:	b.gt	17e4 <BZ2_compressBlock+0x17d8>
    181c:	lsr	w15, w14, w11
    1820:	orr	w10, w15, w10
    1824:	b	1868 <BZ2_compressBlock+0x185c>
    1828:	cmp	w11, #0x8
    182c:	b.lt	1868 <BZ2_compressBlock+0x185c>  // b.tstop
    1830:	ldr	x11, [x19]
    1834:	lsr	w10, w10, #24
    1838:	strb	w10, [x11, w9, sxtw]
    183c:	ldr	w9, [x22]
    1840:	add	w9, w9, #0x1
    1844:	str	w9, [x22]
    1848:	ldr	w10, [x24]
    184c:	lsl	w10, w10, #8
    1850:	str	w10, [x24]
    1854:	ldr	w15, [x21]
    1858:	sub	w11, w15, #0x8
    185c:	cmp	w15, #0xf
    1860:	str	w11, [x21]
    1864:	b.gt	1830 <BZ2_compressBlock+0x1824>
    1868:	add	x12, x12, #0x1
    186c:	add	w11, w11, #0x1
    1870:	cmp	x12, #0x10
    1874:	str	w10, [x24]
    1878:	str	w11, [x21]
    187c:	b.ne	17d4 <BZ2_compressBlock+0x17c8>  // b.any
    1880:	mov	x12, xzr
    1884:	add	x13, sp, #0x7c
    1888:	mov	w14, #0x80000000            	// #-2147483648
    188c:	ldrb	w15, [x13, x12]
    1890:	cbz	w15, 1950 <BZ2_compressBlock+0x1944>
    1894:	mov	x15, xzr
    1898:	lsl	x16, x12, #4
    189c:	add	x17, x15, x16
    18a0:	add	x17, x0, x17
    18a4:	ldrb	w17, [x17, #128]
    18a8:	cbz	w17, 18f8 <BZ2_compressBlock+0x18ec>
    18ac:	cmp	w11, #0x8
    18b0:	b.lt	18ec <BZ2_compressBlock+0x18e0>  // b.tstop
    18b4:	ldr	x11, [x19]
    18b8:	lsr	w10, w10, #24
    18bc:	strb	w10, [x11, w9, sxtw]
    18c0:	ldr	w9, [x22]
    18c4:	add	w9, w9, #0x1
    18c8:	str	w9, [x22]
    18cc:	ldr	w10, [x24]
    18d0:	lsl	w10, w10, #8
    18d4:	str	w10, [x24]
    18d8:	ldr	w17, [x21]
    18dc:	sub	w11, w17, #0x8
    18e0:	cmp	w17, #0xf
    18e4:	str	w11, [x21]
    18e8:	b.gt	18b4 <BZ2_compressBlock+0x18a8>
    18ec:	lsr	w17, w14, w11
    18f0:	orr	w10, w17, w10
    18f4:	b	1938 <BZ2_compressBlock+0x192c>
    18f8:	cmp	w11, #0x8
    18fc:	b.lt	1938 <BZ2_compressBlock+0x192c>  // b.tstop
    1900:	ldr	x11, [x19]
    1904:	lsr	w10, w10, #24
    1908:	strb	w10, [x11, w9, sxtw]
    190c:	ldr	w9, [x22]
    1910:	add	w9, w9, #0x1
    1914:	str	w9, [x22]
    1918:	ldr	w10, [x24]
    191c:	lsl	w10, w10, #8
    1920:	str	w10, [x24]
    1924:	ldr	w17, [x21]
    1928:	sub	w11, w17, #0x8
    192c:	cmp	w17, #0xf
    1930:	str	w11, [x21]
    1934:	b.gt	1900 <BZ2_compressBlock+0x18f4>
    1938:	add	x15, x15, #0x1
    193c:	add	w11, w11, #0x1
    1940:	cmp	x15, #0x10
    1944:	str	w10, [x24]
    1948:	str	w11, [x21]
    194c:	b.ne	189c <BZ2_compressBlock+0x1890>  // b.any
    1950:	add	x12, x12, #0x1
    1954:	cmp	x12, #0x10
    1958:	b.ne	188c <BZ2_compressBlock+0x1880>  // b.any
    195c:	ldr	w12, [x0, #656]
    1960:	cmp	w12, #0x3
    1964:	b.ge	3968 <BZ2_compressBlock+0x395c>  // b.tcont
    1968:	mov	w8, w9
    196c:	cmp	w11, #0x8
    1970:	b.lt	19ac <BZ2_compressBlock+0x19a0>  // b.tstop
    1974:	ldr	x11, [x19]
    1978:	lsr	w10, w10, #24
    197c:	strb	w10, [x11, w8, sxtw]
    1980:	ldr	w8, [x22]
    1984:	add	w8, w8, #0x1
    1988:	str	w8, [x22]
    198c:	ldr	w10, [x24]
    1990:	lsl	w10, w10, #8
    1994:	str	w10, [x24]
    1998:	ldr	w12, [x21]
    199c:	sub	w11, w12, #0x8
    19a0:	cmp	w12, #0xf
    19a4:	str	w11, [x21]
    19a8:	b.gt	1974 <BZ2_compressBlock+0x1968>
    19ac:	mov	w13, #0x1d                  	// #29
    19b0:	add	w12, w11, #0x3
    19b4:	cmp	w11, #0x5
    19b8:	sub	w11, w13, w11
    19bc:	ldr	x13, [sp, #104]
    19c0:	lsl	w11, w13, w11
    19c4:	orr	w10, w11, w10
    19c8:	str	w10, [x24]
    19cc:	str	w12, [x21]
    19d0:	b.lt	1a0c <BZ2_compressBlock+0x1a00>  // b.tstop
    19d4:	ldr	x11, [x19]
    19d8:	lsr	w10, w10, #24
    19dc:	strb	w10, [x11, w8, sxtw]
    19e0:	ldr	w8, [x22]
    19e4:	add	w8, w8, #0x1
    19e8:	str	w8, [x22]
    19ec:	ldr	w10, [x24]
    19f0:	lsl	w10, w10, #8
    19f4:	str	w10, [x24]
    19f8:	ldr	w11, [x21]
    19fc:	sub	w12, w11, #0x8
    1a00:	cmp	w11, #0xf
    1a04:	str	w12, [x21]
    1a08:	b.gt	19d4 <BZ2_compressBlock+0x19c8>
    1a0c:	mov	w13, #0x11                  	// #17
    1a10:	add	w11, w12, #0xf
    1a14:	sub	w12, w13, w12
    1a18:	lsl	w12, w20, w12
    1a1c:	cmp	w20, #0x1
    1a20:	orr	w10, w12, w10
    1a24:	str	w10, [x24]
    1a28:	str	w11, [x21]
    1a2c:	b.lt	1b10 <BZ2_compressBlock+0x1b04>  // b.tstop
    1a30:	mov	x12, xzr
    1a34:	mov	w13, w20
    1a38:	mov	w14, #0x4cfa                	// #19706
    1a3c:	mov	w15, #0x80000000            	// #-2147483648
    1a40:	add	x16, x0, x12
    1a44:	add	x16, x16, x14
    1a48:	ldrb	w17, [x16]
    1a4c:	cbz	w17, 1ab8 <BZ2_compressBlock+0x1aac>
    1a50:	mov	w17, wzr
    1a54:	cmp	w11, #0x8
    1a58:	b.lt	1a94 <BZ2_compressBlock+0x1a88>  // b.tstop
    1a5c:	ldr	x11, [x19]
    1a60:	lsr	w10, w10, #24
    1a64:	strb	w10, [x11, w8, sxtw]
    1a68:	ldr	w8, [x22]
    1a6c:	add	w8, w8, #0x1
    1a70:	str	w8, [x22]
    1a74:	ldr	w10, [x24]
    1a78:	lsl	w10, w10, #8
    1a7c:	str	w10, [x24]
    1a80:	ldr	w18, [x21]
    1a84:	sub	w11, w18, #0x8
    1a88:	cmp	w18, #0xf
    1a8c:	str	w11, [x21]
    1a90:	b.gt	1a5c <BZ2_compressBlock+0x1a50>
    1a94:	lsr	w18, w15, w11
    1a98:	add	w11, w11, #0x1
    1a9c:	orr	w10, w18, w10
    1aa0:	str	w10, [x24]
    1aa4:	str	w11, [x21]
    1aa8:	ldrb	w18, [x16]
    1aac:	add	w17, w17, #0x1
    1ab0:	cmp	w17, w18
    1ab4:	b.cc	1a54 <BZ2_compressBlock+0x1a48>  // b.lo, b.ul, b.last
    1ab8:	cmp	w11, #0x8
    1abc:	b.lt	1af8 <BZ2_compressBlock+0x1aec>  // b.tstop
    1ac0:	ldr	x11, [x19]
    1ac4:	lsr	w10, w10, #24
    1ac8:	strb	w10, [x11, w8, sxtw]
    1acc:	ldr	w8, [x22]
    1ad0:	add	w8, w8, #0x1
    1ad4:	str	w8, [x22]
    1ad8:	ldr	w10, [x24]
    1adc:	lsl	w10, w10, #8
    1ae0:	str	w10, [x24]
    1ae4:	ldr	w16, [x21]
    1ae8:	sub	w11, w16, #0x8
    1aec:	cmp	w16, #0xf
    1af0:	str	w11, [x21]
    1af4:	b.gt	1ac0 <BZ2_compressBlock+0x1ab4>
    1af8:	add	x12, x12, #0x1
    1afc:	add	w11, w11, #0x1
    1b00:	cmp	x12, x13
    1b04:	str	w10, [x24]
    1b08:	str	w11, [x21]
    1b0c:	b.ne	1a40 <BZ2_compressBlock+0x1a34>  // b.any
    1b10:	ldr	w12, [x0, #656]
    1b14:	cmp	w12, #0x3
    1b18:	b.ge	3998 <BZ2_compressBlock+0x398c>  // b.tcont
    1b1c:	mov	x9, xzr
    1b20:	mov	w12, #0x102                 	// #258
    1b24:	mov	w13, #0x934c                	// #37708
    1b28:	mov	w14, #0x1b                  	// #27
    1b2c:	mov	w15, #0x1e                  	// #30
    1b30:	mov	w16, #0x2                   	// #2
    1b34:	mov	w17, #0x3                   	// #3
    1b38:	mov	w23, w8
    1b3c:	madd	x18, x9, x12, x0
    1b40:	ldrb	w18, [x18, x13]
    1b44:	cmp	w11, #0x8
    1b48:	b.lt	1b84 <BZ2_compressBlock+0x1b78>  // b.tstop
    1b4c:	ldr	x11, [x19]
    1b50:	lsr	w10, w10, #24
    1b54:	strb	w10, [x11, w23, sxtw]
    1b58:	ldr	w10, [x22]
    1b5c:	add	w23, w10, #0x1
    1b60:	str	w23, [x22]
    1b64:	ldr	w10, [x24]
    1b68:	lsl	w10, w10, #8
    1b6c:	str	w10, [x24]
    1b70:	ldr	w1, [x21]
    1b74:	sub	w11, w1, #0x8
    1b78:	cmp	w1, #0xf
    1b7c:	str	w11, [x21]
    1b80:	b.gt	1b4c <BZ2_compressBlock+0x1b40>
    1b84:	sub	w1, w14, w11
    1b88:	lsl	w1, w18, w1
    1b8c:	add	w11, w11, #0x5
    1b90:	cmn	w4, #0x1
    1b94:	orr	w10, w1, w10
    1b98:	str	w10, [x24]
    1b9c:	str	w11, [x21]
    1ba0:	b.lt	1ce4 <BZ2_compressBlock+0x1cd8>  // b.tstop
    1ba4:	mov	x3, xzr
    1ba8:	madd	x1, x9, x12, x0
    1bac:	add	x1, x1, x3
    1bb0:	add	x1, x1, x13
    1bb4:	ldrb	w2, [x1]
    1bb8:	cmp	w18, w2
    1bbc:	b.ge	1c84 <BZ2_compressBlock+0x1c78>  // b.tcont
    1bc0:	cmp	w11, #0x8
    1bc4:	b.lt	1c00 <BZ2_compressBlock+0x1bf4>  // b.tstop
    1bc8:	ldr	x11, [x19]
    1bcc:	lsr	w10, w10, #24
    1bd0:	strb	w10, [x11, w23, sxtw]
    1bd4:	ldr	w10, [x22]
    1bd8:	add	w23, w10, #0x1
    1bdc:	str	w23, [x22]
    1be0:	ldr	w10, [x24]
    1be4:	lsl	w10, w10, #8
    1be8:	str	w10, [x24]
    1bec:	ldr	w2, [x21]
    1bf0:	sub	w11, w2, #0x8
    1bf4:	cmp	w2, #0xf
    1bf8:	str	w11, [x21]
    1bfc:	b.gt	1bc8 <BZ2_compressBlock+0x1bbc>
    1c00:	sub	w2, w15, w11
    1c04:	lsl	w2, w16, w2
    1c08:	add	w11, w11, #0x2
    1c0c:	orr	w10, w2, w10
    1c10:	str	w10, [x24]
    1c14:	str	w11, [x21]
    1c18:	ldrb	w2, [x1]
    1c1c:	add	w18, w18, #0x1
    1c20:	b	1bb8 <BZ2_compressBlock+0x1bac>
    1c24:	cmp	w11, #0x8
    1c28:	b.lt	1c64 <BZ2_compressBlock+0x1c58>  // b.tstop
    1c2c:	ldr	x11, [x19]
    1c30:	lsr	w10, w10, #24
    1c34:	strb	w10, [x11, w23, sxtw]
    1c38:	ldr	w10, [x22]
    1c3c:	add	w23, w10, #0x1
    1c40:	str	w23, [x22]
    1c44:	ldr	w10, [x24]
    1c48:	lsl	w10, w10, #8
    1c4c:	str	w10, [x24]
    1c50:	ldr	w2, [x21]
    1c54:	sub	w11, w2, #0x8
    1c58:	cmp	w2, #0xf
    1c5c:	str	w11, [x21]
    1c60:	b.gt	1c2c <BZ2_compressBlock+0x1c20>
    1c64:	sub	w2, w15, w11
    1c68:	lsl	w2, w17, w2
    1c6c:	add	w11, w11, #0x2
    1c70:	orr	w10, w2, w10
    1c74:	str	w10, [x24]
    1c78:	str	w11, [x21]
    1c7c:	ldrb	w2, [x1]
    1c80:	sub	w18, w18, #0x1
    1c84:	cmp	w18, w2
    1c88:	b.gt	1c24 <BZ2_compressBlock+0x1c18>
    1c8c:	cmp	w11, #0x8
    1c90:	b.lt	1ccc <BZ2_compressBlock+0x1cc0>  // b.tstop
    1c94:	ldr	x11, [x19]
    1c98:	lsr	w10, w10, #24
    1c9c:	strb	w10, [x11, w23, sxtw]
    1ca0:	ldr	w10, [x22]
    1ca4:	add	w23, w10, #0x1
    1ca8:	str	w23, [x22]
    1cac:	ldr	w10, [x24]
    1cb0:	lsl	w10, w10, #8
    1cb4:	str	w10, [x24]
    1cb8:	ldr	w1, [x21]
    1cbc:	sub	w11, w1, #0x8
    1cc0:	cmp	w1, #0xf
    1cc4:	str	w11, [x21]
    1cc8:	b.gt	1c94 <BZ2_compressBlock+0x1c88>
    1ccc:	add	x3, x3, #0x1
    1cd0:	add	w11, w11, #0x1
    1cd4:	cmp	x3, x25
    1cd8:	str	w10, [x24]
    1cdc:	str	w11, [x21]
    1ce0:	b.lt	1ba8 <BZ2_compressBlock+0x1b9c>  // b.tstop
    1ce4:	ldr	x18, [sp, #104]
    1ce8:	add	x9, x9, #0x1
    1cec:	cmp	x9, x18
    1cf0:	b.ne	1b3c <BZ2_compressBlock+0x1b30>  // b.any
    1cf4:	ldr	w9, [x0, #656]
    1cf8:	cmp	w9, #0x3
    1cfc:	b.ge	39c8 <BZ2_compressBlock+0x39bc>  // b.tcont
    1d00:	ldr	w8, [x0, #668]
    1d04:	ldr	x16, [sp, #80]
    1d08:	cmp	w8, #0x1
    1d0c:	b.lt	3628 <BZ2_compressBlock+0x361c>  // b.tstop
    1d10:	ldr	x25, [sp, #104]
    1d14:	mov	x26, xzr
    1d18:	mov	w9, wzr
    1d1c:	mov	w18, #0x102                 	// #258
    1d20:	mov	w1, #0x934c                	// #37708
    1d24:	mov	w2, #0x408                 	// #1032
    1d28:	mov	w4, #0x9958                	// #39256
    1d2c:	add	x20, x0, x26
    1d30:	sxtw	x28, w9
    1d34:	ldrb	w9, [x20, #1704]
    1d38:	add	x5, x28, #0x31
    1d3c:	sub	w10, w8, #0x1
    1d40:	cmp	w5, w8
    1d44:	csel	w27, w5, w10, lt  // lt = tstop
    1d48:	cmp	w25, w9
    1d4c:	b.hi	1d7c <BZ2_compressBlock+0x1d70>  // b.pmore
    1d50:	mov	w0, #0xbbe                 	// #3006
    1d54:	str	x28, [sp, #88]
    1d58:	mov	x28, x5
    1d5c:	bl	0 <BZ2_bz__AssertH__fail>
    1d60:	mov	x5, x28
    1d64:	ldp	x16, x28, [sp, #80]
    1d68:	ldr	x0, [sp, #96]
    1d6c:	mov	w4, #0x9958                	// #39256
    1d70:	mov	w2, #0x408                 	// #1032
    1d74:	mov	w1, #0x934c                	// #37708
    1d78:	mov	w18, #0x102                 	// #258
    1d7c:	cmp	w25, #0x6
    1d80:	add	x8, x20, #0x6a8
    1d84:	b.ne	3574 <BZ2_compressBlock+0x3568>  // b.any
    1d88:	sub	w9, w27, w28
    1d8c:	cmp	w9, #0x31
    1d90:	b.ne	3574 <BZ2_compressBlock+0x3568>  // b.any
    1d94:	ldrb	w8, [x8]
    1d98:	ldrh	w9, [x16, x28, lsl #1]
    1d9c:	ldr	w12, [x0, #644]
    1da0:	madd	x10, x8, x18, x0
    1da4:	madd	x11, x8, x2, x0
    1da8:	add	x10, x10, x9
    1dac:	add	x11, x11, x9, lsl #2
    1db0:	ldrb	w9, [x10, x1]
    1db4:	ldr	w10, [x11, x4]
    1db8:	ldr	w11, [x0, #640]
    1dbc:	cmp	w12, #0x8
    1dc0:	b.lt	1e00 <BZ2_compressBlock+0x1df4>  // b.tstop
    1dc4:	ldr	w13, [x22]
    1dc8:	ldr	x12, [x19]
    1dcc:	lsr	w11, w11, #24
    1dd0:	strb	w11, [x12, w13, sxtw]
    1dd4:	ldr	w11, [x22]
    1dd8:	add	w13, w11, #0x1
    1ddc:	str	w13, [x22]
    1de0:	ldr	w11, [x24]
    1de4:	lsl	w11, w11, #8
    1de8:	str	w11, [x24]
    1dec:	ldr	w14, [x21]
    1df0:	sub	w12, w14, #0x8
    1df4:	cmp	w14, #0xf
    1df8:	str	w12, [x21]
    1dfc:	b.gt	1dc8 <BZ2_compressBlock+0x1dbc>
    1e00:	add	w13, w12, w9
    1e04:	neg	w12, w13
    1e08:	lsl	w10, w10, w12
    1e0c:	orr	w10, w10, w11
    1e10:	add	x9, x16, x28, lsl #1
    1e14:	str	w13, [x0, #644]
    1e18:	str	w10, [x0, #640]
    1e1c:	ldrh	w11, [x9, #2]
    1e20:	madd	x12, x8, x18, x0
    1e24:	madd	x14, x8, x2, x0
    1e28:	cmp	w13, #0x8
    1e2c:	add	x12, x12, x11
    1e30:	add	x11, x14, x11, lsl #2
    1e34:	ldrb	w12, [x12, x1]
    1e38:	ldr	w11, [x11, x4]
    1e3c:	b.lt	1e7c <BZ2_compressBlock+0x1e70>  // b.tstop
    1e40:	ldr	w14, [x22]
    1e44:	ldr	x13, [x19]
    1e48:	lsr	w10, w10, #24
    1e4c:	strb	w10, [x13, w14, sxtw]
    1e50:	ldr	w10, [x22]
    1e54:	add	w14, w10, #0x1
    1e58:	str	w14, [x22]
    1e5c:	ldr	w10, [x24]
    1e60:	lsl	w10, w10, #8
    1e64:	str	w10, [x24]
    1e68:	ldr	w15, [x21]
    1e6c:	sub	w13, w15, #0x8
    1e70:	cmp	w15, #0xf
    1e74:	str	w13, [x21]
    1e78:	b.gt	1e44 <BZ2_compressBlock+0x1e38>
    1e7c:	add	w12, w13, w12
    1e80:	neg	w13, w12
    1e84:	lsl	w11, w11, w13
    1e88:	orr	w10, w11, w10
    1e8c:	str	w12, [x0, #644]
    1e90:	str	w10, [x0, #640]
    1e94:	ldrh	w9, [x9, #4]
    1e98:	madd	x11, x8, x18, x0
    1e9c:	madd	x13, x8, x2, x0
    1ea0:	cmp	w12, #0x8
    1ea4:	add	x11, x11, x9
    1ea8:	add	x13, x13, x9, lsl #2
    1eac:	ldrb	w9, [x11, x1]
    1eb0:	ldr	w11, [x13, x4]
    1eb4:	b.lt	1ef4 <BZ2_compressBlock+0x1ee8>  // b.tstop
    1eb8:	ldr	w13, [x22]
    1ebc:	ldr	x12, [x19]
    1ec0:	lsr	w10, w10, #24
    1ec4:	strb	w10, [x12, w13, sxtw]
    1ec8:	ldr	w10, [x22]
    1ecc:	add	w13, w10, #0x1
    1ed0:	str	w13, [x22]
    1ed4:	ldr	w10, [x24]
    1ed8:	lsl	w10, w10, #8
    1edc:	str	w10, [x24]
    1ee0:	ldr	w14, [x21]
    1ee4:	sub	w12, w14, #0x8
    1ee8:	cmp	w14, #0xf
    1eec:	str	w12, [x21]
    1ef0:	b.gt	1ebc <BZ2_compressBlock+0x1eb0>
    1ef4:	add	w13, w12, w9
    1ef8:	neg	w12, w13
    1efc:	lsl	w11, w11, w12
    1f00:	orr	w10, w11, w10
    1f04:	add	x9, x16, x28, lsl #1
    1f08:	str	w13, [x0, #644]
    1f0c:	str	w10, [x0, #640]
    1f10:	ldrh	w11, [x9, #6]
    1f14:	madd	x12, x8, x18, x0
    1f18:	madd	x14, x8, x2, x0
    1f1c:	cmp	w13, #0x8
    1f20:	add	x12, x12, x11
    1f24:	add	x11, x14, x11, lsl #2
    1f28:	ldrb	w12, [x12, x1]
    1f2c:	ldr	w11, [x11, x4]
    1f30:	b.lt	1f70 <BZ2_compressBlock+0x1f64>  // b.tstop
    1f34:	ldr	w14, [x22]
    1f38:	ldr	x13, [x19]
    1f3c:	lsr	w10, w10, #24
    1f40:	strb	w10, [x13, w14, sxtw]
    1f44:	ldr	w10, [x22]
    1f48:	add	w14, w10, #0x1
    1f4c:	str	w14, [x22]
    1f50:	ldr	w10, [x24]
    1f54:	lsl	w10, w10, #8
    1f58:	str	w10, [x24]
    1f5c:	ldr	w15, [x21]
    1f60:	sub	w13, w15, #0x8
    1f64:	cmp	w15, #0xf
    1f68:	str	w13, [x21]
    1f6c:	b.gt	1f38 <BZ2_compressBlock+0x1f2c>
    1f70:	add	w12, w13, w12
    1f74:	neg	w13, w12
    1f78:	lsl	w11, w11, w13
    1f7c:	orr	w10, w11, w10
    1f80:	str	w12, [x0, #644]
    1f84:	str	w10, [x0, #640]
    1f88:	ldrh	w9, [x9, #8]
    1f8c:	madd	x11, x8, x18, x0
    1f90:	madd	x13, x8, x2, x0
    1f94:	cmp	w12, #0x8
    1f98:	add	x11, x11, x9
    1f9c:	add	x13, x13, x9, lsl #2
    1fa0:	ldrb	w9, [x11, x1]
    1fa4:	ldr	w11, [x13, x4]
    1fa8:	b.lt	1fe8 <BZ2_compressBlock+0x1fdc>  // b.tstop
    1fac:	ldr	w13, [x22]
    1fb0:	ldr	x12, [x19]
    1fb4:	lsr	w10, w10, #24
    1fb8:	strb	w10, [x12, w13, sxtw]
    1fbc:	ldr	w10, [x22]
    1fc0:	add	w13, w10, #0x1
    1fc4:	str	w13, [x22]
    1fc8:	ldr	w10, [x24]
    1fcc:	lsl	w10, w10, #8
    1fd0:	str	w10, [x24]
    1fd4:	ldr	w14, [x21]
    1fd8:	sub	w12, w14, #0x8
    1fdc:	cmp	w14, #0xf
    1fe0:	str	w12, [x21]
    1fe4:	b.gt	1fb0 <BZ2_compressBlock+0x1fa4>
    1fe8:	add	w13, w12, w9
    1fec:	neg	w12, w13
    1ff0:	lsl	w11, w11, w12
    1ff4:	orr	w10, w11, w10
    1ff8:	add	x9, x16, x28, lsl #1
    1ffc:	str	w13, [x0, #644]
    2000:	str	w10, [x0, #640]
    2004:	ldrh	w11, [x9, #10]
    2008:	madd	x12, x8, x18, x0
    200c:	madd	x14, x8, x2, x0
    2010:	cmp	w13, #0x8
    2014:	add	x12, x12, x11
    2018:	add	x11, x14, x11, lsl #2
    201c:	ldrb	w12, [x12, x1]
    2020:	ldr	w11, [x11, x4]
    2024:	b.lt	2064 <BZ2_compressBlock+0x2058>  // b.tstop
    2028:	ldr	w14, [x22]
    202c:	ldr	x13, [x19]
    2030:	lsr	w10, w10, #24
    2034:	strb	w10, [x13, w14, sxtw]
    2038:	ldr	w10, [x22]
    203c:	add	w14, w10, #0x1
    2040:	str	w14, [x22]
    2044:	ldr	w10, [x24]
    2048:	lsl	w10, w10, #8
    204c:	str	w10, [x24]
    2050:	ldr	w15, [x21]
    2054:	sub	w13, w15, #0x8
    2058:	cmp	w15, #0xf
    205c:	str	w13, [x21]
    2060:	b.gt	202c <BZ2_compressBlock+0x2020>
    2064:	add	w12, w13, w12
    2068:	neg	w13, w12
    206c:	lsl	w11, w11, w13
    2070:	orr	w10, w11, w10
    2074:	str	w12, [x0, #644]
    2078:	str	w10, [x0, #640]
    207c:	ldrh	w9, [x9, #12]
    2080:	madd	x11, x8, x18, x0
    2084:	madd	x13, x8, x2, x0
    2088:	cmp	w12, #0x8
    208c:	add	x11, x11, x9
    2090:	add	x13, x13, x9, lsl #2
    2094:	ldrb	w9, [x11, x1]
    2098:	ldr	w11, [x13, x4]
    209c:	b.lt	20dc <BZ2_compressBlock+0x20d0>  // b.tstop
    20a0:	ldr	w13, [x22]
    20a4:	ldr	x12, [x19]
    20a8:	lsr	w10, w10, #24
    20ac:	strb	w10, [x12, w13, sxtw]
    20b0:	ldr	w10, [x22]
    20b4:	add	w13, w10, #0x1
    20b8:	str	w13, [x22]
    20bc:	ldr	w10, [x24]
    20c0:	lsl	w10, w10, #8
    20c4:	str	w10, [x24]
    20c8:	ldr	w14, [x21]
    20cc:	sub	w12, w14, #0x8
    20d0:	cmp	w14, #0xf
    20d4:	str	w12, [x21]
    20d8:	b.gt	20a4 <BZ2_compressBlock+0x2098>
    20dc:	add	w13, w12, w9
    20e0:	neg	w12, w13
    20e4:	lsl	w11, w11, w12
    20e8:	orr	w10, w11, w10
    20ec:	add	x9, x16, x28, lsl #1
    20f0:	str	w13, [x0, #644]
    20f4:	str	w10, [x0, #640]
    20f8:	ldrh	w11, [x9, #14]
    20fc:	madd	x12, x8, x18, x0
    2100:	madd	x14, x8, x2, x0
    2104:	cmp	w13, #0x8
    2108:	add	x12, x12, x11
    210c:	add	x11, x14, x11, lsl #2
    2110:	ldrb	w12, [x12, x1]
    2114:	ldr	w11, [x11, x4]
    2118:	b.lt	2158 <BZ2_compressBlock+0x214c>  // b.tstop
    211c:	ldr	w14, [x22]
    2120:	ldr	x13, [x19]
    2124:	lsr	w10, w10, #24
    2128:	strb	w10, [x13, w14, sxtw]
    212c:	ldr	w10, [x22]
    2130:	add	w14, w10, #0x1
    2134:	str	w14, [x22]
    2138:	ldr	w10, [x24]
    213c:	lsl	w10, w10, #8
    2140:	str	w10, [x24]
    2144:	ldr	w15, [x21]
    2148:	sub	w13, w15, #0x8
    214c:	cmp	w15, #0xf
    2150:	str	w13, [x21]
    2154:	b.gt	2120 <BZ2_compressBlock+0x2114>
    2158:	add	w12, w13, w12
    215c:	neg	w13, w12
    2160:	lsl	w11, w11, w13
    2164:	orr	w10, w11, w10
    2168:	str	w12, [x0, #644]
    216c:	str	w10, [x0, #640]
    2170:	ldrh	w9, [x9, #16]
    2174:	madd	x11, x8, x18, x0
    2178:	madd	x13, x8, x2, x0
    217c:	cmp	w12, #0x8
    2180:	add	x11, x11, x9
    2184:	add	x13, x13, x9, lsl #2
    2188:	ldrb	w9, [x11, x1]
    218c:	ldr	w11, [x13, x4]
    2190:	b.lt	21d0 <BZ2_compressBlock+0x21c4>  // b.tstop
    2194:	ldr	w13, [x22]
    2198:	ldr	x12, [x19]
    219c:	lsr	w10, w10, #24
    21a0:	strb	w10, [x12, w13, sxtw]
    21a4:	ldr	w10, [x22]
    21a8:	add	w13, w10, #0x1
    21ac:	str	w13, [x22]
    21b0:	ldr	w10, [x24]
    21b4:	lsl	w10, w10, #8
    21b8:	str	w10, [x24]
    21bc:	ldr	w14, [x21]
    21c0:	sub	w12, w14, #0x8
    21c4:	cmp	w14, #0xf
    21c8:	str	w12, [x21]
    21cc:	b.gt	2198 <BZ2_compressBlock+0x218c>
    21d0:	add	w13, w12, w9
    21d4:	neg	w12, w13
    21d8:	lsl	w11, w11, w12
    21dc:	orr	w10, w11, w10
    21e0:	add	x9, x16, x28, lsl #1
    21e4:	str	w13, [x0, #644]
    21e8:	str	w10, [x0, #640]
    21ec:	ldrh	w11, [x9, #18]
    21f0:	madd	x12, x8, x18, x0
    21f4:	madd	x14, x8, x2, x0
    21f8:	cmp	w13, #0x8
    21fc:	add	x12, x12, x11
    2200:	add	x11, x14, x11, lsl #2
    2204:	ldrb	w12, [x12, x1]
    2208:	ldr	w11, [x11, x4]
    220c:	b.lt	224c <BZ2_compressBlock+0x2240>  // b.tstop
    2210:	ldr	w14, [x22]
    2214:	ldr	x13, [x19]
    2218:	lsr	w10, w10, #24
    221c:	strb	w10, [x13, w14, sxtw]
    2220:	ldr	w10, [x22]
    2224:	add	w14, w10, #0x1
    2228:	str	w14, [x22]
    222c:	ldr	w10, [x24]
    2230:	lsl	w10, w10, #8
    2234:	str	w10, [x24]
    2238:	ldr	w15, [x21]
    223c:	sub	w13, w15, #0x8
    2240:	cmp	w15, #0xf
    2244:	str	w13, [x21]
    2248:	b.gt	2214 <BZ2_compressBlock+0x2208>
    224c:	add	w12, w13, w12
    2250:	neg	w13, w12
    2254:	lsl	w11, w11, w13
    2258:	orr	w10, w11, w10
    225c:	str	w12, [x0, #644]
    2260:	str	w10, [x0, #640]
    2264:	ldrh	w9, [x9, #20]
    2268:	madd	x11, x8, x18, x0
    226c:	madd	x13, x8, x2, x0
    2270:	cmp	w12, #0x8
    2274:	add	x11, x11, x9
    2278:	add	x13, x13, x9, lsl #2
    227c:	ldrb	w9, [x11, x1]
    2280:	ldr	w11, [x13, x4]
    2284:	b.lt	22c4 <BZ2_compressBlock+0x22b8>  // b.tstop
    2288:	ldr	w13, [x22]
    228c:	ldr	x12, [x19]
    2290:	lsr	w10, w10, #24
    2294:	strb	w10, [x12, w13, sxtw]
    2298:	ldr	w10, [x22]
    229c:	add	w13, w10, #0x1
    22a0:	str	w13, [x22]
    22a4:	ldr	w10, [x24]
    22a8:	lsl	w10, w10, #8
    22ac:	str	w10, [x24]
    22b0:	ldr	w14, [x21]
    22b4:	sub	w12, w14, #0x8
    22b8:	cmp	w14, #0xf
    22bc:	str	w12, [x21]
    22c0:	b.gt	228c <BZ2_compressBlock+0x2280>
    22c4:	add	w13, w12, w9
    22c8:	neg	w12, w13
    22cc:	lsl	w11, w11, w12
    22d0:	orr	w10, w11, w10
    22d4:	add	x9, x16, x28, lsl #1
    22d8:	str	w13, [x0, #644]
    22dc:	str	w10, [x0, #640]
    22e0:	ldrh	w11, [x9, #22]
    22e4:	madd	x12, x8, x18, x0
    22e8:	madd	x14, x8, x2, x0
    22ec:	cmp	w13, #0x8
    22f0:	add	x12, x12, x11
    22f4:	add	x11, x14, x11, lsl #2
    22f8:	ldrb	w12, [x12, x1]
    22fc:	ldr	w11, [x11, x4]
    2300:	b.lt	2340 <BZ2_compressBlock+0x2334>  // b.tstop
    2304:	ldr	w14, [x22]
    2308:	ldr	x13, [x19]
    230c:	lsr	w10, w10, #24
    2310:	strb	w10, [x13, w14, sxtw]
    2314:	ldr	w10, [x22]
    2318:	add	w14, w10, #0x1
    231c:	str	w14, [x22]
    2320:	ldr	w10, [x24]
    2324:	lsl	w10, w10, #8
    2328:	str	w10, [x24]
    232c:	ldr	w15, [x21]
    2330:	sub	w13, w15, #0x8
    2334:	cmp	w15, #0xf
    2338:	str	w13, [x21]
    233c:	b.gt	2308 <BZ2_compressBlock+0x22fc>
    2340:	add	w12, w13, w12
    2344:	neg	w13, w12
    2348:	lsl	w11, w11, w13
    234c:	orr	w10, w11, w10
    2350:	str	w12, [x0, #644]
    2354:	str	w10, [x0, #640]
    2358:	ldrh	w9, [x9, #24]
    235c:	madd	x11, x8, x18, x0
    2360:	madd	x13, x8, x2, x0
    2364:	cmp	w12, #0x8
    2368:	add	x11, x11, x9
    236c:	add	x13, x13, x9, lsl #2
    2370:	ldrb	w9, [x11, x1]
    2374:	ldr	w11, [x13, x4]
    2378:	b.lt	23b8 <BZ2_compressBlock+0x23ac>  // b.tstop
    237c:	ldr	w13, [x22]
    2380:	ldr	x12, [x19]
    2384:	lsr	w10, w10, #24
    2388:	strb	w10, [x12, w13, sxtw]
    238c:	ldr	w10, [x22]
    2390:	add	w13, w10, #0x1
    2394:	str	w13, [x22]
    2398:	ldr	w10, [x24]
    239c:	lsl	w10, w10, #8
    23a0:	str	w10, [x24]
    23a4:	ldr	w14, [x21]
    23a8:	sub	w12, w14, #0x8
    23ac:	cmp	w14, #0xf
    23b0:	str	w12, [x21]
    23b4:	b.gt	2380 <BZ2_compressBlock+0x2374>
    23b8:	add	w13, w12, w9
    23bc:	neg	w12, w13
    23c0:	lsl	w11, w11, w12
    23c4:	orr	w10, w11, w10
    23c8:	add	x9, x16, x28, lsl #1
    23cc:	str	w13, [x0, #644]
    23d0:	str	w10, [x0, #640]
    23d4:	ldrh	w11, [x9, #26]
    23d8:	madd	x12, x8, x18, x0
    23dc:	madd	x14, x8, x2, x0
    23e0:	cmp	w13, #0x8
    23e4:	add	x12, x12, x11
    23e8:	add	x11, x14, x11, lsl #2
    23ec:	ldrb	w12, [x12, x1]
    23f0:	ldr	w11, [x11, x4]
    23f4:	b.lt	2434 <BZ2_compressBlock+0x2428>  // b.tstop
    23f8:	ldr	w14, [x22]
    23fc:	ldr	x13, [x19]
    2400:	lsr	w10, w10, #24
    2404:	strb	w10, [x13, w14, sxtw]
    2408:	ldr	w10, [x22]
    240c:	add	w14, w10, #0x1
    2410:	str	w14, [x22]
    2414:	ldr	w10, [x24]
    2418:	lsl	w10, w10, #8
    241c:	str	w10, [x24]
    2420:	ldr	w15, [x21]
    2424:	sub	w13, w15, #0x8
    2428:	cmp	w15, #0xf
    242c:	str	w13, [x21]
    2430:	b.gt	23fc <BZ2_compressBlock+0x23f0>
    2434:	add	w12, w13, w12
    2438:	neg	w13, w12
    243c:	lsl	w11, w11, w13
    2440:	orr	w10, w11, w10
    2444:	str	w12, [x0, #644]
    2448:	str	w10, [x0, #640]
    244c:	ldrh	w9, [x9, #28]
    2450:	madd	x11, x8, x18, x0
    2454:	madd	x13, x8, x2, x0
    2458:	cmp	w12, #0x8
    245c:	add	x11, x11, x9
    2460:	add	x13, x13, x9, lsl #2
    2464:	ldrb	w9, [x11, x1]
    2468:	ldr	w11, [x13, x4]
    246c:	b.lt	24ac <BZ2_compressBlock+0x24a0>  // b.tstop
    2470:	ldr	w13, [x22]
    2474:	ldr	x12, [x19]
    2478:	lsr	w10, w10, #24
    247c:	strb	w10, [x12, w13, sxtw]
    2480:	ldr	w10, [x22]
    2484:	add	w13, w10, #0x1
    2488:	str	w13, [x22]
    248c:	ldr	w10, [x24]
    2490:	lsl	w10, w10, #8
    2494:	str	w10, [x24]
    2498:	ldr	w14, [x21]
    249c:	sub	w12, w14, #0x8
    24a0:	cmp	w14, #0xf
    24a4:	str	w12, [x21]
    24a8:	b.gt	2474 <BZ2_compressBlock+0x2468>
    24ac:	add	w13, w12, w9
    24b0:	neg	w12, w13
    24b4:	lsl	w11, w11, w12
    24b8:	orr	w10, w11, w10
    24bc:	add	x9, x16, x28, lsl #1
    24c0:	str	w13, [x0, #644]
    24c4:	str	w10, [x0, #640]
    24c8:	ldrh	w11, [x9, #30]
    24cc:	madd	x12, x8, x18, x0
    24d0:	madd	x14, x8, x2, x0
    24d4:	cmp	w13, #0x8
    24d8:	add	x12, x12, x11
    24dc:	add	x11, x14, x11, lsl #2
    24e0:	ldrb	w12, [x12, x1]
    24e4:	ldr	w11, [x11, x4]
    24e8:	b.lt	2528 <BZ2_compressBlock+0x251c>  // b.tstop
    24ec:	ldr	w14, [x22]
    24f0:	ldr	x13, [x19]
    24f4:	lsr	w10, w10, #24
    24f8:	strb	w10, [x13, w14, sxtw]
    24fc:	ldr	w10, [x22]
    2500:	add	w14, w10, #0x1
    2504:	str	w14, [x22]
    2508:	ldr	w10, [x24]
    250c:	lsl	w10, w10, #8
    2510:	str	w10, [x24]
    2514:	ldr	w15, [x21]
    2518:	sub	w13, w15, #0x8
    251c:	cmp	w15, #0xf
    2520:	str	w13, [x21]
    2524:	b.gt	24f0 <BZ2_compressBlock+0x24e4>
    2528:	add	w12, w13, w12
    252c:	neg	w13, w12
    2530:	lsl	w11, w11, w13
    2534:	orr	w10, w11, w10
    2538:	str	w12, [x0, #644]
    253c:	str	w10, [x0, #640]
    2540:	ldrh	w9, [x9, #32]
    2544:	madd	x11, x8, x18, x0
    2548:	madd	x13, x8, x2, x0
    254c:	cmp	w12, #0x8
    2550:	add	x11, x11, x9
    2554:	add	x13, x13, x9, lsl #2
    2558:	ldrb	w9, [x11, x1]
    255c:	ldr	w11, [x13, x4]
    2560:	b.lt	25a0 <BZ2_compressBlock+0x2594>  // b.tstop
    2564:	ldr	w13, [x22]
    2568:	ldr	x12, [x19]
    256c:	lsr	w10, w10, #24
    2570:	strb	w10, [x12, w13, sxtw]
    2574:	ldr	w10, [x22]
    2578:	add	w13, w10, #0x1
    257c:	str	w13, [x22]
    2580:	ldr	w10, [x24]
    2584:	lsl	w10, w10, #8
    2588:	str	w10, [x24]
    258c:	ldr	w14, [x21]
    2590:	sub	w12, w14, #0x8
    2594:	cmp	w14, #0xf
    2598:	str	w12, [x21]
    259c:	b.gt	2568 <BZ2_compressBlock+0x255c>
    25a0:	add	w13, w12, w9
    25a4:	neg	w12, w13
    25a8:	lsl	w11, w11, w12
    25ac:	orr	w10, w11, w10
    25b0:	add	x9, x16, x28, lsl #1
    25b4:	str	w13, [x0, #644]
    25b8:	str	w10, [x0, #640]
    25bc:	ldrh	w11, [x9, #34]
    25c0:	madd	x12, x8, x18, x0
    25c4:	madd	x14, x8, x2, x0
    25c8:	cmp	w13, #0x8
    25cc:	add	x12, x12, x11
    25d0:	add	x11, x14, x11, lsl #2
    25d4:	ldrb	w12, [x12, x1]
    25d8:	ldr	w11, [x11, x4]
    25dc:	b.lt	261c <BZ2_compressBlock+0x2610>  // b.tstop
    25e0:	ldr	w14, [x22]
    25e4:	ldr	x13, [x19]
    25e8:	lsr	w10, w10, #24
    25ec:	strb	w10, [x13, w14, sxtw]
    25f0:	ldr	w10, [x22]
    25f4:	add	w14, w10, #0x1
    25f8:	str	w14, [x22]
    25fc:	ldr	w10, [x24]
    2600:	lsl	w10, w10, #8
    2604:	str	w10, [x24]
    2608:	ldr	w15, [x21]
    260c:	sub	w13, w15, #0x8
    2610:	cmp	w15, #0xf
    2614:	str	w13, [x21]
    2618:	b.gt	25e4 <BZ2_compressBlock+0x25d8>
    261c:	add	w12, w13, w12
    2620:	neg	w13, w12
    2624:	lsl	w11, w11, w13
    2628:	orr	w10, w11, w10
    262c:	str	w12, [x0, #644]
    2630:	str	w10, [x0, #640]
    2634:	ldrh	w9, [x9, #36]
    2638:	madd	x11, x8, x18, x0
    263c:	madd	x13, x8, x2, x0
    2640:	cmp	w12, #0x8
    2644:	add	x11, x11, x9
    2648:	add	x13, x13, x9, lsl #2
    264c:	ldrb	w9, [x11, x1]
    2650:	ldr	w11, [x13, x4]
    2654:	b.lt	2694 <BZ2_compressBlock+0x2688>  // b.tstop
    2658:	ldr	w13, [x22]
    265c:	ldr	x12, [x19]
    2660:	lsr	w10, w10, #24
    2664:	strb	w10, [x12, w13, sxtw]
    2668:	ldr	w10, [x22]
    266c:	add	w13, w10, #0x1
    2670:	str	w13, [x22]
    2674:	ldr	w10, [x24]
    2678:	lsl	w10, w10, #8
    267c:	str	w10, [x24]
    2680:	ldr	w14, [x21]
    2684:	sub	w12, w14, #0x8
    2688:	cmp	w14, #0xf
    268c:	str	w12, [x21]
    2690:	b.gt	265c <BZ2_compressBlock+0x2650>
    2694:	add	w13, w12, w9
    2698:	neg	w12, w13
    269c:	lsl	w11, w11, w12
    26a0:	orr	w10, w11, w10
    26a4:	add	x9, x16, x28, lsl #1
    26a8:	str	w13, [x0, #644]
    26ac:	str	w10, [x0, #640]
    26b0:	ldrh	w11, [x9, #38]
    26b4:	madd	x12, x8, x18, x0
    26b8:	madd	x14, x8, x2, x0
    26bc:	cmp	w13, #0x8
    26c0:	add	x12, x12, x11
    26c4:	add	x11, x14, x11, lsl #2
    26c8:	ldrb	w12, [x12, x1]
    26cc:	ldr	w11, [x11, x4]
    26d0:	b.lt	2710 <BZ2_compressBlock+0x2704>  // b.tstop
    26d4:	ldr	w14, [x22]
    26d8:	ldr	x13, [x19]
    26dc:	lsr	w10, w10, #24
    26e0:	strb	w10, [x13, w14, sxtw]
    26e4:	ldr	w10, [x22]
    26e8:	add	w14, w10, #0x1
    26ec:	str	w14, [x22]
    26f0:	ldr	w10, [x24]
    26f4:	lsl	w10, w10, #8
    26f8:	str	w10, [x24]
    26fc:	ldr	w15, [x21]
    2700:	sub	w13, w15, #0x8
    2704:	cmp	w15, #0xf
    2708:	str	w13, [x21]
    270c:	b.gt	26d8 <BZ2_compressBlock+0x26cc>
    2710:	add	w12, w13, w12
    2714:	neg	w13, w12
    2718:	lsl	w11, w11, w13
    271c:	orr	w10, w11, w10
    2720:	str	w12, [x0, #644]
    2724:	str	w10, [x0, #640]
    2728:	ldrh	w9, [x9, #40]
    272c:	madd	x11, x8, x18, x0
    2730:	madd	x13, x8, x2, x0
    2734:	cmp	w12, #0x8
    2738:	add	x11, x11, x9
    273c:	add	x13, x13, x9, lsl #2
    2740:	ldrb	w9, [x11, x1]
    2744:	ldr	w11, [x13, x4]
    2748:	b.lt	2788 <BZ2_compressBlock+0x277c>  // b.tstop
    274c:	ldr	w13, [x22]
    2750:	ldr	x12, [x19]
    2754:	lsr	w10, w10, #24
    2758:	strb	w10, [x12, w13, sxtw]
    275c:	ldr	w10, [x22]
    2760:	add	w13, w10, #0x1
    2764:	str	w13, [x22]
    2768:	ldr	w10, [x24]
    276c:	lsl	w10, w10, #8
    2770:	str	w10, [x24]
    2774:	ldr	w14, [x21]
    2778:	sub	w12, w14, #0x8
    277c:	cmp	w14, #0xf
    2780:	str	w12, [x21]
    2784:	b.gt	2750 <BZ2_compressBlock+0x2744>
    2788:	add	w13, w12, w9
    278c:	neg	w12, w13
    2790:	lsl	w11, w11, w12
    2794:	orr	w10, w11, w10
    2798:	add	x9, x16, x28, lsl #1
    279c:	str	w13, [x0, #644]
    27a0:	str	w10, [x0, #640]
    27a4:	ldrh	w11, [x9, #42]
    27a8:	madd	x12, x8, x18, x0
    27ac:	madd	x14, x8, x2, x0
    27b0:	cmp	w13, #0x8
    27b4:	add	x12, x12, x11
    27b8:	add	x11, x14, x11, lsl #2
    27bc:	ldrb	w12, [x12, x1]
    27c0:	ldr	w11, [x11, x4]
    27c4:	b.lt	2804 <BZ2_compressBlock+0x27f8>  // b.tstop
    27c8:	ldr	w14, [x22]
    27cc:	ldr	x13, [x19]
    27d0:	lsr	w10, w10, #24
    27d4:	strb	w10, [x13, w14, sxtw]
    27d8:	ldr	w10, [x22]
    27dc:	add	w14, w10, #0x1
    27e0:	str	w14, [x22]
    27e4:	ldr	w10, [x24]
    27e8:	lsl	w10, w10, #8
    27ec:	str	w10, [x24]
    27f0:	ldr	w15, [x21]
    27f4:	sub	w13, w15, #0x8
    27f8:	cmp	w15, #0xf
    27fc:	str	w13, [x21]
    2800:	b.gt	27cc <BZ2_compressBlock+0x27c0>
    2804:	add	w12, w13, w12
    2808:	neg	w13, w12
    280c:	lsl	w11, w11, w13
    2810:	orr	w10, w11, w10
    2814:	str	w12, [x0, #644]
    2818:	str	w10, [x0, #640]
    281c:	ldrh	w9, [x9, #44]
    2820:	madd	x11, x8, x18, x0
    2824:	madd	x13, x8, x2, x0
    2828:	cmp	w12, #0x8
    282c:	add	x11, x11, x9
    2830:	add	x13, x13, x9, lsl #2
    2834:	ldrb	w9, [x11, x1]
    2838:	ldr	w11, [x13, x4]
    283c:	b.lt	287c <BZ2_compressBlock+0x2870>  // b.tstop
    2840:	ldr	w13, [x22]
    2844:	ldr	x12, [x19]
    2848:	lsr	w10, w10, #24
    284c:	strb	w10, [x12, w13, sxtw]
    2850:	ldr	w10, [x22]
    2854:	add	w13, w10, #0x1
    2858:	str	w13, [x22]
    285c:	ldr	w10, [x24]
    2860:	lsl	w10, w10, #8
    2864:	str	w10, [x24]
    2868:	ldr	w14, [x21]
    286c:	sub	w12, w14, #0x8
    2870:	cmp	w14, #0xf
    2874:	str	w12, [x21]
    2878:	b.gt	2844 <BZ2_compressBlock+0x2838>
    287c:	add	w13, w12, w9
    2880:	neg	w12, w13
    2884:	lsl	w11, w11, w12
    2888:	orr	w10, w11, w10
    288c:	add	x9, x16, x28, lsl #1
    2890:	str	w13, [x0, #644]
    2894:	str	w10, [x0, #640]
    2898:	ldrh	w11, [x9, #46]
    289c:	madd	x12, x8, x18, x0
    28a0:	madd	x14, x8, x2, x0
    28a4:	cmp	w13, #0x8
    28a8:	add	x12, x12, x11
    28ac:	add	x11, x14, x11, lsl #2
    28b0:	ldrb	w12, [x12, x1]
    28b4:	ldr	w11, [x11, x4]
    28b8:	b.lt	28f8 <BZ2_compressBlock+0x28ec>  // b.tstop
    28bc:	ldr	w14, [x22]
    28c0:	ldr	x13, [x19]
    28c4:	lsr	w10, w10, #24
    28c8:	strb	w10, [x13, w14, sxtw]
    28cc:	ldr	w10, [x22]
    28d0:	add	w14, w10, #0x1
    28d4:	str	w14, [x22]
    28d8:	ldr	w10, [x24]
    28dc:	lsl	w10, w10, #8
    28e0:	str	w10, [x24]
    28e4:	ldr	w15, [x21]
    28e8:	sub	w13, w15, #0x8
    28ec:	cmp	w15, #0xf
    28f0:	str	w13, [x21]
    28f4:	b.gt	28c0 <BZ2_compressBlock+0x28b4>
    28f8:	add	w12, w13, w12
    28fc:	neg	w13, w12
    2900:	lsl	w11, w11, w13
    2904:	orr	w10, w11, w10
    2908:	str	w12, [x0, #644]
    290c:	str	w10, [x0, #640]
    2910:	ldrh	w9, [x9, #48]
    2914:	madd	x11, x8, x18, x0
    2918:	madd	x13, x8, x2, x0
    291c:	cmp	w12, #0x8
    2920:	add	x11, x11, x9
    2924:	add	x13, x13, x9, lsl #2
    2928:	ldrb	w9, [x11, x1]
    292c:	ldr	w11, [x13, x4]
    2930:	b.lt	2970 <BZ2_compressBlock+0x2964>  // b.tstop
    2934:	ldr	w13, [x22]
    2938:	ldr	x12, [x19]
    293c:	lsr	w10, w10, #24
    2940:	strb	w10, [x12, w13, sxtw]
    2944:	ldr	w10, [x22]
    2948:	add	w13, w10, #0x1
    294c:	str	w13, [x22]
    2950:	ldr	w10, [x24]
    2954:	lsl	w10, w10, #8
    2958:	str	w10, [x24]
    295c:	ldr	w14, [x21]
    2960:	sub	w12, w14, #0x8
    2964:	cmp	w14, #0xf
    2968:	str	w12, [x21]
    296c:	b.gt	2938 <BZ2_compressBlock+0x292c>
    2970:	add	w13, w12, w9
    2974:	neg	w12, w13
    2978:	lsl	w11, w11, w12
    297c:	orr	w10, w11, w10
    2980:	add	x9, x16, x28, lsl #1
    2984:	str	w13, [x0, #644]
    2988:	str	w10, [x0, #640]
    298c:	ldrh	w11, [x9, #50]
    2990:	madd	x12, x8, x18, x0
    2994:	madd	x14, x8, x2, x0
    2998:	cmp	w13, #0x8
    299c:	add	x12, x12, x11
    29a0:	add	x11, x14, x11, lsl #2
    29a4:	ldrb	w12, [x12, x1]
    29a8:	ldr	w11, [x11, x4]
    29ac:	b.lt	29ec <BZ2_compressBlock+0x29e0>  // b.tstop
    29b0:	ldr	w14, [x22]
    29b4:	ldr	x13, [x19]
    29b8:	lsr	w10, w10, #24
    29bc:	strb	w10, [x13, w14, sxtw]
    29c0:	ldr	w10, [x22]
    29c4:	add	w14, w10, #0x1
    29c8:	str	w14, [x22]
    29cc:	ldr	w10, [x24]
    29d0:	lsl	w10, w10, #8
    29d4:	str	w10, [x24]
    29d8:	ldr	w15, [x21]
    29dc:	sub	w13, w15, #0x8
    29e0:	cmp	w15, #0xf
    29e4:	str	w13, [x21]
    29e8:	b.gt	29b4 <BZ2_compressBlock+0x29a8>
    29ec:	add	w12, w13, w12
    29f0:	neg	w13, w12
    29f4:	lsl	w11, w11, w13
    29f8:	orr	w10, w11, w10
    29fc:	str	w12, [x0, #644]
    2a00:	str	w10, [x0, #640]
    2a04:	ldrh	w9, [x9, #52]
    2a08:	madd	x11, x8, x18, x0
    2a0c:	madd	x13, x8, x2, x0
    2a10:	cmp	w12, #0x8
    2a14:	add	x11, x11, x9
    2a18:	add	x13, x13, x9, lsl #2
    2a1c:	ldrb	w9, [x11, x1]
    2a20:	ldr	w11, [x13, x4]
    2a24:	b.lt	2a64 <BZ2_compressBlock+0x2a58>  // b.tstop
    2a28:	ldr	w13, [x22]
    2a2c:	ldr	x12, [x19]
    2a30:	lsr	w10, w10, #24
    2a34:	strb	w10, [x12, w13, sxtw]
    2a38:	ldr	w10, [x22]
    2a3c:	add	w13, w10, #0x1
    2a40:	str	w13, [x22]
    2a44:	ldr	w10, [x24]
    2a48:	lsl	w10, w10, #8
    2a4c:	str	w10, [x24]
    2a50:	ldr	w14, [x21]
    2a54:	sub	w12, w14, #0x8
    2a58:	cmp	w14, #0xf
    2a5c:	str	w12, [x21]
    2a60:	b.gt	2a2c <BZ2_compressBlock+0x2a20>
    2a64:	add	w13, w12, w9
    2a68:	neg	w12, w13
    2a6c:	lsl	w11, w11, w12
    2a70:	orr	w10, w11, w10
    2a74:	add	x9, x16, x28, lsl #1
    2a78:	str	w13, [x0, #644]
    2a7c:	str	w10, [x0, #640]
    2a80:	ldrh	w11, [x9, #54]
    2a84:	madd	x12, x8, x18, x0
    2a88:	madd	x14, x8, x2, x0
    2a8c:	cmp	w13, #0x8
    2a90:	add	x12, x12, x11
    2a94:	add	x11, x14, x11, lsl #2
    2a98:	ldrb	w12, [x12, x1]
    2a9c:	ldr	w11, [x11, x4]
    2aa0:	b.lt	2ae0 <BZ2_compressBlock+0x2ad4>  // b.tstop
    2aa4:	ldr	w14, [x22]
    2aa8:	ldr	x13, [x19]
    2aac:	lsr	w10, w10, #24
    2ab0:	strb	w10, [x13, w14, sxtw]
    2ab4:	ldr	w10, [x22]
    2ab8:	add	w14, w10, #0x1
    2abc:	str	w14, [x22]
    2ac0:	ldr	w10, [x24]
    2ac4:	lsl	w10, w10, #8
    2ac8:	str	w10, [x24]
    2acc:	ldr	w15, [x21]
    2ad0:	sub	w13, w15, #0x8
    2ad4:	cmp	w15, #0xf
    2ad8:	str	w13, [x21]
    2adc:	b.gt	2aa8 <BZ2_compressBlock+0x2a9c>
    2ae0:	add	w12, w13, w12
    2ae4:	neg	w13, w12
    2ae8:	lsl	w11, w11, w13
    2aec:	orr	w10, w11, w10
    2af0:	str	w12, [x0, #644]
    2af4:	str	w10, [x0, #640]
    2af8:	ldrh	w9, [x9, #56]
    2afc:	madd	x11, x8, x18, x0
    2b00:	madd	x13, x8, x2, x0
    2b04:	cmp	w12, #0x8
    2b08:	add	x11, x11, x9
    2b0c:	add	x13, x13, x9, lsl #2
    2b10:	ldrb	w9, [x11, x1]
    2b14:	ldr	w11, [x13, x4]
    2b18:	b.lt	2b58 <BZ2_compressBlock+0x2b4c>  // b.tstop
    2b1c:	ldr	w13, [x22]
    2b20:	ldr	x12, [x19]
    2b24:	lsr	w10, w10, #24
    2b28:	strb	w10, [x12, w13, sxtw]
    2b2c:	ldr	w10, [x22]
    2b30:	add	w13, w10, #0x1
    2b34:	str	w13, [x22]
    2b38:	ldr	w10, [x24]
    2b3c:	lsl	w10, w10, #8
    2b40:	str	w10, [x24]
    2b44:	ldr	w14, [x21]
    2b48:	sub	w12, w14, #0x8
    2b4c:	cmp	w14, #0xf
    2b50:	str	w12, [x21]
    2b54:	b.gt	2b20 <BZ2_compressBlock+0x2b14>
    2b58:	add	w13, w12, w9
    2b5c:	neg	w12, w13
    2b60:	lsl	w11, w11, w12
    2b64:	orr	w10, w11, w10
    2b68:	add	x9, x16, x28, lsl #1
    2b6c:	str	w13, [x0, #644]
    2b70:	str	w10, [x0, #640]
    2b74:	ldrh	w11, [x9, #58]
    2b78:	madd	x12, x8, x18, x0
    2b7c:	madd	x14, x8, x2, x0
    2b80:	cmp	w13, #0x8
    2b84:	add	x12, x12, x11
    2b88:	add	x11, x14, x11, lsl #2
    2b8c:	ldrb	w12, [x12, x1]
    2b90:	ldr	w11, [x11, x4]
    2b94:	b.lt	2bd4 <BZ2_compressBlock+0x2bc8>  // b.tstop
    2b98:	ldr	w14, [x22]
    2b9c:	ldr	x13, [x19]
    2ba0:	lsr	w10, w10, #24
    2ba4:	strb	w10, [x13, w14, sxtw]
    2ba8:	ldr	w10, [x22]
    2bac:	add	w14, w10, #0x1
    2bb0:	str	w14, [x22]
    2bb4:	ldr	w10, [x24]
    2bb8:	lsl	w10, w10, #8
    2bbc:	str	w10, [x24]
    2bc0:	ldr	w15, [x21]
    2bc4:	sub	w13, w15, #0x8
    2bc8:	cmp	w15, #0xf
    2bcc:	str	w13, [x21]
    2bd0:	b.gt	2b9c <BZ2_compressBlock+0x2b90>
    2bd4:	add	w12, w13, w12
    2bd8:	neg	w13, w12
    2bdc:	lsl	w11, w11, w13
    2be0:	orr	w10, w11, w10
    2be4:	str	w12, [x0, #644]
    2be8:	str	w10, [x0, #640]
    2bec:	ldrh	w9, [x9, #60]
    2bf0:	madd	x11, x8, x18, x0
    2bf4:	madd	x13, x8, x2, x0
    2bf8:	cmp	w12, #0x8
    2bfc:	add	x11, x11, x9
    2c00:	add	x13, x13, x9, lsl #2
    2c04:	ldrb	w9, [x11, x1]
    2c08:	ldr	w11, [x13, x4]
    2c0c:	b.lt	2c4c <BZ2_compressBlock+0x2c40>  // b.tstop
    2c10:	ldr	w13, [x22]
    2c14:	ldr	x12, [x19]
    2c18:	lsr	w10, w10, #24
    2c1c:	strb	w10, [x12, w13, sxtw]
    2c20:	ldr	w10, [x22]
    2c24:	add	w13, w10, #0x1
    2c28:	str	w13, [x22]
    2c2c:	ldr	w10, [x24]
    2c30:	lsl	w10, w10, #8
    2c34:	str	w10, [x24]
    2c38:	ldr	w14, [x21]
    2c3c:	sub	w12, w14, #0x8
    2c40:	cmp	w14, #0xf
    2c44:	str	w12, [x21]
    2c48:	b.gt	2c14 <BZ2_compressBlock+0x2c08>
    2c4c:	add	w13, w12, w9
    2c50:	neg	w12, w13
    2c54:	lsl	w11, w11, w12
    2c58:	orr	w10, w11, w10
    2c5c:	add	x9, x16, x28, lsl #1
    2c60:	str	w13, [x0, #644]
    2c64:	str	w10, [x0, #640]
    2c68:	ldrh	w11, [x9, #62]
    2c6c:	madd	x12, x8, x18, x0
    2c70:	madd	x14, x8, x2, x0
    2c74:	cmp	w13, #0x8
    2c78:	add	x12, x12, x11
    2c7c:	add	x11, x14, x11, lsl #2
    2c80:	ldrb	w12, [x12, x1]
    2c84:	ldr	w11, [x11, x4]
    2c88:	b.lt	2cc8 <BZ2_compressBlock+0x2cbc>  // b.tstop
    2c8c:	ldr	w14, [x22]
    2c90:	ldr	x13, [x19]
    2c94:	lsr	w10, w10, #24
    2c98:	strb	w10, [x13, w14, sxtw]
    2c9c:	ldr	w10, [x22]
    2ca0:	add	w14, w10, #0x1
    2ca4:	str	w14, [x22]
    2ca8:	ldr	w10, [x24]
    2cac:	lsl	w10, w10, #8
    2cb0:	str	w10, [x24]
    2cb4:	ldr	w15, [x21]
    2cb8:	sub	w13, w15, #0x8
    2cbc:	cmp	w15, #0xf
    2cc0:	str	w13, [x21]
    2cc4:	b.gt	2c90 <BZ2_compressBlock+0x2c84>
    2cc8:	add	w12, w13, w12
    2ccc:	neg	w13, w12
    2cd0:	lsl	w11, w11, w13
    2cd4:	orr	w10, w11, w10
    2cd8:	str	w12, [x0, #644]
    2cdc:	str	w10, [x0, #640]
    2ce0:	ldrh	w9, [x9, #64]
    2ce4:	madd	x11, x8, x18, x0
    2ce8:	madd	x13, x8, x2, x0
    2cec:	cmp	w12, #0x8
    2cf0:	add	x11, x11, x9
    2cf4:	add	x13, x13, x9, lsl #2
    2cf8:	ldrb	w9, [x11, x1]
    2cfc:	ldr	w11, [x13, x4]
    2d00:	b.lt	2d40 <BZ2_compressBlock+0x2d34>  // b.tstop
    2d04:	ldr	w13, [x22]
    2d08:	ldr	x12, [x19]
    2d0c:	lsr	w10, w10, #24
    2d10:	strb	w10, [x12, w13, sxtw]
    2d14:	ldr	w10, [x22]
    2d18:	add	w13, w10, #0x1
    2d1c:	str	w13, [x22]
    2d20:	ldr	w10, [x24]
    2d24:	lsl	w10, w10, #8
    2d28:	str	w10, [x24]
    2d2c:	ldr	w14, [x21]
    2d30:	sub	w12, w14, #0x8
    2d34:	cmp	w14, #0xf
    2d38:	str	w12, [x21]
    2d3c:	b.gt	2d08 <BZ2_compressBlock+0x2cfc>
    2d40:	add	w13, w12, w9
    2d44:	neg	w12, w13
    2d48:	lsl	w11, w11, w12
    2d4c:	orr	w10, w11, w10
    2d50:	add	x9, x16, x28, lsl #1
    2d54:	str	w13, [x0, #644]
    2d58:	str	w10, [x0, #640]
    2d5c:	ldrh	w11, [x9, #66]
    2d60:	madd	x12, x8, x18, x0
    2d64:	madd	x14, x8, x2, x0
    2d68:	cmp	w13, #0x8
    2d6c:	add	x12, x12, x11
    2d70:	add	x11, x14, x11, lsl #2
    2d74:	ldrb	w12, [x12, x1]
    2d78:	ldr	w11, [x11, x4]
    2d7c:	b.lt	2dbc <BZ2_compressBlock+0x2db0>  // b.tstop
    2d80:	ldr	w14, [x22]
    2d84:	ldr	x13, [x19]
    2d88:	lsr	w10, w10, #24
    2d8c:	strb	w10, [x13, w14, sxtw]
    2d90:	ldr	w10, [x22]
    2d94:	add	w14, w10, #0x1
    2d98:	str	w14, [x22]
    2d9c:	ldr	w10, [x24]
    2da0:	lsl	w10, w10, #8
    2da4:	str	w10, [x24]
    2da8:	ldr	w15, [x21]
    2dac:	sub	w13, w15, #0x8
    2db0:	cmp	w15, #0xf
    2db4:	str	w13, [x21]
    2db8:	b.gt	2d84 <BZ2_compressBlock+0x2d78>
    2dbc:	add	w12, w13, w12
    2dc0:	neg	w13, w12
    2dc4:	lsl	w11, w11, w13
    2dc8:	orr	w10, w11, w10
    2dcc:	str	w12, [x0, #644]
    2dd0:	str	w10, [x0, #640]
    2dd4:	ldrh	w9, [x9, #68]
    2dd8:	madd	x11, x8, x18, x0
    2ddc:	madd	x13, x8, x2, x0
    2de0:	cmp	w12, #0x8
    2de4:	add	x11, x11, x9
    2de8:	add	x13, x13, x9, lsl #2
    2dec:	ldrb	w9, [x11, x1]
    2df0:	ldr	w11, [x13, x4]
    2df4:	b.lt	2e34 <BZ2_compressBlock+0x2e28>  // b.tstop
    2df8:	ldr	w13, [x22]
    2dfc:	ldr	x12, [x19]
    2e00:	lsr	w10, w10, #24
    2e04:	strb	w10, [x12, w13, sxtw]
    2e08:	ldr	w10, [x22]
    2e0c:	add	w13, w10, #0x1
    2e10:	str	w13, [x22]
    2e14:	ldr	w10, [x24]
    2e18:	lsl	w10, w10, #8
    2e1c:	str	w10, [x24]
    2e20:	ldr	w14, [x21]
    2e24:	sub	w12, w14, #0x8
    2e28:	cmp	w14, #0xf
    2e2c:	str	w12, [x21]
    2e30:	b.gt	2dfc <BZ2_compressBlock+0x2df0>
    2e34:	add	w13, w12, w9
    2e38:	neg	w12, w13
    2e3c:	lsl	w11, w11, w12
    2e40:	orr	w10, w11, w10
    2e44:	add	x9, x16, x28, lsl #1
    2e48:	str	w13, [x0, #644]
    2e4c:	str	w10, [x0, #640]
    2e50:	ldrh	w11, [x9, #70]
    2e54:	madd	x12, x8, x18, x0
    2e58:	madd	x14, x8, x2, x0
    2e5c:	cmp	w13, #0x8
    2e60:	add	x12, x12, x11
    2e64:	add	x11, x14, x11, lsl #2
    2e68:	ldrb	w12, [x12, x1]
    2e6c:	ldr	w11, [x11, x4]
    2e70:	b.lt	2eb0 <BZ2_compressBlock+0x2ea4>  // b.tstop
    2e74:	ldr	w14, [x22]
    2e78:	ldr	x13, [x19]
    2e7c:	lsr	w10, w10, #24
    2e80:	strb	w10, [x13, w14, sxtw]
    2e84:	ldr	w10, [x22]
    2e88:	add	w14, w10, #0x1
    2e8c:	str	w14, [x22]
    2e90:	ldr	w10, [x24]
    2e94:	lsl	w10, w10, #8
    2e98:	str	w10, [x24]
    2e9c:	ldr	w15, [x21]
    2ea0:	sub	w13, w15, #0x8
    2ea4:	cmp	w15, #0xf
    2ea8:	str	w13, [x21]
    2eac:	b.gt	2e78 <BZ2_compressBlock+0x2e6c>
    2eb0:	add	w12, w13, w12
    2eb4:	neg	w13, w12
    2eb8:	lsl	w11, w11, w13
    2ebc:	orr	w10, w11, w10
    2ec0:	str	w12, [x0, #644]
    2ec4:	str	w10, [x0, #640]
    2ec8:	ldrh	w9, [x9, #72]
    2ecc:	madd	x11, x8, x18, x0
    2ed0:	madd	x13, x8, x2, x0
    2ed4:	cmp	w12, #0x8
    2ed8:	add	x11, x11, x9
    2edc:	add	x13, x13, x9, lsl #2
    2ee0:	ldrb	w9, [x11, x1]
    2ee4:	ldr	w11, [x13, x4]
    2ee8:	b.lt	2f28 <BZ2_compressBlock+0x2f1c>  // b.tstop
    2eec:	ldr	w13, [x22]
    2ef0:	ldr	x12, [x19]
    2ef4:	lsr	w10, w10, #24
    2ef8:	strb	w10, [x12, w13, sxtw]
    2efc:	ldr	w10, [x22]
    2f00:	add	w13, w10, #0x1
    2f04:	str	w13, [x22]
    2f08:	ldr	w10, [x24]
    2f0c:	lsl	w10, w10, #8
    2f10:	str	w10, [x24]
    2f14:	ldr	w14, [x21]
    2f18:	sub	w12, w14, #0x8
    2f1c:	cmp	w14, #0xf
    2f20:	str	w12, [x21]
    2f24:	b.gt	2ef0 <BZ2_compressBlock+0x2ee4>
    2f28:	add	w13, w12, w9
    2f2c:	neg	w12, w13
    2f30:	lsl	w11, w11, w12
    2f34:	orr	w10, w11, w10
    2f38:	add	x9, x16, x28, lsl #1
    2f3c:	str	w13, [x0, #644]
    2f40:	str	w10, [x0, #640]
    2f44:	ldrh	w11, [x9, #74]
    2f48:	madd	x12, x8, x18, x0
    2f4c:	madd	x14, x8, x2, x0
    2f50:	cmp	w13, #0x8
    2f54:	add	x12, x12, x11
    2f58:	add	x11, x14, x11, lsl #2
    2f5c:	ldrb	w12, [x12, x1]
    2f60:	ldr	w11, [x11, x4]
    2f64:	b.lt	2fa4 <BZ2_compressBlock+0x2f98>  // b.tstop
    2f68:	ldr	w14, [x22]
    2f6c:	ldr	x13, [x19]
    2f70:	lsr	w10, w10, #24
    2f74:	strb	w10, [x13, w14, sxtw]
    2f78:	ldr	w10, [x22]
    2f7c:	add	w14, w10, #0x1
    2f80:	str	w14, [x22]
    2f84:	ldr	w10, [x24]
    2f88:	lsl	w10, w10, #8
    2f8c:	str	w10, [x24]
    2f90:	ldr	w15, [x21]
    2f94:	sub	w13, w15, #0x8
    2f98:	cmp	w15, #0xf
    2f9c:	str	w13, [x21]
    2fa0:	b.gt	2f6c <BZ2_compressBlock+0x2f60>
    2fa4:	add	w12, w13, w12
    2fa8:	neg	w13, w12
    2fac:	lsl	w11, w11, w13
    2fb0:	orr	w10, w11, w10
    2fb4:	str	w12, [x0, #644]
    2fb8:	str	w10, [x0, #640]
    2fbc:	ldrh	w9, [x9, #76]
    2fc0:	madd	x11, x8, x18, x0
    2fc4:	madd	x13, x8, x2, x0
    2fc8:	cmp	w12, #0x8
    2fcc:	add	x11, x11, x9
    2fd0:	add	x13, x13, x9, lsl #2
    2fd4:	ldrb	w9, [x11, x1]
    2fd8:	ldr	w11, [x13, x4]
    2fdc:	b.lt	301c <BZ2_compressBlock+0x3010>  // b.tstop
    2fe0:	ldr	w13, [x22]
    2fe4:	ldr	x12, [x19]
    2fe8:	lsr	w10, w10, #24
    2fec:	strb	w10, [x12, w13, sxtw]
    2ff0:	ldr	w10, [x22]
    2ff4:	add	w13, w10, #0x1
    2ff8:	str	w13, [x22]
    2ffc:	ldr	w10, [x24]
    3000:	lsl	w10, w10, #8
    3004:	str	w10, [x24]
    3008:	ldr	w14, [x21]
    300c:	sub	w12, w14, #0x8
    3010:	cmp	w14, #0xf
    3014:	str	w12, [x21]
    3018:	b.gt	2fe4 <BZ2_compressBlock+0x2fd8>
    301c:	add	w13, w12, w9
    3020:	neg	w12, w13
    3024:	lsl	w11, w11, w12
    3028:	orr	w10, w11, w10
    302c:	add	x9, x16, x28, lsl #1
    3030:	str	w13, [x0, #644]
    3034:	str	w10, [x0, #640]
    3038:	ldrh	w11, [x9, #78]
    303c:	madd	x12, x8, x18, x0
    3040:	madd	x14, x8, x2, x0
    3044:	cmp	w13, #0x8
    3048:	add	x12, x12, x11
    304c:	add	x11, x14, x11, lsl #2
    3050:	ldrb	w12, [x12, x1]
    3054:	ldr	w11, [x11, x4]
    3058:	b.lt	3098 <BZ2_compressBlock+0x308c>  // b.tstop
    305c:	ldr	w14, [x22]
    3060:	ldr	x13, [x19]
    3064:	lsr	w10, w10, #24
    3068:	strb	w10, [x13, w14, sxtw]
    306c:	ldr	w10, [x22]
    3070:	add	w14, w10, #0x1
    3074:	str	w14, [x22]
    3078:	ldr	w10, [x24]
    307c:	lsl	w10, w10, #8
    3080:	str	w10, [x24]
    3084:	ldr	w15, [x21]
    3088:	sub	w13, w15, #0x8
    308c:	cmp	w15, #0xf
    3090:	str	w13, [x21]
    3094:	b.gt	3060 <BZ2_compressBlock+0x3054>
    3098:	add	w12, w13, w12
    309c:	neg	w13, w12
    30a0:	lsl	w11, w11, w13
    30a4:	orr	w10, w11, w10
    30a8:	str	w12, [x0, #644]
    30ac:	str	w10, [x0, #640]
    30b0:	ldrh	w9, [x9, #80]
    30b4:	madd	x11, x8, x18, x0
    30b8:	madd	x13, x8, x2, x0
    30bc:	cmp	w12, #0x8
    30c0:	add	x11, x11, x9
    30c4:	add	x13, x13, x9, lsl #2
    30c8:	ldrb	w9, [x11, x1]
    30cc:	ldr	w11, [x13, x4]
    30d0:	b.lt	3110 <BZ2_compressBlock+0x3104>  // b.tstop
    30d4:	ldr	w13, [x22]
    30d8:	ldr	x12, [x19]
    30dc:	lsr	w10, w10, #24
    30e0:	strb	w10, [x12, w13, sxtw]
    30e4:	ldr	w10, [x22]
    30e8:	add	w13, w10, #0x1
    30ec:	str	w13, [x22]
    30f0:	ldr	w10, [x24]
    30f4:	lsl	w10, w10, #8
    30f8:	str	w10, [x24]
    30fc:	ldr	w14, [x21]
    3100:	sub	w12, w14, #0x8
    3104:	cmp	w14, #0xf
    3108:	str	w12, [x21]
    310c:	b.gt	30d8 <BZ2_compressBlock+0x30cc>
    3110:	add	w13, w12, w9
    3114:	neg	w12, w13
    3118:	lsl	w11, w11, w12
    311c:	orr	w10, w11, w10
    3120:	add	x9, x16, x28, lsl #1
    3124:	str	w13, [x0, #644]
    3128:	str	w10, [x0, #640]
    312c:	ldrh	w11, [x9, #82]
    3130:	madd	x12, x8, x18, x0
    3134:	madd	x14, x8, x2, x0
    3138:	cmp	w13, #0x8
    313c:	add	x12, x12, x11
    3140:	add	x11, x14, x11, lsl #2
    3144:	ldrb	w12, [x12, x1]
    3148:	ldr	w11, [x11, x4]
    314c:	b.lt	318c <BZ2_compressBlock+0x3180>  // b.tstop
    3150:	ldr	w14, [x22]
    3154:	ldr	x13, [x19]
    3158:	lsr	w10, w10, #24
    315c:	strb	w10, [x13, w14, sxtw]
    3160:	ldr	w10, [x22]
    3164:	add	w14, w10, #0x1
    3168:	str	w14, [x22]
    316c:	ldr	w10, [x24]
    3170:	lsl	w10, w10, #8
    3174:	str	w10, [x24]
    3178:	ldr	w15, [x21]
    317c:	sub	w13, w15, #0x8
    3180:	cmp	w15, #0xf
    3184:	str	w13, [x21]
    3188:	b.gt	3154 <BZ2_compressBlock+0x3148>
    318c:	add	w12, w13, w12
    3190:	neg	w13, w12
    3194:	lsl	w11, w11, w13
    3198:	orr	w10, w11, w10
    319c:	str	w12, [x0, #644]
    31a0:	str	w10, [x0, #640]
    31a4:	ldrh	w9, [x9, #84]
    31a8:	madd	x11, x8, x18, x0
    31ac:	madd	x13, x8, x2, x0
    31b0:	cmp	w12, #0x8
    31b4:	add	x11, x11, x9
    31b8:	add	x13, x13, x9, lsl #2
    31bc:	ldrb	w9, [x11, x1]
    31c0:	ldr	w11, [x13, x4]
    31c4:	b.lt	3204 <BZ2_compressBlock+0x31f8>  // b.tstop
    31c8:	ldr	w13, [x22]
    31cc:	ldr	x12, [x19]
    31d0:	lsr	w10, w10, #24
    31d4:	strb	w10, [x12, w13, sxtw]
    31d8:	ldr	w10, [x22]
    31dc:	add	w13, w10, #0x1
    31e0:	str	w13, [x22]
    31e4:	ldr	w10, [x24]
    31e8:	lsl	w10, w10, #8
    31ec:	str	w10, [x24]
    31f0:	ldr	w14, [x21]
    31f4:	sub	w12, w14, #0x8
    31f8:	cmp	w14, #0xf
    31fc:	str	w12, [x21]
    3200:	b.gt	31cc <BZ2_compressBlock+0x31c0>
    3204:	add	w13, w12, w9
    3208:	neg	w12, w13
    320c:	lsl	w11, w11, w12
    3210:	orr	w10, w11, w10
    3214:	add	x9, x16, x28, lsl #1
    3218:	str	w13, [x0, #644]
    321c:	str	w10, [x0, #640]
    3220:	ldrh	w11, [x9, #86]
    3224:	madd	x12, x8, x18, x0
    3228:	madd	x14, x8, x2, x0
    322c:	cmp	w13, #0x8
    3230:	add	x12, x12, x11
    3234:	add	x11, x14, x11, lsl #2
    3238:	ldrb	w12, [x12, x1]
    323c:	ldr	w11, [x11, x4]
    3240:	b.lt	3280 <BZ2_compressBlock+0x3274>  // b.tstop
    3244:	ldr	w14, [x22]
    3248:	ldr	x13, [x19]
    324c:	lsr	w10, w10, #24
    3250:	strb	w10, [x13, w14, sxtw]
    3254:	ldr	w10, [x22]
    3258:	add	w14, w10, #0x1
    325c:	str	w14, [x22]
    3260:	ldr	w10, [x24]
    3264:	lsl	w10, w10, #8
    3268:	str	w10, [x24]
    326c:	ldr	w15, [x21]
    3270:	sub	w13, w15, #0x8
    3274:	cmp	w15, #0xf
    3278:	str	w13, [x21]
    327c:	b.gt	3248 <BZ2_compressBlock+0x323c>
    3280:	add	w12, w13, w12
    3284:	neg	w13, w12
    3288:	lsl	w11, w11, w13
    328c:	orr	w10, w11, w10
    3290:	str	w12, [x0, #644]
    3294:	str	w10, [x0, #640]
    3298:	ldrh	w9, [x9, #88]
    329c:	madd	x11, x8, x18, x0
    32a0:	madd	x13, x8, x2, x0
    32a4:	cmp	w12, #0x8
    32a8:	add	x11, x11, x9
    32ac:	add	x13, x13, x9, lsl #2
    32b0:	ldrb	w9, [x11, x1]
    32b4:	ldr	w11, [x13, x4]
    32b8:	b.lt	32f8 <BZ2_compressBlock+0x32ec>  // b.tstop
    32bc:	ldr	w13, [x22]
    32c0:	ldr	x12, [x19]
    32c4:	lsr	w10, w10, #24
    32c8:	strb	w10, [x12, w13, sxtw]
    32cc:	ldr	w10, [x22]
    32d0:	add	w13, w10, #0x1
    32d4:	str	w13, [x22]
    32d8:	ldr	w10, [x24]
    32dc:	lsl	w10, w10, #8
    32e0:	str	w10, [x24]
    32e4:	ldr	w14, [x21]
    32e8:	sub	w12, w14, #0x8
    32ec:	cmp	w14, #0xf
    32f0:	str	w12, [x21]
    32f4:	b.gt	32c0 <BZ2_compressBlock+0x32b4>
    32f8:	add	w13, w12, w9
    32fc:	neg	w12, w13
    3300:	lsl	w11, w11, w12
    3304:	orr	w10, w11, w10
    3308:	add	x9, x16, x28, lsl #1
    330c:	str	w13, [x0, #644]
    3310:	str	w10, [x0, #640]
    3314:	ldrh	w11, [x9, #90]
    3318:	madd	x12, x8, x18, x0
    331c:	madd	x14, x8, x2, x0
    3320:	cmp	w13, #0x8
    3324:	add	x12, x12, x11
    3328:	add	x11, x14, x11, lsl #2
    332c:	ldrb	w12, [x12, x1]
    3330:	ldr	w11, [x11, x4]
    3334:	b.lt	3374 <BZ2_compressBlock+0x3368>  // b.tstop
    3338:	ldr	w14, [x22]
    333c:	ldr	x13, [x19]
    3340:	lsr	w10, w10, #24
    3344:	strb	w10, [x13, w14, sxtw]
    3348:	ldr	w10, [x22]
    334c:	add	w14, w10, #0x1
    3350:	str	w14, [x22]
    3354:	ldr	w10, [x24]
    3358:	lsl	w10, w10, #8
    335c:	str	w10, [x24]
    3360:	ldr	w15, [x21]
    3364:	sub	w13, w15, #0x8
    3368:	cmp	w15, #0xf
    336c:	str	w13, [x21]
    3370:	b.gt	333c <BZ2_compressBlock+0x3330>
    3374:	add	w12, w13, w12
    3378:	neg	w13, w12
    337c:	lsl	w11, w11, w13
    3380:	orr	w10, w11, w10
    3384:	str	w12, [x0, #644]
    3388:	str	w10, [x0, #640]
    338c:	ldrh	w9, [x9, #92]
    3390:	madd	x11, x8, x18, x0
    3394:	madd	x13, x8, x2, x0
    3398:	cmp	w12, #0x8
    339c:	add	x11, x11, x9
    33a0:	add	x13, x13, x9, lsl #2
    33a4:	ldrb	w9, [x11, x1]
    33a8:	ldr	w11, [x13, x4]
    33ac:	b.lt	33ec <BZ2_compressBlock+0x33e0>  // b.tstop
    33b0:	ldr	w13, [x22]
    33b4:	ldr	x12, [x19]
    33b8:	lsr	w10, w10, #24
    33bc:	strb	w10, [x12, w13, sxtw]
    33c0:	ldr	w10, [x22]
    33c4:	add	w13, w10, #0x1
    33c8:	str	w13, [x22]
    33cc:	ldr	w10, [x24]
    33d0:	lsl	w10, w10, #8
    33d4:	str	w10, [x24]
    33d8:	ldr	w14, [x21]
    33dc:	sub	w12, w14, #0x8
    33e0:	cmp	w14, #0xf
    33e4:	str	w12, [x21]
    33e8:	b.gt	33b4 <BZ2_compressBlock+0x33a8>
    33ec:	add	w13, w12, w9
    33f0:	neg	w12, w13
    33f4:	lsl	w11, w11, w12
    33f8:	orr	w10, w11, w10
    33fc:	add	x9, x16, x28, lsl #1
    3400:	str	w13, [x0, #644]
    3404:	str	w10, [x0, #640]
    3408:	ldrh	w11, [x9, #94]
    340c:	madd	x12, x8, x18, x0
    3410:	madd	x14, x8, x2, x0
    3414:	cmp	w13, #0x8
    3418:	add	x12, x12, x11
    341c:	add	x11, x14, x11, lsl #2
    3420:	ldrb	w12, [x12, x1]
    3424:	ldr	w11, [x11, x4]
    3428:	b.lt	3468 <BZ2_compressBlock+0x345c>  // b.tstop
    342c:	ldr	w14, [x22]
    3430:	ldr	x13, [x19]
    3434:	lsr	w10, w10, #24
    3438:	strb	w10, [x13, w14, sxtw]
    343c:	ldr	w10, [x22]
    3440:	add	w14, w10, #0x1
    3444:	str	w14, [x22]
    3448:	ldr	w10, [x24]
    344c:	lsl	w10, w10, #8
    3450:	str	w10, [x24]
    3454:	ldr	w15, [x21]
    3458:	sub	w13, w15, #0x8
    345c:	cmp	w15, #0xf
    3460:	str	w13, [x21]
    3464:	b.gt	3430 <BZ2_compressBlock+0x3424>
    3468:	add	w12, w13, w12
    346c:	neg	w13, w12
    3470:	lsl	w11, w11, w13
    3474:	orr	w10, w11, w10
    3478:	str	w12, [x0, #644]
    347c:	str	w10, [x0, #640]
    3480:	ldrh	w9, [x9, #96]
    3484:	madd	x11, x8, x18, x0
    3488:	madd	x13, x8, x2, x0
    348c:	cmp	w12, #0x8
    3490:	add	x11, x11, x9
    3494:	add	x9, x13, x9, lsl #2
    3498:	ldrb	w11, [x11, x1]
    349c:	ldr	w9, [x9, x4]
    34a0:	b.lt	34e0 <BZ2_compressBlock+0x34d4>  // b.tstop
    34a4:	ldr	w13, [x22]
    34a8:	ldr	x12, [x19]
    34ac:	lsr	w10, w10, #24
    34b0:	strb	w10, [x12, w13, sxtw]
    34b4:	ldr	w10, [x22]
    34b8:	add	w13, w10, #0x1
    34bc:	str	w13, [x22]
    34c0:	ldr	w10, [x24]
    34c4:	lsl	w10, w10, #8
    34c8:	str	w10, [x24]
    34cc:	ldr	w14, [x21]
    34d0:	sub	w12, w14, #0x8
    34d4:	cmp	w14, #0xf
    34d8:	str	w12, [x21]
    34dc:	b.gt	34a8 <BZ2_compressBlock+0x349c>
    34e0:	add	w11, w12, w11
    34e4:	neg	w12, w11
    34e8:	lsl	w9, w9, w12
    34ec:	orr	w9, w9, w10
    34f0:	str	w11, [x0, #644]
    34f4:	str	w9, [x0, #640]
    34f8:	ldrh	w10, [x16, x5, lsl #1]
    34fc:	madd	x12, x8, x18, x0
    3500:	madd	x8, x8, x2, x0
    3504:	cmp	w11, #0x8
    3508:	add	x12, x12, x10
    350c:	add	x8, x8, x10, lsl #2
    3510:	ldrb	w10, [x12, x1]
    3514:	ldr	w8, [x8, x4]
    3518:	b.lt	3558 <BZ2_compressBlock+0x354c>  // b.tstop
    351c:	ldr	w12, [x22]
    3520:	ldr	x11, [x19]
    3524:	lsr	w9, w9, #24
    3528:	strb	w9, [x11, w12, sxtw]
    352c:	ldr	w9, [x22]
    3530:	add	w12, w9, #0x1
    3534:	str	w12, [x22]
    3538:	ldr	w9, [x24]
    353c:	lsl	w9, w9, #8
    3540:	str	w9, [x24]
    3544:	ldr	w13, [x21]
    3548:	sub	w11, w13, #0x8
    354c:	cmp	w13, #0xf
    3550:	str	w11, [x21]
    3554:	b.gt	3520 <BZ2_compressBlock+0x3514>
    3558:	add	w10, w11, w10
    355c:	neg	w11, w10
    3560:	lsl	w8, w8, w11
    3564:	orr	w8, w8, w9
    3568:	str	w8, [x24]
    356c:	str	w10, [x21]
    3570:	b	3610 <BZ2_compressBlock+0x3604>
    3574:	cmp	w27, w28
    3578:	b.lt	3610 <BZ2_compressBlock+0x3604>  // b.tstop
    357c:	ldr	w11, [x21]
    3580:	ldr	w10, [x24]
    3584:	sxtw	x9, w27
    3588:	ldrb	w12, [x8]
    358c:	ldrh	w13, [x16, x28, lsl #1]
    3590:	cmp	w11, #0x8
    3594:	madd	x14, x12, x18, x0
    3598:	madd	x12, x12, x2, x0
    359c:	add	x14, x14, x13
    35a0:	add	x12, x12, x13, lsl #2
    35a4:	ldrb	w13, [x14, x1]
    35a8:	ldr	w12, [x12, x4]
    35ac:	b.lt	35ec <BZ2_compressBlock+0x35e0>  // b.tstop
    35b0:	ldr	w14, [x22]
    35b4:	ldr	x11, [x19]
    35b8:	lsr	w10, w10, #24
    35bc:	strb	w10, [x11, w14, sxtw]
    35c0:	ldr	w10, [x22]
    35c4:	add	w14, w10, #0x1
    35c8:	str	w14, [x22]
    35cc:	ldr	w10, [x24]
    35d0:	lsl	w10, w10, #8
    35d4:	str	w10, [x24]
    35d8:	ldr	w15, [x21]
    35dc:	sub	w11, w15, #0x8
    35e0:	cmp	w15, #0xf
    35e4:	str	w11, [x21]
    35e8:	b.gt	35b4 <BZ2_compressBlock+0x35a8>
    35ec:	add	w11, w11, w13
    35f0:	neg	w13, w11
    35f4:	lsl	w12, w12, w13
    35f8:	cmp	x28, x9
    35fc:	add	x28, x28, #0x1
    3600:	orr	w10, w12, w10
    3604:	str	w10, [x24]
    3608:	str	w11, [x21]
    360c:	b.ne	3588 <BZ2_compressBlock+0x357c>  // b.any
    3610:	ldr	w8, [x0, #668]
    3614:	add	w9, w27, #0x1
    3618:	add	x26, x26, #0x1
    361c:	cmp	w9, w8
    3620:	b.lt	1d2c <BZ2_compressBlock+0x1d20>  // b.tstop
    3624:	b	362c <BZ2_compressBlock+0x3620>
    3628:	mov	w26, wzr
    362c:	ldr	x8, [sp, #112]
    3630:	ldr	w20, [sp]
    3634:	adrp	x19, 0 <stderr>
    3638:	cmp	w26, w8
    363c:	b.eq	364c <BZ2_compressBlock+0x3640>  // b.none
    3640:	mov	w0, #0xbbf                 	// #3007
    3644:	bl	0 <BZ2_bz__AssertH__fail>
    3648:	ldr	x0, [sp, #96]
    364c:	ldr	w8, [x0, #656]
    3650:	cmp	w8, #0x3
    3654:	b.ge	39ec <BZ2_compressBlock+0x39e0>  // b.tcont
    3658:	tst	w20, #0xff
    365c:	b.eq	3908 <BZ2_compressBlock+0x38fc>  // b.none
    3660:	ldr	w10, [x0, #644]
    3664:	cmp	w10, #0x7
    3668:	b.le	36b0 <BZ2_compressBlock+0x36a4>
    366c:	ldr	w9, [x0, #640]
    3670:	ldr	w8, [x0, #116]
    3674:	ldr	x10, [x0, #80]
    3678:	lsr	w9, w9, #24
    367c:	strb	w9, [x10, w8, sxtw]
    3680:	ldr	w8, [x0, #116]
    3684:	ldr	w9, [x0, #640]
    3688:	ldr	w11, [x0, #644]
    368c:	add	w8, w8, #0x1
    3690:	lsl	w9, w9, #8
    3694:	sub	w10, w11, #0x8
    3698:	cmp	w11, #0xf
    369c:	str	w8, [x0, #116]
    36a0:	str	w9, [x0, #640]
    36a4:	str	w10, [x0, #644]
    36a8:	b.gt	3674 <BZ2_compressBlock+0x3668>
    36ac:	b	36b4 <BZ2_compressBlock+0x36a8>
    36b0:	ldr	w9, [x0, #640]
    36b4:	mov	w8, #0x18                  	// #24
    36b8:	mov	w12, #0x17                  	// #23
    36bc:	sub	w13, w8, w10
    36c0:	lsl	w12, w12, w13
    36c4:	add	w11, w10, #0x8
    36c8:	orr	w9, w12, w9
    36cc:	str	w9, [x0, #640]
    36d0:	str	w11, [x0, #644]
    36d4:	tbnz	w10, #31, 3714 <BZ2_compressBlock+0x3708>
    36d8:	ldr	w10, [x0, #116]
    36dc:	ldr	x11, [x0, #80]
    36e0:	lsr	w9, w9, #24
    36e4:	strb	w9, [x11, w10, sxtw]
    36e8:	ldr	w9, [x0, #116]
    36ec:	ldr	w11, [x0, #640]
    36f0:	ldr	w12, [x0, #644]
    36f4:	add	w10, w9, #0x1
    36f8:	lsl	w9, w11, #8
    36fc:	sub	w11, w12, #0x8
    3700:	cmp	w12, #0xf
    3704:	str	w10, [x0, #116]
    3708:	str	w9, [x0, #640]
    370c:	str	w11, [x0, #644]
    3710:	b.gt	36dc <BZ2_compressBlock+0x36d0>
    3714:	sub	w8, w8, w11
    3718:	mov	w12, #0x72                  	// #114
    371c:	lsl	w8, w12, w8
    3720:	add	w10, w11, #0x8
    3724:	orr	w9, w8, w9
    3728:	str	w9, [x0, #640]
    372c:	str	w10, [x0, #644]
    3730:	tbnz	w11, #31, 3770 <BZ2_compressBlock+0x3764>
    3734:	ldr	w8, [x0, #116]
    3738:	ldr	x10, [x0, #80]
    373c:	lsr	w9, w9, #24
    3740:	strb	w9, [x10, w8, sxtw]
    3744:	ldr	w8, [x0, #116]
    3748:	ldr	w9, [x0, #640]
    374c:	ldr	w11, [x0, #644]
    3750:	add	w8, w8, #0x1
    3754:	lsl	w9, w9, #8
    3758:	sub	w10, w11, #0x8
    375c:	cmp	w11, #0xf
    3760:	str	w8, [x0, #116]
    3764:	str	w9, [x0, #640]
    3768:	str	w10, [x0, #644]
    376c:	b.gt	3738 <BZ2_compressBlock+0x372c>
    3770:	mov	w8, #0x18                  	// #24
    3774:	mov	w12, #0x45                  	// #69
    3778:	sub	w13, w8, w10
    377c:	lsl	w12, w12, w13
    3780:	add	w11, w10, #0x8
    3784:	orr	w9, w12, w9
    3788:	str	w9, [x0, #640]
    378c:	str	w11, [x0, #644]
    3790:	tbnz	w10, #31, 37d0 <BZ2_compressBlock+0x37c4>
    3794:	ldr	w10, [x0, #116]
    3798:	ldr	x11, [x0, #80]
    379c:	lsr	w9, w9, #24
    37a0:	strb	w9, [x11, w10, sxtw]
    37a4:	ldr	w9, [x0, #116]
    37a8:	ldr	w11, [x0, #640]
    37ac:	ldr	w12, [x0, #644]
    37b0:	add	w10, w9, #0x1
    37b4:	lsl	w9, w11, #8
    37b8:	sub	w11, w12, #0x8
    37bc:	cmp	w12, #0xf
    37c0:	str	w10, [x0, #116]
    37c4:	str	w9, [x0, #640]
    37c8:	str	w11, [x0, #644]
    37cc:	b.gt	3798 <BZ2_compressBlock+0x378c>
    37d0:	sub	w8, w8, w11
    37d4:	mov	w12, #0x38                  	// #56
    37d8:	lsl	w8, w12, w8
    37dc:	add	w10, w11, #0x8
    37e0:	orr	w9, w8, w9
    37e4:	str	w9, [x0, #640]
    37e8:	str	w10, [x0, #644]
    37ec:	tbnz	w11, #31, 382c <BZ2_compressBlock+0x3820>
    37f0:	ldr	w8, [x0, #116]
    37f4:	ldr	x10, [x0, #80]
    37f8:	lsr	w9, w9, #24
    37fc:	strb	w9, [x10, w8, sxtw]
    3800:	ldr	w8, [x0, #116]
    3804:	ldr	w9, [x0, #640]
    3808:	ldr	w11, [x0, #644]
    380c:	add	w8, w8, #0x1
    3810:	lsl	w9, w9, #8
    3814:	sub	w10, w11, #0x8
    3818:	cmp	w11, #0xf
    381c:	str	w8, [x0, #116]
    3820:	str	w9, [x0, #640]
    3824:	str	w10, [x0, #644]
    3828:	b.gt	37f4 <BZ2_compressBlock+0x37e8>
    382c:	mov	w8, #0x18                  	// #24
    3830:	mov	w12, #0x50                  	// #80
    3834:	sub	w13, w8, w10
    3838:	lsl	w12, w12, w13
    383c:	add	w11, w10, #0x8
    3840:	orr	w9, w12, w9
    3844:	str	w9, [x0, #640]
    3848:	str	w11, [x0, #644]
    384c:	tbnz	w10, #31, 388c <BZ2_compressBlock+0x3880>
    3850:	ldr	w10, [x0, #116]
    3854:	ldr	x11, [x0, #80]
    3858:	lsr	w9, w9, #24
    385c:	strb	w9, [x11, w10, sxtw]
    3860:	ldr	w9, [x0, #116]
    3864:	ldr	w11, [x0, #640]
    3868:	ldr	w12, [x0, #644]
    386c:	add	w10, w9, #0x1
    3870:	lsl	w9, w11, #8
    3874:	sub	w11, w12, #0x8
    3878:	cmp	w12, #0xf
    387c:	str	w10, [x0, #116]
    3880:	str	w9, [x0, #640]
    3884:	str	w11, [x0, #644]
    3888:	b.gt	3854 <BZ2_compressBlock+0x3848>
    388c:	ldr	w1, [x0, #652]
    3890:	sub	w8, w8, w11
    3894:	mov	w10, #0x90                  	// #144
    3898:	lsl	w8, w10, w8
    389c:	add	w11, w11, #0x8
    38a0:	orr	w8, w8, w9
    38a4:	str	w8, [x0, #640]
    38a8:	str	w11, [x0, #644]
    38ac:	bl	3a2c <bsPutUInt32>
    38b0:	ldr	x12, [sp, #96]
    38b4:	ldr	w8, [x12, #656]
    38b8:	cmp	w8, #0x1
    38bc:	b.gt	3a0c <BZ2_compressBlock+0x3a00>
    38c0:	ldr	w8, [x12, #644]
    38c4:	cmp	w8, #0x1
    38c8:	b.lt	3908 <BZ2_compressBlock+0x38fc>  // b.tstop
    38cc:	ldr	w8, [x12, #640]
    38d0:	ldr	w9, [x12, #116]
    38d4:	ldr	x10, [x12, #80]
    38d8:	lsr	w8, w8, #24
    38dc:	strb	w8, [x10, w9, sxtw]
    38e0:	ldr	w8, [x12, #116]
    38e4:	ldr	w10, [x12, #640]
    38e8:	ldr	w11, [x12, #644]
    38ec:	add	w9, w8, #0x1
    38f0:	lsl	w8, w10, #8
    38f4:	subs	w10, w11, #0x8
    38f8:	str	w9, [x12, #116]
    38fc:	str	w8, [x12, #640]
    3900:	str	w10, [x12, #644]
    3904:	b.gt	38d4 <BZ2_compressBlock+0x38c8>
    3908:	add	sp, sp, #0x1a0
    390c:	ldp	x20, x19, [sp, #80]
    3910:	ldp	x22, x21, [sp, #64]
    3914:	ldp	x24, x23, [sp, #48]
    3918:	ldp	x26, x25, [sp, #32]
    391c:	ldp	x28, x27, [sp, #16]
    3920:	ldp	x29, x30, [sp], #96
    3924:	ret
    3928:	adrp	x8, 0 <stderr>
    392c:	ldr	x0, [x8]
    3930:	adrp	x1, 0 <BZ2_bsInitWrite>
    3934:	add	x1, x1, #0x0
    3938:	bl	0 <fprintf>
    393c:	ldr	x0, [sp, #96]
    3940:	b	74 <BZ2_compressBlock+0x68>
    3944:	adrp	x8, 0 <stderr>
    3948:	ldr	w2, [x18, #108]
    394c:	ldr	x0, [x8]
    3950:	ldr	w4, [x18, #124]
    3954:	adrp	x1, 0 <BZ2_bsInitWrite>
    3958:	add	x1, x1, #0x0
    395c:	bl	0 <fprintf>
    3960:	ldr	x18, [sp, #96]
    3964:	b	75c <BZ2_compressBlock+0x750>
    3968:	adrp	x10, 0 <stderr>
    396c:	ldr	x0, [x10]
    3970:	adrp	x1, 0 <BZ2_bsInitWrite>
    3974:	sub	w2, w9, w8
    3978:	add	x1, x1, #0x0
    397c:	bl	0 <fprintf>
    3980:	ldr	x4, [sp, #64]
    3984:	ldr	x0, [sp, #96]
    3988:	ldr	w9, [x22]
    398c:	ldr	w11, [x21]
    3990:	ldr	w10, [x24]
    3994:	b	1968 <BZ2_compressBlock+0x195c>
    3998:	adrp	x10, 0 <stderr>
    399c:	ldr	x0, [x10]
    39a0:	adrp	x1, 0 <BZ2_bsInitWrite>
    39a4:	sub	w2, w8, w9
    39a8:	add	x1, x1, #0x0
    39ac:	bl	0 <fprintf>
    39b0:	ldr	x4, [sp, #64]
    39b4:	ldr	x0, [sp, #96]
    39b8:	ldr	w8, [x22]
    39bc:	ldr	w11, [x21]
    39c0:	ldr	w10, [x24]
    39c4:	b	1b1c <BZ2_compressBlock+0x1b10>
    39c8:	adrp	x9, 0 <stderr>
    39cc:	ldr	x0, [x9]
    39d0:	adrp	x1, 0 <BZ2_bsInitWrite>
    39d4:	sub	w2, w23, w8
    39d8:	add	x1, x1, #0x0
    39dc:	bl	0 <fprintf>
    39e0:	ldr	x0, [sp, #96]
    39e4:	ldr	w23, [x22]
    39e8:	b	1d00 <BZ2_compressBlock+0x1cf4>
    39ec:	ldr	w8, [x22]
    39f0:	ldr	x0, [x19]
    39f4:	adrp	x1, 0 <BZ2_bsInitWrite>
    39f8:	add	x1, x1, #0x0
    39fc:	sub	w2, w8, w23
    3a00:	bl	0 <fprintf>
    3a04:	ldr	x0, [sp, #96]
    3a08:	b	3658 <BZ2_compressBlock+0x364c>
    3a0c:	adrp	x8, 0 <stderr>
    3a10:	ldr	x0, [x8]
    3a14:	ldr	w2, [x12, #652]
    3a18:	adrp	x1, 0 <BZ2_bsInitWrite>
    3a1c:	add	x1, x1, #0x0
    3a20:	bl	0 <fprintf>
    3a24:	ldr	x12, [sp, #96]
    3a28:	b	38c0 <BZ2_compressBlock+0x38b4>

0000000000003a2c <bsPutUInt32>:
    3a2c:	ldr	w11, [x0, #644]
    3a30:	lsr	w8, w1, #24
    3a34:	cmp	w11, #0x7
    3a38:	b.le	3a80 <bsPutUInt32+0x54>
    3a3c:	ldr	w10, [x0, #640]
    3a40:	ldr	w9, [x0, #116]
    3a44:	ldr	x11, [x0, #80]
    3a48:	lsr	w10, w10, #24
    3a4c:	strb	w10, [x11, w9, sxtw]
    3a50:	ldr	w9, [x0, #116]
    3a54:	ldr	w10, [x0, #640]
    3a58:	ldr	w12, [x0, #644]
    3a5c:	add	w9, w9, #0x1
    3a60:	lsl	w10, w10, #8
    3a64:	sub	w11, w12, #0x8
    3a68:	cmp	w12, #0xf
    3a6c:	str	w9, [x0, #116]
    3a70:	str	w10, [x0, #640]
    3a74:	str	w11, [x0, #644]
    3a78:	b.gt	3a44 <bsPutUInt32+0x18>
    3a7c:	b	3a84 <bsPutUInt32+0x58>
    3a80:	ldr	w10, [x0, #640]
    3a84:	mov	w9, #0x18                  	// #24
    3a88:	sub	w13, w9, w11
    3a8c:	lsl	w8, w8, w13
    3a90:	add	w12, w11, #0x8
    3a94:	orr	w10, w8, w10
    3a98:	ubfx	w8, w1, #16, #8
    3a9c:	str	w12, [x0, #644]
    3aa0:	str	w10, [x0, #640]
    3aa4:	tbnz	w11, #31, 3ae4 <bsPutUInt32+0xb8>
    3aa8:	ldr	w11, [x0, #116]
    3aac:	ldr	x12, [x0, #80]
    3ab0:	lsr	w10, w10, #24
    3ab4:	strb	w10, [x12, w11, sxtw]
    3ab8:	ldr	w10, [x0, #116]
    3abc:	ldr	w12, [x0, #640]
    3ac0:	ldr	w13, [x0, #644]
    3ac4:	add	w11, w10, #0x1
    3ac8:	lsl	w10, w12, #8
    3acc:	sub	w12, w13, #0x8
    3ad0:	cmp	w13, #0xf
    3ad4:	str	w11, [x0, #116]
    3ad8:	str	w10, [x0, #640]
    3adc:	str	w12, [x0, #644]
    3ae0:	b.gt	3aac <bsPutUInt32+0x80>
    3ae4:	sub	w9, w9, w12
    3ae8:	lsl	w8, w8, w9
    3aec:	add	w11, w12, #0x8
    3af0:	orr	w10, w8, w10
    3af4:	ubfx	w9, w1, #8, #8
    3af8:	str	w11, [x0, #644]
    3afc:	str	w10, [x0, #640]
    3b00:	tbnz	w12, #31, 3b40 <bsPutUInt32+0x114>
    3b04:	ldr	w8, [x0, #116]
    3b08:	ldr	x11, [x0, #80]
    3b0c:	lsr	w10, w10, #24
    3b10:	strb	w10, [x11, w8, sxtw]
    3b14:	ldr	w8, [x0, #116]
    3b18:	ldr	w10, [x0, #640]
    3b1c:	ldr	w12, [x0, #644]
    3b20:	add	w8, w8, #0x1
    3b24:	lsl	w10, w10, #8
    3b28:	sub	w11, w12, #0x8
    3b2c:	cmp	w12, #0xf
    3b30:	str	w8, [x0, #116]
    3b34:	str	w10, [x0, #640]
    3b38:	str	w11, [x0, #644]
    3b3c:	b.gt	3b08 <bsPutUInt32+0xdc>
    3b40:	mov	w8, #0x18                  	// #24
    3b44:	sub	w13, w8, w11
    3b48:	lsl	w9, w9, w13
    3b4c:	add	w12, w11, #0x8
    3b50:	orr	w10, w9, w10
    3b54:	and	w9, w1, #0xff
    3b58:	str	w12, [x0, #644]
    3b5c:	str	w10, [x0, #640]
    3b60:	tbnz	w11, #31, 3ba0 <bsPutUInt32+0x174>
    3b64:	ldr	w11, [x0, #116]
    3b68:	ldr	x12, [x0, #80]
    3b6c:	lsr	w10, w10, #24
    3b70:	strb	w10, [x12, w11, sxtw]
    3b74:	ldr	w10, [x0, #116]
    3b78:	ldr	w12, [x0, #640]
    3b7c:	ldr	w13, [x0, #644]
    3b80:	add	w11, w10, #0x1
    3b84:	lsl	w10, w12, #8
    3b88:	sub	w12, w13, #0x8
    3b8c:	cmp	w13, #0xf
    3b90:	str	w11, [x0, #116]
    3b94:	str	w10, [x0, #640]
    3b98:	str	w12, [x0, #644]
    3b9c:	b.gt	3b68 <bsPutUInt32+0x13c>
    3ba0:	sub	w8, w8, w12
    3ba4:	lsl	w8, w9, w8
    3ba8:	add	w11, w12, #0x8
    3bac:	orr	w8, w8, w10
    3bb0:	str	w8, [x0, #640]
    3bb4:	str	w11, [x0, #644]
    3bb8:	ret

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	sub	sp, sp, #0xf0
       4:	stp	x29, x30, [sp, #144]
       8:	stp	x28, x27, [sp, #160]
       c:	stp	x26, x25, [sp, #176]
      10:	stp	x24, x23, [sp, #192]
      14:	stp	x22, x21, [sp, #208]
      18:	stp	x20, x19, [sp, #224]
      1c:	add	x29, sp, #0x90
      20:	ldr	w8, [x0, #8]
      24:	ldr	x27, [x0]
      28:	mov	w9, #0xfa24                	// #64036
      2c:	mov	x21, x0
      30:	subs	w8, w8, #0xa
      34:	add	x22, x0, x9
      38:	b.ne	b0 <BZ2_decompress+0xb0>  // b.any
      3c:	mov	x20, xzr
      40:	mov	x3, xzr
      44:	mov	w24, wzr
      48:	mov	w2, wzr
      4c:	mov	w14, wzr
      50:	mov	w7, wzr
      54:	mov	w1, wzr
      58:	mov	w28, wzr
      5c:	mov	w4, wzr
      60:	mov	w30, wzr
      64:	mov	w18, wzr
      68:	mov	w26, wzr
      6c:	mov	w5, wzr
      70:	mov	w16, wzr
      74:	mov	w15, wzr
      78:	mov	w19, wzr
      7c:	mov	w25, wzr
      80:	mov	w6, wzr
      84:	mov	w17, wzr
      88:	mov	w23, wzr
      8c:	mov	w10, wzr
      90:	movi	v0.2d, #0x0
      94:	stur	xzr, [x29, #-24]
      98:	stur	xzr, [x29, #-36]
      9c:	stur	q0, [x22, #92]
      a0:	stp	q0, q0, [x22, #64]
      a4:	stp	q0, q0, [x22, #32]
      a8:	stp	q0, q0, [x22]
      ac:	b	f4 <BZ2_decompress+0xf4>
      b0:	ldp	w9, w15, [x22, #24]
      b4:	ldp	w10, w23, [x22]
      b8:	ldp	w17, w6, [x22, #8]
      bc:	ldp	w25, w19, [x22, #16]
      c0:	stur	w9, [x29, #-32]
      c4:	ldp	w28, w9, [x22, #56]
      c8:	ldp	w16, w5, [x22, #32]
      cc:	ldp	w26, w18, [x22, #40]
      d0:	ldp	w30, w4, [x22, #48]
      d4:	stur	w9, [x29, #-36]
      d8:	ldur	x9, [x22, #84]
      dc:	ldp	w1, w7, [x22, #64]
      e0:	ldp	w14, w2, [x22, #72]
      e4:	ldr	w24, [x22, #80]
      e8:	ldur	x3, [x22, #92]
      ec:	ldur	x20, [x22, #100]
      f0:	stur	x9, [x29, #-24]
      f4:	cmp	w8, #0x28
      f8:	stur	x10, [x29, #-16]
      fc:	b.hi	134 <BZ2_decompress+0x134>  // b.pmore
     100:	adrp	x10, 0 <BZ2_decompress>
     104:	add	x10, x10, #0x0
     108:	adr	x9, 118 <BZ2_decompress+0x118>
     10c:	ldrh	w11, [x10, x8, lsl #1]
     110:	add	x9, x9, x11, lsl #2
     114:	br	x9
     118:	ldr	w8, [x21, #36]
     11c:	mov	w9, #0xa                   	// #10
     120:	str	w9, [x21, #8]
     124:	cmp	w8, #0x8
     128:	b.lt	364 <BZ2_decompress+0x364>  // b.tstop
     12c:	ldr	w9, [x21, #32]
     130:	b	3b8 <BZ2_decompress+0x3b8>
     134:	mov	w0, #0xfa1                 	// #4001
     138:	str	w6, [sp, #28]
     13c:	stur	w4, [x29, #-56]
     140:	str	x20, [sp, #56]
     144:	str	w24, [sp, #72]
     148:	stur	w14, [x29, #-40]
     14c:	stur	w19, [x29, #-60]
     150:	stur	x2, [x29, #-48]
     154:	str	w23, [sp, #64]
     158:	str	w28, [sp, #48]
     15c:	stur	w25, [x29, #-52]
     160:	mov	w25, w5
     164:	str	x26, [sp, #40]
     168:	mov	x26, x3
     16c:	mov	w24, w7
     170:	mov	w19, w30
     174:	mov	x20, x1
     178:	mov	w21, w17
     17c:	mov	x23, x18
     180:	mov	x28, x15
     184:	mov	w27, w16
     188:	bl	0 <BZ2_bz__AssertH__fail>
     18c:	mov	w0, #0xfa2                 	// #4002
     190:	bl	0 <BZ2_bz__AssertH__fail>
     194:	mov	x15, x28
     198:	mov	x18, x23
     19c:	mov	x1, x20
     1a0:	mov	w30, w19
     1a4:	mov	w7, w24
     1a8:	mov	x3, x26
     1ac:	ldr	x26, [sp, #40]
     1b0:	mov	w5, w25
     1b4:	ldp	w4, w25, [x29, #-56]
     1b8:	ldr	w28, [sp, #48]
     1bc:	ldr	w23, [sp, #64]
     1c0:	ldur	x2, [x29, #-48]
     1c4:	ldur	w19, [x29, #-60]
     1c8:	ldur	w14, [x29, #-40]
     1cc:	ldr	w24, [sp, #72]
     1d0:	ldr	x20, [sp, #56]
     1d4:	ldr	w6, [sp, #28]
     1d8:	mov	w16, w27
     1dc:	mov	w17, w21
     1e0:	b	15c0 <BZ2_decompress+0x15c0>
     1e4:	ldr	w8, [x21, #36]
     1e8:	b	3d0 <BZ2_decompress+0x3d0>
     1ec:	ldr	w8, [x21, #36]
     1f0:	b	454 <BZ2_decompress+0x454>
     1f4:	ldr	w8, [x21, #36]
     1f8:	b	4d8 <BZ2_decompress+0x4d8>
     1fc:	ldr	w8, [x21, #36]
     200:	b	704 <BZ2_decompress+0x704>
     204:	ldr	w8, [x21, #36]
     208:	b	7a4 <BZ2_decompress+0x7a4>
     20c:	ldr	w8, [x21, #36]
     210:	b	82c <BZ2_decompress+0x82c>
     214:	ldr	w8, [x21, #36]
     218:	b	8b4 <BZ2_decompress+0x8b4>
     21c:	ldr	w8, [x21, #36]
     220:	b	93c <BZ2_decompress+0x93c>
     224:	ldr	w8, [x21, #36]
     228:	b	a70 <BZ2_decompress+0xa70>
     22c:	ldr	w8, [x21, #36]
     230:	b	af8 <BZ2_decompress+0xaf8>
     234:	ldr	w8, [x21, #36]
     238:	b	b80 <BZ2_decompress+0xb80>
     23c:	ldr	w8, [x21, #36]
     240:	b	c08 <BZ2_decompress+0xc08>
     244:	ldr	w8, [x21, #36]
     248:	b	c94 <BZ2_decompress+0xc94>
     24c:	ldr	w8, [x21, #36]
     250:	b	d1c <BZ2_decompress+0xd1c>
     254:	ldr	w8, [x21, #36]
     258:	b	da4 <BZ2_decompress+0xda4>
     25c:	ldr	w8, [x21, #36]
     260:	mov	w9, #0x1f                  	// #31
     264:	cmp	w8, #0xf
     268:	str	w9, [x21, #8]
     26c:	b.lt	2e4 <BZ2_decompress+0x2e4>  // b.tstop
     270:	ldr	w10, [x21, #32]
     274:	b	340 <BZ2_decompress+0x340>
     278:	ldr	w8, [x21, #36]
     27c:	ldur	x0, [x29, #-16]
     280:	b	1f7c <BZ2_decompress+0x1f7c>
     284:	ldr	w8, [x21, #36]
     288:	b	13f4 <BZ2_decompress+0x13f4>
     28c:	ldr	w8, [x21, #36]
     290:	b	14a0 <BZ2_decompress+0x14a0>
     294:	ldr	w8, [x21, #36]
     298:	b	1530 <BZ2_decompress+0x1530>
     29c:	ldr	w8, [x21, #36]
     2a0:	b	71c <BZ2_decompress+0x71c>
     2a4:	ldr	w8, [x21, #36]
     2a8:	b	ec8 <BZ2_decompress+0xec8>
     2ac:	ldr	w8, [x21, #36]
     2b0:	b	f50 <BZ2_decompress+0xf50>
     2b4:	ldr	w8, [x21, #36]
     2b8:	b	fd8 <BZ2_decompress+0xfd8>
     2bc:	ldr	w8, [x21, #36]
     2c0:	b	1060 <BZ2_decompress+0x1060>
     2c4:	ldr	w8, [x21, #36]
     2c8:	b	10ec <BZ2_decompress+0x10ec>
     2cc:	ldr	w8, [x21, #36]
     2d0:	b	1174 <BZ2_decompress+0x1174>
     2d4:	ldr	w8, [x21, #36]
     2d8:	b	11fc <BZ2_decompress+0x11fc>
     2dc:	ldr	w8, [x21, #36]
     2e0:	b	1284 <BZ2_decompress+0x1284>
     2e4:	ldr	x9, [x21]
     2e8:	ldr	w10, [x9, #8]
     2ec:	sub	w11, w10, #0x1
     2f0:	cmn	w11, #0x1
     2f4:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     2f8:	ldr	x12, [x9]
     2fc:	ldr	w13, [x21, #32]
     300:	add	w8, w8, #0x8
     304:	ldrb	w10, [x12], #1
     308:	bfi	w10, w13, #8, #24
     30c:	stp	w10, w8, [x21, #32]
     310:	ldr	w13, [x9, #12]
     314:	str	x12, [x9]
     318:	adds	w12, w13, #0x1
     31c:	stp	w11, w12, [x9, #8]
     320:	b.cc	330 <BZ2_decompress+0x330>  // b.lo, b.ul, b.last
     324:	ldr	w12, [x9, #16]
     328:	add	w12, w12, #0x1
     32c:	str	w12, [x9, #16]
     330:	sub	w12, w8, #0x8
     334:	cmp	w12, #0x6
     338:	sub	w11, w11, #0x1
     33c:	b.le	2f0 <BZ2_decompress+0x2f0>
     340:	sub	w8, w8, #0xf
     344:	lsr	w10, w10, w8
     348:	mov	w9, wzr
     34c:	ands	w19, w10, #0x7fff
     350:	str	w8, [x21, #36]
     354:	b.ne	194c <BZ2_decompress+0x194c>  // b.any
     358:	mov	w0, #0xfffffffc            	// #-4
     35c:	mov	w19, w9
     360:	b	15cc <BZ2_decompress+0x15cc>
     364:	ldr	w9, [x27, #8]
     368:	sub	w10, w9, #0x1
     36c:	cmn	w10, #0x1
     370:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     374:	ldr	x11, [x27]
     378:	ldr	w12, [x21, #32]
     37c:	add	w8, w8, #0x8
     380:	ldrb	w9, [x11], #1
     384:	bfi	w9, w12, #8, #24
     388:	stp	w9, w8, [x21, #32]
     38c:	ldr	w12, [x27, #12]
     390:	str	x11, [x27]
     394:	adds	w11, w12, #0x1
     398:	stp	w10, w11, [x27, #8]
     39c:	b.cc	3ac <BZ2_decompress+0x3ac>  // b.lo, b.ul, b.last
     3a0:	ldr	w11, [x27, #16]
     3a4:	add	w11, w11, #0x1
     3a8:	str	w11, [x27, #16]
     3ac:	cmp	w8, #0x8
     3b0:	sub	w10, w10, #0x1
     3b4:	b.mi	36c <BZ2_decompress+0x36c>  // b.first
     3b8:	sub	w8, w8, #0x8
     3bc:	lsr	w9, w9, w8
     3c0:	and	w9, w9, #0xff
     3c4:	cmp	w9, #0x42
     3c8:	str	w8, [x21, #36]
     3cc:	b.ne	560 <BZ2_decompress+0x560>  // b.any
     3d0:	mov	w9, #0xb                   	// #11
     3d4:	cmp	w8, #0x8
     3d8:	str	w9, [x21, #8]
     3dc:	b.lt	3e8 <BZ2_decompress+0x3e8>  // b.tstop
     3e0:	ldr	w9, [x21, #32]
     3e4:	b	43c <BZ2_decompress+0x43c>
     3e8:	ldr	w9, [x27, #8]
     3ec:	sub	w10, w9, #0x1
     3f0:	cmn	w10, #0x1
     3f4:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     3f8:	ldr	x11, [x27]
     3fc:	ldr	w12, [x21, #32]
     400:	add	w8, w8, #0x8
     404:	ldrb	w9, [x11], #1
     408:	bfi	w9, w12, #8, #24
     40c:	stp	w9, w8, [x21, #32]
     410:	ldr	w12, [x27, #12]
     414:	str	x11, [x27]
     418:	adds	w11, w12, #0x1
     41c:	stp	w10, w11, [x27, #8]
     420:	b.cc	430 <BZ2_decompress+0x430>  // b.lo, b.ul, b.last
     424:	ldr	w11, [x27, #16]
     428:	add	w11, w11, #0x1
     42c:	str	w11, [x27, #16]
     430:	cmp	w8, #0x8
     434:	sub	w10, w10, #0x1
     438:	b.mi	3f0 <BZ2_decompress+0x3f0>  // b.first
     43c:	sub	w8, w8, #0x8
     440:	lsr	w9, w9, w8
     444:	and	w9, w9, #0xff
     448:	cmp	w9, #0x5a
     44c:	str	w8, [x21, #36]
     450:	b.ne	560 <BZ2_decompress+0x560>  // b.any
     454:	mov	w9, #0xc                   	// #12
     458:	cmp	w8, #0x8
     45c:	str	w9, [x21, #8]
     460:	b.lt	46c <BZ2_decompress+0x46c>  // b.tstop
     464:	ldr	w9, [x21, #32]
     468:	b	4c0 <BZ2_decompress+0x4c0>
     46c:	ldr	w9, [x27, #8]
     470:	sub	w10, w9, #0x1
     474:	cmn	w10, #0x1
     478:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     47c:	ldr	x11, [x27]
     480:	ldr	w12, [x21, #32]
     484:	add	w8, w8, #0x8
     488:	ldrb	w9, [x11], #1
     48c:	bfi	w9, w12, #8, #24
     490:	stp	w9, w8, [x21, #32]
     494:	ldr	w12, [x27, #12]
     498:	str	x11, [x27]
     49c:	adds	w11, w12, #0x1
     4a0:	stp	w10, w11, [x27, #8]
     4a4:	b.cc	4b4 <BZ2_decompress+0x4b4>  // b.lo, b.ul, b.last
     4a8:	ldr	w11, [x27, #16]
     4ac:	add	w11, w11, #0x1
     4b0:	str	w11, [x27, #16]
     4b4:	cmp	w8, #0x8
     4b8:	sub	w10, w10, #0x1
     4bc:	b.mi	474 <BZ2_decompress+0x474>  // b.first
     4c0:	sub	w8, w8, #0x8
     4c4:	lsr	w9, w9, w8
     4c8:	and	w9, w9, #0xff
     4cc:	cmp	w9, #0x68
     4d0:	str	w8, [x21, #36]
     4d4:	b.ne	560 <BZ2_decompress+0x560>  // b.any
     4d8:	mov	w9, #0xd                   	// #13
     4dc:	cmp	w8, #0x8
     4e0:	str	w9, [x21, #8]
     4e4:	b.lt	4f0 <BZ2_decompress+0x4f0>  // b.tstop
     4e8:	ldr	w9, [x21, #32]
     4ec:	b	544 <BZ2_decompress+0x544>
     4f0:	ldr	w9, [x27, #8]
     4f4:	sub	w10, w9, #0x1
     4f8:	cmn	w10, #0x1
     4fc:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     500:	ldr	x11, [x27]
     504:	ldr	w12, [x21, #32]
     508:	add	w8, w8, #0x8
     50c:	ldrb	w9, [x11], #1
     510:	bfi	w9, w12, #8, #24
     514:	stp	w9, w8, [x21, #32]
     518:	ldr	w12, [x27, #12]
     51c:	str	x11, [x27]
     520:	adds	w11, w12, #0x1
     524:	stp	w10, w11, [x27, #8]
     528:	b.cc	538 <BZ2_decompress+0x538>  // b.lo, b.ul, b.last
     52c:	ldr	w11, [x27, #16]
     530:	add	w11, w11, #0x1
     534:	str	w11, [x27, #16]
     538:	cmp	w8, #0x8
     53c:	sub	w10, w10, #0x1
     540:	b.mi	4f8 <BZ2_decompress+0x4f8>  // b.first
     544:	sub	w10, w8, #0x8
     548:	lsr	w8, w9, w10
     54c:	and	w8, w8, #0xff
     550:	sub	w9, w8, #0x31
     554:	cmp	w9, #0x8
     558:	stp	w10, w8, [x21, #36]
     55c:	b.ls	568 <BZ2_decompress+0x568>  // b.plast
     560:	mov	w0, #0xfffffffb            	// #-5
     564:	b	15cc <BZ2_decompress+0x15cc>
     568:	sub	w9, w8, #0x30
     56c:	stp	w7, w16, [sp, #20]
     570:	stp	x3, x15, [sp, #64]
     574:	stp	w30, w17, [sp, #12]
     578:	str	w9, [x21, #40]
     57c:	ldrb	w10, [x21, #44]
     580:	ldr	x8, [x27, #56]
     584:	ldr	x0, [x27, #72]
     588:	stur	w25, [x29, #-52]
     58c:	mov	w25, w6
     590:	stur	w14, [x29, #-40]
     594:	stur	x2, [x29, #-48]
     598:	str	x18, [sp, #48]
     59c:	str	x1, [sp, #32]
     5a0:	str	w5, [sp, #28]
     5a4:	stur	w4, [x29, #-56]
     5a8:	cbz	w10, 62c <BZ2_decompress+0x62c>
     5ac:	mov	w10, #0xd40                 	// #3392
     5b0:	movk	w10, #0x3, lsl #16
     5b4:	mul	w1, w9, w10
     5b8:	mov	w2, #0x1                   	// #1
     5bc:	blr	x8
     5c0:	ldr	w8, [x21, #40]
     5c4:	str	x0, [x21, #3160]
     5c8:	ldr	x9, [x27, #56]
     5cc:	ldr	x0, [x27, #72]
     5d0:	mov	w10, #0x86a0                	// #34464
     5d4:	movk	w10, #0x1, lsl #16
     5d8:	mul	w8, w8, w10
     5dc:	asr	w1, w8, #1
     5e0:	mov	w2, #0x1                   	// #1
     5e4:	blr	x9
     5e8:	mov	x8, x0
     5ec:	str	x0, [x21, #3168]
     5f0:	mov	w0, #0xfffffffd            	// #-3
     5f4:	cbz	x8, 131c <BZ2_decompress+0x131c>
     5f8:	ldr	x8, [x21, #3160]
     5fc:	mov	w6, w25
     600:	ldp	w4, w25, [x29, #-56]
     604:	ldp	w16, w5, [sp, #24]
     608:	ldp	x3, x15, [sp, #64]
     60c:	ldp	w17, w7, [sp, #16]
     610:	ldr	w30, [sp, #12]
     614:	ldr	x1, [sp, #32]
     618:	ldr	x18, [sp, #48]
     61c:	ldur	x2, [x29, #-48]
     620:	ldur	w14, [x29, #-40]
     624:	cbnz	x8, 670 <BZ2_decompress+0x670>
     628:	b	15cc <BZ2_decompress+0x15cc>
     62c:	mov	w10, #0x1a80                	// #6784
     630:	movk	w10, #0x6, lsl #16
     634:	mul	w1, w9, w10
     638:	mov	w2, #0x1                   	// #1
     63c:	blr	x8
     640:	str	x0, [x21, #3152]
     644:	mov	w6, w25
     648:	ldp	w4, w25, [x29, #-56]
     64c:	ldp	w16, w5, [sp, #24]
     650:	ldp	x3, x15, [sp, #64]
     654:	ldp	w17, w7, [sp, #16]
     658:	ldr	w30, [sp, #12]
     65c:	ldr	x1, [sp, #32]
     660:	ldr	x18, [sp, #48]
     664:	ldur	x2, [x29, #-48]
     668:	ldur	w14, [x29, #-40]
     66c:	cbz	x0, 1348 <BZ2_decompress+0x1348>
     670:	ldr	w8, [x21, #36]
     674:	mov	w9, #0xe                   	// #14
     678:	str	w9, [x21, #8]
     67c:	cmp	w8, #0x8
     680:	b.lt	68c <BZ2_decompress+0x68c>  // b.tstop
     684:	ldr	w10, [x21, #32]
     688:	b	6e4 <BZ2_decompress+0x6e4>
     68c:	ldr	x9, [x21]
     690:	ldr	w10, [x9, #8]
     694:	sub	w11, w10, #0x1
     698:	cmn	w11, #0x1
     69c:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     6a0:	ldr	x12, [x9]
     6a4:	ldr	w13, [x21, #32]
     6a8:	add	w8, w8, #0x8
     6ac:	ldrb	w10, [x12], #1
     6b0:	bfi	w10, w13, #8, #24
     6b4:	stp	w10, w8, [x21, #32]
     6b8:	ldr	w13, [x9, #12]
     6bc:	str	x12, [x9]
     6c0:	adds	w12, w13, #0x1
     6c4:	stp	w11, w12, [x9, #8]
     6c8:	b.cc	6d8 <BZ2_decompress+0x6d8>  // b.lo, b.ul, b.last
     6cc:	ldr	w12, [x9, #16]
     6d0:	add	w12, w12, #0x1
     6d4:	str	w12, [x9, #16]
     6d8:	cmp	w8, #0x8
     6dc:	sub	w11, w11, #0x1
     6e0:	b.mi	698 <BZ2_decompress+0x698>  // b.first
     6e4:	sub	w8, w8, #0x8
     6e8:	lsr	w9, w10, w8
     6ec:	and	w9, w9, #0xff
     6f0:	cmp	w9, #0x17
     6f4:	str	w8, [x21, #36]
     6f8:	b.eq	71c <BZ2_decompress+0x71c>  // b.none
     6fc:	cmp	w9, #0x31
     700:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     704:	mov	w9, #0xf                   	// #15
     708:	cmp	w8, #0x8
     70c:	str	w9, [x21, #8]
     710:	b.lt	734 <BZ2_decompress+0x734>  // b.tstop
     714:	ldr	w10, [x21, #32]
     718:	b	78c <BZ2_decompress+0x78c>
     71c:	mov	w9, #0x2a                  	// #42
     720:	cmp	w8, #0x8
     724:	str	w9, [x21, #8]
     728:	b.lt	e58 <BZ2_decompress+0xe58>  // b.tstop
     72c:	ldr	w10, [x21, #32]
     730:	b	eb0 <BZ2_decompress+0xeb0>
     734:	ldr	x9, [x21]
     738:	ldr	w10, [x9, #8]
     73c:	sub	w11, w10, #0x1
     740:	cmn	w11, #0x1
     744:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     748:	ldr	x12, [x9]
     74c:	ldr	w13, [x21, #32]
     750:	add	w8, w8, #0x8
     754:	ldrb	w10, [x12], #1
     758:	bfi	w10, w13, #8, #24
     75c:	stp	w10, w8, [x21, #32]
     760:	ldr	w13, [x9, #12]
     764:	str	x12, [x9]
     768:	adds	w12, w13, #0x1
     76c:	stp	w11, w12, [x9, #8]
     770:	b.cc	780 <BZ2_decompress+0x780>  // b.lo, b.ul, b.last
     774:	ldr	w12, [x9, #16]
     778:	add	w12, w12, #0x1
     77c:	str	w12, [x9, #16]
     780:	cmp	w8, #0x8
     784:	sub	w11, w11, #0x1
     788:	b.mi	740 <BZ2_decompress+0x740>  // b.first
     78c:	sub	w8, w8, #0x8
     790:	lsr	w9, w10, w8
     794:	and	w9, w9, #0xff
     798:	cmp	w9, #0x41
     79c:	str	w8, [x21, #36]
     7a0:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     7a4:	mov	w9, #0x10                  	// #16
     7a8:	cmp	w8, #0x8
     7ac:	str	w9, [x21, #8]
     7b0:	b.lt	7bc <BZ2_decompress+0x7bc>  // b.tstop
     7b4:	ldr	w10, [x21, #32]
     7b8:	b	814 <BZ2_decompress+0x814>
     7bc:	ldr	x9, [x21]
     7c0:	ldr	w10, [x9, #8]
     7c4:	sub	w11, w10, #0x1
     7c8:	cmn	w11, #0x1
     7cc:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     7d0:	ldr	x12, [x9]
     7d4:	ldr	w13, [x21, #32]
     7d8:	add	w8, w8, #0x8
     7dc:	ldrb	w10, [x12], #1
     7e0:	bfi	w10, w13, #8, #24
     7e4:	stp	w10, w8, [x21, #32]
     7e8:	ldr	w13, [x9, #12]
     7ec:	str	x12, [x9]
     7f0:	adds	w12, w13, #0x1
     7f4:	stp	w11, w12, [x9, #8]
     7f8:	b.cc	808 <BZ2_decompress+0x808>  // b.lo, b.ul, b.last
     7fc:	ldr	w12, [x9, #16]
     800:	add	w12, w12, #0x1
     804:	str	w12, [x9, #16]
     808:	cmp	w8, #0x8
     80c:	sub	w11, w11, #0x1
     810:	b.mi	7c8 <BZ2_decompress+0x7c8>  // b.first
     814:	sub	w8, w8, #0x8
     818:	lsr	w9, w10, w8
     81c:	and	w9, w9, #0xff
     820:	cmp	w9, #0x59
     824:	str	w8, [x21, #36]
     828:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     82c:	mov	w9, #0x11                  	// #17
     830:	cmp	w8, #0x8
     834:	str	w9, [x21, #8]
     838:	b.lt	844 <BZ2_decompress+0x844>  // b.tstop
     83c:	ldr	w10, [x21, #32]
     840:	b	89c <BZ2_decompress+0x89c>
     844:	ldr	x9, [x21]
     848:	ldr	w10, [x9, #8]
     84c:	sub	w11, w10, #0x1
     850:	cmn	w11, #0x1
     854:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     858:	ldr	x12, [x9]
     85c:	ldr	w13, [x21, #32]
     860:	add	w8, w8, #0x8
     864:	ldrb	w10, [x12], #1
     868:	bfi	w10, w13, #8, #24
     86c:	stp	w10, w8, [x21, #32]
     870:	ldr	w13, [x9, #12]
     874:	str	x12, [x9]
     878:	adds	w12, w13, #0x1
     87c:	stp	w11, w12, [x9, #8]
     880:	b.cc	890 <BZ2_decompress+0x890>  // b.lo, b.ul, b.last
     884:	ldr	w12, [x9, #16]
     888:	add	w12, w12, #0x1
     88c:	str	w12, [x9, #16]
     890:	cmp	w8, #0x8
     894:	sub	w11, w11, #0x1
     898:	b.mi	850 <BZ2_decompress+0x850>  // b.first
     89c:	sub	w8, w8, #0x8
     8a0:	lsr	w9, w10, w8
     8a4:	and	w9, w9, #0xff
     8a8:	cmp	w9, #0x26
     8ac:	str	w8, [x21, #36]
     8b0:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     8b4:	mov	w9, #0x12                  	// #18
     8b8:	cmp	w8, #0x8
     8bc:	str	w9, [x21, #8]
     8c0:	b.lt	8cc <BZ2_decompress+0x8cc>  // b.tstop
     8c4:	ldr	w10, [x21, #32]
     8c8:	b	924 <BZ2_decompress+0x924>
     8cc:	ldr	x9, [x21]
     8d0:	ldr	w10, [x9, #8]
     8d4:	sub	w11, w10, #0x1
     8d8:	cmn	w11, #0x1
     8dc:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     8e0:	ldr	x12, [x9]
     8e4:	ldr	w13, [x21, #32]
     8e8:	add	w8, w8, #0x8
     8ec:	ldrb	w10, [x12], #1
     8f0:	bfi	w10, w13, #8, #24
     8f4:	stp	w10, w8, [x21, #32]
     8f8:	ldr	w13, [x9, #12]
     8fc:	str	x12, [x9]
     900:	adds	w12, w13, #0x1
     904:	stp	w11, w12, [x9, #8]
     908:	b.cc	918 <BZ2_decompress+0x918>  // b.lo, b.ul, b.last
     90c:	ldr	w12, [x9, #16]
     910:	add	w12, w12, #0x1
     914:	str	w12, [x9, #16]
     918:	cmp	w8, #0x8
     91c:	sub	w11, w11, #0x1
     920:	b.mi	8d8 <BZ2_decompress+0x8d8>  // b.first
     924:	sub	w8, w8, #0x8
     928:	lsr	w9, w10, w8
     92c:	and	w9, w9, #0xff
     930:	cmp	w9, #0x53
     934:	str	w8, [x21, #36]
     938:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     93c:	mov	w9, #0x13                  	// #19
     940:	cmp	w8, #0x8
     944:	str	w9, [x21, #8]
     948:	b.lt	954 <BZ2_decompress+0x954>  // b.tstop
     94c:	ldr	w10, [x21, #32]
     950:	b	9ac <BZ2_decompress+0x9ac>
     954:	ldr	x9, [x21]
     958:	ldr	w10, [x9, #8]
     95c:	sub	w11, w10, #0x1
     960:	cmn	w11, #0x1
     964:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     968:	ldr	x12, [x9]
     96c:	ldr	w13, [x21, #32]
     970:	add	w8, w8, #0x8
     974:	ldrb	w10, [x12], #1
     978:	bfi	w10, w13, #8, #24
     97c:	stp	w10, w8, [x21, #32]
     980:	ldr	w13, [x9, #12]
     984:	str	x12, [x9]
     988:	adds	w12, w13, #0x1
     98c:	stp	w11, w12, [x9, #8]
     990:	b.cc	9a0 <BZ2_decompress+0x9a0>  // b.lo, b.ul, b.last
     994:	ldr	w12, [x9, #16]
     998:	add	w12, w12, #0x1
     99c:	str	w12, [x9, #16]
     9a0:	cmp	w8, #0x8
     9a4:	sub	w11, w11, #0x1
     9a8:	b.mi	960 <BZ2_decompress+0x960>  // b.first
     9ac:	sub	w8, w8, #0x8
     9b0:	lsr	w9, w10, w8
     9b4:	and	w9, w9, #0xff
     9b8:	cmp	w9, #0x59
     9bc:	str	w8, [x21, #36]
     9c0:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     9c4:	ldp	w8, w9, [x21, #48]
     9c8:	mov	x10, x2
     9cc:	add	w2, w8, #0x1
     9d0:	cmp	w9, #0x2
     9d4:	str	w2, [x21, #48]
     9d8:	b.ge	1350 <BZ2_decompress+0x1350>  // b.tcont
     9dc:	mov	x2, x10
     9e0:	str	wzr, [x21, #3176]
     9e4:	ldr	w8, [x21, #36]
     9e8:	mov	w9, #0x14                  	// #20
     9ec:	str	w9, [x21, #8]
     9f0:	cmp	w8, #0x8
     9f4:	b.lt	a00 <BZ2_decompress+0xa00>  // b.tstop
     9f8:	ldr	w9, [x21, #32]
     9fc:	b	a58 <BZ2_decompress+0xa58>
     a00:	ldr	x10, [x21]
     a04:	ldr	w9, [x10, #8]
     a08:	sub	w11, w9, #0x1
     a0c:	cmn	w11, #0x1
     a10:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     a14:	ldr	x12, [x10]
     a18:	ldr	w13, [x21, #32]
     a1c:	add	w8, w8, #0x8
     a20:	ldrb	w9, [x12], #1
     a24:	bfi	w9, w13, #8, #24
     a28:	stp	w9, w8, [x21, #32]
     a2c:	ldr	w13, [x10, #12]
     a30:	str	x12, [x10]
     a34:	adds	w12, w13, #0x1
     a38:	stp	w11, w12, [x10, #8]
     a3c:	b.cc	a4c <BZ2_decompress+0xa4c>  // b.lo, b.ul, b.last
     a40:	ldr	w12, [x10, #16]
     a44:	add	w12, w12, #0x1
     a48:	str	w12, [x10, #16]
     a4c:	cmp	w8, #0x8
     a50:	sub	w11, w11, #0x1
     a54:	b.mi	a0c <BZ2_decompress+0xa0c>  // b.first
     a58:	ldr	w10, [x21, #3176]
     a5c:	sub	w8, w8, #0x8
     a60:	lsr	w9, w9, w8
     a64:	str	w8, [x21, #36]
     a68:	bfi	w9, w10, #8, #24
     a6c:	str	w9, [x21, #3176]
     a70:	mov	w9, #0x15                  	// #21
     a74:	cmp	w8, #0x8
     a78:	str	w9, [x21, #8]
     a7c:	b.lt	a88 <BZ2_decompress+0xa88>  // b.tstop
     a80:	ldr	w9, [x21, #32]
     a84:	b	ae0 <BZ2_decompress+0xae0>
     a88:	ldr	x10, [x21]
     a8c:	ldr	w9, [x10, #8]
     a90:	sub	w11, w9, #0x1
     a94:	cmn	w11, #0x1
     a98:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     a9c:	ldr	x12, [x10]
     aa0:	ldr	w13, [x21, #32]
     aa4:	add	w8, w8, #0x8
     aa8:	ldrb	w9, [x12], #1
     aac:	bfi	w9, w13, #8, #24
     ab0:	stp	w9, w8, [x21, #32]
     ab4:	ldr	w13, [x10, #12]
     ab8:	str	x12, [x10]
     abc:	adds	w12, w13, #0x1
     ac0:	stp	w11, w12, [x10, #8]
     ac4:	b.cc	ad4 <BZ2_decompress+0xad4>  // b.lo, b.ul, b.last
     ac8:	ldr	w12, [x10, #16]
     acc:	add	w12, w12, #0x1
     ad0:	str	w12, [x10, #16]
     ad4:	cmp	w8, #0x8
     ad8:	sub	w11, w11, #0x1
     adc:	b.mi	a94 <BZ2_decompress+0xa94>  // b.first
     ae0:	ldr	w10, [x21, #3176]
     ae4:	sub	w8, w8, #0x8
     ae8:	lsr	w9, w9, w8
     aec:	str	w8, [x21, #36]
     af0:	bfi	w9, w10, #8, #24
     af4:	str	w9, [x21, #3176]
     af8:	mov	w9, #0x16                  	// #22
     afc:	cmp	w8, #0x8
     b00:	str	w9, [x21, #8]
     b04:	b.lt	b10 <BZ2_decompress+0xb10>  // b.tstop
     b08:	ldr	w9, [x21, #32]
     b0c:	b	b68 <BZ2_decompress+0xb68>
     b10:	ldr	x10, [x21]
     b14:	ldr	w9, [x10, #8]
     b18:	sub	w11, w9, #0x1
     b1c:	cmn	w11, #0x1
     b20:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     b24:	ldr	x12, [x10]
     b28:	ldr	w13, [x21, #32]
     b2c:	add	w8, w8, #0x8
     b30:	ldrb	w9, [x12], #1
     b34:	bfi	w9, w13, #8, #24
     b38:	stp	w9, w8, [x21, #32]
     b3c:	ldr	w13, [x10, #12]
     b40:	str	x12, [x10]
     b44:	adds	w12, w13, #0x1
     b48:	stp	w11, w12, [x10, #8]
     b4c:	b.cc	b5c <BZ2_decompress+0xb5c>  // b.lo, b.ul, b.last
     b50:	ldr	w12, [x10, #16]
     b54:	add	w12, w12, #0x1
     b58:	str	w12, [x10, #16]
     b5c:	cmp	w8, #0x8
     b60:	sub	w11, w11, #0x1
     b64:	b.mi	b1c <BZ2_decompress+0xb1c>  // b.first
     b68:	ldr	w10, [x21, #3176]
     b6c:	sub	w8, w8, #0x8
     b70:	lsr	w9, w9, w8
     b74:	str	w8, [x21, #36]
     b78:	bfi	w9, w10, #8, #24
     b7c:	str	w9, [x21, #3176]
     b80:	mov	w9, #0x17                  	// #23
     b84:	cmp	w8, #0x8
     b88:	str	w9, [x21, #8]
     b8c:	b.lt	b98 <BZ2_decompress+0xb98>  // b.tstop
     b90:	ldr	w9, [x21, #32]
     b94:	b	bf0 <BZ2_decompress+0xbf0>
     b98:	ldr	x10, [x21]
     b9c:	ldr	w9, [x10, #8]
     ba0:	sub	w11, w9, #0x1
     ba4:	cmn	w11, #0x1
     ba8:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     bac:	ldr	x12, [x10]
     bb0:	ldr	w13, [x21, #32]
     bb4:	add	w8, w8, #0x8
     bb8:	ldrb	w9, [x12], #1
     bbc:	bfi	w9, w13, #8, #24
     bc0:	stp	w9, w8, [x21, #32]
     bc4:	ldr	w13, [x10, #12]
     bc8:	str	x12, [x10]
     bcc:	adds	w12, w13, #0x1
     bd0:	stp	w11, w12, [x10, #8]
     bd4:	b.cc	be4 <BZ2_decompress+0xbe4>  // b.lo, b.ul, b.last
     bd8:	ldr	w12, [x10, #16]
     bdc:	add	w12, w12, #0x1
     be0:	str	w12, [x10, #16]
     be4:	cmp	w8, #0x8
     be8:	sub	w11, w11, #0x1
     bec:	b.mi	ba4 <BZ2_decompress+0xba4>  // b.first
     bf0:	ldr	w10, [x21, #3176]
     bf4:	sub	w8, w8, #0x8
     bf8:	lsr	w9, w9, w8
     bfc:	str	w8, [x21, #36]
     c00:	bfi	w9, w10, #8, #24
     c04:	str	w9, [x21, #3176]
     c08:	mov	w9, #0x18                  	// #24
     c0c:	cmp	w8, #0x1
     c10:	str	w9, [x21, #8]
     c14:	b.lt	c20 <BZ2_decompress+0xc20>  // b.tstop
     c18:	ldr	w10, [x21, #32]
     c1c:	b	c7c <BZ2_decompress+0xc7c>
     c20:	ldr	x9, [x21]
     c24:	ldr	w10, [x9, #8]
     c28:	sub	w11, w10, #0x1
     c2c:	cmn	w11, #0x1
     c30:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     c34:	ldr	x12, [x9]
     c38:	ldr	w13, [x21, #32]
     c3c:	add	w8, w8, #0x8
     c40:	ldrb	w10, [x12], #1
     c44:	bfi	w10, w13, #8, #24
     c48:	stp	w10, w8, [x21, #32]
     c4c:	ldr	w13, [x9, #12]
     c50:	str	x12, [x9]
     c54:	adds	w12, w13, #0x1
     c58:	stp	w11, w12, [x9, #8]
     c5c:	b.cc	c6c <BZ2_decompress+0xc6c>  // b.lo, b.ul, b.last
     c60:	ldr	w12, [x9, #16]
     c64:	add	w12, w12, #0x1
     c68:	str	w12, [x9, #16]
     c6c:	sub	w12, w8, #0x8
     c70:	cmn	w12, #0x8
     c74:	sub	w11, w11, #0x1
     c78:	b.le	c2c <BZ2_decompress+0xc2c>
     c7c:	sub	w8, w8, #0x1
     c80:	lsr	w9, w10, w8
     c84:	and	w9, w9, #0x1
     c88:	str	w8, [x21, #36]
     c8c:	strb	w9, [x21, #20]
     c90:	str	wzr, [x21, #56]
     c94:	mov	w9, #0x19                  	// #25
     c98:	cmp	w8, #0x8
     c9c:	str	w9, [x21, #8]
     ca0:	b.lt	cac <BZ2_decompress+0xcac>  // b.tstop
     ca4:	ldr	w9, [x21, #32]
     ca8:	b	d04 <BZ2_decompress+0xd04>
     cac:	ldr	x10, [x21]
     cb0:	ldr	w9, [x10, #8]
     cb4:	sub	w11, w9, #0x1
     cb8:	cmn	w11, #0x1
     cbc:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     cc0:	ldr	x12, [x10]
     cc4:	ldr	w13, [x21, #32]
     cc8:	add	w8, w8, #0x8
     ccc:	ldrb	w9, [x12], #1
     cd0:	bfi	w9, w13, #8, #24
     cd4:	stp	w9, w8, [x21, #32]
     cd8:	ldr	w13, [x10, #12]
     cdc:	str	x12, [x10]
     ce0:	adds	w12, w13, #0x1
     ce4:	stp	w11, w12, [x10, #8]
     ce8:	b.cc	cf8 <BZ2_decompress+0xcf8>  // b.lo, b.ul, b.last
     cec:	ldr	w12, [x10, #16]
     cf0:	add	w12, w12, #0x1
     cf4:	str	w12, [x10, #16]
     cf8:	cmp	w8, #0x8
     cfc:	sub	w11, w11, #0x1
     d00:	b.mi	cb8 <BZ2_decompress+0xcb8>  // b.first
     d04:	ldr	w10, [x21, #56]
     d08:	sub	w8, w8, #0x8
     d0c:	lsr	w9, w9, w8
     d10:	str	w8, [x21, #36]
     d14:	bfi	w9, w10, #8, #24
     d18:	str	w9, [x21, #56]
     d1c:	mov	w9, #0x1a                  	// #26
     d20:	cmp	w8, #0x8
     d24:	str	w9, [x21, #8]
     d28:	b.lt	d34 <BZ2_decompress+0xd34>  // b.tstop
     d2c:	ldr	w9, [x21, #32]
     d30:	b	d8c <BZ2_decompress+0xd8c>
     d34:	ldr	x10, [x21]
     d38:	ldr	w9, [x10, #8]
     d3c:	sub	w11, w9, #0x1
     d40:	cmn	w11, #0x1
     d44:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     d48:	ldr	x12, [x10]
     d4c:	ldr	w13, [x21, #32]
     d50:	add	w8, w8, #0x8
     d54:	ldrb	w9, [x12], #1
     d58:	bfi	w9, w13, #8, #24
     d5c:	stp	w9, w8, [x21, #32]
     d60:	ldr	w13, [x10, #12]
     d64:	str	x12, [x10]
     d68:	adds	w12, w13, #0x1
     d6c:	stp	w11, w12, [x10, #8]
     d70:	b.cc	d80 <BZ2_decompress+0xd80>  // b.lo, b.ul, b.last
     d74:	ldr	w12, [x10, #16]
     d78:	add	w12, w12, #0x1
     d7c:	str	w12, [x10, #16]
     d80:	cmp	w8, #0x8
     d84:	sub	w11, w11, #0x1
     d88:	b.mi	d40 <BZ2_decompress+0xd40>  // b.first
     d8c:	ldr	w10, [x21, #56]
     d90:	sub	w8, w8, #0x8
     d94:	lsr	w9, w9, w8
     d98:	str	w8, [x21, #36]
     d9c:	bfi	w9, w10, #8, #24
     da0:	str	w9, [x21, #56]
     da4:	mov	w9, #0x1b                  	// #27
     da8:	cmp	w8, #0x8
     dac:	str	w9, [x21, #8]
     db0:	b.lt	dbc <BZ2_decompress+0xdbc>  // b.tstop
     db4:	ldr	w10, [x21, #32]
     db8:	b	e14 <BZ2_decompress+0xe14>
     dbc:	ldr	x9, [x21]
     dc0:	ldr	w10, [x9, #8]
     dc4:	sub	w11, w10, #0x1
     dc8:	cmn	w11, #0x1
     dcc:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     dd0:	ldr	x12, [x9]
     dd4:	ldr	w13, [x21, #32]
     dd8:	add	w8, w8, #0x8
     ddc:	ldrb	w10, [x12], #1
     de0:	bfi	w10, w13, #8, #24
     de4:	stp	w10, w8, [x21, #32]
     de8:	ldr	w13, [x9, #12]
     dec:	str	x12, [x9]
     df0:	adds	w12, w13, #0x1
     df4:	stp	w11, w12, [x9, #8]
     df8:	b.cc	e08 <BZ2_decompress+0xe08>  // b.lo, b.ul, b.last
     dfc:	ldr	w12, [x9, #16]
     e00:	add	w12, w12, #0x1
     e04:	str	w12, [x9, #16]
     e08:	cmp	w8, #0x8
     e0c:	sub	w11, w11, #0x1
     e10:	b.mi	dc8 <BZ2_decompress+0xdc8>  // b.first
     e14:	ldr	w9, [x21, #56]
     e18:	sub	w11, w8, #0x8
     e1c:	lsr	w8, w10, w11
     e20:	str	w11, [x21, #36]
     e24:	bfi	w8, w9, #8, #24
     e28:	str	w8, [x21, #56]
     e2c:	tbnz	w8, #31, 15c8 <BZ2_decompress+0x15c8>
     e30:	ldr	w9, [x21, #40]
     e34:	mov	w10, #0x86a0                	// #34464
     e38:	movk	w10, #0x1, lsl #16
     e3c:	mul	w9, w9, w10
     e40:	mov	w10, #0xa                   	// #10
     e44:	orr	w9, w9, w10
     e48:	cmp	w8, w9
     e4c:	b.gt	15c8 <BZ2_decompress+0x15c8>
     e50:	mov	w0, wzr
     e54:	b	1634 <BZ2_decompress+0x1634>
     e58:	ldr	x9, [x21]
     e5c:	ldr	w10, [x9, #8]
     e60:	sub	w11, w10, #0x1
     e64:	cmn	w11, #0x1
     e68:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     e6c:	ldr	x12, [x9]
     e70:	ldr	w13, [x21, #32]
     e74:	add	w8, w8, #0x8
     e78:	ldrb	w10, [x12], #1
     e7c:	bfi	w10, w13, #8, #24
     e80:	stp	w10, w8, [x21, #32]
     e84:	ldr	w13, [x9, #12]
     e88:	str	x12, [x9]
     e8c:	adds	w12, w13, #0x1
     e90:	stp	w11, w12, [x9, #8]
     e94:	b.cc	ea4 <BZ2_decompress+0xea4>  // b.lo, b.ul, b.last
     e98:	ldr	w12, [x9, #16]
     e9c:	add	w12, w12, #0x1
     ea0:	str	w12, [x9, #16]
     ea4:	cmp	w8, #0x8
     ea8:	sub	w11, w11, #0x1
     eac:	b.mi	e64 <BZ2_decompress+0xe64>  // b.first
     eb0:	sub	w8, w8, #0x8
     eb4:	lsr	w9, w10, w8
     eb8:	and	w9, w9, #0xff
     ebc:	cmp	w9, #0x72
     ec0:	str	w8, [x21, #36]
     ec4:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     ec8:	mov	w9, #0x2b                  	// #43
     ecc:	cmp	w8, #0x8
     ed0:	str	w9, [x21, #8]
     ed4:	b.lt	ee0 <BZ2_decompress+0xee0>  // b.tstop
     ed8:	ldr	w10, [x21, #32]
     edc:	b	f38 <BZ2_decompress+0xf38>
     ee0:	ldr	x9, [x21]
     ee4:	ldr	w10, [x9, #8]
     ee8:	sub	w11, w10, #0x1
     eec:	cmn	w11, #0x1
     ef0:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     ef4:	ldr	x12, [x9]
     ef8:	ldr	w13, [x21, #32]
     efc:	add	w8, w8, #0x8
     f00:	ldrb	w10, [x12], #1
     f04:	bfi	w10, w13, #8, #24
     f08:	stp	w10, w8, [x21, #32]
     f0c:	ldr	w13, [x9, #12]
     f10:	str	x12, [x9]
     f14:	adds	w12, w13, #0x1
     f18:	stp	w11, w12, [x9, #8]
     f1c:	b.cc	f2c <BZ2_decompress+0xf2c>  // b.lo, b.ul, b.last
     f20:	ldr	w12, [x9, #16]
     f24:	add	w12, w12, #0x1
     f28:	str	w12, [x9, #16]
     f2c:	cmp	w8, #0x8
     f30:	sub	w11, w11, #0x1
     f34:	b.mi	eec <BZ2_decompress+0xeec>  // b.first
     f38:	sub	w8, w8, #0x8
     f3c:	lsr	w9, w10, w8
     f40:	and	w9, w9, #0xff
     f44:	cmp	w9, #0x45
     f48:	str	w8, [x21, #36]
     f4c:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     f50:	mov	w9, #0x2c                  	// #44
     f54:	cmp	w8, #0x8
     f58:	str	w9, [x21, #8]
     f5c:	b.lt	f68 <BZ2_decompress+0xf68>  // b.tstop
     f60:	ldr	w10, [x21, #32]
     f64:	b	fc0 <BZ2_decompress+0xfc0>
     f68:	ldr	x9, [x21]
     f6c:	ldr	w10, [x9, #8]
     f70:	sub	w11, w10, #0x1
     f74:	cmn	w11, #0x1
     f78:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
     f7c:	ldr	x12, [x9]
     f80:	ldr	w13, [x21, #32]
     f84:	add	w8, w8, #0x8
     f88:	ldrb	w10, [x12], #1
     f8c:	bfi	w10, w13, #8, #24
     f90:	stp	w10, w8, [x21, #32]
     f94:	ldr	w13, [x9, #12]
     f98:	str	x12, [x9]
     f9c:	adds	w12, w13, #0x1
     fa0:	stp	w11, w12, [x9, #8]
     fa4:	b.cc	fb4 <BZ2_decompress+0xfb4>  // b.lo, b.ul, b.last
     fa8:	ldr	w12, [x9, #16]
     fac:	add	w12, w12, #0x1
     fb0:	str	w12, [x9, #16]
     fb4:	cmp	w8, #0x8
     fb8:	sub	w11, w11, #0x1
     fbc:	b.mi	f74 <BZ2_decompress+0xf74>  // b.first
     fc0:	sub	w8, w8, #0x8
     fc4:	lsr	w9, w10, w8
     fc8:	and	w9, w9, #0xff
     fcc:	cmp	w9, #0x38
     fd0:	str	w8, [x21, #36]
     fd4:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
     fd8:	mov	w9, #0x2d                  	// #45
     fdc:	cmp	w8, #0x8
     fe0:	str	w9, [x21, #8]
     fe4:	b.lt	ff0 <BZ2_decompress+0xff0>  // b.tstop
     fe8:	ldr	w10, [x21, #32]
     fec:	b	1048 <BZ2_decompress+0x1048>
     ff0:	ldr	x9, [x21]
     ff4:	ldr	w10, [x9, #8]
     ff8:	sub	w11, w10, #0x1
     ffc:	cmn	w11, #0x1
    1000:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1004:	ldr	x12, [x9]
    1008:	ldr	w13, [x21, #32]
    100c:	add	w8, w8, #0x8
    1010:	ldrb	w10, [x12], #1
    1014:	bfi	w10, w13, #8, #24
    1018:	stp	w10, w8, [x21, #32]
    101c:	ldr	w13, [x9, #12]
    1020:	str	x12, [x9]
    1024:	adds	w12, w13, #0x1
    1028:	stp	w11, w12, [x9, #8]
    102c:	b.cc	103c <BZ2_decompress+0x103c>  // b.lo, b.ul, b.last
    1030:	ldr	w12, [x9, #16]
    1034:	add	w12, w12, #0x1
    1038:	str	w12, [x9, #16]
    103c:	cmp	w8, #0x8
    1040:	sub	w11, w11, #0x1
    1044:	b.mi	ffc <BZ2_decompress+0xffc>  // b.first
    1048:	sub	w8, w8, #0x8
    104c:	lsr	w9, w10, w8
    1050:	and	w9, w9, #0xff
    1054:	cmp	w9, #0x50
    1058:	str	w8, [x21, #36]
    105c:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
    1060:	mov	w9, #0x2e                  	// #46
    1064:	cmp	w8, #0x8
    1068:	str	w9, [x21, #8]
    106c:	b.lt	1078 <BZ2_decompress+0x1078>  // b.tstop
    1070:	ldr	w10, [x21, #32]
    1074:	b	10d0 <BZ2_decompress+0x10d0>
    1078:	ldr	x9, [x21]
    107c:	ldr	w10, [x9, #8]
    1080:	sub	w11, w10, #0x1
    1084:	cmn	w11, #0x1
    1088:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    108c:	ldr	x12, [x9]
    1090:	ldr	w13, [x21, #32]
    1094:	add	w8, w8, #0x8
    1098:	ldrb	w10, [x12], #1
    109c:	bfi	w10, w13, #8, #24
    10a0:	stp	w10, w8, [x21, #32]
    10a4:	ldr	w13, [x9, #12]
    10a8:	str	x12, [x9]
    10ac:	adds	w12, w13, #0x1
    10b0:	stp	w11, w12, [x9, #8]
    10b4:	b.cc	10c4 <BZ2_decompress+0x10c4>  // b.lo, b.ul, b.last
    10b8:	ldr	w12, [x9, #16]
    10bc:	add	w12, w12, #0x1
    10c0:	str	w12, [x9, #16]
    10c4:	cmp	w8, #0x8
    10c8:	sub	w11, w11, #0x1
    10cc:	b.mi	1084 <BZ2_decompress+0x1084>  // b.first
    10d0:	sub	w8, w8, #0x8
    10d4:	lsr	w9, w10, w8
    10d8:	and	w9, w9, #0xff
    10dc:	cmp	w9, #0x90
    10e0:	str	w8, [x21, #36]
    10e4:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
    10e8:	str	wzr, [x21, #3180]
    10ec:	mov	w9, #0x2f                  	// #47
    10f0:	cmp	w8, #0x8
    10f4:	str	w9, [x21, #8]
    10f8:	b.lt	1104 <BZ2_decompress+0x1104>  // b.tstop
    10fc:	ldr	w9, [x21, #32]
    1100:	b	115c <BZ2_decompress+0x115c>
    1104:	ldr	x10, [x21]
    1108:	ldr	w9, [x10, #8]
    110c:	sub	w11, w9, #0x1
    1110:	cmn	w11, #0x1
    1114:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1118:	ldr	x12, [x10]
    111c:	ldr	w13, [x21, #32]
    1120:	add	w8, w8, #0x8
    1124:	ldrb	w9, [x12], #1
    1128:	bfi	w9, w13, #8, #24
    112c:	stp	w9, w8, [x21, #32]
    1130:	ldr	w13, [x10, #12]
    1134:	str	x12, [x10]
    1138:	adds	w12, w13, #0x1
    113c:	stp	w11, w12, [x10, #8]
    1140:	b.cc	1150 <BZ2_decompress+0x1150>  // b.lo, b.ul, b.last
    1144:	ldr	w12, [x10, #16]
    1148:	add	w12, w12, #0x1
    114c:	str	w12, [x10, #16]
    1150:	cmp	w8, #0x8
    1154:	sub	w11, w11, #0x1
    1158:	b.mi	1110 <BZ2_decompress+0x1110>  // b.first
    115c:	ldr	w10, [x21, #3180]
    1160:	sub	w8, w8, #0x8
    1164:	lsr	w9, w9, w8
    1168:	str	w8, [x21, #36]
    116c:	bfi	w9, w10, #8, #24
    1170:	str	w9, [x21, #3180]
    1174:	mov	w9, #0x30                  	// #48
    1178:	cmp	w8, #0x8
    117c:	str	w9, [x21, #8]
    1180:	b.lt	118c <BZ2_decompress+0x118c>  // b.tstop
    1184:	ldr	w9, [x21, #32]
    1188:	b	11e4 <BZ2_decompress+0x11e4>
    118c:	ldr	x10, [x21]
    1190:	ldr	w9, [x10, #8]
    1194:	sub	w11, w9, #0x1
    1198:	cmn	w11, #0x1
    119c:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    11a0:	ldr	x12, [x10]
    11a4:	ldr	w13, [x21, #32]
    11a8:	add	w8, w8, #0x8
    11ac:	ldrb	w9, [x12], #1
    11b0:	bfi	w9, w13, #8, #24
    11b4:	stp	w9, w8, [x21, #32]
    11b8:	ldr	w13, [x10, #12]
    11bc:	str	x12, [x10]
    11c0:	adds	w12, w13, #0x1
    11c4:	stp	w11, w12, [x10, #8]
    11c8:	b.cc	11d8 <BZ2_decompress+0x11d8>  // b.lo, b.ul, b.last
    11cc:	ldr	w12, [x10, #16]
    11d0:	add	w12, w12, #0x1
    11d4:	str	w12, [x10, #16]
    11d8:	cmp	w8, #0x8
    11dc:	sub	w11, w11, #0x1
    11e0:	b.mi	1198 <BZ2_decompress+0x1198>  // b.first
    11e4:	ldr	w10, [x21, #3180]
    11e8:	sub	w8, w8, #0x8
    11ec:	lsr	w9, w9, w8
    11f0:	str	w8, [x21, #36]
    11f4:	bfi	w9, w10, #8, #24
    11f8:	str	w9, [x21, #3180]
    11fc:	mov	w9, #0x31                  	// #49
    1200:	cmp	w8, #0x8
    1204:	str	w9, [x21, #8]
    1208:	b.lt	1214 <BZ2_decompress+0x1214>  // b.tstop
    120c:	ldr	w9, [x21, #32]
    1210:	b	126c <BZ2_decompress+0x126c>
    1214:	ldr	x10, [x21]
    1218:	ldr	w9, [x10, #8]
    121c:	sub	w11, w9, #0x1
    1220:	cmn	w11, #0x1
    1224:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1228:	ldr	x12, [x10]
    122c:	ldr	w13, [x21, #32]
    1230:	add	w8, w8, #0x8
    1234:	ldrb	w9, [x12], #1
    1238:	bfi	w9, w13, #8, #24
    123c:	stp	w9, w8, [x21, #32]
    1240:	ldr	w13, [x10, #12]
    1244:	str	x12, [x10]
    1248:	adds	w12, w13, #0x1
    124c:	stp	w11, w12, [x10, #8]
    1250:	b.cc	1260 <BZ2_decompress+0x1260>  // b.lo, b.ul, b.last
    1254:	ldr	w12, [x10, #16]
    1258:	add	w12, w12, #0x1
    125c:	str	w12, [x10, #16]
    1260:	cmp	w8, #0x8
    1264:	sub	w11, w11, #0x1
    1268:	b.mi	1220 <BZ2_decompress+0x1220>  // b.first
    126c:	ldr	w10, [x21, #3180]
    1270:	sub	w8, w8, #0x8
    1274:	lsr	w9, w9, w8
    1278:	str	w8, [x21, #36]
    127c:	bfi	w9, w10, #8, #24
    1280:	str	w9, [x21, #3180]
    1284:	mov	w9, #0x32                  	// #50
    1288:	cmp	w8, #0x8
    128c:	str	w9, [x21, #8]
    1290:	b.lt	129c <BZ2_decompress+0x129c>  // b.tstop
    1294:	ldr	w9, [x21, #32]
    1298:	b	12f4 <BZ2_decompress+0x12f4>
    129c:	ldr	x10, [x21]
    12a0:	ldr	w9, [x10, #8]
    12a4:	sub	w11, w9, #0x1
    12a8:	cmn	w11, #0x1
    12ac:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    12b0:	ldr	x12, [x10]
    12b4:	ldr	w13, [x21, #32]
    12b8:	add	w8, w8, #0x8
    12bc:	ldrb	w9, [x12], #1
    12c0:	bfi	w9, w13, #8, #24
    12c4:	stp	w9, w8, [x21, #32]
    12c8:	ldr	w13, [x10, #12]
    12cc:	str	x12, [x10]
    12d0:	adds	w12, w13, #0x1
    12d4:	stp	w11, w12, [x10, #8]
    12d8:	b.cc	12e8 <BZ2_decompress+0x12e8>  // b.lo, b.ul, b.last
    12dc:	ldr	w12, [x10, #16]
    12e0:	add	w12, w12, #0x1
    12e4:	str	w12, [x10, #16]
    12e8:	cmp	w8, #0x8
    12ec:	sub	w11, w11, #0x1
    12f0:	b.mi	12a8 <BZ2_decompress+0x12a8>  // b.first
    12f4:	ldr	w10, [x21, #3180]
    12f8:	sub	w8, w8, #0x8
    12fc:	lsr	w9, w9, w8
    1300:	mov	w11, #0x1                   	// #1
    1304:	bfi	w9, w10, #8, #24
    1308:	str	w8, [x21, #36]
    130c:	str	w11, [x21, #8]
    1310:	str	w9, [x21, #3180]
    1314:	mov	w0, #0x4                   	// #4
    1318:	b	15cc <BZ2_decompress+0x15cc>
    131c:	mov	w6, w25
    1320:	ldp	w14, w9, [x29, #-40]
    1324:	ldp	w4, w25, [x29, #-56]
    1328:	ldp	w16, w5, [sp, #24]
    132c:	ldp	x3, x15, [sp, #64]
    1330:	ldp	w17, w7, [sp, #16]
    1334:	ldr	w30, [sp, #12]
    1338:	ldr	x1, [sp, #32]
    133c:	ldr	x18, [sp, #48]
    1340:	ldur	x2, [x29, #-48]
    1344:	b	15d0 <BZ2_decompress+0x15d0>
    1348:	mov	w0, #0xfffffffd            	// #-3
    134c:	b	15cc <BZ2_decompress+0x15cc>
    1350:	adrp	x8, 0 <stderr>
    1354:	ldr	x0, [x8]
    1358:	str	x1, [sp, #32]
    135c:	adrp	x1, 0 <BZ2_decompress>
    1360:	add	x1, x1, #0x0
    1364:	str	w24, [sp, #72]
    1368:	stur	w14, [x29, #-40]
    136c:	stur	x10, [x29, #-48]
    1370:	str	w23, [sp, #64]
    1374:	str	w28, [sp, #48]
    1378:	stur	w25, [x29, #-52]
    137c:	mov	w25, w6
    1380:	mov	w27, w4
    1384:	str	w5, [sp, #28]
    1388:	mov	x24, x3
    138c:	stur	w19, [x29, #-60]
    1390:	stp	w7, w16, [sp, #20]
    1394:	str	x26, [sp, #40]
    1398:	mov	w26, w30
    139c:	mov	w28, w17
    13a0:	mov	x23, x18
    13a4:	mov	x19, x15
    13a8:	bl	0 <fprintf>
    13ac:	ldp	w7, w16, [sp, #20]
    13b0:	mov	x15, x19
    13b4:	mov	x18, x23
    13b8:	mov	w17, w28
    13bc:	mov	w30, w26
    13c0:	ldp	x1, x26, [sp, #32]
    13c4:	ldur	w19, [x29, #-60]
    13c8:	mov	x3, x24
    13cc:	ldr	w5, [sp, #28]
    13d0:	mov	w6, w25
    13d4:	ldur	w25, [x29, #-52]
    13d8:	ldr	w28, [sp, #48]
    13dc:	ldr	w23, [sp, #64]
    13e0:	ldur	x10, [x29, #-48]
    13e4:	ldur	w14, [x29, #-40]
    13e8:	ldr	w24, [sp, #72]
    13ec:	mov	w4, w27
    13f0:	b	9dc <BZ2_decompress+0x9dc>
    13f4:	mov	w9, #0x25                  	// #37
    13f8:	cmp	w8, #0x1
    13fc:	str	w9, [x21, #8]
    1400:	b.lt	140c <BZ2_decompress+0x140c>  // b.tstop
    1404:	ldr	w10, [x21, #32]
    1408:	b	1468 <BZ2_decompress+0x1468>
    140c:	ldr	x9, [x21]
    1410:	ldr	w10, [x9, #8]
    1414:	sub	w11, w10, #0x1
    1418:	cmn	w11, #0x1
    141c:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1420:	ldr	x12, [x9]
    1424:	ldr	w13, [x21, #32]
    1428:	add	w8, w8, #0x8
    142c:	ldrb	w10, [x12], #1
    1430:	bfi	w10, w13, #8, #24
    1434:	stp	w10, w8, [x21, #32]
    1438:	ldr	w13, [x9, #12]
    143c:	str	x12, [x9]
    1440:	adds	w12, w13, #0x1
    1444:	stp	w11, w12, [x9, #8]
    1448:	b.cc	1458 <BZ2_decompress+0x1458>  // b.lo, b.ul, b.last
    144c:	ldr	w12, [x9, #16]
    1450:	add	w12, w12, #0x1
    1454:	str	w12, [x9, #16]
    1458:	sub	w12, w8, #0x8
    145c:	cmn	w12, #0x8
    1460:	sub	w11, w11, #0x1
    1464:	b.le	1418 <BZ2_decompress+0x1418>
    1468:	sub	w8, w8, #0x1
    146c:	lsr	w9, w10, w8
    1470:	and	w14, w9, #0x1
    1474:	bfi	w9, w7, #1, #31
    1478:	str	w8, [x21, #36]
    147c:	mov	w7, w9
    1480:	cmp	w1, #0x14
    1484:	b.gt	15c8 <BZ2_decompress+0x15c8>
    1488:	ldur	x9, [x29, #-24]
    148c:	ldr	w9, [x9, w1, sxtw #2]
    1490:	cmp	w7, w9
    1494:	b.le	2020 <BZ2_decompress+0x2020>
    1498:	add	w1, w1, #0x1
    149c:	b	13f4 <BZ2_decompress+0x13f4>
    14a0:	mov	w9, #0x27                  	// #39
    14a4:	cmp	w8, #0x1
    14a8:	str	w9, [x21, #8]
    14ac:	b.lt	14b8 <BZ2_decompress+0x14b8>  // b.tstop
    14b0:	ldr	w10, [x21, #32]
    14b4:	b	1514 <BZ2_decompress+0x1514>
    14b8:	ldr	x9, [x21]
    14bc:	ldr	w10, [x9, #8]
    14c0:	sub	w11, w10, #0x1
    14c4:	cmn	w11, #0x1
    14c8:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    14cc:	ldr	x12, [x9]
    14d0:	ldr	w13, [x21, #32]
    14d4:	add	w8, w8, #0x8
    14d8:	ldrb	w10, [x12], #1
    14dc:	bfi	w10, w13, #8, #24
    14e0:	stp	w10, w8, [x21, #32]
    14e4:	ldr	w13, [x9, #12]
    14e8:	str	x12, [x9]
    14ec:	adds	w12, w13, #0x1
    14f0:	stp	w11, w12, [x9, #8]
    14f4:	b.cc	1504 <BZ2_decompress+0x1504>  // b.lo, b.ul, b.last
    14f8:	ldr	w12, [x9, #16]
    14fc:	add	w12, w12, #0x1
    1500:	str	w12, [x9, #16]
    1504:	sub	w12, w8, #0x8
    1508:	cmn	w12, #0x8
    150c:	sub	w11, w11, #0x1
    1510:	b.le	14c4 <BZ2_decompress+0x14c4>
    1514:	sub	w8, w8, #0x1
    1518:	lsr	w9, w10, w8
    151c:	and	w14, w9, #0x1
    1520:	bfi	w9, w7, #1, #31
    1524:	str	w8, [x21, #36]
    1528:	mov	w7, w9
    152c:	b	2a04 <BZ2_decompress+0x2a04>
    1530:	mov	w9, #0x29                  	// #41
    1534:	cmp	w8, #0x1
    1538:	str	w9, [x21, #8]
    153c:	b.lt	1548 <BZ2_decompress+0x1548>  // b.tstop
    1540:	ldr	w10, [x21, #32]
    1544:	b	15a4 <BZ2_decompress+0x15a4>
    1548:	ldr	x9, [x21]
    154c:	ldr	w10, [x9, #8]
    1550:	sub	w11, w10, #0x1
    1554:	cmn	w11, #0x1
    1558:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    155c:	ldr	x12, [x9]
    1560:	ldr	w13, [x21, #32]
    1564:	add	w8, w8, #0x8
    1568:	ldrb	w10, [x12], #1
    156c:	bfi	w10, w13, #8, #24
    1570:	stp	w10, w8, [x21, #32]
    1574:	ldr	w13, [x9, #12]
    1578:	str	x12, [x9]
    157c:	adds	w12, w13, #0x1
    1580:	stp	w11, w12, [x9, #8]
    1584:	b.cc	1594 <BZ2_decompress+0x1594>  // b.lo, b.ul, b.last
    1588:	ldr	w12, [x9, #16]
    158c:	add	w12, w12, #0x1
    1590:	str	w12, [x9, #16]
    1594:	sub	w12, w8, #0x8
    1598:	cmn	w12, #0x8
    159c:	sub	w11, w11, #0x1
    15a0:	b.le	1554 <BZ2_decompress+0x1554>
    15a4:	sub	w8, w8, #0x1
    15a8:	lsr	w9, w10, w8
    15ac:	and	w14, w9, #0x1
    15b0:	bfi	w9, w7, #1, #31
    15b4:	str	w8, [x21, #36]
    15b8:	mov	w7, w9
    15bc:	b	2350 <BZ2_decompress+0x2350>
    15c0:	mov	w0, wzr
    15c4:	b	15cc <BZ2_decompress+0x15cc>
    15c8:	mov	w0, #0xfffffffc            	// #-4
    15cc:	ldur	w9, [x29, #-36]
    15d0:	ldur	x8, [x29, #-16]
    15d4:	stp	w17, w6, [x22, #8]
    15d8:	stp	w25, w19, [x22, #16]
    15dc:	str	w24, [x22, #80]
    15e0:	stp	w8, w23, [x22]
    15e4:	ldur	w8, [x29, #-32]
    15e8:	stp	w16, w5, [x22, #32]
    15ec:	stp	w26, w18, [x22, #40]
    15f0:	stp	w30, w4, [x22, #48]
    15f4:	stp	w8, w15, [x22, #24]
    15f8:	stp	w28, w9, [x22, #56]
    15fc:	stp	w1, w7, [x22, #64]
    1600:	stp	w14, w2, [x22, #72]
    1604:	ldur	x8, [x29, #-24]
    1608:	stur	x3, [x22, #92]
    160c:	stur	x20, [x22, #100]
    1610:	stur	x8, [x22, #84]
    1614:	ldp	x20, x19, [sp, #224]
    1618:	ldp	x22, x21, [sp, #208]
    161c:	ldp	x24, x23, [sp, #192]
    1620:	ldp	x26, x25, [sp, #176]
    1624:	ldp	x28, x27, [sp, #160]
    1628:	ldp	x29, x30, [sp, #144]
    162c:	add	sp, sp, #0xf0
    1630:	ret
    1634:	cmp	w0, #0x10
    1638:	stur	x0, [x29, #-16]
    163c:	b.ge	16e0 <BZ2_decompress+0x16e0>  // b.tcont
    1640:	ldr	w8, [x21, #36]
    1644:	mov	w9, #0x1c                  	// #28
    1648:	str	w9, [x21, #8]
    164c:	cmp	w8, #0x1
    1650:	b.lt	1660 <BZ2_decompress+0x1660>  // b.tstop
    1654:	ldr	w9, [x21, #32]
    1658:	ldur	x0, [x29, #-16]
    165c:	b	16c0 <BZ2_decompress+0x16c0>
    1660:	ldr	x10, [x21]
    1664:	ldur	x0, [x29, #-16]
    1668:	ldr	w9, [x10, #8]
    166c:	sub	w11, w9, #0x1
    1670:	cmn	w11, #0x1
    1674:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1678:	ldr	x12, [x10]
    167c:	ldr	w13, [x21, #32]
    1680:	add	w8, w8, #0x8
    1684:	ldrb	w9, [x12], #1
    1688:	bfi	w9, w13, #8, #24
    168c:	stp	w9, w8, [x21, #32]
    1690:	ldr	w13, [x10, #12]
    1694:	str	x12, [x10]
    1698:	adds	w12, w13, #0x1
    169c:	stp	w11, w12, [x10, #8]
    16a0:	b.cc	16b0 <BZ2_decompress+0x16b0>  // b.lo, b.ul, b.last
    16a4:	ldr	w12, [x10, #16]
    16a8:	add	w12, w12, #0x1
    16ac:	str	w12, [x10, #16]
    16b0:	sub	w12, w8, #0x8
    16b4:	cmn	w12, #0x8
    16b8:	sub	w11, w11, #0x1
    16bc:	b.le	1670 <BZ2_decompress+0x1670>
    16c0:	sub	w8, w8, #0x1
    16c4:	str	w8, [x21, #36]
    16c8:	lsr	w8, w9, w8
    16cc:	add	x10, x21, w0, sxtw
    16d0:	and	w8, w8, #0x1
    16d4:	strb	w8, [x10, #3452]
    16d8:	add	w0, w0, #0x1
    16dc:	b	1634 <BZ2_decompress+0x1634>
    16e0:	add	x0, x21, #0xc7c
    16e4:	mov	x8, x2
    16e8:	mov	w2, #0x100                 	// #256
    16ec:	str	x1, [sp, #32]
    16f0:	mov	w1, wzr
    16f4:	str	x20, [sp, #56]
    16f8:	mov	w20, w6
    16fc:	mov	w27, w4
    1700:	str	w24, [sp, #72]
    1704:	stur	w14, [x29, #-40]
    1708:	stur	x8, [x29, #-48]
    170c:	str	w23, [sp, #64]
    1710:	str	w28, [sp, #48]
    1714:	stur	w25, [x29, #-52]
    1718:	mov	w25, w5
    171c:	str	x26, [sp, #40]
    1720:	mov	x26, x3
    1724:	stur	w19, [x29, #-60]
    1728:	stp	w7, w16, [sp, #20]
    172c:	mov	w23, w30
    1730:	mov	w28, w17
    1734:	mov	x24, x18
    1738:	mov	x19, x15
    173c:	bl	0 <memset>
    1740:	ldp	w7, w16, [sp, #20]
    1744:	mov	x15, x19
    1748:	mov	x18, x24
    174c:	mov	w17, w28
    1750:	mov	w30, w23
    1754:	ldur	w19, [x29, #-60]
    1758:	mov	x3, x26
    175c:	ldp	x1, x26, [sp, #32]
    1760:	mov	w5, w25
    1764:	ldur	w25, [x29, #-52]
    1768:	ldr	w28, [sp, #48]
    176c:	ldr	w23, [sp, #64]
    1770:	ldur	x2, [x29, #-48]
    1774:	ldur	w14, [x29, #-40]
    1778:	ldr	w24, [sp, #72]
    177c:	mov	w6, w20
    1780:	ldr	x20, [sp, #56]
    1784:	mov	w4, w27
    1788:	mov	w12, wzr
    178c:	b	1798 <BZ2_decompress+0x1798>
    1790:	ldur	x12, [x29, #-16]
    1794:	add	w12, w12, #0x1
    1798:	cmp	w12, #0xf
    179c:	stur	x12, [x29, #-16]
    17a0:	b.gt	17b8 <BZ2_decompress+0x17b8>
    17a4:	add	x8, x21, w12, sxtw
    17a8:	ldrb	w8, [x8, #3452]
    17ac:	cbz	w8, 1790 <BZ2_decompress+0x1790>
    17b0:	mov	w23, wzr
    17b4:	b	18a0 <BZ2_decompress+0x18a0>
    17b8:	mov	w9, wzr
    17bc:	mov	x8, xzr
    17c0:	add	x10, x21, #0xc7c
    17c4:	str	wzr, [x21, #3192]
    17c8:	ldrb	w11, [x10, x8]
    17cc:	cbz	w11, 17e4 <BZ2_decompress+0x17e4>
    17d0:	add	x9, x21, w9, sxtw
    17d4:	strb	w8, [x9, #3468]
    17d8:	ldr	w9, [x21, #3192]
    17dc:	add	w9, w9, #0x1
    17e0:	str	w9, [x21, #3192]
    17e4:	add	x8, x8, #0x1
    17e8:	cmp	x8, #0x100
    17ec:	b.ne	17c8 <BZ2_decompress+0x17c8>  // b.any
    17f0:	cbz	w9, 15c8 <BZ2_decompress+0x15c8>
    17f4:	add	w6, w9, #0x2
    17f8:	ldr	w8, [x21, #36]
    17fc:	mov	w9, #0x1e                  	// #30
    1800:	str	w9, [x21, #8]
    1804:	cmp	w8, #0x3
    1808:	b.lt	1814 <BZ2_decompress+0x1814>  // b.tstop
    180c:	ldr	w10, [x21, #32]
    1810:	b	1870 <BZ2_decompress+0x1870>
    1814:	ldr	x9, [x21]
    1818:	ldr	w10, [x9, #8]
    181c:	sub	w11, w10, #0x1
    1820:	cmn	w11, #0x1
    1824:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1828:	ldr	x12, [x9]
    182c:	ldr	w13, [x21, #32]
    1830:	add	w8, w8, #0x8
    1834:	ldrb	w10, [x12], #1
    1838:	bfi	w10, w13, #8, #24
    183c:	stp	w10, w8, [x21, #32]
    1840:	ldr	w13, [x9, #12]
    1844:	str	x12, [x9]
    1848:	adds	w12, w13, #0x1
    184c:	stp	w11, w12, [x9, #8]
    1850:	b.cc	1860 <BZ2_decompress+0x1860>  // b.lo, b.ul, b.last
    1854:	ldr	w12, [x9, #16]
    1858:	add	w12, w12, #0x1
    185c:	str	w12, [x9, #16]
    1860:	sub	w12, w8, #0x8
    1864:	cmn	w12, #0x6
    1868:	sub	w11, w11, #0x1
    186c:	b.le	1820 <BZ2_decompress+0x1820>
    1870:	sub	w8, w8, #0x3
    1874:	lsr	w9, w10, w8
    1878:	and	w25, w9, #0x7
    187c:	cmp	w25, #0x7
    1880:	str	w8, [x21, #36]
    1884:	b.hi	260 <BZ2_decompress+0x260>  // b.pmore
    1888:	mov	w9, #0x1                   	// #1
    188c:	lsl	w9, w9, w25
    1890:	mov	w10, #0x83                  	// #131
    1894:	tst	w9, w10
    1898:	b.ne	15c8 <BZ2_decompress+0x15c8>  // b.any
    189c:	b	260 <BZ2_decompress+0x260>
    18a0:	cmp	w23, #0xf
    18a4:	b.gt	1790 <BZ2_decompress+0x1790>
    18a8:	ldr	w8, [x21, #36]
    18ac:	mov	w9, #0x1d                  	// #29
    18b0:	str	w9, [x21, #8]
    18b4:	cmp	w8, #0x1
    18b8:	b.lt	18c4 <BZ2_decompress+0x18c4>  // b.tstop
    18bc:	ldr	w10, [x21, #32]
    18c0:	b	1920 <BZ2_decompress+0x1920>
    18c4:	ldr	x9, [x21]
    18c8:	ldr	w10, [x9, #8]
    18cc:	sub	w11, w10, #0x1
    18d0:	cmn	w11, #0x1
    18d4:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    18d8:	ldr	x12, [x9]
    18dc:	ldr	w13, [x21, #32]
    18e0:	add	w8, w8, #0x8
    18e4:	ldrb	w10, [x12], #1
    18e8:	bfi	w10, w13, #8, #24
    18ec:	stp	w10, w8, [x21, #32]
    18f0:	ldr	w13, [x9, #12]
    18f4:	str	x12, [x9]
    18f8:	adds	w12, w13, #0x1
    18fc:	stp	w11, w12, [x9, #8]
    1900:	b.cc	1910 <BZ2_decompress+0x1910>  // b.lo, b.ul, b.last
    1904:	ldr	w12, [x9, #16]
    1908:	add	w12, w12, #0x1
    190c:	str	w12, [x9, #16]
    1910:	sub	w12, w8, #0x8
    1914:	cmn	w12, #0x8
    1918:	sub	w11, w11, #0x1
    191c:	b.le	18d0 <BZ2_decompress+0x18d0>
    1920:	sub	w8, w8, #0x1
    1924:	lsr	w9, w10, w8
    1928:	str	w8, [x21, #36]
    192c:	ldur	x8, [x29, #-16]
    1930:	tbz	w9, #0, 1944 <BZ2_decompress+0x1944>
    1934:	add	w8, w23, w8, lsl #4
    1938:	add	x8, x21, w8, sxtw
    193c:	mov	w9, #0x1                   	// #1
    1940:	strb	w9, [x8, #3196]
    1944:	add	w23, w23, #0x1
    1948:	b	18a0 <BZ2_decompress+0x18a0>
    194c:	cmp	w9, w19
    1950:	b.ge	1a38 <BZ2_decompress+0x1a38>  // b.tcont
    1954:	mov	w23, wzr
    1958:	mov	w8, w9
    195c:	stur	x8, [x29, #-16]
    1960:	mov	w8, #0x20                  	// #32
    1964:	ldr	w9, [x21, #36]
    1968:	str	w8, [x21, #8]
    196c:	cmp	w9, #0x1
    1970:	b.lt	1980 <BZ2_decompress+0x1980>  // b.tstop
    1974:	ldr	w11, [x21, #32]
    1978:	ldur	x0, [x29, #-16]
    197c:	b	19e8 <BZ2_decompress+0x19e8>
    1980:	ldr	x10, [x21]
    1984:	ldur	x0, [x29, #-16]
    1988:	mov	w27, w14
    198c:	ldr	w11, [x10, #8]
    1990:	sub	w12, w11, #0x1
    1994:	cmn	w12, #0x1
    1998:	b.eq	1a0c <BZ2_decompress+0x1a0c>  // b.none
    199c:	ldr	x13, [x10]
    19a0:	ldr	w14, [x21, #32]
    19a4:	add	w9, w9, #0x8
    19a8:	ldrb	w11, [x13], #1
    19ac:	bfi	w11, w14, #8, #24
    19b0:	stp	w11, w9, [x21, #32]
    19b4:	ldr	w14, [x10, #12]
    19b8:	str	x13, [x10]
    19bc:	adds	w13, w14, #0x1
    19c0:	stp	w12, w13, [x10, #8]
    19c4:	b.cc	19d4 <BZ2_decompress+0x19d4>  // b.lo, b.ul, b.last
    19c8:	ldr	w13, [x10, #16]
    19cc:	add	w13, w13, #0x1
    19d0:	str	w13, [x10, #16]
    19d4:	sub	w13, w9, #0x8
    19d8:	cmn	w13, #0x8
    19dc:	sub	w12, w12, #0x1
    19e0:	b.le	1994 <BZ2_decompress+0x1994>
    19e4:	mov	w14, w27
    19e8:	sub	w9, w9, #0x1
    19ec:	lsr	w10, w11, w9
    19f0:	str	w9, [x21, #36]
    19f4:	tbz	w10, #0, 1a18 <BZ2_decompress+0x1a18>
    19f8:	add	w23, w23, #0x1
    19fc:	cmp	w23, w25
    1a00:	mov	w0, #0xfffffffc            	// #-4
    1a04:	b.lt	1964 <BZ2_decompress+0x1964>  // b.tstop
    1a08:	b	15cc <BZ2_decompress+0x15cc>
    1a0c:	mov	w0, wzr
    1a10:	mov	w14, w27
    1a14:	b	15cc <BZ2_decompress+0x15cc>
    1a18:	mov	w8, #0x4651                	// #18001
    1a1c:	cmp	w0, w8
    1a20:	b.gt	1a30 <BZ2_decompress+0x1a30>
    1a24:	add	x8, x21, w0, sxtw
    1a28:	mov	w9, #0x651e                	// #25886
    1a2c:	strb	w23, [x8, x9]
    1a30:	add	w9, w0, #0x1
    1a34:	b	194c <BZ2_decompress+0x194c>
    1a38:	mov	w8, #0x4652                	// #18002
    1a3c:	cmp	w19, w8
    1a40:	csel	w8, w19, w8, lt  // lt = tstop
    1a44:	cmp	w25, #0x1
    1a48:	b.lt	1a68 <BZ2_decompress+0x1a68>  // b.tstop
    1a4c:	mov	w9, wzr
    1a50:	sub	x10, x29, #0x8
    1a54:	and	x11, x9, #0xff
    1a58:	strb	w9, [x10, x11]
    1a5c:	add	w9, w9, #0x1
    1a60:	cmp	w25, w9, uxtb
    1a64:	b.gt	1a54 <BZ2_decompress+0x1a54>
    1a68:	cmp	w19, #0x1
    1a6c:	b.lt	1afc <BZ2_decompress+0x1afc>  // b.tstop
    1a70:	mov	x27, x2
    1a74:	mov	x2, x15
    1a78:	mov	x0, x18
    1a7c:	mov	x15, xzr
    1a80:	sxtw	x9, w8
    1a84:	mov	w10, #0x651e                	// #25886
    1a88:	sub	x11, x29, #0x8
    1a8c:	mov	w12, #0x1ecc                	// #7884
    1a90:	stur	w14, [x29, #-40]
    1a94:	str	w16, [sp, #24]
    1a98:	add	x13, x21, x15
    1a9c:	mov	x19, x15
    1aa0:	ldrb	w15, [x13, x10]
    1aa4:	ldrb	w14, [x11, x15]
    1aa8:	cbz	x15, 1ac8 <BZ2_decompress+0x1ac8>
    1aac:	add	x16, x11, x15
    1ab0:	ldurb	w17, [x16, #-1]
    1ab4:	and	w18, w15, #0xff
    1ab8:	sub	x15, x15, #0x1
    1abc:	cmp	w18, #0x1
    1ac0:	strb	w17, [x16]
    1ac4:	b.ne	1aac <BZ2_decompress+0x1aac>  // b.any
    1ac8:	mov	x15, x19
    1acc:	add	x15, x19, #0x1
    1ad0:	cmp	x15, x9
    1ad4:	sturb	w14, [x29, #-8]
    1ad8:	strb	w14, [x13, x12]
    1adc:	b.lt	1a98 <BZ2_decompress+0x1a98>  // b.tstop
    1ae0:	ldr	w16, [sp, #24]
    1ae4:	ldur	w14, [x29, #-40]
    1ae8:	stur	x15, [x29, #-16]
    1aec:	mov	x18, x0
    1af0:	mov	x15, x2
    1af4:	mov	x2, x27
    1af8:	b	1b00 <BZ2_decompress+0x1b00>
    1afc:	stur	xzr, [x29, #-16]
    1b00:	mov	w17, wzr
    1b04:	mov	w19, w8
    1b08:	cmp	w17, w25
    1b0c:	b.ge	1ba0 <BZ2_decompress+0x1ba0>  // b.tcont
    1b10:	ldr	w8, [x21, #36]
    1b14:	mov	w9, #0x21                  	// #33
    1b18:	str	w9, [x21, #8]
    1b1c:	cmp	w8, #0x5
    1b20:	b.lt	1b2c <BZ2_decompress+0x1b2c>  // b.tstop
    1b24:	ldr	w10, [x21, #32]
    1b28:	b	1b88 <BZ2_decompress+0x1b88>
    1b2c:	ldr	x9, [x21]
    1b30:	ldr	w10, [x9, #8]
    1b34:	sub	w11, w10, #0x1
    1b38:	cmn	w11, #0x1
    1b3c:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1b40:	ldr	x12, [x9]
    1b44:	ldr	w13, [x21, #32]
    1b48:	add	w8, w8, #0x8
    1b4c:	ldrb	w10, [x12], #1
    1b50:	bfi	w10, w13, #8, #24
    1b54:	stp	w10, w8, [x21, #32]
    1b58:	ldr	w13, [x9, #12]
    1b5c:	str	x12, [x9]
    1b60:	adds	w12, w13, #0x1
    1b64:	stp	w11, w12, [x9, #8]
    1b68:	b.cc	1b78 <BZ2_decompress+0x1b78>  // b.lo, b.ul, b.last
    1b6c:	ldr	w12, [x9, #16]
    1b70:	add	w12, w12, #0x1
    1b74:	str	w12, [x9, #16]
    1b78:	sub	w12, w8, #0x8
    1b7c:	cmn	w12, #0x4
    1b80:	sub	w11, w11, #0x1
    1b84:	b.le	1b38 <BZ2_decompress+0x1b38>
    1b88:	sub	w8, w8, #0x5
    1b8c:	lsr	w9, w10, w8
    1b90:	mov	w0, wzr
    1b94:	and	w28, w9, #0x1f
    1b98:	str	w8, [x21, #36]
    1b9c:	b	1eb0 <BZ2_decompress+0x1eb0>
    1ba0:	mov	w8, #0x1ecc                	// #7884
    1ba4:	cmp	w25, #0x1
    1ba8:	add	x8, x21, x8
    1bac:	str	x20, [sp, #56]
    1bb0:	str	w24, [sp, #72]
    1bb4:	str	w5, [sp, #28]
    1bb8:	stur	w4, [x29, #-56]
    1bbc:	str	x8, [sp, #40]
    1bc0:	stur	x2, [x29, #-48]
    1bc4:	stur	w14, [x29, #-40]
    1bc8:	str	w23, [sp, #64]
    1bcc:	stur	w19, [x29, #-60]
    1bd0:	str	x1, [sp, #32]
    1bd4:	b.lt	1cd8 <BZ2_decompress+0x1cd8>  // b.tstop
    1bd8:	mov	w8, w25
    1bdc:	stur	x8, [x29, #-16]
    1be0:	mov	w8, w6
    1be4:	stur	x8, [x29, #-32]
    1be8:	mov	w8, #0xab70                	// #43888
    1bec:	mov	x24, xzr
    1bf0:	stur	w25, [x29, #-52]
    1bf4:	add	x25, x21, x8
    1bf8:	str	w28, [sp, #48]
    1bfc:	mov	x28, x1
    1c00:	mov	w26, w30
    1c04:	mov	w19, w7
    1c08:	mov	x23, x3
    1c0c:	cmp	w6, #0x1
    1c10:	b.lt	1c44 <BZ2_decompress+0x1c44>  // b.tstop
    1c14:	ldur	x8, [x29, #-32]
    1c18:	mov	w5, wzr
    1c1c:	mov	w20, #0x20                  	// #32
    1c20:	mov	x9, x25
    1c24:	ldrb	w10, [x9], #1
    1c28:	cmp	w5, w10
    1c2c:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    1c30:	cmp	w20, w10
    1c34:	csel	w20, w10, w20, gt
    1c38:	subs	x8, x8, #0x1
    1c3c:	b.ne	1c24 <BZ2_decompress+0x1c24>  // b.any
    1c40:	b	1c4c <BZ2_decompress+0x1c4c>
    1c44:	mov	w5, wzr
    1c48:	mov	w20, #0x20                  	// #32
    1c4c:	mov	w8, #0x408                 	// #1032
    1c50:	madd	x8, x24, x8, x21
    1c54:	mov	w10, #0xb17c                	// #45436
    1c58:	add	x0, x8, x10
    1c5c:	mov	w10, #0xc9ac                	// #51628
    1c60:	mov	w9, #0x102                 	// #258
    1c64:	add	x1, x8, x10
    1c68:	mov	w10, #0xe1dc                	// #57820
    1c6c:	madd	x9, x24, x9, x21
    1c70:	add	x2, x8, x10
    1c74:	mov	w8, #0xab70                	// #43888
    1c78:	add	x3, x9, x8
    1c7c:	mov	w4, w20
    1c80:	mov	w27, w6
    1c84:	bl	0 <BZ2_hbCreateDecodeTables>
    1c88:	add	x8, x21, x24, lsl #2
    1c8c:	mov	w9, #0xfa0c                	// #64012
    1c90:	str	w20, [x8, x9]
    1c94:	ldur	x8, [x29, #-16]
    1c98:	add	x24, x24, #0x1
    1c9c:	mov	w6, w27
    1ca0:	add	x25, x25, #0x102
    1ca4:	cmp	x24, x8
    1ca8:	mov	x3, x23
    1cac:	mov	w7, w19
    1cb0:	mov	w30, w26
    1cb4:	mov	x1, x28
    1cb8:	b.ne	1bfc <BZ2_decompress+0x1bfc>  // b.any
    1cbc:	ldur	w25, [x29, #-52]
    1cc0:	ldr	w28, [sp, #48]
    1cc4:	mov	w26, w30
    1cc8:	mov	w19, w7
    1ccc:	mov	x23, x3
    1cd0:	str	w25, [sp, #16]
    1cd4:	b	1cec <BZ2_decompress+0x1cec>
    1cd8:	mov	w26, w30
    1cdc:	mov	w19, w7
    1ce0:	mov	x23, x3
    1ce4:	mov	w27, w6
    1ce8:	str	wzr, [sp, #16]
    1cec:	ldr	w20, [x21, #3192]
    1cf0:	ldr	w24, [x21, #40]
    1cf4:	add	x0, x21, #0x44
    1cf8:	mov	w2, #0x400                 	// #1024
    1cfc:	mov	w1, wzr
    1d00:	bl	0 <memset>
    1d04:	mov	w10, #0x86a0                	// #34464
    1d08:	movk	w10, #0x1, lsl #16
    1d0c:	add	w8, w20, #0x1
    1d10:	mul	w16, w24, w10
    1d14:	ldr	w5, [sp, #28]
    1d18:	ldr	w24, [sp, #72]
    1d1c:	ldr	x20, [sp, #56]
    1d20:	mov	x3, x23
    1d24:	ldr	w23, [sp, #64]
    1d28:	mov	w7, w19
    1d2c:	ldp	w19, w4, [x29, #-60]
    1d30:	ldr	x1, [sp, #32]
    1d34:	ldur	x2, [x29, #-48]
    1d38:	stur	w8, [x29, #-32]
    1d3c:	add	x8, x21, #0xe8c
    1d40:	mov	w9, #0xfff                 	// #4095
    1d44:	mov	w13, #0xf                   	// #15
    1d48:	mov	w10, #0xff                  	// #255
    1d4c:	mov	w30, w26
    1d50:	mov	x12, xzr
    1d54:	mov	x11, x13
    1d58:	add	x13, x8, w9, sxtw
    1d5c:	add	w14, w10, w12
    1d60:	strb	w14, [x13, x12]
    1d64:	sub	x12, x12, #0x1
    1d68:	cmn	w12, #0x10
    1d6c:	b.ne	1d5c <BZ2_decompress+0x1d5c>  // b.any
    1d70:	add	w14, w9, w12
    1d74:	add	x15, x21, x11, lsl #2
    1d78:	sub	x13, x11, #0x1
    1d7c:	add	x9, x12, w9, sxtw
    1d80:	add	w12, w14, #0x1
    1d84:	sub	x10, x10, #0x10
    1d88:	str	w12, [x15, #7820]
    1d8c:	cbnz	x11, 1d50 <BZ2_decompress+0x1d50>
    1d90:	cmp	w19, #0x1
    1d94:	mov	w6, w27
    1d98:	mov	w18, wzr
    1d9c:	b.lt	1e88 <BZ2_decompress+0x1e88>  // b.tstop
    1da0:	ldr	x8, [sp, #40]
    1da4:	mov	w9, #0x408                 	// #1032
    1da8:	ldr	w17, [sp, #16]
    1dac:	ldur	w14, [x29, #-40]
    1db0:	ldrb	w2, [x8]
    1db4:	mov	w8, #0xfa0c                	// #64012
    1db8:	mov	w10, #0xc9ac                	// #51628
    1dbc:	mov	w11, #0xe1dc                	// #57820
    1dc0:	add	x12, x21, w2, uxtw #2
    1dc4:	ldr	w24, [x12, x8]
    1dc8:	umaddl	x9, w2, w9, x21
    1dcc:	mov	w8, #0xb17c                	// #45436
    1dd0:	add	x8, x9, x8
    1dd4:	mov	w15, wzr
    1dd8:	add	x3, x9, x10
    1ddc:	add	x20, x9, x11
    1de0:	stur	x8, [x29, #-24]
    1de4:	mov	w8, #0x100                 	// #256
    1de8:	mov	w1, w24
    1dec:	mov	x26, x16
    1df0:	mov	w16, #0x31                  	// #49
    1df4:	stur	x8, [x29, #-16]
    1df8:	ldr	w8, [x21, #36]
    1dfc:	mov	w9, #0x24                  	// #36
    1e00:	str	w9, [x21, #8]
    1e04:	cmp	w8, w1
    1e08:	b.ge	1e68 <BZ2_decompress+0x1e68>  // b.tcont
    1e0c:	ldr	x9, [x21]
    1e10:	ldr	w10, [x9, #8]
    1e14:	sub	w11, w10, #0x1
    1e18:	cmn	w11, #0x1
    1e1c:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1e20:	ldr	x12, [x9]
    1e24:	ldr	w13, [x21, #32]
    1e28:	add	w8, w8, #0x8
    1e2c:	ldrb	w10, [x12], #1
    1e30:	bfi	w10, w13, #8, #24
    1e34:	stp	w10, w8, [x21, #32]
    1e38:	ldr	w13, [x9, #12]
    1e3c:	str	x12, [x9]
    1e40:	adds	w12, w13, #0x1
    1e44:	stp	w11, w12, [x9, #8]
    1e48:	b.cc	1e58 <BZ2_decompress+0x1e58>  // b.lo, b.ul, b.last
    1e4c:	ldr	w12, [x9, #16]
    1e50:	add	w12, w12, #0x1
    1e54:	str	w12, [x9, #16]
    1e58:	cmp	w8, w1
    1e5c:	sub	w11, w11, #0x1
    1e60:	b.lt	1e18 <BZ2_decompress+0x1e18>  // b.tstop
    1e64:	b	1e6c <BZ2_decompress+0x1e6c>
    1e68:	ldr	w10, [x21, #32]
    1e6c:	sub	w8, w8, w1
    1e70:	mov	w9, #0xffffffff            	// #-1
    1e74:	lsr	w10, w10, w8
    1e78:	lsl	w9, w9, w1
    1e7c:	bic	w7, w10, w9
    1e80:	str	w8, [x21, #36]
    1e84:	b	1480 <BZ2_decompress+0x1480>
    1e88:	ldr	w17, [sp, #16]
    1e8c:	ldur	w14, [x29, #-40]
    1e90:	mov	w9, #0x100                 	// #256
    1e94:	mov	w8, wzr
    1e98:	mov	w15, wzr
    1e9c:	mov	w0, #0xfffffffc            	// #-4
    1ea0:	stur	x9, [x29, #-16]
    1ea4:	mov	x26, x16
    1ea8:	mov	w16, wzr
    1eac:	b	15cc <BZ2_decompress+0x15cc>
    1eb0:	cmp	w0, w6
    1eb4:	b.lt	1ec4 <BZ2_decompress+0x1ec4>  // b.tstop
    1eb8:	stur	x0, [x29, #-16]
    1ebc:	add	w17, w17, #0x1
    1ec0:	b	1b08 <BZ2_decompress+0x1b08>
    1ec4:	sub	w8, w28, #0x1
    1ec8:	cmp	w8, #0x13
    1ecc:	b.hi	2018 <BZ2_decompress+0x2018>  // b.pmore
    1ed0:	stur	x0, [x29, #-16]
    1ed4:	ldr	w8, [x21, #36]
    1ed8:	mov	w9, #0x22                  	// #34
    1edc:	str	w9, [x21, #8]
    1ee0:	cmp	w8, #0x1
    1ee4:	b.lt	1ef0 <BZ2_decompress+0x1ef0>  // b.tstop
    1ee8:	ldr	w10, [x21, #32]
    1eec:	b	1f4c <BZ2_decompress+0x1f4c>
    1ef0:	ldr	x9, [x21]
    1ef4:	ldr	w10, [x9, #8]
    1ef8:	sub	w11, w10, #0x1
    1efc:	cmn	w11, #0x1
    1f00:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    1f04:	ldr	x12, [x9]
    1f08:	ldr	w13, [x21, #32]
    1f0c:	add	w8, w8, #0x8
    1f10:	ldrb	w10, [x12], #1
    1f14:	bfi	w10, w13, #8, #24
    1f18:	stp	w10, w8, [x21, #32]
    1f1c:	ldr	w13, [x9, #12]
    1f20:	str	x12, [x9]
    1f24:	adds	w12, w13, #0x1
    1f28:	stp	w11, w12, [x9, #8]
    1f2c:	b.cc	1f3c <BZ2_decompress+0x1f3c>  // b.lo, b.ul, b.last
    1f30:	ldr	w12, [x9, #16]
    1f34:	add	w12, w12, #0x1
    1f38:	str	w12, [x9, #16]
    1f3c:	sub	w12, w8, #0x8
    1f40:	cmn	w12, #0x8
    1f44:	sub	w11, w11, #0x1
    1f48:	b.le	1efc <BZ2_decompress+0x1efc>
    1f4c:	ldur	x0, [x29, #-16]
    1f50:	sub	w8, w8, #0x1
    1f54:	lsr	w9, w10, w8
    1f58:	str	w8, [x21, #36]
    1f5c:	tbnz	w9, #0, 1f7c <BZ2_decompress+0x1f7c>
    1f60:	mov	w8, #0x102                 	// #258
    1f64:	smaddl	x8, w17, w8, x21
    1f68:	mov	w9, #0xab70                	// #43888
    1f6c:	add	x8, x8, w0, sxtw
    1f70:	strb	w28, [x8, x9]
    1f74:	add	w0, w0, #0x1
    1f78:	b	1eb0 <BZ2_decompress+0x1eb0>
    1f7c:	mov	w9, #0x23                  	// #35
    1f80:	cmp	w8, #0x1
    1f84:	str	w9, [x21, #8]
    1f88:	b.lt	1f94 <BZ2_decompress+0x1f94>  // b.tstop
    1f8c:	ldr	w10, [x21, #32]
    1f90:	b	1ff0 <BZ2_decompress+0x1ff0>
    1f94:	ldr	x9, [x21]
    1f98:	ldr	w10, [x9, #8]
    1f9c:	sub	w11, w10, #0x1
    1fa0:	cmn	w11, #0x1
    1fa4:	b.eq	2010 <BZ2_decompress+0x2010>  // b.none
    1fa8:	ldr	x12, [x9]
    1fac:	ldr	w13, [x21, #32]
    1fb0:	add	w8, w8, #0x8
    1fb4:	ldrb	w10, [x12], #1
    1fb8:	bfi	w10, w13, #8, #24
    1fbc:	stp	w10, w8, [x21, #32]
    1fc0:	ldr	w13, [x9, #12]
    1fc4:	str	x12, [x9]
    1fc8:	adds	w12, w13, #0x1
    1fcc:	stp	w11, w12, [x9, #8]
    1fd0:	b.cc	1fe0 <BZ2_decompress+0x1fe0>  // b.lo, b.ul, b.last
    1fd4:	ldr	w12, [x9, #16]
    1fd8:	add	w12, w12, #0x1
    1fdc:	str	w12, [x9, #16]
    1fe0:	sub	w12, w8, #0x8
    1fe4:	cmn	w12, #0x8
    1fe8:	sub	w11, w11, #0x1
    1fec:	b.le	1fa0 <BZ2_decompress+0x1fa0>
    1ff0:	sub	w8, w8, #0x1
    1ff4:	str	w8, [x21, #36]
    1ff8:	lsr	w8, w10, w8
    1ffc:	tst	w8, #0x1
    2000:	mov	w8, #0x1                   	// #1
    2004:	cneg	w8, w8, ne  // ne = any
    2008:	add	w28, w8, w28
    200c:	b	1ec4 <BZ2_decompress+0x1ec4>
    2010:	stur	x0, [x29, #-16]
    2014:	b	15c0 <BZ2_decompress+0x15c0>
    2018:	stur	x0, [x29, #-16]
    201c:	b	15c8 <BZ2_decompress+0x15c8>
    2020:	sxtw	x8, w1
    2024:	ldr	w8, [x3, x8, lsl #2]
    2028:	sub	w8, w7, w8
    202c:	cmp	w8, #0x101
    2030:	b.hi	15c8 <BZ2_decompress+0x15c8>  // b.pmore
    2034:	ldr	w5, [x20, w8, uxtw #2]
    2038:	ldur	w8, [x29, #-32]
    203c:	cmp	w5, w8
    2040:	b.eq	2370 <BZ2_decompress+0x2370>  // b.none
    2044:	subs	w11, w5, #0x1
    2048:	b.hi	2058 <BZ2_decompress+0x2058>  // b.pmore
    204c:	mov	w30, #0xffffffff            	// #-1
    2050:	mov	w4, #0x1                   	// #1
    2054:	b	28f8 <BZ2_decompress+0x28f8>
    2058:	cmp	w18, w26
    205c:	b.ge	15c8 <BZ2_decompress+0x15c8>  // b.tcont
    2060:	cmp	w11, #0xf
    2064:	b.hi	20f0 <BZ2_decompress+0x20f0>  // b.pmore
    2068:	ldrsw	x9, [x21, #7820]
    206c:	mov	w0, w14
    2070:	cmp	w11, #0x4
    2074:	add	w8, w9, w11
    2078:	add	x8, x21, x8
    207c:	ldrb	w8, [x8, #3724]
    2080:	b.cc	20bc <BZ2_decompress+0x20bc>  // b.lo, b.ul, b.last
    2084:	mov	w10, w5
    2088:	add	w11, w9, w10
    208c:	add	x12, x21, #0xe8c
    2090:	sub	w13, w11, #0x4
    2094:	sub	w11, w11, #0x5
    2098:	ldr	w14, [x12, w11, sxtw]
    209c:	sub	w11, w10, #0x4
    20a0:	sub	w10, w10, #0x5
    20a4:	cmp	w10, #0x3
    20a8:	mov	w10, w11
    20ac:	str	w14, [x12, w13, sxtw]
    20b0:	b.hi	2088 <BZ2_decompress+0x2088>  // b.pmore
    20b4:	subs	w11, w11, #0x1
    20b8:	b.eq	20e0 <BZ2_decompress+0x20e0>  // b.none
    20bc:	neg	w10, w11
    20c0:	add	w11, w11, w9
    20c4:	sub	w12, w11, #0x1
    20c8:	add	x13, x21, #0xe8c
    20cc:	ldrb	w14, [x13, w12, uxtw]
    20d0:	adds	w10, w10, #0x1
    20d4:	strb	w14, [x13, w11, uxtw]
    20d8:	mov	w11, w12
    20dc:	b.cc	20c4 <BZ2_decompress+0x20c4>  // b.lo, b.ul, b.last
    20e0:	add	x9, x21, x9
    20e4:	strb	w8, [x9, #3724]
    20e8:	mov	w14, w0
    20ec:	b	222c <BZ2_decompress+0x222c>
    20f0:	lsr	w10, w11, #4
    20f4:	add	x9, x21, w10, uxtw #2
    20f8:	ldr	w13, [x9, #7820]
    20fc:	ands	w8, w11, #0xf
    2100:	mov	w11, #0x1e8c                	// #7820
    2104:	add	x11, x9, x11
    2108:	add	w12, w13, w8
    210c:	add	x8, x21, w12, sxtw
    2110:	ldrb	w8, [x8, #3724]
    2114:	b.eq	2150 <BZ2_decompress+0x2150>  // b.none
    2118:	mov	w0, w14
    211c:	sxtw	x12, w12
    2120:	add	x13, x21, x12
    2124:	ldrb	w14, [x13, #3723]
    2128:	sub	x12, x12, #0x1
    212c:	strb	w14, [x13, #3724]
    2130:	ldrsw	x13, [x11]
    2134:	cmp	x12, x13
    2138:	b.gt	2120 <BZ2_decompress+0x2120>
    213c:	add	w12, w13, #0x1
    2140:	mov	w14, w0
    2144:	str	w12, [x11]
    2148:	cbnz	w10, 2158 <BZ2_decompress+0x2158>
    214c:	b	2190 <BZ2_decompress+0x2190>
    2150:	add	w12, w13, #0x1
    2154:	str	w12, [x11]
    2158:	mov	w11, #0x1e8c                	// #7820
    215c:	add	x10, x10, #0x1
    2160:	add	x9, x9, x11
    2164:	ldrsw	x11, [x9]
    2168:	add	x13, x21, #0xe8c
    216c:	sub	x10, x10, #0x1
    2170:	cmp	x10, #0x1
    2174:	sub	x11, x11, #0x1
    2178:	str	w11, [x9], #-4
    217c:	ldrsw	x12, [x9]
    2180:	add	x12, x12, x13
    2184:	ldrb	w12, [x12, #15]
    2188:	strb	w12, [x13, x11]
    218c:	b.gt	2164 <BZ2_decompress+0x2164>
    2190:	ldrsw	x9, [x21, #7820]
    2194:	sub	x9, x9, #0x1
    2198:	str	w9, [x21, #7820]
    219c:	add	x9, x21, x9
    21a0:	strb	w8, [x9, #3724]
    21a4:	ldr	w9, [x21, #7820]
    21a8:	cbnz	w9, 222c <BZ2_decompress+0x222c>
    21ac:	mov	x27, x2
    21b0:	mov	w2, w16
    21b4:	mov	x0, x15
    21b8:	add	x9, x21, #0xe8c
    21bc:	mov	w10, #0xfff                 	// #4095
    21c0:	mov	w15, #0xf                   	// #15
    21c4:	mov	w11, #0x1e8c                	// #7820
    21c8:	stur	w14, [x29, #-40]
    21cc:	add	x14, x21, x15, lsl #2
    21d0:	mov	x13, xzr
    21d4:	mov	x12, x15
    21d8:	add	x14, x14, x11
    21dc:	add	x15, x9, w10, sxtw
    21e0:	ldr	w16, [x14]
    21e4:	add	w16, w13, w16
    21e8:	add	w16, w16, #0xf
    21ec:	add	x16, x21, w16, sxtw
    21f0:	ldrb	w16, [x16, #3724]
    21f4:	strb	w16, [x15, x13]
    21f8:	sub	x13, x13, #0x1
    21fc:	cmn	w13, #0x10
    2200:	b.ne	21e0 <BZ2_decompress+0x21e0>  // b.any
    2204:	add	w16, w10, w13
    2208:	sub	x15, x12, #0x1
    220c:	add	w16, w16, #0x1
    2210:	add	x10, x13, w10, sxtw
    2214:	str	w16, [x14]
    2218:	cbnz	x12, 21cc <BZ2_decompress+0x21cc>
    221c:	ldur	w14, [x29, #-40]
    2220:	mov	x15, x0
    2224:	mov	w16, w2
    2228:	mov	x2, x27
    222c:	add	x8, x21, x8
    2230:	ldrb	w9, [x8, #3468]
    2234:	add	x9, x21, x9, lsl #2
    2238:	ldr	w10, [x9, #68]
    223c:	add	w10, w10, #0x1
    2240:	str	w10, [x9, #68]
    2244:	ldrb	w9, [x21, #44]
    2248:	ldrb	w8, [x8, #3468]
    224c:	cbz	w9, 225c <BZ2_decompress+0x225c>
    2250:	ldr	x9, [x21, #3160]
    2254:	strh	w8, [x9, w18, sxtw #1]
    2258:	b	2264 <BZ2_decompress+0x2264>
    225c:	ldr	x9, [x21, #3152]
    2260:	str	w8, [x9, w18, sxtw #2]
    2264:	add	w18, w18, #0x1
    2268:	cbnz	w16, 22bc <BZ2_decompress+0x22bc>
    226c:	sxtw	x8, w15
    2270:	add	x15, x8, #0x1
    2274:	cmp	w15, w19
    2278:	b.ge	2adc <BZ2_decompress+0x2adc>  // b.tcont
    227c:	add	x8, x21, x15
    2280:	mov	w9, #0x1ecc                	// #7884
    2284:	ldrb	w2, [x8, x9]
    2288:	mov	w10, #0xfa0c                	// #64012
    228c:	mov	w8, #0x408                 	// #1032
    2290:	mov	w9, #0xb17c                	// #45436
    2294:	add	x12, x21, x2, lsl #2
    2298:	madd	x8, x2, x8, x21
    229c:	ldr	w24, [x12, x10]
    22a0:	add	x9, x8, x9
    22a4:	mov	w11, #0xe1dc                	// #57820
    22a8:	stur	x9, [x29, #-24]
    22ac:	mov	w9, #0xc9ac                	// #51628
    22b0:	add	x20, x8, x11
    22b4:	add	x3, x8, x9
    22b8:	mov	w16, #0x32                  	// #50
    22bc:	sub	w16, w16, #0x1
    22c0:	mov	w1, w24
    22c4:	ldr	w8, [x21, #36]
    22c8:	mov	w9, #0x28                  	// #40
    22cc:	str	w9, [x21, #8]
    22d0:	cmp	w8, w1
    22d4:	b.ge	2334 <BZ2_decompress+0x2334>  // b.tcont
    22d8:	ldr	x9, [x21]
    22dc:	ldr	w10, [x9, #8]
    22e0:	sub	w11, w10, #0x1
    22e4:	cmn	w11, #0x1
    22e8:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    22ec:	ldr	x12, [x9]
    22f0:	ldr	w13, [x21, #32]
    22f4:	add	w8, w8, #0x8
    22f8:	ldrb	w10, [x12], #1
    22fc:	bfi	w10, w13, #8, #24
    2300:	stp	w10, w8, [x21, #32]
    2304:	ldr	w13, [x9, #12]
    2308:	str	x12, [x9]
    230c:	adds	w12, w13, #0x1
    2310:	stp	w11, w12, [x9, #8]
    2314:	b.cc	2324 <BZ2_decompress+0x2324>  // b.lo, b.ul, b.last
    2318:	ldr	w12, [x9, #16]
    231c:	add	w12, w12, #0x1
    2320:	str	w12, [x9, #16]
    2324:	cmp	w8, w1
    2328:	sub	w11, w11, #0x1
    232c:	b.lt	22e4 <BZ2_decompress+0x22e4>  // b.tstop
    2330:	b	2338 <BZ2_decompress+0x2338>
    2334:	ldr	w10, [x21, #32]
    2338:	sub	w8, w8, w1
    233c:	mov	w9, #0xffffffff            	// #-1
    2340:	lsr	w10, w10, w8
    2344:	lsl	w9, w9, w1
    2348:	bic	w7, w10, w9
    234c:	str	w8, [x21, #36]
    2350:	cmp	w1, #0x14
    2354:	b.gt	15c8 <BZ2_decompress+0x15c8>
    2358:	ldur	x9, [x29, #-24]
    235c:	ldr	w9, [x9, w1, sxtw #2]
    2360:	cmp	w7, w9
    2364:	b.le	2020 <BZ2_decompress+0x2020>
    2368:	add	w1, w1, #0x1
    236c:	b	1530 <BZ2_decompress+0x1530>
    2370:	ldr	w8, [x21, #56]
    2374:	mov	w0, #0xfffffffc            	// #-4
    2378:	tbnz	w8, #31, 25c0 <BZ2_decompress+0x25c0>
    237c:	cmp	w8, w18
    2380:	b.ge	25c0 <BZ2_decompress+0x25c0>  // b.tcont
    2384:	mov	x10, xzr
    2388:	add	x8, x21, #0x44
    238c:	ldr	w9, [x8, x10, lsl #2]
    2390:	tbnz	w9, #31, 25b8 <BZ2_decompress+0x25b8>
    2394:	cmp	w9, w18
    2398:	b.gt	25b8 <BZ2_decompress+0x25b8>
    239c:	add	x10, x10, #0x1
    23a0:	cmp	x10, #0x100
    23a4:	b.ne	238c <BZ2_decompress+0x238c>  // b.any
    23a8:	mov	x27, x1
    23ac:	mov	x8, xzr
    23b0:	add	x1, x21, #0x448
    23b4:	str	wzr, [x21, #1096]
    23b8:	add	x9, x21, x8
    23bc:	ldur	q0, [x9, #68]
    23c0:	add	x8, x8, #0x10
    23c4:	add	x9, x9, #0x44c
    23c8:	cmp	x8, #0x400
    23cc:	str	q0, [x9]
    23d0:	b.ne	23b8 <BZ2_decompress+0x23b8>  // b.any
    23d4:	ldr	w9, [x21, #1096]
    23d8:	mov	x8, xzr
    23dc:	add	x10, x21, #0x44c
    23e0:	ldr	w11, [x10, x8]
    23e4:	add	w9, w11, w9
    23e8:	str	w9, [x10, x8]
    23ec:	add	x8, x8, #0x4
    23f0:	cmp	x8, #0x400
    23f4:	b.ne	23e0 <BZ2_decompress+0x23e0>  // b.any
    23f8:	mov	x10, xzr
    23fc:	add	x8, x21, #0x448
    2400:	ldr	w9, [x8, x10, lsl #2]
    2404:	tbnz	w9, #31, 25c8 <BZ2_decompress+0x25c8>
    2408:	cmp	w9, w18
    240c:	b.gt	25c8 <BZ2_decompress+0x25c8>
    2410:	add	x10, x10, #0x1
    2414:	cmp	x10, #0x101
    2418:	b.ne	2400 <BZ2_decompress+0x2400>  // b.any
    241c:	ldr	w10, [x21, #1096]
    2420:	mov	x8, xzr
    2424:	add	x9, x21, #0x44c
    2428:	ldr	w11, [x9, x8, lsl #2]
    242c:	cmp	w10, w11
    2430:	b.gt	25d0 <BZ2_decompress+0x25d0>
    2434:	add	x8, x8, #0x1
    2438:	cmp	x8, #0x100
    243c:	mov	w10, w11
    2440:	b.ne	2428 <BZ2_decompress+0x2428>  // b.any
    2444:	ldr	w8, [x21, #52]
    2448:	mov	w9, #0xffffffff            	// #-1
    244c:	str	w9, [x21, #3184]
    2450:	mov	w9, #0x2                   	// #2
    2454:	cmp	w8, #0x2
    2458:	str	wzr, [x21, #16]
    245c:	strb	wzr, [x21, #12]
    2460:	str	w9, [x21, #8]
    2464:	stur	w25, [x29, #-52]
    2468:	stur	w19, [x29, #-60]
    246c:	str	x26, [sp, #40]
    2470:	str	w16, [sp, #24]
    2474:	b.ge	2874 <BZ2_decompress+0x2874>  // b.tcont
    2478:	ldur	w19, [x29, #-36]
    247c:	ldrb	w8, [x21, #44]
    2480:	str	x15, [sp, #72]
    2484:	cbz	w8, 26a4 <BZ2_decompress+0x26a4>
    2488:	stp	x20, x3, [sp, #56]
    248c:	mov	w26, w14
    2490:	mov	x20, x2
    2494:	mov	w25, w5
    2498:	mov	x8, xzr
    249c:	stp	w30, w17, [sp, #12]
    24a0:	str	w7, [sp, #20]
    24a4:	stur	w4, [x29, #-56]
    24a8:	str	w6, [sp, #28]
    24ac:	add	x9, x21, x8
    24b0:	ldr	w10, [x9, #1096]
    24b4:	add	x8, x8, #0x4
    24b8:	cmp	x8, #0x404
    24bc:	str	w10, [x9, #2124]
    24c0:	b.ne	24ac <BZ2_decompress+0x24ac>  // b.any
    24c4:	cmp	w18, #0x1
    24c8:	b.lt	2530 <BZ2_decompress+0x2530>  // b.tstop
    24cc:	mov	x8, xzr
    24d0:	mov	w9, w18
    24d4:	ldr	x10, [x21, #3160]
    24d8:	lsl	x11, x8, #1
    24dc:	ubfx	x12, x8, #1, #31
    24e0:	ldrb	w11, [x10, x11]
    24e4:	add	x15, x21, x11, lsl #2
    24e8:	ldr	w14, [x15, #2124]
    24ec:	strh	w14, [x10, x8, lsl #1]
    24f0:	ldr	x11, [x21, #3168]
    24f4:	add	x10, x15, #0x84c
    24f8:	ldrb	w13, [x11, x12]
    24fc:	tbnz	w8, #0, 250c <BZ2_decompress+0x250c>
    2500:	and	w13, w13, #0xf0
    2504:	orr	w13, w13, w14, asr #16
    2508:	b	2514 <BZ2_decompress+0x2514>
    250c:	asr	w14, w14, #16
    2510:	bfi	w13, w14, #4, #28
    2514:	strb	w13, [x11, x12]
    2518:	ldr	w11, [x10]
    251c:	add	x8, x8, #0x1
    2520:	cmp	x9, x8
    2524:	add	w11, w11, #0x1
    2528:	str	w11, [x10]
    252c:	b.ne	24d4 <BZ2_decompress+0x24d4>  // b.any
    2530:	ldrsw	x9, [x21, #56]
    2534:	ldr	x8, [x21, #3168]
    2538:	ldr	x10, [x21, #3160]
    253c:	str	x18, [sp, #48]
    2540:	asr	w11, w9, #1
    2544:	ldrb	w11, [x8, w11, sxtw]
    2548:	ldrh	w23, [x10, x9, lsl #1]
    254c:	ubfiz	w12, w9, #2, #1
    2550:	lsr	w11, w11, w12
    2554:	bfi	w23, w11, #16, #4
    2558:	mov	w14, w23
    255c:	asr	w12, w14, #1
    2560:	ldrb	w13, [x8, w12, sxtw]
    2564:	ldrh	w23, [x10, w23, sxtw #1]
    2568:	strh	w9, [x10, w14, sxtw #1]
    256c:	ldrb	w10, [x8, w12, sxtw]
    2570:	ubfiz	w12, w14, #2, #1
    2574:	lsr	w12, w13, w12
    2578:	sbfx	x11, x14, #1, #31
    257c:	bfi	w23, w12, #16, #4
    2580:	tbnz	w14, #0, 2590 <BZ2_decompress+0x2590>
    2584:	and	w10, w10, #0xf0
    2588:	orr	w10, w10, w9, asr #16
    258c:	b	2598 <BZ2_decompress+0x2598>
    2590:	asr	w9, w9, #16
    2594:	bfi	w10, w9, #4, #28
    2598:	strb	w10, [x8, x11]
    259c:	ldr	w8, [x21, #56]
    25a0:	cmp	w14, w8
    25a4:	b.eq	25e8 <BZ2_decompress+0x25e8>  // b.none
    25a8:	ldr	x10, [x21, #3160]
    25ac:	ldr	x8, [x21, #3168]
    25b0:	mov	w9, w14
    25b4:	b	2558 <BZ2_decompress+0x2558>
    25b8:	mov	w0, #0xfffffffc            	// #-4
    25bc:	stur	x10, [x29, #-16]
    25c0:	stur	w5, [x29, #-32]
    25c4:	b	15cc <BZ2_decompress+0x15cc>
    25c8:	stur	x10, [x29, #-16]
    25cc:	b	25d8 <BZ2_decompress+0x25d8>
    25d0:	add	w8, w8, #0x1
    25d4:	stur	x8, [x29, #-16]
    25d8:	mov	w0, #0xfffffffc            	// #-4
    25dc:	stur	w5, [x29, #-32]
    25e0:	mov	x1, x27
    25e4:	b	15cc <BZ2_decompress+0x15cc>
    25e8:	ldrb	w9, [x21, #20]
    25ec:	mov	w8, #0x86a0                	// #34464
    25f0:	movk	w8, #0x1, lsl #16
    25f4:	str	w14, [x21, #60]
    25f8:	str	wzr, [x21, #1092]
    25fc:	stur	x14, [x29, #-16]
    2600:	cbz	w9, 2708 <BZ2_decompress+0x2708>
    2604:	ldr	w9, [x21, #40]
    2608:	str	xzr, [x21, #24]
    260c:	mul	w8, w9, w8
    2610:	cmp	w14, w8
    2614:	b.cs	2798 <BZ2_decompress+0x2798>  // b.hs, b.nlast
    2618:	ldur	x0, [x29, #-16]
    261c:	bl	0 <BZ2_indexIntoF>
    2620:	ldr	w9, [x21, #60]
    2624:	ldr	x10, [x21, #3168]
    2628:	str	w0, [x21, #64]
    262c:	ldr	x11, [x21, #3160]
    2630:	lsr	x12, x9, #1
    2634:	ldrb	w10, [x10, x12]
    2638:	ldr	w12, [x21, #1092]
    263c:	ldrh	w11, [x11, x9, lsl #1]
    2640:	ubfiz	w9, w9, #2, #1
    2644:	lsr	w10, w10, w9
    2648:	ldr	w9, [x21, #24]
    264c:	mov	w8, w0
    2650:	add	w12, w12, #0x1
    2654:	bfi	w11, w10, #16, #4
    2658:	str	w11, [x21, #60]
    265c:	str	w12, [x21, #1092]
    2660:	cbnz	w9, 2684 <BZ2_decompress+0x2684>
    2664:	ldrsw	x10, [x21, #28]
    2668:	adrp	x9, 0 <BZ2_rNums>
    266c:	add	x9, x9, #0x0
    2670:	ldr	w9, [x9, x10, lsl #2]
    2674:	add	w11, w10, #0x1
    2678:	cmp	w11, #0x200
    267c:	csinc	w10, wzr, w10, eq  // eq = none
    2680:	stp	w9, w10, [x21, #24]
    2684:	sub	w9, w9, #0x1
    2688:	cmp	w9, #0x1
    268c:	str	w9, [x21, #24]
    2690:	cset	w9, eq  // eq = none
    2694:	mov	w0, wzr
    2698:	eor	w8, w8, w9
    269c:	str	w8, [x21, #64]
    26a0:	b	2760 <BZ2_decompress+0x2760>
    26a4:	ldr	x8, [x21, #3152]
    26a8:	mov	w16, w14
    26ac:	mov	x15, x2
    26b0:	mov	x2, x18
    26b4:	cmp	w18, #0x1
    26b8:	b.lt	27a0 <BZ2_decompress+0x27a0>  // b.tstop
    26bc:	mov	w10, w2
    26c0:	mov	x9, xzr
    26c4:	lsl	x10, x10, #8
    26c8:	mov	x11, x8
    26cc:	ldrb	w12, [x11], #4
    26d0:	add	x12, x21, x12, lsl #2
    26d4:	ldrsw	x13, [x12, #1096]
    26d8:	ldr	w14, [x8, x13, lsl #2]
    26dc:	orr	w14, w14, w9
    26e0:	str	w14, [x8, x13, lsl #2]
    26e4:	ldr	w13, [x12, #1096]
    26e8:	add	x9, x9, #0x100
    26ec:	cmp	x10, x9
    26f0:	add	w13, w13, #0x1
    26f4:	str	w13, [x12, #1096]
    26f8:	b.ne	26cc <BZ2_decompress+0x26cc>  // b.any
    26fc:	mov	w9, w2
    2700:	stur	x9, [x29, #-16]
    2704:	b	27a4 <BZ2_decompress+0x27a4>
    2708:	ldr	w9, [x21, #40]
    270c:	mul	w8, w9, w8
    2710:	cmp	w14, w8
    2714:	b.cs	2798 <BZ2_decompress+0x2798>  // b.hs, b.nlast
    2718:	ldur	x0, [x29, #-16]
    271c:	bl	0 <BZ2_indexIntoF>
    2720:	ldr	w9, [x21, #60]
    2724:	mov	w8, w0
    2728:	ldr	x10, [x21, #3168]
    272c:	str	w8, [x21, #64]
    2730:	ldr	x8, [x21, #3160]
    2734:	lsr	x11, x9, #1
    2738:	ldrb	w10, [x10, x11]
    273c:	ldr	w11, [x21, #1092]
    2740:	ldrh	w8, [x8, x9, lsl #1]
    2744:	ubfiz	w9, w9, #2, #1
    2748:	lsr	w9, w10, w9
    274c:	add	w10, w11, #0x1
    2750:	bfi	w8, w9, #16, #4
    2754:	mov	w0, wzr
    2758:	str	w8, [x21, #60]
    275c:	str	w10, [x21, #1092]
    2760:	mov	w5, w25
    2764:	stur	w25, [x29, #-32]
    2768:	ldr	w6, [sp, #28]
    276c:	mov	w9, w19
    2770:	ldp	w4, w25, [x29, #-56]
    2774:	mov	x2, x20
    2778:	mov	w14, w26
    277c:	ldp	x20, x3, [sp, #56]
    2780:	ldp	w17, w7, [sp, #16]
    2784:	ldur	w19, [x29, #-60]
    2788:	ldr	w30, [sp, #12]
    278c:	ldp	x26, x18, [sp, #40]
    2790:	mov	x1, x27
    2794:	b	2868 <BZ2_decompress+0x2868>
    2798:	mov	w0, #0x1                   	// #1
    279c:	b	1614 <BZ2_decompress+0x1614>
    27a0:	stur	xzr, [x29, #-16]
    27a4:	ldrsw	x9, [x21, #56]
    27a8:	ldrb	w11, [x21, #20]
    27ac:	mov	w10, #0x86a0                	// #34464
    27b0:	movk	w10, #0x1, lsl #16
    27b4:	ldr	w9, [x8, x9, lsl #2]
    27b8:	str	wzr, [x21, #1092]
    27bc:	lsr	x9, x9, #8
    27c0:	str	w9, [x21, #60]
    27c4:	cbz	w11, 2818 <BZ2_decompress+0x2818>
    27c8:	ldr	w11, [x21, #40]
    27cc:	mov	w0, #0x1                   	// #1
    27d0:	str	xzr, [x21, #24]
    27d4:	mul	w10, w11, w10
    27d8:	cmp	w9, w10
    27dc:	b.cs	1614 <BZ2_decompress+0x1614>  // b.hs, b.nlast
    27e0:	ldr	w8, [x8, x9, lsl #2]
    27e4:	str	w0, [x21, #1092]
    27e8:	lsr	w9, w8, #8
    27ec:	str	w9, [x21, #60]
    27f0:	adrp	x9, 0 <BZ2_rNums>
    27f4:	ldr	w9, [x9]
    27f8:	and	w8, w8, #0xff
    27fc:	sub	w9, w9, #0x1
    2800:	cmp	w9, #0x1
    2804:	stp	w9, w0, [x21, #24]
    2808:	cset	w9, eq  // eq = none
    280c:	eor	w8, w8, w9
    2810:	str	w8, [x21, #64]
    2814:	b	2840 <BZ2_decompress+0x2840>
    2818:	ldr	w11, [x21, #40]
    281c:	mov	w0, #0x1                   	// #1
    2820:	mul	w10, w11, w10
    2824:	cmp	w9, w10
    2828:	b.cs	1614 <BZ2_decompress+0x1614>  // b.hs, b.nlast
    282c:	ldr	w8, [x8, w9, uxtw #2]
    2830:	str	w0, [x21, #1092]
    2834:	and	w9, w8, #0xff
    2838:	lsr	w8, w8, #8
    283c:	stp	w8, w9, [x21, #60]
    2840:	mov	w9, w19
    2844:	ldur	w25, [x29, #-52]
    2848:	ldur	w19, [x29, #-60]
    284c:	ldr	x26, [sp, #40]
    2850:	mov	w0, wzr
    2854:	mov	w14, w16
    2858:	mov	x1, x27
    285c:	mov	x18, x2
    2860:	mov	x2, x15
    2864:	stur	w5, [x29, #-32]
    2868:	ldr	x15, [sp, #72]
    286c:	ldr	w16, [sp, #24]
    2870:	b	15d0 <BZ2_decompress+0x15d0>
    2874:	adrp	x8, 0 <stderr>
    2878:	str	x3, [sp, #64]
    287c:	ldr	x3, [x8]
    2880:	adrp	x0, 0 <BZ2_decompress>
    2884:	add	x0, x0, #0x0
    2888:	stur	x1, [x29, #-16]
    288c:	mov	w1, #0x6                   	// #6
    2890:	stur	x2, [x29, #-48]
    2894:	mov	w2, #0x1                   	// #1
    2898:	mov	w25, w6
    289c:	str	x20, [sp, #56]
    28a0:	stur	w4, [x29, #-56]
    28a4:	str	w5, [sp, #28]
    28a8:	str	w7, [sp, #20]
    28ac:	mov	w26, w30
    28b0:	mov	w19, w17
    28b4:	str	x18, [sp, #48]
    28b8:	mov	x20, x15
    28bc:	stur	w14, [x29, #-40]
    28c0:	bl	0 <fwrite>
    28c4:	ldur	w14, [x29, #-40]
    28c8:	ldur	x2, [x29, #-48]
    28cc:	mov	x15, x20
    28d0:	ldp	x18, x20, [sp, #48]
    28d4:	ldr	w7, [sp, #20]
    28d8:	ldr	x3, [sp, #64]
    28dc:	ldr	w5, [sp, #28]
    28e0:	ldur	w4, [x29, #-56]
    28e4:	ldur	x1, [x29, #-16]
    28e8:	mov	w17, w19
    28ec:	mov	w30, w26
    28f0:	mov	w6, w25
    28f4:	b	2478 <BZ2_decompress+0x2478>
    28f8:	cmp	w4, #0x200, lsl #12
    28fc:	b.ge	15c8 <BZ2_decompress+0x15c8>  // b.tcont
    2900:	cmp	w5, #0x1
    2904:	b.eq	2914 <BZ2_decompress+0x2914>  // b.none
    2908:	cbnz	w5, 2918 <BZ2_decompress+0x2918>
    290c:	add	w30, w30, w4
    2910:	b	2918 <BZ2_decompress+0x2918>
    2914:	add	w30, w30, w4, lsl #1
    2918:	lsl	w4, w4, #1
    291c:	cbnz	w16, 2970 <BZ2_decompress+0x2970>
    2920:	sxtw	x8, w15
    2924:	add	x15, x8, #0x1
    2928:	cmp	w15, w19
    292c:	b.ge	2adc <BZ2_decompress+0x2adc>  // b.tcont
    2930:	add	x8, x21, x15
    2934:	mov	w9, #0x1ecc                	// #7884
    2938:	ldrb	w2, [x8, x9]
    293c:	mov	w10, #0xfa0c                	// #64012
    2940:	mov	w8, #0x408                 	// #1032
    2944:	mov	w9, #0xb17c                	// #45436
    2948:	add	x12, x21, x2, lsl #2
    294c:	madd	x8, x2, x8, x21
    2950:	ldr	w24, [x12, x10]
    2954:	add	x9, x8, x9
    2958:	mov	w11, #0xe1dc                	// #57820
    295c:	stur	x9, [x29, #-24]
    2960:	mov	w9, #0xc9ac                	// #51628
    2964:	add	x20, x8, x11
    2968:	add	x3, x8, x9
    296c:	mov	w16, #0x32                  	// #50
    2970:	sub	w16, w16, #0x1
    2974:	mov	w1, w24
    2978:	ldr	w8, [x21, #36]
    297c:	mov	w9, #0x26                  	// #38
    2980:	str	w9, [x21, #8]
    2984:	cmp	w8, w1
    2988:	b.ge	29e8 <BZ2_decompress+0x29e8>  // b.tcont
    298c:	ldr	x9, [x21]
    2990:	ldr	w10, [x9, #8]
    2994:	sub	w11, w10, #0x1
    2998:	cmn	w11, #0x1
    299c:	b.eq	15c0 <BZ2_decompress+0x15c0>  // b.none
    29a0:	ldr	x12, [x9]
    29a4:	ldr	w13, [x21, #32]
    29a8:	add	w8, w8, #0x8
    29ac:	ldrb	w10, [x12], #1
    29b0:	bfi	w10, w13, #8, #24
    29b4:	stp	w10, w8, [x21, #32]
    29b8:	ldr	w13, [x9, #12]
    29bc:	str	x12, [x9]
    29c0:	adds	w12, w13, #0x1
    29c4:	stp	w11, w12, [x9, #8]
    29c8:	b.cc	29d8 <BZ2_decompress+0x29d8>  // b.lo, b.ul, b.last
    29cc:	ldr	w12, [x9, #16]
    29d0:	add	w12, w12, #0x1
    29d4:	str	w12, [x9, #16]
    29d8:	cmp	w8, w1
    29dc:	sub	w11, w11, #0x1
    29e0:	b.lt	2998 <BZ2_decompress+0x2998>  // b.tstop
    29e4:	b	29ec <BZ2_decompress+0x29ec>
    29e8:	ldr	w10, [x21, #32]
    29ec:	sub	w8, w8, w1
    29f0:	mov	w9, #0xffffffff            	// #-1
    29f4:	lsr	w10, w10, w8
    29f8:	lsl	w9, w9, w1
    29fc:	bic	w7, w10, w9
    2a00:	str	w8, [x21, #36]
    2a04:	cmp	w1, #0x14
    2a08:	b.gt	15c8 <BZ2_decompress+0x15c8>
    2a0c:	ldur	x9, [x29, #-24]
    2a10:	ldr	w9, [x9, w1, sxtw #2]
    2a14:	cmp	w7, w9
    2a18:	b.le	2a24 <BZ2_decompress+0x2a24>
    2a1c:	add	w1, w1, #0x1
    2a20:	b	14a0 <BZ2_decompress+0x14a0>
    2a24:	sxtw	x8, w1
    2a28:	ldr	w8, [x3, x8, lsl #2]
    2a2c:	sub	w8, w7, w8
    2a30:	cmp	w8, #0x101
    2a34:	b.hi	15c8 <BZ2_decompress+0x15c8>  // b.pmore
    2a38:	ldr	w5, [x20, w8, uxtw #2]
    2a3c:	cmp	w5, #0x2
    2a40:	b.cc	28f8 <BZ2_decompress+0x28f8>  // b.lo, b.ul, b.last
    2a44:	ldrsw	x8, [x21, #7820]
    2a48:	add	x8, x21, x8
    2a4c:	ldrb	w8, [x8, #3724]
    2a50:	add	x8, x21, x8
    2a54:	ldrb	w9, [x8, #3468]
    2a58:	add	w8, w30, #0x1
    2a5c:	add	x10, x21, x9, lsl #2
    2a60:	ldr	w11, [x10, #68]
    2a64:	add	w11, w11, w8
    2a68:	str	w11, [x10, #68]
    2a6c:	ldrb	w10, [x21, #44]
    2a70:	cbz	w10, 2aa0 <BZ2_decompress+0x2aa0>
    2a74:	tbnz	w30, #31, 2ac8 <BZ2_decompress+0x2ac8>
    2a78:	sxtw	x18, w18
    2a7c:	sxtw	x10, w26
    2a80:	cmp	x18, x10
    2a84:	b.ge	2ad0 <BZ2_decompress+0x2ad0>  // b.tcont
    2a88:	ldr	x11, [x21, #3160]
    2a8c:	subs	w8, w8, #0x1
    2a90:	strh	w9, [x11, x18, lsl #1]
    2a94:	add	x18, x18, #0x1
    2a98:	b.gt	2a80 <BZ2_decompress+0x2a80>
    2a9c:	b	2ac8 <BZ2_decompress+0x2ac8>
    2aa0:	tbnz	w30, #31, 2ac8 <BZ2_decompress+0x2ac8>
    2aa4:	sxtw	x18, w18
    2aa8:	sxtw	x10, w26
    2aac:	cmp	x18, x10
    2ab0:	b.ge	2ad0 <BZ2_decompress+0x2ad0>  // b.tcont
    2ab4:	ldr	x11, [x21, #3152]
    2ab8:	subs	w8, w8, #0x1
    2abc:	str	w9, [x11, x18, lsl #2]
    2ac0:	add	x18, x18, #0x1
    2ac4:	b.gt	2aac <BZ2_decompress+0x2aac>
    2ac8:	mov	w30, w8
    2acc:	b	2038 <BZ2_decompress+0x2038>
    2ad0:	mov	w0, #0xfffffffc            	// #-4
    2ad4:	mov	w30, w8
    2ad8:	b	15cc <BZ2_decompress+0x15cc>
    2adc:	mov	w16, wzr
    2ae0:	b	15c8 <BZ2_decompress+0x15c8>

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bz__AssertH__fail>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	stp	x20, x19, [sp, #16]
       8:	mov	x29, sp
       c:	adrp	x20, 0 <stderr>
      10:	ldr	x8, [x20]
      14:	mov	w19, w0
      18:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
      1c:	adrp	x3, 0 <BZ2_bz__AssertH__fail>
      20:	add	x1, x1, #0x0
      24:	add	x3, x3, #0x0
      28:	mov	x0, x8
      2c:	mov	w2, w19
      30:	bl	0 <fprintf>
      34:	cmp	w19, #0x3ef
      38:	b.ne	54 <BZ2_bz__AssertH__fail+0x54>  // b.any
      3c:	ldr	x3, [x20]
      40:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      44:	add	x0, x0, #0x0
      48:	mov	w1, #0x420                 	// #1056
      4c:	mov	w2, #0x1                   	// #1
      50:	bl	0 <fwrite>
      54:	mov	w0, #0x3                   	// #3
      58:	bl	0 <exit>

000000000000005c <BZ2_bzlibVersion>:
      5c:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      60:	add	x0, x0, #0x0
      64:	ret

0000000000000068 <BZ2_bzCompressInit>:
      68:	stp	x29, x30, [sp, #-64]!
      6c:	stp	x24, x23, [sp, #16]
      70:	stp	x22, x21, [sp, #32]
      74:	stp	x20, x19, [sp, #48]
      78:	mov	x29, sp
      7c:	mov	x19, x0
      80:	cmp	w3, #0xfa
      84:	mov	w0, #0xfffffffe            	// #-2
      88:	b.hi	218 <BZ2_bzCompressInit+0x1b0>  // b.pmore
      8c:	cbz	x19, 218 <BZ2_bzCompressInit+0x1b0>
      90:	sub	w8, w1, #0x1
      94:	mov	w21, w1
      98:	cmp	w8, #0x8
      9c:	b.hi	218 <BZ2_bzCompressInit+0x1b0>  // b.pmore
      a0:	ldr	x8, [x19, #56]
      a4:	cmp	w3, #0x0
      a8:	mov	w9, #0x1e                  	// #30
      ac:	mov	w22, w2
      b0:	csel	w24, w9, w3, eq  // eq = none
      b4:	cbnz	x8, c4 <BZ2_bzCompressInit+0x5c>
      b8:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
      bc:	add	x8, x8, #0x0
      c0:	str	x8, [x19, #56]
      c4:	ldr	x9, [x19, #64]
      c8:	cbnz	x9, d8 <BZ2_bzCompressInit+0x70>
      cc:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
      d0:	add	x9, x9, #0x0
      d4:	str	x9, [x19, #64]
      d8:	ldr	x0, [x19, #72]
      dc:	mov	w1, #0xd9d8                	// #55768
      e0:	mov	w2, #0x1                   	// #1
      e4:	blr	x8
      e8:	cbz	x0, 214 <BZ2_bzCompressInit+0x1ac>
      ec:	str	x19, [x0]
      f0:	stp	xzr, xzr, [x0, #32]
      f4:	str	xzr, [x0, #24]
      f8:	mov	x20, x0
      fc:	ldr	x8, [x19, #56]
     100:	ldr	x0, [x19, #72]
     104:	mov	w9, #0x1a80                	// #6784
     108:	movk	w9, #0x6, lsl #16
     10c:	mul	w23, w21, w9
     110:	mov	w2, #0x1                   	// #1
     114:	mov	w1, w23
     118:	blr	x8
     11c:	str	x0, [x20, #24]
     120:	ldr	x8, [x19, #56]
     124:	ldr	x0, [x19, #72]
     128:	add	w1, w23, #0x88
     12c:	mov	w2, #0x1                   	// #1
     130:	blr	x8
     134:	str	x0, [x20, #32]
     138:	ldr	x8, [x19, #56]
     13c:	ldr	x0, [x19, #72]
     140:	mov	w1, #0x40004               	// #262148
     144:	mov	w2, #0x1                   	// #1
     148:	blr	x8
     14c:	ldr	x1, [x20, #24]
     150:	str	x0, [x20, #40]
     154:	cbz	x1, 1e8 <BZ2_bzCompressInit+0x180>
     158:	cbz	x0, 1e0 <BZ2_bzCompressInit+0x178>
     15c:	ldr	x8, [x20, #32]
     160:	cbz	x8, 1e0 <BZ2_bzCompressInit+0x178>
     164:	mov	w9, #0x86a0                	// #34464
     168:	movi	v0.2s, #0x2
     16c:	stp	x1, x8, [x20, #56]
     170:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     174:	movk	w9, #0x1, lsl #16
     178:	str	d0, [x20, #8]
     17c:	ldr	d0, [x8]
     180:	mul	w9, w21, w9
     184:	movi	v1.2d, #0x0
     188:	sub	w8, w9, #0x13
     18c:	str	w21, [x20, #664]
     190:	str	w22, [x20, #656]
     194:	str	w24, [x20, #88]
     198:	stp	x1, xzr, [x20, #72]
     19c:	str	w8, [x20, #112]
     1a0:	str	x20, [x19, #48]
     1a4:	stur	d1, [x19, #12]
     1a8:	stur	d1, [x19, #36]
     1ac:	stur	d1, [x20, #116]
     1b0:	movi	d1, #0xffffffff
     1b4:	add	x0, x20, #0x80
     1b8:	mov	w2, #0x100                 	// #256
     1bc:	mov	w1, wzr
     1c0:	str	wzr, [x20, #108]
     1c4:	str	d1, [x20, #648]
     1c8:	stur	d0, [x20, #92]
     1cc:	bl	0 <memset>
     1d0:	mov	w0, wzr
     1d4:	mov	w8, #0x1                   	// #1
     1d8:	str	w8, [x20, #660]
     1dc:	b	218 <BZ2_bzCompressInit+0x1b0>
     1e0:	ldp	x8, x0, [x19, #64]
     1e4:	blr	x8
     1e8:	ldr	x1, [x20, #32]
     1ec:	cbz	x1, 1f8 <BZ2_bzCompressInit+0x190>
     1f0:	ldp	x8, x0, [x19, #64]
     1f4:	blr	x8
     1f8:	ldr	x1, [x20, #40]
     1fc:	cbz	x1, 208 <BZ2_bzCompressInit+0x1a0>
     200:	ldp	x8, x0, [x19, #64]
     204:	blr	x8
     208:	ldp	x8, x0, [x19, #64]
     20c:	mov	x1, x20
     210:	blr	x8
     214:	mov	w0, #0xfffffffd            	// #-3
     218:	ldp	x20, x19, [sp, #48]
     21c:	ldp	x22, x21, [sp, #32]
     220:	ldp	x24, x23, [sp, #16]
     224:	ldp	x29, x30, [sp], #64
     228:	ret

000000000000022c <default_bzalloc>:
     22c:	mul	w8, w2, w1
     230:	sxtw	x0, w8
     234:	b	0 <malloc>

0000000000000238 <default_bzfree>:
     238:	cbz	x1, 244 <default_bzfree+0xc>
     23c:	mov	x0, x1
     240:	b	0 <free>
     244:	ret

0000000000000248 <BZ2_bzCompress>:
     248:	stp	x29, x30, [sp, #-32]!
     24c:	str	x19, [sp, #16]
     250:	mov	x29, sp
     254:	cbz	x0, 270 <BZ2_bzCompress+0x28>
     258:	ldr	x19, [x0, #48]
     25c:	mov	x8, x0
     260:	cbz	x19, 270 <BZ2_bzCompress+0x28>
     264:	ldr	x9, [x19]
     268:	cmp	x9, x8
     26c:	b.eq	280 <BZ2_bzCompress+0x38>  // b.none
     270:	mov	w0, #0xfffffffe            	// #-2
     274:	ldr	x19, [sp, #16]
     278:	ldp	x29, x30, [sp], #32
     27c:	ret
     280:	ldr	w9, [x19, #8]
     284:	mov	w0, #0xffffffff            	// #-1
     288:	cmp	w9, #0x2
     28c:	b.ne	2bc <BZ2_bzCompress+0x74>  // b.any
     290:	cmp	w1, #0x1
     294:	b.eq	2a8 <BZ2_bzCompress+0x60>  // b.none
     298:	cmp	w1, #0x2
     29c:	b.ne	30c <BZ2_bzCompress+0xc4>  // b.any
     2a0:	mov	w9, #0x4                   	// #4
     2a4:	b	2ac <BZ2_bzCompress+0x64>
     2a8:	mov	w9, #0x3                   	// #3
     2ac:	ldr	w10, [x8, #8]
     2b0:	str	w9, [x19, #8]
     2b4:	str	w10, [x19, #16]
     2b8:	b	288 <BZ2_bzCompress+0x40>
     2bc:	cmp	w9, #0x1
     2c0:	b.eq	274 <BZ2_bzCompress+0x2c>  // b.none
     2c4:	cmp	w9, #0x3
     2c8:	b.eq	32c <BZ2_bzCompress+0xe4>  // b.none
     2cc:	cmp	w9, #0x4
     2d0:	b.ne	364 <BZ2_bzCompress+0x11c>  // b.any
     2d4:	cmp	w1, #0x2
     2d8:	b.ne	35c <BZ2_bzCompress+0x114>  // b.any
     2dc:	ldr	w9, [x19, #16]
     2e0:	ldr	w10, [x8, #8]
     2e4:	cmp	w9, w10
     2e8:	b.ne	35c <BZ2_bzCompress+0x114>  // b.any
     2ec:	mov	x0, x8
     2f0:	bl	3d4 <handle_compress>
     2f4:	tst	w0, #0xff
     2f8:	b.eq	35c <BZ2_bzCompress+0x114>  // b.none
     2fc:	ldr	w8, [x19, #16]
     300:	cbz	w8, 3a0 <BZ2_bzCompress+0x158>
     304:	mov	w0, #0x3                   	// #3
     308:	b	274 <BZ2_bzCompress+0x2c>
     30c:	mov	w0, #0xfffffffe            	// #-2
     310:	cbnz	w1, 274 <BZ2_bzCompress+0x2c>
     314:	mov	x0, x8
     318:	bl	3d4 <handle_compress>
     31c:	tst	w0, #0xff
     320:	mov	w8, #0xfffffffe            	// #-2
     324:	cinv	w0, w8, ne  // ne = any
     328:	b	274 <BZ2_bzCompress+0x2c>
     32c:	cmp	w1, #0x1
     330:	b.ne	35c <BZ2_bzCompress+0x114>  // b.any
     334:	ldr	w9, [x19, #16]
     338:	ldr	w10, [x8, #8]
     33c:	cmp	w9, w10
     340:	b.ne	35c <BZ2_bzCompress+0x114>  // b.any
     344:	mov	x0, x8
     348:	bl	3d4 <handle_compress>
     34c:	ldr	w8, [x19, #16]
     350:	cbz	w8, 36c <BZ2_bzCompress+0x124>
     354:	mov	w0, #0x2                   	// #2
     358:	b	274 <BZ2_bzCompress+0x2c>
     35c:	mov	w0, #0xffffffff            	// #-1
     360:	b	274 <BZ2_bzCompress+0x2c>
     364:	mov	w0, wzr
     368:	b	274 <BZ2_bzCompress+0x2c>
     36c:	ldr	w8, [x19, #92]
     370:	cmp	w8, #0xff
     374:	b.hi	384 <BZ2_bzCompress+0x13c>  // b.pmore
     378:	ldr	w8, [x19, #96]
     37c:	cmp	w8, #0x0
     380:	b.gt	354 <BZ2_bzCompress+0x10c>
     384:	ldp	w9, w8, [x19, #116]
     388:	mov	w0, #0x2                   	// #2
     38c:	cmp	w8, w9
     390:	b.lt	274 <BZ2_bzCompress+0x2c>  // b.tstop
     394:	str	w0, [x19, #8]
     398:	mov	w0, #0x1                   	// #1
     39c:	b	274 <BZ2_bzCompress+0x2c>
     3a0:	ldr	w8, [x19, #92]
     3a4:	cmp	w8, #0xff
     3a8:	b.hi	3b8 <BZ2_bzCompress+0x170>  // b.pmore
     3ac:	ldr	w8, [x19, #96]
     3b0:	cmp	w8, #0x0
     3b4:	b.gt	304 <BZ2_bzCompress+0xbc>
     3b8:	ldp	w9, w8, [x19, #116]
     3bc:	cmp	w8, w9
     3c0:	b.lt	304 <BZ2_bzCompress+0xbc>  // b.tstop
     3c4:	mov	w8, #0x1                   	// #1
     3c8:	str	w8, [x19, #8]
     3cc:	mov	w0, #0x4                   	// #4
     3d0:	b	274 <BZ2_bzCompress+0x2c>

00000000000003d4 <handle_compress>:
     3d4:	str	d8, [sp, #-96]!
     3d8:	stp	x29, x30, [sp, #8]
     3dc:	str	x27, [sp, #24]
     3e0:	stp	x26, x25, [sp, #32]
     3e4:	stp	x24, x23, [sp, #48]
     3e8:	stp	x22, x21, [sp, #64]
     3ec:	stp	x20, x19, [sp, #80]
     3f0:	mov	x29, sp
     3f4:	ldr	x19, [x0, #48]
     3f8:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     3fc:	ldr	d8, [x8]
     400:	adrp	x24, 0 <BZ2_crc32Table>
     404:	mov	w21, wzr
     408:	mov	w22, wzr
     40c:	mov	w23, #0x1                   	// #1
     410:	add	x24, x24, #0x0
     414:	mov	w25, #0xffffffff            	// #-1
     418:	add	x20, x19, #0x80
     41c:	mov	w26, #0x2                   	// #2
     420:	ldr	w8, [x19, #12]
     424:	cmp	w8, #0x2
     428:	b.eq	548 <handle_compress+0x174>  // b.none
     42c:	cmp	w8, #0x1
     430:	b.ne	424 <handle_compress+0x50>  // b.any
     434:	ldr	x9, [x19]
     438:	ldr	w8, [x19, #120]
     43c:	ldr	w10, [x9, #32]
     440:	cbz	w10, 4b4 <handle_compress+0xe0>
     444:	ldr	w10, [x19, #116]
     448:	cmp	w8, w10
     44c:	b.ge	4b4 <handle_compress+0xe0>  // b.tcont
     450:	ldr	x9, [x9, #24]
     454:	ldr	x10, [x19, #80]
     458:	ldrb	w8, [x10, w8, sxtw]
     45c:	strb	w8, [x9]
     460:	ldr	w8, [x19, #120]
     464:	ldr	x10, [x19]
     468:	add	w8, w8, #0x1
     46c:	str	w8, [x19, #120]
     470:	ldp	w9, w13, [x10, #32]
     474:	ldr	x12, [x10, #24]
     478:	sub	w11, w9, #0x1
     47c:	add	x9, x12, #0x1
     480:	adds	w12, w13, #0x1
     484:	stp	w11, w12, [x10, #32]
     488:	str	x9, [x10, #24]
     48c:	b.cc	49c <handle_compress+0xc8>  // b.lo, b.ul, b.last
     490:	ldr	w12, [x10, #40]
     494:	add	w12, w12, #0x1
     498:	str	w12, [x10, #40]
     49c:	cbz	w11, 4ac <handle_compress+0xd8>
     4a0:	ldr	w10, [x19, #116]
     4a4:	cmp	w8, w10
     4a8:	b.lt	454 <handle_compress+0x80>  // b.tstop
     4ac:	mov	w9, #0x1                   	// #1
     4b0:	b	4b8 <handle_compress+0xe4>
     4b4:	mov	w9, wzr
     4b8:	ldr	w10, [x19, #116]
     4bc:	orr	w21, w9, w21
     4c0:	cmp	w8, w10
     4c4:	b.lt	7a0 <handle_compress+0x3cc>  // b.tstop
     4c8:	ldr	w27, [x19, #8]
     4cc:	cmp	w27, #0x4
     4d0:	b.ne	4f4 <handle_compress+0x120>  // b.any
     4d4:	ldr	w8, [x19, #16]
     4d8:	cbnz	w8, 4f4 <handle_compress+0x120>
     4dc:	ldr	w8, [x19, #92]
     4e0:	cmp	w8, #0xff
     4e4:	b.hi	7a0 <handle_compress+0x3cc>  // b.pmore
     4e8:	ldr	w8, [x19, #96]
     4ec:	cmp	w8, #0x1
     4f0:	b.lt	7a0 <handle_compress+0x3cc>  // b.tstop
     4f4:	mov	w2, #0x100                 	// #256
     4f8:	mov	x0, x20
     4fc:	mov	w1, wzr
     500:	str	wzr, [x19, #108]
     504:	stp	wzr, wzr, [x19, #116]
     508:	str	w25, [x19, #648]
     50c:	bl	0 <memset>
     510:	ldr	w8, [x19, #660]
     514:	cmp	w27, #0x3
     518:	str	w26, [x19, #12]
     51c:	add	w8, w8, #0x1
     520:	str	w8, [x19, #660]
     524:	b.ne	54c <handle_compress+0x178>  // b.any
     528:	ldr	w8, [x19, #16]
     52c:	cbnz	w8, 548 <handle_compress+0x174>
     530:	ldr	w8, [x19, #92]
     534:	cmp	w8, #0xff
     538:	b.hi	7a0 <handle_compress+0x3cc>  // b.pmore
     53c:	ldr	w8, [x19, #96]
     540:	cmp	w8, #0x0
     544:	b.le	7a0 <handle_compress+0x3cc>
     548:	ldr	w27, [x19, #8]
     54c:	ldp	w8, w9, [x19, #108]
     550:	cmp	w27, #0x2
     554:	b.ne	63c <handle_compress+0x268>  // b.any
     558:	cmp	w8, w9
     55c:	b.ge	730 <handle_compress+0x35c>  // b.tcont
     560:	ldr	x10, [x19]
     564:	ldr	w11, [x10, #8]
     568:	cbz	w11, 730 <handle_compress+0x35c>
     56c:	ldr	x12, [x10]
     570:	ldr	w11, [x19, #92]
     574:	ldrb	w27, [x12]
     578:	ldr	w9, [x19, #96]
     57c:	cmp	w11, w27
     580:	b.ne	598 <handle_compress+0x1c4>  // b.any
     584:	cmp	w9, #0xff
     588:	b.eq	5dc <handle_compress+0x208>  // b.none
     58c:	add	w8, w9, #0x1
     590:	str	w8, [x19, #96]
     594:	b	5f0 <handle_compress+0x21c>
     598:	cmp	w9, #0x1
     59c:	b.ne	5dc <handle_compress+0x208>  // b.any
     5a0:	ldr	w9, [x19, #648]
     5a4:	and	w10, w11, #0xff
     5a8:	add	x12, x19, w11, uxtw
     5ac:	eor	w10, w10, w9, lsr #24
     5b0:	ldr	w10, [x24, w10, uxtw #2]
     5b4:	eor	w9, w10, w9, lsl #8
     5b8:	str	w9, [x19, #648]
     5bc:	strb	w23, [x12, #128]
     5c0:	ldr	x9, [x19, #64]
     5c4:	strb	w11, [x9, w8, sxtw]
     5c8:	ldr	w8, [x19, #108]
     5cc:	str	w27, [x19, #92]
     5d0:	add	w8, w8, #0x1
     5d4:	str	w8, [x19, #108]
     5d8:	b	5f0 <handle_compress+0x21c>
     5dc:	cmp	w11, #0xff
     5e0:	b.hi	5ec <handle_compress+0x218>  // b.pmore
     5e4:	mov	x0, x19
     5e8:	bl	25ec <add_pair_to_block>
     5ec:	stp	w27, w23, [x19, #92]
     5f0:	ldr	x8, [x19]
     5f4:	ldr	x9, [x8]
     5f8:	ldp	w10, w11, [x8, #8]
     5fc:	add	x12, x9, #0x1
     600:	sub	w13, w10, #0x1
     604:	adds	w9, w11, #0x1
     608:	str	x12, [x8]
     60c:	stp	w13, w9, [x8, #8]
     610:	b.cc	620 <handle_compress+0x24c>  // b.lo, b.ul, b.last
     614:	ldr	w9, [x8, #16]
     618:	add	w9, w9, #0x1
     61c:	str	w9, [x8, #16]
     620:	ldp	w8, w9, [x19, #108]
     624:	mov	w10, #0x1                   	// #1
     628:	cmp	w8, w9
     62c:	b.ge	734 <handle_compress+0x360>  // b.tcont
     630:	mov	w11, w27
     634:	cbnz	w13, 574 <handle_compress+0x1a0>
     638:	b	734 <handle_compress+0x360>
     63c:	cmp	w8, w9
     640:	b.ge	730 <handle_compress+0x35c>  // b.tcont
     644:	ldr	x11, [x19]
     648:	ldr	w10, [x11, #8]
     64c:	cbz	w10, 734 <handle_compress+0x360>
     650:	ldr	w10, [x19, #16]
     654:	cbz	w10, 734 <handle_compress+0x360>
     658:	ldr	x9, [x11]
     65c:	ldrb	w27, [x9]
     660:	ldp	w9, w10, [x19, #92]
     664:	cmp	w9, w27
     668:	b.ne	680 <handle_compress+0x2ac>  // b.any
     66c:	cmp	w10, #0xff
     670:	b.eq	6c4 <handle_compress+0x2f0>  // b.none
     674:	add	w8, w10, #0x1
     678:	str	w8, [x19, #96]
     67c:	b	6d8 <handle_compress+0x304>
     680:	cmp	w10, #0x1
     684:	b.ne	6c4 <handle_compress+0x2f0>  // b.any
     688:	ldr	w10, [x19, #648]
     68c:	and	w11, w9, #0xff
     690:	add	x12, x19, x9
     694:	eor	w11, w11, w10, lsr #24
     698:	ldr	w11, [x24, w11, uxtw #2]
     69c:	eor	w10, w11, w10, lsl #8
     6a0:	str	w10, [x19, #648]
     6a4:	strb	w23, [x12, #128]
     6a8:	ldr	x10, [x19, #64]
     6ac:	strb	w9, [x10, w8, sxtw]
     6b0:	ldr	w8, [x19, #108]
     6b4:	str	w27, [x19, #92]
     6b8:	add	w8, w8, #0x1
     6bc:	str	w8, [x19, #108]
     6c0:	b	6d8 <handle_compress+0x304>
     6c4:	cmp	w9, #0xff
     6c8:	b.hi	6d4 <handle_compress+0x300>  // b.pmore
     6cc:	mov	x0, x19
     6d0:	bl	25ec <add_pair_to_block>
     6d4:	stp	w27, w23, [x19, #92]
     6d8:	ldr	x11, [x19]
     6dc:	ldr	x8, [x11]
     6e0:	ldp	w9, w10, [x11, #8]
     6e4:	add	x8, x8, #0x1
     6e8:	sub	w12, w9, #0x1
     6ec:	adds	w9, w10, #0x1
     6f0:	str	x8, [x11]
     6f4:	stp	w12, w9, [x11, #8]
     6f8:	b.cc	708 <handle_compress+0x334>  // b.lo, b.ul, b.last
     6fc:	ldr	w8, [x11, #16]
     700:	add	w8, w8, #0x1
     704:	str	w8, [x11, #16]
     708:	ldr	w10, [x19, #16]
     70c:	ldp	w8, w9, [x19, #108]
     710:	sub	w13, w10, #0x1
     714:	cmp	w8, w9
     718:	mov	w10, #0x1                   	// #1
     71c:	str	w13, [x19, #16]
     720:	b.ge	734 <handle_compress+0x360>  // b.tcont
     724:	cbz	w12, 734 <handle_compress+0x360>
     728:	cbnz	w13, 658 <handle_compress+0x284>
     72c:	b	734 <handle_compress+0x360>
     730:	mov	w10, wzr
     734:	ldr	w11, [x19, #8]
     738:	orr	w22, w10, w22
     73c:	cmp	w11, #0x2
     740:	b.eq	74c <handle_compress+0x378>  // b.none
     744:	ldr	w10, [x19, #16]
     748:	cbz	w10, 76c <handle_compress+0x398>
     74c:	cmp	w8, w9
     750:	b.ge	764 <handle_compress+0x390>  // b.tcont
     754:	ldr	x8, [x19]
     758:	ldr	w8, [x8, #8]
     75c:	cbnz	w8, 420 <handle_compress+0x4c>
     760:	b	7a0 <handle_compress+0x3cc>
     764:	mov	w1, wzr
     768:	b	790 <handle_compress+0x3bc>
     76c:	ldr	w8, [x19, #92]
     770:	cmp	w8, #0xff
     774:	b.hi	784 <handle_compress+0x3b0>  // b.pmore
     778:	mov	x0, x19
     77c:	bl	25ec <add_pair_to_block>
     780:	ldr	w11, [x19, #8]
     784:	cmp	w11, #0x4
     788:	cset	w1, eq  // eq = none
     78c:	stur	d8, [x19, #92]
     790:	mov	x0, x19
     794:	bl	0 <BZ2_compressBlock>
     798:	str	w23, [x19, #12]
     79c:	b	420 <handle_compress+0x4c>
     7a0:	orr	w8, w22, w21
     7a4:	ldp	x20, x19, [sp, #80]
     7a8:	ldp	x22, x21, [sp, #64]
     7ac:	ldp	x24, x23, [sp, #48]
     7b0:	ldp	x26, x25, [sp, #32]
     7b4:	ldr	x27, [sp, #24]
     7b8:	ldp	x29, x30, [sp, #8]
     7bc:	tst	w8, #0xff
     7c0:	cset	w0, ne  // ne = any
     7c4:	ldr	d8, [sp], #96
     7c8:	ret

00000000000007cc <BZ2_bzCompressEnd>:
     7cc:	stp	x29, x30, [sp, #-32]!
     7d0:	stp	x20, x19, [sp, #16]
     7d4:	mov	x29, sp
     7d8:	cbz	x0, 7f4 <BZ2_bzCompressEnd+0x28>
     7dc:	ldr	x20, [x0, #48]
     7e0:	mov	x19, x0
     7e4:	cbz	x20, 7f4 <BZ2_bzCompressEnd+0x28>
     7e8:	ldr	x8, [x20]
     7ec:	cmp	x8, x19
     7f0:	b.eq	804 <BZ2_bzCompressEnd+0x38>  // b.none
     7f4:	mov	w0, #0xfffffffe            	// #-2
     7f8:	ldp	x20, x19, [sp, #16]
     7fc:	ldp	x29, x30, [sp], #32
     800:	ret
     804:	ldr	x1, [x20, #24]
     808:	cbz	x1, 814 <BZ2_bzCompressEnd+0x48>
     80c:	ldp	x8, x0, [x19, #64]
     810:	blr	x8
     814:	ldr	x1, [x20, #32]
     818:	cbz	x1, 824 <BZ2_bzCompressEnd+0x58>
     81c:	ldp	x8, x0, [x19, #64]
     820:	blr	x8
     824:	ldr	x1, [x20, #40]
     828:	cbz	x1, 834 <BZ2_bzCompressEnd+0x68>
     82c:	ldp	x8, x0, [x19, #64]
     830:	blr	x8
     834:	ldp	x8, x0, [x19, #64]
     838:	ldr	x1, [x19, #48]
     83c:	blr	x8
     840:	mov	w0, wzr
     844:	str	xzr, [x19, #48]
     848:	b	7f8 <BZ2_bzCompressEnd+0x2c>

000000000000084c <BZ2_bzDecompressInit>:
     84c:	stp	x29, x30, [sp, #-48]!
     850:	str	x21, [sp, #16]
     854:	stp	x20, x19, [sp, #32]
     858:	mov	x29, sp
     85c:	mov	x21, x0
     860:	cmp	w1, #0x4
     864:	mov	w0, #0xfffffffe            	// #-2
     868:	b.hi	904 <BZ2_bzDecompressInit+0xb8>  // b.pmore
     86c:	cbz	x21, 904 <BZ2_bzDecompressInit+0xb8>
     870:	mov	w20, w2
     874:	cmp	w2, #0x1
     878:	b.hi	904 <BZ2_bzDecompressInit+0xb8>  // b.pmore
     87c:	ldr	x8, [x21, #56]
     880:	mov	w19, w1
     884:	cbnz	x8, 894 <BZ2_bzDecompressInit+0x48>
     888:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     88c:	add	x8, x8, #0x0
     890:	str	x8, [x21, #56]
     894:	ldr	x9, [x21, #64]
     898:	cbnz	x9, 8a8 <BZ2_bzDecompressInit+0x5c>
     89c:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     8a0:	add	x9, x9, #0x0
     8a4:	str	x9, [x21, #64]
     8a8:	ldr	x0, [x21, #72]
     8ac:	mov	w1, #0xfa90                	// #64144
     8b0:	mov	w2, #0x1                   	// #1
     8b4:	blr	x8
     8b8:	cbz	x0, 900 <BZ2_bzDecompressInit+0xb4>
     8bc:	mov	x8, x0
     8c0:	mov	w0, wzr
     8c4:	mov	w9, #0xa                   	// #10
     8c8:	movi	v0.2d, #0x0
     8cc:	str	x21, [x8]
     8d0:	str	x8, [x21, #48]
     8d4:	str	w9, [x8, #8]
     8d8:	str	wzr, [x8, #3188]
     8dc:	str	d0, [x8, #32]
     8e0:	stur	d0, [x21, #12]
     8e4:	stur	d0, [x21, #36]
     8e8:	strb	w20, [x8, #44]
     8ec:	str	xzr, [x8, #3152]
     8f0:	str	xzr, [x8, #3168]
     8f4:	str	xzr, [x8, #3160]
     8f8:	stp	wzr, w19, [x8, #48]
     8fc:	b	904 <BZ2_bzDecompressInit+0xb8>
     900:	mov	w0, #0xfffffffd            	// #-3
     904:	ldp	x20, x19, [sp, #32]
     908:	ldr	x21, [sp, #16]
     90c:	ldp	x29, x30, [sp], #48
     910:	ret

0000000000000914 <BZ2_indexIntoF>:
     914:	mov	w8, w0
     918:	mov	w0, wzr
     91c:	mov	w9, #0x100                 	// #256
     920:	add	w10, w0, w9
     924:	asr	w10, w10, #1
     928:	ldr	w11, [x1, w10, sxtw #2]
     92c:	cmp	w11, w8
     930:	csel	w9, w10, w9, gt
     934:	csel	w0, w0, w10, gt
     938:	sub	w10, w9, w0
     93c:	cmp	w10, #0x1
     940:	b.ne	920 <BZ2_indexIntoF+0xc>  // b.any
     944:	ret

0000000000000948 <BZ2_bzDecompress>:
     948:	stp	x29, x30, [sp, #-96]!
     94c:	stp	x28, x27, [sp, #16]
     950:	stp	x26, x25, [sp, #32]
     954:	stp	x24, x23, [sp, #48]
     958:	stp	x22, x21, [sp, #64]
     95c:	stp	x20, x19, [sp, #80]
     960:	mov	x29, sp
     964:	cbz	x0, 97c <BZ2_bzDecompress+0x34>
     968:	ldr	x19, [x0, #48]
     96c:	cbz	x19, 97c <BZ2_bzDecompress+0x34>
     970:	ldr	x8, [x19]
     974:	cmp	x8, x0
     978:	b.eq	99c <BZ2_bzDecompress+0x54>  // b.none
     97c:	mov	w0, #0xfffffffe            	// #-2
     980:	ldp	x20, x19, [sp, #80]
     984:	ldp	x22, x21, [sp, #64]
     988:	ldp	x24, x23, [sp, #48]
     98c:	ldp	x26, x25, [sp, #32]
     990:	ldp	x28, x27, [sp, #16]
     994:	ldp	x29, x30, [sp], #96
     998:	ret
     99c:	ldr	w8, [x19, #8]
     9a0:	mov	w9, #0xfa50                	// #64080
     9a4:	mov	w22, #0x86a0                	// #34464
     9a8:	adrp	x23, 0 <BZ2_crc32Table>
     9ac:	adrp	x25, 0 <BZ2_rNums>
     9b0:	movk	w22, #0x1, lsl #16
     9b4:	add	x23, x23, #0x0
     9b8:	mov	w24, #0x1                   	// #1
     9bc:	add	x25, x25, #0x0
     9c0:	mov	w26, #0x2                   	// #2
     9c4:	mov	w27, #0x3                   	// #3
     9c8:	add	x28, x19, x9
     9cc:	adrp	x21, 0 <stderr>
     9d0:	mov	w20, #0xe                   	// #14
     9d4:	cmp	w8, #0x1
     9d8:	b.eq	16bc <BZ2_bzDecompress+0xd74>  // b.none
     9dc:	cmp	w8, #0x2
     9e0:	b.eq	9f0 <BZ2_bzDecompress+0xa8>  // b.none
     9e4:	cmp	w8, #0xa
     9e8:	b.lt	9d4 <BZ2_bzDecompress+0x8c>  // b.tstop
     9ec:	b	1654 <BZ2_bzDecompress+0xd0c>
     9f0:	ldrb	w8, [x19, #44]
     9f4:	ldrb	w9, [x19, #20]
     9f8:	cbz	w8, e24 <BZ2_bzDecompress+0x4dc>
     9fc:	ldr	x8, [x19]
     a00:	ldr	w10, [x8, #32]
     a04:	cbz	w9, 10d8 <BZ2_bzDecompress+0x790>
     a08:	cbz	w10, 15f8 <BZ2_bzDecompress+0xcb0>
     a0c:	ldr	w13, [x19, #16]
     a10:	cbnz	w13, db4 <BZ2_bzDecompress+0x46c>
     a14:	ldr	w13, [x28]
     a18:	ldr	w9, [x19, #1092]
     a1c:	add	w10, w13, #0x1
     a20:	cmp	w9, w10
     a24:	b.eq	15f8 <BZ2_bzDecompress+0xcb0>  // b.none
     a28:	b.gt	16c4 <BZ2_bzDecompress+0xd7c>
     a2c:	ldr	w10, [x19, #40]
     a30:	ldp	w15, w14, [x19, #60]
     a34:	str	w24, [x19, #16]
     a38:	mul	w12, w10, w22
     a3c:	cmp	w15, w12
     a40:	strb	w14, [x19, #12]
     a44:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     a48:	mov	w16, wzr
     a4c:	mov	w10, #0x100                 	// #256
     a50:	add	w11, w16, w10
     a54:	asr	w11, w11, #1
     a58:	add	x17, x19, w11, sxtw #2
     a5c:	ldr	w17, [x17, #1096]
     a60:	cmp	w17, w15
     a64:	csel	w10, w11, w10, gt
     a68:	csel	w16, w16, w11, gt
     a6c:	sub	w11, w10, w16
     a70:	cmp	w11, #0x1
     a74:	b.ne	a50 <BZ2_bzDecompress+0x108>  // b.any
     a78:	ldr	x11, [x19, #3168]
     a7c:	ldr	x10, [x19, #3160]
     a80:	lsr	x17, x15, #1
     a84:	ldrb	w18, [x11, x17]
     a88:	lsl	w17, w15, #2
     a8c:	and	x0, x17, #0x4
     a90:	ldrh	w17, [x10, x15, lsl #1]
     a94:	lsr	x18, x18, x0
     a98:	ldr	w15, [x19, #24]
     a9c:	lsl	w18, w18, #16
     aa0:	and	x18, x18, #0xf0000
     aa4:	orr	x1, x18, x17
     aa8:	str	w1, [x19, #60]
     aac:	cbnz	w15, ac8 <BZ2_bzDecompress+0x180>
     ab0:	ldrsw	x18, [x19, #28]
     ab4:	ldr	w15, [x25, x18, lsl #2]
     ab8:	add	w0, w18, #0x1
     abc:	cmp	w0, #0x200
     ac0:	csinc	w18, wzr, w18, eq  // eq = none
     ac4:	stp	w15, w18, [x19, #24]
     ac8:	sub	w18, w15, #0x1
     acc:	add	w15, w9, #0x1
     ad0:	cmp	w9, w13
     ad4:	str	w18, [x19, #24]
     ad8:	str	w15, [x19, #1092]
     adc:	b.eq	d98 <BZ2_bzDecompress+0x450>  // b.none
     ae0:	cmp	w18, #0x1
     ae4:	cset	w0, eq  // eq = none
     ae8:	and	w16, w16, #0xff
     aec:	eor	w16, w16, w0
     af0:	cmp	w16, w14
     af4:	b.ne	d94 <BZ2_bzDecompress+0x44c>  // b.any
     af8:	cmp	w1, w12
     afc:	str	w26, [x19, #16]
     b00:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     b04:	mov	w0, wzr
     b08:	mov	w16, #0x100                 	// #256
     b0c:	add	w2, w0, w16
     b10:	asr	w2, w2, #1
     b14:	add	x3, x19, w2, sxtw #2
     b18:	ldr	w3, [x3, #1096]
     b1c:	cmp	w3, w1
     b20:	csel	w16, w2, w16, gt
     b24:	csel	w0, w0, w2, gt
     b28:	sub	w2, w16, w0
     b2c:	cmp	w2, #0x1
     b30:	b.ne	b0c <BZ2_bzDecompress+0x1c4>  // b.any
     b34:	lsr	x16, x1, #1
     b38:	ldrb	w2, [x11, x16]
     b3c:	lsl	w17, w17, #2
     b40:	ldrh	w16, [x10, x1, lsl #1]
     b44:	and	x17, x17, #0x4
     b48:	lsr	x17, x2, x17
     b4c:	lsl	w17, w17, #16
     b50:	and	x17, x17, #0xf0000
     b54:	orr	x1, x17, x16
     b58:	str	w1, [x19, #60]
     b5c:	cbnz	w18, b78 <BZ2_bzDecompress+0x230>
     b60:	ldrsw	x17, [x19, #28]
     b64:	ldr	w18, [x25, x17, lsl #2]
     b68:	add	w2, w17, #0x1
     b6c:	cmp	w2, #0x200
     b70:	csinc	w17, wzr, w17, eq  // eq = none
     b74:	stp	w18, w17, [x19, #24]
     b78:	sub	w18, w18, #0x1
     b7c:	add	w17, w9, #0x2
     b80:	cmp	w15, w13
     b84:	str	w18, [x19, #24]
     b88:	str	w17, [x19, #1092]
     b8c:	b.eq	dac <BZ2_bzDecompress+0x464>  // b.none
     b90:	cmp	w18, #0x1
     b94:	cset	w15, eq  // eq = none
     b98:	and	w0, w0, #0xff
     b9c:	eor	w15, w0, w15
     ba0:	cmp	w15, w14
     ba4:	b.ne	da8 <BZ2_bzDecompress+0x460>  // b.any
     ba8:	cmp	w1, w12
     bac:	str	w27, [x19, #16]
     bb0:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     bb4:	mov	w0, wzr
     bb8:	mov	w15, #0x100                 	// #256
     bbc:	add	w2, w0, w15
     bc0:	asr	w2, w2, #1
     bc4:	add	x3, x19, w2, sxtw #2
     bc8:	ldr	w3, [x3, #1096]
     bcc:	cmp	w3, w1
     bd0:	csel	w15, w2, w15, gt
     bd4:	csel	w0, w0, w2, gt
     bd8:	sub	w2, w15, w0
     bdc:	cmp	w2, #0x1
     be0:	b.ne	bbc <BZ2_bzDecompress+0x274>  // b.any
     be4:	lsr	x15, x1, #1
     be8:	ldrb	w2, [x11, x15]
     bec:	lsl	w16, w16, #2
     bf0:	ldrh	w15, [x10, x1, lsl #1]
     bf4:	and	x16, x16, #0x4
     bf8:	lsr	x16, x2, x16
     bfc:	lsl	w16, w16, #16
     c00:	and	x16, x16, #0xf0000
     c04:	orr	x1, x16, x15
     c08:	str	w1, [x19, #60]
     c0c:	cbnz	w18, c28 <BZ2_bzDecompress+0x2e0>
     c10:	ldrsw	x16, [x19, #28]
     c14:	ldr	w18, [x25, x16, lsl #2]
     c18:	add	w2, w16, #0x1
     c1c:	cmp	w2, #0x200
     c20:	csinc	w16, wzr, w16, eq  // eq = none
     c24:	stp	w18, w16, [x19, #24]
     c28:	sub	w16, w18, #0x1
     c2c:	add	w18, w9, #0x3
     c30:	cmp	w17, w13
     c34:	str	w16, [x19, #24]
     c38:	str	w18, [x19, #1092]
     c3c:	b.eq	e1c <BZ2_bzDecompress+0x4d4>  // b.none
     c40:	cmp	w16, #0x1
     c44:	cset	w13, eq  // eq = none
     c48:	and	w17, w0, #0xff
     c4c:	eor	w13, w17, w13
     c50:	cmp	w13, w14
     c54:	b.ne	e18 <BZ2_bzDecompress+0x4d0>  // b.any
     c58:	cmp	w1, w12
     c5c:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     c60:	mov	w13, wzr
     c64:	mov	w14, #0x100                 	// #256
     c68:	add	w17, w13, w14
     c6c:	asr	w17, w17, #1
     c70:	add	x18, x19, w17, sxtw #2
     c74:	ldr	w18, [x18, #1096]
     c78:	cmp	w18, w1
     c7c:	csel	w14, w17, w14, gt
     c80:	csel	w13, w13, w17, gt
     c84:	sub	w17, w14, w13
     c88:	cmp	w17, #0x1
     c8c:	b.ne	c68 <BZ2_bzDecompress+0x320>  // b.any
     c90:	lsr	x14, x1, #1
     c94:	ldrb	w17, [x11, x14]
     c98:	lsl	w15, w15, #2
     c9c:	ldrh	w14, [x10, x1, lsl #1]
     ca0:	and	x15, x15, #0x4
     ca4:	lsr	x15, x17, x15
     ca8:	lsl	w15, w15, #16
     cac:	and	x15, x15, #0xf0000
     cb0:	orr	x15, x15, x14
     cb4:	str	w15, [x19, #60]
     cb8:	cbnz	w16, cd4 <BZ2_bzDecompress+0x38c>
     cbc:	ldrsw	x17, [x19, #28]
     cc0:	ldr	w16, [x25, x17, lsl #2]
     cc4:	add	w18, w17, #0x1
     cc8:	cmp	w18, #0x200
     ccc:	csinc	w17, wzr, w17, eq  // eq = none
     cd0:	stp	w16, w17, [x19, #24]
     cd4:	sub	w16, w16, #0x1
     cd8:	add	w17, w9, #0x4
     cdc:	cmp	w16, #0x1
     ce0:	and	w13, w13, #0xff
     ce4:	str	w17, [x19, #1092]
     ce8:	cset	w17, eq  // eq = none
     cec:	eor	w13, w13, w17
     cf0:	add	w13, w13, #0x4
     cf4:	cmp	w15, w12
     cf8:	str	w16, [x19, #24]
     cfc:	str	w13, [x19, #16]
     d00:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     d04:	mov	w12, wzr
     d08:	mov	w17, #0x100                 	// #256
     d0c:	add	w18, w12, w17
     d10:	asr	w18, w18, #1
     d14:	add	x0, x19, w18, sxtw #2
     d18:	ldr	w0, [x0, #1096]
     d1c:	cmp	w0, w15
     d20:	csel	w17, w18, w17, gt
     d24:	csel	w12, w12, w18, gt
     d28:	sub	w18, w17, w12
     d2c:	cmp	w18, #0x1
     d30:	b.ne	d0c <BZ2_bzDecompress+0x3c4>  // b.any
     d34:	str	w12, [x19, #64]
     d38:	lsr	x17, x15, #1
     d3c:	ldrb	w11, [x11, x17]
     d40:	ldrh	w10, [x10, x15, lsl #1]
     d44:	ubfiz	w14, w14, #2, #1
     d48:	lsr	w11, w11, w14
     d4c:	bfi	w10, w11, #16, #4
     d50:	str	w10, [x19, #60]
     d54:	cbnz	w16, d70 <BZ2_bzDecompress+0x428>
     d58:	ldrsw	x10, [x19, #28]
     d5c:	ldr	w16, [x25, x10, lsl #2]
     d60:	add	w11, w10, #0x1
     d64:	cmp	w11, #0x200
     d68:	csinc	w10, wzr, w10, eq  // eq = none
     d6c:	stp	w16, w10, [x19, #24]
     d70:	sub	w10, w16, #0x1
     d74:	cmp	w10, #0x1
     d78:	str	w10, [x19, #24]
     d7c:	cset	w10, eq  // eq = none
     d80:	add	w9, w9, #0x5
     d84:	eor	w10, w12, w10
     d88:	str	w10, [x19, #64]
     d8c:	str	w9, [x19, #1092]
     d90:	b	d9c <BZ2_bzDecompress+0x454>
     d94:	str	w16, [x19, #64]
     d98:	mov	w13, #0x1                   	// #1
     d9c:	ldr	w9, [x8, #32]
     da0:	cbnz	w9, a10 <BZ2_bzDecompress+0xc8>
     da4:	b	15f8 <BZ2_bzDecompress+0xcb0>
     da8:	str	w15, [x19, #64]
     dac:	mov	w13, #0x2                   	// #2
     db0:	b	d9c <BZ2_bzDecompress+0x454>
     db4:	ldrb	w9, [x19, #12]
     db8:	ldr	x8, [x8, #24]
     dbc:	strb	w9, [x8]
     dc0:	ldr	w9, [x19, #3184]
     dc4:	ldrb	w8, [x19, #12]
     dc8:	ldr	w10, [x19, #16]
     dcc:	eor	w8, w8, w9, lsr #24
     dd0:	ldr	w11, [x23, w8, uxtw #2]
     dd4:	ldr	x8, [x19]
     dd8:	sub	w13, w10, #0x1
     ddc:	str	w13, [x19, #16]
     de0:	eor	w9, w11, w9, lsl #8
     de4:	str	w9, [x19, #3184]
     de8:	ldr	x9, [x8, #24]
     dec:	ldp	w10, w11, [x8, #32]
     df0:	add	x9, x9, #0x1
     df4:	str	x9, [x8, #24]
     df8:	sub	w9, w10, #0x1
     dfc:	adds	w10, w11, #0x1
     e00:	stp	w9, w10, [x8, #32]
     e04:	b.cc	da0 <BZ2_bzDecompress+0x458>  // b.lo, b.ul, b.last
     e08:	ldr	w10, [x8, #40]
     e0c:	add	w10, w10, #0x1
     e10:	str	w10, [x8, #40]
     e14:	b	da0 <BZ2_bzDecompress+0x458>
     e18:	str	w13, [x19, #64]
     e1c:	mov	w13, #0x3                   	// #3
     e20:	b	d9c <BZ2_bzDecompress+0x454>
     e24:	cbz	w9, 13fc <BZ2_bzDecompress+0xab4>
     e28:	ldr	x8, [x19]
     e2c:	ldr	w9, [x8, #32]
     e30:	cbz	w9, 15f8 <BZ2_bzDecompress+0xcb0>
     e34:	ldr	w12, [x19, #16]
     e38:	cbnz	w12, 1068 <BZ2_bzDecompress+0x720>
     e3c:	ldr	w12, [x28]
     e40:	ldr	w9, [x19, #1092]
     e44:	add	w10, w12, #0x1
     e48:	cmp	w9, w10
     e4c:	b.eq	15f8 <BZ2_bzDecompress+0xcb0>  // b.none
     e50:	b.gt	16c4 <BZ2_bzDecompress+0xd7c>
     e54:	ldr	w10, [x19, #40]
     e58:	ldp	w14, w13, [x19, #60]
     e5c:	str	w24, [x19, #16]
     e60:	mul	w11, w10, w22
     e64:	cmp	w14, w11
     e68:	strb	w13, [x19, #12]
     e6c:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     e70:	ldr	x10, [x19, #3152]
     e74:	ldr	w17, [x10, x14, lsl #2]
     e78:	ldr	w14, [x19, #24]
     e7c:	lsr	x16, x17, #8
     e80:	str	w16, [x19, #60]
     e84:	cbnz	w14, ea0 <BZ2_bzDecompress+0x558>
     e88:	ldrsw	x15, [x19, #28]
     e8c:	ldr	w14, [x25, x15, lsl #2]
     e90:	add	w18, w15, #0x1
     e94:	cmp	w18, #0x200
     e98:	csinc	w15, wzr, w15, eq  // eq = none
     e9c:	stp	w14, w15, [x19, #24]
     ea0:	sub	w15, w14, #0x1
     ea4:	add	w14, w9, #0x1
     ea8:	cmp	w9, w12
     eac:	str	w15, [x19, #24]
     eb0:	str	w14, [x19, #1092]
     eb4:	b.eq	104c <BZ2_bzDecompress+0x704>  // b.none
     eb8:	cmp	w15, #0x1
     ebc:	cset	w18, eq  // eq = none
     ec0:	and	w17, w17, #0xff
     ec4:	eor	w17, w17, w18
     ec8:	cmp	w17, w13
     ecc:	b.ne	1048 <BZ2_bzDecompress+0x700>  // b.any
     ed0:	cmp	w16, w11
     ed4:	str	w26, [x19, #16]
     ed8:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     edc:	ldr	w18, [x10, x16, lsl #2]
     ee0:	lsr	x16, x18, #8
     ee4:	str	w16, [x19, #60]
     ee8:	cbnz	w15, f04 <BZ2_bzDecompress+0x5bc>
     eec:	ldrsw	x17, [x19, #28]
     ef0:	ldr	w15, [x25, x17, lsl #2]
     ef4:	add	w0, w17, #0x1
     ef8:	cmp	w0, #0x200
     efc:	csinc	w17, wzr, w17, eq  // eq = none
     f00:	stp	w15, w17, [x19, #24]
     f04:	sub	w17, w15, #0x1
     f08:	add	w15, w9, #0x2
     f0c:	cmp	w14, w12
     f10:	str	w17, [x19, #24]
     f14:	str	w15, [x19, #1092]
     f18:	b.eq	1060 <BZ2_bzDecompress+0x718>  // b.none
     f1c:	cmp	w17, #0x1
     f20:	cset	w14, eq  // eq = none
     f24:	and	w18, w18, #0xff
     f28:	eor	w14, w18, w14
     f2c:	cmp	w14, w13
     f30:	b.ne	105c <BZ2_bzDecompress+0x714>  // b.any
     f34:	cmp	w16, w11
     f38:	str	w27, [x19, #16]
     f3c:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     f40:	ldr	w18, [x10, x16, lsl #2]
     f44:	lsr	x14, x18, #8
     f48:	str	w14, [x19, #60]
     f4c:	cbnz	w17, f68 <BZ2_bzDecompress+0x620>
     f50:	ldrsw	x16, [x19, #28]
     f54:	ldr	w17, [x25, x16, lsl #2]
     f58:	add	w0, w16, #0x1
     f5c:	cmp	w0, #0x200
     f60:	csinc	w16, wzr, w16, eq  // eq = none
     f64:	stp	w17, w16, [x19, #24]
     f68:	sub	w16, w17, #0x1
     f6c:	add	w17, w9, #0x3
     f70:	cmp	w15, w12
     f74:	str	w16, [x19, #24]
     f78:	str	w17, [x19, #1092]
     f7c:	b.eq	10d0 <BZ2_bzDecompress+0x788>  // b.none
     f80:	cmp	w16, #0x1
     f84:	cset	w12, eq  // eq = none
     f88:	and	w15, w18, #0xff
     f8c:	eor	w12, w15, w12
     f90:	cmp	w12, w13
     f94:	b.ne	10cc <BZ2_bzDecompress+0x784>  // b.any
     f98:	cmp	w14, w11
     f9c:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     fa0:	ldr	w12, [x10, x14, lsl #2]
     fa4:	lsr	x13, x12, #8
     fa8:	str	w13, [x19, #60]
     fac:	cbnz	w16, fc8 <BZ2_bzDecompress+0x680>
     fb0:	ldrsw	x14, [x19, #28]
     fb4:	ldr	w16, [x25, x14, lsl #2]
     fb8:	add	w15, w14, #0x1
     fbc:	cmp	w15, #0x200
     fc0:	csinc	w14, wzr, w14, eq  // eq = none
     fc4:	stp	w16, w14, [x19, #24]
     fc8:	sub	w14, w16, #0x1
     fcc:	add	w15, w9, #0x4
     fd0:	cmp	w14, #0x1
     fd4:	and	w12, w12, #0xff
     fd8:	str	w15, [x19, #1092]
     fdc:	cset	w15, eq  // eq = none
     fe0:	eor	w12, w12, w15
     fe4:	add	w12, w12, #0x4
     fe8:	cmp	w13, w11
     fec:	str	w14, [x19, #24]
     ff0:	str	w12, [x19, #16]
     ff4:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
     ff8:	ldr	w11, [x10, x13, lsl #2]
     ffc:	and	w10, w11, #0xff
    1000:	lsr	w11, w11, #8
    1004:	stp	w11, w10, [x19, #60]
    1008:	cbnz	w14, 1024 <BZ2_bzDecompress+0x6dc>
    100c:	ldrsw	x11, [x19, #28]
    1010:	ldr	w14, [x25, x11, lsl #2]
    1014:	add	w13, w11, #0x1
    1018:	cmp	w13, #0x200
    101c:	csinc	w11, wzr, w11, eq  // eq = none
    1020:	stp	w14, w11, [x19, #24]
    1024:	sub	w11, w14, #0x1
    1028:	cmp	w11, #0x1
    102c:	str	w11, [x19, #24]
    1030:	cset	w11, eq  // eq = none
    1034:	add	w9, w9, #0x5
    1038:	eor	w10, w10, w11
    103c:	str	w10, [x19, #64]
    1040:	str	w9, [x19, #1092]
    1044:	b	1050 <BZ2_bzDecompress+0x708>
    1048:	str	w17, [x19, #64]
    104c:	mov	w12, #0x1                   	// #1
    1050:	ldr	w9, [x8, #32]
    1054:	cbnz	w9, e38 <BZ2_bzDecompress+0x4f0>
    1058:	b	15f8 <BZ2_bzDecompress+0xcb0>
    105c:	str	w14, [x19, #64]
    1060:	mov	w12, #0x2                   	// #2
    1064:	b	1050 <BZ2_bzDecompress+0x708>
    1068:	ldrb	w9, [x19, #12]
    106c:	ldr	x8, [x8, #24]
    1070:	strb	w9, [x8]
    1074:	ldr	w9, [x19, #3184]
    1078:	ldrb	w8, [x19, #12]
    107c:	ldr	w10, [x19, #16]
    1080:	eor	w8, w8, w9, lsr #24
    1084:	ldr	w11, [x23, w8, uxtw #2]
    1088:	ldr	x8, [x19]
    108c:	sub	w12, w10, #0x1
    1090:	str	w12, [x19, #16]
    1094:	eor	w9, w11, w9, lsl #8
    1098:	str	w9, [x19, #3184]
    109c:	ldr	x9, [x8, #24]
    10a0:	ldp	w10, w11, [x8, #32]
    10a4:	add	x9, x9, #0x1
    10a8:	str	x9, [x8, #24]
    10ac:	sub	w9, w10, #0x1
    10b0:	adds	w10, w11, #0x1
    10b4:	stp	w9, w10, [x8, #32]
    10b8:	b.cc	1054 <BZ2_bzDecompress+0x70c>  // b.lo, b.ul, b.last
    10bc:	ldr	w10, [x8, #40]
    10c0:	add	w10, w10, #0x1
    10c4:	str	w10, [x8, #40]
    10c8:	b	1054 <BZ2_bzDecompress+0x70c>
    10cc:	str	w12, [x19, #64]
    10d0:	mov	w12, #0x3                   	// #3
    10d4:	b	1050 <BZ2_bzDecompress+0x708>
    10d8:	cbz	w10, 15f8 <BZ2_bzDecompress+0xcb0>
    10dc:	ldr	w13, [x19, #16]
    10e0:	cbnz	w13, 138c <BZ2_bzDecompress+0xa44>
    10e4:	ldr	w13, [x28]
    10e8:	ldr	w9, [x19, #1092]
    10ec:	add	w10, w13, #0x1
    10f0:	cmp	w9, w10
    10f4:	b.eq	15f8 <BZ2_bzDecompress+0xcb0>  // b.none
    10f8:	b.gt	16c4 <BZ2_bzDecompress+0xd7c>
    10fc:	ldr	w10, [x19, #40]
    1100:	ldp	w17, w14, [x19, #60]
    1104:	str	w24, [x19, #16]
    1108:	mul	w12, w10, w22
    110c:	cmp	w17, w12
    1110:	strb	w14, [x19, #12]
    1114:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    1118:	mov	w16, wzr
    111c:	mov	w10, #0x100                 	// #256
    1120:	add	w11, w16, w10
    1124:	asr	w11, w11, #1
    1128:	add	x15, x19, w11, sxtw #2
    112c:	ldr	w15, [x15, #1096]
    1130:	cmp	w15, w17
    1134:	csel	w10, w11, w10, gt
    1138:	csel	w16, w16, w11, gt
    113c:	sub	w11, w10, w16
    1140:	cmp	w11, #0x1
    1144:	b.ne	1120 <BZ2_bzDecompress+0x7d8>  // b.any
    1148:	ldr	x11, [x19, #3168]
    114c:	ldr	x10, [x19, #3160]
    1150:	lsr	x18, x17, #1
    1154:	lsl	w0, w17, #2
    1158:	ldrb	w18, [x11, x18]
    115c:	and	x0, x0, #0x4
    1160:	ldrh	w17, [x10, x17, lsl #1]
    1164:	add	w15, w9, #0x1
    1168:	lsr	x18, x18, x0
    116c:	lsl	w18, w18, #16
    1170:	and	x18, x18, #0xf0000
    1174:	cmp	w9, w13
    1178:	orr	x0, x18, x17
    117c:	str	w0, [x19, #60]
    1180:	str	w15, [x19, #1092]
    1184:	b.eq	1370 <BZ2_bzDecompress+0xa28>  // b.none
    1188:	and	w16, w16, #0xff
    118c:	cmp	w16, w14
    1190:	b.ne	136c <BZ2_bzDecompress+0xa24>  // b.any
    1194:	cmp	w0, w12
    1198:	str	w26, [x19, #16]
    119c:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    11a0:	mov	w18, wzr
    11a4:	mov	w16, #0x100                 	// #256
    11a8:	add	w1, w18, w16
    11ac:	asr	w1, w1, #1
    11b0:	add	x2, x19, w1, sxtw #2
    11b4:	ldr	w2, [x2, #1096]
    11b8:	cmp	w2, w0
    11bc:	csel	w16, w1, w16, gt
    11c0:	csel	w18, w18, w1, gt
    11c4:	sub	w1, w16, w18
    11c8:	cmp	w1, #0x1
    11cc:	b.ne	11a8 <BZ2_bzDecompress+0x860>  // b.any
    11d0:	ldrh	w16, [x10, x0, lsl #1]
    11d4:	lsr	x0, x0, #1
    11d8:	ldrb	w0, [x11, x0]
    11dc:	lsl	w1, w17, #2
    11e0:	cmp	w15, w13
    11e4:	and	x15, x1, #0x4
    11e8:	lsr	x15, x0, x15
    11ec:	lsl	w15, w15, #16
    11f0:	and	x15, x15, #0xf0000
    11f4:	add	w17, w9, #0x2
    11f8:	orr	x0, x15, x16
    11fc:	str	w0, [x19, #60]
    1200:	str	w17, [x19, #1092]
    1204:	b.eq	1384 <BZ2_bzDecompress+0xa3c>  // b.none
    1208:	and	w15, w18, #0xff
    120c:	cmp	w15, w14
    1210:	b.ne	1380 <BZ2_bzDecompress+0xa38>  // b.any
    1214:	cmp	w0, w12
    1218:	str	w27, [x19, #16]
    121c:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    1220:	mov	w18, wzr
    1224:	mov	w15, #0x100                 	// #256
    1228:	add	w1, w18, w15
    122c:	asr	w1, w1, #1
    1230:	add	x2, x19, w1, sxtw #2
    1234:	ldr	w2, [x2, #1096]
    1238:	cmp	w2, w0
    123c:	csel	w15, w1, w15, gt
    1240:	csel	w18, w18, w1, gt
    1244:	sub	w1, w15, w18
    1248:	cmp	w1, #0x1
    124c:	b.ne	1228 <BZ2_bzDecompress+0x8e0>  // b.any
    1250:	ldrh	w15, [x10, x0, lsl #1]
    1254:	lsr	x0, x0, #1
    1258:	ldrb	w0, [x11, x0]
    125c:	lsl	w16, w16, #2
    1260:	cmp	w17, w13
    1264:	and	x13, x16, #0x4
    1268:	lsr	x13, x0, x13
    126c:	lsl	w13, w13, #16
    1270:	and	x13, x13, #0xf0000
    1274:	add	w1, w9, #0x3
    1278:	orr	x16, x13, x15
    127c:	str	w16, [x19, #60]
    1280:	str	w1, [x19, #1092]
    1284:	b.eq	13f4 <BZ2_bzDecompress+0xaac>  // b.none
    1288:	and	w13, w18, #0xff
    128c:	cmp	w13, w14
    1290:	b.ne	13f0 <BZ2_bzDecompress+0xaa8>  // b.any
    1294:	cmp	w16, w12
    1298:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    129c:	mov	w13, wzr
    12a0:	mov	w14, #0x100                 	// #256
    12a4:	add	w17, w13, w14
    12a8:	asr	w17, w17, #1
    12ac:	add	x18, x19, w17, sxtw #2
    12b0:	ldr	w18, [x18, #1096]
    12b4:	cmp	w18, w16
    12b8:	csel	w14, w17, w14, gt
    12bc:	csel	w13, w13, w17, gt
    12c0:	sub	w17, w14, w13
    12c4:	cmp	w17, #0x1
    12c8:	b.ne	12a4 <BZ2_bzDecompress+0x95c>  // b.any
    12cc:	ldrh	w14, [x10, x16, lsl #1]
    12d0:	lsr	x16, x16, #1
    12d4:	ldrb	w16, [x11, x16]
    12d8:	lsl	w15, w15, #2
    12dc:	and	x15, x15, #0x4
    12e0:	and	w13, w13, #0xff
    12e4:	lsr	x15, x16, x15
    12e8:	lsl	w15, w15, #16
    12ec:	and	x15, x15, #0xf0000
    12f0:	orr	x15, x15, x14
    12f4:	add	w17, w9, #0x4
    12f8:	add	w13, w13, #0x4
    12fc:	cmp	w15, w12
    1300:	str	w17, [x19, #1092]
    1304:	str	w15, [x19, #60]
    1308:	str	w13, [x19, #16]
    130c:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    1310:	mov	w12, wzr
    1314:	mov	w16, #0x100                 	// #256
    1318:	add	w17, w12, w16
    131c:	asr	w17, w17, #1
    1320:	add	x18, x19, w17, sxtw #2
    1324:	ldr	w18, [x18, #1096]
    1328:	cmp	w18, w15
    132c:	csel	w16, w17, w16, gt
    1330:	csel	w12, w12, w17, gt
    1334:	sub	w17, w16, w12
    1338:	cmp	w17, #0x1
    133c:	b.ne	1318 <BZ2_bzDecompress+0x9d0>  // b.any
    1340:	str	w12, [x19, #64]
    1344:	lsr	x12, x15, #1
    1348:	ldrb	w11, [x11, x12]
    134c:	ldrh	w10, [x10, x15, lsl #1]
    1350:	ubfiz	w12, w14, #2, #1
    1354:	add	w9, w9, #0x5
    1358:	lsr	w11, w11, w12
    135c:	bfi	w10, w11, #16, #4
    1360:	str	w10, [x19, #60]
    1364:	str	w9, [x19, #1092]
    1368:	b	1374 <BZ2_bzDecompress+0xa2c>
    136c:	str	w16, [x19, #64]
    1370:	mov	w13, #0x1                   	// #1
    1374:	ldr	w9, [x8, #32]
    1378:	cbnz	w9, 10e0 <BZ2_bzDecompress+0x798>
    137c:	b	15f8 <BZ2_bzDecompress+0xcb0>
    1380:	str	w15, [x19, #64]
    1384:	mov	w13, #0x2                   	// #2
    1388:	b	1374 <BZ2_bzDecompress+0xa2c>
    138c:	ldrb	w9, [x19, #12]
    1390:	ldr	x8, [x8, #24]
    1394:	strb	w9, [x8]
    1398:	ldr	w9, [x19, #3184]
    139c:	ldrb	w8, [x19, #12]
    13a0:	ldr	w10, [x19, #16]
    13a4:	eor	w8, w8, w9, lsr #24
    13a8:	ldr	w11, [x23, w8, uxtw #2]
    13ac:	ldr	x8, [x19]
    13b0:	sub	w13, w10, #0x1
    13b4:	str	w13, [x19, #16]
    13b8:	eor	w9, w11, w9, lsl #8
    13bc:	str	w9, [x19, #3184]
    13c0:	ldr	x9, [x8, #24]
    13c4:	ldp	w10, w11, [x8, #32]
    13c8:	add	x9, x9, #0x1
    13cc:	str	x9, [x8, #24]
    13d0:	sub	w9, w10, #0x1
    13d4:	adds	w10, w11, #0x1
    13d8:	stp	w9, w10, [x8, #32]
    13dc:	b.cc	1378 <BZ2_bzDecompress+0xa30>  // b.lo, b.ul, b.last
    13e0:	ldr	w10, [x8, #40]
    13e4:	add	w10, w10, #0x1
    13e8:	str	w10, [x8, #40]
    13ec:	b	1378 <BZ2_bzDecompress+0xa30>
    13f0:	str	w13, [x19, #64]
    13f4:	mov	w13, #0x3                   	// #3
    13f8:	b	1374 <BZ2_bzDecompress+0xa2c>
    13fc:	ldr	x10, [x19]
    1400:	ldr	w15, [x28]
    1404:	ldr	w12, [x19, #40]
    1408:	ldr	w8, [x19, #3184]
    140c:	ldr	w11, [x10, #32]
    1410:	ldrb	w17, [x19, #12]
    1414:	ldr	w1, [x19, #16]
    1418:	ldr	w0, [x19, #1092]
    141c:	ldr	x9, [x19, #3152]
    1420:	ldp	w13, w18, [x19, #60]
    1424:	ldr	x10, [x10, #24]
    1428:	add	w14, w15, #0x1
    142c:	mul	w16, w12, w22
    1430:	mov	w12, w11
    1434:	cmp	w1, #0x1
    1438:	b.lt	14a0 <BZ2_bzDecompress+0xb58>  // b.tstop
    143c:	cbz	w12, 15b4 <BZ2_bzDecompress+0xc6c>
    1440:	mov	w5, w1
    1444:	mov	x2, xzr
    1448:	and	w3, w17, #0xff
    144c:	mov	w4, w12
    1450:	sub	x5, x5, #0x1
    1454:	cmp	w5, w2
    1458:	b.eq	147c <BZ2_bzDecompress+0xb34>  // b.none
    145c:	strb	w17, [x10, x2]
    1460:	eor	w6, w3, w8, lsr #24
    1464:	ldr	w6, [x23, w6, uxtw #2]
    1468:	add	x2, x2, #0x1
    146c:	cmp	w4, w2
    1470:	eor	w8, w6, w8, lsl #8
    1474:	b.ne	1454 <BZ2_bzDecompress+0xb0c>  // b.any
    1478:	b	15a8 <BZ2_bzDecompress+0xc60>
    147c:	sub	w12, w12, w2
    1480:	add	x10, x10, x2
    1484:	cbz	w12, 16a4 <BZ2_bzDecompress+0xd5c>
    1488:	and	w1, w17, #0xff
    148c:	strb	w17, [x10], #1
    1490:	eor	w1, w1, w8, lsr #24
    1494:	ldr	w1, [x23, w1, uxtw #2]
    1498:	sub	w12, w12, #0x1
    149c:	eor	w8, w1, w8, lsl #8
    14a0:	mov	w3, w0
    14a4:	mov	w2, w18
    14a8:	cmp	w0, w14
    14ac:	b.gt	16c4 <BZ2_bzDecompress+0xd7c>
    14b0:	b.eq	16ac <BZ2_bzDecompress+0xd64>  // b.none
    14b4:	cmp	w13, w16
    14b8:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    14bc:	ldr	w17, [x9, w13, uxtw #2]
    14c0:	add	w0, w3, #0x1
    14c4:	and	w18, w17, #0xff
    14c8:	lsr	x13, x17, #8
    14cc:	cmp	w18, w2
    14d0:	b.ne	14e0 <BZ2_bzDecompress+0xb98>  // b.any
    14d4:	cmp	w3, w15
    14d8:	b.ne	14e8 <BZ2_bzDecompress+0xba0>  // b.any
    14dc:	mov	w18, w2
    14e0:	mov	w17, w2
    14e4:	b	1484 <BZ2_bzDecompress+0xb3c>
    14e8:	cmp	w13, w16
    14ec:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    14f0:	ldr	w5, [x9, x13, lsl #2]
    14f4:	add	w4, w3, #0x2
    14f8:	cmp	w4, w14
    14fc:	mov	w1, #0x2                   	// #2
    1500:	lsr	x13, x5, #8
    1504:	mov	w0, w14
    1508:	mov	w18, w2
    150c:	mov	w17, w2
    1510:	b.eq	1434 <BZ2_bzDecompress+0xaec>  // b.none
    1514:	and	w18, w5, #0xff
    1518:	cmp	w18, w2
    151c:	mov	w1, #0x2                   	// #2
    1520:	mov	w0, w4
    1524:	mov	w17, w2
    1528:	b.ne	1434 <BZ2_bzDecompress+0xaec>  // b.any
    152c:	cmp	w13, w16
    1530:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    1534:	ldr	w5, [x9, x13, lsl #2]
    1538:	add	w4, w3, #0x3
    153c:	cmp	w4, w14
    1540:	mov	w1, #0x3                   	// #3
    1544:	lsr	x13, x5, #8
    1548:	mov	w0, w14
    154c:	mov	w18, w2
    1550:	mov	w17, w2
    1554:	b.eq	1434 <BZ2_bzDecompress+0xaec>  // b.none
    1558:	and	w18, w5, #0xff
    155c:	cmp	w18, w2
    1560:	mov	w1, #0x3                   	// #3
    1564:	mov	w0, w4
    1568:	mov	w17, w2
    156c:	b.ne	1434 <BZ2_bzDecompress+0xaec>  // b.any
    1570:	cmp	w13, w16
    1574:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    1578:	ldr	w13, [x9, x13, lsl #2]
    157c:	lsr	x17, x13, #8
    1580:	cmp	w17, w16
    1584:	b.cs	16c4 <BZ2_bzDecompress+0xd7c>  // b.hs, b.nlast
    1588:	ldr	w17, [x9, x17, lsl #2]
    158c:	and	w13, w13, #0xff
    1590:	add	w1, w13, #0x4
    1594:	add	w0, w3, #0x5
    1598:	and	w18, w17, #0xff
    159c:	lsr	w13, w17, #8
    15a0:	mov	w17, w2
    15a4:	b	1434 <BZ2_bzDecompress+0xaec>
    15a8:	mov	w12, wzr
    15ac:	add	x10, x10, x2
    15b0:	sub	w1, w1, w2
    15b4:	ldr	x14, [x19]
    15b8:	sub	w11, w11, w12
    15bc:	ldr	w15, [x14, #36]
    15c0:	adds	w11, w15, w11
    15c4:	str	w11, [x14, #36]
    15c8:	b.cc	15d8 <BZ2_bzDecompress+0xc90>  // b.lo, b.ul, b.last
    15cc:	ldr	w11, [x14, #40]
    15d0:	add	w11, w11, #0x1
    15d4:	str	w11, [x14, #40]
    15d8:	str	w8, [x19, #3184]
    15dc:	strb	w17, [x19, #12]
    15e0:	str	w1, [x19, #16]
    15e4:	str	w0, [x19, #1092]
    15e8:	str	x9, [x19, #3152]
    15ec:	stp	w13, w18, [x19, #60]
    15f0:	str	x10, [x14, #24]
    15f4:	str	w12, [x14, #32]
    15f8:	ldr	w8, [x28]
    15fc:	ldr	w9, [x19, #1092]
    1600:	add	w8, w8, #0x1
    1604:	cmp	w9, w8
    1608:	b.ne	16f0 <BZ2_bzDecompress+0xda8>  // b.any
    160c:	ldr	w8, [x19, #16]
    1610:	cbnz	w8, 16f0 <BZ2_bzDecompress+0xda8>
    1614:	ldr	w9, [x19, #3184]
    1618:	ldr	w8, [x19, #52]
    161c:	mvn	w3, w9
    1620:	cmp	w8, #0x2
    1624:	str	w3, [x19, #3184]
    1628:	b.gt	1678 <BZ2_bzDecompress+0xd30>
    162c:	cmp	w8, #0x2
    1630:	b.ge	1694 <BZ2_bzDecompress+0xd4c>  // b.tcont
    1634:	ldr	w8, [x19, #3184]
    1638:	ldr	w9, [x19, #3176]
    163c:	cmp	w8, w9
    1640:	b.ne	16c4 <BZ2_bzDecompress+0xd7c>  // b.any
    1644:	ldr	w9, [x19, #3188]
    1648:	str	w20, [x19, #8]
    164c:	eor	w8, w8, w9, ror #31
    1650:	str	w8, [x19, #3188]
    1654:	mov	x0, x19
    1658:	bl	0 <BZ2_decompress>
    165c:	cmp	w0, #0x4
    1660:	b.eq	16cc <BZ2_bzDecompress+0xd84>  // b.none
    1664:	ldr	w8, [x19, #8]
    1668:	cmp	w8, #0x2
    166c:	mov	w8, #0x2                   	// #2
    1670:	b.eq	9d4 <BZ2_bzDecompress+0x8c>  // b.none
    1674:	b	980 <BZ2_bzDecompress+0x38>
    1678:	ldr	x0, [x21]
    167c:	ldr	w2, [x19, #3176]
    1680:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    1684:	add	x1, x1, #0x0
    1688:	bl	0 <fprintf>
    168c:	ldr	w8, [x19, #52]
    1690:	b	162c <BZ2_bzDecompress+0xce4>
    1694:	ldr	x1, [x21]
    1698:	mov	w0, #0x5d                  	// #93
    169c:	bl	0 <fputc>
    16a0:	b	1634 <BZ2_bzDecompress+0xcec>
    16a4:	mov	w1, #0x1                   	// #1
    16a8:	b	15b4 <BZ2_bzDecompress+0xc6c>
    16ac:	mov	w1, wzr
    16b0:	mov	w0, w14
    16b4:	mov	w18, w2
    16b8:	b	15b4 <BZ2_bzDecompress+0xc6c>
    16bc:	mov	w0, #0xffffffff            	// #-1
    16c0:	b	980 <BZ2_bzDecompress+0x38>
    16c4:	mov	w0, #0xfffffffc            	// #-4
    16c8:	b	980 <BZ2_bzDecompress+0x38>
    16cc:	ldr	w8, [x19, #52]
    16d0:	cmp	w8, #0x3
    16d4:	b.ge	16f8 <BZ2_bzDecompress+0xdb0>  // b.tcont
    16d8:	ldr	w8, [x19, #3188]
    16dc:	ldr	w9, [x19, #3180]
    16e0:	cmp	w8, w9
    16e4:	mov	w8, #0x4                   	// #4
    16e8:	cneg	w0, w8, ne  // ne = any
    16ec:	b	980 <BZ2_bzDecompress+0x38>
    16f0:	mov	w0, wzr
    16f4:	b	980 <BZ2_bzDecompress+0x38>
    16f8:	ldr	x0, [x21]
    16fc:	ldr	w2, [x19, #3180]
    1700:	ldr	w3, [x19, #3188]
    1704:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    1708:	add	x1, x1, #0x0
    170c:	bl	0 <fprintf>
    1710:	b	16d8 <BZ2_bzDecompress+0xd90>

0000000000001714 <BZ2_bzDecompressEnd>:
    1714:	stp	x29, x30, [sp, #-32]!
    1718:	stp	x20, x19, [sp, #16]
    171c:	mov	x29, sp
    1720:	cbz	x0, 173c <BZ2_bzDecompressEnd+0x28>
    1724:	ldr	x20, [x0, #48]
    1728:	mov	x19, x0
    172c:	cbz	x20, 173c <BZ2_bzDecompressEnd+0x28>
    1730:	ldr	x8, [x20]
    1734:	cmp	x8, x19
    1738:	b.eq	174c <BZ2_bzDecompressEnd+0x38>  // b.none
    173c:	mov	w0, #0xfffffffe            	// #-2
    1740:	ldp	x20, x19, [sp, #16]
    1744:	ldp	x29, x30, [sp], #32
    1748:	ret
    174c:	ldr	x1, [x20, #3152]
    1750:	cbz	x1, 175c <BZ2_bzDecompressEnd+0x48>
    1754:	ldp	x8, x0, [x19, #64]
    1758:	blr	x8
    175c:	ldr	x1, [x20, #3160]
    1760:	cbz	x1, 176c <BZ2_bzDecompressEnd+0x58>
    1764:	ldp	x8, x0, [x19, #64]
    1768:	blr	x8
    176c:	ldr	x1, [x20, #3168]
    1770:	cbz	x1, 177c <BZ2_bzDecompressEnd+0x68>
    1774:	ldp	x8, x0, [x19, #64]
    1778:	blr	x8
    177c:	ldp	x8, x0, [x19, #64]
    1780:	ldr	x1, [x19, #48]
    1784:	blr	x8
    1788:	mov	w0, wzr
    178c:	str	xzr, [x19, #48]
    1790:	b	1740 <BZ2_bzDecompressEnd+0x2c>

0000000000001794 <BZ2_bzWriteOpen>:
    1794:	stp	x29, x30, [sp, #-80]!
    1798:	str	x25, [sp, #16]
    179c:	stp	x24, x23, [sp, #32]
    17a0:	stp	x22, x21, [sp, #48]
    17a4:	stp	x20, x19, [sp, #64]
    17a8:	mov	x29, sp
    17ac:	mov	w23, w4
    17b0:	mov	w21, w3
    17b4:	mov	w22, w2
    17b8:	mov	x24, x1
    17bc:	mov	x19, x0
    17c0:	cbz	x0, 17c8 <BZ2_bzWriteOpen+0x34>
    17c4:	str	wzr, [x19]
    17c8:	cmp	w21, #0x4
    17cc:	b.hi	1800 <BZ2_bzWriteOpen+0x6c>  // b.pmore
    17d0:	cmp	w23, #0xfa
    17d4:	b.hi	1800 <BZ2_bzWriteOpen+0x6c>  // b.pmore
    17d8:	cbz	x24, 1800 <BZ2_bzWriteOpen+0x6c>
    17dc:	sub	w8, w22, #0x1
    17e0:	cmp	w8, #0x9
    17e4:	b.cs	1800 <BZ2_bzWriteOpen+0x6c>  // b.hs, b.nlast
    17e8:	mov	x0, x24
    17ec:	bl	0 <ferror>
    17f0:	cbz	w0, 1814 <BZ2_bzWriteOpen+0x80>
    17f4:	cbz	x19, 189c <BZ2_bzWriteOpen+0x108>
    17f8:	mov	w8, #0xfffffffa            	// #-6
    17fc:	b	1808 <BZ2_bzWriteOpen+0x74>
    1800:	cbz	x19, 189c <BZ2_bzWriteOpen+0x108>
    1804:	mov	w8, #0xfffffffe            	// #-2
    1808:	mov	x20, xzr
    180c:	str	w8, [x19]
    1810:	b	18a0 <BZ2_bzWriteOpen+0x10c>
    1814:	mov	w0, #0x13f0                	// #5104
    1818:	bl	0 <malloc>
    181c:	cbz	x0, 1890 <BZ2_bzWriteOpen+0xfc>
    1820:	mov	w8, #0x1394                	// #5012
    1824:	mov	x20, x0
    1828:	add	x25, x0, x8
    182c:	cbz	x19, 1834 <BZ2_bzWriteOpen+0xa0>
    1830:	str	wzr, [x19]
    1834:	mov	w8, #0x1398                	// #5016
    1838:	cmp	w23, #0x0
    183c:	mov	w9, #0x1e                  	// #30
    1840:	str	wzr, [x20, #5096]
    1844:	strb	wzr, [x25, #88]
    1848:	str	x24, [x20]
    184c:	mov	w24, #0x1                   	// #1
    1850:	movi	v0.2d, #0x0
    1854:	add	x0, x20, x8
    1858:	csel	w3, w9, w23, eq  // eq = none
    185c:	mov	w1, w22
    1860:	mov	w2, w21
    1864:	str	wzr, [x20, #5008]
    1868:	strb	w24, [x25]
    186c:	str	xzr, [x20, #5088]
    1870:	str	q0, [x20, #5072]
    1874:	bl	68 <BZ2_bzCompressInit>
    1878:	cbz	w0, 18bc <BZ2_bzWriteOpen+0x128>
    187c:	cbz	x19, 1884 <BZ2_bzWriteOpen+0xf0>
    1880:	str	w0, [x19]
    1884:	mov	x0, x20
    1888:	bl	0 <free>
    188c:	b	189c <BZ2_bzWriteOpen+0x108>
    1890:	cbz	x19, 189c <BZ2_bzWriteOpen+0x108>
    1894:	mov	w8, #0xfffffffd            	// #-3
    1898:	b	1808 <BZ2_bzWriteOpen+0x74>
    189c:	mov	x20, xzr
    18a0:	mov	x0, x20
    18a4:	ldp	x20, x19, [sp, #64]
    18a8:	ldp	x22, x21, [sp, #48]
    18ac:	ldp	x24, x23, [sp, #32]
    18b0:	ldr	x25, [sp, #16]
    18b4:	ldp	x29, x30, [sp], #80
    18b8:	ret
    18bc:	str	wzr, [x20, #5024]
    18c0:	strb	w24, [x25, #88]
    18c4:	b	18a0 <BZ2_bzWriteOpen+0x10c>

00000000000018c8 <BZ2_bzWrite>:
    18c8:	stp	x29, x30, [sp, #-64]!
    18cc:	stp	x24, x23, [sp, #16]
    18d0:	stp	x22, x21, [sp, #32]
    18d4:	stp	x20, x19, [sp, #48]
    18d8:	mov	x29, sp
    18dc:	mov	w22, w3
    18e0:	mov	x21, x2
    18e4:	mov	x19, x1
    18e8:	mov	x20, x0
    18ec:	cbz	x0, 18f4 <BZ2_bzWrite+0x2c>
    18f0:	str	wzr, [x20]
    18f4:	cbz	x19, 1930 <BZ2_bzWrite+0x68>
    18f8:	str	wzr, [x19, #5096]
    18fc:	cbz	x21, 1930 <BZ2_bzWrite+0x68>
    1900:	tbnz	w22, #31, 1930 <BZ2_bzWrite+0x68>
    1904:	mov	w8, #0x1394                	// #5012
    1908:	ldrb	w8, [x19, x8]
    190c:	cbz	w8, 1948 <BZ2_bzWrite+0x80>
    1910:	ldr	x0, [x19]
    1914:	bl	0 <ferror>
    1918:	cbz	w0, 1970 <BZ2_bzWrite+0xa8>
    191c:	cbz	x20, 1928 <BZ2_bzWrite+0x60>
    1920:	mov	w8, #0xfffffffa            	// #-6
    1924:	str	w8, [x20]
    1928:	mov	w8, #0xfffffffa            	// #-6
    192c:	b	1958 <BZ2_bzWrite+0x90>
    1930:	cbz	x20, 193c <BZ2_bzWrite+0x74>
    1934:	mov	w8, #0xfffffffe            	// #-2
    1938:	str	w8, [x20]
    193c:	cbz	x19, 195c <BZ2_bzWrite+0x94>
    1940:	mov	w8, #0xfffffffe            	// #-2
    1944:	b	1958 <BZ2_bzWrite+0x90>
    1948:	cbz	x20, 1954 <BZ2_bzWrite+0x8c>
    194c:	mov	w8, #0xffffffff            	// #-1
    1950:	str	w8, [x20]
    1954:	mov	w8, #0xffffffff            	// #-1
    1958:	str	w8, [x19, #5096]
    195c:	ldp	x20, x19, [sp, #48]
    1960:	ldp	x22, x21, [sp, #32]
    1964:	ldp	x24, x23, [sp, #16]
    1968:	ldp	x29, x30, [sp], #64
    196c:	ret
    1970:	cbz	w22, 19ec <BZ2_bzWrite+0x124>
    1974:	mov	w8, #0x1398                	// #5016
    1978:	str	w22, [x19, #5024]
    197c:	str	x21, [x19, #5016]
    1980:	add	x21, x19, #0x8
    1984:	add	x22, x19, x8
    1988:	mov	w24, #0x1388                	// #5000
    198c:	mov	x0, x22
    1990:	mov	w1, wzr
    1994:	str	w24, [x19, #5048]
    1998:	str	x21, [x19, #5040]
    199c:	bl	248 <BZ2_bzCompress>
    19a0:	cmp	w0, #0x1
    19a4:	b.ne	19fc <BZ2_bzWrite+0x134>  // b.any
    19a8:	ldrsw	x8, [x19, #5048]
    19ac:	ubfx	x9, x8, #3, #29
    19b0:	cmp	w9, #0x270
    19b4:	b.hi	19e4 <BZ2_bzWrite+0x11c>  // b.pmore
    19b8:	ldr	x3, [x19]
    19bc:	sub	x23, x24, x8
    19c0:	mov	w1, #0x1                   	// #1
    19c4:	mov	x0, x21
    19c8:	mov	x2, x23
    19cc:	bl	0 <fwrite>
    19d0:	cmp	w23, w0
    19d4:	b.ne	191c <BZ2_bzWrite+0x54>  // b.any
    19d8:	ldr	x0, [x19]
    19dc:	bl	0 <ferror>
    19e0:	cbnz	w0, 191c <BZ2_bzWrite+0x54>
    19e4:	ldr	w8, [x19, #5024]
    19e8:	cbnz	w8, 198c <BZ2_bzWrite+0xc4>
    19ec:	cbz	x20, 19f4 <BZ2_bzWrite+0x12c>
    19f0:	str	wzr, [x20]
    19f4:	str	wzr, [x19, #5096]
    19f8:	b	195c <BZ2_bzWrite+0x94>
    19fc:	cbz	x20, 1a04 <BZ2_bzWrite+0x13c>
    1a00:	str	w0, [x20]
    1a04:	str	w0, [x19, #5096]
    1a08:	b	195c <BZ2_bzWrite+0x94>

0000000000001a0c <BZ2_bzWriteClose>:
    1a0c:	mov	x5, x4
    1a10:	mov	x4, xzr
    1a14:	mov	x6, xzr
    1a18:	b	1a1c <BZ2_bzWriteClose64>

0000000000001a1c <BZ2_bzWriteClose64>:
    1a1c:	stp	x29, x30, [sp, #-96]!
    1a20:	stp	x28, x27, [sp, #16]
    1a24:	stp	x26, x25, [sp, #32]
    1a28:	stp	x24, x23, [sp, #48]
    1a2c:	stp	x22, x21, [sp, #64]
    1a30:	stp	x20, x19, [sp, #80]
    1a34:	mov	x29, sp
    1a38:	mov	x20, x0
    1a3c:	cbz	x1, 1a88 <BZ2_bzWriteClose64+0x6c>
    1a40:	mov	w8, #0x1394                	// #5012
    1a44:	ldrb	w8, [x1, x8]
    1a48:	mov	x19, x1
    1a4c:	cbz	w8, 1a94 <BZ2_bzWriteClose64+0x78>
    1a50:	ldr	x25, [x19]
    1a54:	mov	x21, x6
    1a58:	mov	x22, x5
    1a5c:	mov	x23, x4
    1a60:	mov	x0, x25
    1a64:	mov	x24, x3
    1a68:	mov	w26, w2
    1a6c:	bl	0 <ferror>
    1a70:	cbz	w0, 1ac4 <BZ2_bzWriteClose64+0xa8>
    1a74:	cbz	x20, 1a80 <BZ2_bzWriteClose64+0x64>
    1a78:	mov	w8, #0xfffffffa            	// #-6
    1a7c:	str	w8, [x20]
    1a80:	mov	w8, #0xfffffffa            	// #-6
    1a84:	b	1aa4 <BZ2_bzWriteClose64+0x88>
    1a88:	cbz	x20, 1aa8 <BZ2_bzWriteClose64+0x8c>
    1a8c:	str	wzr, [x20]
    1a90:	b	1aa8 <BZ2_bzWriteClose64+0x8c>
    1a94:	cbz	x20, 1aa0 <BZ2_bzWriteClose64+0x84>
    1a98:	mov	w8, #0xffffffff            	// #-1
    1a9c:	str	w8, [x20]
    1aa0:	mov	w8, #0xffffffff            	// #-1
    1aa4:	str	w8, [x19, #5096]
    1aa8:	ldp	x20, x19, [sp, #80]
    1aac:	ldp	x22, x21, [sp, #64]
    1ab0:	ldp	x24, x23, [sp, #48]
    1ab4:	ldp	x26, x25, [sp, #32]
    1ab8:	ldp	x28, x27, [sp, #16]
    1abc:	ldp	x29, x30, [sp], #96
    1ac0:	ret
    1ac4:	cbz	x24, 1acc <BZ2_bzWriteClose64+0xb0>
    1ac8:	str	wzr, [x24]
    1acc:	cbz	x23, 1ad4 <BZ2_bzWriteClose64+0xb8>
    1ad0:	str	wzr, [x23]
    1ad4:	cbz	x22, 1adc <BZ2_bzWriteClose64+0xc0>
    1ad8:	str	wzr, [x22]
    1adc:	cbz	x21, 1ae4 <BZ2_bzWriteClose64+0xc8>
    1ae0:	str	wzr, [x21]
    1ae4:	cbnz	w26, 1afc <BZ2_bzWriteClose64+0xe0>
    1ae8:	ldr	w8, [x19, #5096]
    1aec:	cbz	w8, 1b64 <BZ2_bzWriteClose64+0x148>
    1af0:	mov	x0, x25
    1af4:	bl	0 <ferror>
    1af8:	cbz	w0, 1bec <BZ2_bzWriteClose64+0x1d0>
    1afc:	cbz	x24, 1b08 <BZ2_bzWriteClose64+0xec>
    1b00:	ldr	w8, [x19, #5028]
    1b04:	str	w8, [x24]
    1b08:	cbz	x23, 1b14 <BZ2_bzWriteClose64+0xf8>
    1b0c:	ldr	w8, [x19, #5032]
    1b10:	str	w8, [x23]
    1b14:	cbz	x22, 1b20 <BZ2_bzWriteClose64+0x104>
    1b18:	ldr	w8, [x19, #5052]
    1b1c:	str	w8, [x22]
    1b20:	cbz	x21, 1b2c <BZ2_bzWriteClose64+0x110>
    1b24:	ldr	w8, [x19, #5056]
    1b28:	str	w8, [x21]
    1b2c:	cbz	x20, 1b34 <BZ2_bzWriteClose64+0x118>
    1b30:	str	wzr, [x20]
    1b34:	mov	w8, #0x1398                	// #5016
    1b38:	add	x0, x19, x8
    1b3c:	str	wzr, [x19, #5096]
    1b40:	bl	7cc <BZ2_bzCompressEnd>
    1b44:	mov	x0, x19
    1b48:	ldp	x20, x19, [sp, #80]
    1b4c:	ldp	x22, x21, [sp, #64]
    1b50:	ldp	x24, x23, [sp, #48]
    1b54:	ldp	x26, x25, [sp, #32]
    1b58:	ldp	x28, x27, [sp, #16]
    1b5c:	ldp	x29, x30, [sp], #96
    1b60:	b	0 <free>
    1b64:	mov	w8, #0x1398                	// #5016
    1b68:	add	x25, x19, #0x8
    1b6c:	add	x26, x19, x8
    1b70:	mov	w28, #0x1388                	// #5000
    1b74:	mov	w1, #0x2                   	// #2
    1b78:	mov	x0, x26
    1b7c:	str	w28, [x19, #5048]
    1b80:	str	x25, [x19, #5040]
    1b84:	bl	248 <BZ2_bzCompress>
    1b88:	sub	w8, w0, #0x3
    1b8c:	mov	w27, w0
    1b90:	cmp	w8, #0x2
    1b94:	b.cs	1c04 <BZ2_bzWriteClose64+0x1e8>  // b.hs, b.nlast
    1b98:	ldrsw	x8, [x19, #5048]
    1b9c:	ubfx	x9, x8, #3, #29
    1ba0:	cmp	w9, #0x270
    1ba4:	b.hi	1bdc <BZ2_bzWriteClose64+0x1c0>  // b.pmore
    1ba8:	ldr	x3, [x19]
    1bac:	mov	w9, #0x1388                	// #5000
    1bb0:	sub	x28, x9, x8
    1bb4:	mov	w1, #0x1                   	// #1
    1bb8:	mov	x0, x25
    1bbc:	mov	x2, x28
    1bc0:	bl	0 <fwrite>
    1bc4:	cmp	w28, w0
    1bc8:	mov	w28, #0x1388                	// #5000
    1bcc:	b.ne	1a74 <BZ2_bzWriteClose64+0x58>  // b.any
    1bd0:	ldr	x0, [x19]
    1bd4:	bl	0 <ferror>
    1bd8:	cbnz	w0, 1a74 <BZ2_bzWriteClose64+0x58>
    1bdc:	cmp	w27, #0x4
    1be0:	b.ne	1b74 <BZ2_bzWriteClose64+0x158>  // b.any
    1be4:	ldr	x25, [x19]
    1be8:	b	1af0 <BZ2_bzWriteClose64+0xd4>
    1bec:	mov	x0, x25
    1bf0:	bl	0 <fflush>
    1bf4:	ldr	x0, [x19]
    1bf8:	bl	0 <ferror>
    1bfc:	cbnz	w0, 1a74 <BZ2_bzWriteClose64+0x58>
    1c00:	b	1afc <BZ2_bzWriteClose64+0xe0>
    1c04:	cbz	x20, 1c0c <BZ2_bzWriteClose64+0x1f0>
    1c08:	str	w27, [x20]
    1c0c:	str	w27, [x19, #5096]
    1c10:	b	1aa8 <BZ2_bzWriteClose64+0x8c>

0000000000001c14 <BZ2_bzReadOpen>:
    1c14:	stp	x29, x30, [sp, #-80]!
    1c18:	stp	x26, x25, [sp, #16]
    1c1c:	stp	x24, x23, [sp, #32]
    1c20:	stp	x22, x21, [sp, #48]
    1c24:	stp	x20, x19, [sp, #64]
    1c28:	mov	x29, sp
    1c2c:	mov	w24, w5
    1c30:	mov	x23, x4
    1c34:	mov	w21, w3
    1c38:	mov	w22, w2
    1c3c:	mov	x25, x1
    1c40:	mov	x19, x0
    1c44:	cbz	x0, 1c4c <BZ2_bzReadOpen+0x38>
    1c48:	str	wzr, [x19]
    1c4c:	cbz	x25, 1c78 <BZ2_bzReadOpen+0x64>
    1c50:	cmp	w22, #0x4
    1c54:	b.hi	1c78 <BZ2_bzReadOpen+0x64>  // b.pmore
    1c58:	cmp	w21, #0x1
    1c5c:	b.hi	1c78 <BZ2_bzReadOpen+0x64>  // b.pmore
    1c60:	cbnz	x23, 1c68 <BZ2_bzReadOpen+0x54>
    1c64:	cbnz	w24, 1c78 <BZ2_bzReadOpen+0x64>
    1c68:	cbz	x23, 1c8c <BZ2_bzReadOpen+0x78>
    1c6c:	mov	w8, #0x1389                	// #5001
    1c70:	cmp	w24, w8
    1c74:	b.cc	1c8c <BZ2_bzReadOpen+0x78>  // b.lo, b.ul, b.last
    1c78:	cbz	x19, 1d50 <BZ2_bzReadOpen+0x13c>
    1c7c:	mov	w8, #0xfffffffe            	// #-2
    1c80:	mov	x20, xzr
    1c84:	str	w8, [x19]
    1c88:	b	1d54 <BZ2_bzReadOpen+0x140>
    1c8c:	mov	x0, x25
    1c90:	bl	0 <ferror>
    1c94:	cbz	w0, 1ca4 <BZ2_bzReadOpen+0x90>
    1c98:	cbz	x19, 1d50 <BZ2_bzReadOpen+0x13c>
    1c9c:	mov	w8, #0xfffffffa            	// #-6
    1ca0:	b	1c80 <BZ2_bzReadOpen+0x6c>
    1ca4:	mov	w0, #0x13f0                	// #5104
    1ca8:	bl	0 <malloc>
    1cac:	cbz	x0, 1d44 <BZ2_bzReadOpen+0x130>
    1cb0:	mov	w8, #0x1394                	// #5012
    1cb4:	mov	x20, x0
    1cb8:	add	x26, x0, x8
    1cbc:	cbz	x19, 1cc4 <BZ2_bzReadOpen+0xb0>
    1cc0:	str	wzr, [x19]
    1cc4:	mov	w8, #0x1398                	// #5016
    1cc8:	movi	v0.2d, #0x0
    1ccc:	cmp	w24, #0x1
    1cd0:	add	x0, x20, x8
    1cd4:	str	wzr, [x20, #5096]
    1cd8:	strb	wzr, [x26, #88]
    1cdc:	str	x25, [x20]
    1ce0:	str	wzr, [x20, #5008]
    1ce4:	strb	wzr, [x26]
    1ce8:	str	xzr, [x20, #5088]
    1cec:	str	q0, [x20, #5072]
    1cf0:	b.lt	1d20 <BZ2_bzReadOpen+0x10c>  // b.tstop
    1cf4:	mov	w10, wzr
    1cf8:	add	x8, x20, #0x8
    1cfc:	add	w9, w24, #0x1
    1d00:	ldrb	w11, [x23], #1
    1d04:	sub	w9, w9, #0x1
    1d08:	cmp	w9, #0x1
    1d0c:	strb	w11, [x8, w10, sxtw]
    1d10:	ldr	w10, [x20, #5008]
    1d14:	add	w10, w10, #0x1
    1d18:	str	w10, [x20, #5008]
    1d1c:	b.gt	1d00 <BZ2_bzReadOpen+0xec>
    1d20:	mov	w1, w22
    1d24:	mov	w2, w21
    1d28:	bl	84c <BZ2_bzDecompressInit>
    1d2c:	cbz	w0, 1d70 <BZ2_bzReadOpen+0x15c>
    1d30:	cbz	x19, 1d38 <BZ2_bzReadOpen+0x124>
    1d34:	str	w0, [x19]
    1d38:	mov	x0, x20
    1d3c:	bl	0 <free>
    1d40:	b	1d50 <BZ2_bzReadOpen+0x13c>
    1d44:	cbz	x19, 1d50 <BZ2_bzReadOpen+0x13c>
    1d48:	mov	w8, #0xfffffffd            	// #-3
    1d4c:	b	1c80 <BZ2_bzReadOpen+0x6c>
    1d50:	mov	x20, xzr
    1d54:	mov	x0, x20
    1d58:	ldp	x20, x19, [sp, #64]
    1d5c:	ldp	x22, x21, [sp, #48]
    1d60:	ldp	x24, x23, [sp, #32]
    1d64:	ldp	x26, x25, [sp, #16]
    1d68:	ldp	x29, x30, [sp], #80
    1d6c:	ret
    1d70:	ldr	w8, [x20, #5008]
    1d74:	add	x9, x20, #0x8
    1d78:	mov	w10, #0x1                   	// #1
    1d7c:	str	x9, [x20, #5016]
    1d80:	str	w8, [x20, #5024]
    1d84:	strb	w10, [x26, #88]
    1d88:	b	1d54 <BZ2_bzReadOpen+0x140>

0000000000001d8c <BZ2_bzReadClose>:
    1d8c:	stp	x29, x30, [sp, #-32]!
    1d90:	str	x19, [sp, #16]
    1d94:	mov	x29, sp
    1d98:	mov	x19, x1
    1d9c:	cbz	x0, 1da4 <BZ2_bzReadClose+0x18>
    1da0:	str	wzr, [x0]
    1da4:	cbz	x19, 1dd4 <BZ2_bzReadClose+0x48>
    1da8:	mov	w8, #0x1394                	// #5012
    1dac:	add	x8, x19, x8
    1db0:	str	wzr, [x19, #5096]
    1db4:	ldrb	w9, [x8]
    1db8:	cbz	w9, 1de8 <BZ2_bzReadClose+0x5c>
    1dbc:	cbz	x0, 1dc8 <BZ2_bzReadClose+0x3c>
    1dc0:	mov	w8, #0xffffffff            	// #-1
    1dc4:	str	w8, [x0]
    1dc8:	mov	w8, #0xffffffff            	// #-1
    1dcc:	str	w8, [x19, #5096]
    1dd0:	b	1ddc <BZ2_bzReadClose+0x50>
    1dd4:	cbz	x0, 1ddc <BZ2_bzReadClose+0x50>
    1dd8:	str	wzr, [x0]
    1ddc:	ldr	x19, [sp, #16]
    1de0:	ldp	x29, x30, [sp], #32
    1de4:	ret
    1de8:	ldrb	w8, [x8, #88]
    1dec:	cbz	w8, 1dfc <BZ2_bzReadClose+0x70>
    1df0:	mov	w8, #0x1398                	// #5016
    1df4:	add	x0, x19, x8
    1df8:	bl	1714 <BZ2_bzDecompressEnd>
    1dfc:	mov	x0, x19
    1e00:	ldr	x19, [sp, #16]
    1e04:	ldp	x29, x30, [sp], #32
    1e08:	b	0 <free>

0000000000001e0c <BZ2_bzRead>:
    1e0c:	stp	x29, x30, [sp, #-64]!
    1e10:	stp	x24, x23, [sp, #16]
    1e14:	stp	x22, x21, [sp, #32]
    1e18:	stp	x20, x19, [sp, #48]
    1e1c:	mov	x29, sp
    1e20:	mov	w20, w3
    1e24:	mov	x19, x1
    1e28:	mov	x21, x0
    1e2c:	cbz	x0, 1e34 <BZ2_bzRead+0x28>
    1e30:	str	wzr, [x21]
    1e34:	cbz	x19, 1e68 <BZ2_bzRead+0x5c>
    1e38:	str	wzr, [x19, #5096]
    1e3c:	cbz	x2, 1e68 <BZ2_bzRead+0x5c>
    1e40:	tbnz	w20, #31, 1e68 <BZ2_bzRead+0x5c>
    1e44:	mov	w8, #0x1394                	// #5012
    1e48:	ldrb	w8, [x19, x8]
    1e4c:	cbz	w8, 1e9c <BZ2_bzRead+0x90>
    1e50:	cbz	x21, 1e5c <BZ2_bzRead+0x50>
    1e54:	mov	w8, #0xffffffff            	// #-1
    1e58:	str	w8, [x21]
    1e5c:	mov	w8, #0xffffffff            	// #-1
    1e60:	mov	w20, wzr
    1e64:	b	1e80 <BZ2_bzRead+0x74>
    1e68:	cbz	x21, 1e74 <BZ2_bzRead+0x68>
    1e6c:	mov	w8, #0xfffffffe            	// #-2
    1e70:	str	w8, [x21]
    1e74:	mov	w20, wzr
    1e78:	cbz	x19, 1e84 <BZ2_bzRead+0x78>
    1e7c:	mov	w8, #0xfffffffe            	// #-2
    1e80:	str	w8, [x19, #5096]
    1e84:	mov	w0, w20
    1e88:	ldp	x20, x19, [sp, #48]
    1e8c:	ldp	x22, x21, [sp, #32]
    1e90:	ldp	x24, x23, [sp, #16]
    1e94:	ldp	x29, x30, [sp], #64
    1e98:	ret
    1e9c:	cbz	w20, 1f5c <BZ2_bzRead+0x150>
    1ea0:	mov	w8, #0x1398                	// #5016
    1ea4:	add	x22, x19, x8
    1ea8:	add	x23, x19, #0x8
    1eac:	str	w20, [x19, #5048]
    1eb0:	str	x2, [x19, #5040]
    1eb4:	ldr	x24, [x19]
    1eb8:	mov	x0, x24
    1ebc:	bl	0 <ferror>
    1ec0:	cbnz	w0, 1f70 <BZ2_bzRead+0x164>
    1ec4:	ldr	w8, [x19, #5024]
    1ec8:	cbnz	w8, 1f10 <BZ2_bzRead+0x104>
    1ecc:	mov	x0, x24
    1ed0:	bl	1fd4 <myfeof>
    1ed4:	tst	w0, #0xff
    1ed8:	b.ne	1f10 <BZ2_bzRead+0x104>  // b.any
    1edc:	ldr	x3, [x19]
    1ee0:	mov	w1, #0x1                   	// #1
    1ee4:	mov	w2, #0x1388                	// #5000
    1ee8:	mov	x0, x23
    1eec:	bl	0 <fread>
    1ef0:	ldr	x8, [x19]
    1ef4:	mov	x24, x0
    1ef8:	mov	x0, x8
    1efc:	bl	0 <ferror>
    1f00:	cbnz	w0, 1f70 <BZ2_bzRead+0x164>
    1f04:	str	w24, [x19, #5008]
    1f08:	str	w24, [x19, #5024]
    1f0c:	str	x23, [x19, #5016]
    1f10:	mov	x0, x22
    1f14:	bl	948 <BZ2_bzDecompress>
    1f18:	tst	w0, #0xfffffffb
    1f1c:	b.ne	1f84 <BZ2_bzRead+0x178>  // b.any
    1f20:	cbz	w0, 1f30 <BZ2_bzRead+0x124>
    1f24:	cmp	w0, #0x4
    1f28:	b.ne	1f48 <BZ2_bzRead+0x13c>  // b.any
    1f2c:	b	1f98 <BZ2_bzRead+0x18c>
    1f30:	ldr	x0, [x19]
    1f34:	bl	1fd4 <myfeof>
    1f38:	tst	w0, #0xff
    1f3c:	b.eq	1f48 <BZ2_bzRead+0x13c>  // b.none
    1f40:	ldr	w8, [x19, #5024]
    1f44:	cbz	w8, 1fb8 <BZ2_bzRead+0x1ac>
    1f48:	ldr	w8, [x19, #5048]
    1f4c:	cbnz	w8, 1eb4 <BZ2_bzRead+0xa8>
    1f50:	cbz	x21, 1f68 <BZ2_bzRead+0x15c>
    1f54:	str	wzr, [x21]
    1f58:	b	1f68 <BZ2_bzRead+0x15c>
    1f5c:	cbz	x21, 1f64 <BZ2_bzRead+0x158>
    1f60:	str	wzr, [x21]
    1f64:	mov	w20, wzr
    1f68:	str	wzr, [x19, #5096]
    1f6c:	b	1e84 <BZ2_bzRead+0x78>
    1f70:	cbz	x21, 1f7c <BZ2_bzRead+0x170>
    1f74:	mov	w8, #0xfffffffa            	// #-6
    1f78:	str	w8, [x21]
    1f7c:	mov	w8, #0xfffffffa            	// #-6
    1f80:	b	1e60 <BZ2_bzRead+0x54>
    1f84:	cbz	x21, 1f8c <BZ2_bzRead+0x180>
    1f88:	str	w0, [x21]
    1f8c:	mov	w20, wzr
    1f90:	str	w0, [x19, #5096]
    1f94:	b	1e84 <BZ2_bzRead+0x78>
    1f98:	cbz	x21, 1fa4 <BZ2_bzRead+0x198>
    1f9c:	mov	w8, #0x4                   	// #4
    1fa0:	str	w8, [x21]
    1fa4:	ldr	w8, [x19, #5048]
    1fa8:	mov	w9, #0x4                   	// #4
    1fac:	str	w9, [x19, #5096]
    1fb0:	sub	w20, w20, w8
    1fb4:	b	1e84 <BZ2_bzRead+0x78>
    1fb8:	ldr	w8, [x19, #5048]
    1fbc:	cbz	w8, 1f50 <BZ2_bzRead+0x144>
    1fc0:	cbz	x21, 1fcc <BZ2_bzRead+0x1c0>
    1fc4:	mov	w8, #0xfffffff9            	// #-7
    1fc8:	str	w8, [x21]
    1fcc:	mov	w8, #0xfffffff9            	// #-7
    1fd0:	b	1e60 <BZ2_bzRead+0x54>

0000000000001fd4 <myfeof>:
    1fd4:	stp	x29, x30, [sp, #-32]!
    1fd8:	str	x19, [sp, #16]
    1fdc:	mov	x29, sp
    1fe0:	mov	x19, x0
    1fe4:	bl	0 <fgetc>
    1fe8:	cmn	w0, #0x1
    1fec:	b.eq	2000 <myfeof+0x2c>  // b.none
    1ff0:	mov	x1, x19
    1ff4:	bl	0 <ungetc>
    1ff8:	mov	w0, wzr
    1ffc:	b	2004 <myfeof+0x30>
    2000:	mov	w0, #0x1                   	// #1
    2004:	ldr	x19, [sp, #16]
    2008:	ldp	x29, x30, [sp], #32
    200c:	ret

0000000000002010 <BZ2_bzReadGetUnused>:
    2010:	cbz	x1, 2048 <BZ2_bzReadGetUnused+0x38>
    2014:	ldr	w8, [x1, #5096]
    2018:	cmp	w8, #0x4
    201c:	b.ne	2058 <BZ2_bzReadGetUnused+0x48>  // b.any
    2020:	cbz	x2, 206c <BZ2_bzReadGetUnused+0x5c>
    2024:	cbz	x3, 206c <BZ2_bzReadGetUnused+0x5c>
    2028:	cbz	x0, 2030 <BZ2_bzReadGetUnused+0x20>
    202c:	str	wzr, [x0]
    2030:	ldr	w8, [x1, #5024]
    2034:	str	wzr, [x1, #5096]
    2038:	str	w8, [x3]
    203c:	ldr	x8, [x1, #5016]
    2040:	str	x8, [x2]
    2044:	ret
    2048:	cbz	x0, 2044 <BZ2_bzReadGetUnused+0x34>
    204c:	mov	w8, #0xfffffffe            	// #-2
    2050:	str	w8, [x0]
    2054:	ret
    2058:	cbz	x0, 2064 <BZ2_bzReadGetUnused+0x54>
    205c:	mov	w8, #0xffffffff            	// #-1
    2060:	str	w8, [x0]
    2064:	mov	w8, #0xffffffff            	// #-1
    2068:	b	207c <BZ2_bzReadGetUnused+0x6c>
    206c:	cbz	x0, 2078 <BZ2_bzReadGetUnused+0x68>
    2070:	mov	w8, #0xfffffffe            	// #-2
    2074:	str	w8, [x0]
    2078:	mov	w8, #0xfffffffe            	// #-2
    207c:	str	w8, [x1, #5096]
    2080:	ret

0000000000002084 <BZ2_bzBuffToBuffCompress>:
    2084:	sub	sp, sp, #0x90
    2088:	stp	x29, x30, [sp, #80]
    208c:	str	x23, [sp, #96]
    2090:	stp	x22, x21, [sp, #112]
    2094:	stp	x20, x19, [sp, #128]
    2098:	add	x29, sp, #0x50
    209c:	cmp	w6, #0xfa
    20a0:	mov	w20, #0xfffffffe            	// #-2
    20a4:	b.hi	2104 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    20a8:	cmp	w5, #0x4
    20ac:	b.hi	2104 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    20b0:	mov	x23, x0
    20b4:	cbz	x0, 2104 <BZ2_bzBuffToBuffCompress+0x80>
    20b8:	mov	x19, x1
    20bc:	cbz	x1, 2104 <BZ2_bzBuffToBuffCompress+0x80>
    20c0:	mov	x22, x2
    20c4:	cbz	x2, 2104 <BZ2_bzBuffToBuffCompress+0x80>
    20c8:	sub	w8, w4, #0x1
    20cc:	cmp	w8, #0x8
    20d0:	b.hi	2104 <BZ2_bzBuffToBuffCompress+0x80>  // b.pmore
    20d4:	cmp	w6, #0x0
    20d8:	mov	w8, #0x1e                  	// #30
    20dc:	mov	w21, w3
    20e0:	csel	w3, w8, w6, eq  // eq = none
    20e4:	mov	x0, sp
    20e8:	mov	w1, w4
    20ec:	mov	w2, w5
    20f0:	stp	xzr, xzr, [sp, #56]
    20f4:	str	xzr, [sp, #72]
    20f8:	bl	68 <BZ2_bzCompressInit>
    20fc:	mov	w20, w0
    2100:	cbz	w0, 2120 <BZ2_bzBuffToBuffCompress+0x9c>
    2104:	mov	w0, w20
    2108:	ldp	x20, x19, [sp, #128]
    210c:	ldp	x22, x21, [sp, #112]
    2110:	ldr	x23, [sp, #96]
    2114:	ldp	x29, x30, [sp, #80]
    2118:	add	sp, sp, #0x90
    211c:	ret
    2120:	str	x22, [sp]
    2124:	str	x23, [sp, #24]
    2128:	str	w21, [sp, #8]
    212c:	ldr	w8, [x19]
    2130:	mov	x0, sp
    2134:	mov	w1, #0x2                   	// #2
    2138:	str	w8, [sp, #32]
    213c:	bl	248 <BZ2_bzCompress>
    2140:	cmp	w0, #0x3
    2144:	b.eq	2174 <BZ2_bzBuffToBuffCompress+0xf0>  // b.none
    2148:	mov	w20, w0
    214c:	cmp	w0, #0x4
    2150:	b.ne	2184 <BZ2_bzBuffToBuffCompress+0x100>  // b.any
    2154:	ldr	w8, [sp, #32]
    2158:	ldr	w9, [x19]
    215c:	mov	x0, sp
    2160:	sub	w8, w9, w8
    2164:	str	w8, [x19]
    2168:	bl	7cc <BZ2_bzCompressEnd>
    216c:	mov	w20, wzr
    2170:	b	2104 <BZ2_bzBuffToBuffCompress+0x80>
    2174:	mov	x0, sp
    2178:	bl	7cc <BZ2_bzCompressEnd>
    217c:	mov	w20, #0xfffffff8            	// #-8
    2180:	b	2104 <BZ2_bzBuffToBuffCompress+0x80>
    2184:	mov	x0, sp
    2188:	bl	7cc <BZ2_bzCompressEnd>
    218c:	b	2104 <BZ2_bzBuffToBuffCompress+0x80>

0000000000002190 <BZ2_bzBuffToBuffDecompress>:
    2190:	sub	sp, sp, #0x90
    2194:	stp	x29, x30, [sp, #80]
    2198:	str	x23, [sp, #96]
    219c:	stp	x22, x21, [sp, #112]
    21a0:	stp	x20, x19, [sp, #128]
    21a4:	add	x29, sp, #0x50
    21a8:	mov	w20, #0xfffffffe            	// #-2
    21ac:	cbz	x0, 21fc <BZ2_bzBuffToBuffDecompress+0x6c>
    21b0:	mov	x19, x1
    21b4:	cbz	x1, 21fc <BZ2_bzBuffToBuffDecompress+0x6c>
    21b8:	mov	x22, x2
    21bc:	cbz	x2, 21fc <BZ2_bzBuffToBuffDecompress+0x6c>
    21c0:	cmp	w4, #0x1
    21c4:	mov	w20, #0xfffffffe            	// #-2
    21c8:	b.hi	21fc <BZ2_bzBuffToBuffDecompress+0x6c>  // b.pmore
    21cc:	cmp	w5, #0x4
    21d0:	b.hi	21fc <BZ2_bzBuffToBuffDecompress+0x6c>  // b.pmore
    21d4:	mov	x23, x0
    21d8:	mov	x0, sp
    21dc:	mov	w1, w5
    21e0:	mov	w2, w4
    21e4:	mov	w21, w3
    21e8:	stp	xzr, xzr, [sp, #56]
    21ec:	str	xzr, [sp, #72]
    21f0:	bl	84c <BZ2_bzDecompressInit>
    21f4:	mov	w20, w0
    21f8:	cbz	w0, 2218 <BZ2_bzBuffToBuffDecompress+0x88>
    21fc:	mov	w0, w20
    2200:	ldp	x20, x19, [sp, #128]
    2204:	ldp	x22, x21, [sp, #112]
    2208:	ldr	x23, [sp, #96]
    220c:	ldp	x29, x30, [sp, #80]
    2210:	add	sp, sp, #0x90
    2214:	ret
    2218:	str	x22, [sp]
    221c:	str	x23, [sp, #24]
    2220:	str	w21, [sp, #8]
    2224:	ldr	w8, [x19]
    2228:	mov	x0, sp
    222c:	str	w8, [sp, #32]
    2230:	bl	948 <BZ2_bzDecompress>
    2234:	cbz	w0, 2264 <BZ2_bzBuffToBuffDecompress+0xd4>
    2238:	mov	w20, w0
    223c:	cmp	w0, #0x4
    2240:	b.ne	2280 <BZ2_bzBuffToBuffDecompress+0xf0>  // b.any
    2244:	ldr	w8, [sp, #32]
    2248:	ldr	w9, [x19]
    224c:	mov	x0, sp
    2250:	sub	w8, w9, w8
    2254:	str	w8, [x19]
    2258:	bl	1714 <BZ2_bzDecompressEnd>
    225c:	mov	w20, wzr
    2260:	b	21fc <BZ2_bzBuffToBuffDecompress+0x6c>
    2264:	ldr	w19, [sp, #32]
    2268:	mov	x0, sp
    226c:	bl	1714 <BZ2_bzDecompressEnd>
    2270:	cmp	w19, #0x0
    2274:	mov	w8, #0xfffffff8            	// #-8
    2278:	cinc	w20, w8, ne  // ne = any
    227c:	b	21fc <BZ2_bzBuffToBuffDecompress+0x6c>
    2280:	mov	x0, sp
    2284:	bl	1714 <BZ2_bzDecompressEnd>
    2288:	b	21fc <BZ2_bzBuffToBuffDecompress+0x6c>

000000000000228c <BZ2_bzopen>:
    228c:	mov	x2, x1
    2290:	mov	w1, #0xffffffff            	// #-1
    2294:	mov	w3, wzr
    2298:	b	229c <bzopen_or_bzdopen>

000000000000229c <bzopen_or_bzdopen>:
    229c:	stp	x29, x30, [sp, #-96]!
    22a0:	str	x28, [sp, #16]
    22a4:	stp	x26, x25, [sp, #32]
    22a8:	stp	x24, x23, [sp, #48]
    22ac:	stp	x22, x21, [sp, #64]
    22b0:	stp	x20, x19, [sp, #80]
    22b4:	mov	x29, sp
    22b8:	sub	sp, sp, #0x1, lsl #12
    22bc:	sub	sp, sp, #0x3a0
    22c0:	strh	wzr, [sp, #16]
    22c4:	str	xzr, [sp, #8]
    22c8:	cbz	x2, 2448 <bzopen_or_bzdopen+0x1ac>
    22cc:	mov	w22, w3
    22d0:	mov	x23, x2
    22d4:	mov	w21, w1
    22d8:	mov	x20, x0
    22dc:	mov	w25, wzr
    22e0:	mov	w19, wzr
    22e4:	mov	w24, #0x9                   	// #9
    22e8:	ldrb	w26, [x23]
    22ec:	cmp	w26, #0x72
    22f0:	b.le	230c <bzopen_or_bzdopen+0x70>
    22f4:	cmp	w26, #0x73
    22f8:	b.eq	2318 <bzopen_or_bzdopen+0x7c>  // b.none
    22fc:	cmp	w26, #0x77
    2300:	b.ne	2324 <bzopen_or_bzdopen+0x88>  // b.any
    2304:	mov	w25, #0x1                   	// #1
    2308:	b	233c <bzopen_or_bzdopen+0xa0>
    230c:	b.ne	2320 <bzopen_or_bzdopen+0x84>  // b.any
    2310:	mov	w25, wzr
    2314:	b	233c <bzopen_or_bzdopen+0xa0>
    2318:	mov	w19, #0x1                   	// #1
    231c:	b	233c <bzopen_or_bzdopen+0xa0>
    2320:	cbz	w26, 2344 <bzopen_or_bzdopen+0xa8>
    2324:	bl	0 <__ctype_b_loc>
    2328:	ldr	x8, [x0]
    232c:	sub	w9, w26, #0x30
    2330:	ldrh	w8, [x8, w26, uxtw #1]
    2334:	tst	w8, #0x800
    2338:	csel	w24, w24, w9, eq  // eq = none
    233c:	add	x23, x23, #0x1
    2340:	b	22e8 <bzopen_or_bzdopen+0x4c>
    2344:	add	x0, sp, #0x8
    2348:	add	x23, sp, #0x8
    234c:	bl	0 <strlen>
    2350:	cmp	w25, #0x0
    2354:	mov	w8, #0x72                  	// #114
    2358:	mov	w9, #0x77                  	// #119
    235c:	csel	w8, w9, w8, ne  // ne = any
    2360:	strh	w8, [x23, x0]
    2364:	add	x0, sp, #0x8
    2368:	bl	0 <strlen>
    236c:	mov	w8, #0x62                  	// #98
    2370:	strh	w8, [x23, x0]
    2374:	cbz	w22, 2390 <bzopen_or_bzdopen+0xf4>
    2378:	add	x1, sp, #0x8
    237c:	mov	w0, w21
    2380:	bl	0 <fdopen>
    2384:	mov	x20, x0
    2388:	cbnz	x20, 23cc <bzopen_or_bzdopen+0x130>
    238c:	b	2448 <bzopen_or_bzdopen+0x1ac>
    2390:	cbz	x20, 23ac <bzopen_or_bzdopen+0x110>
    2394:	ldrb	w8, [x20]
    2398:	cbz	w8, 23ac <bzopen_or_bzdopen+0x110>
    239c:	add	x1, sp, #0x8
    23a0:	mov	x0, x20
    23a4:	bl	0 <fopen64>
    23a8:	b	2384 <bzopen_or_bzdopen+0xe8>
    23ac:	adrp	x8, 0 <stdout>
    23b0:	adrp	x9, 0 <stdin>
    23b4:	add	x8, x8, #0x0
    23b8:	add	x9, x9, #0x0
    23bc:	cmp	w25, #0x0
    23c0:	csel	x8, x8, x9, ne  // ne = any
    23c4:	ldr	x20, [x8]
    23c8:	cbz	x20, 2448 <bzopen_or_bzdopen+0x1ac>
    23cc:	cbz	w25, 2400 <bzopen_or_bzdopen+0x164>
    23d0:	cmp	w24, #0x1
    23d4:	csinc	w8, w24, wzr, gt
    23d8:	cmp	w8, #0x9
    23dc:	mov	w9, #0x9                   	// #9
    23e0:	csel	w2, w8, w9, lt  // lt = tstop
    23e4:	add	x0, x29, #0x1c
    23e8:	mov	w4, #0x1e                  	// #30
    23ec:	mov	x1, x20
    23f0:	mov	w3, wzr
    23f4:	bl	1794 <BZ2_bzWriteOpen>
    23f8:	cbnz	x0, 244c <bzopen_or_bzdopen+0x1b0>
    23fc:	b	2420 <bzopen_or_bzdopen+0x184>
    2400:	add	x0, x29, #0x1c
    2404:	add	x4, sp, #0x18
    2408:	mov	x1, x20
    240c:	mov	w2, wzr
    2410:	mov	w3, w19
    2414:	mov	w5, wzr
    2418:	bl	1c14 <BZ2_bzReadOpen>
    241c:	cbnz	x0, 244c <bzopen_or_bzdopen+0x1b0>
    2420:	adrp	x8, 0 <stdin>
    2424:	ldr	x8, [x8]
    2428:	cmp	x20, x8
    242c:	b.eq	244c <bzopen_or_bzdopen+0x1b0>  // b.none
    2430:	adrp	x8, 0 <stdout>
    2434:	ldr	x8, [x8]
    2438:	cmp	x20, x8
    243c:	b.eq	244c <bzopen_or_bzdopen+0x1b0>  // b.none
    2440:	mov	x0, x20
    2444:	bl	0 <fclose>
    2448:	mov	x0, xzr
    244c:	add	sp, sp, #0x1, lsl #12
    2450:	add	sp, sp, #0x3a0
    2454:	ldp	x20, x19, [sp, #80]
    2458:	ldp	x22, x21, [sp, #64]
    245c:	ldp	x24, x23, [sp, #48]
    2460:	ldp	x26, x25, [sp, #32]
    2464:	ldr	x28, [sp, #16]
    2468:	ldp	x29, x30, [sp], #96
    246c:	ret

0000000000002470 <BZ2_bzdopen>:
    2470:	mov	x2, x1
    2474:	mov	w3, #0x1                   	// #1
    2478:	mov	w1, w0
    247c:	mov	x0, xzr
    2480:	b	229c <bzopen_or_bzdopen>

0000000000002484 <BZ2_bzread>:
    2484:	sub	sp, sp, #0x20
    2488:	stp	x29, x30, [sp, #16]
    248c:	add	x29, sp, #0x10
    2490:	ldr	w9, [x0, #5096]
    2494:	cmp	w9, #0x4
    2498:	b.ne	24a4 <BZ2_bzread+0x20>  // b.any
    249c:	mov	w0, wzr
    24a0:	b	24c8 <BZ2_bzread+0x44>
    24a4:	mov	x8, x0
    24a8:	mov	w3, w2
    24ac:	mov	x2, x1
    24b0:	sub	x0, x29, #0x4
    24b4:	mov	x1, x8
    24b8:	bl	1e0c <BZ2_bzRead>
    24bc:	ldur	w8, [x29, #-4]
    24c0:	tst	w8, #0xfffffffb
    24c4:	csinv	w0, w0, wzr, eq  // eq = none
    24c8:	ldp	x29, x30, [sp, #16]
    24cc:	add	sp, sp, #0x20
    24d0:	ret

00000000000024d4 <BZ2_bzwrite>:
    24d4:	stp	x29, x30, [sp, #-32]!
    24d8:	str	x19, [sp, #16]
    24dc:	mov	x29, sp
    24e0:	mov	w19, w2
    24e4:	mov	x2, x1
    24e8:	mov	x1, x0
    24ec:	add	x0, x29, #0x1c
    24f0:	mov	w3, w19
    24f4:	bl	18c8 <BZ2_bzWrite>
    24f8:	ldr	w8, [x29, #28]
    24fc:	cmp	w8, #0x0
    2500:	csinv	w0, w19, wzr, eq  // eq = none
    2504:	ldr	x19, [sp, #16]
    2508:	ldp	x29, x30, [sp], #32
    250c:	ret

0000000000002510 <BZ2_bzflush>:
    2510:	mov	w0, wzr
    2514:	ret

0000000000002518 <BZ2_bzclose>:
    2518:	sub	sp, sp, #0x30
    251c:	stp	x29, x30, [sp, #16]
    2520:	stp	x20, x19, [sp, #32]
    2524:	add	x29, sp, #0x10
    2528:	cbz	x0, 25bc <BZ2_bzclose+0xa4>
    252c:	mov	w8, #0x1394                	// #5012
    2530:	ldrb	w8, [x0, x8]
    2534:	ldr	x19, [x0]
    2538:	mov	x20, x0
    253c:	sub	x0, x29, #0x4
    2540:	cbz	w8, 258c <BZ2_bzclose+0x74>
    2544:	mov	x1, x20
    2548:	mov	w2, wzr
    254c:	mov	x3, xzr
    2550:	mov	x4, xzr
    2554:	mov	x5, xzr
    2558:	mov	x6, xzr
    255c:	bl	1a1c <BZ2_bzWriteClose64>
    2560:	ldur	w8, [x29, #-4]
    2564:	cbz	w8, 2594 <BZ2_bzclose+0x7c>
    2568:	mov	w2, #0x1                   	// #1
    256c:	mov	x0, xzr
    2570:	mov	x1, x20
    2574:	mov	x3, xzr
    2578:	mov	x4, xzr
    257c:	mov	x5, xzr
    2580:	mov	x6, xzr
    2584:	bl	1a1c <BZ2_bzWriteClose64>
    2588:	b	2594 <BZ2_bzclose+0x7c>
    258c:	mov	x1, x20
    2590:	bl	1d8c <BZ2_bzReadClose>
    2594:	adrp	x8, 0 <stdin>
    2598:	ldr	x8, [x8]
    259c:	cmp	x19, x8
    25a0:	b.eq	25bc <BZ2_bzclose+0xa4>  // b.none
    25a4:	adrp	x8, 0 <stdout>
    25a8:	ldr	x8, [x8]
    25ac:	cmp	x19, x8
    25b0:	b.eq	25bc <BZ2_bzclose+0xa4>  // b.none
    25b4:	mov	x0, x19
    25b8:	bl	0 <fclose>
    25bc:	ldp	x20, x19, [sp, #32]
    25c0:	ldp	x29, x30, [sp, #16]
    25c4:	add	sp, sp, #0x30
    25c8:	ret

00000000000025cc <BZ2_bzerror>:
    25cc:	ldr	w8, [x0, #5096]
    25d0:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    25d4:	add	x9, x9, #0x0
    25d8:	and	w8, w8, w8, asr #31
    25dc:	sub	x9, x9, w8, sxtw #3
    25e0:	ldr	x0, [x9]
    25e4:	str	w8, [x1]
    25e8:	ret

00000000000025ec <add_pair_to_block>:
    25ec:	ldp	w8, w9, [x0, #92]
    25f0:	sxtw	x9, w9
    25f4:	cmp	w9, #0x1
    25f8:	b.lt	262c <add_pair_to_block+0x40>  // b.tstop
    25fc:	ldr	w11, [x0, #648]
    2600:	adrp	x13, 0 <BZ2_crc32Table>
    2604:	mov	w10, wzr
    2608:	and	w12, w8, #0xff
    260c:	add	x13, x13, #0x0
    2610:	eor	w14, w12, w11, lsr #24
    2614:	ldr	w14, [x13, w14, uxtw #2]
    2618:	add	w10, w10, #0x1
    261c:	cmp	w10, w9
    2620:	eor	w11, w14, w11, lsl #8
    2624:	str	w11, [x0, #648]
    2628:	b.lt	2610 <add_pair_to_block+0x24>  // b.tstop
    262c:	add	x10, x0, x8
    2630:	mov	w11, #0x1                   	// #1
    2634:	cmp	w9, #0x3
    2638:	strb	w11, [x10, #128]
    263c:	b.eq	265c <add_pair_to_block+0x70>  // b.none
    2640:	cmp	w9, #0x2
    2644:	b.eq	2698 <add_pair_to_block+0xac>  // b.none
    2648:	cmp	w9, #0x1
    264c:	b.ne	26c0 <add_pair_to_block+0xd4>  // b.any
    2650:	ldr	w10, [x0, #108]!
    2654:	sub	x9, x0, #0x2c
    2658:	b	272c <add_pair_to_block+0x140>
    265c:	ldr	x9, [x0, #64]!
    2660:	mov	x11, x0
    2664:	ldrsw	x10, [x11, #44]!
    2668:	strb	w8, [x9, x10]
    266c:	ldrsw	x9, [x11]
    2670:	add	x9, x9, #0x1
    2674:	str	w9, [x11]
    2678:	ldr	x10, [x0]
    267c:	strb	w8, [x10, x9]
    2680:	ldr	w9, [x11]
    2684:	add	w10, w9, #0x1
    2688:	str	w10, [x11]
    268c:	mov	x9, x0
    2690:	mov	x0, x11
    2694:	b	272c <add_pair_to_block+0x140>
    2698:	ldr	x9, [x0, #64]!
    269c:	mov	x11, x0
    26a0:	ldrsw	x10, [x11, #44]!
    26a4:	strb	w8, [x9, x10]
    26a8:	ldr	w10, [x11]
    26ac:	mov	x9, x0
    26b0:	mov	x0, x11
    26b4:	add	w10, w10, #0x1
    26b8:	str	w10, [x11]
    26bc:	b	272c <add_pair_to_block+0x140>
    26c0:	add	x9, x9, x0
    26c4:	mov	w10, #0x1                   	// #1
    26c8:	strb	w10, [x9, #124]
    26cc:	ldrsw	x10, [x0, #108]!
    26d0:	mov	x9, x0
    26d4:	ldr	x11, [x9, #-44]!
    26d8:	strb	w8, [x11, x10]
    26dc:	ldrsw	x10, [x0]
    26e0:	add	x10, x10, #0x1
    26e4:	str	w10, [x0]
    26e8:	ldr	x11, [x9]
    26ec:	strb	w8, [x11, x10]
    26f0:	ldrsw	x10, [x0]
    26f4:	add	x10, x10, #0x1
    26f8:	str	w10, [x0]
    26fc:	ldr	x11, [x9]
    2700:	strb	w8, [x11, x10]
    2704:	ldrsw	x10, [x0]
    2708:	add	x10, x10, #0x1
    270c:	str	w10, [x0]
    2710:	ldr	x11, [x9]
    2714:	strb	w8, [x11, x10]
    2718:	ldr	w8, [x0]
    271c:	ldurb	w11, [x0, #-12]
    2720:	add	w10, w8, #0x1
    2724:	sub	w8, w11, #0x4
    2728:	str	w10, [x0]
    272c:	ldr	x9, [x9]
    2730:	strb	w8, [x9, w10, sxtw]
    2734:	ldr	w8, [x0]
    2738:	add	w8, w8, #0x1
    273c:	str	w8, [x0]
    2740:	ret
