
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//ordchr.so_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000608 <.init>:
 608:	stp	x29, x30, [sp, #-16]!
 60c:	mov	x29, sp
 610:	bl	6a0 <fprintf@plt+0x10>
 614:	ldp	x29, x30, [sp], #16
 618:	ret

Disassembly of section .plt:

0000000000000620 <fputs@plt-0x20>:
 620:	stp	x16, x30, [sp, #-16]!
 624:	adrp	x16, 10000 <dl_load@@Base+0xf6e0>
 628:	ldr	x17, [x16, #4088]
 62c:	add	x16, x16, #0xff8
 630:	br	x17
 634:	nop
 638:	nop
 63c:	nop

0000000000000640 <fputs@plt>:
 640:	adrp	x16, 11000 <fputs@GLIBC_2.17>
 644:	ldr	x17, [x16]
 648:	add	x16, x16, #0x0
 64c:	br	x17

0000000000000650 <exit@plt>:
 650:	adrp	x16, 11000 <fputs@GLIBC_2.17>
 654:	ldr	x17, [x16, #8]
 658:	add	x16, x16, #0x8
 65c:	br	x17

0000000000000660 <__cxa_finalize@plt>:
 660:	adrp	x16, 11000 <fputs@GLIBC_2.17>
 664:	ldr	x17, [x16, #16]
 668:	add	x16, x16, #0x10
 66c:	br	x17

0000000000000670 <__gmon_start__@plt>:
 670:	adrp	x16, 11000 <fputs@GLIBC_2.17>
 674:	ldr	x17, [x16, #24]
 678:	add	x16, x16, #0x18
 67c:	br	x17

0000000000000680 <dcgettext@plt>:
 680:	adrp	x16, 11000 <fputs@GLIBC_2.17>
 684:	ldr	x17, [x16, #32]
 688:	add	x16, x16, #0x20
 68c:	br	x17

0000000000000690 <fprintf@plt>:
 690:	adrp	x16, 11000 <fputs@GLIBC_2.17>
 694:	ldr	x17, [x16, #40]
 698:	add	x16, x16, #0x28
 69c:	br	x17

Disassembly of section .text:

00000000000006a0 <dl_load@@Base-0x280>:
 6a0:	adrp	x0, 10000 <dl_load@@Base+0xf6e0>
 6a4:	ldr	x0, [x0, #4056]
 6a8:	cbz	x0, 6b0 <fprintf@plt+0x20>
 6ac:	b	670 <__gmon_start__@plt>
 6b0:	ret
 6b4:	adrp	x0, 11000 <dl_load@@Base+0x106e0>
 6b8:	add	x0, x0, #0x98
 6bc:	adrp	x1, 11000 <dl_load@@Base+0x106e0>
 6c0:	add	x1, x1, #0x98
 6c4:	cmp	x1, x0
 6c8:	b.eq	6e0 <fprintf@plt+0x50>  // b.none
 6cc:	adrp	x1, 10000 <dl_load@@Base+0xf6e0>
 6d0:	ldr	x1, [x1, #4032]
 6d4:	cbz	x1, 6e0 <fprintf@plt+0x50>
 6d8:	mov	x16, x1
 6dc:	br	x16
 6e0:	ret
 6e4:	adrp	x0, 11000 <dl_load@@Base+0x106e0>
 6e8:	add	x0, x0, #0x98
 6ec:	adrp	x1, 11000 <dl_load@@Base+0x106e0>
 6f0:	add	x1, x1, #0x98
 6f4:	sub	x1, x1, x0
 6f8:	mov	x2, #0x2                   	// #2
 6fc:	asr	x1, x1, #3
 700:	sdiv	x1, x1, x2
 704:	cbz	x1, 71c <fprintf@plt+0x8c>
 708:	adrp	x2, 10000 <dl_load@@Base+0xf6e0>
 70c:	ldr	x2, [x2, #4064]
 710:	cbz	x2, 71c <fprintf@plt+0x8c>
 714:	mov	x16, x2
 718:	br	x16
 71c:	ret
 720:	adrp	x0, 11000 <dl_load@@Base+0x106e0>
 724:	ldrb	w1, [x0, #152]
 728:	cbnz	w1, 76c <fprintf@plt+0xdc>
 72c:	stp	x29, x30, [sp, #-32]!
 730:	mov	x29, sp
 734:	str	x19, [sp, #16]
 738:	mov	x19, x0
 73c:	adrp	x0, 10000 <dl_load@@Base+0xf6e0>
 740:	ldr	x0, [x0, #4040]
 744:	cbz	x0, 754 <fprintf@plt+0xc4>
 748:	adrp	x0, 11000 <dl_load@@Base+0x106e0>
 74c:	ldr	x0, [x0, #48]
 750:	bl	660 <__cxa_finalize@plt>
 754:	bl	6b4 <fprintf@plt+0x24>
 758:	mov	w0, #0x1                   	// #1
 75c:	strb	w0, [x19, #152]
 760:	ldr	x19, [sp, #16]
 764:	ldp	x29, x30, [sp], #32
 768:	ret
 76c:	ret
 770:	b	6e4 <fprintf@plt+0x54>
 774:	stp	x29, x30, [sp, #-80]!
 778:	mov	w2, #0x2                   	// #2
 77c:	mov	x29, sp
 780:	stp	x19, x20, [sp, #16]
 784:	adrp	x20, 11000 <dl_load@@Base+0x106e0>
 788:	mov	x19, x1
 78c:	str	x21, [sp, #32]
 790:	add	x21, x20, #0xa0
 794:	add	x3, sp, #0x30
 798:	mov	x1, #0x0                   	// #0
 79c:	ldr	x0, [x21, #8]
 7a0:	ldr	x4, [x0, #152]
 7a4:	ldr	x0, [x20, #160]
 7a8:	blr	x4
 7ac:	cbz	w0, 7e0 <fprintf@plt+0x150>
 7b0:	ldr	x0, [sp, #56]
 7b4:	ldrb	w0, [x0]
 7b8:	ucvtf	d0, w0
 7bc:	mov	w0, #0x1                   	// #1
 7c0:	ldr	x21, [sp, #32]
 7c4:	str	w0, [x19]
 7c8:	str	wzr, [x19, #16]
 7cc:	mov	x0, x19
 7d0:	str	d0, [x19, #8]
 7d4:	ldp	x19, x20, [sp, #16]
 7d8:	ldp	x29, x30, [sp], #80
 7dc:	ret
 7e0:	ldr	x0, [x21, #8]
 7e4:	ldr	w1, [x0, #24]
 7e8:	cbz	w1, 814 <fprintf@plt+0x184>
 7ec:	ldr	x21, [x0, #112]
 7f0:	mov	w2, #0x5                   	// #5
 7f4:	ldr	x20, [x20, #160]
 7f8:	adrp	x1, 0 <fputs@plt-0x640>
 7fc:	mov	x0, #0x0                   	// #0
 800:	add	x1, x1, #0xa58
 804:	bl	680 <dcgettext@plt>
 808:	mov	x1, x0
 80c:	mov	x0, x20
 810:	blr	x21
 814:	fmov	d0, #-1.000000000000000000e+00
 818:	b	7bc <fprintf@plt+0x12c>
 81c:	stp	x29, x30, [sp, #-96]!
 820:	mov	w2, #0x1                   	// #1
 824:	mov	x29, sp
 828:	stp	x21, x22, [sp, #32]
 82c:	adrp	x21, 11000 <dl_load@@Base+0x106e0>
 830:	add	x22, x21, #0xa0
 834:	stp	x19, x20, [sp, #16]
 838:	add	x3, sp, #0x40
 83c:	mov	x19, x1
 840:	ldr	x0, [x22, #8]
 844:	mov	x1, #0x0                   	// #0
 848:	ldr	x4, [x0, #152]
 84c:	str	x23, [sp, #48]
 850:	ldr	x0, [x21, #160]
 854:	blr	x4
 858:	cbz	w0, 8e4 <fprintf@plt+0x254>
 85c:	ldr	d0, [sp, #72]
 860:	fcvtzu	w20, d0
 864:	and	w20, w20, #0xff
 868:	add	x0, x21, #0xa0
 86c:	stp	xzr, xzr, [x19]
 870:	stp	xzr, xzr, [x19, #16]
 874:	ldr	x22, [x0, #8]
 878:	mov	w0, #0x2                   	// #2
 87c:	ldr	x23, [x21, #160]
 880:	ldr	x1, [x22, #280]
 884:	str	w0, [x19]
 888:	mov	x0, #0x1                   	// #1
 88c:	str	x0, [x19, #16]
 890:	mov	x0, #0x2                   	// #2
 894:	blr	x1
 898:	mov	x21, x0
 89c:	cbnz	x0, 8c0 <fprintf@plt+0x230>
 8a0:	ldr	x4, [x22, #96]
 8a4:	adrp	x2, 0 <fputs@plt-0x640>
 8a8:	adrp	x1, 0 <fputs@plt-0x640>
 8ac:	add	x2, x2, #0xaae
 8b0:	add	x1, x1, #0xabc
 8b4:	mov	x0, x23
 8b8:	mov	x3, #0x2                   	// #2
 8bc:	blr	x4
 8c0:	strb	w20, [x21]
 8c4:	mov	x0, x19
 8c8:	strb	wzr, [x21, #1]
 8cc:	ldr	x23, [sp, #48]
 8d0:	str	x21, [x19, #8]
 8d4:	ldp	x19, x20, [sp, #16]
 8d8:	ldp	x21, x22, [sp, #32]
 8dc:	ldp	x29, x30, [sp], #96
 8e0:	ret
 8e4:	ldr	x0, [x22, #8]
 8e8:	ldr	w1, [x0, #24]
 8ec:	cbz	w1, 918 <fprintf@plt+0x288>
 8f0:	ldr	x20, [x0, #112]
 8f4:	mov	w2, #0x5                   	// #5
 8f8:	ldr	x22, [x21, #160]
 8fc:	adrp	x1, 0 <fputs@plt-0x640>
 900:	mov	x0, #0x0                   	// #0
 904:	add	x1, x1, #0xa83
 908:	bl	680 <dcgettext@plt>
 90c:	mov	x1, x0
 910:	mov	x0, x22
 914:	blr	x20
 918:	mov	w20, #0x0                   	// #0
 91c:	b	868 <fprintf@plt+0x1d8>

0000000000000920 <dl_load@@Base>:
 920:	stp	x29, x30, [sp, #-80]!
 924:	mov	x29, sp
 928:	stp	x19, x20, [sp, #16]
 92c:	adrp	x19, 11000 <dl_load@@Base+0x106e0>
 930:	stp	x21, x22, [sp, #32]
 934:	add	x21, x19, #0xa0
 938:	str	x1, [x19, #160]
 93c:	ldr	w1, [x0]
 940:	str	x0, [x21, #8]
 944:	stp	x23, x24, [sp, #48]
 948:	cmp	w1, #0x2
 94c:	str	x25, [sp, #64]
 950:	b.ne	95c <dl_load@@Base+0x3c>  // b.any
 954:	ldr	w0, [x0, #4]
 958:	tbz	w0, #31, 9a0 <dl_load@@Base+0x80>
 95c:	adrp	x20, 10000 <dl_load@@Base+0xf6e0>
 960:	add	x19, x19, #0xa0
 964:	adrp	x0, 0 <fputs@plt-0x640>
 968:	add	x0, x0, #0xada
 96c:	ldr	x20, [x20, #4048]
 970:	ldr	x1, [x20]
 974:	bl	640 <fputs@plt>
 978:	ldr	x0, [x19, #8]
 97c:	adrp	x1, 0 <fputs@plt-0x640>
 980:	add	x1, x1, #0xb00
 984:	mov	w3, #0x0                   	// #0
 988:	mov	w2, #0x2                   	// #2
 98c:	ldp	w4, w5, [x0]
 990:	ldr	x0, [x20]
 994:	bl	690 <fprintf@plt>
 998:	mov	w0, #0x1                   	// #1
 99c:	bl	650 <exit@plt>
 9a0:	adrp	x20, 11000 <dl_load@@Base+0x106e0>
 9a4:	adrp	x23, 0 <fputs@plt-0x640>
 9a8:	adrp	x24, 0 <fputs@plt-0x640>
 9ac:	add	x20, x20, #0x38
 9b0:	add	x23, x23, #0xaff
 9b4:	add	x24, x24, #0xb33
 9b8:	mov	w22, #0x0                   	// #0
 9bc:	mov	x25, #0x0                   	// #0
 9c0:	ldr	x2, [x20]
 9c4:	ldp	x0, x1, [x21]
 9c8:	cbz	x2, a04 <dl_load@@Base+0xe4>
 9cc:	ldr	x3, [x1, #48]
 9d0:	mov	x2, x20
 9d4:	mov	x1, x23
 9d8:	blr	x3
 9dc:	cbnz	w0, 9fc <dl_load@@Base+0xdc>
 9e0:	ldr	x0, [x21, #8]
 9e4:	mov	x1, x24
 9e8:	ldr	x2, [x20]
 9ec:	add	w22, w22, #0x1
 9f0:	ldr	x3, [x0, #104]
 9f4:	ldr	x0, [x21]
 9f8:	blr	x3
 9fc:	add	x20, x20, #0x30
 a00:	cbz	x25, a40 <dl_load@@Base+0x120>
 a04:	add	x0, x19, #0xa0
 a08:	adrp	x1, 0 <fputs@plt-0x640>
 a0c:	add	x1, x1, #0xb4d
 a10:	ldr	x0, [x0, #8]
 a14:	ldr	x2, [x0, #88]
 a18:	ldr	x0, [x19, #160]
 a1c:	blr	x2
 a20:	cmp	w22, #0x0
 a24:	cset	w0, eq  // eq = none
 a28:	ldp	x19, x20, [sp, #16]
 a2c:	ldp	x21, x22, [sp, #32]
 a30:	ldp	x23, x24, [sp, #48]
 a34:	ldr	x25, [sp, #64]
 a38:	ldp	x29, x30, [sp], #80
 a3c:	ret
 a40:	mov	x25, #0x1                   	// #1
 a44:	b	9c0 <dl_load@@Base+0xa0>

Disassembly of section .fini:

0000000000000a48 <.fini>:
 a48:	stp	x29, x30, [sp, #-16]!
 a4c:	mov	x29, sp
 a50:	ldp	x29, x30, [sp], #16
 a54:	ret
