
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//setjmp_test.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <jmp0>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	w1, #0x0                   	// #0
   c:	adrp	x0, 0 <jmp0>
  10:	add	x0, x0, #0x0
  14:	ldr	x0, [x0]
  18:	bl	0 <grub_longjmp>
  1c:	nop
	...

0000000000000028 <jmp1>:
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	mov	w1, #0x1                   	// #1
  34:	adrp	x0, 0 <jmp0>
  38:	add	x0, x0, #0x0
  3c:	ldr	x0, [x0]
  40:	bl	0 <grub_longjmp>
  44:	nop
	...

0000000000000050 <jmp2>:
  50:	stp	x29, x30, [sp, #-16]!
  54:	mov	x29, sp
  58:	mov	w1, #0x2                   	// #2
  5c:	adrp	x0, 0 <jmp0>
  60:	add	x0, x0, #0x0
  64:	ldr	x0, [x0]
  68:	bl	0 <grub_longjmp>
  6c:	nop
	...

0000000000000078 <setjmp_test>:
  78:	stp	x29, x30, [sp, #-32]!
  7c:	mov	x29, sp
  80:	adrp	x0, 0 <jmp0>
  84:	add	x0, x0, #0x0
  88:	ldr	x0, [x0]
  8c:	str	wzr, [x0]
  90:	adrp	x0, 0 <jmp0>
  94:	add	x0, x0, #0x0
  98:	ldr	x0, [x0]
  9c:	str	wzr, [x0]
  a0:	adrp	x0, 0 <jmp0>
  a4:	add	x0, x0, #0x0
  a8:	ldr	x0, [x0]
  ac:	bl	0 <grub_setjmp>
  b0:	str	w0, [sp, #28]
  b4:	adrp	x0, 0 <jmp0>
  b8:	add	x0, x0, #0x0
  bc:	ldr	x0, [x0]
  c0:	ldr	w0, [x0]
  c4:	ldr	w1, [sp, #28]
  c8:	cmp	w1, w0
  cc:	cset	w0, eq  // eq = none
  d0:	and	w0, w0, #0xff
  d4:	mov	w8, w0
  d8:	adrp	x0, 0 <jmp0>
  dc:	add	x0, x0, #0x0
  e0:	ldr	x0, [x0]
  e4:	ldr	w0, [x0]
  e8:	mov	w7, w0
  ec:	ldr	w6, [sp, #28]
  f0:	adrp	x0, 0 <jmp0>
  f4:	add	x0, x0, #0x0
  f8:	ldr	x5, [x0]
  fc:	adrp	x0, 0 <jmp0>
 100:	add	x0, x0, #0x0
 104:	ldr	x4, [x0]
 108:	mov	w3, #0x3c                  	// #60
 10c:	adrp	x0, 0 <jmp0>
 110:	add	x0, x0, #0x0
 114:	ldr	x2, [x0]
 118:	adrp	x0, 0 <jmp0>
 11c:	add	x0, x0, #0x0
 120:	ldr	x1, [x0]
 124:	mov	w0, w8
 128:	bl	0 <grub_test_assert_helper>
 12c:	adrp	x0, 0 <jmp0>
 130:	add	x0, x0, #0x0
 134:	ldr	x0, [x0]
 138:	ldr	w0, [x0]
 13c:	add	w2, w0, #0x1
 140:	adrp	x1, 0 <jmp0>
 144:	add	x1, x1, #0x0
 148:	ldr	x1, [x1]
 14c:	str	w2, [x1]
 150:	cmp	w0, #0x3
 154:	b.eq	20c <setjmp_test+0x194>  // b.none
 158:	cmp	w0, #0x3
 15c:	b.gt	1cc <setjmp_test+0x154>
 160:	cmp	w0, #0x2
 164:	b.eq	1b4 <setjmp_test+0x13c>  // b.none
 168:	cmp	w0, #0x2
 16c:	b.gt	1cc <setjmp_test+0x154>
 170:	cmp	w0, #0x0
 174:	b.eq	184 <setjmp_test+0x10c>  // b.none
 178:	cmp	w0, #0x1
 17c:	b.eq	19c <setjmp_test+0x124>  // b.none
 180:	b	1cc <setjmp_test+0x154>
 184:	adrp	x0, 0 <jmp0>
 188:	add	x0, x0, #0x0
 18c:	ldr	x0, [x0]
 190:	mov	w1, #0x1                   	// #1
 194:	str	w1, [x0]
 198:	bl	0 <jmp0>
 19c:	adrp	x0, 0 <jmp0>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	x0, [x0]
 1a8:	mov	w1, #0x1                   	// #1
 1ac:	str	w1, [x0]
 1b0:	bl	28 <jmp1>
 1b4:	adrp	x0, 0 <jmp0>
 1b8:	add	x0, x0, #0x0
 1bc:	ldr	x0, [x0]
 1c0:	mov	w1, #0x2                   	// #2
 1c4:	str	w1, [x0]
 1c8:	bl	50 <jmp2>
 1cc:	adrp	x0, 0 <jmp0>
 1d0:	add	x0, x0, #0x0
 1d4:	ldr	x5, [x0]
 1d8:	adrp	x0, 0 <jmp0>
 1dc:	add	x0, x0, #0x0
 1e0:	ldr	x4, [x0]
 1e4:	mov	w3, #0x4c                  	// #76
 1e8:	adrp	x0, 0 <jmp0>
 1ec:	add	x0, x0, #0x0
 1f0:	ldr	x2, [x0]
 1f4:	adrp	x0, 0 <jmp0>
 1f8:	add	x0, x0, #0x0
 1fc:	ldr	x1, [x0]
 200:	mov	w0, #0x0                   	// #0
 204:	bl	0 <grub_test_assert_helper>
 208:	b	210 <setjmp_test+0x198>
 20c:	nop
 210:	ldp	x29, x30, [sp], #32
 214:	ret
	...

0000000000000260 <grub_mod_init>:
 260:	stp	x29, x30, [sp, #-32]!
 264:	mov	x29, sp
 268:	str	x0, [sp, #24]
 26c:	adrp	x0, 0 <jmp0>
 270:	add	x0, x0, #0x0
 274:	ldr	x1, [x0]
 278:	adrp	x0, 0 <jmp0>
 27c:	add	x0, x0, #0x0
 280:	ldr	x0, [x0]
 284:	bl	0 <grub_test_register>
 288:	nop
 28c:	ldp	x29, x30, [sp], #32
 290:	ret
 294:	nop
	...

00000000000002a8 <grub_mod_fini>:
 2a8:	stp	x29, x30, [sp, #-16]!
 2ac:	mov	x29, sp
 2b0:	adrp	x0, 0 <jmp0>
 2b4:	add	x0, x0, #0x0
 2b8:	ldr	x0, [x0]
 2bc:	bl	0 <grub_test_unregister>
 2c0:	nop
 2c4:	ldp	x29, x30, [sp], #16
 2c8:	ret
 2cc:	nop
	...
