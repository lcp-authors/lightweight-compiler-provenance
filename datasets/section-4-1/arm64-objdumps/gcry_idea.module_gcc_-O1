
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_idea.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <mul_inv>:
   0:	and	w2, w0, #0xffff
   4:	mov	w0, w2
   8:	cmp	w2, #0x1
   c:	b.ls	78 <mul_inv+0x78>  // b.plast
  10:	and	x0, x2, #0xffff
  14:	mov	w4, #0x10001               	// #65537
  18:	udiv	x1, x4, x0
  1c:	and	w3, w1, #0xffff
  20:	msub	x1, x1, x0, x4
  24:	and	w1, w1, #0xffff
  28:	mov	w0, #0x1                   	// #1
  2c:	cmp	w1, w0
  30:	b.eq	7c <mul_inv+0x7c>  // b.none
  34:	udiv	w4, w2, w1
  38:	msub	w2, w4, w1, w2
  3c:	and	w2, w2, #0xffff
  40:	madd	w0, w4, w3, w0
  44:	and	w0, w0, #0xffff
  48:	cmp	w2, #0x1
  4c:	b.eq	78 <mul_inv+0x78>  // b.none
  50:	udiv	w4, w1, w2
  54:	msub	w1, w4, w2, w1
  58:	and	w1, w1, #0xffff
  5c:	madd	w3, w4, w0, w3
  60:	and	w3, w3, #0xffff
  64:	cmp	w1, #0x1
  68:	b.ne	34 <mul_inv+0x34>  // b.any
  6c:	mov	w0, #0x1                   	// #1
  70:	sub	w0, w0, w3
  74:	and	w0, w0, #0xffff
  78:	ret
  7c:	sub	w0, w0, w3
  80:	and	w0, w0, #0xffff
  84:	b	78 <mul_inv+0x78>

0000000000000088 <invert_key>:
  88:	stp	x29, x30, [sp, #-192]!
  8c:	mov	x29, sp
  90:	stp	x19, x20, [sp, #16]
  94:	stp	x21, x22, [sp, #32]
  98:	stp	x23, x24, [sp, #48]
  9c:	stp	x25, x26, [sp, #64]
  a0:	mov	x24, x0
  a4:	mov	x26, x1
  a8:	ldrh	w0, [x0]
  ac:	bl	0 <mul_inv>
  b0:	mov	w22, w0
  b4:	ldrh	w20, [x24, #2]
  b8:	neg	w20, w20
  bc:	and	w20, w20, #0xffff
  c0:	ldrh	w21, [x24, #4]
  c4:	neg	w21, w21
  c8:	and	w21, w21, #0xffff
  cc:	add	x19, x24, #0x8
  d0:	ldrh	w0, [x24, #6]
  d4:	bl	0 <mul_inv>
  d8:	strh	w0, [sp, #190]
  dc:	strh	w21, [sp, #188]
  e0:	strh	w20, [sp, #186]
  e4:	strh	w22, [sp, #184]
  e8:	add	x25, x24, #0x5c
  ec:	add	x20, sp, #0xb8
  f0:	ldrh	w0, [x19]
  f4:	ldrh	w1, [x19, #2]
  f8:	sturh	w1, [x20, #-2]
  fc:	sturh	w0, [x20, #-4]
 100:	ldrh	w0, [x19, #4]
 104:	bl	0 <mul_inv>
 108:	mov	w23, w0
 10c:	ldrh	w22, [x19, #6]
 110:	neg	w22, w22
 114:	and	w22, w22, #0xffff
 118:	ldrh	w21, [x19, #8]
 11c:	neg	w21, w21
 120:	and	w21, w21, #0xffff
 124:	add	x19, x19, #0xc
 128:	ldurh	w0, [x19, #-2]
 12c:	bl	0 <mul_inv>
 130:	sturh	w0, [x20, #-6]
 134:	sturh	w22, [x20, #-8]
 138:	sturh	w21, [x20, #-10]
 13c:	strh	w23, [x20, #-12]!
 140:	cmp	x25, x19
 144:	b.ne	f0 <invert_key+0x68>  // b.any
 148:	ldrh	w0, [x24, #92]
 14c:	ldrh	w1, [x24, #94]
 150:	strh	w1, [sp, #98]
 154:	strh	w0, [sp, #96]
 158:	ldrh	w0, [x24, #96]
 15c:	bl	0 <mul_inv>
 160:	mov	w21, w0
 164:	ldrh	w19, [x24, #98]
 168:	neg	w19, w19
 16c:	and	w19, w19, #0xffff
 170:	ldrh	w20, [x24, #100]
 174:	neg	w20, w20
 178:	and	w20, w20, #0xffff
 17c:	ldrh	w0, [x24, #102]
 180:	bl	0 <mul_inv>
 184:	strh	w0, [sp, #94]
 188:	strh	w20, [sp, #92]
 18c:	strh	w19, [sp, #90]
 190:	strh	w21, [sp, #88]
 194:	mov	x2, #0x68                  	// #104
 198:	add	x1, sp, #0x58
 19c:	mov	x0, x26
 1a0:	bl	0 <grub_memmove>
 1a4:	mov	x2, #0x68                  	// #104
 1a8:	mov	w1, #0x0                   	// #0
 1ac:	add	x0, sp, #0x58
 1b0:	bl	0 <grub_memset>
 1b4:	ldp	x19, x20, [sp, #16]
 1b8:	ldp	x21, x22, [sp, #32]
 1bc:	ldp	x23, x24, [sp, #48]
 1c0:	ldp	x25, x26, [sp, #64]
 1c4:	ldp	x29, x30, [sp], #192
 1c8:	ret

00000000000001cc <cipher>:
 1cc:	stp	x29, x30, [sp, #-48]!
 1d0:	mov	x29, sp
 1d4:	stp	x19, x20, [sp, #16]
 1d8:	mov	x20, x0
 1dc:	mov	x19, x2
 1e0:	mov	x2, #0x8                   	// #8
 1e4:	add	x0, sp, #0x28
 1e8:	bl	0 <grub_memmove>
 1ec:	ldrh	w0, [sp, #40]
 1f0:	lsl	w1, w0, #8
 1f4:	orr	w0, w1, w0, lsr #8
 1f8:	and	w0, w0, #0xffff
 1fc:	ldrh	w2, [sp, #42]
 200:	lsl	w9, w2, #8
 204:	orr	w2, w9, w2, lsr #8
 208:	and	w2, w2, #0xffff
 20c:	ldrh	w11, [sp, #44]
 210:	lsl	w1, w11, #8
 214:	orr	w11, w1, w11, lsr #8
 218:	and	w11, w11, #0xffff
 21c:	ldrh	w1, [sp, #46]
 220:	lsl	w4, w1, #8
 224:	orr	w1, w4, w1, lsr #8
 228:	and	w4, w1, #0xffff
 22c:	add	x7, x19, #0x60
 230:	mov	x5, x19
 234:	mov	w6, #0x1                   	// #1
 238:	b	360 <cipher+0x194>
 23c:	sub	w0, w6, w8
 240:	and	w8, w0, #0xffff
 244:	b	250 <cipher+0x84>
 248:	sub	w0, w6, w0
 24c:	and	w8, w0, #0xffff
 250:	ldrh	w9, [x5, #2]
 254:	add	w9, w2, w9
 258:	and	w9, w9, #0xffff
 25c:	ldrh	w2, [x5, #4]
 260:	add	w2, w11, w2
 264:	and	w2, w2, #0xffff
 268:	ldrh	w1, [x5, #6]
 26c:	cbz	w1, 2a0 <cipher+0xd4>
 270:	cbz	w4, 294 <cipher+0xc8>
 274:	mul	w1, w4, w1
 278:	and	w0, w1, #0xffff
 27c:	lsr	w1, w1, #16
 280:	sub	w10, w0, w1
 284:	cmp	w0, w1
 288:	cinc	w1, w10, cc  // cc = lo, ul, last
 28c:	and	w10, w1, #0xffff
 290:	b	2a8 <cipher+0xdc>
 294:	sub	w1, w6, w1
 298:	and	w10, w1, #0xffff
 29c:	b	2a8 <cipher+0xdc>
 2a0:	sub	w1, w6, w4
 2a4:	and	w10, w1, #0xffff
 2a8:	eor	w3, w2, w8
 2ac:	ldrh	w0, [x5, #8]
 2b0:	cbz	w0, 2e8 <cipher+0x11c>
 2b4:	cmp	w2, w8
 2b8:	b.eq	2dc <cipher+0x110>  // b.none
 2bc:	mul	w3, w3, w0
 2c0:	and	w1, w3, #0xffff
 2c4:	lsr	w0, w3, #16
 2c8:	sub	w3, w1, w0
 2cc:	cmp	w1, w0
 2d0:	cinc	w3, w3, cc  // cc = lo, ul, last
 2d4:	and	w3, w3, #0xffff
 2d8:	b	2f0 <cipher+0x124>
 2dc:	sub	w3, w6, w0
 2e0:	and	w3, w3, #0xffff
 2e4:	b	2f0 <cipher+0x124>
 2e8:	sub	w3, w6, w3
 2ec:	and	w3, w3, #0xffff
 2f0:	eor	w1, w9, w10
 2f4:	add	w1, w3, w1
 2f8:	and	w1, w1, #0xffff
 2fc:	add	x5, x5, #0xc
 300:	ldurh	w0, [x5, #-2]
 304:	cbz	w0, 338 <cipher+0x16c>
 308:	cbz	w1, 32c <cipher+0x160>
 30c:	mul	w1, w1, w0
 310:	and	w4, w1, #0xffff
 314:	lsr	w1, w1, #16
 318:	sub	w0, w4, w1
 31c:	cmp	w4, w1
 320:	cinc	w1, w0, cc  // cc = lo, ul, last
 324:	and	w1, w1, #0xffff
 328:	b	340 <cipher+0x174>
 32c:	sub	w1, w6, w0
 330:	and	w1, w1, #0xffff
 334:	b	340 <cipher+0x174>
 338:	sub	w1, w6, w1
 33c:	and	w1, w1, #0xffff
 340:	add	w3, w3, w1
 344:	and	w3, w3, #0xffff
 348:	eor	w0, w1, w8
 34c:	eor	w4, w3, w10
 350:	eor	w2, w2, w1
 354:	eor	w11, w9, w3
 358:	cmp	x7, x5
 35c:	b.eq	38c <cipher+0x1c0>  // b.none
 360:	ldrh	w8, [x5]
 364:	cbz	w8, 248 <cipher+0x7c>
 368:	cbz	w0, 23c <cipher+0x70>
 36c:	mul	w0, w0, w8
 370:	and	w1, w0, #0xffff
 374:	lsr	w0, w0, #16
 378:	sub	w8, w1, w0
 37c:	cmp	w1, w0
 380:	cinc	w8, w8, cc  // cc = lo, ul, last
 384:	and	w8, w8, #0xffff
 388:	b	250 <cipher+0x84>
 38c:	ldrh	w5, [x19, #96]
 390:	cbz	w5, 3cc <cipher+0x200>
 394:	cmp	w1, w8
 398:	b.eq	3bc <cipher+0x1f0>  // b.none
 39c:	mul	w0, w0, w5
 3a0:	and	w5, w0, #0xffff
 3a4:	lsr	w0, w0, #16
 3a8:	sub	w1, w5, w0
 3ac:	cmp	w5, w0
 3b0:	cinc	w0, w1, cc  // cc = lo, ul, last
 3b4:	strh	w0, [sp, #40]
 3b8:	b	3d8 <cipher+0x20c>
 3bc:	mov	w0, #0x1                   	// #1
 3c0:	sub	w0, w0, w5
 3c4:	strh	w0, [sp, #40]
 3c8:	b	3d8 <cipher+0x20c>
 3cc:	mov	w1, #0x1                   	// #1
 3d0:	sub	w0, w1, w0
 3d4:	strh	w0, [sp, #40]
 3d8:	ldrh	w0, [x19, #98]
 3dc:	add	w11, w11, w0
 3e0:	and	w11, w11, #0xffff
 3e4:	ldrh	w0, [x19, #100]
 3e8:	add	w0, w2, w0
 3ec:	and	w0, w0, #0xffff
 3f0:	ldrh	w1, [x19, #102]
 3f4:	cbz	w1, 430 <cipher+0x264>
 3f8:	cmp	w3, w10
 3fc:	b.eq	420 <cipher+0x254>  // b.none
 400:	mul	w1, w4, w1
 404:	and	w3, w1, #0xffff
 408:	lsr	w1, w1, #16
 40c:	sub	w2, w3, w1
 410:	cmp	w3, w1
 414:	cinc	w1, w2, cc  // cc = lo, ul, last
 418:	strh	w1, [sp, #46]
 41c:	b	43c <cipher+0x270>
 420:	mov	w2, #0x1                   	// #1
 424:	sub	w1, w2, w1
 428:	strh	w1, [sp, #46]
 42c:	b	43c <cipher+0x270>
 430:	mov	w1, #0x1                   	// #1
 434:	sub	w1, w1, w4
 438:	strh	w1, [sp, #46]
 43c:	ldrh	w1, [sp, #40]
 440:	lsl	w2, w1, #8
 444:	orr	w1, w2, w1, lsr #8
 448:	strh	w1, [sp, #40]
 44c:	lsl	w1, w0, #8
 450:	orr	w0, w1, w0, lsr #8
 454:	strh	w0, [sp, #42]
 458:	lsl	w0, w11, #8
 45c:	orr	w11, w0, w11, lsr #8
 460:	strh	w11, [sp, #44]
 464:	ldrh	w0, [sp, #46]
 468:	lsl	w1, w0, #8
 46c:	orr	w0, w1, w0, lsr #8
 470:	strh	w0, [sp, #46]
 474:	mov	x2, #0x2                   	// #2
 478:	add	x1, sp, #0x28
 47c:	mov	x0, x20
 480:	bl	0 <grub_memmove>
 484:	mov	x2, #0x2                   	// #2
 488:	add	x1, sp, #0x2c
 48c:	add	x0, x20, x2
 490:	bl	0 <grub_memmove>
 494:	mov	x2, #0x2                   	// #2
 498:	add	x0, sp, #0x28
 49c:	add	x1, x0, x2
 4a0:	add	x0, x20, #0x4
 4a4:	bl	0 <grub_memmove>
 4a8:	mov	x2, #0x2                   	// #2
 4ac:	add	x1, sp, #0x2e
 4b0:	add	x0, x20, #0x6
 4b4:	bl	0 <grub_memmove>
 4b8:	ldp	x19, x20, [sp, #16]
 4bc:	ldp	x29, x30, [sp], #48
 4c0:	ret

00000000000004c4 <idea_decrypt>:
 4c4:	stp	x29, x30, [sp, #-48]!
 4c8:	mov	x29, sp
 4cc:	stp	x19, x20, [sp, #16]
 4d0:	str	x21, [sp, #32]
 4d4:	mov	x19, x0
 4d8:	mov	x20, x1
 4dc:	mov	x21, x2
 4e0:	ldr	w0, [x0, #208]
 4e4:	cbz	w0, 510 <idea_decrypt+0x4c>
 4e8:	add	x2, x19, #0x68
 4ec:	mov	x1, x21
 4f0:	mov	x0, x20
 4f4:	bl	1cc <cipher>
 4f8:	mov	w0, #0x30                  	// #48
 4fc:	bl	0 <_gcry_burn_stack>
 500:	ldp	x19, x20, [sp, #16]
 504:	ldr	x21, [sp, #32]
 508:	ldp	x29, x30, [sp], #48
 50c:	ret
 510:	mov	w0, #0x1                   	// #1
 514:	str	w0, [x19, #208]
 518:	add	x1, x19, #0x68
 51c:	mov	x0, x19
 520:	bl	88 <invert_key>
 524:	b	4e8 <idea_decrypt+0x24>

0000000000000528 <idea_encrypt>:
 528:	stp	x29, x30, [sp, #-16]!
 52c:	mov	x29, sp
 530:	mov	x3, x0
 534:	mov	x0, x1
 538:	mov	x1, x2
 53c:	mov	x2, x3
 540:	bl	1cc <cipher>
 544:	mov	w0, #0x30                  	// #48
 548:	bl	0 <_gcry_burn_stack>
 54c:	ldp	x29, x30, [sp], #16
 550:	ret

0000000000000554 <idea_setkey>:
 554:	stp	x29, x30, [sp, #-32]!
 558:	mov	x29, sp
 55c:	str	x19, [sp, #16]
 560:	adrp	x3, 0 <mul_inv>
 564:	ldr	x3, [x3]
 568:	ldr	w3, [x3]
 56c:	cbnz	w3, 628 <idea_setkey+0xd4>
 570:	adrp	x3, 0 <mul_inv>
 574:	ldr	x3, [x3]
 578:	mov	w4, #0x1                   	// #1
 57c:	str	w4, [x3]
 580:	str	xzr, [x3, #8]
 584:	cmp	w2, #0x10
 588:	b.ne	640 <idea_setkey+0xec>  // b.any
 58c:	str	wzr, [x0, #208]
 590:	mov	x2, #0x0                   	// #0
 594:	add	x5, x1, #0x1
 598:	ldrb	w3, [x1, x2]
 59c:	ubfiz	w3, w3, #8, #8
 5a0:	ldrb	w4, [x5, x2]
 5a4:	add	w3, w3, w4
 5a8:	strh	w3, [x0, x2]
 5ac:	add	x2, x2, #0x2
 5b0:	cmp	x2, #0x10
 5b4:	b.ne	598 <idea_setkey+0x44>  // b.any
 5b8:	mov	x2, x0
 5bc:	mov	w5, #0x2c                  	// #44
 5c0:	mov	w1, #0x0                   	// #0
 5c4:	add	w3, w1, #0x1
 5c8:	add	x6, x2, w3, sxtw #1
 5cc:	add	w1, w1, #0x2
 5d0:	and	x1, x1, #0x7
 5d4:	ldrh	w1, [x2, x1, lsl #1]
 5d8:	and	x4, x3, #0x7
 5dc:	ldrh	w4, [x2, x4, lsl #1]
 5e0:	lsl	w4, w4, #9
 5e4:	orr	w1, w4, w1, lsr #7
 5e8:	strh	w1, [x6, #14]
 5ec:	and	w1, w3, #0x8
 5f0:	mov	w1, w1
 5f4:	add	x2, x2, x1, lsl #1
 5f8:	and	w1, w3, #0x7
 5fc:	subs	w5, w5, #0x1
 600:	b.ne	5c4 <idea_setkey+0x70>  // b.any
 604:	add	x1, x0, #0x68
 608:	bl	88 <invert_key>
 60c:	mov	w19, #0x0                   	// #0
 610:	mov	w0, #0x47                  	// #71
 614:	bl	0 <_gcry_burn_stack>
 618:	mov	w0, w19
 61c:	ldr	x19, [sp, #16]
 620:	ldp	x29, x30, [sp], #32
 624:	ret
 628:	adrp	x3, 0 <mul_inv>
 62c:	ldr	x3, [x3]
 630:	ldr	x3, [x3, #8]
 634:	mov	w19, #0x1c                  	// #28
 638:	cbnz	x3, 610 <idea_setkey+0xbc>
 63c:	b	584 <idea_setkey+0x30>
 640:	adrp	x0, 0 <mul_inv>
 644:	ldr	x3, [x0]
 648:	mov	w2, #0xfb                  	// #251
 64c:	adrp	x0, 0 <mul_inv>
 650:	ldr	x1, [x0]
 654:	adrp	x0, 0 <mul_inv>
 658:	ldr	x0, [x0]
 65c:	bl	0 <_gcry_assert_failed>
	...

0000000000000680 <grub_mod_init>:
 680:	stp	x29, x30, [sp, #-16]!
 684:	mov	x29, sp
 688:	adrp	x0, 0 <mul_inv>
 68c:	ldr	x0, [x0]
 690:	bl	0 <grub_cipher_register>
 694:	ldp	x29, x30, [sp], #16
 698:	ret
 69c:	nop
	...

00000000000006a8 <grub_mod_fini>:
 6a8:	stp	x29, x30, [sp, #-16]!
 6ac:	mov	x29, sp
 6b0:	adrp	x0, 0 <mul_inv>
 6b4:	ldr	x0, [x0]
 6b8:	bl	0 <grub_cipher_unregister>
 6bc:	ldp	x29, x30, [sp], #16
 6c0:	ret
 6c4:	nop
	...
