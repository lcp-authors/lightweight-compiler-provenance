
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_clang_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003020 <.init>:
    3020:	stp	x29, x30, [sp, #-16]!
    3024:	mov	x29, sp
    3028:	bl	3520 <pthread_cond_timedwait@plt+0x10>
    302c:	ldp	x29, x30, [sp], #16
    3030:	ret

Disassembly of section .plt:

0000000000003040 <memcpy@plt-0x20>:
    3040:	stp	x16, x30, [sp, #-16]!
    3044:	adrp	x16, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    3048:	ldr	x17, [x16, #4088]
    304c:	add	x16, x16, #0xff8
    3050:	br	x17
    3054:	nop
    3058:	nop
    305c:	nop

0000000000003060 <memcpy@plt>:
    3060:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3064:	ldr	x17, [x16]
    3068:	add	x16, x16, #0x0
    306c:	br	x17

0000000000003070 <memmove@plt>:
    3070:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3074:	ldr	x17, [x16, #8]
    3078:	add	x16, x16, #0x8
    307c:	br	x17

0000000000003080 <pthread_sigmask@plt>:
    3080:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3084:	ldr	x17, [x16, #16]
    3088:	add	x16, x16, #0x10
    308c:	br	x17

0000000000003090 <lzma_block_buffer_encode@plt>:
    3090:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16, #24]
    3098:	add	x16, x16, #0x18
    309c:	br	x17

00000000000030a0 <lzma_check_is_supported@plt>:
    30a0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #32]
    30a8:	add	x16, x16, #0x20
    30ac:	br	x17

00000000000030b0 <lzma_filter_flags_size@plt>:
    30b0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #40]
    30b8:	add	x16, x16, #0x28
    30bc:	br	x17

00000000000030c0 <lzma_index_buffer_encode@plt>:
    30c0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #48]
    30c8:	add	x16, x16, #0x30
    30cc:	br	x17

00000000000030d0 <lzma_stream_flags_compare@plt>:
    30d0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #56]
    30d8:	add	x16, x16, #0x38
    30dc:	br	x17

00000000000030e0 <lzma_block_buffer_bound@plt>:
    30e0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #64]
    30e8:	add	x16, x16, #0x40
    30ec:	br	x17

00000000000030f0 <lzma_index_hash_decode@plt>:
    30f0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #72]
    30f8:	add	x16, x16, #0x48
    30fc:	br	x17

0000000000003100 <__cxa_finalize@plt>:
    3100:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #80]
    3108:	add	x16, x16, #0x50
    310c:	br	x17

0000000000003110 <clock_gettime@plt>:
    3110:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #88]
    3118:	add	x16, x16, #0x58
    311c:	br	x17

0000000000003120 <lzma_block_header_size@plt>:
    3120:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #96]
    3128:	add	x16, x16, #0x60
    312c:	br	x17

0000000000003130 <sigfillset@plt>:
    3130:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #104]
    3138:	add	x16, x16, #0x68
    313c:	br	x17

0000000000003140 <lzma_index_memusage@plt>:
    3140:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #112]
    3148:	add	x16, x16, #0x70
    314c:	br	x17

0000000000003150 <lzma_block_unpadded_size@plt>:
    3150:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #120]
    3158:	add	x16, x16, #0x78
    315c:	br	x17

0000000000003160 <malloc@plt>:
    3160:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #128]
    3168:	add	x16, x16, #0x80
    316c:	br	x17

0000000000003170 <lzma_index_hash_append@plt>:
    3170:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #136]
    3178:	add	x16, x16, #0x88
    317c:	br	x17

0000000000003180 <lzma_crc32@plt>:
    3180:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #144]
    3188:	add	x16, x16, #0x90
    318c:	br	x17

0000000000003190 <pthread_condattr_destroy@plt>:
    3190:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #152]
    3198:	add	x16, x16, #0x98
    319c:	br	x17

00000000000031a0 <lzma_stream_buffer_encode@plt>:
    31a0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #160]
    31a8:	add	x16, x16, #0xa0
    31ac:	br	x17

00000000000031b0 <pthread_cond_signal@plt>:
    31b0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #168]
    31b8:	add	x16, x16, #0xa8
    31bc:	br	x17

00000000000031c0 <lzma_stream_footer_encode@plt>:
    31c0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #176]
    31c8:	add	x16, x16, #0xb0
    31cc:	br	x17

00000000000031d0 <lzma_raw_encoder_memusage@plt>:
    31d0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #184]
    31d8:	add	x16, x16, #0xb8
    31dc:	br	x17

00000000000031e0 <memset@plt>:
    31e0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #192]
    31e8:	add	x16, x16, #0xc0
    31ec:	br	x17

00000000000031f0 <lzma_filters_copy@plt>:
    31f0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #200]
    31f8:	add	x16, x16, #0xc8
    31fc:	br	x17

0000000000003200 <lzma_properties_decode@plt>:
    3200:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #208]
    3208:	add	x16, x16, #0xd0
    320c:	br	x17

0000000000003210 <calloc@plt>:
    3210:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #216]
    3218:	add	x16, x16, #0xd8
    321c:	br	x17

0000000000003220 <lzma_check_size@plt>:
    3220:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #224]
    3228:	add	x16, x16, #0xe0
    322c:	br	x17

0000000000003230 <bcmp@plt>:
    3230:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #232]
    3238:	add	x16, x16, #0xe8
    323c:	br	x17

0000000000003240 <lzma_index_hash_init@plt>:
    3240:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #240]
    3248:	add	x16, x16, #0xf0
    324c:	br	x17

0000000000003250 <lzma_crc64@plt>:
    3250:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #248]
    3258:	add	x16, x16, #0xf8
    325c:	br	x17

0000000000003260 <pthread_mutex_init@plt>:
    3260:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #256]
    3268:	add	x16, x16, #0x100
    326c:	br	x17

0000000000003270 <pthread_create@plt>:
    3270:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #264]
    3278:	add	x16, x16, #0x108
    327c:	br	x17

0000000000003280 <__gmon_start__@plt>:
    3280:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #272]
    3288:	add	x16, x16, #0x110
    328c:	br	x17

0000000000003290 <pthread_join@plt>:
    3290:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #280]
    3298:	add	x16, x16, #0x118
    329c:	br	x17

00000000000032a0 <lzma_raw_decoder_memusage@plt>:
    32a0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #288]
    32a8:	add	x16, x16, #0x120
    32ac:	br	x17

00000000000032b0 <sched_getaffinity@plt>:
    32b0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #296]
    32b8:	add	x16, x16, #0x128
    32bc:	br	x17

00000000000032c0 <lzma_index_append@plt>:
    32c0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #304]
    32c8:	add	x16, x16, #0x130
    32cc:	br	x17

00000000000032d0 <lzma_index_hash_end@plt>:
    32d0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #312]
    32d8:	add	x16, x16, #0x138
    32dc:	br	x17

00000000000032e0 <lzma_end@plt>:
    32e0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #320]
    32e8:	add	x16, x16, #0x140
    32ec:	br	x17

00000000000032f0 <lzma_block_header_decode@plt>:
    32f0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #328]
    32f8:	add	x16, x16, #0x148
    32fc:	br	x17

0000000000003300 <lzma_filter_flags_encode@plt>:
    3300:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #336]
    3308:	add	x16, x16, #0x150
    330c:	br	x17

0000000000003310 <lzma_index_file_size@plt>:
    3310:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #344]
    3318:	add	x16, x16, #0x158
    331c:	br	x17

0000000000003320 <lzma_properties_size@plt>:
    3320:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #352]
    3328:	add	x16, x16, #0x160
    332c:	br	x17

0000000000003330 <free@plt>:
    3330:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #360]
    3338:	add	x16, x16, #0x168
    333c:	br	x17

0000000000003340 <lzma_stream_header_encode@plt>:
    3340:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #368]
    3348:	add	x16, x16, #0x170
    334c:	br	x17

0000000000003350 <pthread_cond_wait@plt>:
    3350:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #376]
    3358:	add	x16, x16, #0x178
    335c:	br	x17

0000000000003360 <lzma_index_init@plt>:
    3360:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #384]
    3368:	add	x16, x16, #0x180
    336c:	br	x17

0000000000003370 <lzma_vli_decode@plt>:
    3370:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #392]
    3378:	add	x16, x16, #0x188
    337c:	br	x17

0000000000003380 <pthread_condattr_init@plt>:
    3380:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #400]
    3388:	add	x16, x16, #0x190
    338c:	br	x17

0000000000003390 <lzma_index_end@plt>:
    3390:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #408]
    3398:	add	x16, x16, #0x198
    339c:	br	x17

00000000000033a0 <__sched_cpucount@plt>:
    33a0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #416]
    33a8:	add	x16, x16, #0x1a0
    33ac:	br	x17

00000000000033b0 <lzma_properties_encode@plt>:
    33b0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #424]
    33b8:	add	x16, x16, #0x1a8
    33bc:	br	x17

00000000000033c0 <pthread_mutex_destroy@plt>:
    33c0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #432]
    33c8:	add	x16, x16, #0x1b0
    33cc:	br	x17

00000000000033d0 <pthread_cond_init@plt>:
    33d0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #440]
    33d8:	add	x16, x16, #0x1b8
    33dc:	br	x17

00000000000033e0 <lzma_stream_footer_decode@plt>:
    33e0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #448]
    33e8:	add	x16, x16, #0x1c0
    33ec:	br	x17

00000000000033f0 <lzma_lzma_preset@plt>:
    33f0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #456]
    33f8:	add	x16, x16, #0x1c8
    33fc:	br	x17

0000000000003400 <lzma_vli_encode@plt>:
    3400:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #464]
    3408:	add	x16, x16, #0x1d0
    340c:	br	x17

0000000000003410 <lzma_index_iter_next@plt>:
    3410:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #472]
    3418:	add	x16, x16, #0x1d8
    341c:	br	x17

0000000000003420 <sysconf@plt>:
    3420:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #480]
    3428:	add	x16, x16, #0x1e0
    342c:	br	x17

0000000000003430 <lzma_vli_size@plt>:
    3430:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #488]
    3438:	add	x16, x16, #0x1e8
    343c:	br	x17

0000000000003440 <pthread_condattr_setclock@plt>:
    3440:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #496]
    3448:	add	x16, x16, #0x1f0
    344c:	br	x17

0000000000003450 <lzma_stream_encoder@plt>:
    3450:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #504]
    3458:	add	x16, x16, #0x1f8
    345c:	br	x17

0000000000003460 <lzma_index_iter_init@plt>:
    3460:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #512]
    3468:	add	x16, x16, #0x200
    346c:	br	x17

0000000000003470 <lzma_block_uncomp_encode@plt>:
    3470:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #520]
    3478:	add	x16, x16, #0x208
    347c:	br	x17

0000000000003480 <lzma_index_hash_size@plt>:
    3480:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #528]
    3488:	add	x16, x16, #0x210
    348c:	br	x17

0000000000003490 <lzma_index_block_count@plt>:
    3490:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #536]
    3498:	add	x16, x16, #0x218
    349c:	br	x17

00000000000034a0 <lzma_stream_header_decode@plt>:
    34a0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #544]
    34a8:	add	x16, x16, #0x220
    34ac:	br	x17

00000000000034b0 <lzma_filter_flags_decode@plt>:
    34b0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #552]
    34b8:	add	x16, x16, #0x228
    34bc:	br	x17

00000000000034c0 <lzma_index_size@plt>:
    34c0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #560]
    34c8:	add	x16, x16, #0x230
    34cc:	br	x17

00000000000034d0 <pthread_cond_destroy@plt>:
    34d0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #568]
    34d8:	add	x16, x16, #0x238
    34dc:	br	x17

00000000000034e0 <pthread_mutex_lock@plt>:
    34e0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #576]
    34e8:	add	x16, x16, #0x240
    34ec:	br	x17

00000000000034f0 <lzma_block_header_encode@plt>:
    34f0:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    34f4:	ldr	x17, [x16, #584]
    34f8:	add	x16, x16, #0x248
    34fc:	br	x17

0000000000003500 <pthread_mutex_unlock@plt>:
    3500:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3504:	ldr	x17, [x16, #592]
    3508:	add	x16, x16, #0x250
    350c:	br	x17

0000000000003510 <pthread_cond_timedwait@plt>:
    3510:	adrp	x16, 2e000 <memcpy@GLIBC_2.17>
    3514:	ldr	x17, [x16, #600]
    3518:	add	x16, x16, #0x258
    351c:	br	x17

Disassembly of section .text:

0000000000003520 <lzma_version_number@@XZ_5.0-0x154>:
    3520:	adrp	x0, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    3524:	ldr	x0, [x0, #3968]
    3528:	cbz	x0, 3530 <pthread_cond_timedwait@plt+0x20>
    352c:	b	3280 <__gmon_start__@plt>
    3530:	ret
    3534:	nop
    3538:	adrp	x0, 2e000 <lzma_mode_is_supported@@XZ_5.0+0x1eb30>
    353c:	add	x0, x0, #0x268
    3540:	adrp	x1, 2e000 <lzma_mode_is_supported@@XZ_5.0+0x1eb30>
    3544:	add	x1, x1, #0x268
    3548:	cmp	x1, x0
    354c:	b.eq	3564 <pthread_cond_timedwait@plt+0x54>  // b.none
    3550:	adrp	x1, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    3554:	ldr	x1, [x1, #3904]
    3558:	cbz	x1, 3564 <pthread_cond_timedwait@plt+0x54>
    355c:	mov	x16, x1
    3560:	br	x16
    3564:	ret
    3568:	adrp	x0, 2e000 <lzma_mode_is_supported@@XZ_5.0+0x1eb30>
    356c:	add	x0, x0, #0x268
    3570:	adrp	x1, 2e000 <lzma_mode_is_supported@@XZ_5.0+0x1eb30>
    3574:	add	x1, x1, #0x268
    3578:	sub	x1, x1, x0
    357c:	lsr	x2, x1, #63
    3580:	add	x1, x2, x1, asr #3
    3584:	cmp	xzr, x1, asr #1
    3588:	asr	x1, x1, #1
    358c:	b.eq	35a4 <pthread_cond_timedwait@plt+0x94>  // b.none
    3590:	adrp	x2, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    3594:	ldr	x2, [x2, #4040]
    3598:	cbz	x2, 35a4 <pthread_cond_timedwait@plt+0x94>
    359c:	mov	x16, x2
    35a0:	br	x16
    35a4:	ret
    35a8:	stp	x29, x30, [sp, #-32]!
    35ac:	mov	x29, sp
    35b0:	str	x19, [sp, #16]
    35b4:	adrp	x19, 2e000 <lzma_mode_is_supported@@XZ_5.0+0x1eb30>
    35b8:	ldrb	w0, [x19, #616]
    35bc:	cbnz	w0, 35e4 <pthread_cond_timedwait@plt+0xd4>
    35c0:	adrp	x0, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    35c4:	ldr	x0, [x0, #3920]
    35c8:	cbz	x0, 35d8 <pthread_cond_timedwait@plt+0xc8>
    35cc:	adrp	x0, 2e000 <lzma_mode_is_supported@@XZ_5.0+0x1eb30>
    35d0:	ldr	x0, [x0, #608]
    35d4:	bl	3100 <__cxa_finalize@plt>
    35d8:	bl	3538 <pthread_cond_timedwait@plt+0x28>
    35dc:	mov	w0, #0x1                   	// #1
    35e0:	strb	w0, [x19, #616]
    35e4:	ldr	x19, [sp, #16]
    35e8:	ldp	x29, x30, [sp], #32
    35ec:	ret
    35f0:	b	3568 <pthread_cond_timedwait@plt+0x58>
    35f4:	stp	x29, x30, [sp, #-32]!
    35f8:	mov	w0, #0x1e                  	// #30
    35fc:	str	x19, [sp, #16]
    3600:	mov	x29, sp
    3604:	bl	3420 <sysconf@plt>
    3608:	mov	x19, x0
    360c:	mov	w0, #0x55                  	// #85
    3610:	bl	3420 <sysconf@plt>
    3614:	cmn	x0, #0x1
    3618:	mov	x8, #0xffffffffffffffff    	// #-1
    361c:	ccmp	x19, x8, #0x4, ne  // ne = any
    3620:	mul	x8, x0, x19
    3624:	ldr	x19, [sp, #16]
    3628:	csel	x0, x8, xzr, ne  // ne = any
    362c:	ldp	x29, x30, [sp], #32
    3630:	ret
    3634:	sub	sp, sp, #0x90
    3638:	mov	x2, sp
    363c:	mov	w1, #0x80                  	// #128
    3640:	mov	w0, wzr
    3644:	stp	x29, x30, [sp, #128]
    3648:	add	x29, sp, #0x80
    364c:	bl	32b0 <sched_getaffinity@plt>
    3650:	mov	w8, w0
    3654:	mov	w0, wzr
    3658:	cbnz	w8, 3668 <pthread_cond_timedwait@plt+0x158>
    365c:	mov	x1, sp
    3660:	mov	w0, #0x80                  	// #128
    3664:	bl	33a0 <__sched_cpucount@plt>
    3668:	ldp	x29, x30, [sp, #128]
    366c:	add	sp, sp, #0x90
    3670:	ret

0000000000003674 <lzma_version_number@@XZ_5.0>:
    3674:	mov	w0, #0x3eca                	// #16074
    3678:	movk	w0, #0x2fb, lsl #16
    367c:	ret

0000000000003680 <lzma_version_string@@XZ_5.0>:
    3680:	adrp	x0, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    3684:	add	x0, x0, #0x921
    3688:	ret
    368c:	cmp	x0, #0x0
    3690:	csinc	x2, x0, xzr, ne  // ne = any
    3694:	cbz	x1, 36ac <lzma_version_string@@XZ_5.0+0x2c>
    3698:	ldr	x3, [x1]
    369c:	cbz	x3, 36ac <lzma_version_string@@XZ_5.0+0x2c>
    36a0:	ldr	x0, [x1, #16]
    36a4:	mov	w1, #0x1                   	// #1
    36a8:	br	x3
    36ac:	mov	x0, x2
    36b0:	b	3160 <malloc@plt>
    36b4:	stp	x29, x30, [sp, #-32]!
    36b8:	cmp	x0, #0x0
    36bc:	stp	x20, x19, [sp, #16]
    36c0:	csinc	x19, x0, xzr, ne  // ne = any
    36c4:	mov	x29, sp
    36c8:	cbz	x1, 370c <lzma_version_string@@XZ_5.0+0x8c>
    36cc:	ldr	x8, [x1]
    36d0:	cbz	x8, 370c <lzma_version_string@@XZ_5.0+0x8c>
    36d4:	ldr	x0, [x1, #16]
    36d8:	mov	w1, #0x1                   	// #1
    36dc:	mov	x2, x19
    36e0:	blr	x8
    36e4:	mov	x20, x0
    36e8:	cbz	x0, 36fc <lzma_version_string@@XZ_5.0+0x7c>
    36ec:	mov	x0, x20
    36f0:	mov	w1, wzr
    36f4:	mov	x2, x19
    36f8:	bl	31e0 <memset@plt>
    36fc:	mov	x0, x20
    3700:	ldp	x20, x19, [sp, #16]
    3704:	ldp	x29, x30, [sp], #32
    3708:	ret
    370c:	mov	x1, x19
    3710:	ldp	x20, x19, [sp, #16]
    3714:	mov	w0, #0x1                   	// #1
    3718:	ldp	x29, x30, [sp], #32
    371c:	b	3210 <calloc@plt>
    3720:	mov	x8, x0
    3724:	cbz	x1, 373c <lzma_version_string@@XZ_5.0+0xbc>
    3728:	ldr	x2, [x1, #8]
    372c:	cbz	x2, 373c <lzma_version_string@@XZ_5.0+0xbc>
    3730:	ldr	x0, [x1, #16]
    3734:	mov	x1, x8
    3738:	br	x2
    373c:	mov	x0, x8
    3740:	b	3330 <free@plt>
    3744:	stp	x29, x30, [sp, #-64]!
    3748:	str	x23, [sp, #16]
    374c:	stp	x22, x21, [sp, #32]
    3750:	ldr	x22, [x1]
    3754:	ldr	x23, [x4]
    3758:	stp	x20, x19, [sp, #48]
    375c:	mov	x20, x1
    3760:	sub	x9, x2, x22
    3764:	sub	x10, x5, x23
    3768:	cmp	x9, x10
    376c:	add	x8, x3, x23
    3770:	csel	x21, x9, x10, cc  // cc = lo, ul, last
    3774:	add	x1, x0, x22
    3778:	mov	x0, x8
    377c:	mov	x2, x21
    3780:	mov	x29, sp
    3784:	mov	x19, x4
    3788:	bl	3060 <memcpy@plt>
    378c:	add	x8, x21, x22
    3790:	add	x9, x21, x23
    3794:	str	x8, [x20]
    3798:	str	x9, [x19]
    379c:	mov	x0, x21
    37a0:	ldp	x20, x19, [sp, #48]
    37a4:	ldp	x22, x21, [sp, #32]
    37a8:	ldr	x23, [sp, #16]
    37ac:	ldp	x29, x30, [sp], #64
    37b0:	ret
    37b4:	stp	x29, x30, [sp, #-48]!
    37b8:	stp	x20, x19, [sp, #32]
    37bc:	ldr	x3, [x2, #8]
    37c0:	ldr	x8, [x0, #16]
    37c4:	str	x21, [sp, #16]
    37c8:	mov	x19, x2
    37cc:	mov	x20, x0
    37d0:	cmp	x3, x8
    37d4:	mov	x21, x1
    37d8:	mov	x29, sp
    37dc:	b.eq	37f0 <lzma_version_string@@XZ_5.0+0x170>  // b.none
    37e0:	mov	x0, x20
    37e4:	mov	x1, x21
    37e8:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    37ec:	ldr	x3, [x19, #8]
    37f0:	str	x3, [x20, #16]
    37f4:	ldr	x8, [x19]
    37f8:	str	x8, [x20, #8]
    37fc:	cbz	x3, 381c <lzma_version_string@@XZ_5.0+0x19c>
    3800:	mov	x0, x20
    3804:	mov	x1, x21
    3808:	mov	x2, x19
    380c:	ldp	x20, x19, [sp, #32]
    3810:	ldr	x21, [sp, #16]
    3814:	ldp	x29, x30, [sp], #48
    3818:	br	x3
    381c:	ldp	x20, x19, [sp, #32]
    3820:	ldr	x21, [sp, #16]
    3824:	mov	w0, wzr
    3828:	ldp	x29, x30, [sp], #48
    382c:	ret
    3830:	stp	x29, x30, [sp, #-32]!
    3834:	stp	x20, x19, [sp, #16]
    3838:	mov	x20, x0
    383c:	ldr	x8, [x20, #16]!
    3840:	mov	x29, sp
    3844:	cbz	x8, 389c <lzma_version_string@@XZ_5.0+0x21c>
    3848:	ldr	x9, [x0, #32]
    384c:	ldr	x8, [x0]
    3850:	mov	x19, x0
    3854:	cbz	x9, 3860 <lzma_version_string@@XZ_5.0+0x1e0>
    3858:	mov	x0, x8
    385c:	b	3874 <lzma_version_string@@XZ_5.0+0x1f4>
    3860:	cbz	x1, 387c <lzma_version_string@@XZ_5.0+0x1fc>
    3864:	ldr	x9, [x1, #8]
    3868:	cbz	x9, 387c <lzma_version_string@@XZ_5.0+0x1fc>
    386c:	ldr	x0, [x1, #16]
    3870:	mov	x1, x8
    3874:	blr	x9
    3878:	b	3884 <lzma_version_string@@XZ_5.0+0x204>
    387c:	mov	x0, x8
    3880:	bl	3330 <free@plt>
    3884:	mov	x8, #0xffffffffffffffff    	// #-1
    3888:	movi	v0.2d, #0x0
    388c:	stp	xzr, x8, [x19]
    3890:	str	xzr, [x20, #48]
    3894:	stp	q0, q0, [x20, #16]
    3898:	str	q0, [x20]
    389c:	ldp	x20, x19, [sp, #16]
    38a0:	ldp	x29, x30, [sp], #32
    38a4:	ret
    38a8:	ldr	x8, [x2]
    38ac:	ldr	x9, [x0, #8]
    38b0:	cmp	x8, x9
    38b4:	b.ne	38d4 <lzma_version_string@@XZ_5.0+0x254>  // b.any
    38b8:	cmn	x8, #0x1
    38bc:	b.eq	38dc <lzma_version_string@@XZ_5.0+0x25c>  // b.none
    38c0:	ldr	x4, [x0, #64]
    38c4:	ldr	x0, [x0]
    38c8:	mov	x3, x2
    38cc:	mov	x2, xzr
    38d0:	br	x4
    38d4:	mov	w0, #0xb                   	// #11
    38d8:	ret
    38dc:	mov	w0, wzr
    38e0:	ret
    38e4:	stp	x29, x30, [sp, #-32]!
    38e8:	str	x19, [sp, #16]
    38ec:	mov	x29, sp
    38f0:	cbz	x0, 3924 <lzma_version_string@@XZ_5.0+0x2a4>
    38f4:	ldr	x8, [x0, #56]
    38f8:	mov	x19, x0
    38fc:	cbnz	x8, 3958 <lzma_version_string@@XZ_5.0+0x2d8>
    3900:	ldr	x9, [x19, #48]
    3904:	cbz	x9, 392c <lzma_version_string@@XZ_5.0+0x2ac>
    3908:	ldr	x8, [x9]
    390c:	cbz	x8, 392c <lzma_version_string@@XZ_5.0+0x2ac>
    3910:	ldr	x0, [x9, #16]
    3914:	mov	w1, #0x1                   	// #1
    3918:	mov	w2, #0x60                  	// #96
    391c:	blr	x8
    3920:	b	3934 <lzma_version_string@@XZ_5.0+0x2b4>
    3924:	mov	w0, #0xb                   	// #11
    3928:	b	3978 <lzma_version_string@@XZ_5.0+0x2f8>
    392c:	mov	w0, #0x60                  	// #96
    3930:	bl	3160 <malloc@plt>
    3934:	str	x0, [x19, #56]
    3938:	cbz	x0, 3984 <lzma_version_string@@XZ_5.0+0x304>
    393c:	mov	x8, #0xffffffffffffffff    	// #-1
    3940:	movi	v0.2d, #0x0
    3944:	stp	xzr, x8, [x0]
    3948:	stp	q0, q0, [x0, #16]
    394c:	str	q0, [x0, #48]
    3950:	str	xzr, [x0, #64]
    3954:	ldr	x8, [x19, #56]
    3958:	strb	wzr, [x8, #92]
    395c:	str	wzr, [x8, #88]
    3960:	ldr	x8, [x19, #56]
    3964:	mov	w0, wzr
    3968:	str	wzr, [x8, #72]
    396c:	strb	wzr, [x8, #93]
    3970:	str	xzr, [x19, #16]
    3974:	str	xzr, [x19, #40]
    3978:	ldr	x19, [sp, #16]
    397c:	ldp	x29, x30, [sp], #32
    3980:	ret
    3984:	mov	w0, #0x5                   	// #5
    3988:	b	3978 <lzma_version_string@@XZ_5.0+0x2f8>

000000000000398c <lzma_code@@XZ_5.0>:
    398c:	sub	sp, sp, #0x30
    3990:	stp	x29, x30, [sp, #16]
    3994:	ldr	x2, [x0]
    3998:	mov	x8, x0
    399c:	str	x19, [sp, #32]
    39a0:	add	x29, sp, #0x10
    39a4:	cbz	x2, 3a34 <lzma_code@@XZ_5.0+0xa8>
    39a8:	ldr	x5, [x8, #24]
    39ac:	cbz	x5, 3a40 <lzma_code@@XZ_5.0+0xb4>
    39b0:	ldr	x10, [x8, #56]
    39b4:	cbz	x10, 3a48 <lzma_code@@XZ_5.0+0xbc>
    39b8:	cmp	w1, #0x4
    39bc:	mov	w0, #0xb                   	// #11
    39c0:	b.hi	3a4c <lzma_code@@XZ_5.0+0xc0>  // b.pmore
    39c4:	ldr	x9, [x10, #24]
    39c8:	cbz	x9, 3a4c <lzma_code@@XZ_5.0+0xc0>
    39cc:	add	x11, x10, w1, uxtw
    39d0:	ldrb	w11, [x11, #88]
    39d4:	cbz	w11, 3a48 <lzma_code@@XZ_5.0+0xbc>
    39d8:	ldr	x11, [x8, #64]
    39dc:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    39e0:	ldr	x11, [x8, #72]
    39e4:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    39e8:	ldr	x11, [x8, #80]
    39ec:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    39f0:	ldr	x11, [x8, #88]
    39f4:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    39f8:	ldr	x11, [x8, #96]
    39fc:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    3a00:	ldr	x11, [x8, #104]
    3a04:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    3a08:	ldr	x11, [x8, #112]
    3a0c:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    3a10:	ldr	x11, [x8, #120]
    3a14:	cbnz	x11, 3a2c <lzma_code@@XZ_5.0+0xa0>
    3a18:	mov	x11, x8
    3a1c:	ldr	w8, [x8, #128]
    3a20:	cbnz	w8, 3a2c <lzma_code@@XZ_5.0+0xa0>
    3a24:	ldr	w8, [x11, #132]
    3a28:	cbz	w8, 3a5c <lzma_code@@XZ_5.0+0xd0>
    3a2c:	mov	w0, #0x8                   	// #8
    3a30:	b	3a4c <lzma_code@@XZ_5.0+0xc0>
    3a34:	ldr	x9, [x8, #8]
    3a38:	cbnz	x9, 3a48 <lzma_code@@XZ_5.0+0xbc>
    3a3c:	b	39a8 <lzma_code@@XZ_5.0+0x1c>
    3a40:	ldr	x9, [x8, #32]
    3a44:	cbz	x9, 39b0 <lzma_code@@XZ_5.0+0x24>
    3a48:	mov	w0, #0xb                   	// #11
    3a4c:	ldr	x19, [sp, #32]
    3a50:	ldp	x29, x30, [sp, #16]
    3a54:	add	sp, sp, #0x30
    3a58:	ret
    3a5c:	ldr	w8, [x10, #72]
    3a60:	cmp	w8, #0x5
    3a64:	b.hi	3a48 <lzma_code@@XZ_5.0+0xbc>  // b.pmore
    3a68:	adrp	x12, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    3a6c:	add	x12, x12, #0x910
    3a70:	adr	x13, 3a4c <lzma_code@@XZ_5.0+0xc0>
    3a74:	ldrb	w14, [x12, x8]
    3a78:	add	x13, x13, x14, lsl #2
    3a7c:	mov	w0, #0x1                   	// #1
    3a80:	br	x13
    3a84:	sub	w8, w1, #0x1
    3a88:	cmp	w8, #0x3
    3a8c:	b.hi	3b08 <lzma_code@@XZ_5.0+0x17c>  // b.pmore
    3a90:	adrp	x12, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    3a94:	add	x12, x12, #0x916
    3a98:	adr	x13, 3aa8 <lzma_code@@XZ_5.0+0x11c>
    3a9c:	ldrb	w14, [x12, x8]
    3aa0:	add	x13, x13, x14, lsl #2
    3aa4:	br	x13
    3aa8:	mov	w8, #0x1                   	// #1
    3aac:	b	3b04 <lzma_code@@XZ_5.0+0x178>
    3ab0:	cmp	w1, #0x1
    3ab4:	b.ne	3a48 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3ab8:	b	3adc <lzma_code@@XZ_5.0+0x150>
    3abc:	cmp	w1, #0x2
    3ac0:	b.ne	3a48 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3ac4:	b	3adc <lzma_code@@XZ_5.0+0x150>
    3ac8:	cmp	w1, #0x3
    3acc:	b.ne	3a48 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3ad0:	b	3adc <lzma_code@@XZ_5.0+0x150>
    3ad4:	cmp	w1, #0x4
    3ad8:	b.ne	3a48 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3adc:	ldr	x8, [x10, #80]
    3ae0:	ldr	x12, [x11, #8]
    3ae4:	cmp	x8, x12
    3ae8:	b.ne	3a48 <lzma_code@@XZ_5.0+0xbc>  // b.any
    3aec:	b	3b08 <lzma_code@@XZ_5.0+0x17c>
    3af0:	mov	w8, #0x2                   	// #2
    3af4:	b	3b04 <lzma_code@@XZ_5.0+0x178>
    3af8:	mov	w8, #0x3                   	// #3
    3afc:	b	3b04 <lzma_code@@XZ_5.0+0x178>
    3b00:	mov	w8, #0x4                   	// #4
    3b04:	str	w8, [x10, #72]
    3b08:	str	xzr, [x29, #24]
    3b0c:	str	xzr, [sp, #8]
    3b10:	ldr	x8, [x11, #48]
    3b14:	ldr	x0, [x10]
    3b18:	ldr	x4, [x11, #8]
    3b1c:	ldr	x7, [x11, #32]
    3b20:	add	x3, x29, #0x18
    3b24:	add	x6, sp, #0x8
    3b28:	str	w1, [sp]
    3b2c:	mov	x1, x8
    3b30:	mov	x19, x11
    3b34:	blr	x9
    3b38:	ldr	x9, [x29, #24]
    3b3c:	ldp	x8, x10, [x19]
    3b40:	ldp	x11, x12, [x19, #16]
    3b44:	cmp	w0, #0x6
    3b48:	add	x8, x8, x9
    3b4c:	sub	x13, x10, x9
    3b50:	add	x10, x11, x9
    3b54:	stp	x8, x13, [x19]
    3b58:	str	x10, [x19, #16]
    3b5c:	ldr	x10, [sp, #8]
    3b60:	add	x11, x12, x10
    3b64:	str	x11, [x19, #24]
    3b68:	ldp	x8, x11, [x19, #32]
    3b6c:	sub	x8, x8, x10
    3b70:	str	x8, [x19, #32]
    3b74:	ldr	x8, [x19, #56]
    3b78:	add	x11, x11, x10
    3b7c:	str	x11, [x19, #40]
    3b80:	str	x13, [x8, #80]
    3b84:	b.hi	3bbc <lzma_code@@XZ_5.0+0x230>  // b.pmore
    3b88:	adrp	x12, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    3b8c:	mov	w11, w0
    3b90:	add	x12, x12, #0x91a
    3b94:	adr	x13, 3ba4 <lzma_code@@XZ_5.0+0x218>
    3b98:	ldrb	w14, [x12, x11]
    3b9c:	add	x13, x13, x14, lsl #2
    3ba0:	br	x13
    3ba4:	orr	x9, x10, x9
    3ba8:	cbnz	x9, 3bc4 <lzma_code@@XZ_5.0+0x238>
    3bac:	ldrb	w9, [x8, #93]
    3bb0:	cbz	w9, 3c10 <lzma_code@@XZ_5.0+0x284>
    3bb4:	mov	w0, #0xa                   	// #10
    3bb8:	b	3a4c <lzma_code@@XZ_5.0+0xc0>
    3bbc:	cmp	w0, #0x20
    3bc0:	b.ne	3bcc <lzma_code@@XZ_5.0+0x240>  // b.any
    3bc4:	mov	w0, wzr
    3bc8:	b	3c08 <lzma_code@@XZ_5.0+0x27c>
    3bcc:	mov	w9, #0x6                   	// #6
    3bd0:	str	w9, [x8, #72]
    3bd4:	b	3a4c <lzma_code@@XZ_5.0+0xc0>
    3bd8:	ldr	w9, [x8, #72]
    3bdc:	cmp	w9, #0x4
    3be0:	b.hi	3c00 <lzma_code@@XZ_5.0+0x274>  // b.pmore
    3be4:	mov	w10, #0x1                   	// #1
    3be8:	lsl	w9, w10, w9
    3bec:	mov	w10, #0x16                  	// #22
    3bf0:	tst	w9, w10
    3bf4:	b.eq	3c00 <lzma_code@@XZ_5.0+0x274>  // b.none
    3bf8:	str	wzr, [x8, #72]
    3bfc:	b	3c08 <lzma_code@@XZ_5.0+0x27c>
    3c00:	mov	w9, #0x5                   	// #5
    3c04:	str	w9, [x8, #72]
    3c08:	strb	wzr, [x8, #93]
    3c0c:	b	3a4c <lzma_code@@XZ_5.0+0xc0>
    3c10:	mov	w9, #0x1                   	// #1
    3c14:	mov	w0, wzr
    3c18:	strb	w9, [x8, #93]
    3c1c:	b	3a4c <lzma_code@@XZ_5.0+0xc0>

0000000000003c20 <lzma_end@@XZ_5.0>:
    3c20:	stp	x29, x30, [sp, #-32]!
    3c24:	str	x19, [sp, #16]
    3c28:	mov	x29, sp
    3c2c:	cbz	x0, 3c6c <lzma_end@@XZ_5.0+0x4c>
    3c30:	mov	x19, x0
    3c34:	ldr	x0, [x0, #56]
    3c38:	cbz	x0, 3c6c <lzma_end@@XZ_5.0+0x4c>
    3c3c:	ldr	x1, [x19, #48]
    3c40:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    3c44:	ldp	x8, x1, [x19, #48]
    3c48:	cbz	x8, 3c60 <lzma_end@@XZ_5.0+0x40>
    3c4c:	ldr	x9, [x8, #8]
    3c50:	cbz	x9, 3c60 <lzma_end@@XZ_5.0+0x40>
    3c54:	ldr	x0, [x8, #16]
    3c58:	blr	x9
    3c5c:	b	3c68 <lzma_end@@XZ_5.0+0x48>
    3c60:	mov	x0, x1
    3c64:	bl	3330 <free@plt>
    3c68:	str	xzr, [x19, #56]
    3c6c:	ldr	x19, [sp, #16]
    3c70:	ldp	x29, x30, [sp], #32
    3c74:	ret

0000000000003c78 <lzma_get_progress@@XZ_5.2>:
    3c78:	ldr	x8, [x0, #56]
    3c7c:	ldr	x3, [x8, #40]
    3c80:	cbz	x3, 3c8c <lzma_get_progress@@XZ_5.2+0x14>
    3c84:	ldr	x0, [x8]
    3c88:	br	x3
    3c8c:	ldr	x8, [x0, #16]
    3c90:	str	x8, [x1]
    3c94:	ldr	x8, [x0, #40]
    3c98:	str	x8, [x2]
    3c9c:	ret

0000000000003ca0 <lzma_get_check@@XZ_5.0>:
    3ca0:	ldr	x8, [x0, #56]
    3ca4:	ldr	x1, [x8, #48]
    3ca8:	cbz	x1, 3cb4 <lzma_get_check@@XZ_5.0+0x14>
    3cac:	ldr	x0, [x8]
    3cb0:	br	x1
    3cb4:	mov	w0, wzr
    3cb8:	ret

0000000000003cbc <lzma_memusage@@XZ_5.0>:
    3cbc:	sub	sp, sp, #0x20
    3cc0:	stp	x29, x30, [sp, #16]
    3cc4:	add	x29, sp, #0x10
    3cc8:	cbz	x0, 3d04 <lzma_memusage@@XZ_5.0+0x48>
    3ccc:	ldr	x9, [x0, #56]
    3cd0:	cbz	x9, 3d00 <lzma_memusage@@XZ_5.0+0x44>
    3cd4:	ldr	x8, [x9, #56]
    3cd8:	cbz	x8, 3d00 <lzma_memusage@@XZ_5.0+0x44>
    3cdc:	ldr	x0, [x9]
    3ce0:	add	x1, sp, #0x8
    3ce4:	mov	x2, sp
    3ce8:	mov	x3, xzr
    3cec:	blr	x8
    3cf0:	ldr	x8, [sp, #8]
    3cf4:	cmp	w0, #0x0
    3cf8:	csel	x0, x8, xzr, eq  // eq = none
    3cfc:	b	3d04 <lzma_memusage@@XZ_5.0+0x48>
    3d00:	mov	x0, xzr
    3d04:	ldp	x29, x30, [sp, #16]
    3d08:	add	sp, sp, #0x20
    3d0c:	ret

0000000000003d10 <lzma_memlimit_get@@XZ_5.0>:
    3d10:	sub	sp, sp, #0x20
    3d14:	stp	x29, x30, [sp, #16]
    3d18:	add	x29, sp, #0x10
    3d1c:	cbz	x0, 3d58 <lzma_memlimit_get@@XZ_5.0+0x48>
    3d20:	ldr	x9, [x0, #56]
    3d24:	cbz	x9, 3d54 <lzma_memlimit_get@@XZ_5.0+0x44>
    3d28:	ldr	x8, [x9, #56]
    3d2c:	cbz	x8, 3d54 <lzma_memlimit_get@@XZ_5.0+0x44>
    3d30:	ldr	x0, [x9]
    3d34:	mov	x1, sp
    3d38:	add	x2, sp, #0x8
    3d3c:	mov	x3, xzr
    3d40:	blr	x8
    3d44:	ldr	x8, [sp, #8]
    3d48:	cmp	w0, #0x0
    3d4c:	csel	x0, x8, xzr, eq  // eq = none
    3d50:	b	3d58 <lzma_memlimit_get@@XZ_5.0+0x48>
    3d54:	mov	x0, xzr
    3d58:	ldp	x29, x30, [sp, #16]
    3d5c:	add	sp, sp, #0x20
    3d60:	ret

0000000000003d64 <lzma_memlimit_set@@XZ_5.0>:
    3d64:	sub	sp, sp, #0x20
    3d68:	stp	x29, x30, [sp, #16]
    3d6c:	add	x29, sp, #0x10
    3d70:	cbz	x0, 3da0 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3d74:	ldr	x9, [x0, #56]
    3d78:	cbz	x9, 3da0 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3d7c:	ldr	x8, [x9, #56]
    3d80:	cbz	x8, 3da0 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3d84:	ldr	x0, [x9]
    3d88:	cmp	x1, #0x0
    3d8c:	csinc	x3, x1, xzr, ne  // ne = any
    3d90:	mov	x1, sp
    3d94:	add	x2, sp, #0x8
    3d98:	blr	x8
    3d9c:	b	3da4 <lzma_memlimit_set@@XZ_5.0+0x40>
    3da0:	mov	w0, #0xb                   	// #11
    3da4:	ldp	x29, x30, [sp, #16]
    3da8:	add	sp, sp, #0x20
    3dac:	ret

0000000000003db0 <lzma_block_compressed_size@@XZ_5.0>:
    3db0:	stp	x29, x30, [sp, #-48]!
    3db4:	str	x21, [sp, #16]
    3db8:	stp	x20, x19, [sp, #32]
    3dbc:	mov	x29, sp
    3dc0:	mov	x20, x1
    3dc4:	mov	x19, x0
    3dc8:	bl	3150 <lzma_block_unpadded_size@plt>
    3dcc:	cbz	x0, 3e04 <lzma_block_compressed_size@@XZ_5.0+0x54>
    3dd0:	ldp	w21, w0, [x19, #4]
    3dd4:	bl	3220 <lzma_check_size@plt>
    3dd8:	add	w8, w0, w21
    3ddc:	cmp	x8, x20
    3de0:	b.cs	3dfc <lzma_block_compressed_size@@XZ_5.0+0x4c>  // b.hs, b.nlast
    3de4:	ldr	x9, [x19, #16]
    3de8:	sub	x8, x20, x8
    3dec:	cmn	x9, #0x1
    3df0:	b.eq	3e0c <lzma_block_compressed_size@@XZ_5.0+0x5c>  // b.none
    3df4:	cmp	x9, x8
    3df8:	b.eq	3e0c <lzma_block_compressed_size@@XZ_5.0+0x5c>  // b.none
    3dfc:	mov	w0, #0x9                   	// #9
    3e00:	b	3e14 <lzma_block_compressed_size@@XZ_5.0+0x64>
    3e04:	mov	w0, #0xb                   	// #11
    3e08:	b	3e14 <lzma_block_compressed_size@@XZ_5.0+0x64>
    3e0c:	mov	w0, wzr
    3e10:	str	x8, [x19, #16]
    3e14:	ldp	x20, x19, [sp, #32]
    3e18:	ldr	x21, [sp, #16]
    3e1c:	ldp	x29, x30, [sp], #48
    3e20:	ret

0000000000003e24 <lzma_block_unpadded_size@@XZ_5.0>:
    3e24:	stp	x29, x30, [sp, #-32]!
    3e28:	str	x19, [sp, #16]
    3e2c:	mov	x29, sp
    3e30:	cbz	x0, 3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3e34:	ldr	w9, [x0]
    3e38:	mov	x8, x0
    3e3c:	cmp	w9, #0x1
    3e40:	b.ls	3e4c <lzma_block_unpadded_size@@XZ_5.0+0x28>  // b.plast
    3e44:	mov	x0, xzr
    3e48:	b	3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3e4c:	ldr	w9, [x8, #4]
    3e50:	mov	x0, xzr
    3e54:	sub	w10, w9, #0x8
    3e58:	cmp	w10, #0x3f8
    3e5c:	b.hi	3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.pmore
    3e60:	and	w10, w9, #0x3
    3e64:	cbnz	w10, 3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3e68:	ldr	x10, [x8, #16]
    3e6c:	mov	x0, xzr
    3e70:	cmn	x10, #0x1
    3e74:	b.lt	3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.tstop
    3e78:	cbz	x10, 3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>
    3e7c:	ldr	w8, [x8, #8]
    3e80:	cmp	w8, #0x10
    3e84:	csetm	x0, cc  // cc = lo, ul, last
    3e88:	cmn	x10, #0x1
    3e8c:	b.eq	3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.none
    3e90:	cmp	w8, #0xf
    3e94:	b.hi	3eb4 <lzma_block_unpadded_size@@XZ_5.0+0x90>  // b.pmore
    3e98:	mov	w0, w8
    3e9c:	add	x19, x10, x9
    3ea0:	bl	3220 <lzma_check_size@plt>
    3ea4:	add	x8, x19, w0, uxtw
    3ea8:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    3eac:	cmp	x8, x9
    3eb0:	csel	x0, xzr, x8, hi  // hi = pmore
    3eb4:	ldr	x19, [sp, #16]
    3eb8:	ldp	x29, x30, [sp], #32
    3ebc:	ret

0000000000003ec0 <lzma_block_total_size@@XZ_5.0>:
    3ec0:	stp	x29, x30, [sp, #-16]!
    3ec4:	mov	x29, sp
    3ec8:	bl	3150 <lzma_block_unpadded_size@plt>
    3ecc:	add	x8, x0, #0x3
    3ed0:	and	x8, x8, #0xfffffffffffffffc
    3ed4:	cmn	x0, #0x1
    3ed8:	csinv	x0, x8, xzr, ne  // ne = any
    3edc:	ldp	x29, x30, [sp], #16
    3ee0:	ret
    3ee4:	stp	x29, x30, [sp, #-32]!
    3ee8:	stp	x20, x19, [sp, #16]
    3eec:	add	x20, x0, #0x50
    3ef0:	mov	x19, x0
    3ef4:	mov	x0, x20
    3ef8:	mov	x29, sp
    3efc:	bl	33f0 <lzma_lzma_preset@plt>
    3f00:	tst	w0, #0xff
    3f04:	b.eq	3f10 <lzma_block_total_size@@XZ_5.0+0x50>  // b.none
    3f08:	mov	w0, #0x1                   	// #1
    3f0c:	b	3f24 <lzma_block_total_size@@XZ_5.0+0x64>
    3f10:	mov	w0, wzr
    3f14:	mov	w8, #0x21                  	// #33
    3f18:	mov	x9, #0xffffffffffffffff    	// #-1
    3f1c:	stp	x8, x20, [x19]
    3f20:	str	x9, [x19, #16]
    3f24:	ldp	x20, x19, [sp, #16]
    3f28:	ldp	x29, x30, [sp], #32
    3f2c:	ret

0000000000003f30 <lzma_filters_copy@@XZ_5.0>:
    3f30:	stp	x29, x30, [sp, #-96]!
    3f34:	stp	x22, x21, [sp, #64]
    3f38:	mov	w22, #0xb                   	// #11
    3f3c:	stp	x28, x27, [sp, #16]
    3f40:	stp	x26, x25, [sp, #32]
    3f44:	stp	x24, x23, [sp, #48]
    3f48:	stp	x20, x19, [sp, #80]
    3f4c:	mov	x29, sp
    3f50:	cbz	x0, 4088 <lzma_filters_copy@@XZ_5.0+0x158>
    3f54:	mov	x20, x1
    3f58:	cbz	x1, 4088 <lzma_filters_copy@@XZ_5.0+0x158>
    3f5c:	ldr	x8, [x0]
    3f60:	mov	x21, x0
    3f64:	cmn	x8, #0x1
    3f68:	b.eq	4040 <lzma_filters_copy@@XZ_5.0+0x110>  // b.none
    3f6c:	mov	x24, #0x1                   	// #1
    3f70:	adrp	x26, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    3f74:	adrp	x27, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    3f78:	mov	x19, x2
    3f7c:	mov	x23, xzr
    3f80:	movk	x24, #0x4000, lsl #48
    3f84:	mov	w25, #0x18                  	// #24
    3f88:	add	x26, x26, #0x928
    3f8c:	add	x27, x27, #0x940
    3f90:	mov	x9, x21
    3f94:	cmp	x23, #0x4
    3f98:	b.eq	4058 <lzma_filters_copy@@XZ_5.0+0x128>  // b.none
    3f9c:	lsl	x10, x23, #4
    3fa0:	str	x8, [x20, x10]
    3fa4:	add	x28, x21, x23, lsl #4
    3fa8:	ldr	x8, [x28, #8]!
    3fac:	cbz	x8, 3fc4 <lzma_filters_copy@@XZ_5.0+0x94>
    3fb0:	ldr	x9, [x9]
    3fb4:	cmp	x9, x24
    3fb8:	b.ne	3fd0 <lzma_filters_copy@@XZ_5.0+0xa0>  // b.any
    3fbc:	mov	x8, xzr
    3fc0:	b	3ff0 <lzma_filters_copy@@XZ_5.0+0xc0>
    3fc4:	add	x8, x20, x23, lsl #4
    3fc8:	str	xzr, [x8, #8]
    3fcc:	b	401c <lzma_filters_copy@@XZ_5.0+0xec>
    3fd0:	mov	x8, xzr
    3fd4:	mov	x10, x27
    3fd8:	cmp	x8, #0x9
    3fdc:	b.eq	4034 <lzma_filters_copy@@XZ_5.0+0x104>  // b.none
    3fe0:	ldr	x11, [x10], #24
    3fe4:	add	x8, x8, #0x1
    3fe8:	cmp	x9, x11
    3fec:	b.ne	3fd8 <lzma_filters_copy@@XZ_5.0+0xa8>  // b.any
    3ff0:	madd	x8, x8, x25, x26
    3ff4:	ldr	x22, [x8, #8]
    3ff8:	mov	x1, x19
    3ffc:	mov	x0, x22
    4000:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    4004:	add	x8, x20, x23, lsl #4
    4008:	str	x0, [x8, #8]
    400c:	cbz	x0, 4060 <lzma_filters_copy@@XZ_5.0+0x130>
    4010:	ldr	x1, [x28]
    4014:	mov	x2, x22
    4018:	bl	3060 <memcpy@plt>
    401c:	add	x23, x23, #0x1
    4020:	add	x9, x21, x23, lsl #4
    4024:	ldr	x8, [x9]
    4028:	cmn	x8, #0x1
    402c:	b.ne	3f94 <lzma_filters_copy@@XZ_5.0+0x64>  // b.any
    4030:	b	4044 <lzma_filters_copy@@XZ_5.0+0x114>
    4034:	mov	w22, #0x8                   	// #8
    4038:	cbnz	x23, 4068 <lzma_filters_copy@@XZ_5.0+0x138>
    403c:	b	4088 <lzma_filters_copy@@XZ_5.0+0x158>
    4040:	mov	x23, xzr
    4044:	mov	w22, wzr
    4048:	add	x8, x20, x23, lsl #4
    404c:	mov	x9, #0xffffffffffffffff    	// #-1
    4050:	stp	x9, xzr, [x8]
    4054:	b	4088 <lzma_filters_copy@@XZ_5.0+0x158>
    4058:	mov	w22, #0x8                   	// #8
    405c:	b	4068 <lzma_filters_copy@@XZ_5.0+0x138>
    4060:	mov	w22, #0x5                   	// #5
    4064:	cbz	x23, 4088 <lzma_filters_copy@@XZ_5.0+0x158>
    4068:	add	x8, x20, x23, lsl #4
    406c:	sub	x20, x8, #0x8
    4070:	ldr	x0, [x20]
    4074:	mov	x1, x19
    4078:	sub	x23, x23, #0x1
    407c:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    4080:	str	xzr, [x20], #-16
    4084:	cbnz	x23, 4070 <lzma_filters_copy@@XZ_5.0+0x140>
    4088:	mov	w0, w22
    408c:	ldp	x20, x19, [sp, #80]
    4090:	ldp	x22, x21, [sp, #64]
    4094:	ldp	x24, x23, [sp, #48]
    4098:	ldp	x26, x25, [sp, #32]
    409c:	ldp	x28, x27, [sp, #16]
    40a0:	ldp	x29, x30, [sp], #96
    40a4:	ret
    40a8:	sub	sp, sp, #0xd0
    40ac:	stp	x29, x30, [sp, #128]
    40b0:	add	x29, sp, #0x80
    40b4:	stp	x20, x19, [sp, #192]
    40b8:	mov	x19, x1
    40bc:	mov	x20, x0
    40c0:	add	x1, x29, #0x18
    40c4:	mov	x0, x2
    40c8:	str	x25, [sp, #144]
    40cc:	stp	x24, x23, [sp, #160]
    40d0:	stp	x22, x21, [sp, #176]
    40d4:	mov	w24, w4
    40d8:	mov	x21, x3
    40dc:	mov	x22, x2
    40e0:	bl	41f0 <lzma_filters_copy@@XZ_5.0+0x2c0>
    40e4:	mov	w23, w0
    40e8:	cbz	w0, 410c <lzma_filters_copy@@XZ_5.0+0x1dc>
    40ec:	mov	w0, w23
    40f0:	ldp	x20, x19, [sp, #192]
    40f4:	ldp	x22, x21, [sp, #176]
    40f8:	ldp	x24, x23, [sp, #160]
    40fc:	ldr	x25, [sp, #144]
    4100:	ldp	x29, x30, [sp, #128]
    4104:	add	sp, sp, #0xd0
    4108:	ret
    410c:	ldr	x23, [x29, #24]
    4110:	tbz	w24, #0, 4164 <lzma_filters_copy@@XZ_5.0+0x234>
    4114:	cbz	x23, 41ac <lzma_filters_copy@@XZ_5.0+0x27c>
    4118:	mov	w8, #0x18                  	// #24
    411c:	add	x9, sp, #0x8
    4120:	madd	x8, x23, x8, x9
    4124:	mov	x24, xzr
    4128:	sub	x25, x8, #0x8
    412c:	ldr	x0, [x22]
    4130:	blr	x21
    4134:	cbz	x0, 41e8 <lzma_filters_copy@@XZ_5.0+0x2b8>
    4138:	ldr	x8, [x0, #8]
    413c:	cbz	x8, 41e8 <lzma_filters_copy@@XZ_5.0+0x2b8>
    4140:	ldr	x9, [x22]
    4144:	add	x24, x24, #0x1
    4148:	cmp	x23, x24
    414c:	stp	x9, x8, [x25, #-16]
    4150:	ldr	x8, [x22, #8]
    4154:	add	x22, x22, #0x10
    4158:	str	x8, [x25], #-24
    415c:	b.hi	412c <lzma_filters_copy@@XZ_5.0+0x1fc>  // b.pmore
    4160:	b	41ac <lzma_filters_copy@@XZ_5.0+0x27c>
    4164:	cbz	x23, 41ac <lzma_filters_copy@@XZ_5.0+0x27c>
    4168:	add	x8, sp, #0x8
    416c:	mov	x24, xzr
    4170:	add	x25, x8, #0x8
    4174:	ldr	x0, [x22]
    4178:	blr	x21
    417c:	cbz	x0, 41e8 <lzma_filters_copy@@XZ_5.0+0x2b8>
    4180:	ldr	x8, [x0, #8]
    4184:	cbz	x8, 41e8 <lzma_filters_copy@@XZ_5.0+0x2b8>
    4188:	ldr	x9, [x22]
    418c:	add	x24, x24, #0x1
    4190:	cmp	x24, x23
    4194:	stp	x9, x8, [x25, #-8]
    4198:	ldr	x8, [x22, #8]
    419c:	add	x22, x22, #0x10
    41a0:	str	x8, [x25, #8]
    41a4:	add	x25, x25, #0x18
    41a8:	b.cc	4174 <lzma_filters_copy@@XZ_5.0+0x244>  // b.lo, b.ul, b.last
    41ac:	mov	w8, #0x18                  	// #24
    41b0:	add	x9, sp, #0x8
    41b4:	mov	x10, #0xffffffffffffffff    	// #-1
    41b8:	madd	x8, x23, x8, x9
    41bc:	add	x2, sp, #0x8
    41c0:	mov	x0, x20
    41c4:	mov	x1, x19
    41c8:	stp	x10, xzr, [x8]
    41cc:	bl	37b4 <lzma_version_string@@XZ_5.0+0x134>
    41d0:	mov	w23, w0
    41d4:	cbz	w0, 40ec <lzma_filters_copy@@XZ_5.0+0x1bc>
    41d8:	mov	x0, x20
    41dc:	mov	x1, x19
    41e0:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    41e4:	b	40ec <lzma_filters_copy@@XZ_5.0+0x1bc>
    41e8:	mov	w23, #0x8                   	// #8
    41ec:	b	40ec <lzma_filters_copy@@XZ_5.0+0x1bc>
    41f0:	cbz	x0, 4284 <lzma_filters_copy@@XZ_5.0+0x354>
    41f4:	ldr	x14, [x0]
    41f8:	cmn	x14, #0x1
    41fc:	b.eq	4284 <lzma_filters_copy@@XZ_5.0+0x354>  // b.none
    4200:	mov	x10, #0x1                   	// #1
    4204:	adrp	x11, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    4208:	mov	x9, xzr
    420c:	mov	x8, xzr
    4210:	mov	w13, #0x1                   	// #1
    4214:	movk	x10, #0x4000, lsl #48
    4218:	add	x11, x11, #0x940
    421c:	cmp	x14, x10
    4220:	b.ne	422c <lzma_filters_copy@@XZ_5.0+0x2fc>  // b.any
    4224:	mov	x12, xzr
    4228:	b	424c <lzma_filters_copy@@XZ_5.0+0x31c>
    422c:	mov	x12, xzr
    4230:	mov	x15, x11
    4234:	cmp	x12, #0x9
    4238:	b.eq	427c <lzma_filters_copy@@XZ_5.0+0x34c>  // b.none
    423c:	ldr	x16, [x15], #24
    4240:	add	x12, x12, #0x1
    4244:	cmp	x14, x16
    4248:	b.ne	4234 <lzma_filters_copy@@XZ_5.0+0x304>  // b.any
    424c:	tbz	w13, #0, 427c <lzma_filters_copy@@XZ_5.0+0x34c>
    4250:	add	x8, x8, #0x1
    4254:	lsl	x14, x8, #4
    4258:	ldr	x14, [x0, x14]
    425c:	subs	x13, x12, #0x2
    4260:	cinc	x9, x9, cc  // cc = lo, ul, last
    4264:	cmp	x13, #0x7
    4268:	cset	w13, cc  // cc = lo, ul, last
    426c:	cmn	x14, #0x1
    4270:	b.ne	421c <lzma_filters_copy@@XZ_5.0+0x2ec>  // b.any
    4274:	cmp	x8, #0x4
    4278:	b.ls	428c <lzma_filters_copy@@XZ_5.0+0x35c>  // b.plast
    427c:	mov	w0, #0x8                   	// #8
    4280:	ret
    4284:	mov	w0, #0xb                   	// #11
    4288:	ret
    428c:	cmp	x9, #0x3
    4290:	mov	w0, #0x8                   	// #8
    4294:	b.hi	42a8 <lzma_filters_copy@@XZ_5.0+0x378>  // b.pmore
    4298:	cmp	x12, #0x1
    429c:	b.hi	42a8 <lzma_filters_copy@@XZ_5.0+0x378>  // b.pmore
    42a0:	mov	w0, wzr
    42a4:	str	x8, [x1]
    42a8:	ret
    42ac:	stp	x29, x30, [sp, #-48]!
    42b0:	stp	x20, x19, [sp, #32]
    42b4:	mov	x29, sp
    42b8:	mov	x19, x1
    42bc:	mov	x20, x0
    42c0:	add	x1, x29, #0x18
    42c4:	mov	x0, x19
    42c8:	str	x21, [sp, #16]
    42cc:	bl	41f0 <lzma_filters_copy@@XZ_5.0+0x2c0>
    42d0:	cbz	w0, 42e8 <lzma_filters_copy@@XZ_5.0+0x3b8>
    42d4:	mov	x0, #0xffffffffffffffff    	// #-1
    42d8:	ldp	x20, x19, [sp, #32]
    42dc:	ldr	x21, [sp, #16]
    42e0:	ldp	x29, x30, [sp], #48
    42e4:	ret
    42e8:	ldr	x0, [x19], #16
    42ec:	mov	x21, xzr
    42f0:	blr	x20
    42f4:	cbz	x0, 42d4 <lzma_filters_copy@@XZ_5.0+0x3a4>
    42f8:	ldr	x8, [x0, #16]
    42fc:	cbz	x8, 431c <lzma_filters_copy@@XZ_5.0+0x3ec>
    4300:	ldur	x0, [x19, #-8]
    4304:	blr	x8
    4308:	cmn	x0, #0x1
    430c:	csel	x8, xzr, x0, eq  // eq = none
    4310:	b.eq	42d8 <lzma_filters_copy@@XZ_5.0+0x3a8>  // b.none
    4314:	add	x21, x8, x21
    4318:	b	4320 <lzma_filters_copy@@XZ_5.0+0x3f0>
    431c:	add	x21, x21, #0x400
    4320:	ldr	x0, [x19], #16
    4324:	cmn	x0, #0x1
    4328:	b.ne	42f0 <lzma_filters_copy@@XZ_5.0+0x3c0>  // b.any
    432c:	add	x0, x21, #0x8, lsl #12
    4330:	b	42d8 <lzma_filters_copy@@XZ_5.0+0x3a8>

0000000000004334 <lzma_physmem@@XZ_5.0>:
    4334:	b	35f4 <pthread_cond_timedwait@plt+0xe4>

0000000000004338 <lzma_index_init@@XZ_5.0>:
    4338:	stp	x29, x30, [sp, #-32]!
    433c:	stp	x20, x19, [sp, #16]
    4340:	mov	x20, x0
    4344:	mov	w0, #0x50                  	// #80
    4348:	mov	x1, x20
    434c:	mov	x29, sp
    4350:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    4354:	mov	x19, x0
    4358:	cbz	x0, 43d8 <lzma_index_init@@XZ_5.0+0xa0>
    435c:	movi	v0.2d, #0x0
    4360:	mov	w8, #0x200                 	// #512
    4364:	mov	w0, #0xa8                  	// #168
    4368:	mov	x1, x20
    436c:	stp	xzr, xzr, [x19]
    4370:	str	wzr, [x19, #24]
    4374:	str	xzr, [x19, #16]
    4378:	stp	q0, q0, [x19, #32]
    437c:	str	x8, [x19, #64]
    4380:	str	wzr, [x19, #72]
    4384:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    4388:	cbz	x0, 43c8 <lzma_index_init@@XZ_5.0+0x90>
    438c:	movi	v0.2d, #0x0
    4390:	mov	w8, #0x1                   	// #1
    4394:	mov	w9, #0xffffffff            	// #-1
    4398:	mov	x1, x0
    439c:	str	xzr, [x0, #32]
    43a0:	stp	q0, q0, [x0]
    43a4:	stp	xzr, xzr, [x0, #88]
    43a8:	stp	q0, q0, [x0, #48]
    43ac:	str	wzr, [x0, #80]
    43b0:	str	w8, [x0, #40]
    43b4:	str	w9, [x0, #104]
    43b8:	str	xzr, [x0, #160]
    43bc:	mov	x0, x19
    43c0:	bl	43e8 <lzma_index_init@@XZ_5.0+0xb0>
    43c4:	b	43d8 <lzma_index_init@@XZ_5.0+0xa0>
    43c8:	mov	x0, x19
    43cc:	mov	x1, x20
    43d0:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    43d4:	mov	x19, xzr
    43d8:	mov	x0, x19
    43dc:	ldp	x20, x19, [sp, #16]
    43e0:	ldp	x29, x30, [sp], #32
    43e4:	ret
    43e8:	ldr	x8, [x0, #16]
    43ec:	stp	xzr, xzr, [x1, #24]
    43f0:	str	x8, [x1, #16]
    43f4:	ldr	w9, [x0, #24]
    43f8:	ldr	x10, [x0]
    43fc:	add	w9, w9, #0x1
    4400:	str	w9, [x0, #24]
    4404:	cbz	x10, 4478 <lzma_index_init@@XZ_5.0+0x140>
    4408:	clz	w10, w9
    440c:	eor	w10, w10, #0x1f
    4410:	mov	w11, #0x1                   	// #1
    4414:	lsl	w10, w11, w10
    4418:	cmp	w9, w10
    441c:	str	x1, [x8, #32]
    4420:	str	x1, [x0, #16]
    4424:	b.eq	4474 <lzma_index_init@@XZ_5.0+0x13c>  // b.none
    4428:	rbit	w9, w9
    442c:	clz	w9, w9
    4430:	add	w9, w9, #0x1
    4434:	ldr	x8, [x8, #16]
    4438:	subs	w9, w9, #0x1
    443c:	b.ne	4434 <lzma_index_init@@XZ_5.0+0xfc>  // b.any
    4440:	ldr	x11, [x8, #16]
    4444:	ldr	x9, [x8, #32]
    4448:	add	x10, x11, #0x20
    444c:	cmp	x11, #0x0
    4450:	csel	x10, x0, x10, eq  // eq = none
    4454:	str	x9, [x10]
    4458:	ldr	x10, [x9, #24]
    445c:	str	x11, [x9, #16]
    4460:	str	x10, [x8, #32]
    4464:	cbz	x10, 446c <lzma_index_init@@XZ_5.0+0x134>
    4468:	str	x8, [x10, #16]
    446c:	str	x8, [x9, #24]
    4470:	str	x9, [x8, #16]
    4474:	ret
    4478:	stp	x1, x1, [x0]
    447c:	str	x1, [x0, #16]
    4480:	ret

0000000000004484 <lzma_index_end@@XZ_5.0>:
    4484:	cbz	x0, 44c8 <lzma_index_end@@XZ_5.0+0x44>
    4488:	stp	x29, x30, [sp, #-32]!
    448c:	stp	x20, x19, [sp, #16]
    4490:	mov	x20, x0
    4494:	ldr	x0, [x0]
    4498:	mov	x19, x1
    449c:	mov	x29, sp
    44a0:	cbz	x0, 44b4 <lzma_index_end@@XZ_5.0+0x30>
    44a4:	adrp	x2, 4000 <lzma_filters_copy@@XZ_5.0+0xd0>
    44a8:	add	x2, x2, #0x4cc
    44ac:	mov	x1, x19
    44b0:	bl	5340 <lzma_index_iter_locate@@XZ_5.0+0xdc>
    44b4:	mov	x0, x20
    44b8:	mov	x1, x19
    44bc:	ldp	x20, x19, [sp, #16]
    44c0:	ldp	x29, x30, [sp], #32
    44c4:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    44c8:	ret
    44cc:	stp	x29, x30, [sp, #-32]!
    44d0:	stp	x20, x19, [sp, #16]
    44d4:	mov	x19, x0
    44d8:	ldr	x0, [x0, #56]
    44dc:	mov	x20, x1
    44e0:	mov	x29, sp
    44e4:	cbz	x0, 44f8 <lzma_index_end@@XZ_5.0+0x74>
    44e8:	adrp	x2, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    44ec:	ldr	x2, [x2, #3992]
    44f0:	mov	x1, x20
    44f4:	bl	5340 <lzma_index_iter_locate@@XZ_5.0+0xdc>
    44f8:	mov	x0, x19
    44fc:	mov	x1, x20
    4500:	ldp	x20, x19, [sp, #16]
    4504:	ldp	x29, x30, [sp], #32
    4508:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    450c:	mov	x8, #0xfffffffffffffffb    	// #-5
    4510:	movk	x8, #0xfff, lsl #48
    4514:	cmp	x1, x8
    4518:	csel	x8, x1, x8, cc  // cc = lo, ul, last
    451c:	str	x8, [x0, #64]
    4520:	ret

0000000000004524 <lzma_index_memusage@@XZ_5.0>:
    4524:	add	x8, x1, #0x1ff
    4528:	mov	w9, #0x128                 	// #296
    452c:	mov	w10, #0x2060                	// #8288
    4530:	lsr	x12, x8, #9
    4534:	mul	x9, x0, x9
    4538:	mul	x10, x12, x10
    453c:	mov	x12, #0xffffffffffffff8f    	// #-113
    4540:	sub	x12, x12, x9
    4544:	cmp	x12, x10
    4548:	mov	x12, #0x9ff                 	// #2559
    454c:	movk	x12, #0xfd, lsl #16
    4550:	movk	x12, #0x8e55, lsl #32
    4554:	movk	x12, #0xfd0, lsl #48
    4558:	ccmp	x8, x12, #0x2, cs  // cs = hs, nlast
    455c:	sub	x11, x0, #0x1
    4560:	add	x9, x9, x10
    4564:	mov	w10, #0xfffffffe            	// #-2
    4568:	ccmp	x1, #0x0, #0x8, ls  // ls = plast
    456c:	ccmp	x11, x10, #0x2, ge  // ge = tcont
    4570:	add	x8, x9, #0x70
    4574:	csinv	x0, x8, xzr, ls  // ls = plast
    4578:	ret

000000000000457c <lzma_index_memused@@XZ_5.0>:
    457c:	ldr	x8, [x0, #48]
    4580:	ldr	w9, [x0, #24]
    4584:	mov	w10, #0x128                 	// #296
    4588:	mov	w11, #0x2060                	// #8288
    458c:	add	x12, x8, #0x1ff
    4590:	lsr	x13, x12, #9
    4594:	mul	x11, x13, x11
    4598:	mov	x13, #0xffffffffffffff8f    	// #-113
    459c:	mul	x10, x9, x10
    45a0:	sub	x13, x13, x10
    45a4:	cmp	x13, x11
    45a8:	add	x10, x10, x11
    45ac:	mov	x11, #0x9ff                 	// #2559
    45b0:	mov	w13, #0xfffffffe            	// #-2
    45b4:	movk	x11, #0xfd, lsl #16
    45b8:	sub	x9, x9, #0x1
    45bc:	movk	x11, #0x8e55, lsl #32
    45c0:	ccmp	x9, x13, #0x2, cs  // cs = hs, nlast
    45c4:	movk	x11, #0xfd0, lsl #48
    45c8:	ccmp	x8, #0x0, #0x8, ls  // ls = plast
    45cc:	ccmp	x12, x11, #0x2, ge  // ge = tcont
    45d0:	add	x8, x10, #0x70
    45d4:	csinv	x0, x8, xzr, ls  // ls = plast
    45d8:	ret

00000000000045dc <lzma_index_block_count@@XZ_5.0>:
    45dc:	ldr	x0, [x0, #48]
    45e0:	ret

00000000000045e4 <lzma_index_stream_count@@XZ_5.0>:
    45e4:	ldr	w0, [x0, #24]
    45e8:	ret

00000000000045ec <lzma_index_size@@XZ_5.0>:
    45ec:	stp	x29, x30, [sp, #-32]!
    45f0:	str	x19, [sp, #16]
    45f4:	ldp	x8, x19, [x0, #48]
    45f8:	mov	x29, sp
    45fc:	mov	x0, x8
    4600:	bl	3430 <lzma_vli_size@plt>
    4604:	add	w8, w0, #0x1
    4608:	add	x8, x19, x8
    460c:	ldr	x19, [sp, #16]
    4610:	add	x8, x8, #0x7
    4614:	and	x0, x8, #0xfffffffffffffffc
    4618:	ldp	x29, x30, [sp], #32
    461c:	ret

0000000000004620 <lzma_index_total_size@@XZ_5.0>:
    4620:	ldr	x0, [x0, #40]
    4624:	ret

0000000000004628 <lzma_index_stream_size@@XZ_5.0>:
    4628:	stp	x29, x30, [sp, #-32]!
    462c:	stp	x20, x19, [sp, #16]
    4630:	ldp	x19, x8, [x0, #40]
    4634:	ldr	x20, [x0, #56]
    4638:	mov	x29, sp
    463c:	mov	x0, x8
    4640:	bl	3430 <lzma_vli_size@plt>
    4644:	add	w8, w0, #0x1
    4648:	add	x8, x20, x8
    464c:	add	x8, x8, #0x7
    4650:	and	x8, x8, #0xfffffffffffffffc
    4654:	add	x8, x19, x8
    4658:	ldp	x20, x19, [sp, #16]
    465c:	add	x0, x8, #0x18
    4660:	ldp	x29, x30, [sp], #32
    4664:	ret

0000000000004668 <lzma_index_file_size@@XZ_5.0>:
    4668:	ldr	x8, [x0, #16]
    466c:	ldr	x9, [x8, #72]
    4670:	ldr	x0, [x8, #8]
    4674:	cbz	x9, 4688 <lzma_index_file_size@@XZ_5.0+0x20>
    4678:	ldr	x10, [x9, #56]
    467c:	add	x9, x9, x10, lsl #4
    4680:	ldr	x1, [x9, #72]
    4684:	b	468c <lzma_index_file_size@@XZ_5.0+0x24>
    4688:	mov	x1, xzr
    468c:	ldp	x2, x3, [x8, #88]
    4690:	ldr	x4, [x8, #160]
    4694:	b	4698 <lzma_index_file_size@@XZ_5.0+0x30>
    4698:	stp	x29, x30, [sp, #-32]!
    469c:	add	x8, x1, #0x3
    46a0:	and	x8, x8, #0xfffffffffffffffc
    46a4:	add	x8, x0, x8
    46a8:	add	x8, x8, x4
    46ac:	stp	x20, x19, [sp, #16]
    46b0:	adds	x20, x8, #0x18
    46b4:	mov	x29, sp
    46b8:	b.mi	46e8 <lzma_index_file_size@@XZ_5.0+0x80>  // b.first
    46bc:	mov	x0, x2
    46c0:	mov	x19, x3
    46c4:	bl	3430 <lzma_vli_size@plt>
    46c8:	add	w8, w0, #0x1
    46cc:	add	x8, x19, x8
    46d0:	add	x8, x8, #0x7
    46d4:	and	x8, x8, #0xfffffffffffffffc
    46d8:	add	x8, x8, x20
    46dc:	cmp	x8, #0x0
    46e0:	csinv	x0, x8, xzr, ge  // ge = tcont
    46e4:	b	46ec <lzma_index_file_size@@XZ_5.0+0x84>
    46e8:	mov	x0, #0xffffffffffffffff    	// #-1
    46ec:	ldp	x20, x19, [sp, #16]
    46f0:	ldp	x29, x30, [sp], #32
    46f4:	ret

00000000000046f8 <lzma_index_uncompressed_size@@XZ_5.0>:
    46f8:	ldr	x0, [x0, #32]
    46fc:	ret

0000000000004700 <lzma_index_checks@@XZ_5.0>:
    4700:	ldr	x8, [x0, #16]
    4704:	ldr	w0, [x0, #72]
    4708:	ldr	w9, [x8, #104]
    470c:	cmn	w9, #0x1
    4710:	b.eq	4724 <lzma_index_checks@@XZ_5.0+0x24>  // b.none
    4714:	ldr	w8, [x8, #120]
    4718:	mov	w9, #0x1                   	// #1
    471c:	lsl	w8, w9, w8
    4720:	orr	w0, w8, w0
    4724:	ret
    4728:	stp	x29, x30, [sp, #-32]!
    472c:	ldr	x8, [x0, #48]
    4730:	str	x19, [sp, #16]
    4734:	ldr	w19, [x0, #56]
    4738:	mov	x29, sp
    473c:	mov	x0, x8
    4740:	bl	3430 <lzma_vli_size@plt>
    4744:	add	w8, w19, w0
    4748:	ldr	x19, [sp, #16]
    474c:	mov	w9, #0x3                   	// #3
    4750:	sub	w8, w9, w8
    4754:	and	w0, w8, #0x3
    4758:	ldp	x29, x30, [sp], #32
    475c:	ret

0000000000004760 <lzma_index_stream_flags@@XZ_5.0>:
    4760:	stp	x29, x30, [sp, #-32]!
    4764:	stp	x20, x19, [sp, #16]
    4768:	mov	x20, x0
    476c:	mov	w0, #0xb                   	// #11
    4770:	mov	x29, sp
    4774:	cbz	x20, 47b0 <lzma_index_stream_flags@@XZ_5.0+0x50>
    4778:	mov	x19, x1
    477c:	cbz	x1, 47b0 <lzma_index_stream_flags@@XZ_5.0+0x50>
    4780:	mov	x0, x19
    4784:	mov	x1, x19
    4788:	bl	30d0 <lzma_stream_flags_compare@plt>
    478c:	cbnz	w0, 47b0 <lzma_index_stream_flags@@XZ_5.0+0x50>
    4790:	ldr	x8, [x20, #16]
    4794:	ldr	x9, [x19, #48]
    4798:	ldp	q1, q0, [x19, #16]
    479c:	ldr	q2, [x19]
    47a0:	str	x9, [x8, #152]
    47a4:	stur	q0, [x8, #136]
    47a8:	stur	q1, [x8, #120]
    47ac:	stur	q2, [x8, #104]
    47b0:	ldp	x20, x19, [sp, #16]
    47b4:	ldp	x29, x30, [sp], #32
    47b8:	ret

00000000000047bc <lzma_index_stream_padding@@XZ_5.0>:
    47bc:	stp	x29, x30, [sp, #-48]!
    47c0:	mov	x8, x0
    47c4:	mov	w0, #0xb                   	// #11
    47c8:	str	x21, [sp, #16]
    47cc:	stp	x20, x19, [sp, #32]
    47d0:	mov	x29, sp
    47d4:	cbz	x8, 4814 <lzma_index_stream_padding@@XZ_5.0+0x58>
    47d8:	mov	x19, x1
    47dc:	and	x9, x1, #0x8000000000000003
    47e0:	cbnz	x9, 4814 <lzma_index_stream_padding@@XZ_5.0+0x58>
    47e4:	ldr	x20, [x8, #16]
    47e8:	mov	x0, x8
    47ec:	ldr	x21, [x20, #160]
    47f0:	str	xzr, [x20, #160]
    47f4:	bl	3310 <lzma_index_file_size@plt>
    47f8:	add	x8, x0, x19
    47fc:	mov	w9, #0x9                   	// #9
    4800:	cmp	x8, #0x0
    4804:	asr	x8, x8, #63
    4808:	csel	x10, x21, x19, lt  // lt = tstop
    480c:	and	w0, w8, w9
    4810:	str	x10, [x20, #160]
    4814:	ldp	x20, x19, [sp, #32]
    4818:	ldr	x21, [sp, #16]
    481c:	ldp	x29, x30, [sp], #48
    4820:	ret

0000000000004824 <lzma_index_append@@XZ_5.0>:
    4824:	sub	sp, sp, #0x70
    4828:	stp	x20, x19, [sp, #96]
    482c:	mov	x19, x0
    4830:	mov	w0, #0xb                   	// #11
    4834:	stp	x29, x30, [sp, #16]
    4838:	stp	x28, x27, [sp, #32]
    483c:	stp	x26, x25, [sp, #48]
    4840:	stp	x24, x23, [sp, #64]
    4844:	stp	x22, x21, [sp, #80]
    4848:	add	x29, sp, #0x10
    484c:	tbnz	x3, #63, 49d4 <lzma_index_append@@XZ_5.0+0x1b0>
    4850:	cbz	x19, 49d4 <lzma_index_append@@XZ_5.0+0x1b0>
    4854:	mov	x9, #0xfffffffffffffff7    	// #-9
    4858:	sub	x8, x2, #0x5
    485c:	movk	x9, #0x7fff, lsl #48
    4860:	mov	x21, x2
    4864:	cmp	x8, x9
    4868:	b.hi	49d4 <lzma_index_append@@XZ_5.0+0x1b0>  // b.pmore
    486c:	ldr	x25, [x19, #16]
    4870:	mov	x20, x3
    4874:	mov	x23, x1
    4878:	ldr	x22, [x25, #72]
    487c:	cbz	x22, 4898 <lzma_index_append@@XZ_5.0+0x74>
    4880:	ldr	x8, [x22, #56]
    4884:	add	x8, x22, x8, lsl #4
    4888:	ldp	x27, x9, [x8, #64]
    488c:	add	x8, x9, #0x3
    4890:	and	x28, x8, #0xfffffffffffffffc
    4894:	b	48a0 <lzma_index_append@@XZ_5.0+0x7c>
    4898:	mov	x28, xzr
    489c:	mov	x27, xzr
    48a0:	mov	x0, x21
    48a4:	bl	3430 <lzma_vli_size@plt>
    48a8:	mov	w24, w0
    48ac:	mov	x0, x20
    48b0:	bl	3430 <lzma_vli_size@plt>
    48b4:	ldp	x8, x9, [x25, #88]
    48b8:	add	w26, w0, w24
    48bc:	ldr	x0, [x25, #8]
    48c0:	ldr	x4, [x25, #160]
    48c4:	add	x24, x28, x21
    48c8:	add	x2, x8, #0x1
    48cc:	add	x3, x9, x26
    48d0:	mov	x1, x24
    48d4:	bl	4698 <lzma_index_file_size@@XZ_5.0+0x30>
    48d8:	cmn	x0, #0x1
    48dc:	b.eq	4914 <lzma_index_append@@XZ_5.0+0xf0>  // b.none
    48e0:	str	x23, [sp, #8]
    48e4:	mov	x23, x27
    48e8:	ldp	x8, x27, [x19, #48]
    48ec:	add	x0, x8, #0x1
    48f0:	bl	3430 <lzma_vli_size@plt>
    48f4:	add	w8, w0, #0x1
    48f8:	add	x9, x26, x27
    48fc:	add	x8, x9, x8
    4900:	add	x8, x8, #0x7
    4904:	and	x8, x8, #0xfffffffffffffffc
    4908:	mov	x9, #0x400000000           	// #17179869184
    490c:	cmp	x8, x9
    4910:	b.ls	491c <lzma_index_append@@XZ_5.0+0xf8>  // b.plast
    4914:	mov	w0, #0x9                   	// #9
    4918:	b	49d4 <lzma_index_append@@XZ_5.0+0x1b0>
    491c:	cbz	x22, 4938 <lzma_index_append@@XZ_5.0+0x114>
    4920:	ldp	x9, x8, [x22, #48]
    4924:	add	x8, x8, #0x1
    4928:	cmp	x8, x9
    492c:	b.cs	4938 <lzma_index_append@@XZ_5.0+0x114>  // b.hs, b.nlast
    4930:	str	x8, [x22, #56]
    4934:	b	4984 <lzma_index_append@@XZ_5.0+0x160>
    4938:	ldr	x8, [x19, #64]
    493c:	ldr	x1, [sp, #8]
    4940:	lsl	x8, x8, #4
    4944:	add	x0, x8, #0x40
    4948:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    494c:	cbz	x0, 49d0 <lzma_index_append@@XZ_5.0+0x1ac>
    4950:	ldr	x8, [x19, #64]
    4954:	mov	w9, #0x200                 	// #512
    4958:	mov	x22, x0
    495c:	mov	x1, x22
    4960:	stp	x8, xzr, [x0, #48]
    4964:	str	x9, [x19, #64]
    4968:	stp	x23, x28, [x0]
    496c:	ldr	x8, [x25, #88]
    4970:	add	x0, x25, #0x38
    4974:	add	x8, x8, #0x1
    4978:	str	x8, [x22, #40]
    497c:	bl	43e8 <lzma_index_init@@XZ_5.0+0xb0>
    4980:	ldr	x8, [x22, #56]
    4984:	add	x8, x22, x8, lsl #4
    4988:	add	x9, x23, x20
    498c:	stp	x9, x24, [x8, #64]
    4990:	ldp	x8, x9, [x25, #88]
    4994:	add	x10, x21, #0x3
    4998:	and	x10, x10, #0xfffffffffffffffc
    499c:	mov	w0, wzr
    49a0:	add	x8, x8, #0x1
    49a4:	add	x9, x9, x26
    49a8:	stp	x8, x9, [x25, #88]
    49ac:	ldp	x9, x8, [x19, #32]
    49b0:	ldp	x11, x12, [x19, #48]
    49b4:	add	x8, x8, x10
    49b8:	add	x9, x9, x20
    49bc:	add	x10, x11, #0x1
    49c0:	add	x11, x12, x26
    49c4:	stp	x9, x8, [x19, #32]
    49c8:	stp	x10, x11, [x19, #48]
    49cc:	b	49d4 <lzma_index_append@@XZ_5.0+0x1b0>
    49d0:	mov	w0, #0x5                   	// #5
    49d4:	ldp	x20, x19, [sp, #96]
    49d8:	ldp	x22, x21, [sp, #80]
    49dc:	ldp	x24, x23, [sp, #64]
    49e0:	ldp	x26, x25, [sp, #48]
    49e4:	ldp	x28, x27, [sp, #32]
    49e8:	ldp	x29, x30, [sp, #16]
    49ec:	add	sp, sp, #0x70
    49f0:	ret

00000000000049f4 <lzma_index_cat@@XZ_5.0>:
    49f4:	sub	sp, sp, #0x90
    49f8:	stp	x29, x30, [sp, #48]
    49fc:	str	x27, [sp, #64]
    4a00:	stp	x26, x25, [sp, #80]
    4a04:	stp	x24, x23, [sp, #96]
    4a08:	stp	x22, x21, [sp, #112]
    4a0c:	stp	x20, x19, [sp, #128]
    4a10:	add	x29, sp, #0x30
    4a14:	mov	x19, x2
    4a18:	mov	x20, x1
    4a1c:	mov	x21, x0
    4a20:	bl	3310 <lzma_index_file_size@plt>
    4a24:	mov	x22, x0
    4a28:	mov	x0, x20
    4a2c:	bl	3310 <lzma_index_file_size@plt>
    4a30:	cmn	x0, x22
    4a34:	b.mi	4bb0 <lzma_index_cat@@XZ_5.0+0x1bc>  // b.first
    4a38:	ldr	x26, [x21, #32]
    4a3c:	ldr	x8, [x20, #32]
    4a40:	cmn	x8, x26
    4a44:	b.mi	4bb0 <lzma_index_cat@@XZ_5.0+0x1bc>  // b.first
    4a48:	ldp	x24, x23, [x21, #48]
    4a4c:	mov	x0, x24
    4a50:	bl	3430 <lzma_vli_size@plt>
    4a54:	ldp	x8, x25, [x20, #48]
    4a58:	add	w27, w0, #0x1
    4a5c:	mov	x0, x8
    4a60:	bl	3430 <lzma_vli_size@plt>
    4a64:	add	x9, x23, x27
    4a68:	add	w8, w0, #0x1
    4a6c:	add	x9, x9, x25
    4a70:	add	x8, x9, x8
    4a74:	add	x8, x8, #0xb
    4a78:	and	x8, x8, #0xfffffffffffffffc
    4a7c:	mov	x9, #0x400000000           	// #17179869184
    4a80:	cmp	x8, x9
    4a84:	b.hi	4bb0 <lzma_index_cat@@XZ_5.0+0x1bc>  // b.pmore
    4a88:	ldr	x25, [x21, #16]
    4a8c:	ldr	x23, [x25, #72]
    4a90:	cbz	x23, 4b38 <lzma_index_cat@@XZ_5.0+0x144>
    4a94:	ldp	x9, x8, [x23, #48]
    4a98:	add	x8, x8, #0x1
    4a9c:	cmp	x8, x9
    4aa0:	b.cs	4b38 <lzma_index_cat@@XZ_5.0+0x144>  // b.hs, b.nlast
    4aa4:	lsl	x8, x8, #4
    4aa8:	add	x0, x8, #0x40
    4aac:	mov	x1, x19
    4ab0:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    4ab4:	cbz	x0, 4bd4 <lzma_index_cat@@XZ_5.0+0x1e0>
    4ab8:	ldr	x8, [x23, #32]
    4abc:	ldp	q1, q0, [x23]
    4ac0:	mov	x24, x0
    4ac4:	add	x1, x23, #0x40
    4ac8:	str	x8, [x0, #32]
    4acc:	stp	q1, q0, [x0]
    4ad0:	ldr	x8, [x23, #56]
    4ad4:	add	x8, x8, #0x1
    4ad8:	str	x8, [x0, #48]
    4adc:	ldr	x9, [x23, #56]
    4ae0:	lsl	x2, x8, #4
    4ae4:	str	x9, [x0, #56]
    4ae8:	ldr	x9, [x23, #40]
    4aec:	add	x0, x0, #0x40
    4af0:	str	x9, [x24, #40]
    4af4:	bl	3060 <memcpy@plt>
    4af8:	ldr	x8, [x23, #16]
    4afc:	cbz	x8, 4b04 <lzma_index_cat@@XZ_5.0+0x110>
    4b00:	str	x24, [x8, #32]
    4b04:	ldr	x8, [x25, #64]
    4b08:	cmp	x8, x23
    4b0c:	b.ne	4b14 <lzma_index_cat@@XZ_5.0+0x120>  // b.any
    4b10:	stp	x24, x24, [x25, #56]
    4b14:	ldr	x8, [x25, #72]
    4b18:	cmp	x8, x23
    4b1c:	b.ne	4b24 <lzma_index_cat@@XZ_5.0+0x130>  // b.any
    4b20:	str	x24, [x25, #72]
    4b24:	mov	x0, x23
    4b28:	mov	x1, x19
    4b2c:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    4b30:	ldr	x26, [x21, #32]
    4b34:	ldr	x24, [x21, #48]
    4b38:	ldr	w8, [x21, #24]
    4b3c:	ldr	x1, [x20]
    4b40:	add	x0, sp, #0x8
    4b44:	stp	x26, x22, [sp, #8]
    4b48:	str	x24, [sp, #24]
    4b4c:	str	w8, [sp, #32]
    4b50:	str	x21, [sp, #40]
    4b54:	bl	4bdc <lzma_index_cat@@XZ_5.0+0x1e8>
    4b58:	ldp	q0, q1, [x20, #32]
    4b5c:	ldp	q2, q3, [x21, #32]
    4b60:	ldr	x9, [x21, #16]
    4b64:	ldr	w8, [x21, #72]
    4b68:	add	v0.2d, v2.2d, v0.2d
    4b6c:	add	v1.2d, v3.2d, v1.2d
    4b70:	stp	q0, q1, [x21, #32]
    4b74:	ldr	w10, [x9, #104]
    4b78:	cmn	w10, #0x1
    4b7c:	b.eq	4b90 <lzma_index_cat@@XZ_5.0+0x19c>  // b.none
    4b80:	ldr	w9, [x9, #120]
    4b84:	mov	w10, #0x1                   	// #1
    4b88:	lsl	w9, w10, w9
    4b8c:	orr	w8, w9, w8
    4b90:	ldr	w9, [x20, #72]
    4b94:	mov	x0, x20
    4b98:	mov	x1, x19
    4b9c:	orr	w8, w9, w8
    4ba0:	str	w8, [x21, #72]
    4ba4:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    4ba8:	mov	w0, wzr
    4bac:	b	4bb4 <lzma_index_cat@@XZ_5.0+0x1c0>
    4bb0:	mov	w0, #0x9                   	// #9
    4bb4:	ldp	x20, x19, [sp, #128]
    4bb8:	ldp	x22, x21, [sp, #112]
    4bbc:	ldp	x24, x23, [sp, #96]
    4bc0:	ldp	x26, x25, [sp, #80]
    4bc4:	ldr	x27, [sp, #64]
    4bc8:	ldp	x29, x30, [sp, #48]
    4bcc:	add	sp, sp, #0x90
    4bd0:	ret
    4bd4:	mov	w0, #0x5                   	// #5
    4bd8:	b	4bb4 <lzma_index_cat@@XZ_5.0+0x1c0>
    4bdc:	stp	x29, x30, [sp, #-48]!
    4be0:	stp	x20, x19, [sp, #32]
    4be4:	mov	x20, x1
    4be8:	mov	x19, x0
    4bec:	str	x21, [sp, #16]
    4bf0:	mov	x29, sp
    4bf4:	ldp	x1, x21, [x20, #24]
    4bf8:	cbz	x1, 4c04 <lzma_index_cat@@XZ_5.0+0x210>
    4bfc:	mov	x0, x19
    4c00:	bl	4bdc <lzma_index_cat@@XZ_5.0+0x1e8>
    4c04:	ldr	q0, [x19]
    4c08:	ldr	q1, [x20]
    4c0c:	ldr	w8, [x20, #40]
    4c10:	mov	x1, x20
    4c14:	add	v0.2d, v1.2d, v0.2d
    4c18:	str	q0, [x20]
    4c1c:	ldr	w9, [x19, #24]
    4c20:	add	w8, w8, w9
    4c24:	str	w8, [x20, #40]
    4c28:	ldr	x8, [x19, #16]
    4c2c:	ldr	x9, [x20, #48]
    4c30:	add	x8, x9, x8
    4c34:	str	x8, [x20, #48]
    4c38:	ldr	x0, [x19, #32]
    4c3c:	bl	43e8 <lzma_index_init@@XZ_5.0+0xb0>
    4c40:	mov	x20, x21
    4c44:	cbnz	x21, 4bf4 <lzma_index_cat@@XZ_5.0+0x200>
    4c48:	ldp	x20, x19, [sp, #32]
    4c4c:	ldr	x21, [sp, #16]
    4c50:	ldp	x29, x30, [sp], #48
    4c54:	ret

0000000000004c58 <lzma_index_dup@@XZ_5.0>:
    4c58:	stp	x29, x30, [sp, #-96]!
    4c5c:	stp	x22, x21, [sp, #64]
    4c60:	mov	x21, x0
    4c64:	mov	w0, #0x50                  	// #80
    4c68:	stp	x28, x27, [sp, #16]
    4c6c:	stp	x26, x25, [sp, #32]
    4c70:	stp	x24, x23, [sp, #48]
    4c74:	stp	x20, x19, [sp, #80]
    4c78:	mov	x29, sp
    4c7c:	mov	x19, x1
    4c80:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    4c84:	mov	x20, x0
    4c88:	cbz	x0, 4e60 <lzma_index_dup@@XZ_5.0+0x208>
    4c8c:	mov	w8, #0x200                 	// #512
    4c90:	stp	xzr, xzr, [x20]
    4c94:	str	wzr, [x20, #24]
    4c98:	str	xzr, [x20, #16]
    4c9c:	str	x8, [x20, #64]
    4ca0:	str	wzr, [x20, #72]
    4ca4:	ldr	q0, [x21, #32]
    4ca8:	mov	x24, #0xfffffffffffffffb    	// #-5
    4cac:	movk	x24, #0xfff, lsl #48
    4cb0:	str	q0, [x20, #32]
    4cb4:	ldr	q0, [x21, #48]
    4cb8:	str	q0, [x20, #48]
    4cbc:	ldr	x25, [x21, #8]
    4cc0:	mov	x27, x25
    4cc4:	ldr	x8, [x27, #88]!
    4cc8:	cmp	x8, x24
    4ccc:	b.hi	4e50 <lzma_index_dup@@XZ_5.0+0x1f8>  // b.pmore
    4cd0:	ldp	x28, x26, [x25]
    4cd4:	ldr	w22, [x25, #40]
    4cd8:	ldr	x23, [x25, #48]
    4cdc:	mov	w0, #0xa8                  	// #168
    4ce0:	mov	x1, x19
    4ce4:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    4ce8:	cbz	x0, 4e50 <lzma_index_dup@@XZ_5.0+0x1f8>
    4cec:	str	w22, [x0, #40]
    4cf0:	mov	x22, x0
    4cf4:	stp	x28, x26, [x0]
    4cf8:	stp	xzr, xzr, [x0, #24]
    4cfc:	str	xzr, [x0, #16]
    4d00:	str	x23, [x0, #48]
    4d04:	stp	xzr, xzr, [x0, #64]
    4d08:	str	wzr, [x0, #80]
    4d0c:	str	xzr, [x22, #56]!
    4d10:	ldr	x8, [x27]
    4d14:	mov	x21, x0
    4d18:	str	x8, [x0, #88]
    4d1c:	ldr	x9, [x25, #96]
    4d20:	str	x9, [x0, #96]
    4d24:	ldr	x9, [x25, #152]
    4d28:	ldur	q0, [x25, #136]
    4d2c:	ldur	q1, [x25, #120]
    4d30:	ldur	q2, [x25, #104]
    4d34:	str	x9, [x0, #152]
    4d38:	stur	q0, [x0, #136]
    4d3c:	stur	q1, [x0, #120]
    4d40:	stur	q2, [x0, #104]
    4d44:	ldr	x9, [x25, #160]
    4d48:	str	x9, [x0, #160]
    4d4c:	ldr	x9, [x25, #64]
    4d50:	cbz	x9, 4df8 <lzma_index_dup@@XZ_5.0+0x1a0>
    4d54:	lsl	x8, x8, #4
    4d58:	add	x0, x8, #0x40
    4d5c:	mov	x1, x19
    4d60:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    4d64:	cbz	x0, 4e44 <lzma_index_dup@@XZ_5.0+0x1ec>
    4d68:	mov	w8, #0x1                   	// #1
    4d6c:	stp	xzr, xzr, [x0]
    4d70:	str	x8, [x0, #40]
    4d74:	ldr	x8, [x27]
    4d78:	mov	x23, x0
    4d7c:	mov	x28, xzr
    4d80:	add	x27, x0, #0x40
    4d84:	sub	x9, x8, #0x1
    4d88:	stp	x8, x9, [x0, #48]
    4d8c:	ldr	x26, [x25, #64]
    4d90:	ldr	x8, [x26, #56]
    4d94:	add	x0, x27, x28, lsl #4
    4d98:	add	x1, x26, #0x40
    4d9c:	lsl	x8, x8, #4
    4da0:	add	x2, x8, #0x10
    4da4:	bl	3060 <memcpy@plt>
    4da8:	ldr	x9, [x26, #32]
    4dac:	ldr	x8, [x26, #56]
    4db0:	cbz	x9, 4dc4 <lzma_index_dup@@XZ_5.0+0x16c>
    4db4:	mov	x26, x9
    4db8:	ldr	x9, [x9, #24]
    4dbc:	cbnz	x9, 4db4 <lzma_index_dup@@XZ_5.0+0x15c>
    4dc0:	b	4de0 <lzma_index_dup@@XZ_5.0+0x188>
    4dc4:	mov	x9, x26
    4dc8:	ldr	x26, [x9, #16]
    4dcc:	cbz	x26, 4dec <lzma_index_dup@@XZ_5.0+0x194>
    4dd0:	ldr	x10, [x26, #32]
    4dd4:	cmp	x10, x9
    4dd8:	mov	x9, x26
    4ddc:	b.eq	4dc8 <lzma_index_dup@@XZ_5.0+0x170>  // b.none
    4de0:	add	x8, x28, x8
    4de4:	add	x28, x8, #0x1
    4de8:	b	4d90 <lzma_index_dup@@XZ_5.0+0x138>
    4dec:	mov	x0, x22
    4df0:	mov	x1, x23
    4df4:	bl	43e8 <lzma_index_init@@XZ_5.0+0xb0>
    4df8:	mov	x0, x20
    4dfc:	mov	x1, x21
    4e00:	bl	43e8 <lzma_index_init@@XZ_5.0+0xb0>
    4e04:	ldr	x8, [x25, #32]
    4e08:	cbz	x8, 4e1c <lzma_index_dup@@XZ_5.0+0x1c4>
    4e0c:	mov	x25, x8
    4e10:	ldr	x8, [x8, #24]
    4e14:	cbnz	x8, 4e0c <lzma_index_dup@@XZ_5.0+0x1b4>
    4e18:	b	4e38 <lzma_index_dup@@XZ_5.0+0x1e0>
    4e1c:	mov	x8, x25
    4e20:	ldr	x25, [x8, #16]
    4e24:	cbz	x25, 4e60 <lzma_index_dup@@XZ_5.0+0x208>
    4e28:	ldr	x9, [x25, #32]
    4e2c:	cmp	x9, x8
    4e30:	mov	x8, x25
    4e34:	b.eq	4e20 <lzma_index_dup@@XZ_5.0+0x1c8>  // b.none
    4e38:	mov	x27, x25
    4e3c:	ldr	x8, [x27, #88]!
    4e40:	b	4cc8 <lzma_index_dup@@XZ_5.0+0x70>
    4e44:	mov	x0, x21
    4e48:	mov	x1, x19
    4e4c:	bl	44cc <lzma_index_end@@XZ_5.0+0x48>
    4e50:	mov	x0, x20
    4e54:	mov	x1, x19
    4e58:	bl	3390 <lzma_index_end@plt>
    4e5c:	mov	x20, xzr
    4e60:	mov	x0, x20
    4e64:	ldp	x20, x19, [sp, #80]
    4e68:	ldp	x22, x21, [sp, #64]
    4e6c:	ldp	x24, x23, [sp, #48]
    4e70:	ldp	x26, x25, [sp, #32]
    4e74:	ldp	x28, x27, [sp, #16]
    4e78:	ldp	x29, x30, [sp], #96
    4e7c:	ret

0000000000004e80 <lzma_index_iter_init@@XZ_5.0>:
    4e80:	add	x8, x0, #0x108
    4e84:	movi	v0.2d, #0x0
    4e88:	add	x9, x0, #0x118
    4e8c:	str	x1, [x0, #256]
    4e90:	str	q0, [x8]
    4e94:	str	q0, [x9]
    4e98:	ret

0000000000004e9c <lzma_index_iter_rewind@@XZ_5.0>:
    4e9c:	add	x8, x0, #0x108
    4ea0:	add	x9, x0, #0x118
    4ea4:	movi	v0.2d, #0x0
    4ea8:	str	q0, [x9]
    4eac:	str	q0, [x8]
    4eb0:	ret

0000000000004eb4 <lzma_index_iter_next@@XZ_5.0>:
    4eb4:	stp	x29, x30, [sp, #-16]!
    4eb8:	cmp	w1, #0x3
    4ebc:	mov	x29, sp
    4ec0:	b.ls	4ed0 <lzma_index_iter_next@@XZ_5.0+0x1c>  // b.plast
    4ec4:	mov	w0, #0x1                   	// #1
    4ec8:	ldp	x29, x30, [sp], #16
    4ecc:	ret
    4ed0:	ldp	x8, x9, [x0, #256]
    4ed4:	ldr	x10, [x0, #280]
    4ed8:	cmp	w1, #0x1
    4edc:	b.eq	4f00 <lzma_index_iter_next@@XZ_5.0+0x4c>  // b.none
    4ee0:	ldr	x11, [x0, #288]
    4ee4:	cmp	x11, #0x2
    4ee8:	b.eq	5044 <lzma_index_iter_next@@XZ_5.0+0x190>  // b.none
    4eec:	cmp	x11, #0x1
    4ef0:	b.eq	504c <lzma_index_iter_next@@XZ_5.0+0x198>  // b.none
    4ef4:	cbnz	x11, 4f00 <lzma_index_iter_next@@XZ_5.0+0x4c>
    4ef8:	ldr	x11, [x0, #272]
    4efc:	b	4f04 <lzma_index_iter_next@@XZ_5.0+0x50>
    4f00:	mov	x11, xzr
    4f04:	cbz	x9, 4f20 <lzma_index_iter_next@@XZ_5.0+0x6c>
    4f08:	cbz	x11, 4fac <lzma_index_iter_next@@XZ_5.0+0xf8>
    4f0c:	ldr	x12, [x11, #56]
    4f10:	cmp	x10, x12
    4f14:	b.cs	4f6c <lzma_index_iter_next@@XZ_5.0+0xb8>  // b.hs, b.nlast
    4f18:	add	x10, x10, #0x1
    4f1c:	b	4ffc <lzma_index_iter_next@@XZ_5.0+0x148>
    4f20:	ldr	x9, [x8, #8]
    4f24:	cmp	w1, #0x2
    4f28:	b.cc	4ff4 <lzma_index_iter_next@@XZ_5.0+0x140>  // b.lo, b.ul, b.last
    4f2c:	ldr	x10, [x9, #64]
    4f30:	cbnz	x10, 4ff4 <lzma_index_iter_next@@XZ_5.0+0x140>
    4f34:	ldr	x10, [x9, #32]
    4f38:	cbz	x10, 4f4c <lzma_index_iter_next@@XZ_5.0+0x98>
    4f3c:	mov	x9, x10
    4f40:	ldr	x10, [x10, #24]
    4f44:	cbnz	x10, 4f3c <lzma_index_iter_next@@XZ_5.0+0x88>
    4f48:	b	4f2c <lzma_index_iter_next@@XZ_5.0+0x78>
    4f4c:	mov	x10, x9
    4f50:	ldr	x9, [x10, #16]
    4f54:	cbz	x9, 4ec4 <lzma_index_iter_next@@XZ_5.0+0x10>
    4f58:	ldr	x11, [x9, #32]
    4f5c:	cmp	x11, x10
    4f60:	mov	x10, x9
    4f64:	b.eq	4f50 <lzma_index_iter_next@@XZ_5.0+0x9c>  // b.none
    4f68:	b	4f2c <lzma_index_iter_next@@XZ_5.0+0x78>
    4f6c:	ldr	x10, [x11, #32]
    4f70:	cbz	x10, 4f84 <lzma_index_iter_next@@XZ_5.0+0xd0>
    4f74:	mov	x12, x10
    4f78:	ldr	x10, [x10, #24]
    4f7c:	cbnz	x10, 4f74 <lzma_index_iter_next@@XZ_5.0+0xc0>
    4f80:	b	4f9c <lzma_index_iter_next@@XZ_5.0+0xe8>
    4f84:	ldr	x12, [x11, #16]
    4f88:	cbz	x12, 4f9c <lzma_index_iter_next@@XZ_5.0+0xe8>
    4f8c:	ldr	x10, [x12, #32]
    4f90:	cmp	x10, x11
    4f94:	mov	x11, x12
    4f98:	b.eq	4f84 <lzma_index_iter_next@@XZ_5.0+0xd0>  // b.none
    4f9c:	cbz	x12, 4fac <lzma_index_iter_next@@XZ_5.0+0xf8>
    4fa0:	mov	x10, xzr
    4fa4:	mov	x11, x12
    4fa8:	b	4ffc <lzma_index_iter_next@@XZ_5.0+0x148>
    4fac:	ldr	x10, [x9, #32]
    4fb0:	cbz	x10, 4fc4 <lzma_index_iter_next@@XZ_5.0+0x110>
    4fb4:	mov	x9, x10
    4fb8:	ldr	x10, [x10, #24]
    4fbc:	cbnz	x10, 4fb4 <lzma_index_iter_next@@XZ_5.0+0x100>
    4fc0:	b	4fe0 <lzma_index_iter_next@@XZ_5.0+0x12c>
    4fc4:	mov	x10, x9
    4fc8:	ldr	x9, [x10, #16]
    4fcc:	cbz	x9, 4ec4 <lzma_index_iter_next@@XZ_5.0+0x10>
    4fd0:	ldr	x11, [x9, #32]
    4fd4:	cmp	x11, x10
    4fd8:	mov	x10, x9
    4fdc:	b.eq	4fc8 <lzma_index_iter_next@@XZ_5.0+0x114>  // b.none
    4fe0:	cmp	w1, #0x1
    4fe4:	b.ls	4ff4 <lzma_index_iter_next@@XZ_5.0+0x140>  // b.plast
    4fe8:	ldr	x11, [x9, #64]
    4fec:	cbz	x11, 4fac <lzma_index_iter_next@@XZ_5.0+0xf8>
    4ff0:	b	4ff8 <lzma_index_iter_next@@XZ_5.0+0x144>
    4ff4:	ldr	x11, [x9, #64]
    4ff8:	mov	x10, xzr
    4ffc:	cmp	w1, #0x3
    5000:	b.ne	5030 <lzma_index_iter_next@@XZ_5.0+0x17c>  // b.any
    5004:	cbz	x10, 5020 <lzma_index_iter_next@@XZ_5.0+0x16c>
    5008:	add	x12, x11, x10, lsl #4
    500c:	ldr	x13, [x12, #48]
    5010:	ldr	x12, [x12, #64]
    5014:	cmp	x13, x12
    5018:	b.eq	4f04 <lzma_index_iter_next@@XZ_5.0+0x50>  // b.none
    501c:	b	5030 <lzma_index_iter_next@@XZ_5.0+0x17c>
    5020:	ldr	x12, [x11]
    5024:	ldr	x13, [x11, #64]
    5028:	cmp	x12, x13
    502c:	b.eq	4f04 <lzma_index_iter_next@@XZ_5.0+0x50>  // b.none
    5030:	stp	x9, x11, [x0, #264]
    5034:	str	x10, [x0, #280]
    5038:	bl	5084 <lzma_index_iter_next@@XZ_5.0+0x1d0>
    503c:	mov	w0, wzr
    5040:	b	4ec8 <lzma_index_iter_next@@XZ_5.0+0x14>
    5044:	ldr	x11, [x9, #64]
    5048:	b	4f04 <lzma_index_iter_next@@XZ_5.0+0x50>
    504c:	ldr	x12, [x0, #272]
    5050:	ldr	x13, [x12, #32]
    5054:	cbz	x13, 5068 <lzma_index_iter_next@@XZ_5.0+0x1b4>
    5058:	mov	x11, x13
    505c:	ldr	x13, [x13, #24]
    5060:	cbnz	x13, 5058 <lzma_index_iter_next@@XZ_5.0+0x1a4>
    5064:	b	4f04 <lzma_index_iter_next@@XZ_5.0+0x50>
    5068:	ldr	x11, [x12, #16]
    506c:	cbz	x11, 4f04 <lzma_index_iter_next@@XZ_5.0+0x50>
    5070:	ldr	x13, [x11, #32]
    5074:	cmp	x13, x12
    5078:	mov	x12, x11
    507c:	b.eq	5068 <lzma_index_iter_next@@XZ_5.0+0x1b4>  // b.none
    5080:	b	4f04 <lzma_index_iter_next@@XZ_5.0+0x50>
    5084:	stp	x29, x30, [sp, #-80]!
    5088:	stp	x26, x25, [sp, #16]
    508c:	stp	x24, x23, [sp, #32]
    5090:	stp	x22, x21, [sp, #48]
    5094:	stp	x20, x19, [sp, #64]
    5098:	ldp	x22, x21, [x0, #264]
    509c:	ldr	x20, [x0, #280]
    50a0:	mov	x19, x0
    50a4:	mov	x29, sp
    50a8:	cbz	x21, 50d0 <lzma_index_iter_next@@XZ_5.0+0x21c>
    50ac:	ldr	x8, [x19, #256]
    50b0:	ldr	x8, [x8, #16]
    50b4:	cmp	x8, x22
    50b8:	b.ne	50c8 <lzma_index_iter_next@@XZ_5.0+0x214>  // b.any
    50bc:	ldr	x8, [x22, #72]
    50c0:	cmp	x8, x21
    50c4:	b.eq	5234 <lzma_index_iter_next@@XZ_5.0+0x380>  // b.none
    50c8:	str	xzr, [x19, #288]
    50cc:	b	50d8 <lzma_index_iter_next@@XZ_5.0+0x224>
    50d0:	mov	w8, #0x2                   	// #2
    50d4:	str	x8, [x19, #288]
    50d8:	ldr	w8, [x22, #40]
    50dc:	str	x8, [x19, #32]
    50e0:	ldr	x0, [x22, #88]
    50e4:	mov	x8, x22
    50e8:	str	x0, [x19, #40]
    50ec:	ldr	x23, [x22, #8]
    50f0:	str	x23, [x19, #48]
    50f4:	ldr	x24, [x22]
    50f8:	str	x24, [x19, #56]
    50fc:	ldr	w9, [x8, #104]!
    5100:	cmn	w9, #0x1
    5104:	csel	x9, xzr, x8, eq  // eq = none
    5108:	str	x9, [x19]
    510c:	ldr	x9, [x8, #56]
    5110:	str	x9, [x19, #80]
    5114:	ldur	x25, [x8, #-32]
    5118:	cbz	x25, 5164 <lzma_index_iter_next@@XZ_5.0+0x2b0>
    511c:	ldr	x26, [x22, #96]
    5120:	bl	3430 <lzma_vli_size@plt>
    5124:	ldr	x8, [x25, #56]
    5128:	add	x10, x25, #0x40
    512c:	add	w9, w0, #0x1
    5130:	add	x9, x26, x9
    5134:	add	x8, x10, x8, lsl #4
    5138:	ldr	x8, [x8, #8]
    513c:	add	x9, x9, #0x1f
    5140:	and	x9, x9, #0xfffffffffffffffc
    5144:	add	x8, x8, #0x3
    5148:	and	x8, x8, #0xfffffffffffffffc
    514c:	add	x8, x9, x8
    5150:	str	x8, [x19, #64]
    5154:	ldr	x8, [x25, #56]
    5158:	lsl	x8, x8, #4
    515c:	ldr	x8, [x10, x8]
    5160:	b	5184 <lzma_index_iter_next@@XZ_5.0+0x2d0>
    5164:	mov	x0, xzr
    5168:	bl	3430 <lzma_vli_size@plt>
    516c:	add	w9, w0, #0x1
    5170:	add	x9, x9, #0x7
    5174:	and	x9, x9, #0x1fffffffc
    5178:	add	x9, x9, #0x18
    517c:	mov	x8, xzr
    5180:	str	x9, [x19, #64]
    5184:	str	x8, [x19, #72]
    5188:	cbz	x21, 521c <lzma_index_iter_next@@XZ_5.0+0x368>
    518c:	ldr	x8, [x21, #40]
    5190:	add	x8, x8, x20
    5194:	str	x8, [x19, #144]
    5198:	ldr	x9, [x22, #48]
    519c:	add	x8, x9, x8
    51a0:	str	x8, [x19, #120]
    51a4:	cbz	x20, 51c0 <lzma_index_iter_next@@XZ_5.0+0x30c>
    51a8:	sub	x9, x20, #0x1
    51ac:	add	x8, x21, x9, lsl #4
    51b0:	ldr	x8, [x8, #72]
    51b4:	add	x8, x8, #0x3
    51b8:	and	x8, x8, #0xfffffffffffffffc
    51bc:	b	51c8 <lzma_index_iter_next@@XZ_5.0+0x314>
    51c0:	ldr	x8, [x21, #8]
    51c4:	mov	x9, #0xffffffffffffffff    	// #-1
    51c8:	add	x10, x21, #0x40
    51cc:	cmp	x20, #0x0
    51d0:	add	x9, x10, x9, lsl #4
    51d4:	str	x8, [x19, #152]
    51d8:	csel	x9, x21, x9, eq  // eq = none
    51dc:	ldr	x9, [x9]
    51e0:	add	x10, x10, x20, lsl #4
    51e4:	add	x12, x8, #0xc
    51e8:	str	x9, [x19, #160]
    51ec:	ldr	x11, [x10]
    51f0:	sub	x11, x11, x9
    51f4:	str	x11, [x19, #168]
    51f8:	ldr	x10, [x10, #8]
    51fc:	add	x11, x12, x23
    5200:	add	x9, x9, x24
    5204:	str	x12, [x19, #152]
    5208:	sub	x8, x10, x8
    520c:	add	x10, x8, #0x3
    5210:	and	x10, x10, #0xfffffffffffffffc
    5214:	stp	x8, x10, [x19, #176]
    5218:	stp	x11, x9, [x19, #128]
    521c:	ldp	x20, x19, [sp, #64]
    5220:	ldp	x22, x21, [sp, #48]
    5224:	ldp	x24, x23, [sp, #32]
    5228:	ldp	x26, x25, [sp, #16]
    522c:	ldp	x29, x30, [sp], #80
    5230:	ret
    5234:	ldr	x9, [x22, #64]
    5238:	cmp	x9, x8
    523c:	b.eq	5254 <lzma_index_iter_next@@XZ_5.0+0x3a0>  // b.none
    5240:	mov	w8, #0x1                   	// #1
    5244:	str	x8, [x19, #288]
    5248:	ldr	x8, [x21, #16]
    524c:	str	x8, [x19, #272]
    5250:	b	50d8 <lzma_index_iter_next@@XZ_5.0+0x224>
    5254:	mov	w8, #0x2                   	// #2
    5258:	str	x8, [x19, #288]
    525c:	str	xzr, [x19, #272]
    5260:	b	50d8 <lzma_index_iter_next@@XZ_5.0+0x224>

0000000000005264 <lzma_index_iter_locate@@XZ_5.0>:
    5264:	stp	x29, x30, [sp, #-16]!
    5268:	ldr	x8, [x0, #256]
    526c:	mov	x29, sp
    5270:	ldr	x9, [x8, #32]
    5274:	cmp	x9, x1
    5278:	b.ls	52ac <lzma_index_iter_locate@@XZ_5.0+0x48>  // b.plast
    527c:	ldr	x9, [x8]
    5280:	cbz	x9, 52b4 <lzma_index_iter_locate@@XZ_5.0+0x50>
    5284:	mov	x8, xzr
    5288:	mov	w10, #0x20                  	// #32
    528c:	mov	w11, #0x18                  	// #24
    5290:	ldr	x12, [x9]
    5294:	cmp	x12, x1
    5298:	csel	x12, x11, x10, hi  // hi = pmore
    529c:	csel	x8, x8, x9, hi  // hi = pmore
    52a0:	ldr	x9, [x9, x12]
    52a4:	cbnz	x9, 5290 <lzma_index_iter_locate@@XZ_5.0+0x2c>
    52a8:	b	52b8 <lzma_index_iter_locate@@XZ_5.0+0x54>
    52ac:	mov	w0, #0x1                   	// #1
    52b0:	b	5338 <lzma_index_iter_locate@@XZ_5.0+0xd4>
    52b4:	mov	x8, xzr
    52b8:	ldr	x9, [x8]
    52bc:	ldr	x11, [x8, #56]
    52c0:	sub	x10, x1, x9
    52c4:	mov	x9, xzr
    52c8:	cbz	x11, 52ec <lzma_index_iter_locate@@XZ_5.0+0x88>
    52cc:	mov	w12, #0x20                  	// #32
    52d0:	mov	w13, #0x18                  	// #24
    52d4:	ldr	x14, [x11]
    52d8:	cmp	x14, x10
    52dc:	csel	x14, x13, x12, hi  // hi = pmore
    52e0:	csel	x9, x9, x11, hi  // hi = pmore
    52e4:	ldr	x11, [x11, x14]
    52e8:	cbnz	x11, 52d4 <lzma_index_iter_locate@@XZ_5.0+0x70>
    52ec:	ldr	x12, [x9, #56]
    52f0:	cbz	x12, 5324 <lzma_index_iter_locate@@XZ_5.0+0xc0>
    52f4:	mov	x11, xzr
    52f8:	add	x13, x9, #0x40
    52fc:	sub	x14, x12, x11
    5300:	add	x14, x11, x14, lsr #1
    5304:	lsl	x15, x14, #4
    5308:	ldr	x15, [x13, x15]
    530c:	cmp	x15, x10
    5310:	csinc	x11, x11, x14, hi  // hi = pmore
    5314:	csel	x12, x14, x12, hi  // hi = pmore
    5318:	cmp	x12, x11
    531c:	b.hi	52fc <lzma_index_iter_locate@@XZ_5.0+0x98>  // b.pmore
    5320:	b	5328 <lzma_index_iter_locate@@XZ_5.0+0xc4>
    5324:	mov	x11, xzr
    5328:	stp	x8, x9, [x0, #264]
    532c:	str	x11, [x0, #280]
    5330:	bl	5084 <lzma_index_iter_next@@XZ_5.0+0x1d0>
    5334:	mov	w0, wzr
    5338:	ldp	x29, x30, [sp], #16
    533c:	ret
    5340:	sub	sp, sp, #0x30
    5344:	stp	x29, x30, [sp, #16]
    5348:	stp	x20, x19, [sp, #32]
    534c:	mov	x19, x0
    5350:	ldr	x0, [x0, #24]
    5354:	mov	x20, x1
    5358:	add	x29, sp, #0x10
    535c:	str	x2, [sp, #8]
    5360:	cbz	x0, 5374 <lzma_index_iter_locate@@XZ_5.0+0x110>
    5364:	ldr	x2, [sp, #8]
    5368:	mov	x1, x20
    536c:	bl	5340 <lzma_index_iter_locate@@XZ_5.0+0xdc>
    5370:	ldr	x2, [sp, #8]
    5374:	ldr	x0, [x19, #32]
    5378:	cbz	x0, 538c <lzma_index_iter_locate@@XZ_5.0+0x128>
    537c:	ldr	x2, [sp, #8]
    5380:	mov	x1, x20
    5384:	bl	5340 <lzma_index_iter_locate@@XZ_5.0+0xdc>
    5388:	ldr	x2, [sp, #8]
    538c:	mov	x0, x19
    5390:	mov	x1, x20
    5394:	ldp	x20, x19, [sp, #32]
    5398:	ldp	x29, x30, [sp, #16]
    539c:	add	sp, sp, #0x30
    53a0:	br	x2

00000000000053a4 <lzma_stream_flags_compare@@XZ_5.0>:
    53a4:	ldr	w8, [x0]
    53a8:	cbnz	w8, 53b4 <lzma_stream_flags_compare@@XZ_5.0+0x10>
    53ac:	ldr	w8, [x1]
    53b0:	cbz	w8, 53bc <lzma_stream_flags_compare@@XZ_5.0+0x18>
    53b4:	mov	w0, #0x8                   	// #8
    53b8:	ret
    53bc:	ldr	w8, [x0, #16]
    53c0:	cmp	w8, #0xf
    53c4:	b.hi	53d4 <lzma_stream_flags_compare@@XZ_5.0+0x30>  // b.pmore
    53c8:	ldr	w9, [x1, #16]
    53cc:	cmp	w9, #0xf
    53d0:	b.ls	53dc <lzma_stream_flags_compare@@XZ_5.0+0x38>  // b.plast
    53d4:	mov	w0, #0xb                   	// #11
    53d8:	ret
    53dc:	cmp	w8, w9
    53e0:	b.ne	5444 <lzma_stream_flags_compare@@XZ_5.0+0xa0>  // b.any
    53e4:	ldr	x8, [x0, #8]
    53e8:	cmn	x8, #0x1
    53ec:	b.eq	543c <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.none
    53f0:	ldr	x9, [x1, #8]
    53f4:	cmn	x9, #0x1
    53f8:	b.eq	543c <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.none
    53fc:	mov	x10, #0x3ffff0000           	// #17179803648
    5400:	movk	x10, #0xfffd
    5404:	sub	x11, x8, #0x4
    5408:	cmp	x11, x10
    540c:	mov	w0, #0xb                   	// #11
    5410:	b.cs	5440 <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.hs, b.nlast
    5414:	and	x11, x8, #0x3
    5418:	cbnz	x11, 5440 <lzma_stream_flags_compare@@XZ_5.0+0x9c>
    541c:	sub	x11, x9, #0x4
    5420:	cmp	x11, x10
    5424:	mov	w0, #0xb                   	// #11
    5428:	b.cs	5440 <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.hs, b.nlast
    542c:	and	x10, x9, #0x3
    5430:	cbnz	x10, 5440 <lzma_stream_flags_compare@@XZ_5.0+0x9c>
    5434:	cmp	x8, x9
    5438:	b.ne	5444 <lzma_stream_flags_compare@@XZ_5.0+0xa0>  // b.any
    543c:	mov	w0, wzr
    5440:	ret
    5444:	mov	w0, #0x9                   	// #9
    5448:	ret

000000000000544c <lzma_vli_size@@XZ_5.0>:
    544c:	mov	w8, wzr
    5450:	tbnz	x0, #63, 5460 <lzma_vli_size@@XZ_5.0+0x14>
    5454:	lsr	x0, x0, #7
    5458:	add	w8, w8, #0x1
    545c:	cbnz	x0, 5454 <lzma_vli_size@@XZ_5.0+0x8>
    5460:	mov	w0, w8
    5464:	ret

0000000000005468 <lzma_cputhreads@@XZ_5.2>:
    5468:	b	3634 <pthread_cond_timedwait@plt+0x124>

000000000000546c <lzma_alone_encoder@@XZ_5.0>:
    546c:	stp	x29, x30, [sp, #-48]!
    5470:	str	x21, [sp, #16]
    5474:	stp	x20, x19, [sp, #32]
    5478:	mov	x29, sp
    547c:	mov	x21, x1
    5480:	mov	x19, x0
    5484:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    5488:	mov	w20, w0
    548c:	cbnz	w0, 54c0 <lzma_alone_encoder@@XZ_5.0+0x54>
    5490:	ldp	x1, x0, [x19, #48]
    5494:	mov	x2, x21
    5498:	bl	54d4 <lzma_alone_encoder@@XZ_5.0+0x68>
    549c:	mov	w20, w0
    54a0:	cbz	w0, 54b0 <lzma_alone_encoder@@XZ_5.0+0x44>
    54a4:	mov	x0, x19
    54a8:	bl	32e0 <lzma_end@plt>
    54ac:	b	54c0 <lzma_alone_encoder@@XZ_5.0+0x54>
    54b0:	ldr	x8, [x19, #56]
    54b4:	mov	w9, #0x1                   	// #1
    54b8:	strb	w9, [x8, #88]
    54bc:	strb	w9, [x8, #91]
    54c0:	mov	w0, w20
    54c4:	ldp	x20, x19, [sp, #32]
    54c8:	ldr	x21, [sp, #16]
    54cc:	ldp	x29, x30, [sp], #48
    54d0:	ret
    54d4:	sub	sp, sp, #0x70
    54d8:	stp	x29, x30, [sp, #48]
    54dc:	stp	x22, x21, [sp, #80]
    54e0:	stp	x20, x19, [sp, #96]
    54e4:	ldr	x8, [x0, #16]
    54e8:	str	x23, [sp, #64]
    54ec:	adrp	x23, 5000 <lzma_index_iter_next@@XZ_5.0+0x14c>
    54f0:	add	x23, x23, #0x4d4
    54f4:	mov	x19, x2
    54f8:	mov	x22, x0
    54fc:	cmp	x8, x23
    5500:	mov	x20, x1
    5504:	add	x29, sp, #0x30
    5508:	b.eq	5518 <lzma_alone_encoder@@XZ_5.0+0xac>  // b.none
    550c:	mov	x0, x22
    5510:	mov	x1, x20
    5514:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    5518:	ldr	x21, [x22]
    551c:	str	x23, [x22, #16]
    5520:	cbnz	x21, 5568 <lzma_alone_encoder@@XZ_5.0+0xfc>
    5524:	mov	w0, #0x68                  	// #104
    5528:	mov	x1, x20
    552c:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    5530:	cbz	x0, 5600 <lzma_alone_encoder@@XZ_5.0+0x194>
    5534:	adrp	x8, 5000 <lzma_index_iter_next@@XZ_5.0+0x14c>
    5538:	adrp	x9, 5000 <lzma_index_iter_next@@XZ_5.0+0x14c>
    553c:	mov	x21, x0
    5540:	add	x8, x8, #0x61c
    5544:	add	x9, x9, #0x73c
    5548:	mov	x10, #0xffffffffffffffff    	// #-1
    554c:	movi	v0.2d, #0x0
    5550:	str	x0, [x22]
    5554:	stp	x8, x9, [x22, #24]
    5558:	stp	xzr, x10, [x0]
    555c:	stp	q0, q0, [x0, #16]
    5560:	str	q0, [x0, #48]
    5564:	str	xzr, [x0, #64]
    5568:	add	x1, x21, #0x58
    556c:	mov	x0, x19
    5570:	str	wzr, [x21, #72]
    5574:	str	xzr, [x21, #80]
    5578:	bl	f410 <lzma_lzma_preset@@XZ_5.0+0xe38>
    557c:	tbnz	w0, #0, 558c <lzma_alone_encoder@@XZ_5.0+0x120>
    5580:	ldr	w8, [x19]
    5584:	cmp	w8, #0x1, lsl #12
    5588:	b.cs	5594 <lzma_alone_encoder@@XZ_5.0+0x128>  // b.hs, b.nlast
    558c:	mov	w0, #0x8                   	// #8
    5590:	b	5604 <lzma_alone_encoder@@XZ_5.0+0x198>
    5594:	sub	w8, w8, #0x1
    5598:	orr	w8, w8, w8, lsr #2
    559c:	orr	w8, w8, w8, lsr #3
    55a0:	orr	w8, w8, w8, lsr #4
    55a4:	orr	w8, w8, w8, lsr #8
    55a8:	orr	w8, w8, w8, lsr #16
    55ac:	adds	w8, w8, #0x1
    55b0:	mov	x9, #0xffffffffffffffff    	// #-1
    55b4:	csinv	w8, w8, wzr, cc  // cc = lo, ul, last
    55b8:	stur	x9, [x21, #93]
    55bc:	lsr	w9, w8, #8
    55c0:	strb	w9, [x21, #90]
    55c4:	lsr	w9, w8, #16
    55c8:	strb	w9, [x21, #91]
    55cc:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    55d0:	ldr	x9, [x9, #4056]
    55d4:	strb	w8, [x21, #89]
    55d8:	lsr	w8, w8, #24
    55dc:	mov	x2, sp
    55e0:	mov	x0, x21
    55e4:	mov	x1, x20
    55e8:	strb	w8, [x21, #92]
    55ec:	stp	xzr, x9, [sp]
    55f0:	stp	x19, xzr, [sp, #16]
    55f4:	stp	xzr, xzr, [sp, #32]
    55f8:	bl	37b4 <lzma_version_string@@XZ_5.0+0x134>
    55fc:	b	5604 <lzma_alone_encoder@@XZ_5.0+0x198>
    5600:	mov	w0, #0x5                   	// #5
    5604:	ldp	x20, x19, [sp, #96]
    5608:	ldp	x22, x21, [sp, #80]
    560c:	ldr	x23, [sp, #64]
    5610:	ldp	x29, x30, [sp, #48]
    5614:	add	sp, sp, #0x70
    5618:	ret
    561c:	sub	sp, sp, #0x70
    5620:	stp	x29, x30, [sp, #16]
    5624:	stp	x28, x27, [sp, #32]
    5628:	stp	x26, x25, [sp, #48]
    562c:	stp	x24, x23, [sp, #64]
    5630:	stp	x22, x21, [sp, #80]
    5634:	stp	x20, x19, [sp, #96]
    5638:	ldr	x8, [x6]
    563c:	add	x29, sp, #0x10
    5640:	cmp	x8, x7
    5644:	b.cs	56bc <lzma_alone_encoder@@XZ_5.0+0x250>  // b.hs, b.nlast
    5648:	ldr	w8, [x29, #96]
    564c:	mov	x19, x7
    5650:	mov	x20, x6
    5654:	mov	x21, x5
    5658:	stur	w8, [x29, #-4]
    565c:	ldr	w8, [x0, #72]
    5660:	mov	x22, x4
    5664:	mov	x23, x3
    5668:	mov	x24, x2
    566c:	mov	x25, x1
    5670:	mov	x26, x0
    5674:	add	x27, x0, #0x58
    5678:	add	x28, x0, #0x50
    567c:	cbnz	w8, 56e0 <lzma_alone_encoder@@XZ_5.0+0x274>
    5680:	mov	w2, #0xd                   	// #13
    5684:	mov	x0, x27
    5688:	mov	x1, x28
    568c:	mov	x3, x21
    5690:	mov	x4, x20
    5694:	mov	x5, x19
    5698:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    569c:	ldr	x8, [x28]
    56a0:	cmp	x8, #0xd
    56a4:	b.cc	56bc <lzma_alone_encoder@@XZ_5.0+0x250>  // b.lo, b.ul, b.last
    56a8:	mov	w8, #0x1                   	// #1
    56ac:	str	w8, [x26, #72]
    56b0:	ldr	x9, [x20]
    56b4:	cmp	x9, x19
    56b8:	b.cc	567c <lzma_alone_encoder@@XZ_5.0+0x210>  // b.lo, b.ul, b.last
    56bc:	mov	w0, wzr
    56c0:	ldp	x20, x19, [sp, #96]
    56c4:	ldp	x22, x21, [sp, #80]
    56c8:	ldp	x24, x23, [sp, #64]
    56cc:	ldp	x26, x25, [sp, #48]
    56d0:	ldp	x28, x27, [sp, #32]
    56d4:	ldp	x29, x30, [sp, #16]
    56d8:	add	sp, sp, #0x70
    56dc:	ret
    56e0:	cmp	w8, #0x1
    56e4:	b.ne	5734 <lzma_alone_encoder@@XZ_5.0+0x2c8>  // b.any
    56e8:	ldur	w9, [x29, #-4]
    56ec:	ldr	x8, [x26, #24]
    56f0:	ldr	x0, [x26]
    56f4:	mov	x1, x25
    56f8:	str	w9, [x29, #96]
    56fc:	mov	x2, x24
    5700:	mov	x3, x23
    5704:	mov	x4, x22
    5708:	mov	x5, x21
    570c:	mov	x6, x20
    5710:	mov	x7, x19
    5714:	ldp	x20, x19, [sp, #96]
    5718:	ldp	x22, x21, [sp, #80]
    571c:	ldp	x24, x23, [sp, #64]
    5720:	ldp	x26, x25, [sp, #48]
    5724:	ldp	x28, x27, [sp, #32]
    5728:	ldp	x29, x30, [sp, #16]
    572c:	add	sp, sp, #0x70
    5730:	br	x8
    5734:	mov	w0, #0xb                   	// #11
    5738:	b	56c0 <lzma_alone_encoder@@XZ_5.0+0x254>
    573c:	stp	x29, x30, [sp, #-32]!
    5740:	stp	x20, x19, [sp, #16]
    5744:	mov	x29, sp
    5748:	mov	x19, x1
    574c:	mov	x20, x0
    5750:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    5754:	mov	x0, x20
    5758:	mov	x1, x19
    575c:	ldp	x20, x19, [sp, #16]
    5760:	ldp	x29, x30, [sp], #32
    5764:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    5768:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    576c:	movk	x8, #0x7fff, lsl #48
    5770:	add	x9, x8, #0x1
    5774:	cmp	x0, x9
    5778:	b.hi	579c <lzma_alone_encoder@@XZ_5.0+0x330>  // b.pmore
    577c:	mov	w9, #0xffff                	// #65535
    5780:	add	x9, x0, x9
    5784:	lsr	x10, x9, #16
    5788:	lsl	x10, x10, #1
    578c:	add	x9, x10, x9, lsr #16
    5790:	sub	x8, x8, x9
    5794:	cmp	x8, x0
    5798:	b.cs	57a4 <lzma_alone_encoder@@XZ_5.0+0x338>  // b.hs, b.nlast
    579c:	mov	x0, xzr
    57a0:	ret
    57a4:	add	x8, x0, x9
    57a8:	add	x8, x8, #0x60
    57ac:	and	x0, x8, #0xfffffffffffffffc
    57b0:	ret

00000000000057b4 <lzma_block_buffer_bound@@XZ_5.0>:
    57b4:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    57b8:	movk	x8, #0x7fff, lsl #48
    57bc:	add	x9, x8, #0x1
    57c0:	cmp	x0, x9
    57c4:	b.hi	57e8 <lzma_block_buffer_bound@@XZ_5.0+0x34>  // b.pmore
    57c8:	mov	w9, #0xffff                	// #65535
    57cc:	add	x9, x0, x9
    57d0:	lsr	x10, x9, #16
    57d4:	lsl	x10, x10, #1
    57d8:	add	x9, x10, x9, lsr #16
    57dc:	sub	x8, x8, x9
    57e0:	cmp	x8, x0
    57e4:	b.cs	57f0 <lzma_block_buffer_bound@@XZ_5.0+0x3c>  // b.hs, b.nlast
    57e8:	mov	x0, xzr
    57ec:	ret
    57f0:	add	x8, x0, x9
    57f4:	add	x8, x8, #0x60
    57f8:	and	x0, x8, #0xfffffffffffffffc
    57fc:	ret

0000000000005800 <lzma_block_buffer_encode@@XZ_5.0>:
    5800:	mov	w7, #0x1                   	// #1
    5804:	b	5808 <lzma_block_buffer_encode@@XZ_5.0+0x8>
    5808:	sub	sp, sp, #0x120
    580c:	stp	x29, x30, [sp, #192]
    5810:	stp	x28, x27, [sp, #208]
    5814:	stp	x26, x25, [sp, #224]
    5818:	stp	x24, x23, [sp, #240]
    581c:	stp	x22, x21, [sp, #256]
    5820:	stp	x20, x19, [sp, #272]
    5824:	add	x29, sp, #0xc0
    5828:	cbz	x0, 5894 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    582c:	cmp	x2, #0x0
    5830:	cset	w8, eq  // eq = none
    5834:	cmp	x3, #0x0
    5838:	cset	w9, ne  // ne = any
    583c:	mov	x22, x3
    5840:	mov	x23, x2
    5844:	and	w8, w8, w9
    5848:	mov	w26, #0xb                   	// #11
    584c:	tbnz	w8, #0, 5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5850:	mov	x21, x4
    5854:	cbz	x4, 5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5858:	mov	x19, x5
    585c:	cbz	x5, 5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5860:	ldr	x28, [x19]
    5864:	mov	x24, x6
    5868:	cmp	x28, x6
    586c:	b.hi	5894 <lzma_block_buffer_encode@@XZ_5.0+0x94>  // b.pmore
    5870:	ldr	w8, [x0]
    5874:	mov	x20, x0
    5878:	cmp	w8, #0x1
    587c:	b.ls	5888 <lzma_block_buffer_encode@@XZ_5.0+0x88>  // b.plast
    5880:	mov	w26, #0x8                   	// #8
    5884:	b	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5888:	ldr	w26, [x20, #8]
    588c:	cmp	w26, #0xf
    5890:	b.ls	58bc <lzma_block_buffer_encode@@XZ_5.0+0xbc>  // b.plast
    5894:	mov	w26, #0xb                   	// #11
    5898:	mov	w0, w26
    589c:	ldp	x20, x19, [sp, #272]
    58a0:	ldp	x22, x21, [sp, #256]
    58a4:	ldp	x24, x23, [sp, #240]
    58a8:	ldp	x26, x25, [sp, #224]
    58ac:	ldp	x28, x27, [sp, #208]
    58b0:	ldp	x29, x30, [sp, #192]
    58b4:	add	sp, sp, #0x120
    58b8:	ret
    58bc:	mov	w27, w7
    58c0:	mov	x25, x1
    58c4:	tbz	w7, #0, 58d0 <lzma_block_buffer_encode@@XZ_5.0+0xd0>
    58c8:	ldr	x8, [x20, #32]
    58cc:	cbz	x8, 5894 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    58d0:	mov	w0, w26
    58d4:	bl	30a0 <lzma_check_is_supported@plt>
    58d8:	tst	w0, #0xff
    58dc:	b.eq	5944 <lzma_block_buffer_encode@@XZ_5.0+0x144>  // b.none
    58e0:	sub	w8, w24, w28
    58e4:	and	x8, x8, #0x3
    58e8:	mov	w0, w26
    58ec:	sub	x24, x24, x8
    58f0:	bl	3220 <lzma_check_size@plt>
    58f4:	sub	x8, x24, x28
    58f8:	cmp	x8, w0, uxtw
    58fc:	b.ls	594c <lzma_block_buffer_encode@@XZ_5.0+0x14c>  // b.plast
    5900:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5904:	movk	x8, #0x7fff, lsl #48
    5908:	add	x9, x8, #0x1
    590c:	cmp	x22, x9
    5910:	str	x22, [x20, #24]
    5914:	b.hi	5938 <lzma_block_buffer_encode@@XZ_5.0+0x138>  // b.pmore
    5918:	mov	w9, #0xffff                	// #65535
    591c:	add	x9, x22, x9
    5920:	lsr	x10, x9, #16
    5924:	lsl	x10, x10, #1
    5928:	add	x9, x10, x9, lsr #16
    592c:	sub	x8, x8, x9
    5930:	cmp	x8, x22
    5934:	b.cs	5954 <lzma_block_buffer_encode@@XZ_5.0+0x154>  // b.hs, b.nlast
    5938:	str	xzr, [x20, #16]
    593c:	mov	w26, #0x9                   	// #9
    5940:	b	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5944:	mov	w26, #0x3                   	// #3
    5948:	b	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    594c:	mov	w26, #0xa                   	// #10
    5950:	b	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5954:	mov	w10, w0
    5958:	add	x8, x22, x9
    595c:	sub	x28, x24, x10
    5960:	mov	x24, x10
    5964:	add	x8, x8, #0x1
    5968:	str	x8, [x20, #16]
    596c:	tbz	w27, #0, 5a80 <lzma_block_buffer_encode@@XZ_5.0+0x280>
    5970:	mov	x0, x20
    5974:	bl	3120 <lzma_block_header_size@plt>
    5978:	mov	w26, w0
    597c:	cbnz	w0, 5a74 <lzma_block_buffer_encode@@XZ_5.0+0x274>
    5980:	ldr	x27, [x19]
    5984:	ldr	w8, [x20, #4]
    5988:	sub	x9, x28, x27
    598c:	cmp	x9, x8
    5990:	b.ls	5a80 <lzma_block_buffer_encode@@XZ_5.0+0x280>  // b.plast
    5994:	str	x24, [sp, #24]
    5998:	add	x24, x27, x8
    599c:	movi	v0.2d, #0x0
    59a0:	mov	x8, #0xffffffffffffffff    	// #-1
    59a4:	str	x24, [x19]
    59a8:	ldr	x9, [x20, #16]
    59ac:	str	xzr, [sp, #128]
    59b0:	stp	q0, q0, [sp, #96]
    59b4:	stp	q0, q0, [sp, #64]
    59b8:	str	x8, [sp, #72]
    59bc:	ldr	x2, [x20, #32]
    59c0:	add	x0, sp, #0x40
    59c4:	mov	x1, x25
    59c8:	str	x9, [sp, #16]
    59cc:	bl	660c <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    59d0:	mov	w26, w0
    59d4:	cbnz	w0, 5a20 <lzma_block_buffer_encode@@XZ_5.0+0x220>
    59d8:	ldr	x11, [sp, #16]
    59dc:	ldr	x10, [sp, #88]
    59e0:	ldr	x0, [sp, #64]
    59e4:	sub	x8, x28, x24
    59e8:	add	x9, x11, x24
    59ec:	cmp	x8, x11
    59f0:	csel	x7, x9, x28, hi  // hi = pmore
    59f4:	mov	w8, #0x3                   	// #3
    59f8:	add	x3, sp, #0x20
    59fc:	mov	x1, x25
    5a00:	mov	x2, x23
    5a04:	mov	x4, x22
    5a08:	mov	x5, x21
    5a0c:	mov	x6, x19
    5a10:	str	xzr, [sp, #32]
    5a14:	str	w8, [sp]
    5a18:	blr	x10
    5a1c:	mov	w26, w0
    5a20:	add	x0, sp, #0x40
    5a24:	mov	x1, x25
    5a28:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    5a2c:	cbz	w26, 5a68 <lzma_block_buffer_encode@@XZ_5.0+0x268>
    5a30:	ldr	x24, [sp, #24]
    5a34:	cmp	w26, #0x1
    5a38:	b.ne	5a70 <lzma_block_buffer_encode@@XZ_5.0+0x270>  // b.any
    5a3c:	ldr	x8, [x19]
    5a40:	ldr	w9, [x20, #4]
    5a44:	add	x1, x21, x27
    5a48:	mov	x0, x20
    5a4c:	sub	x8, x8, x27
    5a50:	sub	x8, x8, x9
    5a54:	str	x8, [x20, #16]
    5a58:	bl	34f0 <lzma_block_header_encode@plt>
    5a5c:	cbz	w0, 5c44 <lzma_block_buffer_encode@@XZ_5.0+0x444>
    5a60:	mov	w26, #0xb                   	// #11
    5a64:	b	5a70 <lzma_block_buffer_encode@@XZ_5.0+0x270>
    5a68:	ldr	x24, [sp, #24]
    5a6c:	mov	w26, #0xa                   	// #10
    5a70:	str	x27, [x19]
    5a74:	cbz	w26, 5ba8 <lzma_block_buffer_encode@@XZ_5.0+0x3a8>
    5a78:	cmp	w26, #0xa
    5a7c:	b.ne	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>  // b.any
    5a80:	movi	v0.2d, #0x0
    5a84:	mov	w8, #0x1000                	// #4096
    5a88:	mov	w9, #0x21                  	// #33
    5a8c:	add	x10, sp, #0x40
    5a90:	stp	q0, q0, [sp, #64]
    5a94:	str	w8, [sp, #64]
    5a98:	mov	x8, #0xffffffffffffffff    	// #-1
    5a9c:	stp	q0, q0, [sp, #144]
    5aa0:	stp	q0, q0, [sp, #112]
    5aa4:	str	q0, [sp, #96]
    5aa8:	stp	x9, x10, [sp, #32]
    5aac:	str	x8, [sp, #48]
    5ab0:	ldr	x25, [x20, #32]
    5ab4:	add	x8, sp, #0x20
    5ab8:	mov	x0, x20
    5abc:	str	x8, [x20, #32]
    5ac0:	bl	3120 <lzma_block_header_size@plt>
    5ac4:	cbz	w0, 5ad0 <lzma_block_buffer_encode@@XZ_5.0+0x2d0>
    5ac8:	mov	w26, #0xb                   	// #11
    5acc:	b	5af0 <lzma_block_buffer_encode@@XZ_5.0+0x2f0>
    5ad0:	ldr	x8, [x19]
    5ad4:	ldr	w9, [x20, #4]
    5ad8:	ldr	x10, [x20, #16]
    5adc:	sub	x11, x28, x8
    5ae0:	add	x9, x10, x9
    5ae4:	cmp	x11, x9
    5ae8:	b.cs	5af8 <lzma_block_buffer_encode@@XZ_5.0+0x2f8>  // b.hs, b.nlast
    5aec:	mov	w26, #0xa                   	// #10
    5af0:	str	x25, [x20, #32]
    5af4:	b	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5af8:	add	x1, x21, x8
    5afc:	mov	x0, x20
    5b00:	bl	34f0 <lzma_block_header_encode@plt>
    5b04:	str	x25, [x20, #32]
    5b08:	cbnz	w0, 5894 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    5b0c:	ldr	w8, [x20, #4]
    5b10:	ldr	x9, [x19]
    5b14:	add	x8, x9, x8
    5b18:	add	x9, x8, #0x1
    5b1c:	add	x8, x21, x8
    5b20:	str	x9, [x19]
    5b24:	cbz	x22, 5ba4 <lzma_block_buffer_encode@@XZ_5.0+0x3a4>
    5b28:	mov	x26, xzr
    5b2c:	mov	w9, #0x1                   	// #1
    5b30:	mov	w27, #0x10000               	// #65536
    5b34:	strb	w9, [x8]
    5b38:	sub	x8, x22, x26
    5b3c:	ldr	x9, [x19]
    5b40:	cmp	x8, #0x10, lsl #12
    5b44:	csel	x25, x8, x27, cc  // cc = lo, ul, last
    5b48:	sub	x8, x25, #0x1
    5b4c:	lsr	x10, x8, #8
    5b50:	add	x11, x9, #0x1
    5b54:	str	x11, [x19]
    5b58:	strb	w10, [x21, x9]
    5b5c:	ldr	x9, [x19]
    5b60:	add	x1, x23, x26
    5b64:	mov	x2, x25
    5b68:	add	x10, x9, #0x1
    5b6c:	str	x10, [x19]
    5b70:	strb	w8, [x21, x9]
    5b74:	ldr	x8, [x19]
    5b78:	add	x0, x21, x8
    5b7c:	bl	3060 <memcpy@plt>
    5b80:	ldr	x8, [x19]
    5b84:	add	x26, x25, x26
    5b88:	cmp	x26, x22
    5b8c:	add	x8, x8, x25
    5b90:	add	x9, x8, #0x1
    5b94:	add	x8, x21, x8
    5b98:	str	x9, [x19]
    5b9c:	mov	w9, #0x2                   	// #2
    5ba0:	b.cc	5b34 <lzma_block_buffer_encode@@XZ_5.0+0x334>  // b.lo, b.ul, b.last
    5ba4:	strb	wzr, [x8]
    5ba8:	ldr	x8, [x20, #16]
    5bac:	tst	x8, #0x3
    5bb0:	b.eq	5bd4 <lzma_block_buffer_encode@@XZ_5.0+0x3d4>  // b.none
    5bb4:	add	x8, x8, #0x1
    5bb8:	ldr	x9, [x19]
    5bbc:	tst	x8, #0x3
    5bc0:	add	x8, x8, #0x1
    5bc4:	add	x10, x9, #0x1
    5bc8:	str	x10, [x19]
    5bcc:	strb	wzr, [x21, x9]
    5bd0:	b.ne	5bb8 <lzma_block_buffer_encode@@XZ_5.0+0x3b8>  // b.any
    5bd4:	cbz	w24, 5c3c <lzma_block_buffer_encode@@XZ_5.0+0x43c>
    5bd8:	ldr	w1, [x20, #8]
    5bdc:	add	x0, sp, #0x40
    5be0:	bl	b5e0 <lzma_check_size@@XZ_5.0+0x20>
    5be4:	ldr	w1, [x20, #8]
    5be8:	add	x0, sp, #0x40
    5bec:	mov	x2, x23
    5bf0:	mov	x3, x22
    5bf4:	bl	b60c <lzma_check_size@@XZ_5.0+0x4c>
    5bf8:	ldr	w1, [x20, #8]
    5bfc:	add	x0, sp, #0x40
    5c00:	bl	b68c <lzma_check_size@@XZ_5.0+0xcc>
    5c04:	add	x0, x20, #0x28
    5c08:	add	x1, sp, #0x40
    5c0c:	mov	x2, x24
    5c10:	bl	3060 <memcpy@plt>
    5c14:	ldr	x8, [x19]
    5c18:	add	x1, sp, #0x40
    5c1c:	mov	x2, x24
    5c20:	add	x0, x21, x8
    5c24:	bl	3060 <memcpy@plt>
    5c28:	ldr	x8, [x19]
    5c2c:	mov	w26, wzr
    5c30:	add	x8, x8, x24
    5c34:	str	x8, [x19]
    5c38:	b	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5c3c:	mov	w26, wzr
    5c40:	b	5898 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5c44:	mov	w26, wzr
    5c48:	cbnz	w26, 5a78 <lzma_block_buffer_encode@@XZ_5.0+0x278>
    5c4c:	b	5ba8 <lzma_block_buffer_encode@@XZ_5.0+0x3a8>

0000000000005c50 <lzma_block_uncomp_encode@@XZ_5.2>:
    5c50:	mov	x6, x5
    5c54:	mov	x5, x4
    5c58:	mov	x4, x3
    5c5c:	mov	x3, x2
    5c60:	mov	x2, x1
    5c64:	mov	x1, xzr
    5c68:	mov	w7, wzr
    5c6c:	b	5808 <lzma_block_buffer_encode@@XZ_5.0+0x8>
    5c70:	stp	x29, x30, [sp, #-64]!
    5c74:	stp	x22, x21, [sp, #32]
    5c78:	stp	x20, x19, [sp, #48]
    5c7c:	ldr	x8, [x0, #16]
    5c80:	adrp	x22, 5000 <lzma_index_iter_next@@XZ_5.0+0x14c>
    5c84:	add	x22, x22, #0xc70
    5c88:	mov	x19, x2
    5c8c:	mov	x21, x0
    5c90:	cmp	x8, x22
    5c94:	mov	x20, x1
    5c98:	str	x23, [sp, #16]
    5c9c:	mov	x29, sp
    5ca0:	b.eq	5cb0 <lzma_block_uncomp_encode@@XZ_5.2+0x60>  // b.none
    5ca4:	mov	x0, x21
    5ca8:	mov	x1, x20
    5cac:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    5cb0:	str	x22, [x21, #16]
    5cb4:	cbz	x19, 5cd8 <lzma_block_uncomp_encode@@XZ_5.2+0x88>
    5cb8:	ldr	w8, [x19]
    5cbc:	cmp	w8, #0x1
    5cc0:	b.ls	5ccc <lzma_block_uncomp_encode@@XZ_5.2+0x7c>  // b.plast
    5cc4:	mov	w0, #0x8                   	// #8
    5cc8:	b	5cdc <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    5ccc:	ldr	w23, [x19, #8]
    5cd0:	cmp	w23, #0xf
    5cd4:	b.ls	5cf0 <lzma_block_uncomp_encode@@XZ_5.2+0xa0>  // b.plast
    5cd8:	mov	w0, #0xb                   	// #11
    5cdc:	ldp	x20, x19, [sp, #48]
    5ce0:	ldp	x22, x21, [sp, #32]
    5ce4:	ldr	x23, [sp, #16]
    5ce8:	ldp	x29, x30, [sp], #64
    5cec:	ret
    5cf0:	mov	w0, w23
    5cf4:	bl	30a0 <lzma_check_is_supported@plt>
    5cf8:	tst	w0, #0xff
    5cfc:	b.eq	5d98 <lzma_block_uncomp_encode@@XZ_5.2+0x148>  // b.none
    5d00:	ldr	x22, [x21]
    5d04:	cbnz	x22, 5d5c <lzma_block_uncomp_encode@@XZ_5.2+0x10c>
    5d08:	mov	w0, #0xd8                  	// #216
    5d0c:	mov	x1, x20
    5d10:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    5d14:	cbz	x0, 5da0 <lzma_block_uncomp_encode@@XZ_5.2+0x150>
    5d18:	adrp	x8, 5000 <lzma_index_iter_next@@XZ_5.0+0x14c>
    5d1c:	adrp	x9, 5000 <lzma_index_iter_next@@XZ_5.0+0x14c>
    5d20:	add	x8, x8, #0xda8
    5d24:	add	x9, x9, #0xfa8
    5d28:	stp	x8, x9, [x21, #24]
    5d2c:	adrp	x8, 5000 <lzma_index_iter_next@@XZ_5.0+0x14c>
    5d30:	add	x8, x8, #0xfd4
    5d34:	str	x8, [x21, #64]
    5d38:	mov	x8, #0xffffffffffffffff    	// #-1
    5d3c:	movi	v0.2d, #0x0
    5d40:	str	x0, [x21]
    5d44:	stp	xzr, x8, [x0]
    5d48:	stp	q0, q0, [x0, #16]
    5d4c:	str	q0, [x0, #48]
    5d50:	str	xzr, [x0, #64]
    5d54:	ldr	w23, [x19, #8]
    5d58:	mov	x22, x0
    5d5c:	add	x0, x22, #0x70
    5d60:	mov	w1, w23
    5d64:	str	wzr, [x22, #80]
    5d68:	str	x19, [x22, #72]
    5d6c:	stp	xzr, xzr, [x22, #96]
    5d70:	str	xzr, [x22, #88]
    5d74:	bl	b5e0 <lzma_check_size@@XZ_5.0+0x20>
    5d78:	ldr	x2, [x19, #32]
    5d7c:	mov	x0, x22
    5d80:	mov	x1, x20
    5d84:	ldp	x20, x19, [sp, #48]
    5d88:	ldp	x22, x21, [sp, #32]
    5d8c:	ldr	x23, [sp, #16]
    5d90:	ldp	x29, x30, [sp], #64
    5d94:	b	660c <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    5d98:	mov	w0, #0x3                   	// #3
    5d9c:	b	5cdc <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    5da0:	mov	w0, #0x5                   	// #5
    5da4:	b	5cdc <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    5da8:	sub	sp, sp, #0x70
    5dac:	stp	x29, x30, [sp, #16]
    5db0:	stp	x28, x27, [sp, #32]
    5db4:	stp	x26, x25, [sp, #48]
    5db8:	stp	x24, x23, [sp, #64]
    5dbc:	stp	x22, x21, [sp, #80]
    5dc0:	stp	x20, x19, [sp, #96]
    5dc4:	ldr	x8, [x0, #96]
    5dc8:	ldr	x26, [x3]
    5dcc:	mov	x9, #0x7fffffffffffffff    	// #9223372036854775807
    5dd0:	add	x29, sp, #0x10
    5dd4:	sub	x8, x9, x8
    5dd8:	sub	x9, x4, x26
    5ddc:	cmp	x8, x9
    5de0:	b.cs	5dec <lzma_block_uncomp_encode@@XZ_5.2+0x19c>  // b.hs, b.nlast
    5de4:	mov	w24, #0x9                   	// #9
    5de8:	b	5f84 <lzma_block_uncomp_encode@@XZ_5.2+0x334>
    5dec:	ldr	w8, [x0, #80]
    5df0:	mov	x20, x7
    5df4:	mov	x21, x6
    5df8:	mov	x22, x5
    5dfc:	mov	x19, x0
    5e00:	cbz	w8, 5eb4 <lzma_block_uncomp_encode@@XZ_5.2+0x264>
    5e04:	cmp	w8, #0x2
    5e08:	b.eq	5e6c <lzma_block_uncomp_encode@@XZ_5.2+0x21c>  // b.none
    5e0c:	cmp	w8, #0x1
    5e10:	b.ne	5f64 <lzma_block_uncomp_encode@@XZ_5.2+0x314>  // b.any
    5e14:	mov	x25, x19
    5e18:	ldr	x9, [x25, #88]!
    5e1c:	tst	x9, #0x3
    5e20:	b.eq	5e50 <lzma_block_uncomp_encode@@XZ_5.2+0x200>  // b.none
    5e24:	ldr	x8, [x21]
    5e28:	add	x9, x9, #0x1
    5e2c:	cmp	x8, x20
    5e30:	b.cs	5eac <lzma_block_uncomp_encode@@XZ_5.2+0x25c>  // b.hs, b.nlast
    5e34:	strb	wzr, [x22, x8]
    5e38:	add	x8, x8, #0x1
    5e3c:	tst	x9, #0x3
    5e40:	str	x8, [x21]
    5e44:	str	x9, [x25]
    5e48:	add	x9, x9, #0x1
    5e4c:	b.ne	5e2c <lzma_block_uncomp_encode@@XZ_5.2+0x1dc>  // b.any
    5e50:	ldr	x8, [x19, #72]
    5e54:	ldr	w1, [x8, #8]
    5e58:	cbz	w1, 5f80 <lzma_block_uncomp_encode@@XZ_5.2+0x330>
    5e5c:	add	x0, x19, #0x70
    5e60:	bl	b68c <lzma_check_size@@XZ_5.0+0xcc>
    5e64:	mov	w8, #0x2                   	// #2
    5e68:	str	w8, [x19, #80]
    5e6c:	ldr	x8, [x19, #72]
    5e70:	ldr	w0, [x8, #8]
    5e74:	bl	3220 <lzma_check_size@plt>
    5e78:	mov	w23, w0
    5e7c:	add	x24, x19, #0x70
    5e80:	mov	w25, w0
    5e84:	add	x1, x19, #0x68
    5e88:	mov	x0, x24
    5e8c:	mov	x2, x23
    5e90:	mov	x3, x22
    5e94:	mov	x4, x21
    5e98:	mov	x5, x20
    5e9c:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    5ea0:	ldr	x8, [x19, #104]
    5ea4:	cmp	x8, w25, uxtw
    5ea8:	b.cs	5f6c <lzma_block_uncomp_encode@@XZ_5.2+0x31c>  // b.hs, b.nlast
    5eac:	mov	w24, wzr
    5eb0:	b	5f84 <lzma_block_uncomp_encode@@XZ_5.2+0x334>
    5eb4:	ldr	w27, [x29, #96]
    5eb8:	ldr	x8, [x19, #24]
    5ebc:	ldr	x0, [x19]
    5ec0:	ldr	x28, [x21]
    5ec4:	mov	x5, x22
    5ec8:	mov	x6, x21
    5ecc:	mov	x7, x20
    5ed0:	mov	x24, x3
    5ed4:	mov	x23, x2
    5ed8:	str	w27, [sp]
    5edc:	blr	x8
    5ee0:	mov	x25, x19
    5ee4:	ldr	x9, [x21]
    5ee8:	ldr	x10, [x24]
    5eec:	ldr	x8, [x25, #88]!
    5ef0:	mov	x11, #0xfffffffffffffbbc    	// #-1092
    5ef4:	movk	x11, #0x7fff, lsl #48
    5ef8:	sub	x9, x9, x28
    5efc:	sub	x11, x11, x8
    5f00:	cmp	x11, x9
    5f04:	b.cc	5de4 <lzma_block_uncomp_encode@@XZ_5.2+0x194>  // b.lo, b.ul, b.last
    5f08:	sub	x3, x10, x26
    5f0c:	ldr	x10, [x19, #96]
    5f10:	add	x8, x8, x9
    5f14:	ldr	x9, [x19, #72]
    5f18:	str	x8, [x19, #88]
    5f1c:	add	x8, x10, x3
    5f20:	str	x8, [x19, #96]
    5f24:	ldr	w1, [x9, #8]
    5f28:	mov	w24, w0
    5f2c:	add	x0, x19, #0x70
    5f30:	add	x2, x23, x26
    5f34:	bl	b60c <lzma_check_size@@XZ_5.0+0x4c>
    5f38:	cmp	w27, #0x1
    5f3c:	b.eq	5f84 <lzma_block_uncomp_encode@@XZ_5.2+0x334>  // b.none
    5f40:	cmp	w24, #0x1
    5f44:	b.ne	5f84 <lzma_block_uncomp_encode@@XZ_5.2+0x334>  // b.any
    5f48:	ldr	x8, [x19, #72]
    5f4c:	ldur	q0, [x19, #88]
    5f50:	mov	w9, #0x1                   	// #1
    5f54:	str	q0, [x8, #16]
    5f58:	str	w9, [x19, #80]
    5f5c:	fmov	x9, d0
    5f60:	b	5e1c <lzma_block_uncomp_encode@@XZ_5.2+0x1cc>
    5f64:	mov	w24, #0xb                   	// #11
    5f68:	b	5f84 <lzma_block_uncomp_encode@@XZ_5.2+0x334>
    5f6c:	ldr	x8, [x19, #72]
    5f70:	mov	x1, x24
    5f74:	mov	x2, x23
    5f78:	add	x0, x8, #0x28
    5f7c:	bl	3060 <memcpy@plt>
    5f80:	mov	w24, #0x1                   	// #1
    5f84:	mov	w0, w24
    5f88:	ldp	x20, x19, [sp, #96]
    5f8c:	ldp	x22, x21, [sp, #80]
    5f90:	ldp	x24, x23, [sp, #64]
    5f94:	ldp	x26, x25, [sp, #48]
    5f98:	ldp	x28, x27, [sp, #32]
    5f9c:	ldp	x29, x30, [sp, #16]
    5fa0:	add	sp, sp, #0x70
    5fa4:	ret
    5fa8:	stp	x29, x30, [sp, #-32]!
    5fac:	stp	x20, x19, [sp, #16]
    5fb0:	mov	x29, sp
    5fb4:	mov	x19, x1
    5fb8:	mov	x20, x0
    5fbc:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    5fc0:	mov	x0, x20
    5fc4:	mov	x1, x19
    5fc8:	ldp	x20, x19, [sp, #16]
    5fcc:	ldp	x29, x30, [sp], #32
    5fd0:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    5fd4:	ldr	w8, [x0, #80]
    5fd8:	cbz	w8, 5fe4 <lzma_block_uncomp_encode@@XZ_5.2+0x394>
    5fdc:	mov	w0, #0xb                   	// #11
    5fe0:	ret
    5fe4:	mov	x2, x3
    5fe8:	b	38a8 <lzma_version_string@@XZ_5.0+0x228>

0000000000005fec <lzma_block_encoder@@XZ_5.0>:
    5fec:	stp	x29, x30, [sp, #-48]!
    5ff0:	str	x21, [sp, #16]
    5ff4:	stp	x20, x19, [sp, #32]
    5ff8:	mov	x29, sp
    5ffc:	mov	x21, x1
    6000:	mov	x19, x0
    6004:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    6008:	mov	w20, w0
    600c:	cbnz	w0, 6040 <lzma_block_encoder@@XZ_5.0+0x54>
    6010:	ldp	x1, x0, [x19, #48]
    6014:	mov	x2, x21
    6018:	bl	5c70 <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    601c:	mov	w20, w0
    6020:	cbz	w0, 6030 <lzma_block_encoder@@XZ_5.0+0x44>
    6024:	mov	x0, x19
    6028:	bl	32e0 <lzma_end@plt>
    602c:	b	6040 <lzma_block_encoder@@XZ_5.0+0x54>
    6030:	ldr	x8, [x19, #56]
    6034:	mov	w9, #0x1                   	// #1
    6038:	strb	w9, [x8, #88]
    603c:	strb	w9, [x8, #91]
    6040:	mov	w0, w20
    6044:	ldp	x20, x19, [sp, #32]
    6048:	ldr	x21, [sp, #16]
    604c:	ldp	x29, x30, [sp], #48
    6050:	ret

0000000000006054 <lzma_block_header_size@@XZ_5.0>:
    6054:	sub	sp, sp, #0x40
    6058:	stp	x29, x30, [sp, #16]
    605c:	stp	x22, x21, [sp, #32]
    6060:	stp	x20, x19, [sp, #48]
    6064:	ldr	w8, [x0]
    6068:	add	x29, sp, #0x10
    606c:	cmp	w8, #0x1
    6070:	b.ls	607c <lzma_block_header_size@@XZ_5.0+0x28>  // b.plast
    6074:	mov	w0, #0x8                   	// #8
    6078:	b	6134 <lzma_block_header_size@@XZ_5.0+0xe0>
    607c:	ldr	x20, [x0, #16]
    6080:	mov	x19, x0
    6084:	cmn	x20, #0x1
    6088:	b.eq	60ac <lzma_block_header_size@@XZ_5.0+0x58>  // b.none
    608c:	mov	x0, x20
    6090:	bl	3430 <lzma_vli_size@plt>
    6094:	mov	w8, w0
    6098:	mov	w0, #0xb                   	// #11
    609c:	cbz	x20, 6134 <lzma_block_header_size@@XZ_5.0+0xe0>
    60a0:	cbz	w8, 6134 <lzma_block_header_size@@XZ_5.0+0xe0>
    60a4:	add	w20, w8, #0x6
    60a8:	b	60b0 <lzma_block_header_size@@XZ_5.0+0x5c>
    60ac:	mov	w20, #0x6                   	// #6
    60b0:	ldr	x0, [x19, #24]
    60b4:	cmn	x0, #0x1
    60b8:	b.eq	60c8 <lzma_block_header_size@@XZ_5.0+0x74>  // b.none
    60bc:	bl	3430 <lzma_vli_size@plt>
    60c0:	cbz	w0, 6130 <lzma_block_header_size@@XZ_5.0+0xdc>
    60c4:	add	w20, w0, w20
    60c8:	ldr	x8, [x19, #32]
    60cc:	cbz	x8, 6130 <lzma_block_header_size@@XZ_5.0+0xdc>
    60d0:	ldr	x9, [x8]
    60d4:	cmn	x9, #0x1
    60d8:	b.eq	6130 <lzma_block_header_size@@XZ_5.0+0xdc>  // b.none
    60dc:	mov	w21, #0x10                  	// #16
    60e0:	add	x22, x21, #0x10
    60e4:	cmp	x22, #0x60
    60e8:	b.eq	6130 <lzma_block_header_size@@XZ_5.0+0xdc>  // b.none
    60ec:	add	x8, x8, x21
    60f0:	sub	x1, x8, #0x10
    60f4:	sub	x0, x29, #0x4
    60f8:	bl	30b0 <lzma_filter_flags_size@plt>
    60fc:	cbnz	w0, 6134 <lzma_block_header_size@@XZ_5.0+0xe0>
    6100:	ldr	x8, [x19, #32]
    6104:	ldur	w10, [x29, #-4]
    6108:	ldr	x9, [x8, x21]
    610c:	add	w20, w10, w20
    6110:	mov	x21, x22
    6114:	cmn	x9, #0x1
    6118:	b.ne	60e0 <lzma_block_header_size@@XZ_5.0+0x8c>  // b.any
    611c:	add	w8, w20, #0x3
    6120:	mov	w0, wzr
    6124:	and	w8, w8, #0xfffffffc
    6128:	str	w8, [x19, #4]
    612c:	b	6134 <lzma_block_header_size@@XZ_5.0+0xe0>
    6130:	mov	w0, #0xb                   	// #11
    6134:	ldp	x20, x19, [sp, #48]
    6138:	ldp	x22, x21, [sp, #32]
    613c:	ldp	x29, x30, [sp, #16]
    6140:	add	sp, sp, #0x40
    6144:	ret

0000000000006148 <lzma_block_header_encode@@XZ_5.0>:
    6148:	stp	x29, x30, [sp, #-64]!
    614c:	str	x23, [sp, #16]
    6150:	stp	x22, x21, [sp, #32]
    6154:	stp	x20, x19, [sp, #48]
    6158:	mov	x29, sp
    615c:	mov	x19, x1
    6160:	mov	x21, x0
    6164:	bl	3150 <lzma_block_unpadded_size@plt>
    6168:	cbz	x0, 628c <lzma_block_header_encode@@XZ_5.0+0x144>
    616c:	ldr	x8, [x21, #24]
    6170:	cmn	x8, #0x1
    6174:	b.lt	628c <lzma_block_header_encode@@XZ_5.0+0x144>  // b.tstop
    6178:	ldr	w8, [x21, #4]
    617c:	mov	w9, #0x2                   	// #2
    6180:	strb	wzr, [x19, #1]
    6184:	sub	w20, w8, #0x4
    6188:	lsr	w8, w20, #2
    618c:	strb	w8, [x19]
    6190:	str	x9, [x29, #24]
    6194:	ldr	x0, [x21, #16]
    6198:	cmn	x0, #0x1
    619c:	b.eq	61c4 <lzma_block_header_encode@@XZ_5.0+0x7c>  // b.none
    61a0:	add	x3, x29, #0x18
    61a4:	mov	x1, xzr
    61a8:	mov	x2, x19
    61ac:	mov	x4, x20
    61b0:	bl	3400 <lzma_vli_encode@plt>
    61b4:	cbnz	w0, 6290 <lzma_block_header_encode@@XZ_5.0+0x148>
    61b8:	ldrb	w8, [x19, #1]
    61bc:	orr	w8, w8, #0x40
    61c0:	strb	w8, [x19, #1]
    61c4:	ldr	x0, [x21, #24]
    61c8:	cmn	x0, #0x1
    61cc:	b.eq	61f4 <lzma_block_header_encode@@XZ_5.0+0xac>  // b.none
    61d0:	add	x3, x29, #0x18
    61d4:	mov	x1, xzr
    61d8:	mov	x2, x19
    61dc:	mov	x4, x20
    61e0:	bl	3400 <lzma_vli_encode@plt>
    61e4:	cbnz	w0, 6290 <lzma_block_header_encode@@XZ_5.0+0x148>
    61e8:	ldrb	w8, [x19, #1]
    61ec:	orr	w8, w8, #0x80
    61f0:	strb	w8, [x19, #1]
    61f4:	ldr	x8, [x21, #32]
    61f8:	cbz	x8, 628c <lzma_block_header_encode@@XZ_5.0+0x144>
    61fc:	ldr	x9, [x8]
    6200:	cmn	x9, #0x1
    6204:	b.eq	628c <lzma_block_header_encode@@XZ_5.0+0x144>  // b.none
    6208:	mov	x23, xzr
    620c:	mov	x22, #0xffffffffffffffff    	// #-1
    6210:	cmp	x22, #0x3
    6214:	b.eq	628c <lzma_block_header_encode@@XZ_5.0+0x144>  // b.none
    6218:	add	x0, x8, x23
    621c:	add	x2, x29, #0x18
    6220:	mov	x1, x19
    6224:	mov	x3, x20
    6228:	bl	3300 <lzma_filter_flags_encode@plt>
    622c:	cbnz	w0, 6290 <lzma_block_header_encode@@XZ_5.0+0x148>
    6230:	ldr	x8, [x21, #32]
    6234:	add	x22, x22, #0x1
    6238:	add	x9, x8, x23
    623c:	ldr	x9, [x9, #16]
    6240:	add	x23, x23, #0x10
    6244:	cmn	x9, #0x1
    6248:	b.ne	6210 <lzma_block_header_encode@@XZ_5.0+0xc8>  // b.any
    624c:	ldrb	w8, [x19, #1]
    6250:	mov	w1, wzr
    6254:	orr	w8, w8, w22
    6258:	strb	w8, [x19, #1]
    625c:	ldr	x8, [x29, #24]
    6260:	add	x0, x19, x8
    6264:	sub	x2, x20, x8
    6268:	bl	31e0 <memset@plt>
    626c:	mov	x0, x19
    6270:	mov	x1, x20
    6274:	mov	w2, wzr
    6278:	bl	3180 <lzma_crc32@plt>
    627c:	mov	w8, w0
    6280:	mov	w0, wzr
    6284:	str	w8, [x19, x20]
    6288:	b	6290 <lzma_block_header_encode@@XZ_5.0+0x148>
    628c:	mov	w0, #0xb                   	// #11
    6290:	ldp	x20, x19, [sp, #48]
    6294:	ldp	x22, x21, [sp, #32]
    6298:	ldr	x23, [sp, #16]
    629c:	ldp	x29, x30, [sp], #64
    62a0:	ret

00000000000062a4 <lzma_easy_buffer_encode@@XZ_5.0>:
    62a4:	sub	sp, sp, #0x110
    62a8:	stp	x28, x25, [sp, #208]
    62ac:	mov	w25, w1
    62b0:	mov	w1, w0
    62b4:	mov	x0, sp
    62b8:	stp	x29, x30, [sp, #192]
    62bc:	stp	x24, x23, [sp, #224]
    62c0:	stp	x22, x21, [sp, #240]
    62c4:	stp	x20, x19, [sp, #256]
    62c8:	add	x29, sp, #0xc0
    62cc:	mov	x19, x7
    62d0:	mov	x20, x6
    62d4:	mov	x21, x5
    62d8:	mov	x22, x4
    62dc:	mov	x23, x3
    62e0:	mov	x24, x2
    62e4:	bl	3ee4 <lzma_block_total_size@@XZ_5.0+0x24>
    62e8:	tbz	w0, #0, 62f4 <lzma_easy_buffer_encode@@XZ_5.0+0x50>
    62ec:	mov	w0, #0x8                   	// #8
    62f0:	b	6318 <lzma_easy_buffer_encode@@XZ_5.0+0x74>
    62f4:	mov	x0, sp
    62f8:	mov	w1, w25
    62fc:	mov	x2, x24
    6300:	mov	x3, x23
    6304:	mov	x4, x22
    6308:	mov	x5, x21
    630c:	mov	x6, x20
    6310:	mov	x7, x19
    6314:	bl	31a0 <lzma_stream_buffer_encode@plt>
    6318:	ldp	x20, x19, [sp, #256]
    631c:	ldp	x22, x21, [sp, #240]
    6320:	ldp	x24, x23, [sp, #224]
    6324:	ldp	x28, x25, [sp, #208]
    6328:	ldp	x29, x30, [sp, #192]
    632c:	add	sp, sp, #0x110
    6330:	ret

0000000000006334 <lzma_easy_encoder@@XZ_5.0>:
    6334:	sub	sp, sp, #0xe0
    6338:	stp	x20, x19, [sp, #208]
    633c:	mov	x20, x0
    6340:	mov	x0, sp
    6344:	stp	x29, x30, [sp, #192]
    6348:	add	x29, sp, #0xc0
    634c:	mov	w19, w2
    6350:	bl	3ee4 <lzma_block_total_size@@XZ_5.0+0x24>
    6354:	tbz	w0, #0, 6360 <lzma_easy_encoder@@XZ_5.0+0x2c>
    6358:	mov	w0, #0x8                   	// #8
    635c:	b	6370 <lzma_easy_encoder@@XZ_5.0+0x3c>
    6360:	mov	x1, sp
    6364:	mov	x0, x20
    6368:	mov	w2, w19
    636c:	bl	3450 <lzma_stream_encoder@plt>
    6370:	ldp	x20, x19, [sp, #208]
    6374:	ldp	x29, x30, [sp, #192]
    6378:	add	sp, sp, #0xe0
    637c:	ret

0000000000006380 <lzma_easy_encoder_memusage@@XZ_5.0>:
    6380:	sub	sp, sp, #0xd0
    6384:	mov	w1, w0
    6388:	mov	x0, sp
    638c:	stp	x29, x30, [sp, #192]
    6390:	add	x29, sp, #0xc0
    6394:	bl	3ee4 <lzma_block_total_size@@XZ_5.0+0x24>
    6398:	tbz	w0, #0, 63a4 <lzma_easy_encoder_memusage@@XZ_5.0+0x24>
    639c:	mov	w0, #0xffffffff            	// #-1
    63a0:	b	63ac <lzma_easy_encoder_memusage@@XZ_5.0+0x2c>
    63a4:	mov	x0, sp
    63a8:	bl	31d0 <lzma_raw_encoder_memusage@plt>
    63ac:	ldp	x29, x30, [sp, #192]
    63b0:	add	sp, sp, #0xd0
    63b4:	ret

00000000000063b8 <lzma_raw_buffer_encode@@XZ_5.0>:
    63b8:	sub	sp, sp, #0xb0
    63bc:	cmp	x2, #0x0
    63c0:	cset	w8, eq  // eq = none
    63c4:	cmp	x3, #0x0
    63c8:	cset	w9, ne  // ne = any
    63cc:	stp	x26, x25, [sp, #112]
    63d0:	stp	x24, x23, [sp, #128]
    63d4:	mov	x24, x2
    63d8:	and	w8, w8, w9
    63dc:	mov	w25, #0xb                   	// #11
    63e0:	stp	x29, x30, [sp, #96]
    63e4:	stp	x22, x21, [sp, #144]
    63e8:	stp	x20, x19, [sp, #160]
    63ec:	add	x29, sp, #0x60
    63f0:	tbnz	w8, #0, 64b4 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    63f4:	mov	x22, x4
    63f8:	cbz	x4, 64b4 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    63fc:	mov	x19, x5
    6400:	cbz	x5, 64b4 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6404:	ldr	x8, [x19]
    6408:	mov	x21, x6
    640c:	cmp	x8, x6
    6410:	b.ls	641c <lzma_raw_buffer_encode@@XZ_5.0+0x64>  // b.plast
    6414:	mov	w25, #0xb                   	// #11
    6418:	b	64b4 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    641c:	mov	x2, x0
    6420:	movi	v0.2d, #0x0
    6424:	mov	x8, #0xffffffffffffffff    	// #-1
    6428:	add	x0, sp, #0x10
    642c:	mov	x23, x3
    6430:	mov	x20, x1
    6434:	str	xzr, [sp, #80]
    6438:	stp	q0, q0, [sp, #48]
    643c:	stp	q0, q0, [sp, #16]
    6440:	str	x8, [sp, #24]
    6444:	bl	660c <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    6448:	mov	w25, w0
    644c:	cbnz	w0, 64b4 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6450:	ldr	x8, [sp, #40]
    6454:	ldr	x0, [sp, #16]
    6458:	ldr	x26, [x19]
    645c:	mov	w9, #0x3                   	// #3
    6460:	add	x3, sp, #0x8
    6464:	mov	x1, x20
    6468:	mov	x2, x24
    646c:	mov	x4, x23
    6470:	mov	x5, x22
    6474:	mov	x6, x19
    6478:	mov	x7, x21
    647c:	str	xzr, [sp, #8]
    6480:	str	w9, [sp]
    6484:	blr	x8
    6488:	mov	w25, w0
    648c:	add	x0, sp, #0x10
    6490:	mov	x1, x20
    6494:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    6498:	cmp	w25, #0x1
    649c:	b.eq	64b0 <lzma_raw_buffer_encode@@XZ_5.0+0xf8>  // b.none
    64a0:	cbnz	w25, 64a8 <lzma_raw_buffer_encode@@XZ_5.0+0xf0>
    64a4:	mov	w25, #0xa                   	// #10
    64a8:	str	x26, [x19]
    64ac:	b	64b4 <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    64b0:	mov	w25, wzr
    64b4:	mov	w0, w25
    64b8:	ldp	x20, x19, [sp, #160]
    64bc:	ldp	x22, x21, [sp, #144]
    64c0:	ldp	x24, x23, [sp, #128]
    64c4:	ldp	x26, x25, [sp, #112]
    64c8:	ldp	x29, x30, [sp, #96]
    64cc:	add	sp, sp, #0xb0
    64d0:	ret

00000000000064d4 <lzma_filter_encoder_is_supported@@XZ_5.0>:
    64d4:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    64d8:	mov	x8, xzr
    64dc:	add	x9, x9, #0xa00
    64e0:	ldr	x10, [x9, x8]
    64e4:	cmp	x10, x0
    64e8:	b.eq	6500 <lzma_filter_encoder_is_supported@@XZ_5.0+0x2c>  // b.none
    64ec:	add	x8, x8, #0x38
    64f0:	cmp	x8, #0x1f8
    64f4:	b.ne	64e0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xc>  // b.any
    64f8:	mov	w0, wzr
    64fc:	ret
    6500:	mov	w0, #0x1                   	// #1
    6504:	ret
    6508:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    650c:	mov	x8, xzr
    6510:	add	x9, x9, #0xa00
    6514:	ldr	x10, [x9, x8]
    6518:	cmp	x10, x0
    651c:	b.eq	6534 <lzma_filter_encoder_is_supported@@XZ_5.0+0x60>  // b.none
    6520:	add	x8, x8, #0x38
    6524:	cmp	x8, #0x1f8
    6528:	b.ne	6514 <lzma_filter_encoder_is_supported@@XZ_5.0+0x40>  // b.any
    652c:	mov	x0, xzr
    6530:	ret
    6534:	add	x0, x9, x8
    6538:	ret

000000000000653c <lzma_filters_update@@XZ_5.0>:
    653c:	sub	sp, sp, #0x70
    6540:	stp	x29, x30, [sp, #80]
    6544:	stp	x20, x19, [sp, #96]
    6548:	ldr	x8, [x0, #56]
    654c:	add	x29, sp, #0x50
    6550:	ldr	x8, [x8, #64]
    6554:	cbz	x8, 65dc <lzma_filters_update@@XZ_5.0+0xa0>
    6558:	mov	x20, x0
    655c:	adrp	x0, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    6560:	add	x0, x0, #0x508
    6564:	mov	x19, x1
    6568:	bl	42ac <lzma_filters_copy@@XZ_5.0+0x37c>
    656c:	cmn	x0, #0x1
    6570:	b.eq	65e4 <lzma_filters_update@@XZ_5.0+0xa8>  // b.none
    6574:	mov	x9, xzr
    6578:	mov	x8, xzr
    657c:	add	x10, x19, x8
    6580:	ldr	x10, [x10, #16]
    6584:	add	x8, x8, #0x10
    6588:	add	x9, x9, #0x1
    658c:	cmn	x10, #0x1
    6590:	b.ne	657c <lzma_filters_update@@XZ_5.0+0x40>  // b.any
    6594:	mov	x10, sp
    6598:	cbz	x9, 65b8 <lzma_filters_update@@XZ_5.0+0x7c>
    659c:	add	x11, x10, x8
    65a0:	sub	x11, x11, #0x10
    65a4:	mov	x12, x19
    65a8:	ldr	q0, [x12], #16
    65ac:	sub	x9, x9, #0x1
    65b0:	str	q0, [x11], #-16
    65b4:	cbnz	x9, 65a8 <lzma_filters_update@@XZ_5.0+0x6c>
    65b8:	mov	x9, #0xffffffffffffffff    	// #-1
    65bc:	str	x9, [x10, x8]
    65c0:	ldp	x1, x8, [x20, #48]
    65c4:	mov	x3, sp
    65c8:	mov	x2, x19
    65cc:	ldr	x9, [x8, #64]
    65d0:	ldr	x0, [x8]
    65d4:	blr	x9
    65d8:	b	65e8 <lzma_filters_update@@XZ_5.0+0xac>
    65dc:	mov	w0, #0xb                   	// #11
    65e0:	b	65e8 <lzma_filters_update@@XZ_5.0+0xac>
    65e4:	mov	w0, #0x8                   	// #8
    65e8:	ldp	x20, x19, [sp, #96]
    65ec:	ldp	x29, x30, [sp, #80]
    65f0:	add	sp, sp, #0x70
    65f4:	ret

00000000000065f8 <lzma_raw_encoder_memusage@@XZ_5.0>:
    65f8:	adrp	x8, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    65fc:	add	x8, x8, #0x508
    6600:	mov	x1, x0
    6604:	mov	x0, x8
    6608:	b	42ac <lzma_filters_copy@@XZ_5.0+0x37c>
    660c:	adrp	x3, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    6610:	add	x3, x3, #0x508
    6614:	mov	w4, #0x1                   	// #1
    6618:	b	40a8 <lzma_filters_copy@@XZ_5.0+0x178>

000000000000661c <lzma_raw_encoder@@XZ_5.0>:
    661c:	stp	x29, x30, [sp, #-48]!
    6620:	stp	x22, x21, [sp, #16]
    6624:	stp	x20, x19, [sp, #32]
    6628:	mov	x29, sp
    662c:	mov	x21, x1
    6630:	mov	x19, x0
    6634:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    6638:	mov	w20, w0
    663c:	cbnz	w0, 6680 <lzma_raw_encoder@@XZ_5.0+0x64>
    6640:	ldp	x1, x0, [x19, #48]
    6644:	adrp	x3, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    6648:	add	x3, x3, #0x508
    664c:	mov	w4, #0x1                   	// #1
    6650:	mov	x2, x21
    6654:	mov	w22, #0x1                   	// #1
    6658:	bl	40a8 <lzma_filters_copy@@XZ_5.0+0x178>
    665c:	mov	w20, w0
    6660:	cbz	w0, 6670 <lzma_raw_encoder@@XZ_5.0+0x54>
    6664:	mov	x0, x19
    6668:	bl	32e0 <lzma_end@plt>
    666c:	b	6680 <lzma_raw_encoder@@XZ_5.0+0x64>
    6670:	ldr	x8, [x19, #56]
    6674:	mov	w9, #0x101                 	// #257
    6678:	strh	w9, [x8, #88]
    667c:	strb	w22, [x8, #91]
    6680:	mov	w0, w20
    6684:	ldp	x20, x19, [sp, #32]
    6688:	ldp	x22, x21, [sp, #16]
    668c:	ldp	x29, x30, [sp], #48
    6690:	ret
    6694:	stp	x29, x30, [sp, #-48]!
    6698:	stp	x22, x21, [sp, #16]
    669c:	stp	x20, x19, [sp, #32]
    66a0:	ldr	x8, [x0]
    66a4:	mov	x29, sp
    66a8:	cmn	x8, #0x1
    66ac:	b.eq	6710 <lzma_raw_encoder@@XZ_5.0+0xf4>  // b.none
    66b0:	adrp	x22, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    66b4:	mov	x20, x0
    66b8:	mov	x19, xzr
    66bc:	mov	x21, xzr
    66c0:	add	x22, x22, #0xa00
    66c4:	mov	x9, xzr
    66c8:	ldr	x10, [x22, x9]
    66cc:	add	x9, x9, #0x38
    66d0:	cmp	x10, x8
    66d4:	b.ne	66c8 <lzma_raw_encoder@@XZ_5.0+0xac>  // b.any
    66d8:	cmp	x9, #0x70
    66dc:	b.ne	66f8 <lzma_raw_encoder@@XZ_5.0+0xdc>  // b.any
    66e0:	add	x8, x20, x21, lsl #4
    66e4:	ldr	x0, [x8, #8]
    66e8:	bl	14fb8 <lzma_mode_is_supported@@XZ_5.0+0x5ae8>
    66ec:	cmp	x0, x19
    66f0:	csel	x19, x0, x19, hi  // hi = pmore
    66f4:	cbz	x0, 6710 <lzma_raw_encoder@@XZ_5.0+0xf4>
    66f8:	add	x21, x21, #0x1
    66fc:	lsl	x8, x21, #4
    6700:	ldr	x8, [x20, x8]
    6704:	cmn	x8, #0x1
    6708:	b.ne	66c4 <lzma_raw_encoder@@XZ_5.0+0xa8>  // b.any
    670c:	b	6714 <lzma_raw_encoder@@XZ_5.0+0xf8>
    6710:	mov	x19, xzr
    6714:	mov	x0, x19
    6718:	ldp	x20, x19, [sp, #32]
    671c:	ldp	x22, x21, [sp, #16]
    6720:	ldp	x29, x30, [sp], #48
    6724:	ret

0000000000006728 <lzma_properties_size@@XZ_5.0>:
    6728:	ldr	x8, [x1]
    672c:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    6730:	add	x9, x9, #0xa28
    6734:	mov	x10, #0xfffffffffffffffe    	// #-2
    6738:	ldur	x11, [x9, #-40]
    673c:	cmp	x11, x8
    6740:	b.eq	6768 <lzma_properties_size@@XZ_5.0+0x40>  // b.none
    6744:	add	x10, x10, #0x1
    6748:	cmp	x10, #0x7
    674c:	add	x9, x9, #0x38
    6750:	b.ne	6738 <lzma_properties_size@@XZ_5.0+0x10>  // b.any
    6754:	cmp	x8, #0x0
    6758:	mov	w8, #0xb                   	// #11
    675c:	mov	w9, #0x8                   	// #8
    6760:	csel	w8, w9, w8, ge  // ge = tcont
    6764:	b	677c <lzma_properties_size@@XZ_5.0+0x54>
    6768:	cmp	x10, #0x6
    676c:	b.cc	6784 <lzma_properties_size@@XZ_5.0+0x5c>  // b.lo, b.ul, b.last
    6770:	ldr	w9, [x9]
    6774:	mov	w8, wzr
    6778:	str	w9, [x0]
    677c:	mov	w0, w8
    6780:	ret
    6784:	ldur	x2, [x9, #-8]
    6788:	ldr	x1, [x1, #8]
    678c:	br	x2

0000000000006790 <lzma_properties_encode@@XZ_5.0>:
    6790:	ldr	x9, [x0]
    6794:	adrp	x10, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    6798:	mov	x8, xzr
    679c:	add	x10, x10, #0xa00
    67a0:	ldr	x11, [x10, x8]
    67a4:	cmp	x11, x9
    67a8:	b.eq	67c0 <lzma_properties_encode@@XZ_5.0+0x30>  // b.none
    67ac:	add	x8, x8, #0x38
    67b0:	cmp	x8, #0x1f8
    67b4:	b.ne	67a0 <lzma_properties_encode@@XZ_5.0+0x10>  // b.any
    67b8:	mov	w0, #0xb                   	// #11
    67bc:	ret
    67c0:	add	x8, x10, x8
    67c4:	ldr	x2, [x8, #48]
    67c8:	ldr	x0, [x0, #8]
    67cc:	br	x2

00000000000067d0 <lzma_filter_flags_size@@XZ_5.0>:
    67d0:	stp	x29, x30, [sp, #-48]!
    67d4:	stp	x20, x19, [sp, #32]
    67d8:	ldr	x8, [x1]
    67dc:	str	x21, [sp, #16]
    67e0:	mov	x29, sp
    67e4:	lsr	x8, x8, #62
    67e8:	cbz	x8, 67f4 <lzma_filter_flags_size@@XZ_5.0+0x24>
    67ec:	mov	w0, #0xb                   	// #11
    67f0:	b	6830 <lzma_filter_flags_size@@XZ_5.0+0x60>
    67f4:	mov	x20, x1
    67f8:	mov	x19, x0
    67fc:	bl	3320 <lzma_properties_size@plt>
    6800:	cbnz	w0, 6830 <lzma_filter_flags_size@@XZ_5.0+0x60>
    6804:	ldr	x0, [x20]
    6808:	bl	3430 <lzma_vli_size@plt>
    680c:	ldr	w20, [x19]
    6810:	mov	w21, w0
    6814:	mov	x0, x20
    6818:	bl	3430 <lzma_vli_size@plt>
    681c:	mov	w8, w0
    6820:	add	w9, w20, w21
    6824:	mov	w0, wzr
    6828:	add	w8, w9, w8
    682c:	str	w8, [x19]
    6830:	ldp	x20, x19, [sp, #32]
    6834:	ldr	x21, [sp, #16]
    6838:	ldp	x29, x30, [sp], #48
    683c:	ret

0000000000006840 <lzma_filter_flags_encode@@XZ_5.0>:
    6840:	sub	sp, sp, #0x40
    6844:	stp	x29, x30, [sp, #16]
    6848:	stp	x22, x21, [sp, #32]
    684c:	stp	x20, x19, [sp, #48]
    6850:	mov	x20, x0
    6854:	ldr	x0, [x0]
    6858:	add	x29, sp, #0x10
    685c:	lsr	x8, x0, #62
    6860:	cbz	x8, 686c <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    6864:	mov	w0, #0xb                   	// #11
    6868:	b	68bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    686c:	mov	x21, x3
    6870:	mov	x19, x2
    6874:	mov	x22, x1
    6878:	mov	x1, xzr
    687c:	mov	x2, x22
    6880:	mov	x3, x19
    6884:	mov	x4, x21
    6888:	bl	3400 <lzma_vli_encode@plt>
    688c:	cbnz	w0, 68bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    6890:	sub	x0, x29, #0x4
    6894:	mov	x1, x20
    6898:	bl	3320 <lzma_properties_size@plt>
    689c:	cbnz	w0, 68bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    68a0:	ldur	w0, [x29, #-4]
    68a4:	mov	x1, xzr
    68a8:	mov	x2, x22
    68ac:	mov	x3, x19
    68b0:	mov	x4, x21
    68b4:	bl	3400 <lzma_vli_encode@plt>
    68b8:	cbz	w0, 68d0 <lzma_filter_flags_encode@@XZ_5.0+0x90>
    68bc:	ldp	x20, x19, [sp, #48]
    68c0:	ldp	x22, x21, [sp, #32]
    68c4:	ldp	x29, x30, [sp, #16]
    68c8:	add	sp, sp, #0x40
    68cc:	ret
    68d0:	ldr	x8, [x19]
    68d4:	ldur	w9, [x29, #-4]
    68d8:	sub	x10, x21, x8
    68dc:	cmp	x10, x9
    68e0:	b.cc	6864 <lzma_filter_flags_encode@@XZ_5.0+0x24>  // b.lo, b.ul, b.last
    68e4:	add	x1, x22, x8
    68e8:	mov	x0, x20
    68ec:	bl	33b0 <lzma_properties_encode@plt>
    68f0:	cbnz	w0, 68bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    68f4:	ldur	w8, [x29, #-4]
    68f8:	ldr	x9, [x19]
    68fc:	add	x8, x9, x8
    6900:	str	x8, [x19]
    6904:	b	68bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    6908:	stp	x29, x30, [sp, #-48]!
    690c:	stp	x22, x21, [sp, #16]
    6910:	stp	x20, x19, [sp, #32]
    6914:	ldr	x8, [x0, #16]
    6918:	adrp	x21, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    691c:	add	x21, x21, #0x908
    6920:	mov	x19, x2
    6924:	mov	x20, x0
    6928:	cmp	x8, x21
    692c:	mov	x22, x1
    6930:	mov	x29, sp
    6934:	b.eq	6944 <lzma_filter_flags_encode@@XZ_5.0+0x104>  // b.none
    6938:	mov	x0, x20
    693c:	mov	x1, x22
    6940:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    6944:	str	x21, [x20, #16]
    6948:	cbz	x19, 69a4 <lzma_filter_flags_encode@@XZ_5.0+0x164>
    694c:	ldr	x21, [x20]
    6950:	cbnz	x21, 6980 <lzma_filter_flags_encode@@XZ_5.0+0x140>
    6954:	mov	w0, #0x150                 	// #336
    6958:	mov	x1, x22
    695c:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    6960:	str	x0, [x20]
    6964:	cbz	x0, 69ac <lzma_filter_flags_encode@@XZ_5.0+0x16c>
    6968:	adrp	x8, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    696c:	adrp	x9, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    6970:	mov	x21, x0
    6974:	add	x8, x8, #0x9c0
    6978:	add	x9, x9, #0xbec
    697c:	stp	x8, x9, [x20, #24]
    6980:	add	x0, x21, #0x10
    6984:	mov	x1, x19
    6988:	bl	3460 <lzma_index_iter_init@plt>
    698c:	mov	w0, wzr
    6990:	str	wzr, [x21]
    6994:	str	x19, [x21, #8]
    6998:	str	xzr, [x21, #320]
    699c:	str	wzr, [x21, #328]
    69a0:	b	69b0 <lzma_filter_flags_encode@@XZ_5.0+0x170>
    69a4:	mov	w0, #0xb                   	// #11
    69a8:	b	69b0 <lzma_filter_flags_encode@@XZ_5.0+0x170>
    69ac:	mov	w0, #0x5                   	// #5
    69b0:	ldp	x20, x19, [sp, #32]
    69b4:	ldp	x22, x21, [sp, #16]
    69b8:	ldp	x29, x30, [sp], #48
    69bc:	ret
    69c0:	stp	x29, x30, [sp, #-96]!
    69c4:	stp	x26, x25, [sp, #32]
    69c8:	ldr	x26, [x6]
    69cc:	stp	x20, x19, [sp, #80]
    69d0:	mov	x20, x5
    69d4:	mov	x19, x0
    69d8:	cmp	x26, x7
    69dc:	stp	x28, x27, [sp, #16]
    69e0:	stp	x24, x23, [sp, #48]
    69e4:	stp	x22, x21, [sp, #64]
    69e8:	mov	x29, sp
    69ec:	b.cs	6b3c <lzma_filter_flags_encode@@XZ_5.0+0x2fc>  // b.hs, b.nlast
    69f0:	mov	x23, x19
    69f4:	ldr	w8, [x23], #16
    69f8:	adrp	x27, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    69fc:	mov	x22, x7
    6a00:	mov	x21, x6
    6a04:	add	x24, x19, #0x140
    6a08:	add	x27, x27, #0xa20
    6a0c:	mov	w28, #0x2                   	// #2
    6a10:	mov	w9, w8
    6a14:	mov	x25, x26
    6a18:	cmp	w9, #0x6
    6a1c:	b.hi	6b84 <lzma_filter_flags_encode@@XZ_5.0+0x344>  // b.pmore
    6a20:	mov	w9, w9
    6a24:	adr	x10, 6a34 <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    6a28:	ldrb	w11, [x27, x9]
    6a2c:	add	x10, x10, x11, lsl #2
    6a30:	br	x10
    6a34:	cmp	w8, #0x2
    6a38:	b.eq	6af0 <lzma_filter_flags_encode@@XZ_5.0+0x2b0>  // b.none
    6a3c:	mov	w8, #0xb8                  	// #184
    6a40:	b	6af4 <lzma_filter_flags_encode@@XZ_5.0+0x2b4>
    6a44:	add	x9, x25, #0x1
    6a48:	mov	w8, #0x1                   	// #1
    6a4c:	str	x9, [x21]
    6a50:	mov	w9, #0x1                   	// #1
    6a54:	strb	wzr, [x20, x25]
    6a58:	str	w8, [x19]
    6a5c:	b	6b28 <lzma_filter_flags_encode@@XZ_5.0+0x2e8>
    6a60:	ldr	x0, [x19, #8]
    6a64:	bl	3490 <lzma_index_block_count@plt>
    6a68:	mov	x1, x24
    6a6c:	mov	x2, x20
    6a70:	mov	x3, x21
    6a74:	mov	x4, x22
    6a78:	bl	3400 <lzma_vli_encode@plt>
    6a7c:	cmp	w0, #0x1
    6a80:	b.ne	6b48 <lzma_filter_flags_encode@@XZ_5.0+0x308>  // b.any
    6a84:	mov	w8, #0x4                   	// #4
    6a88:	str	xzr, [x19, #320]
    6a8c:	str	w8, [x19]
    6a90:	mov	w9, #0x4                   	// #4
    6a94:	b	6b28 <lzma_filter_flags_encode@@XZ_5.0+0x2e8>
    6a98:	mov	w1, #0x2                   	// #2
    6a9c:	mov	x0, x23
    6aa0:	bl	3410 <lzma_index_iter_next@plt>
    6aa4:	tst	w0, #0xff
    6aa8:	b.eq	6aec <lzma_filter_flags_encode@@XZ_5.0+0x2ac>  // b.none
    6aac:	ldr	x0, [x19, #8]
    6ab0:	bl	4728 <lzma_index_checks@@XZ_5.0+0x28>
    6ab4:	mov	w9, w0
    6ab8:	mov	w8, #0x5                   	// #5
    6abc:	str	x9, [x19, #320]
    6ac0:	str	w8, [x19]
    6ac4:	b	6ae4 <lzma_filter_flags_encode@@XZ_5.0+0x2a4>
    6ac8:	ldr	x9, [x24]
    6acc:	cbz	x9, 6b8c <lzma_filter_flags_encode@@XZ_5.0+0x34c>
    6ad0:	sub	x9, x9, #0x1
    6ad4:	add	x10, x25, #0x1
    6ad8:	str	x9, [x24]
    6adc:	str	x10, [x21]
    6ae0:	strb	wzr, [x20, x25]
    6ae4:	mov	w9, #0x5                   	// #5
    6ae8:	b	6b28 <lzma_filter_flags_encode@@XZ_5.0+0x2e8>
    6aec:	str	w28, [x19]
    6af0:	mov	w8, #0xc0                  	// #192
    6af4:	ldr	x0, [x19, x8]
    6af8:	mov	x1, x24
    6afc:	mov	x2, x20
    6b00:	mov	x3, x21
    6b04:	mov	x4, x22
    6b08:	bl	3400 <lzma_vli_encode@plt>
    6b0c:	cmp	w0, #0x1
    6b10:	b.ne	6b48 <lzma_filter_flags_encode@@XZ_5.0+0x308>  // b.any
    6b14:	ldr	w8, [x19]
    6b18:	str	xzr, [x19, #320]
    6b1c:	add	w8, w8, #0x1
    6b20:	str	w8, [x19]
    6b24:	mov	w9, w8
    6b28:	ldr	x25, [x21]
    6b2c:	cmp	x25, x22
    6b30:	b.cc	6a18 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>  // b.lo, b.ul, b.last
    6b34:	mov	w25, wzr
    6b38:	b	6b4c <lzma_filter_flags_encode@@XZ_5.0+0x30c>
    6b3c:	mov	w25, wzr
    6b40:	mov	x8, x26
    6b44:	b	6b50 <lzma_filter_flags_encode@@XZ_5.0+0x310>
    6b48:	mov	w25, w0
    6b4c:	ldr	x8, [x21]
    6b50:	ldr	w2, [x19, #328]
    6b54:	add	x0, x20, x26
    6b58:	sub	x1, x8, x26
    6b5c:	bl	3180 <lzma_crc32@plt>
    6b60:	str	w0, [x19, #328]
    6b64:	mov	w0, w25
    6b68:	ldp	x20, x19, [sp, #80]
    6b6c:	ldp	x22, x21, [sp, #64]
    6b70:	ldp	x24, x23, [sp, #48]
    6b74:	ldp	x26, x25, [sp, #32]
    6b78:	ldp	x28, x27, [sp, #16]
    6b7c:	ldp	x29, x30, [sp], #96
    6b80:	ret
    6b84:	mov	w25, #0xb                   	// #11
    6b88:	b	6b64 <lzma_filter_flags_encode@@XZ_5.0+0x324>
    6b8c:	ldr	w2, [x19, #328]
    6b90:	add	x0, x20, x26
    6b94:	sub	x1, x25, x26
    6b98:	bl	3180 <lzma_crc32@plt>
    6b9c:	mov	w8, #0x6                   	// #6
    6ba0:	str	w0, [x19, #328]
    6ba4:	str	w8, [x19]
    6ba8:	cmp	x22, x25
    6bac:	b.eq	6be4 <lzma_filter_flags_encode@@XZ_5.0+0x3a4>  // b.none
    6bb0:	ldr	x8, [x19, #320]
    6bb4:	ldr	w9, [x19, #328]
    6bb8:	lsl	w10, w8, #3
    6bbc:	add	x8, x8, #0x1
    6bc0:	lsr	w9, w9, w10
    6bc4:	cmp	x8, #0x4
    6bc8:	strb	w9, [x20, x25]
    6bcc:	add	x25, x25, #0x1
    6bd0:	str	x25, [x21]
    6bd4:	str	x8, [x19, #320]
    6bd8:	b.cc	6ba8 <lzma_filter_flags_encode@@XZ_5.0+0x368>  // b.lo, b.ul, b.last
    6bdc:	mov	w25, #0x1                   	// #1
    6be0:	b	6b64 <lzma_filter_flags_encode@@XZ_5.0+0x324>
    6be4:	mov	w25, wzr
    6be8:	b	6b64 <lzma_filter_flags_encode@@XZ_5.0+0x324>
    6bec:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>

0000000000006bf0 <lzma_index_encoder@@XZ_5.0>:
    6bf0:	stp	x29, x30, [sp, #-48]!
    6bf4:	str	x21, [sp, #16]
    6bf8:	stp	x20, x19, [sp, #32]
    6bfc:	mov	x29, sp
    6c00:	mov	x21, x1
    6c04:	mov	x19, x0
    6c08:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    6c0c:	mov	w20, w0
    6c10:	cbnz	w0, 6c44 <lzma_index_encoder@@XZ_5.0+0x54>
    6c14:	ldp	x1, x0, [x19, #48]
    6c18:	mov	x2, x21
    6c1c:	bl	6908 <lzma_filter_flags_encode@@XZ_5.0+0xc8>
    6c20:	mov	w20, w0
    6c24:	cbz	w0, 6c34 <lzma_index_encoder@@XZ_5.0+0x44>
    6c28:	mov	x0, x19
    6c2c:	bl	32e0 <lzma_end@plt>
    6c30:	b	6c44 <lzma_index_encoder@@XZ_5.0+0x54>
    6c34:	ldr	x8, [x19, #56]
    6c38:	mov	w9, #0x1                   	// #1
    6c3c:	strb	w9, [x8, #88]
    6c40:	strb	w9, [x8, #91]
    6c44:	mov	w0, w20
    6c48:	ldp	x20, x19, [sp, #32]
    6c4c:	ldr	x21, [sp, #16]
    6c50:	ldp	x29, x30, [sp], #48
    6c54:	ret

0000000000006c58 <lzma_index_buffer_encode@@XZ_5.0>:
    6c58:	sub	sp, sp, #0x1a0
    6c5c:	stp	x22, x21, [sp, #384]
    6c60:	mov	x22, x0
    6c64:	mov	w0, #0xb                   	// #11
    6c68:	stp	x29, x30, [sp, #352]
    6c6c:	stp	x28, x23, [sp, #368]
    6c70:	stp	x20, x19, [sp, #400]
    6c74:	add	x29, sp, #0x160
    6c78:	cbz	x22, 6d18 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    6c7c:	mov	x21, x1
    6c80:	cbz	x1, 6d18 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    6c84:	mov	x19, x2
    6c88:	cbz	x2, 6d18 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    6c8c:	ldr	x8, [x19]
    6c90:	mov	x20, x3
    6c94:	cmp	x8, x3
    6c98:	b.hi	6d14 <lzma_index_buffer_encode@@XZ_5.0+0xbc>  // b.pmore
    6c9c:	mov	x0, x22
    6ca0:	sub	x23, x20, x8
    6ca4:	bl	34c0 <lzma_index_size@plt>
    6ca8:	cmp	x23, x0
    6cac:	b.cs	6cb8 <lzma_index_buffer_encode@@XZ_5.0+0x60>  // b.hs, b.nlast
    6cb0:	mov	w0, #0xa                   	// #10
    6cb4:	b	6d18 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    6cb8:	add	x8, sp, #0x10
    6cbc:	add	x0, x8, #0x10
    6cc0:	mov	x1, x22
    6cc4:	bl	3460 <lzma_index_iter_init@plt>
    6cc8:	str	wzr, [sp, #16]
    6ccc:	str	x22, [sp, #24]
    6cd0:	str	xzr, [sp, #336]
    6cd4:	str	wzr, [sp, #344]
    6cd8:	ldr	x22, [x19]
    6cdc:	add	x0, sp, #0x10
    6ce0:	mov	x1, xzr
    6ce4:	mov	x2, xzr
    6ce8:	mov	x3, xzr
    6cec:	mov	x4, xzr
    6cf0:	mov	x5, x21
    6cf4:	mov	x6, x19
    6cf8:	mov	x7, x20
    6cfc:	str	wzr, [sp]
    6d00:	bl	69c0 <lzma_filter_flags_encode@@XZ_5.0+0x180>
    6d04:	cmp	w0, #0x1
    6d08:	mov	w0, wzr
    6d0c:	b.eq	6d18 <lzma_index_buffer_encode@@XZ_5.0+0xc0>  // b.none
    6d10:	str	x22, [x19]
    6d14:	mov	w0, #0xb                   	// #11
    6d18:	ldp	x20, x19, [sp, #400]
    6d1c:	ldp	x22, x21, [sp, #384]
    6d20:	ldp	x28, x23, [sp, #368]
    6d24:	ldp	x29, x30, [sp, #352]
    6d28:	add	sp, sp, #0x1a0
    6d2c:	ret

0000000000006d30 <lzma_stream_buffer_bound@@XZ_5.0>:
    6d30:	stp	x29, x30, [sp, #-16]!
    6d34:	mov	x29, sp
    6d38:	bl	30e0 <lzma_block_buffer_bound@plt>
    6d3c:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    6d40:	sub	x8, x8, x0
    6d44:	cmp	x8, #0x30
    6d48:	ccmp	x0, #0x0, #0x4, cs  // cs = hs, nlast
    6d4c:	add	x8, x0, #0x30
    6d50:	csel	x0, xzr, x8, eq  // eq = none
    6d54:	ldp	x29, x30, [sp], #16
    6d58:	ret

0000000000006d5c <lzma_stream_buffer_encode@@XZ_5.0>:
    6d5c:	sub	sp, sp, #0x170
    6d60:	stp	x24, x23, [sp, #320]
    6d64:	mov	w23, #0xb                   	// #11
    6d68:	stp	x29, x30, [sp, #272]
    6d6c:	stp	x28, x27, [sp, #288]
    6d70:	stp	x26, x25, [sp, #304]
    6d74:	stp	x22, x21, [sp, #336]
    6d78:	stp	x20, x19, [sp, #352]
    6d7c:	add	x29, sp, #0x110
    6d80:	cbz	x0, 6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6d84:	mov	w26, w1
    6d88:	cmp	w1, #0xf
    6d8c:	b.hi	6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>  // b.pmore
    6d90:	cmp	x3, #0x0
    6d94:	cset	w8, eq  // eq = none
    6d98:	cmp	x4, #0x0
    6d9c:	cset	w9, ne  // ne = any
    6da0:	mov	x22, x4
    6da4:	mov	x24, x3
    6da8:	and	w8, w8, w9
    6dac:	mov	w23, #0xb                   	// #11
    6db0:	tbnz	w8, #0, 6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6db4:	mov	x20, x5
    6db8:	cbz	x5, 6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6dbc:	mov	x19, x6
    6dc0:	cbz	x6, 6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6dc4:	ldr	x23, [x19]
    6dc8:	mov	x27, x7
    6dcc:	cmp	x23, x7
    6dd0:	b.ls	6ddc <lzma_stream_buffer_encode@@XZ_5.0+0x80>  // b.plast
    6dd4:	mov	w23, #0xb                   	// #11
    6dd8:	b	6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6ddc:	mov	x25, x0
    6de0:	mov	w0, w26
    6de4:	mov	x21, x2
    6de8:	bl	30a0 <lzma_check_is_supported@plt>
    6dec:	tst	w0, #0xff
    6df0:	b.eq	6e0c <lzma_stream_buffer_encode@@XZ_5.0+0xb0>  // b.none
    6df4:	sub	x8, x27, x23
    6df8:	cmp	x8, #0x19
    6dfc:	stur	x23, [x29, #-8]
    6e00:	b.cs	6e34 <lzma_stream_buffer_encode@@XZ_5.0+0xd8>  // b.hs, b.nlast
    6e04:	mov	w23, #0xa                   	// #10
    6e08:	b	6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6e0c:	mov	w23, #0x3                   	// #3
    6e10:	mov	w0, w23
    6e14:	ldp	x20, x19, [sp, #352]
    6e18:	ldp	x22, x21, [sp, #336]
    6e1c:	ldp	x24, x23, [sp, #320]
    6e20:	ldp	x26, x25, [sp, #304]
    6e24:	ldp	x28, x27, [sp, #288]
    6e28:	ldp	x29, x30, [sp, #272]
    6e2c:	add	sp, sp, #0x170
    6e30:	ret
    6e34:	movi	v0.2d, #0x0
    6e38:	add	x1, x20, x23
    6e3c:	sub	x0, x29, #0x40
    6e40:	stur	xzr, [x29, #-16]
    6e44:	stp	q0, q0, [x29, #-48]
    6e48:	stur	q0, [x29, #-64]
    6e4c:	stur	w26, [x29, #-48]
    6e50:	bl	3340 <lzma_stream_header_encode@plt>
    6e54:	cbnz	w0, 6dd4 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    6e58:	add	x8, x23, #0xc
    6e5c:	mov	x0, sp
    6e60:	mov	w2, #0xd0                  	// #208
    6e64:	mov	w1, wzr
    6e68:	sub	x27, x27, #0xc
    6e6c:	stur	x8, [x29, #-8]
    6e70:	bl	31e0 <memset@plt>
    6e74:	str	w26, [sp, #8]
    6e78:	str	x25, [sp, #32]
    6e7c:	cbz	x22, 6ea8 <lzma_stream_buffer_encode@@XZ_5.0+0x14c>
    6e80:	mov	x0, sp
    6e84:	sub	x5, x29, #0x8
    6e88:	mov	x1, x21
    6e8c:	mov	x2, x24
    6e90:	mov	x3, x22
    6e94:	mov	x4, x20
    6e98:	mov	x6, x27
    6e9c:	bl	3090 <lzma_block_buffer_encode@plt>
    6ea0:	mov	w23, w0
    6ea4:	cbnz	w0, 6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6ea8:	mov	x0, x21
    6eac:	bl	3360 <lzma_index_init@plt>
    6eb0:	cbz	x0, 6ef0 <lzma_stream_buffer_encode@@XZ_5.0+0x194>
    6eb4:	mov	x24, x0
    6eb8:	cbz	x22, 6ef8 <lzma_stream_buffer_encode@@XZ_5.0+0x19c>
    6ebc:	mov	x0, sp
    6ec0:	bl	3150 <lzma_block_unpadded_size@plt>
    6ec4:	ldr	x3, [sp, #24]
    6ec8:	mov	x2, x0
    6ecc:	mov	x0, x24
    6ed0:	mov	x1, x21
    6ed4:	bl	32c0 <lzma_index_append@plt>
    6ed8:	cbz	w0, 6ef8 <lzma_stream_buffer_encode@@XZ_5.0+0x19c>
    6edc:	mov	w23, w0
    6ee0:	mov	x0, x24
    6ee4:	mov	x1, x21
    6ee8:	bl	3390 <lzma_index_end@plt>
    6eec:	b	6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6ef0:	mov	w23, #0x5                   	// #5
    6ef4:	b	6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6ef8:	sub	x2, x29, #0x8
    6efc:	mov	x0, x24
    6f00:	mov	x1, x20
    6f04:	mov	x3, x27
    6f08:	bl	30c0 <lzma_index_buffer_encode@plt>
    6f0c:	mov	w23, w0
    6f10:	mov	x0, x24
    6f14:	bl	34c0 <lzma_index_size@plt>
    6f18:	stur	x0, [x29, #-56]
    6f1c:	mov	x0, x24
    6f20:	mov	x1, x21
    6f24:	bl	3390 <lzma_index_end@plt>
    6f28:	cbnz	w23, 6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    6f2c:	ldur	x8, [x29, #-8]
    6f30:	sub	x0, x29, #0x40
    6f34:	add	x1, x20, x8
    6f38:	bl	31c0 <lzma_stream_footer_encode@plt>
    6f3c:	cbnz	w0, 6dd4 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    6f40:	ldur	x8, [x29, #-8]
    6f44:	mov	w23, wzr
    6f48:	add	x8, x8, #0xc
    6f4c:	stur	x8, [x29, #-8]
    6f50:	str	x8, [x19]
    6f54:	b	6e10 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>

0000000000006f58 <lzma_stream_encoder@@XZ_5.0>:
    6f58:	stp	x29, x30, [sp, #-48]!
    6f5c:	stp	x22, x21, [sp, #16]
    6f60:	stp	x20, x19, [sp, #32]
    6f64:	mov	x29, sp
    6f68:	mov	w21, w2
    6f6c:	mov	x22, x1
    6f70:	mov	x19, x0
    6f74:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    6f78:	mov	w20, w0
    6f7c:	cbnz	w0, 6fb4 <lzma_stream_encoder@@XZ_5.0+0x5c>
    6f80:	ldp	x1, x0, [x19, #48]
    6f84:	mov	x2, x22
    6f88:	mov	w3, w21
    6f8c:	bl	6fc8 <lzma_stream_encoder@@XZ_5.0+0x70>
    6f90:	mov	w20, w0
    6f94:	cbz	w0, 6fa4 <lzma_stream_encoder@@XZ_5.0+0x4c>
    6f98:	mov	x0, x19
    6f9c:	bl	32e0 <lzma_end@plt>
    6fa0:	b	6fb4 <lzma_stream_encoder@@XZ_5.0+0x5c>
    6fa4:	ldr	x8, [x19, #56]
    6fa8:	mov	w9, #0x1010101             	// #16843009
    6fac:	strb	w9, [x8, #92]
    6fb0:	str	w9, [x8, #88]
    6fb4:	mov	w0, w20
    6fb8:	ldp	x20, x19, [sp, #32]
    6fbc:	ldp	x22, x21, [sp, #16]
    6fc0:	ldp	x29, x30, [sp], #48
    6fc4:	ret
    6fc8:	sub	sp, sp, #0x80
    6fcc:	stp	x29, x30, [sp, #64]
    6fd0:	stp	x22, x21, [sp, #96]
    6fd4:	stp	x20, x19, [sp, #112]
    6fd8:	ldr	x8, [x0, #16]
    6fdc:	adrp	x22, 6000 <lzma_block_encoder@@XZ_5.0+0x14>
    6fe0:	add	x22, x22, #0xfc8
    6fe4:	str	x23, [sp, #80]
    6fe8:	mov	w21, w3
    6fec:	mov	x19, x2
    6ff0:	mov	x23, x0
    6ff4:	cmp	x8, x22
    6ff8:	mov	x20, x1
    6ffc:	add	x29, sp, #0x40
    7000:	b.eq	7010 <lzma_stream_encoder@@XZ_5.0+0xb8>  // b.none
    7004:	mov	x0, x23
    7008:	mov	x1, x20
    700c:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    7010:	str	x22, [x23, #16]
    7014:	cbz	x19, 70f4 <lzma_stream_encoder@@XZ_5.0+0x19c>
    7018:	ldr	x22, [x23]
    701c:	cbnz	x22, 7084 <lzma_stream_encoder@@XZ_5.0+0x12c>
    7020:	mov	w0, #0x5d0                 	// #1488
    7024:	mov	x1, x20
    7028:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    702c:	cbz	x0, 70fc <lzma_stream_encoder@@XZ_5.0+0x1a4>
    7030:	adrp	x8, 7000 <lzma_stream_encoder@@XZ_5.0+0xa8>
    7034:	adrp	x9, 7000 <lzma_stream_encoder@@XZ_5.0+0xa8>
    7038:	add	x8, x8, #0x118
    703c:	add	x9, x9, #0x3b0
    7040:	stp	x8, x9, [x23, #24]
    7044:	adrp	x8, 7000 <lzma_stream_encoder@@XZ_5.0+0xa8>
    7048:	add	x8, x8, #0x428
    704c:	mov	x22, x0
    7050:	str	x8, [x23, #64]
    7054:	mov	x8, #0xffffffffffffffff    	// #-1
    7058:	movi	v0.2d, #0x0
    705c:	str	x0, [x23]
    7060:	str	x8, [x0, #288]
    7064:	stp	xzr, x8, [x0, #8]
    7068:	stur	q0, [x0, #24]
    706c:	stur	q0, [x0, #40]
    7070:	stur	q0, [x0, #56]
    7074:	str	xzr, [x0, #72]
    7078:	stp	xzr, x8, [x0, #368]
    707c:	stp	q0, q0, [x0, #384]
    7080:	stp	q0, q0, [x0, #416]
    7084:	ldr	x0, [x22, #440]
    7088:	mov	x1, x20
    708c:	str	wzr, [x22]
    7090:	str	wzr, [x22, #80]
    7094:	str	w21, [x22, #88]
    7098:	bl	3390 <lzma_index_end@plt>
    709c:	mov	x0, x20
    70a0:	bl	3360 <lzma_index_init@plt>
    70a4:	str	x0, [x22, #440]
    70a8:	cbz	x0, 70fc <lzma_stream_encoder@@XZ_5.0+0x1a4>
    70ac:	movi	v0.2d, #0x0
    70b0:	add	x1, x22, #0x1d0
    70b4:	mov	x0, sp
    70b8:	str	xzr, [sp, #48]
    70bc:	stp	q0, q0, [sp, #16]
    70c0:	str	q0, [sp]
    70c4:	str	w21, [sp, #16]
    70c8:	bl	3340 <lzma_stream_header_encode@plt>
    70cc:	cbnz	w0, 7100 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    70d0:	adrp	x8, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    70d4:	ldr	q0, [x8, #2608]
    70d8:	mov	x0, x22
    70dc:	mov	x1, x20
    70e0:	mov	x2, x19
    70e4:	mov	x3, xzr
    70e8:	str	q0, [x22, #448]
    70ec:	bl	7428 <lzma_stream_encoder@@XZ_5.0+0x4d0>
    70f0:	b	7100 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    70f4:	mov	w0, #0xb                   	// #11
    70f8:	b	7100 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    70fc:	mov	w0, #0x5                   	// #5
    7100:	ldp	x20, x19, [sp, #112]
    7104:	ldp	x22, x21, [sp, #96]
    7108:	ldr	x23, [sp, #80]
    710c:	ldp	x29, x30, [sp, #64]
    7110:	add	sp, sp, #0x80
    7114:	ret
    7118:	sub	sp, sp, #0xd0
    711c:	ldr	x8, [x6]
    7120:	stp	x29, x30, [sp, #112]
    7124:	stp	x28, x27, [sp, #128]
    7128:	stp	x26, x25, [sp, #144]
    712c:	cmp	x8, x7
    7130:	stp	x24, x23, [sp, #160]
    7134:	stp	x22, x21, [sp, #176]
    7138:	stp	x20, x19, [sp, #192]
    713c:	add	x29, sp, #0x70
    7140:	b.cs	736c <lzma_stream_encoder@@XZ_5.0+0x414>  // b.hs, b.nlast
    7144:	add	x8, x0, #0x170
    7148:	str	x2, [sp, #32]
    714c:	str	x4, [sp, #48]
    7150:	ldr	w10, [x29, #96]
    7154:	str	x8, [sp, #8]
    7158:	mov	x27, x0
    715c:	ldr	w8, [x27], #80
    7160:	add	x9, sp, #0x38
    7164:	adrp	x22, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    7168:	add	x9, x9, #0x14
    716c:	mov	x19, x7
    7170:	mov	x20, x6
    7174:	mov	x21, x5
    7178:	mov	x23, x3
    717c:	mov	x25, x1
    7180:	mov	x26, x0
    7184:	add	x28, x0, #0x1d0
    7188:	add	x24, x0, #0x1c0
    718c:	add	x22, x22, #0xa40
    7190:	str	x9, [sp, #16]
    7194:	mov	w9, w10
    7198:	str	w10, [sp, #44]
    719c:	str	x9, [sp, #24]
    71a0:	cmp	w8, #0x5
    71a4:	b.hi	7390 <lzma_stream_encoder@@XZ_5.0+0x438>  // b.pmore
    71a8:	mov	w8, w8
    71ac:	adr	x9, 71bc <lzma_stream_encoder@@XZ_5.0+0x264>
    71b0:	ldrb	w10, [x22, x8]
    71b4:	add	x9, x9, x10, lsl #2
    71b8:	br	x9
    71bc:	ldr	x2, [x26, #456]
    71c0:	mov	x0, x28
    71c4:	mov	x1, x24
    71c8:	mov	x3, x21
    71cc:	mov	x4, x20
    71d0:	mov	x5, x19
    71d4:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    71d8:	ldp	x8, x9, [x26, #448]
    71dc:	cmp	x8, x9
    71e0:	b.cc	736c <lzma_stream_encoder@@XZ_5.0+0x414>  // b.lo, b.ul, b.last
    71e4:	ldr	w8, [x26]
    71e8:	cmp	w8, #0x5
    71ec:	b.eq	7398 <lzma_stream_encoder@@XZ_5.0+0x440>  // b.none
    71f0:	add	w8, w8, #0x1
    71f4:	str	xzr, [x26, #448]
    71f8:	b	735c <lzma_stream_encoder@@XZ_5.0+0x404>
    71fc:	ldr	x8, [x23]
    7200:	ldr	x9, [sp, #48]
    7204:	cmp	x8, x9
    7208:	b.ne	7324 <lzma_stream_encoder@@XZ_5.0+0x3cc>  // b.any
    720c:	ldr	w8, [sp, #44]
    7210:	cmp	w8, #0x3
    7214:	b.ne	73a0 <lzma_stream_encoder@@XZ_5.0+0x448>  // b.any
    7218:	ldr	x2, [x26, #440]
    721c:	ldr	x0, [sp, #8]
    7220:	mov	x1, x25
    7224:	bl	6908 <lzma_filter_flags_encode@@XZ_5.0+0xc8>
    7228:	cbnz	w0, 7370 <lzma_stream_encoder@@XZ_5.0+0x418>
    722c:	mov	w8, #0x4                   	// #4
    7230:	b	735c <lzma_stream_encoder@@XZ_5.0+0x404>
    7234:	ldp	x10, x2, [sp, #24]
    7238:	adrp	x9, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    723c:	add	x9, x9, #0xa48
    7240:	ldr	x8, [x26, #32]
    7244:	ldr	x0, [x26, #8]
    7248:	ldr	w9, [x9, x10, lsl #2]
    724c:	ldr	x4, [sp, #48]
    7250:	mov	x1, x25
    7254:	mov	x3, x23
    7258:	mov	x5, x21
    725c:	mov	x6, x20
    7260:	mov	x7, x19
    7264:	str	w9, [sp]
    7268:	blr	x8
    726c:	ldr	w8, [sp, #44]
    7270:	cmp	w8, #0x1
    7274:	b.eq	7370 <lzma_stream_encoder@@XZ_5.0+0x418>  // b.none
    7278:	cmp	w0, #0x1
    727c:	b.ne	7370 <lzma_stream_encoder@@XZ_5.0+0x418>  // b.any
    7280:	mov	x0, x27
    7284:	bl	3150 <lzma_block_unpadded_size@plt>
    7288:	ldr	x8, [x26, #440]
    728c:	ldr	x3, [x26, #104]
    7290:	mov	x2, x0
    7294:	mov	x1, x25
    7298:	mov	x0, x8
    729c:	bl	32c0 <lzma_index_append@plt>
    72a0:	cbnz	w0, 7370 <lzma_stream_encoder@@XZ_5.0+0x418>
    72a4:	mov	w8, #0x1                   	// #1
    72a8:	b	735c <lzma_stream_encoder@@XZ_5.0+0x404>
    72ac:	ldr	x8, [x26, #392]
    72b0:	ldr	x0, [x26, #368]
    72b4:	mov	x1, x25
    72b8:	mov	x2, xzr
    72bc:	mov	x3, xzr
    72c0:	mov	x4, xzr
    72c4:	mov	x5, x21
    72c8:	mov	x6, x20
    72cc:	mov	x7, x19
    72d0:	str	wzr, [sp]
    72d4:	blr	x8
    72d8:	cmp	w0, #0x1
    72dc:	b.ne	7370 <lzma_stream_encoder@@XZ_5.0+0x418>  // b.any
    72e0:	str	wzr, [sp, #56]
    72e4:	ldr	x0, [x26, #440]
    72e8:	bl	34c0 <lzma_index_size@plt>
    72ec:	str	x0, [sp, #64]
    72f0:	ldr	w8, [x26, #88]
    72f4:	movi	v0.2d, #0x0
    72f8:	add	x0, sp, #0x38
    72fc:	mov	x1, x28
    7300:	str	w8, [sp, #72]
    7304:	ldr	x8, [sp, #16]
    7308:	stp	q0, q0, [x8]
    730c:	bl	31c0 <lzma_stream_footer_encode@plt>
    7310:	cbnz	w0, 7390 <lzma_stream_encoder@@XZ_5.0+0x438>
    7314:	mov	w8, #0xc                   	// #12
    7318:	str	x8, [x26, #456]
    731c:	mov	w8, #0x5                   	// #5
    7320:	b	735c <lzma_stream_encoder@@XZ_5.0+0x404>
    7324:	ldrb	w8, [x26, #4]
    7328:	cbnz	w8, 733c <lzma_stream_encoder@@XZ_5.0+0x3e4>
    732c:	mov	x0, x26
    7330:	mov	x1, x25
    7334:	bl	74f8 <lzma_stream_encoder@@XZ_5.0+0x5a0>
    7338:	cbnz	w0, 7370 <lzma_stream_encoder@@XZ_5.0+0x418>
    733c:	mov	x0, x27
    7340:	mov	x1, x28
    7344:	strb	wzr, [x26, #4]
    7348:	bl	34f0 <lzma_block_header_encode@plt>
    734c:	cbnz	w0, 7390 <lzma_stream_encoder@@XZ_5.0+0x438>
    7350:	ldr	w9, [x26, #84]
    7354:	mov	w8, #0x2                   	// #2
    7358:	str	x9, [x26, #456]
    735c:	str	w8, [x26]
    7360:	ldr	x9, [x20]
    7364:	cmp	x9, x19
    7368:	b.cc	71a0 <lzma_stream_encoder@@XZ_5.0+0x248>  // b.lo, b.ul, b.last
    736c:	mov	w0, wzr
    7370:	ldp	x20, x19, [sp, #192]
    7374:	ldp	x22, x21, [sp, #176]
    7378:	ldp	x24, x23, [sp, #160]
    737c:	ldp	x26, x25, [sp, #144]
    7380:	ldp	x28, x27, [sp, #128]
    7384:	ldp	x29, x30, [sp, #112]
    7388:	add	sp, sp, #0xd0
    738c:	ret
    7390:	mov	w0, #0xb                   	// #11
    7394:	b	7370 <lzma_stream_encoder@@XZ_5.0+0x418>
    7398:	mov	w0, #0x1                   	// #1
    739c:	b	7370 <lzma_stream_encoder@@XZ_5.0+0x418>
    73a0:	ldr	w8, [sp, #44]
    73a4:	cmp	w8, #0x0
    73a8:	cset	w0, ne  // ne = any
    73ac:	b	7370 <lzma_stream_encoder@@XZ_5.0+0x418>
    73b0:	stp	x29, x30, [sp, #-48]!
    73b4:	stp	x20, x19, [sp, #32]
    73b8:	mov	x20, x0
    73bc:	add	x0, x0, #0x8
    73c0:	str	x21, [sp, #16]
    73c4:	mov	x29, sp
    73c8:	mov	x19, x1
    73cc:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    73d0:	add	x0, x20, #0x170
    73d4:	mov	x1, x19
    73d8:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    73dc:	ldr	x0, [x20, #440]
    73e0:	mov	x1, x19
    73e4:	bl	3390 <lzma_index_end@plt>
    73e8:	ldr	x8, [x20, #288]
    73ec:	cmn	x8, #0x1
    73f0:	b.eq	7410 <lzma_stream_encoder@@XZ_5.0+0x4b8>  // b.none
    73f4:	add	x21, x20, #0x130
    73f8:	ldur	x0, [x21, #-8]
    73fc:	mov	x1, x19
    7400:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7404:	ldr	x8, [x21], #16
    7408:	cmn	x8, #0x1
    740c:	b.ne	73f8 <lzma_stream_encoder@@XZ_5.0+0x4a0>  // b.any
    7410:	mov	x0, x20
    7414:	mov	x1, x19
    7418:	ldp	x20, x19, [sp, #32]
    741c:	ldr	x21, [sp, #16]
    7420:	ldp	x29, x30, [sp], #48
    7424:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7428:	stp	x29, x30, [sp, #-48]!
    742c:	stp	x22, x21, [sp, #16]
    7430:	stp	x20, x19, [sp, #32]
    7434:	ldr	w8, [x0]
    7438:	mov	x19, x2
    743c:	mov	x21, x0
    7440:	mov	x20, x1
    7444:	cmp	w8, #0x1
    7448:	mov	x29, sp
    744c:	b.hi	747c <lzma_stream_encoder@@XZ_5.0+0x524>  // b.pmore
    7450:	mov	x0, x21
    7454:	mov	x1, x20
    7458:	strb	wzr, [x21, #4]
    745c:	str	x19, [x21, #112]
    7460:	bl	74f8 <lzma_stream_encoder@@XZ_5.0+0x5a0>
    7464:	add	x8, x21, #0x120
    7468:	str	x8, [x21, #112]
    746c:	cbnz	w0, 74e8 <lzma_stream_encoder@@XZ_5.0+0x590>
    7470:	mov	w8, #0x1                   	// #1
    7474:	strb	w8, [x21, #4]
    7478:	b	749c <lzma_stream_encoder@@XZ_5.0+0x544>
    747c:	cmp	w8, #0x3
    7480:	b.hi	74e4 <lzma_stream_encoder@@XZ_5.0+0x58c>  // b.pmore
    7484:	ldr	x8, [x21, #72]
    7488:	ldr	x0, [x21, #8]
    748c:	mov	x1, x20
    7490:	mov	x2, x19
    7494:	blr	x8
    7498:	cbnz	w0, 74e8 <lzma_stream_encoder@@XZ_5.0+0x590>
    749c:	ldr	x8, [x21, #288]
    74a0:	add	x22, x21, #0x120
    74a4:	cmn	x8, #0x1
    74a8:	b.eq	74c8 <lzma_stream_encoder@@XZ_5.0+0x570>  // b.none
    74ac:	add	x21, x21, #0x130
    74b0:	ldur	x0, [x21, #-8]
    74b4:	mov	x1, x20
    74b8:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    74bc:	ldr	x8, [x21], #16
    74c0:	cmn	x8, #0x1
    74c4:	b.ne	74b0 <lzma_stream_encoder@@XZ_5.0+0x558>  // b.any
    74c8:	mov	x0, x19
    74cc:	mov	x1, x22
    74d0:	mov	x2, x20
    74d4:	ldp	x20, x19, [sp, #32]
    74d8:	ldp	x22, x21, [sp, #16]
    74dc:	ldp	x29, x30, [sp], #48
    74e0:	b	31f0 <lzma_filters_copy@plt>
    74e4:	mov	w0, #0xb                   	// #11
    74e8:	ldp	x20, x19, [sp, #32]
    74ec:	ldp	x22, x21, [sp, #16]
    74f0:	ldp	x29, x30, [sp], #48
    74f4:	ret
    74f8:	stp	x29, x30, [sp, #-48]!
    74fc:	stp	x20, x19, [sp, #32]
    7500:	add	x20, x0, #0x50
    7504:	mov	x8, #0xffffffffffffffff    	// #-1
    7508:	str	x21, [sp, #16]
    750c:	mov	x21, x0
    7510:	stp	x8, x8, [x0, #96]
    7514:	mov	x0, x20
    7518:	mov	x29, sp
    751c:	mov	x19, x1
    7520:	bl	3120 <lzma_block_header_size@plt>
    7524:	cbz	w0, 7538 <lzma_stream_encoder@@XZ_5.0+0x5e0>
    7528:	ldp	x20, x19, [sp, #32]
    752c:	ldr	x21, [sp, #16]
    7530:	ldp	x29, x30, [sp], #48
    7534:	ret
    7538:	add	x0, x21, #0x8
    753c:	mov	x1, x19
    7540:	mov	x2, x20
    7544:	ldp	x20, x19, [sp, #32]
    7548:	ldr	x21, [sp, #16]
    754c:	ldp	x29, x30, [sp], #48
    7550:	b	5c70 <lzma_block_uncomp_encode@@XZ_5.2+0x20>

0000000000007554 <lzma_stream_header_encode@@XZ_5.0>:
    7554:	stp	x29, x30, [sp, #-32]!
    7558:	ldr	w8, [x0]
    755c:	str	x19, [sp, #16]
    7560:	mov	x29, sp
    7564:	cbz	w8, 7570 <lzma_stream_header_encode@@XZ_5.0+0x1c>
    7568:	mov	w0, #0x8                   	// #8
    756c:	b	75c8 <lzma_stream_header_encode@@XZ_5.0+0x74>
    7570:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    7574:	ldr	x8, [x8, #3936]
    7578:	mov	x19, x1
    757c:	ldrh	w9, [x8, #4]
    7580:	ldr	w8, [x8]
    7584:	strh	w9, [x1, #4]
    7588:	str	w8, [x1]
    758c:	ldr	w8, [x0, #16]
    7590:	cmp	w8, #0xf
    7594:	b.ls	75a0 <lzma_stream_header_encode@@XZ_5.0+0x4c>  // b.plast
    7598:	mov	w0, #0xb                   	// #11
    759c:	b	75c8 <lzma_stream_header_encode@@XZ_5.0+0x74>
    75a0:	strb	wzr, [x19, #6]
    75a4:	ldr	w8, [x0, #16]
    75a8:	add	x0, x19, #0x6
    75ac:	mov	w1, #0x2                   	// #2
    75b0:	mov	w2, wzr
    75b4:	strb	w8, [x19, #7]
    75b8:	bl	3180 <lzma_crc32@plt>
    75bc:	mov	w8, w0
    75c0:	mov	w0, wzr
    75c4:	str	w8, [x19, #8]
    75c8:	ldr	x19, [sp, #16]
    75cc:	ldp	x29, x30, [sp], #32
    75d0:	ret

00000000000075d4 <lzma_stream_footer_encode@@XZ_5.0>:
    75d4:	stp	x29, x30, [sp, #-32]!
    75d8:	ldr	w9, [x0]
    75dc:	str	x19, [sp, #16]
    75e0:	mov	x29, sp
    75e4:	cbz	w9, 75f8 <lzma_stream_footer_encode@@XZ_5.0+0x24>
    75e8:	mov	w0, #0x8                   	// #8
    75ec:	ldr	x19, [sp, #16]
    75f0:	ldp	x29, x30, [sp], #32
    75f4:	ret
    75f8:	ldr	x9, [x0, #8]
    75fc:	mov	x11, #0x3fffffffc           	// #17179869180
    7600:	mov	x8, x0
    7604:	mov	w0, #0xb                   	// #11
    7608:	sub	x10, x9, #0x4
    760c:	cmp	x10, x11
    7610:	b.hi	75ec <lzma_stream_footer_encode@@XZ_5.0+0x18>  // b.pmore
    7614:	and	x10, x9, #0x3
    7618:	cbnz	x10, 75ec <lzma_stream_footer_encode@@XZ_5.0+0x18>
    761c:	lsr	x9, x9, #2
    7620:	sub	w9, w9, #0x1
    7624:	mov	x0, x1
    7628:	str	w9, [x0, #4]!
    762c:	ldr	w9, [x8, #16]
    7630:	mov	x19, x1
    7634:	cmp	w9, #0xf
    7638:	b.ls	7644 <lzma_stream_footer_encode@@XZ_5.0+0x70>  // b.plast
    763c:	mov	w0, #0xb                   	// #11
    7640:	b	75ec <lzma_stream_footer_encode@@XZ_5.0+0x18>
    7644:	strb	wzr, [x19, #8]
    7648:	ldr	w8, [x8, #16]
    764c:	mov	w1, #0x6                   	// #6
    7650:	mov	w2, wzr
    7654:	strb	w8, [x19, #9]
    7658:	bl	3180 <lzma_crc32@plt>
    765c:	mov	w8, w0
    7660:	strb	w8, [x19]
    7664:	adrp	x11, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    7668:	ldr	x11, [x11, #3976]
    766c:	lsr	w9, w8, #8
    7670:	strb	w9, [x19, #1]
    7674:	mov	w0, wzr
    7678:	ldrh	w9, [x11]
    767c:	lsr	w10, w8, #16
    7680:	lsr	w8, w8, #24
    7684:	strb	w10, [x19, #2]
    7688:	strb	w8, [x19, #3]
    768c:	strh	w9, [x19, #10]
    7690:	b	75ec <lzma_stream_footer_encode@@XZ_5.0+0x18>

0000000000007694 <lzma_vli_encode@@XZ_5.0>:
    7694:	sub	sp, sp, #0x10
    7698:	ldr	x10, [x3]
    769c:	cmp	x1, #0x0
    76a0:	add	x9, sp, #0x8
    76a4:	mov	w11, #0xa                   	// #10
    76a8:	mov	x8, x0
    76ac:	csel	x9, x9, x1, eq  // eq = none
    76b0:	cinc	w0, w11, eq  // eq = none
    76b4:	cmp	x10, x4
    76b8:	str	xzr, [sp, #8]
    76bc:	b.cs	7740 <lzma_vli_encode@@XZ_5.0+0xac>  // b.hs, b.nlast
    76c0:	mov	w0, #0xb                   	// #11
    76c4:	tbnz	x8, #63, 7740 <lzma_vli_encode@@XZ_5.0+0xac>
    76c8:	ldr	x12, [x9]
    76cc:	cmp	x12, #0x8
    76d0:	b.hi	7740 <lzma_vli_encode@@XZ_5.0+0xac>  // b.pmore
    76d4:	lsl	x11, x12, #3
    76d8:	sub	x11, x11, x12
    76dc:	lsr	x11, x8, x11
    76e0:	add	x8, x12, #0x1
    76e4:	cmp	x11, #0x80
    76e8:	b.cc	7724 <lzma_vli_encode@@XZ_5.0+0x90>  // b.lo, b.ul, b.last
    76ec:	orr	w12, w11, #0x80
    76f0:	str	x8, [x9]
    76f4:	strb	w12, [x2, x10]
    76f8:	add	x10, x10, #0x1
    76fc:	lsr	x11, x11, #7
    7700:	cmp	x4, x10
    7704:	add	x8, x8, #0x1
    7708:	str	x10, [x3]
    770c:	b.ne	76e4 <lzma_vli_encode@@XZ_5.0+0x50>  // b.any
    7710:	add	x8, sp, #0x8
    7714:	cmp	x9, x8
    7718:	mov	w8, #0xb                   	// #11
    771c:	csel	w0, w8, wzr, eq  // eq = none
    7720:	b	7740 <lzma_vli_encode@@XZ_5.0+0xac>
    7724:	strb	w11, [x2, x10]
    7728:	add	x11, sp, #0x8
    772c:	cmp	x9, x11
    7730:	add	x10, x10, #0x1
    7734:	cset	w0, ne  // ne = any
    7738:	str	x10, [x3]
    773c:	str	x8, [x9]
    7740:	add	sp, sp, #0x10
    7744:	ret
    7748:	mov	x8, x0
    774c:	lsr	x9, x0, #48
    7750:	mov	x0, #0xffffffffffffffff    	// #-1
    7754:	cbnz	x9, 7774 <lzma_vli_encode@@XZ_5.0+0xe0>
    7758:	cmp	w1, #0x4, lsl #12
    775c:	b.hi	7774 <lzma_vli_encode@@XZ_5.0+0xe0>  // b.pmore
    7760:	lsl	w9, w1, #1
    7764:	mul	x8, x9, x8
    7768:	mov	w10, #0x28                  	// #40
    776c:	umaddl	x8, w9, w10, x8
    7770:	add	x0, x8, #0x30
    7774:	ret
    7778:	stp	x29, x30, [sp, #-64]!
    777c:	stp	x20, x19, [sp, #48]
    7780:	mov	x19, x0
    7784:	lsr	x8, x2, #48
    7788:	mov	w0, #0x8                   	// #8
    778c:	str	x23, [sp, #16]
    7790:	stp	x22, x21, [sp, #32]
    7794:	mov	x29, sp
    7798:	cbnz	x8, 7858 <lzma_vli_encode@@XZ_5.0+0x1c4>
    779c:	cmp	w3, #0x4, lsl #12
    77a0:	b.hi	7858 <lzma_vli_encode@@XZ_5.0+0x1c4>  // b.pmore
    77a4:	ldr	x8, [x19, #16]
    77a8:	mov	x21, x2
    77ac:	mov	x20, x1
    77b0:	lsl	w23, w3, #1
    77b4:	cmp	x8, x2
    77b8:	b.ne	77c8 <lzma_vli_encode@@XZ_5.0+0x134>  // b.any
    77bc:	ldr	w8, [x19, #24]
    77c0:	cmp	w8, w23
    77c4:	b.eq	781c <lzma_vli_encode@@XZ_5.0+0x188>  // b.none
    77c8:	ldr	x0, [x19]
    77cc:	mov	x1, x20
    77d0:	mul	x22, x23, x21
    77d4:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    77d8:	ldr	x0, [x19, #8]
    77dc:	mov	x1, x20
    77e0:	str	xzr, [x19]
    77e4:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    77e8:	add	x8, x23, x23, lsl #2
    77ec:	lsl	x0, x8, #3
    77f0:	mov	x1, x20
    77f4:	str	xzr, [x19, #8]
    77f8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    77fc:	str	x0, [x19]
    7800:	mov	x0, x22
    7804:	mov	x1, x20
    7808:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    780c:	ldr	x8, [x19]
    7810:	str	x0, [x19, #8]
    7814:	cbz	x0, 7834 <lzma_vli_encode@@XZ_5.0+0x1a0>
    7818:	cbz	x8, 7834 <lzma_vli_encode@@XZ_5.0+0x1a0>
    781c:	mov	w0, wzr
    7820:	str	x21, [x19, #16]
    7824:	stp	wzr, wzr, [x19, #28]
    7828:	str	w23, [x19, #24]
    782c:	str	xzr, [x19, #40]
    7830:	b	7858 <lzma_vli_encode@@XZ_5.0+0x1c4>
    7834:	mov	x0, x8
    7838:	mov	x1, x20
    783c:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7840:	ldr	x0, [x19, #8]
    7844:	mov	x1, x20
    7848:	str	xzr, [x19]
    784c:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7850:	str	xzr, [x19, #8]
    7854:	mov	w0, #0x5                   	// #5
    7858:	ldp	x20, x19, [sp, #48]
    785c:	ldp	x22, x21, [sp, #32]
    7860:	ldr	x23, [sp, #16]
    7864:	ldp	x29, x30, [sp], #64
    7868:	ret
    786c:	stp	x29, x30, [sp, #-32]!
    7870:	stp	x20, x19, [sp, #16]
    7874:	mov	x19, x0
    7878:	ldr	x0, [x0]
    787c:	mov	x29, sp
    7880:	mov	x20, x1
    7884:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7888:	ldr	x0, [x19, #8]
    788c:	mov	x1, x20
    7890:	str	xzr, [x19]
    7894:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7898:	str	xzr, [x19, #8]
    789c:	ldp	x20, x19, [sp, #16]
    78a0:	ldp	x29, x30, [sp], #32
    78a4:	ret
    78a8:	ldr	w9, [x0, #28]
    78ac:	ldp	x8, x10, [x0]
    78b0:	ldr	x11, [x0, #16]
    78b4:	mov	w12, #0x28                  	// #40
    78b8:	madd	x8, x9, x12, x8
    78bc:	madd	x10, x11, x9, x10
    78c0:	stp	x10, xzr, [x8]
    78c4:	strb	wzr, [x8, #32]
    78c8:	ldr	w10, [x0, #24]
    78cc:	ldr	w11, [x0, #32]
    78d0:	add	w12, w9, #0x1
    78d4:	cmp	w12, w10
    78d8:	add	w10, w11, #0x1
    78dc:	csinc	w9, wzr, w9, eq  // eq = none
    78e0:	stp	w9, w10, [x0, #28]
    78e4:	mov	x0, x8
    78e8:	ret
    78ec:	ldp	w8, w9, [x0, #28]
    78f0:	subs	w8, w8, w9
    78f4:	b.cs	7900 <lzma_vli_encode@@XZ_5.0+0x26c>  // b.hs, b.nlast
    78f8:	ldr	w9, [x0, #24]
    78fc:	add	w8, w9, w8
    7900:	ldr	x9, [x0]
    7904:	mov	w10, #0x28                  	// #40
    7908:	umaddl	x8, w8, w10, x9
    790c:	ldrb	w0, [x8, #32]
    7910:	ret
    7914:	stp	x29, x30, [sp, #-64]!
    7918:	ldr	w8, [x0, #32]
    791c:	stp	x24, x23, [sp, #16]
    7920:	stp	x22, x21, [sp, #32]
    7924:	stp	x20, x19, [sp, #48]
    7928:	mov	x29, sp
    792c:	cbz	w8, 7998 <lzma_vli_encode@@XZ_5.0+0x304>
    7930:	ldr	w9, [x0, #28]
    7934:	mov	x19, x5
    7938:	mov	x20, x4
    793c:	mov	x5, x3
    7940:	mov	x4, x2
    7944:	mov	x21, x0
    7948:	mov	x3, x1
    794c:	subs	w8, w9, w8
    7950:	b.cs	795c <lzma_vli_encode@@XZ_5.0+0x2c8>  // b.hs, b.nlast
    7954:	ldr	w9, [x21, #24]
    7958:	add	w8, w9, w8
    795c:	ldr	x22, [x21]
    7960:	mov	w9, #0x28                  	// #40
    7964:	umaddl	x9, w8, w9, x22
    7968:	ldrb	w9, [x9, #32]
    796c:	cbz	w9, 7998 <lzma_vli_encode@@XZ_5.0+0x304>
    7970:	mov	w23, w8
    7974:	mov	w8, #0x28                  	// #40
    7978:	madd	x24, x23, x8, x22
    797c:	ldp	x0, x2, [x24]
    7980:	add	x1, x21, #0x28
    7984:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    7988:	ldr	x8, [x21, #40]
    798c:	ldr	x9, [x24, #8]
    7990:	cmp	x8, x9
    7994:	b.cs	79a0 <lzma_vli_encode@@XZ_5.0+0x30c>  // b.hs, b.nlast
    7998:	mov	w0, wzr
    799c:	b	79c8 <lzma_vli_encode@@XZ_5.0+0x334>
    79a0:	mov	w8, #0x28                  	// #40
    79a4:	madd	x8, x23, x8, x22
    79a8:	ldp	x9, x8, [x8, #16]
    79ac:	ldr	w10, [x21, #32]
    79b0:	mov	w0, #0x1                   	// #1
    79b4:	str	xzr, [x21, #40]
    79b8:	str	x9, [x20]
    79bc:	sub	w9, w10, #0x1
    79c0:	str	w9, [x21, #32]
    79c4:	str	x8, [x19]
    79c8:	ldp	x20, x19, [sp, #48]
    79cc:	ldp	x22, x21, [sp, #32]
    79d0:	ldp	x24, x23, [sp, #16]
    79d4:	ldp	x29, x30, [sp], #64
    79d8:	ret

00000000000079dc <lzma_stream_encoder_mt@@XZ_5.2>:
    79dc:	stp	x29, x30, [sp, #-48]!
    79e0:	str	x21, [sp, #16]
    79e4:	stp	x20, x19, [sp, #32]
    79e8:	mov	x29, sp
    79ec:	mov	x21, x1
    79f0:	mov	x20, x0
    79f4:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    79f8:	mov	w19, w0
    79fc:	cbnz	w0, 7a38 <lzma_stream_encoder_mt@@XZ_5.2+0x5c>
    7a00:	ldp	x1, x0, [x20, #48]
    7a04:	mov	x2, x21
    7a08:	bl	7a4c <lzma_stream_encoder_mt@@XZ_5.2+0x70>
    7a0c:	mov	w19, w0
    7a10:	cbz	w0, 7a20 <lzma_stream_encoder_mt@@XZ_5.2+0x44>
    7a14:	mov	x0, x20
    7a18:	bl	32e0 <lzma_end@plt>
    7a1c:	b	7a38 <lzma_stream_encoder_mt@@XZ_5.2+0x5c>
    7a20:	ldr	x8, [x20, #56]
    7a24:	mov	w9, #0x1                   	// #1
    7a28:	mov	w10, #0x101                 	// #257
    7a2c:	strb	w9, [x8, #88]
    7a30:	strh	w10, [x8, #90]
    7a34:	strb	w9, [x8, #92]
    7a38:	mov	w0, w19
    7a3c:	ldp	x20, x19, [sp, #32]
    7a40:	ldr	x21, [sp, #16]
    7a44:	ldp	x29, x30, [sp], #48
    7a48:	ret
    7a4c:	sub	sp, sp, #0x150
    7a50:	stp	x29, x30, [sp, #240]
    7a54:	stp	x26, x25, [sp, #272]
    7a58:	stp	x24, x23, [sp, #288]
    7a5c:	stp	x22, x21, [sp, #304]
    7a60:	stp	x20, x19, [sp, #320]
    7a64:	ldr	x8, [x0, #16]
    7a68:	adrp	x21, 7000 <lzma_stream_encoder@@XZ_5.0+0xa8>
    7a6c:	add	x21, x21, #0xa4c
    7a70:	mov	x19, x2
    7a74:	mov	x23, x0
    7a78:	cmp	x8, x21
    7a7c:	mov	x20, x1
    7a80:	str	x28, [sp, #256]
    7a84:	add	x29, sp, #0xf0
    7a88:	b.eq	7a98 <lzma_stream_encoder_mt@@XZ_5.2+0xbc>  // b.none
    7a8c:	mov	x0, x23
    7a90:	mov	x1, x20
    7a94:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    7a98:	add	x1, sp, #0x20
    7a9c:	add	x2, sp, #0x18
    7aa0:	add	x3, sp, #0x10
    7aa4:	add	x4, sp, #0x8
    7aa8:	mov	x0, x19
    7aac:	str	x21, [x23, #16]
    7ab0:	bl	7e1c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcc>
    7ab4:	cbz	w0, 7ad8 <lzma_stream_encoder_mt@@XZ_5.2+0xfc>
    7ab8:	ldp	x20, x19, [sp, #320]
    7abc:	ldp	x22, x21, [sp, #304]
    7ac0:	ldp	x24, x23, [sp, #288]
    7ac4:	ldp	x26, x25, [sp, #272]
    7ac8:	ldr	x28, [sp, #256]
    7acc:	ldp	x29, x30, [sp, #240]
    7ad0:	add	sp, sp, #0x150
    7ad4:	ret
    7ad8:	ldr	x22, [sp, #24]
    7adc:	mov	x0, x22
    7ae0:	bl	31d0 <lzma_raw_encoder_memusage@plt>
    7ae4:	cmn	x0, #0x1
    7ae8:	b.eq	7b00 <lzma_stream_encoder_mt@@XZ_5.2+0x124>  // b.none
    7aec:	ldr	w0, [x19, #32]
    7af0:	cmp	w0, #0xf
    7af4:	b.ls	7b08 <lzma_stream_encoder_mt@@XZ_5.2+0x12c>  // b.plast
    7af8:	mov	w0, #0xb                   	// #11
    7afc:	b	7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7b00:	mov	w0, #0x8                   	// #8
    7b04:	b	7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7b08:	bl	30a0 <lzma_check_is_supported@plt>
    7b0c:	tst	w0, #0xff
    7b10:	b.eq	7b54 <lzma_stream_encoder_mt@@XZ_5.2+0x178>  // b.none
    7b14:	ldr	x21, [x23]
    7b18:	cbz	x21, 7b5c <lzma_stream_encoder_mt@@XZ_5.2+0x180>
    7b1c:	str	wzr, [x21]
    7b20:	ldr	x8, [sp, #16]
    7b24:	str	wzr, [x21, #308]
    7b28:	str	xzr, [x21, #336]
    7b2c:	str	x8, [x21, #8]
    7b30:	ldr	w8, [x21, #320]
    7b34:	ldr	w9, [x19, #4]
    7b38:	cmp	w8, w9
    7b3c:	b.ne	7bc4 <lzma_stream_encoder_mt@@XZ_5.2+0x1e8>  // b.any
    7b40:	mov	w1, #0x1                   	// #1
    7b44:	mov	x0, x21
    7b48:	bl	87ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa9c>
    7b4c:	ldr	w3, [x19, #4]
    7b50:	b	7bfc <lzma_stream_encoder_mt@@XZ_5.2+0x220>
    7b54:	mov	w0, #0x3                   	// #3
    7b58:	b	7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7b5c:	mov	w0, #0x1d0                 	// #464
    7b60:	mov	x1, x20
    7b64:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    7b68:	cbz	x0, 7cec <lzma_stream_encoder_mt@@XZ_5.2+0x310>
    7b6c:	add	x24, x0, #0x168
    7b70:	mov	x21, x0
    7b74:	str	x0, [x23]
    7b78:	mov	x0, x24
    7b7c:	mov	x1, xzr
    7b80:	bl	3260 <pthread_mutex_init@plt>
    7b84:	cbnz	w0, 7cdc <lzma_stream_encoder_mt@@XZ_5.2+0x300>
    7b88:	sub	x1, x29, #0x10
    7b8c:	mov	w0, #0x1                   	// #1
    7b90:	add	x25, x21, #0x198
    7b94:	bl	3110 <clock_gettime@plt>
    7b98:	cbnz	w0, 7cc0 <lzma_stream_encoder_mt@@XZ_5.2+0x2e4>
    7b9c:	add	x0, x29, #0x18
    7ba0:	bl	3380 <pthread_condattr_init@plt>
    7ba4:	cbnz	w0, 7cc0 <lzma_stream_encoder_mt@@XZ_5.2+0x2e4>
    7ba8:	add	x0, x29, #0x18
    7bac:	mov	w1, #0x1                   	// #1
    7bb0:	bl	3440 <pthread_condattr_setclock@plt>
    7bb4:	cbz	w0, 7ca4 <lzma_stream_encoder_mt@@XZ_5.2+0x2c8>
    7bb8:	add	x0, x29, #0x18
    7bbc:	bl	3190 <pthread_condattr_destroy@plt>
    7bc0:	b	7cc0 <lzma_stream_encoder_mt@@XZ_5.2+0x2e4>
    7bc4:	mov	x0, x21
    7bc8:	mov	x1, x20
    7bcc:	bl	8720 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9d0>
    7bd0:	stp	xzr, xzr, [x21, #312]
    7bd4:	str	xzr, [x21, #328]
    7bd8:	ldr	w8, [x19, #4]
    7bdc:	mov	w9, #0x1d0                 	// #464
    7be0:	mov	x1, x20
    7be4:	mul	x0, x8, x9
    7be8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    7bec:	str	x0, [x21, #312]
    7bf0:	cbz	x0, 7cec <lzma_stream_encoder_mt@@XZ_5.2+0x310>
    7bf4:	ldr	w3, [x19, #4]
    7bf8:	str	w3, [x21, #320]
    7bfc:	ldr	x2, [sp, #8]
    7c00:	add	x0, x21, #0x100
    7c04:	mov	x1, x20
    7c08:	bl	7778 <lzma_vli_encode@@XZ_5.0+0xe4>
    7c0c:	cbnz	w0, 7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7c10:	ldr	x8, [x21, #16]
    7c14:	ldr	w9, [x19, #16]
    7c18:	cmn	x8, #0x1
    7c1c:	str	w9, [x21, #304]
    7c20:	b.eq	7c40 <lzma_stream_encoder_mt@@XZ_5.2+0x264>  // b.none
    7c24:	add	x23, x21, #0x20
    7c28:	ldur	x0, [x23, #-8]
    7c2c:	mov	x1, x20
    7c30:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7c34:	ldr	x8, [x23], #16
    7c38:	cmn	x8, #0x1
    7c3c:	b.ne	7c28 <lzma_stream_encoder_mt@@XZ_5.2+0x24c>  // b.any
    7c40:	add	x1, x21, #0x10
    7c44:	mov	x0, x22
    7c48:	mov	x2, x20
    7c4c:	bl	31f0 <lzma_filters_copy@plt>
    7c50:	cbnz	w0, 7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7c54:	ldr	x0, [x21, #96]
    7c58:	mov	x1, x20
    7c5c:	bl	3390 <lzma_index_end@plt>
    7c60:	mov	x0, x20
    7c64:	bl	3360 <lzma_index_init@plt>
    7c68:	str	x0, [x21, #96]
    7c6c:	cbz	x0, 7cec <lzma_stream_encoder_mt@@XZ_5.2+0x310>
    7c70:	mov	x0, x21
    7c74:	str	wzr, [x0, #176]!
    7c78:	ldr	w8, [x19, #32]
    7c7c:	add	x1, x0, #0x38
    7c80:	str	w8, [x0, #16]
    7c84:	bl	3340 <lzma_stream_header_encode@plt>
    7c88:	cbnz	w0, 7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7c8c:	adrp	x8, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    7c90:	ldr	q0, [x8, #2608]
    7c94:	add	x8, x21, #0x158
    7c98:	str	xzr, [x21, #248]
    7c9c:	str	q0, [x8]
    7ca0:	b	7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7ca4:	add	x1, x29, #0x18
    7ca8:	mov	x0, x25
    7cac:	bl	33d0 <pthread_cond_init@plt>
    7cb0:	mov	w26, w0
    7cb4:	add	x0, x29, #0x18
    7cb8:	bl	3190 <pthread_condattr_destroy@plt>
    7cbc:	cbz	w26, 7cf4 <lzma_stream_encoder_mt@@XZ_5.2+0x318>
    7cc0:	mov	x0, x25
    7cc4:	mov	x1, xzr
    7cc8:	str	wzr, [x21, #456]
    7ccc:	bl	33d0 <pthread_cond_init@plt>
    7cd0:	cbz	w0, 7cfc <lzma_stream_encoder_mt@@XZ_5.2+0x320>
    7cd4:	mov	x0, x24
    7cd8:	bl	33c0 <pthread_mutex_destroy@plt>
    7cdc:	mov	x0, x21
    7ce0:	mov	x1, x20
    7ce4:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    7ce8:	str	xzr, [x23]
    7cec:	mov	w0, #0x5                   	// #5
    7cf0:	b	7ab8 <lzma_stream_encoder_mt@@XZ_5.2+0xdc>
    7cf4:	mov	w8, #0x1                   	// #1
    7cf8:	str	w8, [x21, #456]
    7cfc:	adrp	x8, 7000 <lzma_stream_encoder@@XZ_5.0+0xa8>
    7d00:	adrp	x9, 8000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    7d04:	add	x8, x8, #0xee0
    7d08:	add	x9, x9, #0x5d8
    7d0c:	stp	x8, x9, [x23, #24]
    7d10:	adrp	x8, 8000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    7d14:	add	x8, x8, #0x668
    7d18:	str	x8, [x23, #40]
    7d1c:	mov	x8, #0xffffffffffffffff    	// #-1
    7d20:	movi	v0.2d, #0x0
    7d24:	str	x8, [x21, #16]
    7d28:	stp	xzr, x8, [x21, #104]
    7d2c:	str	xzr, [x21, #96]
    7d30:	stp	q0, q0, [x21, #256]
    7d34:	str	q0, [x21, #288]
    7d38:	stp	xzr, xzr, [x21, #312]
    7d3c:	stur	q0, [x21, #120]
    7d40:	stur	q0, [x21, #136]
    7d44:	stur	q0, [x21, #152]
    7d48:	str	xzr, [x21, #168]
    7d4c:	b	7b1c <lzma_stream_encoder_mt@@XZ_5.2+0x140>

0000000000007d50 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    7d50:	sub	sp, sp, #0x110
    7d54:	stp	x29, x30, [sp, #208]
    7d58:	add	x29, sp, #0xd0
    7d5c:	add	x1, sp, #0x10
    7d60:	add	x2, x29, #0x18
    7d64:	add	x3, sp, #0x8
    7d68:	mov	x4, sp
    7d6c:	str	x28, [sp, #224]
    7d70:	stp	x22, x21, [sp, #240]
    7d74:	stp	x20, x19, [sp, #256]
    7d78:	mov	x19, x0
    7d7c:	bl	7e1c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcc>
    7d80:	cbz	w0, 7da0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x50>
    7d84:	mov	x0, #0xffffffffffffffff    	// #-1
    7d88:	ldp	x20, x19, [sp, #256]
    7d8c:	ldp	x22, x21, [sp, #240]
    7d90:	ldr	x28, [sp, #224]
    7d94:	ldp	x29, x30, [sp, #208]
    7d98:	add	sp, sp, #0x110
    7d9c:	ret
    7da0:	ldr	x0, [x29, #24]
    7da4:	ldr	w20, [x19, #4]
    7da8:	ldr	x22, [sp, #8]
    7dac:	bl	31d0 <lzma_raw_encoder_memusage@plt>
    7db0:	cmn	x0, #0x1
    7db4:	b.eq	7d88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x38>  // b.none
    7db8:	mov	x21, x0
    7dbc:	ldr	x0, [sp]
    7dc0:	mov	w1, w20
    7dc4:	bl	7748 <lzma_vli_encode@@XZ_5.0+0xb4>
    7dc8:	cmn	x0, #0x1
    7dcc:	b.eq	7d88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x38>  // b.none
    7dd0:	ldr	w9, [x19, #4]
    7dd4:	mov	w10, #0x1d0                 	// #464
    7dd8:	mul	x8, x22, x20
    7ddc:	mul	x10, x9, x10
    7de0:	mov	x9, #0xffffffffffff7e2f    	// #-33233
    7de4:	sub	x9, x9, x10
    7de8:	cmp	x9, x8
    7dec:	b.cc	7d84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x34>  // b.lo, b.ul, b.last
    7df0:	add	x8, x8, x10
    7df4:	mov	w10, #0x81d0                	// #33232
    7df8:	add	x8, x8, x10
    7dfc:	mul	x9, x21, x20
    7e00:	mvn	x10, x8
    7e04:	cmp	x9, x10
    7e08:	b.hi	7d84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x34>  // b.pmore
    7e0c:	add	x8, x8, x9
    7e10:	adds	x8, x8, x0
    7e14:	csinv	x0, x8, xzr, cc  // cc = lo, ul, last
    7e18:	b	7d88 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x38>
    7e1c:	stp	x29, x30, [sp, #-64]!
    7e20:	str	x23, [sp, #16]
    7e24:	stp	x22, x21, [sp, #32]
    7e28:	stp	x20, x19, [sp, #48]
    7e2c:	mov	x29, sp
    7e30:	cbz	x0, 7e58 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x108>
    7e34:	ldr	w8, [x0]
    7e38:	mov	x22, x0
    7e3c:	cbnz	w8, 7e50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    7e40:	ldr	w8, [x22, #4]
    7e44:	sub	w8, w8, #0x1
    7e48:	lsr	w8, w8, #14
    7e4c:	cbz	w8, 7e70 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x120>
    7e50:	mov	w0, #0x8                   	// #8
    7e54:	b	7e5c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10c>
    7e58:	mov	w0, #0xb                   	// #11
    7e5c:	ldp	x20, x19, [sp, #48]
    7e60:	ldp	x22, x21, [sp, #32]
    7e64:	ldr	x23, [sp, #16]
    7e68:	ldp	x29, x30, [sp], #64
    7e6c:	ret
    7e70:	ldr	x8, [x22, #24]
    7e74:	mov	x19, x4
    7e78:	mov	x20, x3
    7e7c:	mov	x21, x2
    7e80:	cbnz	x8, 7e9c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x14c>
    7e84:	mov	x23, x1
    7e88:	ldr	w1, [x22, #20]
    7e8c:	mov	x0, x23
    7e90:	bl	3ee4 <lzma_block_total_size@@XZ_5.0+0x24>
    7e94:	tbnz	w0, #0, 7e50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    7e98:	mov	x8, x23
    7e9c:	str	x8, [x21]
    7ea0:	ldr	x0, [x22, #8]
    7ea4:	cbz	x0, 7eb8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x168>
    7ea8:	lsr	x8, x0, #50
    7eac:	cbnz	x8, 7e50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    7eb0:	str	x0, [x20]
    7eb4:	b	7ec8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x178>
    7eb8:	mov	x0, x8
    7ebc:	bl	6694 <lzma_raw_encoder@@XZ_5.0+0x78>
    7ec0:	str	x0, [x20]
    7ec4:	cbz	x0, 7e50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100>
    7ec8:	bl	5768 <lzma_alone_encoder@@XZ_5.0+0x2fc>
    7ecc:	cmp	x0, #0x0
    7ed0:	mov	w8, #0x5                   	// #5
    7ed4:	str	x0, [x19]
    7ed8:	csel	w0, w8, wzr, eq  // eq = none
    7edc:	b	7e5c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10c>
    7ee0:	stp	x29, x30, [sp, #-96]!
    7ee4:	stp	x28, x27, [sp, #16]
    7ee8:	stp	x26, x25, [sp, #32]
    7eec:	stp	x24, x23, [sp, #48]
    7ef0:	stp	x22, x21, [sp, #64]
    7ef4:	stp	x20, x19, [sp, #80]
    7ef8:	mov	x29, sp
    7efc:	sub	sp, sp, #0x1b0
    7f00:	ldr	w8, [x0]
    7f04:	str	x2, [sp, #120]
    7f08:	cmp	w8, #0x3
    7f0c:	b.hi	857c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x82c>  // b.pmore
    7f10:	adrp	x9, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    7f14:	add	x9, x9, #0xa70
    7f18:	adr	x10, 7f44 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1f4>
    7f1c:	ldrh	w11, [x9, x8, lsl #1]
    7f20:	add	x10, x10, x11, lsl #2
    7f24:	mov	x20, x7
    7f28:	mov	x21, x6
    7f2c:	mov	x26, x5
    7f30:	mov	x24, x4
    7f34:	mov	x25, x3
    7f38:	mov	x19, x0
    7f3c:	mov	x23, x1
    7f40:	br	x10
    7f44:	add	x0, x19, #0xe8
    7f48:	add	x1, x19, #0xf8
    7f4c:	mov	w2, #0xc                   	// #12
    7f50:	mov	x3, x26
    7f54:	mov	x4, x21
    7f58:	mov	x5, x20
    7f5c:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    7f60:	ldr	x8, [x19, #248]
    7f64:	cmp	x8, #0xc
    7f68:	b.cs	7f74 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x224>  // b.hs, b.nlast
    7f6c:	mov	w22, wzr
    7f70:	b	85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>
    7f74:	mov	w8, #0x1                   	// #1
    7f78:	str	xzr, [x19, #248]
    7f7c:	str	w8, [x19]
    7f80:	add	x8, x19, #0x198
    7f84:	str	x8, [sp, #104]
    7f88:	adrp	x8, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    7f8c:	ldr	q0, [x8, #2656]
    7f90:	str	x23, [sp, #112]
    7f94:	ldr	w23, [x29, #96]
    7f98:	mov	w8, #0xc9ff                	// #51711
    7f9c:	movk	w8, #0x3b9a, lsl #16
    7fa0:	add	x27, x19, #0x168
    7fa4:	add	x28, x19, #0x100
    7fa8:	str	q0, [sp, #64]
    7fac:	fmov	d0, x8
    7fb0:	str	x26, [sp, #88]
    7fb4:	str	wzr, [sp, #100]
    7fb8:	stp	xzr, xzr, [sp, #144]
    7fbc:	str	q0, [sp, #48]
    7fc0:	ldr	x26, [sp, #88]
    7fc4:	mov	x0, x27
    7fc8:	bl	34e0 <pthread_mutex_lock@plt>
    7fcc:	ldr	w22, [x19, #308]
    7fd0:	cbnz	w22, 7ff4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2a4>
    7fd4:	add	x4, sp, #0x98
    7fd8:	add	x5, sp, #0x90
    7fdc:	mov	x0, x28
    7fe0:	mov	x1, x26
    7fe4:	mov	x2, x21
    7fe8:	mov	x3, x20
    7fec:	bl	7914 <lzma_vli_encode@@XZ_5.0+0x280>
    7ff0:	mov	w22, w0
    7ff4:	mov	x0, x27
    7ff8:	bl	3500 <pthread_mutex_unlock@plt>
    7ffc:	cmp	w22, #0x1
    8000:	b.ne	8024 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d4>  // b.any
    8004:	ldr	x0, [x19, #96]
    8008:	ldp	x3, x2, [sp, #144]
    800c:	ldr	x1, [sp, #112]
    8010:	bl	32c0 <lzma_index_append@plt>
    8014:	ldr	x8, [x21]
    8018:	cmp	x8, x20
    801c:	b.cc	7fc4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x274>  // b.lo, b.ul, b.last
    8020:	mov	w22, w0
    8024:	cbnz	w22, 84c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x778>
    8028:	ldr	x22, [x25]
    802c:	ldr	x8, [x19, #336]
    8030:	cmp	x22, x24
    8034:	b.cs	80b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x368>  // b.hs, b.nlast
    8038:	cbnz	x8, 80e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x390>
    803c:	ldr	w8, [x19, #288]
    8040:	ldr	w9, [x19, #280]
    8044:	cmp	w8, w9
    8048:	b.cs	80d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x384>  // b.hs, b.nlast
    804c:	mov	x0, x27
    8050:	bl	34e0 <pthread_mutex_lock@plt>
    8054:	ldr	x8, [x19, #328]
    8058:	cbz	x8, 8068 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x318>
    805c:	str	x8, [x19, #336]
    8060:	ldr	x8, [x8, #344]
    8064:	str	x8, [x19, #328]
    8068:	mov	x0, x27
    806c:	bl	3500 <pthread_mutex_unlock@plt>
    8070:	ldr	x22, [x19, #336]
    8074:	cbz	x22, 80c4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x374>
    8078:	add	x0, x22, #0x160
    807c:	bl	34e0 <pthread_mutex_lock@plt>
    8080:	ldr	x8, [x19, #336]
    8084:	mov	w9, #0x1                   	// #1
    8088:	mov	x0, x28
    808c:	str	w9, [x8]
    8090:	str	xzr, [x8, #16]
    8094:	bl	78a8 <lzma_vli_encode@@XZ_5.0+0x214>
    8098:	ldr	x8, [x19, #336]
    809c:	str	x0, [x8, #24]
    80a0:	add	x0, x8, #0x190
    80a4:	bl	31b0 <pthread_cond_signal@plt>
    80a8:	ldr	x8, [x19, #336]
    80ac:	add	x0, x8, #0x160
    80b0:	bl	3500 <pthread_mutex_unlock@plt>
    80b4:	b	80d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x384>
    80b8:	cbz	w23, 8384 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x634>
    80bc:	cbnz	x8, 80e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x390>
    80c0:	b	8384 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x634>
    80c4:	ldr	w9, [x19, #324]
    80c8:	ldr	w8, [x19, #320]
    80cc:	cmp	w9, w8
    80d0:	b.ne	8190 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x440>  // b.any
    80d4:	mov	w22, wzr
    80d8:	ldr	x8, [x19, #336]
    80dc:	cbz	x8, 837c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x62c>
    80e0:	ldp	x3, x9, [x8, #8]
    80e4:	ldr	x0, [sp, #120]
    80e8:	sub	x4, x29, #0x90
    80ec:	mov	x1, x25
    80f0:	stur	x9, [x29, #-144]
    80f4:	ldr	x5, [x19, #8]
    80f8:	mov	x2, x24
    80fc:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    8100:	ldur	x8, [x29, #-144]
    8104:	ldr	x9, [x19, #8]
    8108:	cmp	x8, x9
    810c:	b.ne	8118 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3c8>  // b.any
    8110:	mov	w22, #0x1                   	// #1
    8114:	b	8130 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3e0>
    8118:	ldr	x8, [x25]
    811c:	cmp	w23, #0x0
    8120:	cset	w9, ne  // ne = any
    8124:	cmp	x8, x24
    8128:	cset	w8, eq  // eq = none
    812c:	and	w22, w9, w8
    8130:	ldr	x8, [x19, #336]
    8134:	add	x0, x8, #0x160
    8138:	bl	34e0 <pthread_mutex_lock@plt>
    813c:	ldr	x8, [x19, #336]
    8140:	ldr	w9, [x8]
    8144:	cbz	w9, 8360 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x610>
    8148:	ldur	x9, [x29, #-144]
    814c:	str	x9, [x8, #16]
    8150:	cbz	w22, 8178 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x428>
    8154:	mov	w9, #0x2                   	// #2
    8158:	add	x0, x8, #0x190
    815c:	str	w9, [x8]
    8160:	bl	31b0 <pthread_cond_signal@plt>
    8164:	ldr	x8, [x19, #336]
    8168:	add	x0, x8, #0x160
    816c:	bl	3500 <pthread_mutex_unlock@plt>
    8170:	str	xzr, [x19, #336]
    8174:	b	8028 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d8>
    8178:	add	x0, x8, #0x190
    817c:	bl	31b0 <pthread_cond_signal@plt>
    8180:	ldr	x8, [x19, #336]
    8184:	add	x0, x8, #0x160
    8188:	bl	3500 <pthread_mutex_unlock@plt>
    818c:	b	8028 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d8>
    8190:	ldr	x26, [x19, #312]
    8194:	ldr	x0, [x19, #8]
    8198:	ldr	x1, [sp, #112]
    819c:	mov	w8, #0x1d0                 	// #464
    81a0:	madd	x22, x9, x8, x26
    81a4:	str	x9, [sp, #80]
    81a8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    81ac:	mov	x8, x22
    81b0:	str	x0, [x8, #8]!
    81b4:	cbz	x0, 8320 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5d0>
    81b8:	str	x8, [sp, #40]
    81bc:	ldr	x8, [sp, #80]
    81c0:	mov	w9, #0x1d0                 	// #464
    81c4:	mov	x1, xzr
    81c8:	madd	x8, x8, x9, x26
    81cc:	add	x0, x8, #0x160
    81d0:	str	x0, [sp, #32]
    81d4:	bl	3260 <pthread_mutex_init@plt>
    81d8:	cbnz	w0, 8310 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5c0>
    81dc:	ldr	x9, [sp, #80]
    81e0:	mov	w8, #0x1d0                 	// #464
    81e4:	sub	x1, x29, #0x90
    81e8:	mov	w0, #0x1                   	// #1
    81ec:	madd	x8, x9, x8, x26
    81f0:	str	x26, [sp, #24]
    81f4:	add	x26, x8, #0x190
    81f8:	bl	3110 <clock_gettime@plt>
    81fc:	cbnz	w0, 8254 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x504>
    8200:	add	x0, sp, #0xa0
    8204:	bl	3380 <pthread_condattr_init@plt>
    8208:	cbnz	w0, 8254 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x504>
    820c:	add	x0, sp, #0xa0
    8210:	mov	w1, #0x1                   	// #1
    8214:	str	x26, [sp, #16]
    8218:	bl	3440 <pthread_condattr_setclock@plt>
    821c:	cbz	w0, 8230 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4e0>
    8220:	add	x0, sp, #0xa0
    8224:	bl	3190 <pthread_condattr_destroy@plt>
    8228:	ldr	x26, [sp, #16]
    822c:	b	8254 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x504>
    8230:	ldr	x26, [sp, #16]
    8234:	add	x1, sp, #0xa0
    8238:	mov	x0, x26
    823c:	bl	33d0 <pthread_cond_init@plt>
    8240:	str	w0, [sp, #12]
    8244:	add	x0, sp, #0xa0
    8248:	bl	3190 <pthread_condattr_destroy@plt>
    824c:	ldr	w8, [sp, #12]
    8250:	cbz	w8, 8344 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5f4>
    8254:	ldr	x9, [sp, #80]
    8258:	ldr	x10, [sp, #24]
    825c:	mov	w8, #0x1d0                 	// #464
    8260:	mov	x0, x26
    8264:	mov	x1, xzr
    8268:	madd	x8, x9, x8, x10
    826c:	str	wzr, [x8, #448]
    8270:	bl	33d0 <pthread_cond_init@plt>
    8274:	cbnz	w0, 8308 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5b8>
    8278:	ldr	x9, [sp, #80]
    827c:	ldr	x10, [sp, #24]
    8280:	mov	w8, #0x1d0                 	// #464
    8284:	str	x26, [sp, #16]
    8288:	str	wzr, [x22]
    828c:	madd	x8, x9, x8, x10
    8290:	ldr	x9, [sp, #112]
    8294:	movi	v0.2d, #0x0
    8298:	add	x0, sp, #0xa0
    829c:	stp	xzr, xzr, [x8, #48]
    82a0:	stp	x19, x9, [x8, #32]
    82a4:	mov	x9, #0xffffffffffffffff    	// #-1
    82a8:	stp	xzr, x9, [x8, #64]
    82ac:	add	x26, x8, #0x1c8
    82b0:	stp	q0, q0, [x8, #80]
    82b4:	str	q0, [x8, #112]
    82b8:	str	xzr, [x8, #128]
    82bc:	bl	3130 <sigfillset@plt>
    82c0:	add	x1, sp, #0xa0
    82c4:	sub	x2, x29, #0x90
    82c8:	mov	w0, #0x2                   	// #2
    82cc:	bl	3080 <pthread_sigmask@plt>
    82d0:	adrp	x2, 8000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    82d4:	mov	x0, x26
    82d8:	mov	x1, xzr
    82dc:	add	x2, x2, #0x8ec
    82e0:	mov	x3, x22
    82e4:	bl	3270 <pthread_create@plt>
    82e8:	mov	w26, w0
    82ec:	sub	x1, x29, #0x90
    82f0:	mov	w0, #0x2                   	// #2
    82f4:	mov	x2, xzr
    82f8:	bl	3080 <pthread_sigmask@plt>
    82fc:	cbz	w26, 832c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5dc>
    8300:	ldr	x0, [sp, #16]
    8304:	bl	34d0 <pthread_cond_destroy@plt>
    8308:	ldr	x0, [sp, #32]
    830c:	bl	33c0 <pthread_mutex_destroy@plt>
    8310:	ldr	x8, [sp, #40]
    8314:	ldr	x1, [sp, #112]
    8318:	ldr	x0, [x8]
    831c:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    8320:	ldr	x26, [sp, #88]
    8324:	mov	w22, #0x5                   	// #5
    8328:	b	80d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x388>
    832c:	ldr	w8, [x19, #324]
    8330:	ldr	x26, [sp, #88]
    8334:	str	x22, [x19, #336]
    8338:	add	w8, w8, #0x1
    833c:	str	w8, [x19, #324]
    8340:	b	8078 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x328>
    8344:	ldr	x9, [sp, #80]
    8348:	ldr	x10, [sp, #24]
    834c:	mov	w8, #0x1d0                 	// #464
    8350:	madd	x8, x9, x8, x10
    8354:	mov	w9, #0x1                   	// #1
    8358:	str	w9, [x8, #448]
    835c:	b	8278 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x528>
    8360:	add	x0, x8, #0x160
    8364:	bl	3500 <pthread_mutex_unlock@plt>
    8368:	mov	x0, x27
    836c:	bl	34e0 <pthread_mutex_lock@plt>
    8370:	ldr	w22, [x19, #308]
    8374:	mov	x0, x27
    8378:	bl	3500 <pthread_mutex_unlock@plt>
    837c:	cbnz	w22, 84c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x778>
    8380:	ldr	x22, [x25]
    8384:	cmp	x22, x24
    8388:	b.ne	83b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x660>  // b.any
    838c:	cbz	w23, 84e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x790>
    8390:	cmp	w23, #0x4
    8394:	b.eq	84d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x788>  // b.none
    8398:	ldr	w8, [x19, #288]
    839c:	cbnz	w8, 83b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x660>
    83a0:	cmp	w23, #0x2
    83a4:	b.eq	84d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x788>  // b.none
    83a8:	cmp	w23, #0x3
    83ac:	b.eq	84e8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x798>  // b.none
    83b0:	ldr	x8, [x21]
    83b4:	cmp	x8, x20
    83b8:	b.eq	7f6c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x21c>  // b.none
    83bc:	ldr	w8, [sp, #100]
    83c0:	tst	w8, #0xff
    83c4:	b.ne	8434 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6e4>  // b.any
    83c8:	ldr	w8, [x19, #304]
    83cc:	cbz	w8, 8434 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6e4>
    83d0:	mov	w9, #0x4dd3                	// #19923
    83d4:	movk	w9, #0x1062, lsl #16
    83d8:	umull	x9, w8, w9
    83dc:	lsr	x9, x9, #38
    83e0:	mov	w10, #0x3e8                 	// #1000
    83e4:	msub	w8, w9, w10, w8
    83e8:	mov	w10, #0x4240                	// #16960
    83ec:	movk	w10, #0xf, lsl #16
    83f0:	mul	w8, w8, w10
    83f4:	stp	x9, x8, [sp, #128]
    83f8:	ldr	w0, [x19, #456]
    83fc:	sub	x1, x29, #0x90
    8400:	bl	3110 <clock_gettime@plt>
    8404:	ldur	q0, [x29, #-144]
    8408:	ldr	q1, [sp, #128]
    840c:	ldp	q3, q2, [sp, #48]
    8410:	mov	w8, #0x1                   	// #1
    8414:	str	w8, [sp, #100]
    8418:	add	v0.2d, v1.2d, v0.2d
    841c:	dup	v1.2d, v0.d[1]
    8420:	cmgt	v1.2d, v1.2d, v3.2d
    8424:	add	v2.2d, v0.2d, v2.2d
    8428:	dup	v1.2d, v1.d[0]
    842c:	bsl	v1.16b, v2.16b, v0.16b
    8430:	str	q1, [sp, #128]
    8434:	mov	x0, x27
    8438:	bl	34e0 <pthread_mutex_lock@plt>
    843c:	mov	w26, wzr
    8440:	cmp	x22, x24
    8444:	b.cs	8460 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x710>  // b.hs, b.nlast
    8448:	ldr	x8, [x19, #328]
    844c:	cbz	x8, 8460 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x710>
    8450:	ldr	w8, [x19, #288]
    8454:	ldr	w9, [x19, #280]
    8458:	cmp	w8, w9
    845c:	b.cc	84b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x764>  // b.lo, b.ul, b.last
    8460:	mov	x0, x28
    8464:	bl	78ec <lzma_vli_encode@@XZ_5.0+0x258>
    8468:	tbnz	w0, #0, 84b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x764>
    846c:	ldr	w8, [x19, #308]
    8470:	cmp	w8, #0x0
    8474:	cset	w8, ne  // ne = any
    8478:	orr	w8, w26, w8
    847c:	tbnz	w8, #0, 84b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x764>
    8480:	ldr	w8, [x19, #304]
    8484:	cbz	w8, 84a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x754>
    8488:	ldr	x0, [sp, #104]
    848c:	add	x2, sp, #0x80
    8490:	mov	x1, x27
    8494:	bl	3510 <pthread_cond_timedwait@plt>
    8498:	cmp	w0, #0x0
    849c:	cset	w26, ne  // ne = any
    84a0:	b	8440 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6f0>
    84a4:	ldr	x0, [sp, #104]
    84a8:	mov	x1, x27
    84ac:	bl	3350 <pthread_cond_wait@plt>
    84b0:	b	843c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6ec>
    84b4:	mov	x0, x27
    84b8:	bl	3500 <pthread_mutex_unlock@plt>
    84bc:	tbz	w26, #0, 7fc0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x270>
    84c0:	mov	w22, #0x20                  	// #32
    84c4:	b	85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>
    84c8:	mov	x0, x19
    84cc:	mov	w1, wzr
    84d0:	bl	87ec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa9c>
    84d4:	b	85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>
    84d8:	mov	w22, #0x1                   	// #1
    84dc:	b	85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>
    84e0:	mov	w22, w23
    84e4:	b	85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>
    84e8:	ldr	x23, [sp, #112]
    84ec:	ldr	x2, [x19, #96]
    84f0:	add	x0, x19, #0x68
    84f4:	mov	x1, x23
    84f8:	bl	6908 <lzma_filter_flags_encode@@XZ_5.0+0xc8>
    84fc:	mov	w22, w0
    8500:	cbnz	w0, 85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>
    8504:	ldr	x0, [x19, #96]
    8508:	mov	w8, #0x2                   	// #2
    850c:	str	w8, [x19]
    8510:	bl	34c0 <lzma_index_size@plt>
    8514:	ldr	x8, [x19, #352]
    8518:	add	x8, x0, x8
    851c:	add	x8, x8, #0xc
    8520:	str	x8, [x19, #352]
    8524:	ldr	x8, [x19, #128]
    8528:	ldr	x0, [x19, #104]
    852c:	mov	x1, x23
    8530:	mov	x2, xzr
    8534:	mov	x3, xzr
    8538:	mov	x4, xzr
    853c:	mov	x5, x26
    8540:	mov	x6, x21
    8544:	mov	x7, x20
    8548:	str	wzr, [sp]
    854c:	blr	x8
    8550:	mov	w22, w0
    8554:	cmp	w0, #0x1
    8558:	b.ne	85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>  // b.any
    855c:	ldr	x0, [x19, #96]
    8560:	bl	34c0 <lzma_index_size@plt>
    8564:	add	x8, x19, #0xb0
    8568:	str	x0, [x19, #184]
    856c:	add	x1, x19, #0xe8
    8570:	mov	x0, x8
    8574:	bl	31c0 <lzma_stream_footer_encode@plt>
    8578:	cbz	w0, 8584 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x834>
    857c:	mov	w22, #0xb                   	// #11
    8580:	b	85b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x864>
    8584:	mov	w8, #0x3                   	// #3
    8588:	str	w8, [x19]
    858c:	add	x0, x19, #0xe8
    8590:	add	x1, x19, #0xf8
    8594:	mov	w2, #0xc                   	// #12
    8598:	mov	x3, x26
    859c:	mov	x4, x21
    85a0:	mov	x5, x20
    85a4:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    85a8:	ldr	x8, [x19, #248]
    85ac:	cmp	x8, #0xb
    85b0:	cset	w22, hi  // hi = pmore
    85b4:	mov	w0, w22
    85b8:	add	sp, sp, #0x1b0
    85bc:	ldp	x20, x19, [sp, #80]
    85c0:	ldp	x22, x21, [sp, #64]
    85c4:	ldp	x24, x23, [sp, #48]
    85c8:	ldp	x26, x25, [sp, #32]
    85cc:	ldp	x28, x27, [sp, #16]
    85d0:	ldp	x29, x30, [sp], #96
    85d4:	ret
    85d8:	stp	x29, x30, [sp, #-48]!
    85dc:	str	x21, [sp, #16]
    85e0:	stp	x20, x19, [sp, #32]
    85e4:	mov	x29, sp
    85e8:	mov	x19, x1
    85ec:	mov	x20, x0
    85f0:	bl	8720 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9d0>
    85f4:	add	x0, x20, #0x100
    85f8:	mov	x1, x19
    85fc:	bl	786c <lzma_vli_encode@@XZ_5.0+0x1d8>
    8600:	ldr	x8, [x20, #16]
    8604:	cmn	x8, #0x1
    8608:	b.eq	8628 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8d8>  // b.none
    860c:	add	x21, x20, #0x20
    8610:	ldur	x0, [x21, #-8]
    8614:	mov	x1, x19
    8618:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    861c:	ldr	x8, [x21], #16
    8620:	cmn	x8, #0x1
    8624:	b.ne	8610 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8c0>  // b.any
    8628:	add	x0, x20, #0x68
    862c:	mov	x1, x19
    8630:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    8634:	ldr	x0, [x20, #96]
    8638:	mov	x1, x19
    863c:	bl	3390 <lzma_index_end@plt>
    8640:	add	x0, x20, #0x198
    8644:	bl	34d0 <pthread_cond_destroy@plt>
    8648:	add	x0, x20, #0x168
    864c:	bl	33c0 <pthread_mutex_destroy@plt>
    8650:	mov	x0, x20
    8654:	mov	x1, x19
    8658:	ldp	x20, x19, [sp, #32]
    865c:	ldr	x21, [sp, #16]
    8660:	ldp	x29, x30, [sp], #48
    8664:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    8668:	stp	x29, x30, [sp, #-64]!
    866c:	stp	x22, x21, [sp, #32]
    8670:	add	x21, x0, #0x168
    8674:	mov	x22, x0
    8678:	mov	x0, x21
    867c:	stp	x24, x23, [sp, #16]
    8680:	stp	x20, x19, [sp, #48]
    8684:	mov	x29, sp
    8688:	mov	x19, x2
    868c:	mov	x20, x1
    8690:	bl	34e0 <pthread_mutex_lock@plt>
    8694:	ldr	x8, [x22, #344]
    8698:	str	x8, [x20]
    869c:	ldr	x8, [x22, #352]
    86a0:	str	x8, [x19]
    86a4:	ldr	w8, [x22, #324]
    86a8:	cbz	w8, 8708 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x9b8>
    86ac:	mov	x23, xzr
    86b0:	mov	w24, #0x160                 	// #352
    86b4:	ldr	x8, [x22, #312]
    86b8:	add	x0, x8, x24
    86bc:	bl	34e0 <pthread_mutex_lock@plt>
    86c0:	ldr	x8, [x22, #312]
    86c4:	ldr	x9, [x20]
    86c8:	add	x0, x8, x24
    86cc:	sub	x8, x0, #0x130
    86d0:	ldr	x8, [x8]
    86d4:	sub	x10, x0, #0x128
    86d8:	add	x8, x9, x8
    86dc:	str	x8, [x20]
    86e0:	ldr	x8, [x10]
    86e4:	ldr	x9, [x19]
    86e8:	add	x8, x9, x8
    86ec:	str	x8, [x19]
    86f0:	bl	3500 <pthread_mutex_unlock@plt>
    86f4:	ldr	w8, [x22, #324]
    86f8:	add	x23, x23, #0x1
    86fc:	add	x24, x24, #0x1d0
    8700:	cmp	x23, x8
    8704:	b.cc	86b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x964>  // b.lo, b.ul, b.last
    8708:	mov	x0, x21
    870c:	ldp	x20, x19, [sp, #48]
    8710:	ldp	x22, x21, [sp, #32]
    8714:	ldp	x24, x23, [sp, #16]
    8718:	ldp	x29, x30, [sp], #64
    871c:	b	3500 <pthread_mutex_unlock@plt>
    8720:	stp	x29, x30, [sp, #-64]!
    8724:	stp	x22, x21, [sp, #32]
    8728:	stp	x20, x19, [sp, #48]
    872c:	ldr	w8, [x0, #324]
    8730:	mov	x20, x0
    8734:	mov	x19, x1
    8738:	str	x23, [sp, #16]
    873c:	mov	x29, sp
    8740:	cbz	w8, 87cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa7c>
    8744:	mov	x21, xzr
    8748:	mov	w22, #0x160                 	// #352
    874c:	mov	w23, #0x4                   	// #4
    8750:	ldr	x8, [x20, #312]
    8754:	add	x0, x8, x22
    8758:	bl	34e0 <pthread_mutex_lock@plt>
    875c:	ldr	x8, [x20, #312]
    8760:	add	x8, x8, x22
    8764:	sub	x9, x8, #0x160
    8768:	add	x0, x8, #0x30
    876c:	str	w23, [x9]
    8770:	bl	31b0 <pthread_cond_signal@plt>
    8774:	ldr	x8, [x20, #312]
    8778:	add	x0, x8, x22
    877c:	bl	3500 <pthread_mutex_unlock@plt>
    8780:	ldr	w8, [x20, #324]
    8784:	add	x21, x21, #0x1
    8788:	add	x22, x22, #0x1d0
    878c:	cmp	x21, x8
    8790:	b.cc	8750 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa00>  // b.lo, b.ul, b.last
    8794:	add	x21, x20, #0x138
    8798:	cbz	w8, 87d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa80>
    879c:	mov	x22, xzr
    87a0:	mov	w23, #0x1c8                 	// #456
    87a4:	ldr	x8, [x20, #312]
    87a8:	mov	x1, xzr
    87ac:	ldr	x0, [x8, x23]
    87b0:	bl	3290 <pthread_join@plt>
    87b4:	ldr	w8, [x20, #324]
    87b8:	add	x22, x22, #0x1
    87bc:	add	x23, x23, #0x1d0
    87c0:	cmp	x22, x8
    87c4:	b.cc	87a4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa54>  // b.lo, b.ul, b.last
    87c8:	b	87d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa80>
    87cc:	add	x21, x20, #0x138
    87d0:	ldr	x0, [x21]
    87d4:	mov	x1, x19
    87d8:	ldp	x20, x19, [sp, #48]
    87dc:	ldp	x22, x21, [sp, #32]
    87e0:	ldr	x23, [sp, #16]
    87e4:	ldp	x29, x30, [sp], #64
    87e8:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    87ec:	stp	x29, x30, [sp, #-64]!
    87f0:	stp	x22, x21, [sp, #32]
    87f4:	stp	x20, x19, [sp, #48]
    87f8:	ldr	w8, [x0, #324]
    87fc:	mov	x19, x0
    8800:	mov	w20, w1
    8804:	str	x23, [sp, #16]
    8808:	mov	x29, sp
    880c:	cbz	w8, 8870 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb20>
    8810:	mov	x21, xzr
    8814:	mov	w22, #0x160                 	// #352
    8818:	mov	w23, #0x3                   	// #3
    881c:	ldr	x8, [x19, #312]
    8820:	add	x0, x8, x22
    8824:	bl	34e0 <pthread_mutex_lock@plt>
    8828:	ldr	x8, [x19, #312]
    882c:	add	x8, x8, x22
    8830:	sub	x9, x8, #0x160
    8834:	add	x0, x8, #0x30
    8838:	str	w23, [x9]
    883c:	bl	31b0 <pthread_cond_signal@plt>
    8840:	ldr	x8, [x19, #312]
    8844:	add	x0, x8, x22
    8848:	bl	3500 <pthread_mutex_unlock@plt>
    884c:	ldr	w8, [x19, #324]
    8850:	add	x21, x21, #0x1
    8854:	add	x22, x22, #0x1d0
    8858:	cmp	x21, x8
    885c:	b.cc	881c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xacc>  // b.lo, b.ul, b.last
    8860:	cmp	w8, #0x0
    8864:	cset	w8, eq  // eq = none
    8868:	tbz	w8, #0, 8878 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb28>
    886c:	b	88d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb88>
    8870:	mov	w8, #0x1                   	// #1
    8874:	tbnz	w8, #0, 88d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb88>
    8878:	tbz	w20, #0, 88d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb88>
    887c:	mov	x20, xzr
    8880:	mov	w21, #0x1d0                 	// #464
    8884:	ldr	x8, [x19, #312]
    8888:	mul	x22, x20, x21
    888c:	add	x8, x8, x22
    8890:	add	x0, x8, #0x160
    8894:	bl	34e0 <pthread_mutex_lock@plt>
    8898:	ldr	x8, [x19, #312]
    889c:	ldr	w9, [x8, x22]
    88a0:	cbz	w9, 88bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb6c>
    88a4:	mul	x22, x20, x21
    88a8:	add	x8, x8, x22
    88ac:	add	x1, x8, #0x160
    88b0:	add	x0, x8, #0x190
    88b4:	bl	3350 <pthread_cond_wait@plt>
    88b8:	b	8898 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb48>
    88bc:	madd	x8, x20, x21, x8
    88c0:	add	x0, x8, #0x160
    88c4:	bl	3500 <pthread_mutex_unlock@plt>
    88c8:	ldr	w8, [x19, #324]
    88cc:	add	x20, x20, #0x1
    88d0:	cmp	x20, x8
    88d4:	b.cc	8884 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb34>  // b.lo, b.ul, b.last
    88d8:	ldp	x20, x19, [sp, #48]
    88dc:	ldp	x22, x21, [sp, #32]
    88e0:	ldr	x23, [sp, #16]
    88e4:	ldp	x29, x30, [sp], #64
    88e8:	ret
    88ec:	sub	sp, sp, #0x80
    88f0:	stp	x28, x27, [sp, #48]
    88f4:	stp	x26, x25, [sp, #64]
    88f8:	stp	x24, x23, [sp, #80]
    88fc:	stp	x22, x21, [sp, #96]
    8900:	stp	x20, x19, [sp, #112]
    8904:	mov	x19, x0
    8908:	add	x22, x0, #0x160
    890c:	add	x20, x0, #0x190
    8910:	add	x23, x0, #0x88
    8914:	add	x24, x0, #0xb0
    8918:	add	x25, x0, #0x40
    891c:	add	x27, x0, #0x30
    8920:	mov	w28, #0x3                   	// #3
    8924:	stp	x29, x30, [sp, #32]
    8928:	add	x29, sp, #0x20
    892c:	str	x25, [sp, #16]
    8930:	mov	x0, x22
    8934:	bl	34e0 <pthread_mutex_lock@plt>
    8938:	ldr	w21, [x19]
    893c:	cmp	w21, #0x3
    8940:	b.ne	8954 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc04>  // b.any
    8944:	mov	x0, x20
    8948:	str	wzr, [x19]
    894c:	bl	31b0 <pthread_cond_signal@plt>
    8950:	ldr	w21, [x19]
    8954:	cbnz	w21, 8968 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc18>
    8958:	mov	x0, x20
    895c:	mov	x1, x22
    8960:	bl	3350 <pthread_cond_wait@plt>
    8964:	b	8938 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbe8>
    8968:	mov	x0, x22
    896c:	bl	3500 <pthread_mutex_unlock@plt>
    8970:	cmp	w21, #0x3
    8974:	b.cs	8b74 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe24>  // b.hs, b.nlast
    8978:	ldr	x8, [x19, #32]
    897c:	mov	w2, #0xa8                  	// #168
    8980:	mov	x0, x24
    8984:	mov	w1, wzr
    8988:	ldr	w9, [x8, #192]
    898c:	ldr	x10, [x8, #272]
    8990:	ldr	x11, [x8, #8]
    8994:	add	x8, x8, #0x10
    8998:	str	xzr, [x19, #136]
    899c:	stp	w9, wzr, [x19, #144]
    89a0:	stp	x10, x11, [x19, #152]
    89a4:	str	x8, [x19, #168]
    89a8:	bl	31e0 <memset@plt>
    89ac:	mov	x0, x23
    89b0:	bl	3120 <lzma_block_header_size@plt>
    89b4:	mov	w1, w0
    89b8:	cbnz	w0, 89d4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc84>
    89bc:	ldr	x1, [x19, #40]
    89c0:	mov	x0, x25
    89c4:	mov	x2, x23
    89c8:	bl	5c70 <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    89cc:	mov	w1, w0
    89d0:	cbz	w0, 89e4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc94>
    89d4:	mov	x0, x19
    89d8:	bl	8c54 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf04>
    89dc:	mov	w21, #0x3                   	// #3
    89e0:	b	8b7c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe2c>
    89e4:	stur	xzr, [x29, #-8]
    89e8:	ldr	w8, [x19, #140]
    89ec:	ldr	x9, [x19, #24]
    89f0:	mov	x26, xzr
    89f4:	str	x8, [x9, #8]
    89f8:	ldr	x8, [x19, #32]
    89fc:	ldr	x25, [x8, #272]
    8a00:	mov	x0, x22
    8a04:	bl	34e0 <pthread_mutex_lock@plt>
    8a08:	ldur	x8, [x29, #-8]
    8a0c:	str	x8, [x19, #48]
    8a10:	ldp	x8, x9, [x19, #16]
    8a14:	ldr	x9, [x9, #8]
    8a18:	cmp	x26, x8
    8a1c:	str	x9, [x19, #56]
    8a20:	b.ne	8a48 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcf8>  // b.any
    8a24:	ldr	w21, [x19]
    8a28:	cmp	w21, #0x1
    8a2c:	b.ne	8a50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd00>  // b.any
    8a30:	mov	x0, x20
    8a34:	mov	x1, x22
    8a38:	bl	3350 <pthread_cond_wait@plt>
    8a3c:	ldr	x8, [x19, #16]
    8a40:	cmp	x26, x8
    8a44:	b.eq	8a24 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcd4>  // b.none
    8a48:	ldr	w21, [x19]
    8a4c:	mov	x26, x8
    8a50:	mov	x0, x22
    8a54:	bl	3500 <pthread_mutex_unlock@plt>
    8a58:	cmp	w21, #0x2
    8a5c:	b.hi	8b70 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe20>  // b.pmore
    8a60:	ldr	x6, [x19, #24]
    8a64:	ldur	x9, [x29, #-8]
    8a68:	ldr	x10, [x19, #88]
    8a6c:	ldr	x0, [x19, #64]
    8a70:	ldr	x1, [x19, #40]
    8a74:	ldr	x2, [x19, #8]
    8a78:	ldr	x5, [x6], #8
    8a7c:	sub	x11, x26, x9
    8a80:	csel	w8, w28, wzr, eq  // eq = none
    8a84:	add	x9, x9, #0x4, lsl #12
    8a88:	cmp	x11, #0x4, lsl #12
    8a8c:	csel	w8, wzr, w8, hi  // hi = pmore
    8a90:	csel	x4, x9, x26, hi  // hi = pmore
    8a94:	sub	x3, x29, #0x8
    8a98:	mov	x7, x25
    8a9c:	str	w8, [sp]
    8aa0:	blr	x10
    8aa4:	cbnz	w0, 8adc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd8c>
    8aa8:	ldr	x8, [x19, #24]
    8aac:	ldr	x8, [x8, #8]
    8ab0:	cmp	x8, x25
    8ab4:	b.cc	8a00 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcb0>  // b.lo, b.ul, b.last
    8ab8:	mov	x0, x22
    8abc:	bl	34e0 <pthread_mutex_lock@plt>
    8ac0:	ldr	w21, [x19]
    8ac4:	cmp	w21, #0x1
    8ac8:	b.ne	8b04 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdb4>  // b.any
    8acc:	mov	x0, x20
    8ad0:	mov	x1, x22
    8ad4:	bl	3350 <pthread_cond_wait@plt>
    8ad8:	b	8ac0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd70>
    8adc:	mov	w1, w0
    8ae0:	cmp	w0, #0x1
    8ae4:	b.ne	8b44 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdf4>  // b.any
    8ae8:	ldr	x8, [x19, #24]
    8aec:	mov	x0, x23
    8af0:	ldr	x1, [x8]
    8af4:	bl	34f0 <lzma_block_header_encode@plt>
    8af8:	cbz	w0, 8b54 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe04>
    8afc:	mov	w1, w0
    8b00:	b	8b44 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdf4>
    8b04:	ldr	x26, [x19, #16]
    8b08:	mov	x0, x22
    8b0c:	bl	3500 <pthread_mutex_unlock@plt>
    8b10:	cmp	w21, #0x2
    8b14:	b.hi	8b70 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe20>  // b.pmore
    8b18:	ldr	x8, [x19, #24]
    8b1c:	mov	x0, x23
    8b20:	mov	x2, x26
    8b24:	mov	x5, x25
    8b28:	mov	x4, x8
    8b2c:	str	xzr, [x4, #8]!
    8b30:	ldr	x1, [x19, #8]
    8b34:	ldr	x3, [x8]
    8b38:	bl	3470 <lzma_block_uncomp_encode@plt>
    8b3c:	cbz	w0, 8b54 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe04>
    8b40:	mov	w1, #0xb                   	// #11
    8b44:	mov	x0, x19
    8b48:	bl	8c54 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf04>
    8b4c:	mov	w21, #0x3                   	// #3
    8b50:	b	8b70 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe20>
    8b54:	mov	x0, x23
    8b58:	bl	3150 <lzma_block_unpadded_size@plt>
    8b5c:	ldr	x8, [x19, #24]
    8b60:	mov	w21, #0x2                   	// #2
    8b64:	str	x0, [x8, #16]
    8b68:	ldr	x9, [x19, #160]
    8b6c:	str	x9, [x8, #24]
    8b70:	ldr	x25, [sp, #16]
    8b74:	cmp	w21, #0x4
    8b78:	b.eq	8c08 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xeb8>  // b.none
    8b7c:	mov	x0, x22
    8b80:	bl	34e0 <pthread_mutex_lock@plt>
    8b84:	ldr	w8, [x19]
    8b88:	cmp	w8, #0x4
    8b8c:	b.eq	8b9c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe4c>  // b.none
    8b90:	mov	x0, x20
    8b94:	str	wzr, [x19]
    8b98:	bl	31b0 <pthread_cond_signal@plt>
    8b9c:	mov	x0, x22
    8ba0:	bl	3500 <pthread_mutex_unlock@plt>
    8ba4:	ldr	x8, [x19, #32]
    8ba8:	cmp	w21, #0x2
    8bac:	cset	w21, eq  // eq = none
    8bb0:	add	x0, x8, #0x168
    8bb4:	bl	34e0 <pthread_mutex_lock@plt>
    8bb8:	ldr	x8, [x19, #24]
    8bbc:	strb	w21, [x8, #32]
    8bc0:	ldr	x9, [x19, #32]
    8bc4:	ldr	x10, [x8, #24]
    8bc8:	ldp	x11, x12, [x9, #344]
    8bcc:	add	x0, x9, #0x198
    8bd0:	add	x10, x11, x10
    8bd4:	str	x10, [x9, #344]
    8bd8:	ldr	x8, [x8, #8]
    8bdc:	add	x8, x12, x8
    8be0:	str	x8, [x9, #352]
    8be4:	stp	xzr, xzr, [x27]
    8be8:	ldr	x8, [x9, #328]
    8bec:	str	x8, [x19, #344]
    8bf0:	str	x19, [x9, #328]
    8bf4:	bl	31b0 <pthread_cond_signal@plt>
    8bf8:	ldr	x8, [x19, #32]
    8bfc:	add	x0, x8, #0x168
    8c00:	bl	3500 <pthread_mutex_unlock@plt>
    8c04:	b	8930 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbe0>
    8c08:	mov	x0, x22
    8c0c:	bl	33c0 <pthread_mutex_destroy@plt>
    8c10:	mov	x0, x20
    8c14:	bl	34d0 <pthread_cond_destroy@plt>
    8c18:	ldr	x1, [x19, #40]
    8c1c:	mov	x0, x25
    8c20:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    8c24:	ldr	x0, [x19, #8]
    8c28:	ldr	x1, [x19, #40]
    8c2c:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    8c30:	ldp	x20, x19, [sp, #112]
    8c34:	ldp	x22, x21, [sp, #96]
    8c38:	ldp	x24, x23, [sp, #80]
    8c3c:	ldp	x26, x25, [sp, #64]
    8c40:	ldp	x28, x27, [sp, #48]
    8c44:	ldp	x29, x30, [sp, #32]
    8c48:	mov	x0, xzr
    8c4c:	add	sp, sp, #0x80
    8c50:	ret
    8c54:	stp	x29, x30, [sp, #-32]!
    8c58:	stp	x20, x19, [sp, #16]
    8c5c:	ldr	x8, [x0, #32]
    8c60:	mov	x19, x0
    8c64:	mov	x29, sp
    8c68:	mov	w20, w1
    8c6c:	add	x0, x8, #0x168
    8c70:	bl	34e0 <pthread_mutex_lock@plt>
    8c74:	ldr	x8, [x19, #32]
    8c78:	ldr	w9, [x8, #308]
    8c7c:	cbnz	w9, 8c84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf34>
    8c80:	str	w20, [x8, #308]
    8c84:	add	x0, x8, #0x198
    8c88:	bl	31b0 <pthread_cond_signal@plt>
    8c8c:	ldr	x8, [x19, #32]
    8c90:	ldp	x20, x19, [sp, #16]
    8c94:	add	x0, x8, #0x168
    8c98:	ldp	x29, x30, [sp], #32
    8c9c:	b	3500 <pthread_mutex_unlock@plt>
    8ca0:	stp	x29, x30, [sp, #-64]!
    8ca4:	stp	x22, x21, [sp, #32]
    8ca8:	stp	x20, x19, [sp, #48]
    8cac:	ldr	x8, [x0, #16]
    8cb0:	str	x23, [sp, #16]
    8cb4:	adrp	x23, 8000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    8cb8:	add	x23, x23, #0xca0
    8cbc:	mov	w20, w3
    8cc0:	mov	x19, x2
    8cc4:	mov	x21, x0
    8cc8:	cmp	x8, x23
    8ccc:	mov	x22, x1
    8cd0:	mov	x29, sp
    8cd4:	b.eq	8ce4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf94>  // b.none
    8cd8:	mov	x0, x21
    8cdc:	mov	x1, x22
    8ce0:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    8ce4:	ldr	x0, [x21]
    8ce8:	str	x23, [x21, #16]
    8cec:	cbnz	x0, 8d3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfec>
    8cf0:	mov	w0, #0xe0                  	// #224
    8cf4:	mov	x1, x22
    8cf8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    8cfc:	cbz	x0, 8d84 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1034>
    8d00:	adrp	x8, 8000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>
    8d04:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    8d08:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    8d0c:	add	x8, x8, #0xd8c
    8d10:	add	x9, x9, #0x8
    8d14:	add	x10, x10, #0x34
    8d18:	mov	x11, #0xffffffffffffffff    	// #-1
    8d1c:	movi	v0.2d, #0x0
    8d20:	str	x0, [x21]
    8d24:	stp	x8, x9, [x21, #24]
    8d28:	str	x10, [x21, #56]
    8d2c:	stp	xzr, x11, [x0]
    8d30:	stp	q0, q0, [x0, #16]
    8d34:	str	q0, [x0, #48]
    8d38:	str	xzr, [x0, #64]
    8d3c:	and	w9, w20, #0x1
    8d40:	cmp	x19, #0x0
    8d44:	mov	w8, wzr
    8d48:	mov	w10, #0x8000                	// #32768
    8d4c:	strb	w9, [x0, #76]
    8d50:	csinc	x9, x19, xzr, ne  // ne = any
    8d54:	str	wzr, [x0, #72]
    8d58:	str	wzr, [x0, #112]
    8d5c:	str	xzr, [x0, #120]
    8d60:	str	wzr, [x0, #128]
    8d64:	stp	xzr, xzr, [x0, #80]
    8d68:	stp	x9, x10, [x0, #96]
    8d6c:	ldp	x20, x19, [sp, #48]
    8d70:	ldp	x22, x21, [sp, #32]
    8d74:	ldr	x23, [sp, #16]
    8d78:	mov	w0, w8
    8d7c:	ldp	x29, x30, [sp], #64
    8d80:	ret
    8d84:	mov	w8, #0x5                   	// #5
    8d88:	b	8d6c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x101c>
    8d8c:	sub	sp, sp, #0xb0
    8d90:	ldr	x8, [x6]
    8d94:	stp	x29, x30, [sp, #80]
    8d98:	stp	x28, x27, [sp, #96]
    8d9c:	stp	x26, x25, [sp, #112]
    8da0:	cmp	x8, x7
    8da4:	stp	x24, x23, [sp, #128]
    8da8:	stp	x22, x21, [sp, #144]
    8dac:	stp	x20, x19, [sp, #160]
    8db0:	add	x29, sp, #0x50
    8db4:	b.cs	8f98 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1248>  // b.hs, b.nlast
    8db8:	ldr	w8, [x29, #96]
    8dbc:	ldr	w9, [x0, #72]
    8dc0:	adrp	x28, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    8dc4:	mov	x19, x7
    8dc8:	str	w8, [sp, #20]
    8dcc:	add	x8, sp, #0x20
    8dd0:	mov	x20, x6
    8dd4:	mov	x22, x4
    8dd8:	mov	x23, x3
    8ddc:	mov	x24, x2
    8de0:	mov	x25, x1
    8de4:	mov	x26, x0
    8de8:	add	x27, x0, #0x70
    8dec:	add	x28, x28, #0xa78
    8df0:	add	x21, x8, #0x18
    8df4:	str	x5, [sp, #24]
    8df8:	cmp	w9, #0x4
    8dfc:	b.eq	8fbc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x126c>  // b.none
    8e00:	ldr	x8, [x23]
    8e04:	cmp	x8, x22
    8e08:	b.cs	8f98 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1248>  // b.hs, b.nlast
    8e0c:	cmp	w9, #0x3
    8e10:	b.hi	8ff0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12a0>  // b.pmore
    8e14:	mov	w9, w9
    8e18:	adr	x10, 8e28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10d8>
    8e1c:	ldrb	w11, [x28, x9]
    8e20:	add	x10, x10, x11, lsl #2
    8e24:	br	x10
    8e28:	ldrb	w1, [x24, x8]
    8e2c:	mov	x0, x27
    8e30:	bl	14c18 <lzma_mode_is_supported@@XZ_5.0+0x5748>
    8e34:	tbnz	w0, #0, 8ff8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12a8>
    8e38:	mov	w9, #0x1                   	// #1
    8e3c:	str	w9, [x26, #72]
    8e40:	ldr	x8, [x23]
    8e44:	b	8ef8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11a8>
    8e48:	ldr	x9, [x26, #80]
    8e4c:	ldrb	w10, [x24, x8]
    8e50:	ldr	w11, [x26, #112]
    8e54:	lsl	x12, x9, #3
    8e58:	add	x13, x9, #0x1
    8e5c:	lsl	x9, x10, x12
    8e60:	cmp	x13, #0x4
    8e64:	orr	w9, w11, w9
    8e68:	str	w9, [x26, #112]
    8e6c:	str	x13, [x26, #80]
    8e70:	b.ne	8ef4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11a4>  // b.any
    8e74:	cmn	w9, #0x1
    8e78:	b.eq	8ea8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1158>  // b.none
    8e7c:	ldrb	w10, [x26, #76]
    8e80:	cbz	w10, 8ea8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1158>
    8e84:	sub	w10, w9, #0x1
    8e88:	orr	w10, w10, w10, lsr #2
    8e8c:	orr	w10, w10, w10, lsr #3
    8e90:	orr	w10, w10, w10, lsr #4
    8e94:	orr	w10, w10, w10, lsr #8
    8e98:	orr	w10, w10, w10, lsr #16
    8e9c:	add	w10, w10, #0x1
    8ea0:	cmp	w10, w9
    8ea4:	b.ne	8ff8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12a8>  // b.any
    8ea8:	mov	w9, #0x2                   	// #2
    8eac:	str	xzr, [x26, #80]
    8eb0:	str	w9, [x26, #72]
    8eb4:	b	8ef8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11a8>
    8eb8:	ldp	x9, x11, [x26, #80]
    8ebc:	ldrb	w10, [x24, x8]
    8ec0:	add	x12, x8, #0x1
    8ec4:	lsl	x8, x9, #3
    8ec8:	add	x9, x9, #0x1
    8ecc:	lsl	x8, x10, x8
    8ed0:	cmp	x9, #0x8
    8ed4:	orr	x8, x8, x11
    8ed8:	stp	x9, x8, [x26, #80]
    8edc:	str	x12, [x23]
    8ee0:	b.cs	8f04 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11b4>  // b.hs, b.nlast
    8ee4:	mov	w9, #0x2                   	// #2
    8ee8:	b	8f8c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x123c>
    8eec:	ldr	x8, [x26, #104]
    8ef0:	b	8f40 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11f0>
    8ef4:	mov	w9, #0x1                   	// #1
    8ef8:	add	x8, x8, #0x1
    8efc:	str	x8, [x23]
    8f00:	b	8f8c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x123c>
    8f04:	mov	x9, #0xffffffc000000000    	// #-274877906944
    8f08:	add	x8, x8, x9
    8f0c:	mov	x9, #0xfffffffffffffffe    	// #-2
    8f10:	movk	x9, #0xffbf, lsl #32
    8f14:	cmp	x8, x9
    8f18:	b.hi	8f24 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11d4>  // b.pmore
    8f1c:	ldrb	w8, [x26, #76]
    8f20:	cbnz	w8, 8ff8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12a8>
    8f24:	mov	x0, x27
    8f28:	bl	14ca4 <lzma_mode_is_supported@@XZ_5.0+0x57d4>
    8f2c:	add	x8, x0, #0x8, lsl #12
    8f30:	mov	w9, #0x3                   	// #3
    8f34:	str	xzr, [x26, #80]
    8f38:	str	x8, [x26, #104]
    8f3c:	str	w9, [x26, #72]
    8f40:	ldr	x9, [x26, #96]
    8f44:	cmp	x8, x9
    8f48:	b.hi	9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>  // b.pmore
    8f4c:	str	xzr, [sp, #32]
    8f50:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    8f54:	ldr	x8, [x8, #3944]
    8f58:	add	x2, sp, #0x20
    8f5c:	mov	x0, x26
    8f60:	mov	x1, x25
    8f64:	stp	x8, x27, [sp, #40]
    8f68:	stp	xzr, xzr, [x21]
    8f6c:	str	xzr, [x21, #16]
    8f70:	bl	37b4 <lzma_version_string@@XZ_5.0+0x134>
    8f74:	cbnz	w0, 8f9c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x124c>
    8f78:	ldr	x0, [x26]
    8f7c:	ldr	x1, [x26, #88]
    8f80:	bl	e4b8 <lzma_mf_is_supported@@XZ_5.0+0x14e8>
    8f84:	mov	w9, #0x4                   	// #4
    8f88:	str	w9, [x26, #72]
    8f8c:	ldr	x8, [x20]
    8f90:	cmp	x8, x19
    8f94:	b.cc	8df8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10a8>  // b.lo, b.ul, b.last
    8f98:	mov	w0, wzr
    8f9c:	ldp	x20, x19, [sp, #160]
    8fa0:	ldp	x22, x21, [sp, #144]
    8fa4:	ldp	x24, x23, [sp, #128]
    8fa8:	ldp	x26, x25, [sp, #112]
    8fac:	ldp	x28, x27, [sp, #96]
    8fb0:	ldp	x29, x30, [sp, #80]
    8fb4:	add	sp, sp, #0xb0
    8fb8:	ret
    8fbc:	ldr	x8, [x26, #24]
    8fc0:	ldr	x0, [x26]
    8fc4:	ldr	w9, [sp, #20]
    8fc8:	ldr	x5, [sp, #24]
    8fcc:	mov	x1, x25
    8fd0:	mov	x2, x24
    8fd4:	mov	x3, x23
    8fd8:	mov	x4, x22
    8fdc:	mov	x6, x20
    8fe0:	mov	x7, x19
    8fe4:	str	w9, [sp]
    8fe8:	blr	x8
    8fec:	b	8f9c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x124c>
    8ff0:	mov	w0, #0xb                   	// #11
    8ff4:	b	8f9c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x124c>
    8ff8:	mov	w0, #0x7                   	// #7
    8ffc:	b	8f9c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x124c>
    9000:	mov	w0, #0x6                   	// #6
    9004:	b	8f9c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x124c>
    9008:	stp	x29, x30, [sp, #-32]!
    900c:	stp	x20, x19, [sp, #16]
    9010:	mov	x29, sp
    9014:	mov	x19, x1
    9018:	mov	x20, x0
    901c:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    9020:	mov	x0, x20
    9024:	mov	x1, x19
    9028:	ldp	x20, x19, [sp, #16]
    902c:	ldp	x29, x30, [sp], #32
    9030:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    9034:	ldr	x9, [x0, #104]
    9038:	str	x9, [x1]
    903c:	ldr	x9, [x0, #96]
    9040:	str	x9, [x2]
    9044:	cbz	x3, 9060 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1310>
    9048:	ldr	x9, [x0, #104]
    904c:	mov	x8, x0
    9050:	cmp	x9, x3
    9054:	b.ls	9068 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1318>  // b.plast
    9058:	mov	w0, #0x6                   	// #6
    905c:	ret
    9060:	mov	w0, wzr
    9064:	ret
    9068:	mov	w0, wzr
    906c:	str	x3, [x8, #96]
    9070:	ret

0000000000009074 <lzma_alone_decoder@@XZ_5.0>:
    9074:	stp	x29, x30, [sp, #-48]!
    9078:	str	x21, [sp, #16]
    907c:	stp	x20, x19, [sp, #32]
    9080:	mov	x29, sp
    9084:	mov	x21, x1
    9088:	mov	x19, x0
    908c:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    9090:	mov	w20, w0
    9094:	cbnz	w0, 90cc <lzma_alone_decoder@@XZ_5.0+0x58>
    9098:	ldp	x1, x0, [x19, #48]
    909c:	mov	x2, x21
    90a0:	mov	w3, wzr
    90a4:	bl	8ca0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf50>
    90a8:	mov	w20, w0
    90ac:	cbz	w0, 90bc <lzma_alone_decoder@@XZ_5.0+0x48>
    90b0:	mov	x0, x19
    90b4:	bl	32e0 <lzma_end@plt>
    90b8:	b	90cc <lzma_alone_decoder@@XZ_5.0+0x58>
    90bc:	ldr	x8, [x19, #56]
    90c0:	mov	w9, #0x1                   	// #1
    90c4:	strb	w9, [x8, #88]
    90c8:	strb	w9, [x8, #91]
    90cc:	mov	w0, w20
    90d0:	ldp	x20, x19, [sp, #32]
    90d4:	ldr	x21, [sp, #16]
    90d8:	ldp	x29, x30, [sp], #48
    90dc:	ret

00000000000090e0 <lzma_auto_decoder@@XZ_5.0>:
    90e0:	stp	x29, x30, [sp, #-48]!
    90e4:	stp	x22, x21, [sp, #16]
    90e8:	stp	x20, x19, [sp, #32]
    90ec:	mov	x29, sp
    90f0:	mov	w21, w2
    90f4:	mov	x22, x1
    90f8:	mov	x19, x0
    90fc:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    9100:	mov	w20, w0
    9104:	cbnz	w0, 913c <lzma_auto_decoder@@XZ_5.0+0x5c>
    9108:	ldp	x1, x0, [x19, #48]
    910c:	mov	x2, x22
    9110:	mov	w3, w21
    9114:	bl	9150 <lzma_auto_decoder@@XZ_5.0+0x70>
    9118:	mov	w20, w0
    911c:	cbz	w0, 912c <lzma_auto_decoder@@XZ_5.0+0x4c>
    9120:	mov	x0, x19
    9124:	bl	32e0 <lzma_end@plt>
    9128:	b	913c <lzma_auto_decoder@@XZ_5.0+0x5c>
    912c:	ldr	x8, [x19, #56]
    9130:	mov	w9, #0x1                   	// #1
    9134:	strb	w9, [x8, #88]
    9138:	strb	w9, [x8, #91]
    913c:	mov	w0, w20
    9140:	ldp	x20, x19, [sp, #32]
    9144:	ldp	x22, x21, [sp, #16]
    9148:	ldp	x29, x30, [sp], #48
    914c:	ret
    9150:	stp	x29, x30, [sp, #-64]!
    9154:	stp	x22, x21, [sp, #32]
    9158:	stp	x20, x19, [sp, #48]
    915c:	ldr	x8, [x0, #16]
    9160:	str	x23, [sp, #16]
    9164:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    9168:	add	x23, x23, #0x150
    916c:	mov	w19, w3
    9170:	mov	x20, x2
    9174:	mov	x21, x0
    9178:	cmp	x8, x23
    917c:	mov	x22, x1
    9180:	mov	x29, sp
    9184:	b.eq	9194 <lzma_auto_decoder@@XZ_5.0+0xb4>  // b.none
    9188:	mov	x0, x21
    918c:	mov	x1, x22
    9190:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    9194:	cmp	w19, #0x1f
    9198:	str	x23, [x21, #16]
    919c:	b.ls	91a8 <lzma_auto_decoder@@XZ_5.0+0xc8>  // b.plast
    91a0:	mov	w8, #0x8                   	// #8
    91a4:	b	9218 <lzma_auto_decoder@@XZ_5.0+0x138>
    91a8:	ldr	x0, [x21]
    91ac:	cbnz	x0, 9204 <lzma_auto_decoder@@XZ_5.0+0x124>
    91b0:	mov	w0, #0x58                  	// #88
    91b4:	mov	x1, x22
    91b8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    91bc:	cbz	x0, 9230 <lzma_auto_decoder@@XZ_5.0+0x150>
    91c0:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    91c4:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    91c8:	add	x8, x8, #0x238
    91cc:	add	x9, x9, #0x394
    91d0:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    91d4:	stp	x8, x9, [x21, #24]
    91d8:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    91dc:	add	x10, x10, #0x3c0
    91e0:	add	x8, x8, #0x3d8
    91e4:	stp	x10, x8, [x21, #48]
    91e8:	mov	x8, #0xffffffffffffffff    	// #-1
    91ec:	movi	v0.2d, #0x0
    91f0:	str	x0, [x21]
    91f4:	stp	xzr, x8, [x0]
    91f8:	stp	q0, q0, [x0, #16]
    91fc:	str	q0, [x0, #48]
    9200:	str	xzr, [x0, #64]
    9204:	cmp	x20, #0x0
    9208:	mov	w8, wzr
    920c:	csinc	x9, x20, xzr, ne  // ne = any
    9210:	str	x9, [x0, #72]
    9214:	stp	w19, wzr, [x0, #80]
    9218:	ldp	x20, x19, [sp, #48]
    921c:	ldp	x22, x21, [sp, #32]
    9220:	ldr	x23, [sp, #16]
    9224:	mov	w0, w8
    9228:	ldp	x29, x30, [sp], #64
    922c:	ret
    9230:	mov	w8, #0x5                   	// #5
    9234:	b	9218 <lzma_auto_decoder@@XZ_5.0+0x138>
    9238:	sub	sp, sp, #0x70
    923c:	stp	x29, x30, [sp, #16]
    9240:	stp	x26, x25, [sp, #48]
    9244:	stp	x24, x23, [sp, #64]
    9248:	stp	x22, x21, [sp, #80]
    924c:	stp	x20, x19, [sp, #96]
    9250:	add	x29, sp, #0x10
    9254:	ldr	w8, [x0, #84]
    9258:	str	x27, [sp, #32]
    925c:	ldr	w27, [x29, #96]
    9260:	mov	x19, x4
    9264:	mov	x20, x3
    9268:	cmp	w8, #0x2
    926c:	b.eq	9328 <lzma_auto_decoder@@XZ_5.0+0x248>  // b.none
    9270:	mov	x22, x7
    9274:	mov	x23, x6
    9278:	mov	x24, x5
    927c:	mov	x25, x2
    9280:	mov	x21, x0
    9284:	mov	x26, x1
    9288:	cmp	w8, #0x1
    928c:	b.eq	92cc <lzma_auto_decoder@@XZ_5.0+0x1ec>  // b.none
    9290:	cbnz	w8, 9310 <lzma_auto_decoder@@XZ_5.0+0x230>
    9294:	ldr	x8, [x20]
    9298:	cmp	x8, x19
    929c:	b.cs	9318 <lzma_auto_decoder@@XZ_5.0+0x238>  // b.hs, b.nlast
    92a0:	mov	w9, #0x1                   	// #1
    92a4:	str	w9, [x21, #84]
    92a8:	ldrb	w8, [x25, x8]
    92ac:	ldr	x2, [x21, #72]
    92b0:	cmp	w8, #0xfd
    92b4:	b.ne	9364 <lzma_auto_decoder@@XZ_5.0+0x284>  // b.any
    92b8:	ldr	w3, [x21, #80]
    92bc:	mov	x0, x21
    92c0:	mov	x1, x26
    92c4:	bl	ac5c <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    92c8:	cbnz	w0, 9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    92cc:	ldr	x8, [x21, #24]
    92d0:	ldr	x0, [x21]
    92d4:	mov	x1, x26
    92d8:	mov	x2, x25
    92dc:	mov	x3, x20
    92e0:	mov	x4, x19
    92e4:	mov	x5, x24
    92e8:	mov	x6, x23
    92ec:	mov	x7, x22
    92f0:	str	w27, [sp]
    92f4:	blr	x8
    92f8:	cmp	w0, #0x1
    92fc:	b.ne	9344 <lzma_auto_decoder@@XZ_5.0+0x264>  // b.any
    9300:	ldrb	w8, [x21, #80]
    9304:	tbnz	w8, #3, 9320 <lzma_auto_decoder@@XZ_5.0+0x240>
    9308:	mov	w0, #0x1                   	// #1
    930c:	b	9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    9310:	mov	w0, #0xb                   	// #11
    9314:	b	9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    9318:	mov	w0, wzr
    931c:	b	9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    9320:	mov	w8, #0x2                   	// #2
    9324:	str	w8, [x21, #84]
    9328:	ldr	x8, [x20]
    932c:	cmp	x8, x19
    9330:	b.cs	933c <lzma_auto_decoder@@XZ_5.0+0x25c>  // b.hs, b.nlast
    9334:	mov	w0, #0x9                   	// #9
    9338:	b	9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    933c:	cmp	w27, #0x3
    9340:	cset	w0, eq  // eq = none
    9344:	ldp	x20, x19, [sp, #96]
    9348:	ldp	x22, x21, [sp, #80]
    934c:	ldp	x24, x23, [sp, #64]
    9350:	ldp	x26, x25, [sp, #48]
    9354:	ldr	x27, [sp, #32]
    9358:	ldp	x29, x30, [sp, #16]
    935c:	add	sp, sp, #0x70
    9360:	ret
    9364:	mov	w3, #0x1                   	// #1
    9368:	mov	x0, x21
    936c:	mov	x1, x26
    9370:	bl	8ca0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf50>
    9374:	cbnz	w0, 9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    9378:	ldr	w8, [x21, #80]
    937c:	tbnz	w8, #0, 938c <lzma_auto_decoder@@XZ_5.0+0x2ac>
    9380:	tbz	w8, #2, 92cc <lzma_auto_decoder@@XZ_5.0+0x1ec>
    9384:	mov	w0, #0x4                   	// #4
    9388:	b	9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    938c:	mov	w0, #0x2                   	// #2
    9390:	b	9344 <lzma_auto_decoder@@XZ_5.0+0x264>
    9394:	stp	x29, x30, [sp, #-32]!
    9398:	stp	x20, x19, [sp, #16]
    939c:	mov	x29, sp
    93a0:	mov	x19, x1
    93a4:	mov	x20, x0
    93a8:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    93ac:	mov	x0, x20
    93b0:	mov	x1, x19
    93b4:	ldp	x20, x19, [sp, #16]
    93b8:	ldp	x29, x30, [sp], #32
    93bc:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    93c0:	ldr	x1, [x0, #48]
    93c4:	cbz	x1, 93d0 <lzma_auto_decoder@@XZ_5.0+0x2f0>
    93c8:	ldr	x0, [x0]
    93cc:	br	x1
    93d0:	mov	w0, wzr
    93d4:	ret
    93d8:	stp	x29, x30, [sp, #-32]!
    93dc:	stp	x20, x19, [sp, #16]
    93e0:	ldr	x8, [x0, #56]
    93e4:	mov	x19, x3
    93e8:	mov	x20, x0
    93ec:	mov	x29, sp
    93f0:	cbz	x8, 9408 <lzma_auto_decoder@@XZ_5.0+0x328>
    93f4:	ldr	x0, [x20]
    93f8:	mov	x3, x19
    93fc:	blr	x8
    9400:	cbnz	x19, 9430 <lzma_auto_decoder@@XZ_5.0+0x350>
    9404:	b	9440 <lzma_auto_decoder@@XZ_5.0+0x360>
    9408:	mov	w8, #0x8000                	// #32768
    940c:	str	x8, [x1]
    9410:	ldr	x8, [x20, #72]
    9414:	str	x8, [x2]
    9418:	cbz	x19, 943c <lzma_auto_decoder@@XZ_5.0+0x35c>
    941c:	ldr	x8, [x1]
    9420:	cmp	x8, x19
    9424:	mov	w8, #0x6                   	// #6
    9428:	csel	w0, w8, wzr, hi  // hi = pmore
    942c:	cbz	x19, 9440 <lzma_auto_decoder@@XZ_5.0+0x360>
    9430:	cbnz	w0, 9440 <lzma_auto_decoder@@XZ_5.0+0x360>
    9434:	str	x19, [x20, #72]
    9438:	b	9440 <lzma_auto_decoder@@XZ_5.0+0x360>
    943c:	mov	w0, wzr
    9440:	ldp	x20, x19, [sp, #16]
    9444:	ldp	x29, x30, [sp], #32
    9448:	ret

000000000000944c <lzma_block_buffer_decode@@XZ_5.0>:
    944c:	sub	sp, sp, #0xc0
    9450:	stp	x29, x30, [sp, #96]
    9454:	stp	x28, x27, [sp, #112]
    9458:	stp	x26, x25, [sp, #128]
    945c:	stp	x24, x23, [sp, #144]
    9460:	stp	x22, x21, [sp, #160]
    9464:	stp	x20, x19, [sp, #176]
    9468:	add	x29, sp, #0x60
    946c:	cbz	x3, 94c4 <lzma_block_buffer_decode@@XZ_5.0+0x78>
    9470:	ldr	x8, [x3]
    9474:	mov	x23, x7
    9478:	mov	x20, x6
    947c:	mov	x24, x5
    9480:	mov	x22, x4
    9484:	mov	x21, x3
    9488:	mov	x25, x2
    948c:	mov	x19, x1
    9490:	mov	x2, x0
    9494:	cbnz	x25, 94a4 <lzma_block_buffer_decode@@XZ_5.0+0x58>
    9498:	cmp	x8, x22
    949c:	mov	x8, x22
    94a0:	b.ne	94c4 <lzma_block_buffer_decode@@XZ_5.0+0x78>  // b.any
    94a4:	mov	w26, #0xb                   	// #11
    94a8:	cbz	x20, 94c8 <lzma_block_buffer_decode@@XZ_5.0+0x7c>
    94ac:	cmp	x8, x22
    94b0:	b.hi	94c8 <lzma_block_buffer_decode@@XZ_5.0+0x7c>  // b.pmore
    94b4:	ldr	x8, [x20]
    94b8:	cmp	x8, x23
    94bc:	cbz	x24, 94ec <lzma_block_buffer_decode@@XZ_5.0+0xa0>
    94c0:	b.ls	94f0 <lzma_block_buffer_decode@@XZ_5.0+0xa4>  // b.plast
    94c4:	mov	w26, #0xb                   	// #11
    94c8:	mov	w0, w26
    94cc:	ldp	x20, x19, [sp, #176]
    94d0:	ldp	x22, x21, [sp, #160]
    94d4:	ldp	x24, x23, [sp, #144]
    94d8:	ldp	x26, x25, [sp, #128]
    94dc:	ldp	x28, x27, [sp, #112]
    94e0:	ldp	x29, x30, [sp, #96]
    94e4:	add	sp, sp, #0xc0
    94e8:	ret
    94ec:	b.ne	94c4 <lzma_block_buffer_decode@@XZ_5.0+0x78>  // b.any
    94f0:	movi	v0.2d, #0x0
    94f4:	mov	x8, #0xffffffffffffffff    	// #-1
    94f8:	add	x0, sp, #0x10
    94fc:	mov	x1, x19
    9500:	str	xzr, [sp, #80]
    9504:	stp	q0, q0, [sp, #48]
    9508:	stp	q0, q0, [sp, #16]
    950c:	str	x8, [sp, #24]
    9510:	bl	9594 <lzma_block_buffer_decode@@XZ_5.0+0x148>
    9514:	mov	w26, w0
    9518:	cbnz	w0, 9584 <lzma_block_buffer_decode@@XZ_5.0+0x138>
    951c:	ldr	x8, [sp, #40]
    9520:	ldr	x0, [sp, #16]
    9524:	ldr	x27, [x21]
    9528:	ldr	x28, [x20]
    952c:	mov	w9, #0x3                   	// #3
    9530:	mov	x1, x19
    9534:	mov	x2, x25
    9538:	mov	x3, x21
    953c:	mov	x4, x22
    9540:	mov	x5, x24
    9544:	mov	x6, x20
    9548:	mov	x7, x23
    954c:	str	w9, [sp]
    9550:	blr	x8
    9554:	cmp	w0, #0x1
    9558:	b.eq	9580 <lzma_block_buffer_decode@@XZ_5.0+0x134>  // b.none
    955c:	mov	w26, w0
    9560:	cbnz	w0, 9574 <lzma_block_buffer_decode@@XZ_5.0+0x128>
    9564:	ldr	x8, [x21]
    9568:	cmp	x8, x22
    956c:	mov	w8, #0x9                   	// #9
    9570:	cinc	w26, w8, ne  // ne = any
    9574:	str	x27, [x21]
    9578:	str	x28, [x20]
    957c:	b	9584 <lzma_block_buffer_decode@@XZ_5.0+0x138>
    9580:	mov	w26, wzr
    9584:	add	x0, sp, #0x10
    9588:	mov	x1, x19
    958c:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    9590:	b	94c8 <lzma_block_buffer_decode@@XZ_5.0+0x7c>
    9594:	stp	x29, x30, [sp, #-64]!
    9598:	stp	x22, x21, [sp, #32]
    959c:	stp	x20, x19, [sp, #48]
    95a0:	ldr	x8, [x0, #16]
    95a4:	adrp	x21, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    95a8:	add	x21, x21, #0x594
    95ac:	mov	x19, x2
    95b0:	mov	x22, x0
    95b4:	cmp	x8, x21
    95b8:	mov	x20, x1
    95bc:	str	x23, [sp, #16]
    95c0:	mov	x29, sp
    95c4:	b.eq	95d4 <lzma_block_buffer_decode@@XZ_5.0+0x188>  // b.none
    95c8:	mov	x0, x22
    95cc:	mov	x1, x20
    95d0:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    95d4:	mov	x0, x19
    95d8:	str	x21, [x22, #16]
    95dc:	bl	3150 <lzma_block_unpadded_size@plt>
    95e0:	cbz	x0, 9660 <lzma_block_buffer_decode@@XZ_5.0+0x214>
    95e4:	ldr	x8, [x19, #24]
    95e8:	cmn	x8, #0x1
    95ec:	b.lt	9660 <lzma_block_buffer_decode@@XZ_5.0+0x214>  // b.tstop
    95f0:	ldr	x21, [x22]
    95f4:	cbnz	x21, 9640 <lzma_block_buffer_decode@@XZ_5.0+0x1f4>
    95f8:	mov	w0, #0xe8                  	// #232
    95fc:	mov	x1, x20
    9600:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    9604:	cbz	x0, 96d8 <lzma_block_buffer_decode@@XZ_5.0+0x28c>
    9608:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    960c:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    9610:	mov	x21, x0
    9614:	add	x8, x8, #0x6e0
    9618:	add	x9, x9, #0x93c
    961c:	mov	x10, #0xffffffffffffffff    	// #-1
    9620:	movi	v0.2d, #0x0
    9624:	str	x0, [x22]
    9628:	stp	x8, x9, [x22, #24]
    962c:	stp	xzr, x10, [x0, #8]
    9630:	stur	q0, [x0, #24]
    9634:	stur	q0, [x0, #40]
    9638:	stur	q0, [x0, #56]
    963c:	str	xzr, [x0, #72]
    9640:	str	wzr, [x21]
    9644:	stp	xzr, xzr, [x21, #88]
    9648:	str	x19, [x21, #80]
    964c:	ldr	x8, [x19, #16]
    9650:	cmn	x8, #0x1
    9654:	b.eq	9678 <lzma_block_buffer_decode@@XZ_5.0+0x22c>  // b.none
    9658:	ldr	w22, [x19, #8]
    965c:	b	9690 <lzma_block_buffer_decode@@XZ_5.0+0x244>
    9660:	mov	w0, #0xb                   	// #11
    9664:	ldp	x20, x19, [sp, #48]
    9668:	ldp	x22, x21, [sp, #32]
    966c:	ldr	x23, [sp, #16]
    9670:	ldp	x29, x30, [sp], #64
    9674:	ret
    9678:	ldp	w23, w22, [x19, #4]
    967c:	mov	w0, w22
    9680:	bl	3220 <lzma_check_size@plt>
    9684:	add	x8, x23, w0, uxtw
    9688:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    968c:	sub	x8, x9, x8
    9690:	add	x0, x21, #0x78
    9694:	mov	w1, w22
    9698:	stp	x8, xzr, [x21, #104]
    969c:	bl	b5e0 <lzma_check_size@@XZ_5.0+0x20>
    96a0:	ldr	w8, [x19]
    96a4:	cbz	w8, 96b4 <lzma_block_buffer_decode@@XZ_5.0+0x268>
    96a8:	ldrb	w8, [x19, #200]
    96ac:	cmp	w8, #0x0
    96b0:	cset	w8, ne  // ne = any
    96b4:	strb	w8, [x21, #224]
    96b8:	ldr	x2, [x19, #32]
    96bc:	add	x0, x21, #0x8
    96c0:	mov	x1, x20
    96c4:	ldp	x20, x19, [sp, #48]
    96c8:	ldp	x22, x21, [sp, #32]
    96cc:	ldr	x23, [sp, #16]
    96d0:	ldp	x29, x30, [sp], #64
    96d4:	b	9e38 <lzma_filter_decoder_is_supported@@XZ_5.0+0x68>
    96d8:	mov	w0, #0x5                   	// #5
    96dc:	b	9664 <lzma_block_buffer_decode@@XZ_5.0+0x218>
    96e0:	sub	sp, sp, #0x70
    96e4:	stp	x29, x30, [sp, #16]
    96e8:	stp	x26, x25, [sp, #48]
    96ec:	stp	x24, x23, [sp, #64]
    96f0:	stp	x22, x21, [sp, #80]
    96f4:	stp	x20, x19, [sp, #96]
    96f8:	ldr	w8, [x0]
    96fc:	mov	x20, x4
    9700:	mov	x21, x3
    9704:	mov	x22, x2
    9708:	mov	x19, x0
    970c:	str	x27, [sp, #32]
    9710:	add	x29, sp, #0x10
    9714:	cbz	w8, 9760 <lzma_block_buffer_decode@@XZ_5.0+0x314>
    9718:	cmp	w8, #0x2
    971c:	b.eq	989c <lzma_block_buffer_decode@@XZ_5.0+0x450>  // b.none
    9720:	cmp	w8, #0x1
    9724:	b.ne	9870 <lzma_block_buffer_decode@@XZ_5.0+0x424>  // b.any
    9728:	mov	x25, x19
    972c:	ldr	x8, [x25, #88]!
    9730:	tst	x8, #0x3
    9734:	b.eq	9878 <lzma_block_buffer_decode@@XZ_5.0+0x42c>  // b.none
    9738:	ldr	x9, [x21]
    973c:	cmp	x9, x20
    9740:	b.cs	98d8 <lzma_block_buffer_decode@@XZ_5.0+0x48c>  // b.hs, b.nlast
    9744:	add	x8, x8, #0x1
    9748:	str	x8, [x25]
    974c:	ldrb	w10, [x22, x9]
    9750:	add	x9, x9, #0x1
    9754:	str	x9, [x21]
    9758:	cbz	w10, 9730 <lzma_block_buffer_decode@@XZ_5.0+0x2e4>
    975c:	b	9918 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>
    9760:	ldr	w8, [x29, #96]
    9764:	ldr	x9, [x19, #32]
    9768:	ldr	x0, [x19, #8]
    976c:	ldr	x27, [x21]
    9770:	ldr	x26, [x6]
    9774:	mov	x2, x22
    9778:	mov	x3, x21
    977c:	mov	x4, x20
    9780:	mov	x25, x6
    9784:	mov	x23, x5
    9788:	str	w8, [sp]
    978c:	blr	x9
    9790:	ldr	x8, [x25]
    9794:	mov	x25, x19
    9798:	ldr	x9, [x21]
    979c:	ldr	x10, [x25, #88]!
    97a0:	mov	x12, #0x7fffffffffffffff    	// #9223372036854775807
    97a4:	mov	w24, w0
    97a8:	mov	w0, #0x9                   	// #9
    97ac:	ldr	x11, [x25, #16]
    97b0:	cmp	x11, x12
    97b4:	csel	x11, x11, x12, cc  // cc = lo, ul, last
    97b8:	subs	x12, x11, x10
    97bc:	b.cc	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>  // b.lo, b.ul, b.last
    97c0:	sub	x11, x9, x27
    97c4:	cmp	x12, x11
    97c8:	b.cc	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>  // b.lo, b.ul, b.last
    97cc:	ldr	x9, [x19, #80]
    97d0:	add	x10, x10, x11
    97d4:	str	x10, [x19, #88]
    97d8:	ldr	x10, [x19, #96]
    97dc:	ldr	x11, [x9, #24]
    97e0:	mov	x12, #0x7fffffffffffffff    	// #9223372036854775807
    97e4:	mov	w0, #0x9                   	// #9
    97e8:	cmp	x11, x12
    97ec:	csel	x11, x11, x12, cc  // cc = lo, ul, last
    97f0:	subs	x11, x11, x10
    97f4:	b.cc	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>  // b.lo, b.ul, b.last
    97f8:	sub	x3, x8, x26
    97fc:	cmp	x11, x3
    9800:	b.cc	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>  // b.lo, b.ul, b.last
    9804:	ldrb	w8, [x19, #224]
    9808:	add	x10, x10, x3
    980c:	str	x10, [x19, #96]
    9810:	cbnz	w8, 9824 <lzma_block_buffer_decode@@XZ_5.0+0x3d8>
    9814:	ldr	w1, [x9, #8]
    9818:	add	x0, x19, #0x78
    981c:	add	x2, x23, x26
    9820:	bl	b60c <lzma_check_size@@XZ_5.0+0x4c>
    9824:	cmp	w24, #0x1
    9828:	mov	w0, w24
    982c:	b.ne	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>  // b.any
    9830:	ldp	x9, x8, [x19, #80]
    9834:	ldr	x10, [x9, #16]
    9838:	cmn	x10, #0x1
    983c:	b.eq	9848 <lzma_block_buffer_decode@@XZ_5.0+0x3fc>  // b.none
    9840:	cmp	x10, x8
    9844:	b.ne	9918 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.any
    9848:	ldr	x11, [x9, #24]
    984c:	ldr	x10, [x19, #96]
    9850:	cmn	x11, #0x1
    9854:	b.eq	9860 <lzma_block_buffer_decode@@XZ_5.0+0x414>  // b.none
    9858:	cmp	x11, x10
    985c:	b.ne	9918 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.any
    9860:	stp	x8, x10, [x9, #16]
    9864:	mov	w9, #0x1                   	// #1
    9868:	str	w9, [x19]
    986c:	b	9730 <lzma_block_buffer_decode@@XZ_5.0+0x2e4>
    9870:	mov	w0, #0xb                   	// #11
    9874:	b	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>
    9878:	ldr	x8, [x19, #80]
    987c:	ldr	w1, [x8, #8]
    9880:	cbz	w1, 98e8 <lzma_block_buffer_decode@@XZ_5.0+0x49c>
    9884:	ldrb	w8, [x19, #224]
    9888:	cbnz	w8, 9894 <lzma_block_buffer_decode@@XZ_5.0+0x448>
    988c:	add	x0, x19, #0x78
    9890:	bl	b68c <lzma_check_size@@XZ_5.0+0xcc>
    9894:	mov	w8, #0x2                   	// #2
    9898:	str	w8, [x19]
    989c:	ldr	x25, [x19, #80]
    98a0:	ldr	w0, [x25, #8]
    98a4:	bl	3220 <lzma_check_size@plt>
    98a8:	mov	w23, w0
    98ac:	mov	w24, w0
    98b0:	add	x3, x25, #0x28
    98b4:	add	x4, x19, #0x70
    98b8:	mov	x0, x22
    98bc:	mov	x1, x21
    98c0:	mov	x2, x20
    98c4:	mov	x5, x23
    98c8:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    98cc:	ldr	x8, [x19, #112]
    98d0:	cmp	x8, w24, uxtw
    98d4:	b.cs	98e0 <lzma_block_buffer_decode@@XZ_5.0+0x494>  // b.hs, b.nlast
    98d8:	mov	w0, wzr
    98dc:	b	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>
    98e0:	ldrb	w8, [x19, #224]
    98e4:	cbz	w8, 98f0 <lzma_block_buffer_decode@@XZ_5.0+0x4a4>
    98e8:	mov	w0, #0x1                   	// #1
    98ec:	b	991c <lzma_block_buffer_decode@@XZ_5.0+0x4d0>
    98f0:	ldr	x20, [x19, #80]
    98f4:	ldr	w0, [x20, #8]
    98f8:	bl	30a0 <lzma_check_is_supported@plt>
    98fc:	tst	w0, #0xff
    9900:	b.eq	98e8 <lzma_block_buffer_decode@@XZ_5.0+0x49c>  // b.none
    9904:	add	x0, x20, #0x28
    9908:	add	x1, x19, #0x78
    990c:	mov	x2, x23
    9910:	bl	3230 <bcmp@plt>
    9914:	cbz	w0, 98e8 <lzma_block_buffer_decode@@XZ_5.0+0x49c>
    9918:	mov	w0, #0x9                   	// #9
    991c:	ldp	x20, x19, [sp, #96]
    9920:	ldp	x22, x21, [sp, #80]
    9924:	ldp	x24, x23, [sp, #64]
    9928:	ldp	x26, x25, [sp, #48]
    992c:	ldr	x27, [sp, #32]
    9930:	ldp	x29, x30, [sp, #16]
    9934:	add	sp, sp, #0x70
    9938:	ret
    993c:	stp	x29, x30, [sp, #-32]!
    9940:	stp	x20, x19, [sp, #16]
    9944:	mov	x20, x0
    9948:	add	x0, x0, #0x8
    994c:	mov	x29, sp
    9950:	mov	x19, x1
    9954:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    9958:	mov	x0, x20
    995c:	mov	x1, x19
    9960:	ldp	x20, x19, [sp, #16]
    9964:	ldp	x29, x30, [sp], #32
    9968:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>

000000000000996c <lzma_block_decoder@@XZ_5.0>:
    996c:	stp	x29, x30, [sp, #-48]!
    9970:	str	x21, [sp, #16]
    9974:	stp	x20, x19, [sp, #32]
    9978:	mov	x29, sp
    997c:	mov	x21, x1
    9980:	mov	x19, x0
    9984:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    9988:	mov	w20, w0
    998c:	cbnz	w0, 99c0 <lzma_block_decoder@@XZ_5.0+0x54>
    9990:	ldp	x1, x0, [x19, #48]
    9994:	mov	x2, x21
    9998:	bl	9594 <lzma_block_buffer_decode@@XZ_5.0+0x148>
    999c:	mov	w20, w0
    99a0:	cbz	w0, 99b0 <lzma_block_decoder@@XZ_5.0+0x44>
    99a4:	mov	x0, x19
    99a8:	bl	32e0 <lzma_end@plt>
    99ac:	b	99c0 <lzma_block_decoder@@XZ_5.0+0x54>
    99b0:	ldr	x8, [x19, #56]
    99b4:	mov	w9, #0x1                   	// #1
    99b8:	strb	w9, [x8, #88]
    99bc:	strb	w9, [x8, #91]
    99c0:	mov	w0, w20
    99c4:	ldp	x20, x19, [sp, #32]
    99c8:	ldr	x21, [sp, #16]
    99cc:	ldp	x29, x30, [sp], #48
    99d0:	ret

00000000000099d4 <lzma_block_header_decode@@XZ_5.0>:
    99d4:	stp	x29, x30, [sp, #-80]!
    99d8:	stp	x24, x23, [sp, #32]
    99dc:	stp	x22, x21, [sp, #48]
    99e0:	stp	x20, x19, [sp, #64]
    99e4:	ldr	x9, [x0, #32]
    99e8:	mov	x21, x2
    99ec:	mov	x19, x1
    99f0:	mov	x20, x0
    99f4:	mov	x8, xzr
    99f8:	mov	x10, #0xffffffffffffffff    	// #-1
    99fc:	str	x25, [sp, #16]
    9a00:	mov	x29, sp
    9a04:	add	x11, x9, x8
    9a08:	add	x8, x8, #0x10
    9a0c:	cmp	x8, #0x50
    9a10:	stp	x10, xzr, [x11]
    9a14:	b.ne	9a04 <lzma_block_header_decode@@XZ_5.0+0x30>  // b.any
    9a18:	ldr	w8, [x20]
    9a1c:	cmp	w8, #0x1
    9a20:	b.ls	9a2c <lzma_block_header_decode@@XZ_5.0+0x58>  // b.plast
    9a24:	mov	w8, #0x1                   	// #1
    9a28:	str	w8, [x20]
    9a2c:	strb	wzr, [x20, #200]
    9a30:	ldrb	w8, [x21]
    9a34:	ldr	w9, [x20, #4]
    9a38:	lsl	x22, x8, #2
    9a3c:	add	w8, w22, #0x4
    9a40:	cmp	w8, w9
    9a44:	b.ne	9a54 <lzma_block_header_decode@@XZ_5.0+0x80>  // b.any
    9a48:	ldr	w8, [x20, #8]
    9a4c:	cmp	w8, #0xf
    9a50:	b.ls	9a74 <lzma_block_header_decode@@XZ_5.0+0xa0>  // b.plast
    9a54:	mov	w23, #0xb                   	// #11
    9a58:	mov	w0, w23
    9a5c:	ldp	x20, x19, [sp, #64]
    9a60:	ldp	x22, x21, [sp, #48]
    9a64:	ldp	x24, x23, [sp, #32]
    9a68:	ldr	x25, [sp, #16]
    9a6c:	ldp	x29, x30, [sp], #80
    9a70:	ret
    9a74:	mov	x0, x21
    9a78:	mov	x1, x22
    9a7c:	mov	w2, wzr
    9a80:	bl	3180 <lzma_crc32@plt>
    9a84:	ldr	w8, [x21, x22]
    9a88:	cmp	w0, w8
    9a8c:	b.ne	9b6c <lzma_block_header_decode@@XZ_5.0+0x198>  // b.any
    9a90:	ldrb	w8, [x21, #1]
    9a94:	tst	w8, #0x3c
    9a98:	b.eq	9aa4 <lzma_block_header_decode@@XZ_5.0+0xd0>  // b.none
    9a9c:	mov	w23, #0x8                   	// #8
    9aa0:	b	9a58 <lzma_block_header_decode@@XZ_5.0+0x84>
    9aa4:	mov	w9, #0x2                   	// #2
    9aa8:	add	x0, x20, #0x10
    9aac:	str	x9, [x29, #24]
    9ab0:	tbnz	w8, #6, 9ac0 <lzma_block_header_decode@@XZ_5.0+0xec>
    9ab4:	mov	x8, #0xffffffffffffffff    	// #-1
    9ab8:	str	x8, [x0]
    9abc:	b	9ae8 <lzma_block_header_decode@@XZ_5.0+0x114>
    9ac0:	add	x3, x29, #0x18
    9ac4:	mov	x1, xzr
    9ac8:	mov	x2, x21
    9acc:	mov	x4, x22
    9ad0:	bl	3370 <lzma_vli_decode@plt>
    9ad4:	mov	w23, w0
    9ad8:	cbnz	w0, 9a58 <lzma_block_header_decode@@XZ_5.0+0x84>
    9adc:	mov	x0, x20
    9ae0:	bl	3150 <lzma_block_unpadded_size@plt>
    9ae4:	cbz	x0, 9b6c <lzma_block_header_decode@@XZ_5.0+0x198>
    9ae8:	ldrsb	w8, [x21, #1]
    9aec:	add	x0, x20, #0x18
    9af0:	tbnz	w8, #31, 9b74 <lzma_block_header_decode@@XZ_5.0+0x1a0>
    9af4:	mov	x8, #0xffffffffffffffff    	// #-1
    9af8:	str	x8, [x0]
    9afc:	ldrb	w8, [x21, #1]
    9b00:	mov	x24, xzr
    9b04:	and	x8, x8, #0x3
    9b08:	lsl	x8, x8, #4
    9b0c:	add	x25, x8, #0x10
    9b10:	ldr	x8, [x20, #32]
    9b14:	add	x3, x29, #0x18
    9b18:	mov	x1, x19
    9b1c:	mov	x2, x21
    9b20:	add	x0, x8, x24
    9b24:	mov	x4, x22
    9b28:	bl	34b0 <lzma_filter_flags_decode@plt>
    9b2c:	cbnz	w0, 9b94 <lzma_block_header_decode@@XZ_5.0+0x1c0>
    9b30:	add	x24, x24, #0x10
    9b34:	cmp	x25, x24
    9b38:	b.ne	9b10 <lzma_block_header_decode@@XZ_5.0+0x13c>  // b.any
    9b3c:	ldr	x8, [x29, #24]
    9b40:	cmp	x8, x22
    9b44:	b.cs	9ba8 <lzma_block_header_decode@@XZ_5.0+0x1d4>  // b.hs, b.nlast
    9b48:	add	x9, x8, #0x1
    9b4c:	str	x9, [x29, #24]
    9b50:	ldrb	w10, [x21, x8]
    9b54:	mov	x8, x9
    9b58:	cbz	w10, 9b40 <lzma_block_header_decode@@XZ_5.0+0x16c>
    9b5c:	mov	x0, x20
    9b60:	mov	x1, x19
    9b64:	bl	9bb0 <lzma_block_header_decode@@XZ_5.0+0x1dc>
    9b68:	b	9a9c <lzma_block_header_decode@@XZ_5.0+0xc8>
    9b6c:	mov	w23, #0x9                   	// #9
    9b70:	b	9a58 <lzma_block_header_decode@@XZ_5.0+0x84>
    9b74:	add	x3, x29, #0x18
    9b78:	mov	x1, xzr
    9b7c:	mov	x2, x21
    9b80:	mov	x4, x22
    9b84:	bl	3370 <lzma_vli_decode@plt>
    9b88:	mov	w23, w0
    9b8c:	cbnz	w0, 9a58 <lzma_block_header_decode@@XZ_5.0+0x84>
    9b90:	b	9afc <lzma_block_header_decode@@XZ_5.0+0x128>
    9b94:	mov	w23, w0
    9b98:	mov	x0, x20
    9b9c:	mov	x1, x19
    9ba0:	bl	9bb0 <lzma_block_header_decode@@XZ_5.0+0x1dc>
    9ba4:	b	9a58 <lzma_block_header_decode@@XZ_5.0+0x84>
    9ba8:	mov	w23, wzr
    9bac:	b	9a58 <lzma_block_header_decode@@XZ_5.0+0x84>
    9bb0:	stp	x29, x30, [sp, #-48]!
    9bb4:	stp	x22, x21, [sp, #16]
    9bb8:	stp	x20, x19, [sp, #32]
    9bbc:	ldr	x8, [x0, #32]
    9bc0:	mov	x19, x1
    9bc4:	mov	x20, x0
    9bc8:	mov	x21, xzr
    9bcc:	mov	x22, #0xffffffffffffffff    	// #-1
    9bd0:	mov	x29, sp
    9bd4:	add	x8, x8, x21
    9bd8:	ldr	x0, [x8, #8]
    9bdc:	mov	x1, x19
    9be0:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    9be4:	ldr	x8, [x20, #32]
    9be8:	add	x9, x8, x21
    9bec:	add	x21, x21, #0x10
    9bf0:	cmp	x21, #0x40
    9bf4:	stp	x22, xzr, [x9]
    9bf8:	b.ne	9bd4 <lzma_block_header_decode@@XZ_5.0+0x200>  // b.any
    9bfc:	ldp	x20, x19, [sp, #32]
    9c00:	ldp	x22, x21, [sp, #16]
    9c04:	ldp	x29, x30, [sp], #48
    9c08:	ret

0000000000009c0c <lzma_easy_decoder_memusage@@XZ_5.0>:
    9c0c:	sub	sp, sp, #0xd0
    9c10:	mov	w1, w0
    9c14:	mov	x0, sp
    9c18:	stp	x29, x30, [sp, #192]
    9c1c:	add	x29, sp, #0xc0
    9c20:	bl	3ee4 <lzma_block_total_size@@XZ_5.0+0x24>
    9c24:	tbz	w0, #0, 9c30 <lzma_easy_decoder_memusage@@XZ_5.0+0x24>
    9c28:	mov	w0, #0xffffffff            	// #-1
    9c2c:	b	9c38 <lzma_easy_decoder_memusage@@XZ_5.0+0x2c>
    9c30:	mov	x0, sp
    9c34:	bl	32a0 <lzma_raw_decoder_memusage@plt>
    9c38:	ldp	x29, x30, [sp, #192]
    9c3c:	add	sp, sp, #0xd0
    9c40:	ret

0000000000009c44 <lzma_raw_buffer_decode@@XZ_5.0>:
    9c44:	sub	sp, sp, #0xd0
    9c48:	stp	x24, x23, [sp, #160]
    9c4c:	mov	x23, x2
    9c50:	mov	w24, #0xb                   	// #11
    9c54:	stp	x29, x30, [sp, #112]
    9c58:	stp	x28, x27, [sp, #128]
    9c5c:	stp	x26, x25, [sp, #144]
    9c60:	stp	x22, x21, [sp, #176]
    9c64:	stp	x20, x19, [sp, #192]
    9c68:	add	x29, sp, #0x70
    9c6c:	cbz	x2, 9dac <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    9c70:	mov	x21, x3
    9c74:	cbz	x3, 9dac <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    9c78:	mov	x20, x6
    9c7c:	mov	w24, #0xb                   	// #11
    9c80:	cbz	x6, 9dac <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    9c84:	mov	x26, x5
    9c88:	cbz	x5, 9dac <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    9c8c:	ldr	x8, [x21]
    9c90:	mov	x22, x4
    9c94:	cmp	x8, x4
    9c98:	b.hi	9dac <lzma_raw_buffer_decode@@XZ_5.0+0x168>  // b.pmore
    9c9c:	ldr	x8, [x20]
    9ca0:	mov	x25, x7
    9ca4:	cmp	x8, x7
    9ca8:	b.ls	9cb4 <lzma_raw_buffer_decode@@XZ_5.0+0x70>  // b.plast
    9cac:	mov	w24, #0xb                   	// #11
    9cb0:	b	9dac <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    9cb4:	mov	x2, x0
    9cb8:	movi	v0.2d, #0x0
    9cbc:	mov	x8, #0xffffffffffffffff    	// #-1
    9cc0:	add	x0, sp, #0x20
    9cc4:	mov	x19, x1
    9cc8:	str	xzr, [sp, #96]
    9ccc:	stp	q0, q0, [sp, #64]
    9cd0:	stp	q0, q0, [sp, #32]
    9cd4:	str	x8, [sp, #40]
    9cd8:	bl	9e38 <lzma_filter_decoder_is_supported@@XZ_5.0+0x68>
    9cdc:	mov	w24, w0
    9ce0:	cbnz	w0, 9dac <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    9ce4:	ldr	x8, [sp, #56]
    9ce8:	ldr	x0, [sp, #32]
    9cec:	ldr	x27, [x21]
    9cf0:	ldr	x28, [x20]
    9cf4:	mov	w9, #0x3                   	// #3
    9cf8:	mov	x1, x19
    9cfc:	mov	x2, x23
    9d00:	mov	x3, x21
    9d04:	mov	x4, x22
    9d08:	mov	x5, x26
    9d0c:	mov	x6, x20
    9d10:	mov	x7, x25
    9d14:	str	w9, [sp]
    9d18:	blr	x8
    9d1c:	cmp	w0, #0x1
    9d20:	b.eq	9d8c <lzma_raw_buffer_decode@@XZ_5.0+0x148>  // b.none
    9d24:	mov	w24, w0
    9d28:	cbnz	w0, 9d98 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    9d2c:	ldr	x8, [x21]
    9d30:	cmp	x8, x22
    9d34:	b.ne	9d94 <lzma_raw_buffer_decode@@XZ_5.0+0x150>  // b.any
    9d38:	ldr	x8, [x20]
    9d3c:	mov	w24, #0x9                   	// #9
    9d40:	cmp	x8, x25
    9d44:	b.ne	9d98 <lzma_raw_buffer_decode@@XZ_5.0+0x154>  // b.any
    9d48:	ldr	x8, [sp, #56]
    9d4c:	ldr	x0, [sp, #32]
    9d50:	mov	w9, #0x3                   	// #3
    9d54:	add	x5, sp, #0x1c
    9d58:	add	x6, sp, #0x10
    9d5c:	mov	w7, #0x1                   	// #1
    9d60:	mov	x1, x19
    9d64:	mov	x2, x23
    9d68:	mov	x3, x21
    9d6c:	mov	x4, x22
    9d70:	str	xzr, [sp, #16]
    9d74:	str	w9, [sp]
    9d78:	blr	x8
    9d7c:	ldr	x8, [sp, #16]
    9d80:	cmp	x8, #0x1
    9d84:	cinc	w24, w24, eq  // eq = none
    9d88:	b	9d98 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    9d8c:	mov	w24, wzr
    9d90:	b	9da0 <lzma_raw_buffer_decode@@XZ_5.0+0x15c>
    9d94:	mov	w24, #0xa                   	// #10
    9d98:	str	x27, [x21]
    9d9c:	str	x28, [x20]
    9da0:	add	x0, sp, #0x20
    9da4:	mov	x1, x19
    9da8:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    9dac:	mov	w0, w24
    9db0:	ldp	x20, x19, [sp, #192]
    9db4:	ldp	x22, x21, [sp, #176]
    9db8:	ldp	x24, x23, [sp, #160]
    9dbc:	ldp	x26, x25, [sp, #144]
    9dc0:	ldp	x28, x27, [sp, #128]
    9dc4:	ldp	x29, x30, [sp, #112]
    9dc8:	add	sp, sp, #0xd0
    9dcc:	ret

0000000000009dd0 <lzma_filter_decoder_is_supported@@XZ_5.0>:
    9dd0:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    9dd4:	mov	x8, xzr
    9dd8:	add	x9, x9, #0xbf8
    9ddc:	ldr	x10, [x9, x8]
    9de0:	cmp	x10, x0
    9de4:	b.eq	9dfc <lzma_filter_decoder_is_supported@@XZ_5.0+0x2c>  // b.none
    9de8:	add	x8, x8, #0x20
    9dec:	cmp	x8, #0x120
    9df0:	b.ne	9ddc <lzma_filter_decoder_is_supported@@XZ_5.0+0xc>  // b.any
    9df4:	mov	w0, wzr
    9df8:	ret
    9dfc:	mov	w0, #0x1                   	// #1
    9e00:	ret
    9e04:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    9e08:	mov	x8, xzr
    9e0c:	add	x9, x9, #0xbf8
    9e10:	ldr	x10, [x9, x8]
    9e14:	cmp	x10, x0
    9e18:	b.eq	9e30 <lzma_filter_decoder_is_supported@@XZ_5.0+0x60>  // b.none
    9e1c:	add	x8, x8, #0x20
    9e20:	cmp	x8, #0x120
    9e24:	b.ne	9e10 <lzma_filter_decoder_is_supported@@XZ_5.0+0x40>  // b.any
    9e28:	mov	x0, xzr
    9e2c:	ret
    9e30:	add	x0, x9, x8
    9e34:	ret
    9e38:	adrp	x3, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    9e3c:	add	x3, x3, #0xe04
    9e40:	mov	w4, wzr
    9e44:	b	40a8 <lzma_filters_copy@@XZ_5.0+0x178>

0000000000009e48 <lzma_raw_decoder@@XZ_5.0>:
    9e48:	stp	x29, x30, [sp, #-48]!
    9e4c:	str	x21, [sp, #16]
    9e50:	stp	x20, x19, [sp, #32]
    9e54:	mov	x29, sp
    9e58:	mov	x21, x1
    9e5c:	mov	x19, x0
    9e60:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    9e64:	mov	w20, w0
    9e68:	cbnz	w0, 9ea8 <lzma_raw_decoder@@XZ_5.0+0x60>
    9e6c:	ldp	x1, x0, [x19, #48]
    9e70:	adrp	x3, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    9e74:	add	x3, x3, #0xe04
    9e78:	mov	x2, x21
    9e7c:	mov	w4, wzr
    9e80:	bl	40a8 <lzma_filters_copy@@XZ_5.0+0x178>
    9e84:	mov	w20, w0
    9e88:	cbz	w0, 9e98 <lzma_raw_decoder@@XZ_5.0+0x50>
    9e8c:	mov	x0, x19
    9e90:	bl	32e0 <lzma_end@plt>
    9e94:	b	9ea8 <lzma_raw_decoder@@XZ_5.0+0x60>
    9e98:	ldr	x8, [x19, #56]
    9e9c:	mov	w9, #0x1                   	// #1
    9ea0:	strb	w9, [x8, #88]
    9ea4:	strb	w9, [x8, #91]
    9ea8:	mov	w0, w20
    9eac:	ldp	x20, x19, [sp, #32]
    9eb0:	ldr	x21, [sp, #16]
    9eb4:	ldp	x29, x30, [sp], #48
    9eb8:	ret

0000000000009ebc <lzma_raw_decoder_memusage@@XZ_5.0>:
    9ebc:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12b0>
    9ec0:	add	x8, x8, #0xe04
    9ec4:	mov	x1, x0
    9ec8:	mov	x0, x8
    9ecc:	b	42ac <lzma_filters_copy@@XZ_5.0+0x37c>

0000000000009ed0 <lzma_properties_decode@@XZ_5.0>:
    9ed0:	mov	x8, x0
    9ed4:	str	xzr, [x0, #8]!
    9ed8:	ldr	x8, [x8]
    9edc:	adrp	x10, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    9ee0:	mov	x9, xzr
    9ee4:	add	x10, x10, #0xbf8
    9ee8:	ldr	x11, [x10, x9]
    9eec:	cmp	x11, x8
    9ef0:	b.eq	9f08 <lzma_properties_decode@@XZ_5.0+0x38>  // b.none
    9ef4:	add	x9, x9, #0x20
    9ef8:	cmp	x9, #0x120
    9efc:	b.ne	9ee8 <lzma_properties_decode@@XZ_5.0+0x18>  // b.any
    9f00:	mov	w0, #0x8                   	// #8
    9f04:	ret
    9f08:	add	x8, x10, x9
    9f0c:	ldr	x4, [x8, #24]
    9f10:	br	x4

0000000000009f14 <lzma_filter_flags_decode@@XZ_5.0>:
    9f14:	stp	x29, x30, [sp, #-64]!
    9f18:	stp	x20, x19, [sp, #48]
    9f1c:	mov	x20, x1
    9f20:	mov	x1, xzr
    9f24:	str	x23, [sp, #16]
    9f28:	stp	x22, x21, [sp, #32]
    9f2c:	mov	x29, sp
    9f30:	mov	x23, x4
    9f34:	mov	x19, x3
    9f38:	mov	x22, x2
    9f3c:	mov	x21, x0
    9f40:	str	xzr, [x0, #8]
    9f44:	bl	3370 <lzma_vli_decode@plt>
    9f48:	cbnz	w0, 9fb0 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    9f4c:	ldr	x8, [x21]
    9f50:	lsr	x8, x8, #62
    9f54:	cbz	x8, 9f60 <lzma_filter_flags_decode@@XZ_5.0+0x4c>
    9f58:	mov	w0, #0x9                   	// #9
    9f5c:	b	9fb0 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    9f60:	add	x0, x29, #0x18
    9f64:	mov	x1, xzr
    9f68:	mov	x2, x22
    9f6c:	mov	x3, x19
    9f70:	mov	x4, x23
    9f74:	bl	3370 <lzma_vli_decode@plt>
    9f78:	cbnz	w0, 9fb0 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    9f7c:	ldr	x8, [x19]
    9f80:	ldr	x3, [x29, #24]
    9f84:	sub	x9, x23, x8
    9f88:	cmp	x9, x3
    9f8c:	b.cc	9f58 <lzma_filter_flags_decode@@XZ_5.0+0x44>  // b.lo, b.ul, b.last
    9f90:	add	x2, x22, x8
    9f94:	mov	x0, x21
    9f98:	mov	x1, x20
    9f9c:	bl	3200 <lzma_properties_decode@plt>
    9fa0:	ldr	x8, [x29, #24]
    9fa4:	ldr	x9, [x19]
    9fa8:	add	x8, x9, x8
    9fac:	str	x8, [x19]
    9fb0:	ldp	x20, x19, [sp, #48]
    9fb4:	ldp	x22, x21, [sp, #32]
    9fb8:	ldr	x23, [sp, #16]
    9fbc:	ldp	x29, x30, [sp], #64
    9fc0:	ret

0000000000009fc4 <lzma_index_decoder@@XZ_5.0>:
    9fc4:	stp	x29, x30, [sp, #-48]!
    9fc8:	stp	x22, x21, [sp, #16]
    9fcc:	stp	x20, x19, [sp, #32]
    9fd0:	mov	x29, sp
    9fd4:	mov	x21, x2
    9fd8:	mov	x22, x1
    9fdc:	mov	x19, x0
    9fe0:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    9fe4:	mov	w20, w0
    9fe8:	cbnz	w0, a020 <lzma_index_decoder@@XZ_5.0+0x5c>
    9fec:	ldp	x1, x0, [x19, #48]
    9ff0:	mov	x2, x22
    9ff4:	mov	x3, x21
    9ff8:	bl	a034 <lzma_index_decoder@@XZ_5.0+0x70>
    9ffc:	mov	w20, w0
    a000:	cbz	w0, a010 <lzma_index_decoder@@XZ_5.0+0x4c>
    a004:	mov	x0, x19
    a008:	bl	32e0 <lzma_end@plt>
    a00c:	b	a020 <lzma_index_decoder@@XZ_5.0+0x5c>
    a010:	ldr	x8, [x19, #56]
    a014:	mov	w9, #0x1                   	// #1
    a018:	strb	w9, [x8, #88]
    a01c:	strb	w9, [x8, #91]
    a020:	mov	w0, w20
    a024:	ldp	x20, x19, [sp, #32]
    a028:	ldp	x22, x21, [sp, #16]
    a02c:	ldp	x29, x30, [sp], #48
    a030:	ret
    a034:	stp	x29, x30, [sp, #-64]!
    a038:	stp	x22, x21, [sp, #32]
    a03c:	stp	x20, x19, [sp, #48]
    a040:	ldr	x8, [x0, #16]
    a044:	adrp	x22, a000 <lzma_index_decoder@@XZ_5.0+0x3c>
    a048:	add	x22, x22, #0x34
    a04c:	str	x23, [sp, #16]
    a050:	mov	x19, x3
    a054:	mov	x20, x2
    a058:	mov	x23, x0
    a05c:	cmp	x8, x22
    a060:	mov	x21, x1
    a064:	mov	x29, sp
    a068:	b.eq	a078 <lzma_index_decoder@@XZ_5.0+0xb4>  // b.none
    a06c:	mov	x0, x23
    a070:	mov	x1, x21
    a074:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    a078:	str	x22, [x23, #16]
    a07c:	cbz	x20, a098 <lzma_index_decoder@@XZ_5.0+0xd4>
    a080:	ldr	x22, [x23]
    a084:	cbz	x22, a0a0 <lzma_index_decoder@@XZ_5.0+0xdc>
    a088:	ldr	x0, [x22, #16]
    a08c:	mov	x1, x21
    a090:	bl	3390 <lzma_index_end@plt>
    a094:	b	a0dc <lzma_index_decoder@@XZ_5.0+0x118>
    a098:	mov	w0, #0xb                   	// #11
    a09c:	b	a11c <lzma_index_decoder@@XZ_5.0+0x158>
    a0a0:	mov	w0, #0x48                  	// #72
    a0a4:	mov	x1, x21
    a0a8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    a0ac:	cbz	x0, a118 <lzma_index_decoder@@XZ_5.0+0x154>
    a0b0:	adrp	x8, a000 <lzma_index_decoder@@XZ_5.0+0x3c>
    a0b4:	adrp	x9, a000 <lzma_index_decoder@@XZ_5.0+0x3c>
    a0b8:	adrp	x10, a000 <lzma_index_decoder@@XZ_5.0+0x3c>
    a0bc:	add	x8, x8, #0x25c
    a0c0:	add	x9, x9, #0x51c
    a0c4:	add	x10, x10, #0x54c
    a0c8:	mov	x22, x0
    a0cc:	str	x0, [x23]
    a0d0:	stp	x8, x9, [x23, #24]
    a0d4:	str	x10, [x23, #56]
    a0d8:	str	xzr, [x0, #16]
    a0dc:	mov	x0, x21
    a0e0:	str	x20, [x22, #24]
    a0e4:	str	xzr, [x20]
    a0e8:	bl	3360 <lzma_index_init@plt>
    a0ec:	str	x0, [x22, #16]
    a0f0:	cbz	x0, a118 <lzma_index_decoder@@XZ_5.0+0x154>
    a0f4:	cmp	x19, #0x0
    a0f8:	mov	w0, wzr
    a0fc:	csinc	x8, x19, xzr, ne  // ne = any
    a100:	str	wzr, [x22]
    a104:	str	xzr, [x22, #32]
    a108:	str	xzr, [x22, #56]
    a10c:	str	x8, [x22, #8]
    a110:	str	wzr, [x22, #64]
    a114:	b	a11c <lzma_index_decoder@@XZ_5.0+0x158>
    a118:	mov	w0, #0x5                   	// #5
    a11c:	ldp	x20, x19, [sp, #48]
    a120:	ldp	x22, x21, [sp, #32]
    a124:	ldr	x23, [sp, #16]
    a128:	ldp	x29, x30, [sp], #64
    a12c:	ret

000000000000a130 <lzma_index_buffer_decode@@XZ_5.0>:
    a130:	sub	sp, sp, #0x90
    a134:	mov	x8, x0
    a138:	mov	w0, #0xb                   	// #11
    a13c:	stp	x29, x30, [sp, #80]
    a140:	stp	x24, x23, [sp, #96]
    a144:	stp	x22, x21, [sp, #112]
    a148:	stp	x20, x19, [sp, #128]
    a14c:	add	x29, sp, #0x50
    a150:	cbz	x8, a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a154:	mov	x19, x1
    a158:	cbz	x1, a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a15c:	mov	x23, x3
    a160:	cbz	x3, a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a164:	mov	x20, x4
    a168:	cbz	x4, a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a16c:	ldr	x9, [x20]
    a170:	mov	x22, x5
    a174:	cmp	x9, x5
    a178:	b.ls	a184 <lzma_index_buffer_decode@@XZ_5.0+0x54>  // b.plast
    a17c:	mov	w0, #0xb                   	// #11
    a180:	b	a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a184:	ldr	x24, [x19]
    a188:	mov	x0, x2
    a18c:	mov	x21, x2
    a190:	str	x8, [sp, #32]
    a194:	str	xzr, [x8]
    a198:	bl	3360 <lzma_index_init@plt>
    a19c:	str	x0, [sp, #24]
    a1a0:	cbz	x0, a230 <lzma_index_buffer_decode@@XZ_5.0+0x100>
    a1a4:	cmp	x24, #0x0
    a1a8:	csinc	x8, x24, xzr, ne  // ne = any
    a1ac:	str	wzr, [sp, #8]
    a1b0:	str	xzr, [sp, #64]
    a1b4:	str	x8, [sp, #16]
    a1b8:	str	xzr, [sp, #40]
    a1bc:	str	wzr, [sp, #72]
    a1c0:	ldr	x24, [x20]
    a1c4:	add	x0, sp, #0x8
    a1c8:	mov	x1, x21
    a1cc:	mov	x2, x23
    a1d0:	mov	x3, x20
    a1d4:	mov	x4, x22
    a1d8:	mov	x5, xzr
    a1dc:	mov	x6, xzr
    a1e0:	mov	x7, xzr
    a1e4:	str	wzr, [sp]
    a1e8:	bl	a25c <lzma_index_buffer_decode@@XZ_5.0+0x12c>
    a1ec:	mov	w22, w0
    a1f0:	cmp	w0, #0x1
    a1f4:	mov	w0, wzr
    a1f8:	b.eq	a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>  // b.none
    a1fc:	ldr	x0, [sp, #24]
    a200:	mov	x1, x21
    a204:	bl	3390 <lzma_index_end@plt>
    a208:	str	x24, [x20]
    a20c:	cbz	w22, a238 <lzma_index_buffer_decode@@XZ_5.0+0x108>
    a210:	cmp	w22, #0x6
    a214:	b.ne	a240 <lzma_index_buffer_decode@@XZ_5.0+0x110>  // b.any
    a218:	ldr	x1, [sp, #40]
    a21c:	mov	w0, #0x1                   	// #1
    a220:	bl	3140 <lzma_index_memusage@plt>
    a224:	str	x0, [x19]
    a228:	mov	w0, #0x6                   	// #6
    a22c:	b	a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a230:	mov	w0, #0x5                   	// #5
    a234:	b	a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a238:	mov	w0, #0x9                   	// #9
    a23c:	b	a244 <lzma_index_buffer_decode@@XZ_5.0+0x114>
    a240:	mov	w0, w22
    a244:	ldp	x20, x19, [sp, #128]
    a248:	ldp	x22, x21, [sp, #112]
    a24c:	ldp	x24, x23, [sp, #96]
    a250:	ldp	x29, x30, [sp, #80]
    a254:	add	sp, sp, #0x90
    a258:	ret
    a25c:	sub	sp, sp, #0x70
    a260:	stp	x28, x27, [sp, #32]
    a264:	ldr	x27, [x3]
    a268:	stp	x20, x19, [sp, #96]
    a26c:	mov	x20, x2
    a270:	mov	x19, x0
    a274:	cmp	x27, x4
    a278:	stp	x29, x30, [sp, #16]
    a27c:	stp	x26, x25, [sp, #48]
    a280:	stp	x24, x23, [sp, #64]
    a284:	stp	x22, x21, [sp, #80]
    a288:	add	x29, sp, #0x10
    a28c:	str	x1, [sp]
    a290:	b.cs	a438 <lzma_index_buffer_decode@@XZ_5.0+0x308>  // b.hs, b.nlast
    a294:	add	x8, x19, #0x30
    a298:	str	x8, [sp, #8]
    a29c:	mov	x25, x19
    a2a0:	ldr	w8, [x25], #32
    a2a4:	adrp	x24, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    a2a8:	mov	x22, x4
    a2ac:	mov	x21, x3
    a2b0:	add	x23, x19, #0x38
    a2b4:	add	x28, x19, #0x28
    a2b8:	add	x24, x24, #0xa7c
    a2bc:	mov	x26, x27
    a2c0:	cmp	w8, #0x7
    a2c4:	b.hi	a444 <lzma_index_buffer_decode@@XZ_5.0+0x314>  // b.pmore
    a2c8:	mov	w9, w8
    a2cc:	adr	x10, a2dc <lzma_index_buffer_decode@@XZ_5.0+0x1ac>
    a2d0:	ldrb	w11, [x24, x9]
    a2d4:	add	x10, x10, x11, lsl #2
    a2d8:	br	x10
    a2dc:	cmp	w8, #0x3
    a2e0:	ldr	x8, [sp, #8]
    a2e4:	mov	x1, x23
    a2e8:	mov	x2, x20
    a2ec:	mov	x3, x21
    a2f0:	csel	x0, x28, x8, eq  // eq = none
    a2f4:	mov	x4, x22
    a2f8:	bl	3370 <lzma_vli_decode@plt>
    a2fc:	cmp	w0, #0x1
    a300:	b.ne	a44c <lzma_index_buffer_decode@@XZ_5.0+0x31c>  // b.any
    a304:	ldr	w8, [x19]
    a308:	str	xzr, [x19, #56]
    a30c:	cmp	w8, #0x3
    a310:	b.ne	a3f4 <lzma_index_buffer_decode@@XZ_5.0+0x2c4>  // b.any
    a314:	ldr	x8, [x28]
    a318:	mov	x9, #0xfffffffffffffff7    	// #-9
    a31c:	movk	x9, #0x7fff, lsl #48
    a320:	sub	x8, x8, #0x5
    a324:	cmp	x8, x9
    a328:	b.hi	a504 <lzma_index_buffer_decode@@XZ_5.0+0x3d4>  // b.pmore
    a32c:	mov	w8, #0x4                   	// #4
    a330:	b	a420 <lzma_index_buffer_decode@@XZ_5.0+0x2f0>
    a334:	ldrb	w8, [x20, x26]
    a338:	add	x9, x26, #0x1
    a33c:	str	x9, [x21]
    a340:	cbnz	w8, a504 <lzma_index_buffer_decode@@XZ_5.0+0x3d4>
    a344:	mov	w8, #0x1                   	// #1
    a348:	b	a420 <lzma_index_buffer_decode@@XZ_5.0+0x2f0>
    a34c:	mov	x0, x25
    a350:	mov	x1, x23
    a354:	mov	x2, x20
    a358:	mov	x3, x21
    a35c:	mov	x4, x22
    a360:	bl	3370 <lzma_vli_decode@plt>
    a364:	cmp	w0, #0x1
    a368:	b.ne	a44c <lzma_index_buffer_decode@@XZ_5.0+0x31c>  // b.any
    a36c:	mov	w8, #0x2                   	// #2
    a370:	str	xzr, [x19, #56]
    a374:	str	w8, [x19]
    a378:	ldr	x1, [x19, #32]
    a37c:	mov	w0, #0x1                   	// #1
    a380:	bl	3140 <lzma_index_memusage@plt>
    a384:	ldr	x8, [x19, #8]
    a388:	cmp	x0, x8
    a38c:	b.hi	a454 <lzma_index_buffer_decode@@XZ_5.0+0x324>  // b.pmore
    a390:	ldr	x0, [x19, #16]
    a394:	ldr	x1, [x19, #32]
    a398:	bl	450c <lzma_index_end@@XZ_5.0+0x88>
    a39c:	ldr	x8, [x19, #32]
    a3a0:	cmp	x8, #0x0
    a3a4:	b	a414 <lzma_index_buffer_decode@@XZ_5.0+0x2e4>
    a3a8:	ldr	x0, [x19, #16]
    a3ac:	bl	4728 <lzma_index_checks@@XZ_5.0+0x28>
    a3b0:	mov	w8, w0
    a3b4:	mov	w9, #0x6                   	// #6
    a3b8:	str	x8, [x19, #56]
    a3bc:	str	w9, [x19]
    a3c0:	cbnz	x8, a3d0 <lzma_index_buffer_decode@@XZ_5.0+0x2a0>
    a3c4:	b	a494 <lzma_index_buffer_decode@@XZ_5.0+0x364>
    a3c8:	ldr	x8, [x23]
    a3cc:	cbz	x8, a494 <lzma_index_buffer_decode@@XZ_5.0+0x364>
    a3d0:	sub	x8, x8, #0x1
    a3d4:	str	x8, [x23]
    a3d8:	ldr	x8, [x21]
    a3dc:	ldrb	w9, [x20, x8]
    a3e0:	add	x8, x8, #0x1
    a3e4:	str	x8, [x21]
    a3e8:	cbnz	w9, a504 <lzma_index_buffer_decode@@XZ_5.0+0x3d4>
    a3ec:	mov	w8, #0x6                   	// #6
    a3f0:	b	a424 <lzma_index_buffer_decode@@XZ_5.0+0x2f4>
    a3f4:	ldr	x0, [x19, #16]
    a3f8:	ldp	x2, x3, [x19, #40]
    a3fc:	ldr	x1, [sp]
    a400:	bl	32c0 <lzma_index_append@plt>
    a404:	cbnz	w0, a514 <lzma_index_buffer_decode@@XZ_5.0+0x3e4>
    a408:	ldr	x8, [x25]
    a40c:	subs	x8, x8, #0x1
    a410:	str	x8, [x25]
    a414:	mov	w8, #0x3                   	// #3
    a418:	mov	w9, #0x5                   	// #5
    a41c:	csel	w8, w9, w8, eq  // eq = none
    a420:	str	w8, [x19]
    a424:	ldr	x26, [x21]
    a428:	cmp	x26, x22
    a42c:	b.cc	a2c0 <lzma_index_buffer_decode@@XZ_5.0+0x190>  // b.lo, b.ul, b.last
    a430:	mov	w26, wzr
    a434:	b	a458 <lzma_index_buffer_decode@@XZ_5.0+0x328>
    a438:	mov	w26, wzr
    a43c:	mov	x8, x27
    a440:	b	a45c <lzma_index_buffer_decode@@XZ_5.0+0x32c>
    a444:	mov	w26, #0xb                   	// #11
    a448:	b	a470 <lzma_index_buffer_decode@@XZ_5.0+0x340>
    a44c:	mov	w26, w0
    a450:	b	a458 <lzma_index_buffer_decode@@XZ_5.0+0x328>
    a454:	mov	w26, #0x6                   	// #6
    a458:	ldr	x8, [x21]
    a45c:	ldr	w2, [x19, #64]
    a460:	add	x0, x20, x27
    a464:	sub	x1, x8, x27
    a468:	bl	3180 <lzma_crc32@plt>
    a46c:	str	w0, [x19, #64]
    a470:	mov	w0, w26
    a474:	ldp	x20, x19, [sp, #96]
    a478:	ldp	x22, x21, [sp, #80]
    a47c:	ldp	x24, x23, [sp, #64]
    a480:	ldp	x26, x25, [sp, #48]
    a484:	ldp	x28, x27, [sp, #32]
    a488:	ldp	x29, x30, [sp, #16]
    a48c:	add	sp, sp, #0x70
    a490:	ret
    a494:	ldr	x26, [x21]
    a498:	ldr	w2, [x19, #64]
    a49c:	add	x0, x20, x27
    a4a0:	sub	x1, x26, x27
    a4a4:	bl	3180 <lzma_crc32@plt>
    a4a8:	mov	w8, #0x7                   	// #7
    a4ac:	str	w0, [x19, #64]
    a4b0:	str	w8, [x19]
    a4b4:	cmp	x22, x26
    a4b8:	b.eq	a50c <lzma_index_buffer_decode@@XZ_5.0+0x3dc>  // b.none
    a4bc:	ldr	x8, [x19, #56]
    a4c0:	ldr	w9, [x19, #64]
    a4c4:	ldrb	w10, [x20, x26]
    a4c8:	add	x26, x26, #0x1
    a4cc:	lsl	w11, w8, #3
    a4d0:	lsr	w9, w9, w11
    a4d4:	cmp	w10, w9, uxtb
    a4d8:	str	x26, [x21]
    a4dc:	b.ne	a504 <lzma_index_buffer_decode@@XZ_5.0+0x3d4>  // b.any
    a4e0:	add	x8, x8, #0x1
    a4e4:	cmp	x8, #0x4
    a4e8:	str	x8, [x23]
    a4ec:	b.cc	a4b4 <lzma_index_buffer_decode@@XZ_5.0+0x384>  // b.lo, b.ul, b.last
    a4f0:	ldp	x8, x9, [x19, #16]
    a4f4:	mov	w26, #0x1                   	// #1
    a4f8:	str	x8, [x9]
    a4fc:	str	xzr, [x19, #16]
    a500:	b	a470 <lzma_index_buffer_decode@@XZ_5.0+0x340>
    a504:	mov	w26, #0x9                   	// #9
    a508:	b	a470 <lzma_index_buffer_decode@@XZ_5.0+0x340>
    a50c:	mov	w26, wzr
    a510:	b	a470 <lzma_index_buffer_decode@@XZ_5.0+0x340>
    a514:	mov	w26, w0
    a518:	b	a470 <lzma_index_buffer_decode@@XZ_5.0+0x340>
    a51c:	stp	x29, x30, [sp, #-32]!
    a520:	stp	x20, x19, [sp, #16]
    a524:	mov	x19, x0
    a528:	ldr	x0, [x0, #16]
    a52c:	mov	x29, sp
    a530:	mov	x20, x1
    a534:	bl	3390 <lzma_index_end@plt>
    a538:	mov	x0, x19
    a53c:	mov	x1, x20
    a540:	ldp	x20, x19, [sp, #16]
    a544:	ldp	x29, x30, [sp], #32
    a548:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    a54c:	stp	x29, x30, [sp, #-48]!
    a550:	stp	x22, x21, [sp, #16]
    a554:	stp	x20, x19, [sp, #32]
    a558:	ldr	x8, [x0, #32]
    a55c:	mov	x20, x0
    a560:	mov	x21, x1
    a564:	mov	w0, #0x1                   	// #1
    a568:	mov	x1, x8
    a56c:	mov	x29, sp
    a570:	mov	x19, x3
    a574:	mov	x22, x2
    a578:	bl	3140 <lzma_index_memusage@plt>
    a57c:	str	x0, [x21]
    a580:	ldr	x8, [x20, #8]
    a584:	str	x8, [x22]
    a588:	cbz	x19, a5a0 <lzma_index_buffer_decode@@XZ_5.0+0x470>
    a58c:	ldr	x8, [x21]
    a590:	cmp	x8, x19
    a594:	b.ls	a5a8 <lzma_index_buffer_decode@@XZ_5.0+0x478>  // b.plast
    a598:	mov	w0, #0x6                   	// #6
    a59c:	b	a5b0 <lzma_index_buffer_decode@@XZ_5.0+0x480>
    a5a0:	mov	w0, wzr
    a5a4:	b	a5b0 <lzma_index_buffer_decode@@XZ_5.0+0x480>
    a5a8:	mov	w0, wzr
    a5ac:	str	x19, [x20, #8]
    a5b0:	ldp	x20, x19, [sp, #32]
    a5b4:	ldp	x22, x21, [sp, #16]
    a5b8:	ldp	x29, x30, [sp], #48
    a5bc:	ret

000000000000a5c0 <lzma_index_hash_init@@XZ_5.0>:
    a5c0:	stp	x29, x30, [sp, #-32]!
    a5c4:	str	x19, [sp, #16]
    a5c8:	mov	x19, x0
    a5cc:	mov	x29, sp
    a5d0:	cbnz	x0, a5e4 <lzma_index_hash_init@@XZ_5.0+0x24>
    a5d4:	mov	w0, #0x140                 	// #320
    a5d8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    a5dc:	mov	x19, x0
    a5e0:	cbz	x0, a61c <lzma_index_hash_init@@XZ_5.0+0x5c>
    a5e4:	add	x0, x19, #0x28
    a5e8:	movi	v0.2d, #0x0
    a5ec:	mov	w1, #0xa                   	// #10
    a5f0:	str	wzr, [x19]
    a5f4:	stp	xzr, xzr, [x19, #296]
    a5f8:	str	xzr, [x19, #288]
    a5fc:	stur	q0, [x19, #8]
    a600:	stur	q0, [x19, #24]
    a604:	stp	q0, q0, [x19, #144]
    a608:	str	wzr, [x19, #312]
    a60c:	bl	b5e0 <lzma_check_size@@XZ_5.0+0x20>
    a610:	add	x0, x19, #0xb0
    a614:	mov	w1, #0xa                   	// #10
    a618:	bl	b5e0 <lzma_check_size@@XZ_5.0+0x20>
    a61c:	mov	x0, x19
    a620:	ldr	x19, [sp, #16]
    a624:	ldp	x29, x30, [sp], #32
    a628:	ret

000000000000a62c <lzma_index_hash_end@@XZ_5.0>:
    a62c:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>

000000000000a630 <lzma_index_hash_size@@XZ_5.0>:
    a630:	stp	x29, x30, [sp, #-32]!
    a634:	str	x19, [sp, #16]
    a638:	ldp	x8, x19, [x0, #24]
    a63c:	mov	x29, sp
    a640:	mov	x0, x8
    a644:	bl	3430 <lzma_vli_size@plt>
    a648:	add	w8, w0, #0x1
    a64c:	add	x8, x19, x8
    a650:	ldr	x19, [sp, #16]
    a654:	add	x8, x8, #0x7
    a658:	and	x0, x8, #0xfffffffffffffffc
    a65c:	ldp	x29, x30, [sp], #32
    a660:	ret

000000000000a664 <lzma_index_hash_append@@XZ_5.0>:
    a664:	stp	x29, x30, [sp, #-32]!
    a668:	stp	x20, x19, [sp, #16]
    a66c:	mov	x19, x0
    a670:	mov	w0, #0xb                   	// #11
    a674:	mov	x29, sp
    a678:	tbnz	x2, #63, a6f0 <lzma_index_hash_append@@XZ_5.0+0x8c>
    a67c:	mov	x9, #0xfffffffffffffff7    	// #-9
    a680:	sub	x8, x1, #0x5
    a684:	movk	x9, #0x7fff, lsl #48
    a688:	cmp	x8, x9
    a68c:	b.hi	a6f0 <lzma_index_hash_append@@XZ_5.0+0x8c>  // b.pmore
    a690:	ldr	w8, [x19]
    a694:	cbnz	w8, a6f0 <lzma_index_hash_append@@XZ_5.0+0x8c>
    a698:	add	x0, x19, #0x8
    a69c:	bl	a6fc <lzma_index_hash_append@@XZ_5.0+0x98>
    a6a0:	ldr	x20, [x19, #8]
    a6a4:	tbnz	x20, #63, a6ec <lzma_index_hash_append@@XZ_5.0+0x88>
    a6a8:	ldr	x8, [x19, #16]
    a6ac:	tbnz	x8, #63, a6ec <lzma_index_hash_append@@XZ_5.0+0x88>
    a6b0:	ldp	x0, x19, [x19, #24]
    a6b4:	bl	3430 <lzma_vli_size@plt>
    a6b8:	add	w8, w0, #0x1
    a6bc:	add	x8, x19, x8
    a6c0:	add	x8, x8, #0x7
    a6c4:	and	x8, x8, #0xfffffffffffffffc
    a6c8:	mov	x9, #0x400000000           	// #17179869184
    a6cc:	cmp	x8, x9
    a6d0:	mov	w0, #0x9                   	// #9
    a6d4:	b.hi	a6f0 <lzma_index_hash_append@@XZ_5.0+0x8c>  // b.pmore
    a6d8:	add	x8, x20, x8
    a6dc:	add	x8, x8, #0x18
    a6e0:	asr	x8, x8, #63
    a6e4:	and	w0, w8, w0
    a6e8:	b	a6f0 <lzma_index_hash_append@@XZ_5.0+0x8c>
    a6ec:	mov	w0, #0x9                   	// #9
    a6f0:	ldp	x20, x19, [sp, #16]
    a6f4:	ldp	x29, x30, [sp], #32
    a6f8:	ret
    a6fc:	sub	sp, sp, #0x40
    a700:	stp	x29, x30, [sp, #16]
    a704:	stp	x22, x21, [sp, #32]
    a708:	stp	x20, x19, [sp, #48]
    a70c:	ldp	x8, x9, [x0]
    a710:	add	x10, x1, #0x3
    a714:	and	x10, x10, #0xfffffffffffffffc
    a718:	mov	x21, x0
    a71c:	add	x8, x8, x10
    a720:	add	x9, x9, x2
    a724:	stp	x8, x9, [x0]
    a728:	mov	x0, x1
    a72c:	add	x29, sp, #0x10
    a730:	mov	x19, x2
    a734:	mov	x20, x1
    a738:	bl	3430 <lzma_vli_size@plt>
    a73c:	mov	w22, w0
    a740:	mov	x0, x19
    a744:	bl	3430 <lzma_vli_size@plt>
    a748:	ldp	x9, x8, [x21, #16]
    a74c:	add	w10, w0, w22
    a750:	add	x0, x21, #0x20
    a754:	mov	x2, sp
    a758:	add	x8, x8, x10
    a75c:	add	x9, x9, #0x1
    a760:	mov	w1, #0xa                   	// #10
    a764:	mov	w3, #0x10                  	// #16
    a768:	stp	x9, x8, [x21, #16]
    a76c:	stp	x20, x19, [sp]
    a770:	bl	b60c <lzma_check_size@@XZ_5.0+0x4c>
    a774:	ldp	x20, x19, [sp, #48]
    a778:	ldp	x22, x21, [sp, #32]
    a77c:	ldp	x29, x30, [sp, #16]
    a780:	add	sp, sp, #0x40
    a784:	ret

000000000000a788 <lzma_index_hash_decode@@XZ_5.0>:
    a788:	sub	sp, sp, #0x80
    a78c:	stp	x29, x30, [sp, #32]
    a790:	stp	x28, x27, [sp, #48]
    a794:	stp	x26, x25, [sp, #64]
    a798:	stp	x24, x23, [sp, #80]
    a79c:	stp	x22, x21, [sp, #96]
    a7a0:	stp	x20, x19, [sp, #112]
    a7a4:	ldr	x27, [x2]
    a7a8:	add	x29, sp, #0x20
    a7ac:	cmp	x27, x3
    a7b0:	b.cs	a980 <lzma_index_hash_decode@@XZ_5.0+0x1f8>  // b.hs, b.nlast
    a7b4:	add	x8, x0, #0x120
    a7b8:	stur	x8, [x29, #-8]
    a7bc:	add	x8, x0, #0x128
    a7c0:	str	x8, [sp, #16]
    a7c4:	mov	x24, x0
    a7c8:	ldr	w8, [x24], #144
    a7cc:	adrp	x28, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    a7d0:	mov	x21, x3
    a7d4:	mov	x20, x2
    a7d8:	mov	x19, x1
    a7dc:	mov	x22, x0
    a7e0:	add	x23, x0, #0x130
    a7e4:	add	x25, x0, #0x118
    a7e8:	add	x28, x28, #0xa84
    a7ec:	str	x27, [sp, #8]
    a7f0:	cmp	w8, #0x6
    a7f4:	b.hi	a988 <lzma_index_hash_decode@@XZ_5.0+0x200>  // b.pmore
    a7f8:	mov	w9, w8
    a7fc:	adr	x10, a80c <lzma_index_hash_decode@@XZ_5.0+0x84>
    a800:	ldrb	w11, [x28, x9]
    a804:	add	x10, x10, x11, lsl #2
    a808:	br	x10
    a80c:	cmp	w8, #0x2
    a810:	ldur	x8, [x29, #-8]
    a814:	ldr	x9, [sp, #16]
    a818:	mov	x1, x23
    a81c:	mov	x2, x19
    a820:	mov	x3, x20
    a824:	csel	x0, x8, x9, eq  // eq = none
    a828:	mov	x4, x21
    a82c:	bl	3370 <lzma_vli_decode@plt>
    a830:	cmp	w0, #0x1
    a834:	b.ne	a990 <lzma_index_hash_decode@@XZ_5.0+0x208>  // b.any
    a838:	ldr	w8, [x22]
    a83c:	ldr	x1, [x22, #288]
    a840:	str	xzr, [x22, #304]
    a844:	cmp	w8, #0x2
    a848:	b.ne	a914 <lzma_index_hash_decode@@XZ_5.0+0x18c>  // b.any
    a84c:	mov	x9, #0xfffffffffffffff7    	// #-9
    a850:	sub	x8, x1, #0x5
    a854:	movk	x9, #0x7fff, lsl #48
    a858:	cmp	x8, x9
    a85c:	b.hi	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.pmore
    a860:	mov	w8, #0x3                   	// #3
    a864:	b	a968 <lzma_index_hash_decode@@XZ_5.0+0x1e0>
    a868:	add	x8, x27, #0x1
    a86c:	str	x8, [x20]
    a870:	ldrb	w8, [x19, x27]
    a874:	cbnz	w8, aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>
    a878:	mov	w8, #0x1                   	// #1
    a87c:	b	a968 <lzma_index_hash_decode@@XZ_5.0+0x1e0>
    a880:	mov	x0, x25
    a884:	mov	x1, x23
    a888:	mov	x2, x19
    a88c:	mov	x3, x20
    a890:	mov	x4, x21
    a894:	bl	3370 <lzma_vli_decode@plt>
    a898:	cmp	w0, #0x1
    a89c:	b.ne	a990 <lzma_index_hash_decode@@XZ_5.0+0x208>  // b.any
    a8a0:	ldr	x8, [x22, #280]
    a8a4:	ldr	x9, [x22, #24]
    a8a8:	cmp	x8, x9
    a8ac:	b.ne	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.any
    a8b0:	cmp	x8, #0x0
    a8b4:	str	xzr, [x23]
    a8b8:	b	a95c <lzma_index_hash_decode@@XZ_5.0+0x1d4>
    a8bc:	ldr	x0, [x22, #160]
    a8c0:	ldr	w26, [x22, #168]
    a8c4:	bl	3430 <lzma_vli_size@plt>
    a8c8:	add	w8, w0, w26
    a8cc:	mvn	w8, w8
    a8d0:	and	x8, x8, #0x3
    a8d4:	mov	w9, #0x5                   	// #5
    a8d8:	str	x8, [x22, #304]
    a8dc:	str	w9, [x22]
    a8e0:	cbnz	x8, a8f0 <lzma_index_hash_decode@@XZ_5.0+0x168>
    a8e4:	b	a9b4 <lzma_index_hash_decode@@XZ_5.0+0x22c>
    a8e8:	ldr	x8, [x23]
    a8ec:	cbz	x8, a9b4 <lzma_index_hash_decode@@XZ_5.0+0x22c>
    a8f0:	sub	x8, x8, #0x1
    a8f4:	str	x8, [x23]
    a8f8:	ldr	x8, [x20]
    a8fc:	add	x9, x8, #0x1
    a900:	str	x9, [x20]
    a904:	ldrb	w8, [x19, x8]
    a908:	cbnz	w8, aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>
    a90c:	mov	w8, #0x5                   	// #5
    a910:	b	a96c <lzma_index_hash_decode@@XZ_5.0+0x1e4>
    a914:	ldr	x2, [x22, #296]
    a918:	mov	x0, x24
    a91c:	bl	a6fc <lzma_index_hash_append@@XZ_5.0+0x98>
    a920:	ldr	x8, [x22, #8]
    a924:	ldr	x9, [x22, #144]
    a928:	cmp	x8, x9
    a92c:	b.cc	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.lo, b.ul, b.last
    a930:	ldr	x8, [x22, #16]
    a934:	ldr	x9, [x22, #152]
    a938:	cmp	x8, x9
    a93c:	b.cc	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.lo, b.ul, b.last
    a940:	ldr	x8, [x22, #32]
    a944:	ldr	x9, [x22, #168]
    a948:	cmp	x8, x9
    a94c:	b.cc	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.lo, b.ul, b.last
    a950:	ldr	x8, [x25]
    a954:	subs	x8, x8, #0x1
    a958:	str	x8, [x25]
    a95c:	mov	w8, #0x2                   	// #2
    a960:	mov	w9, #0x4                   	// #4
    a964:	csel	w8, w9, w8, eq  // eq = none
    a968:	str	w8, [x22]
    a96c:	ldr	x27, [x20]
    a970:	cmp	x27, x21
    a974:	b.cc	a7f0 <lzma_index_hash_decode@@XZ_5.0+0x68>  // b.lo, b.ul, b.last
    a978:	mov	w26, wzr
    a97c:	b	a994 <lzma_index_hash_decode@@XZ_5.0+0x20c>
    a980:	mov	w26, #0xa                   	// #10
    a984:	b	aa24 <lzma_index_hash_decode@@XZ_5.0+0x29c>
    a988:	mov	w26, #0xb                   	// #11
    a98c:	b	aa24 <lzma_index_hash_decode@@XZ_5.0+0x29c>
    a990:	mov	w26, w0
    a994:	ldr	x9, [sp, #8]
    a998:	ldr	x8, [x20]
    a99c:	ldr	w2, [x22, #312]
    a9a0:	add	x0, x19, x9
    a9a4:	sub	x1, x8, x9
    a9a8:	bl	3180 <lzma_crc32@plt>
    a9ac:	str	w0, [x22, #312]
    a9b0:	b	aa24 <lzma_index_hash_decode@@XZ_5.0+0x29c>
    a9b4:	ldr	x8, [x22, #8]
    a9b8:	ldr	x9, [x22, #144]
    a9bc:	cmp	x8, x9
    a9c0:	b.ne	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.any
    a9c4:	ldr	x8, [x22, #16]
    a9c8:	ldr	x9, [x22, #152]
    a9cc:	cmp	x8, x9
    a9d0:	b.ne	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.any
    a9d4:	ldr	x8, [x22, #32]
    a9d8:	ldr	x9, [x22, #168]
    a9dc:	cmp	x8, x9
    a9e0:	b.ne	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.any
    a9e4:	add	x24, x22, #0x28
    a9e8:	mov	w1, #0xa                   	// #10
    a9ec:	mov	x0, x24
    a9f0:	bl	b68c <lzma_check_size@@XZ_5.0+0xcc>
    a9f4:	add	x25, x22, #0xb0
    a9f8:	mov	w1, #0xa                   	// #10
    a9fc:	mov	x0, x25
    aa00:	bl	b68c <lzma_check_size@@XZ_5.0+0xcc>
    aa04:	mov	w0, #0xa                   	// #10
    aa08:	bl	3220 <lzma_check_size@plt>
    aa0c:	mov	w2, w0
    aa10:	mov	x0, x24
    aa14:	mov	x1, x25
    aa18:	bl	3230 <bcmp@plt>
    aa1c:	cbz	w0, aa48 <lzma_index_hash_decode@@XZ_5.0+0x2c0>
    aa20:	mov	w26, #0x9                   	// #9
    aa24:	mov	w0, w26
    aa28:	ldp	x20, x19, [sp, #112]
    aa2c:	ldp	x22, x21, [sp, #96]
    aa30:	ldp	x24, x23, [sp, #80]
    aa34:	ldp	x26, x25, [sp, #64]
    aa38:	ldp	x28, x27, [sp, #48]
    aa3c:	ldp	x29, x30, [sp, #32]
    aa40:	add	sp, sp, #0x80
    aa44:	ret
    aa48:	ldr	x27, [x20]
    aa4c:	ldr	x8, [sp, #8]
    aa50:	ldr	w2, [x22, #312]
    aa54:	add	x0, x19, x8
    aa58:	sub	x1, x27, x8
    aa5c:	bl	3180 <lzma_crc32@plt>
    aa60:	mov	w8, #0x6                   	// #6
    aa64:	str	w0, [x22, #312]
    aa68:	str	w8, [x22]
    aa6c:	cmp	x27, x21
    aa70:	b.ne	aa7c <lzma_index_hash_decode@@XZ_5.0+0x2f4>  // b.any
    aa74:	mov	w26, wzr
    aa78:	b	aa24 <lzma_index_hash_decode@@XZ_5.0+0x29c>
    aa7c:	ldr	w8, [x22, #312]
    aa80:	ldr	w9, [x23]
    aa84:	add	x10, x27, #0x1
    aa88:	str	x10, [x20]
    aa8c:	ldrb	w10, [x19, x27]
    aa90:	lsl	w9, w9, #3
    aa94:	lsr	w9, w8, w9
    aa98:	cmp	w10, w9, uxtb
    aa9c:	b.ne	aa20 <lzma_index_hash_decode@@XZ_5.0+0x298>  // b.any
    aaa0:	ldr	x9, [x23]
    aaa4:	add	x9, x9, #0x1
    aaa8:	cmp	x9, #0x3
    aaac:	str	x9, [x23]
    aab0:	b.hi	aac8 <lzma_index_hash_decode@@XZ_5.0+0x340>  // b.pmore
    aab4:	ldr	x27, [x20]
    aab8:	mov	w26, wzr
    aabc:	cmp	x27, x21
    aac0:	b.ne	aa80 <lzma_index_hash_decode@@XZ_5.0+0x2f8>  // b.any
    aac4:	b	aa24 <lzma_index_hash_decode@@XZ_5.0+0x29c>
    aac8:	mov	w26, #0x1                   	// #1
    aacc:	b	aa24 <lzma_index_hash_decode@@XZ_5.0+0x29c>

000000000000aad0 <lzma_stream_buffer_decode@@XZ_5.0>:
    aad0:	sub	sp, sp, #0xd0
    aad4:	stp	x29, x30, [sp, #112]
    aad8:	stp	x28, x27, [sp, #128]
    aadc:	stp	x26, x25, [sp, #144]
    aae0:	stp	x24, x23, [sp, #160]
    aae4:	stp	x22, x21, [sp, #176]
    aae8:	stp	x20, x19, [sp, #192]
    aaec:	add	x29, sp, #0x70
    aaf0:	cbz	x4, abdc <lzma_stream_buffer_decode@@XZ_5.0+0x10c>
    aaf4:	ldr	x8, [x4]
    aaf8:	mov	x23, x7
    aafc:	mov	x24, x6
    ab00:	mov	x20, x5
    ab04:	mov	x21, x4
    ab08:	mov	x25, x3
    ab0c:	mov	x19, x2
    ab10:	mov	w3, w1
    ab14:	mov	x22, x0
    ab18:	cbnz	x25, ab28 <lzma_stream_buffer_decode@@XZ_5.0+0x58>
    ab1c:	cmp	x8, x20
    ab20:	mov	x8, x20
    ab24:	b.ne	abdc <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    ab28:	mov	w26, #0xb                   	// #11
    ab2c:	cbz	x23, abe0 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    ab30:	cmp	x8, x20
    ab34:	b.hi	abe0 <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    ab38:	ldr	x27, [x29, #96]
    ab3c:	ldr	x8, [x23]
    ab40:	cbnz	x24, ab50 <lzma_stream_buffer_decode@@XZ_5.0+0x80>
    ab44:	cmp	x8, x27
    ab48:	mov	x8, x27
    ab4c:	b.ne	abdc <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    ab50:	mov	w26, #0xb                   	// #11
    ab54:	tbnz	w3, #2, abe0 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    ab58:	cmp	x8, x27
    ab5c:	b.hi	abe0 <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    ab60:	movi	v0.2d, #0x0
    ab64:	mov	x8, #0xffffffffffffffff    	// #-1
    ab68:	str	xzr, [sp, #96]
    ab6c:	stp	q0, q0, [sp, #64]
    ab70:	stp	q0, q0, [sp, #32]
    ab74:	str	x8, [sp, #40]
    ab78:	ldr	x2, [x22]
    ab7c:	add	x0, sp, #0x20
    ab80:	mov	x1, x19
    ab84:	bl	ac5c <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    ab88:	mov	w26, w0
    ab8c:	cbnz	w0, ac4c <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    ab90:	ldr	x8, [x23]
    ab94:	ldr	x0, [sp, #32]
    ab98:	ldr	x28, [x21]
    ab9c:	mov	w9, #0x3                   	// #3
    aba0:	str	x8, [sp, #16]
    aba4:	ldr	x8, [sp, #56]
    aba8:	mov	x1, x19
    abac:	mov	x2, x25
    abb0:	mov	x3, x21
    abb4:	mov	x4, x20
    abb8:	mov	x5, x24
    abbc:	mov	x6, x23
    abc0:	mov	x7, x27
    abc4:	str	w9, [sp]
    abc8:	blr	x8
    abcc:	cmp	w0, #0x1
    abd0:	b.ne	ac04 <lzma_stream_buffer_decode@@XZ_5.0+0x134>  // b.any
    abd4:	mov	w26, wzr
    abd8:	b	ac4c <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    abdc:	mov	w26, #0xb                   	// #11
    abe0:	mov	w0, w26
    abe4:	ldp	x20, x19, [sp, #192]
    abe8:	ldp	x22, x21, [sp, #176]
    abec:	ldp	x24, x23, [sp, #160]
    abf0:	ldp	x26, x25, [sp, #144]
    abf4:	ldp	x28, x27, [sp, #128]
    abf8:	ldp	x29, x30, [sp, #112]
    abfc:	add	sp, sp, #0xd0
    ac00:	ret
    ac04:	ldr	x8, [sp, #16]
    ac08:	mov	w26, w0
    ac0c:	cmp	w0, #0x6
    ac10:	str	x28, [x21]
    ac14:	str	x8, [x23]
    ac18:	b.eq	ac34 <lzma_stream_buffer_decode@@XZ_5.0+0x164>  // b.none
    ac1c:	cbnz	w26, ac4c <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    ac20:	ldr	x8, [x21]
    ac24:	cmp	x8, x20
    ac28:	mov	w8, #0x9                   	// #9
    ac2c:	cinc	w26, w8, ne  // ne = any
    ac30:	b	ac4c <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    ac34:	ldr	x8, [sp, #88]
    ac38:	ldr	x0, [sp, #32]
    ac3c:	add	x2, sp, #0x18
    ac40:	mov	x1, x22
    ac44:	mov	x3, xzr
    ac48:	blr	x8
    ac4c:	add	x0, sp, #0x20
    ac50:	mov	x1, x19
    ac54:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    ac58:	b	abe0 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    ac5c:	stp	x29, x30, [sp, #-64]!
    ac60:	stp	x22, x21, [sp, #32]
    ac64:	stp	x20, x19, [sp, #48]
    ac68:	ldr	x8, [x0, #16]
    ac6c:	adrp	x22, a000 <lzma_index_decoder@@XZ_5.0+0x3c>
    ac70:	add	x22, x22, #0xc5c
    ac74:	str	x23, [sp, #16]
    ac78:	mov	w21, w3
    ac7c:	mov	x20, x2
    ac80:	mov	x23, x0
    ac84:	cmp	x8, x22
    ac88:	mov	x19, x1
    ac8c:	mov	x29, sp
    ac90:	b.eq	aca0 <lzma_stream_buffer_decode@@XZ_5.0+0x1d0>  // b.none
    ac94:	mov	x0, x23
    ac98:	mov	x1, x19
    ac9c:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    aca0:	cmp	w21, #0x1f
    aca4:	str	x22, [x23, #16]
    aca8:	b.ls	acb4 <lzma_stream_buffer_decode@@XZ_5.0+0x1e4>  // b.plast
    acac:	mov	w0, #0x8                   	// #8
    acb0:	b	ad88 <lzma_stream_buffer_decode@@XZ_5.0+0x2b8>
    acb4:	ldr	x22, [x23]
    acb8:	cbnz	x22, ad1c <lzma_stream_buffer_decode@@XZ_5.0+0x24c>
    acbc:	mov	w0, #0x580                 	// #1408
    acc0:	mov	x1, x19
    acc4:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    acc8:	cbz	x0, ad84 <lzma_stream_buffer_decode@@XZ_5.0+0x2b4>
    accc:	adrp	x8, a000 <lzma_index_decoder@@XZ_5.0+0x3c>
    acd0:	adrp	x9, b000 <lzma_stream_buffer_decode@@XZ_5.0+0x530>
    acd4:	add	x8, x8, #0xd9c
    acd8:	add	x9, x9, #0x1f8
    acdc:	adrp	x10, b000 <lzma_stream_buffer_decode@@XZ_5.0+0x530>
    ace0:	stp	x8, x9, [x23, #24]
    ace4:	adrp	x8, b000 <lzma_stream_buffer_decode@@XZ_5.0+0x530>
    ace8:	add	x10, x10, #0x234
    acec:	add	x8, x8, #0x23c
    acf0:	mov	x22, x0
    acf4:	stp	x10, x8, [x23, #48]
    acf8:	mov	x8, #0xffffffffffffffff    	// #-1
    acfc:	movi	v0.2d, #0x0
    ad00:	str	x0, [x23]
    ad04:	stp	xzr, x8, [x0, #8]
    ad08:	str	xzr, [x0, #344]
    ad0c:	stur	q0, [x0, #24]
    ad10:	stur	q0, [x0, #40]
    ad14:	stur	q0, [x0, #56]
    ad18:	str	xzr, [x0, #72]
    ad1c:	cmp	x20, #0x0
    ad20:	and	w9, w21, #0x1
    ad24:	lsr	w10, w21, #4
    ad28:	mov	w8, #0x8000                	// #32768
    ad2c:	strb	w9, [x22, #368]
    ad30:	and	w9, w21, #0xff
    ad34:	strb	w10, [x22, #371]
    ad38:	ldr	x0, [x22, #344]
    ad3c:	csinc	x10, x20, xzr, ne  // ne = any
    ad40:	stp	x10, x8, [x22, #352]
    ad44:	ubfx	w8, w9, #1, #1
    ad48:	strb	w8, [x22, #369]
    ad4c:	ubfx	w8, w9, #2, #1
    ad50:	ubfx	w9, w9, #3, #1
    ad54:	strb	w8, [x22, #370]
    ad58:	mov	w8, #0x1                   	// #1
    ad5c:	mov	x1, x19
    ad60:	strb	w9, [x22, #372]
    ad64:	strb	w8, [x22, #373]
    ad68:	bl	3240 <lzma_index_hash_init@plt>
    ad6c:	str	x0, [x22, #344]
    ad70:	cbz	x0, ad84 <lzma_stream_buffer_decode@@XZ_5.0+0x2b4>
    ad74:	mov	w0, wzr
    ad78:	str	wzr, [x22]
    ad7c:	str	xzr, [x22, #376]
    ad80:	b	ad88 <lzma_stream_buffer_decode@@XZ_5.0+0x2b8>
    ad84:	mov	w0, #0x5                   	// #5
    ad88:	ldp	x20, x19, [sp, #48]
    ad8c:	ldp	x22, x21, [sp, #32]
    ad90:	ldr	x23, [sp, #16]
    ad94:	ldp	x29, x30, [sp], #64
    ad98:	ret
    ad9c:	sub	sp, sp, #0xf0
    ada0:	stp	x29, x30, [sp, #144]
    ada4:	add	x29, sp, #0x90
    ada8:	ldr	w8, [x29, #96]
    adac:	stp	x28, x27, [sp, #160]
    adb0:	stp	x26, x25, [sp, #176]
    adb4:	stp	x24, x23, [sp, #192]
    adb8:	str	w8, [sp, #44]
    adbc:	add	x8, x0, #0x120
    adc0:	str	x8, [sp, #32]
    adc4:	add	x8, x0, #0x50
    adc8:	stp	x22, x21, [sp, #208]
    adcc:	stp	x20, x19, [sp, #224]
    add0:	str	x5, [sp, #24]
    add4:	str	x8, [sp, #48]
    add8:	mov	x9, x0
    addc:	ldr	w8, [x9], #8
    ade0:	add	x10, sp, #0x40
    ade4:	mov	x23, x7
    ade8:	mov	x28, x6
    adec:	mov	x24, x4
    adf0:	mov	x22, x3
    adf4:	mov	x25, x2
    adf8:	mov	x26, x1
    adfc:	mov	x21, x0
    ae00:	add	x19, x0, #0x180
    ae04:	add	x27, x0, #0x178
    ae08:	add	x20, x10, #0x8
    ae0c:	str	x9, [sp, #16]
    ae10:	str	x19, [sp, #56]
    ae14:	cmp	w8, #0x5
    ae18:	b.hi	b170 <lzma_stream_buffer_decode@@XZ_5.0+0x6a0>  // b.pmore
    ae1c:	adrp	x11, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    ae20:	mov	w8, w8
    ae24:	add	x11, x11, #0xa8b
    ae28:	adr	x9, ae38 <lzma_stream_buffer_decode@@XZ_5.0+0x368>
    ae2c:	ldrb	w10, [x11, x8]
    ae30:	add	x9, x9, x10, lsl #2
    ae34:	br	x9
    ae38:	mov	w5, #0xc                   	// #12
    ae3c:	mov	x0, x25
    ae40:	mov	x1, x22
    ae44:	mov	x2, x24
    ae48:	mov	x3, x19
    ae4c:	mov	x4, x27
    ae50:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    ae54:	ldr	x8, [x27]
    ae58:	cmp	x8, #0xc
    ae5c:	b.cc	b160 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.lo, b.ul, b.last
    ae60:	ldr	x0, [sp, #32]
    ae64:	mov	x1, x19
    ae68:	str	xzr, [x27]
    ae6c:	bl	34a0 <lzma_stream_header_decode@plt>
    ae70:	cbnz	w0, b1a8 <lzma_stream_buffer_decode@@XZ_5.0+0x6d8>
    ae74:	ldr	w0, [x21, #304]
    ae78:	mov	w8, #0x1                   	// #1
    ae7c:	strb	wzr, [x21, #373]
    ae80:	str	w8, [x21]
    ae84:	str	w0, [x21, #88]
    ae88:	cbnz	w0, ae94 <lzma_stream_buffer_decode@@XZ_5.0+0x3c4>
    ae8c:	ldrb	w8, [x21, #368]
    ae90:	cbnz	w8, b1c0 <lzma_stream_buffer_decode@@XZ_5.0+0x6f0>
    ae94:	ldrb	w8, [x21, #369]
    ae98:	cbz	w8, aea8 <lzma_stream_buffer_decode@@XZ_5.0+0x3d8>
    ae9c:	bl	30a0 <lzma_check_is_supported@plt>
    aea0:	tst	w0, #0xff
    aea4:	b.eq	b1d0 <lzma_stream_buffer_decode@@XZ_5.0+0x700>  // b.none
    aea8:	ldrb	w8, [x21, #370]
    aeac:	ldr	x19, [sp, #56]
    aeb0:	cbnz	w8, b1c8 <lzma_stream_buffer_decode@@XZ_5.0+0x6f8>
    aeb4:	ldr	x8, [x22]
    aeb8:	cmp	x8, x24
    aebc:	b.cs	b160 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.hs, b.nlast
    aec0:	ldr	x9, [x27]
    aec4:	cbz	x9, afdc <lzma_stream_buffer_decode@@XZ_5.0+0x50c>
    aec8:	ldr	w8, [x21, #84]
    aecc:	b	aff0 <lzma_stream_buffer_decode@@XZ_5.0+0x520>
    aed0:	ldr	x8, [x22]
    aed4:	cmp	x8, x24
    aed8:	b.cs	b160 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.hs, b.nlast
    aedc:	ldr	x0, [x21, #344]
    aee0:	mov	x1, x25
    aee4:	mov	x2, x22
    aee8:	mov	x3, x24
    aeec:	bl	30f0 <lzma_index_hash_decode@plt>
    aef0:	cmp	w0, #0x1
    aef4:	b.ne	b168 <lzma_stream_buffer_decode@@XZ_5.0+0x698>  // b.any
    aef8:	ldr	x19, [sp, #56]
    aefc:	mov	w8, #0x4                   	// #4
    af00:	str	w8, [x21]
    af04:	mov	w5, #0xc                   	// #12
    af08:	mov	x0, x25
    af0c:	mov	x1, x22
    af10:	mov	x2, x24
    af14:	mov	x3, x19
    af18:	mov	x4, x27
    af1c:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    af20:	ldr	x8, [x27]
    af24:	cmp	x8, #0xc
    af28:	b.cc	b160 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.lo, b.ul, b.last
    af2c:	add	x0, sp, #0x40
    af30:	mov	x1, x19
    af34:	str	xzr, [x27]
    af38:	bl	33e0 <lzma_stream_footer_decode@plt>
    af3c:	cbnz	w0, b178 <lzma_stream_buffer_decode@@XZ_5.0+0x6a8>
    af40:	ldr	x0, [x21, #344]
    af44:	bl	3480 <lzma_index_hash_size@plt>
    af48:	ldr	x8, [sp, #72]
    af4c:	cmp	x0, x8
    af50:	b.ne	b198 <lzma_stream_buffer_decode@@XZ_5.0+0x6c8>  // b.any
    af54:	ldr	x0, [sp, #32]
    af58:	add	x1, sp, #0x40
    af5c:	bl	30d0 <lzma_stream_flags_compare@plt>
    af60:	cbnz	w0, b168 <lzma_stream_buffer_decode@@XZ_5.0+0x698>
    af64:	ldrb	w8, [x21, #372]
    af68:	ldr	x19, [sp, #56]
    af6c:	cbz	w8, b188 <lzma_stream_buffer_decode@@XZ_5.0+0x6b8>
    af70:	mov	w8, #0x5                   	// #5
    af74:	str	w8, [x21]
    af78:	ldr	x8, [x22]
    af7c:	cmp	x8, x24
    af80:	b.cs	b140 <lzma_stream_buffer_decode@@XZ_5.0+0x670>  // b.hs, b.nlast
    af84:	ldrb	w9, [x25, x8]
    af88:	cbnz	w9, afb0 <lzma_stream_buffer_decode@@XZ_5.0+0x4e0>
    af8c:	add	x8, x8, #0x1
    af90:	str	x8, [x22]
    af94:	ldr	w9, [x27]
    af98:	cmp	x24, x8
    af9c:	add	w9, w9, #0x1
    afa0:	and	x9, x9, #0x3
    afa4:	str	x9, [x27]
    afa8:	b.ne	af84 <lzma_stream_buffer_decode@@XZ_5.0+0x4b4>  // b.any
    afac:	b	b140 <lzma_stream_buffer_decode@@XZ_5.0+0x670>
    afb0:	ldr	x9, [x27]
    afb4:	cbnz	x9, b190 <lzma_stream_buffer_decode@@XZ_5.0+0x6c0>
    afb8:	ldr	x0, [x21, #344]
    afbc:	mov	x1, x26
    afc0:	bl	3240 <lzma_index_hash_init@plt>
    afc4:	str	x0, [x21, #344]
    afc8:	cbz	x0, b1a0 <lzma_stream_buffer_decode@@XZ_5.0+0x6d0>
    afcc:	mov	w8, wzr
    afd0:	str	wzr, [x21]
    afd4:	str	xzr, [x21, #376]
    afd8:	b	ae14 <lzma_stream_buffer_decode@@XZ_5.0+0x344>
    afdc:	ldrb	w8, [x25, x8]
    afe0:	cbz	w8, b134 <lzma_stream_buffer_decode@@XZ_5.0+0x664>
    afe4:	lsl	w8, w8, #2
    afe8:	add	w8, w8, #0x4
    afec:	str	w8, [x21, #84]
    aff0:	mov	w5, w8
    aff4:	mov	x0, x25
    aff8:	mov	x1, x22
    affc:	mov	x2, x24
    b000:	mov	x3, x19
    b004:	mov	x4, x27
    b008:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    b00c:	ldr	x8, [x21, #376]
    b010:	ldr	w9, [x21, #84]
    b014:	cmp	x8, x9
    b018:	b.cc	b160 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.lo, b.ul, b.last
    b01c:	ldr	x0, [sp, #48]
    b020:	mov	w8, #0x1                   	// #1
    b024:	str	w8, [x21, #80]
    b028:	add	x8, sp, #0x40
    b02c:	mov	x1, x26
    b030:	mov	x2, x19
    b034:	str	xzr, [x21, #376]
    b038:	str	x8, [x21, #112]
    b03c:	bl	32f0 <lzma_block_header_decode@plt>
    b040:	cbnz	w0, b168 <lzma_stream_buffer_decode@@XZ_5.0+0x698>
    b044:	ldrb	w8, [x21, #371]
    b048:	add	x0, sp, #0x40
    b04c:	strb	w8, [x21, #280]
    b050:	bl	32a0 <lzma_raw_decoder_memusage@plt>
    b054:	cmn	x0, #0x1
    b058:	str	x28, [sp, #8]
    b05c:	mov	x28, x23
    b060:	b.eq	b07c <lzma_stream_buffer_decode@@XZ_5.0+0x5ac>  // b.none
    b064:	ldr	x8, [x21, #352]
    b068:	str	x0, [x21, #360]
    b06c:	cmp	x0, x8
    b070:	b.ls	b084 <lzma_stream_buffer_decode@@XZ_5.0+0x5b4>  // b.plast
    b074:	mov	w19, #0x6                   	// #6
    b078:	b	b098 <lzma_stream_buffer_decode@@XZ_5.0+0x5c8>
    b07c:	mov	w19, #0x8                   	// #8
    b080:	b	b098 <lzma_stream_buffer_decode@@XZ_5.0+0x5c8>
    b084:	ldr	x0, [sp, #16]
    b088:	ldr	x2, [sp, #48]
    b08c:	mov	x1, x26
    b090:	bl	9594 <lzma_block_buffer_decode@@XZ_5.0+0x148>
    b094:	mov	w19, w0
    b098:	mov	x23, xzr
    b09c:	ldr	x0, [x20, x23]
    b0a0:	mov	x1, x26
    b0a4:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    b0a8:	add	x23, x23, #0x10
    b0ac:	cmp	x23, #0x40
    b0b0:	b.ne	b09c <lzma_stream_buffer_decode@@XZ_5.0+0x5cc>  // b.any
    b0b4:	str	xzr, [x21, #112]
    b0b8:	cbnz	w19, b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b0bc:	mov	x23, x28
    b0c0:	ldr	x28, [sp, #8]
    b0c4:	mov	w8, #0x2                   	// #2
    b0c8:	str	w8, [x21]
    b0cc:	ldr	x8, [x21, #32]
    b0d0:	ldr	x0, [x21, #8]
    b0d4:	ldr	w9, [sp, #44]
    b0d8:	ldr	x5, [sp, #24]
    b0dc:	mov	x1, x26
    b0e0:	mov	x2, x25
    b0e4:	mov	x3, x22
    b0e8:	mov	x4, x24
    b0ec:	mov	x6, x28
    b0f0:	mov	x7, x23
    b0f4:	str	w9, [sp]
    b0f8:	blr	x8
    b0fc:	cmp	w0, #0x1
    b100:	b.ne	b168 <lzma_stream_buffer_decode@@XZ_5.0+0x698>  // b.any
    b104:	ldr	x0, [sp, #48]
    b108:	ldr	x19, [x21, #344]
    b10c:	bl	3150 <lzma_block_unpadded_size@plt>
    b110:	ldr	x2, [x21, #104]
    b114:	mov	x1, x0
    b118:	mov	x0, x19
    b11c:	bl	3170 <lzma_index_hash_append@plt>
    b120:	cbnz	w0, b168 <lzma_stream_buffer_decode@@XZ_5.0+0x698>
    b124:	ldr	x19, [sp, #56]
    b128:	mov	w8, #0x1                   	// #1
    b12c:	str	w8, [x21]
    b130:	b	ae14 <lzma_stream_buffer_decode@@XZ_5.0+0x344>
    b134:	mov	w8, #0x3                   	// #3
    b138:	str	w8, [x21]
    b13c:	b	ae14 <lzma_stream_buffer_decode@@XZ_5.0+0x344>
    b140:	ldr	w8, [sp, #44]
    b144:	cmp	w8, #0x3
    b148:	b.ne	b160 <lzma_stream_buffer_decode@@XZ_5.0+0x690>  // b.any
    b14c:	ldr	x8, [x27]
    b150:	cmp	x8, #0x0
    b154:	mov	w8, #0x9                   	// #9
    b158:	csinc	w19, w8, wzr, ne  // ne = any
    b15c:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b160:	mov	w19, wzr
    b164:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b168:	mov	w19, w0
    b16c:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b170:	mov	w19, #0xb                   	// #11
    b174:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b178:	cmp	w0, #0x7
    b17c:	mov	w8, #0x9                   	// #9
    b180:	csel	w19, w8, w0, eq  // eq = none
    b184:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b188:	mov	w19, #0x1                   	// #1
    b18c:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b190:	add	x8, x8, #0x1
    b194:	str	x8, [x22]
    b198:	mov	w19, #0x9                   	// #9
    b19c:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b1a0:	mov	w19, #0x5                   	// #5
    b1a4:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b1a8:	mov	w19, w0
    b1ac:	cmp	w0, #0x7
    b1b0:	b.ne	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>  // b.any
    b1b4:	ldrb	w8, [x21, #373]
    b1b8:	cbnz	w8, b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b1bc:	b	b198 <lzma_stream_buffer_decode@@XZ_5.0+0x6c8>
    b1c0:	mov	w19, #0x2                   	// #2
    b1c4:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b1c8:	mov	w19, #0x4                   	// #4
    b1cc:	b	b1d4 <lzma_stream_buffer_decode@@XZ_5.0+0x704>
    b1d0:	mov	w19, #0x3                   	// #3
    b1d4:	mov	w0, w19
    b1d8:	ldp	x20, x19, [sp, #224]
    b1dc:	ldp	x22, x21, [sp, #208]
    b1e0:	ldp	x24, x23, [sp, #192]
    b1e4:	ldp	x26, x25, [sp, #176]
    b1e8:	ldp	x28, x27, [sp, #160]
    b1ec:	ldp	x29, x30, [sp, #144]
    b1f0:	add	sp, sp, #0xf0
    b1f4:	ret
    b1f8:	stp	x29, x30, [sp, #-32]!
    b1fc:	stp	x20, x19, [sp, #16]
    b200:	mov	x20, x0
    b204:	add	x0, x0, #0x8
    b208:	mov	x29, sp
    b20c:	mov	x19, x1
    b210:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    b214:	ldr	x0, [x20, #344]
    b218:	mov	x1, x19
    b21c:	bl	32d0 <lzma_index_hash_end@plt>
    b220:	mov	x0, x20
    b224:	mov	x1, x19
    b228:	ldp	x20, x19, [sp, #16]
    b22c:	ldp	x29, x30, [sp], #32
    b230:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    b234:	ldr	w0, [x0, #304]
    b238:	ret
    b23c:	ldr	x9, [x0, #360]
    b240:	str	x9, [x1]
    b244:	ldr	x9, [x0, #352]
    b248:	str	x9, [x2]
    b24c:	cbz	x3, b268 <lzma_stream_buffer_decode@@XZ_5.0+0x798>
    b250:	ldr	x9, [x0, #360]
    b254:	mov	x8, x0
    b258:	cmp	x9, x3
    b25c:	b.ls	b270 <lzma_stream_buffer_decode@@XZ_5.0+0x7a0>  // b.plast
    b260:	mov	w0, #0x6                   	// #6
    b264:	ret
    b268:	mov	w0, wzr
    b26c:	ret
    b270:	mov	w0, wzr
    b274:	str	x3, [x8, #352]
    b278:	ret

000000000000b27c <lzma_stream_decoder@@XZ_5.0>:
    b27c:	stp	x29, x30, [sp, #-48]!
    b280:	stp	x22, x21, [sp, #16]
    b284:	stp	x20, x19, [sp, #32]
    b288:	mov	x29, sp
    b28c:	mov	w21, w2
    b290:	mov	x22, x1
    b294:	mov	x19, x0
    b298:	bl	38e4 <lzma_version_string@@XZ_5.0+0x264>
    b29c:	mov	w20, w0
    b2a0:	cbnz	w0, b2d8 <lzma_stream_decoder@@XZ_5.0+0x5c>
    b2a4:	ldp	x1, x0, [x19, #48]
    b2a8:	mov	x2, x22
    b2ac:	mov	w3, w21
    b2b0:	bl	ac5c <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    b2b4:	mov	w20, w0
    b2b8:	cbz	w0, b2c8 <lzma_stream_decoder@@XZ_5.0+0x4c>
    b2bc:	mov	x0, x19
    b2c0:	bl	32e0 <lzma_end@plt>
    b2c4:	b	b2d8 <lzma_stream_decoder@@XZ_5.0+0x5c>
    b2c8:	ldr	x8, [x19, #56]
    b2cc:	mov	w9, #0x1                   	// #1
    b2d0:	strb	w9, [x8, #88]
    b2d4:	strb	w9, [x8, #91]
    b2d8:	mov	w0, w20
    b2dc:	ldp	x20, x19, [sp, #32]
    b2e0:	ldp	x22, x21, [sp, #16]
    b2e4:	ldp	x29, x30, [sp], #48
    b2e8:	ret

000000000000b2ec <lzma_stream_header_decode@@XZ_5.0>:
    b2ec:	stp	x29, x30, [sp, #-48]!
    b2f0:	str	x21, [sp, #16]
    b2f4:	stp	x20, x19, [sp, #32]
    b2f8:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b2fc:	ldr	w8, [x1]
    b300:	ldr	x9, [x9, #3936]
    b304:	ldrh	w10, [x1, #4]
    b308:	mov	x29, sp
    b30c:	ldr	w11, [x9]
    b310:	ldrh	w9, [x9, #4]
    b314:	eor	w8, w8, w11
    b318:	eor	w9, w10, w9
    b31c:	orr	w8, w8, w9
    b320:	cbz	w8, b32c <lzma_stream_header_decode@@XZ_5.0+0x40>
    b324:	mov	w0, #0x7                   	// #7
    b328:	b	b374 <lzma_stream_header_decode@@XZ_5.0+0x88>
    b32c:	add	x21, x1, #0x6
    b330:	mov	x19, x1
    b334:	mov	x20, x0
    b338:	mov	w1, #0x2                   	// #2
    b33c:	mov	x0, x21
    b340:	mov	w2, wzr
    b344:	bl	3180 <lzma_crc32@plt>
    b348:	ldr	w8, [x19, #8]
    b34c:	cmp	w0, w8
    b350:	b.ne	b370 <lzma_stream_header_decode@@XZ_5.0+0x84>  // b.any
    b354:	ldrb	w8, [x21]
    b358:	cbnz	w8, b368 <lzma_stream_header_decode@@XZ_5.0+0x7c>
    b35c:	ldrb	w8, [x19, #7]
    b360:	cmp	w8, #0xf
    b364:	b.ls	b384 <lzma_stream_header_decode@@XZ_5.0+0x98>  // b.plast
    b368:	mov	w0, #0x8                   	// #8
    b36c:	b	b374 <lzma_stream_header_decode@@XZ_5.0+0x88>
    b370:	mov	w0, #0x9                   	// #9
    b374:	ldp	x20, x19, [sp, #32]
    b378:	ldr	x21, [sp, #16]
    b37c:	ldp	x29, x30, [sp], #48
    b380:	ret
    b384:	str	wzr, [x20]
    b388:	ldrb	w8, [x19, #7]
    b38c:	mov	w0, wzr
    b390:	mov	x9, #0xffffffffffffffff    	// #-1
    b394:	str	x9, [x20, #8]
    b398:	and	w8, w8, #0xf
    b39c:	str	w8, [x20, #16]
    b3a0:	b	b374 <lzma_stream_header_decode@@XZ_5.0+0x88>

000000000000b3a4 <lzma_stream_footer_decode@@XZ_5.0>:
    b3a4:	stp	x29, x30, [sp, #-32]!
    b3a8:	stp	x20, x19, [sp, #16]
    b3ac:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b3b0:	ldrh	w8, [x1, #10]
    b3b4:	ldr	x9, [x9, #3976]
    b3b8:	mov	x29, sp
    b3bc:	ldrh	w9, [x9]
    b3c0:	cmp	w8, w9
    b3c4:	b.eq	b3d0 <lzma_stream_footer_decode@@XZ_5.0+0x2c>  // b.none
    b3c8:	mov	w0, #0x7                   	// #7
    b3cc:	b	b414 <lzma_stream_footer_decode@@XZ_5.0+0x70>
    b3d0:	mov	x20, x1
    b3d4:	mov	x19, x0
    b3d8:	add	x0, x1, #0x4
    b3dc:	mov	w1, #0x6                   	// #6
    b3e0:	mov	w2, wzr
    b3e4:	bl	3180 <lzma_crc32@plt>
    b3e8:	ldr	w8, [x20]
    b3ec:	cmp	w0, w8
    b3f0:	b.ne	b410 <lzma_stream_footer_decode@@XZ_5.0+0x6c>  // b.any
    b3f4:	ldrb	w8, [x20, #8]
    b3f8:	cbnz	w8, b408 <lzma_stream_footer_decode@@XZ_5.0+0x64>
    b3fc:	ldrb	w8, [x20, #9]
    b400:	cmp	w8, #0xf
    b404:	b.ls	b420 <lzma_stream_footer_decode@@XZ_5.0+0x7c>  // b.plast
    b408:	mov	w0, #0x8                   	// #8
    b40c:	b	b414 <lzma_stream_footer_decode@@XZ_5.0+0x70>
    b410:	mov	w0, #0x9                   	// #9
    b414:	ldp	x20, x19, [sp, #16]
    b418:	ldp	x29, x30, [sp], #32
    b41c:	ret
    b420:	str	wzr, [x19]
    b424:	ldrb	w8, [x20, #9]
    b428:	mov	w0, wzr
    b42c:	and	w8, w8, #0xf
    b430:	str	w8, [x19, #16]
    b434:	ldrb	w8, [x20, #4]
    b438:	ldrb	w9, [x20, #5]
    b43c:	ldrb	w10, [x20, #6]
    b440:	ldrb	w11, [x20, #7]
    b444:	lsl	x8, x8, #2
    b448:	bfi	x8, x9, #10, #8
    b44c:	bfi	x8, x10, #18, #8
    b450:	bfi	x8, x11, #26, #8
    b454:	add	x8, x8, #0x4
    b458:	str	x8, [x19, #8]
    b45c:	b	b414 <lzma_stream_footer_decode@@XZ_5.0+0x70>

000000000000b460 <lzma_vli_decode@@XZ_5.0>:
    b460:	sub	sp, sp, #0x10
    b464:	str	xzr, [sp, #8]
    b468:	cbz	x1, b484 <lzma_vli_decode@@XZ_5.0+0x24>
    b46c:	ldr	x8, [x1]
    b470:	cbz	x8, b4a4 <lzma_vli_decode@@XZ_5.0+0x44>
    b474:	cmp	x8, #0x8
    b478:	b.hi	b4bc <lzma_vli_decode@@XZ_5.0+0x5c>  // b.pmore
    b47c:	ldr	x9, [x0]
    b480:	b	b4ac <lzma_vli_decode@@XZ_5.0+0x4c>
    b484:	ldr	x10, [x3]
    b488:	str	xzr, [x0]
    b48c:	cmp	x10, x4
    b490:	b.cs	b564 <lzma_vli_decode@@XZ_5.0+0x104>  // b.hs, b.nlast
    b494:	mov	x9, xzr
    b498:	mov	x8, xzr
    b49c:	add	x1, sp, #0x8
    b4a0:	b	b4d0 <lzma_vli_decode@@XZ_5.0+0x70>
    b4a4:	mov	x9, xzr
    b4a8:	str	xzr, [x0]
    b4ac:	lsl	x10, x8, #3
    b4b0:	sub	x10, x10, x8
    b4b4:	lsr	x10, x9, x10
    b4b8:	cbz	x10, b4c4 <lzma_vli_decode@@XZ_5.0+0x64>
    b4bc:	mov	w8, #0xb                   	// #11
    b4c0:	b	b594 <lzma_vli_decode@@XZ_5.0+0x134>
    b4c4:	ldr	x10, [x3]
    b4c8:	cmp	x10, x4
    b4cc:	b.cs	b580 <lzma_vli_decode@@XZ_5.0+0x120>  // b.hs, b.nlast
    b4d0:	sub	x12, x10, x8
    b4d4:	lsl	x13, x8, #3
    b4d8:	mov	x11, xzr
    b4dc:	add	x12, x12, #0x9
    b4e0:	sub	x13, x13, x8
    b4e4:	add	x14, x2, x10
    b4e8:	ldrb	w15, [x14, x11]
    b4ec:	and	x16, x15, #0x7f
    b4f0:	lsl	x16, x16, x13
    b4f4:	add	x9, x16, x9
    b4f8:	add	x16, x8, x11
    b4fc:	tbz	w15, #7, b540 <lzma_vli_decode@@XZ_5.0+0xe0>
    b500:	sub	x15, x16, #0x8
    b504:	cbz	x15, b56c <lzma_vli_decode@@XZ_5.0+0x10c>
    b508:	add	x11, x11, #0x1
    b50c:	add	x15, x10, x11
    b510:	cmp	x15, x4
    b514:	add	x13, x13, #0x7
    b518:	b.cc	b4e8 <lzma_vli_decode@@XZ_5.0+0x88>  // b.lo, b.ul, b.last
    b51c:	add	x8, x8, x11
    b520:	add	x10, sp, #0x8
    b524:	str	x15, [x3]
    b528:	str	x8, [x1]
    b52c:	cmp	x1, x10
    b530:	mov	w8, #0x9                   	// #9
    b534:	str	x9, [x0]
    b538:	csel	w8, w8, wzr, eq  // eq = none
    b53c:	b	b594 <lzma_vli_decode@@XZ_5.0+0x134>
    b540:	add	x10, x10, x11
    b544:	add	x8, x16, #0x1
    b548:	add	x10, x10, #0x1
    b54c:	str	x10, [x3]
    b550:	str	x8, [x1]
    b554:	str	x9, [x0]
    b558:	cbnz	w15, b588 <lzma_vli_decode@@XZ_5.0+0x128>
    b55c:	cmp	x8, #0x1
    b560:	b.ls	b588 <lzma_vli_decode@@XZ_5.0+0x128>  // b.plast
    b564:	mov	w8, #0x9                   	// #9
    b568:	b	b594 <lzma_vli_decode@@XZ_5.0+0x134>
    b56c:	mov	w8, #0x9                   	// #9
    b570:	str	x12, [x3]
    b574:	str	x8, [x1]
    b578:	str	x9, [x0]
    b57c:	b	b594 <lzma_vli_decode@@XZ_5.0+0x134>
    b580:	mov	w8, #0xa                   	// #10
    b584:	b	b594 <lzma_vli_decode@@XZ_5.0+0x134>
    b588:	add	x8, sp, #0x8
    b58c:	cmp	x1, x8
    b590:	cset	w8, ne  // ne = any
    b594:	mov	w0, w8
    b598:	add	sp, sp, #0x10
    b59c:	ret

000000000000b5a0 <lzma_check_is_supported@@XZ_5.0>:
    b5a0:	cmp	w0, #0xf
    b5a4:	b.ls	b5b0 <lzma_check_is_supported@@XZ_5.0+0x10>  // b.plast
    b5a8:	mov	w0, wzr
    b5ac:	ret
    b5b0:	adrp	x8, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    b5b4:	add	x8, x8, #0xa91
    b5b8:	ldrb	w0, [x8, w0, uxtw]
    b5bc:	ret

000000000000b5c0 <lzma_check_size@@XZ_5.0>:
    b5c0:	cmp	w0, #0xf
    b5c4:	b.ls	b5d0 <lzma_check_size@@XZ_5.0+0x10>  // b.plast
    b5c8:	mov	w0, #0xffffffff            	// #-1
    b5cc:	ret
    b5d0:	adrp	x8, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
    b5d4:	add	x8, x8, #0xaa1
    b5d8:	ldrb	w0, [x8, w0, uxtw]
    b5dc:	ret
    b5e0:	cmp	w1, #0xa
    b5e4:	b.eq	b600 <lzma_check_size@@XZ_5.0+0x40>  // b.none
    b5e8:	cmp	w1, #0x4
    b5ec:	b.eq	b604 <lzma_check_size@@XZ_5.0+0x44>  // b.none
    b5f0:	cmp	w1, #0x1
    b5f4:	b.ne	b608 <lzma_check_size@@XZ_5.0+0x48>  // b.any
    b5f8:	str	wzr, [x0, #64]
    b5fc:	ret
    b600:	b	b8a4 <lzma_crc64@@XZ_5.0+0xd4>
    b604:	str	xzr, [x0, #64]
    b608:	ret
    b60c:	stp	x29, x30, [sp, #-32]!
    b610:	str	x19, [sp, #16]
    b614:	cmp	w1, #0xa
    b618:	mov	x19, x0
    b61c:	mov	x29, sp
    b620:	b.eq	b650 <lzma_check_size@@XZ_5.0+0x90>  // b.none
    b624:	cmp	w1, #0x4
    b628:	b.eq	b668 <lzma_check_size@@XZ_5.0+0xa8>  // b.none
    b62c:	cmp	w1, #0x1
    b630:	b.ne	b680 <lzma_check_size@@XZ_5.0+0xc0>  // b.any
    b634:	ldr	w8, [x19, #64]
    b638:	mov	x0, x2
    b63c:	mov	x1, x3
    b640:	mov	w2, w8
    b644:	bl	3180 <lzma_crc32@plt>
    b648:	str	w0, [x19, #64]
    b64c:	b	b680 <lzma_check_size@@XZ_5.0+0xc0>
    b650:	mov	x0, x2
    b654:	mov	x2, x19
    b658:	ldr	x19, [sp, #16]
    b65c:	mov	x1, x3
    b660:	ldp	x29, x30, [sp], #32
    b664:	b	b8bc <lzma_crc64@@XZ_5.0+0xec>
    b668:	ldr	x8, [x19, #64]
    b66c:	mov	x0, x2
    b670:	mov	x1, x3
    b674:	mov	x2, x8
    b678:	bl	3250 <lzma_crc64@plt>
    b67c:	str	x0, [x19, #64]
    b680:	ldr	x19, [sp, #16]
    b684:	ldp	x29, x30, [sp], #32
    b688:	ret
    b68c:	cmp	w1, #0xa
    b690:	b.eq	b6b0 <lzma_check_size@@XZ_5.0+0xf0>  // b.none
    b694:	cmp	w1, #0x4
    b698:	b.eq	b6b4 <lzma_check_size@@XZ_5.0+0xf4>  // b.none
    b69c:	cmp	w1, #0x1
    b6a0:	b.ne	b6bc <lzma_check_size@@XZ_5.0+0xfc>  // b.any
    b6a4:	ldr	w8, [x0, #64]
    b6a8:	str	w8, [x0]
    b6ac:	ret
    b6b0:	b	c7ac <lzma_crc64@@XZ_5.0+0xfdc>
    b6b4:	ldr	x8, [x0, #64]
    b6b8:	str	x8, [x0]
    b6bc:	ret

000000000000b6c0 <lzma_crc32@@XZ_5.0>:
    b6c0:	cmp	x1, #0x9
    b6c4:	mvn	w8, w2
    b6c8:	b.cc	b7a0 <lzma_crc32@@XZ_5.0+0xe0>  // b.lo, b.ul, b.last
    b6cc:	tst	x0, #0x7
    b6d0:	b.eq	b6fc <lzma_crc32@@XZ_5.0+0x3c>  // b.none
    b6d4:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b6d8:	ldr	x9, [x9, #3952]
    b6dc:	ldrb	w10, [x0], #1
    b6e0:	and	w11, w8, #0xff
    b6e4:	sub	x1, x1, #0x1
    b6e8:	eor	w10, w11, w10
    b6ec:	ldr	w10, [x9, w10, uxtw #2]
    b6f0:	tst	x0, #0x7
    b6f4:	eor	w8, w10, w8, lsr #8
    b6f8:	b.ne	b6dc <lzma_crc32@@XZ_5.0+0x1c>  // b.any
    b6fc:	and	x9, x1, #0xfffffffffffffff8
    b700:	cmp	x9, #0x1
    b704:	and	x1, x1, #0x7
    b708:	b.lt	b7a0 <lzma_crc32@@XZ_5.0+0xe0>  // b.tstop
    b70c:	adrp	x10, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b710:	ldr	x10, [x10, #3952]
    b714:	add	x9, x0, x9
    b718:	ldp	w11, w12, [x0], #8
    b71c:	eor	w8, w11, w8
    b720:	and	w15, w8, #0xff
    b724:	ubfx	w16, w8, #8, #8
    b728:	ubfx	w17, w8, #16, #8
    b72c:	add	x15, x10, w15, uxtw #2
    b730:	add	x16, x10, w16, uxtw #2
    b734:	lsr	w8, w8, #24
    b738:	add	x17, x10, w17, uxtw #2
    b73c:	ldr	w15, [x15, #7168]
    b740:	ldr	w16, [x16, #6144]
    b744:	add	x8, x10, w8, uxtw #2
    b748:	ldr	w17, [x17, #5120]
    b74c:	add	x11, x10, w12, uxtb #2
    b750:	lsr	x13, x12, #8
    b754:	ldr	w8, [x8, #4096]
    b758:	lsr	x14, x12, #16
    b75c:	ldr	w11, [x11, #3072]
    b760:	add	x13, x10, w13, uxtb #2
    b764:	lsr	x12, x12, #22
    b768:	add	x14, x10, w14, uxtb #2
    b76c:	ldr	w13, [x13, #2048]
    b770:	eor	w15, w16, w15
    b774:	and	x12, x12, #0x3fc
    b778:	ldr	w14, [x14, #1024]
    b77c:	eor	w15, w15, w17
    b780:	ldr	w12, [x10, x12]
    b784:	eor	w8, w15, w8
    b788:	eor	w8, w8, w11
    b78c:	eor	w8, w8, w13
    b790:	eor	w8, w8, w14
    b794:	cmp	x0, x9
    b798:	eor	w8, w8, w12
    b79c:	b.cc	b718 <lzma_crc32@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    b7a0:	cbz	x1, b7c8 <lzma_crc32@@XZ_5.0+0x108>
    b7a4:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b7a8:	ldr	x9, [x9, #3952]
    b7ac:	ldrb	w10, [x0], #1
    b7b0:	and	w11, w8, #0xff
    b7b4:	subs	x1, x1, #0x1
    b7b8:	eor	w10, w11, w10
    b7bc:	ldr	w10, [x9, w10, uxtw #2]
    b7c0:	eor	w8, w10, w8, lsr #8
    b7c4:	b.ne	b7ac <lzma_crc32@@XZ_5.0+0xec>  // b.any
    b7c8:	mvn	w0, w8
    b7cc:	ret

000000000000b7d0 <lzma_crc64@@XZ_5.0>:
    b7d0:	cmp	x1, #0x5
    b7d4:	mvn	x8, x2
    b7d8:	b.cc	b874 <lzma_crc64@@XZ_5.0+0xa4>  // b.lo, b.ul, b.last
    b7dc:	tst	x0, #0x3
    b7e0:	b.eq	b80c <lzma_crc64@@XZ_5.0+0x3c>  // b.none
    b7e4:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b7e8:	ldr	x9, [x9, #3984]
    b7ec:	ldrb	w10, [x0], #1
    b7f0:	and	x11, x8, #0xff
    b7f4:	sub	x1, x1, #0x1
    b7f8:	eor	x10, x11, x10
    b7fc:	ldr	x10, [x9, x10, lsl #3]
    b800:	tst	x0, #0x3
    b804:	eor	x8, x10, x8, lsr #8
    b808:	b.ne	b7ec <lzma_crc64@@XZ_5.0+0x1c>  // b.any
    b80c:	and	x9, x1, #0xfffffffffffffffc
    b810:	cmp	x9, #0x1
    b814:	and	x1, x1, #0x3
    b818:	b.lt	b874 <lzma_crc64@@XZ_5.0+0xa4>  // b.tstop
    b81c:	adrp	x10, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b820:	ldr	x10, [x10, #3984]
    b824:	add	x9, x0, x9
    b828:	ldr	w11, [x0], #4
    b82c:	eor	w11, w11, w8
    b830:	and	w12, w11, #0xff
    b834:	ubfx	w13, w11, #8, #8
    b838:	add	x12, x10, w12, uxtw #3
    b83c:	ubfx	w14, w11, #16, #8
    b840:	add	x13, x10, w13, uxtw #3
    b844:	ldr	x12, [x12, #6144]
    b848:	add	x14, x10, w14, uxtw #3
    b84c:	ldr	x13, [x13, #4096]
    b850:	lsr	w11, w11, #24
    b854:	ldr	x14, [x14, #2048]
    b858:	ldr	x11, [x10, w11, uxtw #3]
    b85c:	eor	x8, x12, x8, lsr #32
    b860:	eor	x8, x8, x13
    b864:	eor	x8, x8, x14
    b868:	cmp	x0, x9
    b86c:	eor	x8, x8, x11
    b870:	b.cc	b828 <lzma_crc64@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    b874:	cbz	x1, b89c <lzma_crc64@@XZ_5.0+0xcc>
    b878:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    b87c:	ldr	x9, [x9, #3984]
    b880:	ldrb	w10, [x0], #1
    b884:	and	x11, x8, #0xff
    b888:	subs	x1, x1, #0x1
    b88c:	eor	x10, x11, x10
    b890:	ldr	x10, [x9, x10, lsl #3]
    b894:	eor	x8, x10, x8, lsr #8
    b898:	b.ne	b880 <lzma_crc64@@XZ_5.0+0xb0>  // b.any
    b89c:	mvn	x0, x8
    b8a0:	ret
    b8a4:	adrp	x8, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    b8a8:	add	x8, x8, #0xab8
    b8ac:	ldp	q1, q0, [x8]
    b8b0:	str	xzr, [x0, #96]
    b8b4:	stp	q1, q0, [x0, #64]
    b8b8:	ret
    b8bc:	stp	x29, x30, [sp, #-64]!
    b8c0:	str	x23, [sp, #16]
    b8c4:	stp	x22, x21, [sp, #32]
    b8c8:	stp	x20, x19, [sp, #48]
    b8cc:	mov	x29, sp
    b8d0:	cbz	x1, b938 <lzma_crc64@@XZ_5.0+0x168>
    b8d4:	mov	x19, x2
    b8d8:	mov	x20, x1
    b8dc:	mov	x21, x0
    b8e0:	mov	w23, #0x40                  	// #64
    b8e4:	ldr	x8, [x19, #96]
    b8e8:	mov	x1, x21
    b8ec:	and	x8, x8, #0x3f
    b8f0:	sub	x9, x23, x8
    b8f4:	cmp	x9, x20
    b8f8:	csel	x22, x20, x9, hi  // hi = pmore
    b8fc:	add	x0, x19, x8
    b900:	mov	x2, x22
    b904:	bl	3060 <memcpy@plt>
    b908:	ldr	x8, [x19, #96]
    b90c:	add	x21, x21, x22
    b910:	sub	x20, x20, x22
    b914:	add	x8, x22, x8
    b918:	tst	x8, #0x3f
    b91c:	str	x8, [x19, #96]
    b920:	b.eq	b92c <lzma_crc64@@XZ_5.0+0x15c>  // b.none
    b924:	cbnz	x20, b8e4 <lzma_crc64@@XZ_5.0+0x114>
    b928:	b	b938 <lzma_crc64@@XZ_5.0+0x168>
    b92c:	mov	x0, x19
    b930:	bl	b94c <lzma_crc64@@XZ_5.0+0x17c>
    b934:	cbnz	x20, b8e4 <lzma_crc64@@XZ_5.0+0x114>
    b938:	ldp	x20, x19, [sp, #48]
    b93c:	ldp	x22, x21, [sp, #32]
    b940:	ldr	x23, [sp, #16]
    b944:	ldp	x29, x30, [sp], #64
    b948:	ret
    b94c:	sub	sp, sp, #0xb0
    b950:	stp	x29, x30, [sp, #80]
    b954:	stp	x28, x27, [sp, #96]
    b958:	stp	x26, x25, [sp, #112]
    b95c:	stp	x24, x23, [sp, #128]
    b960:	stp	x22, x21, [sp, #144]
    b964:	stp	x20, x19, [sp, #160]
    b968:	str	xzr, [sp, #72]
    b96c:	ldp	w26, w27, [x0, #80]
    b970:	ldp	w29, w8, [x0, #88]
    b974:	ldp	w13, w1, [x0, #8]
    b978:	ldp	w9, w11, [x0]
    b97c:	ldp	w21, w23, [x0, #64]
    b980:	ldp	w24, w25, [x0, #72]
    b984:	bic	w3, w29, w26
    b988:	and	w4, w27, w26
    b98c:	eor	w2, w26, w26, ror #14
    b990:	rev	w19, w1
    b994:	orr	w1, w4, w3
    b998:	rev	w30, w9
    b99c:	rev	w22, w13
    b9a0:	eor	w13, w26, w2, ror #5
    b9a4:	add	w1, w8, w1
    b9a8:	ldp	w16, w17, [x0, #16]
    b9ac:	eor	w9, w21, w21, ror #9
    b9b0:	eor	w5, w24, w23
    b9b4:	stp	w8, w29, [sp, #8]
    b9b8:	ror	w13, w13, #6
    b9bc:	add	w1, w1, w30
    b9c0:	mov	w8, #0x2f98                	// #12184
    b9c4:	and	w6, w24, w23
    b9c8:	eor	w9, w21, w9, ror #11
    b9cc:	and	w2, w5, w21
    b9d0:	add	w13, w1, w13
    b9d4:	movk	w8, #0x428a, lsl #16
    b9d8:	add	w2, w2, w6
    b9dc:	ror	w9, w9, #2
    b9e0:	add	w8, w13, w8
    b9e4:	add	w9, w2, w9
    b9e8:	add	w13, w8, w25
    b9ec:	add	w8, w9, w8
    b9f0:	bic	w9, w27, w13
    b9f4:	and	w1, w26, w13
    b9f8:	rev	w28, w11
    b9fc:	orr	w9, w1, w9
    ba00:	eor	w1, w13, w13, ror #14
    ba04:	add	w3, w29, w28
    ba08:	eor	w1, w13, w1, ror #5
    ba0c:	mov	w10, #0x4491                	// #17553
    ba10:	eor	w11, w23, w21
    ba14:	eor	w5, w8, w8, ror #9
    ba18:	add	w9, w3, w9
    ba1c:	ror	w1, w1, #6
    ba20:	movk	w10, #0x7137, lsl #16
    ba24:	and	w7, w23, w21
    ba28:	and	w11, w8, w11
    ba2c:	add	w9, w9, w1
    ba30:	eor	w5, w8, w5, ror #11
    ba34:	add	w11, w11, w7
    ba38:	ror	w5, w5, #2
    ba3c:	add	w9, w9, w10
    ba40:	add	w11, w11, w5
    ba44:	add	w5, w9, w24
    ba48:	add	w6, w11, w9
    ba4c:	bic	w9, w26, w5
    ba50:	and	w10, w13, w5
    ba54:	eor	w3, w8, w21
    ba58:	orr	w9, w10, w9
    ba5c:	eor	w10, w5, w5, ror #14
    ba60:	add	w4, w27, w22
    ba64:	and	w1, w8, w21
    ba68:	and	w11, w6, w3
    ba6c:	eor	w10, w5, w10, ror #5
    ba70:	mov	w12, #0xfbcf                	// #64463
    ba74:	add	w11, w11, w1
    ba78:	eor	w1, w6, w6, ror #9
    ba7c:	add	w9, w4, w9
    ba80:	ror	w10, w10, #6
    ba84:	movk	w12, #0xb5c0, lsl #16
    ba88:	add	w9, w9, w10
    ba8c:	eor	w1, w6, w1, ror #11
    ba90:	ror	w1, w1, #2
    ba94:	add	w9, w9, w12
    ba98:	add	w11, w11, w1
    ba9c:	add	w12, w9, w23
    baa0:	add	w11, w11, w9
    baa4:	bic	w9, w13, w12
    baa8:	and	w1, w5, w12
    baac:	eor	w3, w6, w8
    bab0:	orr	w9, w1, w9
    bab4:	eor	w1, w12, w12, ror #14
    bab8:	add	w2, w26, w19
    babc:	and	w10, w6, w8
    bac0:	and	w3, w11, w3
    bac4:	eor	w1, w12, w1, ror #5
    bac8:	mov	w14, #0xdba5                	// #56229
    bacc:	add	w10, w3, w10
    bad0:	eor	w3, w11, w11, ror #9
    bad4:	add	w9, w2, w9
    bad8:	ror	w1, w1, #6
    badc:	movk	w14, #0xe9b5, lsl #16
    bae0:	add	w9, w9, w1
    bae4:	eor	w3, w11, w3, ror #11
    bae8:	ror	w3, w3, #2
    baec:	add	w9, w9, w14
    baf0:	add	w10, w10, w3
    baf4:	add	w14, w9, w21
    baf8:	stp	w23, w21, [sp, #32]
    bafc:	add	w9, w10, w9
    bb00:	bic	w10, w5, w14
    bb04:	and	w3, w12, w14
    bb08:	rev	w23, w16
    bb0c:	orr	w10, w3, w10
    bb10:	add	w13, w23, w13
    bb14:	add	w10, w13, w10
    bb18:	eor	w13, w14, w14, ror #14
    bb1c:	eor	w13, w14, w13, ror #5
    bb20:	ror	w13, w13, #6
    bb24:	mov	w15, #0xc25b                	// #49755
    bb28:	eor	w2, w11, w6
    bb2c:	add	w10, w10, w13
    bb30:	eor	w13, w9, w9, ror #9
    bb34:	movk	w15, #0x3956, lsl #16
    bb38:	and	w1, w11, w6
    bb3c:	and	w2, w9, w2
    bb40:	eor	w13, w9, w13, ror #11
    bb44:	add	w1, w2, w1
    bb48:	ror	w13, w13, #2
    bb4c:	add	w10, w10, w15
    bb50:	add	w13, w1, w13
    bb54:	add	w15, w10, w8
    bb58:	str	w27, [sp, #16]
    bb5c:	add	w10, w13, w10
    bb60:	bic	w8, w12, w15
    bb64:	and	w13, w14, w15
    bb68:	rev	w27, w17
    bb6c:	orr	w8, w13, w8
    bb70:	add	w17, w27, w5
    bb74:	add	w8, w17, w8
    bb78:	eor	w17, w15, w15, ror #14
    bb7c:	eor	w17, w15, w17, ror #5
    bb80:	str	w25, [sp, #24]
    bb84:	str	w24, [sp, #28]
    bb88:	str	w26, [sp, #20]
    bb8c:	ror	w17, w17, #6
    bb90:	mov	w18, #0x11f1                	// #4593
    bb94:	ldp	w2, w3, [x0, #24]
    bb98:	eor	w16, w9, w11
    bb9c:	add	w8, w8, w17
    bba0:	eor	w17, w10, w10, ror #9
    bba4:	movk	w18, #0x59f1, lsl #16
    bba8:	and	w13, w9, w11
    bbac:	and	w16, w10, w16
    bbb0:	eor	w17, w10, w17, ror #11
    bbb4:	add	w13, w16, w13
    bbb8:	ror	w17, w17, #2
    bbbc:	add	w8, w8, w18
    bbc0:	add	w13, w13, w17
    bbc4:	add	w18, w8, w6
    bbc8:	add	w8, w13, w8
    bbcc:	bic	w13, w14, w18
    bbd0:	and	w1, w15, w18
    bbd4:	rev	w25, w2
    bbd8:	orr	w13, w1, w13
    bbdc:	add	w12, w25, w12
    bbe0:	add	w12, w12, w13
    bbe4:	eor	w13, w18, w18, ror #14
    bbe8:	eor	w13, w18, w13, ror #5
    bbec:	ror	w13, w13, #6
    bbf0:	mov	w20, #0x82a4                	// #33444
    bbf4:	eor	w17, w10, w9
    bbf8:	add	w12, w12, w13
    bbfc:	eor	w13, w8, w8, ror #9
    bc00:	movk	w20, #0x923f, lsl #16
    bc04:	and	w1, w10, w9
    bc08:	and	w17, w8, w17
    bc0c:	eor	w13, w8, w13, ror #11
    bc10:	add	w17, w17, w1
    bc14:	ror	w13, w13, #2
    bc18:	add	w12, w12, w20
    bc1c:	add	w13, w17, w13
    bc20:	add	w2, w12, w11
    bc24:	eor	w17, w8, w10
    bc28:	add	w11, w13, w12
    bc2c:	bic	w12, w15, w2
    bc30:	and	w13, w18, w2
    bc34:	rev	w5, w3
    bc38:	orr	w12, w13, w12
    bc3c:	and	w13, w8, w10
    bc40:	and	w17, w11, w17
    bc44:	add	w14, w5, w14
    bc48:	add	w13, w17, w13
    bc4c:	eor	w17, w2, w2, ror #14
    bc50:	add	w12, w14, w12
    bc54:	eor	w14, w11, w11, ror #9
    bc58:	eor	w17, w2, w17, ror #5
    bc5c:	mov	w16, #0x5ed5                	// #24277
    bc60:	ror	w17, w17, #6
    bc64:	eor	w14, w11, w14, ror #11
    bc68:	movk	w16, #0xab1c, lsl #16
    bc6c:	add	w12, w12, w17
    bc70:	ror	w14, w14, #2
    bc74:	add	w13, w13, w14
    bc78:	add	w16, w12, w16
    bc7c:	eor	w17, w11, w8
    bc80:	add	w12, w16, w9
    bc84:	add	w9, w13, w16
    bc88:	and	w14, w11, w8
    bc8c:	bic	w13, w18, w12
    bc90:	and	w16, w2, w12
    bc94:	and	w17, w9, w17
    bc98:	orr	w13, w16, w13
    bc9c:	add	w14, w17, w14
    bca0:	ldp	w16, w17, [x0, #32]
    bca4:	mov	w1, #0xaa98                	// #43672
    bca8:	movk	w1, #0xd807, lsl #16
    bcac:	rev	w20, w16
    bcb0:	add	w15, w20, w15
    bcb4:	add	w13, w15, w13
    bcb8:	eor	w15, w12, w12, ror #14
    bcbc:	eor	w15, w12, w15, ror #5
    bcc0:	ror	w15, w15, #6
    bcc4:	add	w13, w13, w15
    bcc8:	eor	w15, w9, w9, ror #9
    bccc:	eor	w15, w9, w15, ror #11
    bcd0:	ror	w15, w15, #2
    bcd4:	add	w13, w13, w1
    bcd8:	add	w14, w14, w15
    bcdc:	add	w15, w13, w10
    bce0:	add	w10, w14, w13
    bce4:	bic	w13, w2, w15
    bce8:	and	w14, w12, w15
    bcec:	rev	w3, w17
    bcf0:	orr	w13, w14, w13
    bcf4:	add	w17, w3, w18
    bcf8:	add	w13, w17, w13
    bcfc:	eor	w17, w15, w15, ror #14
    bd00:	eor	w17, w15, w17, ror #5
    bd04:	eor	w16, w9, w11
    bd08:	ror	w17, w17, #6
    bd0c:	and	w14, w9, w11
    bd10:	and	w16, w10, w16
    bd14:	add	w13, w13, w17
    bd18:	eor	w17, w10, w10, ror #9
    bd1c:	add	w14, w16, w14
    bd20:	mov	w16, #0x5b01                	// #23297
    bd24:	eor	w17, w10, w17, ror #11
    bd28:	movk	w16, #0x1283, lsl #16
    bd2c:	ror	w17, w17, #2
    bd30:	add	w14, w14, w17
    bd34:	add	w13, w13, w16
    bd38:	eor	w17, w10, w9
    bd3c:	add	w16, w13, w8
    bd40:	add	w14, w14, w13
    bd44:	bic	w8, w12, w16
    bd48:	and	w13, w15, w16
    bd4c:	and	w17, w14, w17
    bd50:	and	w18, w10, w9
    bd54:	orr	w8, w13, w8
    bd58:	add	w17, w17, w18
    bd5c:	ldp	w13, w18, [x0, #40]
    bd60:	and	w1, w14, w10
    bd64:	rev	w7, w13
    bd68:	add	w13, w7, w2
    bd6c:	add	w8, w13, w8
    bd70:	eor	w13, w16, w16, ror #14
    bd74:	eor	w13, w16, w13, ror #5
    bd78:	ror	w13, w13, #6
    bd7c:	add	w8, w8, w13
    bd80:	eor	w13, w14, w14, ror #9
    bd84:	eor	w13, w14, w13, ror #11
    bd88:	ror	w13, w13, #2
    bd8c:	add	w17, w17, w13
    bd90:	mov	w13, #0x85be                	// #34238
    bd94:	movk	w13, #0x2431, lsl #16
    bd98:	add	w8, w8, w13
    bd9c:	add	w13, w8, w11
    bda0:	add	w11, w17, w8
    bda4:	bic	w8, w15, w13
    bda8:	and	w17, w16, w13
    bdac:	rev	w2, w18
    bdb0:	orr	w8, w17, w8
    bdb4:	add	w12, w2, w12
    bdb8:	add	w8, w12, w8
    bdbc:	eor	w12, w13, w13, ror #14
    bdc0:	eor	w12, w13, w12, ror #5
    bdc4:	ror	w12, w12, #6
    bdc8:	eor	w17, w14, w10
    bdcc:	add	w8, w8, w12
    bdd0:	eor	w12, w11, w11, ror #9
    bdd4:	and	w17, w11, w17
    bdd8:	eor	w12, w11, w12, ror #11
    bddc:	add	w17, w17, w1
    bde0:	ror	w12, w12, #2
    bde4:	add	w17, w17, w12
    bde8:	mov	w12, #0x7dc3                	// #32195
    bdec:	movk	w12, #0x550c, lsl #16
    bdf0:	add	w8, w8, w12
    bdf4:	add	w12, w8, w9
    bdf8:	add	w9, w17, w8
    bdfc:	bic	w8, w16, w12
    be00:	and	w17, w13, w12
    be04:	orr	w8, w17, w8
    be08:	eor	w17, w11, w14
    be0c:	and	w17, w9, w17
    be10:	and	w1, w11, w14
    be14:	add	w17, w17, w1
    be18:	ldp	w18, w1, [x0, #48]
    be1c:	str	x0, [sp, #40]
    be20:	rev	w4, w18
    be24:	add	w15, w4, w15
    be28:	add	w8, w15, w8
    be2c:	eor	w15, w12, w12, ror #14
    be30:	eor	w15, w12, w15, ror #5
    be34:	ror	w15, w15, #6
    be38:	add	w8, w8, w15
    be3c:	eor	w15, w9, w9, ror #9
    be40:	eor	w15, w9, w15, ror #11
    be44:	ror	w15, w15, #2
    be48:	add	w15, w17, w15
    be4c:	mov	w17, #0x5d74                	// #23924
    be50:	movk	w17, #0x72be, lsl #16
    be54:	add	w17, w8, w17
    be58:	add	w8, w17, w10
    be5c:	add	w24, w15, w17
    be60:	bic	w10, w13, w8
    be64:	and	w15, w12, w8
    be68:	rev	w1, w1
    be6c:	orr	w10, w15, w10
    be70:	add	w16, w1, w16
    be74:	add	w10, w16, w10
    be78:	eor	w16, w8, w8, ror #14
    be7c:	eor	w16, w8, w16, ror #5
    be80:	ror	w16, w16, #6
    be84:	eor	w15, w9, w11
    be88:	add	w10, w10, w16
    be8c:	eor	w16, w24, w24, ror #9
    be90:	and	w15, w24, w15
    be94:	and	w17, w9, w11
    be98:	eor	w16, w24, w16, ror #11
    be9c:	add	w15, w15, w17
    bea0:	ror	w16, w16, #2
    bea4:	add	w15, w15, w16
    bea8:	mov	w16, #0xb1fe                	// #45566
    beac:	movk	w16, #0x80de, lsl #16
    beb0:	add	w16, w10, w16
    beb4:	add	w10, w16, w14
    beb8:	add	w21, w15, w16
    bebc:	bic	w14, w12, w10
    bec0:	and	w15, w8, w10
    bec4:	orr	w14, w15, w14
    bec8:	eor	w15, w24, w9
    becc:	and	w15, w21, w15
    bed0:	and	w17, w24, w9
    bed4:	add	w15, w15, w17
    bed8:	ldp	w16, w17, [x0, #56]
    bedc:	rev	w0, w16
    bee0:	add	w13, w0, w13
    bee4:	add	w13, w13, w14
    bee8:	eor	w14, w10, w10, ror #14
    beec:	eor	w14, w10, w14, ror #5
    bef0:	ror	w14, w14, #6
    bef4:	add	w13, w13, w14
    bef8:	eor	w14, w21, w21, ror #9
    befc:	eor	w14, w21, w14, ror #11
    bf00:	ror	w14, w14, #2
    bf04:	add	w14, w15, w14
    bf08:	mov	w15, #0x6a7                 	// #1703
    bf0c:	movk	w15, #0x9bdc, lsl #16
    bf10:	add	w13, w13, w15
    bf14:	add	w15, w13, w11
    bf18:	add	w26, w14, w13
    bf1c:	bic	w11, w8, w15
    bf20:	and	w13, w10, w15
    bf24:	rev	w18, w17
    bf28:	orr	w11, w13, w11
    bf2c:	add	w12, w18, w12
    bf30:	add	w11, w12, w11
    bf34:	eor	w12, w15, w15, ror #14
    bf38:	eor	w12, w15, w12, ror #5
    bf3c:	ror	w12, w12, #6
    bf40:	eor	w13, w21, w24
    bf44:	add	w11, w11, w12
    bf48:	eor	w12, w26, w26, ror #9
    bf4c:	and	w13, w26, w13
    bf50:	and	w14, w21, w24
    bf54:	eor	w12, w26, w12, ror #11
    bf58:	add	w13, w13, w14
    bf5c:	ror	w12, w12, #2
    bf60:	add	w12, w13, w12
    bf64:	mov	w13, #0xf174                	// #61812
    bf68:	movk	w13, #0xc19b, lsl #16
    bf6c:	add	w13, w11, w13
    bf70:	adrp	x17, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    bf74:	add	w11, w13, w9
    bf78:	add	w29, w12, w13
    bf7c:	add	x17, x17, #0xb54
    bf80:	bic	w12, w10, w11
    bf84:	and	w13, w15, w11
    bf88:	eor	w9, w11, w11, ror #14
    bf8c:	orr	w12, w13, w12
    bf90:	eor	w13, w21, w26
    bf94:	add	w8, w12, w8
    bf98:	and	w12, w21, w26
    bf9c:	and	w13, w13, w29
    bfa0:	eor	w9, w11, w9, ror #5
    bfa4:	add	w12, w13, w12
    bfa8:	eor	w13, w29, w29, ror #9
    bfac:	ror	w9, w9, #6
    bfb0:	add	w8, w8, w9
    bfb4:	eor	w9, w29, w13, ror #11
    bfb8:	ror	w9, w9, #2
    bfbc:	add	w9, w12, w9
    bfc0:	eor	w14, w0, w0, ror #2
    bfc4:	str	w9, [sp, #64]
    bfc8:	eor	w9, w22, w22, ror #11
    bfcc:	str	w14, [sp, #68]
    bfd0:	eor	w14, w28, w28, ror #11
    bfd4:	ror	w9, w9, #7
    bfd8:	ror	w14, w14, #7
    bfdc:	eor	w9, w9, w22, lsr #3
    bfe0:	eor	w14, w14, w28, lsr #3
    bfe4:	add	w28, w9, w28
    bfe8:	eor	w9, w19, w19, ror #11
    bfec:	eor	w13, w27, w27, ror #11
    bff0:	ror	w9, w9, #7
    bff4:	ror	w13, w13, #7
    bff8:	eor	w9, w9, w19, lsr #3
    bffc:	eor	w13, w13, w27, lsr #3
    c000:	add	w9, w9, w22
    c004:	eor	w12, w23, w23, ror #11
    c008:	add	w22, w13, w23
    c00c:	eor	w13, w25, w25, ror #11
    c010:	ror	w12, w12, #7
    c014:	ror	w13, w13, #7
    c018:	eor	w12, w12, w23, lsr #3
    c01c:	eor	w13, w13, w25, lsr #3
    c020:	add	w12, w12, w19
    c024:	add	w19, w13, w27
    c028:	eor	w13, w5, w5, ror #11
    c02c:	ror	w13, w13, #7
    c030:	eor	w13, w13, w5, lsr #3
    c034:	add	w23, w13, w25
    c038:	eor	w13, w20, w20, ror #11
    c03c:	ror	w13, w13, #7
    c040:	eor	w13, w13, w20, lsr #3
    c044:	add	w14, w14, w30
    c048:	ldp	w16, w30, [x17, #-60]
    c04c:	add	w6, w13, w5
    c050:	eor	w13, w3, w3, ror #11
    c054:	ror	w13, w13, #7
    c058:	eor	w13, w13, w3, lsr #3
    c05c:	add	w20, w13, w20
    c060:	eor	w13, w7, w7, ror #11
    c064:	ror	w13, w13, #7
    c068:	add	w5, w14, w3
    c06c:	add	w14, w8, w16
    c070:	eor	w8, w2, w2, ror #11
    c074:	eor	w13, w13, w7, lsr #3
    c078:	ror	w8, w8, #7
    c07c:	add	w16, w30, w10
    c080:	eor	w10, w4, w4, ror #11
    c084:	add	w13, w13, w3
    c088:	eor	w8, w8, w2, lsr #3
    c08c:	ror	w10, w10, #7
    c090:	add	w3, w9, w2
    c094:	eor	w9, w1, w1, ror #11
    c098:	add	w8, w8, w7
    c09c:	eor	w10, w10, w4, lsr #3
    c0a0:	ror	w9, w9, #7
    c0a4:	stp	w8, w13, [sp, #56]
    c0a8:	add	w8, w10, w2
    c0ac:	eor	w9, w9, w1, lsr #3
    c0b0:	str	w8, [sp, #52]
    c0b4:	add	w10, w9, w4
    c0b8:	ldp	w9, w8, [sp, #64]
    c0bc:	add	w4, w12, w4
    c0c0:	eor	w12, w0, w0, ror #11
    c0c4:	ror	w12, w12, #7
    c0c8:	eor	w12, w12, w0, lsr #3
    c0cc:	eor	w25, w18, w18, ror #2
    c0d0:	add	w12, w12, w1
    c0d4:	add	w1, w22, w1
    c0d8:	ror	w22, w8, #17
    c0dc:	eor	w22, w22, w0, lsr #10
    c0e0:	ror	w25, w25, #17
    c0e4:	add	w30, w5, w22
    c0e8:	eor	w22, w25, w18, lsr #10
    c0ec:	ldp	w5, w25, [x17, #-52]
    c0f0:	eor	w13, w18, w18, ror #11
    c0f4:	ror	w13, w13, #7
    c0f8:	add	w14, w14, w30
    c0fc:	add	w27, w28, w7
    c100:	eor	w13, w13, w18, lsr #3
    c104:	add	w24, w14, w24
    c108:	add	w13, w13, w0
    c10c:	add	w2, w19, w0
    c110:	add	w0, w27, w22
    c114:	add	w5, w5, w15
    c118:	bic	w15, w15, w24
    c11c:	and	w22, w11, w24
    c120:	add	w8, w23, w18
    c124:	orr	w23, w22, w15
    c128:	add	w16, w16, w0
    c12c:	add	w16, w16, w23
    c130:	eor	w23, w24, w24, ror #14
    c134:	eor	w23, w24, w23, ror #5
    c138:	add	w14, w9, w14
    c13c:	ror	w23, w23, #6
    c140:	eor	w7, w26, w29
    c144:	eor	w15, w30, w30, ror #2
    c148:	add	w16, w16, w23
    c14c:	eor	w23, w14, w14, ror #9
    c150:	and	w19, w26, w29
    c154:	and	w7, w14, w7
    c158:	ror	w15, w15, #17
    c15c:	eor	w23, w14, w23, ror #11
    c160:	add	w7, w7, w19
    c164:	eor	w15, w15, w30, lsr #10
    c168:	ror	w23, w23, #2
    c16c:	eor	w19, w0, w0, ror #2
    c170:	add	w28, w3, w15
    c174:	add	w7, w7, w23
    c178:	ror	w3, w19, #17
    c17c:	add	w21, w16, w21
    c180:	add	w16, w7, w16
    c184:	eor	w7, w28, w28, ror #2
    c188:	eor	w3, w3, w0, lsr #10
    c18c:	ror	w7, w7, #17
    c190:	add	w22, w4, w3
    c194:	eor	w7, w7, w28, lsr #10
    c198:	add	w23, w1, w7
    c19c:	eor	w1, w22, w22, ror #2
    c1a0:	ror	w1, w1, #17
    c1a4:	eor	w1, w1, w22, lsr #10
    c1a8:	add	w4, w25, w11
    c1ac:	eor	w25, w14, w29
    c1b0:	bic	w11, w11, w21
    c1b4:	add	w27, w2, w1
    c1b8:	and	w1, w24, w21
    c1bc:	orr	w11, w1, w11
    c1c0:	and	w1, w14, w29
    c1c4:	add	w2, w5, w28
    c1c8:	and	w5, w16, w25
    c1cc:	add	w1, w5, w1
    c1d0:	eor	w5, w21, w21, ror #14
    c1d4:	add	w11, w2, w11
    c1d8:	eor	w2, w16, w16, ror #9
    c1dc:	eor	w5, w21, w5, ror #5
    c1e0:	eor	w2, w16, w2, ror #11
    c1e4:	ror	w5, w5, #6
    c1e8:	ror	w2, w2, #2
    c1ec:	add	w11, w11, w5
    c1f0:	add	w1, w1, w2
    c1f4:	add	w26, w11, w26
    c1f8:	add	w11, w1, w11
    c1fc:	eor	w1, w23, w23, ror #2
    c200:	ror	w1, w1, #17
    c204:	eor	w1, w1, w23, lsr #10
    c208:	add	w25, w8, w1
    c20c:	eor	w8, w27, w27, ror #2
    c210:	ror	w8, w8, #17
    c214:	add	w6, w6, w30
    c218:	eor	w8, w8, w27, lsr #10
    c21c:	add	w19, w6, w8
    c220:	bic	w8, w24, w26
    c224:	and	w1, w21, w26
    c228:	orr	w8, w1, w8
    c22c:	add	w4, w4, w22
    c230:	add	w8, w4, w8
    c234:	eor	w4, w26, w26, ror #14
    c238:	eor	w4, w26, w4, ror #5
    c23c:	eor	w15, w30, w30, ror #11
    c240:	ror	w4, w4, #6
    c244:	ror	w15, w15, #7
    c248:	eor	w5, w16, w14
    c24c:	add	w8, w8, w4
    c250:	eor	w4, w11, w11, ror #9
    c254:	eor	w15, w15, w30, lsr #3
    c258:	and	w2, w16, w14
    c25c:	and	w5, w11, w5
    c260:	ldr	w9, [sp, #60]
    c264:	eor	w4, w11, w4, ror #11
    c268:	add	w15, w15, w18
    c26c:	ldp	w18, w3, [x17, #-44]
    c270:	add	w1, w5, w2
    c274:	ror	w4, w4, #2
    c278:	add	w1, w1, w4
    c27c:	eor	w4, w25, w25, ror #2
    c280:	ror	w4, w4, #17
    c284:	add	w5, w20, w0
    c288:	add	w7, w9, w28
    c28c:	ldr	w9, [sp, #56]
    c290:	eor	w4, w4, w25, lsr #10
    c294:	add	w18, w24, w18
    c298:	ldp	w2, w24, [x17, #-36]
    c29c:	add	w20, w5, w4
    c2a0:	eor	w4, w19, w19, ror #2
    c2a4:	ror	w4, w4, #17
    c2a8:	eor	w4, w4, w19, lsr #10
    c2ac:	add	w29, w8, w29
    c2b0:	str	w0, [sp, #68]
    c2b4:	add	w0, w9, w22
    c2b8:	add	w9, w21, w3
    c2bc:	ldr	w3, [sp, #52]
    c2c0:	add	w6, w7, w4
    c2c4:	add	w8, w1, w8
    c2c8:	bic	w1, w21, w29
    c2cc:	and	w7, w26, w29
    c2d0:	add	w18, w18, w23
    c2d4:	eor	w4, w11, w16
    c2d8:	orr	w1, w7, w1
    c2dc:	add	w2, w25, w2
    c2e0:	add	w21, w2, w26
    c2e4:	and	w2, w8, w4
    c2e8:	eor	w4, w20, w20, ror #2
    c2ec:	add	w18, w18, w1
    c2f0:	eor	w1, w6, w6, ror #2
    c2f4:	ror	w4, w4, #17
    c2f8:	ror	w1, w1, #17
    c2fc:	add	w3, w3, w23
    c300:	and	w7, w11, w16
    c304:	eor	w4, w4, w20, lsr #10
    c308:	eor	w1, w1, w6, lsr #10
    c30c:	add	w2, w2, w7
    c310:	add	w7, w0, w4
    c314:	eor	w0, w29, w29, ror #14
    c318:	add	w5, w3, w1
    c31c:	eor	w1, w8, w8, ror #9
    c320:	eor	w0, w29, w0, ror #5
    c324:	eor	w1, w8, w1, ror #11
    c328:	ror	w0, w0, #6
    c32c:	ror	w1, w1, #2
    c330:	add	w18, w18, w0
    c334:	add	w1, w2, w1
    c338:	eor	w0, w8, w11
    c33c:	add	w14, w18, w14
    c340:	add	w18, w1, w18
    c344:	and	w2, w8, w11
    c348:	bic	w1, w26, w14
    c34c:	and	w4, w29, w14
    c350:	and	w0, w18, w0
    c354:	orr	w26, w4, w1
    c358:	eor	w1, w7, w7, ror #2
    c35c:	add	w0, w0, w2
    c360:	eor	w2, w5, w5, ror #2
    c364:	ror	w1, w1, #17
    c368:	ror	w2, w2, #17
    c36c:	add	w10, w10, w27
    c370:	add	w12, w12, w25
    c374:	eor	w1, w1, w7, lsr #10
    c378:	eor	w2, w2, w5, lsr #10
    c37c:	add	w4, w10, w1
    c380:	add	w1, w12, w2
    c384:	add	w2, w19, w24
    c388:	add	w24, w2, w29
    c38c:	eor	w2, w14, w14, ror #14
    c390:	add	w9, w9, w27
    c394:	eor	w2, w14, w2, ror #5
    c398:	add	w9, w9, w26
    c39c:	ror	w2, w2, #6
    c3a0:	add	w9, w9, w2
    c3a4:	eor	w2, w18, w18, ror #9
    c3a8:	eor	w2, w18, w2, ror #11
    c3ac:	ror	w2, w2, #2
    c3b0:	add	w0, w0, w2
    c3b4:	add	w16, w9, w16
    c3b8:	add	w9, w0, w9
    c3bc:	eor	w0, w4, w4, ror #2
    c3c0:	ror	w0, w0, #17
    c3c4:	add	w13, w13, w19
    c3c8:	eor	w0, w0, w4, lsr #10
    c3cc:	add	w3, w13, w0
    c3d0:	eor	w13, w1, w1, ror #2
    c3d4:	ror	w13, w13, #17
    c3d8:	add	w15, w15, w20
    c3dc:	eor	w26, w18, w8
    c3e0:	eor	w13, w13, w1, lsr #10
    c3e4:	bic	w29, w29, w16
    c3e8:	add	w2, w15, w13
    c3ec:	and	w13, w14, w16
    c3f0:	and	w15, w18, w8
    c3f4:	and	w26, w9, w26
    c3f8:	ldp	w10, w12, [x17, #-28]
    c3fc:	orr	w13, w13, w29
    c400:	add	w15, w26, w15
    c404:	eor	w26, w16, w16, ror #14
    c408:	add	w13, w21, w13
    c40c:	eor	w21, w9, w9, ror #9
    c410:	eor	w26, w16, w26, ror #5
    c414:	ror	w26, w26, #6
    c418:	eor	w21, w9, w21, ror #11
    c41c:	add	w13, w13, w26
    c420:	ror	w21, w21, #2
    c424:	add	w10, w20, w10
    c428:	add	w15, w15, w21
    c42c:	add	w11, w13, w11
    c430:	add	w10, w10, w14
    c434:	add	w13, w15, w13
    c438:	bic	w14, w14, w11
    c43c:	and	w15, w16, w11
    c440:	orr	w14, w15, w14
    c444:	add	w14, w24, w14
    c448:	eor	w24, w11, w11, ror #14
    c44c:	eor	w24, w11, w24, ror #5
    c450:	ror	w24, w24, #6
    c454:	eor	w26, w9, w18
    c458:	add	w14, w14, w24
    c45c:	eor	w24, w13, w13, ror #9
    c460:	and	w21, w9, w18
    c464:	and	w26, w13, w26
    c468:	eor	w24, w13, w24, ror #11
    c46c:	add	w21, w26, w21
    c470:	ror	w24, w24, #2
    c474:	add	w12, w6, w12
    c478:	add	w21, w21, w24
    c47c:	add	w8, w14, w8
    c480:	add	w12, w12, w16
    c484:	eor	w24, w13, w9
    c488:	add	w14, w21, w14
    c48c:	bic	w16, w16, w8
    c490:	and	w21, w11, w8
    c494:	orr	w16, w21, w16
    c498:	and	w21, w13, w9
    c49c:	and	w24, w14, w24
    c4a0:	ldp	w15, w26, [x17, #-20]
    c4a4:	add	w21, w24, w21
    c4a8:	eor	w24, w8, w8, ror #14
    c4ac:	add	w10, w10, w16
    c4b0:	eor	w16, w14, w14, ror #9
    c4b4:	eor	w24, w8, w24, ror #5
    c4b8:	ror	w24, w24, #6
    c4bc:	eor	w16, w14, w16, ror #11
    c4c0:	add	w10, w10, w24
    c4c4:	ror	w16, w16, #2
    c4c8:	add	w15, w7, w15
    c4cc:	add	w16, w21, w16
    c4d0:	add	w18, w10, w18
    c4d4:	add	w15, w15, w11
    c4d8:	add	w10, w16, w10
    c4dc:	bic	w11, w11, w18
    c4e0:	and	w16, w8, w18
    c4e4:	orr	w11, w16, w11
    c4e8:	add	w11, w12, w11
    c4ec:	eor	w12, w18, w18, ror #14
    c4f0:	eor	w12, w18, w12, ror #5
    c4f4:	ror	w12, w12, #6
    c4f8:	eor	w24, w14, w13
    c4fc:	add	w11, w11, w12
    c500:	eor	w12, w10, w10, ror #9
    c504:	and	w21, w14, w13
    c508:	and	w24, w10, w24
    c50c:	eor	w12, w10, w12, ror #11
    c510:	add	w16, w24, w21
    c514:	ror	w12, w12, #2
    c518:	add	w26, w5, w26
    c51c:	add	w12, w16, w12
    c520:	add	w9, w11, w9
    c524:	add	w26, w26, w8
    c528:	add	w11, w12, w11
    c52c:	bic	w8, w8, w9
    c530:	and	w12, w18, w9
    c534:	orr	w8, w12, w8
    c538:	add	w8, w15, w8
    c53c:	eor	w15, w9, w9, ror #14
    c540:	eor	w15, w9, w15, ror #5
    c544:	ldp	w21, w24, [x17, #-12]
    c548:	ror	w15, w15, #6
    c54c:	eor	w16, w10, w14
    c550:	add	w8, w8, w15
    c554:	eor	w15, w11, w11, ror #9
    c558:	and	w12, w10, w14
    c55c:	and	w16, w11, w16
    c560:	eor	w15, w11, w15, ror #11
    c564:	add	w12, w16, w12
    c568:	ror	w15, w15, #2
    c56c:	add	w21, w4, w21
    c570:	add	w12, w12, w15
    c574:	add	w13, w8, w13
    c578:	add	w24, w1, w24
    c57c:	add	w21, w21, w18
    c580:	add	w12, w12, w8
    c584:	bic	w8, w18, w13
    c588:	and	w18, w9, w13
    c58c:	add	w29, w24, w9
    c590:	eor	w24, w13, w13, ror #14
    c594:	orr	w8, w18, w8
    c598:	eor	w24, w13, w24, ror #5
    c59c:	ldr	x0, [sp, #72]
    c5a0:	add	w8, w26, w8
    c5a4:	ror	w24, w24, #6
    c5a8:	ldur	w16, [x17, #-4]
    c5ac:	eor	w15, w11, w10
    c5b0:	add	w8, w8, w24
    c5b4:	eor	w24, w12, w12, ror #9
    c5b8:	and	w18, w11, w10
    c5bc:	and	w15, w12, w15
    c5c0:	eor	w24, w12, w24, ror #11
    c5c4:	add	w15, w15, w18
    c5c8:	ror	w24, w24, #2
    c5cc:	add	x0, x0, #0x10
    c5d0:	add	w15, w15, w24
    c5d4:	add	w14, w8, w14
    c5d8:	str	x0, [sp, #72]
    c5dc:	cmp	x0, #0x30
    c5e0:	add	w16, w3, w16
    c5e4:	eor	w24, w12, w11
    c5e8:	add	w0, w15, w8
    c5ec:	bic	w8, w9, w14
    c5f0:	and	w9, w13, w14
    c5f4:	orr	w8, w9, w8
    c5f8:	and	w9, w12, w11
    c5fc:	add	w15, w16, w13
    c600:	and	w16, w0, w24
    c604:	add	w9, w16, w9
    c608:	eor	w16, w14, w14, ror #14
    c60c:	eor	w16, w14, w16, ror #5
    c610:	add	w8, w21, w8
    c614:	eor	w21, w0, w0, ror #9
    c618:	ror	w16, w16, #6
    c61c:	add	w16, w8, w16
    c620:	eor	w8, w0, w21, ror #11
    c624:	ror	w8, w8, #2
    c628:	add	w9, w9, w8
    c62c:	add	w8, w16, w10
    c630:	add	w24, w9, w16
    c634:	bic	w9, w13, w8
    c638:	and	w10, w14, w8
    c63c:	orr	w9, w10, w9
    c640:	eor	w10, w8, w8, ror #14
    c644:	eor	w10, w8, w10, ror #5
    c648:	eor	w26, w0, w12
    c64c:	eor	w16, w24, w24, ror #9
    c650:	add	w9, w29, w9
    c654:	ror	w10, w10, #6
    c658:	ldr	w18, [x17]
    c65c:	and	w21, w0, w12
    c660:	and	w13, w24, w26
    c664:	add	w9, w9, w10
    c668:	eor	w10, w24, w16, ror #11
    c66c:	add	w13, w13, w21
    c670:	ror	w10, w10, #2
    c674:	add	w13, w13, w10
    c678:	add	w10, w9, w11
    c67c:	add	w21, w13, w9
    c680:	eor	w9, w10, w10, ror #14
    c684:	bic	w11, w14, w10
    c688:	and	w13, w8, w10
    c68c:	add	w18, w2, w18
    c690:	eor	w26, w24, w0
    c694:	orr	w11, w13, w11
    c698:	eor	w13, w21, w21, ror #9
    c69c:	eor	w9, w10, w9, ror #5
    c6a0:	add	w18, w18, w14
    c6a4:	and	w29, w24, w0
    c6a8:	and	w14, w21, w26
    c6ac:	add	w11, w15, w11
    c6b0:	eor	w13, w21, w13, ror #11
    c6b4:	ror	w9, w9, #6
    c6b8:	add	w14, w14, w29
    c6bc:	ror	w13, w13, #2
    c6c0:	add	w9, w11, w9
    c6c4:	add	w11, w14, w13
    c6c8:	add	w15, w9, w12
    c6cc:	add	w26, w11, w9
    c6d0:	bic	w11, w8, w15
    c6d4:	and	w12, w10, w15
    c6d8:	eor	w16, w21, w24
    c6dc:	eor	w9, w15, w15, ror #14
    c6e0:	orr	w11, w12, w11
    c6e4:	eor	w12, w26, w26, ror #9
    c6e8:	and	w29, w21, w24
    c6ec:	and	w13, w26, w16
    c6f0:	eor	w9, w15, w9, ror #5
    c6f4:	eor	w12, w26, w12, ror #11
    c6f8:	add	w11, w18, w11
    c6fc:	mov	w18, w2
    c700:	mov	w2, w5
    c704:	mov	w5, w19
    c708:	mov	w19, w22
    c70c:	mov	w22, w28
    c710:	ldr	w28, [sp, #68]
    c714:	add	w13, w13, w29
    c718:	ror	w9, w9, #6
    c71c:	ror	w12, w12, #2
    c720:	add	w9, w11, w9
    c724:	add	w12, w13, w12
    c728:	add	w11, w9, w0
    c72c:	mov	w0, w3
    c730:	mov	w3, w6
    c734:	add	w29, w12, w9
    c738:	add	x17, x17, #0x40
    c73c:	b.cc	bf80 <lzma_crc64@@XZ_5.0+0x7b0>  // b.lo, b.ul, b.last
    c740:	ldr	w16, [sp, #20]
    c744:	ldp	w12, w9, [sp, #32]
    c748:	ldp	w14, w13, [sp, #24]
    c74c:	add	w11, w11, w16
    c750:	ldr	w16, [sp, #16]
    c754:	add	w9, w29, w9
    c758:	add	w12, w26, w12
    c75c:	add	w13, w21, w13
    c760:	add	w15, w15, w16
    c764:	ldr	w16, [sp, #12]
    c768:	add	w14, w24, w14
    c76c:	add	w10, w10, w16
    c770:	ldr	w16, [sp, #8]
    c774:	add	w8, w8, w16
    c778:	ldr	x16, [sp, #40]
    c77c:	stp	w9, w12, [x16, #64]
    c780:	stp	w13, w14, [x16, #72]
    c784:	stp	w11, w15, [x16, #80]
    c788:	stp	w10, w8, [x16, #88]
    c78c:	ldp	x20, x19, [sp, #160]
    c790:	ldp	x22, x21, [sp, #144]
    c794:	ldp	x24, x23, [sp, #128]
    c798:	ldp	x26, x25, [sp, #112]
    c79c:	ldp	x28, x27, [sp, #96]
    c7a0:	ldp	x29, x30, [sp, #80]
    c7a4:	add	sp, sp, #0xb0
    c7a8:	ret
    c7ac:	stp	x29, x30, [sp, #-32]!
    c7b0:	ldr	x8, [x0, #96]
    c7b4:	str	x19, [sp, #16]
    c7b8:	mov	x19, x0
    c7bc:	mov	w9, #0x80                  	// #128
    c7c0:	and	x8, x8, #0x3f
    c7c4:	mov	x29, sp
    c7c8:	cmp	x8, #0x3f
    c7cc:	add	x10, x8, #0x1
    c7d0:	strb	w9, [x19, x8]
    c7d4:	b.eq	c7ec <lzma_crc64@@XZ_5.0+0x101c>  // b.none
    c7d8:	mov	w9, wzr
    c7dc:	cmp	x8, #0x37
    c7e0:	mov	x8, x10
    c7e4:	b.ne	c7c8 <lzma_crc64@@XZ_5.0+0xff8>  // b.any
    c7e8:	b	c800 <lzma_crc64@@XZ_5.0+0x1030>
    c7ec:	mov	x0, x19
    c7f0:	bl	b94c <lzma_crc64@@XZ_5.0+0x17c>
    c7f4:	mov	x8, xzr
    c7f8:	mov	w9, wzr
    c7fc:	b	c7c8 <lzma_crc64@@XZ_5.0+0xff8>
    c800:	ldr	x8, [x19, #96]
    c804:	mov	x0, x19
    c808:	lsl	x8, x8, #3
    c80c:	str	x8, [x19, #96]
    c810:	rev	x8, x8
    c814:	str	x8, [x19, #56]
    c818:	bl	b94c <lzma_crc64@@XZ_5.0+0x17c>
    c81c:	mov	x8, xzr
    c820:	add	x9, x19, x8
    c824:	ldr	d0, [x9, #64]
    c828:	add	x8, x8, #0x8
    c82c:	cmp	x8, #0x20
    c830:	rev32	v0.8b, v0.8b
    c834:	str	d0, [x9]
    c838:	b.ne	c820 <lzma_crc64@@XZ_5.0+0x1050>  // b.any
    c83c:	ldr	x19, [sp, #16]
    c840:	ldp	x29, x30, [sp], #32
    c844:	ret
    c848:	sub	sp, sp, #0x90
    c84c:	mov	x2, x0
    c850:	movi	v0.2d, #0x0
    c854:	mov	x0, sp
    c858:	mov	x1, xzr
    c85c:	stp	x29, x30, [sp, #128]
    c860:	add	x29, sp, #0x80
    c864:	str	xzr, [sp, #112]
    c868:	stp	q0, q0, [sp, #80]
    c86c:	stp	q0, q0, [sp, #48]
    c870:	stp	q0, q0, [sp, #16]
    c874:	str	q0, [sp]
    c878:	bl	c8a8 <lzma_crc64@@XZ_5.0+0x10d8>
    c87c:	tbz	w0, #0, c888 <lzma_crc64@@XZ_5.0+0x10b8>
    c880:	mov	x0, #0xffffffffffffffff    	// #-1
    c884:	b	c89c <lzma_crc64@@XZ_5.0+0x10cc>
    c888:	ldp	w9, w8, [sp, #108]
    c88c:	ldr	w10, [sp, #8]
    c890:	add	x8, x8, x9
    c894:	add	x8, x10, x8, lsl #2
    c898:	add	x0, x8, #0xe0
    c89c:	ldp	x29, x30, [sp, #128]
    c8a0:	add	sp, sp, #0x90
    c8a4:	ret
    c8a8:	stp	x29, x30, [sp, #-48]!
    c8ac:	stp	x22, x21, [sp, #16]
    c8b0:	stp	x20, x19, [sp, #32]
    c8b4:	ldr	x8, [x2, #8]
    c8b8:	mov	w10, #0xf000                	// #61440
    c8bc:	movk	w10, #0x5fff, lsl #16
    c8c0:	mov	x29, sp
    c8c4:	sub	x9, x8, #0x1, lsl #12
    c8c8:	cmp	x9, x10
    c8cc:	b.hi	ca0c <lzma_crc64@@XZ_5.0+0x123c>  // b.pmore
    c8d0:	ldp	x10, x9, [x2, #24]
    c8d4:	mov	x20, x2
    c8d8:	cmp	x9, x10
    c8dc:	b.hi	ca0c <lzma_crc64@@XZ_5.0+0x123c>  // b.pmore
    c8e0:	ldr	x12, [x20]
    c8e4:	lsr	x13, x8, #1
    c8e8:	mov	w11, #0x40000000            	// #1073741824
    c8ec:	lsr	x14, x8, #2
    c8f0:	add	w15, w12, w8
    c8f4:	str	w15, [x0, #12]
    c8f8:	ldr	x16, [x20, #16]
    c8fc:	cmp	w13, w11
    c900:	csel	w13, w14, w13, hi  // hi = pmore
    c904:	mov	x19, x0
    c908:	add	x14, x16, x10
    c90c:	add	x12, x14, x12
    c910:	ldr	w11, [x0, #8]
    c914:	add	w13, w13, w15
    c918:	str	w14, [x0, #16]
    c91c:	lsr	x12, x12, #1
    c920:	ldr	x0, [x0]
    c924:	add	w12, w13, w12
    c928:	add	w12, w12, w14
    c92c:	mov	x21, x1
    c930:	add	w12, w12, #0x80, lsl #12
    c934:	str	w12, [x19, #8]
    c938:	cbz	x0, c958 <lzma_crc64@@XZ_5.0+0x1188>
    c93c:	cmp	w11, w12
    c940:	b.eq	c958 <lzma_crc64@@XZ_5.0+0x1188>  // b.none
    c944:	mov	x1, x21
    c948:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    c94c:	str	xzr, [x19]
    c950:	ldp	x10, x9, [x20, #24]
    c954:	ldr	x8, [x20, #8]
    c958:	stp	w9, w10, [x19, #96]
    c95c:	add	w10, w8, #0x1
    c960:	str	w10, [x19, #84]
    c964:	ldr	w11, [x20, #40]
    c968:	mov	w0, #0x1                   	// #1
    c96c:	cmp	w11, #0x11
    c970:	b.le	c9a0 <lzma_crc64@@XZ_5.0+0x11d0>
    c974:	cmp	w11, #0x12
    c978:	b.eq	c9c4 <lzma_crc64@@XZ_5.0+0x11f4>  // b.none
    c97c:	cmp	w11, #0x13
    c980:	b.eq	c9d8 <lzma_crc64@@XZ_5.0+0x1208>  // b.none
    c984:	cmp	w11, #0x14
    c988:	b.ne	ca10 <lzma_crc64@@XZ_5.0+0x1240>  // b.any
    c98c:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c990:	adrp	x14, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c994:	ldr	x13, [x13, #4000]
    c998:	ldr	x14, [x14, #4016]
    c99c:	b	c9fc <lzma_crc64@@XZ_5.0+0x122c>
    c9a0:	cmp	w11, #0x3
    c9a4:	b.eq	c9ec <lzma_crc64@@XZ_5.0+0x121c>  // b.none
    c9a8:	cmp	w11, #0x4
    c9ac:	b.ne	ca10 <lzma_crc64@@XZ_5.0+0x1240>  // b.any
    c9b0:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9b4:	adrp	x14, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9b8:	ldr	x13, [x13, #4024]
    c9bc:	ldr	x14, [x14, #4064]
    c9c0:	b	c9fc <lzma_crc64@@XZ_5.0+0x122c>
    c9c4:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9c8:	adrp	x14, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9cc:	ldr	x13, [x13, #4032]
    c9d0:	ldr	x14, [x14, #4048]
    c9d4:	b	c9fc <lzma_crc64@@XZ_5.0+0x122c>
    c9d8:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9dc:	adrp	x14, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9e0:	ldr	x13, [x13, #3928]
    c9e4:	ldr	x14, [x14, #3888]
    c9e8:	b	c9fc <lzma_crc64@@XZ_5.0+0x122c>
    c9ec:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9f0:	adrp	x14, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    c9f4:	ldr	x13, [x13, #3912]
    c9f8:	ldr	x14, [x14, #3896]
    c9fc:	and	w12, w11, #0xf
    ca00:	cmp	w12, w9
    ca04:	stp	x14, x13, [x19, #48]
    ca08:	b.ls	ca20 <lzma_crc64@@XZ_5.0+0x1250>  // b.plast
    ca0c:	mov	w0, #0x1                   	// #1
    ca10:	ldp	x20, x19, [sp, #32]
    ca14:	ldp	x22, x21, [sp, #16]
    ca18:	ldp	x29, x30, [sp], #48
    ca1c:	ret
    ca20:	cmp	w12, #0x2
    ca24:	and	w22, w11, #0x10
    ca28:	b.ne	ca34 <lzma_crc64@@XZ_5.0+0x1264>  // b.any
    ca2c:	mov	w8, #0xffff                	// #65535
    ca30:	b	ca70 <lzma_crc64@@XZ_5.0+0x12a0>
    ca34:	sub	w8, w8, #0x1
    ca38:	orr	w8, w8, w8, lsr #1
    ca3c:	orr	w8, w8, w8, lsr #2
    ca40:	orr	w8, w8, w8, lsr #4
    ca44:	lsr	w9, w8, #1
    ca48:	orr	w8, w9, w8, lsr #9
    ca4c:	mov	w9, #0x1                   	// #1
    ca50:	orr	w8, w8, #0xffff
    ca54:	movk	w9, #0x100, lsl #16
    ca58:	cmp	w8, w9
    ca5c:	b.cc	ca70 <lzma_crc64@@XZ_5.0+0x12a0>  // b.lo, b.ul, b.last
    ca60:	lsr	w8, w8, #1
    ca64:	cmp	w12, #0x3
    ca68:	mov	w9, #0xffffff              	// #16777215
    ca6c:	csel	w8, w9, w8, eq  // eq = none
    ca70:	cmp	w12, #0x2
    ca74:	mov	w11, #0x401                 	// #1025
    ca78:	ldp	w13, w9, [x19, #108]
    ca7c:	csinc	w11, w11, wzr, hi  // hi = pmore
    ca80:	str	w8, [x19, #88]
    ca84:	add	w8, w8, w11
    ca88:	cmp	w12, #0x3
    ca8c:	add	w11, w8, #0x10, lsl #12
    ca90:	lsr	w14, w22, #4
    ca94:	csel	w8, w11, w8, hi  // hi = pmore
    ca98:	lsl	w10, w10, w14
    ca9c:	cmp	w13, w8
    caa0:	stp	w8, w10, [x19, #108]
    caa4:	b.ne	cab0 <lzma_crc64@@XZ_5.0+0x12e0>  // b.any
    caa8:	cmp	w9, w10
    caac:	b.eq	cad0 <lzma_crc64@@XZ_5.0+0x1300>  // b.none
    cab0:	ldr	x0, [x19, #64]
    cab4:	mov	x1, x21
    cab8:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cabc:	ldr	x0, [x19, #72]
    cac0:	mov	x1, x21
    cac4:	str	xzr, [x19, #64]
    cac8:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cacc:	str	xzr, [x19, #72]
    cad0:	ldr	w8, [x20, #44]
    cad4:	str	w8, [x19, #92]
    cad8:	cbz	w8, cae4 <lzma_crc64@@XZ_5.0+0x1314>
    cadc:	mov	w0, wzr
    cae0:	b	ca10 <lzma_crc64@@XZ_5.0+0x1240>
    cae4:	ldr	w8, [x19, #96]
    cae8:	mov	w0, wzr
    caec:	cbnz	w22, cafc <lzma_crc64@@XZ_5.0+0x132c>
    caf0:	lsr	w8, w8, #2
    caf4:	add	w8, w8, #0x4
    caf8:	b	cb04 <lzma_crc64@@XZ_5.0+0x1334>
    cafc:	lsr	w8, w8, #1
    cb00:	add	w8, w8, #0x10
    cb04:	str	w8, [x19, #92]
    cb08:	b	ca10 <lzma_crc64@@XZ_5.0+0x1240>
    cb0c:	sub	sp, sp, #0x80
    cb10:	stp	x29, x30, [sp, #64]
    cb14:	stp	x22, x21, [sp, #96]
    cb18:	stp	x20, x19, [sp, #112]
    cb1c:	ldr	x20, [x0]
    cb20:	mov	x22, x3
    cb24:	mov	x21, x2
    cb28:	mov	x19, x1
    cb2c:	str	x23, [sp, #80]
    cb30:	add	x29, sp, #0x40
    cb34:	cbnz	x20, cba8 <lzma_crc64@@XZ_5.0+0x13d8>
    cb38:	mov	x23, x0
    cb3c:	mov	w0, #0xe0                  	// #224
    cb40:	mov	x1, x19
    cb44:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    cb48:	cbz	x0, cce0 <lzma_crc64@@XZ_5.0+0x1510>
    cb4c:	adrp	x8, c000 <lzma_crc64@@XZ_5.0+0x830>
    cb50:	adrp	x9, c000 <lzma_crc64@@XZ_5.0+0x830>
    cb54:	add	x8, x8, #0xcfc
    cb58:	add	x9, x9, #0xefc
    cb5c:	stp	x8, x9, [x23, #24]
    cb60:	adrp	x8, c000 <lzma_crc64@@XZ_5.0+0x830>
    cb64:	add	x8, x8, #0xf6c
    cb68:	mov	x20, x0
    cb6c:	str	x8, [x23, #64]
    cb70:	mov	x8, #0xffffffffffffffff    	// #-1
    cb74:	movi	v0.2d, #0x0
    cb78:	str	x0, [x23]
    cb7c:	str	xzr, [x0, #32]
    cb80:	str	wzr, [x0, #40]
    cb84:	stp	wzr, wzr, [x0, #140]
    cb88:	stp	xzr, xzr, [x0, #8]
    cb8c:	str	xzr, [x0]
    cb90:	stp	xzr, xzr, [x0, #96]
    cb94:	stp	xzr, x8, [x0, #152]
    cb98:	stur	q0, [x0, #168]
    cb9c:	stur	q0, [x0, #184]
    cba0:	stur	q0, [x0, #200]
    cba4:	str	xzr, [x0, #216]
    cba8:	ldr	x2, [x21, #16]
    cbac:	mov	x3, sp
    cbb0:	mov	x0, x20
    cbb4:	mov	x1, x19
    cbb8:	blr	x22
    cbbc:	cbnz	w0, cce4 <lzma_crc64@@XZ_5.0+0x1514>
    cbc0:	add	x22, x20, #0x20
    cbc4:	mov	x2, sp
    cbc8:	mov	x0, x22
    cbcc:	mov	x1, x19
    cbd0:	bl	c8a8 <lzma_crc64@@XZ_5.0+0x10d8>
    cbd4:	tbz	w0, #0, cbe0 <lzma_crc64@@XZ_5.0+0x1410>
    cbd8:	mov	w0, #0x8                   	// #8
    cbdc:	b	cce4 <lzma_crc64@@XZ_5.0+0x1514>
    cbe0:	ldr	x8, [x22]
    cbe4:	cbnz	x8, cbfc <lzma_crc64@@XZ_5.0+0x142c>
    cbe8:	ldr	w0, [x20, #40]
    cbec:	mov	x1, x19
    cbf0:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    cbf4:	str	x0, [x20, #32]
    cbf8:	cbz	x0, cce0 <lzma_crc64@@XZ_5.0+0x1510>
    cbfc:	ldr	w8, [x20, #116]
    cc00:	ldr	x0, [x20, #96]
    cc04:	stp	xzr, xzr, [x20, #56]
    cc08:	str	wzr, [x20, #72]
    cc0c:	str	w8, [x20, #52]
    cc10:	cbz	x0, cc28 <lzma_crc64@@XZ_5.0+0x1458>
    cc14:	ldr	w8, [x20, #140]
    cc18:	mov	w1, wzr
    cc1c:	lsl	x2, x8, #2
    cc20:	bl	31e0 <memset@plt>
    cc24:	b	cc5c <lzma_crc64@@XZ_5.0+0x148c>
    cc28:	ldr	w8, [x20, #140]
    cc2c:	mov	x1, x19
    cc30:	lsl	x0, x8, #2
    cc34:	bl	36b4 <lzma_version_string@@XZ_5.0+0x34>
    cc38:	ldr	w8, [x20, #144]
    cc3c:	str	x0, [x20, #96]
    cc40:	mov	x1, x19
    cc44:	lsl	x0, x8, #2
    cc48:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    cc4c:	ldr	x8, [x20, #96]
    cc50:	str	x0, [x20, #104]
    cc54:	cbz	x0, ccc0 <lzma_crc64@@XZ_5.0+0x14f0>
    cc58:	cbz	x8, ccc0 <lzma_crc64@@XZ_5.0+0x14f0>
    cc5c:	str	wzr, [x20, #112]
    cc60:	ldr	x8, [sp, #48]
    cc64:	cbz	x8, cca8 <lzma_crc64@@XZ_5.0+0x14d8>
    cc68:	ldr	w9, [sp, #56]
    cc6c:	cbz	w9, cca8 <lzma_crc64@@XZ_5.0+0x14d8>
    cc70:	ldr	w10, [x20, #40]
    cc74:	ldr	x0, [x20, #32]
    cc78:	add	x8, x8, x9
    cc7c:	cmp	w9, w10
    cc80:	csel	w2, w9, w10, cc  // cc = lo, ul, last
    cc84:	sub	x1, x8, x2
    cc88:	str	w2, [x20, #68]
    cc8c:	bl	3060 <memcpy@plt>
    cc90:	ldr	x8, [x20, #88]
    cc94:	ldr	w1, [x20, #68]
    cc98:	mov	w9, #0x1                   	// #1
    cc9c:	mov	x0, x22
    cca0:	str	w9, [x20, #136]
    cca4:	blr	x8
    cca8:	add	x0, x20, #0x98
    ccac:	add	x2, x21, #0x18
    ccb0:	mov	x1, x19
    ccb4:	str	wzr, [x20, #136]
    ccb8:	bl	37b4 <lzma_version_string@@XZ_5.0+0x134>
    ccbc:	b	cce4 <lzma_crc64@@XZ_5.0+0x1514>
    ccc0:	mov	x0, x8
    ccc4:	mov	x1, x19
    ccc8:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cccc:	ldr	x0, [x20, #104]
    ccd0:	mov	x1, x19
    ccd4:	str	xzr, [x20, #96]
    ccd8:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    ccdc:	str	xzr, [x20, #104]
    cce0:	mov	w0, #0x5                   	// #5
    cce4:	ldp	x20, x19, [sp, #112]
    cce8:	ldp	x22, x21, [sp, #96]
    ccec:	ldr	x23, [sp, #80]
    ccf0:	ldp	x29, x30, [sp, #64]
    ccf4:	add	sp, sp, #0x80
    ccf8:	ret
    ccfc:	sub	sp, sp, #0x80
    cd00:	stp	x29, x30, [sp, #32]
    cd04:	add	x29, sp, #0x20
    cd08:	stp	x26, x25, [sp, #64]
    cd0c:	ldr	w26, [x29, #96]
    cd10:	stp	x28, x27, [sp, #48]
    cd14:	stp	x24, x23, [sp, #80]
    cd18:	stp	x22, x21, [sp, #96]
    cd1c:	stp	x20, x19, [sp, #112]
    cd20:	mov	x19, x7
    cd24:	mov	x20, x6
    cd28:	mov	x21, x5
    cd2c:	mov	x22, x4
    cd30:	mov	x23, x3
    cd34:	mov	x24, x2
    cd38:	mov	x25, x0
    cd3c:	add	x27, x0, #0x20
    cd40:	str	x1, [sp, #16]
    cd44:	ldr	x8, [x20]
    cd48:	cmp	x8, x19
    cd4c:	b.cs	ced4 <lzma_crc64@@XZ_5.0+0x1704>  // b.hs, b.nlast
    cd50:	cbnz	w26, cd60 <lzma_crc64@@XZ_5.0+0x1590>
    cd54:	ldr	x8, [x23]
    cd58:	cmp	x8, x22
    cd5c:	b.cs	ced4 <lzma_crc64@@XZ_5.0+0x1704>  // b.hs, b.nlast
    cd60:	ldr	w8, [x25, #136]
    cd64:	cbnz	w8, ceac <lzma_crc64@@XZ_5.0+0x16dc>
    cd68:	ldr	w8, [x25, #56]
    cd6c:	ldr	w9, [x25, #64]
    cd70:	cmp	w8, w9
    cd74:	b.cc	ceac <lzma_crc64@@XZ_5.0+0x16dc>  // b.lo, b.ul, b.last
    cd78:	ldr	w9, [x25, #40]
    cd7c:	ldr	w10, [x25, #48]
    cd80:	sub	w9, w9, w10
    cd84:	cmp	w8, w9
    cd88:	b.cs	cd94 <lzma_crc64@@XZ_5.0+0x15c4>  // b.hs, b.nlast
    cd8c:	ldr	w8, [x25, #68]
    cd90:	b	cdd4 <lzma_crc64@@XZ_5.0+0x1604>
    cd94:	ldr	w9, [x25, #44]
    cd98:	ldr	w10, [x25, #68]
    cd9c:	ldr	x0, [x25, #32]
    cda0:	sub	w8, w8, w9
    cda4:	and	w28, w8, #0xfffffff0
    cda8:	sub	w2, w10, w28
    cdac:	add	x1, x0, x28
    cdb0:	bl	3070 <memmove@plt>
    cdb4:	ldp	w8, w9, [x25, #52]
    cdb8:	ldp	w10, w11, [x25, #64]
    cdbc:	add	w12, w8, w28
    cdc0:	sub	w9, w9, w28
    cdc4:	sub	w10, w10, w28
    cdc8:	sub	w8, w11, w28
    cdcc:	stp	w12, w9, [x25, #52]
    cdd0:	stp	w10, w8, [x25, #64]
    cdd4:	mov	w8, w8
    cdd8:	stur	x8, [x29, #-8]
    cddc:	ldr	x8, [x25, #176]
    cde0:	cbz	x8, ce14 <lzma_crc64@@XZ_5.0+0x1644>
    cde4:	ldr	x0, [x25, #152]
    cde8:	ldr	x5, [x25, #32]
    cdec:	ldr	w7, [x25, #40]
    cdf0:	ldr	x1, [sp, #16]
    cdf4:	sub	x6, x29, #0x8
    cdf8:	mov	x2, x24
    cdfc:	mov	x3, x23
    ce00:	mov	x4, x22
    ce04:	str	w26, [sp]
    ce08:	blr	x8
    ce0c:	mov	w28, w0
    ce10:	b	ce40 <lzma_crc64@@XZ_5.0+0x1670>
    ce14:	ldr	x3, [x25, #32]
    ce18:	ldr	w5, [x25, #40]
    ce1c:	sub	x4, x29, #0x8
    ce20:	mov	x0, x24
    ce24:	mov	x1, x23
    ce28:	mov	x2, x22
    ce2c:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
    ce30:	cbz	w26, ce5c <lzma_crc64@@XZ_5.0+0x168c>
    ce34:	ldr	x8, [x23]
    ce38:	cmp	x8, x22
    ce3c:	cset	w28, eq  // eq = none
    ce40:	ldur	w8, [x29, #-8]
    ce44:	cmp	w28, #0x1
    ce48:	str	w8, [x25, #68]
    ce4c:	b.ne	ce68 <lzma_crc64@@XZ_5.0+0x1698>  // b.any
    ce50:	mov	w28, wzr
    ce54:	str	w26, [x25, #136]
    ce58:	b	ce74 <lzma_crc64@@XZ_5.0+0x16a4>
    ce5c:	ldur	w8, [x29, #-8]
    ce60:	mov	w28, wzr
    ce64:	str	w8, [x25, #68]
    ce68:	ldr	w9, [x25, #48]
    ce6c:	subs	w8, w8, w9
    ce70:	b.ls	ce78 <lzma_crc64@@XZ_5.0+0x16a8>  // b.plast
    ce74:	str	w8, [x25, #64]
    ce78:	ldr	w1, [x25, #72]
    ce7c:	cbz	w1, cea8 <lzma_crc64@@XZ_5.0+0x16d8>
    ce80:	ldr	w8, [x25, #56]
    ce84:	ldr	w9, [x25, #64]
    ce88:	cmp	w8, w9
    ce8c:	b.cs	cea8 <lzma_crc64@@XZ_5.0+0x16d8>  // b.hs, b.nlast
    ce90:	ldr	x9, [x25, #88]
    ce94:	sub	w8, w8, w1
    ce98:	mov	x0, x27
    ce9c:	str	wzr, [x25, #72]
    cea0:	str	w8, [x25, #56]
    cea4:	blr	x9
    cea8:	cbnz	w28, ced8 <lzma_crc64@@XZ_5.0+0x1708>
    ceac:	ldp	x0, x8, [x25]
    ceb0:	mov	x1, x27
    ceb4:	mov	x2, x21
    ceb8:	mov	x3, x20
    cebc:	mov	x4, x19
    cec0:	blr	x8
    cec4:	cbz	w0, cd44 <lzma_crc64@@XZ_5.0+0x1574>
    cec8:	mov	w28, w0
    cecc:	str	wzr, [x25, #136]
    ced0:	b	ced8 <lzma_crc64@@XZ_5.0+0x1708>
    ced4:	mov	w28, wzr
    ced8:	mov	w0, w28
    cedc:	ldp	x20, x19, [sp, #112]
    cee0:	ldp	x22, x21, [sp, #96]
    cee4:	ldp	x24, x23, [sp, #80]
    cee8:	ldp	x26, x25, [sp, #64]
    ceec:	ldp	x28, x27, [sp, #48]
    cef0:	ldp	x29, x30, [sp, #32]
    cef4:	add	sp, sp, #0x80
    cef8:	ret
    cefc:	stp	x29, x30, [sp, #-32]!
    cf00:	stp	x20, x19, [sp, #16]
    cf04:	mov	x20, x0
    cf08:	add	x0, x0, #0x98
    cf0c:	mov	x29, sp
    cf10:	mov	x19, x1
    cf14:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    cf18:	ldr	x0, [x20, #104]
    cf1c:	mov	x1, x19
    cf20:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cf24:	ldr	x0, [x20, #96]
    cf28:	mov	x1, x19
    cf2c:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cf30:	ldr	x0, [x20, #32]
    cf34:	mov	x1, x19
    cf38:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cf3c:	ldr	x8, [x20, #16]
    cf40:	ldr	x0, [x20]
    cf44:	mov	x1, x19
    cf48:	cbz	x8, cf54 <lzma_crc64@@XZ_5.0+0x1784>
    cf4c:	blr	x8
    cf50:	b	cf58 <lzma_crc64@@XZ_5.0+0x1788>
    cf54:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cf58:	mov	x0, x20
    cf5c:	mov	x1, x19
    cf60:	ldp	x20, x19, [sp, #16]
    cf64:	ldp	x29, x30, [sp], #32
    cf68:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    cf6c:	stp	x29, x30, [sp, #-48]!
    cf70:	stp	x20, x19, [sp, #32]
    cf74:	ldr	x8, [x0, #24]
    cf78:	str	x21, [sp, #16]
    cf7c:	mov	x29, sp
    cf80:	cbz	x8, cfbc <lzma_crc64@@XZ_5.0+0x17ec>
    cf84:	mov	x21, x0
    cf88:	ldr	x0, [x0]
    cf8c:	mov	x20, x1
    cf90:	mov	x1, x3
    cf94:	mov	x19, x3
    cf98:	blr	x8
    cf9c:	cbnz	w0, cfc0 <lzma_crc64@@XZ_5.0+0x17f0>
    cfa0:	add	x0, x21, #0x98
    cfa4:	add	x2, x19, #0x10
    cfa8:	mov	x1, x20
    cfac:	ldp	x20, x19, [sp, #32]
    cfb0:	ldr	x21, [sp, #16]
    cfb4:	ldp	x29, x30, [sp], #48
    cfb8:	b	38a8 <lzma_version_string@@XZ_5.0+0x228>
    cfbc:	mov	w0, #0xb                   	// #11
    cfc0:	ldp	x20, x19, [sp, #32]
    cfc4:	ldr	x21, [sp, #16]
    cfc8:	ldp	x29, x30, [sp], #48
    cfcc:	ret

000000000000cfd0 <lzma_mf_is_supported@@XZ_5.0>:
    cfd0:	sub	w8, w0, #0x3
    cfd4:	orr	w9, w0, #0x1
    cfd8:	cmp	w8, #0x2
    cfdc:	cset	w8, cc  // cc = lo, ul, last
    cfe0:	cmp	w9, #0x13
    cfe4:	cset	w9, eq  // eq = none
    cfe8:	cmp	w0, #0x14
    cfec:	orr	w8, w9, w8
    cff0:	cset	w9, eq  // eq = none
    cff4:	orr	w0, w9, w8
    cff8:	ret
    cffc:	stp	x29, x30, [sp, #-48]!
    d000:	stp	x20, x19, [sp, #32]
    d004:	ldr	x8, [x0, #48]
    d008:	mov	x20, x1
    d00c:	mov	x1, x2
    d010:	str	x21, [sp, #16]
    d014:	mov	x29, sp
    d018:	mov	x21, x2
    d01c:	mov	x19, x0
    d020:	blr	x8
    d024:	cbz	w0, d0ac <lzma_mf_is_supported@@XZ_5.0+0xdc>
    d028:	sub	w10, w0, #0x1
    d02c:	lsl	x8, x10, #3
    d030:	ldr	w8, [x21, x8]
    d034:	ldr	w9, [x19, #96]
    d038:	cmp	w8, w9
    d03c:	b.ne	d0b0 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.any
    d040:	ldr	w9, [x19, #36]
    d044:	ldr	w11, [x19, #24]
    d048:	ldr	w12, [x19, #100]
    d04c:	sub	w9, w9, w11
    d050:	add	w13, w9, #0x1
    d054:	cmp	w13, w12
    d058:	csinc	w9, w12, w9, hi  // hi = pmore
    d05c:	cmp	w8, w9
    d060:	b.cs	d0b0 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.hs, b.nlast
    d064:	add	x10, x21, x10, lsl #3
    d068:	ldr	x13, [x19]
    d06c:	ldr	w14, [x10, #4]
    d070:	mov	w12, w9
    d074:	add	x10, x13, x11
    d078:	sub	x11, x11, x14
    d07c:	add	x11, x13, x11
    d080:	add	x13, x10, x8
    d084:	add	x14, x11, x8
    d088:	ldurb	w13, [x13, #-1]
    d08c:	ldurb	w14, [x14, #-2]
    d090:	cmp	w13, w14
    d094:	b.ne	d0b0 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.any
    d098:	add	x8, x8, #0x1
    d09c:	cmp	w12, w8
    d0a0:	b.ne	d080 <lzma_mf_is_supported@@XZ_5.0+0xb0>  // b.any
    d0a4:	mov	w8, w9
    d0a8:	b	d0b0 <lzma_mf_is_supported@@XZ_5.0+0xe0>
    d0ac:	mov	w8, wzr
    d0b0:	str	w0, [x20]
    d0b4:	ldr	w9, [x19, #28]
    d0b8:	ldr	x21, [sp, #16]
    d0bc:	mov	w0, w8
    d0c0:	add	w9, w9, #0x1
    d0c4:	str	w9, [x19, #28]
    d0c8:	ldp	x20, x19, [sp, #32]
    d0cc:	ldp	x29, x30, [sp], #48
    d0d0:	ret
    d0d4:	sub	sp, sp, #0x30
    d0d8:	stp	x29, x30, [sp, #16]
    d0dc:	stp	x20, x19, [sp, #32]
    d0e0:	ldr	w9, [x0, #36]
    d0e4:	ldr	w8, [x0, #24]
    d0e8:	mov	x19, x0
    d0ec:	ldr	w0, [x0, #96]
    d0f0:	mov	x20, x1
    d0f4:	sub	w9, w9, w8
    d0f8:	add	x29, sp, #0x10
    d0fc:	cmp	w0, w9
    d100:	b.ls	d12c <lzma_mf_is_supported@@XZ_5.0+0x15c>  // b.plast
    d104:	cmp	w9, #0x2
    d108:	mov	w0, w9
    d10c:	b.hi	d12c <lzma_mf_is_supported@@XZ_5.0+0x15c>  // b.pmore
    d110:	ldr	w9, [x19, #40]
    d114:	add	w8, w8, #0x1
    d118:	str	w8, [x19, #24]
    d11c:	mov	w20, wzr
    d120:	add	w8, w9, #0x1
    d124:	str	w8, [x19, #40]
    d128:	b	d224 <lzma_mf_is_supported@@XZ_5.0+0x254>
    d12c:	ldr	x10, [x19]
    d130:	adrp	x12, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    d134:	ldr	w9, [x19, #20]
    d138:	add	x2, x10, x8
    d13c:	ldrb	w11, [x2]
    d140:	ldr	x12, [x12, #3952]
    d144:	ldrb	w14, [x2, #1]
    d148:	ldrb	w15, [x2, #2]
    d14c:	ldr	w13, [x19, #88]
    d150:	ldr	w11, [x12, x11, lsl #2]
    d154:	ldr	x12, [x19, #64]
    d158:	add	w1, w9, w8
    d15c:	eor	w9, w11, w14
    d160:	and	w11, w9, #0x3ff
    d164:	eor	w9, w9, w15, lsl #8
    d168:	and	w9, w9, w13
    d16c:	add	w9, w9, #0x400
    d170:	ldr	w13, [x12, w11, uxtw #2]
    d174:	ldr	w3, [x12, w9, uxtw #2]
    d178:	str	w1, [x12, w11, uxtw #2]
    d17c:	str	w1, [x12, w9, uxtw #2]
    d180:	ldr	w7, [x19, #84]
    d184:	sub	w9, w1, w13
    d188:	cmp	w9, w7
    d18c:	b.cs	d1f0 <lzma_mf_is_supported@@XZ_5.0+0x220>  // b.hs, b.nlast
    d190:	sub	x11, x2, w9, uxtw
    d194:	ldrb	w11, [x11]
    d198:	ldrb	w12, [x2]
    d19c:	cmp	w11, w12
    d1a0:	mov	x11, xzr
    d1a4:	b.ne	d1f4 <lzma_mf_is_supported@@XZ_5.0+0x224>  // b.any
    d1a8:	cmp	w0, #0x3
    d1ac:	b.cc	d238 <lzma_mf_is_supported@@XZ_5.0+0x268>  // b.lo, b.ul, b.last
    d1b0:	add	x8, x8, x10
    d1b4:	sub	x13, x11, w9, uxtw
    d1b8:	add	x8, x8, #0x2
    d1bc:	mov	x12, xzr
    d1c0:	sub	w11, w0, #0x2
    d1c4:	add	x10, x8, x13
    d1c8:	ldrb	w13, [x10, x12]
    d1cc:	ldrb	w14, [x8, x12]
    d1d0:	cmp	w13, w14
    d1d4:	b.ne	d240 <lzma_mf_is_supported@@XZ_5.0+0x270>  // b.any
    d1d8:	add	x12, x12, #0x1
    d1dc:	cmp	w11, w12
    d1e0:	b.ne	d1c8 <lzma_mf_is_supported@@XZ_5.0+0x1f8>  // b.any
    d1e4:	sub	w8, w9, #0x1
    d1e8:	stp	w0, w8, [x20]
    d1ec:	b	d254 <lzma_mf_is_supported@@XZ_5.0+0x284>
    d1f0:	mov	x11, xzr
    d1f4:	mov	w8, #0x2                   	// #2
    d1f8:	ldr	w4, [x19, #92]
    d1fc:	ldr	x5, [x19, #72]
    d200:	ldr	w6, [x19, #80]
    d204:	add	x9, x20, x11, lsl #3
    d208:	str	w8, [sp, #8]
    d20c:	str	x9, [sp]
    d210:	bl	d31c <lzma_mf_is_supported@@XZ_5.0+0x34c>
    d214:	sub	x8, x0, x20
    d218:	mov	x0, x19
    d21c:	lsr	x20, x8, #3
    d220:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    d224:	mov	w0, w20
    d228:	ldp	x20, x19, [sp, #32]
    d22c:	ldp	x29, x30, [sp, #16]
    d230:	add	sp, sp, #0x30
    d234:	ret
    d238:	mov	w8, #0x2                   	// #2
    d23c:	b	d244 <lzma_mf_is_supported@@XZ_5.0+0x274>
    d240:	add	w8, w12, #0x2
    d244:	sub	w9, w9, #0x1
    d248:	cmp	w8, w0
    d24c:	stp	w8, w9, [x20]
    d250:	b.ne	d270 <lzma_mf_is_supported@@XZ_5.0+0x2a0>  // b.any
    d254:	ldr	x8, [x19, #72]
    d258:	ldr	w9, [x19, #80]
    d25c:	mov	x0, x19
    d260:	str	w3, [x8, x9, lsl #2]
    d264:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    d268:	mov	w20, #0x1                   	// #1
    d26c:	b	d224 <lzma_mf_is_supported@@XZ_5.0+0x254>
    d270:	mov	w11, #0x1                   	// #1
    d274:	b	d1f8 <lzma_mf_is_supported@@XZ_5.0+0x228>
    d278:	ldp	w9, w8, [x0, #80]
    d27c:	ldp	w11, w10, [x0, #20]
    d280:	add	w12, w9, #0x1
    d284:	add	w10, w10, #0x1
    d288:	cmp	w12, w8
    d28c:	add	w11, w11, w10
    d290:	csinc	w9, wzr, w9, eq  // eq = none
    d294:	cmn	w11, #0x1
    d298:	str	w9, [x0, #80]
    d29c:	str	w10, [x0, #24]
    d2a0:	b.eq	d2a8 <lzma_mf_is_supported@@XZ_5.0+0x2d8>  // b.none
    d2a4:	ret
    d2a8:	ldr	w9, [x0, #108]
    d2ac:	mvn	w8, w8
    d2b0:	cbz	w9, d2dc <lzma_mf_is_supported@@XZ_5.0+0x30c>
    d2b4:	ldr	x9, [x0, #64]
    d2b8:	mov	x10, xzr
    d2bc:	ldr	w11, [x9, x10, lsl #2]
    d2c0:	subs	w11, w11, w8
    d2c4:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
    d2c8:	str	w11, [x9, x10, lsl #2]
    d2cc:	ldr	w11, [x0, #108]
    d2d0:	add	x10, x10, #0x1
    d2d4:	cmp	x10, x11
    d2d8:	b.cc	d2bc <lzma_mf_is_supported@@XZ_5.0+0x2ec>  // b.lo, b.ul, b.last
    d2dc:	ldr	w9, [x0, #112]
    d2e0:	cbz	w9, d30c <lzma_mf_is_supported@@XZ_5.0+0x33c>
    d2e4:	ldr	x9, [x0, #72]
    d2e8:	mov	x10, xzr
    d2ec:	ldr	w11, [x9, x10, lsl #2]
    d2f0:	subs	w11, w11, w8
    d2f4:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
    d2f8:	str	w11, [x9, x10, lsl #2]
    d2fc:	ldr	w11, [x0, #112]
    d300:	add	x10, x10, #0x1
    d304:	cmp	x10, x11
    d308:	b.cc	d2ec <lzma_mf_is_supported@@XZ_5.0+0x31c>  // b.lo, b.ul, b.last
    d30c:	ldr	w9, [x0, #20]
    d310:	sub	w8, w9, w8
    d314:	str	w8, [x0, #20]
    d318:	ret
    d31c:	mov	w8, w0
    d320:	ldr	x0, [sp]
    d324:	str	w3, [x5, w6, uxtw #2]
    d328:	cbz	w4, d3ec <lzma_mf_is_supported@@XZ_5.0+0x41c>
    d32c:	sub	w10, w1, w3
    d330:	cmp	w10, w7
    d334:	b.cs	d3ec <lzma_mf_is_supported@@XZ_5.0+0x41c>  // b.hs, b.nlast
    d338:	ldr	w11, [sp, #8]
    d33c:	mov	w9, w8
    d340:	subs	w12, w6, w10
    d344:	sub	x13, x2, w10, uxtw
    d348:	csel	w14, w7, wzr, cc  // cc = lo, ul, last
    d34c:	ldrb	w15, [x13, w11, uxtw]
    d350:	ldrb	w16, [x2, w11, uxtw]
    d354:	add	w12, w12, w14
    d358:	ldr	w12, [x5, w12, uxtw #2]
    d35c:	cmp	w15, w16
    d360:	b.ne	d3d0 <lzma_mf_is_supported@@XZ_5.0+0x400>  // b.any
    d364:	ldrb	w13, [x13]
    d368:	ldrb	w14, [x2]
    d36c:	cmp	w13, w14
    d370:	b.ne	d3d0 <lzma_mf_is_supported@@XZ_5.0+0x400>  // b.any
    d374:	cmp	w8, #0x2
    d378:	b.cc	d3b0 <lzma_mf_is_supported@@XZ_5.0+0x3e0>  // b.lo, b.ul, b.last
    d37c:	mov	x13, xzr
    d380:	sub	x13, x13, w10, uxtw
    d384:	add	x14, x2, x13
    d388:	mov	w13, #0x1                   	// #1
    d38c:	ldrb	w15, [x14, x13]
    d390:	ldrb	w16, [x2, x13]
    d394:	cmp	w15, w16
    d398:	b.ne	d3b4 <lzma_mf_is_supported@@XZ_5.0+0x3e4>  // b.any
    d39c:	add	x13, x13, #0x1
    d3a0:	cmp	w9, w13
    d3a4:	b.ne	d38c <lzma_mf_is_supported@@XZ_5.0+0x3bc>  // b.any
    d3a8:	mov	w13, w9
    d3ac:	b	d3b4 <lzma_mf_is_supported@@XZ_5.0+0x3e4>
    d3b0:	mov	w13, #0x1                   	// #1
    d3b4:	cmp	w11, w13
    d3b8:	b.cs	d3d0 <lzma_mf_is_supported@@XZ_5.0+0x400>  // b.hs, b.nlast
    d3bc:	sub	w10, w10, #0x1
    d3c0:	cmp	w13, w8
    d3c4:	stp	w13, w10, [x0], #8
    d3c8:	b.ne	d3d4 <lzma_mf_is_supported@@XZ_5.0+0x404>  // b.any
    d3cc:	b	d3ec <lzma_mf_is_supported@@XZ_5.0+0x41c>
    d3d0:	mov	w13, w11
    d3d4:	sub	w4, w4, #0x1
    d3d8:	cbz	w4, d3ec <lzma_mf_is_supported@@XZ_5.0+0x41c>
    d3dc:	sub	w10, w1, w12
    d3e0:	cmp	w10, w7
    d3e4:	mov	w11, w13
    d3e8:	b.cc	d340 <lzma_mf_is_supported@@XZ_5.0+0x370>  // b.lo, b.ul, b.last
    d3ec:	ret
    d3f0:	stp	x29, x30, [sp, #-48]!
    d3f4:	str	x21, [sp, #16]
    d3f8:	stp	x20, x19, [sp, #32]
    d3fc:	adrp	x21, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    d400:	ldr	x21, [x21, #3952]
    d404:	mov	w19, w1
    d408:	mov	x20, x0
    d40c:	mov	x29, sp
    d410:	ldr	w9, [x20, #36]
    d414:	ldr	w8, [x20, #24]
    d418:	sub	w9, w9, w8
    d41c:	cmp	w9, #0x2
    d420:	b.hi	d43c <lzma_mf_is_supported@@XZ_5.0+0x46c>  // b.pmore
    d424:	ldr	w9, [x20, #40]
    d428:	add	w8, w8, #0x1
    d42c:	str	w8, [x20, #24]
    d430:	add	w8, w9, #0x1
    d434:	str	w8, [x20, #40]
    d438:	b	d498 <lzma_mf_is_supported@@XZ_5.0+0x4c8>
    d43c:	ldr	x9, [x20]
    d440:	ldr	w11, [x20, #20]
    d444:	mov	x0, x20
    d448:	add	x9, x9, x8
    d44c:	ldrb	w10, [x9]
    d450:	ldrb	w12, [x9, #1]
    d454:	ldrb	w9, [x9, #2]
    d458:	add	w8, w11, w8
    d45c:	ldr	w10, [x21, x10, lsl #2]
    d460:	ldr	w11, [x20, #88]
    d464:	eor	w10, w10, w12
    d468:	ldr	x12, [x20, #64]
    d46c:	eor	w9, w10, w9, lsl #8
    d470:	and	w9, w9, w11
    d474:	and	w10, w10, #0x3ff
    d478:	add	w9, w9, #0x400
    d47c:	ldr	w11, [x12, w9, uxtw #2]
    d480:	str	w8, [x12, w10, uxtw #2]
    d484:	str	w8, [x12, w9, uxtw #2]
    d488:	ldr	x8, [x20, #72]
    d48c:	ldr	w9, [x20, #80]
    d490:	str	w11, [x8, x9, lsl #2]
    d494:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    d498:	subs	w19, w19, #0x1
    d49c:	b.ne	d410 <lzma_mf_is_supported@@XZ_5.0+0x440>  // b.any
    d4a0:	ldp	x20, x19, [sp, #32]
    d4a4:	ldr	x21, [sp, #16]
    d4a8:	ldp	x29, x30, [sp], #48
    d4ac:	ret
    d4b0:	sub	sp, sp, #0x40
    d4b4:	stp	x29, x30, [sp, #16]
    d4b8:	stp	x20, x19, [sp, #48]
    d4bc:	ldr	w9, [x0, #36]
    d4c0:	ldr	w8, [x0, #24]
    d4c4:	mov	x19, x0
    d4c8:	ldr	w0, [x0, #96]
    d4cc:	mov	x20, x1
    d4d0:	sub	w9, w9, w8
    d4d4:	str	x21, [sp, #32]
    d4d8:	cmp	w0, w9
    d4dc:	add	x29, sp, #0x10
    d4e0:	b.ls	d50c <lzma_mf_is_supported@@XZ_5.0+0x53c>  // b.plast
    d4e4:	cmp	w9, #0x3
    d4e8:	mov	w0, w9
    d4ec:	b.hi	d50c <lzma_mf_is_supported@@XZ_5.0+0x53c>  // b.pmore
    d4f0:	ldr	w9, [x19, #40]
    d4f4:	add	w8, w8, #0x1
    d4f8:	str	w8, [x19, #24]
    d4fc:	mov	w21, wzr
    d500:	add	w8, w9, #0x1
    d504:	str	w8, [x19, #40]
    d508:	b	d6bc <lzma_mf_is_supported@@XZ_5.0+0x6ec>
    d50c:	ldr	x9, [x19]
    d510:	adrp	x11, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    d514:	ldr	w10, [x19, #20]
    d518:	ldr	x11, [x11, #3952]
    d51c:	add	x2, x9, x8
    d520:	ldrb	w13, [x2]
    d524:	ldrb	w17, [x2, #3]
    d528:	ldrb	w14, [x2, #1]
    d52c:	add	w1, w10, w8
    d530:	ldr	w13, [x11, x13, lsl #2]
    d534:	ldrb	w10, [x2, #2]
    d538:	ldr	w11, [x11, x17, lsl #2]
    d53c:	ldr	w12, [x19, #88]
    d540:	eor	w13, w13, w14
    d544:	ldr	x15, [x19, #64]
    d548:	eor	w10, w13, w10, lsl #8
    d54c:	mov	w16, #0x400                 	// #1024
    d550:	and	w17, w13, #0x3ff
    d554:	and	w13, w10, #0xffff
    d558:	eor	w10, w10, w11, lsl #5
    d55c:	movk	w16, #0x1, lsl #16
    d560:	and	w10, w10, w12
    d564:	add	w11, w13, #0x400
    d568:	add	w10, w10, w16
    d56c:	ldr	w14, [x15, w17, uxtw #2]
    d570:	ldr	w13, [x15, w11, uxtw #2]
    d574:	ldr	w3, [x15, w10, uxtw #2]
    d578:	str	w1, [x15, w17, uxtw #2]
    d57c:	str	w1, [x15, w11, uxtw #2]
    d580:	str	w1, [x15, w10, uxtw #2]
    d584:	ldr	w7, [x19, #84]
    d588:	sub	w11, w1, w14
    d58c:	cmp	w11, w7
    d590:	b.cs	d5bc <lzma_mf_is_supported@@XZ_5.0+0x5ec>  // b.hs, b.nlast
    d594:	sub	x10, x2, w11, uxtw
    d598:	ldrb	w10, [x10]
    d59c:	ldrb	w12, [x2]
    d5a0:	cmp	w10, w12
    d5a4:	b.ne	d5bc <lzma_mf_is_supported@@XZ_5.0+0x5ec>  // b.any
    d5a8:	mov	w10, #0x2                   	// #2
    d5ac:	sub	w12, w11, #0x1
    d5b0:	stp	w10, w12, [x20]
    d5b4:	mov	w12, #0x1                   	// #1
    d5b8:	b	d5c4 <lzma_mf_is_supported@@XZ_5.0+0x5f4>
    d5bc:	mov	w12, wzr
    d5c0:	mov	w10, #0x1                   	// #1
    d5c4:	cmp	w13, w14
    d5c8:	b.eq	d60c <lzma_mf_is_supported@@XZ_5.0+0x63c>  // b.none
    d5cc:	sub	w13, w1, w13
    d5d0:	cmp	w13, w7
    d5d4:	b.cs	d60c <lzma_mf_is_supported@@XZ_5.0+0x63c>  // b.hs, b.nlast
    d5d8:	sub	x14, x2, w13, uxtw
    d5dc:	ldrb	w14, [x14]
    d5e0:	ldrb	w15, [x2]
    d5e4:	cmp	w14, w15
    d5e8:	b.ne	d60c <lzma_mf_is_supported@@XZ_5.0+0x63c>  // b.any
    d5ec:	mov	x10, xzr
    d5f0:	sub	x11, x10, w13, uxtw
    d5f4:	sub	w10, w13, #0x1
    d5f8:	add	w21, w12, #0x1
    d5fc:	add	x12, x20, w12, uxtw #3
    d600:	str	w10, [x12, #4]
    d604:	mov	w10, #0x3                   	// #3
    d608:	b	d61c <lzma_mf_is_supported@@XZ_5.0+0x64c>
    d60c:	cbz	w12, d680 <lzma_mf_is_supported@@XZ_5.0+0x6b0>
    d610:	mov	x12, xzr
    d614:	sub	x11, x12, w11, uxtw
    d618:	mov	w21, #0x1                   	// #1
    d61c:	cmp	w10, w0
    d620:	b.cs	d65c <lzma_mf_is_supported@@XZ_5.0+0x68c>  // b.hs, b.nlast
    d624:	add	x8, x10, x8
    d628:	add	x8, x9, x8
    d62c:	ldrb	w9, [x8, x11]
    d630:	ldrb	w12, [x8]
    d634:	cmp	w9, w12
    d638:	b.ne	d65c <lzma_mf_is_supported@@XZ_5.0+0x68c>  // b.any
    d63c:	add	w10, w10, #0x1
    d640:	cmp	w0, w10
    d644:	add	x8, x8, #0x1
    d648:	b.ne	d62c <lzma_mf_is_supported@@XZ_5.0+0x65c>  // b.any
    d64c:	sub	w8, w21, #0x1
    d650:	lsl	x8, x8, #3
    d654:	str	w0, [x20, x8]
    d658:	b	d670 <lzma_mf_is_supported@@XZ_5.0+0x6a0>
    d65c:	sub	w8, w21, #0x1
    d660:	lsl	x8, x8, #3
    d664:	cmp	w10, w0
    d668:	str	w10, [x20, x8]
    d66c:	b.ne	d684 <lzma_mf_is_supported@@XZ_5.0+0x6b4>  // b.any
    d670:	ldr	x8, [x19, #72]
    d674:	ldr	w9, [x19, #80]
    d678:	str	w3, [x8, x9, lsl #2]
    d67c:	b	d6b4 <lzma_mf_is_supported@@XZ_5.0+0x6e4>
    d680:	mov	w21, wzr
    d684:	ldr	w4, [x19, #92]
    d688:	ldr	x5, [x19, #72]
    d68c:	ldr	w6, [x19, #80]
    d690:	cmp	w10, #0x3
    d694:	mov	w8, #0x3                   	// #3
    d698:	csel	w8, w10, w8, hi  // hi = pmore
    d69c:	add	x9, x20, w21, uxtw #3
    d6a0:	str	w8, [sp, #8]
    d6a4:	str	x9, [sp]
    d6a8:	bl	d31c <lzma_mf_is_supported@@XZ_5.0+0x34c>
    d6ac:	sub	x8, x0, x20
    d6b0:	lsr	x21, x8, #3
    d6b4:	mov	x0, x19
    d6b8:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    d6bc:	mov	w0, w21
    d6c0:	ldp	x20, x19, [sp, #48]
    d6c4:	ldr	x21, [sp, #32]
    d6c8:	ldp	x29, x30, [sp, #16]
    d6cc:	add	sp, sp, #0x40
    d6d0:	ret
    d6d4:	stp	x29, x30, [sp, #-48]!
    d6d8:	stp	x22, x21, [sp, #16]
    d6dc:	stp	x20, x19, [sp, #32]
    d6e0:	adrp	x21, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    d6e4:	ldr	x21, [x21, #3952]
    d6e8:	mov	w22, #0x400                 	// #1024
    d6ec:	mov	w19, w1
    d6f0:	mov	x20, x0
    d6f4:	movk	w22, #0x1, lsl #16
    d6f8:	mov	x29, sp
    d6fc:	ldr	w9, [x20, #36]
    d700:	ldr	w8, [x20, #24]
    d704:	sub	w9, w9, w8
    d708:	cmp	w9, #0x3
    d70c:	b.hi	d728 <lzma_mf_is_supported@@XZ_5.0+0x758>  // b.pmore
    d710:	ldr	w9, [x20, #40]
    d714:	add	w8, w8, #0x1
    d718:	str	w8, [x20, #24]
    d71c:	add	w8, w9, #0x1
    d720:	str	w8, [x20, #40]
    d724:	b	d79c <lzma_mf_is_supported@@XZ_5.0+0x7cc>
    d728:	ldr	x9, [x20]
    d72c:	ldr	w10, [x20, #20]
    d730:	ldr	w13, [x20, #88]
    d734:	mov	x0, x20
    d738:	add	x9, x9, x8
    d73c:	ldrb	w11, [x9]
    d740:	ldrb	w12, [x9, #3]
    d744:	add	w8, w10, w8
    d748:	ldrb	w10, [x9, #1]
    d74c:	ldr	w11, [x21, x11, lsl #2]
    d750:	ldrb	w9, [x9, #2]
    d754:	ldr	w12, [x21, x12, lsl #2]
    d758:	eor	w10, w11, w10
    d75c:	ldr	x11, [x20, #64]
    d760:	eor	w9, w10, w9, lsl #8
    d764:	eor	w12, w9, w12, lsl #5
    d768:	and	w9, w9, #0xffff
    d76c:	and	w12, w12, w13
    d770:	and	w10, w10, #0x3ff
    d774:	add	w9, w9, #0x400
    d778:	add	w12, w12, w22
    d77c:	ldr	w13, [x11, w12, uxtw #2]
    d780:	str	w8, [x11, w10, uxtw #2]
    d784:	str	w8, [x11, w9, uxtw #2]
    d788:	str	w8, [x11, w12, uxtw #2]
    d78c:	ldr	x8, [x20, #72]
    d790:	ldr	w9, [x20, #80]
    d794:	str	w13, [x8, x9, lsl #2]
    d798:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    d79c:	subs	w19, w19, #0x1
    d7a0:	b.ne	d6fc <lzma_mf_is_supported@@XZ_5.0+0x72c>  // b.any
    d7a4:	ldp	x20, x19, [sp, #32]
    d7a8:	ldp	x22, x21, [sp, #16]
    d7ac:	ldp	x29, x30, [sp], #48
    d7b0:	ret
    d7b4:	sub	sp, sp, #0x30
    d7b8:	stp	x29, x30, [sp, #16]
    d7bc:	stp	x20, x19, [sp, #32]
    d7c0:	ldr	w9, [x0, #36]
    d7c4:	ldr	w8, [x0, #24]
    d7c8:	mov	x19, x0
    d7cc:	ldr	w0, [x0, #96]
    d7d0:	mov	x20, x1
    d7d4:	sub	w9, w9, w8
    d7d8:	add	x29, sp, #0x10
    d7dc:	cmp	w0, w9
    d7e0:	b.ls	d818 <lzma_mf_is_supported@@XZ_5.0+0x848>  // b.plast
    d7e4:	cmp	w9, #0x2
    d7e8:	b.cc	d7fc <lzma_mf_is_supported@@XZ_5.0+0x82c>  // b.lo, b.ul, b.last
    d7ec:	ldr	w10, [x19, #104]
    d7f0:	mov	w0, w9
    d7f4:	cmp	w10, #0x1
    d7f8:	b.ne	d818 <lzma_mf_is_supported@@XZ_5.0+0x848>  // b.any
    d7fc:	ldr	w9, [x19, #40]
    d800:	add	w8, w8, #0x1
    d804:	str	w8, [x19, #24]
    d808:	mov	w20, wzr
    d80c:	add	w8, w9, #0x1
    d810:	str	w8, [x19, #40]
    d814:	b	d870 <lzma_mf_is_supported@@XZ_5.0+0x8a0>
    d818:	ldr	x9, [x19]
    d81c:	ldr	w10, [x19, #20]
    d820:	ldr	x12, [x19, #64]
    d824:	add	x2, x9, x8
    d828:	ldrb	w9, [x2]
    d82c:	ldrb	w11, [x2, #1]
    d830:	add	w1, w10, w8
    d834:	lsl	x8, x9, #2
    d838:	bfi	x8, x11, #10, #8
    d83c:	ldr	w3, [x12, x8]
    d840:	str	w1, [x12, x8]
    d844:	ldr	w4, [x19, #92]
    d848:	ldr	x5, [x19, #72]
    d84c:	ldp	w6, w7, [x19, #80]
    d850:	mov	w8, #0x1                   	// #1
    d854:	str	w8, [sp, #8]
    d858:	str	x20, [sp]
    d85c:	bl	d884 <lzma_mf_is_supported@@XZ_5.0+0x8b4>
    d860:	sub	x8, x0, x20
    d864:	mov	x0, x19
    d868:	lsr	x20, x8, #3
    d86c:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    d870:	mov	w0, w20
    d874:	ldp	x20, x19, [sp, #32]
    d878:	ldp	x29, x30, [sp, #16]
    d87c:	add	sp, sp, #0x30
    d880:	ret
    d884:	str	x21, [sp, #-32]!
    d888:	mov	w8, w0
    d88c:	ldr	x0, [sp, #32]
    d890:	lsl	w9, w6, #1
    d894:	add	x9, x5, w9, uxtw #2
    d898:	add	x10, x9, #0x4
    d89c:	stp	x20, x19, [sp, #16]
    d8a0:	cbz	w4, d990 <lzma_mf_is_supported@@XZ_5.0+0x9c0>
    d8a4:	sub	w14, w1, w3
    d8a8:	cmp	w14, w7
    d8ac:	b.cs	d990 <lzma_mf_is_supported@@XZ_5.0+0x9c0>  // b.hs, b.nlast
    d8b0:	ldr	w12, [sp, #40]
    d8b4:	mov	w11, wzr
    d8b8:	mov	w13, wzr
    d8bc:	subs	w15, w6, w14
    d8c0:	csel	w18, w7, wzr, cc  // cc = lo, ul, last
    d8c4:	cmp	w13, w11
    d8c8:	sub	x17, x2, w14, uxtw
    d8cc:	csel	w16, w13, w11, cc  // cc = lo, ul, last
    d8d0:	ldrb	w19, [x17, w16, uxtw]
    d8d4:	ldrb	w20, [x2, w16, uxtw]
    d8d8:	add	w15, w15, w18
    d8dc:	lsl	w15, w15, #1
    d8e0:	add	x15, x5, w15, uxtw #2
    d8e4:	cmp	w19, w20
    d8e8:	b.ne	d944 <lzma_mf_is_supported@@XZ_5.0+0x974>  // b.any
    d8ec:	add	w16, w16, #0x1
    d8f0:	cmp	w16, w8
    d8f4:	b.cs	d928 <lzma_mf_is_supported@@XZ_5.0+0x958>  // b.hs, b.nlast
    d8f8:	mov	x18, xzr
    d8fc:	sub	x18, x18, w14, uxtw
    d900:	add	x19, x2, w16, uxtw
    d904:	ldrb	w20, [x19, x18]
    d908:	ldrb	w21, [x19]
    d90c:	cmp	w20, w21
    d910:	b.ne	d928 <lzma_mf_is_supported@@XZ_5.0+0x958>  // b.any
    d914:	add	w16, w16, #0x1
    d918:	cmp	w8, w16
    d91c:	add	x19, x19, #0x1
    d920:	b.ne	d904 <lzma_mf_is_supported@@XZ_5.0+0x934>  // b.any
    d924:	mov	w16, w8
    d928:	cmp	w12, w16
    d92c:	b.cs	d944 <lzma_mf_is_supported@@XZ_5.0+0x974>  // b.hs, b.nlast
    d930:	sub	w12, w14, #0x1
    d934:	cmp	w16, w8
    d938:	stp	w16, w12, [x0], #8
    d93c:	b.eq	d9a4 <lzma_mf_is_supported@@XZ_5.0+0x9d4>  // b.none
    d940:	mov	w12, w16
    d944:	ldrb	w14, [x17, w16, uxtw]
    d948:	ldrb	w17, [x2, w16, uxtw]
    d94c:	sub	w4, w4, #0x1
    d950:	cmp	w14, w17
    d954:	b.cs	d970 <lzma_mf_is_supported@@XZ_5.0+0x9a0>  // b.hs, b.nlast
    d958:	str	w3, [x9]
    d95c:	add	x9, x15, #0x4
    d960:	mov	w11, w16
    d964:	mov	x15, x9
    d968:	cbnz	w4, d980 <lzma_mf_is_supported@@XZ_5.0+0x9b0>
    d96c:	b	d990 <lzma_mf_is_supported@@XZ_5.0+0x9c0>
    d970:	str	w3, [x10]
    d974:	mov	x10, x15
    d978:	mov	w13, w16
    d97c:	cbz	w4, d990 <lzma_mf_is_supported@@XZ_5.0+0x9c0>
    d980:	ldr	w3, [x15]
    d984:	sub	w14, w1, w3
    d988:	cmp	w14, w7
    d98c:	b.cc	d8bc <lzma_mf_is_supported@@XZ_5.0+0x8ec>  // b.lo, b.ul, b.last
    d990:	str	wzr, [x10]
    d994:	str	wzr, [x9]
    d998:	ldp	x20, x19, [sp, #16]
    d99c:	ldr	x21, [sp], #32
    d9a0:	ret
    d9a4:	ldr	w8, [x15]
    d9a8:	str	w8, [x9]
    d9ac:	ldr	w8, [x15, #4]
    d9b0:	str	w8, [x10]
    d9b4:	b	d998 <lzma_mf_is_supported@@XZ_5.0+0x9c8>
    d9b8:	stp	x29, x30, [sp, #-32]!
    d9bc:	stp	x20, x19, [sp, #16]
    d9c0:	mov	w19, w1
    d9c4:	mov	x20, x0
    d9c8:	mov	x29, sp
    d9cc:	ldr	w9, [x20, #36]
    d9d0:	ldr	w8, [x20, #24]
    d9d4:	ldr	w0, [x20, #96]
    d9d8:	sub	w9, w9, w8
    d9dc:	cmp	w0, w9
    d9e0:	b.ls	da14 <lzma_mf_is_supported@@XZ_5.0+0xa44>  // b.plast
    d9e4:	cmp	w9, #0x2
    d9e8:	b.cc	d9fc <lzma_mf_is_supported@@XZ_5.0+0xa2c>  // b.lo, b.ul, b.last
    d9ec:	ldr	w10, [x20, #104]
    d9f0:	mov	w0, w9
    d9f4:	cmp	w10, #0x1
    d9f8:	b.ne	da14 <lzma_mf_is_supported@@XZ_5.0+0xa44>  // b.any
    d9fc:	ldr	w9, [x20, #40]
    da00:	add	w8, w8, #0x1
    da04:	str	w8, [x20, #24]
    da08:	add	w8, w9, #0x1
    da0c:	str	w8, [x20, #40]
    da10:	b	da58 <lzma_mf_is_supported@@XZ_5.0+0xa88>
    da14:	ldr	x9, [x20]
    da18:	ldr	w10, [x20, #20]
    da1c:	ldr	x12, [x20, #64]
    da20:	add	x2, x9, x8
    da24:	ldrb	w9, [x2]
    da28:	ldrb	w11, [x2, #1]
    da2c:	add	w1, w10, w8
    da30:	lsl	x8, x9, #2
    da34:	bfi	x8, x11, #10, #8
    da38:	ldr	w3, [x12, x8]
    da3c:	str	w1, [x12, x8]
    da40:	ldr	w4, [x20, #92]
    da44:	ldr	x5, [x20, #72]
    da48:	ldp	w6, w7, [x20, #80]
    da4c:	bl	da6c <lzma_mf_is_supported@@XZ_5.0+0xa9c>
    da50:	mov	x0, x20
    da54:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    da58:	subs	w19, w19, #0x1
    da5c:	b.ne	d9cc <lzma_mf_is_supported@@XZ_5.0+0x9fc>  // b.any
    da60:	ldp	x20, x19, [sp, #16]
    da64:	ldp	x29, x30, [sp], #32
    da68:	ret
    da6c:	str	x19, [sp, #-16]!
    da70:	lsl	w8, w6, #1
    da74:	add	x8, x5, w8, uxtw #2
    da78:	add	x9, x8, #0x4
    da7c:	cbz	w4, db58 <lzma_mf_is_supported@@XZ_5.0+0xb88>
    da80:	sub	w15, w1, w3
    da84:	cmp	w15, w7
    da88:	b.cs	db58 <lzma_mf_is_supported@@XZ_5.0+0xb88>  // b.hs, b.nlast
    da8c:	mov	w12, wzr
    da90:	mov	w11, wzr
    da94:	mov	w10, w0
    da98:	subs	w13, w6, w15
    da9c:	csel	w19, w7, wzr, cc  // cc = lo, ul, last
    daa0:	cmp	w11, w12
    daa4:	sub	x16, x2, w15, uxtw
    daa8:	csel	w14, w11, w12, cc  // cc = lo, ul, last
    daac:	ldrb	w17, [x16, w14, uxtw]
    dab0:	ldrb	w18, [x2, w14, uxtw]
    dab4:	add	w13, w13, w19
    dab8:	lsl	w13, w13, #1
    dabc:	add	x13, x5, w13, uxtw #2
    dac0:	cmp	w17, w18
    dac4:	b.ne	db14 <lzma_mf_is_supported@@XZ_5.0+0xb44>  // b.any
    dac8:	add	w14, w14, #0x1
    dacc:	cmp	w14, w0
    dad0:	b.cs	db04 <lzma_mf_is_supported@@XZ_5.0+0xb34>  // b.hs, b.nlast
    dad4:	mov	x17, xzr
    dad8:	sub	x15, x17, w15, uxtw
    dadc:	mov	w14, w14
    dae0:	add	x15, x2, x15
    dae4:	ldrb	w17, [x15, x14]
    dae8:	ldrb	w18, [x2, x14]
    daec:	cmp	w17, w18
    daf0:	b.ne	db04 <lzma_mf_is_supported@@XZ_5.0+0xb34>  // b.any
    daf4:	add	x14, x14, #0x1
    daf8:	cmp	w10, w14
    dafc:	b.ne	dae4 <lzma_mf_is_supported@@XZ_5.0+0xb14>  // b.any
    db00:	b	db64 <lzma_mf_is_supported@@XZ_5.0+0xb94>
    db04:	cmp	w14, w0
    db08:	b.eq	db64 <lzma_mf_is_supported@@XZ_5.0+0xb94>  // b.none
    db0c:	ldrb	w17, [x16, w14, uxtw]
    db10:	ldrb	w18, [x2, w14, uxtw]
    db14:	cmp	w17, w18
    db18:	sub	w4, w4, #0x1
    db1c:	b.cs	db38 <lzma_mf_is_supported@@XZ_5.0+0xb68>  // b.hs, b.nlast
    db20:	str	w3, [x8]
    db24:	add	x8, x13, #0x4
    db28:	mov	w12, w14
    db2c:	mov	x13, x8
    db30:	cbnz	w4, db48 <lzma_mf_is_supported@@XZ_5.0+0xb78>
    db34:	b	db58 <lzma_mf_is_supported@@XZ_5.0+0xb88>
    db38:	str	w3, [x9]
    db3c:	mov	w11, w14
    db40:	mov	x9, x13
    db44:	cbz	w4, db58 <lzma_mf_is_supported@@XZ_5.0+0xb88>
    db48:	ldr	w3, [x13]
    db4c:	sub	w15, w1, w3
    db50:	cmp	w15, w7
    db54:	b.cc	da98 <lzma_mf_is_supported@@XZ_5.0+0xac8>  // b.lo, b.ul, b.last
    db58:	str	wzr, [x9]
    db5c:	str	wzr, [x8]
    db60:	b	db74 <lzma_mf_is_supported@@XZ_5.0+0xba4>
    db64:	ldr	w10, [x13]
    db68:	str	w10, [x8]
    db6c:	ldr	w8, [x13, #4]
    db70:	str	w8, [x9]
    db74:	ldr	x19, [sp], #16
    db78:	ret
    db7c:	sub	sp, sp, #0x30
    db80:	stp	x29, x30, [sp, #16]
    db84:	stp	x20, x19, [sp, #32]
    db88:	ldr	w9, [x0, #36]
    db8c:	ldr	w8, [x0, #24]
    db90:	mov	x19, x0
    db94:	ldr	w0, [x0, #96]
    db98:	mov	x20, x1
    db9c:	sub	w9, w9, w8
    dba0:	add	x29, sp, #0x10
    dba4:	cmp	w0, w9
    dba8:	b.ls	dbe0 <lzma_mf_is_supported@@XZ_5.0+0xc10>  // b.plast
    dbac:	cmp	w9, #0x3
    dbb0:	b.cc	dbc4 <lzma_mf_is_supported@@XZ_5.0+0xbf4>  // b.lo, b.ul, b.last
    dbb4:	ldr	w10, [x19, #104]
    dbb8:	mov	w0, w9
    dbbc:	cmp	w10, #0x1
    dbc0:	b.ne	dbe0 <lzma_mf_is_supported@@XZ_5.0+0xc10>  // b.any
    dbc4:	ldr	w9, [x19, #40]
    dbc8:	add	w8, w8, #0x1
    dbcc:	str	w8, [x19, #24]
    dbd0:	mov	w20, wzr
    dbd4:	add	w8, w9, #0x1
    dbd8:	str	w8, [x19, #40]
    dbdc:	b	dcc4 <lzma_mf_is_supported@@XZ_5.0+0xcf4>
    dbe0:	ldr	x9, [x19]
    dbe4:	adrp	x11, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    dbe8:	ldr	w10, [x19, #20]
    dbec:	add	x2, x9, x8
    dbf0:	ldrb	w9, [x2]
    dbf4:	ldr	x11, [x11, #3952]
    dbf8:	ldrb	w13, [x2, #1]
    dbfc:	add	w1, w10, w8
    dc00:	ldrb	w8, [x2, #2]
    dc04:	ldr	w9, [x11, x9, lsl #2]
    dc08:	ldr	w12, [x19, #88]
    dc0c:	ldr	x10, [x19, #64]
    dc10:	eor	w9, w9, w13
    dc14:	eor	w8, w9, w8, lsl #8
    dc18:	and	w8, w8, w12
    dc1c:	and	w11, w9, #0x3ff
    dc20:	add	w8, w8, #0x400
    dc24:	ldr	w9, [x10, w11, uxtw #2]
    dc28:	ldr	w3, [x10, w8, uxtw #2]
    dc2c:	str	w1, [x10, w11, uxtw #2]
    dc30:	str	w1, [x10, w8, uxtw #2]
    dc34:	ldr	w7, [x19, #84]
    dc38:	sub	w9, w1, w9
    dc3c:	cmp	w9, w7
    dc40:	b.cs	dc90 <lzma_mf_is_supported@@XZ_5.0+0xcc0>  // b.hs, b.nlast
    dc44:	sub	x10, x2, w9, uxtw
    dc48:	ldrb	w8, [x10]
    dc4c:	ldrb	w11, [x2]
    dc50:	cmp	w8, w11
    dc54:	b.ne	dc90 <lzma_mf_is_supported@@XZ_5.0+0xcc0>  // b.any
    dc58:	cmp	w0, #0x3
    dc5c:	b.cc	dcd8 <lzma_mf_is_supported@@XZ_5.0+0xd08>  // b.lo, b.ul, b.last
    dc60:	mov	w11, w0
    dc64:	mov	w8, #0x2                   	// #2
    dc68:	ldrb	w12, [x2, x8]
    dc6c:	ldrb	w13, [x10, x8]
    dc70:	cmp	w12, w13
    dc74:	b.ne	dcdc <lzma_mf_is_supported@@XZ_5.0+0xd0c>  // b.any
    dc78:	add	x8, x8, #0x1
    dc7c:	cmp	w11, w8
    dc80:	b.ne	dc68 <lzma_mf_is_supported@@XZ_5.0+0xc98>  // b.any
    dc84:	sub	w8, w9, #0x1
    dc88:	stp	w0, w8, [x20]
    dc8c:	b	dcec <lzma_mf_is_supported@@XZ_5.0+0xd1c>
    dc90:	mov	x9, xzr
    dc94:	mov	w8, #0x2                   	// #2
    dc98:	ldr	w4, [x19, #92]
    dc9c:	ldr	x5, [x19, #72]
    dca0:	ldr	w6, [x19, #80]
    dca4:	add	x9, x20, x9, lsl #3
    dca8:	str	w8, [sp, #8]
    dcac:	str	x9, [sp]
    dcb0:	bl	d884 <lzma_mf_is_supported@@XZ_5.0+0x8b4>
    dcb4:	sub	x8, x0, x20
    dcb8:	mov	x0, x19
    dcbc:	lsr	x20, x8, #3
    dcc0:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    dcc4:	mov	w0, w20
    dcc8:	ldp	x20, x19, [sp, #32]
    dccc:	ldp	x29, x30, [sp, #16]
    dcd0:	add	sp, sp, #0x30
    dcd4:	ret
    dcd8:	mov	w8, #0x2                   	// #2
    dcdc:	sub	w9, w9, #0x1
    dce0:	cmp	w8, w0
    dce4:	stp	w8, w9, [x20]
    dce8:	b.ne	dd0c <lzma_mf_is_supported@@XZ_5.0+0xd3c>  // b.any
    dcec:	ldr	w4, [x19, #92]
    dcf0:	ldr	x5, [x19, #72]
    dcf4:	ldr	w6, [x19, #80]
    dcf8:	bl	da6c <lzma_mf_is_supported@@XZ_5.0+0xa9c>
    dcfc:	mov	x0, x19
    dd00:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    dd04:	mov	w20, #0x1                   	// #1
    dd08:	b	dcc4 <lzma_mf_is_supported@@XZ_5.0+0xcf4>
    dd0c:	mov	w9, #0x1                   	// #1
    dd10:	b	dc98 <lzma_mf_is_supported@@XZ_5.0+0xcc8>
    dd14:	stp	x29, x30, [sp, #-48]!
    dd18:	str	x21, [sp, #16]
    dd1c:	stp	x20, x19, [sp, #32]
    dd20:	adrp	x21, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    dd24:	ldr	x21, [x21, #3952]
    dd28:	mov	w19, w1
    dd2c:	mov	x20, x0
    dd30:	mov	x29, sp
    dd34:	ldr	w9, [x20, #36]
    dd38:	ldr	w8, [x20, #24]
    dd3c:	ldr	w0, [x20, #96]
    dd40:	sub	w9, w9, w8
    dd44:	cmp	w0, w9
    dd48:	b.ls	dd7c <lzma_mf_is_supported@@XZ_5.0+0xdac>  // b.plast
    dd4c:	cmp	w9, #0x3
    dd50:	b.cc	dd64 <lzma_mf_is_supported@@XZ_5.0+0xd94>  // b.lo, b.ul, b.last
    dd54:	ldr	w10, [x20, #104]
    dd58:	mov	w0, w9
    dd5c:	cmp	w10, #0x1
    dd60:	b.ne	dd7c <lzma_mf_is_supported@@XZ_5.0+0xdac>  // b.any
    dd64:	ldr	w9, [x20, #40]
    dd68:	add	w8, w8, #0x1
    dd6c:	str	w8, [x20, #24]
    dd70:	add	w8, w9, #0x1
    dd74:	str	w8, [x20, #40]
    dd78:	b	dddc <lzma_mf_is_supported@@XZ_5.0+0xe0c>
    dd7c:	ldr	x9, [x20]
    dd80:	ldr	w10, [x20, #20]
    dd84:	ldr	w11, [x20, #88]
    dd88:	add	x2, x9, x8
    dd8c:	ldrb	w9, [x2]
    dd90:	ldrb	w12, [x2, #1]
    dd94:	add	w1, w10, w8
    dd98:	ldrb	w8, [x2, #2]
    dd9c:	ldr	w9, [x21, x9, lsl #2]
    dda0:	ldr	x10, [x20, #64]
    dda4:	eor	w9, w9, w12
    dda8:	eor	w8, w9, w8, lsl #8
    ddac:	and	w8, w8, w11
    ddb0:	and	w12, w9, #0x3ff
    ddb4:	add	w8, w8, #0x400
    ddb8:	ldr	w3, [x10, w8, uxtw #2]
    ddbc:	str	w1, [x10, w12, uxtw #2]
    ddc0:	str	w1, [x10, w8, uxtw #2]
    ddc4:	ldr	w4, [x20, #92]
    ddc8:	ldr	x5, [x20, #72]
    ddcc:	ldp	w6, w7, [x20, #80]
    ddd0:	bl	da6c <lzma_mf_is_supported@@XZ_5.0+0xa9c>
    ddd4:	mov	x0, x20
    ddd8:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    dddc:	subs	w19, w19, #0x1
    dde0:	b.ne	dd34 <lzma_mf_is_supported@@XZ_5.0+0xd64>  // b.any
    dde4:	ldp	x20, x19, [sp, #32]
    dde8:	ldr	x21, [sp, #16]
    ddec:	ldp	x29, x30, [sp], #48
    ddf0:	ret
    ddf4:	sub	sp, sp, #0x40
    ddf8:	stp	x29, x30, [sp, #16]
    ddfc:	stp	x20, x19, [sp, #48]
    de00:	ldr	w9, [x0, #36]
    de04:	ldr	w8, [x0, #24]
    de08:	mov	x19, x0
    de0c:	ldr	w0, [x0, #96]
    de10:	mov	x20, x1
    de14:	sub	w9, w9, w8
    de18:	str	x21, [sp, #32]
    de1c:	cmp	w0, w9
    de20:	add	x29, sp, #0x10
    de24:	b.ls	de5c <lzma_mf_is_supported@@XZ_5.0+0xe8c>  // b.plast
    de28:	cmp	w9, #0x4
    de2c:	b.cc	de40 <lzma_mf_is_supported@@XZ_5.0+0xe70>  // b.lo, b.ul, b.last
    de30:	ldr	w10, [x19, #104]
    de34:	mov	w0, w9
    de38:	cmp	w10, #0x1
    de3c:	b.ne	de5c <lzma_mf_is_supported@@XZ_5.0+0xe8c>  // b.any
    de40:	ldr	w9, [x19, #40]
    de44:	add	w8, w8, #0x1
    de48:	str	w8, [x19, #24]
    de4c:	mov	w21, wzr
    de50:	add	w8, w9, #0x1
    de54:	str	w8, [x19, #40]
    de58:	b	e00c <lzma_mf_is_supported@@XZ_5.0+0x103c>
    de5c:	ldr	x9, [x19]
    de60:	adrp	x11, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    de64:	ldr	w10, [x19, #20]
    de68:	ldr	x11, [x11, #3952]
    de6c:	add	x2, x9, x8
    de70:	ldrb	w9, [x2]
    de74:	ldrb	w16, [x2, #3]
    de78:	ldrb	w12, [x2, #1]
    de7c:	add	w1, w10, w8
    de80:	ldr	w9, [x11, x9, lsl #2]
    de84:	ldrb	w8, [x2, #2]
    de88:	ldr	w10, [x11, x16, lsl #2]
    de8c:	ldr	w13, [x19, #88]
    de90:	eor	w9, w9, w12
    de94:	ldr	x14, [x19, #64]
    de98:	eor	w8, w9, w8, lsl #8
    de9c:	mov	w15, #0x400                 	// #1024
    dea0:	and	w16, w9, #0x3ff
    dea4:	and	w9, w8, #0xffff
    dea8:	eor	w8, w8, w10, lsl #5
    deac:	movk	w15, #0x1, lsl #16
    deb0:	and	w8, w8, w13
    deb4:	add	w9, w9, #0x400
    deb8:	add	w8, w8, w15
    debc:	ldr	w12, [x14, w16, uxtw #2]
    dec0:	ldr	w11, [x14, w9, uxtw #2]
    dec4:	ldr	w3, [x14, w8, uxtw #2]
    dec8:	str	w1, [x14, w16, uxtw #2]
    decc:	str	w1, [x14, w9, uxtw #2]
    ded0:	str	w1, [x14, w8, uxtw #2]
    ded4:	ldr	w7, [x19, #84]
    ded8:	sub	w9, w1, w12
    dedc:	cmp	w9, w7
    dee0:	b.cs	df0c <lzma_mf_is_supported@@XZ_5.0+0xf3c>  // b.hs, b.nlast
    dee4:	sub	x8, x2, w9, uxtw
    dee8:	ldrb	w8, [x8]
    deec:	ldrb	w10, [x2]
    def0:	cmp	w8, w10
    def4:	b.ne	df0c <lzma_mf_is_supported@@XZ_5.0+0xf3c>  // b.any
    def8:	mov	w8, #0x2                   	// #2
    defc:	sub	w10, w9, #0x1
    df00:	stp	w8, w10, [x20]
    df04:	mov	w10, #0x1                   	// #1
    df08:	b	df14 <lzma_mf_is_supported@@XZ_5.0+0xf44>
    df0c:	mov	w10, wzr
    df10:	mov	w8, #0x1                   	// #1
    df14:	cmp	w11, w12
    df18:	b.eq	df5c <lzma_mf_is_supported@@XZ_5.0+0xf8c>  // b.none
    df1c:	sub	w11, w1, w11
    df20:	cmp	w11, w7
    df24:	b.cs	df5c <lzma_mf_is_supported@@XZ_5.0+0xf8c>  // b.hs, b.nlast
    df28:	sub	x12, x2, w11, uxtw
    df2c:	ldrb	w12, [x12]
    df30:	ldrb	w13, [x2]
    df34:	cmp	w12, w13
    df38:	b.ne	df5c <lzma_mf_is_supported@@XZ_5.0+0xf8c>  // b.any
    df3c:	mov	x8, xzr
    df40:	sub	x9, x8, w11, uxtw
    df44:	sub	w8, w11, #0x1
    df48:	add	w21, w10, #0x1
    df4c:	add	x10, x20, w10, uxtw #3
    df50:	str	w8, [x10, #4]
    df54:	mov	w8, #0x3                   	// #3
    df58:	b	df6c <lzma_mf_is_supported@@XZ_5.0+0xf9c>
    df5c:	cbz	w10, dfd0 <lzma_mf_is_supported@@XZ_5.0+0x1000>
    df60:	mov	x10, xzr
    df64:	sub	x9, x10, w9, uxtw
    df68:	mov	w21, #0x1                   	// #1
    df6c:	cmp	w8, w0
    df70:	b.cs	dfa8 <lzma_mf_is_supported@@XZ_5.0+0xfd8>  // b.hs, b.nlast
    df74:	add	x9, x2, x9
    df78:	mov	w10, w0
    df7c:	ldrb	w11, [x2, x8]
    df80:	ldrb	w12, [x9, x8]
    df84:	cmp	w11, w12
    df88:	b.ne	dfa8 <lzma_mf_is_supported@@XZ_5.0+0xfd8>  // b.any
    df8c:	add	x8, x8, #0x1
    df90:	cmp	w10, w8
    df94:	b.ne	df7c <lzma_mf_is_supported@@XZ_5.0+0xfac>  // b.any
    df98:	sub	w8, w21, #0x1
    df9c:	lsl	x8, x8, #3
    dfa0:	str	w0, [x20, x8]
    dfa4:	b	dfbc <lzma_mf_is_supported@@XZ_5.0+0xfec>
    dfa8:	sub	w9, w21, #0x1
    dfac:	lsl	x9, x9, #3
    dfb0:	cmp	w8, w0
    dfb4:	str	w8, [x20, x9]
    dfb8:	b.ne	dfd4 <lzma_mf_is_supported@@XZ_5.0+0x1004>  // b.any
    dfbc:	ldr	w4, [x19, #92]
    dfc0:	ldr	x5, [x19, #72]
    dfc4:	ldr	w6, [x19, #80]
    dfc8:	bl	da6c <lzma_mf_is_supported@@XZ_5.0+0xa9c>
    dfcc:	b	e004 <lzma_mf_is_supported@@XZ_5.0+0x1034>
    dfd0:	mov	w21, wzr
    dfd4:	ldr	w4, [x19, #92]
    dfd8:	ldr	x5, [x19, #72]
    dfdc:	ldr	w6, [x19, #80]
    dfe0:	cmp	w8, #0x3
    dfe4:	mov	w9, #0x3                   	// #3
    dfe8:	csel	w8, w8, w9, hi  // hi = pmore
    dfec:	add	x9, x20, w21, uxtw #3
    dff0:	str	w8, [sp, #8]
    dff4:	str	x9, [sp]
    dff8:	bl	d884 <lzma_mf_is_supported@@XZ_5.0+0x8b4>
    dffc:	sub	x8, x0, x20
    e000:	lsr	x21, x8, #3
    e004:	mov	x0, x19
    e008:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    e00c:	mov	w0, w21
    e010:	ldp	x20, x19, [sp, #48]
    e014:	ldr	x21, [sp, #32]
    e018:	ldp	x29, x30, [sp, #16]
    e01c:	add	sp, sp, #0x40
    e020:	ret
    e024:	stp	x29, x30, [sp, #-48]!
    e028:	stp	x22, x21, [sp, #16]
    e02c:	stp	x20, x19, [sp, #32]
    e030:	adrp	x21, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    e034:	ldr	x21, [x21, #3952]
    e038:	mov	w22, #0x400                 	// #1024
    e03c:	mov	w19, w1
    e040:	mov	x20, x0
    e044:	movk	w22, #0x1, lsl #16
    e048:	mov	x29, sp
    e04c:	ldr	w9, [x20, #36]
    e050:	ldr	w8, [x20, #24]
    e054:	ldr	w0, [x20, #96]
    e058:	sub	w9, w9, w8
    e05c:	cmp	w0, w9
    e060:	b.ls	e094 <lzma_mf_is_supported@@XZ_5.0+0x10c4>  // b.plast
    e064:	cmp	w9, #0x4
    e068:	b.cc	e07c <lzma_mf_is_supported@@XZ_5.0+0x10ac>  // b.lo, b.ul, b.last
    e06c:	ldr	w10, [x20, #104]
    e070:	mov	w0, w9
    e074:	cmp	w10, #0x1
    e078:	b.ne	e094 <lzma_mf_is_supported@@XZ_5.0+0x10c4>  // b.any
    e07c:	ldr	w9, [x20, #40]
    e080:	add	w8, w8, #0x1
    e084:	str	w8, [x20, #24]
    e088:	add	w8, w9, #0x1
    e08c:	str	w8, [x20, #40]
    e090:	b	e10c <lzma_mf_is_supported@@XZ_5.0+0x113c>
    e094:	ldr	x9, [x20]
    e098:	ldr	w10, [x20, #20]
    e09c:	ldr	w11, [x20, #88]
    e0a0:	add	x2, x9, x8
    e0a4:	ldrb	w9, [x2]
    e0a8:	ldrb	w13, [x2, #3]
    e0ac:	ldrb	w12, [x2, #1]
    e0b0:	add	w1, w10, w8
    e0b4:	ldr	w9, [x21, x9, lsl #2]
    e0b8:	ldrb	w8, [x2, #2]
    e0bc:	ldr	w10, [x21, x13, lsl #2]
    e0c0:	eor	w9, w9, w12
    e0c4:	ldr	x12, [x20, #64]
    e0c8:	eor	w8, w9, w8, lsl #8
    e0cc:	eor	w10, w8, w10, lsl #5
    e0d0:	and	w8, w8, #0xffff
    e0d4:	and	w10, w10, w11
    e0d8:	and	w9, w9, #0x3ff
    e0dc:	add	w8, w8, #0x400
    e0e0:	add	w10, w10, w22
    e0e4:	ldr	w3, [x12, w10, uxtw #2]
    e0e8:	str	w1, [x12, w9, uxtw #2]
    e0ec:	str	w1, [x12, w8, uxtw #2]
    e0f0:	str	w1, [x12, w10, uxtw #2]
    e0f4:	ldr	w4, [x20, #92]
    e0f8:	ldr	x5, [x20, #72]
    e0fc:	ldp	w6, w7, [x20, #80]
    e100:	bl	da6c <lzma_mf_is_supported@@XZ_5.0+0xa9c>
    e104:	mov	x0, x20
    e108:	bl	d278 <lzma_mf_is_supported@@XZ_5.0+0x2a8>
    e10c:	subs	w19, w19, #0x1
    e110:	b.ne	e04c <lzma_mf_is_supported@@XZ_5.0+0x107c>  // b.any
    e114:	ldp	x20, x19, [sp, #32]
    e118:	ldp	x22, x21, [sp, #16]
    e11c:	ldp	x29, x30, [sp], #48
    e120:	ret
    e124:	sub	sp, sp, #0x60
    e128:	stp	x29, x30, [sp, #32]
    e12c:	stp	x22, x21, [sp, #64]
    e130:	stp	x20, x19, [sp, #80]
    e134:	ldr	x21, [x0]
    e138:	str	x23, [sp, #48]
    e13c:	mov	x23, x3
    e140:	mov	x20, x2
    e144:	mov	x22, x0
    e148:	mov	x19, x1
    e14c:	add	x29, sp, #0x20
    e150:	cbnz	x21, e1ac <lzma_mf_is_supported@@XZ_5.0+0x11dc>
    e154:	mov	w0, #0x10b8                	// #4280
    e158:	mov	x1, x19
    e15c:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    e160:	cbz	x0, e290 <lzma_mf_is_supported@@XZ_5.0+0x12c0>
    e164:	adrp	x8, e000 <lzma_mf_is_supported@@XZ_5.0+0x1030>
    e168:	adrp	x9, e000 <lzma_mf_is_supported@@XZ_5.0+0x1030>
    e16c:	add	x8, x8, #0x2ac
    e170:	add	x9, x9, #0x454
    e174:	mov	x21, x0
    e178:	movi	v0.2d, #0x0
    e17c:	stp	x8, x9, [x22, #24]
    e180:	mov	x8, #0xffffffffffffffff    	// #-1
    e184:	str	x0, [x22]
    e188:	str	xzr, [x0]
    e18c:	str	xzr, [x0, #32]
    e190:	stp	q0, q0, [x0, #48]
    e194:	stp	xzr, xzr, [x0, #80]
    e198:	str	x8, [x0, #96]
    e19c:	stur	q0, [x0, #104]
    e1a0:	stur	q0, [x0, #120]
    e1a4:	stur	q0, [x0, #136]
    e1a8:	str	xzr, [x0, #152]
    e1ac:	ldr	x2, [x20, #16]
    e1b0:	add	x0, x21, #0x30
    e1b4:	add	x3, sp, #0x8
    e1b8:	mov	x1, x19
    e1bc:	blr	x23
    e1c0:	cbnz	w0, e294 <lzma_mf_is_supported@@XZ_5.0+0x12c4>
    e1c4:	ldr	x8, [sp, #8]
    e1c8:	cmp	x8, #0xfff
    e1cc:	b.hi	e1dc <lzma_mf_is_supported@@XZ_5.0+0x120c>  // b.pmore
    e1d0:	mov	w8, #0x1000                	// #4096
    e1d4:	str	x8, [sp, #8]
    e1d8:	b	e1e4 <lzma_mf_is_supported@@XZ_5.0+0x1214>
    e1dc:	cmn	x8, #0x10
    e1e0:	b.hi	e290 <lzma_mf_is_supported@@XZ_5.0+0x12c0>  // b.pmore
    e1e4:	add	x8, x8, #0xf
    e1e8:	and	x8, x8, #0xfffffffffffffff0
    e1ec:	str	x8, [sp, #8]
    e1f0:	ldr	x9, [x21, #32]
    e1f4:	cmp	x9, x8
    e1f8:	b.eq	e224 <lzma_mf_is_supported@@XZ_5.0+0x1254>  // b.none
    e1fc:	ldr	x0, [x21]
    e200:	mov	x1, x19
    e204:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    e208:	ldr	x0, [sp, #8]
    e20c:	mov	x1, x19
    e210:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    e214:	str	x0, [x21]
    e218:	cbz	x0, e290 <lzma_mf_is_supported@@XZ_5.0+0x12c0>
    e21c:	ldr	x8, [sp, #8]
    e220:	str	x8, [x21, #32]
    e224:	ldr	x8, [x22]
    e228:	ldr	x9, [x8]
    e22c:	ldr	x10, [x8, #32]
    e230:	stp	xzr, xzr, [x8, #8]
    e234:	add	x9, x10, x9
    e238:	sturb	wzr, [x9, #-1]
    e23c:	strb	wzr, [x8, #40]
    e240:	ldr	x8, [sp, #16]
    e244:	cbz	x8, e274 <lzma_mf_is_supported@@XZ_5.0+0x12a4>
    e248:	ldr	x9, [sp, #24]
    e24c:	cbz	x9, e274 <lzma_mf_is_supported@@XZ_5.0+0x12a4>
    e250:	ldr	x10, [sp, #8]
    e254:	ldr	x0, [x21]
    e258:	cmp	x9, x10
    e25c:	csel	x22, x9, x10, cc  // cc = lo, ul, last
    e260:	sub	x9, x9, x22
    e264:	add	x1, x8, x9
    e268:	mov	x2, x22
    e26c:	bl	3060 <memcpy@plt>
    e270:	stp	x22, x22, [x21, #8]
    e274:	add	x0, x21, #0x58
    e278:	add	x2, x20, #0x18
    e27c:	mov	x1, x19
    e280:	strh	wzr, [x21, #160]
    e284:	stp	xzr, xzr, [x21, #168]
    e288:	bl	37b4 <lzma_version_string@@XZ_5.0+0x134>
    e28c:	b	e294 <lzma_mf_is_supported@@XZ_5.0+0x12c4>
    e290:	mov	w0, #0x5                   	// #5
    e294:	ldp	x20, x19, [sp, #80]
    e298:	ldp	x22, x21, [sp, #64]
    e29c:	ldr	x23, [sp, #48]
    e2a0:	ldp	x29, x30, [sp, #32]
    e2a4:	add	sp, sp, #0x60
    e2a8:	ret
    e2ac:	sub	sp, sp, #0x80
    e2b0:	stp	x29, x30, [sp, #32]
    e2b4:	stp	x28, x27, [sp, #48]
    e2b8:	stp	x26, x25, [sp, #64]
    e2bc:	stp	x24, x23, [sp, #80]
    e2c0:	stp	x22, x21, [sp, #96]
    e2c4:	stp	x20, x19, [sp, #112]
    e2c8:	ldr	x8, [x0, #112]
    e2cc:	mov	x19, x7
    e2d0:	mov	x20, x6
    e2d4:	mov	x21, x5
    e2d8:	mov	x22, x4
    e2dc:	mov	x23, x3
    e2e0:	mov	x25, x2
    e2e4:	mov	x24, x0
    e2e8:	add	x29, sp, #0x20
    e2ec:	cbz	x8, e404 <lzma_mf_is_supported@@XZ_5.0+0x1434>
    e2f0:	ldr	x8, [x20]
    e2f4:	cmp	x8, x19
    e2f8:	b.cs	e3e0 <lzma_mf_is_supported@@XZ_5.0+0x1410>  // b.hs, b.nlast
    e2fc:	ldr	w8, [x29, #96]
    e300:	add	x27, x24, #0xa8
    e304:	add	x28, x24, #0xb0
    e308:	add	x26, x24, #0xb8
    e30c:	stur	x1, [x29, #-8]
    e310:	stur	w8, [x29, #-12]
    e314:	ldrb	w8, [x24, #160]
    e318:	cbnz	w8, e380 <lzma_mf_is_supported@@XZ_5.0+0x13b0>
    e31c:	ldr	x8, [x27]
    e320:	ldr	x9, [x28]
    e324:	cmp	x8, x9
    e328:	b.ne	e380 <lzma_mf_is_supported@@XZ_5.0+0x13b0>  // b.any
    e32c:	stp	xzr, xzr, [x27]
    e330:	ldur	w9, [x29, #-12]
    e334:	ldr	x8, [x24, #112]
    e338:	ldr	x0, [x24, #88]
    e33c:	mov	w7, #0x1000                	// #4096
    e340:	str	w9, [sp]
    e344:	ldur	x1, [x29, #-8]
    e348:	mov	x2, x25
    e34c:	mov	x3, x23
    e350:	mov	x4, x22
    e354:	mov	x5, x26
    e358:	mov	x6, x28
    e35c:	blr	x8
    e360:	cbz	w0, e378 <lzma_mf_is_supported@@XZ_5.0+0x13a8>
    e364:	cmp	w0, #0x1
    e368:	b.ne	e3e4 <lzma_mf_is_supported@@XZ_5.0+0x1414>  // b.any
    e36c:	mov	w8, #0x1                   	// #1
    e370:	strb	w8, [x24, #160]
    e374:	b	e380 <lzma_mf_is_supported@@XZ_5.0+0x13b0>
    e378:	ldr	x8, [x28]
    e37c:	cbz	x8, e3e0 <lzma_mf_is_supported@@XZ_5.0+0x1410>
    e380:	ldrb	w8, [x24, #161]
    e384:	ldr	x3, [x24, #176]
    e388:	cbnz	w8, e440 <lzma_mf_is_supported@@XZ_5.0+0x1470>
    e38c:	mov	x0, x24
    e390:	mov	x1, x26
    e394:	mov	x2, x27
    e398:	mov	x4, x21
    e39c:	mov	x5, x20
    e3a0:	mov	x6, x19
    e3a4:	bl	e4c4 <lzma_mf_is_supported@@XZ_5.0+0x14f4>
    e3a8:	cbz	w0, e3c0 <lzma_mf_is_supported@@XZ_5.0+0x13f0>
    e3ac:	cmp	w0, #0x1
    e3b0:	b.ne	e3e4 <lzma_mf_is_supported@@XZ_5.0+0x1414>  // b.any
    e3b4:	mov	w8, #0x1                   	// #1
    e3b8:	strb	w8, [x24, #161]
    e3bc:	b	e3d4 <lzma_mf_is_supported@@XZ_5.0+0x1404>
    e3c0:	ldrb	w8, [x24, #160]
    e3c4:	cbz	w8, e3d4 <lzma_mf_is_supported@@XZ_5.0+0x1404>
    e3c8:	ldr	x8, [x20]
    e3cc:	cmp	x8, x19
    e3d0:	b.cc	e444 <lzma_mf_is_supported@@XZ_5.0+0x1474>  // b.lo, b.ul, b.last
    e3d4:	ldr	x8, [x20]
    e3d8:	cmp	x8, x19
    e3dc:	b.cc	e314 <lzma_mf_is_supported@@XZ_5.0+0x1344>  // b.lo, b.ul, b.last
    e3e0:	mov	w0, wzr
    e3e4:	ldp	x20, x19, [sp, #112]
    e3e8:	ldp	x22, x21, [sp, #96]
    e3ec:	ldp	x24, x23, [sp, #80]
    e3f0:	ldp	x26, x25, [sp, #64]
    e3f4:	ldp	x28, x27, [sp, #48]
    e3f8:	ldp	x29, x30, [sp, #32]
    e3fc:	add	sp, sp, #0x80
    e400:	ret
    e404:	mov	x0, x24
    e408:	mov	x1, x25
    e40c:	mov	x2, x23
    e410:	mov	x3, x22
    e414:	mov	x4, x21
    e418:	mov	x5, x20
    e41c:	mov	x6, x19
    e420:	ldp	x20, x19, [sp, #112]
    e424:	ldp	x22, x21, [sp, #96]
    e428:	ldp	x24, x23, [sp, #80]
    e42c:	ldp	x26, x25, [sp, #64]
    e430:	ldp	x28, x27, [sp, #48]
    e434:	ldp	x29, x30, [sp, #32]
    e438:	add	sp, sp, #0x80
    e43c:	b	e4c4 <lzma_mf_is_supported@@XZ_5.0+0x14f4>
    e440:	cbz	x3, e44c <lzma_mf_is_supported@@XZ_5.0+0x147c>
    e444:	mov	w0, #0x9                   	// #9
    e448:	b	e3e4 <lzma_mf_is_supported@@XZ_5.0+0x1414>
    e44c:	ldrb	w0, [x24, #160]
    e450:	b	e3e4 <lzma_mf_is_supported@@XZ_5.0+0x1414>
    e454:	stp	x29, x30, [sp, #-32]!
    e458:	stp	x20, x19, [sp, #16]
    e45c:	mov	x20, x0
    e460:	add	x0, x0, #0x58
    e464:	mov	x29, sp
    e468:	mov	x19, x1
    e46c:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
    e470:	ldr	x0, [x20]
    e474:	mov	x1, x19
    e478:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    e47c:	ldr	x8, [x20, #80]
    e480:	ldr	x0, [x20, #48]
    e484:	mov	x1, x19
    e488:	cbz	x8, e494 <lzma_mf_is_supported@@XZ_5.0+0x14c4>
    e48c:	blr	x8
    e490:	b	e498 <lzma_mf_is_supported@@XZ_5.0+0x14c8>
    e494:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
    e498:	mov	x0, x20
    e49c:	mov	x1, x19
    e4a0:	ldp	x20, x19, [sp, #16]
    e4a4:	ldp	x29, x30, [sp], #32
    e4a8:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
    e4ac:	mov	w8, #0x10b8                	// #4280
    e4b0:	add	x0, x0, x8
    e4b4:	ret
    e4b8:	ldr	x2, [x0, #72]
    e4bc:	ldr	x0, [x0, #48]
    e4c0:	br	x2
    e4c4:	sub	sp, sp, #0x80
    e4c8:	stp	x29, x30, [sp, #32]
    e4cc:	stp	x28, x27, [sp, #48]
    e4d0:	stp	x26, x25, [sp, #64]
    e4d4:	stp	x20, x19, [sp, #112]
    e4d8:	add	x29, sp, #0x20
    e4dc:	mov	x19, x6
    e4e0:	mov	x20, x5
    e4e4:	mov	x25, x0
    e4e8:	add	x28, x0, #0x8
    e4ec:	stp	x24, x23, [sp, #80]
    e4f0:	stp	x22, x21, [sp, #96]
    e4f4:	stur	x4, [x29, #-8]
    e4f8:	stp	x2, x3, [sp, #8]
    e4fc:	str	x1, [sp]
    e500:	ldr	x21, [x25, #8]
    e504:	ldr	x8, [x25, #32]
    e508:	cmp	x21, x8
    e50c:	b.ne	e518 <lzma_mf_is_supported@@XZ_5.0+0x1548>  // b.any
    e510:	mov	x21, xzr
    e514:	str	xzr, [x28]
    e518:	ldr	x24, [x20]
    e51c:	sub	x8, x8, x21
    e520:	ldp	x0, x10, [x25, #48]
    e524:	ldr	x4, [sp, #16]
    e528:	sub	x9, x19, x24
    e52c:	cmp	x9, x8
    e530:	csel	x8, x9, x8, cc  // cc = lo, ul, last
    e534:	add	x8, x8, x21
    e538:	str	x8, [x25, #24]
    e53c:	ldp	x2, x3, [sp]
    e540:	mov	x1, x25
    e544:	blr	x10
    e548:	ldp	x23, x22, [x25]
    e54c:	ldur	x8, [x29, #-8]
    e550:	mov	w26, w0
    e554:	sub	x27, x22, x21
    e558:	add	x0, x8, x24
    e55c:	add	x1, x23, x21
    e560:	mov	x2, x27
    e564:	bl	3060 <memcpy@plt>
    e568:	add	x8, x27, x24
    e56c:	str	x8, [x20]
    e570:	ldrb	w9, [x25, #40]
    e574:	cbz	w9, e59c <lzma_mf_is_supported@@XZ_5.0+0x15cc>
    e578:	stp	xzr, xzr, [x28]
    e57c:	ldr	x9, [x25, #32]
    e580:	add	x9, x9, x23
    e584:	sturb	wzr, [x9, #-1]
    e588:	strb	wzr, [x25, #40]
    e58c:	cbnz	w26, e5b4 <lzma_mf_is_supported@@XZ_5.0+0x15e4>
    e590:	cmp	x8, x19
    e594:	b.ne	e500 <lzma_mf_is_supported@@XZ_5.0+0x1530>  // b.any
    e598:	b	e5b4 <lzma_mf_is_supported@@XZ_5.0+0x15e4>
    e59c:	cbnz	w26, e5b4 <lzma_mf_is_supported@@XZ_5.0+0x15e4>
    e5a0:	cmp	x8, x19
    e5a4:	b.eq	e5b4 <lzma_mf_is_supported@@XZ_5.0+0x15e4>  // b.none
    e5a8:	ldr	x8, [x25, #32]
    e5ac:	cmp	x22, x8
    e5b0:	b.cs	e500 <lzma_mf_is_supported@@XZ_5.0+0x1530>  // b.hs, b.nlast
    e5b4:	mov	w0, w26
    e5b8:	ldp	x20, x19, [sp, #112]
    e5bc:	ldp	x22, x21, [sp, #96]
    e5c0:	ldp	x24, x23, [sp, #80]
    e5c4:	ldp	x26, x25, [sp, #64]
    e5c8:	ldp	x28, x27, [sp, #48]
    e5cc:	ldp	x29, x30, [sp, #32]
    e5d0:	add	sp, sp, #0x80
    e5d4:	ret

000000000000e5d8 <lzma_lzma_preset@@XZ_5.0>:
    e5d8:	and	x9, x1, #0x1f
    e5dc:	cmp	w9, #0x9
    e5e0:	mov	w8, #0x1                   	// #1
    e5e4:	b.hi	e6e0 <lzma_lzma_preset@@XZ_5.0+0x108>  // b.pmore
    e5e8:	and	w10, w1, #0x7fffffe0
    e5ec:	cbnz	w10, e6e0 <lzma_lzma_preset@@XZ_5.0+0x108>
    e5f0:	adrp	x11, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    e5f4:	adrp	x10, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    e5f8:	add	x11, x11, #0xbe8
    e5fc:	adrp	x8, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    e600:	ldr	d1, [x10, #3040]
    e604:	ldrb	w10, [x11, x9]
    e608:	ldr	d0, [x8, #3032]
    e60c:	mov	w8, #0x1                   	// #1
    e610:	cmp	w9, #0x3
    e614:	lsl	w10, w8, w10
    e618:	str	xzr, [x0, #8]
    e61c:	stp	d0, d1, [x0, #16]
    e620:	str	w10, [x0]
    e624:	b.hi	e658 <lzma_lzma_preset@@XZ_5.0+0x80>  // b.pmore
    e628:	adrp	x10, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    e62c:	str	w8, [x0, #32]
    e630:	cmp	w9, #0x0
    e634:	mov	w8, #0x3                   	// #3
    e638:	add	x10, x10, #0xbf2
    e63c:	cinc	w11, w8, ne  // ne = any
    e640:	ldrb	w8, [x10, x9]
    e644:	cmp	w9, #0x2
    e648:	mov	w10, #0x111                 	// #273
    e64c:	mov	w12, #0x80                  	// #128
    e650:	csel	w10, w12, w10, cc  // cc = lo, ul, last
    e654:	b	e684 <lzma_lzma_preset@@XZ_5.0+0xac>
    e658:	mov	w10, #0x2                   	// #2
    e65c:	cmp	w9, #0x5
    e660:	mov	w11, #0x40                  	// #64
    e664:	mov	w12, #0x20                  	// #32
    e668:	mov	w13, #0x10                  	// #16
    e66c:	str	w10, [x0, #32]
    e670:	csel	w10, w12, w11, eq  // eq = none
    e674:	cmp	w9, #0x4
    e678:	mov	w8, wzr
    e67c:	csel	w10, w13, w10, eq  // eq = none
    e680:	mov	w11, #0x14                  	// #20
    e684:	stp	w10, w11, [x0, #36]
    e688:	str	w8, [x0, #44]
    e68c:	tbnz	w1, #31, e698 <lzma_lzma_preset@@XZ_5.0+0xc0>
    e690:	mov	w8, wzr
    e694:	b	e6e0 <lzma_lzma_preset@@XZ_5.0+0x108>
    e698:	mov	w8, #0x2                   	// #2
    e69c:	mov	w10, #0x14                  	// #20
    e6a0:	cmp	w9, #0x5
    e6a4:	str	w8, [x0, #32]
    e6a8:	str	w10, [x0, #40]
    e6ac:	b.eq	e6b8 <lzma_lzma_preset@@XZ_5.0+0xe0>  // b.none
    e6b0:	cmp	w9, #0x3
    e6b4:	b.ne	e6cc <lzma_lzma_preset@@XZ_5.0+0xf4>  // b.any
    e6b8:	mov	w9, #0xc0                  	// #192
    e6bc:	mov	w8, wzr
    e6c0:	str	w9, [x0, #36]
    e6c4:	str	wzr, [x0, #44]
    e6c8:	b	e6e0 <lzma_lzma_preset@@XZ_5.0+0x108>
    e6cc:	mov	w8, wzr
    e6d0:	mov	w9, #0x111                 	// #273
    e6d4:	mov	w10, #0x200                 	// #512
    e6d8:	str	w9, [x0, #36]
    e6dc:	str	w10, [x0, #44]
    e6e0:	mov	w0, w8
    e6e4:	ret
    e6e8:	sub	sp, sp, #0x70
    e6ec:	ldrb	w8, [x0, #2957]
    e6f0:	stp	x24, x23, [sp, #64]
    e6f4:	stp	x22, x21, [sp, #80]
    e6f8:	stp	x20, x19, [sp, #96]
    e6fc:	mov	w23, w5
    e700:	mov	x20, x4
    e704:	mov	x21, x3
    e708:	mov	x22, x2
    e70c:	mov	x19, x0
    e710:	mov	x24, x1
    e714:	stp	x29, x30, [sp, #16]
    e718:	stp	x28, x27, [sp, #32]
    e71c:	stp	x26, x25, [sp, #48]
    e720:	add	x29, sp, #0x10
    e724:	cbnz	w8, e7d8 <lzma_lzma_preset@@XZ_5.0+0x200>
    e728:	ldr	w8, [x24, #24]
    e72c:	ldr	w9, [x24, #32]
    e730:	cmp	w8, w9
    e734:	b.ne	e744 <lzma_lzma_preset@@XZ_5.0+0x16c>  // b.any
    e738:	ldr	w8, [x24, #104]
    e73c:	cbnz	w8, e7d0 <lzma_lzma_preset@@XZ_5.0+0x1f8>
    e740:	b	ed04 <lzma_lzma_preset@@XZ_5.0+0x72c>
    e744:	ldr	x8, [x24, #56]
    e748:	mov	w1, #0x1                   	// #1
    e74c:	mov	x0, x24
    e750:	mov	w25, #0x1                   	// #1
    e754:	blr	x8
    e758:	ldr	x8, [x19, #24]
    e75c:	ldr	x11, [x24]
    e760:	mov	w9, #0x6b9c                	// #27548
    e764:	add	x9, x19, x9
    e768:	add	x8, x19, x8, lsl #2
    e76c:	str	wzr, [x8, #40]
    e770:	ldr	x8, [x19, #24]
    e774:	str	wzr, [x24, #28]
    e778:	add	x12, x19, x8, lsl #3
    e77c:	add	x10, x8, #0x1
    e780:	str	x9, [x12, #272]
    e784:	str	x10, [x19, #24]
    e788:	ldrb	w8, [x11]
    e78c:	mov	w9, #0x7                   	// #7
    e790:	lsr	w11, w8, w9
    e794:	add	x10, x19, x10, lsl #2
    e798:	and	w13, w11, #0x1
    e79c:	str	w13, [x10, #40]
    e7a0:	ldr	x10, [x19, #24]
    e7a4:	add	x12, x19, w25, uxtw #1
    e7a8:	sub	w9, w9, #0x1
    e7ac:	bfi	w11, w25, #1, #31
    e7b0:	add	x12, x12, #0xb9c
    e7b4:	cmn	w9, #0x1
    e7b8:	add	x13, x19, x10, lsl #3
    e7bc:	add	x10, x10, #0x1
    e7c0:	mov	w25, w11
    e7c4:	str	x12, [x13, #272]
    e7c8:	str	x10, [x19, #24]
    e7cc:	b.ne	e790 <lzma_lzma_preset@@XZ_5.0+0x1b8>  // b.any
    e7d0:	mov	w8, #0x1                   	// #1
    e7d4:	strb	w8, [x19, #2957]
    e7d8:	ldp	w25, w26, [x24, #24]
    e7dc:	mov	x0, x19
    e7e0:	mov	x1, x22
    e7e4:	mov	x2, x21
    e7e8:	mov	x3, x20
    e7ec:	bl	ed34 <lzma_lzma_preset@@XZ_5.0+0x75c>
    e7f0:	tbnz	w0, #0, ed04 <lzma_lzma_preset@@XZ_5.0+0x72c>
    e7f4:	mov	w8, #0xba48                	// #47688
    e7f8:	sub	w25, w25, w26
    e7fc:	mov	w26, #0x600                 	// #1536
    e800:	mov	w28, #0x1                   	// #1
    e804:	add	x8, x19, x8
    e808:	str	x8, [sp]
    e80c:	ldr	w8, [x24, #24]
    e810:	cmn	w23, #0x1
    e814:	b.eq	e844 <lzma_lzma_preset@@XZ_5.0+0x26c>  // b.none
    e818:	ldr	w9, [x24, #28]
    e81c:	sub	w9, w8, w9
    e820:	cmp	w9, w23
    e824:	b.cs	ec40 <lzma_lzma_preset@@XZ_5.0+0x668>  // b.hs, b.nlast
    e828:	ldr	x9, [x21]
    e82c:	ldr	x10, [x19, #8]
    e830:	add	x9, x9, x10
    e834:	add	x9, x9, #0x4
    e838:	mov	w10, #0xeffe                	// #61438
    e83c:	cmp	x9, x10
    e840:	b.hi	ec40 <lzma_lzma_preset@@XZ_5.0+0x668>  // b.pmore
    e844:	ldr	w9, [x24, #32]
    e848:	cmp	w8, w9
    e84c:	b.cc	e860 <lzma_lzma_preset@@XZ_5.0+0x288>  // b.lo, b.ul, b.last
    e850:	ldr	w8, [x24, #104]
    e854:	cbz	w8, ed04 <lzma_lzma_preset@@XZ_5.0+0x72c>
    e858:	ldr	w8, [x24, #28]
    e85c:	cbz	w8, ec40 <lzma_lzma_preset@@XZ_5.0+0x668>
    e860:	ldrb	w8, [x19, #2956]
    e864:	cbz	w8, e880 <lzma_lzma_preset@@XZ_5.0+0x2a8>
    e868:	add	x2, sp, #0x8
    e86c:	sub	x3, x29, #0x4
    e870:	mov	x0, x19
    e874:	mov	x1, x24
    e878:	bl	fad8 <lzma_mode_is_supported@@XZ_5.0+0x608>
    e87c:	b	e898 <lzma_lzma_preset@@XZ_5.0+0x2c0>
    e880:	add	x2, sp, #0x8
    e884:	sub	x3, x29, #0x4
    e888:	mov	x0, x19
    e88c:	mov	x1, x24
    e890:	mov	w4, w25
    e894:	bl	fe70 <lzma_mode_is_supported@@XZ_5.0+0x9a0>
    e898:	ldr	w8, [x19, #2960]
    e89c:	ldr	w10, [x19, #736]
    e8a0:	ldr	x11, [x19, #24]
    e8a4:	ldr	w9, [sp, #8]
    e8a8:	ldur	w27, [x29, #-4]
    e8ac:	and	w8, w8, w25
    e8b0:	add	x10, x19, x10, lsl #5
    e8b4:	add	x11, x19, x11, lsl #2
    e8b8:	add	x10, x10, w8, uxtw #1
    e8bc:	mov	w12, #0x6b9c                	// #27548
    e8c0:	cmn	w9, #0x1
    e8c4:	add	x10, x10, x12
    e8c8:	add	x11, x11, #0x28
    e8cc:	b.eq	e990 <lzma_lzma_preset@@XZ_5.0+0x3b8>  // b.none
    e8d0:	str	w28, [x11]
    e8d4:	ldr	x11, [x19, #24]
    e8d8:	cmp	w9, #0x3
    e8dc:	add	x12, x19, x11, lsl #3
    e8e0:	str	x10, [x12, #272]
    e8e4:	ldr	w10, [x19, #736]
    e8e8:	add	x11, x11, #0x1
    e8ec:	str	x11, [x19, #24]
    e8f0:	add	x11, x19, x11, lsl #2
    e8f4:	add	x10, x19, x10, lsl #1
    e8f8:	mov	w12, #0x6d1c                	// #27932
    e8fc:	add	x10, x10, x12
    e900:	add	x11, x11, #0x28
    e904:	b.hi	ea3c <lzma_lzma_preset@@XZ_5.0+0x464>  // b.pmore
    e908:	str	w28, [x11]
    e90c:	ldr	x11, [x19, #24]
    e910:	add	x12, x19, x11, lsl #3
    e914:	add	x11, x11, #0x1
    e918:	str	x10, [x12, #272]
    e91c:	str	x11, [x19, #24]
    e920:	cbz	w9, eaf8 <lzma_lzma_preset@@XZ_5.0+0x520>
    e924:	add	x10, x19, x9, lsl #2
    e928:	add	x13, x19, #0x28
    e92c:	ldr	w12, [x19, #736]
    e930:	ldr	w10, [x10, #740]
    e934:	str	w28, [x13, x11, lsl #2]
    e938:	ldr	x11, [x19, #24]
    e93c:	add	x12, x19, x12, lsl #1
    e940:	mov	w14, #0x6d34                	// #27956
    e944:	add	x12, x12, x14
    e948:	add	x14, x19, x11, lsl #3
    e94c:	str	x12, [x14, #272]
    e950:	ldr	w12, [x19, #736]
    e954:	add	x14, x11, #0x1
    e958:	cmp	w9, #0x1
    e95c:	str	x14, [x19, #24]
    e960:	add	x11, x19, x12, lsl #1
    e964:	mov	w12, #0x6d4c                	// #27980
    e968:	add	x11, x11, x12
    e96c:	add	x12, x13, x14, lsl #2
    e970:	b.ne	eb58 <lzma_lzma_preset@@XZ_5.0+0x580>  // b.any
    e974:	str	wzr, [x12]
    e978:	ldr	x9, [x19, #24]
    e97c:	add	x12, x19, x9, lsl #3
    e980:	add	x9, x9, #0x1
    e984:	str	x11, [x12, #272]
    e988:	str	x9, [x19, #24]
    e98c:	b	ebb4 <lzma_lzma_preset@@XZ_5.0+0x5dc>
    e990:	str	wzr, [x11]
    e994:	ldp	w8, w9, [x24, #24]
    e998:	ldr	x13, [x19, #24]
    e99c:	ldr	x11, [x24]
    e9a0:	mov	w16, #0x8                   	// #8
    e9a4:	sub	w12, w8, w9
    e9a8:	add	x8, x19, x13, lsl #3
    e9ac:	str	x10, [x8, #272]
    e9b0:	add	x9, x13, #0x1
    e9b4:	ldr	w8, [x19, #2968]
    e9b8:	sub	w13, w12, #0x1
    e9bc:	str	x9, [x19, #24]
    e9c0:	ldr	w14, [x19, #2964]
    e9c4:	ldrb	w13, [x11, w13, uxtw]
    e9c8:	ldr	w15, [x19, #736]
    e9cc:	ldrb	w10, [x11, w12, uxtw]
    e9d0:	and	w8, w8, w25
    e9d4:	lsl	w8, w8, w14
    e9d8:	sub	w14, w16, w14
    e9dc:	lsr	w13, w13, w14
    e9e0:	cmp	w15, #0x6
    e9e4:	add	w8, w13, w8
    e9e8:	b.hi	ea6c <lzma_lzma_preset@@XZ_5.0+0x494>  // b.pmore
    e9ec:	mov	w12, #0x1                   	// #1
    e9f0:	mov	w11, #0x7                   	// #7
    e9f4:	lsr	w13, w10, w11
    e9f8:	add	x9, x19, x9, lsl #2
    e9fc:	and	w15, w13, #0x1
    ea00:	str	w15, [x9, #40]
    ea04:	ldr	x9, [x19, #24]
    ea08:	madd	x14, x8, x26, x19
    ea0c:	add	x14, x14, w12, uxtw #1
    ea10:	sub	w11, w11, #0x1
    ea14:	bfi	w13, w12, #1, #31
    ea18:	add	x12, x14, #0xb9c
    ea1c:	add	x14, x19, x9, lsl #3
    ea20:	cmn	w11, #0x1
    ea24:	add	x9, x9, #0x1
    ea28:	str	x12, [x14, #272]
    ea2c:	mov	w12, w13
    ea30:	str	x9, [x19, #24]
    ea34:	b.ne	e9f4 <lzma_lzma_preset@@XZ_5.0+0x41c>  // b.any
    ea38:	b	ead4 <lzma_lzma_preset@@XZ_5.0+0x4fc>
    ea3c:	str	wzr, [x11]
    ea40:	ldr	x11, [x19, #24]
    ea44:	sub	w2, w9, #0x4
    ea48:	mov	x0, x19
    ea4c:	mov	w1, w8
    ea50:	add	x12, x19, x11, lsl #3
    ea54:	add	x11, x11, #0x1
    ea58:	mov	w3, w27
    ea5c:	str	x10, [x12, #272]
    ea60:	str	x11, [x19, #24]
    ea64:	bl	f4e0 <lzma_mode_is_supported@@XZ_5.0+0x10>
    ea68:	b	ec10 <lzma_lzma_preset@@XZ_5.0+0x638>
    ea6c:	ldr	w13, [x19, #740]
    ea70:	mvn	w13, w13
    ea74:	add	w12, w12, w13
    ea78:	ldrb	w11, [x11, w12, uxtw]
    ea7c:	orr	w12, w10, #0x100
    ea80:	mov	w10, #0x100                 	// #256
    ea84:	ubfx	w15, w12, #7, #1
    ea88:	add	x9, x19, x9, lsl #2
    ea8c:	str	w15, [x9, #40]
    ea90:	ldr	x9, [x19, #24]
    ea94:	and	w13, w10, w11, lsl #1
    ea98:	add	w14, w10, w12, lsr #8
    ea9c:	madd	x16, x8, x26, x19
    eaa0:	cmp	w12, #0x8, lsl #12
    eaa4:	lsl	w12, w12, #1
    eaa8:	add	w13, w14, w13
    eaac:	eor	w15, w12, w11, lsl #1
    eab0:	add	x13, x16, w13, uxtw #1
    eab4:	lsl	w11, w11, #1
    eab8:	add	x13, x13, #0xb9c
    eabc:	add	x14, x19, x9, lsl #3
    eac0:	add	x9, x9, #0x1
    eac4:	bic	w10, w10, w15
    eac8:	str	x13, [x14, #272]
    eacc:	str	x9, [x19, #24]
    ead0:	b.cc	ea84 <lzma_lzma_preset@@XZ_5.0+0x4ac>  // b.lo, b.ul, b.last
    ead4:	ldr	w8, [x19, #736]
    ead8:	mov	w9, #0xfffffffa            	// #-6
    eadc:	mov	w10, #0xfffffffd            	// #-3
    eae0:	cmp	w8, #0xa
    eae4:	csel	w9, w10, w9, cc  // cc = lo, ul, last
    eae8:	add	w9, w9, w8
    eaec:	cmp	w8, #0x4
    eaf0:	csel	w8, wzr, w9, cc  // cc = lo, ul, last
    eaf4:	b	ec0c <lzma_lzma_preset@@XZ_5.0+0x634>
    eaf8:	ldr	w9, [x19, #736]
    eafc:	add	x10, x19, #0x28
    eb00:	str	wzr, [x10, x11, lsl #2]
    eb04:	ldr	x11, [x19, #24]
    eb08:	add	x9, x19, x9, lsl #1
    eb0c:	mov	w14, #0x6d34                	// #27956
    eb10:	add	x12, x19, #0x110
    eb14:	add	x9, x9, x14
    eb18:	cmp	w27, #0x1
    eb1c:	str	x9, [x12, x11, lsl #3]
    eb20:	cset	w13, ne  // ne = any
    eb24:	add	x9, x11, #0x1
    eb28:	ldr	w11, [x19, #736]
    eb2c:	str	x9, [x19, #24]
    eb30:	str	w13, [x10, x9, lsl #2]
    eb34:	ldr	x9, [x19, #24]
    eb38:	add	x10, x19, x11, lsl #5
    eb3c:	add	x10, x10, x8, lsl #1
    eb40:	mov	w13, #0x6d7c                	// #28028
    eb44:	add	x11, x9, #0x1
    eb48:	add	x10, x10, x13
    eb4c:	str	x10, [x12, x9, lsl #3]
    eb50:	str	x11, [x19, #24]
    eb54:	b	ebc0 <lzma_lzma_preset@@XZ_5.0+0x5e8>
    eb58:	str	w28, [x12]
    eb5c:	ldr	x12, [x19, #24]
    eb60:	add	x13, x19, #0x110
    eb64:	sub	w14, w9, #0x2
    eb68:	cmp	w9, #0x3
    eb6c:	str	x11, [x13, x12, lsl #3]
    eb70:	add	x11, x12, #0x1
    eb74:	str	x11, [x19, #24]
    eb78:	ldr	w12, [x19, #736]
    eb7c:	add	x11, x19, x11, lsl #2
    eb80:	str	w14, [x11, #40]
    eb84:	ldr	x11, [x19, #24]
    eb88:	add	x12, x19, x12, lsl #1
    eb8c:	mov	w14, #0x6d64                	// #28004
    eb90:	add	x12, x12, x14
    eb94:	str	x12, [x13, x11, lsl #3]
    eb98:	add	x11, x11, #0x1
    eb9c:	str	x11, [x19, #24]
    eba0:	b.ne	ebac <lzma_lzma_preset@@XZ_5.0+0x5d4>  // b.any
    eba4:	ldr	w9, [x19, #748]
    eba8:	str	w9, [x19, #752]
    ebac:	ldr	w9, [x19, #744]
    ebb0:	str	w9, [x19, #748]
    ebb4:	ldr	w9, [x19, #740]
    ebb8:	str	w10, [x19, #740]
    ebbc:	str	w9, [x19, #744]
    ebc0:	cmp	w27, #0x1
    ebc4:	b.ne	ebe0 <lzma_lzma_preset@@XZ_5.0+0x608>  // b.any
    ebc8:	ldr	w8, [x19, #736]
    ebcc:	mov	w9, #0x9                   	// #9
    ebd0:	cmp	w8, #0x7
    ebd4:	mov	w8, #0xb                   	// #11
    ebd8:	csel	w8, w9, w8, cc  // cc = lo, ul, last
    ebdc:	b	ec0c <lzma_lzma_preset@@XZ_5.0+0x634>
    ebe0:	ldrb	w4, [x19, #2956]
    ebe4:	ldr	x1, [sp]
    ebe8:	mov	x0, x19
    ebec:	mov	w2, w8
    ebf0:	mov	w3, w27
    ebf4:	bl	f754 <lzma_mode_is_supported@@XZ_5.0+0x284>
    ebf8:	ldr	w8, [x19, #736]
    ebfc:	mov	w9, #0xb                   	// #11
    ec00:	cmp	w8, #0x7
    ec04:	mov	w8, #0x8                   	// #8
    ec08:	csel	w8, w8, w9, cc  // cc = lo, ul, last
    ec0c:	str	w8, [x19, #736]
    ec10:	ldr	w8, [x24, #28]
    ec14:	ldur	w9, [x29, #-4]
    ec18:	mov	x0, x19
    ec1c:	mov	x1, x22
    ec20:	sub	w8, w8, w27
    ec24:	mov	x2, x21
    ec28:	mov	x3, x20
    ec2c:	str	w8, [x24, #28]
    ec30:	add	w25, w9, w25
    ec34:	bl	ed34 <lzma_lzma_preset@@XZ_5.0+0x75c>
    ec38:	tbz	w0, #0, e80c <lzma_lzma_preset@@XZ_5.0+0x234>
    ec3c:	b	ed04 <lzma_lzma_preset@@XZ_5.0+0x72c>
    ec40:	ldrb	w8, [x19, #2958]
    ec44:	cbnz	w8, ed0c <lzma_lzma_preset@@XZ_5.0+0x734>
    ec48:	mov	w8, #0x1                   	// #1
    ec4c:	cmn	w23, #0x1
    ec50:	strb	w8, [x19, #2958]
    ec54:	b.ne	ecc8 <lzma_lzma_preset@@XZ_5.0+0x6f0>  // b.any
    ec58:	ldr	x9, [x19, #24]
    ec5c:	ldr	w10, [x19, #2960]
    ec60:	ldr	w11, [x19, #736]
    ec64:	add	x12, x19, #0x28
    ec68:	str	w8, [x12, x9, lsl #2]
    ec6c:	and	w1, w10, w25
    ec70:	ldr	x10, [x19, #24]
    ec74:	add	x11, x19, x11, lsl #5
    ec78:	mov	w8, #0x6b9c                	// #27548
    ec7c:	add	x11, x11, w1, uxtw #1
    ec80:	add	x9, x19, #0x110
    ec84:	add	x8, x11, x8
    ec88:	str	x8, [x9, x10, lsl #3]
    ec8c:	add	x8, x10, #0x1
    ec90:	str	x8, [x19, #24]
    ec94:	ldr	w10, [x19, #736]
    ec98:	str	wzr, [x12, x8, lsl #2]
    ec9c:	ldr	x8, [x19, #24]
    eca0:	mov	w11, #0x6d1c                	// #27932
    eca4:	add	x10, x19, x10, lsl #1
    eca8:	add	x10, x10, x11
    ecac:	add	x11, x8, #0x1
    ecb0:	mov	w2, #0xffffffff            	// #-1
    ecb4:	mov	w3, #0x2                   	// #2
    ecb8:	mov	x0, x19
    ecbc:	str	x10, [x9, x8, lsl #3]
    ecc0:	str	x11, [x19, #24]
    ecc4:	bl	f4e0 <lzma_mode_is_supported@@XZ_5.0+0x10>
    ecc8:	mov	w8, #0x5                   	// #5
    eccc:	mov	w9, #0x4                   	// #4
    ecd0:	ldr	x10, [x19, #24]
    ecd4:	subs	x8, x8, #0x1
    ecd8:	add	x11, x10, #0x1
    ecdc:	add	x10, x19, x10, lsl #2
    ece0:	str	x11, [x19, #24]
    ece4:	str	w9, [x10, #40]
    ece8:	b.ne	ecd0 <lzma_lzma_preset@@XZ_5.0+0x6f8>  // b.any
    ecec:	mov	x0, x19
    ecf0:	mov	x1, x22
    ecf4:	mov	x2, x21
    ecf8:	mov	x3, x20
    ecfc:	bl	ed34 <lzma_lzma_preset@@XZ_5.0+0x75c>
    ed00:	tbz	w0, #0, ed0c <lzma_lzma_preset@@XZ_5.0+0x734>
    ed04:	mov	w0, wzr
    ed08:	b	ed14 <lzma_lzma_preset@@XZ_5.0+0x73c>
    ed0c:	mov	w0, #0x1                   	// #1
    ed10:	strb	wzr, [x19, #2958]
    ed14:	ldp	x20, x19, [sp, #96]
    ed18:	ldp	x22, x21, [sp, #80]
    ed1c:	ldp	x24, x23, [sp, #64]
    ed20:	ldp	x26, x25, [sp, #48]
    ed24:	ldp	x28, x27, [sp, #32]
    ed28:	ldp	x29, x30, [sp, #16]
    ed2c:	add	sp, sp, #0x70
    ed30:	ret
    ed34:	mov	x9, x0
    ed38:	ldr	x10, [x9, #24]!
    ed3c:	ldr	x8, [x9, #8]
    ed40:	cmp	x8, x10
    ed44:	b.cs	ee94 <lzma_lzma_preset@@XZ_5.0+0x8bc>  // b.hs, b.nlast
    ed48:	ldr	w13, [x0, #16]
    ed4c:	adrp	x11, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    ed50:	mov	w10, #0xff                  	// #255
    ed54:	add	x11, x11, #0xc20
    ed58:	mov	w12, #0x800                 	// #2048
    ed5c:	lsr	w14, w13, #24
    ed60:	cbnz	w14, edec <lzma_lzma_preset@@XZ_5.0+0x814>
    ed64:	ldr	x14, [x0]
    ed68:	lsr	x15, x14, #32
    ed6c:	cbnz	x15, ed88 <lzma_lzma_preset@@XZ_5.0+0x7b0>
    ed70:	lsr	w15, w14, #24
    ed74:	cmp	w15, #0xfe
    ed78:	b.ls	ed88 <lzma_lzma_preset@@XZ_5.0+0x7b0>  // b.plast
    ed7c:	ldr	x15, [x0, #8]
    ed80:	add	x15, x15, #0x1
    ed84:	b	eddc <lzma_lzma_preset@@XZ_5.0+0x804>
    ed88:	ldr	x8, [x2]
    ed8c:	cmp	x8, x3
    ed90:	b.eq	ef5c <lzma_lzma_preset@@XZ_5.0+0x984>  // b.none
    ed94:	ldrb	w13, [x0, #20]
    ed98:	ldrb	w14, [x0, #4]
    ed9c:	add	w13, w13, w14
    eda0:	strb	w13, [x1, x8]
    eda4:	ldr	x8, [x2]
    eda8:	add	x8, x8, #0x1
    edac:	str	x8, [x2]
    edb0:	ldr	x8, [x0, #8]
    edb4:	strb	w10, [x0, #20]
    edb8:	subs	x8, x8, #0x1
    edbc:	str	x8, [x0, #8]
    edc0:	b.ne	ed88 <lzma_lzma_preset@@XZ_5.0+0x7b0>  // b.any
    edc4:	ldr	x14, [x0]
    edc8:	ldr	w13, [x0, #16]
    edcc:	ldr	x8, [x0, #32]
    edd0:	lsr	x15, x14, #24
    edd4:	strb	w15, [x0, #20]
    edd8:	mov	w15, #0x1                   	// #1
    eddc:	lsl	w14, w14, #8
    ede0:	lsl	w13, w13, #8
    ede4:	stp	x14, x15, [x0]
    ede8:	str	w13, [x0, #16]
    edec:	add	x14, x0, x8, lsl #2
    edf0:	ldr	w14, [x14, #40]
    edf4:	cmp	w14, #0x4
    edf8:	b.hi	ee80 <lzma_lzma_preset@@XZ_5.0+0x8a8>  // b.pmore
    edfc:	adr	x15, ee0c <lzma_lzma_preset@@XZ_5.0+0x834>
    ee00:	ldrb	w16, [x11, x14]
    ee04:	add	x15, x15, x16, lsl #2
    ee08:	br	x15
    ee0c:	add	x14, x0, x8, lsl #3
    ee10:	ldr	x14, [x14, #272]
    ee14:	lsr	w13, w13, #11
    ee18:	ldrh	w15, [x14]
    ee1c:	sub	w16, w12, w15
    ee20:	mul	w13, w13, w15
    ee24:	add	w15, w15, w16, lsr #5
    ee28:	b	ee54 <lzma_lzma_preset@@XZ_5.0+0x87c>
    ee2c:	add	x14, x0, x8, lsl #3
    ee30:	ldr	x14, [x14, #272]
    ee34:	ldr	x16, [x0]
    ee38:	lsr	w17, w13, #11
    ee3c:	ldrh	w15, [x14]
    ee40:	mul	w17, w17, w15
    ee44:	add	x16, x16, x17
    ee48:	sub	w13, w13, w17
    ee4c:	sub	w15, w15, w15, lsr #5
    ee50:	str	x16, [x0]
    ee54:	str	w13, [x0, #16]
    ee58:	strh	w15, [x14]
    ee5c:	b	ee80 <lzma_lzma_preset@@XZ_5.0+0x8a8>
    ee60:	lsr	w13, w13, #1
    ee64:	str	w13, [x0, #16]
    ee68:	b	ee80 <lzma_lzma_preset@@XZ_5.0+0x8a8>
    ee6c:	ldr	x14, [x0]
    ee70:	lsr	w13, w13, #1
    ee74:	str	w13, [x0, #16]
    ee78:	add	x14, x14, x13
    ee7c:	str	x14, [x0]
    ee80:	ldr	x14, [x0, #24]
    ee84:	add	x8, x8, #0x1
    ee88:	str	x8, [x0, #32]
    ee8c:	cmp	x8, x14
    ee90:	b.cc	ed5c <lzma_lzma_preset@@XZ_5.0+0x784>  // b.lo, b.ul, b.last
    ee94:	mov	w8, wzr
    ee98:	stp	xzr, xzr, [x9]
    ee9c:	b	ef60 <lzma_lzma_preset@@XZ_5.0+0x988>
    eea0:	ldr	x11, [x0]
    eea4:	mov	w10, #0xffffffff            	// #-1
    eea8:	str	w10, [x0, #16]
    eeac:	mov	w10, #0xff                  	// #255
    eeb0:	lsr	x12, x11, #32
    eeb4:	cbnz	x12, eed0 <lzma_lzma_preset@@XZ_5.0+0x8f8>
    eeb8:	lsr	w12, w11, #24
    eebc:	cmp	w12, #0xfe
    eec0:	b.ls	eed0 <lzma_lzma_preset@@XZ_5.0+0x8f8>  // b.plast
    eec4:	ldr	x12, [x0, #8]
    eec8:	add	x12, x12, #0x1
    eecc:	b	ef20 <lzma_lzma_preset@@XZ_5.0+0x948>
    eed0:	ldr	x8, [x2]
    eed4:	cmp	x8, x3
    eed8:	b.eq	ef5c <lzma_lzma_preset@@XZ_5.0+0x984>  // b.none
    eedc:	ldrb	w11, [x0, #20]
    eee0:	ldrb	w12, [x0, #4]
    eee4:	add	w11, w11, w12
    eee8:	strb	w11, [x1, x8]
    eeec:	ldr	x8, [x2]
    eef0:	add	x8, x8, #0x1
    eef4:	str	x8, [x2]
    eef8:	ldr	x8, [x0, #8]
    eefc:	strb	w10, [x0, #20]
    ef00:	subs	x8, x8, #0x1
    ef04:	str	x8, [x0, #8]
    ef08:	b.ne	eed0 <lzma_lzma_preset@@XZ_5.0+0x8f8>  // b.any
    ef0c:	ldr	x11, [x0]
    ef10:	ldr	x8, [x0, #32]
    ef14:	lsr	x12, x11, #24
    ef18:	strb	w12, [x0, #20]
    ef1c:	mov	w12, #0x1                   	// #1
    ef20:	ldr	x13, [x0, #24]
    ef24:	add	x8, x8, #0x1
    ef28:	lsl	w11, w11, #8
    ef2c:	stp	x11, x12, [x0]
    ef30:	cmp	x8, x13
    ef34:	str	x8, [x0, #32]
    ef38:	b.cc	eeb0 <lzma_lzma_preset@@XZ_5.0+0x8d8>  // b.lo, b.ul, b.last
    ef3c:	adrp	x10, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    ef40:	ldr	q0, [x10, #3072]
    ef44:	mov	w10, #0xffffffff            	// #-1
    ef48:	mov	w8, wzr
    ef4c:	strb	wzr, [x0, #20]
    ef50:	str	w10, [x0, #16]
    ef54:	str	q0, [x0]
    ef58:	b	ee98 <lzma_lzma_preset@@XZ_5.0+0x8c0>
    ef5c:	mov	w8, #0x1                   	// #1
    ef60:	mov	w0, w8
    ef64:	ret
    ef68:	stp	x29, x30, [sp, #-48]!
    ef6c:	stp	x20, x19, [sp, #32]
    ef70:	mov	x19, x0
    ef74:	mov	x0, x1
    ef78:	stp	x22, x21, [sp, #16]
    ef7c:	mov	x29, sp
    ef80:	mov	x20, x1
    ef84:	bl	f154 <lzma_lzma_preset@@XZ_5.0+0xb7c>
    ef88:	tbz	w0, #0, f140 <lzma_lzma_preset@@XZ_5.0+0xb68>
    ef8c:	ldr	w9, [x20, #28]
    ef90:	mov	w10, #0xffffffff            	// #-1
    ef94:	adrp	x12, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    ef98:	ldr	q0, [x12, #3072]
    ef9c:	lsl	w9, w10, w9
    efa0:	mvn	w9, w9
    efa4:	str	w9, [x19, #2960]
    efa8:	ldr	w11, [x20, #20]
    efac:	mov	w13, #0xe94                 	// #3732
    efb0:	movk	w13, #0x1, lsl #16
    efb4:	mov	w8, wzr
    efb8:	str	w11, [x19, #2964]
    efbc:	ldr	w11, [x20, #24]
    efc0:	str	w10, [x19, #16]
    efc4:	str	q0, [x19]
    efc8:	movi	v0.2d, #0x0
    efcc:	lsl	w10, w10, w11
    efd0:	mvn	w10, w10
    efd4:	strb	wzr, [x19, #20]
    efd8:	stur	q0, [x19, #24]
    efdc:	str	q0, [x19, #736]
    efe0:	str	wzr, [x19, #752]
    efe4:	str	w10, [x19, #2968]
    efe8:	ldp	w11, w12, [x20, #20]
    efec:	add	x10, x19, #0xb9c
    eff0:	add	x21, x19, x13
    eff4:	movi	v0.8h, #0x4, lsl #8
    eff8:	add	w11, w12, w11
    effc:	mov	w12, #0x600                 	// #1536
    f000:	mov	x13, xzr
    f004:	umaddl	x14, w8, w12, x10
    f008:	str	q0, [x14, x13]
    f00c:	add	x13, x13, #0x10
    f010:	cmp	x13, #0x600
    f014:	b.ne	f008 <lzma_lzma_preset@@XZ_5.0+0xa30>  // b.any
    f018:	add	w8, w8, #0x1
    f01c:	lsr	w13, w8, w11
    f020:	cbz	w13, f000 <lzma_lzma_preset@@XZ_5.0+0xa28>
    f024:	mov	w13, w9
    f028:	mov	w14, #0x6b9c                	// #27548
    f02c:	mov	x8, xzr
    f030:	mov	w9, #0x400                 	// #1024
    f034:	mov	w10, #0x6d1c                	// #27932
    f038:	mov	w11, #0x6d34                	// #27956
    f03c:	mov	w12, #0x6d4c                	// #27980
    f040:	add	x13, x13, #0x1
    f044:	add	x14, x19, x14
    f048:	mov	w15, #0x6d64                	// #28004
    f04c:	mov	x16, x14
    f050:	mov	x17, x13
    f054:	strh	w9, [x16]
    f058:	strh	w9, [x16, #480]
    f05c:	subs	x17, x17, #0x1
    f060:	add	x16, x16, #0x2
    f064:	b.ne	f054 <lzma_lzma_preset@@XZ_5.0+0xa7c>  // b.any
    f068:	add	x16, x19, x8, lsl #1
    f06c:	add	x8, x8, #0x1
    f070:	cmp	x8, #0xc
    f074:	add	x14, x14, #0x20
    f078:	strh	w9, [x16, x10]
    f07c:	strh	w9, [x16, x11]
    f080:	strh	w9, [x16, x12]
    f084:	strh	w9, [x16, x15]
    f088:	b.ne	f04c <lzma_lzma_preset@@XZ_5.0+0xa74>  // b.any
    f08c:	mov	w9, #0x70fc                	// #28924
    f090:	mov	x8, xzr
    f094:	add	x9, x19, x9
    f098:	mov	w10, #0x400                 	// #1024
    f09c:	strh	w10, [x9, x8]
    f0a0:	add	x8, x8, #0x2
    f0a4:	cmp	x8, #0xe4
    f0a8:	b.ne	f09c <lzma_lzma_preset@@XZ_5.0+0xac4>  // b.any
    f0ac:	mov	w9, #0x6efc                	// #28412
    f0b0:	mov	x8, xzr
    f0b4:	add	x9, x19, x9
    f0b8:	movi	v0.8h, #0x4, lsl #8
    f0bc:	mov	x10, xzr
    f0c0:	str	q0, [x9, x10]
    f0c4:	add	x10, x10, #0x10
    f0c8:	cmp	x10, #0x80
    f0cc:	b.ne	f0c0 <lzma_lzma_preset@@XZ_5.0+0xae8>  // b.any
    f0d0:	add	x8, x8, #0x1
    f0d4:	cmp	x8, #0x4
    f0d8:	add	x9, x9, #0x80
    f0dc:	b.ne	f0bc <lzma_lzma_preset@@XZ_5.0+0xae4>  // b.any
    f0e0:	movi	v0.8h, #0x4, lsl #8
    f0e4:	str	q0, [x19, #29152]
    f0e8:	str	q0, [x19, #29168]
    f0ec:	ldr	w9, [x20, #28]
    f0f0:	ldrb	w2, [x19, #2956]
    f0f4:	mov	w8, #0x7200                	// #29184
    f0f8:	mov	w22, #0x1                   	// #1
    f0fc:	add	x0, x19, x8
    f100:	lsl	w1, w22, w9
    f104:	bl	f1b0 <lzma_lzma_preset@@XZ_5.0+0xbd8>
    f108:	ldr	w8, [x20, #28]
    f10c:	ldrb	w2, [x19, #2956]
    f110:	mov	w9, #0xba48                	// #47688
    f114:	add	x0, x19, x9
    f118:	lsl	w1, w22, w8
    f11c:	bl	f1b0 <lzma_lzma_preset@@XZ_5.0+0xbd8>
    f120:	adrp	x8, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    f124:	ldr	d0, [x8, #3112]
    f128:	mov	w0, wzr
    f12c:	mov	w8, #0x7fffffff            	// #2147483647
    f130:	str	w8, [x21]
    f134:	stur	d0, [x21, #68]
    f138:	str	wzr, [x21, #76]
    f13c:	b	f144 <lzma_lzma_preset@@XZ_5.0+0xb6c>
    f140:	mov	w0, #0x8                   	// #8
    f144:	ldp	x20, x19, [sp, #32]
    f148:	ldp	x22, x21, [sp, #16]
    f14c:	ldp	x29, x30, [sp], #48
    f150:	ret
    f154:	ldr	w8, [x0, #20]
    f158:	cmp	w8, #0x4
    f15c:	b.hi	f1a8 <lzma_lzma_preset@@XZ_5.0+0xbd0>  // b.pmore
    f160:	ldr	w9, [x0, #24]
    f164:	cmp	w9, #0x4
    f168:	b.hi	f1a8 <lzma_lzma_preset@@XZ_5.0+0xbd0>  // b.pmore
    f16c:	add	w8, w9, w8
    f170:	cmp	w8, #0x4
    f174:	b.hi	f1a8 <lzma_lzma_preset@@XZ_5.0+0xbd0>  // b.pmore
    f178:	ldr	w8, [x0, #28]
    f17c:	cmp	w8, #0x4
    f180:	b.hi	f1a8 <lzma_lzma_preset@@XZ_5.0+0xbd0>  // b.pmore
    f184:	ldr	w8, [x0, #36]
    f188:	sub	w8, w8, #0x2
    f18c:	cmp	w8, #0x10f
    f190:	b.hi	f1a8 <lzma_lzma_preset@@XZ_5.0+0xbd0>  // b.pmore
    f194:	ldr	w8, [x0, #32]
    f198:	sub	w8, w8, #0x1
    f19c:	cmp	w8, #0x2
    f1a0:	cset	w0, cc  // cc = lo, ul, last
    f1a4:	ret
    f1a8:	mov	w0, wzr
    f1ac:	ret
    f1b0:	stp	x29, x30, [sp, #-48]!
    f1b4:	stp	x20, x19, [sp, #32]
    f1b8:	mov	w19, w1
    f1bc:	mov	x20, x0
    f1c0:	mov	w8, #0x4000400             	// #67109888
    f1c4:	str	x21, [sp, #16]
    f1c8:	mov	x29, sp
    f1cc:	str	w8, [x0]
    f1d0:	cbz	w1, f1f0 <lzma_lzma_preset@@XZ_5.0+0xc18>
    f1d4:	mov	w8, w19
    f1d8:	add	x9, x20, #0x104
    f1dc:	movi	v0.8h, #0x4, lsl #8
    f1e0:	stur	q0, [x9, #-256]
    f1e4:	str	q0, [x9], #16
    f1e8:	subs	x8, x8, #0x1
    f1ec:	b.ne	f1e0 <lzma_lzma_preset@@XZ_5.0+0xc08>  // b.any
    f1f0:	mov	w8, #0x204                 	// #516
    f1f4:	movi	v0.8h, #0x4, lsl #8
    f1f8:	str	q0, [x20, x8]
    f1fc:	add	x8, x8, #0x10
    f200:	cmp	x8, #0x404
    f204:	b.ne	f1f8 <lzma_lzma_preset@@XZ_5.0+0xc20>  // b.any
    f208:	cbz	w19, f22c <lzma_lzma_preset@@XZ_5.0+0xc54>
    f20c:	tbnz	w2, #0, f22c <lzma_lzma_preset@@XZ_5.0+0xc54>
    f210:	mov	w21, wzr
    f214:	mov	x0, x20
    f218:	mov	w1, w21
    f21c:	bl	f904 <lzma_mode_is_supported@@XZ_5.0+0x434>
    f220:	add	w21, w21, #0x1
    f224:	cmp	w19, w21
    f228:	b.ne	f214 <lzma_lzma_preset@@XZ_5.0+0xc3c>  // b.any
    f22c:	ldp	x20, x19, [sp, #32]
    f230:	ldr	x21, [sp, #16]
    f234:	ldp	x29, x30, [sp], #48
    f238:	ret
    f23c:	stp	x29, x30, [sp, #-48]!
    f240:	stp	x20, x19, [sp, #32]
    f244:	str	x21, [sp, #16]
    f248:	mov	x21, x0
    f24c:	ldr	x0, [x0]
    f250:	mov	x20, x3
    f254:	mov	x19, x2
    f258:	mov	x29, sp
    f25c:	cbnz	x0, f274 <lzma_lzma_preset@@XZ_5.0+0xc9c>
    f260:	mov	w0, #0xcee8                	// #52968
    f264:	movk	w0, #0x3, lsl #16
    f268:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
    f26c:	str	x0, [x21]
    f270:	cbz	x0, f354 <lzma_lzma_preset@@XZ_5.0+0xd7c>
    f274:	ldr	w8, [x19, #32]
    f278:	cmp	w8, #0x2
    f27c:	b.eq	f290 <lzma_lzma_preset@@XZ_5.0+0xcb8>  // b.none
    f280:	cmp	w8, #0x1
    f284:	b.ne	f2f8 <lzma_lzma_preset@@XZ_5.0+0xd20>  // b.any
    f288:	strb	w8, [x0, #2956]
    f28c:	b	f2e0 <lzma_lzma_preset@@XZ_5.0+0xd08>
    f290:	strb	wzr, [x0, #2956]
    f294:	ldr	w11, [x19]
    f298:	mov	w9, #0x24c                 	// #588
    f29c:	movk	w9, #0x1, lsl #16
    f2a0:	mov	w10, #0xba04                	// #47620
    f2a4:	mov	w8, wzr
    f2a8:	add	x9, x0, x9
    f2ac:	add	x10, x0, x10
    f2b0:	mov	w12, #0xfffffffe            	// #-2
    f2b4:	mov	w13, #0x1                   	// #1
    f2b8:	lsl	w14, w13, w8
    f2bc:	add	w8, w8, #0x1
    f2c0:	cmp	w14, w11
    f2c4:	add	w12, w12, #0x2
    f2c8:	b.cc	f2b8 <lzma_lzma_preset@@XZ_5.0+0xce0>  // b.lo, b.ul, b.last
    f2cc:	str	w12, [x9, #3140]
    f2d0:	ldr	w8, [x19, #36]
    f2d4:	sub	w8, w8, #0x1
    f2d8:	str	w8, [x10]
    f2dc:	str	w8, [x9]
    f2e0:	ldr	x8, [x19, #8]
    f2e4:	cbz	x8, f300 <lzma_lzma_preset@@XZ_5.0+0xd28>
    f2e8:	ldr	w9, [x19, #16]
    f2ec:	cmp	w9, #0x0
    f2f0:	cset	w9, ne  // ne = any
    f2f4:	b	f304 <lzma_lzma_preset@@XZ_5.0+0xd2c>
    f2f8:	mov	w0, #0x8                   	// #8
    f2fc:	b	f358 <lzma_lzma_preset@@XZ_5.0+0xd80>
    f300:	mov	w9, wzr
    f304:	strb	w9, [x0, #2957]
    f308:	mov	w9, #0x1000                	// #4096
    f30c:	strb	wzr, [x0, #2958]
    f310:	str	x9, [x20]
    f314:	adrp	x9, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    f318:	ldr	q0, [x9, #3088]
    f31c:	ldr	w9, [x19]
    f320:	mov	x1, x19
    f324:	str	q0, [x20, #16]
    f328:	str	x9, [x20, #8]
    f32c:	ldr	w9, [x19, #36]
    f330:	str	x9, [x20, #32]
    f334:	ldr	x9, [x19, #40]
    f338:	stp	x9, x8, [x20, #40]
    f33c:	ldr	w8, [x19, #16]
    f340:	ldr	x21, [sp, #16]
    f344:	str	w8, [x20, #56]
    f348:	ldp	x20, x19, [sp, #32]
    f34c:	ldp	x29, x30, [sp], #48
    f350:	b	ef68 <lzma_lzma_preset@@XZ_5.0+0x990>
    f354:	mov	w0, #0x5                   	// #5
    f358:	ldp	x20, x19, [sp, #32]
    f35c:	ldr	x21, [sp, #16]
    f360:	ldp	x29, x30, [sp], #48
    f364:	ret
    f368:	adrp	x3, f000 <lzma_lzma_preset@@XZ_5.0+0xa28>
    f36c:	add	x3, x3, #0x374
    f370:	b	cb0c <lzma_crc64@@XZ_5.0+0x133c>
    f374:	adrp	x8, f000 <lzma_lzma_preset@@XZ_5.0+0xa28>
    f378:	add	x8, x8, #0xabc
    f37c:	str	x8, [x0, #8]
    f380:	b	f23c <lzma_lzma_preset@@XZ_5.0+0xc64>
    f384:	sub	sp, sp, #0x60
    f388:	stp	x29, x30, [sp, #64]
    f38c:	str	x19, [sp, #80]
    f390:	add	x29, sp, #0x40
    f394:	mov	x19, x0
    f398:	bl	f154 <lzma_lzma_preset@@XZ_5.0+0xb7c>
    f39c:	tbz	w0, #0, f3fc <lzma_lzma_preset@@XZ_5.0+0xe24>
    f3a0:	mov	w8, #0x1000                	// #4096
    f3a4:	adrp	x9, 1a000 <lzma_mode_is_supported@@XZ_5.0+0xab30>
    f3a8:	str	x8, [sp]
    f3ac:	ldr	w8, [x19]
    f3b0:	ldr	q0, [x9, #3088]
    f3b4:	mov	x0, sp
    f3b8:	str	x8, [sp, #8]
    f3bc:	str	q0, [sp, #16]
    f3c0:	ldr	w8, [x19, #36]
    f3c4:	str	x8, [sp, #32]
    f3c8:	ldr	x8, [x19, #40]
    f3cc:	str	x8, [sp, #40]
    f3d0:	ldr	x8, [x19, #8]
    f3d4:	str	x8, [sp, #48]
    f3d8:	ldr	w8, [x19, #16]
    f3dc:	str	w8, [sp, #56]
    f3e0:	bl	c848 <lzma_crc64@@XZ_5.0+0x1078>
    f3e4:	mov	w8, #0xcee8                	// #52968
    f3e8:	movk	w8, #0x3, lsl #16
    f3ec:	add	x8, x0, x8
    f3f0:	cmn	x0, #0x1
    f3f4:	csinv	x0, x8, xzr, ne  // ne = any
    f3f8:	b	f400 <lzma_lzma_preset@@XZ_5.0+0xe28>
    f3fc:	mov	x0, #0xffffffffffffffff    	// #-1
    f400:	ldr	x19, [sp, #80]
    f404:	ldp	x29, x30, [sp, #64]
    f408:	add	sp, sp, #0x60
    f40c:	ret
    f410:	ldr	w9, [x0, #20]
    f414:	cmp	w9, #0x4
    f418:	b.hi	f464 <lzma_lzma_preset@@XZ_5.0+0xe8c>  // b.pmore
    f41c:	ldr	w10, [x0, #24]
    f420:	mov	x8, x0
    f424:	mov	w0, #0x1                   	// #1
    f428:	cmp	w10, #0x4
    f42c:	b.hi	f460 <lzma_lzma_preset@@XZ_5.0+0xe88>  // b.pmore
    f430:	add	w11, w10, w9
    f434:	cmp	w11, #0x4
    f438:	b.hi	f460 <lzma_lzma_preset@@XZ_5.0+0xe88>  // b.pmore
    f43c:	ldr	w8, [x8, #28]
    f440:	cmp	w8, #0x4
    f444:	b.hi	f464 <lzma_lzma_preset@@XZ_5.0+0xe8c>  // b.pmore
    f448:	add	w8, w8, w8, lsl #2
    f44c:	add	w8, w8, w10
    f450:	add	w8, w8, w8, lsl #3
    f454:	mov	w0, wzr
    f458:	add	w8, w8, w9
    f45c:	strb	w8, [x1]
    f460:	ret
    f464:	mov	w0, #0x1                   	// #1
    f468:	ret
    f46c:	ldr	w9, [x0, #20]
    f470:	cmp	w9, #0x4
    f474:	b.hi	f4c8 <lzma_lzma_preset@@XZ_5.0+0xef0>  // b.pmore
    f478:	ldr	w10, [x0, #24]
    f47c:	mov	x8, x0
    f480:	mov	w0, #0xb                   	// #11
    f484:	cmp	w10, #0x4
    f488:	b.hi	f4c4 <lzma_lzma_preset@@XZ_5.0+0xeec>  // b.pmore
    f48c:	add	w11, w10, w9
    f490:	cmp	w11, #0x4
    f494:	b.hi	f4c4 <lzma_lzma_preset@@XZ_5.0+0xeec>  // b.pmore
    f498:	ldr	w11, [x8, #28]
    f49c:	cmp	w11, #0x4
    f4a0:	b.hi	f4c8 <lzma_lzma_preset@@XZ_5.0+0xef0>  // b.pmore
    f4a4:	add	w11, w11, w11, lsl #2
    f4a8:	add	w10, w11, w10
    f4ac:	add	w10, w10, w10, lsl #3
    f4b0:	add	w9, w10, w9
    f4b4:	strb	w9, [x1]
    f4b8:	ldr	w8, [x8]
    f4bc:	mov	w0, wzr
    f4c0:	stur	w8, [x1, #1]
    f4c4:	ret
    f4c8:	mov	w0, #0xb                   	// #11
    f4cc:	ret

000000000000f4d0 <lzma_mode_is_supported@@XZ_5.0>:
    f4d0:	sub	w8, w0, #0x1
    f4d4:	cmp	w8, #0x2
    f4d8:	cset	w0, cc  // cc = lo, ul, last
    f4dc:	ret
    f4e0:	stp	x29, x30, [sp, #-48]!
    f4e4:	stp	x22, x21, [sp, #16]
    f4e8:	stp	x20, x19, [sp, #32]
    f4ec:	ldr	w9, [x0, #736]
    f4f0:	ldrb	w4, [x0, #2956]
    f4f4:	mov	w8, #0xe94                 	// #3732
    f4f8:	movk	w8, #0x1, lsl #16
    f4fc:	mov	w10, #0xa                   	// #10
    f500:	mov	w11, #0x7                   	// #7
    f504:	mov	w12, #0x7200                	// #29184
    f508:	cmp	w9, #0x7
    f50c:	mov	w19, w2
    f510:	mov	w2, w1
    f514:	add	x22, x0, x8
    f518:	csel	w8, w11, w10, cc  // cc = lo, ul, last
    f51c:	add	x1, x0, x12
    f520:	mov	x29, sp
    f524:	mov	w21, w3
    f528:	mov	x20, x0
    f52c:	str	w8, [x0, #736]
    f530:	bl	f754 <lzma_mode_is_supported@@XZ_5.0+0x284>
    f534:	lsr	w8, w19, #13
    f538:	cbnz	w8, f54c <lzma_mode_is_supported@@XZ_5.0+0x7c>
    f53c:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    f540:	ldr	x8, [x8, #4008]
    f544:	ldrb	w9, [x8, w19, uxtw]
    f548:	b	f588 <lzma_mode_is_supported@@XZ_5.0+0xb8>
    f54c:	lsr	w8, w19, #25
    f550:	cbnz	w8, f570 <lzma_mode_is_supported@@XZ_5.0+0xa0>
    f554:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    f558:	ldr	x9, [x9, #4008]
    f55c:	mov	w8, w19
    f560:	lsr	x8, x8, #12
    f564:	ldrb	w8, [x9, x8]
    f568:	add	w9, w8, #0x18
    f56c:	b	f588 <lzma_mode_is_supported@@XZ_5.0+0xb8>
    f570:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    f574:	ldr	x9, [x9, #4008]
    f578:	mov	w8, w19
    f57c:	lsr	x8, x8, #24
    f580:	ldrb	w8, [x9, x8]
    f584:	add	w9, w8, #0x30
    f588:	ldr	x11, [x20, #24]
    f58c:	sub	w10, w21, #0x2
    f590:	cmp	w21, #0x6
    f594:	mov	w13, #0x3                   	// #3
    f598:	csel	w13, w10, w13, cc  // cc = lo, ul, last
    f59c:	add	x8, x20, #0x2e4
    f5a0:	mov	w12, #0x1                   	// #1
    f5a4:	mov	w10, #0x5                   	// #5
    f5a8:	add	x13, x20, x13, lsl #7
    f5ac:	mov	w14, #0x6efc                	// #28412
    f5b0:	lsr	w16, w9, w10
    f5b4:	add	x11, x20, x11, lsl #2
    f5b8:	and	w15, w16, #0x1
    f5bc:	str	w15, [x11, #40]
    f5c0:	ldr	x15, [x20, #24]
    f5c4:	add	x17, x13, w12, uxtw #1
    f5c8:	sub	w10, w10, #0x1
    f5cc:	add	x17, x17, x14
    f5d0:	bfi	w16, w12, #1, #31
    f5d4:	add	x12, x20, x15, lsl #3
    f5d8:	cmn	w10, #0x1
    f5dc:	add	x11, x15, #0x1
    f5e0:	str	x17, [x12, #272]
    f5e4:	mov	w12, w16
    f5e8:	str	x11, [x20, #24]
    f5ec:	b.ne	f5b0 <lzma_mode_is_supported@@XZ_5.0+0xe0>  // b.any
    f5f0:	cmp	w9, #0x4
    f5f4:	b.cc	f724 <lzma_mode_is_supported@@XZ_5.0+0x254>  // b.lo, b.ul, b.last
    f5f8:	lsr	w13, w9, #1
    f5fc:	mov	w10, #0x2                   	// #2
    f600:	sub	w12, w13, #0x1
    f604:	bfxil	w10, w9, #0, #1
    f608:	lsl	w16, w10, w12
    f60c:	mov	w14, #0x2                   	// #2
    f610:	cmp	w9, #0xd
    f614:	sub	w10, w19, w16
    f618:	b.hi	f670 <lzma_mode_is_supported@@XZ_5.0+0x1a0>  // b.pmore
    f61c:	add	x13, x20, w16, uxtw #1
    f620:	mov	w14, #0x70fa                	// #28922
    f624:	sub	x9, x13, w9, uxtw #1
    f628:	add	x9, x9, x14
    f62c:	mov	w13, #0x1                   	// #1
    f630:	and	w14, w10, #0x1
    f634:	add	x11, x20, x11, lsl #2
    f638:	str	w14, [x11, #40]
    f63c:	ldr	x11, [x20, #24]
    f640:	lsr	w15, w10, #1
    f644:	add	x14, x9, w13, uxtw #1
    f648:	bfi	w10, w13, #1, #31
    f64c:	add	x13, x20, x11, lsl #3
    f650:	subs	w12, w12, #0x1
    f654:	add	x11, x11, #0x1
    f658:	str	x14, [x13, #272]
    f65c:	mov	w13, w10
    f660:	mov	w10, w15
    f664:	str	x11, [x20, #24]
    f668:	b.ne	f630 <lzma_mode_is_supported@@XZ_5.0+0x160>  // b.any
    f66c:	b	f724 <lzma_mode_is_supported@@XZ_5.0+0x254>
    f670:	lsr	w9, w10, #4
    f674:	subs	w12, w13, #0x6
    f678:	lsr	w12, w9, w12
    f67c:	add	x15, x15, #0x2
    f680:	bfxil	w14, w12, #0, #1
    f684:	add	x11, x20, x11, lsl #2
    f688:	str	x15, [x20, #24]
    f68c:	str	w14, [x11, #40]
    f690:	b.eq	f6c4 <lzma_mode_is_supported@@XZ_5.0+0x1f4>  // b.none
    f694:	sub	w11, w13, #0x7
    f698:	ldr	x12, [x20, #24]
    f69c:	lsr	w13, w9, w11
    f6a0:	mov	w14, #0x2                   	// #2
    f6a4:	sub	w11, w11, #0x1
    f6a8:	bfxil	w14, w13, #0, #1
    f6ac:	cmn	w11, #0x1
    f6b0:	add	x13, x12, #0x1
    f6b4:	add	x12, x20, x12, lsl #2
    f6b8:	str	x13, [x20, #24]
    f6bc:	str	w14, [x12, #40]
    f6c0:	b.ne	f698 <lzma_mode_is_supported@@XZ_5.0+0x1c8>  // b.any
    f6c4:	ldr	x13, [x20, #24]
    f6c8:	and	w9, w10, #0xf
    f6cc:	mov	w11, #0x1                   	// #1
    f6d0:	mov	w10, #0xfffffffc            	// #-4
    f6d4:	mov	w12, #0x71e0                	// #29152
    f6d8:	and	w14, w9, #0x1
    f6dc:	add	x13, x20, x13, lsl #2
    f6e0:	str	w14, [x13, #40]
    f6e4:	ldr	x13, [x20, #24]
    f6e8:	add	x16, x20, w11, uxtw #1
    f6ec:	lsr	w15, w9, #1
    f6f0:	bfi	w9, w11, #1, #31
    f6f4:	add	x11, x16, x12
    f6f8:	add	x14, x20, x13, lsl #3
    f6fc:	adds	w10, w10, #0x1
    f700:	add	x13, x13, #0x1
    f704:	str	x11, [x14, #272]
    f708:	mov	w11, w9
    f70c:	mov	w9, w15
    f710:	str	x13, [x20, #24]
    f714:	b.cc	f6d8 <lzma_mode_is_supported@@XZ_5.0+0x208>  // b.lo, b.ul, b.last
    f718:	ldr	w9, [x22, #68]
    f71c:	add	w9, w9, #0x1
    f720:	str	w9, [x22, #68]
    f724:	ldr	w9, [x20, #748]
    f728:	str	w9, [x20, #752]
    f72c:	ldr	x8, [x8]
    f730:	str	w19, [x20, #740]
    f734:	str	x8, [x20, #744]
    f738:	ldr	w8, [x22]
    f73c:	add	w8, w8, #0x1
    f740:	str	w8, [x22]
    f744:	ldp	x20, x19, [sp, #32]
    f748:	ldp	x22, x21, [sp, #16]
    f74c:	ldp	x29, x30, [sp], #48
    f750:	ret
    f754:	ldr	x9, [x0, #24]
    f758:	sub	w8, w3, #0x2
    f75c:	cmp	w8, #0x7
    f760:	add	x9, x0, x9, lsl #2
    f764:	add	x10, x9, #0x28
    f768:	b.hi	f7d8 <lzma_mode_is_supported@@XZ_5.0+0x308>  // b.pmore
    f76c:	str	wzr, [x10]
    f770:	ldr	x10, [x0, #24]
    f774:	mov	w13, w2
    f778:	mov	w11, #0x1                   	// #1
    f77c:	mov	w9, #0x2                   	// #2
    f780:	add	x14, x0, x10, lsl #3
    f784:	add	x12, x10, #0x1
    f788:	add	x10, x1, x13, lsl #4
    f78c:	str	x1, [x14, #272]
    f790:	str	x12, [x0, #24]
    f794:	lsr	w13, w8, w9
    f798:	add	x12, x0, x12, lsl #2
    f79c:	and	w15, w13, #0x1
    f7a0:	str	w15, [x12, #40]
    f7a4:	ldr	x12, [x0, #24]
    f7a8:	add	x14, x10, w11, uxtw #1
    f7ac:	sub	w9, w9, #0x1
    f7b0:	add	x14, x14, #0x4
    f7b4:	bfi	w13, w11, #1, #31
    f7b8:	add	x11, x0, x12, lsl #3
    f7bc:	cmn	w9, #0x1
    f7c0:	add	x12, x12, #0x1
    f7c4:	str	x14, [x11, #272]
    f7c8:	mov	w11, w13
    f7cc:	str	x12, [x0, #24]
    f7d0:	b.ne	f794 <lzma_mode_is_supported@@XZ_5.0+0x2c4>  // b.any
    f7d4:	b	f8d8 <lzma_mode_is_supported@@XZ_5.0+0x408>
    f7d8:	mov	w9, #0x1                   	// #1
    f7dc:	str	w9, [x10]
    f7e0:	ldr	x11, [x0, #24]
    f7e4:	sub	w8, w3, #0xa
    f7e8:	add	x10, x1, #0x2
    f7ec:	cmp	w8, #0x7
    f7f0:	add	x12, x0, x11, lsl #3
    f7f4:	add	x11, x11, #0x1
    f7f8:	str	x1, [x12, #272]
    f7fc:	str	x11, [x0, #24]
    f800:	add	x11, x0, x11, lsl #2
    f804:	add	x11, x11, #0x28
    f808:	b.hi	f878 <lzma_mode_is_supported@@XZ_5.0+0x3a8>  // b.pmore
    f80c:	str	wzr, [x11]
    f810:	ldr	x12, [x0, #24]
    f814:	mov	w13, w2
    f818:	mov	w11, #0x1                   	// #1
    f81c:	mov	w9, #0x2                   	// #2
    f820:	add	x14, x0, x12, lsl #3
    f824:	add	x12, x12, #0x1
    f828:	str	x10, [x14, #272]
    f82c:	add	x10, x1, x13, lsl #4
    f830:	str	x12, [x0, #24]
    f834:	lsr	w13, w8, w9
    f838:	add	x12, x0, x12, lsl #2
    f83c:	and	w15, w13, #0x1
    f840:	str	w15, [x12, #40]
    f844:	ldr	x12, [x0, #24]
    f848:	add	x14, x10, w11, uxtw #1
    f84c:	sub	w9, w9, #0x1
    f850:	add	x14, x14, #0x104
    f854:	bfi	w13, w11, #1, #31
    f858:	add	x11, x0, x12, lsl #3
    f85c:	cmn	w9, #0x1
    f860:	add	x12, x12, #0x1
    f864:	str	x14, [x11, #272]
    f868:	mov	w11, w13
    f86c:	str	x12, [x0, #24]
    f870:	b.ne	f834 <lzma_mode_is_supported@@XZ_5.0+0x364>  // b.any
    f874:	b	f8d8 <lzma_mode_is_supported@@XZ_5.0+0x408>
    f878:	str	w9, [x11]
    f87c:	ldr	x11, [x0, #24]
    f880:	sub	w8, w3, #0x12
    f884:	add	x12, x0, x11, lsl #3
    f888:	add	x11, x11, #0x1
    f88c:	str	x10, [x12, #272]
    f890:	mov	w10, #0x7                   	// #7
    f894:	str	x11, [x0, #24]
    f898:	lsr	w12, w8, w10
    f89c:	add	x11, x0, x11, lsl #2
    f8a0:	and	w14, w12, #0x1
    f8a4:	str	w14, [x11, #40]
    f8a8:	ldr	x11, [x0, #24]
    f8ac:	add	x13, x1, w9, uxtw #1
    f8b0:	sub	w10, w10, #0x1
    f8b4:	add	x13, x13, #0x204
    f8b8:	bfi	w12, w9, #1, #31
    f8bc:	add	x9, x0, x11, lsl #3
    f8c0:	cmn	w10, #0x1
    f8c4:	add	x11, x11, #0x1
    f8c8:	str	x13, [x9, #272]
    f8cc:	mov	w9, w12
    f8d0:	str	x11, [x0, #24]
    f8d4:	b.ne	f898 <lzma_mode_is_supported@@XZ_5.0+0x3c8>  // b.any
    f8d8:	tbnz	w4, #0, f8f4 <lzma_mode_is_supported@@XZ_5.0+0x424>
    f8dc:	add	x8, x1, w2, uxtw #2
    f8e0:	mov	w9, #0x4808                	// #18440
    f8e4:	ldr	w10, [x8, x9]
    f8e8:	subs	w10, w10, #0x1
    f8ec:	str	w10, [x8, x9]
    f8f0:	b.eq	f8f8 <lzma_mode_is_supported@@XZ_5.0+0x428>  // b.none
    f8f4:	ret
    f8f8:	mov	x0, x1
    f8fc:	mov	w1, w2
    f900:	b	f904 <lzma_mode_is_supported@@XZ_5.0+0x434>
    f904:	mov	w8, #0x4804                	// #18436
    f908:	ldr	w8, [x0, x8]
    f90c:	add	x9, x0, w1, uxtw #2
    f910:	mov	w10, #0x4808                	// #18440
    f914:	str	w8, [x9, x10]
    f918:	ldrh	w9, [x0]
    f91c:	ldrh	w12, [x0, #2]
    f920:	mov	w10, w1
    f924:	lsr	x13, x9, #4
    f928:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    f92c:	ldr	x9, [x9, #3960]
    f930:	eor	x11, x13, #0x7f
    f934:	cbz	w8, f9b0 <lzma_mode_is_supported@@XZ_5.0+0x4e0>
    f938:	ldrb	w14, [x9, x13]
    f93c:	mov	w13, #0x440                 	// #1088
    f940:	mov	x15, xzr
    f944:	madd	x16, x10, x13, x0
    f948:	mov	w13, wzr
    f94c:	add	w17, w15, #0x8
    f950:	and	w18, w17, #0x1
    f954:	lsr	w17, w17, #1
    f958:	lsl	w1, w17, #1
    f95c:	add	x2, x0, x10, lsl #4
    f960:	add	x1, x2, x1
    f964:	ldrh	w1, [x1, #4]
    f968:	neg	w18, w18
    f96c:	and	w18, w18, #0x7f0
    f970:	cmp	w17, #0x1
    f974:	eor	w18, w18, w1
    f978:	lsr	x18, x18, #4
    f97c:	ldrb	w18, [x9, x18]
    f980:	add	w13, w13, w18
    f984:	b.ne	f950 <lzma_mode_is_supported@@XZ_5.0+0x480>  // b.any
    f988:	add	w17, w13, w14
    f98c:	add	x13, x15, #0x1
    f990:	add	x18, x16, x15, lsl #2
    f994:	cmp	x13, x8
    f998:	str	w17, [x18, #1028]
    f99c:	b.cs	f9b4 <lzma_mode_is_supported@@XZ_5.0+0x4e4>  // b.hs, b.nlast
    f9a0:	cmp	x15, #0x7
    f9a4:	mov	x15, x13
    f9a8:	b.cc	f948 <lzma_mode_is_supported@@XZ_5.0+0x478>  // b.lo, b.ul, b.last
    f9ac:	b	f9b4 <lzma_mode_is_supported@@XZ_5.0+0x4e4>
    f9b0:	mov	w13, wzr
    f9b4:	ldrb	w11, [x9, x11]
    f9b8:	cmp	w13, w8
    f9bc:	lsr	x12, x12, #4
    f9c0:	b.cs	fa44 <lzma_mode_is_supported@@XZ_5.0+0x574>  // b.hs, b.nlast
    f9c4:	cmp	w13, #0xf
    f9c8:	b.hi	fa44 <lzma_mode_is_supported@@XZ_5.0+0x574>  // b.pmore
    f9cc:	ldrb	w15, [x9, x12]
    f9d0:	mov	w14, w13
    f9d4:	mov	w13, #0x440                 	// #1088
    f9d8:	madd	x16, x10, x13, x0
    f9dc:	add	w15, w15, w11
    f9e0:	mov	w13, wzr
    f9e4:	mov	w17, w14
    f9e8:	and	w18, w17, #0x1
    f9ec:	lsr	w17, w17, #1
    f9f0:	lsl	w1, w17, #1
    f9f4:	add	x2, x0, x10, lsl #4
    f9f8:	add	x1, x2, x1
    f9fc:	ldrh	w1, [x1, #260]
    fa00:	neg	w18, w18
    fa04:	and	w18, w18, #0x7f0
    fa08:	cmp	w17, #0x1
    fa0c:	eor	w18, w18, w1
    fa10:	lsr	x18, x18, #4
    fa14:	ldrb	w18, [x9, x18]
    fa18:	add	w13, w13, w18
    fa1c:	b.ne	f9e8 <lzma_mode_is_supported@@XZ_5.0+0x518>  // b.any
    fa20:	add	w17, w15, w13
    fa24:	add	x13, x14, #0x1
    fa28:	add	x18, x16, x14, lsl #2
    fa2c:	cmp	x13, x8
    fa30:	str	w17, [x18, #1028]
    fa34:	b.cs	fa44 <lzma_mode_is_supported@@XZ_5.0+0x574>  // b.hs, b.nlast
    fa38:	cmp	x14, #0xf
    fa3c:	mov	x14, x13
    fa40:	b.cc	f9e0 <lzma_mode_is_supported@@XZ_5.0+0x510>  // b.lo, b.ul, b.last
    fa44:	cmp	w13, w8
    fa48:	b.cs	fab8 <lzma_mode_is_supported@@XZ_5.0+0x5e8>  // b.hs, b.nlast
    fa4c:	eor	x12, x12, #0x7f
    fa50:	ldrb	w14, [x9, x12]
    fa54:	mov	w12, w13
    fa58:	mov	w13, #0x440                 	// #1088
    fa5c:	madd	x10, x10, x13, x0
    fa60:	add	w11, w14, w11
    fa64:	mov	w13, wzr
    fa68:	add	w14, w12, #0xf0
    fa6c:	and	w15, w14, #0x1
    fa70:	lsr	w14, w14, #1
    fa74:	lsl	w16, w14, #1
    fa78:	add	x16, x0, x16
    fa7c:	ldrh	w16, [x16, #516]
    fa80:	neg	w15, w15
    fa84:	and	w15, w15, #0x7f0
    fa88:	cmp	w14, #0x1
    fa8c:	eor	w15, w15, w16
    fa90:	lsr	x15, x15, #4
    fa94:	ldrb	w15, [x9, x15]
    fa98:	add	w13, w13, w15
    fa9c:	b.ne	fa6c <lzma_mode_is_supported@@XZ_5.0+0x59c>  // b.any
    faa0:	add	x14, x10, x12, lsl #2
    faa4:	add	x12, x12, #0x1
    faa8:	add	w13, w11, w13
    faac:	cmp	x12, x8
    fab0:	str	w13, [x14, #1028]
    fab4:	b.ne	fa64 <lzma_mode_is_supported@@XZ_5.0+0x594>  // b.any
    fab8:	ret
    fabc:	ldr	w8, [x1, #104]
    fac0:	cmp	w8, #0x1
    fac4:	b.eq	fad0 <lzma_mode_is_supported@@XZ_5.0+0x600>  // b.none
    fac8:	mov	w5, #0xffffffff            	// #-1
    facc:	b	e6e8 <lzma_lzma_preset@@XZ_5.0+0x110>
    fad0:	mov	w0, #0x8                   	// #8
    fad4:	ret
    fad8:	sub	sp, sp, #0x70
    fadc:	stp	x26, x25, [sp, #48]
    fae0:	ldr	w8, [x1, #28]
    fae4:	ldr	w25, [x1, #96]
    fae8:	stp	x24, x23, [sp, #64]
    faec:	stp	x22, x21, [sp, #80]
    faf0:	stp	x20, x19, [sp, #96]
    faf4:	mov	x20, x3
    faf8:	mov	x21, x2
    fafc:	mov	x19, x1
    fb00:	mov	x23, x0
    fb04:	stp	x29, x30, [sp, #16]
    fb08:	stp	x28, x27, [sp, #32]
    fb0c:	add	x29, sp, #0x10
    fb10:	cbz	w8, fb24 <lzma_mode_is_supported@@XZ_5.0+0x654>
    fb14:	ldr	w8, [x23, #2948]
    fb18:	ldr	w22, [x23, #2952]
    fb1c:	stur	w8, [x29, #-4]
    fb20:	b	fb38 <lzma_mode_is_supported@@XZ_5.0+0x668>
    fb24:	add	x2, x23, #0x2f4
    fb28:	sub	x1, x29, #0x4
    fb2c:	mov	x0, x19
    fb30:	bl	cffc <lzma_mf_is_supported@@XZ_5.0+0x2c>
    fb34:	mov	w22, w0
    fb38:	ldr	w12, [x19, #24]
    fb3c:	ldr	w8, [x19, #36]
    fb40:	sub	w8, w8, w12
    fb44:	add	w9, w8, #0x1
    fb48:	cmp	w9, #0x111
    fb4c:	mov	w9, #0x111                 	// #273
    fb50:	csinc	w8, w9, w8, cs  // cs = hs, nlast
    fb54:	cmp	w8, #0x2
    fb58:	b.cs	fb70 <lzma_mode_is_supported@@XZ_5.0+0x6a0>  // b.hs, b.nlast
    fb5c:	mov	w8, #0xffffffff            	// #-1
    fb60:	mov	w9, #0x1                   	// #1
    fb64:	str	w8, [x21]
    fb68:	str	w9, [x20]
    fb6c:	b	fd80 <lzma_mode_is_supported@@XZ_5.0+0x8b0>
    fb70:	ldr	x13, [x19]
    fb74:	mov	w14, w8
    fb78:	mov	x11, xzr
    fb7c:	mov	w9, wzr
    fb80:	add	x24, x13, x12
    fb84:	ldurb	w13, [x24, #-1]
    fb88:	mov	w10, wzr
    fb8c:	sub	x26, x24, #0x1
    fb90:	sub	x12, x24, #0x2
    fb94:	sub	x14, x14, #0x2
    fb98:	add	x15, x24, #0x1
    fb9c:	add	x16, x23, x11, lsl #2
    fba0:	ldr	w17, [x16, #740]
    fba4:	sub	x16, x12, x17
    fba8:	ldrb	w18, [x16]
    fbac:	cmp	w13, w18
    fbb0:	b.ne	fc1c <lzma_mode_is_supported@@XZ_5.0+0x74c>  // b.any
    fbb4:	ldrb	w18, [x24]
    fbb8:	ldrb	w16, [x16, #1]
    fbbc:	cmp	w18, w16
    fbc0:	b.ne	fc1c <lzma_mode_is_supported@@XZ_5.0+0x74c>  // b.any
    fbc4:	cmp	w8, #0x2
    fbc8:	b.ne	fbd4 <lzma_mode_is_supported@@XZ_5.0+0x704>  // b.any
    fbcc:	mov	w16, #0x2                   	// #2
    fbd0:	b	fc08 <lzma_mode_is_supported@@XZ_5.0+0x738>
    fbd4:	neg	x17, x17
    fbd8:	mov	x16, xzr
    fbdc:	add	x17, x24, x17
    fbe0:	ldrb	w18, [x15, x16]
    fbe4:	ldrb	w0, [x17, x16]
    fbe8:	cmp	w18, w0
    fbec:	b.ne	fc04 <lzma_mode_is_supported@@XZ_5.0+0x734>  // b.any
    fbf0:	add	x16, x16, #0x1
    fbf4:	cmp	x14, x16
    fbf8:	b.ne	fbe0 <lzma_mode_is_supported@@XZ_5.0+0x710>  // b.any
    fbfc:	mov	w16, w8
    fc00:	b	fc08 <lzma_mode_is_supported@@XZ_5.0+0x738>
    fc04:	add	w16, w16, #0x2
    fc08:	cmp	w16, w25
    fc0c:	b.cs	fcec <lzma_mode_is_supported@@XZ_5.0+0x81c>  // b.hs, b.nlast
    fc10:	cmp	w16, w9
    fc14:	csel	w10, w11, w10, hi  // hi = pmore
    fc18:	csel	w9, w16, w9, hi  // hi = pmore
    fc1c:	add	x11, x11, #0x1
    fc20:	cmp	x11, #0x4
    fc24:	b.ne	fb9c <lzma_mode_is_supported@@XZ_5.0+0x6cc>  // b.any
    fc28:	cmp	w22, w25
    fc2c:	b.cs	fcac <lzma_mode_is_supported@@XZ_5.0+0x7dc>  // b.hs, b.nlast
    fc30:	cmp	w22, #0x2
    fc34:	b.cc	fd18 <lzma_mode_is_supported@@XZ_5.0+0x848>  // b.lo, b.ul, b.last
    fc38:	ldur	w11, [x29, #-4]
    fc3c:	sub	w12, w11, #0x1
    fc40:	add	x12, x23, w12, uxtw #3
    fc44:	ldr	w27, [x12, #760]
    fc48:	cmp	w11, #0x2
    fc4c:	b.cc	fc9c <lzma_mode_is_supported@@XZ_5.0+0x7cc>  // b.lo, b.ul, b.last
    fc50:	mov	w12, #0xfffffffe            	// #-2
    fc54:	add	x12, x11, x12
    fc58:	add	x13, x23, w12, uxtw #3
    fc5c:	ldr	w13, [x13, #756]
    fc60:	add	w14, w13, #0x1
    fc64:	cmp	w22, w14
    fc68:	b.ne	fc9c <lzma_mode_is_supported@@XZ_5.0+0x7cc>  // b.any
    fc6c:	and	x14, x12, #0xffffffff
    fc70:	add	x14, x23, x14, lsl #3
    fc74:	ldr	w14, [x14, #760]
    fc78:	cmp	w14, w27, lsr #7
    fc7c:	b.cs	fc9c <lzma_mode_is_supported@@XZ_5.0+0x7cc>  // b.hs, b.nlast
    fc80:	sub	w11, w11, #0x1
    fc84:	cmp	w11, #0x1
    fc88:	sub	x12, x12, #0x1
    fc8c:	mov	w27, w14
    fc90:	mov	w22, w13
    fc94:	stur	w11, [x29, #-4]
    fc98:	b.hi	fc58 <lzma_mode_is_supported@@XZ_5.0+0x788>  // b.pmore
    fc9c:	cmp	w27, #0x7f
    fca0:	ccmp	w22, #0x2, #0x0, hi  // hi = pmore
    fca4:	csinc	w22, w22, wzr, ne  // ne = any
    fca8:	b	fd1c <lzma_mode_is_supported@@XZ_5.0+0x84c>
    fcac:	ldur	w8, [x29, #-4]
    fcb0:	sub	w8, w8, #0x1
    fcb4:	add	x8, x23, w8, uxtw #3
    fcb8:	ldr	w8, [x8, #760]
    fcbc:	subs	w23, w22, #0x1
    fcc0:	add	w8, w8, #0x4
    fcc4:	str	w8, [x21]
    fcc8:	str	w22, [x20]
    fccc:	b.eq	fd80 <lzma_mode_is_supported@@XZ_5.0+0x8b0>  // b.none
    fcd0:	ldr	x8, [x19, #56]
    fcd4:	mov	x0, x19
    fcd8:	mov	w1, w23
    fcdc:	blr	x8
    fce0:	ldr	w8, [x19, #28]
    fce4:	add	w8, w8, w23
    fce8:	b	fd7c <lzma_mode_is_supported@@XZ_5.0+0x8ac>
    fcec:	str	w11, [x21]
    fcf0:	subs	w21, w16, #0x1
    fcf4:	str	w16, [x20]
    fcf8:	b.eq	fd80 <lzma_mode_is_supported@@XZ_5.0+0x8b0>  // b.none
    fcfc:	ldr	x8, [x19, #56]
    fd00:	mov	x0, x19
    fd04:	mov	w1, w21
    fd08:	blr	x8
    fd0c:	ldr	w8, [x19, #28]
    fd10:	add	w8, w8, w21
    fd14:	b	fd7c <lzma_mode_is_supported@@XZ_5.0+0x8ac>
    fd18:	mov	w27, wzr
    fd1c:	cmp	w9, #0x2
    fd20:	b.cc	fda0 <lzma_mode_is_supported@@XZ_5.0+0x8d0>  // b.lo, b.ul, b.last
    fd24:	add	w11, w9, #0x1
    fd28:	cmp	w11, w22
    fd2c:	b.cs	fd58 <lzma_mode_is_supported@@XZ_5.0+0x888>  // b.hs, b.nlast
    fd30:	cmp	w27, #0x201
    fd34:	b.cc	fd44 <lzma_mode_is_supported@@XZ_5.0+0x874>  // b.lo, b.ul, b.last
    fd38:	add	w11, w9, #0x2
    fd3c:	cmp	w11, w22
    fd40:	b.cs	fd58 <lzma_mode_is_supported@@XZ_5.0+0x888>  // b.hs, b.nlast
    fd44:	cmp	w27, #0x8, lsl #12
    fd48:	b.ls	fda0 <lzma_mode_is_supported@@XZ_5.0+0x8d0>  // b.plast
    fd4c:	add	w11, w9, #0x3
    fd50:	cmp	w11, w22
    fd54:	b.cc	fda0 <lzma_mode_is_supported@@XZ_5.0+0x8d0>  // b.lo, b.ul, b.last
    fd58:	ldr	x8, [x19, #56]
    fd5c:	str	w9, [x20]
    fd60:	sub	w20, w9, #0x1
    fd64:	mov	x0, x19
    fd68:	mov	w1, w20
    fd6c:	str	w10, [x21]
    fd70:	blr	x8
    fd74:	ldr	w8, [x19, #28]
    fd78:	add	w8, w8, w20
    fd7c:	str	w8, [x19, #28]
    fd80:	ldp	x20, x19, [sp, #96]
    fd84:	ldp	x22, x21, [sp, #80]
    fd88:	ldp	x24, x23, [sp, #64]
    fd8c:	ldp	x26, x25, [sp, #48]
    fd90:	ldp	x28, x27, [sp, #32]
    fd94:	ldp	x29, x30, [sp, #16]
    fd98:	add	sp, sp, #0x70
    fd9c:	ret
    fda0:	cmp	w8, #0x3
    fda4:	b.cc	fb5c <lzma_mode_is_supported@@XZ_5.0+0x68c>  // b.lo, b.ul, b.last
    fda8:	subs	w25, w22, #0x1
    fdac:	b.ls	fb5c <lzma_mode_is_supported@@XZ_5.0+0x68c>  // b.plast
    fdb0:	add	x1, x23, #0xb84
    fdb4:	add	x2, x23, #0x2f4
    fdb8:	mov	x0, x19
    fdbc:	bl	cffc <lzma_mf_is_supported@@XZ_5.0+0x2c>
    fdc0:	cmp	w0, #0x2
    fdc4:	str	w0, [x23, #2952]
    fdc8:	b.cc	fe2c <lzma_mode_is_supported@@XZ_5.0+0x95c>  // b.lo, b.ul, b.last
    fdcc:	ldr	w8, [x23, #2948]
    fdd0:	cmp	w0, w22
    fdd4:	sub	w8, w8, #0x1
    fdd8:	add	x8, x23, w8, uxtw #3
    fddc:	ldr	w8, [x8, #760]
    fde0:	b.cc	fdec <lzma_mode_is_supported@@XZ_5.0+0x91c>  // b.lo, b.ul, b.last
    fde4:	cmp	w8, w27
    fde8:	b.cc	fb5c <lzma_mode_is_supported@@XZ_5.0+0x68c>  // b.lo, b.ul, b.last
    fdec:	add	w10, w22, #0x1
    fdf0:	cmp	w27, w8, lsr #7
    fdf4:	cset	w9, cs  // cs = hs, nlast
    fdf8:	cmp	w0, w10
    fdfc:	cset	w10, eq  // eq = none
    fe00:	b.hi	fb5c <lzma_mode_is_supported@@XZ_5.0+0x68c>  // b.pmore
    fe04:	and	w9, w10, w9
    fe08:	tbnz	w9, #0, fb5c <lzma_mode_is_supported@@XZ_5.0+0x68c>
    fe0c:	cmp	w22, #0x3
    fe10:	b.cc	fe2c <lzma_mode_is_supported@@XZ_5.0+0x95c>  // b.lo, b.ul, b.last
    fe14:	add	w9, w0, #0x1
    fe18:	cmp	w9, w22
    fe1c:	b.cc	fe2c <lzma_mode_is_supported@@XZ_5.0+0x95c>  // b.lo, b.ul, b.last
    fe20:	lsr	w9, w27, #7
    fe24:	cmp	w9, w8
    fe28:	b.hi	fb5c <lzma_mode_is_supported@@XZ_5.0+0x68c>  // b.pmore
    fe2c:	cmp	w25, #0x2
    fe30:	mov	w8, #0x2                   	// #2
    fe34:	mov	x28, xzr
    fe38:	csel	w25, w25, w8, hi  // hi = pmore
    fe3c:	add	x23, x23, #0x2e4
    fe40:	ldr	w8, [x23, x28]
    fe44:	mov	x0, x24
    fe48:	mov	x2, x25
    fe4c:	sub	x1, x26, x8
    fe50:	bl	3230 <bcmp@plt>
    fe54:	cbz	w0, fb5c <lzma_mode_is_supported@@XZ_5.0+0x68c>
    fe58:	add	x28, x28, #0x4
    fe5c:	cmp	x28, #0x10
    fe60:	b.ne	fe40 <lzma_mode_is_supported@@XZ_5.0+0x970>  // b.any
    fe64:	add	w8, w27, #0x4
    fe68:	subs	w23, w22, #0x2
    fe6c:	b	fcc4 <lzma_mode_is_supported@@XZ_5.0+0x7f4>
    fe70:	sub	sp, sp, #0x1d0
    fe74:	mov	w8, #0xedc                 	// #3804
    fe78:	mov	w9, #0xee0                 	// #3808
    fe7c:	movk	w8, #0x1, lsl #16
    fe80:	movk	w9, #0x1, lsl #16
    fe84:	ldr	w10, [x0, x8]
    fe88:	ldr	w8, [x0, x9]
    fe8c:	mov	w9, #0xe90                 	// #3728
    fe90:	movk	w9, #0x1, lsl #16
    fe94:	stp	x24, x23, [sp, #416]
    fe98:	stp	x22, x21, [sp, #432]
    fe9c:	mov	x21, x0
    fea0:	cmp	w10, w8
    fea4:	add	x23, x0, x9
    fea8:	stp	x29, x30, [sp, #368]
    feac:	stp	x28, x27, [sp, #384]
    feb0:	stp	x26, x25, [sp, #400]
    feb4:	stp	x20, x19, [sp, #448]
    feb8:	add	x29, sp, #0x170
    febc:	b.ne	fee4 <lzma_mode_is_supported@@XZ_5.0+0xa14>  // b.any
    fec0:	ldr	w8, [x1, #28]
    fec4:	mov	x27, x1
    fec8:	str	w4, [sp, #184]
    fecc:	cbz	w8, ff18 <lzma_mode_is_supported@@XZ_5.0+0xa48>
    fed0:	ldr	w19, [x27, #96]
    fed4:	ldr	w8, [x21, #2948]
    fed8:	ldr	w24, [x21, #2952]
    fedc:	stur	w8, [x29, #-12]
    fee0:	b	1018c <lzma_mode_is_supported@@XZ_5.0+0xcbc>
    fee4:	mov	w9, #0x2c                  	// #44
    fee8:	mov	w10, #0xef8                 	// #3832
    feec:	movk	w10, #0x1, lsl #16
    fef0:	mov	w11, #0xefc                 	// #3836
    fef4:	madd	x9, x8, x9, x21
    fef8:	movk	w11, #0x1, lsl #16
    fefc:	ldr	w10, [x9, x10]
    ff00:	ldr	w9, [x9, x11]
    ff04:	sub	w8, w10, w8
    ff08:	str	w9, [x2]
    ff0c:	str	w8, [x3]
    ff10:	str	w10, [x23, #80]
    ff14:	b	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>
    ff18:	ldr	w8, [x23, #4]
    ff1c:	mov	x22, x2
    ff20:	mov	x20, x3
    ff24:	cmp	w8, #0x80
    ff28:	b.cc	100e4 <lzma_mode_is_supported@@XZ_5.0+0xc14>  // b.lo, b.ul, b.last
    ff2c:	mov	w8, #0x2c8                 	// #712
    ff30:	movk	w8, #0x1, lsl #16
    ff34:	add	x13, x21, x8
    ff38:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
    ff3c:	ldr	x8, [x8, #3960]
    ff40:	mov	w10, #0x290                 	// #656
    ff44:	mov	w11, #0x690                 	// #1680
    ff48:	mov	x9, xzr
    ff4c:	movk	w10, #0x1, lsl #16
    ff50:	movk	w11, #0x1, lsl #16
    ff54:	mov	w12, #0x6efc                	// #28412
    ff58:	ldr	w14, [x23]
    ff5c:	cbz	w14, fffc <lzma_mode_is_supported@@XZ_5.0+0xb2c>
    ff60:	mov	x14, xzr
    ff64:	mov	w15, wzr
    ff68:	add	w16, w14, #0x40
    ff6c:	and	w17, w16, #0x1
    ff70:	lsr	w16, w16, #1
    ff74:	lsl	w18, w16, #1
    ff78:	add	x0, x21, x9, lsl #7
    ff7c:	add	x18, x0, x18
    ff80:	ldrh	w18, [x18, x12]
    ff84:	neg	w17, w17
    ff88:	and	w17, w17, #0x7f0
    ff8c:	cmp	w16, #0x1
    ff90:	eor	w17, w17, w18
    ff94:	lsr	x17, x17, #4
    ff98:	ldrb	w17, [x8, x17]
    ff9c:	add	w15, w15, w17
    ffa0:	b.ne	ff6c <lzma_mode_is_supported@@XZ_5.0+0xa9c>  // b.any
    ffa4:	add	x16, x21, x9, lsl #8
    ffa8:	add	x16, x16, x14, lsl #2
    ffac:	str	w15, [x16, x10]
    ffb0:	ldr	w15, [x23]
    ffb4:	add	x14, x14, #0x1
    ffb8:	cmp	x14, x15
    ffbc:	b.cc	ff64 <lzma_mode_is_supported@@XZ_5.0+0xa94>  // b.lo, b.ul, b.last
    ffc0:	cmp	w15, #0xf
    ffc4:	b.cc	fffc <lzma_mode_is_supported@@XZ_5.0+0xb2c>  // b.lo, b.ul, b.last
    ffc8:	mov	x14, xzr
    ffcc:	ldr	w15, [x13, x14, lsl #2]
    ffd0:	lsl	w16, w14, #3
    ffd4:	add	w16, w16, #0x70
    ffd8:	and	w16, w16, #0xfffffff0
    ffdc:	add	w15, w15, w16
    ffe0:	sub	w15, w15, #0x50
    ffe4:	str	w15, [x13, x14, lsl #2]
    ffe8:	ldr	w15, [x23]
    ffec:	add	x16, x14, #0xf
    fff0:	add	x14, x14, #0x1
    fff4:	cmp	x16, x15
    fff8:	b.cc	ffcc <lzma_mode_is_supported@@XZ_5.0+0xafc>  // b.lo, b.ul, b.last
    fffc:	add	x14, x21, x9, lsl #8
   10000:	ldr	q0, [x14, x10]
   10004:	add	x14, x21, x9, lsl #9
   10008:	add	x9, x9, #0x1
   1000c:	cmp	x9, #0x4
   10010:	add	x13, x13, #0x100
   10014:	str	q0, [x14, x11]
   10018:	b.ne	ff58 <lzma_mode_is_supported@@XZ_5.0+0xa88>  // b.any
   1001c:	adrp	x10, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   10020:	ldr	x10, [x10, #4008]
   10024:	mov	w11, #0x6a0                 	// #1696
   10028:	mov	w12, #0x290                 	// #656
   1002c:	movk	w11, #0x1, lsl #16
   10030:	movk	w12, #0x1, lsl #16
   10034:	add	x11, x21, x11
   10038:	add	x12, x21, x12
   1003c:	mov	w13, #0x70fa                	// #28922
   10040:	ldrb	w15, [x10, x9]
   10044:	mov	w17, #0x2                   	// #2
   10048:	mov	w14, wzr
   1004c:	ubfx	x16, x15, #1, #31
   10050:	bfxil	w17, w15, #0, #1
   10054:	sub	w16, w16, #0x1
   10058:	lsl	w17, w17, w16
   1005c:	add	x0, x21, w17, uxtw #1
   10060:	sub	w18, w9, w17
   10064:	sub	x17, x0, x15, lsl #1
   10068:	add	x17, x17, x13
   1006c:	mov	w0, #0x1                   	// #1
   10070:	ldrh	w1, [x17, w0, uxtw #1]
   10074:	and	w2, w18, #0x1
   10078:	neg	w2, w2
   1007c:	and	w2, w2, #0x7f0
   10080:	eor	w1, w2, w1
   10084:	lsr	x1, x1, #4
   10088:	ldrb	w1, [x8, x1]
   1008c:	lsr	w2, w18, #1
   10090:	bfi	w18, w0, #1, #31
   10094:	subs	w16, w16, #0x1
   10098:	add	w14, w14, w1
   1009c:	mov	w0, w18
   100a0:	mov	w18, w2
   100a4:	b.ne	10070 <lzma_mode_is_supported@@XZ_5.0+0xba0>  // b.any
   100a8:	mov	x16, xzr
   100ac:	add	x15, x12, x15, lsl #2
   100b0:	mov	x17, x11
   100b4:	ldr	w18, [x15, x16]
   100b8:	add	x16, x16, #0x100
   100bc:	cmp	x16, #0x400
   100c0:	add	w18, w18, w14
   100c4:	str	w18, [x17]
   100c8:	add	x17, x17, #0x200
   100cc:	b.ne	100b4 <lzma_mode_is_supported@@XZ_5.0+0xbe4>  // b.any
   100d0:	add	x9, x9, #0x1
   100d4:	cmp	x9, #0x80
   100d8:	add	x11, x11, #0x4
   100dc:	b.ne	10040 <lzma_mode_is_supported@@XZ_5.0+0xb70>  // b.any
   100e0:	str	wzr, [x23, #4]
   100e4:	ldr	w8, [x23, #72]
   100e8:	cmp	w8, #0x10
   100ec:	b.cc	1016c <lzma_mode_is_supported@@XZ_5.0+0xc9c>  // b.lo, b.ul, b.last
   100f0:	adrp	x10, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   100f4:	ldr	x10, [x10, #3960]
   100f8:	mov	w11, #0xe98                 	// #3736
   100fc:	mov	x8, xzr
   10100:	mov	w9, #0x71e0                	// #29152
   10104:	movk	w11, #0x1, lsl #16
   10108:	mov	w12, wzr
   1010c:	mov	w13, #0x1                   	// #1
   10110:	mov	w14, #0xfffffffc            	// #-4
   10114:	mov	w15, w8
   10118:	add	x16, x21, w13, uxtw #1
   1011c:	ldrh	w16, [x16, x9]
   10120:	and	w17, w15, #0x1
   10124:	neg	w17, w17
   10128:	and	w17, w17, #0x7f0
   1012c:	eor	w16, w17, w16
   10130:	lsr	x16, x16, #4
   10134:	ldrb	w16, [x10, x16]
   10138:	lsr	w17, w15, #1
   1013c:	bfi	w15, w13, #1, #31
   10140:	adds	w14, w14, #0x1
   10144:	add	w12, w12, w16
   10148:	mov	w13, w15
   1014c:	mov	w15, w17
   10150:	b.cc	10118 <lzma_mode_is_supported@@XZ_5.0+0xc48>  // b.lo, b.ul, b.last
   10154:	add	x13, x21, x8, lsl #2
   10158:	add	x8, x8, #0x1
   1015c:	cmp	x8, #0x10
   10160:	str	w12, [x13, x11]
   10164:	b.ne	10108 <lzma_mode_is_supported@@XZ_5.0+0xc38>  // b.any
   10168:	str	wzr, [x23, #72]
   1016c:	ldr	w19, [x27, #96]
   10170:	add	x2, x21, #0x2f4
   10174:	sub	x1, x29, #0xc
   10178:	mov	x0, x27
   1017c:	bl	cffc <lzma_mf_is_supported@@XZ_5.0+0x2c>
   10180:	mov	w24, w0
   10184:	mov	x3, x20
   10188:	mov	x2, x22
   1018c:	ldr	w9, [x27, #36]
   10190:	ldr	w8, [x27, #24]
   10194:	sub	w9, w9, w8
   10198:	add	w9, w9, #0x1
   1019c:	cmp	w9, #0x110
   101a0:	b.hi	101c0 <lzma_mode_is_supported@@XZ_5.0+0xcf0>  // b.pmore
   101a4:	cmp	w9, #0x1
   101a8:	b.hi	101c4 <lzma_mode_is_supported@@XZ_5.0+0xcf4>  // b.pmore
   101ac:	mov	w8, #0xffffffff            	// #-1
   101b0:	mov	w9, #0x1                   	// #1
   101b4:	str	w8, [x2]
   101b8:	str	w9, [x3]
   101bc:	b	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>
   101c0:	mov	w9, #0x111                 	// #273
   101c4:	ldr	x11, [x27]
   101c8:	mov	w13, #0xee4                 	// #3812
   101cc:	movk	w13, #0x1, lsl #16
   101d0:	add	x6, x21, x13
   101d4:	add	x13, x11, x8
   101d8:	stp	x2, x3, [x29, #-168]
   101dc:	mov	x11, x13
   101e0:	ldrb	w25, [x11, #-1]!
   101e4:	mov	w14, #0x6d24                	// #27940
   101e8:	add	x2, x21, x14
   101ec:	mov	w14, w9
   101f0:	mov	x12, xzr
   101f4:	mov	w10, wzr
   101f8:	sub	x8, x13, #0x2
   101fc:	sub	x14, x14, #0x2
   10200:	add	x15, x13, #0x1
   10204:	sub	x16, x29, #0x20
   10208:	add	x17, x21, x12, lsl #2
   1020c:	ldr	w18, [x17, #740]
   10210:	sub	x17, x8, x18
   10214:	ldrb	w0, [x17]
   10218:	cmp	w25, w0
   1021c:	b.ne	10268 <lzma_mode_is_supported@@XZ_5.0+0xd98>  // b.any
   10220:	ldrb	w0, [x13]
   10224:	ldrb	w17, [x17, #1]
   10228:	cmp	w0, w17
   1022c:	b.ne	10268 <lzma_mode_is_supported@@XZ_5.0+0xd98>  // b.any
   10230:	cmp	w9, #0x3
   10234:	b.cc	10270 <lzma_mode_is_supported@@XZ_5.0+0xda0>  // b.lo, b.ul, b.last
   10238:	neg	x18, x18
   1023c:	mov	x17, xzr
   10240:	add	x18, x13, x18
   10244:	ldrb	w0, [x15, x17]
   10248:	ldrb	w1, [x18, x17]
   1024c:	cmp	w0, w1
   10250:	b.ne	10278 <lzma_mode_is_supported@@XZ_5.0+0xda8>  // b.any
   10254:	add	x17, x17, #0x1
   10258:	cmp	w14, w17
   1025c:	b.ne	10244 <lzma_mode_is_supported@@XZ_5.0+0xd74>  // b.any
   10260:	mov	w17, w9
   10264:	b	1027c <lzma_mode_is_supported@@XZ_5.0+0xdac>
   10268:	str	wzr, [x16, x12, lsl #2]
   1026c:	b	1028c <lzma_mode_is_supported@@XZ_5.0+0xdbc>
   10270:	mov	w17, #0x2                   	// #2
   10274:	b	1027c <lzma_mode_is_supported@@XZ_5.0+0xdac>
   10278:	add	w17, w17, #0x2
   1027c:	str	w17, [x16, x12, lsl #2]
   10280:	ldr	w18, [x16, w10, uxtw #2]
   10284:	cmp	w17, w18
   10288:	csel	w10, w12, w10, hi  // hi = pmore
   1028c:	add	x12, x12, #0x1
   10290:	cmp	x12, #0x4
   10294:	b.ne	10208 <lzma_mode_is_supported@@XZ_5.0+0xd38>  // b.any
   10298:	sub	x9, x29, #0x20
   1029c:	ldr	w22, [x9, w10, uxtw #2]
   102a0:	cmp	w22, w19
   102a4:	b.cs	102ec <lzma_mode_is_supported@@XZ_5.0+0xe1c>  // b.hs, b.nlast
   102a8:	ldp	x12, x10, [x29, #-168]
   102ac:	cmp	w24, w19
   102b0:	b.cs	10320 <lzma_mode_is_supported@@XZ_5.0+0xe50>  // b.hs, b.nlast
   102b4:	ldr	w13, [x21, #740]
   102b8:	cmp	w22, #0x1
   102bc:	mvn	x9, x13
   102c0:	ldrb	w26, [x9, x11]
   102c4:	b.hi	10380 <lzma_mode_is_supported@@XZ_5.0+0xeb0>  // b.pmore
   102c8:	cmp	w24, #0x1
   102cc:	b.hi	10380 <lzma_mode_is_supported@@XZ_5.0+0xeb0>  // b.pmore
   102d0:	cmp	w25, w26
   102d4:	b.eq	10380 <lzma_mode_is_supported@@XZ_5.0+0xeb0>  // b.none
   102d8:	mov	w8, #0xffffffff            	// #-1
   102dc:	mov	w9, #0x1                   	// #1
   102e0:	str	w8, [x12]
   102e4:	str	w9, [x10]
   102e8:	b	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>
   102ec:	ldur	x8, [x29, #-168]
   102f0:	subs	w20, w22, #0x1
   102f4:	str	w10, [x8]
   102f8:	ldur	x8, [x29, #-160]
   102fc:	str	w22, [x8]
   10300:	b.eq	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>  // b.none
   10304:	ldr	x8, [x27, #56]
   10308:	mov	x0, x27
   1030c:	mov	w1, w20
   10310:	blr	x8
   10314:	ldr	w8, [x27, #28]
   10318:	add	w8, w8, w20
   1031c:	b	1035c <lzma_mode_is_supported@@XZ_5.0+0xe8c>
   10320:	ldur	w8, [x29, #-12]
   10324:	str	w24, [x10]
   10328:	sub	w8, w8, #0x1
   1032c:	add	x8, x21, w8, uxtw #3
   10330:	ldr	w8, [x8, #760]
   10334:	subs	w21, w24, #0x1
   10338:	add	w8, w8, #0x4
   1033c:	str	w8, [x12]
   10340:	b.eq	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>  // b.none
   10344:	ldr	x8, [x27, #56]
   10348:	mov	x0, x27
   1034c:	mov	w1, w21
   10350:	blr	x8
   10354:	ldr	w8, [x27, #28]
   10358:	add	w8, w8, w21
   1035c:	str	w8, [x27, #28]
   10360:	ldp	x20, x19, [sp, #448]
   10364:	ldp	x22, x21, [sp, #432]
   10368:	ldp	x24, x23, [sp, #416]
   1036c:	ldp	x26, x25, [sp, #400]
   10370:	ldp	x28, x27, [sp, #384]
   10374:	ldp	x29, x30, [sp, #368]
   10378:	add	sp, sp, #0x1d0
   1037c:	ret
   10380:	ldr	w28, [x21, #736]
   10384:	ldr	w1, [sp, #184]
   10388:	mov	w10, #0x6b9c                	// #27548
   1038c:	stur	x13, [x29, #-48]
   10390:	str	w28, [x6]
   10394:	ldr	w9, [x21, #2960]
   10398:	add	x11, x21, x28, lsl #5
   1039c:	stur	x2, [x29, #-176]
   103a0:	str	x27, [sp, #168]
   103a4:	and	w9, w9, w1
   103a8:	stur	x9, [x29, #-40]
   103ac:	add	x9, x11, w9, uxtw #1
   103b0:	stur	x11, [x29, #-56]
   103b4:	ldrh	w9, [x9, x10]
   103b8:	adrp	x20, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   103bc:	ldr	x20, [x20, #3960]
   103c0:	ldrb	w2, [x8]
   103c4:	lsr	x19, x9, #4
   103c8:	cmp	x28, #0x6
   103cc:	ldrb	w27, [x20, x19]
   103d0:	cset	w3, hi  // hi = pmore
   103d4:	mov	x0, x21
   103d8:	mov	w4, w26
   103dc:	mov	w5, w25
   103e0:	str	x6, [sp, #24]
   103e4:	bl	119d8 <lzma_mode_is_supported@@XZ_5.0+0x2508>
   103e8:	ldr	x15, [sp, #24]
   103ec:	add	w12, w0, w27
   103f0:	mov	w8, #0xffffffff            	// #-1
   103f4:	add	x13, x21, x28, lsl #1
   103f8:	strb	wzr, [x15, #48]
   103fc:	str	w12, [x15, #60]
   10400:	str	w8, [x15, #68]
   10404:	mov	w9, #0x6d1c                	// #27932
   10408:	ldrh	w10, [x13, x9]
   1040c:	eor	x9, x19, #0x7f
   10410:	ldrb	w9, [x20, x9]
   10414:	cmp	w25, w26
   10418:	lsr	x10, x10, #4
   1041c:	eor	x11, x10, #0x7f
   10420:	ldrb	w11, [x20, x11]
   10424:	add	w11, w11, w9
   10428:	b.ne	10480 <lzma_mode_is_supported@@XZ_5.0+0xfb0>  // b.any
   1042c:	ldur	x14, [x29, #-40]
   10430:	ldur	x17, [x29, #-56]
   10434:	mov	w8, #0x6d34                	// #27956
   10438:	ldrh	w8, [x13, x8]
   1043c:	mov	w13, #0x6d7c                	// #28028
   10440:	add	x14, x17, x14, lsl #1
   10444:	ldrh	w13, [x14, x13]
   10448:	lsr	x8, x8, #4
   1044c:	ldrb	w8, [x20, x8]
   10450:	lsr	x13, x13, #4
   10454:	ldrb	w13, [x20, x13]
   10458:	add	w8, w11, w8
   1045c:	add	w13, w8, w13
   10460:	cmp	w13, w12
   10464:	b.cs	1047c <lzma_mode_is_supported@@XZ_5.0+0xfac>  // b.hs, b.nlast
   10468:	mov	w8, wzr
   1046c:	str	w13, [x15, #60]
   10470:	str	wzr, [x15, #68]
   10474:	strb	wzr, [x15, #48]
   10478:	b	10480 <lzma_mode_is_supported@@XZ_5.0+0xfb0>
   1047c:	mov	w8, #0xffffffff            	// #-1
   10480:	cmp	w24, w22
   10484:	csel	w16, w24, w22, hi  // hi = pmore
   10488:	cmp	w16, #0x1
   1048c:	b.hi	104a8 <lzma_mode_is_supported@@XZ_5.0+0xfd8>  // b.pmore
   10490:	ldur	x9, [x29, #-168]
   10494:	str	w8, [x9]
   10498:	ldur	x9, [x29, #-160]
   1049c:	mov	w8, #0x1                   	// #1
   104a0:	str	w8, [x9]
   104a4:	b	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>
   104a8:	add	x8, x21, #0x2e4
   104ac:	stur	x8, [x29, #-64]
   104b0:	ldur	x8, [x29, #-48]
   104b4:	mov	w13, #0xf04                 	// #3844
   104b8:	movk	w13, #0x1, lsl #16
   104bc:	mov	x12, xzr
   104c0:	add	x13, x21, x13
   104c4:	str	wzr, [x15, #64]
   104c8:	str	w8, [x15, #28]
   104cc:	add	x14, x21, x12
   104d0:	ldr	w14, [x14, #744]
   104d4:	str	w14, [x13, x12]
   104d8:	add	x12, x12, #0x4
   104dc:	cmp	x12, #0xc
   104e0:	b.ne	104cc <lzma_mode_is_supported@@XZ_5.0+0xffc>  // b.any
   104e4:	ldr	x27, [sp, #168]
   104e8:	mov	w13, #0xef4                 	// #3828
   104ec:	mov	w12, #0x2c                  	// #44
   104f0:	movk	w13, #0x1, lsl #16
   104f4:	umaddl	x12, w16, w12, x13
   104f8:	mov	w13, #0x40000000            	// #1073741824
   104fc:	mov	w14, w16
   10500:	stur	w16, [x29, #-56]
   10504:	sub	w14, w14, #0x1
   10508:	str	w13, [x21, x12]
   1050c:	cmp	w14, #0x1
   10510:	sub	x12, x12, #0x2c
   10514:	b.hi	10504 <lzma_mode_is_supported@@XZ_5.0+0x1034>  // b.pmore
   10518:	ldur	x8, [x29, #-40]
   1051c:	add	x2, x21, x28, lsl #5
   10520:	add	x0, x21, x28, lsl #1
   10524:	mov	w17, #0x6d34                	// #27956
   10528:	mov	w18, #0x6d4c                	// #27980
   1052c:	mov	w1, #0x6d64                	// #28004
   10530:	mov	w3, #0x6d7c                	// #28028
   10534:	mov	w4, #0x440                 	// #1088
   10538:	add	x2, x2, x8, lsl #1
   1053c:	mov	w5, #0xbe4c                	// #48716
   10540:	mov	w15, #0xef4                 	// #3828
   10544:	mov	w16, #0xef8                 	// #3832
   10548:	add	x17, x0, x17
   1054c:	add	x18, x0, x18
   10550:	add	x0, x0, x1
   10554:	mov	w1, #0xefc                 	// #3836
   10558:	add	x2, x2, x3
   1055c:	mov	w3, #0xee8                 	// #3816
   10560:	madd	x4, x8, x4, x21
   10564:	mov	x12, xzr
   10568:	sub	x13, x29, #0x20
   1056c:	mov	w14, #0x2c                  	// #44
   10570:	movk	w15, #0x1, lsl #16
   10574:	movk	w16, #0x1, lsl #16
   10578:	movk	w1, #0x1, lsl #16
   1057c:	movk	w3, #0x1, lsl #16
   10580:	add	x4, x4, x5
   10584:	mov	w5, #0x2                   	// #2
   10588:	ldr	w6, [x13, x12, lsl #2]
   1058c:	subs	w7, w6, #0x2
   10590:	b.cc	1065c <lzma_mode_is_supported@@XZ_5.0+0x118c>  // b.lo, b.ul, b.last
   10594:	ldrh	w19, [x17]
   10598:	lsr	x20, x19, #4
   1059c:	cbz	x12, 105c8 <lzma_mode_is_supported@@XZ_5.0+0x10f8>
   105a0:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   105a4:	ldrh	w22, [x18]
   105a8:	ldr	x8, [x8, #3960]
   105ac:	eor	x19, x20, #0x7f
   105b0:	cmp	x12, #0x1
   105b4:	lsr	x22, x22, #4
   105b8:	ldrb	w20, [x8, x19]
   105bc:	b.ne	105e8 <lzma_mode_is_supported@@XZ_5.0+0x1118>  // b.any
   105c0:	ldrb	w22, [x8, x22]
   105c4:	b	1060c <lzma_mode_is_supported@@XZ_5.0+0x113c>
   105c8:	ldrh	w19, [x2]
   105cc:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   105d0:	ldr	x8, [x8, #3960]
   105d4:	lsr	x19, x19, #4
   105d8:	eor	x19, x19, #0x7f
   105dc:	ldrb	w20, [x8, x20]
   105e0:	ldrb	w22, [x8, x19]
   105e4:	b	1060c <lzma_mode_is_supported@@XZ_5.0+0x113c>
   105e8:	eor	x19, x22, #0x7f
   105ec:	ldrh	w22, [x0]
   105f0:	ldrb	w19, [x8, x19]
   105f4:	sub	w25, w5, w12
   105f8:	and	x25, x25, #0x7f0
   105fc:	eor	x25, x25, x22
   10600:	add	w22, w19, w20
   10604:	lsr	x19, x25, #4
   10608:	ldrb	w20, [x8, x19]
   1060c:	add	w19, w22, w20
   10610:	add	w20, w19, w11
   10614:	add	x7, x4, w7, uxtw #2
   10618:	umaddl	x22, w6, w14, x21
   1061c:	ldr	w19, [x7]
   10620:	add	x22, x22, x15
   10624:	ldr	w26, [x22]
   10628:	mov	w6, w6
   1062c:	add	w25, w20, w19
   10630:	cmp	w25, w26
   10634:	b.cs	1064c <lzma_mode_is_supported@@XZ_5.0+0x117c>  // b.hs, b.nlast
   10638:	madd	x19, x6, x14, x21
   1063c:	str	w25, [x22]
   10640:	str	wzr, [x19, x16]
   10644:	str	w12, [x19, x1]
   10648:	strb	wzr, [x19, x3]
   1064c:	sub	w6, w6, #0x1
   10650:	cmp	w6, #0x1
   10654:	sub	x7, x7, #0x4
   10658:	b.hi	10618 <lzma_mode_is_supported@@XZ_5.0+0x1148>  // b.pmore
   1065c:	add	x12, x12, #0x1
   10660:	cmp	x12, #0x4
   10664:	b.ne	10588 <lzma_mode_is_supported@@XZ_5.0+0x10b8>  // b.any
   10668:	ldur	w11, [x29, #-32]
   1066c:	mov	w12, #0x2                   	// #2
   10670:	cmp	w11, #0x2
   10674:	csinc	w15, w12, w11, cc  // cc = lo, ul, last
   10678:	cmp	w15, w24
   1067c:	b.ls	11778 <lzma_mode_is_supported@@XZ_5.0+0x22a8>  // b.plast
   10680:	ldur	w4, [x29, #-56]
   10684:	ldr	x2, [sp, #24]
   10688:	cmn	w4, #0x1
   1068c:	b.eq	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>  // b.none
   10690:	ldur	x8, [x29, #-64]
   10694:	cmp	w4, #0x2
   10698:	mov	w3, #0x1                   	// #1
   1069c:	ldr	q0, [x8]
   106a0:	stur	q0, [x29, #-32]
   106a4:	b.cc	11900 <lzma_mode_is_supported@@XZ_5.0+0x2430>  // b.lo, b.ul, b.last
   106a8:	add	x8, x21, #0xb84
   106ac:	ldr	w20, [sp, #184]
   106b0:	str	x8, [sp, #40]
   106b4:	add	x8, x21, #0x2f4
   106b8:	str	x8, [sp, #32]
   106bc:	mov	w8, #0xf20                 	// #3872
   106c0:	movk	w8, #0x1, lsl #16
   106c4:	sub	x9, x29, #0x20
   106c8:	add	w10, w20, #0x1
   106cc:	mov	w22, #0xf00                 	// #3840
   106d0:	mov	w25, #0xee4                 	// #3812
   106d4:	add	x8, x21, x8
   106d8:	stur	w10, [x29, #-180]
   106dc:	mov	w10, #0xffe                 	// #4094
   106e0:	movk	w22, #0x1, lsl #16
   106e4:	movk	w25, #0x1, lsl #16
   106e8:	str	x8, [sp, #176]
   106ec:	orr	x8, x9, #0x4
   106f0:	mov	w26, #0x1                   	// #1
   106f4:	stur	xzr, [x29, #-72]
   106f8:	str	w10, [sp, #116]
   106fc:	str	x8, [sp]
   10700:	ldp	x2, x1, [sp, #32]
   10704:	mov	x0, x27
   10708:	stur	w4, [x29, #-56]
   1070c:	bl	cffc <lzma_mf_is_supported@@XZ_5.0+0x2c>
   10710:	ldr	w18, [x27, #96]
   10714:	str	w0, [x21, #2952]
   10718:	cmp	w0, w18
   1071c:	b.cs	118f8 <lzma_mode_is_supported@@XZ_5.0+0x2428>  // b.hs, b.nlast
   10720:	ldur	x8, [x29, #-72]
   10724:	ldr	x17, [x27]
   10728:	ldr	w1, [x27, #24]
   1072c:	ldr	w10, [x27, #36]
   10730:	add	x16, x8, #0x1
   10734:	mov	w8, #0xfff                 	// #4095
   10738:	mov	w14, #0x2c                  	// #44
   1073c:	sub	w11, w8, w26
   10740:	madd	x12, x16, x14, x21
   10744:	mov	w8, #0xef8                 	// #3832
   10748:	mov	w13, #0xee8                 	// #3816
   1074c:	madd	x9, x26, x14, x21
   10750:	movk	w8, #0x1, lsl #16
   10754:	movk	w13, #0x1, lsl #16
   10758:	add	x19, x12, x22
   1075c:	add	x12, x17, x1
   10760:	sub	w10, w10, w1
   10764:	ldr	w15, [x21, #2948]
   10768:	ldr	w8, [x9, x8]
   1076c:	ldrb	w9, [x9, x13]
   10770:	stp	x1, x17, [sp, #64]
   10774:	sub	x17, x12, #0x1
   10778:	add	w12, w10, #0x1
   1077c:	cmp	w12, w11
   10780:	csinc	w10, w11, w10, cs  // cs = hs, nlast
   10784:	stur	w10, [x29, #-76]
   10788:	add	w10, w26, w20
   1078c:	stur	w12, [x29, #-104]
   10790:	stur	w10, [x29, #-148]
   10794:	stur	w15, [x29, #-92]
   10798:	cbz	w9, 107e0 <lzma_mode_is_supported@@XZ_5.0+0x1310>
   1079c:	mov	w11, #0xee9                 	// #3817
   107a0:	madd	x10, x26, x14, x21
   107a4:	movk	w11, #0x1, lsl #16
   107a8:	ldrb	w10, [x10, x11]
   107ac:	sub	w8, w8, #0x1
   107b0:	cbz	w10, 10800 <lzma_mode_is_supported@@XZ_5.0+0x1330>
   107b4:	add	x10, x21, x25
   107b8:	madd	x11, x26, x14, x10
   107bc:	ldp	w12, w11, [x11, #8]
   107c0:	mul	x12, x12, x14
   107c4:	ldr	w10, [x10, x12]
   107c8:	cmp	w11, #0x3
   107cc:	b.hi	1080c <lzma_mode_is_supported@@XZ_5.0+0x133c>  // b.pmore
   107d0:	cmp	w10, #0x7
   107d4:	mov	w10, #0xb                   	// #11
   107d8:	mov	w11, #0x8                   	// #8
   107dc:	b	10818 <lzma_mode_is_supported@@XZ_5.0+0x1348>
   107e0:	madd	x10, x8, x14, x21
   107e4:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   107e8:	ldr	w10, [x10, x25]
   107ec:	ldr	x13, [x13, #3960]
   107f0:	mov	w12, #0xefc                 	// #3836
   107f4:	sub	x27, x29, #0x20
   107f8:	movk	w12, #0x1, lsl #16
   107fc:	b	10850 <lzma_mode_is_supported@@XZ_5.0+0x1380>
   10800:	umaddl	x10, w8, w14, x21
   10804:	ldr	w10, [x10, x25]
   10808:	b	1081c <lzma_mode_is_supported@@XZ_5.0+0x134c>
   1080c:	cmp	w10, #0x7
   10810:	mov	w10, #0xa                   	// #10
   10814:	mov	w11, #0x7                   	// #7
   10818:	csel	w10, w11, w10, cc  // cc = lo, ul, last
   1081c:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   10820:	ldr	x13, [x13, #3960]
   10824:	cmp	w10, #0xa
   10828:	mov	w11, #0xfffffffa            	// #-6
   1082c:	mov	w15, #0xfffffffd            	// #-3
   10830:	csel	w11, w15, w11, cc  // cc = lo, ul, last
   10834:	mov	w12, #0xefc                 	// #3836
   10838:	cmp	w10, #0x4
   1083c:	add	w10, w11, w10
   10840:	sub	x27, x29, #0x20
   10844:	movk	w12, #0x1, lsl #16
   10848:	csel	w10, wzr, w10, cc  // cc = lo, ul, last
   1084c:	mov	w8, w8
   10850:	sub	x11, x26, #0x1
   10854:	cmp	x8, x11
   10858:	stur	x17, [x29, #-120]
   1085c:	str	x16, [sp, #88]
   10860:	str	w18, [sp, #144]
   10864:	str	w0, [sp, #52]
   10868:	b.ne	10898 <lzma_mode_is_supported@@XZ_5.0+0x13c8>  // b.any
   1086c:	madd	x8, x26, x14, x21
   10870:	ldr	w8, [x8, x12]
   10874:	cbz	w8, 10994 <lzma_mode_is_supported@@XZ_5.0+0x14c4>
   10878:	cmp	w10, #0xa
   1087c:	mov	w8, #0xfffffffa            	// #-6
   10880:	mov	w9, #0xfffffffd            	// #-3
   10884:	csel	w8, w9, w8, cc  // cc = lo, ul, last
   10888:	add	w8, w8, w10
   1088c:	cmp	w10, #0x4
   10890:	csel	w20, wzr, w8, cc  // cc = lo, ul, last
   10894:	b	109e0 <lzma_mode_is_supported@@XZ_5.0+0x1510>
   10898:	cbz	w9, 108e8 <lzma_mode_is_supported@@XZ_5.0+0x1418>
   1089c:	mov	w11, #0xee9                 	// #3817
   108a0:	madd	x9, x26, x14, x21
   108a4:	movk	w11, #0x1, lsl #16
   108a8:	ldrb	w9, [x9, x11]
   108ac:	cbz	w9, 108e8 <lzma_mode_is_supported@@XZ_5.0+0x1418>
   108b0:	mov	w9, #0xef0                 	// #3824
   108b4:	madd	x8, x26, x14, x21
   108b8:	movk	w9, #0x1, lsl #16
   108bc:	mov	w11, #0xeec                 	// #3820
   108c0:	ldr	w9, [x8, x9]
   108c4:	movk	w11, #0x1, lsl #16
   108c8:	ldr	w8, [x8, x11]
   108cc:	cmp	w10, #0x7
   108d0:	mov	w10, #0xb                   	// #11
   108d4:	mov	w11, #0x8                   	// #8
   108d8:	csel	w20, w11, w10, cc  // cc = lo, ul, last
   108dc:	cmp	w9, #0x3
   108e0:	b.ls	10908 <lzma_mode_is_supported@@XZ_5.0+0x1438>  // b.plast
   108e4:	b	109b8 <lzma_mode_is_supported@@XZ_5.0+0x14e8>
   108e8:	madd	x9, x26, x14, x21
   108ec:	ldr	w9, [x9, x12]
   108f0:	cmp	w9, #0x3
   108f4:	b.hi	109a8 <lzma_mode_is_supported@@XZ_5.0+0x14d8>  // b.pmore
   108f8:	cmp	w10, #0x7
   108fc:	mov	w10, #0xb                   	// #11
   10900:	mov	w11, #0x8                   	// #8
   10904:	csel	w20, w11, w10, cc  // cc = lo, ul, last
   10908:	madd	x10, x8, x14, x21
   1090c:	add	x10, x10, w9, uxtw #2
   10910:	ldr	w10, [x10, x22]
   10914:	stur	w10, [x29, #-32]
   10918:	mov	w10, #0x1                   	// #1
   1091c:	cbz	w9, 10948 <lzma_mode_is_supported@@XZ_5.0+0x1478>
   10920:	sub	w11, w10, #0x1
   10924:	madd	x12, x8, x14, x21
   10928:	add	x11, x12, w11, uxtw #2
   1092c:	ldr	w11, [x11, x22]
   10930:	str	w11, [x27, w10, uxtw #2]
   10934:	add	w10, w10, #0x1
   10938:	cmp	w10, w9
   1093c:	b.ls	10920 <lzma_mode_is_supported@@XZ_5.0+0x1450>  // b.plast
   10940:	cmp	w10, #0x3
   10944:	b.hi	109e0 <lzma_mode_is_supported@@XZ_5.0+0x1510>  // b.pmore
   10948:	mov	w11, #0xb                   	// #11
   1094c:	mov	w9, w10
   10950:	mul	x8, x8, x11
   10954:	cmp	w10, #0x3
   10958:	mov	w11, #0x3                   	// #3
   1095c:	add	x8, x8, w10, uxtw
   10960:	csel	x9, x9, x11, hi  // hi = pmore
   10964:	add	x8, x21, x8, lsl #2
   10968:	sub	x9, x9, w10, uxtw
   1096c:	add	x1, x8, x22
   10970:	lsl	x8, x9, #2
   10974:	add	x0, x27, w10, uxtw #2
   10978:	add	x2, x8, #0x4
   1097c:	bl	3060 <memcpy@plt>
   10980:	adrp	x13, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   10984:	ldur	x17, [x29, #-120]
   10988:	ldr	x13, [x13, #3960]
   1098c:	mov	w14, #0x2c                  	// #44
   10990:	b	109e0 <lzma_mode_is_supported@@XZ_5.0+0x1510>
   10994:	cmp	w10, #0x7
   10998:	mov	w8, #0xb                   	// #11
   1099c:	mov	w9, #0x9                   	// #9
   109a0:	csel	w20, w9, w8, cc  // cc = lo, ul, last
   109a4:	b	109e0 <lzma_mode_is_supported@@XZ_5.0+0x1510>
   109a8:	cmp	w10, #0x7
   109ac:	mov	w10, #0xa                   	// #10
   109b0:	mov	w11, #0x7                   	// #7
   109b4:	csel	w20, w11, w10, cc  // cc = lo, ul, last
   109b8:	mov	w10, #0xf08                 	// #3848
   109bc:	madd	x8, x8, x14, x21
   109c0:	movk	w10, #0x1, lsl #16
   109c4:	sub	w9, w9, #0x4
   109c8:	ldr	w10, [x8, x10]
   109cc:	ldr	x8, [x8, x22]
   109d0:	stur	w9, [x29, #-32]
   109d4:	ldr	x9, [sp]
   109d8:	str	w10, [x9, #8]
   109dc:	str	x8, [x9]
   109e0:	ldur	q0, [x29, #-32]
   109e4:	madd	x8, x26, x14, x21
   109e8:	add	x22, x8, x25
   109ec:	mov	x10, x17
   109f0:	str	w20, [x22]
   109f4:	str	q0, [x19]
   109f8:	ldur	w24, [x29, #-32]
   109fc:	ldr	w11, [x22, #16]
   10a00:	ldrb	w5, [x17]
   10a04:	ldrb	w2, [x10, #-1]!
   10a08:	ldr	w9, [x21, #2960]
   10a0c:	ldur	w1, [x29, #-148]
   10a10:	mov	w8, w20
   10a14:	str	x8, [sp, #136]
   10a18:	add	x8, x21, x8, lsl #5
   10a1c:	stur	x9, [x29, #-88]
   10a20:	and	w9, w9, w1
   10a24:	stur	x9, [x29, #-40]
   10a28:	add	x8, x8, w9, uxtw #1
   10a2c:	mov	w9, #0x6b9c                	// #27548
   10a30:	ldrh	w8, [x8, x9]
   10a34:	sub	x9, x10, x24
   10a38:	ldrb	w4, [x9]
   10a3c:	cmp	w20, #0x6
   10a40:	lsr	x25, x8, #4
   10a44:	ldrb	w8, [x13, x25]
   10a48:	cset	w3, hi  // hi = pmore
   10a4c:	mov	x0, x21
   10a50:	stur	x10, [x29, #-64]
   10a54:	stur	w11, [x29, #-80]
   10a58:	add	w20, w11, w8
   10a5c:	mov	w19, w4
   10a60:	mov	w28, w5
   10a64:	bl	119d8 <lzma_mode_is_supported@@XZ_5.0+0x2508>
   10a68:	ldr	w10, [x22, #60]!
   10a6c:	add	w8, w20, w0
   10a70:	add	x9, x26, #0x1
   10a74:	stur	x26, [x29, #-48]
   10a78:	cmp	w8, w10
   10a7c:	str	x9, [sp, #120]
   10a80:	b.cs	10ad4 <lzma_mode_is_supported@@XZ_5.0+0x1604>  // b.hs, b.nlast
   10a84:	mov	w10, #0x2c                  	// #44
   10a88:	mov	w6, #0xef8                 	// #3832
   10a8c:	mov	w30, #0xefc                 	// #3836
   10a90:	mov	w7, #0xee8                 	// #3816
   10a94:	madd	x9, x9, x10, x21
   10a98:	movk	w6, #0x1, lsl #16
   10a9c:	movk	w30, #0x1, lsl #16
   10aa0:	mov	w10, #0xffffffff            	// #-1
   10aa4:	movk	w7, #0x1, lsl #16
   10aa8:	str	w8, [x22]
   10aac:	str	w26, [x9, x6]
   10ab0:	str	w10, [x9, x30]
   10ab4:	strb	wzr, [x9, x7]
   10ab8:	adrp	x3, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   10abc:	ldr	x3, [x3, #3960]
   10ac0:	ldur	w4, [x29, #-56]
   10ac4:	mov	w9, #0x1                   	// #1
   10ac8:	mov	w10, w8
   10acc:	mov	w5, #0x2c                  	// #44
   10ad0:	b	10b00 <lzma_mode_is_supported@@XZ_5.0+0x1630>
   10ad4:	adrp	x3, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   10ad8:	ldr	x3, [x3, #3960]
   10adc:	ldur	w4, [x29, #-56]
   10ae0:	mov	w6, #0xef8                 	// #3832
   10ae4:	mov	w7, #0xee8                 	// #3816
   10ae8:	mov	w30, #0xefc                 	// #3836
   10aec:	mov	w9, wzr
   10af0:	mov	w5, #0x2c                  	// #44
   10af4:	movk	w6, #0x1, lsl #16
   10af8:	movk	w7, #0x1, lsl #16
   10afc:	movk	w30, #0x1, lsl #16
   10b00:	ldr	x11, [sp, #136]
   10b04:	mov	w12, #0x6d1c                	// #27932
   10b08:	ldp	w13, w15, [x29, #-80]
   10b0c:	ldur	x1, [x29, #-120]
   10b10:	add	x11, x21, x11, lsl #1
   10b14:	ldrh	w11, [x11, x12]
   10b18:	eor	x12, x25, #0x7f
   10b1c:	ldrb	w12, [x3, x12]
   10b20:	ldr	w2, [sp, #144]
   10b24:	lsr	x17, x11, #4
   10b28:	eor	x11, x17, #0x7f
   10b2c:	ldrb	w11, [x3, x11]
   10b30:	add	w16, w13, w12
   10b34:	mov	w26, #0x440                 	// #1088
   10b38:	mov	w20, w19
   10b3c:	cmp	w19, w28
   10b40:	add	w0, w16, w11
   10b44:	b.ne	10be0 <lzma_mode_is_supported@@XZ_5.0+0x1710>  // b.any
   10b48:	ldr	x14, [sp, #120]
   10b4c:	ldur	x13, [x29, #-48]
   10b50:	madd	x11, x14, x5, x21
   10b54:	add	x11, x11, x6
   10b58:	ldr	w12, [x11]
   10b5c:	cmp	x13, x12
   10b60:	b.ls	10b70 <lzma_mode_is_supported@@XZ_5.0+0x16a0>  // b.plast
   10b64:	madd	x12, x14, x5, x21
   10b68:	ldr	w12, [x12, x30]
   10b6c:	cbz	w12, 10be0 <lzma_mode_is_supported@@XZ_5.0+0x1710>
   10b70:	ldr	x13, [sp, #136]
   10b74:	mov	w14, #0x6d34                	// #27956
   10b78:	mov	w19, #0xef4                 	// #3828
   10b7c:	movk	w19, #0x1, lsl #16
   10b80:	add	x12, x21, x13, lsl #1
   10b84:	ldrh	w12, [x12, x14]
   10b88:	ldur	x14, [x29, #-40]
   10b8c:	add	x13, x21, x13, lsl #5
   10b90:	lsr	x12, x12, #4
   10b94:	add	x13, x13, x14, lsl #1
   10b98:	mov	w14, #0x6d7c                	// #28028
   10b9c:	ldrh	w13, [x13, x14]
   10ba0:	ldrb	w12, [x3, x12]
   10ba4:	lsr	x13, x13, #4
   10ba8:	ldrb	w13, [x3, x13]
   10bac:	add	w12, w0, w12
   10bb0:	add	w12, w12, w13
   10bb4:	cmp	w12, w10
   10bb8:	b.hi	10be8 <lzma_mode_is_supported@@XZ_5.0+0x1718>  // b.pmore
   10bbc:	ldur	x9, [x29, #-48]
   10bc0:	str	w12, [x22]
   10bc4:	str	w9, [x11]
   10bc8:	ldr	x9, [sp, #120]
   10bcc:	madd	x9, x9, x5, x21
   10bd0:	str	wzr, [x9, x30]
   10bd4:	strb	wzr, [x9, x7]
   10bd8:	mov	w9, #0x1                   	// #1
   10bdc:	b	10be8 <lzma_mode_is_supported@@XZ_5.0+0x1718>
   10be0:	mov	w19, #0xef4                 	// #3828
   10be4:	movk	w19, #0x1, lsl #16
   10be8:	cmp	w15, #0x2
   10bec:	b.cc	115f4 <lzma_mode_is_supported@@XZ_5.0+0x2124>  // b.lo, b.ul, b.last
   10bf0:	cmp	w20, w28
   10bf4:	cset	w10, eq  // eq = none
   10bf8:	cmp	w15, w2
   10bfc:	orr	w9, w10, w9
   10c00:	csel	w25, w15, w2, cc  // cc = lo, ul, last
   10c04:	str	w16, [sp, #20]
   10c08:	str	x17, [sp, #8]
   10c0c:	tbnz	w9, #0, 10c78 <lzma_mode_is_supported@@XZ_5.0+0x17a8>
   10c10:	add	w12, w2, #0x1
   10c14:	cmp	w12, w15
   10c18:	csinc	w9, w15, w2, hi  // hi = pmore
   10c1c:	cmp	w9, #0x2
   10c20:	b.cc	10c78 <lzma_mode_is_supported@@XZ_5.0+0x17a8>  // b.lo, b.ul, b.last
   10c24:	ldr	w13, [sp, #116]
   10c28:	ldur	w20, [x29, #-104]
   10c2c:	ldp	x15, x14, [sp, #64]
   10c30:	mov	x10, xzr
   10c34:	cmp	w13, w20
   10c38:	csel	w13, w13, w20, cc  // cc = lo, ul, last
   10c3c:	sub	x11, x15, x24
   10c40:	cmp	w13, w12
   10c44:	add	x11, x14, x11
   10c48:	csel	w12, w13, w12, cc  // cc = lo, ul, last
   10c4c:	sub	x11, x11, #0x1
   10c50:	sub	w12, w12, #0x1
   10c54:	add	x13, x14, x15
   10c58:	ldrb	w14, [x13, x10]
   10c5c:	ldrb	w15, [x11, x10]
   10c60:	cmp	w14, w15
   10c64:	b.ne	1163c <lzma_mode_is_supported@@XZ_5.0+0x216c>  // b.any
   10c68:	add	x10, x10, #0x1
   10c6c:	cmp	w12, w10
   10c70:	b.ne	10c58 <lzma_mode_is_supported@@XZ_5.0+0x1788>  // b.any
   10c74:	b	11640 <lzma_mode_is_supported@@XZ_5.0+0x2170>
   10c78:	ldur	w20, [x29, #-104]
   10c7c:	ldr	x10, [sp, #136]
   10c80:	mov	x28, xzr
   10c84:	mov	w18, #0x2                   	// #2
   10c88:	stp	w25, w0, [sp, #96]
   10c8c:	add	x8, x21, x10, lsl #1
   10c90:	add	x9, x21, x10, lsl #5
   10c94:	cmp	w10, #0x7
   10c98:	ldp	x11, x10, [sp, #64]
   10c9c:	add	x12, x10, x11
   10ca0:	ldur	x11, [x29, #-40]
   10ca4:	mov	w10, #0xbe4c                	// #48716
   10ca8:	add	x14, x12, #0x1
   10cac:	stur	x12, [x29, #-128]
   10cb0:	madd	x10, x11, x26, x10
   10cb4:	stur	x10, [x29, #-104]
   10cb8:	mov	w10, #0x6d34                	// #27956
   10cbc:	add	x10, x8, x10
   10cc0:	stur	x10, [x29, #-112]
   10cc4:	mov	w10, #0x6d4c                	// #27980
   10cc8:	add	x10, x8, x10
   10ccc:	str	x10, [sp, #128]
   10cd0:	mov	w10, #0x6d64                	// #28004
   10cd4:	add	x8, x8, x10
   10cd8:	str	x8, [sp, #56]
   10cdc:	add	x8, x9, x11, lsl #1
   10ce0:	mov	w9, #0xb                   	// #11
   10ce4:	mov	w10, #0x8                   	// #8
   10ce8:	csel	x9, x10, x9, cc  // cc = lo, ul, last
   10cec:	str	x9, [sp, #104]
   10cf0:	ldr	w9, [sp, #116]
   10cf4:	mov	w10, #0x6d7c                	// #28028
   10cf8:	add	x8, x8, x10
   10cfc:	str	x8, [sp, #80]
   10d00:	cmp	w2, w9
   10d04:	csel	w8, w2, w9, cc  // cc = lo, ul, last
   10d08:	cmp	w8, w20
   10d0c:	csel	w8, w8, w20, cc  // cc = lo, ul, last
   10d10:	sub	w15, w8, #0x2
   10d14:	mov	w20, w4
   10d18:	stp	x15, x14, [x29, #-144]
   10d1c:	ldur	x8, [x29, #-64]
   10d20:	ldrb	w9, [x1]
   10d24:	sub	x8, x8, w24, uxtw
   10d28:	ldrb	w10, [x8]
   10d2c:	cmp	w9, w10
   10d30:	b.ne	10d88 <lzma_mode_is_supported@@XZ_5.0+0x18b8>  // b.any
   10d34:	ldrb	w9, [x1, #1]
   10d38:	ldrb	w10, [x8, #1]
   10d3c:	cmp	w9, w10
   10d40:	b.ne	10d88 <lzma_mode_is_supported@@XZ_5.0+0x18b8>  // b.any
   10d44:	mov	x9, xzr
   10d48:	cmp	w25, #0x3
   10d4c:	sub	x9, x9, w24, uxtw
   10d50:	b.cc	10d90 <lzma_mode_is_supported@@XZ_5.0+0x18c0>  // b.lo, b.ul, b.last
   10d54:	ldur	x11, [x29, #-128]
   10d58:	ldur	x17, [x29, #-48]
   10d5c:	mov	x10, xzr
   10d60:	add	x11, x11, x9
   10d64:	ldrb	w12, [x14, x10]
   10d68:	ldrb	w13, [x11, x10]
   10d6c:	cmp	w12, w13
   10d70:	b.ne	10d9c <lzma_mode_is_supported@@XZ_5.0+0x18cc>  // b.any
   10d74:	add	x10, x10, #0x1
   10d78:	cmp	w15, w10
   10d7c:	b.ne	10d64 <lzma_mode_is_supported@@XZ_5.0+0x1894>  // b.any
   10d80:	mov	w22, w25
   10d84:	b	10da0 <lzma_mode_is_supported@@XZ_5.0+0x18d0>
   10d88:	mov	w4, w20
   10d8c:	b	11118 <lzma_mode_is_supported@@XZ_5.0+0x1c48>
   10d90:	ldur	x17, [x29, #-48]
   10d94:	mov	w22, #0x2                   	// #2
   10d98:	b	10da0 <lzma_mode_is_supported@@XZ_5.0+0x18d0>
   10d9c:	add	w22, w10, #0x2
   10da0:	add	w24, w22, w17
   10da4:	cmp	w20, w24
   10da8:	mov	w4, w20
   10dac:	b.cs	10dd4 <lzma_mode_is_supported@@XZ_5.0+0x1904>  // b.hs, b.nlast
   10db0:	ldr	x11, [sp, #176]
   10db4:	add	w10, w17, w22
   10db8:	sub	x10, x10, w20, uxtw
   10dbc:	mov	w12, #0x40000000            	// #1073741824
   10dc0:	umaddl	x11, w20, w5, x11
   10dc4:	subs	x10, x10, #0x1
   10dc8:	str	w12, [x11], #44
   10dcc:	b.ne	10dc4 <lzma_mode_is_supported@@XZ_5.0+0x18f4>  // b.any
   10dd0:	mov	w4, w24
   10dd4:	ldur	x10, [x29, #-112]
   10dd8:	ldrh	w10, [x10]
   10ddc:	lsr	x10, x10, #4
   10de0:	cbz	x28, 10e30 <lzma_mode_is_supported@@XZ_5.0+0x1960>
   10de4:	ldr	x11, [sp, #128]
   10de8:	eor	x10, x10, #0x7f
   10dec:	ldrb	w10, [x3, x10]
   10df0:	cmp	x28, #0x1
   10df4:	ldrh	w11, [x11]
   10df8:	lsr	x11, x11, #4
   10dfc:	b.eq	10e44 <lzma_mode_is_supported@@XZ_5.0+0x1974>  // b.none
   10e00:	ldr	x12, [sp, #56]
   10e04:	eor	x11, x11, #0x7f
   10e08:	ldrb	w11, [x3, x11]
   10e0c:	mov	w13, #0x2                   	// #2
   10e10:	ldrh	w12, [x12]
   10e14:	sub	w13, w13, w28
   10e18:	and	x13, x13, #0x7f0
   10e1c:	add	w11, w11, w10
   10e20:	eor	x12, x13, x12
   10e24:	lsr	x10, x12, #4
   10e28:	ldrb	w10, [x3, x10]
   10e2c:	b	10e48 <lzma_mode_is_supported@@XZ_5.0+0x1978>
   10e30:	ldr	x11, [sp, #80]
   10e34:	ldrb	w10, [x3, x10]
   10e38:	ldrh	w11, [x11]
   10e3c:	lsr	x11, x11, #4
   10e40:	eor	x11, x11, #0x7f
   10e44:	ldrb	w11, [x3, x11]
   10e48:	add	w11, w11, w10
   10e4c:	add	w27, w11, w0
   10e50:	ldur	x11, [x29, #-104]
   10e54:	sub	w10, w22, #0x2
   10e58:	mov	w12, w22
   10e5c:	add	x11, x11, w10, uxtw #2
   10e60:	add	w13, w17, w12
   10e64:	umaddl	x14, w13, w5, x21
   10e68:	ldr	w15, [x21, x11]
   10e6c:	add	x14, x14, x19
   10e70:	ldr	w16, [x14]
   10e74:	add	w15, w15, w27
   10e78:	cmp	w15, w16
   10e7c:	b.cs	10e94 <lzma_mode_is_supported@@XZ_5.0+0x19c4>  // b.hs, b.nlast
   10e80:	madd	x13, x13, x5, x21
   10e84:	str	w15, [x14]
   10e88:	str	w17, [x13, x6]
   10e8c:	str	w28, [x13, x30]
   10e90:	strb	wzr, [x13, x7]
   10e94:	sub	w12, w12, #0x1
   10e98:	cmp	w12, #0x1
   10e9c:	sub	x11, x11, #0x4
   10ea0:	b.hi	10e60 <lzma_mode_is_supported@@XZ_5.0+0x1990>  // b.pmore
   10ea4:	ldur	w13, [x29, #-76]
   10ea8:	add	w11, w22, #0x1
   10eac:	cmp	x28, #0x0
   10eb0:	add	w12, w11, w2
   10eb4:	csinc	w18, w18, w22, ne  // ne = any
   10eb8:	cmp	w12, w13
   10ebc:	csel	w12, w13, w12, hi  // hi = pmore
   10ec0:	cmp	w11, w12
   10ec4:	mov	w19, w11
   10ec8:	b.cs	10f00 <lzma_mode_is_supported@@XZ_5.0+0x1a30>  // b.hs, b.nlast
   10ecc:	ldur	x14, [x29, #-128]
   10ed0:	mov	w19, w11
   10ed4:	mov	w13, w12
   10ed8:	add	x9, x14, x9
   10edc:	add	x15, x9, x19
   10ee0:	ldrb	w14, [x1, x19]
   10ee4:	ldurb	w15, [x15, #-2]
   10ee8:	cmp	w14, w15
   10eec:	b.ne	10f00 <lzma_mode_is_supported@@XZ_5.0+0x1a30>  // b.any
   10ef0:	add	x19, x19, #0x1
   10ef4:	cmp	x19, x13
   10ef8:	b.cc	10edc <lzma_mode_is_supported@@XZ_5.0+0x1a0c>  // b.lo, b.ul, b.last
   10efc:	mov	w19, w12
   10f00:	sub	w26, w19, w11
   10f04:	mov	w9, #0x440                 	// #1088
   10f08:	subs	w11, w26, #0x2
   10f0c:	b.cc	1101c <lzma_mode_is_supported@@XZ_5.0+0x1b4c>  // b.lo, b.ul, b.last
   10f10:	str	w11, [sp, #156]
   10f14:	ldur	w11, [x29, #-148]
   10f18:	stur	w24, [x29, #-152]
   10f1c:	ldur	x25, [x29, #-88]
   10f20:	ldr	x12, [sp, #104]
   10f24:	add	w24, w22, w11
   10f28:	ldur	x11, [x29, #-40]
   10f2c:	stur	w4, [x29, #-56]
   10f30:	ldrb	w4, [x8, w22, uxtw]
   10f34:	and	x8, x24, x25
   10f38:	madd	x9, x11, x9, x21
   10f3c:	mov	w11, #0x6b9c                	// #27548
   10f40:	add	x13, x21, x11
   10f44:	add	x12, x13, x12, lsl #5
   10f48:	ldrh	w8, [x12, x8, lsl #1]
   10f4c:	add	x9, x9, w10, uxtw #2
   10f50:	mov	w10, #0xbe4c                	// #48716
   10f54:	ldr	w9, [x9, x10]
   10f58:	lsr	x8, x8, #4
   10f5c:	ldrb	w8, [x3, x8]
   10f60:	sub	w11, w22, #0x1
   10f64:	ldrb	w2, [x1, w11, uxtw]
   10f68:	mov	w3, #0x1                   	// #1
   10f6c:	stp	w9, w8, [sp, #148]
   10f70:	ldrb	w5, [x1, w22, uxtw]
   10f74:	mov	x0, x21
   10f78:	mov	w1, w24
   10f7c:	stur	w18, [x29, #-80]
   10f80:	str	x13, [sp, #160]
   10f84:	bl	119d8 <lzma_mode_is_supported@@XZ_5.0+0x2508>
   10f88:	adrp	x3, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   10f8c:	add	w8, w24, #0x1
   10f90:	ldur	w4, [x29, #-56]
   10f94:	ldr	x3, [x3, #3960]
   10f98:	and	x12, x8, x25
   10f9c:	ldr	x8, [sp, #160]
   10fa0:	ldur	x16, [x29, #-176]
   10fa4:	add	x8, x8, x12, lsl #1
   10fa8:	ldrh	w8, [x8, #160]
   10fac:	ldrh	w9, [x16, #2]
   10fb0:	lsr	x8, x8, #4
   10fb4:	eor	x8, x8, #0x7f
   10fb8:	ldrb	w11, [x3, x8]
   10fbc:	ldur	w8, [x29, #-152]
   10fc0:	lsr	x9, x9, #4
   10fc4:	eor	x9, x9, #0x7f
   10fc8:	ldrb	w10, [x3, x9]
   10fcc:	add	w8, w8, #0x1
   10fd0:	add	w13, w26, w8
   10fd4:	cmp	w4, w13
   10fd8:	b.cs	11030 <lzma_mode_is_supported@@XZ_5.0+0x1b60>  // b.hs, b.nlast
   10fdc:	ldur	x15, [x29, #-48]
   10fe0:	ldr	x17, [sp, #176]
   10fe4:	mov	w5, #0x2c                  	// #44
   10fe8:	mov	w9, w13
   10fec:	add	w14, w15, w19
   10ff0:	add	w15, w15, w22
   10ff4:	cmp	w20, w15
   10ff8:	csel	w15, w20, w15, hi  // hi = pmore
   10ffc:	sub	x14, x14, x15
   11000:	umaddl	x15, w15, w5, x17
   11004:	mov	w17, #0x40000000            	// #1073741824
   11008:	subs	x14, x14, #0x1
   1100c:	str	w17, [x15], #44
   11010:	b.ne	11008 <lzma_mode_is_supported@@XZ_5.0+0x1b38>  // b.any
   11014:	mov	w4, w13
   11018:	b	11038 <lzma_mode_is_supported@@XZ_5.0+0x1b68>
   1101c:	mov	w19, #0xef4                 	// #3828
   11020:	sub	x27, x29, #0x20
   11024:	mov	w26, #0x440                 	// #1088
   11028:	movk	w19, #0x1, lsl #16
   1102c:	b	11114 <lzma_mode_is_supported@@XZ_5.0+0x1c44>
   11030:	mov	w9, w13
   11034:	mov	w5, #0x2c                  	// #44
   11038:	ldp	w20, w17, [sp, #152]
   1103c:	ldp	w2, w14, [sp, #144]
   11040:	mov	w26, #0x440                 	// #1088
   11044:	madd	x13, x12, x26, x21
   11048:	add	x12, x21, x12, lsl #1
   1104c:	add	x13, x13, w17, uxtw #2
   11050:	mov	w17, #0x6e1c                	// #28188
   11054:	add	w14, w14, w27
   11058:	ldrh	w15, [x16, #26]
   1105c:	ldrh	w12, [x12, x17]
   11060:	add	w14, w14, w20
   11064:	add	w14, w14, w0
   11068:	mov	w17, #0xbe4c                	// #48716
   1106c:	add	w11, w14, w11
   11070:	mov	w19, #0xef4                 	// #3828
   11074:	ldr	w13, [x13, x17]
   11078:	lsr	x14, x15, #4
   1107c:	add	w11, w11, w10
   11080:	lsr	x10, x12, #4
   11084:	movk	w19, #0x1, lsl #16
   11088:	madd	x16, x9, x5, x21
   1108c:	ldrb	w14, [x3, x14]
   11090:	eor	x10, x10, #0x7f
   11094:	ldrb	w12, [x3, x10]
   11098:	add	x10, x16, x19
   1109c:	ldr	w15, [x10]
   110a0:	ldur	x1, [x29, #-120]
   110a4:	ldur	w18, [x29, #-80]
   110a8:	ldr	w25, [sp, #96]
   110ac:	add	w11, w11, w13
   110b0:	add	w11, w11, w14
   110b4:	mov	w6, #0xef8                 	// #3832
   110b8:	mov	w7, #0xee8                 	// #3816
   110bc:	mov	w30, #0xefc                 	// #3836
   110c0:	add	w11, w11, w12
   110c4:	movk	w6, #0x1, lsl #16
   110c8:	movk	w7, #0x1, lsl #16
   110cc:	movk	w30, #0x1, lsl #16
   110d0:	cmp	w11, w15
   110d4:	b.cs	1110c <lzma_mode_is_supported@@XZ_5.0+0x1c3c>  // b.hs, b.nlast
   110d8:	str	w11, [x10]
   110dc:	madd	x9, x9, x5, x21
   110e0:	ldur	x10, [x29, #-48]
   110e4:	str	w8, [x9, x6]
   110e8:	mov	w8, #0x101                 	// #257
   110ec:	str	wzr, [x9, x30]
   110f0:	strh	w8, [x9, x7]
   110f4:	mov	w8, #0xeec                 	// #3820
   110f8:	movk	w8, #0x1, lsl #16
   110fc:	str	w10, [x9, x8]
   11100:	mov	w8, #0xef0                 	// #3824
   11104:	movk	w8, #0x1, lsl #16
   11108:	str	w28, [x9, x8]
   1110c:	ldr	w0, [sp, #100]
   11110:	sub	x27, x29, #0x20
   11114:	ldp	x15, x14, [x29, #-144]
   11118:	add	x28, x28, #0x1
   1111c:	cmp	x28, #0x4
   11120:	b.eq	11130 <lzma_mode_is_supported@@XZ_5.0+0x1c60>  // b.none
   11124:	ldr	w24, [x27, x28, lsl #2]
   11128:	mov	w20, w4
   1112c:	b	10d1c <lzma_mode_is_supported@@XZ_5.0+0x184c>
   11130:	ldr	w9, [sp, #52]
   11134:	ldur	w1, [x29, #-92]
   11138:	cmp	w9, w25
   1113c:	b.ls	11164 <lzma_mode_is_supported@@XZ_5.0+0x1c94>  // b.plast
   11140:	mov	w1, wzr
   11144:	add	x8, x21, w1, uxtw #3
   11148:	ldr	w9, [x8, #756]
   1114c:	add	w1, w1, #0x1
   11150:	cmp	w25, w9
   11154:	b.hi	11144 <lzma_mode_is_supported@@XZ_5.0+0x1c74>  // b.pmore
   11158:	add	x8, x8, #0x2f4
   1115c:	mov	w9, w25
   11160:	str	w25, [x8]
   11164:	cmp	w9, w18
   11168:	b.cc	115f4 <lzma_mode_is_supported@@XZ_5.0+0x2124>  // b.lo, b.ul, b.last
   1116c:	ldur	x8, [x29, #-48]
   11170:	add	w9, w9, w8
   11174:	cmp	w4, w9
   11178:	b.cs	111a4 <lzma_mode_is_supported@@XZ_5.0+0x1cd4>  // b.hs, b.nlast
   1117c:	ldr	x10, [sp, #176]
   11180:	mov	w8, w4
   11184:	mov	w9, w9
   11188:	mov	w11, #0x40000000            	// #1073741824
   1118c:	umaddl	x10, w4, w5, x10
   11190:	add	x8, x8, #0x1
   11194:	cmp	x8, x9
   11198:	str	w11, [x10], #44
   1119c:	b.cc	11190 <lzma_mode_is_supported@@XZ_5.0+0x1cc0>  // b.lo, b.ul, b.last
   111a0:	mov	w4, w8
   111a4:	ldr	x8, [sp, #8]
   111a8:	mov	w24, #0xffffffff            	// #-1
   111ac:	ldrb	w8, [x3, x8]
   111b0:	add	w24, w24, #0x1
   111b4:	add	x9, x21, w24, uxtw #3
   111b8:	ldr	w9, [x9, #756]
   111bc:	cmp	w18, w9
   111c0:	b.hi	111b0 <lzma_mode_is_supported@@XZ_5.0+0x1ce0>  // b.pmore
   111c4:	ldr	w9, [sp, #20]
   111c8:	mov	w17, w18
   111cc:	stur	w1, [x29, #-92]
   111d0:	add	w28, w9, w8
   111d4:	ldr	x8, [sp, #136]
   111d8:	mov	w9, #0x7                   	// #7
   111dc:	cmp	w8, #0x7
   111e0:	add	w8, w2, #0x1
   111e4:	stur	w8, [x29, #-104]
   111e8:	mov	w8, #0xa                   	// #10
   111ec:	csel	x8, x9, x8, cc  // cc = lo, ul, last
   111f0:	str	x8, [sp, #160]
   111f4:	ldp	x9, x8, [sp, #64]
   111f8:	add	x8, x8, x9
   111fc:	stur	x8, [x29, #-112]
   11200:	add	x8, x21, w24, uxtw #3
   11204:	ldr	w22, [x8, #760]
   11208:	mov	w13, #0x1e                  	// #30
   1120c:	mov	w14, #0x12                  	// #18
   11210:	mov	w15, #0x24                  	// #36
   11214:	cmp	w22, #0x0
   11218:	csel	w13, w14, w13, ge  // ge = tcont
   1121c:	mov	w14, #0x3c                  	// #60
   11220:	ldur	x9, [x29, #-72]
   11224:	csel	x14, x15, x14, ge  // ge = tcont
   11228:	cmp	w22, #0x80, lsl #12
   1122c:	mov	w15, #0x6                   	// #6
   11230:	ldr	w11, [x8, #756]
   11234:	csel	w15, w15, w13, cc  // cc = lo, ul, last
   11238:	mov	w13, #0xc                   	// #12
   1123c:	and	x8, x22, #0xf
   11240:	csel	x13, x13, x14, cc  // cc = lo, ul, last
   11244:	mov	w14, #0xe98                 	// #3736
   11248:	add	x8, x21, x8, lsl #2
   1124c:	movk	w14, #0x1, lsl #16
   11250:	stur	w4, [x29, #-56]
   11254:	mov	x4, x3
   11258:	mov	w25, wzr
   1125c:	mov	w27, w17
   11260:	add	w9, w9, w17
   11264:	sub	w10, w17, #0x2
   11268:	add	w12, w22, #0x4
   1126c:	add	x14, x8, x14
   11270:	lsr	x15, x22, x15
   11274:	mov	w3, w18
   11278:	add	w8, w18, #0x1
   1127c:	add	w17, w27, w25
   11280:	sub	w16, w17, #0x2
   11284:	cmp	w17, #0x6
   11288:	mov	w17, #0x3                   	// #3
   1128c:	csel	w18, w16, w17, cc  // cc = lo, ul, last
   11290:	cmp	w22, #0x7f
   11294:	add	w17, w10, w25
   11298:	b.hi	112b8 <lzma_mode_is_supported@@XZ_5.0+0x1de8>  // b.pmore
   1129c:	mov	w18, w18
   112a0:	add	x18, x21, x18, lsl #9
   112a4:	mov	w0, #0x690                 	// #1680
   112a8:	add	x18, x18, x22, lsl #2
   112ac:	movk	w0, #0x1, lsl #16
   112b0:	ldr	w18, [x18, x0]
   112b4:	b	112e8 <lzma_mode_is_supported@@XZ_5.0+0x1e18>
   112b8:	adrp	x0, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   112bc:	ldr	x0, [x0, #4008]
   112c0:	mov	w18, w18
   112c4:	add	x18, x21, x18, lsl #8
   112c8:	ldrb	w0, [x0, x15]
   112cc:	add	x0, x13, x0
   112d0:	add	x18, x18, x0, lsl #2
   112d4:	mov	w0, #0x290                 	// #656
   112d8:	movk	w0, #0x1, lsl #16
   112dc:	ldr	w18, [x18, x0]
   112e0:	ldr	w0, [x14]
   112e4:	add	w18, w0, w18
   112e8:	ldur	x0, [x29, #-40]
   112ec:	add	w1, w9, w25
   112f0:	add	w18, w28, w18
   112f4:	madd	x0, x0, x26, x21
   112f8:	add	x0, x0, w17, uxtw #2
   112fc:	add	w17, w1, #0x1
   11300:	mov	w1, #0x7604                	// #30212
   11304:	ldr	w1, [x0, x1]
   11308:	umaddl	x0, w17, w5, x21
   1130c:	add	x0, x0, x19
   11310:	ldr	w2, [x0]
   11314:	add	w20, w18, w1
   11318:	cmp	w20, w2
   1131c:	b.cs	11338 <lzma_mode_is_supported@@XZ_5.0+0x1e68>  // b.hs, b.nlast
   11320:	ldur	x18, [x29, #-48]
   11324:	madd	x17, x17, x5, x21
   11328:	str	w20, [x0]
   1132c:	str	w18, [x17, x6]
   11330:	str	w12, [x17, x30]
   11334:	strb	wzr, [x17, x7]
   11338:	add	w16, w16, #0x2
   1133c:	cmp	w16, w11
   11340:	b.eq	11350 <lzma_mode_is_supported@@XZ_5.0+0x1e80>  // b.none
   11344:	add	w25, w25, #0x1
   11348:	add	w8, w8, #0x1
   1134c:	b	1127c <lzma_mode_is_supported@@XZ_5.0+0x1dac>
   11350:	ldur	w10, [x29, #-104]
   11354:	ldur	w11, [x29, #-76]
   11358:	ldur	x16, [x29, #-112]
   1135c:	add	w9, w27, w25
   11360:	add	w10, w10, w27
   11364:	add	w10, w10, w25
   11368:	cmp	w10, w11
   1136c:	csel	w11, w11, w10, hi  // hi = pmore
   11370:	add	w10, w3, w25
   11374:	mov	x3, x4
   11378:	ldur	w4, [x29, #-56]
   1137c:	add	w17, w9, #0x1
   11380:	cmp	w17, w11
   11384:	mov	w19, w17
   11388:	b.cs	113d8 <lzma_mode_is_supported@@XZ_5.0+0x1f08>  // b.hs, b.nlast
   1138c:	neg	x13, x22
   11390:	mov	w12, w8
   11394:	mov	w11, w11
   11398:	sub	x12, x12, #0x1
   1139c:	add	x13, x16, x13
   113a0:	mov	w19, w17
   113a4:	add	x15, x13, x12
   113a8:	ldrb	w14, [x16, x12]
   113ac:	ldurb	w15, [x15, #-1]
   113b0:	cmp	w14, w15
   113b4:	b.ne	113d4 <lzma_mode_is_supported@@XZ_5.0+0x1f04>  // b.any
   113b8:	add	x14, x12, #0x2
   113bc:	add	w19, w19, #0x1
   113c0:	add	x12, x12, #0x1
   113c4:	cmp	x14, x11
   113c8:	add	w8, w8, #0x1
   113cc:	b.cc	113a4 <lzma_mode_is_supported@@XZ_5.0+0x1ed4>  // b.lo, b.ul, b.last
   113d0:	b	113d8 <lzma_mode_is_supported@@XZ_5.0+0x1f08>
   113d4:	mov	w19, w8
   113d8:	sub	w11, w19, w27
   113dc:	mvn	w8, w25
   113e0:	add	w8, w8, w11
   113e4:	cmp	w8, #0x2
   113e8:	add	w18, w10, #0x1
   113ec:	b.cc	114f8 <lzma_mode_is_supported@@XZ_5.0+0x2028>  // b.lo, b.ul, b.last
   113f0:	ldur	w10, [x29, #-180]
   113f4:	stp	w11, w17, [x29, #-148]
   113f8:	mov	w11, #0x6b9c                	// #27548
   113fc:	add	x12, x21, x11
   11400:	add	w10, w10, w27
   11404:	add	w1, w10, w25
   11408:	ldr	x10, [sp, #160]
   1140c:	stur	x12, [x29, #-136]
   11410:	stur	w8, [x29, #-128]
   11414:	ldur	x8, [x29, #-64]
   11418:	add	x10, x12, x10, lsl #5
   1141c:	ldur	x12, [x29, #-88]
   11420:	add	w11, w27, w25
   11424:	sub	x8, x8, x22
   11428:	sub	w11, w11, #0x1
   1142c:	and	w26, w1, w12
   11430:	ldrh	w10, [x10, w26, uxtw #1]
   11434:	ldur	x12, [x29, #-120]
   11438:	ldrb	w4, [x8, w9, uxtw]
   1143c:	mov	x0, x21
   11440:	lsr	x8, x10, #4
   11444:	ldrb	w2, [x12, w11, uxtw]
   11448:	ldrb	w8, [x3, x8]
   1144c:	ldrb	w5, [x12, w9, uxtw]
   11450:	mov	w3, #0x1                   	// #1
   11454:	stur	w18, [x29, #-80]
   11458:	stur	w8, [x29, #-152]
   1145c:	bl	119d8 <lzma_mode_is_supported@@XZ_5.0+0x2508>
   11460:	adrp	x3, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   11464:	ldur	w4, [x29, #-56]
   11468:	ldr	x3, [x3, #3960]
   1146c:	ldur	x10, [x29, #-72]
   11470:	ldur	x11, [x29, #-88]
   11474:	ldur	x16, [x29, #-176]
   11478:	add	w8, w26, #0x1
   1147c:	add	w10, w10, w27
   11480:	and	w12, w8, w11
   11484:	add	w8, w10, w25
   11488:	ldur	x10, [x29, #-136]
   1148c:	ldrh	w9, [x16]
   11490:	add	w8, w8, #0x2
   11494:	add	x10, x10, w12, uxtw #1
   11498:	ldrh	w11, [x10, #128]
   1149c:	lsr	x9, x9, #4
   114a0:	eor	x9, x9, #0x7f
   114a4:	ldrb	w10, [x3, x9]
   114a8:	lsr	x9, x11, #4
   114ac:	eor	x9, x9, #0x7f
   114b0:	ldrb	w11, [x3, x9]
   114b4:	ldur	w9, [x29, #-128]
   114b8:	add	w13, w9, w8
   114bc:	cmp	w4, w13
   114c0:	b.cs	11508 <lzma_mode_is_supported@@XZ_5.0+0x2038>  // b.hs, b.nlast
   114c4:	ldur	x14, [x29, #-48]
   114c8:	ldr	x15, [sp, #176]
   114cc:	mov	w5, #0x2c                  	// #44
   114d0:	mov	w9, w13
   114d4:	add	w14, w14, w19
   114d8:	sub	x14, x14, w4, uxtw
   114dc:	umaddl	x15, w4, w5, x15
   114e0:	mov	w17, #0x40000000            	// #1073741824
   114e4:	subs	x14, x14, #0x1
   114e8:	str	w17, [x15], #44
   114ec:	b.ne	114e4 <lzma_mode_is_supported@@XZ_5.0+0x2014>  // b.any
   114f0:	mov	w4, w13
   114f4:	b	11510 <lzma_mode_is_supported@@XZ_5.0+0x2040>
   114f8:	ldur	w1, [x29, #-92]
   114fc:	mov	w19, #0xef4                 	// #3828
   11500:	movk	w19, #0x1, lsl #16
   11504:	b	115e8 <lzma_mode_is_supported@@XZ_5.0+0x2118>
   11508:	mov	w9, w13
   1150c:	mov	w5, #0x2c                  	// #44
   11510:	ldp	w15, w13, [x29, #-152]
   11514:	mov	w26, #0x440                 	// #1088
   11518:	madd	x14, x12, x26, x21
   1151c:	ldrh	w16, [x16, #24]
   11520:	add	x12, x21, x12, lsl #1
   11524:	mov	w18, #0x6dfc                	// #28156
   11528:	add	w15, w20, w15
   1152c:	ldrh	w12, [x12, x18]
   11530:	sub	w13, w13, w25
   11534:	add	w15, w15, w0
   11538:	sub	w13, w13, #0x3
   1153c:	add	w11, w15, w11
   11540:	add	x13, x14, w13, uxtw #2
   11544:	mov	w14, #0xbe4c                	// #48716
   11548:	add	w11, w11, w10
   1154c:	lsr	x10, x16, #4
   11550:	mov	w19, #0xef4                 	// #3828
   11554:	ldr	w13, [x13, x14]
   11558:	ldrb	w14, [x3, x10]
   1155c:	lsr	x10, x12, #4
   11560:	movk	w19, #0x1, lsl #16
   11564:	madd	x17, x9, x5, x21
   11568:	eor	x10, x10, #0x7f
   1156c:	ldrb	w12, [x3, x10]
   11570:	add	x10, x17, x19
   11574:	ldr	w15, [x10]
   11578:	ldur	w1, [x29, #-92]
   1157c:	add	w11, w11, w13
   11580:	add	w11, w11, w14
   11584:	mov	w6, #0xef8                 	// #3832
   11588:	mov	w7, #0xee8                 	// #3816
   1158c:	mov	w30, #0xefc                 	// #3836
   11590:	add	w11, w11, w12
   11594:	movk	w6, #0x1, lsl #16
   11598:	movk	w7, #0x1, lsl #16
   1159c:	movk	w30, #0x1, lsl #16
   115a0:	cmp	w11, w15
   115a4:	b.cs	115e0 <lzma_mode_is_supported@@XZ_5.0+0x2110>  // b.hs, b.nlast
   115a8:	str	w11, [x10]
   115ac:	madd	x9, x9, x5, x21
   115b0:	ldur	x11, [x29, #-48]
   115b4:	str	w8, [x9, x6]
   115b8:	mov	w8, #0x101                 	// #257
   115bc:	str	wzr, [x9, x30]
   115c0:	strh	w8, [x9, x7]
   115c4:	mov	w8, #0xeec                 	// #3820
   115c8:	movk	w8, #0x1, lsl #16
   115cc:	str	w11, [x9, x8]
   115d0:	mov	w8, #0xef0                 	// #3824
   115d4:	add	w10, w22, #0x4
   115d8:	movk	w8, #0x1, lsl #16
   115dc:	str	w10, [x9, x8]
   115e0:	ldur	w18, [x29, #-80]
   115e4:	ldur	w17, [x29, #-144]
   115e8:	add	w24, w24, #0x1
   115ec:	cmp	w24, w1
   115f0:	b.ne	11200 <lzma_mode_is_supported@@XZ_5.0+0x1d30>  // b.any
   115f4:	ldr	w8, [sp, #116]
   115f8:	ldr	x26, [sp, #120]
   115fc:	ldr	x27, [sp, #168]
   11600:	ldr	w20, [sp, #184]
   11604:	sub	w8, w8, #0x1
   11608:	str	w8, [sp, #116]
   1160c:	ldur	w8, [x29, #-180]
   11610:	mov	w22, #0xf00                 	// #3840
   11614:	mov	w25, #0xee4                 	// #3812
   11618:	cmp	x26, w4, uxtw
   1161c:	add	w8, w8, #0x1
   11620:	stur	w8, [x29, #-180]
   11624:	ldr	x8, [sp, #88]
   11628:	movk	w22, #0x1, lsl #16
   1162c:	movk	w25, #0x1, lsl #16
   11630:	stur	x8, [x29, #-72]
   11634:	b.cc	10700 <lzma_mode_is_supported@@XZ_5.0+0x1230>  // b.lo, b.ul, b.last
   11638:	b	118f8 <lzma_mode_is_supported@@XZ_5.0+0x2428>
   1163c:	add	w9, w10, #0x1
   11640:	sub	w10, w9, #0x1
   11644:	cmp	w10, #0x2
   11648:	b.cc	10c7c <lzma_mode_is_supported@@XZ_5.0+0x17ac>  // b.lo, b.ul, b.last
   1164c:	ldr	x13, [sp, #136]
   11650:	ldur	w10, [x29, #-148]
   11654:	mov	w11, #0xfffffffa            	// #-6
   11658:	mov	w12, #0xfffffffd            	// #-3
   1165c:	cmp	w13, #0xa
   11660:	csel	w11, w12, w11, cc  // cc = lo, ul, last
   11664:	ldur	x12, [x29, #-88]
   11668:	cmp	w13, #0x4
   1166c:	add	w11, w11, w13
   11670:	add	w10, w10, #0x1
   11674:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
   11678:	and	x10, x12, x10
   1167c:	add	x12, x21, x11, lsl #5
   11680:	add	x13, x21, w11, uxtw #1
   11684:	mov	w14, #0x6d1c                	// #27932
   11688:	add	x12, x12, x10, lsl #1
   1168c:	ldrh	w13, [x13, x14]
   11690:	mov	w14, #0x6b9c                	// #27548
   11694:	ldrh	w12, [x12, x14]
   11698:	lsr	x13, x13, #4
   1169c:	eor	x13, x13, #0x7f
   116a0:	lsr	x12, x12, #4
   116a4:	eor	x12, x12, #0x7f
   116a8:	ldrb	w14, [x3, x12]
   116ac:	ldur	x12, [x29, #-48]
   116b0:	ldrb	w13, [x3, x13]
   116b4:	add	w15, w9, w12
   116b8:	cmp	w15, w4
   116bc:	b.ls	116e8 <lzma_mode_is_supported@@XZ_5.0+0x2218>  // b.plast
   116c0:	ldr	x17, [sp, #176]
   116c4:	mov	w12, w15
   116c8:	sub	x16, x15, w4, uxtw
   116cc:	mov	w18, #0x40000000            	// #1073741824
   116d0:	umaddl	x17, w4, w5, x17
   116d4:	subs	x16, x16, #0x1
   116d8:	str	w18, [x17], #44
   116dc:	b.ne	116d4 <lzma_mode_is_supported@@XZ_5.0+0x2204>  // b.any
   116e0:	mov	w4, w15
   116e4:	b	116ec <lzma_mode_is_supported@@XZ_5.0+0x221c>
   116e8:	mov	w12, w15
   116ec:	add	w8, w8, w14
   116f0:	add	x14, x21, x11, lsl #1
   116f4:	add	x11, x21, x11, lsl #5
   116f8:	madd	x15, x10, x26, x21
   116fc:	mov	w16, #0x6d34                	// #27956
   11700:	add	x10, x11, x10, lsl #1
   11704:	add	w11, w8, w13
   11708:	mov	w8, #0x6d7c                	// #28028
   1170c:	ldrh	w14, [x14, x16]
   11710:	ldrh	w8, [x10, x8]
   11714:	sub	w9, w9, #0x3
   11718:	add	x9, x15, w9, uxtw #2
   1171c:	mov	w10, #0xbe4c                	// #48716
   11720:	ldr	w9, [x9, x10]
   11724:	lsr	x10, x14, #4
   11728:	lsr	x8, x8, #4
   1172c:	madd	x15, x12, x5, x21
   11730:	ldrb	w10, [x3, x10]
   11734:	eor	x8, x8, #0x7f
   11738:	ldrb	w13, [x3, x8]
   1173c:	add	x8, x15, x19
   11740:	ldr	w14, [x8]
   11744:	add	w9, w11, w9
   11748:	add	w9, w9, w10
   1174c:	add	w9, w9, w13
   11750:	cmp	w9, w14
   11754:	b.cs	10c7c <lzma_mode_is_supported@@XZ_5.0+0x17ac>  // b.hs, b.nlast
   11758:	str	w9, [x8]
   1175c:	ldr	x9, [sp, #120]
   11760:	madd	x8, x12, x5, x21
   11764:	str	w9, [x8, x6]
   11768:	mov	w9, #0x1                   	// #1
   1176c:	str	wzr, [x8, x30]
   11770:	strh	w9, [x8, x7]
   11774:	b	10c7c <lzma_mode_is_supported@@XZ_5.0+0x17ac>
   11778:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   1177c:	ldr	x8, [x8, #3960]
   11780:	ldrb	w11, [x8, x10]
   11784:	mov	w10, #0xffffffff            	// #-1
   11788:	add	w10, w10, #0x1
   1178c:	add	x12, x21, w10, uxtw #3
   11790:	ldr	w12, [x12, #756]
   11794:	cmp	w15, w12
   11798:	b.hi	11788 <lzma_mode_is_supported@@XZ_5.0+0x22b8>  // b.pmore
   1179c:	ldur	x8, [x29, #-40]
   117a0:	adrp	x20, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   117a4:	add	w9, w11, w9
   117a8:	ldur	w11, [x29, #-12]
   117ac:	ldr	x20, [x20, #4008]
   117b0:	mov	w19, #0x440                 	// #1088
   117b4:	mov	w17, #0xef4                 	// #3828
   117b8:	mov	w18, #0xef8                 	// #3832
   117bc:	mov	w0, #0xefc                 	// #3836
   117c0:	mov	w1, #0xee8                 	// #3816
   117c4:	mov	w22, #0x290                 	// #656
   117c8:	mov	w24, #0xe98                 	// #3736
   117cc:	mov	w12, #0x3                   	// #3
   117d0:	mov	w14, #0x7604                	// #30212
   117d4:	mov	w16, #0x2c                  	// #44
   117d8:	movk	w17, #0x1, lsl #16
   117dc:	movk	w18, #0x1, lsl #16
   117e0:	movk	w0, #0x1, lsl #16
   117e4:	movk	w1, #0x1, lsl #16
   117e8:	mov	w2, #0x1e                  	// #30
   117ec:	mov	w3, #0x12                  	// #18
   117f0:	mov	w4, #0x3c                  	// #60
   117f4:	mov	w5, #0x24                  	// #36
   117f8:	mov	w6, #0x6                   	// #6
   117fc:	mov	w7, #0xc                   	// #12
   11800:	madd	x19, x8, x19, x21
   11804:	movk	w22, #0x1, lsl #16
   11808:	movk	w24, #0x1, lsl #16
   1180c:	add	x25, x21, w10, uxtw #3
   11810:	ldr	w26, [x25, #760]
   11814:	sub	w25, w15, #0x2
   11818:	cmp	w15, #0x6
   1181c:	csel	w28, w25, w12, cc  // cc = lo, ul, last
   11820:	cmp	w26, #0x7f
   11824:	mov	w27, w10
   11828:	b.hi	11848 <lzma_mode_is_supported@@XZ_5.0+0x2378>  // b.pmore
   1182c:	mov	w28, w28
   11830:	add	x28, x21, x28, lsl #9
   11834:	mov	w8, #0x690                 	// #1680
   11838:	add	x28, x28, x26, lsl #2
   1183c:	movk	w8, #0x1, lsl #16
   11840:	ldr	w28, [x28, x8]
   11844:	b	1188c <lzma_mode_is_supported@@XZ_5.0+0x23bc>
   11848:	cmp	w26, #0x0
   1184c:	csel	w30, w3, w2, ge  // ge = tcont
   11850:	csel	x8, x5, x4, ge  // ge = tcont
   11854:	cmp	w26, #0x80, lsl #12
   11858:	csel	w30, w6, w30, cc  // cc = lo, ul, last
   1185c:	lsr	x30, x26, x30
   11860:	ldrb	w30, [x20, x30]
   11864:	mov	w28, w28
   11868:	csel	x8, x7, x8, cc  // cc = lo, ul, last
   1186c:	add	x28, x21, x28, lsl #8
   11870:	add	x8, x8, x30
   11874:	and	x30, x26, #0xf
   11878:	add	x30, x21, x30, lsl #2
   1187c:	add	x8, x28, x8, lsl #2
   11880:	ldr	w8, [x8, x22]
   11884:	ldr	w28, [x30, x24]
   11888:	add	w28, w28, w8
   1188c:	add	x8, x19, w25, uxtw #2
   11890:	umaddl	x30, w15, w16, x21
   11894:	ldr	w8, [x8, x14]
   11898:	add	x30, x30, x17
   1189c:	ldr	w13, [x30]
   118a0:	add	w28, w9, w28
   118a4:	add	w28, w28, w8
   118a8:	cmp	w28, w13
   118ac:	b.cs	118cc <lzma_mode_is_supported@@XZ_5.0+0x23fc>  // b.hs, b.nlast
   118b0:	mov	w8, w15
   118b4:	add	w13, w26, #0x4
   118b8:	madd	x8, x8, x16, x21
   118bc:	str	w28, [x30]
   118c0:	str	wzr, [x8, x18]
   118c4:	str	w13, [x8, x0]
   118c8:	strb	wzr, [x8, x1]
   118cc:	add	x8, x21, x27, lsl #3
   118d0:	ldr	w8, [x8, #756]
   118d4:	add	w15, w25, #0x2
   118d8:	cmp	w15, w8
   118dc:	b.ne	118f0 <lzma_mode_is_supported@@XZ_5.0+0x2420>  // b.any
   118e0:	ldr	x27, [sp, #168]
   118e4:	add	w10, w10, #0x1
   118e8:	cmp	w10, w11
   118ec:	b.eq	10680 <lzma_mode_is_supported@@XZ_5.0+0x11b0>  // b.none
   118f0:	add	w15, w15, #0x1
   118f4:	b	1180c <lzma_mode_is_supported@@XZ_5.0+0x233c>
   118f8:	ldr	x2, [sp, #24]
   118fc:	mov	w3, w26
   11900:	mov	w8, #0x2c                  	// #44
   11904:	mov	w9, #0xef8                 	// #3832
   11908:	mov	w10, #0xefc                 	// #3836
   1190c:	str	w3, [x23, #76]
   11910:	movk	w9, #0x1, lsl #16
   11914:	movk	w10, #0x1, lsl #16
   11918:	umaddl	x11, w3, w8, x21
   1191c:	ldr	w15, [x11, x9]
   11920:	ldr	w11, [x11, x10]
   11924:	mov	w10, #0xee4                 	// #3812
   11928:	movk	w10, #0x1, lsl #16
   1192c:	add	x12, x21, x10
   11930:	umaddl	x14, w3, w8, x12
   11934:	ldrb	w17, [x14, #4]
   11938:	mov	w13, w3
   1193c:	mov	w3, w15
   11940:	mov	w14, w15
   11944:	umaddl	x15, w15, w8, x12
   11948:	add	x16, x15, #0x18
   1194c:	cbz	w17, 1199c <lzma_mode_is_supported@@XZ_5.0+0x24cc>
   11950:	add	x0, x21, x10
   11954:	mov	w18, w13
   11958:	mov	w17, #0xffffffff            	// #-1
   1195c:	sub	w15, w14, #0x1
   11960:	madd	x1, x14, x8, x0
   11964:	str	w17, [x16]
   11968:	strb	wzr, [x1, #4]
   1196c:	str	w15, [x1, #20]
   11970:	madd	x0, x18, x8, x0
   11974:	ldrb	w0, [x0, #5]
   11978:	cbz	w0, 119a8 <lzma_mode_is_supported@@XZ_5.0+0x24d8>
   1197c:	add	x17, x21, x10
   11980:	umaddl	x0, w15, w8, x17
   11984:	madd	x17, x18, x8, x17
   11988:	strb	wzr, [x0, #4]
   1198c:	ldr	x17, [x17, #8]
   11990:	stur	x17, [x0, #20]
   11994:	mov	w17, #0xffffffff            	// #-1
   11998:	b	119a8 <lzma_mode_is_supported@@XZ_5.0+0x24d8>
   1199c:	madd	x15, x14, x8, x21
   119a0:	ldr	w17, [x16]
   119a4:	ldr	w15, [x15, x9]
   119a8:	madd	x18, x14, x8, x21
   119ac:	str	w11, [x16]
   119b0:	mov	w11, w17
   119b4:	str	w13, [x18, x9]
   119b8:	cbnz	w14, 11930 <lzma_mode_is_supported@@XZ_5.0+0x2460>
   119bc:	ldp	w8, w9, [x2, #20]
   119c0:	ldur	x10, [x29, #-160]
   119c4:	str	w8, [x23, #80]
   119c8:	str	w8, [x10]
   119cc:	ldur	x8, [x29, #-168]
   119d0:	str	w9, [x8]
   119d4:	b	10360 <lzma_mode_is_supported@@XZ_5.0+0xe90>
   119d8:	ldr	w9, [x0, #2968]
   119dc:	ldr	w10, [x0, #2964]
   119e0:	mov	w11, #0x8                   	// #8
   119e4:	mov	x8, x0
   119e8:	and	w9, w9, w1
   119ec:	sub	w11, w11, w10
   119f0:	lsl	w9, w9, w10
   119f4:	lsr	w10, w2, w11
   119f8:	add	w11, w10, w9
   119fc:	add	w9, w5, #0x100
   11a00:	mov	w0, wzr
   11a04:	tbz	w3, #0, 11a68 <lzma_mode_is_supported@@XZ_5.0+0x2598>
   11a08:	mov	w12, #0x600                 	// #1536
   11a0c:	madd	x8, x11, x12, x8
   11a10:	adrp	x11, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   11a14:	ldr	x11, [x11, #3960]
   11a18:	mov	w10, #0x100                 	// #256
   11a1c:	and	w12, w10, w4, lsl #1
   11a20:	add	w13, w10, w9, lsr #8
   11a24:	add	w12, w13, w12
   11a28:	add	x12, x8, w12, uxtw #1
   11a2c:	ldrh	w12, [x12, #2972]
   11a30:	ubfx	w14, w9, #7, #1
   11a34:	neg	w13, w14
   11a38:	and	w13, w13, #0x7f0
   11a3c:	eor	w12, w13, w12
   11a40:	lsr	x12, x12, #4
   11a44:	ldrb	w12, [x11, x12]
   11a48:	lsl	w9, w9, #1
   11a4c:	eor	w13, w9, w4, lsl #1
   11a50:	lsl	w4, w4, #1
   11a54:	cmp	w9, #0x10, lsl #12
   11a58:	add	w0, w0, w12
   11a5c:	bic	w10, w10, w13
   11a60:	b.cc	11a1c <lzma_mode_is_supported@@XZ_5.0+0x254c>  // b.lo, b.ul, b.last
   11a64:	b	11aac <lzma_mode_is_supported@@XZ_5.0+0x25dc>
   11a68:	mov	w10, #0x600                 	// #1536
   11a6c:	madd	x8, x11, x10, x8
   11a70:	adrp	x10, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   11a74:	ldr	x10, [x10, #3960]
   11a78:	and	w11, w9, #0x1
   11a7c:	lsr	w9, w9, #1
   11a80:	lsl	w12, w9, #1
   11a84:	add	x12, x8, x12
   11a88:	ldrh	w12, [x12, #2972]
   11a8c:	neg	w11, w11
   11a90:	and	w11, w11, #0x7f0
   11a94:	cmp	w9, #0x1
   11a98:	eor	w11, w11, w12
   11a9c:	lsr	x11, x11, #4
   11aa0:	ldrb	w11, [x10, x11]
   11aa4:	add	w0, w0, w11
   11aa8:	b.ne	11a78 <lzma_mode_is_supported@@XZ_5.0+0x25a8>  // b.any
   11aac:	ret
   11ab0:	stp	x29, x30, [sp, #-48]!
   11ab4:	stp	x20, x19, [sp, #32]
   11ab8:	ldr	x8, [x0]
   11abc:	mov	x19, x3
   11ac0:	mov	x20, x2
   11ac4:	str	x21, [sp, #16]
   11ac8:	mov	x29, sp
   11acc:	cbnz	x8, 11b04 <lzma_mode_is_supported@@XZ_5.0+0x2634>
   11ad0:	mov	x21, x0
   11ad4:	mov	w0, #0x6ec0                	// #28352
   11ad8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   11adc:	str	x0, [x21]
   11ae0:	cbz	x0, 11b30 <lzma_mode_is_supported@@XZ_5.0+0x2660>
   11ae4:	adrp	x8, 11000 <lzma_mode_is_supported@@XZ_5.0+0x1b30>
   11ae8:	adrp	x9, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4b30>
   11aec:	adrp	x10, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4b30>
   11af0:	add	x8, x8, #0xb38
   11af4:	add	x9, x9, #0x96c
   11af8:	add	x10, x10, #0xb7c
   11afc:	stp	x8, x9, [x21, #8]
   11b00:	str	x10, [x21, #24]
   11b04:	ldr	w8, [x20]
   11b08:	mov	w0, wzr
   11b0c:	str	x8, [x19]
   11b10:	ldr	x8, [x20, #8]
   11b14:	str	x8, [x19, #8]
   11b18:	ldr	w8, [x20, #16]
   11b1c:	str	x8, [x19, #16]
   11b20:	ldp	x20, x19, [sp, #32]
   11b24:	ldr	x21, [sp, #16]
   11b28:	ldp	x29, x30, [sp], #48
   11b2c:	ret
   11b30:	mov	w0, #0x5                   	// #5
   11b34:	b	11b20 <lzma_mode_is_supported@@XZ_5.0+0x2650>
   11b38:	sub	sp, sp, #0x110
   11b3c:	stp	x29, x30, [sp, #176]
   11b40:	stp	x28, x27, [sp, #192]
   11b44:	stp	x26, x25, [sp, #208]
   11b48:	stp	x24, x23, [sp, #224]
   11b4c:	stp	x22, x21, [sp, #240]
   11b50:	stp	x20, x19, [sp, #256]
   11b54:	mov	w8, #0x6e74                	// #28276
   11b58:	ldr	w8, [x0, x8]
   11b5c:	mov	w9, #0x6664                	// #26212
   11b60:	add	x29, sp, #0xb0
   11b64:	mov	x7, x2
   11b68:	add	x9, x0, x9
   11b6c:	stp	x9, x0, [x29, #-24]
   11b70:	cbz	w8, 11be4 <lzma_mode_is_supported@@XZ_5.0+0x2714>
   11b74:	ldr	x10, [x3]
   11b78:	ldur	x18, [x29, #-24]
   11b7c:	mov	x9, xzr
   11b80:	sub	x11, x8, #0x5
   11b84:	add	x12, x7, x10
   11b88:	sub	x13, x10, x4
   11b8c:	mov	w14, #0xffffffff            	// #-1
   11b90:	cmn	x13, x9
   11b94:	b.eq	11cb8 <lzma_mode_is_supported@@XZ_5.0+0x27e8>  // b.none
   11b98:	ldrb	w19, [x12, x9]
   11b9c:	cmp	w11, w9
   11ba0:	b.ne	11ba8 <lzma_mode_is_supported@@XZ_5.0+0x26d8>  // b.any
   11ba4:	cbnz	w19, 148ac <lzma_mode_is_supported@@XZ_5.0+0x53dc>
   11ba8:	ldr	w15, [x18, #2060]
   11bac:	add	x16, x10, x9
   11bb0:	add	x9, x9, #0x1
   11bb4:	add	w17, w8, w14
   11bb8:	add	x16, x16, #0x1
   11bbc:	cmp	w8, w9
   11bc0:	bfi	w19, w15, #8, #24
   11bc4:	sub	x14, x14, #0x1
   11bc8:	str	w19, [x18, #2060]
   11bcc:	str	x16, [x3]
   11bd0:	str	w17, [x18, #2064]
   11bd4:	b.ne	11b90 <lzma_mode_is_supported@@XZ_5.0+0x26c0>  // b.any
   11bd8:	add	x27, x10, x9
   11bdc:	str	x3, [sp, #24]
   11be0:	b	11bf4 <lzma_mode_is_supported@@XZ_5.0+0x2724>
   11be4:	ldur	x8, [x29, #-24]
   11be8:	ldr	x27, [x3]
   11bec:	str	x3, [sp, #24]
   11bf0:	ldr	w19, [x8, #2060]
   11bf4:	ldur	x14, [x29, #-24]
   11bf8:	ldp	x13, x16, [x1, #8]
   11bfc:	ldr	x9, [x1, #24]
   11c00:	mov	x11, #0xffffffffffffffff    	// #-1
   11c04:	ldr	w8, [x14, #2080]
   11c08:	ldr	w22, [x14, #2056]
   11c0c:	ldr	w15, [x14, #2068]
   11c10:	ldr	w5, [x14, #2072]
   11c14:	stur	w8, [x29, #-28]
   11c18:	ldr	w8, [x14, #2084]
   11c1c:	ldr	w18, [x14, #2076]
   11c20:	ldr	w28, [x14, #2124]
   11c24:	ldr	w6, [x14, #2128]
   11c28:	stur	w8, [x29, #-36]
   11c2c:	ldur	x8, [x29, #-16]
   11c30:	ldr	w17, [x14, #2132]
   11c34:	ldr	w3, [x14, #2136]
   11c38:	sub	x12, x9, x13
   11c3c:	ldr	x23, [x8, #28312]
   11c40:	ldr	x2, [x8, #28328]
   11c44:	ldr	w8, [x14, #2108]
   11c48:	mov	x20, x13
   11c4c:	cmp	x23, x12
   11c50:	ccmp	x23, x11, #0x4, cc  // cc = lo, ul, last
   11c54:	add	x10, x23, x13
   11c58:	csel	x26, x10, x9, ne  // ne = any
   11c5c:	cmp	w8, #0x46
   11c60:	add	x9, x14, #0x83c
   11c64:	stp	x9, x13, [sp]
   11c68:	str	x1, [sp, #16]
   11c6c:	b.hi	11cc4 <lzma_mode_is_supported@@XZ_5.0+0x27f4>  // b.pmore
   11c70:	ldur	x9, [x29, #-24]
   11c74:	ldr	x30, [x1]
   11c78:	ldr	x21, [x1, #32]
   11c7c:	ldr	w12, [x9, #2088]
   11c80:	ldr	w10, [x9, #2096]
   11c84:	ldr	w9, [x9, #2092]
   11c88:	stp	x9, x10, [sp, #56]
   11c8c:	adrp	x10, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   11c90:	add	x10, x10, #0xc30
   11c94:	adr	x9, 11d18 <lzma_mode_is_supported@@XZ_5.0+0x2848>
   11c98:	ldrh	w11, [x10, x8, lsl #1]
   11c9c:	add	x9, x9, x11, lsl #2
   11ca0:	stur	w12, [x29, #-32]
   11ca4:	and	w8, w12, w13
   11ca8:	str	x4, [sp, #32]
   11cac:	stp	x26, x7, [sp, #80]
   11cb0:	str	x23, [sp, #72]
   11cb4:	br	x9
   11cb8:	mov	w0, wzr
   11cbc:	b	148dc <lzma_mode_is_supported@@XZ_5.0+0x540c>
   11cc0:	mov	x20, x26
   11cc4:	mov	w9, w19
   11cc8:	lsr	w8, w22, #24
   11ccc:	cbnz	w8, 11cec <lzma_mode_is_supported@@XZ_5.0+0x281c>
   11cd0:	cmp	x27, x4
   11cd4:	b.eq	11d00 <lzma_mode_is_supported@@XZ_5.0+0x2830>  // b.none
   11cd8:	ldrb	w8, [x7, x27]
   11cdc:	add	x27, x27, #0x1
   11ce0:	lsl	w22, w22, #8
   11ce4:	bfi	w8, w9, #8, #24
   11ce8:	mov	w9, w8
   11cec:	ldr	x10, [sp]
   11cf0:	mov	w0, wzr
   11cf4:	mov	w8, #0x1                   	// #1
   11cf8:	str	w8, [x10]
   11cfc:	b	13b60 <lzma_mode_is_supported@@XZ_5.0+0x4690>
   11d00:	ldr	x8, [sp]
   11d04:	mov	w0, wzr
   11d08:	str	wzr, [x8]
   11d0c:	b	14818 <lzma_mode_is_supported@@XZ_5.0+0x5348>
   11d10:	ldur	w8, [x29, #-32]
   11d14:	and	w8, w8, w20
   11d18:	cmn	x23, #0x1
   11d1c:	b.eq	11d28 <lzma_mode_is_supported@@XZ_5.0+0x2858>  // b.none
   11d20:	cmp	x20, x26
   11d24:	b.eq	11cc0 <lzma_mode_is_supported@@XZ_5.0+0x27f0>  // b.none
   11d28:	lsr	w9, w22, #24
   11d2c:	cbnz	w9, 11d4c <lzma_mode_is_supported@@XZ_5.0+0x287c>
   11d30:	cmp	x27, x4
   11d34:	b.eq	14804 <lzma_mode_is_supported@@XZ_5.0+0x5334>  // b.none
   11d38:	ldrb	w9, [x7, x27]
   11d3c:	lsl	w11, w22, #8
   11d40:	add	x27, x27, #0x1
   11d44:	bfi	w9, w19, #8, #24
   11d48:	b	11d54 <lzma_mode_is_supported@@XZ_5.0+0x2884>
   11d4c:	mov	w11, w22
   11d50:	mov	w9, w19
   11d54:	ldur	x12, [x29, #-16]
   11d58:	mov	w10, w15
   11d5c:	lsr	w13, w11, #11
   11d60:	add	x10, x12, x10, lsl #5
   11d64:	add	x10, x10, w8, uxtw #1
   11d68:	add	x10, x10, #0x6, lsl #12
   11d6c:	ldrh	w12, [x10]
   11d70:	mul	w22, w13, w12
   11d74:	subs	w19, w9, w22
   11d78:	b.cs	1219c <lzma_mode_is_supported@@XZ_5.0+0x2ccc>  // b.hs, b.nlast
   11d7c:	mov	w8, #0x800                 	// #2048
   11d80:	cmp	x20, #0x0
   11d84:	sub	w8, w8, w12
   11d88:	add	w8, w12, w8, lsr #5
   11d8c:	csel	x11, x21, xzr, eq  // eq = none
   11d90:	add	x11, x20, x11
   11d94:	strh	w8, [x10]
   11d98:	add	x8, x11, x30
   11d9c:	ldp	x12, x10, [sp, #56]
   11da0:	ldurb	w8, [x8, #-1]
   11da4:	mov	w11, #0x8                   	// #8
   11da8:	cmp	w15, #0x6
   11dac:	and	x10, x20, x10
   11db0:	sub	w11, w11, w12
   11db4:	lsr	w8, w8, w11
   11db8:	lsl	x10, x10, x12
   11dbc:	add	x8, x10, x8
   11dc0:	ldur	x10, [x29, #-16]
   11dc4:	mov	w11, #0x600                 	// #1536
   11dc8:	madd	x2, x8, x11, x10
   11dcc:	b.hi	13b68 <lzma_mode_is_supported@@XZ_5.0+0x4698>  // b.pmore
   11dd0:	mov	w28, #0x1                   	// #1
   11dd4:	mov	w19, w9
   11dd8:	lsr	w8, w22, #24
   11ddc:	cbnz	w8, 11dfc <lzma_mode_is_supported@@XZ_5.0+0x292c>
   11de0:	cmp	x27, x4
   11de4:	b.eq	144e8 <lzma_mode_is_supported@@XZ_5.0+0x5018>  // b.none
   11de8:	ldrb	w8, [x7, x27]
   11dec:	lsl	w9, w22, #8
   11df0:	add	x27, x27, #0x1
   11df4:	bfi	w8, w19, #8, #24
   11df8:	b	11e04 <lzma_mode_is_supported@@XZ_5.0+0x2934>
   11dfc:	mov	w9, w22
   11e00:	mov	w8, w19
   11e04:	ldrh	w11, [x2, w28, uxtw #1]
   11e08:	lsr	w10, w9, #11
   11e0c:	mul	w22, w10, w11
   11e10:	subs	w19, w8, w22
   11e14:	mov	w10, w28
   11e18:	b.cs	11e38 <lzma_mode_is_supported@@XZ_5.0+0x2968>  // b.hs, b.nlast
   11e1c:	mov	w9, #0x800                 	// #2048
   11e20:	sub	w9, w9, w11
   11e24:	add	w9, w11, w9, lsr #5
   11e28:	lsl	w28, w28, #1
   11e2c:	strh	w9, [x2, x10, lsl #1]
   11e30:	mov	w19, w8
   11e34:	b	11e50 <lzma_mode_is_supported@@XZ_5.0+0x2980>
   11e38:	sub	w22, w9, w22
   11e3c:	mov	w9, #0x1                   	// #1
   11e40:	bfi	w9, w28, #1, #31
   11e44:	sub	w8, w11, w11, lsr #5
   11e48:	mov	w28, w9
   11e4c:	strh	w8, [x2, x10, lsl #1]
   11e50:	lsr	w8, w22, #24
   11e54:	cbnz	w8, 11e74 <lzma_mode_is_supported@@XZ_5.0+0x29a4>
   11e58:	cmp	x27, x4
   11e5c:	b.eq	144f4 <lzma_mode_is_supported@@XZ_5.0+0x5024>  // b.none
   11e60:	ldrb	w8, [x7, x27]
   11e64:	lsl	w9, w22, #8
   11e68:	add	x27, x27, #0x1
   11e6c:	bfi	w8, w19, #8, #24
   11e70:	b	11e7c <lzma_mode_is_supported@@XZ_5.0+0x29ac>
   11e74:	mov	w9, w22
   11e78:	mov	w8, w19
   11e7c:	ldrh	w11, [x2, w28, uxtw #1]
   11e80:	lsr	w10, w9, #11
   11e84:	mul	w22, w10, w11
   11e88:	subs	w19, w8, w22
   11e8c:	mov	w10, w28
   11e90:	b.cs	11eb0 <lzma_mode_is_supported@@XZ_5.0+0x29e0>  // b.hs, b.nlast
   11e94:	mov	w9, #0x800                 	// #2048
   11e98:	sub	w9, w9, w11
   11e9c:	add	w9, w11, w9, lsr #5
   11ea0:	lsl	w28, w28, #1
   11ea4:	strh	w9, [x2, x10, lsl #1]
   11ea8:	mov	w19, w8
   11eac:	b	11ec8 <lzma_mode_is_supported@@XZ_5.0+0x29f8>
   11eb0:	sub	w22, w9, w22
   11eb4:	mov	w9, #0x1                   	// #1
   11eb8:	bfi	w9, w28, #1, #31
   11ebc:	sub	w8, w11, w11, lsr #5
   11ec0:	mov	w28, w9
   11ec4:	strh	w8, [x2, x10, lsl #1]
   11ec8:	lsr	w8, w22, #24
   11ecc:	cbnz	w8, 11eec <lzma_mode_is_supported@@XZ_5.0+0x2a1c>
   11ed0:	cmp	x27, x4
   11ed4:	b.eq	14500 <lzma_mode_is_supported@@XZ_5.0+0x5030>  // b.none
   11ed8:	ldrb	w8, [x7, x27]
   11edc:	lsl	w9, w22, #8
   11ee0:	add	x27, x27, #0x1
   11ee4:	bfi	w8, w19, #8, #24
   11ee8:	b	11ef4 <lzma_mode_is_supported@@XZ_5.0+0x2a24>
   11eec:	mov	w9, w22
   11ef0:	mov	w8, w19
   11ef4:	ldrh	w11, [x2, w28, uxtw #1]
   11ef8:	lsr	w10, w9, #11
   11efc:	mul	w22, w10, w11
   11f00:	subs	w19, w8, w22
   11f04:	mov	w10, w28
   11f08:	b.cs	11f28 <lzma_mode_is_supported@@XZ_5.0+0x2a58>  // b.hs, b.nlast
   11f0c:	mov	w9, #0x800                 	// #2048
   11f10:	sub	w9, w9, w11
   11f14:	add	w9, w11, w9, lsr #5
   11f18:	lsl	w28, w28, #1
   11f1c:	strh	w9, [x2, x10, lsl #1]
   11f20:	mov	w19, w8
   11f24:	b	11f40 <lzma_mode_is_supported@@XZ_5.0+0x2a70>
   11f28:	sub	w22, w9, w22
   11f2c:	mov	w9, #0x1                   	// #1
   11f30:	bfi	w9, w28, #1, #31
   11f34:	sub	w8, w11, w11, lsr #5
   11f38:	mov	w28, w9
   11f3c:	strh	w8, [x2, x10, lsl #1]
   11f40:	lsr	w8, w22, #24
   11f44:	cbnz	w8, 11f64 <lzma_mode_is_supported@@XZ_5.0+0x2a94>
   11f48:	cmp	x27, x4
   11f4c:	b.eq	1450c <lzma_mode_is_supported@@XZ_5.0+0x503c>  // b.none
   11f50:	ldrb	w8, [x7, x27]
   11f54:	lsl	w9, w22, #8
   11f58:	add	x27, x27, #0x1
   11f5c:	bfi	w8, w19, #8, #24
   11f60:	b	11f6c <lzma_mode_is_supported@@XZ_5.0+0x2a9c>
   11f64:	mov	w9, w22
   11f68:	mov	w8, w19
   11f6c:	ldrh	w11, [x2, w28, uxtw #1]
   11f70:	lsr	w10, w9, #11
   11f74:	mul	w22, w10, w11
   11f78:	subs	w19, w8, w22
   11f7c:	mov	w10, w28
   11f80:	b.cs	11fa0 <lzma_mode_is_supported@@XZ_5.0+0x2ad0>  // b.hs, b.nlast
   11f84:	mov	w9, #0x800                 	// #2048
   11f88:	sub	w9, w9, w11
   11f8c:	add	w9, w11, w9, lsr #5
   11f90:	lsl	w28, w28, #1
   11f94:	strh	w9, [x2, x10, lsl #1]
   11f98:	mov	w19, w8
   11f9c:	b	11fb8 <lzma_mode_is_supported@@XZ_5.0+0x2ae8>
   11fa0:	sub	w22, w9, w22
   11fa4:	mov	w9, #0x1                   	// #1
   11fa8:	bfi	w9, w28, #1, #31
   11fac:	sub	w8, w11, w11, lsr #5
   11fb0:	mov	w28, w9
   11fb4:	strh	w8, [x2, x10, lsl #1]
   11fb8:	lsr	w8, w22, #24
   11fbc:	cbnz	w8, 11fdc <lzma_mode_is_supported@@XZ_5.0+0x2b0c>
   11fc0:	cmp	x27, x4
   11fc4:	b.eq	14518 <lzma_mode_is_supported@@XZ_5.0+0x5048>  // b.none
   11fc8:	ldrb	w8, [x7, x27]
   11fcc:	lsl	w9, w22, #8
   11fd0:	add	x27, x27, #0x1
   11fd4:	bfi	w8, w19, #8, #24
   11fd8:	b	11fe4 <lzma_mode_is_supported@@XZ_5.0+0x2b14>
   11fdc:	mov	w9, w22
   11fe0:	mov	w8, w19
   11fe4:	ldrh	w11, [x2, w28, uxtw #1]
   11fe8:	lsr	w10, w9, #11
   11fec:	mul	w22, w10, w11
   11ff0:	subs	w19, w8, w22
   11ff4:	mov	w10, w28
   11ff8:	b.cs	12018 <lzma_mode_is_supported@@XZ_5.0+0x2b48>  // b.hs, b.nlast
   11ffc:	mov	w9, #0x800                 	// #2048
   12000:	sub	w9, w9, w11
   12004:	add	w9, w11, w9, lsr #5
   12008:	lsl	w28, w28, #1
   1200c:	strh	w9, [x2, x10, lsl #1]
   12010:	mov	w19, w8
   12014:	b	12030 <lzma_mode_is_supported@@XZ_5.0+0x2b60>
   12018:	sub	w22, w9, w22
   1201c:	mov	w9, #0x1                   	// #1
   12020:	bfi	w9, w28, #1, #31
   12024:	sub	w8, w11, w11, lsr #5
   12028:	mov	w28, w9
   1202c:	strh	w8, [x2, x10, lsl #1]
   12030:	lsr	w8, w22, #24
   12034:	cbnz	w8, 12054 <lzma_mode_is_supported@@XZ_5.0+0x2b84>
   12038:	cmp	x27, x4
   1203c:	b.eq	14524 <lzma_mode_is_supported@@XZ_5.0+0x5054>  // b.none
   12040:	ldrb	w8, [x7, x27]
   12044:	lsl	w9, w22, #8
   12048:	add	x27, x27, #0x1
   1204c:	bfi	w8, w19, #8, #24
   12050:	b	1205c <lzma_mode_is_supported@@XZ_5.0+0x2b8c>
   12054:	mov	w9, w22
   12058:	mov	w8, w19
   1205c:	ldrh	w11, [x2, w28, uxtw #1]
   12060:	lsr	w10, w9, #11
   12064:	mul	w22, w10, w11
   12068:	subs	w19, w8, w22
   1206c:	mov	w10, w28
   12070:	b.cs	12090 <lzma_mode_is_supported@@XZ_5.0+0x2bc0>  // b.hs, b.nlast
   12074:	mov	w9, #0x800                 	// #2048
   12078:	sub	w9, w9, w11
   1207c:	add	w9, w11, w9, lsr #5
   12080:	lsl	w28, w28, #1
   12084:	strh	w9, [x2, x10, lsl #1]
   12088:	mov	w19, w8
   1208c:	b	120a8 <lzma_mode_is_supported@@XZ_5.0+0x2bd8>
   12090:	sub	w22, w9, w22
   12094:	mov	w9, #0x1                   	// #1
   12098:	bfi	w9, w28, #1, #31
   1209c:	sub	w8, w11, w11, lsr #5
   120a0:	mov	w28, w9
   120a4:	strh	w8, [x2, x10, lsl #1]
   120a8:	lsr	w8, w22, #24
   120ac:	cbnz	w8, 120cc <lzma_mode_is_supported@@XZ_5.0+0x2bfc>
   120b0:	cmp	x27, x4
   120b4:	b.eq	14530 <lzma_mode_is_supported@@XZ_5.0+0x5060>  // b.none
   120b8:	ldrb	w8, [x7, x27]
   120bc:	lsl	w9, w22, #8
   120c0:	add	x27, x27, #0x1
   120c4:	bfi	w8, w19, #8, #24
   120c8:	b	120d4 <lzma_mode_is_supported@@XZ_5.0+0x2c04>
   120cc:	mov	w9, w22
   120d0:	mov	w8, w19
   120d4:	ldrh	w11, [x2, w28, uxtw #1]
   120d8:	lsr	w10, w9, #11
   120dc:	mul	w22, w10, w11
   120e0:	subs	w19, w8, w22
   120e4:	mov	w10, w28
   120e8:	b.cs	12108 <lzma_mode_is_supported@@XZ_5.0+0x2c38>  // b.hs, b.nlast
   120ec:	mov	w9, #0x800                 	// #2048
   120f0:	sub	w9, w9, w11
   120f4:	add	w9, w11, w9, lsr #5
   120f8:	lsl	w28, w28, #1
   120fc:	strh	w9, [x2, x10, lsl #1]
   12100:	mov	w19, w8
   12104:	b	12120 <lzma_mode_is_supported@@XZ_5.0+0x2c50>
   12108:	sub	w22, w9, w22
   1210c:	mov	w9, #0x1                   	// #1
   12110:	bfi	w9, w28, #1, #31
   12114:	sub	w8, w11, w11, lsr #5
   12118:	mov	w28, w9
   1211c:	strh	w8, [x2, x10, lsl #1]
   12120:	lsr	w8, w22, #24
   12124:	cbnz	w8, 12144 <lzma_mode_is_supported@@XZ_5.0+0x2c74>
   12128:	cmp	x27, x4
   1212c:	b.eq	1453c <lzma_mode_is_supported@@XZ_5.0+0x506c>  // b.none
   12130:	ldrb	w8, [x7, x27]
   12134:	lsl	w9, w22, #8
   12138:	add	x27, x27, #0x1
   1213c:	bfi	w8, w19, #8, #24
   12140:	b	1214c <lzma_mode_is_supported@@XZ_5.0+0x2c7c>
   12144:	mov	w9, w22
   12148:	mov	w8, w19
   1214c:	ldrh	w12, [x2, w28, uxtw #1]
   12150:	lsr	w10, w9, #11
   12154:	mul	w22, w10, w12
   12158:	subs	w11, w8, w22
   1215c:	mov	w10, w28
   12160:	b.cs	12180 <lzma_mode_is_supported@@XZ_5.0+0x2cb0>  // b.hs, b.nlast
   12164:	mov	w9, #0x800                 	// #2048
   12168:	sub	w9, w9, w12
   1216c:	add	w9, w12, w9, lsr #5
   12170:	strh	w9, [x2, x10, lsl #1]
   12174:	lsl	w9, w28, #1
   12178:	mov	w10, w17
   1217c:	b	14024 <lzma_mode_is_supported@@XZ_5.0+0x4b54>
   12180:	sub	w22, w9, w22
   12184:	sub	w8, w12, w12, lsr #5
   12188:	mov	w9, #0x1                   	// #1
   1218c:	strh	w8, [x2, x10, lsl #1]
   12190:	bfi	w9, w28, #1, #31
   12194:	mov	w10, w17
   12198:	b	14020 <lzma_mode_is_supported@@XZ_5.0+0x4b50>
   1219c:	sub	w22, w11, w22
   121a0:	sub	w9, w12, w12, lsr #5
   121a4:	strh	w9, [x10]
   121a8:	ldur	w1, [x29, #-28]
   121ac:	lsr	w9, w22, #24
   121b0:	stur	w18, [x29, #-28]
   121b4:	cbnz	w9, 121d4 <lzma_mode_is_supported@@XZ_5.0+0x2d04>
   121b8:	cmp	x27, x4
   121bc:	b.eq	14548 <lzma_mode_is_supported@@XZ_5.0+0x5078>  // b.none
   121c0:	ldrb	w10, [x7, x27]
   121c4:	lsl	w14, w22, #8
   121c8:	add	x27, x27, #0x1
   121cc:	bfi	w10, w19, #8, #24
   121d0:	b	121dc <lzma_mode_is_supported@@XZ_5.0+0x2d0c>
   121d4:	mov	w14, w22
   121d8:	mov	w10, w19
   121dc:	ldur	x11, [x29, #-16]
   121e0:	mov	w9, #0x6180                	// #24960
   121e4:	mov	w13, w15
   121e8:	add	x11, x11, x9
   121ec:	ldrh	w12, [x11, w15, uxtw #1]
   121f0:	lsr	w9, w14, #11
   121f4:	mul	w22, w9, w12
   121f8:	subs	w9, w10, w22
   121fc:	b.cs	122fc <lzma_mode_is_supported@@XZ_5.0+0x2e2c>  // b.hs, b.nlast
   12200:	mov	w9, #0x800                 	// #2048
   12204:	cmp	w15, #0x7
   12208:	mov	w14, #0xa                   	// #10
   1220c:	mov	w15, #0x7                   	// #7
   12210:	sub	w9, w9, w12
   12214:	mov	w18, w5
   12218:	csel	w15, w15, w14, cc  // cc = lo, ul, last
   1221c:	add	w9, w12, w9, lsr #5
   12220:	mov	w28, #0x1                   	// #1
   12224:	mov	w19, w10
   12228:	stur	w1, [x29, #-36]
   1222c:	strh	w9, [x11, x13, lsl #1]
   12230:	lsr	w9, w22, #24
   12234:	cbnz	w9, 12254 <lzma_mode_is_supported@@XZ_5.0+0x2d84>
   12238:	cmp	x27, x4
   1223c:	b.eq	14564 <lzma_mode_is_supported@@XZ_5.0+0x5094>  // b.none
   12240:	ldrb	w9, [x7, x27]
   12244:	lsl	w10, w22, #8
   12248:	add	x27, x27, #0x1
   1224c:	bfi	w9, w19, #8, #24
   12250:	b	1225c <lzma_mode_is_supported@@XZ_5.0+0x2d8c>
   12254:	mov	w10, w22
   12258:	mov	w9, w19
   1225c:	ldur	x11, [x29, #-24]
   12260:	lsr	w12, w10, #11
   12264:	ldrh	w11, [x11]
   12268:	mul	w22, w12, w11
   1226c:	subs	w19, w9, w22
   12270:	b.cs	12a88 <lzma_mode_is_supported@@XZ_5.0+0x35b8>  // b.hs, b.nlast
   12274:	mov	w10, #0x800                 	// #2048
   12278:	sub	w10, w10, w11
   1227c:	add	w10, w11, w10, lsr #5
   12280:	ldur	x11, [x29, #-24]
   12284:	mov	w19, w9
   12288:	strh	w10, [x11]
   1228c:	lsr	w9, w22, #24
   12290:	cbnz	w9, 122b0 <lzma_mode_is_supported@@XZ_5.0+0x2de0>
   12294:	cmp	x27, x4
   12298:	b.eq	14570 <lzma_mode_is_supported@@XZ_5.0+0x50a0>  // b.none
   1229c:	ldrb	w9, [x7, x27]
   122a0:	lsl	w10, w22, #8
   122a4:	add	x27, x27, #0x1
   122a8:	bfi	w9, w19, #8, #24
   122ac:	b	122b8 <lzma_mode_is_supported@@XZ_5.0+0x2de8>
   122b0:	mov	w10, w22
   122b4:	mov	w9, w19
   122b8:	ldur	x11, [x29, #-16]
   122bc:	mov	w12, #0x6668                	// #26216
   122c0:	lsr	w13, w10, #11
   122c4:	add	x11, x11, w8, uxtw #4
   122c8:	add	x11, x11, w28, uxtw #1
   122cc:	add	x11, x11, x12
   122d0:	ldrh	w12, [x11]
   122d4:	mul	w22, w13, w12
   122d8:	subs	w19, w9, w22
   122dc:	b.cs	12434 <lzma_mode_is_supported@@XZ_5.0+0x2f64>  // b.hs, b.nlast
   122e0:	mov	w10, #0x800                 	// #2048
   122e4:	sub	w10, w10, w12
   122e8:	add	w10, w12, w10, lsr #5
   122ec:	lsl	w28, w28, #1
   122f0:	strh	w10, [x11]
   122f4:	mov	w19, w9
   122f8:	b	1244c <lzma_mode_is_supported@@XZ_5.0+0x2f7c>
   122fc:	sub	w22, w14, w22
   12300:	sub	w10, w12, w12, lsr #5
   12304:	strh	w10, [x11, x13, lsl #1]
   12308:	cbz	x16, 147f4 <lzma_mode_is_supported@@XZ_5.0+0x5324>
   1230c:	ldur	w18, [x29, #-28]
   12310:	mov	w19, w9
   12314:	stur	w1, [x29, #-28]
   12318:	lsr	w9, w22, #24
   1231c:	cbnz	w9, 1233c <lzma_mode_is_supported@@XZ_5.0+0x2e6c>
   12320:	cmp	x27, x4
   12324:	b.eq	1457c <lzma_mode_is_supported@@XZ_5.0+0x50ac>  // b.none
   12328:	ldrb	w9, [x7, x27]
   1232c:	lsl	w22, w22, #8
   12330:	add	x27, x27, #0x1
   12334:	bfi	w9, w19, #8, #24
   12338:	b	12340 <lzma_mode_is_supported@@XZ_5.0+0x2e70>
   1233c:	mov	w9, w19
   12340:	ldur	x11, [x29, #-16]
   12344:	mov	w10, #0x6198                	// #24984
   12348:	mov	w13, w15
   1234c:	add	x11, x11, x10
   12350:	ldrh	w12, [x11, w15, uxtw #1]
   12354:	lsr	w10, w22, #11
   12358:	mul	w10, w10, w12
   1235c:	subs	w19, w9, w10
   12360:	b.cs	124bc <lzma_mode_is_supported@@XZ_5.0+0x2fec>  // b.hs, b.nlast
   12364:	mov	w14, #0x800                 	// #2048
   12368:	sub	w14, w14, w12
   1236c:	add	w12, w12, w14, lsr #5
   12370:	mov	w22, w10
   12374:	mov	w19, w9
   12378:	strh	w12, [x11, x13, lsl #1]
   1237c:	lsr	w9, w22, #24
   12380:	cbnz	w9, 123a0 <lzma_mode_is_supported@@XZ_5.0+0x2ed0>
   12384:	cmp	x27, x4
   12388:	b.eq	14588 <lzma_mode_is_supported@@XZ_5.0+0x50b8>  // b.none
   1238c:	ldrb	w10, [x7, x27]
   12390:	lsl	w11, w22, #8
   12394:	add	x27, x27, #0x1
   12398:	bfi	w10, w19, #8, #24
   1239c:	b	123a8 <lzma_mode_is_supported@@XZ_5.0+0x2ed8>
   123a0:	mov	w11, w22
   123a4:	mov	w10, w19
   123a8:	ldur	x12, [x29, #-16]
   123ac:	mov	w9, w15
   123b0:	add	x9, x12, x9, lsl #5
   123b4:	add	x9, x9, w8, uxtw #1
   123b8:	mov	w12, #0x61e0                	// #25056
   123bc:	add	x12, x9, x12
   123c0:	ldrh	w13, [x12]
   123c4:	lsr	w9, w11, #11
   123c8:	mul	w22, w9, w13
   123cc:	subs	w9, w10, w22
   123d0:	b.cs	12534 <lzma_mode_is_supported@@XZ_5.0+0x3064>  // b.hs, b.nlast
   123d4:	mov	w8, #0x800                 	// #2048
   123d8:	cmp	w15, #0x7
   123dc:	mov	w9, #0xb                   	// #11
   123e0:	mov	w11, #0x9                   	// #9
   123e4:	sub	w8, w8, w13
   123e8:	add	w8, w13, w8, lsr #5
   123ec:	csel	w15, w11, w9, cc  // cc = lo, ul, last
   123f0:	mov	w19, w10
   123f4:	strh	w8, [x12]
   123f8:	cmp	x20, x26
   123fc:	b.eq	144c4 <lzma_mode_is_supported@@XZ_5.0+0x4ff4>  // b.none
   12400:	mov	w8, w5
   12404:	mvn	x9, x8
   12408:	cmp	x20, x8
   1240c:	add	x8, x20, x9
   12410:	csel	x9, xzr, x21, hi  // hi = pmore
   12414:	add	x8, x8, x9
   12418:	ldrb	w8, [x30, x8]
   1241c:	add	x9, x20, #0x1
   12420:	cmp	x9, x16
   12424:	csinc	x16, x16, x20, ls  // ls = plast
   12428:	strb	w8, [x30, x20]
   1242c:	mov	x20, x9
   12430:	b	11d10 <lzma_mode_is_supported@@XZ_5.0+0x2840>
   12434:	sub	w22, w10, w22
   12438:	mov	w10, #0x1                   	// #1
   1243c:	bfi	w10, w28, #1, #31
   12440:	sub	w9, w12, w12, lsr #5
   12444:	mov	w28, w10
   12448:	strh	w9, [x11]
   1244c:	lsr	w9, w22, #24
   12450:	cbnz	w9, 12470 <lzma_mode_is_supported@@XZ_5.0+0x2fa0>
   12454:	cmp	x27, x4
   12458:	b.eq	14594 <lzma_mode_is_supported@@XZ_5.0+0x50c4>  // b.none
   1245c:	ldrb	w9, [x7, x27]
   12460:	lsl	w10, w22, #8
   12464:	add	x27, x27, #0x1
   12468:	bfi	w9, w19, #8, #24
   1246c:	b	12478 <lzma_mode_is_supported@@XZ_5.0+0x2fa8>
   12470:	mov	w10, w22
   12474:	mov	w9, w19
   12478:	ldur	x11, [x29, #-16]
   1247c:	mov	w12, #0x6668                	// #26216
   12480:	lsr	w13, w10, #11
   12484:	add	x11, x11, w8, uxtw #4
   12488:	add	x11, x11, w28, uxtw #1
   1248c:	add	x11, x11, x12
   12490:	ldrh	w12, [x11]
   12494:	mul	w22, w13, w12
   12498:	subs	w19, w9, w22
   1249c:	b.cs	12550 <lzma_mode_is_supported@@XZ_5.0+0x3080>  // b.hs, b.nlast
   124a0:	mov	w10, #0x800                 	// #2048
   124a4:	sub	w10, w10, w12
   124a8:	add	w10, w12, w10, lsr #5
   124ac:	lsl	w28, w28, #1
   124b0:	strh	w10, [x11]
   124b4:	mov	w19, w9
   124b8:	b	12568 <lzma_mode_is_supported@@XZ_5.0+0x3098>
   124bc:	sub	w22, w22, w10
   124c0:	sub	w9, w12, w12, lsr #5
   124c4:	strh	w9, [x11, x13, lsl #1]
   124c8:	lsr	w9, w22, #24
   124cc:	cbnz	w9, 124ec <lzma_mode_is_supported@@XZ_5.0+0x301c>
   124d0:	cmp	x27, x4
   124d4:	b.eq	145a0 <lzma_mode_is_supported@@XZ_5.0+0x50d0>  // b.none
   124d8:	ldrb	w9, [x7, x27]
   124dc:	lsl	w10, w22, #8
   124e0:	add	x27, x27, #0x1
   124e4:	bfi	w9, w19, #8, #24
   124e8:	b	124f4 <lzma_mode_is_supported@@XZ_5.0+0x3024>
   124ec:	mov	w10, w22
   124f0:	mov	w9, w19
   124f4:	ldur	x12, [x29, #-16]
   124f8:	mov	w11, #0x61b0                	// #25008
   124fc:	lsr	w13, w10, #11
   12500:	add	x11, x12, x11
   12504:	ldrh	w12, [x11, w15, uxtw #1]
   12508:	mul	w22, w13, w12
   1250c:	subs	w19, w9, w22
   12510:	mov	w13, w15
   12514:	b.cs	125d4 <lzma_mode_is_supported@@XZ_5.0+0x3104>  // b.hs, b.nlast
   12518:	mov	w10, #0x800                 	// #2048
   1251c:	mov	w0, w18
   12520:	ldur	w18, [x29, #-28]
   12524:	sub	w10, w10, w12
   12528:	add	w10, w12, w10, lsr #5
   1252c:	strh	w10, [x11, x13, lsl #1]
   12530:	b	12644 <lzma_mode_is_supported@@XZ_5.0+0x3174>
   12534:	mov	w1, w18
   12538:	ldur	w18, [x29, #-28]
   1253c:	sub	w10, w13, w13, lsr #5
   12540:	sub	w22, w11, w22
   12544:	strh	w10, [x12]
   12548:	mov	w0, w5
   1254c:	b	1268c <lzma_mode_is_supported@@XZ_5.0+0x31bc>
   12550:	sub	w22, w10, w22
   12554:	mov	w10, #0x1                   	// #1
   12558:	bfi	w10, w28, #1, #31
   1255c:	sub	w9, w12, w12, lsr #5
   12560:	mov	w28, w10
   12564:	strh	w9, [x11]
   12568:	lsr	w9, w22, #24
   1256c:	cbnz	w9, 1258c <lzma_mode_is_supported@@XZ_5.0+0x30bc>
   12570:	cmp	x27, x4
   12574:	b.eq	145ac <lzma_mode_is_supported@@XZ_5.0+0x50dc>  // b.none
   12578:	ldrb	w9, [x7, x27]
   1257c:	lsl	w10, w22, #8
   12580:	add	x27, x27, #0x1
   12584:	bfi	w9, w19, #8, #24
   12588:	b	12594 <lzma_mode_is_supported@@XZ_5.0+0x30c4>
   1258c:	mov	w10, w22
   12590:	mov	w9, w19
   12594:	ldur	x11, [x29, #-16]
   12598:	add	x8, x11, w8, uxtw #4
   1259c:	add	x8, x8, w28, uxtw #1
   125a0:	mov	w11, #0x6668                	// #26216
   125a4:	add	x8, x8, x11
   125a8:	ldrh	w12, [x8]
   125ac:	lsr	w11, w10, #11
   125b0:	mul	w22, w11, w12
   125b4:	subs	w11, w9, w22
   125b8:	b.cs	1264c <lzma_mode_is_supported@@XZ_5.0+0x317c>  // b.hs, b.nlast
   125bc:	mov	w10, #0x800                 	// #2048
   125c0:	sub	w10, w10, w12
   125c4:	add	w10, w12, w10, lsr #5
   125c8:	strh	w10, [x8]
   125cc:	lsl	w10, w28, #1
   125d0:	b	12664 <lzma_mode_is_supported@@XZ_5.0+0x3194>
   125d4:	sub	w22, w10, w22
   125d8:	sub	w9, w12, w12, lsr #5
   125dc:	strh	w9, [x11, x13, lsl #1]
   125e0:	lsr	w9, w22, #24
   125e4:	cbnz	w9, 12604 <lzma_mode_is_supported@@XZ_5.0+0x3134>
   125e8:	cmp	x27, x4
   125ec:	b.eq	145b8 <lzma_mode_is_supported@@XZ_5.0+0x50e8>  // b.none
   125f0:	ldrb	w9, [x7, x27]
   125f4:	lsl	w10, w22, #8
   125f8:	add	x27, x27, #0x1
   125fc:	bfi	w9, w19, #8, #24
   12600:	b	1260c <lzma_mode_is_supported@@XZ_5.0+0x313c>
   12604:	mov	w10, w22
   12608:	mov	w9, w19
   1260c:	ldur	x12, [x29, #-16]
   12610:	mov	w11, #0x61c8                	// #25032
   12614:	mov	w14, w15
   12618:	add	x12, x12, x11
   1261c:	ldrh	w13, [x12, w15, uxtw #1]
   12620:	lsr	w11, w10, #11
   12624:	mul	w22, w11, w13
   12628:	subs	w11, w9, w22
   1262c:	b.cs	1266c <lzma_mode_is_supported@@XZ_5.0+0x319c>  // b.hs, b.nlast
   12630:	mov	w10, #0x800                 	// #2048
   12634:	ldur	w0, [x29, #-28]
   12638:	sub	w10, w10, w13
   1263c:	add	w10, w13, w10, lsr #5
   12640:	strh	w10, [x12, x14, lsl #1]
   12644:	mov	w1, w5
   12648:	b	1268c <lzma_mode_is_supported@@XZ_5.0+0x31bc>
   1264c:	sub	w22, w10, w22
   12650:	sub	w9, w12, w12, lsr #5
   12654:	mov	w10, #0x1                   	// #1
   12658:	strh	w9, [x8]
   1265c:	bfi	w10, w28, #1, #31
   12660:	mov	w9, w11
   12664:	sub	w3, w10, #0x6
   12668:	b	13484 <lzma_mode_is_supported@@XZ_5.0+0x3fb4>
   1266c:	sub	w9, w13, w13, lsr #5
   12670:	strh	w9, [x12, x14, lsl #1]
   12674:	ldur	w9, [x29, #-28]
   12678:	ldur	w0, [x29, #-36]
   1267c:	sub	w22, w10, w22
   12680:	mov	w1, w5
   12684:	stur	w9, [x29, #-36]
   12688:	mov	w9, w11
   1268c:	cmp	w15, #0x7
   12690:	mov	w10, #0xb                   	// #11
   12694:	mov	w11, #0x8                   	// #8
   12698:	stur	w18, [x29, #-28]
   1269c:	mov	w5, w0
   126a0:	mov	w18, w1
   126a4:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   126a8:	mov	w28, #0x1                   	// #1
   126ac:	mov	w19, w9
   126b0:	lsr	w10, w22, #24
   126b4:	mov	w9, w19
   126b8:	cbnz	w10, 126dc <lzma_mode_is_supported@@XZ_5.0+0x320c>
   126bc:	cmp	x27, x4
   126c0:	b.eq	145c4 <lzma_mode_is_supported@@XZ_5.0+0x50f4>  // b.none
   126c4:	ldrb	w11, [x7, x27]
   126c8:	add	x27, x27, #0x1
   126cc:	lsl	w10, w22, #8
   126d0:	bfi	w11, w9, #8, #24
   126d4:	mov	w9, w11
   126d8:	b	126e0 <lzma_mode_is_supported@@XZ_5.0+0x3210>
   126dc:	mov	w10, w22
   126e0:	ldur	x11, [x29, #-24]
   126e4:	lsr	w12, w10, #11
   126e8:	ldrh	w11, [x11, #1028]
   126ec:	mul	w22, w12, w11
   126f0:	subs	w19, w9, w22
   126f4:	b.cs	12780 <lzma_mode_is_supported@@XZ_5.0+0x32b0>  // b.hs, b.nlast
   126f8:	mov	w10, #0x800                 	// #2048
   126fc:	sub	w10, w10, w11
   12700:	add	w10, w11, w10, lsr #5
   12704:	ldur	x11, [x29, #-24]
   12708:	mov	w19, w9
   1270c:	strh	w10, [x11, #1028]
   12710:	lsr	w10, w22, #24
   12714:	mov	w9, w19
   12718:	cbnz	w10, 12738 <lzma_mode_is_supported@@XZ_5.0+0x3268>
   1271c:	cmp	x27, x4
   12720:	b.eq	145d0 <lzma_mode_is_supported@@XZ_5.0+0x5100>  // b.none
   12724:	ldrb	w10, [x7, x27]
   12728:	add	x27, x27, #0x1
   1272c:	lsl	w22, w22, #8
   12730:	bfi	w10, w9, #8, #24
   12734:	mov	w9, w10
   12738:	ldur	x10, [x29, #-16]
   1273c:	mov	w11, #0x6a6c                	// #27244
   12740:	add	x10, x10, w8, uxtw #4
   12744:	add	x10, x10, w28, uxtw #1
   12748:	add	x11, x10, x11
   1274c:	ldrh	w12, [x11]
   12750:	lsr	w10, w22, #11
   12754:	mul	w10, w10, w12
   12758:	subs	w19, w9, w10
   1275c:	b.cs	1285c <lzma_mode_is_supported@@XZ_5.0+0x338c>  // b.hs, b.nlast
   12760:	mov	w13, #0x800                 	// #2048
   12764:	sub	w13, w13, w12
   12768:	add	w12, w12, w13, lsr #5
   1276c:	lsl	w28, w28, #1
   12770:	strh	w12, [x11]
   12774:	mov	w22, w10
   12778:	mov	w19, w9
   1277c:	b	12874 <lzma_mode_is_supported@@XZ_5.0+0x33a4>
   12780:	sub	w22, w10, w22
   12784:	ldur	x10, [x29, #-24]
   12788:	sub	w9, w11, w11, lsr #5
   1278c:	strh	w9, [x10, #1028]
   12790:	lsr	w10, w22, #24
   12794:	mov	w9, w19
   12798:	cbnz	w10, 127b8 <lzma_mode_is_supported@@XZ_5.0+0x32e8>
   1279c:	cmp	x27, x4
   127a0:	b.eq	145dc <lzma_mode_is_supported@@XZ_5.0+0x510c>  // b.none
   127a4:	ldrb	w10, [x7, x27]
   127a8:	add	x27, x27, #0x1
   127ac:	lsl	w22, w22, #8
   127b0:	bfi	w10, w9, #8, #24
   127b4:	mov	w9, w10
   127b8:	ldur	x10, [x29, #-24]
   127bc:	ldrh	w11, [x10, #1030]
   127c0:	lsr	w10, w22, #11
   127c4:	mul	w10, w10, w11
   127c8:	subs	w19, w9, w10
   127cc:	b.cs	128e4 <lzma_mode_is_supported@@XZ_5.0+0x3414>  // b.hs, b.nlast
   127d0:	mov	w12, #0x800                 	// #2048
   127d4:	sub	w12, w12, w11
   127d8:	add	w11, w11, w12, lsr #5
   127dc:	ldur	x12, [x29, #-24]
   127e0:	mov	w22, w10
   127e4:	mov	w19, w9
   127e8:	strh	w11, [x12, #1030]
   127ec:	lsr	w10, w22, #24
   127f0:	mov	w9, w19
   127f4:	cbnz	w10, 12814 <lzma_mode_is_supported@@XZ_5.0+0x3344>
   127f8:	cmp	x27, x4
   127fc:	b.eq	145e8 <lzma_mode_is_supported@@XZ_5.0+0x5118>  // b.none
   12800:	ldrb	w10, [x7, x27]
   12804:	add	x27, x27, #0x1
   12808:	lsl	w22, w22, #8
   1280c:	bfi	w10, w9, #8, #24
   12810:	mov	w9, w10
   12814:	ldur	x10, [x29, #-16]
   12818:	mov	w11, #0x6b6c                	// #27500
   1281c:	add	x10, x10, w8, uxtw #4
   12820:	add	x10, x10, w28, uxtw #1
   12824:	add	x11, x10, x11
   12828:	ldrh	w12, [x11]
   1282c:	lsr	w10, w22, #11
   12830:	mul	w10, w10, w12
   12834:	subs	w19, w9, w10
   12838:	b.cs	12d90 <lzma_mode_is_supported@@XZ_5.0+0x38c0>  // b.hs, b.nlast
   1283c:	mov	w13, #0x800                 	// #2048
   12840:	sub	w13, w13, w12
   12844:	add	w12, w12, w13, lsr #5
   12848:	lsl	w28, w28, #1
   1284c:	strh	w12, [x11]
   12850:	mov	w22, w10
   12854:	mov	w19, w9
   12858:	b	12da8 <lzma_mode_is_supported@@XZ_5.0+0x38d8>
   1285c:	sub	w22, w22, w10
   12860:	mov	w10, #0x1                   	// #1
   12864:	bfi	w10, w28, #1, #31
   12868:	sub	w9, w12, w12, lsr #5
   1286c:	mov	w28, w10
   12870:	strh	w9, [x11]
   12874:	lsr	w9, w22, #24
   12878:	cbnz	w9, 12898 <lzma_mode_is_supported@@XZ_5.0+0x33c8>
   1287c:	cmp	x27, x4
   12880:	b.eq	145f4 <lzma_mode_is_supported@@XZ_5.0+0x5124>  // b.none
   12884:	ldrb	w9, [x7, x27]
   12888:	lsl	w10, w22, #8
   1288c:	add	x27, x27, #0x1
   12890:	bfi	w9, w19, #8, #24
   12894:	b	128a0 <lzma_mode_is_supported@@XZ_5.0+0x33d0>
   12898:	mov	w10, w22
   1289c:	mov	w9, w19
   128a0:	ldur	x11, [x29, #-16]
   128a4:	mov	w12, #0x6a6c                	// #27244
   128a8:	lsr	w13, w10, #11
   128ac:	add	x11, x11, w8, uxtw #4
   128b0:	add	x11, x11, w28, uxtw #1
   128b4:	add	x11, x11, x12
   128b8:	ldrh	w12, [x11]
   128bc:	mul	w22, w13, w12
   128c0:	subs	w19, w9, w22
   128c4:	b.cs	12960 <lzma_mode_is_supported@@XZ_5.0+0x3490>  // b.hs, b.nlast
   128c8:	mov	w10, #0x800                 	// #2048
   128cc:	sub	w10, w10, w12
   128d0:	add	w10, w12, w10, lsr #5
   128d4:	lsl	w28, w28, #1
   128d8:	strh	w10, [x11]
   128dc:	mov	w19, w9
   128e0:	b	12978 <lzma_mode_is_supported@@XZ_5.0+0x34a8>
   128e4:	ldur	x9, [x29, #-24]
   128e8:	sub	w22, w22, w10
   128ec:	sub	w8, w11, w11, lsr #5
   128f0:	strh	w8, [x9, #1030]
   128f4:	lsr	w8, w22, #24
   128f8:	mov	w9, w19
   128fc:	cbnz	w8, 1291c <lzma_mode_is_supported@@XZ_5.0+0x344c>
   12900:	cmp	x27, x4
   12904:	b.eq	14600 <lzma_mode_is_supported@@XZ_5.0+0x5130>  // b.none
   12908:	ldrb	w8, [x7, x27]
   1290c:	add	x27, x27, #0x1
   12910:	lsl	w22, w22, #8
   12914:	bfi	w8, w9, #8, #24
   12918:	mov	w9, w8
   1291c:	ldur	x10, [x29, #-16]
   12920:	mov	w8, #0x6c6c                	// #27756
   12924:	mov	w11, w28
   12928:	add	x10, x10, x8
   1292c:	ldrh	w12, [x10, w28, uxtw #1]
   12930:	lsr	w8, w22, #11
   12934:	mul	w8, w8, w12
   12938:	subs	w19, w9, w8
   1293c:	b.cs	129e4 <lzma_mode_is_supported@@XZ_5.0+0x3514>  // b.hs, b.nlast
   12940:	mov	w13, #0x800                 	// #2048
   12944:	sub	w13, w13, w12
   12948:	add	w12, w12, w13, lsr #5
   1294c:	lsl	w28, w28, #1
   12950:	strh	w12, [x10, x11, lsl #1]
   12954:	mov	w22, w8
   12958:	mov	w19, w9
   1295c:	b	129fc <lzma_mode_is_supported@@XZ_5.0+0x352c>
   12960:	sub	w22, w10, w22
   12964:	mov	w10, #0x1                   	// #1
   12968:	bfi	w10, w28, #1, #31
   1296c:	sub	w9, w12, w12, lsr #5
   12970:	mov	w28, w10
   12974:	strh	w9, [x11]
   12978:	lsr	w9, w22, #24
   1297c:	cbnz	w9, 1299c <lzma_mode_is_supported@@XZ_5.0+0x34cc>
   12980:	cmp	x27, x4
   12984:	b.eq	14614 <lzma_mode_is_supported@@XZ_5.0+0x5144>  // b.none
   12988:	ldrb	w9, [x7, x27]
   1298c:	lsl	w10, w22, #8
   12990:	add	x27, x27, #0x1
   12994:	bfi	w9, w19, #8, #24
   12998:	b	129a4 <lzma_mode_is_supported@@XZ_5.0+0x34d4>
   1299c:	mov	w10, w22
   129a0:	mov	w9, w19
   129a4:	ldur	x11, [x29, #-16]
   129a8:	lsr	w12, w10, #11
   129ac:	add	x8, x11, w8, uxtw #4
   129b0:	add	x8, x8, w28, uxtw #1
   129b4:	mov	w11, #0x6a6c                	// #27244
   129b8:	add	x11, x8, x11
   129bc:	ldrh	w8, [x11]
   129c0:	mul	w22, w12, w8
   129c4:	subs	w12, w9, w22
   129c8:	b.cs	12a68 <lzma_mode_is_supported@@XZ_5.0+0x3598>  // b.hs, b.nlast
   129cc:	mov	w10, #0x800                 	// #2048
   129d0:	sub	w10, w10, w8
   129d4:	add	w8, w8, w10, lsr #5
   129d8:	strh	w8, [x11]
   129dc:	lsl	w8, w28, #1
   129e0:	b	12a80 <lzma_mode_is_supported@@XZ_5.0+0x35b0>
   129e4:	mov	w9, #0x1                   	// #1
   129e8:	bfi	w9, w28, #1, #31
   129ec:	sub	w22, w22, w8
   129f0:	sub	w8, w12, w12, lsr #5
   129f4:	mov	w28, w9
   129f8:	strh	w8, [x10, x11, lsl #1]
   129fc:	lsr	w8, w22, #24
   12a00:	cbnz	w8, 12a20 <lzma_mode_is_supported@@XZ_5.0+0x3550>
   12a04:	cmp	x27, x4
   12a08:	b.eq	14620 <lzma_mode_is_supported@@XZ_5.0+0x5150>  // b.none
   12a0c:	ldrb	w8, [x7, x27]
   12a10:	lsl	w22, w22, #8
   12a14:	add	x27, x27, #0x1
   12a18:	bfi	w8, w19, #8, #24
   12a1c:	b	12a24 <lzma_mode_is_supported@@XZ_5.0+0x3554>
   12a20:	mov	w8, w19
   12a24:	ldur	x10, [x29, #-16]
   12a28:	mov	w9, #0x6c6c                	// #27756
   12a2c:	mov	w11, w28
   12a30:	add	x10, x10, x9
   12a34:	ldrh	w12, [x10, w28, uxtw #1]
   12a38:	lsr	w9, w22, #11
   12a3c:	mul	w9, w9, w12
   12a40:	subs	w19, w8, w9
   12a44:	b.cs	12e18 <lzma_mode_is_supported@@XZ_5.0+0x3948>  // b.hs, b.nlast
   12a48:	mov	w13, #0x800                 	// #2048
   12a4c:	sub	w13, w13, w12
   12a50:	add	w12, w12, w13, lsr #5
   12a54:	lsl	w28, w28, #1
   12a58:	strh	w12, [x10, x11, lsl #1]
   12a5c:	mov	w22, w9
   12a60:	mov	w19, w8
   12a64:	b	12e30 <lzma_mode_is_supported@@XZ_5.0+0x3960>
   12a68:	sub	w9, w8, w8, lsr #5
   12a6c:	mov	w8, #0x1                   	// #1
   12a70:	sub	w22, w10, w22
   12a74:	strh	w9, [x11]
   12a78:	bfi	w8, w28, #1, #31
   12a7c:	mov	w9, w12
   12a80:	sub	w3, w8, #0x6
   12a84:	b	1314c <lzma_mode_is_supported@@XZ_5.0+0x3c7c>
   12a88:	sub	w22, w10, w22
   12a8c:	ldur	x10, [x29, #-24]
   12a90:	sub	w9, w11, w11, lsr #5
   12a94:	strh	w9, [x10]
   12a98:	lsr	w9, w22, #24
   12a9c:	cbnz	w9, 12abc <lzma_mode_is_supported@@XZ_5.0+0x35ec>
   12aa0:	cmp	x27, x4
   12aa4:	b.eq	1462c <lzma_mode_is_supported@@XZ_5.0+0x515c>  // b.none
   12aa8:	ldrb	w9, [x7, x27]
   12aac:	lsl	w10, w22, #8
   12ab0:	add	x27, x27, #0x1
   12ab4:	bfi	w9, w19, #8, #24
   12ab8:	b	12ac4 <lzma_mode_is_supported@@XZ_5.0+0x35f4>
   12abc:	mov	w10, w22
   12ac0:	mov	w9, w19
   12ac4:	ldur	x11, [x29, #-24]
   12ac8:	lsr	w12, w10, #11
   12acc:	ldrh	w11, [x11, #2]
   12ad0:	mul	w22, w12, w11
   12ad4:	subs	w19, w9, w22
   12ad8:	b.cs	12b64 <lzma_mode_is_supported@@XZ_5.0+0x3694>  // b.hs, b.nlast
   12adc:	mov	w10, #0x800                 	// #2048
   12ae0:	sub	w10, w10, w11
   12ae4:	add	w10, w11, w10, lsr #5
   12ae8:	ldur	x11, [x29, #-24]
   12aec:	mov	w19, w9
   12af0:	strh	w10, [x11, #2]
   12af4:	lsr	w9, w22, #24
   12af8:	cbnz	w9, 12b18 <lzma_mode_is_supported@@XZ_5.0+0x3648>
   12afc:	cmp	x27, x4
   12b00:	b.eq	14638 <lzma_mode_is_supported@@XZ_5.0+0x5168>  // b.none
   12b04:	ldrb	w9, [x7, x27]
   12b08:	lsl	w10, w22, #8
   12b0c:	add	x27, x27, #0x1
   12b10:	bfi	w9, w19, #8, #24
   12b14:	b	12b20 <lzma_mode_is_supported@@XZ_5.0+0x3650>
   12b18:	mov	w10, w22
   12b1c:	mov	w9, w19
   12b20:	ldur	x11, [x29, #-16]
   12b24:	mov	w12, #0x6768                	// #26472
   12b28:	lsr	w13, w10, #11
   12b2c:	add	x11, x11, w8, uxtw #4
   12b30:	add	x11, x11, w28, uxtw #1
   12b34:	add	x11, x11, x12
   12b38:	ldrh	w12, [x11]
   12b3c:	mul	w22, w13, w12
   12b40:	subs	w19, w9, w22
   12b44:	b.cs	12be0 <lzma_mode_is_supported@@XZ_5.0+0x3710>  // b.hs, b.nlast
   12b48:	mov	w10, #0x800                 	// #2048
   12b4c:	sub	w10, w10, w12
   12b50:	add	w10, w12, w10, lsr #5
   12b54:	lsl	w28, w28, #1
   12b58:	strh	w10, [x11]
   12b5c:	mov	w19, w9
   12b60:	b	12bf8 <lzma_mode_is_supported@@XZ_5.0+0x3728>
   12b64:	ldur	x9, [x29, #-24]
   12b68:	sub	w22, w10, w22
   12b6c:	sub	w8, w11, w11, lsr #5
   12b70:	strh	w8, [x9, #2]
   12b74:	lsr	w8, w22, #24
   12b78:	cbnz	w8, 12b98 <lzma_mode_is_supported@@XZ_5.0+0x36c8>
   12b7c:	cmp	x27, x4
   12b80:	b.eq	14644 <lzma_mode_is_supported@@XZ_5.0+0x5174>  // b.none
   12b84:	ldrb	w8, [x7, x27]
   12b88:	lsl	w22, w22, #8
   12b8c:	add	x27, x27, #0x1
   12b90:	bfi	w8, w19, #8, #24
   12b94:	b	12b9c <lzma_mode_is_supported@@XZ_5.0+0x36cc>
   12b98:	mov	w8, w19
   12b9c:	ldur	x10, [x29, #-16]
   12ba0:	mov	w9, #0x6868                	// #26728
   12ba4:	mov	w11, w28
   12ba8:	add	x10, x10, x9
   12bac:	ldrh	w12, [x10, w28, uxtw #1]
   12bb0:	lsr	w9, w22, #11
   12bb4:	mul	w9, w9, w12
   12bb8:	subs	w19, w8, w9
   12bbc:	b.cs	12c68 <lzma_mode_is_supported@@XZ_5.0+0x3798>  // b.hs, b.nlast
   12bc0:	mov	w13, #0x800                 	// #2048
   12bc4:	sub	w13, w13, w12
   12bc8:	add	w12, w12, w13, lsr #5
   12bcc:	lsl	w28, w28, #1
   12bd0:	strh	w12, [x10, x11, lsl #1]
   12bd4:	mov	w22, w9
   12bd8:	mov	w19, w8
   12bdc:	b	12c80 <lzma_mode_is_supported@@XZ_5.0+0x37b0>
   12be0:	sub	w22, w10, w22
   12be4:	mov	w10, #0x1                   	// #1
   12be8:	bfi	w10, w28, #1, #31
   12bec:	sub	w9, w12, w12, lsr #5
   12bf0:	mov	w28, w10
   12bf4:	strh	w9, [x11]
   12bf8:	lsr	w9, w22, #24
   12bfc:	cbnz	w9, 12c1c <lzma_mode_is_supported@@XZ_5.0+0x374c>
   12c00:	cmp	x27, x4
   12c04:	b.eq	14650 <lzma_mode_is_supported@@XZ_5.0+0x5180>  // b.none
   12c08:	ldrb	w9, [x7, x27]
   12c0c:	lsl	w10, w22, #8
   12c10:	add	x27, x27, #0x1
   12c14:	bfi	w9, w19, #8, #24
   12c18:	b	12c24 <lzma_mode_is_supported@@XZ_5.0+0x3754>
   12c1c:	mov	w10, w22
   12c20:	mov	w9, w19
   12c24:	ldur	x11, [x29, #-16]
   12c28:	mov	w12, #0x6768                	// #26472
   12c2c:	lsr	w13, w10, #11
   12c30:	add	x11, x11, w8, uxtw #4
   12c34:	add	x11, x11, w28, uxtw #1
   12c38:	add	x11, x11, x12
   12c3c:	ldrh	w12, [x11]
   12c40:	mul	w22, w13, w12
   12c44:	subs	w19, w9, w22
   12c48:	b.cs	12cec <lzma_mode_is_supported@@XZ_5.0+0x381c>  // b.hs, b.nlast
   12c4c:	mov	w10, #0x800                 	// #2048
   12c50:	sub	w10, w10, w12
   12c54:	add	w10, w12, w10, lsr #5
   12c58:	lsl	w28, w28, #1
   12c5c:	strh	w10, [x11]
   12c60:	mov	w19, w9
   12c64:	b	12d04 <lzma_mode_is_supported@@XZ_5.0+0x3834>
   12c68:	sub	w22, w22, w9
   12c6c:	mov	w9, #0x1                   	// #1
   12c70:	bfi	w9, w28, #1, #31
   12c74:	sub	w8, w12, w12, lsr #5
   12c78:	mov	w28, w9
   12c7c:	strh	w8, [x10, x11, lsl #1]
   12c80:	lsr	w8, w22, #24
   12c84:	cbnz	w8, 12ca4 <lzma_mode_is_supported@@XZ_5.0+0x37d4>
   12c88:	cmp	x27, x4
   12c8c:	b.eq	1465c <lzma_mode_is_supported@@XZ_5.0+0x518c>  // b.none
   12c90:	ldrb	w8, [x7, x27]
   12c94:	lsl	w22, w22, #8
   12c98:	add	x27, x27, #0x1
   12c9c:	bfi	w8, w19, #8, #24
   12ca0:	b	12ca8 <lzma_mode_is_supported@@XZ_5.0+0x37d8>
   12ca4:	mov	w8, w19
   12ca8:	ldur	x10, [x29, #-16]
   12cac:	mov	w9, #0x6868                	// #26728
   12cb0:	mov	w11, w28
   12cb4:	add	x10, x10, x9
   12cb8:	ldrh	w12, [x10, w28, uxtw #1]
   12cbc:	lsr	w9, w22, #11
   12cc0:	mul	w9, w9, w12
   12cc4:	subs	w19, w8, w9
   12cc8:	b.cs	12f20 <lzma_mode_is_supported@@XZ_5.0+0x3a50>  // b.hs, b.nlast
   12ccc:	mov	w13, #0x800                 	// #2048
   12cd0:	sub	w13, w13, w12
   12cd4:	add	w12, w12, w13, lsr #5
   12cd8:	lsl	w28, w28, #1
   12cdc:	strh	w12, [x10, x11, lsl #1]
   12ce0:	mov	w22, w9
   12ce4:	mov	w19, w8
   12ce8:	b	12f38 <lzma_mode_is_supported@@XZ_5.0+0x3a68>
   12cec:	sub	w22, w10, w22
   12cf0:	mov	w10, #0x1                   	// #1
   12cf4:	bfi	w10, w28, #1, #31
   12cf8:	sub	w9, w12, w12, lsr #5
   12cfc:	mov	w28, w10
   12d00:	strh	w9, [x11]
   12d04:	lsr	w9, w22, #24
   12d08:	cbnz	w9, 12d28 <lzma_mode_is_supported@@XZ_5.0+0x3858>
   12d0c:	cmp	x27, x4
   12d10:	b.eq	14668 <lzma_mode_is_supported@@XZ_5.0+0x5198>  // b.none
   12d14:	ldrb	w9, [x7, x27]
   12d18:	lsl	w10, w22, #8
   12d1c:	add	x27, x27, #0x1
   12d20:	bfi	w9, w19, #8, #24
   12d24:	b	12d30 <lzma_mode_is_supported@@XZ_5.0+0x3860>
   12d28:	mov	w10, w22
   12d2c:	mov	w9, w19
   12d30:	ldur	x11, [x29, #-16]
   12d34:	add	x8, x11, w8, uxtw #4
   12d38:	add	x8, x8, w28, uxtw #1
   12d3c:	mov	w11, #0x6768                	// #26472
   12d40:	add	x8, x8, x11
   12d44:	ldrh	w12, [x8]
   12d48:	lsr	w11, w10, #11
   12d4c:	mul	w22, w11, w12
   12d50:	subs	w11, w9, w22
   12d54:	b.cs	12d70 <lzma_mode_is_supported@@XZ_5.0+0x38a0>  // b.hs, b.nlast
   12d58:	mov	w10, #0x800                 	// #2048
   12d5c:	sub	w10, w10, w12
   12d60:	add	w10, w12, w10, lsr #5
   12d64:	strh	w10, [x8]
   12d68:	lsl	w10, w28, #1
   12d6c:	b	12d88 <lzma_mode_is_supported@@XZ_5.0+0x38b8>
   12d70:	sub	w22, w10, w22
   12d74:	sub	w9, w12, w12, lsr #5
   12d78:	mov	w10, #0x1                   	// #1
   12d7c:	strh	w9, [x8]
   12d80:	bfi	w10, w28, #1, #31
   12d84:	mov	w9, w11
   12d88:	add	w3, w10, #0x2
   12d8c:	b	13484 <lzma_mode_is_supported@@XZ_5.0+0x3fb4>
   12d90:	sub	w22, w22, w10
   12d94:	mov	w10, #0x1                   	// #1
   12d98:	bfi	w10, w28, #1, #31
   12d9c:	sub	w9, w12, w12, lsr #5
   12da0:	mov	w28, w10
   12da4:	strh	w9, [x11]
   12da8:	lsr	w9, w22, #24
   12dac:	cbnz	w9, 12dcc <lzma_mode_is_supported@@XZ_5.0+0x38fc>
   12db0:	cmp	x27, x4
   12db4:	b.eq	14674 <lzma_mode_is_supported@@XZ_5.0+0x51a4>  // b.none
   12db8:	ldrb	w9, [x7, x27]
   12dbc:	lsl	w10, w22, #8
   12dc0:	add	x27, x27, #0x1
   12dc4:	bfi	w9, w19, #8, #24
   12dc8:	b	12dd4 <lzma_mode_is_supported@@XZ_5.0+0x3904>
   12dcc:	mov	w10, w22
   12dd0:	mov	w9, w19
   12dd4:	ldur	x11, [x29, #-16]
   12dd8:	mov	w12, #0x6b6c                	// #27500
   12ddc:	lsr	w13, w10, #11
   12de0:	add	x11, x11, w8, uxtw #4
   12de4:	add	x11, x11, w28, uxtw #1
   12de8:	add	x11, x11, x12
   12dec:	ldrh	w12, [x11]
   12df0:	mul	w22, w13, w12
   12df4:	subs	w19, w9, w22
   12df8:	b.cs	130ac <lzma_mode_is_supported@@XZ_5.0+0x3bdc>  // b.hs, b.nlast
   12dfc:	mov	w10, #0x800                 	// #2048
   12e00:	sub	w10, w10, w12
   12e04:	add	w10, w12, w10, lsr #5
   12e08:	lsl	w28, w28, #1
   12e0c:	strh	w10, [x11]
   12e10:	mov	w19, w9
   12e14:	b	130c4 <lzma_mode_is_supported@@XZ_5.0+0x3bf4>
   12e18:	sub	w22, w22, w9
   12e1c:	mov	w9, #0x1                   	// #1
   12e20:	bfi	w9, w28, #1, #31
   12e24:	sub	w8, w12, w12, lsr #5
   12e28:	mov	w28, w9
   12e2c:	strh	w8, [x10, x11, lsl #1]
   12e30:	lsr	w8, w22, #24
   12e34:	cbnz	w8, 12e54 <lzma_mode_is_supported@@XZ_5.0+0x3984>
   12e38:	cmp	x27, x4
   12e3c:	b.eq	14680 <lzma_mode_is_supported@@XZ_5.0+0x51b0>  // b.none
   12e40:	ldrb	w8, [x7, x27]
   12e44:	lsl	w22, w22, #8
   12e48:	add	x27, x27, #0x1
   12e4c:	bfi	w8, w19, #8, #24
   12e50:	b	12e58 <lzma_mode_is_supported@@XZ_5.0+0x3988>
   12e54:	mov	w8, w19
   12e58:	ldur	x10, [x29, #-16]
   12e5c:	mov	w9, #0x6c6c                	// #27756
   12e60:	mov	w11, w28
   12e64:	add	x10, x10, x9
   12e68:	ldrh	w12, [x10, w28, uxtw #1]
   12e6c:	lsr	w9, w22, #11
   12e70:	mul	w9, w9, w12
   12e74:	subs	w19, w8, w9
   12e78:	b.cs	12e9c <lzma_mode_is_supported@@XZ_5.0+0x39cc>  // b.hs, b.nlast
   12e7c:	mov	w13, #0x800                 	// #2048
   12e80:	sub	w13, w13, w12
   12e84:	add	w12, w12, w13, lsr #5
   12e88:	lsl	w28, w28, #1
   12e8c:	strh	w12, [x10, x11, lsl #1]
   12e90:	mov	w22, w9
   12e94:	mov	w19, w8
   12e98:	b	12eb4 <lzma_mode_is_supported@@XZ_5.0+0x39e4>
   12e9c:	sub	w22, w22, w9
   12ea0:	mov	w9, #0x1                   	// #1
   12ea4:	bfi	w9, w28, #1, #31
   12ea8:	sub	w8, w12, w12, lsr #5
   12eac:	mov	w28, w9
   12eb0:	strh	w8, [x10, x11, lsl #1]
   12eb4:	lsr	w8, w22, #24
   12eb8:	cbnz	w8, 12ed8 <lzma_mode_is_supported@@XZ_5.0+0x3a08>
   12ebc:	cmp	x27, x4
   12ec0:	b.eq	1468c <lzma_mode_is_supported@@XZ_5.0+0x51bc>  // b.none
   12ec4:	ldrb	w8, [x7, x27]
   12ec8:	lsl	w22, w22, #8
   12ecc:	add	x27, x27, #0x1
   12ed0:	bfi	w8, w19, #8, #24
   12ed4:	b	12edc <lzma_mode_is_supported@@XZ_5.0+0x3a0c>
   12ed8:	mov	w8, w19
   12edc:	ldur	x10, [x29, #-16]
   12ee0:	mov	w9, #0x6c6c                	// #27756
   12ee4:	mov	w11, w28
   12ee8:	add	x10, x10, x9
   12eec:	ldrh	w12, [x10, w28, uxtw #1]
   12ef0:	lsr	w9, w22, #11
   12ef4:	mul	w9, w9, w12
   12ef8:	subs	w19, w8, w9
   12efc:	b.cs	13154 <lzma_mode_is_supported@@XZ_5.0+0x3c84>  // b.hs, b.nlast
   12f00:	mov	w13, #0x800                 	// #2048
   12f04:	sub	w13, w13, w12
   12f08:	add	w12, w12, w13, lsr #5
   12f0c:	lsl	w28, w28, #1
   12f10:	strh	w12, [x10, x11, lsl #1]
   12f14:	mov	w22, w9
   12f18:	mov	w19, w8
   12f1c:	b	1316c <lzma_mode_is_supported@@XZ_5.0+0x3c9c>
   12f20:	sub	w22, w22, w9
   12f24:	mov	w9, #0x1                   	// #1
   12f28:	bfi	w9, w28, #1, #31
   12f2c:	sub	w8, w12, w12, lsr #5
   12f30:	mov	w28, w9
   12f34:	strh	w8, [x10, x11, lsl #1]
   12f38:	lsr	w8, w22, #24
   12f3c:	cbnz	w8, 12f5c <lzma_mode_is_supported@@XZ_5.0+0x3a8c>
   12f40:	cmp	x27, x4
   12f44:	b.eq	14698 <lzma_mode_is_supported@@XZ_5.0+0x51c8>  // b.none
   12f48:	ldrb	w8, [x7, x27]
   12f4c:	lsl	w22, w22, #8
   12f50:	add	x27, x27, #0x1
   12f54:	bfi	w8, w19, #8, #24
   12f58:	b	12f60 <lzma_mode_is_supported@@XZ_5.0+0x3a90>
   12f5c:	mov	w8, w19
   12f60:	ldur	x10, [x29, #-16]
   12f64:	mov	w9, #0x6868                	// #26728
   12f68:	mov	w11, w28
   12f6c:	add	x10, x10, x9
   12f70:	ldrh	w12, [x10, w28, uxtw #1]
   12f74:	lsr	w9, w22, #11
   12f78:	mul	w9, w9, w12
   12f7c:	subs	w19, w8, w9
   12f80:	b.cs	12fa4 <lzma_mode_is_supported@@XZ_5.0+0x3ad4>  // b.hs, b.nlast
   12f84:	mov	w13, #0x800                 	// #2048
   12f88:	sub	w13, w13, w12
   12f8c:	add	w12, w12, w13, lsr #5
   12f90:	lsl	w28, w28, #1
   12f94:	strh	w12, [x10, x11, lsl #1]
   12f98:	mov	w22, w9
   12f9c:	mov	w19, w8
   12fa0:	b	12fbc <lzma_mode_is_supported@@XZ_5.0+0x3aec>
   12fa4:	sub	w22, w22, w9
   12fa8:	mov	w9, #0x1                   	// #1
   12fac:	bfi	w9, w28, #1, #31
   12fb0:	sub	w8, w12, w12, lsr #5
   12fb4:	mov	w28, w9
   12fb8:	strh	w8, [x10, x11, lsl #1]
   12fbc:	lsr	w8, w22, #24
   12fc0:	cbnz	w8, 12fe0 <lzma_mode_is_supported@@XZ_5.0+0x3b10>
   12fc4:	cmp	x27, x4
   12fc8:	b.eq	146a4 <lzma_mode_is_supported@@XZ_5.0+0x51d4>  // b.none
   12fcc:	ldrb	w8, [x7, x27]
   12fd0:	lsl	w22, w22, #8
   12fd4:	add	x27, x27, #0x1
   12fd8:	bfi	w8, w19, #8, #24
   12fdc:	b	12fe4 <lzma_mode_is_supported@@XZ_5.0+0x3b14>
   12fe0:	mov	w8, w19
   12fe4:	ldur	x10, [x29, #-16]
   12fe8:	mov	w9, #0x6868                	// #26728
   12fec:	mov	w11, w28
   12ff0:	add	x10, x10, x9
   12ff4:	ldrh	w12, [x10, w28, uxtw #1]
   12ff8:	lsr	w9, w22, #11
   12ffc:	mul	w9, w9, w12
   13000:	subs	w19, w8, w9
   13004:	b.cs	13028 <lzma_mode_is_supported@@XZ_5.0+0x3b58>  // b.hs, b.nlast
   13008:	mov	w13, #0x800                 	// #2048
   1300c:	sub	w13, w13, w12
   13010:	add	w12, w12, w13, lsr #5
   13014:	lsl	w28, w28, #1
   13018:	strh	w12, [x10, x11, lsl #1]
   1301c:	mov	w22, w9
   13020:	mov	w19, w8
   13024:	b	13040 <lzma_mode_is_supported@@XZ_5.0+0x3b70>
   13028:	sub	w22, w22, w9
   1302c:	mov	w9, #0x1                   	// #1
   13030:	bfi	w9, w28, #1, #31
   13034:	sub	w8, w12, w12, lsr #5
   13038:	mov	w28, w9
   1303c:	strh	w8, [x10, x11, lsl #1]
   13040:	lsr	w8, w22, #24
   13044:	cbnz	w8, 13064 <lzma_mode_is_supported@@XZ_5.0+0x3b94>
   13048:	cmp	x27, x4
   1304c:	b.eq	146b0 <lzma_mode_is_supported@@XZ_5.0+0x51e0>  // b.none
   13050:	ldrb	w8, [x7, x27]
   13054:	lsl	w22, w22, #8
   13058:	add	x27, x27, #0x1
   1305c:	bfi	w8, w19, #8, #24
   13060:	b	13068 <lzma_mode_is_supported@@XZ_5.0+0x3b98>
   13064:	mov	w8, w19
   13068:	ldur	x10, [x29, #-16]
   1306c:	mov	w9, #0x6868                	// #26728
   13070:	mov	w11, w28
   13074:	add	x10, x10, x9
   13078:	ldrh	w12, [x10, w28, uxtw #1]
   1307c:	lsr	w9, w22, #11
   13080:	mul	w9, w9, w12
   13084:	subs	w19, w8, w9
   13088:	b.cs	1325c <lzma_mode_is_supported@@XZ_5.0+0x3d8c>  // b.hs, b.nlast
   1308c:	mov	w13, #0x800                 	// #2048
   13090:	sub	w13, w13, w12
   13094:	add	w12, w12, w13, lsr #5
   13098:	lsl	w28, w28, #1
   1309c:	strh	w12, [x10, x11, lsl #1]
   130a0:	mov	w22, w9
   130a4:	mov	w19, w8
   130a8:	b	13274 <lzma_mode_is_supported@@XZ_5.0+0x3da4>
   130ac:	sub	w22, w10, w22
   130b0:	mov	w10, #0x1                   	// #1
   130b4:	bfi	w10, w28, #1, #31
   130b8:	sub	w9, w12, w12, lsr #5
   130bc:	mov	w28, w10
   130c0:	strh	w9, [x11]
   130c4:	lsr	w9, w22, #24
   130c8:	cbnz	w9, 130e8 <lzma_mode_is_supported@@XZ_5.0+0x3c18>
   130cc:	cmp	x27, x4
   130d0:	b.eq	146bc <lzma_mode_is_supported@@XZ_5.0+0x51ec>  // b.none
   130d4:	ldrb	w9, [x7, x27]
   130d8:	lsl	w10, w22, #8
   130dc:	add	x27, x27, #0x1
   130e0:	bfi	w9, w19, #8, #24
   130e4:	b	130f0 <lzma_mode_is_supported@@XZ_5.0+0x3c20>
   130e8:	mov	w10, w22
   130ec:	mov	w9, w19
   130f0:	ldur	x11, [x29, #-16]
   130f4:	lsr	w12, w10, #11
   130f8:	add	x8, x11, w8, uxtw #4
   130fc:	add	x8, x8, w28, uxtw #1
   13100:	mov	w11, #0x6b6c                	// #27500
   13104:	add	x11, x8, x11
   13108:	ldrh	w8, [x11]
   1310c:	mul	w22, w12, w8
   13110:	subs	w12, w9, w22
   13114:	b.cs	13130 <lzma_mode_is_supported@@XZ_5.0+0x3c60>  // b.hs, b.nlast
   13118:	mov	w10, #0x800                 	// #2048
   1311c:	sub	w10, w10, w8
   13120:	add	w8, w8, w10, lsr #5
   13124:	strh	w8, [x11]
   13128:	lsl	w8, w28, #1
   1312c:	b	13148 <lzma_mode_is_supported@@XZ_5.0+0x3c78>
   13130:	sub	w9, w8, w8, lsr #5
   13134:	mov	w8, #0x1                   	// #1
   13138:	sub	w22, w10, w22
   1313c:	strh	w9, [x11]
   13140:	bfi	w8, w28, #1, #31
   13144:	mov	w9, w12
   13148:	add	w3, w8, #0x2
   1314c:	mov	w28, w8
   13150:	b	142e8 <lzma_mode_is_supported@@XZ_5.0+0x4e18>
   13154:	sub	w22, w22, w9
   13158:	mov	w9, #0x1                   	// #1
   1315c:	bfi	w9, w28, #1, #31
   13160:	sub	w8, w12, w12, lsr #5
   13164:	mov	w28, w9
   13168:	strh	w8, [x10, x11, lsl #1]
   1316c:	lsr	w8, w22, #24
   13170:	cbnz	w8, 13190 <lzma_mode_is_supported@@XZ_5.0+0x3cc0>
   13174:	cmp	x27, x4
   13178:	b.eq	146c8 <lzma_mode_is_supported@@XZ_5.0+0x51f8>  // b.none
   1317c:	ldrb	w8, [x7, x27]
   13180:	lsl	w22, w22, #8
   13184:	add	x27, x27, #0x1
   13188:	bfi	w8, w19, #8, #24
   1318c:	b	13194 <lzma_mode_is_supported@@XZ_5.0+0x3cc4>
   13190:	mov	w8, w19
   13194:	ldur	x10, [x29, #-16]
   13198:	mov	w9, #0x6c6c                	// #27756
   1319c:	mov	w11, w28
   131a0:	add	x10, x10, x9
   131a4:	ldrh	w12, [x10, w28, uxtw #1]
   131a8:	lsr	w9, w22, #11
   131ac:	mul	w9, w9, w12
   131b0:	subs	w19, w8, w9
   131b4:	b.cs	131d8 <lzma_mode_is_supported@@XZ_5.0+0x3d08>  // b.hs, b.nlast
   131b8:	mov	w13, #0x800                 	// #2048
   131bc:	sub	w13, w13, w12
   131c0:	add	w12, w12, w13, lsr #5
   131c4:	lsl	w28, w28, #1
   131c8:	strh	w12, [x10, x11, lsl #1]
   131cc:	mov	w22, w9
   131d0:	mov	w19, w8
   131d4:	b	131f0 <lzma_mode_is_supported@@XZ_5.0+0x3d20>
   131d8:	sub	w22, w22, w9
   131dc:	mov	w9, #0x1                   	// #1
   131e0:	bfi	w9, w28, #1, #31
   131e4:	sub	w8, w12, w12, lsr #5
   131e8:	mov	w28, w9
   131ec:	strh	w8, [x10, x11, lsl #1]
   131f0:	lsr	w8, w22, #24
   131f4:	cbnz	w8, 13214 <lzma_mode_is_supported@@XZ_5.0+0x3d44>
   131f8:	cmp	x27, x4
   131fc:	b.eq	146d4 <lzma_mode_is_supported@@XZ_5.0+0x5204>  // b.none
   13200:	ldrb	w8, [x7, x27]
   13204:	lsl	w22, w22, #8
   13208:	add	x27, x27, #0x1
   1320c:	bfi	w8, w19, #8, #24
   13210:	b	13218 <lzma_mode_is_supported@@XZ_5.0+0x3d48>
   13214:	mov	w8, w19
   13218:	ldur	x10, [x29, #-16]
   1321c:	mov	w9, #0x6c6c                	// #27756
   13220:	mov	w11, w28
   13224:	add	x10, x10, x9
   13228:	ldrh	w12, [x10, w28, uxtw #1]
   1322c:	lsr	w9, w22, #11
   13230:	mul	w9, w9, w12
   13234:	subs	w19, w8, w9
   13238:	b.cs	132e0 <lzma_mode_is_supported@@XZ_5.0+0x3e10>  // b.hs, b.nlast
   1323c:	mov	w13, #0x800                 	// #2048
   13240:	sub	w13, w13, w12
   13244:	add	w12, w12, w13, lsr #5
   13248:	lsl	w28, w28, #1
   1324c:	strh	w12, [x10, x11, lsl #1]
   13250:	mov	w22, w9
   13254:	mov	w19, w8
   13258:	b	132f8 <lzma_mode_is_supported@@XZ_5.0+0x3e28>
   1325c:	sub	w22, w22, w9
   13260:	mov	w9, #0x1                   	// #1
   13264:	bfi	w9, w28, #1, #31
   13268:	sub	w8, w12, w12, lsr #5
   1326c:	mov	w28, w9
   13270:	strh	w8, [x10, x11, lsl #1]
   13274:	lsr	w8, w22, #24
   13278:	cbnz	w8, 13298 <lzma_mode_is_supported@@XZ_5.0+0x3dc8>
   1327c:	cmp	x27, x4
   13280:	b.eq	146e0 <lzma_mode_is_supported@@XZ_5.0+0x5210>  // b.none
   13284:	ldrb	w8, [x7, x27]
   13288:	lsl	w22, w22, #8
   1328c:	add	x27, x27, #0x1
   13290:	bfi	w8, w19, #8, #24
   13294:	b	1329c <lzma_mode_is_supported@@XZ_5.0+0x3dcc>
   13298:	mov	w8, w19
   1329c:	ldur	x10, [x29, #-16]
   132a0:	mov	w9, #0x6868                	// #26728
   132a4:	mov	w11, w28
   132a8:	add	x10, x10, x9
   132ac:	ldrh	w12, [x10, w28, uxtw #1]
   132b0:	lsr	w9, w22, #11
   132b4:	mul	w9, w9, w12
   132b8:	subs	w19, w8, w9
   132bc:	b.cs	13364 <lzma_mode_is_supported@@XZ_5.0+0x3e94>  // b.hs, b.nlast
   132c0:	mov	w13, #0x800                 	// #2048
   132c4:	sub	w13, w13, w12
   132c8:	add	w12, w12, w13, lsr #5
   132cc:	lsl	w28, w28, #1
   132d0:	strh	w12, [x10, x11, lsl #1]
   132d4:	mov	w22, w9
   132d8:	mov	w19, w8
   132dc:	b	1337c <lzma_mode_is_supported@@XZ_5.0+0x3eac>
   132e0:	sub	w22, w22, w9
   132e4:	mov	w9, #0x1                   	// #1
   132e8:	bfi	w9, w28, #1, #31
   132ec:	sub	w8, w12, w12, lsr #5
   132f0:	mov	w28, w9
   132f4:	strh	w8, [x10, x11, lsl #1]
   132f8:	lsr	w8, w22, #24
   132fc:	cbnz	w8, 1331c <lzma_mode_is_supported@@XZ_5.0+0x3e4c>
   13300:	cmp	x27, x4
   13304:	b.eq	146ec <lzma_mode_is_supported@@XZ_5.0+0x521c>  // b.none
   13308:	ldrb	w8, [x7, x27]
   1330c:	lsl	w22, w22, #8
   13310:	add	x27, x27, #0x1
   13314:	bfi	w8, w19, #8, #24
   13318:	b	13320 <lzma_mode_is_supported@@XZ_5.0+0x3e50>
   1331c:	mov	w8, w19
   13320:	ldur	x10, [x29, #-16]
   13324:	mov	w9, #0x6c6c                	// #27756
   13328:	mov	w11, w28
   1332c:	add	x10, x10, x9
   13330:	ldrh	w12, [x10, w28, uxtw #1]
   13334:	lsr	w9, w22, #11
   13338:	mul	w9, w9, w12
   1333c:	subs	w19, w8, w9
   13340:	b.cs	1350c <lzma_mode_is_supported@@XZ_5.0+0x403c>  // b.hs, b.nlast
   13344:	mov	w13, #0x800                 	// #2048
   13348:	sub	w13, w13, w12
   1334c:	add	w12, w12, w13, lsr #5
   13350:	lsl	w28, w28, #1
   13354:	strh	w12, [x10, x11, lsl #1]
   13358:	mov	w22, w9
   1335c:	mov	w19, w8
   13360:	b	13524 <lzma_mode_is_supported@@XZ_5.0+0x4054>
   13364:	sub	w22, w22, w9
   13368:	mov	w9, #0x1                   	// #1
   1336c:	bfi	w9, w28, #1, #31
   13370:	sub	w8, w12, w12, lsr #5
   13374:	mov	w28, w9
   13378:	strh	w8, [x10, x11, lsl #1]
   1337c:	lsr	w8, w22, #24
   13380:	cbnz	w8, 133a0 <lzma_mode_is_supported@@XZ_5.0+0x3ed0>
   13384:	cmp	x27, x4
   13388:	b.eq	146f8 <lzma_mode_is_supported@@XZ_5.0+0x5228>  // b.none
   1338c:	ldrb	w8, [x7, x27]
   13390:	lsl	w22, w22, #8
   13394:	add	x27, x27, #0x1
   13398:	bfi	w8, w19, #8, #24
   1339c:	b	133a4 <lzma_mode_is_supported@@XZ_5.0+0x3ed4>
   133a0:	mov	w8, w19
   133a4:	ldur	x10, [x29, #-16]
   133a8:	mov	w9, #0x6868                	// #26728
   133ac:	mov	w11, w28
   133b0:	add	x10, x10, x9
   133b4:	ldrh	w12, [x10, w28, uxtw #1]
   133b8:	lsr	w9, w22, #11
   133bc:	mul	w9, w9, w12
   133c0:	subs	w19, w8, w9
   133c4:	b.cs	133e8 <lzma_mode_is_supported@@XZ_5.0+0x3f18>  // b.hs, b.nlast
   133c8:	mov	w13, #0x800                 	// #2048
   133cc:	sub	w13, w13, w12
   133d0:	add	w12, w12, w13, lsr #5
   133d4:	lsl	w28, w28, #1
   133d8:	strh	w12, [x10, x11, lsl #1]
   133dc:	mov	w22, w9
   133e0:	mov	w19, w8
   133e4:	b	13400 <lzma_mode_is_supported@@XZ_5.0+0x3f30>
   133e8:	sub	w22, w22, w9
   133ec:	mov	w9, #0x1                   	// #1
   133f0:	bfi	w9, w28, #1, #31
   133f4:	sub	w8, w12, w12, lsr #5
   133f8:	mov	w28, w9
   133fc:	strh	w8, [x10, x11, lsl #1]
   13400:	lsr	w8, w22, #24
   13404:	cbnz	w8, 13424 <lzma_mode_is_supported@@XZ_5.0+0x3f54>
   13408:	cmp	x27, x4
   1340c:	b.eq	14704 <lzma_mode_is_supported@@XZ_5.0+0x5234>  // b.none
   13410:	ldrb	w9, [x7, x27]
   13414:	lsl	w8, w22, #8
   13418:	add	x27, x27, #0x1
   1341c:	bfi	w9, w19, #8, #24
   13420:	b	1342c <lzma_mode_is_supported@@XZ_5.0+0x3f5c>
   13424:	mov	w8, w22
   13428:	mov	w9, w19
   1342c:	ldur	x11, [x29, #-16]
   13430:	mov	w10, #0x6868                	// #26728
   13434:	mov	w12, w28
   13438:	add	x10, x11, x10
   1343c:	ldrh	w13, [x10, w28, uxtw #1]
   13440:	lsr	w11, w8, #11
   13444:	mul	w22, w11, w13
   13448:	subs	w11, w9, w22
   1344c:	b.cs	13468 <lzma_mode_is_supported@@XZ_5.0+0x3f98>  // b.hs, b.nlast
   13450:	mov	w8, #0x800                 	// #2048
   13454:	sub	w8, w8, w13
   13458:	add	w8, w13, w8, lsr #5
   1345c:	strh	w8, [x10, x12, lsl #1]
   13460:	lsl	w8, w28, #1
   13464:	b	13480 <lzma_mode_is_supported@@XZ_5.0+0x3fb0>
   13468:	sub	w22, w8, w22
   1346c:	sub	w9, w13, w13, lsr #5
   13470:	mov	w8, #0x1                   	// #1
   13474:	strh	w9, [x10, x12, lsl #1]
   13478:	bfi	w8, w28, #1, #31
   1347c:	mov	w9, w11
   13480:	sub	w3, w8, #0xee
   13484:	sub	w8, w3, #0x2
   13488:	cmp	w3, #0x6
   1348c:	mov	w10, #0x3                   	// #3
   13490:	csel	w8, w8, w10, cc  // cc = lo, ul, last
   13494:	ldur	x10, [x29, #-16]
   13498:	mov	w11, #0x6360                	// #25440
   1349c:	mov	w28, #0x1                   	// #1
   134a0:	mov	w19, w9
   134a4:	add	x8, x10, x8, lsl #7
   134a8:	add	x2, x8, x11
   134ac:	lsr	w8, w22, #24
   134b0:	cbnz	w8, 134d0 <lzma_mode_is_supported@@XZ_5.0+0x4000>
   134b4:	cmp	x27, x4
   134b8:	b.eq	14710 <lzma_mode_is_supported@@XZ_5.0+0x5240>  // b.none
   134bc:	ldrb	w8, [x7, x27]
   134c0:	lsl	w9, w22, #8
   134c4:	add	x27, x27, #0x1
   134c8:	bfi	w8, w19, #8, #24
   134cc:	b	134d8 <lzma_mode_is_supported@@XZ_5.0+0x4008>
   134d0:	mov	w9, w22
   134d4:	mov	w8, w19
   134d8:	ldrh	w11, [x2, w28, uxtw #1]
   134dc:	lsr	w10, w9, #11
   134e0:	mul	w22, w10, w11
   134e4:	subs	w19, w8, w22
   134e8:	mov	w10, w28
   134ec:	b.cs	135b4 <lzma_mode_is_supported@@XZ_5.0+0x40e4>  // b.hs, b.nlast
   134f0:	mov	w9, #0x800                 	// #2048
   134f4:	sub	w9, w9, w11
   134f8:	add	w9, w11, w9, lsr #5
   134fc:	lsl	w28, w28, #1
   13500:	strh	w9, [x2, x10, lsl #1]
   13504:	mov	w19, w8
   13508:	b	135cc <lzma_mode_is_supported@@XZ_5.0+0x40fc>
   1350c:	sub	w22, w22, w9
   13510:	mov	w9, #0x1                   	// #1
   13514:	bfi	w9, w28, #1, #31
   13518:	sub	w8, w12, w12, lsr #5
   1351c:	mov	w28, w9
   13520:	strh	w8, [x10, x11, lsl #1]
   13524:	lsr	w8, w22, #24
   13528:	cbnz	w8, 13548 <lzma_mode_is_supported@@XZ_5.0+0x4078>
   1352c:	cmp	x27, x4
   13530:	b.eq	1471c <lzma_mode_is_supported@@XZ_5.0+0x524c>  // b.none
   13534:	ldrb	w8, [x7, x27]
   13538:	lsl	w9, w22, #8
   1353c:	add	x27, x27, #0x1
   13540:	bfi	w8, w19, #8, #24
   13544:	b	13550 <lzma_mode_is_supported@@XZ_5.0+0x4080>
   13548:	mov	w9, w22
   1354c:	mov	w8, w19
   13550:	ldur	x11, [x29, #-16]
   13554:	mov	w10, #0x6c6c                	// #27756
   13558:	mov	w12, w28
   1355c:	add	x10, x11, x10
   13560:	ldrh	w13, [x10, w28, uxtw #1]
   13564:	lsr	w11, w9, #11
   13568:	mul	w22, w11, w13
   1356c:	subs	w11, w8, w22
   13570:	b.cs	1358c <lzma_mode_is_supported@@XZ_5.0+0x40bc>  // b.hs, b.nlast
   13574:	mov	w9, #0x800                 	// #2048
   13578:	sub	w9, w9, w13
   1357c:	add	w9, w13, w9, lsr #5
   13580:	strh	w9, [x10, x12, lsl #1]
   13584:	lsl	w9, w28, #1
   13588:	b	135a4 <lzma_mode_is_supported@@XZ_5.0+0x40d4>
   1358c:	sub	w22, w9, w22
   13590:	sub	w8, w13, w13, lsr #5
   13594:	mov	w9, #0x1                   	// #1
   13598:	strh	w8, [x10, x12, lsl #1]
   1359c:	bfi	w9, w28, #1, #31
   135a0:	mov	w8, w11
   135a4:	sub	w3, w9, #0xee
   135a8:	mov	w28, w9
   135ac:	mov	w19, w8
   135b0:	b	142ec <lzma_mode_is_supported@@XZ_5.0+0x4e1c>
   135b4:	sub	w22, w9, w22
   135b8:	mov	w9, #0x1                   	// #1
   135bc:	bfi	w9, w28, #1, #31
   135c0:	sub	w8, w11, w11, lsr #5
   135c4:	mov	w28, w9
   135c8:	strh	w8, [x2, x10, lsl #1]
   135cc:	lsr	w8, w22, #24
   135d0:	cbnz	w8, 135f0 <lzma_mode_is_supported@@XZ_5.0+0x4120>
   135d4:	cmp	x27, x4
   135d8:	b.eq	14728 <lzma_mode_is_supported@@XZ_5.0+0x5258>  // b.none
   135dc:	ldrb	w8, [x7, x27]
   135e0:	lsl	w9, w22, #8
   135e4:	add	x27, x27, #0x1
   135e8:	bfi	w8, w19, #8, #24
   135ec:	b	135f8 <lzma_mode_is_supported@@XZ_5.0+0x4128>
   135f0:	mov	w9, w22
   135f4:	mov	w8, w19
   135f8:	ldrh	w11, [x2, w28, uxtw #1]
   135fc:	lsr	w10, w9, #11
   13600:	mul	w22, w10, w11
   13604:	subs	w19, w8, w22
   13608:	mov	w10, w28
   1360c:	b.cs	1362c <lzma_mode_is_supported@@XZ_5.0+0x415c>  // b.hs, b.nlast
   13610:	mov	w9, #0x800                 	// #2048
   13614:	sub	w9, w9, w11
   13618:	add	w9, w11, w9, lsr #5
   1361c:	lsl	w28, w28, #1
   13620:	strh	w9, [x2, x10, lsl #1]
   13624:	mov	w19, w8
   13628:	b	13644 <lzma_mode_is_supported@@XZ_5.0+0x4174>
   1362c:	sub	w22, w9, w22
   13630:	mov	w9, #0x1                   	// #1
   13634:	bfi	w9, w28, #1, #31
   13638:	sub	w8, w11, w11, lsr #5
   1363c:	mov	w28, w9
   13640:	strh	w8, [x2, x10, lsl #1]
   13644:	lsr	w8, w22, #24
   13648:	cbnz	w8, 13668 <lzma_mode_is_supported@@XZ_5.0+0x4198>
   1364c:	cmp	x27, x4
   13650:	b.eq	14734 <lzma_mode_is_supported@@XZ_5.0+0x5264>  // b.none
   13654:	ldrb	w8, [x7, x27]
   13658:	lsl	w9, w22, #8
   1365c:	add	x27, x27, #0x1
   13660:	bfi	w8, w19, #8, #24
   13664:	b	13670 <lzma_mode_is_supported@@XZ_5.0+0x41a0>
   13668:	mov	w9, w22
   1366c:	mov	w8, w19
   13670:	ldrh	w11, [x2, w28, uxtw #1]
   13674:	lsr	w10, w9, #11
   13678:	mul	w22, w10, w11
   1367c:	subs	w19, w8, w22
   13680:	mov	w10, w28
   13684:	b.cs	136a4 <lzma_mode_is_supported@@XZ_5.0+0x41d4>  // b.hs, b.nlast
   13688:	mov	w9, #0x800                 	// #2048
   1368c:	sub	w9, w9, w11
   13690:	add	w9, w11, w9, lsr #5
   13694:	lsl	w28, w28, #1
   13698:	strh	w9, [x2, x10, lsl #1]
   1369c:	mov	w19, w8
   136a0:	b	136bc <lzma_mode_is_supported@@XZ_5.0+0x41ec>
   136a4:	sub	w22, w9, w22
   136a8:	mov	w9, #0x1                   	// #1
   136ac:	bfi	w9, w28, #1, #31
   136b0:	sub	w8, w11, w11, lsr #5
   136b4:	mov	w28, w9
   136b8:	strh	w8, [x2, x10, lsl #1]
   136bc:	lsr	w8, w22, #24
   136c0:	cbnz	w8, 136e0 <lzma_mode_is_supported@@XZ_5.0+0x4210>
   136c4:	cmp	x27, x4
   136c8:	b.eq	14740 <lzma_mode_is_supported@@XZ_5.0+0x5270>  // b.none
   136cc:	ldrb	w8, [x7, x27]
   136d0:	lsl	w9, w22, #8
   136d4:	add	x27, x27, #0x1
   136d8:	bfi	w8, w19, #8, #24
   136dc:	b	136e8 <lzma_mode_is_supported@@XZ_5.0+0x4218>
   136e0:	mov	w9, w22
   136e4:	mov	w8, w19
   136e8:	ldrh	w11, [x2, w28, uxtw #1]
   136ec:	lsr	w10, w9, #11
   136f0:	mul	w22, w10, w11
   136f4:	subs	w19, w8, w22
   136f8:	mov	w10, w28
   136fc:	b.cs	1371c <lzma_mode_is_supported@@XZ_5.0+0x424c>  // b.hs, b.nlast
   13700:	mov	w9, #0x800                 	// #2048
   13704:	sub	w9, w9, w11
   13708:	add	w9, w11, w9, lsr #5
   1370c:	lsl	w28, w28, #1
   13710:	strh	w9, [x2, x10, lsl #1]
   13714:	mov	w19, w8
   13718:	b	13734 <lzma_mode_is_supported@@XZ_5.0+0x4264>
   1371c:	sub	w22, w9, w22
   13720:	mov	w9, #0x1                   	// #1
   13724:	bfi	w9, w28, #1, #31
   13728:	sub	w8, w11, w11, lsr #5
   1372c:	mov	w28, w9
   13730:	strh	w8, [x2, x10, lsl #1]
   13734:	lsr	w8, w22, #24
   13738:	cbnz	w8, 13758 <lzma_mode_is_supported@@XZ_5.0+0x4288>
   1373c:	cmp	x27, x4
   13740:	b.eq	1474c <lzma_mode_is_supported@@XZ_5.0+0x527c>  // b.none
   13744:	ldrb	w8, [x7, x27]
   13748:	lsl	w9, w22, #8
   1374c:	add	x27, x27, #0x1
   13750:	bfi	w8, w19, #8, #24
   13754:	b	13760 <lzma_mode_is_supported@@XZ_5.0+0x4290>
   13758:	mov	w9, w22
   1375c:	mov	w8, w19
   13760:	ldrh	w11, [x2, w28, uxtw #1]
   13764:	lsr	w10, w9, #11
   13768:	mul	w22, w10, w11
   1376c:	subs	w19, w8, w22
   13770:	mov	w10, w28
   13774:	b.cs	13794 <lzma_mode_is_supported@@XZ_5.0+0x42c4>  // b.hs, b.nlast
   13778:	mov	w9, #0x800                 	// #2048
   1377c:	sub	w9, w9, w11
   13780:	add	w9, w11, w9, lsr #5
   13784:	lsl	w28, w28, #1
   13788:	strh	w9, [x2, x10, lsl #1]
   1378c:	mov	w19, w8
   13790:	b	137ac <lzma_mode_is_supported@@XZ_5.0+0x42dc>
   13794:	sub	w22, w9, w22
   13798:	mov	w9, #0x1                   	// #1
   1379c:	bfi	w9, w28, #1, #31
   137a0:	sub	w8, w11, w11, lsr #5
   137a4:	mov	w28, w9
   137a8:	strh	w8, [x2, x10, lsl #1]
   137ac:	lsr	w8, w22, #24
   137b0:	cbnz	w8, 137d0 <lzma_mode_is_supported@@XZ_5.0+0x4300>
   137b4:	cmp	x27, x4
   137b8:	b.eq	14758 <lzma_mode_is_supported@@XZ_5.0+0x5288>  // b.none
   137bc:	ldrb	w9, [x7, x27]
   137c0:	lsl	w8, w22, #8
   137c4:	add	x27, x27, #0x1
   137c8:	bfi	w9, w19, #8, #24
   137cc:	b	137d8 <lzma_mode_is_supported@@XZ_5.0+0x4308>
   137d0:	mov	w8, w22
   137d4:	mov	w9, w19
   137d8:	ldrh	w12, [x2, w28, uxtw #1]
   137dc:	lsr	w10, w8, #11
   137e0:	mov	w11, w28
   137e4:	mul	w22, w10, w12
   137e8:	subs	w10, w9, w22
   137ec:	b.cs	13808 <lzma_mode_is_supported@@XZ_5.0+0x4338>  // b.hs, b.nlast
   137f0:	mov	w8, #0x800                 	// #2048
   137f4:	sub	w8, w8, w12
   137f8:	add	w8, w12, w8, lsr #5
   137fc:	strh	w8, [x2, x11, lsl #1]
   13800:	lsl	w8, w28, #1
   13804:	b	13820 <lzma_mode_is_supported@@XZ_5.0+0x4350>
   13808:	sub	w22, w8, w22
   1380c:	sub	w9, w12, w12, lsr #5
   13810:	mov	w8, #0x1                   	// #1
   13814:	strh	w9, [x2, x11, lsl #1]
   13818:	bfi	w8, w28, #1, #31
   1381c:	mov	w9, w10
   13820:	sub	w8, w8, #0x40
   13824:	cmp	w8, #0x4
   13828:	b.cs	13834 <lzma_mode_is_supported@@XZ_5.0+0x4364>  // b.hs, b.nlast
   1382c:	mov	w28, w8
   13830:	b	142dc <lzma_mode_is_supported@@XZ_5.0+0x4e0c>
   13834:	mov	w10, #0x2                   	// #2
   13838:	lsr	w11, w8, #1
   1383c:	cmp	w8, #0xd
   13840:	bfxil	w10, w8, #0, #1
   13844:	b.hi	138bc <lzma_mode_is_supported@@XZ_5.0+0x43ec>  // b.pmore
   13848:	ldur	x12, [x29, #-16]
   1384c:	sub	w6, w11, #0x1
   13850:	lsl	w10, w10, w6
   13854:	mov	w11, #0x655e                	// #25950
   13858:	add	x12, x12, w10, uxtw #1
   1385c:	sub	x8, x12, w8, uxtw #1
   13860:	mov	w17, wzr
   13864:	mov	w5, w10
   13868:	add	x2, x8, x11
   1386c:	mov	w28, #0x1                   	// #1
   13870:	mov	w19, w9
   13874:	sub	w8, w6, #0x1
   13878:	cmp	w8, #0x4
   1387c:	b.hi	1405c <lzma_mode_is_supported@@XZ_5.0+0x4b8c>  // b.pmore
   13880:	adrp	x9, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   13884:	add	x9, x9, #0xcbe
   13888:	adr	x10, 13898 <lzma_mode_is_supported@@XZ_5.0+0x43c8>
   1388c:	ldrh	w11, [x9, x8, lsl #1]
   13890:	add	x10, x10, x11, lsl #2
   13894:	br	x10
   13898:	lsr	w8, w22, #24
   1389c:	cbnz	w8, 14068 <lzma_mode_is_supported@@XZ_5.0+0x4b98>
   138a0:	cmp	x27, x4
   138a4:	b.eq	1494c <lzma_mode_is_supported@@XZ_5.0+0x547c>  // b.none
   138a8:	ldrb	w8, [x7, x27]
   138ac:	lsl	w9, w22, #8
   138b0:	add	x27, x27, #0x1
   138b4:	bfi	w8, w19, #8, #24
   138b8:	b	14070 <lzma_mode_is_supported@@XZ_5.0+0x4ba0>
   138bc:	sub	w6, w11, #0x5
   138c0:	mov	w5, w10
   138c4:	mov	w28, w8
   138c8:	mov	w19, w9
   138cc:	mov	w9, w19
   138d0:	mov	w8, w5
   138d4:	lsr	w10, w22, #24
   138d8:	cbnz	w10, 138f8 <lzma_mode_is_supported@@XZ_5.0+0x4428>
   138dc:	cmp	x27, x4
   138e0:	b.eq	14494 <lzma_mode_is_supported@@XZ_5.0+0x4fc4>  // b.none
   138e4:	ldrb	w10, [x7, x27]
   138e8:	add	x27, x27, #0x1
   138ec:	lsl	w22, w22, #8
   138f0:	bfi	w10, w9, #8, #24
   138f4:	mov	w9, w10
   138f8:	sub	w10, w9, w22, lsr #1
   138fc:	mov	w11, #0x1                   	// #1
   13900:	asr	w9, w10, #31
   13904:	bfi	w11, w8, #1, #31
   13908:	and	w8, w9, w22, lsr #1
   1390c:	subs	w6, w6, #0x1
   13910:	lsr	w22, w22, #1
   13914:	add	w9, w8, w10
   13918:	add	w8, w11, w10, asr #31
   1391c:	b.ne	138d4 <lzma_mode_is_supported@@XZ_5.0+0x4404>  // b.any
   13920:	lsl	w5, w8, #4
   13924:	mov	w28, #0x1                   	// #1
   13928:	mov	w19, w9
   1392c:	lsr	w8, w22, #24
   13930:	cbnz	w8, 13950 <lzma_mode_is_supported@@XZ_5.0+0x4480>
   13934:	cmp	x27, x4
   13938:	b.eq	14764 <lzma_mode_is_supported@@XZ_5.0+0x5294>  // b.none
   1393c:	ldrb	w8, [x7, x27]
   13940:	lsl	w22, w22, #8
   13944:	add	x27, x27, #0x1
   13948:	bfi	w8, w19, #8, #24
   1394c:	b	13954 <lzma_mode_is_supported@@XZ_5.0+0x4484>
   13950:	mov	w8, w19
   13954:	ldur	x10, [x29, #-16]
   13958:	mov	w9, #0x6644                	// #26180
   1395c:	mov	w11, w28
   13960:	add	x9, x10, x9
   13964:	ldrh	w12, [x9, w28, uxtw #1]
   13968:	lsr	w10, w22, #11
   1396c:	mul	w10, w10, w12
   13970:	subs	w19, w8, w10
   13974:	b.cs	13998 <lzma_mode_is_supported@@XZ_5.0+0x44c8>  // b.hs, b.nlast
   13978:	mov	w13, #0x800                 	// #2048
   1397c:	sub	w13, w13, w12
   13980:	add	w12, w12, w13, lsr #5
   13984:	lsl	w28, w28, #1
   13988:	strh	w12, [x9, x11, lsl #1]
   1398c:	mov	w22, w10
   13990:	mov	w19, w8
   13994:	b	139b4 <lzma_mode_is_supported@@XZ_5.0+0x44e4>
   13998:	sub	w22, w22, w10
   1399c:	mov	w10, #0x1                   	// #1
   139a0:	bfi	w10, w28, #1, #31
   139a4:	sub	w8, w12, w12, lsr #5
   139a8:	add	w5, w5, #0x1
   139ac:	mov	w28, w10
   139b0:	strh	w8, [x9, x11, lsl #1]
   139b4:	lsr	w8, w22, #24
   139b8:	cbnz	w8, 139d8 <lzma_mode_is_supported@@XZ_5.0+0x4508>
   139bc:	cmp	x27, x4
   139c0:	b.eq	14770 <lzma_mode_is_supported@@XZ_5.0+0x52a0>  // b.none
   139c4:	ldrb	w8, [x7, x27]
   139c8:	lsl	w22, w22, #8
   139cc:	add	x27, x27, #0x1
   139d0:	bfi	w8, w19, #8, #24
   139d4:	b	139dc <lzma_mode_is_supported@@XZ_5.0+0x450c>
   139d8:	mov	w8, w19
   139dc:	ldur	x10, [x29, #-16]
   139e0:	mov	w9, #0x6644                	// #26180
   139e4:	mov	w11, w28
   139e8:	add	x9, x10, x9
   139ec:	ldrh	w12, [x9, w28, uxtw #1]
   139f0:	lsr	w10, w22, #11
   139f4:	mul	w10, w10, w12
   139f8:	subs	w19, w8, w10
   139fc:	b.cs	13a20 <lzma_mode_is_supported@@XZ_5.0+0x4550>  // b.hs, b.nlast
   13a00:	mov	w13, #0x800                 	// #2048
   13a04:	sub	w13, w13, w12
   13a08:	add	w12, w12, w13, lsr #5
   13a0c:	lsl	w28, w28, #1
   13a10:	strh	w12, [x9, x11, lsl #1]
   13a14:	mov	w22, w10
   13a18:	mov	w19, w8
   13a1c:	b	13a3c <lzma_mode_is_supported@@XZ_5.0+0x456c>
   13a20:	sub	w22, w22, w10
   13a24:	mov	w10, #0x1                   	// #1
   13a28:	bfi	w10, w28, #1, #31
   13a2c:	sub	w8, w12, w12, lsr #5
   13a30:	add	w5, w5, #0x2
   13a34:	mov	w28, w10
   13a38:	strh	w8, [x9, x11, lsl #1]
   13a3c:	lsr	w8, w22, #24
   13a40:	cbnz	w8, 13a60 <lzma_mode_is_supported@@XZ_5.0+0x4590>
   13a44:	cmp	x27, x4
   13a48:	b.eq	1477c <lzma_mode_is_supported@@XZ_5.0+0x52ac>  // b.none
   13a4c:	ldrb	w8, [x7, x27]
   13a50:	lsl	w22, w22, #8
   13a54:	add	x27, x27, #0x1
   13a58:	bfi	w8, w19, #8, #24
   13a5c:	b	13a64 <lzma_mode_is_supported@@XZ_5.0+0x4594>
   13a60:	mov	w8, w19
   13a64:	ldur	x10, [x29, #-16]
   13a68:	mov	w9, #0x6644                	// #26180
   13a6c:	mov	w11, w28
   13a70:	add	x9, x10, x9
   13a74:	ldrh	w12, [x9, w28, uxtw #1]
   13a78:	lsr	w10, w22, #11
   13a7c:	mul	w10, w10, w12
   13a80:	subs	w19, w8, w10
   13a84:	b.cs	13aa8 <lzma_mode_is_supported@@XZ_5.0+0x45d8>  // b.hs, b.nlast
   13a88:	mov	w13, #0x800                 	// #2048
   13a8c:	sub	w13, w13, w12
   13a90:	add	w12, w12, w13, lsr #5
   13a94:	lsl	w28, w28, #1
   13a98:	strh	w12, [x9, x11, lsl #1]
   13a9c:	mov	w22, w10
   13aa0:	mov	w19, w8
   13aa4:	b	13ac4 <lzma_mode_is_supported@@XZ_5.0+0x45f4>
   13aa8:	sub	w22, w22, w10
   13aac:	mov	w10, #0x1                   	// #1
   13ab0:	bfi	w10, w28, #1, #31
   13ab4:	sub	w8, w12, w12, lsr #5
   13ab8:	add	w5, w5, #0x4
   13abc:	mov	w28, w10
   13ac0:	strh	w8, [x9, x11, lsl #1]
   13ac4:	lsr	w8, w22, #24
   13ac8:	cbnz	w8, 13ae8 <lzma_mode_is_supported@@XZ_5.0+0x4618>
   13acc:	cmp	x27, x4
   13ad0:	b.eq	14788 <lzma_mode_is_supported@@XZ_5.0+0x52b8>  // b.none
   13ad4:	ldrb	w9, [x7, x27]
   13ad8:	lsl	w8, w22, #8
   13adc:	add	x27, x27, #0x1
   13ae0:	bfi	w9, w19, #8, #24
   13ae4:	b	13af0 <lzma_mode_is_supported@@XZ_5.0+0x4620>
   13ae8:	mov	w8, w22
   13aec:	mov	w9, w19
   13af0:	ldur	x11, [x29, #-16]
   13af4:	mov	w10, #0x6644                	// #26180
   13af8:	lsr	w12, w8, #11
   13afc:	mov	w13, w28
   13b00:	add	x10, x11, x10
   13b04:	ldrh	w11, [x10, w28, uxtw #1]
   13b08:	mul	w22, w12, w11
   13b0c:	subs	w12, w9, w22
   13b10:	b.cs	13b2c <lzma_mode_is_supported@@XZ_5.0+0x465c>  // b.hs, b.nlast
   13b14:	mov	w8, #0x800                 	// #2048
   13b18:	sub	w8, w8, w11
   13b1c:	add	w8, w11, w8, lsr #5
   13b20:	strh	w8, [x10, x13, lsl #1]
   13b24:	mov	w8, w5
   13b28:	b	13b40 <lzma_mode_is_supported@@XZ_5.0+0x4670>
   13b2c:	sub	w22, w8, w22
   13b30:	sub	w8, w11, w11, lsr #5
   13b34:	strh	w8, [x10, x13, lsl #1]
   13b38:	add	w8, w5, #0x8
   13b3c:	mov	w9, w12
   13b40:	cmn	w8, #0x1
   13b44:	b.ne	142dc <lzma_mode_is_supported@@XZ_5.0+0x4e0c>  // b.any
   13b48:	ldur	x8, [x29, #-16]
   13b4c:	ldr	x8, [x8, #28312]
   13b50:	cmn	x8, #0x1
   13b54:	b.eq	14464 <lzma_mode_is_supported@@XZ_5.0+0x4f94>  // b.none
   13b58:	mov	w0, #0x9                   	// #9
   13b5c:	mov	w5, #0xffffffff            	// #-1
   13b60:	mov	x4, x27
   13b64:	b	14818 <lzma_mode_is_supported@@XZ_5.0+0x5348>
   13b68:	mov	w8, w5
   13b6c:	cmp	x20, w5, uxtw
   13b70:	mvn	x8, x8
   13b74:	csel	x10, xzr, x21, hi  // hi = pmore
   13b78:	add	x8, x20, x8
   13b7c:	add	x8, x8, x10
   13b80:	ldrb	w8, [x30, x8]
   13b84:	mov	w28, #0x1                   	// #1
   13b88:	mov	w17, #0x100                 	// #256
   13b8c:	mov	w19, w9
   13b90:	lsl	w3, w8, #1
   13b94:	lsr	w8, w22, #24
   13b98:	cbnz	w8, 13bb8 <lzma_mode_is_supported@@XZ_5.0+0x46e8>
   13b9c:	cmp	x27, x4
   13ba0:	b.eq	14794 <lzma_mode_is_supported@@XZ_5.0+0x52c4>  // b.none
   13ba4:	ldrb	w8, [x7, x27]
   13ba8:	lsl	w10, w22, #8
   13bac:	add	x27, x27, #0x1
   13bb0:	bfi	w8, w19, #8, #24
   13bb4:	b	13bc0 <lzma_mode_is_supported@@XZ_5.0+0x46f0>
   13bb8:	mov	w10, w22
   13bbc:	mov	w8, w19
   13bc0:	and	w9, w17, w3
   13bc4:	add	w11, w17, w28
   13bc8:	add	w11, w11, w9
   13bcc:	ldrh	w12, [x2, w11, uxtw #1]
   13bd0:	lsr	w13, w10, #11
   13bd4:	mov	w11, w11
   13bd8:	mul	w22, w13, w12
   13bdc:	subs	w13, w8, w22
   13be0:	b.cs	13c00 <lzma_mode_is_supported@@XZ_5.0+0x4730>  // b.hs, b.nlast
   13be4:	mov	w13, #0x800                 	// #2048
   13be8:	sub	w13, w13, w12
   13bec:	add	w12, w12, w13, lsr #5
   13bf0:	lsl	w10, w28, #1
   13bf4:	strh	w12, [x2, x11, lsl #1]
   13bf8:	eor	w9, w9, w17
   13bfc:	b	13c18 <lzma_mode_is_supported@@XZ_5.0+0x4748>
   13c00:	sub	w22, w10, w22
   13c04:	sub	w8, w12, w12, lsr #5
   13c08:	mov	w10, #0x1                   	// #1
   13c0c:	strh	w8, [x2, x11, lsl #1]
   13c10:	bfi	w10, w28, #1, #31
   13c14:	mov	w8, w13
   13c18:	lsl	w3, w3, #1
   13c1c:	mov	w28, w10
   13c20:	mov	w17, w9
   13c24:	mov	w19, w8
   13c28:	lsr	w8, w22, #24
   13c2c:	cbnz	w8, 13c4c <lzma_mode_is_supported@@XZ_5.0+0x477c>
   13c30:	cmp	x27, x4
   13c34:	b.eq	147a0 <lzma_mode_is_supported@@XZ_5.0+0x52d0>  // b.none
   13c38:	ldrb	w8, [x7, x27]
   13c3c:	lsl	w10, w22, #8
   13c40:	add	x27, x27, #0x1
   13c44:	bfi	w8, w19, #8, #24
   13c48:	b	13c54 <lzma_mode_is_supported@@XZ_5.0+0x4784>
   13c4c:	mov	w10, w22
   13c50:	mov	w8, w19
   13c54:	and	w9, w17, w3
   13c58:	add	w11, w17, w28
   13c5c:	add	w11, w11, w9
   13c60:	ldrh	w12, [x2, w11, uxtw #1]
   13c64:	lsr	w13, w10, #11
   13c68:	mov	w11, w11
   13c6c:	mul	w22, w13, w12
   13c70:	subs	w13, w8, w22
   13c74:	b.cs	13c94 <lzma_mode_is_supported@@XZ_5.0+0x47c4>  // b.hs, b.nlast
   13c78:	mov	w13, #0x800                 	// #2048
   13c7c:	sub	w13, w13, w12
   13c80:	add	w12, w12, w13, lsr #5
   13c84:	lsl	w10, w28, #1
   13c88:	strh	w12, [x2, x11, lsl #1]
   13c8c:	eor	w9, w9, w17
   13c90:	b	13cac <lzma_mode_is_supported@@XZ_5.0+0x47dc>
   13c94:	sub	w22, w10, w22
   13c98:	sub	w8, w12, w12, lsr #5
   13c9c:	mov	w10, #0x1                   	// #1
   13ca0:	strh	w8, [x2, x11, lsl #1]
   13ca4:	bfi	w10, w28, #1, #31
   13ca8:	mov	w8, w13
   13cac:	lsl	w3, w3, #1
   13cb0:	mov	w28, w10
   13cb4:	mov	w17, w9
   13cb8:	mov	w19, w8
   13cbc:	lsr	w8, w22, #24
   13cc0:	cbnz	w8, 13ce0 <lzma_mode_is_supported@@XZ_5.0+0x4810>
   13cc4:	cmp	x27, x4
   13cc8:	b.eq	147ac <lzma_mode_is_supported@@XZ_5.0+0x52dc>  // b.none
   13ccc:	ldrb	w8, [x7, x27]
   13cd0:	lsl	w10, w22, #8
   13cd4:	add	x27, x27, #0x1
   13cd8:	bfi	w8, w19, #8, #24
   13cdc:	b	13ce8 <lzma_mode_is_supported@@XZ_5.0+0x4818>
   13ce0:	mov	w10, w22
   13ce4:	mov	w8, w19
   13ce8:	and	w9, w17, w3
   13cec:	add	w11, w17, w28
   13cf0:	add	w11, w11, w9
   13cf4:	ldrh	w12, [x2, w11, uxtw #1]
   13cf8:	lsr	w13, w10, #11
   13cfc:	mov	w11, w11
   13d00:	mul	w22, w13, w12
   13d04:	subs	w13, w8, w22
   13d08:	b.cs	13d28 <lzma_mode_is_supported@@XZ_5.0+0x4858>  // b.hs, b.nlast
   13d0c:	mov	w13, #0x800                 	// #2048
   13d10:	sub	w13, w13, w12
   13d14:	add	w12, w12, w13, lsr #5
   13d18:	lsl	w10, w28, #1
   13d1c:	strh	w12, [x2, x11, lsl #1]
   13d20:	eor	w9, w9, w17
   13d24:	b	13d40 <lzma_mode_is_supported@@XZ_5.0+0x4870>
   13d28:	sub	w22, w10, w22
   13d2c:	sub	w8, w12, w12, lsr #5
   13d30:	mov	w10, #0x1                   	// #1
   13d34:	strh	w8, [x2, x11, lsl #1]
   13d38:	bfi	w10, w28, #1, #31
   13d3c:	mov	w8, w13
   13d40:	lsl	w3, w3, #1
   13d44:	mov	w28, w10
   13d48:	mov	w17, w9
   13d4c:	mov	w19, w8
   13d50:	lsr	w8, w22, #24
   13d54:	cbnz	w8, 13d74 <lzma_mode_is_supported@@XZ_5.0+0x48a4>
   13d58:	cmp	x27, x4
   13d5c:	b.eq	147b8 <lzma_mode_is_supported@@XZ_5.0+0x52e8>  // b.none
   13d60:	ldrb	w8, [x7, x27]
   13d64:	lsl	w10, w22, #8
   13d68:	add	x27, x27, #0x1
   13d6c:	bfi	w8, w19, #8, #24
   13d70:	b	13d7c <lzma_mode_is_supported@@XZ_5.0+0x48ac>
   13d74:	mov	w10, w22
   13d78:	mov	w8, w19
   13d7c:	and	w9, w17, w3
   13d80:	add	w11, w17, w28
   13d84:	add	w11, w11, w9
   13d88:	ldrh	w12, [x2, w11, uxtw #1]
   13d8c:	lsr	w13, w10, #11
   13d90:	mov	w11, w11
   13d94:	mul	w22, w13, w12
   13d98:	subs	w13, w8, w22
   13d9c:	b.cs	13dbc <lzma_mode_is_supported@@XZ_5.0+0x48ec>  // b.hs, b.nlast
   13da0:	mov	w13, #0x800                 	// #2048
   13da4:	sub	w13, w13, w12
   13da8:	add	w12, w12, w13, lsr #5
   13dac:	lsl	w10, w28, #1
   13db0:	strh	w12, [x2, x11, lsl #1]
   13db4:	eor	w9, w9, w17
   13db8:	b	13dd4 <lzma_mode_is_supported@@XZ_5.0+0x4904>
   13dbc:	sub	w22, w10, w22
   13dc0:	sub	w8, w12, w12, lsr #5
   13dc4:	mov	w10, #0x1                   	// #1
   13dc8:	strh	w8, [x2, x11, lsl #1]
   13dcc:	bfi	w10, w28, #1, #31
   13dd0:	mov	w8, w13
   13dd4:	lsl	w3, w3, #1
   13dd8:	mov	w28, w10
   13ddc:	mov	w17, w9
   13de0:	mov	w19, w8
   13de4:	lsr	w8, w22, #24
   13de8:	cbnz	w8, 13e08 <lzma_mode_is_supported@@XZ_5.0+0x4938>
   13dec:	cmp	x27, x4
   13df0:	b.eq	147c4 <lzma_mode_is_supported@@XZ_5.0+0x52f4>  // b.none
   13df4:	ldrb	w8, [x7, x27]
   13df8:	lsl	w10, w22, #8
   13dfc:	add	x27, x27, #0x1
   13e00:	bfi	w8, w19, #8, #24
   13e04:	b	13e10 <lzma_mode_is_supported@@XZ_5.0+0x4940>
   13e08:	mov	w10, w22
   13e0c:	mov	w8, w19
   13e10:	and	w9, w17, w3
   13e14:	add	w11, w17, w28
   13e18:	add	w11, w11, w9
   13e1c:	ldrh	w12, [x2, w11, uxtw #1]
   13e20:	lsr	w13, w10, #11
   13e24:	mov	w11, w11
   13e28:	mul	w22, w13, w12
   13e2c:	subs	w13, w8, w22
   13e30:	b.cs	13e50 <lzma_mode_is_supported@@XZ_5.0+0x4980>  // b.hs, b.nlast
   13e34:	mov	w13, #0x800                 	// #2048
   13e38:	sub	w13, w13, w12
   13e3c:	add	w12, w12, w13, lsr #5
   13e40:	lsl	w10, w28, #1
   13e44:	strh	w12, [x2, x11, lsl #1]
   13e48:	eor	w9, w9, w17
   13e4c:	b	13e68 <lzma_mode_is_supported@@XZ_5.0+0x4998>
   13e50:	sub	w22, w10, w22
   13e54:	sub	w8, w12, w12, lsr #5
   13e58:	mov	w10, #0x1                   	// #1
   13e5c:	strh	w8, [x2, x11, lsl #1]
   13e60:	bfi	w10, w28, #1, #31
   13e64:	mov	w8, w13
   13e68:	lsl	w3, w3, #1
   13e6c:	mov	w28, w10
   13e70:	mov	w17, w9
   13e74:	mov	w19, w8
   13e78:	lsr	w8, w22, #24
   13e7c:	cbnz	w8, 13e9c <lzma_mode_is_supported@@XZ_5.0+0x49cc>
   13e80:	cmp	x27, x4
   13e84:	b.eq	147d0 <lzma_mode_is_supported@@XZ_5.0+0x5300>  // b.none
   13e88:	ldrb	w8, [x7, x27]
   13e8c:	lsl	w10, w22, #8
   13e90:	add	x27, x27, #0x1
   13e94:	bfi	w8, w19, #8, #24
   13e98:	b	13ea4 <lzma_mode_is_supported@@XZ_5.0+0x49d4>
   13e9c:	mov	w10, w22
   13ea0:	mov	w8, w19
   13ea4:	and	w9, w17, w3
   13ea8:	add	w11, w17, w28
   13eac:	add	w11, w11, w9
   13eb0:	ldrh	w12, [x2, w11, uxtw #1]
   13eb4:	lsr	w13, w10, #11
   13eb8:	mov	w11, w11
   13ebc:	mul	w22, w13, w12
   13ec0:	subs	w13, w8, w22
   13ec4:	b.cs	13ee4 <lzma_mode_is_supported@@XZ_5.0+0x4a14>  // b.hs, b.nlast
   13ec8:	mov	w13, #0x800                 	// #2048
   13ecc:	sub	w13, w13, w12
   13ed0:	add	w12, w12, w13, lsr #5
   13ed4:	lsl	w10, w28, #1
   13ed8:	strh	w12, [x2, x11, lsl #1]
   13edc:	eor	w9, w9, w17
   13ee0:	b	13efc <lzma_mode_is_supported@@XZ_5.0+0x4a2c>
   13ee4:	sub	w22, w10, w22
   13ee8:	sub	w8, w12, w12, lsr #5
   13eec:	mov	w10, #0x1                   	// #1
   13ef0:	strh	w8, [x2, x11, lsl #1]
   13ef4:	bfi	w10, w28, #1, #31
   13ef8:	mov	w8, w13
   13efc:	lsl	w3, w3, #1
   13f00:	mov	w28, w10
   13f04:	mov	w17, w9
   13f08:	mov	w19, w8
   13f0c:	lsr	w8, w22, #24
   13f10:	cbnz	w8, 13f30 <lzma_mode_is_supported@@XZ_5.0+0x4a60>
   13f14:	cmp	x27, x4
   13f18:	b.eq	147dc <lzma_mode_is_supported@@XZ_5.0+0x530c>  // b.none
   13f1c:	ldrb	w8, [x7, x27]
   13f20:	lsl	w10, w22, #8
   13f24:	add	x27, x27, #0x1
   13f28:	bfi	w8, w19, #8, #24
   13f2c:	b	13f38 <lzma_mode_is_supported@@XZ_5.0+0x4a68>
   13f30:	mov	w10, w22
   13f34:	mov	w8, w19
   13f38:	and	w9, w17, w3
   13f3c:	add	w11, w17, w28
   13f40:	add	w11, w11, w9
   13f44:	ldrh	w12, [x2, w11, uxtw #1]
   13f48:	lsr	w13, w10, #11
   13f4c:	mov	w11, w11
   13f50:	mul	w22, w13, w12
   13f54:	subs	w13, w8, w22
   13f58:	b.cs	13f78 <lzma_mode_is_supported@@XZ_5.0+0x4aa8>  // b.hs, b.nlast
   13f5c:	mov	w13, #0x800                 	// #2048
   13f60:	sub	w13, w13, w12
   13f64:	add	w12, w12, w13, lsr #5
   13f68:	lsl	w10, w28, #1
   13f6c:	strh	w12, [x2, x11, lsl #1]
   13f70:	eor	w9, w9, w17
   13f74:	b	13f90 <lzma_mode_is_supported@@XZ_5.0+0x4ac0>
   13f78:	sub	w22, w10, w22
   13f7c:	sub	w8, w12, w12, lsr #5
   13f80:	mov	w10, #0x1                   	// #1
   13f84:	strh	w8, [x2, x11, lsl #1]
   13f88:	bfi	w10, w28, #1, #31
   13f8c:	mov	w8, w13
   13f90:	lsl	w3, w3, #1
   13f94:	mov	w28, w10
   13f98:	mov	w17, w9
   13f9c:	mov	w19, w8
   13fa0:	lsr	w8, w22, #24
   13fa4:	cbnz	w8, 13fc4 <lzma_mode_is_supported@@XZ_5.0+0x4af4>
   13fa8:	cmp	x27, x4
   13fac:	b.eq	147e8 <lzma_mode_is_supported@@XZ_5.0+0x5318>  // b.none
   13fb0:	ldrb	w8, [x7, x27]
   13fb4:	lsl	w9, w22, #8
   13fb8:	add	x27, x27, #0x1
   13fbc:	bfi	w8, w19, #8, #24
   13fc0:	b	13fcc <lzma_mode_is_supported@@XZ_5.0+0x4afc>
   13fc4:	mov	w9, w22
   13fc8:	mov	w8, w19
   13fcc:	and	w10, w17, w3
   13fd0:	add	w11, w17, w28
   13fd4:	add	w12, w11, w10
   13fd8:	ldrh	w13, [x2, w12, uxtw #1]
   13fdc:	lsr	w11, w9, #11
   13fe0:	mov	w12, w12
   13fe4:	mul	w22, w11, w13
   13fe8:	subs	w11, w8, w22
   13fec:	b.cs	1400c <lzma_mode_is_supported@@XZ_5.0+0x4b3c>  // b.hs, b.nlast
   13ff0:	mov	w11, #0x800                 	// #2048
   13ff4:	sub	w11, w11, w13
   13ff8:	add	w11, w13, w11, lsr #5
   13ffc:	lsl	w9, w28, #1
   14000:	strh	w11, [x2, x12, lsl #1]
   14004:	eor	w10, w10, w17
   14008:	b	14024 <lzma_mode_is_supported@@XZ_5.0+0x4b54>
   1400c:	sub	w22, w9, w22
   14010:	mov	w9, #0x1                   	// #1
   14014:	sub	w8, w13, w13, lsr #5
   14018:	bfi	w9, w28, #1, #31
   1401c:	strh	w8, [x2, x12, lsl #1]
   14020:	mov	w8, w11
   14024:	adrp	x11, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   14028:	add	x11, x11, #0xcc8
   1402c:	ldr	w15, [x11, w15, uxtw #2]
   14030:	mov	w28, w9
   14034:	mov	w17, w10
   14038:	mov	w19, w8
   1403c:	cmp	x20, x26
   14040:	b.eq	144d0 <lzma_mode_is_supported@@XZ_5.0+0x5000>  // b.none
   14044:	add	x8, x20, #0x1
   14048:	cmp	x8, x16
   1404c:	strb	w28, [x30, x20]
   14050:	csinc	x16, x16, x20, ls  // ls = plast
   14054:	mov	x20, x8
   14058:	b	11d10 <lzma_mode_is_supported@@XZ_5.0+0x2840>
   1405c:	mov	w8, w5
   14060:	mov	w9, w19
   14064:	b	142dc <lzma_mode_is_supported@@XZ_5.0+0x4e0c>
   14068:	mov	w9, w22
   1406c:	mov	w8, w19
   14070:	ldrh	w12, [x2, w28, uxtw #1]
   14074:	lsr	w10, w9, #11
   14078:	mov	w11, w28
   1407c:	mul	w22, w10, w12
   14080:	subs	w10, w8, w22
   14084:	b.cs	140a0 <lzma_mode_is_supported@@XZ_5.0+0x4bd0>  // b.hs, b.nlast
   14088:	mov	w9, #0x800                 	// #2048
   1408c:	sub	w9, w9, w12
   14090:	add	w9, w12, w9, lsr #5
   14094:	strh	w9, [x2, x11, lsl #1]
   14098:	lsl	w9, w28, #1
   1409c:	b	140bc <lzma_mode_is_supported@@XZ_5.0+0x4bec>
   140a0:	sub	w22, w9, w22
   140a4:	sub	w8, w12, w12, lsr #5
   140a8:	mov	w9, #0x1                   	// #1
   140ac:	add	w5, w5, #0x1
   140b0:	strh	w8, [x2, x11, lsl #1]
   140b4:	bfi	w9, w28, #1, #31
   140b8:	mov	w8, w10
   140bc:	add	w17, w17, #0x1
   140c0:	mov	w28, w9
   140c4:	mov	w19, w8
   140c8:	lsr	w8, w22, #24
   140cc:	cbnz	w8, 140ec <lzma_mode_is_supported@@XZ_5.0+0x4c1c>
   140d0:	cmp	x27, x4
   140d4:	b.eq	14938 <lzma_mode_is_supported@@XZ_5.0+0x5468>  // b.none
   140d8:	ldrb	w8, [x7, x27]
   140dc:	lsl	w9, w22, #8
   140e0:	add	x27, x27, #0x1
   140e4:	bfi	w8, w19, #8, #24
   140e8:	b	140f4 <lzma_mode_is_supported@@XZ_5.0+0x4c24>
   140ec:	mov	w9, w22
   140f0:	mov	w8, w19
   140f4:	ldrh	w12, [x2, w28, uxtw #1]
   140f8:	lsr	w10, w9, #11
   140fc:	mov	w11, w28
   14100:	mul	w22, w10, w12
   14104:	subs	w10, w8, w22
   14108:	b.cs	14124 <lzma_mode_is_supported@@XZ_5.0+0x4c54>  // b.hs, b.nlast
   1410c:	mov	w9, #0x800                 	// #2048
   14110:	sub	w9, w9, w12
   14114:	add	w9, w12, w9, lsr #5
   14118:	strh	w9, [x2, x11, lsl #1]
   1411c:	lsl	w9, w28, #1
   14120:	b	14144 <lzma_mode_is_supported@@XZ_5.0+0x4c74>
   14124:	sub	w22, w9, w22
   14128:	sub	w8, w12, w12, lsr #5
   1412c:	mov	w9, #0x1                   	// #1
   14130:	strh	w8, [x2, x11, lsl #1]
   14134:	lsl	w8, w9, w17
   14138:	add	w5, w8, w5
   1413c:	bfi	w9, w28, #1, #31
   14140:	mov	w8, w10
   14144:	add	w17, w17, #0x1
   14148:	mov	w28, w9
   1414c:	mov	w19, w8
   14150:	lsr	w8, w22, #24
   14154:	cbnz	w8, 14174 <lzma_mode_is_supported@@XZ_5.0+0x4ca4>
   14158:	cmp	x27, x4
   1415c:	b.eq	14924 <lzma_mode_is_supported@@XZ_5.0+0x5454>  // b.none
   14160:	ldrb	w8, [x7, x27]
   14164:	lsl	w9, w22, #8
   14168:	add	x27, x27, #0x1
   1416c:	bfi	w8, w19, #8, #24
   14170:	b	1417c <lzma_mode_is_supported@@XZ_5.0+0x4cac>
   14174:	mov	w9, w22
   14178:	mov	w8, w19
   1417c:	ldrh	w12, [x2, w28, uxtw #1]
   14180:	lsr	w10, w9, #11
   14184:	mov	w11, w28
   14188:	mul	w22, w10, w12
   1418c:	subs	w10, w8, w22
   14190:	b.cs	141ac <lzma_mode_is_supported@@XZ_5.0+0x4cdc>  // b.hs, b.nlast
   14194:	mov	w9, #0x800                 	// #2048
   14198:	sub	w9, w9, w12
   1419c:	add	w9, w12, w9, lsr #5
   141a0:	strh	w9, [x2, x11, lsl #1]
   141a4:	lsl	w9, w28, #1
   141a8:	b	141cc <lzma_mode_is_supported@@XZ_5.0+0x4cfc>
   141ac:	sub	w22, w9, w22
   141b0:	sub	w8, w12, w12, lsr #5
   141b4:	mov	w9, #0x1                   	// #1
   141b8:	strh	w8, [x2, x11, lsl #1]
   141bc:	lsl	w8, w9, w17
   141c0:	add	w5, w8, w5
   141c4:	bfi	w9, w28, #1, #31
   141c8:	mov	w8, w10
   141cc:	add	w17, w17, #0x1
   141d0:	mov	w28, w9
   141d4:	mov	w19, w8
   141d8:	lsr	w8, w22, #24
   141dc:	cbnz	w8, 141fc <lzma_mode_is_supported@@XZ_5.0+0x4d2c>
   141e0:	cmp	x27, x4
   141e4:	b.eq	14910 <lzma_mode_is_supported@@XZ_5.0+0x5440>  // b.none
   141e8:	ldrb	w8, [x7, x27]
   141ec:	lsl	w9, w22, #8
   141f0:	add	x27, x27, #0x1
   141f4:	bfi	w8, w19, #8, #24
   141f8:	b	14204 <lzma_mode_is_supported@@XZ_5.0+0x4d34>
   141fc:	mov	w9, w22
   14200:	mov	w8, w19
   14204:	ldrh	w12, [x2, w28, uxtw #1]
   14208:	lsr	w10, w9, #11
   1420c:	mov	w11, w28
   14210:	mul	w22, w10, w12
   14214:	subs	w10, w8, w22
   14218:	b.cs	14234 <lzma_mode_is_supported@@XZ_5.0+0x4d64>  // b.hs, b.nlast
   1421c:	mov	w9, #0x800                 	// #2048
   14220:	sub	w9, w9, w12
   14224:	add	w9, w12, w9, lsr #5
   14228:	strh	w9, [x2, x11, lsl #1]
   1422c:	lsl	w9, w28, #1
   14230:	b	14254 <lzma_mode_is_supported@@XZ_5.0+0x4d84>
   14234:	sub	w22, w9, w22
   14238:	sub	w8, w12, w12, lsr #5
   1423c:	mov	w9, #0x1                   	// #1
   14240:	strh	w8, [x2, x11, lsl #1]
   14244:	lsl	w8, w9, w17
   14248:	add	w5, w8, w5
   1424c:	bfi	w9, w28, #1, #31
   14250:	mov	w8, w10
   14254:	add	w17, w17, #0x1
   14258:	mov	w28, w9
   1425c:	mov	w19, w8
   14260:	lsr	w8, w22, #24
   14264:	cbnz	w8, 14284 <lzma_mode_is_supported@@XZ_5.0+0x4db4>
   14268:	cmp	x27, x4
   1426c:	b.eq	148fc <lzma_mode_is_supported@@XZ_5.0+0x542c>  // b.none
   14270:	ldrb	w9, [x7, x27]
   14274:	lsl	w8, w22, #8
   14278:	add	x27, x27, #0x1
   1427c:	bfi	w9, w19, #8, #24
   14280:	b	1428c <lzma_mode_is_supported@@XZ_5.0+0x4dbc>
   14284:	mov	w8, w22
   14288:	mov	w9, w19
   1428c:	ldrh	w12, [x2, w28, uxtw #1]
   14290:	lsr	w10, w8, #11
   14294:	mov	w11, w28
   14298:	mul	w22, w10, w12
   1429c:	subs	w10, w9, w22
   142a0:	b.cs	142c0 <lzma_mode_is_supported@@XZ_5.0+0x4df0>  // b.hs, b.nlast
   142a4:	mov	w8, #0x800                 	// #2048
   142a8:	sub	w8, w8, w12
   142ac:	add	w8, w12, w8, lsr #5
   142b0:	strh	w8, [x2, x11, lsl #1]
   142b4:	mov	w6, #0x1                   	// #1
   142b8:	mov	w8, w5
   142bc:	b	142dc <lzma_mode_is_supported@@XZ_5.0+0x4e0c>
   142c0:	sub	w22, w8, w22
   142c4:	sub	w8, w12, w12, lsr #5
   142c8:	mov	w6, #0x1                   	// #1
   142cc:	strh	w8, [x2, x11, lsl #1]
   142d0:	lsl	w8, w6, w17
   142d4:	add	w8, w8, w5
   142d8:	mov	w9, w10
   142dc:	cmp	x16, w8, uxtw
   142e0:	b.ls	144b8 <lzma_mode_is_supported@@XZ_5.0+0x4fe8>  // b.plast
   142e4:	mov	w5, w8
   142e8:	mov	w19, w9
   142ec:	sub	x8, x26, x20
   142f0:	mov	w9, w3
   142f4:	cmp	x8, w3, uxtw
   142f8:	csel	x25, x8, x9, cc  // cc = lo, ul, last
   142fc:	sub	w3, w3, w25
   14300:	cmp	w5, w25
   14304:	mov	w8, w5
   14308:	b.cs	14338 <lzma_mode_is_supported@@XZ_5.0+0x4e68>  // b.hs, b.nlast
   1430c:	mvn	x9, x8
   14310:	add	x9, x30, x9
   14314:	cmp	x20, x8
   14318:	csel	x10, xzr, x21, hi  // hi = pmore
   1431c:	add	x10, x9, x10
   14320:	ldrb	w10, [x10, x20]
   14324:	subs	w25, w25, #0x1
   14328:	strb	w10, [x30, x20]
   1432c:	add	x20, x20, #0x1
   14330:	b.ne	14314 <lzma_mode_is_supported@@XZ_5.0+0x4e44>  // b.any
   14334:	b	14448 <lzma_mode_is_supported@@XZ_5.0+0x4f78>
   14338:	cmp	x20, x8
   1433c:	stp	w17, w5, [x29, #-76]
   14340:	stur	x16, [x29, #-48]
   14344:	stur	w15, [x29, #-52]
   14348:	stur	x2, [x29, #-64]
   1434c:	stur	w18, [x29, #-68]
   14350:	b.ls	143bc <lzma_mode_is_supported@@XZ_5.0+0x4eec>  // b.plast
   14354:	add	x0, x30, x20
   14358:	mvn	x8, x8
   1435c:	add	x1, x8, x0
   14360:	mov	x2, x25
   14364:	str	x20, [sp, #48]
   14368:	mov	x24, x4
   1436c:	mov	w20, w3
   14370:	mov	x26, x21
   14374:	mov	w21, w6
   14378:	mov	x23, x30
   1437c:	bl	3060 <memcpy@plt>
   14380:	mov	w3, w20
   14384:	ldr	x20, [sp, #48]
   14388:	mov	x30, x23
   1438c:	mov	w6, w21
   14390:	mov	x21, x26
   14394:	ldp	w5, w18, [x29, #-72]
   14398:	ldur	x2, [x29, #-64]
   1439c:	ldur	w15, [x29, #-52]
   143a0:	ldur	x16, [x29, #-48]
   143a4:	ldur	w17, [x29, #-76]
   143a8:	ldp	x26, x7, [sp, #80]
   143ac:	ldr	x23, [sp, #72]
   143b0:	mov	x4, x24
   143b4:	add	x20, x25, x20
   143b8:	b	14448 <lzma_mode_is_supported@@XZ_5.0+0x4f78>
   143bc:	eor	x8, x8, #0xffffffff
   143c0:	add	x23, x8, x20
   143c4:	add	w8, w23, w21
   143c8:	neg	x26, x23
   143cc:	mov	x24, x21
   143d0:	add	x0, x30, x20
   143d4:	cmp	w25, w26
   143d8:	add	x1, x30, x8
   143dc:	mov	x21, x30
   143e0:	stp	w6, w3, [sp, #44]
   143e4:	b.ls	14410 <lzma_mode_is_supported@@XZ_5.0+0x4f40>  // b.plast
   143e8:	and	x2, x26, #0xffffffff
   143ec:	bl	3070 <memmove@plt>
   143f0:	add	x20, x20, w26, uxtw
   143f4:	add	w25, w23, w25
   143f8:	add	x0, x21, x20
   143fc:	mov	x1, x21
   14400:	mov	x2, x25
   14404:	bl	3060 <memcpy@plt>
   14408:	add	x20, x20, x25
   1440c:	b	1441c <lzma_mode_is_supported@@XZ_5.0+0x4f4c>
   14410:	mov	x2, x25
   14414:	bl	3070 <memmove@plt>
   14418:	add	x20, x25, x20
   1441c:	ldur	x16, [x29, #-48]
   14420:	ldur	w15, [x29, #-52]
   14424:	ldr	x4, [sp, #32]
   14428:	ldp	w5, w18, [x29, #-72]
   1442c:	ldur	x2, [x29, #-64]
   14430:	ldp	w6, w3, [sp, #44]
   14434:	ldur	w17, [x29, #-76]
   14438:	ldp	x26, x7, [sp, #80]
   1443c:	ldr	x23, [sp, #72]
   14440:	mov	x30, x21
   14444:	mov	x21, x24
   14448:	cmp	x16, x20
   1444c:	csel	x16, x20, x16, cc  // cc = lo, ul, last
   14450:	cbz	w3, 11d10 <lzma_mode_is_supported@@XZ_5.0+0x2840>
   14454:	ldr	x9, [sp]
   14458:	mov	w8, #0x46                  	// #70
   1445c:	mov	w0, wzr
   14460:	b	144e0 <lzma_mode_is_supported@@XZ_5.0+0x5010>
   14464:	mov	w5, #0xffffffff            	// #-1
   14468:	mov	w19, w9
   1446c:	lsr	w8, w22, #24
   14470:	cbnz	w8, 144ac <lzma_mode_is_supported@@XZ_5.0+0x4fdc>
   14474:	cmp	x27, x4
   14478:	b.eq	14960 <lzma_mode_is_supported@@XZ_5.0+0x5490>  // b.none
   1447c:	ldrb	w9, [x7, x27]
   14480:	lsl	w22, w22, #8
   14484:	add	x4, x27, #0x1
   14488:	mov	w0, #0x1                   	// #1
   1448c:	bfi	w9, w19, #8, #24
   14490:	b	14818 <lzma_mode_is_supported@@XZ_5.0+0x5348>
   14494:	ldr	x11, [sp]
   14498:	mov	w10, #0x2b                  	// #43
   1449c:	mov	w0, wzr
   144a0:	mov	w5, w8
   144a4:	str	w10, [x11]
   144a8:	b	14818 <lzma_mode_is_supported@@XZ_5.0+0x5348>
   144ac:	mov	w0, #0x1                   	// #1
   144b0:	mov	x4, x27
   144b4:	b	14814 <lzma_mode_is_supported@@XZ_5.0+0x5344>
   144b8:	mov	w0, #0x9                   	// #9
   144bc:	mov	w5, w8
   144c0:	b	13b60 <lzma_mode_is_supported@@XZ_5.0+0x4690>
   144c4:	mov	w0, wzr
   144c8:	mov	w8, #0x32                  	// #50
   144cc:	b	144d8 <lzma_mode_is_supported@@XZ_5.0+0x5008>
   144d0:	mov	w0, wzr
   144d4:	mov	w8, #0x12                  	// #18
   144d8:	ldr	x9, [sp]
   144dc:	mov	x20, x26
   144e0:	str	w8, [x9]
   144e4:	b	144b0 <lzma_mode_is_supported@@XZ_5.0+0x4fe0>
   144e8:	mov	w0, wzr
   144ec:	mov	w8, #0x2                   	// #2
   144f0:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   144f4:	mov	w0, wzr
   144f8:	mov	w8, #0x3                   	// #3
   144fc:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14500:	mov	w0, wzr
   14504:	mov	w8, #0x4                   	// #4
   14508:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1450c:	mov	w0, wzr
   14510:	mov	w8, #0x5                   	// #5
   14514:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14518:	mov	w0, wzr
   1451c:	mov	w8, #0x6                   	// #6
   14520:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14524:	mov	w0, wzr
   14528:	mov	w8, #0x7                   	// #7
   1452c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14530:	mov	w0, wzr
   14534:	mov	w8, #0x8                   	// #8
   14538:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1453c:	mov	w0, wzr
   14540:	mov	w8, #0x9                   	// #9
   14544:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14548:	ldr	x9, [sp]
   1454c:	ldur	w18, [x29, #-28]
   14550:	mov	w8, #0x13                  	// #19
   14554:	mov	w0, wzr
   14558:	str	w8, [x9]
   1455c:	stur	w1, [x29, #-28]
   14560:	b	14814 <lzma_mode_is_supported@@XZ_5.0+0x5344>
   14564:	mov	w0, wzr
   14568:	mov	w8, #0x14                  	// #20
   1456c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14570:	mov	w0, wzr
   14574:	mov	w8, #0x15                  	// #21
   14578:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1457c:	mov	w0, wzr
   14580:	mov	w8, #0x31                  	// #49
   14584:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14588:	mov	w0, wzr
   1458c:	mov	w8, #0x33                  	// #51
   14590:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14594:	mov	w0, wzr
   14598:	mov	w8, #0x16                  	// #22
   1459c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   145a0:	mov	w0, wzr
   145a4:	mov	w8, #0x34                  	// #52
   145a8:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   145ac:	mov	w0, wzr
   145b0:	mov	w8, #0x17                  	// #23
   145b4:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   145b8:	mov	w0, wzr
   145bc:	mov	w8, #0x35                  	// #53
   145c0:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   145c4:	mov	w0, wzr
   145c8:	mov	w8, #0x36                  	// #54
   145cc:	b	14608 <lzma_mode_is_supported@@XZ_5.0+0x5138>
   145d0:	mov	w0, wzr
   145d4:	mov	w8, #0x37                  	// #55
   145d8:	b	14608 <lzma_mode_is_supported@@XZ_5.0+0x5138>
   145dc:	mov	w0, wzr
   145e0:	mov	w8, #0x3a                  	// #58
   145e4:	b	14608 <lzma_mode_is_supported@@XZ_5.0+0x5138>
   145e8:	mov	w0, wzr
   145ec:	mov	w8, #0x3b                  	// #59
   145f0:	b	14608 <lzma_mode_is_supported@@XZ_5.0+0x5138>
   145f4:	mov	w0, wzr
   145f8:	mov	w8, #0x38                  	// #56
   145fc:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14600:	mov	w0, wzr
   14604:	mov	w8, #0x3e                  	// #62
   14608:	ldr	x10, [sp]
   1460c:	str	w8, [x10]
   14610:	b	14818 <lzma_mode_is_supported@@XZ_5.0+0x5348>
   14614:	mov	w0, wzr
   14618:	mov	w8, #0x39                  	// #57
   1461c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14620:	mov	w0, wzr
   14624:	mov	w8, #0x3f                  	// #63
   14628:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1462c:	mov	w0, wzr
   14630:	mov	w8, #0x18                  	// #24
   14634:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14638:	mov	w0, wzr
   1463c:	mov	w8, #0x19                  	// #25
   14640:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14644:	mov	w0, wzr
   14648:	mov	w8, #0x1c                  	// #28
   1464c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14650:	mov	w0, wzr
   14654:	mov	w8, #0x1a                  	// #26
   14658:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1465c:	mov	w0, wzr
   14660:	mov	w8, #0x1d                  	// #29
   14664:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14668:	mov	w0, wzr
   1466c:	mov	w8, #0x1b                  	// #27
   14670:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14674:	mov	w0, wzr
   14678:	mov	w8, #0x3c                  	// #60
   1467c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14680:	mov	w0, wzr
   14684:	mov	w8, #0x40                  	// #64
   14688:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1468c:	mov	w0, wzr
   14690:	mov	w8, #0x41                  	// #65
   14694:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14698:	mov	w0, wzr
   1469c:	mov	w8, #0x1e                  	// #30
   146a0:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146a4:	mov	w0, wzr
   146a8:	mov	w8, #0x1f                  	// #31
   146ac:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146b0:	mov	w0, wzr
   146b4:	mov	w8, #0x20                  	// #32
   146b8:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146bc:	mov	w0, wzr
   146c0:	mov	w8, #0x3d                  	// #61
   146c4:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146c8:	mov	w0, wzr
   146cc:	mov	w8, #0x42                  	// #66
   146d0:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146d4:	mov	w0, wzr
   146d8:	mov	w8, #0x43                  	// #67
   146dc:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146e0:	mov	w0, wzr
   146e4:	mov	w8, #0x21                  	// #33
   146e8:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146ec:	mov	w0, wzr
   146f0:	mov	w8, #0x44                  	// #68
   146f4:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   146f8:	mov	w0, wzr
   146fc:	mov	w8, #0x22                  	// #34
   14700:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14704:	mov	w0, wzr
   14708:	mov	w8, #0x23                  	// #35
   1470c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14710:	mov	w0, wzr
   14714:	mov	w8, #0x24                  	// #36
   14718:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1471c:	mov	w0, wzr
   14720:	mov	w8, #0x45                  	// #69
   14724:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14728:	mov	w0, wzr
   1472c:	mov	w8, #0x25                  	// #37
   14730:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14734:	mov	w0, wzr
   14738:	mov	w8, #0x26                  	// #38
   1473c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14740:	mov	w0, wzr
   14744:	mov	w8, #0x27                  	// #39
   14748:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1474c:	mov	w0, wzr
   14750:	mov	w8, #0x28                  	// #40
   14754:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14758:	mov	w0, wzr
   1475c:	mov	w8, #0x29                  	// #41
   14760:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14764:	mov	w0, wzr
   14768:	mov	w8, #0x2c                  	// #44
   1476c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14770:	mov	w0, wzr
   14774:	mov	w8, #0x2d                  	// #45
   14778:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1477c:	mov	w0, wzr
   14780:	mov	w8, #0x2e                  	// #46
   14784:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14788:	mov	w0, wzr
   1478c:	mov	w8, #0x2f                  	// #47
   14790:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   14794:	mov	w0, wzr
   14798:	mov	w8, #0xa                   	// #10
   1479c:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147a0:	mov	w0, wzr
   147a4:	mov	w8, #0xb                   	// #11
   147a8:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147ac:	mov	w0, wzr
   147b0:	mov	w8, #0xc                   	// #12
   147b4:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147b8:	mov	w0, wzr
   147bc:	mov	w8, #0xd                   	// #13
   147c0:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147c4:	mov	w0, wzr
   147c8:	mov	w8, #0xe                   	// #14
   147cc:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147d0:	mov	w0, wzr
   147d4:	mov	w8, #0xf                   	// #15
   147d8:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147dc:	mov	w0, wzr
   147e0:	mov	w8, #0x10                  	// #16
   147e4:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147e8:	mov	w0, wzr
   147ec:	mov	w8, #0x11                  	// #17
   147f0:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   147f4:	ldur	w18, [x29, #-28]
   147f8:	mov	w0, #0x9                   	// #9
   147fc:	stur	w1, [x29, #-28]
   14800:	b	13b60 <lzma_mode_is_supported@@XZ_5.0+0x4690>
   14804:	mov	w0, wzr
   14808:	mov	w8, #0x1                   	// #1
   1480c:	ldr	x9, [sp]
   14810:	str	w8, [x9]
   14814:	mov	w9, w19
   14818:	ldr	x10, [sp, #16]
   1481c:	mov	w8, w5
   14820:	ldur	x11, [x29, #-24]
   14824:	ldur	w8, [x29, #-28]
   14828:	stp	x20, x16, [x10, #8]
   1482c:	ldr	x10, [sp, #24]
   14830:	str	w22, [x11, #2056]
   14834:	str	w9, [x11, #2060]
   14838:	str	wzr, [x11, #2064]
   1483c:	str	x4, [x10]
   14840:	str	w8, [x11, #2080]
   14844:	ldur	w8, [x29, #-36]
   14848:	str	w15, [x11, #2068]
   1484c:	str	w5, [x11, #2072]
   14850:	str	w18, [x11, #2076]
   14854:	str	w8, [x11, #2084]
   14858:	ldur	x8, [x29, #-16]
   1485c:	ldr	x10, [sp, #8]
   14860:	str	x2, [x8, #28328]
   14864:	str	w28, [x11, #2124]
   14868:	str	w6, [x11, #2128]
   1486c:	str	w17, [x11, #2132]
   14870:	str	w3, [x11, #2136]
   14874:	ldr	x8, [x8, #28312]
   14878:	cmn	x8, #0x1
   1487c:	b.eq	148b4 <lzma_mode_is_supported@@XZ_5.0+0x53e4>  // b.none
   14880:	sub	x10, x10, x20
   14884:	add	x8, x8, x10
   14888:	ldur	x10, [x29, #-16]
   1488c:	str	x8, [x10, #28312]
   14890:	cbnz	w0, 148b4 <lzma_mode_is_supported@@XZ_5.0+0x53e4>
   14894:	cbnz	x8, 148b4 <lzma_mode_is_supported@@XZ_5.0+0x53e4>
   14898:	ldr	x8, [sp]
   1489c:	ldr	w0, [x8]
   148a0:	cbz	w0, 148dc <lzma_mode_is_supported@@XZ_5.0+0x540c>
   148a4:	cmp	w0, #0x1
   148a8:	b.eq	148bc <lzma_mode_is_supported@@XZ_5.0+0x53ec>  // b.none
   148ac:	mov	w0, #0x9                   	// #9
   148b0:	b	148dc <lzma_mode_is_supported@@XZ_5.0+0x540c>
   148b4:	cmp	w0, #0x1
   148b8:	b.ne	148dc <lzma_mode_is_supported@@XZ_5.0+0x540c>  // b.any
   148bc:	cmp	w9, #0x0
   148c0:	mov	w8, #0x9                   	// #9
   148c4:	csinc	w0, w8, wzr, ne  // ne = any
   148c8:	ldur	x8, [x29, #-24]
   148cc:	movi	d0, #0xffffffff
   148d0:	mov	w9, #0x5                   	// #5
   148d4:	str	d0, [x8, #2056]
   148d8:	str	w9, [x8, #2064]
   148dc:	ldp	x20, x19, [sp, #256]
   148e0:	ldp	x22, x21, [sp, #240]
   148e4:	ldp	x24, x23, [sp, #224]
   148e8:	ldp	x26, x25, [sp, #208]
   148ec:	ldp	x28, x27, [sp, #192]
   148f0:	ldp	x29, x30, [sp, #176]
   148f4:	add	sp, sp, #0x110
   148f8:	ret
   148fc:	ldr	x9, [sp]
   14900:	mov	w8, #0x2a                  	// #42
   14904:	mov	w0, wzr
   14908:	mov	w6, #0x1                   	// #1
   1490c:	b	14810 <lzma_mode_is_supported@@XZ_5.0+0x5340>
   14910:	ldr	x9, [sp]
   14914:	mov	w8, #0x2a                  	// #42
   14918:	mov	w0, wzr
   1491c:	mov	w6, #0x2                   	// #2
   14920:	b	14810 <lzma_mode_is_supported@@XZ_5.0+0x5340>
   14924:	ldr	x9, [sp]
   14928:	mov	w8, #0x2a                  	// #42
   1492c:	mov	w0, wzr
   14930:	mov	w6, #0x3                   	// #3
   14934:	b	14810 <lzma_mode_is_supported@@XZ_5.0+0x5340>
   14938:	ldr	x9, [sp]
   1493c:	mov	w8, #0x2a                  	// #42
   14940:	mov	w0, wzr
   14944:	mov	w6, #0x4                   	// #4
   14948:	b	14810 <lzma_mode_is_supported@@XZ_5.0+0x5340>
   1494c:	ldr	x9, [sp]
   14950:	mov	w8, #0x2a                  	// #42
   14954:	mov	w0, wzr
   14958:	mov	w6, #0x5                   	// #5
   1495c:	b	14810 <lzma_mode_is_supported@@XZ_5.0+0x5340>
   14960:	mov	w0, wzr
   14964:	mov	w8, #0x30                  	// #48
   14968:	b	1480c <lzma_mode_is_supported@@XZ_5.0+0x533c>
   1496c:	ldr	w9, [x1, #28]
   14970:	mov	w8, #0xffffffff            	// #-1
   14974:	mov	w12, #0x6e8c                	// #28300
   14978:	mov	w11, wzr
   1497c:	lsl	w8, w8, w9
   14980:	mvn	w10, w8
   14984:	str	w10, [x0, x12]
   14988:	ldp	w13, w12, [x1, #20]
   1498c:	mov	w8, #0x6644                	// #26180
   14990:	mov	w14, #0x600                 	// #1536
   14994:	add	x8, x0, x8
   14998:	add	w15, w12, w13
   1499c:	movi	v0.8h, #0x4, lsl #8
   149a0:	mov	x16, xzr
   149a4:	umaddl	x17, w11, w14, x0
   149a8:	str	q0, [x17, x16]
   149ac:	add	x16, x16, #0x10
   149b0:	cmp	x16, #0x600
   149b4:	b.ne	149a8 <lzma_mode_is_supported@@XZ_5.0+0x54d8>  // b.any
   149b8:	add	w11, w11, #0x1
   149bc:	lsr	w16, w11, w15
   149c0:	cbz	w16, 149a0 <lzma_mode_is_supported@@XZ_5.0+0x54d0>
   149c4:	str	w13, [x8, #2124]
   149c8:	mov	w13, #0xffffffff            	// #-1
   149cc:	lsl	w12, w13, w12
   149d0:	movi	v0.2d, #0x0
   149d4:	mov	w15, #0x6e78                	// #28280
   149d8:	mvn	w12, w12
   149dc:	mov	w14, #0x6e88                	// #28296
   149e0:	str	w12, [x8, #2128]
   149e4:	str	q0, [x0, x15]
   149e8:	mov	w18, #0x5                   	// #5
   149ec:	mov	w13, #0x61e0                	// #25056
   149f0:	mov	w15, #0x6180                	// #24960
   149f4:	mov	w16, #0x6198                	// #24984
   149f8:	mov	w17, #0x61b0                	// #25008
   149fc:	mov	w1, #0x61c8                	// #25032
   14a00:	mov	x11, xzr
   14a04:	movi	d0, #0xffffffff
   14a08:	add	x12, x0, #0x6, lsl #12
   14a0c:	str	wzr, [x0, x14]
   14a10:	add	x13, x0, x13
   14a14:	add	x14, x0, x15
   14a18:	add	x15, x0, x16
   14a1c:	add	x16, x0, x17
   14a20:	add	x17, x0, x1
   14a24:	str	w18, [x8, #2096]
   14a28:	mov	w18, #0x400                 	// #1024
   14a2c:	str	w10, [x8, #2120]
   14a30:	str	d0, [x8, #2088]
   14a34:	mov	w1, wzr
   14a38:	add	x2, x12, x11, lsl #5
   14a3c:	add	x3, x13, x11, lsl #5
   14a40:	strh	w18, [x2, w1, uxtw #1]
   14a44:	strh	w18, [x3, w1, uxtw #1]
   14a48:	add	w1, w1, #0x1
   14a4c:	cmp	w1, w10
   14a50:	b.ls	14a38 <lzma_mode_is_supported@@XZ_5.0+0x5568>  // b.plast
   14a54:	strh	w18, [x14, x11, lsl #1]
   14a58:	strh	w18, [x15, x11, lsl #1]
   14a5c:	strh	w18, [x16, x11, lsl #1]
   14a60:	strh	w18, [x17, x11, lsl #1]
   14a64:	add	x11, x11, #0x1
   14a68:	cmp	x11, #0xc
   14a6c:	b.ne	14a34 <lzma_mode_is_supported@@XZ_5.0+0x5564>  // b.any
   14a70:	mov	w11, #0x6360                	// #25440
   14a74:	mov	x10, xzr
   14a78:	add	x11, x0, x11
   14a7c:	movi	v0.8h, #0x4, lsl #8
   14a80:	mov	x12, xzr
   14a84:	str	q0, [x11, x12]
   14a88:	add	x12, x12, #0x10
   14a8c:	cmp	x12, #0x80
   14a90:	b.ne	14a84 <lzma_mode_is_supported@@XZ_5.0+0x55b4>  // b.any
   14a94:	add	x10, x10, #0x1
   14a98:	cmp	x10, #0x4
   14a9c:	add	x11, x11, #0x80
   14aa0:	b.ne	14a80 <lzma_mode_is_supported@@XZ_5.0+0x55b0>  // b.any
   14aa4:	mov	w11, #0x6560                	// #25952
   14aa8:	mov	x10, xzr
   14aac:	add	x11, x0, x11
   14ab0:	mov	w12, #0x400                 	// #1024
   14ab4:	strh	w12, [x11, x10]
   14ab8:	add	x10, x10, #0x2
   14abc:	cmp	x10, #0xe4
   14ac0:	b.ne	14ab4 <lzma_mode_is_supported@@XZ_5.0+0x55e4>  // b.any
   14ac4:	mov	w10, #0x4000400             	// #67109888
   14ac8:	mov	w11, #0x6668                	// #26216
   14acc:	mov	w12, #0x6768                	// #26472
   14ad0:	mov	w13, #0x6a6c                	// #27244
   14ad4:	mov	w14, #0x6b6c                	// #27500
   14ad8:	movi	v0.8h, #0x4, lsl #8
   14adc:	str	w10, [x8, #32]
   14ae0:	str	w10, [x8, #1060]
   14ae4:	add	x10, x0, x11
   14ae8:	add	x11, x0, x12
   14aec:	add	x12, x0, x13
   14af0:	add	x13, x0, x14
   14af4:	mov	w14, #0x1                   	// #1
   14af8:	stp	q0, q0, [x8]
   14afc:	sub	w15, w14, #0x1
   14b00:	lsr	w16, w14, w9
   14b04:	add	w14, w14, #0x1
   14b08:	str	q0, [x10, w15, uxtw #4]
   14b0c:	str	q0, [x11, w15, uxtw #4]
   14b10:	str	q0, [x12, w15, uxtw #4]
   14b14:	str	q0, [x13, w15, uxtw #4]
   14b18:	cbz	w16, 14afc <lzma_mode_is_supported@@XZ_5.0+0x562c>
   14b1c:	mov	w10, #0x6868                	// #26728
   14b20:	mov	x9, xzr
   14b24:	add	x10, x0, x10
   14b28:	movi	v0.8h, #0x4, lsl #8
   14b2c:	str	q0, [x10, x9]
   14b30:	add	x9, x9, #0x10
   14b34:	cmp	x9, #0x200
   14b38:	b.ne	14b2c <lzma_mode_is_supported@@XZ_5.0+0x565c>  // b.any
   14b3c:	mov	w10, #0x6c6c                	// #27756
   14b40:	mov	x9, xzr
   14b44:	add	x10, x0, x10
   14b48:	movi	v0.8h, #0x4, lsl #8
   14b4c:	str	q0, [x10, x9]
   14b50:	add	x9, x9, #0x10
   14b54:	cmp	x9, #0x200
   14b58:	b.ne	14b4c <lzma_mode_is_supported@@XZ_5.0+0x567c>  // b.any
   14b5c:	mov	w9, #0x1                   	// #1
   14b60:	mov	w10, #0x6ea8                	// #28328
   14b64:	movi	v0.2d, #0x0
   14b68:	str	w9, [x8, #2140]
   14b6c:	add	x8, x0, x10
   14b70:	str	xzr, [x8, #16]
   14b74:	str	q0, [x8]
   14b78:	ret
   14b7c:	str	x1, [x0, #28312]
   14b80:	ret
   14b84:	adrp	x3, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4b30>
   14b88:	add	x3, x3, #0xb90
   14b8c:	b	e124 <lzma_mf_is_supported@@XZ_5.0+0x1154>
   14b90:	stp	x29, x30, [sp, #-32]!
   14b94:	stp	x20, x19, [sp, #16]
   14b98:	ldr	w8, [x2, #20]
   14b9c:	mov	x29, sp
   14ba0:	cmp	w8, #0x4
   14ba4:	b.hi	14c08 <lzma_mode_is_supported@@XZ_5.0+0x5738>  // b.pmore
   14ba8:	ldr	w9, [x2, #24]
   14bac:	mov	x19, x2
   14bb0:	mov	x20, x0
   14bb4:	mov	w0, #0xb                   	// #11
   14bb8:	cmp	w9, #0x4
   14bbc:	b.hi	14c0c <lzma_mode_is_supported@@XZ_5.0+0x573c>  // b.pmore
   14bc0:	add	w8, w9, w8
   14bc4:	cmp	w8, #0x4
   14bc8:	b.hi	14c0c <lzma_mode_is_supported@@XZ_5.0+0x573c>  // b.pmore
   14bcc:	ldr	w8, [x19, #28]
   14bd0:	cmp	w8, #0x4
   14bd4:	b.hi	14c08 <lzma_mode_is_supported@@XZ_5.0+0x5738>  // b.pmore
   14bd8:	mov	x0, x20
   14bdc:	mov	x2, x19
   14be0:	bl	11ab0 <lzma_mode_is_supported@@XZ_5.0+0x25e0>
   14be4:	cbnz	w0, 14c0c <lzma_mode_is_supported@@XZ_5.0+0x573c>
   14be8:	ldr	x0, [x20]
   14bec:	mov	x1, x19
   14bf0:	bl	1496c <lzma_mode_is_supported@@XZ_5.0+0x549c>
   14bf4:	ldr	x8, [x20]
   14bf8:	mov	w0, wzr
   14bfc:	mov	x9, #0xffffffffffffffff    	// #-1
   14c00:	str	x9, [x8, #28312]
   14c04:	b	14c0c <lzma_mode_is_supported@@XZ_5.0+0x573c>
   14c08:	mov	w0, #0xb                   	// #11
   14c0c:	ldp	x20, x19, [sp, #16]
   14c10:	ldp	x29, x30, [sp], #32
   14c14:	ret
   14c18:	and	w8, w1, #0xff
   14c1c:	cmp	w8, #0xe0
   14c20:	b.ls	14c2c <lzma_mode_is_supported@@XZ_5.0+0x575c>  // b.plast
   14c24:	mov	w0, #0x1                   	// #1
   14c28:	ret
   14c2c:	mov	w9, #0xc16d                	// #49517
   14c30:	movk	w9, #0x6c16, lsl #16
   14c34:	umull	x9, w8, w9
   14c38:	lsr	x9, x9, #32
   14c3c:	sub	w8, w8, w9
   14c40:	add	w8, w9, w8, lsr #1
   14c44:	mov	w9, #0xffffffd3            	// #-45
   14c48:	lsr	w8, w8, #5
   14c4c:	madd	w9, w8, w9, w1
   14c50:	mov	w10, #0x8e39                	// #36409
   14c54:	movk	w10, #0x38e3, lsl #16
   14c58:	str	w8, [x0, #28]
   14c5c:	and	w8, w9, #0xff
   14c60:	umull	x9, w8, w10
   14c64:	lsr	x9, x9, #33
   14c68:	add	w10, w9, w9, lsl #3
   14c6c:	sub	w8, w8, w10
   14c70:	stp	w8, w9, [x0, #20]
   14c74:	add	w8, w8, w9
   14c78:	cmp	w8, #0x4
   14c7c:	cset	w0, hi  // hi = pmore
   14c80:	ret
   14c84:	stp	x29, x30, [sp, #-16]!
   14c88:	ldr	w0, [x0]
   14c8c:	mov	x29, sp
   14c90:	bl	e4ac <lzma_mf_is_supported@@XZ_5.0+0x14dc>
   14c94:	mov	w8, #0x6ec0                	// #28352
   14c98:	add	x0, x0, x8
   14c9c:	ldp	x29, x30, [sp], #16
   14ca0:	ret
   14ca4:	stp	x29, x30, [sp, #-16]!
   14ca8:	ldr	w9, [x0, #20]
   14cac:	mov	x29, sp
   14cb0:	cmp	w9, #0x4
   14cb4:	b.hi	14cf8 <lzma_mode_is_supported@@XZ_5.0+0x5828>  // b.pmore
   14cb8:	ldr	w10, [x0, #24]
   14cbc:	mov	x8, x0
   14cc0:	mov	x0, #0xffffffffffffffff    	// #-1
   14cc4:	cmp	w10, #0x4
   14cc8:	b.hi	14cfc <lzma_mode_is_supported@@XZ_5.0+0x582c>  // b.pmore
   14ccc:	add	w9, w10, w9
   14cd0:	cmp	w9, #0x4
   14cd4:	b.hi	14cfc <lzma_mode_is_supported@@XZ_5.0+0x582c>  // b.pmore
   14cd8:	ldr	w9, [x8, #28]
   14cdc:	cmp	w9, #0x4
   14ce0:	b.hi	14cf8 <lzma_mode_is_supported@@XZ_5.0+0x5828>  // b.pmore
   14ce4:	ldr	w0, [x8]
   14ce8:	bl	e4ac <lzma_mf_is_supported@@XZ_5.0+0x14dc>
   14cec:	mov	w8, #0x6ec0                	// #28352
   14cf0:	add	x0, x0, x8
   14cf4:	b	14cfc <lzma_mode_is_supported@@XZ_5.0+0x582c>
   14cf8:	mov	x0, #0xffffffffffffffff    	// #-1
   14cfc:	ldp	x29, x30, [sp], #16
   14d00:	ret
   14d04:	stp	x29, x30, [sp, #-48]!
   14d08:	cmp	x3, #0x5
   14d0c:	str	x21, [sp, #16]
   14d10:	stp	x20, x19, [sp, #32]
   14d14:	mov	x29, sp
   14d18:	b.ne	14d9c <lzma_mode_is_supported@@XZ_5.0+0x58cc>  // b.any
   14d1c:	mov	x19, x0
   14d20:	mov	w0, #0x70                  	// #112
   14d24:	mov	x21, x2
   14d28:	mov	x20, x1
   14d2c:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   14d30:	cbz	x0, 14da4 <lzma_mode_is_supported@@XZ_5.0+0x58d4>
   14d34:	ldrb	w8, [x21]
   14d38:	cmp	w8, #0xe0
   14d3c:	b.hi	14d94 <lzma_mode_is_supported@@XZ_5.0+0x58c4>  // b.pmore
   14d40:	mov	w9, #0xc16d                	// #49517
   14d44:	movk	w9, #0x6c16, lsl #16
   14d48:	umull	x9, w8, w9
   14d4c:	lsr	x9, x9, #32
   14d50:	sub	w10, w8, w9
   14d54:	add	w9, w9, w10, lsr #1
   14d58:	mov	w10, #0xffffffd3            	// #-45
   14d5c:	lsr	w9, w9, #5
   14d60:	madd	w8, w9, w10, w8
   14d64:	mov	w10, #0x8e39                	// #36409
   14d68:	movk	w10, #0x38e3, lsl #16
   14d6c:	and	w8, w8, #0xff
   14d70:	str	w9, [x0, #28]
   14d74:	umull	x9, w8, w10
   14d78:	lsr	x9, x9, #33
   14d7c:	add	w10, w9, w9, lsl #3
   14d80:	sub	w8, w8, w10
   14d84:	add	w10, w8, w9
   14d88:	cmp	w10, #0x4
   14d8c:	stp	w8, w9, [x0, #20]
   14d90:	b.ls	14dac <lzma_mode_is_supported@@XZ_5.0+0x58dc>  // b.plast
   14d94:	mov	x1, x20
   14d98:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
   14d9c:	mov	w8, #0x8                   	// #8
   14da0:	b	14dc4 <lzma_mode_is_supported@@XZ_5.0+0x58f4>
   14da4:	mov	w8, #0x5                   	// #5
   14da8:	b	14dc4 <lzma_mode_is_supported@@XZ_5.0+0x58f4>
   14dac:	ldur	w9, [x21, #1]
   14db0:	mov	w8, wzr
   14db4:	str	xzr, [x0, #8]
   14db8:	str	wzr, [x0, #16]
   14dbc:	str	w9, [x0]
   14dc0:	str	x0, [x19]
   14dc4:	ldp	x20, x19, [sp, #32]
   14dc8:	ldr	x21, [sp, #16]
   14dcc:	mov	w0, w8
   14dd0:	ldp	x29, x30, [sp], #48
   14dd4:	ret
   14dd8:	adrp	x3, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4b30>
   14ddc:	add	x3, x3, #0xde4
   14de0:	b	cb0c <lzma_crc64@@XZ_5.0+0x133c>
   14de4:	stp	x29, x30, [sp, #-64]!
   14de8:	str	x23, [sp, #16]
   14dec:	stp	x22, x21, [sp, #32]
   14df0:	stp	x20, x19, [sp, #48]
   14df4:	mov	x29, sp
   14df8:	cbz	x2, 14ec4 <lzma_mode_is_supported@@XZ_5.0+0x59f4>
   14dfc:	ldr	x21, [x0]
   14e00:	mov	x19, x3
   14e04:	mov	x22, x2
   14e08:	mov	x20, x1
   14e0c:	mov	x23, x0
   14e10:	cbnz	x21, 14e50 <lzma_mode_is_supported@@XZ_5.0+0x5980>
   14e14:	mov	w0, #0xa8                  	// #168
   14e18:	movk	w0, #0x1, lsl #16
   14e1c:	mov	x1, x20
   14e20:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   14e24:	cbz	x0, 14ecc <lzma_mode_is_supported@@XZ_5.0+0x59fc>
   14e28:	adrp	x8, 14000 <lzma_mode_is_supported@@XZ_5.0+0x4b30>
   14e2c:	adrp	x9, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   14e30:	adrp	x10, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   14e34:	mov	x21, x0
   14e38:	add	x8, x8, #0xfd0
   14e3c:	add	x9, x9, #0x358
   14e40:	add	x10, x10, #0x388
   14e44:	stp	x0, x8, [x23]
   14e48:	stp	x9, x10, [x23, #16]
   14e4c:	str	xzr, [x0, #8]
   14e50:	add	x23, x21, #0x10
   14e54:	mov	w2, #0x70                  	// #112
   14e58:	mov	x0, x23
   14e5c:	mov	x1, x22
   14e60:	bl	3060 <memcpy@plt>
   14e64:	ldr	x9, [x21, #24]
   14e68:	mov	w8, #0x1                   	// #1
   14e6c:	str	wzr, [x21]
   14e70:	strh	w8, [x21, #128]
   14e74:	cbz	x9, 14e84 <lzma_mode_is_supported@@XZ_5.0+0x59b4>
   14e78:	ldr	w8, [x21, #32]
   14e7c:	cmp	w8, #0x0
   14e80:	cset	w8, eq  // eq = none
   14e84:	add	x0, x21, #0x8
   14e88:	mov	x1, x20
   14e8c:	mov	x2, x23
   14e90:	mov	x3, x19
   14e94:	strb	w8, [x21, #130]
   14e98:	bl	f23c <lzma_lzma_preset@@XZ_5.0+0xc64>
   14e9c:	cbnz	w0, 14ed0 <lzma_mode_is_supported@@XZ_5.0+0x5a00>
   14ea0:	ldp	x9, x8, [x19]
   14ea4:	mov	w0, wzr
   14ea8:	add	x9, x8, x9
   14eac:	lsr	x9, x9, #16
   14eb0:	cbnz	x9, 14ed0 <lzma_mode_is_supported@@XZ_5.0+0x5a00>
   14eb4:	mov	w9, #0x10000               	// #65536
   14eb8:	sub	x8, x9, x8
   14ebc:	str	x8, [x19]
   14ec0:	b	14ed0 <lzma_mode_is_supported@@XZ_5.0+0x5a00>
   14ec4:	mov	w0, #0xb                   	// #11
   14ec8:	b	14ed0 <lzma_mode_is_supported@@XZ_5.0+0x5a00>
   14ecc:	mov	w0, #0x5                   	// #5
   14ed0:	ldp	x20, x19, [sp, #48]
   14ed4:	ldp	x22, x21, [sp, #32]
   14ed8:	ldr	x23, [sp, #16]
   14edc:	ldp	x29, x30, [sp], #64
   14ee0:	ret
   14ee4:	stp	x29, x30, [sp, #-16]!
   14ee8:	mov	x29, sp
   14eec:	bl	f384 <lzma_lzma_preset@@XZ_5.0+0xdac>
   14ef0:	mov	w8, #0xa8                  	// #168
   14ef4:	movk	w8, #0x1, lsl #16
   14ef8:	add	x8, x0, x8
   14efc:	cmn	x0, #0x1
   14f00:	csinv	x0, x8, xzr, ne  // ne = any
   14f04:	ldp	x29, x30, [sp], #16
   14f08:	ret
   14f0c:	ldr	w8, [x0]
   14f10:	sub	w9, w8, #0x1
   14f14:	cmp	w8, #0x1, lsl #12
   14f18:	mov	w8, #0xfff                 	// #4095
   14f1c:	csel	w8, w9, w8, hi  // hi = pmore
   14f20:	orr	w8, w8, w8, lsr #2
   14f24:	orr	w8, w8, w8, lsr #3
   14f28:	orr	w8, w8, w8, lsr #4
   14f2c:	orr	w8, w8, w8, lsr #8
   14f30:	orr	w8, w8, w8, lsr #16
   14f34:	cmn	w8, #0x1
   14f38:	b.eq	14f60 <lzma_mode_is_supported@@XZ_5.0+0x5a90>  // b.none
   14f3c:	mov	w9, w8
   14f40:	mov	w10, #0x1ffe                	// #8190
   14f44:	cmp	w8, w10
   14f48:	add	x9, x9, #0x1
   14f4c:	b.hi	14f68 <lzma_mode_is_supported@@XZ_5.0+0x5a98>  // b.pmore
   14f50:	adrp	x8, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   14f54:	ldr	x8, [x8, #4008]
   14f58:	ldrb	w8, [x8, x9]
   14f5c:	b	14fa8 <lzma_mode_is_supported@@XZ_5.0+0x5ad8>
   14f60:	mov	w8, #0x28                  	// #40
   14f64:	b	14fac <lzma_mode_is_supported@@XZ_5.0+0x5adc>
   14f68:	mov	w10, #0x1fffffe             	// #33554430
   14f6c:	cmp	w8, w10
   14f70:	b.hi	14f90 <lzma_mode_is_supported@@XZ_5.0+0x5ac0>  // b.pmore
   14f74:	mov	w8, w9
   14f78:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   14f7c:	ldr	x9, [x9, #4008]
   14f80:	lsr	x8, x8, #12
   14f84:	ldrb	w8, [x9, x8]
   14f88:	add	w8, w8, #0x18
   14f8c:	b	14fa8 <lzma_mode_is_supported@@XZ_5.0+0x5ad8>
   14f90:	mov	w8, w9
   14f94:	adrp	x9, 2d000 <lzma_mode_is_supported@@XZ_5.0+0x1db30>
   14f98:	ldr	x9, [x9, #4008]
   14f9c:	lsr	x8, x8, #24
   14fa0:	ldrb	w8, [x9, x8]
   14fa4:	add	w8, w8, #0x30
   14fa8:	sub	w8, w8, #0x18
   14fac:	mov	w0, wzr
   14fb0:	strb	w8, [x1]
   14fb4:	ret
   14fb8:	ldr	w8, [x0]
   14fbc:	mov	w9, #0x100000              	// #1048576
   14fc0:	add	x8, x8, x8, lsl #1
   14fc4:	cmp	x8, #0x100, lsl #12
   14fc8:	csel	x0, x8, x9, hi  // hi = pmore
   14fcc:	ret
   14fd0:	sub	sp, sp, #0x90
   14fd4:	stp	x24, x23, [sp, #96]
   14fd8:	ldr	x24, [x3]
   14fdc:	stp	x29, x30, [sp, #48]
   14fe0:	add	x29, sp, #0x30
   14fe4:	stp	x28, x27, [sp, #64]
   14fe8:	cmp	x24, x4
   14fec:	stp	x26, x25, [sp, #80]
   14ff0:	stp	x22, x21, [sp, #112]
   14ff4:	stp	x20, x19, [sp, #128]
   14ff8:	stur	x2, [x29, #-8]
   14ffc:	b.cs	1530c <lzma_mode_is_supported@@XZ_5.0+0x5e3c>  // b.hs, b.nlast
   15000:	add	x8, x0, #0x98
   15004:	str	x8, [sp, #16]
   15008:	add	x8, x0, #0x88
   1500c:	stur	x8, [x29, #-16]
   15010:	add	x8, x0, #0x10
   15014:	str	x8, [sp]
   15018:	mov	x9, x0
   1501c:	ldr	w8, [x9], #166
   15020:	ldur	x27, [x29, #-16]
   15024:	adrp	x25, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   15028:	mov	x26, x4
   1502c:	mov	x20, x3
   15030:	mov	x22, x1
   15034:	mov	x23, x0
   15038:	add	x19, x0, #0xa0
   1503c:	add	x21, x0, #0x90
   15040:	add	x25, x25, #0xcf8
   15044:	str	x9, [sp, #8]
   15048:	str	x4, [sp, #24]
   1504c:	cmp	w8, #0x4
   15050:	b.hi	15300 <lzma_mode_is_supported@@XZ_5.0+0x5e30>  // b.pmore
   15054:	mov	w8, w8
   15058:	adr	x9, 15068 <lzma_mode_is_supported@@XZ_5.0+0x5b98>
   1505c:	ldrb	w10, [x25, x8]
   15060:	add	x9, x9, x10, lsl #2
   15064:	br	x9
   15068:	ldr	w8, [x22, #36]
   1506c:	ldp	w9, w10, [x22, #24]
   15070:	sub	w8, w8, w9
   15074:	cmn	w8, w10
   15078:	b.eq	15330 <lzma_mode_is_supported@@XZ_5.0+0x5e60>  // b.none
   1507c:	ldrb	w8, [x23, #129]
   15080:	cbz	w8, 15094 <lzma_mode_is_supported@@XZ_5.0+0x5bc4>
   15084:	ldr	x0, [x23, #8]
   15088:	ldr	x1, [sp]
   1508c:	bl	ef68 <lzma_lzma_preset@@XZ_5.0+0x990>
   15090:	cbnz	w0, 15310 <lzma_mode_is_supported@@XZ_5.0+0x5e40>
   15094:	ldur	x9, [x29, #-16]
   15098:	mov	x8, xzr
   1509c:	stp	xzr, xzr, [x9]
   150a0:	mov	w9, #0x1                   	// #1
   150a4:	str	w9, [x23]
   150a8:	b	150b4 <lzma_mode_is_supported@@XZ_5.0+0x5be4>
   150ac:	ldur	x8, [x29, #-16]
   150b0:	ldr	x8, [x8]
   150b4:	mov	w9, #0x200000              	// #2097152
   150b8:	sub	w8, w9, w8
   150bc:	ldr	w9, [x22, #100]
   150c0:	ldp	w24, w26, [x22, #24]
   150c4:	ldr	x0, [x23, #8]
   150c8:	ldr	x2, [sp, #8]
   150cc:	subs	w10, w8, w9
   150d0:	add	w10, w10, w24
   150d4:	sub	w10, w10, w26
   150d8:	cmp	w8, w9
   150dc:	csel	w5, wzr, w10, cc  // cc = lo, ul, last
   150e0:	mov	w4, #0x10000               	// #65536
   150e4:	mov	x1, x22
   150e8:	mov	x3, x21
   150ec:	bl	e6e8 <lzma_lzma_preset@@XZ_5.0+0x110>
   150f0:	ldp	w8, w9, [x22, #24]
   150f4:	ldr	x10, [x23, #136]
   150f8:	sub	w11, w26, w24
   150fc:	cmp	w0, #0x1
   15100:	add	w8, w11, w8
   15104:	sub	w8, w8, w9
   15108:	add	x10, x10, x8
   1510c:	str	x10, [x23, #136]
   15110:	b.ne	1530c <lzma_mode_is_supported@@XZ_5.0+0x5e3c>  // b.any
   15114:	ldr	x8, [x21]
   15118:	cmp	x8, x10
   1511c:	b.cs	151e0 <lzma_mode_is_supported@@XZ_5.0+0x5d10>  // b.hs, b.nlast
   15120:	ldrb	w9, [x23, #128]
   15124:	cbz	w9, 15228 <lzma_mode_is_supported@@XZ_5.0+0x5d58>
   15128:	ldrb	w11, [x23, #130]
   1512c:	cbz	w11, 15238 <lzma_mode_is_supported@@XZ_5.0+0x5d68>
   15130:	mov	x11, xzr
   15134:	mov	w12, #0xe0                  	// #224
   15138:	b	15240 <lzma_mode_is_supported@@XZ_5.0+0x5d70>
   1513c:	ldr	x2, [x21]
   15140:	b	152c8 <lzma_mode_is_supported@@XZ_5.0+0x5df8>
   15144:	ldr	x24, [sp, #16]
   15148:	ldur	x3, [x29, #-8]
   1514c:	mov	w2, #0x3                   	// #3
   15150:	mov	x0, x19
   15154:	mov	x1, x24
   15158:	mov	x4, x20
   1515c:	mov	x5, x26
   15160:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
   15164:	ldr	x8, [x24]
   15168:	cmp	x8, #0x3
   1516c:	b.ne	1530c <lzma_mode_is_supported@@XZ_5.0+0x5e3c>  // b.any
   15170:	mov	w8, #0x4                   	// #4
   15174:	str	w8, [x23]
   15178:	ldr	x24, [x20]
   1517c:	mov	x28, x25
   15180:	mov	x25, x19
   15184:	ldr	x19, [x27]
   15188:	ldr	x8, [x22]
   1518c:	ldr	w9, [x22, #24]
   15190:	ldur	x11, [x29, #-8]
   15194:	sub	x10, x26, x24
   15198:	cmp	x10, x19
   1519c:	add	x8, x8, x9
   151a0:	csel	x26, x10, x19, cc  // cc = lo, ul, last
   151a4:	add	x0, x11, x24
   151a8:	sub	x1, x8, x19
   151ac:	mov	x2, x26
   151b0:	bl	3060 <memcpy@plt>
   151b4:	add	x9, x26, x24
   151b8:	subs	x10, x19, x26
   151bc:	ldr	x26, [sp, #24]
   151c0:	mov	w8, wzr
   151c4:	mov	w0, wzr
   151c8:	mov	x19, x25
   151cc:	mov	x25, x28
   151d0:	str	x9, [x20]
   151d4:	str	x10, [x27]
   151d8:	b.eq	152fc <lzma_mode_is_supported@@XZ_5.0+0x5e2c>  // b.none
   151dc:	b	15310 <lzma_mode_is_supported@@XZ_5.0+0x5e40>
   151e0:	add	x8, x10, x9
   151e4:	str	x8, [x23, #136]
   151e8:	str	wzr, [x22, #28]
   151ec:	ldrb	w9, [x23, #130]
   151f0:	ldr	x26, [sp, #24]
   151f4:	sub	w8, w8, #0x1
   151f8:	mov	w11, #0x1                   	// #1
   151fc:	cmp	w9, #0x0
   15200:	lsr	w10, w8, #8
   15204:	strb	w8, [x23, #162]
   15208:	cinc	w8, w11, eq  // eq = none
   1520c:	str	xzr, [x23, #152]
   15210:	strb	w11, [x23, #129]
   15214:	strb	wzr, [x23, #130]
   15218:	strb	w10, [x23, #161]
   1521c:	strb	w8, [x23, #160]
   15220:	mov	w8, #0x3                   	// #3
   15224:	b	152fc <lzma_mode_is_supported@@XZ_5.0+0x5e2c>
   15228:	ldrb	w11, [x23, #129]
   1522c:	cbz	w11, 15248 <lzma_mode_is_supported@@XZ_5.0+0x5d78>
   15230:	mov	w11, #0xa0                  	// #160
   15234:	b	1524c <lzma_mode_is_supported@@XZ_5.0+0x5d7c>
   15238:	mov	x11, xzr
   1523c:	mov	w12, #0xc0                  	// #192
   15240:	strb	w12, [x19]
   15244:	b	15254 <lzma_mode_is_supported@@XZ_5.0+0x5d84>
   15248:	mov	w11, #0x80                  	// #128
   1524c:	strb	w11, [x23, #161]
   15250:	mov	w11, #0x1                   	// #1
   15254:	add	x13, x23, #0xa0
   15258:	str	x11, [x23, #152]
   1525c:	add	x14, x13, x11
   15260:	ldrb	w15, [x14]
   15264:	sub	x12, x10, #0x1
   15268:	ldr	x26, [sp, #24]
   1526c:	lsr	x10, x12, #8
   15270:	strb	w10, [x14, #1]
   15274:	orr	x10, x11, #0x2
   15278:	add	w11, w15, w12, lsr #16
   1527c:	strb	w11, [x14]
   15280:	sub	x11, x8, #0x1
   15284:	add	x13, x13, x10
   15288:	lsr	x14, x11, #8
   1528c:	strb	w12, [x13]
   15290:	strb	w14, [x13, #1]
   15294:	strb	w11, [x13, #2]
   15298:	cbz	w9, 152b0 <lzma_mode_is_supported@@XZ_5.0+0x5de0>
   1529c:	ldr	x0, [sp]
   152a0:	add	x8, x10, x23
   152a4:	add	x1, x8, #0xa3
   152a8:	bl	f410 <lzma_lzma_preset@@XZ_5.0+0xe38>
   152ac:	ldr	x8, [x23, #144]
   152b0:	add	x2, x8, #0x6
   152b4:	mov	w8, #0x2                   	// #2
   152b8:	strh	wzr, [x23, #128]
   152bc:	strb	wzr, [x23, #130]
   152c0:	str	x2, [x23, #144]
   152c4:	str	w8, [x23]
   152c8:	ldr	x24, [sp, #16]
   152cc:	ldur	x3, [x29, #-8]
   152d0:	mov	x0, x19
   152d4:	mov	x4, x20
   152d8:	mov	x1, x24
   152dc:	mov	x5, x26
   152e0:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
   152e4:	ldr	x9, [x24]
   152e8:	ldr	x10, [x21]
   152ec:	mov	w8, wzr
   152f0:	mov	w0, wzr
   152f4:	cmp	x9, x10
   152f8:	b.ne	15310 <lzma_mode_is_supported@@XZ_5.0+0x5e40>  // b.any
   152fc:	str	w8, [x23]
   15300:	ldr	x24, [x20]
   15304:	cmp	x24, x26
   15308:	b.cc	1504c <lzma_mode_is_supported@@XZ_5.0+0x5b7c>  // b.lo, b.ul, b.last
   1530c:	mov	w0, wzr
   15310:	ldp	x20, x19, [sp, #128]
   15314:	ldp	x22, x21, [sp, #112]
   15318:	ldp	x24, x23, [sp, #96]
   1531c:	ldp	x26, x25, [sp, #80]
   15320:	ldp	x28, x27, [sp, #64]
   15324:	ldp	x29, x30, [sp, #48]
   15328:	add	sp, sp, #0x90
   1532c:	ret
   15330:	ldr	w8, [x22, #104]
   15334:	cmp	w8, #0x3
   15338:	b.ne	1534c <lzma_mode_is_supported@@XZ_5.0+0x5e7c>  // b.any
   1533c:	add	x9, x24, #0x1
   15340:	str	x9, [x20]
   15344:	ldur	x9, [x29, #-8]
   15348:	strb	wzr, [x9, x24]
   1534c:	cmp	w8, #0x0
   15350:	cset	w0, ne  // ne = any
   15354:	b	15310 <lzma_mode_is_supported@@XZ_5.0+0x5e40>
   15358:	stp	x29, x30, [sp, #-32]!
   1535c:	stp	x20, x19, [sp, #16]
   15360:	mov	x19, x0
   15364:	ldr	x0, [x0, #8]
   15368:	mov	x29, sp
   1536c:	mov	x20, x1
   15370:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
   15374:	mov	x0, x19
   15378:	mov	x1, x20
   1537c:	ldp	x20, x19, [sp, #16]
   15380:	ldp	x29, x30, [sp], #32
   15384:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
   15388:	ldr	x9, [x1, #8]
   1538c:	cbz	x9, 15398 <lzma_mode_is_supported@@XZ_5.0+0x5ec8>
   15390:	ldr	w8, [x0]
   15394:	cbz	w8, 153a4 <lzma_mode_is_supported@@XZ_5.0+0x5ed4>
   15398:	mov	w8, #0xb                   	// #11
   1539c:	mov	w0, w8
   153a0:	ret
   153a4:	ldr	w8, [x0, #36]
   153a8:	ldr	w10, [x9, #20]
   153ac:	cmp	w8, w10
   153b0:	b.ne	153dc <lzma_mode_is_supported@@XZ_5.0+0x5f0c>  // b.any
   153b4:	ldr	w8, [x0, #40]
   153b8:	ldr	w11, [x9, #24]
   153bc:	cmp	w8, w11
   153c0:	b.ne	153dc <lzma_mode_is_supported@@XZ_5.0+0x5f0c>  // b.any
   153c4:	ldr	w8, [x0, #44]
   153c8:	ldr	w11, [x9, #28]
   153cc:	cmp	w8, w11
   153d0:	b.ne	153dc <lzma_mode_is_supported@@XZ_5.0+0x5f0c>  // b.any
   153d4:	mov	w8, wzr
   153d8:	b	1539c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>
   153dc:	cmp	w10, #0x4
   153e0:	b.ls	153ec <lzma_mode_is_supported@@XZ_5.0+0x5f1c>  // b.plast
   153e4:	mov	w8, #0x8                   	// #8
   153e8:	b	1539c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>
   153ec:	ldr	w11, [x9, #24]
   153f0:	mov	w8, #0x8                   	// #8
   153f4:	cmp	w11, #0x4
   153f8:	b.hi	1539c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>  // b.pmore
   153fc:	add	w12, w11, w10
   15400:	cmp	w12, #0x4
   15404:	b.hi	1539c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>  // b.pmore
   15408:	ldr	w9, [x9, #28]
   1540c:	cmp	w9, #0x4
   15410:	b.hi	153e4 <lzma_mode_is_supported@@XZ_5.0+0x5f14>  // b.pmore
   15414:	mov	w8, wzr
   15418:	str	w9, [x0, #44]
   1541c:	mov	w9, #0x101                 	// #257
   15420:	stp	w10, w11, [x0, #36]
   15424:	strh	w9, [x0, #128]
   15428:	b	1539c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>
   1542c:	adrp	x3, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   15430:	add	x3, x3, #0x438
   15434:	b	e124 <lzma_mf_is_supported@@XZ_5.0+0x1154>
   15438:	stp	x29, x30, [sp, #-48]!
   1543c:	stp	x22, x21, [sp, #16]
   15440:	stp	x20, x19, [sp, #32]
   15444:	mov	x22, x0
   15448:	ldr	x0, [x0]
   1544c:	mov	x19, x3
   15450:	mov	x20, x2
   15454:	mov	x21, x1
   15458:	mov	x29, sp
   1545c:	cbnz	x0, 15498 <lzma_mode_is_supported@@XZ_5.0+0x5fc8>
   15460:	mov	w0, #0xb8                  	// #184
   15464:	mov	x1, x21
   15468:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   1546c:	cbz	x0, 154e0 <lzma_mode_is_supported@@XZ_5.0+0x6010>
   15470:	adrp	x8, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   15474:	adrp	x9, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   15478:	add	x8, x8, #0x59c
   1547c:	add	x9, x9, #0x87c
   15480:	movi	v0.2d, #0x0
   15484:	stp	x0, x8, [x22]
   15488:	str	x9, [x22, #32]
   1548c:	str	xzr, [x0, #40]
   15490:	stur	q0, [x0, #24]
   15494:	stur	q0, [x0, #8]
   15498:	mov	w9, #0x1                   	// #1
   1549c:	str	wzr, [x0]
   154a0:	strb	w9, [x0, #64]
   154a4:	ldr	x8, [x20, #8]
   154a8:	cbz	x8, 154b8 <lzma_mode_is_supported@@XZ_5.0+0x5fe8>
   154ac:	ldr	w8, [x20, #16]
   154b0:	cmp	w8, #0x0
   154b4:	cset	w9, eq  // eq = none
   154b8:	strb	w9, [x0, #65]
   154bc:	mov	x1, x21
   154c0:	mov	x2, x20
   154c4:	mov	x3, x19
   154c8:	ldp	x20, x19, [sp, #32]
   154cc:	ldp	x22, x21, [sp, #16]
   154d0:	add	x8, x0, #0x8
   154d4:	mov	x0, x8
   154d8:	ldp	x29, x30, [sp], #48
   154dc:	b	11ab0 <lzma_mode_is_supported@@XZ_5.0+0x25e0>
   154e0:	ldp	x20, x19, [sp, #32]
   154e4:	ldp	x22, x21, [sp, #16]
   154e8:	mov	w0, #0x5                   	// #5
   154ec:	ldp	x29, x30, [sp], #48
   154f0:	ret
   154f4:	stp	x29, x30, [sp, #-16]!
   154f8:	mov	x29, sp
   154fc:	bl	14c84 <lzma_mode_is_supported@@XZ_5.0+0x57b4>
   15500:	add	x0, x0, #0xb8
   15504:	ldp	x29, x30, [sp], #16
   15508:	ret
   1550c:	stp	x29, x30, [sp, #-32]!
   15510:	cmp	x3, #0x1
   15514:	stp	x20, x19, [sp, #16]
   15518:	mov	x29, sp
   1551c:	b.ne	15530 <lzma_mode_is_supported@@XZ_5.0+0x6060>  // b.any
   15520:	ldrb	w8, [x2]
   15524:	mov	x20, x2
   15528:	cmp	w8, #0x28
   1552c:	b.ls	15544 <lzma_mode_is_supported@@XZ_5.0+0x6074>  // b.plast
   15530:	mov	w8, #0x8                   	// #8
   15534:	ldp	x20, x19, [sp, #16]
   15538:	mov	w0, w8
   1553c:	ldp	x29, x30, [sp], #32
   15540:	ret
   15544:	mov	x19, x0
   15548:	mov	w0, #0x70                  	// #112
   1554c:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   15550:	cbz	x0, 15568 <lzma_mode_is_supported@@XZ_5.0+0x6098>
   15554:	ldrb	w8, [x20]
   15558:	cmp	w8, #0x28
   1555c:	b.ne	15570 <lzma_mode_is_supported@@XZ_5.0+0x60a0>  // b.any
   15560:	mov	w8, #0xffffffff            	// #-1
   15564:	b	15584 <lzma_mode_is_supported@@XZ_5.0+0x60b4>
   15568:	mov	w8, #0x5                   	// #5
   1556c:	b	15534 <lzma_mode_is_supported@@XZ_5.0+0x6064>
   15570:	mov	w9, #0x2                   	// #2
   15574:	lsr	w10, w8, #1
   15578:	bfxil	w9, w8, #0, #1
   1557c:	add	w8, w10, #0xb
   15580:	lsl	w8, w9, w8
   15584:	str	w8, [x0]
   15588:	mov	w8, wzr
   1558c:	str	xzr, [x0, #8]
   15590:	str	wzr, [x0, #16]
   15594:	str	x0, [x19]
   15598:	b	15534 <lzma_mode_is_supported@@XZ_5.0+0x6064>
   1559c:	str	d8, [sp, #-112]!
   155a0:	adrp	x8, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   155a4:	ldr	d8, [x8, #3328]
   155a8:	stp	x26, x25, [sp, #48]
   155ac:	adrp	x26, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   155b0:	stp	x28, x27, [sp, #32]
   155b4:	stp	x24, x23, [sp, #64]
   155b8:	stp	x22, x21, [sp, #80]
   155bc:	stp	x20, x19, [sp, #96]
   155c0:	mov	x20, x4
   155c4:	mov	x21, x3
   155c8:	mov	x23, x2
   155cc:	mov	x19, x1
   155d0:	mov	x22, x0
   155d4:	add	x24, x1, #0x8
   155d8:	add	x25, x0, #0x48
   155dc:	add	x26, x26, #0xd08
   155e0:	mov	w28, #0x6                   	// #6
   155e4:	stp	x29, x30, [sp, #16]
   155e8:	mov	x29, sp
   155ec:	ldr	x27, [x21]
   155f0:	ldr	w8, [x22]
   155f4:	cmp	x27, x20
   155f8:	b.cs	15644 <lzma_mode_is_supported@@XZ_5.0+0x6174>  // b.hs, b.nlast
   155fc:	cmp	w8, #0x7
   15600:	b.hi	15850 <lzma_mode_is_supported@@XZ_5.0+0x6380>  // b.pmore
   15604:	mov	w8, w8
   15608:	adr	x9, 15618 <lzma_mode_is_supported@@XZ_5.0+0x6148>
   1560c:	ldrb	w10, [x26, x8]
   15610:	add	x9, x9, x10, lsl #2
   15614:	br	x9
   15618:	ldrb	w8, [x23, x27]
   1561c:	add	x9, x27, #0x1
   15620:	str	x9, [x21]
   15624:	cbz	x8, 15874 <lzma_mode_is_supported@@XZ_5.0+0x63a4>
   15628:	cmp	w8, #0xdf
   1562c:	b.hi	157b0 <lzma_mode_is_supported@@XZ_5.0+0x62e0>  // b.pmore
   15630:	cmp	w8, #0x1
   15634:	b.eq	157b0 <lzma_mode_is_supported@@XZ_5.0+0x62e0>  // b.none
   15638:	ldrb	w9, [x22, #65]
   1563c:	cbz	w9, 157bc <lzma_mode_is_supported@@XZ_5.0+0x62ec>
   15640:	b	15840 <lzma_mode_is_supported@@XZ_5.0+0x6370>
   15644:	cmp	w8, #0x6
   15648:	b.ne	15848 <lzma_mode_is_supported@@XZ_5.0+0x6378>  // b.any
   1564c:	ldp	x0, x8, [x22, #8]
   15650:	mov	x1, x19
   15654:	mov	x2, x23
   15658:	mov	x3, x21
   1565c:	mov	x4, x20
   15660:	blr	x8
   15664:	ldr	x8, [x21]
   15668:	ldr	x9, [x22, #56]
   1566c:	sub	x8, x8, x27
   15670:	subs	x8, x9, x8
   15674:	b.cc	15840 <lzma_mode_is_supported@@XZ_5.0+0x6370>  // b.lo, b.ul, b.last
   15678:	cmp	w0, #0x1
   1567c:	str	x8, [x22, #56]
   15680:	b.ne	15854 <lzma_mode_is_supported@@XZ_5.0+0x6384>  // b.any
   15684:	cbnz	x8, 15840 <lzma_mode_is_supported@@XZ_5.0+0x6370>
   15688:	str	wzr, [x22]
   1568c:	b	155ec <lzma_mode_is_supported@@XZ_5.0+0x611c>
   15690:	add	x8, x27, #0x1
   15694:	str	x8, [x21]
   15698:	ldrb	w9, [x23, x27]
   1569c:	ldr	x8, [x22, #48]
   156a0:	add	x8, x8, x9, lsl #8
   156a4:	str	x8, [x22, #48]
   156a8:	mov	w8, #0x2                   	// #2
   156ac:	str	w8, [x22]
   156b0:	b	155ec <lzma_mode_is_supported@@XZ_5.0+0x611c>
   156b4:	add	x8, x27, #0x1
   156b8:	str	x8, [x21]
   156bc:	ldrb	w9, [x23, x27]
   156c0:	ldr	x8, [x22, #48]
   156c4:	ldr	x10, [x22, #32]
   156c8:	ldr	x0, [x22, #8]
   156cc:	add	x8, x9, x8
   156d0:	add	x1, x8, #0x1
   156d4:	mov	w8, #0x3                   	// #3
   156d8:	str	x1, [x22, #48]
   156dc:	str	w8, [x22]
   156e0:	blr	x10
   156e4:	b	155ec <lzma_mode_is_supported@@XZ_5.0+0x611c>
   156e8:	ldrb	w8, [x23, x27]
   156ec:	add	x9, x27, #0x1
   156f0:	str	x9, [x21]
   156f4:	lsl	x8, x8, #8
   156f8:	str	x8, [x22, #56]
   156fc:	mov	w8, #0x4                   	// #4
   15700:	str	w8, [x22]
   15704:	b	155ec <lzma_mode_is_supported@@XZ_5.0+0x611c>
   15708:	add	x8, x27, #0x1
   1570c:	str	x8, [x21]
   15710:	ldrb	w9, [x23, x27]
   15714:	ldr	x8, [x22, #56]
   15718:	ldr	w10, [x22, #4]
   1571c:	add	x8, x9, x8
   15720:	add	x8, x8, #0x1
   15724:	str	x8, [x22, #56]
   15728:	str	w10, [x22]
   1572c:	b	155ec <lzma_mode_is_supported@@XZ_5.0+0x611c>
   15730:	ldrb	w1, [x23, x27]
   15734:	add	x8, x27, #0x1
   15738:	mov	x0, x25
   1573c:	str	x8, [x21]
   15740:	bl	14c18 <lzma_mode_is_supported@@XZ_5.0+0x5748>
   15744:	tbnz	w0, #0, 15840 <lzma_mode_is_supported@@XZ_5.0+0x6370>
   15748:	ldr	x8, [x22, #24]
   1574c:	ldr	x0, [x22, #8]
   15750:	mov	x1, x25
   15754:	blr	x8
   15758:	str	w28, [x22]
   1575c:	b	155ec <lzma_mode_is_supported@@XZ_5.0+0x611c>
   15760:	ldr	x28, [x22, #56]
   15764:	ldr	x3, [x19]
   15768:	ldr	x5, [x19, #24]
   1576c:	sub	x8, x20, x27
   15770:	add	x9, x28, x27
   15774:	cmp	x8, x28
   15778:	csel	x2, x9, x20, hi  // hi = pmore
   1577c:	mov	x0, x23
   15780:	mov	x1, x21
   15784:	mov	x4, x24
   15788:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
   1578c:	sub	x8, x28, x0
   15790:	str	x8, [x22, #56]
   15794:	ldp	x9, x10, [x19, #8]
   15798:	cmp	x9, x10
   1579c:	b.ls	157a4 <lzma_mode_is_supported@@XZ_5.0+0x62d4>  // b.plast
   157a0:	str	x9, [x19, #16]
   157a4:	mov	w28, #0x6                   	// #6
   157a8:	cbz	x8, 15688 <lzma_mode_is_supported@@XZ_5.0+0x61b8>
   157ac:	b	15848 <lzma_mode_is_supported@@XZ_5.0+0x6378>
   157b0:	mov	w9, #0x101                 	// #257
   157b4:	strh	w9, [x22, #64]
   157b8:	mov	w9, #0x1                   	// #1
   157bc:	sxtb	w10, w8
   157c0:	tbnz	w10, #31, 157d4 <lzma_mode_is_supported@@XZ_5.0+0x6304>
   157c4:	cmp	w8, #0x2
   157c8:	b.hi	15840 <lzma_mode_is_supported@@XZ_5.0+0x6370>  // b.pmore
   157cc:	str	d8, [x22]
   157d0:	b	15828 <lzma_mode_is_supported@@XZ_5.0+0x6358>
   157d4:	lsl	w10, w8, #16
   157d8:	and	x10, x10, #0x1f0000
   157dc:	cmp	w8, #0xc0
   157e0:	str	x10, [x22, #48]
   157e4:	mov	w10, #0x1                   	// #1
   157e8:	str	w10, [x22]
   157ec:	b.cc	15800 <lzma_mode_is_supported@@XZ_5.0+0x6330>  // b.lo, b.ul, b.last
   157f0:	mov	w8, #0x5                   	// #5
   157f4:	strb	wzr, [x22, #64]
   157f8:	str	w8, [x22, #4]
   157fc:	b	15828 <lzma_mode_is_supported@@XZ_5.0+0x6358>
   15800:	ldrb	w10, [x22, #64]
   15804:	cbnz	w10, 15840 <lzma_mode_is_supported@@XZ_5.0+0x6370>
   15808:	cmp	w8, #0xa0
   1580c:	str	w28, [x22, #4]
   15810:	b.cc	15828 <lzma_mode_is_supported@@XZ_5.0+0x6358>  // b.lo, b.ul, b.last
   15814:	ldr	x8, [x22, #24]
   15818:	ldr	x0, [x22, #8]
   1581c:	mov	x1, x25
   15820:	blr	x8
   15824:	ldrb	w9, [x22, #65]
   15828:	cbz	w9, 155ec <lzma_mode_is_supported@@XZ_5.0+0x611c>
   1582c:	mov	w0, wzr
   15830:	mov	w8, #0x1                   	// #1
   15834:	strb	wzr, [x22, #65]
   15838:	strb	w8, [x19, #40]
   1583c:	b	15854 <lzma_mode_is_supported@@XZ_5.0+0x6384>
   15840:	mov	w0, #0x9                   	// #9
   15844:	b	15854 <lzma_mode_is_supported@@XZ_5.0+0x6384>
   15848:	mov	w0, wzr
   1584c:	b	15854 <lzma_mode_is_supported@@XZ_5.0+0x6384>
   15850:	mov	w0, #0xb                   	// #11
   15854:	ldp	x20, x19, [sp, #96]
   15858:	ldp	x22, x21, [sp, #80]
   1585c:	ldp	x24, x23, [sp, #64]
   15860:	ldp	x26, x25, [sp, #48]
   15864:	ldp	x28, x27, [sp, #32]
   15868:	ldp	x29, x30, [sp, #16]
   1586c:	ldr	d8, [sp], #112
   15870:	ret
   15874:	mov	w0, #0x1                   	// #1
   15878:	b	15854 <lzma_mode_is_supported@@XZ_5.0+0x6384>
   1587c:	stp	x29, x30, [sp, #-32]!
   15880:	stp	x20, x19, [sp, #16]
   15884:	mov	x19, x0
   15888:	ldr	x0, [x0, #8]
   1588c:	mov	x29, sp
   15890:	mov	x20, x1
   15894:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
   15898:	mov	x0, x19
   1589c:	mov	x1, x20
   158a0:	ldp	x20, x19, [sp, #16]
   158a4:	ldp	x29, x30, [sp], #32
   158a8:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
   158ac:	stp	x29, x30, [sp, #-48]!
   158b0:	stp	x22, x21, [sp, #16]
   158b4:	stp	x20, x19, [sp, #32]
   158b8:	ldr	x21, [x0]
   158bc:	mov	x20, x2
   158c0:	mov	x19, x1
   158c4:	mov	x29, sp
   158c8:	cbnz	x21, 1590c <lzma_mode_is_supported@@XZ_5.0+0x643c>
   158cc:	mov	x22, x0
   158d0:	mov	w0, #0x158                 	// #344
   158d4:	mov	x1, x19
   158d8:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   158dc:	cbz	x0, 15940 <lzma_mode_is_supported@@XZ_5.0+0x6470>
   158e0:	adrp	x8, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   158e4:	mov	x21, x0
   158e8:	add	x8, x8, #0x97c
   158ec:	mov	x9, #0xffffffffffffffff    	// #-1
   158f0:	movi	v0.2d, #0x0
   158f4:	str	x0, [x22]
   158f8:	str	x8, [x22, #32]
   158fc:	stp	xzr, x9, [x0]
   15900:	stp	q0, q0, [x0, #16]
   15904:	str	q0, [x0, #48]
   15908:	str	xzr, [x0, #64]
   1590c:	ldr	x8, [x20, #16]
   15910:	cbz	x8, 1592c <lzma_mode_is_supported@@XZ_5.0+0x645c>
   15914:	ldr	w9, [x8]
   15918:	cbnz	w9, 1592c <lzma_mode_is_supported@@XZ_5.0+0x645c>
   1591c:	ldr	w8, [x8, #4]
   15920:	sub	w9, w8, #0x1
   15924:	cmp	w9, #0xff
   15928:	b.ls	15948 <lzma_mode_is_supported@@XZ_5.0+0x6478>  // b.plast
   1592c:	mov	w0, #0x8                   	// #8
   15930:	ldp	x20, x19, [sp, #32]
   15934:	ldp	x22, x21, [sp, #16]
   15938:	ldp	x29, x30, [sp], #48
   1593c:	ret
   15940:	mov	w0, #0x5                   	// #5
   15944:	b	15930 <lzma_mode_is_supported@@XZ_5.0+0x6460>
   15948:	add	x0, x21, #0x50
   1594c:	mov	w2, #0x101                 	// #257
   15950:	mov	w1, wzr
   15954:	str	x8, [x21, #72]
   15958:	add	x20, x20, #0x18
   1595c:	bl	31e0 <memset@plt>
   15960:	mov	x0, x21
   15964:	mov	x1, x19
   15968:	mov	x2, x20
   1596c:	ldp	x20, x19, [sp, #32]
   15970:	ldp	x22, x21, [sp, #16]
   15974:	ldp	x29, x30, [sp], #48
   15978:	b	37b4 <lzma_version_string@@XZ_5.0+0x134>
   1597c:	stp	x29, x30, [sp, #-32]!
   15980:	stp	x20, x19, [sp, #16]
   15984:	mov	x29, sp
   15988:	mov	x19, x1
   1598c:	mov	x20, x0
   15990:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
   15994:	mov	x0, x20
   15998:	mov	x1, x19
   1599c:	ldp	x20, x19, [sp, #16]
   159a0:	ldp	x29, x30, [sp], #32
   159a4:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
   159a8:	cbz	x0, 159b4 <lzma_mode_is_supported@@XZ_5.0+0x64e4>
   159ac:	ldr	w8, [x0]
   159b0:	cbz	w8, 159bc <lzma_mode_is_supported@@XZ_5.0+0x64ec>
   159b4:	mov	x0, #0xffffffffffffffff    	// #-1
   159b8:	ret
   159bc:	ldr	w8, [x0, #4]
   159c0:	sub	w8, w8, #0x1
   159c4:	cmp	w8, #0xff
   159c8:	mov	w8, #0x158                 	// #344
   159cc:	csinv	x0, x8, xzr, ls  // ls = plast
   159d0:	ret
   159d4:	adrp	x8, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   159d8:	adrp	x9, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   159dc:	add	x8, x8, #0x9f0
   159e0:	add	x9, x9, #0xb20
   159e4:	str	x8, [x0, #24]
   159e8:	str	x9, [x0, #64]
   159ec:	b	158ac <lzma_mode_is_supported@@XZ_5.0+0x63dc>
   159f0:	sub	sp, sp, #0x40
   159f4:	stp	x29, x30, [sp, #16]
   159f8:	stp	x22, x21, [sp, #32]
   159fc:	stp	x20, x19, [sp, #48]
   15a00:	add	x29, sp, #0x10
   15a04:	ldr	x9, [x0, #24]
   15a08:	ldr	w8, [x29, #48]
   15a0c:	mov	x20, x6
   15a10:	mov	x21, x5
   15a14:	mov	x19, x0
   15a18:	cbz	x9, 15a84 <lzma_mode_is_supported@@XZ_5.0+0x65b4>
   15a1c:	ldr	x0, [x19]
   15a20:	ldr	x22, [x20]
   15a24:	mov	x5, x21
   15a28:	mov	x6, x20
   15a2c:	str	w8, [sp]
   15a30:	blr	x9
   15a34:	ldr	x8, [x20]
   15a38:	subs	x8, x8, x22
   15a3c:	b.eq	15b0c <lzma_mode_is_supported@@XZ_5.0+0x663c>  // b.none
   15a40:	ldr	x9, [x19, #72]
   15a44:	ldrb	w10, [x19, #80]
   15a48:	add	x11, x21, x22
   15a4c:	add	w13, w9, w10
   15a50:	add	x14, x19, #0x51
   15a54:	and	x13, x13, #0xff
   15a58:	ldrb	w15, [x11]
   15a5c:	ldrb	w13, [x14, x13]
   15a60:	and	x12, x10, #0xff
   15a64:	sub	w10, w10, #0x1
   15a68:	strb	w10, [x19, #80]
   15a6c:	strb	w15, [x14, x12]
   15a70:	sub	w12, w15, w13
   15a74:	subs	x8, x8, #0x1
   15a78:	strb	w12, [x11], #1
   15a7c:	b.ne	15a4c <lzma_mode_is_supported@@XZ_5.0+0x657c>  // b.any
   15a80:	b	15b0c <lzma_mode_is_supported@@XZ_5.0+0x663c>
   15a84:	ldr	x9, [x3]
   15a88:	ldr	x10, [x20]
   15a8c:	sub	x11, x4, x9
   15a90:	sub	x12, x7, x10
   15a94:	cmp	x11, x12
   15a98:	csel	x11, x11, x12, cc  // cc = lo, ul, last
   15a9c:	cbz	x11, 15ae8 <lzma_mode_is_supported@@XZ_5.0+0x6618>
   15aa0:	ldr	x12, [x19, #72]
   15aa4:	ldrb	w13, [x19, #80]
   15aa8:	add	x14, x2, x9
   15aac:	add	x15, x21, x10
   15ab0:	mov	x16, x11
   15ab4:	add	w17, w12, w13
   15ab8:	add	x18, x19, #0x51
   15abc:	and	x17, x17, #0xff
   15ac0:	ldrb	w17, [x18, x17]
   15ac4:	ldrb	w0, [x14], #1
   15ac8:	and	x1, x13, #0xff
   15acc:	sub	w13, w13, #0x1
   15ad0:	strb	w13, [x19, #80]
   15ad4:	sub	w17, w0, w17
   15ad8:	strb	w0, [x18, x1]
   15adc:	subs	x16, x16, #0x1
   15ae0:	strb	w17, [x15], #1
   15ae4:	b.ne	15ab4 <lzma_mode_is_supported@@XZ_5.0+0x65e4>  // b.any
   15ae8:	add	x9, x11, x9
   15aec:	add	x10, x11, x10
   15af0:	str	x9, [x3]
   15af4:	str	x10, [x20]
   15af8:	cbz	w8, 15b08 <lzma_mode_is_supported@@XZ_5.0+0x6638>
   15afc:	cmp	x9, x4
   15b00:	cset	w0, eq  // eq = none
   15b04:	b	15b0c <lzma_mode_is_supported@@XZ_5.0+0x663c>
   15b08:	mov	w0, wzr
   15b0c:	ldp	x20, x19, [sp, #48]
   15b10:	ldp	x22, x21, [sp, #32]
   15b14:	ldp	x29, x30, [sp, #16]
   15b18:	add	sp, sp, #0x40
   15b1c:	ret
   15b20:	add	x2, x3, #0x10
   15b24:	b	38a8 <lzma_version_string@@XZ_5.0+0x228>
   15b28:	stp	x29, x30, [sp, #-32]!
   15b2c:	stp	x20, x19, [sp, #16]
   15b30:	mov	x29, sp
   15b34:	mov	x19, x1
   15b38:	mov	x20, x0
   15b3c:	bl	159a8 <lzma_mode_is_supported@@XZ_5.0+0x64d8>
   15b40:	cmn	x0, #0x1
   15b44:	b.eq	15b5c <lzma_mode_is_supported@@XZ_5.0+0x668c>  // b.none
   15b48:	ldrb	w8, [x20, #4]
   15b4c:	mov	w0, wzr
   15b50:	sub	w8, w8, #0x1
   15b54:	strb	w8, [x19]
   15b58:	b	15b60 <lzma_mode_is_supported@@XZ_5.0+0x6690>
   15b5c:	mov	w0, #0xb                   	// #11
   15b60:	ldp	x20, x19, [sp, #16]
   15b64:	ldp	x29, x30, [sp], #32
   15b68:	ret
   15b6c:	adrp	x8, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   15b70:	add	x8, x8, #0xb7c
   15b74:	str	x8, [x0, #24]
   15b78:	b	158ac <lzma_mode_is_supported@@XZ_5.0+0x63dc>
   15b7c:	sub	sp, sp, #0x40
   15b80:	stp	x29, x30, [sp, #16]
   15b84:	stp	x22, x21, [sp, #32]
   15b88:	stp	x20, x19, [sp, #48]
   15b8c:	add	x29, sp, #0x10
   15b90:	mov	x19, x0
   15b94:	ldr	w8, [x29, #48]
   15b98:	ldr	x9, [x0, #24]
   15b9c:	ldr	x0, [x0]
   15ba0:	ldr	x22, [x6]
   15ba4:	mov	x21, x6
   15ba8:	mov	x20, x5
   15bac:	str	w8, [sp]
   15bb0:	blr	x9
   15bb4:	ldr	x8, [x21]
   15bb8:	subs	x8, x8, x22
   15bbc:	b.eq	15c00 <lzma_mode_is_supported@@XZ_5.0+0x6730>  // b.none
   15bc0:	ldr	x9, [x19, #72]
   15bc4:	ldrb	w10, [x19, #80]
   15bc8:	add	x11, x20, x22
   15bcc:	add	w12, w9, w10
   15bd0:	add	x13, x19, #0x51
   15bd4:	and	x12, x12, #0xff
   15bd8:	ldrb	w14, [x11]
   15bdc:	ldrb	w12, [x13, x12]
   15be0:	and	x15, x10, #0xff
   15be4:	sub	w10, w10, #0x1
   15be8:	subs	x8, x8, #0x1
   15bec:	add	w12, w14, w12
   15bf0:	strb	w12, [x11], #1
   15bf4:	strb	w10, [x19, #80]
   15bf8:	strb	w12, [x13, x15]
   15bfc:	b.ne	15bcc <lzma_mode_is_supported@@XZ_5.0+0x66fc>  // b.any
   15c00:	ldp	x20, x19, [sp, #48]
   15c04:	ldp	x22, x21, [sp, #32]
   15c08:	ldp	x29, x30, [sp, #16]
   15c0c:	add	sp, sp, #0x40
   15c10:	ret
   15c14:	stp	x29, x30, [sp, #-32]!
   15c18:	cmp	x3, #0x1
   15c1c:	stp	x20, x19, [sp, #16]
   15c20:	mov	x29, sp
   15c24:	b.ne	15c58 <lzma_mode_is_supported@@XZ_5.0+0x6788>  // b.any
   15c28:	mov	x20, x0
   15c2c:	mov	w0, #0x28                  	// #40
   15c30:	mov	x19, x2
   15c34:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   15c38:	cbz	x0, 15c60 <lzma_mode_is_supported@@XZ_5.0+0x6790>
   15c3c:	ldrb	w9, [x19]
   15c40:	mov	x8, x0
   15c44:	mov	w0, wzr
   15c48:	add	w9, w9, #0x1
   15c4c:	stp	wzr, w9, [x8]
   15c50:	str	x8, [x20]
   15c54:	b	15c64 <lzma_mode_is_supported@@XZ_5.0+0x6794>
   15c58:	mov	w0, #0x8                   	// #8
   15c5c:	b	15c64 <lzma_mode_is_supported@@XZ_5.0+0x6794>
   15c60:	mov	w0, #0x5                   	// #5
   15c64:	ldp	x20, x19, [sp, #16]
   15c68:	ldp	x29, x30, [sp], #32
   15c6c:	ret
   15c70:	stp	x29, x30, [sp, #-96]!
   15c74:	stp	x26, x25, [sp, #32]
   15c78:	stp	x24, x23, [sp, #48]
   15c7c:	stp	x22, x21, [sp, #64]
   15c80:	stp	x20, x19, [sp, #80]
   15c84:	ldr	x22, [x0]
   15c88:	mov	w21, w7
   15c8c:	mov	w23, w6
   15c90:	mov	x20, x2
   15c94:	mov	x19, x1
   15c98:	str	x27, [sp, #16]
   15c9c:	mov	x29, sp
   15ca0:	cbz	x22, 15cc8 <lzma_mode_is_supported@@XZ_5.0+0x67f8>
   15ca4:	ldr	x8, [x20, #16]
   15ca8:	cbz	x8, 15d68 <lzma_mode_is_supported@@XZ_5.0+0x6898>
   15cac:	ldr	w8, [x8]
   15cb0:	sub	w9, w23, #0x1
   15cb4:	tst	w8, w9
   15cb8:	str	w8, [x22, #96]
   15cbc:	b.eq	15d6c <lzma_mode_is_supported@@XZ_5.0+0x689c>  // b.none
   15cc0:	mov	w0, #0x8                   	// #8
   15cc4:	b	15d4c <lzma_mode_is_supported@@XZ_5.0+0x687c>
   15cc8:	lsl	x27, x5, #1
   15ccc:	mov	x26, x0
   15cd0:	add	x0, x27, #0x88
   15cd4:	mov	x1, x19
   15cd8:	mov	x24, x4
   15cdc:	mov	x25, x3
   15ce0:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   15ce4:	cbz	x0, 15d48 <lzma_mode_is_supported@@XZ_5.0+0x6878>
   15ce8:	adrp	x8, 15000 <lzma_mode_is_supported@@XZ_5.0+0x5b30>
   15cec:	adrp	x9, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   15cf0:	add	x8, x8, #0xdb0
   15cf4:	add	x9, x9, #0x18
   15cf8:	stp	x8, x9, [x26, #24]
   15cfc:	adrp	x8, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   15d00:	add	x8, x8, #0x50
   15d04:	mov	x22, x0
   15d08:	str	x8, [x26, #64]
   15d0c:	mov	x8, #0xffffffffffffffff    	// #-1
   15d10:	movi	v0.2d, #0x0
   15d14:	str	x0, [x26]
   15d18:	stp	xzr, x8, [x0]
   15d1c:	stp	q0, q0, [x0, #16]
   15d20:	str	q0, [x0, #48]
   15d24:	str	xzr, [x0, #64]
   15d28:	str	x25, [x0, #80]
   15d2c:	str	x27, [x0, #104]
   15d30:	cbz	x24, 15da8 <lzma_mode_is_supported@@XZ_5.0+0x68d8>
   15d34:	mov	x0, x24
   15d38:	mov	x1, x19
   15d3c:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   15d40:	str	x0, [x22, #88]
   15d44:	cbnz	x0, 15ca4 <lzma_mode_is_supported@@XZ_5.0+0x67d4>
   15d48:	mov	w0, #0x5                   	// #5
   15d4c:	ldp	x20, x19, [sp, #80]
   15d50:	ldp	x22, x21, [sp, #64]
   15d54:	ldp	x24, x23, [sp, #48]
   15d58:	ldp	x26, x25, [sp, #32]
   15d5c:	ldr	x27, [sp, #16]
   15d60:	ldp	x29, x30, [sp], #96
   15d64:	ret
   15d68:	str	wzr, [x22, #96]
   15d6c:	and	w8, w21, #0x1
   15d70:	strb	wzr, [x22, #72]
   15d74:	stp	xzr, xzr, [x22, #120]
   15d78:	strb	w8, [x22, #73]
   15d7c:	str	xzr, [x22, #112]
   15d80:	add	x2, x20, #0x18
   15d84:	mov	x0, x22
   15d88:	mov	x1, x19
   15d8c:	ldp	x20, x19, [sp, #80]
   15d90:	ldp	x22, x21, [sp, #64]
   15d94:	ldp	x24, x23, [sp, #48]
   15d98:	ldp	x26, x25, [sp, #32]
   15d9c:	ldr	x27, [sp, #16]
   15da0:	ldp	x29, x30, [sp], #96
   15da4:	b	37b4 <lzma_version_string@@XZ_5.0+0x134>
   15da8:	str	xzr, [x22, #88]
   15dac:	b	15ca4 <lzma_mode_is_supported@@XZ_5.0+0x67d4>
   15db0:	sub	sp, sp, #0xa0
   15db4:	stp	x29, x30, [sp, #64]
   15db8:	add	x29, sp, #0x40
   15dbc:	stp	x26, x25, [sp, #96]
   15dc0:	ldr	w25, [x29, #96]
   15dc4:	stp	x28, x27, [sp, #80]
   15dc8:	stp	x24, x23, [sp, #112]
   15dcc:	stp	x22, x21, [sp, #128]
   15dd0:	cmp	w25, #0x1
   15dd4:	stp	x20, x19, [sp, #144]
   15dd8:	b.ne	15de4 <lzma_mode_is_supported@@XZ_5.0+0x6914>  // b.any
   15ddc:	mov	w0, #0x8                   	// #8
   15de0:	b	15ff8 <lzma_mode_is_supported@@XZ_5.0+0x6b28>
   15de4:	mov	x19, x0
   15de8:	ldr	x8, [x19, #112]!
   15dec:	mov	x27, x2
   15df0:	mov	x20, x7
   15df4:	mov	x22, x6
   15df8:	ldr	x2, [x19, #8]
   15dfc:	mov	x23, x5
   15e00:	mov	x24, x4
   15e04:	mov	x26, x3
   15e08:	mov	x28, x1
   15e0c:	mov	x21, x0
   15e10:	cmp	x8, x2
   15e14:	b.cs	15e44 <lzma_mode_is_supported@@XZ_5.0+0x6974>  // b.hs, b.nlast
   15e18:	add	x0, x21, #0x88
   15e1c:	mov	x1, x19
   15e20:	mov	x3, x23
   15e24:	mov	x4, x22
   15e28:	mov	x5, x20
   15e2c:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
   15e30:	ldp	x8, x9, [x21, #112]
   15e34:	cmp	x8, x9
   15e38:	b.cc	15ff4 <lzma_mode_is_supported@@XZ_5.0+0x6b24>  // b.lo, b.ul, b.last
   15e3c:	ldrb	w9, [x21, #72]
   15e40:	cbnz	w9, 15fec <lzma_mode_is_supported@@XZ_5.0+0x6b1c>
   15e44:	stp	x26, x24, [x29, #-16]
   15e48:	stur	x23, [x29, #-24]
   15e4c:	mov	x26, x21
   15e50:	ldr	x9, [x26, #128]!
   15e54:	stur	xzr, [x26, #-8]
   15e58:	ldr	x24, [x22]
   15e5c:	sub	x23, x9, x8
   15e60:	sub	x10, x20, x24
   15e64:	cmp	x10, x23
   15e68:	b.hi	15e90 <lzma_mode_is_supported@@XZ_5.0+0x69c0>  // b.pmore
   15e6c:	cbz	x23, 15e90 <lzma_mode_is_supported@@XZ_5.0+0x69c0>
   15e70:	cbz	x8, 15f2c <lzma_mode_is_supported@@XZ_5.0+0x6a5c>
   15e74:	add	x0, x21, #0x88
   15e78:	add	x1, x0, x8
   15e7c:	mov	x2, x23
   15e80:	bl	3070 <memmove@plt>
   15e84:	str	x23, [x21, #128]
   15e88:	str	xzr, [x21, #112]
   15e8c:	b	15f54 <lzma_mode_is_supported@@XZ_5.0+0x6a84>
   15e90:	str	x26, [sp, #32]
   15e94:	ldur	x26, [x29, #-24]
   15e98:	add	x9, x21, #0x88
   15e9c:	add	x1, x9, x8
   15ea0:	mov	x2, x23
   15ea4:	add	x0, x26, x24
   15ea8:	stp	x9, x0, [sp, #16]
   15eac:	bl	3060 <memcpy@plt>
   15eb0:	ldp	x3, x4, [x29, #-16]
   15eb4:	mov	x5, x26
   15eb8:	ldr	x26, [sp, #32]
   15ebc:	add	x8, x23, x24
   15ec0:	mov	x0, x21
   15ec4:	mov	x1, x28
   15ec8:	mov	x2, x27
   15ecc:	mov	x6, x22
   15ed0:	mov	x7, x20
   15ed4:	str	x8, [x22]
   15ed8:	str	w25, [sp]
   15edc:	bl	16058 <lzma_mode_is_supported@@XZ_5.0+0x6b88>
   15ee0:	cbnz	w0, 15ff8 <lzma_mode_is_supported@@XZ_5.0+0x6b28>
   15ee4:	ldr	x8, [x22]
   15ee8:	ldp	x9, x0, [x21, #80]
   15eec:	ldr	w1, [x21, #96]
   15ef0:	ldrb	w2, [x21, #73]
   15ef4:	ldr	x3, [sp, #24]
   15ef8:	sub	x23, x8, x24
   15efc:	mov	x4, x23
   15f00:	blr	x9
   15f04:	ldr	w8, [x21, #96]
   15f08:	ldrb	w9, [x21, #72]
   15f0c:	sub	x2, x23, x0
   15f10:	str	xzr, [x21, #112]
   15f14:	add	w8, w8, w0
   15f18:	str	w8, [x21, #96]
   15f1c:	str	x2, [x21, #128]
   15f20:	cbz	w9, 15f34 <lzma_mode_is_supported@@XZ_5.0+0x6a64>
   15f24:	str	xzr, [x26]
   15f28:	b	15fd4 <lzma_mode_is_supported@@XZ_5.0+0x6b04>
   15f2c:	cbnz	x9, 15f54 <lzma_mode_is_supported@@XZ_5.0+0x6a84>
   15f30:	b	15fd4 <lzma_mode_is_supported@@XZ_5.0+0x6b04>
   15f34:	cbz	x2, 15fd4 <lzma_mode_is_supported@@XZ_5.0+0x6b04>
   15f38:	ldr	x8, [x22]
   15f3c:	ldur	x9, [x29, #-24]
   15f40:	ldr	x0, [sp, #16]
   15f44:	sub	x8, x8, x2
   15f48:	add	x1, x9, x8
   15f4c:	str	x8, [x22]
   15f50:	bl	3060 <memcpy@plt>
   15f54:	ldr	x7, [x21, #104]
   15f58:	ldp	x3, x4, [x29, #-16]
   15f5c:	add	x23, x21, #0x88
   15f60:	mov	x0, x21
   15f64:	mov	x1, x28
   15f68:	mov	x2, x27
   15f6c:	mov	x5, x23
   15f70:	mov	x6, x26
   15f74:	str	w25, [sp]
   15f78:	bl	16058 <lzma_mode_is_supported@@XZ_5.0+0x6b88>
   15f7c:	cbnz	w0, 15ff8 <lzma_mode_is_supported@@XZ_5.0+0x6b28>
   15f80:	ldr	x4, [x21, #128]
   15f84:	ldp	x8, x0, [x21, #80]
   15f88:	ldr	w1, [x21, #96]
   15f8c:	ldrb	w2, [x21, #73]
   15f90:	mov	x3, x23
   15f94:	blr	x8
   15f98:	ldr	w8, [x21, #96]
   15f9c:	ldrb	w9, [x21, #72]
   15fa0:	mov	x2, x0
   15fa4:	str	x0, [x21, #120]
   15fa8:	add	w8, w8, w2
   15fac:	str	w8, [x21, #96]
   15fb0:	cbz	w9, 15fbc <lzma_mode_is_supported@@XZ_5.0+0x6aec>
   15fb4:	ldr	x2, [x21, #128]
   15fb8:	str	x2, [x21, #120]
   15fbc:	ldur	x3, [x29, #-24]
   15fc0:	mov	x0, x23
   15fc4:	mov	x1, x19
   15fc8:	mov	x4, x22
   15fcc:	mov	x5, x20
   15fd0:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
   15fd4:	ldrb	w8, [x21, #72]
   15fd8:	cbz	w8, 15ff4 <lzma_mode_is_supported@@XZ_5.0+0x6b24>
   15fdc:	ldr	x8, [x19]
   15fe0:	ldr	x9, [x26]
   15fe4:	cmp	x8, x9
   15fe8:	b.ne	15ff4 <lzma_mode_is_supported@@XZ_5.0+0x6b24>  // b.any
   15fec:	mov	w0, #0x1                   	// #1
   15ff0:	b	15ff8 <lzma_mode_is_supported@@XZ_5.0+0x6b28>
   15ff4:	mov	w0, wzr
   15ff8:	ldp	x20, x19, [sp, #144]
   15ffc:	ldp	x22, x21, [sp, #128]
   16000:	ldp	x24, x23, [sp, #112]
   16004:	ldp	x26, x25, [sp, #96]
   16008:	ldp	x28, x27, [sp, #80]
   1600c:	ldp	x29, x30, [sp, #64]
   16010:	add	sp, sp, #0xa0
   16014:	ret
   16018:	stp	x29, x30, [sp, #-32]!
   1601c:	stp	x20, x19, [sp, #16]
   16020:	mov	x29, sp
   16024:	mov	x19, x1
   16028:	mov	x20, x0
   1602c:	bl	3830 <lzma_version_string@@XZ_5.0+0x1b0>
   16030:	ldr	x0, [x20, #88]
   16034:	mov	x1, x19
   16038:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
   1603c:	mov	x0, x20
   16040:	mov	x1, x19
   16044:	ldp	x20, x19, [sp, #16]
   16048:	ldp	x29, x30, [sp], #32
   1604c:	b	3720 <lzma_version_string@@XZ_5.0+0xa0>
   16050:	add	x2, x3, #0x10
   16054:	b	38a8 <lzma_version_string@@XZ_5.0+0x228>
   16058:	sub	sp, sp, #0x40
   1605c:	stp	x29, x30, [sp, #16]
   16060:	stp	x22, x21, [sp, #32]
   16064:	stp	x20, x19, [sp, #48]
   16068:	add	x29, sp, #0x10
   1606c:	ldr	x8, [x0, #24]
   16070:	ldr	w22, [x29, #48]
   16074:	mov	x20, x4
   16078:	mov	x21, x3
   1607c:	mov	x19, x0
   16080:	cbz	x8, 160b0 <lzma_mode_is_supported@@XZ_5.0+0x6be0>
   16084:	ldr	x0, [x19]
   16088:	mov	x3, x21
   1608c:	mov	x4, x20
   16090:	str	w22, [sp]
   16094:	blr	x8
   16098:	cbz	w0, 160fc <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   1609c:	cmp	w0, #0x1
   160a0:	b.ne	16100 <lzma_mode_is_supported@@XZ_5.0+0x6c30>  // b.any
   160a4:	mov	w8, #0x1                   	// #1
   160a8:	strb	w8, [x19, #72]
   160ac:	b	160fc <lzma_mode_is_supported@@XZ_5.0+0x6c2c>
   160b0:	mov	x0, x2
   160b4:	mov	x1, x21
   160b8:	mov	x2, x20
   160bc:	mov	x3, x5
   160c0:	mov	x4, x6
   160c4:	mov	x5, x7
   160c8:	bl	3744 <lzma_version_string@@XZ_5.0+0xc4>
   160cc:	cmp	w22, #0x3
   160d0:	mov	w0, wzr
   160d4:	b.ne	16100 <lzma_mode_is_supported@@XZ_5.0+0x6c30>  // b.any
   160d8:	ldrb	w8, [x19, #73]
   160dc:	cbz	w8, 16100 <lzma_mode_is_supported@@XZ_5.0+0x6c30>
   160e0:	ldr	x8, [x21]
   160e4:	cmp	x8, x20
   160e8:	b.ne	160fc <lzma_mode_is_supported@@XZ_5.0+0x6c2c>  // b.any
   160ec:	mov	w8, #0x1                   	// #1
   160f0:	mov	w0, wzr
   160f4:	strb	w8, [x19, #72]
   160f8:	b	16100 <lzma_mode_is_supported@@XZ_5.0+0x6c30>
   160fc:	mov	w0, wzr
   16100:	ldp	x20, x19, [sp, #48]
   16104:	ldp	x22, x21, [sp, #32]
   16108:	ldp	x29, x30, [sp, #16]
   1610c:	add	sp, sp, #0x40
   16110:	ret
   16114:	cbz	x1, 1612c <lzma_mode_is_supported@@XZ_5.0+0x6c5c>
   16118:	ldr	w8, [x1]
   1611c:	cmp	w8, #0x0
   16120:	cset	w8, ne  // ne = any
   16124:	lsl	w8, w8, #2
   16128:	b	16130 <lzma_mode_is_supported@@XZ_5.0+0x6c60>
   1612c:	mov	w8, wzr
   16130:	str	w8, [x0]
   16134:	mov	w0, wzr
   16138:	ret
   1613c:	cbz	x0, 1614c <lzma_mode_is_supported@@XZ_5.0+0x6c7c>
   16140:	ldr	w8, [x0]
   16144:	cbz	w8, 1614c <lzma_mode_is_supported@@XZ_5.0+0x6c7c>
   16148:	str	w8, [x1]
   1614c:	mov	w0, wzr
   16150:	ret
   16154:	stp	x29, x30, [sp, #-48]!
   16158:	str	x21, [sp, #16]
   1615c:	stp	x20, x19, [sp, #32]
   16160:	mov	x29, sp
   16164:	cbz	x3, 161c0 <lzma_mode_is_supported@@XZ_5.0+0x6cf0>
   16168:	cmp	x3, #0x4
   1616c:	b.ne	161a4 <lzma_mode_is_supported@@XZ_5.0+0x6cd4>  // b.any
   16170:	mov	x20, x0
   16174:	mov	w0, #0x4                   	// #4
   16178:	mov	x21, x2
   1617c:	mov	x19, x1
   16180:	bl	368c <lzma_version_string@@XZ_5.0+0xc>
   16184:	cbz	x0, 161ac <lzma_mode_is_supported@@XZ_5.0+0x6cdc>
   16188:	ldr	w9, [x21]
   1618c:	mov	x8, x0
   16190:	str	w9, [x0]
   16194:	cbz	w9, 161b4 <lzma_mode_is_supported@@XZ_5.0+0x6ce4>
   16198:	mov	w0, wzr
   1619c:	str	x8, [x20]
   161a0:	b	161c4 <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   161a4:	mov	w0, #0x8                   	// #8
   161a8:	b	161c4 <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   161ac:	mov	w0, #0x5                   	// #5
   161b0:	b	161c4 <lzma_mode_is_supported@@XZ_5.0+0x6cf4>
   161b4:	mov	x0, x8
   161b8:	mov	x1, x19
   161bc:	bl	3720 <lzma_version_string@@XZ_5.0+0xa0>
   161c0:	mov	w0, wzr
   161c4:	ldp	x20, x19, [sp, #32]
   161c8:	ldr	x21, [sp, #16]
   161cc:	ldp	x29, x30, [sp], #48
   161d0:	ret
   161d4:	mov	w3, #0x1                   	// #1
   161d8:	b	161dc <lzma_mode_is_supported@@XZ_5.0+0x6d0c>
   161dc:	stp	x29, x30, [sp, #-32]!
   161e0:	and	w7, w3, #0x1
   161e4:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   161e8:	add	x3, x3, #0x234
   161ec:	mov	w4, #0x8                   	// #8
   161f0:	mov	w5, #0x5                   	// #5
   161f4:	mov	w6, #0x1                   	// #1
   161f8:	str	x19, [sp, #16]
   161fc:	mov	x29, sp
   16200:	mov	x19, x0
   16204:	bl	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   16208:	cbnz	w0, 16220 <lzma_mode_is_supported@@XZ_5.0+0x6d50>
   1620c:	ldr	x8, [x19]
   16210:	adrp	x9, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   16214:	ldr	d0, [x9, #3472]
   16218:	ldr	x8, [x8, #88]
   1621c:	str	d0, [x8]
   16220:	ldr	x19, [sp, #16]
   16224:	ldp	x29, x30, [sp], #32
   16228:	ret
   1622c:	mov	w3, wzr
   16230:	b	161dc <lzma_mode_is_supported@@XZ_5.0+0x6d0c>
   16234:	subs	x9, x4, #0x5
   16238:	b.cs	16244 <lzma_mode_is_supported@@XZ_5.0+0x6d74>  // b.hs, b.nlast
   1623c:	mov	x0, xzr
   16240:	ret
   16244:	stp	x24, x23, [sp, #-48]!
   16248:	stp	x22, x21, [sp, #16]
   1624c:	stp	x20, x19, [sp, #32]
   16250:	mov	x8, x0
   16254:	ldp	w17, w16, [x8]
   16258:	sub	w18, w1, #0x5
   1625c:	adrp	x12, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   16260:	mov	x0, xzr
   16264:	sub	w4, w1, w16
   16268:	cmp	w4, #0x5
   1626c:	mov	w10, #0x17                  	// #23
   16270:	mov	w11, #0xfffffffb            	// #-5
   16274:	add	x12, x12, #0xd98
   16278:	mov	w13, #0x18                  	// #24
   1627c:	mov	w14, #0xffffffff            	// #-1
   16280:	mov	w15, #0x11                  	// #17
   16284:	csel	w4, w18, w16, hi  // hi = pmore
   16288:	mov	w16, #0xee                  	// #238
   1628c:	ldrb	w18, [x3, x0]
   16290:	and	w18, w18, #0xfe
   16294:	cmp	w18, #0xe8
   16298:	b.ne	162b4 <lzma_mode_is_supported@@XZ_5.0+0x6de4>  // b.any
   1629c:	add	w18, w0, w1
   162a0:	sub	w4, w18, w4
   162a4:	cmp	w4, #0x5
   162a8:	b.ls	162bc <lzma_mode_is_supported@@XZ_5.0+0x6dec>  // b.plast
   162ac:	mov	w17, wzr
   162b0:	b	162cc <lzma_mode_is_supported@@XZ_5.0+0x6dfc>
   162b4:	add	x0, x0, #0x1
   162b8:	b	163b8 <lzma_mode_is_supported@@XZ_5.0+0x6ee8>
   162bc:	cbz	w4, 162cc <lzma_mode_is_supported@@XZ_5.0+0x6dfc>
   162c0:	subs	w4, w4, #0x1
   162c4:	and	w17, w16, w17, lsl #1
   162c8:	b.ne	162c0 <lzma_mode_is_supported@@XZ_5.0+0x6df0>  // b.any
   162cc:	add	x4, x0, #0x4
   162d0:	ldrb	w5, [x3, x4]
   162d4:	cmp	w5, #0xff
   162d8:	b.eq	162e0 <lzma_mode_is_supported@@XZ_5.0+0x6e10>  // b.none
   162dc:	cbnz	w5, 1636c <lzma_mode_is_supported@@XZ_5.0+0x6e9c>
   162e0:	cmp	w17, #0x1f
   162e4:	b.hi	1636c <lzma_mode_is_supported@@XZ_5.0+0x6e9c>  // b.pmore
   162e8:	ubfx	w6, w17, #1, #3
   162ec:	lsr	x6, x10, x6
   162f0:	tbz	w6, #0, 1636c <lzma_mode_is_supported@@XZ_5.0+0x6e9c>
   162f4:	lsl	w19, w5, #24
   162f8:	add	x5, x0, #0x3
   162fc:	add	x6, x0, #0x2
   16300:	ldrb	w22, [x3, x5]
   16304:	add	x7, x0, #0x1
   16308:	ldrb	w23, [x3, x6]
   1630c:	ldrb	w24, [x3, x7]
   16310:	bfi	w19, w22, #16, #8
   16314:	add	w20, w18, #0x5
   16318:	sub	w21, w11, w18
   1631c:	tst	w2, #0x1
   16320:	bfi	w19, w23, #8, #8
   16324:	orr	w19, w19, w24
   16328:	csel	w20, w20, w21, ne  // ne = any
   1632c:	add	w19, w19, w20
   16330:	cbz	w17, 1638c <lzma_mode_is_supported@@XZ_5.0+0x6ebc>
   16334:	lsr	w17, w17, #1
   16338:	ldr	w17, [x12, w17, uxtw #2]
   1633c:	lsl	w21, w17, #3
   16340:	neg	w21, w21
   16344:	sub	w17, w13, w17, lsl #3
   16348:	lsl	w21, w14, w21
   1634c:	lsr	w22, w19, w17
   16350:	and	w22, w22, #0xff
   16354:	cmp	w22, #0xff
   16358:	b.eq	16360 <lzma_mode_is_supported@@XZ_5.0+0x6e90>  // b.none
   1635c:	cbnz	w22, 1638c <lzma_mode_is_supported@@XZ_5.0+0x6ebc>
   16360:	eon	w19, w19, w21
   16364:	add	w19, w19, w20
   16368:	b	1634c <lzma_mode_is_supported@@XZ_5.0+0x6e7c>
   1636c:	add	x0, x0, #0x1
   16370:	cbz	w5, 16384 <lzma_mode_is_supported@@XZ_5.0+0x6eb4>
   16374:	cmp	w5, #0xff
   16378:	b.eq	16384 <lzma_mode_is_supported@@XZ_5.0+0x6eb4>  // b.none
   1637c:	orr	w17, w17, #0x1
   16380:	b	163b4 <lzma_mode_is_supported@@XZ_5.0+0x6ee4>
   16384:	orr	w17, w17, w15
   16388:	b	163b4 <lzma_mode_is_supported@@XZ_5.0+0x6ee4>
   1638c:	ubfx	w20, w19, #24, #1
   16390:	lsr	w21, w19, #16
   16394:	lsr	w22, w19, #8
   16398:	neg	w20, w20
   1639c:	mov	w17, wzr
   163a0:	strb	w20, [x3, x4]
   163a4:	strb	w21, [x3, x5]
   163a8:	strb	w22, [x3, x6]
   163ac:	strb	w19, [x3, x7]
   163b0:	add	x0, x0, #0x5
   163b4:	mov	w4, w18
   163b8:	cmp	x0, x9
   163bc:	b.ls	1628c <lzma_mode_is_supported@@XZ_5.0+0x6dbc>  // b.plast
   163c0:	stp	w17, w4, [x8]
   163c4:	ldp	x20, x19, [sp, #32]
   163c8:	ldp	x22, x21, [sp, #16]
   163cc:	ldp	x24, x23, [sp], #48
   163d0:	ret
   163d4:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   163d8:	add	x3, x3, #0x40c
   163dc:	mov	w5, #0x4                   	// #4
   163e0:	mov	w6, #0x4                   	// #4
   163e4:	mov	w7, #0x1                   	// #1
   163e8:	mov	x4, xzr
   163ec:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   163f0:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   163f4:	add	x3, x3, #0x40c
   163f8:	mov	w5, #0x4                   	// #4
   163fc:	mov	w6, #0x4                   	// #4
   16400:	mov	x4, xzr
   16404:	mov	w7, wzr
   16408:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   1640c:	cmp	x4, #0x4
   16410:	b.cs	1641c <lzma_mode_is_supported@@XZ_5.0+0x6f4c>  // b.hs, b.nlast
   16414:	mov	x0, xzr
   16418:	ret
   1641c:	mov	x10, xzr
   16420:	mov	w8, w1
   16424:	neg	w9, w1
   16428:	add	x11, x3, #0x1
   1642c:	add	x12, x11, x10
   16430:	ldurb	w15, [x12, #-1]
   16434:	and	w13, w15, #0xfc
   16438:	cmp	w13, #0x48
   1643c:	b.ne	164a0 <lzma_mode_is_supported@@XZ_5.0+0x6fd0>  // b.any
   16440:	ldrb	w14, [x12, #2]
   16444:	and	w13, w14, #0x3
   16448:	cmp	w13, #0x1
   1644c:	b.ne	164a0 <lzma_mode_is_supported@@XZ_5.0+0x6fd0>  // b.any
   16450:	add	x16, x11, x10
   16454:	ldrb	w17, [x16]
   16458:	ldrb	w18, [x16, #1]
   1645c:	bfi	w14, w15, #24, #8
   16460:	and	w14, w14, #0x3fffffc
   16464:	add	w15, w8, w10
   16468:	tst	w2, #0x1
   1646c:	orr	w14, w14, w17, lsl #16
   16470:	csel	w15, w15, w9, ne  // ne = any
   16474:	orr	w14, w14, w18, lsl #8
   16478:	mov	w17, #0x48                  	// #72
   1647c:	add	w14, w14, w15
   16480:	bfxil	w17, w14, #24, #2
   16484:	lsr	w15, w14, #16
   16488:	lsr	w18, w14, #8
   1648c:	orr	w13, w13, w14
   16490:	sturb	w17, [x12, #-1]
   16494:	strb	w15, [x16]
   16498:	strb	w18, [x16, #1]
   1649c:	strb	w13, [x12, #2]
   164a0:	add	x0, x10, #0x4
   164a4:	add	x10, x10, #0x8
   164a8:	cmp	x10, x4
   164ac:	sub	w9, w9, #0x4
   164b0:	mov	x10, x0
   164b4:	b.ls	1642c <lzma_mode_is_supported@@XZ_5.0+0x6f5c>  // b.plast
   164b8:	ret
   164bc:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   164c0:	add	x3, x3, #0x4f4
   164c4:	mov	w5, #0x10                  	// #16
   164c8:	mov	w6, #0x10                  	// #16
   164cc:	mov	w7, #0x1                   	// #1
   164d0:	mov	x4, xzr
   164d4:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   164d8:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   164dc:	add	x3, x3, #0x4f4
   164e0:	mov	w5, #0x10                  	// #16
   164e4:	mov	w6, #0x10                  	// #16
   164e8:	mov	x4, xzr
   164ec:	mov	w7, wzr
   164f0:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   164f4:	str	x21, [sp, #-32]!
   164f8:	cmp	x4, #0x10
   164fc:	stp	x20, x19, [sp, #16]
   16500:	b.cs	1650c <lzma_mode_is_supported@@XZ_5.0+0x703c>  // b.hs, b.nlast
   16504:	mov	x0, xzr
   16508:	b	16620 <lzma_mode_is_supported@@XZ_5.0+0x7150>
   1650c:	adrp	x8, 1c000 <lzma_mode_is_supported@@XZ_5.0+0xcb30>
   16510:	mov	x9, #0xe00                 	// #3584
   16514:	mov	x11, #0xffff000000001fff    	// #-281474976702465
   16518:	mov	x0, xzr
   1651c:	mov	w15, #0x10                  	// #16
   16520:	add	x8, x8, #0xdb8
   16524:	movk	x9, #0x1e0, lsl #32
   16528:	mov	x10, #0xa000000000          	// #687194767360
   1652c:	movk	x11, #0xffee, lsl #32
   16530:	mov	w12, #0xffffffff            	// #-1
   16534:	mov	x13, x3
   16538:	ldrb	w16, [x3, x0]
   1653c:	add	w17, w0, w1
   16540:	mov	x0, x15
   16544:	tst	w2, #0x1
   16548:	and	x15, x16, #0x1f
   1654c:	ldr	w15, [x8, x15, lsl #2]
   16550:	mov	x14, xzr
   16554:	cneg	w16, w17, eq  // eq = none
   16558:	mov	w17, #0x5                   	// #5
   1655c:	lsr	w18, w15, w14
   16560:	tbz	w18, #0, 16600 <lzma_mode_is_supported@@XZ_5.0+0x7130>
   16564:	mov	x6, xzr
   16568:	mov	x5, xzr
   1656c:	lsr	x18, x17, #3
   16570:	add	x7, x13, x17, lsr #3
   16574:	ldrb	w19, [x7], #1
   16578:	lsl	x19, x19, x6
   1657c:	add	x6, x6, #0x8
   16580:	cmp	x6, #0x30
   16584:	add	x5, x19, x5
   16588:	b.ne	16574 <lzma_mode_is_supported@@XZ_5.0+0x70a4>  // b.any
   1658c:	and	x7, x17, #0x7
   16590:	lsr	x19, x5, x7
   16594:	and	x6, x19, x9
   16598:	cmp	x6, x10
   1659c:	b.ne	16600 <lzma_mode_is_supported@@XZ_5.0+0x7130>  // b.any
   165a0:	lsr	x21, x19, #16
   165a4:	ubfx	x20, x19, #13, #20
   165a8:	and	w21, w21, #0x100000
   165ac:	orr	w20, w20, w21
   165b0:	add	w20, w16, w20, lsl #4
   165b4:	ubfx	w21, w20, #4, #20
   165b8:	lsr	w20, w20, #4
   165bc:	and	x19, x19, x11
   165c0:	and	w20, w20, #0x100000
   165c4:	bfi	x19, x21, #13, #20
   165c8:	lsr	x20, x20, #20
   165cc:	bfi	x19, x20, #36, #1
   165d0:	lsl	w20, w12, w7
   165d4:	mvn	w20, w20
   165d8:	and	x5, x5, x20
   165dc:	lsl	x7, x19, x7
   165e0:	mov	x6, xzr
   165e4:	orr	x5, x7, x5
   165e8:	lsr	x7, x5, x6
   165ec:	add	x6, x6, #0x8
   165f0:	strb	w7, [x13, x18]
   165f4:	cmp	x6, #0x30
   165f8:	add	x18, x18, #0x1
   165fc:	b.ne	165e8 <lzma_mode_is_supported@@XZ_5.0+0x7118>  // b.any
   16600:	add	x14, x14, #0x1
   16604:	cmp	x14, #0x3
   16608:	add	x17, x17, #0x29
   1660c:	b.ne	1655c <lzma_mode_is_supported@@XZ_5.0+0x708c>  // b.any
   16610:	add	x15, x0, #0x10
   16614:	cmp	x15, x4
   16618:	add	x13, x13, #0x10
   1661c:	b.ls	16538 <lzma_mode_is_supported@@XZ_5.0+0x7068>  // b.plast
   16620:	ldp	x20, x19, [sp, #16]
   16624:	ldr	x21, [sp], #32
   16628:	ret
   1662c:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   16630:	add	x3, x3, #0x664
   16634:	mov	w5, #0x4                   	// #4
   16638:	mov	w6, #0x4                   	// #4
   1663c:	mov	w7, #0x1                   	// #1
   16640:	mov	x4, xzr
   16644:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   16648:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   1664c:	add	x3, x3, #0x664
   16650:	mov	w5, #0x4                   	// #4
   16654:	mov	w6, #0x4                   	// #4
   16658:	mov	x4, xzr
   1665c:	mov	w7, wzr
   16660:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   16664:	cmp	x4, #0x4
   16668:	b.cs	16674 <lzma_mode_is_supported@@XZ_5.0+0x71a4>  // b.hs, b.nlast
   1666c:	mov	x0, xzr
   16670:	ret
   16674:	mov	w10, #0xfffffff8            	// #-8
   16678:	mov	x8, xzr
   1667c:	add	w9, w1, #0x8
   16680:	sub	w10, w10, w1
   16684:	add	x11, x3, #0x1
   16688:	add	x12, x11, x8
   1668c:	ldrb	w13, [x12, #2]
   16690:	cmp	w13, #0xeb
   16694:	b.ne	166d8 <lzma_mode_is_supported@@XZ_5.0+0x7208>  // b.any
   16698:	ldrb	w13, [x12, #1]
   1669c:	ldrb	w14, [x12]
   166a0:	ldurb	w15, [x12, #-1]
   166a4:	tst	w2, #0x1
   166a8:	lsl	w13, w13, #16
   166ac:	bfi	w13, w14, #8, #8
   166b0:	add	w14, w9, w8
   166b4:	csel	w14, w14, w10, ne  // ne = any
   166b8:	orr	w13, w13, w15
   166bc:	add	w13, w14, w13, lsl #2
   166c0:	lsr	w14, w13, #2
   166c4:	lsr	w15, w13, #18
   166c8:	lsr	w13, w13, #10
   166cc:	strb	w15, [x12, #1]
   166d0:	strb	w13, [x12]
   166d4:	sturb	w14, [x12, #-1]
   166d8:	add	x0, x8, #0x4
   166dc:	add	x8, x8, #0x8
   166e0:	cmp	x8, x4
   166e4:	sub	w10, w10, #0x4
   166e8:	mov	x8, x0
   166ec:	b.ls	16688 <lzma_mode_is_supported@@XZ_5.0+0x71b8>  // b.plast
   166f0:	ret
   166f4:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   166f8:	add	x3, x3, #0x72c
   166fc:	mov	w5, #0x4                   	// #4
   16700:	mov	w6, #0x2                   	// #2
   16704:	mov	w7, #0x1                   	// #1
   16708:	mov	x4, xzr
   1670c:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   16710:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   16714:	add	x3, x3, #0x72c
   16718:	mov	w5, #0x4                   	// #4
   1671c:	mov	w6, #0x2                   	// #2
   16720:	mov	x4, xzr
   16724:	mov	w7, wzr
   16728:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   1672c:	cmp	x4, #0x4
   16730:	b.cs	1673c <lzma_mode_is_supported@@XZ_5.0+0x726c>  // b.hs, b.nlast
   16734:	mov	x0, xzr
   16738:	ret
   1673c:	mov	w8, #0x700                 	// #1792
   16740:	mov	x10, xzr
   16744:	movk	w8, #0x38, lsl #16
   16748:	mov	w9, #0xfffffffc            	// #-4
   1674c:	add	x11, x10, #0x1
   16750:	ldrb	w14, [x3, x11]
   16754:	and	w12, w14, #0xf8
   16758:	cmp	w12, #0xf0
   1675c:	b.ne	167d8 <lzma_mode_is_supported@@XZ_5.0+0x7308>  // b.any
   16760:	add	x12, x10, #0x3
   16764:	ldrb	w13, [x3, x12]
   16768:	mvn	w15, w13
   1676c:	tst	w15, #0xf8
   16770:	b.ne	167d8 <lzma_mode_is_supported@@XZ_5.0+0x7308>  // b.any
   16774:	lsl	w14, w14, #19
   16778:	ldrb	w15, [x3, x10]
   1677c:	add	x16, x10, #0x2
   16780:	bfi	w14, w13, #8, #8
   16784:	ldrb	w13, [x3, x16]
   16788:	add	w17, w10, w1
   1678c:	and	w14, w14, w8
   16790:	tst	w2, #0x1
   16794:	add	w18, w17, #0x4
   16798:	sub	w17, w9, w17
   1679c:	bfi	w14, w15, #11, #8
   167a0:	csel	w17, w18, w17, ne  // ne = any
   167a4:	orr	w13, w14, w13
   167a8:	mov	w14, #0xf0                  	// #240
   167ac:	add	w13, w17, w13, lsl #1
   167b0:	bfxil	w14, w13, #20, #3
   167b4:	lsr	w15, w13, #1
   167b8:	strb	w14, [x3, x11]
   167bc:	lsr	w11, w13, #12
   167c0:	lsr	w13, w13, #9
   167c4:	strb	w11, [x3, x10]
   167c8:	orr	w10, w13, #0xf8
   167cc:	strb	w10, [x3, x12]
   167d0:	mov	x10, x16
   167d4:	strb	w15, [x3, x16]
   167d8:	add	x0, x10, #0x2
   167dc:	add	x10, x10, #0x6
   167e0:	cmp	x10, x4
   167e4:	mov	x10, x0
   167e8:	b.ls	1674c <lzma_mode_is_supported@@XZ_5.0+0x727c>  // b.plast
   167ec:	ret
   167f0:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   167f4:	add	x3, x3, #0x828
   167f8:	mov	w5, #0x4                   	// #4
   167fc:	mov	w6, #0x4                   	// #4
   16800:	mov	w7, #0x1                   	// #1
   16804:	mov	x4, xzr
   16808:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   1680c:	adrp	x3, 16000 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   16810:	add	x3, x3, #0x828
   16814:	mov	w5, #0x4                   	// #4
   16818:	mov	w6, #0x4                   	// #4
   1681c:	mov	x4, xzr
   16820:	mov	w7, wzr
   16824:	b	15c70 <lzma_mode_is_supported@@XZ_5.0+0x67a0>
   16828:	cmp	x4, #0x4
   1682c:	b.cs	16838 <lzma_mode_is_supported@@XZ_5.0+0x7368>  // b.hs, b.nlast
   16830:	mov	x0, xzr
   16834:	ret
   16838:	mov	x10, xzr
   1683c:	add	x8, x3, #0x1
   16840:	mov	w9, w1
   16844:	neg	w11, w1
   16848:	add	x12, x8, x10
   1684c:	ldurb	w14, [x12, #-1]
   16850:	cmp	w14, #0x7f
   16854:	b.eq	16874 <lzma_mode_is_supported@@XZ_5.0+0x73a4>  // b.none
   16858:	cmp	w14, #0x40
   1685c:	b.ne	168e4 <lzma_mode_is_supported@@XZ_5.0+0x7414>  // b.any
   16860:	ldrb	w13, [x8, x10]
   16864:	cmp	w13, #0x40
   16868:	b.cs	168e4 <lzma_mode_is_supported@@XZ_5.0+0x7414>  // b.hs, b.nlast
   1686c:	orr	x12, x10, #0x1
   16870:	b	16884 <lzma_mode_is_supported@@XZ_5.0+0x73b4>
   16874:	ldrb	w13, [x8, x10]
   16878:	cmp	w13, #0xc0
   1687c:	b.cc	168e4 <lzma_mode_is_supported@@XZ_5.0+0x7414>  // b.lo, b.ul, b.last
   16880:	add	x12, x10, #0x1
   16884:	lsl	w14, w14, #24
   16888:	add	x15, x8, x10
   1688c:	bfi	w14, w13, #16, #8
   16890:	ldrb	w13, [x15, #1]
   16894:	ldrb	w17, [x15, #2]
   16898:	add	w16, w9, w10
   1689c:	tst	w2, #0x1
   168a0:	bfi	w14, w13, #8, #8
   168a4:	csel	w16, w16, w11, ne  // ne = any
   168a8:	orr	w13, w14, w17
   168ac:	add	w13, w16, w13, lsl #2
   168b0:	lsr	w14, w13, #2
   168b4:	and	w16, w14, #0x400000
   168b8:	and	w17, w14, #0x3f0000
   168bc:	mov	w18, #0x40                  	// #64
   168c0:	sub	w17, w17, w16
   168c4:	neg	w16, w16
   168c8:	lsr	w13, w13, #10
   168cc:	bfxil	w18, w16, #24, #6
   168d0:	lsr	w16, w17, #16
   168d4:	strb	w18, [x3, x10]
   168d8:	strb	w16, [x3, x12]
   168dc:	strb	w13, [x15, #1]
   168e0:	strb	w14, [x15, #2]
   168e4:	add	x0, x10, #0x4
   168e8:	add	x10, x10, #0x8
   168ec:	cmp	x10, x4
   168f0:	sub	w11, w11, #0x4
   168f4:	mov	x10, x0
   168f8:	b.ls	16848 <lzma_mode_is_supported@@XZ_5.0+0x7378>  // b.plast
   168fc:	ret

Disassembly of section .fini:

0000000000016900 <.fini>:
   16900:	stp	x29, x30, [sp, #-16]!
   16904:	mov	x29, sp
   16908:	ldp	x29, x30, [sp], #16
   1690c:	ret
