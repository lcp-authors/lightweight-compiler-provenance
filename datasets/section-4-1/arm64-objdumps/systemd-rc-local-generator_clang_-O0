
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-rc-local-generator_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400ab0 <_init>:
  400ab0:	stp	x29, x30, [sp, #-16]!
  400ab4:	mov	x29, sp
  400ab8:	bl	400c58 <call_weak_fn>
  400abc:	ldp	x29, x30, [sp], #16
  400ac0:	ret

Disassembly of section .plt:

0000000000400ac8 <__libc_start_main@plt-0x20>:
  400ac8:	stp	x16, x30, [sp, #-16]!
  400acc:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400ad0:	ldr	x17, [x16, #3944]
  400ad4:	add	x16, x16, #0xf68
  400ad8:	br	x17
  400adc:	nop
  400ae0:	nop
  400ae4:	nop

0000000000400ae8 <__libc_start_main@plt>:
  400ae8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400aec:	ldr	x17, [x16, #3952]
  400af0:	add	x16, x16, #0xf70
  400af4:	br	x17

0000000000400af8 <abort@plt>:
  400af8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400afc:	ldr	x17, [x16, #3960]
  400b00:	add	x16, x16, #0xf78
  400b04:	br	x17

0000000000400b08 <__gmon_start__@plt>:
  400b08:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b0c:	ldr	x17, [x16, #3968]
  400b10:	add	x16, x16, #0xf80
  400b14:	br	x17

0000000000400b18 <log_setup_generator@plt>:
  400b18:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b1c:	ldr	x17, [x16, #3976]
  400b20:	add	x16, x16, #0xf88
  400b24:	br	x17

0000000000400b28 <log_get_max_level_realm@plt>:
  400b28:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b2c:	ldr	x17, [x16, #3984]
  400b30:	add	x16, x16, #0xf90
  400b34:	br	x17

0000000000400b38 <log_internal_realm@plt>:
  400b38:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b3c:	ldr	x17, [x16, #3992]
  400b40:	add	x16, x16, #0xf98
  400b44:	br	x17

0000000000400b48 <abs@plt>:
  400b48:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b4c:	ldr	x17, [x16, #4000]
  400b50:	add	x16, x16, #0xfa0
  400b54:	br	x17

0000000000400b58 <ask_password_agent_close@plt>:
  400b58:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b5c:	ldr	x17, [x16, #4008]
  400b60:	add	x16, x16, #0xfa8
  400b64:	br	x17

0000000000400b68 <polkit_agent_close@plt>:
  400b68:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b6c:	ldr	x17, [x16, #4016]
  400b70:	add	x16, x16, #0xfb0
  400b74:	br	x17

0000000000400b78 <pager_close@plt>:
  400b78:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b7c:	ldr	x17, [x16, #4024]
  400b80:	add	x16, x16, #0xfb8
  400b84:	br	x17

0000000000400b88 <mac_selinux_finish@plt>:
  400b88:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b8c:	ldr	x17, [x16, #4032]
  400b90:	add	x16, x16, #0xfc0
  400b94:	br	x17

0000000000400b98 <log_assert_failed_realm@plt>:
  400b98:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400b9c:	ldr	x17, [x16, #4040]
  400ba0:	add	x16, x16, #0xfc8
  400ba4:	br	x17

0000000000400ba8 <access@plt>:
  400ba8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400bac:	ldr	x17, [x16, #4048]
  400bb0:	add	x16, x16, #0xfd0
  400bb4:	br	x17

0000000000400bb8 <__errno_location@plt>:
  400bb8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400bbc:	ldr	x17, [x16, #4056]
  400bc0:	add	x16, x16, #0xfd8
  400bc4:	br	x17

0000000000400bc8 <strlen@plt>:
  400bc8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400bcc:	ldr	x17, [x16, #4064]
  400bd0:	add	x16, x16, #0xfe0
  400bd4:	br	x17

0000000000400bd8 <stpcpy@plt>:
  400bd8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400bdc:	ldr	x17, [x16, #4072]
  400be0:	add	x16, x16, #0xfe8
  400be4:	br	x17

0000000000400be8 <mkdir_parents_label@plt>:
  400be8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400bec:	ldr	x17, [x16, #4080]
  400bf0:	add	x16, x16, #0xff0
  400bf4:	br	x17

0000000000400bf8 <symlink@plt>:
  400bf8:	adrp	x16, 41f000 <__FRAME_END__+0x1d110>
  400bfc:	ldr	x17, [x16, #4088]
  400c00:	add	x16, x16, #0xff8
  400c04:	br	x17

Disassembly of section .text:

0000000000400c08 <_start>:
  400c08:	mov	x29, #0x0                   	// #0
  400c0c:	mov	x30, #0x0                   	// #0
  400c10:	mov	x5, x0
  400c14:	ldr	x1, [sp]
  400c18:	add	x2, sp, #0x8
  400c1c:	mov	x6, sp
  400c20:	movz	x0, #0x0, lsl #48
  400c24:	movk	x0, #0x0, lsl #32
  400c28:	movk	x0, #0x40, lsl #16
  400c2c:	movk	x0, #0xdd0
  400c30:	movz	x3, #0x0, lsl #48
  400c34:	movk	x3, #0x0, lsl #32
  400c38:	movk	x3, #0x40, lsl #16
  400c3c:	movk	x3, #0x1ac8
  400c40:	movz	x4, #0x0, lsl #48
  400c44:	movk	x4, #0x0, lsl #32
  400c48:	movk	x4, #0x40, lsl #16
  400c4c:	movk	x4, #0x1b48
  400c50:	bl	400ae8 <__libc_start_main@plt>
  400c54:	bl	400af8 <abort@plt>

0000000000400c58 <call_weak_fn>:
  400c58:	adrp	x0, 41f000 <__FRAME_END__+0x1d110>
  400c5c:	ldr	x0, [x0, #3904]
  400c60:	cbz	x0, 400c68 <call_weak_fn+0x10>
  400c64:	b	400b08 <__gmon_start__@plt>
  400c68:	ret

0000000000400c6c <deregister_tm_clones>:
  400c6c:	stp	x29, x30, [sp, #-32]!
  400c70:	mov	x29, sp
  400c74:	adrp	x0, 420000 <completed.8445>
  400c78:	add	x0, x0, #0x0
  400c7c:	str	x0, [sp, #24]
  400c80:	ldr	x0, [sp, #24]
  400c84:	str	x0, [sp, #24]
  400c88:	ldr	x1, [sp, #24]
  400c8c:	adrp	x0, 420000 <completed.8445>
  400c90:	add	x0, x0, #0x0
  400c94:	cmp	x1, x0
  400c98:	b.eq	400cd4 <deregister_tm_clones+0x68>  // b.none
  400c9c:	adrp	x0, 401000 <run+0x44>
  400ca0:	add	x0, x0, #0xb60
  400ca4:	ldr	x0, [x0]
  400ca8:	str	x0, [sp, #16]
  400cac:	ldr	x0, [sp, #16]
  400cb0:	str	x0, [sp, #16]
  400cb4:	ldr	x0, [sp, #16]
  400cb8:	cmp	x0, #0x0
  400cbc:	b.eq	400cd8 <deregister_tm_clones+0x6c>  // b.none
  400cc0:	ldr	x1, [sp, #16]
  400cc4:	adrp	x0, 420000 <completed.8445>
  400cc8:	add	x0, x0, #0x0
  400ccc:	blr	x1
  400cd0:	b	400cd8 <deregister_tm_clones+0x6c>
  400cd4:	nop
  400cd8:	ldp	x29, x30, [sp], #32
  400cdc:	ret

0000000000400ce0 <register_tm_clones>:
  400ce0:	stp	x29, x30, [sp, #-48]!
  400ce4:	mov	x29, sp
  400ce8:	adrp	x0, 420000 <completed.8445>
  400cec:	add	x0, x0, #0x0
  400cf0:	str	x0, [sp, #40]
  400cf4:	ldr	x0, [sp, #40]
  400cf8:	str	x0, [sp, #40]
  400cfc:	ldr	x1, [sp, #40]
  400d00:	adrp	x0, 420000 <completed.8445>
  400d04:	add	x0, x0, #0x0
  400d08:	sub	x0, x1, x0
  400d0c:	asr	x0, x0, #3
  400d10:	lsr	x1, x0, #63
  400d14:	add	x0, x1, x0
  400d18:	asr	x0, x0, #1
  400d1c:	str	x0, [sp, #32]
  400d20:	ldr	x0, [sp, #32]
  400d24:	cmp	x0, #0x0
  400d28:	b.eq	400d68 <register_tm_clones+0x88>  // b.none
  400d2c:	adrp	x0, 401000 <run+0x44>
  400d30:	add	x0, x0, #0xb68
  400d34:	ldr	x0, [x0]
  400d38:	str	x0, [sp, #24]
  400d3c:	ldr	x0, [sp, #24]
  400d40:	str	x0, [sp, #24]
  400d44:	ldr	x0, [sp, #24]
  400d48:	cmp	x0, #0x0
  400d4c:	b.eq	400d6c <register_tm_clones+0x8c>  // b.none
  400d50:	ldr	x2, [sp, #24]
  400d54:	ldr	x1, [sp, #32]
  400d58:	adrp	x0, 420000 <completed.8445>
  400d5c:	add	x0, x0, #0x0
  400d60:	blr	x2
  400d64:	b	400d6c <register_tm_clones+0x8c>
  400d68:	nop
  400d6c:	ldp	x29, x30, [sp], #48
  400d70:	ret

0000000000400d74 <__do_global_dtors_aux>:
  400d74:	stp	x29, x30, [sp, #-16]!
  400d78:	mov	x29, sp
  400d7c:	adrp	x0, 420000 <completed.8445>
  400d80:	add	x0, x0, #0x0
  400d84:	ldrb	w0, [x0]
  400d88:	and	x0, x0, #0xff
  400d8c:	cmp	x0, #0x0
  400d90:	b.ne	400dac <__do_global_dtors_aux+0x38>  // b.any
  400d94:	bl	400c6c <deregister_tm_clones>
  400d98:	adrp	x0, 420000 <completed.8445>
  400d9c:	add	x0, x0, #0x0
  400da0:	mov	w1, #0x1                   	// #1
  400da4:	strb	w1, [x0]
  400da8:	b	400db0 <__do_global_dtors_aux+0x3c>
  400dac:	nop
  400db0:	ldp	x29, x30, [sp], #16
  400db4:	ret

0000000000400db8 <frame_dummy>:
  400db8:	stp	x29, x30, [sp, #-16]!
  400dbc:	mov	x29, sp
  400dc0:	bl	400ce0 <register_tm_clones>
  400dc4:	nop
  400dc8:	ldp	x29, x30, [sp], #16
  400dcc:	ret

0000000000400dd0 <main>:
  400dd0:	sub	sp, sp, #0x80
  400dd4:	stp	x29, x30, [sp, #112]
  400dd8:	add	x29, sp, #0x70
  400ddc:	adrp	x8, 401000 <run+0x44>
  400de0:	add	x8, x8, #0xb70
  400de4:	add	x2, x8, #0x3
  400de8:	adrp	x8, 401000 <run+0x44>
  400dec:	add	x8, x8, #0xbd0
  400df0:	stur	wzr, [x29, #-4]
  400df4:	stur	w0, [x29, #-8]
  400df8:	stur	x1, [x29, #-16]
  400dfc:	ldur	w0, [x29, #-8]
  400e00:	ldur	x1, [x29, #-16]
  400e04:	stur	x2, [x29, #-48]
  400e08:	str	x8, [sp, #56]
  400e0c:	bl	400f88 <save_argc_argv>
  400e10:	bl	400b18 <log_setup_generator@plt>
  400e14:	ldur	w9, [x29, #-8]
  400e18:	cmp	w9, #0x1
  400e1c:	b.le	400eb8 <main+0xe8>
  400e20:	ldur	w8, [x29, #-8]
  400e24:	cmp	w8, #0x4
  400e28:	b.eq	400eb8 <main+0xe8>  // b.none
  400e2c:	mov	w8, #0x3                   	// #3
  400e30:	stur	w8, [x29, #-24]
  400e34:	mov	w8, #0x16                  	// #22
  400e38:	movk	w8, #0x4000, lsl #16
  400e3c:	stur	w8, [x29, #-28]
  400e40:	stur	wzr, [x29, #-32]
  400e44:	ldur	w0, [x29, #-32]
  400e48:	bl	400b28 <log_get_max_level_realm@plt>
  400e4c:	ldur	w8, [x29, #-24]
  400e50:	and	w8, w8, #0x7
  400e54:	cmp	w0, w8
  400e58:	b.lt	400e90 <main+0xc0>  // b.tstop
  400e5c:	ldur	w8, [x29, #-32]
  400e60:	ldur	w9, [x29, #-24]
  400e64:	orr	w0, w9, w8, lsl #10
  400e68:	ldur	w1, [x29, #-28]
  400e6c:	ldur	x2, [x29, #-48]
  400e70:	mov	w3, #0x47                  	// #71
  400e74:	adrp	x4, 401000 <run+0x44>
  400e78:	add	x4, x4, #0xb9f
  400e7c:	adrp	x5, 401000 <run+0x44>
  400e80:	add	x5, x5, #0xba4
  400e84:	bl	400b38 <log_internal_realm@plt>
  400e88:	str	w0, [sp, #52]
  400e8c:	b	400ea4 <main+0xd4>
  400e90:	ldur	w0, [x29, #-28]
  400e94:	bl	400b48 <abs@plt>
  400e98:	mov	w8, wzr
  400e9c:	subs	w8, w8, w0, uxtb
  400ea0:	str	w8, [sp, #52]
  400ea4:	ldr	w8, [sp, #52]
  400ea8:	stur	w8, [x29, #-36]
  400eac:	ldur	w8, [x29, #-36]
  400eb0:	stur	w8, [x29, #-4]
  400eb4:	b	400f78 <main+0x1a8>
  400eb8:	ldur	w8, [x29, #-8]
  400ebc:	cmp	w8, #0x1
  400ec0:	b.le	400ed4 <main+0x104>
  400ec4:	ldur	x8, [x29, #-16]
  400ec8:	ldr	x8, [x8, #8]
  400ecc:	str	x8, [sp, #40]
  400ed0:	b	400edc <main+0x10c>
  400ed4:	ldr	x8, [sp, #56]
  400ed8:	str	x8, [sp, #40]
  400edc:	ldr	x8, [sp, #40]
  400ee0:	ldur	w9, [x29, #-8]
  400ee4:	cmp	w9, #0x1
  400ee8:	str	x8, [sp, #32]
  400eec:	b.le	400f00 <main+0x130>
  400ef0:	ldur	x8, [x29, #-16]
  400ef4:	ldr	x8, [x8, #16]
  400ef8:	str	x8, [sp, #24]
  400efc:	b	400f08 <main+0x138>
  400f00:	ldr	x8, [sp, #56]
  400f04:	str	x8, [sp, #24]
  400f08:	ldr	x8, [sp, #24]
  400f0c:	ldur	w9, [x29, #-8]
  400f10:	cmp	w9, #0x1
  400f14:	str	x8, [sp, #16]
  400f18:	b.le	400f2c <main+0x15c>
  400f1c:	ldur	x8, [x29, #-16]
  400f20:	ldr	x8, [x8, #24]
  400f24:	str	x8, [sp, #8]
  400f28:	b	400f34 <main+0x164>
  400f2c:	ldr	x8, [sp, #56]
  400f30:	str	x8, [sp, #8]
  400f34:	ldr	x8, [sp, #8]
  400f38:	ldr	x0, [sp, #32]
  400f3c:	ldr	x1, [sp, #16]
  400f40:	mov	x2, x8
  400f44:	bl	400fbc <run>
  400f48:	stur	w0, [x29, #-20]
  400f4c:	bl	400b58 <ask_password_agent_close@plt>
  400f50:	bl	400b68 <polkit_agent_close@plt>
  400f54:	bl	400b78 <pager_close@plt>
  400f58:	bl	400b88 <mac_selinux_finish@plt>
  400f5c:	bl	401128 <static_destruct>
  400f60:	ldur	w9, [x29, #-20]
  400f64:	mov	w10, wzr
  400f68:	mov	w11, #0x1                   	// #1
  400f6c:	cmp	w9, #0x0
  400f70:	csel	w9, w11, w10, lt  // lt = tstop
  400f74:	stur	w9, [x29, #-4]
  400f78:	ldur	w0, [x29, #-4]
  400f7c:	ldp	x29, x30, [sp, #112]
  400f80:	add	sp, sp, #0x80
  400f84:	ret

0000000000400f88 <save_argc_argv>:
  400f88:	sub	sp, sp, #0x10
  400f8c:	adrp	x8, 420000 <completed.8445>
  400f90:	add	x8, x8, #0x10
  400f94:	adrp	x9, 420000 <completed.8445>
  400f98:	add	x9, x9, #0x18
  400f9c:	str	w0, [sp, #12]
  400fa0:	str	x1, [sp]
  400fa4:	ldr	w10, [sp, #12]
  400fa8:	str	w10, [x8]
  400fac:	ldr	x8, [sp]
  400fb0:	str	x8, [x9]
  400fb4:	add	sp, sp, #0x10
  400fb8:	ret

0000000000400fbc <run>:
  400fbc:	sub	sp, sp, #0x50
  400fc0:	stp	x29, x30, [sp, #64]
  400fc4:	add	x29, sp, #0x40
  400fc8:	adrp	x8, 401000 <run+0x44>
  400fcc:	add	x8, x8, #0xb70
  400fd0:	add	x8, x8, #0x3
  400fd4:	stur	x0, [x29, #-8]
  400fd8:	stur	x1, [x29, #-16]
  400fdc:	stur	x2, [x29, #-24]
  400fe0:	stur	wzr, [x29, #-28]
  400fe4:	str	wzr, [sp, #32]
  400fe8:	str	x8, [sp, #8]
  400fec:	ldur	x8, [x29, #-8]
  400ff0:	adrp	x9, 420000 <completed.8445>
  400ff4:	add	x9, x9, #0x8
  400ff8:	str	x8, [x9]
  400ffc:	cmp	x8, #0x0
  401000:	cset	w10, ne  // ne = any
  401004:	mov	w11, #0x1                   	// #1
  401008:	eor	w10, w10, #0x1
  40100c:	eor	w10, w10, w11
  401010:	eor	w10, w10, w11
  401014:	and	w10, w10, #0x1
  401018:	mov	w0, w10
  40101c:	sxtw	x8, w0
  401020:	cbz	x8, 401048 <run+0x8c>
  401024:	mov	w8, wzr
  401028:	mov	w0, w8
  40102c:	adrp	x1, 401000 <run+0x44>
  401030:	add	x1, x1, #0xbd5
  401034:	ldr	x2, [sp, #8]
  401038:	mov	w3, #0x3c                  	// #60
  40103c:	adrp	x4, 401000 <run+0x44>
  401040:	add	x4, x4, #0xbe5
  401044:	bl	400b98 <log_assert_failed_realm@plt>
  401048:	adrp	x0, 401000 <run+0x44>
  40104c:	add	x0, x0, #0xc17
  401050:	bl	4011a8 <check_executable>
  401054:	cmp	w0, #0x0
  401058:	cset	w8, lt  // lt = tstop
  40105c:	tbnz	w8, #0, 4010f0 <run+0x134>
  401060:	mov	w8, #0x7                   	// #7
  401064:	str	w8, [sp, #28]
  401068:	str	wzr, [sp, #24]
  40106c:	str	wzr, [sp, #20]
  401070:	ldr	w0, [sp, #20]
  401074:	bl	400b28 <log_get_max_level_realm@plt>
  401078:	ldr	w8, [sp, #28]
  40107c:	and	w8, w8, #0x7
  401080:	cmp	w0, w8
  401084:	b.lt	4010bc <run+0x100>  // b.tstop
  401088:	ldr	w8, [sp, #20]
  40108c:	ldr	w9, [sp, #28]
  401090:	orr	w0, w9, w8, lsl #10
  401094:	ldr	w1, [sp, #24]
  401098:	ldr	x2, [sp, #8]
  40109c:	mov	w3, #0x3f                  	// #63
  4010a0:	adrp	x4, 401000 <run+0x44>
  4010a4:	add	x4, x4, #0xc25
  4010a8:	adrp	x5, 401000 <run+0x44>
  4010ac:	add	x5, x5, #0xc29
  4010b0:	bl	400b38 <log_internal_realm@plt>
  4010b4:	str	w0, [sp, #4]
  4010b8:	b	4010d0 <run+0x114>
  4010bc:	ldr	w0, [sp, #24]
  4010c0:	bl	400b48 <abs@plt>
  4010c4:	mov	w8, wzr
  4010c8:	subs	w8, w8, w0, uxtb
  4010cc:	str	w8, [sp, #4]
  4010d0:	ldr	w8, [sp, #4]
  4010d4:	str	w8, [sp, #16]
  4010d8:	adrp	x0, 401000 <run+0x44>
  4010dc:	add	x0, x0, #0xc50
  4010e0:	adrp	x1, 401000 <run+0x44>
  4010e4:	add	x1, x1, #0xc61
  4010e8:	bl	401414 <add_symlink>
  4010ec:	stur	w0, [x29, #-28]
  4010f0:	ldur	w8, [x29, #-28]
  4010f4:	cmp	w8, #0x0
  4010f8:	cset	w8, ge  // ge = tcont
  4010fc:	tbnz	w8, #0, 40110c <run+0x150>
  401100:	ldur	w8, [x29, #-28]
  401104:	str	w8, [sp]
  401108:	b	401114 <run+0x158>
  40110c:	ldr	w8, [sp, #32]
  401110:	str	w8, [sp]
  401114:	ldr	w8, [sp]
  401118:	mov	w0, w8
  40111c:	ldp	x29, x30, [sp, #64]
  401120:	add	sp, sp, #0x50
  401124:	ret

0000000000401128 <static_destruct>:
  401128:	sub	sp, sp, #0x20
  40112c:	stp	x29, x30, [sp, #16]
  401130:	add	x29, sp, #0x10
  401134:	adrp	x8, 41f000 <__FRAME_END__+0x1d110>
  401138:	ldr	x8, [x8, #3912]
  40113c:	str	x8, [sp]
  401140:	cbnz	x8, 401148 <static_destruct+0x20>
  401144:	b	40119c <static_destruct+0x74>
  401148:	ldr	x0, [sp]
  40114c:	mov	x1, #0x8                   	// #8
  401150:	bl	401a94 <ALIGN_TO>
  401154:	str	x0, [sp, #8]
  401158:	ldr	x8, [sp, #8]
  40115c:	adrp	x9, 41f000 <__FRAME_END__+0x1d110>
  401160:	ldr	x9, [x9, #3920]
  401164:	cmp	x8, x9
  401168:	b.cs	40119c <static_destruct+0x74>  // b.hs, b.nlast
  40116c:	ldr	x8, [sp, #8]
  401170:	ldr	x8, [x8, #8]
  401174:	ldr	x9, [sp, #8]
  401178:	ldr	x0, [x9]
  40117c:	blr	x8
  401180:	ldr	x8, [sp, #8]
  401184:	add	x8, x8, #0x10
  401188:	mov	x0, x8
  40118c:	mov	x1, #0x8                   	// #8
  401190:	bl	401a94 <ALIGN_TO>
  401194:	str	x0, [sp, #8]
  401198:	b	401158 <static_destruct+0x30>
  40119c:	ldp	x29, x30, [sp, #16]
  4011a0:	add	sp, sp, #0x20
  4011a4:	ret

00000000004011a8 <check_executable>:
  4011a8:	sub	sp, sp, #0x70
  4011ac:	stp	x29, x30, [sp, #96]
  4011b0:	add	x29, sp, #0x60
  4011b4:	adrp	x8, 401000 <run+0x44>
  4011b8:	add	x8, x8, #0xb70
  4011bc:	add	x8, x8, #0x3
  4011c0:	adrp	x9, 401000 <run+0x44>
  4011c4:	add	x9, x9, #0xc9b
  4011c8:	stur	x0, [x29, #-16]
  4011cc:	str	x8, [sp, #24]
  4011d0:	str	x9, [sp, #16]
  4011d4:	ldur	x8, [x29, #-16]
  4011d8:	cmp	x8, #0x0
  4011dc:	cset	w9, ne  // ne = any
  4011e0:	mov	w10, #0x1                   	// #1
  4011e4:	eor	w9, w9, #0x1
  4011e8:	eor	w9, w9, w10
  4011ec:	eor	w9, w9, w10
  4011f0:	and	w9, w9, #0x1
  4011f4:	mov	w0, w9
  4011f8:	sxtw	x8, w0
  4011fc:	cbz	x8, 401224 <check_executable+0x7c>
  401200:	mov	w8, wzr
  401204:	mov	w0, w8
  401208:	adrp	x1, 401000 <run+0x44>
  40120c:	add	x1, x1, #0xc73
  401210:	ldr	x2, [sp, #24]
  401214:	mov	w3, #0x2b                  	// #43
  401218:	adrp	x4, 401000 <run+0x44>
  40121c:	add	x4, x4, #0xc78
  401220:	bl	400b98 <log_assert_failed_realm@plt>
  401224:	ldur	x0, [x29, #-16]
  401228:	mov	w1, #0x1                   	// #1
  40122c:	bl	400ba8 <access@plt>
  401230:	cmp	w0, #0x0
  401234:	cset	w8, ge  // ge = tcont
  401238:	tbnz	w8, #0, 401400 <check_executable+0x258>
  40123c:	bl	400bb8 <__errno_location@plt>
  401240:	ldr	w8, [x0]
  401244:	cmp	w8, #0x2
  401248:	b.ne	4012d8 <check_executable+0x130>  // b.any
  40124c:	mov	w8, #0x7                   	// #7
  401250:	stur	w8, [x29, #-20]
  401254:	bl	400bb8 <__errno_location@plt>
  401258:	ldr	w8, [x0]
  40125c:	stur	w8, [x29, #-24]
  401260:	stur	wzr, [x29, #-28]
  401264:	ldur	w0, [x29, #-28]
  401268:	bl	400b28 <log_get_max_level_realm@plt>
  40126c:	ldur	w8, [x29, #-20]
  401270:	and	w8, w8, #0x7
  401274:	cmp	w0, w8
  401278:	b.lt	4012b0 <check_executable+0x108>  // b.tstop
  40127c:	ldur	w8, [x29, #-28]
  401280:	ldur	w9, [x29, #-20]
  401284:	orr	w0, w9, w8, lsl #10
  401288:	ldur	w1, [x29, #-24]
  40128c:	ldur	x6, [x29, #-16]
  401290:	ldr	x2, [sp, #24]
  401294:	mov	w3, #0x2f                  	// #47
  401298:	ldr	x4, [sp, #16]
  40129c:	adrp	x5, 401000 <run+0x44>
  4012a0:	add	x5, x5, #0xcac
  4012a4:	bl	400b38 <log_internal_realm@plt>
  4012a8:	str	w0, [sp, #12]
  4012ac:	b	4012c4 <check_executable+0x11c>
  4012b0:	ldur	w0, [x29, #-24]
  4012b4:	bl	400b48 <abs@plt>
  4012b8:	mov	w8, wzr
  4012bc:	subs	w8, w8, w0, uxtb
  4012c0:	str	w8, [sp, #12]
  4012c4:	ldr	w8, [sp, #12]
  4012c8:	stur	w8, [x29, #-32]
  4012cc:	ldur	w8, [x29, #-32]
  4012d0:	stur	w8, [x29, #-4]
  4012d4:	b	401404 <check_executable+0x25c>
  4012d8:	bl	400bb8 <__errno_location@plt>
  4012dc:	ldr	w8, [x0]
  4012e0:	cmp	w8, #0xd
  4012e4:	b.ne	401374 <check_executable+0x1cc>  // b.any
  4012e8:	mov	w8, #0x6                   	// #6
  4012ec:	stur	w8, [x29, #-36]
  4012f0:	bl	400bb8 <__errno_location@plt>
  4012f4:	ldr	w8, [x0]
  4012f8:	stur	w8, [x29, #-40]
  4012fc:	stur	wzr, [x29, #-44]
  401300:	ldur	w0, [x29, #-44]
  401304:	bl	400b28 <log_get_max_level_realm@plt>
  401308:	ldur	w8, [x29, #-36]
  40130c:	and	w8, w8, #0x7
  401310:	cmp	w0, w8
  401314:	b.lt	40134c <check_executable+0x1a4>  // b.tstop
  401318:	ldur	w8, [x29, #-44]
  40131c:	ldur	w9, [x29, #-36]
  401320:	orr	w0, w9, w8, lsl #10
  401324:	ldur	w1, [x29, #-40]
  401328:	ldur	x6, [x29, #-16]
  40132c:	ldr	x2, [sp, #24]
  401330:	mov	w3, #0x31                  	// #49
  401334:	ldr	x4, [sp, #16]
  401338:	adrp	x5, 401000 <run+0x44>
  40133c:	add	x5, x5, #0xcc9
  401340:	bl	400b38 <log_internal_realm@plt>
  401344:	str	w0, [sp, #8]
  401348:	b	401360 <check_executable+0x1b8>
  40134c:	ldur	w0, [x29, #-40]
  401350:	bl	400b48 <abs@plt>
  401354:	mov	w8, wzr
  401358:	subs	w8, w8, w0, uxtb
  40135c:	str	w8, [sp, #8]
  401360:	ldr	w8, [sp, #8]
  401364:	str	w8, [sp, #48]
  401368:	ldr	w8, [sp, #48]
  40136c:	stur	w8, [x29, #-4]
  401370:	b	401404 <check_executable+0x25c>
  401374:	mov	w8, #0x4                   	// #4
  401378:	str	w8, [sp, #44]
  40137c:	bl	400bb8 <__errno_location@plt>
  401380:	ldr	w8, [x0]
  401384:	str	w8, [sp, #40]
  401388:	str	wzr, [sp, #36]
  40138c:	ldr	w0, [sp, #36]
  401390:	bl	400b28 <log_get_max_level_realm@plt>
  401394:	ldr	w8, [sp, #44]
  401398:	and	w8, w8, #0x7
  40139c:	cmp	w0, w8
  4013a0:	b.lt	4013d8 <check_executable+0x230>  // b.tstop
  4013a4:	ldr	w8, [sp, #36]
  4013a8:	ldr	w9, [sp, #44]
  4013ac:	orr	w0, w9, w8, lsl #10
  4013b0:	ldr	w1, [sp, #40]
  4013b4:	ldur	x6, [x29, #-16]
  4013b8:	ldr	x2, [sp, #24]
  4013bc:	mov	w3, #0x33                  	// #51
  4013c0:	ldr	x4, [sp, #16]
  4013c4:	adrp	x5, 401000 <run+0x44>
  4013c8:	add	x5, x5, #0xcf0
  4013cc:	bl	400b38 <log_internal_realm@plt>
  4013d0:	str	w0, [sp, #4]
  4013d4:	b	4013ec <check_executable+0x244>
  4013d8:	ldr	w0, [sp, #40]
  4013dc:	bl	400b48 <abs@plt>
  4013e0:	mov	w8, wzr
  4013e4:	subs	w8, w8, w0, uxtb
  4013e8:	str	w8, [sp, #4]
  4013ec:	ldr	w8, [sp, #4]
  4013f0:	str	w8, [sp, #32]
  4013f4:	ldr	w8, [sp, #32]
  4013f8:	stur	w8, [x29, #-4]
  4013fc:	b	401404 <check_executable+0x25c>
  401400:	stur	wzr, [x29, #-4]
  401404:	ldur	w0, [x29, #-4]
  401408:	ldp	x29, x30, [sp, #96]
  40140c:	add	sp, sp, #0x70
  401410:	ret

0000000000401414 <add_symlink>:
  401414:	stp	x29, x30, [sp, #-32]!
  401418:	str	x28, [sp, #16]
  40141c:	mov	x29, sp
  401420:	sub	sp, sp, #0x110
  401424:	adrp	x8, 401000 <run+0x44>
  401428:	add	x8, x8, #0xb70
  40142c:	add	x8, x8, #0x3
  401430:	adrp	x9, 401000 <run+0x44>
  401434:	add	x9, x9, #0xd38
  401438:	stur	x0, [x29, #-16]
  40143c:	stur	x1, [x29, #-24]
  401440:	stur	x8, [x29, #-232]
  401444:	stur	x9, [x29, #-240]
  401448:	ldur	x8, [x29, #-16]
  40144c:	cmp	x8, #0x0
  401450:	cset	w9, ne  // ne = any
  401454:	mov	w10, #0x1                   	// #1
  401458:	eor	w9, w9, #0x1
  40145c:	eor	w9, w9, w10
  401460:	eor	w9, w9, w10
  401464:	and	w9, w9, #0x1
  401468:	mov	w0, w9
  40146c:	sxtw	x8, w0
  401470:	cbz	x8, 401494 <add_symlink+0x80>
  401474:	mov	w8, wzr
  401478:	mov	w0, w8
  40147c:	adrp	x1, 401000 <run+0x44>
  401480:	add	x1, x1, #0xd30
  401484:	ldur	x2, [x29, #-232]
  401488:	mov	w3, #0x18                  	// #24
  40148c:	ldur	x4, [x29, #-240]
  401490:	bl	400b98 <log_assert_failed_realm@plt>
  401494:	ldur	x8, [x29, #-24]
  401498:	cmp	x8, #0x0
  40149c:	cset	w9, ne  // ne = any
  4014a0:	mov	w10, #0x1                   	// #1
  4014a4:	eor	w9, w9, #0x1
  4014a8:	eor	w9, w9, w10
  4014ac:	eor	w9, w9, w10
  4014b0:	and	w9, w9, #0x1
  4014b4:	mov	w0, w9
  4014b8:	sxtw	x8, w0
  4014bc:	cbz	x8, 4014e0 <add_symlink+0xcc>
  4014c0:	mov	w8, wzr
  4014c4:	mov	w0, w8
  4014c8:	adrp	x1, 401000 <run+0x44>
  4014cc:	add	x1, x1, #0xd64
  4014d0:	ldur	x2, [x29, #-232]
  4014d4:	mov	w3, #0x19                  	// #25
  4014d8:	ldur	x4, [x29, #-240]
  4014dc:	bl	400b98 <log_assert_failed_realm@plt>
  4014e0:	sub	x8, x29, #0x38
  4014e4:	adrp	x9, 401000 <run+0x44>
  4014e8:	add	x9, x9, #0xd6a
  4014ec:	stur	x9, [x29, #-56]
  4014f0:	ldur	x9, [x29, #-16]
  4014f4:	str	x9, [x8, #8]
  4014f8:	stur	xzr, [x29, #-80]
  4014fc:	stur	xzr, [x29, #-88]
  401500:	ldur	x8, [x29, #-88]
  401504:	mov	w9, #0x0                   	// #0
  401508:	cmp	x8, #0x2
  40150c:	stur	w9, [x29, #-244]
  401510:	b.cs	401538 <add_symlink+0x124>  // b.hs, b.nlast
  401514:	ldur	x8, [x29, #-88]
  401518:	mov	x9, #0x8                   	// #8
  40151c:	mul	x8, x9, x8
  401520:	sub	x9, x29, #0x38
  401524:	add	x8, x9, x8
  401528:	ldr	x8, [x8]
  40152c:	cmp	x8, #0x0
  401530:	cset	w10, ne  // ne = any
  401534:	stur	w10, [x29, #-244]
  401538:	ldur	w8, [x29, #-244]
  40153c:	tbnz	w8, #0, 401544 <add_symlink+0x130>
  401540:	b	40157c <add_symlink+0x168>
  401544:	ldur	x8, [x29, #-88]
  401548:	mov	x9, #0x8                   	// #8
  40154c:	mul	x8, x9, x8
  401550:	sub	x9, x29, #0x38
  401554:	add	x8, x9, x8
  401558:	ldr	x0, [x8]
  40155c:	bl	400bc8 <strlen@plt>
  401560:	ldur	x8, [x29, #-80]
  401564:	add	x8, x8, x0
  401568:	stur	x8, [x29, #-80]
  40156c:	ldur	x8, [x29, #-88]
  401570:	add	x8, x8, #0x1
  401574:	stur	x8, [x29, #-88]
  401578:	b	401500 <add_symlink+0xec>
  40157c:	ldur	x8, [x29, #-80]
  401580:	add	x8, x8, #0x1
  401584:	stur	x8, [x29, #-96]
  401588:	ldur	x1, [x29, #-96]
  40158c:	mov	x0, #0x1                   	// #1
  401590:	bl	401a2c <size_multiply_overflow>
  401594:	mov	w8, #0x1                   	// #1
  401598:	eor	w9, w0, #0x1
  40159c:	eor	w9, w9, w8
  4015a0:	eor	w9, w9, w8
  4015a4:	eor	w8, w9, w8
  4015a8:	and	w8, w8, #0x1
  4015ac:	mov	w1, w8
  4015b0:	sxtw	x10, w1
  4015b4:	cbz	x10, 4015d8 <add_symlink+0x1c4>
  4015b8:	mov	w8, wzr
  4015bc:	mov	w0, w8
  4015c0:	adrp	x1, 401000 <run+0x44>
  4015c4:	add	x1, x1, #0xd7f
  4015c8:	ldur	x2, [x29, #-232]
  4015cc:	mov	w3, #0x1b                  	// #27
  4015d0:	ldur	x4, [x29, #-240]
  4015d4:	bl	400b98 <log_assert_failed_realm@plt>
  4015d8:	ldur	x8, [x29, #-96]
  4015dc:	mov	x9, #0x1                   	// #1
  4015e0:	mul	x8, x9, x8
  4015e4:	cmp	x8, #0x400, lsl #12
  4015e8:	cset	w10, ls  // ls = plast
  4015ec:	mov	w11, #0x1                   	// #1
  4015f0:	eor	w10, w10, #0x1
  4015f4:	eor	w10, w10, w11
  4015f8:	eor	w10, w10, w11
  4015fc:	and	w10, w10, #0x1
  401600:	mov	w0, w10
  401604:	sxtw	x8, w0
  401608:	cbz	x8, 40162c <add_symlink+0x218>
  40160c:	mov	w8, wzr
  401610:	mov	w0, w8
  401614:	adrp	x1, 401000 <run+0x44>
  401618:	add	x1, x1, #0xdaa
  40161c:	ldur	x2, [x29, #-232]
  401620:	mov	w3, #0x1b                  	// #27
  401624:	ldur	x4, [x29, #-240]
  401628:	bl	400b98 <log_assert_failed_realm@plt>
  40162c:	ldur	x8, [x29, #-96]
  401630:	mov	x9, #0x1                   	// #1
  401634:	mul	x8, x9, x8
  401638:	mul	x8, x8, x9
  40163c:	add	x8, x8, #0xf
  401640:	and	x8, x8, #0xfffffffffffffff0
  401644:	mov	x9, sp
  401648:	subs	x8, x9, x8
  40164c:	mov	sp, x8
  401650:	stur	x8, [x29, #-104]
  401654:	ldur	x8, [x29, #-104]
  401658:	stur	x8, [x29, #-64]
  40165c:	stur	x8, [x29, #-72]
  401660:	stur	xzr, [x29, #-88]
  401664:	ldur	x8, [x29, #-88]
  401668:	mov	w9, #0x0                   	// #0
  40166c:	cmp	x8, #0x2
  401670:	stur	w9, [x29, #-248]
  401674:	b.cs	40169c <add_symlink+0x288>  // b.hs, b.nlast
  401678:	ldur	x8, [x29, #-88]
  40167c:	mov	x9, #0x8                   	// #8
  401680:	mul	x8, x9, x8
  401684:	sub	x9, x29, #0x38
  401688:	add	x8, x9, x8
  40168c:	ldr	x8, [x8]
  401690:	cmp	x8, #0x0
  401694:	cset	w10, ne  // ne = any
  401698:	stur	w10, [x29, #-248]
  40169c:	ldur	w8, [x29, #-248]
  4016a0:	tbnz	w8, #0, 4016a8 <add_symlink+0x294>
  4016a4:	b	4016dc <add_symlink+0x2c8>
  4016a8:	ldur	x0, [x29, #-72]
  4016ac:	ldur	x8, [x29, #-88]
  4016b0:	mov	x9, #0x8                   	// #8
  4016b4:	mul	x8, x9, x8
  4016b8:	sub	x9, x29, #0x38
  4016bc:	add	x8, x9, x8
  4016c0:	ldr	x1, [x8]
  4016c4:	bl	400bd8 <stpcpy@plt>
  4016c8:	stur	x0, [x29, #-72]
  4016cc:	ldur	x8, [x29, #-88]
  4016d0:	add	x8, x8, #0x1
  4016d4:	stur	x8, [x29, #-88]
  4016d8:	b	401664 <add_symlink+0x250>
  4016dc:	ldur	x8, [x29, #-72]
  4016e0:	mov	w9, #0x0                   	// #0
  4016e4:	strb	w9, [x8]
  4016e8:	ldur	x8, [x29, #-64]
  4016ec:	stur	x8, [x29, #-112]
  4016f0:	ldur	x8, [x29, #-112]
  4016f4:	stur	x8, [x29, #-32]
  4016f8:	adrp	x8, 420000 <completed.8445>
  4016fc:	add	x8, x8, #0x8
  401700:	ldr	x8, [x8]
  401704:	sub	x10, x29, #0x98
  401708:	stur	x8, [x29, #-152]
  40170c:	adrp	x8, 401000 <run+0x44>
  401710:	add	x8, x8, #0xdc9
  401714:	str	x8, [x10, #8]
  401718:	ldur	x8, [x29, #-24]
  40171c:	str	x8, [x10, #16]
  401720:	adrp	x8, 401000 <run+0x44>
  401724:	add	x8, x8, #0xdcb
  401728:	str	x8, [x10, #24]
  40172c:	ldur	x8, [x29, #-16]
  401730:	str	x8, [x10, #32]
  401734:	stur	xzr, [x29, #-176]
  401738:	stur	xzr, [x29, #-184]
  40173c:	ldur	x8, [x29, #-184]
  401740:	mov	w9, #0x0                   	// #0
  401744:	cmp	x8, #0x5
  401748:	stur	w9, [x29, #-252]
  40174c:	b.cs	401774 <add_symlink+0x360>  // b.hs, b.nlast
  401750:	ldur	x8, [x29, #-184]
  401754:	mov	x9, #0x8                   	// #8
  401758:	mul	x8, x9, x8
  40175c:	sub	x9, x29, #0x98
  401760:	add	x8, x9, x8
  401764:	ldr	x8, [x8]
  401768:	cmp	x8, #0x0
  40176c:	cset	w10, ne  // ne = any
  401770:	stur	w10, [x29, #-252]
  401774:	ldur	w8, [x29, #-252]
  401778:	tbnz	w8, #0, 401780 <add_symlink+0x36c>
  40177c:	b	4017b8 <add_symlink+0x3a4>
  401780:	ldur	x8, [x29, #-184]
  401784:	mov	x9, #0x8                   	// #8
  401788:	mul	x8, x9, x8
  40178c:	sub	x9, x29, #0x98
  401790:	add	x8, x9, x8
  401794:	ldr	x0, [x8]
  401798:	bl	400bc8 <strlen@plt>
  40179c:	ldur	x8, [x29, #-176]
  4017a0:	add	x8, x8, x0
  4017a4:	stur	x8, [x29, #-176]
  4017a8:	ldur	x8, [x29, #-184]
  4017ac:	add	x8, x8, #0x1
  4017b0:	stur	x8, [x29, #-184]
  4017b4:	b	40173c <add_symlink+0x328>
  4017b8:	ldur	x8, [x29, #-176]
  4017bc:	add	x8, x8, #0x1
  4017c0:	stur	x8, [x29, #-192]
  4017c4:	ldur	x1, [x29, #-192]
  4017c8:	mov	x0, #0x1                   	// #1
  4017cc:	bl	401a2c <size_multiply_overflow>
  4017d0:	mov	w8, #0x1                   	// #1
  4017d4:	eor	w9, w0, #0x1
  4017d8:	eor	w9, w9, w8
  4017dc:	eor	w9, w9, w8
  4017e0:	eor	w8, w9, w8
  4017e4:	and	w8, w8, #0x1
  4017e8:	mov	w1, w8
  4017ec:	sxtw	x10, w1
  4017f0:	cbz	x10, 401814 <add_symlink+0x400>
  4017f4:	mov	w8, wzr
  4017f8:	mov	w0, w8
  4017fc:	adrp	x1, 401000 <run+0x44>
  401800:	add	x1, x1, #0xd7f
  401804:	ldur	x2, [x29, #-232]
  401808:	mov	w3, #0x1c                  	// #28
  40180c:	ldur	x4, [x29, #-240]
  401810:	bl	400b98 <log_assert_failed_realm@plt>
  401814:	ldur	x8, [x29, #-192]
  401818:	mov	x9, #0x1                   	// #1
  40181c:	mul	x8, x9, x8
  401820:	cmp	x8, #0x400, lsl #12
  401824:	cset	w10, ls  // ls = plast
  401828:	mov	w11, #0x1                   	// #1
  40182c:	eor	w10, w10, #0x1
  401830:	eor	w10, w10, w11
  401834:	eor	w10, w10, w11
  401838:	and	w10, w10, #0x1
  40183c:	mov	w0, w10
  401840:	sxtw	x8, w0
  401844:	cbz	x8, 401868 <add_symlink+0x454>
  401848:	mov	w8, wzr
  40184c:	mov	w0, w8
  401850:	adrp	x1, 401000 <run+0x44>
  401854:	add	x1, x1, #0xdaa
  401858:	ldur	x2, [x29, #-232]
  40185c:	mov	w3, #0x1c                  	// #28
  401860:	ldur	x4, [x29, #-240]
  401864:	bl	400b98 <log_assert_failed_realm@plt>
  401868:	ldur	x8, [x29, #-192]
  40186c:	mov	x9, #0x1                   	// #1
  401870:	mul	x8, x9, x8
  401874:	mul	x8, x8, x9
  401878:	add	x8, x8, #0xf
  40187c:	and	x8, x8, #0xfffffffffffffff0
  401880:	mov	x9, sp
  401884:	subs	x8, x9, x8
  401888:	mov	sp, x8
  40188c:	stur	x8, [x29, #-200]
  401890:	ldur	x8, [x29, #-200]
  401894:	stur	x8, [x29, #-160]
  401898:	stur	x8, [x29, #-168]
  40189c:	stur	xzr, [x29, #-184]
  4018a0:	ldur	x8, [x29, #-184]
  4018a4:	mov	w9, #0x0                   	// #0
  4018a8:	cmp	x8, #0x5
  4018ac:	stur	w9, [x29, #-256]
  4018b0:	b.cs	4018d8 <add_symlink+0x4c4>  // b.hs, b.nlast
  4018b4:	ldur	x8, [x29, #-184]
  4018b8:	mov	x9, #0x8                   	// #8
  4018bc:	mul	x8, x9, x8
  4018c0:	sub	x9, x29, #0x98
  4018c4:	add	x8, x9, x8
  4018c8:	ldr	x8, [x8]
  4018cc:	cmp	x8, #0x0
  4018d0:	cset	w10, ne  // ne = any
  4018d4:	stur	w10, [x29, #-256]
  4018d8:	ldur	w8, [x29, #-256]
  4018dc:	tbnz	w8, #0, 4018e4 <add_symlink+0x4d0>
  4018e0:	b	401918 <add_symlink+0x504>
  4018e4:	ldur	x0, [x29, #-168]
  4018e8:	ldur	x8, [x29, #-184]
  4018ec:	mov	x9, #0x8                   	// #8
  4018f0:	mul	x8, x9, x8
  4018f4:	sub	x9, x29, #0x98
  4018f8:	add	x8, x9, x8
  4018fc:	ldr	x1, [x8]
  401900:	bl	400bd8 <stpcpy@plt>
  401904:	stur	x0, [x29, #-168]
  401908:	ldur	x8, [x29, #-184]
  40190c:	add	x8, x8, #0x1
  401910:	stur	x8, [x29, #-184]
  401914:	b	4018a0 <add_symlink+0x48c>
  401918:	ldur	x8, [x29, #-168]
  40191c:	mov	w9, #0x0                   	// #0
  401920:	strb	w9, [x8]
  401924:	ldur	x8, [x29, #-160]
  401928:	stur	x8, [x29, #-208]
  40192c:	ldur	x8, [x29, #-208]
  401930:	stur	x8, [x29, #-40]
  401934:	ldur	x0, [x29, #-40]
  401938:	mov	w1, #0x1ed                 	// #493
  40193c:	bl	400be8 <mkdir_parents_label@plt>
  401940:	ldur	x8, [x29, #-32]
  401944:	ldur	x1, [x29, #-40]
  401948:	mov	x0, x8
  40194c:	bl	400bf8 <symlink@plt>
  401950:	cmp	w0, #0x0
  401954:	cset	w9, ge  // ge = tcont
  401958:	tbnz	w9, #0, 401a10 <add_symlink+0x5fc>
  40195c:	bl	400bb8 <__errno_location@plt>
  401960:	ldr	w8, [x0]
  401964:	cmp	w8, #0x11
  401968:	b.ne	401974 <add_symlink+0x560>  // b.any
  40196c:	stur	wzr, [x29, #-4]
  401970:	b	401a18 <add_symlink+0x604>
  401974:	mov	w8, #0x3                   	// #3
  401978:	stur	w8, [x29, #-212]
  40197c:	bl	400bb8 <__errno_location@plt>
  401980:	ldr	w8, [x0]
  401984:	stur	w8, [x29, #-216]
  401988:	stur	wzr, [x29, #-220]
  40198c:	ldur	w0, [x29, #-220]
  401990:	bl	400b28 <log_get_max_level_realm@plt>
  401994:	ldur	w8, [x29, #-212]
  401998:	and	w8, w8, #0x7
  40199c:	cmp	w0, w8
  4019a0:	b.lt	4019e0 <add_symlink+0x5cc>  // b.tstop
  4019a4:	ldur	w8, [x29, #-220]
  4019a8:	ldur	w9, [x29, #-212]
  4019ac:	orr	w0, w9, w8, lsl #10
  4019b0:	ldur	w1, [x29, #-216]
  4019b4:	ldur	x6, [x29, #-40]
  4019b8:	ldur	x2, [x29, #-232]
  4019bc:	mov	w3, #0x24                  	// #36
  4019c0:	adrp	x4, 401000 <run+0x44>
  4019c4:	add	x4, x4, #0xdd3
  4019c8:	adrp	x5, 401000 <run+0x44>
  4019cc:	add	x5, x5, #0xddf
  4019d0:	bl	400b38 <log_internal_realm@plt>
  4019d4:	sub	x8, x29, #0x4
  4019d8:	stur	w0, [x8, #-256]
  4019dc:	b	4019f8 <add_symlink+0x5e4>
  4019e0:	ldur	w0, [x29, #-216]
  4019e4:	bl	400b48 <abs@plt>
  4019e8:	mov	w8, wzr
  4019ec:	subs	w8, w8, w0, uxtb
  4019f0:	sub	x9, x29, #0x4
  4019f4:	stur	w8, [x9, #-256]
  4019f8:	sub	x8, x29, #0x4
  4019fc:	ldur	w8, [x8, #-256]
  401a00:	stur	w8, [x29, #-224]
  401a04:	ldur	w8, [x29, #-224]
  401a08:	stur	w8, [x29, #-4]
  401a0c:	b	401a18 <add_symlink+0x604>
  401a10:	mov	w8, #0x1                   	// #1
  401a14:	stur	w8, [x29, #-4]
  401a18:	ldur	w0, [x29, #-4]
  401a1c:	mov	sp, x29
  401a20:	ldr	x28, [sp, #16]
  401a24:	ldp	x29, x30, [sp], #32
  401a28:	ret

0000000000401a2c <size_multiply_overflow>:
  401a2c:	sub	sp, sp, #0x20
  401a30:	str	x0, [sp, #24]
  401a34:	str	x1, [sp, #16]
  401a38:	ldr	x8, [sp, #16]
  401a3c:	mov	w9, #0x0                   	// #0
  401a40:	str	w9, [sp, #12]
  401a44:	cbz	x8, 401a64 <size_multiply_overflow+0x38>
  401a48:	ldr	x8, [sp, #24]
  401a4c:	ldr	x9, [sp, #16]
  401a50:	mov	x10, #0xffffffffffffffff    	// #-1
  401a54:	udiv	x9, x10, x9
  401a58:	cmp	x8, x9
  401a5c:	cset	w11, hi  // hi = pmore
  401a60:	str	w11, [sp, #12]
  401a64:	ldr	w8, [sp, #12]
  401a68:	mov	w9, #0x1                   	// #1
  401a6c:	eor	w8, w8, #0x1
  401a70:	eor	w8, w8, w9
  401a74:	and	w8, w8, #0x1
  401a78:	mov	w0, w8
  401a7c:	sxtw	x10, w0
  401a80:	cmp	x10, #0x0
  401a84:	cset	w8, ne  // ne = any
  401a88:	and	w0, w8, #0x1
  401a8c:	add	sp, sp, #0x20
  401a90:	ret

0000000000401a94 <ALIGN_TO>:
  401a94:	sub	sp, sp, #0x10
  401a98:	str	x0, [sp, #8]
  401a9c:	str	x1, [sp]
  401aa0:	ldr	x8, [sp, #8]
  401aa4:	ldr	x9, [sp]
  401aa8:	add	x8, x8, x9
  401aac:	subs	x8, x8, #0x1
  401ab0:	ldr	x9, [sp]
  401ab4:	subs	x9, x9, #0x1
  401ab8:	bic	x0, x8, x9
  401abc:	add	sp, sp, #0x10
  401ac0:	ret
  401ac4:	udf	#0

0000000000401ac8 <__libc_csu_init>:
  401ac8:	stp	x29, x30, [sp, #-64]!
  401acc:	mov	x29, sp
  401ad0:	stp	x19, x20, [sp, #16]
  401ad4:	adrp	x20, 41f000 <__FRAME_END__+0x1d110>
  401ad8:	add	x20, x20, #0xd18
  401adc:	stp	x21, x22, [sp, #32]
  401ae0:	adrp	x21, 41f000 <__FRAME_END__+0x1d110>
  401ae4:	add	x21, x21, #0xd10
  401ae8:	sub	x20, x20, x21
  401aec:	mov	w22, w0
  401af0:	stp	x23, x24, [sp, #48]
  401af4:	mov	x23, x1
  401af8:	mov	x24, x2
  401afc:	bl	400ab0 <_init>
  401b00:	cmp	xzr, x20, asr #3
  401b04:	b.eq	401b30 <__libc_csu_init+0x68>  // b.none
  401b08:	asr	x20, x20, #3
  401b0c:	mov	x19, #0x0                   	// #0
  401b10:	ldr	x3, [x21, x19, lsl #3]
  401b14:	mov	x2, x24
  401b18:	add	x19, x19, #0x1
  401b1c:	mov	x1, x23
  401b20:	mov	w0, w22
  401b24:	blr	x3
  401b28:	cmp	x20, x19
  401b2c:	b.ne	401b10 <__libc_csu_init+0x48>  // b.any
  401b30:	ldp	x19, x20, [sp, #16]
  401b34:	ldp	x21, x22, [sp, #32]
  401b38:	ldp	x23, x24, [sp, #48]
  401b3c:	ldp	x29, x30, [sp], #64
  401b40:	ret
  401b44:	nop

0000000000401b48 <__libc_csu_fini>:
  401b48:	ret

Disassembly of section .fini:

0000000000401b4c <_fini>:
  401b4c:	stp	x29, x30, [sp, #-16]!
  401b50:	mov	x29, sp
  401b54:	ldp	x29, x30, [sp], #16
  401b58:	ret
