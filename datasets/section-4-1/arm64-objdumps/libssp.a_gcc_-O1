In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libssp.a_gcc_-O1:

ssp.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fail>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	mov	x24, x0
  1c:	mov	x22, x1
  20:	mov	x19, x2
  24:	mov	w1, #0x1                   	// #1
  28:	adrp	x0, 0 <fail>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <open>
  34:	cmn	w0, #0x1
  38:	b.eq	e4 <fail+0xe4>  // b.none
  3c:	mov	w21, w0
  40:	adrp	x0, 0 <__progname>
  44:	ldr	x25, [x0]
  48:	mov	x0, x25
  4c:	bl	0 <strlen>
  50:	mov	x23, x0
  54:	add	x19, x22, #0xd
  58:	add	x19, x19, x0
  5c:	add	x0, x19, #0xf
  60:	and	x0, x0, #0xfffffffffffffff0
  64:	sub	sp, sp, x0
  68:	mov	x20, sp
  6c:	mov	x2, x22
  70:	mov	x1, x24
  74:	mov	x0, x20
  78:	bl	0 <memcpy>
  7c:	add	x22, x20, x22
  80:	mov	x2, x23
  84:	mov	x1, x25
  88:	mov	x0, x22
  8c:	bl	0 <memcpy>
  90:	adrp	x0, 0 <fail>
  94:	add	x0, x0, #0x0
  98:	add	x1, x22, x23
  9c:	ldr	x2, [x0]
  a0:	str	x2, [x22, x23]
  a4:	ldur	x0, [x0, #5]
  a8:	stur	x0, [x1, #5]
  ac:	cbz	x19, d0 <fail+0xd0>
  b0:	mov	x2, x19
  b4:	mov	x1, x20
  b8:	mov	w0, w21
  bc:	bl	0 <write>
  c0:	tbnz	x0, #63, d0 <fail+0xd0>
  c4:	add	x20, x20, x0
  c8:	subs	x19, x19, x0
  cc:	b.ne	b0 <fail+0xb0>  // b.any
  d0:	mov	w0, w21
  d4:	bl	0 <close>
  d8:	str	wzr, [x29, #92]
  dc:	mov	x1, #0xffffffffffffffff    	// #-1
  e0:	b	114 <fail+0x114>
  e4:	mov	x2, x19
  e8:	adrp	x1, 0 <fail>
  ec:	add	x1, x1, #0x0
  f0:	mov	w0, #0x2                   	// #2
  f4:	bl	0 <syslog>
  f8:	b	d8 <fail+0xd8>
  fc:	brk	#0x3e8
 100:	mov	w0, #0x7f                  	// #127
 104:	bl	0 <_exit>
 108:	ldr	w0, [x29, #92]
 10c:	add	w0, w0, #0x1
 110:	str	w0, [x29, #92]
 114:	ldr	w0, [x29, #92]
 118:	cmp	w0, #0x2
 11c:	b.eq	100 <fail+0x100>  // b.none
 120:	b.gt	108 <fail+0x108>
 124:	cbz	w0, fc <fail+0xfc>
 128:	cmp	w0, #0x1
 12c:	b.ne	108 <fail+0x108>  // b.any
 130:	str	wzr, [x1]
 134:	b	108 <fail+0x108>

0000000000000138 <__guard_setup>:
 138:	adrp	x0, 0 <fail>
 13c:	ldr	x0, [x0]
 140:	cbz	x0, 148 <__guard_setup+0x10>
 144:	ret
 148:	stp	x29, x30, [sp, #-32]!
 14c:	mov	x29, sp
 150:	stp	x19, x20, [sp, #16]
 154:	mov	w1, #0x0                   	// #0
 158:	adrp	x0, 0 <fail>
 15c:	add	x0, x0, #0x0
 160:	bl	0 <open>
 164:	mov	w19, w0
 168:	cmn	w0, #0x1
 16c:	b.ne	198 <__guard_setup+0x60>  // b.any
 170:	adrp	x0, 0 <fail>
 174:	add	x1, x0, #0x0
 178:	mov	w2, #0xffffffff            	// #-1
 17c:	strb	w2, [x1, #7]
 180:	mov	w2, #0xa                   	// #10
 184:	strb	w2, [x1, #6]
 188:	strb	wzr, [x0]
 18c:	ldp	x19, x20, [sp, #16]
 190:	ldp	x29, x30, [sp], #32
 194:	ret
 198:	mov	x2, #0x8                   	// #8
 19c:	adrp	x1, 0 <fail>
 1a0:	add	x1, x1, #0x0
 1a4:	bl	0 <read>
 1a8:	mov	x20, x0
 1ac:	mov	w0, w19
 1b0:	bl	0 <close>
 1b4:	cmp	x20, #0x8
 1b8:	b.ne	170 <__guard_setup+0x38>  // b.any
 1bc:	adrp	x0, 0 <fail>
 1c0:	ldr	x0, [x0]
 1c4:	cbnz	x0, 18c <__guard_setup+0x54>
 1c8:	b	170 <__guard_setup+0x38>

00000000000001cc <__stack_chk_fail>:
 1cc:	stp	x29, x30, [sp, #-16]!
 1d0:	mov	x29, sp
 1d4:	adrp	x2, 0 <fail>
 1d8:	add	x2, x2, #0x0
 1dc:	mov	x1, #0x21                  	// #33
 1e0:	adrp	x0, 0 <fail>
 1e4:	add	x0, x0, #0x0
 1e8:	bl	0 <fail>

00000000000001ec <__chk_fail>:
 1ec:	stp	x29, x30, [sp, #-16]!
 1f0:	mov	x29, sp
 1f4:	adrp	x2, 0 <fail>
 1f8:	add	x2, x2, #0x0
 1fc:	mov	x1, #0x22                  	// #34
 200:	adrp	x0, 0 <fail>
 204:	add	x0, x0, #0x0
 208:	bl	0 <fail>

000000000000020c <__stack_chk_fail_local>:
 20c:	stp	x29, x30, [sp, #-16]!
 210:	mov	x29, sp
 214:	bl	1cc <__stack_chk_fail>

gets-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__gets_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x20, x0
  14:	mov	x0, #0x7ffffffe            	// #2147483646
  18:	cmp	x1, x0
  1c:	b.hi	b0 <__gets_chk+0xb0>  // b.pmore
  20:	mov	x19, x1
  24:	cmp	x1, #0x2, lsl #12
  28:	b.hi	bc <__gets_chk+0xbc>  // b.pmore
  2c:	add	x0, x1, #0x10
  30:	and	x0, x0, #0xfffffffffffffff0
  34:	sub	sp, sp, x0
  38:	mov	x22, sp
  3c:	adrp	x0, 0 <stdin>
  40:	ldr	x2, [x0]
  44:	add	w1, w1, #0x1
  48:	mov	x0, x22
  4c:	bl	0 <fgets>
  50:	cbz	x0, 9c <__gets_chk+0x9c>
  54:	mov	x0, x22
  58:	bl	0 <strlen>
  5c:	mov	x21, x0
  60:	cbz	x0, 74 <__gets_chk+0x74>
  64:	sub	x0, x0, #0x1
  68:	ldrb	w1, [x22, x0]
  6c:	cmp	w1, #0xa
  70:	csel	x21, x21, x0, ne  // ne = any
  74:	cmp	x21, x19
  78:	b.eq	104 <__gets_chk+0x104>  // b.none
  7c:	mov	x2, x21
  80:	mov	x1, x22
  84:	mov	x0, x20
  88:	bl	0 <memcpy>
  8c:	strb	wzr, [x20, x21]
  90:	mov	x0, x20
  94:	cmp	x19, #0x2, lsl #12
  98:	b.hi	e8 <__gets_chk+0xe8>  // b.pmore
  9c:	mov	sp, x29
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldp	x21, x22, [sp, #32]
  a8:	ldp	x29, x30, [sp], #48
  ac:	ret
  b0:	mov	x0, x20
  b4:	bl	0 <gets>
  b8:	b	9c <__gets_chk+0x9c>
  bc:	add	x0, x1, #0x1
  c0:	bl	0 <malloc>
  c4:	mov	x22, x0
  c8:	cbz	x0, f8 <__gets_chk+0xf8>
  cc:	adrp	x0, 0 <stdin>
  d0:	ldr	x2, [x0]
  d4:	add	w1, w19, #0x1
  d8:	mov	x0, x22
  dc:	bl	0 <fgets>
  e0:	cbnz	x0, 54 <__gets_chk+0x54>
  e4:	mov	x20, x0
  e8:	mov	x0, x22
  ec:	bl	0 <free>
  f0:	mov	x0, x20
  f4:	b	9c <__gets_chk+0x9c>
  f8:	mov	x0, x20
  fc:	bl	0 <gets>
 100:	b	9c <__gets_chk+0x9c>
 104:	bl	0 <__chk_fail>

memcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memcpy_chk>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cmp	x2, x3
   c:	b.hi	1c <__memcpy_chk+0x1c>  // b.pmore
  10:	bl	0 <memcpy>
  14:	ldp	x29, x30, [sp], #16
  18:	ret
  1c:	bl	0 <__chk_fail>

memmove-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memmove_chk>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cmp	x2, x3
   c:	b.hi	1c <__memmove_chk+0x1c>  // b.pmore
  10:	bl	0 <memmove>
  14:	ldp	x29, x30, [sp], #16
  18:	ret
  1c:	bl	0 <__chk_fail>

mempcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mempcpy_chk>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	cmp	x2, x3
  10:	b.hi	2c <__mempcpy_chk+0x2c>  // b.pmore
  14:	mov	x19, x2
  18:	bl	0 <memcpy>
  1c:	add	x0, x0, x19
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret
  2c:	bl	0 <__chk_fail>

memset-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memset_chk>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cmp	x2, x3
   c:	b.hi	1c <__memset_chk+0x1c>  // b.pmore
  10:	bl	0 <memset>
  14:	ldp	x29, x30, [sp], #16
  18:	ret
  1c:	bl	0 <__chk_fail>

snprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__snprintf_chk>:
   0:	stp	x29, x30, [sp, #-240]!
   4:	mov	x29, sp
   8:	str	x5, [sp, #216]
   c:	str	x6, [sp, #224]
  10:	str	x7, [sp, #232]
  14:	str	q0, [sp, #80]
  18:	str	q1, [sp, #96]
  1c:	str	q2, [sp, #112]
  20:	str	q3, [sp, #128]
  24:	str	q4, [sp, #144]
  28:	str	q5, [sp, #160]
  2c:	str	q6, [sp, #176]
  30:	str	q7, [sp, #192]
  34:	cmp	x1, x3
  38:	b.hi	84 <__snprintf_chk+0x84>  // b.pmore
  3c:	mov	x2, x4
  40:	add	x3, sp, #0xf0
  44:	str	x3, [sp, #48]
  48:	str	x3, [sp, #56]
  4c:	add	x3, sp, #0xd0
  50:	str	x3, [sp, #64]
  54:	mov	w3, #0xffffffe8            	// #-24
  58:	str	w3, [sp, #72]
  5c:	mov	w3, #0xffffff80            	// #-128
  60:	str	w3, [sp, #76]
  64:	ldp	x4, x5, [sp, #48]
  68:	stp	x4, x5, [sp, #16]
  6c:	ldp	x4, x5, [sp, #64]
  70:	stp	x4, x5, [sp, #32]
  74:	add	x3, sp, #0x10
  78:	bl	0 <vsnprintf>
  7c:	ldp	x29, x30, [sp], #240
  80:	ret
  84:	bl	0 <__chk_fail>

sprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sprintf_chk>:
   0:	stp	x29, x30, [sp, #-256]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x2
  10:	mov	x1, x3
  14:	str	x4, [sp, #224]
  18:	str	x5, [sp, #232]
  1c:	str	x6, [sp, #240]
  20:	str	x7, [sp, #248]
  24:	str	q0, [sp, #96]
  28:	str	q1, [sp, #112]
  2c:	str	q2, [sp, #128]
  30:	str	q3, [sp, #144]
  34:	str	q4, [sp, #160]
  38:	str	q5, [sp, #176]
  3c:	str	q6, [sp, #192]
  40:	str	q7, [sp, #208]
  44:	add	x2, sp, #0x100
  48:	str	x2, [sp, #64]
  4c:	str	x2, [sp, #72]
  50:	add	x2, sp, #0xe0
  54:	str	x2, [sp, #80]
  58:	mov	w2, #0xffffffe0            	// #-32
  5c:	str	w2, [sp, #88]
  60:	mov	w2, #0xffffff80            	// #-128
  64:	str	w2, [sp, #92]
  68:	mov	x2, #0x7fffffff            	// #2147483647
  6c:	cmp	x19, x2
  70:	b.ls	98 <__sprintf_chk+0x98>  // b.plast
  74:	ldp	x2, x3, [sp, #64]
  78:	stp	x2, x3, [sp, #32]
  7c:	ldp	x2, x3, [sp, #80]
  80:	stp	x2, x3, [sp, #48]
  84:	add	x2, sp, #0x20
  88:	bl	0 <vsprintf>
  8c:	ldr	x19, [sp, #16]
  90:	ldp	x29, x30, [sp], #256
  94:	ret
  98:	ldp	x2, x3, [sp, #64]
  9c:	stp	x2, x3, [sp, #32]
  a0:	ldp	x2, x3, [sp, #80]
  a4:	stp	x2, x3, [sp, #48]
  a8:	add	x3, sp, #0x20
  ac:	mov	x2, x1
  b0:	mov	x1, x19
  b4:	bl	0 <vsnprintf>
  b8:	tbnz	w0, #31, 8c <__sprintf_chk+0x8c>
  bc:	cmp	x19, w0, sxtw
  c0:	b.hi	8c <__sprintf_chk+0x8c>  // b.pmore
  c4:	bl	0 <__chk_fail>

stpcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__stpcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x0
  14:	mov	x20, x1
  18:	mov	x21, x2
  1c:	mov	x0, x1
  20:	bl	0 <strlen>
  24:	cmp	x0, x21
  28:	b.cs	54 <__stpcpy_chk+0x54>  // b.hs, b.nlast
  2c:	mov	x19, x0
  30:	add	x2, x0, #0x1
  34:	mov	x1, x20
  38:	mov	x0, x22
  3c:	bl	0 <memcpy>
  40:	add	x0, x0, x19
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldp	x29, x30, [sp], #48
  50:	ret
  54:	bl	0 <__chk_fail>

strcat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcat_chk>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	add	x7, x0, x2
   c:	mov	x3, x0
  10:	mov	x6, x7
  14:	b	1c <__strcat_chk+0x1c>
  18:	mov	x3, x2
  1c:	sub	x5, x6, x3
  20:	cmp	x3, x7
  24:	b.eq	54 <__strcat_chk+0x54>  // b.none
  28:	mov	x2, x3
  2c:	ldrb	w4, [x2], #1
  30:	cbnz	w4, 18 <__strcat_chk+0x18>
  34:	mov	x2, #0x0                   	// #0
  38:	ldrb	w4, [x1, x2]
  3c:	strb	w4, [x3, x2]
  40:	cbz	w4, 58 <__strcat_chk+0x58>
  44:	add	x2, x2, #0x1
  48:	cmp	x2, x5
  4c:	b.ne	38 <__strcat_chk+0x38>  // b.any
  50:	bl	0 <__chk_fail>
  54:	bl	0 <__chk_fail>
  58:	ldp	x29, x30, [sp], #16
  5c:	ret

strcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	mov	x21, x0
  14:	mov	x19, x1
  18:	mov	x20, x2
  1c:	mov	x0, x1
  20:	bl	0 <strlen>
  24:	cmp	x0, x20
  28:	b.cs	4c <__strcpy_chk+0x4c>  // b.hs, b.nlast
  2c:	add	x2, x0, #0x1
  30:	mov	x1, x19
  34:	mov	x0, x21
  38:	bl	0 <memcpy>
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldr	x21, [sp, #32]
  44:	ldp	x29, x30, [sp], #48
  48:	ret
  4c:	bl	0 <__chk_fail>

strncat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncat_chk>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	add	x8, x0, x3
   c:	mov	x4, x0
  10:	mov	x7, x8
  14:	b	1c <__strncat_chk+0x1c>
  18:	mov	x4, x5
  1c:	sub	x3, x7, x4
  20:	cmp	x4, x8
  24:	b.eq	ac <__strncat_chk+0xac>  // b.none
  28:	mov	x5, x4
  2c:	ldrb	w6, [x5], #1
  30:	cbnz	w6, 18 <__strncat_chk+0x18>
  34:	sub	x4, x4, #0x1
  38:	cmp	x2, #0x3
  3c:	b.ls	ec <__strncat_chk+0xec>  // b.plast
  40:	and	x7, x2, #0xfffffffffffffffc
  44:	add	x7, x1, x7
  48:	ldrb	w5, [x1]
  4c:	strb	w5, [x4, #1]
  50:	cbz	w5, e0 <__strncat_chk+0xe0>
  54:	cmp	x3, #0x1
  58:	b.eq	b4 <__strncat_chk+0xb4>  // b.none
  5c:	ldrb	w5, [x1, #1]
  60:	strb	w5, [x4, #2]
  64:	cbz	w5, e0 <__strncat_chk+0xe0>
  68:	cmp	x3, #0x2
  6c:	b.eq	b8 <__strncat_chk+0xb8>  // b.none
  70:	ldrb	w5, [x1, #2]
  74:	strb	w5, [x4, #3]
  78:	cbz	w5, e0 <__strncat_chk+0xe0>
  7c:	sub	x6, x3, #0x4
  80:	cmp	x3, #0x3
  84:	b.eq	bc <__strncat_chk+0xbc>  // b.none
  88:	add	x1, x1, #0x4
  8c:	ldurb	w5, [x1, #-1]
  90:	strb	w5, [x4, #4]!
  94:	cbz	w5, e0 <__strncat_chk+0xe0>
  98:	cmp	x7, x1
  9c:	b.eq	c0 <__strncat_chk+0xc0>  // b.none
  a0:	cbz	x6, b0 <__strncat_chk+0xb0>
  a4:	mov	x3, x6
  a8:	b	48 <__strncat_chk+0x48>
  ac:	bl	0 <__chk_fail>
  b0:	bl	0 <__chk_fail>
  b4:	bl	0 <__chk_fail>
  b8:	bl	0 <__chk_fail>
  bc:	bl	0 <__chk_fail>
  c0:	ands	x2, x2, #0x3
  c4:	b.eq	d4 <__strncat_chk+0xd4>  // b.none
  c8:	sub	x3, x3, #0x5
  cc:	cbnz	x6, f4 <__strncat_chk+0xf4>
  d0:	bl	0 <__chk_fail>
  d4:	mov	x3, x6
  d8:	cbz	x3, e8 <__strncat_chk+0xe8>
  dc:	strb	wzr, [x4, #1]
  e0:	ldp	x29, x30, [sp], #16
  e4:	ret
  e8:	bl	0 <__chk_fail>
  ec:	cbz	x2, e0 <__strncat_chk+0xe0>
  f0:	sub	x3, x3, #0x1
  f4:	add	x5, x3, #0x1
  f8:	sub	x5, x5, x2
  fc:	ldrb	w2, [x1], #1
 100:	strb	w2, [x4, #1]!
 104:	cbz	w2, e0 <__strncat_chk+0xe0>
 108:	cmp	x5, x3
 10c:	b.eq	d8 <__strncat_chk+0xd8>  // b.none
 110:	sub	x2, x3, #0x1
 114:	cbz	x3, d0 <__strncat_chk+0xd0>
 118:	mov	x3, x2
 11c:	b	fc <__strncat_chk+0xfc>

strncpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncpy_chk>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cmp	x2, x3
   c:	b.hi	1c <__strncpy_chk+0x1c>  // b.pmore
  10:	bl	0 <strncpy>
  14:	ldp	x29, x30, [sp], #16
  18:	ret
  1c:	bl	0 <__chk_fail>

vsnprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsnprintf_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	cmp	x1, x3
   c:	b.hi	34 <__vsnprintf_chk+0x34>  // b.pmore
  10:	mov	x2, x4
  14:	ldp	x6, x7, [x5]
  18:	stp	x6, x7, [sp, #16]
  1c:	ldp	x4, x5, [x5, #16]
  20:	stp	x4, x5, [sp, #32]
  24:	add	x3, sp, #0x10
  28:	bl	0 <vsnprintf>
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	bl	0 <__chk_fail>

vsprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsprintf_chk>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x2
  10:	mov	x1, x3
  14:	mov	x2, #0x7fffffff            	// #2147483647
  18:	cmp	x19, x2
  1c:	b.ls	44 <__vsprintf_chk+0x44>  // b.plast
  20:	ldp	x2, x3, [x4]
  24:	stp	x2, x3, [sp, #32]
  28:	ldp	x2, x3, [x4, #16]
  2c:	stp	x2, x3, [sp, #48]
  30:	add	x2, sp, #0x20
  34:	bl	0 <vsprintf>
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #64
  40:	ret
  44:	ldp	x2, x3, [x4]
  48:	stp	x2, x3, [sp, #32]
  4c:	ldp	x2, x3, [x4, #16]
  50:	stp	x2, x3, [sp, #48]
  54:	add	x3, sp, #0x20
  58:	mov	x2, x1
  5c:	mov	x1, x19
  60:	bl	0 <vsnprintf>
  64:	tbnz	w0, #31, 38 <__vsprintf_chk+0x38>
  68:	cmp	x19, w0, sxtw
  6c:	b.hi	38 <__vsprintf_chk+0x38>  // b.pmore
  70:	bl	0 <__chk_fail>
