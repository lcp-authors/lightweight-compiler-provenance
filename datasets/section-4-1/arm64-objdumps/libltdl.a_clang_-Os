In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_clang_-Os:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <preopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <preopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbnz	x8, 30 <preopen_LTX_get_vtable+0x30>
  1c:	mov	w0, #0x48                  	// #72
  20:	bl	0 <lt__zalloc>
  24:	mov	x8, x0
  28:	str	x0, [x20]
  2c:	cbz	x0, 9c <preopen_LTX_get_vtable+0x9c>
  30:	ldr	x9, [x8]
  34:	cbz	x9, 58 <preopen_LTX_get_vtable+0x58>
  38:	ldr	x9, [x8, #56]
  3c:	cmp	x9, x19
  40:	b.eq	9c <preopen_LTX_get_vtable+0x9c>  // b.none
  44:	mov	w0, #0x3                   	// #3
  48:	bl	0 <lt__error_string>
  4c:	bl	0 <lt__set_last_error>
  50:	mov	x8, xzr
  54:	b	9c <preopen_LTX_get_vtable+0x9c>
  58:	adrp	x9, 0 <preopen_LTX_get_vtable>
  5c:	adrp	x10, 0 <preopen_LTX_get_vtable>
  60:	adrp	x11, 0 <preopen_LTX_get_vtable>
  64:	adrp	x12, 0 <preopen_LTX_get_vtable>
  68:	adrp	x13, 0 <preopen_LTX_get_vtable>
  6c:	adrp	x14, 0 <preopen_LTX_get_vtable>
  70:	add	x9, x9, #0x0
  74:	add	x10, x10, #0x0
  78:	add	x11, x11, #0x0
  7c:	add	x12, x12, #0x0
  80:	add	x13, x13, #0x0
  84:	add	x14, x14, #0x0
  88:	stp	x9, xzr, [x8]
  8c:	stp	x10, x11, [x8, #16]
  90:	stp	x12, x13, [x8, #32]
  94:	stp	x14, x19, [x8, #48]
  98:	str	wzr, [x8, #64]
  9c:	ldp	x20, x19, [sp, #16]
  a0:	mov	x0, x8
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret

00000000000000ac <vm_open>:
  ac:	stp	x29, x30, [sp, #-48]!
  b0:	adrp	x8, 0 <preopen_LTX_get_vtable>
  b4:	stp	x22, x21, [sp, #16]
  b8:	ldr	x21, [x8]
  bc:	stp	x20, x19, [sp, #32]
  c0:	mov	x29, sp
  c4:	cbz	x21, 124 <vm_open+0x78>
  c8:	adrp	x8, 0 <preopen_LTX_get_vtable>
  cc:	add	x8, x8, #0x0
  d0:	cmp	x1, #0x0
  d4:	csel	x19, x8, x1, eq  // eq = none
  d8:	ldr	x20, [x21, #8]
  dc:	ldr	x0, [x20]
  e0:	cbz	x0, 114 <vm_open+0x68>
  e4:	add	x22, x20, #0x10
  e8:	ldur	x8, [x22, #-8]
  ec:	cbnz	x8, 10c <vm_open+0x60>
  f0:	mov	x1, x19
  f4:	bl	0 <strcmp>
  f8:	cbnz	w0, 10c <vm_open+0x60>
  fc:	ldr	x8, [x22, #8]
 100:	cbz	x8, 10c <vm_open+0x60>
 104:	ldr	x8, [x22]
 108:	cbnz	x8, 134 <vm_open+0x88>
 10c:	ldr	x0, [x22], #16
 110:	cbnz	x0, e8 <vm_open+0x3c>
 114:	ldr	x21, [x21]
 118:	cbnz	x21, d8 <vm_open+0x2c>
 11c:	mov	w0, #0x5                   	// #5
 120:	b	128 <vm_open+0x7c>
 124:	mov	w0, #0x7                   	// #7
 128:	bl	0 <lt__error_string>
 12c:	bl	0 <lt__set_last_error>
 130:	mov	x20, xzr
 134:	mov	x0, x20
 138:	ldp	x20, x19, [sp, #32]
 13c:	ldp	x22, x21, [sp, #16]
 140:	ldp	x29, x30, [sp], #48
 144:	ret

0000000000000148 <vm_close>:
 148:	mov	w0, wzr
 14c:	ret

0000000000000150 <vm_sym>:
 150:	stp	x29, x30, [sp, #-48]!
 154:	str	x21, [sp, #16]
 158:	stp	x20, x19, [sp, #32]
 15c:	mov	x21, x1
 160:	ldr	x0, [x21, #16]!
 164:	mov	x20, x1
 168:	mov	x19, x2
 16c:	mov	x29, sp
 170:	cbz	x0, 188 <vm_sym+0x38>
 174:	adrp	x1, 0 <preopen_LTX_get_vtable>
 178:	add	x1, x1, #0x0
 17c:	bl	0 <strcmp>
 180:	cmp	w0, #0x0
 184:	csel	x20, x21, x20, eq  // eq = none
 188:	ldr	x0, [x20, #32]
 18c:	cbz	x0, 1a8 <vm_sym+0x58>
 190:	add	x20, x20, #0x30
 194:	mov	x1, x19
 198:	bl	0 <strcmp>
 19c:	cbz	w0, 1bc <vm_sym+0x6c>
 1a0:	ldr	x0, [x20], #16
 1a4:	cbnz	x0, 194 <vm_sym+0x44>
 1a8:	mov	w0, #0xa                   	// #10
 1ac:	bl	0 <lt__error_string>
 1b0:	bl	0 <lt__set_last_error>
 1b4:	mov	x0, xzr
 1b8:	b	1c0 <vm_sym+0x70>
 1bc:	ldur	x0, [x20, #-8]
 1c0:	ldp	x20, x19, [sp, #32]
 1c4:	ldr	x21, [sp, #16]
 1c8:	ldp	x29, x30, [sp], #48
 1cc:	ret

00000000000001d0 <vl_init>:
 1d0:	adrp	x8, 0 <preopen_LTX_get_vtable>
 1d4:	ldr	x0, [x8]
 1d8:	adrp	x8, 0 <preopen_LTX_get_vtable>
 1dc:	str	xzr, [x8]
 1e0:	cbz	x0, 1e8 <vl_init+0x18>
 1e4:	b	240 <lt_dlpreload>
 1e8:	ret

00000000000001ec <vl_exit>:
 1ec:	stp	x29, x30, [sp, #-32]!
 1f0:	stp	x20, x19, [sp, #16]
 1f4:	adrp	x19, 0 <preopen_LTX_get_vtable>
 1f8:	ldr	x0, [x19]
 1fc:	adrp	x8, 0 <preopen_LTX_get_vtable>
 200:	mov	x29, sp
 204:	str	xzr, [x8]
 208:	cbz	x0, 21c <vl_exit+0x30>
 20c:	ldr	x20, [x0]
 210:	bl	0 <free>
 214:	mov	x0, x20
 218:	cbnz	x20, 20c <vl_exit+0x20>
 21c:	str	xzr, [x19]
 220:	ldp	x20, x19, [sp, #16]
 224:	mov	w0, wzr
 228:	ldp	x29, x30, [sp], #32
 22c:	ret

0000000000000230 <lt_dlpreload_default>:
 230:	adrp	x8, 0 <preopen_LTX_get_vtable>
 234:	str	x0, [x8]
 238:	mov	w0, wzr
 23c:	ret

0000000000000240 <lt_dlpreload>:
 240:	stp	x29, x30, [sp, #-48]!
 244:	stp	x20, x19, [sp, #32]
 248:	adrp	x20, 0 <preopen_LTX_get_vtable>
 24c:	mov	x19, x0
 250:	ldr	x0, [x20]
 254:	str	x21, [sp, #16]
 258:	adrp	x21, 0 <preopen_LTX_get_vtable>
 25c:	mov	x29, sp
 260:	cbnz	x19, 29c <lt_dlpreload+0x5c>
 264:	cbz	x0, 278 <lt_dlpreload+0x38>
 268:	ldr	x19, [x0]
 26c:	bl	0 <free>
 270:	mov	x0, x19
 274:	cbnz	x19, 268 <lt_dlpreload+0x28>
 278:	ldr	x19, [x21]
 27c:	mov	x0, xzr
 280:	str	xzr, [x20]
 284:	cbnz	x19, 260 <lt_dlpreload+0x20>
 288:	mov	w0, wzr
 28c:	ldp	x20, x19, [sp, #32]
 290:	ldr	x21, [sp, #16]
 294:	ldp	x29, x30, [sp], #48
 298:	ret
 29c:	cbz	x0, 2b4 <lt_dlpreload+0x74>
 2a0:	ldr	x8, [x0, #8]
 2a4:	cmp	x8, x19
 2a8:	b.eq	288 <lt_dlpreload+0x48>  // b.none
 2ac:	ldr	x0, [x0]
 2b0:	cbnz	x0, 2a0 <lt_dlpreload+0x60>
 2b4:	mov	w0, #0x10                  	// #16
 2b8:	bl	0 <lt__zalloc>
 2bc:	cbz	x0, 2f0 <lt_dlpreload+0xb0>
 2c0:	ldr	x8, [x20]
 2c4:	stp	x8, x19, [x0]
 2c8:	str	x0, [x20]
 2cc:	ldr	x0, [x19, #16]
 2d0:	cbz	x0, 28c <lt_dlpreload+0x4c>
 2d4:	adrp	x1, 0 <preopen_LTX_get_vtable>
 2d8:	add	x1, x1, #0x0
 2dc:	bl	0 <strcmp>
 2e0:	cbnz	w0, 288 <lt_dlpreload+0x48>
 2e4:	ldr	x8, [x19, #24]
 2e8:	blr	x8
 2ec:	b	288 <lt_dlpreload+0x48>
 2f0:	mov	w0, #0x1                   	// #1
 2f4:	b	28c <lt_dlpreload+0x4c>

00000000000002f8 <lt_dlpreload_open>:
 2f8:	stp	x29, x30, [sp, #-96]!
 2fc:	adrp	x8, 0 <preopen_LTX_get_vtable>
 300:	stp	x26, x25, [sp, #32]
 304:	ldr	x25, [x8]
 308:	str	x27, [sp, #16]
 30c:	stp	x24, x23, [sp, #48]
 310:	stp	x22, x21, [sp, #64]
 314:	stp	x20, x19, [sp, #80]
 318:	mov	x29, sp
 31c:	cbz	x25, 3d8 <lt_dlpreload_open+0xe0>
 320:	adrp	x22, 0 <preopen_LTX_get_vtable>
 324:	mov	x20, x1
 328:	mov	x21, x0
 32c:	mov	w19, wzr
 330:	mov	w24, wzr
 334:	add	x22, x22, #0x0
 338:	ldr	x27, [x25, #8]
 33c:	ldr	x0, [x27]
 340:	cbz	x21, 34c <lt_dlpreload_open+0x54>
 344:	mov	x1, x21
 348:	b	350 <lt_dlpreload_open+0x58>
 34c:	mov	x1, x22
 350:	bl	0 <strcmp>
 354:	cbz	w0, 364 <lt_dlpreload_open+0x6c>
 358:	ldr	x25, [x25]
 35c:	cbnz	x25, 338 <lt_dlpreload_open+0x40>
 360:	b	3d0 <lt_dlpreload_open+0xd8>
 364:	ldr	x23, [x27, #16]
 368:	add	w24, w24, #0x1
 36c:	cbz	x23, 358 <lt_dlpreload_open+0x60>
 370:	mov	w26, #0x2                   	// #2
 374:	mov	w8, #0x1                   	// #1
 378:	add	x8, x27, x8, lsl #4
 37c:	ldr	x8, [x8, #8]
 380:	cbz	x8, 3a0 <lt_dlpreload_open+0xa8>
 384:	ldr	x27, [x25, #8]
 388:	mov	w8, w26
 38c:	lsl	x9, x8, #4
 390:	add	w26, w26, #0x1
 394:	ldr	x23, [x27, x9]
 398:	cbnz	x23, 378 <lt_dlpreload_open+0x80>
 39c:	b	358 <lt_dlpreload_open+0x60>
 3a0:	mov	x0, x23
 3a4:	mov	x1, x22
 3a8:	bl	0 <strcmp>
 3ac:	cbz	w0, 384 <lt_dlpreload_open+0x8c>
 3b0:	mov	x0, x23
 3b4:	bl	0 <lt_dlopen>
 3b8:	cbz	x0, 3c8 <lt_dlpreload_open+0xd0>
 3bc:	blr	x20
 3c0:	add	w19, w0, w19
 3c4:	b	384 <lt_dlpreload_open+0x8c>
 3c8:	add	w19, w19, #0x1
 3cc:	b	384 <lt_dlpreload_open+0x8c>
 3d0:	cbnz	w24, 3ec <lt_dlpreload_open+0xf4>
 3d4:	b	3dc <lt_dlpreload_open+0xe4>
 3d8:	mov	w19, wzr
 3dc:	mov	w0, #0x8                   	// #8
 3e0:	bl	0 <lt__error_string>
 3e4:	bl	0 <lt__set_last_error>
 3e8:	add	w19, w19, #0x1
 3ec:	mov	w0, w19
 3f0:	ldp	x20, x19, [sp, #80]
 3f4:	ldp	x22, x21, [sp, #64]
 3f8:	ldp	x24, x23, [sp, #48]
 3fc:	ldp	x26, x25, [sp, #32]
 400:	ldr	x27, [sp, #16]
 404:	ldp	x29, x30, [sp], #96
 408:	ret

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x8, 0 <stderr>
   8:	ldr	x3, [x8]
   c:	adrp	x0, 0 <alloc_die_default>
  10:	add	x0, x0, #0x0
  14:	mov	w1, #0xf                   	// #15
  18:	mov	w2, #0x1                   	// #1
  1c:	mov	x29, sp
  20:	bl	0 <fwrite>
  24:	mov	w0, #0x1                   	// #1
  28:	bl	0 <exit>

000000000000002c <lt__malloc>:
  2c:	stp	x29, x30, [sp, #-32]!
  30:	str	x19, [sp, #16]
  34:	mov	x29, sp
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbnz	x0, 50 <lt__malloc+0x24>
  44:	adrp	x8, 0 <alloc_die_default>
  48:	ldr	x8, [x8]
  4c:	blr	x8
  50:	mov	x0, x19
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <lt__zalloc>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	stp	x20, x19, [sp, #16]
  68:	mov	x29, sp
  6c:	mov	x20, x0
  70:	bl	0 <malloc>
  74:	mov	x19, x0
  78:	cbz	x0, 90 <lt__zalloc+0x30>
  7c:	mov	x0, x19
  80:	mov	w1, wzr
  84:	mov	x2, x20
  88:	bl	0 <memset>
  8c:	b	9c <lt__zalloc+0x3c>
  90:	adrp	x8, 0 <alloc_die_default>
  94:	ldr	x8, [x8]
  98:	blr	x8
  9c:	mov	x0, x19
  a0:	ldp	x20, x19, [sp, #16]
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret

00000000000000ac <lt__realloc>:
  ac:	stp	x29, x30, [sp, #-32]!
  b0:	str	x19, [sp, #16]
  b4:	mov	x29, sp
  b8:	bl	0 <realloc>
  bc:	mov	x19, x0
  c0:	cbnz	x0, d0 <lt__realloc+0x24>
  c4:	adrp	x8, 0 <alloc_die_default>
  c8:	ldr	x8, [x8]
  cc:	blr	x8
  d0:	mov	x0, x19
  d4:	ldr	x19, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret

00000000000000e0 <lt__memdup>:
  e0:	stp	x29, x30, [sp, #-48]!
  e4:	str	x21, [sp, #16]
  e8:	mov	x21, x0
  ec:	mov	x0, x1
  f0:	stp	x20, x19, [sp, #32]
  f4:	mov	x29, sp
  f8:	mov	x20, x1
  fc:	bl	0 <malloc>
 100:	mov	x19, x0
 104:	cbz	x0, 11c <lt__memdup+0x3c>
 108:	mov	x0, x19
 10c:	mov	x1, x21
 110:	mov	x2, x20
 114:	bl	0 <memcpy>
 118:	b	128 <lt__memdup+0x48>
 11c:	adrp	x8, 0 <alloc_die_default>
 120:	ldr	x8, [x8]
 124:	blr	x8
 128:	mov	x0, x19
 12c:	ldp	x20, x19, [sp, #32]
 130:	ldr	x21, [sp, #16]
 134:	ldp	x29, x30, [sp], #48
 138:	ret

000000000000013c <lt__strdup>:
 13c:	stp	x29, x30, [sp, #-48]!
 140:	str	x21, [sp, #16]
 144:	stp	x20, x19, [sp, #32]
 148:	mov	x29, sp
 14c:	mov	x20, x0
 150:	bl	0 <strlen>
 154:	add	x21, x0, #0x1
 158:	mov	x0, x21
 15c:	bl	0 <malloc>
 160:	mov	x19, x0
 164:	cbz	x0, 17c <lt__strdup+0x40>
 168:	mov	x0, x19
 16c:	mov	x1, x20
 170:	mov	x2, x21
 174:	bl	0 <memcpy>
 178:	b	188 <lt__strdup+0x4c>
 17c:	adrp	x8, 0 <alloc_die_default>
 180:	ldr	x8, [x8]
 184:	blr	x8
 188:	mov	x0, x19
 18c:	ldp	x20, x19, [sp, #32]
 190:	ldr	x21, [sp, #16]
 194:	ldp	x29, x30, [sp], #48
 198:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dlloader_add>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 6c <lt_dlloader_add+0x6c>
  10:	ldr	x8, [x0, #16]
  14:	mov	x19, x0
  18:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  1c:	ldr	x8, [x19, #24]
  20:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  24:	ldr	x8, [x19, #32]
  28:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  2c:	ldr	w8, [x19, #64]
  30:	cmp	w8, #0x2
  34:	b.cs	6c <lt_dlloader_add+0x6c>  // b.hs, b.nlast
  38:	mov	x0, x19
  3c:	bl	0 <lt__slist_box>
  40:	cbz	x0, 88 <lt_dlloader_add+0x88>
  44:	ldr	w9, [x19, #64]
  48:	mov	x8, x0
  4c:	adrp	x19, 0 <lt_dlloader_add>
  50:	cmp	w9, #0x1
  54:	b.eq	98 <lt_dlloader_add+0x98>  // b.none
  58:	cbnz	w9, b4 <lt_dlloader_add+0xb4>
  5c:	ldr	x1, [x19]
  60:	mov	x0, x8
  64:	bl	0 <lt__slist_cons>
  68:	b	a4 <lt_dlloader_add+0xa4>
  6c:	mov	w0, #0x2                   	// #2
  70:	bl	0 <lt__error_string>
  74:	bl	0 <lt__set_last_error>
  78:	mov	w0, #0x1                   	// #1
  7c:	ldr	x19, [sp, #16]
  80:	ldp	x29, x30, [sp], #32
  84:	ret
  88:	adrp	x8, 0 <lt__alloc_die>
  8c:	ldr	x8, [x8]
  90:	blr	x8
  94:	b	78 <lt_dlloader_add+0x78>
  98:	ldr	x0, [x19]
  9c:	mov	x1, x8
  a0:	bl	0 <lt__slist_concat>
  a4:	mov	x8, x0
  a8:	mov	w0, wzr
  ac:	str	x8, [x19]
  b0:	b	7c <lt_dlloader_add+0x7c>
  b4:	adrp	x0, 0 <lt_dlloader_add>
  b8:	adrp	x1, 0 <lt_dlloader_add>
  bc:	adrp	x3, 0 <lt_dlloader_add>
  c0:	add	x0, x0, #0x0
  c4:	add	x1, x1, #0x0
  c8:	add	x3, x3, #0x0
  cc:	mov	w2, #0x5e                  	// #94
  d0:	bl	0 <__assert_fail>

00000000000000d4 <lt_dlloader_next>:
  d4:	adrp	x8, 0 <lt_dlloader_add>
  d8:	add	x8, x8, #0x0
  dc:	cmp	x0, #0x0
  e0:	csel	x8, x8, x0, eq  // eq = none
  e4:	ldr	x0, [x8]
  e8:	ret

00000000000000ec <lt_dlloader_get>:
  ec:	cbz	x0, f4 <lt_dlloader_get+0x8>
  f0:	ldr	x0, [x0, #8]
  f4:	ret

00000000000000f8 <lt_dlloader_remove>:
  f8:	stp	x29, x30, [sp, #-64]!
  fc:	stp	x24, x23, [sp, #16]
 100:	stp	x22, x21, [sp, #32]
 104:	stp	x20, x19, [sp, #48]
 108:	adrp	x8, 0 <lt_dlloader_add>
 10c:	ldr	x8, [x8]
 110:	mov	x19, x0
 114:	adrp	x1, 0 <lt_dlloader_add>
 118:	add	x1, x1, #0x0
 11c:	mov	x0, x8
 120:	mov	x2, x19
 124:	mov	x29, sp
 128:	bl	0 <lt__slist_find>
 12c:	cbz	x0, 1b0 <lt_dlloader_remove+0xb8>
 130:	ldr	x22, [x0, #8]
 134:	cbz	x22, 1b0 <lt_dlloader_remove+0xb8>
 138:	adrp	x0, 0 <lt_dlloader_add>
 13c:	add	x0, x0, #0x0
 140:	mov	x1, xzr
 144:	bl	0 <lt_dlinterface_register>
 148:	mov	x1, xzr
 14c:	mov	x20, x0
 150:	bl	0 <lt_dlhandle_iterate>
 154:	cbz	x0, 1d4 <lt_dlloader_remove+0xdc>
 158:	mov	x21, x0
 15c:	mov	w23, wzr
 160:	mov	w24, wzr
 164:	ldr	x8, [x21, #8]
 168:	cmp	x8, x22
 16c:	b.ne	184 <lt_dlloader_remove+0x8c>  // b.any
 170:	mov	x0, x21
 174:	bl	0 <lt_dlisresident>
 178:	cmp	w0, #0x0
 17c:	csinc	w23, w23, wzr, eq  // eq = none
 180:	mov	w24, #0x1                   	// #1
 184:	mov	x0, x20
 188:	mov	x1, x21
 18c:	bl	0 <lt_dlhandle_iterate>
 190:	mov	x21, x0
 194:	cbnz	x0, 164 <lt_dlloader_remove+0x6c>
 198:	mov	x0, x20
 19c:	bl	0 <lt_dlinterface_free>
 1a0:	cbz	w24, 1dc <lt_dlloader_remove+0xe4>
 1a4:	cbnz	w23, 1bc <lt_dlloader_remove+0xc4>
 1a8:	mov	w0, #0x4                   	// #4
 1ac:	b	1b4 <lt_dlloader_remove+0xbc>
 1b0:	mov	w0, #0x2                   	// #2
 1b4:	bl	0 <lt__error_string>
 1b8:	bl	0 <lt__set_last_error>
 1bc:	ldp	x20, x19, [sp, #48]
 1c0:	ldp	x22, x21, [sp, #32]
 1c4:	ldp	x24, x23, [sp, #16]
 1c8:	mov	x0, xzr
 1cc:	ldp	x29, x30, [sp], #64
 1d0:	ret
 1d4:	mov	x0, x20
 1d8:	bl	0 <lt_dlinterface_free>
 1dc:	ldr	x8, [x22, #48]
 1e0:	cbz	x8, 1f0 <lt_dlloader_remove+0xf8>
 1e4:	ldr	x0, [x22, #56]
 1e8:	blr	x8
 1ec:	cbnz	w0, 1bc <lt_dlloader_remove+0xc4>
 1f0:	adrp	x0, 0 <lt_dlloader_add>
 1f4:	adrp	x1, 0 <lt_dlloader_add>
 1f8:	add	x0, x0, #0x0
 1fc:	add	x1, x1, #0x0
 200:	mov	x2, x19
 204:	bl	0 <lt__slist_remove>
 208:	ldp	x20, x19, [sp, #48]
 20c:	ldp	x22, x21, [sp, #32]
 210:	ldp	x24, x23, [sp, #16]
 214:	ldp	x29, x30, [sp], #64
 218:	b	0 <lt__slist_unbox>

000000000000021c <lt_dlloader_find>:
 21c:	stp	x29, x30, [sp, #-16]!
 220:	adrp	x8, 0 <lt_dlloader_add>
 224:	ldr	x8, [x8]
 228:	adrp	x1, 0 <lt_dlloader_add>
 22c:	mov	x2, x0
 230:	add	x1, x1, #0x0
 234:	mov	x0, x8
 238:	mov	x29, sp
 23c:	bl	0 <lt__slist_find>
 240:	cbz	x0, 248 <lt_dlloader_find+0x2c>
 244:	ldr	x0, [x0, #8]
 248:	ldp	x29, x30, [sp], #16
 24c:	ret

0000000000000250 <loader_callback>:
 250:	stp	x29, x30, [sp, #-32]!
 254:	ldr	x8, [x0, #8]
 258:	str	x19, [sp, #16]
 25c:	mov	x29, sp
 260:	cbz	x8, 284 <loader_callback+0x34>
 264:	mov	x19, x0
 268:	ldr	x0, [x8]
 26c:	bl	0 <strcmp>
 270:	cmp	w0, #0x0
 274:	csel	x0, x19, xzr, eq  // eq = none
 278:	ldr	x19, [sp, #16]
 27c:	ldp	x29, x30, [sp], #32
 280:	ret
 284:	adrp	x0, 0 <lt_dlloader_add>
 288:	adrp	x1, 0 <lt_dlloader_add>
 28c:	adrp	x3, 0 <lt_dlloader_add>
 290:	add	x0, x0, #0x0
 294:	add	x1, x1, #0x0
 298:	add	x3, x3, #0x0
 29c:	mov	w2, #0x36                  	// #54
 2a0:	bl	0 <__assert_fail>

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 68 <lt_dladderror+0x68>
  14:	adrp	x20, 0 <lt_dladderror>
  18:	ldr	w21, [x20]
  1c:	adrp	x22, 0 <lt_dladderror>
  20:	mov	x19, x0
  24:	ldr	x0, [x22]
  28:	sub	w8, w21, #0x13
  2c:	sbfiz	x1, x8, #3, #32
  30:	bl	0 <lt__realloc>
  34:	cbz	x0, 54 <lt_dladderror+0x54>
  38:	sub	w8, w21, #0x14
  3c:	str	x0, [x22]
  40:	str	x19, [x0, w8, sxtw #3]
  44:	ldr	w0, [x20]
  48:	add	w8, w0, #0x1
  4c:	str	w8, [x20]
  50:	b	58 <lt_dladderror+0x58>
  54:	mov	w0, #0xffffffff            	// #-1
  58:	ldp	x20, x19, [sp, #32]
  5c:	ldp	x22, x21, [sp, #16]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	adrp	x0, 0 <lt_dladderror>
  6c:	adrp	x1, 0 <lt_dladderror>
  70:	adrp	x3, 0 <lt_dladderror>
  74:	add	x0, x0, #0x0
  78:	add	x1, x1, #0x0
  7c:	add	x3, x3, #0x0
  80:	mov	w2, #0x35                  	// #53
  84:	bl	0 <__assert_fail>

0000000000000088 <lt_dlseterror>:
  88:	tbnz	w0, #31, c0 <lt_dlseterror+0x38>
  8c:	adrp	x9, 0 <lt_dladderror>
  90:	ldr	w9, [x9]
  94:	mov	w8, w0
  98:	cmp	w9, w0
  9c:	b.le	c0 <lt_dlseterror+0x38>
  a0:	cmp	w8, #0x13
  a4:	b.gt	d8 <lt_dlseterror+0x50>
  a8:	adrp	x9, 0 <lt_dladderror>
  ac:	add	x9, x9, #0x0
  b0:	mov	w10, #0x2a                  	// #42
  b4:	mov	w0, wzr
  b8:	umaddl	x8, w8, w10, x9
  bc:	b	ec <lt_dlseterror+0x64>
  c0:	adrp	x9, 0 <lt_dladderror>
  c4:	adrp	x8, 0 <lt_dladderror>
  c8:	add	x9, x9, #0x0
  cc:	mov	w0, #0x1                   	// #1
  d0:	str	x9, [x8]
  d4:	ret
  d8:	adrp	x9, 0 <lt_dladderror>
  dc:	ldr	x9, [x9]
  e0:	sub	w8, w8, #0x14
  e4:	mov	w0, wzr
  e8:	ldr	x8, [x9, w8, sxtw #3]
  ec:	adrp	x9, 0 <lt_dladderror>
  f0:	str	x8, [x9]
  f4:	ret

00000000000000f8 <lt__set_last_error>:
  f8:	adrp	x8, 0 <lt_dladderror>
  fc:	str	x0, [x8]
 100:	ret

0000000000000104 <lt__error_string>:
 104:	stp	x29, x30, [sp, #-16]!
 108:	mov	x29, sp
 10c:	tbnz	w0, #31, 130 <lt__error_string+0x2c>
 110:	cmp	w0, #0x14
 114:	b.ge	150 <lt__error_string+0x4c>  // b.tcont
 118:	adrp	x8, 0 <lt_dladderror>
 11c:	add	x8, x8, #0x0
 120:	mov	w9, #0x2a                  	// #42
 124:	umaddl	x0, w0, w9, x8
 128:	ldp	x29, x30, [sp], #16
 12c:	ret
 130:	adrp	x0, 0 <lt_dladderror>
 134:	adrp	x1, 0 <lt_dladderror>
 138:	adrp	x3, 0 <lt_dladderror>
 13c:	add	x0, x0, #0x0
 140:	add	x1, x1, #0x0
 144:	add	x3, x3, #0x0
 148:	mov	w2, #0x5f                  	// #95
 14c:	bl	0 <__assert_fail>
 150:	adrp	x0, 0 <lt_dladderror>
 154:	adrp	x1, 0 <lt_dladderror>
 158:	adrp	x3, 0 <lt_dladderror>
 15c:	add	x0, x0, #0x0
 160:	add	x1, x1, #0x0
 164:	add	x3, x3, #0x0
 168:	mov	w2, #0x60                  	// #96
 16c:	bl	0 <__assert_fail>

0000000000000170 <lt__get_last_error>:
 170:	adrp	x8, 0 <lt_dladderror>
 174:	ldr	x0, [x8]
 178:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w0, #0xb                   	// #11
       8:	mov	x29, sp
       c:	bl	0 <lt__error_string>
      10:	ldp	x29, x30, [sp], #16
      14:	b	0 <lt__set_last_error>

0000000000000018 <lt_dlinit>:
      18:	stp	x29, x30, [sp, #-32]!
      1c:	adrp	x8, 0 <lt__alloc_die_callback>
      20:	ldr	w9, [x8]
      24:	str	x19, [sp, #16]
      28:	mov	x29, sp
      2c:	add	w10, w9, #0x1
      30:	str	w10, [x8]
      34:	cbz	w9, 40 <lt_dlinit+0x28>
      38:	mov	w0, wzr
      3c:	b	7c <lt_dlinit+0x64>
      40:	adrp	x9, 0 <lt__alloc_die_callback>
      44:	adrp	x8, 0 <lt__alloc_die>
      48:	add	x9, x9, #0x0
      4c:	adrp	x10, 0 <lt__alloc_die_callback>
      50:	adrp	x11, 0 <lt__alloc_die_callback>
      54:	mov	x0, xzr
      58:	str	x9, [x8]
      5c:	str	xzr, [x10]
      60:	str	xzr, [x11]
      64:	bl	0 <preopen_LTX_get_vtable>
      68:	mov	x19, x0
      6c:	bl	0 <lt_dlloader_add>
      70:	cbnz	x19, 78 <lt_dlinit+0x60>
      74:	cbz	w0, dc <lt_dlinit+0xc4>
      78:	cbz	w0, 88 <lt_dlinit+0x70>
      7c:	ldr	x19, [sp, #16]
      80:	ldp	x29, x30, [sp], #32
      84:	ret
      88:	ldr	x8, [x19, #40]
      8c:	cbz	x8, b0 <lt_dlinit+0x98>
      90:	ldr	x0, [x19, #56]
      94:	blr	x8
      98:	cbz	w0, b0 <lt_dlinit+0x98>
      9c:	mov	w0, #0x3                   	// #3
      a0:	bl	0 <lt__error_string>
      a4:	bl	0 <lt__set_last_error>
      a8:	mov	w0, #0x1                   	// #1
      ac:	b	7c <lt_dlinit+0x64>
      b0:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
      b4:	add	x0, x0, #0x0
      b8:	bl	0 <lt_dlpreload>
      bc:	cbnz	w0, 7c <lt_dlinit+0x64>
      c0:	ldr	x19, [sp, #16]
      c4:	adrp	x0, 0 <lt__alloc_die_callback>
      c8:	adrp	x1, 0 <lt__alloc_die_callback>
      cc:	add	x0, x0, #0x0
      d0:	add	x1, x1, #0x0
      d4:	ldp	x29, x30, [sp], #32
      d8:	b	0 <lt_dlpreload_open>
      dc:	adrp	x0, 0 <lt__alloc_die_callback>
      e0:	adrp	x1, 0 <lt__alloc_die_callback>
      e4:	adrp	x3, 0 <lt__alloc_die_callback>
      e8:	add	x0, x0, #0x0
      ec:	add	x1, x1, #0x0
      f0:	add	x3, x3, #0x0
      f4:	mov	w2, #0xc7                  	// #199
      f8:	bl	0 <__assert_fail>

00000000000000fc <loader_init_callback>:
      fc:	stp	x29, x30, [sp, #-32]!
     100:	adrp	x1, 0 <lt__alloc_die_callback>
     104:	add	x1, x1, #0x0
     108:	str	x19, [sp, #16]
     10c:	mov	x29, sp
     110:	bl	18ac <lt_dlsym>
     114:	cbz	x0, 12c <loader_init_callback+0x30>
     118:	mov	x8, x0
     11c:	mov	x0, xzr
     120:	blr	x8
     124:	mov	x19, x0
     128:	b	130 <loader_init_callback+0x34>
     12c:	mov	x19, xzr
     130:	mov	x0, x19
     134:	bl	0 <lt_dlloader_add>
     138:	cbnz	x19, 140 <loader_init_callback+0x44>
     13c:	cbz	w0, 180 <loader_init_callback+0x84>
     140:	cbz	w0, 150 <loader_init_callback+0x54>
     144:	ldr	x19, [sp, #16]
     148:	ldp	x29, x30, [sp], #32
     14c:	ret
     150:	ldr	x8, [x19, #40]
     154:	cbz	x8, 178 <loader_init_callback+0x7c>
     158:	ldr	x0, [x19, #56]
     15c:	blr	x8
     160:	cbz	w0, 144 <loader_init_callback+0x48>
     164:	mov	w0, #0x3                   	// #3
     168:	bl	0 <lt__error_string>
     16c:	bl	0 <lt__set_last_error>
     170:	mov	w0, #0x1                   	// #1
     174:	b	144 <loader_init_callback+0x48>
     178:	mov	w0, wzr
     17c:	b	144 <loader_init_callback+0x48>
     180:	adrp	x0, 0 <lt__alloc_die_callback>
     184:	adrp	x1, 0 <lt__alloc_die_callback>
     188:	adrp	x3, 0 <lt__alloc_die_callback>
     18c:	add	x0, x0, #0x0
     190:	add	x1, x1, #0x0
     194:	add	x3, x3, #0x0
     198:	mov	w2, #0xc7                  	// #199
     19c:	bl	0 <__assert_fail>

00000000000001a0 <lt_dlexit>:
     1a0:	stp	x29, x30, [sp, #-64]!
     1a4:	adrp	x9, 0 <lt__alloc_die_callback>
     1a8:	ldr	w10, [x9]
     1ac:	str	x23, [sp, #16]
     1b0:	stp	x22, x21, [sp, #32]
     1b4:	stp	x20, x19, [sp, #48]
     1b8:	mov	x29, sp
     1bc:	cbz	w10, 1dc <lt_dlexit+0x3c>
     1c0:	adrp	x20, 0 <lt__alloc_die_callback>
     1c4:	ldr	x8, [x20]
     1c8:	subs	w10, w10, #0x1
     1cc:	str	w10, [x9]
     1d0:	b.eq	1f0 <lt_dlexit+0x50>  // b.none
     1d4:	mov	w19, wzr
     1d8:	b	2fc <lt_dlexit+0x15c>
     1dc:	mov	w0, #0xf                   	// #15
     1e0:	bl	0 <lt__error_string>
     1e4:	bl	0 <lt__set_last_error>
     1e8:	mov	w19, #0x1                   	// #1
     1ec:	b	2fc <lt_dlexit+0x15c>
     1f0:	cbz	x8, 290 <lt_dlexit+0xf0>
     1f4:	mov	x0, x8
     1f8:	ldrb	w9, [x0, #36]
     1fc:	tbz	w9, #0, 20c <lt_dlexit+0x6c>
     200:	ldr	x0, [x0]
     204:	str	x0, [x20]
     208:	cbnz	x0, 1f8 <lt_dlexit+0x58>
     20c:	cbz	x8, 290 <lt_dlexit+0xf0>
     210:	mov	w19, wzr
     214:	cbz	x0, 28c <lt_dlexit+0xec>
     218:	adrp	x22, 0 <lt__alloc_die_callback>
     21c:	mov	w21, #0x1                   	// #1
     220:	add	x22, x22, #0x0
     224:	mov	w8, wzr
     228:	ldrb	w9, [x0, #36]
     22c:	ldr	x23, [x0]
     230:	tbnz	w9, #0, 274 <lt_dlexit+0xd4>
     234:	ldr	w8, [x0, #32]
     238:	cmp	w8, w21
     23c:	b.gt	270 <lt_dlexit+0xd0>
     240:	bl	314 <lt_dlclose>
     244:	cmp	w0, #0x0
     248:	cinc	w19, w19, ne  // ne = any
     24c:	cbz	x23, 280 <lt_dlexit+0xe0>
     250:	mov	x8, x22
     254:	ldr	x8, [x8]
     258:	cmp	x8, x23
     25c:	b.eq	264 <lt_dlexit+0xc4>  // b.none
     260:	cbnz	x8, 254 <lt_dlexit+0xb4>
     264:	ldr	x9, [x20]
     268:	cmp	x8, #0x0
     26c:	csel	x23, x23, x9, ne  // ne = any
     270:	mov	w8, #0x1                   	// #1
     274:	mov	x0, x23
     278:	cbnz	x23, 228 <lt_dlexit+0x88>
     27c:	cbz	w8, 28c <lt_dlexit+0xec>
     280:	ldr	x0, [x20]
     284:	add	w21, w21, #0x1
     288:	cbnz	x0, 224 <lt_dlexit+0x84>
     28c:	cbnz	w19, 29c <lt_dlexit+0xfc>
     290:	mov	x0, xzr
     294:	bl	0 <lt__set_last_error>
     298:	mov	w19, wzr
     29c:	mov	x0, xzr
     2a0:	bl	0 <lt_dlloader_next>
     2a4:	cbz	x0, 2ec <lt_dlexit+0x14c>
     2a8:	mov	x20, x0
     2ac:	mov	x0, x20
     2b0:	mov	x21, x20
     2b4:	bl	0 <lt_dlloader_next>
     2b8:	mov	x20, x0
     2bc:	mov	x0, x21
     2c0:	bl	0 <lt_dlloader_get>
     2c4:	ldr	x0, [x0]
     2c8:	bl	0 <lt_dlloader_remove>
     2cc:	cbz	x0, 2dc <lt_dlexit+0x13c>
     2d0:	bl	0 <free>
     2d4:	cbnz	x20, 2ac <lt_dlexit+0x10c>
     2d8:	b	2ec <lt_dlexit+0x14c>
     2dc:	bl	0 <lt__get_last_error>
     2e0:	cmp	x0, #0x0
     2e4:	cinc	w19, w19, ne  // ne = any
     2e8:	cbnz	x20, 2ac <lt_dlexit+0x10c>
     2ec:	adrp	x20, 0 <lt__alloc_die_callback>
     2f0:	ldr	x0, [x20]
     2f4:	bl	0 <free>
     2f8:	str	xzr, [x20]
     2fc:	mov	w0, w19
     300:	ldp	x20, x19, [sp, #48]
     304:	ldp	x22, x21, [sp, #32]
     308:	ldr	x23, [sp, #16]
     30c:	ldp	x29, x30, [sp], #64
     310:	ret

0000000000000314 <lt_dlclose>:
     314:	stp	x29, x30, [sp, #-32]!
     318:	adrp	x8, 0 <lt__alloc_die_callback>
     31c:	ldr	x8, [x8]
     320:	stp	x20, x19, [sp, #16]
     324:	mov	x19, x0
     328:	mov	x29, sp
     32c:	cmp	x8, #0x0
     330:	cset	w10, ne  // ne = any
     334:	cbz	x8, 3e4 <lt_dlclose+0xd0>
     338:	cmp	x8, x19
     33c:	b.eq	3e4 <lt_dlclose+0xd0>  // b.none
     340:	mov	x11, x8
     344:	mov	x9, x11
     348:	ldr	x11, [x11]
     34c:	cmp	x11, #0x0
     350:	cset	w10, ne  // ne = any
     354:	cbz	x11, 360 <lt_dlclose+0x4c>
     358:	cmp	x11, x19
     35c:	b.ne	344 <lt_dlclose+0x30>  // b.any
     360:	tbz	w10, #0, 3ec <lt_dlclose+0xd8>
     364:	ldr	w11, [x19, #32]
     368:	ldrb	w10, [x19, #36]
     36c:	subs	w11, w11, #0x1
     370:	str	w11, [x19, #32]
     374:	b.gt	3f4 <lt_dlclose+0xe0>
     378:	tbnz	w10, #0, 400 <lt_dlclose+0xec>
     37c:	ldp	x11, x10, [x19]
     380:	adrp	x12, 0 <lt__alloc_die_callback>
     384:	add	x12, x12, #0x0
     388:	cmp	x8, x19
     38c:	csel	x8, x12, x9, eq  // eq = none
     390:	ldr	x0, [x10, #56]
     394:	str	x11, [x8]
     398:	ldr	x8, [x10, #24]
     39c:	ldr	x1, [x19, #56]
     3a0:	blr	x8
     3a4:	mov	w20, w0
     3a8:	mov	x0, x19
     3ac:	bl	1824 <unload_deplibs>
     3b0:	ldr	x8, [x19, #72]
     3b4:	add	w20, w0, w20
     3b8:	mov	x0, x8
     3bc:	bl	0 <free>
     3c0:	ldr	x0, [x19, #16]
     3c4:	str	xzr, [x19, #72]
     3c8:	bl	0 <free>
     3cc:	ldr	x0, [x19, #24]
     3d0:	str	xzr, [x19, #16]
     3d4:	bl	0 <free>
     3d8:	mov	x0, x19
     3dc:	bl	0 <free>
     3e0:	b	410 <lt_dlclose+0xfc>
     3e4:	mov	x9, x8
     3e8:	tbnz	w10, #0, 364 <lt_dlclose+0x50>
     3ec:	mov	w0, #0xc                   	// #12
     3f0:	b	404 <lt_dlclose+0xf0>
     3f4:	tbnz	w10, #0, 400 <lt_dlclose+0xec>
     3f8:	mov	w20, wzr
     3fc:	b	410 <lt_dlclose+0xfc>
     400:	mov	w0, #0x10                  	// #16
     404:	bl	0 <lt__error_string>
     408:	bl	0 <lt__set_last_error>
     40c:	mov	w20, #0x1                   	// #1
     410:	mov	w0, w20
     414:	ldp	x20, x19, [sp, #16]
     418:	ldp	x29, x30, [sp], #32
     41c:	ret

0000000000000420 <lt_dladvise_init>:
     420:	stp	x29, x30, [sp, #-32]!
     424:	str	x19, [sp, #16]
     428:	mov	x19, x0
     42c:	mov	w0, #0x4                   	// #4
     430:	mov	x29, sp
     434:	bl	0 <lt__zalloc>
     438:	str	x0, [x19]
     43c:	ldr	x19, [sp, #16]
     440:	cmp	x0, #0x0
     444:	cset	w8, eq  // eq = none
     448:	mov	w0, w8
     44c:	ldp	x29, x30, [sp], #32
     450:	ret

0000000000000454 <lt_dladvise_destroy>:
     454:	cbz	x0, 47c <lt_dladvise_destroy+0x28>
     458:	stp	x29, x30, [sp, #-32]!
     45c:	str	x19, [sp, #16]
     460:	mov	x19, x0
     464:	ldr	x0, [x0]
     468:	mov	x29, sp
     46c:	bl	0 <free>
     470:	str	xzr, [x19]
     474:	ldr	x19, [sp, #16]
     478:	ldp	x29, x30, [sp], #32
     47c:	mov	w0, wzr
     480:	ret

0000000000000484 <lt_dladvise_ext>:
     484:	stp	x29, x30, [sp, #-16]!
     488:	mov	x29, sp
     48c:	cbz	x0, 4b0 <lt_dladvise_ext+0x2c>
     490:	ldr	x8, [x0]
     494:	cbz	x8, 4b0 <lt_dladvise_ext+0x2c>
     498:	ldrb	w9, [x8]
     49c:	mov	w0, wzr
     4a0:	orr	w9, w9, #0x1
     4a4:	strb	w9, [x8]
     4a8:	ldp	x29, x30, [sp], #16
     4ac:	ret
     4b0:	adrp	x0, 0 <lt__alloc_die_callback>
     4b4:	adrp	x1, 0 <lt__alloc_die_callback>
     4b8:	adrp	x3, 0 <lt__alloc_die_callback>
     4bc:	add	x0, x0, #0x0
     4c0:	add	x1, x1, #0x0
     4c4:	add	x3, x3, #0x0
     4c8:	mov	w2, #0x631                 	// #1585
     4cc:	bl	0 <__assert_fail>

00000000000004d0 <lt_dladvise_resident>:
     4d0:	stp	x29, x30, [sp, #-16]!
     4d4:	mov	x29, sp
     4d8:	cbz	x0, 4fc <lt_dladvise_resident+0x2c>
     4dc:	ldr	x8, [x0]
     4e0:	cbz	x8, 4fc <lt_dladvise_resident+0x2c>
     4e4:	ldrb	w9, [x8]
     4e8:	mov	w0, wzr
     4ec:	orr	w9, w9, #0x2
     4f0:	strb	w9, [x8]
     4f4:	ldp	x29, x30, [sp], #16
     4f8:	ret
     4fc:	adrp	x0, 0 <lt__alloc_die_callback>
     500:	adrp	x1, 0 <lt__alloc_die_callback>
     504:	adrp	x3, 0 <lt__alloc_die_callback>
     508:	add	x0, x0, #0x0
     50c:	add	x1, x1, #0x0
     510:	add	x3, x3, #0x0
     514:	mov	w2, #0x639                 	// #1593
     518:	bl	0 <__assert_fail>

000000000000051c <lt_dladvise_local>:
     51c:	stp	x29, x30, [sp, #-16]!
     520:	mov	x29, sp
     524:	cbz	x0, 548 <lt_dladvise_local+0x2c>
     528:	ldr	x8, [x0]
     52c:	cbz	x8, 548 <lt_dladvise_local+0x2c>
     530:	ldrb	w9, [x8]
     534:	mov	w0, wzr
     538:	orr	w9, w9, #0x8
     53c:	strb	w9, [x8]
     540:	ldp	x29, x30, [sp], #16
     544:	ret
     548:	adrp	x0, 0 <lt__alloc_die_callback>
     54c:	adrp	x1, 0 <lt__alloc_die_callback>
     550:	adrp	x3, 0 <lt__alloc_die_callback>
     554:	add	x0, x0, #0x0
     558:	add	x1, x1, #0x0
     55c:	add	x3, x3, #0x0
     560:	mov	w2, #0x641                 	// #1601
     564:	bl	0 <__assert_fail>

0000000000000568 <lt_dladvise_global>:
     568:	stp	x29, x30, [sp, #-16]!
     56c:	mov	x29, sp
     570:	cbz	x0, 594 <lt_dladvise_global+0x2c>
     574:	ldr	x8, [x0]
     578:	cbz	x8, 594 <lt_dladvise_global+0x2c>
     57c:	ldrb	w9, [x8]
     580:	mov	w0, wzr
     584:	orr	w9, w9, #0x4
     588:	strb	w9, [x8]
     58c:	ldp	x29, x30, [sp], #16
     590:	ret
     594:	adrp	x0, 0 <lt__alloc_die_callback>
     598:	adrp	x1, 0 <lt__alloc_die_callback>
     59c:	adrp	x3, 0 <lt__alloc_die_callback>
     5a0:	add	x0, x0, #0x0
     5a4:	add	x1, x1, #0x0
     5a8:	add	x3, x3, #0x0
     5ac:	mov	w2, #0x649                 	// #1609
     5b0:	bl	0 <__assert_fail>

00000000000005b4 <lt_dladvise_preload>:
     5b4:	stp	x29, x30, [sp, #-16]!
     5b8:	mov	x29, sp
     5bc:	cbz	x0, 5e0 <lt_dladvise_preload+0x2c>
     5c0:	ldr	x8, [x0]
     5c4:	cbz	x8, 5e0 <lt_dladvise_preload+0x2c>
     5c8:	ldrb	w9, [x8]
     5cc:	mov	w0, wzr
     5d0:	orr	w9, w9, #0x10
     5d4:	strb	w9, [x8]
     5d8:	ldp	x29, x30, [sp], #16
     5dc:	ret
     5e0:	adrp	x0, 0 <lt__alloc_die_callback>
     5e4:	adrp	x1, 0 <lt__alloc_die_callback>
     5e8:	adrp	x3, 0 <lt__alloc_die_callback>
     5ec:	add	x0, x0, #0x0
     5f0:	add	x1, x1, #0x0
     5f4:	add	x3, x3, #0x0
     5f8:	mov	w2, #0x651                 	// #1617
     5fc:	bl	0 <__assert_fail>

0000000000000600 <lt_dlopen>:
     600:	stp	x29, x30, [sp, #-32]!
     604:	mov	x29, sp
     608:	str	x19, [sp, #16]
     60c:	mov	x19, x0
     610:	str	xzr, [x29, #24]
     614:	bl	0 <lt__get_last_error>
     618:	add	x0, x29, #0x18
     61c:	mov	x1, x19
     620:	mov	x2, xzr
     624:	mov	x3, xzr
     628:	bl	808 <try_dlopen>
     62c:	ldr	x8, [x29, #24]
     630:	ldr	x19, [sp, #16]
     634:	cmp	w0, #0x0
     638:	csel	x0, x8, xzr, eq  // eq = none
     63c:	ldp	x29, x30, [sp], #32
     640:	ret

0000000000000644 <lt_dlopenadvise>:
     644:	sub	sp, sp, #0x40
     648:	stp	x29, x30, [sp, #16]
     64c:	stp	x22, x21, [sp, #32]
     650:	stp	x20, x19, [sp, #48]
     654:	add	x29, sp, #0x10
     658:	mov	x19, x1
     65c:	mov	x20, x0
     660:	str	xzr, [sp, #8]
     664:	bl	0 <lt__get_last_error>
     668:	cbz	x19, 724 <lt_dlopenadvise+0xe0>
     66c:	ldrb	w8, [x19]
     670:	mvn	w9, w8
     674:	tst	w9, #0xc
     678:	b.ne	690 <lt_dlopenadvise+0x4c>  // b.any
     67c:	mov	w0, #0x13                  	// #19
     680:	bl	0 <lt__error_string>
     684:	bl	0 <lt__set_last_error>
     688:	mov	x8, xzr
     68c:	b	744 <lt_dlopenadvise+0x100>
     690:	cbz	x20, 724 <lt_dlopenadvise+0xe0>
     694:	tbz	w8, #0, 724 <lt_dlopenadvise+0xe0>
     698:	mov	x21, x0
     69c:	mov	w1, #0x2e                  	// #46
     6a0:	mov	x0, x20
     6a4:	bl	0 <strrchr>
     6a8:	cbz	x0, 6d4 <lt_dlopenadvise+0x90>
     6ac:	adrp	x1, 0 <lt__alloc_die_callback>
     6b0:	add	x1, x1, #0x0
     6b4:	mov	x22, x0
     6b8:	bl	0 <strcmp>
     6bc:	cbz	w0, 724 <lt_dlopenadvise+0xe0>
     6c0:	adrp	x1, 0 <lt__alloc_die_callback>
     6c4:	add	x1, x1, #0x0
     6c8:	mov	x0, x22
     6cc:	bl	0 <strcmp>
     6d0:	cbz	w0, 724 <lt_dlopenadvise+0xe0>
     6d4:	ldrb	w8, [x20]
     6d8:	cbz	w8, 7a4 <lt_dlopenadvise+0x160>
     6dc:	adrp	x2, 0 <lt__alloc_die_callback>
     6e0:	add	x2, x2, #0x0
     6e4:	add	x0, sp, #0x8
     6e8:	mov	x1, x20
     6ec:	mov	x3, x19
     6f0:	bl	808 <try_dlopen>
     6f4:	ldr	x8, [sp, #8]
     6f8:	cbnz	x8, 744 <lt_dlopenadvise+0x100>
     6fc:	cmp	w0, #0x1
     700:	b.lt	75c <lt_dlopenadvise+0x118>  // b.tstop
     704:	bl	0 <lt__get_last_error>
     708:	mov	x22, x0
     70c:	mov	w0, #0x5                   	// #5
     710:	bl	0 <lt__error_string>
     714:	cmp	x22, x0
     718:	b.eq	75c <lt_dlopenadvise+0x118>  // b.none
     71c:	ldr	x8, [sp, #8]
     720:	b	744 <lt_dlopenadvise+0x100>
     724:	add	x0, sp, #0x8
     728:	mov	x1, x20
     72c:	mov	x2, xzr
     730:	mov	x3, x19
     734:	bl	808 <try_dlopen>
     738:	ldr	x8, [sp, #8]
     73c:	cmp	w0, #0x0
     740:	csel	x8, x8, xzr, eq  // eq = none
     744:	ldp	x20, x19, [sp, #48]
     748:	ldp	x22, x21, [sp, #32]
     74c:	ldp	x29, x30, [sp, #16]
     750:	mov	x0, x8
     754:	add	sp, sp, #0x40
     758:	ret
     75c:	mov	x0, x21
     760:	bl	0 <lt__set_last_error>
     764:	adrp	x2, 0 <lt__alloc_die_callback>
     768:	add	x2, x2, #0x0
     76c:	add	x0, sp, #0x8
     770:	mov	x1, x20
     774:	mov	x3, x19
     778:	bl	808 <try_dlopen>
     77c:	ldr	x8, [sp, #8]
     780:	cbnz	x8, 744 <lt_dlopenadvise+0x100>
     784:	cmp	w0, #0x1
     788:	b.lt	7a4 <lt_dlopenadvise+0x160>  // b.tstop
     78c:	bl	0 <lt__get_last_error>
     790:	mov	x19, x0
     794:	mov	w0, #0x5                   	// #5
     798:	bl	0 <lt__error_string>
     79c:	cmp	x19, x0
     7a0:	b.ne	71c <lt_dlopenadvise+0xd8>  // b.any
     7a4:	mov	w0, #0x5                   	// #5
     7a8:	b	680 <lt_dlopenadvise+0x3c>

00000000000007ac <lt_dlopenext>:
     7ac:	stp	x29, x30, [sp, #-32]!
     7b0:	stp	x20, x19, [sp, #16]
     7b4:	mov	x20, x0
     7b8:	mov	w0, #0x4                   	// #4
     7bc:	mov	x29, sp
     7c0:	bl	0 <lt__zalloc>
     7c4:	mov	x19, x0
     7c8:	cbz	x0, 7ec <lt_dlopenext+0x40>
     7cc:	ldrb	w8, [x19]
     7d0:	mov	x0, x20
     7d4:	mov	x1, x19
     7d8:	orr	w8, w8, #0x1
     7dc:	strb	w8, [x19]
     7e0:	bl	644 <lt_dlopenadvise>
     7e4:	mov	x20, x0
     7e8:	b	7f0 <lt_dlopenext+0x44>
     7ec:	mov	x20, xzr
     7f0:	mov	x0, x19
     7f4:	bl	0 <free>
     7f8:	mov	x0, x20
     7fc:	ldp	x20, x19, [sp, #16]
     800:	ldp	x29, x30, [sp], #32
     804:	ret

0000000000000808 <try_dlopen>:
     808:	sub	sp, sp, #0xc0
     80c:	stp	x29, x30, [sp, #96]
     810:	add	x29, sp, #0x60
     814:	stp	x28, x27, [sp, #112]
     818:	stp	x26, x25, [sp, #128]
     81c:	stp	x24, x23, [sp, #144]
     820:	stp	x22, x21, [sp, #160]
     824:	stp	x20, x19, [sp, #176]
     828:	stp	xzr, xzr, [x29, #-24]
     82c:	cbz	x0, 11e4 <try_dlopen+0x9dc>
     830:	ldr	x8, [x0]
     834:	mov	x20, x0
     838:	cbnz	x8, 1204 <try_dlopen+0x9fc>
     83c:	mov	x25, x3
     840:	mov	x23, x2
     844:	mov	x21, x1
     848:	bl	0 <lt__get_last_error>
     84c:	mov	x22, x0
     850:	cbz	x21, 880 <try_dlopen+0x78>
     854:	ldrb	w8, [x21]
     858:	cbz	w8, 1224 <try_dlopen+0xa1c>
     85c:	cbz	x23, 8c8 <try_dlopen+0xc0>
     860:	mov	x0, x21
     864:	bl	0 <strlen>
     868:	ldrb	w8, [x23]
     86c:	mov	x19, x0
     870:	cbz	w8, 8dc <try_dlopen+0xd4>
     874:	mov	x0, x23
     878:	bl	0 <strlen>
     87c:	b	8e0 <try_dlopen+0xd8>
     880:	mov	w0, #0x58                  	// #88
     884:	bl	0 <lt__zalloc>
     888:	str	x0, [x20]
     88c:	cbz	x0, 92c <try_dlopen+0x124>
     890:	stur	x0, [x29, #-32]
     894:	ldrb	w8, [x0, #36]
     898:	mov	x1, xzr
     89c:	mov	x2, x25
     8a0:	mov	x3, xzr
     8a4:	orr	w8, w8, #0x1
     8a8:	strb	w8, [x0, #36]
     8ac:	sub	x0, x29, #0x20
     8b0:	bl	22f0 <tryall_dlopen>
     8b4:	cbz	w0, 980 <try_dlopen+0x178>
     8b8:	ldr	x0, [x20]
     8bc:	bl	0 <free>
     8c0:	str	xzr, [x20]
     8c4:	b	92c <try_dlopen+0x124>
     8c8:	mov	x0, x21
     8cc:	bl	0 <lt__strdup>
     8d0:	mov	x19, x0
     8d4:	cbnz	x0, 908 <try_dlopen+0x100>
     8d8:	b	92c <try_dlopen+0x124>
     8dc:	mov	x0, xzr
     8e0:	add	x8, x19, x0
     8e4:	add	x0, x8, #0x1
     8e8:	bl	0 <lt__malloc>
     8ec:	cbz	x0, 92c <try_dlopen+0x124>
     8f0:	adrp	x1, 0 <lt__alloc_die_callback>
     8f4:	add	x1, x1, #0x0
     8f8:	mov	x2, x21
     8fc:	mov	x3, x23
     900:	mov	x19, x0
     904:	bl	0 <sprintf>
     908:	sub	x1, x29, #0x10
     90c:	mov	x0, x19
     910:	bl	1dd8 <canonicalize_path>
     914:	cbz	w0, 934 <try_dlopen+0x12c>
     918:	mov	x23, xzr
     91c:	mov	x21, xzr
     920:	mov	x24, xzr
     924:	mov	w26, #0x1                   	// #1
     928:	b	b08 <try_dlopen+0x300>
     92c:	mov	w26, #0x1                   	// #1
     930:	b	b48 <try_dlopen+0x340>
     934:	ldur	x21, [x29, #-16]
     938:	mov	w1, #0x2f                  	// #47
     93c:	mov	x0, x21
     940:	bl	0 <strrchr>
     944:	cbz	x0, a08 <try_dlopen+0x200>
     948:	add	x23, x0, #0x1
     94c:	sub	x21, x23, x21
     950:	mov	x27, x0
     954:	add	x0, x21, #0x1
     958:	bl	0 <lt__malloc>
     95c:	stur	x0, [x29, #-24]
     960:	cbz	x0, af8 <try_dlopen+0x2f0>
     964:	ldur	x1, [x29, #-16]
     968:	mov	x2, x21
     96c:	bl	0 <lt_strlcpy>
     970:	ldur	x8, [x29, #-24]
     974:	strb	wzr, [x8, x21]
     978:	mov	x21, x23
     97c:	b	a10 <try_dlopen+0x208>
     980:	mov	x19, xzr
     984:	mov	x23, xzr
     988:	mov	x21, xzr
     98c:	mov	x24, xzr
     990:	ldr	x0, [x20]
     994:	ldur	x8, [x29, #-32]
     998:	cmp	x0, x8
     99c:	b.eq	9b0 <try_dlopen+0x1a8>  // b.none
     9a0:	bl	0 <free>
     9a4:	ldur	x0, [x29, #-32]
     9a8:	str	x0, [x20]
     9ac:	stur	xzr, [x29, #-32]
     9b0:	ldr	w8, [x0, #32]
     9b4:	cbnz	w8, 9f8 <try_dlopen+0x1f0>
     9b8:	ldr	x8, [x0, #24]
     9bc:	mov	w9, #0x1                   	// #1
     9c0:	str	w9, [x0, #32]
     9c4:	cmp	x8, x23
     9c8:	b.eq	9e4 <try_dlopen+0x1dc>  // b.none
     9cc:	mov	x0, x8
     9d0:	bl	0 <free>
     9d4:	ldr	x8, [x20]
     9d8:	str	x23, [x8, #24]
     9dc:	ldr	x0, [x20]
     9e0:	mov	x23, xzr
     9e4:	adrp	x8, 0 <lt__alloc_die_callback>
     9e8:	ldr	x9, [x8]
     9ec:	str	x9, [x0]
     9f0:	ldr	x9, [x20]
     9f4:	str	x9, [x8]
     9f8:	mov	x0, x22
     9fc:	bl	0 <lt__set_last_error>
     a00:	mov	w26, wzr
     a04:	b	b08 <try_dlopen+0x300>
     a08:	cbz	x21, 1244 <try_dlopen+0xa3c>
     a0c:	stur	xzr, [x29, #-16]
     a10:	ldrb	w8, [x21]
     a14:	cbz	w8, 1244 <try_dlopen+0xa3c>
     a18:	mov	w1, #0x2e                  	// #46
     a1c:	mov	x0, x21
     a20:	bl	0 <strrchr>
     a24:	mov	x27, x0
     a28:	cbnz	x0, a38 <try_dlopen+0x230>
     a2c:	mov	x0, x21
     a30:	bl	0 <strlen>
     a34:	add	x27, x21, x0
     a38:	sub	x24, x27, x21
     a3c:	add	x0, x24, #0x1
     a40:	bl	0 <lt__malloc>
     a44:	mov	x23, x0
     a48:	cbz	x0, 920 <try_dlopen+0x118>
     a4c:	cmp	x24, #0x1
     a50:	b.lt	a88 <try_dlopen+0x280>  // b.tstop
     a54:	bl	0 <__ctype_b_loc>
     a58:	mov	w8, #0x5f                  	// #95
     a5c:	mov	x9, x24
     a60:	mov	x10, x21
     a64:	mov	x11, x23
     a68:	ldr	x12, [x0]
     a6c:	ldrb	w13, [x10], #1
     a70:	ldrh	w12, [x12, x13, lsl #1]
     a74:	tst	w12, #0x8
     a78:	csel	w12, w8, w13, eq  // eq = none
     a7c:	subs	x9, x9, #0x1
     a80:	strb	w12, [x11], #1
     a84:	b.ne	a68 <try_dlopen+0x260>  // b.any
     a88:	strb	wzr, [x23, x24]
     a8c:	ldur	x8, [x29, #-24]
     a90:	cbz	x8, b6c <try_dlopen+0x364>
     a94:	mov	x24, xzr
     a98:	cbz	x25, aa4 <try_dlopen+0x29c>
     a9c:	ldrb	w8, [x25]
     aa0:	tbnz	w8, #4, a00 <try_dlopen+0x1f8>
     aa4:	cbz	x27, abc <try_dlopen+0x2b4>
     aa8:	adrp	x1, 0 <lt__alloc_die_callback>
     aac:	add	x1, x1, #0x0
     ab0:	mov	x0, x27
     ab4:	bl	0 <strcmp>
     ab8:	cbz	w0, b94 <try_dlopen+0x38c>
     abc:	mov	w0, #0x58                  	// #88
     ac0:	bl	0 <lt__zalloc>
     ac4:	str	x0, [x20]
     ac8:	cbz	x0, 924 <try_dlopen+0x11c>
     acc:	ldur	x8, [x29, #-24]
     ad0:	stur	x0, [x29, #-32]
     ad4:	cbz	x8, bd0 <try_dlopen+0x3c8>
     ad8:	sub	x0, x29, #0x20
     adc:	mov	x1, x19
     ae0:	mov	x2, x25
     ae4:	mov	x3, xzr
     ae8:	bl	22f0 <tryall_dlopen>
     aec:	cbz	w0, c74 <try_dlopen+0x46c>
     af0:	stur	xzr, [x29, #-32]
     af4:	b	c7c <try_dlopen+0x474>
     af8:	mov	x23, xzr
     afc:	mov	x24, xzr
     b00:	mov	w26, #0x1                   	// #1
     b04:	mov	x21, x27
     b08:	ldur	x0, [x29, #-24]
     b0c:	bl	0 <free>
     b10:	mov	x0, x19
     b14:	stur	xzr, [x29, #-24]
     b18:	bl	0 <free>
     b1c:	mov	x0, x23
     b20:	bl	0 <free>
     b24:	ldur	x0, [x29, #-16]
     b28:	cbnz	x0, b38 <try_dlopen+0x330>
     b2c:	mov	x0, x21
     b30:	bl	0 <free>
     b34:	ldur	x0, [x29, #-16]
     b38:	bl	0 <free>
     b3c:	mov	x0, x24
     b40:	stur	xzr, [x29, #-16]
     b44:	bl	0 <free>
     b48:	mov	w0, w26
     b4c:	ldp	x20, x19, [sp, #176]
     b50:	ldp	x22, x21, [sp, #160]
     b54:	ldp	x24, x23, [sp, #144]
     b58:	ldp	x26, x25, [sp, #128]
     b5c:	ldp	x28, x27, [sp, #112]
     b60:	ldp	x29, x30, [sp, #96]
     b64:	add	sp, sp, #0xc0
     b68:	ret
     b6c:	adrp	x0, 0 <lt__alloc_die_callback>
     b70:	add	x0, x0, #0x0
     b74:	bl	0 <lt_dlloader_find>
     b78:	cbz	x0, a94 <try_dlopen+0x28c>
     b7c:	ldrb	w8, [x23]
     b80:	mov	x28, x0
     b84:	cbz	w8, c8c <try_dlopen+0x484>
     b88:	mov	x0, x23
     b8c:	bl	0 <strlen>
     b90:	b	c90 <try_dlopen+0x488>
     b94:	ldur	x8, [x29, #-24]
     b98:	stur	xzr, [x29, #-40]
     b9c:	stp	xzr, xzr, [sp, #40]
     ba0:	str	xzr, [sp, #32]
     ba4:	cbz	x8, cf0 <try_dlopen+0x4e8>
     ba8:	adrp	x1, 0 <lt__alloc_die_callback>
     bac:	add	x1, x1, #0x0
     bb0:	mov	x0, x19
     bb4:	bl	0 <fopen>
     bb8:	mov	x28, x0
     bbc:	cbnz	x28, db4 <try_dlopen+0x5ac>
     bc0:	mov	w0, #0x5                   	// #5
     bc4:	bl	0 <lt__error_string>
     bc8:	bl	0 <lt__set_last_error>
     bcc:	b	924 <try_dlopen+0x11c>
     bd0:	adrp	x8, 0 <lt__alloc_die_callback>
     bd4:	ldr	x0, [x8]
     bd8:	cbz	x0, bf8 <try_dlopen+0x3f0>
     bdc:	adrp	x2, 0 <lt__alloc_die_callback>
     be0:	add	x2, x2, #0x0
     be4:	sub	x3, x29, #0x20
     be8:	mov	x1, x21
     bec:	mov	x4, x25
     bf0:	bl	1344 <foreach_dirinpath>
     bf4:	cbnz	w0, c74 <try_dlopen+0x46c>
     bf8:	adrp	x0, 0 <lt__alloc_die_callback>
     bfc:	add	x0, x0, #0x0
     c00:	bl	0 <getenv>
     c04:	cbz	x0, c24 <try_dlopen+0x41c>
     c08:	adrp	x2, 0 <lt__alloc_die_callback>
     c0c:	add	x2, x2, #0x0
     c10:	sub	x3, x29, #0x20
     c14:	mov	x1, x21
     c18:	mov	x4, x25
     c1c:	bl	1344 <foreach_dirinpath>
     c20:	cbnz	w0, c74 <try_dlopen+0x46c>
     c24:	adrp	x0, 0 <lt__alloc_die_callback>
     c28:	add	x0, x0, #0x0
     c2c:	bl	0 <getenv>
     c30:	cbz	x0, c50 <try_dlopen+0x448>
     c34:	adrp	x2, 0 <lt__alloc_die_callback>
     c38:	add	x2, x2, #0x0
     c3c:	sub	x3, x29, #0x20
     c40:	mov	x1, x21
     c44:	mov	x4, x25
     c48:	bl	1344 <foreach_dirinpath>
     c4c:	cbnz	w0, c74 <try_dlopen+0x46c>
     c50:	adrp	x0, 0 <lt__alloc_die_callback>
     c54:	adrp	x2, 0 <lt__alloc_die_callback>
     c58:	add	x0, x0, #0x0
     c5c:	add	x2, x2, #0x0
     c60:	sub	x3, x29, #0x20
     c64:	mov	x1, x21
     c68:	mov	x4, x25
     c6c:	bl	1344 <foreach_dirinpath>
     c70:	cbz	w0, ad8 <try_dlopen+0x2d0>
     c74:	ldur	x8, [x29, #-32]
     c78:	cbnz	x8, 990 <try_dlopen+0x188>
     c7c:	ldr	x0, [x20]
     c80:	bl	0 <free>
     c84:	str	xzr, [x20]
     c88:	b	924 <try_dlopen+0x11c>
     c8c:	mov	x0, xzr
     c90:	add	x0, x0, #0x6
     c94:	bl	0 <lt__malloc>
     c98:	mov	x24, x0
     c9c:	mov	w0, #0x58                  	// #88
     ca0:	bl	0 <lt__zalloc>
     ca4:	mov	w26, #0x1                   	// #1
     ca8:	str	x0, [x20]
     cac:	cbz	x24, b08 <try_dlopen+0x300>
     cb0:	cbz	x0, b08 <try_dlopen+0x300>
     cb4:	adrp	x1, 0 <lt__alloc_die_callback>
     cb8:	stur	x0, [x29, #-32]
     cbc:	add	x1, x1, #0x0
     cc0:	mov	w2, #0x3                   	// #3
     cc4:	mov	x0, x23
     cc8:	bl	0 <strncmp>
     ccc:	cbz	w0, de8 <try_dlopen+0x5e0>
     cd0:	adrp	x1, 0 <lt__alloc_die_callback>
     cd4:	adrp	x3, 0 <lt__alloc_die_callback>
     cd8:	add	x1, x1, #0x0
     cdc:	add	x3, x3, #0x0
     ce0:	mov	x0, x24
     ce4:	mov	x2, x23
     ce8:	bl	0 <sprintf>
     cec:	b	e0c <try_dlopen+0x604>
     cf0:	adrp	x8, 0 <lt__alloc_die_callback>
     cf4:	ldr	x0, [x8]
     cf8:	cbz	x0, d20 <try_dlopen+0x518>
     cfc:	adrp	x2, 0 <lt__alloc_die_callback>
     d00:	add	x2, x2, #0x0
     d04:	sub	x3, x29, #0x18
     d08:	sub	x4, x29, #0x8
     d0c:	mov	x1, x21
     d10:	stur	xzr, [x29, #-8]
     d14:	bl	1344 <foreach_dirinpath>
     d18:	ldur	x28, [x29, #-8]
     d1c:	cbnz	x28, db4 <try_dlopen+0x5ac>
     d20:	adrp	x0, 0 <lt__alloc_die_callback>
     d24:	add	x0, x0, #0x0
     d28:	bl	0 <getenv>
     d2c:	cbz	x0, d54 <try_dlopen+0x54c>
     d30:	adrp	x2, 0 <lt__alloc_die_callback>
     d34:	add	x2, x2, #0x0
     d38:	sub	x3, x29, #0x18
     d3c:	sub	x4, x29, #0x8
     d40:	mov	x1, x21
     d44:	stur	xzr, [x29, #-8]
     d48:	bl	1344 <foreach_dirinpath>
     d4c:	ldur	x28, [x29, #-8]
     d50:	cbnz	x28, db4 <try_dlopen+0x5ac>
     d54:	adrp	x0, 0 <lt__alloc_die_callback>
     d58:	add	x0, x0, #0x0
     d5c:	bl	0 <getenv>
     d60:	cbz	x0, d88 <try_dlopen+0x580>
     d64:	adrp	x2, 0 <lt__alloc_die_callback>
     d68:	add	x2, x2, #0x0
     d6c:	sub	x3, x29, #0x18
     d70:	sub	x4, x29, #0x8
     d74:	mov	x1, x21
     d78:	stur	xzr, [x29, #-8]
     d7c:	bl	1344 <foreach_dirinpath>
     d80:	ldur	x28, [x29, #-8]
     d84:	cbnz	x28, db4 <try_dlopen+0x5ac>
     d88:	adrp	x0, 0 <lt__alloc_die_callback>
     d8c:	adrp	x2, 0 <lt__alloc_die_callback>
     d90:	add	x0, x0, #0x0
     d94:	add	x2, x2, #0x0
     d98:	sub	x3, x29, #0x18
     d9c:	sub	x4, x29, #0x8
     da0:	mov	x1, x21
     da4:	stur	xzr, [x29, #-8]
     da8:	bl	1344 <foreach_dirinpath>
     dac:	ldur	x28, [x29, #-8]
     db0:	cbz	x28, bc0 <try_dlopen+0x3b8>
     db4:	mov	w0, #0x800                 	// #2048
     db8:	bl	0 <lt__malloc>
     dbc:	cbz	x0, e3c <try_dlopen+0x634>
     dc0:	mov	x27, x0
     dc4:	mov	x0, x28
     dc8:	bl	0 <feof>
     dcc:	mov	w8, #0x1                   	// #1
     dd0:	cbz	w0, e58 <try_dlopen+0x650>
     dd4:	str	w8, [sp, #20]
     dd8:	mov	x0, x27
     ddc:	bl	0 <free>
     de0:	mov	w26, wzr
     de4:	b	1068 <try_dlopen+0x860>
     de8:	adrp	x1, 0 <lt__alloc_die_callback>
     dec:	adrp	x2, 0 <lt__alloc_die_callback>
     df0:	adrp	x4, 0 <lt__alloc_die_callback>
     df4:	add	x3, x23, #0x3
     df8:	add	x1, x1, #0x0
     dfc:	add	x2, x2, #0x0
     e00:	add	x4, x4, #0x0
     e04:	mov	x0, x24
     e08:	bl	0 <sprintf>
     e0c:	sub	x0, x29, #0x20
     e10:	mov	x1, x24
     e14:	mov	x2, x25
     e18:	mov	x3, x28
     e1c:	bl	22f0 <tryall_dlopen>
     e20:	cbz	w0, 990 <try_dlopen+0x188>
     e24:	ldr	x0, [x20]
     e28:	bl	0 <free>
     e2c:	str	xzr, [x20]
     e30:	stur	xzr, [x29, #-32]
     e34:	cbnz	x25, a9c <try_dlopen+0x294>
     e38:	b	aa4 <try_dlopen+0x29c>
     e3c:	mov	w0, #0x5                   	// #5
     e40:	bl	0 <lt__error_string>
     e44:	bl	0 <lt__set_last_error>
     e48:	mov	w8, #0x1                   	// #1
     e4c:	mov	w26, #0x1                   	// #1
     e50:	str	w8, [sp, #20]
     e54:	b	1068 <try_dlopen+0x860>
     e58:	mov	w26, #0x800                 	// #2048
     e5c:	str	w8, [sp, #20]
     e60:	str	x28, [sp, #24]
     e64:	add	x8, x26, x27
     e68:	mov	x0, x27
     e6c:	mov	w1, w26
     e70:	mov	x2, x28
     e74:	sturb	wzr, [x8, #-2]
     e78:	bl	0 <fgets>
     e7c:	cbz	x0, dd8 <try_dlopen+0x5d0>
     e80:	mov	x28, x26
     e84:	add	x8, x28, x27
     e88:	ldurb	w8, [x8, #-2]
     e8c:	mov	x26, x28
     e90:	cbz	w8, ee0 <try_dlopen+0x6d8>
     e94:	cmp	w8, #0xa
     e98:	b.eq	ee0 <try_dlopen+0x6d8>  // b.none
     e9c:	ldr	x0, [sp, #24]
     ea0:	bl	0 <feof>
     ea4:	cbnz	w0, ee0 <try_dlopen+0x6d8>
     ea8:	lsl	x28, x26, #1
     eac:	mov	x0, x27
     eb0:	mov	x1, x28
     eb4:	bl	0 <lt__realloc>
     eb8:	mov	x27, x0
     ebc:	cbz	x0, 1058 <try_dlopen+0x850>
     ec0:	ldr	x2, [sp, #24]
     ec4:	add	x9, x26, x27
     ec8:	add	x8, x28, x27
     ecc:	sub	x0, x9, #0x1
     ed0:	add	w1, w26, #0x1
     ed4:	sturb	wzr, [x8, #-2]
     ed8:	bl	0 <fgets>
     edc:	cbnz	x0, e84 <try_dlopen+0x67c>
     ee0:	ldrb	w8, [x27]
     ee4:	cmp	w8, #0x23
     ee8:	b.eq	fa0 <try_dlopen+0x798>  // b.none
     eec:	ldr	x28, [sp, #24]
     ef0:	cmp	w8, #0xa
     ef4:	b.eq	fd0 <try_dlopen+0x7c8>  // b.none
     ef8:	adrp	x1, 0 <lt__alloc_die_callback>
     efc:	mov	w2, #0x7                   	// #7
     f00:	mov	x0, x27
     f04:	add	x1, x1, #0x0
     f08:	bl	0 <strncmp>
     f0c:	cbz	w0, fa8 <try_dlopen+0x7a0>
     f10:	adrp	x1, 0 <lt__alloc_die_callback>
     f14:	mov	w2, #0xc                   	// #12
     f18:	mov	x0, x27
     f1c:	add	x1, x1, #0x0
     f20:	bl	0 <strncmp>
     f24:	cbz	w0, fb0 <try_dlopen+0x7a8>
     f28:	adrp	x1, 0 <lt__alloc_die_callback>
     f2c:	mov	w2, #0x7                   	// #7
     f30:	mov	x0, x27
     f34:	add	x1, x1, #0x0
     f38:	bl	0 <strncmp>
     f3c:	cbz	w0, fbc <try_dlopen+0x7b4>
     f40:	adrp	x1, 0 <lt__alloc_die_callback>
     f44:	mov	w2, #0x10                  	// #16
     f48:	mov	x0, x27
     f4c:	add	x1, x1, #0x0
     f50:	bl	0 <strncmp>
     f54:	cbz	w0, fe0 <try_dlopen+0x7d8>
     f58:	adrp	x1, 0 <lt__alloc_die_callback>
     f5c:	mov	x0, x27
     f60:	add	x1, x1, #0x0
     f64:	bl	0 <strcmp>
     f68:	cbz	w0, fec <try_dlopen+0x7e4>
     f6c:	adrp	x1, 0 <lt__alloc_die_callback>
     f70:	mov	x0, x27
     f74:	add	x1, x1, #0x0
     f78:	bl	0 <strcmp>
     f7c:	cbz	w0, ff8 <try_dlopen+0x7f0>
     f80:	ldur	x8, [x29, #-40]
     f84:	cbnz	x8, fd0 <try_dlopen+0x7c8>
     f88:	adrp	x1, 0 <lt__alloc_die_callback>
     f8c:	mov	w2, #0xe                   	// #14
     f90:	mov	x0, x27
     f94:	add	x1, x1, #0x0
     f98:	bl	0 <strncmp>
     f9c:	cbz	w0, 1000 <try_dlopen+0x7f8>
     fa0:	ldr	x28, [sp, #24]
     fa4:	b	fd0 <try_dlopen+0x7c8>
     fa8:	sub	x0, x29, #0x28
     fac:	b	fc0 <try_dlopen+0x7b8>
     fb0:	add	x0, sp, #0x30
     fb4:	mov	w8, #0xc                   	// #12
     fb8:	b	fc4 <try_dlopen+0x7bc>
     fbc:	add	x0, sp, #0x28
     fc0:	mov	w8, #0x7                   	// #7
     fc4:	add	x1, x27, x8
     fc8:	bl	255c <trim>
     fcc:	cbnz	w0, 1058 <try_dlopen+0x850>
     fd0:	mov	x0, x28
     fd4:	bl	0 <feof>
     fd8:	cbz	w0, e64 <try_dlopen+0x65c>
     fdc:	b	dd8 <try_dlopen+0x5d0>
     fe0:	add	x0, sp, #0x20
     fe4:	mov	w8, #0x10                  	// #16
     fe8:	b	fc4 <try_dlopen+0x7bc>
     fec:	mov	w8, #0x1                   	// #1
     ff0:	str	w8, [sp, #20]
     ff4:	b	fd0 <try_dlopen+0x7c8>
     ff8:	str	wzr, [sp, #20]
     ffc:	b	fd0 <try_dlopen+0x7c8>
    1000:	add	x1, x27, #0xe
    1004:	sub	x0, x29, #0x28
    1008:	bl	255c <trim>
    100c:	cbnz	w0, 1058 <try_dlopen+0x850>
    1010:	ldur	x28, [x29, #-40]
    1014:	cbz	x28, fa0 <try_dlopen+0x798>
    1018:	mov	w1, #0x20                  	// #32
    101c:	mov	x0, x28
    1020:	bl	0 <strrchr>
    1024:	cbz	x0, fa0 <try_dlopen+0x798>
    1028:	add	x0, x0, #0x1
    102c:	bl	0 <lt__strdup>
    1030:	str	x0, [sp, #8]
    1034:	cbz	x0, 1058 <try_dlopen+0x850>
    1038:	ldr	x8, [sp, #8]
    103c:	cmp	x28, x8
    1040:	b.eq	fa0 <try_dlopen+0x798>  // b.none
    1044:	mov	x0, x28
    1048:	bl	0 <free>
    104c:	ldr	x8, [sp, #8]
    1050:	stur	x8, [x29, #-40]
    1054:	b	fa0 <try_dlopen+0x798>
    1058:	mov	x0, x27
    105c:	bl	0 <free>
    1060:	ldr	x28, [sp, #24]
    1064:	mov	w26, #0x1                   	// #1
    1068:	mov	x0, x28
    106c:	bl	0 <fclose>
    1070:	mov	w0, #0x58                  	// #88
    1074:	bl	0 <lt__zalloc>
    1078:	cmp	x0, #0x0
    107c:	cinc	w26, w26, eq  // eq = none
    1080:	str	x0, [x20]
    1084:	cbz	w26, 10c8 <try_dlopen+0x8c0>
    1088:	ldur	x0, [x29, #-40]
    108c:	bl	0 <free>
    1090:	ldr	x0, [sp, #48]
    1094:	stur	xzr, [x29, #-40]
    1098:	bl	0 <free>
    109c:	ldr	x0, [sp, #40]
    10a0:	str	xzr, [sp, #48]
    10a4:	bl	0 <free>
    10a8:	ldr	x0, [sp, #32]
    10ac:	str	xzr, [sp, #40]
    10b0:	bl	0 <free>
    10b4:	str	xzr, [sp, #32]
    10b8:	ldr	x0, [x20]
    10bc:	bl	0 <free>
    10c0:	str	xzr, [x20]
    10c4:	b	b08 <try_dlopen+0x300>
    10c8:	cbz	x0, 1264 <try_dlopen+0xa5c>
    10cc:	str	wzr, [x0, #40]
    10d0:	ldur	x8, [x29, #-24]
    10d4:	ldp	x26, x27, [sp, #40]
    10d8:	ldur	x28, [x29, #-40]
    10dc:	stur	x0, [x29, #-32]
    10e0:	str	x8, [sp, #24]
    10e4:	cbz	x27, 110c <try_dlopen+0x904>
    10e8:	adrp	x0, 0 <lt__alloc_die_callback>
    10ec:	add	x0, x0, #0x0
    10f0:	bl	0 <lt_dlloader_find>
    10f4:	mov	x3, x0
    10f8:	sub	x0, x29, #0x20
    10fc:	mov	x1, x27
    1100:	mov	x2, x25
    1104:	bl	22f0 <tryall_dlopen>
    1108:	cbz	w0, 1194 <try_dlopen+0x98c>
    110c:	cbz	x28, 1184 <try_dlopen+0x97c>
    1110:	ldr	w8, [sp, #20]
    1114:	cbz	w8, 1138 <try_dlopen+0x930>
    1118:	cbz	x26, 1138 <try_dlopen+0x930>
    111c:	sub	x0, x29, #0x20
    1120:	mov	x1, xzr
    1124:	mov	x2, x26
    1128:	mov	x3, x28
    112c:	mov	x4, x25
    1130:	bl	2620 <tryall_dlopen_module>
    1134:	cbz	w0, 1194 <try_dlopen+0x98c>
    1138:	ldr	w8, [sp, #20]
    113c:	cbnz	w8, 1160 <try_dlopen+0x958>
    1140:	ldr	x1, [sp, #24]
    1144:	adrp	x2, 0 <lt__alloc_die_callback>
    1148:	add	x2, x2, #0x0
    114c:	sub	x0, x29, #0x20
    1150:	mov	x3, x28
    1154:	mov	x4, x25
    1158:	bl	2620 <tryall_dlopen_module>
    115c:	cbz	w0, 1194 <try_dlopen+0x98c>
    1160:	ldr	x8, [sp, #24]
    1164:	cbz	x8, 1184 <try_dlopen+0x97c>
    1168:	ldr	x2, [sp, #24]
    116c:	sub	x0, x29, #0x20
    1170:	mov	x1, xzr
    1174:	mov	x3, x28
    1178:	mov	x4, x25
    117c:	bl	2620 <tryall_dlopen_module>
    1180:	cbz	w0, 1194 <try_dlopen+0x98c>
    1184:	ldr	x0, [x20]
    1188:	bl	1824 <unload_deplibs>
    118c:	mov	w25, wzr
    1190:	b	1198 <try_dlopen+0x990>
    1194:	mov	w25, #0x1                   	// #1
    1198:	mov	x0, x28
    119c:	bl	0 <free>
    11a0:	mov	x0, x27
    11a4:	stur	xzr, [x29, #-40]
    11a8:	bl	0 <free>
    11ac:	mov	x0, x26
    11b0:	str	xzr, [sp, #48]
    11b4:	bl	0 <free>
    11b8:	ldr	x0, [sp, #32]
    11bc:	str	xzr, [sp, #40]
    11c0:	bl	0 <free>
    11c4:	str	xzr, [sp, #32]
    11c8:	ldr	x0, [x20]
    11cc:	tbz	w25, #0, c80 <try_dlopen+0x478>
    11d0:	ldur	x8, [x29, #-32]
    11d4:	cmp	x0, x8
    11d8:	b.eq	990 <try_dlopen+0x188>  // b.none
    11dc:	bl	1824 <unload_deplibs>
    11e0:	b	990 <try_dlopen+0x188>
    11e4:	adrp	x0, 0 <lt__alloc_die_callback>
    11e8:	adrp	x1, 0 <lt__alloc_die_callback>
    11ec:	adrp	x3, 0 <lt__alloc_die_callback>
    11f0:	add	x0, x0, #0x0
    11f4:	add	x1, x1, #0x0
    11f8:	add	x3, x3, #0x0
    11fc:	mov	w2, #0x494                 	// #1172
    1200:	bl	0 <__assert_fail>
    1204:	adrp	x0, 0 <lt__alloc_die_callback>
    1208:	adrp	x1, 0 <lt__alloc_die_callback>
    120c:	adrp	x3, 0 <lt__alloc_die_callback>
    1210:	add	x0, x0, #0x0
    1214:	add	x1, x1, #0x0
    1218:	add	x3, x3, #0x0
    121c:	mov	w2, #0x495                 	// #1173
    1220:	bl	0 <__assert_fail>
    1224:	adrp	x0, 0 <lt__alloc_die_callback>
    1228:	adrp	x1, 0 <lt__alloc_die_callback>
    122c:	adrp	x3, 0 <lt__alloc_die_callback>
    1230:	add	x0, x0, #0x0
    1234:	add	x1, x1, #0x0
    1238:	add	x3, x3, #0x0
    123c:	mov	w2, #0x4b4                 	// #1204
    1240:	bl	0 <__assert_fail>
    1244:	adrp	x0, 0 <lt__alloc_die_callback>
    1248:	adrp	x1, 0 <lt__alloc_die_callback>
    124c:	adrp	x3, 0 <lt__alloc_die_callback>
    1250:	add	x0, x0, #0x0
    1254:	add	x1, x1, #0x0
    1258:	add	x3, x3, #0x0
    125c:	mov	w2, #0x4e3                 	// #1251
    1260:	bl	0 <__assert_fail>
    1264:	adrp	x0, 0 <lt__alloc_die_callback>
    1268:	adrp	x1, 0 <lt__alloc_die_callback>
    126c:	adrp	x3, 0 <lt__alloc_die_callback>
    1270:	add	x0, x0, #0x0
    1274:	add	x1, x1, #0x0
    1278:	add	x3, x3, #0x0
    127c:	mov	w2, #0x589                 	// #1417
    1280:	bl	0 <__assert_fail>

0000000000001284 <lt_dlforeachfile>:
    1284:	stp	x29, x30, [sp, #-32]!
    1288:	str	x19, [sp, #16]
    128c:	mov	x29, sp
    1290:	mov	x19, x2
    1294:	str	x1, [x29, #24]
    1298:	cbz	x0, 12b8 <lt_dlforeachfile+0x34>
    129c:	adrp	x2, 0 <lt__alloc_die_callback>
    12a0:	add	x2, x2, #0x0
    12a4:	add	x3, x29, #0x18
    12a8:	mov	x1, xzr
    12ac:	mov	x4, x19
    12b0:	bl	1344 <foreach_dirinpath>
    12b4:	b	132c <lt_dlforeachfile+0xa8>
    12b8:	adrp	x8, 0 <lt__alloc_die_callback>
    12bc:	ldr	x0, [x8]
    12c0:	adrp	x2, 0 <lt__alloc_die_callback>
    12c4:	add	x2, x2, #0x0
    12c8:	add	x3, x29, #0x18
    12cc:	mov	x1, xzr
    12d0:	mov	x4, x19
    12d4:	bl	1344 <foreach_dirinpath>
    12d8:	cbnz	w0, 132c <lt_dlforeachfile+0xa8>
    12dc:	adrp	x0, 0 <lt__alloc_die_callback>
    12e0:	add	x0, x0, #0x0
    12e4:	bl	0 <getenv>
    12e8:	adrp	x2, 0 <lt__alloc_die_callback>
    12ec:	add	x2, x2, #0x0
    12f0:	add	x3, x29, #0x18
    12f4:	mov	x1, xzr
    12f8:	mov	x4, x19
    12fc:	bl	1344 <foreach_dirinpath>
    1300:	cbnz	w0, 132c <lt_dlforeachfile+0xa8>
    1304:	adrp	x0, 0 <lt__alloc_die_callback>
    1308:	add	x0, x0, #0x0
    130c:	bl	0 <getenv>
    1310:	adrp	x2, 0 <lt__alloc_die_callback>
    1314:	add	x2, x2, #0x0
    1318:	add	x3, x29, #0x18
    131c:	mov	x1, xzr
    1320:	mov	x4, x19
    1324:	bl	1344 <foreach_dirinpath>
    1328:	cbz	w0, 1338 <lt_dlforeachfile+0xb4>
    132c:	ldr	x19, [sp, #16]
    1330:	ldp	x29, x30, [sp], #32
    1334:	ret
    1338:	adrp	x0, 0 <lt__alloc_die_callback>
    133c:	add	x0, x0, #0x0
    1340:	b	129c <lt_dlforeachfile+0x18>

0000000000001344 <foreach_dirinpath>:
    1344:	sub	sp, sp, #0x80
    1348:	stp	x24, x23, [sp, #80]
    134c:	stp	x22, x21, [sp, #96]
    1350:	stp	x20, x19, [sp, #112]
    1354:	mov	x19, x4
    1358:	mov	x20, x3
    135c:	mov	x21, x2
    1360:	mov	x22, x1
    1364:	mov	x24, x0
    1368:	stp	x29, x30, [sp, #32]
    136c:	stp	x28, x27, [sp, #48]
    1370:	stp	x26, x25, [sp, #64]
    1374:	add	x29, sp, #0x20
    1378:	cbz	x1, 1394 <foreach_dirinpath+0x50>
    137c:	ldrb	w8, [x22]
    1380:	cbz	w8, 1394 <foreach_dirinpath+0x50>
    1384:	mov	x0, x22
    1388:	bl	0 <strlen>
    138c:	mov	x23, x0
    1390:	b	1398 <foreach_dirinpath+0x54>
    1394:	mov	x23, xzr
    1398:	stur	xzr, [x29, #-8]
    139c:	stp	xzr, xzr, [sp, #8]
    13a0:	cbz	x24, 14ac <foreach_dirinpath+0x168>
    13a4:	ldrb	w8, [x24]
    13a8:	cbz	w8, 14ac <foreach_dirinpath+0x168>
    13ac:	add	x1, sp, #0x8
    13b0:	mov	x0, x24
    13b4:	bl	1dd8 <canonicalize_path>
    13b8:	cbnz	w0, 14b8 <foreach_dirinpath+0x174>
    13bc:	ldr	x0, [sp, #8]
    13c0:	add	x1, sp, #0x10
    13c4:	sub	x2, x29, #0x8
    13c8:	bl	27fc <argzize_path>
    13cc:	cbnz	w0, 14b8 <foreach_dirinpath+0x174>
    13d0:	mov	x25, xzr
    13d4:	mov	x24, xzr
    13d8:	mov	x26, xzr
    13dc:	add	x8, x23, #0x2
    13e0:	str	x8, [sp]
    13e4:	ldr	x0, [sp, #16]
    13e8:	ldur	x1, [x29, #-8]
    13ec:	mov	x2, x25
    13f0:	bl	0 <argz_next>
    13f4:	cbz	x0, 14bc <foreach_dirinpath+0x178>
    13f8:	ldrb	w8, [x0]
    13fc:	mov	x25, x0
    1400:	cbz	w8, 1414 <foreach_dirinpath+0xd0>
    1404:	mov	x0, x25
    1408:	bl	0 <strlen>
    140c:	mov	x27, x0
    1410:	b	1418 <foreach_dirinpath+0xd4>
    1414:	mov	x27, xzr
    1418:	add	x28, x27, #0x1
    141c:	add	x8, x28, x23
    1420:	cmp	x8, x26
    1424:	b.cc	1448 <foreach_dirinpath+0x104>  // b.lo, b.ul, b.last
    1428:	mov	x0, x24
    142c:	bl	0 <free>
    1430:	ldr	x8, [sp]
    1434:	add	x26, x8, x27
    1438:	mov	x0, x26
    143c:	bl	0 <lt__malloc>
    1440:	mov	x24, x0
    1444:	cbz	x0, 14bc <foreach_dirinpath+0x178>
    1448:	cmp	x26, x27
    144c:	b.ls	1504 <foreach_dirinpath+0x1c0>  // b.plast
    1450:	mov	x0, x24
    1454:	mov	x1, x25
    1458:	bl	0 <strcpy>
    145c:	cbz	x22, 1490 <foreach_dirinpath+0x14c>
    1460:	ldrb	w8, [x22]
    1464:	cbz	w8, 1490 <foreach_dirinpath+0x14c>
    1468:	add	x8, x27, x24
    146c:	ldurb	w8, [x8, #-1]
    1470:	cmp	w8, #0x2f
    1474:	b.eq	1484 <foreach_dirinpath+0x140>  // b.none
    1478:	mov	w8, #0x2f                  	// #47
    147c:	strb	w8, [x24, x27]
    1480:	mov	x27, x28
    1484:	add	x0, x24, x27
    1488:	mov	x1, x22
    148c:	bl	0 <strcpy>
    1490:	mov	x0, x24
    1494:	mov	x1, x20
    1498:	mov	x2, x19
    149c:	blr	x21
    14a0:	mov	w27, w0
    14a4:	cbz	w0, 13e4 <foreach_dirinpath+0xa0>
    14a8:	b	14c0 <foreach_dirinpath+0x17c>
    14ac:	mov	w0, #0x5                   	// #5
    14b0:	bl	0 <lt__error_string>
    14b4:	bl	0 <lt__set_last_error>
    14b8:	mov	x24, xzr
    14bc:	mov	w27, wzr
    14c0:	ldr	x0, [sp, #16]
    14c4:	bl	0 <free>
    14c8:	ldr	x0, [sp, #8]
    14cc:	str	xzr, [sp, #16]
    14d0:	bl	0 <free>
    14d4:	mov	x0, x24
    14d8:	str	xzr, [sp, #8]
    14dc:	bl	0 <free>
    14e0:	mov	w0, w27
    14e4:	ldp	x20, x19, [sp, #112]
    14e8:	ldp	x22, x21, [sp, #96]
    14ec:	ldp	x24, x23, [sp, #80]
    14f0:	ldp	x26, x25, [sp, #64]
    14f4:	ldp	x28, x27, [sp, #48]
    14f8:	ldp	x29, x30, [sp, #32]
    14fc:	add	sp, sp, #0x80
    1500:	ret
    1504:	adrp	x0, 0 <lt__alloc_die_callback>
    1508:	adrp	x1, 0 <lt__alloc_die_callback>
    150c:	adrp	x3, 0 <lt__alloc_die_callback>
    1510:	add	x0, x0, #0x0
    1514:	add	x1, x1, #0x0
    1518:	add	x3, x3, #0x0
    151c:	mov	w2, #0x2cd                 	// #717
    1520:	bl	0 <__assert_fail>

0000000000001524 <foreachfile_callback>:
    1524:	sub	sp, sp, #0x80
    1528:	stp	x29, x30, [sp, #32]
    152c:	stp	x28, x27, [sp, #48]
    1530:	stp	x26, x25, [sp, #64]
    1534:	stp	x24, x23, [sp, #80]
    1538:	stp	x22, x21, [sp, #96]
    153c:	stp	x20, x19, [sp, #112]
    1540:	ldr	x24, [x1]
    1544:	add	x29, sp, #0x20
    1548:	stur	xzr, [x29, #-8]
    154c:	str	xzr, [sp, #16]
    1550:	cbz	x0, 17e4 <foreachfile_callback+0x2c0>
    1554:	ldrb	w8, [x0]
    1558:	mov	x20, x0
    155c:	cbz	w8, 17e4 <foreachfile_callback+0x2c0>
    1560:	mov	x0, x20
    1564:	mov	x19, x2
    1568:	bl	0 <strlen>
    156c:	add	x8, x0, x20
    1570:	ldurb	w8, [x8, #-1]
    1574:	cmp	w8, #0x2f
    1578:	b.eq	1804 <foreachfile_callback+0x2e0>  // b.none
    157c:	mov	x0, x20
    1580:	bl	0 <opendir>
    1584:	cbz	x0, 1718 <foreachfile_callback+0x1f4>
    1588:	mov	x21, x0
    158c:	bl	0 <readdir>
    1590:	cbz	x0, 1720 <foreachfile_callback+0x1fc>
    1594:	mov	x27, #0x1                   	// #1
    1598:	movk	x27, #0x4000, lsl #32
    159c:	mov	x23, x0
    15a0:	mov	w26, #0x1                   	// #1
    15a4:	movk	x27, #0x3ff, lsl #48
    15a8:	mov	w28, #0x3                   	// #3
    15ac:	str	x24, [sp, #8]
    15b0:	mov	x22, x23
    15b4:	ldrb	w8, [x22, #19]!
    15b8:	cmp	w8, #0x2e
    15bc:	b.eq	1700 <foreachfile_callback+0x1dc>  // b.none
    15c0:	ldrb	w8, [x20]
    15c4:	cbz	w8, 15d8 <foreachfile_callback+0xb4>
    15c8:	mov	x0, x20
    15cc:	bl	0 <strlen>
    15d0:	add	x25, x0, #0x1
    15d4:	b	15dc <foreachfile_callback+0xb8>
    15d8:	mov	w25, #0x1                   	// #1
    15dc:	mov	x0, x22
    15e0:	bl	0 <strlen>
    15e4:	add	x8, x23, x0
    15e8:	add	x8, x8, #0x13
    15ec:	mov	x10, x8
    15f0:	mov	x9, x10
    15f4:	sub	x10, x10, #0x1
    15f8:	cmp	x10, x22
    15fc:	b.ls	1618 <foreachfile_callback+0xf4>  // b.plast
    1600:	ldrb	w11, [x10]
    1604:	cmp	x11, #0x3f
    1608:	b.hi	1618 <foreachfile_callback+0xf4>  // b.pmore
    160c:	lsl	x11, x26, x11
    1610:	and	x11, x11, x27
    1614:	cbnz	x11, 15f0 <foreachfile_callback+0xcc>
    1618:	ldrb	w10, [x9]
    161c:	cmp	w10, #0x2e
    1620:	csel	x8, x9, x8, eq  // eq = none
    1624:	sub	x9, x8, #0x1
    1628:	cmp	x9, x22
    162c:	b.ls	1640 <foreachfile_callback+0x11c>  // b.plast
    1630:	ldrb	w10, [x9], #-1
    1634:	cmp	w10, #0x2e
    1638:	b.ne	1628 <foreachfile_callback+0x104>  // b.any
    163c:	add	x8, x9, #0x1
    1640:	sub	x24, x8, x22
    1644:	add	x25, x24, x25
    1648:	add	x0, x25, #0x1
    164c:	bl	0 <lt__malloc>
    1650:	cbz	x0, 1730 <foreachfile_callback+0x20c>
    1654:	mov	x1, x20
    1658:	mov	x23, x0
    165c:	bl	0 <strcpy>
    1660:	bl	0 <strlen>
    1664:	mov	w8, #0x2f                  	// #47
    1668:	strh	w8, [x23, x0]
    166c:	mov	x0, x23
    1670:	mov	x1, x22
    1674:	mov	x2, x24
    1678:	bl	0 <strncat>
    167c:	strb	wzr, [x23, x25]
    1680:	ldrb	w8, [x23]
    1684:	cbz	w8, 17c4 <foreachfile_callback+0x2a0>
    1688:	ldur	x0, [x29, #-8]
    168c:	cbz	x0, 16d0 <foreachfile_callback+0x1ac>
    1690:	ldr	x1, [sp, #16]
    1694:	mov	x2, xzr
    1698:	bl	0 <argz_next>
    169c:	mov	x22, x0
    16a0:	cbz	x0, 16e0 <foreachfile_callback+0x1bc>
    16a4:	mov	x0, x23
    16a8:	mov	x1, x22
    16ac:	bl	0 <strcmp>
    16b0:	cmp	w0, #0x0
    16b4:	cset	w8, eq  // eq = none
    16b8:	csel	w8, w28, w8, lt  // lt = tstop
    16bc:	cbnz	w8, 16d8 <foreachfile_callback+0x1b4>
    16c0:	ldur	x0, [x29, #-8]
    16c4:	ldr	x1, [sp, #16]
    16c8:	mov	x2, x22
    16cc:	b	1698 <foreachfile_callback+0x174>
    16d0:	mov	x22, xzr
    16d4:	b	16e0 <foreachfile_callback+0x1bc>
    16d8:	cmp	w8, #0x3
    16dc:	b.ne	16f8 <foreachfile_callback+0x1d4>  // b.any
    16e0:	sub	x0, x29, #0x8
    16e4:	add	x1, sp, #0x10
    16e8:	mov	x2, x22
    16ec:	mov	x3, x23
    16f0:	bl	28ac <lt_argz_insert>
    16f4:	cbnz	w0, 1728 <foreachfile_callback+0x204>
    16f8:	mov	x0, x23
    16fc:	bl	0 <free>
    1700:	mov	x0, x21
    1704:	bl	0 <readdir>
    1708:	mov	x23, x0
    170c:	cbnz	x0, 15b0 <foreachfile_callback+0x8c>
    1710:	mov	w22, #0x1                   	// #1
    1714:	b	1734 <foreachfile_callback+0x210>
    1718:	mov	w20, wzr
    171c:	b	179c <foreachfile_callback+0x278>
    1720:	mov	w22, #0x1                   	// #1
    1724:	b	1738 <foreachfile_callback+0x214>
    1728:	mov	x0, x23
    172c:	bl	0 <free>
    1730:	mov	w22, wzr
    1734:	ldr	x24, [sp, #8]
    1738:	mov	x0, x21
    173c:	bl	0 <closedir>
    1740:	ldur	x0, [x29, #-8]
    1744:	mov	w20, wzr
    1748:	cbz	w22, 179c <foreachfile_callback+0x278>
    174c:	cbz	x0, 179c <foreachfile_callback+0x278>
    1750:	ldr	x1, [sp, #16]
    1754:	mov	x2, xzr
    1758:	bl	0 <argz_next>
    175c:	cbz	x0, 178c <foreachfile_callback+0x268>
    1760:	mov	x21, x0
    1764:	mov	x0, x21
    1768:	mov	x1, x19
    176c:	blr	x24
    1770:	cbnz	w0, 1794 <foreachfile_callback+0x270>
    1774:	ldur	x0, [x29, #-8]
    1778:	ldr	x1, [sp, #16]
    177c:	mov	x2, x21
    1780:	bl	0 <argz_next>
    1784:	mov	x21, x0
    1788:	cbnz	x0, 1764 <foreachfile_callback+0x240>
    178c:	mov	w20, wzr
    1790:	b	1798 <foreachfile_callback+0x274>
    1794:	mov	w20, w0
    1798:	ldur	x0, [x29, #-8]
    179c:	bl	0 <free>
    17a0:	mov	w0, w20
    17a4:	ldp	x20, x19, [sp, #112]
    17a8:	ldp	x22, x21, [sp, #96]
    17ac:	ldp	x24, x23, [sp, #80]
    17b0:	ldp	x26, x25, [sp, #64]
    17b4:	ldp	x28, x27, [sp, #48]
    17b8:	ldp	x29, x30, [sp, #32]
    17bc:	add	sp, sp, #0x80
    17c0:	ret
    17c4:	adrp	x0, 0 <lt__alloc_die_callback>
    17c8:	adrp	x1, 0 <lt__alloc_die_callback>
    17cc:	adrp	x3, 0 <lt__alloc_die_callback>
    17d0:	add	x0, x0, #0x0
    17d4:	add	x1, x1, #0x0
    17d8:	add	x3, x3, #0x0
    17dc:	mov	w2, #0x6dd                 	// #1757
    17e0:	bl	0 <__assert_fail>
    17e4:	adrp	x0, 0 <lt__alloc_die_callback>
    17e8:	adrp	x1, 0 <lt__alloc_die_callback>
    17ec:	adrp	x3, 0 <lt__alloc_die_callback>
    17f0:	add	x0, x0, #0x0
    17f4:	add	x1, x1, #0x0
    17f8:	add	x3, x3, #0x0
    17fc:	mov	w2, #0x730                 	// #1840
    1800:	bl	0 <__assert_fail>
    1804:	adrp	x0, 0 <lt__alloc_die_callback>
    1808:	adrp	x1, 0 <lt__alloc_die_callback>
    180c:	adrp	x3, 0 <lt__alloc_die_callback>
    1810:	add	x0, x0, #0x0
    1814:	add	x1, x1, #0x0
    1818:	add	x3, x3, #0x0
    181c:	mov	w2, #0x733                 	// #1843
    1820:	bl	0 <__assert_fail>

0000000000001824 <unload_deplibs>:
    1824:	stp	x29, x30, [sp, #-48]!
    1828:	stp	x20, x19, [sp, #32]
    182c:	ldr	w9, [x0, #40]
    1830:	str	x21, [sp, #16]
    1834:	mov	x29, sp
    1838:	cbz	w9, 1880 <unload_deplibs+0x5c>
    183c:	ldr	x8, [x0, #48]
    1840:	mov	x19, x0
    1844:	cmp	w9, #0x1
    1848:	b.lt	1888 <unload_deplibs+0x64>  // b.tstop
    184c:	mov	x21, xzr
    1850:	mov	w20, wzr
    1854:	ldr	x0, [x8, x21, lsl #3]
    1858:	ldrb	w10, [x0, #36]
    185c:	tbnz	w10, #0, 1870 <unload_deplibs+0x4c>
    1860:	bl	314 <lt_dlclose>
    1864:	ldr	w9, [x19, #40]
    1868:	ldr	x8, [x19, #48]
    186c:	add	w20, w0, w20
    1870:	add	x21, x21, #0x1
    1874:	cmp	x21, w9, sxtw
    1878:	b.lt	1854 <unload_deplibs+0x30>  // b.tstop
    187c:	b	188c <unload_deplibs+0x68>
    1880:	mov	w20, wzr
    1884:	b	1898 <unload_deplibs+0x74>
    1888:	mov	w20, wzr
    188c:	mov	x0, x8
    1890:	bl	0 <free>
    1894:	str	xzr, [x19, #48]
    1898:	mov	w0, w20
    189c:	ldp	x20, x19, [sp, #32]
    18a0:	ldr	x21, [sp, #16]
    18a4:	ldp	x29, x30, [sp], #48
    18a8:	ret

00000000000018ac <lt_dlsym>:
    18ac:	sub	sp, sp, #0xc0
    18b0:	stp	x29, x30, [sp, #128]
    18b4:	stp	x24, x23, [sp, #144]
    18b8:	stp	x22, x21, [sp, #160]
    18bc:	stp	x20, x19, [sp, #176]
    18c0:	add	x29, sp, #0x80
    18c4:	cbz	x0, 18ec <lt_dlsym+0x40>
    18c8:	mov	x20, x1
    18cc:	cbz	x1, 18f4 <lt_dlsym+0x48>
    18d0:	ldrb	w8, [x20]
    18d4:	mov	x19, x0
    18d8:	cbz	w8, 18fc <lt_dlsym+0x50>
    18dc:	mov	x0, x20
    18e0:	bl	0 <strlen>
    18e4:	mov	x21, x0
    18e8:	b	1900 <lt_dlsym+0x54>
    18ec:	mov	w0, #0xc                   	// #12
    18f0:	b	19a8 <lt_dlsym+0xfc>
    18f4:	mov	w0, #0xa                   	// #10
    18f8:	b	19a8 <lt_dlsym+0xfc>
    18fc:	mov	x21, xzr
    1900:	ldr	x24, [x19, #8]
    1904:	ldr	x0, [x24, #8]
    1908:	cbz	x0, 1920 <lt_dlsym+0x74>
    190c:	ldrb	w8, [x0]
    1910:	cbz	w8, 191c <lt_dlsym+0x70>
    1914:	bl	0 <strlen>
    1918:	b	1920 <lt_dlsym+0x74>
    191c:	mov	x0, xzr
    1920:	ldr	x23, [x19, #24]
    1924:	add	x21, x0, x21
    1928:	cbz	x23, 1940 <lt_dlsym+0x94>
    192c:	ldrb	w8, [x23]
    1930:	cbz	w8, 1940 <lt_dlsym+0x94>
    1934:	mov	x0, x23
    1938:	bl	0 <strlen>
    193c:	b	1944 <lt_dlsym+0x98>
    1940:	mov	x0, xzr
    1944:	add	x8, x21, x0
    1948:	add	x9, x8, #0x5
    194c:	cmp	x9, #0x80
    1950:	b.cs	195c <lt_dlsym+0xb0>  // b.hs, b.nlast
    1954:	mov	x21, sp
    1958:	b	1974 <lt_dlsym+0xc8>
    195c:	add	x0, x8, #0x6
    1960:	bl	0 <lt__malloc>
    1964:	cbz	x0, 19a4 <lt_dlsym+0xf8>
    1968:	ldr	x24, [x19, #8]
    196c:	ldr	x23, [x19, #24]
    1970:	mov	x21, x0
    1974:	ldr	x22, [x24, #56]
    1978:	cbz	x23, 1a2c <lt_dlsym+0x180>
    197c:	bl	0 <lt__get_last_error>
    1980:	ldr	x8, [x19, #8]
    1984:	mov	x23, x0
    1988:	ldr	x1, [x8, #8]
    198c:	cbz	x1, 19b8 <lt_dlsym+0x10c>
    1990:	mov	x0, x21
    1994:	bl	0 <strcpy>
    1998:	ldr	x1, [x19, #24]
    199c:	bl	0 <strcat>
    19a0:	b	19c4 <lt_dlsym+0x118>
    19a4:	mov	w0, #0xd                   	// #13
    19a8:	bl	0 <lt__error_string>
    19ac:	bl	0 <lt__set_last_error>
    19b0:	mov	x24, xzr
    19b4:	b	1a84 <lt_dlsym+0x1d8>
    19b8:	ldr	x1, [x19, #24]
    19bc:	mov	x0, x21
    19c0:	bl	0 <strcpy>
    19c4:	mov	x0, x21
    19c8:	bl	0 <strlen>
    19cc:	mov	w9, #0x4c5f                	// #19551
    19d0:	add	x8, x21, x0
    19d4:	movk	w9, #0x5854, lsl #16
    19d8:	mov	w10, #0x5f                  	// #95
    19dc:	mov	x0, x21
    19e0:	mov	x1, x20
    19e4:	str	w9, [x8]
    19e8:	strh	w10, [x8, #4]
    19ec:	bl	0 <strcat>
    19f0:	ldr	x8, [x19, #8]
    19f4:	ldr	x1, [x19, #56]
    19f8:	mov	x0, x22
    19fc:	mov	x2, x21
    1a00:	ldr	x8, [x8, #32]
    1a04:	blr	x8
    1a08:	cbz	x0, 1a20 <lt_dlsym+0x174>
    1a0c:	mov	x8, sp
    1a10:	mov	x24, x0
    1a14:	cmp	x21, x8
    1a18:	b.ne	1a7c <lt_dlsym+0x1d0>  // b.any
    1a1c:	b	1a84 <lt_dlsym+0x1d8>
    1a20:	mov	x0, x23
    1a24:	bl	0 <lt__set_last_error>
    1a28:	ldr	x24, [x19, #8]
    1a2c:	ldr	x1, [x24, #8]
    1a30:	cbz	x1, 1a48 <lt_dlsym+0x19c>
    1a34:	mov	x0, x21
    1a38:	bl	0 <strcpy>
    1a3c:	mov	x1, x20
    1a40:	bl	0 <strcat>
    1a44:	b	1a54 <lt_dlsym+0x1a8>
    1a48:	mov	x0, x21
    1a4c:	mov	x1, x20
    1a50:	bl	0 <strcpy>
    1a54:	ldr	x8, [x19, #8]
    1a58:	ldr	x1, [x19, #56]
    1a5c:	mov	x0, x22
    1a60:	mov	x2, x21
    1a64:	ldr	x8, [x8, #32]
    1a68:	blr	x8
    1a6c:	mov	x8, sp
    1a70:	cmp	x21, x8
    1a74:	mov	x24, x0
    1a78:	b.eq	1a84 <lt_dlsym+0x1d8>  // b.none
    1a7c:	mov	x0, x21
    1a80:	bl	0 <free>
    1a84:	mov	x0, x24
    1a88:	ldp	x20, x19, [sp, #176]
    1a8c:	ldp	x22, x21, [sp, #160]
    1a90:	ldp	x24, x23, [sp, #144]
    1a94:	ldp	x29, x30, [sp, #128]
    1a98:	add	sp, sp, #0xc0
    1a9c:	ret

0000000000001aa0 <lt_dlerror>:
    1aa0:	stp	x29, x30, [sp, #-32]!
    1aa4:	str	x19, [sp, #16]
    1aa8:	mov	x29, sp
    1aac:	bl	0 <lt__get_last_error>
    1ab0:	mov	x19, x0
    1ab4:	mov	x0, xzr
    1ab8:	bl	0 <lt__set_last_error>
    1abc:	mov	x0, x19
    1ac0:	ldr	x19, [sp, #16]
    1ac4:	ldp	x29, x30, [sp], #32
    1ac8:	ret

0000000000001acc <lt_dladdsearchdir>:
    1acc:	stp	x29, x30, [sp, #-16]!
    1ad0:	mov	x29, sp
    1ad4:	cbz	x0, 1af8 <lt_dladdsearchdir+0x2c>
    1ad8:	ldrb	w8, [x0]
    1adc:	mov	x1, x0
    1ae0:	cbz	w8, 1af8 <lt_dladdsearchdir+0x2c>
    1ae4:	mov	x0, xzr
    1ae8:	bl	1b04 <lt_dlpath_insertdir>
    1aec:	cmp	w0, #0x0
    1af0:	cset	w0, ne  // ne = any
    1af4:	b	1afc <lt_dladdsearchdir+0x30>
    1af8:	mov	w0, wzr
    1afc:	ldp	x29, x30, [sp], #16
    1b00:	ret

0000000000001b04 <lt_dlpath_insertdir>:
    1b04:	sub	sp, sp, #0x40
    1b08:	stp	x29, x30, [sp, #16]
    1b0c:	add	x29, sp, #0x10
    1b10:	str	x21, [sp, #32]
    1b14:	stp	x20, x19, [sp, #48]
    1b18:	str	xzr, [x29, #24]
    1b1c:	stp	xzr, xzr, [sp]
    1b20:	cbz	x1, 1c3c <lt_dlpath_insertdir+0x138>
    1b24:	ldrb	w8, [x1]
    1b28:	mov	x19, x1
    1b2c:	cbz	w8, 1c3c <lt_dlpath_insertdir+0x138>
    1b30:	mov	x20, x0
    1b34:	add	x1, x29, #0x18
    1b38:	mov	x0, x19
    1b3c:	bl	1dd8 <canonicalize_path>
    1b40:	cbz	w0, 1b74 <lt_dlpath_insertdir+0x70>
    1b44:	mov	w19, #0x1                   	// #1
    1b48:	ldr	x0, [sp, #8]
    1b4c:	bl	0 <free>
    1b50:	ldr	x0, [x29, #24]
    1b54:	str	xzr, [sp, #8]
    1b58:	bl	0 <free>
    1b5c:	mov	w0, w19
    1b60:	ldp	x20, x19, [sp, #48]
    1b64:	ldr	x21, [sp, #32]
    1b68:	ldp	x29, x30, [sp, #16]
    1b6c:	add	sp, sp, #0x40
    1b70:	ret
    1b74:	ldr	x8, [x29, #24]
    1b78:	cbz	x8, 1c5c <lt_dlpath_insertdir+0x158>
    1b7c:	ldrb	w8, [x8]
    1b80:	cbz	w8, 1c5c <lt_dlpath_insertdir+0x158>
    1b84:	adrp	x21, 0 <lt__alloc_die_callback>
    1b88:	ldr	x0, [x21]
    1b8c:	cbz	x0, 1bcc <lt_dlpath_insertdir+0xc8>
    1b90:	add	x1, sp, #0x8
    1b94:	mov	x2, sp
    1b98:	bl	27fc <argzize_path>
    1b9c:	cbnz	w0, 1b44 <lt_dlpath_insertdir+0x40>
    1ba0:	cbz	x20, 1be8 <lt_dlpath_insertdir+0xe4>
    1ba4:	ldr	x0, [x21]
    1ba8:	cmp	x0, x20
    1bac:	b.hi	1c9c <lt_dlpath_insertdir+0x198>  // b.pmore
    1bb0:	sub	x20, x20, x0
    1bb4:	bl	0 <strlen>
    1bb8:	cmp	w20, w0
    1bbc:	b.gt	1cbc <lt_dlpath_insertdir+0x1b8>
    1bc0:	ldr	x8, [sp, #8]
    1bc4:	add	x2, x8, x20
    1bc8:	b	1bec <lt_dlpath_insertdir+0xe8>
    1bcc:	cbnz	x20, 1c7c <lt_dlpath_insertdir+0x178>
    1bd0:	mov	x0, x19
    1bd4:	bl	0 <lt__strdup>
    1bd8:	cmp	x0, #0x0
    1bdc:	str	x0, [x21]
    1be0:	cset	w19, eq  // eq = none
    1be4:	b	1b48 <lt_dlpath_insertdir+0x44>
    1be8:	mov	x2, xzr
    1bec:	add	x0, sp, #0x8
    1bf0:	mov	x1, sp
    1bf4:	mov	x3, x19
    1bf8:	bl	28ac <lt_argz_insert>
    1bfc:	cbnz	w0, 1b44 <lt_dlpath_insertdir+0x40>
    1c00:	ldp	x1, x0, [sp]
    1c04:	mov	w2, #0x3a                  	// #58
    1c08:	bl	0 <argz_stringify>
    1c0c:	ldr	x0, [x21]
    1c10:	ldr	x8, [sp, #8]
    1c14:	cmp	x0, x8
    1c18:	b.eq	1c34 <lt_dlpath_insertdir+0x130>  // b.none
    1c1c:	bl	0 <free>
    1c20:	ldr	x8, [sp, #8]
    1c24:	mov	w19, wzr
    1c28:	str	xzr, [sp, #8]
    1c2c:	str	x8, [x21]
    1c30:	b	1b48 <lt_dlpath_insertdir+0x44>
    1c34:	mov	w19, wzr
    1c38:	b	1b48 <lt_dlpath_insertdir+0x44>
    1c3c:	adrp	x0, 0 <lt__alloc_die_callback>
    1c40:	adrp	x1, 0 <lt__alloc_die_callback>
    1c44:	adrp	x3, 0 <lt__alloc_die_callback>
    1c48:	add	x0, x0, #0x0
    1c4c:	add	x1, x1, #0x0
    1c50:	add	x3, x3, #0x0
    1c54:	mov	w2, #0x84f                 	// #2127
    1c58:	bl	0 <__assert_fail>
    1c5c:	adrp	x0, 0 <lt__alloc_die_callback>
    1c60:	adrp	x1, 0 <lt__alloc_die_callback>
    1c64:	adrp	x3, 0 <lt__alloc_die_callback>
    1c68:	add	x0, x0, #0x0
    1c6c:	add	x1, x1, #0x0
    1c70:	add	x3, x3, #0x0
    1c74:	mov	w2, #0x857                 	// #2135
    1c78:	bl	0 <__assert_fail>
    1c7c:	adrp	x0, 0 <lt__alloc_die_callback>
    1c80:	adrp	x1, 0 <lt__alloc_die_callback>
    1c84:	adrp	x3, 0 <lt__alloc_die_callback>
    1c88:	add	x0, x0, #0x0
    1c8c:	add	x1, x1, #0x0
    1c90:	add	x3, x3, #0x0
    1c94:	mov	w2, #0x85c                 	// #2140
    1c98:	bl	0 <__assert_fail>
    1c9c:	adrp	x0, 0 <lt__alloc_die_callback>
    1ca0:	adrp	x1, 0 <lt__alloc_die_callback>
    1ca4:	adrp	x3, 0 <lt__alloc_die_callback>
    1ca8:	add	x0, x0, #0x0
    1cac:	add	x1, x1, #0x0
    1cb0:	add	x3, x3, #0x0
    1cb4:	mov	w2, #0x875                 	// #2165
    1cb8:	bl	0 <__assert_fail>
    1cbc:	adrp	x0, 0 <lt__alloc_die_callback>
    1cc0:	adrp	x1, 0 <lt__alloc_die_callback>
    1cc4:	adrp	x3, 0 <lt__alloc_die_callback>
    1cc8:	add	x0, x0, #0x0
    1ccc:	add	x1, x1, #0x0
    1cd0:	add	x3, x3, #0x0
    1cd4:	mov	w2, #0x876                 	// #2166
    1cd8:	bl	0 <__assert_fail>

0000000000001cdc <lt_dlinsertsearchdir>:
    1cdc:	stp	x29, x30, [sp, #-48]!
    1ce0:	stp	x20, x19, [sp, #32]
    1ce4:	mov	x19, x1
    1ce8:	mov	x20, x0
    1cec:	str	x21, [sp, #16]
    1cf0:	mov	x29, sp
    1cf4:	cbz	x0, 1d30 <lt_dlinsertsearchdir+0x54>
    1cf8:	adrp	x8, 0 <lt__alloc_die_callback>
    1cfc:	ldr	x21, [x8]
    1d00:	cmp	x21, x20
    1d04:	b.hi	1d54 <lt_dlinsertsearchdir+0x78>  // b.pmore
    1d08:	cbz	x21, 1d20 <lt_dlinsertsearchdir+0x44>
    1d0c:	ldrb	w8, [x21]
    1d10:	cbz	w8, 1d20 <lt_dlinsertsearchdir+0x44>
    1d14:	mov	x0, x21
    1d18:	bl	0 <strlen>
    1d1c:	b	1d24 <lt_dlinsertsearchdir+0x48>
    1d20:	mov	x0, xzr
    1d24:	add	x8, x21, x0
    1d28:	cmp	x8, x20
    1d2c:	b.ls	1d54 <lt_dlinsertsearchdir+0x78>  // b.plast
    1d30:	cbz	x19, 1d68 <lt_dlinsertsearchdir+0x8c>
    1d34:	ldrb	w8, [x19]
    1d38:	cbz	w8, 1d68 <lt_dlinsertsearchdir+0x8c>
    1d3c:	mov	x0, x20
    1d40:	mov	x1, x19
    1d44:	bl	1b04 <lt_dlpath_insertdir>
    1d48:	cmp	w0, #0x0
    1d4c:	cset	w0, ne  // ne = any
    1d50:	b	1d6c <lt_dlinsertsearchdir+0x90>
    1d54:	mov	w0, #0x12                  	// #18
    1d58:	bl	0 <lt__error_string>
    1d5c:	bl	0 <lt__set_last_error>
    1d60:	mov	w0, #0x1                   	// #1
    1d64:	b	1d6c <lt_dlinsertsearchdir+0x90>
    1d68:	mov	w0, wzr
    1d6c:	ldp	x20, x19, [sp, #32]
    1d70:	ldr	x21, [sp, #16]
    1d74:	ldp	x29, x30, [sp], #48
    1d78:	ret

0000000000001d7c <lt_dlsetsearchpath>:
    1d7c:	stp	x29, x30, [sp, #-32]!
    1d80:	stp	x20, x19, [sp, #16]
    1d84:	adrp	x20, 0 <lt__alloc_die_callback>
    1d88:	ldr	x8, [x20]
    1d8c:	mov	x19, x0
    1d90:	mov	x29, sp
    1d94:	mov	x0, x8
    1d98:	bl	0 <free>
    1d9c:	str	xzr, [x20]
    1da0:	cbz	x19, 1dc8 <lt_dlsetsearchpath+0x4c>
    1da4:	ldrb	w8, [x19]
    1da8:	cbz	w8, 1dc8 <lt_dlsetsearchpath+0x4c>
    1dac:	adrp	x1, 0 <lt__alloc_die_callback>
    1db0:	add	x1, x1, #0x0
    1db4:	mov	x0, x19
    1db8:	bl	1dd8 <canonicalize_path>
    1dbc:	cmp	w0, #0x0
    1dc0:	cset	w0, ne  // ne = any
    1dc4:	b	1dcc <lt_dlsetsearchpath+0x50>
    1dc8:	mov	w0, wzr
    1dcc:	ldp	x20, x19, [sp, #16]
    1dd0:	ldp	x29, x30, [sp], #32
    1dd4:	ret

0000000000001dd8 <canonicalize_path>:
    1dd8:	stp	x29, x30, [sp, #-32]!
    1ddc:	stp	x20, x19, [sp, #16]
    1de0:	mov	x29, sp
    1de4:	cbz	x0, 1eb8 <canonicalize_path+0xe0>
    1de8:	ldrb	w8, [x0]
    1dec:	mov	x20, x0
    1df0:	cbz	w8, 1eb8 <canonicalize_path+0xe0>
    1df4:	mov	x19, x1
    1df8:	cbz	x1, 1ed8 <canonicalize_path+0x100>
    1dfc:	mov	x0, x20
    1e00:	bl	0 <strlen>
    1e04:	add	x0, x0, #0x1
    1e08:	bl	0 <lt__malloc>
    1e0c:	cbz	x0, 1ea4 <canonicalize_path+0xcc>
    1e10:	mov	x12, #0xffff800000000001    	// #-140737488355327
    1e14:	mov	x9, xzr
    1e18:	add	x8, x20, #0x1
    1e1c:	mov	w10, #0x2f                  	// #47
    1e20:	mov	w11, #0x1                   	// #1
    1e24:	movk	x12, #0x400, lsl #48
    1e28:	ldurb	w13, [x8, #-1]
    1e2c:	cmp	w13, #0x2f
    1e30:	b.eq	1e68 <canonicalize_path+0x90>  // b.none
    1e34:	cmp	w13, #0x3a
    1e38:	b.eq	1e50 <canonicalize_path+0x78>  // b.none
    1e3c:	cbz	w13, 1e94 <canonicalize_path+0xbc>
    1e40:	add	x14, x9, #0x1
    1e44:	strb	w13, [x0, x9]
    1e48:	mov	x9, x14
    1e4c:	b	1e8c <canonicalize_path+0xb4>
    1e50:	cbz	x9, 1e8c <canonicalize_path+0xb4>
    1e54:	ldrb	w14, [x8]
    1e58:	cbz	w14, 1e8c <canonicalize_path+0xb4>
    1e5c:	cmp	w14, #0x3a
    1e60:	b.eq	1e8c <canonicalize_path+0xb4>  // b.none
    1e64:	b	1e40 <canonicalize_path+0x68>
    1e68:	ldrb	w13, [x8]
    1e6c:	cmp	w13, #0x3a
    1e70:	b.hi	1e80 <canonicalize_path+0xa8>  // b.pmore
    1e74:	lsl	x13, x11, x13
    1e78:	tst	x13, x12
    1e7c:	b.ne	1e8c <canonicalize_path+0xb4>  // b.any
    1e80:	add	x13, x9, #0x1
    1e84:	strb	w10, [x0, x9]
    1e88:	mov	x9, x13
    1e8c:	add	x8, x8, #0x1
    1e90:	b	1e28 <canonicalize_path+0x50>
    1e94:	mov	w8, wzr
    1e98:	strb	wzr, [x0, x9]
    1e9c:	str	x0, [x19]
    1ea0:	b	1ea8 <canonicalize_path+0xd0>
    1ea4:	mov	w8, #0x1                   	// #1
    1ea8:	ldp	x20, x19, [sp, #16]
    1eac:	mov	w0, w8
    1eb0:	ldp	x29, x30, [sp], #32
    1eb4:	ret
    1eb8:	adrp	x0, 0 <lt__alloc_die_callback>
    1ebc:	adrp	x1, 0 <lt__alloc_die_callback>
    1ec0:	adrp	x3, 0 <lt__alloc_die_callback>
    1ec4:	add	x0, x0, #0x0
    1ec8:	add	x1, x1, #0x0
    1ecc:	add	x3, x3, #0x0
    1ed0:	mov	w2, #0x24f                 	// #591
    1ed4:	bl	0 <__assert_fail>
    1ed8:	adrp	x0, 0 <lt__alloc_die_callback>
    1edc:	adrp	x1, 0 <lt__alloc_die_callback>
    1ee0:	adrp	x3, 0 <lt__alloc_die_callback>
    1ee4:	add	x0, x0, #0x0
    1ee8:	add	x1, x1, #0x0
    1eec:	add	x3, x3, #0x0
    1ef0:	mov	w2, #0x250                 	// #592
    1ef4:	bl	0 <__assert_fail>

0000000000001ef8 <lt_dlgetsearchpath>:
    1ef8:	adrp	x8, 0 <lt__alloc_die_callback>
    1efc:	ldr	x0, [x8]
    1f00:	ret

0000000000001f04 <lt_dlmakeresident>:
    1f04:	stp	x29, x30, [sp, #-16]!
    1f08:	mov	x29, sp
    1f0c:	cbz	x0, 1f28 <lt_dlmakeresident+0x24>
    1f10:	mov	x8, x0
    1f14:	ldrb	w9, [x8, #36]
    1f18:	mov	w0, wzr
    1f1c:	orr	w9, w9, #0x1
    1f20:	strb	w9, [x8, #36]
    1f24:	b	1f38 <lt_dlmakeresident+0x34>
    1f28:	mov	w0, #0xc                   	// #12
    1f2c:	bl	0 <lt__error_string>
    1f30:	bl	0 <lt__set_last_error>
    1f34:	mov	w0, #0x1                   	// #1
    1f38:	ldp	x29, x30, [sp], #16
    1f3c:	ret

0000000000001f40 <lt_dlisresident>:
    1f40:	stp	x29, x30, [sp, #-16]!
    1f44:	mov	x29, sp
    1f48:	cbz	x0, 1f58 <lt_dlisresident+0x18>
    1f4c:	ldrb	w8, [x0, #36]
    1f50:	and	w0, w8, #0x1
    1f54:	b	1f68 <lt_dlisresident+0x28>
    1f58:	mov	w0, #0xc                   	// #12
    1f5c:	bl	0 <lt__error_string>
    1f60:	bl	0 <lt__set_last_error>
    1f64:	mov	w0, #0xffffffff            	// #-1
    1f68:	ldp	x29, x30, [sp], #16
    1f6c:	ret

0000000000001f70 <lt_dlinterface_register>:
    1f70:	stp	x29, x30, [sp, #-48]!
    1f74:	str	x21, [sp, #16]
    1f78:	mov	x21, x0
    1f7c:	mov	w0, #0x10                  	// #16
    1f80:	stp	x20, x19, [sp, #32]
    1f84:	mov	x29, sp
    1f88:	mov	x20, x1
    1f8c:	bl	0 <lt__malloc>
    1f90:	mov	x19, x0
    1f94:	cbz	x0, 1fbc <lt_dlinterface_register+0x4c>
    1f98:	mov	x0, x21
    1f9c:	bl	0 <lt__strdup>
    1fa0:	str	x0, [x19]
    1fa4:	cbz	x0, 1fb0 <lt_dlinterface_register+0x40>
    1fa8:	str	x20, [x19, #8]
    1fac:	b	1fbc <lt_dlinterface_register+0x4c>
    1fb0:	mov	x0, x19
    1fb4:	bl	0 <free>
    1fb8:	mov	x19, xzr
    1fbc:	mov	x0, x19
    1fc0:	ldp	x20, x19, [sp, #32]
    1fc4:	ldr	x21, [sp, #16]
    1fc8:	ldp	x29, x30, [sp], #48
    1fcc:	ret

0000000000001fd0 <lt_dlinterface_free>:
    1fd0:	stp	x29, x30, [sp, #-32]!
    1fd4:	str	x19, [sp, #16]
    1fd8:	mov	x19, x0
    1fdc:	ldr	x0, [x0]
    1fe0:	mov	x29, sp
    1fe4:	bl	0 <free>
    1fe8:	mov	x0, x19
    1fec:	ldr	x19, [sp, #16]
    1ff0:	ldp	x29, x30, [sp], #32
    1ff4:	b	0 <free>

0000000000001ff8 <lt_dlcaller_set_data>:
    1ff8:	stp	x29, x30, [sp, #-64]!
    1ffc:	stp	x24, x23, [sp, #16]
    2000:	stp	x22, x21, [sp, #32]
    2004:	stp	x20, x19, [sp, #48]
    2008:	ldr	x8, [x1, #72]
    200c:	mov	x19, x2
    2010:	mov	x21, x1
    2014:	mov	x20, x0
    2018:	mov	x29, sp
    201c:	cbz	x8, 206c <lt_dlcaller_set_data+0x74>
    2020:	mov	w23, #0xffffffff            	// #-1
    2024:	mov	x9, x8
    2028:	ldr	x10, [x9], #16
    202c:	add	w23, w23, #0x1
    2030:	cbnz	x10, 2028 <lt_dlcaller_set_data+0x30>
    2034:	cbz	w23, 207c <lt_dlcaller_set_data+0x84>
    2038:	mov	x24, xzr
    203c:	add	x9, x8, #0x8
    2040:	mov	w10, w23
    2044:	ldur	x11, [x9, #-8]
    2048:	cmp	x11, x20
    204c:	b.eq	2088 <lt_dlcaller_set_data+0x90>  // b.none
    2050:	add	x24, x24, #0x1
    2054:	cmp	x10, x24
    2058:	add	x9, x9, #0x10
    205c:	b.ne	2044 <lt_dlcaller_set_data+0x4c>  // b.any
    2060:	mov	x22, xzr
    2064:	mov	w24, w23
    2068:	b	2094 <lt_dlcaller_set_data+0x9c>
    206c:	mov	x22, xzr
    2070:	mov	w24, wzr
    2074:	mov	w23, wzr
    2078:	b	2094 <lt_dlcaller_set_data+0x9c>
    207c:	mov	w24, wzr
    2080:	mov	x22, xzr
    2084:	b	208c <lt_dlcaller_set_data+0x94>
    2088:	ldr	x22, [x9]
    208c:	cmp	w24, w23
    2090:	b.ne	20c8 <lt_dlcaller_set_data+0xd0>  // b.any
    2094:	add	w9, w23, #0x2
    2098:	lsl	x1, x9, #4
    209c:	mov	x0, x8
    20a0:	bl	0 <lt__realloc>
    20a4:	cbz	x0, 20d4 <lt_dlcaller_set_data+0xdc>
    20a8:	mov	w9, w23
    20ac:	add	w10, w23, #0x1
    20b0:	mov	x8, x0
    20b4:	lsl	x9, x9, #4
    20b8:	lsl	x10, x10, #4
    20bc:	str	x0, [x21, #72]
    20c0:	str	x20, [x0, x9]
    20c4:	str	xzr, [x0, x10]
    20c8:	add	x8, x8, w24, uxtw #4
    20cc:	str	x19, [x8, #8]
    20d0:	b	20d8 <lt_dlcaller_set_data+0xe0>
    20d4:	mov	x22, xzr
    20d8:	mov	x0, x22
    20dc:	ldp	x20, x19, [sp, #48]
    20e0:	ldp	x22, x21, [sp, #32]
    20e4:	ldp	x24, x23, [sp, #16]
    20e8:	ldp	x29, x30, [sp], #64
    20ec:	ret

00000000000020f0 <lt_dlcaller_get_data>:
    20f0:	ldr	x8, [x1, #72]
    20f4:	cbz	x8, 2114 <lt_dlcaller_get_data+0x24>
    20f8:	ldr	x9, [x8]
    20fc:	cbz	x9, 2114 <lt_dlcaller_get_data+0x24>
    2100:	add	x8, x8, #0x10
    2104:	cmp	x9, x0
    2108:	b.eq	211c <lt_dlcaller_get_data+0x2c>  // b.none
    210c:	ldr	x9, [x8], #16
    2110:	cbnz	x9, 2104 <lt_dlcaller_get_data+0x14>
    2114:	mov	x0, xzr
    2118:	ret
    211c:	ldur	x0, [x8, #-8]
    2120:	ret

0000000000002124 <lt_dlgetinfo>:
    2124:	cbz	x0, 2130 <lt_dlgetinfo+0xc>
    2128:	add	x0, x0, #0x10
    212c:	ret
    2130:	stp	x29, x30, [sp, #-16]!
    2134:	mov	w0, #0xc                   	// #12
    2138:	mov	x29, sp
    213c:	bl	0 <lt__error_string>
    2140:	bl	0 <lt__set_last_error>
    2144:	mov	x0, xzr
    2148:	ldp	x29, x30, [sp], #16
    214c:	ret

0000000000002150 <lt_dlhandle_iterate>:
    2150:	stp	x29, x30, [sp, #-32]!
    2154:	stp	x20, x19, [sp, #16]
    2158:	mov	x29, sp
    215c:	cbz	x0, 21ac <lt_dlhandle_iterate+0x5c>
    2160:	adrp	x8, 0 <lt__alloc_die_callback>
    2164:	add	x8, x8, #0x0
    2168:	cmp	x1, #0x0
    216c:	csel	x8, x8, x1, eq  // eq = none
    2170:	ldr	x19, [x8]
    2174:	cbz	x19, 219c <lt_dlhandle_iterate+0x4c>
    2178:	mov	x20, x0
    217c:	ldr	x8, [x20, #8]
    2180:	cbz	x8, 219c <lt_dlhandle_iterate+0x4c>
    2184:	ldr	x1, [x20]
    2188:	mov	x0, x19
    218c:	blr	x8
    2190:	cbz	w0, 219c <lt_dlhandle_iterate+0x4c>
    2194:	ldr	x19, [x19]
    2198:	cbnz	x19, 217c <lt_dlhandle_iterate+0x2c>
    219c:	mov	x0, x19
    21a0:	ldp	x20, x19, [sp, #16]
    21a4:	ldp	x29, x30, [sp], #32
    21a8:	ret
    21ac:	adrp	x0, 0 <lt__alloc_die_callback>
    21b0:	adrp	x1, 0 <lt__alloc_die_callback>
    21b4:	adrp	x3, 0 <lt__alloc_die_callback>
    21b8:	add	x0, x0, #0x0
    21bc:	add	x1, x1, #0x0
    21c0:	add	x3, x3, #0x0
    21c4:	mov	w2, #0x96a                 	// #2410
    21c8:	bl	0 <__assert_fail>

00000000000021cc <lt_dlhandle_fetch>:
    21cc:	stp	x29, x30, [sp, #-48]!
    21d0:	str	x21, [sp, #16]
    21d4:	stp	x20, x19, [sp, #32]
    21d8:	mov	x29, sp
    21dc:	cbz	x0, 223c <lt_dlhandle_fetch+0x70>
    21e0:	adrp	x8, 0 <lt__alloc_die_callback>
    21e4:	ldr	x19, [x8]
    21e8:	cbz	x19, 2228 <lt_dlhandle_fetch+0x5c>
    21ec:	mov	x20, x1
    21f0:	mov	x21, x0
    21f4:	ldr	x8, [x21, #8]
    21f8:	cbz	x8, 220c <lt_dlhandle_fetch+0x40>
    21fc:	ldr	x1, [x21]
    2200:	mov	x0, x19
    2204:	blr	x8
    2208:	cbnz	w0, 2220 <lt_dlhandle_fetch+0x54>
    220c:	ldr	x0, [x19, #24]
    2210:	cbz	x0, 2220 <lt_dlhandle_fetch+0x54>
    2214:	mov	x1, x20
    2218:	bl	0 <strcmp>
    221c:	cbz	w0, 2228 <lt_dlhandle_fetch+0x5c>
    2220:	ldr	x19, [x19]
    2224:	cbnz	x19, 21f4 <lt_dlhandle_fetch+0x28>
    2228:	mov	x0, x19
    222c:	ldp	x20, x19, [sp, #32]
    2230:	ldr	x21, [sp, #16]
    2234:	ldp	x29, x30, [sp], #48
    2238:	ret
    223c:	adrp	x0, 0 <lt__alloc_die_callback>
    2240:	adrp	x1, 0 <lt__alloc_die_callback>
    2244:	adrp	x3, 0 <lt__alloc_die_callback>
    2248:	add	x0, x0, #0x0
    224c:	add	x1, x1, #0x0
    2250:	add	x3, x3, #0x0
    2254:	mov	w2, #0x981                 	// #2433
    2258:	bl	0 <__assert_fail>

000000000000225c <lt_dlhandle_map>:
    225c:	stp	x29, x30, [sp, #-48]!
    2260:	stp	x22, x21, [sp, #16]
    2264:	stp	x20, x19, [sp, #32]
    2268:	mov	x29, sp
    226c:	cbz	x0, 22d0 <lt_dlhandle_map+0x74>
    2270:	adrp	x8, 0 <lt__alloc_die_callback>
    2274:	ldr	x22, [x8]
    2278:	mov	x19, x2
    227c:	mov	x20, x1
    2280:	mov	x21, x0
    2284:	cbz	x22, 22bc <lt_dlhandle_map+0x60>
    2288:	ldr	x8, [x21, #8]
    228c:	cbz	x8, 22a8 <lt_dlhandle_map+0x4c>
    2290:	ldr	x1, [x21]
    2294:	mov	x0, x22
    2298:	blr	x8
    229c:	cbz	w0, 22a8 <lt_dlhandle_map+0x4c>
    22a0:	ldr	x22, [x22]
    22a4:	cbnz	x22, 2288 <lt_dlhandle_map+0x2c>
    22a8:	mov	x0, x22
    22ac:	mov	x1, x19
    22b0:	blr	x20
    22b4:	cbz	w0, 2284 <lt_dlhandle_map+0x28>
    22b8:	b	22c0 <lt_dlhandle_map+0x64>
    22bc:	mov	w0, wzr
    22c0:	ldp	x20, x19, [sp, #32]
    22c4:	ldp	x22, x21, [sp, #16]
    22c8:	ldp	x29, x30, [sp], #48
    22cc:	ret
    22d0:	adrp	x0, 0 <lt__alloc_die_callback>
    22d4:	adrp	x1, 0 <lt__alloc_die_callback>
    22d8:	adrp	x3, 0 <lt__alloc_die_callback>
    22dc:	add	x0, x0, #0x0
    22e0:	add	x1, x1, #0x0
    22e4:	add	x3, x3, #0x0
    22e8:	mov	w2, #0x995                 	// #2453
    22ec:	bl	0 <__assert_fail>

00000000000022f0 <tryall_dlopen>:
    22f0:	stp	x29, x30, [sp, #-80]!
    22f4:	adrp	x8, 0 <lt__alloc_die_callback>
    22f8:	stp	x24, x23, [sp, #32]
    22fc:	ldr	x24, [x8]
    2300:	str	x25, [sp, #16]
    2304:	stp	x22, x21, [sp, #48]
    2308:	stp	x20, x19, [sp, #64]
    230c:	mov	x29, sp
    2310:	mov	x19, x3
    2314:	mov	x21, x2
    2318:	mov	x22, x1
    231c:	mov	x23, x0
    2320:	bl	0 <lt__get_last_error>
    2324:	mov	x20, x0
    2328:	cbz	x24, 2354 <tryall_dlopen+0x64>
    232c:	ldr	x0, [x24, #16]
    2330:	cmp	x0, x22
    2334:	b.eq	2370 <tryall_dlopen+0x80>  // b.none
    2338:	cbz	x22, 234c <tryall_dlopen+0x5c>
    233c:	cbz	x0, 234c <tryall_dlopen+0x5c>
    2340:	mov	x1, x22
    2344:	bl	0 <strcmp>
    2348:	cbz	w0, 2370 <tryall_dlopen+0x80>
    234c:	ldr	x24, [x24]
    2350:	cbnz	x24, 232c <tryall_dlopen+0x3c>
    2354:	ldr	x25, [x23]
    2358:	cbz	x22, 2388 <tryall_dlopen+0x98>
    235c:	mov	x0, x22
    2360:	bl	0 <lt__strdup>
    2364:	str	x0, [x25, #16]
    2368:	cbnz	x0, 238c <tryall_dlopen+0x9c>
    236c:	b	2438 <tryall_dlopen+0x148>
    2370:	ldr	w8, [x24, #32]
    2374:	mov	w0, wzr
    2378:	add	w8, w8, #0x1
    237c:	str	w8, [x24, #32]
    2380:	str	x24, [x23]
    2384:	b	2450 <tryall_dlopen+0x160>
    2388:	str	xzr, [x25, #16]
    238c:	mov	x0, xzr
    2390:	bl	0 <lt_dlloader_next>
    2394:	mov	x23, x0
    2398:	mov	x24, x19
    239c:	cbnz	x19, 23ac <tryall_dlopen+0xbc>
    23a0:	mov	x0, x23
    23a4:	bl	0 <lt_dlloader_get>
    23a8:	mov	x24, x0
    23ac:	ldr	x8, [x24, #16]
    23b0:	ldr	x0, [x24, #56]
    23b4:	mov	x1, x22
    23b8:	mov	x2, x21
    23bc:	blr	x8
    23c0:	str	x0, [x25, #56]
    23c4:	cbnz	x0, 23e0 <tryall_dlopen+0xf0>
    23c8:	cbnz	x19, 242c <tryall_dlopen+0x13c>
    23cc:	mov	x0, x23
    23d0:	bl	0 <lt_dlloader_next>
    23d4:	mov	x23, x0
    23d8:	cbnz	x0, 2398 <tryall_dlopen+0xa8>
    23dc:	b	2424 <tryall_dlopen+0x134>
    23e0:	cbz	x21, 2420 <tryall_dlopen+0x130>
    23e4:	ldrb	w8, [x21]
    23e8:	ldrb	w9, [x25, #36]
    23ec:	bfxil	w9, w8, #1, #1
    23f0:	strb	w9, [x25, #36]
    23f4:	ldrb	w8, [x21]
    23f8:	lsr	w8, w8, #1
    23fc:	lsr	w8, w8, #1
    2400:	bfi	w9, w8, #1, #1
    2404:	strb	w9, [x25, #36]
    2408:	ldrb	w8, [x21]
    240c:	and	w9, w9, #0xfffffffb
    2410:	lsr	w8, w8, #1
    2414:	and	w8, w8, #0x4
    2418:	orr	w8, w9, w8
    241c:	strb	w8, [x25, #36]
    2420:	cbnz	x19, 2440 <tryall_dlopen+0x150>
    2424:	cbnz	x19, 2440 <tryall_dlopen+0x150>
    2428:	cbnz	x23, 2440 <tryall_dlopen+0x150>
    242c:	ldr	x0, [x25, #16]
    2430:	bl	0 <free>
    2434:	str	xzr, [x25, #16]
    2438:	mov	w0, #0x1                   	// #1
    243c:	b	2450 <tryall_dlopen+0x160>
    2440:	mov	x0, x20
    2444:	str	x24, [x25, #8]
    2448:	bl	0 <lt__set_last_error>
    244c:	mov	w0, wzr
    2450:	ldp	x20, x19, [sp, #64]
    2454:	ldp	x22, x21, [sp, #48]
    2458:	ldp	x24, x23, [sp, #32]
    245c:	ldr	x25, [sp, #16]
    2460:	ldp	x29, x30, [sp], #80
    2464:	ret

0000000000002468 <find_file_callback>:
    2468:	stp	x29, x30, [sp, #-48]!
    246c:	str	x21, [sp, #16]
    2470:	stp	x20, x19, [sp, #32]
    2474:	mov	x29, sp
    2478:	cbz	x0, 24fc <find_file_callback+0x94>
    247c:	ldrb	w8, [x0]
    2480:	mov	x20, x0
    2484:	cbz	w8, 24fc <find_file_callback+0x94>
    2488:	mov	x19, x1
    248c:	cbz	x1, 251c <find_file_callback+0xb4>
    2490:	mov	x21, x2
    2494:	cbz	x2, 253c <find_file_callback+0xd4>
    2498:	adrp	x1, 0 <lt__alloc_die_callback>
    249c:	add	x1, x1, #0x0
    24a0:	mov	x0, x20
    24a4:	bl	0 <fopen>
    24a8:	str	x0, [x21]
    24ac:	cbz	x0, 24ec <find_file_callback+0x84>
    24b0:	mov	w1, #0x2f                  	// #47
    24b4:	mov	x0, x20
    24b8:	bl	0 <strrchr>
    24bc:	cmp	x0, x20
    24c0:	b.ls	24c8 <find_file_callback+0x60>  // b.plast
    24c4:	strb	wzr, [x0]
    24c8:	ldr	x0, [x19]
    24cc:	bl	0 <free>
    24d0:	mov	x0, x20
    24d4:	str	xzr, [x19]
    24d8:	bl	0 <lt__strdup>
    24dc:	cmp	x0, #0x0
    24e0:	mov	w8, #0xffffffff            	// #-1
    24e4:	str	x0, [x19]
    24e8:	cneg	w0, w8, ne  // ne = any
    24ec:	ldp	x20, x19, [sp, #32]
    24f0:	ldr	x21, [sp, #16]
    24f4:	ldp	x29, x30, [sp], #48
    24f8:	ret
    24fc:	adrp	x0, 0 <lt__alloc_die_callback>
    2500:	adrp	x1, 0 <lt__alloc_die_callback>
    2504:	adrp	x3, 0 <lt__alloc_die_callback>
    2508:	add	x0, x0, #0x0
    250c:	add	x1, x1, #0x0
    2510:	add	x3, x3, #0x0
    2514:	mov	w2, #0x2f0                 	// #752
    2518:	bl	0 <__assert_fail>
    251c:	adrp	x0, 0 <lt__alloc_die_callback>
    2520:	adrp	x1, 0 <lt__alloc_die_callback>
    2524:	adrp	x3, 0 <lt__alloc_die_callback>
    2528:	add	x0, x0, #0x0
    252c:	add	x1, x1, #0x0
    2530:	add	x3, x3, #0x0
    2534:	mov	w2, #0x2f1                 	// #753
    2538:	bl	0 <__assert_fail>
    253c:	adrp	x0, 0 <lt__alloc_die_callback>
    2540:	adrp	x1, 0 <lt__alloc_die_callback>
    2544:	adrp	x3, 0 <lt__alloc_die_callback>
    2548:	add	x0, x0, #0x0
    254c:	add	x1, x1, #0x0
    2550:	add	x3, x3, #0x0
    2554:	mov	w2, #0x2f2                 	// #754
    2558:	bl	0 <__assert_fail>

000000000000255c <trim>:
    255c:	stp	x29, x30, [sp, #-48]!
    2560:	stp	x20, x19, [sp, #32]
    2564:	mov	x20, x1
    2568:	mov	x19, x0
    256c:	mov	w1, #0x27                  	// #39
    2570:	mov	x0, x20
    2574:	stp	x22, x21, [sp, #16]
    2578:	mov	x29, sp
    257c:	bl	0 <strrchr>
    2580:	mov	x21, x0
    2584:	cbz	x20, 25a0 <trim+0x44>
    2588:	ldrb	w8, [x20]
    258c:	cbz	w8, 25a0 <trim+0x44>
    2590:	mov	x0, x20
    2594:	bl	0 <strlen>
    2598:	mov	x22, x0
    259c:	b	25a4 <trim+0x48>
    25a0:	mov	x22, xzr
    25a4:	ldr	x0, [x19]
    25a8:	bl	0 <free>
    25ac:	mov	w0, #0x1                   	// #1
    25b0:	str	xzr, [x19]
    25b4:	cbz	x21, 2608 <trim+0xac>
    25b8:	subs	x21, x21, x20
    25bc:	b.eq	2608 <trim+0xac>  // b.none
    25c0:	cmp	x22, #0x4
    25c4:	b.cc	25fc <trim+0xa0>  // b.lo, b.ul, b.last
    25c8:	ldrb	w8, [x20]
    25cc:	cmp	w8, #0x27
    25d0:	b.ne	25fc <trim+0xa0>  // b.any
    25d4:	mov	x0, x21
    25d8:	bl	0 <lt__malloc>
    25dc:	cbz	x0, 2618 <trim+0xbc>
    25e0:	add	x1, x20, #0x1
    25e4:	sub	x20, x21, #0x1
    25e8:	mov	x2, x20
    25ec:	mov	x22, x0
    25f0:	bl	0 <memcpy>
    25f4:	strb	wzr, [x22, x20]
    25f8:	b	2600 <trim+0xa4>
    25fc:	mov	x22, xzr
    2600:	mov	w0, wzr
    2604:	str	x22, [x19]
    2608:	ldp	x20, x19, [sp, #32]
    260c:	ldp	x22, x21, [sp, #16]
    2610:	ldp	x29, x30, [sp], #48
    2614:	ret
    2618:	mov	w0, #0x1                   	// #1
    261c:	b	2608 <trim+0xac>

0000000000002620 <tryall_dlopen_module>:
    2620:	stp	x29, x30, [sp, #-80]!
    2624:	stp	x24, x23, [sp, #32]
    2628:	stp	x22, x21, [sp, #48]
    262c:	stp	x20, x19, [sp, #64]
    2630:	mov	x19, x4
    2634:	mov	x22, x3
    2638:	mov	x23, x2
    263c:	mov	x21, x1
    2640:	mov	x20, x0
    2644:	str	x25, [sp, #16]
    2648:	mov	x29, sp
    264c:	cbz	x2, 2664 <tryall_dlopen_module+0x44>
    2650:	ldrb	w8, [x23]
    2654:	cbz	w8, 2664 <tryall_dlopen_module+0x44>
    2658:	mov	x0, x23
    265c:	bl	0 <strlen>
    2660:	b	2668 <tryall_dlopen_module+0x48>
    2664:	mov	x0, xzr
    2668:	cbz	x20, 273c <tryall_dlopen_module+0x11c>
    266c:	cbz	x23, 275c <tryall_dlopen_module+0x13c>
    2670:	cbz	x22, 277c <tryall_dlopen_module+0x15c>
    2674:	cbz	x0, 268c <tryall_dlopen_module+0x6c>
    2678:	sub	x8, x0, #0x1
    267c:	ldrb	w9, [x23, x8]
    2680:	cmp	w9, #0x2f
    2684:	csel	x25, x8, x0, eq  // eq = none
    2688:	b	2690 <tryall_dlopen_module+0x70>
    268c:	mov	x25, xzr
    2690:	ldrb	w8, [x22]
    2694:	cbz	w8, 26a4 <tryall_dlopen_module+0x84>
    2698:	mov	x0, x22
    269c:	bl	0 <strlen>
    26a0:	b	26a8 <tryall_dlopen_module+0x88>
    26a4:	mov	x0, xzr
    26a8:	add	x8, x25, x0
    26ac:	add	x0, x8, #0x2
    26b0:	bl	0 <lt__malloc>
    26b4:	cbz	x0, 26f8 <tryall_dlopen_module+0xd8>
    26b8:	adrp	x1, 0 <lt__alloc_die_callback>
    26bc:	add	x1, x1, #0x0
    26c0:	mov	w2, w25
    26c4:	mov	x3, x23
    26c8:	mov	x4, x22
    26cc:	mov	x24, x0
    26d0:	bl	0 <sprintf>
    26d4:	mov	x0, x20
    26d8:	cbz	x21, 2700 <tryall_dlopen_module+0xe0>
    26dc:	mov	x1, xzr
    26e0:	mov	x2, x21
    26e4:	mov	x3, x24
    26e8:	mov	x4, x19
    26ec:	bl	2620 <tryall_dlopen_module>
    26f0:	mov	w19, w0
    26f4:	b	2718 <tryall_dlopen_module+0xf8>
    26f8:	mov	w19, #0x1                   	// #1
    26fc:	b	2720 <tryall_dlopen_module+0x100>
    2700:	mov	x1, x24
    2704:	mov	x2, x19
    2708:	mov	x3, xzr
    270c:	bl	22f0 <tryall_dlopen>
    2710:	cmp	w0, #0x0
    2714:	cset	w19, ne  // ne = any
    2718:	mov	x0, x24
    271c:	bl	0 <free>
    2720:	mov	w0, w19
    2724:	ldp	x20, x19, [sp, #64]
    2728:	ldp	x22, x21, [sp, #48]
    272c:	ldp	x24, x23, [sp, #32]
    2730:	ldr	x25, [sp, #16]
    2734:	ldp	x29, x30, [sp], #80
    2738:	ret
    273c:	adrp	x0, 0 <lt__alloc_die_callback>
    2740:	adrp	x1, 0 <lt__alloc_die_callback>
    2744:	adrp	x3, 0 <lt__alloc_die_callback>
    2748:	add	x0, x0, #0x0
    274c:	add	x1, x1, #0x0
    2750:	add	x3, x3, #0x0
    2754:	mov	w2, #0x1f6                 	// #502
    2758:	bl	0 <__assert_fail>
    275c:	adrp	x0, 0 <lt__alloc_die_callback>
    2760:	adrp	x1, 0 <lt__alloc_die_callback>
    2764:	adrp	x3, 0 <lt__alloc_die_callback>
    2768:	add	x0, x0, #0x0
    276c:	add	x1, x1, #0x0
    2770:	add	x3, x3, #0x0
    2774:	mov	w2, #0x1f7                 	// #503
    2778:	bl	0 <__assert_fail>
    277c:	adrp	x0, 0 <lt__alloc_die_callback>
    2780:	adrp	x1, 0 <lt__alloc_die_callback>
    2784:	adrp	x3, 0 <lt__alloc_die_callback>
    2788:	add	x0, x0, #0x0
    278c:	add	x1, x1, #0x0
    2790:	add	x3, x3, #0x0
    2794:	mov	w2, #0x1f8                 	// #504
    2798:	bl	0 <__assert_fail>

000000000000279c <find_handle_callback>:
    279c:	stp	x29, x30, [sp, #-48]!
    27a0:	stp	x20, x19, [sp, #32]
    27a4:	mov	x19, x1
    27a8:	mov	w1, #0x4                   	// #4
    27ac:	str	x21, [sp, #16]
    27b0:	mov	x29, sp
    27b4:	mov	x20, x2
    27b8:	mov	x21, x0
    27bc:	bl	0 <access>
    27c0:	cbz	w0, 27cc <find_handle_callback+0x30>
    27c4:	mov	w0, wzr
    27c8:	b	27ec <find_handle_callback+0x50>
    27cc:	mov	x0, x19
    27d0:	mov	x1, x21
    27d4:	mov	x2, x20
    27d8:	mov	x3, xzr
    27dc:	bl	22f0 <tryall_dlopen>
    27e0:	cbz	w0, 27e8 <find_handle_callback+0x4c>
    27e4:	str	xzr, [x19]
    27e8:	mov	w0, #0x1                   	// #1
    27ec:	ldp	x20, x19, [sp, #32]
    27f0:	ldr	x21, [sp, #16]
    27f4:	ldp	x29, x30, [sp], #48
    27f8:	ret

00000000000027fc <argzize_path>:
    27fc:	stp	x29, x30, [sp, #-16]!
    2800:	mov	x29, sp
    2804:	cbz	x0, 284c <argzize_path+0x50>
    2808:	mov	x3, x2
    280c:	mov	x2, x1
    2810:	cbz	x1, 286c <argzize_path+0x70>
    2814:	cbz	x3, 288c <argzize_path+0x90>
    2818:	mov	w1, #0x3a                  	// #58
    281c:	bl	0 <argz_create_sep>
    2820:	cbz	w0, 2844 <argzize_path+0x48>
    2824:	cmp	w0, #0xc
    2828:	b.ne	2834 <argzize_path+0x38>  // b.any
    282c:	mov	w0, #0xb                   	// #11
    2830:	b	2838 <argzize_path+0x3c>
    2834:	mov	w0, wzr
    2838:	bl	0 <lt__error_string>
    283c:	bl	0 <lt__set_last_error>
    2840:	mov	w0, #0x1                   	// #1
    2844:	ldp	x29, x30, [sp], #16
    2848:	ret
    284c:	adrp	x0, 0 <lt__alloc_die_callback>
    2850:	adrp	x1, 0 <lt__alloc_die_callback>
    2854:	adrp	x3, 0 <lt__alloc_die_callback>
    2858:	add	x0, x0, #0x0
    285c:	add	x1, x1, #0x0
    2860:	add	x3, x3, #0x0
    2864:	mov	w2, #0x28c                 	// #652
    2868:	bl	0 <__assert_fail>
    286c:	adrp	x0, 0 <lt__alloc_die_callback>
    2870:	adrp	x1, 0 <lt__alloc_die_callback>
    2874:	adrp	x3, 0 <lt__alloc_die_callback>
    2878:	add	x0, x0, #0x0
    287c:	add	x1, x1, #0x0
    2880:	add	x3, x3, #0x0
    2884:	mov	w2, #0x28d                 	// #653
    2888:	bl	0 <__assert_fail>
    288c:	adrp	x0, 0 <lt__alloc_die_callback>
    2890:	adrp	x1, 0 <lt__alloc_die_callback>
    2894:	adrp	x3, 0 <lt__alloc_die_callback>
    2898:	add	x0, x0, #0x0
    289c:	add	x1, x1, #0x0
    28a0:	add	x3, x3, #0x0
    28a4:	mov	w2, #0x28e                 	// #654
    28a8:	bl	0 <__assert_fail>

00000000000028ac <lt_argz_insert>:
    28ac:	stp	x29, x30, [sp, #-48]!
    28b0:	str	x21, [sp, #16]
    28b4:	stp	x20, x19, [sp, #32]
    28b8:	mov	x19, x3
    28bc:	mov	x20, x1
    28c0:	mov	x21, x0
    28c4:	mov	x29, sp
    28c8:	cbz	x2, 28e4 <lt_argz_insert+0x38>
    28cc:	mov	x0, x21
    28d0:	mov	x1, x20
    28d4:	mov	x3, x19
    28d8:	bl	0 <argz_insert>
    28dc:	cbnz	w0, 2904 <lt_argz_insert+0x58>
    28e0:	b	2924 <lt_argz_insert+0x78>
    28e4:	mov	x0, x19
    28e8:	bl	0 <strlen>
    28ec:	add	x3, x0, #0x1
    28f0:	mov	x0, x21
    28f4:	mov	x1, x20
    28f8:	mov	x2, x19
    28fc:	bl	0 <argz_append>
    2900:	cbz	w0, 2924 <lt_argz_insert+0x78>
    2904:	cmp	w0, #0xc
    2908:	b.ne	2914 <lt_argz_insert+0x68>  // b.any
    290c:	mov	w0, #0xb                   	// #11
    2910:	b	2918 <lt_argz_insert+0x6c>
    2914:	mov	w0, wzr
    2918:	bl	0 <lt__error_string>
    291c:	bl	0 <lt__set_last_error>
    2920:	mov	w0, #0x1                   	// #1
    2924:	ldp	x20, x19, [sp, #32]
    2928:	ldr	x21, [sp, #16]
    292c:	ldp	x29, x30, [sp], #48
    2930:	ret

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x1, 38 <lt__slist_delete+0x38>
  10:	cbz	x0, 28 <lt__slist_delete+0x28>
  14:	mov	x19, x1
  18:	ldr	x20, [x0]
  1c:	blr	x19
  20:	mov	x0, x20
  24:	cbnz	x20, 18 <lt__slist_delete+0x18>
  28:	ldp	x20, x19, [sp, #16]
  2c:	mov	x0, xzr
  30:	ldp	x29, x30, [sp], #32
  34:	ret
  38:	adrp	x0, 0 <lt__slist_delete>
  3c:	adrp	x1, 0 <lt__slist_delete>
  40:	adrp	x3, 0 <lt__slist_delete>
  44:	add	x0, x0, #0x0
  48:	add	x1, x1, #0x0
  4c:	add	x3, x3, #0x0
  50:	mov	w2, #0x38                  	// #56
  54:	bl	0 <__assert_fail>

0000000000000058 <lt__slist_remove>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	str	x21, [sp, #16]
  60:	stp	x20, x19, [sp, #32]
  64:	mov	x29, sp
  68:	cbz	x1, d8 <lt__slist_remove+0x80>
  6c:	mov	x21, x0
  70:	cbz	x0, 98 <lt__slist_remove+0x40>
  74:	ldr	x0, [x21]
  78:	cbz	x0, c8 <lt__slist_remove+0x70>
  7c:	mov	x20, x1
  80:	mov	x1, x2
  84:	mov	x19, x2
  88:	blr	x20
  8c:	cbz	x0, a0 <lt__slist_remove+0x48>
  90:	ldr	x8, [x21]
  94:	b	c0 <lt__slist_remove+0x68>
  98:	mov	x0, xzr
  9c:	b	c8 <lt__slist_remove+0x70>
  a0:	ldr	x8, [x21]
  a4:	ldr	x0, [x8]
  a8:	cbz	x0, c8 <lt__slist_remove+0x70>
  ac:	mov	x1, x19
  b0:	mov	x21, x8
  b4:	blr	x20
  b8:	ldr	x8, [x21]
  bc:	cbz	x0, a4 <lt__slist_remove+0x4c>
  c0:	ldr	x8, [x8]
  c4:	str	x8, [x21]
  c8:	ldp	x20, x19, [sp, #32]
  cc:	ldr	x21, [sp, #16]
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret
  d8:	adrp	x0, 0 <lt__slist_delete>
  dc:	adrp	x1, 0 <lt__slist_delete>
  e0:	adrp	x3, 0 <lt__slist_delete>
  e4:	add	x0, x0, #0x0
  e8:	add	x1, x1, #0x0
  ec:	add	x3, x3, #0x0
  f0:	mov	w2, #0x53                  	// #83
  f4:	bl	0 <__assert_fail>

00000000000000f8 <lt__slist_find>:
  f8:	stp	x29, x30, [sp, #-48]!
  fc:	str	x21, [sp, #16]
 100:	stp	x20, x19, [sp, #32]
 104:	mov	x29, sp
 108:	cbz	x1, 148 <lt__slist_find+0x50>
 10c:	mov	x21, x0
 110:	cbz	x0, 134 <lt__slist_find+0x3c>
 114:	mov	x19, x2
 118:	mov	x20, x1
 11c:	mov	x0, x21
 120:	mov	x1, x19
 124:	blr	x20
 128:	cbnz	x0, 138 <lt__slist_find+0x40>
 12c:	ldr	x21, [x21]
 130:	cbnz	x21, 11c <lt__slist_find+0x24>
 134:	mov	x0, xzr
 138:	ldp	x20, x19, [sp, #32]
 13c:	ldr	x21, [sp, #16]
 140:	ldp	x29, x30, [sp], #48
 144:	ret
 148:	adrp	x0, 0 <lt__slist_delete>
 14c:	adrp	x1, 0 <lt__slist_delete>
 150:	adrp	x3, 0 <lt__slist_delete>
 154:	add	x0, x0, #0x0
 158:	add	x1, x1, #0x0
 15c:	add	x3, x3, #0x0
 160:	mov	w2, #0x7a                  	// #122
 164:	bl	0 <__assert_fail>

0000000000000168 <lt__slist_concat>:
 168:	cbz	x0, 184 <lt__slist_concat+0x1c>
 16c:	mov	x9, x0
 170:	mov	x8, x9
 174:	ldr	x9, [x9]
 178:	cbnz	x9, 170 <lt__slist_concat+0x8>
 17c:	str	x1, [x8]
 180:	ret
 184:	mov	x0, x1
 188:	ret

000000000000018c <lt__slist_cons>:
 18c:	stp	x29, x30, [sp, #-16]!
 190:	mov	x29, sp
 194:	cbz	x0, 1a8 <lt__slist_cons+0x1c>
 198:	ldr	x8, [x0]
 19c:	cbnz	x8, 1b4 <lt__slist_cons+0x28>
 1a0:	str	x1, [x0]
 1a4:	b	1ac <lt__slist_cons+0x20>
 1a8:	mov	x0, x1
 1ac:	ldp	x29, x30, [sp], #16
 1b0:	ret
 1b4:	adrp	x0, 0 <lt__slist_delete>
 1b8:	adrp	x1, 0 <lt__slist_delete>
 1bc:	adrp	x3, 0 <lt__slist_delete>
 1c0:	add	x0, x0, #0x0
 1c4:	add	x1, x1, #0x0
 1c8:	add	x3, x3, #0x0
 1cc:	mov	w2, #0xaf                  	// #175
 1d0:	bl	0 <__assert_fail>

00000000000001d4 <lt__slist_tail>:
 1d4:	cbz	x0, 1dc <lt__slist_tail+0x8>
 1d8:	ldr	x0, [x0]
 1dc:	ret

00000000000001e0 <lt__slist_nth>:
 1e0:	cbz	x0, 200 <lt__slist_nth+0x20>
 1e4:	cmp	x1, #0x2
 1e8:	b.cc	200 <lt__slist_nth+0x20>  // b.lo, b.ul, b.last
 1ec:	sub	x8, x1, #0x1
 1f0:	ldr	x0, [x0]
 1f4:	subs	x8, x8, #0x1
 1f8:	cbz	x0, 200 <lt__slist_nth+0x20>
 1fc:	b.hi	1f0 <lt__slist_nth+0x10>  // b.pmore
 200:	ret

0000000000000204 <lt__slist_length>:
 204:	mov	x8, xzr
 208:	cbz	x0, 218 <lt__slist_length+0x14>
 20c:	ldr	x0, [x0]
 210:	add	x8, x8, #0x1
 214:	cbnz	x0, 20c <lt__slist_length+0x8>
 218:	mov	x0, x8
 21c:	ret

0000000000000220 <lt__slist_reverse>:
 220:	cbz	x0, 240 <lt__slist_reverse+0x20>
 224:	mov	x9, xzr
 228:	mov	x8, x0
 22c:	ldr	x0, [x0]
 230:	str	x9, [x8]
 234:	mov	x9, x8
 238:	cbnz	x0, 228 <lt__slist_reverse+0x8>
 23c:	b	244 <lt__slist_reverse+0x24>
 240:	mov	x8, xzr
 244:	mov	x0, x8
 248:	ret

000000000000024c <lt__slist_foreach>:
 24c:	stp	x29, x30, [sp, #-48]!
 250:	str	x21, [sp, #16]
 254:	stp	x20, x19, [sp, #32]
 258:	mov	x29, sp
 25c:	cbz	x1, 2a0 <lt__slist_foreach+0x54>
 260:	mov	x19, x2
 264:	mov	x20, x1
 268:	cbz	x0, 288 <lt__slist_foreach+0x3c>
 26c:	ldr	x21, [x0]
 270:	mov	x1, x19
 274:	blr	x20
 278:	mov	x8, x0
 27c:	mov	x0, x21
 280:	cbz	x8, 268 <lt__slist_foreach+0x1c>
 284:	b	28c <lt__slist_foreach+0x40>
 288:	mov	x8, xzr
 28c:	ldp	x20, x19, [sp, #32]
 290:	ldr	x21, [sp, #16]
 294:	mov	x0, x8
 298:	ldp	x29, x30, [sp], #48
 29c:	ret
 2a0:	adrp	x0, 0 <lt__slist_delete>
 2a4:	adrp	x1, 0 <lt__slist_delete>
 2a8:	adrp	x3, 0 <lt__slist_delete>
 2ac:	add	x0, x0, #0x0
 2b0:	add	x1, x1, #0x0
 2b4:	add	x3, x3, #0x0
 2b8:	mov	w2, #0xf6                  	// #246
 2bc:	bl	0 <__assert_fail>

00000000000002c0 <lt__slist_sort>:
 2c0:	stp	x29, x30, [sp, #-64]!
 2c4:	str	x23, [sp, #16]
 2c8:	stp	x22, x21, [sp, #32]
 2cc:	stp	x20, x19, [sp, #48]
 2d0:	mov	x29, sp
 2d4:	cbz	x0, 3c0 <lt__slist_sort+0x100>
 2d8:	ldr	x22, [x0]
 2dc:	cbz	x22, 3c0 <lt__slist_sort+0x100>
 2e0:	ldr	x9, [x22]
 2e4:	mov	x19, x2
 2e8:	mov	x20, x1
 2ec:	mov	x8, x0
 2f0:	cbz	x9, 310 <lt__slist_sort+0x50>
 2f4:	mov	x8, x0
 2f8:	ldr	x9, [x9]
 2fc:	cbz	x9, 30c <lt__slist_sort+0x4c>
 300:	ldr	x9, [x9]
 304:	ldr	x8, [x8]
 308:	cbnz	x9, 2f8 <lt__slist_sort+0x38>
 30c:	ldr	x22, [x8]
 310:	mov	x1, x20
 314:	mov	x2, x19
 318:	str	xzr, [x8]
 31c:	bl	2c0 <lt__slist_sort>
 320:	mov	x21, x0
 324:	mov	x0, x22
 328:	mov	x1, x20
 32c:	mov	x2, x19
 330:	bl	2c0 <lt__slist_sort>
 334:	cmp	x21, #0x0
 338:	mov	x22, x0
 33c:	add	x23, x29, #0x18
 340:	cset	w10, ne  // ne = any
 344:	cbz	x21, 3a8 <lt__slist_sort+0xe8>
 348:	cbz	x22, 3a8 <lt__slist_sort+0xe8>
 34c:	add	x23, x29, #0x18
 350:	mov	x0, x21
 354:	mov	x1, x22
 358:	mov	x2, x19
 35c:	blr	x20
 360:	cmp	w0, #0x0
 364:	b.le	37c <lt__slist_sort+0xbc>
 368:	str	x22, [x23]
 36c:	ldr	x8, [x22]
 370:	mov	x9, x21
 374:	mov	x23, x22
 378:	b	38c <lt__slist_sort+0xcc>
 37c:	str	x21, [x23]
 380:	ldr	x9, [x21]
 384:	mov	x8, x22
 388:	mov	x23, x21
 38c:	cmp	x9, #0x0
 390:	cset	w10, ne  // ne = any
 394:	cbz	x8, 3b0 <lt__slist_sort+0xf0>
 398:	mov	x21, x9
 39c:	mov	x22, x8
 3a0:	cbnz	x9, 350 <lt__slist_sort+0x90>
 3a4:	b	3b0 <lt__slist_sort+0xf0>
 3a8:	mov	x8, x22
 3ac:	mov	x9, x21
 3b0:	cmp	w10, #0x0
 3b4:	csel	x8, x9, x8, ne  // ne = any
 3b8:	str	x8, [x23]
 3bc:	ldr	x0, [x29, #24]
 3c0:	ldp	x20, x19, [sp, #48]
 3c4:	ldp	x22, x21, [sp, #32]
 3c8:	ldr	x23, [sp, #16]
 3cc:	ldp	x29, x30, [sp], #64
 3d0:	ret

00000000000003d4 <lt__slist_box>:
 3d4:	stp	x29, x30, [sp, #-32]!
 3d8:	str	x19, [sp, #16]
 3dc:	mov	x19, x0
 3e0:	mov	w0, #0x10                  	// #16
 3e4:	mov	x29, sp
 3e8:	bl	0 <malloc>
 3ec:	cbz	x0, 3f4 <lt__slist_box+0x20>
 3f0:	stp	xzr, x19, [x0]
 3f4:	ldr	x19, [sp, #16]
 3f8:	ldp	x29, x30, [sp], #32
 3fc:	ret

0000000000000400 <lt__slist_unbox>:
 400:	stp	x29, x30, [sp, #-32]!
 404:	str	x19, [sp, #16]
 408:	mov	x29, sp
 40c:	cbz	x0, 41c <lt__slist_unbox+0x1c>
 410:	ldr	x19, [x0, #8]
 414:	bl	0 <free>
 418:	b	420 <lt__slist_unbox+0x20>
 41c:	mov	x19, xzr
 420:	mov	x0, x19
 424:	ldr	x19, [sp, #16]
 428:	ldp	x29, x30, [sp], #32
 42c:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 84 <lt_strlcat+0x84>
  14:	mov	x19, x1
  18:	cbz	x1, a4 <lt_strlcat+0xa4>
  1c:	mov	x21, x2
  20:	cbz	x2, c4 <lt_strlcat+0xc4>
  24:	mov	x20, x0
  28:	bl	0 <strlen>
  2c:	sub	x8, x21, #0x1
  30:	cmp	x0, x8
  34:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  38:	ldrb	w9, [x19]
  3c:	cbz	w9, 58 <lt_strlcat+0x58>
  40:	strb	w9, [x20, x0]
  44:	ldrb	w9, [x19, #1]!
  48:	add	x0, x0, #0x1
  4c:	cmp	x0, x8
  50:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  54:	cbnz	w9, 40 <lt_strlcat+0x40>
  58:	strb	wzr, [x20, x0]
  5c:	ldrb	w8, [x19]
  60:	cbz	w8, 74 <lt_strlcat+0x74>
  64:	add	x8, x19, #0x1
  68:	ldrb	w9, [x8], #1
  6c:	add	x0, x0, #0x1
  70:	cbnz	w9, 68 <lt_strlcat+0x68>
  74:	ldp	x20, x19, [sp, #32]
  78:	ldr	x21, [sp, #16]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret
  84:	adrp	x0, 0 <lt_strlcat>
  88:	adrp	x1, 0 <lt_strlcat>
  8c:	adrp	x3, 0 <lt_strlcat>
  90:	add	x0, x0, #0x0
  94:	add	x1, x1, #0x0
  98:	add	x3, x3, #0x0
  9c:	mov	w2, #0x39                  	// #57
  a0:	bl	0 <__assert_fail>
  a4:	adrp	x0, 0 <lt_strlcat>
  a8:	adrp	x1, 0 <lt_strlcat>
  ac:	adrp	x3, 0 <lt_strlcat>
  b0:	add	x0, x0, #0x0
  b4:	add	x1, x1, #0x0
  b8:	add	x3, x3, #0x0
  bc:	mov	w2, #0x3a                  	// #58
  c0:	bl	0 <__assert_fail>
  c4:	adrp	x0, 0 <lt_strlcat>
  c8:	adrp	x1, 0 <lt_strlcat>
  cc:	adrp	x3, 0 <lt_strlcat>
  d0:	add	x0, x0, #0x0
  d4:	add	x1, x1, #0x0
  d8:	add	x3, x3, #0x0
  dc:	mov	w2, #0x3b                  	// #59
  e0:	bl	0 <__assert_fail>

00000000000000e4 <lt_strlcpy>:
  e4:	stp	x29, x30, [sp, #-16]!
  e8:	mov	x29, sp
  ec:	cbz	x0, 15c <lt_strlcpy+0x78>
  f0:	cbz	x1, 17c <lt_strlcpy+0x98>
  f4:	cbz	x2, 19c <lt_strlcpy+0xb8>
  f8:	mov	x8, x0
  fc:	subs	x9, x2, #0x1
 100:	mov	x0, xzr
 104:	b.eq	138 <lt_strlcpy+0x54>  // b.none
 108:	ldrb	w10, [x1]
 10c:	cbz	w10, 138 <lt_strlcpy+0x54>
 110:	mov	x11, xzr
 114:	add	x0, x11, #0x1
 118:	cmp	x0, x9
 11c:	strb	w10, [x8, x11]
 120:	b.cs	134 <lt_strlcpy+0x50>  // b.hs, b.nlast
 124:	add	x10, x1, x11
 128:	ldrb	w10, [x10, #1]
 12c:	mov	x11, x0
 130:	cbnz	w10, 114 <lt_strlcpy+0x30>
 134:	add	x1, x1, x0
 138:	strb	wzr, [x8, x0]
 13c:	ldrb	w8, [x1]
 140:	cbz	w8, 154 <lt_strlcpy+0x70>
 144:	add	x8, x1, #0x1
 148:	ldrb	w9, [x8], #1
 14c:	add	x0, x0, #0x1
 150:	cbnz	w9, 148 <lt_strlcpy+0x64>
 154:	ldp	x29, x30, [sp], #16
 158:	ret
 15c:	adrp	x0, 0 <lt_strlcat>
 160:	adrp	x1, 0 <lt_strlcat>
 164:	adrp	x3, 0 <lt_strlcat>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	add	x3, x3, #0x0
 174:	mov	w2, #0x69                  	// #105
 178:	bl	0 <__assert_fail>
 17c:	adrp	x0, 0 <lt_strlcat>
 180:	adrp	x1, 0 <lt_strlcat>
 184:	adrp	x3, 0 <lt_strlcat>
 188:	add	x0, x0, #0x0
 18c:	add	x1, x1, #0x0
 190:	add	x3, x3, #0x0
 194:	mov	w2, #0x6a                  	// #106
 198:	bl	0 <__assert_fail>
 19c:	adrp	x0, 0 <lt_strlcat>
 1a0:	adrp	x1, 0 <lt_strlcat>
 1a4:	adrp	x3, 0 <lt_strlcat>
 1a8:	add	x0, x0, #0x0
 1ac:	add	x1, x1, #0x0
 1b0:	add	x3, x3, #0x0
 1b4:	mov	w2, #0x6b                  	// #107
 1b8:	bl	0 <__assert_fail>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <dlopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <dlopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbnz	x8, 30 <dlopen_LTX_get_vtable+0x30>
  1c:	mov	w0, #0x48                  	// #72
  20:	bl	0 <lt__zalloc>
  24:	mov	x8, x0
  28:	str	x0, [x20]
  2c:	cbz	x0, 94 <dlopen_LTX_get_vtable+0x94>
  30:	ldr	x9, [x8]
  34:	cbz	x9, 58 <dlopen_LTX_get_vtable+0x58>
  38:	ldr	x9, [x8, #56]
  3c:	cmp	x9, x19
  40:	b.eq	94 <dlopen_LTX_get_vtable+0x94>  // b.none
  44:	mov	w0, #0x3                   	// #3
  48:	bl	0 <lt__error_string>
  4c:	bl	0 <lt__set_last_error>
  50:	mov	x8, xzr
  54:	b	94 <dlopen_LTX_get_vtable+0x94>
  58:	adrp	x9, 0 <dlopen_LTX_get_vtable>
  5c:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  60:	adrp	x11, 0 <dlopen_LTX_get_vtable>
  64:	adrp	x12, 0 <dlopen_LTX_get_vtable>
  68:	adrp	x13, 0 <dlopen_LTX_get_vtable>
  6c:	add	x9, x9, #0x0
  70:	add	x10, x10, #0x0
  74:	add	x11, x11, #0x0
  78:	add	x12, x12, #0x0
  7c:	add	x13, x13, #0x0
  80:	str	x9, [x8]
  84:	stp	x10, x11, [x8, #16]
  88:	str	x12, [x8, #32]
  8c:	stp	x13, x19, [x8, #48]
  90:	str	wzr, [x8, #64]
  94:	ldp	x20, x19, [sp, #16]
  98:	mov	x0, x8
  9c:	ldp	x29, x30, [sp], #32
  a0:	ret

00000000000000a4 <vm_open>:
  a4:	stp	x29, x30, [sp, #-32]!
  a8:	mov	x0, x1
  ac:	str	x19, [sp, #16]
  b0:	mov	x29, sp
  b4:	cbz	x2, cc <vm_open+0x28>
  b8:	ldrb	w8, [x2]
  bc:	tst	w8, #0x4
  c0:	mov	w8, #0x101                 	// #257
  c4:	csinc	w1, w8, wzr, ne  // ne = any
  c8:	b	d0 <vm_open+0x2c>
  cc:	mov	w1, #0x1                   	// #1
  d0:	bl	0 <dlopen>
  d4:	mov	x19, x0
  d8:	cbnz	x0, e4 <vm_open+0x40>
  dc:	bl	0 <dlerror>
  e0:	bl	0 <lt__set_last_error>
  e4:	mov	x0, x19
  e8:	ldr	x19, [sp, #16]
  ec:	ldp	x29, x30, [sp], #32
  f0:	ret

00000000000000f4 <vm_close>:
  f4:	stp	x29, x30, [sp, #-16]!
  f8:	mov	x0, x1
  fc:	mov	x29, sp
 100:	bl	0 <dlclose>
 104:	cbz	w0, 114 <vm_close+0x20>
 108:	bl	0 <dlerror>
 10c:	bl	0 <lt__set_last_error>
 110:	mov	w0, #0x1                   	// #1
 114:	ldp	x29, x30, [sp], #16
 118:	ret

000000000000011c <vm_sym>:
 11c:	stp	x29, x30, [sp, #-32]!
 120:	mov	x0, x1
 124:	mov	x1, x2
 128:	str	x19, [sp, #16]
 12c:	mov	x29, sp
 130:	bl	0 <dlsym>
 134:	mov	x19, x0
 138:	cbnz	x0, 144 <vm_sym+0x28>
 13c:	bl	0 <dlerror>
 140:	bl	0 <lt__set_last_error>
 144:	mov	x0, x19
 148:	ldr	x19, [sp, #16]
 14c:	ldp	x29, x30, [sp], #32
 150:	ret

0000000000000154 <vl_exit>:
 154:	adrp	x8, 0 <dlopen_LTX_get_vtable>
 158:	mov	w0, wzr
 15c:	str	xzr, [x8]
 160:	ret
