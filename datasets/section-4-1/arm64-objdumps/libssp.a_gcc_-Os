In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libssp.a_gcc_-Os:

ssp.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fail>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x20, x2
  14:	mov	w1, #0x1                   	// #1
  18:	stp	x21, x22, [sp, #32]
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x24, x0
  24:	adrp	x0, 0 <fail>
  28:	add	x0, x0, #0x0
  2c:	str	x25, [sp, #64]
  30:	bl	0 <open>
  34:	cmn	w0, #0x1
  38:	b.eq	108 <fail+0x108>  // b.none
  3c:	mov	w22, w0
  40:	adrp	x0, 0 <__progname>
  44:	add	x20, x19, #0xd
  48:	ldr	x25, [x0]
  4c:	mov	x0, x25
  50:	bl	0 <strlen>
  54:	add	x20, x20, x0
  58:	mov	x21, x0
  5c:	add	x0, x20, #0xf
  60:	mov	x2, x19
  64:	and	x0, x0, #0xfffffffffffffff0
  68:	mov	x1, x24
  6c:	sub	sp, sp, x0
  70:	mov	x23, sp
  74:	add	x19, x23, x19
  78:	mov	x0, x23
  7c:	bl	0 <memcpy>
  80:	mov	x2, x21
  84:	mov	x1, x25
  88:	mov	x0, x19
  8c:	bl	0 <memcpy>
  90:	adrp	x0, 0 <fail>
  94:	add	x0, x0, #0x0
  98:	add	x1, x19, x21
  9c:	ldr	x2, [x0]
  a0:	str	x2, [x19, x21]
  a4:	ldur	x0, [x0, #5]
  a8:	stur	x0, [x1, #5]
  ac:	mov	x2, x20
  b0:	mov	x1, x23
  b4:	mov	w0, w22
  b8:	bl	0 <write>
  bc:	tbnz	x0, #63, cc <fail+0xcc>
  c0:	add	x23, x23, x0
  c4:	subs	x20, x20, x0
  c8:	b.ne	ac <fail+0xac>  // b.any
  cc:	mov	w0, w22
  d0:	bl	0 <close>
  d4:	mov	x1, #0xffffffffffffffff    	// #-1
  d8:	str	wzr, [x29, #92]
  dc:	ldr	w0, [x29, #92]
  e0:	cmp	w0, #0x2
  e4:	b.eq	12c <fail+0x12c>  // b.none
  e8:	b.gt	f8 <fail+0xf8>
  ec:	cbz	w0, 120 <fail+0x120>
  f0:	cmp	w0, #0x1
  f4:	b.eq	124 <fail+0x124>  // b.none
  f8:	ldr	w0, [x29, #92]
  fc:	add	w0, w0, #0x1
 100:	str	w0, [x29, #92]
 104:	b	dc <fail+0xdc>
 108:	mov	x2, x20
 10c:	adrp	x1, 0 <fail>
 110:	mov	w0, #0x2                   	// #2
 114:	add	x1, x1, #0x0
 118:	bl	0 <syslog>
 11c:	b	d4 <fail+0xd4>
 120:	brk	#0x3e8
 124:	str	wzr, [x1]
 128:	b	f8 <fail+0xf8>
 12c:	mov	w0, #0x7f                  	// #127
 130:	bl	0 <_exit>

0000000000000134 <__stack_chk_fail>:
 134:	stp	x29, x30, [sp, #-16]!
 138:	adrp	x2, 0 <fail>
 13c:	adrp	x0, 0 <fail>
 140:	mov	x29, sp
 144:	add	x2, x2, #0x0
 148:	add	x0, x0, #0x0
 14c:	mov	x1, #0x21                  	// #33
 150:	bl	0 <fail>

0000000000000154 <__chk_fail>:
 154:	stp	x29, x30, [sp, #-16]!
 158:	adrp	x2, 0 <fail>
 15c:	adrp	x0, 0 <fail>
 160:	mov	x29, sp
 164:	add	x2, x2, #0x0
 168:	add	x0, x0, #0x0
 16c:	mov	x1, #0x22                  	// #34
 170:	bl	0 <fail>

0000000000000174 <__stack_chk_fail_local>:
 174:	stp	x29, x30, [sp, #-16]!
 178:	mov	x29, sp
 17c:	bl	134 <__stack_chk_fail>

Disassembly of section .text.startup:

0000000000000000 <__guard_setup>:
   0:	adrp	x0, 0 <__guard_setup>
   4:	ldr	x1, [x0]
   8:	cbnz	x1, 84 <__guard_setup+0x84>
   c:	stp	x29, x30, [sp, #-48]!
  10:	mov	x29, sp
  14:	stp	x19, x20, [sp, #16]
  18:	mov	x19, x0
  1c:	stp	x21, x22, [sp, #32]
  20:	add	x22, x0, #0x0
  24:	adrp	x0, 0 <__guard_setup>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <open>
  30:	mov	w20, w0
  34:	cmn	w0, #0x1
  38:	b.ne	58 <__guard_setup+0x58>  // b.any
  3c:	mov	w0, #0xffffff0a            	// #-246
  40:	strb	wzr, [x19]
  44:	strh	w0, [x22, #6]
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #48
  54:	ret
  58:	mov	x1, x22
  5c:	mov	x2, #0x8                   	// #8
  60:	bl	0 <read>
  64:	mov	x21, x0
  68:	mov	w0, w20
  6c:	bl	0 <close>
  70:	cmp	x21, #0x8
  74:	b.ne	3c <__guard_setup+0x3c>  // b.any
  78:	ldr	x0, [x19]
  7c:	cbnz	x0, 48 <__guard_setup+0x48>
  80:	b	3c <__guard_setup+0x3c>
  84:	ret

gets-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__gets_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x21, x1
  14:	mov	x1, #0x7ffffffe            	// #2147483646
  18:	cmp	x21, x1
  1c:	b.ls	40 <__gets_chk+0x40>  // b.plast
  20:	bl	0 <gets>
  24:	mov	x19, x0
  28:	mov	sp, x29
  2c:	mov	x0, x19
  30:	ldp	x19, x20, [sp, #16]
  34:	ldp	x21, x22, [sp, #32]
  38:	ldp	x29, x30, [sp], #48
  3c:	ret
  40:	mov	x22, x0
  44:	cmp	x21, #0x2, lsl #12
  48:	add	x0, x21, #0x1
  4c:	b.hi	a8 <__gets_chk+0xa8>  // b.pmore
  50:	add	x0, x21, #0x10
  54:	and	x0, x0, #0xfffffffffffffff0
  58:	sub	sp, sp, x0
  5c:	mov	x20, sp
  60:	adrp	x0, 0 <stdin>
  64:	add	w1, w21, #0x1
  68:	ldr	x2, [x0]
  6c:	mov	x0, x20
  70:	bl	0 <fgets>
  74:	mov	x19, x0
  78:	cbz	x0, d4 <__gets_chk+0xd4>
  7c:	mov	x0, x20
  80:	bl	0 <strlen>
  84:	mov	x19, x0
  88:	cbz	x0, 9c <__gets_chk+0x9c>
  8c:	sub	x0, x0, #0x1
  90:	ldrb	w1, [x20, x0]
  94:	cmp	w1, #0xa
  98:	csel	x19, x19, x0, ne  // ne = any
  9c:	cmp	x19, x21
  a0:	b.ne	bc <__gets_chk+0xbc>  // b.any
  a4:	bl	0 <__chk_fail>
  a8:	bl	0 <malloc>
  ac:	mov	x20, x0
  b0:	cbnz	x0, 60 <__gets_chk+0x60>
  b4:	mov	x0, x22
  b8:	b	20 <__gets_chk+0x20>
  bc:	mov	x2, x19
  c0:	mov	x1, x20
  c4:	mov	x0, x22
  c8:	bl	0 <memcpy>
  cc:	strb	wzr, [x22, x19]
  d0:	mov	x19, x22
  d4:	cmp	x21, #0x2, lsl #12
  d8:	b.ls	28 <__gets_chk+0x28>  // b.plast
  dc:	mov	x0, x20
  e0:	bl	0 <free>
  e4:	b	28 <__gets_chk+0x28>

memcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memcpy_chk>:
   0:	cmp	x2, x3
   4:	b.ls	14 <__memcpy_chk+0x14>  // b.plast
   8:	stp	x29, x30, [sp, #-16]!
   c:	mov	x29, sp
  10:	bl	0 <__chk_fail>
  14:	b	0 <memcpy>

memmove-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memmove_chk>:
   0:	cmp	x2, x3
   4:	b.ls	14 <__memmove_chk+0x14>  // b.plast
   8:	stp	x29, x30, [sp, #-16]!
   c:	mov	x29, sp
  10:	bl	0 <__chk_fail>
  14:	b	0 <memmove>

mempcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mempcpy_chk>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	x2, x3
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	b.ls	18 <__mempcpy_chk+0x18>  // b.plast
  14:	bl	0 <__chk_fail>
  18:	mov	x19, x2
  1c:	bl	0 <memcpy>
  20:	add	x0, x0, x19
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	ret

memset-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memset_chk>:
   0:	cmp	x2, x3
   4:	b.ls	14 <__memset_chk+0x14>  // b.plast
   8:	stp	x29, x30, [sp, #-16]!
   c:	mov	x29, sp
  10:	bl	0 <__chk_fail>
  14:	b	0 <memset>

snprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__snprintf_chk>:
   0:	stp	x29, x30, [sp, #-240]!
   4:	cmp	x1, x3
   8:	mov	x29, sp
   c:	str	q0, [sp, #80]
  10:	str	q1, [sp, #96]
  14:	str	q2, [sp, #112]
  18:	str	q3, [sp, #128]
  1c:	str	q4, [sp, #144]
  20:	str	q5, [sp, #160]
  24:	str	q6, [sp, #176]
  28:	str	q7, [sp, #192]
  2c:	stp	x5, x6, [sp, #216]
  30:	str	x7, [sp, #232]
  34:	b.ls	3c <__snprintf_chk+0x3c>  // b.plast
  38:	bl	0 <__chk_fail>
  3c:	add	x3, sp, #0xf0
  40:	stp	x3, x3, [sp, #48]
  44:	add	x3, sp, #0xd0
  48:	str	x3, [sp, #64]
  4c:	mov	w3, #0xffffffe8            	// #-24
  50:	str	w3, [sp, #72]
  54:	mov	w3, #0xffffff80            	// #-128
  58:	str	w3, [sp, #76]
  5c:	mov	x2, x4
  60:	ldp	x4, x5, [sp, #48]
  64:	stp	x4, x5, [sp, #16]
  68:	add	x3, sp, #0x10
  6c:	ldp	x4, x5, [sp, #64]
  70:	stp	x4, x5, [sp, #32]
  74:	bl	0 <vsnprintf>
  78:	ldp	x29, x30, [sp], #240
  7c:	ret

sprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sprintf_chk>:
   0:	stp	x29, x30, [sp, #-256]!
   4:	mov	x1, x3
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	mov	x19, x2
  14:	add	x2, sp, #0x100
  18:	stp	x2, x2, [sp, #64]
  1c:	add	x2, sp, #0xe0
  20:	str	x2, [sp, #80]
  24:	mov	w2, #0xffffffe0            	// #-32
  28:	str	w2, [sp, #88]
  2c:	mov	w2, #0xffffff80            	// #-128
  30:	str	w2, [sp, #92]
  34:	mov	x2, #0x7fffffff            	// #2147483647
  38:	cmp	x19, x2
  3c:	stp	x4, x5, [sp, #224]
  40:	ldp	x4, x5, [sp, #64]
  44:	stp	x4, x5, [sp, #32]
  48:	ldp	x2, x3, [sp, #80]
  4c:	stp	x2, x3, [sp, #48]
  50:	str	q0, [sp, #96]
  54:	str	q1, [sp, #112]
  58:	str	q2, [sp, #128]
  5c:	str	q3, [sp, #144]
  60:	str	q4, [sp, #160]
  64:	str	q5, [sp, #176]
  68:	str	q6, [sp, #192]
  6c:	str	q7, [sp, #208]
  70:	stp	x6, x7, [sp, #240]
  74:	b.ls	8c <__sprintf_chk+0x8c>  // b.plast
  78:	add	x2, sp, #0x20
  7c:	bl	0 <vsprintf>
  80:	ldr	x19, [sp, #16]
  84:	ldp	x29, x30, [sp], #256
  88:	ret
  8c:	mov	x2, x1
  90:	add	x3, sp, #0x20
  94:	mov	x1, x19
  98:	bl	0 <vsnprintf>
  9c:	tbnz	w0, #31, 80 <__sprintf_chk+0x80>
  a0:	cmp	x19, w0, sxtw
  a4:	b.hi	80 <__sprintf_chk+0x80>  // b.pmore
  a8:	bl	0 <__chk_fail>

stpcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__stpcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x22, x2
  10:	mov	x21, x0
  14:	mov	x0, x1
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x20, x1
  20:	bl	0 <strlen>
  24:	cmp	x0, x22
  28:	b.cc	30 <__stpcpy_chk+0x30>  // b.lo, b.ul, b.last
  2c:	bl	0 <__chk_fail>
  30:	mov	x19, x0
  34:	add	x2, x0, #0x1
  38:	mov	x1, x20
  3c:	mov	x0, x21
  40:	bl	0 <memcpy>
  44:	add	x0, x0, x19
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #48
  54:	ret

strcat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcat_chk>:
   0:	sub	x7, x0, #0x1
   4:	mov	x3, #0x0                   	// #0
   8:	add	x4, x0, x3
   c:	subs	x5, x2, x3
  10:	b.ne	20 <__strcat_chk+0x20>  // b.any
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <__chk_fail>
  20:	add	x3, x3, #0x1
  24:	ldrb	w6, [x7, x3]
  28:	cbnz	w6, 8 <__strcat_chk+0x8>
  2c:	mov	x2, #0x0                   	// #0
  30:	cmp	x2, x5
  34:	b.eq	14 <__strcat_chk+0x14>  // b.none
  38:	ldrb	w3, [x1, x2]
  3c:	strb	w3, [x4, x2]
  40:	add	x2, x2, #0x1
  44:	cbnz	w3, 30 <__strcat_chk+0x30>
  48:	ret

strcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x21, [sp, #32]
   c:	mov	x21, x2
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x20, x0
  18:	mov	x19, x1
  1c:	mov	x0, x1
  20:	bl	0 <strlen>
  24:	cmp	x0, x21
  28:	b.cc	30 <__strcpy_chk+0x30>  // b.lo, b.ul, b.last
  2c:	bl	0 <__chk_fail>
  30:	add	x2, x0, #0x1
  34:	mov	x1, x19
  38:	mov	x0, x20
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldr	x21, [sp, #32]
  44:	ldp	x29, x30, [sp], #48
  48:	b	0 <memcpy>

strncat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncat_chk>:
   0:	sub	x8, x0, #0x1
   4:	mov	x7, #0x0                   	// #0
   8:	sub	x5, x3, x7
   c:	add	x4, x0, x7
  10:	cmp	x3, x7
  14:	b.ne	24 <__strncat_chk+0x24>  // b.any
  18:	stp	x29, x30, [sp, #-16]!
  1c:	mov	x29, sp
  20:	bl	0 <__chk_fail>
  24:	add	x7, x7, #0x1
  28:	ldrb	w6, [x8, x7]
  2c:	cbnz	w6, 8 <__strncat_chk+0x8>
  30:	sub	x3, x4, #0x1
  34:	cmp	x2, #0x3
  38:	b.ls	a4 <__strncat_chk+0xa4>  // b.plast
  3c:	and	x7, x2, #0xfffffffffffffffc
  40:	add	x7, x1, x7
  44:	ldrb	w4, [x1]
  48:	strb	w4, [x3, #1]
  4c:	cbz	w4, e8 <__strncat_chk+0xe8>
  50:	cmp	x5, #0x1
  54:	b.eq	18 <__strncat_chk+0x18>  // b.none
  58:	ldrb	w4, [x1, #1]
  5c:	strb	w4, [x3, #2]
  60:	cbz	w4, e8 <__strncat_chk+0xe8>
  64:	cmp	x5, #0x2
  68:	b.eq	18 <__strncat_chk+0x18>  // b.none
  6c:	ldrb	w4, [x1, #2]
  70:	strb	w4, [x3, #3]
  74:	cbz	w4, e8 <__strncat_chk+0xe8>
  78:	sub	x4, x5, #0x4
  7c:	cmp	x5, #0x3
  80:	b.eq	18 <__strncat_chk+0x18>  // b.none
  84:	ldrb	w6, [x1, #3]
  88:	add	x1, x1, #0x4
  8c:	strb	w6, [x3, #4]!
  90:	cbz	w6, e8 <__strncat_chk+0xe8>
  94:	cmp	x1, x7
  98:	b.ne	c4 <__strncat_chk+0xc4>  // b.any
  9c:	and	x2, x2, #0x3
  a0:	mov	x5, x4
  a4:	mov	x4, #0x0                   	// #0
  a8:	cmp	x4, x2
  ac:	b.ne	d0 <__strncat_chk+0xd0>  // b.any
  b0:	cbz	w6, e8 <__strncat_chk+0xe8>
  b4:	cmp	x4, x5
  b8:	b.eq	18 <__strncat_chk+0x18>  // b.none
  bc:	strb	wzr, [x3, #1]
  c0:	b	e8 <__strncat_chk+0xe8>
  c4:	cbz	x4, 18 <__strncat_chk+0x18>
  c8:	mov	x5, x4
  cc:	b	44 <__strncat_chk+0x44>
  d0:	cmp	x4, x5
  d4:	b.eq	18 <__strncat_chk+0x18>  // b.none
  d8:	ldrb	w6, [x1, x4]
  dc:	add	x4, x4, #0x1
  e0:	strb	w6, [x3, #1]!
  e4:	cbnz	w6, a8 <__strncat_chk+0xa8>
  e8:	ret

strncpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncpy_chk>:
   0:	cmp	x2, x3
   4:	b.ls	14 <__strncpy_chk+0x14>  // b.plast
   8:	stp	x29, x30, [sp, #-16]!
   c:	mov	x29, sp
  10:	bl	0 <__chk_fail>
  14:	b	0 <strncpy>

vsnprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsnprintf_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	cmp	x1, x3
   8:	mov	x29, sp
   c:	b.ls	14 <__vsnprintf_chk+0x14>  // b.plast
  10:	bl	0 <__chk_fail>
  14:	ldp	x6, x7, [x5]
  18:	stp	x6, x7, [sp, #16]
  1c:	mov	x2, x4
  20:	ldp	x4, x5, [x5, #16]
  24:	add	x3, sp, #0x10
  28:	stp	x4, x5, [sp, #32]
  2c:	bl	0 <vsnprintf>
  30:	ldp	x29, x30, [sp], #48
  34:	ret

vsprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsprintf_chk>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x1, x3
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	mov	x19, x2
  14:	mov	x2, #0x7fffffff            	// #2147483647
  18:	cmp	x19, x2
  1c:	ldp	x6, x7, [x4]
  20:	stp	x6, x7, [sp, #32]
  24:	ldp	x2, x3, [x4, #16]
  28:	stp	x2, x3, [sp, #48]
  2c:	b.ls	44 <__vsprintf_chk+0x44>  // b.plast
  30:	add	x2, sp, #0x20
  34:	bl	0 <vsprintf>
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #64
  40:	ret
  44:	mov	x2, x1
  48:	add	x3, sp, #0x20
  4c:	mov	x1, x19
  50:	bl	0 <vsnprintf>
  54:	tbnz	w0, #31, 38 <__vsprintf_chk+0x38>
  58:	cmp	x19, w0, sxtw
  5c:	b.hi	38 <__vsprintf_chk+0x38>  // b.pmore
  60:	bl	0 <__chk_fail>
