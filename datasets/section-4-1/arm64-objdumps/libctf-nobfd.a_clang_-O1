In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libctf-nobfd.a_clang_-O1:

ctf-archive.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_arc_write_fd>:
   0:	sub	sp, sp, #0x80
   4:	stp	x20, x19, [sp, #112]
   8:	mov	w20, w0
   c:	adrp	x0, 0 <ctf_arc_write_fd>
  10:	stp	x29, x30, [sp, #32]
  14:	stp	x24, x23, [sp, #80]
  18:	add	x29, sp, #0x20
  1c:	mov	x24, x1
  20:	add	x0, x0, #0x0
  24:	mov	x1, x2
  28:	stp	x28, x27, [sp, #48]
  2c:	stp	x26, x25, [sp, #64]
  30:	stp	x22, x21, [sp, #96]
  34:	mov	x22, x4
  38:	mov	x23, x3
  3c:	mov	x25, x2
  40:	sturb	wzr, [x29, #-12]
  44:	bl	0 <ctf_dprintf>
  48:	lsl	x19, x25, #4
  4c:	add	x27, x19, #0x28
  50:	adrp	x0, 0 <ctf_arc_write_fd>
  54:	add	x0, x0, #0x0
  58:	mov	x1, x27
  5c:	bl	0 <ctf_dprintf>
  60:	add	x1, x19, #0x27
  64:	mov	w0, w20
  68:	mov	w2, wzr
  6c:	bl	0 <lseek>
  70:	tbnz	x0, #63, 120 <ctf_arc_write_fd+0x120>
  74:	sub	x1, x29, #0xc
  78:	mov	w2, #0x1                   	// #1
  7c:	mov	w0, w20
  80:	bl	0 <write>
  84:	tbnz	x0, #63, 120 <ctf_arc_write_fd+0x120>
  88:	mov	w0, w20
  8c:	mov	x1, x27
  90:	bl	380 <arc_mmap_header>
  94:	cbz	x0, 130 <ctf_arc_write_fd+0x130>
  98:	mov	x8, #0x3eeb                	// #16107
  9c:	movk	x8, #0xd762, lsl #16
  a0:	movk	x8, #0xf2a4, lsl #32
  a4:	movk	x8, #0x8b47, lsl #48
  a8:	mov	x21, x0
  ac:	str	x8, [x0]
  b0:	mov	x0, x25
  b4:	bl	3b0 <__uint64_identity>
  b8:	mov	x0, x27
  bc:	str	x25, [x21, #16]
  c0:	bl	3b0 <__uint64_identity>
  c4:	str	x27, [x21, #32]
  c8:	cbz	x25, e0 <ctf_arc_write_fd+0xe0>
  cc:	ldr	x0, [x24]
  d0:	bl	0 <ctf_getmodel>
  d4:	sxtw	x0, w0
  d8:	bl	3b0 <__uint64_identity>
  dc:	str	x0, [x21, #8]
  e0:	ldr	x0, [x21, #16]
  e4:	bl	3b0 <__uint64_identity>
  e8:	cbz	x0, 140 <ctf_arc_write_fd+0x140>
  ec:	ldr	x25, [x21, #16]
  f0:	mov	x0, x25
  f4:	bl	3b0 <__uint64_identity>
  f8:	mov	x19, xzr
  fc:	mov	x26, xzr
 100:	ldr	x0, [x23, x19, lsl #3]
 104:	bl	0 <strlen>
 108:	add	x8, x26, x0
 10c:	add	x19, x19, #0x1
 110:	cmp	x19, x25
 114:	add	x26, x8, #0x1
 118:	b.cc	100 <ctf_arc_write_fd+0x100>  // b.lo, b.ul, b.last
 11c:	b	144 <ctf_arc_write_fd+0x144>
 120:	adrp	x8, 0 <ctf_arc_write_fd>
 124:	add	x8, x8, #0x0
 128:	stur	x8, [x29, #-8]
 12c:	b	2f4 <ctf_arc_write_fd+0x2f4>
 130:	adrp	x8, 0 <ctf_arc_write_fd>
 134:	add	x8, x8, #0x0
 138:	stur	x8, [x29, #-8]
 13c:	b	2f4 <ctf_arc_write_fd+0x2f4>
 140:	mov	x26, xzr
 144:	mov	x0, x26
 148:	bl	0 <malloc>
 14c:	cbz	x0, 22c <ctf_arc_write_fd+0x22c>
 150:	ldr	x28, [x21, #16]
 154:	mov	x25, x0
 158:	add	x19, x21, #0x28
 15c:	mov	x0, x28
 160:	bl	3b0 <__uint64_identity>
 164:	cbz	x28, 23c <ctf_arc_write_fd+0x23c>
 168:	stp	x19, x27, [sp]
 16c:	mov	x27, xzr
 170:	mov	x26, xzr
 174:	lsl	x28, x27, #3
 178:	ldr	x1, [x23, x28]
 17c:	add	x0, x25, x26
 180:	bl	0 <strcpy>
 184:	ldr	x0, [x24, x28]
 188:	mov	w1, w20
 18c:	mov	x2, x22
 190:	bl	3b4 <arc_write_one_ctf>
 194:	cmn	x0, #0x3e7
 198:	b.cc	1b4 <ctf_arc_write_fd+0x1b4>  // b.lo, b.ul, b.last
 19c:	adrp	x8, 0 <ctf_arc_write_fd>
 1a0:	add	x8, x8, #0x0
 1a4:	stur	x8, [x29, #-8]
 1a8:	mov	w8, #0xa                   	// #10
 1ac:	cbz	w8, 20c <ctf_arc_write_fd+0x20c>
 1b0:	b	2c0 <ctf_arc_write_fd+0x2c0>
 1b4:	tbnz	x0, #63, 1ec <ctf_arc_write_fd+0x1ec>
 1b8:	ldr	x8, [sp, #8]
 1bc:	str	x26, [x19]
 1c0:	sub	x0, x0, x8
 1c4:	bl	3b0 <__uint64_identity>
 1c8:	str	x0, [x19, #8]
 1cc:	ldr	x0, [x23, x27, lsl #3]
 1d0:	bl	0 <strlen>
 1d4:	add	x9, x26, x0
 1d8:	mov	w8, wzr
 1dc:	add	x26, x9, #0x1
 1e0:	add	x19, x19, #0x10
 1e4:	cbz	w8, 20c <ctf_arc_write_fd+0x20c>
 1e8:	b	2c0 <ctf_arc_write_fd+0x2c0>
 1ec:	adrp	x8, 0 <ctf_arc_write_fd>
 1f0:	add	x8, x8, #0x0
 1f4:	stur	x8, [x29, #-8]
 1f8:	neg	w28, w0
 1fc:	bl	0 <__errno_location>
 200:	str	w28, [x0]
 204:	mov	w8, #0xa                   	// #10
 208:	cbnz	w8, 2c0 <ctf_arc_write_fd+0x2c0>
 20c:	ldr	x28, [x21, #16]
 210:	add	x27, x27, #0x1
 214:	mov	x0, x28
 218:	bl	3b0 <__uint64_identity>
 21c:	cmp	x27, x28
 220:	b.cc	174 <ctf_arc_write_fd+0x174>  // b.lo, b.ul, b.last
 224:	ldp	x19, x27, [sp]
 228:	b	240 <ctf_arc_write_fd+0x240>
 22c:	adrp	x8, 0 <ctf_arc_write_fd>
 230:	add	x8, x8, #0x0
 234:	stur	x8, [x29, #-8]
 238:	b	2e4 <ctf_arc_write_fd+0x2e4>
 23c:	mov	x26, xzr
 240:	mov	x0, x19
 244:	mov	x1, x28
 248:	mov	x2, x25
 24c:	bl	544 <ctf_qsort_r>
 250:	mov	w2, #0x1                   	// #1
 254:	mov	w0, w20
 258:	mov	x1, xzr
 25c:	bl	0 <lseek>
 260:	tbnz	x0, #63, 2d0 <ctf_arc_write_fd+0x2d0>
 264:	bl	3b0 <__uint64_identity>
 268:	adrp	x19, 0 <ctf_arc_write_fd>
 26c:	add	x19, x19, #0x0
 270:	mov	x22, x25
 274:	str	x0, [x21, #24]
 278:	b	288 <ctf_arc_write_fd+0x288>
 27c:	stur	x19, [x29, #-8]
 280:	mov	w8, #0xa                   	// #10
 284:	cbnz	w8, 2b4 <ctf_arc_write_fd+0x2b4>
 288:	cmp	x26, #0x1
 28c:	b.lt	348 <ctf_arc_write_fd+0x348>  // b.tstop
 290:	mov	w0, w20
 294:	mov	x1, x22
 298:	mov	x2, x26
 29c:	bl	0 <write>
 2a0:	tbnz	x0, #63, 27c <ctf_arc_write_fd+0x27c>
 2a4:	mov	w8, wzr
 2a8:	sub	x26, x26, x0
 2ac:	add	x22, x22, x0
 2b0:	cbz	w8, 288 <ctf_arc_write_fd+0x288>
 2b4:	cmp	w8, #0xa
 2b8:	b.ne	2cc <ctf_arc_write_fd+0x2cc>  // b.any
 2bc:	b	2dc <ctf_arc_write_fd+0x2dc>
 2c0:	ldr	x27, [sp, #8]
 2c4:	cmp	w8, #0xa
 2c8:	b.eq	2dc <ctf_arc_write_fd+0x2dc>  // b.none
 2cc:	b	328 <ctf_arc_write_fd+0x328>
 2d0:	adrp	x8, 0 <ctf_arc_write_fd>
 2d4:	add	x8, x8, #0x0
 2d8:	stur	x8, [x29, #-8]
 2dc:	mov	x0, x25
 2e0:	bl	0 <free>
 2e4:	mov	x0, x21
 2e8:	mov	x1, x27
 2ec:	mov	x2, xzr
 2f0:	bl	5f8 <arc_mmap_unmap>
 2f4:	ldur	x19, [x29, #-8]
 2f8:	bl	0 <__errno_location>
 2fc:	mov	x20, x0
 300:	ldr	w0, [x0]
 304:	cmp	w0, #0x3e7
 308:	b.gt	314 <ctf_arc_write_fd+0x314>
 30c:	bl	0 <strerror>
 310:	b	318 <ctf_arc_write_fd+0x318>
 314:	bl	0 <ctf_errmsg>
 318:	mov	x1, x0
 31c:	mov	x0, x19
 320:	bl	0 <ctf_dprintf>
 324:	ldr	w0, [x20]
 328:	ldp	x20, x19, [sp, #112]
 32c:	ldp	x22, x21, [sp, #96]
 330:	ldp	x24, x23, [sp, #80]
 334:	ldp	x26, x25, [sp, #64]
 338:	ldp	x28, x27, [sp, #48]
 33c:	ldp	x29, x30, [sp, #32]
 340:	add	sp, sp, #0x80
 344:	ret
 348:	mov	x0, x25
 34c:	bl	0 <free>
 350:	sub	x2, x29, #0x8
 354:	mov	x0, x21
 358:	mov	x1, x27
 35c:	bl	5b4 <arc_mmap_writeout>
 360:	tbnz	w0, #31, 2e4 <ctf_arc_write_fd+0x2e4>
 364:	sub	x2, x29, #0x8
 368:	mov	x0, x21
 36c:	mov	x1, x27
 370:	bl	5f8 <arc_mmap_unmap>
 374:	tbnz	w0, #31, 2f4 <ctf_arc_write_fd+0x2f4>
 378:	mov	w0, wzr
 37c:	b	328 <ctf_arc_write_fd+0x328>

0000000000000380 <arc_mmap_header>:
 380:	stp	x29, x30, [sp, #-16]!
 384:	mov	w4, w0
 388:	mov	w2, #0x3                   	// #3
 38c:	mov	w3, #0x1                   	// #1
 390:	mov	x0, xzr
 394:	mov	x5, xzr
 398:	mov	x29, sp
 39c:	bl	0 <mmap>
 3a0:	cmn	x0, #0x1
 3a4:	csel	x0, xzr, x0, eq  // eq = none
 3a8:	ldp	x29, x30, [sp], #16
 3ac:	ret

00000000000003b0 <__uint64_identity>:
 3b0:	ret

00000000000003b4 <arc_write_one_ctf>:
 3b4:	sub	sp, sp, #0x60
 3b8:	stp	x29, x30, [sp, #16]
 3bc:	stp	x26, x25, [sp, #32]
 3c0:	stp	x24, x23, [sp, #48]
 3c4:	stp	x22, x21, [sp, #64]
 3c8:	stp	x20, x19, [sp, #80]
 3cc:	add	x29, sp, #0x10
 3d0:	mov	x21, x2
 3d4:	mov	w19, w1
 3d8:	mov	x22, x0
 3dc:	str	xzr, [sp, #8]
 3e0:	bl	0 <ctf_serialize>
 3e4:	tbnz	w0, #31, 474 <arc_write_one_ctf+0xc0>
 3e8:	mov	w2, #0x1                   	// #1
 3ec:	mov	w0, w19
 3f0:	mov	x1, xzr
 3f4:	bl	0 <lseek>
 3f8:	tbnz	x0, #63, 518 <arc_write_one_ctf+0x164>
 3fc:	ldr	x8, [x22, #416]
 400:	adrp	x9, 0 <ctf_write>
 404:	adrp	x10, 0 <ctf_compress_write>
 408:	add	x9, x9, #0x0
 40c:	add	x10, x10, #0x0
 410:	cmp	x8, x21
 414:	mov	x20, x0
 418:	add	x23, sp, #0x8
 41c:	mov	w24, #0x8                   	// #8
 420:	csel	x25, x10, x9, hi  // hi = pmore
 424:	mov	w26, #0x1                   	// #1
 428:	b	43c <arc_write_one_ctf+0x88>
 42c:	bl	0 <__errno_location>
 430:	ldrsw	x8, [x0]
 434:	neg	x21, x8
 438:	tbz	wzr, #0, 524 <arc_write_one_ctf+0x170>
 43c:	cbz	x24, 464 <arc_write_one_ctf+0xb0>
 440:	mov	w0, w19
 444:	mov	x1, x23
 448:	mov	x2, x24
 44c:	bl	0 <write>
 450:	tbnz	x0, #63, 42c <arc_write_one_ctf+0x78>
 454:	sub	x24, x24, x0
 458:	add	x23, x23, x0
 45c:	tbnz	w26, #0, 43c <arc_write_one_ctf+0x88>
 460:	b	524 <arc_write_one_ctf+0x170>
 464:	mov	x0, x22
 468:	mov	w1, w19
 46c:	blr	x25
 470:	cbz	w0, 47c <arc_write_one_ctf+0xc8>
 474:	ldrsw	x8, [x22, #556]
 478:	b	520 <arc_write_one_ctf+0x16c>
 47c:	mov	w2, #0x1                   	// #1
 480:	mov	w0, w19
 484:	mov	x1, xzr
 488:	bl	0 <lseek>
 48c:	tbnz	x0, #63, 518 <arc_write_one_ctf+0x164>
 490:	mov	x22, x0
 494:	sub	x0, x0, x20
 498:	bl	3b0 <__uint64_identity>
 49c:	str	x0, [sp, #8]
 4a0:	mov	w0, w19
 4a4:	mov	x1, x20
 4a8:	mov	w2, wzr
 4ac:	bl	0 <lseek>
 4b0:	tbnz	x0, #63, 518 <arc_write_one_ctf+0x164>
 4b4:	add	x23, sp, #0x8
 4b8:	mov	w24, #0x8                   	// #8
 4bc:	mov	w25, #0x1                   	// #1
 4c0:	b	4d4 <arc_write_one_ctf+0x120>
 4c4:	bl	0 <__errno_location>
 4c8:	ldrsw	x8, [x0]
 4cc:	neg	x21, x8
 4d0:	tbz	wzr, #0, 524 <arc_write_one_ctf+0x170>
 4d4:	cbz	x24, 4fc <arc_write_one_ctf+0x148>
 4d8:	mov	w0, w19
 4dc:	mov	x1, x23
 4e0:	mov	x2, x24
 4e4:	bl	0 <write>
 4e8:	tbnz	x0, #63, 4c4 <arc_write_one_ctf+0x110>
 4ec:	sub	x24, x24, x0
 4f0:	add	x23, x23, x0
 4f4:	tbnz	w25, #0, 4d4 <arc_write_one_ctf+0x120>
 4f8:	b	524 <arc_write_one_ctf+0x170>
 4fc:	add	x8, x22, #0x7
 500:	and	x1, x8, #0xfffffffffffffff8
 504:	mov	w0, w19
 508:	mov	w2, wzr
 50c:	bl	0 <lseek>
 510:	mov	x21, x20
 514:	tbz	x0, #63, 524 <arc_write_one_ctf+0x170>
 518:	bl	0 <__errno_location>
 51c:	ldrsw	x8, [x0]
 520:	neg	x21, x8
 524:	mov	x0, x21
 528:	ldp	x20, x19, [sp, #80]
 52c:	ldp	x22, x21, [sp, #64]
 530:	ldp	x24, x23, [sp, #48]
 534:	ldp	x26, x25, [sp, #32]
 538:	ldp	x29, x30, [sp, #16]
 53c:	add	sp, sp, #0x60
 540:	ret

0000000000000544 <ctf_qsort_r>:
 544:	stp	x29, x30, [sp, #-16]!
 548:	adrp	x3, 0 <ctf_arc_write_fd>
 54c:	mov	x4, x2
 550:	add	x3, x3, #0x0
 554:	mov	w2, #0x10                  	// #16
 558:	mov	x29, sp
 55c:	bl	0 <qsort_r>
 560:	ldp	x29, x30, [sp], #16
 564:	ret

0000000000000568 <sort_modent_by_name>:
 568:	stp	x29, x30, [sp, #-48]!
 56c:	stp	x20, x19, [sp, #32]
 570:	ldr	x0, [x0]
 574:	str	x21, [sp, #16]
 578:	mov	x29, sp
 57c:	mov	x19, x2
 580:	mov	x20, x1
 584:	bl	3b0 <__uint64_identity>
 588:	ldr	x20, [x20]
 58c:	add	x21, x19, x0
 590:	mov	x0, x20
 594:	bl	3b0 <__uint64_identity>
 598:	add	x1, x19, x20
 59c:	mov	x0, x21
 5a0:	bl	0 <strcmp>
 5a4:	ldp	x20, x19, [sp, #32]
 5a8:	ldr	x21, [sp, #16]
 5ac:	ldp	x29, x30, [sp], #48
 5b0:	ret

00000000000005b4 <arc_mmap_writeout>:
 5b4:	stp	x29, x30, [sp, #-32]!
 5b8:	str	x19, [sp, #16]
 5bc:	mov	x19, x2
 5c0:	mov	w2, #0x1                   	// #1
 5c4:	mov	x29, sp
 5c8:	bl	0 <msync>
 5cc:	tbnz	w0, #31, 5d8 <arc_mmap_writeout+0x24>
 5d0:	mov	w0, wzr
 5d4:	b	5ec <arc_mmap_writeout+0x38>
 5d8:	cbz	x19, 5e8 <arc_mmap_writeout+0x34>
 5dc:	adrp	x8, 0 <ctf_arc_write_fd>
 5e0:	add	x8, x8, #0x0
 5e4:	str	x8, [x19]
 5e8:	mov	w0, #0xffffffff            	// #-1
 5ec:	ldr	x19, [sp, #16]
 5f0:	ldp	x29, x30, [sp], #32
 5f4:	ret

00000000000005f8 <arc_mmap_unmap>:
 5f8:	stp	x29, x30, [sp, #-32]!
 5fc:	str	x19, [sp, #16]
 600:	mov	x29, sp
 604:	mov	x19, x2
 608:	bl	0 <munmap>
 60c:	tbnz	w0, #31, 618 <arc_mmap_unmap+0x20>
 610:	mov	w0, wzr
 614:	b	62c <arc_mmap_unmap+0x34>
 618:	cbz	x19, 628 <arc_mmap_unmap+0x30>
 61c:	adrp	x8, 0 <ctf_arc_write_fd>
 620:	add	x8, x8, #0x0
 624:	str	x8, [x19]
 628:	mov	w0, #0xffffffff            	// #-1
 62c:	ldr	x19, [sp, #16]
 630:	ldp	x29, x30, [sp], #32
 634:	ret

0000000000000638 <ctf_arc_write>:
 638:	stp	x29, x30, [sp, #-64]!
 63c:	stp	x24, x23, [sp, #16]
 640:	mov	x24, x1
 644:	mov	w1, #0x242                 	// #578
 648:	mov	x23, x2
 64c:	movk	w1, #0x8, lsl #16
 650:	mov	w2, #0x1b6                 	// #438
 654:	stp	x22, x21, [sp, #32]
 658:	stp	x20, x19, [sp, #48]
 65c:	mov	x29, sp
 660:	mov	x20, x4
 664:	mov	x22, x3
 668:	mov	x19, x0
 66c:	bl	0 <open>
 670:	tbnz	w0, #31, 6b4 <ctf_arc_write+0x7c>
 674:	mov	x1, x24
 678:	mov	x2, x23
 67c:	mov	x3, x22
 680:	mov	x4, x20
 684:	mov	w21, w0
 688:	bl	0 <ctf_arc_write_fd>
 68c:	mov	w20, w0
 690:	cbnz	w0, 6a4 <ctf_arc_write+0x6c>
 694:	mov	w0, w21
 698:	bl	0 <close>
 69c:	mov	w20, w0
 6a0:	tbnz	w0, #31, 6e0 <ctf_arc_write+0xa8>
 6a4:	mov	w0, w21
 6a8:	bl	0 <close>
 6ac:	tbz	w20, #31, 704 <ctf_arc_write+0xcc>
 6b0:	b	6fc <ctf_arc_write+0xc4>
 6b4:	bl	0 <__errno_location>
 6b8:	mov	x20, x0
 6bc:	ldr	w0, [x0]
 6c0:	bl	0 <strerror>
 6c4:	mov	x2, x0
 6c8:	adrp	x0, 0 <ctf_arc_write_fd>
 6cc:	add	x0, x0, #0x0
 6d0:	mov	x1, x19
 6d4:	bl	0 <ctf_dprintf>
 6d8:	ldr	w20, [x20]
 6dc:	b	704 <ctf_arc_write+0xcc>
 6e0:	bl	0 <__errno_location>
 6e4:	ldr	w0, [x0]
 6e8:	bl	0 <strerror>
 6ec:	mov	x1, x0
 6f0:	adrp	x0, 0 <ctf_arc_write_fd>
 6f4:	add	x0, x0, #0x0
 6f8:	bl	0 <ctf_dprintf>
 6fc:	mov	x0, x19
 700:	bl	0 <unlink>
 704:	mov	w0, w20
 708:	ldp	x20, x19, [sp, #48]
 70c:	ldp	x22, x21, [sp, #32]
 710:	ldp	x24, x23, [sp, #16]
 714:	ldp	x29, x30, [sp], #64
 718:	ret

000000000000071c <ctf_arc_bufopen>:
 71c:	stp	x29, x30, [sp, #-32]!
 720:	stp	x20, x19, [sp, #16]
 724:	mov	x19, x0
 728:	ldr	x0, [x0]
 72c:	mov	x29, sp
 730:	mov	x20, x2
 734:	bl	3b0 <__uint64_identity>
 738:	mov	x8, #0x3eeb                	// #16107
 73c:	movk	x8, #0xd762, lsl #16
 740:	movk	x8, #0xf2a4, lsl #32
 744:	movk	x8, #0x8b47, lsl #48
 748:	cmp	x0, x8
 74c:	b.eq	760 <ctf_arc_bufopen+0x44>  // b.none
 750:	mov	x19, xzr
 754:	cbz	x20, 760 <ctf_arc_bufopen+0x44>
 758:	mov	w8, #0x3e8                 	// #1000
 75c:	str	w8, [x20]
 760:	mov	x0, x19
 764:	ldp	x20, x19, [sp, #16]
 768:	ldp	x29, x30, [sp], #32
 76c:	ret

0000000000000770 <ctf_arc_open_internal>:
 770:	sub	sp, sp, #0xb0
 774:	stp	x29, x30, [sp, #128]
 778:	stp	x22, x21, [sp, #144]
 77c:	stp	x20, x19, [sp, #160]
 780:	add	x29, sp, #0x80
 784:	mov	x20, x1
 788:	mov	x19, x0
 78c:	bl	0 <libctf_init_debug>
 790:	mov	x0, x19
 794:	mov	w1, wzr
 798:	bl	0 <open>
 79c:	tbnz	w0, #31, 7f8 <ctf_arc_open_internal+0x88>
 7a0:	mov	x1, sp
 7a4:	mov	w21, w0
 7a8:	bl	0 <fstat>
 7ac:	tbnz	w0, #31, 808 <ctf_arc_open_internal+0x98>
 7b0:	ldr	x1, [sp, #48]
 7b4:	mov	w0, w21
 7b8:	bl	8a4 <arc_mmap_file>
 7bc:	cbz	x0, 814 <ctf_arc_open_internal+0xa4>
 7c0:	mov	x22, x0
 7c4:	ldr	x0, [x0]
 7c8:	bl	3b0 <__uint64_identity>
 7cc:	mov	x8, #0x3eeb                	// #16107
 7d0:	movk	x8, #0xd762, lsl #16
 7d4:	movk	x8, #0xf2a4, lsl #32
 7d8:	movk	x8, #0x8b47, lsl #48
 7dc:	cmp	x0, x8
 7e0:	b.ne	820 <ctf_arc_open_internal+0xb0>  // b.any
 7e4:	ldr	x8, [sp, #48]
 7e8:	mov	w0, w21
 7ec:	str	x8, [x22]
 7f0:	bl	0 <close>
 7f4:	b	88c <ctf_arc_open_internal+0x11c>
 7f8:	adrp	x22, 0 <ctf_arc_write_fd>
 7fc:	add	x22, x22, #0x0
 800:	cbnz	x20, 850 <ctf_arc_open_internal+0xe0>
 804:	b	85c <ctf_arc_open_internal+0xec>
 808:	adrp	x22, 0 <ctf_arc_write_fd>
 80c:	add	x22, x22, #0x0
 810:	b	844 <ctf_arc_open_internal+0xd4>
 814:	adrp	x22, 0 <ctf_arc_write_fd>
 818:	add	x22, x22, #0x0
 81c:	b	844 <ctf_arc_open_internal+0xd4>
 820:	bl	0 <__errno_location>
 824:	mov	w8, #0x3e8                 	// #1000
 828:	str	w8, [x0]
 82c:	ldr	x1, [sp, #48]
 830:	mov	x0, x22
 834:	mov	x2, xzr
 838:	bl	5f8 <arc_mmap_unmap>
 83c:	adrp	x22, 0 <ctf_arc_write_fd>
 840:	add	x22, x22, #0x0
 844:	mov	w0, w21
 848:	bl	0 <close>
 84c:	cbz	x20, 85c <ctf_arc_open_internal+0xec>
 850:	bl	0 <__errno_location>
 854:	ldr	w8, [x0]
 858:	str	w8, [x20]
 85c:	bl	0 <__errno_location>
 860:	ldr	w0, [x0]
 864:	cmp	w0, #0x3e7
 868:	b.gt	874 <ctf_arc_open_internal+0x104>
 86c:	bl	0 <strerror>
 870:	b	878 <ctf_arc_open_internal+0x108>
 874:	bl	0 <ctf_errmsg>
 878:	mov	x2, x0
 87c:	mov	x0, x22
 880:	mov	x1, x19
 884:	bl	0 <ctf_dprintf>
 888:	mov	x22, xzr
 88c:	mov	x0, x22
 890:	ldp	x20, x19, [sp, #160]
 894:	ldp	x22, x21, [sp, #144]
 898:	ldp	x29, x30, [sp, #128]
 89c:	add	sp, sp, #0xb0
 8a0:	ret

00000000000008a4 <arc_mmap_file>:
 8a4:	stp	x29, x30, [sp, #-16]!
 8a8:	mov	w4, w0
 8ac:	mov	w2, #0x3                   	// #3
 8b0:	mov	w3, #0x2                   	// #2
 8b4:	mov	x0, xzr
 8b8:	mov	x5, xzr
 8bc:	mov	x29, sp
 8c0:	bl	0 <mmap>
 8c4:	cmn	x0, #0x1
 8c8:	csel	x0, xzr, x0, eq  // eq = none
 8cc:	ldp	x29, x30, [sp], #16
 8d0:	ret

00000000000008d4 <ctf_arc_close_internal>:
 8d4:	cbz	x0, 8f0 <ctf_arc_close_internal+0x1c>
 8d8:	stp	x29, x30, [sp, #-16]!
 8dc:	ldr	x1, [x0]
 8e0:	mov	x2, xzr
 8e4:	mov	x29, sp
 8e8:	bl	5f8 <arc_mmap_unmap>
 8ec:	ldp	x29, x30, [sp], #16
 8f0:	ret

00000000000008f4 <ctf_arc_close>:
 8f4:	cbz	x0, 954 <ctf_arc_close+0x60>
 8f8:	stp	x29, x30, [sp, #-32]!
 8fc:	ldr	w8, [x0]
 900:	str	x19, [sp, #16]
 904:	mov	x19, x0
 908:	mov	x29, sp
 90c:	cbz	w8, 91c <ctf_arc_close+0x28>
 910:	ldr	x0, [x19, #16]
 914:	bl	8d4 <ctf_arc_close_internal>
 918:	b	924 <ctf_arc_close+0x30>
 91c:	ldr	x0, [x19, #8]
 920:	bl	0 <ctf_file_close>
 924:	ldr	x0, [x19, #32]
 928:	bl	0 <free>
 92c:	ldr	x0, [x19, #88]
 930:	bl	0 <free>
 934:	ldr	x8, [x19, #104]
 938:	cbz	x8, 944 <ctf_arc_close+0x50>
 93c:	mov	x0, x19
 940:	blr	x8
 944:	mov	x0, x19
 948:	bl	0 <free>
 94c:	ldr	x19, [sp, #16]
 950:	ldp	x29, x30, [sp], #32
 954:	ret

0000000000000958 <ctf_arc_open_by_name_sections>:
 958:	stp	x29, x30, [sp, #-32]!
 95c:	stp	x20, x19, [sp, #16]
 960:	ldr	w8, [x0]
 964:	mov	x20, x4
 968:	mov	x19, x0
 96c:	mov	x29, sp
 970:	cbz	w8, 98c <ctf_arc_open_by_name_sections+0x34>
 974:	ldr	x0, [x19, #16]
 978:	mov	x4, x20
 97c:	bl	9d8 <ctf_arc_open_by_name_internal>
 980:	cbz	x0, 9cc <ctf_arc_open_by_name_sections+0x74>
 984:	str	x19, [x0, #640]
 988:	b	9cc <ctf_arc_open_by_name_sections+0x74>
 98c:	cbz	x3, 9b8 <ctf_arc_open_by_name_sections+0x60>
 990:	adrp	x1, 0 <_CTF_SECTION>
 994:	add	x1, x1, #0x0
 998:	mov	x0, x3
 99c:	bl	0 <strcmp>
 9a0:	cbz	w0, 9b8 <ctf_arc_open_by_name_sections+0x60>
 9a4:	mov	x0, xzr
 9a8:	cbz	x20, 9cc <ctf_arc_open_by_name_sections+0x74>
 9ac:	mov	w8, #0x415                 	// #1045
 9b0:	str	w8, [x20]
 9b4:	b	9cc <ctf_arc_open_by_name_sections+0x74>
 9b8:	ldr	x0, [x19, #8]
 9bc:	ldr	w8, [x0, #548]
 9c0:	str	x19, [x0, #640]
 9c4:	add	w8, w8, #0x1
 9c8:	str	w8, [x0, #548]
 9cc:	ldp	x20, x19, [sp, #16]
 9d0:	ldp	x29, x30, [sp], #32
 9d4:	ret

00000000000009d8 <ctf_arc_open_by_name_internal>:
 9d8:	stp	x29, x30, [sp, #-80]!
 9dc:	adrp	x8, 0 <_CTF_SECTION>
 9e0:	add	x8, x8, #0x0
 9e4:	cmp	x3, #0x0
 9e8:	stp	x24, x23, [sp, #32]
 9ec:	stp	x22, x21, [sp, #48]
 9f0:	mov	x22, x0
 9f4:	csel	x23, x8, x3, eq  // eq = none
 9f8:	adrp	x0, 0 <ctf_arc_write_fd>
 9fc:	mov	x21, x1
 a00:	add	x0, x0, #0x0
 a04:	mov	x1, x23
 a08:	str	x25, [sp, #16]
 a0c:	stp	x20, x19, [sp, #64]
 a10:	mov	x29, sp
 a14:	mov	x19, x4
 a18:	mov	x20, x2
 a1c:	bl	0 <ctf_dprintf>
 a20:	ldr	x0, [x22, #24]
 a24:	add	x24, x22, #0x28
 a28:	bl	3b0 <__uint64_identity>
 a2c:	mrs	x9, tpidr_el0
 a30:	add	x9, x9, #0x0, lsl #12
 a34:	add	x8, x22, x0
 a38:	add	x9, x9, #0x0
 a3c:	str	x8, [x9]
 a40:	ldr	x25, [x22, #16]
 a44:	mov	x0, x25
 a48:	bl	3b0 <__uint64_identity>
 a4c:	adrp	x4, 0 <ctf_arc_write_fd>
 a50:	add	x4, x4, #0x0
 a54:	mov	w3, #0x10                  	// #16
 a58:	mov	x0, x23
 a5c:	mov	x1, x24
 a60:	mov	x2, x25
 a64:	bl	0 <bsearch>
 a68:	cbz	x0, a94 <ctf_arc_open_by_name_internal+0xbc>
 a6c:	ldr	x23, [x0, #8]
 a70:	mov	x0, x23
 a74:	bl	3b0 <__uint64_identity>
 a78:	mov	x0, x22
 a7c:	mov	x1, x21
 a80:	mov	x2, x20
 a84:	mov	x3, x23
 a88:	mov	x4, x19
 a8c:	bl	db8 <ctf_arc_open_by_offset>
 a90:	b	aa4 <ctf_arc_open_by_name_internal+0xcc>
 a94:	mov	x0, xzr
 a98:	cbz	x19, aa4 <ctf_arc_open_by_name_internal+0xcc>
 a9c:	mov	w8, #0x415                 	// #1045
 aa0:	str	w8, [x19]
 aa4:	ldp	x20, x19, [sp, #64]
 aa8:	ldp	x22, x21, [sp, #48]
 aac:	ldp	x24, x23, [sp, #32]
 ab0:	ldr	x25, [sp, #16]
 ab4:	ldp	x29, x30, [sp], #80
 ab8:	ret

0000000000000abc <ctf_arc_open_by_name>:
 abc:	stp	x29, x30, [sp, #-16]!
 ac0:	mov	x8, x0
 ac4:	ldr	x9, [x8, #24]!
 ac8:	mov	x10, x0
 acc:	ldr	x11, [x10, #56]!
 ad0:	mov	x3, x1
 ad4:	cmp	x9, #0x0
 ad8:	csel	x1, xzr, x8, eq  // eq = none
 adc:	cmp	x11, #0x0
 ae0:	mov	x4, x2
 ae4:	csel	x2, xzr, x10, eq  // eq = none
 ae8:	mov	x29, sp
 aec:	bl	958 <ctf_arc_open_by_name_sections>
 af0:	ldp	x29, x30, [sp], #16
 af4:	ret

0000000000000af8 <ctf_archive_raw_iter>:
 af8:	stp	x29, x30, [sp, #-16]!
 afc:	ldr	w8, [x0]
 b00:	mov	x29, sp
 b04:	cbz	w8, b18 <ctf_archive_raw_iter+0x20>
 b08:	ldr	x0, [x0, #16]
 b0c:	bl	b24 <ctf_archive_raw_iter_internal>
 b10:	ldp	x29, x30, [sp], #16
 b14:	ret
 b18:	mov	w0, #0xffffffea            	// #-22
 b1c:	ldp	x29, x30, [sp], #16
 b20:	ret

0000000000000b24 <ctf_archive_raw_iter_internal>:
 b24:	stp	x29, x30, [sp, #-96]!
 b28:	stp	x28, x27, [sp, #16]
 b2c:	stp	x26, x25, [sp, #32]
 b30:	stp	x24, x23, [sp, #48]
 b34:	stp	x22, x21, [sp, #64]
 b38:	stp	x20, x19, [sp, #80]
 b3c:	ldr	x22, [x0, #24]
 b40:	mov	x20, x0
 b44:	mov	x29, sp
 b48:	mov	x19, x2
 b4c:	mov	x0, x22
 b50:	mov	x21, x1
 b54:	bl	3b0 <__uint64_identity>
 b58:	ldr	x0, [x20, #16]
 b5c:	bl	3b0 <__uint64_identity>
 b60:	cbz	x0, bdc <ctf_archive_raw_iter_internal+0xb8>
 b64:	mov	x26, xzr
 b68:	add	x27, x20, x22
 b6c:	add	x28, x20, #0x30
 b70:	ldur	x0, [x28, #-8]
 b74:	bl	3b0 <__uint64_identity>
 b78:	ldr	x23, [x20, #32]
 b7c:	add	x24, x27, x0
 b80:	mov	x0, x23
 b84:	bl	3b0 <__uint64_identity>
 b88:	ldr	x0, [x28]
 b8c:	add	x23, x20, x23
 b90:	bl	3b0 <__uint64_identity>
 b94:	add	x23, x23, x0
 b98:	ldr	x25, [x23], #8
 b9c:	mov	x0, x25
 ba0:	bl	3b0 <__uint64_identity>
 ba4:	mov	x0, x24
 ba8:	mov	x1, x23
 bac:	mov	x2, x25
 bb0:	mov	x3, x19
 bb4:	blr	x21
 bb8:	cmp	w0, #0x0
 bbc:	csel	w22, w22, w0, eq  // eq = none
 bc0:	cbnz	w0, be0 <ctf_archive_raw_iter_internal+0xbc>
 bc4:	ldr	x0, [x20, #16]
 bc8:	add	x26, x26, #0x1
 bcc:	bl	3b0 <__uint64_identity>
 bd0:	cmp	x26, x0
 bd4:	add	x28, x28, #0x10
 bd8:	b.cc	b70 <ctf_archive_raw_iter_internal+0x4c>  // b.lo, b.ul, b.last
 bdc:	mov	w22, wzr
 be0:	mov	w0, w22
 be4:	ldp	x20, x19, [sp, #80]
 be8:	ldp	x22, x21, [sp, #64]
 bec:	ldp	x24, x23, [sp, #48]
 bf0:	ldp	x26, x25, [sp, #32]
 bf4:	ldp	x28, x27, [sp, #16]
 bf8:	ldp	x29, x30, [sp], #96
 bfc:	ret

0000000000000c00 <ctf_archive_iter>:
 c00:	stp	x29, x30, [sp, #-16]!
 c04:	mov	x8, x0
 c08:	ldr	w9, [x8], #56
 c0c:	mov	x5, x2
 c10:	mov	x4, x1
 c14:	mov	x29, sp
 c18:	cbz	w9, c44 <ctf_archive_iter+0x44>
 c1c:	ldr	x9, [x0, #56]
 c20:	ldp	x1, x11, [x0, #16]
 c24:	add	x10, x0, #0x18
 c28:	cmp	x9, #0x0
 c2c:	csel	x3, xzr, x8, eq  // eq = none
 c30:	cmp	x11, #0x0
 c34:	csel	x2, xzr, x10, eq  // eq = none
 c38:	bl	c60 <ctf_archive_iter_internal>
 c3c:	ldp	x29, x30, [sp], #16
 c40:	ret
 c44:	ldr	x0, [x0, #8]
 c48:	adrp	x1, 0 <_CTF_SECTION>
 c4c:	add	x1, x1, #0x0
 c50:	mov	x2, x5
 c54:	blr	x4
 c58:	ldp	x29, x30, [sp], #16
 c5c:	ret

0000000000000c60 <ctf_archive_iter_internal>:
 c60:	sub	sp, sp, #0x80
 c64:	stp	x29, x30, [sp, #32]
 c68:	stp	x28, x27, [sp, #48]
 c6c:	stp	x26, x25, [sp, #64]
 c70:	stp	x24, x23, [sp, #80]
 c74:	stp	x22, x21, [sp, #96]
 c78:	stp	x20, x19, [sp, #112]
 c7c:	stp	x4, x5, [sp, #8]
 c80:	ldr	x25, [x1, #24]
 c84:	mov	x24, x0
 c88:	add	x29, sp, #0x20
 c8c:	mov	x21, x3
 c90:	mov	x0, x25
 c94:	mov	x22, x2
 c98:	mov	x23, x1
 c9c:	bl	3b0 <__uint64_identity>
 ca0:	ldr	x0, [x23, #16]
 ca4:	bl	3b0 <__uint64_identity>
 ca8:	cbz	x0, d44 <ctf_archive_iter_internal+0xe4>
 cac:	mov	x28, xzr
 cb0:	add	x19, x23, x25
 cb4:	mov	w20, #0x28                  	// #40
 cb8:	b	ce0 <ctf_archive_iter_internal+0x80>
 cbc:	ldur	w25, [x29, #-4]
 cc0:	mov	w8, wzr
 cc4:	tbz	w8, #0, d48 <ctf_archive_iter_internal+0xe8>
 cc8:	ldr	x0, [x23, #16]
 ccc:	add	x28, x28, #0x1
 cd0:	bl	3b0 <__uint64_identity>
 cd4:	cmp	x28, x0
 cd8:	add	x20, x20, #0x10
 cdc:	b.cs	d44 <ctf_archive_iter_internal+0xe4>  // b.hs, b.nlast
 ce0:	ldr	x0, [x23, x20]
 ce4:	bl	3b0 <__uint64_identity>
 ce8:	add	x26, x19, x0
 cec:	sub	x4, x29, #0x4
 cf0:	mov	x0, x23
 cf4:	mov	x1, x22
 cf8:	mov	x2, x21
 cfc:	mov	x3, x26
 d00:	bl	9d8 <ctf_arc_open_by_name_internal>
 d04:	cbz	x0, cbc <ctf_archive_iter_internal+0x5c>
 d08:	str	x24, [x0, #640]
 d0c:	ldp	x8, x2, [sp, #8]
 d10:	mov	x1, x26
 d14:	mov	x27, x0
 d18:	blr	x8
 d1c:	mov	w26, w0
 d20:	stur	w0, [x29, #-4]
 d24:	mov	x0, x27
 d28:	bl	0 <ctf_file_close>
 d2c:	ldur	w9, [x29, #-4]
 d30:	cmp	w26, #0x0
 d34:	cset	w8, eq  // eq = none
 d38:	csel	w25, w25, w9, eq  // eq = none
 d3c:	tbnz	w8, #0, cc8 <ctf_archive_iter_internal+0x68>
 d40:	b	d48 <ctf_archive_iter_internal+0xe8>
 d44:	mov	w25, wzr
 d48:	mov	w0, w25
 d4c:	ldp	x20, x19, [sp, #112]
 d50:	ldp	x22, x21, [sp, #96]
 d54:	ldp	x24, x23, [sp, #80]
 d58:	ldp	x26, x25, [sp, #64]
 d5c:	ldp	x28, x27, [sp, #48]
 d60:	ldp	x29, x30, [sp, #32]
 d64:	add	sp, sp, #0x80
 d68:	ret

0000000000000d6c <search_modent_by_name>:
 d6c:	stp	x29, x30, [sp, #-48]!
 d70:	str	x21, [sp, #16]
 d74:	stp	x20, x19, [sp, #32]
 d78:	mrs	x8, tpidr_el0
 d7c:	add	x8, x8, #0x0, lsl #12
 d80:	ldr	x19, [x1]
 d84:	add	x8, x8, #0x0
 d88:	ldr	x21, [x8]
 d8c:	mov	x20, x0
 d90:	mov	x0, x19
 d94:	mov	x29, sp
 d98:	bl	3b0 <__uint64_identity>
 d9c:	add	x1, x21, x19
 da0:	mov	x0, x20
 da4:	bl	0 <strcmp>
 da8:	ldp	x20, x19, [sp, #32]
 dac:	ldr	x21, [sp, #16]
 db0:	ldp	x29, x30, [sp], #48
 db4:	ret

0000000000000db8 <ctf_arc_open_by_offset>:
 db8:	sub	sp, sp, #0x60
 dbc:	stp	x20, x19, [sp, #80]
 dc0:	mov	x19, x0
 dc4:	adrp	x0, 0 <ctf_arc_write_fd>
 dc8:	str	x23, [sp, #48]
 dcc:	mov	x23, x1
 dd0:	add	x0, x0, #0x0
 dd4:	mov	x1, x3
 dd8:	stp	x29, x30, [sp, #32]
 ddc:	stp	x22, x21, [sp, #64]
 de0:	add	x29, sp, #0x20
 de4:	mov	x20, x4
 de8:	mov	x21, x3
 dec:	mov	x22, x2
 df0:	bl	0 <ctf_dprintf>
 df4:	movi	v0.2d, #0x0
 df8:	stp	q0, q0, [sp]
 dfc:	ldr	x0, [x19, #32]
 e00:	bl	3b0 <__uint64_identity>
 e04:	adrp	x9, 0 <_CTF_SECTION>
 e08:	add	x8, x0, x21
 e0c:	add	x9, x9, #0x0
 e10:	str	x9, [sp]
 e14:	add	x21, x19, x8
 e18:	ldr	x0, [x21], #8
 e1c:	bl	3b0 <__uint64_identity>
 e20:	mov	w8, #0x1                   	// #1
 e24:	stp	x0, x8, [sp, #16]
 e28:	mov	x0, sp
 e2c:	mov	x1, x23
 e30:	mov	x2, x22
 e34:	mov	x3, x20
 e38:	str	x21, [sp, #8]
 e3c:	bl	0 <ctf_bufopen>
 e40:	mov	x20, x0
 e44:	cbz	x0, e60 <ctf_arc_open_by_offset+0xa8>
 e48:	ldr	x19, [x19, #8]
 e4c:	mov	x0, x19
 e50:	bl	3b0 <__uint64_identity>
 e54:	mov	x0, x20
 e58:	mov	w1, w19
 e5c:	bl	0 <ctf_setmodel>
 e60:	mov	x0, x20
 e64:	ldp	x20, x19, [sp, #80]
 e68:	ldp	x22, x21, [sp, #64]
 e6c:	ldr	x23, [sp, #48]
 e70:	ldp	x29, x30, [sp, #32]
 e74:	add	sp, sp, #0x60
 e78:	ret

ctf-dump.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_dump>:
       0:	stp	x29, x30, [sp, #-96]!
       4:	stp	x28, x27, [sp, #16]
       8:	stp	x26, x25, [sp, #32]
       c:	stp	x24, x23, [sp, #48]
      10:	stp	x22, x21, [sp, #64]
      14:	stp	x20, x19, [sp, #80]
      18:	ldr	x24, [x1]
      1c:	mov	x20, x4
      20:	mov	x21, x3
      24:	mov	w22, w2
      28:	mov	x23, x1
      2c:	mov	x19, x0
      30:	mov	x29, sp
      34:	cbz	x24, 118 <ctf_dump+0x118>
      38:	ldr	w8, [x24]
      3c:	cmp	w8, w22
      40:	b.ne	174 <ctf_dump+0x174>  // b.any
      44:	ldr	x8, [x24, #16]
      48:	add	x9, x24, #0x20
      4c:	add	x10, x8, #0x8
      50:	cmp	x8, #0x0
      54:	csel	x8, x9, x10, eq  // eq = none
      58:	ldr	x8, [x8]
      5c:	str	x8, [x24, #16]
      60:	cbz	x8, 188 <ctf_dump+0x188>
      64:	ldr	x25, [x8, #16]
      68:	cbz	x21, 1b0 <ctf_dump+0x1b0>
      6c:	mov	x24, xzr
      70:	cbz	x25, f8 <ctf_dump+0xf8>
      74:	adrp	x23, 0 <ctf_dump>
      78:	mov	w28, #0xa                   	// #10
      7c:	add	x23, x23, #0x0
      80:	b	8c <ctf_dump+0x8c>
      84:	mov	x25, xzr
      88:	cbz	x25, f8 <ctf_dump+0xf8>
      8c:	ldrb	w8, [x25]
      90:	cbz	w8, f8 <ctf_dump+0xf8>
      94:	mov	w1, #0xa                   	// #10
      98:	mov	x0, x25
      9c:	bl	0 <strchr>
      a0:	mov	x26, x0
      a4:	cbz	x0, ac <ctf_dump+0xac>
      a8:	strb	wzr, [x26]
      ac:	mov	w0, w22
      b0:	mov	x1, x25
      b4:	mov	x2, x20
      b8:	blr	x21
      bc:	mov	x27, x0
      c0:	mov	x0, x24
      c4:	mov	x1, x27
      c8:	bl	0 <ctf_str_append_noerr>
      cc:	mov	x1, x23
      d0:	bl	0 <ctf_str_append_noerr>
      d4:	cmp	x27, x25
      d8:	mov	x24, x0
      dc:	b.eq	e8 <ctf_dump+0xe8>  // b.none
      e0:	mov	x0, x27
      e4:	bl	0 <free>
      e8:	cbz	x26, 84 <ctf_dump+0x84>
      ec:	strb	w28, [x26], #1
      f0:	mov	x25, x26
      f4:	cbnz	x25, 8c <ctf_dump+0x8c>
      f8:	mov	x0, x24
      fc:	bl	0 <strlen>
     100:	sub	x8, x0, #0x1
     104:	ldrb	w9, [x24, x8]
     108:	cmp	w9, #0xa
     10c:	b.ne	1c0 <ctf_dump+0x1c0>  // b.any
     110:	strb	wzr, [x24, x8]
     114:	b	1c0 <ctf_dump+0x1c0>
     118:	mov	w0, #0x28                  	// #40
     11c:	bl	0 <malloc>
     120:	mov	x24, x0
     124:	str	x0, [x23]
     128:	cbz	x0, 17c <ctf_dump+0x17c>
     12c:	movi	v0.2d, #0x0
     130:	cmp	w22, #0x6
     134:	str	xzr, [x24, #32]
     138:	stp	q0, q0, [x24]
     13c:	str	x19, [x24, #8]
     140:	str	w22, [x24]
     144:	b.hi	1f8 <ctf_dump+0x1f8>  // b.pmore
     148:	adrp	x9, 0 <ctf_dump>
     14c:	mov	w8, w22
     150:	add	x9, x9, #0x0
     154:	adr	x10, 164 <ctf_dump+0x164>
     158:	ldrb	w11, [x9, x8]
     15c:	add	x10, x10, x11, lsl #2
     160:	br	x10
     164:	mov	x0, x19
     168:	mov	x1, x24
     16c:	bl	2a8 <ctf_dump_header>
     170:	b	44 <ctf_dump+0x44>
     174:	mov	w1, #0x418                 	// #1048
     178:	b	180 <ctf_dump+0x180>
     17c:	mov	w1, #0xc                   	// #12
     180:	mov	x0, x19
     184:	bl	0 <ctf_set_errno>
     188:	mov	x0, x24
     18c:	bl	c68 <ctf_dump_free>
     190:	mov	x0, x24
     194:	bl	0 <free>
     198:	mov	x0, x19
     19c:	mov	w1, wzr
     1a0:	bl	0 <ctf_set_errno>
     1a4:	mov	x24, xzr
     1a8:	str	xzr, [x23]
     1ac:	b	1cc <ctf_dump+0x1cc>
     1b0:	mov	x0, x25
     1b4:	bl	0 <strdup>
     1b8:	mov	x24, x0
     1bc:	cbz	x0, 1ec <ctf_dump+0x1ec>
     1c0:	mov	x0, x19
     1c4:	mov	w1, wzr
     1c8:	bl	0 <ctf_set_errno>
     1cc:	mov	x0, x24
     1d0:	ldp	x20, x19, [sp, #80]
     1d4:	ldp	x22, x21, [sp, #64]
     1d8:	ldp	x24, x23, [sp, #48]
     1dc:	ldp	x26, x25, [sp, #32]
     1e0:	ldp	x28, x27, [sp, #16]
     1e4:	ldp	x29, x30, [sp], #96
     1e8:	ret
     1ec:	mov	w1, #0xc                   	// #12
     1f0:	mov	x0, x19
     1f4:	b	1c8 <ctf_dump+0x1c8>
     1f8:	mov	w1, #0x417                 	// #1047
     1fc:	b	180 <ctf_dump+0x180>
     200:	adrp	x1, 0 <ctf_dump>
     204:	add	x1, x1, #0x0
     208:	mov	x0, x19
     20c:	mov	x2, x24
     210:	bl	0 <ctf_label_iter>
     214:	tbz	w0, #31, 44 <ctf_dump+0x44>
     218:	mov	x0, x19
     21c:	bl	0 <ctf_errno>
     220:	cmp	w0, #0x409
     224:	b.ne	188 <ctf_dump+0x188>  // b.any
     228:	mov	x0, x19
     22c:	mov	w1, wzr
     230:	bl	0 <ctf_set_errno>
     234:	b	44 <ctf_dump+0x44>
     238:	mov	x0, x19
     23c:	mov	x1, x24
     240:	bl	588 <ctf_dump_objts>
     244:	tbz	w0, #31, 44 <ctf_dump+0x44>
     248:	b	188 <ctf_dump+0x188>
     24c:	mov	x0, x19
     250:	mov	x1, x24
     254:	bl	6f4 <ctf_dump_funcs>
     258:	tbz	w0, #31, 44 <ctf_dump+0x44>
     25c:	b	188 <ctf_dump+0x188>
     260:	adrp	x1, 0 <ctf_dump>
     264:	add	x1, x1, #0x0
     268:	mov	x0, x19
     26c:	mov	x2, x24
     270:	bl	0 <ctf_variable_iter>
     274:	tbz	w0, #31, 44 <ctf_dump+0x44>
     278:	b	188 <ctf_dump+0x188>
     27c:	adrp	x1, 0 <ctf_dump>
     280:	add	x1, x1, #0x0
     284:	mov	x0, x19
     288:	mov	x2, x24
     28c:	bl	0 <ctf_type_iter_all>
     290:	tbz	w0, #31, 44 <ctf_dump+0x44>
     294:	b	188 <ctf_dump+0x188>
     298:	mov	x0, x19
     29c:	mov	x1, x24
     2a0:	bl	bc0 <ctf_dump_str>
     2a4:	b	44 <ctf_dump+0x44>

00000000000002a8 <ctf_dump_header>:
     2a8:	sub	sp, sp, #0x60
     2ac:	adrp	x8, 0 <ctf_dump>
     2b0:	adrp	x9, 0 <ctf_dump>
     2b4:	stp	x29, x30, [sp, #48]
     2b8:	stp	x20, x19, [sp, #80]
     2bc:	movi	v0.2d, #0x0
     2c0:	add	x8, x8, #0x0
     2c4:	add	x9, x9, #0x0
     2c8:	str	x21, [sp, #64]
     2cc:	ldr	x21, [x0, #8]
     2d0:	stp	q0, q0, [sp]
     2d4:	stp	x8, x9, [sp, #8]
     2d8:	adrp	x8, 0 <ctf_dump>
     2dc:	add	x8, x8, #0x0
     2e0:	str	x8, [sp, #24]
     2e4:	adrp	x8, 0 <ctf_dump>
     2e8:	add	x8, x8, #0x0
     2ec:	str	q0, [sp, #32]
     2f0:	str	x8, [sp, #32]
     2f4:	ldrh	w2, [x21]
     2f8:	add	x29, sp, #0x30
     2fc:	mov	x20, x1
     300:	adrp	x1, 0 <ctf_dump>
     304:	mov	x19, x0
     308:	add	x1, x1, #0x0
     30c:	add	x0, x29, #0x18
     310:	bl	0 <asprintf>
     314:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     318:	ldr	x1, [x29, #24]
     31c:	mov	x0, x20
     320:	bl	ca8 <ctf_dump_append>
     324:	ldrb	w2, [x21, #2]
     328:	cmp	x2, #0x4
     32c:	b.hi	33c <ctf_dump_header+0x94>  // b.pmore
     330:	mov	x8, sp
     334:	ldr	x8, [x8, x2, lsl #3]
     338:	b	340 <ctf_dump_header+0x98>
     33c:	mov	x8, xzr
     340:	adrp	x9, 0 <ctf_dump>
     344:	add	x9, x9, #0x0
     348:	cmp	x8, #0x0
     34c:	adrp	x1, 0 <ctf_dump>
     350:	csel	x3, x9, x8, eq  // eq = none
     354:	add	x1, x1, #0x0
     358:	add	x0, x29, #0x18
     35c:	bl	0 <asprintf>
     360:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     364:	ldr	x1, [x29, #24]
     368:	mov	x0, x20
     36c:	bl	ca8 <ctf_dump_append>
     370:	ldrb	w2, [x19, #16]
     374:	cbz	w2, 3b0 <ctf_dump_header+0x108>
     378:	adrp	x8, 0 <ctf_dump>
     37c:	adrp	x9, 0 <ctf_dump>
     380:	add	x8, x8, #0x0
     384:	add	x9, x9, #0x0
     388:	tst	w2, #0x1
     38c:	adrp	x1, 0 <ctf_dump>
     390:	csel	x3, x9, x8, eq  // eq = none
     394:	add	x1, x1, #0x0
     398:	add	x0, x29, #0x18
     39c:	bl	0 <asprintf>
     3a0:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     3a4:	ldr	x1, [x29, #24]
     3a8:	mov	x0, x20
     3ac:	bl	ca8 <ctf_dump_append>
     3b0:	ldr	w3, [x21, #4]
     3b4:	adrp	x2, 0 <ctf_dump>
     3b8:	add	x2, x2, #0x0
     3bc:	mov	x0, x19
     3c0:	mov	x1, x20
     3c4:	bl	cf4 <ctf_dump_header_strfield>
     3c8:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     3cc:	ldr	w3, [x21, #8]
     3d0:	adrp	x2, 0 <ctf_dump>
     3d4:	add	x2, x2, #0x0
     3d8:	mov	x0, x19
     3dc:	mov	x1, x20
     3e0:	bl	cf4 <ctf_dump_header_strfield>
     3e4:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     3e8:	ldr	w3, [x21, #12]
     3ec:	adrp	x2, 0 <ctf_dump>
     3f0:	add	x2, x2, #0x0
     3f4:	mov	x0, x19
     3f8:	mov	x1, x20
     3fc:	bl	cf4 <ctf_dump_header_strfield>
     400:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     404:	ldp	w3, w4, [x21, #16]
     408:	adrp	x2, 0 <ctf_dump>
     40c:	add	x2, x2, #0x0
     410:	mov	x0, x19
     414:	mov	x1, x20
     418:	bl	d6c <ctf_dump_header_sectfield>
     41c:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     420:	ldp	w3, w4, [x21, #20]
     424:	adrp	x2, 0 <ctf_dump>
     428:	add	x2, x2, #0x0
     42c:	mov	x0, x19
     430:	mov	x1, x20
     434:	bl	d6c <ctf_dump_header_sectfield>
     438:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     43c:	ldr	w3, [x21, #24]
     440:	ldr	w4, [x21, #36]
     444:	adrp	x2, 0 <ctf_dump>
     448:	add	x2, x2, #0x0
     44c:	mov	x0, x19
     450:	mov	x1, x20
     454:	bl	d6c <ctf_dump_header_sectfield>
     458:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     45c:	ldp	w3, w4, [x21, #36]
     460:	adrp	x2, 0 <ctf_dump>
     464:	add	x2, x2, #0x0
     468:	mov	x0, x19
     46c:	mov	x1, x20
     470:	bl	d6c <ctf_dump_header_sectfield>
     474:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     478:	ldp	w3, w4, [x21, #40]
     47c:	adrp	x2, 0 <ctf_dump>
     480:	add	x2, x2, #0x0
     484:	mov	x0, x19
     488:	mov	x1, x20
     48c:	bl	d6c <ctf_dump_header_sectfield>
     490:	tbnz	w0, #31, 4b8 <ctf_dump_header+0x210>
     494:	ldp	w3, w8, [x21, #44]
     498:	adrp	x2, 0 <ctf_dump>
     49c:	add	x2, x2, #0x0
     4a0:	mov	x0, x19
     4a4:	add	w8, w3, w8
     4a8:	add	w4, w8, #0x1
     4ac:	mov	x1, x20
     4b0:	bl	d6c <ctf_dump_header_sectfield>
     4b4:	tbz	w0, #31, 4c8 <ctf_dump_header+0x220>
     4b8:	bl	0 <__errno_location>
     4bc:	ldr	w1, [x0]
     4c0:	mov	x0, x19
     4c4:	bl	0 <ctf_set_errno>
     4c8:	ldp	x20, x19, [sp, #80]
     4cc:	ldr	x21, [sp, #64]
     4d0:	ldp	x29, x30, [sp, #48]
     4d4:	add	sp, sp, #0x60
     4d8:	ret

00000000000004dc <ctf_dump_label>:
     4dc:	stp	x29, x30, [sp, #-48]!
     4e0:	str	x21, [sp, #16]
     4e4:	mov	x29, sp
     4e8:	mov	x21, x1
     4ec:	adrp	x1, 0 <ctf_dump>
     4f0:	stp	x20, x19, [sp, #32]
     4f4:	mov	x19, x2
     4f8:	mov	x2, x0
     4fc:	add	x1, x1, #0x0
     500:	add	x0, x29, #0x18
     504:	bl	0 <asprintf>
     508:	ldr	x20, [x19, #8]
     50c:	tbnz	w0, #31, 558 <ctf_dump_label+0x7c>
     510:	ldr	x1, [x21]
     514:	mov	w2, #0x1                   	// #1
     518:	mov	x0, x20
     51c:	bl	de0 <ctf_dump_format_type>
     520:	ldr	x8, [x29, #24]
     524:	cbz	x0, 56c <ctf_dump_label+0x90>
     528:	mov	x20, x0
     52c:	mov	x0, x8
     530:	mov	x1, x20
     534:	bl	0 <ctf_str_append_noerr>
     538:	str	x0, [x29, #24]
     53c:	mov	x0, x20
     540:	bl	0 <free>
     544:	ldr	x1, [x29, #24]
     548:	mov	x0, x19
     54c:	bl	ca8 <ctf_dump_append>
     550:	mov	w0, wzr
     554:	b	578 <ctf_dump_label+0x9c>
     558:	bl	0 <__errno_location>
     55c:	ldr	w1, [x0]
     560:	mov	x0, x20
     564:	bl	0 <ctf_set_errno>
     568:	b	578 <ctf_dump_label+0x9c>
     56c:	mov	x0, x8
     570:	bl	0 <free>
     574:	mov	w0, #0xffffffff            	// #-1
     578:	ldp	x20, x19, [sp, #32]
     57c:	ldr	x21, [sp, #16]
     580:	ldp	x29, x30, [sp], #48
     584:	ret

0000000000000588 <ctf_dump_objts>:
     588:	stp	x29, x30, [sp, #-80]!
     58c:	stp	x24, x23, [sp, #32]
     590:	stp	x22, x21, [sp, #48]
     594:	stp	x20, x19, [sp, #64]
     598:	ldr	x8, [x0, #432]
     59c:	str	x25, [sp, #16]
     5a0:	mov	x29, sp
     5a4:	cbz	x8, 6d4 <ctf_dump_objts+0x14c>
     5a8:	adrp	x22, 0 <ctf_dump>
     5ac:	adrp	x23, 0 <ctf_dump>
     5b0:	mov	x19, x0
     5b4:	mov	x20, x1
     5b8:	mov	x21, xzr
     5bc:	add	x22, x22, #0x0
     5c0:	add	x23, x23, #0x0
     5c4:	ldr	x0, [x20, #8]
     5c8:	mov	x1, x21
     5cc:	bl	0 <ctf_lookup_by_symbol>
     5d0:	mov	x25, x0
     5d4:	cmn	x0, #0x1
     5d8:	b.eq	650 <ctf_dump_objts+0xc8>  // b.none
     5dc:	mov	x0, x19
     5e0:	mov	x1, x21
     5e4:	bl	0 <ctf_lookup_symbol_name>
     5e8:	ldrb	w8, [x0]
     5ec:	cbz	w8, 66c <ctf_dump_objts+0xe4>
     5f0:	mov	x2, x0
     5f4:	add	x0, x29, #0x18
     5f8:	mov	x1, x23
     5fc:	mov	x3, x21
     600:	bl	0 <asprintf>
     604:	tbnz	w0, #31, 680 <ctf_dump_objts+0xf8>
     608:	ldr	x0, [x20, #8]
     60c:	mov	w2, #0x1                   	// #1
     610:	mov	x1, x25
     614:	bl	de0 <ctf_dump_format_type>
     618:	ldr	x8, [x29, #24]
     61c:	cbz	x0, 6a8 <ctf_dump_objts+0x120>
     620:	mov	x25, x0
     624:	mov	x0, x8
     628:	mov	x1, x25
     62c:	bl	0 <ctf_str_append_noerr>
     630:	str	x0, [x29, #24]
     634:	mov	x0, x25
     638:	bl	0 <free>
     63c:	ldr	x1, [x29, #24]
     640:	mov	x0, x20
     644:	bl	ca8 <ctf_dump_append>
     648:	mov	w8, wzr
     64c:	b	6b8 <ctf_dump_objts+0x130>
     650:	ldr	x0, [x20, #8]
     654:	bl	0 <ctf_errno>
     658:	sub	w8, w0, #0x406
     65c:	cmp	w8, #0x2
     660:	b.cs	69c <ctf_dump_objts+0x114>  // b.hs, b.nlast
     664:	mov	w8, #0x4                   	// #4
     668:	b	6b8 <ctf_dump_objts+0x130>
     66c:	add	x0, x29, #0x18
     670:	mov	x1, x22
     674:	mov	x2, x21
     678:	bl	0 <asprintf>
     67c:	tbz	w0, #31, 608 <ctf_dump_objts+0x80>
     680:	bl	0 <__errno_location>
     684:	ldr	w1, [x0]
     688:	mov	x0, x19
     68c:	bl	0 <ctf_set_errno>
     690:	mov	x24, x0
     694:	mov	w8, #0x1                   	// #1
     698:	b	6b8 <ctf_dump_objts+0x130>
     69c:	cmp	w0, #0x3f2
     6a0:	b.ne	5dc <ctf_dump_objts+0x54>  // b.any
     6a4:	b	6b0 <ctf_dump_objts+0x128>
     6a8:	mov	x0, x8
     6ac:	bl	0 <free>
     6b0:	mov	w8, #0x1                   	// #1
     6b4:	mov	w24, #0xffffffff            	// #-1
     6b8:	orr	w8, w8, #0x4
     6bc:	cmp	w8, #0x4
     6c0:	b.ne	6d8 <ctf_dump_objts+0x150>  // b.any
     6c4:	ldr	x8, [x19, #432]
     6c8:	add	x21, x21, #0x1
     6cc:	cmp	x21, x8
     6d0:	b.cc	5c4 <ctf_dump_objts+0x3c>  // b.lo, b.ul, b.last
     6d4:	mov	w24, wzr
     6d8:	mov	w0, w24
     6dc:	ldp	x20, x19, [sp, #64]
     6e0:	ldp	x22, x21, [sp, #48]
     6e4:	ldp	x24, x23, [sp, #32]
     6e8:	ldr	x25, [sp, #16]
     6ec:	ldp	x29, x30, [sp], #80
     6f0:	ret

00000000000006f4 <ctf_dump_funcs>:
     6f4:	sub	sp, sp, #0x80
     6f8:	stp	x29, x30, [sp, #32]
     6fc:	stp	x28, x27, [sp, #48]
     700:	stp	x26, x25, [sp, #64]
     704:	stp	x24, x23, [sp, #80]
     708:	stp	x22, x21, [sp, #96]
     70c:	stp	x20, x19, [sp, #112]
     710:	ldr	x8, [x0, #432]
     714:	add	x29, sp, #0x20
     718:	cbz	x8, 9e0 <ctf_dump_funcs+0x2ec>
     71c:	adrp	x27, 0 <ctf_dump>
     720:	adrp	x22, 0 <ctf_dump>
     724:	adrp	x23, 0 <ctf_dump>
     728:	adrp	x28, 0 <ctf_dump>
     72c:	mov	x19, x0
     730:	mov	x20, x1
     734:	mov	x21, xzr
     738:	add	x27, x27, #0x0
     73c:	add	x22, x22, #0x0
     740:	add	x23, x23, #0x0
     744:	add	x28, x28, #0x0
     748:	ldr	x0, [x20, #8]
     74c:	add	x2, sp, #0x8
     750:	mov	x1, x21
     754:	bl	0 <ctf_func_info>
     758:	mov	w25, w0
     75c:	cmn	w0, #0x1
     760:	b.eq	888 <ctf_dump_funcs+0x194>  // b.none
     764:	ldr	w0, [sp, #16]
     768:	mov	w1, #0x8                   	// #8
     76c:	bl	0 <calloc>
     770:	cbz	x0, 8a8 <ctf_dump_funcs+0x1b4>
     774:	mov	x24, x0
     778:	ldr	x0, [x20, #8]
     77c:	sxtw	x1, w25
     780:	bl	0 <ctf_type_aname>
     784:	cbz	x0, 8b0 <ctf_dump_funcs+0x1bc>
     788:	mov	x1, x23
     78c:	bl	0 <ctf_str_append_noerr>
     790:	mov	x25, x0
     794:	mov	x0, x19
     798:	mov	x1, x21
     79c:	bl	0 <ctf_lookup_symbol_name>
     7a0:	ldrb	w8, [x0]
     7a4:	cbz	w8, 8bc <ctf_dump_funcs+0x1c8>
     7a8:	adrp	x1, 0 <ctf_dump>
     7ac:	mov	x2, x0
     7b0:	sub	x0, x29, #0x8
     7b4:	add	x1, x1, #0x0
     7b8:	mov	x3, x21
     7bc:	bl	0 <asprintf>
     7c0:	tbnz	w0, #31, 8d4 <ctf_dump_funcs+0x1e0>
     7c4:	ldur	x1, [x29, #-8]
     7c8:	mov	x0, x25
     7cc:	bl	0 <ctf_str_append_noerr>
     7d0:	mov	x1, x28
     7d4:	bl	0 <ctf_str_append_noerr>
     7d8:	ldur	x8, [x29, #-8]
     7dc:	mov	x25, x0
     7e0:	mov	x0, x8
     7e4:	bl	0 <free>
     7e8:	ldr	x0, [x20, #8]
     7ec:	ldr	w2, [sp, #16]
     7f0:	mov	x1, x21
     7f4:	mov	x3, x24
     7f8:	bl	0 <ctf_func_args>
     7fc:	tbnz	w0, #31, 900 <ctf_dump_funcs+0x20c>
     800:	ldr	w8, [sp, #16]
     804:	cbz	w8, 90c <ctf_dump_funcs+0x218>
     808:	mov	x28, x23
     80c:	mov	x23, x22
     810:	mov	x22, x27
     814:	mov	x27, xzr
     818:	b	848 <ctf_dump_funcs+0x154>
     81c:	adrp	x1, 0 <ctf_dump>
     820:	mov	x0, x25
     824:	add	x1, x1, #0x0
     828:	bl	0 <ctf_str_append_noerr>
     82c:	mov	x25, x0
     830:	ldur	x0, [x29, #-8]
     834:	bl	0 <free>
     838:	ldr	w8, [sp, #16]
     83c:	add	x27, x27, #0x1
     840:	cmp	x27, x8
     844:	b.cs	918 <ctf_dump_funcs+0x224>  // b.hs, b.nlast
     848:	ldr	x0, [x20, #8]
     84c:	ldr	x1, [x24, x27, lsl #3]
     850:	bl	0 <ctf_type_aname>
     854:	stur	x0, [x29, #-8]
     858:	cbz	x0, 978 <ctf_dump_funcs+0x284>
     85c:	mov	x1, x0
     860:	mov	x0, x25
     864:	bl	0 <ctf_str_append_noerr>
     868:	ldr	w8, [sp, #16]
     86c:	mov	x25, x0
     870:	sub	w8, w8, #0x1
     874:	cmp	x27, x8
     878:	b.cc	81c <ctf_dump_funcs+0x128>  // b.lo, b.ul, b.last
     87c:	ldrb	w8, [sp, #20]
     880:	tbnz	w8, #0, 81c <ctf_dump_funcs+0x128>
     884:	b	830 <ctf_dump_funcs+0x13c>
     888:	ldr	x0, [x20, #8]
     88c:	bl	0 <ctf_errno>
     890:	sub	w8, w0, #0x404
     894:	cmp	w8, #0x3
     898:	b.cc	970 <ctf_dump_funcs+0x27c>  // b.lo, b.ul, b.last
     89c:	cmp	w0, #0x3f2
     8a0:	b.eq	9c4 <ctf_dump_funcs+0x2d0>  // b.none
     8a4:	b	764 <ctf_dump_funcs+0x70>
     8a8:	mov	w1, #0xc                   	// #12
     8ac:	b	8ec <ctf_dump_funcs+0x1f8>
     8b0:	mov	x25, xzr
     8b4:	mov	x26, x27
     8b8:	b	994 <ctf_dump_funcs+0x2a0>
     8bc:	adrp	x1, 0 <ctf_dump>
     8c0:	sub	x0, x29, #0x8
     8c4:	add	x1, x1, #0x0
     8c8:	mov	x2, x21
     8cc:	bl	0 <asprintf>
     8d0:	tbz	w0, #31, 7c4 <ctf_dump_funcs+0xd0>
     8d4:	mov	x0, x24
     8d8:	bl	0 <free>
     8dc:	mov	x0, x25
     8e0:	bl	0 <free>
     8e4:	bl	0 <__errno_location>
     8e8:	ldr	w1, [x0]
     8ec:	mov	x0, x19
     8f0:	bl	0 <ctf_set_errno>
     8f4:	mov	x26, x0
     8f8:	mov	w8, wzr
     8fc:	b	9cc <ctf_dump_funcs+0x2d8>
     900:	adrp	x26, 0 <ctf_dump>
     904:	add	x26, x26, #0x0
     908:	b	994 <ctf_dump_funcs+0x2a0>
     90c:	mov	x28, x23
     910:	mov	x23, x22
     914:	mov	x22, x27
     918:	ldrb	w8, [sp, #20]
     91c:	tbz	w8, #0, 934 <ctf_dump_funcs+0x240>
     920:	adrp	x1, 0 <ctf_dump>
     924:	mov	x0, x25
     928:	add	x1, x1, #0x0
     92c:	bl	0 <ctf_str_append_noerr>
     930:	mov	x25, x0
     934:	adrp	x1, 0 <ctf_dump>
     938:	mov	x27, x22
     93c:	mov	x22, x23
     940:	mov	x23, x28
     944:	adrp	x28, 0 <ctf_dump>
     948:	mov	x0, x25
     94c:	add	x1, x1, #0x0
     950:	add	x28, x28, #0x0
     954:	bl	0 <ctf_str_append_noerr>
     958:	mov	x25, x0
     95c:	mov	x0, x24
     960:	bl	0 <free>
     964:	mov	x0, x20
     968:	mov	x1, x25
     96c:	bl	ca8 <ctf_dump_append>
     970:	mov	w8, #0x1                   	// #1
     974:	b	9cc <ctf_dump_funcs+0x2d8>
     978:	adrp	x26, 0 <ctf_dump>
     97c:	mov	x27, x22
     980:	mov	x22, x23
     984:	mov	x23, x28
     988:	adrp	x28, 0 <ctf_dump>
     98c:	add	x26, x26, #0x0
     990:	add	x28, x28, #0x0
     994:	ldr	x0, [x20, #8]
     998:	bl	0 <ctf_errno>
     99c:	bl	0 <ctf_errmsg>
     9a0:	mov	x3, x0
     9a4:	mov	x0, x22
     9a8:	mov	x1, x26
     9ac:	mov	x2, x21
     9b0:	bl	0 <ctf_dprintf>
     9b4:	mov	x0, x24
     9b8:	bl	0 <free>
     9bc:	mov	x0, x25
     9c0:	bl	0 <free>
     9c4:	mov	w8, wzr
     9c8:	mov	w26, #0xffffffff            	// #-1
     9cc:	tbz	w8, #0, 9e4 <ctf_dump_funcs+0x2f0>
     9d0:	ldr	x8, [x19, #432]
     9d4:	add	x21, x21, #0x1
     9d8:	cmp	x21, x8
     9dc:	b.cc	748 <ctf_dump_funcs+0x54>  // b.lo, b.ul, b.last
     9e0:	mov	w26, wzr
     9e4:	mov	w0, w26
     9e8:	ldp	x20, x19, [sp, #112]
     9ec:	ldp	x22, x21, [sp, #96]
     9f0:	ldp	x24, x23, [sp, #80]
     9f4:	ldp	x26, x25, [sp, #64]
     9f8:	ldp	x28, x27, [sp, #48]
     9fc:	ldp	x29, x30, [sp, #32]
     a00:	add	sp, sp, #0x80
     a04:	ret

0000000000000a08 <ctf_dump_var>:
     a08:	stp	x29, x30, [sp, #-48]!
     a0c:	stp	x20, x19, [sp, #32]
     a10:	mov	x29, sp
     a14:	mov	x20, x1
     a18:	adrp	x1, 0 <ctf_dump>
     a1c:	mov	x19, x2
     a20:	mov	x2, x0
     a24:	add	x1, x1, #0x0
     a28:	add	x0, x29, #0x18
     a2c:	str	x21, [sp, #16]
     a30:	bl	0 <asprintf>
     a34:	ldr	x21, [x19, #8]
     a38:	tbnz	w0, #31, a84 <ctf_dump_var+0x7c>
     a3c:	mov	w2, #0x1                   	// #1
     a40:	mov	x0, x21
     a44:	mov	x1, x20
     a48:	bl	de0 <ctf_dump_format_type>
     a4c:	ldr	x8, [x29, #24]
     a50:	cbz	x0, a98 <ctf_dump_var+0x90>
     a54:	mov	x20, x0
     a58:	mov	x0, x8
     a5c:	mov	x1, x20
     a60:	bl	0 <ctf_str_append_noerr>
     a64:	str	x0, [x29, #24]
     a68:	mov	x0, x20
     a6c:	bl	0 <free>
     a70:	ldr	x1, [x29, #24]
     a74:	mov	x0, x19
     a78:	bl	ca8 <ctf_dump_append>
     a7c:	mov	w0, wzr
     a80:	b	aa4 <ctf_dump_var+0x9c>
     a84:	bl	0 <__errno_location>
     a88:	ldr	w1, [x0]
     a8c:	mov	x0, x21
     a90:	bl	0 <ctf_set_errno>
     a94:	b	aa4 <ctf_dump_var+0x9c>
     a98:	mov	x0, x8
     a9c:	bl	0 <free>
     aa0:	mov	w0, #0xffffffff            	// #-1
     aa4:	ldp	x20, x19, [sp, #32]
     aa8:	ldr	x21, [sp, #16]
     aac:	ldp	x29, x30, [sp], #48
     ab0:	ret

0000000000000ab4 <ctf_dump_type>:
     ab4:	sub	sp, sp, #0x40
     ab8:	stp	x29, x30, [sp, #16]
     abc:	stp	x20, x19, [sp, #48]
     ac0:	mov	x19, x2
     ac4:	mov	x20, x0
     ac8:	ldr	x0, [x19, #8]
     acc:	add	x29, sp, #0x10
     ad0:	mov	w2, w1
     ad4:	add	x8, x29, #0x18
     ad8:	mov	x1, x20
     adc:	str	x21, [sp, #32]
     ae0:	stp	x8, x0, [sp]
     ae4:	bl	de0 <ctf_dump_format_type>
     ae8:	str	x0, [x29, #24]
     aec:	cbz	x0, b40 <ctf_dump_type+0x8c>
     af0:	adrp	x1, 0 <ctf_dump>
     af4:	add	x1, x1, #0x0
     af8:	bl	0 <ctf_str_append_noerr>
     afc:	str	x0, [x29, #24]
     b00:	ldr	x0, [x19, #8]
     b04:	adrp	x2, 0 <ctf_dump>
     b08:	add	x2, x2, #0x0
     b0c:	mov	x3, sp
     b10:	mov	x1, x20
     b14:	bl	0 <ctf_type_visit>
     b18:	tbnz	w0, #31, b7c <ctf_dump_type+0xc8>
     b1c:	ldr	x20, [x29, #24]
     b20:	mov	x0, x20
     b24:	bl	0 <strlen>
     b28:	sub	x8, x0, #0x1
     b2c:	ldrb	w9, [x20, x8]
     b30:	cmp	w9, #0xa
     b34:	b.ne	b90 <ctf_dump_type+0xdc>  // b.any
     b38:	strb	wzr, [x20, x8]
     b3c:	b	b90 <ctf_dump_type+0xdc>
     b40:	adrp	x21, 0 <ctf_dump>
     b44:	add	x21, x21, #0x0
     b48:	ldr	x0, [x19, #8]
     b4c:	bl	0 <ctf_errno>
     b50:	bl	0 <ctf_errmsg>
     b54:	mov	x3, x0
     b58:	adrp	x0, 0 <ctf_dump>
     b5c:	add	x0, x0, #0x0
     b60:	mov	x1, x21
     b64:	mov	x2, x20
     b68:	bl	0 <ctf_dprintf>
     b6c:	ldr	x0, [x29, #24]
     b70:	bl	0 <free>
     b74:	mov	w0, #0xffffffff            	// #-1
     b78:	b	ba0 <ctf_dump_type+0xec>
     b7c:	cbz	x20, b90 <ctf_dump_type+0xdc>
     b80:	ldr	x0, [x19, #8]
     b84:	bl	0 <ctf_errno>
     b88:	cmp	w0, #0x41b
     b8c:	b.ne	bb4 <ctf_dump_type+0x100>  // b.any
     b90:	ldr	x1, [x29, #24]
     b94:	mov	x0, x19
     b98:	bl	ca8 <ctf_dump_append>
     b9c:	mov	w0, wzr
     ba0:	ldp	x20, x19, [sp, #48]
     ba4:	ldr	x21, [sp, #32]
     ba8:	ldp	x29, x30, [sp, #16]
     bac:	add	sp, sp, #0x40
     bb0:	ret
     bb4:	adrp	x21, 0 <ctf_dump>
     bb8:	add	x21, x21, #0x0
     bbc:	b	b48 <ctf_dump_type+0x94>

0000000000000bc0 <ctf_dump_str>:
     bc0:	sub	sp, sp, #0x40
     bc4:	stp	x29, x30, [sp, #16]
     bc8:	stp	x22, x21, [sp, #32]
     bcc:	stp	x20, x19, [sp, #48]
     bd0:	ldr	x21, [x0, #336]
     bd4:	adrp	x22, 0 <ctf_dump>
     bd8:	mov	x19, x1
     bdc:	mov	x20, x0
     be0:	add	x22, x22, #0x0
     be4:	add	x29, sp, #0x10
     be8:	b	c04 <ctf_dump_str+0x44>
     bec:	bl	0 <__errno_location>
     bf0:	ldr	w1, [x0]
     bf4:	mov	x0, x20
     bf8:	bl	0 <ctf_set_errno>
     bfc:	mov	w8, wzr
     c00:	tbz	w8, #0, c54 <ctf_dump_str+0x94>
     c04:	ldp	x8, x9, [x20, #336]
     c08:	add	x8, x8, x9
     c0c:	cmp	x21, x8
     c10:	b.cs	c54 <ctf_dump_str+0x94>  // b.hs, b.nlast
     c14:	ldr	x8, [x20, #336]
     c18:	add	x0, sp, #0x8
     c1c:	mov	x1, x22
     c20:	mov	x3, x21
     c24:	sub	x2, x21, x8
     c28:	bl	0 <asprintf>
     c2c:	tbnz	w0, #31, bec <ctf_dump_str+0x2c>
     c30:	ldr	x1, [sp, #8]
     c34:	mov	x0, x19
     c38:	bl	ca8 <ctf_dump_append>
     c3c:	mov	x0, x21
     c40:	bl	0 <strlen>
     c44:	add	x8, x0, x21
     c48:	add	x21, x8, #0x1
     c4c:	mov	w8, #0x1                   	// #1
     c50:	tbnz	w8, #0, c04 <ctf_dump_str+0x44>
     c54:	ldp	x20, x19, [sp, #48]
     c58:	ldp	x22, x21, [sp, #32]
     c5c:	ldp	x29, x30, [sp, #16]
     c60:	add	sp, sp, #0x40
     c64:	ret

0000000000000c68 <ctf_dump_free>:
     c68:	stp	x29, x30, [sp, #-32]!
     c6c:	stp	x20, x19, [sp, #16]
     c70:	mov	x29, sp
     c74:	cbz	x0, c9c <ctf_dump_free+0x34>
     c78:	ldr	x19, [x0, #32]
     c7c:	cbz	x19, c9c <ctf_dump_free+0x34>
     c80:	ldr	x0, [x19, #16]
     c84:	bl	0 <free>
     c88:	ldr	x20, [x19, #8]
     c8c:	mov	x0, x19
     c90:	bl	0 <free>
     c94:	mov	x19, x20
     c98:	cbnz	x20, c80 <ctf_dump_free+0x18>
     c9c:	ldp	x20, x19, [sp, #16]
     ca0:	ldp	x29, x30, [sp], #32
     ca4:	ret

0000000000000ca8 <ctf_dump_append>:
     ca8:	stp	x29, x30, [sp, #-32]!
     cac:	stp	x20, x19, [sp, #16]
     cb0:	mov	x19, x0
     cb4:	mov	w0, #0x18                  	// #24
     cb8:	mov	x29, sp
     cbc:	mov	x20, x1
     cc0:	bl	0 <malloc>
     cc4:	cbz	x0, cdc <ctf_dump_append+0x34>
     cc8:	mov	x1, x0
     ccc:	str	x20, [x0, #16]
     cd0:	add	x0, x19, #0x18
     cd4:	bl	0 <ctf_list_append>
     cd8:	b	ce8 <ctf_dump_append+0x40>
     cdc:	ldr	x0, [x19, #8]
     ce0:	mov	w1, #0xc                   	// #12
     ce4:	bl	0 <ctf_set_errno>
     ce8:	ldp	x20, x19, [sp, #16]
     cec:	ldp	x29, x30, [sp], #32
     cf0:	ret

0000000000000cf4 <ctf_dump_header_strfield>:
     cf4:	stp	x29, x30, [sp, #-48]!
     cf8:	str	x21, [sp, #16]
     cfc:	stp	x20, x19, [sp, #32]
     d00:	mov	x29, sp
     d04:	cbz	w3, d44 <ctf_dump_header_strfield+0x50>
     d08:	mov	x20, x1
     d0c:	mov	w1, w3
     d10:	mov	x21, x2
     d14:	mov	x19, x0
     d18:	bl	0 <ctf_strptr>
     d1c:	adrp	x1, 0 <ctf_dump>
     d20:	mov	x3, x0
     d24:	add	x1, x1, #0x0
     d28:	add	x0, x29, #0x18
     d2c:	mov	x2, x21
     d30:	bl	0 <asprintf>
     d34:	tbnz	w0, #31, d4c <ctf_dump_header_strfield+0x58>
     d38:	ldr	x1, [x29, #24]
     d3c:	mov	x0, x20
     d40:	bl	ca8 <ctf_dump_append>
     d44:	mov	w0, wzr
     d48:	b	d5c <ctf_dump_header_strfield+0x68>
     d4c:	bl	0 <__errno_location>
     d50:	ldr	w1, [x0]
     d54:	mov	x0, x19
     d58:	bl	0 <ctf_set_errno>
     d5c:	ldp	x20, x19, [sp, #32]
     d60:	ldr	x21, [sp, #16]
     d64:	ldp	x29, x30, [sp], #48
     d68:	ret

0000000000000d6c <ctf_dump_header_sectfield>:
     d6c:	sub	sp, sp, #0x30
     d70:	subs	w8, w4, w3
     d74:	stp	x29, x30, [sp, #16]
     d78:	stp	x20, x19, [sp, #32]
     d7c:	add	x29, sp, #0x10
     d80:	b.eq	db8 <ctf_dump_header_sectfield+0x4c>  // b.none
     d84:	mov	x20, x1
     d88:	adrp	x1, 0 <ctf_dump>
     d8c:	mov	x19, x0
     d90:	mov	w3, w3
     d94:	sub	w4, w4, #0x1
     d98:	mov	w5, w8
     d9c:	add	x1, x1, #0x0
     da0:	add	x0, sp, #0x8
     da4:	bl	0 <asprintf>
     da8:	tbnz	w0, #31, dc0 <ctf_dump_header_sectfield+0x54>
     dac:	ldr	x1, [sp, #8]
     db0:	mov	x0, x20
     db4:	bl	ca8 <ctf_dump_append>
     db8:	mov	w0, wzr
     dbc:	b	dd0 <ctf_dump_header_sectfield+0x64>
     dc0:	bl	0 <__errno_location>
     dc4:	ldr	w1, [x0]
     dc8:	mov	x0, x19
     dcc:	bl	0 <ctf_set_errno>
     dd0:	ldp	x20, x19, [sp, #32]
     dd4:	ldp	x29, x30, [sp, #16]
     dd8:	add	sp, sp, #0x30
     ddc:	ret

0000000000000de0 <ctf_dump_format_type>:
     de0:	sub	sp, sp, #0x80
     de4:	adrp	x8, 0 <ctf_dump>
     de8:	adrp	x9, 0 <ctf_dump>
     dec:	adrp	x10, 0 <ctf_dump>
     df0:	stp	x28, x27, [sp, #48]
     df4:	stp	x24, x23, [sp, #80]
     df8:	stp	x22, x21, [sp, #96]
     dfc:	add	x8, x8, #0x0
     e00:	add	x9, x9, #0x0
     e04:	cmp	w2, #0x0
     e08:	add	x10, x10, #0x0
     e0c:	adrp	x22, 0 <ctf_dump>
     e10:	adrp	x24, 0 <ctf_dump>
     e14:	adrp	x27, 0 <ctf_dump>
     e18:	stp	x29, x30, [sp, #32]
     e1c:	stp	x26, x25, [sp, #64]
     e20:	stp	x20, x19, [sp, #112]
     e24:	add	x29, sp, #0x20
     e28:	mov	x21, x1
     e2c:	mov	x20, x0
     e30:	mov	x19, xzr
     e34:	add	x22, x22, #0x0
     e38:	add	x24, x24, #0x0
     e3c:	csel	x25, x9, x8, eq  // eq = none
     e40:	csel	x26, x10, x8, eq  // eq = none
     e44:	add	x27, x27, #0x0
     e48:	stur	xzr, [x29, #-8]
     e4c:	b	e80 <ctf_dump_format_type+0xa0>
     e50:	mov	x0, x19
     e54:	mov	x1, x22
     e58:	bl	0 <ctf_str_append_noerr>
     e5c:	mov	x19, x0
     e60:	mov	w1, #0x400                 	// #1024
     e64:	mov	x0, x20
     e68:	bl	0 <ctf_set_errno>
     e6c:	mov	x28, xzr
     e70:	mov	w8, #0x2                   	// #2
     e74:	cbnz	w8, fac <ctf_dump_format_type+0x1cc>
     e78:	cmn	x21, #0x1
     e7c:	b.eq	fec <ctf_dump_format_type+0x20c>  // b.none
     e80:	mov	x0, x20
     e84:	mov	x1, x21
     e88:	bl	0 <ctf_type_aname>
     e8c:	cbz	x0, f38 <ctf_dump_format_type+0x158>
     e90:	mov	x28, x0
     e94:	add	x2, sp, #0x8
     e98:	mov	x0, x20
     e9c:	mov	x1, x21
     ea0:	bl	1030 <ctf_is_slice>
     ea4:	cbz	w0, f5c <ctf_dump_format_type+0x17c>
     ea8:	add	x2, sp, #0x8
     eac:	mov	x0, x20
     eb0:	mov	x1, x21
     eb4:	bl	0 <ctf_type_encoding>
     eb8:	ldp	w4, w5, [sp, #12]
     ebc:	sub	x0, x29, #0x8
     ec0:	mov	x1, x27
     ec4:	mov	x2, x25
     ec8:	mov	x3, x21
     ecc:	mov	x6, x26
     ed0:	bl	0 <asprintf>
     ed4:	tbnz	w0, #31, fa4 <ctf_dump_format_type+0x1c4>
     ed8:	mov	x0, x28
     edc:	bl	0 <free>
     ee0:	ldur	x1, [x29, #-8]
     ee4:	mov	x0, x19
     ee8:	bl	0 <ctf_str_append_noerr>
     eec:	ldur	x8, [x29, #-8]
     ef0:	mov	x19, x0
     ef4:	mov	x0, x8
     ef8:	bl	0 <free>
     efc:	mov	x0, x20
     f00:	mov	x1, x21
     f04:	stur	xzr, [x29, #-8]
     f08:	bl	0 <ctf_type_reference>
     f0c:	mov	x21, x0
     f10:	cmn	x0, #0x1
     f14:	b.eq	f28 <ctf_dump_format_type+0x148>  // b.none
     f18:	mov	x0, x19
     f1c:	mov	x1, x24
     f20:	bl	0 <ctf_str_append_noerr>
     f24:	mov	x19, x0
     f28:	mov	x28, xzr
     f2c:	mov	w8, wzr
     f30:	cbz	w8, e78 <ctf_dump_format_type+0x98>
     f34:	b	fac <ctf_dump_format_type+0x1cc>
     f38:	cbz	x21, e50 <ctf_dump_format_type+0x70>
     f3c:	mov	x0, x20
     f40:	bl	0 <ctf_errno>
     f44:	cmp	w0, #0x41b
     f48:	b.eq	e50 <ctf_dump_format_type+0x70>  // b.none
     f4c:	mov	x28, xzr
     f50:	mov	w8, #0x4                   	// #4
     f54:	cbz	w8, e78 <ctf_dump_format_type+0x98>
     f58:	b	fac <ctf_dump_format_type+0x1cc>
     f5c:	ldrb	w8, [x28]
     f60:	mov	x0, x20
     f64:	mov	x1, x21
     f68:	cmp	w8, #0x0
     f6c:	adrp	x8, 0 <ctf_dump>
     f70:	add	x8, x8, #0x0
     f74:	csel	x23, x8, x28, eq  // eq = none
     f78:	bl	0 <ctf_type_size>
     f7c:	adrp	x1, 0 <ctf_dump>
     f80:	mov	x5, x0
     f84:	sub	x0, x29, #0x8
     f88:	add	x1, x1, #0x0
     f8c:	mov	x2, x25
     f90:	mov	x3, x21
     f94:	mov	x4, x23
     f98:	mov	x6, x26
     f9c:	bl	0 <asprintf>
     fa0:	tbz	w0, #31, ed8 <ctf_dump_format_type+0xf8>
     fa4:	mov	w8, #0x5                   	// #5
     fa8:	cbz	w8, e78 <ctf_dump_format_type+0x98>
     fac:	cmp	w8, #0x2
     fb0:	b.eq	fec <ctf_dump_format_type+0x20c>  // b.none
     fb4:	cmp	w8, #0x4
     fb8:	b.eq	fd4 <ctf_dump_format_type+0x1f4>  // b.none
     fbc:	cmp	w8, #0x5
     fc0:	b.ne	102c <ctf_dump_format_type+0x24c>  // b.any
     fc4:	bl	0 <__errno_location>
     fc8:	ldr	w1, [x0]
     fcc:	mov	x0, x20
     fd0:	bl	0 <ctf_set_errno>
     fd4:	mov	x0, x28
     fd8:	bl	0 <free>
     fdc:	mov	x0, x19
     fe0:	bl	0 <free>
     fe4:	ldur	x0, [x29, #-8]
     fe8:	b	1000 <ctf_dump_format_type+0x220>
     fec:	mov	x0, x20
     ff0:	bl	0 <ctf_errno>
     ff4:	cmp	w0, #0x400
     ff8:	b.eq	1008 <ctf_dump_format_type+0x228>  // b.none
     ffc:	mov	x0, x19
    1000:	bl	0 <free>
    1004:	mov	x19, xzr
    1008:	mov	x0, x19
    100c:	ldp	x20, x19, [sp, #112]
    1010:	ldp	x22, x21, [sp, #96]
    1014:	ldp	x24, x23, [sp, #80]
    1018:	ldp	x26, x25, [sp, #64]
    101c:	ldp	x28, x27, [sp, #48]
    1020:	ldp	x29, x30, [sp, #32]
    1024:	add	sp, sp, #0x80
    1028:	ret
    102c:	b	1008 <ctf_dump_format_type+0x228>

0000000000001030 <ctf_is_slice>:
    1030:	stp	x29, x30, [sp, #-48]!
    1034:	str	x21, [sp, #16]
    1038:	stp	x20, x19, [sp, #32]
    103c:	mov	x29, sp
    1040:	mov	x19, x2
    1044:	mov	x20, x1
    1048:	mov	x21, x0
    104c:	bl	0 <ctf_type_kind>
    1050:	mov	w8, w0
    1054:	cmp	w0, #0x8
    1058:	mov	w0, wzr
    105c:	b.hi	10a8 <ctf_is_slice+0x78>  // b.pmore
    1060:	mov	w9, #0x1                   	// #1
    1064:	lsl	w8, w9, w8
    1068:	mov	w9, #0x106                 	// #262
    106c:	tst	w8, w9
    1070:	b.eq	10a8 <ctf_is_slice+0x78>  // b.none
    1074:	mov	x0, x21
    1078:	mov	x1, x20
    107c:	bl	0 <ctf_type_reference>
    1080:	cmn	x0, #0x1
    1084:	b.eq	10a4 <ctf_is_slice+0x74>  // b.none
    1088:	mov	x0, x21
    108c:	mov	x1, x20
    1090:	mov	x2, x19
    1094:	bl	0 <ctf_type_encoding>
    1098:	cmp	w0, #0x0
    109c:	cset	w0, eq  // eq = none
    10a0:	b	10a8 <ctf_is_slice+0x78>
    10a4:	mov	w0, wzr
    10a8:	ldp	x20, x19, [sp, #32]
    10ac:	ldr	x21, [sp, #16]
    10b0:	ldp	x29, x30, [sp], #48
    10b4:	ret

00000000000010b8 <ctf_dump_member>:
    10b8:	sub	sp, sp, #0x60
    10bc:	stp	x29, x30, [sp, #32]
    10c0:	stp	x22, x21, [sp, #64]
    10c4:	stp	x20, x19, [sp, #80]
    10c8:	add	x29, sp, #0x20
    10cc:	mov	x19, x4
    10d0:	mov	x21, x2
    10d4:	mov	x20, x1
    10d8:	mov	x22, x0
    10dc:	cmp	w3, #0x1
    10e0:	stp	x24, x23, [sp, #48]
    10e4:	stur	xzr, [x29, #-8]
    10e8:	b.lt	1118 <ctf_dump_member+0x60>  // b.tstop
    10ec:	adrp	x23, 0 <ctf_dump>
    10f0:	sxtw	x24, w3
    10f4:	add	x23, x23, #0x0
    10f8:	ldr	x8, [x19]
    10fc:	mov	x1, x23
    1100:	ldr	x0, [x8]
    1104:	bl	0 <ctf_str_append_noerr>
    1108:	ldr	x8, [x19]
    110c:	subs	x24, x24, #0x1
    1110:	str	x0, [x8]
    1114:	b.ne	10f8 <ctf_dump_member+0x40>  // b.any
    1118:	ldr	x0, [x19, #8]
    111c:	mov	x1, x20
    1120:	bl	0 <ctf_type_aname>
    1124:	cbz	x0, 125c <ctf_dump_member+0x1a4>
    1128:	mov	x23, x0
    112c:	ldr	x0, [x19, #8]
    1130:	mov	x1, x20
    1134:	bl	0 <ctf_type_kind>
    1138:	ldr	x8, [x19, #8]
    113c:	mov	w24, w0
    1140:	mov	x1, x20
    1144:	mov	x0, x8
    1148:	bl	0 <ctf_type_align>
    114c:	adrp	x1, 0 <ctf_dump>
    1150:	mov	x7, x0
    1154:	add	x1, x1, #0x0
    1158:	sub	x0, x29, #0x8
    115c:	mov	x2, x21
    1160:	mov	x3, x20
    1164:	mov	w4, w24
    1168:	mov	x5, x23
    116c:	mov	x6, x22
    1170:	bl	0 <asprintf>
    1174:	tbnz	w0, #31, 12b4 <ctf_dump_member+0x1fc>
    1178:	ldr	x8, [x19]
    117c:	ldur	x1, [x29, #-8]
    1180:	ldr	x0, [x8]
    1184:	bl	0 <ctf_str_append_noerr>
    1188:	ldr	x8, [x19]
    118c:	str	x0, [x8]
    1190:	mov	x0, x23
    1194:	bl	0 <free>
    1198:	ldur	x0, [x29, #-8]
    119c:	bl	0 <free>
    11a0:	stur	xzr, [x29, #-8]
    11a4:	ldr	x0, [x19, #8]
    11a8:	mov	x1, x20
    11ac:	bl	0 <ctf_type_kind>
    11b0:	cmp	w0, #0x1
    11b4:	b.eq	11e4 <ctf_dump_member+0x12c>  // b.none
    11b8:	ldr	x0, [x19, #8]
    11bc:	mov	x1, x20
    11c0:	bl	0 <ctf_type_kind>
    11c4:	cmp	w0, #0x2
    11c8:	b.eq	11e4 <ctf_dump_member+0x12c>  // b.none
    11cc:	ldr	x0, [x19, #8]
    11d0:	add	x2, sp, #0x8
    11d4:	mov	x1, x20
    11d8:	bl	1030 <ctf_is_slice>
    11dc:	cmp	w0, #0x8
    11e0:	b.ne	1234 <ctf_dump_member+0x17c>  // b.any
    11e4:	ldr	x0, [x19, #8]
    11e8:	add	x2, sp, #0x8
    11ec:	mov	x1, x20
    11f0:	bl	0 <ctf_type_encoding>
    11f4:	ldp	w2, w3, [sp, #8]
    11f8:	ldr	w4, [sp, #16]
    11fc:	adrp	x1, 0 <ctf_dump>
    1200:	add	x1, x1, #0x0
    1204:	sub	x0, x29, #0x8
    1208:	bl	0 <asprintf>
    120c:	tbnz	w0, #31, 12b0 <ctf_dump_member+0x1f8>
    1210:	ldr	x8, [x19]
    1214:	ldur	x1, [x29, #-8]
    1218:	ldr	x0, [x8]
    121c:	bl	0 <ctf_str_append_noerr>
    1220:	ldr	x8, [x19]
    1224:	str	x0, [x8]
    1228:	ldur	x0, [x29, #-8]
    122c:	bl	0 <free>
    1230:	stur	xzr, [x29, #-8]
    1234:	ldr	x8, [x19]
    1238:	adrp	x1, 0 <ctf_dump>
    123c:	add	x1, x1, #0x0
    1240:	ldr	x0, [x8]
    1244:	bl	0 <ctf_str_append_noerr>
    1248:	ldr	x9, [x19]
    124c:	mov	x8, x0
    1250:	mov	w0, wzr
    1254:	str	x8, [x9]
    1258:	b	12d8 <ctf_dump_member+0x220>
    125c:	cbz	x20, 1270 <ctf_dump_member+0x1b8>
    1260:	ldr	x0, [x19, #8]
    1264:	bl	0 <ctf_errno>
    1268:	cmp	w0, #0x41b
    126c:	b.ne	12b0 <ctf_dump_member+0x1f8>  // b.any
    1270:	adrp	x1, 0 <ctf_dump>
    1274:	add	x1, x1, #0x0
    1278:	sub	x0, x29, #0x8
    127c:	mov	x2, x21
    1280:	bl	0 <asprintf>
    1284:	tbnz	w0, #31, 12b0 <ctf_dump_member+0x1f8>
    1288:	ldr	x8, [x19]
    128c:	ldur	x1, [x29, #-8]
    1290:	ldr	x0, [x8]
    1294:	bl	0 <ctf_str_append_noerr>
    1298:	ldr	x8, [x19]
    129c:	str	x0, [x8]
    12a0:	ldur	x0, [x29, #-8]
    12a4:	bl	0 <free>
    12a8:	mov	w0, wzr
    12ac:	b	12d8 <ctf_dump_member+0x220>
    12b0:	mov	x23, xzr
    12b4:	mov	x0, x23
    12b8:	bl	0 <free>
    12bc:	ldur	x0, [x29, #-8]
    12c0:	bl	0 <free>
    12c4:	ldr	x19, [x19, #8]
    12c8:	bl	0 <__errno_location>
    12cc:	ldr	w1, [x0]
    12d0:	mov	x0, x19
    12d4:	bl	0 <ctf_set_errno>
    12d8:	ldp	x20, x19, [sp, #80]
    12dc:	ldp	x22, x21, [sp, #64]
    12e0:	ldp	x24, x23, [sp, #48]
    12e4:	ldp	x29, x30, [sp, #32]
    12e8:	add	sp, sp, #0x60
    12ec:	ret

ctf-create.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_create>:
       0:	sub	sp, sp, #0x70
       4:	stp	x29, x30, [sp, #32]
       8:	stp	x26, x25, [sp, #48]
       c:	stp	x24, x23, [sp, #64]
      10:	stp	x22, x21, [sp, #80]
      14:	stp	x20, x19, [sp, #96]
      18:	add	x29, sp, #0x20
      1c:	mov	x19, x0
      20:	bl	0 <libctf_init_debug>
      24:	adrp	x0, 0 <ctf_hash_integer>
      28:	adrp	x1, 0 <ctf_hash_eq_integer>
      2c:	add	x0, x0, #0x0
      30:	add	x1, x1, #0x0
      34:	mov	x2, xzr
      38:	mov	x3, xzr
      3c:	bl	0 <ctf_dynhash_create>
      40:	cbz	x0, 194 <ctf_create+0x194>
      44:	mov	x20, x0
      48:	adrp	x0, 0 <ctf_hash_string>
      4c:	adrp	x1, 0 <ctf_hash_eq_string>
      50:	add	x0, x0, #0x0
      54:	add	x1, x1, #0x0
      58:	mov	x2, xzr
      5c:	mov	x3, xzr
      60:	bl	0 <ctf_dynhash_create>
      64:	cbz	x0, 1a4 <ctf_create+0x1a4>
      68:	adrp	x25, 0 <ctf_hash_string>
      6c:	adrp	x26, 0 <ctf_hash_eq_string>
      70:	add	x25, x25, #0x0
      74:	add	x26, x26, #0x0
      78:	mov	x21, x0
      7c:	mov	x0, x25
      80:	mov	x1, x26
      84:	mov	x2, xzr
      88:	mov	x3, xzr
      8c:	bl	0 <ctf_dynhash_create>
      90:	mov	x22, x0
      94:	mov	x0, x25
      98:	mov	x1, x26
      9c:	mov	x2, xzr
      a0:	mov	x3, xzr
      a4:	bl	0 <ctf_dynhash_create>
      a8:	mov	x23, x0
      ac:	mov	x0, x25
      b0:	mov	x1, x26
      b4:	mov	x2, xzr
      b8:	mov	x3, xzr
      bc:	bl	0 <ctf_dynhash_create>
      c0:	mov	x24, x0
      c4:	mov	x0, x25
      c8:	mov	x1, x26
      cc:	mov	x2, xzr
      d0:	mov	x3, xzr
      d4:	bl	0 <ctf_dynhash_create>
      d8:	mov	x25, x0
      dc:	cbz	x22, 1b4 <ctf_create+0x1b4>
      e0:	cbz	x23, 1b4 <ctf_create+0x1b4>
      e4:	cbz	x24, 1b4 <ctf_create+0x1b4>
      e8:	cbz	x25, 1b4 <ctf_create+0x1b4>
      ec:	adrp	x8, 0 <_CTF_SECTION>
      f0:	adrp	x9, 0 <ctf_create>
      f4:	add	x8, x8, #0x0
      f8:	add	x9, x9, #0x0
      fc:	mov	w10, #0x34                  	// #52
     100:	mov	w11, #0x1                   	// #1
     104:	mov	x0, sp
     108:	mov	w4, #0x1                   	// #1
     10c:	mov	x1, xzr
     110:	mov	x2, xzr
     114:	mov	x3, xzr
     118:	mov	x5, x19
     11c:	stp	x8, x9, [sp]
     120:	stp	x10, x11, [sp, #16]
     124:	bl	0 <ctf_bufopen_internal>
     128:	cbz	x0, 1c0 <ctf_create+0x1c0>
     12c:	mov	w8, #0x1                   	// #1
     130:	mov	x26, x0
     134:	str	x22, [x0, #160]
     138:	str	x23, [x0, #176]
     13c:	str	x24, [x0, #192]
     140:	str	x25, [x0, #208]
     144:	str	x20, [x0, #568]
     148:	str	x21, [x0, #592]
     14c:	str	xzr, [x0, #616]
     150:	str	x8, [x0, #624]
     154:	str	xzr, [x0, #632]
     158:	bl	0 <ctf_set_ctl_hashes>
     15c:	mov	w1, #0x2                   	// #2
     160:	mov	x0, x26
     164:	bl	0 <ctf_setmodel>
     168:	mov	x0, x26
     16c:	bl	214 <ctf_grow_ptrtab>
     170:	tbz	w0, #31, 1f4 <ctf_create+0x1f4>
     174:	mov	x0, x26
     178:	bl	0 <ctf_errno>
     17c:	mov	w1, w0
     180:	mov	x0, x19
     184:	bl	0 <ctf_set_open_errno>
     188:	mov	x0, x26
     18c:	bl	0 <ctf_file_close>
     190:	b	1f0 <ctf_create+0x1f0>
     194:	mov	w1, #0xb                   	// #11
     198:	mov	x0, x19
     19c:	bl	0 <ctf_set_open_errno>
     1a0:	b	1f0 <ctf_create+0x1f0>
     1a4:	mov	w1, #0xb                   	// #11
     1a8:	mov	x0, x19
     1ac:	bl	0 <ctf_set_open_errno>
     1b0:	b	1e8 <ctf_create+0x1e8>
     1b4:	mov	w1, #0xb                   	// #11
     1b8:	mov	x0, x19
     1bc:	bl	0 <ctf_set_open_errno>
     1c0:	mov	x0, x22
     1c4:	bl	0 <ctf_dynhash_destroy>
     1c8:	mov	x0, x23
     1cc:	bl	0 <ctf_dynhash_destroy>
     1d0:	mov	x0, x24
     1d4:	bl	0 <ctf_dynhash_destroy>
     1d8:	mov	x0, x25
     1dc:	bl	0 <ctf_dynhash_destroy>
     1e0:	mov	x0, x21
     1e4:	bl	0 <ctf_dynhash_destroy>
     1e8:	mov	x0, x20
     1ec:	bl	0 <ctf_dynhash_destroy>
     1f0:	mov	x26, xzr
     1f4:	mov	x0, x26
     1f8:	ldp	x20, x19, [sp, #96]
     1fc:	ldp	x22, x21, [sp, #80]
     200:	ldp	x24, x23, [sp, #64]
     204:	ldp	x26, x25, [sp, #48]
     208:	ldp	x29, x30, [sp, #32]
     20c:	add	sp, sp, #0x70
     210:	ret

0000000000000214 <ctf_grow_ptrtab>:
     214:	stp	x29, x30, [sp, #-32]!
     218:	stp	x20, x19, [sp, #16]
     21c:	ldp	x9, x8, [x0, #448]
     220:	mov	x19, x0
     224:	mov	x29, sp
     228:	cbz	x9, 25c <ctf_grow_ptrtab+0x48>
     22c:	ldr	x9, [x19, #480]
     230:	mov	x20, x8
     234:	add	x9, x9, #0x2
     238:	cmp	x9, x8
     23c:	b.ls	250 <ctf_grow_ptrtab+0x3c>  // b.plast
     240:	ucvtf	d0, x8
     244:	fmov	d1, #1.250000000000000000e+00
     248:	fmul	d0, d0, d1
     24c:	fcvtzu	x20, d0
     250:	cmp	x20, x8
     254:	b.ne	268 <ctf_grow_ptrtab+0x54>  // b.any
     258:	b	2a0 <ctf_grow_ptrtab+0x8c>
     25c:	mov	w20, #0x400                 	// #1024
     260:	cmp	x20, x8
     264:	b.eq	2a0 <ctf_grow_ptrtab+0x8c>  // b.none
     268:	ldr	x0, [x19, #448]
     26c:	lsl	x1, x20, #2
     270:	bl	0 <realloc>
     274:	cbz	x0, 2b0 <ctf_grow_ptrtab+0x9c>
     278:	ldr	x8, [x19, #456]
     27c:	str	x0, [x19, #448]
     280:	mov	w1, wzr
     284:	add	x0, x0, x8, lsl #2
     288:	sub	x8, x20, x8
     28c:	lsl	x2, x8, #2
     290:	bl	0 <memset>
     294:	mov	w8, #0x1                   	// #1
     298:	str	x20, [x19, #456]
     29c:	cbz	w8, 2a4 <ctf_grow_ptrtab+0x90>
     2a0:	mov	w0, wzr
     2a4:	ldp	x20, x19, [sp, #16]
     2a8:	ldp	x29, x30, [sp], #32
     2ac:	ret
     2b0:	mov	w1, #0xc                   	// #12
     2b4:	mov	x0, x19
     2b8:	bl	0 <ctf_set_errno>
     2bc:	mov	w8, wzr
     2c0:	cbnz	w8, 2a0 <ctf_grow_ptrtab+0x8c>
     2c4:	b	2a4 <ctf_grow_ptrtab+0x90>

00000000000002c8 <ctf_update>:
     2c8:	stp	x29, x30, [sp, #-16]!
     2cc:	ldrb	w9, [x0, #552]
     2d0:	mov	x8, x0
     2d4:	mov	x29, sp
     2d8:	tbnz	w9, #1, 2f0 <ctf_update+0x28>
     2dc:	mov	w1, #0x40d                 	// #1037
     2e0:	mov	x0, x8
     2e4:	bl	0 <ctf_set_errno>
     2e8:	ldp	x29, x30, [sp], #16
     2ec:	ret
     2f0:	ldr	x9, [x8, #480]
     2f4:	mov	w0, wzr
     2f8:	str	x9, [x8, #616]
     2fc:	ldp	x29, x30, [sp], #16
     300:	ret

0000000000000304 <ctf_serialize>:
     304:	stp	x29, x30, [sp, #-96]!
     308:	stp	x28, x27, [sp, #16]
     30c:	stp	x26, x25, [sp, #32]
     310:	stp	x24, x23, [sp, #48]
     314:	stp	x22, x21, [sp, #64]
     318:	stp	x20, x19, [sp, #80]
     31c:	mov	x29, sp
     320:	sub	sp, sp, #0x370
     324:	ldr	w8, [x0, #552]
     328:	mov	x19, x0
     32c:	tbnz	w8, #1, 340 <ctf_serialize+0x3c>
     330:	mov	w1, #0x40d                 	// #1037
     334:	mov	x0, x19
     338:	bl	0 <ctf_set_errno>
     33c:	b	348 <ctf_serialize+0x44>
     340:	tbnz	w8, #2, 368 <ctf_serialize+0x64>
     344:	mov	w0, wzr
     348:	add	sp, sp, #0x370
     34c:	ldp	x20, x19, [sp, #80]
     350:	ldp	x22, x21, [sp, #64]
     354:	ldp	x24, x23, [sp, #48]
     358:	ldp	x26, x25, [sp, #32]
     35c:	ldp	x28, x27, [sp, #16]
     360:	ldp	x29, x30, [sp], #96
     364:	ret
     368:	movi	v0.2d, #0x0
     36c:	strb	wzr, [sp, #128]
     370:	stp	q0, q0, [sp, #96]
     374:	ldr	x21, [x19, #584]
     378:	cbz	x21, 438 <ctf_serialize+0x134>
     37c:	adrp	x25, 0 <ctf_create>
     380:	mov	x22, xzr
     384:	mov	w23, #0xc                   	// #12
     388:	mov	w24, #0x14                  	// #20
     38c:	add	x25, x25, #0x0
     390:	b	3a0 <ctf_serialize+0x9c>
     394:	add	x22, x22, #0x4
     398:	ldr	x21, [x21, #8]
     39c:	cbz	x21, 43c <ctf_serialize+0x138>
     3a0:	ldr	x8, [x19]
     3a4:	ldr	w0, [x21, #28]
     3a8:	ldr	x8, [x8]
     3ac:	blr	x8
     3b0:	ldr	x8, [x19]
     3b4:	mov	w20, w0
     3b8:	ldr	x9, [x8, #16]
     3bc:	ldr	w8, [x21, #28]
     3c0:	mov	w0, w8
     3c4:	blr	x9
     3c8:	ldr	w8, [x21, #32]
     3cc:	sub	w9, w20, #0x1
     3d0:	cmn	w8, #0x1
     3d4:	csel	x10, x24, x23, eq  // eq = none
     3d8:	cmp	w9, #0xd
     3dc:	add	x22, x10, x22
     3e0:	b.hi	398 <ctf_serialize+0x94>  // b.pmore
     3e4:	adr	x10, 394 <ctf_serialize+0x90>
     3e8:	ldrb	w11, [x25, x9]
     3ec:	add	x10, x10, x11, lsl #2
     3f0:	br	x10
     3f4:	lsr	w9, w8, #29
     3f8:	mov	w8, w0
     3fc:	cbnz	w9, 420 <ctf_serialize+0x11c>
     400:	madd	x22, x8, x23, x22
     404:	b	398 <ctf_serialize+0x94>
     408:	add	x22, x22, w0, uxtw #3
     40c:	b	398 <ctf_serialize+0x94>
     410:	add	x22, x22, #0x8
     414:	b	398 <ctf_serialize+0x94>
     418:	add	x22, x22, #0xc
     41c:	b	398 <ctf_serialize+0x94>
     420:	add	x22, x22, x8, lsl #4
     424:	b	398 <ctf_serialize+0x94>
     428:	and	w8, w0, #0x1
     42c:	add	w8, w8, w0
     430:	add	x22, x22, w8, uxtw #2
     434:	b	398 <ctf_serialize+0x94>
     438:	mov	x22, xzr
     43c:	ldr	x8, [x19, #608]
     440:	cbz	x8, 458 <ctf_serialize+0x154>
     444:	mov	x21, xzr
     448:	ldr	x8, [x8, #8]
     44c:	add	x21, x21, #0x1
     450:	cbnz	x8, 448 <ctf_serialize+0x144>
     454:	b	45c <ctf_serialize+0x158>
     458:	mov	x21, xzr
     45c:	lsl	x20, x21, #3
     460:	add	x22, x20, x22
     464:	and	x23, x22, #0xffffffff
     468:	add	x25, x23, #0x34
     46c:	mov	x0, x25
     470:	bl	0 <malloc>
     474:	cbz	x0, 94c <ctf_serialize+0x648>
     478:	ldp	q0, q1, [sp, #96]
     47c:	ldrb	w10, [sp, #128]
     480:	mov	w8, #0xdff2                	// #57330
     484:	mov	w9, #0x4                   	// #4
     488:	stp	wzr, w20, [x0, #36]
     48c:	strh	w8, [x0]
     490:	strb	w9, [x0, #2]
     494:	strb	w10, [x0, #35]
     498:	stur	q1, [x0, #19]
     49c:	stur	q0, [x0, #3]
     4a0:	stp	w22, wzr, [x0, #44]
     4a4:	ldrb	w8, [x19, #552]
     4a8:	mov	x26, x0
     4ac:	tbz	w8, #0, 4c4 <ctf_serialize+0x1c0>
     4b0:	ldr	x1, [x19, #528]
     4b4:	cbz	x1, 4c4 <ctf_serialize+0x1c0>
     4b8:	add	x2, x26, #0x8
     4bc:	mov	x0, x19
     4c0:	bl	0 <ctf_str_add_ref>
     4c4:	ldr	x1, [x19, #496]
     4c8:	add	x24, x26, #0x34
     4cc:	str	x23, [sp, #24]
     4d0:	cbz	x1, 4e0 <ctf_serialize+0x1dc>
     4d4:	add	x2, x26, #0xc
     4d8:	mov	x0, x19
     4dc:	bl	0 <ctf_str_add_ref>
     4e0:	ldr	x23, [x19, #608]
     4e4:	mov	x22, xzr
     4e8:	str	x24, [sp, #48]
     4ec:	cbz	x23, 518 <ctf_serialize+0x214>
     4f0:	ldr	x1, [x23, #16]
     4f4:	mov	x0, x19
     4f8:	mov	x2, x24
     4fc:	bl	0 <ctf_str_add_ref>
     500:	ldr	x8, [x23, #24]
     504:	add	x22, x22, #0x1
     508:	str	w8, [x24, #4]
     50c:	ldr	x23, [x23, #8]
     510:	add	x24, x24, #0x8
     514:	cbnz	x23, 4f0 <ctf_serialize+0x1ec>
     518:	cmp	x22, x21
     51c:	b.ne	984 <ctf_serialize+0x680>  // b.any
     520:	and	x8, x20, #0xfffffff8
     524:	cmp	x20, x8
     528:	b.ne	9a4 <ctf_serialize+0x6a0>  // b.any
     52c:	stp	x26, x25, [sp, #32]
     530:	ldr	x8, [sp, #48]
     534:	ldr	x24, [x19, #584]
     538:	add	x25, x8, x20
     53c:	cbz	x24, 69c <ctf_serialize+0x398>
     540:	mov	w23, #0xc                   	// #12
     544:	mov	w22, #0x14                  	// #20
     548:	b	56c <ctf_serialize+0x268>
     54c:	ldp	w9, w8, [x24, #48]
     550:	ldr	w10, [x24, #56]
     554:	lsl	w8, w8, #16
     558:	orr	w8, w8, w9, lsl #24
     55c:	orr	w8, w8, w10
     560:	str	w8, [x25], #4
     564:	ldr	x24, [x24, #8]
     568:	cbz	x24, 69c <ctf_serialize+0x398>
     56c:	ldr	x8, [x19]
     570:	ldr	w0, [x24, #28]
     574:	add	x20, x24, #0x18
     578:	ldr	x8, [x8]
     57c:	blr	x8
     580:	ldr	x8, [x19]
     584:	mov	w27, w0
     588:	ldr	x9, [x8, #16]
     58c:	ldr	w8, [x24, #28]
     590:	mov	w0, w8
     594:	blr	x9
     598:	ldr	w8, [x24, #32]
     59c:	mov	w26, w0
     5a0:	mov	x0, x25
     5a4:	mov	x1, x20
     5a8:	cmn	w8, #0x1
     5ac:	csel	x28, x22, x23, eq  // eq = none
     5b0:	mov	x2, x28
     5b4:	bl	0 <memcpy>
     5b8:	ldr	w1, [x25]
     5bc:	cbz	w1, 5dc <ctf_serialize+0x2d8>
     5c0:	mov	x0, x19
     5c4:	bl	0 <ctf_strraw>
     5c8:	cbz	x0, 5dc <ctf_serialize+0x2d8>
     5cc:	mov	x1, x0
     5d0:	mov	x0, x19
     5d4:	mov	x2, x25
     5d8:	bl	0 <ctf_str_add_ref>
     5dc:	sub	w8, w27, #0x1
     5e0:	cmp	w8, #0xd
     5e4:	add	x25, x25, x28
     5e8:	b.hi	564 <ctf_serialize+0x260>  // b.pmore
     5ec:	adrp	x11, 0 <ctf_create>
     5f0:	add	x11, x11, #0x0
     5f4:	adr	x9, 54c <ctf_serialize+0x248>
     5f8:	ldrb	w10, [x11, x8]
     5fc:	add	x9, x9, x10, lsl #2
     600:	br	x9
     604:	ldr	w8, [x24, #32]
     608:	mov	x0, x19
     60c:	mov	x1, x24
     610:	mov	x2, x25
     614:	lsr	w8, w8, #29
     618:	cbnz	w8, 65c <ctf_serialize+0x358>
     61c:	bl	9e4 <ctf_copy_smembers>
     620:	b	660 <ctf_serialize+0x35c>
     624:	mov	x0, x19
     628:	mov	x1, x24
     62c:	mov	x2, x25
     630:	bl	ab8 <ctf_copy_emembers>
     634:	b	660 <ctf_serialize+0x35c>
     638:	ldr	x8, [x24, #48]
     63c:	str	x8, [x25], #8
     640:	b	564 <ctf_serialize+0x260>
     644:	ldp	x8, x9, [x24, #48]
     648:	ldr	w10, [x24, #64]
     64c:	stp	w8, w9, [x25]
     650:	str	w10, [x25, #8]
     654:	add	x25, x25, #0xc
     658:	b	564 <ctf_serialize+0x260>
     65c:	bl	a4c <ctf_copy_lmembers>
     660:	mov	x25, x0
     664:	b	564 <ctf_serialize+0x260>
     668:	cbz	w26, 690 <ctf_serialize+0x38c>
     66c:	mov	w9, w26
     670:	mov	x8, xzr
     674:	lsl	x9, x9, #3
     678:	ldr	x10, [x24, #48]
     67c:	ldr	x10, [x10, x8]
     680:	add	x8, x8, #0x8
     684:	cmp	x9, x8
     688:	str	w10, [x25], #4
     68c:	b.ne	678 <ctf_serialize+0x374>  // b.any
     690:	tbz	w26, #0, 564 <ctf_serialize+0x260>
     694:	str	wzr, [x25], #4
     698:	b	564 <ctf_serialize+0x260>
     69c:	ldr	x8, [sp, #24]
     6a0:	ldr	x23, [sp, #48]
     6a4:	add	x8, x23, x8
     6a8:	cmp	x25, x8
     6ac:	b.ne	9c4 <ctf_serialize+0x6c0>  // b.any
     6b0:	mov	x0, x19
     6b4:	bl	0 <ctf_str_write_strtab>
     6b8:	stp	x0, x1, [sp, #80]
     6bc:	mov	x0, x19
     6c0:	bl	0 <ctf_str_purge_refs>
     6c4:	ldr	x8, [sp, #80]
     6c8:	ldp	x22, x20, [sp, #32]
     6cc:	cbz	x8, 954 <ctf_serialize+0x650>
     6d0:	add	x8, sp, #0x50
     6d4:	add	x2, sp, #0x38
     6d8:	mov	x0, x23
     6dc:	mov	x1, x21
     6e0:	stp	x19, x8, [sp, #56]
     6e4:	bl	b10 <ctf_qsort_r>
     6e8:	ldr	x8, [sp, #88]
     6ec:	mov	x0, x19
     6f0:	mov	x1, x22
     6f4:	add	x2, x8, x20
     6f8:	bl	0 <ctf_realloc>
     6fc:	cbz	x0, 95c <ctf_serialize+0x658>
     700:	ldp	x1, x2, [sp, #80]
     704:	mov	x21, x0
     708:	add	x0, x0, x20
     70c:	bl	0 <memcpy>
     710:	ldp	x0, x8, [sp, #80]
     714:	str	w8, [x21, #48]
     718:	add	x20, x20, w8, uxtw
     71c:	bl	0 <free>
     720:	ldr	x7, [x19, #128]
     724:	add	x8, sp, #0x4c
     728:	mov	w9, #0x1                   	// #1
     72c:	mov	x0, x21
     730:	mov	x1, x20
     734:	mov	x2, xzr
     738:	mov	x3, xzr
     73c:	mov	x4, xzr
     740:	mov	x5, xzr
     744:	mov	x6, xzr
     748:	str	x8, [sp, #8]
     74c:	str	w9, [sp]
     750:	bl	0 <ctf_simple_open_internal>
     754:	cbz	x0, 974 <ctf_serialize+0x670>
     758:	mov	x20, x0
     75c:	mov	x0, x19
     760:	add	x22, x19, #0x240
     764:	add	x23, x19, #0x258
     768:	bl	0 <ctf_getmodel>
     76c:	mov	w1, w0
     770:	mov	x0, x20
     774:	bl	0 <ctf_setmodel>
     778:	ldr	x1, [x19, #512]
     77c:	mov	x0, x20
     780:	bl	0 <ctf_import>
     784:	ldr	w8, [x19, #548]
     788:	ldr	w9, [x20, #552]
     78c:	ldr	x10, [x20, #400]
     790:	str	w8, [x20, #548]
     794:	ldr	w8, [x19, #552]
     798:	and	w8, w8, #0xfffffffb
     79c:	orr	w8, w9, w8
     7a0:	str	w8, [x20, #552]
     7a4:	cbnz	x10, 7ac <ctf_serialize+0x4a8>
     7a8:	str	x21, [x20, #400]
     7ac:	ldr	x8, [x19, #568]
     7b0:	add	x10, x19, #0xd8
     7b4:	add	x9, x20, #0xd8
     7b8:	mov	x0, x20
     7bc:	str	x8, [x20, #568]
     7c0:	ldr	q0, [x22]
     7c4:	add	x21, x19, #0x288
     7c8:	str	q0, [x20, #576]
     7cc:	ldr	x8, [x19, #592]
     7d0:	str	x8, [x20, #592]
     7d4:	ldr	q0, [x23]
     7d8:	add	x8, x20, #0x258
     7dc:	str	q0, [x8]
     7e0:	ldr	x8, [x19, #616]
     7e4:	str	x8, [x20, #616]
     7e8:	ldr	x8, [x19, #696]
     7ec:	str	x8, [x20, #696]
     7f0:	ldr	x8, [x19, #624]
     7f4:	add	x8, x8, #0x1
     7f8:	str	x8, [x20, #624]
     7fc:	ldr	x8, [x19, #720]
     800:	str	x8, [x20, #720]
     804:	ldr	x8, [x19, #448]
     808:	str	x8, [x20, #448]
     80c:	ldr	x8, [x19, #456]
     810:	str	x8, [x20, #456]
     814:	ldr	x8, [x19, #648]
     818:	str	x8, [x20, #648]
     81c:	ldr	x8, [x19, #656]
     820:	str	x8, [x20, #656]
     824:	ldr	w8, [x19, #384]
     828:	str	w8, [x20, #384]
     82c:	ldr	x8, [x19, #128]
     830:	str	x8, [x20, #128]
     834:	ldr	x8, [x19, #672]
     838:	str	x8, [x20, #672]
     83c:	ldr	x8, [x19, #664]
     840:	str	x8, [x20, #664]
     844:	ldr	x8, [x19, #680]
     848:	str	x8, [x20, #680]
     84c:	ldr	x8, [x19, #688]
     850:	str	x8, [x20, #688]
     854:	ldr	x8, [x19, #624]
     858:	str	x8, [x20, #632]
     85c:	ldr	q0, [x10, #48]
     860:	ldur	q1, [x19, #248]
     864:	ldur	q2, [x19, #232]
     868:	ldur	q3, [x19, #216]
     86c:	str	q0, [x9, #48]
     870:	stur	q1, [x20, #248]
     874:	stur	q2, [x20, #232]
     878:	stur	q3, [x20, #216]
     87c:	ldr	x8, [x10, #112]
     880:	ldp	q1, q0, [x10, #80]
     884:	ldr	q2, [x10, #64]
     888:	str	x8, [x9, #112]
     88c:	stp	q1, q0, [x9, #80]
     890:	str	q2, [x9, #64]
     894:	ldur	q0, [x19, #152]
     898:	stur	q0, [x20, #152]
     89c:	ldur	q0, [x19, #168]
     8a0:	stur	q0, [x20, #168]
     8a4:	ldur	q0, [x19, #184]
     8a8:	stur	q0, [x20, #184]
     8ac:	ldur	q0, [x19, #200]
     8b0:	stur	q0, [x20, #200]
     8b4:	str	xzr, [x19, #568]
     8b8:	bl	0 <ctf_str_free_atoms>
     8bc:	ldr	x8, [x19, #368]
     8c0:	movi	v0.2d, #0x0
     8c4:	add	x0, sp, #0x90
     8c8:	mov	w2, #0x2d8                 	// #728
     8cc:	str	x8, [x20, #368]
     8d0:	ldr	x8, [x19, #120]
     8d4:	mov	x1, x19
     8d8:	str	x8, [x20, #120]
     8dc:	str	xzr, [x19, #368]
     8e0:	str	xzr, [x19, #696]
     8e4:	str	xzr, [x19, #448]
     8e8:	str	xzr, [x19, #160]
     8ec:	str	xzr, [x19, #176]
     8f0:	str	xzr, [x19, #192]
     8f4:	stp	xzr, xzr, [x19, #120]
     8f8:	stp	q0, q0, [x19, #208]
     8fc:	stp	q0, q0, [x19, #240]
     900:	stp	q0, q0, [x19, #272]
     904:	stp	q0, q0, [x19, #304]
     908:	stp	q0, q0, [x22]
     90c:	str	xzr, [x22, #32]
     910:	stp	q0, q0, [x21]
     914:	bl	0 <memcpy>
     918:	mov	w2, #0x2d8                 	// #728
     91c:	mov	x0, x19
     920:	mov	x1, x20
     924:	bl	0 <memcpy>
     928:	add	x1, sp, #0x90
     92c:	mov	w2, #0x2d8                 	// #728
     930:	mov	x0, x20
     934:	bl	0 <memcpy>
     938:	mov	w8, #0x1                   	// #1
     93c:	mov	x0, x20
     940:	str	w8, [x20, #548]
     944:	bl	0 <ctf_file_close>
     948:	b	344 <ctf_serialize+0x40>
     94c:	mov	w1, #0xb                   	// #11
     950:	b	334 <ctf_serialize+0x30>
     954:	mov	x0, x22
     958:	b	968 <ctf_serialize+0x664>
     95c:	mov	x0, x22
     960:	bl	0 <free>
     964:	ldr	x0, [sp, #80]
     968:	bl	0 <free>
     96c:	mov	w1, #0xb                   	// #11
     970:	b	334 <ctf_serialize+0x30>
     974:	mov	x0, x21
     978:	bl	0 <free>
     97c:	ldr	w1, [sp, #76]
     980:	b	334 <ctf_serialize+0x30>
     984:	adrp	x0, 0 <ctf_create>
     988:	adrp	x1, 0 <ctf_create>
     98c:	adrp	x3, 0 <ctf_create>
     990:	add	x0, x0, #0x0
     994:	add	x1, x1, #0x0
     998:	add	x3, x3, #0x0
     99c:	mov	w2, #0x179                 	// #377
     9a0:	bl	0 <__assert_fail>
     9a4:	adrp	x0, 0 <ctf_create>
     9a8:	adrp	x1, 0 <ctf_create>
     9ac:	adrp	x3, 0 <ctf_create>
     9b0:	add	x0, x0, #0x0
     9b4:	add	x1, x1, #0x0
     9b8:	add	x3, x3, #0x0
     9bc:	mov	w2, #0x17d                 	// #381
     9c0:	bl	0 <__assert_fail>
     9c4:	adrp	x0, 0 <ctf_create>
     9c8:	adrp	x1, 0 <ctf_create>
     9cc:	adrp	x3, 0 <ctf_create>
     9d0:	add	x0, x0, #0x0
     9d4:	add	x1, x1, #0x0
     9d8:	add	x3, x3, #0x0
     9dc:	mov	w2, #0x1d8                 	// #472
     9e0:	bl	0 <__assert_fail>

00000000000009e4 <ctf_copy_smembers>:
     9e4:	stp	x29, x30, [sp, #-48]!
     9e8:	stp	x20, x19, [sp, #32]
     9ec:	str	x21, [sp, #16]
     9f0:	ldr	x21, [x1, #56]
     9f4:	mov	x19, x2
     9f8:	mov	x29, sp
     9fc:	cbz	x21, a38 <ctf_copy_smembers+0x54>
     a00:	mov	x20, x0
     a04:	b	a14 <ctf_copy_smembers+0x30>
     a08:	ldr	x21, [x21, #8]
     a0c:	add	x19, x19, #0xc
     a10:	cbz	x21, a38 <ctf_copy_smembers+0x54>
     a14:	ldp	x9, x8, [x21, #24]
     a18:	stp	wzr, w8, [x19]
     a1c:	str	w9, [x19, #8]
     a20:	ldr	x1, [x21, #16]
     a24:	cbz	x1, a08 <ctf_copy_smembers+0x24>
     a28:	mov	x0, x20
     a2c:	mov	x2, x19
     a30:	bl	0 <ctf_str_add_ref>
     a34:	b	a08 <ctf_copy_smembers+0x24>
     a38:	mov	x0, x19
     a3c:	ldp	x20, x19, [sp, #32]
     a40:	ldr	x21, [sp, #16]
     a44:	ldp	x29, x30, [sp], #48
     a48:	ret

0000000000000a4c <ctf_copy_lmembers>:
     a4c:	stp	x29, x30, [sp, #-48]!
     a50:	stp	x20, x19, [sp, #32]
     a54:	str	x21, [sp, #16]
     a58:	ldr	x21, [x1, #56]
     a5c:	mov	x19, x2
     a60:	mov	x29, sp
     a64:	cbz	x21, aa4 <ctf_copy_lmembers+0x58>
     a68:	mov	x20, x0
     a6c:	b	a7c <ctf_copy_lmembers+0x30>
     a70:	ldr	x21, [x21, #8]
     a74:	add	x19, x19, #0x10
     a78:	cbz	x21, aa4 <ctf_copy_lmembers+0x58>
     a7c:	ldp	x9, x8, [x21, #24]
     a80:	lsr	x10, x8, #32
     a84:	stp	wzr, w10, [x19]
     a88:	stp	w9, w8, [x19, #8]
     a8c:	ldr	x1, [x21, #16]
     a90:	cbz	x1, a70 <ctf_copy_lmembers+0x24>
     a94:	mov	x0, x20
     a98:	mov	x2, x19
     a9c:	bl	0 <ctf_str_add_ref>
     aa0:	b	a70 <ctf_copy_lmembers+0x24>
     aa4:	mov	x0, x19
     aa8:	ldp	x20, x19, [sp, #32]
     aac:	ldr	x21, [sp, #16]
     ab0:	ldp	x29, x30, [sp], #48
     ab4:	ret

0000000000000ab8 <ctf_copy_emembers>:
     ab8:	stp	x29, x30, [sp, #-48]!
     abc:	stp	x20, x19, [sp, #32]
     ac0:	str	x21, [sp, #16]
     ac4:	ldr	x21, [x1, #56]
     ac8:	mov	x19, x2
     acc:	mov	x29, sp
     ad0:	cbz	x21, afc <ctf_copy_emembers+0x44>
     ad4:	mov	x20, x0
     ad8:	ldr	w8, [x21, #40]
     adc:	mov	x0, x20
     ae0:	mov	x2, x19
     ae4:	str	w8, [x19, #4]
     ae8:	ldr	x1, [x21, #16]
     aec:	bl	0 <ctf_str_add_ref>
     af0:	ldr	x21, [x21, #8]
     af4:	add	x19, x19, #0x8
     af8:	cbnz	x21, ad8 <ctf_copy_emembers+0x20>
     afc:	mov	x0, x19
     b00:	ldp	x20, x19, [sp, #32]
     b04:	ldr	x21, [sp, #16]
     b08:	ldp	x29, x30, [sp], #48
     b0c:	ret

0000000000000b10 <ctf_qsort_r>:
     b10:	stp	x29, x30, [sp, #-16]!
     b14:	adrp	x3, 0 <ctf_create>
     b18:	mov	x4, x2
     b1c:	add	x3, x3, #0x0
     b20:	mov	w2, #0x8                   	// #8
     b24:	mov	x29, sp
     b28:	bl	0 <qsort_r>
     b2c:	ldp	x29, x30, [sp], #16
     b30:	ret

0000000000000b34 <ctf_sort_var>:
     b34:	stp	x29, x30, [sp, #-32]!
     b38:	stp	x20, x19, [sp, #16]
     b3c:	ldr	w8, [x0]
     b40:	mov	x19, x2
     b44:	ldp	x0, x2, [x2]
     b48:	mov	x20, x1
     b4c:	mov	w1, w8
     b50:	mov	x29, sp
     b54:	bl	0 <ctf_strraw_explicit>
     b58:	ldp	x8, x2, [x19]
     b5c:	ldr	w1, [x20]
     b60:	mov	x19, x0
     b64:	mov	x0, x8
     b68:	bl	0 <ctf_strraw_explicit>
     b6c:	mov	x1, x0
     b70:	mov	x0, x19
     b74:	bl	0 <strcmp>
     b78:	ldp	x20, x19, [sp, #16]
     b7c:	ldp	x29, x30, [sp], #32
     b80:	ret

0000000000000b84 <ctf_name_table>:
     b84:	cmp	w1, #0x8
     b88:	b.eq	ba4 <ctf_name_table+0x20>  // b.none
     b8c:	cmp	w1, #0x7
     b90:	b.eq	bac <ctf_name_table+0x28>  // b.none
     b94:	cmp	w1, #0x6
     b98:	b.ne	bb4 <ctf_name_table+0x30>  // b.any
     b9c:	add	x0, x0, #0x98
     ba0:	ret
     ba4:	add	x0, x0, #0xb8
     ba8:	ret
     bac:	add	x0, x0, #0xa8
     bb0:	ret
     bb4:	add	x0, x0, #0xc8
     bb8:	ret

0000000000000bbc <ctf_dtd_insert>:
     bbc:	stp	x29, x30, [sp, #-48]!
     bc0:	stp	x22, x21, [sp, #16]
     bc4:	stp	x20, x19, [sp, #32]
     bc8:	mov	x19, x1
     bcc:	mov	x20, x0
     bd0:	ldr	x0, [x0, #568]
     bd4:	ldr	x1, [x1, #16]
     bd8:	mov	w21, w2
     bdc:	mov	x2, x19
     be0:	mov	x29, sp
     be4:	bl	0 <ctf_dynhash_insert>
     be8:	tbnz	w0, #31, c44 <ctf_dtd_insert+0x88>
     bec:	ldr	w1, [x19, #24]
     bf0:	cbz	w1, c24 <ctf_dtd_insert+0x68>
     bf4:	mov	x0, x20
     bf8:	bl	0 <ctf_strraw>
     bfc:	cbz	x0, c24 <ctf_dtd_insert+0x68>
     c00:	mov	x22, x0
     c04:	mov	x0, x20
     c08:	mov	w1, w21
     c0c:	bl	b84 <ctf_name_table>
     c10:	ldr	x0, [x0, #8]
     c14:	ldr	x2, [x19, #16]
     c18:	mov	x1, x22
     c1c:	bl	0 <ctf_dynhash_insert>
     c20:	tbnz	w0, #31, c38 <ctf_dtd_insert+0x7c>
     c24:	add	x0, x20, #0x240
     c28:	mov	x1, x19
     c2c:	bl	0 <ctf_list_append>
     c30:	mov	w0, wzr
     c34:	b	c48 <ctf_dtd_insert+0x8c>
     c38:	ldr	x0, [x20, #568]
     c3c:	ldr	x1, [x19, #16]
     c40:	bl	0 <ctf_dynhash_remove>
     c44:	mov	w0, #0xffffffff            	// #-1
     c48:	ldp	x20, x19, [sp, #32]
     c4c:	ldp	x22, x21, [sp, #16]
     c50:	ldp	x29, x30, [sp], #48
     c54:	ret

0000000000000c58 <ctf_dtd_delete>:
     c58:	stp	x29, x30, [sp, #-64]!
     c5c:	stp	x22, x21, [sp, #32]
     c60:	stp	x20, x19, [sp, #48]
     c64:	ldr	x8, [x0]
     c68:	mov	x20, x0
     c6c:	ldr	w0, [x1, #28]
     c70:	str	x23, [sp, #16]
     c74:	ldr	x8, [x8]
     c78:	mov	x29, sp
     c7c:	mov	x19, x1
     c80:	blr	x8
     c84:	ldr	x8, [x20, #568]
     c88:	ldr	x1, [x19, #16]
     c8c:	mov	w21, w0
     c90:	mov	x0, x8
     c94:	bl	0 <ctf_dynhash_remove>
     c98:	sub	w8, w21, #0x6
     c9c:	cmp	w8, #0x3
     ca0:	b.cs	cd4 <ctf_dtd_delete+0x7c>  // b.hs, b.nlast
     ca4:	ldr	x22, [x19, #56]
     ca8:	cbnz	x22, cc4 <ctf_dtd_delete+0x6c>
     cac:	b	ce4 <ctf_dtd_delete+0x8c>
     cb0:	ldr	x23, [x22, #8]
     cb4:	mov	x0, x22
     cb8:	bl	0 <free>
     cbc:	mov	x22, x23
     cc0:	cbz	x23, ce4 <ctf_dtd_delete+0x8c>
     cc4:	ldr	x0, [x22, #16]
     cc8:	cbz	x0, cb0 <ctf_dtd_delete+0x58>
     ccc:	bl	0 <free>
     cd0:	b	cb0 <ctf_dtd_delete+0x58>
     cd4:	cmp	w21, #0x5
     cd8:	b.ne	ce4 <ctf_dtd_delete+0x8c>  // b.any
     cdc:	ldr	x0, [x19, #48]
     ce0:	bl	0 <free>
     ce4:	mov	x22, x19
     ce8:	ldr	w1, [x22, #24]!
     cec:	cbz	w1, d28 <ctf_dtd_delete+0xd0>
     cf0:	mov	x0, x20
     cf4:	bl	0 <ctf_strraw>
     cf8:	cbz	x0, d28 <ctf_dtd_delete+0xd0>
     cfc:	mov	x23, x0
     d00:	mov	x0, x20
     d04:	mov	w1, w21
     d08:	bl	b84 <ctf_name_table>
     d0c:	ldr	x0, [x0, #8]
     d10:	mov	x1, x23
     d14:	bl	0 <ctf_dynhash_remove>
     d18:	mov	x0, x20
     d1c:	mov	x1, x23
     d20:	mov	x2, x22
     d24:	bl	0 <ctf_str_remove_ref>
     d28:	add	x0, x20, #0x240
     d2c:	mov	x1, x19
     d30:	bl	0 <ctf_list_delete>
     d34:	mov	x0, x19
     d38:	bl	0 <free>
     d3c:	ldp	x20, x19, [sp, #48]
     d40:	ldp	x22, x21, [sp, #32]
     d44:	ldr	x23, [sp, #16]
     d48:	ldp	x29, x30, [sp], #64
     d4c:	ret

0000000000000d50 <ctf_dtd_lookup>:
     d50:	stp	x29, x30, [sp, #-16]!
     d54:	ldr	x0, [x0, #568]
     d58:	mov	x29, sp
     d5c:	bl	0 <ctf_dynhash_lookup>
     d60:	ldp	x29, x30, [sp], #16
     d64:	ret

0000000000000d68 <ctf_dynamic_type>:
     d68:	stp	x29, x30, [sp, #-16]!
     d6c:	ldr	w8, [x0, #552]
     d70:	mov	x29, sp
     d74:	tbz	w8, #1, da0 <ctf_dynamic_type+0x38>
     d78:	tbz	w8, #0, d8c <ctf_dynamic_type+0x24>
     d7c:	ldr	w8, [x0, #544]
     d80:	cmp	x8, x1
     d84:	b.cc	d8c <ctf_dynamic_type+0x24>  // b.lo, b.ul, b.last
     d88:	ldr	x0, [x0, #512]
     d8c:	ldr	w8, [x0, #544]
     d90:	ldr	x9, [x0, #480]
     d94:	and	x8, x8, x1
     d98:	cmp	x8, x9
     d9c:	b.ls	dac <ctf_dynamic_type+0x44>  // b.plast
     da0:	mov	x0, xzr
     da4:	ldp	x29, x30, [sp], #16
     da8:	ret
     dac:	bl	d50 <ctf_dtd_lookup>
     db0:	ldp	x29, x30, [sp], #16
     db4:	ret

0000000000000db8 <ctf_dvd_insert>:
     db8:	stp	x29, x30, [sp, #-32]!
     dbc:	stp	x20, x19, [sp, #16]
     dc0:	mov	x19, x1
     dc4:	mov	x20, x0
     dc8:	ldr	x0, [x0, #592]
     dcc:	ldr	x1, [x1, #16]
     dd0:	mov	x2, x19
     dd4:	mov	x29, sp
     dd8:	bl	0 <ctf_dynhash_insert>
     ddc:	tbnz	w0, #31, df4 <ctf_dvd_insert+0x3c>
     de0:	add	x0, x20, #0x258
     de4:	mov	x1, x19
     de8:	bl	0 <ctf_list_append>
     dec:	mov	w0, wzr
     df0:	b	df8 <ctf_dvd_insert+0x40>
     df4:	mov	w0, #0xffffffff            	// #-1
     df8:	ldp	x20, x19, [sp, #16]
     dfc:	ldp	x29, x30, [sp], #32
     e00:	ret

0000000000000e04 <ctf_dvd_delete>:
     e04:	stp	x29, x30, [sp, #-32]!
     e08:	stp	x20, x19, [sp, #16]
     e0c:	mov	x19, x1
     e10:	mov	x20, x0
     e14:	ldr	x0, [x0, #592]
     e18:	ldr	x1, [x1, #16]
     e1c:	mov	x29, sp
     e20:	bl	0 <ctf_dynhash_remove>
     e24:	ldr	x0, [x19, #16]
     e28:	bl	0 <free>
     e2c:	add	x0, x20, #0x258
     e30:	mov	x1, x19
     e34:	bl	0 <ctf_list_delete>
     e38:	mov	x0, x19
     e3c:	bl	0 <free>
     e40:	ldp	x20, x19, [sp, #16]
     e44:	ldp	x29, x30, [sp], #32
     e48:	ret

0000000000000e4c <ctf_dvd_lookup>:
     e4c:	stp	x29, x30, [sp, #-16]!
     e50:	ldr	x0, [x0, #592]
     e54:	mov	x29, sp
     e58:	bl	0 <ctf_dynhash_lookup>
     e5c:	ldp	x29, x30, [sp], #16
     e60:	ret

0000000000000e64 <ctf_discard>:
     e64:	stp	x29, x30, [sp, #-16]!
     e68:	ldrb	w8, [x0, #552]
     e6c:	mov	x29, sp
     e70:	tbnz	w8, #2, e80 <ctf_discard+0x1c>
     e74:	mov	w0, wzr
     e78:	ldp	x29, x30, [sp], #16
     e7c:	ret
     e80:	ldr	x8, [x0, #632]
     e84:	ldr	x1, [x0, #616]
     e88:	add	x2, x8, #0x1
     e8c:	bl	e98 <ctf_rollback>
     e90:	ldp	x29, x30, [sp], #16
     e94:	ret

0000000000000e98 <ctf_rollback>:
     e98:	stp	x29, x30, [sp, #-80]!
     e9c:	stp	x26, x25, [sp, #16]
     ea0:	stp	x24, x23, [sp, #32]
     ea4:	stp	x22, x21, [sp, #48]
     ea8:	stp	x20, x19, [sp, #64]
     eac:	ldrb	w8, [x0, #552]
     eb0:	mov	x19, x0
     eb4:	mov	x29, sp
     eb8:	tbnz	w8, #1, ec4 <ctf_rollback+0x2c>
     ebc:	mov	w1, #0x40d                 	// #1037
     ec0:	b	fc8 <ctf_rollback+0x130>
     ec4:	ldr	x8, [x19, #632]
     ec8:	mov	x20, x2
     ecc:	cmp	x8, x2
     ed0:	b.cs	fc4 <ctf_rollback+0x12c>  // b.hs, b.nlast
     ed4:	ldr	x22, [x19, #584]
     ed8:	mov	x21, x1
     edc:	cbnz	x22, f54 <ctf_rollback+0xbc>
     ee0:	ldr	x1, [x19, #608]
     ee4:	cbnz	x1, f18 <ctf_rollback+0x80>
     ee8:	ldr	x8, [x19, #632]
     eec:	mov	w0, wzr
     ef0:	str	x21, [x19, #480]
     ef4:	str	x20, [x19, #624]
     ef8:	cmp	x20, x8
     efc:	b.ne	fd0 <ctf_rollback+0x138>  // b.any
     f00:	ldr	w8, [x19, #552]
     f04:	and	w8, w8, #0xfffffffb
     f08:	str	w8, [x19, #552]
     f0c:	b	fd0 <ctf_rollback+0x138>
     f10:	mov	x1, x22
     f14:	cbz	x22, ee8 <ctf_rollback+0x50>
     f18:	ldr	x8, [x1, #32]
     f1c:	ldr	x22, [x1, #8]
     f20:	cmp	x8, x20
     f24:	b.ls	f10 <ctf_rollback+0x78>  // b.plast
     f28:	mov	x0, x19
     f2c:	bl	e04 <ctf_dvd_delete>
     f30:	b	f10 <ctf_rollback+0x78>
     f34:	ldr	x0, [x19, #568]
     f38:	ldr	x1, [x22, #16]
     f3c:	bl	0 <ctf_dynhash_remove>
     f40:	mov	x0, x19
     f44:	mov	x1, x22
     f48:	bl	c58 <ctf_dtd_delete>
     f4c:	mov	x22, x26
     f50:	cbz	x26, ee0 <ctf_rollback+0x48>
     f54:	ldp	x26, x8, [x22, #8]
     f58:	ldr	w9, [x19, #544]
     f5c:	and	x8, x8, x9
     f60:	cmp	x8, x21
     f64:	b.ls	f4c <ctf_rollback+0xb4>  // b.plast
     f68:	ldr	x8, [x19]
     f6c:	ldr	w0, [x22, #28]
     f70:	ldr	x8, [x8]
     f74:	blr	x8
     f78:	mov	x23, x22
     f7c:	ldr	w1, [x23, #24]!
     f80:	cbz	w1, f34 <ctf_rollback+0x9c>
     f84:	mov	w25, w0
     f88:	mov	x0, x19
     f8c:	bl	0 <ctf_strraw>
     f90:	cbz	x0, f34 <ctf_rollback+0x9c>
     f94:	mov	x24, x0
     f98:	mov	x0, x19
     f9c:	mov	w1, w25
     fa0:	bl	b84 <ctf_name_table>
     fa4:	ldr	x0, [x0, #8]
     fa8:	mov	x1, x24
     fac:	bl	0 <ctf_dynhash_remove>
     fb0:	mov	x0, x19
     fb4:	mov	x1, x24
     fb8:	mov	x2, x23
     fbc:	bl	0 <ctf_str_remove_ref>
     fc0:	b	f34 <ctf_rollback+0x9c>
     fc4:	mov	w1, #0x412                 	// #1042
     fc8:	mov	x0, x19
     fcc:	bl	0 <ctf_set_errno>
     fd0:	ldp	x20, x19, [sp, #64]
     fd4:	ldp	x22, x21, [sp, #48]
     fd8:	ldp	x24, x23, [sp, #32]
     fdc:	ldp	x26, x25, [sp, #16]
     fe0:	ldp	x29, x30, [sp], #80
     fe4:	ret

0000000000000fe8 <ctf_snapshot>:
     fe8:	ldr	x1, [x0, #624]
     fec:	ldr	x8, [x0, #480]
     ff0:	add	x9, x1, #0x1
     ff4:	str	x9, [x0, #624]
     ff8:	mov	x0, x8
     ffc:	ret

0000000000001000 <ctf_add_slice>:
    1000:	sub	sp, sp, #0x40
    1004:	stp	x22, x21, [sp, #32]
    1008:	mov	x21, x0
    100c:	stp	x29, x30, [sp, #16]
    1010:	stp	x20, x19, [sp, #48]
    1014:	add	x29, sp, #0x10
    1018:	str	x0, [sp]
    101c:	cbz	x3, 1054 <ctf_add_slice+0x54>
    1020:	ldr	w8, [x3, #8]
    1024:	mov	x19, x3
    1028:	cmp	w8, #0xff
    102c:	b.hi	103c <ctf_add_slice+0x3c>  // b.pmore
    1030:	ldr	w8, [x19, #4]
    1034:	cmp	w8, #0x100
    1038:	b.cc	1044 <ctf_add_slice+0x44>  // b.lo, b.ul, b.last
    103c:	mov	w1, #0x416                 	// #1046
    1040:	b	1058 <ctf_add_slice+0x58>
    1044:	mov	w8, #0xffffffff            	// #-1
    1048:	mov	x20, x2
    104c:	cmp	x2, x8
    1050:	b.cc	107c <ctf_add_slice+0x7c>  // b.lo, b.ul, b.last
    1054:	mov	w1, #0x16                  	// #22
    1058:	mov	x0, x21
    105c:	bl	0 <ctf_set_errno>
    1060:	mov	x21, x0
    1064:	mov	x0, x21
    1068:	ldp	x20, x19, [sp, #48]
    106c:	ldp	x22, x21, [sp, #32]
    1070:	ldp	x29, x30, [sp, #16]
    1074:	add	sp, sp, #0x40
    1078:	ret
    107c:	mov	w22, w1
    1080:	mov	x0, sp
    1084:	mov	x1, x20
    1088:	bl	0 <ctf_lookup_by_id>
    108c:	cbz	x0, 1128 <ctf_add_slice+0x128>
    1090:	ldr	x0, [sp]
    1094:	mov	x1, x20
    1098:	bl	0 <ctf_type_kind_unsliced>
    109c:	cmp	w0, #0x8
    10a0:	b.hi	1130 <ctf_add_slice+0x130>  // b.pmore
    10a4:	mov	w8, #0x1                   	// #1
    10a8:	lsl	w8, w8, w0
    10ac:	mov	w9, #0x106                 	// #262
    10b0:	tst	w8, w9
    10b4:	b.eq	1130 <ctf_add_slice+0x130>  // b.none
    10b8:	add	x4, sp, #0x8
    10bc:	mov	w3, #0xe                   	// #14
    10c0:	mov	x0, x21
    10c4:	mov	w1, w22
    10c8:	mov	x2, xzr
    10cc:	bl	1138 <ctf_add_generic>
    10d0:	mov	x21, x0
    10d4:	cmn	x0, #0x1
    10d8:	b.eq	1064 <ctf_add_slice+0x64>  // b.none
    10dc:	cmp	w22, #0x0
    10e0:	ldr	x22, [sp, #8]
    10e4:	mov	w8, #0x3a000000            	// #973078528
    10e8:	mov	w9, #0x38000000            	// #939524096
    10ec:	csel	w8, w9, w8, eq  // eq = none
    10f0:	str	w8, [x22, #28]
    10f4:	ldr	w8, [x19, #8]
    10f8:	neg	w8, w8
    10fc:	and	w8, w8, #0xfffffff8
    1100:	neg	w8, w8
    1104:	lsr	w0, w8, #3
    1108:	bl	1298 <clp2>
    110c:	str	w0, [x22, #32]
    1110:	str	w20, [x22, #48]
    1114:	ldr	w8, [x19, #8]
    1118:	strh	w8, [x22, #54]
    111c:	ldr	w8, [x19, #4]
    1120:	strh	w8, [x22, #52]
    1124:	b	1064 <ctf_add_slice+0x64>
    1128:	mov	x21, #0xffffffffffffffff    	// #-1
    112c:	b	1064 <ctf_add_slice+0x64>
    1130:	mov	w1, #0x3fe                 	// #1022
    1134:	b	1058 <ctf_add_slice+0x58>

0000000000001138 <ctf_add_generic>:
    1138:	stp	x29, x30, [sp, #-64]!
    113c:	stp	x20, x19, [sp, #48]
    1140:	cmp	w1, #0x2
    1144:	mov	x19, x0
    1148:	stp	x24, x23, [sp, #16]
    114c:	stp	x22, x21, [sp, #32]
    1150:	mov	x29, sp
    1154:	b.cc	1160 <ctf_add_generic+0x28>  // b.lo, b.ul, b.last
    1158:	mov	w1, #0x16                  	// #22
    115c:	b	119c <ctf_add_generic+0x64>
    1160:	ldrb	w8, [x19, #552]
    1164:	tbnz	w8, #1, 1170 <ctf_add_generic+0x38>
    1168:	mov	w1, #0x40d                 	// #1037
    116c:	b	119c <ctf_add_generic+0x64>
    1170:	ldr	w8, [x19, #544]
    1174:	ldr	x9, [x19, #480]
    1178:	add	w8, w8, #0x1
    117c:	orr	x8, x9, x8
    1180:	mov	w9, #0xfffffffe            	// #-2
    1184:	cmp	x8, x9
    1188:	b.cs	1198 <ctf_add_generic+0x60>  // b.hs, b.nlast
    118c:	mov	w9, #0x7ffffffe            	// #2147483646
    1190:	cmp	x8, x9
    1194:	b.ne	11c0 <ctf_add_generic+0x88>  // b.any
    1198:	mov	w1, #0x40f                 	// #1039
    119c:	mov	x0, x19
    11a0:	bl	0 <ctf_set_errno>
    11a4:	mov	x22, x0
    11a8:	mov	x0, x22
    11ac:	ldp	x20, x19, [sp, #48]
    11b0:	ldp	x22, x21, [sp, #32]
    11b4:	ldp	x24, x23, [sp, #16]
    11b8:	ldp	x29, x30, [sp], #64
    11bc:	ret
    11c0:	mov	x0, x19
    11c4:	mov	x20, x4
    11c8:	mov	w21, w3
    11cc:	mov	x23, x2
    11d0:	bl	214 <ctf_grow_ptrtab>
    11d4:	tbnz	w0, #31, 1250 <ctf_add_generic+0x118>
    11d8:	mov	w0, #0x48                  	// #72
    11dc:	bl	0 <malloc>
    11e0:	cbz	x0, 1280 <ctf_add_generic+0x148>
    11e4:	ldr	x8, [x19, #480]
    11e8:	ldrb	w9, [x19, #552]
    11ec:	mov	x24, x0
    11f0:	add	x22, x8, #0x1
    11f4:	str	x22, [x19, #480]
    11f8:	tbz	w9, #0, 1208 <ctf_add_generic+0xd0>
    11fc:	ldr	w8, [x19, #544]
    1200:	add	w8, w8, #0x1
    1204:	orr	x22, x22, x8
    1208:	movi	v0.2d, #0x0
    120c:	add	x2, x24, #0x18
    1210:	mov	x0, x19
    1214:	mov	x1, x23
    1218:	str	xzr, [x24, #64]
    121c:	stp	q0, q0, [x24, #32]
    1220:	stp	q0, q0, [x24]
    1224:	bl	0 <ctf_str_add_ref>
    1228:	str	w0, [x24, #24]
    122c:	str	x22, [x24, #16]
    1230:	cbz	x23, 1258 <ctf_add_generic+0x120>
    1234:	cbnz	w0, 1258 <ctf_add_generic+0x120>
    1238:	ldrb	w8, [x23]
    123c:	cbz	w8, 1258 <ctf_add_generic+0x120>
    1240:	mov	x0, x24
    1244:	bl	0 <free>
    1248:	mov	w1, #0xb                   	// #11
    124c:	b	119c <ctf_add_generic+0x64>
    1250:	mov	x22, #0xffffffffffffffff    	// #-1
    1254:	b	11a8 <ctf_add_generic+0x70>
    1258:	mov	x0, x19
    125c:	mov	x1, x24
    1260:	mov	w2, w21
    1264:	bl	bbc <ctf_dtd_insert>
    1268:	tbnz	w0, #31, 1288 <ctf_add_generic+0x150>
    126c:	ldr	w8, [x19, #552]
    1270:	orr	w8, w8, #0x4
    1274:	str	w8, [x19, #552]
    1278:	str	x24, [x20]
    127c:	b	11a8 <ctf_add_generic+0x70>
    1280:	mov	w1, #0xb                   	// #11
    1284:	b	119c <ctf_add_generic+0x64>
    1288:	mov	x0, x24
    128c:	bl	0 <free>
    1290:	mov	x22, #0xffffffffffffffff    	// #-1
    1294:	b	11a8 <ctf_add_generic+0x70>

0000000000001298 <clp2>:
    1298:	sub	x8, x0, #0x1
    129c:	orr	x8, x8, x8, lsr #1
    12a0:	orr	x8, x8, x8, lsr #2
    12a4:	orr	x8, x8, x8, lsr #4
    12a8:	orr	x8, x8, x8, lsr #8
    12ac:	orr	x8, x8, x8, lsr #16
    12b0:	add	x0, x8, #0x1
    12b4:	ret

00000000000012b8 <ctf_add_integer>:
    12b8:	stp	x29, x30, [sp, #-16]!
    12bc:	mov	w4, #0x1                   	// #1
    12c0:	mov	x29, sp
    12c4:	bl	12d0 <ctf_add_encoded>
    12c8:	ldp	x29, x30, [sp], #16
    12cc:	ret

00000000000012d0 <ctf_add_encoded>:
    12d0:	sub	sp, sp, #0x40
    12d4:	stp	x29, x30, [sp, #16]
    12d8:	stp	x22, x21, [sp, #32]
    12dc:	stp	x20, x19, [sp, #48]
    12e0:	add	x29, sp, #0x10
    12e4:	cbz	x3, 1354 <ctf_add_encoded+0x84>
    12e8:	mov	w21, w4
    12ec:	mov	x19, x3
    12f0:	add	x4, sp, #0x8
    12f4:	mov	w3, w21
    12f8:	mov	w22, w1
    12fc:	bl	1138 <ctf_add_generic>
    1300:	mov	x20, x0
    1304:	cmn	x0, #0x1
    1308:	b.eq	1360 <ctf_add_encoded+0x90>  // b.none
    130c:	cmp	w22, #0x0
    1310:	ldr	x22, [sp, #8]
    1314:	cset	w8, ne  // ne = any
    1318:	lsl	w8, w8, #25
    131c:	bfi	w8, w21, #26, #6
    1320:	str	w8, [x22, #28]
    1324:	ldr	w8, [x19, #8]
    1328:	neg	w8, w8
    132c:	and	w8, w8, #0xfffffff8
    1330:	neg	w8, w8
    1334:	lsr	w0, w8, #3
    1338:	bl	1298 <clp2>
    133c:	str	w0, [x22, #32]
    1340:	ldr	x8, [x19]
    1344:	ldr	w9, [x19, #8]
    1348:	str	x8, [x22, #48]
    134c:	str	w9, [x22, #56]
    1350:	b	1360 <ctf_add_encoded+0x90>
    1354:	mov	w1, #0x16                  	// #22
    1358:	bl	0 <ctf_set_errno>
    135c:	mov	x20, x0
    1360:	mov	x0, x20
    1364:	ldp	x20, x19, [sp, #48]
    1368:	ldp	x22, x21, [sp, #32]
    136c:	ldp	x29, x30, [sp, #16]
    1370:	add	sp, sp, #0x40
    1374:	ret

0000000000001378 <ctf_add_float>:
    1378:	stp	x29, x30, [sp, #-16]!
    137c:	mov	w4, #0x2                   	// #2
    1380:	mov	x29, sp
    1384:	bl	12d0 <ctf_add_encoded>
    1388:	ldp	x29, x30, [sp], #16
    138c:	ret

0000000000001390 <ctf_add_pointer>:
    1390:	stp	x29, x30, [sp, #-16]!
    1394:	mov	w3, #0x3                   	// #3
    1398:	mov	x29, sp
    139c:	bl	13a8 <ctf_add_reftype>
    13a0:	ldp	x29, x30, [sp], #16
    13a4:	ret

00000000000013a8 <ctf_add_reftype>:
    13a8:	sub	sp, sp, #0x50
    13ac:	mov	w8, #0xffffffff            	// #-1
    13b0:	stp	x20, x19, [sp, #64]
    13b4:	mov	x20, x0
    13b8:	cmp	x2, x8
    13bc:	stp	x29, x30, [sp, #16]
    13c0:	stp	x24, x23, [sp, #32]
    13c4:	stp	x22, x21, [sp, #48]
    13c8:	add	x29, sp, #0x10
    13cc:	str	x0, [sp]
    13d0:	b.cc	13e8 <ctf_add_reftype+0x40>  // b.lo, b.ul, b.last
    13d4:	mov	w1, #0x16                  	// #22
    13d8:	mov	x0, x20
    13dc:	bl	0 <ctf_set_errno>
    13e0:	mov	x19, x0
    13e4:	b	14e0 <ctf_add_reftype+0x138>
    13e8:	ldr	w24, [x20, #552]
    13ec:	mov	w23, w1
    13f0:	mov	x0, sp
    13f4:	mov	x1, x2
    13f8:	mov	w22, w3
    13fc:	mov	x21, x2
    1400:	bl	0 <ctf_lookup_by_id>
    1404:	cbz	x0, 14dc <ctf_add_reftype+0x134>
    1408:	add	x4, sp, #0x8
    140c:	mov	x0, x20
    1410:	mov	w1, w23
    1414:	mov	x2, xzr
    1418:	mov	w3, w22
    141c:	bl	1138 <ctf_add_generic>
    1420:	mov	x19, x0
    1424:	cmn	x0, #0x1
    1428:	b.eq	14e0 <ctf_add_reftype+0x138>  // b.none
    142c:	cmp	w23, #0x0
    1430:	ldr	x23, [sp, #8]
    1434:	cset	w8, ne  // ne = any
    1438:	lsl	w8, w8, #25
    143c:	cmp	w22, #0x3
    1440:	bfi	w8, w22, #26, #6
    1444:	stp	w8, w21, [x23, #28]
    1448:	b.ne	14e0 <ctf_add_reftype+0x138>  // b.any
    144c:	ldr	w8, [x20, #544]
    1450:	and	w10, w24, #0x1
    1454:	cmp	x8, x21
    1458:	cset	w9, cs  // cs = hs, nlast
    145c:	cmp	w10, w9
    1460:	b.eq	14e0 <ctf_add_reftype+0x138>  // b.none
    1464:	ldr	x10, [x20, #480]
    1468:	mov	w9, w21
    146c:	and	x9, x8, x9
    1470:	cmp	x10, x9
    1474:	b.ls	14e0 <ctf_add_reftype+0x138>  // b.plast
    1478:	ldr	x10, [x20, #448]
    147c:	and	w21, w8, w19
    1480:	str	w21, [x10, x9, lsl #2]
    1484:	ldr	x8, [sp]
    1488:	cmp	x8, x20
    148c:	b.ne	14e0 <ctf_add_reftype+0x138>  // b.any
    1490:	ldr	x8, [x20]
    1494:	ldp	w0, w24, [x23, #28]
    1498:	ldr	w22, [x20, #544]
    149c:	ldr	x8, [x8]
    14a0:	blr	x8
    14a4:	cmp	w0, #0xa
    14a8:	b.ne	14e0 <ctf_add_reftype+0x138>  // b.any
    14ac:	ldr	w1, [x23, #24]
    14b0:	mov	x0, x20
    14b4:	bl	0 <ctf_strptr>
    14b8:	ldrb	w8, [x0]
    14bc:	cbnz	w8, 14e0 <ctf_add_reftype+0x138>
    14c0:	ldr	x9, [x20, #480]
    14c4:	and	w8, w22, w24
    14c8:	cmp	x9, x8
    14cc:	b.ls	14e0 <ctf_add_reftype+0x138>  // b.plast
    14d0:	ldr	x9, [x20, #448]
    14d4:	str	w21, [x9, x8, lsl #2]
    14d8:	b	14e0 <ctf_add_reftype+0x138>
    14dc:	mov	x19, #0xffffffffffffffff    	// #-1
    14e0:	mov	x0, x19
    14e4:	ldp	x20, x19, [sp, #64]
    14e8:	ldp	x22, x21, [sp, #48]
    14ec:	ldp	x24, x23, [sp, #32]
    14f0:	ldp	x29, x30, [sp, #16]
    14f4:	add	sp, sp, #0x50
    14f8:	ret

00000000000014fc <ctf_add_array>:
    14fc:	sub	sp, sp, #0x40
    1500:	str	x21, [sp, #32]
    1504:	mov	x21, x0
    1508:	stp	x29, x30, [sp, #16]
    150c:	stp	x20, x19, [sp, #48]
    1510:	add	x29, sp, #0x10
    1514:	str	x0, [sp, #8]
    1518:	cbz	x2, 1594 <ctf_add_array+0x98>
    151c:	mov	w20, w1
    1520:	ldr	x1, [x2]
    1524:	add	x0, sp, #0x8
    1528:	mov	x19, x2
    152c:	bl	0 <ctf_lookup_by_id>
    1530:	cbz	x0, 15a4 <ctf_add_array+0xa8>
    1534:	str	x21, [sp, #8]
    1538:	ldr	x1, [x19, #8]
    153c:	add	x0, sp, #0x8
    1540:	bl	0 <ctf_lookup_by_id>
    1544:	cbz	x0, 15a4 <ctf_add_array+0xa8>
    1548:	add	x4, x29, #0x18
    154c:	mov	w3, #0x4                   	// #4
    1550:	mov	x0, x21
    1554:	mov	w1, w20
    1558:	mov	x2, xzr
    155c:	bl	1138 <ctf_add_generic>
    1560:	cmn	x0, #0x1
    1564:	b.eq	15a8 <ctf_add_array+0xac>  // b.none
    1568:	ldr	x8, [x29, #24]
    156c:	cmp	w20, #0x0
    1570:	mov	w9, #0x12000000            	// #301989888
    1574:	mov	w10, #0x10000000            	// #268435456
    1578:	csel	w9, w10, w9, eq  // eq = none
    157c:	stp	w9, wzr, [x8, #28]
    1580:	ldr	x9, [x19, #16]
    1584:	ldr	q0, [x19]
    1588:	str	x9, [x8, #64]
    158c:	str	q0, [x8, #48]
    1590:	b	15a8 <ctf_add_array+0xac>
    1594:	mov	w1, #0x16                  	// #22
    1598:	mov	x0, x21
    159c:	bl	0 <ctf_set_errno>
    15a0:	b	15a8 <ctf_add_array+0xac>
    15a4:	mov	x0, #0xffffffffffffffff    	// #-1
    15a8:	ldp	x20, x19, [sp, #48]
    15ac:	ldr	x21, [sp, #32]
    15b0:	ldp	x29, x30, [sp, #16]
    15b4:	add	sp, sp, #0x40
    15b8:	ret

00000000000015bc <ctf_set_array>:
    15bc:	stp	x29, x30, [sp, #-48]!
    15c0:	str	x21, [sp, #16]
    15c4:	stp	x20, x19, [sp, #32]
    15c8:	mov	x29, sp
    15cc:	mov	x20, x2
    15d0:	mov	x19, x0
    15d4:	bl	d50 <ctf_dtd_lookup>
    15d8:	ldrb	w8, [x19, #552]
    15dc:	tbnz	w8, #1, 15e8 <ctf_set_array+0x2c>
    15e0:	mov	w1, #0x40d                 	// #1037
    15e4:	b	1630 <ctf_set_array+0x74>
    15e8:	mov	x21, x0
    15ec:	cbz	x0, 162c <ctf_set_array+0x70>
    15f0:	ldr	x8, [x19]
    15f4:	ldr	w0, [x21, #28]
    15f8:	ldr	x8, [x8]
    15fc:	blr	x8
    1600:	cmp	w0, #0x4
    1604:	b.ne	162c <ctf_set_array+0x70>  // b.any
    1608:	ldr	w8, [x19, #552]
    160c:	mov	w0, wzr
    1610:	orr	w8, w8, #0x4
    1614:	str	w8, [x19, #552]
    1618:	ldr	x8, [x20, #16]
    161c:	ldr	q0, [x20]
    1620:	str	x8, [x21, #64]
    1624:	str	q0, [x21, #48]
    1628:	b	1638 <ctf_set_array+0x7c>
    162c:	mov	w1, #0x3fa                 	// #1018
    1630:	mov	x0, x19
    1634:	bl	0 <ctf_set_errno>
    1638:	ldp	x20, x19, [sp, #32]
    163c:	ldr	x21, [sp, #16]
    1640:	ldp	x29, x30, [sp], #48
    1644:	ret

0000000000001648 <ctf_add_function>:
    1648:	sub	sp, sp, #0x60
    164c:	stp	x22, x21, [sp, #64]
    1650:	mov	x21, x0
    1654:	stp	x29, x30, [sp, #16]
    1658:	str	x25, [sp, #32]
    165c:	stp	x24, x23, [sp, #48]
    1660:	stp	x20, x19, [sp, #80]
    1664:	add	x29, sp, #0x10
    1668:	str	x0, [sp, #8]
    166c:	cbz	x2, 1694 <ctf_add_function+0x4c>
    1670:	ldr	w23, [x2, #12]
    1674:	mov	x19, x2
    1678:	cmp	w23, #0x1
    167c:	b.hi	1694 <ctf_add_function+0x4c>  // b.pmore
    1680:	ldr	w24, [x19, #8]
    1684:	mov	x20, x3
    1688:	mov	w22, w1
    168c:	cbnz	x3, 16c4 <ctf_add_function+0x7c>
    1690:	cbz	w24, 16c4 <ctf_add_function+0x7c>
    1694:	mov	w1, #0x16                  	// #22
    1698:	mov	x0, x21
    169c:	bl	0 <ctf_set_errno>
    16a0:	mov	x21, x0
    16a4:	mov	x0, x21
    16a8:	ldp	x20, x19, [sp, #80]
    16ac:	ldp	x22, x21, [sp, #64]
    16b0:	ldp	x24, x23, [sp, #48]
    16b4:	ldr	x25, [sp, #32]
    16b8:	ldp	x29, x30, [sp, #16]
    16bc:	add	sp, sp, #0x60
    16c0:	ret
    16c4:	ldr	x1, [x19]
    16c8:	add	x0, sp, #0x8
    16cc:	bl	0 <ctf_lookup_by_id>
    16d0:	cbz	x0, 171c <ctf_add_function+0xd4>
    16d4:	ldr	w8, [x19, #8]
    16d8:	cbz	w8, 1704 <ctf_add_function+0xbc>
    16dc:	mov	x25, xzr
    16e0:	str	x21, [sp, #8]
    16e4:	ldr	x1, [x20, x25, lsl #3]
    16e8:	add	x0, sp, #0x8
    16ec:	bl	0 <ctf_lookup_by_id>
    16f0:	cbz	x0, 171c <ctf_add_function+0xd4>
    16f4:	ldr	w8, [x19, #8]
    16f8:	add	x25, x25, #0x1
    16fc:	cmp	x25, x8
    1700:	b.cc	16e0 <ctf_add_function+0x98>  // b.lo, b.ul, b.last
    1704:	and	w8, w23, #0x1
    1708:	add	w24, w24, w8
    170c:	lsr	w8, w24, #24
    1710:	cbz	w8, 1724 <ctf_add_function+0xdc>
    1714:	mov	w1, #0x4b                  	// #75
    1718:	b	1698 <ctf_add_function+0x50>
    171c:	mov	x21, #0xffffffffffffffff    	// #-1
    1720:	b	16a4 <ctf_add_function+0x5c>
    1724:	cbz	w24, 1744 <ctf_add_function+0xfc>
    1728:	mov	w8, w24
    172c:	lsl	x0, x8, #3
    1730:	bl	0 <malloc>
    1734:	mov	x23, x0
    1738:	cbnz	x0, 1748 <ctf_add_function+0x100>
    173c:	mov	w1, #0xb                   	// #11
    1740:	b	1698 <ctf_add_function+0x50>
    1744:	mov	x23, xzr
    1748:	add	x4, x29, #0x18
    174c:	mov	w3, #0x5                   	// #5
    1750:	mov	x0, x21
    1754:	mov	w1, w22
    1758:	mov	x2, xzr
    175c:	bl	1138 <ctf_add_generic>
    1760:	mov	x21, x0
    1764:	cmn	x0, #0x1
    1768:	b.eq	17bc <ctf_add_function+0x174>  // b.none
    176c:	cmp	w22, #0x0
    1770:	ldr	x22, [x29, #24]
    1774:	mov	w8, #0x16000000            	// #369098752
    1778:	mov	w9, #0x14000000            	// #335544320
    177c:	csel	w8, w9, w8, eq  // eq = none
    1780:	bfxil	w8, w24, #0, #24
    1784:	str	w8, [x22, #28]
    1788:	ldr	x8, [x19]
    178c:	mov	x0, x23
    1790:	mov	x1, x20
    1794:	str	w8, [x22, #32]
    1798:	ldr	w8, [x19, #8]
    179c:	lsl	x2, x8, #3
    17a0:	bl	0 <memcpy>
    17a4:	ldrb	w8, [x19, #12]
    17a8:	tbz	w8, #0, 17b4 <ctf_add_function+0x16c>
    17ac:	sub	w8, w24, #0x1
    17b0:	str	xzr, [x23, w8, uxtw #3]
    17b4:	str	x23, [x22, #48]
    17b8:	b	16a4 <ctf_add_function+0x5c>
    17bc:	mov	x0, x23
    17c0:	bl	0 <free>
    17c4:	b	16a4 <ctf_add_function+0x5c>

00000000000017c8 <ctf_add_struct_sized>:
    17c8:	stp	x29, x30, [sp, #-64]!
    17cc:	str	x23, [sp, #16]
    17d0:	stp	x22, x21, [sp, #32]
    17d4:	stp	x20, x19, [sp, #48]
    17d8:	mov	x19, x3
    17dc:	mov	x22, x2
    17e0:	mov	w21, w1
    17e4:	mov	x23, x0
    17e8:	mov	x29, sp
    17ec:	cbz	x2, 180c <ctf_add_struct_sized+0x44>
    17f0:	mov	w1, #0x6                   	// #6
    17f4:	mov	x0, x23
    17f8:	mov	x2, x22
    17fc:	bl	0 <ctf_lookup_by_rawname>
    1800:	mov	x20, x0
    1804:	cbnz	x20, 1814 <ctf_add_struct_sized+0x4c>
    1808:	b	183c <ctf_add_struct_sized+0x74>
    180c:	mov	x20, xzr
    1810:	cbz	x20, 183c <ctf_add_struct_sized+0x74>
    1814:	mov	x0, x23
    1818:	mov	x1, x20
    181c:	bl	0 <ctf_type_kind>
    1820:	cmp	w0, #0x9
    1824:	b.ne	183c <ctf_add_struct_sized+0x74>  // b.any
    1828:	mov	x0, x23
    182c:	mov	x1, x20
    1830:	bl	d50 <ctf_dtd_lookup>
    1834:	str	x0, [x29, #24]
    1838:	b	1860 <ctf_add_struct_sized+0x98>
    183c:	add	x4, x29, #0x18
    1840:	mov	w3, #0x6                   	// #6
    1844:	mov	x0, x23
    1848:	mov	w1, w21
    184c:	mov	x2, x22
    1850:	bl	1138 <ctf_add_generic>
    1854:	mov	x20, x0
    1858:	cmn	x0, #0x1
    185c:	b.eq	1898 <ctf_add_struct_sized+0xd0>  // b.none
    1860:	ldr	x8, [x29, #24]
    1864:	cmp	w21, #0x0
    1868:	mov	w9, #0x1a000000            	// #436207616
    186c:	mov	w10, #0x18000000            	// #402653184
    1870:	csel	w10, w10, w9, eq  // eq = none
    1874:	mov	w9, #0xffffffff            	// #-1
    1878:	cmp	x19, x9
    187c:	str	w10, [x8, #28]
    1880:	b.cc	1894 <ctf_add_struct_sized+0xcc>  // b.lo, b.ul, b.last
    1884:	lsr	x10, x19, #32
    1888:	stp	w9, w10, [x8, #32]
    188c:	str	w19, [x8, #40]
    1890:	b	1898 <ctf_add_struct_sized+0xd0>
    1894:	str	w19, [x8, #32]
    1898:	mov	x0, x20
    189c:	ldp	x20, x19, [sp, #48]
    18a0:	ldp	x22, x21, [sp, #32]
    18a4:	ldr	x23, [sp, #16]
    18a8:	ldp	x29, x30, [sp], #64
    18ac:	ret

00000000000018b0 <ctf_add_struct>:
    18b0:	stp	x29, x30, [sp, #-16]!
    18b4:	mov	x3, xzr
    18b8:	mov	x29, sp
    18bc:	bl	17c8 <ctf_add_struct_sized>
    18c0:	ldp	x29, x30, [sp], #16
    18c4:	ret

00000000000018c8 <ctf_add_union_sized>:
    18c8:	stp	x29, x30, [sp, #-64]!
    18cc:	str	x23, [sp, #16]
    18d0:	stp	x22, x21, [sp, #32]
    18d4:	stp	x20, x19, [sp, #48]
    18d8:	mov	x19, x3
    18dc:	mov	x22, x2
    18e0:	mov	w21, w1
    18e4:	mov	x23, x0
    18e8:	mov	x29, sp
    18ec:	cbz	x2, 190c <ctf_add_union_sized+0x44>
    18f0:	mov	w1, #0x7                   	// #7
    18f4:	mov	x0, x23
    18f8:	mov	x2, x22
    18fc:	bl	0 <ctf_lookup_by_rawname>
    1900:	mov	x20, x0
    1904:	cbnz	x20, 1914 <ctf_add_union_sized+0x4c>
    1908:	b	193c <ctf_add_union_sized+0x74>
    190c:	mov	x20, xzr
    1910:	cbz	x20, 193c <ctf_add_union_sized+0x74>
    1914:	mov	x0, x23
    1918:	mov	x1, x20
    191c:	bl	0 <ctf_type_kind>
    1920:	cmp	w0, #0x9
    1924:	b.ne	193c <ctf_add_union_sized+0x74>  // b.any
    1928:	mov	x0, x23
    192c:	mov	x1, x20
    1930:	bl	d50 <ctf_dtd_lookup>
    1934:	str	x0, [x29, #24]
    1938:	b	1960 <ctf_add_union_sized+0x98>
    193c:	add	x4, x29, #0x18
    1940:	mov	w3, #0x7                   	// #7
    1944:	mov	x0, x23
    1948:	mov	w1, w21
    194c:	mov	x2, x22
    1950:	bl	1138 <ctf_add_generic>
    1954:	mov	x20, x0
    1958:	cmn	x0, #0x1
    195c:	b.eq	1998 <ctf_add_union_sized+0xd0>  // b.none
    1960:	ldr	x8, [x29, #24]
    1964:	cmp	w21, #0x0
    1968:	mov	w9, #0x1e000000            	// #503316480
    196c:	mov	w10, #0x1c000000            	// #469762048
    1970:	csel	w10, w10, w9, eq  // eq = none
    1974:	mov	w9, #0xffffffff            	// #-1
    1978:	cmp	x19, x9
    197c:	str	w10, [x8, #28]
    1980:	b.cc	1994 <ctf_add_union_sized+0xcc>  // b.lo, b.ul, b.last
    1984:	lsr	x10, x19, #32
    1988:	stp	w9, w10, [x8, #32]
    198c:	str	w19, [x8, #40]
    1990:	b	1998 <ctf_add_union_sized+0xd0>
    1994:	str	w19, [x8, #32]
    1998:	mov	x0, x20
    199c:	ldp	x20, x19, [sp, #48]
    19a0:	ldp	x22, x21, [sp, #32]
    19a4:	ldr	x23, [sp, #16]
    19a8:	ldp	x29, x30, [sp], #64
    19ac:	ret

00000000000019b0 <ctf_add_union>:
    19b0:	stp	x29, x30, [sp, #-16]!
    19b4:	mov	x3, xzr
    19b8:	mov	x29, sp
    19bc:	bl	18c8 <ctf_add_union_sized>
    19c0:	ldp	x29, x30, [sp], #16
    19c4:	ret

00000000000019c8 <ctf_add_enum>:
    19c8:	sub	sp, sp, #0x40
    19cc:	stp	x22, x21, [sp, #32]
    19d0:	stp	x20, x19, [sp, #48]
    19d4:	mov	x22, x2
    19d8:	mov	w20, w1
    19dc:	mov	x19, x0
    19e0:	stp	x29, x30, [sp, #16]
    19e4:	add	x29, sp, #0x10
    19e8:	cbz	x2, 1a08 <ctf_add_enum+0x40>
    19ec:	mov	w1, #0x8                   	// #8
    19f0:	mov	x0, x19
    19f4:	mov	x2, x22
    19f8:	bl	0 <ctf_lookup_by_rawname>
    19fc:	mov	x21, x0
    1a00:	cbnz	x21, 1a10 <ctf_add_enum+0x48>
    1a04:	b	1a38 <ctf_add_enum+0x70>
    1a08:	mov	x21, xzr
    1a0c:	cbz	x21, 1a38 <ctf_add_enum+0x70>
    1a10:	mov	x0, x19
    1a14:	mov	x1, x21
    1a18:	bl	0 <ctf_type_kind>
    1a1c:	cmp	w0, #0x9
    1a20:	b.ne	1a38 <ctf_add_enum+0x70>  // b.any
    1a24:	mov	x0, x19
    1a28:	mov	x1, x21
    1a2c:	bl	d50 <ctf_dtd_lookup>
    1a30:	str	x0, [sp, #8]
    1a34:	b	1a5c <ctf_add_enum+0x94>
    1a38:	add	x4, sp, #0x8
    1a3c:	mov	w3, #0x8                   	// #8
    1a40:	mov	x0, x19
    1a44:	mov	w1, w20
    1a48:	mov	x2, x22
    1a4c:	bl	1138 <ctf_add_generic>
    1a50:	mov	x21, x0
    1a54:	cmn	x0, #0x1
    1a58:	b.eq	1a80 <ctf_add_enum+0xb8>  // b.none
    1a5c:	ldr	x8, [sp, #8]
    1a60:	cmp	w20, #0x0
    1a64:	mov	w9, #0x22000000            	// #570425344
    1a68:	mov	w10, #0x20000000            	// #536870912
    1a6c:	csel	w9, w10, w9, eq  // eq = none
    1a70:	str	w9, [x8, #28]
    1a74:	ldr	x9, [x19, #488]
    1a78:	ldr	x9, [x9, #40]
    1a7c:	str	w9, [x8, #32]
    1a80:	mov	x0, x21
    1a84:	ldp	x20, x19, [sp, #48]
    1a88:	ldp	x22, x21, [sp, #32]
    1a8c:	ldp	x29, x30, [sp, #16]
    1a90:	add	sp, sp, #0x40
    1a94:	ret

0000000000001a98 <ctf_add_enum_encoded>:
    1a98:	stp	x29, x30, [sp, #-64]!
    1a9c:	str	x23, [sp, #16]
    1aa0:	stp	x22, x21, [sp, #32]
    1aa4:	stp	x20, x19, [sp, #48]
    1aa8:	mov	x19, x3
    1aac:	mov	x23, x2
    1ab0:	mov	w21, w1
    1ab4:	mov	x20, x0
    1ab8:	mov	x29, sp
    1abc:	cbz	x2, 1b10 <ctf_add_enum_encoded+0x78>
    1ac0:	mov	w1, #0x8                   	// #8
    1ac4:	mov	x0, x20
    1ac8:	mov	x2, x23
    1acc:	bl	0 <ctf_lookup_by_rawname>
    1ad0:	mov	x22, x0
    1ad4:	mov	x0, x20
    1ad8:	cbz	x22, 1b1c <ctf_add_enum_encoded+0x84>
    1adc:	mov	x1, x22
    1ae0:	bl	0 <ctf_type_kind>
    1ae4:	cmp	w0, #0x9
    1ae8:	b.eq	1b34 <ctf_add_enum_encoded+0x9c>  // b.none
    1aec:	mov	x0, x20
    1af0:	mov	x1, x22
    1af4:	bl	0 <ctf_type_kind_unsliced>
    1af8:	cmp	w0, #0x8
    1afc:	b.eq	1b34 <ctf_add_enum_encoded+0x9c>  // b.none
    1b00:	mov	w1, #0x3fe                 	// #1022
    1b04:	mov	x0, x20
    1b08:	bl	0 <ctf_set_errno>
    1b0c:	b	1b48 <ctf_add_enum_encoded+0xb0>
    1b10:	mov	x22, xzr
    1b14:	mov	x0, x20
    1b18:	cbnz	x22, 1adc <ctf_add_enum_encoded+0x44>
    1b1c:	mov	w1, w21
    1b20:	mov	x2, x23
    1b24:	bl	19c8 <ctf_add_enum>
    1b28:	mov	x22, x0
    1b2c:	cmn	x0, #0x1
    1b30:	b.eq	1b48 <ctf_add_enum_encoded+0xb0>  // b.none
    1b34:	mov	x0, x20
    1b38:	mov	w1, w21
    1b3c:	mov	x2, x22
    1b40:	mov	x3, x19
    1b44:	bl	1000 <ctf_add_slice>
    1b48:	ldp	x20, x19, [sp, #48]
    1b4c:	ldp	x22, x21, [sp, #32]
    1b50:	ldr	x23, [sp, #16]
    1b54:	ldp	x29, x30, [sp], #64
    1b58:	ret

0000000000001b5c <ctf_add_forward>:
    1b5c:	sub	sp, sp, #0x40
    1b60:	sub	w8, w3, #0x6
    1b64:	stp	x22, x21, [sp, #32]
    1b68:	cmp	w8, #0x3
    1b6c:	mov	x22, x0
    1b70:	stp	x29, x30, [sp, #16]
    1b74:	stp	x20, x19, [sp, #48]
    1b78:	add	x29, sp, #0x10
    1b7c:	b.cs	1bdc <ctf_add_forward+0x80>  // b.hs, b.nlast
    1b80:	mov	w19, w3
    1b84:	mov	x21, x2
    1b88:	mov	w20, w1
    1b8c:	cbz	x2, 1ba0 <ctf_add_forward+0x44>
    1b90:	mov	x0, x22
    1b94:	mov	w1, w19
    1b98:	mov	x2, x21
    1b9c:	bl	0 <ctf_lookup_by_rawname>
    1ba0:	add	x4, sp, #0x8
    1ba4:	mov	w3, #0x9                   	// #9
    1ba8:	mov	x0, x22
    1bac:	mov	w1, w20
    1bb0:	mov	x2, x21
    1bb4:	bl	1138 <ctf_add_generic>
    1bb8:	cmn	x0, #0x1
    1bbc:	b.eq	1be8 <ctf_add_forward+0x8c>  // b.none
    1bc0:	ldr	x8, [sp, #8]
    1bc4:	cmp	w20, #0x0
    1bc8:	mov	w9, #0x26000000            	// #637534208
    1bcc:	mov	w10, #0x24000000            	// #603979776
    1bd0:	csel	w9, w10, w9, eq  // eq = none
    1bd4:	stp	w9, w19, [x8, #28]
    1bd8:	b	1be8 <ctf_add_forward+0x8c>
    1bdc:	mov	w1, #0x3fd                 	// #1021
    1be0:	mov	x0, x22
    1be4:	bl	0 <ctf_set_errno>
    1be8:	ldp	x20, x19, [sp, #48]
    1bec:	ldp	x22, x21, [sp, #32]
    1bf0:	ldp	x29, x30, [sp, #16]
    1bf4:	add	sp, sp, #0x40
    1bf8:	ret

0000000000001bfc <ctf_add_typedef>:
    1bfc:	sub	sp, sp, #0x40
    1c00:	mov	w8, #0xffffffff            	// #-1
    1c04:	stp	x22, x21, [sp, #32]
    1c08:	mov	x21, x0
    1c0c:	cmp	x3, x8
    1c10:	stp	x29, x30, [sp, #16]
    1c14:	stp	x20, x19, [sp, #48]
    1c18:	add	x29, sp, #0x10
    1c1c:	str	x0, [sp]
    1c20:	b.cc	1c34 <ctf_add_typedef+0x38>  // b.lo, b.ul, b.last
    1c24:	mov	w1, #0x16                  	// #22
    1c28:	mov	x0, x21
    1c2c:	bl	0 <ctf_set_errno>
    1c30:	b	1c90 <ctf_add_typedef+0x94>
    1c34:	mov	w20, w1
    1c38:	mov	x0, sp
    1c3c:	mov	x1, x3
    1c40:	mov	x19, x3
    1c44:	mov	x22, x2
    1c48:	bl	0 <ctf_lookup_by_id>
    1c4c:	cbz	x0, 1c8c <ctf_add_typedef+0x90>
    1c50:	add	x4, sp, #0x8
    1c54:	mov	w3, #0xa                   	// #10
    1c58:	mov	x0, x21
    1c5c:	mov	w1, w20
    1c60:	mov	x2, x22
    1c64:	bl	1138 <ctf_add_generic>
    1c68:	cmn	x0, #0x1
    1c6c:	b.eq	1c90 <ctf_add_typedef+0x94>  // b.none
    1c70:	ldr	x8, [sp, #8]
    1c74:	cmp	w20, #0x0
    1c78:	mov	w9, #0x2a000000            	// #704643072
    1c7c:	mov	w10, #0x28000000            	// #671088640
    1c80:	csel	w9, w10, w9, eq  // eq = none
    1c84:	stp	w9, w19, [x8, #28]
    1c88:	b	1c90 <ctf_add_typedef+0x94>
    1c8c:	mov	x0, #0xffffffffffffffff    	// #-1
    1c90:	ldp	x20, x19, [sp, #48]
    1c94:	ldp	x22, x21, [sp, #32]
    1c98:	ldp	x29, x30, [sp, #16]
    1c9c:	add	sp, sp, #0x40
    1ca0:	ret

0000000000001ca4 <ctf_add_volatile>:
    1ca4:	stp	x29, x30, [sp, #-16]!
    1ca8:	mov	w3, #0xb                   	// #11
    1cac:	mov	x29, sp
    1cb0:	bl	13a8 <ctf_add_reftype>
    1cb4:	ldp	x29, x30, [sp], #16
    1cb8:	ret

0000000000001cbc <ctf_add_const>:
    1cbc:	stp	x29, x30, [sp, #-16]!
    1cc0:	mov	w3, #0xc                   	// #12
    1cc4:	mov	x29, sp
    1cc8:	bl	13a8 <ctf_add_reftype>
    1ccc:	ldp	x29, x30, [sp], #16
    1cd0:	ret

0000000000001cd4 <ctf_add_restrict>:
    1cd4:	stp	x29, x30, [sp, #-16]!
    1cd8:	mov	w3, #0xd                   	// #13
    1cdc:	mov	x29, sp
    1ce0:	bl	13a8 <ctf_add_reftype>
    1ce4:	ldp	x29, x30, [sp], #16
    1ce8:	ret

0000000000001cec <ctf_add_enumerator>:
    1cec:	stp	x29, x30, [sp, #-80]!
    1cf0:	str	x25, [sp, #16]
    1cf4:	stp	x24, x23, [sp, #32]
    1cf8:	stp	x22, x21, [sp, #48]
    1cfc:	stp	x20, x19, [sp, #64]
    1d00:	mov	x29, sp
    1d04:	mov	w20, w3
    1d08:	mov	x22, x2
    1d0c:	mov	x19, x0
    1d10:	bl	d50 <ctf_dtd_lookup>
    1d14:	cbz	x22, 1d28 <ctf_add_enumerator+0x3c>
    1d18:	ldrb	w8, [x19, #552]
    1d1c:	tbnz	w8, #1, 1d30 <ctf_add_enumerator+0x44>
    1d20:	mov	w1, #0x40d                 	// #1037
    1d24:	b	1da4 <ctf_add_enumerator+0xb8>
    1d28:	mov	w1, #0x16                  	// #22
    1d2c:	b	1da4 <ctf_add_enumerator+0xb8>
    1d30:	mov	x21, x0
    1d34:	cbz	x0, 1d98 <ctf_add_enumerator+0xac>
    1d38:	ldr	x8, [x19]
    1d3c:	ldr	w0, [x21, #28]
    1d40:	ldr	x8, [x8]
    1d44:	blr	x8
    1d48:	ldr	x8, [x19]
    1d4c:	mov	w24, w0
    1d50:	ldr	x9, [x8, #8]
    1d54:	ldr	w8, [x21, #28]
    1d58:	mov	w0, w8
    1d5c:	blr	x9
    1d60:	ldr	x8, [x19]
    1d64:	mov	w23, w0
    1d68:	ldr	x9, [x8, #16]
    1d6c:	ldr	w8, [x21, #28]
    1d70:	mov	w0, w8
    1d74:	blr	x9
    1d78:	cmp	w24, #0x8
    1d7c:	b.ne	1da0 <ctf_add_enumerator+0xb4>  // b.any
    1d80:	mov	w8, #0xffffff              	// #16777215
    1d84:	mov	w24, w0
    1d88:	cmp	w0, w8
    1d8c:	b.ne	1dc4 <ctf_add_enumerator+0xd8>  // b.any
    1d90:	mov	w1, #0x40e                 	// #1038
    1d94:	b	1da4 <ctf_add_enumerator+0xb8>
    1d98:	mov	w1, #0x3fa                 	// #1018
    1d9c:	b	1da4 <ctf_add_enumerator+0xb8>
    1da0:	mov	w1, #0x3fc                 	// #1020
    1da4:	mov	x0, x19
    1da8:	bl	0 <ctf_set_errno>
    1dac:	ldp	x20, x19, [sp, #64]
    1db0:	ldp	x22, x21, [sp, #48]
    1db4:	ldp	x24, x23, [sp, #32]
    1db8:	ldr	x25, [sp, #16]
    1dbc:	ldp	x29, x30, [sp], #80
    1dc0:	ret
    1dc4:	ldr	x25, [x21, #56]
    1dc8:	cbz	x25, 1de4 <ctf_add_enumerator+0xf8>
    1dcc:	ldr	x0, [x25, #16]
    1dd0:	mov	x1, x22
    1dd4:	bl	0 <strcmp>
    1dd8:	cbz	w0, 1e50 <ctf_add_enumerator+0x164>
    1ddc:	ldr	x25, [x25, #8]
    1de0:	cbnz	x25, 1dcc <ctf_add_enumerator+0xe0>
    1de4:	mov	w0, #0x30                  	// #48
    1de8:	bl	0 <malloc>
    1dec:	cbz	x0, 1e58 <ctf_add_enumerator+0x16c>
    1df0:	mov	x25, x0
    1df4:	mov	x0, x22
    1df8:	bl	0 <strdup>
    1dfc:	cbz	x0, 1e60 <ctf_add_enumerator+0x174>
    1e00:	mov	x9, #0xffffffffffffffff    	// #-1
    1e04:	cmp	w23, #0x0
    1e08:	mov	w10, #0x22000000            	// #570425344
    1e0c:	mov	w11, #0x20000000            	// #536870912
    1e10:	add	x8, x21, #0x30
    1e14:	stp	x9, xzr, [x25, #24]
    1e18:	csel	w9, w11, w10, eq  // eq = none
    1e1c:	add	w10, w24, #0x1
    1e20:	str	x0, [x25, #16]
    1e24:	bfxil	w9, w10, #0, #24
    1e28:	mov	x0, x8
    1e2c:	mov	x1, x25
    1e30:	str	w20, [x25, #40]
    1e34:	str	w9, [x21, #28]
    1e38:	bl	0 <ctf_list_append>
    1e3c:	ldr	w8, [x19, #552]
    1e40:	mov	w0, wzr
    1e44:	orr	w8, w8, #0x4
    1e48:	str	w8, [x19, #552]
    1e4c:	b	1dac <ctf_add_enumerator+0xc0>
    1e50:	mov	w1, #0x410                 	// #1040
    1e54:	b	1da4 <ctf_add_enumerator+0xb8>
    1e58:	mov	w1, #0xb                   	// #11
    1e5c:	b	1da4 <ctf_add_enumerator+0xb8>
    1e60:	mov	x0, x25
    1e64:	bl	0 <free>
    1e68:	mov	w1, #0xb                   	// #11
    1e6c:	b	1da4 <ctf_add_enumerator+0xb8>

0000000000001e70 <ctf_add_member_offset>:
    1e70:	sub	sp, sp, #0x80
    1e74:	stp	x29, x30, [sp, #32]
    1e78:	stp	x28, x27, [sp, #48]
    1e7c:	stp	x26, x25, [sp, #64]
    1e80:	stp	x24, x23, [sp, #80]
    1e84:	stp	x22, x21, [sp, #96]
    1e88:	stp	x20, x19, [sp, #112]
    1e8c:	add	x29, sp, #0x20
    1e90:	mov	x25, x4
    1e94:	mov	x27, x3
    1e98:	mov	x28, x2
    1e9c:	mov	x19, x0
    1ea0:	bl	d50 <ctf_dtd_lookup>
    1ea4:	ldrb	w8, [x19, #552]
    1ea8:	tbnz	w8, #1, 1eb4 <ctf_add_member_offset+0x44>
    1eac:	mov	w1, #0x40d                 	// #1037
    1eb0:	b	1f2c <ctf_add_member_offset+0xbc>
    1eb4:	mov	x20, x0
    1eb8:	cbz	x0, 1f20 <ctf_add_member_offset+0xb0>
    1ebc:	ldr	x8, [x19]
    1ec0:	ldr	w0, [x20, #28]
    1ec4:	ldr	x8, [x8]
    1ec8:	blr	x8
    1ecc:	ldr	x8, [x19]
    1ed0:	mov	w21, w0
    1ed4:	ldr	x9, [x8, #8]
    1ed8:	ldr	w8, [x20, #28]
    1edc:	mov	w0, w8
    1ee0:	blr	x9
    1ee4:	ldr	x8, [x19]
    1ee8:	mov	w22, w0
    1eec:	ldr	x9, [x8, #16]
    1ef0:	ldr	w8, [x20, #28]
    1ef4:	mov	w0, w8
    1ef8:	blr	x9
    1efc:	orr	w8, w21, #0x1
    1f00:	cmp	w8, #0x7
    1f04:	b.ne	1f28 <ctf_add_member_offset+0xb8>  // b.any
    1f08:	mov	w8, #0xffffff              	// #16777215
    1f0c:	mov	w23, w0
    1f10:	cmp	w0, w8
    1f14:	b.ne	1f54 <ctf_add_member_offset+0xe4>  // b.any
    1f18:	mov	w1, #0x40e                 	// #1038
    1f1c:	b	1f2c <ctf_add_member_offset+0xbc>
    1f20:	mov	w1, #0x3fa                 	// #1018
    1f24:	b	1f2c <ctf_add_member_offset+0xbc>
    1f28:	mov	w1, #0x3fb                 	// #1019
    1f2c:	mov	x0, x19
    1f30:	bl	0 <ctf_set_errno>
    1f34:	ldp	x20, x19, [sp, #112]
    1f38:	ldp	x22, x21, [sp, #96]
    1f3c:	ldp	x24, x23, [sp, #80]
    1f40:	ldp	x26, x25, [sp, #64]
    1f44:	ldp	x28, x27, [sp, #48]
    1f48:	ldp	x29, x30, [sp, #32]
    1f4c:	add	sp, sp, #0x80
    1f50:	ret
    1f54:	cbz	x28, 1f60 <ctf_add_member_offset+0xf0>
    1f58:	ldr	x24, [x20, #56]
    1f5c:	cbnz	x24, 1fc0 <ctf_add_member_offset+0x150>
    1f60:	mov	x0, x19
    1f64:	mov	x1, x27
    1f68:	bl	0 <ctf_type_size>
    1f6c:	tbnz	x0, #63, 1fdc <ctf_add_member_offset+0x16c>
    1f70:	mov	x26, x0
    1f74:	mov	x0, x19
    1f78:	mov	x1, x27
    1f7c:	bl	0 <ctf_type_align>
    1f80:	tbnz	x0, #63, 1fdc <ctf_add_member_offset+0x16c>
    1f84:	str	x0, [sp, #8]
    1f88:	mov	w0, #0x30                  	// #48
    1f8c:	bl	0 <malloc>
    1f90:	cbz	x0, 1fe4 <ctf_add_member_offset+0x174>
    1f94:	mov	x24, x0
    1f98:	cbz	x28, 1fec <ctf_add_member_offset+0x17c>
    1f9c:	mov	x0, x28
    1fa0:	bl	0 <strdup>
    1fa4:	cbnz	x0, 1ff0 <ctf_add_member_offset+0x180>
    1fa8:	mov	x0, x24
    1fac:	bl	0 <free>
    1fb0:	mov	w1, #0xb                   	// #11
    1fb4:	b	1f2c <ctf_add_member_offset+0xbc>
    1fb8:	ldr	x24, [x24, #8]
    1fbc:	cbz	x24, 1f60 <ctf_add_member_offset+0xf0>
    1fc0:	ldr	x0, [x24, #16]
    1fc4:	cbz	x0, 1fb8 <ctf_add_member_offset+0x148>
    1fc8:	mov	x1, x28
    1fcc:	bl	0 <strcmp>
    1fd0:	cbnz	w0, 1fb8 <ctf_add_member_offset+0x148>
    1fd4:	mov	w1, #0x410                 	// #1040
    1fd8:	b	1f2c <ctf_add_member_offset+0xbc>
    1fdc:	mov	w0, #0xffffffff            	// #-1
    1fe0:	b	1f34 <ctf_add_member_offset+0xc4>
    1fe4:	mov	w1, #0xb                   	// #11
    1fe8:	b	1f2c <ctf_add_member_offset+0xbc>
    1fec:	mov	x0, xzr
    1ff0:	add	x1, x20, #0x18
    1ff4:	mov	w8, #0xffffffff            	// #-1
    1ff8:	cmp	w21, #0x6
    1ffc:	stp	x0, x27, [x24, #16]
    2000:	str	w8, [x24, #40]
    2004:	b.ne	2040 <ctf_add_member_offset+0x1d0>  // b.any
    2008:	cbz	w23, 2040 <ctf_add_member_offset+0x1d0>
    200c:	cmn	x25, #0x1
    2010:	b.eq	2058 <ctf_add_member_offset+0x1e8>  // b.none
    2014:	mov	x0, x19
    2018:	str	x25, [x24, #32]
    201c:	bl	2130 <ctf_get_ctt_size>
    2020:	add	w8, w25, #0x7
    2024:	cmp	w25, #0x0
    2028:	csel	w8, w8, w25, lt  // lt = tstop
    202c:	asr	w8, w8, #3
    2030:	add	x8, x26, w8, sxtw
    2034:	cmp	x0, x8
    2038:	csel	x8, x0, x8, gt
    203c:	b	20d4 <ctf_add_member_offset+0x264>
    2040:	mov	x0, x19
    2044:	str	xzr, [x24, #32]
    2048:	bl	2130 <ctf_get_ctt_size>
    204c:	cmp	x0, x26
    2050:	csel	x8, x0, x26, gt
    2054:	b	20d4 <ctf_add_member_offset+0x264>
    2058:	ldr	x25, [x20, #48]
    205c:	mov	x0, x19
    2060:	ldr	x1, [x25, #24]
    2064:	bl	0 <ctf_type_resolve>
    2068:	ldr	x27, [x25, #32]
    206c:	mov	x25, x0
    2070:	add	x2, sp, #0x10
    2074:	mov	x0, x19
    2078:	mov	x1, x25
    207c:	bl	0 <ctf_type_encoding>
    2080:	cbz	w0, 20a0 <ctf_add_member_offset+0x230>
    2084:	mov	x0, x19
    2088:	mov	x1, x25
    208c:	bl	0 <ctf_type_size>
    2090:	cmp	x0, #0x1
    2094:	b.lt	20a8 <ctf_add_member_offset+0x238>  // b.tstop
    2098:	add	x27, x27, x0, lsl #3
    209c:	b	20a8 <ctf_add_member_offset+0x238>
    20a0:	ldr	w8, [sp, #24]
    20a4:	add	x27, x27, x8
    20a8:	ldr	x9, [sp, #8]
    20ac:	add	x8, x27, #0x7
    20b0:	cmp	x9, #0x1
    20b4:	csinc	x9, x9, xzr, gt
    20b8:	add	x8, x9, x8, lsr #3
    20bc:	sub	x8, x8, #0x1
    20c0:	udiv	x8, x8, x9
    20c4:	mul	x8, x8, x9
    20c8:	lsl	x9, x8, #3
    20cc:	str	x9, [x24, #32]
    20d0:	add	x8, x8, x26
    20d4:	mov	w9, #0xffffffff            	// #-1
    20d8:	cmp	x8, x9
    20dc:	b.cc	20f0 <ctf_add_member_offset+0x280>  // b.lo, b.ul, b.last
    20e0:	lsr	x10, x8, #32
    20e4:	stp	w9, w10, [x20, #32]
    20e8:	str	w8, [x20, #40]
    20ec:	b	20f4 <ctf_add_member_offset+0x284>
    20f0:	str	w8, [x20, #32]
    20f4:	cmp	w22, #0x0
    20f8:	lsl	w8, w21, #26
    20fc:	cset	w10, ne  // ne = any
    2100:	add	w9, w23, #0x1
    2104:	bfi	w8, w10, #25, #1
    2108:	bfxil	w8, w9, #0, #24
    210c:	add	x0, x20, #0x30
    2110:	mov	x1, x24
    2114:	str	w8, [x20, #28]
    2118:	bl	0 <ctf_list_append>
    211c:	ldr	w8, [x19, #552]
    2120:	mov	w0, wzr
    2124:	orr	w8, w8, #0x4
    2128:	str	w8, [x19, #552]
    212c:	b	1f34 <ctf_add_member_offset+0xc4>

0000000000002130 <ctf_get_ctt_size>:
    2130:	stp	x29, x30, [sp, #-16]!
    2134:	ldr	x8, [x0]
    2138:	mov	x2, xzr
    213c:	mov	x3, xzr
    2140:	mov	x29, sp
    2144:	ldr	x8, [x8, #24]
    2148:	blr	x8
    214c:	ldp	x29, x30, [sp], #16
    2150:	ret

0000000000002154 <ctf_add_member_encoded>:
    2154:	sub	sp, sp, #0x50
    2158:	stp	x22, x21, [sp, #48]
    215c:	mov	x22, x1
    2160:	mov	x1, x3
    2164:	stp	x29, x30, [sp, #16]
    2168:	str	x23, [sp, #32]
    216c:	stp	x20, x19, [sp, #64]
    2170:	add	x29, sp, #0x10
    2174:	mov	x19, x4
    2178:	mov	x23, x3
    217c:	mov	x21, x2
    2180:	mov	x20, x0
    2184:	str	x5, [sp]
    2188:	str	w6, [sp, #8]
    218c:	bl	d50 <ctf_dtd_lookup>
    2190:	ldr	x8, [x20]
    2194:	ldr	w0, [x0, #28]
    2198:	ldr	x8, [x8]
    219c:	blr	x8
    21a0:	cmp	w0, #0x8
    21a4:	b.hi	21f4 <ctf_add_member_encoded+0xa0>  // b.pmore
    21a8:	mov	w8, #0x1                   	// #1
    21ac:	lsl	w8, w8, w0
    21b0:	mov	w9, #0x106                 	// #262
    21b4:	tst	w8, w9
    21b8:	b.eq	21f4 <ctf_add_member_encoded+0xa0>  // b.none
    21bc:	sxtw	x2, w23
    21c0:	mov	x3, sp
    21c4:	mov	x0, x20
    21c8:	mov	w1, wzr
    21cc:	bl	1000 <ctf_add_slice>
    21d0:	cmn	x0, #0x1
    21d4:	b.eq	2200 <ctf_add_member_encoded+0xac>  // b.none
    21d8:	mov	x3, x0
    21dc:	mov	x0, x20
    21e0:	mov	x1, x22
    21e4:	mov	x2, x21
    21e8:	mov	x4, x19
    21ec:	bl	1e70 <ctf_add_member_offset>
    21f0:	b	2200 <ctf_add_member_encoded+0xac>
    21f4:	mov	w1, #0x3fe                 	// #1022
    21f8:	mov	x0, x20
    21fc:	bl	0 <ctf_set_errno>
    2200:	ldp	x20, x19, [sp, #64]
    2204:	ldp	x22, x21, [sp, #48]
    2208:	ldr	x23, [sp, #32]
    220c:	ldp	x29, x30, [sp, #16]
    2210:	add	sp, sp, #0x50
    2214:	ret

0000000000002218 <ctf_add_member>:
    2218:	stp	x29, x30, [sp, #-16]!
    221c:	mov	x4, #0xffffffffffffffff    	// #-1
    2220:	mov	x29, sp
    2224:	bl	1e70 <ctf_add_member_offset>
    2228:	ldp	x29, x30, [sp], #16
    222c:	ret

0000000000002230 <ctf_add_variable>:
    2230:	sub	sp, sp, #0x40
    2234:	stp	x29, x30, [sp, #16]
    2238:	stp	x22, x21, [sp, #32]
    223c:	stp	x20, x19, [sp, #48]
    2240:	str	x0, [sp, #8]
    2244:	ldrb	w8, [x0, #552]
    2248:	mov	x19, x0
    224c:	add	x29, sp, #0x10
    2250:	tbnz	w8, #1, 225c <ctf_add_variable+0x2c>
    2254:	mov	w1, #0x40d                 	// #1037
    2258:	b	2274 <ctf_add_variable+0x44>
    225c:	mov	x0, x19
    2260:	mov	x20, x2
    2264:	mov	x21, x1
    2268:	bl	e4c <ctf_dvd_lookup>
    226c:	cbz	x0, 2290 <ctf_add_variable+0x60>
    2270:	mov	w1, #0x410                 	// #1040
    2274:	mov	x0, x19
    2278:	bl	0 <ctf_set_errno>
    227c:	ldp	x20, x19, [sp, #48]
    2280:	ldp	x22, x21, [sp, #32]
    2284:	ldp	x29, x30, [sp, #16]
    2288:	add	sp, sp, #0x40
    228c:	ret
    2290:	add	x0, sp, #0x8
    2294:	mov	x1, x20
    2298:	bl	0 <ctf_lookup_by_id>
    229c:	cbz	x0, 22c4 <ctf_add_variable+0x94>
    22a0:	mov	x0, x19
    22a4:	mov	x1, x20
    22a8:	bl	0 <ctf_type_resolve>
    22ac:	cmn	x0, #0x1
    22b0:	b.ne	22cc <ctf_add_variable+0x9c>  // b.any
    22b4:	mov	x0, x19
    22b8:	bl	0 <ctf_errno>
    22bc:	cmp	w0, #0x41b
    22c0:	b.ne	22cc <ctf_add_variable+0x9c>  // b.any
    22c4:	mov	w0, #0xffffffff            	// #-1
    22c8:	b	227c <ctf_add_variable+0x4c>
    22cc:	mov	w0, #0x28                  	// #40
    22d0:	bl	0 <malloc>
    22d4:	cbz	x0, 231c <ctf_add_variable+0xec>
    22d8:	mov	x22, x0
    22dc:	cbz	x21, 22f0 <ctf_add_variable+0xc0>
    22e0:	mov	x0, x21
    22e4:	bl	0 <strdup>
    22e8:	str	x0, [x22, #16]
    22ec:	cbz	x0, 233c <ctf_add_variable+0x10c>
    22f0:	ldr	x8, [x19, #624]
    22f4:	mov	x0, x19
    22f8:	mov	x1, x22
    22fc:	stp	x20, x8, [x22, #24]
    2300:	bl	db8 <ctf_dvd_insert>
    2304:	tbnz	w0, #31, 2324 <ctf_add_variable+0xf4>
    2308:	ldr	w8, [x19, #552]
    230c:	mov	w0, wzr
    2310:	orr	w8, w8, #0x4
    2314:	str	w8, [x19, #552]
    2318:	b	227c <ctf_add_variable+0x4c>
    231c:	mov	w1, #0xb                   	// #11
    2320:	b	2274 <ctf_add_variable+0x44>
    2324:	ldr	x0, [x22, #16]
    2328:	bl	0 <free>
    232c:	mov	x0, x22
    2330:	bl	0 <free>
    2334:	mov	w0, #0xffffffff            	// #-1
    2338:	b	227c <ctf_add_variable+0x4c>
    233c:	mov	x0, x22
    2340:	bl	0 <free>
    2344:	mov	w1, #0xb                   	// #11
    2348:	b	2274 <ctf_add_variable+0x44>

000000000000234c <ctf_add_type>:
    234c:	stp	x29, x30, [sp, #-48]!
    2350:	stp	x20, x19, [sp, #32]
    2354:	ldr	x8, [x1, #696]
    2358:	str	x21, [sp, #16]
    235c:	mov	x20, x2
    2360:	mov	x19, x1
    2364:	mov	x21, x0
    2368:	mov	x29, sp
    236c:	cbz	x8, 23a0 <ctf_add_type+0x54>
    2370:	ldr	x8, [x19, #696]
    2374:	cbz	x8, 23c8 <ctf_add_type+0x7c>
    2378:	mov	x0, x21
    237c:	mov	x1, x19
    2380:	mov	x2, x20
    2384:	mov	x3, x19
    2388:	bl	23ec <ctf_add_type_internal>
    238c:	ldr	x8, [x19, #696]
    2390:	mov	x19, x0
    2394:	mov	x0, x8
    2398:	bl	0 <ctf_dynhash_empty>
    239c:	b	23d8 <ctf_add_type+0x8c>
    23a0:	adrp	x0, 0 <ctf_hash_integer>
    23a4:	adrp	x1, 0 <ctf_hash_eq_integer>
    23a8:	add	x0, x0, #0x0
    23ac:	add	x1, x1, #0x0
    23b0:	mov	x2, xzr
    23b4:	mov	x3, xzr
    23b8:	bl	0 <ctf_dynhash_create>
    23bc:	str	x0, [x19, #696]
    23c0:	ldr	x8, [x19, #696]
    23c4:	cbnz	x8, 2378 <ctf_add_type+0x2c>
    23c8:	mov	w1, #0xc                   	// #12
    23cc:	mov	x0, x21
    23d0:	bl	0 <ctf_set_errno>
    23d4:	mov	x19, x0
    23d8:	mov	x0, x19
    23dc:	ldp	x20, x19, [sp, #32]
    23e0:	ldr	x21, [sp, #16]
    23e4:	ldp	x29, x30, [sp], #48
    23e8:	ret

00000000000023ec <ctf_add_type_internal>:
    23ec:	sub	sp, sp, #0x100
    23f0:	stp	x29, x30, [sp, #160]
    23f4:	add	x29, sp, #0xa0
    23f8:	stp	x28, x27, [sp, #176]
    23fc:	stp	x26, x25, [sp, #192]
    2400:	stp	x24, x23, [sp, #208]
    2404:	stp	x22, x21, [sp, #224]
    2408:	stp	x20, x19, [sp, #240]
    240c:	stp	x0, x1, [x29, #-16]
    2410:	ldrb	w8, [x0, #552]
    2414:	mov	x19, x0
    2418:	tbnz	w8, #1, 2424 <ctf_add_type_internal+0x38>
    241c:	mov	w1, #0x40d                 	// #1037
    2420:	b	25a8 <ctf_add_type_internal+0x1bc>
    2424:	sub	x0, x29, #0x8
    2428:	mov	x1, x2
    242c:	mov	x22, x3
    2430:	mov	x20, x2
    2434:	bl	0 <ctf_lookup_by_id>
    2438:	ldur	x8, [x29, #-8]
    243c:	cbz	x0, 259c <ctf_add_type_internal+0x1b0>
    2440:	mov	x28, x0
    2444:	mov	x0, x8
    2448:	mov	x1, x20
    244c:	bl	0 <ctf_type_resolve>
    2450:	cmn	x0, #0x1
    2454:	b.ne	2470 <ctf_add_type_internal+0x84>  // b.any
    2458:	ldur	x0, [x29, #-8]
    245c:	bl	0 <ctf_errno>
    2460:	cmp	w0, #0x41b
    2464:	b.ne	2470 <ctf_add_type_internal+0x84>  // b.any
    2468:	mov	w1, #0x41b                 	// #1051
    246c:	b	25a8 <ctf_add_type_internal+0x1bc>
    2470:	ldur	x0, [x29, #-8]
    2474:	ldr	w1, [x28]
    2478:	bl	0 <ctf_strptr>
    247c:	ldur	x8, [x29, #-8]
    2480:	mov	x24, x0
    2484:	ldr	x8, [x8]
    2488:	ldr	x9, [x8]
    248c:	ldr	w8, [x28, #4]
    2490:	mov	w0, w8
    2494:	blr	x9
    2498:	ldur	x8, [x29, #-8]
    249c:	mov	w25, w0
    24a0:	ldr	x8, [x8]
    24a4:	ldr	x9, [x8, #8]
    24a8:	ldr	w8, [x28, #4]
    24ac:	mov	w0, w8
    24b0:	blr	x9
    24b4:	ldur	x8, [x29, #-8]
    24b8:	str	w0, [sp, #12]
    24bc:	ldr	x8, [x8]
    24c0:	ldr	x9, [x8, #16]
    24c4:	ldr	w8, [x28, #4]
    24c8:	mov	w0, w8
    24cc:	blr	x9
    24d0:	ldur	x8, [x29, #-8]
    24d4:	str	w0, [sp, #8]
    24d8:	sub	x2, x29, #0x10
    24dc:	mov	x1, x20
    24e0:	mov	x0, x8
    24e4:	bl	0 <ctf_type_mapping>
    24e8:	cbz	x0, 2550 <ctf_add_type_internal+0x164>
    24ec:	mov	x26, x0
    24f0:	ldr	x0, [x22, #696]
    24f4:	mov	x1, x20
    24f8:	bl	0 <ctf_dynhash_lookup>
    24fc:	cbnz	x0, 25b4 <ctf_add_type_internal+0x1c8>
    2500:	ldur	x0, [x29, #-16]
    2504:	mov	x1, x26
    2508:	bl	0 <ctf_type_kind_unsliced>
    250c:	sub	w8, w25, #0x6
    2510:	cmp	w8, #0x2
    2514:	b.hi	2550 <ctf_add_type_internal+0x164>  // b.pmore
    2518:	cmp	w0, w25
    251c:	b.ne	2550 <ctf_add_type_internal+0x164>  // b.any
    2520:	sub	x0, x29, #0x10
    2524:	mov	x1, #0xffffffffffffffff    	// #-1
    2528:	bl	0 <ctf_lookup_by_id>
    252c:	cbz	x0, 2550 <ctf_add_type_internal+0x164>
    2530:	ldur	x8, [x29, #-16]
    2534:	ldr	w0, [x0, #4]
    2538:	ldr	x8, [x8]
    253c:	ldr	x8, [x8, #16]
    2540:	blr	x8
    2544:	ldr	w8, [sp, #8]
    2548:	cmp	w8, w0
    254c:	b.eq	25b4 <ctf_add_type_internal+0x1c8>  // b.none
    2550:	cmp	w25, #0x9
    2554:	mov	w27, w25
    2558:	b.ne	2560 <ctf_add_type_internal+0x174>  // b.any
    255c:	ldr	w27, [x28, #8]
    2560:	ldr	w8, [sp, #12]
    2564:	tbz	w8, #0, 25d8 <ctf_add_type_internal+0x1ec>
    2568:	ldrb	w8, [x24]
    256c:	cbz	w8, 25d8 <ctf_add_type_internal+0x1ec>
    2570:	mov	x0, x19
    2574:	mov	w1, w27
    2578:	mov	x2, x24
    257c:	bl	0 <ctf_lookup_by_rawname>
    2580:	cbz	x0, 25d8 <ctf_add_type_internal+0x1ec>
    2584:	mov	x21, x0
    2588:	mov	x0, x19
    258c:	mov	x1, x21
    2590:	bl	0 <ctf_type_kind_unsliced>
    2594:	mov	w23, w0
    2598:	b	25e0 <ctf_add_type_internal+0x1f4>
    259c:	mov	x0, x8
    25a0:	bl	0 <ctf_errno>
    25a4:	mov	w1, w0
    25a8:	mov	x0, x19
    25ac:	bl	0 <ctf_set_errno>
    25b0:	mov	x26, x0
    25b4:	mov	x0, x26
    25b8:	ldp	x20, x19, [sp, #240]
    25bc:	ldp	x22, x21, [sp, #224]
    25c0:	ldp	x24, x23, [sp, #208]
    25c4:	ldp	x26, x25, [sp, #192]
    25c8:	ldp	x28, x27, [sp, #176]
    25cc:	ldp	x29, x30, [sp, #160]
    25d0:	add	sp, sp, #0x100
    25d4:	ret
    25d8:	mov	w23, wzr
    25dc:	mov	x21, #0xffffffffffffffff    	// #-1
    25e0:	cmp	w23, w25
    25e4:	b.eq	2618 <ctf_add_type_internal+0x22c>  // b.none
    25e8:	cmn	x21, #0x1
    25ec:	b.eq	2618 <ctf_add_type_internal+0x22c>  // b.none
    25f0:	cmp	w25, #0x9
    25f4:	b.ne	2604 <ctf_add_type_internal+0x218>  // b.any
    25f8:	sub	w8, w23, #0x6
    25fc:	cmp	w8, #0x3
    2600:	b.cc	29d4 <ctf_add_type_internal+0x5e8>  // b.lo, b.ul, b.last
    2604:	cmp	w23, #0x9
    2608:	b.ne	2650 <ctf_add_type_internal+0x264>  // b.any
    260c:	sub	w8, w25, #0x6
    2610:	cmp	w8, #0x3
    2614:	b.cs	2650 <ctf_add_type_internal+0x264>  // b.hs, b.nlast
    2618:	cmp	w25, #0xe
    261c:	b.hi	26b8 <ctf_add_type_internal+0x2cc>  // b.pmore
    2620:	mov	w8, #0x1                   	// #1
    2624:	lsl	w8, w8, w25
    2628:	mov	w9, #0x4006                	// #16390
    262c:	tst	w8, w9
    2630:	b.eq	26b8 <ctf_add_type_internal+0x2cc>  // b.none
    2634:	ldur	x0, [x29, #-8]
    2638:	add	x2, sp, #0x50
    263c:	mov	x1, x20
    2640:	bl	0 <ctf_type_encoding>
    2644:	cbz	w0, 2674 <ctf_add_type_internal+0x288>
    2648:	ldur	x0, [x29, #-8]
    264c:	b	25a0 <ctf_add_type_internal+0x1b4>
    2650:	adrp	x0, 0 <ctf_create>
    2654:	add	x0, x0, #0x0
    2658:	mov	x1, x24
    265c:	mov	w2, w25
    2660:	mov	x3, x21
    2664:	mov	w4, w23
    2668:	bl	0 <ctf_dprintf>
    266c:	mov	w1, #0x411                 	// #1041
    2670:	b	25a8 <ctf_add_type_internal+0x1bc>
    2674:	cmn	x21, #0x1
    2678:	b.eq	26b8 <ctf_add_type_internal+0x2cc>  // b.none
    267c:	sub	x0, x29, #0x28
    2680:	mov	x1, x21
    2684:	stur	x19, [x29, #-40]
    2688:	bl	0 <ctf_lookup_by_id>
    268c:	cbz	x0, 26a8 <ctf_add_type_internal+0x2bc>
    2690:	mov	x26, x0
    2694:	add	x2, sp, #0x40
    2698:	mov	x0, x19
    269c:	mov	x1, x21
    26a0:	bl	0 <ctf_type_encoding>
    26a4:	cbz	w0, 2748 <ctf_add_type_internal+0x35c>
    26a8:	mov	w8, wzr
    26ac:	mov	x26, #0xffffffffffffffff    	// #-1
    26b0:	cbz	w8, 25b4 <ctf_add_type_internal+0x1c8>
    26b4:	b	26b8 <ctf_add_type_internal+0x2cc>
    26b8:	ldur	x8, [x29, #-8]
    26bc:	stp	x20, xzr, [x29, #-32]
    26c0:	stp	x19, x21, [x29, #-64]
    26c4:	mov	w2, #0x1                   	// #1
    26c8:	stp	xzr, x8, [x29, #-48]
    26cc:	ldr	x0, [x22, #696]
    26d0:	mov	x1, x20
    26d4:	bl	0 <ctf_dynhash_insert>
    26d8:	tbnz	w0, #31, 2740 <ctf_add_type_internal+0x354>
    26dc:	sub	w8, w25, #0x1
    26e0:	cmp	w8, #0xd
    26e4:	b.hi	2828 <ctf_add_type_internal+0x43c>  // b.pmore
    26e8:	adrp	x9, 0 <ctf_create>
    26ec:	add	x9, x9, #0x0
    26f0:	adr	x10, 2700 <ctf_add_type_internal+0x314>
    26f4:	ldrb	w11, [x9, x8]
    26f8:	add	x10, x10, x11, lsl #2
    26fc:	br	x10
    2700:	ldur	x0, [x29, #-8]
    2704:	mov	x1, x20
    2708:	bl	0 <ctf_type_reference>
    270c:	ldur	x1, [x29, #-8]
    2710:	mov	x2, x0
    2714:	mov	x0, x19
    2718:	mov	x3, x22
    271c:	bl	23ec <ctf_add_type_internal>
    2720:	cmn	x0, #0x1
    2724:	b.eq	2bb8 <ctf_add_type_internal+0x7cc>  // b.none
    2728:	ldr	w1, [sp, #12]
    272c:	mov	x2, x0
    2730:	mov	x0, x19
    2734:	mov	w3, w25
    2738:	bl	13a8 <ctf_add_reftype>
    273c:	b	29c8 <ctf_add_type_internal+0x5dc>
    2740:	mov	w1, #0xc                   	// #12
    2744:	b	25a8 <ctf_add_type_internal+0x1bc>
    2748:	ldur	x8, [x29, #-40]
    274c:	ldr	w0, [x26, #4]
    2750:	ldr	x8, [x8]
    2754:	ldr	x8, [x8, #8]
    2758:	blr	x8
    275c:	ldr	x8, [sp, #80]
    2760:	ldr	x9, [sp, #64]
    2764:	ldr	w10, [sp, #88]
    2768:	ldr	w11, [sp, #72]
    276c:	eor	x8, x8, x9
    2770:	eor	w9, w10, w11
    2774:	orr	x8, x8, x9
    2778:	cmp	x8, #0x0
    277c:	cset	w9, ne  // ne = any
    2780:	tbnz	w0, #0, 280c <ctf_add_type_internal+0x420>
    2784:	cmp	w25, #0xe
    2788:	mov	w8, #0x1                   	// #1
    278c:	b.eq	26b0 <ctf_add_type_internal+0x2c4>  // b.none
    2790:	cbz	w9, 2b38 <ctf_add_type_internal+0x74c>
    2794:	b	26b0 <ctf_add_type_internal+0x2c4>
    2798:	cmp	w23, #0x9
    279c:	b.eq	29f0 <ctf_add_type_internal+0x604>  // b.none
    27a0:	cmp	w25, #0x9
    27a4:	b.eq	29f0 <ctf_add_type_internal+0x604>  // b.none
    27a8:	cmn	x21, #0x1
    27ac:	b.eq	29f0 <ctf_add_type_internal+0x604>  // b.none
    27b0:	ldur	x0, [x29, #-8]
    27b4:	mov	x1, x20
    27b8:	bl	0 <ctf_type_size>
    27bc:	mov	x22, x0
    27c0:	mov	x0, x19
    27c4:	mov	x1, x21
    27c8:	bl	0 <ctf_type_size>
    27cc:	ldur	x8, [x29, #-8]
    27d0:	cmp	x22, x0
    27d4:	b.ne	2a94 <ctf_add_type_internal+0x6a8>  // b.any
    27d8:	adrp	x2, 0 <ctf_create>
    27dc:	add	x2, x2, #0x0
    27e0:	sub	x3, x29, #0x40
    27e4:	mov	x0, x8
    27e8:	mov	x1, x20
    27ec:	bl	0 <ctf_member_iter>
    27f0:	cbz	w0, 2c60 <ctf_add_type_internal+0x874>
    27f4:	adrp	x0, 0 <ctf_create>
    27f8:	add	x0, x0, #0x0
    27fc:	mov	x1, x24
    2800:	mov	x2, x21
    2804:	bl	0 <ctf_dprintf>
    2808:	b	2acc <ctf_add_type_internal+0x6e0>
    280c:	cbz	w9, 2b28 <ctf_add_type_internal+0x73c>
    2810:	mov	w1, #0x411                 	// #1041
    2814:	mov	x0, x19
    2818:	bl	0 <ctf_set_errno>
    281c:	mov	x26, x0
    2820:	mov	w8, wzr
    2824:	b	26b0 <ctf_add_type_internal+0x2c4>
    2828:	mov	w1, #0x3ef                 	// #1007
    282c:	b	25a8 <ctf_add_type_internal+0x1bc>
    2830:	ldr	w1, [sp, #12]
    2834:	add	x3, sp, #0x50
    2838:	mov	x0, x19
    283c:	mov	x2, x24
    2840:	bl	12b8 <ctf_add_integer>
    2844:	b	29c8 <ctf_add_type_internal+0x5dc>
    2848:	ldr	w1, [sp, #12]
    284c:	add	x3, sp, #0x50
    2850:	mov	x0, x19
    2854:	mov	x2, x24
    2858:	bl	1378 <ctf_add_float>
    285c:	b	29c8 <ctf_add_type_internal+0x5dc>
    2860:	ldur	x0, [x29, #-8]
    2864:	add	x2, sp, #0x28
    2868:	mov	x1, x20
    286c:	bl	0 <ctf_array_info>
    2870:	ldur	x1, [x29, #-8]
    2874:	cbz	w0, 2b58 <ctf_add_type_internal+0x76c>
    2878:	mov	x0, x1
    287c:	b	25a0 <ctf_add_type_internal+0x1b4>
    2880:	ldur	x1, [x29, #-8]
    2884:	ldr	w2, [x28, #8]
    2888:	mov	x0, x19
    288c:	mov	x3, x22
    2890:	bl	23ec <ctf_add_type_internal>
    2894:	cmn	x0, #0x1
    2898:	stp	x0, xzr, [sp, #40]
    289c:	b.eq	2bb8 <ctf_add_type_internal+0x7cc>  // b.none
    28a0:	ldr	w1, [sp, #12]
    28a4:	add	x2, sp, #0x28
    28a8:	mov	x0, x19
    28ac:	mov	x3, xzr
    28b0:	bl	1648 <ctf_add_function>
    28b4:	b	29c8 <ctf_add_type_internal+0x5dc>
    28b8:	cmp	w23, #0x9
    28bc:	b.eq	2ae8 <ctf_add_type_internal+0x6fc>  // b.none
    28c0:	cmp	w25, #0x9
    28c4:	b.eq	2ae8 <ctf_add_type_internal+0x6fc>  // b.none
    28c8:	cmn	x21, #0x1
    28cc:	b.eq	2ae8 <ctf_add_type_internal+0x6fc>  // b.none
    28d0:	ldur	x0, [x29, #-8]
    28d4:	adrp	x2, 0 <ctf_create>
    28d8:	add	x2, x2, #0x0
    28dc:	sub	x3, x29, #0x40
    28e0:	mov	x1, x20
    28e4:	bl	0 <ctf_enum_iter>
    28e8:	cbnz	w0, 2908 <ctf_add_type_internal+0x51c>
    28ec:	adrp	x2, 0 <ctf_create>
    28f0:	add	x2, x2, #0x0
    28f4:	sub	x3, x29, #0x28
    28f8:	mov	x0, x19
    28fc:	mov	x1, x21
    2900:	bl	0 <ctf_enum_iter>
    2904:	cbz	w0, 29cc <ctf_add_type_internal+0x5e0>
    2908:	adrp	x0, 0 <ctf_create>
    290c:	add	x0, x0, #0x0
    2910:	mov	x1, x24
    2914:	mov	x2, x21
    2918:	bl	0 <ctf_dprintf>
    291c:	mov	w1, #0x411                 	// #1041
    2920:	b	25a8 <ctf_add_type_internal+0x1bc>
    2924:	cmn	x21, #0x1
    2928:	b.ne	29cc <ctf_add_type_internal+0x5e0>  // b.any
    292c:	ldr	w1, [sp, #12]
    2930:	mov	x0, x19
    2934:	mov	x2, x24
    2938:	mov	w3, w27
    293c:	bl	1b5c <ctf_add_forward>
    2940:	b	29c8 <ctf_add_type_internal+0x5dc>
    2944:	ldur	x0, [x29, #-8]
    2948:	mov	x1, x20
    294c:	bl	0 <ctf_type_reference>
    2950:	ldur	x1, [x29, #-8]
    2954:	mov	x2, x0
    2958:	mov	x0, x19
    295c:	mov	x3, x22
    2960:	bl	23ec <ctf_add_type_internal>
    2964:	cmn	x0, #0x1
    2968:	b.eq	2bb8 <ctf_add_type_internal+0x7cc>  // b.none
    296c:	cmn	x21, #0x1
    2970:	b.ne	29cc <ctf_add_type_internal+0x5e0>  // b.any
    2974:	ldr	w1, [sp, #12]
    2978:	mov	x3, x0
    297c:	mov	x0, x19
    2980:	mov	x2, x24
    2984:	bl	1bfc <ctf_add_typedef>
    2988:	b	29c8 <ctf_add_type_internal+0x5dc>
    298c:	ldur	x0, [x29, #-8]
    2990:	mov	x1, x20
    2994:	bl	0 <ctf_type_reference>
    2998:	ldur	x1, [x29, #-8]
    299c:	mov	x2, x0
    29a0:	mov	x0, x19
    29a4:	mov	x3, x22
    29a8:	bl	23ec <ctf_add_type_internal>
    29ac:	cmn	x0, #0x1
    29b0:	b.eq	2bb8 <ctf_add_type_internal+0x7cc>  // b.none
    29b4:	ldr	w1, [sp, #12]
    29b8:	mov	x2, x0
    29bc:	add	x3, sp, #0x50
    29c0:	mov	x0, x19
    29c4:	bl	1000 <ctf_add_slice>
    29c8:	mov	x21, x0
    29cc:	cmn	x21, #0x1
    29d0:	b.eq	29e8 <ctf_add_type_internal+0x5fc>  // b.none
    29d4:	ldur	x0, [x29, #-8]
    29d8:	mov	x1, x20
    29dc:	mov	x2, x19
    29e0:	mov	x3, x21
    29e4:	bl	0 <ctf_add_type_mapping>
    29e8:	mov	x26, x21
    29ec:	b	25b4 <ctf_add_type_internal+0x1c8>
    29f0:	ldr	w1, [sp, #12]
    29f4:	add	x4, sp, #0x28
    29f8:	mov	x0, x19
    29fc:	mov	x2, x24
    2a00:	mov	w3, w25
    2a04:	bl	1138 <ctf_add_generic>
    2a08:	mov	x21, x0
    2a0c:	cmn	x0, #0x1
    2a10:	b.eq	2a84 <ctf_add_type_internal+0x698>  // b.none
    2a14:	ldr	x8, [sp, #40]
    2a18:	ldur	x0, [x29, #-8]
    2a1c:	mov	x1, x20
    2a20:	mov	x2, x19
    2a24:	mov	x3, x21
    2a28:	stp	x21, x8, [x29, #-56]
    2a2c:	bl	0 <ctf_add_type_mapping>
    2a30:	ldur	x0, [x29, #-8]
    2a34:	adrp	x2, 0 <ctf_create>
    2a38:	add	x2, x2, #0x0
    2a3c:	sub	x3, x29, #0x40
    2a40:	mov	x1, x20
    2a44:	bl	0 <ctf_member_iter>
    2a48:	ldur	x8, [x29, #-8]
    2a4c:	cmp	w0, #0x0
    2a50:	mov	x1, x20
    2a54:	cset	w23, ne  // ne = any
    2a58:	mov	x0, x8
    2a5c:	bl	0 <ctf_type_size>
    2a60:	tbnz	x0, #63, 2a84 <ctf_add_type_internal+0x698>
    2a64:	mov	w8, #0xffffffff            	// #-1
    2a68:	cmp	x0, x8
    2a6c:	b.cc	2bc0 <ctf_add_type_internal+0x7d4>  // b.lo, b.ul, b.last
    2a70:	ldr	x9, [sp, #40]
    2a74:	lsr	x10, x0, #32
    2a78:	stp	w8, w10, [x9, #32]
    2a7c:	str	w0, [x9, #40]
    2a80:	b	2bc8 <ctf_add_type_internal+0x7dc>
    2a84:	mov	x26, #0xffffffffffffffff    	// #-1
    2a88:	mov	w8, wzr
    2a8c:	tbz	wzr, #0, 25b4 <ctf_add_type_internal+0x1c8>
    2a90:	b	29cc <ctf_add_type_internal+0x5e0>
    2a94:	mov	x0, x8
    2a98:	mov	x1, x20
    2a9c:	bl	0 <ctf_type_size>
    2aa0:	mov	x22, x0
    2aa4:	mov	x0, x19
    2aa8:	mov	x1, x21
    2aac:	bl	0 <ctf_type_size>
    2ab0:	mov	x4, x0
    2ab4:	adrp	x0, 0 <ctf_create>
    2ab8:	add	x0, x0, #0x0
    2abc:	mov	x1, x24
    2ac0:	mov	x2, x21
    2ac4:	mov	x3, x22
    2ac8:	bl	0 <ctf_dprintf>
    2acc:	mov	w1, #0x411                 	// #1041
    2ad0:	mov	x0, x19
    2ad4:	bl	0 <ctf_set_errno>
    2ad8:	mov	x26, x0
    2adc:	mov	w8, wzr
    2ae0:	tbz	wzr, #0, 25b4 <ctf_add_type_internal+0x1c8>
    2ae4:	b	29cc <ctf_add_type_internal+0x5e0>
    2ae8:	ldr	w1, [sp, #12]
    2aec:	mov	x0, x19
    2af0:	mov	x2, x24
    2af4:	bl	19c8 <ctf_add_enum>
    2af8:	cmn	x0, #0x1
    2afc:	stur	x0, [x29, #-56]
    2b00:	b.eq	2bb8 <ctf_add_type_internal+0x7cc>  // b.none
    2b04:	mov	x21, x0
    2b08:	ldur	x0, [x29, #-8]
    2b0c:	adrp	x2, 0 <ctf_create>
    2b10:	add	x2, x2, #0x0
    2b14:	sub	x3, x29, #0x40
    2b18:	mov	x1, x20
    2b1c:	bl	0 <ctf_enum_iter>
    2b20:	cbnz	w0, 2bb8 <ctf_add_type_internal+0x7cc>
    2b24:	b	29cc <ctf_add_type_internal+0x5e0>
    2b28:	cmp	w25, #0xe
    2b2c:	b.ne	2b38 <ctf_add_type_internal+0x74c>  // b.any
    2b30:	mov	w8, #0x1                   	// #1
    2b34:	b	26b0 <ctf_add_type_internal+0x2c4>
    2b38:	ldur	x0, [x29, #-8]
    2b3c:	mov	x1, x20
    2b40:	mov	x2, x19
    2b44:	mov	x3, x21
    2b48:	bl	0 <ctf_add_type_mapping>
    2b4c:	mov	w8, wzr
    2b50:	mov	x26, x21
    2b54:	b	26b0 <ctf_add_type_internal+0x2c4>
    2b58:	ldr	x2, [sp, #40]
    2b5c:	mov	x0, x19
    2b60:	mov	x3, x22
    2b64:	bl	23ec <ctf_add_type_internal>
    2b68:	ldur	x1, [x29, #-8]
    2b6c:	ldr	x2, [sp, #48]
    2b70:	str	x0, [sp, #40]
    2b74:	mov	x0, x19
    2b78:	mov	x3, x22
    2b7c:	bl	23ec <ctf_add_type_internal>
    2b80:	cmn	x0, #0x1
    2b84:	mov	x26, #0xffffffffffffffff    	// #-1
    2b88:	str	x0, [sp, #48]
    2b8c:	b.eq	25b4 <ctf_add_type_internal+0x1c8>  // b.none
    2b90:	ldr	x8, [sp, #40]
    2b94:	cmn	x8, #0x1
    2b98:	b.eq	25b4 <ctf_add_type_internal+0x1c8>  // b.none
    2b9c:	cmn	x21, #0x1
    2ba0:	b.eq	2c6c <ctf_add_type_internal+0x880>  // b.none
    2ba4:	add	x2, sp, #0x10
    2ba8:	mov	x0, x19
    2bac:	mov	x1, x21
    2bb0:	bl	0 <ctf_array_info>
    2bb4:	cbz	w0, 2c80 <ctf_add_type_internal+0x894>
    2bb8:	mov	x26, #0xffffffffffffffff    	// #-1
    2bbc:	b	25b4 <ctf_add_type_internal+0x1c8>
    2bc0:	ldr	x8, [sp, #40]
    2bc4:	str	w0, [x8, #32]
    2bc8:	ldr	w10, [sp, #12]
    2bcc:	ldr	x8, [sp, #40]
    2bd0:	lsl	w9, w25, #26
    2bd4:	cmp	w10, #0x0
    2bd8:	cset	w10, ne  // ne = any
    2bdc:	bfi	w9, w10, #25, #1
    2be0:	ldr	w10, [sp, #8]
    2be4:	ldr	x24, [x8, #56]
    2be8:	bfxil	w9, w10, #0, #24
    2bec:	str	w9, [x8, #28]
    2bf0:	cbnz	x24, 2c14 <ctf_add_type_internal+0x828>
    2bf4:	cmp	w23, #0x0
    2bf8:	cset	w8, eq  // eq = none
    2bfc:	csinv	x26, x26, xzr, eq  // eq = none
    2c00:	tbz	w8, #0, 25b4 <ctf_add_type_internal+0x1c8>
    2c04:	b	29cc <ctf_add_type_internal+0x5e0>
    2c08:	str	x0, [x24, #24]
    2c0c:	ldr	x24, [x24, #8]
    2c10:	cbz	x24, 2bf4 <ctf_add_type_internal+0x808>
    2c14:	str	x19, [sp, #16]
    2c18:	ldur	x0, [x29, #-8]
    2c1c:	ldr	x1, [x24, #24]
    2c20:	add	x2, sp, #0x10
    2c24:	bl	0 <ctf_type_mapping>
    2c28:	cbnz	x0, 2c08 <ctf_add_type_internal+0x81c>
    2c2c:	ldur	x1, [x29, #-8]
    2c30:	ldr	x2, [x24, #24]
    2c34:	mov	x0, x19
    2c38:	mov	x3, x22
    2c3c:	bl	23ec <ctf_add_type_internal>
    2c40:	cmn	x0, #0x1
    2c44:	str	x0, [x24, #24]
    2c48:	b.ne	2c0c <ctf_add_type_internal+0x820>  // b.any
    2c4c:	mov	x0, x19
    2c50:	bl	0 <ctf_errno>
    2c54:	cmp	w0, #0x41b
    2c58:	cinc	w23, w23, ne  // ne = any
    2c5c:	b	2c0c <ctf_add_type_internal+0x820>
    2c60:	mov	w8, #0x1                   	// #1
    2c64:	tbz	w8, #0, 25b4 <ctf_add_type_internal+0x1c8>
    2c68:	b	29cc <ctf_add_type_internal+0x5e0>
    2c6c:	ldr	w1, [sp, #12]
    2c70:	add	x2, sp, #0x28
    2c74:	mov	x0, x19
    2c78:	bl	14fc <ctf_add_array>
    2c7c:	b	29c8 <ctf_add_type_internal+0x5dc>
    2c80:	ldp	x8, x9, [sp, #40]
    2c84:	ldp	x10, x11, [sp, #16]
    2c88:	ldr	x12, [sp, #56]
    2c8c:	ldr	x13, [sp, #32]
    2c90:	eor	x8, x8, x10
    2c94:	eor	x9, x9, x11
    2c98:	eor	x10, x12, x13
    2c9c:	orr	x8, x8, x9
    2ca0:	orr	x8, x8, x10
    2ca4:	cbz	x8, 29cc <ctf_add_type_internal+0x5e0>
    2ca8:	ldp	x3, x4, [sp, #40]
    2cac:	ldr	w5, [sp, #56]
    2cb0:	ldp	x6, x7, [sp, #16]
    2cb4:	ldr	w8, [sp, #32]
    2cb8:	adrp	x0, 0 <ctf_create>
    2cbc:	add	x0, x0, #0x0
    2cc0:	mov	x1, x24
    2cc4:	mov	x2, x21
    2cc8:	str	w8, [sp]
    2ccc:	bl	0 <ctf_dprintf>
    2cd0:	mov	w1, #0x411                 	// #1041
    2cd4:	b	25a8 <ctf_add_type_internal+0x1bc>

0000000000002cd8 <ctf_gzwrite>:
    2cd8:	stp	x29, x30, [sp, #-48]!
    2cdc:	stp	x22, x21, [sp, #16]
    2ce0:	stp	x20, x19, [sp, #32]
    2ce4:	ldr	x21, [x0, #8]
    2ce8:	mov	x20, x1
    2cec:	mov	x19, x0
    2cf0:	mov	w22, #0x34                  	// #52
    2cf4:	mov	x29, sp
    2cf8:	mov	x0, x20
    2cfc:	mov	x1, x21
    2d00:	mov	w2, w22
    2d04:	bl	0 <gzwrite>
    2d08:	cmp	w0, #0x0
    2d0c:	b.le	2d5c <ctf_gzwrite+0x84>
    2d10:	sxtw	x8, w0
    2d14:	subs	x22, x22, x8
    2d18:	add	x21, x21, x8
    2d1c:	b.ne	2cf8 <ctf_gzwrite+0x20>  // b.any
    2d20:	ldr	x21, [x19, #416]
    2d24:	cbz	x21, 2d54 <ctf_gzwrite+0x7c>
    2d28:	ldr	x22, [x19, #408]
    2d2c:	mov	x0, x20
    2d30:	mov	x1, x22
    2d34:	mov	w2, w21
    2d38:	bl	0 <gzwrite>
    2d3c:	cmp	w0, #0x0
    2d40:	b.le	2d5c <ctf_gzwrite+0x84>
    2d44:	sxtw	x8, w0
    2d48:	subs	x21, x21, x8
    2d4c:	add	x22, x22, x8
    2d50:	b.ne	2d2c <ctf_gzwrite+0x54>  // b.any
    2d54:	mov	w0, wzr
    2d58:	b	2d6c <ctf_gzwrite+0x94>
    2d5c:	bl	0 <__errno_location>
    2d60:	ldr	w1, [x0]
    2d64:	mov	x0, x19
    2d68:	bl	0 <ctf_set_errno>
    2d6c:	ldp	x20, x19, [sp, #32]
    2d70:	ldp	x22, x21, [sp, #16]
    2d74:	ldp	x29, x30, [sp], #48
    2d78:	ret

0000000000002d7c <ctf_compress_write>:
    2d7c:	sub	sp, sp, #0x90
    2d80:	stp	x29, x30, [sp, #80]
    2d84:	stp	x24, x23, [sp, #96]
    2d88:	stp	x22, x21, [sp, #112]
    2d8c:	stp	x20, x19, [sp, #128]
    2d90:	add	x29, sp, #0x50
    2d94:	mov	w21, w1
    2d98:	mov	x19, x0
    2d9c:	bl	304 <ctf_serialize>
    2da0:	tbnz	w0, #31, 2e10 <ctf_compress_write+0x94>
    2da4:	ldr	x8, [x19, #8]
    2da8:	ldp	q0, q1, [x8]
    2dac:	ldr	q2, [x8, #32]
    2db0:	ldr	w8, [x8, #48]
    2db4:	stp	q0, q1, [sp, #16]
    2db8:	ldrb	w9, [sp, #19]
    2dbc:	str	w8, [sp, #64]
    2dc0:	str	q2, [sp, #48]
    2dc4:	orr	w8, w9, #0x1
    2dc8:	strb	w8, [sp, #19]
    2dcc:	ldr	x0, [x19, #416]
    2dd0:	bl	0 <compressBound>
    2dd4:	str	x0, [sp, #8]
    2dd8:	bl	0 <malloc>
    2ddc:	cbz	x0, 2e18 <ctf_compress_write+0x9c>
    2de0:	ldp	x2, x3, [x19, #408]
    2de4:	add	x1, sp, #0x8
    2de8:	mov	x20, x0
    2dec:	bl	0 <compress>
    2df0:	cbz	w0, 2e2c <ctf_compress_write+0xb0>
    2df4:	bl	0 <zError>
    2df8:	mov	x1, x0
    2dfc:	adrp	x0, 0 <ctf_create>
    2e00:	add	x0, x0, #0x0
    2e04:	bl	0 <ctf_dprintf>
    2e08:	mov	w1, #0x413                 	// #1043
    2e0c:	b	2ea4 <ctf_compress_write+0x128>
    2e10:	mov	w19, #0xffffffff            	// #-1
    2e14:	b	2eb8 <ctf_compress_write+0x13c>
    2e18:	mov	w1, #0x3f6                 	// #1014
    2e1c:	mov	x0, x19
    2e20:	bl	0 <ctf_set_errno>
    2e24:	mov	x19, x0
    2e28:	b	2eb8 <ctf_compress_write+0x13c>
    2e2c:	add	x22, sp, #0x10
    2e30:	mov	w24, #0x34                  	// #52
    2e34:	mov	w23, #0x34                  	// #52
    2e38:	mov	w0, w21
    2e3c:	mov	x1, x22
    2e40:	mov	x2, x23
    2e44:	bl	0 <write>
    2e48:	tbnz	x0, #63, 2e9c <ctf_compress_write+0x120>
    2e4c:	sub	x23, x23, x0
    2e50:	cmp	x23, #0x0
    2e54:	madd	x22, x0, x24, x22
    2e58:	b.gt	2e38 <ctf_compress_write+0xbc>
    2e5c:	ldr	x2, [sp, #8]
    2e60:	cmp	x2, #0x1
    2e64:	b.lt	2e94 <ctf_compress_write+0x118>  // b.tstop
    2e68:	mov	x22, x20
    2e6c:	mov	w0, w21
    2e70:	mov	x1, x22
    2e74:	bl	0 <write>
    2e78:	tbnz	x0, #63, 2e9c <ctf_compress_write+0x120>
    2e7c:	ldr	x8, [sp, #8]
    2e80:	add	x22, x22, x0
    2e84:	sub	x2, x8, x0
    2e88:	cmp	x2, #0x0
    2e8c:	str	x2, [sp, #8]
    2e90:	b.gt	2e6c <ctf_compress_write+0xf0>
    2e94:	mov	w19, wzr
    2e98:	b	2eb0 <ctf_compress_write+0x134>
    2e9c:	bl	0 <__errno_location>
    2ea0:	ldr	w1, [x0]
    2ea4:	mov	x0, x19
    2ea8:	bl	0 <ctf_set_errno>
    2eac:	mov	x19, x0
    2eb0:	mov	x0, x20
    2eb4:	bl	0 <free>
    2eb8:	mov	w0, w19
    2ebc:	ldp	x20, x19, [sp, #128]
    2ec0:	ldp	x22, x21, [sp, #112]
    2ec4:	ldp	x24, x23, [sp, #96]
    2ec8:	ldp	x29, x30, [sp, #80]
    2ecc:	add	sp, sp, #0x90
    2ed0:	ret

0000000000002ed4 <ctf_write_mem>:
    2ed4:	stp	x29, x30, [sp, #-64]!
    2ed8:	str	x23, [sp, #16]
    2edc:	stp	x22, x21, [sp, #32]
    2ee0:	stp	x20, x19, [sp, #48]
    2ee4:	mov	x29, sp
    2ee8:	mov	x22, x2
    2eec:	mov	x21, x1
    2ef0:	mov	x20, x0
    2ef4:	bl	304 <ctf_serialize>
    2ef8:	tbnz	w0, #31, 2f7c <ctf_write_mem+0xa8>
    2efc:	ldr	x0, [x20, #416]
    2f00:	bl	0 <compressBound>
    2f04:	str	x0, [x29, #24]
    2f08:	ldr	x8, [x20, #416]
    2f0c:	cmp	x8, x22
    2f10:	csel	x8, x8, x0, cc  // cc = lo, ul, last
    2f14:	add	x0, x8, #0x34
    2f18:	str	x8, [x29, #24]
    2f1c:	bl	0 <malloc>
    2f20:	mov	x19, x0
    2f24:	cbz	x0, 2f84 <ctf_write_mem+0xb0>
    2f28:	ldr	x8, [x20, #8]
    2f2c:	add	x0, x19, #0x34
    2f30:	ldp	q2, q0, [x8, #16]
    2f34:	ldr	w9, [x8, #48]
    2f38:	ldr	q1, [x8]
    2f3c:	mov	w8, #0x34                  	// #52
    2f40:	stp	q2, q0, [x19, #16]
    2f44:	str	w9, [x19, #48]
    2f48:	str	q1, [x19]
    2f4c:	str	x8, [x21]
    2f50:	ldr	x23, [x20, #416]
    2f54:	ldrb	w8, [x19, #3]
    2f58:	cmp	x23, x22
    2f5c:	b.cs	2f94 <ctf_write_mem+0xc0>  // b.hs, b.nlast
    2f60:	and	w8, w8, #0xfe
    2f64:	strb	w8, [x19, #3]
    2f68:	ldr	x1, [x20, #408]
    2f6c:	mov	x2, x23
    2f70:	bl	0 <memcpy>
    2f74:	add	x8, x23, #0x34
    2f78:	b	2fec <ctf_write_mem+0x118>
    2f7c:	mov	x19, xzr
    2f80:	b	2ff0 <ctf_write_mem+0x11c>
    2f84:	mov	w1, #0xc                   	// #12
    2f88:	mov	x0, x20
    2f8c:	bl	0 <ctf_set_errno>
    2f90:	b	2ff0 <ctf_write_mem+0x11c>
    2f94:	orr	w8, w8, #0x1
    2f98:	strb	w8, [x19, #3]
    2f9c:	ldr	x2, [x20, #408]
    2fa0:	add	x1, x29, #0x18
    2fa4:	mov	x3, x23
    2fa8:	bl	0 <compress>
    2fac:	cbz	w0, 2fe0 <ctf_write_mem+0x10c>
    2fb0:	bl	0 <zError>
    2fb4:	mov	x1, x0
    2fb8:	adrp	x0, 0 <ctf_create>
    2fbc:	add	x0, x0, #0x0
    2fc0:	bl	0 <ctf_dprintf>
    2fc4:	mov	w1, #0x413                 	// #1043
    2fc8:	mov	x0, x20
    2fcc:	bl	0 <ctf_set_errno>
    2fd0:	mov	x0, x19
    2fd4:	bl	0 <free>
    2fd8:	mov	x19, xzr
    2fdc:	b	2ff0 <ctf_write_mem+0x11c>
    2fe0:	ldr	x8, [x29, #24]
    2fe4:	ldr	x9, [x21]
    2fe8:	add	x8, x9, x8
    2fec:	str	x8, [x21]
    2ff0:	mov	x0, x19
    2ff4:	ldp	x20, x19, [sp, #48]
    2ff8:	ldp	x22, x21, [sp, #32]
    2ffc:	ldr	x23, [sp, #16]
    3000:	ldp	x29, x30, [sp], #64
    3004:	ret

0000000000003008 <ctf_write>:
    3008:	stp	x29, x30, [sp, #-48]!
    300c:	stp	x22, x21, [sp, #16]
    3010:	stp	x20, x19, [sp, #32]
    3014:	mov	x29, sp
    3018:	mov	w20, w1
    301c:	mov	x19, x0
    3020:	bl	304 <ctf_serialize>
    3024:	tbnz	w0, #31, 30a0 <ctf_write+0x98>
    3028:	ldr	x21, [x19, #8]
    302c:	mov	w22, #0x34                  	// #52
    3030:	mov	w0, w20
    3034:	mov	x1, x21
    3038:	mov	x2, x22
    303c:	bl	0 <write>
    3040:	cmp	x0, #0x0
    3044:	b.le	308c <ctf_write+0x84>
    3048:	subs	x22, x22, x0
    304c:	add	x21, x21, x0
    3050:	b.ne	3030 <ctf_write+0x28>  // b.any
    3054:	ldr	x21, [x19, #416]
    3058:	cbz	x21, 3084 <ctf_write+0x7c>
    305c:	ldr	x22, [x19, #408]
    3060:	mov	w0, w20
    3064:	mov	x1, x22
    3068:	mov	x2, x21
    306c:	bl	0 <write>
    3070:	cmp	x0, #0x0
    3074:	b.le	308c <ctf_write+0x84>
    3078:	subs	x21, x21, x0
    307c:	add	x22, x22, x0
    3080:	b.ne	3060 <ctf_write+0x58>  // b.any
    3084:	mov	w0, wzr
    3088:	b	30a4 <ctf_write+0x9c>
    308c:	bl	0 <__errno_location>
    3090:	ldr	w1, [x0]
    3094:	mov	x0, x19
    3098:	bl	0 <ctf_set_errno>
    309c:	b	30a4 <ctf_write+0x9c>
    30a0:	mov	w0, #0xffffffff            	// #-1
    30a4:	ldp	x20, x19, [sp, #32]
    30a8:	ldp	x22, x21, [sp, #16]
    30ac:	ldp	x29, x30, [sp], #48
    30b0:	ret

00000000000030b4 <membcmp>:
    30b4:	sub	sp, sp, #0x40
    30b8:	stp	x29, x30, [sp, #16]
    30bc:	str	x21, [sp, #32]
    30c0:	stp	x20, x19, [sp, #48]
    30c4:	ldp	x8, x1, [x3]
    30c8:	mov	x19, x0
    30cc:	mov	x21, x3
    30d0:	mov	x20, x2
    30d4:	mov	x3, sp
    30d8:	mov	x0, x8
    30dc:	mov	x2, x19
    30e0:	add	x29, sp, #0x10
    30e4:	bl	0 <ctf_member_info>
    30e8:	tbnz	w0, #31, 3100 <membcmp+0x4c>
    30ec:	ldr	x2, [sp, #8]
    30f0:	cmp	x2, x20
    30f4:	b.ne	3124 <membcmp+0x70>  // b.any
    30f8:	mov	w0, wzr
    30fc:	b	313c <membcmp+0x88>
    3100:	ldr	x0, [x21]
    3104:	bl	0 <ctf_errno>
    3108:	bl	0 <ctf_errmsg>
    310c:	mov	x2, x0
    3110:	adrp	x0, 0 <ctf_create>
    3114:	add	x0, x0, #0x0
    3118:	mov	x1, x19
    311c:	bl	0 <ctf_dprintf>
    3120:	b	3138 <membcmp+0x84>
    3124:	adrp	x0, 0 <ctf_create>
    3128:	add	x0, x0, #0x0
    312c:	mov	x1, x19
    3130:	mov	x3, x20
    3134:	bl	0 <ctf_dprintf>
    3138:	mov	w0, #0x1                   	// #1
    313c:	ldp	x20, x19, [sp, #48]
    3140:	ldr	x21, [sp, #32]
    3144:	ldp	x29, x30, [sp, #16]
    3148:	add	sp, sp, #0x40
    314c:	ret

0000000000003150 <membadd>:
    3150:	stp	x29, x30, [sp, #-64]!
    3154:	str	x23, [sp, #16]
    3158:	mov	x23, x0
    315c:	mov	w0, #0x30                  	// #48
    3160:	stp	x22, x21, [sp, #32]
    3164:	stp	x20, x19, [sp, #48]
    3168:	mov	x29, sp
    316c:	mov	x19, x3
    3170:	mov	x21, x2
    3174:	mov	x22, x1
    3178:	bl	0 <malloc>
    317c:	cbz	x0, 319c <membadd+0x4c>
    3180:	mov	x20, x0
    3184:	cbz	x23, 31ac <membadd+0x5c>
    3188:	mov	x0, x23
    318c:	bl	0 <strdup>
    3190:	cbnz	x0, 31b0 <membadd+0x60>
    3194:	mov	x0, x20
    3198:	bl	0 <free>
    319c:	ldr	x0, [x19]
    31a0:	mov	w1, #0xb                   	// #11
    31a4:	bl	0 <ctf_set_errno>
    31a8:	b	31e4 <membadd+0x94>
    31ac:	mov	x0, xzr
    31b0:	mov	w8, #0xffffffff            	// #-1
    31b4:	stp	x0, x22, [x20, #16]
    31b8:	str	x21, [x20, #32]
    31bc:	str	w8, [x20, #40]
    31c0:	ldr	x8, [x19, #16]
    31c4:	mov	x1, x20
    31c8:	add	x0, x8, #0x30
    31cc:	bl	0 <ctf_list_append>
    31d0:	ldr	x8, [x19]
    31d4:	mov	w0, wzr
    31d8:	ldr	w9, [x8, #552]
    31dc:	orr	w9, w9, #0x4
    31e0:	str	w9, [x8, #552]
    31e4:	ldp	x20, x19, [sp, #48]
    31e8:	ldp	x22, x21, [sp, #32]
    31ec:	ldr	x23, [sp, #16]
    31f0:	ldp	x29, x30, [sp], #64
    31f4:	ret

00000000000031f8 <enumcmp>:
    31f8:	stp	x29, x30, [sp, #-48]!
    31fc:	str	x21, [sp, #16]
    3200:	stp	x20, x19, [sp, #32]
    3204:	mov	w20, w1
    3208:	ldp	x8, x1, [x2]
    320c:	mov	x29, sp
    3210:	mov	x19, x0
    3214:	mov	x21, x2
    3218:	add	x3, x29, #0x1c
    321c:	mov	x0, x8
    3220:	mov	x2, x19
    3224:	bl	0 <ctf_enum_value>
    3228:	tbnz	w0, #31, 3240 <enumcmp+0x48>
    322c:	ldr	w2, [x29, #28]
    3230:	cmp	w2, w20
    3234:	b.ne	3264 <enumcmp+0x6c>  // b.any
    3238:	mov	w0, wzr
    323c:	b	3278 <enumcmp+0x80>
    3240:	ldr	x0, [x21]
    3244:	bl	0 <ctf_errno>
    3248:	bl	0 <ctf_errmsg>
    324c:	mov	x2, x0
    3250:	adrp	x0, 0 <ctf_create>
    3254:	add	x0, x0, #0x0
    3258:	mov	x1, x19
    325c:	bl	0 <ctf_dprintf>
    3260:	b	3274 <enumcmp+0x7c>
    3264:	adrp	x0, 0 <ctf_create>
    3268:	add	x0, x0, #0x0
    326c:	mov	w1, w20
    3270:	bl	0 <ctf_dprintf>
    3274:	mov	w0, #0x1                   	// #1
    3278:	ldp	x20, x19, [sp, #32]
    327c:	ldr	x21, [sp, #16]
    3280:	ldp	x29, x30, [sp], #48
    3284:	ret

0000000000003288 <enumadd>:
    3288:	stp	x29, x30, [sp, #-16]!
    328c:	mov	w3, w1
    3290:	ldp	x8, x1, [x2]
    3294:	mov	x2, x0
    3298:	mov	x29, sp
    329c:	mov	x0, x8
    32a0:	bl	1cec <ctf_add_enumerator>
    32a4:	lsr	w0, w0, #31
    32a8:	ldp	x29, x30, [sp], #16
    32ac:	ret

ctf-decl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_decl_init>:
   0:	movi	v0.2d, #0x0
   4:	mov	x8, #0xffffffffffffffff    	// #-1
   8:	str	xzr, [x0, #96]
   c:	stp	q0, q0, [x0, #64]
  10:	stp	q0, q0, [x0, #32]
  14:	stp	q0, q0, [x0]
  18:	stp	x8, x8, [x0, #64]
  1c:	str	xzr, [x0, #80]
  20:	ret

0000000000000024 <ctf_decl_fini>:
  24:	stp	x29, x30, [sp, #-48]!
  28:	stp	x20, x19, [sp, #32]
  2c:	mov	x19, x0
  30:	mov	x20, xzr
  34:	str	x21, [sp, #16]
  38:	mov	x29, sp
  3c:	b	4c <ctf_decl_fini+0x28>
  40:	add	x20, x20, #0x1
  44:	cmp	x20, #0x4
  48:	b.eq	6c <ctf_decl_fini+0x48>  // b.none
  4c:	add	x8, x19, x20, lsl #4
  50:	ldr	x0, [x8, #8]
  54:	cbz	x0, 40 <ctf_decl_fini+0x1c>
  58:	ldr	x21, [x0, #8]
  5c:	bl	0 <free>
  60:	mov	x0, x21
  64:	cbnz	x21, 58 <ctf_decl_fini+0x34>
  68:	b	40 <ctf_decl_fini+0x1c>
  6c:	ldp	x20, x19, [sp, #32]
  70:	ldr	x21, [sp, #16]
  74:	ldp	x29, x30, [sp], #48
  78:	ret

000000000000007c <ctf_decl_push>:
  7c:	sub	sp, sp, #0x70
  80:	stp	x29, x30, [sp, #32]
  84:	add	x29, sp, #0x20
  88:	stp	x20, x19, [sp, #96]
  8c:	mov	x19, x0
  90:	str	x1, [x29, #24]
  94:	add	x0, x29, #0x18
  98:	mov	x1, x2
  9c:	str	x25, [sp, #48]
  a0:	stp	x24, x23, [sp, #64]
  a4:	stp	x22, x21, [sp, #80]
  a8:	mov	x21, x2
  ac:	bl	0 <ctf_lookup_by_id>
  b0:	ldr	x8, [x29, #24]
  b4:	cbz	x0, 120 <ctf_decl_push+0xa4>
  b8:	ldr	x8, [x8]
  bc:	mov	x22, x0
  c0:	ldr	w0, [x0, #4]
  c4:	ldr	x8, [x8]
  c8:	blr	x8
  cc:	sub	w8, w0, #0x3
  d0:	mov	w20, w0
  d4:	mov	w23, wzr
  d8:	cmp	w8, #0xb
  dc:	mov	w25, #0x1                   	// #1
  e0:	b.hi	1f4 <ctf_decl_push+0x178>  // b.pmore
  e4:	adrp	x9, 0 <ctf_decl_init>
  e8:	add	x9, x9, #0x0
  ec:	adr	x10, 100 <ctf_decl_push+0x84>
  f0:	ldrb	w11, [x9, x8]
  f4:	add	x10, x10, x11, lsl #2
  f8:	mov	w24, w23
  fc:	br	x10
 100:	ldr	x1, [x29, #24]
 104:	ldr	w2, [x22, #8]
 108:	mov	x0, x19
 10c:	bl	7c <ctf_decl_push>
 110:	ldr	w24, [x19, #80]
 114:	mov	w25, #0x1                   	// #1
 118:	mov	w23, #0x1                   	// #1
 11c:	b	1f8 <ctf_decl_push+0x17c>
 120:	ldr	w8, [x8, #556]
 124:	str	w8, [x19, #96]
 128:	b	274 <ctf_decl_push+0x1f8>
 12c:	ldr	x1, [x29, #24]
 130:	ldr	w2, [x22, #8]
 134:	mov	x0, x19
 138:	bl	7c <ctf_decl_push>
 13c:	mov	w23, wzr
 140:	mov	w25, #0x1                   	// #1
 144:	mov	w24, #0x1                   	// #1
 148:	b	1f8 <ctf_decl_push+0x17c>
 14c:	ldr	x0, [x29, #24]
 150:	add	x2, sp, #0x8
 154:	mov	x1, x21
 158:	bl	0 <ctf_array_info>
 15c:	ldr	x1, [x29, #24]
 160:	ldr	x2, [sp, #8]
 164:	mov	x0, x19
 168:	bl	7c <ctf_decl_push>
 16c:	ldr	w25, [sp, #24]
 170:	mov	w23, wzr
 174:	mov	w24, #0x2                   	// #2
 178:	b	1f8 <ctf_decl_push+0x17c>
 17c:	ldr	x1, [x29, #24]
 180:	ldr	w2, [x22, #8]
 184:	mov	x0, x19
 188:	bl	7c <ctf_decl_push>
 18c:	mov	w23, wzr
 190:	mov	w24, #0x3                   	// #3
 194:	mov	w25, #0x1                   	// #1
 198:	b	1f8 <ctf_decl_push+0x17c>
 19c:	ldr	x0, [x29, #24]
 1a0:	ldr	w1, [x22]
 1a4:	bl	0 <ctf_strptr>
 1a8:	ldrb	w8, [x0]
 1ac:	cbnz	w8, 1e4 <ctf_decl_push+0x168>
 1b0:	ldr	x1, [x29, #24]
 1b4:	ldr	w2, [x22, #8]
 1b8:	mov	x0, x19
 1bc:	bl	7c <ctf_decl_push>
 1c0:	b	274 <ctf_decl_push+0x1f8>
 1c4:	ldr	x22, [x29, #24]
 1c8:	mov	x1, x21
 1cc:	mov	x0, x22
 1d0:	bl	0 <ctf_type_reference>
 1d4:	mov	x2, x0
 1d8:	mov	x0, x19
 1dc:	mov	x1, x22
 1e0:	bl	7c <ctf_decl_push>
 1e4:	mov	w23, wzr
 1e8:	mov	w24, wzr
 1ec:	mov	w25, #0x1                   	// #1
 1f0:	b	1f8 <ctf_decl_push+0x17c>
 1f4:	mov	w24, w23
 1f8:	mov	w0, #0x20                  	// #32
 1fc:	bl	0 <malloc>
 200:	cbz	x0, 264 <ctf_decl_push+0x1e8>
 204:	mov	x1, x0
 208:	str	x21, [x0, #16]
 20c:	stp	w20, w25, [x0, #24]
 210:	add	x0, x19, w24, uxtw #4
 214:	ldr	x8, [x0, #8]
 218:	cbnz	x8, 234 <ctf_decl_push+0x1b8>
 21c:	ldr	w8, [x19, #84]
 220:	mov	w9, w24
 224:	add	x9, x19, x9, lsl #2
 228:	add	w10, w8, #0x1
 22c:	str	w10, [x19, #84]
 230:	str	w8, [x9, #64]
 234:	cmp	w24, #0x1
 238:	b.hi	24c <ctf_decl_push+0x1d0>  // b.pmore
 23c:	ldr	w8, [x19, #80]
 240:	cmp	w24, w8
 244:	b.ls	24c <ctf_decl_push+0x1d0>  // b.plast
 248:	str	w24, [x19, #80]
 24c:	cmp	w20, #0x4
 250:	b.eq	25c <ctf_decl_push+0x1e0>  // b.none
 254:	cbz	w23, 270 <ctf_decl_push+0x1f4>
 258:	cbnz	w24, 270 <ctf_decl_push+0x1f4>
 25c:	bl	0 <ctf_list_prepend>
 260:	b	274 <ctf_decl_push+0x1f8>
 264:	mov	w8, #0xb                   	// #11
 268:	str	w8, [x19, #96]
 26c:	b	274 <ctf_decl_push+0x1f8>
 270:	bl	0 <ctf_list_append>
 274:	ldp	x20, x19, [sp, #96]
 278:	ldp	x22, x21, [sp, #80]
 27c:	ldp	x24, x23, [sp, #64]
 280:	ldr	x25, [sp, #48]
 284:	ldp	x29, x30, [sp, #32]
 288:	add	sp, sp, #0x70
 28c:	ret

0000000000000290 <ctf_decl_sprintf>:
 290:	sub	sp, sp, #0x120
 294:	stp	x29, x30, [sp, #240]
 298:	add	x29, sp, #0xf0
 29c:	stp	x20, x19, [sp, #272]
 2a0:	stp	x2, x3, [x29, #-112]
 2a4:	stp	x4, x5, [x29, #-96]
 2a8:	stp	x6, x7, [x29, #-80]
 2ac:	stp	q1, q2, [sp, #16]
 2b0:	stp	q3, q4, [sp, #48]
 2b4:	str	q0, [sp]
 2b8:	stp	q5, q6, [sp, #80]
 2bc:	str	q7, [sp, #112]
 2c0:	ldr	w8, [x0, #100]
 2c4:	str	x28, [sp, #256]
 2c8:	cbnz	w8, 350 <ctf_decl_sprintf+0xc0>
 2cc:	mov	x8, #0xffffffffffffffd0    	// #-48
 2d0:	mov	x10, sp
 2d4:	sub	x11, x29, #0x70
 2d8:	movk	x8, #0xff80, lsl #32
 2dc:	add	x9, x29, #0x30
 2e0:	add	x10, x10, #0x80
 2e4:	add	x11, x11, #0x30
 2e8:	stp	x10, x8, [x29, #-16]
 2ec:	stp	x9, x11, [x29, #-32]
 2f0:	ldp	q0, q1, [x29, #-32]
 2f4:	mov	x19, x0
 2f8:	add	x0, x29, #0x18
 2fc:	sub	x2, x29, #0x40
 300:	stp	q0, q1, [x29, #-64]
 304:	bl	0 <vasprintf>
 308:	mov	w20, w0
 30c:	cmp	w0, #0x1
 310:	b.lt	328 <ctf_decl_sprintf+0x98>  // b.tstop
 314:	ldr	x0, [x19, #88]
 318:	ldr	x1, [x29, #24]
 31c:	bl	0 <ctf_str_append>
 320:	cbz	x0, 328 <ctf_decl_sprintf+0x98>
 324:	str	x0, [x19, #88]
 328:	tbnz	w20, #31, 334 <ctf_decl_sprintf+0xa4>
 32c:	ldr	x8, [x19, #88]
 330:	cbnz	x8, 348 <ctf_decl_sprintf+0xb8>
 334:	ldr	x0, [x19, #88]
 338:	bl	0 <free>
 33c:	mov	w8, #0x1                   	// #1
 340:	str	xzr, [x19, #88]
 344:	str	w8, [x19, #100]
 348:	ldr	x0, [x29, #24]
 34c:	bl	0 <free>
 350:	ldp	x20, x19, [sp, #272]
 354:	ldr	x28, [sp, #256]
 358:	ldp	x29, x30, [sp, #240]
 35c:	add	sp, sp, #0x120
 360:	ret

0000000000000364 <ctf_decl_buf>:
 364:	ldr	x0, [x0, #88]
 368:	ret

ctf-error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_errmsg>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	sub	w8, w0, #0x3e8
   8:	cmp	w8, #0x33
   c:	mov	x29, sp
  10:	b.hi	2c <ctf_errmsg+0x2c>  // b.pmore
  14:	adrp	x8, 0 <ctf_errmsg>
  18:	add	x8, x8, #0x0
  1c:	add	x8, x8, w0, sxtw #3
  20:	mov	x9, #0xffffffffffffe0c0    	// #-8000
  24:	ldr	x0, [x8, x9]
  28:	b	30 <ctf_errmsg+0x30>
  2c:	bl	0 <ctf_strerror>
  30:	adrp	x8, 0 <ctf_errmsg>
  34:	add	x8, x8, #0x0
  38:	cmp	x0, #0x0
  3c:	csel	x0, x8, x0, eq  // eq = none
  40:	ldp	x29, x30, [sp], #16
  44:	ret

0000000000000048 <ctf_errno>:
  48:	ldr	w0, [x0, #556]
  4c:	ret

ctf-hash.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_hash_integer>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x8, 0 <htab_hash_pointer>
   8:	ldr	x8, [x8]
   c:	ldr	x0, [x0]
  10:	mov	x29, sp
  14:	blr	x8
  18:	ldp	x29, x30, [sp], #16
  1c:	ret

0000000000000020 <ctf_hash_eq_integer>:
  20:	stp	x29, x30, [sp, #-16]!
  24:	adrp	x8, 0 <htab_eq_pointer>
  28:	ldr	x0, [x0]
  2c:	ldr	x8, [x8]
  30:	ldr	x1, [x1]
  34:	mov	x29, sp
  38:	blr	x8
  3c:	ldp	x29, x30, [sp], #16
  40:	ret

0000000000000044 <ctf_hash_string>:
  44:	stp	x29, x30, [sp, #-16]!
  48:	ldr	x0, [x0]
  4c:	mov	x29, sp
  50:	bl	0 <htab_hash_string>
  54:	ldp	x29, x30, [sp], #16
  58:	ret

000000000000005c <ctf_hash_eq_string>:
  5c:	stp	x29, x30, [sp, #-16]!
  60:	ldr	x0, [x0]
  64:	ldr	x1, [x1]
  68:	mov	x29, sp
  6c:	bl	0 <strcmp>
  70:	cmp	w0, #0x0
  74:	cset	w0, eq  // eq = none
  78:	ldp	x29, x30, [sp], #16
  7c:	ret

0000000000000080 <ctf_hash_type_mapping_key>:
  80:	stp	x29, x30, [sp, #-32]!
  84:	stp	x20, x19, [sp, #16]
  88:	ldr	x19, [x0]
  8c:	adrp	x20, 0 <htab_hash_pointer>
  90:	ldr	x8, [x20]
  94:	mov	x29, sp
  98:	ldr	x0, [x19]
  9c:	blr	x8
  a0:	ldr	x8, [x19, #8]
  a4:	ldr	x9, [x20]
  a8:	mov	w19, w0
  ac:	mov	x0, x8
  b0:	blr	x9
  b4:	mov	w8, #0x3b                  	// #59
  b8:	madd	w0, w0, w8, w19
  bc:	ldp	x20, x19, [sp, #16]
  c0:	ldp	x29, x30, [sp], #32
  c4:	ret

00000000000000c8 <ctf_hash_eq_type_mapping_key>:
  c8:	ldr	x8, [x0]
  cc:	ldr	x9, [x1]
  d0:	ldr	x10, [x8]
  d4:	ldr	x11, [x9]
  d8:	cmp	x10, x11
  dc:	b.eq	e8 <ctf_hash_eq_type_mapping_key+0x20>  // b.none
  e0:	mov	w0, wzr
  e4:	ret
  e8:	ldr	x8, [x8, #8]
  ec:	ldr	x9, [x9, #8]
  f0:	cmp	x8, x9
  f4:	cset	w0, eq  // eq = none
  f8:	ret

00000000000000fc <ctf_dynhash_create>:
  fc:	stp	x29, x30, [sp, #-64]!
 100:	str	x23, [sp, #16]
 104:	mov	x23, x0
 108:	mov	w0, #0x18                  	// #24
 10c:	stp	x22, x21, [sp, #32]
 110:	stp	x20, x19, [sp, #48]
 114:	mov	x29, sp
 118:	mov	x19, x3
 11c:	mov	x21, x2
 120:	mov	x22, x1
 124:	bl	0 <malloc>
 128:	mov	x20, x0
 12c:	cbz	x0, 174 <ctf_dynhash_create+0x78>
 130:	adrp	x3, 0 <ctf_hash_integer>
 134:	adrp	x4, 0 <xcalloc>
 138:	adrp	x5, 0 <free>
 13c:	add	x3, x3, #0x0
 140:	add	x4, x4, #0x0
 144:	add	x5, x5, #0x0
 148:	mov	w0, #0x7                   	// #7
 14c:	mov	x1, x23
 150:	mov	x2, x22
 154:	bl	0 <htab_create_alloc>
 158:	str	x0, [x20]
 15c:	cbz	x0, 168 <ctf_dynhash_create+0x6c>
 160:	stp	x21, x19, [x20, #8]
 164:	b	174 <ctf_dynhash_create+0x78>
 168:	mov	x0, x20
 16c:	bl	0 <free>
 170:	mov	x20, xzr
 174:	mov	x0, x20
 178:	ldp	x20, x19, [sp, #48]
 17c:	ldp	x22, x21, [sp, #32]
 180:	ldr	x23, [sp, #16]
 184:	ldp	x29, x30, [sp], #64
 188:	ret

000000000000018c <ctf_dynhash_item_free>:
 18c:	stp	x29, x30, [sp, #-32]!
 190:	ldr	x8, [x0, #16]
 194:	str	x19, [sp, #16]
 198:	mov	x19, x0
 19c:	mov	x29, sp
 1a0:	cbz	x8, 1b0 <ctf_dynhash_item_free+0x24>
 1a4:	ldr	x0, [x19]
 1a8:	cbz	x0, 1b0 <ctf_dynhash_item_free+0x24>
 1ac:	blr	x8
 1b0:	ldr	x8, [x19, #24]
 1b4:	cbz	x8, 1c4 <ctf_dynhash_item_free+0x38>
 1b8:	ldr	x0, [x19, #8]
 1bc:	cbz	x0, 1c4 <ctf_dynhash_item_free+0x38>
 1c0:	blr	x8
 1c4:	mov	x0, x19
 1c8:	bl	0 <free>
 1cc:	ldr	x19, [sp, #16]
 1d0:	ldp	x29, x30, [sp], #32
 1d4:	ret

00000000000001d8 <ctf_dynhash_insert>:
 1d8:	stp	x29, x30, [sp, #-32]!
 1dc:	str	x19, [sp, #16]
 1e0:	mov	x19, x0
 1e4:	ldr	x0, [x0]
 1e8:	ldp	x3, x4, [x19, #8]
 1ec:	mov	x29, sp
 1f0:	bl	228 <ctf_hashtab_insert>
 1f4:	cbz	x0, 214 <ctf_dynhash_insert+0x3c>
 1f8:	ldr	x9, [x19, #8]
 1fc:	mov	x8, x0
 200:	mov	w0, wzr
 204:	str	x9, [x8, #16]
 208:	ldr	x9, [x19, #16]
 20c:	str	x9, [x8, #24]
 210:	b	21c <ctf_dynhash_insert+0x44>
 214:	bl	0 <__errno_location>
 218:	ldr	w0, [x0]
 21c:	ldr	x19, [sp, #16]
 220:	ldp	x29, x30, [sp], #32
 224:	ret

0000000000000228 <ctf_hashtab_insert>:
 228:	stp	x29, x30, [sp, #-64]!
 22c:	stp	x20, x19, [sp, #48]
 230:	mov	x19, x2
 234:	mov	w2, #0x1                   	// #1
 238:	str	x23, [sp, #16]
 23c:	stp	x22, x21, [sp, #32]
 240:	mov	x29, sp
 244:	mov	x22, x4
 248:	mov	x23, x3
 24c:	mov	x20, x1
 250:	bl	344 <ctf_hashtab_lookup>
 254:	cbz	x0, 284 <ctf_hashtab_insert+0x5c>
 258:	ldr	x8, [x0]
 25c:	mov	x21, x0
 260:	cbz	x8, 29c <ctf_hashtab_insert+0x74>
 264:	cbz	x23, 270 <ctf_hashtab_insert+0x48>
 268:	ldr	x0, [x8]
 26c:	blr	x23
 270:	cbz	x22, 2ac <ctf_hashtab_insert+0x84>
 274:	ldr	x8, [x21]
 278:	ldr	x0, [x8, #8]
 27c:	blr	x22
 280:	b	2ac <ctf_hashtab_insert+0x84>
 284:	bl	0 <__errno_location>
 288:	mov	x8, x0
 28c:	mov	w9, #0xfffffff4            	// #-12
 290:	mov	x0, xzr
 294:	str	w9, [x8]
 298:	b	2c0 <ctf_hashtab_insert+0x98>
 29c:	mov	w0, #0x20                  	// #32
 2a0:	bl	0 <malloc>
 2a4:	str	x0, [x21]
 2a8:	cbz	x0, 2c0 <ctf_hashtab_insert+0x98>
 2ac:	ldr	x8, [x21]
 2b0:	str	x20, [x8]
 2b4:	ldr	x8, [x21]
 2b8:	str	x19, [x8, #8]
 2bc:	ldr	x0, [x21]
 2c0:	ldp	x20, x19, [sp, #48]
 2c4:	ldp	x22, x21, [sp, #32]
 2c8:	ldr	x23, [sp, #16]
 2cc:	ldp	x29, x30, [sp], #64
 2d0:	ret

00000000000002d4 <ctf_dynhash_remove>:
 2d4:	sub	sp, sp, #0x30
 2d8:	movi	v0.2d, #0x0
 2dc:	stp	x29, x30, [sp, #32]
 2e0:	stp	q0, q0, [sp]
 2e4:	str	x1, [sp]
 2e8:	ldr	x0, [x0]
 2ec:	mov	x1, sp
 2f0:	add	x29, sp, #0x20
 2f4:	bl	0 <htab_remove_elt>
 2f8:	ldp	x29, x30, [sp, #32]
 2fc:	add	sp, sp, #0x30
 300:	ret

0000000000000304 <ctf_dynhash_empty>:
 304:	stp	x29, x30, [sp, #-16]!
 308:	ldr	x0, [x0]
 30c:	mov	x29, sp
 310:	bl	0 <htab_empty>
 314:	ldp	x29, x30, [sp], #16
 318:	ret

000000000000031c <ctf_dynhash_lookup>:
 31c:	stp	x29, x30, [sp, #-16]!
 320:	ldr	x0, [x0]
 324:	mov	w2, wzr
 328:	mov	x29, sp
 32c:	bl	344 <ctf_hashtab_lookup>
 330:	cbz	x0, 33c <ctf_dynhash_lookup+0x20>
 334:	ldr	x8, [x0]
 338:	ldr	x0, [x8, #8]
 33c:	ldp	x29, x30, [sp], #16
 340:	ret

0000000000000344 <ctf_hashtab_lookup>:
 344:	sub	sp, sp, #0x30
 348:	movi	v0.2d, #0x0
 34c:	stp	q0, q0, [sp]
 350:	str	x1, [sp]
 354:	mov	x1, sp
 358:	stp	x29, x30, [sp, #32]
 35c:	add	x29, sp, #0x20
 360:	bl	0 <htab_find_slot>
 364:	ldp	x29, x30, [sp, #32]
 368:	add	sp, sp, #0x30
 36c:	ret

0000000000000370 <ctf_dynhash_iter>:
 370:	sub	sp, sp, #0x20
 374:	stp	x29, x30, [sp, #16]
 378:	stp	x1, x2, [sp]
 37c:	ldr	x0, [x0]
 380:	adrp	x1, 0 <ctf_hash_integer>
 384:	add	x1, x1, #0x0
 388:	mov	x2, sp
 38c:	add	x29, sp, #0x10
 390:	bl	0 <htab_traverse>
 394:	ldp	x29, x30, [sp, #16]
 398:	add	sp, sp, #0x20
 39c:	ret

00000000000003a0 <ctf_hashtab_traverse>:
 3a0:	stp	x29, x30, [sp, #-16]!
 3a4:	ldr	x8, [x0]
 3a8:	ldp	x9, x2, [x1]
 3ac:	mov	x29, sp
 3b0:	ldp	x0, x8, [x8]
 3b4:	mov	x1, x8
 3b8:	blr	x9
 3bc:	mov	w0, #0x1                   	// #1
 3c0:	ldp	x29, x30, [sp], #16
 3c4:	ret

00000000000003c8 <ctf_dynhash_iter_remove>:
 3c8:	sub	sp, sp, #0x30
 3cc:	stp	x29, x30, [sp, #32]
 3d0:	ldr	x8, [x0]
 3d4:	str	x2, [sp, #24]
 3d8:	add	x2, sp, #0x8
 3dc:	add	x29, sp, #0x20
 3e0:	stp	x8, x1, [sp, #8]
 3e4:	ldr	x0, [x0]
 3e8:	adrp	x1, 0 <ctf_hash_integer>
 3ec:	add	x1, x1, #0x0
 3f0:	bl	0 <htab_traverse>
 3f4:	ldp	x29, x30, [sp, #32]
 3f8:	add	sp, sp, #0x30
 3fc:	ret

0000000000000400 <ctf_hashtab_traverse_remove>:
 400:	stp	x29, x30, [sp, #-32]!
 404:	stp	x20, x19, [sp, #16]
 408:	ldr	x8, [x0]
 40c:	mov	x20, x1
 410:	mov	x19, x0
 414:	mov	x29, sp
 418:	ldp	x0, x1, [x8]
 41c:	ldp	x8, x2, [x20, #8]
 420:	blr	x8
 424:	cbz	w0, 434 <ctf_hashtab_traverse_remove+0x34>
 428:	ldr	x0, [x20]
 42c:	mov	x1, x19
 430:	bl	0 <htab_clear_slot>
 434:	ldp	x20, x19, [sp, #16]
 438:	mov	w0, #0x1                   	// #1
 43c:	ldp	x29, x30, [sp], #32
 440:	ret

0000000000000444 <ctf_dynhash_destroy>:
 444:	stp	x29, x30, [sp, #-32]!
 448:	str	x19, [sp, #16]
 44c:	mov	x19, x0
 450:	mov	x29, sp
 454:	cbz	x0, 460 <ctf_dynhash_destroy+0x1c>
 458:	ldr	x0, [x19]
 45c:	bl	0 <htab_delete>
 460:	mov	x0, x19
 464:	bl	0 <free>
 468:	ldr	x19, [sp, #16]
 46c:	ldp	x29, x30, [sp], #32
 470:	ret

0000000000000474 <ctf_hash_create>:
 474:	stp	x29, x30, [sp, #-16]!
 478:	adrp	x3, 0 <free>
 47c:	adrp	x4, 0 <xcalloc>
 480:	add	x3, x3, #0x0
 484:	add	x4, x4, #0x0
 488:	mov	x5, x3
 48c:	mov	x29, sp
 490:	bl	0 <htab_create_alloc>
 494:	ldp	x29, x30, [sp], #16
 498:	ret

000000000000049c <ctf_hash_size>:
 49c:	stp	x29, x30, [sp, #-16]!
 4a0:	mov	x29, sp
 4a4:	bl	0 <htab_elements>
 4a8:	ldp	x29, x30, [sp], #16
 4ac:	ret

00000000000004b0 <ctf_hash_insert_type>:
 4b0:	stp	x29, x30, [sp, #-48]!
 4b4:	stp	x22, x21, [sp, #16]
 4b8:	stp	x20, x19, [sp, #32]
 4bc:	mov	x21, x1
 4c0:	mov	x19, x0
 4c4:	mov	x0, x1
 4c8:	mov	w1, w3
 4cc:	mov	x29, sp
 4d0:	mov	w22, w3
 4d4:	mov	w20, w2
 4d8:	bl	0 <ctf_strraw>
 4dc:	cbz	w20, 520 <ctf_hash_insert_type+0x70>
 4e0:	mov	x1, x0
 4e4:	tbz	w22, #31, 4f4 <ctf_hash_insert_type+0x44>
 4e8:	cbnz	x1, 4f4 <ctf_hash_insert_type+0x44>
 4ec:	ldr	x8, [x21, #128]
 4f0:	cbz	x8, 530 <ctf_hash_insert_type+0x80>
 4f4:	cbz	x1, 528 <ctf_hash_insert_type+0x78>
 4f8:	ldrb	w8, [x1]
 4fc:	cbz	w8, 518 <ctf_hash_insert_type+0x68>
 500:	mov	w2, w20
 504:	mov	x0, x19
 508:	mov	x3, xzr
 50c:	mov	x4, xzr
 510:	bl	228 <ctf_hashtab_insert>
 514:	cbz	x0, 544 <ctf_hash_insert_type+0x94>
 518:	mov	w0, wzr
 51c:	b	54c <ctf_hash_insert_type+0x9c>
 520:	mov	w0, #0x16                  	// #22
 524:	b	54c <ctf_hash_insert_type+0x9c>
 528:	mov	w0, #0x3f9                 	// #1017
 52c:	b	54c <ctf_hash_insert_type+0x9c>
 530:	ldr	x8, [x21, #352]
 534:	cmp	x8, #0x0
 538:	mov	w8, #0x3f8                 	// #1016
 53c:	cinc	w0, w8, ne  // ne = any
 540:	b	54c <ctf_hash_insert_type+0x9c>
 544:	bl	0 <__errno_location>
 548:	ldr	w0, [x0]
 54c:	ldp	x20, x19, [sp, #32]
 550:	ldp	x22, x21, [sp, #16]
 554:	ldp	x29, x30, [sp], #48
 558:	ret

000000000000055c <ctf_hash_define_type>:
 55c:	stp	x29, x30, [sp, #-16]!
 560:	mov	x29, sp
 564:	bl	4b0 <ctf_hash_insert_type>
 568:	ldp	x29, x30, [sp], #16
 56c:	ret

0000000000000570 <ctf_hash_lookup_type>:
 570:	stp	x29, x30, [sp, #-16]!
 574:	mov	x1, x2
 578:	mov	w2, wzr
 57c:	mov	x29, sp
 580:	bl	344 <ctf_hashtab_lookup>
 584:	cbz	x0, 590 <ctf_hash_lookup_type+0x20>
 588:	ldr	x8, [x0]
 58c:	ldr	x0, [x8, #8]
 590:	ldp	x29, x30, [sp], #16
 594:	ret

0000000000000598 <ctf_hash_destroy>:
 598:	cbz	x0, 5ac <ctf_hash_destroy+0x14>
 59c:	stp	x29, x30, [sp, #-16]!
 5a0:	mov	x29, sp
 5a4:	bl	0 <htab_delete>
 5a8:	ldp	x29, x30, [sp], #16
 5ac:	ret

ctf-labels.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_label_topmost>:
   0:	sub	sp, sp, #0x30
   4:	add	x1, sp, #0x8
   8:	add	x2, sp, #0x4
   c:	stp	x29, x30, [sp, #16]
  10:	stp	x20, x19, [sp, #32]
  14:	add	x29, sp, #0x10
  18:	mov	x19, x0
  1c:	str	xzr, [sp, #8]
  20:	str	wzr, [sp, #4]
  24:	bl	78 <extract_label_info>
  28:	ldr	w8, [sp, #4]
  2c:	cbz	w8, 54 <ctf_label_topmost+0x54>
  30:	ldr	x9, [sp, #8]
  34:	mov	x0, x19
  38:	add	x8, x9, x8, lsl #3
  3c:	ldur	w1, [x8, #-8]
  40:	bl	0 <ctf_strraw>
  44:	mov	x20, x0
  48:	cbnz	x0, 64 <ctf_label_topmost+0x64>
  4c:	mov	w1, #0x3ef                 	// #1007
  50:	b	5c <ctf_label_topmost+0x5c>
  54:	mov	x20, xzr
  58:	mov	w1, #0x409                 	// #1033
  5c:	mov	x0, x19
  60:	bl	0 <ctf_set_errno>
  64:	mov	x0, x20
  68:	ldp	x20, x19, [sp, #32]
  6c:	ldp	x29, x30, [sp, #16]
  70:	add	sp, sp, #0x30
  74:	ret

0000000000000078 <extract_label_info>:
  78:	ldr	x8, [x0, #32]
  7c:	ldr	x9, [x0, #408]
  80:	ldr	w10, [x8, #16]
  84:	add	x9, x9, x10
  88:	str	x9, [x1]
  8c:	ldr	w8, [x8, #20]
  90:	sub	w8, w8, w10
  94:	lsr	w8, w8, #3
  98:	str	w8, [x2]
  9c:	ret

00000000000000a0 <ctf_label_iter>:
  a0:	sub	sp, sp, #0x50
  a4:	stp	x29, x30, [sp, #16]
  a8:	add	x29, sp, #0x10
  ac:	stp	x22, x21, [sp, #48]
  b0:	stp	x20, x19, [sp, #64]
  b4:	mov	x20, x2
  b8:	mov	x21, x1
  bc:	add	x1, x29, #0x18
  c0:	sub	x2, x29, #0x4
  c4:	str	x23, [sp, #32]
  c8:	mov	x19, x0
  cc:	str	xzr, [x29, #24]
  d0:	stur	wzr, [x29, #-4]
  d4:	bl	78 <extract_label_info>
  d8:	ldur	w23, [x29, #-4]
  dc:	cbz	w23, 124 <ctf_label_iter+0x84>
  e0:	ldr	x22, [x29, #24]
  e4:	ldr	w1, [x22]
  e8:	mov	x0, x19
  ec:	bl	0 <ctf_strraw>
  f0:	cbz	x0, 12c <ctf_label_iter+0x8c>
  f4:	ldr	w8, [x22, #4]
  f8:	mov	x1, sp
  fc:	mov	x2, x20
 100:	str	x8, [sp]
 104:	blr	x21
 108:	cbnz	w0, 11c <ctf_label_iter+0x7c>
 10c:	subs	w23, w23, #0x1
 110:	add	x22, x22, #0x8
 114:	b.ne	e4 <ctf_label_iter+0x44>  // b.any
 118:	mov	w0, wzr
 11c:	str	x22, [x29, #24]
 120:	b	14c <ctf_label_iter+0xac>
 124:	mov	w1, #0x409                 	// #1033
 128:	b	144 <ctf_label_iter+0xa4>
 12c:	str	x22, [x29, #24]
 130:	ldp	w1, w2, [x22]
 134:	adrp	x0, 0 <ctf_label_topmost>
 138:	add	x0, x0, #0x0
 13c:	bl	0 <ctf_dprintf>
 140:	mov	w1, #0x3ef                 	// #1007
 144:	mov	x0, x19
 148:	bl	0 <ctf_set_errno>
 14c:	ldp	x20, x19, [sp, #64]
 150:	ldp	x22, x21, [sp, #48]
 154:	ldr	x23, [sp, #32]
 158:	ldp	x29, x30, [sp, #16]
 15c:	add	sp, sp, #0x50
 160:	ret

0000000000000164 <ctf_label_info>:
 164:	sub	sp, sp, #0x30
 168:	stp	x1, x2, [sp]
 16c:	adrp	x1, 0 <ctf_label_topmost>
 170:	add	x1, x1, #0x0
 174:	mov	x2, sp
 178:	stp	x29, x30, [sp, #16]
 17c:	str	x19, [sp, #32]
 180:	add	x29, sp, #0x10
 184:	mov	x19, x0
 188:	bl	a0 <ctf_label_iter>
 18c:	tbnz	w0, #31, 1ac <ctf_label_info+0x48>
 190:	cmp	w0, #0x1
 194:	b.ne	1a0 <ctf_label_info+0x3c>  // b.any
 198:	mov	w0, wzr
 19c:	b	1ac <ctf_label_info+0x48>
 1a0:	mov	w1, #0x408                 	// #1032
 1a4:	mov	x0, x19
 1a8:	bl	0 <ctf_set_errno>
 1ac:	ldr	x19, [sp, #32]
 1b0:	ldp	x29, x30, [sp, #16]
 1b4:	add	sp, sp, #0x30
 1b8:	ret

00000000000001bc <label_info_cb>:
 1bc:	stp	x29, x30, [sp, #-32]!
 1c0:	stp	x20, x19, [sp, #16]
 1c4:	mov	x19, x1
 1c8:	ldr	x1, [x2]
 1cc:	mov	x29, sp
 1d0:	mov	x20, x2
 1d4:	bl	0 <strcmp>
 1d8:	cbz	w0, 1e4 <label_info_cb+0x28>
 1dc:	mov	w0, wzr
 1e0:	b	1f8 <label_info_cb+0x3c>
 1e4:	ldr	x8, [x20, #8]
 1e8:	cbz	x8, 1f4 <label_info_cb+0x38>
 1ec:	ldr	x9, [x19]
 1f0:	str	x9, [x8]
 1f4:	mov	w0, #0x1                   	// #1
 1f8:	ldp	x20, x19, [sp, #16]
 1fc:	ldp	x29, x30, [sp], #32
 200:	ret

ctf-link.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_add_type_mapping>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	stp	x24, x23, [sp, #16]
       8:	stp	x22, x21, [sp, #32]
       c:	stp	x20, x19, [sp, #48]
      10:	ldr	w8, [x0, #544]
      14:	mov	x19, x3
      18:	mov	x20, x0
      1c:	mov	x22, x1
      20:	cmp	x8, x1
      24:	mov	x21, x2
      28:	mov	x29, sp
      2c:	b.cc	3c <ctf_add_type_mapping+0x3c>  // b.lo, b.ul, b.last
      30:	ldr	x8, [x20, #512]
      34:	cmp	x8, #0x0
      38:	csel	x20, x20, x8, eq  // eq = none
      3c:	ldr	w8, [x21, #544]
      40:	ldr	w23, [x20, #544]
      44:	cmp	x8, x19
      48:	b.cc	58 <ctf_add_type_mapping+0x58>  // b.lo, b.ul, b.last
      4c:	ldr	x8, [x21, #512]
      50:	cmp	x8, #0x0
      54:	csel	x21, x21, x8, eq  // eq = none
      58:	ldr	x8, [x21, #664]
      5c:	ldr	w24, [x21, #544]
      60:	cbnz	x8, 8c <ctf_add_type_mapping+0x8c>
      64:	adrp	x0, 0 <ctf_hash_type_mapping_key>
      68:	adrp	x1, 0 <ctf_hash_eq_type_mapping_key>
      6c:	adrp	x2, 0 <free>
      70:	add	x0, x0, #0x0
      74:	add	x1, x1, #0x0
      78:	add	x2, x2, #0x0
      7c:	mov	x3, xzr
      80:	bl	0 <ctf_dynhash_create>
      84:	str	x0, [x21, #664]
      88:	cbz	x0, b4 <ctf_add_type_mapping+0xb4>
      8c:	mov	w0, #0x1                   	// #1
      90:	mov	w1, #0x10                  	// #16
      94:	bl	0 <calloc>
      98:	cbz	x0, b4 <ctf_add_type_mapping+0xb4>
      9c:	and	x8, x23, x22
      a0:	stp	x20, x8, [x0]
      a4:	mov	x1, x0
      a8:	ldr	x0, [x21, #664]
      ac:	and	x2, x24, x19
      b0:	bl	0 <ctf_dynhash_insert>
      b4:	ldp	x20, x19, [sp, #48]
      b8:	ldp	x22, x21, [sp, #32]
      bc:	ldp	x24, x23, [sp, #16]
      c0:	ldp	x29, x30, [sp], #64
      c4:	ret

00000000000000c8 <ctf_type_mapping>:
      c8:	sub	sp, sp, #0x40
      cc:	stp	x29, x30, [sp, #16]
      d0:	stp	x20, x19, [sp, #48]
      d4:	ldr	w8, [x0, #544]
      d8:	ldr	x20, [x2]
      dc:	mov	x19, x2
      e0:	str	x21, [sp, #32]
      e4:	cmp	x8, x1
      e8:	add	x29, sp, #0x10
      ec:	b.cc	fc <ctf_type_mapping+0x34>  // b.lo, b.ul, b.last
      f0:	ldr	x8, [x0, #512]
      f4:	cmp	x8, #0x0
      f8:	csel	x0, x0, x8, eq  // eq = none
      fc:	ldr	w8, [x0, #544]
     100:	and	x8, x8, x1
     104:	stp	x0, x8, [sp]
     108:	ldr	x0, [x20, #664]
     10c:	cbz	x0, 118 <ctf_type_mapping+0x50>
     110:	mov	x1, sp
     114:	bl	0 <ctf_dynhash_lookup>
     118:	ldr	x21, [x20, #512]
     11c:	cbz	x0, 134 <ctf_type_mapping+0x6c>
     120:	cbz	x21, 164 <ctf_type_mapping+0x9c>
     124:	ldr	w8, [x20, #544]
     128:	add	w8, w8, #0x1
     12c:	orr	x0, x0, x8
     130:	b	164 <ctf_type_mapping+0x9c>
     134:	cbz	x21, 17c <ctf_type_mapping+0xb4>
     138:	ldr	x0, [x21, #664]
     13c:	cbz	x0, 148 <ctf_type_mapping+0x80>
     140:	mov	x1, sp
     144:	bl	0 <ctf_dynhash_lookup>
     148:	cbz	x0, 160 <ctf_type_mapping+0x98>
     14c:	ldr	x8, [x21, #512]
     150:	cbz	x8, 160 <ctf_type_mapping+0x98>
     154:	ldr	w8, [x21, #544]
     158:	add	w8, w8, #0x1
     15c:	orr	x0, x0, x8
     160:	mov	x20, x21
     164:	str	x20, [x19]
     168:	ldp	x20, x19, [sp, #48]
     16c:	ldr	x21, [sp, #32]
     170:	ldp	x29, x30, [sp, #16]
     174:	add	sp, sp, #0x40
     178:	ret
     17c:	mov	x0, xzr
     180:	b	168 <ctf_type_mapping+0xa0>

0000000000000184 <ctf_link_add_ctf>:
     184:	stp	x29, x30, [sp, #-48]!
     188:	stp	x20, x19, [sp, #32]
     18c:	ldr	x8, [x0, #656]
     190:	mov	x19, x0
     194:	str	x21, [sp, #16]
     198:	mov	x29, sp
     19c:	cbz	x8, 1a8 <ctf_link_add_ctf+0x24>
     1a0:	mov	w1, #0x3f5                 	// #1013
     1a4:	b	238 <ctf_link_add_ctf+0xb4>
     1a8:	ldr	x8, [x19, #648]
     1ac:	mov	x21, x2
     1b0:	mov	x20, x1
     1b4:	cbz	x8, 1ec <ctf_link_add_ctf+0x68>
     1b8:	ldr	x8, [x19, #648]
     1bc:	cbz	x8, 21c <ctf_link_add_ctf+0x98>
     1c0:	mov	x0, x21
     1c4:	bl	0 <strdup>
     1c8:	mov	x21, x0
     1cc:	cbz	x0, 220 <ctf_link_add_ctf+0x9c>
     1d0:	ldr	x0, [x19, #648]
     1d4:	mov	x1, x21
     1d8:	mov	x2, x20
     1dc:	bl	0 <ctf_dynhash_insert>
     1e0:	tbnz	w0, #31, 220 <ctf_link_add_ctf+0x9c>
     1e4:	mov	w0, wzr
     1e8:	b	240 <ctf_link_add_ctf+0xbc>
     1ec:	adrp	x0, 0 <ctf_hash_string>
     1f0:	adrp	x1, 0 <ctf_hash_eq_string>
     1f4:	adrp	x2, 0 <free>
     1f8:	adrp	x3, 0 <ctf_add_type_mapping>
     1fc:	add	x0, x0, #0x0
     200:	add	x1, x1, #0x0
     204:	add	x2, x2, #0x0
     208:	add	x3, x3, #0x0
     20c:	bl	0 <ctf_dynhash_create>
     210:	str	x0, [x19, #648]
     214:	ldr	x8, [x19, #648]
     218:	cbnz	x8, 1c0 <ctf_link_add_ctf+0x3c>
     21c:	mov	x21, xzr
     220:	ldr	x0, [x19, #648]
     224:	bl	0 <free>
     228:	mov	x0, x21
     22c:	str	xzr, [x19, #648]
     230:	bl	0 <free>
     234:	mov	w1, #0xc                   	// #12
     238:	mov	x0, x19
     23c:	bl	0 <ctf_set_errno>
     240:	ldp	x20, x19, [sp, #32]
     244:	ldr	x21, [sp, #16]
     248:	ldp	x29, x30, [sp], #48
     24c:	ret

0000000000000250 <ctf_arc_close_thunk>:
     250:	stp	x29, x30, [sp, #-16]!
     254:	mov	x29, sp
     258:	bl	0 <ctf_arc_close>
     25c:	ldp	x29, x30, [sp], #16
     260:	ret

0000000000000264 <ctf_link_add_cu_mapping>:
     264:	stp	x29, x30, [sp, #-48]!
     268:	stp	x20, x19, [sp, #32]
     26c:	ldr	x8, [x0, #672]
     270:	str	x21, [sp, #16]
     274:	mov	x20, x2
     278:	mov	x19, x0
     27c:	mov	x21, x1
     280:	mov	x29, sp
     284:	cbz	x8, 294 <ctf_link_add_cu_mapping+0x30>
     288:	ldr	x8, [x19, #672]
     28c:	cbnz	x8, 2c0 <ctf_link_add_cu_mapping+0x5c>
     290:	b	350 <ctf_link_add_cu_mapping+0xec>
     294:	adrp	x2, 0 <free>
     298:	adrp	x0, 0 <ctf_hash_string>
     29c:	adrp	x1, 0 <ctf_hash_eq_string>
     2a0:	add	x2, x2, #0x0
     2a4:	add	x0, x0, #0x0
     2a8:	add	x1, x1, #0x0
     2ac:	mov	x3, x2
     2b0:	bl	0 <ctf_dynhash_create>
     2b4:	str	x0, [x19, #672]
     2b8:	ldr	x8, [x19, #672]
     2bc:	cbz	x8, 350 <ctf_link_add_cu_mapping+0xec>
     2c0:	ldr	x8, [x19, #656]
     2c4:	cbz	x8, 320 <ctf_link_add_cu_mapping+0xbc>
     2c8:	ldr	x8, [x19, #656]
     2cc:	cbz	x8, 350 <ctf_link_add_cu_mapping+0xec>
     2d0:	mov	x0, x21
     2d4:	bl	0 <strdup>
     2d8:	mov	x21, x0
     2dc:	mov	x0, x20
     2e0:	bl	0 <strdup>
     2e4:	mov	x20, x0
     2e8:	cbz	x21, 360 <ctf_link_add_cu_mapping+0xfc>
     2ec:	cbz	x20, 360 <ctf_link_add_cu_mapping+0xfc>
     2f0:	mov	x0, x19
     2f4:	mov	x1, x20
     2f8:	mov	x2, x20
     2fc:	bl	3a8 <ctf_create_per_cu>
     300:	cbz	x0, 370 <ctf_link_add_cu_mapping+0x10c>
     304:	ldr	x0, [x19, #672]
     308:	mov	x1, x21
     30c:	mov	x2, x20
     310:	bl	0 <ctf_dynhash_insert>
     314:	mov	w1, w0
     318:	cbnz	w0, 368 <ctf_link_add_cu_mapping+0x104>
     31c:	b	384 <ctf_link_add_cu_mapping+0x120>
     320:	adrp	x0, 0 <ctf_hash_string>
     324:	adrp	x1, 0 <ctf_hash_eq_string>
     328:	adrp	x2, 0 <free>
     32c:	adrp	x3, 0 <ctf_add_type_mapping>
     330:	add	x0, x0, #0x0
     334:	add	x1, x1, #0x0
     338:	add	x2, x2, #0x0
     33c:	add	x3, x3, #0x0
     340:	bl	0 <ctf_dynhash_create>
     344:	str	x0, [x19, #656]
     348:	ldr	x8, [x19, #656]
     34c:	cbnz	x8, 2d0 <ctf_link_add_cu_mapping+0x6c>
     350:	mov	w1, #0xc                   	// #12
     354:	mov	x0, x19
     358:	bl	0 <ctf_set_errno>
     35c:	b	384 <ctf_link_add_cu_mapping+0x120>
     360:	bl	0 <__errno_location>
     364:	ldr	w1, [x0]
     368:	mov	x0, x19
     36c:	bl	0 <ctf_set_errno>
     370:	mov	x0, x21
     374:	bl	0 <free>
     378:	mov	x0, x20
     37c:	bl	0 <free>
     380:	mov	w0, #0xffffffff            	// #-1
     384:	ldp	x20, x19, [sp, #32]
     388:	ldr	x21, [sp, #16]
     38c:	ldp	x29, x30, [sp], #48
     390:	ret

0000000000000394 <ctf_file_close_thunk>:
     394:	stp	x29, x30, [sp, #-16]!
     398:	mov	x29, sp
     39c:	bl	0 <ctf_file_close>
     3a0:	ldp	x29, x30, [sp], #16
     3a4:	ret

00000000000003a8 <ctf_create_per_cu>:
     3a8:	stp	x29, x30, [sp, #-64]!
     3ac:	stp	x22, x21, [sp, #32]
     3b0:	stp	x20, x19, [sp, #48]
     3b4:	mov	x19, x0
     3b8:	ldr	x0, [x0, #672]
     3bc:	mov	x21, x2
     3c0:	mov	x22, x1
     3c4:	str	x23, [sp, #16]
     3c8:	mov	x29, sp
     3cc:	cbz	x0, 3f0 <ctf_create_per_cu+0x48>
     3d0:	mov	x1, x22
     3d4:	bl	0 <ctf_dynhash_lookup>
     3d8:	cbnz	x0, 3f0 <ctf_create_per_cu+0x48>
     3dc:	ldr	x0, [x19, #672]
     3e0:	mov	x1, x21
     3e4:	bl	0 <ctf_dynhash_lookup>
     3e8:	cmp	x0, #0x0
     3ec:	csel	x0, x22, x0, eq  // eq = none
     3f0:	ldr	x8, [x19, #656]
     3f4:	cmp	x0, #0x0
     3f8:	csel	x23, x22, x0, eq  // eq = none
     3fc:	mov	x1, x23
     400:	mov	x0, x8
     404:	bl	0 <ctf_dynhash_lookup>
     408:	mov	x20, x0
     40c:	cbnz	x0, 4ec <ctf_create_per_cu+0x144>
     410:	add	x0, x29, #0x1c
     414:	bl	0 <ctf_create>
     418:	mov	x20, x0
     41c:	cbz	x0, 47c <ctf_create_per_cu+0xd4>
     420:	mov	x0, x23
     424:	bl	0 <strdup>
     428:	mov	x22, x0
     42c:	cbz	x0, 4d8 <ctf_create_per_cu+0x130>
     430:	ldr	x0, [x19, #656]
     434:	mov	x1, x22
     438:	mov	x2, x20
     43c:	bl	0 <ctf_dynhash_insert>
     440:	tbnz	w0, #31, 4d8 <ctf_create_per_cu+0x130>
     444:	mov	x0, x20
     448:	mov	x1, x19
     44c:	bl	0 <ctf_import>
     450:	mov	x0, x20
     454:	mov	x1, x21
     458:	bl	0 <ctf_cuname_set>
     45c:	adrp	x1, 0 <_CTF_SECTION>
     460:	add	x1, x1, #0x0
     464:	mov	x0, x20
     468:	bl	0 <ctf_parent_name_set>
     46c:	mov	w8, wzr
     470:	cmp	w8, #0x2
     474:	b.ne	4e4 <ctf_create_per_cu+0x13c>  // b.any
     478:	b	4b8 <ctf_create_per_cu+0x110>
     47c:	ldr	w0, [x29, #28]
     480:	bl	0 <ctf_errmsg>
     484:	mov	x3, x0
     488:	adrp	x0, 0 <ctf_add_type_mapping>
     48c:	add	x0, x0, #0x0
     490:	mov	x1, x21
     494:	mov	x2, x22
     498:	bl	0 <ctf_dprintf>
     49c:	ldr	w1, [x29, #28]
     4a0:	mov	x0, x19
     4a4:	bl	0 <ctf_set_errno>
     4a8:	mov	x22, xzr
     4ac:	mov	w8, #0x1                   	// #1
     4b0:	cmp	w8, #0x2
     4b4:	b.ne	4e4 <ctf_create_per_cu+0x13c>  // b.any
     4b8:	mov	x0, x22
     4bc:	bl	0 <free>
     4c0:	mov	x0, x20
     4c4:	bl	0 <ctf_file_close>
     4c8:	mov	w1, #0xc                   	// #12
     4cc:	mov	x0, x19
     4d0:	bl	0 <ctf_set_errno>
     4d4:	b	4e8 <ctf_create_per_cu+0x140>
     4d8:	mov	w8, #0x2                   	// #2
     4dc:	cmp	w8, #0x2
     4e0:	b.eq	4b8 <ctf_create_per_cu+0x110>  // b.none
     4e4:	cbz	w8, 4ec <ctf_create_per_cu+0x144>
     4e8:	mov	x20, xzr
     4ec:	mov	x0, x20
     4f0:	ldp	x20, x19, [sp, #48]
     4f4:	ldp	x22, x21, [sp, #32]
     4f8:	ldr	x23, [sp, #16]
     4fc:	ldp	x29, x30, [sp], #64
     500:	ret

0000000000000504 <ctf_link_set_memb_name_changer>:
     504:	str	x1, [x0, #680]
     508:	str	x2, [x0, #688]
     50c:	ret

0000000000000510 <ctf_link>:
     510:	sub	sp, sp, #0x60
     514:	movi	v0.2d, #0x0
     518:	stp	x29, x30, [sp, #64]
     51c:	stp	q0, q0, [sp, #32]
     520:	stp	q0, q0, [sp]
     524:	str	x0, [sp]
     528:	str	w1, [sp, #52]
     52c:	ldr	x8, [x0, #648]
     530:	str	x19, [sp, #80]
     534:	add	x29, sp, #0x40
     538:	cbz	x8, 578 <ctf_link+0x68>
     53c:	ldr	x8, [x0, #656]
     540:	mov	x19, x0
     544:	cbz	x8, 580 <ctf_link+0x70>
     548:	ldr	x8, [x19, #656]
     54c:	cbz	x8, 5b0 <ctf_link+0xa0>
     550:	ldr	x0, [x19, #648]
     554:	adrp	x1, 0 <ctf_add_type_mapping>
     558:	add	x1, x1, #0x0
     55c:	mov	x2, sp
     560:	bl	0 <ctf_dynhash_iter>
     564:	mov	x0, x19
     568:	bl	0 <ctf_errno>
     56c:	cmp	w0, #0x0
     570:	csetm	w0, ne  // ne = any
     574:	b	5bc <ctf_link+0xac>
     578:	mov	w0, wzr
     57c:	b	5bc <ctf_link+0xac>
     580:	adrp	x0, 0 <ctf_hash_string>
     584:	adrp	x1, 0 <ctf_hash_eq_string>
     588:	adrp	x2, 0 <free>
     58c:	adrp	x3, 0 <ctf_add_type_mapping>
     590:	add	x0, x0, #0x0
     594:	add	x1, x1, #0x0
     598:	add	x2, x2, #0x0
     59c:	add	x3, x3, #0x0
     5a0:	bl	0 <ctf_dynhash_create>
     5a4:	str	x0, [x19, #656]
     5a8:	ldr	x8, [x19, #656]
     5ac:	cbnz	x8, 550 <ctf_link+0x40>
     5b0:	mov	w1, #0xc                   	// #12
     5b4:	mov	x0, x19
     5b8:	bl	0 <ctf_set_errno>
     5bc:	ldr	x19, [sp, #80]
     5c0:	ldp	x29, x30, [sp, #64]
     5c4:	add	sp, sp, #0x60
     5c8:	ret

00000000000005cc <ctf_link_one_input_archive>:
     5cc:	sub	sp, sp, #0x30
     5d0:	stp	x29, x30, [sp, #16]
     5d4:	add	x29, sp, #0x10
     5d8:	stp	x20, x19, [sp, #32]
     5dc:	mov	x19, x2
     5e0:	mov	x20, x1
     5e4:	str	x0, [x2, #8]
     5e8:	str	wzr, [x2, #48]
     5ec:	sub	x2, x29, #0x4
     5f0:	mov	x0, x1
     5f4:	mov	x1, xzr
     5f8:	bl	0 <ctf_arc_open_by_name>
     5fc:	str	x0, [x19, #24]
     600:	cbnz	x0, 634 <ctf_link_one_input_archive+0x68>
     604:	ldur	w8, [x29, #-4]
     608:	cmp	w8, #0x415
     60c:	b.eq	634 <ctf_link_one_input_archive+0x68>  // b.none
     610:	ldr	x19, [x19, #8]
     614:	mov	w0, w8
     618:	bl	0 <ctf_errmsg>
     61c:	mov	x2, x0
     620:	adrp	x0, 0 <ctf_add_type_mapping>
     624:	add	x0, x0, #0x0
     628:	mov	x1, x19
     62c:	bl	0 <ctf_dprintf>
     630:	b	6d4 <ctf_link_one_input_archive+0x108>
     634:	adrp	x1, 0 <_CTF_SECTION>
     638:	add	x1, x1, #0x0
     63c:	mov	x2, x19
     640:	bl	ca0 <ctf_link_one_input_archive_member>
     644:	tbnz	w0, #31, 678 <ctf_link_one_input_archive+0xac>
     648:	adrp	x1, 0 <ctf_add_type_mapping>
     64c:	mov	w8, #0x1                   	// #1
     650:	add	x1, x1, #0x0
     654:	mov	x0, x20
     658:	mov	x2, x19
     65c:	str	w8, [x19, #48]
     660:	bl	0 <ctf_archive_iter>
     664:	tbnz	w0, #31, 684 <ctf_link_one_input_archive+0xb8>
     668:	ldr	x0, [x19]
     66c:	mov	w1, wzr
     670:	bl	0 <ctf_set_errno>
     674:	b	6a4 <ctf_link_one_input_archive+0xd8>
     678:	ldr	x0, [x19, #24]
     67c:	bl	0 <ctf_file_close>
     680:	b	6d4 <ctf_link_one_input_archive+0x108>
     684:	ldp	x0, x20, [x19]
     688:	bl	0 <ctf_errno>
     68c:	bl	0 <ctf_errmsg>
     690:	mov	x2, x0
     694:	adrp	x0, 0 <ctf_add_type_mapping>
     698:	add	x0, x0, #0x0
     69c:	mov	x1, x20
     6a0:	bl	0 <ctf_dprintf>
     6a4:	ldr	x0, [x19, #24]
     6a8:	bl	0 <ctf_file_close>
     6ac:	ldr	x8, [x19]
     6b0:	ldr	x0, [x8, #664]
     6b4:	cbz	x0, 6bc <ctf_link_one_input_archive+0xf0>
     6b8:	bl	0 <ctf_dynhash_empty>
     6bc:	ldr	x8, [x19]
     6c0:	adrp	x1, 0 <ctf_add_type_mapping>
     6c4:	add	x1, x1, #0x0
     6c8:	mov	x2, xzr
     6cc:	ldr	x0, [x8, #656]
     6d0:	bl	0 <ctf_dynhash_iter>
     6d4:	ldp	x20, x19, [sp, #32]
     6d8:	ldp	x29, x30, [sp, #16]
     6dc:	add	sp, sp, #0x30
     6e0:	ret

00000000000006e4 <ctf_link_add_strtab>:
     6e4:	sub	sp, sp, #0x60
     6e8:	stp	x29, x30, [sp, #32]
     6ec:	add	x29, sp, #0x20
     6f0:	stp	x22, x21, [sp, #64]
     6f4:	stp	x20, x19, [sp, #80]
     6f8:	mov	x20, x1
     6fc:	mov	x21, x0
     700:	sub	x0, x29, #0x4
     704:	mov	x1, x2
     708:	stp	x24, x23, [sp, #48]
     70c:	mov	x19, x2
     710:	blr	x20
     714:	cbz	x0, 78c <ctf_link_add_strtab+0xa8>
     718:	adrp	x22, 0 <ctf_add_type_mapping>
     71c:	mov	x1, x0
     720:	mov	w24, wzr
     724:	mov	w23, #0xc                   	// #12
     728:	add	x22, x22, #0x0
     72c:	ldur	w2, [x29, #-4]
     730:	str	x1, [sp, #8]
     734:	mov	x0, x21
     738:	stp	w2, wzr, [sp, #16]
     73c:	ldr	w8, [x21, #552]
     740:	orr	w8, w8, #0x4
     744:	str	w8, [x21, #552]
     748:	bl	0 <ctf_str_add_external>
     74c:	ldr	x8, [x21, #656]
     750:	cmp	w0, #0x0
     754:	add	x2, sp, #0x8
     758:	mov	x1, x22
     75c:	mov	x0, x8
     760:	csel	w24, w23, w24, eq  // eq = none
     764:	bl	0 <ctf_dynhash_iter>
     768:	ldr	w8, [sp, #20]
     76c:	sub	x0, x29, #0x4
     770:	mov	x1, x19
     774:	cmp	w8, #0x0
     778:	csel	w24, w24, w8, eq  // eq = none
     77c:	blr	x20
     780:	mov	x1, x0
     784:	cbnz	x0, 72c <ctf_link_add_strtab+0x48>
     788:	neg	w0, w24
     78c:	ldp	x20, x19, [sp, #80]
     790:	ldp	x22, x21, [sp, #64]
     794:	ldp	x24, x23, [sp, #48]
     798:	ldp	x29, x30, [sp, #32]
     79c:	add	sp, sp, #0x60
     7a0:	ret

00000000000007a4 <ctf_link_intern_extern_string>:
     7a4:	stp	x29, x30, [sp, #-32]!
     7a8:	ldr	w8, [x1, #552]
     7ac:	str	x19, [sp, #16]
     7b0:	mov	x19, x2
     7b4:	mov	x0, x1
     7b8:	orr	w8, w8, #0x4
     7bc:	str	w8, [x1, #552]
     7c0:	ldr	x1, [x2]
     7c4:	ldr	w2, [x2, #8]
     7c8:	mov	x29, sp
     7cc:	bl	0 <ctf_str_add_external>
     7d0:	cbnz	w0, 7dc <ctf_link_intern_extern_string+0x38>
     7d4:	mov	w8, #0xc                   	// #12
     7d8:	str	w8, [x19, #12]
     7dc:	ldr	x19, [sp, #16]
     7e0:	ldp	x29, x30, [sp], #32
     7e4:	ret

00000000000007e8 <ctf_link_shuffle_syms>:
     7e8:	mov	w0, wzr
     7ec:	ret

00000000000007f0 <ctf_link_write>:
     7f0:	sub	sp, sp, #0x80
     7f4:	movi	v0.2d, #0x0
     7f8:	stp	x29, x30, [sp, #48]
     7fc:	stp	x24, x23, [sp, #80]
     800:	stp	x22, x21, [sp, #96]
     804:	stp	x20, x19, [sp, #112]
     808:	stp	q0, q0, [sp, #16]
     80c:	str	q0, [sp]
     810:	str	x0, [sp, #8]
     814:	mov	x19, x0
     818:	ldr	x0, [x0, #656]
     81c:	mov	x22, x2
     820:	mov	x24, x1
     824:	str	x25, [sp, #64]
     828:	add	x29, sp, #0x30
     82c:	cbz	x0, 84c <ctf_link_write+0x5c>
     830:	adrp	x1, 0 <ctf_add_type_mapping>
     834:	add	x1, x1, #0x0
     838:	mov	x2, sp
     83c:	bl	0 <ctf_dynhash_iter>
     840:	mov	x0, x19
     844:	bl	0 <ctf_errno>
     848:	tbnz	w0, #31, 8ec <ctf_link_write+0xfc>
     84c:	ldr	x8, [sp, #24]
     850:	cbz	x8, 8d4 <ctf_link_write+0xe4>
     854:	ldr	x0, [sp]
     858:	lsl	x8, x8, #3
     85c:	add	x1, x8, #0x8
     860:	bl	0 <realloc>
     864:	mov	x20, x0
     868:	cbz	x0, 904 <ctf_link_write+0x114>
     86c:	ldr	x8, [sp, #24]
     870:	add	x0, x20, #0x8
     874:	mov	x1, x20
     878:	str	x20, [sp]
     87c:	lsl	x2, x8, #3
     880:	bl	0 <memmove>
     884:	adrp	x8, 0 <_CTF_SECTION>
     888:	add	x8, x8, #0x0
     88c:	str	x8, [x20]
     890:	ldr	x8, [x19, #680]
     894:	cbz	x8, 918 <ctf_link_write+0x128>
     898:	ldr	x2, [x19, #688]
     89c:	adrp	x1, 0 <_CTF_SECTION>
     8a0:	add	x1, x1, #0x0
     8a4:	mov	x0, x19
     8a8:	blr	x8
     8ac:	mov	x20, x0
     8b0:	cbz	x0, 91c <ctf_link_write+0x12c>
     8b4:	ldr	x8, [sp]
     8b8:	adrp	x1, 0 <ctf_add_type_mapping>
     8bc:	add	x1, x1, #0x0
     8c0:	mov	x2, x20
     8c4:	str	x20, [x8]
     8c8:	ldr	x0, [x19, #656]
     8cc:	bl	0 <ctf_dynhash_iter>
     8d0:	b	91c <ctf_link_write+0x12c>
     8d4:	mov	x0, x19
     8d8:	mov	x1, x24
     8dc:	mov	x2, x22
     8e0:	bl	0 <ctf_write_mem>
     8e4:	mov	x22, x0
     8e8:	b	b4c <ctf_link_write+0x35c>
     8ec:	adrp	x23, 0 <ctf_add_type_mapping>
     8f0:	mov	x21, xzr
     8f4:	mov	x20, xzr
     8f8:	mov	x22, xzr
     8fc:	add	x23, x23, #0x0
     900:	b	acc <ctf_link_write+0x2dc>
     904:	adrp	x23, 0 <ctf_add_type_mapping>
     908:	mov	x21, xzr
     90c:	mov	x22, xzr
     910:	add	x23, x23, #0x0
     914:	b	abc <ctf_link_write+0x2cc>
     918:	mov	x20, xzr
     91c:	ldp	x0, x8, [sp, #16]
     920:	lsl	x8, x8, #3
     924:	add	x1, x8, #0x8
     928:	bl	0 <realloc>
     92c:	mov	x21, x0
     930:	cbz	x0, a00 <ctf_link_write+0x210>
     934:	ldr	x8, [sp, #24]
     938:	add	x0, x21, #0x8
     93c:	mov	x1, x21
     940:	str	x21, [sp, #16]
     944:	lsl	x2, x8, #3
     948:	bl	0 <memmove>
     94c:	str	x19, [x21]
     950:	bl	0 <tmpfile>
     954:	mov	x21, x0
     958:	cbz	x0, a10 <ctf_link_write+0x220>
     95c:	mov	x0, x21
     960:	bl	0 <fileno>
     964:	ldp	x1, x8, [sp, #16]
     968:	ldr	x3, [sp]
     96c:	mov	x4, x22
     970:	add	x2, x8, #0x1
     974:	bl	0 <ctf_arc_write_fd>
     978:	tbnz	w0, #31, a20 <ctf_link_write+0x230>
     97c:	mov	w2, #0x2                   	// #2
     980:	mov	x0, x21
     984:	mov	x1, xzr
     988:	bl	0 <fseek>
     98c:	tbnz	w0, #31, a34 <ctf_link_write+0x244>
     990:	mov	x0, x21
     994:	bl	0 <ftell>
     998:	tbnz	x0, #63, a44 <ctf_link_write+0x254>
     99c:	mov	x25, x0
     9a0:	mov	x0, x21
     9a4:	mov	x1, xzr
     9a8:	mov	w2, wzr
     9ac:	bl	0 <fseek>
     9b0:	tbnz	w0, #31, a54 <ctf_link_write+0x264>
     9b4:	mov	x0, x25
     9b8:	bl	0 <malloc>
     9bc:	mov	x22, x0
     9c0:	cbz	x0, ab4 <ctf_link_write+0x2c4>
     9c4:	adrp	x23, 0 <ctf_add_type_mapping>
     9c8:	add	x23, x23, #0x0
     9cc:	mov	x0, x21
     9d0:	bl	0 <feof>
     9d4:	cbnz	w0, a64 <ctf_link_write+0x274>
     9d8:	mov	w2, #0x1                   	// #1
     9dc:	mov	x0, x22
     9e0:	mov	x1, x25
     9e4:	mov	x3, x21
     9e8:	bl	0 <fread>
     9ec:	cbnz	x0, a64 <ctf_link_write+0x274>
     9f0:	mov	x0, x21
     9f4:	bl	0 <ferror>
     9f8:	cbz	w0, 9cc <ctf_link_write+0x1dc>
     9fc:	b	abc <ctf_link_write+0x2cc>
     a00:	adrp	x23, 0 <ctf_add_type_mapping>
     a04:	mov	x22, xzr
     a08:	add	x23, x23, #0x0
     a0c:	b	abc <ctf_link_write+0x2cc>
     a10:	adrp	x23, 0 <ctf_add_type_mapping>
     a14:	mov	x22, xzr
     a18:	add	x23, x23, #0x0
     a1c:	b	abc <ctf_link_write+0x2cc>
     a20:	adrp	x23, 0 <ctf_add_type_mapping>
     a24:	mov	w1, w0
     a28:	mov	x22, xzr
     a2c:	add	x23, x23, #0x0
     a30:	b	ac4 <ctf_link_write+0x2d4>
     a34:	adrp	x23, 0 <ctf_add_type_mapping>
     a38:	mov	x22, xzr
     a3c:	add	x23, x23, #0x0
     a40:	b	abc <ctf_link_write+0x2cc>
     a44:	adrp	x23, 0 <ctf_add_type_mapping>
     a48:	mov	x22, xzr
     a4c:	add	x23, x23, #0x0
     a50:	b	abc <ctf_link_write+0x2cc>
     a54:	adrp	x23, 0 <ctf_add_type_mapping>
     a58:	mov	x22, xzr
     a5c:	add	x23, x23, #0x0
     a60:	b	abc <ctf_link_write+0x2cc>
     a64:	str	x25, [x24]
     a68:	ldr	x0, [sp]
     a6c:	bl	0 <free>
     a70:	ldr	x0, [sp, #16]
     a74:	bl	0 <free>
     a78:	mov	x0, x20
     a7c:	bl	0 <free>
     a80:	ldr	x8, [sp, #40]
     a84:	cbz	x8, b4c <ctf_link_write+0x35c>
     a88:	ldp	x0, x8, [sp, #32]
     a8c:	cbz	x8, aac <ctf_link_write+0x2bc>
     a90:	mov	x19, xzr
     a94:	ldr	x0, [x0, x19, lsl #3]
     a98:	bl	0 <free>
     a9c:	ldp	x0, x8, [sp, #32]
     aa0:	add	x19, x19, #0x1
     aa4:	cmp	x19, x8
     aa8:	b.cc	a94 <ctf_link_write+0x2a4>  // b.lo, b.ul, b.last
     aac:	bl	0 <free>
     ab0:	b	b4c <ctf_link_write+0x35c>
     ab4:	adrp	x23, 0 <ctf_add_type_mapping>
     ab8:	add	x23, x23, #0x0
     abc:	bl	0 <__errno_location>
     ac0:	ldr	w1, [x0]
     ac4:	mov	x0, x19
     ac8:	bl	0 <ctf_set_errno>
     acc:	mov	x0, x22
     ad0:	bl	0 <free>
     ad4:	cbz	x21, ae0 <ctf_link_write+0x2f0>
     ad8:	mov	x0, x21
     adc:	bl	0 <fclose>
     ae0:	ldr	x0, [sp]
     ae4:	bl	0 <free>
     ae8:	ldr	x0, [sp, #16]
     aec:	bl	0 <free>
     af0:	mov	x0, x20
     af4:	bl	0 <free>
     af8:	ldr	x8, [sp, #40]
     afc:	cbz	x8, b28 <ctf_link_write+0x338>
     b00:	ldp	x0, x8, [sp, #32]
     b04:	cbz	x8, b24 <ctf_link_write+0x334>
     b08:	mov	x20, xzr
     b0c:	ldr	x0, [x0, x20, lsl #3]
     b10:	bl	0 <free>
     b14:	ldp	x0, x8, [sp, #32]
     b18:	add	x20, x20, #0x1
     b1c:	cmp	x20, x8
     b20:	b.cc	b0c <ctf_link_write+0x31c>  // b.lo, b.ul, b.last
     b24:	bl	0 <free>
     b28:	mov	x0, x19
     b2c:	bl	0 <ctf_errno>
     b30:	bl	0 <ctf_errmsg>
     b34:	mov	x2, x0
     b38:	adrp	x0, 0 <ctf_add_type_mapping>
     b3c:	add	x0, x0, #0x0
     b40:	mov	x1, x23
     b44:	bl	0 <ctf_dprintf>
     b48:	mov	x22, xzr
     b4c:	mov	x0, x22
     b50:	ldp	x20, x19, [sp, #112]
     b54:	ldp	x22, x21, [sp, #96]
     b58:	ldp	x24, x23, [sp, #80]
     b5c:	ldr	x25, [sp, #64]
     b60:	ldp	x29, x30, [sp, #48]
     b64:	add	sp, sp, #0x80
     b68:	ret

0000000000000b6c <ctf_accumulate_archive_names>:
     b6c:	stp	x29, x30, [sp, #-64]!
     b70:	stp	x24, x23, [sp, #16]
     b74:	stp	x22, x21, [sp, #32]
     b78:	stp	x20, x19, [sp, #48]
     b7c:	ldr	x8, [x2, #24]
     b80:	mov	x21, x0
     b84:	ldr	x0, [x2]
     b88:	mov	x20, x1
     b8c:	add	x8, x8, #0x1
     b90:	lsl	x1, x8, #3
     b94:	mov	x29, sp
     b98:	mov	x19, x2
     b9c:	str	x8, [x2, #24]
     ba0:	bl	0 <realloc>
     ba4:	cbz	x0, c0c <ctf_accumulate_archive_names+0xa0>
     ba8:	mov	x22, x0
     bac:	ldp	x0, x8, [x19, #16]
     bb0:	lsl	x1, x8, #3
     bb4:	bl	0 <realloc>
     bb8:	cbz	x0, c0c <ctf_accumulate_archive_names+0xa0>
     bbc:	ldr	x8, [x20, #680]
     bc0:	mov	x23, x0
     bc4:	cbz	x8, c30 <ctf_accumulate_archive_names+0xc4>
     bc8:	ldr	x2, [x20, #688]
     bcc:	mov	x0, x20
     bd0:	mov	x1, x21
     bd4:	blr	x8
     bd8:	cbz	x0, c28 <ctf_accumulate_archive_names+0xbc>
     bdc:	mov	x24, x0
     be0:	ldp	x0, x8, [x19, #32]
     be4:	add	x8, x8, #0x1
     be8:	lsl	x1, x8, #3
     bec:	str	x8, [x19, #40]
     bf0:	bl	0 <realloc>
     bf4:	cbz	x0, c60 <ctf_accumulate_archive_names+0xf4>
     bf8:	mov	w8, #0x1                   	// #1
     bfc:	mov	x21, x24
     c00:	str	x0, [x19, #32]
     c04:	cbnz	w8, c30 <ctf_accumulate_archive_names+0xc4>
     c08:	b	c4c <ctf_accumulate_archive_names+0xe0>
     c0c:	ldr	x8, [x19, #24]
     c10:	ldr	x0, [x19, #8]
     c14:	mov	w1, #0xc                   	// #12
     c18:	sub	x8, x8, #0x1
     c1c:	str	x8, [x19, #24]
     c20:	bl	0 <ctf_set_errno>
     c24:	b	c4c <ctf_accumulate_archive_names+0xe0>
     c28:	mov	w8, #0x1                   	// #1
     c2c:	cbz	w8, c4c <ctf_accumulate_archive_names+0xe0>
     c30:	ldr	x8, [x19, #24]
     c34:	str	x22, [x19]
     c38:	lsl	x8, x8, #3
     c3c:	sub	x8, x8, #0x8
     c40:	str	x21, [x22, x8]
     c44:	str	x23, [x19, #16]
     c48:	str	x20, [x23, x8]
     c4c:	ldp	x20, x19, [sp, #48]
     c50:	ldp	x22, x21, [sp, #32]
     c54:	ldp	x24, x23, [sp, #16]
     c58:	ldp	x29, x30, [sp], #64
     c5c:	ret
     c60:	ldr	x8, [x19, #40]
     c64:	ldr	x0, [x19, #8]
     c68:	mov	w1, #0xc                   	// #12
     c6c:	sub	x8, x8, #0x1
     c70:	str	x8, [x19, #40]
     c74:	bl	0 <ctf_set_errno>
     c78:	mov	w8, wzr
     c7c:	cbnz	w8, c30 <ctf_accumulate_archive_names+0xc4>
     c80:	b	c4c <ctf_accumulate_archive_names+0xe0>

0000000000000c84 <ctf_change_parent_name>:
     c84:	stp	x29, x30, [sp, #-16]!
     c88:	mov	x0, x1
     c8c:	mov	x1, x2
     c90:	mov	x29, sp
     c94:	bl	0 <ctf_parent_name_set>
     c98:	ldp	x29, x30, [sp], #16
     c9c:	ret

0000000000000ca0 <ctf_link_one_input_archive_member>:
     ca0:	stp	x29, x30, [sp, #-48]!
     ca4:	str	x21, [sp, #16]
     ca8:	mov	x21, x1
     cac:	adrp	x1, 0 <_CTF_SECTION>
     cb0:	stp	x20, x19, [sp, #32]
     cb4:	mov	x20, x0
     cb8:	add	x1, x1, #0x0
     cbc:	mov	x0, x21
     cc0:	mov	x29, sp
     cc4:	mov	x19, x2
     cc8:	bl	0 <strcmp>
     ccc:	cbz	w0, d64 <ctf_link_one_input_archive_member+0xc4>
     cd0:	mov	x0, x21
     cd4:	bl	0 <strdup>
     cd8:	ldr	x1, [x19, #24]
     cdc:	str	x0, [x19, #40]
     ce0:	mov	x0, x20
     ce4:	bl	0 <ctf_import>
     ce8:	mov	w8, #0x1                   	// #1
     cec:	str	w8, [x19, #56]
     cf0:	ldr	x8, [x19, #40]
     cf4:	cbz	x8, d74 <ctf_link_one_input_archive_member+0xd4>
     cf8:	adrp	x1, 0 <ctf_add_type_mapping>
     cfc:	add	x1, x1, #0x0
     d00:	mov	w2, #0x5                   	// #5
     d04:	mov	x0, x21
     d08:	str	x21, [x19, #32]
     d0c:	bl	0 <strncmp>
     d10:	cbnz	w0, d1c <ctf_link_one_input_archive_member+0x7c>
     d14:	add	x8, x21, #0x5
     d18:	str	x8, [x19, #32]
     d1c:	adrp	x1, 0 <ctf_add_type_mapping>
     d20:	add	x1, x1, #0x0
     d24:	mov	x0, x20
     d28:	mov	x2, x19
     d2c:	str	x20, [x19, #16]
     d30:	bl	0 <ctf_type_iter_all>
     d34:	tbnz	w0, #31, d4c <ctf_link_one_input_archive_member+0xac>
     d38:	adrp	x1, 0 <ctf_add_type_mapping>
     d3c:	add	x1, x1, #0x0
     d40:	mov	x0, x20
     d44:	mov	x2, x19
     d48:	bl	0 <ctf_variable_iter>
     d4c:	mov	w21, w0
     d50:	ldr	x0, [x19, #40]
     d54:	str	wzr, [x19, #56]
     d58:	bl	0 <free>
     d5c:	asr	w0, w21, #31
     d60:	b	d80 <ctf_link_one_input_archive_member+0xe0>
     d64:	ldr	w8, [x19, #48]
     d68:	cbz	w8, d90 <ctf_link_one_input_archive_member+0xf0>
     d6c:	mov	w0, wzr
     d70:	b	d80 <ctf_link_one_input_archive_member+0xe0>
     d74:	mov	w1, #0xc                   	// #12
     d78:	mov	x0, x20
     d7c:	bl	0 <ctf_set_errno>
     d80:	ldp	x20, x19, [sp, #32]
     d84:	ldr	x21, [sp, #16]
     d88:	ldp	x29, x30, [sp], #48
     d8c:	ret
     d90:	adrp	x0, 0 <ctf_add_type_mapping>
     d94:	add	x0, x0, #0x0
     d98:	bl	0 <strdup>
     d9c:	str	x0, [x19, #40]
     da0:	cbz	x0, cf0 <ctf_link_one_input_archive_member+0x50>
     da4:	ldr	x1, [x19, #8]
     da8:	bl	0 <ctf_str_append>
     dac:	cbz	x0, db8 <ctf_link_one_input_archive_member+0x118>
     db0:	str	x0, [x19, #40]
     db4:	b	cf0 <ctf_link_one_input_archive_member+0x50>
     db8:	ldr	x0, [x19, #40]
     dbc:	bl	0 <free>
     dc0:	b	cf0 <ctf_link_one_input_archive_member+0x50>

0000000000000dc4 <empty_link_type_mapping>:
     dc4:	stp	x29, x30, [sp, #-16]!
     dc8:	ldr	x0, [x1, #664]
     dcc:	mov	x29, sp
     dd0:	cbz	x0, dd8 <empty_link_type_mapping+0x14>
     dd4:	bl	0 <ctf_dynhash_empty>
     dd8:	ldp	x29, x30, [sp], #16
     ddc:	ret

0000000000000de0 <ctf_link_one_type>:
     de0:	stp	x29, x30, [sp, #-64]!
     de4:	stp	x22, x21, [sp, #32]
     de8:	stp	x20, x19, [sp, #48]
     dec:	ldr	w8, [x2, #52]
     df0:	mov	x19, x2
     df4:	str	x23, [sp, #16]
     df8:	mov	x29, sp
     dfc:	cbz	w8, e1c <ctf_link_one_type+0x3c>
     e00:	adrp	x0, 0 <ctf_add_type_mapping>
     e04:	add	x0, x0, #0x0
     e08:	bl	0 <ctf_dprintf>
     e0c:	ldr	x0, [x19]
     e10:	mov	w1, #0x419                 	// #1049
     e14:	bl	0 <ctf_set_errno>
     e18:	b	ecc <ctf_link_one_type+0xec>
     e1c:	ldr	w8, [x19, #56]
     e20:	mov	x20, x0
     e24:	cbz	w8, ea8 <ctf_link_one_type+0xc8>
     e28:	ldp	x0, x1, [x19]
     e2c:	ldr	x2, [x19, #32]
     e30:	bl	3a8 <ctf_create_per_cu>
     e34:	cbz	x0, ec8 <ctf_link_one_type+0xe8>
     e38:	ldr	x1, [x19, #16]
     e3c:	mov	x2, x20
     e40:	mov	x21, x0
     e44:	bl	0 <ctf_add_type>
     e48:	cmn	x0, #0x1
     e4c:	b.ne	ec0 <ctf_link_one_type+0xe0>  // b.any
     e50:	mov	x0, x21
     e54:	bl	0 <ctf_errno>
     e58:	cmp	w0, #0x41b
     e5c:	b.eq	ec0 <ctf_link_one_type+0xe0>  // b.none
     e60:	ldr	x22, [x19, #40]
     e64:	ldr	x23, [x19, #8]
     e68:	mov	w21, w0
     e6c:	bl	0 <ctf_errmsg>
     e70:	mov	x5, x0
     e74:	adrp	x0, 0 <ctf_add_type_mapping>
     e78:	add	x0, x0, #0x0
     e7c:	mov	x1, x20
     e80:	mov	x2, x22
     e84:	mov	x3, x23
     e88:	mov	x4, x22
     e8c:	bl	0 <ctf_dprintf>
     e90:	cmp	w21, #0x411
     e94:	b.ne	ec0 <ctf_link_one_type+0xe0>  // b.any
     e98:	ldr	x0, [x19]
     e9c:	mov	w1, wzr
     ea0:	bl	0 <ctf_set_errno>
     ea4:	b	ec0 <ctf_link_one_type+0xe0>
     ea8:	ldr	x0, [x19]
     eac:	ldr	x1, [x19, #16]
     eb0:	mov	x2, x20
     eb4:	bl	0 <ctf_add_type>
     eb8:	cmn	x0, #0x1
     ebc:	b.eq	ee0 <ctf_link_one_type+0x100>  // b.none
     ec0:	mov	w0, wzr
     ec4:	b	ecc <ctf_link_one_type+0xec>
     ec8:	mov	w0, #0xffffffff            	// #-1
     ecc:	ldp	x20, x19, [sp, #48]
     ed0:	ldp	x22, x21, [sp, #32]
     ed4:	ldr	x23, [sp, #16]
     ed8:	ldp	x29, x30, [sp], #64
     edc:	ret
     ee0:	ldr	x0, [x19]
     ee4:	bl	0 <ctf_errno>
     ee8:	cmp	w0, #0x411
     eec:	b.eq	f24 <ctf_link_one_type+0x144>  // b.none
     ef0:	cmp	w0, #0x41b
     ef4:	b.eq	ec0 <ctf_link_one_type+0xe0>  // b.none
     ef8:	ldr	x21, [x19, #40]
     efc:	ldr	x19, [x19, #8]
     f00:	bl	0 <ctf_errmsg>
     f04:	mov	x4, x0
     f08:	adrp	x0, 0 <ctf_add_type_mapping>
     f0c:	add	x0, x0, #0x0
     f10:	mov	x1, x20
     f14:	mov	x2, x21
     f18:	mov	x3, x19
     f1c:	bl	0 <ctf_dprintf>
     f20:	b	ec0 <ctf_link_one_type+0xe0>
     f24:	ldr	x0, [x19]
     f28:	mov	w1, wzr
     f2c:	bl	0 <ctf_set_errno>
     f30:	b	e28 <ctf_link_one_type+0x48>

0000000000000f34 <ctf_link_one_variable>:
     f34:	sub	sp, sp, #0x50
     f38:	stp	x29, x30, [sp, #16]
     f3c:	stp	x22, x21, [sp, #48]
     f40:	stp	x20, x19, [sp, #64]
     f44:	ldr	x8, [x2]
     f48:	add	x29, sp, #0x10
     f4c:	mov	x19, x2
     f50:	mov	x20, x0
     f54:	str	x8, [x29, #24]
     f58:	ldr	x8, [x2, #16]
     f5c:	add	x2, x29, #0x18
     f60:	str	x23, [sp, #32]
     f64:	mov	x21, x1
     f68:	mov	x0, x8
     f6c:	bl	c8 <ctf_type_mapping>
     f70:	mov	x22, x0
     f74:	cbz	x0, f88 <ctf_link_one_variable+0x54>
     f78:	ldr	x23, [x29, #24]
     f7c:	ldr	x8, [x19]
     f80:	cmp	x23, x8
     f84:	b.eq	fe0 <ctf_link_one_variable+0xac>  // b.none
     f88:	ldp	x0, x1, [x19]
     f8c:	ldr	x2, [x19, #32]
     f90:	bl	3a8 <ctf_create_per_cu>
     f94:	cbz	x0, fd8 <ctf_link_one_variable+0xa4>
     f98:	mov	x23, x0
     f9c:	cbnz	x22, fbc <ctf_link_one_variable+0x88>
     fa0:	str	x23, [x29, #24]
     fa4:	ldr	x0, [x19, #16]
     fa8:	add	x2, x29, #0x18
     fac:	mov	x1, x21
     fb0:	bl	c8 <ctf_type_mapping>
     fb4:	mov	x22, x0
     fb8:	cbz	x0, 1040 <ctf_link_one_variable+0x10c>
     fbc:	add	x3, sp, #0x8
     fc0:	mov	x0, x20
     fc4:	mov	x1, x23
     fc8:	mov	x2, x22
     fcc:	bl	1074 <check_variable>
     fd0:	cbnz	w0, ff8 <ctf_link_one_variable+0xc4>
     fd4:	b	105c <ctf_link_one_variable+0x128>
     fd8:	mov	w0, #0xffffffff            	// #-1
     fdc:	b	105c <ctf_link_one_variable+0x128>
     fe0:	add	x3, sp, #0x8
     fe4:	mov	x0, x20
     fe8:	mov	x1, x23
     fec:	mov	x2, x22
     ff0:	bl	1074 <check_variable>
     ff4:	cbz	w0, 1028 <ctf_link_one_variable+0xf4>
     ff8:	mov	x0, x23
     ffc:	mov	x1, x20
    1000:	mov	x2, x22
    1004:	bl	0 <ctf_add_variable>
    1008:	tbz	w0, #31, 1058 <ctf_link_one_variable+0x124>
    100c:	ldr	x19, [x19]
    1010:	mov	x0, x23
    1014:	bl	0 <ctf_errno>
    1018:	mov	w1, w0
    101c:	mov	x0, x19
    1020:	bl	0 <ctf_set_errno>
    1024:	b	105c <ctf_link_one_variable+0x128>
    1028:	ldr	x8, [sp, #8]
    102c:	cbz	x8, f88 <ctf_link_one_variable+0x54>
    1030:	ldr	x8, [x8, #24]
    1034:	cmp	x8, x21
    1038:	b.ne	f88 <ctf_link_one_variable+0x54>  // b.any
    103c:	b	1058 <ctf_link_one_variable+0x124>
    1040:	ldr	x3, [x19, #8]
    1044:	adrp	x0, 0 <ctf_add_type_mapping>
    1048:	add	x0, x0, #0x0
    104c:	mov	x1, x21
    1050:	mov	x2, x20
    1054:	bl	0 <ctf_dprintf>
    1058:	mov	w0, wzr
    105c:	ldp	x20, x19, [sp, #64]
    1060:	ldp	x22, x21, [sp, #48]
    1064:	ldr	x23, [sp, #32]
    1068:	ldp	x29, x30, [sp, #16]
    106c:	add	sp, sp, #0x50
    1070:	ret

0000000000001074 <check_variable>:
    1074:	stp	x29, x30, [sp, #-48]!
    1078:	stp	x20, x19, [sp, #32]
    107c:	ldr	x8, [x1, #592]
    1080:	mov	x19, x0
    1084:	mov	x1, x19
    1088:	str	x21, [sp, #16]
    108c:	mov	x0, x8
    1090:	mov	x29, sp
    1094:	mov	x21, x3
    1098:	mov	x20, x2
    109c:	bl	0 <ctf_dynhash_lookup>
    10a0:	str	x0, [x21]
    10a4:	cbz	x0, 10cc <check_variable+0x58>
    10a8:	ldr	x8, [x0, #24]
    10ac:	cmp	x8, x20
    10b0:	b.eq	10c4 <check_variable+0x50>  // b.none
    10b4:	adrp	x0, 0 <ctf_add_type_mapping>
    10b8:	add	x0, x0, #0x0
    10bc:	mov	x1, x19
    10c0:	bl	0 <ctf_dprintf>
    10c4:	mov	w0, wzr
    10c8:	b	10d0 <check_variable+0x5c>
    10cc:	mov	w0, #0x1                   	// #1
    10d0:	ldp	x20, x19, [sp, #32]
    10d4:	ldr	x21, [sp, #16]
    10d8:	ldp	x29, x30, [sp], #48
    10dc:	ret

ctf-lookup.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_lookup_by_name>:
   0:	sub	sp, sp, #0x70
   4:	stp	x20, x19, [sp, #96]
   8:	mov	x19, x0
   c:	stp	x29, x30, [sp, #16]
  10:	stp	x28, x27, [sp, #32]
  14:	stp	x26, x25, [sp, #48]
  18:	stp	x24, x23, [sp, #64]
  1c:	stp	x22, x21, [sp, #80]
  20:	add	x29, sp, #0x10
  24:	cbz	x1, 224 <ctf_lookup_by_name+0x224>
  28:	mov	x0, x1
  2c:	mov	x28, x1
  30:	bl	0 <strlen>
  34:	ldrb	w8, [x28]
  38:	cbz	w8, 22c <ctf_lookup_by_name+0x22c>
  3c:	add	x26, x28, x0
  40:	bl	0 <__ctype_b_loc>
  44:	mov	x21, x0
  48:	mov	x23, xzr
  4c:	add	x8, x19, #0xd8
  50:	stp	x28, x8, [sp]
  54:	b	68 <ctf_lookup_by_name+0x68>
  58:	mov	w23, w8
  5c:	mov	x28, x25
  60:	ldrb	w8, [x28]
  64:	cbz	w8, 230 <ctf_lookup_by_name+0x230>
  68:	ldr	x22, [x21]
  6c:	sub	x24, x28, #0x1
  70:	mov	x20, x24
  74:	ldrb	w27, [x24, #1]!
  78:	ldrh	w8, [x22, x27, lsl #1]
  7c:	tbnz	w8, #13, 70 <ctf_lookup_by_name+0x70>
  80:	cmp	x26, x24
  84:	b.eq	238 <ctf_lookup_by_name+0x238>  // b.none
  88:	add	x25, x24, #0x1
  8c:	adrp	x1, 0 <ctf_lookup_by_name>
  90:	mov	x0, x25
  94:	add	x1, x1, #0x0
  98:	bl	0 <strpbrk>
  9c:	cmp	x0, #0x0
  a0:	csel	x28, x26, x0, eq  // eq = none
  a4:	cmp	w27, #0x2a
  a8:	b.ne	100 <ctf_lookup_by_name+0x100>  // b.any
  ac:	ldr	w8, [x19, #544]
  b0:	ldr	x9, [x19, #448]
  b4:	and	x8, x23, x8
  b8:	ldr	w8, [x9, x8, lsl #2]
  bc:	cbnz	w8, e8 <ctf_lookup_by_name+0xe8>
  c0:	mov	x0, x19
  c4:	mov	x1, x23
  c8:	bl	0 <ctf_type_resolve_unsliced>
  cc:	cmn	x0, #0x1
  d0:	b.eq	1f4 <ctf_lookup_by_name+0x1f4>  // b.none
  d4:	ldr	w8, [x19, #544]
  d8:	ldr	x9, [x19, #448]
  dc:	and	x8, x0, x8
  e0:	ldr	w8, [x9, x8, lsl #2]
  e4:	cbz	w8, 1f4 <ctf_lookup_by_name+0x1f4>
  e8:	ldrb	w9, [x19, #552]
  ec:	tbz	w9, #0, 58 <ctf_lookup_by_name+0x58>
  f0:	ldr	w9, [x19, #544]
  f4:	add	w9, w9, #0x1
  f8:	orr	w8, w9, w8
  fc:	b	58 <ctf_lookup_by_name+0x58>
 100:	sub	x25, x28, x24
 104:	mov	x0, x24
 108:	mov	x1, x25
 10c:	bl	28c <isqualifier>
 110:	cbnz	w0, 60 <ctf_lookup_by_name+0x60>
 114:	ldr	x27, [sp, #8]
 118:	ldr	x1, [x27]
 11c:	cbnz	x1, 138 <ctf_lookup_by_name+0x138>
 120:	b	1ec <ctf_lookup_by_name+0x1ec>
 124:	ldr	x8, [x27, #8]
 128:	cmp	x25, x8
 12c:	b.cs	154 <ctf_lookup_by_name+0x154>  // b.hs, b.nlast
 130:	ldr	x1, [x27, #24]!
 134:	cbz	x1, 1ec <ctf_lookup_by_name+0x1ec>
 138:	ldrb	w8, [x1]
 13c:	cbz	w8, 124 <ctf_lookup_by_name+0x124>
 140:	mov	x0, x24
 144:	mov	x2, x25
 148:	bl	0 <strncmp>
 14c:	cbnz	w0, 130 <ctf_lookup_by_name+0x130>
 150:	b	124 <ctf_lookup_by_name+0x124>
 154:	add	x23, x20, x8
 158:	ldrb	w8, [x23, #1]!
 15c:	ldrh	w8, [x22, x8, lsl #1]
 160:	tbnz	w8, #13, 158 <ctf_lookup_by_name+0x158>
 164:	mov	w1, #0x2a                  	// #42
 168:	mov	x0, x23
 16c:	bl	0 <strchr>
 170:	cmp	x0, #0x0
 174:	csel	x8, x26, x0, eq  // eq = none
 178:	add	x28, x8, #0x1
 17c:	ldurb	w8, [x28, #-2]
 180:	sub	x28, x28, #0x1
 184:	ldrh	w8, [x22, x8, lsl #1]
 188:	tbnz	w8, #13, 17c <ctf_lookup_by_name+0x17c>
 18c:	ldr	x8, [x19, #712]
 190:	ldr	x0, [x19, #704]
 194:	sub	x24, x28, x23
 198:	add	x9, x24, #0x1
 19c:	cmp	x8, x9
 1a0:	b.cs	1c0 <ctf_lookup_by_name+0x1c0>  // b.hs, b.nlast
 1a4:	bl	0 <free>
 1a8:	mov	x0, x23
 1ac:	mov	x1, x24
 1b0:	bl	0 <xstrndup>
 1b4:	str	x0, [x19, #704]
 1b8:	cbnz	x0, 1d4 <ctf_lookup_by_name+0x1d4>
 1bc:	b	27c <ctf_lookup_by_name+0x27c>
 1c0:	mov	x1, x23
 1c4:	mov	x2, x24
 1c8:	bl	0 <memcpy>
 1cc:	ldr	x8, [x19, #704]
 1d0:	strb	wzr, [x8, x24]
 1d4:	ldr	x1, [x27, #16]
 1d8:	ldr	x2, [x19, #704]
 1dc:	mov	x0, x19
 1e0:	bl	0 <ctf_lookup_by_rawhash>
 1e4:	mov	x23, x0
 1e8:	cbz	x0, 1f4 <ctf_lookup_by_name+0x1f4>
 1ec:	ldr	x8, [x27]
 1f0:	cbnz	x8, 60 <ctf_lookup_by_name+0x60>
 1f4:	mov	w1, #0x402                 	// #1026
 1f8:	mov	x0, x19
 1fc:	bl	0 <ctf_set_errno>
 200:	ldr	x0, [x19, #512]
 204:	cbz	x0, 21c <ctf_lookup_by_name+0x21c>
 208:	ldr	x1, [sp]
 20c:	bl	0 <ctf_lookup_by_name>
 210:	mov	x23, x0
 214:	cmn	x0, #0x1
 218:	b.ne	258 <ctf_lookup_by_name+0x258>  // b.any
 21c:	mov	x23, #0xffffffffffffffff    	// #-1
 220:	b	258 <ctf_lookup_by_name+0x258>
 224:	mov	w1, #0x16                  	// #22
 228:	b	24c <ctf_lookup_by_name+0x24c>
 22c:	mov	x23, xzr
 230:	cbnz	x23, 240 <ctf_lookup_by_name+0x240>
 234:	b	248 <ctf_lookup_by_name+0x248>
 238:	mov	x28, x24
 23c:	cbz	x23, 248 <ctf_lookup_by_name+0x248>
 240:	ldrb	w8, [x28]
 244:	cbz	w8, 258 <ctf_lookup_by_name+0x258>
 248:	mov	w1, #0x403                 	// #1027
 24c:	mov	x0, x19
 250:	bl	0 <ctf_set_errno>
 254:	mov	x23, x0
 258:	mov	x0, x23
 25c:	ldp	x20, x19, [sp, #96]
 260:	ldp	x22, x21, [sp, #80]
 264:	ldp	x24, x23, [sp, #64]
 268:	ldp	x26, x25, [sp, #48]
 26c:	ldp	x28, x27, [sp, #32]
 270:	ldp	x29, x30, [sp, #16]
 274:	add	sp, sp, #0x70
 278:	ret
 27c:	mov	w1, #0xc                   	// #12
 280:	mov	x0, x19
 284:	bl	0 <ctf_set_errno>
 288:	b	21c <ctf_lookup_by_name+0x21c>

000000000000028c <isqualifier>:
 28c:	stp	x29, x30, [sp, #-16]!
 290:	add	x9, x1, x0
 294:	ldurb	w9, [x9, #-1]
 298:	mov	x8, x0
 29c:	mov	w0, wzr
 2a0:	mov	x29, sp
 2a4:	add	x9, x9, w1, sxtw
 2a8:	cmp	w9, #0x69
 2ac:	b.lt	2ec <isqualifier+0x60>  // b.tstop
 2b0:	sub	x9, x9, #0x69
 2b4:	cmp	w9, #0x14
 2b8:	b.hi	2ec <isqualifier+0x60>  // b.pmore
 2bc:	adrp	x10, 0 <ctf_lookup_by_name>
 2c0:	add	x10, x10, #0x0
 2c4:	add	x11, x10, x9, lsl #4
 2c8:	ldr	x2, [x11, #8]
 2cc:	cmp	x2, x1
 2d0:	b.ne	2f4 <isqualifier+0x68>  // b.any
 2d4:	lsl	x9, x9, #4
 2d8:	ldr	x0, [x10, x9]
 2dc:	mov	x1, x8
 2e0:	bl	0 <strncmp>
 2e4:	cmp	w0, #0x0
 2e8:	cset	w0, eq  // eq = none
 2ec:	ldp	x29, x30, [sp], #16
 2f0:	ret
 2f4:	mov	w0, wzr
 2f8:	ldp	x29, x30, [sp], #16
 2fc:	ret

0000000000000300 <ctf_lookup_variable>:
 300:	sub	sp, sp, #0x30
 304:	stp	x29, x30, [sp, #16]
 308:	stp	x20, x19, [sp, #32]
 30c:	stp	x0, x1, [sp]
 310:	mov	x19, x1
 314:	ldp	x1, x2, [x0, #464]
 318:	adrp	x4, 0 <ctf_lookup_by_name>
 31c:	mov	x20, x0
 320:	add	x4, x4, #0x0
 324:	mov	x0, sp
 328:	mov	w3, #0x8                   	// #8
 32c:	add	x29, sp, #0x10
 330:	bl	0 <bsearch>
 334:	cbz	x0, 340 <ctf_lookup_variable+0x40>
 338:	ldr	w0, [x0, #4]
 33c:	b	360 <ctf_lookup_variable+0x60>
 340:	ldr	x0, [x20, #512]
 344:	cbz	x0, 354 <ctf_lookup_variable+0x54>
 348:	mov	x1, x19
 34c:	bl	300 <ctf_lookup_variable>
 350:	b	360 <ctf_lookup_variable+0x60>
 354:	mov	w1, #0x407                 	// #1031
 358:	mov	x0, x20
 35c:	bl	0 <ctf_set_errno>
 360:	ldp	x20, x19, [sp, #32]
 364:	ldp	x29, x30, [sp, #16]
 368:	add	sp, sp, #0x30
 36c:	ret

0000000000000370 <ctf_lookup_var>:
 370:	stp	x29, x30, [sp, #-32]!
 374:	str	x19, [sp, #16]
 378:	ldp	x0, x19, [x0]
 37c:	ldr	w1, [x1]
 380:	mov	x29, sp
 384:	bl	0 <ctf_strptr>
 388:	mov	x1, x0
 38c:	mov	x0, x19
 390:	bl	0 <strcmp>
 394:	ldr	x19, [sp, #16]
 398:	ldp	x29, x30, [sp], #32
 39c:	ret

00000000000003a0 <ctf_lookup_symbol_name>:
 3a0:	sub	sp, sp, #0x40
 3a4:	stp	x29, x30, [sp, #32]
 3a8:	ldr	x8, [x0, #64]
 3ac:	str	x19, [sp, #48]
 3b0:	mov	x19, x0
 3b4:	add	x29, sp, #0x20
 3b8:	cbz	x8, 3e4 <ctf_lookup_symbol_name+0x44>
 3bc:	ldr	x9, [x19, #432]
 3c0:	cmp	x9, x1
 3c4:	b.ls	3ec <ctf_lookup_symbol_name+0x4c>  // b.plast
 3c8:	ldr	x9, [x19, #80]
 3cc:	cmp	x9, #0x10
 3d0:	b.ne	410 <ctf_lookup_symbol_name+0x70>  // b.any
 3d4:	add	x0, x8, x1, lsl #4
 3d8:	add	x1, sp, #0x8
 3dc:	bl	0 <ctf_sym_to_elf64>
 3e0:	b	418 <ctf_lookup_symbol_name+0x78>
 3e4:	mov	w1, #0x3f2                 	// #1010
 3e8:	b	3f0 <ctf_lookup_symbol_name+0x50>
 3ec:	mov	w1, #0x16                  	// #22
 3f0:	mov	x0, x19
 3f4:	bl	0 <ctf_set_errno>
 3f8:	adrp	x0, 0 <_CTF_NULLSTR>
 3fc:	add	x0, x0, #0x0
 400:	ldr	x19, [sp, #48]
 404:	ldp	x29, x30, [sp, #32]
 408:	add	sp, sp, #0x40
 40c:	ret
 410:	mov	w9, #0x18                  	// #24
 414:	madd	x0, x1, x9, x8
 418:	ldr	w8, [x0]
 41c:	ldr	x9, [x19, #360]
 420:	cmp	x9, x8
 424:	b.ls	3f8 <ctf_lookup_symbol_name+0x58>  // b.plast
 428:	ldr	x9, [x19, #352]
 42c:	add	x0, x9, x8
 430:	b	400 <ctf_lookup_symbol_name+0x60>

0000000000000434 <ctf_lookup_by_symbol>:
 434:	stp	x29, x30, [sp, #-32]!
 438:	stp	x20, x19, [sp, #16]
 43c:	ldr	x8, [x0, #64]
 440:	mov	x19, x0
 444:	mov	x29, sp
 448:	cbz	x8, 484 <ctf_lookup_by_symbol+0x50>
 44c:	ldr	x9, [x19, #432]
 450:	mov	x20, x1
 454:	cmp	x9, x1
 458:	b.ls	48c <ctf_lookup_by_symbol+0x58>  // b.plast
 45c:	ldr	x9, [x19, #80]
 460:	cmp	x9, #0x10
 464:	b.ne	494 <ctf_lookup_by_symbol+0x60>  // b.any
 468:	add	x8, x8, x20, lsl #4
 46c:	ldrb	w8, [x8, #12]
 470:	and	w8, w8, #0xf
 474:	cmp	w8, #0x1
 478:	b.ne	4b4 <ctf_lookup_by_symbol+0x80>  // b.any
 47c:	tbnz	w8, #0, 4e0 <ctf_lookup_by_symbol+0xac>
 480:	b	508 <ctf_lookup_by_symbol+0xd4>
 484:	mov	w1, #0x3f2                 	// #1010
 488:	b	500 <ctf_lookup_by_symbol+0xcc>
 48c:	mov	w1, #0x16                  	// #22
 490:	b	500 <ctf_lookup_by_symbol+0xcc>
 494:	mov	w9, #0x18                  	// #24
 498:	madd	x8, x20, x9, x8
 49c:	ldrb	w8, [x8, #4]
 4a0:	and	w8, w8, #0xf
 4a4:	cmp	w8, #0x1
 4a8:	b.ne	4cc <ctf_lookup_by_symbol+0x98>  // b.any
 4ac:	cbnz	w8, 4e0 <ctf_lookup_by_symbol+0xac>
 4b0:	b	508 <ctf_lookup_by_symbol+0xd4>
 4b4:	mov	w1, #0x406                 	// #1030
 4b8:	mov	x0, x19
 4bc:	bl	0 <ctf_set_errno>
 4c0:	mov	w8, wzr
 4c4:	tbnz	wzr, #0, 4e0 <ctf_lookup_by_symbol+0xac>
 4c8:	b	508 <ctf_lookup_by_symbol+0xd4>
 4cc:	mov	w1, #0x406                 	// #1030
 4d0:	mov	x0, x19
 4d4:	bl	0 <ctf_set_errno>
 4d8:	mov	w8, wzr
 4dc:	cbz	w8, 508 <ctf_lookup_by_symbol+0xd4>
 4e0:	ldr	x8, [x19, #424]
 4e4:	ldr	w8, [x8, x20, lsl #2]
 4e8:	cmn	w8, #0x1
 4ec:	b.eq	4fc <ctf_lookup_by_symbol+0xc8>  // b.none
 4f0:	ldr	x9, [x19, #408]
 4f4:	ldr	w0, [x9, x8]
 4f8:	cbnz	w0, 508 <ctf_lookup_by_symbol+0xd4>
 4fc:	mov	w1, #0x407                 	// #1031
 500:	mov	x0, x19
 504:	bl	0 <ctf_set_errno>
 508:	ldp	x20, x19, [sp, #16]
 50c:	ldp	x29, x30, [sp], #32
 510:	ret

0000000000000514 <ctf_lookup_by_id>:
 514:	stp	x29, x30, [sp, #-32]!
 518:	stp	x20, x19, [sp, #16]
 51c:	mov	x19, x0
 520:	ldr	x0, [x0]
 524:	mov	x29, sp
 528:	ldrb	w8, [x0, #552]
 52c:	mov	x20, x0
 530:	tbz	w8, #0, 54c <ctf_lookup_by_id+0x38>
 534:	ldr	w8, [x0, #544]
 538:	mov	x20, x0
 53c:	cmp	x8, x1
 540:	b.cc	54c <ctf_lookup_by_id+0x38>  // b.lo, b.ul, b.last
 544:	ldr	x20, [x0, #512]
 548:	cbz	x20, 5b8 <ctf_lookup_by_id+0xa4>
 54c:	ldrb	w8, [x20, #552]
 550:	tbnz	w8, #1, 584 <ctf_lookup_by_id+0x70>
 554:	ldr	w8, [x20, #544]
 558:	ands	x8, x8, x1
 55c:	b.eq	5a0 <ctf_lookup_by_id+0x8c>  // b.none
 560:	ldr	x9, [x20, #480]
 564:	cmp	x8, x9
 568:	b.hi	5a0 <ctf_lookup_by_id+0x8c>  // b.pmore
 56c:	str	x20, [x19]
 570:	ldr	x9, [x20, #440]
 574:	ldr	x10, [x20, #408]
 578:	ldr	w8, [x9, x8, lsl #2]
 57c:	add	x0, x10, x8
 580:	b	5ac <ctf_lookup_by_id+0x98>
 584:	mov	x0, x20
 588:	bl	0 <ctf_dynamic_type>
 58c:	cbz	x0, 59c <ctf_lookup_by_id+0x88>
 590:	str	x20, [x19]
 594:	add	x0, x0, #0x18
 598:	b	5ac <ctf_lookup_by_id+0x98>
 59c:	ldr	x0, [x19]
 5a0:	mov	w1, #0x3fa                 	// #1018
 5a4:	bl	0 <ctf_set_errno>
 5a8:	mov	x0, xzr
 5ac:	ldp	x20, x19, [sp, #16]
 5b0:	ldp	x29, x30, [sp], #32
 5b4:	ret
 5b8:	mov	w1, #0x3f3                 	// #1011
 5bc:	b	5a4 <ctf_lookup_by_id+0x90>

00000000000005c0 <ctf_func_info>:
 5c0:	stp	x29, x30, [sp, #-64]!
 5c4:	stp	x22, x21, [sp, #32]
 5c8:	stp	x20, x19, [sp, #48]
 5cc:	ldr	x8, [x0, #64]
 5d0:	mov	x19, x0
 5d4:	str	x23, [sp, #16]
 5d8:	mov	x29, sp
 5dc:	cbz	x8, 620 <ctf_func_info+0x60>
 5e0:	ldr	x9, [x19, #432]
 5e4:	mov	x21, x1
 5e8:	cmp	x9, x1
 5ec:	b.ls	628 <ctf_func_info+0x68>  // b.plast
 5f0:	ldr	x9, [x19, #80]
 5f4:	mov	x20, x2
 5f8:	cmp	x9, #0x10
 5fc:	b.ne	630 <ctf_func_info+0x70>  // b.any
 600:	add	x8, x8, x21, lsl #4
 604:	ldrb	w8, [x8, #12]
 608:	and	w8, w8, #0xf
 60c:	cmp	w8, #0x2
 610:	b.ne	654 <ctf_func_info+0x94>  // b.any
 614:	mov	w8, #0x1                   	// #1
 618:	tbnz	w8, #0, 680 <ctf_func_info+0xc0>
 61c:	b	70c <ctf_func_info+0x14c>
 620:	mov	w1, #0x3f2                 	// #1010
 624:	b	704 <ctf_func_info+0x144>
 628:	mov	w1, #0x16                  	// #22
 62c:	b	704 <ctf_func_info+0x144>
 630:	mov	w9, #0x18                  	// #24
 634:	madd	x8, x21, x9, x8
 638:	ldrb	w8, [x8, #4]
 63c:	and	w8, w8, #0xf
 640:	cmp	w8, #0x2
 644:	b.ne	66c <ctf_func_info+0xac>  // b.any
 648:	mov	w8, #0x1                   	// #1
 64c:	cbnz	w8, 680 <ctf_func_info+0xc0>
 650:	b	70c <ctf_func_info+0x14c>
 654:	mov	w1, #0x404                 	// #1028
 658:	mov	x0, x19
 65c:	bl	0 <ctf_set_errno>
 660:	mov	w8, wzr
 664:	tbnz	wzr, #0, 680 <ctf_func_info+0xc0>
 668:	b	70c <ctf_func_info+0x14c>
 66c:	mov	w1, #0x404                 	// #1028
 670:	mov	x0, x19
 674:	bl	0 <ctf_set_errno>
 678:	mov	w8, wzr
 67c:	cbz	w8, 70c <ctf_func_info+0x14c>
 680:	ldr	x8, [x19, #424]
 684:	ldr	w8, [x8, x21, lsl #2]
 688:	cmn	w8, #0x1
 68c:	b.eq	6f8 <ctf_func_info+0x138>  // b.none
 690:	ldr	x9, [x19, #408]
 694:	ldr	x10, [x19]
 698:	add	x23, x9, x8
 69c:	ldr	w22, [x23]
 6a0:	ldr	x8, [x10]
 6a4:	mov	w0, w22
 6a8:	blr	x8
 6ac:	ldr	x8, [x19]
 6b0:	mov	w21, w0
 6b4:	mov	w0, w22
 6b8:	ldr	x8, [x8, #16]
 6bc:	blr	x8
 6c0:	orr	w8, w0, w21
 6c4:	cbz	w8, 6f8 <ctf_func_info+0x138>
 6c8:	cmp	w21, #0x5
 6cc:	b.ne	700 <ctf_func_info+0x140>  // b.any
 6d0:	ldr	w8, [x23, #4]
 6d4:	stp	w0, wzr, [x20, #8]
 6d8:	str	x8, [x20]
 6dc:	cbz	w0, 70c <ctf_func_info+0x14c>
 6e0:	sub	w8, w0, #0x1
 6e4:	add	x9, x23, w8, uxtw #2
 6e8:	ldr	w9, [x9, #8]
 6ec:	cbz	w9, 720 <ctf_func_info+0x160>
 6f0:	mov	w0, wzr
 6f4:	b	70c <ctf_func_info+0x14c>
 6f8:	mov	w1, #0x405                 	// #1029
 6fc:	b	704 <ctf_func_info+0x144>
 700:	mov	w1, #0x3ef                 	// #1007
 704:	mov	x0, x19
 708:	bl	0 <ctf_set_errno>
 70c:	ldp	x20, x19, [sp, #48]
 710:	ldp	x22, x21, [sp, #32]
 714:	ldr	x23, [sp, #16]
 718:	ldp	x29, x30, [sp], #64
 71c:	ret
 720:	mov	w0, wzr
 724:	mov	w9, #0x1                   	// #1
 728:	stp	w8, w9, [x20, #8]
 72c:	b	70c <ctf_func_info+0x14c>

0000000000000730 <ctf_func_args>:
 730:	sub	sp, sp, #0x40
 734:	stp	x22, x21, [sp, #32]
 738:	mov	w22, w2
 73c:	mov	x2, sp
 740:	stp	x29, x30, [sp, #16]
 744:	stp	x20, x19, [sp, #48]
 748:	add	x29, sp, #0x10
 74c:	mov	x19, x3
 750:	mov	x20, x1
 754:	mov	x21, x0
 758:	bl	5c0 <ctf_func_info>
 75c:	tbnz	w0, #31, 79c <ctf_func_args+0x6c>
 760:	ldr	w8, [sp, #8]
 764:	cmp	w8, w22
 768:	csel	w8, w22, w8, hi  // hi = pmore
 76c:	cbz	w8, 794 <ctf_func_args+0x64>
 770:	ldr	x9, [x21, #424]
 774:	ldr	x10, [x21, #408]
 778:	ldr	w9, [x9, x20, lsl #2]
 77c:	add	x9, x10, x9
 780:	add	x9, x9, #0x8
 784:	ldr	w10, [x9], #4
 788:	subs	w8, w8, #0x1
 78c:	str	x10, [x19], #8
 790:	b.ne	784 <ctf_func_args+0x54>  // b.any
 794:	mov	w0, wzr
 798:	b	7a0 <ctf_func_args+0x70>
 79c:	mov	w0, #0xffffffff            	// #-1
 7a0:	ldp	x20, x19, [sp, #48]
 7a4:	ldp	x22, x21, [sp, #32]
 7a8:	ldp	x29, x30, [sp, #16]
 7ac:	add	sp, sp, #0x40
 7b0:	ret

ctf-open.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_set_ctl_hashes>:
       0:	adrp	x8, 0 <ctf_set_ctl_hashes>
       4:	add	x8, x8, #0x0
       8:	mov	w9, #0x6                   	// #6
       c:	stp	x8, x9, [x0, #216]
      10:	adrp	x8, 0 <ctf_set_ctl_hashes>
      14:	adrp	x11, 0 <ctf_set_ctl_hashes>
      18:	add	x8, x8, #0x0
      1c:	mov	w9, #0x4                   	// #4
      20:	add	x10, x0, #0x98
      24:	add	x11, x11, #0x0
      28:	stp	x8, x9, [x0, #264]
      2c:	adrp	x8, 31 <ctf_set_ctl_hashes+0x31>
      30:	stp	x10, x11, [x0, #232]
      34:	add	x10, x0, #0xb8
      38:	add	x8, x8, #0x0
      3c:	mov	w12, #0x5                   	// #5
      40:	add	x13, x0, #0xa8
      44:	stp	x10, x8, [x0, #280]
      48:	add	x8, x0, #0xc8
      4c:	stp	x12, x13, [x0, #248]
      50:	stp	xzr, xzr, [x0, #320]
      54:	stp	xzr, x8, [x0, #296]
      58:	str	xzr, [x0, #312]
      5c:	ret

0000000000000060 <ctf_simple_open>:
      60:	sub	sp, sp, #0x20
      64:	str	x7, [sp, #8]
      68:	mov	x7, xzr
      6c:	stp	x29, x30, [sp, #16]
      70:	add	x29, sp, #0x10
      74:	str	wzr, [sp]
      78:	bl	88 <ctf_simple_open_internal>
      7c:	ldp	x29, x30, [sp, #16]
      80:	add	sp, sp, #0x20
      84:	ret

0000000000000088 <ctf_simple_open_internal>:
      88:	sub	sp, sp, #0x80
      8c:	adrp	x10, 2c <ctf_set_ctl_hashes+0x2c>
      90:	mov	x9, x4
      94:	add	x10, x10, #0x0
      98:	stp	x29, x30, [sp, #112]
      9c:	add	x29, sp, #0x70
      a0:	cbz	x0, bc <ctf_simple_open_internal+0x34>
      a4:	ldur	q0, [x29, #-16]
      a8:	mov	w8, #0x1                   	// #1
      ac:	stur	q0, [x29, #-40]
      b0:	stp	x10, x0, [x29, #-48]
      b4:	sub	x0, x29, #0x30
      b8:	stp	x1, x8, [x29, #-32]
      bc:	ldr	x8, [x29, #24]
      c0:	ldr	w4, [x29, #16]
      c4:	cbz	x2, fc <ctf_simple_open_internal+0x74>
      c8:	ldur	q0, [x29, #-16]
      cc:	add	x1, sp, #0x20
      d0:	stur	q0, [sp, #40]
      d4:	stp	x10, x2, [sp, #32]
      d8:	stp	x3, x9, [sp, #48]
      dc:	cbz	x5, 104 <ctf_simple_open_internal+0x7c>
      e0:	ldur	q0, [x29, #-16]
      e4:	mov	w9, #0x1                   	// #1
      e8:	mov	x2, sp
      ec:	stur	q0, [sp, #8]
      f0:	stp	x10, x5, [sp]
      f4:	stp	x6, x9, [sp, #16]
      f8:	b	108 <ctf_simple_open_internal+0x80>
      fc:	mov	x1, xzr
     100:	cbnz	x5, e0 <ctf_simple_open_internal+0x58>
     104:	mov	x2, xzr
     108:	mov	x3, x7
     10c:	mov	x5, x8
     110:	bl	120 <ctf_bufopen_internal>
     114:	ldp	x29, x30, [sp, #112]
     118:	add	sp, sp, #0x80
     11c:	ret

0000000000000120 <ctf_bufopen_internal>:
     120:	sub	sp, sp, #0x70
     124:	stp	x29, x30, [sp, #16]
     128:	stp	x28, x27, [sp, #32]
     12c:	stp	x26, x25, [sp, #48]
     130:	stp	x24, x23, [sp, #64]
     134:	stp	x22, x21, [sp, #80]
     138:	stp	x20, x19, [sp, #96]
     13c:	add	x29, sp, #0x10
     140:	mov	x19, x5
     144:	mov	w24, w4
     148:	mov	x23, x3
     14c:	mov	x22, x2
     150:	mov	x21, x1
     154:	mov	x25, x0
     158:	bl	0 <libctf_init_debug>
     15c:	cbz	x25, 16c <ctf_bufopen_internal+0x4c>
     160:	cbz	x21, 1a0 <ctf_bufopen_internal+0x80>
     164:	cbnz	x22, 1a0 <ctf_bufopen_internal+0x80>
     168:	cbnz	x23, 1a0 <ctf_bufopen_internal+0x80>
     16c:	mov	w1, #0x16                  	// #22
     170:	mov	x0, x19
     174:	bl	0 <ctf_set_open_errno>
     178:	mov	x20, x0
     17c:	mov	x0, x20
     180:	ldp	x20, x19, [sp, #96]
     184:	ldp	x22, x21, [sp, #80]
     188:	ldp	x24, x23, [sp, #64]
     18c:	ldp	x26, x25, [sp, #48]
     190:	ldp	x28, x27, [sp, #32]
     194:	ldp	x29, x30, [sp, #16]
     198:	add	sp, sp, #0x70
     19c:	ret
     1a0:	cbz	x21, 1bc <ctf_bufopen_internal+0x9c>
     1a4:	ldr	x8, [x21, #24]
     1a8:	orr	x8, x8, #0x8
     1ac:	cmp	x8, #0x18
     1b0:	b.ne	238 <ctf_bufopen_internal+0x118>  // b.any
     1b4:	ldr	x8, [x21, #8]
     1b8:	cbz	x8, 240 <ctf_bufopen_internal+0x120>
     1bc:	cbz	x22, 1c8 <ctf_bufopen_internal+0xa8>
     1c0:	ldr	x8, [x22, #8]
     1c4:	cbz	x8, 248 <ctf_bufopen_internal+0x128>
     1c8:	ldr	x8, [x25, #16]
     1cc:	cmp	x8, #0x3
     1d0:	b.hi	1dc <ctf_bufopen_internal+0xbc>  // b.pmore
     1d4:	mov	w1, #0x3f1                 	// #1009
     1d8:	b	170 <ctf_bufopen_internal+0x50>
     1dc:	ldr	x28, [x25, #8]
     1e0:	adrp	x0, 0 <ctf_set_ctl_hashes>
     1e4:	add	x0, x0, #0x0
     1e8:	ldrh	w1, [x28]
     1ec:	ldrb	w2, [x28, #2]
     1f0:	bl	0 <ctf_dprintf>
     1f4:	ldrh	w20, [x28]
     1f8:	mov	w8, #0xdff2                	// #57330
     1fc:	cmp	w20, w8
     200:	b.ne	428 <ctf_bufopen_internal+0x308>  // b.any
     204:	mov	w27, wzr
     208:	ldrb	w1, [x28, #2]
     20c:	sub	w8, w1, #0x1
     210:	cmp	w8, #0x4
     214:	b.cs	44c <ctf_bufopen_internal+0x32c>  // b.hs, b.nlast
     218:	cbz	x21, 250 <ctf_bufopen_internal+0x130>
     21c:	cmp	w1, #0x2
     220:	b.hi	250 <ctf_bufopen_internal+0x130>  // b.pmore
     224:	adrp	x0, 0 <ctf_set_ctl_hashes>
     228:	add	x0, x0, #0x0
     22c:	bl	0 <ctf_dprintf>
     230:	mov	w1, #0x40a                 	// #1034
     234:	b	170 <ctf_bufopen_internal+0x50>
     238:	mov	w1, #0x3ec                 	// #1004
     23c:	b	170 <ctf_bufopen_internal+0x50>
     240:	mov	w1, #0x3ed                 	// #1005
     244:	b	170 <ctf_bufopen_internal+0x50>
     248:	mov	w1, #0x3ee                 	// #1006
     24c:	b	170 <ctf_bufopen_internal+0x50>
     250:	ldr	x8, [x25, #16]
     254:	cmp	w1, #0x4
     258:	mov	w9, #0x34                  	// #52
     25c:	mov	w10, #0x28                  	// #40
     260:	csel	x26, x10, x9, cc  // cc = lo, ul, last
     264:	cmp	x8, x26
     268:	b.cc	1d4 <ctf_bufopen_internal+0xb4>  // b.lo, b.ul, b.last
     26c:	mov	w0, #0x2d8                 	// #728
     270:	bl	0 <malloc>
     274:	cbz	x0, 358 <ctf_bufopen_internal+0x238>
     278:	mov	w2, #0x2d8                 	// #728
     27c:	mov	w1, wzr
     280:	mov	x20, x0
     284:	bl	0 <memset>
     288:	cbz	w24, 298 <ctf_bufopen_internal+0x178>
     28c:	ldr	w8, [x20, #552]
     290:	orr	w8, w8, #0x2
     294:	str	w8, [x20, #552]
     298:	mov	w0, #0x34                  	// #52
     29c:	bl	0 <malloc>
     2a0:	str	x0, [x20, #8]
     2a4:	cbz	x0, 360 <ctf_bufopen_internal+0x240>
     2a8:	ldr	x1, [x25, #8]
     2ac:	mov	x2, x26
     2b0:	mov	x24, x0
     2b4:	bl	0 <memcpy>
     2b8:	ldrb	w8, [x28, #2]
     2bc:	cmp	w8, #0x3
     2c0:	b.hi	2cc <ctf_bufopen_internal+0x1ac>  // b.pmore
     2c4:	mov	x0, x24
     2c8:	bl	718 <upgrade_header>
     2cc:	cbz	w27, 2d8 <ctf_bufopen_internal+0x1b8>
     2d0:	mov	x0, x24
     2d4:	bl	744 <flip_header>
     2d8:	ldp	w9, w10, [x24, #44]
     2dc:	ldrb	w8, [x24, #3]
     2e0:	adrp	x0, 0 <ctf_set_ctl_hashes>
     2e4:	add	x0, x0, #0x0
     2e8:	add	w1, w10, w9
     2ec:	strb	w8, [x20, #16]
     2f0:	str	x1, [x20, #416]
     2f4:	bl	0 <ctf_dprintf>
     2f8:	ldr	w8, [x24, #16]
     2fc:	ldr	x14, [x20, #416]
     300:	cmp	x14, x8
     304:	b.cc	350 <ctf_bufopen_internal+0x230>  // b.lo, b.ul, b.last
     308:	ldr	w9, [x24, #20]
     30c:	cmp	x14, x9
     310:	b.cc	350 <ctf_bufopen_internal+0x230>  // b.lo, b.ul, b.last
     314:	ldr	w10, [x24, #24]
     318:	cmp	x14, x10
     31c:	b.cc	350 <ctf_bufopen_internal+0x230>  // b.lo, b.ul, b.last
     320:	ldr	w11, [x24, #28]
     324:	cmp	x14, x11
     328:	b.cc	350 <ctf_bufopen_internal+0x230>  // b.lo, b.ul, b.last
     32c:	ldr	w12, [x24, #32]
     330:	cmp	x14, x12
     334:	b.cc	350 <ctf_bufopen_internal+0x230>  // b.lo, b.ul, b.last
     338:	ldr	w13, [x24, #40]
     33c:	cmp	x14, x13
     340:	b.cc	350 <ctf_bufopen_internal+0x230>  // b.lo, b.ul, b.last
     344:	ldr	w15, [x24, #44]
     348:	cmp	x14, x15
     34c:	b.cs	370 <ctf_bufopen_internal+0x250>  // b.hs, b.nlast
     350:	mov	w1, #0x3ef                 	// #1007
     354:	b	170 <ctf_bufopen_internal+0x50>
     358:	mov	w1, #0xc                   	// #12
     35c:	b	170 <ctf_bufopen_internal+0x50>
     360:	mov	x0, x20
     364:	bl	0 <free>
     368:	mov	w1, #0xc                   	// #12
     36c:	b	170 <ctf_bufopen_internal+0x50>
     370:	cmp	w11, w12
     374:	str	x14, [sp]
     378:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     37c:	cmp	w10, w11
     380:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     384:	cmp	w8, w9
     388:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     38c:	cmp	w9, w10
     390:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     394:	cmp	w10, w13
     398:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     39c:	cmp	w13, w15
     3a0:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     3a4:	ldr	w14, [x24, #36]
     3a8:	cmp	w12, w14
     3ac:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     3b0:	cmp	w14, w13
     3b4:	b.hi	350 <ctf_bufopen_internal+0x230>  // b.pmore
     3b8:	and	w8, w8, #0x3
     3bc:	and	w9, w9, #0x2
     3c0:	and	w10, w10, #0x2
     3c4:	orr	w8, w9, w8
     3c8:	and	w11, w11, #0x2
     3cc:	orr	w8, w8, w10
     3d0:	and	w12, w12, #0x2
     3d4:	orr	w8, w8, w11
     3d8:	orr	w8, w8, w12
     3dc:	and	w9, w13, #0x3
     3e0:	and	w14, w14, #0x3
     3e4:	orr	w8, w8, w9
     3e8:	orr	w8, w8, w14
     3ec:	cbnz	w8, 350 <ctf_bufopen_internal+0x230>
     3f0:	ldrb	w28, [x24, #3]
     3f4:	tbnz	w28, #0, 454 <ctf_bufopen_internal+0x334>
     3f8:	cbz	w27, 4b8 <ctf_bufopen_internal+0x398>
     3fc:	ldr	x0, [sp]
     400:	bl	0 <malloc>
     404:	str	x0, [x20, #392]
     408:	cbz	x0, 4d8 <ctf_bufopen_internal+0x3b8>
     40c:	str	x0, [x20, #400]
     410:	ldr	x8, [x25, #8]
     414:	ldr	x2, [sp]
     418:	add	x1, x8, x26
     41c:	bl	0 <memcpy>
     420:	ldr	x8, [x20, #392]
     424:	b	4c4 <ctf_bufopen_internal+0x3a4>
     428:	mov	w0, #0xdff2                	// #57330
     42c:	bl	70c <__bswap_16>
     430:	cmp	w20, w0, uxth
     434:	b.ne	1d4 <ctf_bufopen_internal+0xb4>  // b.any
     438:	ldrb	w8, [x28, #2]
     43c:	cmp	w8, #0x4
     440:	b.ne	44c <ctf_bufopen_internal+0x32c>  // b.any
     444:	mov	w27, #0x1                   	// #1
     448:	b	208 <ctf_bufopen_internal+0xe8>
     44c:	mov	w1, #0x3ea                 	// #1002
     450:	b	170 <ctf_bufopen_internal+0x50>
     454:	ldr	x0, [sp]
     458:	bl	0 <malloc>
     45c:	str	x0, [x20, #392]
     460:	cbz	x0, 4cc <ctf_bufopen_internal+0x3ac>
     464:	and	w8, w28, #0xfe
     468:	str	x0, [x20, #400]
     46c:	strb	w8, [x24, #3]
     470:	ldp	x9, x10, [x25, #8]
     474:	ldr	x0, [x20, #392]
     478:	ldr	x8, [sp]
     47c:	add	x1, sp, #0x8
     480:	add	x2, x9, x26
     484:	sub	x3, x10, x26
     488:	str	x8, [sp, #8]
     48c:	str	x0, [x20, #408]
     490:	bl	0 <uncompress>
     494:	cbz	w0, 4e0 <ctf_bufopen_internal+0x3c0>
     498:	bl	0 <zError>
     49c:	mov	x1, x0
     4a0:	adrp	x0, 0 <ctf_set_ctl_hashes>
     4a4:	add	x0, x0, #0x0
     4a8:	bl	0 <ctf_dprintf>
     4ac:	mov	w8, wzr
     4b0:	mov	w26, #0x3f7                 	// #1015
     4b4:	b	50c <ctf_bufopen_internal+0x3ec>
     4b8:	ldr	x8, [x25, #8]
     4bc:	stp	x8, xzr, [x20, #392]
     4c0:	add	x8, x8, x26
     4c4:	str	x8, [x20, #408]
     4c8:	b	510 <ctf_bufopen_internal+0x3f0>
     4cc:	mov	w8, wzr
     4d0:	mov	w26, #0x3f6                 	// #1014
     4d4:	b	50c <ctf_bufopen_internal+0x3ec>
     4d8:	mov	w26, #0x3f6                 	// #1014
     4dc:	b	674 <ctf_bufopen_internal+0x554>
     4e0:	ldr	x1, [sp, #8]
     4e4:	ldr	x2, [x20, #416]
     4e8:	cmp	x1, x2
     4ec:	b.ne	4f8 <ctf_bufopen_internal+0x3d8>  // b.any
     4f0:	mov	w8, #0x1                   	// #1
     4f4:	b	50c <ctf_bufopen_internal+0x3ec>
     4f8:	adrp	x0, 0 <ctf_set_ctl_hashes>
     4fc:	add	x0, x0, #0x0
     500:	bl	0 <ctf_dprintf>
     504:	mov	w8, wzr
     508:	mov	w26, #0x3ef                 	// #1007
     50c:	tbz	w8, #0, 674 <ctf_bufopen_internal+0x554>
     510:	ldrb	w2, [x24, #2]
     514:	mov	x0, x20
     518:	mov	x1, x24
     51c:	bl	81c <ctf_set_version>
     520:	mov	x0, x20
     524:	bl	0 <ctf_str_create_atoms>
     528:	mov	w8, #0x7fffffff            	// #2147483647
     52c:	str	w8, [x20, #544]
     530:	ldp	q0, q1, [x25]
     534:	add	x25, x20, #0x18
     538:	stur	q0, [x20, #24]
     53c:	stur	q1, [x20, #40]
     540:	cbz	x21, 55c <ctf_bufopen_internal+0x43c>
     544:	ldp	q1, q0, [x21]
     548:	stur	q0, [x20, #72]
     54c:	stur	q1, [x20, #56]
     550:	ldp	q1, q0, [x22]
     554:	stur	q0, [x20, #104]
     558:	stur	q1, [x20, #88]
     55c:	ldr	x0, [x25]
     560:	cbz	x0, 570 <ctf_bufopen_internal+0x450>
     564:	bl	0 <strdup>
     568:	str	x0, [x25]
     56c:	cbz	x0, 670 <ctf_bufopen_internal+0x550>
     570:	ldr	x0, [x20, #56]
     574:	cbz	x0, 584 <ctf_bufopen_internal+0x464>
     578:	bl	0 <strdup>
     57c:	str	x0, [x20, #56]
     580:	cbz	x0, 670 <ctf_bufopen_internal+0x550>
     584:	ldr	x0, [x20, #88]
     588:	cbz	x0, 598 <ctf_bufopen_internal+0x478>
     58c:	bl	0 <strdup>
     590:	str	x0, [x20, #88]
     594:	cbz	x0, 670 <ctf_bufopen_internal+0x550>
     598:	ldr	x8, [x25]
     59c:	cbz	x8, 690 <ctf_bufopen_internal+0x570>
     5a0:	ldr	x8, [x20, #56]
     5a4:	cbz	x8, 6a4 <ctf_bufopen_internal+0x584>
     5a8:	ldr	x8, [x20, #88]
     5ac:	cbz	x8, 6b8 <ctf_bufopen_internal+0x598>
     5b0:	cbz	x22, 5c4 <ctf_bufopen_internal+0x4a4>
     5b4:	ldr	x8, [x22, #8]
     5b8:	str	x8, [x20, #352]
     5bc:	ldr	x8, [x22, #16]
     5c0:	str	x8, [x20, #360]
     5c4:	str	x23, [x20, #128]
     5c8:	cbz	w27, 5f4 <ctf_bufopen_internal+0x4d4>
     5cc:	ldr	x1, [x20, #408]
     5d0:	mov	x0, x24
     5d4:	bl	83c <flip_ctf>
     5d8:	cbz	w0, 5f4 <ctf_bufopen_internal+0x4d4>
     5dc:	ldr	x2, [x20, #392]
     5e0:	mov	w26, w0
     5e4:	mov	x0, x20
     5e8:	mov	x1, x24
     5ec:	bl	8cc <ctf_set_base>
     5f0:	b	674 <ctf_bufopen_internal+0x554>
     5f4:	ldr	x2, [x20, #392]
     5f8:	mov	x0, x20
     5fc:	mov	x1, x24
     600:	bl	8cc <ctf_set_base>
     604:	ldrb	w8, [x20, #552]
     608:	tbnz	w8, #1, 6e0 <ctf_bufopen_internal+0x5c0>
     60c:	mov	x0, x20
     610:	mov	x1, x24
     614:	bl	9ac <init_types>
     618:	mov	w26, w0
     61c:	cbnz	w0, 674 <ctf_bufopen_internal+0x554>
     620:	cbz	x21, 6cc <ctf_bufopen_internal+0x5ac>
     624:	ldp	x8, x9, [x21, #16]
     628:	udiv	x8, x8, x9
     62c:	lsl	x0, x8, #2
     630:	str	x8, [x20, #432]
     634:	bl	0 <malloc>
     638:	str	x0, [x20, #424]
     63c:	cbz	x0, 670 <ctf_bufopen_internal+0x550>
     640:	mov	x0, x20
     644:	mov	x1, x24
     648:	mov	x2, x21
     64c:	mov	x3, x22
     650:	bl	114c <init_symtab>
     654:	mov	x0, x20
     658:	bl	0 <ctf_set_ctl_hashes>
     65c:	ldr	x8, [x21, #24]
     660:	cmp	x8, #0x18
     664:	mov	w8, #0x1                   	// #1
     668:	cinc	w1, w8, eq  // eq = none
     66c:	b	6d8 <ctf_bufopen_internal+0x5b8>
     670:	mov	w26, #0xc                   	// #12
     674:	mov	x0, x19
     678:	mov	w1, w26
     67c:	bl	0 <ctf_set_open_errno>
     680:	mov	x0, x20
     684:	bl	1378 <ctf_file_close>
     688:	mov	x20, xzr
     68c:	b	17c <ctf_bufopen_internal+0x5c>
     690:	adrp	x8, 31 <ctf_set_ctl_hashes+0x31>
     694:	add	x8, x8, #0x0
     698:	str	x8, [x25]
     69c:	ldr	x8, [x20, #56]
     6a0:	cbnz	x8, 5a8 <ctf_bufopen_internal+0x488>
     6a4:	adrp	x8, 31 <ctf_set_ctl_hashes+0x31>
     6a8:	add	x8, x8, #0x0
     6ac:	str	x8, [x20, #56]
     6b0:	ldr	x8, [x20, #88]
     6b4:	cbnz	x8, 5b0 <ctf_bufopen_internal+0x490>
     6b8:	adrp	x8, 31 <ctf_set_ctl_hashes+0x31>
     6bc:	add	x8, x8, #0x0
     6c0:	str	x8, [x20, #88]
     6c4:	cbnz	x22, 5b4 <ctf_bufopen_internal+0x494>
     6c8:	b	5c4 <ctf_bufopen_internal+0x4a4>
     6cc:	mov	x0, x20
     6d0:	bl	0 <ctf_set_ctl_hashes>
     6d4:	mov	w1, #0x2                   	// #2
     6d8:	mov	x0, x20
     6dc:	bl	1330 <ctf_setmodel>
     6e0:	mov	w8, #0x1                   	// #1
     6e4:	str	w8, [x20, #548]
     6e8:	b	17c <ctf_bufopen_internal+0x5c>

00000000000006ec <ctf_bufopen>:
     6ec:	stp	x29, x30, [sp, #-16]!
     6f0:	mov	x5, x3
     6f4:	mov	x3, xzr
     6f8:	mov	w4, wzr
     6fc:	mov	x29, sp
     700:	bl	120 <ctf_bufopen_internal>
     704:	ldp	x29, x30, [sp], #16
     708:	ret

000000000000070c <__bswap_16>:
     70c:	rev	w8, w0
     710:	lsr	w0, w8, #16
     714:	ret

0000000000000718 <upgrade_header>:
     718:	ldr	w8, [x0, #36]
     71c:	ldur	x9, [x0, #28]
     720:	ldp	w11, w10, [x0, #20]
     724:	ldur	x12, [x0, #12]
     728:	str	w8, [x0, #48]
     72c:	str	x9, [x0, #40]
     730:	stp	w10, w10, [x0, #32]
     734:	stp	w11, w10, [x0, #24]
     738:	str	x12, [x0, #16]
     73c:	str	wzr, [x0, #12]
     740:	ret

0000000000000744 <flip_header>:
     744:	stp	x29, x30, [sp, #-32]!
     748:	str	x19, [sp, #16]
     74c:	mov	x19, x0
     750:	ldrh	w0, [x0]
     754:	mov	x29, sp
     758:	bl	70c <__bswap_16>
     75c:	ldr	w8, [x19, #4]
     760:	strh	w0, [x19]
     764:	mov	w0, w8
     768:	bl	1714 <__bswap_32>
     76c:	ldr	w8, [x19, #8]
     770:	str	w0, [x19, #4]
     774:	mov	w0, w8
     778:	bl	1714 <__bswap_32>
     77c:	ldr	w8, [x19, #12]
     780:	str	w0, [x19, #8]
     784:	mov	w0, w8
     788:	bl	1714 <__bswap_32>
     78c:	ldr	w8, [x19, #20]
     790:	str	w0, [x19, #12]
     794:	mov	w0, w8
     798:	bl	1714 <__bswap_32>
     79c:	ldr	w8, [x19, #24]
     7a0:	str	w0, [x19, #20]
     7a4:	mov	w0, w8
     7a8:	bl	1714 <__bswap_32>
     7ac:	ldr	w8, [x19, #28]
     7b0:	str	w0, [x19, #24]
     7b4:	mov	w0, w8
     7b8:	bl	1714 <__bswap_32>
     7bc:	ldr	w8, [x19, #32]
     7c0:	str	w0, [x19, #28]
     7c4:	mov	w0, w8
     7c8:	bl	1714 <__bswap_32>
     7cc:	ldr	w8, [x19, #36]
     7d0:	str	w0, [x19, #32]
     7d4:	mov	w0, w8
     7d8:	bl	1714 <__bswap_32>
     7dc:	ldr	w8, [x19, #40]
     7e0:	str	w0, [x19, #36]
     7e4:	mov	w0, w8
     7e8:	bl	1714 <__bswap_32>
     7ec:	ldr	w8, [x19, #44]
     7f0:	str	w0, [x19, #40]
     7f4:	mov	w0, w8
     7f8:	bl	1714 <__bswap_32>
     7fc:	ldr	w8, [x19, #48]
     800:	str	w0, [x19, #44]
     804:	mov	w0, w8
     808:	bl	1714 <__bswap_32>
     80c:	str	w0, [x19, #48]
     810:	ldr	x19, [sp, #16]
     814:	ldp	x29, x30, [sp], #32
     818:	ret

000000000000081c <ctf_set_version>:
     81c:	adrp	x8, 0 <ctf_set_ctl_hashes>
     820:	add	x8, x8, #0x0
     824:	mov	w9, #0x28                  	// #40
     828:	smaddl	x8, w2, w9, x8
     82c:	str	w2, [x0, #560]
     830:	strb	w2, [x1, #2]
     834:	str	x8, [x0]
     838:	ret

000000000000083c <flip_ctf>:
     83c:	stp	x29, x30, [sp, #-32]!
     840:	stp	x20, x19, [sp, #16]
     844:	ldp	w8, w9, [x0, #16]
     848:	mov	x19, x1
     84c:	mov	x20, x0
     850:	mov	x29, sp
     854:	add	x0, x1, x8
     858:	sub	w1, w9, w8
     85c:	bl	1920 <flip_lbls>
     860:	ldp	w8, w9, [x20, #20]
     864:	add	x0, x19, x8
     868:	sub	w1, w9, w8
     86c:	bl	1974 <flip_objts>
     870:	ldp	w8, w9, [x20, #24]
     874:	add	x0, x19, x8
     878:	sub	w1, w9, w8
     87c:	bl	1974 <flip_objts>
     880:	ldp	w8, w9, [x20, #28]
     884:	add	x0, x19, x8
     888:	sub	w1, w9, w8
     88c:	bl	1974 <flip_objts>
     890:	ldp	w8, w9, [x20, #32]
     894:	add	x0, x19, x8
     898:	sub	w1, w9, w8
     89c:	bl	1974 <flip_objts>
     8a0:	ldp	w8, w9, [x20, #36]
     8a4:	add	x0, x19, x8
     8a8:	sub	w1, w9, w8
     8ac:	bl	19b4 <flip_vars>
     8b0:	ldp	w8, w9, [x20, #40]
     8b4:	add	x0, x19, x8
     8b8:	sub	w1, w9, w8
     8bc:	bl	1a08 <flip_types>
     8c0:	ldp	x20, x19, [sp, #16]
     8c4:	ldp	x29, x30, [sp], #32
     8c8:	ret

00000000000008cc <ctf_set_base>:
     8cc:	stp	x29, x30, [sp, #-32]!
     8d0:	stp	x20, x19, [sp, #16]
     8d4:	ldr	x8, [x0, #408]
     8d8:	ldr	x9, [x0, #392]
     8dc:	str	x2, [x0, #392]
     8e0:	mov	x20, x1
     8e4:	mov	x19, x0
     8e8:	sub	x8, x8, x9
     8ec:	add	x8, x2, x8
     8f0:	str	x8, [x0, #408]
     8f4:	ldr	w9, [x1, #36]
     8f8:	mov	x29, sp
     8fc:	add	x10, x8, x9
     900:	str	x10, [x0, #464]
     904:	ldr	w10, [x1, #40]
     908:	sub	w9, w10, w9
     90c:	lsr	w9, w9, #3
     910:	str	x9, [x0, #472]
     914:	ldr	w9, [x1, #44]
     918:	add	x8, x8, x9
     91c:	str	x8, [x0, #336]
     920:	ldr	w8, [x1, #48]
     924:	str	x8, [x0, #344]
     928:	ldr	w1, [x1, #4]
     92c:	cbz	w1, 93c <ctf_set_base+0x70>
     930:	mov	x0, x19
     934:	bl	0 <ctf_strptr>
     938:	str	x0, [x19, #520]
     93c:	ldr	w1, [x20, #8]
     940:	cbz	w1, 950 <ctf_set_base+0x84>
     944:	mov	x0, x19
     948:	bl	0 <ctf_strptr>
     94c:	str	x0, [x19, #528]
     950:	ldr	w1, [x20, #12]
     954:	cbz	w1, 964 <ctf_set_base+0x98>
     958:	mov	x0, x19
     95c:	bl	0 <ctf_strptr>
     960:	str	x0, [x19, #496]
     964:	ldr	x1, [x19, #496]
     968:	cbz	x1, 978 <ctf_set_base+0xac>
     96c:	adrp	x0, 0 <ctf_set_ctl_hashes>
     970:	add	x0, x0, #0x0
     974:	bl	0 <ctf_dprintf>
     978:	ldr	x1, [x19, #528]
     97c:	cbz	x1, 9a0 <ctf_set_base+0xd4>
     980:	ldr	x8, [x19, #520]
     984:	adrp	x9, 0 <ctf_set_ctl_hashes>
     988:	add	x9, x9, #0x0
     98c:	adrp	x0, 0 <ctf_set_ctl_hashes>
     990:	cmp	x8, #0x0
     994:	csel	x2, x9, x8, eq  // eq = none
     998:	add	x0, x0, #0x0
     99c:	bl	0 <ctf_dprintf>
     9a0:	ldp	x20, x19, [sp, #16]
     9a4:	ldp	x29, x30, [sp], #32
     9a8:	ret

00000000000009ac <init_types>:
     9ac:	stp	x29, x30, [sp, #-96]!
     9b0:	stp	x28, x27, [sp, #16]
     9b4:	stp	x26, x25, [sp, #32]
     9b8:	stp	x24, x23, [sp, #48]
     9bc:	stp	x22, x21, [sp, #64]
     9c0:	stp	x20, x19, [sp, #80]
     9c4:	mov	x29, sp
     9c8:	sub	sp, sp, #0x230
     9cc:	movi	v0.2d, #0x0
     9d0:	stp	q0, q0, [sp, #512]
     9d4:	stp	q0, q0, [sp, #480]
     9d8:	stp	q0, q0, [sp, #448]
     9dc:	stp	q0, q0, [sp, #416]
     9e0:	stp	q0, q0, [sp, #384]
     9e4:	stp	q0, q0, [sp, #352]
     9e8:	stp	q0, q0, [sp, #320]
     9ec:	stp	q0, q0, [sp, #288]
     9f0:	stp	q0, q0, [sp, #256]
     9f4:	stp	q0, q0, [sp, #224]
     9f8:	stp	q0, q0, [sp, #192]
     9fc:	stp	q0, q0, [sp, #160]
     a00:	stp	q0, q0, [sp, #128]
     a04:	stp	q0, q0, [sp, #96]
     a08:	stp	q0, q0, [sp, #64]
     a0c:	stp	q0, q0, [sp, #32]
     a10:	ldrb	w8, [x0, #552]
     a14:	tbnz	w8, #1, 112c <init_types+0x780>
     a18:	ldr	w8, [x0, #560]
     a1c:	ldr	w9, [x1, #8]
     a20:	mov	x19, x0
     a24:	mov	x20, x1
     a28:	cmp	w8, #0x1
     a2c:	str	w9, [sp, #8]
     a30:	b.eq	111c <init_types+0x770>  // b.none
     a34:	ldr	x8, [x19, #408]
     a38:	ldp	w24, w25, [x20, #40]
     a3c:	add	x20, x8, x24
     a40:	cmp	w24, w25
     a44:	add	x28, x8, x25
     a48:	b.cs	b64 <init_types+0x1b8>  // b.hs, b.nlast
     a4c:	add	x26, sp, #0x20
     a50:	add	x27, x26, #0x30
     a54:	mov	x21, x20
     a58:	str	wzr, [sp, #12]
     a5c:	b	a98 <init_types+0xec>
     a60:	lsl	x8, x8, #3
     a64:	ldr	x9, [sp, #16]
     a68:	ldr	x10, [x26, x8]
     a6c:	add	x11, x0, x21
     a70:	add	x21, x11, x9
     a74:	add	x9, x10, #0x1
     a78:	str	x9, [x26, x8]
     a7c:	mov	w8, #0x1                   	// #1
     a80:	cbz	w8, b34 <init_types+0x188>
     a84:	ldr	x8, [x19, #480]
     a88:	cmp	x21, x28
     a8c:	add	x8, x8, #0x1
     a90:	str	x8, [x19, #480]
     a94:	b.cs	b3c <init_types+0x190>  // b.hs, b.nlast
     a98:	ldr	x8, [x19]
     a9c:	ldr	w0, [x21, #4]
     aa0:	ldr	x8, [x8]
     aa4:	blr	x8
     aa8:	ldr	x8, [x19]
     aac:	mov	w22, w0
     ab0:	ldr	x9, [x8, #16]
     ab4:	ldr	w8, [x21, #4]
     ab8:	mov	w0, w8
     abc:	blr	x9
     ac0:	mov	w23, w0
     ac4:	add	x2, sp, #0x18
     ac8:	add	x3, sp, #0x10
     acc:	mov	x0, x19
     ad0:	mov	x1, x21
     ad4:	bl	1d78 <ctf_get_ctt_size>
     ad8:	ldr	x8, [x19]
     adc:	ldr	x1, [sp, #24]
     ae0:	mov	w0, w22
     ae4:	mov	x2, x23
     ae8:	ldr	x8, [x8, #32]
     aec:	blr	x8
     af0:	tbnz	x0, #63, b24 <init_types+0x178>
     af4:	and	w8, w22, #0xffff
     af8:	cmp	w8, #0x9
     afc:	b.ne	a60 <init_types+0xb4>  // b.any
     b00:	ldr	w9, [x21, #8]
     b04:	sub	w10, w9, #0x1
     b08:	add	x9, x26, x9, lsl #3
     b0c:	cmp	w10, #0x3d
     b10:	csel	x9, x27, x9, hi  // hi = pmore
     b14:	ldr	x10, [x9]
     b18:	add	x10, x10, #0x1
     b1c:	str	x10, [x9]
     b20:	b	a60 <init_types+0xb4>
     b24:	mov	w9, #0x3ef                 	// #1007
     b28:	mov	w8, wzr
     b2c:	str	w9, [sp, #12]
     b30:	cbnz	w8, a84 <init_types+0xd8>
     b34:	ldr	w0, [sp, #12]
     b38:	b	cc0 <init_types+0x314>
     b3c:	ldr	w8, [sp, #8]
     b40:	cbz	w8, b70 <init_types+0x1c4>
     b44:	adrp	x0, 0 <ctf_set_ctl_hashes>
     b48:	add	x0, x0, #0x0
     b4c:	mov	x1, x19
     b50:	bl	0 <ctf_dprintf>
     b54:	ldr	w8, [x19, #552]
     b58:	orr	w8, w8, #0x1
     b5c:	str	w8, [x19, #552]
     b60:	b	b80 <init_types+0x1d4>
     b64:	str	wzr, [sp, #12]
     b68:	ldr	w8, [sp, #8]
     b6c:	cbnz	w8, b44 <init_types+0x198>
     b70:	adrp	x0, 0 <ctf_set_ctl_hashes>
     b74:	add	x0, x0, #0x0
     b78:	mov	x1, x19
     b7c:	bl	0 <ctf_dprintf>
     b80:	ldr	x0, [sp, #80]
     b84:	adrp	x1, 0 <ctf_hash_string>
     b88:	adrp	x2, 0 <ctf_hash_eq_string>
     b8c:	add	x1, x1, #0x0
     b90:	add	x2, x2, #0x0
     b94:	bl	0 <ctf_hash_create>
     b98:	str	x0, [x19, #152]
     b9c:	cbz	x0, cbc <init_types+0x310>
     ba0:	ldr	x0, [sp, #88]
     ba4:	adrp	x1, 0 <ctf_hash_string>
     ba8:	adrp	x2, 0 <ctf_hash_eq_string>
     bac:	add	x1, x1, #0x0
     bb0:	add	x2, x2, #0x0
     bb4:	bl	0 <ctf_hash_create>
     bb8:	str	x0, [x19, #168]
     bbc:	cbz	x0, cbc <init_types+0x310>
     bc0:	ldr	x0, [sp, #96]
     bc4:	adrp	x1, 0 <ctf_hash_string>
     bc8:	adrp	x2, 0 <ctf_hash_eq_string>
     bcc:	add	x1, x1, #0x0
     bd0:	add	x2, x2, #0x0
     bd4:	bl	0 <ctf_hash_create>
     bd8:	str	x0, [x19, #184]
     bdc:	cbz	x0, cbc <init_types+0x310>
     be0:	ldp	x8, x9, [sp, #40]
     be4:	ldr	x10, [sp, #72]
     be8:	ldp	x12, x13, [sp, #112]
     bec:	ldr	x11, [sp, #56]
     bf0:	add	x8, x9, x8
     bf4:	add	x8, x8, x10
     bf8:	ldp	x9, x10, [sp, #128]
     bfc:	add	x8, x8, x12
     c00:	add	x8, x8, x11
     c04:	add	x8, x8, x13
     c08:	add	x8, x8, x9
     c0c:	adrp	x1, 0 <ctf_hash_string>
     c10:	adrp	x2, 0 <ctf_hash_eq_string>
     c14:	add	x0, x8, x10
     c18:	add	x1, x1, #0x0
     c1c:	add	x2, x2, #0x0
     c20:	bl	0 <ctf_hash_create>
     c24:	str	x0, [x19, #200]
     c28:	cbz	x0, cbc <init_types+0x310>
     c2c:	ldr	x23, [x19, #480]
     c30:	lsl	x8, x23, #2
     c34:	add	x21, x8, #0x4
     c38:	mov	x0, x21
     c3c:	bl	0 <malloc>
     c40:	add	x8, x23, #0x1
     c44:	mov	x22, x0
     c48:	str	x0, [x19, #440]
     c4c:	lsl	x0, x8, #2
     c50:	str	x8, [x19, #456]
     c54:	bl	0 <malloc>
     c58:	mov	x8, x0
     c5c:	str	x0, [x19, #448]
     c60:	mov	w0, #0xc                   	// #12
     c64:	cbz	x8, cc0 <init_types+0x314>
     c68:	ldr	x23, [x19, #440]
     c6c:	cbz	x23, cc0 <init_types+0x314>
     c70:	mov	x0, x22
     c74:	mov	w1, wzr
     c78:	mov	x2, x21
     c7c:	str	wzr, [x23]
     c80:	bl	0 <memset>
     c84:	ldr	x8, [x19, #480]
     c88:	ldr	x0, [x19, #448]
     c8c:	mov	w1, wzr
     c90:	lsl	x8, x8, #2
     c94:	add	x2, x8, #0x4
     c98:	bl	0 <memset>
     c9c:	cmp	w24, w25
     ca0:	str	xzr, [sp]
     ca4:	b.cs	fb8 <init_types+0x60c>  // b.hs, b.nlast
     ca8:	adrp	x22, 0 <ctf_set_ctl_hashes>
     cac:	str	xzr, [sp]
     cb0:	mov	w21, #0x1                   	// #1
     cb4:	add	x22, x22, #0x0
     cb8:	b	d24 <init_types+0x378>
     cbc:	mov	w0, #0xc                   	// #12
     cc0:	add	sp, sp, #0x230
     cc4:	ldp	x20, x19, [sp, #80]
     cc8:	ldp	x22, x21, [sp, #64]
     ccc:	ldp	x24, x23, [sp, #48]
     cd0:	ldp	x26, x25, [sp, #32]
     cd4:	ldp	x28, x27, [sp, #16]
     cd8:	ldp	x29, x30, [sp], #96
     cdc:	ret
     ce0:	ldr	x8, [sp, #24]
     ce4:	mov	w9, #0x1fffffff            	// #536870911
     ce8:	cmp	x8, x9
     cec:	ldr	w8, [sp, #4]
     cf0:	cinc	w8, w8, gt
     cf4:	str	w8, [sp, #4]
     cf8:	ldr	w8, [x19, #408]
     cfc:	add	x9, x24, x20
     d00:	sub	w8, w20, w8
     d04:	str	w8, [x23, x21, lsl #2]
     d08:	ldr	x8, [sp, #16]
     d0c:	add	x20, x9, x8
     d10:	mov	w8, #0x1                   	// #1
     d14:	tbz	w8, #0, b34 <init_types+0x188>
     d18:	cmp	x20, x28
     d1c:	add	x21, x21, #0x1
     d20:	b.cs	fb8 <init_types+0x60c>  // b.hs, b.nlast
     d24:	ldr	x8, [x19]
     d28:	ldr	w0, [x20, #4]
     d2c:	ldr	x8, [x8]
     d30:	blr	x8
     d34:	ldr	x8, [x19]
     d38:	mov	w24, w0
     d3c:	ldr	x9, [x8, #8]
     d40:	ldr	w8, [x20, #4]
     d44:	mov	w0, w8
     d48:	blr	x9
     d4c:	ldr	x8, [x19]
     d50:	mov	w25, w0
     d54:	ldr	x9, [x8, #16]
     d58:	ldr	w8, [x20, #4]
     d5c:	mov	w0, w8
     d60:	blr	x9
     d64:	mov	w27, w0
     d68:	add	x2, sp, #0x18
     d6c:	add	x3, sp, #0x10
     d70:	mov	x0, x19
     d74:	mov	x1, x20
     d78:	bl	1d78 <ctf_get_ctt_size>
     d7c:	ldr	w1, [x20]
     d80:	mov	x0, x19
     d84:	bl	0 <ctf_strptr>
     d88:	ldr	x8, [x19]
     d8c:	ldr	x1, [sp, #24]
     d90:	mov	x26, x0
     d94:	mov	w0, w24
     d98:	ldr	x8, [x8, #32]
     d9c:	mov	x2, x27
     da0:	blr	x8
     da4:	and	w1, w24, #0xffff
     da8:	sub	w8, w1, #0x1
     dac:	cmp	w8, #0xd
     db0:	b.hi	efc <init_types+0x550>  // b.pmore
     db4:	adr	x9, cf8 <init_types+0x34c>
     db8:	ldrb	w10, [x22, x8]
     dbc:	add	x9, x9, x10, lsl #2
     dc0:	mov	x24, x0
     dc4:	br	x9
     dc8:	ldr	x0, [x19, #200]
     dcc:	ldr	w8, [sp, #8]
     dd0:	cbz	w8, de4 <init_types+0x438>
     dd4:	ldr	w8, [x19, #544]
     dd8:	add	w8, w8, #0x1
     ddc:	orr	w2, w8, w21
     de0:	b	de8 <init_types+0x43c>
     de4:	mov	w2, w21
     de8:	ldr	w3, [x20]
     dec:	mov	x1, x19
     df0:	bl	0 <ctf_hash_insert_type>
     df4:	cbnz	w0, f7c <init_types+0x5d0>
     df8:	b	cf8 <init_types+0x34c>
     dfc:	ldr	x0, [x19, #200]
     e00:	mov	x1, x19
     e04:	mov	x2, x26
     e08:	bl	0 <ctf_hash_lookup_type>
     e0c:	tbnz	w25, #0, e14 <init_types+0x468>
     e10:	cbnz	x0, cf8 <init_types+0x34c>
     e14:	ldr	x0, [x19, #200]
     e18:	ldr	w8, [sp, #8]
     e1c:	cbnz	w8, e50 <init_types+0x4a4>
     e20:	mov	w2, w21
     e24:	b	e5c <init_types+0x4b0>
     e28:	ldr	x0, [x19, #152]
     e2c:	ldr	w8, [sp, #8]
     e30:	cbz	w8, f1c <init_types+0x570>
     e34:	ldr	w8, [x19, #544]
     e38:	add	w8, w8, #0x1
     e3c:	orr	w2, w8, w21
     e40:	b	f20 <init_types+0x574>
     e44:	ldr	x0, [x19, #184]
     e48:	ldr	w8, [sp, #8]
     e4c:	cbz	w8, e20 <init_types+0x474>
     e50:	ldr	w8, [x19, #544]
     e54:	add	w8, w8, #0x1
     e58:	orr	w2, w8, w21
     e5c:	ldr	w3, [x20]
     e60:	mov	x1, x19
     e64:	bl	0 <ctf_hash_define_type>
     e68:	cbnz	w0, f7c <init_types+0x5d0>
     e6c:	b	cf8 <init_types+0x34c>
     e70:	ldr	w1, [x20, #8]
     e74:	mov	x0, x19
     e78:	bl	0 <ctf_name_table>
     e7c:	mov	x25, x0
     e80:	ldr	x0, [x0]
     e84:	mov	x1, x19
     e88:	mov	x2, x26
     e8c:	bl	0 <ctf_hash_lookup_type>
     e90:	cbz	x0, f4c <init_types+0x5a0>
     e94:	mov	w8, #0x1                   	// #1
     e98:	tbnz	w8, #0, cf8 <init_types+0x34c>
     e9c:	b	fac <init_types+0x600>
     ea0:	ldr	w10, [sp, #8]
     ea4:	ldr	w8, [x20, #8]
     ea8:	ldr	w9, [x19, #544]
     eac:	cmp	w10, #0x0
     eb0:	cset	w10, ne  // ne = any
     eb4:	cmp	w8, w9
     eb8:	cset	w11, ls  // ls = plast
     ebc:	cmp	w10, w11
     ec0:	b.eq	dc8 <init_types+0x41c>  // b.none
     ec4:	ldr	x10, [x19, #480]
     ec8:	and	x8, x9, x8
     ecc:	cmp	x10, x8
     ed0:	b.cc	dc8 <init_types+0x41c>  // b.lo, b.ul, b.last
     ed4:	ldr	x9, [x19, #448]
     ed8:	str	w21, [x9, x8, lsl #2]
     edc:	b	dc8 <init_types+0x41c>
     ee0:	ldr	x0, [x19, #168]
     ee4:	ldr	w8, [sp, #8]
     ee8:	cbz	w8, f68 <init_types+0x5bc>
     eec:	ldr	w8, [x19, #544]
     ef0:	add	w8, w8, #0x1
     ef4:	orr	w2, w8, w21
     ef8:	b	f6c <init_types+0x5c0>
     efc:	adrp	x0, 0 <ctf_set_ctl_hashes>
     f00:	add	x0, x0, #0x0
     f04:	bl	0 <ctf_dprintf>
     f08:	mov	w9, #0x3ef                 	// #1007
     f0c:	mov	w8, wzr
     f10:	str	w9, [sp, #12]
     f14:	tbnz	w8, #0, d18 <init_types+0x36c>
     f18:	b	b34 <init_types+0x188>
     f1c:	mov	w2, w21
     f20:	ldr	w3, [x20]
     f24:	mov	x1, x19
     f28:	bl	0 <ctf_hash_define_type>
     f2c:	cbnz	w0, f7c <init_types+0x5d0>
     f30:	ldr	x8, [sp, #24]
     f34:	mov	w9, #0x1fffffff            	// #536870911
     f38:	cmp	x8, x9
     f3c:	ldr	w8, [sp]
     f40:	cinc	w8, w8, gt
     f44:	str	w8, [sp]
     f48:	b	cf8 <init_types+0x34c>
     f4c:	ldr	x0, [x25]
     f50:	ldr	w8, [sp, #8]
     f54:	cbz	w8, f8c <init_types+0x5e0>
     f58:	ldr	w8, [x19, #544]
     f5c:	add	w8, w8, #0x1
     f60:	orr	w2, w8, w21
     f64:	b	f90 <init_types+0x5e4>
     f68:	mov	w2, w21
     f6c:	ldr	w3, [x20]
     f70:	mov	x1, x19
     f74:	bl	0 <ctf_hash_define_type>
     f78:	cbz	w0, ce0 <init_types+0x334>
     f7c:	mov	w8, wzr
     f80:	str	w0, [sp, #12]
     f84:	tbnz	w8, #0, d18 <init_types+0x36c>
     f88:	b	b34 <init_types+0x188>
     f8c:	mov	w2, w21
     f90:	ldr	w3, [x20]
     f94:	mov	x1, x19
     f98:	bl	0 <ctf_hash_insert_type>
     f9c:	cbz	w0, e94 <init_types+0x4e8>
     fa0:	mov	w8, wzr
     fa4:	str	w0, [sp, #12]
     fa8:	tbnz	w8, #0, cf8 <init_types+0x34c>
     fac:	mov	w8, wzr
     fb0:	tbnz	w8, #0, d18 <init_types+0x36c>
     fb4:	b	b34 <init_types+0x188>
     fb8:	ldr	x1, [x19, #480]
     fbc:	adrp	x0, 0 <ctf_set_ctl_hashes>
     fc0:	add	x0, x0, #0x0
     fc4:	bl	0 <ctf_dprintf>
     fc8:	ldr	x0, [x19, #184]
     fcc:	bl	0 <ctf_hash_size>
     fd0:	mov	w1, w0
     fd4:	adrp	x0, 0 <ctf_set_ctl_hashes>
     fd8:	add	x0, x0, #0x0
     fdc:	bl	0 <ctf_dprintf>
     fe0:	ldr	x0, [x19, #152]
     fe4:	bl	0 <ctf_hash_size>
     fe8:	ldr	w2, [sp]
     fec:	mov	w1, w0
     ff0:	adrp	x0, 0 <ctf_set_ctl_hashes>
     ff4:	add	x0, x0, #0x0
     ff8:	bl	0 <ctf_dprintf>
     ffc:	ldr	x0, [x19, #168]
    1000:	bl	0 <ctf_hash_size>
    1004:	ldr	w2, [sp, #4]
    1008:	mov	w1, w0
    100c:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1010:	add	x0, x0, #0x0
    1014:	bl	0 <ctf_dprintf>
    1018:	ldr	x0, [x19, #200]
    101c:	bl	0 <ctf_hash_size>
    1020:	mov	w1, w0
    1024:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1028:	add	x0, x0, #0x0
    102c:	bl	0 <ctf_dprintf>
    1030:	ldr	x8, [x19, #480]
    1034:	cbz	x8, 1114 <init_types+0x768>
    1038:	mov	w20, #0x2                   	// #2
    103c:	mov	w8, #0x1                   	// #1
    1040:	b	105c <init_types+0x6b0>
    1044:	ldr	x9, [x19, #480]
    1048:	mov	w8, w20
    104c:	mov	w0, wzr
    1050:	add	w20, w20, #0x1
    1054:	cmp	x9, x8
    1058:	b.cc	cc0 <init_types+0x314>  // b.lo, b.ul, b.last
    105c:	ldr	x9, [x19, #448]
    1060:	ldr	w21, [x9, x8, lsl #2]
    1064:	cbz	w21, 1044 <init_types+0x698>
    1068:	ldr	w9, [x19, #552]
    106c:	tbnz	w9, #1, 1084 <init_types+0x6d8>
    1070:	ldr	x9, [x19, #440]
    1074:	ldr	x10, [x19, #408]
    1078:	ldr	w8, [x9, x8, lsl #2]
    107c:	add	x22, x10, x8
    1080:	b	10a8 <init_types+0x6fc>
    1084:	sub	w8, w20, #0x1
    1088:	tbz	w9, #0, 1098 <init_types+0x6ec>
    108c:	ldr	w9, [x19, #544]
    1090:	add	w9, w9, #0x1
    1094:	orr	w8, w9, w8
    1098:	mov	w1, w8
    109c:	mov	x0, x19
    10a0:	bl	0 <ctf_dtd_lookup>
    10a4:	add	x22, x0, #0x18
    10a8:	ldr	x8, [x19]
    10ac:	ldr	w0, [x22, #4]
    10b0:	ldr	x8, [x8]
    10b4:	blr	x8
    10b8:	cmp	w0, #0xa
    10bc:	b.ne	1044 <init_types+0x698>  // b.any
    10c0:	ldr	w1, [x22]
    10c4:	mov	x0, x19
    10c8:	bl	0 <ctf_strptr>
    10cc:	ldrb	w8, [x0]
    10d0:	cbnz	w8, 1044 <init_types+0x698>
    10d4:	ldr	w10, [sp, #8]
    10d8:	ldr	w8, [x22, #8]
    10dc:	ldr	w9, [x19, #544]
    10e0:	cmp	w10, #0x0
    10e4:	cset	w10, ne  // ne = any
    10e8:	cmp	w8, w9
    10ec:	cset	w11, ls  // ls = plast
    10f0:	cmp	w10, w11
    10f4:	b.eq	1044 <init_types+0x698>  // b.none
    10f8:	ldr	x10, [x19, #480]
    10fc:	and	x8, x9, x8
    1100:	cmp	x10, x8
    1104:	b.cc	1044 <init_types+0x698>  // b.lo, b.ul, b.last
    1108:	ldr	x9, [x19, #448]
    110c:	str	w21, [x9, x8, lsl #2]
    1110:	b	1044 <init_types+0x698>
    1114:	mov	w0, wzr
    1118:	b	cc0 <init_types+0x314>
    111c:	mov	x0, x19
    1120:	mov	x1, x20
    1124:	bl	1d38 <upgrade_types>
    1128:	b	a34 <init_types+0x88>
    112c:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1130:	adrp	x1, 0 <ctf_set_ctl_hashes>
    1134:	adrp	x3, 0 <ctf_set_ctl_hashes>
    1138:	add	x0, x0, #0x0
    113c:	add	x1, x1, #0x0
    1140:	add	x3, x3, #0x0
    1144:	mov	w2, #0x29c                 	// #668
    1148:	bl	0 <__assert_fail>

000000000000114c <init_symtab>:
    114c:	sub	sp, sp, #0x90
    1150:	stp	x29, x30, [sp, #48]
    1154:	stp	x28, x27, [sp, #64]
    1158:	stp	x26, x25, [sp, #80]
    115c:	stp	x24, x23, [sp, #96]
    1160:	stp	x22, x21, [sp, #112]
    1164:	stp	x20, x19, [sp, #128]
    1168:	stp	x0, x1, [sp, #8]
    116c:	ldr	x8, [x0, #432]
    1170:	add	x29, sp, #0x30
    1174:	cmp	x8, #0x1
    1178:	b.lt	12fc <init_symtab+0x1b0>  // b.tstop
    117c:	ldr	x9, [sp, #8]
    1180:	ldr	x23, [x2, #8]
    1184:	adrp	x25, 31 <ctf_set_ctl_hashes+0x31>
    1188:	mov	x19, x3
    118c:	ldr	x28, [x9, #424]
    1190:	ldr	x9, [sp, #16]
    1194:	mov	x20, x2
    1198:	add	x25, x25, #0x0
    119c:	mov	w22, #0xffffffff            	// #-1
    11a0:	ldp	w10, w9, [x9, #20]
    11a4:	add	x24, x28, x8, lsl #2
    11a8:	stp	w9, w10, [sp]
    11ac:	ldr	x8, [x20, #24]
    11b0:	cmp	x8, #0x10
    11b4:	b.ne	11cc <init_symtab+0x80>  // b.any
    11b8:	add	x1, sp, #0x18
    11bc:	mov	x0, x23
    11c0:	bl	0 <ctf_sym_to_elf64>
    11c4:	mov	x26, x0
    11c8:	b	11d0 <init_symtab+0x84>
    11cc:	mov	x26, x23
    11d0:	ldr	w8, [x26]
    11d4:	ldr	x9, [x19, #16]
    11d8:	mov	x27, x25
    11dc:	cmp	x9, x8
    11e0:	b.ls	11ec <init_symtab+0xa0>  // b.plast
    11e4:	ldr	x9, [x19, #8]
    11e8:	add	x27, x9, x8
    11ec:	cbz	w8, 12d4 <init_symtab+0x188>
    11f0:	ldrh	w21, [x26, #6]
    11f4:	cbz	w21, 12d4 <init_symtab+0x188>
    11f8:	adrp	x1, 0 <ctf_set_ctl_hashes>
    11fc:	mov	x0, x27
    1200:	add	x1, x1, #0x0
    1204:	bl	0 <strcmp>
    1208:	cbz	w0, 12d4 <init_symtab+0x188>
    120c:	adrp	x1, 0 <ctf_set_ctl_hashes>
    1210:	mov	x0, x27
    1214:	add	x1, x1, #0x0
    1218:	bl	0 <strcmp>
    121c:	cbz	w0, 12d4 <init_symtab+0x188>
    1220:	ldrb	w8, [x26, #4]
    1224:	and	w8, w8, #0xf
    1228:	cmp	w8, #0x2
    122c:	b.eq	1274 <init_symtab+0x128>  // b.none
    1230:	cmp	w8, #0x1
    1234:	b.ne	12d4 <init_symtab+0x188>  // b.any
    1238:	ldr	x8, [sp, #16]
    123c:	ldr	w9, [sp, #4]
    1240:	ldr	w8, [x8, #24]
    1244:	cmp	w9, w8
    1248:	b.cs	12d4 <init_symtab+0x188>  // b.hs, b.nlast
    124c:	mov	w8, #0xfff1                	// #65521
    1250:	cmp	w21, w8
    1254:	b.ne	1260 <init_symtab+0x114>  // b.any
    1258:	ldr	x8, [x26, #8]
    125c:	cbz	x8, 12d4 <init_symtab+0x188>
    1260:	ldr	w8, [sp, #4]
    1264:	str	w8, [x28]
    1268:	add	w8, w8, #0x4
    126c:	str	w8, [sp, #4]
    1270:	b	12d8 <init_symtab+0x18c>
    1274:	ldr	x8, [sp, #16]
    1278:	ldr	w26, [sp]
    127c:	ldr	w8, [x8, #28]
    1280:	cmp	w26, w8
    1284:	b.cs	12d4 <init_symtab+0x188>  // b.hs, b.nlast
    1288:	ldr	x21, [sp, #8]
    128c:	str	w26, [x28]
    1290:	ldr	x8, [x21, #408]
    1294:	ldr	x9, [x21]
    1298:	ldr	w27, [x8, w26, uxtw]
    129c:	ldr	x8, [x9, #16]
    12a0:	mov	w0, w27
    12a4:	blr	x8
    12a8:	ldr	x8, [x21]
    12ac:	mov	w21, w0
    12b0:	mov	w0, w27
    12b4:	ldr	x8, [x8]
    12b8:	blr	x8
    12bc:	orr	w8, w0, w21
    12c0:	cbz	w8, 12f0 <init_symtab+0x1a4>
    12c4:	add	w8, w26, w21, lsl #2
    12c8:	add	w8, w8, #0x8
    12cc:	str	w8, [sp]
    12d0:	b	12d8 <init_symtab+0x18c>
    12d4:	str	w22, [x28]
    12d8:	ldr	x8, [x20, #24]
    12dc:	add	x28, x28, #0x4
    12e0:	cmp	x28, x24
    12e4:	add	x23, x23, x8
    12e8:	b.cc	11ac <init_symtab+0x60>  // b.lo, b.ul, b.last
    12ec:	b	12fc <init_symtab+0x1b0>
    12f0:	add	w26, w26, #0x4
    12f4:	str	w26, [sp]
    12f8:	b	12d8 <init_symtab+0x18c>
    12fc:	ldr	x8, [sp, #8]
    1300:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1304:	add	x0, x0, #0x0
    1308:	ldr	x1, [x8, #432]
    130c:	bl	0 <ctf_dprintf>
    1310:	ldp	x20, x19, [sp, #128]
    1314:	ldp	x22, x21, [sp, #112]
    1318:	ldp	x24, x23, [sp, #96]
    131c:	ldp	x26, x25, [sp, #80]
    1320:	ldp	x28, x27, [sp, #64]
    1324:	ldp	x29, x30, [sp, #48]
    1328:	add	sp, sp, #0x90
    132c:	ret

0000000000001330 <ctf_setmodel>:
    1330:	stp	x29, x30, [sp, #-16]!
    1334:	adrp	x8, 0 <ctf_set_ctl_hashes>
    1338:	add	x8, x8, #0x0
    133c:	mov	x29, sp
    1340:	ldr	w9, [x8, #8]
    1344:	cmp	w9, w1
    1348:	b.eq	1364 <ctf_setmodel+0x34>  // b.none
    134c:	ldr	x9, [x8, #56]!
    1350:	cbnz	x9, 1340 <ctf_setmodel+0x10>
    1354:	mov	w1, #0x16                  	// #22
    1358:	bl	0 <ctf_set_errno>
    135c:	mov	x1, x0
    1360:	b	136c <ctf_setmodel+0x3c>
    1364:	mov	w1, wzr
    1368:	str	x8, [x0, #488]
    136c:	mov	w0, w1
    1370:	ldp	x29, x30, [sp], #16
    1374:	ret

0000000000001378 <ctf_file_close>:
    1378:	stp	x29, x30, [sp, #-32]!
    137c:	stp	x20, x19, [sp, #16]
    1380:	mov	x29, sp
    1384:	cbz	x0, 1528 <ctf_file_close+0x1b0>
    1388:	ldr	w2, [x0, #548]
    138c:	mov	x19, x0
    1390:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1394:	add	x0, x0, #0x0
    1398:	mov	x1, x19
    139c:	bl	0 <ctf_dprintf>
    13a0:	ldr	w8, [x19, #548]
    13a4:	cmp	w8, #0x2
    13a8:	b.cc	13b8 <ctf_file_close+0x40>  // b.lo, b.ul, b.last
    13ac:	sub	w8, w8, #0x1
    13b0:	str	w8, [x19, #548]
    13b4:	b	1528 <ctf_file_close+0x1b0>
    13b8:	ldr	x0, [x19, #504]
    13bc:	bl	0 <free>
    13c0:	ldr	x0, [x19, #536]
    13c4:	bl	0 <free>
    13c8:	ldr	x0, [x19, #512]
    13cc:	bl	1378 <ctf_file_close>
    13d0:	ldr	x1, [x19, #584]
    13d4:	cbz	x1, 13ec <ctf_file_close+0x74>
    13d8:	ldr	x20, [x1, #8]
    13dc:	mov	x0, x19
    13e0:	bl	0 <ctf_dtd_delete>
    13e4:	mov	x1, x20
    13e8:	cbnz	x20, 13d8 <ctf_file_close+0x60>
    13ec:	ldr	x0, [x19, #568]
    13f0:	bl	0 <ctf_dynhash_destroy>
    13f4:	ldrb	w8, [x19, #552]
    13f8:	tbnz	w8, #1, 1428 <ctf_file_close+0xb0>
    13fc:	ldr	x0, [x19, #152]
    1400:	bl	0 <ctf_hash_destroy>
    1404:	ldr	x0, [x19, #168]
    1408:	bl	0 <ctf_hash_destroy>
    140c:	ldr	x0, [x19, #184]
    1410:	bl	0 <ctf_hash_destroy>
    1414:	ldr	x0, [x19, #200]
    1418:	bl	0 <ctf_hash_destroy>
    141c:	ldr	x1, [x19, #608]
    1420:	cbnz	x1, 1450 <ctf_file_close+0xd8>
    1424:	b	1464 <ctf_file_close+0xec>
    1428:	ldr	x0, [x19, #160]
    142c:	bl	0 <ctf_dynhash_destroy>
    1430:	ldr	x0, [x19, #176]
    1434:	bl	0 <ctf_dynhash_destroy>
    1438:	ldr	x0, [x19, #192]
    143c:	bl	0 <ctf_dynhash_destroy>
    1440:	ldr	x0, [x19, #208]
    1444:	bl	0 <ctf_dynhash_destroy>
    1448:	ldr	x1, [x19, #608]
    144c:	cbz	x1, 1464 <ctf_file_close+0xec>
    1450:	ldr	x20, [x1, #8]
    1454:	mov	x0, x19
    1458:	bl	0 <ctf_dvd_delete>
    145c:	mov	x1, x20
    1460:	cbnz	x20, 1450 <ctf_file_close+0xd8>
    1464:	ldr	x0, [x19, #592]
    1468:	bl	0 <ctf_dynhash_destroy>
    146c:	mov	x0, x19
    1470:	bl	0 <ctf_str_free_atoms>
    1474:	ldr	x0, [x19, #704]
    1478:	bl	0 <free>
    147c:	ldr	x0, [x19, #24]
    1480:	adrp	x20, 31 <ctf_set_ctl_hashes+0x31>
    1484:	add	x20, x20, #0x0
    1488:	cmp	x0, x20
    148c:	b.eq	1494 <ctf_file_close+0x11c>  // b.none
    1490:	bl	0 <free>
    1494:	ldr	x0, [x19, #56]
    1498:	cmp	x0, x20
    149c:	b.eq	14a4 <ctf_file_close+0x12c>  // b.none
    14a0:	bl	0 <free>
    14a4:	ldr	x0, [x19, #88]
    14a8:	cmp	x0, x20
    14ac:	b.eq	14b8 <ctf_file_close+0x140>  // b.none
    14b0:	bl	0 <free>
    14b4:	b	14c8 <ctf_file_close+0x150>
    14b8:	ldr	x0, [x19, #136]
    14bc:	cbz	x0, 14c8 <ctf_file_close+0x150>
    14c0:	ldr	x1, [x19, #144]
    14c4:	bl	0 <ctf_munmap>
    14c8:	ldr	x0, [x19, #400]
    14cc:	bl	0 <free>
    14d0:	ldr	x0, [x19, #128]
    14d4:	bl	0 <ctf_dynhash_destroy>
    14d8:	ldr	x0, [x19, #648]
    14dc:	bl	0 <ctf_dynhash_destroy>
    14e0:	ldr	x0, [x19, #656]
    14e4:	bl	0 <ctf_dynhash_destroy>
    14e8:	ldr	x0, [x19, #664]
    14ec:	bl	0 <ctf_dynhash_destroy>
    14f0:	ldr	x0, [x19, #672]
    14f4:	bl	0 <ctf_dynhash_destroy>
    14f8:	ldr	x0, [x19, #696]
    14fc:	bl	0 <ctf_dynhash_destroy>
    1500:	ldr	x0, [x19, #424]
    1504:	bl	0 <free>
    1508:	ldr	x0, [x19, #440]
    150c:	bl	0 <free>
    1510:	ldr	x0, [x19, #448]
    1514:	bl	0 <free>
    1518:	ldr	x0, [x19, #8]
    151c:	bl	0 <free>
    1520:	mov	x0, x19
    1524:	bl	0 <free>
    1528:	ldp	x20, x19, [sp, #16]
    152c:	ldp	x29, x30, [sp], #32
    1530:	ret

0000000000001534 <ctf_close>:
    1534:	stp	x29, x30, [sp, #-16]!
    1538:	mov	x29, sp
    153c:	bl	0 <ctf_arc_close>
    1540:	ldp	x29, x30, [sp], #16
    1544:	ret

0000000000001548 <ctf_get_arc>:
    1548:	ldr	x0, [x0, #640]
    154c:	ret

0000000000001550 <ctf_getdatasect>:
    1550:	ldur	q0, [x0, #40]
    1554:	ldur	q1, [x0, #24]
    1558:	stp	q1, q0, [x8]
    155c:	ret

0000000000001560 <ctf_parent_file>:
    1560:	ldr	x0, [x0, #512]
    1564:	ret

0000000000001568 <ctf_parent_name>:
    1568:	ldr	x0, [x0, #528]
    156c:	ret

0000000000001570 <ctf_parent_name_set>:
    1570:	stp	x29, x30, [sp, #-32]!
    1574:	stp	x20, x19, [sp, #16]
    1578:	mov	x19, x0
    157c:	ldr	x0, [x0, #536]
    1580:	mov	x20, x1
    1584:	mov	x29, sp
    1588:	cbz	x0, 1590 <ctf_parent_name_set+0x20>
    158c:	bl	0 <free>
    1590:	mov	x0, x20
    1594:	bl	0 <strdup>
    1598:	str	x0, [x19, #536]
    159c:	cbz	x0, 15b0 <ctf_parent_name_set+0x40>
    15a0:	mov	x8, x0
    15a4:	mov	w0, wzr
    15a8:	str	x8, [x19, #528]
    15ac:	b	15bc <ctf_parent_name_set+0x4c>
    15b0:	mov	w1, #0xc                   	// #12
    15b4:	mov	x0, x19
    15b8:	bl	0 <ctf_set_errno>
    15bc:	ldp	x20, x19, [sp, #16]
    15c0:	ldp	x29, x30, [sp], #32
    15c4:	ret

00000000000015c8 <ctf_cuname>:
    15c8:	ldr	x0, [x0, #496]
    15cc:	ret

00000000000015d0 <ctf_cuname_set>:
    15d0:	stp	x29, x30, [sp, #-32]!
    15d4:	stp	x20, x19, [sp, #16]
    15d8:	mov	x19, x0
    15dc:	ldr	x0, [x0, #504]
    15e0:	mov	x20, x1
    15e4:	mov	x29, sp
    15e8:	cbz	x0, 15f0 <ctf_cuname_set+0x20>
    15ec:	bl	0 <free>
    15f0:	mov	x0, x20
    15f4:	bl	0 <strdup>
    15f8:	str	x0, [x19, #504]
    15fc:	cbz	x0, 1610 <ctf_cuname_set+0x40>
    1600:	mov	x8, x0
    1604:	mov	w0, wzr
    1608:	str	x8, [x19, #496]
    160c:	b	161c <ctf_cuname_set+0x4c>
    1610:	mov	w1, #0xc                   	// #12
    1614:	mov	x0, x19
    1618:	bl	0 <ctf_set_errno>
    161c:	ldp	x20, x19, [sp, #16]
    1620:	ldp	x29, x30, [sp], #32
    1624:	ret

0000000000001628 <ctf_import>:
    1628:	stp	x29, x30, [sp, #-32]!
    162c:	stp	x20, x19, [sp, #16]
    1630:	mov	x19, x0
    1634:	mov	x29, sp
    1638:	cbz	x0, 166c <ctf_import+0x44>
    163c:	mov	x20, x1
    1640:	cmp	x19, x1
    1644:	b.eq	166c <ctf_import+0x44>  // b.none
    1648:	cbz	x20, 1684 <ctf_import+0x5c>
    164c:	ldr	w8, [x20, #548]
    1650:	cbz	w8, 166c <ctf_import+0x44>
    1654:	ldr	x8, [x20, #488]
    1658:	ldr	x9, [x19, #488]
    165c:	cmp	x8, x9
    1660:	b.eq	1684 <ctf_import+0x5c>  // b.none
    1664:	mov	w1, #0x3f4                 	// #1012
    1668:	b	1670 <ctf_import+0x48>
    166c:	mov	w1, #0x16                  	// #22
    1670:	mov	x0, x19
    1674:	bl	0 <ctf_set_errno>
    1678:	ldp	x20, x19, [sp, #16]
    167c:	ldp	x29, x30, [sp], #32
    1680:	ret
    1684:	ldr	x0, [x19, #512]
    1688:	cbz	x0, 16a0 <ctf_import+0x78>
    168c:	ldr	w8, [x0, #548]
    1690:	sub	w8, w8, #0x1
    1694:	str	w8, [x0, #548]
    1698:	bl	1378 <ctf_file_close>
    169c:	str	xzr, [x19, #512]
    16a0:	cbz	x20, 16e0 <ctf_import+0xb8>
    16a4:	ldr	x8, [x19, #528]
    16a8:	cbnz	x8, 16c0 <ctf_import+0x98>
    16ac:	adrp	x1, 0 <ctf_set_ctl_hashes>
    16b0:	add	x1, x1, #0x0
    16b4:	mov	x0, x19
    16b8:	bl	1570 <ctf_parent_name_set>
    16bc:	tbnz	w0, #31, 16ec <ctf_import+0xc4>
    16c0:	ldr	w8, [x19, #552]
    16c4:	orr	w8, w8, #0x1
    16c8:	str	w8, [x19, #552]
    16cc:	ldr	w8, [x20, #548]
    16d0:	add	w8, w8, #0x1
    16d4:	str	w8, [x20, #548]
    16d8:	mov	w8, #0x1                   	// #1
    16dc:	cbz	w8, 1678 <ctf_import+0x50>
    16e0:	mov	w0, wzr
    16e4:	str	x20, [x19, #512]
    16e8:	b	1678 <ctf_import+0x50>
    16ec:	mov	w8, wzr
    16f0:	cbz	w8, 1678 <ctf_import+0x50>
    16f4:	b	16e0 <ctf_import+0xb8>

00000000000016f8 <ctf_getmodel>:
    16f8:	ldr	x8, [x0, #488]
    16fc:	ldr	w0, [x8, #8]
    1700:	ret

0000000000001704 <ctf_setspecific>:
    1704:	str	x1, [x0, #720]
    1708:	ret

000000000000170c <ctf_getspecific>:
    170c:	ldr	x0, [x0, #720]
    1710:	ret

0000000000001714 <__bswap_32>:
    1714:	rev	w0, w0
    1718:	ret

000000000000171c <get_kind_v1>:
    171c:	ubfx	w0, w0, #11, #5
    1720:	ret

0000000000001724 <get_root_v1>:
    1724:	ubfx	w0, w0, #10, #1
    1728:	ret

000000000000172c <get_vlen_v1>:
    172c:	and	w0, w0, #0x3ff
    1730:	ret

0000000000001734 <get_ctt_size_v1>:
    1734:	stp	x29, x30, [sp, #-16]!
    1738:	mov	x0, x2
    173c:	ldp	w9, w2, [x1, #8]
    1740:	mov	x8, x3
    1744:	ldrh	w3, [x1, #6]
    1748:	mov	w4, #0x10                  	// #16
    174c:	bfi	x2, x9, #32, #32
    1750:	mov	w5, #0x8                   	// #8
    1754:	mov	w6, #0xffff                	// #65535
    1758:	mov	x1, x8
    175c:	mov	x29, sp
    1760:	bl	1894 <get_ctt_size_common>
    1764:	ldp	x29, x30, [sp], #16
    1768:	ret

000000000000176c <get_vbytes_v1>:
    176c:	and	w8, w0, #0xffff
    1770:	sub	w9, w8, #0x6
    1774:	cmp	w9, #0x2
    1778:	b.cc	179c <get_vbytes_v1+0x30>  // b.lo, b.ul, b.last
    177c:	cmp	w8, #0x4
    1780:	b.eq	17ac <get_vbytes_v1+0x40>  // b.none
    1784:	cmp	w8, #0x5
    1788:	b.ne	17b4 <get_vbytes_v1+0x48>  // b.any
    178c:	and	x8, x2, #0x1
    1790:	add	x8, x8, x2
    1794:	lsl	x0, x8, #1
    1798:	ret
    179c:	cmp	x1, #0x2, lsl #12
    17a0:	b.ge	17cc <get_vbytes_v1+0x60>  // b.tcont
    17a4:	lsl	x0, x2, #3
    17a8:	ret
    17ac:	mov	w0, #0x8                   	// #8
    17b0:	ret
    17b4:	stp	x29, x30, [sp, #-16]!
    17b8:	mov	x1, x2
    17bc:	mov	x29, sp
    17c0:	bl	18b8 <get_vbytes_common>
    17c4:	ldp	x29, x30, [sp], #16
    17c8:	ret
    17cc:	lsl	x0, x2, #4
    17d0:	ret

00000000000017d4 <get_kind_v2>:
    17d4:	lsr	w0, w0, #26
    17d8:	ret

00000000000017dc <get_root_v2>:
    17dc:	ubfx	w0, w0, #25, #1
    17e0:	ret

00000000000017e4 <get_vlen_v2>:
    17e4:	and	w0, w0, #0xffffff
    17e8:	ret

00000000000017ec <get_ctt_size_v2>:
    17ec:	stp	x29, x30, [sp, #-16]!
    17f0:	mov	x0, x2
    17f4:	ldp	w9, w2, [x1, #12]
    17f8:	mov	x8, x3
    17fc:	ldr	w3, [x1, #8]
    1800:	mov	w4, #0x14                  	// #20
    1804:	bfi	x2, x9, #32, #32
    1808:	mov	w5, #0xc                   	// #12
    180c:	mov	w6, #0xffffffff            	// #-1
    1810:	mov	x1, x8
    1814:	mov	x29, sp
    1818:	bl	1894 <get_ctt_size_common>
    181c:	ldp	x29, x30, [sp], #16
    1820:	ret

0000000000001824 <get_vbytes_v2>:
    1824:	and	w8, w0, #0xffff
    1828:	sub	w9, w8, #0x6
    182c:	cmp	w9, #0x2
    1830:	b.cc	1854 <get_vbytes_v2+0x30>  // b.lo, b.ul, b.last
    1834:	cmp	w8, #0x4
    1838:	b.eq	186c <get_vbytes_v2+0x48>  // b.none
    183c:	cmp	w8, #0x5
    1840:	b.ne	1874 <get_vbytes_v2+0x50>  // b.any
    1844:	and	x8, x2, #0x1
    1848:	add	x8, x8, x2
    184c:	lsl	x0, x8, #2
    1850:	ret
    1854:	mov	w8, #0x1fffffff            	// #536870911
    1858:	cmp	x1, x8
    185c:	b.gt	188c <get_vbytes_v2+0x68>
    1860:	add	x8, x2, x2, lsl #1
    1864:	lsl	x0, x8, #2
    1868:	ret
    186c:	mov	w0, #0xc                   	// #12
    1870:	ret
    1874:	stp	x29, x30, [sp, #-16]!
    1878:	mov	x1, x2
    187c:	mov	x29, sp
    1880:	bl	18b8 <get_vbytes_common>
    1884:	ldp	x29, x30, [sp], #16
    1888:	ret
    188c:	lsl	x0, x2, #4
    1890:	ret

0000000000001894 <get_ctt_size_common>:
    1894:	cmp	x3, x6
    1898:	mov	x8, x0
    189c:	csel	x0, x2, x3, eq  // eq = none
    18a0:	csel	x9, x4, x5, eq  // eq = none
    18a4:	cbz	x8, 18ac <get_ctt_size_common+0x18>
    18a8:	str	x0, [x8]
    18ac:	cbz	x1, 18b4 <get_ctt_size_common+0x20>
    18b0:	str	x9, [x1]
    18b4:	ret

00000000000018b8 <get_vbytes_common>:
    18b8:	and	w8, w0, #0xffff
    18bc:	cmp	w8, #0xe
    18c0:	b.hi	18fc <get_vbytes_common+0x44>  // b.pmore
    18c4:	adrp	x10, 0 <ctf_set_ctl_hashes>
    18c8:	and	x9, x0, #0xffff
    18cc:	add	x10, x10, #0x0
    18d0:	adr	x11, 18e4 <get_vbytes_common+0x2c>
    18d4:	ldrb	w12, [x10, x9]
    18d8:	add	x11, x11, x12, lsl #2
    18dc:	mov	w0, #0x4                   	// #4
    18e0:	br	x11
    18e4:	mov	x0, xzr
    18e8:	ret
    18ec:	lsl	x0, x1, #3
    18f0:	ret
    18f4:	mov	w0, #0x8                   	// #8
    18f8:	ret
    18fc:	stp	x29, x30, [sp, #-16]!
    1900:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1904:	add	x0, x0, #0x0
    1908:	mov	w1, w8
    190c:	mov	x29, sp
    1910:	bl	0 <ctf_dprintf>
    1914:	mov	w0, #0x3ef                 	// #1007
    1918:	ldp	x29, x30, [sp], #16
    191c:	ret

0000000000001920 <flip_lbls>:
    1920:	stp	x29, x30, [sp, #-32]!
    1924:	lsr	x8, x1, #3
    1928:	stp	x20, x19, [sp, #16]
    192c:	mov	x29, sp
    1930:	cbz	x8, 1968 <flip_lbls+0x48>
    1934:	mov	x19, x0
    1938:	add	x20, x8, #0x1
    193c:	ldr	w0, [x19]
    1940:	bl	1714 <__bswap_32>
    1944:	ldr	w8, [x19, #4]
    1948:	str	w0, [x19]
    194c:	mov	w0, w8
    1950:	bl	1714 <__bswap_32>
    1954:	sub	x20, x20, #0x1
    1958:	str	w0, [x19, #4]
    195c:	cmp	x20, #0x1
    1960:	add	x19, x19, #0x8
    1964:	b.gt	193c <flip_lbls+0x1c>
    1968:	ldp	x20, x19, [sp, #16]
    196c:	ldp	x29, x30, [sp], #32
    1970:	ret

0000000000001974 <flip_objts>:
    1974:	stp	x29, x30, [sp, #-32]!
    1978:	lsr	x8, x1, #2
    197c:	stp	x20, x19, [sp, #16]
    1980:	mov	x29, sp
    1984:	cbz	x8, 19a8 <flip_objts+0x34>
    1988:	mov	x19, x0
    198c:	add	x20, x8, #0x1
    1990:	ldr	w0, [x19]
    1994:	bl	1714 <__bswap_32>
    1998:	sub	x20, x20, #0x1
    199c:	cmp	x20, #0x1
    19a0:	str	w0, [x19], #4
    19a4:	b.gt	1990 <flip_objts+0x1c>
    19a8:	ldp	x20, x19, [sp, #16]
    19ac:	ldp	x29, x30, [sp], #32
    19b0:	ret

00000000000019b4 <flip_vars>:
    19b4:	stp	x29, x30, [sp, #-32]!
    19b8:	lsr	x8, x1, #3
    19bc:	stp	x20, x19, [sp, #16]
    19c0:	mov	x29, sp
    19c4:	cbz	x8, 19fc <flip_vars+0x48>
    19c8:	mov	x19, x0
    19cc:	add	x20, x8, #0x1
    19d0:	ldr	w0, [x19]
    19d4:	bl	1714 <__bswap_32>
    19d8:	ldr	w8, [x19, #4]
    19dc:	str	w0, [x19]
    19e0:	mov	w0, w8
    19e4:	bl	1714 <__bswap_32>
    19e8:	sub	x20, x20, #0x1
    19ec:	str	w0, [x19, #4]
    19f0:	cmp	x20, #0x1
    19f4:	add	x19, x19, #0x8
    19f8:	b.gt	19d0 <flip_vars+0x1c>
    19fc:	ldp	x20, x19, [sp, #16]
    1a00:	ldp	x29, x30, [sp], #32
    1a04:	ret

0000000000001a08 <flip_types>:
    1a08:	stp	x29, x30, [sp, #-96]!
    1a0c:	str	x27, [sp, #16]
    1a10:	stp	x20, x19, [sp, #80]
    1a14:	adrp	x20, 0 <ctf_set_ctl_hashes>
    1a18:	adrp	x27, 0 <ctf_set_ctl_hashes>
    1a1c:	stp	x26, x25, [sp, #32]
    1a20:	mov	x19, x0
    1a24:	add	x26, x0, x1
    1a28:	add	x20, x20, #0x0
    1a2c:	add	x27, x27, #0x0
    1a30:	stp	x24, x23, [sp, #48]
    1a34:	stp	x22, x21, [sp, #64]
    1a38:	mov	x29, sp
    1a3c:	cmp	x26, x19
    1a40:	b.ls	1cb0 <flip_types+0x2a8>  // b.plast
    1a44:	ldr	w0, [x19]
    1a48:	bl	1714 <__bswap_32>
    1a4c:	ldr	w8, [x19, #4]
    1a50:	str	w0, [x19]
    1a54:	mov	w0, w8
    1a58:	bl	1714 <__bswap_32>
    1a5c:	ldr	w8, [x19, #8]
    1a60:	mov	w21, w0
    1a64:	str	w0, [x19, #4]
    1a68:	mov	w0, w8
    1a6c:	bl	1714 <__bswap_32>
    1a70:	lsr	w23, w21, #26
    1a74:	mov	w24, w0
    1a78:	and	w22, w21, #0xffffff
    1a7c:	mov	w25, w0
    1a80:	str	w0, [x19, #8]
    1a84:	mov	w0, w23
    1a88:	mov	x1, x24
    1a8c:	mov	x2, x22
    1a90:	bl	1824 <get_vbytes_v2>
    1a94:	cmn	w25, #0x1
    1a98:	mov	x21, x0
    1a9c:	b.eq	1c24 <flip_types+0x21c>  // b.none
    1aa0:	mov	w8, #0xc                   	// #12
    1aa4:	cmp	w23, #0xe
    1aa8:	add	x19, x8, x19
    1aac:	b.hi	1c0c <flip_types+0x204>  // b.pmore
    1ab0:	adr	x8, 1ac0 <flip_types+0xb8>
    1ab4:	ldrb	w9, [x27, x23]
    1ab8:	add	x8, x8, x9, lsl #2
    1abc:	br	x8
    1ac0:	cbz	x21, 1bfc <flip_types+0x1f4>
    1ac4:	b	1cd8 <flip_types+0x2d0>
    1ac8:	ldr	w0, [x19]
    1acc:	bl	1714 <__bswap_32>
    1ad0:	str	w0, [x19]
    1ad4:	b	1bfc <flip_types+0x1f4>
    1ad8:	lsr	x8, x24, #29
    1adc:	cbnz	x8, 1c54 <flip_types+0x24c>
    1ae0:	cbz	w22, 1bfc <flip_types+0x1f4>
    1ae4:	add	x22, x22, #0x1
    1ae8:	mov	x23, x19
    1aec:	ldr	w0, [x23]
    1af0:	bl	1714 <__bswap_32>
    1af4:	ldr	w8, [x23, #4]
    1af8:	str	w0, [x23]
    1afc:	mov	w0, w8
    1b00:	bl	1714 <__bswap_32>
    1b04:	ldr	w8, [x23, #8]
    1b08:	str	w0, [x23, #4]
    1b0c:	mov	w0, w8
    1b10:	bl	1714 <__bswap_32>
    1b14:	sub	x22, x22, #0x1
    1b18:	str	w0, [x23, #8]
    1b1c:	cmp	x22, #0x1
    1b20:	add	x23, x23, #0xc
    1b24:	b.gt	1aec <flip_types+0xe4>
    1b28:	b	1bfc <flip_types+0x1f4>
    1b2c:	cbz	w22, 1bfc <flip_types+0x1f4>
    1b30:	add	x22, x22, #0x1
    1b34:	mov	x23, x19
    1b38:	ldr	w0, [x23]
    1b3c:	bl	1714 <__bswap_32>
    1b40:	ldr	w8, [x23, #4]
    1b44:	str	w0, [x23]
    1b48:	mov	w0, w8
    1b4c:	bl	1714 <__bswap_32>
    1b50:	sub	x22, x22, #0x1
    1b54:	str	w0, [x23, #4]
    1b58:	cmp	x22, #0x1
    1b5c:	add	x23, x23, #0x8
    1b60:	b.gt	1b38 <flip_types+0x130>
    1b64:	b	1bfc <flip_types+0x1f4>
    1b68:	cbz	w22, 1bfc <flip_types+0x1f4>
    1b6c:	add	x22, x22, #0x1
    1b70:	mov	x23, x19
    1b74:	ldr	w0, [x23]
    1b78:	bl	1714 <__bswap_32>
    1b7c:	sub	x22, x22, #0x1
    1b80:	cmp	x22, #0x1
    1b84:	str	w0, [x23], #4
    1b88:	b.gt	1b74 <flip_types+0x16c>
    1b8c:	b	1bfc <flip_types+0x1f4>
    1b90:	cmp	x21, #0x8
    1b94:	b.ne	1cf8 <flip_types+0x2f0>  // b.any
    1b98:	ldr	w0, [x19]
    1b9c:	bl	1714 <__bswap_32>
    1ba0:	ldrh	w8, [x19, #4]
    1ba4:	str	w0, [x19]
    1ba8:	mov	w0, w8
    1bac:	bl	70c <__bswap_16>
    1bb0:	ldrh	w8, [x19, #6]
    1bb4:	strh	w0, [x19, #4]
    1bb8:	mov	w0, w8
    1bbc:	bl	70c <__bswap_16>
    1bc0:	strh	w0, [x19, #6]
    1bc4:	b	1bfc <flip_types+0x1f4>
    1bc8:	cmp	x21, #0xc
    1bcc:	b.ne	1d18 <flip_types+0x310>  // b.any
    1bd0:	ldr	w0, [x19]
    1bd4:	bl	1714 <__bswap_32>
    1bd8:	ldr	w8, [x19, #4]
    1bdc:	str	w0, [x19]
    1be0:	mov	w0, w8
    1be4:	bl	1714 <__bswap_32>
    1be8:	ldr	w8, [x19, #8]
    1bec:	str	w0, [x19, #4]
    1bf0:	mov	w0, w8
    1bf4:	bl	1714 <__bswap_32>
    1bf8:	str	w0, [x19, #8]
    1bfc:	add	x19, x19, x21
    1c00:	mov	w8, #0x1                   	// #1
    1c04:	tbnz	w8, #0, 1a3c <flip_types+0x34>
    1c08:	b	1cb8 <flip_types+0x2b0>
    1c0c:	mov	x0, x20
    1c10:	mov	w1, w23
    1c14:	bl	0 <ctf_dprintf>
    1c18:	mov	w8, wzr
    1c1c:	tbnz	w8, #0, 1a3c <flip_types+0x34>
    1c20:	b	1cb8 <flip_types+0x2b0>
    1c24:	ldr	w0, [x19, #12]
    1c28:	bl	1714 <__bswap_32>
    1c2c:	ldr	w8, [x19, #16]
    1c30:	mov	w25, w0
    1c34:	str	w0, [x19, #12]
    1c38:	mov	w0, w8
    1c3c:	bl	1714 <__bswap_32>
    1c40:	mov	w24, w0
    1c44:	bfi	x24, x25, #32, #32
    1c48:	mov	w8, #0x14                  	// #20
    1c4c:	str	w0, [x19, #16]
    1c50:	b	1aa4 <flip_types+0x9c>
    1c54:	cbz	w22, 1bfc <flip_types+0x1f4>
    1c58:	add	x22, x22, #0x1
    1c5c:	mov	x23, x19
    1c60:	ldr	w0, [x23]
    1c64:	bl	1714 <__bswap_32>
    1c68:	ldr	w8, [x23, #4]
    1c6c:	str	w0, [x23]
    1c70:	mov	w0, w8
    1c74:	bl	1714 <__bswap_32>
    1c78:	ldr	w8, [x23, #8]
    1c7c:	str	w0, [x23, #4]
    1c80:	mov	w0, w8
    1c84:	bl	1714 <__bswap_32>
    1c88:	ldr	w8, [x23, #12]
    1c8c:	str	w0, [x23, #8]
    1c90:	mov	w0, w8
    1c94:	bl	1714 <__bswap_32>
    1c98:	sub	x22, x22, #0x1
    1c9c:	str	w0, [x23, #12]
    1ca0:	cmp	x22, #0x1
    1ca4:	add	x23, x23, #0x10
    1ca8:	b.gt	1c60 <flip_types+0x258>
    1cac:	b	1bfc <flip_types+0x1f4>
    1cb0:	mov	w0, wzr
    1cb4:	b	1cbc <flip_types+0x2b4>
    1cb8:	mov	w0, #0x3ef                 	// #1007
    1cbc:	ldp	x20, x19, [sp, #80]
    1cc0:	ldp	x22, x21, [sp, #64]
    1cc4:	ldp	x24, x23, [sp, #48]
    1cc8:	ldp	x26, x25, [sp, #32]
    1ccc:	ldr	x27, [sp, #16]
    1cd0:	ldp	x29, x30, [sp], #96
    1cd4:	ret
    1cd8:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1cdc:	adrp	x1, 0 <ctf_set_ctl_hashes>
    1ce0:	adrp	x3, 0 <ctf_set_ctl_hashes>
    1ce4:	add	x0, x0, #0x0
    1ce8:	add	x1, x1, #0x0
    1cec:	add	x3, x3, #0x0
    1cf0:	mov	w2, #0x428                 	// #1064
    1cf4:	bl	0 <__assert_fail>
    1cf8:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1cfc:	adrp	x1, 0 <ctf_set_ctl_hashes>
    1d00:	adrp	x3, 0 <ctf_set_ctl_hashes>
    1d04:	add	x0, x0, #0x0
    1d08:	add	x1, x1, #0x0
    1d0c:	add	x3, x3, #0x0
    1d10:	mov	w2, #0x456                 	// #1110
    1d14:	bl	0 <__assert_fail>
    1d18:	adrp	x0, 0 <ctf_set_ctl_hashes>
    1d1c:	adrp	x1, 0 <ctf_set_ctl_hashes>
    1d20:	adrp	x3, 0 <ctf_set_ctl_hashes>
    1d24:	add	x0, x0, #0x0
    1d28:	add	x1, x1, #0x0
    1d2c:	add	x3, x3, #0x0
    1d30:	mov	w2, #0x448                 	// #1096
    1d34:	bl	0 <__assert_fail>

0000000000001d38 <upgrade_types>:
    1d38:	stp	x29, x30, [sp, #-32]!
    1d3c:	ldrb	w8, [x1, #2]
    1d40:	str	x19, [sp, #16]
    1d44:	mov	x19, x0
    1d48:	mov	x29, sp
    1d4c:	cmp	w8, #0x2
    1d50:	b.eq	1d64 <upgrade_types+0x2c>  // b.none
    1d54:	cmp	w8, #0x1
    1d58:	b.ne	1d6c <upgrade_types+0x34>  // b.any
    1d5c:	mov	x0, x19
    1d60:	bl	1d94 <upgrade_types_v1>
    1d64:	mov	w8, #0x7fff                	// #32767
    1d68:	str	w8, [x19, #544]
    1d6c:	ldr	x19, [sp, #16]
    1d70:	ldp	x29, x30, [sp], #32
    1d74:	ret

0000000000001d78 <ctf_get_ctt_size>:
    1d78:	stp	x29, x30, [sp, #-16]!
    1d7c:	ldr	x8, [x0]
    1d80:	mov	x29, sp
    1d84:	ldr	x8, [x8, #24]
    1d88:	blr	x8
    1d8c:	ldp	x29, x30, [sp], #16
    1d90:	ret

0000000000001d94 <upgrade_types_v1>:
    1d94:	sub	sp, sp, #0x90
    1d98:	stp	x29, x30, [sp, #48]
    1d9c:	stp	x28, x27, [sp, #64]
    1da0:	stp	x26, x25, [sp, #80]
    1da4:	stp	x24, x23, [sp, #96]
    1da8:	stp	x22, x21, [sp, #112]
    1dac:	stp	x20, x19, [sp, #128]
    1db0:	ldp	x19, x8, [x0, #400]
    1db4:	ldp	w9, w21, [x1, #40]
    1db8:	mov	x20, x0
    1dbc:	mov	x28, xzr
    1dc0:	add	x29, sp, #0x30
    1dc4:	add	x22, x8, x9
    1dc8:	cmp	w9, w21
    1dcc:	add	x8, x8, x21
    1dd0:	stp	x9, x1, [sp, #8]
    1dd4:	str	x8, [sp, #24]
    1dd8:	b.cs	1e7c <upgrade_types_v1+0xe8>  // b.hs, b.nlast
    1ddc:	mov	x23, x22
    1de0:	ldrh	w8, [x23, #4]
    1de4:	sub	x3, x29, #0x8
    1de8:	mov	x0, x20
    1dec:	mov	x1, x23
    1df0:	mov	x2, xzr
    1df4:	ubfx	x25, x8, #11, #21
    1df8:	and	x26, x8, #0x3ff
    1dfc:	bl	1734 <get_ctt_size_v1>
    1e00:	mov	x27, x0
    1e04:	mov	w0, w25
    1e08:	mov	x1, x27
    1e0c:	mov	x2, x26
    1e10:	bl	176c <get_vbytes_v1>
    1e14:	mov	x24, x0
    1e18:	sub	x1, x29, #0x10
    1e1c:	mov	x0, x23
    1e20:	bl	21d8 <get_ctt_size_v2_unconverted>
    1e24:	mov	w0, w25
    1e28:	mov	x1, x27
    1e2c:	mov	x2, x26
    1e30:	bl	1824 <get_vbytes_v2>
    1e34:	orr	x8, x24, x27
    1e38:	tbnz	x8, #63, 1e5c <upgrade_types_v1+0xc8>
    1e3c:	ldp	x8, x9, [x29, #-16]
    1e40:	sub	x10, x28, x24
    1e44:	add	x10, x10, x0
    1e48:	add	x8, x10, x8
    1e4c:	sub	x28, x8, x9
    1e50:	mov	w8, #0x1                   	// #1
    1e54:	cbnz	w8, 1e64 <upgrade_types_v1+0xd0>
    1e58:	b	2138 <upgrade_types_v1+0x3a4>
    1e5c:	mov	w8, wzr
    1e60:	cbz	w8, 2138 <upgrade_types_v1+0x3a4>
    1e64:	ldur	x8, [x29, #-8]
    1e68:	add	x9, x24, x23
    1e6c:	add	x23, x9, x8
    1e70:	ldr	x8, [sp, #24]
    1e74:	cmp	x23, x8
    1e78:	b.cc	1de0 <upgrade_types_v1+0x4c>  // b.lo, b.ul, b.last
    1e7c:	ldr	x8, [x20, #416]
    1e80:	add	x24, x8, x28
    1e84:	mov	x0, x24
    1e88:	bl	0 <malloc>
    1e8c:	cbz	x0, 2138 <upgrade_types_v1+0x3a4>
    1e90:	str	x19, [sp]
    1e94:	ldr	x19, [sp, #16]
    1e98:	ldr	x25, [x20, #408]
    1e9c:	mov	x23, x0
    1ea0:	ldr	w26, [x19, #40]
    1ea4:	mov	x1, x25
    1ea8:	mov	x2, x26
    1eac:	bl	0 <memcpy>
    1eb0:	ldp	w27, w2, [x19, #44]
    1eb4:	add	x8, x23, x27
    1eb8:	add	x0, x8, x28
    1ebc:	add	x1, x25, x27
    1ec0:	bl	0 <memcpy>
    1ec4:	sub	w8, w27, w26
    1ec8:	add	x0, x23, x26
    1ecc:	add	x2, x28, x8
    1ed0:	mov	w1, wzr
    1ed4:	bl	0 <memset>
    1ed8:	add	w8, w27, w28
    1edc:	cmp	w8, w26
    1ee0:	str	w8, [x19, #44]
    1ee4:	str	x24, [x20, #416]
    1ee8:	b.cc	2198 <upgrade_types_v1+0x404>  // b.lo, b.ul, b.last
    1eec:	mov	x0, x20
    1ef0:	mov	x1, x19
    1ef4:	mov	x2, x23
    1ef8:	stp	x23, x23, [x20, #400]
    1efc:	str	x23, [x20, #392]
    1f00:	bl	8cc <ctf_set_base>
    1f04:	ldr	x8, [x20, #408]
    1f08:	ldr	w9, [x19, #40]
    1f0c:	ldr	x10, [sp, #8]
    1f10:	add	x23, x8, x9
    1f14:	cmp	w10, w21
    1f18:	b.cs	210c <upgrade_types_v1+0x378>  // b.hs, b.nlast
    1f1c:	mov	w19, #0x1fffffff            	// #536870911
    1f20:	b	1f5c <upgrade_types_v1+0x1c8>
    1f24:	ldrh	w8, [x1]
    1f28:	str	w8, [x0]
    1f2c:	ldrh	w8, [x1, #2]
    1f30:	str	w8, [x0, #4]
    1f34:	ldr	w8, [x1, #4]
    1f38:	str	w8, [x0, #8]
    1f3c:	ldp	x10, x8, [x29, #-16]
    1f40:	add	x9, x24, x22
    1f44:	add	x22, x9, x8
    1f48:	ldr	x9, [sp, #24]
    1f4c:	add	x8, x26, x23
    1f50:	add	x23, x8, x10
    1f54:	cmp	x22, x9
    1f58:	b.cs	2108 <upgrade_types_v1+0x374>  // b.hs, b.nlast
    1f5c:	ldrh	w21, [x22, #4]
    1f60:	sub	x3, x29, #0x8
    1f64:	mov	x0, x20
    1f68:	mov	x1, x22
    1f6c:	mov	x2, xzr
    1f70:	lsr	w26, w21, #10
    1f74:	ubfx	x28, x21, #11, #21
    1f78:	and	x25, x21, #0x3ff
    1f7c:	bl	1734 <get_ctt_size_v1>
    1f80:	mov	x27, x0
    1f84:	mov	w0, w28
    1f88:	mov	x1, x27
    1f8c:	mov	x2, x25
    1f90:	bl	176c <get_vbytes_v1>
    1f94:	ldr	w8, [x22]
    1f98:	mov	w9, w25
    1f9c:	bfi	w9, w26, #25, #1
    1fa0:	mov	x24, x0
    1fa4:	cmp	w28, #0xd
    1fa8:	bfi	w9, w28, #26, #5
    1fac:	stp	w8, w9, [x23]
    1fb0:	b.hi	1ff0 <upgrade_types_v1+0x25c>  // b.pmore
    1fb4:	mov	w8, #0x1                   	// #1
    1fb8:	lsl	w8, w8, w28
    1fbc:	mov	w9, #0x1d7                 	// #471
    1fc0:	tst	w8, w9
    1fc4:	b.eq	1fdc <upgrade_types_v1+0x248>  // b.none
    1fc8:	mov	w8, #0xfffffffe            	// #-2
    1fcc:	cmp	x27, x8
    1fd0:	b.hi	1fe8 <upgrade_types_v1+0x254>  // b.pmore
    1fd4:	str	w27, [x23, #8]
    1fd8:	b	1ff0 <upgrade_types_v1+0x25c>
    1fdc:	ldrh	w8, [x22, #6]
    1fe0:	str	w8, [x23, #8]
    1fe4:	b	1ff0 <upgrade_types_v1+0x25c>
    1fe8:	lsr	x8, x27, #32
    1fec:	stp	w8, w27, [x23, #12]
    1ff0:	sub	x3, x29, #0x10
    1ff4:	mov	x0, x20
    1ff8:	mov	x1, x23
    1ffc:	mov	x2, xzr
    2000:	lsr	w26, w21, #11
    2004:	bl	17ec <get_ctt_size_v2>
    2008:	mov	x21, x0
    200c:	mov	w0, w26
    2010:	mov	x1, x21
    2014:	mov	x2, x25
    2018:	bl	1824 <get_vbytes_v2>
    201c:	cmp	x27, x21
    2020:	b.ne	2158 <upgrade_types_v1+0x3c4>  // b.any
    2024:	ldp	x9, x8, [x29, #-16]
    2028:	sub	w10, w28, #0x6
    202c:	mov	x26, x0
    2030:	cmp	w10, #0x2
    2034:	add	x1, x8, x22
    2038:	add	x0, x9, x23
    203c:	b.cc	2054 <upgrade_types_v1+0x2c0>  // b.lo, b.ul, b.last
    2040:	cmp	w28, #0x5
    2044:	b.eq	20d8 <upgrade_types_v1+0x344>  // b.none
    2048:	cmp	w28, #0x4
    204c:	b.eq	1f24 <upgrade_types_v1+0x190>  // b.none
    2050:	b	20f4 <upgrade_types_v1+0x360>
    2054:	cbz	w25, 1f3c <upgrade_types_v1+0x1a8>
    2058:	add	x8, x1, #0x6
    205c:	add	x9, x0, #0x8
    2060:	add	x10, x0, #0x4
    2064:	mov	x11, x1
    2068:	b	2094 <upgrade_types_v1+0x300>
    206c:	lsr	x15, x12, #32
    2070:	stp	w14, w15, [x9, #-8]
    2074:	stp	w13, w12, [x9]
    2078:	subs	x25, x25, #0x1
    207c:	add	x11, x11, #0x8
    2080:	add	x1, x1, #0x10
    2084:	add	x8, x8, #0x8
    2088:	add	x9, x9, #0x10
    208c:	add	x10, x10, #0xc
    2090:	b.eq	1f3c <upgrade_types_v1+0x1a8>  // b.none
    2094:	cmp	x27, #0x2, lsl #12
    2098:	b.ge	20ac <upgrade_types_v1+0x318>  // b.tcont
    209c:	ldrh	w12, [x8]
    20a0:	add	x13, x11, #0x4
    20a4:	mov	x14, x11
    20a8:	b	20bc <upgrade_types_v1+0x328>
    20ac:	ldp	w13, w12, [x1, #8]
    20b0:	mov	x14, x1
    20b4:	bfi	x12, x13, #32, #32
    20b8:	add	x13, x1, #0x4
    20bc:	ldrh	w13, [x13]
    20c0:	ldr	w14, [x14]
    20c4:	cmp	x27, x19
    20c8:	b.gt	206c <upgrade_types_v1+0x2d8>
    20cc:	stp	w14, w12, [x10, #-4]
    20d0:	str	w13, [x10, #4]
    20d4:	b	2078 <upgrade_types_v1+0x2e4>
    20d8:	cbz	w25, 20f4 <upgrade_types_v1+0x360>
    20dc:	mov	x8, x0
    20e0:	mov	x9, x1
    20e4:	ldrh	w10, [x9], #2
    20e8:	subs	x25, x25, #0x1
    20ec:	str	w10, [x8], #4
    20f0:	b.ne	20e4 <upgrade_types_v1+0x350>  // b.any
    20f4:	cmp	x24, x26
    20f8:	b.ne	2178 <upgrade_types_v1+0x3e4>  // b.any
    20fc:	mov	x2, x24
    2100:	bl	0 <memcpy>
    2104:	b	1f3c <upgrade_types_v1+0x1a8>
    2108:	ldr	x19, [sp, #16]
    210c:	ldr	x8, [x20, #408]
    2110:	ldr	w9, [x19, #44]
    2114:	sub	x8, x23, x8
    2118:	cmp	x8, x9
    211c:	b.ne	21b8 <upgrade_types_v1+0x424>  // b.any
    2120:	mov	w2, #0x2                   	// #2
    2124:	mov	x0, x20
    2128:	mov	x1, x19
    212c:	bl	81c <ctf_set_version>
    2130:	ldr	x0, [sp]
    2134:	bl	0 <free>
    2138:	ldp	x20, x19, [sp, #128]
    213c:	ldp	x22, x21, [sp, #112]
    2140:	ldp	x24, x23, [sp, #96]
    2144:	ldp	x26, x25, [sp, #80]
    2148:	ldp	x28, x27, [sp, #64]
    214c:	ldp	x29, x30, [sp, #48]
    2150:	add	sp, sp, #0x90
    2154:	ret
    2158:	adrp	x0, 0 <ctf_set_ctl_hashes>
    215c:	adrp	x1, 0 <ctf_set_ctl_hashes>
    2160:	adrp	x3, 0 <ctf_set_ctl_hashes>
    2164:	add	x0, x0, #0x0
    2168:	add	x1, x1, #0x0
    216c:	add	x3, x3, #0x0
    2170:	mov	w2, #0x210                 	// #528
    2174:	bl	0 <__assert_fail>
    2178:	adrp	x0, 0 <ctf_set_ctl_hashes>
    217c:	adrp	x1, 0 <ctf_set_ctl_hashes>
    2180:	adrp	x3, 0 <ctf_set_ctl_hashes>
    2184:	add	x0, x0, #0x0
    2188:	add	x1, x1, #0x0
    218c:	add	x3, x3, #0x0
    2190:	mov	w2, #0x25c                 	// #604
    2194:	bl	0 <__assert_fail>
    2198:	adrp	x0, 0 <ctf_set_ctl_hashes>
    219c:	adrp	x1, 0 <ctf_set_ctl_hashes>
    21a0:	adrp	x3, 0 <ctf_set_ctl_hashes>
    21a4:	add	x0, x0, #0x0
    21a8:	add	x1, x1, #0x0
    21ac:	add	x3, x3, #0x0
    21b0:	mov	w2, #0x1d0                 	// #464
    21b4:	bl	0 <__assert_fail>
    21b8:	adrp	x0, 0 <ctf_set_ctl_hashes>
    21bc:	adrp	x1, 0 <ctf_set_ctl_hashes>
    21c0:	adrp	x3, 0 <ctf_set_ctl_hashes>
    21c4:	add	x0, x0, #0x0
    21c8:	add	x1, x1, #0x0
    21cc:	add	x3, x3, #0x0
    21d0:	mov	w2, #0x265                 	// #613
    21d4:	bl	0 <__assert_fail>

00000000000021d8 <get_ctt_size_v2_unconverted>:
    21d8:	stp	x29, x30, [sp, #-16]!
    21dc:	ldp	w8, w2, [x0, #8]
    21e0:	ldrh	w3, [x0, #6]
    21e4:	mov	w4, #0x14                  	// #20
    21e8:	mov	w5, #0xc                   	// #12
    21ec:	bfi	x2, x8, #32, #32
    21f0:	mov	w6, #0xffffffff            	// #-1
    21f4:	mov	x0, xzr
    21f8:	mov	x29, sp
    21fc:	bl	1894 <get_ctt_size_common>
    2200:	ldp	x29, x30, [sp], #16
    2204:	ret

ctf-string.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_strraw_explicit>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	lsr	w8, w1, #31
   8:	cmp	x2, #0x0
   c:	mov	w9, #0xffffffff            	// #-1
  10:	add	x10, x0, w8, uxtw #4
  14:	ccmp	w1, w9, #0x4, ne  // ne = any
  18:	add	x9, x10, #0x150
  1c:	csel	x9, x2, x9, gt
  20:	cmp	w8, #0x1
  24:	mov	x29, sp
  28:	b.ne	40 <ctf_strraw_explicit+0x40>  // b.any
  2c:	ldr	x8, [x0, #128]
  30:	cbz	x8, 40 <ctf_strraw_explicit+0x40>
  34:	mov	w1, w1
  38:	mov	x0, x8
  3c:	b	68 <ctf_strraw_explicit+0x68>
  40:	tbnz	w1, #31, 74 <ctf_strraw_explicit+0x74>
  44:	ldr	x10, [x9, #8]
  48:	mov	w8, w1
  4c:	cmp	x10, x8
  50:	b.hi	74 <ctf_strraw_explicit+0x74>  // b.pmore
  54:	ldr	w10, [x0, #384]
  58:	cmp	w10, w1
  5c:	b.ls	74 <ctf_strraw_explicit+0x74>  // b.plast
  60:	ldr	x0, [x0, #120]
  64:	mov	x1, x8
  68:	bl	0 <ctf_dynhash_lookup>
  6c:	ldp	x29, x30, [sp], #16
  70:	ret
  74:	ldr	x8, [x9]
  78:	cbz	x8, 98 <ctf_strraw_explicit+0x98>
  7c:	ldr	x9, [x9, #8]
  80:	and	w10, w1, #0x7fffffff
  84:	add	x8, x8, x10
  88:	cmp	x9, x10
  8c:	csel	x0, x8, xzr, hi  // hi = pmore
  90:	ldp	x29, x30, [sp], #16
  94:	ret
  98:	mov	x0, xzr
  9c:	ldp	x29, x30, [sp], #16
  a0:	ret

00000000000000a4 <ctf_strraw>:
  a4:	stp	x29, x30, [sp, #-16]!
  a8:	mov	x2, xzr
  ac:	mov	x29, sp
  b0:	bl	0 <ctf_strraw_explicit>
  b4:	ldp	x29, x30, [sp], #16
  b8:	ret

00000000000000bc <ctf_strptr>:
  bc:	stp	x29, x30, [sp, #-16]!
  c0:	mov	x29, sp
  c4:	bl	a4 <ctf_strraw>
  c8:	adrp	x8, 0 <ctf_strraw_explicit>
  cc:	add	x8, x8, #0x0
  d0:	cmp	x0, #0x0
  d4:	csel	x0, x8, x0, eq  // eq = none
  d8:	ldp	x29, x30, [sp], #16
  dc:	ret

00000000000000e0 <ctf_str_create_atoms>:
  e0:	stp	x29, x30, [sp, #-32]!
  e4:	stp	x20, x19, [sp, #16]
  e8:	mov	x19, x0
  ec:	adrp	x0, 0 <ctf_hash_string>
  f0:	adrp	x1, 0 <ctf_hash_eq_string>
  f4:	adrp	x2, 0 <free>
  f8:	adrp	x3, 0 <ctf_strraw_explicit>
  fc:	add	x0, x0, #0x0
 100:	add	x1, x1, #0x0
 104:	add	x2, x2, #0x0
 108:	add	x3, x3, #0x0
 10c:	mov	x29, sp
 110:	bl	0 <ctf_dynhash_create>
 114:	str	x0, [x19, #368]
 118:	cbz	x0, 19c <ctf_str_create_atoms+0xbc>
 11c:	ldr	x8, [x19, #120]
 120:	cbz	x8, 130 <ctf_str_create_atoms+0x50>
 124:	ldr	x8, [x19, #120]
 128:	cbnz	x8, 158 <ctf_str_create_atoms+0x78>
 12c:	b	190 <ctf_str_create_atoms+0xb0>
 130:	adrp	x0, 0 <ctf_hash_integer>
 134:	adrp	x1, 0 <ctf_hash_eq_integer>
 138:	add	x0, x0, #0x0
 13c:	add	x1, x1, #0x0
 140:	mov	x2, xzr
 144:	mov	x3, xzr
 148:	bl	0 <ctf_dynhash_create>
 14c:	str	x0, [x19, #120]
 150:	ldr	x8, [x19, #120]
 154:	cbz	x8, 190 <ctf_str_create_atoms+0xb0>
 158:	bl	0 <__errno_location>
 15c:	adrp	x1, 0 <ctf_strraw_explicit>
 160:	mov	x20, x0
 164:	str	wzr, [x0]
 168:	add	x1, x1, #0x0
 16c:	mov	x0, x19
 170:	bl	1d4 <ctf_str_add>
 174:	ldr	w8, [x20]
 178:	mov	w0, wzr
 17c:	cmp	w8, #0xc
 180:	b.ne	1a0 <ctf_str_create_atoms+0xc0>  // b.any
 184:	ldr	x0, [x19, #120]
 188:	bl	0 <ctf_dynhash_destroy>
 18c:	str	xzr, [x19, #120]
 190:	ldr	x0, [x19, #368]
 194:	bl	0 <ctf_dynhash_destroy>
 198:	str	xzr, [x19, #368]
 19c:	mov	w0, #0xfffffff4            	// #-12
 1a0:	ldp	x20, x19, [sp, #16]
 1a4:	ldp	x29, x30, [sp], #32
 1a8:	ret

00000000000001ac <ctf_str_free_atom>:
 1ac:	stp	x29, x30, [sp, #-32]!
 1b0:	str	x19, [sp, #16]
 1b4:	mov	x29, sp
 1b8:	mov	x19, x0
 1bc:	bl	82c <ctf_str_purge_atom_refs>
 1c0:	mov	x0, x19
 1c4:	bl	0 <free>
 1c8:	ldr	x19, [sp, #16]
 1cc:	ldp	x29, x30, [sp], #32
 1d0:	ret

00000000000001d4 <ctf_str_add>:
 1d4:	stp	x29, x30, [sp, #-16]!
 1d8:	mov	x29, sp
 1dc:	cbz	x1, 200 <ctf_str_add+0x2c>
 1e0:	mov	w3, #0x1                   	// #1
 1e4:	mov	w2, wzr
 1e8:	mov	x4, xzr
 1ec:	bl	238 <ctf_str_add_ref_internal>
 1f0:	cbz	x0, 1f8 <ctf_str_add+0x24>
 1f4:	ldr	w0, [x0, #24]
 1f8:	ldp	x29, x30, [sp], #16
 1fc:	ret
 200:	mov	w0, wzr
 204:	ldp	x29, x30, [sp], #16
 208:	ret

000000000000020c <ctf_str_free_atoms>:
 20c:	stp	x29, x30, [sp, #-32]!
 210:	str	x19, [sp, #16]
 214:	mov	x19, x0
 218:	ldr	x0, [x0, #120]
 21c:	mov	x29, sp
 220:	bl	0 <ctf_dynhash_destroy>
 224:	ldr	x0, [x19, #368]
 228:	bl	0 <ctf_dynhash_destroy>
 22c:	ldr	x19, [sp, #16]
 230:	ldp	x29, x30, [sp], #32
 234:	ret

0000000000000238 <ctf_str_add_ref_internal>:
 238:	stp	x29, x30, [sp, #-80]!
 23c:	stp	x24, x23, [sp, #32]
 240:	stp	x22, x21, [sp, #48]
 244:	stp	x20, x19, [sp, #64]
 248:	mov	x20, x0
 24c:	ldr	x0, [x0, #368]
 250:	str	x25, [sp, #16]
 254:	mov	x29, sp
 258:	mov	x25, x4
 25c:	mov	w23, w3
 260:	mov	w22, w2
 264:	mov	x24, x1
 268:	bl	0 <ctf_dynhash_lookup>
 26c:	mov	x19, x0
 270:	cbz	w22, 290 <ctf_str_add_ref_internal+0x58>
 274:	mov	w0, #0x18                  	// #24
 278:	bl	0 <malloc>
 27c:	cbz	x0, 368 <ctf_str_add_ref_internal+0x130>
 280:	mov	x21, x0
 284:	str	x25, [x0, #16]
 288:	cbnz	x19, 298 <ctf_str_add_ref_internal+0x60>
 28c:	b	2b8 <ctf_str_add_ref_internal+0x80>
 290:	mov	x21, xzr
 294:	cbz	x19, 2b8 <ctf_str_add_ref_internal+0x80>
 298:	cbz	w22, 36c <ctf_str_add_ref_internal+0x134>
 29c:	add	x0, x19, #0x8
 2a0:	mov	x1, x21
 2a4:	bl	0 <ctf_list_append>
 2a8:	ldr	x8, [x20, #376]
 2ac:	add	x8, x8, #0x1
 2b0:	str	x8, [x20, #376]
 2b4:	b	36c <ctf_str_add_ref_internal+0x134>
 2b8:	mov	w0, #0x28                  	// #40
 2bc:	bl	0 <malloc>
 2c0:	mov	x19, x0
 2c4:	cbz	x0, 33c <ctf_str_add_ref_internal+0x104>
 2c8:	movi	v0.2d, #0x0
 2cc:	mov	x0, x24
 2d0:	str	xzr, [x19, #32]
 2d4:	stp	q0, q0, [x19]
 2d8:	bl	0 <strdup>
 2dc:	mov	x24, x0
 2e0:	cbz	x0, 340 <ctf_str_add_ref_internal+0x108>
 2e4:	ldr	x0, [x20, #368]
 2e8:	mov	x1, x24
 2ec:	mov	x2, x19
 2f0:	bl	0 <ctf_dynhash_insert>
 2f4:	tbnz	w0, #31, 340 <ctf_str_add_ref_internal+0x108>
 2f8:	str	x24, [x19]
 2fc:	ldr	x8, [x20, #624]
 300:	str	x8, [x19, #32]
 304:	cbz	w23, 298 <ctf_str_add_ref_internal+0x60>
 308:	ldr	w1, [x20, #384]
 30c:	mov	x2, x24
 310:	str	w1, [x19, #24]
 314:	ldr	x0, [x20, #120]
 318:	bl	0 <ctf_dynhash_insert>
 31c:	tbnz	w0, #31, 340 <ctf_str_add_ref_internal+0x108>
 320:	ldr	x0, [x19]
 324:	bl	0 <strlen>
 328:	ldr	w8, [x20, #384]
 32c:	add	w8, w0, w8
 330:	add	w8, w8, #0x1
 334:	str	w8, [x20, #384]
 338:	b	298 <ctf_str_add_ref_internal+0x60>
 33c:	mov	x24, xzr
 340:	cbz	x24, 350 <ctf_str_add_ref_internal+0x118>
 344:	ldr	x0, [x20, #368]
 348:	mov	x1, x24
 34c:	bl	0 <ctf_dynhash_remove>
 350:	mov	x0, x19
 354:	bl	0 <free>
 358:	mov	x0, x21
 35c:	bl	0 <free>
 360:	mov	x0, x24
 364:	bl	0 <free>
 368:	mov	x19, xzr
 36c:	mov	x0, x19
 370:	ldp	x20, x19, [sp, #64]
 374:	ldp	x22, x21, [sp, #48]
 378:	ldp	x24, x23, [sp, #32]
 37c:	ldr	x25, [sp, #16]
 380:	ldp	x29, x30, [sp], #80
 384:	ret

0000000000000388 <ctf_str_add_ref>:
 388:	stp	x29, x30, [sp, #-16]!
 38c:	mov	x29, sp
 390:	cbz	x1, 3b4 <ctf_str_add_ref+0x2c>
 394:	mov	x4, x2
 398:	mov	w2, #0x1                   	// #1
 39c:	mov	w3, #0x1                   	// #1
 3a0:	bl	238 <ctf_str_add_ref_internal>
 3a4:	cbz	x0, 3ac <ctf_str_add_ref+0x24>
 3a8:	ldr	w0, [x0, #24]
 3ac:	ldp	x29, x30, [sp], #16
 3b0:	ret
 3b4:	mov	w0, wzr
 3b8:	ldp	x29, x30, [sp], #16
 3bc:	ret

00000000000003c0 <ctf_str_add_external>:
 3c0:	stp	x29, x30, [sp, #-32]!
 3c4:	str	x19, [sp, #16]
 3c8:	mov	x29, sp
 3cc:	cbz	x1, 3f8 <ctf_str_add_external+0x38>
 3d0:	mov	w19, w2
 3d4:	mov	w2, wzr
 3d8:	mov	w3, wzr
 3dc:	mov	x4, xzr
 3e0:	bl	238 <ctf_str_add_ref_internal>
 3e4:	cbz	x0, 3fc <ctf_str_add_external+0x3c>
 3e8:	orr	w8, w19, #0x80000000
 3ec:	str	w8, [x0, #28]
 3f0:	mov	w0, #0x1                   	// #1
 3f4:	b	3fc <ctf_str_add_external+0x3c>
 3f8:	mov	w0, wzr
 3fc:	ldr	x19, [sp, #16]
 400:	ldp	x29, x30, [sp], #32
 404:	ret

0000000000000408 <ctf_str_remove_ref>:
 408:	stp	x29, x30, [sp, #-48]!
 40c:	stp	x22, x21, [sp, #16]
 410:	stp	x20, x19, [sp, #32]
 414:	ldr	x0, [x0, #368]
 418:	mov	x29, sp
 41c:	mov	x19, x2
 420:	bl	0 <ctf_dynhash_lookup>
 424:	cbz	x0, 464 <ctf_str_remove_ref+0x5c>
 428:	ldr	x21, [x0, #16]
 42c:	cbz	x21, 464 <ctf_str_remove_ref+0x5c>
 430:	add	x20, x0, #0x8
 434:	b	440 <ctf_str_remove_ref+0x38>
 438:	mov	x21, x22
 43c:	cbz	x22, 464 <ctf_str_remove_ref+0x5c>
 440:	ldp	x22, x8, [x21, #8]
 444:	cmp	x8, x19
 448:	b.ne	438 <ctf_str_remove_ref+0x30>  // b.any
 44c:	mov	x0, x20
 450:	mov	x1, x21
 454:	bl	0 <ctf_list_delete>
 458:	mov	x0, x21
 45c:	bl	0 <free>
 460:	b	438 <ctf_str_remove_ref+0x30>
 464:	ldp	x20, x19, [sp, #32]
 468:	ldp	x22, x21, [sp, #16]
 46c:	ldp	x29, x30, [sp], #48
 470:	ret

0000000000000474 <ctf_str_rollback>:
 474:	sub	sp, sp, #0x20
 478:	stp	x29, x30, [sp, #16]
 47c:	stp	x1, x2, [sp]
 480:	ldr	x0, [x0, #368]
 484:	adrp	x1, 0 <ctf_strraw_explicit>
 488:	add	x1, x1, #0x0
 48c:	mov	x2, sp
 490:	add	x29, sp, #0x10
 494:	bl	0 <ctf_dynhash_iter_remove>
 498:	ldp	x29, x30, [sp, #16]
 49c:	add	sp, sp, #0x20
 4a0:	ret

00000000000004a4 <ctf_str_rollback_atom>:
 4a4:	ldr	x8, [x1, #32]
 4a8:	ldr	x9, [x2, #8]
 4ac:	cmp	x8, x9
 4b0:	cset	w0, hi  // hi = pmore
 4b4:	ret

00000000000004b8 <ctf_str_purge_refs>:
 4b8:	stp	x29, x30, [sp, #-32]!
 4bc:	ldr	x8, [x0, #376]
 4c0:	str	x19, [sp, #16]
 4c4:	mov	x19, x0
 4c8:	mov	x29, sp
 4cc:	cbz	x8, 4e4 <ctf_str_purge_refs+0x2c>
 4d0:	ldr	x0, [x19, #368]
 4d4:	adrp	x1, 0 <ctf_strraw_explicit>
 4d8:	add	x1, x1, #0x0
 4dc:	mov	x2, xzr
 4e0:	bl	0 <ctf_dynhash_iter>
 4e4:	str	xzr, [x19, #376]
 4e8:	ldr	x19, [sp, #16]
 4ec:	ldp	x29, x30, [sp], #32
 4f0:	ret

00000000000004f4 <ctf_str_purge_one_atom_refs>:
 4f4:	stp	x29, x30, [sp, #-16]!
 4f8:	mov	x0, x1
 4fc:	mov	x29, sp
 500:	bl	82c <ctf_str_purge_atom_refs>
 504:	ldp	x29, x30, [sp], #16
 508:	ret

000000000000050c <ctf_str_write_strtab>:
 50c:	sub	sp, sp, #0x80
 510:	stp	x29, x30, [sp, #64]
 514:	add	x29, sp, #0x40
 518:	movi	v0.2d, #0x0
 51c:	sub	x8, x29, #0x10
 520:	stp	x24, x23, [sp, #80]
 524:	stp	x22, x21, [sp, #96]
 528:	stp	x20, x19, [sp, #112]
 52c:	stp	xzr, xzr, [x29, #-16]
 530:	str	xzr, [sp, #32]
 534:	stp	q0, q0, [sp]
 538:	str	x8, [sp]
 53c:	mov	x19, x0
 540:	ldr	x0, [x0, #368]
 544:	adrp	x1, 0 <ctf_strraw_explicit>
 548:	add	x1, x1, #0x0
 54c:	bl	0 <ctf_dynhash_lookup>
 550:	cbz	x0, 600 <ctf_str_write_strtab+0xf4>
 554:	str	x0, [sp, #32]
 558:	mov	x21, x0
 55c:	ldr	x0, [x19, #368]
 560:	adrp	x1, 0 <ctf_strraw_explicit>
 564:	add	x1, x1, #0x0
 568:	mov	x2, sp
 56c:	bl	0 <ctf_dynhash_iter>
 570:	ldur	x8, [x29, #-8]
 574:	adrp	x0, 0 <ctf_strraw_explicit>
 578:	add	x0, x0, #0x0
 57c:	add	x1, x8, #0x1
 580:	stur	x1, [x29, #-8]
 584:	bl	0 <ctf_dprintf>
 588:	ldr	x0, [sp, #8]
 58c:	mov	w1, #0x8                   	// #8
 590:	bl	0 <calloc>
 594:	cbz	x0, 720 <ctf_str_write_strtab+0x214>
 598:	mov	x22, x0
 59c:	mov	w8, #0x1                   	// #1
 5a0:	str	x21, [x22], #8
 5a4:	stp	x0, x8, [sp, #16]
 5a8:	mov	x20, x0
 5ac:	ldr	x0, [x19, #368]
 5b0:	adrp	x1, 0 <ctf_strraw_explicit>
 5b4:	add	x1, x1, #0x0
 5b8:	mov	x2, sp
 5bc:	bl	0 <ctf_dynhash_iter>
 5c0:	ldr	x8, [sp, #8]
 5c4:	adrp	x3, 0 <ctf_strraw_explicit>
 5c8:	add	x3, x3, #0x0
 5cc:	mov	w2, #0x8                   	// #8
 5d0:	sub	x1, x8, #0x1
 5d4:	mov	x0, x22
 5d8:	bl	0 <qsort>
 5dc:	ldur	x0, [x29, #-8]
 5e0:	bl	0 <malloc>
 5e4:	stur	x0, [x29, #-16]
 5e8:	cbz	x0, 6e4 <ctf_str_write_strtab+0x1d8>
 5ec:	ldr	x8, [x19, #128]
 5f0:	cbz	x8, 614 <ctf_str_write_strtab+0x108>
 5f4:	ldr	x8, [x19, #128]
 5f8:	cbnz	x8, 63c <ctf_str_write_strtab+0x130>
 5fc:	b	6d8 <ctf_str_write_strtab+0x1cc>
 600:	adrp	x0, 0 <ctf_strraw_explicit>
 604:	add	x0, x0, #0x0
 608:	bl	0 <ctf_dprintf>
 60c:	stur	xzr, [x29, #-16]
 610:	b	720 <ctf_str_write_strtab+0x214>
 614:	adrp	x0, 0 <ctf_hash_integer>
 618:	adrp	x1, 0 <ctf_hash_eq_integer>
 61c:	add	x0, x0, #0x0
 620:	add	x1, x1, #0x0
 624:	mov	x2, xzr
 628:	mov	x3, xzr
 62c:	bl	0 <ctf_dynhash_create>
 630:	str	x0, [x19, #128]
 634:	ldr	x8, [x19, #128]
 638:	cbz	x8, 6d8 <ctf_str_write_strtab+0x1cc>
 63c:	ldr	x8, [sp, #8]
 640:	cbz	x8, 6f0 <ctf_str_write_strtab+0x1e4>
 644:	mov	w23, wzr
 648:	mov	x22, xzr
 64c:	mov	w21, wzr
 650:	b	69c <ctf_str_write_strtab+0x190>
 654:	mov	w1, w21
 658:	bl	810 <ctf_str_update_refs>
 65c:	lsl	x24, x22, #3
 660:	ldr	x8, [x20, x24]
 664:	str	w21, [x8, #24]
 668:	ldur	x9, [x29, #-16]
 66c:	ldr	x1, [x8]
 670:	add	x0, x9, w21, uxtw
 674:	bl	0 <strcpy>
 678:	ldr	x8, [x20, x24]
 67c:	ldr	x0, [x8]
 680:	bl	0 <strlen>
 684:	add	w8, w21, w0
 688:	add	w21, w8, #0x1
 68c:	ldr	x8, [sp, #8]
 690:	add	x22, x22, #0x1
 694:	cmp	x22, x8
 698:	b.cs	6f4 <ctf_str_write_strtab+0x1e8>  // b.hs, b.nlast
 69c:	ldr	x0, [x20, x22, lsl #3]
 6a0:	ldr	w1, [x0, #28]
 6a4:	cbz	w1, 654 <ctf_str_write_strtab+0x148>
 6a8:	bl	810 <ctf_str_update_refs>
 6ac:	ldr	x8, [x20, x22, lsl #3]
 6b0:	ldr	x0, [x19, #128]
 6b4:	ldr	w1, [x8, #28]
 6b8:	ldr	x2, [x8]
 6bc:	bl	0 <ctf_dynhash_insert>
 6c0:	tbnz	w0, #31, 6d8 <ctf_str_write_strtab+0x1cc>
 6c4:	ldr	x8, [x20, x22, lsl #3]
 6c8:	mov	w23, #0x1                   	// #1
 6cc:	ldr	w9, [x8, #28]
 6d0:	str	w9, [x8, #24]
 6d4:	b	68c <ctf_str_write_strtab+0x180>
 6d8:	ldur	x0, [x29, #-16]
 6dc:	bl	0 <free>
 6e0:	stur	xzr, [x29, #-16]
 6e4:	mov	x0, x20
 6e8:	bl	0 <free>
 6ec:	b	720 <ctf_str_write_strtab+0x214>
 6f0:	mov	w23, wzr
 6f4:	mov	x0, x20
 6f8:	bl	0 <free>
 6fc:	cbnz	w23, 70c <ctf_str_write_strtab+0x200>
 700:	ldr	x0, [x19, #128]
 704:	bl	0 <ctf_dynhash_destroy>
 708:	str	xzr, [x19, #128]
 70c:	ldr	x0, [x19, #120]
 710:	bl	0 <ctf_dynhash_empty>
 714:	ldur	w8, [x29, #-8]
 718:	add	w8, w8, #0x1
 71c:	str	w8, [x19, #384]
 720:	ldp	x0, x1, [x29, #-16]
 724:	ldp	x20, x19, [sp, #112]
 728:	ldp	x22, x21, [sp, #96]
 72c:	ldp	x24, x23, [sp, #80]
 730:	ldp	x29, x30, [sp, #64]
 734:	add	sp, sp, #0x80
 738:	ret

000000000000073c <ctf_str_count_strtab>:
 73c:	stp	x29, x30, [sp, #-32]!
 740:	stp	x20, x19, [sp, #16]
 744:	ldr	x8, [x2, #32]
 748:	mov	x19, x2
 74c:	mov	x29, sp
 750:	cmp	x8, x1
 754:	b.eq	78c <ctf_str_count_strtab+0x50>  // b.none
 758:	add	x0, x1, #0x8
 75c:	mov	x20, x1
 760:	bl	0 <ctf_list_empty_p>
 764:	cbnz	w0, 798 <ctf_str_count_strtab+0x5c>
 768:	ldr	w8, [x20, #28]
 76c:	cbnz	w8, 78c <ctf_str_count_strtab+0x50>
 770:	ldr	x0, [x20]
 774:	bl	0 <strlen>
 778:	ldr	x8, [x19]
 77c:	ldr	x9, [x8, #8]
 780:	add	x9, x0, x9
 784:	add	x9, x9, #0x1
 788:	str	x9, [x8, #8]
 78c:	ldr	x8, [x19, #8]
 790:	add	x8, x8, #0x1
 794:	str	x8, [x19, #8]
 798:	ldp	x20, x19, [sp, #16]
 79c:	ldp	x29, x30, [sp], #32
 7a0:	ret

00000000000007a4 <ctf_str_populate_sorttab>:
 7a4:	stp	x29, x30, [sp, #-32]!
 7a8:	stp	x20, x19, [sp, #16]
 7ac:	ldr	x8, [x2, #32]
 7b0:	mov	x29, sp
 7b4:	cmp	x8, x1
 7b8:	b.eq	7e0 <ctf_str_populate_sorttab+0x3c>  // b.none
 7bc:	add	x0, x1, #0x8
 7c0:	mov	x19, x2
 7c4:	mov	x20, x1
 7c8:	bl	0 <ctf_list_empty_p>
 7cc:	cbnz	w0, 7e0 <ctf_str_populate_sorttab+0x3c>
 7d0:	ldp	x9, x8, [x19, #16]
 7d4:	add	x10, x8, #0x1
 7d8:	str	x10, [x19, #24]
 7dc:	str	x20, [x9, x8, lsl #3]
 7e0:	ldp	x20, x19, [sp, #16]
 7e4:	ldp	x29, x30, [sp], #32
 7e8:	ret

00000000000007ec <ctf_str_sort_strtab>:
 7ec:	stp	x29, x30, [sp, #-16]!
 7f0:	ldr	x8, [x0]
 7f4:	ldr	x9, [x1]
 7f8:	mov	x29, sp
 7fc:	ldr	x0, [x8]
 800:	ldr	x1, [x9]
 804:	bl	0 <strcmp>
 808:	ldp	x29, x30, [sp], #16
 80c:	ret

0000000000000810 <ctf_str_update_refs>:
 810:	ldr	x8, [x0, #16]
 814:	cbz	x8, 828 <ctf_str_update_refs+0x18>
 818:	ldr	x9, [x8, #16]
 81c:	str	w1, [x9]
 820:	ldr	x8, [x8, #8]
 824:	cbnz	x8, 818 <ctf_str_update_refs+0x8>
 828:	ret

000000000000082c <ctf_str_purge_atom_refs>:
 82c:	stp	x29, x30, [sp, #-48]!
 830:	stp	x20, x19, [sp, #32]
 834:	ldr	x19, [x0, #16]
 838:	str	x21, [sp, #16]
 83c:	mov	x29, sp
 840:	cbz	x19, 868 <ctf_str_purge_atom_refs+0x3c>
 844:	add	x20, x0, #0x8
 848:	ldr	x21, [x19, #8]
 84c:	mov	x0, x20
 850:	mov	x1, x19
 854:	bl	0 <ctf_list_delete>
 858:	mov	x0, x19
 85c:	bl	0 <free>
 860:	mov	x19, x21
 864:	cbnz	x21, 848 <ctf_str_purge_atom_refs+0x1c>
 868:	ldp	x20, x19, [sp, #32]
 86c:	ldr	x21, [sp, #16]
 870:	ldp	x29, x30, [sp], #48
 874:	ret

ctf-subr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_mmap>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	w4, w2
   8:	mov	x5, x1
   c:	mov	x1, x0
  10:	mov	w2, #0x1                   	// #1
  14:	mov	w3, #0x2                   	// #2
  18:	mov	x0, xzr
  1c:	mov	x29, sp
  20:	bl	0 <mmap>
  24:	cmn	x0, #0x1
  28:	csel	x0, xzr, x0, eq  // eq = none
  2c:	ldp	x29, x30, [sp], #16
  30:	ret

0000000000000034 <ctf_munmap>:
  34:	stp	x29, x30, [sp, #-16]!
  38:	mov	x29, sp
  3c:	bl	0 <munmap>
  40:	ldp	x29, x30, [sp], #16
  44:	ret

0000000000000048 <ctf_pread>:
  48:	stp	x29, x30, [sp, #-64]!
  4c:	stp	x24, x23, [sp, #16]
  50:	stp	x22, x21, [sp, #32]
  54:	stp	x20, x19, [sp, #48]
  58:	mov	x20, x3
  5c:	mov	x21, x2
  60:	mov	x22, x1
  64:	mov	w23, w0
  68:	mov	x19, xzr
  6c:	mov	x29, sp
  70:	cmp	x21, #0x1
  74:	b.ge	90 <ctf_pread+0x48>  // b.tcont
  78:	b	e8 <ctf_pread+0xa0>
  7c:	ldr	w8, [x24]
  80:	cmp	w8, #0x4
  84:	b.ne	c4 <ctf_pread+0x7c>  // b.any
  88:	cmp	x21, #0x1
  8c:	b.lt	e8 <ctf_pread+0xa0>  // b.tstop
  90:	bl	0 <__errno_location>
  94:	mov	x24, x0
  98:	str	wzr, [x0]
  9c:	mov	w0, w23
  a0:	mov	x1, x22
  a4:	mov	x2, x21
  a8:	mov	x3, x20
  ac:	bl	0 <pread>
  b0:	tbz	x0, #63, 7c <ctf_pread+0x34>
  b4:	ldr	w8, [x24]
  b8:	cmp	w8, #0x4
  bc:	b.eq	7c <ctf_pread+0x34>  // b.none
  c0:	b	e4 <ctf_pread+0x9c>
  c4:	add	x19, x0, x19
  c8:	cbz	x0, e8 <ctf_pread+0xa0>
  cc:	sub	x21, x21, x0
  d0:	add	x20, x0, x20
  d4:	add	x22, x22, x0
  d8:	cmp	x21, #0x1
  dc:	b.ge	90 <ctf_pread+0x48>  // b.tcont
  e0:	b	e8 <ctf_pread+0xa0>
  e4:	mov	x19, x0
  e8:	mov	x0, x19
  ec:	ldp	x20, x19, [sp, #48]
  f0:	ldp	x22, x21, [sp, #32]
  f4:	ldp	x24, x23, [sp, #16]
  f8:	ldp	x29, x30, [sp], #64
  fc:	ret

0000000000000100 <ctf_strerror>:
 100:	stp	x29, x30, [sp, #-16]!
 104:	mov	x29, sp
 108:	bl	0 <strerror>
 10c:	ldp	x29, x30, [sp], #16
 110:	ret

0000000000000114 <ctf_version>:
 114:	stp	x29, x30, [sp, #-32]!
 118:	stp	x20, x19, [sp, #16]
 11c:	mov	x29, sp
 120:	tbnz	w0, #31, 154 <ctf_version+0x40>
 124:	adrp	x19, 0 <ctf_mmap>
 128:	cbz	w0, 14c <ctf_version+0x38>
 12c:	cmp	w0, #0x4
 130:	b.ne	160 <ctf_version+0x4c>  // b.any
 134:	adrp	x0, 0 <ctf_mmap>
 138:	add	x0, x0, #0x0
 13c:	mov	w1, #0x4                   	// #4
 140:	mov	w20, #0x4                   	// #4
 144:	bl	17c <ctf_dprintf>
 148:	str	w20, [x19]
 14c:	ldr	w0, [x19]
 150:	b	170 <ctf_version+0x5c>
 154:	bl	0 <__errno_location>
 158:	mov	w8, #0x16                  	// #22
 15c:	b	168 <ctf_version+0x54>
 160:	bl	0 <__errno_location>
 164:	mov	w8, #0x5f                  	// #95
 168:	str	w8, [x0]
 16c:	mov	w0, #0xffffffff            	// #-1
 170:	ldp	x20, x19, [sp, #16]
 174:	ldp	x29, x30, [sp], #32
 178:	ret

000000000000017c <ctf_dprintf>:
 17c:	sub	sp, sp, #0x130
 180:	adrp	x8, 0 <ctf_mmap>
 184:	ldr	w8, [x8]
 188:	stp	x29, x30, [sp, #256]
 18c:	add	x29, sp, #0x100
 190:	str	x28, [sp, #272]
 194:	stp	x20, x19, [sp, #288]
 198:	stp	x1, x2, [x29, #-120]
 19c:	stp	x3, x4, [x29, #-104]
 1a0:	stp	x5, x6, [x29, #-88]
 1a4:	stur	x7, [x29, #-72]
 1a8:	stp	q0, q1, [sp]
 1ac:	stp	q2, q3, [sp, #32]
 1b0:	stp	q4, q5, [sp, #64]
 1b4:	stp	q6, q7, [sp, #96]
 1b8:	cbnz	w8, 1d0 <ctf_dprintf+0x54>
 1bc:	ldp	x20, x19, [sp, #288]
 1c0:	ldr	x28, [sp, #272]
 1c4:	ldp	x29, x30, [sp, #256]
 1c8:	add	sp, sp, #0x130
 1cc:	ret
 1d0:	adrp	x12, 0 <stdout>
 1d4:	mov	x19, x0
 1d8:	ldr	x0, [x12]
 1dc:	mov	x8, #0xffffffffffffffc8    	// #-56
 1e0:	mov	x10, sp
 1e4:	movk	x8, #0xff80, lsl #32
 1e8:	sub	x11, x29, #0x78
 1ec:	add	x10, x10, #0x80
 1f0:	add	x9, x29, #0x30
 1f4:	stp	x10, x8, [x29, #-16]
 1f8:	add	x8, x11, #0x38
 1fc:	stp	x9, x8, [x29, #-32]
 200:	bl	0 <fflush>
 204:	adrp	x20, 0 <stderr>
 208:	ldr	x3, [x20]
 20c:	adrp	x0, 0 <ctf_mmap>
 210:	add	x0, x0, #0x0
 214:	mov	w1, #0xe                   	// #14
 218:	mov	w2, #0x1                   	// #1
 21c:	bl	0 <fwrite>
 220:	ldp	q0, q1, [x29, #-32]
 224:	ldr	x0, [x20]
 228:	sub	x2, x29, #0x40
 22c:	mov	x1, x19
 230:	stp	q0, q1, [x29, #-64]
 234:	bl	0 <vfprintf>
 238:	b	1bc <ctf_dprintf+0x40>

000000000000023c <libctf_init_debug>:
 23c:	stp	x29, x30, [sp, #-32]!
 240:	str	x19, [sp, #16]
 244:	adrp	x19, 0 <ctf_mmap>
 248:	ldrb	w8, [x19]
 24c:	mov	x29, sp
 250:	tbnz	w8, #0, 278 <libctf_init_debug+0x3c>
 254:	adrp	x0, 0 <ctf_mmap>
 258:	add	x0, x0, #0x0
 25c:	bl	0 <getenv>
 260:	cmp	x0, #0x0
 264:	adrp	x8, 0 <ctf_mmap>
 268:	mov	w9, #0x1                   	// #1
 26c:	cset	w10, ne  // ne = any
 270:	str	w10, [x8]
 274:	strb	w9, [x19]
 278:	ldr	x19, [sp, #16]
 27c:	ldp	x29, x30, [sp], #32
 280:	ret

0000000000000284 <ctf_setdebug>:
 284:	stp	x29, x30, [sp, #-32]!
 288:	str	x19, [sp, #16]
 28c:	mov	x29, sp
 290:	mov	w19, w0
 294:	bl	23c <libctf_init_debug>
 298:	adrp	x0, 0 <ctf_mmap>
 29c:	adrp	x8, 0 <ctf_mmap>
 2a0:	add	x0, x0, #0x0
 2a4:	mov	w1, w19
 2a8:	str	w19, [x8]
 2ac:	bl	17c <ctf_dprintf>
 2b0:	ldr	x19, [sp, #16]
 2b4:	ldp	x29, x30, [sp], #32
 2b8:	ret

00000000000002bc <ctf_getdebug>:
 2bc:	adrp	x8, 0 <ctf_mmap>
 2c0:	ldr	w0, [x8]
 2c4:	ret

ctf-types.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_type_isparent>:
       0:	ldr	w8, [x0, #544]
       4:	cmp	x8, x1
       8:	cset	w0, cs  // cs = hs, nlast
       c:	ret

0000000000000010 <ctf_type_ischild>:
      10:	ldr	w8, [x0, #544]
      14:	cmp	x8, x1
      18:	cset	w0, cc  // cc = lo, ul, last
      1c:	ret

0000000000000020 <ctf_member_iter>:
      20:	sub	sp, sp, #0x50
      24:	stp	x29, x30, [sp, #16]
      28:	add	x29, sp, #0x10
      2c:	str	x23, [sp, #32]
      30:	stp	x22, x21, [sp, #48]
      34:	stp	x20, x19, [sp, #64]
      38:	mov	x19, x3
      3c:	mov	x20, x2
      40:	mov	x21, x0
      44:	str	x0, [x29, #24]
      48:	bl	1f4 <ctf_type_resolve>
      4c:	cmn	x0, #0x1
      50:	b.eq	e4 <ctf_member_iter+0xc4>  // b.none
      54:	mov	x23, x0
      58:	add	x0, x29, #0x18
      5c:	mov	x1, x23
      60:	bl	0 <ctf_lookup_by_id>
      64:	cbz	x0, e4 <ctf_member_iter+0xc4>
      68:	mov	x22, x0
      6c:	ldr	x0, [x29, #24]
      70:	add	x2, sp, #0x8
      74:	mov	x3, sp
      78:	mov	x1, x22
      7c:	bl	2c4 <ctf_get_ctt_size>
      80:	ldr	x8, [x29, #24]
      84:	ldr	w0, [x22, #4]
      88:	ldr	x8, [x8]
      8c:	ldr	x8, [x8]
      90:	blr	x8
      94:	orr	w8, w0, #0x1
      98:	cmp	w8, #0x7
      9c:	b.ne	ec <ctf_member_iter+0xcc>  // b.any
      a0:	ldr	x0, [x29, #24]
      a4:	mov	x1, x23
      a8:	bl	0 <ctf_dynamic_type>
      ac:	cbz	x0, 100 <ctf_member_iter+0xe0>
      b0:	ldr	x22, [x0, #56]
      b4:	cbz	x22, 168 <ctf_member_iter+0x148>
      b8:	ldp	x0, x1, [x22, #16]
      bc:	ldr	x2, [x22, #32]
      c0:	mov	x3, x19
      c4:	blr	x20
      c8:	mov	w21, w0
      cc:	cbnz	w0, 174 <ctf_member_iter+0x154>
      d0:	ldr	x22, [x22, #8]
      d4:	cbnz	x22, b8 <ctf_member_iter+0x98>
      d8:	mov	w8, #0x1                   	// #1
      dc:	cbnz	w8, 1c8 <ctf_member_iter+0x1a8>
      e0:	b	1cc <ctf_member_iter+0x1ac>
      e4:	mov	w21, #0xffffffff            	// #-1
      e8:	b	1cc <ctf_member_iter+0x1ac>
      ec:	mov	w1, #0x3fb                 	// #1019
      f0:	mov	x0, x21
      f4:	bl	0 <ctf_set_errno>
      f8:	mov	x21, x0
      fc:	b	1cc <ctf_member_iter+0x1ac>
     100:	ldr	x8, [x29, #24]
     104:	ldp	x9, x21, [sp]
     108:	ldr	w0, [x22, #4]
     10c:	ldr	x8, [x8]
     110:	add	x23, x9, x22
     114:	ldr	x8, [x8, #16]
     118:	blr	x8
     11c:	mov	w8, #0x1fffffff            	// #536870911
     120:	cmp	x21, x8
     124:	mov	w22, w0
     128:	b.gt	180 <ctf_member_iter+0x160>
     12c:	cbz	w22, 1e8 <ctf_member_iter+0x1c8>
     130:	ldr	x0, [x29, #24]
     134:	ldr	w1, [x23]
     138:	bl	0 <ctf_strptr>
     13c:	ldp	w2, w1, [x23, #4]
     140:	mov	x3, x19
     144:	blr	x20
     148:	cmp	w0, #0x0
     14c:	cset	w8, eq  // eq = none
     150:	csel	w21, w21, w0, eq  // eq = none
     154:	cbnz	w0, 1c4 <ctf_member_iter+0x1a4>
     158:	subs	w22, w22, #0x1
     15c:	add	x23, x23, #0xc
     160:	b.ne	130 <ctf_member_iter+0x110>  // b.any
     164:	b	1c0 <ctf_member_iter+0x1a0>
     168:	mov	w8, #0x1                   	// #1
     16c:	cbz	w8, 1cc <ctf_member_iter+0x1ac>
     170:	b	1c8 <ctf_member_iter+0x1a8>
     174:	mov	w8, wzr
     178:	cbnz	w8, 1c8 <ctf_member_iter+0x1a8>
     17c:	b	1cc <ctf_member_iter+0x1ac>
     180:	cbz	w22, 1e8 <ctf_member_iter+0x1c8>
     184:	ldr	x0, [x29, #24]
     188:	ldr	w1, [x23]
     18c:	bl	0 <ctf_strptr>
     190:	ldp	w8, w1, [x23, #4]
     194:	ldr	w2, [x23, #12]
     198:	mov	x3, x19
     19c:	bfi	x2, x8, #32, #32
     1a0:	blr	x20
     1a4:	cmp	w0, #0x0
     1a8:	cset	w8, eq  // eq = none
     1ac:	csel	w21, w21, w0, eq  // eq = none
     1b0:	cbnz	w0, 1c4 <ctf_member_iter+0x1a4>
     1b4:	subs	w22, w22, #0x1
     1b8:	add	x23, x23, #0x10
     1bc:	b.ne	184 <ctf_member_iter+0x164>  // b.any
     1c0:	mov	w8, #0x1                   	// #1
     1c4:	tbz	w8, #0, 1cc <ctf_member_iter+0x1ac>
     1c8:	mov	w21, wzr
     1cc:	mov	w0, w21
     1d0:	ldp	x20, x19, [sp, #64]
     1d4:	ldp	x22, x21, [sp, #48]
     1d8:	ldr	x23, [sp, #32]
     1dc:	ldp	x29, x30, [sp, #16]
     1e0:	add	sp, sp, #0x50
     1e4:	ret
     1e8:	mov	w8, #0x1                   	// #1
     1ec:	tbnz	w8, #0, 1c8 <ctf_member_iter+0x1a8>
     1f0:	b	1cc <ctf_member_iter+0x1ac>

00000000000001f4 <ctf_type_resolve>:
     1f4:	stp	x29, x30, [sp, #-64]!
     1f8:	stp	x20, x19, [sp, #48]
     1fc:	mov	x29, sp
     200:	mov	x19, x0
     204:	str	x23, [sp, #16]
     208:	stp	x22, x21, [sp, #32]
     20c:	str	x0, [x29, #24]
     210:	cbz	x1, 27c <ctf_type_resolve+0x88>
     214:	mov	x21, x1
     218:	mov	x23, x1
     21c:	mov	x20, x1
     220:	add	x0, x29, #0x18
     224:	mov	x1, x20
     228:	bl	0 <ctf_lookup_by_id>
     22c:	cbz	x0, 284 <ctf_type_resolve+0x90>
     230:	ldr	x8, [x29, #24]
     234:	mov	x22, x0
     238:	ldr	w0, [x0, #4]
     23c:	ldr	x8, [x8]
     240:	ldr	x8, [x8]
     244:	blr	x8
     248:	sub	w8, w0, #0xa
     24c:	cmp	w8, #0x3
     250:	b.hi	2ac <ctf_type_resolve+0xb8>  // b.pmore
     254:	ldr	w8, [x22, #8]
     258:	cmp	x23, x8
     25c:	b.eq	28c <ctf_type_resolve+0x98>  // b.none
     260:	cmp	x20, x8
     264:	b.eq	28c <ctf_type_resolve+0x98>  // b.none
     268:	cmp	x8, x21
     26c:	b.eq	28c <ctf_type_resolve+0x98>  // b.none
     270:	mov	x23, x20
     274:	mov	x20, x8
     278:	cbnz	w8, 220 <ctf_type_resolve+0x2c>
     27c:	mov	w1, #0x41b                 	// #1051
     280:	b	2a0 <ctf_type_resolve+0xac>
     284:	mov	x20, #0xffffffffffffffff    	// #-1
     288:	b	2ac <ctf_type_resolve+0xb8>
     28c:	adrp	x0, 0 <ctf_type_isparent>
     290:	add	x0, x0, #0x0
     294:	mov	x1, x21
     298:	bl	0 <ctf_dprintf>
     29c:	mov	w1, #0x3ef                 	// #1007
     2a0:	mov	x0, x19
     2a4:	bl	0 <ctf_set_errno>
     2a8:	mov	x20, x0
     2ac:	mov	x0, x20
     2b0:	ldp	x20, x19, [sp, #48]
     2b4:	ldp	x22, x21, [sp, #32]
     2b8:	ldr	x23, [sp, #16]
     2bc:	ldp	x29, x30, [sp], #64
     2c0:	ret

00000000000002c4 <ctf_get_ctt_size>:
     2c4:	stp	x29, x30, [sp, #-16]!
     2c8:	ldr	x8, [x0]
     2cc:	mov	x29, sp
     2d0:	ldr	x8, [x8, #24]
     2d4:	blr	x8
     2d8:	ldp	x29, x30, [sp], #16
     2dc:	ret

00000000000002e0 <ctf_enum_iter>:
     2e0:	sub	sp, sp, #0x50
     2e4:	stp	x29, x30, [sp, #16]
     2e8:	add	x29, sp, #0x10
     2ec:	str	x23, [sp, #32]
     2f0:	stp	x22, x21, [sp, #48]
     2f4:	stp	x20, x19, [sp, #64]
     2f8:	mov	x19, x3
     2fc:	mov	x20, x2
     300:	mov	x21, x0
     304:	str	x0, [x29, #24]
     308:	bl	448 <ctf_type_resolve_unsliced>
     30c:	cmn	x0, #0x1
     310:	b.eq	3a0 <ctf_enum_iter+0xc0>  // b.none
     314:	mov	x23, x0
     318:	add	x0, x29, #0x18
     31c:	mov	x1, x23
     320:	bl	0 <ctf_lookup_by_id>
     324:	cbz	x0, 3a0 <ctf_enum_iter+0xc0>
     328:	ldr	x8, [x29, #24]
     32c:	mov	x22, x0
     330:	ldr	w0, [x0, #4]
     334:	ldr	x8, [x8]
     338:	ldr	x8, [x8]
     33c:	blr	x8
     340:	cmp	w0, #0x8
     344:	b.ne	3a8 <ctf_enum_iter+0xc8>  // b.any
     348:	ldr	x0, [x29, #24]
     34c:	add	x3, sp, #0x8
     350:	mov	x1, x22
     354:	mov	x2, xzr
     358:	bl	2c4 <ctf_get_ctt_size>
     35c:	mov	x0, x21
     360:	mov	x1, x23
     364:	bl	0 <ctf_dynamic_type>
     368:	cbz	x0, 3bc <ctf_enum_iter+0xdc>
     36c:	ldr	x22, [x0, #56]
     370:	cbz	x22, 414 <ctf_enum_iter+0x134>
     374:	ldr	x0, [x22, #16]
     378:	ldr	w1, [x22, #40]
     37c:	mov	x2, x19
     380:	blr	x20
     384:	mov	w21, w0
     388:	cbnz	w0, 420 <ctf_enum_iter+0x140>
     38c:	ldr	x22, [x22, #8]
     390:	cbnz	x22, 374 <ctf_enum_iter+0x94>
     394:	mov	w8, #0x1                   	// #1
     398:	cbnz	w8, 428 <ctf_enum_iter+0x148>
     39c:	b	42c <ctf_enum_iter+0x14c>
     3a0:	mov	w21, #0xffffffff            	// #-1
     3a4:	b	42c <ctf_enum_iter+0x14c>
     3a8:	mov	w1, #0x3fc                 	// #1020
     3ac:	mov	x0, x21
     3b0:	bl	0 <ctf_set_errno>
     3b4:	mov	x21, x0
     3b8:	b	42c <ctf_enum_iter+0x14c>
     3bc:	ldr	x8, [x29, #24]
     3c0:	ldr	w0, [x22, #4]
     3c4:	ldr	x21, [sp, #8]
     3c8:	ldr	x8, [x8]
     3cc:	ldr	x8, [x8, #16]
     3d0:	blr	x8
     3d4:	cbz	w0, 428 <ctf_enum_iter+0x148>
     3d8:	mov	w23, w0
     3dc:	add	x22, x21, x22
     3e0:	ldr	x0, [x29, #24]
     3e4:	ldr	w1, [x22]
     3e8:	bl	0 <ctf_strptr>
     3ec:	ldr	w1, [x22, #4]
     3f0:	mov	x2, x19
     3f4:	blr	x20
     3f8:	cmp	w0, #0x0
     3fc:	csel	w21, w21, w0, eq  // eq = none
     400:	cbnz	w0, 42c <ctf_enum_iter+0x14c>
     404:	subs	w23, w23, #0x1
     408:	add	x22, x22, #0x8
     40c:	b.ne	3e0 <ctf_enum_iter+0x100>  // b.any
     410:	b	428 <ctf_enum_iter+0x148>
     414:	mov	w8, #0x1                   	// #1
     418:	cbnz	w8, 428 <ctf_enum_iter+0x148>
     41c:	b	42c <ctf_enum_iter+0x14c>
     420:	mov	w8, wzr
     424:	cbz	w8, 42c <ctf_enum_iter+0x14c>
     428:	mov	w21, wzr
     42c:	mov	w0, w21
     430:	ldp	x20, x19, [sp, #64]
     434:	ldp	x22, x21, [sp, #48]
     438:	ldr	x23, [sp, #32]
     43c:	ldp	x29, x30, [sp, #16]
     440:	add	sp, sp, #0x50
     444:	ret

0000000000000448 <ctf_type_resolve_unsliced>:
     448:	stp	x29, x30, [sp, #-32]!
     44c:	mov	x29, sp
     450:	str	x19, [sp, #16]
     454:	str	x0, [x29, #24]
     458:	bl	1f4 <ctf_type_resolve>
     45c:	mov	x19, x0
     460:	cmn	x0, #0x1
     464:	b.eq	4ac <ctf_type_resolve_unsliced+0x64>  // b.none
     468:	add	x0, x29, #0x18
     46c:	mov	x1, x19
     470:	bl	0 <ctf_lookup_by_id>
     474:	cbz	x0, 4a8 <ctf_type_resolve_unsliced+0x60>
     478:	ldr	x8, [x29, #24]
     47c:	ldr	w0, [x0, #4]
     480:	ldr	x8, [x8]
     484:	ldr	x8, [x8]
     488:	blr	x8
     48c:	cmp	w0, #0xe
     490:	b.ne	4ac <ctf_type_resolve_unsliced+0x64>  // b.any
     494:	ldr	x0, [x29, #24]
     498:	mov	x1, x19
     49c:	bl	798 <ctf_type_reference>
     4a0:	mov	x19, x0
     4a4:	b	4ac <ctf_type_resolve_unsliced+0x64>
     4a8:	mov	x19, #0xffffffffffffffff    	// #-1
     4ac:	mov	x0, x19
     4b0:	ldr	x19, [sp, #16]
     4b4:	ldp	x29, x30, [sp], #32
     4b8:	ret

00000000000004bc <ctf_type_iter>:
     4bc:	stp	x29, x30, [sp, #-80]!
     4c0:	stp	x24, x23, [sp, #32]
     4c4:	stp	x22, x21, [sp, #48]
     4c8:	stp	x20, x19, [sp, #64]
     4cc:	ldr	x23, [x0, #480]
     4d0:	str	x25, [sp, #16]
     4d4:	mov	x29, sp
     4d8:	cbz	x23, 588 <ctf_type_iter+0xcc>
     4dc:	ldr	w24, [x0, #552]
     4e0:	mov	x19, x2
     4e4:	mov	x20, x0
     4e8:	mov	x21, x1
     4ec:	mov	w25, #0x1                   	// #1
     4f0:	b	508 <ctf_type_iter+0x4c>
     4f4:	mov	w8, #0x1                   	// #1
     4f8:	tbz	w8, #0, 58c <ctf_type_iter+0xd0>
     4fc:	add	x25, x25, #0x1
     500:	cmp	x25, x23
     504:	b.hi	588 <ctf_type_iter+0xcc>  // b.pmore
     508:	ldr	w8, [x20, #552]
     50c:	tbnz	w8, #1, 524 <ctf_type_iter+0x68>
     510:	ldr	x8, [x20, #440]
     514:	ldr	x9, [x20, #408]
     518:	ldr	w8, [x8, x25, lsl #2]
     51c:	add	x8, x9, x8
     520:	b	544 <ctf_type_iter+0x88>
     524:	mov	x1, x25
     528:	tbz	w8, #0, 538 <ctf_type_iter+0x7c>
     52c:	ldr	w8, [x20, #544]
     530:	add	w8, w8, #0x1
     534:	orr	x1, x25, x8
     538:	mov	x0, x20
     53c:	bl	0 <ctf_dtd_lookup>
     540:	add	x8, x0, #0x18
     544:	ldr	x9, [x20]
     548:	ldr	w0, [x8, #4]
     54c:	ldr	x9, [x9, #8]
     550:	blr	x9
     554:	cbz	w0, 4f4 <ctf_type_iter+0x38>
     558:	mov	x0, x25
     55c:	tbz	w24, #0, 56c <ctf_type_iter+0xb0>
     560:	ldr	w8, [x20, #544]
     564:	add	w8, w8, #0x1
     568:	orr	x0, x25, x8
     56c:	mov	x1, x19
     570:	blr	x21
     574:	cbz	w0, 4f4 <ctf_type_iter+0x38>
     578:	mov	w8, wzr
     57c:	mov	w22, w0
     580:	tbnz	w8, #0, 4fc <ctf_type_iter+0x40>
     584:	b	58c <ctf_type_iter+0xd0>
     588:	mov	w22, wzr
     58c:	mov	w0, w22
     590:	ldp	x20, x19, [sp, #64]
     594:	ldp	x22, x21, [sp, #48]
     598:	ldp	x24, x23, [sp, #32]
     59c:	ldr	x25, [sp, #16]
     5a0:	ldp	x29, x30, [sp], #80
     5a4:	ret

00000000000005a8 <ctf_type_iter_all>:
     5a8:	stp	x29, x30, [sp, #-80]!
     5ac:	stp	x26, x25, [sp, #16]
     5b0:	stp	x24, x23, [sp, #32]
     5b4:	stp	x22, x21, [sp, #48]
     5b8:	stp	x20, x19, [sp, #64]
     5bc:	ldr	x24, [x0, #480]
     5c0:	mov	x29, sp
     5c4:	cbz	x24, 674 <ctf_type_iter_all+0xcc>
     5c8:	ldr	w25, [x0, #552]
     5cc:	mov	x19, x2
     5d0:	mov	x20, x0
     5d4:	mov	x22, x1
     5d8:	mov	w26, #0x1                   	// #1
     5dc:	ldr	w8, [x20, #552]
     5e0:	tbnz	w8, #1, 600 <ctf_type_iter_all+0x58>
     5e4:	ldr	x8, [x20, #440]
     5e8:	ldr	x9, [x20, #408]
     5ec:	ldr	w8, [x8, x26, lsl #2]
     5f0:	add	x8, x9, x8
     5f4:	mov	x23, x26
     5f8:	tbnz	w25, #0, 628 <ctf_type_iter_all+0x80>
     5fc:	b	634 <ctf_type_iter_all+0x8c>
     600:	mov	x1, x26
     604:	tbz	w8, #0, 614 <ctf_type_iter_all+0x6c>
     608:	ldr	w8, [x20, #544]
     60c:	add	w8, w8, #0x1
     610:	orr	x1, x26, x8
     614:	mov	x0, x20
     618:	bl	0 <ctf_dtd_lookup>
     61c:	add	x8, x0, #0x18
     620:	mov	x23, x26
     624:	tbz	w25, #0, 634 <ctf_type_iter_all+0x8c>
     628:	ldr	w9, [x20, #544]
     62c:	add	w9, w9, #0x1
     630:	orr	x23, x26, x9
     634:	ldr	x9, [x20]
     638:	ldr	w0, [x8, #4]
     63c:	ldr	x9, [x9, #8]
     640:	blr	x9
     644:	cmp	w0, #0x0
     648:	cset	w1, ne  // ne = any
     64c:	mov	x0, x23
     650:	mov	x2, x19
     654:	blr	x22
     658:	cmp	w0, #0x0
     65c:	cset	w8, ne  // ne = any
     660:	csel	w21, w8, w21, ne  // ne = any
     664:	cbnz	w0, 678 <ctf_type_iter_all+0xd0>
     668:	add	x26, x26, #0x1
     66c:	cmp	x26, x24
     670:	b.ls	5dc <ctf_type_iter_all+0x34>  // b.plast
     674:	mov	w21, wzr
     678:	mov	w0, w21
     67c:	ldp	x20, x19, [sp, #64]
     680:	ldp	x22, x21, [sp, #48]
     684:	ldp	x24, x23, [sp, #32]
     688:	ldp	x26, x25, [sp, #16]
     68c:	ldp	x29, x30, [sp], #80
     690:	ret

0000000000000694 <ctf_variable_iter>:
     694:	stp	x29, x30, [sp, #-64]!
     698:	stp	x22, x21, [sp, #32]
     69c:	stp	x20, x19, [sp, #48]
     6a0:	ldr	w8, [x0, #552]
     6a4:	mov	x19, x2
     6a8:	mov	x21, x0
     6ac:	mov	x20, x1
     6b0:	str	x23, [sp, #16]
     6b4:	mov	x29, sp
     6b8:	tbz	w8, #0, 6c4 <ctf_variable_iter+0x30>
     6bc:	ldr	x9, [x21, #512]
     6c0:	cbz	x9, 74c <ctf_variable_iter+0xb8>
     6c4:	tbnz	w8, #1, 720 <ctf_variable_iter+0x8c>
     6c8:	ldr	x8, [x21, #472]
     6cc:	cbz	x8, 754 <ctf_variable_iter+0xc0>
     6d0:	mov	x22, xzr
     6d4:	mov	x23, xzr
     6d8:	ldr	x8, [x21, #464]
     6dc:	mov	x0, x21
     6e0:	ldr	w1, [x8, x22]
     6e4:	bl	0 <ctf_strptr>
     6e8:	ldr	x8, [x21, #464]
     6ec:	mov	x2, x19
     6f0:	add	x8, x8, x22
     6f4:	ldr	w1, [x8, #4]
     6f8:	blr	x20
     6fc:	cbnz	w0, 76c <ctf_variable_iter+0xd8>
     700:	ldr	x8, [x21, #472]
     704:	add	x23, x23, #0x1
     708:	add	x22, x22, #0x8
     70c:	cmp	x23, x8
     710:	b.cc	6d8 <ctf_variable_iter+0x44>  // b.lo, b.ul, b.last
     714:	mov	w8, #0x1                   	// #1
     718:	tbnz	w8, #0, 774 <ctf_variable_iter+0xe0>
     71c:	b	778 <ctf_variable_iter+0xe4>
     720:	ldr	x21, [x21, #608]
     724:	cbz	x21, 760 <ctf_variable_iter+0xcc>
     728:	ldp	x0, x1, [x21, #16]
     72c:	mov	x2, x19
     730:	blr	x20
     734:	cbnz	w0, 78c <ctf_variable_iter+0xf8>
     738:	ldr	x21, [x21, #8]
     73c:	cbnz	x21, 728 <ctf_variable_iter+0x94>
     740:	mov	w8, #0x1                   	// #1
     744:	cbnz	w8, 774 <ctf_variable_iter+0xe0>
     748:	b	778 <ctf_variable_iter+0xe4>
     74c:	mov	w0, #0x3f3                 	// #1011
     750:	b	778 <ctf_variable_iter+0xe4>
     754:	mov	w8, #0x1                   	// #1
     758:	tbnz	w8, #0, 774 <ctf_variable_iter+0xe0>
     75c:	b	778 <ctf_variable_iter+0xe4>
     760:	mov	w8, #0x1                   	// #1
     764:	cbnz	w8, 774 <ctf_variable_iter+0xe0>
     768:	b	778 <ctf_variable_iter+0xe4>
     76c:	mov	w8, wzr
     770:	tbz	wzr, #0, 778 <ctf_variable_iter+0xe4>
     774:	mov	w0, wzr
     778:	ldp	x20, x19, [sp, #48]
     77c:	ldp	x22, x21, [sp, #32]
     780:	ldr	x23, [sp, #16]
     784:	ldp	x29, x30, [sp], #64
     788:	ret
     78c:	mov	w8, wzr
     790:	cbnz	w8, 774 <ctf_variable_iter+0xe0>
     794:	b	778 <ctf_variable_iter+0xe4>

0000000000000798 <ctf_type_reference>:
     798:	sub	sp, sp, #0x30
     79c:	stp	x20, x19, [sp, #32]
     7a0:	mov	x20, x0
     7a4:	str	x0, [sp, #8]
     7a8:	add	x0, sp, #0x8
     7ac:	stp	x29, x30, [sp, #16]
     7b0:	add	x29, sp, #0x10
     7b4:	bl	0 <ctf_lookup_by_id>
     7b8:	cbz	x0, 7e8 <ctf_type_reference+0x50>
     7bc:	ldr	x8, [sp, #8]
     7c0:	mov	x19, x0
     7c4:	ldr	w0, [x0, #4]
     7c8:	ldr	x8, [x8]
     7cc:	ldr	x8, [x8]
     7d0:	blr	x8
     7d4:	sub	w8, w0, #0xa
     7d8:	cmp	w8, #0x4
     7dc:	b.cs	7f0 <ctf_type_reference+0x58>  // b.hs, b.nlast
     7e0:	ldr	w0, [x19, #8]
     7e4:	b	82c <ctf_type_reference+0x94>
     7e8:	mov	x0, #0xffffffffffffffff    	// #-1
     7ec:	b	82c <ctf_type_reference+0x94>
     7f0:	cmp	w0, #0xe
     7f4:	b.eq	810 <ctf_type_reference+0x78>  // b.none
     7f8:	cmp	w0, #0x3
     7fc:	b.eq	7e0 <ctf_type_reference+0x48>  // b.none
     800:	mov	w1, #0x400                 	// #1024
     804:	mov	x0, x20
     808:	bl	0 <ctf_set_errno>
     80c:	b	82c <ctf_type_reference+0x94>
     810:	ldr	x0, [sp, #8]
     814:	mov	x3, sp
     818:	mov	x1, x19
     81c:	mov	x2, xzr
     820:	bl	2c4 <ctf_get_ctt_size>
     824:	ldr	x8, [sp]
     828:	ldr	w0, [x8, x19]
     82c:	ldp	x20, x19, [sp, #32]
     830:	ldp	x29, x30, [sp, #16]
     834:	add	sp, sp, #0x30
     838:	ret

000000000000083c <ctf_lookup_by_rawname>:
     83c:	stp	x29, x30, [sp, #-32]!
     840:	stp	x20, x19, [sp, #16]
     844:	mov	x29, sp
     848:	mov	x19, x2
     84c:	mov	x20, x0
     850:	bl	0 <ctf_name_table>
     854:	mov	x1, x0
     858:	mov	x0, x20
     85c:	mov	x2, x19
     860:	bl	870 <ctf_lookup_by_rawhash>
     864:	ldp	x20, x19, [sp, #16]
     868:	ldp	x29, x30, [sp], #32
     86c:	ret

0000000000000870 <ctf_lookup_by_rawhash>:
     870:	stp	x29, x30, [sp, #-16]!
     874:	ldrb	w9, [x0, #552]
     878:	mov	x29, sp
     87c:	tbnz	w9, #1, 898 <ctf_lookup_by_rawhash+0x28>
     880:	mov	x8, x0
     884:	ldr	x0, [x1]
     888:	mov	x1, x8
     88c:	bl	0 <ctf_hash_lookup_type>
     890:	ldp	x29, x30, [sp], #16
     894:	ret
     898:	ldr	x0, [x1, #8]
     89c:	mov	x1, x2
     8a0:	bl	0 <ctf_dynhash_lookup>
     8a4:	ldp	x29, x30, [sp], #16
     8a8:	ret

00000000000008ac <ctf_type_aname>:
     8ac:	sub	sp, sp, #0xe0
     8b0:	stp	x20, x19, [sp, #208]
     8b4:	mov	x20, x1
     8b8:	mov	x19, x0
     8bc:	stp	x29, x30, [sp, #128]
     8c0:	stp	x28, x27, [sp, #144]
     8c4:	stp	x26, x25, [sp, #160]
     8c8:	stp	x24, x23, [sp, #176]
     8cc:	stp	x22, x21, [sp, #192]
     8d0:	add	x29, sp, #0x80
     8d4:	cbnz	x0, 8e8 <ctf_type_aname+0x3c>
     8d8:	cmn	x20, #0x1
     8dc:	b.ne	8e8 <ctf_type_aname+0x3c>  // b.any
     8e0:	mov	x19, xzr
     8e4:	b	b14 <ctf_type_aname+0x268>
     8e8:	add	x0, sp, #0x18
     8ec:	add	x25, sp, #0x18
     8f0:	bl	0 <ctf_decl_init>
     8f4:	add	x0, sp, #0x18
     8f8:	mov	x1, x19
     8fc:	mov	x2, x20
     900:	bl	0 <ctf_decl_push>
     904:	ldr	w8, [sp, #120]
     908:	cbz	w8, 928 <ctf_type_aname+0x7c>
     90c:	add	x0, sp, #0x18
     910:	bl	0 <ctf_decl_fini>
     914:	ldr	w1, [sp, #120]
     918:	mov	x0, x19
     91c:	bl	0 <ctf_set_errno>
     920:	mov	x19, xzr
     924:	b	b14 <ctf_type_aname+0x268>
     928:	ldp	w8, w9, [sp, #92]
     92c:	mov	w10, #0xffffffff            	// #-1
     930:	mov	w11, #0x2                   	// #2
     934:	adrp	x21, 0 <ctf_type_isparent>
     938:	cmp	w8, #0x1
     93c:	csinc	x10, x10, xzr, le
     940:	cmp	w9, #0x2
     944:	csel	x9, x11, x10, gt
     948:	adrp	x22, 0 <ctf_type_isparent>
     94c:	adrp	x24, 0 <ctf_type_isparent>
     950:	adrp	x23, 0 <ctf_type_isparent>
     954:	adrp	x27, 0 <ctf_type_isparent>
     958:	str	x9, [sp, #8]
     95c:	csinv	w9, w11, wzr, gt
     960:	cmp	w8, #0x1
     964:	mov	x20, xzr
     968:	mov	w28, #0x3                   	// #3
     96c:	add	x21, x21, #0x0
     970:	add	x22, x22, #0x0
     974:	add	x24, x24, #0x0
     978:	add	x23, x23, #0x0
     97c:	add	x27, x27, #0x0
     980:	csinc	w26, w9, wzr, le
     984:	b	998 <ctf_type_aname+0xec>
     988:	add	x20, x20, #0x1
     98c:	cmp	x20, #0x4
     990:	add	x25, sp, #0x18
     994:	b.eq	aec <ctf_type_aname+0x240>  // b.none
     998:	add	x8, x25, x20, lsl #4
     99c:	ldr	x25, [x8, #8]
     9a0:	cbnz	x25, 9e0 <ctf_type_aname+0x134>
     9a4:	ldr	x8, [sp, #8]
     9a8:	cmp	x8, x20
     9ac:	b.ne	988 <ctf_type_aname+0xdc>  // b.any
     9b0:	adrp	x1, 0 <ctf_type_isparent>
     9b4:	add	x0, sp, #0x18
     9b8:	add	x1, x1, #0x0
     9bc:	bl	0 <ctf_decl_sprintf>
     9c0:	b	988 <ctf_type_aname+0xdc>
     9c4:	adrp	x1, 0 <ctf_type_isparent>
     9c8:	add	x0, sp, #0x18
     9cc:	add	x1, x1, #0x0
     9d0:	bl	0 <ctf_decl_sprintf>
     9d4:	ldr	w28, [x25, #24]
     9d8:	ldr	x25, [x25, #8]
     9dc:	cbz	x25, 9a4 <ctf_type_aname+0xf8>
     9e0:	str	x19, [sp, #16]
     9e4:	ldr	x1, [x25, #16]
     9e8:	add	x0, sp, #0x10
     9ec:	bl	0 <ctf_lookup_by_id>
     9f0:	ldr	x8, [sp, #16]
     9f4:	ldr	w1, [x0]
     9f8:	mov	x0, x8
     9fc:	bl	0 <ctf_strptr>
     a00:	sub	w8, w28, #0x3
     a04:	cmp	w8, #0x2
     a08:	mov	x28, x0
     a0c:	b.cc	a1c <ctf_type_aname+0x170>  // b.lo, b.ul, b.last
     a10:	add	x0, sp, #0x18
     a14:	mov	x1, x21
     a18:	bl	0 <ctf_decl_sprintf>
     a1c:	cmp	x20, w26, uxtw
     a20:	b.ne	a34 <ctf_type_aname+0x188>  // b.any
     a24:	add	x0, sp, #0x18
     a28:	mov	x1, x22
     a2c:	bl	0 <ctf_decl_sprintf>
     a30:	mov	w26, #0xffffffff            	// #-1
     a34:	ldr	w8, [x25, #24]
     a38:	sub	w8, w8, #0x1
     a3c:	cmp	w8, #0xc
     a40:	b.hi	9d4 <ctf_type_aname+0x128>  // b.pmore
     a44:	adr	x9, 9c4 <ctf_type_aname+0x118>
     a48:	ldrb	w10, [x24, x8]
     a4c:	add	x9, x9, x10, lsl #2
     a50:	br	x9
     a54:	add	x0, sp, #0x18
     a58:	mov	x1, x23
     a5c:	b	ac0 <ctf_type_aname+0x214>
     a60:	add	x0, sp, #0x18
     a64:	mov	x1, x27
     a68:	b	ac0 <ctf_type_aname+0x214>
     a6c:	adrp	x1, 0 <ctf_type_isparent>
     a70:	add	x0, sp, #0x18
     a74:	add	x1, x1, #0x0
     a78:	b	9d0 <ctf_type_aname+0x124>
     a7c:	ldr	w2, [x25, #28]
     a80:	adrp	x1, 0 <ctf_type_isparent>
     a84:	add	x0, sp, #0x18
     a88:	add	x1, x1, #0x0
     a8c:	bl	0 <ctf_decl_sprintf>
     a90:	b	9d4 <ctf_type_aname+0x128>
     a94:	adrp	x1, 0 <ctf_type_isparent>
     a98:	add	x0, sp, #0x18
     a9c:	add	x1, x1, #0x0
     aa0:	b	9d0 <ctf_type_aname+0x124>
     aa4:	adrp	x1, 0 <ctf_type_isparent>
     aa8:	add	x0, sp, #0x18
     aac:	add	x1, x1, #0x0
     ab0:	b	ac0 <ctf_type_aname+0x214>
     ab4:	adrp	x1, 0 <ctf_type_isparent>
     ab8:	add	x0, sp, #0x18
     abc:	add	x1, x1, #0x0
     ac0:	mov	x2, x28
     ac4:	bl	0 <ctf_decl_sprintf>
     ac8:	b	9d4 <ctf_type_aname+0x128>
     acc:	adrp	x1, 0 <ctf_type_isparent>
     ad0:	add	x0, sp, #0x18
     ad4:	add	x1, x1, #0x0
     ad8:	b	9d0 <ctf_type_aname+0x124>
     adc:	adrp	x1, 0 <ctf_type_isparent>
     ae0:	add	x0, sp, #0x18
     ae4:	add	x1, x1, #0x0
     ae8:	b	9d0 <ctf_type_aname+0x124>
     aec:	ldr	w8, [sp, #124]
     af0:	cbz	w8, b00 <ctf_type_aname+0x254>
     af4:	mov	w1, #0xc                   	// #12
     af8:	mov	x0, x19
     afc:	bl	0 <ctf_set_errno>
     b00:	add	x0, sp, #0x18
     b04:	bl	0 <ctf_decl_buf>
     b08:	mov	x19, x0
     b0c:	add	x0, sp, #0x18
     b10:	bl	0 <ctf_decl_fini>
     b14:	mov	x0, x19
     b18:	ldp	x20, x19, [sp, #208]
     b1c:	ldp	x22, x21, [sp, #192]
     b20:	ldp	x24, x23, [sp, #176]
     b24:	ldp	x26, x25, [sp, #160]
     b28:	ldp	x28, x27, [sp, #144]
     b2c:	ldp	x29, x30, [sp, #128]
     b30:	add	sp, sp, #0xe0
     b34:	ret

0000000000000b38 <ctf_type_lname>:
     b38:	stp	x29, x30, [sp, #-64]!
     b3c:	str	x23, [sp, #16]
     b40:	stp	x22, x21, [sp, #32]
     b44:	stp	x20, x19, [sp, #48]
     b48:	mov	x29, sp
     b4c:	mov	x21, x3
     b50:	mov	x22, x2
     b54:	mov	x19, x0
     b58:	bl	8ac <ctf_type_aname>
     b5c:	cbz	x0, ba4 <ctf_type_lname+0x6c>
     b60:	mov	x23, x0
     b64:	bl	0 <strlen>
     b68:	adrp	x2, 0 <ctf_type_isparent>
     b6c:	mov	x20, x0
     b70:	add	x2, x2, #0x0
     b74:	mov	x0, x22
     b78:	mov	x1, x21
     b7c:	mov	x3, x23
     b80:	bl	0 <snprintf>
     b84:	mov	x0, x23
     b88:	bl	0 <free>
     b8c:	cmp	x20, x21
     b90:	b.cc	ba8 <ctf_type_lname+0x70>  // b.lo, b.ul, b.last
     b94:	mov	w1, #0x401                 	// #1025
     b98:	mov	x0, x19
     b9c:	bl	0 <ctf_set_errno>
     ba0:	b	ba8 <ctf_type_lname+0x70>
     ba4:	mov	x20, #0xffffffffffffffff    	// #-1
     ba8:	mov	x0, x20
     bac:	ldp	x20, x19, [sp, #48]
     bb0:	ldp	x22, x21, [sp, #32]
     bb4:	ldr	x23, [sp, #16]
     bb8:	ldp	x29, x30, [sp], #64
     bbc:	ret

0000000000000bc0 <ctf_type_name>:
     bc0:	stp	x29, x30, [sp, #-32]!
     bc4:	stp	x20, x19, [sp, #16]
     bc8:	mov	x29, sp
     bcc:	mov	x19, x3
     bd0:	mov	x20, x2
     bd4:	bl	b38 <ctf_type_lname>
     bd8:	cmp	x0, x19
     bdc:	mov	x8, #0xffffffffffffffff    	// #-1
     be0:	ccmp	x0, x8, #0x4, cc  // cc = lo, ul, last
     be4:	csel	x0, x20, xzr, gt
     be8:	ldp	x20, x19, [sp, #16]
     bec:	ldp	x29, x30, [sp], #32
     bf0:	ret

0000000000000bf4 <ctf_type_aname_raw>:
     bf4:	stp	x29, x30, [sp, #-32]!
     bf8:	mov	x29, sp
     bfc:	str	x0, [x29, #24]
     c00:	add	x0, x29, #0x18
     c04:	str	x19, [sp, #16]
     c08:	bl	0 <ctf_lookup_by_id>
     c0c:	cbz	x0, c34 <ctf_type_aname_raw+0x40>
     c10:	mov	x19, x0
     c14:	ldr	x0, [x29, #24]
     c18:	ldr	w1, [x19]
     c1c:	bl	0 <ctf_strraw>
     c20:	cbz	x0, c34 <ctf_type_aname_raw+0x40>
     c24:	ldr	x0, [x29, #24]
     c28:	ldr	w1, [x19]
     c2c:	bl	0 <ctf_strraw>
     c30:	bl	0 <strdup>
     c34:	ldr	x19, [sp, #16]
     c38:	ldp	x29, x30, [sp], #32
     c3c:	ret

0000000000000c40 <ctf_type_size>:
     c40:	sub	sp, sp, #0x40
     c44:	stp	x29, x30, [sp, #32]
     c48:	add	x29, sp, #0x20
     c4c:	stp	x20, x19, [sp, #48]
     c50:	stur	x0, [x29, #-8]
     c54:	bl	1f4 <ctf_type_resolve>
     c58:	cmn	x0, #0x1
     c5c:	b.eq	d3c <ctf_type_size+0xfc>  // b.none
     c60:	mov	x19, x0
     c64:	sub	x0, x29, #0x8
     c68:	mov	x1, x19
     c6c:	bl	0 <ctf_lookup_by_id>
     c70:	cbz	x0, d10 <ctf_type_size+0xd0>
     c74:	ldur	x8, [x29, #-8]
     c78:	mov	x20, x0
     c7c:	ldr	w0, [x0, #4]
     c80:	ldr	x8, [x8]
     c84:	ldr	x8, [x8]
     c88:	blr	x8
     c8c:	sub	w8, w0, #0x3
     c90:	cmp	w8, #0x5
     c94:	b.hi	d18 <ctf_type_size+0xd8>  // b.pmore
     c98:	adrp	x9, 0 <ctf_type_isparent>
     c9c:	add	x9, x9, #0x0
     ca0:	adr	x10, cb4 <ctf_type_size+0x74>
     ca4:	ldrb	w11, [x9, x8]
     ca8:	add	x10, x10, x11, lsl #2
     cac:	mov	x0, xzr
     cb0:	br	x10
     cb4:	ldur	x8, [x29, #-8]
     cb8:	ldr	x8, [x8, #488]
     cbc:	ldr	x0, [x8, #16]
     cc0:	b	d3c <ctf_type_size+0xfc>
     cc4:	ldur	x0, [x29, #-8]
     cc8:	mov	x1, x20
     ccc:	mov	x2, xzr
     cd0:	mov	x3, xzr
     cd4:	bl	2c4 <ctf_get_ctt_size>
     cd8:	cmp	x0, #0x0
     cdc:	b.gt	d3c <ctf_type_size+0xfc>
     ce0:	ldur	x0, [x29, #-8]
     ce4:	mov	x2, sp
     ce8:	mov	x1, x19
     cec:	bl	d4c <ctf_array_info>
     cf0:	tbnz	w0, #31, d10 <ctf_type_size+0xd0>
     cf4:	ldur	x0, [x29, #-8]
     cf8:	ldr	x1, [sp]
     cfc:	bl	c40 <ctf_type_size>
     d00:	tbnz	x0, #63, d10 <ctf_type_size+0xd0>
     d04:	ldr	w8, [sp, #16]
     d08:	mul	x0, x0, x8
     d0c:	b	d3c <ctf_type_size+0xfc>
     d10:	mov	x0, #0xffffffffffffffff    	// #-1
     d14:	b	d3c <ctf_type_size+0xfc>
     d18:	ldur	x0, [x29, #-8]
     d1c:	mov	x1, x20
     d20:	mov	x2, xzr
     d24:	mov	x3, xzr
     d28:	bl	2c4 <ctf_get_ctt_size>
     d2c:	b	d3c <ctf_type_size+0xfc>
     d30:	ldur	x8, [x29, #-8]
     d34:	ldr	x8, [x8, #488]
     d38:	ldr	x0, [x8, #40]
     d3c:	ldp	x20, x19, [sp, #48]
     d40:	ldp	x29, x30, [sp, #32]
     d44:	add	sp, sp, #0x40
     d48:	ret

0000000000000d4c <ctf_array_info>:
     d4c:	sub	sp, sp, #0x40
     d50:	stp	x22, x21, [sp, #32]
     d54:	mov	x21, x0
     d58:	str	x0, [sp, #8]
     d5c:	add	x0, sp, #0x8
     d60:	stp	x29, x30, [sp, #16]
     d64:	stp	x20, x19, [sp, #48]
     d68:	add	x29, sp, #0x10
     d6c:	mov	x19, x2
     d70:	mov	x22, x1
     d74:	bl	0 <ctf_lookup_by_id>
     d78:	cbz	x0, dc8 <ctf_array_info+0x7c>
     d7c:	ldr	x8, [sp, #8]
     d80:	mov	x20, x0
     d84:	ldr	w0, [x0, #4]
     d88:	ldr	x8, [x8]
     d8c:	ldr	x8, [x8]
     d90:	blr	x8
     d94:	cmp	w0, #0x4
     d98:	b.ne	dd0 <ctf_array_info+0x84>  // b.any
     d9c:	mov	x0, x21
     da0:	mov	x1, x22
     da4:	bl	0 <ctf_dynamic_type>
     da8:	cbz	x0, de0 <ctf_array_info+0x94>
     dac:	mov	x8, x0
     db0:	ldr	x9, [x8, #64]
     db4:	ldr	q0, [x8, #48]
     db8:	mov	w0, wzr
     dbc:	str	x9, [x19, #16]
     dc0:	str	q0, [x19]
     dc4:	b	e18 <ctf_array_info+0xcc>
     dc8:	mov	w0, #0xffffffff            	// #-1
     dcc:	b	e18 <ctf_array_info+0xcc>
     dd0:	mov	w1, #0x3ff                 	// #1023
     dd4:	mov	x0, x21
     dd8:	bl	0 <ctf_set_errno>
     ddc:	b	e18 <ctf_array_info+0xcc>
     de0:	ldr	x0, [sp, #8]
     de4:	mov	x3, sp
     de8:	mov	x1, x20
     dec:	mov	x2, xzr
     df0:	bl	2c4 <ctf_get_ctt_size>
     df4:	ldr	x8, [sp]
     df8:	mov	w0, wzr
     dfc:	add	x8, x8, x20
     e00:	ldr	w9, [x8]
     e04:	str	x9, [x19]
     e08:	ldr	w9, [x8, #4]
     e0c:	str	x9, [x19, #8]
     e10:	ldr	w8, [x8, #8]
     e14:	str	w8, [x19, #16]
     e18:	ldp	x20, x19, [sp, #48]
     e1c:	ldp	x22, x21, [sp, #32]
     e20:	ldp	x29, x30, [sp, #16]
     e24:	add	sp, sp, #0x40
     e28:	ret

0000000000000e2c <ctf_type_align>:
     e2c:	sub	sp, sp, #0x60
     e30:	stp	x29, x30, [sp, #48]
     e34:	add	x29, sp, #0x30
     e38:	stp	x22, x21, [sp, #64]
     e3c:	stp	x20, x19, [sp, #80]
     e40:	mov	x22, x0
     e44:	stur	x0, [x29, #-8]
     e48:	bl	1f4 <ctf_type_resolve>
     e4c:	mov	x19, x0
     e50:	cmn	x0, #0x1
     e54:	b.eq	f40 <ctf_type_align+0x114>  // b.none
     e58:	sub	x0, x29, #0x8
     e5c:	mov	x1, x19
     e60:	bl	0 <ctf_lookup_by_id>
     e64:	cbz	x0, f3c <ctf_type_align+0x110>
     e68:	ldur	x8, [x29, #-8]
     e6c:	mov	x21, x0
     e70:	ldr	w0, [x0, #4]
     e74:	ldr	x8, [x8]
     e78:	ldr	x8, [x8]
     e7c:	blr	x8
     e80:	sub	w8, w0, #0x3
     e84:	cmp	w8, #0x5
     e88:	b.hi	efc <ctf_type_align+0xd0>  // b.pmore
     e8c:	adrp	x9, 0 <ctf_type_isparent>
     e90:	add	x9, x9, #0x0
     e94:	adr	x10, ea4 <ctf_type_align+0x78>
     e98:	ldrb	w11, [x9, x8]
     e9c:	add	x10, x10, x11, lsl #2
     ea0:	br	x10
     ea4:	ldur	x8, [x29, #-8]
     ea8:	ldr	x8, [x8, #488]
     eac:	ldr	x19, [x8, #16]
     eb0:	b	f40 <ctf_type_align+0x114>
     eb4:	mov	w20, w0
     eb8:	mov	x0, x22
     ebc:	mov	x1, x19
     ec0:	bl	0 <ctf_dynamic_type>
     ec4:	cbz	x0, f68 <ctf_type_align+0x13c>
     ec8:	ldr	x21, [x0, #56]
     ecc:	cbz	x21, fe8 <ctf_type_align+0x1bc>
     ed0:	mov	x19, xzr
     ed4:	ldur	x0, [x29, #-8]
     ed8:	ldr	x1, [x21, #24]
     edc:	bl	e2c <ctf_type_align>
     ee0:	cmp	x19, x0
     ee4:	csel	x19, x19, x0, hi  // hi = pmore
     ee8:	cmp	w20, #0x6
     eec:	b.eq	f40 <ctf_type_align+0x114>  // b.none
     ef0:	ldr	x21, [x21, #8]
     ef4:	cbnz	x21, ed4 <ctf_type_align+0xa8>
     ef8:	b	f40 <ctf_type_align+0x114>
     efc:	ldur	x0, [x29, #-8]
     f00:	mov	x1, x21
     f04:	mov	x2, xzr
     f08:	mov	x3, xzr
     f0c:	bl	2c4 <ctf_get_ctt_size>
     f10:	b	f34 <ctf_type_align+0x108>
     f14:	ldur	x0, [x29, #-8]
     f18:	add	x2, sp, #0x10
     f1c:	mov	x1, x19
     f20:	bl	d4c <ctf_array_info>
     f24:	tbnz	w0, #31, f3c <ctf_type_align+0x110>
     f28:	ldur	x0, [x29, #-8]
     f2c:	ldr	x1, [sp, #16]
     f30:	bl	e2c <ctf_type_align>
     f34:	mov	x19, x0
     f38:	b	f40 <ctf_type_align+0x114>
     f3c:	mov	x19, #0xffffffffffffffff    	// #-1
     f40:	mov	x0, x19
     f44:	ldp	x20, x19, [sp, #80]
     f48:	ldp	x22, x21, [sp, #64]
     f4c:	ldp	x29, x30, [sp, #48]
     f50:	add	sp, sp, #0x60
     f54:	ret
     f58:	ldur	x8, [x29, #-8]
     f5c:	ldr	x8, [x8, #488]
     f60:	ldr	x19, [x8, #40]
     f64:	b	f40 <ctf_type_align+0x114>
     f68:	ldur	x8, [x29, #-8]
     f6c:	ldr	w0, [x21, #4]
     f70:	ldr	x8, [x8]
     f74:	ldr	x8, [x8, #16]
     f78:	blr	x8
     f7c:	ldur	x8, [x29, #-8]
     f80:	mov	w19, w0
     f84:	add	x2, sp, #0x10
     f88:	add	x3, sp, #0x8
     f8c:	mov	x0, x8
     f90:	mov	x1, x21
     f94:	bl	2c4 <ctf_get_ctt_size>
     f98:	ldp	x8, x9, [sp, #8]
     f9c:	cmp	w19, #0x0
     fa0:	cset	w10, ne  // ne = any
     fa4:	cmp	w20, #0x6
     fa8:	csel	w20, w10, w19, eq  // eq = none
     fac:	mov	w10, #0x1fffffff            	// #536870911
     fb0:	cmp	x9, x10
     fb4:	b.gt	ff0 <ctf_type_align+0x1c4>
     fb8:	mov	x19, xzr
     fbc:	cbz	w20, f40 <ctf_type_align+0x114>
     fc0:	add	x8, x8, x21
     fc4:	add	x21, x8, #0x8
     fc8:	ldur	x0, [x29, #-8]
     fcc:	ldr	w1, [x21], #12
     fd0:	bl	e2c <ctf_type_align>
     fd4:	cmp	x19, x0
     fd8:	csel	x19, x19, x0, hi  // hi = pmore
     fdc:	subs	w20, w20, #0x1
     fe0:	b.ne	fc8 <ctf_type_align+0x19c>  // b.any
     fe4:	b	f40 <ctf_type_align+0x114>
     fe8:	mov	x19, xzr
     fec:	b	f40 <ctf_type_align+0x114>
     ff0:	mov	x19, xzr
     ff4:	cbz	w20, f40 <ctf_type_align+0x114>
     ff8:	add	x8, x8, x21
     ffc:	add	x21, x8, #0x8
    1000:	ldur	x0, [x29, #-8]
    1004:	ldr	w1, [x21], #16
    1008:	bl	e2c <ctf_type_align>
    100c:	cmp	x19, x0
    1010:	csel	x19, x19, x0, hi  // hi = pmore
    1014:	subs	w20, w20, #0x1
    1018:	b.ne	1000 <ctf_type_align+0x1d4>  // b.any
    101c:	b	f40 <ctf_type_align+0x114>

0000000000001020 <ctf_type_kind_unsliced>:
    1020:	sub	sp, sp, #0x20
    1024:	str	x0, [sp, #8]
    1028:	add	x0, sp, #0x8
    102c:	stp	x29, x30, [sp, #16]
    1030:	add	x29, sp, #0x10
    1034:	bl	0 <ctf_lookup_by_id>
    1038:	cbz	x0, 1054 <ctf_type_kind_unsliced+0x34>
    103c:	ldr	x8, [sp, #8]
    1040:	ldr	w0, [x0, #4]
    1044:	ldr	x8, [x8]
    1048:	ldr	x8, [x8]
    104c:	blr	x8
    1050:	b	1058 <ctf_type_kind_unsliced+0x38>
    1054:	mov	w0, #0xffffffff            	// #-1
    1058:	ldp	x29, x30, [sp, #16]
    105c:	add	sp, sp, #0x20
    1060:	ret

0000000000001064 <ctf_type_kind>:
    1064:	stp	x29, x30, [sp, #-32]!
    1068:	stp	x20, x19, [sp, #16]
    106c:	mov	x29, sp
    1070:	mov	x20, x1
    1074:	mov	x19, x0
    1078:	bl	1020 <ctf_type_kind_unsliced>
    107c:	tbnz	w0, #31, 10ac <ctf_type_kind+0x48>
    1080:	cmp	w0, #0xe
    1084:	b.ne	10b0 <ctf_type_kind+0x4c>  // b.any
    1088:	mov	x0, x19
    108c:	mov	x1, x20
    1090:	bl	798 <ctf_type_reference>
    1094:	cmn	x0, #0x1
    1098:	b.eq	10b0 <ctf_type_kind+0x4c>  // b.none
    109c:	mov	x1, x0
    10a0:	mov	x0, x19
    10a4:	bl	1020 <ctf_type_kind_unsliced>
    10a8:	b	10b0 <ctf_type_kind+0x4c>
    10ac:	mov	w0, #0xffffffff            	// #-1
    10b0:	ldp	x20, x19, [sp, #16]
    10b4:	ldp	x29, x30, [sp], #32
    10b8:	ret

00000000000010bc <ctf_type_pointer>:
    10bc:	sub	sp, sp, #0x30
    10c0:	stp	x20, x19, [sp, #32]
    10c4:	mov	x19, x0
    10c8:	str	x0, [sp, #8]
    10cc:	add	x0, sp, #0x8
    10d0:	stp	x29, x30, [sp, #16]
    10d4:	add	x29, sp, #0x10
    10d8:	mov	x20, x1
    10dc:	bl	0 <ctf_lookup_by_id>
    10e0:	cbz	x0, 1114 <ctf_type_pointer+0x58>
    10e4:	ldr	x0, [sp, #8]
    10e8:	ldr	w9, [x0, #544]
    10ec:	ldr	x8, [x0, #448]
    10f0:	and	x10, x9, x20
    10f4:	ldr	w8, [x8, x10, lsl #2]
    10f8:	cbz	w8, 111c <ctf_type_pointer+0x60>
    10fc:	ldrb	w10, [x0, #552]
    1100:	add	w9, w9, #0x1
    1104:	sbfx	w10, w10, #0, #1
    1108:	and	w9, w10, w9
    110c:	orr	x0, x9, x8
    1110:	b	117c <ctf_type_pointer+0xc0>
    1114:	mov	x0, #0xffffffffffffffff    	// #-1
    1118:	b	117c <ctf_type_pointer+0xc0>
    111c:	mov	x1, x20
    1120:	bl	1f4 <ctf_type_resolve>
    1124:	cmn	x0, #0x1
    1128:	b.eq	1170 <ctf_type_pointer+0xb4>  // b.none
    112c:	mov	x20, x0
    1130:	add	x0, sp, #0x8
    1134:	mov	x1, x20
    1138:	bl	0 <ctf_lookup_by_id>
    113c:	cbz	x0, 1170 <ctf_type_pointer+0xb4>
    1140:	ldr	x8, [sp, #8]
    1144:	ldr	w10, [x8, #544]
    1148:	ldr	x9, [x8, #448]
    114c:	and	x11, x20, x10
    1150:	ldr	w9, [x9, x11, lsl #2]
    1154:	cbz	w9, 1170 <ctf_type_pointer+0xb4>
    1158:	ldrb	w8, [x8, #552]
    115c:	add	w10, w10, #0x1
    1160:	sbfx	w8, w8, #0, #1
    1164:	and	w8, w8, w10
    1168:	orr	x0, x8, x9
    116c:	b	117c <ctf_type_pointer+0xc0>
    1170:	mov	w1, #0x402                 	// #1026
    1174:	mov	x0, x19
    1178:	bl	0 <ctf_set_errno>
    117c:	ldp	x20, x19, [sp, #32]
    1180:	ldp	x29, x30, [sp, #16]
    1184:	add	sp, sp, #0x30
    1188:	ret

000000000000118c <ctf_type_encoding>:
    118c:	sub	sp, sp, #0x50
    1190:	stp	x29, x30, [sp, #32]
    1194:	add	x29, sp, #0x20
    1198:	stp	x20, x19, [sp, #64]
    119c:	mov	x20, x0
    11a0:	stur	x0, [x29, #-8]
    11a4:	sub	x0, x29, #0x8
    11a8:	stp	x22, x21, [sp, #48]
    11ac:	mov	x19, x2
    11b0:	mov	x22, x1
    11b4:	bl	0 <ctf_lookup_by_id>
    11b8:	cbz	x0, 120c <ctf_type_encoding+0x80>
    11bc:	mov	x21, x0
    11c0:	mov	x0, x20
    11c4:	mov	x1, x22
    11c8:	bl	0 <ctf_dynamic_type>
    11cc:	ldur	x8, [x29, #-8]
    11d0:	cbz	x0, 1214 <ctf_type_encoding+0x88>
    11d4:	ldr	x8, [x8]
    11d8:	mov	x22, x0
    11dc:	ldr	w0, [x21, #4]
    11e0:	ldr	x8, [x8]
    11e4:	blr	x8
    11e8:	sub	w8, w0, #0x1
    11ec:	cmp	w8, #0x2
    11f0:	b.cs	1274 <ctf_type_encoding+0xe8>  // b.hs, b.nlast
    11f4:	ldr	w8, [x22, #56]
    11f8:	ldr	x9, [x22, #48]
    11fc:	mov	w0, wzr
    1200:	str	w8, [x19, #8]
    1204:	str	x9, [x19]
    1208:	b	12ec <ctf_type_encoding+0x160>
    120c:	mov	w0, #0xffffffff            	// #-1
    1210:	b	12ec <ctf_type_encoding+0x160>
    1214:	add	x3, sp, #0x10
    1218:	mov	x0, x8
    121c:	mov	x1, x21
    1220:	mov	x2, xzr
    1224:	bl	2c4 <ctf_get_ctt_size>
    1228:	ldur	x8, [x29, #-8]
    122c:	ldr	w0, [x21, #4]
    1230:	ldr	x8, [x8]
    1234:	ldr	x8, [x8]
    1238:	blr	x8
    123c:	cmp	w0, #0xe
    1240:	b.eq	12b8 <ctf_type_encoding+0x12c>  // b.none
    1244:	cmp	w0, #0x2
    1248:	b.eq	1254 <ctf_type_encoding+0xc8>  // b.none
    124c:	cmp	w0, #0x1
    1250:	b.ne	12a8 <ctf_type_encoding+0x11c>  // b.any
    1254:	ldr	x8, [sp, #16]
    1258:	mov	w0, wzr
    125c:	ldr	w8, [x8, x21]
    1260:	lsr	w9, w8, #24
    1264:	ubfx	w10, w8, #16, #8
    1268:	and	w8, w8, #0xffff
    126c:	stp	w9, w10, [x19]
    1270:	b	12e8 <ctf_type_encoding+0x15c>
    1274:	cmp	w0, #0xe
    1278:	b.ne	12a8 <ctf_type_encoding+0x11c>  // b.any
    127c:	ldur	x0, [x29, #-8]
    1280:	ldr	w1, [x22, #48]
    1284:	mov	x2, sp
    1288:	bl	118c <ctf_type_encoding>
    128c:	ldr	w8, [sp]
    1290:	mov	w0, wzr
    1294:	str	w8, [x19]
    1298:	ldrh	w8, [x22, #52]
    129c:	str	w8, [x19, #4]
    12a0:	ldrh	w8, [x22, #54]
    12a4:	b	12e8 <ctf_type_encoding+0x15c>
    12a8:	mov	w1, #0x3fe                 	// #1022
    12ac:	mov	x0, x20
    12b0:	bl	0 <ctf_set_errno>
    12b4:	b	12ec <ctf_type_encoding+0x160>
    12b8:	ldr	x8, [sp, #16]
    12bc:	ldur	x0, [x29, #-8]
    12c0:	mov	x2, sp
    12c4:	add	x20, x8, x21
    12c8:	ldr	w1, [x20]
    12cc:	bl	118c <ctf_type_encoding>
    12d0:	ldr	w8, [sp]
    12d4:	mov	w0, wzr
    12d8:	str	w8, [x19]
    12dc:	ldrh	w8, [x20, #4]
    12e0:	str	w8, [x19, #4]
    12e4:	ldrh	w8, [x20, #6]
    12e8:	str	w8, [x19, #8]
    12ec:	ldp	x20, x19, [sp, #64]
    12f0:	ldp	x22, x21, [sp, #48]
    12f4:	ldp	x29, x30, [sp, #32]
    12f8:	add	sp, sp, #0x50
    12fc:	ret

0000000000001300 <ctf_type_cmp>:
    1300:	cmp	x1, x3
    1304:	mov	x8, x0
    1308:	cset	w9, hi  // hi = pmore
    130c:	csinv	w0, w9, wzr, cs  // cs = hs, nlast
    1310:	cmp	x8, x2
    1314:	b.eq	135c <ctf_type_cmp+0x5c>  // b.none
    1318:	ldr	w9, [x8, #544]
    131c:	cmp	x9, x1
    1320:	b.cc	1330 <ctf_type_cmp+0x30>  // b.lo, b.ul, b.last
    1324:	ldr	x9, [x8, #512]
    1328:	cmp	x9, #0x0
    132c:	csel	x8, x8, x9, eq  // eq = none
    1330:	ldr	w9, [x2, #544]
    1334:	cmp	x9, x3
    1338:	b.cc	1348 <ctf_type_cmp+0x48>  // b.lo, b.ul, b.last
    133c:	ldr	x9, [x2, #512]
    1340:	cmp	x9, #0x0
    1344:	csel	x2, x2, x9, eq  // eq = none
    1348:	cmp	x8, x2
    134c:	b.cs	1358 <ctf_type_cmp+0x58>  // b.hs, b.nlast
    1350:	mov	w0, #0xffffffff            	// #-1
    1354:	ret
    1358:	csinc	w0, w0, wzr, ls  // ls = plast
    135c:	ret

0000000000001360 <ctf_type_compat>:
    1360:	sub	sp, sp, #0x90
    1364:	stp	x29, x30, [sp, #64]
    1368:	add	x29, sp, #0x40
    136c:	str	x25, [sp, #80]
    1370:	stp	x24, x23, [sp, #96]
    1374:	stp	x22, x21, [sp, #112]
    1378:	stp	x20, x19, [sp, #128]
    137c:	mov	x19, x3
    1380:	mov	x20, x1
    1384:	mov	x21, x0
    1388:	str	x0, [x29, #24]
    138c:	stur	x2, [x29, #-8]
    1390:	bl	1300 <ctf_type_cmp>
    1394:	cbz	w0, 1464 <ctf_type_compat+0x104>
    1398:	mov	x0, x21
    139c:	mov	x1, x20
    13a0:	bl	1f4 <ctf_type_resolve>
    13a4:	ldr	x8, [x29, #24]
    13a8:	mov	x20, x0
    13ac:	mov	x1, x20
    13b0:	mov	x0, x8
    13b4:	bl	1064 <ctf_type_kind>
    13b8:	ldur	x8, [x29, #-8]
    13bc:	mov	w22, w0
    13c0:	mov	x1, x19
    13c4:	mov	x0, x8
    13c8:	bl	1f4 <ctf_type_resolve>
    13cc:	ldur	x8, [x29, #-8]
    13d0:	mov	x19, x0
    13d4:	mov	x1, x19
    13d8:	mov	x0, x8
    13dc:	bl	1064 <ctf_type_kind>
    13e0:	mov	w23, w0
    13e4:	add	x0, x29, #0x18
    13e8:	mov	x1, x20
    13ec:	bl	0 <ctf_lookup_by_id>
    13f0:	mov	x25, x0
    13f4:	sub	x0, x29, #0x8
    13f8:	mov	x1, x19
    13fc:	bl	0 <ctf_lookup_by_id>
    1400:	mov	w21, wzr
    1404:	cbz	x25, 1444 <ctf_type_compat+0xe4>
    1408:	mov	x24, x0
    140c:	cbz	x0, 1444 <ctf_type_compat+0xe4>
    1410:	ldr	x0, [x29, #24]
    1414:	ldr	w1, [x25]
    1418:	bl	0 <ctf_strptr>
    141c:	ldur	x8, [x29, #-8]
    1420:	ldr	w1, [x24]
    1424:	mov	x21, x0
    1428:	mov	x0, x8
    142c:	bl	0 <ctf_strptr>
    1430:	mov	x1, x0
    1434:	mov	x0, x21
    1438:	bl	0 <strcmp>
    143c:	cmp	w0, #0x0
    1440:	cset	w21, eq  // eq = none
    1444:	cmp	w22, #0x8
    1448:	b.ne	1454 <ctf_type_compat+0xf4>  // b.any
    144c:	cmp	w23, #0x1
    1450:	b.eq	1464 <ctf_type_compat+0x104>  // b.none
    1454:	subs	w8, w22, #0x1
    1458:	b.ne	1488 <ctf_type_compat+0x128>  // b.any
    145c:	cmp	w23, #0x8
    1460:	b.ne	1488 <ctf_type_compat+0x128>  // b.any
    1464:	mov	w21, #0x1                   	// #1
    1468:	mov	w0, w21
    146c:	ldp	x20, x19, [sp, #128]
    1470:	ldp	x22, x21, [sp, #112]
    1474:	ldp	x24, x23, [sp, #96]
    1478:	ldr	x25, [sp, #80]
    147c:	ldp	x29, x30, [sp, #64]
    1480:	add	sp, sp, #0x90
    1484:	ret
    1488:	cmp	w22, w23
    148c:	b.ne	1648 <ctf_type_compat+0x2e8>  // b.any
    1490:	cmp	w8, #0x8
    1494:	b.hi	1648 <ctf_type_compat+0x2e8>  // b.pmore
    1498:	adrp	x9, 0 <ctf_type_isparent>
    149c:	add	x9, x9, #0x0
    14a0:	adr	x10, 1468 <ctf_type_compat+0x108>
    14a4:	ldrb	w11, [x9, x8]
    14a8:	add	x10, x10, x11, lsl #2
    14ac:	br	x10
    14b0:	ldr	x0, [x29, #24]
    14b4:	add	x2, sp, #0x20
    14b8:	mov	x1, x20
    14bc:	str	wzr, [sp, #40]
    14c0:	str	xzr, [sp, #32]
    14c4:	str	xzr, [sp, #8]
    14c8:	str	wzr, [sp, #16]
    14cc:	bl	118c <ctf_type_encoding>
    14d0:	mov	w21, wzr
    14d4:	cbnz	w0, 1468 <ctf_type_compat+0x108>
    14d8:	ldur	x0, [x29, #-8]
    14dc:	add	x2, sp, #0x8
    14e0:	mov	x1, x19
    14e4:	bl	118c <ctf_type_encoding>
    14e8:	cbnz	w0, 1648 <ctf_type_compat+0x2e8>
    14ec:	ldr	x8, [sp, #32]
    14f0:	ldr	x9, [sp, #8]
    14f4:	ldr	w10, [sp, #40]
    14f8:	ldr	w11, [sp, #16]
    14fc:	eor	x8, x8, x9
    1500:	eor	w9, w10, w11
    1504:	orr	x8, x8, x9
    1508:	cmp	x8, #0x0
    150c:	cset	w21, eq  // eq = none
    1510:	b	1468 <ctf_type_compat+0x108>
    1514:	cbz	w21, 1468 <ctf_type_compat+0x108>
    1518:	ldr	x0, [x29, #24]
    151c:	mov	x1, x20
    1520:	bl	c40 <ctf_type_size>
    1524:	ldur	x8, [x29, #-8]
    1528:	mov	x20, x0
    152c:	mov	x1, x19
    1530:	mov	x0, x8
    1534:	bl	c40 <ctf_type_size>
    1538:	cmp	x20, x0
    153c:	cset	w21, eq  // eq = none
    1540:	b	1468 <ctf_type_compat+0x108>
    1544:	ldr	x21, [x29, #24]
    1548:	mov	x1, x20
    154c:	mov	x0, x21
    1550:	bl	798 <ctf_type_reference>
    1554:	ldur	x20, [x29, #-8]
    1558:	mov	x22, x0
    155c:	mov	x1, x19
    1560:	mov	x0, x20
    1564:	bl	798 <ctf_type_reference>
    1568:	mov	x3, x0
    156c:	mov	x0, x21
    1570:	mov	x1, x22
    1574:	mov	x2, x20
    1578:	bl	1360 <ctf_type_compat>
    157c:	mov	w21, w0
    1580:	b	1468 <ctf_type_compat+0x108>
    1584:	ldr	x0, [x29, #24]
    1588:	add	x2, sp, #0x20
    158c:	mov	x1, x20
    1590:	bl	d4c <ctf_array_info>
    1594:	cbnz	w0, 1648 <ctf_type_compat+0x2e8>
    1598:	ldur	x0, [x29, #-8]
    159c:	add	x2, sp, #0x8
    15a0:	mov	x1, x19
    15a4:	bl	d4c <ctf_array_info>
    15a8:	cbnz	w0, 1648 <ctf_type_compat+0x2e8>
    15ac:	ldr	w8, [sp, #48]
    15b0:	ldr	w9, [sp, #24]
    15b4:	cmp	w8, w9
    15b8:	b.ne	1648 <ctf_type_compat+0x2e8>  // b.any
    15bc:	ldr	x0, [x29, #24]
    15c0:	ldr	x1, [sp, #32]
    15c4:	ldur	x2, [x29, #-8]
    15c8:	ldr	x3, [sp, #8]
    15cc:	bl	1360 <ctf_type_compat>
    15d0:	cbz	w0, 1648 <ctf_type_compat+0x2e8>
    15d4:	ldr	x0, [x29, #24]
    15d8:	ldr	x1, [sp, #40]
    15dc:	ldur	x2, [x29, #-8]
    15e0:	ldr	x3, [sp, #16]
    15e4:	bl	1360 <ctf_type_compat>
    15e8:	cmp	w0, #0x0
    15ec:	cset	w21, ne  // ne = any
    15f0:	b	1468 <ctf_type_compat+0x108>
    15f4:	ldr	x0, [x29, #24]
    15f8:	add	x2, sp, #0x20
    15fc:	mov	x1, x20
    1600:	bl	118c <ctf_type_encoding>
    1604:	ldur	x8, [x29, #-8]
    1608:	mov	w20, w0
    160c:	add	x2, sp, #0x8
    1610:	mov	x1, x19
    1614:	mov	x0, x8
    1618:	bl	118c <ctf_type_encoding>
    161c:	cmp	w20, w0
    1620:	b.ne	1648 <ctf_type_compat+0x2e8>  // b.any
    1624:	cbnz	w20, 1468 <ctf_type_compat+0x108>
    1628:	ldr	x8, [sp, #32]
    162c:	ldr	x9, [sp, #8]
    1630:	ldr	w10, [sp, #40]
    1634:	ldr	w11, [sp, #16]
    1638:	eor	x8, x8, x9
    163c:	eor	w9, w10, w11
    1640:	orr	x8, x8, x9
    1644:	cbz	x8, 1468 <ctf_type_compat+0x108>
    1648:	mov	w21, wzr
    164c:	b	1468 <ctf_type_compat+0x108>

0000000000001650 <ctf_member_info>:
    1650:	sub	sp, sp, #0x60
    1654:	stp	x29, x30, [sp, #32]
    1658:	add	x29, sp, #0x20
    165c:	stp	x24, x23, [sp, #48]
    1660:	stp	x22, x21, [sp, #64]
    1664:	stp	x20, x19, [sp, #80]
    1668:	mov	x19, x3
    166c:	mov	x21, x2
    1670:	mov	x20, x0
    1674:	stur	x0, [x29, #-8]
    1678:	bl	1f4 <ctf_type_resolve>
    167c:	cmn	x0, #0x1
    1680:	b.eq	17bc <ctf_member_info+0x16c>  // b.none
    1684:	mov	x23, x0
    1688:	sub	x0, x29, #0x8
    168c:	mov	x1, x23
    1690:	bl	0 <ctf_lookup_by_id>
    1694:	cbz	x0, 1704 <ctf_member_info+0xb4>
    1698:	mov	x22, x0
    169c:	ldur	x0, [x29, #-8]
    16a0:	add	x2, sp, #0x10
    16a4:	add	x3, sp, #0x8
    16a8:	mov	x1, x22
    16ac:	bl	2c4 <ctf_get_ctt_size>
    16b0:	ldur	x8, [x29, #-8]
    16b4:	ldr	w0, [x22, #4]
    16b8:	ldr	x8, [x8]
    16bc:	ldr	x8, [x8]
    16c0:	blr	x8
    16c4:	orr	w8, w0, #0x1
    16c8:	cmp	w8, #0x7
    16cc:	b.ne	170c <ctf_member_info+0xbc>  // b.any
    16d0:	ldur	x0, [x29, #-8]
    16d4:	mov	x1, x23
    16d8:	bl	0 <ctf_dynamic_type>
    16dc:	cbz	x0, 1714 <ctf_member_info+0xc4>
    16e0:	ldr	x22, [x0, #56]
    16e4:	cbz	x22, 17b0 <ctf_member_info+0x160>
    16e8:	ldr	x0, [x22, #16]
    16ec:	mov	x1, x21
    16f0:	bl	0 <strcmp>
    16f4:	cbz	w0, 1770 <ctf_member_info+0x120>
    16f8:	ldr	x22, [x22, #8]
    16fc:	cbnz	x22, 16e8 <ctf_member_info+0x98>
    1700:	b	17b0 <ctf_member_info+0x160>
    1704:	mov	w0, #0xffffffff            	// #-1
    1708:	b	17bc <ctf_member_info+0x16c>
    170c:	mov	w1, #0x3fb                 	// #1019
    1710:	b	17b4 <ctf_member_info+0x164>
    1714:	ldur	x8, [x29, #-8]
    1718:	ldp	x9, x24, [sp, #8]
    171c:	ldr	w0, [x22, #4]
    1720:	ldr	x8, [x8]
    1724:	add	x23, x9, x22
    1728:	ldr	x8, [x8, #16]
    172c:	blr	x8
    1730:	mov	w8, #0x1fffffff            	// #536870911
    1734:	cmp	x24, x8
    1738:	mov	w22, w0
    173c:	b.gt	1784 <ctf_member_info+0x134>
    1740:	cbz	w22, 17b0 <ctf_member_info+0x160>
    1744:	add	x23, x23, #0x4
    1748:	ldur	x0, [x29, #-8]
    174c:	ldur	w1, [x23, #-4]
    1750:	bl	0 <ctf_strptr>
    1754:	mov	x1, x21
    1758:	bl	0 <strcmp>
    175c:	cbz	w0, 17d4 <ctf_member_info+0x184>
    1760:	subs	w22, w22, #0x1
    1764:	add	x23, x23, #0xc
    1768:	b.ne	1748 <ctf_member_info+0xf8>  // b.any
    176c:	b	17b0 <ctf_member_info+0x160>
    1770:	ldr	x8, [x22, #24]
    1774:	str	x8, [x19]
    1778:	ldr	x8, [x22, #32]
    177c:	str	x8, [x19, #8]
    1780:	b	17bc <ctf_member_info+0x16c>
    1784:	cbz	w22, 17b0 <ctf_member_info+0x160>
    1788:	add	x23, x23, #0x8
    178c:	ldur	x0, [x29, #-8]
    1790:	ldur	w1, [x23, #-8]
    1794:	bl	0 <ctf_strptr>
    1798:	mov	x1, x21
    179c:	bl	0 <strcmp>
    17a0:	cbz	w0, 17e8 <ctf_member_info+0x198>
    17a4:	subs	w22, w22, #0x1
    17a8:	add	x23, x23, #0x10
    17ac:	b.ne	178c <ctf_member_info+0x13c>  // b.any
    17b0:	mov	w1, #0x40c                 	// #1036
    17b4:	mov	x0, x20
    17b8:	bl	0 <ctf_set_errno>
    17bc:	ldp	x20, x19, [sp, #80]
    17c0:	ldp	x22, x21, [sp, #64]
    17c4:	ldp	x24, x23, [sp, #48]
    17c8:	ldp	x29, x30, [sp, #32]
    17cc:	add	sp, sp, #0x60
    17d0:	ret
    17d4:	ldr	w8, [x23, #4]
    17d8:	str	x8, [x19]
    17dc:	ldr	w8, [x23]
    17e0:	str	x8, [x19, #8]
    17e4:	b	17bc <ctf_member_info+0x16c>
    17e8:	ldr	w8, [x23]
    17ec:	str	x8, [x19]
    17f0:	ldur	w8, [x23, #-4]
    17f4:	ldr	w9, [x23, #4]
    17f8:	bfi	x9, x8, #32, #32
    17fc:	str	x9, [x19, #8]
    1800:	b	17bc <ctf_member_info+0x16c>

0000000000001804 <ctf_enum_name>:
    1804:	sub	sp, sp, #0x40
    1808:	stp	x29, x30, [sp, #16]
    180c:	stp	x22, x21, [sp, #32]
    1810:	stp	x20, x19, [sp, #48]
    1814:	add	x29, sp, #0x10
    1818:	mov	w20, w2
    181c:	mov	x19, x0
    1820:	str	x0, [sp, #8]
    1824:	bl	448 <ctf_type_resolve_unsliced>
    1828:	cmn	x0, #0x1
    182c:	b.eq	190c <ctf_enum_name+0x108>  // b.none
    1830:	mov	x22, x0
    1834:	add	x0, sp, #0x8
    1838:	mov	x1, x22
    183c:	bl	0 <ctf_lookup_by_id>
    1840:	cbz	x0, 1910 <ctf_enum_name+0x10c>
    1844:	ldr	x8, [sp, #8]
    1848:	mov	x21, x0
    184c:	ldr	w0, [x0, #4]
    1850:	ldr	x8, [x8]
    1854:	ldr	x8, [x8]
    1858:	blr	x8
    185c:	cmp	w0, #0x8
    1860:	b.ne	18b0 <ctf_enum_name+0xac>  // b.any
    1864:	ldr	x0, [sp, #8]
    1868:	mov	x3, sp
    186c:	mov	x1, x21
    1870:	mov	x2, xzr
    1874:	bl	2c4 <ctf_get_ctt_size>
    1878:	mov	x0, x19
    187c:	mov	x1, x22
    1880:	bl	0 <ctf_dynamic_type>
    1884:	cbz	x0, 18b8 <ctf_enum_name+0xb4>
    1888:	ldr	x8, [x0, #56]
    188c:	cbz	x8, 18a4 <ctf_enum_name+0xa0>
    1890:	ldr	w9, [x8, #40]
    1894:	cmp	w9, w20
    1898:	b.eq	18f4 <ctf_enum_name+0xf0>  // b.none
    189c:	ldr	x8, [x8, #8]
    18a0:	cbnz	x8, 1890 <ctf_enum_name+0x8c>
    18a4:	mov	w8, #0x1                   	// #1
    18a8:	cbnz	w8, 1900 <ctf_enum_name+0xfc>
    18ac:	b	1910 <ctf_enum_name+0x10c>
    18b0:	mov	w1, #0x3fc                 	// #1020
    18b4:	b	1904 <ctf_enum_name+0x100>
    18b8:	ldp	x22, x8, [sp]
    18bc:	ldr	w0, [x21, #4]
    18c0:	ldr	x8, [x8]
    18c4:	ldr	x8, [x8, #16]
    18c8:	blr	x8
    18cc:	cbz	w0, 1900 <ctf_enum_name+0xfc>
    18d0:	add	x8, x22, x21
    18d4:	add	x8, x8, #0x4
    18d8:	ldr	w9, [x8]
    18dc:	cmp	w9, w20
    18e0:	b.eq	1924 <ctf_enum_name+0x120>  // b.none
    18e4:	subs	w0, w0, #0x1
    18e8:	add	x8, x8, #0x8
    18ec:	b.ne	18d8 <ctf_enum_name+0xd4>  // b.any
    18f0:	b	1900 <ctf_enum_name+0xfc>
    18f4:	ldr	x0, [x8, #16]
    18f8:	mov	w8, wzr
    18fc:	cbz	w8, 1910 <ctf_enum_name+0x10c>
    1900:	mov	w1, #0x40b                 	// #1035
    1904:	mov	x0, x19
    1908:	bl	0 <ctf_set_errno>
    190c:	mov	x0, xzr
    1910:	ldp	x20, x19, [sp, #48]
    1914:	ldp	x22, x21, [sp, #32]
    1918:	ldp	x29, x30, [sp, #16]
    191c:	add	sp, sp, #0x40
    1920:	ret
    1924:	ldr	x0, [sp, #8]
    1928:	ldur	w1, [x8, #-4]
    192c:	bl	0 <ctf_strptr>
    1930:	b	1910 <ctf_enum_name+0x10c>

0000000000001934 <ctf_enum_value>:
    1934:	sub	sp, sp, #0x50
    1938:	stp	x29, x30, [sp, #16]
    193c:	stp	x24, x23, [sp, #32]
    1940:	stp	x22, x21, [sp, #48]
    1944:	stp	x20, x19, [sp, #64]
    1948:	add	x29, sp, #0x10
    194c:	mov	x19, x3
    1950:	mov	x21, x2
    1954:	mov	x20, x0
    1958:	str	x0, [sp, #8]
    195c:	bl	448 <ctf_type_resolve_unsliced>
    1960:	cmn	x0, #0x1
    1964:	b.eq	1a48 <ctf_enum_value+0x114>  // b.none
    1968:	mov	x23, x0
    196c:	add	x0, sp, #0x8
    1970:	mov	x1, x23
    1974:	bl	0 <ctf_lookup_by_id>
    1978:	cbz	x0, 1a44 <ctf_enum_value+0x110>
    197c:	ldr	x8, [sp, #8]
    1980:	mov	x22, x0
    1984:	ldr	w0, [x0, #4]
    1988:	ldr	x8, [x8]
    198c:	ldr	x8, [x8]
    1990:	blr	x8
    1994:	cmp	w0, #0x8
    1998:	b.ne	19e8 <ctf_enum_value+0xb4>  // b.any
    199c:	ldr	x0, [sp, #8]
    19a0:	mov	x3, sp
    19a4:	mov	x1, x22
    19a8:	mov	x2, xzr
    19ac:	bl	2c4 <ctf_get_ctt_size>
    19b0:	ldr	x24, [sp]
    19b4:	mov	x0, x20
    19b8:	mov	x1, x23
    19bc:	bl	0 <ctf_dynamic_type>
    19c0:	cbz	x0, 19f0 <ctf_enum_value+0xbc>
    19c4:	ldr	x22, [x0, #56]
    19c8:	cbz	x22, 1a38 <ctf_enum_value+0x104>
    19cc:	ldr	x0, [x22, #16]
    19d0:	mov	x1, x21
    19d4:	bl	0 <strcmp>
    19d8:	cbz	w0, 1a60 <ctf_enum_value+0x12c>
    19dc:	ldr	x22, [x22, #8]
    19e0:	cbnz	x22, 19cc <ctf_enum_value+0x98>
    19e4:	b	1a38 <ctf_enum_value+0x104>
    19e8:	mov	w1, #0x3fc                 	// #1020
    19ec:	b	1a3c <ctf_enum_value+0x108>
    19f0:	ldr	x8, [sp, #8]
    19f4:	ldr	w0, [x22, #4]
    19f8:	ldr	x8, [x8]
    19fc:	ldr	x8, [x8, #16]
    1a00:	blr	x8
    1a04:	cbz	w0, 1a38 <ctf_enum_value+0x104>
    1a08:	add	x8, x24, x22
    1a0c:	mov	w23, w0
    1a10:	add	x22, x8, #0x4
    1a14:	ldr	x0, [sp, #8]
    1a18:	ldur	w1, [x22, #-4]
    1a1c:	bl	0 <ctf_strptr>
    1a20:	mov	x1, x21
    1a24:	bl	0 <strcmp>
    1a28:	cbz	w0, 1a74 <ctf_enum_value+0x140>
    1a2c:	subs	w23, w23, #0x1
    1a30:	add	x22, x22, #0x8
    1a34:	b.ne	1a14 <ctf_enum_value+0xe0>  // b.any
    1a38:	mov	w1, #0x40b                 	// #1035
    1a3c:	mov	x0, x20
    1a40:	bl	0 <ctf_set_errno>
    1a44:	mov	w0, #0xffffffff            	// #-1
    1a48:	ldp	x20, x19, [sp, #64]
    1a4c:	ldp	x22, x21, [sp, #48]
    1a50:	ldp	x24, x23, [sp, #32]
    1a54:	ldp	x29, x30, [sp, #16]
    1a58:	add	sp, sp, #0x50
    1a5c:	ret
    1a60:	mov	w0, wzr
    1a64:	cbz	x19, 1a48 <ctf_enum_value+0x114>
    1a68:	ldr	w8, [x22, #40]
    1a6c:	str	w8, [x19]
    1a70:	b	1a48 <ctf_enum_value+0x114>
    1a74:	mov	w0, wzr
    1a78:	cbz	x19, 1a48 <ctf_enum_value+0x114>
    1a7c:	ldr	w8, [x22]
    1a80:	str	w8, [x19]
    1a84:	b	1a48 <ctf_enum_value+0x114>

0000000000001a88 <ctf_func_type_info>:
    1a88:	sub	sp, sp, #0x40
    1a8c:	stp	x29, x30, [sp, #16]
    1a90:	add	x29, sp, #0x10
    1a94:	str	x21, [sp, #32]
    1a98:	stp	x20, x19, [sp, #48]
    1a9c:	mov	x19, x2
    1aa0:	str	x0, [x29, #24]
    1aa4:	bl	1f4 <ctf_type_resolve>
    1aa8:	cmn	x0, #0x1
    1aac:	b.eq	1b88 <ctf_func_type_info+0x100>  // b.none
    1ab0:	mov	x20, x0
    1ab4:	add	x0, x29, #0x18
    1ab8:	mov	x1, x20
    1abc:	bl	0 <ctf_lookup_by_id>
    1ac0:	cbz	x0, 1b3c <ctf_func_type_info+0xb4>
    1ac4:	mov	x21, x0
    1ac8:	ldr	x0, [x29, #24]
    1acc:	add	x2, sp, #0x8
    1ad0:	mov	x3, sp
    1ad4:	mov	x1, x21
    1ad8:	bl	2c4 <ctf_get_ctt_size>
    1adc:	ldr	x8, [x29, #24]
    1ae0:	ldr	w0, [x21, #4]
    1ae4:	ldr	x8, [x8]
    1ae8:	ldr	x8, [x8]
    1aec:	blr	x8
    1af0:	cmp	w0, #0x5
    1af4:	b.ne	1b44 <ctf_func_type_info+0xbc>  // b.any
    1af8:	ldr	w8, [x21, #8]
    1afc:	str	wzr, [x19, #12]
    1b00:	str	x8, [x19]
    1b04:	ldr	x8, [x29, #24]
    1b08:	ldr	w0, [x21, #4]
    1b0c:	ldr	x8, [x8]
    1b10:	ldr	x8, [x8, #16]
    1b14:	blr	x8
    1b18:	str	w0, [x19, #8]
    1b1c:	ldr	x0, [x29, #24]
    1b20:	mov	x1, x20
    1b24:	bl	0 <ctf_dynamic_type>
    1b28:	cbz	x0, 1b54 <ctf_func_type_info+0xcc>
    1b2c:	ldr	x8, [x0, #48]
    1b30:	ldr	w9, [x19, #8]
    1b34:	cbnz	w9, 1b64 <ctf_func_type_info+0xdc>
    1b38:	b	1b70 <ctf_func_type_info+0xe8>
    1b3c:	mov	w0, #0xffffffff            	// #-1
    1b40:	b	1b88 <ctf_func_type_info+0x100>
    1b44:	ldr	x0, [x29, #24]
    1b48:	mov	w1, #0x404                 	// #1028
    1b4c:	bl	0 <ctf_set_errno>
    1b50:	b	1b88 <ctf_func_type_info+0x100>
    1b54:	ldr	x8, [sp]
    1b58:	add	x8, x8, x21
    1b5c:	ldr	w9, [x19, #8]
    1b60:	cbz	w9, 1b70 <ctf_func_type_info+0xe8>
    1b64:	sub	w9, w9, #0x1
    1b68:	ldr	w8, [x8, w9, uxtw #2]
    1b6c:	cbz	w8, 1b78 <ctf_func_type_info+0xf0>
    1b70:	mov	w0, wzr
    1b74:	b	1b88 <ctf_func_type_info+0x100>
    1b78:	ldr	w8, [x19, #12]
    1b7c:	mov	w0, wzr
    1b80:	orr	w8, w8, #0x1
    1b84:	stp	w9, w8, [x19, #8]
    1b88:	ldp	x20, x19, [sp, #48]
    1b8c:	ldr	x21, [sp, #32]
    1b90:	ldp	x29, x30, [sp, #16]
    1b94:	add	sp, sp, #0x40
    1b98:	ret

0000000000001b9c <ctf_func_type_args>:
    1b9c:	sub	sp, sp, #0x60
    1ba0:	stp	x29, x30, [sp, #48]
    1ba4:	stp	x20, x19, [sp, #80]
    1ba8:	add	x29, sp, #0x30
    1bac:	mov	w20, w2
    1bb0:	add	x2, sp, #0x8
    1bb4:	stp	x22, x21, [sp, #64]
    1bb8:	mov	x19, x3
    1bbc:	mov	x21, x1
    1bc0:	stur	x0, [x29, #-8]
    1bc4:	bl	1a88 <ctf_func_type_info>
    1bc8:	tbnz	w0, #31, 1c24 <ctf_func_type_args+0x88>
    1bcc:	ldur	x0, [x29, #-8]
    1bd0:	mov	x1, x21
    1bd4:	bl	1f4 <ctf_type_resolve>
    1bd8:	cmn	x0, #0x1
    1bdc:	b.eq	1c58 <ctf_func_type_args+0xbc>  // b.none
    1be0:	mov	x21, x0
    1be4:	sub	x0, x29, #0x8
    1be8:	mov	x1, x21
    1bec:	bl	0 <ctf_lookup_by_id>
    1bf0:	cbz	x0, 1c24 <ctf_func_type_args+0x88>
    1bf4:	mov	x22, x0
    1bf8:	ldur	x0, [x29, #-8]
    1bfc:	sub	x2, x29, #0x10
    1c00:	add	x3, sp, #0x18
    1c04:	mov	x1, x22
    1c08:	bl	2c4 <ctf_get_ctt_size>
    1c0c:	ldur	x0, [x29, #-8]
    1c10:	mov	x1, x21
    1c14:	bl	0 <ctf_dynamic_type>
    1c18:	cbz	x0, 1c2c <ctf_func_type_args+0x90>
    1c1c:	ldr	x8, [x0, #48]
    1c20:	b	1c34 <ctf_func_type_args+0x98>
    1c24:	mov	w0, #0xffffffff            	// #-1
    1c28:	b	1c58 <ctf_func_type_args+0xbc>
    1c2c:	ldr	x8, [sp, #24]
    1c30:	add	x8, x8, x22
    1c34:	ldr	w9, [sp, #16]
    1c38:	cmp	w9, w20
    1c3c:	csel	w9, w20, w9, hi  // hi = pmore
    1c40:	cbz	w9, 1c54 <ctf_func_type_args+0xb8>
    1c44:	ldr	w10, [x8], #4
    1c48:	subs	w9, w9, #0x1
    1c4c:	str	x10, [x19], #8
    1c50:	b.ne	1c44 <ctf_func_type_args+0xa8>  // b.any
    1c54:	mov	w0, wzr
    1c58:	ldp	x20, x19, [sp, #80]
    1c5c:	ldp	x22, x21, [sp, #64]
    1c60:	ldp	x29, x30, [sp, #48]
    1c64:	add	sp, sp, #0x60
    1c68:	ret

0000000000001c6c <ctf_type_visit>:
    1c6c:	stp	x29, x30, [sp, #-16]!
    1c70:	adrp	x4, 0 <ctf_type_isparent>
    1c74:	add	x4, x4, #0x0
    1c78:	mov	x5, xzr
    1c7c:	mov	w6, wzr
    1c80:	mov	x29, sp
    1c84:	bl	1c90 <ctf_type_rvisit>
    1c88:	ldp	x29, x30, [sp], #16
    1c8c:	ret

0000000000001c90 <ctf_type_rvisit>:
    1c90:	sub	sp, sp, #0x70
    1c94:	stp	x29, x30, [sp, #32]
    1c98:	add	x29, sp, #0x20
    1c9c:	stp	x26, x25, [sp, #48]
    1ca0:	stp	x24, x23, [sp, #64]
    1ca4:	stp	x22, x21, [sp, #80]
    1ca8:	stp	x20, x19, [sp, #96]
    1cac:	mov	w22, w6
    1cb0:	mov	x21, x5
    1cb4:	mov	x25, x4
    1cb8:	mov	x19, x3
    1cbc:	mov	x20, x2
    1cc0:	mov	x26, x1
    1cc4:	stur	x0, [x29, #-8]
    1cc8:	bl	1f4 <ctf_type_resolve>
    1ccc:	cmn	x0, #0x1
    1cd0:	b.eq	1e28 <ctf_type_rvisit+0x198>  // b.none
    1cd4:	mov	x24, x0
    1cd8:	sub	x0, x29, #0x8
    1cdc:	mov	x1, x24
    1ce0:	bl	0 <ctf_lookup_by_id>
    1ce4:	cbz	x0, 1d88 <ctf_type_rvisit+0xf8>
    1ce8:	mov	x23, x0
    1cec:	mov	x0, x25
    1cf0:	mov	x1, x26
    1cf4:	mov	x2, x21
    1cf8:	mov	w3, w22
    1cfc:	mov	x4, x19
    1d00:	blr	x20
    1d04:	cbnz	w0, 1e28 <ctf_type_rvisit+0x198>
    1d08:	ldur	x8, [x29, #-8]
    1d0c:	ldr	w0, [x23, #4]
    1d10:	ldr	x8, [x8]
    1d14:	ldr	x8, [x8]
    1d18:	blr	x8
    1d1c:	orr	w8, w0, #0x1
    1d20:	cmp	w8, #0x7
    1d24:	b.ne	1e24 <ctf_type_rvisit+0x194>  // b.any
    1d28:	ldur	x0, [x29, #-8]
    1d2c:	add	x2, sp, #0x10
    1d30:	add	x3, sp, #0x8
    1d34:	mov	x1, x23
    1d38:	bl	2c4 <ctf_get_ctt_size>
    1d3c:	ldur	x0, [x29, #-8]
    1d40:	mov	x1, x24
    1d44:	bl	0 <ctf_dynamic_type>
    1d48:	cbz	x0, 1d90 <ctf_type_rvisit+0x100>
    1d4c:	ldr	x23, [x0, #56]
    1d50:	cbz	x23, 1e14 <ctf_type_rvisit+0x184>
    1d54:	add	w21, w22, #0x1
    1d58:	ldur	x0, [x29, #-8]
    1d5c:	ldp	x4, x1, [x23, #16]
    1d60:	ldr	x5, [x23, #32]
    1d64:	mov	x2, x20
    1d68:	mov	x3, x19
    1d6c:	mov	w6, w21
    1d70:	bl	1c90 <ctf_type_rvisit>
    1d74:	cbnz	w0, 1e1c <ctf_type_rvisit+0x18c>
    1d78:	ldr	x23, [x23, #8]
    1d7c:	cbnz	x23, 1d58 <ctf_type_rvisit+0xc8>
    1d80:	mov	w8, #0x1                   	// #1
    1d84:	b	1e20 <ctf_type_rvisit+0x190>
    1d88:	mov	w0, #0xffffffff            	// #-1
    1d8c:	b	1e28 <ctf_type_rvisit+0x198>
    1d90:	ldur	x8, [x29, #-8]
    1d94:	ldp	x9, x25, [sp, #8]
    1d98:	ldr	w0, [x23, #4]
    1d9c:	ldr	x8, [x8]
    1da0:	add	x24, x9, x23
    1da4:	ldr	x8, [x8, #16]
    1da8:	blr	x8
    1dac:	mov	w8, #0x1fffffff            	// #536870911
    1db0:	cmp	x25, x8
    1db4:	mov	w23, w0
    1db8:	b.gt	1e44 <ctf_type_rvisit+0x1b4>
    1dbc:	cbz	w23, 1eac <ctf_type_rvisit+0x21c>
    1dc0:	add	w22, w22, #0x1
    1dc4:	add	x26, x24, #0x8
    1dc8:	ldur	x24, [x29, #-8]
    1dcc:	ldur	w1, [x26, #-8]
    1dd0:	ldr	w25, [x26]
    1dd4:	mov	x0, x24
    1dd8:	bl	0 <ctf_strptr>
    1ddc:	ldur	w8, [x26, #-4]
    1de0:	mov	x4, x0
    1de4:	mov	x0, x24
    1de8:	mov	x1, x25
    1dec:	add	x5, x8, x21
    1df0:	mov	x2, x20
    1df4:	mov	x3, x19
    1df8:	mov	w6, w22
    1dfc:	bl	1c90 <ctf_type_rvisit>
    1e00:	cbnz	w0, 1eb8 <ctf_type_rvisit+0x228>
    1e04:	subs	w23, w23, #0x1
    1e08:	add	x26, x26, #0xc
    1e0c:	b.ne	1dc8 <ctf_type_rvisit+0x138>  // b.any
    1e10:	b	1ea0 <ctf_type_rvisit+0x210>
    1e14:	mov	w8, #0x1                   	// #1
    1e18:	b	1e20 <ctf_type_rvisit+0x190>
    1e1c:	mov	w8, wzr
    1e20:	cbz	w8, 1e28 <ctf_type_rvisit+0x198>
    1e24:	mov	w0, wzr
    1e28:	ldp	x20, x19, [sp, #96]
    1e2c:	ldp	x22, x21, [sp, #80]
    1e30:	ldp	x24, x23, [sp, #64]
    1e34:	ldp	x26, x25, [sp, #48]
    1e38:	ldp	x29, x30, [sp, #32]
    1e3c:	add	sp, sp, #0x70
    1e40:	ret
    1e44:	cbz	w23, 1eac <ctf_type_rvisit+0x21c>
    1e48:	add	w22, w22, #0x1
    1e4c:	add	x26, x24, #0x8
    1e50:	ldur	x24, [x29, #-8]
    1e54:	ldur	w1, [x26, #-8]
    1e58:	ldr	w25, [x26]
    1e5c:	mov	x0, x24
    1e60:	bl	0 <ctf_strptr>
    1e64:	ldur	w8, [x26, #-4]
    1e68:	ldr	w9, [x26, #4]
    1e6c:	mov	x4, x0
    1e70:	mov	x0, x24
    1e74:	mov	x1, x25
    1e78:	bfi	x9, x8, #32, #32
    1e7c:	add	x5, x9, x21
    1e80:	mov	x2, x20
    1e84:	mov	x3, x19
    1e88:	mov	w6, w22
    1e8c:	bl	1c90 <ctf_type_rvisit>
    1e90:	cbnz	w0, 1eb8 <ctf_type_rvisit+0x228>
    1e94:	subs	w23, w23, #0x1
    1e98:	add	x26, x26, #0x10
    1e9c:	b.ne	1e50 <ctf_type_rvisit+0x1c0>  // b.any
    1ea0:	mov	w8, #0x1                   	// #1
    1ea4:	tbnz	w8, #0, 1e24 <ctf_type_rvisit+0x194>
    1ea8:	b	1e28 <ctf_type_rvisit+0x198>
    1eac:	mov	w8, #0x1                   	// #1
    1eb0:	tbnz	w8, #0, 1e24 <ctf_type_rvisit+0x194>
    1eb4:	b	1e28 <ctf_type_rvisit+0x198>
    1eb8:	mov	w8, wzr
    1ebc:	tbnz	wzr, #0, 1e24 <ctf_type_rvisit+0x194>
    1ec0:	b	1e28 <ctf_type_rvisit+0x198>

ctf-util.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_list_append>:
   0:	ldr	x8, [x0]
   4:	str	x1, [x0]
   8:	cmp	x8, #0x0
   c:	stp	x8, xzr, [x1]
  10:	csel	x8, x0, x8, eq  // eq = none
  14:	str	x1, [x8, #8]
  18:	ret

000000000000001c <ctf_list_prepend>:
  1c:	ldr	x8, [x0, #8]
  20:	str	x1, [x0, #8]
  24:	cmp	x8, #0x0
  28:	stp	xzr, x8, [x1]
  2c:	csel	x8, x0, x8, eq  // eq = none
  30:	str	x1, [x8]
  34:	ret

0000000000000038 <ctf_list_delete>:
  38:	ldp	x8, x9, [x1]
  3c:	cmp	x8, #0x0
  40:	csel	x8, x0, x8, eq  // eq = none
  44:	str	x9, [x8, #8]
  48:	ldp	x9, x8, [x1]
  4c:	cmp	x8, #0x0
  50:	csel	x8, x0, x8, eq  // eq = none
  54:	str	x9, [x8]
  58:	ret

000000000000005c <ctf_list_empty_p>:
  5c:	ldr	x8, [x0, #8]
  60:	cbz	x8, 6c <ctf_list_empty_p+0x10>
  64:	mov	w0, wzr
  68:	ret
  6c:	ldr	x8, [x0]
  70:	cmp	x8, #0x0
  74:	cset	w0, eq  // eq = none
  78:	ret

000000000000007c <ctf_sym_to_elf64>:
  7c:	ldr	w8, [x0]
  80:	str	w8, [x1]
  84:	ldr	w8, [x0, #4]
  88:	str	x8, [x1, #8]
  8c:	ldr	w8, [x0, #8]
  90:	str	x8, [x1, #16]
  94:	ldrb	w8, [x0, #12]
  98:	strb	w8, [x1, #4]
  9c:	ldrb	w8, [x0, #13]
  a0:	strb	w8, [x1, #5]
  a4:	ldrh	w8, [x0, #14]
  a8:	mov	x0, x1
  ac:	strh	w8, [x1, #6]
  b0:	ret

00000000000000b4 <ctf_str_append>:
  b4:	stp	x29, x30, [sp, #-64]!
  b8:	stp	x20, x19, [sp, #48]
  bc:	mov	x19, x0
  c0:	str	x23, [sp, #16]
  c4:	stp	x22, x21, [sp, #32]
  c8:	mov	x29, sp
  cc:	cbz	x1, 124 <ctf_str_append+0x70>
  d0:	mov	x20, x1
  d4:	cbz	x19, e8 <ctf_str_append+0x34>
  d8:	mov	x0, x19
  dc:	bl	0 <strlen>
  e0:	mov	x21, x0
  e4:	b	ec <ctf_str_append+0x38>
  e8:	mov	x21, xzr
  ec:	mov	x0, x20
  f0:	bl	0 <strlen>
  f4:	add	x23, x0, x21
  f8:	mov	x22, x0
  fc:	add	x1, x23, #0x1
 100:	mov	x0, x19
 104:	bl	0 <realloc>
 108:	mov	x19, x0
 10c:	cbz	x0, 124 <ctf_str_append+0x70>
 110:	add	x0, x19, x21
 114:	mov	x1, x20
 118:	mov	x2, x22
 11c:	bl	0 <memcpy>
 120:	strb	wzr, [x19, x23]
 124:	mov	x0, x19
 128:	ldp	x20, x19, [sp, #48]
 12c:	ldp	x22, x21, [sp, #32]
 130:	ldr	x23, [sp, #16]
 134:	ldp	x29, x30, [sp], #64
 138:	ret

000000000000013c <ctf_str_append_noerr>:
 13c:	stp	x29, x30, [sp, #-32]!
 140:	str	x19, [sp, #16]
 144:	mov	x29, sp
 148:	mov	x19, x0
 14c:	bl	b4 <ctf_str_append>
 150:	cmp	x0, #0x0
 154:	csel	x0, x19, x0, eq  // eq = none
 158:	ldr	x19, [sp, #16]
 15c:	ldp	x29, x30, [sp], #32
 160:	ret

0000000000000164 <ctf_realloc>:
 164:	stp	x29, x30, [sp, #-16]!
 168:	mov	x9, x2
 16c:	ldr	x2, [x0, #376]
 170:	mov	x29, sp
 174:	cbz	x2, 198 <ctf_realloc+0x34>
 178:	mov	x8, x0
 17c:	adrp	x0, 0 <ctf_list_append>
 180:	add	x0, x0, #0x0
 184:	mov	x1, x8
 188:	bl	0 <ctf_dprintf>
 18c:	mov	x0, xzr
 190:	ldp	x29, x30, [sp], #16
 194:	ret
 198:	mov	x0, x1
 19c:	mov	x1, x9
 1a0:	bl	0 <realloc>
 1a4:	ldp	x29, x30, [sp], #16
 1a8:	ret

00000000000001ac <ctf_set_open_errno>:
 1ac:	cbz	x0, 1b4 <ctf_set_open_errno+0x8>
 1b0:	str	w1, [x0]
 1b4:	mov	x0, xzr
 1b8:	ret

00000000000001bc <ctf_set_errno>:
 1bc:	mov	x8, x0
 1c0:	mov	x0, #0xffffffffffffffff    	// #-1
 1c4:	str	w1, [x8, #556]
 1c8:	ret
