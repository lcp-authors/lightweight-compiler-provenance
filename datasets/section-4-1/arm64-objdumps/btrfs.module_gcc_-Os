
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//btrfs.module_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_zstd_free>:
       0:	mov	x0, x1
       4:	b	0 <grub_free>

0000000000000008 <grub_zstd_malloc>:
       8:	mov	x0, x1
       c:	b	0 <grub_malloc>

0000000000000010 <grub_btrfs_unmount>:
      10:	stp	x29, x30, [sp, #-32]!
      14:	mov	x29, sp
      18:	stp	x19, x20, [sp, #16]
      1c:	mov	x19, x0
      20:	mov	w20, #0x1                   	// #1
      24:	ldr	w1, [x19, #2888]
      28:	ldr	x0, [x19, #2880]
      2c:	cmp	w1, w20
      30:	b.hi	50 <grub_btrfs_unmount+0x40>  // b.pmore
      34:	bl	0 <grub_free>
      38:	ldr	x0, [x19, #2936]
      3c:	bl	0 <grub_free>
      40:	mov	x0, x19
      44:	ldp	x19, x20, [sp, #16]
      48:	ldp	x29, x30, [sp], #32
      4c:	b	0 <grub_free>
      50:	ubfiz	x1, x20, #4, #32
      54:	ldr	x0, [x0, x1]
      58:	cbz	x0, 60 <grub_btrfs_unmount+0x50>
      5c:	bl	0 <grub_device_close>
      60:	add	w20, w20, #0x1
      64:	b	24 <grub_btrfs_unmount+0x14>

0000000000000068 <grub_btrfs_close>:
      68:	stp	x29, x30, [sp, #-16]!
      6c:	mov	x29, sp
      70:	ldr	x0, [x0, #80]
      74:	bl	10 <grub_btrfs_unmount>
      78:	mov	w0, #0x0                   	// #0
      7c:	ldp	x29, x30, [sp], #16
      80:	ret

0000000000000084 <save_ref>:
      84:	stp	x29, x30, [sp, #-64]!
      88:	mov	x29, sp
      8c:	ldr	w5, [x0]
      90:	stp	x19, x20, [sp, #16]
      94:	mov	x19, x0
      98:	add	w5, w5, #0x1
      9c:	stp	x21, x22, [sp, #32]
      a0:	mov	w20, w4
      a4:	mov	w22, w2
      a8:	str	x23, [sp, #48]
      ac:	mov	w21, w3
      b0:	str	w5, [x0]
      b4:	mov	x23, x1
      b8:	ldr	w0, [x0, #4]
      bc:	cmp	w5, w0
      c0:	b.ls	104 <save_ref+0x80>  // b.plast
      c4:	lsl	w0, w0, #1
      c8:	mov	w1, #0x18                  	// #24
      cc:	str	w0, [x19, #4]
      d0:	umull	x1, w0, w1
      d4:	ldr	x0, [x19, #8]
      d8:	bl	0 <grub_realloc>
      dc:	cbnz	x0, 100 <save_ref+0x7c>
      e0:	adrp	x0, 0 <grub_zstd_free>
      e4:	ldr	x0, [x0]
      e8:	ldr	w0, [x0]
      ec:	ldp	x19, x20, [sp, #16]
      f0:	ldp	x21, x22, [sp, #32]
      f4:	ldr	x23, [sp, #48]
      f8:	ldp	x29, x30, [sp], #64
      fc:	ret
     100:	str	x0, [x19, #8]
     104:	ldr	w0, [x19]
     108:	mov	w1, #0x18                  	// #24
     10c:	sub	w0, w0, #0x1
     110:	umull	x0, w0, w1
     114:	ldr	x1, [x19, #8]
     118:	add	x5, x1, x0
     11c:	str	x23, [x1, x0]
     120:	mov	w0, #0x0                   	// #0
     124:	stp	w22, w21, [x5, #8]
     128:	str	w20, [x5, #16]
     12c:	b	ec <save_ref+0x68>
	...

0000000000000138 <grub_btrfs_zstd_decompress>:
     138:	stp	x29, x30, [sp, #-160]!
     13c:	mov	x29, sp
     140:	stp	x19, x20, [sp, #16]
     144:	mov	x19, x4
     148:	stp	x21, x22, [sp, #32]
     14c:	mov	x22, x3
     150:	stp	x23, x24, [sp, #48]
     154:	mov	x23, x0
     158:	mov	x24, x2
     15c:	stp	x25, x26, [sp, #64]
     160:	mov	x0, #0x1ffff               	// #131071
     164:	mov	x26, x1
     168:	str	x27, [sp, #80]
     16c:	cmp	x4, x0
     170:	b.hi	1cc <grub_btrfs_zstd_decompress+0x94>  // b.pmore
     174:	mov	x0, #0x20000               	// #131072
     178:	bl	0 <grub_malloc>
     17c:	mov	x21, x0
     180:	cbnz	x0, 220 <grub_btrfs_zstd_decompress+0xe8>
     184:	adrp	x0, 0 <grub_zstd_free>
     188:	mov	x20, #0x0                   	// #0
     18c:	ldr	x1, [x0]
     190:	mov	w0, #0x3                   	// #3
     194:	bl	0 <grub_error>
     198:	mov	x19, #0xffffffffffffffff    	// #-1
     19c:	mov	x0, x21
     1a0:	bl	0 <grub_free>
     1a4:	mov	x0, x20
     1a8:	bl	0 <ZSTD_freeDCtx>
     1ac:	mov	x0, x19
     1b0:	ldp	x19, x20, [sp, #16]
     1b4:	ldp	x21, x22, [sp, #32]
     1b8:	ldp	x23, x24, [sp, #48]
     1bc:	ldp	x25, x26, [sp, #64]
     1c0:	ldr	x27, [sp, #80]
     1c4:	ldp	x29, x30, [sp], #160
     1c8:	ret
     1cc:	mov	x27, x4
     1d0:	mov	x25, x3
     1d4:	mov	x21, #0x0                   	// #0
     1d8:	adrp	x0, 0 <grub_zstd_free>
     1dc:	str	xzr, [sp, #112]
     1e0:	ldr	x0, [x0]
     1e4:	str	x0, [sp, #136]
     1e8:	adrp	x0, 0 <grub_zstd_free>
     1ec:	ldr	x0, [x0]
     1f0:	str	x0, [sp, #144]
     1f4:	ldp	x0, x1, [sp, #136]
     1f8:	stp	x0, x1, [sp, #96]
     1fc:	add	x0, sp, #0x60
     200:	bl	0 <ZSTD_createDCtx_advanced>
     204:	mov	x20, x0
     208:	cbnz	x0, 22c <grub_btrfs_zstd_decompress+0xf4>
     20c:	adrp	x0, 0 <grub_zstd_free>
     210:	ldr	x1, [x0]
     214:	mov	w0, #0x3                   	// #3
     218:	bl	0 <grub_error>
     21c:	b	198 <grub_btrfs_zstd_decompress+0x60>
     220:	mov	x25, x0
     224:	mov	x27, #0x20000               	// #131072
     228:	b	1d8 <grub_btrfs_zstd_decompress+0xa0>
     22c:	mov	x1, x26
     230:	mov	x0, x23
     234:	bl	0 <ZSTD_findFrameCompressedSize>
     238:	mov	x26, x0
     23c:	bl	0 <ZSTD_isError>
     240:	cbz	w0, 254 <grub_btrfs_zstd_decompress+0x11c>
     244:	adrp	x0, 0 <grub_zstd_free>
     248:	ldr	x1, [x0]
     24c:	mov	w0, #0x1a                  	// #26
     250:	b	218 <grub_btrfs_zstd_decompress+0xe0>
     254:	mov	x4, x26
     258:	mov	x3, x23
     25c:	mov	x2, x27
     260:	mov	x1, x25
     264:	mov	x0, x20
     268:	bl	0 <ZSTD_decompressDCtx>
     26c:	bl	0 <ZSTD_isError>
     270:	cbnz	w0, 244 <grub_btrfs_zstd_decompress+0x10c>
     274:	mov	x2, x19
     278:	add	x1, x25, x24
     27c:	mov	x0, x22
     280:	bl	0 <grub_memmove>
     284:	b	19c <grub_btrfs_zstd_decompress+0x64>
	...

00000000000002b0 <find_device>:
     2b0:	stp	x29, x30, [sp, #-80]!
     2b4:	mov	x29, sp
     2b8:	stp	x21, x22, [sp, #32]
     2bc:	mov	x21, x1
     2c0:	ldr	w2, [x0, #2888]
     2c4:	stp	x19, x20, [sp, #16]
     2c8:	mov	x19, x0
     2cc:	stp	x0, x1, [sp, #56]
     2d0:	mov	x0, #0x0                   	// #0
     2d4:	str	xzr, [sp, #72]
     2d8:	cmp	w2, w0
     2dc:	b.hi	344 <find_device+0x94>  // b.pmore
     2e0:	adrp	x0, 0 <grub_zstd_free>
     2e4:	add	x1, sp, #0x38
     2e8:	ldr	x0, [x0]
     2ec:	bl	0 <grub_device_iterate>
     2f0:	ldr	w0, [x19, #2888]
     2f4:	ldr	w1, [x19, #2892]
     2f8:	add	w0, w0, #0x1
     2fc:	str	w0, [x19, #2888]
     300:	cmp	w0, w1
     304:	b.ls	374 <find_device+0xc4>  // b.plast
     308:	lsl	w0, w0, #1
     30c:	ldr	x22, [x19, #2880]
     310:	add	w0, w0, #0x1
     314:	str	w0, [x19, #2892]
     318:	ubfiz	x1, x0, #4, #32
     31c:	mov	x0, x22
     320:	bl	0 <grub_realloc>
     324:	str	x0, [x19, #2880]
     328:	mov	x20, x0
     32c:	cbnz	x0, 374 <find_device+0xc4>
     330:	ldr	x0, [sp, #72]
     334:	cbz	x0, 33c <find_device+0x8c>
     338:	bl	0 <grub_device_close>
     33c:	str	x22, [x19, #2880]
     340:	b	360 <find_device+0xb0>
     344:	ldr	x1, [x19, #2880]
     348:	add	x1, x1, x0, lsl #4
     34c:	add	x0, x0, #0x1
     350:	ldr	x3, [x1, #8]
     354:	cmp	x3, x21
     358:	b.ne	2d8 <find_device+0x28>  // b.any
     35c:	ldr	x20, [x1]
     360:	mov	x0, x20
     364:	ldp	x19, x20, [sp, #16]
     368:	ldp	x21, x22, [sp, #32]
     36c:	ldp	x29, x30, [sp], #80
     370:	ret
     374:	ldr	w0, [x19, #2888]
     378:	ldr	x1, [x19, #2880]
     37c:	sub	w0, w0, #0x1
     380:	ldr	x20, [sp, #72]
     384:	lsl	x2, x0, #4
     388:	add	x0, x1, x0, lsl #4
     38c:	str	x21, [x0, #8]
     390:	str	x20, [x1, x2]
     394:	b	360 <find_device+0xb0>
	...

00000000000003a0 <key_cmp>:
     3a0:	ldr	x3, [x0]
     3a4:	ldr	x2, [x1]
     3a8:	cmp	x3, x2
     3ac:	b.cc	3e0 <key_cmp+0x40>  // b.lo, b.ul, b.last
     3b0:	b.hi	3e8 <key_cmp+0x48>  // b.pmore
     3b4:	ldrb	w3, [x0, #8]
     3b8:	ldrb	w2, [x1, #8]
     3bc:	cmp	w3, w2
     3c0:	b.cc	3e0 <key_cmp+0x40>  // b.lo, b.ul, b.last
     3c4:	b.hi	3e8 <key_cmp+0x48>  // b.pmore
     3c8:	ldur	x2, [x0, #9]
     3cc:	ldur	x1, [x1, #9]
     3d0:	cmp	x2, x1
     3d4:	cset	w0, hi  // hi = pmore
     3d8:	csinv	w0, w0, wzr, cs  // cs = hs, nlast
     3dc:	ret
     3e0:	mov	w0, #0xffffffff            	// #-1
     3e4:	b	3dc <key_cmp+0x3c>
     3e8:	mov	w0, #0x1                   	// #1
     3ec:	b	3dc <key_cmp+0x3c>

00000000000003f0 <check_btrfs_header>:
     3f0:	stp	x29, x30, [sp, #-16]!
     3f4:	mov	x29, sp
     3f8:	ldr	x3, [x1, #48]
     3fc:	cmp	x3, x2
     400:	b.eq	438 <check_btrfs_header+0x48>  // b.none
     404:	adrp	x0, 0 <grub_zstd_free>
     408:	mov	w1, #0x137                 	// #311
     40c:	ldr	x3, [x0]
     410:	adrp	x0, 0 <grub_zstd_free>
     414:	ldr	x2, [x0]
     418:	adrp	x0, 0 <grub_zstd_free>
     41c:	ldr	x0, [x0]
     420:	bl	0 <grub_real_dprintf>
     424:	adrp	x0, 0 <grub_zstd_free>
     428:	ldr	x1, [x0]
     42c:	mov	w0, #0x9                   	// #9
     430:	ldp	x29, x30, [sp], #16
     434:	b	0 <grub_error>
     438:	add	x1, x1, #0x20
     43c:	add	x0, x0, #0x20
     440:	mov	x2, #0x10                  	// #16
     444:	bl	0 <grub_memcmp>
     448:	cbz	w0, 478 <check_btrfs_header+0x88>
     44c:	adrp	x0, 0 <grub_zstd_free>
     450:	mov	w1, #0x13d                 	// #317
     454:	ldr	x3, [x0]
     458:	adrp	x0, 0 <grub_zstd_free>
     45c:	ldr	x2, [x0]
     460:	adrp	x0, 0 <grub_zstd_free>
     464:	ldr	x0, [x0]
     468:	bl	0 <grub_real_dprintf>
     46c:	adrp	x0, 0 <grub_zstd_free>
     470:	ldr	x1, [x0]
     474:	b	42c <check_btrfs_header+0x3c>
     478:	ldp	x29, x30, [sp], #16
     47c:	ret
	...

00000000000004b0 <btrfs_read_from_chunk>:
     4b0:	stp	x29, x30, [sp, #-80]!
     4b4:	mov	x29, sp
     4b8:	stp	x19, x20, [sp, #16]
     4bc:	add	x19, x2, w4, sxtw
     4c0:	mov	x4, x2
     4c4:	lsl	x19, x19, #5
     4c8:	stp	x23, x24, [sp, #48]
     4cc:	add	x19, x19, #0x30
     4d0:	mov	x24, x0
     4d4:	add	x0, x1, x19
     4d8:	stp	x21, x22, [sp, #32]
     4dc:	mov	x22, x5
     4e0:	mov	x21, x1
     4e4:	ldr	x5, [x0, #8]
     4e8:	adrp	x0, 0 <grub_zstd_free>
     4ec:	stp	x25, x26, [sp, #64]
     4f0:	adrp	x26, 0 <grub_zstd_free>
     4f4:	adrp	x25, 0 <grub_zstd_free>
     4f8:	add	x20, x5, x3
     4fc:	mov	w1, #0x296                 	// #662
     500:	ldr	x3, [x0]
     504:	mov	x23, x6
     508:	ldr	x0, [x25]
     50c:	mov	x6, x20
     510:	ldr	x2, [x26]
     514:	bl	0 <grub_real_dprintf>
     518:	ldr	x1, [x21, x19]
     51c:	mov	x0, x24
     520:	bl	2b0 <find_device>
     524:	cbz	x0, 554 <btrfs_read_from_chunk+0xa4>
     528:	mov	x4, x23
     52c:	mov	x3, x22
     530:	and	x2, x20, #0x1ff
     534:	lsr	x1, x20, #9
     538:	ldp	x19, x20, [sp, #16]
     53c:	ldp	x21, x22, [sp, #32]
     540:	ldp	x23, x24, [sp, #48]
     544:	ldp	x25, x26, [sp, #64]
     548:	ldp	x29, x30, [sp], #80
     54c:	ldr	x0, [x0]
     550:	b	0 <grub_disk_read>
     554:	adrp	x0, 0 <grub_zstd_free>
     558:	mov	w1, #0x29e                 	// #670
     55c:	ldr	x2, [x26]
     560:	ldr	x3, [x0]
     564:	ldr	x0, [x25]
     568:	bl	0 <grub_real_dprintf>
     56c:	adrp	x0, 0 <grub_zstd_free>
     570:	ldp	x19, x20, [sp, #16]
     574:	ldr	x0, [x0]
     578:	ldp	x21, x22, [sp, #32]
     57c:	ldp	x23, x24, [sp, #48]
     580:	ldp	x25, x26, [sp, #64]
     584:	str	wzr, [x0]
     588:	mov	w0, #0xe                   	// #14
     58c:	ldp	x29, x30, [sp], #80
     590:	ret
     594:	nop
	...

00000000000005c0 <raid6_recover_read_buffer>:
     5c0:	mov	x5, x0
     5c4:	mov	x0, x3
     5c8:	sbfiz	x3, x1, #4, #32
     5cc:	add	x1, x5, w1, sxtw #4
     5d0:	stp	x29, x30, [sp, #-32]!
     5d4:	mov	x2, x4
     5d8:	adrp	x4, 0 <grub_zstd_free>
     5dc:	mov	x29, sp
     5e0:	ldr	w1, [x1, #8]
     5e4:	str	x19, [sp, #16]
     5e8:	ldr	x19, [x4]
     5ec:	cbnz	w1, 604 <raid6_recover_read_buffer+0x44>
     5f0:	mov	w0, #0xe                   	// #14
     5f4:	str	w0, [x19]
     5f8:	ldr	x19, [sp, #16]
     5fc:	ldp	x29, x30, [sp], #32
     600:	ret
     604:	ldr	x1, [x5, x3]
     608:	bl	0 <grub_memmove>
     60c:	str	wzr, [x19]
     610:	mov	w0, #0x0                   	// #0
     614:	b	5f8 <raid6_recover_read_buffer+0x38>
	...

0000000000000620 <grub_btrfs_lzo_decompress>:
     620:	stp	x29, x30, [sp, #-112]!
     624:	mov	x29, sp
     628:	stp	x19, x20, [sp, #16]
     62c:	mov	x19, x0
     630:	stp	x21, x22, [sp, #32]
     634:	stp	x23, x24, [sp, #48]
     638:	mov	x24, x0
     63c:	ldr	w0, [x19], #4
     640:	stp	x25, x26, [sp, #64]
     644:	cmp	x0, x1
     648:	stp	x27, x28, [sp, #80]
     64c:	b.hi	748 <grub_btrfs_lzo_decompress+0x128>  // b.pmore
     650:	mov	x26, x2
     654:	mov	x23, x3
     658:	mov	x21, x4
     65c:	mov	w1, #0x1143                	// #4419
     660:	cmp	x26, #0xfff
     664:	b.hi	690 <grub_btrfs_lzo_decompress+0x70>  // b.pmore
     668:	mov	x20, #0x0                   	// #0
     66c:	cbnz	x21, 6cc <grub_btrfs_lzo_decompress+0xac>
     670:	mov	x0, x20
     674:	ldp	x19, x20, [sp, #16]
     678:	ldp	x21, x22, [sp, #32]
     67c:	ldp	x23, x24, [sp, #48]
     680:	ldp	x25, x26, [sp, #64]
     684:	ldp	x27, x28, [sp, #80]
     688:	ldp	x29, x30, [sp], #112
     68c:	ret
     690:	sub	x0, x19, x24
     694:	and	x2, x0, #0xffc
     698:	cmp	x2, #0xffc
     69c:	b.ne	6ac <grub_btrfs_lzo_decompress+0x8c>  // b.any
     6a0:	add	x19, x0, #0x3
     6a4:	and	x19, x19, #0xfffffffffffffffc
     6a8:	add	x19, x24, x19
     6ac:	ldr	w0, [x19]
     6b0:	cmp	w0, w1
     6b4:	b.hi	748 <grub_btrfs_lzo_decompress+0x128>  // b.pmore
     6b8:	mov	w0, w0
     6bc:	sub	x26, x26, #0x1, lsl #12
     6c0:	add	x0, x0, #0x4
     6c4:	add	x19, x19, x0
     6c8:	b	660 <grub_btrfs_lzo_decompress+0x40>
     6cc:	mov	x0, #0x1000                	// #4096
     6d0:	str	x0, [sp, #104]
     6d4:	sub	x0, x19, x24
     6d8:	and	x1, x0, #0xffc
     6dc:	cmp	x1, #0xffc
     6e0:	b.ne	6f0 <grub_btrfs_lzo_decompress+0xd0>  // b.any
     6e4:	add	x19, x0, #0x3
     6e8:	and	x19, x19, #0xfffffffffffffffc
     6ec:	add	x19, x24, x19
     6f0:	ldr	w27, [x19], #4
     6f4:	mov	w0, #0x1143                	// #4419
     6f8:	cmp	w27, w0
     6fc:	b.hi	748 <grub_btrfs_lzo_decompress+0x128>  // b.pmore
     700:	cmp	x21, #0xfff
     704:	ccmp	x26, #0x0, #0x0, hi  // hi = pmore
     708:	b.eq	794 <grub_btrfs_lzo_decompress+0x174>  // b.none
     70c:	mov	x0, #0x1000                	// #4096
     710:	sub	x28, x0, x26
     714:	bl	0 <grub_malloc>
     718:	mov	x25, x0
     71c:	cbz	x0, 748 <grub_btrfs_lzo_decompress+0x128>
     720:	mov	w27, w27
     724:	mov	x2, x0
     728:	add	x3, sp, #0x68
     72c:	mov	x1, x27
     730:	mov	x0, x19
     734:	mov	x4, #0x0                   	// #0
     738:	bl	0 <lzo1x_decompress_safe>
     73c:	cbz	w0, 750 <grub_btrfs_lzo_decompress+0x130>
     740:	mov	x0, x25
     744:	bl	0 <grub_free>
     748:	mov	x0, #0xffffffffffffffff    	// #-1
     74c:	b	674 <grub_btrfs_lzo_decompress+0x54>
     750:	ldr	x22, [sp, #104]
     754:	add	x1, x25, x26
     758:	mov	x0, x23
     75c:	add	x19, x19, x27
     760:	cmp	x22, x21
     764:	csel	x22, x22, x21, ls  // ls = plast
     768:	cmp	x22, x28
     76c:	csel	x22, x22, x28, ls  // ls = plast
     770:	mov	x2, x22
     774:	sub	x21, x21, x22
     778:	bl	0 <grub_memmove>
     77c:	add	x20, x20, x22
     780:	add	x23, x23, x22
     784:	mov	x0, x25
     788:	bl	0 <grub_free>
     78c:	mov	x26, #0x0                   	// #0
     790:	b	66c <grub_btrfs_lzo_decompress+0x4c>
     794:	mov	w27, w27
     798:	add	x3, sp, #0x68
     79c:	mov	x2, x23
     7a0:	mov	x1, x27
     7a4:	mov	x0, x19
     7a8:	mov	x4, #0x0                   	// #0
     7ac:	bl	0 <lzo1x_decompress_safe>
     7b0:	cbnz	w0, 748 <grub_btrfs_lzo_decompress+0x128>
     7b4:	ldr	x0, [sp, #104]
     7b8:	add	x19, x19, x27
     7bc:	sub	x21, x21, x0
     7c0:	add	x20, x20, x0
     7c4:	add	x23, x23, x0
     7c8:	b	78c <grub_btrfs_lzo_decompress+0x16c>

00000000000007cc <read_sblock>:
     7cc:	sub	sp, sp, #0xb80
     7d0:	stp	x29, x30, [sp]
     7d4:	mov	x29, sp
     7d8:	stp	x23, x24, [sp, #48]
     7dc:	mov	x23, x0
     7e0:	adrp	x0, 0 <grub_zstd_free>
     7e4:	stp	x21, x22, [sp, #32]
     7e8:	add	x24, sp, #0x90
     7ec:	mov	x21, x1
     7f0:	ldr	x22, [x0]
     7f4:	stp	x19, x20, [sp, #16]
     7f8:	mov	w20, #0x0                   	// #0
     7fc:	str	x25, [sp, #64]
     800:	adrp	x25, 0 <grub_zstd_free>
     804:	ldr	x1, [x22]
     808:	add	x4, sp, #0x50
     80c:	mov	x0, x23
     810:	mov	x3, #0xb2b                 	// #2859
     814:	mov	x2, #0x0                   	// #0
     818:	bl	0 <grub_disk_read>
     81c:	mov	w19, w0
     820:	cmp	w0, #0xb
     824:	b.eq	880 <read_sblock+0xb4>  // b.none
     828:	ldr	x1, [x25]
     82c:	mov	x0, x24
     830:	mov	x2, #0x8                   	// #8
     834:	bl	0 <grub_memcmp>
     838:	cbnz	w0, 880 <read_sblock+0xb4>
     83c:	cbz	w20, 850 <read_sblock+0x84>
     840:	ldr	x0, [x21, #72]
     844:	ldr	x1, [sp, #152]
     848:	cmp	x1, x0
     84c:	b.ls	860 <read_sblock+0x94>  // b.plast
     850:	add	x1, sp, #0x50
     854:	mov	x0, x21
     858:	mov	x2, #0xb2b                 	// #2859
     85c:	bl	0 <grub_memmove>
     860:	add	w20, w20, #0x1
     864:	cmp	w20, #0x4
     868:	b.eq	880 <read_sblock+0xb4>  // b.none
     86c:	add	x1, sp, #0x200
     870:	ldr	x0, [x22, #8]!
     874:	ldur	x1, [x1, #-223]
     878:	cmp	x0, x1, lsr #9
     87c:	b.cc	804 <read_sblock+0x38>  // b.lo, b.ul, b.last
     880:	cmp	w19, #0x0
     884:	ccmp	w19, #0xb, #0x4, ne  // ne = any
     888:	b.ne	8a4 <read_sblock+0xd8>  // b.any
     88c:	cbnz	w20, 8c4 <read_sblock+0xf8>
     890:	adrp	x0, 0 <grub_zstd_free>
     894:	ldr	x1, [x0]
     898:	mov	w0, #0x9                   	// #9
     89c:	bl	0 <grub_error>
     8a0:	mov	w19, w0
     8a4:	mov	w0, w19
     8a8:	ldp	x29, x30, [sp]
     8ac:	ldp	x19, x20, [sp, #16]
     8b0:	ldp	x21, x22, [sp, #32]
     8b4:	ldp	x23, x24, [sp, #48]
     8b8:	ldr	x25, [sp, #64]
     8bc:	add	sp, sp, #0xb80
     8c0:	ret
     8c4:	cmp	w19, #0xb
     8c8:	b.ne	8a4 <read_sblock+0xd8>  // b.any
     8cc:	adrp	x0, 0 <grub_zstd_free>
     8d0:	mov	w19, #0x0                   	// #0
     8d4:	ldr	x0, [x0]
     8d8:	str	wzr, [x0]
     8dc:	b	8a4 <read_sblock+0xd8>
	...

0000000000000900 <grub_btrfs_mount>:
     900:	stp	x29, x30, [sp, #-32]!
     904:	mov	x29, sp
     908:	stp	x19, x20, [sp, #16]
     90c:	ldr	x19, [x0]
     910:	cbnz	x19, 934 <grub_btrfs_mount+0x34>
     914:	adrp	x0, 0 <grub_zstd_free>
     918:	ldr	x1, [x0]
     91c:	mov	w0, #0x9                   	// #9
     920:	bl	0 <grub_error>
     924:	mov	x0, x19
     928:	ldp	x19, x20, [sp, #16]
     92c:	ldp	x29, x30, [sp], #32
     930:	ret
     934:	mov	x20, x0
     938:	mov	x0, #0xb80                 	// #2944
     93c:	bl	0 <grub_zalloc>
     940:	mov	x19, x0
     944:	cbz	x0, 924 <grub_btrfs_mount+0x24>
     948:	mov	x1, x0
     94c:	ldr	x0, [x20]
     950:	bl	7cc <read_sblock>
     954:	cbz	w0, 968 <grub_btrfs_mount+0x68>
     958:	mov	x0, x19
     95c:	mov	x19, #0x0                   	// #0
     960:	bl	0 <grub_free>
     964:	b	924 <grub_btrfs_mount+0x24>
     968:	mov	w0, #0x10                  	// #16
     96c:	str	w0, [x19, #2892]
     970:	mov	x0, #0x100                 	// #256
     974:	bl	0 <grub_malloc>
     978:	str	x0, [x19, #2880]
     97c:	cbz	x0, 958 <grub_btrfs_mount+0x58>
     980:	mov	w1, #0x1                   	// #1
     984:	str	w1, [x19, #2888]
     988:	ldur	x1, [x19, #201]
     98c:	stp	x20, x1, [x0]
     990:	b	924 <grub_btrfs_mount+0x24>
     994:	nop
	...

00000000000009a0 <grub_btrfs_uuid>:
     9a0:	sub	sp, sp, #0x40
     9a4:	stp	x29, x30, [sp, #16]
     9a8:	add	x29, sp, #0x10
     9ac:	stp	x19, x20, [sp, #32]
     9b0:	mov	x20, x1
     9b4:	str	x21, [sp, #48]
     9b8:	str	xzr, [x1]
     9bc:	bl	900 <grub_btrfs_mount>
     9c0:	mov	x19, x0
     9c4:	adrp	x0, 0 <grub_zstd_free>
     9c8:	ldr	x21, [x0]
     9cc:	cbnz	x19, 9e8 <grub_btrfs_uuid+0x48>
     9d0:	ldr	w0, [x21]
     9d4:	ldp	x29, x30, [sp, #16]
     9d8:	ldp	x19, x20, [sp, #32]
     9dc:	ldr	x21, [sp, #48]
     9e0:	add	sp, sp, #0x40
     9e4:	ret
     9e8:	ldrb	w8, [x19, #45]
     9ec:	ldrh	w7, [x19, #44]
     9f0:	ldrh	w6, [x19, #42]
     9f4:	ldrh	w5, [x19, #40]
     9f8:	orr	w7, w8, w7, lsl #8
     9fc:	ldrb	w8, [x19, #43]
     a00:	ldrh	w4, [x19, #38]
     a04:	and	w7, w7, #0xffff
     a08:	ldrh	w3, [x19, #36]
     a0c:	orr	w6, w8, w6, lsl #8
     a10:	ldrb	w8, [x19, #41]
     a14:	ldrh	w2, [x19, #34]
     a18:	and	w6, w6, #0xffff
     a1c:	ldrh	w1, [x19, #32]
     a20:	orr	w5, w8, w5, lsl #8
     a24:	ldrb	w8, [x19, #39]
     a28:	ldrh	w0, [x19, #46]
     a2c:	and	w5, w5, #0xffff
     a30:	orr	w4, w8, w4, lsl #8
     a34:	ldrb	w8, [x19, #37]
     a38:	and	w4, w4, #0xffff
     a3c:	orr	w3, w8, w3, lsl #8
     a40:	ldrb	w8, [x19, #35]
     a44:	and	w3, w3, #0xffff
     a48:	orr	w2, w8, w2, lsl #8
     a4c:	ldrb	w8, [x19, #33]
     a50:	and	w2, w2, #0xffff
     a54:	orr	w1, w8, w1, lsl #8
     a58:	ldrb	w8, [x19, #47]
     a5c:	and	w1, w1, #0xffff
     a60:	orr	w0, w8, w0, lsl #8
     a64:	and	w0, w0, #0xffff
     a68:	str	w0, [sp]
     a6c:	adrp	x0, 0 <grub_zstd_free>
     a70:	ldr	x0, [x0]
     a74:	bl	0 <grub_xasprintf>
     a78:	str	x0, [x20]
     a7c:	mov	x0, x19
     a80:	bl	10 <grub_btrfs_unmount>
     a84:	b	9d0 <grub_btrfs_uuid+0x30>
	...

0000000000000a98 <grub_btrfs_label>:
     a98:	stp	x29, x30, [sp, #-48]!
     a9c:	mov	x29, sp
     aa0:	stp	x19, x20, [sp, #16]
     aa4:	mov	x20, x1
     aa8:	str	x21, [sp, #32]
     aac:	str	xzr, [x1]
     ab0:	bl	900 <grub_btrfs_mount>
     ab4:	mov	x19, x0
     ab8:	adrp	x0, 0 <grub_zstd_free>
     abc:	ldr	x21, [x0]
     ac0:	cbnz	x19, ad8 <grub_btrfs_label+0x40>
     ac4:	ldr	w0, [x21]
     ac8:	ldp	x19, x20, [sp, #16]
     acc:	ldr	x21, [sp, #32]
     ad0:	ldp	x29, x30, [sp], #48
     ad4:	ret
     ad8:	add	x0, x19, #0x12b
     adc:	mov	x1, #0x100                 	// #256
     ae0:	bl	0 <grub_strndup>
     ae4:	str	x0, [x20]
     ae8:	mov	x0, x19
     aec:	bl	10 <grub_btrfs_unmount>
     af0:	b	ac4 <grub_btrfs_label+0x2c>
     af4:	nop
	...

0000000000000b00 <find_device_iter>:
     b00:	sub	sp, sp, #0xb50
     b04:	stp	x29, x30, [sp]
     b08:	mov	x29, sp
     b0c:	stp	x19, x20, [sp, #16]
     b10:	mov	x20, x1
     b14:	bl	0 <grub_device_open>
     b18:	cbz	x0, b58 <find_device_iter+0x58>
     b1c:	ldr	x2, [x0]
     b20:	mov	x19, x0
     b24:	cbnz	x2, b30 <find_device_iter+0x30>
     b28:	bl	0 <grub_device_close>
     b2c:	b	b58 <find_device_iter+0x58>
     b30:	add	x1, sp, #0x20
     b34:	mov	x0, x2
     b38:	bl	7cc <read_sblock>
     b3c:	cmp	w0, #0x9
     b40:	b.ne	b60 <find_device_iter+0x60>  // b.any
     b44:	mov	x0, x19
     b48:	bl	0 <grub_device_close>
     b4c:	adrp	x0, 0 <grub_zstd_free>
     b50:	ldr	x0, [x0]
     b54:	str	wzr, [x0]
     b58:	mov	w0, #0x0                   	// #0
     b5c:	b	bac <find_device_iter+0xac>
     b60:	cbz	w0, b74 <find_device_iter+0x74>
     b64:	mov	x0, x19
     b68:	bl	0 <grub_device_close>
     b6c:	bl	0 <grub_print_error>
     b70:	b	b58 <find_device_iter+0x58>
     b74:	ldr	x0, [x20]
     b78:	add	x1, sp, #0x40
     b7c:	mov	x2, #0x10                  	// #16
     b80:	add	x0, x0, #0x20
     b84:	bl	0 <grub_memcmp>
     b88:	cbnz	w0, b9c <find_device_iter+0x9c>
     b8c:	ldr	x0, [x20, #8]
     b90:	ldur	x1, [sp, #233]
     b94:	cmp	x1, x0
     b98:	b.eq	ba4 <find_device_iter+0xa4>  // b.none
     b9c:	mov	x0, x19
     ba0:	b	b28 <find_device_iter+0x28>
     ba4:	mov	w0, #0x1                   	// #1
     ba8:	str	x19, [x20, #16]
     bac:	ldp	x29, x30, [sp]
     bb0:	ldp	x19, x20, [sp, #16]
     bb4:	add	sp, sp, #0xb50
     bb8:	ret
     bbc:	nop
	...

0000000000000bc8 <grub_btrfs_read_logical>:
     bc8:	sub	sp, sp, #0x150
     bcc:	stp	x29, x30, [sp, #16]
     bd0:	add	x29, sp, #0x10
     bd4:	stp	x19, x20, [sp, #32]
     bd8:	stp	x21, x22, [sp, #48]
     bdc:	mov	x21, x1
     be0:	stp	x0, x2, [sp, #120]
     be4:	adrp	x0, 0 <grub_zstd_free>
     be8:	add	x20, x0, #0x0
     bec:	stp	x23, x24, [sp, #64]
     bf0:	stp	x25, x26, [sp, #80]
     bf4:	stp	x27, x28, [sp, #96]
     bf8:	str	x3, [sp, #152]
     bfc:	str	w4, [sp, #172]
     c00:	ldr	x0, [sp, #152]
     c04:	cbnz	x0, c10 <grub_btrfs_read_logical+0x48>
     c08:	mov	w28, #0x0                   	// #0
     c0c:	b	d5c <grub_btrfs_read_logical+0x194>
     c10:	adrp	x0, 0 <grub_zstd_free>
     c14:	adrp	x25, 0 <grub_zstd_free>
     c18:	ldr	x2, [x20]
     c1c:	mov	x4, x21
     c20:	ldr	x3, [x0]
     c24:	mov	w1, #0x361                 	// #865
     c28:	ldr	x0, [x25]
     c2c:	add	x23, x25, #0x0
     c30:	adrp	x26, 0 <grub_zstd_free>
     c34:	mov	w28, #0x20                  	// #32
     c38:	mov	x27, #0x41                  	// #65
     c3c:	bl	0 <grub_real_dprintf>
     c40:	ldr	x0, [sp, #120]
     c44:	add	x22, x0, #0x32b
     c48:	add	x24, x0, #0xb1a
     c4c:	cmp	x22, x24
     c50:	b.cc	cc0 <grub_btrfs_read_logical+0xf8>  // b.lo, b.ul, b.last
     c54:	mov	x0, #0x100                 	// #256
     c58:	str	x0, [sp, #312]
     c5c:	mov	w0, #0xffffffe4            	// #-28
     c60:	strb	w0, [sp, #320]
     c64:	add	x0, sp, #0x200
     c68:	stur	x21, [x0, #-191]
     c6c:	ldr	w0, [sp, #172]
     c70:	cmp	w0, #0xb
     c74:	b.ne	d18 <grub_btrfs_read_logical+0x150>  // b.any
     c78:	adrp	x0, 0 <grub_zstd_free>
     c7c:	ldr	x1, [x0]
     c80:	mov	w0, #0x9                   	// #9
     c84:	bl	0 <grub_error>
     c88:	mov	w28, w0
     c8c:	cbnz	w0, d5c <grub_btrfs_read_logical+0x194>
     c90:	ldrb	w0, [sp, #296]
     c94:	cmp	w0, #0xe4
     c98:	b.ne	cac <grub_btrfs_read_logical+0xe4>  // b.any
     c9c:	add	x0, sp, #0x200
     ca0:	ldur	x0, [x0, #-215]
     ca4:	cmp	x0, x21
     ca8:	b.ls	d40 <grub_btrfs_read_logical+0x178>  // b.plast
     cac:	adrp	x0, 0 <grub_zstd_free>
     cb0:	ldr	x1, [x0]
     cb4:	mov	w0, #0x9                   	// #9
     cb8:	bl	0 <grub_error>
     cbc:	b	eb8 <grub_btrfs_read_logical+0x2f0>
     cc0:	ldrb	w0, [x22, #8]
     cc4:	cmp	w0, #0xe4
     cc8:	b.ne	c54 <grub_btrfs_read_logical+0x8c>  // b.any
     ccc:	ldr	x3, [x26]
     cd0:	mov	w1, #0x36c                 	// #876
     cd4:	ldr	x0, [x23]
     cd8:	add	x19, x22, #0x11
     cdc:	ldr	x2, [x20]
     ce0:	ldur	x4, [x22, #9]
     ce4:	ldur	x5, [x22, #17]
     ce8:	bl	0 <grub_real_dprintf>
     cec:	ldur	x0, [x22, #9]
     cf0:	cmp	x0, x21
     cf4:	b.hi	d08 <grub_btrfs_read_logical+0x140>  // b.pmore
     cf8:	ldur	x1, [x22, #17]
     cfc:	add	x0, x0, x1
     d00:	cmp	x0, x21
     d04:	b.hi	da8 <grub_btrfs_read_logical+0x1e0>  // b.pmore
     d08:	ldrh	w0, [x19, #44]
     d0c:	umaddl	x0, w28, w0, x27
     d10:	add	x22, x22, x0
     d14:	b	c4c <grub_btrfs_read_logical+0x84>
     d18:	ldr	x0, [sp, #120]
     d1c:	add	x5, sp, #0xf0
     d20:	ldr	w7, [sp, #172]
     d24:	add	x4, sp, #0xf8
     d28:	add	x2, sp, #0x120
     d2c:	add	x1, sp, #0x138
     d30:	ldr	x3, [x0, #88]
     d34:	mov	x6, #0x0                   	// #0
     d38:	bl	1680 <lower_bound.part.0>
     d3c:	b	c88 <grub_btrfs_read_logical+0xc0>
     d40:	ldr	x0, [sp, #240]
     d44:	bl	0 <grub_malloc>
     d48:	mov	x19, x0
     d4c:	cbnz	x0, d80 <grub_btrfs_read_logical+0x1b8>
     d50:	adrp	x0, 0 <grub_zstd_free>
     d54:	ldr	x0, [x0]
     d58:	ldr	w28, [x0]
     d5c:	mov	w0, w28
     d60:	ldp	x29, x30, [sp, #16]
     d64:	ldp	x19, x20, [sp, #32]
     d68:	ldp	x21, x22, [sp, #48]
     d6c:	ldp	x23, x24, [sp, #64]
     d70:	ldp	x25, x26, [sp, #80]
     d74:	ldp	x27, x28, [sp, #96]
     d78:	add	sp, sp, #0x150
     d7c:	ret
     d80:	ldp	x3, x1, [sp, #240]
     d84:	mov	x2, x0
     d88:	ldr	w4, [sp, #172]
     d8c:	ldr	x0, [sp, #120]
     d90:	bl	bc8 <grub_btrfs_read_logical>
     d94:	mov	w28, w0
     d98:	cbz	w0, df4 <grub_btrfs_read_logical+0x22c>
     d9c:	mov	x0, x19
     da0:	bl	0 <grub_free>
     da4:	b	d5c <grub_btrfs_read_logical+0x194>
     da8:	str	wzr, [sp, #192]
     dac:	ldr	x0, [x19, #24]
     db0:	ldur	x27, [x22, #9]
     db4:	and	x0, x0, #0x180
     db8:	ldr	x5, [x19]
     dbc:	str	x0, [sp, #200]
     dc0:	str	xzr, [sp, #272]
     dc4:	sub	x26, x21, x27
     dc8:	cmp	x5, x26
     dcc:	b.hi	e04 <grub_btrfs_read_logical+0x23c>  // b.pmore
     dd0:	adrp	x0, 0 <grub_zstd_free>
     dd4:	mov	w1, #0x3a6                 	// #934
     dd8:	ldr	x3, [x0]
     ddc:	adrp	x0, 0 <grub_zstd_free>
     de0:	ldr	x2, [x0]
     de4:	adrp	x0, 0 <grub_zstd_free>
     de8:	ldr	x0, [x0]
     dec:	bl	0 <grub_real_dprintf>
     df0:	b	cac <grub_btrfs_read_logical+0xe4>
     df4:	mov	w0, #0x1                   	// #1
     df8:	add	x22, sp, #0x120
     dfc:	str	w0, [sp, #192]
     e00:	b	dac <grub_btrfs_read_logical+0x1e4>
     e04:	ldrh	w24, [x19, #44]
     e08:	mov	w8, #0x1                   	// #1
     e0c:	ldr	x28, [x19, #16]
     e10:	cmp	w24, #0x0
     e14:	csel	w24, w24, w8, ne  // ne = any
     e18:	mov	x0, #0x200                 	// #512
     e1c:	cmp	x28, #0x0
     e20:	ldrh	w7, [x19, #46]
     e24:	csel	x28, x28, x0, ne  // ne = any
     e28:	adrp	x0, 0 <grub_zstd_free>
     e2c:	ldr	x2, [x20]
     e30:	str	x28, [sp]
     e34:	ldr	x3, [x0]
     e38:	and	w6, w24, #0xffff
     e3c:	ldr	x0, [x25]
     e40:	mov	w1, #0x3ad                 	// #941
     e44:	mov	x4, x27
     e48:	str	w6, [sp, #136]
     e4c:	str	w8, [sp, #144]
     e50:	bl	0 <grub_real_dprintf>
     e54:	ldr	x1, [x19, #24]
     e58:	and	x0, x1, #0xfffffffffffffff8
     e5c:	cmp	x0, #0x20
     e60:	b.eq	fa8 <grub_btrfs_read_logical+0x3e0>  // b.none
     e64:	ldr	w6, [sp, #136]
     e68:	ldr	w8, [sp, #144]
     e6c:	b.hi	ec0 <grub_btrfs_read_logical+0x2f8>  // b.pmore
     e70:	cmp	x0, #0x8
     e74:	b.eq	fec <grub_btrfs_read_logical+0x424>  // b.none
     e78:	cmp	x0, #0x10
     e7c:	b.eq	fa8 <grub_btrfs_read_logical+0x3e0>  // b.none
     e80:	cbz	x0, f48 <grub_btrfs_read_logical+0x380>
     e84:	adrp	x0, 0 <grub_zstd_free>
     e88:	mov	w1, #0x446                 	// #1094
     e8c:	ldr	x3, [x0]
     e90:	adrp	x0, 0 <grub_zstd_free>
     e94:	ldr	x2, [x0]
     e98:	adrp	x0, 0 <grub_zstd_free>
     e9c:	ldr	x0, [x0]
     ea0:	bl	0 <grub_real_dprintf>
     ea4:	adrp	x0, 0 <grub_zstd_free>
     ea8:	ldr	x2, [x19, #24]
     eac:	ldr	x1, [x0]
     eb0:	mov	w0, #0x18                  	// #24
     eb4:	bl	0 <grub_error>
     eb8:	mov	w28, w0
     ebc:	b	d5c <grub_btrfs_read_logical+0x194>
     ec0:	cmp	x0, #0x80
     ec4:	b.eq	1034 <grub_btrfs_read_logical+0x46c>  // b.none
     ec8:	cmp	x0, #0x100
     ecc:	b.eq	1034 <grub_btrfs_read_logical+0x46c>  // b.none
     ed0:	cmp	x0, #0x40
     ed4:	b.ne	e84 <grub_btrfs_read_logical+0x2bc>  // b.any
     ed8:	ldrh	w24, [x19, #46]
     edc:	add	x2, sp, #0x118
     ee0:	mov	x1, x28
     ee4:	mov	x0, x26
     ee8:	cmp	w24, #0x0
     eec:	str	w8, [sp, #136]
     ef0:	csel	w24, w24, w8, ne  // ne = any
     ef4:	str	w6, [sp, #144]
     ef8:	and	w25, w24, #0xffff
     efc:	and	x24, x24, #0xffff
     f00:	bl	0 <grub_divmod64>
     f04:	ldr	w6, [sp, #144]
     f08:	add	x2, sp, #0x100
     f0c:	ldr	w8, [sp, #136]
     f10:	udiv	w6, w6, w25
     f14:	cmp	w6, #0x0
     f18:	csel	w6, w6, w8, ne  // ne = any
     f1c:	and	x1, x6, #0xffff
     f20:	bl	0 <grub_divmod64>
     f24:	str	w25, [sp, #168]
     f28:	ldr	x1, [sp, #256]
     f2c:	mul	x24, x1, x24
     f30:	str	x24, [sp, #256]
     f34:	ldr	x24, [sp, #280]
     f38:	sub	x8, x28, x24
     f3c:	madd	x0, x28, x0, x24
     f40:	str	x0, [sp, #264]
     f44:	b	fd8 <grub_btrfs_read_logical+0x410>
     f48:	adrp	x0, 0 <grub_zstd_free>
     f4c:	mov	w1, #0x3bd                 	// #957
     f50:	ldr	x2, [x20]
     f54:	ldr	x3, [x0]
     f58:	ldr	x0, [x25]
     f5c:	bl	0 <grub_real_dprintf>
     f60:	ldr	x0, [x19]
     f64:	and	x1, x24, #0xffff
     f68:	mov	x2, #0x0                   	// #0
     f6c:	bl	0 <grub_divmod64>
     f70:	cmp	x0, #0x0
     f74:	mov	x24, x0
     f78:	mov	x0, #0x200                 	// #512
     f7c:	csel	x24, x24, x0, ne  // ne = any
     f80:	add	x2, sp, #0x108
     f84:	mov	x1, x24
     f88:	mov	x0, x26
     f8c:	bl	0 <grub_divmod64>
     f90:	str	x0, [sp, #256]
     f94:	madd	x24, x0, x24, x24
     f98:	sub	x8, x27, x21
     f9c:	add	x8, x24, x8
     fa0:	mov	w0, #0x1                   	// #1
     fa4:	b	fd4 <grub_btrfs_read_logical+0x40c>
     fa8:	adrp	x0, 0 <grub_zstd_free>
     fac:	mov	w1, #0x3ca                 	// #970
     fb0:	ldr	x2, [x20]
     fb4:	ldr	x3, [x0]
     fb8:	ldr	x0, [x25]
     fbc:	bl	0 <grub_real_dprintf>
     fc0:	ldr	x8, [x19]
     fc4:	mov	w0, #0x2                   	// #2
     fc8:	stp	xzr, x26, [sp, #256]
     fcc:	add	x8, x27, x8
     fd0:	sub	x8, x8, x21
     fd4:	str	w0, [sp, #168]
     fd8:	cbnz	x8, 10d0 <grub_btrfs_read_logical+0x508>
     fdc:	adrp	x0, 0 <grub_zstd_free>
     fe0:	ldr	x1, [x0]
     fe4:	mov	w0, #0x26                  	// #38
     fe8:	b	cb8 <grub_btrfs_read_logical+0xf0>
     fec:	adrp	x0, 0 <grub_zstd_free>
     ff0:	mov	w1, #0x3d5                 	// #981
     ff4:	ldr	x2, [x20]
     ff8:	ldr	x3, [x0]
     ffc:	ldr	x0, [x25]
    1000:	bl	0 <grub_real_dprintf>
    1004:	add	x2, sp, #0x118
    1008:	mov	x1, x28
    100c:	mov	x0, x26
    1010:	bl	0 <grub_divmod64>
    1014:	and	x1, x24, #0xffff
    1018:	add	x2, sp, #0x100
    101c:	bl	0 <grub_divmod64>
    1020:	ldr	x24, [sp, #280]
    1024:	madd	x0, x28, x0, x24
    1028:	str	x0, [sp, #264]
    102c:	sub	x8, x28, x24
    1030:	b	fa0 <grub_btrfs_read_logical+0x3d8>
    1034:	tbz	w1, #7, 10b0 <grub_btrfs_read_logical+0x4e8>
    1038:	adrp	x0, 0 <grub_zstd_free>
    103c:	mov	w1, #0x3fe                 	// #1022
    1040:	ldr	x2, [x20]
    1044:	mov	x27, #0x1                   	// #1
    1048:	ldr	x3, [x0]
    104c:	ldr	x0, [x25]
    1050:	bl	0 <grub_real_dprintf>
    1054:	and	x24, x24, #0xffff
    1058:	add	x2, sp, #0x118
    105c:	mov	x1, x28
    1060:	mov	x0, x26
    1064:	bl	0 <grub_divmod64>
    1068:	sub	x1, x24, x27
    106c:	add	x2, sp, #0x100
    1070:	bl	0 <grub_divmod64>
    1074:	mov	x25, x0
    1078:	ldr	x0, [sp, #256]
    107c:	mov	x1, x24
    1080:	add	x2, sp, #0x100
    1084:	add	x0, x25, x0
    1088:	bl	0 <grub_divmod64>
    108c:	add	x0, x24, x25
    1090:	mov	x1, x24
    1094:	add	x2, sp, #0x110
    1098:	sub	x0, x0, x27
    109c:	bl	0 <grub_divmod64>
    10a0:	ldr	x24, [sp, #280]
    10a4:	madd	x25, x28, x25, x24
    10a8:	str	x25, [sp, #264]
    10ac:	b	102c <grub_btrfs_read_logical+0x464>
    10b0:	adrp	x0, 0 <grub_zstd_free>
    10b4:	mov	w1, #0x403                 	// #1027
    10b8:	ldr	x2, [x20]
    10bc:	mov	x27, #0x2                   	// #2
    10c0:	ldr	x3, [x0]
    10c4:	ldr	x0, [x25]
    10c8:	bl	0 <grub_real_dprintf>
    10cc:	b	1054 <grub_btrfs_read_logical+0x48c>
    10d0:	ldr	x0, [sp, #152]
    10d4:	cmp	x0, x8
    10d8:	csel	x24, x0, x8, ls  // ls = plast
    10dc:	mov	w0, #0x2                   	// #2
    10e0:	str	w0, [sp, #196]
    10e4:	mov	w1, #0x453                 	// #1107
    10e8:	ldr	x0, [x19, #16]
    10ec:	ldrh	w7, [x19, #46]
    10f0:	ldrh	w6, [x19, #44]
    10f4:	str	x0, [sp]
    10f8:	adrp	x0, 0 <grub_zstd_free>
    10fc:	add	x0, x0, #0x0
    1100:	ldr	x2, [x20]
    1104:	ldr	x3, [x0]
    1108:	ldr	x5, [x19]
    110c:	ldr	x0, [x23]
    1110:	ldur	x4, [x22, #9]
    1114:	bl	0 <grub_real_dprintf>
    1118:	adrp	x0, 0 <grub_zstd_free>
    111c:	mov	x4, x21
    1120:	ldr	x2, [x20]
    1124:	mov	w1, #0x45c                 	// #1116
    1128:	ldr	x3, [x0]
    112c:	ldr	x0, [x23]
    1130:	bl	0 <grub_real_dprintf>
    1134:	ldr	x0, [sp, #200]
    1138:	cbz	x0, 1544 <grub_btrfs_read_logical+0x97c>
    113c:	ldp	x0, x6, [sp, #120]
    1140:	mov	x1, x19
    1144:	ldp	x2, x3, [sp, #256]
    1148:	mov	x5, x24
    114c:	mov	w4, #0x0                   	// #0
    1150:	bl	4b0 <btrfs_read_from_chunk>
    1154:	adrp	x1, 0 <grub_zstd_free>
    1158:	ldr	x1, [x1]
    115c:	str	wzr, [x1]
    1160:	cbz	w0, 150c <grub_btrfs_read_logical+0x944>
    1164:	ldr	x0, [sp, #264]
    1168:	str	x0, [sp, #208]
    116c:	ldrh	w26, [x19, #44]
    1170:	ldr	x0, [sp, #256]
    1174:	str	x0, [sp, #216]
    1178:	ldr	x0, [sp, #272]
    117c:	str	x0, [sp, #224]
    1180:	ldr	x0, [x19, #24]
    1184:	str	x0, [sp, #176]
    1188:	lsl	x0, x26, #4
    118c:	str	x0, [sp, #184]
    1190:	bl	0 <grub_zalloc>
    1194:	mov	x25, x0
    1198:	cbz	x0, 153c <grub_btrfs_read_logical+0x974>
    119c:	mov	x27, #0x0                   	// #0
    11a0:	cmp	x26, x27
    11a4:	b.hi	120c <grub_btrfs_read_logical+0x644>  // b.pmore
    11a8:	add	x27, x19, #0x30
    11ac:	mov	x28, #0x0                   	// #0
    11b0:	stp	xzr, x25, [sp, #136]
    11b4:	str	x25, [sp, #160]
    11b8:	ldr	x0, [sp, #136]
    11bc:	cmp	x26, x0
    11c0:	b.hi	1228 <grub_btrfs_read_logical+0x660>  // b.pmore
    11c4:	ldr	x0, [sp, #176]
    11c8:	cmp	x28, #0x1
    11cc:	and	x27, x0, #0x80
    11d0:	b.ls	1344 <grub_btrfs_read_logical+0x77c>  // b.plast
    11d4:	cbz	x27, 1318 <grub_btrfs_read_logical+0x750>
    11d8:	adrp	x0, 0 <grub_zstd_free>
    11dc:	mov	x5, x28
    11e0:	ldr	x2, [x20]
    11e4:	mov	x4, x26
    11e8:	ldr	x3, [x0]
    11ec:	mov	w1, #0x32d                 	// #813
    11f0:	ldr	x0, [x23]
    11f4:	mov	w28, #0xe                   	// #14
    11f8:	bl	0 <grub_real_dprintf>
    11fc:	mov	x27, #0x0                   	// #0
    1200:	b	14f8 <grub_btrfs_read_logical+0x930>
    1204:	mov	w0, #0x1                   	// #1
    1208:	b	10e0 <grub_btrfs_read_logical+0x518>
    120c:	mov	x0, x24
    1210:	bl	0 <grub_zalloc>
    1214:	lsl	x1, x27, #4
    1218:	str	x0, [x25, x1]
    121c:	cbz	x0, 15a0 <grub_btrfs_read_logical+0x9d8>
    1220:	add	x27, x27, #0x1
    1224:	b	11a0 <grub_btrfs_read_logical+0x5d8>
    1228:	ldp	x5, x7, [x27]
    122c:	mov	w1, #0x30c                 	// #780
    1230:	ldr	x0, [sp, #208]
    1234:	ldr	x2, [x20]
    1238:	add	x7, x0, x7
    123c:	adrp	x0, 0 <grub_zstd_free>
    1240:	mov	x4, x7
    1244:	str	x7, [sp, #232]
    1248:	ldr	x3, [x0]
    124c:	ldr	x0, [x23]
    1250:	bl	0 <grub_real_dprintf>
    1254:	ldr	x1, [x27]
    1258:	ldr	x0, [sp, #120]
    125c:	bl	2b0 <find_device>
    1260:	ldr	x7, [sp, #232]
    1264:	cbnz	x0, 1290 <grub_btrfs_read_logical+0x6c8>
    1268:	adrp	x0, 0 <grub_zstd_free>
    126c:	mov	w1, #0x313                 	// #787
    1270:	ldr	x2, [x20]
    1274:	ldr	x3, [x0]
    1278:	ldr	x5, [x27]
    127c:	ldr	x4, [sp, #136]
    1280:	add	x28, x28, #0x1
    1284:	ldr	x0, [x23]
    1288:	bl	0 <grub_real_dprintf>
    128c:	b	12dc <grub_btrfs_read_logical+0x714>
    1290:	ldr	x1, [sp, #160]
    1294:	mov	x3, x24
    1298:	ldr	x0, [x0]
    129c:	and	x2, x7, #0x1ff
    12a0:	ldr	x4, [x1]
    12a4:	lsr	x1, x7, #9
    12a8:	bl	0 <grub_disk_read>
    12ac:	cbnz	w0, 12fc <grub_btrfs_read_logical+0x734>
    12b0:	ldr	x0, [sp, #160]
    12b4:	mov	w1, #0x1                   	// #1
    12b8:	ldr	x5, [x27]
    12bc:	str	w1, [x0, #8]
    12c0:	adrp	x0, 0 <grub_zstd_free>
    12c4:	ldr	x2, [x20]
    12c8:	mov	w1, #0x31f                 	// #799
    12cc:	ldr	x3, [x0]
    12d0:	ldr	x0, [x23]
    12d4:	ldr	x4, [sp, #136]
    12d8:	bl	0 <grub_real_dprintf>
    12dc:	ldr	x0, [sp, #136]
    12e0:	add	x27, x27, #0x20
    12e4:	add	x0, x0, #0x1
    12e8:	str	x0, [sp, #136]
    12ec:	ldr	x0, [sp, #160]
    12f0:	add	x0, x0, #0x10
    12f4:	str	x0, [sp, #160]
    12f8:	b	11b8 <grub_btrfs_read_logical+0x5f0>
    12fc:	adrp	x0, 0 <grub_zstd_free>
    1300:	mov	w1, #0x324                 	// #804
    1304:	ldr	x2, [x20]
    1308:	ldr	x3, [x0]
    130c:	ldr	x5, [x27]
    1310:	ldr	x4, [sp, #136]
    1314:	b	1280 <grub_btrfs_read_logical+0x6b8>
    1318:	cmp	x28, #0x2
    131c:	b.eq	1344 <grub_btrfs_read_logical+0x77c>  // b.none
    1320:	ldr	x0, [sp, #176]
    1324:	tbz	w0, #8, 1344 <grub_btrfs_read_logical+0x77c>
    1328:	adrp	x0, 0 <grub_zstd_free>
    132c:	mov	x5, x28
    1330:	mov	x4, x26
    1334:	mov	w1, #0x335                 	// #821
    1338:	ldr	x3, [x0]
    133c:	ldr	x2, [x20]
    1340:	b	11f0 <grub_btrfs_read_logical+0x628>
    1344:	adrp	x0, 0 <grub_zstd_free>
    1348:	mov	x5, x28
    134c:	ldr	x2, [x20]
    1350:	mov	x4, x26
    1354:	ldr	x3, [x0]
    1358:	mov	w1, #0x33c                 	// #828
    135c:	ldr	x0, [x23]
    1360:	bl	0 <grub_real_dprintf>
    1364:	cbnz	x27, 13dc <grub_btrfs_read_logical+0x814>
    1368:	adrp	x0, 0 <grub_zstd_free>
    136c:	ldr	w2, [sp, #216]
    1370:	ldr	w3, [sp, #224]
    1374:	mov	x6, x24
    1378:	ldr	x4, [sp, #128]
    137c:	mov	x1, x26
    1380:	ldr	x0, [x0]
    1384:	str	x0, [sp]
    1388:	mov	w7, #0x0                   	// #0
    138c:	mov	x0, x25
    1390:	mov	x5, #0x0                   	// #0
    1394:	bl	0 <grub_raid6_recover_gen>
    1398:	b	13d4 <grub_btrfs_read_logical+0x80c>
    139c:	add	x4, x4, #0x1
    13a0:	lsl	x1, x4, #4
    13a4:	ldr	w1, [x0, x1]
    13a8:	cbz	w1, 13b4 <grub_btrfs_read_logical+0x7ec>
    13ac:	cmp	x26, x4
    13b0:	b.hi	139c <grub_btrfs_read_logical+0x7d4>  // b.pmore
    13b4:	cmp	x26, x4
    13b8:	b.ne	13e8 <grub_btrfs_read_logical+0x820>  // b.any
    13bc:	adrp	x0, 0 <grub_zstd_free>
    13c0:	mov	w1, #0x2bb                 	// #699
    13c4:	ldr	x2, [x20]
    13c8:	ldr	x3, [x0]
    13cc:	ldr	x0, [x23]
    13d0:	bl	0 <grub_real_dprintf>
    13d4:	mov	w28, #0x0                   	// #0
    13d8:	b	11fc <grub_btrfs_read_logical+0x634>
    13dc:	add	x0, x25, #0x8
    13e0:	mov	x4, #0x0                   	// #0
    13e4:	b	13a0 <grub_btrfs_read_logical+0x7d8>
    13e8:	adrp	x0, 0 <grub_zstd_free>
    13ec:	mov	w1, #0x2bf                 	// #703
    13f0:	ldr	x2, [x20]
    13f4:	ldr	x3, [x0]
    13f8:	ldr	x0, [x23]
    13fc:	bl	0 <grub_real_dprintf>
    1400:	ldr	x0, [sp, #184]
    1404:	mov	w6, #0x1                   	// #1
    1408:	add	x27, x25, x0
    140c:	ldr	x0, [sp, #144]
    1410:	cmp	x27, x0
    1414:	b.eq	13d4 <grub_btrfs_read_logical+0x80c>  // b.none
    1418:	ldr	x0, [sp, #144]
    141c:	ldr	w0, [x0, #8]
    1420:	cbz	w0, 1440 <grub_btrfs_read_logical+0x878>
    1424:	cbz	w6, 14bc <grub_btrfs_read_logical+0x8f4>
    1428:	ldr	x0, [sp, #144]
    142c:	mov	x2, x24
    1430:	ldr	x1, [x0]
    1434:	ldr	x0, [sp, #128]
    1438:	bl	0 <grub_memmove>
    143c:	mov	w6, #0x0                   	// #0
    1440:	ldr	x0, [sp, #144]
    1444:	add	x0, x0, #0x10
    1448:	str	x0, [sp, #144]
    144c:	b	140c <grub_btrfs_read_logical+0x844>
    1450:	ldrb	w1, [x0]
    1454:	subs	x3, x3, #0x1
    1458:	ldrb	w4, [x2], #1
    145c:	eor	w1, w1, w4
    1460:	strb	w1, [x0], #1
    1464:	b.eq	1440 <grub_btrfs_read_logical+0x878>  // b.none
    1468:	orr	x1, x2, x0
    146c:	ands	x1, x1, #0x7
    1470:	b.ne	1450 <grub_btrfs_read_logical+0x888>  // b.any
    1474:	mov	x4, #0x0                   	// #0
    1478:	sub	x5, x3, x4
    147c:	cmp	x5, #0x7
    1480:	b.hi	14d0 <grub_btrfs_read_logical+0x908>  // b.pmore
    1484:	and	x5, x3, #0xfffffffffffffff8
    1488:	lsr	x4, x3, #3
    148c:	add	x0, x0, x5
    1490:	add	x2, x2, x5
    1494:	mov	x5, #0xfffffffffffffff8    	// #-8
    1498:	madd	x3, x4, x5, x3
    149c:	cmp	x3, x1
    14a0:	b.eq	1440 <grub_btrfs_read_logical+0x878>  // b.none
    14a4:	ldrb	w4, [x0, x1]
    14a8:	ldrb	w5, [x2, x1]
    14ac:	eor	w4, w4, w5
    14b0:	strb	w4, [x0, x1]
    14b4:	add	x1, x1, #0x1
    14b8:	b	149c <grub_btrfs_read_logical+0x8d4>
    14bc:	ldr	x0, [sp, #144]
    14c0:	mov	x3, x24
    14c4:	ldr	x2, [x0]
    14c8:	ldr	x0, [sp, #128]
    14cc:	b	1468 <grub_btrfs_read_logical+0x8a0>
    14d0:	ldr	x5, [x0, x4]
    14d4:	ldr	x7, [x2, x4]
    14d8:	eor	x5, x5, x7
    14dc:	str	x5, [x0, x4]
    14e0:	add	x4, x4, #0x8
    14e4:	b	1478 <grub_btrfs_read_logical+0x8b0>
    14e8:	lsl	x0, x27, #4
    14ec:	add	x27, x27, #0x1
    14f0:	ldr	x0, [x25, x0]
    14f4:	bl	0 <grub_free>
    14f8:	cmp	x26, x27
    14fc:	b.hi	14e8 <grub_btrfs_read_logical+0x920>  // b.pmore
    1500:	mov	x0, x25
    1504:	bl	0 <grub_free>
    1508:	cbnz	w28, 1584 <grub_btrfs_read_logical+0x9bc>
    150c:	ldr	x0, [sp, #152]
    1510:	add	x21, x21, x24
    1514:	sub	x0, x0, x24
    1518:	str	x0, [sp, #152]
    151c:	ldr	x0, [sp, #128]
    1520:	add	x0, x0, x24
    1524:	str	x0, [sp, #128]
    1528:	ldr	w0, [sp, #192]
    152c:	cbz	w0, c00 <grub_btrfs_read_logical+0x38>
    1530:	mov	x0, x19
    1534:	bl	0 <grub_free>
    1538:	b	c00 <grub_btrfs_read_logical+0x38>
    153c:	mov	w28, #0x3                   	// #3
    1540:	b	1500 <grub_btrfs_read_logical+0x938>
    1544:	mov	w25, #0x0                   	// #0
    1548:	ldp	x0, x6, [sp, #120]
    154c:	mov	x5, x24
    1550:	ldp	x2, x3, [sp, #256]
    1554:	mov	w4, w25
    1558:	mov	x1, x19
    155c:	bl	4b0 <btrfs_read_from_chunk>
    1560:	mov	w28, w0
    1564:	cbz	w0, 150c <grub_btrfs_read_logical+0x944>
    1568:	adrp	x0, 0 <grub_zstd_free>
    156c:	add	w25, w25, #0x1
    1570:	ldr	x0, [x0]
    1574:	str	wzr, [x0]
    1578:	ldr	w0, [sp, #168]
    157c:	cmp	w0, w25
    1580:	b.ne	1548 <grub_btrfs_read_logical+0x980>  // b.any
    1584:	ldr	w0, [sp, #196]
    1588:	cmp	w0, #0x1
    158c:	b.ne	1204 <grub_btrfs_read_logical+0x63c>  // b.any
    1590:	adrp	x0, 0 <grub_zstd_free>
    1594:	ldr	x0, [x0]
    1598:	str	w28, [x0]
    159c:	b	d5c <grub_btrfs_read_logical+0x194>
    15a0:	mov	w28, #0x3                   	// #3
    15a4:	b	11fc <grub_btrfs_read_logical+0x634>
	...

0000000000001680 <lower_bound.part.0>:
    1680:	stp	x29, x30, [sp, #-320]!
    1684:	mov	x29, sp
    1688:	stp	x21, x22, [sp, #32]
    168c:	mov	x22, x1
    1690:	add	w21, w7, #0x1
    1694:	stp	x19, x20, [sp, #16]
    1698:	mov	x20, x3
    169c:	mov	x19, x6
    16a0:	stp	x23, x24, [sp, #48]
    16a4:	mov	x23, x2
    16a8:	mov	x24, x5
    16ac:	stp	x25, x26, [sp, #64]
    16b0:	adrp	x25, 0 <grub_zstd_free>
    16b4:	mov	x26, x0
    16b8:	adrp	x0, 0 <grub_zstd_free>
    16bc:	stp	x27, x28, [sp, #80]
    16c0:	adrp	x27, 0 <grub_zstd_free>
    16c4:	ldrb	w5, [x1, #8]
    16c8:	mov	w28, #0xffffffff            	// #-1
    16cc:	ldr	x3, [x0]
    16d0:	str	x4, [sp, #96]
    16d4:	ldr	x2, [x27]
    16d8:	mov	w1, #0x1aa                 	// #426
    16dc:	ldr	x0, [x25]
    16e0:	ldr	x4, [x22]
    16e4:	ldur	x6, [x22, #9]
    16e8:	bl	0 <grub_real_dprintf>
    16ec:	stp	x27, x25, [sp, #112]
    16f0:	mov	w4, w21
    16f4:	mov	x3, #0x65                  	// #101
    16f8:	add	x2, sp, #0xd8
    16fc:	mov	x1, x20
    1700:	mov	x0, x26
    1704:	bl	bc8 <grub_btrfs_read_logical>
    1708:	add	w28, w28, #0x1
    170c:	mov	w25, w0
    1710:	mov	x2, x20
    1714:	add	x1, sp, #0xd8
    1718:	mov	x0, x26
    171c:	bl	3f0 <check_btrfs_header>
    1720:	cbnz	w25, 17e0 <lower_bound.part.0+0x160>
    1724:	ldrb	w0, [sp, #316]
    1728:	add	x27, x20, #0x65
    172c:	cbz	w0, 19a8 <lower_bound.part.0+0x328>
    1730:	add	x0, sp, #0xb0
    1734:	mov	x2, #0x21                  	// #33
    1738:	mov	w1, #0x0                   	// #0
    173c:	bl	0 <grub_memset>
    1740:	str	wzr, [sp, #108]
    1744:	ldr	w0, [sp, #312]
    1748:	cmp	w25, w0
    174c:	b.cs	1804 <lower_bound.part.0+0x184>  // b.hs, b.nlast
    1750:	mov	w0, #0x21                  	// #33
    1754:	mov	w4, w21
    1758:	add	x2, sp, #0x88
    175c:	mov	x3, #0x21                  	// #33
    1760:	umaddl	x1, w25, w0, x27
    1764:	mov	x0, x26
    1768:	bl	bc8 <grub_btrfs_read_logical>
    176c:	cbnz	w0, 17dc <lower_bound.part.0+0x15c>
    1770:	adrp	x0, 0 <grub_zstd_free>
    1774:	ldrb	w6, [sp, #144]
    1778:	ldr	x5, [sp, #136]
    177c:	mov	w4, w28
    1780:	ldr	x3, [x0]
    1784:	mov	w1, #0x1cb                 	// #459
    1788:	ldr	x0, [sp, #112]
    178c:	ldur	x7, [sp, #145]
    1790:	ldr	x2, [x0]
    1794:	ldr	x0, [sp, #120]
    1798:	ldr	x0, [x0]
    179c:	bl	0 <grub_real_dprintf>
    17a0:	mov	x1, x22
    17a4:	add	x0, sp, #0x88
    17a8:	bl	3a0 <key_cmp>
    17ac:	cmp	w0, #0x0
    17b0:	cbnz	w0, 1800 <lower_bound.part.0+0x180>
    17b4:	cbnz	x19, 17c0 <lower_bound.part.0+0x140>
    17b8:	ldur	x20, [sp, #153]
    17bc:	b	16f0 <lower_bound.part.0+0x70>
    17c0:	ldr	w3, [sp, #312]
    17c4:	mov	w2, w25
    17c8:	mov	x1, x20
    17cc:	mov	x0, x19
    17d0:	mov	w4, #0x0                   	// #0
    17d4:	bl	84 <save_ref>
    17d8:	cbz	w0, 17b8 <lower_bound.part.0+0x138>
    17dc:	mov	w25, w0
    17e0:	mov	w0, w25
    17e4:	ldp	x19, x20, [sp, #16]
    17e8:	ldp	x21, x22, [sp, #32]
    17ec:	ldp	x23, x24, [sp, #48]
    17f0:	ldp	x25, x26, [sp, #64]
    17f4:	ldp	x27, x28, [sp, #80]
    17f8:	ldp	x29, x30, [sp], #320
    17fc:	ret
    1800:	b.le	183c <lower_bound.part.0+0x1bc>
    1804:	ldr	w0, [sp, #108]
    1808:	cbnz	w0, 1864 <lower_bound.part.0+0x1e4>
    180c:	ldr	x0, [sp, #96]
    1810:	str	xzr, [x24]
    1814:	mov	x2, #0x11                  	// #17
    1818:	mov	w1, #0x0                   	// #0
    181c:	str	xzr, [x0]
    1820:	mov	x0, x23
    1824:	bl	0 <grub_memset>
    1828:	cbz	x19, 19a0 <lower_bound.part.0+0x320>
    182c:	mov	w4, #0x0                   	// #0
    1830:	ldr	w3, [sp, #312]
    1834:	mov	w2, #0xffffffff            	// #-1
    1838:	b	189c <lower_bound.part.0+0x21c>
    183c:	ldp	x0, x1, [sp, #136]
    1840:	stp	x0, x1, [sp, #176]
    1844:	add	w25, w25, #0x1
    1848:	ldp	x0, x1, [sp, #152]
    184c:	stp	x0, x1, [sp, #192]
    1850:	ldrb	w0, [sp, #168]
    1854:	strb	w0, [sp, #208]
    1858:	mov	w0, #0x1                   	// #1
    185c:	str	w0, [sp, #108]
    1860:	b	1744 <lower_bound.part.0+0xc4>
    1864:	cbnz	x19, 1870 <lower_bound.part.0+0x1f0>
    1868:	ldur	x20, [sp, #193]
    186c:	b	16f0 <lower_bound.part.0+0x70>
    1870:	ldr	w3, [sp, #312]
    1874:	sub	w2, w25, #0x1
    1878:	mov	x1, x20
    187c:	mov	x0, x19
    1880:	mov	w4, #0x0                   	// #0
    1884:	bl	84 <save_ref>
    1888:	cbz	w0, 1868 <lower_bound.part.0+0x1e8>
    188c:	b	17dc <lower_bound.part.0+0x15c>
    1890:	ldr	w3, [sp, #312]
    1894:	mov	w2, w25
    1898:	mov	w4, #0x1                   	// #1
    189c:	mov	x1, x20
    18a0:	mov	x0, x19
    18a4:	bl	84 <save_ref>
    18a8:	b	17dc <lower_bound.part.0+0x15c>
    18ac:	b.le	18e0 <lower_bound.part.0+0x260>
    18b0:	ldr	w0, [sp, #108]
    18b4:	cbnz	w0, 19b4 <lower_bound.part.0+0x334>
    18b8:	ldr	x0, [sp, #96]
    18bc:	str	xzr, [x24]
    18c0:	mov	x2, #0x11                  	// #17
    18c4:	mov	w1, #0x0                   	// #0
    18c8:	str	xzr, [x0]
    18cc:	mov	x0, x23
    18d0:	bl	0 <grub_memset>
    18d4:	cbz	x19, 19a0 <lower_bound.part.0+0x320>
    18d8:	mov	w4, #0x1                   	// #1
    18dc:	b	1830 <lower_bound.part.0+0x1b0>
    18e0:	ldp	x0, x1, [sp, #136]
    18e4:	stp	x0, x1, [sp, #176]
    18e8:	add	w25, w25, #0x1
    18ec:	ldr	x0, [sp, #152]
    18f0:	str	x0, [sp, #192]
    18f4:	ldrb	w0, [sp, #160]
    18f8:	strb	w0, [sp, #200]
    18fc:	mov	w0, #0x1                   	// #1
    1900:	str	w0, [sp, #108]
    1904:	ldr	w0, [sp, #312]
    1908:	cmp	w25, w0
    190c:	b.cs	18b0 <lower_bound.part.0+0x230>  // b.hs, b.nlast
    1910:	mov	w0, #0x19                  	// #25
    1914:	mov	w4, w21
    1918:	add	x2, sp, #0x88
    191c:	mov	x3, #0x19                  	// #25
    1920:	umaddl	x1, w25, w0, x27
    1924:	mov	x0, x26
    1928:	bl	bc8 <grub_btrfs_read_logical>
    192c:	cbnz	w0, 17dc <lower_bound.part.0+0x15c>
    1930:	adrp	x0, 0 <grub_zstd_free>
    1934:	ldrb	w6, [sp, #144]
    1938:	ldr	x5, [sp, #136]
    193c:	mov	w4, w28
    1940:	ldr	x3, [x0]
    1944:	mov	w1, #0x200                 	// #512
    1948:	ldr	x0, [sp, #112]
    194c:	ldur	x7, [sp, #145]
    1950:	ldr	x2, [x0]
    1954:	ldr	x0, [sp, #120]
    1958:	ldr	x0, [x0]
    195c:	bl	0 <grub_real_dprintf>
    1960:	mov	x1, x22
    1964:	add	x0, sp, #0x88
    1968:	bl	3a0 <key_cmp>
    196c:	cmp	w0, #0x0
    1970:	cbnz	w0, 18ac <lower_bound.part.0+0x22c>
    1974:	add	x1, sp, #0x88
    1978:	mov	x0, x23
    197c:	mov	x2, #0x11                  	// #17
    1980:	bl	0 <grub_memmove>
    1984:	ldur	w0, [sp, #157]
    1988:	str	x0, [x24]
    198c:	ldur	w0, [sp, #153]
    1990:	add	x27, x0, x27
    1994:	ldr	x0, [sp, #96]
    1998:	str	x27, [x0]
    199c:	cbnz	x19, 1890 <lower_bound.part.0+0x210>
    19a0:	mov	w0, #0x0                   	// #0
    19a4:	b	17dc <lower_bound.part.0+0x15c>
    19a8:	mov	w25, #0x0                   	// #0
    19ac:	str	wzr, [sp, #108]
    19b0:	b	1904 <lower_bound.part.0+0x284>
    19b4:	add	x1, sp, #0xb0
    19b8:	mov	x0, x23
    19bc:	mov	x2, #0x11                  	// #17
    19c0:	bl	0 <grub_memmove>
    19c4:	ldur	w0, [sp, #197]
    19c8:	str	x0, [x24]
    19cc:	ldur	w0, [sp, #193]
    19d0:	add	x27, x0, x27
    19d4:	ldr	x0, [sp, #96]
    19d8:	str	x27, [x0]
    19dc:	cbz	x19, 19a0 <lower_bound.part.0+0x320>
    19e0:	ldr	w3, [sp, #312]
    19e4:	sub	w2, w25, #0x1
    19e8:	mov	w4, #0x1                   	// #1
    19ec:	b	189c <lower_bound.part.0+0x21c>
	...

0000000000001a18 <grub_btrfs_extent_read>:
    1a18:	stp	x29, x30, [sp, #-176]!
    1a1c:	mov	x29, sp
    1a20:	stp	x19, x20, [sp, #16]
    1a24:	mov	x19, x0
    1a28:	mov	x20, x3
    1a2c:	stp	x21, x22, [sp, #32]
    1a30:	mov	x22, x4
    1a34:	stp	x23, x24, [sp, #48]
    1a38:	mov	x24, x1
    1a3c:	mov	x23, x5
    1a40:	stp	x25, x26, [sp, #64]
    1a44:	mov	x25, x2
    1a48:	stp	x27, x28, [sp, #80]
    1a4c:	str	x3, [sp, #104]
    1a50:	cbnz	x23, 1a60 <grub_btrfs_extent_read+0x48>
    1a54:	ldr	x0, [sp, #104]
    1a58:	sub	x0, x20, x0
    1a5c:	b	1b48 <grub_btrfs_extent_read+0x130>
    1a60:	ldr	x0, [x19, #2936]
    1a64:	cbz	x0, 1a98 <grub_btrfs_extent_read+0x80>
    1a68:	ldr	x1, [x19, #2896]
    1a6c:	cmp	x1, x20
    1a70:	b.hi	1a98 <grub_btrfs_extent_read+0x80>  // b.pmore
    1a74:	ldr	x1, [x19, #2912]
    1a78:	cmp	x1, x24
    1a7c:	b.ne	1a98 <grub_btrfs_extent_read+0x80>  // b.any
    1a80:	ldr	x1, [x19, #2920]
    1a84:	cmp	x1, x25
    1a88:	b.ne	1a98 <grub_btrfs_extent_read+0x80>  // b.any
    1a8c:	ldr	x1, [x19, #2904]
    1a90:	cmp	x1, x20
    1a94:	b.hi	1bf0 <grub_btrfs_extent_read+0x1d8>  // b.pmore
    1a98:	bl	0 <grub_free>
    1a9c:	str	x24, [sp, #128]
    1aa0:	mov	w0, #0x6c                  	// #108
    1aa4:	add	x5, sp, #0x78
    1aa8:	add	x4, sp, #0x70
    1aac:	mov	x3, x25
    1ab0:	add	x2, sp, #0x98
    1ab4:	add	x1, sp, #0x80
    1ab8:	mov	w7, #0x0                   	// #0
    1abc:	mov	x6, #0x0                   	// #0
    1ac0:	strb	w0, [sp, #136]
    1ac4:	mov	x0, x19
    1ac8:	stur	x20, [sp, #137]
    1acc:	bl	1680 <lower_bound.part.0>
    1ad0:	cbnz	w0, 1cb4 <grub_btrfs_extent_read+0x29c>
    1ad4:	ldr	x0, [sp, #152]
    1ad8:	cmp	x0, x24
    1adc:	b.ne	1aec <grub_btrfs_extent_read+0xd4>  // b.any
    1ae0:	ldrb	w0, [sp, #160]
    1ae4:	cmp	w0, #0x6c
    1ae8:	b.eq	1b00 <grub_btrfs_extent_read+0xe8>  // b.none
    1aec:	adrp	x0, 0 <grub_zstd_free>
    1af0:	ldr	x1, [x0]
    1af4:	mov	w0, #0x9                   	// #9
    1af8:	bl	0 <grub_error>
    1afc:	b	1cb4 <grub_btrfs_extent_read+0x29c>
    1b00:	ldr	x0, [sp, #120]
    1b04:	cmp	x0, #0x14
    1b08:	b.gt	1b18 <grub_btrfs_extent_read+0x100>
    1b0c:	adrp	x0, 0 <grub_zstd_free>
    1b10:	ldr	x1, [x0]
    1b14:	b	1af4 <grub_btrfs_extent_read+0xdc>
    1b18:	ldur	x1, [sp, #161]
    1b1c:	str	x1, [x19, #2896]
    1b20:	str	x0, [x19, #2928]
    1b24:	bl	0 <grub_malloc>
    1b28:	str	x24, [x19, #2912]
    1b2c:	str	x25, [x19, #2920]
    1b30:	mov	x2, x0
    1b34:	str	x0, [x19, #2936]
    1b38:	cbnz	x0, 1b64 <grub_btrfs_extent_read+0x14c>
    1b3c:	adrp	x0, 0 <grub_zstd_free>
    1b40:	ldr	x0, [x0]
    1b44:	ldr	w0, [x0]
    1b48:	ldp	x19, x20, [sp, #16]
    1b4c:	ldp	x21, x22, [sp, #32]
    1b50:	ldp	x23, x24, [sp, #48]
    1b54:	ldp	x25, x26, [sp, #64]
    1b58:	ldp	x27, x28, [sp, #80]
    1b5c:	ldp	x29, x30, [sp], #176
    1b60:	ret
    1b64:	ldp	x1, x3, [sp, #112]
    1b68:	mov	x0, x19
    1b6c:	mov	w4, #0x0                   	// #0
    1b70:	bl	bc8 <grub_btrfs_read_logical>
    1b74:	cbz	w0, 1b80 <grub_btrfs_extent_read+0x168>
    1b78:	mov	w0, w0
    1b7c:	b	1b48 <grub_btrfs_extent_read+0x130>
    1b80:	ldr	x0, [x19, #2936]
    1b84:	ldr	x2, [x19, #2896]
    1b88:	ldr	x5, [x0, #8]
    1b8c:	add	x1, x2, x5
    1b90:	str	x1, [x19, #2904]
    1b94:	ldrb	w1, [x0, #20]
    1b98:	cmp	w1, #0x1
    1b9c:	b.ne	1bc0 <grub_btrfs_extent_read+0x1a8>  // b.any
    1ba0:	ldr	x1, [sp, #120]
    1ba4:	add	x3, x0, #0x35
    1ba8:	add	x1, x0, x1
    1bac:	cmp	x1, x3
    1bb0:	b.cc	1bc0 <grub_btrfs_extent_read+0x1a8>  // b.lo, b.ul, b.last
    1bb4:	ldur	x0, [x0, #45]
    1bb8:	add	x0, x0, x2
    1bbc:	str	x0, [x19, #2904]
    1bc0:	adrp	x0, 0 <grub_zstd_free>
    1bc4:	mov	w1, #0x5c1                 	// #1473
    1bc8:	ldur	x4, [sp, #161]
    1bcc:	ldr	x3, [x0]
    1bd0:	adrp	x0, 0 <grub_zstd_free>
    1bd4:	ldr	x2, [x0]
    1bd8:	adrp	x0, 0 <grub_zstd_free>
    1bdc:	ldr	x0, [x0]
    1be0:	bl	0 <grub_real_dprintf>
    1be4:	ldr	x0, [x19, #2904]
    1be8:	cmp	x0, x20
    1bec:	b.ls	1aec <grub_btrfs_extent_read+0xd4>  // b.plast
    1bf0:	ldr	x0, [x19, #2936]
    1bf4:	ldr	x21, [x19, #2904]
    1bf8:	ldrb	w1, [x0, #17]
    1bfc:	ldr	x28, [x19, #2896]
    1c00:	sub	x21, x21, x20
    1c04:	cmp	x23, x21
    1c08:	sub	x28, x20, x28
    1c0c:	csel	x21, x23, x21, ls  // ls = plast
    1c10:	cbz	w1, 1c24 <grub_btrfs_extent_read+0x20c>
    1c14:	adrp	x0, 0 <grub_zstd_free>
    1c18:	ldr	x1, [x0]
    1c1c:	mov	w0, #0x18                  	// #24
    1c20:	b	1af8 <grub_btrfs_extent_read+0xe0>
    1c24:	ldrb	w2, [x0, #16]
    1c28:	cmp	w2, #0x3
    1c2c:	b.ls	1c44 <grub_btrfs_extent_read+0x22c>  // b.plast
    1c30:	adrp	x0, 0 <grub_zstd_free>
    1c34:	ldr	x1, [x0]
    1c38:	mov	w0, #0x18                  	// #24
    1c3c:	bl	0 <grub_error>
    1c40:	b	1cb4 <grub_btrfs_extent_read+0x29c>
    1c44:	ldrh	w1, [x0, #18]
    1c48:	cbz	w1, 1c58 <grub_btrfs_extent_read+0x240>
    1c4c:	adrp	x0, 0 <grub_zstd_free>
    1c50:	ldr	x1, [x0]
    1c54:	b	1c1c <grub_btrfs_extent_read+0x204>
    1c58:	ldrb	w1, [x0, #20]
    1c5c:	cbz	w1, 1c78 <grub_btrfs_extent_read+0x260>
    1c60:	cmp	w1, #0x1
    1c64:	b.eq	1d3c <grub_btrfs_extent_read+0x324>  // b.none
    1c68:	adrp	x0, 0 <grub_zstd_free>
    1c6c:	mov	w2, w1
    1c70:	ldr	x1, [x0]
    1c74:	b	1c38 <grub_btrfs_extent_read+0x220>
    1c78:	add	x0, x0, #0x15
    1c7c:	cmp	w2, #0x1
    1c80:	b.ne	1ccc <grub_btrfs_extent_read+0x2b4>  // b.any
    1c84:	ldr	x1, [x19, #2928]
    1c88:	mov	x4, x21
    1c8c:	mov	x3, x22
    1c90:	mov	x2, x28
    1c94:	sub	x1, x1, #0x15
    1c98:	bl	0 <grub_zlib_decompress>
    1c9c:	cmp	x0, x21
    1ca0:	b.eq	1cf4 <grub_btrfs_extent_read+0x2dc>  // b.none
    1ca4:	adrp	x0, 0 <grub_zstd_free>
    1ca8:	ldr	x0, [x0]
    1cac:	ldr	w0, [x0]
    1cb0:	cbz	w0, 1cbc <grub_btrfs_extent_read+0x2a4>
    1cb4:	mov	x0, #0xffffffffffffffff    	// #-1
    1cb8:	b	1b48 <grub_btrfs_extent_read+0x130>
    1cbc:	adrp	x0, 0 <grub_zstd_free>
    1cc0:	ldr	x1, [x0]
    1cc4:	mov	w0, #0x1a                  	// #26
    1cc8:	b	1af8 <grub_btrfs_extent_read+0xe0>
    1ccc:	cmp	w2, #0x2
    1cd0:	b.ne	1d04 <grub_btrfs_extent_read+0x2ec>  // b.any
    1cd4:	ldr	x1, [x19, #2928]
    1cd8:	mov	x4, x21
    1cdc:	mov	x3, x22
    1ce0:	mov	x2, x28
    1ce4:	sub	x1, x1, #0x15
    1ce8:	bl	620 <grub_btrfs_lzo_decompress>
    1cec:	cmp	x0, x21
    1cf0:	b.ne	1cb4 <grub_btrfs_extent_read+0x29c>  // b.any
    1cf4:	add	x22, x22, x21
    1cf8:	add	x20, x20, x21
    1cfc:	sub	x23, x23, x21
    1d00:	b	1a50 <grub_btrfs_extent_read+0x38>
    1d04:	cmp	w2, #0x3
    1d08:	b.ne	1d28 <grub_btrfs_extent_read+0x310>  // b.any
    1d0c:	ldr	x1, [x19, #2928]
    1d10:	mov	x4, x21
    1d14:	mov	x3, x22
    1d18:	mov	x2, x28
    1d1c:	sub	x1, x1, #0x15
    1d20:	bl	138 <grub_btrfs_zstd_decompress>
    1d24:	b	1cec <grub_btrfs_extent_read+0x2d4>
    1d28:	add	x1, x0, x28
    1d2c:	mov	x2, x21
    1d30:	mov	x0, x22
    1d34:	bl	0 <grub_memmove>
    1d38:	b	1cf4 <grub_btrfs_extent_read+0x2dc>
    1d3c:	ldur	x1, [x0, #21]
    1d40:	cbnz	x1, 1d54 <grub_btrfs_extent_read+0x33c>
    1d44:	mov	x2, x21
    1d48:	mov	x0, x22
    1d4c:	bl	0 <grub_memset>
    1d50:	b	1cf4 <grub_btrfs_extent_read+0x2dc>
    1d54:	cbz	w2, 1e30 <grub_btrfs_extent_read+0x418>
    1d58:	ldur	x26, [x0, #29]
    1d5c:	mov	x0, x26
    1d60:	bl	0 <grub_malloc>
    1d64:	mov	x27, x0
    1d68:	cbz	x0, 1cb4 <grub_btrfs_extent_read+0x29c>
    1d6c:	mov	x2, x0
    1d70:	mov	x3, x26
    1d74:	ldr	x0, [x19, #2936]
    1d78:	mov	w4, #0x0                   	// #0
    1d7c:	ldur	x1, [x0, #21]
    1d80:	mov	x0, x19
    1d84:	bl	bc8 <grub_btrfs_read_logical>
    1d88:	cbz	w0, 1d98 <grub_btrfs_extent_read+0x380>
    1d8c:	mov	x0, x27
    1d90:	bl	0 <grub_free>
    1d94:	b	1cb4 <grub_btrfs_extent_read+0x29c>
    1d98:	ldr	x0, [x19, #2936]
    1d9c:	ldrb	w1, [x0, #16]
    1da0:	cmp	w1, #0x1
    1da4:	b.ne	1dd8 <grub_btrfs_extent_read+0x3c0>  // b.any
    1da8:	ldur	x2, [x0, #37]
    1dac:	mov	x4, x21
    1db0:	mov	x3, x22
    1db4:	mov	x1, x26
    1db8:	add	x2, x28, x2
    1dbc:	mov	x0, x27
    1dc0:	bl	0 <grub_zlib_decompress>
    1dc4:	mov	x28, x0
    1dc8:	mov	x0, x27
    1dcc:	bl	0 <grub_free>
    1dd0:	cmp	x21, x28
    1dd4:	b	1ca0 <grub_btrfs_extent_read+0x288>
    1dd8:	cmp	w1, #0x2
    1ddc:	b.ne	1e00 <grub_btrfs_extent_read+0x3e8>  // b.any
    1de0:	ldur	x2, [x0, #37]
    1de4:	mov	x4, x21
    1de8:	mov	x3, x22
    1dec:	mov	x1, x26
    1df0:	add	x2, x28, x2
    1df4:	mov	x0, x27
    1df8:	bl	620 <grub_btrfs_lzo_decompress>
    1dfc:	b	1dc4 <grub_btrfs_extent_read+0x3ac>
    1e00:	cmp	w1, #0x3
    1e04:	b.ne	1e28 <grub_btrfs_extent_read+0x410>  // b.any
    1e08:	ldur	x2, [x0, #37]
    1e0c:	mov	x4, x21
    1e10:	mov	x3, x22
    1e14:	mov	x1, x26
    1e18:	add	x2, x28, x2
    1e1c:	mov	x0, x27
    1e20:	bl	138 <grub_btrfs_zstd_decompress>
    1e24:	b	1dc4 <grub_btrfs_extent_read+0x3ac>
    1e28:	mov	x28, #0xffffffffffffffff    	// #-1
    1e2c:	b	1dc8 <grub_btrfs_extent_read+0x3b0>
    1e30:	ldur	x0, [x0, #37]
    1e34:	mov	x3, x21
    1e38:	mov	x2, x22
    1e3c:	mov	w4, #0x0                   	// #0
    1e40:	add	x1, x1, x0
    1e44:	mov	x0, x19
    1e48:	add	x1, x1, x28
    1e4c:	bl	bc8 <grub_btrfs_read_logical>
    1e50:	cbz	w0, 1cf4 <grub_btrfs_extent_read+0x2dc>
    1e54:	b	1cb4 <grub_btrfs_extent_read+0x29c>
	...

0000000000001eb0 <grub_btrfs_read>:
    1eb0:	mov	x3, x0
    1eb4:	mov	x5, x2
    1eb8:	ldr	x0, [x0, #80]
    1ebc:	mov	x4, x1
    1ec0:	ldr	x3, [x3, #24]
    1ec4:	ldr	x2, [x0, #2864]
    1ec8:	ldr	x1, [x0, #2872]
    1ecc:	b	1a18 <grub_btrfs_extent_read>

0000000000001ed0 <get_root>:
    1ed0:	stp	x29, x30, [sp, #-304]!
    1ed4:	mov	w7, #0x0                   	// #0
    1ed8:	mov	x6, #0x0                   	// #0
    1edc:	mov	x29, sp
    1ee0:	stp	x21, x22, [sp, #32]
    1ee4:	mov	x21, x3
    1ee8:	mov	x22, x2
    1eec:	ldr	x3, [x0, #80]
    1ef0:	stp	x19, x20, [sp, #16]
    1ef4:	mov	x19, x1
    1ef8:	mov	x1, #0x5                   	// #5
    1efc:	str	x1, [sp, #88]
    1f00:	mov	w1, #0xffffff84            	// #-124
    1f04:	mov	x20, x0
    1f08:	add	x5, sp, #0x38
    1f0c:	add	x4, sp, #0x30
    1f10:	add	x2, sp, #0x40
    1f14:	strb	w1, [sp, #96]
    1f18:	add	x1, sp, #0x58
    1f1c:	stur	xzr, [sp, #97]
    1f20:	bl	1680 <lower_bound.part.0>
    1f24:	cbnz	w0, 1f68 <get_root+0x98>
    1f28:	ldr	x0, [sp, #64]
    1f2c:	ldr	x1, [sp, #88]
    1f30:	cmp	x1, x0
    1f34:	b.ne	1f58 <get_root+0x88>  // b.any
    1f38:	ldrb	w1, [sp, #96]
    1f3c:	ldrb	w0, [sp, #72]
    1f40:	cmp	w1, w0
    1f44:	b.ne	1f58 <get_root+0x88>  // b.any
    1f48:	ldur	x0, [sp, #73]
    1f4c:	ldur	x1, [sp, #97]
    1f50:	cmp	x1, x0
    1f54:	b.eq	1f78 <get_root+0xa8>  // b.none
    1f58:	adrp	x0, 0 <grub_zstd_free>
    1f5c:	ldr	x1, [x0]
    1f60:	mov	w0, #0x9                   	// #9
    1f64:	bl	0 <grub_error>
    1f68:	ldp	x19, x20, [sp, #16]
    1f6c:	ldp	x21, x22, [sp, #32]
    1f70:	ldp	x29, x30, [sp], #304
    1f74:	ret
    1f78:	ldr	x1, [sp, #48]
    1f7c:	add	x2, sp, #0x70
    1f80:	mov	x0, x20
    1f84:	mov	w4, #0x0                   	// #0
    1f88:	mov	x3, #0xc0                  	// #192
    1f8c:	bl	bc8 <grub_btrfs_read_logical>
    1f90:	cbnz	w0, 1f68 <get_root+0x98>
    1f94:	mov	w1, #0x54                  	// #84
    1f98:	strb	w1, [x19, #8]
    1f9c:	mov	x1, #0x100                 	// #256
    1fa0:	str	x1, [x19]
    1fa4:	stur	xzr, [x19, #9]
    1fa8:	ldr	x1, [sp, #288]
    1fac:	str	x1, [x22]
    1fb0:	mov	w1, #0x2                   	// #2
    1fb4:	strb	w1, [x21]
    1fb8:	b	1f68 <get_root+0x98>
    1fbc:	nop
	...

0000000000001fc8 <grub_btrfs_read_inode>:
    1fc8:	stp	x29, x30, [sp, #-112]!
    1fcc:	mov	w7, #0x0                   	// #0
    1fd0:	mov	x6, #0x0                   	// #0
    1fd4:	mov	x29, sp
    1fd8:	str	x21, [sp, #32]
    1fdc:	mov	x21, x1
    1fe0:	mov	w1, #0x1                   	// #1
    1fe4:	add	x5, sp, #0x38
    1fe8:	add	x4, sp, #0x30
    1fec:	stp	x19, x20, [sp, #16]
    1ff0:	mov	x19, x2
    1ff4:	mov	x20, x0
    1ff8:	str	x2, [sp, #64]
    1ffc:	add	x2, sp, #0x58
    2000:	strb	w1, [sp, #72]
    2004:	add	x1, sp, #0x40
    2008:	stur	xzr, [sp, #73]
    200c:	bl	1680 <lower_bound.part.0>
    2010:	cbnz	w0, 203c <grub_btrfs_read_inode+0x74>
    2014:	ldr	x0, [sp, #88]
    2018:	cmp	x0, x19
    201c:	b.ne	202c <grub_btrfs_read_inode+0x64>  // b.any
    2020:	ldrb	w0, [sp, #96]
    2024:	cmp	w0, #0x1
    2028:	b.eq	204c <grub_btrfs_read_inode+0x84>  // b.none
    202c:	adrp	x0, 0 <grub_zstd_free>
    2030:	ldr	x1, [x0]
    2034:	mov	w0, #0x9                   	// #9
    2038:	bl	0 <grub_error>
    203c:	ldp	x19, x20, [sp, #16]
    2040:	ldr	x21, [sp, #32]
    2044:	ldp	x29, x30, [sp], #112
    2048:	ret
    204c:	ldr	x1, [sp, #48]
    2050:	mov	x2, x21
    2054:	mov	x0, x20
    2058:	mov	w4, #0x0                   	// #0
    205c:	mov	x3, #0x94                  	// #148
    2060:	bl	bc8 <grub_btrfs_read_logical>
    2064:	b	203c <grub_btrfs_read_inode+0x74>
	...

0000000000002070 <next>:
    2070:	stp	x29, x30, [sp, #-224]!
    2074:	mov	x29, sp
    2078:	stp	x19, x20, [sp, #16]
    207c:	mov	x20, x4
    2080:	stp	x21, x22, [sp, #32]
    2084:	mov	x21, x2
    2088:	mov	x22, x3
    208c:	stp	x23, x24, [sp, #48]
    2090:	mov	x24, x1
    2094:	mov	w3, #0x18                  	// #24
    2098:	stp	x25, x26, [sp, #64]
    209c:	mov	x26, x0
    20a0:	ldr	w0, [x24]
    20a4:	cbnz	w0, 20c0 <next+0x50>
    20a8:	ldp	x19, x20, [sp, #16]
    20ac:	ldp	x21, x22, [sp, #32]
    20b0:	ldp	x23, x24, [sp, #48]
    20b4:	ldp	x25, x26, [sp, #64]
    20b8:	ldp	x29, x30, [sp], #224
    20bc:	ret
    20c0:	ldr	x1, [x24, #8]
    20c4:	sub	w0, w0, #0x1
    20c8:	umaddl	x1, w0, w3, x1
    20cc:	ldr	w2, [x1, #8]
    20d0:	add	w2, w2, #0x1
    20d4:	str	w2, [x1, #8]
    20d8:	ldr	w1, [x1, #12]
    20dc:	cmp	w2, w1
    20e0:	b.cs	2178 <next+0x108>  // b.hs, b.nlast
    20e4:	mov	w23, #0x18                  	// #24
    20e8:	mov	w25, #0x21                  	// #33
    20ec:	ldr	w0, [x24]
    20f0:	mov	w4, #0x0                   	// #0
    20f4:	ldr	x3, [x24, #8]
    20f8:	sub	w0, w0, #0x1
    20fc:	umull	x0, w0, w23
    2100:	add	x2, x3, x0
    2104:	ldr	x0, [x3, x0]
    2108:	ldr	w1, [x2, #8]
    210c:	ldr	w2, [x2, #16]
    2110:	add	x0, x0, #0x65
    2114:	cbz	w2, 2180 <next+0x110>
    2118:	mov	w5, #0x19                  	// #25
    211c:	add	x2, sp, #0x78
    2120:	mov	x3, #0x19                  	// #25
    2124:	umaddl	x1, w1, w5, x0
    2128:	mov	x0, x26
    212c:	bl	bc8 <grub_btrfs_read_logical>
    2130:	cbnz	w0, 2198 <next+0x128>
    2134:	ldur	w0, [sp, #141]
    2138:	ldr	x2, [x24, #8]
    213c:	str	x0, [x22]
    2140:	ldr	w0, [x24]
    2144:	sub	w0, w0, #0x1
    2148:	umull	x23, w0, w23
    214c:	ldur	w0, [sp, #137]
    2150:	add	x1, x0, #0x65
    2154:	ldr	x0, [x2, x23]
    2158:	add	x0, x0, x1
    215c:	str	x0, [x21]
    2160:	ldp	x0, x1, [sp, #120]
    2164:	stp	x0, x1, [x20]
    2168:	ldrb	w0, [sp, #136]
    216c:	strb	w0, [x20, #16]
    2170:	mov	w0, #0x1                   	// #1
    2174:	b	20a8 <next+0x38>
    2178:	str	w0, [x24]
    217c:	b	20a0 <next+0x30>
    2180:	umaddl	x1, w1, w25, x0
    2184:	add	x2, sp, #0x50
    2188:	mov	x0, x26
    218c:	mov	x3, #0x21                  	// #33
    2190:	bl	bc8 <grub_btrfs_read_logical>
    2194:	cbz	w0, 21a0 <next+0x130>
    2198:	neg	w0, w0
    219c:	b	20a8 <next+0x38>
    21a0:	ldur	x1, [sp, #97]
    21a4:	add	x2, sp, #0x78
    21a8:	mov	x0, x26
    21ac:	mov	w4, #0x0                   	// #0
    21b0:	mov	x3, #0x65                  	// #101
    21b4:	bl	bc8 <grub_btrfs_read_logical>
    21b8:	mov	w19, w0
    21bc:	ldur	x2, [sp, #97]
    21c0:	add	x1, sp, #0x78
    21c4:	mov	x0, x26
    21c8:	bl	3f0 <check_btrfs_header>
    21cc:	cbz	w19, 21d8 <next+0x168>
    21d0:	neg	w0, w19
    21d4:	b	20a8 <next+0x38>
    21d8:	ldrb	w0, [sp, #220]
    21dc:	mov	w2, #0x0                   	// #0
    21e0:	ldr	w3, [sp, #216]
    21e4:	ldur	x1, [sp, #97]
    21e8:	cmp	w0, #0x0
    21ec:	cset	w4, eq  // eq = none
    21f0:	mov	x0, x24
    21f4:	bl	84 <save_ref>
    21f8:	b	20ec <next+0x7c>

00000000000021fc <find_path.part.0>:
    21fc:	stp	x29, x30, [sp, #-368]!
    2200:	mov	x29, sp
    2204:	stp	x19, x20, [sp, #16]
    2208:	stp	x21, x22, [sp, #32]
    220c:	mov	x21, x2
    2210:	stp	x23, x24, [sp, #48]
    2214:	mov	x23, x0
    2218:	mov	x24, x3
    221c:	mov	x0, x1
    2220:	stp	x25, x26, [sp, #64]
    2224:	mov	x26, x1
    2228:	stp	x27, x28, [sp, #80]
    222c:	str	x4, [sp, #96]
    2230:	bl	0 <grub_strdup>
    2234:	cbnz	x0, 22dc <find_path.part.0+0xe0>
    2238:	adrp	x0, 0 <grub_zstd_free>
    223c:	ldr	x0, [x0]
    2240:	ldr	w27, [x0]
    2244:	mov	w0, w27
    2248:	ldp	x19, x20, [sp, #16]
    224c:	ldp	x21, x22, [sp, #32]
    2250:	ldp	x23, x24, [sp, #48]
    2254:	ldp	x25, x26, [sp, #64]
    2258:	ldp	x27, x28, [sp, #80]
    225c:	ldp	x29, x30, [sp], #368
    2260:	ret
    2264:	add	x22, x26, #0x1
    2268:	mov	x26, x22
    226c:	ldrb	w0, [x26]
    2270:	cmp	w0, #0x2f
    2274:	b.eq	2264 <find_path.part.0+0x68>  // b.none
    2278:	cbz	w0, 2754 <find_path.part.0+0x558>
    227c:	mov	x0, x26
    2280:	mov	w1, #0x2f                  	// #47
    2284:	bl	0 <grub_strchr>
    2288:	mov	x22, x0
    228c:	cbnz	x0, 229c <find_path.part.0+0xa0>
    2290:	mov	x0, x26
    2294:	bl	0 <grub_strlen>
    2298:	add	x22, x26, x0
    229c:	sub	x0, x22, x26
    22a0:	str	x0, [sp, #104]
    22a4:	ldr	x0, [sp, #96]
    22a8:	ldrb	w25, [x0]
    22ac:	cmp	w25, #0x2
    22b0:	b.eq	22f8 <find_path.part.0+0xfc>  // b.none
    22b4:	mov	x0, x20
    22b8:	bl	0 <grub_free>
    22bc:	mov	x0, x19
    22c0:	bl	0 <grub_free>
    22c4:	adrp	x0, 0 <grub_zstd_free>
    22c8:	ldr	x1, [x0]
    22cc:	mov	w0, #0x4                   	// #4
    22d0:	bl	0 <grub_error>
    22d4:	mov	w27, w0
    22d8:	b	2244 <find_path.part.0+0x48>
    22dc:	mov	x19, x0
    22e0:	mov	x20, #0x0                   	// #0
    22e4:	mov	w0, #0x20                  	// #32
    22e8:	mov	x28, #0x0                   	// #0
    22ec:	str	xzr, [sp, #112]
    22f0:	str	w0, [sp, #124]
    22f4:	b	226c <find_path.part.0+0x70>
    22f8:	sub	x0, x22, x26
    22fc:	cmp	x0, #0x1
    2300:	b.ne	23b8 <find_path.part.0+0x1bc>  // b.any
    2304:	ldrb	w0, [x26]
    2308:	cmp	w0, #0x2e
    230c:	b.eq	2268 <find_path.part.0+0x6c>  // b.none
    2310:	ldr	w2, [sp, #104]
    2314:	mov	w0, #0x54                  	// #84
    2318:	strb	w0, [x21, #8]
    231c:	mov	x1, x26
    2320:	mov	w0, #0x1                   	// #1
    2324:	bl	2c00 <grub_getcrc32c>
    2328:	mvn	w0, w0
    232c:	mov	w0, w0
    2330:	stur	x0, [x21, #9]
    2334:	add	x5, sp, #0x90
    2338:	add	x4, sp, #0x88
    233c:	ldr	x3, [x24]
    2340:	add	x2, sp, #0x98
    2344:	mov	x1, x21
    2348:	mov	x0, x23
    234c:	mov	w7, #0x0                   	// #0
    2350:	mov	x6, #0x0                   	// #0
    2354:	bl	1680 <lower_bound.part.0>
    2358:	mov	w27, w0
    235c:	cbnz	w0, 2418 <find_path.part.0+0x21c>
    2360:	add	x1, sp, #0x98
    2364:	mov	x0, x21
    2368:	bl	3a0 <key_cmp>
    236c:	cbnz	w0, 2454 <find_path.part.0+0x258>
    2370:	ldr	x1, [sp, #112]
    2374:	ldr	x0, [sp, #144]
    2378:	cmp	x0, x1
    237c:	b.ls	2494 <find_path.part.0+0x298>  // b.plast
    2380:	lsl	x0, x0, #1
    2384:	str	x0, [sp, #112]
    2388:	mov	x0, x28
    238c:	bl	0 <grub_free>
    2390:	ldr	x0, [sp, #112]
    2394:	add	x0, x0, #0x1
    2398:	bl	0 <grub_malloc>
    239c:	mov	x28, x0
    23a0:	cbnz	x0, 2494 <find_path.part.0+0x298>
    23a4:	mov	x0, x20
    23a8:	bl	0 <grub_free>
    23ac:	mov	x0, x19
    23b0:	bl	0 <grub_free>
    23b4:	b	2238 <find_path.part.0+0x3c>
    23b8:	sub	x0, x22, x26
    23bc:	cmp	x0, #0x2
    23c0:	b.ne	2310 <find_path.part.0+0x114>  // b.any
    23c4:	ldrb	w0, [x26]
    23c8:	cmp	w0, #0x2e
    23cc:	b.ne	2310 <find_path.part.0+0x114>  // b.any
    23d0:	ldrb	w0, [x26, #1]
    23d4:	cmp	w0, #0x2e
    23d8:	b.ne	2310 <find_path.part.0+0x114>  // b.any
    23dc:	mov	w0, #0xc                   	// #12
    23e0:	strb	w0, [x21, #8]
    23e4:	mov	x0, #0xffffffffffffffff    	// #-1
    23e8:	stur	x0, [x21, #9]
    23ec:	add	x5, sp, #0x90
    23f0:	add	x4, sp, #0x88
    23f4:	ldr	x3, [x24]
    23f8:	add	x2, sp, #0x98
    23fc:	mov	x1, x21
    2400:	mov	x0, x23
    2404:	mov	w7, #0x0                   	// #0
    2408:	mov	x6, #0x0                   	// #0
    240c:	bl	1680 <lower_bound.part.0>
    2410:	mov	w27, w0
    2414:	cbz	w0, 2434 <find_path.part.0+0x238>
    2418:	mov	x0, x28
    241c:	bl	0 <grub_free>
    2420:	mov	x0, x20
    2424:	bl	0 <grub_free>
    2428:	mov	x0, x19
    242c:	bl	0 <grub_free>
    2430:	b	2244 <find_path.part.0+0x48>
    2434:	ldrb	w1, [sp, #160]
    2438:	ldrb	w0, [x21, #8]
    243c:	cmp	w1, w0
    2440:	b.ne	2454 <find_path.part.0+0x258>  // b.any
    2444:	ldr	x1, [x21]
    2448:	ldr	x0, [sp, #152]
    244c:	cmp	x1, x0
    2450:	b.eq	2480 <find_path.part.0+0x284>  // b.none
    2454:	mov	x0, x28
    2458:	bl	0 <grub_free>
    245c:	mov	x0, x20
    2460:	bl	0 <grub_free>
    2464:	adrp	x0, 0 <grub_zstd_free>
    2468:	mov	x2, x19
    246c:	ldr	x1, [x0]
    2470:	mov	w0, #0x5                   	// #5
    2474:	bl	0 <grub_error>
    2478:	mov	w27, w0
    247c:	b	2428 <find_path.part.0+0x22c>
    2480:	ldr	x0, [sp, #96]
    2484:	strb	w25, [x0]
    2488:	ldur	x0, [sp, #161]
    248c:	str	x0, [x21]
    2490:	b	2268 <find_path.part.0+0x6c>
    2494:	ldp	x1, x3, [sp, #136]
    2498:	mov	x2, x28
    249c:	mov	x0, x23
    24a0:	mov	w4, #0x0                   	// #0
    24a4:	bl	bc8 <grub_btrfs_read_logical>
    24a8:	mov	w27, w0
    24ac:	cbnz	w0, 2418 <find_path.part.0+0x21c>
    24b0:	mov	x25, x28
    24b4:	b	24dc <find_path.part.0+0x2e0>
    24b8:	ldr	x1, [sp, #104]
    24bc:	ldurh	w0, [x25, #27]
    24c0:	cmp	x1, x0
    24c4:	b.eq	24f0 <find_path.part.0+0x2f4>  // b.none
    24c8:	ldurh	w0, [x25, #27]
    24cc:	ldurh	w9, [x25, #25]
    24d0:	add	x9, x0, x9
    24d4:	add	x9, x9, #0x1e
    24d8:	add	x25, x28, x9
    24dc:	ldr	x0, [sp, #144]
    24e0:	sub	x27, x25, x28
    24e4:	cmp	x27, x0
    24e8:	b.lt	24b8 <find_path.part.0+0x2bc>  // b.tstop
    24ec:	b	2454 <find_path.part.0+0x258>
    24f0:	ldr	x2, [sp, #104]
    24f4:	mov	x1, x26
    24f8:	add	x0, x25, #0x1e
    24fc:	bl	0 <grub_memcmp>
    2500:	cbnz	w0, 24c8 <find_path.part.0+0x2cc>
    2504:	ldr	x0, [sp, #144]
    2508:	cmp	x27, x0
    250c:	b.ge	2454 <find_path.part.0+0x258>  // b.tcont
    2510:	ldrb	w0, [x25, #29]
    2514:	cmp	w0, #0x7
    2518:	b.ne	2640 <find_path.part.0+0x444>  // b.any
    251c:	ldr	w0, [sp, #124]
    2520:	subs	w0, w0, #0x1
    2524:	str	w0, [sp, #124]
    2528:	b.ne	2554 <find_path.part.0+0x358>  // b.any
    252c:	mov	x0, x28
    2530:	bl	0 <grub_free>
    2534:	mov	x0, x20
    2538:	bl	0 <grub_free>
    253c:	mov	x0, x19
    2540:	bl	0 <grub_free>
    2544:	adrp	x0, 0 <grub_zstd_free>
    2548:	ldr	x1, [x0]
    254c:	mov	w0, #0x19                  	// #25
    2550:	b	22d0 <find_path.part.0+0xd4>
    2554:	ldr	x3, [x24]
    2558:	add	x1, sp, #0xb0
    255c:	ldr	x2, [x25]
    2560:	mov	x0, x23
    2564:	bl	1fc8 <grub_btrfs_read_inode>
    2568:	mov	w27, w0
    256c:	cbnz	w0, 2418 <find_path.part.0+0x21c>
    2570:	ldr	x26, [sp, #192]
    2574:	mov	x0, x22
    2578:	bl	0 <grub_strlen>
    257c:	add	x26, x26, #0x1
    2580:	add	x0, x26, x0
    2584:	bl	0 <grub_malloc>
    2588:	mov	x26, x0
    258c:	cbnz	x0, 259c <find_path.part.0+0x3a0>
    2590:	mov	x0, x28
    2594:	bl	0 <grub_free>
    2598:	b	23a4 <find_path.part.0+0x1a8>
    259c:	ldr	x1, [x25]
    25a0:	mov	x4, x0
    25a4:	ldr	x2, [x24]
    25a8:	mov	x0, x23
    25ac:	ldr	x5, [sp, #192]
    25b0:	mov	x3, #0x0                   	// #0
    25b4:	bl	1a18 <grub_btrfs_extent_read>
    25b8:	ldr	x1, [sp, #192]
    25bc:	cmp	x0, x1
    25c0:	b.eq	25e4 <find_path.part.0+0x3e8>  // b.none
    25c4:	mov	x0, x28
    25c8:	bl	0 <grub_free>
    25cc:	mov	x0, x20
    25d0:	bl	0 <grub_free>
    25d4:	mov	x0, x19
    25d8:	bl	0 <grub_free>
    25dc:	mov	x0, x26
    25e0:	b	23b0 <find_path.part.0+0x1b4>
    25e4:	add	x25, x26, x0
    25e8:	mov	x0, x22
    25ec:	bl	0 <grub_strlen>
    25f0:	add	x2, x0, #0x1
    25f4:	mov	x1, x22
    25f8:	mov	x0, x25
    25fc:	bl	0 <grub_memmove>
    2600:	mov	x0, x20
    2604:	bl	0 <grub_free>
    2608:	ldrb	w0, [x26]
    260c:	cmp	w0, #0x2f
    2610:	b.eq	2620 <find_path.part.0+0x424>  // b.none
    2614:	mov	x20, x26
    2618:	mov	x22, x26
    261c:	b	2268 <find_path.part.0+0x6c>
    2620:	ldr	x3, [sp, #96]
    2624:	mov	x2, x24
    2628:	mov	x1, x21
    262c:	mov	x0, x23
    2630:	bl	1ed0 <get_root>
    2634:	mov	w27, w0
    2638:	cbnz	w0, 2244 <find_path.part.0+0x48>
    263c:	b	2614 <find_path.part.0+0x418>
    2640:	ldr	x1, [sp, #96]
    2644:	strb	w0, [x1]
    2648:	ldrb	w1, [x25, #8]
    264c:	cmp	w1, #0x1
    2650:	b.eq	26e8 <find_path.part.0+0x4ec>  // b.none
    2654:	cmp	w1, #0x84
    2658:	b.ne	2724 <find_path.part.0+0x528>  // b.any
    265c:	ldr	x3, [x23, #80]
    2660:	add	x5, sp, #0x90
    2664:	add	x4, sp, #0x88
    2668:	add	x2, sp, #0x98
    266c:	mov	x1, x25
    2670:	mov	x0, x23
    2674:	mov	w7, #0x0                   	// #0
    2678:	mov	x6, #0x0                   	// #0
    267c:	bl	1680 <lower_bound.part.0>
    2680:	mov	w27, w0
    2684:	cbnz	w0, 2418 <find_path.part.0+0x21c>
    2688:	ldr	x1, [x25]
    268c:	ldr	x0, [sp, #152]
    2690:	cmp	x1, x0
    2694:	b.ne	2454 <find_path.part.0+0x258>  // b.any
    2698:	ldrb	w1, [x25, #8]
    269c:	ldrb	w0, [sp, #160]
    26a0:	cmp	w1, w0
    26a4:	b.ne	2454 <find_path.part.0+0x258>  // b.any
    26a8:	ldr	x1, [sp, #136]
    26ac:	add	x2, sp, #0xb0
    26b0:	mov	x0, x23
    26b4:	mov	w4, #0x0                   	// #0
    26b8:	mov	x3, #0xc0                  	// #192
    26bc:	bl	bc8 <grub_btrfs_read_logical>
    26c0:	mov	w27, w0
    26c4:	cbnz	w0, 2418 <find_path.part.0+0x21c>
    26c8:	mov	w0, #0x54                  	// #84
    26cc:	strb	w0, [x21, #8]
    26d0:	mov	x0, #0x100                 	// #256
    26d4:	str	x0, [x21]
    26d8:	stur	xzr, [x21, #9]
    26dc:	ldr	x0, [sp, #352]
    26e0:	str	x0, [x24]
    26e4:	b	2268 <find_path.part.0+0x6c>
    26e8:	ldrb	w1, [x22]
    26ec:	cbz	w1, 26f8 <find_path.part.0+0x4fc>
    26f0:	cmp	w0, #0x1
    26f4:	b.eq	2454 <find_path.part.0+0x258>  // b.none
    26f8:	ldp	x0, x1, [x25]
    26fc:	stp	x0, x1, [x21]
    2700:	ldrb	w0, [x25, #16]
    2704:	strb	w0, [x21, #16]
    2708:	ldr	x0, [sp, #96]
    270c:	ldrb	w0, [x0]
    2710:	cmp	w0, #0x2
    2714:	b.ne	2268 <find_path.part.0+0x6c>  // b.any
    2718:	mov	w0, #0x54                  	// #84
    271c:	strb	w0, [x21, #8]
    2720:	b	2268 <find_path.part.0+0x6c>
    2724:	mov	x0, x20
    2728:	bl	0 <grub_free>
    272c:	mov	x0, x19
    2730:	bl	0 <grub_free>
    2734:	mov	x0, x28
    2738:	bl	0 <grub_free>
    273c:	adrp	x0, 0 <grub_zstd_free>
    2740:	ldrb	w2, [x25, #8]
    2744:	ldr	x1, [x0]
    2748:	mov	w0, #0x9                   	// #9
    274c:	bl	0 <grub_error>
    2750:	b	22d4 <find_path.part.0+0xd8>
    2754:	mov	x0, x28
    2758:	bl	0 <grub_free>
    275c:	mov	x0, x19
    2760:	bl	0 <grub_free>
    2764:	mov	x0, x20
    2768:	mov	w27, #0x0                   	// #0
    276c:	bl	0 <grub_free>
    2770:	b	2244 <find_path.part.0+0x48>
    2774:	nop
	...

00000000000027a0 <grub_btrfs_open>:
    27a0:	stp	x29, x30, [sp, #-256]!
    27a4:	mov	x29, sp
    27a8:	stp	x21, x22, [sp, #32]
    27ac:	mov	x21, x0
    27b0:	mov	x22, x1
    27b4:	ldr	x0, [x0, #8]
    27b8:	stp	x19, x20, [sp, #16]
    27bc:	str	x23, [sp, #48]
    27c0:	bl	900 <grub_btrfs_mount>
    27c4:	cbnz	x0, 27ec <grub_btrfs_open+0x4c>
    27c8:	adrp	x0, 0 <grub_zstd_free>
    27cc:	ldr	x0, [x0]
    27d0:	ldr	w19, [x0]
    27d4:	mov	w0, w19
    27d8:	ldp	x19, x20, [sp, #16]
    27dc:	ldp	x21, x22, [sp, #32]
    27e0:	ldr	x23, [sp, #48]
    27e4:	ldp	x29, x30, [sp], #256
    27e8:	ret
    27ec:	add	x23, x0, #0xb30
    27f0:	mov	x20, x0
    27f4:	add	x3, sp, #0x4f
    27f8:	mov	x2, x23
    27fc:	add	x1, sp, #0x50
    2800:	bl	1ed0 <get_root>
    2804:	mov	w19, w0
    2808:	cbnz	w0, 282c <grub_btrfs_open+0x8c>
    280c:	add	x4, sp, #0x4f
    2810:	mov	x3, x23
    2814:	add	x2, sp, #0x50
    2818:	mov	x1, x22
    281c:	mov	x0, x20
    2820:	bl	21fc <find_path.part.0>
    2824:	mov	w19, w0
    2828:	cbz	w0, 2838 <grub_btrfs_open+0x98>
    282c:	mov	x0, x20
    2830:	bl	10 <grub_btrfs_unmount>
    2834:	b	27d4 <grub_btrfs_open+0x34>
    2838:	ldrb	w0, [sp, #79]
    283c:	cmp	w0, #0x1
    2840:	b.eq	2864 <grub_btrfs_open+0xc4>  // b.none
    2844:	mov	x0, x20
    2848:	bl	10 <grub_btrfs_unmount>
    284c:	adrp	x0, 0 <grub_zstd_free>
    2850:	ldr	x1, [x0]
    2854:	mov	w0, #0x4                   	// #4
    2858:	bl	0 <grub_error>
    285c:	mov	w19, w0
    2860:	b	27d4 <grub_btrfs_open+0x34>
    2864:	ldr	x2, [sp, #80]
    2868:	str	x2, [x20, #2872]
    286c:	ldr	x3, [x20, #2864]
    2870:	add	x1, sp, #0x68
    2874:	mov	x0, x20
    2878:	bl	1fc8 <grub_btrfs_read_inode>
    287c:	mov	w19, w0
    2880:	cbnz	w0, 282c <grub_btrfs_open+0x8c>
    2884:	ldr	x0, [sp, #120]
    2888:	str	x0, [x21, #64]
    288c:	str	x20, [x21, #80]
    2890:	b	27d4 <grub_btrfs_open+0x34>
    2894:	nop
	...

00000000000028a8 <grub_btrfs_dir>:
    28a8:	stp	x29, x30, [sp, #-368]!
    28ac:	mov	x29, sp
    28b0:	stp	x19, x20, [sp, #16]
    28b4:	stp	x21, x22, [sp, #32]
    28b8:	mov	x21, x1
    28bc:	stp	x23, x24, [sp, #48]
    28c0:	mov	x23, x2
    28c4:	mov	x24, x3
    28c8:	stp	x25, x26, [sp, #64]
    28cc:	str	x27, [sp, #80]
    28d0:	bl	900 <grub_btrfs_mount>
    28d4:	cbnz	x0, 2904 <grub_btrfs_dir+0x5c>
    28d8:	adrp	x0, 0 <grub_zstd_free>
    28dc:	ldr	x0, [x0]
    28e0:	ldr	w19, [x0]
    28e4:	mov	w0, w19
    28e8:	ldp	x19, x20, [sp, #16]
    28ec:	ldp	x21, x22, [sp, #32]
    28f0:	ldp	x23, x24, [sp, #48]
    28f4:	ldp	x25, x26, [sp, #64]
    28f8:	ldr	x27, [sp, #80]
    28fc:	ldp	x29, x30, [sp], #368
    2900:	ret
    2904:	mov	x20, x0
    2908:	add	x3, sp, #0x6f
    290c:	add	x2, sp, #0x80
    2910:	add	x1, sp, #0xa8
    2914:	bl	1ed0 <get_root>
    2918:	mov	w19, w0
    291c:	cbnz	w0, 2940 <grub_btrfs_dir+0x98>
    2920:	add	x4, sp, #0x6f
    2924:	add	x3, sp, #0x80
    2928:	add	x2, sp, #0xa8
    292c:	mov	x1, x21
    2930:	mov	x0, x20
    2934:	bl	21fc <find_path.part.0>
    2938:	mov	w19, w0
    293c:	cbz	w0, 294c <grub_btrfs_dir+0xa4>
    2940:	mov	x0, x20
    2944:	bl	10 <grub_btrfs_unmount>
    2948:	b	28e4 <grub_btrfs_dir+0x3c>
    294c:	ldrb	w0, [sp, #111]
    2950:	cmp	w0, #0x2
    2954:	b.eq	2978 <grub_btrfs_dir+0xd0>  // b.none
    2958:	mov	x0, x20
    295c:	bl	10 <grub_btrfs_unmount>
    2960:	adrp	x0, 0 <grub_zstd_free>
    2964:	ldr	x1, [x0]
    2968:	mov	w0, #0x4                   	// #4
    296c:	bl	0 <grub_error>
    2970:	mov	w19, w0
    2974:	b	28e4 <grub_btrfs_dir+0x3c>
    2978:	mov	x0, #0x1000000000          	// #68719476736
    297c:	str	x0, [sp, #136]
    2980:	mov	x0, #0x180                 	// #384
    2984:	ldr	x19, [sp, #128]
    2988:	bl	0 <grub_malloc>
    298c:	str	x0, [sp, #144]
    2990:	cbnz	x0, 29ec <grub_btrfs_dir+0x144>
    2994:	adrp	x0, 0 <grub_zstd_free>
    2998:	ldr	x0, [x0]
    299c:	ldr	w19, [x0]
    29a0:	cbnz	w19, 2940 <grub_btrfs_dir+0x98>
    29a4:	ldrb	w0, [sp, #200]
    29a8:	cmp	w0, #0x54
    29ac:	b.ne	29c0 <grub_btrfs_dir+0x118>  // b.any
    29b0:	ldr	x0, [sp, #168]
    29b4:	ldr	x1, [sp, #192]
    29b8:	cmp	x1, x0
    29bc:	b.eq	2a18 <grub_btrfs_dir+0x170>  // b.none
    29c0:	add	x4, sp, #0xc0
    29c4:	add	x3, sp, #0x78
    29c8:	add	x2, sp, #0x70
    29cc:	add	x1, sp, #0x88
    29d0:	mov	x0, x20
    29d4:	bl	2070 <next>
    29d8:	mov	w19, w0
    29dc:	cmp	w0, #0x0
    29e0:	b.gt	2a1c <grub_btrfs_dir+0x174>
    29e4:	mov	x21, #0x0                   	// #0
    29e8:	b	2a78 <grub_btrfs_dir+0x1d0>
    29ec:	mov	x3, x19
    29f0:	add	x6, sp, #0x88
    29f4:	add	x5, sp, #0x78
    29f8:	add	x4, sp, #0x70
    29fc:	add	x2, sp, #0xc0
    2a00:	add	x1, sp, #0xa8
    2a04:	mov	x0, x20
    2a08:	mov	w7, #0x0                   	// #0
    2a0c:	bl	1680 <lower_bound.part.0>
    2a10:	mov	w19, w0
    2a14:	b	29a0 <grub_btrfs_dir+0xf8>
    2a18:	mov	w19, #0x0                   	// #0
    2a1c:	mov	x21, #0x0                   	// #0
    2a20:	mov	x25, #0x0                   	// #0
    2a24:	ldrb	w0, [sp, #200]
    2a28:	cmp	w0, #0x54
    2a2c:	b.ne	2ba4 <grub_btrfs_dir+0x2fc>  // b.any
    2a30:	ldr	x0, [sp, #168]
    2a34:	ldr	x1, [sp, #192]
    2a38:	cmp	x1, x0
    2a3c:	b.ne	2ba4 <grub_btrfs_dir+0x2fc>  // b.any
    2a40:	ldr	x0, [sp, #120]
    2a44:	cmp	x0, x25
    2a48:	b.ls	2a98 <grub_btrfs_dir+0x1f0>  // b.plast
    2a4c:	lsl	x25, x0, #1
    2a50:	mov	x0, x21
    2a54:	bl	0 <grub_free>
    2a58:	add	x0, x25, #0x1
    2a5c:	bl	0 <grub_malloc>
    2a60:	mov	x21, x0
    2a64:	cbnz	x0, 2a98 <grub_btrfs_dir+0x1f0>
    2a68:	adrp	x0, 0 <grub_zstd_free>
    2a6c:	ldr	x0, [x0]
    2a70:	ldr	w19, [x0]
    2a74:	neg	w19, w19
    2a78:	mov	x0, x21
    2a7c:	bl	0 <grub_free>
    2a80:	ldr	x0, [sp, #144]
    2a84:	neg	w19, w19
    2a88:	bl	0 <grub_free>
    2a8c:	mov	x0, x20
    2a90:	bl	10 <grub_btrfs_unmount>
    2a94:	b	28e4 <grub_btrfs_dir+0x3c>
    2a98:	ldp	x1, x3, [sp, #112]
    2a9c:	mov	x2, x21
    2aa0:	mov	x0, x20
    2aa4:	mov	w4, #0x0                   	// #0
    2aa8:	bl	bc8 <grub_btrfs_read_logical>
    2aac:	cbz	w0, 2b98 <grub_btrfs_dir+0x2f0>
    2ab0:	neg	w19, w0
    2ab4:	b	2a78 <grub_btrfs_dir+0x1d0>
    2ab8:	ldr	x2, [x22]
    2abc:	add	x1, sp, #0xd8
    2ac0:	ldr	x3, [sp, #128]
    2ac4:	mov	x0, x20
    2ac8:	bl	1fc8 <grub_btrfs_read_inode>
    2acc:	mov	w27, w0
    2ad0:	mov	x2, #0x10                  	// #16
    2ad4:	add	x0, sp, #0x98
    2ad8:	mov	w1, #0x0                   	// #0
    2adc:	bl	0 <grub_memset>
    2ae0:	cbz	w27, 2b80 <grub_btrfs_dir+0x2d8>
    2ae4:	ldr	x0, [x26]
    2ae8:	str	wzr, [x0]
    2aec:	ldurh	w0, [x22, #27]
    2af0:	mov	x2, x24
    2af4:	add	x0, x22, x0
    2af8:	ldrb	w27, [x0, #30]
    2afc:	strb	wzr, [x0, #30]
    2b00:	ldrb	w0, [x22, #29]
    2b04:	cmp	w0, #0x2
    2b08:	ldrb	w0, [sp, #152]
    2b0c:	cset	w1, eq  // eq = none
    2b10:	bfxil	w0, w1, #0, #1
    2b14:	strb	w0, [sp, #152]
    2b18:	add	x1, sp, #0x98
    2b1c:	add	x0, x22, #0x1e
    2b20:	blr	x23
    2b24:	cbnz	w0, 2a78 <grub_btrfs_dir+0x1d0>
    2b28:	ldurh	w1, [x22, #27]
    2b2c:	ldurh	w0, [x22, #27]
    2b30:	add	x1, x22, x1
    2b34:	strb	w27, [x1, #30]
    2b38:	ldurh	w22, [x22, #25]
    2b3c:	add	x22, x22, w0, uxth
    2b40:	add	x22, x22, #0x1e
    2b44:	add	x22, x21, x22
    2b48:	ldr	x1, [sp, #120]
    2b4c:	sub	x0, x22, x21
    2b50:	cmp	x0, x1
    2b54:	b.lt	2ab8 <grub_btrfs_dir+0x210>  // b.tstop
    2b58:	add	x4, sp, #0xc0
    2b5c:	add	x3, sp, #0x78
    2b60:	add	x2, sp, #0x70
    2b64:	add	x1, sp, #0x88
    2b68:	mov	x0, x20
    2b6c:	bl	2070 <next>
    2b70:	mov	w19, w0
    2b74:	cmp	w0, #0x0
    2b78:	b.gt	2a24 <grub_btrfs_dir+0x17c>
    2b7c:	b	2a78 <grub_btrfs_dir+0x1d0>
    2b80:	ldr	x0, [sp, #352]
    2b84:	str	w0, [sp, #156]
    2b88:	ldrb	w0, [sp, #152]
    2b8c:	orr	w0, w0, #0x2
    2b90:	strb	w0, [sp, #152]
    2b94:	b	2aec <grub_btrfs_dir+0x244>
    2b98:	mov	x22, x21
    2b9c:	adrp	x26, 0 <grub_zstd_free>
    2ba0:	b	2b48 <grub_btrfs_dir+0x2a0>
    2ba4:	mov	w19, #0x0                   	// #0
    2ba8:	b	2a78 <grub_btrfs_dir+0x1d0>
    2bac:	nop
	...

0000000000002bc0 <grub_mod_init>:
    2bc0:	adrp	x0, 0 <grub_zstd_free>
    2bc4:	ldr	x1, [x0]
    2bc8:	adrp	x0, 0 <grub_zstd_free>
    2bcc:	ldr	x0, [x0]
    2bd0:	b	0 <grub_list_push>
    2bd4:	nop
	...

0000000000002be8 <grub_mod_fini>:
    2be8:	adrp	x0, 0 <grub_zstd_free>
    2bec:	ldr	x0, [x0]
    2bf0:	b	0 <grub_list_remove>
    2bf4:	nop
	...

0000000000002c00 <grub_getcrc32c>:
    2c00:	adrp	x3, 0 <grub_zstd_free>
    2c04:	ldr	x7, [x3]
    2c08:	ldr	w3, [x7, #4]
    2c0c:	cbz	w3, 2c28 <grub_getcrc32c+0x28>
    2c10:	mvn	w0, w0
    2c14:	mov	x4, #0x0                   	// #0
    2c18:	cmp	w2, w4
    2c1c:	b.gt	2cb4 <grub_getcrc32c+0xb4>
    2c20:	mvn	w0, w0
    2c24:	ret
    2c28:	mov	w10, #0x6f41                	// #28481
    2c2c:	mov	x8, x7
    2c30:	mov	w5, #0x0                   	// #0
    2c34:	mov	w9, #0x1                   	// #1
    2c38:	movk	w10, #0x1edc, lsl #16
    2c3c:	mov	w6, w5
    2c40:	mov	w3, #0x0                   	// #0
    2c44:	mov	w4, #0x7                   	// #7
    2c48:	tbz	w6, #0, 2c54 <grub_getcrc32c+0x54>
    2c4c:	lsl	w11, w9, w4
    2c50:	orr	w3, w3, w11
    2c54:	sub	w4, w4, #0x1
    2c58:	lsr	w6, w6, #1
    2c5c:	cmn	w4, #0x1
    2c60:	b.ne	2c48 <grub_getcrc32c+0x48>  // b.any
    2c64:	lsl	w3, w3, #24
    2c68:	mov	w4, #0x8                   	// #8
    2c6c:	cmp	w3, #0x0
    2c70:	csel	w6, w10, wzr, lt  // lt = tstop
    2c74:	subs	w4, w4, #0x1
    2c78:	eor	w3, w6, w3, lsl #1
    2c7c:	b.ne	2c6c <grub_getcrc32c+0x6c>  // b.any
    2c80:	mov	w6, #0x1f                  	// #31
    2c84:	tbz	w3, #0, 2c90 <grub_getcrc32c+0x90>
    2c88:	lsl	w11, w9, w6
    2c8c:	orr	w4, w4, w11
    2c90:	sub	w6, w6, #0x1
    2c94:	lsr	w3, w3, #1
    2c98:	cmn	w6, #0x1
    2c9c:	b.ne	2c84 <grub_getcrc32c+0x84>  // b.any
    2ca0:	str	w4, [x8], #4
    2ca4:	add	w5, w5, #0x1
    2ca8:	cmp	w5, #0x100
    2cac:	b.ne	2c3c <grub_getcrc32c+0x3c>  // b.any
    2cb0:	b	2c10 <grub_getcrc32c+0x10>
    2cb4:	ldrb	w3, [x1, x4]
    2cb8:	add	x4, x4, #0x1
    2cbc:	eor	x3, x0, x3
    2cc0:	and	x3, x3, #0xff
    2cc4:	ldr	w3, [x7, x3, lsl #2]
    2cc8:	eor	w0, w3, w0, lsr #8
    2ccc:	b	2c18 <grub_getcrc32c+0x18>
	...
