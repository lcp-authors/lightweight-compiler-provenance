In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_clang_-O2:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x0, 0 <setup_et_lock>
   8:	add	x0, x0, #0x0
   c:	mov	w2, #0x1                   	// #1
  10:	mov	w1, wzr
  14:	str	x19, [sp, #16]
  18:	mov	x29, sp
  1c:	mov	w19, #0x1                   	// #1
  20:	bl	0 <sem_init>
  24:	adrp	x8, 0 <setup_et_lock>
  28:	strb	w19, [x8]
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret

0000000000000038 <fini_et_lock>:
  38:	stp	x29, x30, [sp, #-16]!
  3c:	adrp	x0, 0 <setup_et_lock>
  40:	add	x0, x0, #0x0
  44:	mov	x29, sp
  48:	bl	0 <sem_destroy>
  4c:	adrp	x8, 0 <setup_et_lock>
  50:	strb	wzr, [x8]
  54:	ldp	x29, x30, [sp], #16
  58:	ret

000000000000005c <et_list_lock>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	stp	x20, x19, [sp, #16]
  64:	adrp	x19, 0 <setup_et_lock>
  68:	ldrb	w8, [x19]
  6c:	mov	x29, sp
  70:	tbnz	w8, #0, 90 <et_list_lock+0x34>
  74:	adrp	x0, 0 <setup_et_lock>
  78:	add	x0, x0, #0x0
  7c:	mov	w2, #0x1                   	// #1
  80:	mov	w1, wzr
  84:	mov	w20, #0x1                   	// #1
  88:	bl	0 <sem_init>
  8c:	strb	w20, [x19]
  90:	ldp	x20, x19, [sp, #16]
  94:	adrp	x0, 0 <setup_et_lock>
  98:	add	x0, x0, #0x0
  9c:	ldp	x29, x30, [sp], #32
  a0:	b	0 <sem_wait>

00000000000000a4 <et_list_unlock>:
  a4:	adrp	x8, 0 <setup_et_lock>
  a8:	ldrb	w8, [x8]
  ac:	cmp	w8, #0x1
  b0:	b.ne	c0 <et_list_unlock+0x1c>  // b.any
  b4:	adrp	x0, 0 <setup_et_lock>
  b8:	add	x0, x0, #0x0
  bc:	b	0 <sem_post>
  c0:	mov	w0, wzr
  c4:	ret

00000000000000c8 <set_com_err_gettext>:
  c8:	adrp	x9, 0 <setup_et_lock>
  cc:	ldr	x8, [x9]
  d0:	str	x0, [x9]
  d4:	mov	x0, x8
  d8:	ret

00000000000000dc <error_message>:
  dc:	stp	x29, x30, [sp, #-64]!
  e0:	stp	x20, x19, [sp, #48]
  e4:	and	w19, w0, #0xff
  e8:	str	x23, [sp, #16]
  ec:	stp	x22, x21, [sp, #32]
  f0:	subs	x20, x0, x19
  f4:	mrs	x22, tpidr_el0
  f8:	mov	x29, sp
  fc:	b.eq	160 <error_message+0x84>  // b.none
 100:	adrp	x21, 0 <setup_et_lock>
 104:	ldrb	w8, [x21]
 108:	tbnz	w8, #0, 128 <error_message+0x4c>
 10c:	adrp	x0, 0 <setup_et_lock>
 110:	add	x0, x0, #0x0
 114:	mov	w2, #0x1                   	// #1
 118:	mov	w1, wzr
 11c:	mov	w23, #0x1                   	// #1
 120:	bl	0 <sem_init>
 124:	strb	w23, [x21]
 128:	adrp	x0, 0 <setup_et_lock>
 12c:	add	x0, x0, #0x0
 130:	bl	0 <sem_wait>
 134:	adrp	x8, 0 <setup_et_lock>
 138:	ldr	x8, [x8]
 13c:	cbz	x8, 1a0 <error_message+0xc4>
 140:	ldr	x9, [x8, #8]
 144:	ldr	w10, [x9, #8]
 148:	eor	w10, w10, w20
 14c:	tst	x10, #0xffffff
 150:	b.eq	194 <error_message+0xb8>  // b.none
 154:	ldr	x8, [x8]
 158:	cbnz	x8, 140 <error_message+0x64>
 15c:	b	1a0 <error_message+0xc4>
 160:	mov	w0, w19
 164:	bl	0 <strerror>
 168:	mov	x20, x0
 16c:	cbnz	x0, 2fc <error_message+0x220>
 170:	adrp	x8, 0 <setup_et_lock>
 174:	add	x8, x8, #0x0
 178:	ldr	x9, [x8]
 17c:	ldur	x8, [x8, #6]
 180:	add	x10, x22, #0x0, lsl #12
 184:	add	x10, x10, #0x0
 188:	str	x9, [x10]
 18c:	stur	x8, [x10, #6]
 190:	b	274 <error_message+0x198>
 194:	ldr	w8, [x9, #16]
 198:	cmp	w8, w19
 19c:	b.gt	1d8 <error_message+0xfc>
 1a0:	adrp	x8, 8 <setup_et_lock+0x8>
 1a4:	ldr	x8, [x8]
 1a8:	cbz	x8, 21c <error_message+0x140>
 1ac:	ldr	x9, [x8, #8]
 1b0:	ldr	w10, [x9, #8]
 1b4:	eor	w10, w10, w20
 1b8:	tst	x10, #0xffffff
 1bc:	b.eq	1cc <error_message+0xf0>  // b.none
 1c0:	ldr	x8, [x8]
 1c4:	cbnz	x8, 1ac <error_message+0xd0>
 1c8:	b	21c <error_message+0x140>
 1cc:	ldr	w8, [x9, #16]
 1d0:	cmp	w8, w19
 1d4:	b.le	21c <error_message+0x140>
 1d8:	ldr	x8, [x9]
 1dc:	ldrb	w9, [x21]
 1e0:	ldr	x20, [x8, x19, lsl #3]
 1e4:	cmp	w9, #0x1
 1e8:	b.ne	1f8 <error_message+0x11c>  // b.any
 1ec:	adrp	x0, 0 <setup_et_lock>
 1f0:	add	x0, x0, #0x0
 1f4:	bl	0 <sem_post>
 1f8:	adrp	x8, 0 <setup_et_lock>
 1fc:	ldr	x1, [x8]
 200:	cbz	x1, 2fc <error_message+0x220>
 204:	mov	x0, x20
 208:	ldp	x20, x19, [sp, #48]
 20c:	ldp	x22, x21, [sp, #32]
 210:	ldr	x23, [sp, #16]
 214:	ldp	x29, x30, [sp], #64
 218:	br	x1
 21c:	ldrb	w8, [x21]
 220:	cmp	w8, #0x1
 224:	b.ne	234 <error_message+0x158>  // b.any
 228:	adrp	x0, 0 <setup_et_lock>
 22c:	add	x0, x0, #0x0
 230:	bl	0 <sem_post>
 234:	adrp	x8, 0 <setup_et_lock>
 238:	add	x8, x8, #0x0
 23c:	ldr	x9, [x8]
 240:	ldur	x8, [x8, #6]
 244:	add	x10, x22, #0x0, lsl #12
 248:	add	x21, x10, #0x0
 24c:	mov	x0, x20
 250:	str	x9, [x21]
 254:	stur	x8, [x21, #6]
 258:	bl	0 <error_table_name>
 25c:	mov	x1, x0
 260:	mov	x0, x21
 264:	bl	0 <strcat>
 268:	bl	0 <strlen>
 26c:	mov	w8, #0x20                  	// #32
 270:	strh	w8, [x21, x0]
 274:	add	x8, x22, #0x0, lsl #12
 278:	add	x9, x8, #0x0
 27c:	ldrb	w8, [x9], #1
 280:	cbnz	w8, 27c <error_message+0x1a0>
 284:	cmp	w19, #0x64
 288:	sub	x8, x9, #0x1
 28c:	b.cc	2b8 <error_message+0x1dc>  // b.lo, b.ul, b.last
 290:	mov	w10, #0x851f                	// #34079
 294:	movk	w10, #0x51eb, lsl #16
 298:	umull	x10, w19, w10
 29c:	lsr	x10, x10, #37
 2a0:	mov	w11, #0x64                  	// #100
 2a4:	orr	w12, w10, #0x30
 2a8:	strb	w12, [x8]
 2ac:	msub	w19, w10, w11, w19
 2b0:	mov	x8, x9
 2b4:	b	2c0 <error_message+0x1e4>
 2b8:	cmp	w19, #0xa
 2bc:	b.cc	2e8 <error_message+0x20c>  // b.lo, b.ul, b.last
 2c0:	mov	w10, #0xcccd                	// #52429
 2c4:	and	w9, w19, #0xff
 2c8:	movk	w10, #0xcccc, lsl #16
 2cc:	umull	x9, w9, w10
 2d0:	mov	w11, #0xa                   	// #10
 2d4:	lsr	x9, x9, #35
 2d8:	add	w10, w9, #0x30
 2dc:	msub	w9, w9, w11, w19
 2e0:	strb	w10, [x8], #1
 2e4:	and	w19, w9, #0xff
 2e8:	add	x10, x22, #0x0, lsl #12
 2ec:	add	w9, w19, #0x30
 2f0:	add	x20, x10, #0x0
 2f4:	strb	wzr, [x8, #1]
 2f8:	strb	w9, [x8]
 2fc:	mov	x0, x20
 300:	ldp	x20, x19, [sp, #48]
 304:	ldp	x22, x21, [sp, #32]
 308:	ldr	x23, [sp, #16]
 30c:	ldp	x29, x30, [sp], #64
 310:	ret

0000000000000314 <add_error_table>:
 314:	stp	x29, x30, [sp, #-48]!
 318:	stp	x20, x19, [sp, #32]
 31c:	mov	x19, x0
 320:	mov	w0, #0x10                  	// #16
 324:	stp	x22, x21, [sp, #16]
 328:	mov	x29, sp
 32c:	bl	0 <malloc>
 330:	cbz	x0, 384 <add_error_table+0x70>
 334:	adrp	x21, 0 <setup_et_lock>
 338:	ldrb	w8, [x21]
 33c:	mov	x20, x0
 340:	tbnz	w8, #0, 360 <add_error_table+0x4c>
 344:	adrp	x0, 0 <setup_et_lock>
 348:	add	x0, x0, #0x0
 34c:	mov	w2, #0x1                   	// #1
 350:	mov	w1, wzr
 354:	mov	w22, #0x1                   	// #1
 358:	bl	0 <sem_init>
 35c:	strb	w22, [x21]
 360:	adrp	x0, 0 <setup_et_lock>
 364:	add	x0, x0, #0x0
 368:	bl	0 <sem_wait>
 36c:	cbz	w0, 38c <add_error_table+0x78>
 370:	mov	x0, x20
 374:	bl	0 <free>
 378:	bl	0 <__errno_location>
 37c:	ldrsw	x0, [x0]
 380:	b	3f0 <add_error_table+0xdc>
 384:	mov	w0, #0xc                   	// #12
 388:	b	3f0 <add_error_table+0xdc>
 38c:	adrp	x8, 8 <setup_et_lock+0x8>
 390:	ldr	x9, [x8]
 394:	str	x20, [x8]
 398:	stp	x9, x19, [x20]
 39c:	bl	400 <init_debug>
 3a0:	adrp	x8, 0 <setup_et_lock>
 3a4:	ldrb	w8, [x8]
 3a8:	tbz	w8, #0, 3d4 <add_error_table+0xc0>
 3ac:	adrp	x8, 0 <setup_et_lock>
 3b0:	ldr	x0, [x19, #8]
 3b4:	ldr	x20, [x8]
 3b8:	bl	0 <error_table_name>
 3bc:	adrp	x1, 0 <setup_et_lock>
 3c0:	mov	x2, x0
 3c4:	add	x1, x1, #0x0
 3c8:	mov	x0, x20
 3cc:	mov	x3, x19
 3d0:	bl	0 <fprintf>
 3d4:	ldrb	w8, [x21]
 3d8:	cmp	w8, #0x1
 3dc:	b.ne	3ec <add_error_table+0xd8>  // b.any
 3e0:	adrp	x0, 0 <setup_et_lock>
 3e4:	add	x0, x0, #0x0
 3e8:	bl	0 <sem_post>
 3ec:	mov	x0, xzr
 3f0:	ldp	x20, x19, [sp, #32]
 3f4:	ldp	x22, x21, [sp, #16]
 3f8:	ldp	x29, x30, [sp], #48
 3fc:	ret

0000000000000400 <init_debug>:
 400:	stp	x29, x30, [sp, #-48]!
 404:	stp	x20, x19, [sp, #32]
 408:	adrp	x20, 0 <setup_et_lock>
 40c:	ldr	w19, [x20]
 410:	str	x21, [sp, #16]
 414:	mov	x29, sp
 418:	tbnz	w19, #15, 55c <init_debug+0x15c>
 41c:	adrp	x0, 0 <setup_et_lock>
 420:	add	x0, x0, #0x0
 424:	bl	0 <getenv>
 428:	cbz	x0, 458 <init_debug+0x58>
 42c:	add	x1, x29, #0x18
 430:	mov	w2, wzr
 434:	bl	0 <strtoul>
 438:	ldr	x8, [x29, #24]
 43c:	mov	x19, x0
 440:	str	w19, [x20]
 444:	ldrb	w8, [x8]
 448:	cbnz	w8, 554 <init_debug+0x154>
 44c:	bl	0 <__errno_location>
 450:	ldr	w8, [x0]
 454:	cbnz	w8, 554 <init_debug+0x154>
 458:	orr	w8, w19, #0x8000
 45c:	cmp	w8, #0x8, lsl #12
 460:	str	w8, [x20]
 464:	b.eq	55c <init_debug+0x15c>  // b.none
 468:	bl	0 <getuid>
 46c:	mov	w19, w0
 470:	bl	0 <geteuid>
 474:	cmp	w19, w0
 478:	adrp	x21, 0 <setup_et_lock>
 47c:	b.ne	4d4 <init_debug+0xd4>  // b.any
 480:	bl	0 <getgid>
 484:	mov	w19, w0
 488:	bl	0 <getegid>
 48c:	cmp	w19, w0
 490:	b.ne	4d4 <init_debug+0xd4>  // b.any
 494:	mov	w0, #0x3                   	// #3
 498:	mov	w1, wzr
 49c:	mov	w2, wzr
 4a0:	mov	w3, wzr
 4a4:	mov	w4, wzr
 4a8:	bl	0 <prctl>
 4ac:	cbz	w0, 4d4 <init_debug+0xd4>
 4b0:	adrp	x0, 0 <setup_et_lock>
 4b4:	add	x0, x0, #0x0
 4b8:	bl	0 <secure_getenv>
 4bc:	cbz	x0, 4d4 <init_debug+0xd4>
 4c0:	adrp	x1, 0 <setup_et_lock>
 4c4:	add	x1, x1, #0x0
 4c8:	bl	0 <fopen>
 4cc:	str	x0, [x21]
 4d0:	b	4d8 <init_debug+0xd8>
 4d4:	ldr	x0, [x21]
 4d8:	cbnz	x0, 4f8 <init_debug+0xf8>
 4dc:	adrp	x0, 0 <setup_et_lock>
 4e0:	adrp	x1, 0 <setup_et_lock>
 4e4:	add	x0, x0, #0x0
 4e8:	add	x1, x1, #0x0
 4ec:	bl	0 <fopen>
 4f0:	str	x0, [x21]
 4f4:	cbz	x0, 554 <init_debug+0x154>
 4f8:	bl	0 <fileno>
 4fc:	tbnz	w0, #31, 55c <init_debug+0x15c>
 500:	mov	w1, #0x1                   	// #1
 504:	mov	w19, w0
 508:	bl	0 <fcntl>
 50c:	tbnz	w0, #31, 524 <init_debug+0x124>
 510:	orr	w2, w0, #0x1
 514:	mov	w1, #0x2                   	// #2
 518:	mov	w0, w19
 51c:	bl	0 <fcntl>
 520:	tbz	w0, #31, 55c <init_debug+0x15c>
 524:	ldr	x19, [x21]
 528:	bl	0 <__errno_location>
 52c:	ldr	w0, [x0]
 530:	bl	0 <strerror>
 534:	adrp	x1, 0 <setup_et_lock>
 538:	mov	x2, x0
 53c:	add	x1, x1, #0x0
 540:	mov	x0, x19
 544:	bl	0 <fprintf>
 548:	ldr	x0, [x21]
 54c:	bl	0 <fclose>
 550:	str	xzr, [x21]
 554:	mov	w8, #0x8000                	// #32768
 558:	str	w8, [x20]
 55c:	ldp	x20, x19, [sp, #32]
 560:	ldr	x21, [sp, #16]
 564:	ldp	x29, x30, [sp], #48
 568:	ret

000000000000056c <remove_error_table>:
 56c:	stp	x29, x30, [sp, #-48]!
 570:	str	x21, [sp, #16]
 574:	adrp	x21, 0 <setup_et_lock>
 578:	ldrb	w8, [x21]
 57c:	stp	x20, x19, [sp, #32]
 580:	mov	x19, x0
 584:	mov	x29, sp
 588:	tbnz	w8, #0, 5a8 <remove_error_table+0x3c>
 58c:	adrp	x0, 0 <setup_et_lock>
 590:	add	x0, x0, #0x0
 594:	mov	w2, #0x1                   	// #1
 598:	mov	w1, wzr
 59c:	mov	w20, #0x1                   	// #1
 5a0:	bl	0 <sem_init>
 5a4:	strb	w20, [x21]
 5a8:	adrp	x0, 0 <setup_et_lock>
 5ac:	add	x0, x0, #0x0
 5b0:	bl	0 <sem_wait>
 5b4:	cbz	w0, 5cc <remove_error_table+0x60>
 5b8:	mov	w0, #0x2                   	// #2
 5bc:	ldp	x20, x19, [sp, #32]
 5c0:	ldr	x21, [sp, #16]
 5c4:	ldp	x29, x30, [sp], #48
 5c8:	ret
 5cc:	adrp	x8, 8 <setup_et_lock+0x8>
 5d0:	ldr	x20, [x8]
 5d4:	bl	400 <init_debug>
 5d8:	cbz	x20, 690 <remove_error_table+0x124>
 5dc:	ldr	x9, [x20, #8]
 5e0:	ldr	x8, [x19, #8]
 5e4:	ldr	x9, [x9, #8]
 5e8:	cmp	x9, x8
 5ec:	b.ne	5f8 <remove_error_table+0x8c>  // b.any
 5f0:	mov	x10, xzr
 5f4:	b	61c <remove_error_table+0xb0>
 5f8:	mov	x9, x20
 5fc:	ldr	x20, [x9]
 600:	cbz	x20, 690 <remove_error_table+0x124>
 604:	ldr	x10, [x20, #8]
 608:	ldr	x10, [x10, #8]
 60c:	cmp	x10, x8
 610:	mov	x10, x9
 614:	mov	x9, x20
 618:	b.ne	5fc <remove_error_table+0x90>  // b.any
 61c:	ldr	x8, [x20]
 620:	adrp	x9, 8 <setup_et_lock+0x8>
 624:	add	x9, x9, #0x0
 628:	cmp	x10, #0x0
 62c:	csel	x9, x9, x10, eq  // eq = none
 630:	mov	x0, x20
 634:	str	x8, [x9]
 638:	bl	0 <free>
 63c:	adrp	x8, 0 <setup_et_lock>
 640:	ldrb	w8, [x8]
 644:	tbz	w8, #0, 670 <remove_error_table+0x104>
 648:	adrp	x8, 0 <setup_et_lock>
 64c:	ldr	x0, [x19, #8]
 650:	ldr	x20, [x8]
 654:	bl	0 <error_table_name>
 658:	adrp	x1, 0 <setup_et_lock>
 65c:	mov	x2, x0
 660:	add	x1, x1, #0x0
 664:	mov	x0, x20
 668:	mov	x3, x19
 66c:	bl	0 <fprintf>
 670:	ldrb	w8, [x21]
 674:	cmp	w8, #0x1
 678:	b.ne	6e0 <remove_error_table+0x174>  // b.any
 67c:	adrp	x0, 0 <setup_et_lock>
 680:	add	x0, x0, #0x0
 684:	bl	0 <sem_post>
 688:	mov	x0, xzr
 68c:	b	5bc <remove_error_table+0x50>
 690:	adrp	x8, 0 <setup_et_lock>
 694:	ldrb	w8, [x8]
 698:	tbz	w8, #0, 6c4 <remove_error_table+0x158>
 69c:	adrp	x8, 0 <setup_et_lock>
 6a0:	ldr	x0, [x19, #8]
 6a4:	ldr	x20, [x8]
 6a8:	bl	0 <error_table_name>
 6ac:	adrp	x1, 0 <setup_et_lock>
 6b0:	mov	x2, x0
 6b4:	add	x1, x1, #0x0
 6b8:	mov	x0, x20
 6bc:	mov	x3, x19
 6c0:	bl	0 <fprintf>
 6c4:	ldrb	w8, [x21]
 6c8:	cmp	w8, #0x1
 6cc:	b.ne	5b8 <remove_error_table+0x4c>  // b.any
 6d0:	adrp	x0, 0 <setup_et_lock>
 6d4:	add	x0, x0, #0x0
 6d8:	bl	0 <sem_post>
 6dc:	b	5b8 <remove_error_table+0x4c>
 6e0:	mov	x0, xzr
 6e4:	b	5bc <remove_error_table+0x50>

00000000000006e8 <add_to_error_table>:
 6e8:	ldr	x0, [x0, #8]
 6ec:	b	314 <add_error_table>

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	adrp	x8, 0 <error_table_name>
   4:	adrp	x9, 0 <error_table_name>
   8:	ubfx	x10, x0, #26, #6
   c:	add	x8, x8, #0x0
  10:	add	x9, x9, #0x0
  14:	cbz	w10, 24 <error_table_name+0x24>
  18:	add	x10, x10, x9
  1c:	ldurb	w10, [x10, #-1]
  20:	strb	w10, [x8], #1
  24:	ubfx	x10, x0, #20, #6
  28:	cbz	w10, 38 <error_table_name+0x38>
  2c:	add	x10, x10, x9
  30:	ldurb	w10, [x10, #-1]
  34:	strb	w10, [x8], #1
  38:	ubfx	x10, x0, #14, #6
  3c:	cbz	w10, 4c <error_table_name+0x4c>
  40:	add	x10, x10, x9
  44:	ldurb	w10, [x10, #-1]
  48:	strb	w10, [x8], #1
  4c:	ubfx	x10, x0, #8, #6
  50:	cbz	w10, 60 <error_table_name+0x60>
  54:	add	x9, x10, x9
  58:	ldurb	w9, [x9, #-1]
  5c:	strb	w9, [x8], #1
  60:	adrp	x0, 0 <error_table_name>
  64:	add	x0, x0, #0x0
  68:	strb	wzr, [x8]
  6c:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	mov	x21, x0
   c:	mov	w0, wzr
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	cbz	x21, 68 <init_error_table+0x68>
  1c:	mov	x20, x1
  20:	cbz	x1, 68 <init_error_table+0x68>
  24:	mov	w19, w2
  28:	cbz	w2, 68 <init_error_table+0x68>
  2c:	mov	w0, #0x28                  	// #40
  30:	bl	0 <malloc>
  34:	cbz	x0, 64 <init_error_table+0x64>
  38:	adrp	x10, 0 <_et_dynamic_list>
  3c:	ldr	x11, [x10]
  40:	mov	x8, x0
  44:	mov	x9, x8
  48:	mov	w0, wzr
  4c:	str	x21, [x9, #16]!
  50:	str	x20, [x8, #24]
  54:	str	w19, [x8, #32]
  58:	stp	x11, x9, [x8]
  5c:	str	x8, [x10]
  60:	b	68 <init_error_table+0x68>
  64:	mov	w0, #0xc                   	// #12
  68:	ldp	x20, x19, [sp, #32]
  6c:	ldr	x21, [sp, #16]
  70:	ldp	x29, x30, [sp], #48
  74:	ret

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	sub	sp, sp, #0x80
   4:	stp	x24, x23, [sp, #80]
   8:	adrp	x24, 0 <stderr>
   c:	ldr	x8, [x24]
  10:	mov	x23, x0
  14:	stp	x29, x30, [sp, #64]
  18:	stp	x22, x21, [sp, #96]
  1c:	mov	x0, x8
  20:	stp	x20, x19, [sp, #112]
  24:	add	x29, sp, #0x40
  28:	mov	x21, x3
  2c:	mov	x20, x2
  30:	mov	x22, x1
  34:	bl	0 <fileno>
  38:	mov	w19, w0
  3c:	cbnz	x23, c4 <default_com_err_proc+0xc4>
  40:	cbnz	x22, ec <default_com_err_proc+0xec>
  44:	cbz	x20, 60 <default_com_err_proc+0x60>
  48:	ldp	q1, q0, [x21]
  4c:	ldr	x0, [x24]
  50:	mov	x2, sp
  54:	mov	x1, x20
  58:	stp	q1, q0, [sp]
  5c:	bl	0 <vfprintf>
  60:	mov	w0, w19
  64:	bl	0 <isatty>
  68:	cbz	w0, 98 <default_com_err_proc+0x98>
  6c:	mov	x1, sp
  70:	mov	w0, w19
  74:	bl	0 <tcgetattr>
  78:	cbnz	w0, 8c <default_com_err_proc+0x8c>
  7c:	ldr	w8, [sp, #4]
  80:	mov	w9, #0x5                   	// #5
  84:	bics	wzr, w9, w8
  88:	b.eq	98 <default_com_err_proc+0x98>  // b.none
  8c:	ldr	x1, [x24]
  90:	mov	w0, #0xd                   	// #13
  94:	bl	0 <fputc>
  98:	ldr	x1, [x24]
  9c:	mov	w0, #0xa                   	// #10
  a0:	bl	0 <fputc>
  a4:	ldr	x0, [x24]
  a8:	bl	0 <fflush>
  ac:	ldp	x20, x19, [sp, #112]
  b0:	ldp	x22, x21, [sp, #96]
  b4:	ldp	x24, x23, [sp, #80]
  b8:	ldp	x29, x30, [sp, #64]
  bc:	add	sp, sp, #0x80
  c0:	ret
  c4:	ldr	x1, [x24]
  c8:	mov	x0, x23
  cc:	bl	0 <fputs>
  d0:	ldr	x3, [x24]
  d4:	adrp	x0, 0 <default_com_err_proc>
  d8:	add	x0, x0, #0x0
  dc:	mov	w1, #0x2                   	// #2
  e0:	mov	w2, #0x1                   	// #1
  e4:	bl	0 <fwrite>
  e8:	cbz	x22, 44 <default_com_err_proc+0x44>
  ec:	mov	x0, x22
  f0:	bl	0 <error_message>
  f4:	ldr	x1, [x24]
  f8:	bl	0 <fputs>
  fc:	ldr	x1, [x24]
 100:	mov	w0, #0x20                  	// #32
 104:	bl	0 <fputc>
 108:	cbnz	x20, 48 <default_com_err_proc+0x48>
 10c:	b	60 <default_com_err_proc+0x60>

0000000000000110 <com_err_va>:
 110:	sub	sp, sp, #0x30
 114:	stp	x29, x30, [sp, #32]
 118:	adrp	x8, 0 <default_com_err_proc>
 11c:	ldp	q0, q1, [x3]
 120:	ldr	x8, [x8]
 124:	mov	x3, sp
 128:	add	x29, sp, #0x20
 12c:	stp	q0, q1, [sp]
 130:	blr	x8
 134:	ldp	x29, x30, [sp, #32]
 138:	add	sp, sp, #0x30
 13c:	ret

0000000000000140 <com_err>:
 140:	sub	sp, sp, #0x100
 144:	adrp	x8, 0 <default_com_err_proc>
 148:	ldr	x9, [x8]
 14c:	stp	x29, x30, [sp, #240]
 150:	add	x29, sp, #0xf0
 154:	stp	x3, x4, [x29, #-104]
 158:	stp	x5, x6, [x29, #-88]
 15c:	stur	x7, [x29, #-72]
 160:	stp	q1, q2, [sp, #16]
 164:	str	q3, [sp, #48]
 168:	str	q0, [sp]
 16c:	stp	q4, q5, [sp, #64]
 170:	stp	q6, q7, [sp, #96]
 174:	cbnz	x9, 184 <com_err+0x44>
 178:	adrp	x9, 0 <default_com_err_proc>
 17c:	add	x9, x9, #0x0
 180:	str	x9, [x8]
 184:	mov	x9, #0xffffffffffffffd8    	// #-40
 188:	mov	x11, sp
 18c:	sub	x12, x29, #0x68
 190:	movk	x9, #0xff80, lsl #32
 194:	add	x10, x29, #0x10
 198:	add	x11, x11, #0x80
 19c:	add	x12, x12, #0x28
 1a0:	stp	x11, x9, [x29, #-48]
 1a4:	stp	x10, x12, [x29, #-64]
 1a8:	ldp	q0, q1, [x29, #-64]
 1ac:	ldr	x8, [x8]
 1b0:	sub	x3, x29, #0x20
 1b4:	stp	q0, q1, [x29, #-32]
 1b8:	blr	x8
 1bc:	ldp	x29, x30, [sp, #240]
 1c0:	add	sp, sp, #0x100
 1c4:	ret

00000000000001c8 <set_com_err_hook>:
 1c8:	adrp	x9, 0 <default_com_err_proc>
 1cc:	ldr	x8, [x9]
 1d0:	adrp	x10, 0 <default_com_err_proc>
 1d4:	add	x10, x10, #0x0
 1d8:	cmp	x0, #0x0
 1dc:	csel	x10, x10, x0, eq  // eq = none
 1e0:	mov	x0, x8
 1e4:	str	x10, [x9]
 1e8:	ret

00000000000001ec <reset_com_err_hook>:
 1ec:	adrp	x8, 0 <default_com_err_proc>
 1f0:	ldr	x0, [x8]
 1f4:	adrp	x9, 0 <default_com_err_proc>
 1f8:	add	x9, x9, #0x0
 1fc:	str	x9, [x8]
 200:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbnz	x0, 10 <com_right+0x10>
   4:	ret
   8:	ldr	x0, [x0]
   c:	cbz	x0, 4 <com_right+0x4>
  10:	ldr	x8, [x0, #8]
  14:	ldr	x9, [x8, #8]
  18:	cmp	x9, x1
  1c:	b.gt	8 <com_right+0x8>
  20:	ldrsw	x10, [x8, #16]
  24:	add	x10, x9, x10
  28:	cmp	x10, x1
  2c:	b.le	8 <com_right+0x8>
  30:	ldr	x8, [x8]
  34:	sub	x9, x1, x9
  38:	ldr	x0, [x8, x9, lsl #3]
  3c:	ret

0000000000000040 <com_right_r>:
  40:	stp	x29, x30, [sp, #-32]!
  44:	stp	x20, x19, [sp, #16]
  48:	mov	x29, sp
  4c:	cbz	x0, a8 <com_right_r+0x68>
  50:	mov	x20, x3
  54:	mov	x19, x2
  58:	b	64 <com_right_r+0x24>
  5c:	ldr	x0, [x0]
  60:	cbz	x0, a8 <com_right_r+0x68>
  64:	ldr	x8, [x0, #8]
  68:	ldr	x9, [x8, #8]
  6c:	cmp	x9, x1
  70:	b.gt	5c <com_right_r+0x1c>
  74:	ldrsw	x10, [x8, #16]
  78:	add	x10, x9, x10
  7c:	cmp	x10, x1
  80:	b.le	5c <com_right_r+0x1c>
  84:	ldr	x8, [x8]
  88:	sub	x9, x1, x9
  8c:	mov	x0, x19
  90:	mov	x2, x20
  94:	ldr	x1, [x8, x9, lsl #3]
  98:	bl	0 <strncpy>
  9c:	add	x8, x20, x19
  a0:	sturb	wzr, [x8, #-1]
  a4:	b	ac <com_right_r+0x6c>
  a8:	mov	x19, xzr
  ac:	mov	x0, x19
  b0:	ldp	x20, x19, [sp, #16]
  b4:	ldp	x29, x30, [sp], #32
  b8:	ret

00000000000000bc <initialize_error_table_r>:
  bc:	stp	x29, x30, [sp, #-48]!
  c0:	stp	x22, x21, [sp, #16]
  c4:	stp	x20, x19, [sp, #32]
  c8:	ldr	x8, [x0]
  cc:	mov	x19, x3
  d0:	mov	w20, w2
  d4:	mov	x21, x0
  d8:	mov	x22, x1
  dc:	mov	x29, sp
  e0:	cbz	x8, 100 <initialize_error_table_r+0x44>
  e4:	mov	x21, x8
  e8:	ldr	x8, [x8, #8]
  ec:	ldr	x8, [x8]
  f0:	cmp	x8, x22
  f4:	b.eq	124 <initialize_error_table_r+0x68>  // b.none
  f8:	ldr	x8, [x21]
  fc:	cbnz	x8, e4 <initialize_error_table_r+0x28>
 100:	mov	w0, #0x28                  	// #40
 104:	bl	0 <malloc>
 108:	cbz	x0, 124 <initialize_error_table_r+0x68>
 10c:	mov	x8, x0
 110:	str	x22, [x8, #16]!
 114:	str	w20, [x0, #32]
 118:	str	x19, [x0, #24]
 11c:	stp	xzr, x8, [x0]
 120:	str	x0, [x21]
 124:	ldp	x20, x19, [sp, #32]
 128:	ldp	x22, x21, [sp, #16]
 12c:	ldp	x29, x30, [sp], #48
 130:	ret

0000000000000134 <free_error_table>:
 134:	stp	x29, x30, [sp, #-32]!
 138:	str	x19, [sp, #16]
 13c:	mov	x29, sp
 140:	cbz	x0, 154 <free_error_table+0x20>
 144:	ldr	x19, [x0]
 148:	bl	0 <free>
 14c:	mov	x0, x19
 150:	cbnz	x19, 144 <free_error_table+0x10>
 154:	ldr	x19, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
